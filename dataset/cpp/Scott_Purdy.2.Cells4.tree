>23	FunctionDef	Cells4 
>24	ParameterList	UInt nColumns , UInt nCellsPerCol , UInt activationThreshold , UInt minThreshold , UInt newSynapseCount , UInt segUpdateValidDuration , \
>25	Parameter	 
>26	Identifier	checkSynapseConsistency
>27	ParameterType	bool
>28	Parameter	 
>29	Identifier	doItAll
>30	ParameterType	bool
>31	Parameter	 
>32	Identifier	seed
>33	ParameterType	int
>34	Parameter	 
>35	Identifier	doPooling
>36	ParameterType	bool
>37	Parameter	 
>38	Identifier	globalDecay
>39	ParameterType	Real
>40	Parameter	 
>41	Identifier	permInc
>42	ParameterType	Real
>43	Parameter	 
>44	Identifier	permDec
>45	ParameterType	Real
>46	Parameter	 
>47	Identifier	permMax
>48	ParameterType	Real
>49	Parameter	 
>50	Identifier	permConnected
>51	ParameterType	Real
>52	Parameter	 
>53	Identifier	permInitial
>54	ParameterType	Real
>55	Parameter	 
>56	Identifier	segUpdateValidDuration
>57	ParameterType	UInt
>58	Parameter	 
>59	Identifier	newSynapseCount
>60	ParameterType	UInt
>61	Parameter	 
>62	Identifier	minThreshold
>63	ParameterType	UInt
>64	Parameter	 
>65	Identifier	activationThreshold
>66	ParameterType	UInt
>67	Parameter	 
>68	Identifier	nCellsPerCol
>69	ParameterType	UInt
>70	Parameter	 
>71	Identifier	nColumns
>72	ParameterType	UInt
>73	CompoundStatement	 
>74	ExpressionStatement	 
>75	CallExpression	initialize ( nColumns , nCellsPerCol , activationThreshold , minThreshold , newSynapseCount , segUpdateValidDuration , \
>76	ArgumentList	nColumns
>77	Argument	checkSynapseConsistency
>78	Identifier	checkSynapseConsistency
>79	Argument	doItAll
>80	Identifier	doItAll
>81	Argument	doPooling
>82	Identifier	doPooling
>83	Argument	globalDecay
>84	Identifier	globalDecay
>85	Argument	permInc
>86	Identifier	permInc
>87	Argument	permDec
>88	Identifier	permDec
>89	Argument	permMax
>90	Identifier	permMax
>91	Argument	permConnected
>92	Identifier	permConnected
>93	Argument	permInitial
>94	Identifier	permInitial
>95	Argument	segUpdateValidDuration
>96	Identifier	segUpdateValidDuration
>97	Argument	newSynapseCount
>98	Identifier	newSynapseCount
>99	Argument	minThreshold
>100	Identifier	minThreshold
>101	Argument	activationThreshold
>102	Identifier	activationThreshold
>103	Argument	nCellsPerCol
>104	Identifier	nCellsPerCol
>105	Argument	nColumns
>106	Identifier	nColumns
>107	Callee	initialize
>108	Identifier	initialize
>109	ExpressionStatement	 
>110	AssignmentExpr	_version = VERSION
>111	Identifier	VERSION
>112	Identifier	_version
>134	FunctionDef	Cells4 
>135	ParameterList	 
>136	CompoundStatement	 
>137	ExpressionStatement	 
>138	Identifier	_tmpInputBuffer
>139	Statement	 
>140	Statement	 
>141	Statement	 
>142	ExpressionStatement	 
>143	Identifier	_colConfidenceCandidate
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	ExpressionStatement	 
>148	Identifier	_cellConfidenceCandidate
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	IfStatement	if ( _ownsMemory )
>153	CompoundStatement	 
>154	ExpressionStatement	 
>155	Identifier	_colConfidenceT1
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	ExpressionStatement	 
>160	Identifier	_colConfidenceT
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	ExpressionStatement	 
>165	Identifier	_cellConfidenceT1
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	ExpressionStatement	 
>170	Identifier	_cellConfidenceT
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Condition	 
>175	Identifier	_ownsMemory
>180	FunctionDef	printActiveColumns (std 
>181	ParameterList	std 
>182	Parameter	 
>183	Identifier	activeColumns
>184	ParameterType	const std 
>185	Parameter	 
>186	Identifier	out
>187	ParameterType	std 
>188	ReturnType	static void
>189	CompoundStatement	 
>190	ExpressionStatement	 
>191	ShiftExpression	out << \"]\"
>192	PrimaryExpression	\"]\"
>193	Identifier	out
>194	ForStatement	for ( UInt i = 0 ; i < activeColumns . size ( ) ; i ++ )
>195	CompoundStatement	 
>196	ExpressionStatement	 
>197	ShiftExpression	out << \" \" << activeColumns [ i ]
>198	ShiftExpression	\" \" << activeColumns [ i ]
>199	ArrayIndexing	activeColumns [ i ]
>200	Identifier	i
>201	Identifier	activeColumns
>202	PrimaryExpression	\" \"
>203	Identifier	out
>204	IncDecOp	 
>205	IncDec	++
>206	Identifier	i
>207	Condition	 
>208	RelationalExpression	i < activeColumns . size ( )
>209	CallExpression	activeColumns . size ( )
>210	ArgumentList	 
>211	Callee	activeColumns . size
>212	MemberAccess	activeColumns . size
>213	Identifier	size
>214	Identifier	activeColumns
>215	Identifier	i
>216	ForInit	 
>217	IdentifierDeclStatement	UInt i = 0 ;
>218	IdentifierDecl	i = 0
>219	AssignmentExpr	i = 0
>220	PrimaryExpression	0
>221	Identifier	i
>222	Identifier	i
>223	IdentifierDeclType	UInt
>224	ExpressionStatement	 
>225	ShiftExpression	out << \"[\"
>226	PrimaryExpression	\"[\"
>227	Identifier	out
>235	FunctionDef	printCell (UInt srcCellIdx , UInt nCellsPerCol)
>236	ParameterList	UInt srcCellIdx , UInt nCellsPerCol
>237	Parameter	 
>238	Identifier	nCellsPerCol
>239	ParameterType	UInt
>240	Parameter	 
>241	Identifier	srcCellIdx
>242	ParameterType	UInt
>243	ReturnType	static void
>244	CompoundStatement	 
>245	ExpressionStatement	 
>246	ShiftExpression	std 
>247	ShiftExpression	\"[\" << col << \",\" << cell << \"]  \"
>248	ShiftExpression	col << \",\" << cell << \"]  \"
>249	ShiftExpression	\",\" << cell << \"]  \"
>250	ShiftExpression	cell << \"]  \"
>251	PrimaryExpression	\"]  \"
>252	Identifier	cell
>253	PrimaryExpression	\",\"
>254	Identifier	col
>255	PrimaryExpression	\"[\"
>256	Identifier	std 
>257	IdentifierDeclStatement	 
>258	IdentifierDecl	cell = srcCellIdx - col * nCellsPerCol
>259	AssignmentExpr	cell = srcCellIdx - col * nCellsPerCol
>260	AdditiveExpression	srcCellIdx - col * nCellsPerCol
>261	MultiplicativeExpression	col * nCellsPerCol
>262	Identifier	nCellsPerCol
>263	Identifier	col
>264	Identifier	srcCellIdx
>265	Identifier	cell
>266	Identifier	cell
>267	IdentifierDeclType	UInt
>268	IdentifierDeclStatement	 
>269	IdentifierDecl	col = ( UInt ) ( srcCellIdx / nCellsPerCol )
>270	AssignmentExpr	col = ( UInt ) ( srcCellIdx / nCellsPerCol )
>271	CastExpression	( UInt ) ( srcCellIdx / nCellsPerCol )
>272	MultiplicativeExpression	srcCellIdx / nCellsPerCol
>273	Identifier	nCellsPerCol
>274	Identifier	srcCellIdx
>275	CastTarget	UInt
>276	Identifier	col
>277	Identifier	col
>278	IdentifierDeclType	UInt
>286	FunctionDef	Cells4 
>287	ParameterList	UInt cellIdx , UInt segIdx , const CState & state
>288	Parameter	 
>289	Identifier	state
>290	ParameterType	const CState &
>291	Parameter	 
>292	Identifier	segIdx
>293	ParameterType	UInt
>294	Parameter	 
>295	Identifier	cellIdx
>296	ParameterType	UInt
>297	ReturnType	bool
>298	CompoundStatement	 
>299	IfStatement	if ( seg . size ( ) < _activationThreshold )
>300	ElseStatement	else
>301	ReturnStatement	 
>302	CallExpression	seg . isActive ( state , _permConnected , _activationThreshold )
>303	ArgumentList	state
>304	Argument	_activationThreshold
>305	Identifier	_activationThreshold
>306	Argument	_permConnected
>307	Identifier	_permConnected
>308	Argument	state
>309	Identifier	state
>310	Callee	seg . isActive
>311	MemberAccess	seg . isActive
>312	Identifier	isActive
>313	Identifier	seg
>314	ReturnStatement	 
>315	Identifier	false
>316	Condition	 
>317	RelationalExpression	seg . size ( ) < _activationThreshold
>318	Identifier	_activationThreshold
>319	CallExpression	seg . size ( )
>320	ArgumentList	 
>321	Callee	seg . size
>322	MemberAccess	seg . size
>323	Identifier	size
>324	Identifier	seg
>325	IdentifierDeclStatement	 
>326	IdentifierDecl	& seg = _cells [ cellIdx ] [ segIdx ]
>327	AssignmentExpr	& seg = _cells [ cellIdx ] [ segIdx ]
>328	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>329	Identifier	segIdx
>330	ArrayIndexing	_cells [ cellIdx ]
>331	Identifier	cellIdx
>332	Identifier	_cells
>333	Identifier	seg
>334	Identifier	seg
>335	IdentifierDeclType	const Segment &
>336	CompoundStatement	 
>337	ExpressionStatement	 
>338	CallExpression	NTA_ASSERT ( segIdx < _cells [ cellIdx ] . size ( ) )
>339	ArgumentList	segIdx < _cells [ cellIdx ] . size ( )
>340	Argument	segIdx < _cells [ cellIdx ] . size ( )
>341	RelationalExpression	segIdx < _cells [ cellIdx ] . size ( )
>342	CallExpression	_cells [ cellIdx ] . size ( )
>343	ArgumentList	 
>344	Callee	_cells [ cellIdx ] . size
>345	MemberAccess	_cells [ cellIdx ] . size
>346	Identifier	size
>347	ArrayIndexing	_cells [ cellIdx ]
>348	Identifier	cellIdx
>349	Identifier	_cells
>350	Identifier	segIdx
>351	Callee	NTA_ASSERT
>352	Identifier	NTA_ASSERT
>353	ExpressionStatement	 
>354	CallExpression	NTA_ASSERT ( cellIdx < nCells ( ) )
>355	ArgumentList	cellIdx < nCells ( )
>356	Argument	cellIdx < nCells ( )
>357	RelationalExpression	cellIdx < nCells ( )
>358	CallExpression	nCells ( )
>359	ArgumentList	 
>360	Callee	nCells
>361	Identifier	nCells
>362	Identifier	cellIdx
>363	Callee	NTA_ASSERT
>364	Identifier	NTA_ASSERT
>385	FunctionDef	Cells4 
>386	ParameterList	UInt cellIdx , UInt segIdx , CStateIndexed & activeState , bool sequenceSegmentFlag , bool newSynapsesFlag
>387	Parameter	 
>388	Identifier	newSynapsesFlag
>389	ParameterType	bool
>390	Parameter	 
>391	Identifier	sequenceSegmentFlag
>392	ParameterType	bool
>393	Parameter	 
>394	Identifier	activeState
>395	ParameterType	CStateIndexed &
>396	Parameter	 
>397	Identifier	segIdx
>398	ParameterType	UInt
>399	Parameter	 
>400	Identifier	cellIdx
>401	ParameterType	UInt
>402	ReturnType	bool
>403	CompoundStatement	 
>404	ReturnStatement	 
>405	Identifier	true
>406	ExpressionStatement	 
>407	CallExpression	_segmentUpdates . push_back ( update )
>408	ArgumentList	update
>409	Argument	update
>410	Identifier	update
>411	Callee	_segmentUpdates . push_back
>412	MemberAccess	_segmentUpdates . push_back
>413	Identifier	push_back
>414	Identifier	_segmentUpdates
>415	IdentifierDeclStatement	 
>416	IdentifierDecl	update ( cellIdx , segIdx , sequenceSegmentFlag , _nLrnIterations , newSynapses )
>417	Expression	cellIdx , segIdx , sequenceSegmentFlag , _nLrnIterations , newSynapses
>418	Expression	segIdx , sequenceSegmentFlag , _nLrnIterations , newSynapses
>419	Expression	sequenceSegmentFlag , _nLrnIterations , newSynapses
>420	Expression	_nLrnIterations , newSynapses
>421	Identifier	newSynapses
>422	Identifier	_nLrnIterations
>423	Identifier	sequenceSegmentFlag
>424	Identifier	segIdx
>425	Identifier	cellIdx
>426	Identifier	update
>427	IdentifierDeclType	SegmentUpdate
>428	IfStatement	if ( newSynapses . empty ( ) )
>429	ReturnStatement	 
>430	Identifier	false
>431	Condition	 
>432	CallExpression	newSynapses . empty ( )
>433	ArgumentList	 
>434	Callee	newSynapses . empty
>435	MemberAccess	newSynapses . empty
>436	Identifier	empty
>437	Identifier	newSynapses
>438	IfStatement	if ( newSynapsesFlag )
>439	CompoundStatement	 
>440	IfStatement	if ( nSynToAdd > 0 )
>441	CompoundStatement	 
>442	ExpressionStatement	 
>443	CallExpression	chooseCellsToLearnFrom ( cellIdx , segIdx , nSynToAdd , activeState , newSynapses )
>444	ArgumentList	cellIdx
>445	Argument	newSynapses
>446	Identifier	newSynapses
>447	Argument	activeState
>448	Identifier	activeState
>449	Argument	nSynToAdd
>450	Identifier	nSynToAdd
>451	Argument	segIdx
>452	Identifier	segIdx
>453	Argument	cellIdx
>454	Identifier	cellIdx
>455	Callee	chooseCellsToLearnFrom
>456	Identifier	chooseCellsToLearnFrom
>457	Condition	 
>458	RelationalExpression	nSynToAdd > 0
>459	PrimaryExpression	0
>460	Identifier	nSynToAdd
>461	IdentifierDeclStatement	 
>462	IdentifierDecl	nSynToAdd = ( int ) _newSynapseCount - ( int ) newSynapses . size ( )
>463	AssignmentExpr	nSynToAdd = ( int ) _newSynapseCount - ( int ) newSynapses . size ( )
>464	AdditiveExpression	( int ) _newSynapseCount - ( int ) newSynapses . size ( )
>465	CastExpression	( int ) newSynapses . size ( )
>466	CallExpression	newSynapses . size ( )
>467	ArgumentList	 
>468	Callee	newSynapses . size
>469	MemberAccess	newSynapses . size
>470	Identifier	size
>471	Identifier	newSynapses
>472	CastTarget	int
>473	CastExpression	( int ) _newSynapseCount
>474	Identifier	_newSynapseCount
>475	CastTarget	int
>476	Identifier	nSynToAdd
>477	Identifier	nSynToAdd
>478	IdentifierDeclType	int
>479	Condition	 
>480	Identifier	newSynapsesFlag
>481	IfStatement	if ( segIdx != ( UInt ) - 1 )
>482	CompoundStatement	 
>483	ForStatement	for ( UInt i = 0 ; i != segment . size ( ) ; ++ i )
>484	IfStatement	if ( activeState . isSet ( segment [ i ] . srcCellIdx ( ) ) )
>485	CompoundStatement	 
>486	ExpressionStatement	 
>487	CallExpression	newSynapses . push_back ( segment [ i ] . srcCellIdx ( ) )
>488	ArgumentList	segment [ i ] . srcCellIdx ( )
>489	Argument	segment [ i ] . srcCellIdx ( )
>490	CallExpression	segment [ i ] . srcCellIdx ( )
>491	ArgumentList	 
>492	Callee	segment [ i ] . srcCellIdx
>493	MemberAccess	segment [ i ] . srcCellIdx
>494	Identifier	srcCellIdx
>495	ArrayIndexing	segment [ i ]
>496	Identifier	i
>497	Identifier	segment
>498	Callee	newSynapses . push_back
>499	MemberAccess	newSynapses . push_back
>500	Identifier	push_back
>501	Identifier	newSynapses
>502	Condition	 
>503	CallExpression	activeState . isSet ( segment [ i ] . srcCellIdx ( ) )
>504	ArgumentList	segment [ i ] . srcCellIdx ( )
>505	Argument	segment [ i ] . srcCellIdx ( )
>506	CallExpression	segment [ i ] . srcCellIdx ( )
>507	ArgumentList	 
>508	Callee	segment [ i ] . srcCellIdx
>509	MemberAccess	segment [ i ] . srcCellIdx
>510	Identifier	srcCellIdx
>511	ArrayIndexing	segment [ i ]
>512	Identifier	i
>513	Identifier	segment
>514	Callee	activeState . isSet
>515	MemberAccess	activeState . isSet
>516	Identifier	isSet
>517	Identifier	activeState
>518	UnaryExpression	 
>519	Identifier	i
>520	IncDec	++
>521	Condition	 
>522	EqualityExpression	i != segment . size ( )
>523	CallExpression	segment . size ( )
>524	ArgumentList	 
>525	Callee	segment . size
>526	MemberAccess	segment . size
>527	Identifier	size
>528	Identifier	segment
>529	Identifier	i
>530	ForInit	 
>531	IdentifierDeclStatement	UInt i = 0 ;
>532	IdentifierDecl	i = 0
>533	AssignmentExpr	i = 0
>534	PrimaryExpression	0
>535	Identifier	i
>536	Identifier	i
>537	IdentifierDeclType	UInt
>538	IfStatement	if ( highWaterSize < segment . size ( ) )
>539	CompoundStatement	 
>540	ExpressionStatement	 
>541	CallExpression	newSynapses . reserve ( highWaterSize )
>542	ArgumentList	highWaterSize
>543	Argument	highWaterSize
>544	Identifier	highWaterSize
>545	Callee	newSynapses . reserve
>546	MemberAccess	newSynapses . reserve
>547	Identifier	reserve
>548	Identifier	newSynapses
>549	ExpressionStatement	 
>550	AssignmentExpr	highWaterSize = segment . size ( )
>551	CallExpression	segment . size ( )
>552	ArgumentList	 
>553	Callee	segment . size
>554	MemberAccess	segment . size
>555	Identifier	size
>556	Identifier	segment
>557	Identifier	highWaterSize
>558	Condition	 
>559	RelationalExpression	highWaterSize < segment . size ( )
>560	CallExpression	segment . size ( )
>561	ArgumentList	 
>562	Callee	segment . size
>563	MemberAccess	segment . size
>564	Identifier	size
>565	Identifier	segment
>566	Identifier	highWaterSize
>567	IdentifierDeclStatement	 
>568	IdentifierDecl	highWaterSize = 0
>569	AssignmentExpr	highWaterSize = 0
>570	PrimaryExpression	0
>571	Identifier	highWaterSize
>572	Identifier	highWaterSize
>573	IdentifierDeclType	UInt
>574	Statement	 
>575	IdentifierDeclStatement	 
>576	IdentifierDecl	& segment = _cells [ cellIdx ] [ segIdx ]
>577	AssignmentExpr	& segment = _cells [ cellIdx ] [ segIdx ]
>578	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>579	Identifier	segIdx
>580	ArrayIndexing	_cells [ cellIdx ]
>581	Identifier	cellIdx
>582	Identifier	_cells
>583	Identifier	segment
>584	Identifier	segment
>585	IdentifierDeclType	Segment &
>586	Condition	 
>587	EqualityExpression	segIdx != ( UInt ) - 1
>588	CastExpression	( UInt ) - 1
>589	UnaryOp	- 1
>590	PrimaryExpression	1
>591	UnaryOperator	-
>592	CastTarget	UInt
>593	Identifier	segIdx
>594	ExpressionStatement	 
>595	CallExpression	newSynapses . clear ( )
>596	ArgumentList	 
>597	Callee	newSynapses . clear
>598	MemberAccess	newSynapses . clear
>599	Identifier	clear
>600	Identifier	newSynapses
>601	IdentifierDeclStatement	 
>602	IdentifierDecl	newSynapses
>603	Identifier	newSynapses
>604	IdentifierDeclType	std 
>605	Statement	 
>606	CompoundStatement	 
>607	ExpressionStatement	 
>608	CallExpression	NTA_ASSERT ( segIdx == ( UInt ) - 1 || segIdx < _cells [ cellIdx ] . size ( ) )
>609	ArgumentList	segIdx == ( UInt ) - 1 || segIdx < _cells [ cellIdx ] . size ( )
>610	Argument	segIdx == ( UInt ) - 1 || segIdx < _cells [ cellIdx ] . size ( )
>611	OrExpression	segIdx == ( UInt ) - 1 || segIdx < _cells [ cellIdx ] . size ( )
>612	RelationalExpression	segIdx < _cells [ cellIdx ] . size ( )
>613	CallExpression	_cells [ cellIdx ] . size ( )
>614	ArgumentList	 
>615	Callee	_cells [ cellIdx ] . size
>616	MemberAccess	_cells [ cellIdx ] . size
>617	Identifier	size
>618	ArrayIndexing	_cells [ cellIdx ]
>619	Identifier	cellIdx
>620	Identifier	_cells
>621	Identifier	segIdx
>622	EqualityExpression	segIdx == ( UInt ) - 1
>623	CastExpression	( UInt ) - 1
>624	UnaryOp	- 1
>625	PrimaryExpression	1
>626	UnaryOperator	-
>627	CastTarget	UInt
>628	Identifier	segIdx
>629	Callee	NTA_ASSERT
>630	Identifier	NTA_ASSERT
>631	ExpressionStatement	 
>632	CallExpression	NTA_ASSERT ( cellIdx < nCells ( ) )
>633	ArgumentList	cellIdx < nCells ( )
>634	Argument	cellIdx < nCells ( )
>635	RelationalExpression	cellIdx < nCells ( )
>636	CallExpression	nCells ( )
>637	ArgumentList	 
>638	Callee	nCells
>639	Identifier	nCells
>640	Identifier	cellIdx
>641	Callee	NTA_ASSERT
>642	Identifier	NTA_ASSERT
>676	FunctionDef	Cells4 
>677	ParameterList	UInt dstCellIdx , UInt dstSegIdx , It newSynapse , It newSynapsesEnd
>678	Parameter	 
>679	Identifier	newSynapsesEnd
>680	ParameterType	It
>681	Parameter	 
>682	Identifier	newSynapse
>683	ParameterType	It
>684	Parameter	 
>685	Identifier	dstSegIdx
>686	ParameterType	UInt
>687	Parameter	 
>688	Identifier	dstCellIdx
>689	ParameterType	UInt
>690	ReturnType	void
>691	CompoundStatement	 
>692	ForStatement	for ( ; newSynapse != newSynapsesEnd ; ++ newSynapse )
>693	CompoundStatement	 
>694	ExpressionStatement	 
>695	CallExpression	_outSynapses [ srcCellIdx ] . push_back ( newOutSyn )
>696	ArgumentList	newOutSyn
>697	Argument	newOutSyn
>698	Identifier	newOutSyn
>699	Callee	_outSynapses [ srcCellIdx ] . push_back
>700	MemberAccess	_outSynapses [ srcCellIdx ] . push_back
>701	Identifier	push_back
>702	ArrayIndexing	_outSynapses [ srcCellIdx ]
>703	Identifier	srcCellIdx
>704	Identifier	_outSynapses
>705	ExpressionStatement	 
>706	CallExpression	NTA_ASSERT ( not_in ( newOutSyn , _outSynapses [ srcCellIdx ] ) )
>707	ArgumentList	not_in ( newOutSyn , _outSynapses [ srcCellIdx ] )
>708	Argument	not_in ( newOutSyn , _outSynapses [ srcCellIdx ] )
>709	CallExpression	not_in ( newOutSyn , _outSynapses [ srcCellIdx ] )
>710	ArgumentList	newOutSyn
>711	Argument	_outSynapses [ srcCellIdx ]
>712	ArrayIndexing	_outSynapses [ srcCellIdx ]
>713	Identifier	srcCellIdx
>714	Identifier	_outSynapses
>715	Argument	newOutSyn
>716	Identifier	newOutSyn
>717	Callee	not_in
>718	Identifier	not_in
>719	Callee	NTA_ASSERT
>720	Identifier	NTA_ASSERT
>721	IdentifierDeclStatement	 
>722	IdentifierDecl	newOutSyn ( dstCellIdx , dstSegIdx )
>723	Expression	dstCellIdx , dstSegIdx
>724	Identifier	dstSegIdx
>725	Identifier	dstCellIdx
>726	Identifier	newOutSyn
>727	IdentifierDeclType	OutSynapse
>728	IdentifierDeclStatement	 
>729	IdentifierDecl	srcCellIdx = * newSynapse
>730	AssignmentExpr	srcCellIdx = * newSynapse
>731	UnaryOp	* newSynapse
>732	Identifier	newSynapse
>733	UnaryOperator	*
>734	Identifier	srcCellIdx
>735	Identifier	srcCellIdx
>736	IdentifierDeclType	UInt
>737	UnaryExpression	 
>738	Identifier	newSynapse
>739	IncDec	++
>740	Condition	 
>741	EqualityExpression	newSynapse != newSynapsesEnd
>742	Identifier	newSynapsesEnd
>743	Identifier	newSynapse
>744	ExpressionStatement	 
>745	CallExpression	NTA_ASSERT ( dstSegIdx < _cells [ dstCellIdx ] . size ( ) )
>746	ArgumentList	dstSegIdx < _cells [ dstCellIdx ] . size ( )
>747	Argument	dstSegIdx < _cells [ dstCellIdx ] . size ( )
>748	RelationalExpression	dstSegIdx < _cells [ dstCellIdx ] . size ( )
>749	CallExpression	_cells [ dstCellIdx ] . size ( )
>750	ArgumentList	 
>751	Callee	_cells [ dstCellIdx ] . size
>752	MemberAccess	_cells [ dstCellIdx ] . size
>753	Identifier	size
>754	ArrayIndexing	_cells [ dstCellIdx ]
>755	Identifier	dstCellIdx
>756	Identifier	_cells
>757	Identifier	dstSegIdx
>758	Callee	NTA_ASSERT
>759	Identifier	NTA_ASSERT
>760	ExpressionStatement	 
>761	CallExpression	NTA_ASSERT ( dstCellIdx < nCells ( ) )
>762	ArgumentList	dstCellIdx < nCells ( )
>763	Argument	dstCellIdx < nCells ( )
>764	RelationalExpression	dstCellIdx < nCells ( )
>765	CallExpression	nCells ( )
>766	ArgumentList	 
>767	Callee	nCells
>768	Identifier	nCells
>769	Identifier	dstCellIdx
>770	Callee	NTA_ASSERT
>771	Identifier	NTA_ASSERT
>795	FunctionDef	Cells4 
>796	ParameterList	UInt dstCellIdx , UInt dstSegIdx , const std 
>797	Parameter	 
>798	Identifier	srcCells
>799	ParameterType	const std 
>800	Parameter	 
>801	Identifier	dstSegIdx
>802	ParameterType	UInt
>803	Parameter	 
>804	Identifier	dstCellIdx
>805	ParameterType	UInt
>806	ReturnType	void
>807	CompoundStatement	 
>808	ForStatement	for ( UInt i = 0 ; i != srcCells . size ( ) ; ++ i )
>809	CompoundStatement	 
>810	ForStatement	for ( UInt j = 0 ; j != outSyns . size ( ) ; ++ j )
>811	IfStatement	if ( outSyns [ j ] . goesTo ( dstCellIdx , dstSegIdx ) )
>812	CompoundStatement	 
>813	BreakStatement	 
>814	ExpressionStatement	 
>815	CallExpression	outSyns . resize ( outSyns . size ( ) - 1 )
>816	ArgumentList	outSyns . size ( ) - 1
>817	Argument	outSyns . size ( ) - 1
>818	AdditiveExpression	outSyns . size ( ) - 1
>819	PrimaryExpression	1
>820	CallExpression	outSyns . size ( )
>821	ArgumentList	 
>822	Callee	outSyns . size
>823	MemberAccess	outSyns . size
>824	Identifier	size
>825	Identifier	outSyns
>826	Callee	outSyns . resize
>827	MemberAccess	outSyns . resize
>828	Identifier	resize
>829	Identifier	outSyns
>830	ExpressionStatement	 
>831	CallExpression	std 
>832	ArgumentList	outSyns [ j ]
>833	Argument	outSyns [ outSyns . size ( ) - 1 ]
>834	ArrayIndexing	outSyns [ outSyns . size ( ) - 1 ]
>835	AdditiveExpression	outSyns . size ( ) - 1
>836	PrimaryExpression	1
>837	CallExpression	outSyns . size ( )
>838	ArgumentList	 
>839	Callee	outSyns . size
>840	MemberAccess	outSyns . size
>841	Identifier	size
>842	Identifier	outSyns
>843	Identifier	outSyns
>844	Argument	outSyns [ j ]
>845	ArrayIndexing	outSyns [ j ]
>846	Identifier	j
>847	Identifier	outSyns
>848	Callee	std 
>849	Identifier	std 
>850	Condition	 
>851	CallExpression	outSyns [ j ] . goesTo ( dstCellIdx , dstSegIdx )
>852	ArgumentList	dstCellIdx
>853	Argument	dstSegIdx
>854	Identifier	dstSegIdx
>855	Argument	dstCellIdx
>856	Identifier	dstCellIdx
>857	Callee	outSyns [ j ] . goesTo
>858	MemberAccess	outSyns [ j ] . goesTo
>859	Identifier	goesTo
>860	ArrayIndexing	outSyns [ j ]
>861	Identifier	j
>862	Identifier	outSyns
>863	UnaryExpression	 
>864	Identifier	j
>865	IncDec	++
>866	Condition	 
>867	EqualityExpression	j != outSyns . size ( )
>868	CallExpression	outSyns . size ( )
>869	ArgumentList	 
>870	Callee	outSyns . size
>871	MemberAccess	outSyns . size
>872	Identifier	size
>873	Identifier	outSyns
>874	Identifier	j
>875	ForInit	 
>876	IdentifierDeclStatement	UInt j = 0 ;
>877	IdentifierDecl	j = 0
>878	AssignmentExpr	j = 0
>879	PrimaryExpression	0
>880	Identifier	j
>881	Identifier	j
>882	IdentifierDeclType	UInt
>883	IdentifierDeclStatement	 
>884	IdentifierDecl	& outSyns = _outSynapses [ srcCellIdx ]
>885	AssignmentExpr	& outSyns = _outSynapses [ srcCellIdx ]
>886	ArrayIndexing	_outSynapses [ srcCellIdx ]
>887	Identifier	srcCellIdx
>888	Identifier	_outSynapses
>889	Identifier	outSyns
>890	Identifier	outSyns
>891	IdentifierDeclType	OutSynapses &
>892	IdentifierDeclStatement	 
>893	IdentifierDecl	srcCellIdx = srcCells [ i ]
>894	AssignmentExpr	srcCellIdx = srcCells [ i ]
>895	ArrayIndexing	srcCells [ i ]
>896	Identifier	i
>897	Identifier	srcCells
>898	Identifier	srcCellIdx
>899	Identifier	srcCellIdx
>900	IdentifierDeclType	UInt
>901	UnaryExpression	 
>902	Identifier	i
>903	IncDec	++
>904	Condition	 
>905	EqualityExpression	i != srcCells . size ( )
>906	CallExpression	srcCells . size ( )
>907	ArgumentList	 
>908	Callee	srcCells . size
>909	MemberAccess	srcCells . size
>910	Identifier	size
>911	Identifier	srcCells
>912	Identifier	i
>913	ForInit	 
>914	IdentifierDeclStatement	UInt i = 0 ;
>915	IdentifierDecl	i = 0
>916	AssignmentExpr	i = 0
>917	PrimaryExpression	0
>918	Identifier	i
>919	Identifier	i
>920	IdentifierDeclType	UInt
>921	ExpressionStatement	 
>922	CallExpression	NTA_ASSERT ( dstSegIdx < _cells [ dstCellIdx ] . size ( ) )
>923	ArgumentList	dstSegIdx < _cells [ dstCellIdx ] . size ( )
>924	Argument	dstSegIdx < _cells [ dstCellIdx ] . size ( )
>925	RelationalExpression	dstSegIdx < _cells [ dstCellIdx ] . size ( )
>926	CallExpression	_cells [ dstCellIdx ] . size ( )
>927	ArgumentList	 
>928	Callee	_cells [ dstCellIdx ] . size
>929	MemberAccess	_cells [ dstCellIdx ] . size
>930	Identifier	size
>931	ArrayIndexing	_cells [ dstCellIdx ]
>932	Identifier	dstCellIdx
>933	Identifier	_cells
>934	Identifier	dstSegIdx
>935	Callee	NTA_ASSERT
>936	Identifier	NTA_ASSERT
>937	ExpressionStatement	 
>938	CallExpression	NTA_ASSERT ( dstCellIdx < nCells ( ) )
>939	ArgumentList	dstCellIdx < nCells ( )
>940	Argument	dstCellIdx < nCells ( )
>941	RelationalExpression	dstCellIdx < nCells ( )
>942	CallExpression	nCells ( )
>943	ArgumentList	 
>944	Callee	nCells
>945	Identifier	nCells
>946	Identifier	dstCellIdx
>947	Callee	NTA_ASSERT
>948	Identifier	NTA_ASSERT
>975	FunctionDef	Cells4 
>976	ParameterList	const std 
>977	Parameter	 
>978	Identifier	activeColumns
>979	ParameterType	const std 
>980	ReturnType	void
>981	CompoundStatement	 
>982	ExpressionStatement	 
>983	CallExpression	TIMER ( infBacktrackTimer . stop ( ) )
>984	ArgumentList	infBacktrackTimer . stop ( )
>985	Argument	infBacktrackTimer . stop ( )
>986	CallExpression	infBacktrackTimer . stop ( )
>987	ArgumentList	 
>988	Callee	infBacktrackTimer . stop
>989	MemberAccess	infBacktrackTimer . stop
>990	Identifier	stop
>991	Identifier	infBacktrackTimer
>992	Callee	TIMER
>993	Identifier	TIMER
>994	ExpressionStatement	 
>995	AssignmentExpr	_infPredictedStateT1 = _infPredictedBackup
>996	Identifier	_infPredictedBackup
>997	Identifier	_infPredictedStateT1
>998	ForStatement	for ( UInt i = 0 ; i < numPrevPatterns ; i ++ )
>999	CompoundStatement	 
>1000	IfStatement	if ( result != badPatterns . end ( ) || ( ( candStartOffset != - 1 ) && ( ( Int ) i <= candStartOffset ) ) )
>1001	ElseStatement	else
>1002	BreakStatement	 
>1003	CompoundStatement	 
>1004	ExpressionStatement	 
>1005	CallExpression	_prevInfPatterns . pop_front ( )
>1006	ArgumentList	 
>1007	Callee	_prevInfPatterns . pop_front
>1008	MemberAccess	_prevInfPatterns . pop_front
>1009	Identifier	pop_front
>1010	Identifier	_prevInfPatterns
>1011	IfStatement	if ( _verbosity >= 3 )
>1012	CompoundStatement	 
>1013	ExpressionStatement	 
>1014	ShiftExpression	std 
>1015	PrimaryExpression	\"\n\"
>1016	Identifier	std 
>1017	ExpressionStatement	 
>1018	CallExpression	printActiveColumns ( std 
>1019	ArgumentList	std 
>1020	Argument	_prevInfPatterns [ 0 ]
>1021	ArrayIndexing	_prevInfPatterns [ 0 ]
>1022	PrimaryExpression	0
>1023	Identifier	_prevInfPatterns
>1024	Argument	std 
>1025	Identifier	std 
>1026	Callee	printActiveColumns
>1027	Identifier	printActiveColumns
>1028	ExpressionStatement	 
>1029	ShiftExpression	std 
>1030	PrimaryExpression	\"Removing useless pattern from history \"
>1031	Identifier	std 
>1032	Condition	 
>1033	RelationalExpression	_verbosity >= 3
>1034	PrimaryExpression	3
>1035	Identifier	_verbosity
>1036	Condition	 
>1037	OrExpression	result != badPatterns . end ( ) || ( ( candStartOffset != - 1 ) && ( ( Int ) i <= candStartOffset ) )
>1038	AndExpression	( candStartOffset != - 1 ) && ( ( Int ) i <= candStartOffset )
>1039	RelationalExpression	( Int ) i <= candStartOffset
>1040	Identifier	candStartOffset
>1041	CastExpression	( Int ) i
>1042	Identifier	i
>1043	CastTarget	Int
>1044	EqualityExpression	candStartOffset != - 1
>1045	UnaryOp	- 1
>1046	PrimaryExpression	1
>1047	UnaryOperator	-
>1048	Identifier	candStartOffset
>1049	EqualityExpression	result != badPatterns . end ( )
>1050	CallExpression	badPatterns . end ( )
>1051	ArgumentList	 
>1052	Callee	badPatterns . end
>1053	MemberAccess	badPatterns . end
>1054	Identifier	end
>1055	Identifier	badPatterns
>1056	Identifier	result
>1057	ExpressionStatement	 
>1058	AssignmentExpr	result = find ( badPatterns . begin ( ) , badPatterns . end ( ) , i )
>1059	CallExpression	find ( badPatterns . begin ( ) , badPatterns . end ( ) , i )
>1060	ArgumentList	badPatterns . begin ( )
>1061	Argument	i
>1062	Identifier	i
>1063	Argument	badPatterns . end ( )
>1064	CallExpression	badPatterns . end ( )
>1065	ArgumentList	 
>1066	Callee	badPatterns . end
>1067	MemberAccess	badPatterns . end
>1068	Identifier	end
>1069	Identifier	badPatterns
>1070	Argument	badPatterns . begin ( )
>1071	CallExpression	badPatterns . begin ( )
>1072	ArgumentList	 
>1073	Callee	badPatterns . begin
>1074	MemberAccess	badPatterns . begin
>1075	Identifier	begin
>1076	Identifier	badPatterns
>1077	Callee	find
>1078	Identifier	find
>1079	Identifier	result
>1080	IdentifierDeclStatement	 
>1081	IdentifierDecl	result
>1082	Identifier	result
>1083	IdentifierDeclType	std 
>1084	IncDecOp	 
>1085	IncDec	++
>1086	Identifier	i
>1087	Condition	 
>1088	RelationalExpression	i < numPrevPatterns
>1089	Identifier	numPrevPatterns
>1090	Identifier	i
>1091	ForInit	 
>1092	IdentifierDeclStatement	UInt i = 0 ;
>1093	IdentifierDecl	i = 0
>1094	AssignmentExpr	i = 0
>1095	PrimaryExpression	0
>1096	Identifier	i
>1097	Identifier	i
>1098	IdentifierDeclType	UInt
>1099	IdentifierDeclStatement	 
>1100	IdentifierDecl	numPrevPatterns = _prevInfPatterns . size ( )
>1101	AssignmentExpr	numPrevPatterns = _prevInfPatterns . size ( )
>1102	CallExpression	_prevInfPatterns . size ( )
>1103	ArgumentList	 
>1104	Callee	_prevInfPatterns . size
>1105	MemberAccess	_prevInfPatterns . size
>1106	Identifier	size
>1107	Identifier	_prevInfPatterns
>1108	Identifier	numPrevPatterns
>1109	Identifier	numPrevPatterns
>1110	IdentifierDeclType	UInt
>1111	IfStatement	if ( candStartOffset == - 1 )
>1112	ElseStatement	else
>1113	CompoundStatement	 
>1114	IfStatement	if ( candStartOffset != ( Int ) currentTimeStepsOffset )
>1115	CompoundStatement	 
>1116	ExpressionStatement	 
>1117	CallExpression	memcpy ( _colConfidenceT , _colConfidenceCandidate , _nColumns * sizeof ( _colConfidenceCandidate [ 0 ] ) )
>1118	ArgumentList	_colConfidenceT
>1119	Argument	_nColumns * sizeof ( _colConfidenceCandidate [ 0 ] )
>1120	MultiplicativeExpression	_nColumns * sizeof ( _colConfidenceCandidate [ 0 ] )
>1121	SizeofExpr	sizeof ( _colConfidenceCandidate [ 0 ] )
>1122	ArrayIndexing	_colConfidenceCandidate [ 0 ]
>1123	PrimaryExpression	0
>1124	Identifier	_colConfidenceCandidate
>1125	Sizeof	sizeof
>1126	Identifier	_nColumns
>1127	Argument	_colConfidenceCandidate
>1128	Identifier	_colConfidenceCandidate
>1129	Argument	_colConfidenceT
>1130	Identifier	_colConfidenceT
>1131	Callee	memcpy
>1132	Identifier	memcpy
>1133	ExpressionStatement	 
>1134	CallExpression	memcpy ( _cellConfidenceT , _cellConfidenceCandidate , _nCells * sizeof ( _cellConfidenceCandidate [ 0 ] ) )
>1135	ArgumentList	_cellConfidenceT
>1136	Argument	_nCells * sizeof ( _cellConfidenceCandidate [ 0 ] )
>1137	MultiplicativeExpression	_nCells * sizeof ( _cellConfidenceCandidate [ 0 ] )
>1138	SizeofExpr	sizeof ( _cellConfidenceCandidate [ 0 ] )
>1139	ArrayIndexing	_cellConfidenceCandidate [ 0 ]
>1140	PrimaryExpression	0
>1141	Identifier	_cellConfidenceCandidate
>1142	Sizeof	sizeof
>1143	Identifier	_nCells
>1144	Argument	_cellConfidenceCandidate
>1145	Identifier	_cellConfidenceCandidate
>1146	Argument	_cellConfidenceT
>1147	Identifier	_cellConfidenceT
>1148	Callee	memcpy
>1149	Identifier	memcpy
>1150	ExpressionStatement	 
>1151	AssignmentExpr	_infPredictedStateT = _infPredictedStateCandidate
>1152	Identifier	_infPredictedStateCandidate
>1153	Identifier	_infPredictedStateT
>1154	ExpressionStatement	 
>1155	AssignmentExpr	_infActiveStateT = _infActiveStateCandidate
>1156	Identifier	_infActiveStateCandidate
>1157	Identifier	_infActiveStateT
>1158	Condition	 
>1159	EqualityExpression	candStartOffset != ( Int ) currentTimeStepsOffset
>1160	CastExpression	( Int ) currentTimeStepsOffset
>1161	Identifier	currentTimeStepsOffset
>1162	CastTarget	Int
>1163	Identifier	candStartOffset
>1164	IfStatement	if ( _verbosity >= 3 )
>1165	CompoundStatement	 
>1166	ExpressionStatement	 
>1167	ShiftExpression	std 
>1168	ShiftExpression	\"Locked on to current input by using start cells from \" << _prevInfPatterns . size ( ) - 1 - candStartOffset << \" \
>1169	ShiftExpression	_prevInfPatterns . size ( ) - 1 - candStartOffset << \" steps ago.\n\"
>1170	PrimaryExpression	\" steps ago.\n\"
>1171	AdditiveExpression	_prevInfPatterns . size ( ) - 1 - candStartOffset
>1172	AdditiveExpression	1 - candStartOffset
>1173	Identifier	candStartOffset
>1174	PrimaryExpression	1
>1175	CallExpression	_prevInfPatterns . size ( )
>1176	ArgumentList	 
>1177	Callee	_prevInfPatterns . size
>1178	MemberAccess	_prevInfPatterns . size
>1179	Identifier	size
>1180	Identifier	_prevInfPatterns
>1181	PrimaryExpression	\"Locked on to current input by using start cells from \"
>1182	Identifier	std 
>1183	Condition	 
>1184	RelationalExpression	_verbosity >= 3
>1185	PrimaryExpression	3
>1186	Identifier	_verbosity
>1187	CompoundStatement	 
>1188	ExpressionStatement	 
>1189	CallExpression	inferPhase2 ( )
>1190	ArgumentList	 
>1191	Callee	inferPhase2
>1192	Identifier	inferPhase2
>1193	ExpressionStatement	 
>1194	AssignmentExpr	_infActiveStateT = _infActiveBackup
>1195	Identifier	_infActiveBackup
>1196	Identifier	_infActiveStateT
>1197	IfStatement	if ( _verbosity >= 3 )
>1198	CompoundStatement	 
>1199	ExpressionStatement	 
>1200	ShiftExpression	std 
>1201	ShiftExpression	\"Failed to lock on.\" << \" Falling back to bursting all unpredicted.\n\"
>1202	PrimaryExpression	\" Falling back to bursting all unpredicted.\n\"
>1203	PrimaryExpression	\"Failed to lock on.\"
>1204	Identifier	std 
>1205	Condition	 
>1206	RelationalExpression	_verbosity >= 3
>1207	PrimaryExpression	3
>1208	Identifier	_verbosity
>1209	Condition	 
>1210	EqualityExpression	candStartOffset == - 1
>1211	UnaryOp	- 1
>1212	PrimaryExpression	1
>1213	UnaryOperator	-
>1214	Identifier	candStartOffset
>1215	ForStatement	for ( ; startOffset < _prevInfPatterns . size ( ) ; startOffset ++ )
>1216	CompoundStatement	 
>1217	IfStatement	if ( ! inSequence )
>1218	ElseStatement	else
>1219	CompoundStatement	 
>1220	BreakStatement	 
>1221	ExpressionStatement	 
>1222	CallExpression	memcpy ( _colConfidenceCandidate , _colConfidenceT , _nColumns * sizeof ( _colConfidenceT [ 0 ] ) )
>1223	ArgumentList	_colConfidenceCandidate
>1224	Argument	_nColumns * sizeof ( _colConfidenceT [ 0 ] )
>1225	MultiplicativeExpression	_nColumns * sizeof ( _colConfidenceT [ 0 ] )
>1226	SizeofExpr	sizeof ( _colConfidenceT [ 0 ] )
>1227	ArrayIndexing	_colConfidenceT [ 0 ]
>1228	PrimaryExpression	0
>1229	Identifier	_colConfidenceT
>1230	Sizeof	sizeof
>1231	Identifier	_nColumns
>1232	Argument	_colConfidenceT
>1233	Identifier	_colConfidenceT
>1234	Argument	_colConfidenceCandidate
>1235	Identifier	_colConfidenceCandidate
>1236	Callee	memcpy
>1237	Identifier	memcpy
>1238	ExpressionStatement	 
>1239	CallExpression	memcpy ( _cellConfidenceCandidate , _cellConfidenceT , _nCells * sizeof ( _cellConfidenceT [ 0 ] ) )
>1240	ArgumentList	_cellConfidenceCandidate
>1241	Argument	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>1242	MultiplicativeExpression	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>1243	SizeofExpr	sizeof ( _cellConfidenceT [ 0 ] )
>1244	ArrayIndexing	_cellConfidenceT [ 0 ]
>1245	PrimaryExpression	0
>1246	Identifier	_cellConfidenceT
>1247	Sizeof	sizeof
>1248	Identifier	_nCells
>1249	Argument	_cellConfidenceT
>1250	Identifier	_cellConfidenceT
>1251	Argument	_cellConfidenceCandidate
>1252	Identifier	_cellConfidenceCandidate
>1253	Callee	memcpy
>1254	Identifier	memcpy
>1255	ExpressionStatement	 
>1256	AssignmentExpr	_infPredictedStateCandidate = _infPredictedStateT
>1257	Identifier	_infPredictedStateT
>1258	Identifier	_infPredictedStateCandidate
>1259	ExpressionStatement	 
>1260	AssignmentExpr	_infActiveStateCandidate = _infActiveStateT
>1261	Identifier	_infActiveStateT
>1262	Identifier	_infActiveStateCandidate
>1263	IfStatement	if ( candStartOffset == ( Int ) currentTimeStepsOffset )
>1264	BreakStatement	 
>1265	Condition	 
>1266	EqualityExpression	candStartOffset == ( Int ) currentTimeStepsOffset
>1267	CastExpression	( Int ) currentTimeStepsOffset
>1268	Identifier	currentTimeStepsOffset
>1269	CastTarget	Int
>1270	Identifier	candStartOffset
>1271	IfStatement	if ( _verbosity >= 3 && ( startOffset != currentTimeStepsOffset ) )
>1272	CompoundStatement	 
>1273	ExpressionStatement	 
>1274	ShiftExpression	std 
>1275	ShiftExpression	\"# Prediction confidence of current input after starting \" << _prevInfPatterns . size ( ) - 1 - startOffset << \" \
>1276	ShiftExpression	_prevInfPatterns . size ( ) - 1 - startOffset << \" steps ago
>1277	ShiftExpression	\" steps ago
>1278	ShiftExpression	totalConfidence << \"\n\"
>1279	PrimaryExpression	\"\n\"
>1280	Identifier	totalConfidence
>1281	PrimaryExpression	\" steps ago
>1282	AdditiveExpression	_prevInfPatterns . size ( ) - 1 - startOffset
>1283	AdditiveExpression	1 - startOffset
>1284	Identifier	startOffset
>1285	PrimaryExpression	1
>1286	CallExpression	_prevInfPatterns . size ( )
>1287	ArgumentList	 
>1288	Callee	_prevInfPatterns . size
>1289	MemberAccess	_prevInfPatterns . size
>1290	Identifier	size
>1291	Identifier	_prevInfPatterns
>1292	PrimaryExpression	\"# Prediction confidence of current input after starting \"
>1293	Identifier	std 
>1294	Condition	 
>1295	AndExpression	_verbosity >= 3 && ( startOffset != currentTimeStepsOffset )
>1296	EqualityExpression	startOffset != currentTimeStepsOffset
>1297	Identifier	currentTimeStepsOffset
>1298	Identifier	startOffset
>1299	RelationalExpression	_verbosity >= 3
>1300	PrimaryExpression	3
>1301	Identifier	_verbosity
>1302	ExpressionStatement	 
>1303	AssignmentExpr	candStartOffset = startOffset
>1304	Identifier	startOffset
>1305	Identifier	candStartOffset
>1306	ExpressionStatement	 
>1307	AssignmentExpr	candConfidence = totalConfidence
>1308	Identifier	totalConfidence
>1309	Identifier	candConfidence
>1310	CompoundStatement	 
>1311	ExpressionStatement	 
>1312	CallExpression	badPatterns . push_back ( startOffset )
>1313	ArgumentList	startOffset
>1314	Argument	startOffset
>1315	Identifier	startOffset
>1316	Callee	badPatterns . push_back
>1317	MemberAccess	badPatterns . push_back
>1318	Identifier	push_back
>1319	Identifier	badPatterns
>1320	Condition	 
>1321	UnaryOp	! inSequence
>1322	Identifier	inSequence
>1323	UnaryOperator	!
>1324	ForStatement	for ( UInt offset = startOffset ; offset < _prevInfPatterns . size ( ) ; offset ++ )
>1325	CompoundStatement	 
>1326	IfStatement	if ( ! inSequence )
>1327	BreakStatement	 
>1328	Condition	 
>1329	UnaryOp	! inSequence
>1330	Identifier	inSequence
>1331	UnaryOperator	!
>1332	ExpressionStatement	 
>1333	AssignmentExpr	inSequence = inferPhase2 ( )
>1334	CallExpression	inferPhase2 ( )
>1335	ArgumentList	 
>1336	Callee	inferPhase2
>1337	Identifier	inferPhase2
>1338	Identifier	inSequence
>1339	IfStatement	if ( _verbosity >= 3 )
>1340	CompoundStatement	 
>1341	ExpressionStatement	 
>1342	ShiftExpression	std 
>1343	PrimaryExpression	\"\n\"
>1344	Identifier	std 
>1345	ExpressionStatement	 
>1346	CallExpression	printActiveColumns ( std 
>1347	ArgumentList	std 
>1348	Argument	_prevInfPatterns [ offset ]
>1349	ArrayIndexing	_prevInfPatterns [ offset ]
>1350	Identifier	offset
>1351	Identifier	_prevInfPatterns
>1352	Argument	std 
>1353	Identifier	std 
>1354	Callee	printActiveColumns
>1355	Identifier	printActiveColumns
>1356	ExpressionStatement	 
>1357	ShiftExpression	std 
>1358	PrimaryExpression	\"  backtrack
>1359	Identifier	std 
>1360	Condition	 
>1361	RelationalExpression	_verbosity >= 3
>1362	PrimaryExpression	3
>1363	Identifier	_verbosity
>1364	IfStatement	if ( ! inSequence )
>1365	BreakStatement	 
>1366	Condition	 
>1367	UnaryOp	! inSequence
>1368	Identifier	inSequence
>1369	UnaryOperator	!
>1370	ExpressionStatement	 
>1371	AssignmentExpr	inSequence = inferPhase1 ( _prevInfPatterns [ offset ] , ( offset == startOffset ) )
>1372	CallExpression	inferPhase1 ( _prevInfPatterns [ offset ] , ( offset == startOffset ) )
>1373	ArgumentList	_prevInfPatterns [ offset ]
>1374	Argument	offset == startOffset
>1375	EqualityExpression	offset == startOffset
>1376	Identifier	startOffset
>1377	Identifier	offset
>1378	Argument	_prevInfPatterns [ offset ]
>1379	ArrayIndexing	_prevInfPatterns [ offset ]
>1380	Identifier	offset
>1381	Identifier	_prevInfPatterns
>1382	Callee	inferPhase1
>1383	Identifier	inferPhase1
>1384	Identifier	inSequence
>1385	ExpressionStatement	 
>1386	AssignmentExpr	_infPredictedStateT1 = _infPredictedStateT
>1387	Identifier	_infPredictedStateT
>1388	Identifier	_infPredictedStateT1
>1389	IfStatement	if ( offset == currentTimeStepsOffset )
>1390	CompoundStatement	 
>1391	ForStatement	for ( UInt i = 0 ; i < activeColumns . size ( ) ; i ++ )
>1392	CompoundStatement	 
>1393	ExpressionStatement	 
>1394	AssignmentExpr	totalConfidence += _colConfidenceT [ activeColumns [ i ] ]
>1395	ArrayIndexing	_colConfidenceT [ activeColumns [ i ] ]
>1396	ArrayIndexing	activeColumns [ i ]
>1397	Identifier	i
>1398	Identifier	activeColumns
>1399	Identifier	_colConfidenceT
>1400	Identifier	totalConfidence
>1401	IncDecOp	 
>1402	IncDec	++
>1403	Identifier	i
>1404	Condition	 
>1405	RelationalExpression	i < activeColumns . size ( )
>1406	CallExpression	activeColumns . size ( )
>1407	ArgumentList	 
>1408	Callee	activeColumns . size
>1409	MemberAccess	activeColumns . size
>1410	Identifier	size
>1411	Identifier	activeColumns
>1412	Identifier	i
>1413	ForInit	 
>1414	IdentifierDeclStatement	UInt i = 0 ;
>1415	IdentifierDecl	i = 0
>1416	AssignmentExpr	i = 0
>1417	PrimaryExpression	0
>1418	Identifier	i
>1419	Identifier	i
>1420	IdentifierDeclType	UInt
>1421	ExpressionStatement	 
>1422	AssignmentExpr	totalConfidence = 0
>1423	PrimaryExpression	0
>1424	Identifier	totalConfidence
>1425	Condition	 
>1426	EqualityExpression	offset == currentTimeStepsOffset
>1427	Identifier	currentTimeStepsOffset
>1428	Identifier	offset
>1429	IncDecOp	 
>1430	IncDec	++
>1431	Identifier	offset
>1432	Condition	 
>1433	RelationalExpression	offset < _prevInfPatterns . size ( )
>1434	CallExpression	_prevInfPatterns . size ( )
>1435	ArgumentList	 
>1436	Callee	_prevInfPatterns . size
>1437	MemberAccess	_prevInfPatterns . size
>1438	Identifier	size
>1439	Identifier	_prevInfPatterns
>1440	Identifier	offset
>1441	ForInit	 
>1442	IdentifierDeclStatement	UInt offset = startOffset ;
>1443	IdentifierDecl	offset = startOffset
>1444	AssignmentExpr	offset = startOffset
>1445	Identifier	startOffset
>1446	Identifier	startOffset
>1447	Identifier	offset
>1448	IdentifierDeclType	UInt
>1449	IdentifierDeclStatement	 
>1450	IdentifierDecl	totalConfidence = 0
>1451	AssignmentExpr	totalConfidence = 0
>1452	PrimaryExpression	0
>1453	Identifier	totalConfidence
>1454	Identifier	totalConfidence
>1455	IdentifierDeclType	Real
>1456	ExpressionStatement	 
>1457	AssignmentExpr	inSequence = false
>1458	Identifier	false
>1459	Identifier	inSequence
>1460	IfStatement	if ( _verbosity >= 3 )
>1461	CompoundStatement	 
>1462	ExpressionStatement	 
>1463	ShiftExpression	std 
>1464	PrimaryExpression	\"\n\"
>1465	Identifier	std 
>1466	ExpressionStatement	 
>1467	CallExpression	printActiveColumns ( std 
>1468	ArgumentList	std 
>1469	Argument	_prevInfPatterns [ startOffset ]
>1470	ArrayIndexing	_prevInfPatterns [ startOffset ]
>1471	Identifier	startOffset
>1472	Identifier	_prevInfPatterns
>1473	Argument	std 
>1474	Identifier	std 
>1475	Callee	printActiveColumns
>1476	Identifier	printActiveColumns
>1477	ExpressionStatement	 
>1478	ShiftExpression	std 
>1479	ShiftExpression	\"Trying to lock-on using startCell state from \" << _prevInfPatterns . size ( ) - 1 - startOffset << \" \
>1480	ShiftExpression	_prevInfPatterns . size ( ) - 1 - startOffset << \" steps ago
>1481	PrimaryExpression	\" steps ago
>1482	AdditiveExpression	_prevInfPatterns . size ( ) - 1 - startOffset
>1483	AdditiveExpression	1 - startOffset
>1484	Identifier	startOffset
>1485	PrimaryExpression	1
>1486	CallExpression	_prevInfPatterns . size ( )
>1487	ArgumentList	 
>1488	Callee	_prevInfPatterns . size
>1489	MemberAccess	_prevInfPatterns . size
>1490	Identifier	size
>1491	Identifier	_prevInfPatterns
>1492	PrimaryExpression	\"Trying to lock-on using startCell state from \"
>1493	Identifier	std 
>1494	Condition	 
>1495	RelationalExpression	_verbosity >= 3
>1496	PrimaryExpression	3
>1497	Identifier	_verbosity
>1498	IfStatement	if ( ( startOffset == currentTimeStepsOffset ) && ( candConfidence != - 1 ) )
>1499	BreakStatement	 
>1500	Condition	 
>1501	AndExpression	( startOffset == currentTimeStepsOffset ) && ( candConfidence != - 1 )
>1502	EqualityExpression	candConfidence != - 1
>1503	UnaryOp	- 1
>1504	PrimaryExpression	1
>1505	UnaryOperator	-
>1506	Identifier	candConfidence
>1507	EqualityExpression	startOffset == currentTimeStepsOffset
>1508	Identifier	currentTimeStepsOffset
>1509	Identifier	startOffset
>1510	IncDecOp	 
>1511	IncDec	++
>1512	Identifier	startOffset
>1513	Condition	 
>1514	RelationalExpression	startOffset < _prevInfPatterns . size ( )
>1515	CallExpression	_prevInfPatterns . size ( )
>1516	ArgumentList	 
>1517	Callee	_prevInfPatterns . size
>1518	MemberAccess	_prevInfPatterns . size
>1519	Identifier	size
>1520	Identifier	_prevInfPatterns
>1521	Identifier	startOffset
>1522	IdentifierDeclStatement	 
>1523	IdentifierDecl	startOffset = 0
>1524	AssignmentExpr	startOffset = 0
>1525	PrimaryExpression	0
>1526	Identifier	startOffset
>1527	Identifier	startOffset
>1528	IdentifierDeclType	UInt
>1529	IdentifierDeclStatement	 
>1530	IdentifierDecl	candStartOffset = - 1
>1531	AssignmentExpr	candStartOffset = - 1
>1532	UnaryOp	- 1
>1533	PrimaryExpression	1
>1534	UnaryOperator	-
>1535	Identifier	candStartOffset
>1536	Identifier	candStartOffset
>1537	IdentifierDeclType	Int
>1538	IdentifierDeclStatement	 
>1539	IdentifierDecl	candConfidence = - 1
>1540	AssignmentExpr	candConfidence = - 1
>1541	UnaryOp	- 1
>1542	PrimaryExpression	1
>1543	UnaryOperator	-
>1544	Identifier	candConfidence
>1545	Identifier	candConfidence
>1546	IdentifierDeclType	Real
>1547	IdentifierDeclStatement	 
>1548	IdentifierDecl	inSequence = false
>1549	AssignmentExpr	inSequence = false
>1550	Identifier	false
>1551	Identifier	false
>1552	Identifier	inSequence
>1553	IdentifierDeclType	bool
>1554	ExpressionStatement	 
>1555	CallExpression	badPatterns . clear ( )
>1556	ArgumentList	 
>1557	Callee	badPatterns . clear
>1558	MemberAccess	badPatterns . clear
>1559	Identifier	clear
>1560	Identifier	badPatterns
>1561	IdentifierDeclStatement	 
>1562	IdentifierDecl	badPatterns
>1563	Identifier	badPatterns
>1564	IdentifierDeclType	std 
>1565	Statement	 
>1566	ExpressionStatement	 
>1567	AssignmentExpr	_infPredictedBackup = _infPredictedStateT1
>1568	Identifier	_infPredictedStateT1
>1569	Identifier	_infPredictedBackup
>1570	ExpressionStatement	 
>1571	AssignmentExpr	_infActiveBackup = _infActiveStateT
>1572	Identifier	_infActiveStateT
>1573	Identifier	_infActiveBackup
>1574	IdentifierDeclStatement	 
>1575	IdentifierDecl	currentTimeStepsOffset = _prevInfPatterns . size ( ) - 1
>1576	AssignmentExpr	currentTimeStepsOffset = _prevInfPatterns . size ( ) - 1
>1577	AdditiveExpression	_prevInfPatterns . size ( ) - 1
>1578	PrimaryExpression	1
>1579	CallExpression	_prevInfPatterns . size ( )
>1580	ArgumentList	 
>1581	Callee	_prevInfPatterns . size
>1582	MemberAccess	_prevInfPatterns . size
>1583	Identifier	size
>1584	Identifier	_prevInfPatterns
>1585	Identifier	currentTimeStepsOffset
>1586	Identifier	currentTimeStepsOffset
>1587	IdentifierDeclType	UInt
>1588	ExpressionStatement	 
>1589	CallExpression	TIMER ( infBacktrackTimer . start ( ) )
>1590	ArgumentList	infBacktrackTimer . start ( )
>1591	Argument	infBacktrackTimer . start ( )
>1592	CallExpression	infBacktrackTimer . start ( )
>1593	ArgumentList	 
>1594	Callee	infBacktrackTimer . start
>1595	MemberAccess	infBacktrackTimer . start
>1596	Identifier	start
>1597	Identifier	infBacktrackTimer
>1598	Callee	TIMER
>1599	Identifier	TIMER
>1600	IfStatement	if ( _prevInfPatterns . size ( ) == 0 )
>1601	ReturnStatement	 
>1602	Condition	 
>1603	EqualityExpression	_prevInfPatterns . size ( ) == 0
>1604	PrimaryExpression	0
>1605	CallExpression	_prevInfPatterns . size ( )
>1606	ArgumentList	 
>1607	Callee	_prevInfPatterns . size
>1608	MemberAccess	_prevInfPatterns . size
>1609	Identifier	size
>1610	Identifier	_prevInfPatterns
>1664	FunctionDef	Cells4 
>1665	ParameterList	UInt startOffset , bool readOnly
>1666	Parameter	 
>1667	Identifier	readOnly
>1668	ParameterType	bool
>1669	Parameter	 
>1670	Identifier	startOffset
>1671	ParameterType	UInt
>1672	ReturnType	bool
>1673	CompoundStatement	 
>1674	ReturnStatement	 
>1675	Identifier	inSequence
>1676	ForStatement	for ( UInt offset = startOffset ; offset < numPrevPatterns ; offset ++ )
>1677	CompoundStatement	 
>1678	ExpressionStatement	 
>1679	CallExpression	TIMER ( learnBacktrackTimer . start ( ) )
>1680	ArgumentList	learnBacktrackTimer . start ( )
>1681	Argument	learnBacktrackTimer . start ( )
>1682	CallExpression	learnBacktrackTimer . start ( )
>1683	ArgumentList	 
>1684	Callee	learnBacktrackTimer . start
>1685	MemberAccess	learnBacktrackTimer . start
>1686	Identifier	start
>1687	Identifier	learnBacktrackTimer
>1688	Callee	TIMER
>1689	Identifier	TIMER
>1690	ExpressionStatement	 
>1691	CallExpression	learnPhase2 ( readOnly )
>1692	ArgumentList	readOnly
>1693	Argument	readOnly
>1694	Identifier	readOnly
>1695	Callee	learnPhase2
>1696	Identifier	learnPhase2
>1697	ExpressionStatement	 
>1698	CallExpression	TIMER ( learnBacktrackTimer . stop ( ) )
>1699	ArgumentList	learnBacktrackTimer . stop ( )
>1700	Argument	learnBacktrackTimer . stop ( )
>1701	CallExpression	learnBacktrackTimer . stop ( )
>1702	ArgumentList	 
>1703	Callee	learnBacktrackTimer . stop
>1704	MemberAccess	learnBacktrackTimer . stop
>1705	Identifier	stop
>1706	Identifier	learnBacktrackTimer
>1707	Callee	TIMER
>1708	Identifier	TIMER
>1709	IfStatement	if ( _verbosity >= 3 )
>1710	CompoundStatement	 
>1711	ExpressionStatement	 
>1712	ShiftExpression	std 
>1713	PrimaryExpression	\"\n\"
>1714	Identifier	std 
>1715	ExpressionStatement	 
>1716	CallExpression	printActiveColumns ( std 
>1717	ArgumentList	std 
>1718	Argument	_prevLrnPatterns [ offset ]
>1719	ArrayIndexing	_prevLrnPatterns [ offset ]
>1720	Identifier	offset
>1721	Identifier	_prevLrnPatterns
>1722	Argument	std 
>1723	Identifier	std 
>1724	Callee	printActiveColumns
>1725	Identifier	printActiveColumns
>1726	ExpressionStatement	 
>1727	ShiftExpression	std 
>1728	PrimaryExpression	\"  backtrack
>1729	Identifier	std 
>1730	Condition	 
>1731	RelationalExpression	_verbosity >= 3
>1732	PrimaryExpression	3
>1733	Identifier	_verbosity
>1734	IfStatement	if ( ! inSequence || ( offset == currentTimeStepsOffset ) )
>1735	BreakStatement	 
>1736	Condition	 
>1737	OrExpression	! inSequence || ( offset == currentTimeStepsOffset )
>1738	EqualityExpression	offset == currentTimeStepsOffset
>1739	Identifier	currentTimeStepsOffset
>1740	Identifier	offset
>1741	UnaryOp	! inSequence
>1742	Identifier	inSequence
>1743	UnaryOperator	!
>1744	IfStatement	if ( offset == startOffset )
>1745	ElseStatement	else
>1746	CompoundStatement	 
>1747	ExpressionStatement	 
>1748	AssignmentExpr	inSequence = learnPhase1 ( _prevLrnPatterns [ offset ] , readOnly )
>1749	CallExpression	learnPhase1 ( _prevLrnPatterns [ offset ] , readOnly )
>1750	ArgumentList	_prevLrnPatterns [ offset ]
>1751	Argument	readOnly
>1752	Identifier	readOnly
>1753	Argument	_prevLrnPatterns [ offset ]
>1754	ArrayIndexing	_prevLrnPatterns [ offset ]
>1755	Identifier	offset
>1756	Identifier	_prevLrnPatterns
>1757	Callee	learnPhase1
>1758	Identifier	learnPhase1
>1759	Identifier	inSequence
>1760	CompoundStatement	 
>1761	ForStatement	for ( UInt i = 0 ; i < _prevLrnPatterns [ offset ] . size ( ) ; i ++ )
>1762	CompoundStatement	 
>1763	ExpressionStatement	 
>1764	AssignmentExpr	inSequence = true
>1765	Identifier	true
>1766	Identifier	inSequence
>1767	ExpressionStatement	 
>1768	CallExpression	_learnActiveStateT . set ( cellIdx )
>1769	ArgumentList	cellIdx
>1770	Argument	cellIdx
>1771	Identifier	cellIdx
>1772	Callee	_learnActiveStateT . set
>1773	MemberAccess	_learnActiveStateT . set
>1774	Identifier	set
>1775	Identifier	_learnActiveStateT
>1776	IdentifierDeclStatement	 
>1777	IdentifierDecl	cellIdx = _prevLrnPatterns [ offset ] [ i ] * _nCellsPerCol
>1778	AssignmentExpr	cellIdx = _prevLrnPatterns [ offset ] [ i ] * _nCellsPerCol
>1779	MultiplicativeExpression	_prevLrnPatterns [ offset ] [ i ] * _nCellsPerCol
>1780	Identifier	_nCellsPerCol
>1781	ArrayIndexing	_prevLrnPatterns [ offset ] [ i ]
>1782	Identifier	i
>1783	ArrayIndexing	_prevLrnPatterns [ offset ]
>1784	Identifier	offset
>1785	Identifier	_prevLrnPatterns
>1786	Identifier	cellIdx
>1787	Identifier	cellIdx
>1788	IdentifierDeclType	UInt
>1789	IncDecOp	 
>1790	IncDec	++
>1791	Identifier	i
>1792	Condition	 
>1793	RelationalExpression	i < _prevLrnPatterns [ offset ] . size ( )
>1794	CallExpression	_prevLrnPatterns [ offset ] . size ( )
>1795	ArgumentList	 
>1796	Callee	_prevLrnPatterns [ offset ] . size
>1797	MemberAccess	_prevLrnPatterns [ offset ] . size
>1798	Identifier	size
>1799	ArrayIndexing	_prevLrnPatterns [ offset ]
>1800	Identifier	offset
>1801	Identifier	_prevLrnPatterns
>1802	Identifier	i
>1803	ForInit	 
>1804	IdentifierDeclStatement	UInt i = 0 ;
>1805	IdentifierDecl	i = 0
>1806	AssignmentExpr	i = 0
>1807	PrimaryExpression	0
>1808	Identifier	i
>1809	Identifier	i
>1810	IdentifierDeclType	UInt
>1811	ExpressionStatement	 
>1812	CallExpression	_learnActiveStateT . resetAll ( )
>1813	ArgumentList	 
>1814	Callee	_learnActiveStateT . resetAll
>1815	MemberAccess	_learnActiveStateT . resetAll
>1816	Identifier	resetAll
>1817	Identifier	_learnActiveStateT
>1818	Condition	 
>1819	EqualityExpression	offset == startOffset
>1820	Identifier	startOffset
>1821	Identifier	offset
>1822	IfStatement	if ( ! readOnly )
>1823	CompoundStatement	 
>1824	ExpressionStatement	 
>1825	CallExpression	processSegmentUpdates ( _tmpInputBuffer , _learnPredictedStateT )
>1826	ArgumentList	_tmpInputBuffer
>1827	Argument	_learnPredictedStateT
>1828	Identifier	_learnPredictedStateT
>1829	Argument	_tmpInputBuffer
>1830	Identifier	_tmpInputBuffer
>1831	Callee	processSegmentUpdates
>1832	Identifier	processSegmentUpdates
>1833	ForStatement	for ( UInt i = 0 ; i < _prevLrnPatterns [ offset ] . size ( ) ; i ++ )
>1834	CompoundStatement	 
>1835	ExpressionStatement	 
>1836	AssignmentExpr	_tmpInputBuffer [ _prevLrnPatterns [ offset ] [ i ] ] = 1
>1837	PrimaryExpression	1
>1838	ArrayIndexing	_tmpInputBuffer [ _prevLrnPatterns [ offset ] [ i ] ]
>1839	ArrayIndexing	_prevLrnPatterns [ offset ] [ i ]
>1840	Identifier	i
>1841	ArrayIndexing	_prevLrnPatterns [ offset ]
>1842	Identifier	offset
>1843	Identifier	_prevLrnPatterns
>1844	Identifier	_tmpInputBuffer
>1845	IncDecOp	 
>1846	IncDec	++
>1847	Identifier	i
>1848	Condition	 
>1849	RelationalExpression	i < _prevLrnPatterns [ offset ] . size ( )
>1850	CallExpression	_prevLrnPatterns [ offset ] . size ( )
>1851	ArgumentList	 
>1852	Callee	_prevLrnPatterns [ offset ] . size
>1853	MemberAccess	_prevLrnPatterns [ offset ] . size
>1854	Identifier	size
>1855	ArrayIndexing	_prevLrnPatterns [ offset ]
>1856	Identifier	offset
>1857	Identifier	_prevLrnPatterns
>1858	Identifier	i
>1859	ForInit	 
>1860	IdentifierDeclStatement	UInt i = 0 ;
>1861	IdentifierDecl	i = 0
>1862	AssignmentExpr	i = 0
>1863	PrimaryExpression	0
>1864	Identifier	i
>1865	Identifier	i
>1866	IdentifierDeclType	UInt
>1867	ExpressionStatement	 
>1868	CallExpression	memset ( _tmpInputBuffer , 0 , _nColumns * sizeof ( _tmpInputBuffer [ 0 ] ) )
>1869	ArgumentList	_tmpInputBuffer
>1870	Argument	_nColumns * sizeof ( _tmpInputBuffer [ 0 ] )
>1871	MultiplicativeExpression	_nColumns * sizeof ( _tmpInputBuffer [ 0 ] )
>1872	SizeofExpr	sizeof ( _tmpInputBuffer [ 0 ] )
>1873	ArrayIndexing	_tmpInputBuffer [ 0 ]
>1874	PrimaryExpression	0
>1875	Identifier	_tmpInputBuffer
>1876	Sizeof	sizeof
>1877	Identifier	_nColumns
>1878	Argument	0
>1879	PrimaryExpression	0
>1880	Argument	_tmpInputBuffer
>1881	Identifier	_tmpInputBuffer
>1882	Callee	memset
>1883	Identifier	memset
>1884	Condition	 
>1885	UnaryOp	! readOnly
>1886	Identifier	readOnly
>1887	UnaryOperator	!
>1888	ExpressionStatement	 
>1889	AssignmentExpr	_learnPredictedStateT1 = _learnPredictedStateT
>1890	Identifier	_learnPredictedStateT
>1891	Identifier	_learnPredictedStateT1
>1892	ExpressionStatement	 
>1893	AssignmentExpr	_learnActiveStateT1 = _learnActiveStateT
>1894	Identifier	_learnActiveStateT
>1895	Identifier	_learnActiveStateT1
>1896	IncDecOp	 
>1897	IncDec	++
>1898	Identifier	offset
>1899	Condition	 
>1900	RelationalExpression	offset < numPrevPatterns
>1901	Identifier	numPrevPatterns
>1902	Identifier	offset
>1903	ForInit	 
>1904	IdentifierDeclStatement	UInt offset = startOffset ;
>1905	IdentifierDecl	offset = startOffset
>1906	AssignmentExpr	offset = startOffset
>1907	Identifier	startOffset
>1908	Identifier	startOffset
>1909	Identifier	offset
>1910	IdentifierDeclType	UInt
>1911	IdentifierDeclStatement	 
>1912	IdentifierDecl	inSequence = true
>1913	AssignmentExpr	inSequence = true
>1914	Identifier	true
>1915	Identifier	true
>1916	Identifier	inSequence
>1917	IdentifierDeclType	bool
>1918	IfStatement	if ( _verbosity >= 3 )
>1919	CompoundStatement	 
>1920	ExpressionStatement	 
>1921	ShiftExpression	std 
>1922	PrimaryExpression	\"\n\"
>1923	Identifier	std 
>1924	ExpressionStatement	 
>1925	CallExpression	printActiveColumns ( std 
>1926	ArgumentList	std 
>1927	Argument	_prevLrnPatterns [ startOffset ]
>1928	ArrayIndexing	_prevLrnPatterns [ startOffset ]
>1929	Identifier	startOffset
>1930	Identifier	_prevLrnPatterns
>1931	Argument	std 
>1932	Identifier	std 
>1933	Callee	printActiveColumns
>1934	Identifier	printActiveColumns
>1935	ExpressionStatement	 
>1936	ShiftExpression	std 
>1937	ShiftExpression	numPrevPatterns - 1 - startOffset << \" steps ago\n\"
>1938	PrimaryExpression	\" steps ago\n\"
>1939	AdditiveExpression	numPrevPatterns - 1 - startOffset
>1940	AdditiveExpression	1 - startOffset
>1941	Identifier	startOffset
>1942	PrimaryExpression	1
>1943	Identifier	numPrevPatterns
>1944	Identifier	std 
>1945	IfStatement	if ( readOnly )
>1946	ElseStatement	else
>1947	CompoundStatement	 
>1948	ExpressionStatement	 
>1949	ShiftExpression	std 
>1950	PrimaryExpression	\" Locking on using startCell state from \"
>1951	Identifier	std 
>1952	CompoundStatement	 
>1953	ExpressionStatement	 
>1954	ShiftExpression	std 
>1955	PrimaryExpression	\" Trying to lock-on using startCell state from \"
>1956	Identifier	std 
>1957	Condition	 
>1958	Identifier	readOnly
>1959	ExpressionStatement	 
>1960	ShiftExpression	std 
>1961	ShiftExpression	\"startOffset = \" << startOffset
>1962	Identifier	startOffset
>1963	PrimaryExpression	\"startOffset = \"
>1964	Identifier	std 
>1965	Condition	 
>1966	RelationalExpression	_verbosity >= 3
>1967	PrimaryExpression	3
>1968	Identifier	_verbosity
>1969	IfStatement	if ( ! readOnly )
>1970	CompoundStatement	 
>1971	ExpressionStatement	 
>1972	CallExpression	_segmentUpdates . clear ( )
>1973	ArgumentList	 
>1974	Callee	_segmentUpdates . clear
>1975	MemberAccess	_segmentUpdates . clear
>1976	Identifier	clear
>1977	Identifier	_segmentUpdates
>1978	Condition	 
>1979	UnaryOp	! readOnly
>1980	Identifier	readOnly
>1981	UnaryOperator	!
>1982	IdentifierDeclStatement	 
>1983	IdentifierDecl	currentTimeStepsOffset = numPrevPatterns - 1
>1984	AssignmentExpr	currentTimeStepsOffset = numPrevPatterns - 1
>1985	AdditiveExpression	numPrevPatterns - 1
>1986	PrimaryExpression	1
>1987	Identifier	numPrevPatterns
>1988	Identifier	currentTimeStepsOffset
>1989	Identifier	currentTimeStepsOffset
>1990	IdentifierDeclType	UInt
>1991	ExpressionStatement	 
>1992	CallExpression	NTA_CHECK ( numPrevPatterns >= 2 )
>1993	ArgumentList	numPrevPatterns >= 2
>1994	Argument	numPrevPatterns >= 2
>1995	RelationalExpression	numPrevPatterns >= 2
>1996	PrimaryExpression	2
>1997	Identifier	numPrevPatterns
>1998	Callee	NTA_CHECK
>1999	Identifier	NTA_CHECK
>2000	IdentifierDeclStatement	 
>2001	IdentifierDecl	numPrevPatterns = _prevLrnPatterns . size ( )
>2002	AssignmentExpr	numPrevPatterns = _prevLrnPatterns . size ( )
>2003	CallExpression	_prevLrnPatterns . size ( )
>2004	ArgumentList	 
>2005	Callee	_prevLrnPatterns . size
>2006	MemberAccess	_prevLrnPatterns . size
>2007	Identifier	size
>2008	Identifier	_prevLrnPatterns
>2009	Identifier	numPrevPatterns
>2010	Identifier	numPrevPatterns
>2011	IdentifierDeclType	UInt
>2051	FunctionDef	Cells4 
>2052	ParameterList	 
>2053	ReturnType	UInt
>2054	CompoundStatement	 
>2055	ReturnStatement	 
>2056	AdditiveExpression	numPrevPatterns - startOffset
>2057	Identifier	startOffset
>2058	Identifier	numPrevPatterns
>2059	ForStatement	for ( UInt i = 0 ; i < ( UInt ) numPrevPatterns ; i ++ )
>2060	CompoundStatement	 
>2061	IfStatement	if ( result != badPatterns . end ( ) || ( i <= startOffset ) )
>2062	ElseStatement	else
>2063	BreakStatement	 
>2064	CompoundStatement	 
>2065	ExpressionStatement	 
>2066	CallExpression	_prevLrnPatterns . pop_front ( )
>2067	ArgumentList	 
>2068	Callee	_prevLrnPatterns . pop_front
>2069	MemberAccess	_prevLrnPatterns . pop_front
>2070	Identifier	pop_front
>2071	Identifier	_prevLrnPatterns
>2072	IfStatement	if ( _verbosity >= 3 )
>2073	CompoundStatement	 
>2074	ExpressionStatement	 
>2075	ShiftExpression	std 
>2076	PrimaryExpression	\"\n\"
>2077	Identifier	std 
>2078	ExpressionStatement	 
>2079	CallExpression	printActiveColumns ( std 
>2080	ArgumentList	std 
>2081	Argument	_prevLrnPatterns [ 0 ]
>2082	ArrayIndexing	_prevLrnPatterns [ 0 ]
>2083	PrimaryExpression	0
>2084	Identifier	_prevLrnPatterns
>2085	Argument	std 
>2086	Identifier	std 
>2087	Callee	printActiveColumns
>2088	Identifier	printActiveColumns
>2089	ExpressionStatement	 
>2090	ShiftExpression	std 
>2091	PrimaryExpression	\"Removing useless pattern from history \"
>2092	Identifier	std 
>2093	Condition	 
>2094	RelationalExpression	_verbosity >= 3
>2095	PrimaryExpression	3
>2096	Identifier	_verbosity
>2097	Condition	 
>2098	OrExpression	result != badPatterns . end ( ) || ( i <= startOffset )
>2099	RelationalExpression	i <= startOffset
>2100	Identifier	startOffset
>2101	Identifier	i
>2102	EqualityExpression	result != badPatterns . end ( )
>2103	CallExpression	badPatterns . end ( )
>2104	ArgumentList	 
>2105	Callee	badPatterns . end
>2106	MemberAccess	badPatterns . end
>2107	Identifier	end
>2108	Identifier	badPatterns
>2109	Identifier	result
>2110	ExpressionStatement	 
>2111	AssignmentExpr	result = find ( badPatterns . begin ( ) , badPatterns . end ( ) , i )
>2112	CallExpression	find ( badPatterns . begin ( ) , badPatterns . end ( ) , i )
>2113	ArgumentList	badPatterns . begin ( )
>2114	Argument	i
>2115	Identifier	i
>2116	Argument	badPatterns . end ( )
>2117	CallExpression	badPatterns . end ( )
>2118	ArgumentList	 
>2119	Callee	badPatterns . end
>2120	MemberAccess	badPatterns . end
>2121	Identifier	end
>2122	Identifier	badPatterns
>2123	Argument	badPatterns . begin ( )
>2124	CallExpression	badPatterns . begin ( )
>2125	ArgumentList	 
>2126	Callee	badPatterns . begin
>2127	MemberAccess	badPatterns . begin
>2128	Identifier	begin
>2129	Identifier	badPatterns
>2130	Callee	find
>2131	Identifier	find
>2132	Identifier	result
>2133	IdentifierDeclStatement	 
>2134	IdentifierDecl	result
>2135	Identifier	result
>2136	IdentifierDeclType	std 
>2137	IncDecOp	 
>2138	IncDec	++
>2139	Identifier	i
>2140	Condition	 
>2141	RelationalExpression	i < ( UInt ) numPrevPatterns
>2142	CastExpression	( UInt ) numPrevPatterns
>2143	Identifier	numPrevPatterns
>2144	CastTarget	UInt
>2145	Identifier	i
>2146	ForInit	 
>2147	IdentifierDeclStatement	UInt i = 0 ;
>2148	IdentifierDecl	i = 0
>2149	AssignmentExpr	i = 0
>2150	PrimaryExpression	0
>2151	Identifier	i
>2152	Identifier	i
>2153	IdentifierDeclType	UInt
>2154	ExpressionStatement	 
>2155	CallExpression	learnBacktrackFrom ( startOffset , false )
>2156	ArgumentList	startOffset
>2157	Argument	false
>2158	Identifier	false
>2159	Argument	startOffset
>2160	Identifier	startOffset
>2161	Callee	learnBacktrackFrom
>2162	Identifier	learnBacktrackFrom
>2163	IfStatement	if ( _verbosity >= 3 )
>2164	CompoundStatement	 
>2165	ExpressionStatement	 
>2166	CallExpression	dumpPrevPatterns ( _prevLrnPatterns )
>2167	ArgumentList	_prevLrnPatterns
>2168	Argument	_prevLrnPatterns
>2169	Identifier	_prevLrnPatterns
>2170	Callee	dumpPrevPatterns
>2171	Identifier	dumpPrevPatterns
>2172	ExpressionStatement	 
>2173	ShiftExpression	std 
>2174	ShiftExpression	\"Discovered path to current input by using start cells from \" << numPrevPatterns - startOffset << \" \
>2175	ShiftExpression	numPrevPatterns - startOffset << \" steps ago
>2176	PrimaryExpression	\" steps ago
>2177	AdditiveExpression	numPrevPatterns - startOffset
>2178	Identifier	startOffset
>2179	Identifier	numPrevPatterns
>2180	PrimaryExpression	\"Discovered path to current input by using start cells from \"
>2181	Identifier	std 
>2182	Condition	 
>2183	RelationalExpression	_verbosity >= 3
>2184	PrimaryExpression	3
>2185	Identifier	_verbosity
>2186	IfStatement	if ( ! inSequence )
>2187	CompoundStatement	 
>2188	ReturnStatement	 
>2189	Identifier	false
>2190	ExpressionStatement	 
>2191	CallExpression	_prevLrnPatterns . clear ( )
>2192	ArgumentList	 
>2193	Callee	_prevLrnPatterns . clear
>2194	MemberAccess	_prevLrnPatterns . clear
>2195	Identifier	clear
>2196	Identifier	_prevLrnPatterns
>2197	IfStatement	if ( _verbosity >= 3 )
>2198	CompoundStatement	 
>2199	ExpressionStatement	 
>2200	ShiftExpression	std 
>2201	ShiftExpression	\"Failed to lock on.\" << \" Falling back to start cells on current time step.\n\"
>2202	PrimaryExpression	\" Falling back to start cells on current time step.\n\"
>2203	PrimaryExpression	\"Failed to lock on.\"
>2204	Identifier	std 
>2205	Condition	 
>2206	RelationalExpression	_verbosity >= 3
>2207	PrimaryExpression	3
>2208	Identifier	_verbosity
>2209	Condition	 
>2210	UnaryOp	! inSequence
>2211	Identifier	inSequence
>2212	UnaryOperator	!
>2213	ForStatement	for ( ; startOffset < ( UInt ) numPrevPatterns ; startOffset ++ )
>2214	CompoundStatement	 
>2215	ExpressionStatement	 
>2216	CallExpression	badPatterns . push_back ( startOffset )
>2217	ArgumentList	startOffset
>2218	Argument	startOffset
>2219	Identifier	startOffset
>2220	Callee	badPatterns . push_back
>2221	MemberAccess	badPatterns . push_back
>2222	Identifier	push_back
>2223	Identifier	badPatterns
>2224	IfStatement	if ( inSequence )
>2225	BreakStatement	 
>2226	Condition	 
>2227	Identifier	inSequence
>2228	ExpressionStatement	 
>2229	AssignmentExpr	inSequence = learnBacktrackFrom ( startOffset , true )
>2230	CallExpression	learnBacktrackFrom ( startOffset , true )
>2231	ArgumentList	startOffset
>2232	Argument	true
>2233	Identifier	true
>2234	Argument	startOffset
>2235	Identifier	startOffset
>2236	Callee	learnBacktrackFrom
>2237	Identifier	learnBacktrackFrom
>2238	Identifier	inSequence
>2239	IncDecOp	 
>2240	IncDec	++
>2241	Identifier	startOffset
>2242	Condition	 
>2243	RelationalExpression	startOffset < ( UInt ) numPrevPatterns
>2244	CastExpression	( UInt ) numPrevPatterns
>2245	Identifier	numPrevPatterns
>2246	CastTarget	UInt
>2247	Identifier	startOffset
>2248	IdentifierDeclStatement	 
>2249	IdentifierDecl	startOffset = 0
>2250	AssignmentExpr	startOffset = 0
>2251	PrimaryExpression	0
>2252	Identifier	startOffset
>2253	Identifier	startOffset
>2254	IdentifierDeclType	UInt
>2255	IdentifierDeclStatement	 
>2256	IdentifierDecl	inSequence = false
>2257	AssignmentExpr	inSequence = false
>2258	Identifier	false
>2259	Identifier	false
>2260	Identifier	inSequence
>2261	IdentifierDeclType	bool
>2262	ExpressionStatement	 
>2263	CallExpression	badPatterns . clear ( )
>2264	ArgumentList	 
>2265	Callee	badPatterns . clear
>2266	MemberAccess	badPatterns . clear
>2267	Identifier	clear
>2268	Identifier	badPatterns
>2269	IdentifierDeclStatement	 
>2270	IdentifierDecl	badPatterns
>2271	Identifier	badPatterns
>2272	IdentifierDeclType	std 
>2273	Statement	 
>2274	IfStatement	if ( numPrevPatterns <= 0 )
>2275	CompoundStatement	 
>2276	ReturnStatement	 
>2277	Identifier	false
>2278	IfStatement	if ( _verbosity >= 3 )
>2279	CompoundStatement	 
>2280	ExpressionStatement	 
>2281	ShiftExpression	std 
>2282	PrimaryExpression	\"lrnBacktrack
>2283	Identifier	std 
>2284	Condition	 
>2285	RelationalExpression	_verbosity >= 3
>2286	PrimaryExpression	3
>2287	Identifier	_verbosity
>2288	Condition	 
>2289	RelationalExpression	numPrevPatterns <= 0
>2290	PrimaryExpression	0
>2291	Identifier	numPrevPatterns
>2292	IdentifierDeclStatement	 
>2293	IdentifierDecl	numPrevPatterns = _prevLrnPatterns . size ( ) - 1
>2294	AssignmentExpr	numPrevPatterns = _prevLrnPatterns . size ( ) - 1
>2295	AdditiveExpression	_prevLrnPatterns . size ( ) - 1
>2296	PrimaryExpression	1
>2297	CallExpression	_prevLrnPatterns . size ( )
>2298	ArgumentList	 
>2299	Callee	_prevLrnPatterns . size
>2300	MemberAccess	_prevLrnPatterns . size
>2301	Identifier	size
>2302	Identifier	_prevLrnPatterns
>2303	Identifier	numPrevPatterns
>2304	Identifier	numPrevPatterns
>2305	IdentifierDeclType	Int
>2326	FunctionDef	Cells4 
>2327	ParameterList	UInt colIdx
>2328	Parameter	 
>2329	Identifier	colIdx
>2330	ParameterType	UInt
>2331	ReturnType	UInt
>2332	CompoundStatement	 
>2333	ReturnStatement	 
>2334	Identifier	candidateCellIdx
>2335	ExpressionStatement	 
>2336	CallExpression	TIMER ( getNewCellTimer . stop ( ) )
>2337	ArgumentList	getNewCellTimer . stop ( )
>2338	Argument	getNewCellTimer . stop ( )
>2339	CallExpression	getNewCellTimer . stop ( )
>2340	ArgumentList	 
>2341	Callee	getNewCellTimer . stop
>2342	MemberAccess	getNewCellTimer . stop
>2343	Identifier	stop
>2344	Identifier	getNewCellTimer
>2345	Callee	TIMER
>2346	Identifier	TIMER
>2347	ExpressionStatement	 
>2348	CallExpression	_cells [ candidateCellIdx ] . releaseSegment ( candidateSegmentIdx )
>2349	ArgumentList	candidateSegmentIdx
>2350	Argument	candidateSegmentIdx
>2351	Identifier	candidateSegmentIdx
>2352	Callee	_cells [ candidateCellIdx ] . releaseSegment
>2353	MemberAccess	_cells [ candidateCellIdx ] . releaseSegment
>2354	Identifier	releaseSegment
>2355	ArrayIndexing	_cells [ candidateCellIdx ]
>2356	Identifier	candidateCellIdx
>2357	Identifier	_cells
>2358	ExpressionStatement	 
>2359	CallExpression	cleanUpdatesList ( candidateCellIdx , candidateSegmentIdx )
>2360	ArgumentList	candidateCellIdx
>2361	Argument	candidateSegmentIdx
>2362	Identifier	candidateSegmentIdx
>2363	Argument	candidateCellIdx
>2364	Identifier	candidateCellIdx
>2365	Callee	cleanUpdatesList
>2366	Identifier	cleanUpdatesList
>2367	ExpressionStatement	 
>2368	CallExpression	eraseOutSynapses ( candidateCellIdx , candidateSegmentIdx , synsToRemove )
>2369	ArgumentList	candidateCellIdx
>2370	Argument	synsToRemove
>2371	Identifier	synsToRemove
>2372	Argument	candidateSegmentIdx
>2373	Identifier	candidateSegmentIdx
>2374	Argument	candidateCellIdx
>2375	Identifier	candidateCellIdx
>2376	Callee	eraseOutSynapses
>2377	Identifier	eraseOutSynapses
>2378	ExpressionStatement	 
>2379	CallExpression	_cells [ candidateCellIdx ] [ candidateSegmentIdx ] . getSrcCellIndices ( synsToRemove )
>2380	ArgumentList	synsToRemove
>2381	Argument	synsToRemove
>2382	Identifier	synsToRemove
>2383	Callee	_cells [ candidateCellIdx ] [ candidateSegmentIdx ] . getSrcCellIndices
>2384	MemberAccess	_cells [ candidateCellIdx ] [ candidateSegmentIdx ] . getSrcCellIndices
>2385	Identifier	getSrcCellIndices
>2386	ArrayIndexing	_cells [ candidateCellIdx ] [ candidateSegmentIdx ]
>2387	Identifier	candidateSegmentIdx
>2388	ArrayIndexing	_cells [ candidateCellIdx ]
>2389	Identifier	candidateCellIdx
>2390	Identifier	_cells
>2391	ExpressionStatement	 
>2392	CallExpression	synsToRemove . clear ( )
>2393	ArgumentList	 
>2394	Callee	synsToRemove . clear
>2395	MemberAccess	synsToRemove . clear
>2396	Identifier	clear
>2397	Identifier	synsToRemove
>2398	IdentifierDeclStatement	 
>2399	IdentifierDecl	synsToRemove
>2400	Identifier	synsToRemove
>2401	IdentifierDeclType	std 
>2402	IfStatement	if ( _verbosity >= 5 )
>2403	CompoundStatement	 
>2404	ExpressionStatement	 
>2405	ShiftExpression	std 
>2406	PrimaryExpression	\"\n\"
>2407	Identifier	std 
>2408	ExpressionStatement	 
>2409	CallExpression	_cells [ candidateCellIdx ] [ candidateSegmentIdx ] . print ( std 
>2410	ArgumentList	std 
>2411	Argument	_nCellsPerCol
>2412	Identifier	_nCellsPerCol
>2413	Argument	std 
>2414	Identifier	std 
>2415	Callee	_cells [ candidateCellIdx ] [ candidateSegmentIdx ] . print
>2416	MemberAccess	_cells [ candidateCellIdx ] [ candidateSegmentIdx ] . print
>2417	Identifier	print
>2418	ArrayIndexing	_cells [ candidateCellIdx ] [ candidateSegmentIdx ]
>2419	Identifier	candidateSegmentIdx
>2420	ArrayIndexing	_cells [ candidateCellIdx ]
>2421	Identifier	candidateCellIdx
>2422	Identifier	_cells
>2423	ExpressionStatement	 
>2424	ShiftExpression	std 
>2425	ShiftExpression	\"Deleting segment #\" << candidateSegmentIdx << \" for cell[\" << colIdx << \",\" << candidateCellIdx - getCellIdx ( \
>2426	ShiftExpression	candidateSegmentIdx << \" for cell[\" << colIdx << \",\" << candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] \
>2427	ShiftExpression	\" for cell[\" << colIdx << \",\" << candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] to make room for \
>2428	ShiftExpression	colIdx << \",\" << candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] to make room for new segment \"
>2429	ShiftExpression	\",\" << candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] to make room for new segment \"
>2430	ShiftExpression	candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] to make room for new segment \"
>2431	PrimaryExpression	\"] to make room for new segment \"
>2432	AdditiveExpression	candidateCellIdx - getCellIdx ( colIdx , 0 )
>2433	CallExpression	getCellIdx ( colIdx , 0 )
>2434	ArgumentList	colIdx
>2435	Argument	0
>2436	PrimaryExpression	0
>2437	Argument	colIdx
>2438	Identifier	colIdx
>2439	Callee	getCellIdx
>2440	Identifier	getCellIdx
>2441	Identifier	candidateCellIdx
>2442	PrimaryExpression	\",\"
>2443	Identifier	colIdx
>2444	PrimaryExpression	\" for cell[\"
>2445	Identifier	candidateSegmentIdx
>2446	PrimaryExpression	\"Deleting segment #\"
>2447	Identifier	std 
>2448	Condition	 
>2449	RelationalExpression	_verbosity >= 5
>2450	PrimaryExpression	5
>2451	Identifier	_verbosity
>2452	ForStatement	for ( UInt i = minIdx ; i <= maxIdx ; i ++ )
>2453	CompoundStatement	 
>2454	ForStatement	for ( UInt segIdx = 0 ; segIdx < _cells [ i ] . size ( ) ; segIdx ++ )
>2455	CompoundStatement	 
>2456	IfStatement	if ( ! _cells [ i ] [ segIdx ] . empty ( ) )
>2457	CompoundStatement	 
>2458	IfStatement	if ( dc < candidateSegmentDC )
>2459	CompoundStatement	 
>2460	ExpressionStatement	 
>2461	AssignmentExpr	candidateSegmentIdx = segIdx
>2462	Identifier	segIdx
>2463	Identifier	candidateSegmentIdx
>2464	ExpressionStatement	 
>2465	AssignmentExpr	candidateSegmentDC = dc
>2466	Identifier	dc
>2467	Identifier	candidateSegmentDC
>2468	ExpressionStatement	 
>2469	AssignmentExpr	candidateCellIdx = i
>2470	Identifier	i
>2471	Identifier	candidateCellIdx
>2472	Condition	 
>2473	RelationalExpression	dc < candidateSegmentDC
>2474	Identifier	candidateSegmentDC
>2475	Identifier	dc
>2476	IdentifierDeclStatement	 
>2477	IdentifierDecl	dc = _cells [ i ] [ segIdx ] . dutyCycle ( _nLrnIterations , false , false )
>2478	AssignmentExpr	dc = _cells [ i ] [ segIdx ] . dutyCycle ( _nLrnIterations , false , false )
>2479	CallExpression	_cells [ i ] [ segIdx ] . dutyCycle ( _nLrnIterations , false , false )
>2480	ArgumentList	_nLrnIterations
>2481	Argument	false
>2482	Identifier	false
>2483	Argument	false
>2484	Identifier	false
>2485	Argument	_nLrnIterations
>2486	Identifier	_nLrnIterations
>2487	Callee	_cells [ i ] [ segIdx ] . dutyCycle
>2488	MemberAccess	_cells [ i ] [ segIdx ] . dutyCycle
>2489	Identifier	dutyCycle
>2490	ArrayIndexing	_cells [ i ] [ segIdx ]
>2491	Identifier	segIdx
>2492	ArrayIndexing	_cells [ i ]
>2493	Identifier	i
>2494	Identifier	_cells
>2495	Identifier	dc
>2496	Identifier	dc
>2497	IdentifierDeclType	Real
>2498	Condition	 
>2499	UnaryOp	! _cells [ i ] [ segIdx ] . empty ( )
>2500	CallExpression	_cells [ i ] [ segIdx ] . empty ( )
>2501	ArgumentList	 
>2502	Callee	_cells [ i ] [ segIdx ] . empty
>2503	MemberAccess	_cells [ i ] [ segIdx ] . empty
>2504	Identifier	empty
>2505	ArrayIndexing	_cells [ i ] [ segIdx ]
>2506	Identifier	segIdx
>2507	ArrayIndexing	_cells [ i ]
>2508	Identifier	i
>2509	Identifier	_cells
>2510	UnaryOperator	!
>2511	IncDecOp	 
>2512	IncDec	++
>2513	Identifier	segIdx
>2514	Condition	 
>2515	RelationalExpression	segIdx < _cells [ i ] . size ( )
>2516	CallExpression	_cells [ i ] . size ( )
>2517	ArgumentList	 
>2518	Callee	_cells [ i ] . size
>2519	MemberAccess	_cells [ i ] . size
>2520	Identifier	size
>2521	ArrayIndexing	_cells [ i ]
>2522	Identifier	i
>2523	Identifier	_cells
>2524	Identifier	segIdx
>2525	ForInit	 
>2526	IdentifierDeclStatement	UInt segIdx = 0 ;
>2527	IdentifierDecl	segIdx = 0
>2528	AssignmentExpr	segIdx = 0
>2529	PrimaryExpression	0
>2530	Identifier	segIdx
>2531	Identifier	segIdx
>2532	IdentifierDeclType	UInt
>2533	IncDecOp	 
>2534	IncDec	++
>2535	Identifier	i
>2536	Condition	 
>2537	RelationalExpression	i <= maxIdx
>2538	Identifier	maxIdx
>2539	Identifier	i
>2540	ForInit	 
>2541	IdentifierDeclStatement	UInt i = minIdx ;
>2542	IdentifierDecl	i = minIdx
>2543	AssignmentExpr	i = minIdx
>2544	Identifier	minIdx
>2545	Identifier	minIdx
>2546	Identifier	i
>2547	IdentifierDeclType	UInt
>2548	IdentifierDeclStatement	 
>2549	IdentifierDecl	candidateSegmentDC = 1.0
>2550	AssignmentExpr	candidateSegmentDC = 1.0
>2551	PrimaryExpression	1.0
>2552	Identifier	candidateSegmentDC
>2553	Identifier	candidateSegmentDC
>2554	IdentifierDeclType	Real
>2555	IdentifierDeclStatement	 
>2556	IdentifierDecl	candidateSegmentIdx = ( UInt ) - 1
>2557	AssignmentExpr	candidateSegmentIdx = ( UInt ) - 1
>2558	CastExpression	( UInt ) - 1
>2559	UnaryOp	- 1
>2560	PrimaryExpression	1
>2561	UnaryOperator	-
>2562	CastTarget	UInt
>2563	Identifier	candidateSegmentIdx
>2564	Identifier	candidateSegmentIdx
>2565	IdentifierDeclType	UInt
>2566	IfStatement	if ( candidateCellIdxs . size ( ) > 0 )
>2567	CompoundStatement	 
>2568	ReturnStatement	 
>2569	Identifier	candidateCellIdx
>2570	ExpressionStatement	 
>2571	CallExpression	TIMER ( getNewCellTimer . stop ( ) )
>2572	ArgumentList	getNewCellTimer . stop ( )
>2573	Argument	getNewCellTimer . stop ( )
>2574	CallExpression	getNewCellTimer . stop ( )
>2575	ArgumentList	 
>2576	Callee	getNewCellTimer . stop
>2577	MemberAccess	getNewCellTimer . stop
>2578	Identifier	stop
>2579	Identifier	getNewCellTimer
>2580	Callee	TIMER
>2581	Identifier	TIMER
>2582	IfStatement	if ( _verbosity >= 5 )
>2583	CompoundStatement	 
>2584	ExpressionStatement	 
>2585	ShiftExpression	std 
>2586	ShiftExpression	\"Cell [\" << colIdx << \",\" << candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] chosen for new segment, # \
>2587	ShiftExpression	colIdx << \",\" << candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] chosen for new segment, # of segs \
>2588	ShiftExpression	\",\" << candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] chosen for new segment, # of segs is \" << _\
>2589	ShiftExpression	candidateCellIdx - getCellIdx ( colIdx , 0 ) << \"] chosen for new segment, # of segs is \" << _cells [ \
>2590	ShiftExpression	\"] chosen for new segment, # of segs is \" << _cells [ candidateCellIdx ] . size ( ) << \"\n\"
>2591	ShiftExpression	_cells [ candidateCellIdx ] . size ( ) << \"\n\"
>2592	PrimaryExpression	\"\n\"
>2593	CallExpression	_cells [ candidateCellIdx ] . size ( )
>2594	ArgumentList	 
>2595	Callee	_cells [ candidateCellIdx ] . size
>2596	MemberAccess	_cells [ candidateCellIdx ] . size
>2597	Identifier	size
>2598	ArrayIndexing	_cells [ candidateCellIdx ]
>2599	Identifier	candidateCellIdx
>2600	Identifier	_cells
>2601	PrimaryExpression	\"] chosen for new segment, # of segs is \"
>2602	AdditiveExpression	candidateCellIdx - getCellIdx ( colIdx , 0 )
>2603	CallExpression	getCellIdx ( colIdx , 0 )
>2604	ArgumentList	colIdx
>2605	Argument	0
>2606	PrimaryExpression	0
>2607	Argument	colIdx
>2608	Identifier	colIdx
>2609	Callee	getCellIdx
>2610	Identifier	getCellIdx
>2611	Identifier	candidateCellIdx
>2612	PrimaryExpression	\",\"
>2613	Identifier	colIdx
>2614	PrimaryExpression	\"Cell [\"
>2615	Identifier	std 
>2616	Condition	 
>2617	RelationalExpression	_verbosity >= 5
>2618	PrimaryExpression	5
>2619	Identifier	_verbosity
>2620	ExpressionStatement	 
>2621	AssignmentExpr	candidateCellIdx = candidateCellIdxs [ _rng . getUInt32 ( candidateCellIdxs . size ( ) ) ]
>2622	ArrayIndexing	candidateCellIdxs [ _rng . getUInt32 ( candidateCellIdxs . size ( ) ) ]
>2623	CallExpression	_rng . getUInt32 ( candidateCellIdxs . size ( ) )
>2624	ArgumentList	candidateCellIdxs . size ( )
>2625	Argument	candidateCellIdxs . size ( )
>2626	CallExpression	candidateCellIdxs . size ( )
>2627	ArgumentList	 
>2628	Callee	candidateCellIdxs . size
>2629	MemberAccess	candidateCellIdxs . size
>2630	Identifier	size
>2631	Identifier	candidateCellIdxs
>2632	Callee	_rng . getUInt32
>2633	MemberAccess	_rng . getUInt32
>2634	Identifier	getUInt32
>2635	Identifier	_rng
>2636	Identifier	candidateCellIdxs
>2637	Identifier	candidateCellIdx
>2638	Condition	 
>2639	RelationalExpression	candidateCellIdxs . size ( ) > 0
>2640	PrimaryExpression	0
>2641	CallExpression	candidateCellIdxs . size ( )
>2642	ArgumentList	 
>2643	Callee	candidateCellIdxs . size
>2644	MemberAccess	candidateCellIdxs . size
>2645	Identifier	size
>2646	Identifier	candidateCellIdxs
>2647	ForStatement	for ( UInt i = minIdx ; i <= maxIdx ; i ++ )
>2648	CompoundStatement	 
>2649	IfStatement	if ( numSegs < _maxSegmentsPerCell )
>2650	CompoundStatement	 
>2651	ExpressionStatement	 
>2652	CallExpression	candidateCellIdxs . push_back ( i )
>2653	ArgumentList	i
>2654	Argument	i
>2655	Identifier	i
>2656	Callee	candidateCellIdxs . push_back
>2657	MemberAccess	candidateCellIdxs . push_back
>2658	Identifier	push_back
>2659	Identifier	candidateCellIdxs
>2660	Condition	 
>2661	RelationalExpression	numSegs < _maxSegmentsPerCell
>2662	Identifier	_maxSegmentsPerCell
>2663	Identifier	numSegs
>2664	IdentifierDeclStatement	 
>2665	IdentifierDecl	numSegs = ( Int ) _cells [ i ] . size ( )
>2666	AssignmentExpr	numSegs = ( Int ) _cells [ i ] . size ( )
>2667	CastExpression	( Int ) _cells [ i ] . size ( )
>2668	CallExpression	_cells [ i ] . size ( )
>2669	ArgumentList	 
>2670	Callee	_cells [ i ] . size
>2671	MemberAccess	_cells [ i ] . size
>2672	Identifier	size
>2673	ArrayIndexing	_cells [ i ]
>2674	Identifier	i
>2675	Identifier	_cells
>2676	CastTarget	Int
>2677	Identifier	numSegs
>2678	Identifier	numSegs
>2679	IdentifierDeclType	Int
>2680	IncDecOp	 
>2681	IncDec	++
>2682	Identifier	i
>2683	Condition	 
>2684	RelationalExpression	i <= maxIdx
>2685	Identifier	maxIdx
>2686	Identifier	i
>2687	ForInit	 
>2688	IdentifierDeclStatement	UInt i = minIdx ;
>2689	IdentifierDecl	i = minIdx
>2690	AssignmentExpr	i = minIdx
>2691	Identifier	minIdx
>2692	Identifier	minIdx
>2693	Identifier	i
>2694	IdentifierDeclType	UInt
>2695	IfStatement	if ( _nCellsPerCol > 0 )
>2696	CompoundStatement	 
>2697	ExpressionStatement	 
>2698	AssignmentExpr	maxIdx = getCellIdx ( colIdx , _nCellsPerCol - 1 )
>2699	CallExpression	getCellIdx ( colIdx , _nCellsPerCol - 1 )
>2700	ArgumentList	colIdx
>2701	Argument	_nCellsPerCol - 1
>2702	AdditiveExpression	_nCellsPerCol - 1
>2703	PrimaryExpression	1
>2704	Identifier	_nCellsPerCol
>2705	Argument	colIdx
>2706	Identifier	colIdx
>2707	Callee	getCellIdx
>2708	Identifier	getCellIdx
>2709	Identifier	maxIdx
>2710	ExpressionStatement	 
>2711	AssignmentExpr	minIdx = getCellIdx ( colIdx , 1 )
>2712	CallExpression	getCellIdx ( colIdx , 1 )
>2713	ArgumentList	colIdx
>2714	Argument	1
>2715	PrimaryExpression	1
>2716	Argument	colIdx
>2717	Identifier	colIdx
>2718	Callee	getCellIdx
>2719	Identifier	getCellIdx
>2720	Identifier	minIdx
>2721	Condition	 
>2722	RelationalExpression	_nCellsPerCol > 0
>2723	PrimaryExpression	0
>2724	Identifier	_nCellsPerCol
>2725	IdentifierDeclStatement	 
>2726	IdentifierDecl	maxIdx = getCellIdx ( colIdx , 0 )
>2727	AssignmentExpr	maxIdx = getCellIdx ( colIdx , 0 )
>2728	CallExpression	getCellIdx ( colIdx , 0 )
>2729	ArgumentList	colIdx
>2730	Argument	0
>2731	PrimaryExpression	0
>2732	Argument	colIdx
>2733	Identifier	colIdx
>2734	Callee	getCellIdx
>2735	Identifier	getCellIdx
>2736	Identifier	maxIdx
>2737	Identifier	maxIdx
>2738	IdentifierDeclType	UInt
>2739	IdentifierDecl	minIdx = getCellIdx ( colIdx , 0 )
>2740	AssignmentExpr	minIdx = getCellIdx ( colIdx , 0 )
>2741	CallExpression	getCellIdx ( colIdx , 0 )
>2742	ArgumentList	colIdx
>2743	Argument	0
>2744	PrimaryExpression	0
>2745	Argument	colIdx
>2746	Identifier	colIdx
>2747	Callee	getCellIdx
>2748	Identifier	getCellIdx
>2749	Identifier	minIdx
>2750	Identifier	minIdx
>2751	IdentifierDeclType	UInt
>2752	ExpressionStatement	 
>2753	CallExpression	candidateCellIdxs . clear ( )
>2754	ArgumentList	 
>2755	Callee	candidateCellIdxs . clear
>2756	MemberAccess	candidateCellIdxs . clear
>2757	Identifier	clear
>2758	Identifier	candidateCellIdxs
>2759	IdentifierDeclStatement	 
>2760	IdentifierDecl	candidateCellIdxs
>2761	Identifier	candidateCellIdxs
>2762	IdentifierDeclType	std 
>2763	Statement	 
>2764	IfStatement	if ( _maxSegmentsPerCell < 0 )
>2765	CompoundStatement	 
>2766	ReturnStatement	 
>2767	CallExpression	getCellIdx ( colIdx , candidateCellIdx )
>2768	ArgumentList	colIdx
>2769	Argument	candidateCellIdx
>2770	Identifier	candidateCellIdx
>2771	Argument	colIdx
>2772	Identifier	colIdx
>2773	Callee	getCellIdx
>2774	Identifier	getCellIdx
>2775	ExpressionStatement	 
>2776	CallExpression	TIMER ( getNewCellTimer . stop ( ) )
>2777	ArgumentList	getNewCellTimer . stop ( )
>2778	Argument	getNewCellTimer . stop ( )
>2779	CallExpression	getNewCellTimer . stop ( )
>2780	ArgumentList	 
>2781	Callee	getNewCellTimer . stop
>2782	MemberAccess	getNewCellTimer . stop
>2783	Identifier	stop
>2784	Identifier	getNewCellTimer
>2785	Callee	TIMER
>2786	Identifier	TIMER
>2787	IfStatement	if ( _nCellsPerCol > 1 )
>2788	ElseStatement	else
>2789	CompoundStatement	 
>2790	ExpressionStatement	 
>2791	AssignmentExpr	candidateCellIdx = 0
>2792	PrimaryExpression	0
>2793	Identifier	candidateCellIdx
>2794	CompoundStatement	 
>2795	ExpressionStatement	 
>2796	AssignmentExpr	candidateCellIdx = _rng . getUInt32 ( _nCellsPerCol - 1 ) + 1
>2797	AdditiveExpression	_rng . getUInt32 ( _nCellsPerCol - 1 ) + 1
>2798	PrimaryExpression	1
>2799	CallExpression	_rng . getUInt32 ( _nCellsPerCol - 1 )
>2800	ArgumentList	_nCellsPerCol - 1
>2801	Argument	_nCellsPerCol - 1
>2802	AdditiveExpression	_nCellsPerCol - 1
>2803	PrimaryExpression	1
>2804	Identifier	_nCellsPerCol
>2805	Callee	_rng . getUInt32
>2806	MemberAccess	_rng . getUInt32
>2807	Identifier	getUInt32
>2808	Identifier	_rng
>2809	Identifier	candidateCellIdx
>2810	Condition	 
>2811	RelationalExpression	_nCellsPerCol > 1
>2812	PrimaryExpression	1
>2813	Identifier	_nCellsPerCol
>2814	Condition	 
>2815	RelationalExpression	_maxSegmentsPerCell < 0
>2816	PrimaryExpression	0
>2817	Identifier	_maxSegmentsPerCell
>2818	IdentifierDeclStatement	 
>2819	IdentifierDecl	candidateCellIdx = 0
>2820	AssignmentExpr	candidateCellIdx = 0
>2821	PrimaryExpression	0
>2822	Identifier	candidateCellIdx
>2823	Identifier	candidateCellIdx
>2824	IdentifierDeclType	UInt
>2825	ExpressionStatement	 
>2826	CallExpression	TIMER ( getNewCellTimer . start ( ) )
>2827	ArgumentList	getNewCellTimer . start ( )
>2828	Argument	getNewCellTimer . start ( )
>2829	CallExpression	getNewCellTimer . start ( )
>2830	ArgumentList	 
>2831	Callee	getNewCellTimer . start
>2832	MemberAccess	getNewCellTimer . start
>2833	Identifier	start
>2834	Identifier	getNewCellTimer
>2835	Callee	TIMER
>2836	Identifier	TIMER
>2880	FunctionDef	Cells4 
>2881	ParameterList	const std 
>2882	Parameter	 
>2883	Identifier	readOnly
>2884	ParameterType	bool
>2885	Parameter	 
>2886	Identifier	activeColumns
>2887	ParameterType	const std 
>2888	ReturnType	bool
>2889	CompoundStatement	 
>2890	IfStatement	if ( numUnpredictedColumns < activeColumns . size ( ) / 2 )
>2891	ElseStatement	else
>2892	CompoundStatement	 
>2893	ReturnStatement	 
>2894	Identifier	false
>2895	CompoundStatement	 
>2896	ReturnStatement	 
>2897	Identifier	true
>2898	Condition	 
>2899	RelationalExpression	numUnpredictedColumns < activeColumns . size ( ) / 2
>2900	MultiplicativeExpression	activeColumns . size ( ) / 2
>2901	PrimaryExpression	2
>2902	CallExpression	activeColumns . size ( )
>2903	ArgumentList	 
>2904	Callee	activeColumns . size
>2905	MemberAccess	activeColumns . size
>2906	Identifier	size
>2907	Identifier	activeColumns
>2908	Identifier	numUnpredictedColumns
>2909	ExpressionStatement	 
>2910	CallExpression	TIMER ( learnPhase1Timer . stop ( ) )
>2911	ArgumentList	learnPhase1Timer . stop ( )
>2912	Argument	learnPhase1Timer . stop ( )
>2913	CallExpression	learnPhase1Timer . stop ( )
>2914	ArgumentList	 
>2915	Callee	learnPhase1Timer . stop
>2916	MemberAccess	learnPhase1Timer . stop
>2917	Identifier	stop
>2918	Identifier	learnPhase1Timer
>2919	Callee	TIMER
>2920	Identifier	TIMER
>2921	ForStatement	for ( UInt i = 0 ; i < activeColumns . size ( ) ; i ++ )
>2922	CompoundStatement	 
>2923	IfStatement	if ( numPredictedCells == 1 )
>2924	ElseStatement	else
>2925	CompoundStatement	 
>2926	IfStatement	if ( ! readOnly )
>2927	CompoundStatement	 
>2928	IfStatement	if ( segIdx != ( UInt ) - 1 && _cells [ cellIdx ] [ segIdx ] . isSequenceSegment ( ) )
>2929	ElseStatement	else
>2930	CompoundStatement	 
>2931	IfStatement	if ( newUpdate )
>2932	CompoundStatement	 
>2933	ExpressionStatement	 
>2934	CallExpression	_segmentUpdates . pop_back ( )
>2935	ArgumentList	 
>2936	Callee	_segmentUpdates . pop_back
>2937	MemberAccess	_segmentUpdates . pop_back
>2938	Identifier	pop_back
>2939	Identifier	_segmentUpdates
>2940	ExpressionStatement	 
>2941	CallExpression	adaptSegment ( update )
>2942	ArgumentList	update
>2943	Argument	update
>2944	Identifier	update
>2945	Callee	adaptSegment
>2946	Identifier	adaptSegment
>2947	IdentifierDeclStatement	 
>2948	IdentifierDecl	& update = _segmentUpdates . back ( )
>2949	AssignmentExpr	& update = _segmentUpdates . back ( )
>2950	CallExpression	_segmentUpdates . back ( )
>2951	ArgumentList	 
>2952	Callee	_segmentUpdates . back
>2953	MemberAccess	_segmentUpdates . back
>2954	Identifier	back
>2955	Identifier	_segmentUpdates
>2956	Identifier	update
>2957	Identifier	update
>2958	IdentifierDeclType	const SegmentUpdate &
>2959	Condition	 
>2960	Identifier	newUpdate
>2961	IdentifierDeclStatement	 
>2962	IdentifierDecl	newUpdate = computeUpdate ( newCellIdx , ( UInt ) - 1 , _learnActiveStateT1 , true , true )
>2963	AssignmentExpr	newUpdate = computeUpdate ( newCellIdx , ( UInt ) - 1 , _learnActiveStateT1 , true , true )
>2964	CallExpression	computeUpdate ( newCellIdx , ( UInt ) - 1 , _learnActiveStateT1 , true , true )
>2965	ArgumentList	newCellIdx
>2966	Argument	true
>2967	Identifier	true
>2968	Argument	true
>2969	Identifier	true
>2970	Argument	_learnActiveStateT1
>2971	Identifier	_learnActiveStateT1
>2972	Argument	( UInt ) - 1
>2973	CastExpression	( UInt ) - 1
>2974	UnaryOp	- 1
>2975	PrimaryExpression	1
>2976	UnaryOperator	-
>2977	CastTarget	UInt
>2978	Argument	newCellIdx
>2979	Identifier	newCellIdx
>2980	Callee	computeUpdate
>2981	Identifier	computeUpdate
>2982	Identifier	newUpdate
>2983	Identifier	newUpdate
>2984	IdentifierDeclType	bool
>2985	ExpressionStatement	 
>2986	CallExpression	_learnActiveStateT . set ( newCellIdx )
>2987	ArgumentList	newCellIdx
>2988	Argument	newCellIdx
>2989	Identifier	newCellIdx
>2990	Callee	_learnActiveStateT . set
>2991	MemberAccess	_learnActiveStateT . set
>2992	Identifier	set
>2993	Identifier	_learnActiveStateT
>2994	IfStatement	if ( _verbosity >= 4 )
>2995	CompoundStatement	 
>2996	ExpressionStatement	 
>2997	ShiftExpression	std 
>2998	ShiftExpression	\"   learning on col=\" << activeColumns [ i ] << \", newCellIdxInCol=\" << newCellIdx - getCellIdx ( activeColumns [ \
>2999	ShiftExpression	activeColumns [ i ] << \", newCellIdxInCol=\" << newCellIdx - getCellIdx ( activeColumns [ i ] , 0 ) << \"\n\"\
>3000	ShiftExpression	\", newCellIdxInCol=\" << newCellIdx - getCellIdx ( activeColumns [ i ] , 0 ) << \"\n\"
>3001	ShiftExpression	newCellIdx - getCellIdx ( activeColumns [ i ] , 0 ) << \"\n\"
>3002	PrimaryExpression	\"\n\"
>3003	AdditiveExpression	newCellIdx - getCellIdx ( activeColumns [ i ] , 0 )
>3004	CallExpression	getCellIdx ( activeColumns [ i ] , 0 )
>3005	ArgumentList	activeColumns [ i ]
>3006	Argument	0
>3007	PrimaryExpression	0
>3008	Argument	activeColumns [ i ]
>3009	ArrayIndexing	activeColumns [ i ]
>3010	Identifier	i
>3011	Identifier	activeColumns
>3012	Callee	getCellIdx
>3013	Identifier	getCellIdx
>3014	Identifier	newCellIdx
>3015	PrimaryExpression	\", newCellIdxInCol=\"
>3016	ArrayIndexing	activeColumns [ i ]
>3017	Identifier	i
>3018	Identifier	activeColumns
>3019	PrimaryExpression	\"   learning on col=\"
>3020	Identifier	std 
>3021	ExpressionStatement	 
>3022	ShiftExpression	std 
>3023	PrimaryExpression	\"Learn branch 1, no match
>3024	Identifier	std 
>3025	Condition	 
>3026	RelationalExpression	_verbosity >= 4
>3027	PrimaryExpression	4
>3028	Identifier	_verbosity
>3029	IdentifierDeclStatement	 
>3030	IdentifierDecl	newCellIdx = getCellForNewSegment ( activeColumns [ i ] )
>3031	AssignmentExpr	newCellIdx = getCellForNewSegment ( activeColumns [ i ] )
>3032	CallExpression	getCellForNewSegment ( activeColumns [ i ] )
>3033	ArgumentList	activeColumns [ i ]
>3034	Argument	activeColumns [ i ]
>3035	ArrayIndexing	activeColumns [ i ]
>3036	Identifier	i
>3037	Identifier	activeColumns
>3038	Callee	getCellForNewSegment
>3039	Identifier	getCellForNewSegment
>3040	Identifier	newCellIdx
>3041	Identifier	newCellIdx
>3042	IdentifierDeclType	UInt
>3043	CompoundStatement	 
>3044	IfStatement	if ( newUpdate )
>3045	CompoundStatement	 
>3046	ExpressionStatement	 
>3047	CallExpression	_segmentUpdates . pop_back ( )
>3048	ArgumentList	 
>3049	Callee	_segmentUpdates . pop_back
>3050	MemberAccess	_segmentUpdates . pop_back
>3051	Identifier	pop_back
>3052	Identifier	_segmentUpdates
>3053	ExpressionStatement	 
>3054	CallExpression	adaptSegment ( update )
>3055	ArgumentList	update
>3056	Argument	update
>3057	Identifier	update
>3058	Callee	adaptSegment
>3059	Identifier	adaptSegment
>3060	IdentifierDeclStatement	 
>3061	IdentifierDecl	& update = _segmentUpdates . back ( )
>3062	AssignmentExpr	& update = _segmentUpdates . back ( )
>3063	CallExpression	_segmentUpdates . back ( )
>3064	ArgumentList	 
>3065	Callee	_segmentUpdates . back
>3066	MemberAccess	_segmentUpdates . back
>3067	Identifier	back
>3068	Identifier	_segmentUpdates
>3069	Identifier	update
>3070	Identifier	update
>3071	IdentifierDeclType	const SegmentUpdate &
>3072	Condition	 
>3073	Identifier	newUpdate
>3074	ExpressionStatement	 
>3075	IncDecOp	_cells [ cellIdx ] [ segIdx ] . _totalActivations ++
>3076	IncDec	++
>3077	MemberAccess	_cells [ cellIdx ] [ segIdx ] . _totalActivations
>3078	Identifier	_totalActivations
>3079	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>3080	Identifier	segIdx
>3081	ArrayIndexing	_cells [ cellIdx ]
>3082	Identifier	cellIdx
>3083	Identifier	_cells
>3084	IdentifierDeclStatement	 
>3085	IdentifierDecl	newUpdate = computeUpdate ( cellIdx , segIdx , _learnActiveStateT1 , true , true )
>3086	AssignmentExpr	newUpdate = computeUpdate ( cellIdx , segIdx , _learnActiveStateT1 , true , true )
>3087	CallExpression	computeUpdate ( cellIdx , segIdx , _learnActiveStateT1 , true , true )
>3088	ArgumentList	cellIdx
>3089	Argument	true
>3090	Identifier	true
>3091	Argument	true
>3092	Identifier	true
>3093	Argument	_learnActiveStateT1
>3094	Identifier	_learnActiveStateT1
>3095	Argument	segIdx
>3096	Identifier	segIdx
>3097	Argument	cellIdx
>3098	Identifier	cellIdx
>3099	Callee	computeUpdate
>3100	Identifier	computeUpdate
>3101	Identifier	newUpdate
>3102	Identifier	newUpdate
>3103	IdentifierDeclType	bool
>3104	ExpressionStatement	 
>3105	CallExpression	_learnActiveStateT . set ( cellIdx )
>3106	ArgumentList	cellIdx
>3107	Argument	cellIdx
>3108	Identifier	cellIdx
>3109	Callee	_learnActiveStateT . set
>3110	MemberAccess	_learnActiveStateT . set
>3111	Identifier	set
>3112	Identifier	_learnActiveStateT
>3113	IfStatement	if ( _verbosity >= 4 )
>3114	CompoundStatement	 
>3115	ExpressionStatement	 
>3116	ShiftExpression	std 
>3117	ShiftExpression	\"   learning on col=\" << activeColumns [ i ] << \", cellIdx=\" << cellIdx << \"\n\"
>3118	ShiftExpression	activeColumns [ i ] << \", cellIdx=\" << cellIdx << \"\n\"
>3119	ShiftExpression	\", cellIdx=\" << cellIdx << \"\n\"
>3120	ShiftExpression	cellIdx << \"\n\"
>3121	PrimaryExpression	\"\n\"
>3122	Identifier	cellIdx
>3123	PrimaryExpression	\", cellIdx=\"
>3124	ArrayIndexing	activeColumns [ i ]
>3125	Identifier	i
>3126	Identifier	activeColumns
>3127	PrimaryExpression	\"   learning on col=\"
>3128	Identifier	std 
>3129	ExpressionStatement	 
>3130	ShiftExpression	std 
>3131	PrimaryExpression	\"Learn branch 0, found segment match
>3132	Identifier	std 
>3133	Condition	 
>3134	RelationalExpression	_verbosity >= 4
>3135	PrimaryExpression	4
>3136	Identifier	_verbosity
>3137	Condition	 
>3138	AndExpression	segIdx != ( UInt ) - 1 && _cells [ cellIdx ] [ segIdx ] . isSequenceSegment ( )
>3139	CallExpression	_cells [ cellIdx ] [ segIdx ] . isSequenceSegment ( )
>3140	ArgumentList	 
>3141	Callee	_cells [ cellIdx ] [ segIdx ] . isSequenceSegment
>3142	MemberAccess	_cells [ cellIdx ] [ segIdx ] . isSequenceSegment
>3143	Identifier	isSequenceSegment
>3144	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>3145	Identifier	segIdx
>3146	ArrayIndexing	_cells [ cellIdx ]
>3147	Identifier	cellIdx
>3148	Identifier	_cells
>3149	EqualityExpression	segIdx != ( UInt ) - 1
>3150	CastExpression	( UInt ) - 1
>3151	UnaryOp	- 1
>3152	PrimaryExpression	1
>3153	UnaryOperator	-
>3154	CastTarget	UInt
>3155	Identifier	segIdx
>3156	IdentifierDeclStatement	 
>3157	IdentifierDecl	segIdx = p . second
>3158	AssignmentExpr	segIdx = p . second
>3159	MemberAccess	p . second
>3160	Identifier	second
>3161	Identifier	p
>3162	Identifier	segIdx
>3163	Identifier	segIdx
>3164	IdentifierDeclType	UInt
>3165	IdentifierDecl	cellIdx = p . first
>3166	AssignmentExpr	cellIdx = p . first
>3167	MemberAccess	p . first
>3168	Identifier	first
>3169	Identifier	p
>3170	Identifier	cellIdx
>3171	Identifier	cellIdx
>3172	IdentifierDeclType	UInt
>3173	ExpressionStatement	 
>3174	AssignmentExpr	p = getBestMatchingCellT1 ( activeColumns [ i ] , _learnActiveStateT1 , _minThreshold )
>3175	CallExpression	getBestMatchingCellT1 ( activeColumns [ i ] , _learnActiveStateT1 , _minThreshold )
>3176	ArgumentList	activeColumns [ i ]
>3177	Argument	_minThreshold
>3178	Identifier	_minThreshold
>3179	Argument	_learnActiveStateT1
>3180	Identifier	_learnActiveStateT1
>3181	Argument	activeColumns [ i ]
>3182	ArrayIndexing	activeColumns [ i ]
>3183	Identifier	i
>3184	Identifier	activeColumns
>3185	Callee	getBestMatchingCellT1
>3186	Identifier	getBestMatchingCellT1
>3187	Identifier	p
>3188	IdentifierDeclStatement	 
>3189	IdentifierDecl	p
>3190	Identifier	p
>3191	IdentifierDeclType	std 
>3192	Condition	 
>3193	UnaryOp	! readOnly
>3194	Identifier	readOnly
>3195	UnaryOperator	!
>3196	ExpressionStatement	 
>3197	IncDecOp	numUnpredictedColumns ++
>3198	IncDec	++
>3199	Identifier	numUnpredictedColumns
>3200	CompoundStatement	 
>3201	ExpressionStatement	 
>3202	CallExpression	_learnActiveStateT . set ( cell0 + predictingCell )
>3203	ArgumentList	cell0 + predictingCell
>3204	Argument	cell0 + predictingCell
>3205	AdditiveExpression	cell0 + predictingCell
>3206	Identifier	predictingCell
>3207	Identifier	cell0
>3208	Callee	_learnActiveStateT . set
>3209	MemberAccess	_learnActiveStateT . set
>3210	Identifier	set
>3211	Identifier	_learnActiveStateT
>3212	ExpressionStatement	 
>3213	CallExpression	NTA_ASSERT ( predictingCell < _nCellsPerCol )
>3214	ArgumentList	predictingCell < _nCellsPerCol
>3215	Argument	predictingCell < _nCellsPerCol
>3216	RelationalExpression	predictingCell < _nCellsPerCol
>3217	Identifier	_nCellsPerCol
>3218	Identifier	predictingCell
>3219	Callee	NTA_ASSERT
>3220	Identifier	NTA_ASSERT
>3221	Condition	 
>3222	EqualityExpression	numPredictedCells == 1
>3223	PrimaryExpression	1
>3224	Identifier	numPredictedCells
>3225	ExpressionStatement	 
>3226	CallExpression	NTA_ASSERT ( numPredictedCells <= 1 )
>3227	ArgumentList	numPredictedCells <= 1
>3228	Argument	numPredictedCells <= 1
>3229	RelationalExpression	numPredictedCells <= 1
>3230	PrimaryExpression	1
>3231	Identifier	numPredictedCells
>3232	Callee	NTA_ASSERT
>3233	Identifier	NTA_ASSERT
>3234	ForStatement	for ( UInt j = 0 ; j < _nCellsPerCol ; j ++ )
>3235	CompoundStatement	 
>3236	IfStatement	if ( _learnPredictedStateT1 . isSet ( j + cell0 ) )
>3237	CompoundStatement	 
>3238	ExpressionStatement	 
>3239	AssignmentExpr	predictingCell = j
>3240	Identifier	j
>3241	Identifier	predictingCell
>3242	ExpressionStatement	 
>3243	IncDecOp	numPredictedCells ++
>3244	IncDec	++
>3245	Identifier	numPredictedCells
>3246	Condition	 
>3247	CallExpression	_learnPredictedStateT1 . isSet ( j + cell0 )
>3248	ArgumentList	j + cell0
>3249	Argument	j + cell0
>3250	AdditiveExpression	j + cell0
>3251	Identifier	cell0
>3252	Identifier	j
>3253	Callee	_learnPredictedStateT1 . isSet
>3254	MemberAccess	_learnPredictedStateT1 . isSet
>3255	Identifier	isSet
>3256	Identifier	_learnPredictedStateT1
>3257	IncDecOp	 
>3258	IncDec	++
>3259	Identifier	j
>3260	Condition	 
>3261	RelationalExpression	j < _nCellsPerCol
>3262	Identifier	_nCellsPerCol
>3263	Identifier	j
>3264	ForInit	 
>3265	IdentifierDeclStatement	UInt j = 0 ;
>3266	IdentifierDecl	j = 0
>3267	AssignmentExpr	j = 0
>3268	PrimaryExpression	0
>3269	Identifier	j
>3270	Identifier	j
>3271	IdentifierDeclType	UInt
>3272	IdentifierDeclStatement	 
>3273	IdentifierDecl	predictingCell = _nCellsPerCol
>3274	AssignmentExpr	predictingCell = _nCellsPerCol
>3275	Identifier	_nCellsPerCol
>3276	Identifier	_nCellsPerCol
>3277	Identifier	predictingCell
>3278	IdentifierDeclType	UInt
>3279	IdentifierDecl	numPredictedCells = 0
>3280	AssignmentExpr	numPredictedCells = 0
>3281	PrimaryExpression	0
>3282	Identifier	numPredictedCells
>3283	Identifier	numPredictedCells
>3284	IdentifierDeclType	UInt
>3285	IdentifierDeclStatement	 
>3286	IdentifierDecl	cell0 = activeColumns [ i ] * _nCellsPerCol
>3287	AssignmentExpr	cell0 = activeColumns [ i ] * _nCellsPerCol
>3288	MultiplicativeExpression	activeColumns [ i ] * _nCellsPerCol
>3289	Identifier	_nCellsPerCol
>3290	ArrayIndexing	activeColumns [ i ]
>3291	Identifier	i
>3292	Identifier	activeColumns
>3293	Identifier	cell0
>3294	Identifier	cell0
>3295	IdentifierDeclType	UInt
>3296	IncDecOp	 
>3297	IncDec	++
>3298	Identifier	i
>3299	Condition	 
>3300	RelationalExpression	i < activeColumns . size ( )
>3301	CallExpression	activeColumns . size ( )
>3302	ArgumentList	 
>3303	Callee	activeColumns . size
>3304	MemberAccess	activeColumns . size
>3305	Identifier	size
>3306	Identifier	activeColumns
>3307	Identifier	i
>3308	ForInit	 
>3309	IdentifierDeclStatement	UInt i = 0 ;
>3310	IdentifierDecl	i = 0
>3311	AssignmentExpr	i = 0
>3312	PrimaryExpression	0
>3313	Identifier	i
>3314	Identifier	i
>3315	IdentifierDeclType	UInt
>3316	IdentifierDeclStatement	 
>3317	IdentifierDecl	numUnpredictedColumns = 0
>3318	AssignmentExpr	numUnpredictedColumns = 0
>3319	PrimaryExpression	0
>3320	Identifier	numUnpredictedColumns
>3321	Identifier	numUnpredictedColumns
>3322	IdentifierDeclType	UInt
>3323	ExpressionStatement	 
>3324	CallExpression	_learnActiveStateT . resetAll ( )
>3325	ArgumentList	 
>3326	Callee	_learnActiveStateT . resetAll
>3327	MemberAccess	_learnActiveStateT . resetAll
>3328	Identifier	resetAll
>3329	Identifier	_learnActiveStateT
>3330	ExpressionStatement	 
>3331	CallExpression	TIMER ( learnPhase1Timer . start ( ) )
>3332	ArgumentList	learnPhase1Timer . start ( )
>3333	Argument	learnPhase1Timer . start ( )
>3334	CallExpression	learnPhase1Timer . start ( )
>3335	ArgumentList	 
>3336	Callee	learnPhase1Timer . start
>3337	MemberAccess	learnPhase1Timer . start
>3338	Identifier	start
>3339	Identifier	learnPhase1Timer
>3340	Callee	TIMER
>3341	Identifier	TIMER
>3389	FunctionDef	Cells4 
>3390	ParameterList	bool readOnly
>3391	Parameter	 
>3392	Identifier	readOnly
>3393	ParameterType	bool
>3394	ReturnType	void
>3395	CompoundStatement	 
>3396	ExpressionStatement	 
>3397	CallExpression	TIMER ( learnPhase2Timer . stop ( ) )
>3398	ArgumentList	learnPhase2Timer . stop ( )
>3399	Argument	learnPhase2Timer . stop ( )
>3400	CallExpression	learnPhase2Timer . stop ( )
>3401	ArgumentList	 
>3402	Callee	learnPhase2Timer . stop
>3403	MemberAccess	learnPhase2Timer . stop
>3404	Identifier	stop
>3405	Identifier	learnPhase2Timer
>3406	Callee	TIMER
>3407	Identifier	TIMER
>3408	ForStatement	for ( UInt colIdx = 0 ; colIdx != _nColumns ; ++ colIdx )
>3409	CompoundStatement	 
>3410	IfStatement	if ( segIdx != ( UInt ) - 1 )
>3411	CompoundStatement	 
>3412	IfStatement	if ( ! readOnly )
>3413	CompoundStatement	 
>3414	ExpressionStatement	 
>3415	IncDecOp	_cells [ cellIdx ] [ segIdx ] . _totalActivations ++
>3416	IncDec	++
>3417	MemberAccess	_cells [ cellIdx ] [ segIdx ] . _totalActivations
>3418	Identifier	_totalActivations
>3419	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>3420	Identifier	segIdx
>3421	ArrayIndexing	_cells [ cellIdx ]
>3422	Identifier	cellIdx
>3423	Identifier	_cells
>3424	ExpressionStatement	 
>3425	CallExpression	computeUpdate ( cellIdx , segIdx , _learnActiveStateT , false , true )
>3426	ArgumentList	cellIdx
>3427	Argument	true
>3428	Identifier	true
>3429	Argument	false
>3430	Identifier	false
>3431	Argument	_learnActiveStateT
>3432	Identifier	_learnActiveStateT
>3433	Argument	segIdx
>3434	Identifier	segIdx
>3435	Argument	cellIdx
>3436	Identifier	cellIdx
>3437	Callee	computeUpdate
>3438	Identifier	computeUpdate
>3439	IfStatement	if ( _verbosity >= 4 )
>3440	CompoundStatement	 
>3441	ExpressionStatement	 
>3442	ShiftExpression	std 
>3443	PrimaryExpression	\"\n\"
>3444	Identifier	std 
>3445	ExpressionStatement	 
>3446	CallExpression	_cells [ cellIdx ] [ segIdx ] . print ( std 
>3447	ArgumentList	std 
>3448	Argument	_nCellsPerCol
>3449	Identifier	_nCellsPerCol
>3450	Argument	std 
>3451	Identifier	std 
>3452	Callee	_cells [ cellIdx ] [ segIdx ] . print
>3453	MemberAccess	_cells [ cellIdx ] [ segIdx ] . print
>3454	Identifier	print
>3455	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>3456	Identifier	segIdx
>3457	ArrayIndexing	_cells [ cellIdx ]
>3458	Identifier	cellIdx
>3459	Identifier	_cells
>3460	ExpressionStatement	 
>3461	ShiftExpression	std 
>3462	ShiftExpression	\"learnPhase2, learning on col=\" << colIdx << \", cellIdx=\" << cellIdx << \", seg ID
>3463	ShiftExpression	colIdx << \", cellIdx=\" << cellIdx << \", seg ID
>3464	ShiftExpression	\", cellIdx=\" << cellIdx << \", seg ID
>3465	ShiftExpression	cellIdx << \", seg ID
>3466	ShiftExpression	\", seg ID
>3467	ShiftExpression	segIdx << \", segment
>3468	PrimaryExpression	\", segment
>3469	Identifier	segIdx
>3470	PrimaryExpression	\", seg ID
>3471	Identifier	cellIdx
>3472	PrimaryExpression	\", cellIdx=\"
>3473	Identifier	colIdx
>3474	PrimaryExpression	\"learnPhase2, learning on col=\"
>3475	Identifier	std 
>3476	Condition	 
>3477	RelationalExpression	_verbosity >= 4
>3478	PrimaryExpression	4
>3479	Identifier	_verbosity
>3480	Condition	 
>3481	UnaryOp	! readOnly
>3482	Identifier	readOnly
>3483	UnaryOperator	!
>3484	ExpressionStatement	 
>3485	CallExpression	_learnPredictedStateT . set ( cellIdx )
>3486	ArgumentList	cellIdx
>3487	Argument	cellIdx
>3488	Identifier	cellIdx
>3489	Callee	_learnPredictedStateT . set
>3490	MemberAccess	_learnPredictedStateT . set
>3491	Identifier	set
>3492	Identifier	_learnPredictedStateT
>3493	Condition	 
>3494	EqualityExpression	segIdx != ( UInt ) - 1
>3495	CastExpression	( UInt ) - 1
>3496	UnaryOp	- 1
>3497	PrimaryExpression	1
>3498	UnaryOperator	-
>3499	CastTarget	UInt
>3500	Identifier	segIdx
>3501	IdentifierDeclStatement	 
>3502	IdentifierDecl	segIdx = p . second
>3503	AssignmentExpr	segIdx = p . second
>3504	MemberAccess	p . second
>3505	Identifier	second
>3506	Identifier	p
>3507	Identifier	segIdx
>3508	Identifier	segIdx
>3509	IdentifierDeclType	UInt
>3510	IdentifierDecl	cellIdx = p . first
>3511	AssignmentExpr	cellIdx = p . first
>3512	MemberAccess	p . first
>3513	Identifier	first
>3514	Identifier	p
>3515	Identifier	cellIdx
>3516	Identifier	cellIdx
>3517	IdentifierDeclType	UInt
>3518	ExpressionStatement	 
>3519	AssignmentExpr	p = getBestMatchingCellT ( colIdx , _learnActiveStateT , _activationThreshold )
>3520	CallExpression	getBestMatchingCellT ( colIdx , _learnActiveStateT , _activationThreshold )
>3521	ArgumentList	colIdx
>3522	Argument	_activationThreshold
>3523	Identifier	_activationThreshold
>3524	Argument	_learnActiveStateT
>3525	Identifier	_learnActiveStateT
>3526	Argument	colIdx
>3527	Identifier	colIdx
>3528	Callee	getBestMatchingCellT
>3529	Identifier	getBestMatchingCellT
>3530	Identifier	p
>3531	IdentifierDeclStatement	 
>3532	IdentifierDecl	p
>3533	Identifier	p
>3534	IdentifierDeclType	std 
>3535	UnaryExpression	 
>3536	Identifier	colIdx
>3537	IncDec	++
>3538	Condition	 
>3539	EqualityExpression	colIdx != _nColumns
>3540	Identifier	_nColumns
>3541	Identifier	colIdx
>3542	ForInit	 
>3543	IdentifierDeclStatement	UInt colIdx = 0 ;
>3544	IdentifierDecl	colIdx = 0
>3545	AssignmentExpr	colIdx = 0
>3546	PrimaryExpression	0
>3547	Identifier	colIdx
>3548	Identifier	colIdx
>3549	IdentifierDeclType	UInt
>3550	ExpressionStatement	 
>3551	CallExpression	_learnPredictedStateT . resetAll ( )
>3552	ArgumentList	 
>3553	Callee	_learnPredictedStateT . resetAll
>3554	MemberAccess	_learnPredictedStateT . resetAll
>3555	Identifier	resetAll
>3556	Identifier	_learnPredictedStateT
>3557	ExpressionStatement	 
>3558	CallExpression	TIMER ( learnPhase2Timer . start ( ) )
>3559	ArgumentList	learnPhase2Timer . start ( )
>3560	Argument	learnPhase2Timer . start ( )
>3561	CallExpression	learnPhase2Timer . start ( )
>3562	ArgumentList	 
>3563	Callee	learnPhase2Timer . start
>3564	MemberAccess	learnPhase2Timer . start
>3565	Identifier	start
>3566	Identifier	learnPhase2Timer
>3567	Callee	TIMER
>3568	Identifier	TIMER
>3569	ExpressionStatement	 
>3570	CallExpression	TIMER ( forwardLearnPropTimer . stop ( ) )
>3571	ArgumentList	forwardLearnPropTimer . stop ( )
>3572	Argument	forwardLearnPropTimer . stop ( )
>3573	CallExpression	forwardLearnPropTimer . stop ( )
>3574	ArgumentList	 
>3575	Callee	forwardLearnPropTimer . stop
>3576	MemberAccess	forwardLearnPropTimer . stop
>3577	Identifier	stop
>3578	Identifier	forwardLearnPropTimer
>3579	Callee	TIMER
>3580	Identifier	TIMER
>3581	ExpressionStatement	 
>3582	CallExpression	computeForwardPropagation ( _learnActiveStateT )
>3583	ArgumentList	_learnActiveStateT
>3584	Argument	_learnActiveStateT
>3585	Identifier	_learnActiveStateT
>3586	Callee	computeForwardPropagation
>3587	Identifier	computeForwardPropagation
>3588	ExpressionStatement	 
>3589	CallExpression	TIMER ( forwardLearnPropTimer . start ( ) )
>3590	ArgumentList	forwardLearnPropTimer . start ( )
>3591	Argument	forwardLearnPropTimer . start ( )
>3592	CallExpression	forwardLearnPropTimer . start ( )
>3593	ArgumentList	 
>3594	Callee	forwardLearnPropTimer . start
>3595	MemberAccess	forwardLearnPropTimer . start
>3596	Identifier	start
>3597	Identifier	forwardLearnPropTimer
>3598	Callee	TIMER
>3599	Identifier	TIMER
>3633	FunctionDef	Cells4 
>3634	ParameterList	const std 
>3635	Parameter	 
>3636	Identifier	input
>3637	ParameterType	Real *
>3638	Parameter	 
>3639	Identifier	activeColumns
>3640	ParameterType	const std 
>3641	ReturnType	void
>3642	CompoundStatement	 
>3643	ExpressionStatement	 
>3644	CallExpression	learnPhase2 ( false )
>3645	ArgumentList	false
>3646	Argument	false
>3647	Identifier	false
>3648	Callee	learnPhase2
>3649	Identifier	learnPhase2
>3650	IfStatement	if ( _resetCalled || ( _pamCounter == 0 ) || ( ( _maxSeqLength != 0 ) && ( _learnedSeqLength >= _maxSeqLength ) ) )
>3651	CompoundStatement	 
>3652	ExpressionStatement	 
>3653	CallExpression	_segmentUpdates . clear ( )
>3654	ArgumentList	 
>3655	Callee	_segmentUpdates . clear
>3656	MemberAccess	_segmentUpdates . clear
>3657	Identifier	clear
>3658	Identifier	_segmentUpdates
>3659	ExpressionStatement	 
>3660	AssignmentExpr	_learnedSeqLength = backsteps
>3661	Identifier	backsteps
>3662	Identifier	_learnedSeqLength
>3663	ExpressionStatement	 
>3664	AssignmentExpr	_pamCounter = _pamLength
>3665	Identifier	_pamLength
>3666	Identifier	_pamCounter
>3667	IfStatement	if ( _resetCalled || backsteps == 0 )
>3668	CompoundStatement	 
>3669	ExpressionStatement	 
>3670	CallExpression	_prevLrnPatterns . clear ( )
>3671	ArgumentList	 
>3672	Callee	_prevLrnPatterns . clear
>3673	MemberAccess	_prevLrnPatterns . clear
>3674	Identifier	clear
>3675	Identifier	_prevLrnPatterns
>3676	ForStatement	for ( UInt i = 0 ; i < activeColumns . size ( ) ; i ++ )
>3677	CompoundStatement	 
>3678	ExpressionStatement	 
>3679	CallExpression	_learnActiveStateT . set ( cell0 )
>3680	ArgumentList	cell0
>3681	Argument	cell0
>3682	Identifier	cell0
>3683	Callee	_learnActiveStateT . set
>3684	MemberAccess	_learnActiveStateT . set
>3685	Identifier	set
>3686	Identifier	_learnActiveStateT
>3687	IdentifierDeclStatement	 
>3688	IdentifierDecl	cell0 = activeColumns [ i ] * _nCellsPerCol
>3689	AssignmentExpr	cell0 = activeColumns [ i ] * _nCellsPerCol
>3690	MultiplicativeExpression	activeColumns [ i ] * _nCellsPerCol
>3691	Identifier	_nCellsPerCol
>3692	ArrayIndexing	activeColumns [ i ]
>3693	Identifier	i
>3694	Identifier	activeColumns
>3695	Identifier	cell0
>3696	Identifier	cell0
>3697	IdentifierDeclType	UInt
>3698	IncDecOp	 
>3699	IncDec	++
>3700	Identifier	i
>3701	Condition	 
>3702	RelationalExpression	i < activeColumns . size ( )
>3703	CallExpression	activeColumns . size ( )
>3704	ArgumentList	 
>3705	Callee	activeColumns . size
>3706	MemberAccess	activeColumns . size
>3707	Identifier	size
>3708	Identifier	activeColumns
>3709	Identifier	i
>3710	ForInit	 
>3711	IdentifierDeclStatement	UInt i = 0 ;
>3712	IdentifierDecl	i = 0
>3713	AssignmentExpr	i = 0
>3714	PrimaryExpression	0
>3715	Identifier	i
>3716	Identifier	i
>3717	IdentifierDeclType	UInt
>3718	ExpressionStatement	 
>3719	CallExpression	_learnActiveStateT . resetAll ( )
>3720	ArgumentList	 
>3721	Callee	_learnActiveStateT . resetAll
>3722	MemberAccess	_learnActiveStateT . resetAll
>3723	Identifier	resetAll
>3724	Identifier	_learnActiveStateT
>3725	Condition	 
>3726	OrExpression	_resetCalled || backsteps == 0
>3727	EqualityExpression	backsteps == 0
>3728	PrimaryExpression	0
>3729	Identifier	backsteps
>3730	Identifier	_resetCalled
>3731	IfStatement	if ( ! _resetCalled )
>3732	CompoundStatement	 
>3733	ExpressionStatement	 
>3734	CallExpression	TIMER ( learnBacktrackTimer . stop ( ) )
>3735	ArgumentList	learnBacktrackTimer . stop ( )
>3736	Argument	learnBacktrackTimer . stop ( )
>3737	CallExpression	learnBacktrackTimer . stop ( )
>3738	ArgumentList	 
>3739	Callee	learnBacktrackTimer . stop
>3740	MemberAccess	learnBacktrackTimer . stop
>3741	Identifier	stop
>3742	Identifier	learnBacktrackTimer
>3743	Callee	TIMER
>3744	Identifier	TIMER
>3745	ExpressionStatement	 
>3746	AssignmentExpr	backsteps = learnBacktrack ( )
>3747	CallExpression	learnBacktrack ( )
>3748	ArgumentList	 
>3749	Callee	learnBacktrack
>3750	Identifier	learnBacktrack
>3751	Identifier	backsteps
>3752	ExpressionStatement	 
>3753	CallExpression	TIMER ( learnBacktrackTimer . start ( ) )
>3754	ArgumentList	learnBacktrackTimer . start ( )
>3755	Argument	learnBacktrackTimer . start ( )
>3756	CallExpression	learnBacktrackTimer . start ( )
>3757	ArgumentList	 
>3758	Callee	learnBacktrackTimer . start
>3759	MemberAccess	learnBacktrackTimer . start
>3760	Identifier	start
>3761	Identifier	learnBacktrackTimer
>3762	Callee	TIMER
>3763	Identifier	TIMER
>3764	Condition	 
>3765	UnaryOp	! _resetCalled
>3766	Identifier	_resetCalled
>3767	UnaryOperator	!
>3768	IdentifierDeclStatement	 
>3769	IdentifierDecl	backsteps = 0
>3770	AssignmentExpr	backsteps = 0
>3771	PrimaryExpression	0
>3772	Identifier	backsteps
>3773	Identifier	backsteps
>3774	IdentifierDeclType	UInt
>3775	ExpressionStatement	 
>3776	CallExpression	_updateAvgLearnedSeqLength ( seqLength )
>3777	ArgumentList	seqLength
>3778	Argument	seqLength
>3779	Identifier	seqLength
>3780	Callee	_updateAvgLearnedSeqLength
>3781	Identifier	_updateAvgLearnedSeqLength
>3782	IfStatement	if ( _verbosity >= 3 )
>3783	ExpressionStatement	 
>3784	ShiftExpression	std 
>3785	ShiftExpression	\"  learned sequence length was
>3786	ShiftExpression	seqLength << \"\n\"
>3787	PrimaryExpression	\"\n\"
>3788	Identifier	seqLength
>3789	PrimaryExpression	\"  learned sequence length was
>3790	Identifier	std 
>3791	Condition	 
>3792	RelationalExpression	_verbosity >= 3
>3793	PrimaryExpression	3
>3794	Identifier	_verbosity
>3795	IdentifierDeclStatement	 
>3796	IdentifierDecl	seqLength = ( _pamCounter == 0 ? _learnedSeqLength - _pamLength 
>3797	AssignmentExpr	seqLength = ( _pamCounter == 0 ? _learnedSeqLength - _pamLength 
>3798	ConditionalExpression	_pamCounter == 0 ? _learnedSeqLength - _pamLength 
>3799	Identifier	_learnedSeqLength
>3800	AdditiveExpression	_learnedSeqLength - _pamLength
>3801	Identifier	_pamLength
>3802	Identifier	_learnedSeqLength
>3803	Condition	_pamCounter == 0
>3804	EqualityExpression	_pamCounter == 0
>3805	PrimaryExpression	0
>3806	Identifier	_pamCounter
>3807	Identifier	seqLength
>3808	Identifier	seqLength
>3809	IdentifierDeclType	UInt
>3810	IfStatement	if ( _verbosity >= 3 )
>3811	CompoundStatement	 
>3812	IfStatement	if ( _resetCalled )
>3813	ElseStatement	else
>3814	IfStatement	if ( _pamCounter == 0 )
>3815	ElseStatement	else
>3816	ExpressionStatement	 
>3817	ShiftExpression	std 
>3818	PrimaryExpression	\"(reached maxSeqLength)\n\"
>3819	Identifier	std 
>3820	ExpressionStatement	 
>3821	ShiftExpression	std 
>3822	PrimaryExpression	\"(PAM counter expired)\n\"
>3823	Identifier	std 
>3824	Condition	 
>3825	EqualityExpression	_pamCounter == 0
>3826	PrimaryExpression	0
>3827	Identifier	_pamCounter
>3828	ExpressionStatement	 
>3829	ShiftExpression	std 
>3830	PrimaryExpression	\"(reset was called)\n\"
>3831	Identifier	std 
>3832	Condition	 
>3833	Identifier	_resetCalled
>3834	ExpressionStatement	 
>3835	CallExpression	printActiveColumns ( std 
>3836	ArgumentList	std 
>3837	Argument	activeColumns
>3838	Identifier	activeColumns
>3839	Argument	std 
>3840	Identifier	std 
>3841	Callee	printActiveColumns
>3842	Identifier	printActiveColumns
>3843	ExpressionStatement	 
>3844	ShiftExpression	std 
>3845	PrimaryExpression	\"Starting over
>3846	Identifier	std 
>3847	Condition	 
>3848	RelationalExpression	_verbosity >= 3
>3849	PrimaryExpression	3
>3850	Identifier	_verbosity
>3851	Condition	 
>3852	OrExpression	_resetCalled || ( _pamCounter == 0 ) || ( ( _maxSeqLength != 0 ) && ( _learnedSeqLength >= _maxSeqLength ) )
>3853	OrExpression	( _pamCounter == 0 ) || ( ( _maxSeqLength != 0 ) && ( _learnedSeqLength >= _maxSeqLength ) )
>3854	AndExpression	( _maxSeqLength != 0 ) && ( _learnedSeqLength >= _maxSeqLength )
>3855	RelationalExpression	_learnedSeqLength >= _maxSeqLength
>3856	Identifier	_maxSeqLength
>3857	Identifier	_learnedSeqLength
>3858	EqualityExpression	_maxSeqLength != 0
>3859	PrimaryExpression	0
>3860	Identifier	_maxSeqLength
>3861	EqualityExpression	_pamCounter == 0
>3862	PrimaryExpression	0
>3863	Identifier	_pamCounter
>3864	Identifier	_resetCalled
>3865	IfStatement	if ( _verbosity >= 3 )
>3866	CompoundStatement	 
>3867	ExpressionStatement	 
>3868	ShiftExpression	std 
>3869	ShiftExpression	\"pamCounter = \" << _pamCounter << \", learnedSeqLength = \" << _learnedSeqLength << \"\n\"
>3870	ShiftExpression	_pamCounter << \", learnedSeqLength = \" << _learnedSeqLength << \"\n\"
>3871	ShiftExpression	\", learnedSeqLength = \" << _learnedSeqLength << \"\n\"
>3872	ShiftExpression	_learnedSeqLength << \"\n\"
>3873	PrimaryExpression	\"\n\"
>3874	Identifier	_learnedSeqLength
>3875	PrimaryExpression	\", learnedSeqLength = \"
>3876	Identifier	_pamCounter
>3877	PrimaryExpression	\"pamCounter = \"
>3878	Identifier	std 
>3879	Condition	 
>3880	RelationalExpression	_verbosity >= 3
>3881	PrimaryExpression	3
>3882	Identifier	_verbosity
>3883	IfStatement	if ( ! _resetCalled )
>3884	CompoundStatement	 
>3885	IfStatement	if ( inSequence )
>3886	CompoundStatement	 
>3887	ExpressionStatement	 
>3888	AssignmentExpr	_pamCounter = _pamLength
>3889	Identifier	_pamLength
>3890	Identifier	_pamCounter
>3891	Condition	 
>3892	Identifier	inSequence
>3893	IdentifierDeclStatement	 
>3894	IdentifierDecl	inSequence = learnPhase1 ( activeColumns , false )
>3895	AssignmentExpr	inSequence = learnPhase1 ( activeColumns , false )
>3896	CallExpression	learnPhase1 ( activeColumns , false )
>3897	ArgumentList	activeColumns
>3898	Argument	false
>3899	Identifier	false
>3900	Argument	activeColumns
>3901	Identifier	activeColumns
>3902	Callee	learnPhase1
>3903	Identifier	learnPhase1
>3904	Identifier	inSequence
>3905	Identifier	inSequence
>3906	IdentifierDeclType	bool
>3907	Condition	 
>3908	UnaryOp	! _resetCalled
>3909	Identifier	_resetCalled
>3910	UnaryOperator	!
>3911	ExpressionStatement	 
>3912	IncDecOp	_learnedSeqLength ++
>3913	IncDec	++
>3914	Identifier	_learnedSeqLength
>3915	IfStatement	if ( _pamCounter > 0 )
>3916	CompoundStatement	 
>3917	ExpressionStatement	 
>3918	AssignmentExpr	_pamCounter -= 1
>3919	PrimaryExpression	1
>3920	Identifier	_pamCounter
>3921	Condition	 
>3922	RelationalExpression	_pamCounter > 0
>3923	PrimaryExpression	0
>3924	Identifier	_pamCounter
>3925	ExpressionStatement	 
>3926	CallExpression	processSegmentUpdates ( input , _learnPredictedStateT )
>3927	ArgumentList	input
>3928	Argument	_learnPredictedStateT
>3929	Identifier	_learnPredictedStateT
>3930	Argument	input
>3931	Identifier	input
>3932	Callee	processSegmentUpdates
>3933	Identifier	processSegmentUpdates
>3934	IfStatement	if ( _maxLrnBacktrack > 0 )
>3935	CompoundStatement	 
>3936	IfStatement	if ( _verbosity >= 4 )
>3937	CompoundStatement	 
>3938	ExpressionStatement	 
>3939	CallExpression	dumpPrevPatterns ( _prevLrnPatterns )
>3940	ArgumentList	_prevLrnPatterns
>3941	Argument	_prevLrnPatterns
>3942	Identifier	_prevLrnPatterns
>3943	Callee	dumpPrevPatterns
>3944	Identifier	dumpPrevPatterns
>3945	ExpressionStatement	 
>3946	ShiftExpression	std 
>3947	PrimaryExpression	\"Previous learn patterns
>3948	Identifier	std 
>3949	Condition	 
>3950	RelationalExpression	_verbosity >= 4
>3951	PrimaryExpression	4
>3952	Identifier	_verbosity
>3953	ExpressionStatement	 
>3954	CallExpression	_prevLrnPatterns . push_back ( activeColumns )
>3955	ArgumentList	activeColumns
>3956	Argument	activeColumns
>3957	Identifier	activeColumns
>3958	Callee	_prevLrnPatterns . push_back
>3959	MemberAccess	_prevLrnPatterns . push_back
>3960	Identifier	push_back
>3961	Identifier	_prevLrnPatterns
>3962	IfStatement	if ( _prevLrnPatterns . size ( ) > _maxLrnBacktrack )
>3963	ExpressionStatement	 
>3964	CallExpression	_prevLrnPatterns . pop_front ( )
>3965	ArgumentList	 
>3966	Callee	_prevLrnPatterns . pop_front
>3967	MemberAccess	_prevLrnPatterns . pop_front
>3968	Identifier	pop_front
>3969	Identifier	_prevLrnPatterns
>3970	Condition	 
>3971	RelationalExpression	_prevLrnPatterns . size ( ) > _maxLrnBacktrack
>3972	Identifier	_maxLrnBacktrack
>3973	CallExpression	_prevLrnPatterns . size ( )
>3974	ArgumentList	 
>3975	Callee	_prevLrnPatterns . size
>3976	MemberAccess	_prevLrnPatterns . size
>3977	Identifier	size
>3978	Identifier	_prevLrnPatterns
>3979	Condition	 
>3980	RelationalExpression	_maxLrnBacktrack > 0
>3981	PrimaryExpression	0
>3982	Identifier	_maxLrnBacktrack
>3983	ExpressionStatement	 
>3984	AssignmentExpr	_learnPredictedStateT1 = _learnPredictedStateT
>3985	Identifier	_learnPredictedStateT
>3986	Identifier	_learnPredictedStateT1
>3987	ExpressionStatement	 
>3988	AssignmentExpr	_learnActiveStateT1 = _learnActiveStateT
>3989	Identifier	_learnActiveStateT
>3990	Identifier	_learnActiveStateT1
>4026	FunctionDef	Cells4 
>4027	ParameterList	const std 
>4028	Parameter	 
>4029	Identifier	activeColumns
>4030	ParameterType	const std 
>4031	ReturnType	void
>4032	CompoundStatement	 
>4033	IfStatement	if ( ! inSequence )
>4034	CompoundStatement	 
>4035	ExpressionStatement	 
>4036	CallExpression	inferBacktrack ( activeColumns )
>4037	ArgumentList	activeColumns
>4038	Argument	activeColumns
>4039	Identifier	activeColumns
>4040	Callee	inferBacktrack
>4041	Identifier	inferBacktrack
>4042	IfStatement	if ( _verbosity >= 3 )
>4043	CompoundStatement	 
>4044	ExpressionStatement	 
>4045	ShiftExpression	std 
>4046	ShiftExpression	\"Not enough predictions going forward, re-tracing back\" << \"to try and lock on at an earlier timestep.\n\"\
>4047	PrimaryExpression	\"to try and lock on at an earlier timestep.\n\"
>4048	PrimaryExpression	\"Not enough predictions going forward, re-tracing back\"
>4049	Identifier	std 
>4050	Condition	 
>4051	RelationalExpression	_verbosity >= 3
>4052	PrimaryExpression	3
>4053	Identifier	_verbosity
>4054	Condition	 
>4055	UnaryOp	! inSequence
>4056	Identifier	inSequence
>4057	UnaryOperator	!
>4058	ExpressionStatement	 
>4059	AssignmentExpr	inSequence = inferPhase2 ( )
>4060	CallExpression	inferPhase2 ( )
>4061	ArgumentList	 
>4062	Callee	inferPhase2
>4063	Identifier	inferPhase2
>4064	Identifier	inSequence
>4065	IfStatement	if ( ! inSequence )
>4066	CompoundStatement	 
>4067	ReturnStatement	 
>4068	ExpressionStatement	 
>4069	CallExpression	inferBacktrack ( activeColumns )
>4070	ArgumentList	activeColumns
>4071	Argument	activeColumns
>4072	Identifier	activeColumns
>4073	Callee	inferBacktrack
>4074	Identifier	inferBacktrack
>4075	IfStatement	if ( _verbosity >= 3 )
>4076	CompoundStatement	 
>4077	ExpressionStatement	 
>4078	ShiftExpression	std 
>4079	ShiftExpression	\"Too much unpredicted input, re-tracing back to try and\" << \"lock on at an earlier timestep.\n\"
>4080	PrimaryExpression	\"lock on at an earlier timestep.\n\"
>4081	PrimaryExpression	\"Too much unpredicted input, re-tracing back to try and\"
>4082	Identifier	std 
>4083	Condition	 
>4084	RelationalExpression	_verbosity >= 3
>4085	PrimaryExpression	3
>4086	Identifier	_verbosity
>4087	Condition	 
>4088	UnaryOp	! inSequence
>4089	Identifier	inSequence
>4090	UnaryOperator	!
>4091	IdentifierDeclStatement	 
>4092	IdentifierDecl	inSequence = inferPhase1 ( activeColumns , _resetCalled )
>4093	AssignmentExpr	inSequence = inferPhase1 ( activeColumns , _resetCalled )
>4094	CallExpression	inferPhase1 ( activeColumns , _resetCalled )
>4095	ArgumentList	activeColumns
>4096	Argument	_resetCalled
>4097	Identifier	_resetCalled
>4098	Argument	activeColumns
>4099	Identifier	activeColumns
>4100	Callee	inferPhase1
>4101	Identifier	inferPhase1
>4102	Identifier	inSequence
>4103	Identifier	inSequence
>4104	IdentifierDeclType	bool
>4105	IfStatement	if ( _maxInfBacktrack > 0 )
>4106	CompoundStatement	 
>4107	IfStatement	if ( _verbosity >= 4 )
>4108	CompoundStatement	 
>4109	ExpressionStatement	 
>4110	CallExpression	dumpPrevPatterns ( _prevInfPatterns )
>4111	ArgumentList	_prevInfPatterns
>4112	Argument	_prevInfPatterns
>4113	Identifier	_prevInfPatterns
>4114	Callee	dumpPrevPatterns
>4115	Identifier	dumpPrevPatterns
>4116	ExpressionStatement	 
>4117	ShiftExpression	std 
>4118	PrimaryExpression	\"Previous inference patterns
>4119	Identifier	std 
>4120	Condition	 
>4121	RelationalExpression	_verbosity >= 4
>4122	PrimaryExpression	4
>4123	Identifier	_verbosity
>4124	ExpressionStatement	 
>4125	CallExpression	_prevInfPatterns . push_back ( activeColumns )
>4126	ArgumentList	activeColumns
>4127	Argument	activeColumns
>4128	Identifier	activeColumns
>4129	Callee	_prevInfPatterns . push_back
>4130	MemberAccess	_prevInfPatterns . push_back
>4131	Identifier	push_back
>4132	Identifier	_prevInfPatterns
>4133	IfStatement	if ( _prevInfPatterns . size ( ) > _maxInfBacktrack )
>4134	ExpressionStatement	 
>4135	CallExpression	_prevInfPatterns . pop_front ( )
>4136	ArgumentList	 
>4137	Callee	_prevInfPatterns . pop_front
>4138	MemberAccess	_prevInfPatterns . pop_front
>4139	Identifier	pop_front
>4140	Identifier	_prevInfPatterns
>4141	Condition	 
>4142	RelationalExpression	_prevInfPatterns . size ( ) > _maxInfBacktrack
>4143	Identifier	_maxInfBacktrack
>4144	CallExpression	_prevInfPatterns . size ( )
>4145	ArgumentList	 
>4146	Callee	_prevInfPatterns . size
>4147	MemberAccess	_prevInfPatterns . size
>4148	Identifier	size
>4149	Identifier	_prevInfPatterns
>4150	Condition	 
>4151	RelationalExpression	_maxInfBacktrack > 0
>4152	PrimaryExpression	0
>4153	Identifier	_maxInfBacktrack
>4154	ForStatement	for ( UInt i = 0 ; i != _nColumns ; ++ i )
>4155	CompoundStatement	 
>4156	ExpressionStatement	 
>4157	AssignmentExpr	_colConfidenceT1 [ i ] = _colConfidenceT [ i ]
>4158	ArrayIndexing	_colConfidenceT [ i ]
>4159	Identifier	i
>4160	Identifier	_colConfidenceT
>4161	ArrayIndexing	_colConfidenceT1 [ i ]
>4162	Identifier	i
>4163	Identifier	_colConfidenceT1
>4164	UnaryExpression	 
>4165	Identifier	i
>4166	IncDec	++
>4167	Condition	 
>4168	EqualityExpression	i != _nColumns
>4169	Identifier	_nColumns
>4170	Identifier	i
>4171	ForInit	 
>4172	IdentifierDeclStatement	UInt i = 0 ;
>4173	IdentifierDecl	i = 0
>4174	AssignmentExpr	i = 0
>4175	PrimaryExpression	0
>4176	Identifier	i
>4177	Identifier	i
>4178	IdentifierDeclType	UInt
>4179	ExpressionStatement	 
>4180	CallExpression	memcpy ( _cellConfidenceT1 , _cellConfidenceT , _nCells * sizeof ( _cellConfidenceT [ 0 ] ) )
>4181	ArgumentList	_cellConfidenceT1
>4182	Argument	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>4183	MultiplicativeExpression	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>4184	SizeofExpr	sizeof ( _cellConfidenceT [ 0 ] )
>4185	ArrayIndexing	_cellConfidenceT [ 0 ]
>4186	PrimaryExpression	0
>4187	Identifier	_cellConfidenceT
>4188	Sizeof	sizeof
>4189	Identifier	_nCells
>4190	Argument	_cellConfidenceT
>4191	Identifier	_cellConfidenceT
>4192	Argument	_cellConfidenceT1
>4193	Identifier	_cellConfidenceT1
>4194	Callee	memcpy
>4195	Identifier	memcpy
>4196	ExpressionStatement	 
>4197	AssignmentExpr	_infPredictedStateT1 = _infPredictedStateT
>4198	Identifier	_infPredictedStateT
>4199	Identifier	_infPredictedStateT1
>4200	ExpressionStatement	 
>4201	AssignmentExpr	_infActiveStateT1 = _infActiveStateT
>4202	Identifier	_infActiveStateT
>4203	Identifier	_infActiveStateT1
>4231	FunctionDef	Cells4 
>4232	ParameterList	const std 
>4233	Parameter	 
>4234	Identifier	useStartCells
>4235	ParameterType	bool
>4236	Parameter	 
>4237	Identifier	activeColumns
>4238	ParameterType	const std 
>4239	ReturnType	bool
>4240	CompoundStatement	 
>4241	IfStatement	if ( useStartCells || ( numPredictedColumns >= 0.50 * activeColumns . size ( ) ) )
>4242	ElseStatement	else
>4243	ReturnStatement	 
>4244	Identifier	false
>4245	ReturnStatement	 
>4246	Identifier	true
>4247	Condition	 
>4248	OrExpression	useStartCells || ( numPredictedColumns >= 0.50 * activeColumns . size ( ) )
>4249	RelationalExpression	numPredictedColumns >= 0.50 * activeColumns . size ( )
>4250	MultiplicativeExpression	0.50 * activeColumns . size ( )
>4251	CallExpression	activeColumns . size ( )
>4252	ArgumentList	 
>4253	Callee	activeColumns . size
>4254	MemberAccess	activeColumns . size
>4255	Identifier	size
>4256	Identifier	activeColumns
>4257	PrimaryExpression	0.50
>4258	Identifier	numPredictedColumns
>4259	Identifier	useStartCells
>4260	ExpressionStatement	 
>4261	CallExpression	TIMER ( infPhase1Timer . stop ( ) )
>4262	ArgumentList	infPhase1Timer . stop ( )
>4263	Argument	infPhase1Timer . stop ( )
>4264	CallExpression	infPhase1Timer . stop ( )
>4265	ArgumentList	 
>4266	Callee	infPhase1Timer . stop
>4267	MemberAccess	infPhase1Timer . stop
>4268	Identifier	stop
>4269	Identifier	infPhase1Timer
>4270	Callee	TIMER
>4271	Identifier	TIMER
>4272	IfStatement	if ( useStartCells )
>4273	ElseStatement	else
>4274	CompoundStatement	 
>4275	ForStatement	for ( UInt i = 0 ; i < activeColumns . size ( ) ; i ++ )
>4276	CompoundStatement	 
>4277	IfStatement	if ( numPredictingCells > 0 )
>4278	ElseStatement	else
>4279	CompoundStatement	 
>4280	ForStatement	for ( UInt ci = cellIdx ; ci < cellIdx + _nCellsPerCol ; ci ++ )
>4281	CompoundStatement	 
>4282	ExpressionStatement	 
>4283	CallExpression	_infActiveStateT . set ( ci )
>4284	ArgumentList	ci
>4285	Argument	ci
>4286	Identifier	ci
>4287	Callee	_infActiveStateT . set
>4288	MemberAccess	_infActiveStateT . set
>4289	Identifier	set
>4290	Identifier	_infActiveStateT
>4291	IncDecOp	 
>4292	IncDec	++
>4293	Identifier	ci
>4294	Condition	 
>4295	RelationalExpression	ci < cellIdx + _nCellsPerCol
>4296	AdditiveExpression	cellIdx + _nCellsPerCol
>4297	Identifier	_nCellsPerCol
>4298	Identifier	cellIdx
>4299	Identifier	ci
>4300	ForInit	 
>4301	IdentifierDeclStatement	UInt ci = cellIdx ;
>4302	IdentifierDecl	ci = cellIdx
>4303	AssignmentExpr	ci = cellIdx
>4304	Identifier	cellIdx
>4305	Identifier	cellIdx
>4306	Identifier	ci
>4307	IdentifierDeclType	UInt
>4308	CompoundStatement	 
>4309	ExpressionStatement	 
>4310	AssignmentExpr	numPredictedColumns += 1
>4311	PrimaryExpression	1
>4312	Identifier	numPredictedColumns
>4313	Condition	 
>4314	RelationalExpression	numPredictingCells > 0
>4315	PrimaryExpression	0
>4316	Identifier	numPredictingCells
>4317	ForStatement	for ( UInt ci = cellIdx ; ci < cellIdx + _nCellsPerCol ; ci ++ )
>4318	CompoundStatement	 
>4319	IfStatement	if ( _infPredictedStateT1 . isSet ( ci ) )
>4320	CompoundStatement	 
>4321	ExpressionStatement	 
>4322	CallExpression	_infActiveStateT . set ( ci )
>4323	ArgumentList	ci
>4324	Argument	ci
>4325	Identifier	ci
>4326	Callee	_infActiveStateT . set
>4327	MemberAccess	_infActiveStateT . set
>4328	Identifier	set
>4329	Identifier	_infActiveStateT
>4330	ExpressionStatement	 
>4331	IncDecOp	numPredictingCells ++
>4332	IncDec	++
>4333	Identifier	numPredictingCells
>4334	Condition	 
>4335	CallExpression	_infPredictedStateT1 . isSet ( ci )
>4336	ArgumentList	ci
>4337	Argument	ci
>4338	Identifier	ci
>4339	Callee	_infPredictedStateT1 . isSet
>4340	MemberAccess	_infPredictedStateT1 . isSet
>4341	Identifier	isSet
>4342	Identifier	_infPredictedStateT1
>4343	IncDecOp	 
>4344	IncDec	++
>4345	Identifier	ci
>4346	Condition	 
>4347	RelationalExpression	ci < cellIdx + _nCellsPerCol
>4348	AdditiveExpression	cellIdx + _nCellsPerCol
>4349	Identifier	_nCellsPerCol
>4350	Identifier	cellIdx
>4351	Identifier	ci
>4352	ForInit	 
>4353	IdentifierDeclStatement	UInt ci = cellIdx ;
>4354	IdentifierDecl	ci = cellIdx
>4355	AssignmentExpr	ci = cellIdx
>4356	Identifier	cellIdx
>4357	Identifier	cellIdx
>4358	Identifier	ci
>4359	IdentifierDeclType	UInt
>4360	IdentifierDeclStatement	 
>4361	IdentifierDecl	numPredictingCells = 0
>4362	AssignmentExpr	numPredictingCells = 0
>4363	PrimaryExpression	0
>4364	Identifier	numPredictingCells
>4365	Identifier	numPredictingCells
>4366	IdentifierDeclType	UInt
>4367	IdentifierDeclStatement	 
>4368	IdentifierDecl	cellIdx = activeColumns [ i ] * _nCellsPerCol
>4369	AssignmentExpr	cellIdx = activeColumns [ i ] * _nCellsPerCol
>4370	MultiplicativeExpression	activeColumns [ i ] * _nCellsPerCol
>4371	Identifier	_nCellsPerCol
>4372	ArrayIndexing	activeColumns [ i ]
>4373	Identifier	i
>4374	Identifier	activeColumns
>4375	Identifier	cellIdx
>4376	Identifier	cellIdx
>4377	IdentifierDeclType	UInt
>4378	IncDecOp	 
>4379	IncDec	++
>4380	Identifier	i
>4381	Condition	 
>4382	RelationalExpression	i < activeColumns . size ( )
>4383	CallExpression	activeColumns . size ( )
>4384	ArgumentList	 
>4385	Callee	activeColumns . size
>4386	MemberAccess	activeColumns . size
>4387	Identifier	size
>4388	Identifier	activeColumns
>4389	Identifier	i
>4390	ForInit	 
>4391	IdentifierDeclStatement	UInt i = 0 ;
>4392	IdentifierDecl	i = 0
>4393	AssignmentExpr	i = 0
>4394	PrimaryExpression	0
>4395	Identifier	i
>4396	Identifier	i
>4397	IdentifierDeclType	UInt
>4398	CompoundStatement	 
>4399	ForStatement	for ( UInt i = 0 ; i < activeColumns . size ( ) ; i ++ )
>4400	CompoundStatement	 
>4401	ExpressionStatement	 
>4402	CallExpression	_infActiveStateT . set ( cellIdx )
>4403	ArgumentList	cellIdx
>4404	Argument	cellIdx
>4405	Identifier	cellIdx
>4406	Callee	_infActiveStateT . set
>4407	MemberAccess	_infActiveStateT . set
>4408	Identifier	set
>4409	Identifier	_infActiveStateT
>4410	IdentifierDeclStatement	 
>4411	IdentifierDecl	cellIdx = activeColumns [ i ] * _nCellsPerCol
>4412	AssignmentExpr	cellIdx = activeColumns [ i ] * _nCellsPerCol
>4413	MultiplicativeExpression	activeColumns [ i ] * _nCellsPerCol
>4414	Identifier	_nCellsPerCol
>4415	ArrayIndexing	activeColumns [ i ]
>4416	Identifier	i
>4417	Identifier	activeColumns
>4418	Identifier	cellIdx
>4419	Identifier	cellIdx
>4420	IdentifierDeclType	UInt
>4421	IncDecOp	 
>4422	IncDec	++
>4423	Identifier	i
>4424	Condition	 
>4425	RelationalExpression	i < activeColumns . size ( )
>4426	CallExpression	activeColumns . size ( )
>4427	ArgumentList	 
>4428	Callee	activeColumns . size
>4429	MemberAccess	activeColumns . size
>4430	Identifier	size
>4431	Identifier	activeColumns
>4432	Identifier	i
>4433	ForInit	 
>4434	IdentifierDeclStatement	UInt i = 0 ;
>4435	IdentifierDecl	i = 0
>4436	AssignmentExpr	i = 0
>4437	PrimaryExpression	0
>4438	Identifier	i
>4439	Identifier	i
>4440	IdentifierDeclType	UInt
>4441	Condition	 
>4442	Identifier	useStartCells
>4443	IdentifierDeclStatement	 
>4444	IdentifierDecl	numPredictedColumns = 0
>4445	AssignmentExpr	numPredictedColumns = 0
>4446	PrimaryExpression	0
>4447	Identifier	numPredictedColumns
>4448	Identifier	numPredictedColumns
>4449	IdentifierDeclType	UInt
>4450	ExpressionStatement	 
>4451	CallExpression	_infActiveStateT . resetAll ( )
>4452	ArgumentList	 
>4453	Callee	_infActiveStateT . resetAll
>4454	MemberAccess	_infActiveStateT . resetAll
>4455	Identifier	resetAll
>4456	Identifier	_infActiveStateT
>4457	ExpressionStatement	 
>4458	CallExpression	TIMER ( infPhase1Timer . start ( ) )
>4459	ArgumentList	infPhase1Timer . start ( )
>4460	Argument	infPhase1Timer . start ( )
>4461	CallExpression	infPhase1Timer . start ( )
>4462	ArgumentList	 
>4463	Callee	infPhase1Timer . start
>4464	MemberAccess	infPhase1Timer . start
>4465	Identifier	start
>4466	Identifier	infPhase1Timer
>4467	Callee	TIMER
>4468	Identifier	TIMER
>4491	FunctionDef	Cells4 
>4492	ParameterList	 
>4493	ReturnType	bool
>4494	CompoundStatement	 
>4495	IfStatement	if ( numPredictedCols >= ( 0.5 * _avgInputDensity ) )
>4496	ElseStatement	else
>4497	ReturnStatement	 
>4498	Identifier	false
>4499	ReturnStatement	 
>4500	Identifier	true
>4501	Condition	 
>4502	RelationalExpression	numPredictedCols >= ( 0.5 * _avgInputDensity )
>4503	MultiplicativeExpression	0.5 * _avgInputDensity
>4504	Identifier	_avgInputDensity
>4505	PrimaryExpression	0.5
>4506	Identifier	numPredictedCols
>4507	ExpressionStatement	 
>4508	CallExpression	TIMER ( infPhase2Timer . stop ( ) )
>4509	ArgumentList	infPhase2Timer . stop ( )
>4510	Argument	infPhase2Timer . stop ( )
>4511	CallExpression	infPhase2Timer . stop ( )
>4512	ArgumentList	 
>4513	Callee	infPhase2Timer . stop
>4514	MemberAccess	infPhase2Timer . stop
>4515	Identifier	stop
>4516	Identifier	infPhase2Timer
>4517	Callee	TIMER
>4518	Identifier	TIMER
>4519	IfStatement	if ( sumColConfidence > 0 )
>4520	CompoundStatement	 
>4521	ForStatement	for ( UInt i = 0 ; i < _nCells ; i ++ )
>4522	ExpressionStatement	 
>4523	AssignmentExpr	_cellConfidenceT [ i ] /= sumColConfidence
>4524	Identifier	sumColConfidence
>4525	ArrayIndexing	_cellConfidenceT [ i ]
>4526	Identifier	i
>4527	Identifier	_cellConfidenceT
>4528	IncDecOp	 
>4529	IncDec	++
>4530	Identifier	i
>4531	Condition	 
>4532	RelationalExpression	i < _nCells
>4533	Identifier	_nCells
>4534	Identifier	i
>4535	ForInit	 
>4536	IdentifierDeclStatement	UInt i = 0 ;
>4537	IdentifierDecl	i = 0
>4538	AssignmentExpr	i = 0
>4539	PrimaryExpression	0
>4540	Identifier	i
>4541	Identifier	i
>4542	IdentifierDeclType	UInt
>4543	ForStatement	for ( UInt c = 0 ; c < _nColumns ; c ++ )
>4544	ExpressionStatement	 
>4545	AssignmentExpr	_colConfidenceT [ c ] /= sumColConfidence
>4546	Identifier	sumColConfidence
>4547	ArrayIndexing	_colConfidenceT [ c ]
>4548	Identifier	c
>4549	Identifier	_colConfidenceT
>4550	IncDecOp	 
>4551	IncDec	++
>4552	Identifier	c
>4553	Condition	 
>4554	RelationalExpression	c < _nColumns
>4555	Identifier	_nColumns
>4556	Identifier	c
>4557	ForInit	 
>4558	IdentifierDeclStatement	UInt c = 0 ;
>4559	IdentifierDecl	c = 0
>4560	AssignmentExpr	c = 0
>4561	PrimaryExpression	0
>4562	Identifier	c
>4563	Identifier	c
>4564	IdentifierDeclType	UInt
>4565	Condition	 
>4566	RelationalExpression	sumColConfidence > 0
>4567	PrimaryExpression	0
>4568	Identifier	sumColConfidence
>4569	ForStatement	for ( UInt c = 0 ; c < _nColumns ; c ++ )
>4570	CompoundStatement	 
>4571	ExpressionStatement	 
>4572	AssignmentExpr	numPredictedCols += ( colPredicted ? 1 
>4573	ConditionalExpression	colPredicted ? 1 
>4574	PrimaryExpression	0
>4575	PrimaryExpression	1
>4576	Condition	colPredicted
>4577	Identifier	colPredicted
>4578	Identifier	numPredictedCols
>4579	ExpressionStatement	 
>4580	AssignmentExpr	sumColConfidence += _colConfidenceT [ c ]
>4581	ArrayIndexing	_colConfidenceT [ c ]
>4582	Identifier	c
>4583	Identifier	_colConfidenceT
>4584	Identifier	sumColConfidence
>4585	ForStatement	for ( UInt i = 0 ; i < _nCellsPerCol ; i ++ , cellIdx ++ )
>4586	CompoundStatement	 
>4587	IfStatement	if ( _inferActivity . get ( cellIdx ) >= _activationThreshold )
>4588	CompoundStatement	 
>4589	ForStatement	for ( UInt j = 0 ; j != _cells [ cellIdx ] . size ( ) ; ++ j )
>4590	CompoundStatement	 
>4591	IfStatement	if ( _inferActivity . get ( cellIdx , j ) >= _activationThreshold )
>4592	CompoundStatement	 
>4593	IfStatement	if ( isActive ( cellIdx , j , _infActiveStateT ) )
>4594	CompoundStatement	 
>4595	ExpressionStatement	 
>4596	AssignmentExpr	colPredicted = true
>4597	Identifier	true
>4598	Identifier	colPredicted
>4599	ExpressionStatement	 
>4600	CallExpression	_infPredictedStateT . set ( cellIdx )
>4601	ArgumentList	cellIdx
>4602	Argument	cellIdx
>4603	Identifier	cellIdx
>4604	Callee	_infPredictedStateT . set
>4605	MemberAccess	_infPredictedStateT . set
>4606	Identifier	set
>4607	Identifier	_infPredictedStateT
>4608	Condition	 
>4609	CallExpression	isActive ( cellIdx , j , _infActiveStateT )
>4610	ArgumentList	cellIdx
>4611	Argument	_infActiveStateT
>4612	Identifier	_infActiveStateT
>4613	Argument	j
>4614	Identifier	j
>4615	Argument	cellIdx
>4616	Identifier	cellIdx
>4617	Callee	isActive
>4618	Identifier	isActive
>4619	ExpressionStatement	 
>4620	AssignmentExpr	_colConfidenceT [ c ] += dc
>4621	Identifier	dc
>4622	ArrayIndexing	_colConfidenceT [ c ]
>4623	Identifier	c
>4624	Identifier	_colConfidenceT
>4625	ExpressionStatement	 
>4626	AssignmentExpr	_cellConfidenceT [ cellIdx ] += dc
>4627	Identifier	dc
>4628	ArrayIndexing	_cellConfidenceT [ cellIdx ]
>4629	Identifier	cellIdx
>4630	Identifier	_cellConfidenceT
>4631	IdentifierDeclStatement	 
>4632	IdentifierDecl	dc = _cells [ cellIdx ] [ j ] . dutyCycle ( _nLrnIterations , false , false )
>4633	AssignmentExpr	dc = _cells [ cellIdx ] [ j ] . dutyCycle ( _nLrnIterations , false , false )
>4634	CallExpression	_cells [ cellIdx ] [ j ] . dutyCycle ( _nLrnIterations , false , false )
>4635	ArgumentList	_nLrnIterations
>4636	Argument	false
>4637	Identifier	false
>4638	Argument	false
>4639	Identifier	false
>4640	Argument	_nLrnIterations
>4641	Identifier	_nLrnIterations
>4642	Callee	_cells [ cellIdx ] [ j ] . dutyCycle
>4643	MemberAccess	_cells [ cellIdx ] [ j ] . dutyCycle
>4644	Identifier	dutyCycle
>4645	ArrayIndexing	_cells [ cellIdx ] [ j ]
>4646	Identifier	j
>4647	ArrayIndexing	_cells [ cellIdx ]
>4648	Identifier	cellIdx
>4649	Identifier	_cells
>4650	Identifier	dc
>4651	Identifier	dc
>4652	IdentifierDeclType	Real
>4653	Condition	 
>4654	RelationalExpression	_inferActivity . get ( cellIdx , j ) >= _activationThreshold
>4655	Identifier	_activationThreshold
>4656	CallExpression	_inferActivity . get ( cellIdx , j )
>4657	ArgumentList	cellIdx
>4658	Argument	j
>4659	Identifier	j
>4660	Argument	cellIdx
>4661	Identifier	cellIdx
>4662	Callee	_inferActivity . get
>4663	MemberAccess	_inferActivity . get
>4664	Identifier	get
>4665	Identifier	_inferActivity
>4666	IfStatement	if ( _checkSynapseConsistency )
>4667	CompoundStatement	 
>4668	ExpressionStatement	 
>4669	CallExpression	NTA_CHECK ( numActiveSyns == _inferActivity . get ( cellIdx , j ) )
>4670	ArgumentList	numActiveSyns == _inferActivity . get ( cellIdx , j )
>4671	Argument	numActiveSyns == _inferActivity . get ( cellIdx , j )
>4672	EqualityExpression	numActiveSyns == _inferActivity . get ( cellIdx , j )
>4673	CallExpression	_inferActivity . get ( cellIdx , j )
>4674	ArgumentList	cellIdx
>4675	Argument	j
>4676	Identifier	j
>4677	Argument	cellIdx
>4678	Identifier	cellIdx
>4679	Callee	_inferActivity . get
>4680	MemberAccess	_inferActivity . get
>4681	Identifier	get
>4682	Identifier	_inferActivity
>4683	Identifier	numActiveSyns
>4684	Callee	NTA_CHECK
>4685	Identifier	NTA_CHECK
>4686	IdentifierDeclStatement	 
>4687	IdentifierDecl	numActiveSyns = seg . computeActivity ( _infActiveStateT , _permConnected , false )
>4688	AssignmentExpr	numActiveSyns = seg . computeActivity ( _infActiveStateT , _permConnected , false )
>4689	CallExpression	seg . computeActivity ( _infActiveStateT , _permConnected , false )
>4690	ArgumentList	_infActiveStateT
>4691	Argument	false
>4692	Identifier	false
>4693	Argument	_permConnected
>4694	Identifier	_permConnected
>4695	Argument	_infActiveStateT
>4696	Identifier	_infActiveStateT
>4697	Callee	seg . computeActivity
>4698	MemberAccess	seg . computeActivity
>4699	Identifier	computeActivity
>4700	Identifier	seg
>4701	Identifier	numActiveSyns
>4702	Identifier	numActiveSyns
>4703	IdentifierDeclType	UInt
>4704	IdentifierDeclStatement	 
>4705	IdentifierDecl	& seg = _cells [ cellIdx ] [ j ]
>4706	AssignmentExpr	& seg = _cells [ cellIdx ] [ j ]
>4707	ArrayIndexing	_cells [ cellIdx ] [ j ]
>4708	Identifier	j
>4709	ArrayIndexing	_cells [ cellIdx ]
>4710	Identifier	cellIdx
>4711	Identifier	_cells
>4712	Identifier	seg
>4713	Identifier	seg
>4714	IdentifierDeclType	const Segment &
>4715	Condition	 
>4716	Identifier	_checkSynapseConsistency
>4717	UnaryExpression	 
>4718	Identifier	j
>4719	IncDec	++
>4720	Condition	 
>4721	EqualityExpression	j != _cells [ cellIdx ] . size ( )
>4722	CallExpression	_cells [ cellIdx ] . size ( )
>4723	ArgumentList	 
>4724	Callee	_cells [ cellIdx ] . size
>4725	MemberAccess	_cells [ cellIdx ] . size
>4726	Identifier	size
>4727	ArrayIndexing	_cells [ cellIdx ]
>4728	Identifier	cellIdx
>4729	Identifier	_cells
>4730	Identifier	j
>4731	ForInit	 
>4732	IdentifierDeclStatement	UInt j = 0 ;
>4733	IdentifierDecl	j = 0
>4734	AssignmentExpr	j = 0
>4735	PrimaryExpression	0
>4736	Identifier	j
>4737	Identifier	j
>4738	IdentifierDeclType	UInt
>4739	Condition	 
>4740	RelationalExpression	_inferActivity . get ( cellIdx ) >= _activationThreshold
>4741	Identifier	_activationThreshold
>4742	CallExpression	_inferActivity . get ( cellIdx )
>4743	ArgumentList	cellIdx
>4744	Argument	cellIdx
>4745	Identifier	cellIdx
>4746	Callee	_inferActivity . get
>4747	MemberAccess	_inferActivity . get
>4748	Identifier	get
>4749	Identifier	_inferActivity
>4750	Expression	 
>4751	IncDecOp	cellIdx ++
>4752	IncDec	++
>4753	Identifier	cellIdx
>4754	IncDecOp	i ++
>4755	IncDec	++
>4756	Identifier	i
>4757	Condition	 
>4758	RelationalExpression	i < _nCellsPerCol
>4759	Identifier	_nCellsPerCol
>4760	Identifier	i
>4761	ForInit	 
>4762	IdentifierDeclStatement	UInt i = 0 ;
>4763	IdentifierDecl	i = 0
>4764	AssignmentExpr	i = 0
>4765	PrimaryExpression	0
>4766	Identifier	i
>4767	Identifier	i
>4768	IdentifierDeclType	UInt
>4769	IdentifierDeclStatement	 
>4770	IdentifierDecl	colPredicted = false
>4771	AssignmentExpr	colPredicted = false
>4772	Identifier	false
>4773	Identifier	false
>4774	Identifier	colPredicted
>4775	IdentifierDeclType	bool
>4776	IncDecOp	 
>4777	IncDec	++
>4778	Identifier	c
>4779	Condition	 
>4780	RelationalExpression	c < _nColumns
>4781	Identifier	_nColumns
>4782	Identifier	c
>4783	ForInit	 
>4784	IdentifierDeclStatement	UInt c = 0 ;
>4785	IdentifierDecl	c = 0
>4786	AssignmentExpr	c = 0
>4787	PrimaryExpression	0
>4788	Identifier	c
>4789	Identifier	c
>4790	IdentifierDeclType	UInt
>4791	IdentifierDeclStatement	 
>4792	IdentifierDecl	sumColConfidence = 0
>4793	AssignmentExpr	sumColConfidence = 0
>4794	PrimaryExpression	0
>4795	Identifier	sumColConfidence
>4796	Identifier	sumColConfidence
>4797	IdentifierDeclType	Real
>4798	IdentifierDeclStatement	 
>4799	IdentifierDecl	numPredictedCols = 0
>4800	AssignmentExpr	numPredictedCols = 0
>4801	PrimaryExpression	0
>4802	Identifier	numPredictedCols
>4803	Identifier	numPredictedCols
>4804	IdentifierDeclType	UInt
>4805	IdentifierDecl	cellIdx = 0
>4806	AssignmentExpr	cellIdx = 0
>4807	PrimaryExpression	0
>4808	Identifier	cellIdx
>4809	Identifier	cellIdx
>4810	IdentifierDeclType	UInt
>4811	ExpressionStatement	 
>4812	CallExpression	memset ( _colConfidenceT , 0 , _nColumns * sizeof ( _colConfidenceT [ 0 ] ) )
>4813	ArgumentList	_colConfidenceT
>4814	Argument	_nColumns * sizeof ( _colConfidenceT [ 0 ] )
>4815	MultiplicativeExpression	_nColumns * sizeof ( _colConfidenceT [ 0 ] )
>4816	SizeofExpr	sizeof ( _colConfidenceT [ 0 ] )
>4817	ArrayIndexing	_colConfidenceT [ 0 ]
>4818	PrimaryExpression	0
>4819	Identifier	_colConfidenceT
>4820	Sizeof	sizeof
>4821	Identifier	_nColumns
>4822	Argument	0
>4823	PrimaryExpression	0
>4824	Argument	_colConfidenceT
>4825	Identifier	_colConfidenceT
>4826	Callee	memset
>4827	Identifier	memset
>4828	ExpressionStatement	 
>4829	CallExpression	memset ( _cellConfidenceT , 0 , _nCells * sizeof ( _cellConfidenceT [ 0 ] ) )
>4830	ArgumentList	_cellConfidenceT
>4831	Argument	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>4832	MultiplicativeExpression	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>4833	SizeofExpr	sizeof ( _cellConfidenceT [ 0 ] )
>4834	ArrayIndexing	_cellConfidenceT [ 0 ]
>4835	PrimaryExpression	0
>4836	Identifier	_cellConfidenceT
>4837	Sizeof	sizeof
>4838	Identifier	_nCells
>4839	Argument	0
>4840	PrimaryExpression	0
>4841	Argument	_cellConfidenceT
>4842	Identifier	_cellConfidenceT
>4843	Callee	memset
>4844	Identifier	memset
>4845	ExpressionStatement	 
>4846	CallExpression	_infPredictedStateT . resetAll ( )
>4847	ArgumentList	 
>4848	Callee	_infPredictedStateT . resetAll
>4849	MemberAccess	_infPredictedStateT . resetAll
>4850	Identifier	resetAll
>4851	Identifier	_infPredictedStateT
>4852	ExpressionStatement	 
>4853	CallExpression	TIMER ( infPhase2Timer . start ( ) )
>4854	ArgumentList	infPhase2Timer . start ( )
>4855	Argument	infPhase2Timer . start ( )
>4856	CallExpression	infPhase2Timer . start ( )
>4857	ArgumentList	 
>4858	Callee	infPhase2Timer . start
>4859	MemberAccess	infPhase2Timer . start
>4860	Identifier	start
>4861	Identifier	infPhase2Timer
>4862	Callee	TIMER
>4863	Identifier	TIMER
>4864	ExpressionStatement	 
>4865	CallExpression	TIMER ( forwardInfPropTimer . stop ( ) )
>4866	ArgumentList	forwardInfPropTimer . stop ( )
>4867	Argument	forwardInfPropTimer . stop ( )
>4868	CallExpression	forwardInfPropTimer . stop ( )
>4869	ArgumentList	 
>4870	Callee	forwardInfPropTimer . stop
>4871	MemberAccess	forwardInfPropTimer . stop
>4872	Identifier	stop
>4873	Identifier	forwardInfPropTimer
>4874	Callee	TIMER
>4875	Identifier	TIMER
>4876	ExpressionStatement	 
>4877	CallExpression	computeForwardPropagation ( _infActiveStateT )
>4878	ArgumentList	_infActiveStateT
>4879	Argument	_infActiveStateT
>4880	Identifier	_infActiveStateT
>4881	Callee	computeForwardPropagation
>4882	Identifier	computeForwardPropagation
>4883	ExpressionStatement	 
>4884	CallExpression	TIMER ( forwardInfPropTimer . start ( ) )
>4885	ArgumentList	forwardInfPropTimer . start ( )
>4886	Argument	forwardInfPropTimer . start ( )
>4887	CallExpression	forwardInfPropTimer . start ( )
>4888	ArgumentList	 
>4889	Callee	forwardInfPropTimer . start
>4890	MemberAccess	forwardInfPropTimer . start
>4891	Identifier	start
>4892	Identifier	forwardInfPropTimer
>4893	Callee	TIMER
>4894	Identifier	TIMER
>4944	FunctionDef	Cells4 
>4945	ParameterList	Real * input , Real * output , bool doInference , bool doLearning
>4946	Parameter	 
>4947	Identifier	doLearning
>4948	ParameterType	bool
>4949	Parameter	 
>4950	Identifier	doInference
>4951	ParameterType	bool
>4952	Parameter	 
>4953	Identifier	output
>4954	ParameterType	Real *
>4955	Parameter	 
>4956	Identifier	input
>4957	ParameterType	Real *
>4958	ReturnType	void
>4959	CompoundStatement	 
>4960	ExpressionStatement	 
>4961	CallExpression	TIMER ( computeTimer . stop ( ) )
>4962	ArgumentList	computeTimer . stop ( )
>4963	Argument	computeTimer . stop ( )
>4964	CallExpression	computeTimer . stop ( )
>4965	ArgumentList	 
>4966	Callee	computeTimer . stop
>4967	MemberAccess	computeTimer . stop
>4968	Identifier	stop
>4969	Identifier	computeTimer
>4970	Callee	TIMER
>4971	Identifier	TIMER
>4972	IfStatement	if ( _checkSynapseConsistency )
>4973	CompoundStatement	 
>4974	ExpressionStatement	 
>4975	CallExpression	NTA_CHECK ( invariants ( true ) )
>4976	ArgumentList	invariants ( true )
>4977	Argument	invariants ( true )
>4978	CallExpression	invariants ( true )
>4979	ArgumentList	true
>4980	Argument	true
>4981	Identifier	true
>4982	Callee	invariants
>4983	Identifier	invariants
>4984	Callee	NTA_CHECK
>4985	Identifier	NTA_CHECK
>4986	Condition	 
>4987	Identifier	_checkSynapseConsistency
>4988	ForStatement	for ( i = multipleOf4 ; i < _nCells ; i ++ )
>4989	CompoundStatement	 
>4990	IfStatement	if ( _infPredictedStateT . isSet ( i ) )
>4991	ElseStatement	else
>4992	IfStatement	if ( _infActiveStateT . isSet ( i ) )
>4993	CompoundStatement	 
>4994	ExpressionStatement	 
>4995	AssignmentExpr	output [ i ] = 1.0
>4996	PrimaryExpression	1.0
>4997	ArrayIndexing	output [ i ]
>4998	Identifier	i
>4999	Identifier	output
>5000	Condition	 
>5001	CallExpression	_infActiveStateT . isSet ( i )
>5002	ArgumentList	i
>5003	Argument	i
>5004	Identifier	i
>5005	Callee	_infActiveStateT . isSet
>5006	MemberAccess	_infActiveStateT . isSet
>5007	Identifier	isSet
>5008	Identifier	_infActiveStateT
>5009	CompoundStatement	 
>5010	ExpressionStatement	 
>5011	AssignmentExpr	output [ i ] = 1.0
>5012	PrimaryExpression	1.0
>5013	ArrayIndexing	output [ i ]
>5014	Identifier	i
>5015	Identifier	output
>5016	Condition	 
>5017	CallExpression	_infPredictedStateT . isSet ( i )
>5018	ArgumentList	i
>5019	Argument	i
>5020	Identifier	i
>5021	Callee	_infPredictedStateT . isSet
>5022	MemberAccess	_infPredictedStateT . isSet
>5023	Identifier	isSet
>5024	Identifier	_infPredictedStateT
>5025	IncDecOp	 
>5026	IncDec	++
>5027	Identifier	i
>5028	Condition	 
>5029	RelationalExpression	i < _nCells
>5030	Identifier	_nCells
>5031	Identifier	i
>5032	ForInit	 
>5033	AssignmentExpr	i = multipleOf4
>5034	Identifier	multipleOf4
>5035	Identifier	i
>5036	ForStatement	for ( i = 0 ; i < multipleOf4 ; i += 4 )
>5037	CompoundStatement	 
>5038	IfStatement	if ( fourStates != 0 )
>5039	CompoundStatement	 
>5040	IfStatement	if ( ( fourStates & 0xff000000 ) != 0 )
>5041	ExpressionStatement	 
>5042	AssignmentExpr	output [ i + 3 ] = 1.0
>5043	PrimaryExpression	1.0
>5044	ArrayIndexing	output [ i + 3 ]
>5045	AdditiveExpression	i + 3
>5046	PrimaryExpression	3
>5047	Identifier	i
>5048	Identifier	output
>5049	Condition	 
>5050	EqualityExpression	( fourStates & 0xff000000 ) != 0
>5051	PrimaryExpression	0
>5052	BitAndExpression	fourStates & 0xff000000
>5053	PrimaryExpression	0xff000000
>5054	Identifier	fourStates
>5055	IfStatement	if ( ( fourStates & 0x00ff0000 ) != 0 )
>5056	ExpressionStatement	 
>5057	AssignmentExpr	output [ i + 2 ] = 1.0
>5058	PrimaryExpression	1.0
>5059	ArrayIndexing	output [ i + 2 ]
>5060	AdditiveExpression	i + 2
>5061	PrimaryExpression	2
>5062	Identifier	i
>5063	Identifier	output
>5064	Condition	 
>5065	EqualityExpression	( fourStates & 0x00ff0000 ) != 0
>5066	PrimaryExpression	0
>5067	BitAndExpression	fourStates & 0x00ff0000
>5068	PrimaryExpression	0x00ff0000
>5069	Identifier	fourStates
>5070	IfStatement	if ( ( fourStates & 0x0000ff00 ) != 0 )
>5071	ExpressionStatement	 
>5072	AssignmentExpr	output [ i + 1 ] = 1.0
>5073	PrimaryExpression	1.0
>5074	ArrayIndexing	output [ i + 1 ]
>5075	AdditiveExpression	i + 1
>5076	PrimaryExpression	1
>5077	Identifier	i
>5078	Identifier	output
>5079	Condition	 
>5080	EqualityExpression	( fourStates & 0x0000ff00 ) != 0
>5081	PrimaryExpression	0
>5082	BitAndExpression	fourStates & 0x0000ff00
>5083	PrimaryExpression	0x0000ff00
>5084	Identifier	fourStates
>5085	IfStatement	if ( ( fourStates & 0x000000ff ) != 0 )
>5086	ExpressionStatement	 
>5087	AssignmentExpr	output [ i + 0 ] = 1.0
>5088	PrimaryExpression	1.0
>5089	ArrayIndexing	output [ i + 0 ]
>5090	AdditiveExpression	i + 0
>5091	PrimaryExpression	0
>5092	Identifier	i
>5093	Identifier	output
>5094	Condition	 
>5095	EqualityExpression	( fourStates & 0x000000ff ) != 0
>5096	PrimaryExpression	0
>5097	BitAndExpression	fourStates & 0x000000ff
>5098	PrimaryExpression	0x000000ff
>5099	Identifier	fourStates
>5100	Condition	 
>5101	EqualityExpression	fourStates != 0
>5102	PrimaryExpression	0
>5103	Identifier	fourStates
>5104	ExpressionStatement	 
>5105	AssignmentExpr	fourStates = * ( UInt32 * ) ( _infActiveStateT . arrayPtr ( ) + i )
>5106	UnaryOp	* ( UInt32 * ) ( _infActiveStateT . arrayPtr ( ) + i )
>5107	CastExpression	( UInt32 * ) ( _infActiveStateT . arrayPtr ( ) + i )
>5108	AdditiveExpression	_infActiveStateT . arrayPtr ( ) + i
>5109	Identifier	i
>5110	CallExpression	_infActiveStateT . arrayPtr ( )
>5111	ArgumentList	 
>5112	Callee	_infActiveStateT . arrayPtr
>5113	MemberAccess	_infActiveStateT . arrayPtr
>5114	Identifier	arrayPtr
>5115	Identifier	_infActiveStateT
>5116	CastTarget	UInt32 *
>5117	UnaryOperator	*
>5118	Identifier	fourStates
>5119	IfStatement	if ( fourStates != 0 )
>5120	CompoundStatement	 
>5121	IfStatement	if ( ( fourStates & 0xff000000 ) != 0 )
>5122	ExpressionStatement	 
>5123	AssignmentExpr	output [ i + 3 ] = 1.0
>5124	PrimaryExpression	1.0
>5125	ArrayIndexing	output [ i + 3 ]
>5126	AdditiveExpression	i + 3
>5127	PrimaryExpression	3
>5128	Identifier	i
>5129	Identifier	output
>5130	Condition	 
>5131	EqualityExpression	( fourStates & 0xff000000 ) != 0
>5132	PrimaryExpression	0
>5133	BitAndExpression	fourStates & 0xff000000
>5134	PrimaryExpression	0xff000000
>5135	Identifier	fourStates
>5136	IfStatement	if ( ( fourStates & 0x00ff0000 ) != 0 )
>5137	ExpressionStatement	 
>5138	AssignmentExpr	output [ i + 2 ] = 1.0
>5139	PrimaryExpression	1.0
>5140	ArrayIndexing	output [ i + 2 ]
>5141	AdditiveExpression	i + 2
>5142	PrimaryExpression	2
>5143	Identifier	i
>5144	Identifier	output
>5145	Condition	 
>5146	EqualityExpression	( fourStates & 0x00ff0000 ) != 0
>5147	PrimaryExpression	0
>5148	BitAndExpression	fourStates & 0x00ff0000
>5149	PrimaryExpression	0x00ff0000
>5150	Identifier	fourStates
>5151	IfStatement	if ( ( fourStates & 0x0000ff00 ) != 0 )
>5152	ExpressionStatement	 
>5153	AssignmentExpr	output [ i + 1 ] = 1.0
>5154	PrimaryExpression	1.0
>5155	ArrayIndexing	output [ i + 1 ]
>5156	AdditiveExpression	i + 1
>5157	PrimaryExpression	1
>5158	Identifier	i
>5159	Identifier	output
>5160	Condition	 
>5161	EqualityExpression	( fourStates & 0x0000ff00 ) != 0
>5162	PrimaryExpression	0
>5163	BitAndExpression	fourStates & 0x0000ff00
>5164	PrimaryExpression	0x0000ff00
>5165	Identifier	fourStates
>5166	IfStatement	if ( ( fourStates & 0x000000ff ) != 0 )
>5167	ExpressionStatement	 
>5168	AssignmentExpr	output [ i + 0 ] = 1.0
>5169	PrimaryExpression	1.0
>5170	ArrayIndexing	output [ i + 0 ]
>5171	AdditiveExpression	i + 0
>5172	PrimaryExpression	0
>5173	Identifier	i
>5174	Identifier	output
>5175	Condition	 
>5176	EqualityExpression	( fourStates & 0x000000ff ) != 0
>5177	PrimaryExpression	0
>5178	BitAndExpression	fourStates & 0x000000ff
>5179	PrimaryExpression	0x000000ff
>5180	Identifier	fourStates
>5181	Condition	 
>5182	EqualityExpression	fourStates != 0
>5183	PrimaryExpression	0
>5184	Identifier	fourStates
>5185	IdentifierDeclStatement	 
>5186	IdentifierDecl	fourStates = * ( UInt32 * ) ( _infPredictedStateT . arrayPtr ( ) + i )
>5187	AssignmentExpr	fourStates = * ( UInt32 * ) ( _infPredictedStateT . arrayPtr ( ) + i )
>5188	UnaryOp	* ( UInt32 * ) ( _infPredictedStateT . arrayPtr ( ) + i )
>5189	CastExpression	( UInt32 * ) ( _infPredictedStateT . arrayPtr ( ) + i )
>5190	AdditiveExpression	_infPredictedStateT . arrayPtr ( ) + i
>5191	Identifier	i
>5192	CallExpression	_infPredictedStateT . arrayPtr ( )
>5193	ArgumentList	 
>5194	Callee	_infPredictedStateT . arrayPtr
>5195	MemberAccess	_infPredictedStateT . arrayPtr
>5196	Identifier	arrayPtr
>5197	Identifier	_infPredictedStateT
>5198	CastTarget	UInt32 *
>5199	UnaryOperator	*
>5200	Identifier	fourStates
>5201	Identifier	fourStates
>5202	IdentifierDeclType	UInt32
>5203	AssignmentExpr	 
>5204	PrimaryExpression	4
>5205	Identifier	i
>5206	Condition	 
>5207	RelationalExpression	i < multipleOf4
>5208	Identifier	multipleOf4
>5209	Identifier	i
>5210	ForInit	 
>5211	AssignmentExpr	i = 0
>5212	PrimaryExpression	0
>5213	Identifier	i
>5214	IdentifierDeclStatement	 
>5215	IdentifierDecl	i
>5216	Identifier	i
>5217	IdentifierDeclType	UInt
>5218	IdentifierDeclStatement	 
>5219	IdentifierDecl	multipleOf4 = 4 * ( _nCells / 4 )
>5220	AssignmentExpr	multipleOf4 = 4 * ( _nCells / 4 )
>5221	MultiplicativeExpression	4 * ( _nCells / 4 )
>5222	MultiplicativeExpression	_nCells / 4
>5223	PrimaryExpression	4
>5224	Identifier	_nCells
>5225	PrimaryExpression	4
>5226	Identifier	multipleOf4
>5227	Identifier	multipleOf4
>5228	IdentifierDeclType	const UInt
>5229	ExpressionStatement	 
>5230	CallExpression	memset ( output , 0 , _nCells * sizeof ( output [ 0 ] ) )
>5231	ArgumentList	output
>5232	Argument	_nCells * sizeof ( output [ 0 ] )
>5233	MultiplicativeExpression	_nCells * sizeof ( output [ 0 ] )
>5234	SizeofExpr	sizeof ( output [ 0 ] )
>5235	ArrayIndexing	output [ 0 ]
>5236	PrimaryExpression	0
>5237	Identifier	output
>5238	Sizeof	sizeof
>5239	Identifier	_nCells
>5240	Argument	0
>5241	PrimaryExpression	0
>5242	Argument	output
>5243	Identifier	output
>5244	Callee	memset
>5245	Identifier	memset
>5246	ExpressionStatement	 
>5247	AssignmentExpr	_resetCalled = false
>5248	Identifier	false
>5249	Identifier	_resetCalled
>5250	IfStatement	if ( doLearning )
>5251	CompoundStatement	 
>5252	ExpressionStatement	 
>5253	CallExpression	applyGlobalDecay ( )
>5254	ArgumentList	 
>5255	Callee	applyGlobalDecay
>5256	Identifier	applyGlobalDecay
>5257	ExpressionStatement	 
>5258	CallExpression	TIMER ( learningTimer . stop ( ) )
>5259	ArgumentList	learningTimer . stop ( )
>5260	Argument	learningTimer . stop ( )
>5261	CallExpression	learningTimer . stop ( )
>5262	ArgumentList	 
>5263	Callee	learningTimer . stop
>5264	MemberAccess	learningTimer . stop
>5265	Identifier	stop
>5266	Identifier	learningTimer
>5267	Callee	TIMER
>5268	Identifier	TIMER
>5269	ExpressionStatement	 
>5270	CallExpression	updateLearningState ( activeColumns , input )
>5271	ArgumentList	activeColumns
>5272	Argument	input
>5273	Identifier	input
>5274	Argument	activeColumns
>5275	Identifier	activeColumns
>5276	Callee	updateLearningState
>5277	Identifier	updateLearningState
>5278	ExpressionStatement	 
>5279	CallExpression	TIMER ( learningTimer . start ( ) )
>5280	ArgumentList	learningTimer . start ( )
>5281	Argument	learningTimer . start ( )
>5282	CallExpression	learningTimer . start ( )
>5283	ArgumentList	 
>5284	Callee	learningTimer . start
>5285	MemberAccess	learningTimer . start
>5286	Identifier	start
>5287	Identifier	learningTimer
>5288	Callee	TIMER
>5289	Identifier	TIMER
>5290	Condition	 
>5291	Identifier	doLearning
>5292	IfStatement	if ( doInference )
>5293	CompoundStatement	 
>5294	ExpressionStatement	 
>5295	CallExpression	TIMER ( inferenceTimer . stop ( ) )
>5296	ArgumentList	inferenceTimer . stop ( )
>5297	Argument	inferenceTimer . stop ( )
>5298	CallExpression	inferenceTimer . stop ( )
>5299	ArgumentList	 
>5300	Callee	inferenceTimer . stop
>5301	MemberAccess	inferenceTimer . stop
>5302	Identifier	stop
>5303	Identifier	inferenceTimer
>5304	Callee	TIMER
>5305	Identifier	TIMER
>5306	ExpressionStatement	 
>5307	CallExpression	updateInferenceState ( activeColumns )
>5308	ArgumentList	activeColumns
>5309	Argument	activeColumns
>5310	Identifier	activeColumns
>5311	Callee	updateInferenceState
>5312	Identifier	updateInferenceState
>5313	ExpressionStatement	 
>5314	CallExpression	TIMER ( inferenceTimer . start ( ) )
>5315	ArgumentList	inferenceTimer . start ( )
>5316	Argument	inferenceTimer . start ( )
>5317	CallExpression	inferenceTimer . start ( )
>5318	ArgumentList	 
>5319	Callee	inferenceTimer . start
>5320	MemberAccess	inferenceTimer . start
>5321	Identifier	start
>5322	Identifier	inferenceTimer
>5323	Callee	TIMER
>5324	Identifier	TIMER
>5325	Condition	 
>5326	Identifier	doInference
>5327	IfStatement	if ( _avgInputDensity == 0.0 )
>5328	ElseStatement	else
>5329	CompoundStatement	 
>5330	ExpressionStatement	 
>5331	AssignmentExpr	_avgInputDensity = 0.99 * _avgInputDensity + 0.01 * ( Real ) activeColumns . size ( )
>5332	AdditiveExpression	0.99 * _avgInputDensity + 0.01 * ( Real ) activeColumns . size ( )
>5333	MultiplicativeExpression	0.01 * ( Real ) activeColumns . size ( )
>5334	CastExpression	( Real ) activeColumns . size ( )
>5335	CallExpression	activeColumns . size ( )
>5336	ArgumentList	 
>5337	Callee	activeColumns . size
>5338	MemberAccess	activeColumns . size
>5339	Identifier	size
>5340	Identifier	activeColumns
>5341	CastTarget	Real
>5342	PrimaryExpression	0.01
>5343	MultiplicativeExpression	0.99 * _avgInputDensity
>5344	Identifier	_avgInputDensity
>5345	PrimaryExpression	0.99
>5346	Identifier	_avgInputDensity
>5347	CompoundStatement	 
>5348	ExpressionStatement	 
>5349	AssignmentExpr	_avgInputDensity = ( Real ) activeColumns . size ( )
>5350	CastExpression	( Real ) activeColumns . size ( )
>5351	CallExpression	activeColumns . size ( )
>5352	ArgumentList	 
>5353	Callee	activeColumns . size
>5354	MemberAccess	activeColumns . size
>5355	Identifier	size
>5356	Identifier	activeColumns
>5357	CastTarget	Real
>5358	Identifier	_avgInputDensity
>5359	Condition	 
>5360	EqualityExpression	_avgInputDensity == 0.0
>5361	PrimaryExpression	0.0
>5362	Identifier	_avgInputDensity
>5363	IfStatement	if ( doLearning && Segment 
>5364	CompoundStatement	 
>5365	ForStatement	for ( UInt i = 0 ; i < _nCells ; i ++ )
>5366	CompoundStatement	 
>5367	ExpressionStatement	 
>5368	CallExpression	_cells [ i ] . updateDutyCycle ( _nLrnIterations )
>5369	ArgumentList	_nLrnIterations
>5370	Argument	_nLrnIterations
>5371	Identifier	_nLrnIterations
>5372	Callee	_cells [ i ] . updateDutyCycle
>5373	MemberAccess	_cells [ i ] . updateDutyCycle
>5374	Identifier	updateDutyCycle
>5375	ArrayIndexing	_cells [ i ]
>5376	Identifier	i
>5377	Identifier	_cells
>5378	IncDecOp	 
>5379	IncDec	++
>5380	Identifier	i
>5381	Condition	 
>5382	RelationalExpression	i < _nCells
>5383	Identifier	_nCells
>5384	Identifier	i
>5385	ForInit	 
>5386	IdentifierDeclStatement	UInt i = 0 ;
>5387	IdentifierDecl	i = 0
>5388	AssignmentExpr	i = 0
>5389	PrimaryExpression	0
>5390	Identifier	i
>5391	Identifier	i
>5392	IdentifierDeclType	UInt
>5393	Condition	 
>5394	AndExpression	doLearning && Segment 
>5395	CallExpression	Segment 
>5396	ArgumentList	_nLrnIterations
>5397	Argument	_nLrnIterations
>5398	Identifier	_nLrnIterations
>5399	Callee	Segment 
>5400	Identifier	Segment 
>5401	Identifier	doLearning
>5402	IfStatement	if ( _verbosity >= 3 )
>5403	CompoundStatement	 
>5404	ExpressionStatement	 
>5405	ShiftExpression	std 
>5406	PrimaryExpression	\"\n\"
>5407	Identifier	std 
>5408	ExpressionStatement	 
>5409	CallExpression	printActiveColumns ( std 
>5410	ArgumentList	std 
>5411	Argument	activeColumns
>5412	Identifier	activeColumns
>5413	Argument	std 
>5414	Identifier	std 
>5415	Callee	printActiveColumns
>5416	Identifier	printActiveColumns
>5417	ExpressionStatement	 
>5418	ShiftExpression	std 
>5419	PrimaryExpression	\"Active cols
>5420	Identifier	std 
>5421	Condition	 
>5422	RelationalExpression	_verbosity >= 3
>5423	PrimaryExpression	3
>5424	Identifier	_verbosity
>5425	ForStatement	for ( UInt i = 0 ; i != _nColumns ; ++ i )
>5426	CompoundStatement	 
>5427	IfStatement	if ( input [ i ] )
>5428	ExpressionStatement	 
>5429	CallExpression	activeColumns . push_back ( i )
>5430	ArgumentList	i
>5431	Argument	i
>5432	Identifier	i
>5433	Callee	activeColumns . push_back
>5434	MemberAccess	activeColumns . push_back
>5435	Identifier	push_back
>5436	Identifier	activeColumns
>5437	Condition	 
>5438	ArrayIndexing	input [ i ]
>5439	Identifier	i
>5440	Identifier	input
>5441	UnaryExpression	 
>5442	Identifier	i
>5443	IncDec	++
>5444	Condition	 
>5445	EqualityExpression	i != _nColumns
>5446	Identifier	_nColumns
>5447	Identifier	i
>5448	ForInit	 
>5449	IdentifierDeclStatement	UInt i = 0 ;
>5450	IdentifierDecl	i = 0
>5451	AssignmentExpr	i = 0
>5452	PrimaryExpression	0
>5453	Identifier	i
>5454	Identifier	i
>5455	IdentifierDeclType	UInt
>5456	ExpressionStatement	 
>5457	CallExpression	activeColumns . clear ( )
>5458	ArgumentList	 
>5459	Callee	activeColumns . clear
>5460	MemberAccess	activeColumns . clear
>5461	Identifier	clear
>5462	Identifier	activeColumns
>5463	IdentifierDeclStatement	 
>5464	IdentifierDecl	activeColumns
>5465	Identifier	activeColumns
>5466	IdentifierDeclType	std 
>5467	Statement	 
>5468	IfStatement	if ( _verbosity >= 3 )
>5469	CompoundStatement	 
>5470	ExpressionStatement	 
>5471	ShiftExpression	std 
>5472	ShiftExpression	\"\n==== CPP Iteration
>5473	ShiftExpression	_nIterations << \" =====\" << std 
>5474	ShiftExpression	\" =====\" << std 
>5475	Identifier	std 
>5476	PrimaryExpression	\" =====\"
>5477	Identifier	_nIterations
>5478	PrimaryExpression	\"\n==== CPP Iteration
>5479	Identifier	std 
>5480	Condition	 
>5481	RelationalExpression	_verbosity >= 3
>5482	PrimaryExpression	3
>5483	Identifier	_verbosity
>5484	IfStatement	if ( _nIterations % 1000 == 0 )
>5485	CompoundStatement	 
>5486	ExpressionStatement	 
>5487	CallExpression	resetTimers ( )
>5488	ArgumentList	 
>5489	Callee	resetTimers
>5490	Identifier	resetTimers
>5491	ExpressionStatement	 
>5492	CallExpression	dumpTiming ( )
>5493	ArgumentList	 
>5494	Callee	dumpTiming
>5495	Identifier	dumpTiming
>5496	ExpressionStatement	 
>5497	ShiftExpression	std 
>5498	ShiftExpression	\"\n=================\n_nIterations = \" << _nIterations << \"\n\"
>5499	ShiftExpression	_nIterations << \"\n\"
>5500	PrimaryExpression	\"\n\"
>5501	Identifier	_nIterations
>5502	PrimaryExpression	\"\n=================\n_nIterations = \"
>5503	Identifier	std 
>5504	Condition	 
>5505	EqualityExpression	_nIterations % 1000 == 0
>5506	PrimaryExpression	0
>5507	MultiplicativeExpression	_nIterations % 1000
>5508	PrimaryExpression	1000
>5509	Identifier	_nIterations
>5510	ExpressionStatement	 
>5511	UnaryExpression	++ _nIterations
>5512	Identifier	_nIterations
>5513	IncDec	++
>5514	IfStatement	if ( doLearning )
>5515	ExpressionStatement	 
>5516	IncDecOp	_nLrnIterations ++
>5517	IncDec	++
>5518	Identifier	_nLrnIterations
>5519	Condition	 
>5520	Identifier	doLearning
>5521	ExpressionStatement	 
>5522	CallExpression	NTA_CHECK ( doInference || doLearning )
>5523	ArgumentList	doInference || doLearning
>5524	Argument	doInference || doLearning
>5525	OrExpression	doInference || doLearning
>5526	Identifier	doLearning
>5527	Identifier	doInference
>5528	Callee	NTA_CHECK
>5529	Identifier	NTA_CHECK
>5530	ExpressionStatement	 
>5531	CallExpression	TIMER ( computeTimer . start ( ) )
>5532	ArgumentList	computeTimer . start ( )
>5533	Argument	computeTimer . start ( )
>5534	CallExpression	computeTimer . start ( )
>5535	ArgumentList	 
>5536	Callee	computeTimer . start
>5537	MemberAccess	computeTimer . start
>5538	Identifier	start
>5539	Identifier	computeTimer
>5540	Callee	TIMER
>5541	Identifier	TIMER
>5593	FunctionDef	Cells4 
>5594	ParameterList	UInt prevSeqLength
>5595	Parameter	 
>5596	Identifier	prevSeqLength
>5597	ParameterType	UInt
>5598	ReturnType	void
>5599	CompoundStatement	 
>5600	IfStatement	if ( _verbosity >= 5 )
>5601	CompoundStatement	 
>5602	ExpressionStatement	 
>5603	ShiftExpression	std 
>5604	ShiftExpression	\"   after = \" << _avgLearnedSeqLength << \"\n\"
>5605	ShiftExpression	_avgLearnedSeqLength << \"\n\"
>5606	PrimaryExpression	\"\n\"
>5607	Identifier	_avgLearnedSeqLength
>5608	PrimaryExpression	\"   after = \"
>5609	Identifier	std 
>5610	Condition	 
>5611	RelationalExpression	_verbosity >= 5
>5612	PrimaryExpression	5
>5613	Identifier	_verbosity
>5614	ExpressionStatement	 
>5615	AssignmentExpr	_avgLearnedSeqLength = ( 1.0 - alpha ) * _avgLearnedSeqLength + alpha * ( Real ) prevSeqLength
>5616	AdditiveExpression	( 1.0 - alpha ) * _avgLearnedSeqLength + alpha * ( Real ) prevSeqLength
>5617	MultiplicativeExpression	alpha * ( Real ) prevSeqLength
>5618	CastExpression	( Real ) prevSeqLength
>5619	Identifier	prevSeqLength
>5620	CastTarget	Real
>5621	Identifier	alpha
>5622	MultiplicativeExpression	( 1.0 - alpha ) * _avgLearnedSeqLength
>5623	Identifier	_avgLearnedSeqLength
>5624	AdditiveExpression	1.0 - alpha
>5625	Identifier	alpha
>5626	PrimaryExpression	1.0
>5627	Identifier	_avgLearnedSeqLength
>5628	IfStatement	if ( _verbosity >= 5 )
>5629	CompoundStatement	 
>5630	ExpressionStatement	 
>5631	ShiftExpression	std 
>5632	ShiftExpression	\"_updateAvgLearnedSeqLength before = \" << _avgLearnedSeqLength << \" prevSeqLength = \" << prevSeqLength << \"\n\"\
>5633	ShiftExpression	_avgLearnedSeqLength << \" prevSeqLength = \" << prevSeqLength << \"\n\"
>5634	ShiftExpression	\" prevSeqLength = \" << prevSeqLength << \"\n\"
>5635	ShiftExpression	prevSeqLength << \"\n\"
>5636	PrimaryExpression	\"\n\"
>5637	Identifier	prevSeqLength
>5638	PrimaryExpression	\" prevSeqLength = \"
>5639	Identifier	_avgLearnedSeqLength
>5640	PrimaryExpression	\"_updateAvgLearnedSeqLength before = \"
>5641	Identifier	std 
>5642	Condition	 
>5643	RelationalExpression	_verbosity >= 5
>5644	PrimaryExpression	5
>5645	Identifier	_verbosity
>5646	IfStatement	if ( _nLrnIterations < 100 )
>5647	ExpressionStatement	 
>5648	AssignmentExpr	alpha = 0.5
>5649	PrimaryExpression	0.5
>5650	Identifier	alpha
>5651	Condition	 
>5652	RelationalExpression	_nLrnIterations < 100
>5653	PrimaryExpression	100
>5654	Identifier	_nLrnIterations
>5655	IdentifierDeclStatement	 
>5656	IdentifierDecl	alpha = 0.1
>5657	AssignmentExpr	alpha = 0.1
>5658	PrimaryExpression	0.1
>5659	Identifier	alpha
>5660	Identifier	alpha
>5661	IdentifierDeclType	Real
>5670	FunctionDef	Cells4 
>5671	ParameterList	Real * input , const CState & predictedState
>5672	Parameter	 
>5673	Identifier	predictedState
>5674	ParameterType	const CState &
>5675	Parameter	 
>5676	Identifier	input
>5677	ParameterType	Real *
>5678	ReturnType	void
>5679	CompoundStatement	 
>5680	ExpressionStatement	 
>5681	CallExpression	remove_at ( delUpdates , _segmentUpdates )
>5682	ArgumentList	delUpdates
>5683	Argument	_segmentUpdates
>5684	Identifier	_segmentUpdates
>5685	Argument	delUpdates
>5686	Identifier	delUpdates
>5687	Callee	remove_at
>5688	Identifier	remove_at
>5689	ForStatement	for ( UInt i = 0 ; i != _segmentUpdates . size ( ) ; ++ i )
>5690	CompoundStatement	 
>5691	IfStatement	if ( _nLrnIterations - update . timeStamp ( ) > _segUpdateValidDuration )
>5692	ElseStatement	else
>5693	CompoundStatement	 
>5694	IfStatement	if ( input [ colIdx ] == 1 )
>5695	ElseStatement	else
>5696	CompoundStatement	 
>5697	IfStatement	if ( ! ( _doPooling && predictedState . isSet ( cellIdx ) ) )
>5698	CompoundStatement	 
>5699	ExpressionStatement	 
>5700	CallExpression	delUpdates . push_back ( i )
>5701	ArgumentList	i
>5702	Argument	i
>5703	Identifier	i
>5704	Callee	delUpdates . push_back
>5705	MemberAccess	delUpdates . push_back
>5706	Identifier	push_back
>5707	Identifier	delUpdates
>5708	IfStatement	if ( _verbosity >= 4 )
>5709	ExpressionStatement	 
>5710	ShiftExpression	std 
>5711	PrimaryExpression	\"     Deleting update now.\n\"
>5712	Identifier	std 
>5713	Condition	 
>5714	RelationalExpression	_verbosity >= 4
>5715	PrimaryExpression	4
>5716	Identifier	_verbosity
>5717	Condition	 
>5718	UnaryOp	! ( _doPooling && predictedState . isSet ( cellIdx ) )
>5719	AndExpression	_doPooling && predictedState . isSet ( cellIdx )
>5720	CallExpression	predictedState . isSet ( cellIdx )
>5721	ArgumentList	cellIdx
>5722	Argument	cellIdx
>5723	Identifier	cellIdx
>5724	Callee	predictedState . isSet
>5725	MemberAccess	predictedState . isSet
>5726	Identifier	isSet
>5727	Identifier	predictedState
>5728	Identifier	_doPooling
>5729	UnaryOperator	!
>5730	CompoundStatement	 
>5731	ExpressionStatement	 
>5732	CallExpression	delUpdates . push_back ( i )
>5733	ArgumentList	i
>5734	Argument	i
>5735	Identifier	i
>5736	Callee	delUpdates . push_back
>5737	MemberAccess	delUpdates . push_back
>5738	Identifier	push_back
>5739	Identifier	delUpdates
>5740	ExpressionStatement	 
>5741	CallExpression	adaptSegment ( update )
>5742	ArgumentList	update
>5743	Argument	update
>5744	Identifier	update
>5745	Callee	adaptSegment
>5746	Identifier	adaptSegment
>5747	IfStatement	if ( _verbosity >= 4 )
>5748	ExpressionStatement	 
>5749	ShiftExpression	std 
>5750	PrimaryExpression	\"     Applying update now.\n\"
>5751	Identifier	std 
>5752	Condition	 
>5753	RelationalExpression	_verbosity >= 4
>5754	PrimaryExpression	4
>5755	Identifier	_verbosity
>5756	Condition	 
>5757	EqualityExpression	input [ colIdx ] == 1
>5758	PrimaryExpression	1
>5759	ArrayIndexing	input [ colIdx ]
>5760	Identifier	colIdx
>5761	Identifier	input
>5762	IdentifierDeclStatement	 
>5763	IdentifierDecl	colIdx = ( UInt ) ( cellIdx / _nCellsPerCol )
>5764	AssignmentExpr	colIdx = ( UInt ) ( cellIdx / _nCellsPerCol )
>5765	CastExpression	( UInt ) ( cellIdx / _nCellsPerCol )
>5766	MultiplicativeExpression	cellIdx / _nCellsPerCol
>5767	Identifier	_nCellsPerCol
>5768	Identifier	cellIdx
>5769	CastTarget	UInt
>5770	Identifier	colIdx
>5771	Identifier	colIdx
>5772	IdentifierDeclType	UInt
>5773	IdentifierDeclStatement	 
>5774	IdentifierDecl	cellIdx = update . cellIdx ( )
>5775	AssignmentExpr	cellIdx = update . cellIdx ( )
>5776	CallExpression	update . cellIdx ( )
>5777	ArgumentList	 
>5778	Callee	update . cellIdx
>5779	MemberAccess	update . cellIdx
>5780	Identifier	cellIdx
>5781	Identifier	update
>5782	Identifier	cellIdx
>5783	Identifier	cellIdx
>5784	IdentifierDeclType	UInt
>5785	CompoundStatement	 
>5786	ExpressionStatement	 
>5787	CallExpression	delUpdates . push_back ( i )
>5788	ArgumentList	i
>5789	Argument	i
>5790	Identifier	i
>5791	Callee	delUpdates . push_back
>5792	MemberAccess	delUpdates . push_back
>5793	Identifier	push_back
>5794	Identifier	delUpdates
>5795	IfStatement	if ( _verbosity >= 4 )
>5796	ExpressionStatement	 
>5797	ShiftExpression	std 
>5798	PrimaryExpression	\"     Expired, deleting now.\n\"
>5799	Identifier	std 
>5800	Condition	 
>5801	RelationalExpression	_verbosity >= 4
>5802	PrimaryExpression	4
>5803	Identifier	_verbosity
>5804	Condition	 
>5805	RelationalExpression	_nLrnIterations - update . timeStamp ( ) > _segUpdateValidDuration
>5806	Identifier	_segUpdateValidDuration
>5807	AdditiveExpression	_nLrnIterations - update . timeStamp ( )
>5808	CallExpression	update . timeStamp ( )
>5809	ArgumentList	 
>5810	Callee	update . timeStamp
>5811	MemberAccess	update . timeStamp
>5812	Identifier	timeStamp
>5813	Identifier	update
>5814	Identifier	_nLrnIterations
>5815	IfStatement	if ( _verbosity >= 4 )
>5816	CompoundStatement	 
>5817	ExpressionStatement	 
>5818	ShiftExpression	std 
>5819	Identifier	std 
>5820	Identifier	std 
>5821	ExpressionStatement	 
>5822	CallExpression	update . print ( std 
>5823	ArgumentList	std 
>5824	Argument	_nCellsPerCol
>5825	Identifier	_nCellsPerCol
>5826	Argument	true
>5827	Identifier	true
>5828	Argument	std 
>5829	Identifier	std 
>5830	Callee	update . print
>5831	MemberAccess	update . print
>5832	Identifier	print
>5833	Identifier	update
>5834	ExpressionStatement	 
>5835	ShiftExpression	std 
>5836	ShiftExpression	\"\n_nLrnIterations
>5837	ShiftExpression	_nLrnIterations << \" segment update
>5838	PrimaryExpression	\" segment update
>5839	Identifier	_nLrnIterations
>5840	PrimaryExpression	\"\n_nLrnIterations
>5841	Identifier	std 
>5842	Condition	 
>5843	RelationalExpression	_verbosity >= 4
>5844	PrimaryExpression	4
>5845	Identifier	_verbosity
>5846	IdentifierDeclStatement	 
>5847	IdentifierDecl	& update = _segmentUpdates [ i ]
>5848	AssignmentExpr	& update = _segmentUpdates [ i ]
>5849	ArrayIndexing	_segmentUpdates [ i ]
>5850	Identifier	i
>5851	Identifier	_segmentUpdates
>5852	Identifier	update
>5853	Identifier	update
>5854	IdentifierDeclType	const SegmentUpdate &
>5855	UnaryExpression	 
>5856	Identifier	i
>5857	IncDec	++
>5858	Condition	 
>5859	EqualityExpression	i != _segmentUpdates . size ( )
>5860	CallExpression	_segmentUpdates . size ( )
>5861	ArgumentList	 
>5862	Callee	_segmentUpdates . size
>5863	MemberAccess	_segmentUpdates . size
>5864	Identifier	size
>5865	Identifier	_segmentUpdates
>5866	Identifier	i
>5867	ForInit	 
>5868	IdentifierDeclStatement	UInt i = 0 ;
>5869	IdentifierDecl	i = 0
>5870	AssignmentExpr	i = 0
>5871	PrimaryExpression	0
>5872	Identifier	i
>5873	Identifier	i
>5874	IdentifierDeclType	UInt
>5875	ExpressionStatement	 
>5876	CallExpression	delUpdates . clear ( )
>5877	ArgumentList	 
>5878	Callee	delUpdates . clear
>5879	MemberAccess	delUpdates . clear
>5880	Identifier	clear
>5881	Identifier	delUpdates
>5882	IdentifierDeclStatement	 
>5883	IdentifierDecl	delUpdates
>5884	Identifier	delUpdates
>5885	IdentifierDeclType	std 
>5886	Statement	 
>5913	FunctionDef	Cells4 
>5914	ParameterList	UInt cellIdx , UInt segIdx
>5915	Parameter	 
>5916	Identifier	segIdx
>5917	ParameterType	UInt
>5918	Parameter	 
>5919	Identifier	cellIdx
>5920	ParameterType	UInt
>5921	ReturnType	void
>5922	CompoundStatement	 
>5923	ExpressionStatement	 
>5924	CallExpression	remove_at ( delUpdates , _segmentUpdates )
>5925	ArgumentList	delUpdates
>5926	Argument	_segmentUpdates
>5927	Identifier	_segmentUpdates
>5928	Argument	delUpdates
>5929	Identifier	delUpdates
>5930	Callee	remove_at
>5931	Identifier	remove_at
>5932	ForStatement	for ( UInt i = 0 ; i != _segmentUpdates . size ( ) ; ++ i )
>5933	CompoundStatement	 
>5934	IfStatement	if ( ( update . cellIdx ( ) == cellIdx ) && ( segIdx == update . segIdx ( ) ) )
>5935	CompoundStatement	 
>5936	ExpressionStatement	 
>5937	CallExpression	delUpdates . push_back ( i )
>5938	ArgumentList	i
>5939	Argument	i
>5940	Identifier	i
>5941	Callee	delUpdates . push_back
>5942	MemberAccess	delUpdates . push_back
>5943	Identifier	push_back
>5944	Identifier	delUpdates
>5945	IfStatement	if ( _verbosity >= 4 )
>5946	CompoundStatement	 
>5947	ExpressionStatement	 
>5948	ShiftExpression	std 
>5949	PrimaryExpression	\"    Removing it\n\"
>5950	Identifier	std 
>5951	Condition	 
>5952	RelationalExpression	_verbosity >= 4
>5953	PrimaryExpression	4
>5954	Identifier	_verbosity
>5955	Condition	 
>5956	AndExpression	( update . cellIdx ( ) == cellIdx ) && ( segIdx == update . segIdx ( ) )
>5957	EqualityExpression	segIdx == update . segIdx ( )
>5958	CallExpression	update . segIdx ( )
>5959	ArgumentList	 
>5960	Callee	update . segIdx
>5961	MemberAccess	update . segIdx
>5962	Identifier	segIdx
>5963	Identifier	update
>5964	Identifier	segIdx
>5965	EqualityExpression	update . cellIdx ( ) == cellIdx
>5966	Identifier	cellIdx
>5967	CallExpression	update . cellIdx ( )
>5968	ArgumentList	 
>5969	Callee	update . cellIdx
>5970	MemberAccess	update . cellIdx
>5971	Identifier	cellIdx
>5972	Identifier	update
>5973	IfStatement	if ( _verbosity >= 4 )
>5974	CompoundStatement	 
>5975	ExpressionStatement	 
>5976	ShiftExpression	std 
>5977	Identifier	std 
>5978	Identifier	std 
>5979	ExpressionStatement	 
>5980	CallExpression	update . print ( std 
>5981	ArgumentList	std 
>5982	Argument	_nCellsPerCol
>5983	Identifier	_nCellsPerCol
>5984	Argument	true
>5985	Identifier	true
>5986	Argument	std 
>5987	Identifier	std 
>5988	Callee	update . print
>5989	MemberAccess	update . print
>5990	Identifier	print
>5991	Identifier	update
>5992	ExpressionStatement	 
>5993	ShiftExpression	std 
>5994	ShiftExpression	\"\nIn cleanUpdatesList. _nLrnIterations
>5995	ShiftExpression	_nLrnIterations << \" checking segment
>5996	PrimaryExpression	\" checking segment
>5997	Identifier	_nLrnIterations
>5998	PrimaryExpression	\"\nIn cleanUpdatesList. _nLrnIterations
>5999	Identifier	std 
>6000	Condition	 
>6001	RelationalExpression	_verbosity >= 4
>6002	PrimaryExpression	4
>6003	Identifier	_verbosity
>6004	IdentifierDeclStatement	 
>6005	IdentifierDecl	& update = _segmentUpdates [ i ]
>6006	AssignmentExpr	& update = _segmentUpdates [ i ]
>6007	ArrayIndexing	_segmentUpdates [ i ]
>6008	Identifier	i
>6009	Identifier	_segmentUpdates
>6010	Identifier	update
>6011	Identifier	update
>6012	IdentifierDeclType	const SegmentUpdate &
>6013	UnaryExpression	 
>6014	Identifier	i
>6015	IncDec	++
>6016	Condition	 
>6017	EqualityExpression	i != _segmentUpdates . size ( )
>6018	CallExpression	_segmentUpdates . size ( )
>6019	ArgumentList	 
>6020	Callee	_segmentUpdates . size
>6021	MemberAccess	_segmentUpdates . size
>6022	Identifier	size
>6023	Identifier	_segmentUpdates
>6024	Identifier	i
>6025	ForInit	 
>6026	IdentifierDeclStatement	UInt i = 0 ;
>6027	IdentifierDecl	i = 0
>6028	AssignmentExpr	i = 0
>6029	PrimaryExpression	0
>6030	Identifier	i
>6031	Identifier	i
>6032	IdentifierDeclType	UInt
>6033	ExpressionStatement	 
>6034	CallExpression	delUpdates . clear ( )
>6035	ArgumentList	 
>6036	Callee	delUpdates . clear
>6037	MemberAccess	delUpdates . clear
>6038	Identifier	clear
>6039	Identifier	delUpdates
>6040	IdentifierDeclStatement	 
>6041	IdentifierDecl	delUpdates
>6042	Identifier	delUpdates
>6043	IdentifierDeclType	std 
>6044	Statement	 
>6063	FunctionDef	Cells4 
>6064	ParameterList	 
>6065	ReturnType	void
>6066	CompoundStatement	 
>6067	IfStatement	if ( _globalDecay != 0 && ( _maxAge > 0 ) && ( _nLrnIterations % _maxAge == 0 ) )
>6068	CompoundStatement	 
>6069	IfStatement	if ( _verbosity >= 3 )
>6070	CompoundStatement	 
>6071	ExpressionStatement	 
>6072	ShiftExpression	std 
>6073	ShiftExpression	\"_nLrnIterations = \" << _nLrnIterations << \", _maxAge = \" << _maxAge << \", globalDecay = \" << _globalDecay << \"\n\"\
>6074	ShiftExpression	_nLrnIterations << \", _maxAge = \" << _maxAge << \", globalDecay = \" << _globalDecay << \"\n\"
>6075	ShiftExpression	\", _maxAge = \" << _maxAge << \", globalDecay = \" << _globalDecay << \"\n\"
>6076	ShiftExpression	_maxAge << \", globalDecay = \" << _globalDecay << \"\n\"
>6077	ShiftExpression	\", globalDecay = \" << _globalDecay << \"\n\"
>6078	ShiftExpression	_globalDecay << \"\n\"
>6079	PrimaryExpression	\"\n\"
>6080	Identifier	_globalDecay
>6081	PrimaryExpression	\", globalDecay = \"
>6082	Identifier	_maxAge
>6083	PrimaryExpression	\", _maxAge = \"
>6084	Identifier	_nLrnIterations
>6085	PrimaryExpression	\"_nLrnIterations = \"
>6086	Identifier	std 
>6087	ExpressionStatement	 
>6088	ShiftExpression	std 
>6089	ShiftExpression	\"CPP Global decay decremented \" << nSegmentsDecayed << \" segments and removed \" << nSynapsesRemoved << \" \
>6090	ShiftExpression	nSegmentsDecayed << \" segments and removed \" << nSynapsesRemoved << \" synapses\n\"
>6091	ShiftExpression	\" segments and removed \" << nSynapsesRemoved << \" synapses\n\"
>6092	ShiftExpression	nSynapsesRemoved << \" synapses\n\"
>6093	PrimaryExpression	\" synapses\n\"
>6094	Identifier	nSynapsesRemoved
>6095	PrimaryExpression	\" segments and removed \"
>6096	Identifier	nSegmentsDecayed
>6097	PrimaryExpression	\"CPP Global decay decremented \"
>6098	Identifier	std 
>6099	Condition	 
>6100	RelationalExpression	_verbosity >= 3
>6101	PrimaryExpression	3
>6102	Identifier	_verbosity
>6103	ForStatement	for ( UInt cellIdx = 0 ; cellIdx != _nCells ; ++ cellIdx )
>6104	CompoundStatement	 
>6105	ForStatement	for ( UInt segIdx = 0 ; segIdx != _cells [ cellIdx ] . size ( ) ; ++ segIdx )
>6106	CompoundStatement	 
>6107	IfStatement	if ( age > _maxAge )
>6108	CompoundStatement	 
>6109	IfStatement	if ( seg . empty ( ) )
>6110	CompoundStatement	 
>6111	ExpressionStatement	 
>6112	CallExpression	_cells [ cellIdx ] . releaseSegment ( segIdx )
>6113	ArgumentList	segIdx
>6114	Argument	segIdx
>6115	Identifier	segIdx
>6116	Callee	_cells [ cellIdx ] . releaseSegment
>6117	MemberAccess	_cells [ cellIdx ] . releaseSegment
>6118	Identifier	releaseSegment
>6119	ArrayIndexing	_cells [ cellIdx ]
>6120	Identifier	cellIdx
>6121	Identifier	_cells
>6122	Condition	 
>6123	CallExpression	seg . empty ( )
>6124	ArgumentList	 
>6125	Callee	seg . empty
>6126	MemberAccess	seg . empty
>6127	Identifier	empty
>6128	Identifier	seg
>6129	IfStatement	if ( ! removedSynapses . empty ( ) )
>6130	CompoundStatement	 
>6131	ExpressionStatement	 
>6132	CallExpression	eraseOutSynapses ( cellIdx , segIdx , removedSynapses )
>6133	ArgumentList	cellIdx
>6134	Argument	removedSynapses
>6135	Identifier	removedSynapses
>6136	Argument	segIdx
>6137	Identifier	segIdx
>6138	Argument	cellIdx
>6139	Identifier	cellIdx
>6140	Callee	eraseOutSynapses
>6141	Identifier	eraseOutSynapses
>6142	Condition	 
>6143	UnaryOp	! removedSynapses . empty ( )
>6144	CallExpression	removedSynapses . empty ( )
>6145	ArgumentList	 
>6146	Callee	removedSynapses . empty
>6147	MemberAccess	removedSynapses . empty
>6148	Identifier	empty
>6149	Identifier	removedSynapses
>6150	UnaryOperator	!
>6151	ExpressionStatement	 
>6152	AssignmentExpr	nSynapsesRemoved += removedSynapses . size ( )
>6153	CallExpression	removedSynapses . size ( )
>6154	ArgumentList	 
>6155	Callee	removedSynapses . size
>6156	MemberAccess	removedSynapses . size
>6157	Identifier	size
>6158	Identifier	removedSynapses
>6159	Identifier	nSynapsesRemoved
>6160	ExpressionStatement	 
>6161	CallExpression	seg . decaySynapses2 ( _globalDecay , removedSynapses , _permConnected )
>6162	ArgumentList	_globalDecay
>6163	Argument	_permConnected
>6164	Identifier	_permConnected
>6165	Argument	removedSynapses
>6166	Identifier	removedSynapses
>6167	Argument	_globalDecay
>6168	Identifier	_globalDecay
>6169	Callee	seg . decaySynapses2
>6170	MemberAccess	seg . decaySynapses2
>6171	Identifier	decaySynapses2
>6172	Identifier	seg
>6173	ExpressionStatement	 
>6174	IncDecOp	nSegmentsDecayed ++
>6175	IncDec	++
>6176	Identifier	nSegmentsDecayed
>6177	ExpressionStatement	 
>6178	CallExpression	removedSynapses . clear ( )
>6179	ArgumentList	 
>6180	Callee	removedSynapses . clear
>6181	MemberAccess	removedSynapses . clear
>6182	Identifier	clear
>6183	Identifier	removedSynapses
>6184	IdentifierDeclStatement	 
>6185	IdentifierDecl	removedSynapses
>6186	Identifier	removedSynapses
>6187	IdentifierDeclType	std 
>6188	Statement	 
>6189	Condition	 
>6190	RelationalExpression	age > _maxAge
>6191	Identifier	_maxAge
>6192	Identifier	age
>6193	IdentifierDeclStatement	 
>6194	IdentifierDecl	age = _nLrnIterations - seg . _lastActiveIteration
>6195	AssignmentExpr	age = _nLrnIterations - seg . _lastActiveIteration
>6196	AdditiveExpression	_nLrnIterations - seg . _lastActiveIteration
>6197	MemberAccess	seg . _lastActiveIteration
>6198	Identifier	_lastActiveIteration
>6199	Identifier	seg
>6200	Identifier	_nLrnIterations
>6201	Identifier	age
>6202	Identifier	age
>6203	IdentifierDeclType	UInt
>6204	IdentifierDeclStatement	 
>6205	IdentifierDecl	& seg = segment ( cellIdx , segIdx )
>6206	AssignmentExpr	& seg = segment ( cellIdx , segIdx )
>6207	CallExpression	segment ( cellIdx , segIdx )
>6208	ArgumentList	cellIdx
>6209	Argument	segIdx
>6210	Identifier	segIdx
>6211	Argument	cellIdx
>6212	Identifier	cellIdx
>6213	Callee	segment
>6214	Identifier	segment
>6215	Identifier	seg
>6216	Identifier	seg
>6217	IdentifierDeclType	Segment &
>6218	UnaryExpression	 
>6219	Identifier	segIdx
>6220	IncDec	++
>6221	Condition	 
>6222	EqualityExpression	segIdx != _cells [ cellIdx ] . size ( )
>6223	CallExpression	_cells [ cellIdx ] . size ( )
>6224	ArgumentList	 
>6225	Callee	_cells [ cellIdx ] . size
>6226	MemberAccess	_cells [ cellIdx ] . size
>6227	Identifier	size
>6228	ArrayIndexing	_cells [ cellIdx ]
>6229	Identifier	cellIdx
>6230	Identifier	_cells
>6231	Identifier	segIdx
>6232	ForInit	 
>6233	IdentifierDeclStatement	UInt segIdx = 0 ;
>6234	IdentifierDecl	segIdx = 0
>6235	AssignmentExpr	segIdx = 0
>6236	PrimaryExpression	0
>6237	Identifier	segIdx
>6238	Identifier	segIdx
>6239	IdentifierDeclType	UInt
>6240	UnaryExpression	 
>6241	Identifier	cellIdx
>6242	IncDec	++
>6243	Condition	 
>6244	EqualityExpression	cellIdx != _nCells
>6245	Identifier	_nCells
>6246	Identifier	cellIdx
>6247	ForInit	 
>6248	IdentifierDeclStatement	UInt cellIdx = 0 ;
>6249	IdentifierDecl	cellIdx = 0
>6250	AssignmentExpr	cellIdx = 0
>6251	PrimaryExpression	0
>6252	Identifier	cellIdx
>6253	Identifier	cellIdx
>6254	IdentifierDeclType	UInt
>6255	Condition	 
>6256	AndExpression	_globalDecay != 0 && ( _maxAge > 0 ) && ( _nLrnIterations % _maxAge == 0 )
>6257	AndExpression	( _maxAge > 0 ) && ( _nLrnIterations % _maxAge == 0 )
>6258	EqualityExpression	_nLrnIterations % _maxAge == 0
>6259	PrimaryExpression	0
>6260	MultiplicativeExpression	_nLrnIterations % _maxAge
>6261	Identifier	_maxAge
>6262	Identifier	_nLrnIterations
>6263	RelationalExpression	_maxAge > 0
>6264	PrimaryExpression	0
>6265	Identifier	_maxAge
>6266	EqualityExpression	_globalDecay != 0
>6267	PrimaryExpression	0
>6268	Identifier	_globalDecay
>6269	IdentifierDeclStatement	 
>6270	IdentifierDecl	nSynapsesRemoved = 0
>6271	AssignmentExpr	nSynapsesRemoved = 0
>6272	PrimaryExpression	0
>6273	Identifier	nSynapsesRemoved
>6274	Identifier	nSynapsesRemoved
>6275	IdentifierDeclType	UInt
>6276	IdentifierDecl	nSegmentsDecayed = 0
>6277	AssignmentExpr	nSegmentsDecayed = 0
>6278	PrimaryExpression	0
>6279	Identifier	nSegmentsDecayed
>6280	Identifier	nSegmentsDecayed
>6281	IdentifierDeclType	UInt
>6307	FunctionDef	Cells4 
>6308	ParameterList	const SegmentUpdate & update
>6309	Parameter	 
>6310	Identifier	update
>6311	ParameterType	const SegmentUpdate &
>6312	ReturnType	void
>6313	CompoundStatement	 
>6314	ExpressionStatement	 
>6315	CallExpression	TIMER ( adaptSegmentTimer . stop ( ) )
>6316	ArgumentList	adaptSegmentTimer . stop ( )
>6317	Argument	adaptSegmentTimer . stop ( )
>6318	CallExpression	adaptSegmentTimer . stop ( )
>6319	ArgumentList	 
>6320	Callee	adaptSegmentTimer . stop
>6321	MemberAccess	adaptSegmentTimer . stop
>6322	Identifier	stop
>6323	Identifier	adaptSegmentTimer
>6324	Callee	TIMER
>6325	Identifier	TIMER
>6326	IfStatement	if ( _checkSynapseConsistency )
>6327	CompoundStatement	 
>6328	ExpressionStatement	 
>6329	CallExpression	NTA_CHECK ( invariants ( ) )
>6330	ArgumentList	invariants ( )
>6331	Argument	invariants ( )
>6332	CallExpression	invariants ( )
>6333	ArgumentList	 
>6334	Callee	invariants
>6335	Identifier	invariants
>6336	Callee	NTA_CHECK
>6337	Identifier	NTA_CHECK
>6338	Condition	 
>6339	Identifier	_checkSynapseConsistency
>6340	IfStatement	if ( ! update . isNewSegment ( ) )
>6341	ElseStatement	else
>6342	CompoundStatement	 
>6343	ExpressionStatement	 
>6344	CallExpression	addOutSynapses ( cellIdx , segIdx , update . begin ( ) , update . end ( ) )
>6345	ArgumentList	cellIdx
>6346	Argument	update . end ( )
>6347	CallExpression	update . end ( )
>6348	ArgumentList	 
>6349	Callee	update . end
>6350	MemberAccess	update . end
>6351	Identifier	end
>6352	Identifier	update
>6353	Argument	update . begin ( )
>6354	CallExpression	update . begin ( )
>6355	ArgumentList	 
>6356	Callee	update . begin
>6357	MemberAccess	update . begin
>6358	Identifier	begin
>6359	Identifier	update
>6360	Argument	segIdx
>6361	Identifier	segIdx
>6362	Argument	cellIdx
>6363	Identifier	cellIdx
>6364	Callee	addOutSynapses
>6365	Identifier	addOutSynapses
>6366	ExpressionStatement	 
>6367	CallExpression	_learnActivity . add ( cellIdx , synapses . size ( ) )
>6368	ArgumentList	cellIdx
>6369	Argument	synapses . size ( )
>6370	CallExpression	synapses . size ( )
>6371	ArgumentList	 
>6372	Callee	synapses . size
>6373	MemberAccess	synapses . size
>6374	Identifier	size
>6375	Identifier	synapses
>6376	Argument	cellIdx
>6377	Identifier	cellIdx
>6378	Callee	_learnActivity . add
>6379	MemberAccess	_learnActivity . add
>6380	Identifier	add
>6381	Identifier	_learnActivity
>6382	IfStatement	if ( _verbosity >= 3 )
>6383	CompoundStatement	 
>6384	ExpressionStatement	 
>6385	ShiftExpression	std 
>6386	Identifier	std 
>6387	Identifier	std 
>6388	ExpressionStatement	 
>6389	CallExpression	_cells [ cellIdx ] [ segIdx ] . print ( std 
>6390	ArgumentList	std 
>6391	Argument	_nCellsPerCol
>6392	Identifier	_nCellsPerCol
>6393	Argument	std 
>6394	Identifier	std 
>6395	Callee	_cells [ cellIdx ] [ segIdx ] . print
>6396	MemberAccess	_cells [ cellIdx ] [ segIdx ] . print
>6397	Identifier	print
>6398	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>6399	Identifier	segIdx
>6400	ArrayIndexing	_cells [ cellIdx ]
>6401	Identifier	cellIdx
>6402	Identifier	_cells
>6403	ExpressionStatement	 
>6404	ShiftExpression	std 
>6405	ShiftExpression	\"cellIdx = \" << cellIdx << \", \"
>6406	ShiftExpression	cellIdx << \", \"
>6407	PrimaryExpression	\", \"
>6408	Identifier	cellIdx
>6409	PrimaryExpression	\"cellIdx = \"
>6410	Identifier	std 
>6411	ExpressionStatement	 
>6412	CallExpression	printCell ( cellIdx , _nCellsPerCol )
>6413	ArgumentList	cellIdx
>6414	Argument	_nCellsPerCol
>6415	Identifier	_nCellsPerCol
>6416	Argument	cellIdx
>6417	Identifier	cellIdx
>6418	Callee	printCell
>6419	Identifier	printCell
>6420	ExpressionStatement	 
>6421	ShiftExpression	std 
>6422	PrimaryExpression	\"New segment for cell \"
>6423	Identifier	std 
>6424	Condition	 
>6425	RelationalExpression	_verbosity >= 3
>6426	PrimaryExpression	3
>6427	Identifier	_verbosity
>6428	ExpressionStatement	 
>6429	AssignmentExpr	_cells [ cellIdx ] [ segIdx ] . _totalActivations = 1
>6430	PrimaryExpression	1
>6431	MemberAccess	_cells [ cellIdx ] [ segIdx ] . _totalActivations
>6432	Identifier	_totalActivations
>6433	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>6434	Identifier	segIdx
>6435	ArrayIndexing	_cells [ cellIdx ]
>6436	Identifier	cellIdx
>6437	Identifier	_cells
>6438	ExpressionStatement	 
>6439	AssignmentExpr	_cells [ cellIdx ] [ segIdx ] . _positiveActivations = 1
>6440	PrimaryExpression	1
>6441	MemberAccess	_cells [ cellIdx ] [ segIdx ] . _positiveActivations
>6442	Identifier	_positiveActivations
>6443	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>6444	Identifier	segIdx
>6445	ArrayIndexing	_cells [ cellIdx ]
>6446	Identifier	cellIdx
>6447	Identifier	_cells
>6448	ExpressionStatement	 
>6449	AssignmentExpr	_cells [ cellIdx ] [ segIdx ] . _lastActiveIteration = _nLrnIterations
>6450	Identifier	_nLrnIterations
>6451	MemberAccess	_cells [ cellIdx ] [ segIdx ] . _lastActiveIteration
>6452	Identifier	_lastActiveIteration
>6453	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>6454	Identifier	segIdx
>6455	ArrayIndexing	_cells [ cellIdx ]
>6456	Identifier	cellIdx
>6457	Identifier	_cells
>6458	IdentifierDeclStatement	 
>6459	IdentifierDecl	segIdx = _cells [ cellIdx ] . getFreeSegment ( synapses , _initSegFreq , update . isSequenceSegment ( ) , _permConnected , _\
>6460	AssignmentExpr	segIdx = _cells [ cellIdx ] . getFreeSegment ( synapses , _initSegFreq , update . isSequenceSegment ( ) , _\
>6461	CallExpression	_cells [ cellIdx ] . getFreeSegment ( synapses , _initSegFreq , update . isSequenceSegment ( ) , _permConnected , _\
>6462	ArgumentList	synapses
>6463	Argument	_nLrnIterations
>6464	Identifier	_nLrnIterations
>6465	Argument	_permConnected
>6466	Identifier	_permConnected
>6467	Argument	update . isSequenceSegment ( )
>6468	CallExpression	update . isSequenceSegment ( )
>6469	ArgumentList	 
>6470	Callee	update . isSequenceSegment
>6471	MemberAccess	update . isSequenceSegment
>6472	Identifier	isSequenceSegment
>6473	Identifier	update
>6474	Argument	_initSegFreq
>6475	Identifier	_initSegFreq
>6476	Argument	synapses
>6477	Identifier	synapses
>6478	Callee	_cells [ cellIdx ] . getFreeSegment
>6479	MemberAccess	_cells [ cellIdx ] . getFreeSegment
>6480	Identifier	getFreeSegment
>6481	ArrayIndexing	_cells [ cellIdx ]
>6482	Identifier	cellIdx
>6483	Identifier	_cells
>6484	Identifier	segIdx
>6485	Identifier	segIdx
>6486	IdentifierDeclType	UInt
>6487	ForStatement	for ( UInt i = 0 ; i != update . size ( ) ; ++ i )
>6488	CompoundStatement	 
>6489	ExpressionStatement	 
>6490	CallExpression	synapses . push_back ( InSynapse ( update [ i ] , _permInitial ) )
>6491	ArgumentList	InSynapse ( update [ i ] , _permInitial )
>6492	Argument	InSynapse ( update [ i ] , _permInitial )
>6493	CallExpression	InSynapse ( update [ i ] , _permInitial )
>6494	ArgumentList	update [ i ]
>6495	Argument	_permInitial
>6496	Identifier	_permInitial
>6497	Argument	update [ i ]
>6498	ArrayIndexing	update [ i ]
>6499	Identifier	i
>6500	Identifier	update
>6501	Callee	InSynapse
>6502	Identifier	InSynapse
>6503	Callee	synapses . push_back
>6504	MemberAccess	synapses . push_back
>6505	Identifier	push_back
>6506	Identifier	synapses
>6507	UnaryExpression	 
>6508	Identifier	i
>6509	IncDec	++
>6510	Condition	 
>6511	EqualityExpression	i != update . size ( )
>6512	CallExpression	update . size ( )
>6513	ArgumentList	 
>6514	Callee	update . size
>6515	MemberAccess	update . size
>6516	Identifier	size
>6517	Identifier	update
>6518	Identifier	i
>6519	ForInit	 
>6520	IdentifierDeclStatement	UInt i = 0 ;
>6521	IdentifierDecl	i = 0
>6522	AssignmentExpr	i = 0
>6523	PrimaryExpression	0
>6524	Identifier	i
>6525	Identifier	i
>6526	IdentifierDeclType	UInt
>6527	IdentifierDeclStatement	 
>6528	IdentifierDecl	synapses
>6529	Identifier	synapses
>6530	IdentifierDeclType	InSynapses
>6531	CompoundStatement	 
>6532	IfStatement	if ( segment . empty ( ) )
>6533	CompoundStatement	 
>6534	ExpressionStatement	 
>6535	CallExpression	_cells [ cellIdx ] . releaseSegment ( segIdx )
>6536	ArgumentList	segIdx
>6537	Argument	segIdx
>6538	Identifier	segIdx
>6539	Callee	_cells [ cellIdx ] . releaseSegment
>6540	MemberAccess	_cells [ cellIdx ] . releaseSegment
>6541	Identifier	releaseSegment
>6542	ArrayIndexing	_cells [ cellIdx ]
>6543	Identifier	cellIdx
>6544	Identifier	_cells
>6545	Condition	 
>6546	CallExpression	segment . empty ( )
>6547	ArgumentList	 
>6548	Callee	segment . empty
>6549	MemberAccess	segment . empty
>6550	Identifier	empty
>6551	Identifier	segment
>6552	IfStatement	if ( ! removed . empty ( ) )
>6553	CompoundStatement	 
>6554	ExpressionStatement	 
>6555	CallExpression	_cells [ cellIdx ] [ segIdx ] . recomputeConnected ( _permConnected )
>6556	ArgumentList	_permConnected
>6557	Argument	_permConnected
>6558	Identifier	_permConnected
>6559	Callee	_cells [ cellIdx ] [ segIdx ] . recomputeConnected
>6560	MemberAccess	_cells [ cellIdx ] [ segIdx ] . recomputeConnected
>6561	Identifier	recomputeConnected
>6562	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>6563	Identifier	segIdx
>6564	ArrayIndexing	_cells [ cellIdx ]
>6565	Identifier	cellIdx
>6566	Identifier	_cells
>6567	ExpressionStatement	 
>6568	CallExpression	eraseOutSynapses ( cellIdx , segIdx , removed )
>6569	ArgumentList	cellIdx
>6570	Argument	removed
>6571	Identifier	removed
>6572	Argument	segIdx
>6573	Identifier	segIdx
>6574	Argument	cellIdx
>6575	Identifier	cellIdx
>6576	Callee	eraseOutSynapses
>6577	Identifier	eraseOutSynapses
>6578	Condition	 
>6579	UnaryOp	! removed . empty ( )
>6580	CallExpression	removed . empty ( )
>6581	ArgumentList	 
>6582	Callee	removed . empty
>6583	MemberAccess	removed . empty
>6584	Identifier	empty
>6585	Identifier	removed
>6586	UnaryOperator	!
>6587	IfStatement	if ( _verbosity >= 4 )
>6588	CompoundStatement	 
>6589	ExpressionStatement	 
>6590	ShiftExpression	std 
>6591	Identifier	std 
>6592	Identifier	std 
>6593	ExpressionStatement	 
>6594	CallExpression	segment . print ( std 
>6595	ArgumentList	std 
>6596	Argument	_nCellsPerCol
>6597	Identifier	_nCellsPerCol
>6598	Argument	std 
>6599	Identifier	std 
>6600	Callee	segment . print
>6601	MemberAccess	segment . print
>6602	Identifier	print
>6603	Identifier	segment
>6604	ExpressionStatement	 
>6605	ShiftExpression	std 
>6606	PrimaryExpression	\"    after
>6607	Identifier	std 
>6608	Condition	 
>6609	RelationalExpression	_verbosity >= 4
>6610	PrimaryExpression	4
>6611	Identifier	_verbosity
>6612	ExpressionStatement	 
>6613	CallExpression	addOutSynapses ( cellIdx , segIdx , synapsesSet . begin ( ) , synapsesSet . end ( ) )
>6614	ArgumentList	cellIdx
>6615	Argument	synapsesSet . end ( )
>6616	CallExpression	synapsesSet . end ( )
>6617	ArgumentList	 
>6618	Callee	synapsesSet . end
>6619	MemberAccess	synapsesSet . end
>6620	Identifier	end
>6621	Identifier	synapsesSet
>6622	Argument	synapsesSet . begin ( )
>6623	CallExpression	synapsesSet . begin ( )
>6624	ArgumentList	 
>6625	Callee	synapsesSet . begin
>6626	MemberAccess	synapsesSet . begin
>6627	Identifier	begin
>6628	Identifier	synapsesSet
>6629	Argument	segIdx
>6630	Identifier	segIdx
>6631	Argument	cellIdx
>6632	Identifier	cellIdx
>6633	Callee	addOutSynapses
>6634	Identifier	addOutSynapses
>6635	ExpressionStatement	 
>6636	CallExpression	segment . addSynapses ( synapsesSet , _permInitial , _permConnected )
>6637	ArgumentList	synapsesSet
>6638	Argument	_permConnected
>6639	Identifier	_permConnected
>6640	Argument	_permInitial
>6641	Identifier	_permInitial
>6642	Argument	synapsesSet
>6643	Identifier	synapsesSet
>6644	Callee	segment . addSynapses
>6645	MemberAccess	segment . addSynapses
>6646	Identifier	addSynapses
>6647	Identifier	segment
>6648	IfStatement	if ( ( _maxSynapsesPerSegment > 0 ) && ( synapsesSet . size ( ) + segment . size ( ) > ( UInt ) _maxSynapsesPerSegment ) )
>6649	CompoundStatement	 
>6650	ExpressionStatement	 
>6651	CallExpression	segment . freeNSynapses ( numToFree , synToDec , inactiveSegmentIndices , synToInc , activeSegmentIndices , removed , _\
>6652	ArgumentList	numToFree
>6653	Argument	_permMax
>6654	Identifier	_permMax
>6655	Argument	_nCellsPerCol
>6656	Identifier	_nCellsPerCol
>6657	Argument	_verbosity
>6658	Identifier	_verbosity
>6659	Argument	removed
>6660	Identifier	removed
>6661	Argument	activeSegmentIndices
>6662	Identifier	activeSegmentIndices
>6663	Argument	synToInc
>6664	Identifier	synToInc
>6665	Argument	inactiveSegmentIndices
>6666	Identifier	inactiveSegmentIndices
>6667	Argument	synToDec
>6668	Identifier	synToDec
>6669	Argument	numToFree
>6670	Identifier	numToFree
>6671	Callee	segment . freeNSynapses
>6672	MemberAccess	segment . freeNSynapses
>6673	Identifier	freeNSynapses
>6674	Identifier	segment
>6675	IdentifierDeclStatement	 
>6676	IdentifierDecl	numToFree = synapsesSet . size ( ) + segment . size ( ) - _maxSynapsesPerSegment
>6677	AssignmentExpr	numToFree = synapsesSet . size ( ) + segment . size ( ) - _maxSynapsesPerSegment
>6678	AdditiveExpression	synapsesSet . size ( ) + segment . size ( ) - _maxSynapsesPerSegment
>6679	AdditiveExpression	segment . size ( ) - _maxSynapsesPerSegment
>6680	Identifier	_maxSynapsesPerSegment
>6681	CallExpression	segment . size ( )
>6682	ArgumentList	 
>6683	Callee	segment . size
>6684	MemberAccess	segment . size
>6685	Identifier	size
>6686	Identifier	segment
>6687	CallExpression	synapsesSet . size ( )
>6688	ArgumentList	 
>6689	Callee	synapsesSet . size
>6690	MemberAccess	synapsesSet . size
>6691	Identifier	size
>6692	Identifier	synapsesSet
>6693	Identifier	numToFree
>6694	Identifier	numToFree
>6695	IdentifierDeclType	UInt
>6696	Condition	 
>6697	AndExpression	( _maxSynapsesPerSegment > 0 ) && ( synapsesSet . size ( ) + segment . size ( ) > ( UInt ) _maxSynapsesPerSegment )
>6698	RelationalExpression	synapsesSet . size ( ) + segment . size ( ) > ( UInt ) _maxSynapsesPerSegment
>6699	CastExpression	( UInt ) _maxSynapsesPerSegment
>6700	Identifier	_maxSynapsesPerSegment
>6701	CastTarget	UInt
>6702	AdditiveExpression	synapsesSet . size ( ) + segment . size ( )
>6703	CallExpression	segment . size ( )
>6704	ArgumentList	 
>6705	Callee	segment . size
>6706	MemberAccess	segment . size
>6707	Identifier	size
>6708	Identifier	segment
>6709	CallExpression	synapsesSet . size ( )
>6710	ArgumentList	 
>6711	Callee	synapsesSet . size
>6712	MemberAccess	synapsesSet . size
>6713	Identifier	size
>6714	Identifier	synapsesSet
>6715	RelationalExpression	_maxSynapsesPerSegment > 0
>6716	PrimaryExpression	0
>6717	Identifier	_maxSynapsesPerSegment
>6718	ExpressionStatement	 
>6719	CallExpression	segment . updateSynapses ( synToInc , _permInc , _permMax , _permConnected , removed )
>6720	ArgumentList	synToInc
>6721	Argument	removed
>6722	Identifier	removed
>6723	Argument	_permConnected
>6724	Identifier	_permConnected
>6725	Argument	_permMax
>6726	Identifier	_permMax
>6727	Argument	_permInc
>6728	Identifier	_permInc
>6729	Argument	synToInc
>6730	Identifier	synToInc
>6731	Callee	segment . updateSynapses
>6732	MemberAccess	segment . updateSynapses
>6733	Identifier	updateSynapses
>6734	Identifier	segment
>6735	ExpressionStatement	 
>6736	CallExpression	segment . updateSynapses ( synToDec , - _permDec , _permMax , _permConnected , removed )
>6737	ArgumentList	synToDec
>6738	Argument	removed
>6739	Identifier	removed
>6740	Argument	_permConnected
>6741	Identifier	_permConnected
>6742	Argument	_permMax
>6743	Identifier	_permMax
>6744	Argument	- _permDec
>6745	UnaryOp	- _permDec
>6746	Identifier	_permDec
>6747	UnaryOperator	-
>6748	Argument	synToDec
>6749	Identifier	synToDec
>6750	Callee	segment . updateSynapses
>6751	MemberAccess	segment . updateSynapses
>6752	Identifier	updateSynapses
>6753	Identifier	segment
>6754	ForStatement	for ( UInt i = 0 ; i != segment . size ( ) ; ++ i )
>6755	CompoundStatement	 
>6756	IfStatement	if ( not_in ( srcCellIdx , synapsesSet ) )
>6757	ElseStatement	else
>6758	CompoundStatement	 
>6759	ExpressionStatement	 
>6760	CallExpression	activeSegmentIndices . push_back ( i )
>6761	ArgumentList	i
>6762	Argument	i
>6763	Identifier	i
>6764	Callee	activeSegmentIndices . push_back
>6765	MemberAccess	activeSegmentIndices . push_back
>6766	Identifier	push_back
>6767	Identifier	activeSegmentIndices
>6768	ExpressionStatement	 
>6769	CallExpression	synapsesSet . erase ( srcCellIdx )
>6770	ArgumentList	srcCellIdx
>6771	Argument	srcCellIdx
>6772	Identifier	srcCellIdx
>6773	Callee	synapsesSet . erase
>6774	MemberAccess	synapsesSet . erase
>6775	Identifier	erase
>6776	Identifier	synapsesSet
>6777	ExpressionStatement	 
>6778	CallExpression	synToInc . push_back ( srcCellIdx )
>6779	ArgumentList	srcCellIdx
>6780	Argument	srcCellIdx
>6781	Identifier	srcCellIdx
>6782	Callee	synToInc . push_back
>6783	MemberAccess	synToInc . push_back
>6784	Identifier	push_back
>6785	Identifier	synToInc
>6786	CompoundStatement	 
>6787	ExpressionStatement	 
>6788	CallExpression	inactiveSegmentIndices . push_back ( i )
>6789	ArgumentList	i
>6790	Argument	i
>6791	Identifier	i
>6792	Callee	inactiveSegmentIndices . push_back
>6793	MemberAccess	inactiveSegmentIndices . push_back
>6794	Identifier	push_back
>6795	Identifier	inactiveSegmentIndices
>6796	ExpressionStatement	 
>6797	CallExpression	synToDec . push_back ( srcCellIdx )
>6798	ArgumentList	srcCellIdx
>6799	Argument	srcCellIdx
>6800	Identifier	srcCellIdx
>6801	Callee	synToDec . push_back
>6802	MemberAccess	synToDec . push_back
>6803	Identifier	push_back
>6804	Identifier	synToDec
>6805	Condition	 
>6806	CallExpression	not_in ( srcCellIdx , synapsesSet )
>6807	ArgumentList	srcCellIdx
>6808	Argument	synapsesSet
>6809	Identifier	synapsesSet
>6810	Argument	srcCellIdx
>6811	Identifier	srcCellIdx
>6812	Callee	not_in
>6813	Identifier	not_in
>6814	IdentifierDeclStatement	 
>6815	IdentifierDecl	srcCellIdx = segment [ i ] . srcCellIdx ( )
>6816	AssignmentExpr	srcCellIdx = segment [ i ] . srcCellIdx ( )
>6817	CallExpression	segment [ i ] . srcCellIdx ( )
>6818	ArgumentList	 
>6819	Callee	segment [ i ] . srcCellIdx
>6820	MemberAccess	segment [ i ] . srcCellIdx
>6821	Identifier	srcCellIdx
>6822	ArrayIndexing	segment [ i ]
>6823	Identifier	i
>6824	Identifier	segment
>6825	Identifier	srcCellIdx
>6826	Identifier	srcCellIdx
>6827	IdentifierDeclType	UInt
>6828	UnaryExpression	 
>6829	Identifier	i
>6830	IncDec	++
>6831	Condition	 
>6832	EqualityExpression	i != segment . size ( )
>6833	CallExpression	segment . size ( )
>6834	ArgumentList	 
>6835	Callee	segment . size
>6836	MemberAccess	segment . size
>6837	Identifier	size
>6838	Identifier	segment
>6839	Identifier	i
>6840	ForInit	 
>6841	IdentifierDeclStatement	UInt i = 0 ;
>6842	IdentifierDecl	i = 0
>6843	AssignmentExpr	i = 0
>6844	PrimaryExpression	0
>6845	Identifier	i
>6846	Identifier	i
>6847	IdentifierDeclType	UInt
>6848	ExpressionStatement	 
>6849	CallExpression	activeSegmentIndices . clear ( )
>6850	ArgumentList	 
>6851	Callee	activeSegmentIndices . clear
>6852	MemberAccess	activeSegmentIndices . clear
>6853	Identifier	clear
>6854	Identifier	activeSegmentIndices
>6855	ExpressionStatement	 
>6856	CallExpression	inactiveSegmentIndices . clear ( )
>6857	ArgumentList	 
>6858	Callee	inactiveSegmentIndices . clear
>6859	MemberAccess	inactiveSegmentIndices . clear
>6860	Identifier	clear
>6861	Identifier	inactiveSegmentIndices
>6862	ExpressionStatement	 
>6863	CallExpression	synToInc . clear ( )
>6864	ArgumentList	 
>6865	Callee	synToInc . clear
>6866	MemberAccess	synToInc . clear
>6867	Identifier	clear
>6868	Identifier	synToInc
>6869	ExpressionStatement	 
>6870	CallExpression	synToDec . clear ( )
>6871	ArgumentList	 
>6872	Callee	synToDec . clear
>6873	MemberAccess	synToDec . clear
>6874	Identifier	clear
>6875	Identifier	synToDec
>6876	ExpressionStatement	 
>6877	CallExpression	removed . clear ( )
>6878	ArgumentList	 
>6879	Callee	removed . clear
>6880	MemberAccess	removed . clear
>6881	Identifier	clear
>6882	Identifier	removed
>6883	IdentifierDeclStatement	 
>6884	IdentifierDecl	activeSegmentIndices
>6885	Identifier	activeSegmentIndices
>6886	IdentifierDeclType	std 
>6887	IdentifierDecl	inactiveSegmentIndices
>6888	Identifier	inactiveSegmentIndices
>6889	IdentifierDeclType	std 
>6890	IdentifierDecl	synToInc
>6891	Identifier	synToInc
>6892	IdentifierDeclType	std 
>6893	IdentifierDecl	synToDec
>6894	Identifier	synToDec
>6895	IdentifierDeclType	std 
>6896	Statement	 
>6897	IdentifierDeclStatement	 
>6898	IdentifierDecl	removed
>6899	Identifier	removed
>6900	IdentifierDeclType	std 
>6901	Statement	 
>6902	IdentifierDeclStatement	 
>6903	IdentifierDecl	synapsesSet ( update . begin ( ) , update . end ( ) )
>6904	Expression	update . begin ( ) , update . end ( )
>6905	CallExpression	update . end ( )
>6906	ArgumentList	 
>6907	Callee	update . end
>6908	MemberAccess	update . end
>6909	Identifier	end
>6910	Identifier	update
>6911	CallExpression	update . begin ( )
>6912	ArgumentList	 
>6913	Callee	update . begin
>6914	MemberAccess	update . begin
>6915	Identifier	begin
>6916	Identifier	update
>6917	Identifier	synapsesSet
>6918	IdentifierDeclType	std 
>6919	ExpressionStatement	 
>6920	CallExpression	segment . dutyCycle ( _nLrnIterations , true , false )
>6921	ArgumentList	_nLrnIterations
>6922	Argument	false
>6923	Identifier	false
>6924	Argument	true
>6925	Identifier	true
>6926	Argument	_nLrnIterations
>6927	Identifier	_nLrnIterations
>6928	Callee	segment . dutyCycle
>6929	MemberAccess	segment . dutyCycle
>6930	Identifier	dutyCycle
>6931	Identifier	segment
>6932	ExpressionStatement	 
>6933	IncDecOp	segment . _positiveActivations ++
>6934	IncDec	++
>6935	MemberAccess	segment . _positiveActivations
>6936	Identifier	_positiveActivations
>6937	Identifier	segment
>6938	ExpressionStatement	 
>6939	AssignmentExpr	segment . _lastActiveIteration = _nLrnIterations
>6940	Identifier	_nLrnIterations
>6941	MemberAccess	segment . _lastActiveIteration
>6942	Identifier	_lastActiveIteration
>6943	Identifier	segment
>6944	IfStatement	if ( _verbosity >= 4 )
>6945	CompoundStatement	 
>6946	ExpressionStatement	 
>6947	ShiftExpression	std 
>6948	Identifier	std 
>6949	Identifier	std 
>6950	ExpressionStatement	 
>6951	CallExpression	segment . print ( std 
>6952	ArgumentList	std 
>6953	Argument	_nCellsPerCol
>6954	Identifier	_nCellsPerCol
>6955	Argument	std 
>6956	Identifier	std 
>6957	Callee	segment . print
>6958	MemberAccess	segment . print
>6959	Identifier	print
>6960	Identifier	segment
>6961	ExpressionStatement	 
>6962	ShiftExpression	std 
>6963	ShiftExpression	\"Reinforcing segment \" << segIdx << \" for cell[\" << col << \",\" << cell << \"]\n     before
>6964	ShiftExpression	segIdx << \" for cell[\" << col << \",\" << cell << \"]\n     before
>6965	ShiftExpression	\" for cell[\" << col << \",\" << cell << \"]\n     before
>6966	ShiftExpression	col << \",\" << cell << \"]\n     before
>6967	ShiftExpression	\",\" << cell << \"]\n     before
>6968	ShiftExpression	cell << \"]\n     before
>6969	PrimaryExpression	\"]\n     before
>6970	Identifier	cell
>6971	PrimaryExpression	\",\"
>6972	Identifier	col
>6973	PrimaryExpression	\" for cell[\"
>6974	Identifier	segIdx
>6975	PrimaryExpression	\"Reinforcing segment \"
>6976	Identifier	std 
>6977	IdentifierDeclStatement	 
>6978	IdentifierDecl	cell = cellIdx - col * _nCellsPerCol
>6979	AssignmentExpr	cell = cellIdx - col * _nCellsPerCol
>6980	AdditiveExpression	cellIdx - col * _nCellsPerCol
>6981	MultiplicativeExpression	col * _nCellsPerCol
>6982	Identifier	_nCellsPerCol
>6983	Identifier	col
>6984	Identifier	cellIdx
>6985	Identifier	cell
>6986	Identifier	cell
>6987	IdentifierDeclType	UInt
>6988	IdentifierDeclStatement	 
>6989	IdentifierDecl	col = ( UInt ) ( cellIdx / _nCellsPerCol )
>6990	AssignmentExpr	col = ( UInt ) ( cellIdx / _nCellsPerCol )
>6991	CastExpression	( UInt ) ( cellIdx / _nCellsPerCol )
>6992	MultiplicativeExpression	cellIdx / _nCellsPerCol
>6993	Identifier	_nCellsPerCol
>6994	Identifier	cellIdx
>6995	CastTarget	UInt
>6996	Identifier	col
>6997	Identifier	col
>6998	IdentifierDeclType	UInt
>6999	Condition	 
>7000	RelationalExpression	_verbosity >= 4
>7001	PrimaryExpression	4
>7002	Identifier	_verbosity
>7003	IdentifierDeclStatement	 
>7004	IdentifierDecl	& segment = _cells [ cellIdx ] [ segIdx ]
>7005	AssignmentExpr	& segment = _cells [ cellIdx ] [ segIdx ]
>7006	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>7007	Identifier	segIdx
>7008	ArrayIndexing	_cells [ cellIdx ]
>7009	Identifier	cellIdx
>7010	Identifier	_cells
>7011	Identifier	segment
>7012	Identifier	segment
>7013	IdentifierDeclType	Segment &
>7014	IfStatement	if ( _cells [ cellIdx ] [ segIdx ] . empty ( ) )
>7015	CompoundStatement	 
>7016	ReturnStatement	 
>7017	ExpressionStatement	 
>7018	CallExpression	TIMER ( adaptSegmentTimer . stop ( ) )
>7019	ArgumentList	adaptSegmentTimer . stop ( )
>7020	Argument	adaptSegmentTimer . stop ( )
>7021	CallExpression	adaptSegmentTimer . stop ( )
>7022	ArgumentList	 
>7023	Callee	adaptSegmentTimer . stop
>7024	MemberAccess	adaptSegmentTimer . stop
>7025	Identifier	stop
>7026	Identifier	adaptSegmentTimer
>7027	Callee	TIMER
>7028	Identifier	TIMER
>7029	Condition	 
>7030	CallExpression	_cells [ cellIdx ] [ segIdx ] . empty ( )
>7031	ArgumentList	 
>7032	Callee	_cells [ cellIdx ] [ segIdx ] . empty
>7033	MemberAccess	_cells [ cellIdx ] [ segIdx ] . empty
>7034	Identifier	empty
>7035	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>7036	Identifier	segIdx
>7037	ArrayIndexing	_cells [ cellIdx ]
>7038	Identifier	cellIdx
>7039	Identifier	_cells
>7040	Condition	 
>7041	UnaryOp	! update . isNewSegment ( )
>7042	CallExpression	update . isNewSegment ( )
>7043	ArgumentList	 
>7044	Callee	update . isNewSegment
>7045	MemberAccess	update . isNewSegment
>7046	Identifier	isNewSegment
>7047	Identifier	update
>7048	UnaryOperator	!
>7049	IdentifierDeclStatement	 
>7050	IdentifierDecl	segIdx = update . segIdx ( )
>7051	AssignmentExpr	segIdx = update . segIdx ( )
>7052	CallExpression	update . segIdx ( )
>7053	ArgumentList	 
>7054	Callee	update . segIdx
>7055	MemberAccess	update . segIdx
>7056	Identifier	segIdx
>7057	Identifier	update
>7058	Identifier	segIdx
>7059	Identifier	segIdx
>7060	IdentifierDeclType	UInt
>7061	IdentifierDeclStatement	 
>7062	IdentifierDecl	cellIdx = update . cellIdx ( )
>7063	AssignmentExpr	cellIdx = update . cellIdx ( )
>7064	CallExpression	update . cellIdx ( )
>7065	ArgumentList	 
>7066	Callee	update . cellIdx
>7067	MemberAccess	update . cellIdx
>7068	Identifier	cellIdx
>7069	Identifier	update
>7070	Identifier	cellIdx
>7071	Identifier	cellIdx
>7072	IdentifierDeclType	UInt
>7073	CompoundStatement	 
>7074	ExpressionStatement	 
>7075	CallExpression	TIMER ( adaptSegmentTimer . start ( ) )
>7076	ArgumentList	adaptSegmentTimer . start ( )
>7077	Argument	adaptSegmentTimer . start ( )
>7078	CallExpression	adaptSegmentTimer . start ( )
>7079	ArgumentList	 
>7080	Callee	adaptSegmentTimer . start
>7081	MemberAccess	adaptSegmentTimer . start
>7082	Identifier	start
>7083	Identifier	adaptSegmentTimer
>7084	Callee	TIMER
>7085	Identifier	TIMER
>7157	FunctionDef	Cells4 
>7158	ParameterList	 
>7159	ReturnType	void
>7160	CompoundStatement	 
>7161	ExpressionStatement	 
>7162	CallExpression	rebuildOutSynapses ( )
>7163	ArgumentList	 
>7164	Callee	rebuildOutSynapses
>7165	Identifier	rebuildOutSynapses
>7166	ForStatement	for ( UInt cellIdx = 0 ; cellIdx != _nCells ; ++ cellIdx )
>7167	CompoundStatement	 
>7168	IfStatement	if ( _cells [ cellIdx ] . size ( ) > 0 )
>7169	CompoundStatement	 
>7170	ExpressionStatement	 
>7171	CallExpression	_cells [ cellIdx ] . rebalanceSegments ( )
>7172	ArgumentList	 
>7173	Callee	_cells [ cellIdx ] . rebalanceSegments
>7174	MemberAccess	_cells [ cellIdx ] . rebalanceSegments
>7175	Identifier	rebalanceSegments
>7176	ArrayIndexing	_cells [ cellIdx ]
>7177	Identifier	cellIdx
>7178	Identifier	_cells
>7179	Condition	 
>7180	RelationalExpression	_cells [ cellIdx ] . size ( ) > 0
>7181	PrimaryExpression	0
>7182	CallExpression	_cells [ cellIdx ] . size ( )
>7183	ArgumentList	 
>7184	Callee	_cells [ cellIdx ] . size
>7185	MemberAccess	_cells [ cellIdx ] . size
>7186	Identifier	size
>7187	ArrayIndexing	_cells [ cellIdx ]
>7188	Identifier	cellIdx
>7189	Identifier	_cells
>7190	UnaryExpression	 
>7191	Identifier	cellIdx
>7192	IncDec	++
>7193	Condition	 
>7194	EqualityExpression	cellIdx != _nCells
>7195	Identifier	_nCells
>7196	Identifier	cellIdx
>7197	ForInit	 
>7198	IdentifierDeclStatement	UInt cellIdx = 0 ;
>7199	IdentifierDecl	cellIdx = 0
>7200	AssignmentExpr	cellIdx = 0
>7201	PrimaryExpression	0
>7202	Identifier	cellIdx
>7203	Identifier	cellIdx
>7204	IdentifierDeclType	UInt
>7205	ExpressionStatement	 
>7206	AssignmentExpr	_nIterationsSinceRebalance = _nLrnIterations
>7207	Identifier	_nLrnIterations
>7208	Identifier	_nIterationsSinceRebalance
>7209	ExpressionStatement	 
>7210	ShiftExpression	std 
>7211	PrimaryExpression	\"Rebalancing\n\"
>7212	Identifier	std 
>7224	FunctionDef	Cells4 
>7225	ParameterList	UInt maxAge
>7226	Parameter	 
>7227	Identifier	maxAge
>7228	ParameterType	UInt
>7229	ReturnType	void
>7230	CompoundStatement	 
>7231	ExpressionStatement	 
>7232	CallExpression	NTA_CHECK ( invariants ( ) )
>7233	ArgumentList	invariants ( )
>7234	Argument	invariants ( )
>7235	CallExpression	invariants ( )
>7236	ArgumentList	 
>7237	Callee	invariants
>7238	Identifier	invariants
>7239	Callee	NTA_CHECK
>7240	Identifier	NTA_CHECK
>7241	ExpressionStatement	 
>7242	ShiftExpression	std 
>7243	ShiftExpression	\"In trimOldSegments. Removed \" << nSegsRemoved << \" segments\n\"
>7244	ShiftExpression	nSegsRemoved << \" segments\n\"
>7245	PrimaryExpression	\" segments\n\"
>7246	Identifier	nSegsRemoved
>7247	PrimaryExpression	\"In trimOldSegments. Removed \"
>7248	Identifier	std 
>7249	ForStatement	for ( UInt cellIdx = 0 ; cellIdx != _nCells ; ++ cellIdx )
>7250	CompoundStatement	 
>7251	ForStatement	for ( UInt segIdx = 0 ; segIdx != _cells [ cellIdx ] . size ( ) ; ++ segIdx )
>7252	CompoundStatement	 
>7253	IfStatement	if ( ( age > maxAge ) && ( seg . nConnected ( ) < _activationThreshold ) )
>7254	CompoundStatement	 
>7255	ExpressionStatement	 
>7256	IncDecOp	nSegsRemoved ++
>7257	IncDec	++
>7258	Identifier	nSegsRemoved
>7259	ExpressionStatement	 
>7260	CallExpression	_cells [ cellIdx ] . releaseSegment ( segIdx )
>7261	ArgumentList	segIdx
>7262	Argument	segIdx
>7263	Identifier	segIdx
>7264	Callee	_cells [ cellIdx ] . releaseSegment
>7265	MemberAccess	_cells [ cellIdx ] . releaseSegment
>7266	Identifier	releaseSegment
>7267	ArrayIndexing	_cells [ cellIdx ]
>7268	Identifier	cellIdx
>7269	Identifier	_cells
>7270	ExpressionStatement	 
>7271	CallExpression	eraseOutSynapses ( cellIdx , segIdx , removedSynapses )
>7272	ArgumentList	cellIdx
>7273	Argument	removedSynapses
>7274	Identifier	removedSynapses
>7275	Argument	segIdx
>7276	Identifier	segIdx
>7277	Argument	cellIdx
>7278	Identifier	cellIdx
>7279	Callee	eraseOutSynapses
>7280	Identifier	eraseOutSynapses
>7281	ForStatement	for ( UInt i = 0 ; i != seg . size ( ) ; ++ i )
>7282	ExpressionStatement	 
>7283	CallExpression	removedSynapses . push_back ( seg [ i ] . srcCellIdx ( ) )
>7284	ArgumentList	seg [ i ] . srcCellIdx ( )
>7285	Argument	seg [ i ] . srcCellIdx ( )
>7286	CallExpression	seg [ i ] . srcCellIdx ( )
>7287	ArgumentList	 
>7288	Callee	seg [ i ] . srcCellIdx
>7289	MemberAccess	seg [ i ] . srcCellIdx
>7290	Identifier	srcCellIdx
>7291	ArrayIndexing	seg [ i ]
>7292	Identifier	i
>7293	Identifier	seg
>7294	Callee	removedSynapses . push_back
>7295	MemberAccess	removedSynapses . push_back
>7296	Identifier	push_back
>7297	Identifier	removedSynapses
>7298	UnaryExpression	 
>7299	Identifier	i
>7300	IncDec	++
>7301	Condition	 
>7302	EqualityExpression	i != seg . size ( )
>7303	CallExpression	seg . size ( )
>7304	ArgumentList	 
>7305	Callee	seg . size
>7306	MemberAccess	seg . size
>7307	Identifier	size
>7308	Identifier	seg
>7309	Identifier	i
>7310	ForInit	 
>7311	IdentifierDeclStatement	UInt i = 0 ;
>7312	IdentifierDecl	i = 0
>7313	AssignmentExpr	i = 0
>7314	PrimaryExpression	0
>7315	Identifier	i
>7316	Identifier	i
>7317	IdentifierDeclType	UInt
>7318	ExpressionStatement	 
>7319	CallExpression	removedSynapses . clear ( )
>7320	ArgumentList	 
>7321	Callee	removedSynapses . clear
>7322	MemberAccess	removedSynapses . clear
>7323	Identifier	clear
>7324	Identifier	removedSynapses
>7325	IdentifierDeclStatement	 
>7326	IdentifierDecl	removedSynapses
>7327	Identifier	removedSynapses
>7328	IdentifierDeclType	std 
>7329	Statement	 
>7330	Condition	 
>7331	AndExpression	( age > maxAge ) && ( seg . nConnected ( ) < _activationThreshold )
>7332	RelationalExpression	seg . nConnected ( ) < _activationThreshold
>7333	Identifier	_activationThreshold
>7334	CallExpression	seg . nConnected ( )
>7335	ArgumentList	 
>7336	Callee	seg . nConnected
>7337	MemberAccess	seg . nConnected
>7338	Identifier	nConnected
>7339	Identifier	seg
>7340	RelationalExpression	age > maxAge
>7341	Identifier	maxAge
>7342	Identifier	age
>7343	IdentifierDeclStatement	 
>7344	IdentifierDecl	age = _nLrnIterations - seg . _lastActiveIteration
>7345	AssignmentExpr	age = _nLrnIterations - seg . _lastActiveIteration
>7346	AdditiveExpression	_nLrnIterations - seg . _lastActiveIteration
>7347	MemberAccess	seg . _lastActiveIteration
>7348	Identifier	_lastActiveIteration
>7349	Identifier	seg
>7350	Identifier	_nLrnIterations
>7351	Identifier	age
>7352	Identifier	age
>7353	IdentifierDeclType	UInt
>7354	IdentifierDeclStatement	 
>7355	IdentifierDecl	& seg = segment ( cellIdx , segIdx )
>7356	AssignmentExpr	& seg = segment ( cellIdx , segIdx )
>7357	CallExpression	segment ( cellIdx , segIdx )
>7358	ArgumentList	cellIdx
>7359	Argument	segIdx
>7360	Identifier	segIdx
>7361	Argument	cellIdx
>7362	Identifier	cellIdx
>7363	Callee	segment
>7364	Identifier	segment
>7365	Identifier	seg
>7366	Identifier	seg
>7367	IdentifierDeclType	Segment &
>7368	UnaryExpression	 
>7369	Identifier	segIdx
>7370	IncDec	++
>7371	Condition	 
>7372	EqualityExpression	segIdx != _cells [ cellIdx ] . size ( )
>7373	CallExpression	_cells [ cellIdx ] . size ( )
>7374	ArgumentList	 
>7375	Callee	_cells [ cellIdx ] . size
>7376	MemberAccess	_cells [ cellIdx ] . size
>7377	Identifier	size
>7378	ArrayIndexing	_cells [ cellIdx ]
>7379	Identifier	cellIdx
>7380	Identifier	_cells
>7381	Identifier	segIdx
>7382	ForInit	 
>7383	IdentifierDeclStatement	UInt segIdx = 0 ;
>7384	IdentifierDecl	segIdx = 0
>7385	AssignmentExpr	segIdx = 0
>7386	PrimaryExpression	0
>7387	Identifier	segIdx
>7388	Identifier	segIdx
>7389	IdentifierDeclType	UInt
>7390	UnaryExpression	 
>7391	Identifier	cellIdx
>7392	IncDec	++
>7393	Condition	 
>7394	EqualityExpression	cellIdx != _nCells
>7395	Identifier	_nCells
>7396	Identifier	cellIdx
>7397	ForInit	 
>7398	IdentifierDeclStatement	UInt cellIdx = 0 ;
>7399	IdentifierDecl	cellIdx = 0
>7400	AssignmentExpr	cellIdx = 0
>7401	PrimaryExpression	0
>7402	Identifier	cellIdx
>7403	Identifier	cellIdx
>7404	IdentifierDeclType	UInt
>7405	IdentifierDeclStatement	 
>7406	IdentifierDecl	nSegsRemoved = 0
>7407	AssignmentExpr	nSegsRemoved = 0
>7408	PrimaryExpression	0
>7409	Identifier	nSegsRemoved
>7410	Identifier	nSegsRemoved
>7411	IdentifierDeclType	UInt
>7438	FunctionDef	Cells4 
>7439	ParameterList	 
>7440	ReturnType	void
>7441	CompoundStatement	 
>7442	ForStatement	for ( UInt dstCellIdx = 0 ; dstCellIdx != _nCells ; ++ dstCellIdx )
>7443	CompoundStatement	 
>7444	ForStatement	for ( UInt segIdx = 0 ; segIdx != _cells [ dstCellIdx ] . size ( ) ; ++ segIdx )
>7445	CompoundStatement	 
>7446	ForStatement	for ( UInt synIdx = 0 ; synIdx != seg . size ( ) ; ++ synIdx )
>7447	CompoundStatement	 
>7448	ExpressionStatement	 
>7449	CallExpression	_outSynapses [ srcCellIdx ] . push_back ( newOutSyn )
>7450	ArgumentList	newOutSyn
>7451	Argument	newOutSyn
>7452	Identifier	newOutSyn
>7453	Callee	_outSynapses [ srcCellIdx ] . push_back
>7454	MemberAccess	_outSynapses [ srcCellIdx ] . push_back
>7455	Identifier	push_back
>7456	ArrayIndexing	_outSynapses [ srcCellIdx ]
>7457	Identifier	srcCellIdx
>7458	Identifier	_outSynapses
>7459	IdentifierDeclStatement	 
>7460	IdentifierDecl	newOutSyn ( dstCellIdx , segIdx )
>7461	Expression	dstCellIdx , segIdx
>7462	Identifier	segIdx
>7463	Identifier	dstCellIdx
>7464	Identifier	newOutSyn
>7465	IdentifierDeclType	OutSynapse
>7466	IdentifierDeclStatement	 
>7467	IdentifierDecl	srcCellIdx = seg . getSrcCellIdx ( synIdx )
>7468	AssignmentExpr	srcCellIdx = seg . getSrcCellIdx ( synIdx )
>7469	CallExpression	seg . getSrcCellIdx ( synIdx )
>7470	ArgumentList	synIdx
>7471	Argument	synIdx
>7472	Identifier	synIdx
>7473	Callee	seg . getSrcCellIdx
>7474	MemberAccess	seg . getSrcCellIdx
>7475	Identifier	getSrcCellIdx
>7476	Identifier	seg
>7477	Identifier	srcCellIdx
>7478	Identifier	srcCellIdx
>7479	IdentifierDeclType	UInt
>7480	UnaryExpression	 
>7481	Identifier	synIdx
>7482	IncDec	++
>7483	Condition	 
>7484	EqualityExpression	synIdx != seg . size ( )
>7485	CallExpression	seg . size ( )
>7486	ArgumentList	 
>7487	Callee	seg . size
>7488	MemberAccess	seg . size
>7489	Identifier	size
>7490	Identifier	seg
>7491	Identifier	synIdx
>7492	ForInit	 
>7493	IdentifierDeclStatement	UInt synIdx = 0 ;
>7494	IdentifierDecl	synIdx = 0
>7495	AssignmentExpr	synIdx = 0
>7496	PrimaryExpression	0
>7497	Identifier	synIdx
>7498	Identifier	synIdx
>7499	IdentifierDeclType	UInt
>7500	IdentifierDeclStatement	 
>7501	IdentifierDecl	& seg = _cells [ dstCellIdx ] [ segIdx ]
>7502	AssignmentExpr	& seg = _cells [ dstCellIdx ] [ segIdx ]
>7503	ArrayIndexing	_cells [ dstCellIdx ] [ segIdx ]
>7504	Identifier	segIdx
>7505	ArrayIndexing	_cells [ dstCellIdx ]
>7506	Identifier	dstCellIdx
>7507	Identifier	_cells
>7508	Identifier	seg
>7509	Identifier	seg
>7510	IdentifierDeclType	const Segment &
>7511	UnaryExpression	 
>7512	Identifier	segIdx
>7513	IncDec	++
>7514	Condition	 
>7515	EqualityExpression	segIdx != _cells [ dstCellIdx ] . size ( )
>7516	CallExpression	_cells [ dstCellIdx ] . size ( )
>7517	ArgumentList	 
>7518	Callee	_cells [ dstCellIdx ] . size
>7519	MemberAccess	_cells [ dstCellIdx ] . size
>7520	Identifier	size
>7521	ArrayIndexing	_cells [ dstCellIdx ]
>7522	Identifier	dstCellIdx
>7523	Identifier	_cells
>7524	Identifier	segIdx
>7525	ForInit	 
>7526	IdentifierDeclStatement	UInt segIdx = 0 ;
>7527	IdentifierDecl	segIdx = 0
>7528	AssignmentExpr	segIdx = 0
>7529	PrimaryExpression	0
>7530	Identifier	segIdx
>7531	Identifier	segIdx
>7532	IdentifierDeclType	UInt
>7533	UnaryExpression	 
>7534	Identifier	dstCellIdx
>7535	IncDec	++
>7536	Condition	 
>7537	EqualityExpression	dstCellIdx != _nCells
>7538	Identifier	_nCells
>7539	Identifier	dstCellIdx
>7540	ForInit	 
>7541	IdentifierDeclStatement	UInt dstCellIdx = 0 ;
>7542	IdentifierDecl	dstCellIdx = 0
>7543	AssignmentExpr	dstCellIdx = 0
>7544	PrimaryExpression	0
>7545	Identifier	dstCellIdx
>7546	Identifier	dstCellIdx
>7547	IdentifierDeclType	UInt
>7548	ForStatement	for ( UInt srcCellIdx = 0 ; srcCellIdx != _nCells ; ++ srcCellIdx )
>7549	CompoundStatement	 
>7550	ExpressionStatement	 
>7551	CallExpression	_outSynapses [ srcCellIdx ] . clear ( )
>7552	ArgumentList	 
>7553	Callee	_outSynapses [ srcCellIdx ] . clear
>7554	MemberAccess	_outSynapses [ srcCellIdx ] . clear
>7555	Identifier	clear
>7556	ArrayIndexing	_outSynapses [ srcCellIdx ]
>7557	Identifier	srcCellIdx
>7558	Identifier	_outSynapses
>7559	UnaryExpression	 
>7560	Identifier	srcCellIdx
>7561	IncDec	++
>7562	Condition	 
>7563	EqualityExpression	srcCellIdx != _nCells
>7564	Identifier	_nCells
>7565	Identifier	srcCellIdx
>7566	ForInit	 
>7567	IdentifierDeclStatement	UInt srcCellIdx = 0 ;
>7568	IdentifierDecl	srcCellIdx = 0
>7569	AssignmentExpr	srcCellIdx = 0
>7570	PrimaryExpression	0
>7571	Identifier	srcCellIdx
>7572	Identifier	srcCellIdx
>7573	IdentifierDeclType	UInt
>7574	ExpressionStatement	 
>7575	CallExpression	_outSynapses . resize ( _nCells )
>7576	ArgumentList	_nCells
>7577	Argument	_nCells
>7578	Identifier	_nCells
>7579	Callee	_outSynapses . resize
>7580	MemberAccess	_outSynapses . resize
>7581	Identifier	resize
>7582	Identifier	_outSynapses
>7605	FunctionDef	Cells4 
>7606	ParameterList	 
>7607	ReturnType	void
>7608	CompoundStatement	 
>7609	ExpressionStatement	 
>7610	CallExpression	_prevLrnPatterns . clear ( )
>7611	ArgumentList	 
>7612	Callee	_prevLrnPatterns . clear
>7613	MemberAccess	_prevLrnPatterns . clear
>7614	Identifier	clear
>7615	Identifier	_prevLrnPatterns
>7616	ExpressionStatement	 
>7617	CallExpression	_prevInfPatterns . clear ( )
>7618	ArgumentList	 
>7619	Callee	_prevInfPatterns . clear
>7620	MemberAccess	_prevInfPatterns . clear
>7621	Identifier	clear
>7622	Identifier	_prevInfPatterns
>7623	ExpressionStatement	 
>7624	AssignmentExpr	_resetCalled = true
>7625	Identifier	true
>7626	Identifier	_resetCalled
>7627	ExpressionStatement	 
>7628	CallExpression	_segmentUpdates . clear ( )
>7629	ArgumentList	 
>7630	Callee	_segmentUpdates . clear
>7631	MemberAccess	_segmentUpdates . clear
>7632	Identifier	clear
>7633	Identifier	_segmentUpdates
>7634	ExpressionStatement	 
>7635	CallExpression	memset ( _colConfidenceT1 , 0 , _nColumns * sizeof ( _colConfidenceT1 [ 0 ] ) )
>7636	ArgumentList	_colConfidenceT1
>7637	Argument	_nColumns * sizeof ( _colConfidenceT1 [ 0 ] )
>7638	MultiplicativeExpression	_nColumns * sizeof ( _colConfidenceT1 [ 0 ] )
>7639	SizeofExpr	sizeof ( _colConfidenceT1 [ 0 ] )
>7640	ArrayIndexing	_colConfidenceT1 [ 0 ]
>7641	PrimaryExpression	0
>7642	Identifier	_colConfidenceT1
>7643	Sizeof	sizeof
>7644	Identifier	_nColumns
>7645	Argument	0
>7646	PrimaryExpression	0
>7647	Argument	_colConfidenceT1
>7648	Identifier	_colConfidenceT1
>7649	Callee	memset
>7650	Identifier	memset
>7651	ExpressionStatement	 
>7652	CallExpression	memset ( _colConfidenceT , 0 , _nColumns * sizeof ( _colConfidenceT [ 0 ] ) )
>7653	ArgumentList	_colConfidenceT
>7654	Argument	_nColumns * sizeof ( _colConfidenceT [ 0 ] )
>7655	MultiplicativeExpression	_nColumns * sizeof ( _colConfidenceT [ 0 ] )
>7656	SizeofExpr	sizeof ( _colConfidenceT [ 0 ] )
>7657	ArrayIndexing	_colConfidenceT [ 0 ]
>7658	PrimaryExpression	0
>7659	Identifier	_colConfidenceT
>7660	Sizeof	sizeof
>7661	Identifier	_nColumns
>7662	Argument	0
>7663	PrimaryExpression	0
>7664	Argument	_colConfidenceT
>7665	Identifier	_colConfidenceT
>7666	Callee	memset
>7667	Identifier	memset
>7668	ExpressionStatement	 
>7669	CallExpression	memset ( _cellConfidenceT1 , 0 , _nCells * sizeof ( _cellConfidenceT1 [ 0 ] ) )
>7670	ArgumentList	_cellConfidenceT1
>7671	Argument	_nCells * sizeof ( _cellConfidenceT1 [ 0 ] )
>7672	MultiplicativeExpression	_nCells * sizeof ( _cellConfidenceT1 [ 0 ] )
>7673	SizeofExpr	sizeof ( _cellConfidenceT1 [ 0 ] )
>7674	ArrayIndexing	_cellConfidenceT1 [ 0 ]
>7675	PrimaryExpression	0
>7676	Identifier	_cellConfidenceT1
>7677	Sizeof	sizeof
>7678	Identifier	_nCells
>7679	Argument	0
>7680	PrimaryExpression	0
>7681	Argument	_cellConfidenceT1
>7682	Identifier	_cellConfidenceT1
>7683	Callee	memset
>7684	Identifier	memset
>7685	ExpressionStatement	 
>7686	CallExpression	memset ( _cellConfidenceT , 0 , _nCells * sizeof ( _cellConfidenceT [ 0 ] ) )
>7687	ArgumentList	_cellConfidenceT
>7688	Argument	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>7689	MultiplicativeExpression	_nCells * sizeof ( _cellConfidenceT [ 0 ] )
>7690	SizeofExpr	sizeof ( _cellConfidenceT [ 0 ] )
>7691	ArrayIndexing	_cellConfidenceT [ 0 ]
>7692	PrimaryExpression	0
>7693	Identifier	_cellConfidenceT
>7694	Sizeof	sizeof
>7695	Identifier	_nCells
>7696	Argument	0
>7697	PrimaryExpression	0
>7698	Argument	_cellConfidenceT
>7699	Identifier	_cellConfidenceT
>7700	Callee	memset
>7701	Identifier	memset
>7702	ExpressionStatement	 
>7703	CallExpression	_learnPredictedStateT1 . resetAll ( )
>7704	ArgumentList	 
>7705	Callee	_learnPredictedStateT1 . resetAll
>7706	MemberAccess	_learnPredictedStateT1 . resetAll
>7707	Identifier	resetAll
>7708	Identifier	_learnPredictedStateT1
>7709	ExpressionStatement	 
>7710	CallExpression	_learnPredictedStateT . resetAll ( )
>7711	ArgumentList	 
>7712	Callee	_learnPredictedStateT . resetAll
>7713	MemberAccess	_learnPredictedStateT . resetAll
>7714	Identifier	resetAll
>7715	Identifier	_learnPredictedStateT
>7716	ExpressionStatement	 
>7717	CallExpression	_learnActiveStateT1 . resetAll ( )
>7718	ArgumentList	 
>7719	Callee	_learnActiveStateT1 . resetAll
>7720	MemberAccess	_learnActiveStateT1 . resetAll
>7721	Identifier	resetAll
>7722	Identifier	_learnActiveStateT1
>7723	ExpressionStatement	 
>7724	CallExpression	_learnActiveStateT . resetAll ( )
>7725	ArgumentList	 
>7726	Callee	_learnActiveStateT . resetAll
>7727	MemberAccess	_learnActiveStateT . resetAll
>7728	Identifier	resetAll
>7729	Identifier	_learnActiveStateT
>7730	ExpressionStatement	 
>7731	CallExpression	_infPredictedStateT1 . resetAll ( )
>7732	ArgumentList	 
>7733	Callee	_infPredictedStateT1 . resetAll
>7734	MemberAccess	_infPredictedStateT1 . resetAll
>7735	Identifier	resetAll
>7736	Identifier	_infPredictedStateT1
>7737	ExpressionStatement	 
>7738	CallExpression	_infPredictedStateT . resetAll ( )
>7739	ArgumentList	 
>7740	Callee	_infPredictedStateT . resetAll
>7741	MemberAccess	_infPredictedStateT . resetAll
>7742	Identifier	resetAll
>7743	Identifier	_infPredictedStateT
>7744	ExpressionStatement	 
>7745	CallExpression	_infActiveStateT1 . resetAll ( )
>7746	ArgumentList	 
>7747	Callee	_infActiveStateT1 . resetAll
>7748	MemberAccess	_infActiveStateT1 . resetAll
>7749	Identifier	resetAll
>7750	Identifier	_infActiveStateT1
>7751	ExpressionStatement	 
>7752	CallExpression	_infActiveStateT . resetAll ( )
>7753	ArgumentList	 
>7754	Callee	_infActiveStateT . resetAll
>7755	MemberAccess	_infActiveStateT . resetAll
>7756	Identifier	resetAll
>7757	Identifier	_infActiveStateT
>7758	IfStatement	if ( _verbosity >= 3 )
>7759	CompoundStatement	 
>7760	ExpressionStatement	 
>7761	ShiftExpression	std 
>7762	PrimaryExpression	\"\n==== RESET =====\n\"
>7763	Identifier	std 
>7764	Condition	 
>7765	RelationalExpression	_verbosity >= 3
>7766	PrimaryExpression	3
>7767	Identifier	_verbosity
>7795	FunctionDef	Cells4 
>7796	ParameterList	std 
>7797	Parameter	 
>7798	Identifier	outStream
>7799	ParameterType	std 
>7800	ReturnType	void
>7801	CompoundStatement	 
>7802	ExpressionStatement	 
>7803	ShiftExpression	outStream << \" out \"
>7804	PrimaryExpression	\" out \"
>7805	Identifier	outStream
>7806	ForStatement	for ( UInt i = 0 ; i != _nCells ; ++ i )
>7807	CompoundStatement	 
>7808	ExpressionStatement	 
>7809	ShiftExpression	outStream << std 
>7810	Identifier	std 
>7811	Identifier	outStream
>7812	ExpressionStatement	 
>7813	CallExpression	_cells [ i ] . save ( outStream )
>7814	ArgumentList	outStream
>7815	Argument	outStream
>7816	Identifier	outStream
>7817	Callee	_cells [ i ] . save
>7818	MemberAccess	_cells [ i ] . save
>7819	Identifier	save
>7820	ArrayIndexing	_cells [ i ]
>7821	Identifier	i
>7822	Identifier	_cells
>7823	UnaryExpression	 
>7824	Identifier	i
>7825	IncDec	++
>7826	Condition	 
>7827	EqualityExpression	i != _nCells
>7828	Identifier	_nCells
>7829	Identifier	i
>7830	ForInit	 
>7831	IdentifierDeclStatement	UInt i = 0 ;
>7832	IdentifierDecl	i = 0
>7833	AssignmentExpr	i = 0
>7834	PrimaryExpression	0
>7835	Identifier	i
>7836	Identifier	i
>7837	IdentifierDeclType	UInt
>7838	ExpressionStatement	 
>7839	CallExpression	NTA_CHECK ( _nCells == _cells . size ( ) )
>7840	ArgumentList	_nCells == _cells . size ( )
>7841	Argument	_nCells == _cells . size ( )
>7842	EqualityExpression	_nCells == _cells . size ( )
>7843	CallExpression	_cells . size ( )
>7844	ArgumentList	 
>7845	Callee	_cells . size
>7846	MemberAccess	_cells . size
>7847	Identifier	size
>7848	Identifier	_cells
>7849	Identifier	_nCells
>7850	Callee	NTA_CHECK
>7851	Identifier	NTA_CHECK
>7852	ForStatement	for ( UInt i = 0 ; i < _segmentUpdates . size ( ) ; ++ i )
>7853	CompoundStatement	 
>7854	ExpressionStatement	 
>7855	CallExpression	_segmentUpdates [ i ] . save ( outStream )
>7856	ArgumentList	outStream
>7857	Argument	outStream
>7858	Identifier	outStream
>7859	Callee	_segmentUpdates [ i ] . save
>7860	MemberAccess	_segmentUpdates [ i ] . save
>7861	Identifier	save
>7862	ArrayIndexing	_segmentUpdates [ i ]
>7863	Identifier	i
>7864	Identifier	_segmentUpdates
>7865	UnaryExpression	 
>7866	Identifier	i
>7867	IncDec	++
>7868	Condition	 
>7869	RelationalExpression	i < _segmentUpdates . size ( )
>7870	CallExpression	_segmentUpdates . size ( )
>7871	ArgumentList	 
>7872	Callee	_segmentUpdates . size
>7873	MemberAccess	_segmentUpdates . size
>7874	Identifier	size
>7875	Identifier	_segmentUpdates
>7876	Identifier	i
>7877	ForInit	 
>7878	IdentifierDeclStatement	UInt i = 0 ;
>7879	IdentifierDecl	i = 0
>7880	AssignmentExpr	i = 0
>7881	PrimaryExpression	0
>7882	Identifier	i
>7883	Identifier	i
>7884	IdentifierDeclType	UInt
>7885	ExpressionStatement	 
>7886	ShiftExpression	outStream << _segmentUpdates . size ( ) << \" \"
>7887	ShiftExpression	_segmentUpdates . size ( ) << \" \"
>7888	PrimaryExpression	\" \"
>7889	CallExpression	_segmentUpdates . size ( )
>7890	ArgumentList	 
>7891	Callee	_segmentUpdates . size
>7892	MemberAccess	_segmentUpdates . size
>7893	Identifier	size
>7894	Identifier	_segmentUpdates
>7895	Identifier	outStream
>7896	ExpressionStatement	 
>7897	ShiftExpression	outStream << _learnActiveStateT << \" \" << _learnActiveStateT1 << \" \" << _learnPredictedStateT << \" \" << _\
>7898	ShiftExpression	_learnActiveStateT << \" \" << _learnActiveStateT1 << \" \" << _learnPredictedStateT << \" \" << _learnPredictedStateT1 << \
>7899	ShiftExpression	\" \" << _learnActiveStateT1 << \" \" << _learnPredictedStateT << \" \" << _learnPredictedStateT1 << std 
>7900	ShiftExpression	_learnActiveStateT1 << \" \" << _learnPredictedStateT << \" \" << _learnPredictedStateT1 << std 
>7901	ShiftExpression	\" \" << _learnPredictedStateT << \" \" << _learnPredictedStateT1 << std 
>7902	ShiftExpression	_learnPredictedStateT << \" \" << _learnPredictedStateT1 << std 
>7903	ShiftExpression	\" \" << _learnPredictedStateT1 << std 
>7904	ShiftExpression	_learnPredictedStateT1 << std 
>7905	Identifier	std 
>7906	Identifier	_learnPredictedStateT1
>7907	PrimaryExpression	\" \"
>7908	Identifier	_learnPredictedStateT
>7909	PrimaryExpression	\" \"
>7910	Identifier	_learnActiveStateT1
>7911	PrimaryExpression	\" \"
>7912	Identifier	_learnActiveStateT
>7913	Identifier	outStream
>7914	ExpressionStatement	 
>7915	ShiftExpression	outStream << _learnedSeqLength << \" \" << _verbosity << \" \" << _checkSynapseConsistency << \" \" << _resetCalled << \
>7916	ShiftExpression	_learnedSeqLength << \" \" << _verbosity << \" \" << _checkSynapseConsistency << \" \" << _resetCalled << \
>7917	ShiftExpression	\" \" << _verbosity << \" \" << _checkSynapseConsistency << \" \" << _resetCalled << std 
>7918	ShiftExpression	_verbosity << \" \" << _checkSynapseConsistency << \" \" << _resetCalled << std 
>7919	ShiftExpression	\" \" << _checkSynapseConsistency << \" \" << _resetCalled << std 
>7920	ShiftExpression	_checkSynapseConsistency << \" \" << _resetCalled << std 
>7921	ShiftExpression	\" \" << _resetCalled << std 
>7922	ShiftExpression	_resetCalled << std 
>7923	Identifier	std 
>7924	Identifier	_resetCalled
>7925	PrimaryExpression	\" \"
>7926	Identifier	_checkSynapseConsistency
>7927	PrimaryExpression	\" \"
>7928	Identifier	_verbosity
>7929	PrimaryExpression	\" \"
>7930	Identifier	_learnedSeqLength
>7931	Identifier	outStream
>7932	ExpressionStatement	 
>7933	ShiftExpression	outStream << version ( ) << \" \" << _ownsMemory << \" \" << _rng << \" \" << _nColumns << \" \" << _nCellsPerCol << \" \" << _\
>7934	ShiftExpression	version ( ) << \" \" << _ownsMemory << \" \" << _rng << \" \" << _nColumns << \" \" << _nCellsPerCol << \" \" << _\
>7935	ShiftExpression	\" \" << _ownsMemory << \" \" << _rng << \" \" << _nColumns << \" \" << _nCellsPerCol << \" \" << _activationThreshold << \" \" << _\
>7936	ShiftExpression	_ownsMemory << \" \" << _rng << \" \" << _nColumns << \" \" << _nCellsPerCol << \" \" << _activationThreshold << \" \" << _\
>7937	ShiftExpression	\" \" << _rng << \" \" << _nColumns << \" \" << _nCellsPerCol << \" \" << _activationThreshold << \" \" << _minThreshold << \" \" << _\
>7938	ShiftExpression	_rng << \" \" << _nColumns << \" \" << _nCellsPerCol << \" \" << _activationThreshold << \" \" << _minThreshold << \" \" << _\
>7939	ShiftExpression	\" \" << _nColumns << \" \" << _nCellsPerCol << \" \" << _activationThreshold << \" \" << _minThreshold << \" \" << _\
>7940	ShiftExpression	_nColumns << \" \" << _nCellsPerCol << \" \" << _activationThreshold << \" \" << _minThreshold << \" \" << _\
>7941	ShiftExpression	\" \" << _nCellsPerCol << \" \" << _activationThreshold << \" \" << _minThreshold << \" \" << _newSynapseCount << \" \" << _\
>7942	ShiftExpression	_nCellsPerCol << \" \" << _activationThreshold << \" \" << _minThreshold << \" \" << _newSynapseCount << \" \" << _\
>7943	ShiftExpression	\" \" << _activationThreshold << \" \" << _minThreshold << \" \" << _newSynapseCount << \" \" << _nIterations << \" \" << _\
>7944	ShiftExpression	_activationThreshold << \" \" << _minThreshold << \" \" << _newSynapseCount << \" \" << _nIterations << \" \" << _\
>7945	ShiftExpression	\" \" << _minThreshold << \" \" << _newSynapseCount << \" \" << _nIterations << \" \" << _segUpdateValidDuration << \" \" << _\
>7946	ShiftExpression	_minThreshold << \" \" << _newSynapseCount << \" \" << _nIterations << \" \" << _segUpdateValidDuration << \" \" << _\
>7947	ShiftExpression	\" \" << _newSynapseCount << \" \" << _nIterations << \" \" << _segUpdateValidDuration << \" \" << _initSegFreq << \" \" << _\
>7948	ShiftExpression	_newSynapseCount << \" \" << _nIterations << \" \" << _segUpdateValidDuration << \" \" << _initSegFreq << \" \" << _\
>7949	ShiftExpression	\" \" << _nIterations << \" \" << _segUpdateValidDuration << \" \" << _initSegFreq << \" \" << _permInitial << \" \" << _\
>7950	ShiftExpression	_nIterations << \" \" << _segUpdateValidDuration << \" \" << _initSegFreq << \" \" << _permInitial << \" \" << _\
>7951	ShiftExpression	\" \" << _segUpdateValidDuration << \" \" << _initSegFreq << \" \" << _permInitial << \" \" << _permConnected << \" \" << _\
>7952	ShiftExpression	_segUpdateValidDuration << \" \" << _initSegFreq << \" \" << _permInitial << \" \" << _permConnected << \" \" << _\
>7953	ShiftExpression	\" \" << _initSegFreq << \" \" << _permInitial << \" \" << _permConnected << \" \" << _permMax << \" \" << _permDec << \" \" << _\
>7954	ShiftExpression	_initSegFreq << \" \" << _permInitial << \" \" << _permConnected << \" \" << _permMax << \" \" << _permDec << \" \" << _\
>7955	ShiftExpression	\" \" << _permInitial << \" \" << _permConnected << \" \" << _permMax << \" \" << _permDec << \" \" << _permInc << \" \" << _\
>7956	ShiftExpression	_permInitial << \" \" << _permConnected << \" \" << _permMax << \" \" << _permDec << \" \" << _permInc << \" \" << _\
>7957	ShiftExpression	\" \" << _permConnected << \" \" << _permMax << \" \" << _permDec << \" \" << _permInc << \" \" << _globalDecay << \" \" << _\
>7958	ShiftExpression	_permConnected << \" \" << _permMax << \" \" << _permDec << \" \" << _permInc << \" \" << _globalDecay << \" \" << _\
>7959	ShiftExpression	\" \" << _permMax << \" \" << _permDec << \" \" << _permInc << \" \" << _globalDecay << \" \" << _doPooling << \" \" << _\
>7960	ShiftExpression	_permMax << \" \" << _permDec << \" \" << _permInc << \" \" << _globalDecay << \" \" << _doPooling << \" \" << _\
>7961	ShiftExpression	\" \" << _permDec << \" \" << _permInc << \" \" << _globalDecay << \" \" << _doPooling << \" \" << _maxInfBacktrack << \" \" << _\
>7962	ShiftExpression	_permDec << \" \" << _permInc << \" \" << _globalDecay << \" \" << _doPooling << \" \" << _maxInfBacktrack << \" \" << _\
>7963	ShiftExpression	\" \" << _permInc << \" \" << _globalDecay << \" \" << _doPooling << \" \" << _maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _\
>7964	ShiftExpression	_permInc << \" \" << _globalDecay << \" \" << _doPooling << \" \" << _maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _\
>7965	ShiftExpression	\" \" << _globalDecay << \" \" << _doPooling << \" \" << _maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _\
>7966	ShiftExpression	_globalDecay << \" \" << _doPooling << \" \" << _maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _pamLength << \" \" << _\
>7967	ShiftExpression	\" \" << _doPooling << \" \" << _maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _pamLength << \" \" << _\
>7968	ShiftExpression	_doPooling << \" \" << _maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _pamLength << \" \" << _maxAge << \" \" << _\
>7969	ShiftExpression	\" \" << _maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _pamLength << \" \" << _maxAge << \" \" << _\
>7970	ShiftExpression	_maxInfBacktrack << \" \" << _maxLrnBacktrack << \" \" << _pamLength << \" \" << _maxAge << \" \" << _avgInputDensity << \" \" << _\
>7971	ShiftExpression	\" \" << _maxLrnBacktrack << \" \" << _pamLength << \" \" << _maxAge << \" \" << _avgInputDensity << \" \" << _\
>7972	ShiftExpression	_maxLrnBacktrack << \" \" << _pamLength << \" \" << _maxAge << \" \" << _avgInputDensity << \" \" << _pamCounter << \" \" << _\
>7973	ShiftExpression	\" \" << _pamLength << \" \" << _maxAge << \" \" << _avgInputDensity << \" \" << _pamCounter << \" \" << _maxSeqLength << \" \" << _\
>7974	ShiftExpression	_pamLength << \" \" << _maxAge << \" \" << _avgInputDensity << \" \" << _pamCounter << \" \" << _maxSeqLength << \" \" << _\
>7975	ShiftExpression	\" \" << _maxAge << \" \" << _avgInputDensity << \" \" << _pamCounter << \" \" << _maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _\
>7976	ShiftExpression	_maxAge << \" \" << _avgInputDensity << \" \" << _pamCounter << \" \" << _maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _\
>7977	ShiftExpression	\" \" << _avgInputDensity << \" \" << _pamCounter << \" \" << _maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _\
>7978	ShiftExpression	_avgInputDensity << \" \" << _pamCounter << \" \" << _maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _\
>7979	ShiftExpression	\" \" << _pamCounter << \" \" << _maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _nLrnIterations << \" \" << _\
>7980	ShiftExpression	_pamCounter << \" \" << _maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _nLrnIterations << \" \" << _\
>7981	ShiftExpression	\" \" << _maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _nLrnIterations << \" \" << _maxSegmentsPerCell << \" \" << _\
>7982	ShiftExpression	_maxSeqLength << \" \" << _avgLearnedSeqLength << \" \" << _nLrnIterations << \" \" << _maxSegmentsPerCell << \" \" << _\
>7983	ShiftExpression	\" \" << _avgLearnedSeqLength << \" \" << _nLrnIterations << \" \" << _maxSegmentsPerCell << \" \" << _maxSynapsesPerSegment << \" \" << \
>7984	ShiftExpression	_avgLearnedSeqLength << \" \" << _nLrnIterations << \" \" << _maxSegmentsPerCell << \" \" << _maxSynapsesPerSegment << \" \" << \
>7985	ShiftExpression	\" \" << _nLrnIterations << \" \" << _maxSegmentsPerCell << \" \" << _maxSynapsesPerSegment << \" \" << std 
>7986	ShiftExpression	_nLrnIterations << \" \" << _maxSegmentsPerCell << \" \" << _maxSynapsesPerSegment << \" \" << std 
>7987	ShiftExpression	\" \" << _maxSegmentsPerCell << \" \" << _maxSynapsesPerSegment << \" \" << std 
>7988	ShiftExpression	_maxSegmentsPerCell << \" \" << _maxSynapsesPerSegment << \" \" << std 
>7989	ShiftExpression	\" \" << _maxSynapsesPerSegment << \" \" << std 
>7990	ShiftExpression	_maxSynapsesPerSegment << \" \" << std 
>7991	ShiftExpression	\" \" << std 
>7992	Identifier	std 
>7993	PrimaryExpression	\" \"
>7994	Identifier	_maxSynapsesPerSegment
>7995	PrimaryExpression	\" \"
>7996	Identifier	_maxSegmentsPerCell
>7997	PrimaryExpression	\" \"
>7998	Identifier	_nLrnIterations
>7999	PrimaryExpression	\" \"
>8000	Identifier	_avgLearnedSeqLength
>8001	PrimaryExpression	\" \"
>8002	Identifier	_maxSeqLength
>8003	PrimaryExpression	\" \"
>8004	Identifier	_pamCounter
>8005	PrimaryExpression	\" \"
>8006	Identifier	_avgInputDensity
>8007	PrimaryExpression	\" \"
>8008	Identifier	_maxAge
>8009	PrimaryExpression	\" \"
>8010	Identifier	_pamLength
>8011	PrimaryExpression	\" \"
>8012	Identifier	_maxLrnBacktrack
>8013	PrimaryExpression	\" \"
>8014	Identifier	_maxInfBacktrack
>8015	PrimaryExpression	\" \"
>8016	Identifier	_doPooling
>8017	PrimaryExpression	\" \"
>8018	Identifier	_globalDecay
>8019	PrimaryExpression	\" \"
>8020	Identifier	_permInc
>8021	PrimaryExpression	\" \"
>8022	Identifier	_permDec
>8023	PrimaryExpression	\" \"
>8024	Identifier	_permMax
>8025	PrimaryExpression	\" \"
>8026	Identifier	_permConnected
>8027	PrimaryExpression	\" \"
>8028	Identifier	_permInitial
>8029	PrimaryExpression	\" \"
>8030	Identifier	_initSegFreq
>8031	PrimaryExpression	\" \"
>8032	Identifier	_segUpdateValidDuration
>8033	PrimaryExpression	\" \"
>8034	Identifier	_nIterations
>8035	PrimaryExpression	\" \"
>8036	Identifier	_newSynapseCount
>8037	PrimaryExpression	\" \"
>8038	Identifier	_minThreshold
>8039	PrimaryExpression	\" \"
>8040	Identifier	_activationThreshold
>8041	PrimaryExpression	\" \"
>8042	Identifier	_nCellsPerCol
>8043	PrimaryExpression	\" \"
>8044	Identifier	_nColumns
>8045	PrimaryExpression	\" \"
>8046	Identifier	_rng
>8047	PrimaryExpression	\" \"
>8048	Identifier	_ownsMemory
>8049	PrimaryExpression	\" \"
>8050	CallExpression	version ( )
>8051	ArgumentList	 
>8052	Callee	version
>8053	Identifier	version
>8054	Identifier	outStream
>8055	IfStatement	if ( _checkSynapseConsistency || ( _nCells * _maxSegmentsPerCell < 100000 ) )
>8056	CompoundStatement	 
>8057	ExpressionStatement	 
>8058	CallExpression	NTA_CHECK ( invariants ( true ) )
>8059	ArgumentList	invariants ( true )
>8060	Argument	invariants ( true )
>8061	CallExpression	invariants ( true )
>8062	ArgumentList	true
>8063	Argument	true
>8064	Identifier	true
>8065	Callee	invariants
>8066	Identifier	invariants
>8067	Callee	NTA_CHECK
>8068	Identifier	NTA_CHECK
>8069	Condition	 
>8070	OrExpression	_checkSynapseConsistency || ( _nCells * _maxSegmentsPerCell < 100000 )
>8071	RelationalExpression	_nCells * _maxSegmentsPerCell < 100000
>8072	PrimaryExpression	100000
>8073	MultiplicativeExpression	_nCells * _maxSegmentsPerCell
>8074	Identifier	_maxSegmentsPerCell
>8075	Identifier	_nCells
>8076	Identifier	_checkSynapseConsistency
>8094	FunctionDef	Cells4 
>8095	ParameterList	std 
>8096	Parameter	 
>8097	Identifier	filePath
>8098	ParameterType	std 
>8099	ReturnType	void
>8100	CompoundStatement	 
>8101	ExpressionStatement	 
>8102	CallExpression	save ( outStream )
>8103	ArgumentList	outStream
>8104	Argument	outStream
>8105	Identifier	outStream
>8106	Callee	save
>8107	Identifier	save
>8108	IdentifierDeclStatement	 
>8109	IdentifierDecl	outStream ( filePath . c_str ( ) , std 
>8110	Expression	filePath . c_str ( ) , std 
>8111	InclusiveOrExpression	std 
>8112	Identifier	std 
>8113	Identifier	std 
>8114	CallExpression	filePath . c_str ( )
>8115	ArgumentList	 
>8116	Callee	filePath . c_str
>8117	MemberAccess	filePath . c_str
>8118	Identifier	c_str
>8119	Identifier	filePath
>8120	Identifier	outStream
>8121	IdentifierDeclType	OFStream
>8127	FunctionDef	Cells4 
>8128	ParameterList	std 
>8129	Parameter	 
>8130	Identifier	filePath
>8131	ParameterType	std 
>8132	ReturnType	void
>8133	CompoundStatement	 
>8134	ExpressionStatement	 
>8135	CallExpression	load ( outStream )
>8136	ArgumentList	outStream
>8137	Argument	outStream
>8138	Identifier	outStream
>8139	Callee	load
>8140	Identifier	load
>8141	IdentifierDeclStatement	 
>8142	IdentifierDecl	outStream ( filePath . c_str ( ) , std 
>8143	Expression	filePath . c_str ( ) , std 
>8144	InclusiveOrExpression	std 
>8145	Identifier	std 
>8146	Identifier	std 
>8147	CallExpression	filePath . c_str ( )
>8148	ArgumentList	 
>8149	Callee	filePath . c_str
>8150	MemberAccess	filePath . c_str
>8151	Identifier	c_str
>8152	Identifier	filePath
>8153	Identifier	outStream
>8154	IdentifierDeclType	IFStream
>8160	FunctionDef	Cells4 
>8161	ParameterList	std 
>8162	Parameter	 
>8163	Identifier	inStream
>8164	ParameterType	std 
>8165	ReturnType	void
>8166	CompoundStatement	 
>8167	ExpressionStatement	 
>8168	AssignmentExpr	_version = VERSION
>8169	Identifier	VERSION
>8170	Identifier	_version
>8171	IfStatement	if ( _checkSynapseConsistency || ( _nCells * _maxSegmentsPerCell < 100000 ) )
>8172	CompoundStatement	 
>8173	ExpressionStatement	 
>8174	CallExpression	NTA_CHECK ( invariants ( true ) )
>8175	ArgumentList	invariants ( true )
>8176	Argument	invariants ( true )
>8177	CallExpression	invariants ( true )
>8178	ArgumentList	true
>8179	Argument	true
>8180	Identifier	true
>8181	Callee	invariants
>8182	Identifier	invariants
>8183	Callee	NTA_CHECK
>8184	Identifier	NTA_CHECK
>8185	Condition	 
>8186	OrExpression	_checkSynapseConsistency || ( _nCells * _maxSegmentsPerCell < 100000 )
>8187	RelationalExpression	_nCells * _maxSegmentsPerCell < 100000
>8188	PrimaryExpression	100000
>8189	MultiplicativeExpression	_nCells * _maxSegmentsPerCell
>8190	Identifier	_maxSegmentsPerCell
>8191	Identifier	_nCells
>8192	Identifier	_checkSynapseConsistency
>8193	ExpressionStatement	 
>8194	CallExpression	rebuildOutSynapses ( )
>8195	ArgumentList	 
>8196	Callee	rebuildOutSynapses
>8197	Identifier	rebuildOutSynapses
>8198	ExpressionStatement	 
>8199	CallExpression	NTA_CHECK ( marker == \"out\" )
>8200	ArgumentList	marker == \"out\"
>8201	Argument	marker == \"out\"
>8202	EqualityExpression	marker == \"out\"
>8203	PrimaryExpression	\"out\"
>8204	Identifier	marker
>8205	Callee	NTA_CHECK
>8206	Identifier	NTA_CHECK
>8207	ExpressionStatement	 
>8208	ShiftExpression	inStream >> marker
>8209	Identifier	marker
>8210	Identifier	inStream
>8211	IdentifierDeclStatement	 
>8212	IdentifierDecl	marker
>8213	Identifier	marker
>8214	IdentifierDeclType	std 
>8215	ForStatement	for ( UInt i = 0 ; i != _nCells ; ++ i )
>8216	CompoundStatement	 
>8217	ExpressionStatement	 
>8218	CallExpression	_cells [ i ] . load ( inStream )
>8219	ArgumentList	inStream
>8220	Argument	inStream
>8221	Identifier	inStream
>8222	Callee	_cells [ i ] . load
>8223	MemberAccess	_cells [ i ] . load
>8224	Identifier	load
>8225	ArrayIndexing	_cells [ i ]
>8226	Identifier	i
>8227	Identifier	_cells
>8228	UnaryExpression	 
>8229	Identifier	i
>8230	IncDec	++
>8231	Condition	 
>8232	EqualityExpression	i != _nCells
>8233	Identifier	_nCells
>8234	Identifier	i
>8235	ForInit	 
>8236	IdentifierDeclStatement	UInt i = 0 ;
>8237	IdentifierDecl	i = 0
>8238	AssignmentExpr	i = 0
>8239	PrimaryExpression	0
>8240	Identifier	i
>8241	Identifier	i
>8242	IdentifierDeclType	UInt
>8243	IfStatement	if ( v >= 2 )
>8244	CompoundStatement	 
>8245	ForStatement	for ( UInt i = 0 ; i < n ; ++ i )
>8246	CompoundStatement	 
>8247	ExpressionStatement	 
>8248	CallExpression	_segmentUpdates [ i ] . load ( inStream )
>8249	ArgumentList	inStream
>8250	Argument	inStream
>8251	Identifier	inStream
>8252	Callee	_segmentUpdates [ i ] . load
>8253	MemberAccess	_segmentUpdates [ i ] . load
>8254	Identifier	load
>8255	ArrayIndexing	_segmentUpdates [ i ]
>8256	Identifier	i
>8257	Identifier	_segmentUpdates
>8258	ExpressionStatement	 
>8259	CallExpression	_segmentUpdates . push_back ( SegmentUpdate ( ) )
>8260	ArgumentList	SegmentUpdate ( )
>8261	Argument	SegmentUpdate ( )
>8262	CallExpression	SegmentUpdate ( )
>8263	ArgumentList	 
>8264	Callee	SegmentUpdate
>8265	Identifier	SegmentUpdate
>8266	Callee	_segmentUpdates . push_back
>8267	MemberAccess	_segmentUpdates . push_back
>8268	Identifier	push_back
>8269	Identifier	_segmentUpdates
>8270	UnaryExpression	 
>8271	Identifier	i
>8272	IncDec	++
>8273	Condition	 
>8274	RelationalExpression	i < n
>8275	Identifier	n
>8276	Identifier	i
>8277	ForInit	 
>8278	IdentifierDeclStatement	UInt i = 0 ;
>8279	IdentifierDecl	i = 0
>8280	AssignmentExpr	i = 0
>8281	PrimaryExpression	0
>8282	Identifier	i
>8283	Identifier	i
>8284	IdentifierDeclType	UInt
>8285	ExpressionStatement	 
>8286	ShiftExpression	inStream >> n
>8287	Identifier	n
>8288	Identifier	inStream
>8289	ExpressionStatement	 
>8290	CallExpression	_segmentUpdates . clear ( )
>8291	ArgumentList	 
>8292	Callee	_segmentUpdates . clear
>8293	MemberAccess	_segmentUpdates . clear
>8294	Identifier	clear
>8295	Identifier	_segmentUpdates
>8296	IdentifierDeclStatement	 
>8297	IdentifierDecl	n
>8298	Identifier	n
>8299	IdentifierDeclType	UInt
>8300	Condition	 
>8301	RelationalExpression	v >= 2
>8302	PrimaryExpression	2
>8303	Identifier	v
>8304	IfStatement	if ( v >= 1 )
>8305	CompoundStatement	 
>8306	ExpressionStatement	 
>8307	CallExpression	_learnPredictedStateT1 . load ( inStream )
>8308	ArgumentList	inStream
>8309	Argument	inStream
>8310	Identifier	inStream
>8311	Callee	_learnPredictedStateT1 . load
>8312	MemberAccess	_learnPredictedStateT1 . load
>8313	Identifier	load
>8314	Identifier	_learnPredictedStateT1
>8315	ExpressionStatement	 
>8316	CallExpression	_learnPredictedStateT . load ( inStream )
>8317	ArgumentList	inStream
>8318	Argument	inStream
>8319	Identifier	inStream
>8320	Callee	_learnPredictedStateT . load
>8321	MemberAccess	_learnPredictedStateT . load
>8322	Identifier	load
>8323	Identifier	_learnPredictedStateT
>8324	ExpressionStatement	 
>8325	CallExpression	_learnActiveStateT1 . load ( inStream )
>8326	ArgumentList	inStream
>8327	Argument	inStream
>8328	Identifier	inStream
>8329	Callee	_learnActiveStateT1 . load
>8330	MemberAccess	_learnActiveStateT1 . load
>8331	Identifier	load
>8332	Identifier	_learnActiveStateT1
>8333	ExpressionStatement	 
>8334	CallExpression	_learnActiveStateT . load ( inStream )
>8335	ArgumentList	inStream
>8336	Argument	inStream
>8337	Identifier	inStream
>8338	Callee	_learnActiveStateT . load
>8339	MemberAccess	_learnActiveStateT . load
>8340	Identifier	load
>8341	Identifier	_learnActiveStateT
>8342	ExpressionStatement	 
>8343	ShiftExpression	inStream >> _learnedSeqLength >> _verbosity >> _checkSynapseConsistency >> _resetCalled
>8344	ShiftExpression	_learnedSeqLength >> _verbosity >> _checkSynapseConsistency >> _resetCalled
>8345	ShiftExpression	_verbosity >> _checkSynapseConsistency >> _resetCalled
>8346	ShiftExpression	_checkSynapseConsistency >> _resetCalled
>8347	Identifier	_resetCalled
>8348	Identifier	_checkSynapseConsistency
>8349	Identifier	_verbosity
>8350	Identifier	_learnedSeqLength
>8351	Identifier	inStream
>8352	Condition	 
>8353	RelationalExpression	v >= 1
>8354	PrimaryExpression	1
>8355	Identifier	v
>8356	ExpressionStatement	 
>8357	ShiftExpression	inStream >> _maxInfBacktrack >> _maxLrnBacktrack >> _pamLength >> _maxAge >> _avgInputDensity >> _pamCounter >> _\
>8358	ShiftExpression	_maxInfBacktrack >> _maxLrnBacktrack >> _pamLength >> _maxAge >> _avgInputDensity >> _pamCounter >> _\
>8359	ShiftExpression	_maxLrnBacktrack >> _pamLength >> _maxAge >> _avgInputDensity >> _pamCounter >> _maxSeqLength >> _avgLearnedSeqLength >> _\
>8360	ShiftExpression	_pamLength >> _maxAge >> _avgInputDensity >> _pamCounter >> _maxSeqLength >> _avgLearnedSeqLength >> _\
>8361	ShiftExpression	_maxAge >> _avgInputDensity >> _pamCounter >> _maxSeqLength >> _avgLearnedSeqLength >> _nLrnIterations >> _\
>8362	ShiftExpression	_avgInputDensity >> _pamCounter >> _maxSeqLength >> _avgLearnedSeqLength >> _nLrnIterations >> _maxSegmentsPerCell >> _\
>8363	ShiftExpression	_pamCounter >> _maxSeqLength >> _avgLearnedSeqLength >> _nLrnIterations >> _maxSegmentsPerCell >> _maxSynapsesPerSegment
>8364	ShiftExpression	_maxSeqLength >> _avgLearnedSeqLength >> _nLrnIterations >> _maxSegmentsPerCell >> _maxSynapsesPerSegment
>8365	ShiftExpression	_avgLearnedSeqLength >> _nLrnIterations >> _maxSegmentsPerCell >> _maxSynapsesPerSegment
>8366	ShiftExpression	_nLrnIterations >> _maxSegmentsPerCell >> _maxSynapsesPerSegment
>8367	ShiftExpression	_maxSegmentsPerCell >> _maxSynapsesPerSegment
>8368	Identifier	_maxSynapsesPerSegment
>8369	Identifier	_maxSegmentsPerCell
>8370	Identifier	_nLrnIterations
>8371	Identifier	_avgLearnedSeqLength
>8372	Identifier	_maxSeqLength
>8373	Identifier	_pamCounter
>8374	Identifier	_avgInputDensity
>8375	Identifier	_maxAge
>8376	Identifier	_pamLength
>8377	Identifier	_maxLrnBacktrack
>8378	Identifier	_maxInfBacktrack
>8379	Identifier	inStream
>8380	ExpressionStatement	 
>8381	AssignmentExpr	_nIterations = nIterations
>8382	Identifier	nIterations
>8383	Identifier	_nIterations
>8384	ExpressionStatement	 
>8385	CallExpression	initialize ( nColumns , nCellsPerCol , _activationThreshold , _minThreshold , _newSynapseCount , _segUpdateValidDuration , _\
>8386	ArgumentList	nColumns
>8387	Argument	_ownsMemory
>8388	Identifier	_ownsMemory
>8389	Argument	_doPooling
>8390	Identifier	_doPooling
>8391	Argument	_globalDecay
>8392	Identifier	_globalDecay
>8393	Argument	_permInc
>8394	Identifier	_permInc
>8395	Argument	_permDec
>8396	Identifier	_permDec
>8397	Argument	_permMax
>8398	Identifier	_permMax
>8399	Argument	_permConnected
>8400	Identifier	_permConnected
>8401	Argument	_permInitial
>8402	Identifier	_permInitial
>8403	Argument	_segUpdateValidDuration
>8404	Identifier	_segUpdateValidDuration
>8405	Argument	_newSynapseCount
>8406	Identifier	_newSynapseCount
>8407	Argument	_minThreshold
>8408	Identifier	_minThreshold
>8409	Argument	_activationThreshold
>8410	Identifier	_activationThreshold
>8411	Argument	nCellsPerCol
>8412	Identifier	nCellsPerCol
>8413	Argument	nColumns
>8414	Identifier	nColumns
>8415	Callee	initialize
>8416	Identifier	initialize
>8417	ExpressionStatement	 
>8418	ShiftExpression	inStream >> _activationThreshold >> _minThreshold >> _newSynapseCount >> nIterations >> _segUpdateValidDuration >> _\
>8419	ShiftExpression	_activationThreshold >> _minThreshold >> _newSynapseCount >> nIterations >> _segUpdateValidDuration >> _\
>8420	ShiftExpression	_minThreshold >> _newSynapseCount >> nIterations >> _segUpdateValidDuration >> _initSegFreq >> _permInitial >> _\
>8421	ShiftExpression	_newSynapseCount >> nIterations >> _segUpdateValidDuration >> _initSegFreq >> _permInitial >> _permConnected >> _\
>8422	ShiftExpression	nIterations >> _segUpdateValidDuration >> _initSegFreq >> _permInitial >> _permConnected >> _permMax >> _\
>8423	ShiftExpression	_segUpdateValidDuration >> _initSegFreq >> _permInitial >> _permConnected >> _permMax >> _permDec >> _\
>8424	ShiftExpression	_initSegFreq >> _permInitial >> _permConnected >> _permMax >> _permDec >> _permInc >> _globalDecay >> _\
>8425	ShiftExpression	_permInitial >> _permConnected >> _permMax >> _permDec >> _permInc >> _globalDecay >> _doPooling
>8426	ShiftExpression	_permConnected >> _permMax >> _permDec >> _permInc >> _globalDecay >> _doPooling
>8427	ShiftExpression	_permMax >> _permDec >> _permInc >> _globalDecay >> _doPooling
>8428	ShiftExpression	_permDec >> _permInc >> _globalDecay >> _doPooling
>8429	ShiftExpression	_permInc >> _globalDecay >> _doPooling
>8430	ShiftExpression	_globalDecay >> _doPooling
>8431	Identifier	_doPooling
>8432	Identifier	_globalDecay
>8433	Identifier	_permInc
>8434	Identifier	_permDec
>8435	Identifier	_permMax
>8436	Identifier	_permConnected
>8437	Identifier	_permInitial
>8438	Identifier	_initSegFreq
>8439	Identifier	_segUpdateValidDuration
>8440	Identifier	nIterations
>8441	Identifier	_newSynapseCount
>8442	Identifier	_minThreshold
>8443	Identifier	_activationThreshold
>8444	Identifier	inStream
>8445	ExpressionStatement	 
>8446	ShiftExpression	inStream >> nColumns >> nCellsPerCol
>8447	ShiftExpression	nColumns >> nCellsPerCol
>8448	Identifier	nCellsPerCol
>8449	Identifier	nColumns
>8450	Identifier	inStream
>8451	IdentifierDeclStatement	 
>8452	IdentifierDecl	nIterations = 0
>8453	AssignmentExpr	nIterations = 0
>8454	PrimaryExpression	0
>8455	Identifier	nIterations
>8456	Identifier	nIterations
>8457	IdentifierDeclType	UInt
>8458	IdentifierDeclStatement	 
>8459	IdentifierDecl	nCellsPerCol = 0
>8460	AssignmentExpr	nCellsPerCol = 0
>8461	PrimaryExpression	0
>8462	Identifier	nCellsPerCol
>8463	Identifier	nCellsPerCol
>8464	IdentifierDeclType	UInt
>8465	IdentifierDecl	nColumns = 0
>8466	AssignmentExpr	nColumns = 0
>8467	PrimaryExpression	0
>8468	Identifier	nColumns
>8469	Identifier	nColumns
>8470	IdentifierDeclType	UInt
>8471	ExpressionStatement	 
>8472	ShiftExpression	inStream >> _rng
>8473	Identifier	_rng
>8474	Identifier	inStream
>8475	ExpressionStatement	 
>8476	ShiftExpression	inStream >> _ownsMemory
>8477	Identifier	_ownsMemory
>8478	Identifier	inStream
>8479	IfStatement	if ( tag != \"cellsV4\" )
>8480	CompoundStatement	 
>8481	ExpressionStatement	 
>8482	ShiftExpression	ss >> v
>8483	Identifier	v
>8484	Identifier	ss
>8485	ExpressionStatement	 
>8486	ShiftExpression	ss << tag
>8487	Identifier	tag
>8488	Identifier	ss
>8489	Condition	 
>8490	EqualityExpression	tag != \"cellsV4\"
>8491	PrimaryExpression	\"cellsV4\"
>8492	Identifier	tag
>8493	IdentifierDeclStatement	 
>8494	IdentifierDecl	ss
>8495	Identifier	ss
>8496	IdentifierDeclType	std 
>8497	IdentifierDeclStatement	 
>8498	IdentifierDecl	v = 0
>8499	AssignmentExpr	v = 0
>8500	PrimaryExpression	0
>8501	Identifier	v
>8502	Identifier	v
>8503	IdentifierDeclType	UInt
>8504	ExpressionStatement	 
>8505	ShiftExpression	inStream >> tag
>8506	Identifier	tag
>8507	Identifier	inStream
>8508	IdentifierDeclStatement	 
>8509	IdentifierDecl	tag = \"\"
>8510	AssignmentExpr	tag = \"\"
>8511	PrimaryExpression	\"\"
>8512	Identifier	tag
>8513	Identifier	tag
>8514	IdentifierDeclType	std 
>8558	FunctionDef	Cells4 
>8559	ParameterList	bool verbose
>8560	Parameter	 
>8561	Identifier	verbose
>8562	ParameterType	bool
>8563	ReturnType	bool
>8564	CompoundStatement	 
>8565	ReturnStatement	 
>8566	Identifier	consistent
>8567	IfStatement	if ( ! consistent )
>8568	ElseStatement	else
>8569	CompoundStatement	 
>8570	CompoundStatement	 
>8571	ExpressionStatement	 
>8572	ShiftExpression	std 
>8573	ShiftExpression	\"synapses inconsistent forward_map size=\" << forward_map . size ( ) << \" back_map size=\" << back_map \
>8574	ShiftExpression	forward_map . size ( ) << \" back_map size=\" << back_map . size ( ) << std 
>8575	ShiftExpression	\" back_map size=\" << back_map . size ( ) << std 
>8576	ShiftExpression	back_map . size ( ) << std 
>8577	Identifier	std 
>8578	CallExpression	back_map . size ( )
>8579	ArgumentList	 
>8580	Callee	back_map . size
>8581	MemberAccess	back_map . size
>8582	Identifier	size
>8583	Identifier	back_map
>8584	PrimaryExpression	\" back_map size=\"
>8585	CallExpression	forward_map . size ( )
>8586	ArgumentList	 
>8587	Callee	forward_map . size
>8588	MemberAccess	forward_map . size
>8589	Identifier	size
>8590	Identifier	forward_map
>8591	PrimaryExpression	\"synapses inconsistent forward_map size=\"
>8592	Identifier	std 
>8593	Condition	 
>8594	UnaryOp	! consistent
>8595	Identifier	consistent
>8596	UnaryOperator	!
>8597	ExpressionStatement	 
>8598	AssignmentExpr	consistent &= back_map == forward_map
>8599	EqualityExpression	back_map == forward_map
>8600	Identifier	forward_map
>8601	Identifier	back_map
>8602	Identifier	consistent
>8603	ForStatement	for ( UInt i = 0 ; i != _nCells ; ++ i )
>8604	CompoundStatement	 
>8605	ForStatement	for ( UInt j = 0 ; j != _outSynapses [ i ] . size ( ) ; ++ j )
>8606	CompoundStatement	 
>8607	ExpressionStatement	 
>8608	CallExpression	forward_map . insert ( buf . str ( ) )
>8609	ArgumentList	buf . str ( )
>8610	Argument	buf . str ( )
>8611	CallExpression	buf . str ( )
>8612	ArgumentList	 
>8613	Callee	buf . str
>8614	MemberAccess	buf . str
>8615	Identifier	str
>8616	Identifier	buf
>8617	Callee	forward_map . insert
>8618	MemberAccess	forward_map . insert
>8619	Identifier	insert
>8620	Identifier	forward_map
>8621	IfStatement	if ( is_in ( buf . str ( ) , forward_map ) )
>8622	CompoundStatement	 
>8623	ExpressionStatement	 
>8624	AssignmentExpr	consistent = false
>8625	Identifier	false
>8626	Identifier	consistent
>8627	ExpressionStatement	 
>8628	ShiftExpression	std 
>8629	ShiftExpression	\"\nDuplicate outgoing synapse
>8630	Identifier	std 
>8631	PrimaryExpression	\"\nDuplicate outgoing synapse
>8632	Identifier	std 
>8633	Condition	 
>8634	CallExpression	is_in ( buf . str ( ) , forward_map )
>8635	ArgumentList	buf . str ( )
>8636	Argument	forward_map
>8637	Identifier	forward_map
>8638	Argument	buf . str ( )
>8639	CallExpression	buf . str ( )
>8640	ArgumentList	 
>8641	Callee	buf . str
>8642	MemberAccess	buf . str
>8643	Identifier	str
>8644	Identifier	buf
>8645	Callee	is_in
>8646	Identifier	is_in
>8647	ExpressionStatement	 
>8648	ShiftExpression	buf << syn . dstCellIdx ( ) << '.' << syn . dstSegIdx ( ) << '.' << i
>8649	ShiftExpression	syn . dstCellIdx ( ) << '.' << syn . dstSegIdx ( ) << '.' << i
>8650	ShiftExpression	'.' << syn . dstSegIdx ( ) << '.' << i
>8651	ShiftExpression	syn . dstSegIdx ( ) << '.' << i
>8652	ShiftExpression	'.' << i
>8653	Identifier	i
>8654	PrimaryExpression	'.'
>8655	CallExpression	syn . dstSegIdx ( )
>8656	ArgumentList	 
>8657	Callee	syn . dstSegIdx
>8658	MemberAccess	syn . dstSegIdx
>8659	Identifier	dstSegIdx
>8660	Identifier	syn
>8661	PrimaryExpression	'.'
>8662	CallExpression	syn . dstCellIdx ( )
>8663	ArgumentList	 
>8664	Callee	syn . dstCellIdx
>8665	MemberAccess	syn . dstCellIdx
>8666	Identifier	dstCellIdx
>8667	Identifier	syn
>8668	Identifier	buf
>8669	IdentifierDeclStatement	 
>8670	IdentifierDecl	buf
>8671	Identifier	buf
>8672	IdentifierDeclType	stringstream
>8673	IdentifierDeclStatement	 
>8674	IdentifierDecl	& syn = _outSynapses [ i ] [ j ]
>8675	AssignmentExpr	& syn = _outSynapses [ i ] [ j ]
>8676	ArrayIndexing	_outSynapses [ i ] [ j ]
>8677	Identifier	j
>8678	ArrayIndexing	_outSynapses [ i ]
>8679	Identifier	i
>8680	Identifier	_outSynapses
>8681	Identifier	syn
>8682	Identifier	syn
>8683	IdentifierDeclType	const OutSynapse &
>8684	UnaryExpression	 
>8685	Identifier	j
>8686	IncDec	++
>8687	Condition	 
>8688	EqualityExpression	j != _outSynapses [ i ] . size ( )
>8689	CallExpression	_outSynapses [ i ] . size ( )
>8690	ArgumentList	 
>8691	Callee	_outSynapses [ i ] . size
>8692	MemberAccess	_outSynapses [ i ] . size
>8693	Identifier	size
>8694	ArrayIndexing	_outSynapses [ i ]
>8695	Identifier	i
>8696	Identifier	_outSynapses
>8697	Identifier	j
>8698	ForInit	 
>8699	IdentifierDeclStatement	UInt j = 0 ;
>8700	IdentifierDecl	j = 0
>8701	AssignmentExpr	j = 0
>8702	PrimaryExpression	0
>8703	Identifier	j
>8704	Identifier	j
>8705	IdentifierDeclType	UInt
>8706	ForStatement	for ( UInt j = 0 ; j != _cells [ i ] . size ( ) ; ++ j )
>8707	CompoundStatement	 
>8708	ExpressionStatement	 
>8709	AssignmentExpr	consistent &= seg . checkConnected ( _permConnected )
>8710	CallExpression	seg . checkConnected ( _permConnected )
>8711	ArgumentList	_permConnected
>8712	Argument	_permConnected
>8713	Identifier	_permConnected
>8714	Callee	seg . checkConnected
>8715	MemberAccess	seg . checkConnected
>8716	Identifier	checkConnected
>8717	Identifier	seg
>8718	Identifier	consistent
>8719	ForStatement	for ( UInt k = 0 ; k != seg . size ( ) ; ++ k )
>8720	CompoundStatement	 
>8721	ExpressionStatement	 
>8722	CallExpression	back_map . insert ( buf . str ( ) )
>8723	ArgumentList	buf . str ( )
>8724	Argument	buf . str ( )
>8725	CallExpression	buf . str ( )
>8726	ArgumentList	 
>8727	Callee	buf . str
>8728	MemberAccess	buf . str
>8729	Identifier	str
>8730	Identifier	buf
>8731	Callee	back_map . insert
>8732	MemberAccess	back_map . insert
>8733	Identifier	insert
>8734	Identifier	back_map
>8735	IfStatement	if ( is_in ( buf . str ( ) , back_map ) )
>8736	CompoundStatement	 
>8737	ExpressionStatement	 
>8738	AssignmentExpr	consistent = false
>8739	Identifier	false
>8740	Identifier	consistent
>8741	ExpressionStatement	 
>8742	ShiftExpression	std 
>8743	ShiftExpression	\"\nDuplicate incoming synapse
>8744	Identifier	std 
>8745	PrimaryExpression	\"\nDuplicate incoming synapse
>8746	Identifier	std 
>8747	Condition	 
>8748	CallExpression	is_in ( buf . str ( ) , back_map )
>8749	ArgumentList	buf . str ( )
>8750	Argument	back_map
>8751	Identifier	back_map
>8752	Argument	buf . str ( )
>8753	CallExpression	buf . str ( )
>8754	ArgumentList	 
>8755	Callee	buf . str
>8756	MemberAccess	buf . str
>8757	Identifier	str
>8758	Identifier	buf
>8759	Callee	is_in
>8760	Identifier	is_in
>8761	ExpressionStatement	 
>8762	ShiftExpression	buf << i << '.' << j << '.' << seg [ k ] . srcCellIdx ( )
>8763	ShiftExpression	i << '.' << j << '.' << seg [ k ] . srcCellIdx ( )
>8764	ShiftExpression	'.' << j << '.' << seg [ k ] . srcCellIdx ( )
>8765	ShiftExpression	j << '.' << seg [ k ] . srcCellIdx ( )
>8766	ShiftExpression	'.' << seg [ k ] . srcCellIdx ( )
>8767	CallExpression	seg [ k ] . srcCellIdx ( )
>8768	ArgumentList	 
>8769	Callee	seg [ k ] . srcCellIdx
>8770	MemberAccess	seg [ k ] . srcCellIdx
>8771	Identifier	srcCellIdx
>8772	ArrayIndexing	seg [ k ]
>8773	Identifier	k
>8774	Identifier	seg
>8775	PrimaryExpression	'.'
>8776	Identifier	j
>8777	PrimaryExpression	'.'
>8778	Identifier	i
>8779	Identifier	buf
>8780	IdentifierDeclStatement	 
>8781	IdentifierDecl	buf
>8782	Identifier	buf
>8783	IdentifierDeclType	stringstream
>8784	UnaryExpression	 
>8785	Identifier	k
>8786	IncDec	++
>8787	Condition	 
>8788	EqualityExpression	k != seg . size ( )
>8789	CallExpression	seg . size ( )
>8790	ArgumentList	 
>8791	Callee	seg . size
>8792	MemberAccess	seg . size
>8793	Identifier	size
>8794	Identifier	seg
>8795	Identifier	k
>8796	ForInit	 
>8797	IdentifierDeclStatement	UInt k = 0 ;
>8798	IdentifierDecl	k = 0
>8799	AssignmentExpr	k = 0
>8800	PrimaryExpression	0
>8801	Identifier	k
>8802	Identifier	k
>8803	IdentifierDeclType	UInt
>8804	IdentifierDeclStatement	 
>8805	IdentifierDecl	& seg = _cells [ i ] [ j ]
>8806	AssignmentExpr	& seg = _cells [ i ] [ j ]
>8807	ArrayIndexing	_cells [ i ] [ j ]
>8808	Identifier	j
>8809	ArrayIndexing	_cells [ i ]
>8810	Identifier	i
>8811	Identifier	_cells
>8812	Identifier	seg
>8813	Identifier	seg
>8814	IdentifierDeclType	const Segment &
>8815	UnaryExpression	 
>8816	Identifier	j
>8817	IncDec	++
>8818	Condition	 
>8819	EqualityExpression	j != _cells [ i ] . size ( )
>8820	CallExpression	_cells [ i ] . size ( )
>8821	ArgumentList	 
>8822	Callee	_cells [ i ] . size
>8823	MemberAccess	_cells [ i ] . size
>8824	Identifier	size
>8825	ArrayIndexing	_cells [ i ]
>8826	Identifier	i
>8827	Identifier	_cells
>8828	Identifier	j
>8829	ForInit	 
>8830	IdentifierDeclStatement	UInt j = 0 ;
>8831	IdentifierDecl	j = 0
>8832	AssignmentExpr	j = 0
>8833	PrimaryExpression	0
>8834	Identifier	j
>8835	Identifier	j
>8836	IdentifierDeclType	UInt
>8837	UnaryExpression	 
>8838	Identifier	i
>8839	IncDec	++
>8840	Condition	 
>8841	EqualityExpression	i != _nCells
>8842	Identifier	_nCells
>8843	Identifier	i
>8844	ForInit	 
>8845	IdentifierDeclStatement	UInt i = 0 ;
>8846	IdentifierDecl	i = 0
>8847	AssignmentExpr	i = 0
>8848	PrimaryExpression	0
>8849	Identifier	i
>8850	Identifier	i
>8851	IdentifierDeclType	UInt
>8852	IfStatement	if ( _nCellsPerCol > 1 )
>8853	CompoundStatement	 
>8854	IfStatement	if ( ! consistent && verbose )
>8855	CompoundStatement	 
>8856	ExpressionStatement	 
>8857	ShiftExpression	std 
>8858	PrimaryExpression	\"0'th cell in some column has segments\n\"
>8859	Identifier	std 
>8860	Condition	 
>8861	AndExpression	! consistent && verbose
>8862	Identifier	verbose
>8863	UnaryOp	! consistent
>8864	Identifier	consistent
>8865	UnaryOperator	!
>8866	ForStatement	for ( UInt colIdx = 0 ; colIdx != _nColumns ; ++ colIdx )
>8867	CompoundStatement	 
>8868	ExpressionStatement	 
>8869	AssignmentExpr	consistent &= ( _cells [ cellIdx ] . size ( ) == 0 )
>8870	EqualityExpression	_cells [ cellIdx ] . size ( ) == 0
>8871	PrimaryExpression	0
>8872	CallExpression	_cells [ cellIdx ] . size ( )
>8873	ArgumentList	 
>8874	Callee	_cells [ cellIdx ] . size
>8875	MemberAccess	_cells [ cellIdx ] . size
>8876	Identifier	size
>8877	ArrayIndexing	_cells [ cellIdx ]
>8878	Identifier	cellIdx
>8879	Identifier	_cells
>8880	Identifier	consistent
>8881	IdentifierDeclStatement	 
>8882	IdentifierDecl	cellIdx = colIdx * _nCellsPerCol
>8883	AssignmentExpr	cellIdx = colIdx * _nCellsPerCol
>8884	MultiplicativeExpression	colIdx * _nCellsPerCol
>8885	Identifier	_nCellsPerCol
>8886	Identifier	colIdx
>8887	Identifier	cellIdx
>8888	Identifier	cellIdx
>8889	IdentifierDeclType	UInt
>8890	UnaryExpression	 
>8891	Identifier	colIdx
>8892	IncDec	++
>8893	Condition	 
>8894	EqualityExpression	colIdx != _nColumns
>8895	Identifier	_nColumns
>8896	Identifier	colIdx
>8897	ForInit	 
>8898	IdentifierDeclStatement	UInt colIdx = 0 ;
>8899	IdentifierDecl	colIdx = 0
>8900	AssignmentExpr	colIdx = 0
>8901	PrimaryExpression	0
>8902	Identifier	colIdx
>8903	Identifier	colIdx
>8904	IdentifierDeclType	UInt
>8905	Condition	 
>8906	RelationalExpression	_nCellsPerCol > 1
>8907	PrimaryExpression	1
>8908	Identifier	_nCellsPerCol
>8909	IdentifierDeclStatement	 
>8910	IdentifierDecl	consistent = true
>8911	AssignmentExpr	consistent = true
>8912	Identifier	true
>8913	Identifier	true
>8914	Identifier	consistent
>8915	IdentifierDeclType	bool
>8916	IdentifierDeclStatement	 
>8917	IdentifierDecl	forward_map
>8918	Identifier	forward_map
>8919	IdentifierDeclType	set < string >
>8920	IdentifierDeclStatement	 
>8921	IdentifierDecl	back_map
>8922	Identifier	back_map
>8923	IdentifierDeclType	set < string >
>8924	ExpressionStatement	 
>8925	Identifier	std
>8926	Statement	 
>8927	Statement	 
>8968	FunctionDef	Cells4 
>8969	ParameterList	UInt colIdx , UInt cellIdxInCol , bool sequenceSegmentFlag , const std 
>8970	Parameter	 
>8971	Identifier	extSynapses
>8972	ParameterType	const std 
>8973	Parameter	 
>8974	Identifier	sequenceSegmentFlag
>8975	ParameterType	bool
>8976	Parameter	 
>8977	Identifier	cellIdxInCol
>8978	ParameterType	UInt
>8979	Parameter	 
>8980	Identifier	colIdx
>8981	ParameterType	UInt
>8982	ReturnType	void
>8983	CompoundStatement	 
>8984	ExpressionStatement	 
>8985	CallExpression	_segmentUpdates . push_back ( update )
>8986	ArgumentList	update
>8987	Argument	update
>8988	Identifier	update
>8989	Callee	_segmentUpdates . push_back
>8990	MemberAccess	_segmentUpdates . push_back
>8991	Identifier	push_back
>8992	Identifier	_segmentUpdates
>8993	IdentifierDeclStatement	 
>8994	IdentifierDecl	update ( cellIdx , ( UInt ) - 1 , sequenceSegmentFlag , _nLrnIterations , synapses )
>8995	Expression	cellIdx , ( UInt ) - 1 , sequenceSegmentFlag , _nLrnIterations , synapses
>8996	Expression	( UInt ) - 1 , sequenceSegmentFlag , _nLrnIterations , synapses
>8997	Expression	sequenceSegmentFlag , _nLrnIterations , synapses
>8998	Expression	_nLrnIterations , synapses
>8999	Identifier	synapses
>9000	Identifier	_nLrnIterations
>9001	Identifier	sequenceSegmentFlag
>9002	CastExpression	( UInt ) - 1
>9003	UnaryOp	- 1
>9004	PrimaryExpression	1
>9005	UnaryOperator	-
>9006	CastTarget	UInt
>9007	Identifier	cellIdx
>9008	Identifier	update
>9009	IdentifierDeclType	SegmentUpdate
>9010	ForStatement	for ( UInt i = 0 ; i != extSynapses . size ( ) ; ++ i )
>9011	ExpressionStatement	 
>9012	AssignmentExpr	synapses [ i ] = extSynapses [ i ] . first * _nCellsPerCol + extSynapses [ i ] . second
>9013	AdditiveExpression	extSynapses [ i ] . first * _nCellsPerCol + extSynapses [ i ] . second
>9014	MemberAccess	extSynapses [ i ] . second
>9015	Identifier	second
>9016	ArrayIndexing	extSynapses [ i ]
>9017	Identifier	i
>9018	Identifier	extSynapses
>9019	MultiplicativeExpression	extSynapses [ i ] . first * _nCellsPerCol
>9020	Identifier	_nCellsPerCol
>9021	MemberAccess	extSynapses [ i ] . first
>9022	Identifier	first
>9023	ArrayIndexing	extSynapses [ i ]
>9024	Identifier	i
>9025	Identifier	extSynapses
>9026	ArrayIndexing	synapses [ i ]
>9027	Identifier	i
>9028	Identifier	synapses
>9029	UnaryExpression	 
>9030	Identifier	i
>9031	IncDec	++
>9032	Condition	 
>9033	EqualityExpression	i != extSynapses . size ( )
>9034	CallExpression	extSynapses . size ( )
>9035	ArgumentList	 
>9036	Callee	extSynapses . size
>9037	MemberAccess	extSynapses . size
>9038	Identifier	size
>9039	Identifier	extSynapses
>9040	Identifier	i
>9041	ForInit	 
>9042	IdentifierDeclStatement	UInt i = 0 ;
>9043	IdentifierDecl	i = 0
>9044	AssignmentExpr	i = 0
>9045	PrimaryExpression	0
>9046	Identifier	i
>9047	Identifier	i
>9048	IdentifierDeclType	UInt
>9049	ExpressionStatement	 
>9050	CallExpression	synapses . resize ( extSynapses . size ( ) )
>9051	ArgumentList	extSynapses . size ( )
>9052	Argument	extSynapses . size ( )
>9053	CallExpression	extSynapses . size ( )
>9054	ArgumentList	 
>9055	Callee	extSynapses . size
>9056	MemberAccess	extSynapses . size
>9057	Identifier	size
>9058	Identifier	extSynapses
>9059	Callee	synapses . resize
>9060	MemberAccess	synapses . resize
>9061	Identifier	resize
>9062	Identifier	synapses
>9063	IdentifierDeclStatement	 
>9064	IdentifierDecl	synapses
>9065	Identifier	synapses
>9066	IdentifierDeclType	std 
>9067	Statement	 
>9068	IdentifierDeclStatement	 
>9069	IdentifierDecl	cellIdx = colIdx * _nCellsPerCol + cellIdxInCol
>9070	AssignmentExpr	cellIdx = colIdx * _nCellsPerCol + cellIdxInCol
>9071	AdditiveExpression	colIdx * _nCellsPerCol + cellIdxInCol
>9072	Identifier	cellIdxInCol
>9073	MultiplicativeExpression	colIdx * _nCellsPerCol
>9074	Identifier	_nCellsPerCol
>9075	Identifier	colIdx
>9076	Identifier	cellIdx
>9077	Identifier	cellIdx
>9078	IdentifierDeclType	UInt
>9079	ExpressionStatement	 
>9080	CallExpression	NTA_ASSERT ( cellIdxInCol < nCellsPerCol ( ) )
>9081	ArgumentList	cellIdxInCol < nCellsPerCol ( )
>9082	Argument	cellIdxInCol < nCellsPerCol ( )
>9083	RelationalExpression	cellIdxInCol < nCellsPerCol ( )
>9084	CallExpression	nCellsPerCol ( )
>9085	ArgumentList	 
>9086	Callee	nCellsPerCol
>9087	Identifier	nCellsPerCol
>9088	Identifier	cellIdxInCol
>9089	Callee	NTA_ASSERT
>9090	Identifier	NTA_ASSERT
>9091	ExpressionStatement	 
>9092	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>9093	ArgumentList	colIdx < nColumns ( )
>9094	Argument	colIdx < nColumns ( )
>9095	RelationalExpression	colIdx < nColumns ( )
>9096	CallExpression	nColumns ( )
>9097	ArgumentList	 
>9098	Callee	nColumns
>9099	Identifier	nColumns
>9100	Identifier	colIdx
>9101	Callee	NTA_ASSERT
>9102	Identifier	NTA_ASSERT
>9124	FunctionDef	Cells4 
>9125	ParameterList	UInt colIdx , UInt cellIdxInCol , UInt segIdx , const std 
>9126	Parameter	 
>9127	Identifier	extSynapses
>9128	ParameterType	const std 
>9129	Parameter	 
>9130	Identifier	segIdx
>9131	ParameterType	UInt
>9132	Parameter	 
>9133	Identifier	cellIdxInCol
>9134	ParameterType	UInt
>9135	Parameter	 
>9136	Identifier	colIdx
>9137	ParameterType	UInt
>9138	ReturnType	void
>9139	CompoundStatement	 
>9140	ExpressionStatement	 
>9141	CallExpression	_segmentUpdates . push_back ( update )
>9142	ArgumentList	update
>9143	Argument	update
>9144	Identifier	update
>9145	Callee	_segmentUpdates . push_back
>9146	MemberAccess	_segmentUpdates . push_back
>9147	Identifier	push_back
>9148	Identifier	_segmentUpdates
>9149	IdentifierDeclStatement	 
>9150	IdentifierDecl	update ( cellIdx , segIdx , sequenceSegmentFlag , _nLrnIterations , synapses )
>9151	Expression	cellIdx , segIdx , sequenceSegmentFlag , _nLrnIterations , synapses
>9152	Expression	segIdx , sequenceSegmentFlag , _nLrnIterations , synapses
>9153	Expression	sequenceSegmentFlag , _nLrnIterations , synapses
>9154	Expression	_nLrnIterations , synapses
>9155	Identifier	synapses
>9156	Identifier	_nLrnIterations
>9157	Identifier	sequenceSegmentFlag
>9158	Identifier	segIdx
>9159	Identifier	cellIdx
>9160	Identifier	update
>9161	IdentifierDeclType	SegmentUpdate
>9162	ForStatement	for ( UInt i = 0 ; i != extSynapses . size ( ) ; ++ i )
>9163	ExpressionStatement	 
>9164	AssignmentExpr	synapses [ i ] = extSynapses [ i ] . first * _nCellsPerCol + extSynapses [ i ] . second
>9165	AdditiveExpression	extSynapses [ i ] . first * _nCellsPerCol + extSynapses [ i ] . second
>9166	MemberAccess	extSynapses [ i ] . second
>9167	Identifier	second
>9168	ArrayIndexing	extSynapses [ i ]
>9169	Identifier	i
>9170	Identifier	extSynapses
>9171	MultiplicativeExpression	extSynapses [ i ] . first * _nCellsPerCol
>9172	Identifier	_nCellsPerCol
>9173	MemberAccess	extSynapses [ i ] . first
>9174	Identifier	first
>9175	ArrayIndexing	extSynapses [ i ]
>9176	Identifier	i
>9177	Identifier	extSynapses
>9178	ArrayIndexing	synapses [ i ]
>9179	Identifier	i
>9180	Identifier	synapses
>9181	UnaryExpression	 
>9182	Identifier	i
>9183	IncDec	++
>9184	Condition	 
>9185	EqualityExpression	i != extSynapses . size ( )
>9186	CallExpression	extSynapses . size ( )
>9187	ArgumentList	 
>9188	Callee	extSynapses . size
>9189	MemberAccess	extSynapses . size
>9190	Identifier	size
>9191	Identifier	extSynapses
>9192	Identifier	i
>9193	ForInit	 
>9194	IdentifierDeclStatement	UInt i = 0 ;
>9195	IdentifierDecl	i = 0
>9196	AssignmentExpr	i = 0
>9197	PrimaryExpression	0
>9198	Identifier	i
>9199	Identifier	i
>9200	IdentifierDeclType	UInt
>9201	ExpressionStatement	 
>9202	CallExpression	synapses . resize ( extSynapses . size ( ) )
>9203	ArgumentList	extSynapses . size ( )
>9204	Argument	extSynapses . size ( )
>9205	CallExpression	extSynapses . size ( )
>9206	ArgumentList	 
>9207	Callee	extSynapses . size
>9208	MemberAccess	extSynapses . size
>9209	Identifier	size
>9210	Identifier	extSynapses
>9211	Callee	synapses . resize
>9212	MemberAccess	synapses . resize
>9213	Identifier	resize
>9214	Identifier	synapses
>9215	IdentifierDeclStatement	 
>9216	IdentifierDecl	synapses
>9217	Identifier	synapses
>9218	IdentifierDeclType	std 
>9219	Statement	 
>9220	IdentifierDeclStatement	 
>9221	IdentifierDecl	sequenceSegmentFlag = segment ( cellIdx , segIdx ) . isSequenceSegment ( )
>9222	AssignmentExpr	sequenceSegmentFlag = segment ( cellIdx , segIdx ) . isSequenceSegment ( )
>9223	CallExpression	segment ( cellIdx , segIdx ) . isSequenceSegment ( )
>9224	ArgumentList	 
>9225	Callee	segment ( cellIdx , segIdx ) . isSequenceSegment
>9226	MemberAccess	segment ( cellIdx , segIdx ) . isSequenceSegment
>9227	Identifier	isSequenceSegment
>9228	CallExpression	segment ( cellIdx , segIdx )
>9229	ArgumentList	cellIdx
>9230	Argument	segIdx
>9231	Identifier	segIdx
>9232	Argument	cellIdx
>9233	Identifier	cellIdx
>9234	Callee	segment
>9235	Identifier	segment
>9236	Identifier	sequenceSegmentFlag
>9237	Identifier	sequenceSegmentFlag
>9238	IdentifierDeclType	bool
>9239	IdentifierDeclStatement	 
>9240	IdentifierDecl	cellIdx = colIdx * _nCellsPerCol + cellIdxInCol
>9241	AssignmentExpr	cellIdx = colIdx * _nCellsPerCol + cellIdxInCol
>9242	AdditiveExpression	colIdx * _nCellsPerCol + cellIdxInCol
>9243	Identifier	cellIdxInCol
>9244	MultiplicativeExpression	colIdx * _nCellsPerCol
>9245	Identifier	_nCellsPerCol
>9246	Identifier	colIdx
>9247	Identifier	cellIdx
>9248	Identifier	cellIdx
>9249	IdentifierDeclType	UInt
>9250	ExpressionStatement	 
>9251	CallExpression	NTA_ASSERT ( cellIdxInCol < nCellsPerCol ( ) )
>9252	ArgumentList	cellIdxInCol < nCellsPerCol ( )
>9253	Argument	cellIdxInCol < nCellsPerCol ( )
>9254	RelationalExpression	cellIdxInCol < nCellsPerCol ( )
>9255	CallExpression	nCellsPerCol ( )
>9256	ArgumentList	 
>9257	Callee	nCellsPerCol
>9258	Identifier	nCellsPerCol
>9259	Identifier	cellIdxInCol
>9260	Callee	NTA_ASSERT
>9261	Identifier	NTA_ASSERT
>9262	ExpressionStatement	 
>9263	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>9264	ArgumentList	colIdx < nColumns ( )
>9265	Argument	colIdx < nColumns ( )
>9266	RelationalExpression	colIdx < nColumns ( )
>9267	CallExpression	nColumns ( )
>9268	ArgumentList	 
>9269	Callee	nColumns
>9270	Identifier	nColumns
>9271	Identifier	colIdx
>9272	Callee	NTA_ASSERT
>9273	Identifier	NTA_ASSERT
>9298	FunctionDef	allocateState (It * & state , const UInt numElmts)
>9299	ParameterList	It * & state , const UInt numElmts
>9300	Parameter	 
>9301	Identifier	numElmts
>9302	ParameterType	const UInt
>9303	Parameter	 
>9304	Identifier	state
>9305	ParameterType	It * &
>9306	ReturnType	void
>9307	CompoundStatement	 
>9308	ExpressionStatement	 
>9309	CallExpression	memset ( state , 0 , numElmts * sizeof ( It ) )
>9310	ArgumentList	state
>9311	Argument	numElmts * sizeof ( It )
>9312	MultiplicativeExpression	numElmts * sizeof ( It )
>9313	SizeofExpr	sizeof ( It )
>9314	SizeofOperand	It
>9315	Sizeof	sizeof
>9316	Identifier	numElmts
>9317	Argument	0
>9318	PrimaryExpression	0
>9319	Argument	state
>9320	Identifier	state
>9321	Callee	memset
>9322	Identifier	memset
>9323	ExpressionStatement	 
>9324	AssignmentExpr	state = new It [ numElmts ]
>9325	Identifier	numElmts
>9326	Identifier	state
>9332	FunctionDef	Cells4 
>9333	ParameterList	bool matchPythonOrder
>9334	Parameter	 
>9335	Identifier	matchPythonOrder
>9336	ParameterType	bool
>9337	ReturnType	void
>9338	CompoundStatement	 
>9339	ExpressionStatement	 
>9340	CallExpression	Cell 
>9341	ArgumentList	matchPythonOrder
>9342	Argument	matchPythonOrder
>9343	Identifier	matchPythonOrder
>9344	Callee	Cell 
>9345	Identifier	Cell 
>9350	FunctionDef	Cells4 
>9351	ParameterList	UInt nColumns , UInt nCellsPerCol , UInt activationThreshold , UInt minThreshold , UInt newSynapseCount , UInt segUpdateValidDuration , \
>9352	Parameter	 
>9353	Identifier	checkSynapseConsistency
>9354	ParameterType	bool
>9355	Parameter	 
>9356	Identifier	doItAll
>9357	ParameterType	bool
>9358	Parameter	 
>9359	Identifier	doPooling
>9360	ParameterType	bool
>9361	Parameter	 
>9362	Identifier	globalDecay
>9363	ParameterType	Real
>9364	Parameter	 
>9365	Identifier	permInc
>9366	ParameterType	Real
>9367	Parameter	 
>9368	Identifier	permDec
>9369	ParameterType	Real
>9370	Parameter	 
>9371	Identifier	permMax
>9372	ParameterType	Real
>9373	Parameter	 
>9374	Identifier	permConnected
>9375	ParameterType	Real
>9376	Parameter	 
>9377	Identifier	permInitial
>9378	ParameterType	Real
>9379	Parameter	 
>9380	Identifier	segUpdateValidDuration
>9381	ParameterType	UInt
>9382	Parameter	 
>9383	Identifier	newSynapseCount
>9384	ParameterType	UInt
>9385	Parameter	 
>9386	Identifier	minThreshold
>9387	ParameterType	UInt
>9388	Parameter	 
>9389	Identifier	activationThreshold
>9390	ParameterType	UInt
>9391	Parameter	 
>9392	Identifier	nCellsPerCol
>9393	ParameterType	UInt
>9394	Parameter	 
>9395	Identifier	nColumns
>9396	ParameterType	UInt
>9397	ReturnType	void
>9398	CompoundStatement	 
>9399	IfStatement	if ( _checkSynapseConsistency )
>9400	ExpressionStatement	 
>9401	ShiftExpression	std 
>9402	PrimaryExpression	\"*** Synapse consistency checking turned on for Cells4 ***\n\"
>9403	Identifier	std 
>9404	Condition	 
>9405	Identifier	_checkSynapseConsistency
>9406	ExpressionStatement	 
>9407	AssignmentExpr	_checkSynapseConsistency = checkSynapseConsistency
>9408	Identifier	checkSynapseConsistency
>9409	Identifier	_checkSynapseConsistency
>9410	ExpressionStatement	 
>9411	AssignmentExpr	_nIterationsSinceRebalance = 0
>9412	PrimaryExpression	0
>9413	Identifier	_nIterationsSinceRebalance
>9414	ExpressionStatement	 
>9415	CallExpression	allocateState ( _tmpInputBuffer , _nColumns )
>9416	ArgumentList	_tmpInputBuffer
>9417	Argument	_nColumns
>9418	Identifier	_nColumns
>9419	Argument	_tmpInputBuffer
>9420	Identifier	_tmpInputBuffer
>9421	Callee	allocateState
>9422	Identifier	allocateState
>9423	ExpressionStatement	 
>9424	CallExpression	allocateState ( _colConfidenceCandidate , _nColumns )
>9425	ArgumentList	_colConfidenceCandidate
>9426	Argument	_nColumns
>9427	Identifier	_nColumns
>9428	Argument	_colConfidenceCandidate
>9429	Identifier	_colConfidenceCandidate
>9430	Callee	allocateState
>9431	Identifier	allocateState
>9432	ExpressionStatement	 
>9433	CallExpression	allocateState ( _cellConfidenceCandidate , _nCells )
>9434	ArgumentList	_cellConfidenceCandidate
>9435	Argument	_nCells
>9436	Identifier	_nCells
>9437	Argument	_cellConfidenceCandidate
>9438	Identifier	_cellConfidenceCandidate
>9439	Callee	allocateState
>9440	Identifier	allocateState
>9441	ExpressionStatement	 
>9442	CallExpression	_infPredictedStateCandidate . initialize ( _nCells )
>9443	ArgumentList	_nCells
>9444	Argument	_nCells
>9445	Identifier	_nCells
>9446	Callee	_infPredictedStateCandidate . initialize
>9447	MemberAccess	_infPredictedStateCandidate . initialize
>9448	Identifier	initialize
>9449	Identifier	_infPredictedStateCandidate
>9450	ExpressionStatement	 
>9451	CallExpression	_infActiveStateCandidate . initialize ( _nCells )
>9452	ArgumentList	_nCells
>9453	Argument	_nCells
>9454	Identifier	_nCells
>9455	Callee	_infActiveStateCandidate . initialize
>9456	MemberAccess	_infActiveStateCandidate . initialize
>9457	Identifier	initialize
>9458	Identifier	_infActiveStateCandidate
>9459	ExpressionStatement	 
>9460	CallExpression	_infPredictedBackup . initialize ( _nCells )
>9461	ArgumentList	_nCells
>9462	Argument	_nCells
>9463	Identifier	_nCells
>9464	Callee	_infPredictedBackup . initialize
>9465	MemberAccess	_infPredictedBackup . initialize
>9466	Identifier	initialize
>9467	Identifier	_infPredictedBackup
>9468	ExpressionStatement	 
>9469	CallExpression	_infActiveBackup . initialize ( _nCells )
>9470	ArgumentList	_nCells
>9471	Argument	_nCells
>9472	Identifier	_nCells
>9473	Callee	_infActiveBackup . initialize
>9474	MemberAccess	_infActiveBackup . initialize
>9475	Identifier	initialize
>9476	Identifier	_infActiveBackup
>9477	ExpressionStatement	 
>9478	CallExpression	_learnPredictedStateT1 . initialize ( _nCells )
>9479	ArgumentList	_nCells
>9480	Argument	_nCells
>9481	Identifier	_nCells
>9482	Callee	_learnPredictedStateT1 . initialize
>9483	MemberAccess	_learnPredictedStateT1 . initialize
>9484	Identifier	initialize
>9485	Identifier	_learnPredictedStateT1
>9486	ExpressionStatement	 
>9487	CallExpression	_learnPredictedStateT . initialize ( _nCells )
>9488	ArgumentList	_nCells
>9489	Argument	_nCells
>9490	Identifier	_nCells
>9491	Callee	_learnPredictedStateT . initialize
>9492	MemberAccess	_learnPredictedStateT . initialize
>9493	Identifier	initialize
>9494	Identifier	_learnPredictedStateT
>9495	ExpressionStatement	 
>9496	CallExpression	_learnActiveStateT1 . initialize ( _nCells )
>9497	ArgumentList	_nCells
>9498	Argument	_nCells
>9499	Identifier	_nCells
>9500	Callee	_learnActiveStateT1 . initialize
>9501	MemberAccess	_learnActiveStateT1 . initialize
>9502	Identifier	initialize
>9503	Identifier	_learnActiveStateT1
>9504	ExpressionStatement	 
>9505	CallExpression	_learnActiveStateT . initialize ( _nCells )
>9506	ArgumentList	_nCells
>9507	Argument	_nCells
>9508	Identifier	_nCells
>9509	Callee	_learnActiveStateT . initialize
>9510	MemberAccess	_learnActiveStateT . initialize
>9511	Identifier	initialize
>9512	Identifier	_learnActiveStateT
>9513	IfStatement	if ( doItAll )
>9514	ElseStatement	else
>9515	CompoundStatement	 
>9516	ExpressionStatement	 
>9517	AssignmentExpr	_ownsMemory = false
>9518	Identifier	false
>9519	Identifier	_ownsMemory
>9520	CompoundStatement	 
>9521	ExpressionStatement	 
>9522	CallExpression	allocateState ( _colConfidenceT1 , _nColumns )
>9523	ArgumentList	_colConfidenceT1
>9524	Argument	_nColumns
>9525	Identifier	_nColumns
>9526	Argument	_colConfidenceT1
>9527	Identifier	_colConfidenceT1
>9528	Callee	allocateState
>9529	Identifier	allocateState
>9530	ExpressionStatement	 
>9531	CallExpression	allocateState ( _colConfidenceT , _nColumns )
>9532	ArgumentList	_colConfidenceT
>9533	Argument	_nColumns
>9534	Identifier	_nColumns
>9535	Argument	_colConfidenceT
>9536	Identifier	_colConfidenceT
>9537	Callee	allocateState
>9538	Identifier	allocateState
>9539	ExpressionStatement	 
>9540	CallExpression	allocateState ( _cellConfidenceT1 , _nCells )
>9541	ArgumentList	_cellConfidenceT1
>9542	Argument	_nCells
>9543	Identifier	_nCells
>9544	Argument	_cellConfidenceT1
>9545	Identifier	_cellConfidenceT1
>9546	Callee	allocateState
>9547	Identifier	allocateState
>9548	ExpressionStatement	 
>9549	CallExpression	allocateState ( _cellConfidenceT , _nCells )
>9550	ArgumentList	_cellConfidenceT
>9551	Argument	_nCells
>9552	Identifier	_nCells
>9553	Argument	_cellConfidenceT
>9554	Identifier	_cellConfidenceT
>9555	Callee	allocateState
>9556	Identifier	allocateState
>9557	ExpressionStatement	 
>9558	CallExpression	_infPredictedStateT1 . initialize ( _nCells )
>9559	ArgumentList	_nCells
>9560	Argument	_nCells
>9561	Identifier	_nCells
>9562	Callee	_infPredictedStateT1 . initialize
>9563	MemberAccess	_infPredictedStateT1 . initialize
>9564	Identifier	initialize
>9565	Identifier	_infPredictedStateT1
>9566	ExpressionStatement	 
>9567	CallExpression	_infPredictedStateT . initialize ( _nCells )
>9568	ArgumentList	_nCells
>9569	Argument	_nCells
>9570	Identifier	_nCells
>9571	Callee	_infPredictedStateT . initialize
>9572	MemberAccess	_infPredictedStateT . initialize
>9573	Identifier	initialize
>9574	Identifier	_infPredictedStateT
>9575	ExpressionStatement	 
>9576	CallExpression	_infActiveStateT1 . initialize ( _nCells )
>9577	ArgumentList	_nCells
>9578	Argument	_nCells
>9579	Identifier	_nCells
>9580	Callee	_infActiveStateT1 . initialize
>9581	MemberAccess	_infActiveStateT1 . initialize
>9582	Identifier	initialize
>9583	Identifier	_infActiveStateT1
>9584	ExpressionStatement	 
>9585	CallExpression	_infActiveStateT . initialize ( _nCells )
>9586	ArgumentList	_nCells
>9587	Argument	_nCells
>9588	Identifier	_nCells
>9589	Callee	_infActiveStateT . initialize
>9590	MemberAccess	_infActiveStateT . initialize
>9591	Identifier	initialize
>9592	Identifier	_infActiveStateT
>9593	ExpressionStatement	 
>9594	AssignmentExpr	_ownsMemory = true
>9595	Identifier	true
>9596	Identifier	_ownsMemory
>9597	Condition	 
>9598	Identifier	doItAll
>9599	ExpressionStatement	 
>9600	CallExpression	_outSynapses . resize ( _nCells )
>9601	ArgumentList	_nCells
>9602	Argument	_nCells
>9603	Identifier	_nCells
>9604	Callee	_outSynapses . resize
>9605	MemberAccess	_outSynapses . resize
>9606	Identifier	resize
>9607	Identifier	_outSynapses
>9608	ExpressionStatement	 
>9609	CallExpression	Cell 
>9610	ArgumentList	false
>9611	Argument	false
>9612	Identifier	false
>9613	Callee	Cell 
>9614	Identifier	Cell 
>9615	ExpressionStatement	 
>9616	CallExpression	_cells . resize ( _nCells )
>9617	ArgumentList	_nCells
>9618	Argument	_nCells
>9619	Identifier	_nCells
>9620	Callee	_cells . resize
>9621	MemberAccess	_cells . resize
>9622	Identifier	resize
>9623	Identifier	_cells
>9624	ExpressionStatement	 
>9625	AssignmentExpr	_maxSynapsesPerSegment = - 1
>9626	UnaryOp	- 1
>9627	PrimaryExpression	1
>9628	UnaryOperator	-
>9629	Identifier	_maxSynapsesPerSegment
>9630	ExpressionStatement	 
>9631	AssignmentExpr	_maxSegmentsPerCell = - 1
>9632	UnaryOp	- 1
>9633	PrimaryExpression	1
>9634	UnaryOperator	-
>9635	Identifier	_maxSegmentsPerCell
>9636	ExpressionStatement	 
>9637	AssignmentExpr	_maxAge = 0
>9638	PrimaryExpression	0
>9639	Identifier	_maxAge
>9640	ExpressionStatement	 
>9641	AssignmentExpr	_verbosity = 0
>9642	PrimaryExpression	0
>9643	Identifier	_verbosity
>9644	ExpressionStatement	 
>9645	AssignmentExpr	_avgLearnedSeqLength = 0.0
>9646	PrimaryExpression	0.0
>9647	Identifier	_avgLearnedSeqLength
>9648	ExpressionStatement	 
>9649	AssignmentExpr	_learnedSeqLength = 0
>9650	PrimaryExpression	0
>9651	Identifier	_learnedSeqLength
>9652	ExpressionStatement	 
>9653	AssignmentExpr	_maxSeqLength = 0
>9654	PrimaryExpression	0
>9655	Identifier	_maxSeqLength
>9656	ExpressionStatement	 
>9657	AssignmentExpr	_maxLrnBacktrack = 5
>9658	PrimaryExpression	5
>9659	Identifier	_maxLrnBacktrack
>9660	ExpressionStatement	 
>9661	AssignmentExpr	_maxInfBacktrack = 10
>9662	PrimaryExpression	10
>9663	Identifier	_maxInfBacktrack
>9664	ExpressionStatement	 
>9665	AssignmentExpr	_pamCounter = _pamLength + 1
>9666	AdditiveExpression	_pamLength + 1
>9667	PrimaryExpression	1
>9668	Identifier	_pamLength
>9669	Identifier	_pamCounter
>9670	ExpressionStatement	 
>9671	AssignmentExpr	_nLrnIterations = 0
>9672	PrimaryExpression	0
>9673	Identifier	_nLrnIterations
>9674	ExpressionStatement	 
>9675	AssignmentExpr	_nIterations = 0
>9676	PrimaryExpression	0
>9677	Identifier	_nIterations
>9678	ExpressionStatement	 
>9679	AssignmentExpr	_avgInputDensity = 0
>9680	PrimaryExpression	0
>9681	Identifier	_avgInputDensity
>9682	ExpressionStatement	 
>9683	AssignmentExpr	_pamLength = 3
>9684	PrimaryExpression	3
>9685	Identifier	_pamLength
>9686	ExpressionStatement	 
>9687	AssignmentExpr	_resetCalled = false
>9688	Identifier	false
>9689	Identifier	_resetCalled
>9690	ExpressionStatement	 
>9691	AssignmentExpr	_doPooling = doPooling
>9692	Identifier	doPooling
>9693	Identifier	_doPooling
>9694	ExpressionStatement	 
>9695	AssignmentExpr	_globalDecay = globalDecay
>9696	Identifier	globalDecay
>9697	Identifier	_globalDecay
>9698	ExpressionStatement	 
>9699	AssignmentExpr	_permInc = permInc
>9700	Identifier	permInc
>9701	Identifier	_permInc
>9702	ExpressionStatement	 
>9703	AssignmentExpr	_permDec = permDec
>9704	Identifier	permDec
>9705	Identifier	_permDec
>9706	ExpressionStatement	 
>9707	AssignmentExpr	_permMax = permMax
>9708	Identifier	permMax
>9709	Identifier	_permMax
>9710	ExpressionStatement	 
>9711	AssignmentExpr	_permConnected = permConnected
>9712	Identifier	permConnected
>9713	Identifier	_permConnected
>9714	ExpressionStatement	 
>9715	AssignmentExpr	_permInitial = permInitial
>9716	Identifier	permInitial
>9717	Identifier	_permInitial
>9718	ExpressionStatement	 
>9719	AssignmentExpr	_initSegFreq = 0.5
>9720	PrimaryExpression	0.5
>9721	Identifier	_initSegFreq
>9722	ExpressionStatement	 
>9723	AssignmentExpr	_segUpdateValidDuration = segUpdateValidDuration
>9724	Identifier	segUpdateValidDuration
>9725	Identifier	_segUpdateValidDuration
>9726	ExpressionStatement	 
>9727	AssignmentExpr	_newSynapseCount = newSynapseCount
>9728	Identifier	newSynapseCount
>9729	Identifier	_newSynapseCount
>9730	ExpressionStatement	 
>9731	AssignmentExpr	_minThreshold = minThreshold
>9732	Identifier	minThreshold
>9733	Identifier	_minThreshold
>9734	ExpressionStatement	 
>9735	AssignmentExpr	_activationThreshold = activationThreshold
>9736	Identifier	activationThreshold
>9737	Identifier	_activationThreshold
>9738	ExpressionStatement	 
>9739	CallExpression	NTA_CHECK ( _nCells <= _MAX_CELLS )
>9740	ArgumentList	_nCells <= _MAX_CELLS
>9741	Argument	_nCells <= _MAX_CELLS
>9742	RelationalExpression	_nCells <= _MAX_CELLS
>9743	Identifier	_MAX_CELLS
>9744	Identifier	_nCells
>9745	Callee	NTA_CHECK
>9746	Identifier	NTA_CHECK
>9747	ExpressionStatement	 
>9748	AssignmentExpr	_nCells = nColumns * nCellsPerCol
>9749	MultiplicativeExpression	nColumns * nCellsPerCol
>9750	Identifier	nCellsPerCol
>9751	Identifier	nColumns
>9752	Identifier	_nCells
>9753	ExpressionStatement	 
>9754	AssignmentExpr	_nCellsPerCol = nCellsPerCol
>9755	Identifier	nCellsPerCol
>9756	Identifier	_nCellsPerCol
>9757	ExpressionStatement	 
>9758	AssignmentExpr	_nColumns = nColumns
>9759	Identifier	nColumns
>9760	Identifier	_nColumns
>9836	FunctionDef	Cells4 
>9837	ParameterList	 
>9838	ReturnType	UInt
>9839	CompoundStatement	 
>9840	ReturnStatement	 
>9841	Identifier	n
>9842	ForStatement	for ( UInt i = 0 ; i != _nCells ; ++ i )
>9843	ExpressionStatement	 
>9844	AssignmentExpr	n += _cells [ i ] . nSegments ( )
>9845	CallExpression	_cells [ i ] . nSegments ( )
>9846	ArgumentList	 
>9847	Callee	_cells [ i ] . nSegments
>9848	MemberAccess	_cells [ i ] . nSegments
>9849	Identifier	nSegments
>9850	ArrayIndexing	_cells [ i ]
>9851	Identifier	i
>9852	Identifier	_cells
>9853	Identifier	n
>9854	UnaryExpression	 
>9855	Identifier	i
>9856	IncDec	++
>9857	Condition	 
>9858	EqualityExpression	i != _nCells
>9859	Identifier	_nCells
>9860	Identifier	i
>9861	ForInit	 
>9862	IdentifierDeclStatement	UInt i = 0 ;
>9863	IdentifierDecl	i = 0
>9864	AssignmentExpr	i = 0
>9865	PrimaryExpression	0
>9866	Identifier	i
>9867	Identifier	i
>9868	IdentifierDeclType	UInt
>9869	IdentifierDeclStatement	 
>9870	IdentifierDecl	n = 0
>9871	AssignmentExpr	n = 0
>9872	PrimaryExpression	0
>9873	Identifier	n
>9874	Identifier	n
>9875	IdentifierDeclType	UInt
>9886	FunctionDef	Cells4 
>9887	ParameterList	UInt cellIdx
>9888	Parameter	 
>9889	Identifier	cellIdx
>9890	ParameterType	UInt
>9891	ReturnType	UInt
>9892	CompoundStatement	 
>9893	ReturnStatement	 
>9894	CallExpression	_cells [ cellIdx ] . size ( )
>9895	ArgumentList	 
>9896	Callee	_cells [ cellIdx ] . size
>9897	MemberAccess	_cells [ cellIdx ] . size
>9898	Identifier	size
>9899	ArrayIndexing	_cells [ cellIdx ]
>9900	Identifier	cellIdx
>9901	Identifier	_cells
>9902	ExpressionStatement	 
>9903	CallExpression	NTA_ASSERT ( cellIdx < _nCells )
>9904	ArgumentList	cellIdx < _nCells
>9905	Argument	cellIdx < _nCells
>9906	RelationalExpression	cellIdx < _nCells
>9907	Identifier	_nCells
>9908	Identifier	cellIdx
>9909	Callee	NTA_ASSERT
>9910	Identifier	NTA_ASSERT
>9920	FunctionDef	Cells4 
>9921	ParameterList	UInt colIdx , UInt cellIdxInCol
>9922	Parameter	 
>9923	Identifier	cellIdxInCol
>9924	ParameterType	UInt
>9925	Parameter	 
>9926	Identifier	colIdx
>9927	ParameterType	UInt
>9928	ReturnType	UInt
>9929	CompoundStatement	 
>9930	ReturnStatement	 
>9931	CallExpression	_cells [ colIdx * nCellsPerCol ( ) + cellIdxInCol ] . nSegments ( )
>9932	ArgumentList	 
>9933	Callee	_cells [ colIdx * nCellsPerCol ( ) + cellIdxInCol ] . nSegments
>9934	MemberAccess	_cells [ colIdx * nCellsPerCol ( ) + cellIdxInCol ] . nSegments
>9935	Identifier	nSegments
>9936	ArrayIndexing	_cells [ colIdx * nCellsPerCol ( ) + cellIdxInCol ]
>9937	AdditiveExpression	colIdx * nCellsPerCol ( ) + cellIdxInCol
>9938	Identifier	cellIdxInCol
>9939	MultiplicativeExpression	colIdx * nCellsPerCol ( )
>9940	CallExpression	nCellsPerCol ( )
>9941	ArgumentList	 
>9942	Callee	nCellsPerCol
>9943	Identifier	nCellsPerCol
>9944	Identifier	colIdx
>9945	Identifier	_cells
>9946	ExpressionStatement	 
>9947	CallExpression	NTA_ASSERT ( cellIdxInCol < nCellsPerCol ( ) )
>9948	ArgumentList	cellIdxInCol < nCellsPerCol ( )
>9949	Argument	cellIdxInCol < nCellsPerCol ( )
>9950	RelationalExpression	cellIdxInCol < nCellsPerCol ( )
>9951	CallExpression	nCellsPerCol ( )
>9952	ArgumentList	 
>9953	Callee	nCellsPerCol
>9954	Identifier	nCellsPerCol
>9955	Identifier	cellIdxInCol
>9956	Callee	NTA_ASSERT
>9957	Identifier	NTA_ASSERT
>9958	ExpressionStatement	 
>9959	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>9960	ArgumentList	colIdx < nColumns ( )
>9961	Argument	colIdx < nColumns ( )
>9962	RelationalExpression	colIdx < nColumns ( )
>9963	CallExpression	nColumns ( )
>9964	ArgumentList	 
>9965	Callee	nColumns
>9966	Identifier	nColumns
>9967	Identifier	colIdx
>9968	Callee	NTA_ASSERT
>9969	Identifier	NTA_ASSERT
>9983	FunctionDef	Cells4 
>9984	ParameterList	 
>9985	ReturnType	UInt
>9986	CompoundStatement	 
>9987	ReturnStatement	 
>9988	Identifier	n
>9989	ForStatement	for ( UInt i = 0 ; i != _nCells ; ++ i )
>9990	ExpressionStatement	 
>9991	AssignmentExpr	n += _cells [ i ] . nSynapses ( )
>9992	CallExpression	_cells [ i ] . nSynapses ( )
>9993	ArgumentList	 
>9994	Callee	_cells [ i ] . nSynapses
>9995	MemberAccess	_cells [ i ] . nSynapses
>9996	Identifier	nSynapses
>9997	ArrayIndexing	_cells [ i ]
>9998	Identifier	i
>9999	Identifier	_cells
>10000	Identifier	n
>10001	UnaryExpression	 
>10002	Identifier	i
>10003	IncDec	++
>10004	Condition	 
>10005	EqualityExpression	i != _nCells
>10006	Identifier	_nCells
>10007	Identifier	i
>10008	ForInit	 
>10009	IdentifierDeclStatement	UInt i = 0 ;
>10010	IdentifierDecl	i = 0
>10011	AssignmentExpr	i = 0
>10012	PrimaryExpression	0
>10013	Identifier	i
>10014	Identifier	i
>10015	IdentifierDeclType	UInt
>10016	IdentifierDeclStatement	 
>10017	IdentifierDecl	n = 0
>10018	AssignmentExpr	n = 0
>10019	PrimaryExpression	0
>10020	Identifier	n
>10021	Identifier	n
>10022	IdentifierDeclType	UInt
>10033	FunctionDef	Cells4 
>10034	ParameterList	UInt cellIdx
>10035	Parameter	 
>10036	Identifier	cellIdx
>10037	ParameterType	UInt
>10038	ReturnType	UInt
>10039	CompoundStatement	 
>10040	ReturnStatement	 
>10041	CallExpression	_cells [ cellIdx ] . nSynapses ( )
>10042	ArgumentList	 
>10043	Callee	_cells [ cellIdx ] . nSynapses
>10044	MemberAccess	_cells [ cellIdx ] . nSynapses
>10045	Identifier	nSynapses
>10046	ArrayIndexing	_cells [ cellIdx ]
>10047	Identifier	cellIdx
>10048	Identifier	_cells
>10049	ExpressionStatement	 
>10050	CallExpression	NTA_ASSERT ( cellIdx < nCells ( ) )
>10051	ArgumentList	cellIdx < nCells ( )
>10052	Argument	cellIdx < nCells ( )
>10053	RelationalExpression	cellIdx < nCells ( )
>10054	CallExpression	nCells ( )
>10055	ArgumentList	 
>10056	Callee	nCells
>10057	Identifier	nCells
>10058	Identifier	cellIdx
>10059	Callee	NTA_ASSERT
>10060	Identifier	NTA_ASSERT
>10070	FunctionDef	Cells4 
>10071	ParameterList	UInt colIdx , UInt cellIdxInCol
>10072	Parameter	 
>10073	Identifier	cellIdxInCol
>10074	ParameterType	UInt
>10075	Parameter	 
>10076	Identifier	colIdx
>10077	ParameterType	UInt
>10078	ReturnType	Cell *
>10079	CompoundStatement	 
>10080	ReturnStatement	 
>10081	UnaryOp	& _cells [ colIdx * _nCellsPerCol + cellIdxInCol ]
>10082	ArrayIndexing	_cells [ colIdx * _nCellsPerCol + cellIdxInCol ]
>10083	AdditiveExpression	colIdx * _nCellsPerCol + cellIdxInCol
>10084	Identifier	cellIdxInCol
>10085	MultiplicativeExpression	colIdx * _nCellsPerCol
>10086	Identifier	_nCellsPerCol
>10087	Identifier	colIdx
>10088	Identifier	_cells
>10089	UnaryOperator	&
>10090	ExpressionStatement	 
>10091	CallExpression	NTA_ASSERT ( cellIdxInCol < nCellsPerCol ( ) )
>10092	ArgumentList	cellIdxInCol < nCellsPerCol ( )
>10093	Argument	cellIdxInCol < nCellsPerCol ( )
>10094	RelationalExpression	cellIdxInCol < nCellsPerCol ( )
>10095	CallExpression	nCellsPerCol ( )
>10096	ArgumentList	 
>10097	Callee	nCellsPerCol
>10098	Identifier	nCellsPerCol
>10099	Identifier	cellIdxInCol
>10100	Callee	NTA_ASSERT
>10101	Identifier	NTA_ASSERT
>10102	ExpressionStatement	 
>10103	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>10104	ArgumentList	colIdx < nColumns ( )
>10105	Argument	colIdx < nColumns ( )
>10106	RelationalExpression	colIdx < nColumns ( )
>10107	CallExpression	nColumns ( )
>10108	ArgumentList	 
>10109	Callee	nColumns
>10110	Identifier	nColumns
>10111	Identifier	colIdx
>10112	Callee	NTA_ASSERT
>10113	Identifier	NTA_ASSERT
>10127	FunctionDef	Cells4 
>10128	ParameterList	UInt colIdx , UInt cellIdxInCol
>10129	Parameter	 
>10130	Identifier	cellIdxInCol
>10131	ParameterType	UInt
>10132	Parameter	 
>10133	Identifier	colIdx
>10134	ParameterType	UInt
>10135	ReturnType	UInt
>10136	CompoundStatement	 
>10137	ReturnStatement	 
>10138	AdditiveExpression	colIdx * _nCellsPerCol + cellIdxInCol
>10139	Identifier	cellIdxInCol
>10140	MultiplicativeExpression	colIdx * _nCellsPerCol
>10141	Identifier	_nCellsPerCol
>10142	Identifier	colIdx
>10143	ExpressionStatement	 
>10144	CallExpression	NTA_ASSERT ( cellIdxInCol < nCellsPerCol ( ) )
>10145	ArgumentList	cellIdxInCol < nCellsPerCol ( )
>10146	Argument	cellIdxInCol < nCellsPerCol ( )
>10147	RelationalExpression	cellIdxInCol < nCellsPerCol ( )
>10148	CallExpression	nCellsPerCol ( )
>10149	ArgumentList	 
>10150	Callee	nCellsPerCol
>10151	Identifier	nCellsPerCol
>10152	Identifier	cellIdxInCol
>10153	Callee	NTA_ASSERT
>10154	Identifier	NTA_ASSERT
>10155	ExpressionStatement	 
>10156	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>10157	ArgumentList	colIdx < nColumns ( )
>10158	Argument	colIdx < nColumns ( )
>10159	RelationalExpression	colIdx < nColumns ( )
>10160	CallExpression	nColumns ( )
>10161	ArgumentList	 
>10162	Callee	nColumns
>10163	Identifier	nColumns
>10164	Identifier	colIdx
>10165	Callee	NTA_ASSERT
>10166	Identifier	NTA_ASSERT
>10175	FunctionDef	Cells4 
>10176	ParameterList	UInt colIdx , UInt cellIdxInCol , UInt segIdx
>10177	Parameter	 
>10178	Identifier	segIdx
>10179	ParameterType	UInt
>10180	Parameter	 
>10181	Identifier	cellIdxInCol
>10182	ParameterType	UInt
>10183	Parameter	 
>10184	Identifier	colIdx
>10185	ParameterType	UInt
>10186	ReturnType	Segment *
>10187	CompoundStatement	 
>10188	ReturnStatement	 
>10189	UnaryOp	& segment ( cellIdx , segIdx )
>10190	CallExpression	segment ( cellIdx , segIdx )
>10191	ArgumentList	cellIdx
>10192	Argument	segIdx
>10193	Identifier	segIdx
>10194	Argument	cellIdx
>10195	Identifier	cellIdx
>10196	Callee	segment
>10197	Identifier	segment
>10198	UnaryOperator	&
>10199	ExpressionStatement	 
>10200	CallExpression	NTA_ASSERT ( segIdx < _cells [ cellIdx ] . size ( ) )
>10201	ArgumentList	segIdx < _cells [ cellIdx ] . size ( )
>10202	Argument	segIdx < _cells [ cellIdx ] . size ( )
>10203	RelationalExpression	segIdx < _cells [ cellIdx ] . size ( )
>10204	CallExpression	_cells [ cellIdx ] . size ( )
>10205	ArgumentList	 
>10206	Callee	_cells [ cellIdx ] . size
>10207	MemberAccess	_cells [ cellIdx ] . size
>10208	Identifier	size
>10209	ArrayIndexing	_cells [ cellIdx ]
>10210	Identifier	cellIdx
>10211	Identifier	_cells
>10212	Identifier	segIdx
>10213	Callee	NTA_ASSERT
>10214	Identifier	NTA_ASSERT
>10215	IdentifierDeclStatement	 
>10216	IdentifierDecl	cellIdx = colIdx * nCellsPerCol ( ) + cellIdxInCol
>10217	AssignmentExpr	cellIdx = colIdx * nCellsPerCol ( ) + cellIdxInCol
>10218	AdditiveExpression	colIdx * nCellsPerCol ( ) + cellIdxInCol
>10219	Identifier	cellIdxInCol
>10220	MultiplicativeExpression	colIdx * nCellsPerCol ( )
>10221	CallExpression	nCellsPerCol ( )
>10222	ArgumentList	 
>10223	Callee	nCellsPerCol
>10224	Identifier	nCellsPerCol
>10225	Identifier	colIdx
>10226	Identifier	cellIdx
>10227	Identifier	cellIdx
>10228	IdentifierDeclType	UInt
>10229	ExpressionStatement	 
>10230	CallExpression	NTA_ASSERT ( cellIdxInCol < nCellsPerCol ( ) )
>10231	ArgumentList	cellIdxInCol < nCellsPerCol ( )
>10232	Argument	cellIdxInCol < nCellsPerCol ( )
>10233	RelationalExpression	cellIdxInCol < nCellsPerCol ( )
>10234	CallExpression	nCellsPerCol ( )
>10235	ArgumentList	 
>10236	Callee	nCellsPerCol
>10237	Identifier	nCellsPerCol
>10238	Identifier	cellIdxInCol
>10239	Callee	NTA_ASSERT
>10240	Identifier	NTA_ASSERT
>10241	ExpressionStatement	 
>10242	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>10243	ArgumentList	colIdx < nColumns ( )
>10244	Argument	colIdx < nColumns ( )
>10245	RelationalExpression	colIdx < nColumns ( )
>10246	CallExpression	nColumns ( )
>10247	ArgumentList	 
>10248	Callee	nColumns
>10249	Identifier	nColumns
>10250	Identifier	colIdx
>10251	Callee	NTA_ASSERT
>10252	Identifier	NTA_ASSERT
>10267	FunctionDef	Cells4 
>10268	ParameterList	UInt cellIdx , UInt segIdx
>10269	Parameter	 
>10270	Identifier	segIdx
>10271	ParameterType	UInt
>10272	Parameter	 
>10273	Identifier	cellIdx
>10274	ParameterType	UInt
>10275	ReturnType	Segment &
>10276	CompoundStatement	 
>10277	ReturnStatement	 
>10278	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>10279	Identifier	segIdx
>10280	ArrayIndexing	_cells [ cellIdx ]
>10281	Identifier	cellIdx
>10282	Identifier	_cells
>10283	ExpressionStatement	 
>10284	CallExpression	NTA_ASSERT ( segIdx < _cells [ cellIdx ] . size ( ) )
>10285	ArgumentList	segIdx < _cells [ cellIdx ] . size ( )
>10286	Argument	segIdx < _cells [ cellIdx ] . size ( )
>10287	RelationalExpression	segIdx < _cells [ cellIdx ] . size ( )
>10288	CallExpression	_cells [ cellIdx ] . size ( )
>10289	ArgumentList	 
>10290	Callee	_cells [ cellIdx ] . size
>10291	MemberAccess	_cells [ cellIdx ] . size
>10292	Identifier	size
>10293	ArrayIndexing	_cells [ cellIdx ]
>10294	Identifier	cellIdx
>10295	Identifier	_cells
>10296	Identifier	segIdx
>10297	Callee	NTA_ASSERT
>10298	Identifier	NTA_ASSERT
>10299	ExpressionStatement	 
>10300	CallExpression	NTA_ASSERT ( cellIdx < nCells ( ) )
>10301	ArgumentList	cellIdx < nCells ( )
>10302	Argument	cellIdx < nCells ( )
>10303	RelationalExpression	cellIdx < nCells ( )
>10304	CallExpression	nCells ( )
>10305	ArgumentList	 
>10306	Callee	nCells
>10307	Identifier	nCells
>10308	Identifier	cellIdx
>10309	Callee	NTA_ASSERT
>10310	Identifier	NTA_ASSERT
>10324	FunctionDef	Cells4 
>10325	ParameterList	UInt colIdx , UInt cellIdxInCol
>10326	Parameter	 
>10327	Identifier	cellIdxInCol
>10328	ParameterType	UInt
>10329	Parameter	 
>10330	Identifier	colIdx
>10331	ParameterType	UInt
>10332	ReturnType	std 
>10333	CompoundStatement	 
>10334	ReturnStatement	 
>10335	CallExpression	_cells [ cellIdx ] . getNonEmptySegList ( )
>10336	ArgumentList	 
>10337	Callee	_cells [ cellIdx ] . getNonEmptySegList
>10338	MemberAccess	_cells [ cellIdx ] . getNonEmptySegList
>10339	Identifier	getNonEmptySegList
>10340	ArrayIndexing	_cells [ cellIdx ]
>10341	Identifier	cellIdx
>10342	Identifier	_cells
>10343	IdentifierDeclStatement	 
>10344	IdentifierDecl	cellIdx = colIdx * nCellsPerCol ( ) + cellIdxInCol
>10345	AssignmentExpr	cellIdx = colIdx * nCellsPerCol ( ) + cellIdxInCol
>10346	AdditiveExpression	colIdx * nCellsPerCol ( ) + cellIdxInCol
>10347	Identifier	cellIdxInCol
>10348	MultiplicativeExpression	colIdx * nCellsPerCol ( )
>10349	CallExpression	nCellsPerCol ( )
>10350	ArgumentList	 
>10351	Callee	nCellsPerCol
>10352	Identifier	nCellsPerCol
>10353	Identifier	colIdx
>10354	Identifier	cellIdx
>10355	Identifier	cellIdx
>10356	IdentifierDeclType	UInt
>10357	ExpressionStatement	 
>10358	CallExpression	NTA_ASSERT ( cellIdxInCol < nCellsPerCol ( ) )
>10359	ArgumentList	cellIdxInCol < nCellsPerCol ( )
>10360	Argument	cellIdxInCol < nCellsPerCol ( )
>10361	RelationalExpression	cellIdxInCol < nCellsPerCol ( )
>10362	CallExpression	nCellsPerCol ( )
>10363	ArgumentList	 
>10364	Callee	nCellsPerCol
>10365	Identifier	nCellsPerCol
>10366	Identifier	cellIdxInCol
>10367	Callee	NTA_ASSERT
>10368	Identifier	NTA_ASSERT
>10369	ExpressionStatement	 
>10370	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>10371	ArgumentList	colIdx < nColumns ( )
>10372	Argument	colIdx < nColumns ( )
>10373	RelationalExpression	colIdx < nColumns ( )
>10374	CallExpression	nColumns ( )
>10375	ArgumentList	 
>10376	Callee	nColumns
>10377	Identifier	nColumns
>10378	Identifier	colIdx
>10379	Callee	NTA_ASSERT
>10380	Identifier	NTA_ASSERT
>10393	FunctionDef	Cells4 
>10394	ParameterList	UInt colIdx , const CState & state , UInt minThreshold
>10395	Parameter	 
>10396	Identifier	minThreshold
>10397	ParameterType	UInt
>10398	Parameter	 
>10399	Identifier	state
>10400	ParameterType	const CState &
>10401	Parameter	 
>10402	Identifier	colIdx
>10403	ParameterType	UInt
>10404	ReturnType	std 
>10405	CompoundStatement	 
>10406	ReturnStatement	 
>10407	CallExpression	std 
>10408	ArgumentList	best_cell
>10409	Argument	best_seg
>10410	Identifier	best_seg
>10411	Argument	best_cell
>10412	Identifier	best_cell
>10413	Callee	std 
>10414	Identifier	std 
>10415	ForStatement	for ( int ii = end - 1 ; ii >= start ; -- ii )
>10416	CompoundStatement	 
>10417	IfStatement	if ( _learnActivity . get ( i ) > best_activity )
>10418	CompoundStatement	 
>10419	ForStatement	for ( UInt j = 0 ; j != _cells [ i ] . size ( ) ; ++ j )
>10420	CompoundStatement	 
>10421	IfStatement	if ( _verbosity >= 6 && activity >= minThreshold )
>10422	CompoundStatement	 
>10423	ExpressionStatement	 
>10424	ShiftExpression	std 
>10425	ShiftExpression	\"activity = \" << activity << \", maxSegActivity = \" << best_activity << \"\n\"
>10426	ShiftExpression	activity << \", maxSegActivity = \" << best_activity << \"\n\"
>10427	ShiftExpression	\", maxSegActivity = \" << best_activity << \"\n\"
>10428	ShiftExpression	best_activity << \"\n\"
>10429	PrimaryExpression	\"\n\"
>10430	Identifier	best_activity
>10431	PrimaryExpression	\", maxSegActivity = \"
>10432	Identifier	activity
>10433	PrimaryExpression	\"activity = \"
>10434	Identifier	std 
>10435	ExpressionStatement	 
>10436	ShiftExpression	std 
>10437	PrimaryExpression	\"\n\"
>10438	Identifier	std 
>10439	ExpressionStatement	 
>10440	CallExpression	_cells [ i ] [ j ] . print ( std 
>10441	ArgumentList	std 
>10442	Argument	_nCellsPerCol
>10443	Identifier	_nCellsPerCol
>10444	Argument	std 
>10445	Identifier	std 
>10446	Callee	_cells [ i ] [ j ] . print
>10447	MemberAccess	_cells [ i ] [ j ] . print
>10448	Identifier	print
>10449	ArrayIndexing	_cells [ i ] [ j ]
>10450	Identifier	j
>10451	ArrayIndexing	_cells [ i ]
>10452	Identifier	i
>10453	Identifier	_cells
>10454	ExpressionStatement	 
>10455	ShiftExpression	std 
>10456	ShiftExpression	\"getBestMatchingCell, learning on col=\" << colIdx << \", segment
>10457	ShiftExpression	colIdx << \", segment
>10458	PrimaryExpression	\", segment
>10459	Identifier	colIdx
>10460	PrimaryExpression	\"getBestMatchingCell, learning on col=\"
>10461	Identifier	std 
>10462	Condition	 
>10463	AndExpression	_verbosity >= 6 && activity >= minThreshold
>10464	RelationalExpression	activity >= minThreshold
>10465	Identifier	minThreshold
>10466	Identifier	activity
>10467	RelationalExpression	_verbosity >= 6
>10468	PrimaryExpression	6
>10469	Identifier	_verbosity
>10470	IfStatement	if ( best_activity < activity )
>10471	CompoundStatement	 
>10472	ExpressionStatement	 
>10473	AssignmentExpr	best_seg = j
>10474	Identifier	j
>10475	Identifier	best_seg
>10476	ExpressionStatement	 
>10477	AssignmentExpr	best_cell = i
>10478	Identifier	i
>10479	Identifier	best_cell
>10480	ExpressionStatement	 
>10481	AssignmentExpr	best_activity = activity
>10482	Identifier	activity
>10483	Identifier	best_activity
>10484	Condition	 
>10485	RelationalExpression	best_activity < activity
>10486	Identifier	activity
>10487	Identifier	best_activity
>10488	IdentifierDeclStatement	 
>10489	IdentifierDecl	activity = _learnActivity . get ( i , j )
>10490	AssignmentExpr	activity = _learnActivity . get ( i , j )
>10491	CallExpression	_learnActivity . get ( i , j )
>10492	ArgumentList	i
>10493	Argument	j
>10494	Identifier	j
>10495	Argument	i
>10496	Identifier	i
>10497	Callee	_learnActivity . get
>10498	MemberAccess	_learnActivity . get
>10499	Identifier	get
>10500	Identifier	_learnActivity
>10501	Identifier	activity
>10502	Identifier	activity
>10503	IdentifierDeclType	UInt
>10504	UnaryExpression	 
>10505	Identifier	j
>10506	IncDec	++
>10507	Condition	 
>10508	EqualityExpression	j != _cells [ i ] . size ( )
>10509	CallExpression	_cells [ i ] . size ( )
>10510	ArgumentList	 
>10511	Callee	_cells [ i ] . size
>10512	MemberAccess	_cells [ i ] . size
>10513	Identifier	size
>10514	ArrayIndexing	_cells [ i ]
>10515	Identifier	i
>10516	Identifier	_cells
>10517	Identifier	j
>10518	ForInit	 
>10519	IdentifierDeclStatement	UInt j = 0 ;
>10520	IdentifierDecl	j = 0
>10521	AssignmentExpr	j = 0
>10522	PrimaryExpression	0
>10523	Identifier	j
>10524	Identifier	j
>10525	IdentifierDeclType	UInt
>10526	Condition	 
>10527	RelationalExpression	_learnActivity . get ( i ) > best_activity
>10528	Identifier	best_activity
>10529	CallExpression	_learnActivity . get ( i )
>10530	ArgumentList	i
>10531	Argument	i
>10532	Identifier	i
>10533	Callee	_learnActivity . get
>10534	MemberAccess	_learnActivity . get
>10535	Identifier	get
>10536	Identifier	_learnActivity
>10537	IfStatement	if ( _checkSynapseConsistency )
>10538	CompoundStatement	 
>10539	ForStatement	for ( UInt j = 0 ; j != _cells [ i ] . size ( ) ; ++ j )
>10540	CompoundStatement	 
>10541	ExpressionStatement	 
>10542	CallExpression	NTA_CHECK ( segment ( i , j ) . computeActivity ( state , _permConnected , false ) == _learnActivity . get ( i , \
>10543	ArgumentList	segment ( i , j ) . computeActivity ( state , _permConnected , false ) == _learnActivity . get ( i , j )
>10544	Argument	segment ( i , j ) . computeActivity ( state , _permConnected , false ) == _learnActivity . get ( i , j )
>10545	EqualityExpression	segment ( i , j ) . computeActivity ( state , _permConnected , false ) == _learnActivity . get ( i , \
>10546	CallExpression	_learnActivity . get ( i , j )
>10547	ArgumentList	i
>10548	Argument	j
>10549	Identifier	j
>10550	Argument	i
>10551	Identifier	i
>10552	Callee	_learnActivity . get
>10553	MemberAccess	_learnActivity . get
>10554	Identifier	get
>10555	Identifier	_learnActivity
>10556	CallExpression	segment ( i , j ) . computeActivity ( state , _permConnected , false )
>10557	ArgumentList	state
>10558	Argument	false
>10559	Identifier	false
>10560	Argument	_permConnected
>10561	Identifier	_permConnected
>10562	Argument	state
>10563	Identifier	state
>10564	Callee	segment ( i , j ) . computeActivity
>10565	MemberAccess	segment ( i , j ) . computeActivity
>10566	Identifier	computeActivity
>10567	CallExpression	segment ( i , j )
>10568	ArgumentList	i
>10569	Argument	j
>10570	Identifier	j
>10571	Argument	i
>10572	Identifier	i
>10573	Callee	segment
>10574	Identifier	segment
>10575	Callee	NTA_CHECK
>10576	Identifier	NTA_CHECK
>10577	UnaryExpression	 
>10578	Identifier	j
>10579	IncDec	++
>10580	Condition	 
>10581	EqualityExpression	j != _cells [ i ] . size ( )
>10582	CallExpression	_cells [ i ] . size ( )
>10583	ArgumentList	 
>10584	Callee	_cells [ i ] . size
>10585	MemberAccess	_cells [ i ] . size
>10586	Identifier	size
>10587	ArrayIndexing	_cells [ i ]
>10588	Identifier	i
>10589	Identifier	_cells
>10590	Identifier	j
>10591	ForInit	 
>10592	IdentifierDeclStatement	UInt j = 0 ;
>10593	IdentifierDecl	j = 0
>10594	AssignmentExpr	j = 0
>10595	PrimaryExpression	0
>10596	Identifier	j
>10597	Identifier	j
>10598	IdentifierDeclType	UInt
>10599	Condition	 
>10600	Identifier	_checkSynapseConsistency
>10601	IdentifierDeclStatement	 
>10602	IdentifierDecl	i = UInt ( ii )
>10603	AssignmentExpr	i = UInt ( ii )
>10604	CallExpression	UInt ( ii )
>10605	ArgumentList	ii
>10606	Argument	ii
>10607	Identifier	ii
>10608	Callee	UInt
>10609	Identifier	UInt
>10610	Identifier	i
>10611	Identifier	i
>10612	IdentifierDeclType	UInt
>10613	UnaryExpression	 
>10614	Identifier	ii
>10615	IncDec	--
>10616	Condition	 
>10617	RelationalExpression	ii >= start
>10618	Identifier	start
>10619	Identifier	ii
>10620	ForInit	 
>10621	IdentifierDeclStatement	int ii = end - 1 ;
>10622	IdentifierDecl	ii = end - 1
>10623	AssignmentExpr	ii = end - 1
>10624	AdditiveExpression	end - 1
>10625	PrimaryExpression	1
>10626	Identifier	end
>10627	Identifier	ii
>10628	Identifier	ii
>10629	IdentifierDeclType	int
>10630	IdentifierDeclStatement	 
>10631	IdentifierDecl	best_activity = minThreshold > 0 ? minThreshold - 1 
>10632	AssignmentExpr	best_activity = minThreshold > 0 ? minThreshold - 1 
>10633	ConditionalExpression	minThreshold > 0 ? minThreshold - 1 
>10634	PrimaryExpression	0
>10635	AdditiveExpression	minThreshold - 1
>10636	PrimaryExpression	1
>10637	Identifier	minThreshold
>10638	Condition	minThreshold > 0
>10639	RelationalExpression	minThreshold > 0
>10640	PrimaryExpression	0
>10641	Identifier	minThreshold
>10642	Identifier	best_activity
>10643	Identifier	best_activity
>10644	IdentifierDeclType	UInt
>10645	IdentifierDeclStatement	 
>10646	IdentifierDecl	best_seg = UInt ( - 1 )
>10647	AssignmentExpr	best_seg = UInt ( - 1 )
>10648	CallExpression	UInt ( - 1 )
>10649	ArgumentList	- 1
>10650	Argument	- 1
>10651	UnaryOp	- 1
>10652	PrimaryExpression	1
>10653	UnaryOperator	-
>10654	Callee	UInt
>10655	Identifier	UInt
>10656	Identifier	best_seg
>10657	Identifier	best_seg
>10658	IdentifierDeclType	UInt
>10659	IdentifierDeclStatement	 
>10660	IdentifierDecl	best_cell = UInt ( - 1 )
>10661	AssignmentExpr	best_cell = UInt ( - 1 )
>10662	CallExpression	UInt ( - 1 )
>10663	ArgumentList	- 1
>10664	Argument	- 1
>10665	UnaryOp	- 1
>10666	PrimaryExpression	1
>10667	UnaryOperator	-
>10668	Callee	UInt
>10669	Identifier	UInt
>10670	Identifier	best_cell
>10671	Identifier	best_cell
>10672	IdentifierDeclType	UInt
>10673	IdentifierDeclStatement	 
>10674	IdentifierDecl	end = start + _nCellsPerCol
>10675	AssignmentExpr	end = start + _nCellsPerCol
>10676	AdditiveExpression	start + _nCellsPerCol
>10677	Identifier	_nCellsPerCol
>10678	Identifier	start
>10679	Identifier	end
>10680	Identifier	end
>10681	IdentifierDeclType	int
>10682	IdentifierDecl	start = colIdx * _nCellsPerCol
>10683	AssignmentExpr	start = colIdx * _nCellsPerCol
>10684	MultiplicativeExpression	colIdx * _nCellsPerCol
>10685	Identifier	_nCellsPerCol
>10686	Identifier	colIdx
>10687	Identifier	start
>10688	Identifier	start
>10689	IdentifierDeclType	int
>10690	CompoundStatement	 
>10691	ExpressionStatement	 
>10692	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>10693	ArgumentList	colIdx < nColumns ( )
>10694	Argument	colIdx < nColumns ( )
>10695	RelationalExpression	colIdx < nColumns ( )
>10696	CallExpression	nColumns ( )
>10697	ArgumentList	 
>10698	Callee	nColumns
>10699	Identifier	nColumns
>10700	Identifier	colIdx
>10701	Callee	NTA_ASSERT
>10702	Identifier	NTA_ASSERT
>10738	FunctionDef	Cells4 
>10739	ParameterList	UInt colIdx , const CState & state , UInt minThreshold
>10740	Parameter	 
>10741	Identifier	minThreshold
>10742	ParameterType	UInt
>10743	Parameter	 
>10744	Identifier	state
>10745	ParameterType	const CState &
>10746	Parameter	 
>10747	Identifier	colIdx
>10748	ParameterType	UInt
>10749	ReturnType	std 
>10750	CompoundStatement	 
>10751	IfStatement	if ( best_cell != ( UInt ) - 1 )
>10752	ElseStatement	else
>10753	ReturnStatement	 
>10754	CallExpression	std 
>10755	ArgumentList	( UInt ) - 1
>10756	Argument	( UInt ) - 1
>10757	CastExpression	( UInt ) - 1
>10758	UnaryOp	- 1
>10759	PrimaryExpression	1
>10760	UnaryOperator	-
>10761	CastTarget	UInt
>10762	Argument	( UInt ) - 1
>10763	CastExpression	( UInt ) - 1
>10764	UnaryOp	- 1
>10765	PrimaryExpression	1
>10766	UnaryOperator	-
>10767	CastTarget	UInt
>10768	Callee	std 
>10769	Identifier	std 
>10770	ReturnStatement	 
>10771	CallExpression	std 
>10772	ArgumentList	best_cell
>10773	Argument	best . first
>10774	MemberAccess	best . first
>10775	Identifier	first
>10776	Identifier	best
>10777	Argument	best_cell
>10778	Identifier	best_cell
>10779	Callee	std 
>10780	Identifier	std 
>10781	Condition	 
>10782	EqualityExpression	best_cell != ( UInt ) - 1
>10783	CastExpression	( UInt ) - 1
>10784	UnaryOp	- 1
>10785	PrimaryExpression	1
>10786	UnaryOperator	-
>10787	CastTarget	UInt
>10788	Identifier	best_cell
>10789	ForStatement	for ( UInt i = start ; i != end ; ++ i )
>10790	CompoundStatement	 
>10791	IfStatement	if ( maxSegActivity >= best . second )
>10792	CompoundStatement	 
>10793	ExpressionStatement	 
>10794	AssignmentExpr	best_cell = i
>10795	Identifier	i
>10796	Identifier	best_cell
>10797	ExpressionStatement	 
>10798	AssignmentExpr	best = std 
>10799	CallExpression	std 
>10800	ArgumentList	maxSegIdx
>10801	Argument	maxSegActivity
>10802	Identifier	maxSegActivity
>10803	Argument	maxSegIdx
>10804	Identifier	maxSegIdx
>10805	Callee	std 
>10806	Identifier	std 
>10807	Identifier	best
>10808	Condition	 
>10809	RelationalExpression	maxSegActivity >= best . second
>10810	MemberAccess	best . second
>10811	Identifier	second
>10812	Identifier	best
>10813	Identifier	maxSegActivity
>10814	ForStatement	for ( UInt j = 0 ; j != _cells [ i ] . size ( ) ; ++ j )
>10815	CompoundStatement	 
>10816	IfStatement	if ( _verbosity >= 6 && activity >= minThreshold )
>10817	CompoundStatement	 
>10818	ExpressionStatement	 
>10819	ShiftExpression	std 
>10820	ShiftExpression	\"activity = \" << activity << \", maxSegActivity = \" << maxSegActivity << \"\n\"
>10821	ShiftExpression	activity << \", maxSegActivity = \" << maxSegActivity << \"\n\"
>10822	ShiftExpression	\", maxSegActivity = \" << maxSegActivity << \"\n\"
>10823	ShiftExpression	maxSegActivity << \"\n\"
>10824	PrimaryExpression	\"\n\"
>10825	Identifier	maxSegActivity
>10826	PrimaryExpression	\", maxSegActivity = \"
>10827	Identifier	activity
>10828	PrimaryExpression	\"activity = \"
>10829	Identifier	std 
>10830	ExpressionStatement	 
>10831	ShiftExpression	std 
>10832	PrimaryExpression	\"\n\"
>10833	Identifier	std 
>10834	ExpressionStatement	 
>10835	CallExpression	_cells [ i ] [ j ] . print ( std 
>10836	ArgumentList	std 
>10837	Argument	_nCellsPerCol
>10838	Identifier	_nCellsPerCol
>10839	Argument	std 
>10840	Identifier	std 
>10841	Callee	_cells [ i ] [ j ] . print
>10842	MemberAccess	_cells [ i ] [ j ] . print
>10843	Identifier	print
>10844	ArrayIndexing	_cells [ i ] [ j ]
>10845	Identifier	j
>10846	ArrayIndexing	_cells [ i ]
>10847	Identifier	i
>10848	Identifier	_cells
>10849	ExpressionStatement	 
>10850	ShiftExpression	std 
>10851	ShiftExpression	\"getBestMatchingCell, learning on col=\" << colIdx << \", segment
>10852	ShiftExpression	colIdx << \", segment
>10853	PrimaryExpression	\", segment
>10854	Identifier	colIdx
>10855	PrimaryExpression	\"getBestMatchingCell, learning on col=\"
>10856	Identifier	std 
>10857	Condition	 
>10858	AndExpression	_verbosity >= 6 && activity >= minThreshold
>10859	RelationalExpression	activity >= minThreshold
>10860	Identifier	minThreshold
>10861	Identifier	activity
>10862	RelationalExpression	_verbosity >= 6
>10863	PrimaryExpression	6
>10864	Identifier	_verbosity
>10865	IfStatement	if ( activity > maxSegActivity )
>10866	CompoundStatement	 
>10867	ExpressionStatement	 
>10868	AssignmentExpr	maxSegIdx = j
>10869	Identifier	j
>10870	Identifier	maxSegIdx
>10871	ExpressionStatement	 
>10872	AssignmentExpr	maxSegActivity = activity
>10873	Identifier	activity
>10874	Identifier	maxSegActivity
>10875	Condition	 
>10876	RelationalExpression	activity > maxSegActivity
>10877	Identifier	maxSegActivity
>10878	Identifier	activity
>10879	ExpressionStatement	 
>10880	AssignmentExpr	activity = segment ( i , j ) . computeActivity ( state , _permConnected , false )
>10881	CallExpression	segment ( i , j ) . computeActivity ( state , _permConnected , false )
>10882	ArgumentList	state
>10883	Argument	false
>10884	Identifier	false
>10885	Argument	_permConnected
>10886	Identifier	_permConnected
>10887	Argument	state
>10888	Identifier	state
>10889	Callee	segment ( i , j ) . computeActivity
>10890	MemberAccess	segment ( i , j ) . computeActivity
>10891	Identifier	computeActivity
>10892	CallExpression	segment ( i , j )
>10893	ArgumentList	i
>10894	Argument	j
>10895	Identifier	j
>10896	Argument	i
>10897	Identifier	i
>10898	Callee	segment
>10899	Identifier	segment
>10900	Identifier	activity
>10901	IfStatement	if ( segment ( i , j ) . empty ( ) )
>10902	ContinueStatement	 
>10903	Condition	 
>10904	CallExpression	segment ( i , j ) . empty ( )
>10905	ArgumentList	 
>10906	Callee	segment ( i , j ) . empty
>10907	MemberAccess	segment ( i , j ) . empty
>10908	Identifier	empty
>10909	CallExpression	segment ( i , j )
>10910	ArgumentList	i
>10911	Argument	j
>10912	Identifier	j
>10913	Argument	i
>10914	Identifier	i
>10915	Callee	segment
>10916	Identifier	segment
>10917	UnaryExpression	 
>10918	Identifier	j
>10919	IncDec	++
>10920	Condition	 
>10921	EqualityExpression	j != _cells [ i ] . size ( )
>10922	CallExpression	_cells [ i ] . size ( )
>10923	ArgumentList	 
>10924	Callee	_cells [ i ] . size
>10925	MemberAccess	_cells [ i ] . size
>10926	Identifier	size
>10927	ArrayIndexing	_cells [ i ]
>10928	Identifier	i
>10929	Identifier	_cells
>10930	Identifier	j
>10931	ForInit	 
>10932	IdentifierDeclStatement	UInt j = 0 ;
>10933	IdentifierDecl	j = 0
>10934	AssignmentExpr	j = 0
>10935	PrimaryExpression	0
>10936	Identifier	j
>10937	Identifier	j
>10938	IdentifierDeclType	UInt
>10939	IdentifierDeclStatement	 
>10940	IdentifierDecl	activity = 0
>10941	AssignmentExpr	activity = 0
>10942	PrimaryExpression	0
>10943	Identifier	activity
>10944	Identifier	activity
>10945	IdentifierDeclType	UInt
>10946	IdentifierDecl	maxSegIdx = 0
>10947	AssignmentExpr	maxSegIdx = 0
>10948	PrimaryExpression	0
>10949	Identifier	maxSegIdx
>10950	Identifier	maxSegIdx
>10951	IdentifierDeclType	UInt
>10952	IdentifierDecl	maxSegActivity = 0
>10953	AssignmentExpr	maxSegActivity = 0
>10954	PrimaryExpression	0
>10955	Identifier	maxSegActivity
>10956	Identifier	maxSegActivity
>10957	IdentifierDeclType	UInt
>10958	UnaryExpression	 
>10959	Identifier	i
>10960	IncDec	++
>10961	Condition	 
>10962	EqualityExpression	i != end
>10963	Identifier	end
>10964	Identifier	i
>10965	ForInit	 
>10966	IdentifierDeclStatement	UInt i = start ;
>10967	IdentifierDecl	i = start
>10968	AssignmentExpr	i = start
>10969	Identifier	start
>10970	Identifier	start
>10971	Identifier	i
>10972	IdentifierDeclType	UInt
>10973	IdentifierDeclStatement	 
>10974	IdentifierDecl	best ( ( UInt ) - 1 , minThreshold )
>10975	Expression	( UInt ) - 1 , minThreshold
>10976	Identifier	minThreshold
>10977	CastExpression	( UInt ) - 1
>10978	UnaryOp	- 1
>10979	PrimaryExpression	1
>10980	UnaryOperator	-
>10981	CastTarget	UInt
>10982	Identifier	best
>10983	IdentifierDeclType	std 
>10984	IdentifierDeclStatement	 
>10985	IdentifierDecl	best_cell = ( UInt ) - 1
>10986	AssignmentExpr	best_cell = ( UInt ) - 1
>10987	CastExpression	( UInt ) - 1
>10988	UnaryOp	- 1
>10989	PrimaryExpression	1
>10990	UnaryOperator	-
>10991	CastTarget	UInt
>10992	Identifier	best_cell
>10993	Identifier	best_cell
>10994	IdentifierDeclType	UInt
>10995	IdentifierDeclStatement	 
>10996	IdentifierDecl	end = start + _nCellsPerCol
>10997	AssignmentExpr	end = start + _nCellsPerCol
>10998	AdditiveExpression	start + _nCellsPerCol
>10999	Identifier	_nCellsPerCol
>11000	Identifier	start
>11001	Identifier	end
>11002	Identifier	end
>11003	IdentifierDeclType	UInt
>11004	IdentifierDecl	start = colIdx * _nCellsPerCol
>11005	AssignmentExpr	start = colIdx * _nCellsPerCol
>11006	MultiplicativeExpression	colIdx * _nCellsPerCol
>11007	Identifier	_nCellsPerCol
>11008	Identifier	colIdx
>11009	Identifier	start
>11010	Identifier	start
>11011	IdentifierDeclType	UInt
>11012	CompoundStatement	 
>11013	ExpressionStatement	 
>11014	CallExpression	NTA_ASSERT ( colIdx < nColumns ( ) )
>11015	ArgumentList	colIdx < nColumns ( )
>11016	Argument	colIdx < nColumns ( )
>11017	RelationalExpression	colIdx < nColumns ( )
>11018	CallExpression	nColumns ( )
>11019	ArgumentList	 
>11020	Callee	nColumns
>11021	Identifier	nColumns
>11022	Identifier	colIdx
>11023	Callee	NTA_ASSERT
>11024	Identifier	NTA_ASSERT
>11059	FunctionDef	Cells4 
>11060	ParameterList	UInt cellIdx , UInt segIdx , UInt nSynToAdd , CStateIndexed & state , std 
>11061	Parameter	 
>11062	Identifier	srcCells
>11063	ParameterType	std 
>11064	Parameter	 
>11065	Identifier	state
>11066	ParameterType	CStateIndexed &
>11067	Parameter	 
>11068	Identifier	nSynToAdd
>11069	ParameterType	UInt
>11070	Parameter	 
>11071	Identifier	segIdx
>11072	ParameterType	UInt
>11073	Parameter	 
>11074	Identifier	cellIdx
>11075	ParameterType	UInt
>11076	ReturnType	void
>11077	CompoundStatement	 
>11078	ExpressionStatement	 
>11079	CallExpression	TIMER ( chooseCellsTimer . stop ( ) )
>11080	ArgumentList	chooseCellsTimer . stop ( )
>11081	Argument	chooseCellsTimer . stop ( )
>11082	CallExpression	chooseCellsTimer . stop ( )
>11083	ArgumentList	 
>11084	Callee	chooseCellsTimer . stop
>11085	MemberAccess	chooseCellsTimer . stop
>11086	Identifier	stop
>11087	Identifier	chooseCellsTimer
>11088	Callee	TIMER
>11089	Identifier	TIMER
>11090	IfStatement	if ( fSortNeeded )
>11091	ExpressionStatement	 
>11092	CallExpression	std 
>11093	ArgumentList	srcCells . begin ( )
>11094	Argument	srcCells . end ( )
>11095	CallExpression	srcCells . end ( )
>11096	ArgumentList	 
>11097	Callee	srcCells . end
>11098	MemberAccess	srcCells . end
>11099	Identifier	end
>11100	Identifier	srcCells
>11101	Argument	srcCells . begin ( )
>11102	CallExpression	srcCells . begin ( )
>11103	ArgumentList	 
>11104	Callee	srcCells . begin
>11105	MemberAccess	srcCells . begin
>11106	Identifier	begin
>11107	Identifier	srcCells
>11108	Callee	std 
>11109	Identifier	std 
>11110	Condition	 
>11111	Identifier	fSortNeeded
>11112	IfStatement	if ( nbrCells <= nSynToAdd )
>11113	ElseStatement	else
>11114	IfStatement	if ( nSynToAdd == 1 )
>11115	ElseStatement	else
>11116	CompoundStatement	 
>11117	ExpressionStatement	 
>11118	AssignmentExpr	fSortNeeded = true
>11119	Identifier	true
>11120	Identifier	fSortNeeded
>11121	ExpressionStatement	 
>11122	CallExpression	srcCells . insert ( srcCells . end ( ) , vecPruned . begin ( ) , vecPruned . begin ( ) + nSynToAdd )
>11123	ArgumentList	srcCells . end ( )
>11124	Argument	vecPruned . begin ( ) + nSynToAdd
>11125	AdditiveExpression	vecPruned . begin ( ) + nSynToAdd
>11126	Identifier	nSynToAdd
>11127	CallExpression	vecPruned . begin ( )
>11128	ArgumentList	 
>11129	Callee	vecPruned . begin
>11130	MemberAccess	vecPruned . begin
>11131	Identifier	begin
>11132	Identifier	vecPruned
>11133	Argument	vecPruned . begin ( )
>11134	CallExpression	vecPruned . begin ( )
>11135	ArgumentList	 
>11136	Callee	vecPruned . begin
>11137	MemberAccess	vecPruned . begin
>11138	Identifier	begin
>11139	Identifier	vecPruned
>11140	Argument	srcCells . end ( )
>11141	CallExpression	srcCells . end ( )
>11142	ArgumentList	 
>11143	Callee	srcCells . end
>11144	MemberAccess	srcCells . end
>11145	Identifier	end
>11146	Identifier	srcCells
>11147	Callee	srcCells . insert
>11148	MemberAccess	srcCells . insert
>11149	Identifier	insert
>11150	Identifier	srcCells
>11151	ExpressionStatement	 
>11152	CallExpression	std 
>11153	ArgumentList	vecPruned . begin ( )
>11154	Argument	_rng
>11155	Identifier	_rng
>11156	Argument	vecPruned . end ( )
>11157	CallExpression	vecPruned . end ( )
>11158	ArgumentList	 
>11159	Callee	vecPruned . end
>11160	MemberAccess	vecPruned . end
>11161	Identifier	end
>11162	Identifier	vecPruned
>11163	Argument	vecPruned . begin ( )
>11164	CallExpression	vecPruned . begin ( )
>11165	ArgumentList	 
>11166	Callee	vecPruned . begin
>11167	MemberAccess	vecPruned . begin
>11168	Identifier	begin
>11169	Identifier	vecPruned
>11170	Callee	std 
>11171	Identifier	std 
>11172	CompoundStatement	 
>11173	ExpressionStatement	 
>11174	CallExpression	srcCells . push_back ( vecPruned [ _rng . getUInt32 ( nbrCells ) ] )
>11175	ArgumentList	vecPruned [ _rng . getUInt32 ( nbrCells ) ]
>11176	Argument	vecPruned [ _rng . getUInt32 ( nbrCells ) ]
>11177	ArrayIndexing	vecPruned [ _rng . getUInt32 ( nbrCells ) ]
>11178	CallExpression	_rng . getUInt32 ( nbrCells )
>11179	ArgumentList	nbrCells
>11180	Argument	nbrCells
>11181	Identifier	nbrCells
>11182	Callee	_rng . getUInt32
>11183	MemberAccess	_rng . getUInt32
>11184	Identifier	getUInt32
>11185	Identifier	_rng
>11186	Identifier	vecPruned
>11187	Callee	srcCells . push_back
>11188	MemberAccess	srcCells . push_back
>11189	Identifier	push_back
>11190	Identifier	srcCells
>11191	Condition	 
>11192	EqualityExpression	nSynToAdd == 1
>11193	PrimaryExpression	1
>11194	Identifier	nSynToAdd
>11195	CompoundStatement	 
>11196	ForStatement	for ( iterCellBuffer = vecPruned . begin ( ) ; iterCellBuffer != vecPruned . end ( ) ; ++ iterCellBuffer )
>11197	CompoundStatement	 
>11198	ExpressionStatement	 
>11199	CallExpression	srcCells . push_back ( * iterCellBuffer )
>11200	ArgumentList	* iterCellBuffer
>11201	Argument	* iterCellBuffer
>11202	UnaryOp	* iterCellBuffer
>11203	Identifier	iterCellBuffer
>11204	UnaryOperator	*
>11205	Callee	srcCells . push_back
>11206	MemberAccess	srcCells . push_back
>11207	Identifier	push_back
>11208	Identifier	srcCells
>11209	UnaryExpression	 
>11210	Identifier	iterCellBuffer
>11211	IncDec	++
>11212	Condition	 
>11213	EqualityExpression	iterCellBuffer != vecPruned . end ( )
>11214	CallExpression	vecPruned . end ( )
>11215	ArgumentList	 
>11216	Callee	vecPruned . end
>11217	MemberAccess	vecPruned . end
>11218	Identifier	end
>11219	Identifier	vecPruned
>11220	Identifier	iterCellBuffer
>11221	ForInit	 
>11222	AssignmentExpr	iterCellBuffer = vecPruned . begin ( )
>11223	CallExpression	vecPruned . begin ( )
>11224	ArgumentList	 
>11225	Callee	vecPruned . begin
>11226	MemberAccess	vecPruned . begin
>11227	Identifier	begin
>11228	Identifier	vecPruned
>11229	Identifier	iterCellBuffer
>11230	IdentifierDeclStatement	 
>11231	IdentifierDecl	iterCellBuffer
>11232	Identifier	iterCellBuffer
>11233	IdentifierDeclType	std 
>11234	ExpressionStatement	 
>11235	CallExpression	srcCells . reserve ( nbrCells + srcCells . size ( ) )
>11236	ArgumentList	nbrCells + srcCells . size ( )
>11237	Argument	nbrCells + srcCells . size ( )
>11238	AdditiveExpression	nbrCells + srcCells . size ( )
>11239	CallExpression	srcCells . size ( )
>11240	ArgumentList	 
>11241	Callee	srcCells . size
>11242	MemberAccess	srcCells . size
>11243	Identifier	size
>11244	Identifier	srcCells
>11245	Identifier	nbrCells
>11246	Callee	srcCells . reserve
>11247	MemberAccess	srcCells . reserve
>11248	Identifier	reserve
>11249	Identifier	srcCells
>11250	Condition	 
>11251	RelationalExpression	nbrCells <= nSynToAdd
>11252	Identifier	nSynToAdd
>11253	Identifier	nbrCells
>11254	IdentifierDeclStatement	 
>11255	IdentifierDecl	fSortNeeded = srcCells . size ( ) > 0
>11256	AssignmentExpr	fSortNeeded = srcCells . size ( ) > 0
>11257	RelationalExpression	srcCells . size ( ) > 0
>11258	PrimaryExpression	0
>11259	CallExpression	srcCells . size ( )
>11260	ArgumentList	 
>11261	Callee	srcCells . size
>11262	MemberAccess	srcCells . size
>11263	Identifier	size
>11264	Identifier	srcCells
>11265	Identifier	fSortNeeded
>11266	Identifier	fSortNeeded
>11267	IdentifierDeclType	bool
>11268	IfStatement	if ( nbrCells == 0 )
>11269	CompoundStatement	 
>11270	ReturnStatement	 
>11271	ExpressionStatement	 
>11272	CallExpression	TIMER ( chooseCellsTimer . stop ( ) )
>11273	ArgumentList	chooseCellsTimer . stop ( )
>11274	Argument	chooseCellsTimer . stop ( )
>11275	CallExpression	chooseCellsTimer . stop ( )
>11276	ArgumentList	 
>11277	Callee	chooseCellsTimer . stop
>11278	MemberAccess	chooseCellsTimer . stop
>11279	Identifier	stop
>11280	Identifier	chooseCellsTimer
>11281	Callee	TIMER
>11282	Identifier	TIMER
>11283	Condition	 
>11284	EqualityExpression	nbrCells == 0
>11285	PrimaryExpression	0
>11286	Identifier	nbrCells
>11287	IdentifierDeclStatement	 
>11288	IdentifierDecl	nbrCells = vecPruned . size ( )
>11289	AssignmentExpr	nbrCells = vecPruned . size ( )
>11290	CallExpression	vecPruned . size ( )
>11291	ArgumentList	 
>11292	Callee	vecPruned . size
>11293	MemberAccess	vecPruned . size
>11294	Identifier	size
>11295	Identifier	vecPruned
>11296	Identifier	nbrCells
>11297	Identifier	nbrCells
>11298	IdentifierDeclType	const UInt
>11299	IfStatement	if ( segIdx != ( UInt ) - 1 )
>11300	ElseStatement	else
>11301	CompoundStatement	 
>11302	ExpressionStatement	 
>11303	AssignmentExpr	vecPruned = vecCellBuffer
>11304	Identifier	vecCellBuffer
>11305	Identifier	vecPruned
>11306	CompoundStatement	 
>11307	ExpressionStatement	 
>11308	CallExpression	vecPruned . resize ( iterPruned - vecPruned . begin ( ) )
>11309	ArgumentList	iterPruned - vecPruned . begin ( )
>11310	Argument	iterPruned - vecPruned . begin ( )
>11311	AdditiveExpression	iterPruned - vecPruned . begin ( )
>11312	CallExpression	vecPruned . begin ( )
>11313	ArgumentList	 
>11314	Callee	vecPruned . begin
>11315	MemberAccess	vecPruned . begin
>11316	Identifier	begin
>11317	Identifier	vecPruned
>11318	Identifier	iterPruned
>11319	Callee	vecPruned . resize
>11320	MemberAccess	vecPruned . resize
>11321	Identifier	resize
>11322	Identifier	vecPruned
>11323	ExpressionStatement	 
>11324	AssignmentExpr	iterPruned = std 
>11325	CallExpression	std 
>11326	ArgumentList	vecCellBuffer . begin ( )
>11327	Argument	vecPruned . begin ( )
>11328	CallExpression	vecPruned . begin ( )
>11329	ArgumentList	 
>11330	Callee	vecPruned . begin
>11331	MemberAccess	vecPruned . begin
>11332	Identifier	begin
>11333	Identifier	vecPruned
>11334	Argument	vecAlreadyHave . end ( )
>11335	CallExpression	vecAlreadyHave . end ( )
>11336	ArgumentList	 
>11337	Callee	vecAlreadyHave . end
>11338	MemberAccess	vecAlreadyHave . end
>11339	Identifier	end
>11340	Identifier	vecAlreadyHave
>11341	Argument	vecAlreadyHave . begin ( )
>11342	CallExpression	vecAlreadyHave . begin ( )
>11343	ArgumentList	 
>11344	Callee	vecAlreadyHave . begin
>11345	MemberAccess	vecAlreadyHave . begin
>11346	Identifier	begin
>11347	Identifier	vecAlreadyHave
>11348	Argument	vecCellBuffer . end ( )
>11349	CallExpression	vecCellBuffer . end ( )
>11350	ArgumentList	 
>11351	Callee	vecCellBuffer . end
>11352	MemberAccess	vecCellBuffer . end
>11353	Identifier	end
>11354	Identifier	vecCellBuffer
>11355	Argument	vecCellBuffer . begin ( )
>11356	CallExpression	vecCellBuffer . begin ( )
>11357	ArgumentList	 
>11358	Callee	vecCellBuffer . begin
>11359	MemberAccess	vecCellBuffer . begin
>11360	Identifier	begin
>11361	Identifier	vecCellBuffer
>11362	Callee	std 
>11363	Identifier	std 
>11364	Identifier	iterPruned
>11365	IdentifierDeclStatement	 
>11366	IdentifierDecl	iterPruned
>11367	Identifier	iterPruned
>11368	IdentifierDeclType	std 
>11369	IfStatement	if ( vecPruned . size ( ) < vecCellBuffer . size ( ) )
>11370	ExpressionStatement	 
>11371	CallExpression	vecPruned . resize ( vecCellBuffer . size ( ) )
>11372	ArgumentList	vecCellBuffer . size ( )
>11373	Argument	vecCellBuffer . size ( )
>11374	CallExpression	vecCellBuffer . size ( )
>11375	ArgumentList	 
>11376	Callee	vecCellBuffer . size
>11377	MemberAccess	vecCellBuffer . size
>11378	Identifier	size
>11379	Identifier	vecCellBuffer
>11380	Callee	vecPruned . resize
>11381	MemberAccess	vecPruned . resize
>11382	Identifier	resize
>11383	Identifier	vecPruned
>11384	Condition	 
>11385	RelationalExpression	vecPruned . size ( ) < vecCellBuffer . size ( )
>11386	CallExpression	vecCellBuffer . size ( )
>11387	ArgumentList	 
>11388	Callee	vecCellBuffer . size
>11389	MemberAccess	vecCellBuffer . size
>11390	Identifier	size
>11391	Identifier	vecCellBuffer
>11392	CallExpression	vecPruned . size ( )
>11393	ArgumentList	 
>11394	Callee	vecPruned . size
>11395	MemberAccess	vecPruned . size
>11396	Identifier	size
>11397	Identifier	vecPruned
>11398	ForStatement	for ( UInt i = 0 ; i != segThis . size ( ) ; ++ i )
>11399	ExpressionStatement	 
>11400	CallExpression	vecAlreadyHave . push_back ( segThis [ i ] . srcCellIdx ( ) )
>11401	ArgumentList	segThis [ i ] . srcCellIdx ( )
>11402	Argument	segThis [ i ] . srcCellIdx ( )
>11403	CallExpression	segThis [ i ] . srcCellIdx ( )
>11404	ArgumentList	 
>11405	Callee	segThis [ i ] . srcCellIdx
>11406	MemberAccess	segThis [ i ] . srcCellIdx
>11407	Identifier	srcCellIdx
>11408	ArrayIndexing	segThis [ i ]
>11409	Identifier	i
>11410	Identifier	segThis
>11411	Callee	vecAlreadyHave . push_back
>11412	MemberAccess	vecAlreadyHave . push_back
>11413	Identifier	push_back
>11414	Identifier	vecAlreadyHave
>11415	UnaryExpression	 
>11416	Identifier	i
>11417	IncDec	++
>11418	Condition	 
>11419	EqualityExpression	i != segThis . size ( )
>11420	CallExpression	segThis . size ( )
>11421	ArgumentList	 
>11422	Callee	segThis . size
>11423	MemberAccess	segThis . size
>11424	Identifier	size
>11425	Identifier	segThis
>11426	Identifier	i
>11427	ForInit	 
>11428	IdentifierDeclStatement	UInt i = 0 ;
>11429	IdentifierDecl	i = 0
>11430	AssignmentExpr	i = 0
>11431	PrimaryExpression	0
>11432	Identifier	i
>11433	Identifier	i
>11434	IdentifierDeclType	UInt
>11435	ExpressionStatement	 
>11436	CallExpression	vecAlreadyHave . clear ( )
>11437	ArgumentList	 
>11438	Callee	vecAlreadyHave . clear
>11439	MemberAccess	vecAlreadyHave . clear
>11440	Identifier	clear
>11441	Identifier	vecAlreadyHave
>11442	IfStatement	if ( vecAlreadyHave . capacity ( ) < segThis . size ( ) )
>11443	ExpressionStatement	 
>11444	CallExpression	vecAlreadyHave . reserve ( segThis . size ( ) )
>11445	ArgumentList	segThis . size ( )
>11446	Argument	segThis . size ( )
>11447	CallExpression	segThis . size ( )
>11448	ArgumentList	 
>11449	Callee	segThis . size
>11450	MemberAccess	segThis . size
>11451	Identifier	size
>11452	Identifier	segThis
>11453	Callee	vecAlreadyHave . reserve
>11454	MemberAccess	vecAlreadyHave . reserve
>11455	Identifier	reserve
>11456	Identifier	vecAlreadyHave
>11457	Condition	 
>11458	RelationalExpression	vecAlreadyHave . capacity ( ) < segThis . size ( )
>11459	CallExpression	segThis . size ( )
>11460	ArgumentList	 
>11461	Callee	segThis . size
>11462	MemberAccess	segThis . size
>11463	Identifier	size
>11464	Identifier	segThis
>11465	CallExpression	vecAlreadyHave . capacity ( )
>11466	ArgumentList	 
>11467	Callee	vecAlreadyHave . capacity
>11468	MemberAccess	vecAlreadyHave . capacity
>11469	Identifier	capacity
>11470	Identifier	vecAlreadyHave
>11471	IdentifierDeclStatement	 
>11472	IdentifierDecl	vecAlreadyHave
>11473	Identifier	vecAlreadyHave
>11474	IdentifierDeclType	std 
>11475	Statement	 
>11476	IdentifierDeclStatement	 
>11477	IdentifierDecl	segThis = _cells [ cellIdx ] [ segIdx ]
>11478	AssignmentExpr	segThis = _cells [ cellIdx ] [ segIdx ]
>11479	ArrayIndexing	_cells [ cellIdx ] [ segIdx ]
>11480	Identifier	segIdx
>11481	ArrayIndexing	_cells [ cellIdx ]
>11482	Identifier	cellIdx
>11483	Identifier	_cells
>11484	Identifier	segThis
>11485	Identifier	segThis
>11486	IdentifierDeclType	Segment
>11487	Condition	 
>11488	EqualityExpression	segIdx != ( UInt ) - 1
>11489	CastExpression	( UInt ) - 1
>11490	UnaryOp	- 1
>11491	PrimaryExpression	1
>11492	UnaryOperator	-
>11493	CastTarget	UInt
>11494	Identifier	segIdx
>11495	IdentifierDeclStatement	 
>11496	IdentifierDecl	vecPruned
>11497	Identifier	vecPruned
>11498	IdentifierDeclType	std 
>11499	Statement	 
>11500	ExpressionStatement	 
>11501	AssignmentExpr	vecCellBuffer = state . cellsOn ( )
>11502	CallExpression	state . cellsOn ( )
>11503	ArgumentList	 
>11504	Callee	state . cellsOn
>11505	MemberAccess	state . cellsOn
>11506	Identifier	cellsOn
>11507	Identifier	state
>11508	Identifier	vecCellBuffer
>11509	IdentifierDeclStatement	 
>11510	IdentifierDecl	vecCellBuffer
>11511	Identifier	vecCellBuffer
>11512	IdentifierDeclType	std 
>11513	Statement	 
>11514	ExpressionStatement	 
>11515	CallExpression	TIMER ( chooseCellsTimer . start ( ) )
>11516	ArgumentList	chooseCellsTimer . start ( )
>11517	Argument	chooseCellsTimer . start ( )
>11518	CallExpression	chooseCellsTimer . start ( )
>11519	ArgumentList	 
>11520	Callee	chooseCellsTimer . start
>11521	MemberAccess	chooseCellsTimer . start
>11522	Identifier	start
>11523	Identifier	chooseCellsTimer
>11524	Callee	TIMER
>11525	Identifier	TIMER
>11526	IfStatement	if ( nSynToAdd == 0 )
>11527	ReturnStatement	 
>11528	Condition	 
>11529	EqualityExpression	nSynToAdd == 0
>11530	PrimaryExpression	0
>11531	Identifier	nSynToAdd
>11583	FunctionDef	Cells4 
>11584	ParameterList	Real minPermanence , UInt minNumSyns
>11585	Parameter	 
>11586	Identifier	minNumSyns
>11587	ParameterType	UInt
>11588	Parameter	 
>11589	Identifier	minPermanence
>11590	ParameterType	Real
>11591	ReturnType	std 
>11592	CompoundStatement	 
>11593	ReturnStatement	 
>11594	CallExpression	std 
>11595	ArgumentList	nSegsRemoved
>11596	Argument	nSynsRemoved
>11597	Identifier	nSynsRemoved
>11598	Argument	nSegsRemoved
>11599	Identifier	nSegsRemoved
>11600	Callee	std 
>11601	Identifier	std 
>11602	IfStatement	if ( _checkSynapseConsistency )
>11603	CompoundStatement	 
>11604	ExpressionStatement	 
>11605	CallExpression	NTA_CHECK ( invariants ( true ) )
>11606	ArgumentList	invariants ( true )
>11607	Argument	invariants ( true )
>11608	CallExpression	invariants ( true )
>11609	ArgumentList	true
>11610	Argument	true
>11611	Identifier	true
>11612	Callee	invariants
>11613	Identifier	invariants
>11614	Callee	NTA_CHECK
>11615	Identifier	NTA_CHECK
>11616	Condition	 
>11617	Identifier	_checkSynapseConsistency
>11618	ForStatement	for ( UInt cellIdx = 0 ; cellIdx != _nCells ; ++ cellIdx )
>11619	CompoundStatement	 
>11620	ForStatement	for ( UInt segIdx = 0 ; segIdx != _cells [ cellIdx ] . size ( ) ; ++ segIdx )
>11621	CompoundStatement	 
>11622	ExpressionStatement	 
>11623	AssignmentExpr	nSynsRemoved += removedSynapses . size ( )
>11624	CallExpression	removedSynapses . size ( )
>11625	ArgumentList	 
>11626	Callee	removedSynapses . size
>11627	MemberAccess	removedSynapses . size
>11628	Identifier	size
>11629	Identifier	removedSynapses
>11630	Identifier	nSynsRemoved
>11631	IfStatement	if ( seg . size ( ) < minNumSyns )
>11632	ElseStatement	else
>11633	CompoundStatement	 
>11634	ExpressionStatement	 
>11635	CallExpression	eraseOutSynapses ( cellIdx , segIdx , removedSynapses )
>11636	ArgumentList	cellIdx
>11637	Argument	removedSynapses
>11638	Identifier	removedSynapses
>11639	Argument	segIdx
>11640	Identifier	segIdx
>11641	Argument	cellIdx
>11642	Identifier	cellIdx
>11643	Callee	eraseOutSynapses
>11644	Identifier	eraseOutSynapses
>11645	CompoundStatement	 
>11646	ExpressionStatement	 
>11647	UnaryExpression	++ nSegsRemoved
>11648	Identifier	nSegsRemoved
>11649	IncDec	++
>11650	ExpressionStatement	 
>11651	CallExpression	_cells [ cellIdx ] . releaseSegment ( segIdx )
>11652	ArgumentList	segIdx
>11653	Argument	segIdx
>11654	Identifier	segIdx
>11655	Callee	_cells [ cellIdx ] . releaseSegment
>11656	MemberAccess	_cells [ cellIdx ] . releaseSegment
>11657	Identifier	releaseSegment
>11658	ArrayIndexing	_cells [ cellIdx ]
>11659	Identifier	cellIdx
>11660	Identifier	_cells
>11661	ExpressionStatement	 
>11662	CallExpression	eraseOutSynapses ( cellIdx , segIdx , removedSynapses )
>11663	ArgumentList	cellIdx
>11664	Argument	removedSynapses
>11665	Identifier	removedSynapses
>11666	Argument	segIdx
>11667	Identifier	segIdx
>11668	Argument	cellIdx
>11669	Identifier	cellIdx
>11670	Callee	eraseOutSynapses
>11671	Identifier	eraseOutSynapses
>11672	ForStatement	for ( UInt i = 0 ; i != seg . size ( ) ; ++ i )
>11673	ExpressionStatement	 
>11674	CallExpression	removedSynapses . push_back ( seg [ i ] . srcCellIdx ( ) )
>11675	ArgumentList	seg [ i ] . srcCellIdx ( )
>11676	Argument	seg [ i ] . srcCellIdx ( )
>11677	CallExpression	seg [ i ] . srcCellIdx ( )
>11678	ArgumentList	 
>11679	Callee	seg [ i ] . srcCellIdx
>11680	MemberAccess	seg [ i ] . srcCellIdx
>11681	Identifier	srcCellIdx
>11682	ArrayIndexing	seg [ i ]
>11683	Identifier	i
>11684	Identifier	seg
>11685	Callee	removedSynapses . push_back
>11686	MemberAccess	removedSynapses . push_back
>11687	Identifier	push_back
>11688	Identifier	removedSynapses
>11689	UnaryExpression	 
>11690	Identifier	i
>11691	IncDec	++
>11692	Condition	 
>11693	EqualityExpression	i != seg . size ( )
>11694	CallExpression	seg . size ( )
>11695	ArgumentList	 
>11696	Callee	seg . size
>11697	MemberAccess	seg . size
>11698	Identifier	size
>11699	Identifier	seg
>11700	Identifier	i
>11701	ForInit	 
>11702	IdentifierDeclStatement	UInt i = 0 ;
>11703	IdentifierDecl	i = 0
>11704	AssignmentExpr	i = 0
>11705	PrimaryExpression	0
>11706	Identifier	i
>11707	Identifier	i
>11708	IdentifierDeclType	UInt
>11709	Condition	 
>11710	RelationalExpression	seg . size ( ) < minNumSyns
>11711	Identifier	minNumSyns
>11712	CallExpression	seg . size ( )
>11713	ArgumentList	 
>11714	Callee	seg . size
>11715	MemberAccess	seg . size
>11716	Identifier	size
>11717	Identifier	seg
>11718	ExpressionStatement	 
>11719	CallExpression	seg . decaySynapses ( minPermanence , removedSynapses , minPermanence , false )
>11720	ArgumentList	minPermanence
>11721	Argument	false
>11722	Identifier	false
>11723	Argument	minPermanence
>11724	Identifier	minPermanence
>11725	Argument	removedSynapses
>11726	Identifier	removedSynapses
>11727	Argument	minPermanence
>11728	Identifier	minPermanence
>11729	Callee	seg . decaySynapses
>11730	MemberAccess	seg . decaySynapses
>11731	Identifier	decaySynapses
>11732	Identifier	seg
>11733	IdentifierDeclStatement	 
>11734	IdentifierDecl	& seg = segment ( cellIdx , segIdx )
>11735	AssignmentExpr	& seg = segment ( cellIdx , segIdx )
>11736	CallExpression	segment ( cellIdx , segIdx )
>11737	ArgumentList	cellIdx
>11738	Argument	segIdx
>11739	Identifier	segIdx
>11740	Argument	cellIdx
>11741	Identifier	cellIdx
>11742	Callee	segment
>11743	Identifier	segment
>11744	Identifier	seg
>11745	Identifier	seg
>11746	IdentifierDeclType	Segment &
>11747	ExpressionStatement	 
>11748	CallExpression	removedSynapses . clear ( )
>11749	ArgumentList	 
>11750	Callee	removedSynapses . clear
>11751	MemberAccess	removedSynapses . clear
>11752	Identifier	clear
>11753	Identifier	removedSynapses
>11754	IdentifierDeclStatement	 
>11755	IdentifierDecl	removedSynapses
>11756	Identifier	removedSynapses
>11757	IdentifierDeclType	std 
>11758	Statement	 
>11759	UnaryExpression	 
>11760	Identifier	segIdx
>11761	IncDec	++
>11762	Condition	 
>11763	EqualityExpression	segIdx != _cells [ cellIdx ] . size ( )
>11764	CallExpression	_cells [ cellIdx ] . size ( )
>11765	ArgumentList	 
>11766	Callee	_cells [ cellIdx ] . size
>11767	MemberAccess	_cells [ cellIdx ] . size
>11768	Identifier	size
>11769	ArrayIndexing	_cells [ cellIdx ]
>11770	Identifier	cellIdx
>11771	Identifier	_cells
>11772	Identifier	segIdx
>11773	ForInit	 
>11774	IdentifierDeclStatement	UInt segIdx = 0 ;
>11775	IdentifierDecl	segIdx = 0
>11776	AssignmentExpr	segIdx = 0
>11777	PrimaryExpression	0
>11778	Identifier	segIdx
>11779	Identifier	segIdx
>11780	IdentifierDeclType	UInt
>11781	UnaryExpression	 
>11782	Identifier	cellIdx
>11783	IncDec	++
>11784	Condition	 
>11785	EqualityExpression	cellIdx != _nCells
>11786	Identifier	_nCells
>11787	Identifier	cellIdx
>11788	ForInit	 
>11789	IdentifierDeclStatement	UInt cellIdx = 0 ;
>11790	IdentifierDecl	cellIdx = 0
>11791	AssignmentExpr	cellIdx = 0
>11792	PrimaryExpression	0
>11793	Identifier	cellIdx
>11794	Identifier	cellIdx
>11795	IdentifierDeclType	UInt
>11796	IfStatement	if ( minNumSyns == 0 )
>11797	ExpressionStatement	 
>11798	AssignmentExpr	minNumSyns = _activationThreshold
>11799	Identifier	_activationThreshold
>11800	Identifier	minNumSyns
>11801	Condition	 
>11802	EqualityExpression	minNumSyns == 0
>11803	PrimaryExpression	0
>11804	Identifier	minNumSyns
>11805	IfStatement	if ( minPermanence == 0.0 )
>11806	ExpressionStatement	 
>11807	AssignmentExpr	minPermanence = _permConnected
>11808	Identifier	_permConnected
>11809	Identifier	minPermanence
>11810	Condition	 
>11811	EqualityExpression	minPermanence == 0.0
>11812	PrimaryExpression	0.0
>11813	Identifier	minPermanence
>11814	IdentifierDeclStatement	 
>11815	IdentifierDecl	nSynsRemoved = 0
>11816	AssignmentExpr	nSynsRemoved = 0
>11817	PrimaryExpression	0
>11818	Identifier	nSynsRemoved
>11819	Identifier	nSynsRemoved
>11820	IdentifierDeclType	UInt
>11821	IdentifierDecl	nSegsRemoved = 0
>11822	AssignmentExpr	nSegsRemoved = 0
>11823	PrimaryExpression	0
>11824	Identifier	nSegsRemoved
>11825	Identifier	nSegsRemoved
>11826	IdentifierDeclType	UInt
>11857	FunctionDef	Cells4 
>11858	ParameterList	UInt * state
>11859	Parameter	 
>11860	Identifier	state
>11861	ParameterType	UInt *
>11862	ReturnType	void
>11863	CompoundStatement	 
>11864	ForStatement	for ( UInt i = 0 ; i != nCellsPerCol ( ) ; ++ i )
>11865	CompoundStatement	 
>11866	ExpressionStatement	 
>11867	ShiftExpression	std 
>11868	Identifier	std 
>11869	Identifier	std 
>11870	ForStatement	for ( UInt c = 0 ; c != nColumns ( ) ; ++ c )
>11871	CompoundStatement	 
>11872	ExpressionStatement	 
>11873	ShiftExpression	std 
>11874	ConditionalExpression	state [ cellIdx ] ? 1 
>11875	PrimaryExpression	0
>11876	PrimaryExpression	1
>11877	Condition	state [ cellIdx ]
>11878	ArrayIndexing	state [ cellIdx ]
>11879	Identifier	cellIdx
>11880	Identifier	state
>11881	Identifier	std 
>11882	IdentifierDeclStatement	 
>11883	IdentifierDecl	cellIdx = c * nCellsPerCol ( ) + i
>11884	AssignmentExpr	cellIdx = c * nCellsPerCol ( ) + i
>11885	AdditiveExpression	c * nCellsPerCol ( ) + i
>11886	Identifier	i
>11887	MultiplicativeExpression	c * nCellsPerCol ( )
>11888	CallExpression	nCellsPerCol ( )
>11889	ArgumentList	 
>11890	Callee	nCellsPerCol
>11891	Identifier	nCellsPerCol
>11892	Identifier	c
>11893	Identifier	cellIdx
>11894	Identifier	cellIdx
>11895	IdentifierDeclType	UInt
>11896	IfStatement	if ( c > 0 && c % 10 == 0 )
>11897	ExpressionStatement	 
>11898	ShiftExpression	std 
>11899	PrimaryExpression	' '
>11900	Identifier	std 
>11901	Condition	 
>11902	AndExpression	c > 0 && c % 10 == 0
>11903	EqualityExpression	c % 10 == 0
>11904	PrimaryExpression	0
>11905	MultiplicativeExpression	c % 10
>11906	PrimaryExpression	10
>11907	Identifier	c
>11908	RelationalExpression	c > 0
>11909	PrimaryExpression	0
>11910	Identifier	c
>11911	UnaryExpression	 
>11912	Identifier	c
>11913	IncDec	++
>11914	Condition	 
>11915	EqualityExpression	c != nColumns ( )
>11916	CallExpression	nColumns ( )
>11917	ArgumentList	 
>11918	Callee	nColumns
>11919	Identifier	nColumns
>11920	Identifier	c
>11921	ForInit	 
>11922	IdentifierDeclStatement	UInt c = 0 ;
>11923	IdentifierDecl	c = 0
>11924	AssignmentExpr	c = 0
>11925	PrimaryExpression	0
>11926	Identifier	c
>11927	Identifier	c
>11928	IdentifierDeclType	UInt
>11929	UnaryExpression	 
>11930	Identifier	i
>11931	IncDec	++
>11932	Condition	 
>11933	EqualityExpression	i != nCellsPerCol ( )
>11934	CallExpression	nCellsPerCol ( )
>11935	ArgumentList	 
>11936	Callee	nCellsPerCol
>11937	Identifier	nCellsPerCol
>11938	Identifier	i
>11939	ForInit	 
>11940	IdentifierDeclStatement	UInt i = 0 ;
>11941	IdentifierDecl	i = 0
>11942	AssignmentExpr	i = 0
>11943	PrimaryExpression	0
>11944	Identifier	i
>11945	Identifier	i
>11946	IdentifierDeclType	UInt
>11958	FunctionDef	Cells4 
>11959	ParameterList	 
>11960	ReturnType	void
>11961	CompoundStatement	 
>11962	IfStatement	if ( true )
>11963	CompoundStatement	 
>11964	ForStatement	for ( UInt i = 0 ; i != nCellsPerCol ( ) ; ++ i )
>11965	CompoundStatement	 
>11966	ExpressionStatement	 
>11967	ShiftExpression	std 
>11968	Identifier	std 
>11969	Identifier	std 
>11970	ForStatement	for ( UInt c = 0 ; c != nColumns ( ) ; ++ c )
>11971	CompoundStatement	 
>11972	ExpressionStatement	 
>11973	ShiftExpression	std 
>11974	ConditionalExpression	_learnActiveStateT . isSet ( cellIdx ) ? 1 
>11975	PrimaryExpression	0
>11976	PrimaryExpression	1
>11977	Condition	_learnActiveStateT . isSet ( cellIdx )
>11978	CallExpression	_learnActiveStateT . isSet ( cellIdx )
>11979	ArgumentList	cellIdx
>11980	Argument	cellIdx
>11981	Identifier	cellIdx
>11982	Callee	_learnActiveStateT . isSet
>11983	MemberAccess	_learnActiveStateT . isSet
>11984	Identifier	isSet
>11985	Identifier	_learnActiveStateT
>11986	Identifier	std 
>11987	IdentifierDeclStatement	 
>11988	IdentifierDecl	cellIdx = c * nCellsPerCol ( ) + i
>11989	AssignmentExpr	cellIdx = c * nCellsPerCol ( ) + i
>11990	AdditiveExpression	c * nCellsPerCol ( ) + i
>11991	Identifier	i
>11992	MultiplicativeExpression	c * nCellsPerCol ( )
>11993	CallExpression	nCellsPerCol ( )
>11994	ArgumentList	 
>11995	Callee	nCellsPerCol
>11996	Identifier	nCellsPerCol
>11997	Identifier	c
>11998	Identifier	cellIdx
>11999	Identifier	cellIdx
>12000	IdentifierDeclType	UInt
>12001	IfStatement	if ( c > 0 && c % 10 == 0 )
>12002	ExpressionStatement	 
>12003	ShiftExpression	std 
>12004	PrimaryExpression	' '
>12005	Identifier	std 
>12006	Condition	 
>12007	AndExpression	c > 0 && c % 10 == 0
>12008	EqualityExpression	c % 10 == 0
>12009	PrimaryExpression	0
>12010	MultiplicativeExpression	c % 10
>12011	PrimaryExpression	10
>12012	Identifier	c
>12013	RelationalExpression	c > 0
>12014	PrimaryExpression	0
>12015	Identifier	c
>12016	UnaryExpression	 
>12017	Identifier	c
>12018	IncDec	++
>12019	Condition	 
>12020	EqualityExpression	c != nColumns ( )
>12021	CallExpression	nColumns ( )
>12022	ArgumentList	 
>12023	Callee	nColumns
>12024	Identifier	nColumns
>12025	Identifier	c
>12026	ForInit	 
>12027	IdentifierDeclStatement	UInt c = 0 ;
>12028	IdentifierDecl	c = 0
>12029	AssignmentExpr	c = 0
>12030	PrimaryExpression	0
>12031	Identifier	c
>12032	Identifier	c
>12033	IdentifierDeclType	UInt
>12034	ExpressionStatement	 
>12035	ShiftExpression	std 
>12036	PrimaryExpression	\"  \"
>12037	Identifier	std 
>12038	ForStatement	for ( UInt c = 0 ; c != nColumns ( ) ; ++ c )
>12039	CompoundStatement	 
>12040	ExpressionStatement	 
>12041	ShiftExpression	std 
>12042	ConditionalExpression	_learnActiveStateT1 . isSet ( cellIdx ) ? 1 
>12043	PrimaryExpression	0
>12044	PrimaryExpression	1
>12045	Condition	_learnActiveStateT1 . isSet ( cellIdx )
>12046	CallExpression	_learnActiveStateT1 . isSet ( cellIdx )
>12047	ArgumentList	cellIdx
>12048	Argument	cellIdx
>12049	Identifier	cellIdx
>12050	Callee	_learnActiveStateT1 . isSet
>12051	MemberAccess	_learnActiveStateT1 . isSet
>12052	Identifier	isSet
>12053	Identifier	_learnActiveStateT1
>12054	Identifier	std 
>12055	IdentifierDeclStatement	 
>12056	IdentifierDecl	cellIdx = c * nCellsPerCol ( ) + i
>12057	AssignmentExpr	cellIdx = c * nCellsPerCol ( ) + i
>12058	AdditiveExpression	c * nCellsPerCol ( ) + i
>12059	Identifier	i
>12060	MultiplicativeExpression	c * nCellsPerCol ( )
>12061	CallExpression	nCellsPerCol ( )
>12062	ArgumentList	 
>12063	Callee	nCellsPerCol
>12064	Identifier	nCellsPerCol
>12065	Identifier	c
>12066	Identifier	cellIdx
>12067	Identifier	cellIdx
>12068	IdentifierDeclType	UInt
>12069	IfStatement	if ( c > 0 && c % 10 == 0 )
>12070	ExpressionStatement	 
>12071	ShiftExpression	std 
>12072	PrimaryExpression	' '
>12073	Identifier	std 
>12074	Condition	 
>12075	AndExpression	c > 0 && c % 10 == 0
>12076	EqualityExpression	c % 10 == 0
>12077	PrimaryExpression	0
>12078	MultiplicativeExpression	c % 10
>12079	PrimaryExpression	10
>12080	Identifier	c
>12081	RelationalExpression	c > 0
>12082	PrimaryExpression	0
>12083	Identifier	c
>12084	UnaryExpression	 
>12085	Identifier	c
>12086	IncDec	++
>12087	Condition	 
>12088	EqualityExpression	c != nColumns ( )
>12089	CallExpression	nColumns ( )
>12090	ArgumentList	 
>12091	Callee	nColumns
>12092	Identifier	nColumns
>12093	Identifier	c
>12094	ForInit	 
>12095	IdentifierDeclStatement	UInt c = 0 ;
>12096	IdentifierDecl	c = 0
>12097	AssignmentExpr	c = 0
>12098	PrimaryExpression	0
>12099	Identifier	c
>12100	Identifier	c
>12101	IdentifierDeclType	UInt
>12102	UnaryExpression	 
>12103	Identifier	i
>12104	IncDec	++
>12105	Condition	 
>12106	EqualityExpression	i != nCellsPerCol ( )
>12107	CallExpression	nCellsPerCol ( )
>12108	ArgumentList	 
>12109	Callee	nCellsPerCol
>12110	Identifier	nCellsPerCol
>12111	Identifier	i
>12112	ForInit	 
>12113	IdentifierDeclStatement	UInt i = 0 ;
>12114	IdentifierDecl	i = 0
>12115	AssignmentExpr	i = 0
>12116	PrimaryExpression	0
>12117	Identifier	i
>12118	Identifier	i
>12119	IdentifierDeclType	UInt
>12120	ExpressionStatement	 
>12121	ShiftExpression	std 
>12122	PrimaryExpression	\"TP10X
>12123	Identifier	std 
>12124	ForStatement	for ( UInt i = 0 ; i != nCellsPerCol ( ) ; ++ i )
>12125	CompoundStatement	 
>12126	ExpressionStatement	 
>12127	ShiftExpression	std 
>12128	Identifier	std 
>12129	Identifier	std 
>12130	ForStatement	for ( UInt c = 0 ; c != nColumns ( ) ; ++ c )
>12131	CompoundStatement	 
>12132	ExpressionStatement	 
>12133	ShiftExpression	std 
>12134	ConditionalExpression	_infPredictedStateT . isSet ( cellIdx ) ? 1 
>12135	PrimaryExpression	0
>12136	PrimaryExpression	1
>12137	Condition	_infPredictedStateT . isSet ( cellIdx )
>12138	CallExpression	_infPredictedStateT . isSet ( cellIdx )
>12139	ArgumentList	cellIdx
>12140	Argument	cellIdx
>12141	Identifier	cellIdx
>12142	Callee	_infPredictedStateT . isSet
>12143	MemberAccess	_infPredictedStateT . isSet
>12144	Identifier	isSet
>12145	Identifier	_infPredictedStateT
>12146	Identifier	std 
>12147	IdentifierDeclStatement	 
>12148	IdentifierDecl	cellIdx = c * nCellsPerCol ( ) + i
>12149	AssignmentExpr	cellIdx = c * nCellsPerCol ( ) + i
>12150	AdditiveExpression	c * nCellsPerCol ( ) + i
>12151	Identifier	i
>12152	MultiplicativeExpression	c * nCellsPerCol ( )
>12153	CallExpression	nCellsPerCol ( )
>12154	ArgumentList	 
>12155	Callee	nCellsPerCol
>12156	Identifier	nCellsPerCol
>12157	Identifier	c
>12158	Identifier	cellIdx
>12159	Identifier	cellIdx
>12160	IdentifierDeclType	UInt
>12161	IfStatement	if ( c > 0 && c % 10 == 0 )
>12162	ExpressionStatement	 
>12163	ShiftExpression	std 
>12164	PrimaryExpression	' '
>12165	Identifier	std 
>12166	Condition	 
>12167	AndExpression	c > 0 && c % 10 == 0
>12168	EqualityExpression	c % 10 == 0
>12169	PrimaryExpression	0
>12170	MultiplicativeExpression	c % 10
>12171	PrimaryExpression	10
>12172	Identifier	c
>12173	RelationalExpression	c > 0
>12174	PrimaryExpression	0
>12175	Identifier	c
>12176	UnaryExpression	 
>12177	Identifier	c
>12178	IncDec	++
>12179	Condition	 
>12180	EqualityExpression	c != nColumns ( )
>12181	CallExpression	nColumns ( )
>12182	ArgumentList	 
>12183	Callee	nColumns
>12184	Identifier	nColumns
>12185	Identifier	c
>12186	ForInit	 
>12187	IdentifierDeclStatement	UInt c = 0 ;
>12188	IdentifierDecl	c = 0
>12189	AssignmentExpr	c = 0
>12190	PrimaryExpression	0
>12191	Identifier	c
>12192	Identifier	c
>12193	IdentifierDeclType	UInt
>12194	ExpressionStatement	 
>12195	ShiftExpression	std 
>12196	PrimaryExpression	\"  \"
>12197	Identifier	std 
>12198	ForStatement	for ( UInt c = 0 ; c != nColumns ( ) ; ++ c )
>12199	CompoundStatement	 
>12200	ExpressionStatement	 
>12201	ShiftExpression	std 
>12202	ConditionalExpression	_infPredictedStateT1 . isSet ( cellIdx ) ? 1 
>12203	PrimaryExpression	0
>12204	PrimaryExpression	1
>12205	Condition	_infPredictedStateT1 . isSet ( cellIdx )
>12206	CallExpression	_infPredictedStateT1 . isSet ( cellIdx )
>12207	ArgumentList	cellIdx
>12208	Argument	cellIdx
>12209	Identifier	cellIdx
>12210	Callee	_infPredictedStateT1 . isSet
>12211	MemberAccess	_infPredictedStateT1 . isSet
>12212	Identifier	isSet
>12213	Identifier	_infPredictedStateT1
>12214	Identifier	std 
>12215	IdentifierDeclStatement	 
>12216	IdentifierDecl	cellIdx = c * nCellsPerCol ( ) + i
>12217	AssignmentExpr	cellIdx = c * nCellsPerCol ( ) + i
>12218	AdditiveExpression	c * nCellsPerCol ( ) + i
>12219	Identifier	i
>12220	MultiplicativeExpression	c * nCellsPerCol ( )
>12221	CallExpression	nCellsPerCol ( )
>12222	ArgumentList	 
>12223	Callee	nCellsPerCol
>12224	Identifier	nCellsPerCol
>12225	Identifier	c
>12226	Identifier	cellIdx
>12227	Identifier	cellIdx
>12228	IdentifierDeclType	UInt
>12229	IfStatement	if ( c > 0 && c % 10 == 0 )
>12230	ExpressionStatement	 
>12231	ShiftExpression	std 
>12232	PrimaryExpression	' '
>12233	Identifier	std 
>12234	Condition	 
>12235	AndExpression	c > 0 && c % 10 == 0
>12236	EqualityExpression	c % 10 == 0
>12237	PrimaryExpression	0
>12238	MultiplicativeExpression	c % 10
>12239	PrimaryExpression	10
>12240	Identifier	c
>12241	RelationalExpression	c > 0
>12242	PrimaryExpression	0
>12243	Identifier	c
>12244	UnaryExpression	 
>12245	Identifier	c
>12246	IncDec	++
>12247	Condition	 
>12248	EqualityExpression	c != nColumns ( )
>12249	CallExpression	nColumns ( )
>12250	ArgumentList	 
>12251	Callee	nColumns
>12252	Identifier	nColumns
>12253	Identifier	c
>12254	ForInit	 
>12255	IdentifierDeclStatement	UInt c = 0 ;
>12256	IdentifierDecl	c = 0
>12257	AssignmentExpr	c = 0
>12258	PrimaryExpression	0
>12259	Identifier	c
>12260	Identifier	c
>12261	IdentifierDeclType	UInt
>12262	UnaryExpression	 
>12263	Identifier	i
>12264	IncDec	++
>12265	Condition	 
>12266	EqualityExpression	i != nCellsPerCol ( )
>12267	CallExpression	nCellsPerCol ( )
>12268	ArgumentList	 
>12269	Callee	nCellsPerCol
>12270	Identifier	nCellsPerCol
>12271	Identifier	i
>12272	ForInit	 
>12273	IdentifierDeclStatement	UInt i = 0 ;
>12274	IdentifierDecl	i = 0
>12275	AssignmentExpr	i = 0
>12276	PrimaryExpression	0
>12277	Identifier	i
>12278	Identifier	i
>12279	IdentifierDeclType	UInt
>12280	ExpressionStatement	 
>12281	ShiftExpression	std 
>12282	PrimaryExpression	\"TP10X
>12283	Identifier	std 
>12284	ForStatement	for ( UInt i = 0 ; i != nCellsPerCol ( ) ; ++ i )
>12285	CompoundStatement	 
>12286	ExpressionStatement	 
>12287	ShiftExpression	std 
>12288	Identifier	std 
>12289	Identifier	std 
>12290	ForStatement	for ( UInt c = 0 ; c != nColumns ( ) ; ++ c )
>12291	CompoundStatement	 
>12292	ExpressionStatement	 
>12293	ShiftExpression	std 
>12294	ConditionalExpression	_infActiveStateT . isSet ( cellIdx ) ? 1 
>12295	PrimaryExpression	0
>12296	PrimaryExpression	1
>12297	Condition	_infActiveStateT . isSet ( cellIdx )
>12298	CallExpression	_infActiveStateT . isSet ( cellIdx )
>12299	ArgumentList	cellIdx
>12300	Argument	cellIdx
>12301	Identifier	cellIdx
>12302	Callee	_infActiveStateT . isSet
>12303	MemberAccess	_infActiveStateT . isSet
>12304	Identifier	isSet
>12305	Identifier	_infActiveStateT
>12306	Identifier	std 
>12307	IdentifierDeclStatement	 
>12308	IdentifierDecl	cellIdx = c * nCellsPerCol ( ) + i
>12309	AssignmentExpr	cellIdx = c * nCellsPerCol ( ) + i
>12310	AdditiveExpression	c * nCellsPerCol ( ) + i
>12311	Identifier	i
>12312	MultiplicativeExpression	c * nCellsPerCol ( )
>12313	CallExpression	nCellsPerCol ( )
>12314	ArgumentList	 
>12315	Callee	nCellsPerCol
>12316	Identifier	nCellsPerCol
>12317	Identifier	c
>12318	Identifier	cellIdx
>12319	Identifier	cellIdx
>12320	IdentifierDeclType	UInt
>12321	IfStatement	if ( c > 0 && c % 10 == 0 )
>12322	ExpressionStatement	 
>12323	ShiftExpression	std 
>12324	PrimaryExpression	' '
>12325	Identifier	std 
>12326	Condition	 
>12327	AndExpression	c > 0 && c % 10 == 0
>12328	EqualityExpression	c % 10 == 0
>12329	PrimaryExpression	0
>12330	MultiplicativeExpression	c % 10
>12331	PrimaryExpression	10
>12332	Identifier	c
>12333	RelationalExpression	c > 0
>12334	PrimaryExpression	0
>12335	Identifier	c
>12336	UnaryExpression	 
>12337	Identifier	c
>12338	IncDec	++
>12339	Condition	 
>12340	EqualityExpression	c != nColumns ( )
>12341	CallExpression	nColumns ( )
>12342	ArgumentList	 
>12343	Callee	nColumns
>12344	Identifier	nColumns
>12345	Identifier	c
>12346	ForInit	 
>12347	IdentifierDeclStatement	UInt c = 0 ;
>12348	IdentifierDecl	c = 0
>12349	AssignmentExpr	c = 0
>12350	PrimaryExpression	0
>12351	Identifier	c
>12352	Identifier	c
>12353	IdentifierDeclType	UInt
>12354	ExpressionStatement	 
>12355	ShiftExpression	std 
>12356	PrimaryExpression	\"  \"
>12357	Identifier	std 
>12358	ForStatement	for ( UInt c = 0 ; c != nColumns ( ) ; ++ c )
>12359	CompoundStatement	 
>12360	ExpressionStatement	 
>12361	ShiftExpression	std 
>12362	ConditionalExpression	_infActiveStateT1 . isSet ( cellIdx ) ? 1 
>12363	PrimaryExpression	0
>12364	PrimaryExpression	1
>12365	Condition	_infActiveStateT1 . isSet ( cellIdx )
>12366	CallExpression	_infActiveStateT1 . isSet ( cellIdx )
>12367	ArgumentList	cellIdx
>12368	Argument	cellIdx
>12369	Identifier	cellIdx
>12370	Callee	_infActiveStateT1 . isSet
>12371	MemberAccess	_infActiveStateT1 . isSet
>12372	Identifier	isSet
>12373	Identifier	_infActiveStateT1
>12374	Identifier	std 
>12375	IdentifierDeclStatement	 
>12376	IdentifierDecl	cellIdx = c * nCellsPerCol ( ) + i
>12377	AssignmentExpr	cellIdx = c * nCellsPerCol ( ) + i
>12378	AdditiveExpression	c * nCellsPerCol ( ) + i
>12379	Identifier	i
>12380	MultiplicativeExpression	c * nCellsPerCol ( )
>12381	CallExpression	nCellsPerCol ( )
>12382	ArgumentList	 
>12383	Callee	nCellsPerCol
>12384	Identifier	nCellsPerCol
>12385	Identifier	c
>12386	Identifier	cellIdx
>12387	Identifier	cellIdx
>12388	IdentifierDeclType	UInt
>12389	IfStatement	if ( c > 0 && c % 10 == 0 )
>12390	ExpressionStatement	 
>12391	ShiftExpression	std 
>12392	PrimaryExpression	' '
>12393	Identifier	std 
>12394	Condition	 
>12395	AndExpression	c > 0 && c % 10 == 0
>12396	EqualityExpression	c % 10 == 0
>12397	PrimaryExpression	0
>12398	MultiplicativeExpression	c % 10
>12399	PrimaryExpression	10
>12400	Identifier	c
>12401	RelationalExpression	c > 0
>12402	PrimaryExpression	0
>12403	Identifier	c
>12404	UnaryExpression	 
>12405	Identifier	c
>12406	IncDec	++
>12407	Condition	 
>12408	EqualityExpression	c != nColumns ( )
>12409	CallExpression	nColumns ( )
>12410	ArgumentList	 
>12411	Callee	nColumns
>12412	Identifier	nColumns
>12413	Identifier	c
>12414	ForInit	 
>12415	IdentifierDeclStatement	UInt c = 0 ;
>12416	IdentifierDecl	c = 0
>12417	AssignmentExpr	c = 0
>12418	PrimaryExpression	0
>12419	Identifier	c
>12420	Identifier	c
>12421	IdentifierDeclType	UInt
>12422	UnaryExpression	 
>12423	Identifier	i
>12424	IncDec	++
>12425	Condition	 
>12426	EqualityExpression	i != nCellsPerCol ( )
>12427	CallExpression	nCellsPerCol ( )
>12428	ArgumentList	 
>12429	Callee	nCellsPerCol
>12430	Identifier	nCellsPerCol
>12431	Identifier	i
>12432	ForInit	 
>12433	IdentifierDeclStatement	UInt i = 0 ;
>12434	IdentifierDecl	i = 0
>12435	AssignmentExpr	i = 0
>12436	PrimaryExpression	0
>12437	Identifier	i
>12438	Identifier	i
>12439	IdentifierDeclType	UInt
>12440	ExpressionStatement	 
>12441	ShiftExpression	std 
>12442	PrimaryExpression	\"TP10X
>12443	Identifier	std 
>12444	Condition	 
>12445	Identifier	true
>12467	FunctionDef	Cells4 
>12468	ParameterList	 
>12469	ReturnType	void
>12470	CompoundStatement	 
>12471	ForStatement	for ( UInt i = 0 ; i != _segmentUpdates . size ( ) ; ++ i )
>12472	CompoundStatement	 
>12473	ExpressionStatement	 
>12474	ShiftExpression	std 
>12475	Identifier	std 
>12476	Identifier	std 
>12477	ExpressionStatement	 
>12478	CallExpression	_segmentUpdates [ i ] . print ( std 
>12479	ArgumentList	std 
>12480	Argument	true
>12481	Identifier	true
>12482	Argument	std 
>12483	Identifier	std 
>12484	Callee	_segmentUpdates [ i ] . print
>12485	MemberAccess	_segmentUpdates [ i ] . print
>12486	Identifier	print
>12487	ArrayIndexing	_segmentUpdates [ i ]
>12488	Identifier	i
>12489	Identifier	_segmentUpdates
>12490	UnaryExpression	 
>12491	Identifier	i
>12492	IncDec	++
>12493	Condition	 
>12494	EqualityExpression	i != _segmentUpdates . size ( )
>12495	CallExpression	_segmentUpdates . size ( )
>12496	ArgumentList	 
>12497	Callee	_segmentUpdates . size
>12498	MemberAccess	_segmentUpdates . size
>12499	Identifier	size
>12500	Identifier	_segmentUpdates
>12501	Identifier	i
>12502	ForInit	 
>12503	IdentifierDeclStatement	UInt i = 0 ;
>12504	IdentifierDecl	i = 0
>12505	AssignmentExpr	i = 0
>12506	PrimaryExpression	0
>12507	Identifier	i
>12508	Identifier	i
>12509	IdentifierDeclType	UInt
>12510	ExpressionStatement	 
>12511	ShiftExpression	std 
>12512	ShiftExpression	_segmentUpdates . size ( ) << \" updates\" << std 
>12513	ShiftExpression	\" updates\" << std 
>12514	Identifier	std 
>12515	PrimaryExpression	\" updates\"
>12516	CallExpression	_segmentUpdates . size ( )
>12517	ArgumentList	 
>12518	Callee	_segmentUpdates . size
>12519	MemberAccess	_segmentUpdates . size
>12520	Identifier	size
>12521	Identifier	_segmentUpdates
>12522	Identifier	std 
>12533	FunctionDef	Cells4 
>12534	ParameterList	std 
>12535	Parameter	 
>12536	Identifier	patterns
>12537	ParameterType	std 
>12538	ReturnType	void
>12539	CompoundStatement	 
>12540	ExpressionStatement	 
>12541	ShiftExpression	std 
>12542	Identifier	std 
>12543	Identifier	std 
>12544	ForStatement	for ( UInt p = 0 ; p < patterns . size ( ) ; p ++ )
>12545	CompoundStatement	 
>12546	ExpressionStatement	 
>12547	ShiftExpression	std 
>12548	Identifier	std 
>12549	Identifier	std 
>12550	ForStatement	for ( UInt i = 0 ; i < patterns [ p ] . size ( ) ; i ++ )
>12551	CompoundStatement	 
>12552	ExpressionStatement	 
>12553	ShiftExpression	std 
>12554	ShiftExpression	patterns [ p ] [ i ] << \" \"
>12555	PrimaryExpression	\" \"
>12556	ArrayIndexing	patterns [ p ] [ i ]
>12557	Identifier	i
>12558	ArrayIndexing	patterns [ p ]
>12559	Identifier	p
>12560	Identifier	patterns
>12561	Identifier	std 
>12562	IncDecOp	 
>12563	IncDec	++
>12564	Identifier	i
>12565	Condition	 
>12566	RelationalExpression	i < patterns [ p ] . size ( )
>12567	CallExpression	patterns [ p ] . size ( )
>12568	ArgumentList	 
>12569	Callee	patterns [ p ] . size
>12570	MemberAccess	patterns [ p ] . size
>12571	Identifier	size
>12572	ArrayIndexing	patterns [ p ]
>12573	Identifier	p
>12574	Identifier	patterns
>12575	Identifier	i
>12576	ForInit	 
>12577	IdentifierDeclStatement	UInt i = 0 ;
>12578	IdentifierDecl	i = 0
>12579	AssignmentExpr	i = 0
>12580	PrimaryExpression	0
>12581	Identifier	i
>12582	Identifier	i
>12583	IdentifierDeclType	UInt
>12584	ExpressionStatement	 
>12585	ShiftExpression	std 
>12586	ShiftExpression	\"Pattern \" << p << \"
>12587	ShiftExpression	p << \"
>12588	PrimaryExpression	\"
>12589	Identifier	p
>12590	PrimaryExpression	\"Pattern \"
>12591	Identifier	std 
>12592	IncDecOp	 
>12593	IncDec	++
>12594	Identifier	p
>12595	Condition	 
>12596	RelationalExpression	p < patterns . size ( )
>12597	CallExpression	patterns . size ( )
>12598	ArgumentList	 
>12599	Callee	patterns . size
>12600	MemberAccess	patterns . size
>12601	Identifier	size
>12602	Identifier	patterns
>12603	Identifier	p
>12604	ForInit	 
>12605	IdentifierDeclStatement	UInt p = 0 ;
>12606	IdentifierDecl	p = 0
>12607	AssignmentExpr	p = 0
>12608	PrimaryExpression	0
>12609	Identifier	p
>12610	Identifier	p
>12611	IdentifierDeclType	UInt
>12622	FunctionDef	Cells4 
>12623	ParameterList	std 
>12624	Parameter	 
>12625	Identifier	outStream
>12626	ParameterType	std 
>12627	ReturnType	void
>12628	CompoundStatement	 
>12629	ForStatement	for ( UInt i = 0 ; i != _nCells ; ++ i )
>12630	CompoundStatement	 
>12631	ExpressionStatement	 
>12632	ShiftExpression	std 
>12633	Identifier	std 
>12634	Identifier	std 
>12635	ForStatement	for ( UInt j = 0 ; j != _cells [ i ] . size ( ) ; ++ j )
>12636	CompoundStatement	 
>12637	ExpressionStatement	 
>12638	ShiftExpression	std 
>12639	ShiftExpression	\"(\" << _cells [ i ] [ j ] << \")\"
>12640	ShiftExpression	_cells [ i ] [ j ] << \")\"
>12641	PrimaryExpression	\")\"
>12642	ArrayIndexing	_cells [ i ] [ j ]
>12643	Identifier	j
>12644	ArrayIndexing	_cells [ i ]
>12645	Identifier	i
>12646	Identifier	_cells
>12647	PrimaryExpression	\"(\"
>12648	Identifier	std 
>12649	UnaryExpression	 
>12650	Identifier	j
>12651	IncDec	++
>12652	Condition	 
>12653	EqualityExpression	j != _cells [ i ] . size ( )
>12654	CallExpression	_cells [ i ] . size ( )
>12655	ArgumentList	 
>12656	Callee	_cells [ i ] . size
>12657	MemberAccess	_cells [ i ] . size
>12658	Identifier	size
>12659	ArrayIndexing	_cells [ i ]
>12660	Identifier	i
>12661	Identifier	_cells
>12662	Identifier	j
>12663	ForInit	 
>12664	IdentifierDeclStatement	UInt j = 0 ;
>12665	IdentifierDecl	j = 0
>12666	AssignmentExpr	j = 0
>12667	PrimaryExpression	0
>12668	Identifier	j
>12669	Identifier	j
>12670	IdentifierDeclType	UInt
>12671	ExpressionStatement	 
>12672	ShiftExpression	std 
>12673	ShiftExpression	\"Cell #\" << i << \" \"
>12674	ShiftExpression	i << \" \"
>12675	PrimaryExpression	\" \"
>12676	Identifier	i
>12677	PrimaryExpression	\"Cell #\"
>12678	Identifier	std 
>12679	UnaryExpression	 
>12680	Identifier	i
>12681	IncDec	++
>12682	Condition	 
>12683	EqualityExpression	i != _nCells
>12684	Identifier	_nCells
>12685	Identifier	i
>12686	ForInit	 
>12687	IdentifierDeclStatement	UInt i = 0 ;
>12688	IdentifierDecl	i = 0
>12689	AssignmentExpr	i = 0
>12690	PrimaryExpression	0
>12691	Identifier	i
>12692	Identifier	i
>12693	IdentifierDeclType	UInt
>12705	FunctionDef	operator << (std 
>12706	ParameterList	std 
>12707	Parameter	 
>12708	Identifier	cells
>12709	ParameterType	const Cells4 &
>12710	Parameter	 
>12711	Identifier	outStream
>12712	ParameterType	std 
>12713	ReturnType	std 
>12714	CompoundStatement	 
>12715	ReturnStatement	 
>12716	Identifier	outStream
>12717	ExpressionStatement	 
>12718	CallExpression	cells . print ( outStream )
>12719	ArgumentList	outStream
>12720	Argument	outStream
>12721	Identifier	outStream
>12722	Callee	cells . print
>12723	MemberAccess	cells . print
>12724	Identifier	print
>12725	Identifier	cells
>12731	FunctionDef	Cells4 
>12732	ParameterList	CStateIndexed & state
>12733	Parameter	 
>12734	Identifier	state
>12735	ParameterType	CStateIndexed &
>12736	ReturnType	void
>12737	CompoundStatement	 
>12738	ExpressionStatement	 
>12739	AssignmentExpr	p2 = getticks ( )
>12740	CallExpression	getticks ( )
>12741	ArgumentList	 
>12742	Callee	getticks
>12743	Identifier	getticks
>12744	Identifier	p2
>12745	ForStatement	for ( iterCellBuffer = vecCellBuffer . begin ( ) ; iterCellBuffer != vecCellBuffer . end ( ) ; ++ iterCellBuffer )
>12746	CompoundStatement	 
>12747	ForStatement	for ( UInt j = 0 ; j != os . size ( ) ; ++ j )
>12748	CompoundStatement	 
>12749	ExpressionStatement	 
>12750	CallExpression	_learnActivity . increment ( dstCellIdx , dstSegIdx )
>12751	ArgumentList	dstCellIdx
>12752	Argument	dstSegIdx
>12753	Identifier	dstSegIdx
>12754	Argument	dstCellIdx
>12755	Identifier	dstCellIdx
>12756	Callee	_learnActivity . increment
>12757	MemberAccess	_learnActivity . increment
>12758	Identifier	increment
>12759	Identifier	_learnActivity
>12760	IdentifierDeclStatement	 
>12761	IdentifierDecl	dstSegIdx = os [ j ] . dstSegIdx ( )
>12762	AssignmentExpr	dstSegIdx = os [ j ] . dstSegIdx ( )
>12763	CallExpression	os [ j ] . dstSegIdx ( )
>12764	ArgumentList	 
>12765	Callee	os [ j ] . dstSegIdx
>12766	MemberAccess	os [ j ] . dstSegIdx
>12767	Identifier	dstSegIdx
>12768	ArrayIndexing	os [ j ]
>12769	Identifier	j
>12770	Identifier	os
>12771	Identifier	dstSegIdx
>12772	Identifier	dstSegIdx
>12773	IdentifierDeclType	UInt
>12774	IdentifierDeclStatement	 
>12775	IdentifierDecl	dstCellIdx = os [ j ] . dstCellIdx ( )
>12776	AssignmentExpr	dstCellIdx = os [ j ] . dstCellIdx ( )
>12777	CallExpression	os [ j ] . dstCellIdx ( )
>12778	ArgumentList	 
>12779	Callee	os [ j ] . dstCellIdx
>12780	MemberAccess	os [ j ] . dstCellIdx
>12781	Identifier	dstCellIdx
>12782	ArrayIndexing	os [ j ]
>12783	Identifier	j
>12784	Identifier	os
>12785	Identifier	dstCellIdx
>12786	Identifier	dstCellIdx
>12787	IdentifierDeclType	UInt
>12788	UnaryExpression	 
>12789	Identifier	j
>12790	IncDec	++
>12791	Condition	 
>12792	EqualityExpression	j != os . size ( )
>12793	CallExpression	os . size ( )
>12794	ArgumentList	 
>12795	Callee	os . size
>12796	MemberAccess	os . size
>12797	Identifier	size
>12798	Identifier	os
>12799	Identifier	j
>12800	ForInit	 
>12801	IdentifierDeclStatement	UInt j = 0 ;
>12802	IdentifierDecl	j = 0
>12803	AssignmentExpr	j = 0
>12804	PrimaryExpression	0
>12805	Identifier	j
>12806	Identifier	j
>12807	IdentifierDeclType	UInt
>12808	IdentifierDeclStatement	 
>12809	IdentifierDecl	& os = _outSynapses [ * iterCellBuffer ]
>12810	AssignmentExpr	& os = _outSynapses [ * iterCellBuffer ]
>12811	ArrayIndexing	_outSynapses [ * iterCellBuffer ]
>12812	UnaryOp	* iterCellBuffer
>12813	Identifier	iterCellBuffer
>12814	UnaryOperator	*
>12815	Identifier	_outSynapses
>12816	Identifier	os
>12817	Identifier	os
>12818	IdentifierDeclType	std 
>12819	UnaryExpression	 
>12820	Identifier	iterCellBuffer
>12821	IncDec	++
>12822	Condition	 
>12823	EqualityExpression	iterCellBuffer != vecCellBuffer . end ( )
>12824	CallExpression	vecCellBuffer . end ( )
>12825	ArgumentList	 
>12826	Callee	vecCellBuffer . end
>12827	MemberAccess	vecCellBuffer . end
>12828	Identifier	end
>12829	Identifier	vecCellBuffer
>12830	Identifier	iterCellBuffer
>12831	ForInit	 
>12832	AssignmentExpr	iterCellBuffer = vecCellBuffer . begin ( )
>12833	CallExpression	vecCellBuffer . begin ( )
>12834	ArgumentList	 
>12835	Callee	vecCellBuffer . begin
>12836	MemberAccess	vecCellBuffer . begin
>12837	Identifier	begin
>12838	Identifier	vecCellBuffer
>12839	Identifier	iterCellBuffer
>12840	IdentifierDeclStatement	 
>12841	IdentifierDecl	iterCellBuffer
>12842	Identifier	iterCellBuffer
>12843	IdentifierDeclType	std 
>12844	ExpressionStatement	 
>12845	AssignmentExpr	vecCellBuffer = state . cellsOn ( )
>12846	CallExpression	state . cellsOn ( )
>12847	ArgumentList	 
>12848	Callee	state . cellsOn
>12849	MemberAccess	state . cellsOn
>12850	Identifier	cellsOn
>12851	Identifier	state
>12852	Identifier	vecCellBuffer
>12853	IdentifierDeclStatement	 
>12854	IdentifierDecl	vecCellBuffer
>12855	Identifier	vecCellBuffer
>12856	IdentifierDeclType	std 
>12857	Statement	 
>12858	ExpressionStatement	 
>12859	AssignmentExpr	p1 = getticks ( )
>12860	CallExpression	getticks ( )
>12861	ArgumentList	 
>12862	Callee	getticks
>12863	Identifier	getticks
>12864	Identifier	p1
>12865	ExpressionStatement	 
>12866	AssignmentExpr	z2 = getticks ( )
>12867	CallExpression	getticks ( )
>12868	ArgumentList	 
>12869	Callee	getticks
>12870	Identifier	getticks
>12871	Identifier	z2
>12872	ExpressionStatement	 
>12873	CallExpression	_learnActivity . reset ( )
>12874	ArgumentList	 
>12875	Callee	_learnActivity . reset
>12876	MemberAccess	_learnActivity . reset
>12877	Identifier	reset
>12878	Identifier	_learnActivity
>12879	ExpressionStatement	 
>12880	AssignmentExpr	z1 = getticks ( )
>12881	CallExpression	getticks ( )
>12882	ArgumentList	 
>12883	Callee	getticks
>12884	Identifier	getticks
>12885	Identifier	z1
>12886	IdentifierDeclStatement	 
>12887	IdentifierDecl	p2
>12888	Identifier	p2
>12889	IdentifierDeclType	ticks
>12890	IdentifierDecl	p1
>12891	Identifier	p1
>12892	IdentifierDeclType	ticks
>12893	IdentifierDecl	z2
>12894	Identifier	z2
>12895	IdentifierDeclType	ticks
>12896	IdentifierDecl	z1
>12897	Identifier	z1
>12898	IdentifierDeclType	ticks
>12927	FunctionDef	Cells4 
>12928	ParameterList	CState & state
>12929	Parameter	 
>12930	Identifier	state
>12931	ParameterType	CState &
>12932	ReturnType	void
>12933	CompoundStatement	 
>12934	ExpressionStatement	 
>12935	AssignmentExpr	p2 = getticks ( )
>12936	CallExpression	getticks ( )
>12937	ArgumentList	 
>12938	Callee	getticks
>12939	Identifier	getticks
>12940	Identifier	p2
>12941	ForStatement	for ( i = multipleOf8 ; i < _nCells ; i ++ )
>12942	CompoundStatement	 
>12943	IfStatement	if ( state . isSet ( i ) )
>12944	CompoundStatement	 
>12945	ForStatement	for ( UInt j = 0 ; j != os . size ( ) ; ++ j )
>12946	CompoundStatement	 
>12947	ExpressionStatement	 
>12948	CallExpression	_inferActivity . increment ( dstCellIdx , dstSegIdx )
>12949	ArgumentList	dstCellIdx
>12950	Argument	dstSegIdx
>12951	Identifier	dstSegIdx
>12952	Argument	dstCellIdx
>12953	Identifier	dstCellIdx
>12954	Callee	_inferActivity . increment
>12955	MemberAccess	_inferActivity . increment
>12956	Identifier	increment
>12957	Identifier	_inferActivity
>12958	IdentifierDeclStatement	 
>12959	IdentifierDecl	dstSegIdx = os [ j ] . dstSegIdx ( )
>12960	AssignmentExpr	dstSegIdx = os [ j ] . dstSegIdx ( )
>12961	CallExpression	os [ j ] . dstSegIdx ( )
>12962	ArgumentList	 
>12963	Callee	os [ j ] . dstSegIdx
>12964	MemberAccess	os [ j ] . dstSegIdx
>12965	Identifier	dstSegIdx
>12966	ArrayIndexing	os [ j ]
>12967	Identifier	j
>12968	Identifier	os
>12969	Identifier	dstSegIdx
>12970	Identifier	dstSegIdx
>12971	IdentifierDeclType	UInt
>12972	IdentifierDeclStatement	 
>12973	IdentifierDecl	dstCellIdx = os [ j ] . dstCellIdx ( )
>12974	AssignmentExpr	dstCellIdx = os [ j ] . dstCellIdx ( )
>12975	CallExpression	os [ j ] . dstCellIdx ( )
>12976	ArgumentList	 
>12977	Callee	os [ j ] . dstCellIdx
>12978	MemberAccess	os [ j ] . dstCellIdx
>12979	Identifier	dstCellIdx
>12980	ArrayIndexing	os [ j ]
>12981	Identifier	j
>12982	Identifier	os
>12983	Identifier	dstCellIdx
>12984	Identifier	dstCellIdx
>12985	IdentifierDeclType	UInt
>12986	UnaryExpression	 
>12987	Identifier	j
>12988	IncDec	++
>12989	Condition	 
>12990	EqualityExpression	j != os . size ( )
>12991	CallExpression	os . size ( )
>12992	ArgumentList	 
>12993	Callee	os . size
>12994	MemberAccess	os . size
>12995	Identifier	size
>12996	Identifier	os
>12997	Identifier	j
>12998	ForInit	 
>12999	IdentifierDeclStatement	UInt j = 0 ;
>13000	IdentifierDecl	j = 0
>13001	AssignmentExpr	j = 0
>13002	PrimaryExpression	0
>13003	Identifier	j
>13004	Identifier	j
>13005	IdentifierDeclType	UInt
>13006	IdentifierDeclStatement	 
>13007	IdentifierDecl	& os = _outSynapses [ i ]
>13008	AssignmentExpr	& os = _outSynapses [ i ]
>13009	ArrayIndexing	_outSynapses [ i ]
>13010	Identifier	i
>13011	Identifier	_outSynapses
>13012	Identifier	os
>13013	Identifier	os
>13014	IdentifierDeclType	std 
>13015	Condition	 
>13016	CallExpression	state . isSet ( i )
>13017	ArgumentList	i
>13018	Argument	i
>13019	Identifier	i
>13020	Callee	state . isSet
>13021	MemberAccess	state . isSet
>13022	Identifier	isSet
>13023	Identifier	state
>13024	IncDecOp	 
>13025	IncDec	++
>13026	Identifier	i
>13027	Condition	 
>13028	RelationalExpression	i < _nCells
>13029	Identifier	_nCells
>13030	Identifier	i
>13031	ForInit	 
>13032	AssignmentExpr	i = multipleOf8
>13033	Identifier	multipleOf8
>13034	Identifier	i
>13035	ForStatement	for ( i = 0 ; i < multipleOf8 ; i += 8 )
>13036	CompoundStatement	 
>13037	ForStatement	for ( int k = 0 ; eightStates != 0 && k < 8 ; eightStates >>= 8 , k ++ )
>13038	CompoundStatement	 
>13039	IfStatement	if ( ( eightStates & 0xff ) != 0 )
>13040	CompoundStatement	 
>13041	ForStatement	for ( UInt j = 0 ; j != os . size ( ) ; ++ j )
>13042	CompoundStatement	 
>13043	ExpressionStatement	 
>13044	CallExpression	_inferActivity . increment ( dstCellIdx , dstSegIdx )
>13045	ArgumentList	dstCellIdx
>13046	Argument	dstSegIdx
>13047	Identifier	dstSegIdx
>13048	Argument	dstCellIdx
>13049	Identifier	dstCellIdx
>13050	Callee	_inferActivity . increment
>13051	MemberAccess	_inferActivity . increment
>13052	Identifier	increment
>13053	Identifier	_inferActivity
>13054	IdentifierDeclStatement	 
>13055	IdentifierDecl	dstSegIdx = os [ j ] . dstSegIdx ( )
>13056	AssignmentExpr	dstSegIdx = os [ j ] . dstSegIdx ( )
>13057	CallExpression	os [ j ] . dstSegIdx ( )
>13058	ArgumentList	 
>13059	Callee	os [ j ] . dstSegIdx
>13060	MemberAccess	os [ j ] . dstSegIdx
>13061	Identifier	dstSegIdx
>13062	ArrayIndexing	os [ j ]
>13063	Identifier	j
>13064	Identifier	os
>13065	Identifier	dstSegIdx
>13066	Identifier	dstSegIdx
>13067	IdentifierDeclType	UInt
>13068	IdentifierDeclStatement	 
>13069	IdentifierDecl	dstCellIdx = os [ j ] . dstCellIdx ( )
>13070	AssignmentExpr	dstCellIdx = os [ j ] . dstCellIdx ( )
>13071	CallExpression	os [ j ] . dstCellIdx ( )
>13072	ArgumentList	 
>13073	Callee	os [ j ] . dstCellIdx
>13074	MemberAccess	os [ j ] . dstCellIdx
>13075	Identifier	dstCellIdx
>13076	ArrayIndexing	os [ j ]
>13077	Identifier	j
>13078	Identifier	os
>13079	Identifier	dstCellIdx
>13080	Identifier	dstCellIdx
>13081	IdentifierDeclType	UInt
>13082	UnaryExpression	 
>13083	Identifier	j
>13084	IncDec	++
>13085	Condition	 
>13086	EqualityExpression	j != os . size ( )
>13087	CallExpression	os . size ( )
>13088	ArgumentList	 
>13089	Callee	os . size
>13090	MemberAccess	os . size
>13091	Identifier	size
>13092	Identifier	os
>13093	Identifier	j
>13094	ForInit	 
>13095	IdentifierDeclStatement	UInt j = 0 ;
>13096	IdentifierDecl	j = 0
>13097	AssignmentExpr	j = 0
>13098	PrimaryExpression	0
>13099	Identifier	j
>13100	Identifier	j
>13101	IdentifierDeclType	UInt
>13102	IdentifierDeclStatement	 
>13103	IdentifierDecl	& os = _outSynapses [ i + k ]
>13104	AssignmentExpr	& os = _outSynapses [ i + k ]
>13105	ArrayIndexing	_outSynapses [ i + k ]
>13106	AdditiveExpression	i + k
>13107	Identifier	k
>13108	Identifier	i
>13109	Identifier	_outSynapses
>13110	Identifier	os
>13111	Identifier	os
>13112	IdentifierDeclType	std 
>13113	Condition	 
>13114	EqualityExpression	( eightStates & 0xff ) != 0
>13115	PrimaryExpression	0
>13116	BitAndExpression	eightStates & 0xff
>13117	PrimaryExpression	0xff
>13118	Identifier	eightStates
>13119	Expression	 
>13120	IncDecOp	k ++
>13121	IncDec	++
>13122	Identifier	k
>13123	AssignmentExpr	eightStates >>= 8
>13124	PrimaryExpression	8
>13125	Identifier	eightStates
>13126	Condition	 
>13127	AndExpression	eightStates != 0 && k < 8
>13128	RelationalExpression	k < 8
>13129	PrimaryExpression	8
>13130	Identifier	k
>13131	EqualityExpression	eightStates != 0
>13132	PrimaryExpression	0
>13133	Identifier	eightStates
>13134	ForInit	 
>13135	IdentifierDeclStatement	int k = 0 ;
>13136	IdentifierDecl	k = 0
>13137	AssignmentExpr	k = 0
>13138	PrimaryExpression	0
>13139	Identifier	k
>13140	Identifier	k
>13141	IdentifierDeclType	int
>13142	IdentifierDeclStatement	 
>13143	IdentifierDecl	eightStates = * ( UInt64 * ) ( state . arrayPtr ( ) + i )
>13144	AssignmentExpr	eightStates = * ( UInt64 * ) ( state . arrayPtr ( ) + i )
>13145	UnaryOp	* ( UInt64 * ) ( state . arrayPtr ( ) + i )
>13146	CastExpression	( UInt64 * ) ( state . arrayPtr ( ) + i )
>13147	AdditiveExpression	state . arrayPtr ( ) + i
>13148	Identifier	i
>13149	CallExpression	state . arrayPtr ( )
>13150	ArgumentList	 
>13151	Callee	state . arrayPtr
>13152	MemberAccess	state . arrayPtr
>13153	Identifier	arrayPtr
>13154	Identifier	state
>13155	CastTarget	UInt64 *
>13156	UnaryOperator	*
>13157	Identifier	eightStates
>13158	Identifier	eightStates
>13159	IdentifierDeclType	UInt64
>13160	AssignmentExpr	 
>13161	PrimaryExpression	8
>13162	Identifier	i
>13163	Condition	 
>13164	RelationalExpression	i < multipleOf8
>13165	Identifier	multipleOf8
>13166	Identifier	i
>13167	ForInit	 
>13168	AssignmentExpr	i = 0
>13169	PrimaryExpression	0
>13170	Identifier	i
>13171	IdentifierDeclStatement	 
>13172	IdentifierDecl	i
>13173	Identifier	i
>13174	IdentifierDeclType	UInt
>13175	IdentifierDeclStatement	 
>13176	IdentifierDecl	multipleOf8 = 8 * ( _nCells / 8 )
>13177	AssignmentExpr	multipleOf8 = 8 * ( _nCells / 8 )
>13178	MultiplicativeExpression	8 * ( _nCells / 8 )
>13179	MultiplicativeExpression	_nCells / 8
>13180	PrimaryExpression	8
>13181	Identifier	_nCells
>13182	PrimaryExpression	8
>13183	Identifier	multipleOf8
>13184	Identifier	multipleOf8
>13185	IdentifierDeclType	const UInt
>13186	ExpressionStatement	 
>13187	AssignmentExpr	p1 = getticks ( )
>13188	CallExpression	getticks ( )
>13189	ArgumentList	 
>13190	Callee	getticks
>13191	Identifier	getticks
>13192	Identifier	p1
>13193	ExpressionStatement	 
>13194	AssignmentExpr	z2 = getticks ( )
>13195	CallExpression	getticks ( )
>13196	ArgumentList	 
>13197	Callee	getticks
>13198	Identifier	getticks
>13199	Identifier	z2
>13200	ExpressionStatement	 
>13201	CallExpression	_inferActivity . reset ( )
>13202	ArgumentList	 
>13203	Callee	_inferActivity . reset
>13204	MemberAccess	_inferActivity . reset
>13205	Identifier	reset
>13206	Identifier	_inferActivity
>13207	ExpressionStatement	 
>13208	AssignmentExpr	z1 = getticks ( )
>13209	CallExpression	getticks ( )
>13210	ArgumentList	 
>13211	Callee	getticks
>13212	Identifier	getticks
>13213	Identifier	z1
>13214	IdentifierDeclStatement	 
>13215	IdentifierDecl	p2
>13216	Identifier	p2
>13217	IdentifierDeclType	ticks
>13218	IdentifierDecl	p1
>13219	Identifier	p1
>13220	IdentifierDeclType	ticks
>13221	IdentifierDecl	z2
>13222	Identifier	z2
>13223	IdentifierDeclType	ticks
>13224	IdentifierDecl	z1
>13225	Identifier	z1
>13226	IdentifierDeclType	ticks
>13260	FunctionDef	Cells4 
>13261	ParameterList	 
>13262	ReturnType	void
>13263	CompoundStatement	 
>13264	ExpressionStatement	 
>13265	ShiftExpression	std 
>13266	PrimaryExpression	\"Note
>13267	Identifier	std 
>13268	ExpressionStatement	 
>13269	ShiftExpression	std 
>13270	ShiftExpression	\"Forward prop
>13271	ShiftExpression	forwardInfPropTimer . toString ( ) << \" \" << std 
>13272	ShiftExpression	\" \" << std 
>13273	ShiftExpression	std 
>13274	ShiftExpression	100.0 * forwardInfPropTimer . getElapsed ( ) / inferenceTime << \"%\n\"
>13275	PrimaryExpression	\"%\n\"
>13276	MultiplicativeExpression	100.0 * forwardInfPropTimer . getElapsed ( ) / inferenceTime
>13277	MultiplicativeExpression	forwardInfPropTimer . getElapsed ( ) / inferenceTime
>13278	Identifier	inferenceTime
>13279	CallExpression	forwardInfPropTimer . getElapsed ( )
>13280	ArgumentList	 
>13281	Callee	forwardInfPropTimer . getElapsed
>13282	MemberAccess	forwardInfPropTimer . getElapsed
>13283	Identifier	getElapsed
>13284	Identifier	forwardInfPropTimer
>13285	PrimaryExpression	100.0
>13286	CallExpression	std 
>13287	ArgumentList	3
>13288	Argument	3
>13289	PrimaryExpression	3
>13290	Callee	std 
>13291	Identifier	std 
>13292	PrimaryExpression	\" \"
>13293	CallExpression	forwardInfPropTimer . toString ( )
>13294	ArgumentList	 
>13295	Callee	forwardInfPropTimer . toString
>13296	MemberAccess	forwardInfPropTimer . toString
>13297	Identifier	toString
>13298	Identifier	forwardInfPropTimer
>13299	PrimaryExpression	\"Forward prop
>13300	Identifier	std 
>13301	ExpressionStatement	 
>13302	ShiftExpression	std 
>13303	ShiftExpression	\"Backtrack
>13304	ShiftExpression	infBacktrackTimer . toString ( ) << \" \" << std 
>13305	ShiftExpression	\" \" << std 
>13306	ShiftExpression	std 
>13307	ShiftExpression	100.0 * infBacktrackTimer . getElapsed ( ) / inferenceTime << \"%\n\"
>13308	PrimaryExpression	\"%\n\"
>13309	MultiplicativeExpression	100.0 * infBacktrackTimer . getElapsed ( ) / inferenceTime
>13310	MultiplicativeExpression	infBacktrackTimer . getElapsed ( ) / inferenceTime
>13311	Identifier	inferenceTime
>13312	CallExpression	infBacktrackTimer . getElapsed ( )
>13313	ArgumentList	 
>13314	Callee	infBacktrackTimer . getElapsed
>13315	MemberAccess	infBacktrackTimer . getElapsed
>13316	Identifier	getElapsed
>13317	Identifier	infBacktrackTimer
>13318	PrimaryExpression	100.0
>13319	CallExpression	std 
>13320	ArgumentList	3
>13321	Argument	3
>13322	PrimaryExpression	3
>13323	Callee	std 
>13324	Identifier	std 
>13325	PrimaryExpression	\" \"
>13326	CallExpression	infBacktrackTimer . toString ( )
>13327	ArgumentList	 
>13328	Callee	infBacktrackTimer . toString
>13329	MemberAccess	infBacktrackTimer . toString
>13330	Identifier	toString
>13331	Identifier	infBacktrackTimer
>13332	PrimaryExpression	\"Backtrack
>13333	Identifier	std 
>13334	ExpressionStatement	 
>13335	ShiftExpression	std 
>13336	ShiftExpression	\"Phase 2
>13337	ShiftExpression	infPhase2Timer . toString ( ) << \" \" << std 
>13338	ShiftExpression	\" \" << std 
>13339	ShiftExpression	std 
>13340	ShiftExpression	100.0 * infPhase2Timer . getElapsed ( ) / inferenceTime << \"%\n\"
>13341	PrimaryExpression	\"%\n\"
>13342	MultiplicativeExpression	100.0 * infPhase2Timer . getElapsed ( ) / inferenceTime
>13343	MultiplicativeExpression	infPhase2Timer . getElapsed ( ) / inferenceTime
>13344	Identifier	inferenceTime
>13345	CallExpression	infPhase2Timer . getElapsed ( )
>13346	ArgumentList	 
>13347	Callee	infPhase2Timer . getElapsed
>13348	MemberAccess	infPhase2Timer . getElapsed
>13349	Identifier	getElapsed
>13350	Identifier	infPhase2Timer
>13351	PrimaryExpression	100.0
>13352	CallExpression	std 
>13353	ArgumentList	3
>13354	Argument	3
>13355	PrimaryExpression	3
>13356	Callee	std 
>13357	Identifier	std 
>13358	PrimaryExpression	\" \"
>13359	CallExpression	infPhase2Timer . toString ( )
>13360	ArgumentList	 
>13361	Callee	infPhase2Timer . toString
>13362	MemberAccess	infPhase2Timer . toString
>13363	Identifier	toString
>13364	Identifier	infPhase2Timer
>13365	PrimaryExpression	\"Phase 2
>13366	Identifier	std 
>13367	ExpressionStatement	 
>13368	ShiftExpression	std 
>13369	ShiftExpression	\"Phase 1
>13370	ShiftExpression	infPhase1Timer . toString ( ) << \" \" << std 
>13371	ShiftExpression	\" \" << std 
>13372	ShiftExpression	std 
>13373	ShiftExpression	100.0 * infPhase1Timer . getElapsed ( ) / inferenceTime << \"%\n\"
>13374	PrimaryExpression	\"%\n\"
>13375	MultiplicativeExpression	100.0 * infPhase1Timer . getElapsed ( ) / inferenceTime
>13376	MultiplicativeExpression	infPhase1Timer . getElapsed ( ) / inferenceTime
>13377	Identifier	inferenceTime
>13378	CallExpression	infPhase1Timer . getElapsed ( )
>13379	ArgumentList	 
>13380	Callee	infPhase1Timer . getElapsed
>13381	MemberAccess	infPhase1Timer . getElapsed
>13382	Identifier	getElapsed
>13383	Identifier	infPhase1Timer
>13384	PrimaryExpression	100.0
>13385	CallExpression	std 
>13386	ArgumentList	3
>13387	Argument	3
>13388	PrimaryExpression	3
>13389	Callee	std 
>13390	Identifier	std 
>13391	PrimaryExpression	\" \"
>13392	CallExpression	infPhase1Timer . toString ( )
>13393	ArgumentList	 
>13394	Callee	infPhase1Timer . toString
>13395	MemberAccess	infPhase1Timer . toString
>13396	Identifier	toString
>13397	Identifier	infPhase1Timer
>13398	PrimaryExpression	\"Phase 1
>13399	Identifier	std 
>13400	ExpressionStatement	 
>13401	ShiftExpression	std 
>13402	ShiftExpression	\"\n\nInference breakdown
>13403	Identifier	std 
>13404	PrimaryExpression	\"\n\nInference breakdown
>13405	Identifier	std 
>13406	ExpressionStatement	 
>13407	ShiftExpression	std 
>13408	PrimaryExpression	\"Note
>13409	Identifier	std 
>13410	ExpressionStatement	 
>13411	ShiftExpression	std 
>13412	ShiftExpression	\"adaptSegment
>13413	ShiftExpression	adaptSegmentTimer . toString ( ) << \" \" << std 
>13414	ShiftExpression	\" \" << std 
>13415	ShiftExpression	std 
>13416	ShiftExpression	100.0 * adaptSegmentTimer . getElapsed ( ) / learnTime << \"%\n\"
>13417	PrimaryExpression	\"%\n\"
>13418	MultiplicativeExpression	100.0 * adaptSegmentTimer . getElapsed ( ) / learnTime
>13419	MultiplicativeExpression	adaptSegmentTimer . getElapsed ( ) / learnTime
>13420	Identifier	learnTime
>13421	CallExpression	adaptSegmentTimer . getElapsed ( )
>13422	ArgumentList	 
>13423	Callee	adaptSegmentTimer . getElapsed
>13424	MemberAccess	adaptSegmentTimer . getElapsed
>13425	Identifier	getElapsed
>13426	Identifier	adaptSegmentTimer
>13427	PrimaryExpression	100.0
>13428	CallExpression	std 
>13429	ArgumentList	3
>13430	Argument	3
>13431	PrimaryExpression	3
>13432	Callee	std 
>13433	Identifier	std 
>13434	PrimaryExpression	\" \"
>13435	CallExpression	adaptSegmentTimer . toString ( )
>13436	ArgumentList	 
>13437	Callee	adaptSegmentTimer . toString
>13438	MemberAccess	adaptSegmentTimer . toString
>13439	Identifier	toString
>13440	Identifier	adaptSegmentTimer
>13441	PrimaryExpression	\"adaptSegment
>13442	Identifier	std 
>13443	ExpressionStatement	 
>13444	ShiftExpression	std 
>13445	ShiftExpression	\"chooseCells
>13446	ShiftExpression	chooseCellsTimer . toString ( ) << \" \" << std 
>13447	ShiftExpression	\" \" << std 
>13448	ShiftExpression	std 
>13449	ShiftExpression	100.0 * chooseCellsTimer . getElapsed ( ) / learnTime << \"%\n\"
>13450	PrimaryExpression	\"%\n\"
>13451	MultiplicativeExpression	100.0 * chooseCellsTimer . getElapsed ( ) / learnTime
>13452	MultiplicativeExpression	chooseCellsTimer . getElapsed ( ) / learnTime
>13453	Identifier	learnTime
>13454	CallExpression	chooseCellsTimer . getElapsed ( )
>13455	ArgumentList	 
>13456	Callee	chooseCellsTimer . getElapsed
>13457	MemberAccess	chooseCellsTimer . getElapsed
>13458	Identifier	getElapsed
>13459	Identifier	chooseCellsTimer
>13460	PrimaryExpression	100.0
>13461	CallExpression	std 
>13462	ArgumentList	3
>13463	Argument	3
>13464	PrimaryExpression	3
>13465	Callee	std 
>13466	Identifier	std 
>13467	PrimaryExpression	\" \"
>13468	CallExpression	chooseCellsTimer . toString ( )
>13469	ArgumentList	 
>13470	Callee	chooseCellsTimer . toString
>13471	MemberAccess	chooseCellsTimer . toString
>13472	Identifier	toString
>13473	Identifier	chooseCellsTimer
>13474	PrimaryExpression	\"chooseCells
>13475	Identifier	std 
>13476	ExpressionStatement	 
>13477	ShiftExpression	std 
>13478	ShiftExpression	\"getCellForNewSegment
>13479	ShiftExpression	getNewCellTimer . toString ( ) << \" \" << std 
>13480	ShiftExpression	\" \" << std 
>13481	ShiftExpression	std 
>13482	ShiftExpression	100.0 * getNewCellTimer . getElapsed ( ) / learnTime << \"%\n\"
>13483	PrimaryExpression	\"%\n\"
>13484	MultiplicativeExpression	100.0 * getNewCellTimer . getElapsed ( ) / learnTime
>13485	MultiplicativeExpression	getNewCellTimer . getElapsed ( ) / learnTime
>13486	Identifier	learnTime
>13487	CallExpression	getNewCellTimer . getElapsed ( )
>13488	ArgumentList	 
>13489	Callee	getNewCellTimer . getElapsed
>13490	MemberAccess	getNewCellTimer . getElapsed
>13491	Identifier	getElapsed
>13492	Identifier	getNewCellTimer
>13493	PrimaryExpression	100.0
>13494	CallExpression	std 
>13495	ArgumentList	3
>13496	Argument	3
>13497	PrimaryExpression	3
>13498	Callee	std 
>13499	Identifier	std 
>13500	PrimaryExpression	\" \"
>13501	CallExpression	getNewCellTimer . toString ( )
>13502	ArgumentList	 
>13503	Callee	getNewCellTimer . toString
>13504	MemberAccess	getNewCellTimer . toString
>13505	Identifier	toString
>13506	Identifier	getNewCellTimer
>13507	PrimaryExpression	\"getCellForNewSegment
>13508	Identifier	std 
>13509	ExpressionStatement	 
>13510	ShiftExpression	std 
>13511	ShiftExpression	\"Forward prop
>13512	ShiftExpression	forwardLearnPropTimer . toString ( ) << \" \" << std 
>13513	ShiftExpression	\" \" << std 
>13514	ShiftExpression	std 
>13515	ShiftExpression	100.0 * forwardLearnPropTimer . getElapsed ( ) / learnTime << \"%\n\"
>13516	PrimaryExpression	\"%\n\"
>13517	MultiplicativeExpression	100.0 * forwardLearnPropTimer . getElapsed ( ) / learnTime
>13518	MultiplicativeExpression	forwardLearnPropTimer . getElapsed ( ) / learnTime
>13519	Identifier	learnTime
>13520	CallExpression	forwardLearnPropTimer . getElapsed ( )
>13521	ArgumentList	 
>13522	Callee	forwardLearnPropTimer . getElapsed
>13523	MemberAccess	forwardLearnPropTimer . getElapsed
>13524	Identifier	getElapsed
>13525	Identifier	forwardLearnPropTimer
>13526	PrimaryExpression	100.0
>13527	CallExpression	std 
>13528	ArgumentList	3
>13529	Argument	3
>13530	PrimaryExpression	3
>13531	Callee	std 
>13532	Identifier	std 
>13533	PrimaryExpression	\" \"
>13534	CallExpression	forwardLearnPropTimer . toString ( )
>13535	ArgumentList	 
>13536	Callee	forwardLearnPropTimer . toString
>13537	MemberAccess	forwardLearnPropTimer . toString
>13538	Identifier	toString
>13539	Identifier	forwardLearnPropTimer
>13540	PrimaryExpression	\"Forward prop
>13541	Identifier	std 
>13542	ExpressionStatement	 
>13543	ShiftExpression	std 
>13544	ShiftExpression	\"Backtrack
>13545	ShiftExpression	learnBacktrackTimer . toString ( ) << \" \" << std 
>13546	ShiftExpression	\" \" << std 
>13547	ShiftExpression	std 
>13548	ShiftExpression	100.0 * learnBacktrackTimer . getElapsed ( ) / learnTime << \"%\n\"
>13549	PrimaryExpression	\"%\n\"
>13550	MultiplicativeExpression	100.0 * learnBacktrackTimer . getElapsed ( ) / learnTime
>13551	MultiplicativeExpression	learnBacktrackTimer . getElapsed ( ) / learnTime
>13552	Identifier	learnTime
>13553	CallExpression	learnBacktrackTimer . getElapsed ( )
>13554	ArgumentList	 
>13555	Callee	learnBacktrackTimer . getElapsed
>13556	MemberAccess	learnBacktrackTimer . getElapsed
>13557	Identifier	getElapsed
>13558	Identifier	learnBacktrackTimer
>13559	PrimaryExpression	100.0
>13560	CallExpression	std 
>13561	ArgumentList	3
>13562	Argument	3
>13563	PrimaryExpression	3
>13564	Callee	std 
>13565	Identifier	std 
>13566	PrimaryExpression	\" \"
>13567	CallExpression	learnBacktrackTimer . toString ( )
>13568	ArgumentList	 
>13569	Callee	learnBacktrackTimer . toString
>13570	MemberAccess	learnBacktrackTimer . toString
>13571	Identifier	toString
>13572	Identifier	learnBacktrackTimer
>13573	PrimaryExpression	\"Backtrack
>13574	Identifier	std 
>13575	ExpressionStatement	 
>13576	ShiftExpression	std 
>13577	ShiftExpression	\"Phase 2
>13578	ShiftExpression	learnPhase2Timer . toString ( ) << \" \" << std 
>13579	ShiftExpression	\" \" << std 
>13580	ShiftExpression	std 
>13581	ShiftExpression	100.0 * learnPhase2Timer . getElapsed ( ) / learnTime << \"%\n\"
>13582	PrimaryExpression	\"%\n\"
>13583	MultiplicativeExpression	100.0 * learnPhase2Timer . getElapsed ( ) / learnTime
>13584	MultiplicativeExpression	learnPhase2Timer . getElapsed ( ) / learnTime
>13585	Identifier	learnTime
>13586	CallExpression	learnPhase2Timer . getElapsed ( )
>13587	ArgumentList	 
>13588	Callee	learnPhase2Timer . getElapsed
>13589	MemberAccess	learnPhase2Timer . getElapsed
>13590	Identifier	getElapsed
>13591	Identifier	learnPhase2Timer
>13592	PrimaryExpression	100.0
>13593	CallExpression	std 
>13594	ArgumentList	3
>13595	Argument	3
>13596	PrimaryExpression	3
>13597	Callee	std 
>13598	Identifier	std 
>13599	PrimaryExpression	\" \"
>13600	CallExpression	learnPhase2Timer . toString ( )
>13601	ArgumentList	 
>13602	Callee	learnPhase2Timer . toString
>13603	MemberAccess	learnPhase2Timer . toString
>13604	Identifier	toString
>13605	Identifier	learnPhase2Timer
>13606	PrimaryExpression	\"Phase 2
>13607	Identifier	std 
>13608	ExpressionStatement	 
>13609	ShiftExpression	std 
>13610	ShiftExpression	\"Phase 1
>13611	ShiftExpression	learnPhase1Timer . toString ( ) << \" \" << std 
>13612	ShiftExpression	\" \" << std 
>13613	ShiftExpression	std 
>13614	ShiftExpression	100.0 * learnPhase1Timer . getElapsed ( ) / learnTime << \"%\n\"
>13615	PrimaryExpression	\"%\n\"
>13616	MultiplicativeExpression	100.0 * learnPhase1Timer . getElapsed ( ) / learnTime
>13617	MultiplicativeExpression	learnPhase1Timer . getElapsed ( ) / learnTime
>13618	Identifier	learnTime
>13619	CallExpression	learnPhase1Timer . getElapsed ( )
>13620	ArgumentList	 
>13621	Callee	learnPhase1Timer . getElapsed
>13622	MemberAccess	learnPhase1Timer . getElapsed
>13623	Identifier	getElapsed
>13624	Identifier	learnPhase1Timer
>13625	PrimaryExpression	100.0
>13626	CallExpression	std 
>13627	ArgumentList	3
>13628	Argument	3
>13629	PrimaryExpression	3
>13630	Callee	std 
>13631	Identifier	std 
>13632	PrimaryExpression	\" \"
>13633	CallExpression	learnPhase1Timer . toString ( )
>13634	ArgumentList	 
>13635	Callee	learnPhase1Timer . toString
>13636	MemberAccess	learnPhase1Timer . toString
>13637	Identifier	toString
>13638	Identifier	learnPhase1Timer
>13639	PrimaryExpression	\"Phase 1
>13640	Identifier	std 
>13641	ExpressionStatement	 
>13642	ShiftExpression	std 
>13643	ShiftExpression	\"\n\nLearning breakdown
>13644	Identifier	std 
>13645	PrimaryExpression	\"\n\nLearning breakdown
>13646	Identifier	std 
>13647	ExpressionStatement	 
>13648	ShiftExpression	std 
>13649	ShiftExpression	\"Total time in inference
>13650	ShiftExpression	inferenceTimer . toString ( ) << \"\n\"
>13651	PrimaryExpression	\"\n\"
>13652	CallExpression	inferenceTimer . toString ( )
>13653	ArgumentList	 
>13654	Callee	inferenceTimer . toString
>13655	MemberAccess	inferenceTimer . toString
>13656	Identifier	toString
>13657	Identifier	inferenceTimer
>13658	PrimaryExpression	\"Total time in inference
>13659	Identifier	std 
>13660	ExpressionStatement	 
>13661	ShiftExpression	std 
>13662	ShiftExpression	\"Total time in learning
>13663	ShiftExpression	learningTimer . toString ( ) << \"\n\"
>13664	PrimaryExpression	\"\n\"
>13665	CallExpression	learningTimer . toString ( )
>13666	ArgumentList	 
>13667	Callee	learningTimer . toString
>13668	MemberAccess	learningTimer . toString
>13669	Identifier	toString
>13670	Identifier	learningTimer
>13671	PrimaryExpression	\"Total time in learning
>13672	Identifier	std 
>13673	ExpressionStatement	 
>13674	ShiftExpression	std 
>13675	ShiftExpression	\"Total time in compute
>13676	ShiftExpression	computeTimer . toString ( ) << \"\n\"
>13677	PrimaryExpression	\"\n\"
>13678	CallExpression	computeTimer . toString ( )
>13679	ArgumentList	 
>13680	Callee	computeTimer . toString
>13681	MemberAccess	computeTimer . toString
>13682	Identifier	toString
>13683	Identifier	computeTimer
>13684	PrimaryExpression	\"Total time in compute
>13685	Identifier	std 
>13686	IdentifierDeclStatement	 
>13687	IdentifierDecl	inferenceTime = inferenceTimer . getElapsed ( )
>13688	AssignmentExpr	inferenceTime = inferenceTimer . getElapsed ( )
>13689	CallExpression	inferenceTimer . getElapsed ( )
>13690	ArgumentList	 
>13691	Callee	inferenceTimer . getElapsed
>13692	MemberAccess	inferenceTimer . getElapsed
>13693	Identifier	getElapsed
>13694	Identifier	inferenceTimer
>13695	Identifier	inferenceTime
>13696	Identifier	inferenceTime
>13697	IdentifierDeclType	Real64
>13698	IdentifierDecl	learnTime = learningTimer . getElapsed ( )
>13699	AssignmentExpr	learnTime = learningTimer . getElapsed ( )
>13700	CallExpression	learningTimer . getElapsed ( )
>13701	ArgumentList	 
>13702	Callee	learningTimer . getElapsed
>13703	MemberAccess	learningTimer . getElapsed
>13704	Identifier	getElapsed
>13705	Identifier	learningTimer
>13706	Identifier	learnTime
>13707	Identifier	learnTime
>13708	IdentifierDeclType	Real64
>13730	FunctionDef	Cells4 
>13731	ParameterList	 
>13732	ReturnType	void
>13733	CompoundStatement	 
>13734	ExpressionStatement	 
>13735	CallExpression	chooseCellsTimer . reset ( )
>13736	ArgumentList	 
>13737	Callee	chooseCellsTimer . reset
>13738	MemberAccess	chooseCellsTimer . reset
>13739	Identifier	reset
>13740	Identifier	chooseCellsTimer
>13741	ExpressionStatement	 
>13742	CallExpression	getNewCellTimer . reset ( )
>13743	ArgumentList	 
>13744	Callee	getNewCellTimer . reset
>13745	MemberAccess	getNewCellTimer . reset
>13746	Identifier	reset
>13747	Identifier	getNewCellTimer
>13748	ExpressionStatement	 
>13749	CallExpression	forwardInfPropTimer . reset ( )
>13750	ArgumentList	 
>13751	Callee	forwardInfPropTimer . reset
>13752	MemberAccess	forwardInfPropTimer . reset
>13753	Identifier	reset
>13754	Identifier	forwardInfPropTimer
>13755	ExpressionStatement	 
>13756	CallExpression	infBacktrackTimer . reset ( )
>13757	ArgumentList	 
>13758	Callee	infBacktrackTimer . reset
>13759	MemberAccess	infBacktrackTimer . reset
>13760	Identifier	reset
>13761	Identifier	infBacktrackTimer
>13762	ExpressionStatement	 
>13763	CallExpression	infPhase2Timer . reset ( )
>13764	ArgumentList	 
>13765	Callee	infPhase2Timer . reset
>13766	MemberAccess	infPhase2Timer . reset
>13767	Identifier	reset
>13768	Identifier	infPhase2Timer
>13769	ExpressionStatement	 
>13770	CallExpression	infPhase1Timer . reset ( )
>13771	ArgumentList	 
>13772	Callee	infPhase1Timer . reset
>13773	MemberAccess	infPhase1Timer . reset
>13774	Identifier	reset
>13775	Identifier	infPhase1Timer
>13776	ExpressionStatement	 
>13777	CallExpression	forwardLearnPropTimer . reset ( )
>13778	ArgumentList	 
>13779	Callee	forwardLearnPropTimer . reset
>13780	MemberAccess	forwardLearnPropTimer . reset
>13781	Identifier	reset
>13782	Identifier	forwardLearnPropTimer
>13783	ExpressionStatement	 
>13784	CallExpression	learnBacktrackTimer . reset ( )
>13785	ArgumentList	 
>13786	Callee	learnBacktrackTimer . reset
>13787	MemberAccess	learnBacktrackTimer . reset
>13788	Identifier	reset
>13789	Identifier	learnBacktrackTimer
>13790	ExpressionStatement	 
>13791	CallExpression	learnPhase2Timer . reset ( )
>13792	ArgumentList	 
>13793	Callee	learnPhase2Timer . reset
>13794	MemberAccess	learnPhase2Timer . reset
>13795	Identifier	reset
>13796	Identifier	learnPhase2Timer
>13797	ExpressionStatement	 
>13798	CallExpression	learnPhase1Timer . reset ( )
>13799	ArgumentList	 
>13800	Callee	learnPhase1Timer . reset
>13801	MemberAccess	learnPhase1Timer . reset
>13802	Identifier	reset
>13803	Identifier	learnPhase1Timer
>13804	ExpressionStatement	 
>13805	CallExpression	learningTimer . reset ( )
>13806	ArgumentList	 
>13807	Callee	learningTimer . reset
>13808	MemberAccess	learningTimer . reset
>13809	Identifier	reset
>13810	Identifier	learningTimer
>13811	ExpressionStatement	 
>13812	CallExpression	inferenceTimer . reset ( )
>13813	ArgumentList	 
>13814	Callee	inferenceTimer . reset
>13815	MemberAccess	inferenceTimer . reset
>13816	Identifier	reset
>13817	Identifier	inferenceTimer
>13818	ExpressionStatement	 
>13819	CallExpression	computeTimer . reset ( )
>13820	ArgumentList	 
>13821	Callee	computeTimer . reset
>13822	MemberAccess	computeTimer . reset
>13823	Identifier	reset
>13824	Identifier	computeTimer
<23=73,24
<24=70,67,64,61,58,55,52,49,46,43,40,37,34,31,28,25
<25=27,26
<28=30,29
<31=33,32
<34=36,35
<37=39,38
<40=42,41
<43=45,44
<46=48,47
<49=51,50
<52=54,53
<55=57,56
<58=60,59
<61=63,62
<64=66,65
<67=69,68
<70=72,71
<73=109,74
<74=75
<75=107,76
<76=105,103,101,99,97,95,93,91,89,87,85,83,81,79,77
<77=78
<79=80
<81=82
<83=84
<85=86
<87=88
<89=90
<91=92
<93=94
<95=96
<97=98
<99=100
<101=102
<103=104
<105=106
<107=108
<109=110
<110=112,111
<134=136,135
<136=152,151,150,149,147,146,145,144,142,141,140,139,137
<137=138
<142=143
<147=148
<152=174,153
<153=173,172,171,169,168,167,166,164,163,162,161,159,158,157,156,154
<154=155
<159=160
<164=165
<169=170
<174=175
<180=189,188,181
<181=185,182
<182=184,183
<185=187,186
<189=224,194,190
<190=191
<191=193,192
<194=216,207,204,195
<195=196
<196=197
<197=203,198
<198=202,199
<199=201,200
<204=206,205
<207=208
<208=215,209
<209=211,210
<211=212
<212=214,213
<216=217
<217=218
<218=223,222,219
<219=221,220
<224=225
<225=227,226
<235=244,243,236
<236=240,237
<237=239,238
<240=242,241
<244=268,257,245
<245=246
<246=256,247
<247=255,248
<248=254,249
<249=253,250
<250=252,251
<257=258
<258=267,266,259
<259=265,260
<260=264,261
<261=263,262
<268=269
<269=278,277,270
<270=276,271
<271=275,272
<272=274,273
<286=298,297,287
<287=294,291,288
<288=290,289
<291=293,292
<294=296,295
<298=336,325,299
<299=316,314,300
<300=301
<301=302
<302=310,303
<303=308,306,304
<304=305
<306=307
<308=309
<310=311
<311=313,312
<314=315
<316=317
<317=319,318
<319=321,320
<321=322
<322=324,323
<325=326
<326=335,334,327
<327=333,328
<328=330,329
<330=332,331
<336=353,337
<337=338
<338=351,339
<339=340
<340=341
<341=350,342
<342=344,343
<344=345
<345=347,346
<347=349,348
<351=352
<353=354
<354=363,355
<355=356
<356=357
<357=362,358
<358=360,359
<360=361
<363=364
<385=403,402,386
<386=399,396,393,390,387
<387=389,388
<390=392,391
<393=395,394
<396=398,397
<399=401,400
<403=606,605,601,594,481,438,428,415,406,404
<404=405
<406=407
<407=411,408
<408=409
<409=410
<411=412
<412=414,413
<415=416
<416=427,426,417
<417=425,418
<418=424,419
<419=423,420
<420=422,421
<428=431,429
<429=430
<431=432
<432=434,433
<434=435
<435=437,436
<438=479,439
<439=461,440
<440=457,441
<441=442
<442=443
<443=455,444
<444=453,451,449,447,445
<445=446
<447=448
<449=450
<451=452
<453=454
<455=456
<457=458
<458=460,459
<461=462
<462=478,477,463
<463=476,464
<464=473,465
<465=472,466
<466=468,467
<468=469
<469=471,470
<473=475,474
<479=480
<481=586,482
<482=575,574,567,538,483
<483=530,521,518,484
<484=502,485
<485=486
<486=487
<487=498,488
<488=489
<489=490
<490=492,491
<492=493
<493=495,494
<495=497,496
<498=499
<499=501,500
<502=503
<503=514,504
<504=505
<505=506
<506=508,507
<508=509
<509=511,510
<511=513,512
<514=515
<515=517,516
<518=520,519
<521=522
<522=529,523
<523=525,524
<525=526
<526=528,527
<530=531
<531=532
<532=537,536,533
<533=535,534
<538=558,539
<539=549,540
<540=541
<541=545,542
<542=543
<543=544
<545=546
<546=548,547
<549=550
<550=557,551
<551=553,552
<553=554
<554=556,555
<558=559
<559=566,560
<560=562,561
<562=563
<563=565,564
<567=568
<568=573,572,569
<569=571,570
<575=576
<576=585,584,577
<577=583,578
<578=580,579
<580=582,581
<586=587
<587=593,588
<588=592,589
<589=591,590
<594=595
<595=597,596
<597=598
<598=600,599
<601=602
<602=604,603
<606=631,607
<607=608
<608=629,609
<609=610
<610=611
<611=622,612
<612=621,613
<613=615,614
<615=616
<616=618,617
<618=620,619
<622=628,623
<623=627,624
<624=626,625
<629=630
<631=632
<632=641,633
<633=634
<634=635
<635=640,636
<636=638,637
<638=639
<641=642
<676=691,690,677
<677=687,684,681,678
<678=680,679
<681=683,682
<684=686,685
<687=689,688
<691=760,744,692
<692=740,737,693
<693=728,721,705,694
<694=695
<695=699,696
<696=697
<697=698
<699=700
<700=702,701
<702=704,703
<705=706
<706=719,707
<707=708
<708=709
<709=717,710
<710=715,711
<711=712
<712=714,713
<715=716
<717=718
<719=720
<721=722
<722=727,726,723
<723=725,724
<728=729
<729=736,735,730
<730=734,731
<731=733,732
<737=739,738
<740=741
<741=743,742
<744=745
<745=758,746
<746=747
<747=748
<748=757,749
<749=751,750
<751=752
<752=754,753
<754=756,755
<758=759
<760=761
<761=770,762
<762=763
<763=764
<764=769,765
<765=767,766
<767=768
<770=771
<795=807,806,796
<796=803,800,797
<797=799,798
<800=802,801
<803=805,804
<807=937,921,808
<808=913,904,901,809
<809=892,883,810
<810=875,866,863,811
<811=850,812
<812=830,814,813
<814=815
<815=826,816
<816=817
<817=818
<818=820,819
<820=822,821
<822=823
<823=825,824
<826=827
<827=829,828
<830=831
<831=848,832
<832=844,833
<833=834
<834=843,835
<835=837,836
<837=839,838
<839=840
<840=842,841
<844=845
<845=847,846
<848=849
<850=851
<851=857,852
<852=855,853
<853=854
<855=856
<857=858
<858=860,859
<860=862,861
<863=865,864
<866=867
<867=874,868
<868=870,869
<870=871
<871=873,872
<875=876
<876=877
<877=882,881,878
<878=880,879
<883=884
<884=891,890,885
<885=889,886
<886=888,887
<892=893
<893=900,899,894
<894=898,895
<895=897,896
<901=903,902
<904=905
<905=912,906
<906=908,907
<908=909
<909=911,910
<913=914
<914=915
<915=920,919,916
<916=918,917
<921=922
<922=935,923
<923=924
<924=925
<925=934,926
<926=928,927
<928=929
<929=931,930
<931=933,932
<935=936
<937=938
<938=947,939
<939=940
<940=941
<941=946,942
<942=944,943
<944=945
<947=948
<975=981,980,976
<976=977
<977=979,978
<981=1600,1588,1574,1570,1566,1565,1561,1554,1547,1538,1529,1522,1215,1111,1099,998,994,982
<982=983
<983=992,984
<984=985
<985=986
<986=988,987
<988=989
<989=991,990
<992=993
<994=995
<995=997,996
<998=1091,1087,1084,999
<999=1080,1057,1000
<1000=1036,1003,1001
<1001=1002
<1003=1011,1004
<1004=1005
<1005=1007,1006
<1007=1008
<1008=1010,1009
<1011=1032,1012
<1012=1028,1017,1013
<1013=1014
<1014=1016,1015
<1017=1018
<1018=1026,1019
<1019=1024,1020
<1020=1021
<1021=1023,1022
<1024=1025
<1026=1027
<1028=1029
<1029=1031,1030
<1032=1033
<1033=1035,1034
<1036=1037
<1037=1049,1038
<1038=1044,1039
<1039=1041,1040
<1041=1043,1042
<1044=1048,1045
<1045=1047,1046
<1049=1056,1050
<1050=1052,1051
<1052=1053
<1053=1055,1054
<1057=1058
<1058=1079,1059
<1059=1077,1060
<1060=1070,1063,1061
<1061=1062
<1063=1064
<1064=1066,1065
<1066=1067
<1067=1069,1068
<1070=1071
<1071=1073,1072
<1073=1074
<1074=1076,1075
<1077=1078
<1080=1081
<1081=1083,1082
<1084=1086,1085
<1087=1088
<1088=1090,1089
<1091=1092
<1092=1093
<1093=1098,1097,1094
<1094=1096,1095
<1099=1100
<1100=1110,1109,1101
<1101=1108,1102
<1102=1104,1103
<1104=1105
<1105=1107,1106
<1111=1209,1187,1112
<1112=1113
<1113=1164,1114
<1114=1158,1115
<1115=1154,1150,1133,1116
<1116=1117
<1117=1131,1118
<1118=1129,1127,1119
<1119=1120
<1120=1126,1121
<1121=1125,1122
<1122=1124,1123
<1127=1128
<1129=1130
<1131=1132
<1133=1134
<1134=1148,1135
<1135=1146,1144,1136
<1136=1137
<1137=1143,1138
<1138=1142,1139
<1139=1141,1140
<1144=1145
<1146=1147
<1148=1149
<1150=1151
<1151=1153,1152
<1154=1155
<1155=1157,1156
<1158=1159
<1159=1163,1160
<1160=1162,1161
<1164=1183,1165
<1165=1166
<1166=1167
<1167=1182,1168
<1168=1181,1169
<1169=1171,1170
<1171=1175,1172
<1172=1174,1173
<1175=1177,1176
<1177=1178
<1178=1180,1179
<1183=1184
<1184=1186,1185
<1187=1197,1193,1188
<1188=1189
<1189=1191,1190
<1191=1192
<1193=1194
<1194=1196,1195
<1197=1205,1198
<1198=1199
<1199=1200
<1200=1204,1201
<1201=1203,1202
<1205=1206
<1206=1208,1207
<1209=1210
<1210=1214,1211
<1211=1213,1212
<1215=1513,1510,1216
<1216=1498,1460,1456,1449,1324,1217
<1217=1320,1310,1218
<1218=1219
<1219=1306,1302,1271,1263,1259,1255,1238,1221,1220
<1221=1222
<1222=1236,1223
<1223=1234,1232,1224
<1224=1225
<1225=1231,1226
<1226=1230,1227
<1227=1229,1228
<1232=1233
<1234=1235
<1236=1237
<1238=1239
<1239=1253,1240
<1240=1251,1249,1241
<1241=1242
<1242=1248,1243
<1243=1247,1244
<1244=1246,1245
<1249=1250
<1251=1252
<1253=1254
<1255=1256
<1256=1258,1257
<1259=1260
<1260=1262,1261
<1263=1265,1264
<1265=1266
<1266=1270,1267
<1267=1269,1268
<1271=1294,1272
<1272=1273
<1273=1274
<1274=1293,1275
<1275=1292,1276
<1276=1282,1277
<1277=1281,1278
<1278=1280,1279
<1282=1286,1283
<1283=1285,1284
<1286=1288,1287
<1288=1289
<1289=1291,1290
<1294=1295
<1295=1299,1296
<1296=1298,1297
<1299=1301,1300
<1302=1303
<1303=1305,1304
<1306=1307
<1307=1309,1308
<1310=1311
<1311=1312
<1312=1316,1313
<1313=1314
<1314=1315
<1316=1317
<1317=1319,1318
<1320=1321
<1321=1323,1322
<1324=1441,1432,1429,1325
<1325=1389,1385,1370,1364,1339,1332,1326
<1326=1328,1327
<1328=1329
<1329=1331,1330
<1332=1333
<1333=1338,1334
<1334=1336,1335
<1336=1337
<1339=1360,1340
<1340=1356,1345,1341
<1341=1342
<1342=1344,1343
<1345=1346
<1346=1354,1347
<1347=1352,1348
<1348=1349
<1349=1351,1350
<1352=1353
<1354=1355
<1356=1357
<1357=1359,1358
<1360=1361
<1361=1363,1362
<1364=1366,1365
<1366=1367
<1367=1369,1368
<1370=1371
<1371=1384,1372
<1372=1382,1373
<1373=1378,1374
<1374=1375
<1375=1377,1376
<1378=1379
<1379=1381,1380
<1382=1383
<1385=1386
<1386=1388,1387
<1389=1425,1390
<1390=1421,1391
<1391=1413,1404,1401,1392
<1392=1393
<1393=1394
<1394=1400,1395
<1395=1399,1396
<1396=1398,1397
<1401=1403,1402
<1404=1405
<1405=1412,1406
<1406=1408,1407
<1408=1409
<1409=1411,1410
<1413=1414
<1414=1415
<1415=1420,1419,1416
<1416=1418,1417
<1421=1422
<1422=1424,1423
<1425=1426
<1426=1428,1427
<1429=1431,1430
<1432=1433
<1433=1440,1434
<1434=1436,1435
<1436=1437
<1437=1439,1438
<1441=1442
<1442=1443
<1443=1448,1447,1444
<1444=1446,1445
<1449=1450
<1450=1455,1454,1451
<1451=1453,1452
<1456=1457
<1457=1459,1458
<1460=1494,1461
<1461=1477,1466,1462
<1462=1463
<1463=1465,1464
<1466=1467
<1467=1475,1468
<1468=1473,1469
<1469=1470
<1470=1472,1471
<1473=1474
<1475=1476
<1477=1478
<1478=1493,1479
<1479=1492,1480
<1480=1482,1481
<1482=1486,1483
<1483=1485,1484
<1486=1488,1487
<1488=1489
<1489=1491,1490
<1494=1495
<1495=1497,1496
<1498=1500,1499
<1500=1501
<1501=1507,1502
<1502=1506,1503
<1503=1505,1504
<1507=1509,1508
<1510=1512,1511
<1513=1514
<1514=1521,1515
<1515=1517,1516
<1517=1518
<1518=1520,1519
<1522=1523
<1523=1528,1527,1524
<1524=1526,1525
<1529=1530
<1530=1537,1536,1531
<1531=1535,1532
<1532=1534,1533
<1538=1539
<1539=1546,1545,1540
<1540=1544,1541
<1541=1543,1542
<1547=1548
<1548=1553,1552,1549
<1549=1551,1550
<1554=1555
<1555=1557,1556
<1557=1558
<1558=1560,1559
<1561=1562
<1562=1564,1563
<1566=1567
<1567=1569,1568
<1570=1571
<1571=1573,1572
<1574=1575
<1575=1587,1586,1576
<1576=1585,1577
<1577=1579,1578
<1579=1581,1580
<1581=1582
<1582=1584,1583
<1588=1589
<1589=1598,1590
<1590=1591
<1591=1592
<1592=1594,1593
<1594=1595
<1595=1597,1596
<1598=1599
<1600=1602,1601
<1602=1603
<1603=1605,1604
<1605=1607,1606
<1607=1608
<1608=1610,1609
<1664=1673,1672,1665
<1665=1669,1666
<1666=1668,1667
<1669=1671,1670
<1673=2000,1991,1982,1969,1918,1911,1676,1674
<1674=1675
<1676=1903,1899,1896,1677
<1677=1892,1888,1822,1744,1734,1709,1697,1690,1678
<1678=1679
<1679=1688,1680
<1680=1681
<1681=1682
<1682=1684,1683
<1684=1685
<1685=1687,1686
<1688=1689
<1690=1691
<1691=1695,1692
<1692=1693
<1693=1694
<1695=1696
<1697=1698
<1698=1707,1699
<1699=1700
<1700=1701
<1701=1703,1702
<1703=1704
<1704=1706,1705
<1707=1708
<1709=1730,1710
<1710=1726,1715,1711
<1711=1712
<1712=1714,1713
<1715=1716
<1716=1724,1717
<1717=1722,1718
<1718=1719
<1719=1721,1720
<1722=1723
<1724=1725
<1726=1727
<1727=1729,1728
<1730=1731
<1731=1733,1732
<1734=1736,1735
<1736=1737
<1737=1741,1738
<1738=1740,1739
<1741=1743,1742
<1744=1818,1760,1745
<1745=1746
<1746=1747
<1747=1748
<1748=1759,1749
<1749=1757,1750
<1750=1753,1751
<1751=1752
<1753=1754
<1754=1756,1755
<1757=1758
<1760=1811,1761
<1761=1803,1792,1789,1762
<1762=1776,1767,1763
<1763=1764
<1764=1766,1765
<1767=1768
<1768=1772,1769
<1769=1770
<1770=1771
<1772=1773
<1773=1775,1774
<1776=1777
<1777=1788,1787,1778
<1778=1786,1779
<1779=1781,1780
<1781=1783,1782
<1783=1785,1784
<1789=1791,1790
<1792=1793
<1793=1802,1794
<1794=1796,1795
<1796=1797
<1797=1799,1798
<1799=1801,1800
<1803=1804
<1804=1805
<1805=1810,1809,1806
<1806=1808,1807
<1811=1812
<1812=1814,1813
<1814=1815
<1815=1817,1816
<1818=1819
<1819=1821,1820
<1822=1884,1823
<1823=1867,1833,1824
<1824=1825
<1825=1831,1826
<1826=1829,1827
<1827=1828
<1829=1830
<1831=1832
<1833=1859,1848,1845,1834
<1834=1835
<1835=1836
<1836=1838,1837
<1838=1844,1839
<1839=1841,1840
<1841=1843,1842
<1845=1847,1846
<1848=1849
<1849=1858,1850
<1850=1852,1851
<1852=1853
<1853=1855,1854
<1855=1857,1856
<1859=1860
<1860=1861
<1861=1866,1865,1862
<1862=1864,1863
<1867=1868
<1868=1882,1869
<1869=1880,1878,1870
<1870=1871
<1871=1877,1872
<1872=1876,1873
<1873=1875,1874
<1878=1879
<1880=1881
<1882=1883
<1884=1885
<1885=1887,1886
<1888=1889
<1889=1891,1890
<1892=1893
<1893=1895,1894
<1896=1898,1897
<1899=1900
<1900=1902,1901
<1903=1904
<1904=1905
<1905=1910,1909,1906
<1906=1908,1907
<1911=1912
<1912=1917,1916,1913
<1913=1915,1914
<1918=1965,1919
<1919=1959,1945,1935,1924,1920
<1920=1921
<1921=1923,1922
<1924=1925
<1925=1933,1926
<1926=1931,1927
<1927=1928
<1928=1930,1929
<1931=1932
<1933=1934
<1935=1936
<1936=1944,1937
<1937=1939,1938
<1939=1943,1940
<1940=1942,1941
<1945=1957,1952,1946
<1946=1947
<1947=1948
<1948=1949
<1949=1951,1950
<1952=1953
<1953=1954
<1954=1956,1955
<1957=1958
<1959=1960
<1960=1964,1961
<1961=1963,1962
<1965=1966
<1966=1968,1967
<1969=1978,1970
<1970=1971
<1971=1972
<1972=1974,1973
<1974=1975
<1975=1977,1976
<1978=1979
<1979=1981,1980
<1982=1983
<1983=1990,1989,1984
<1984=1988,1985
<1985=1987,1986
<1991=1992
<1992=1998,1993
<1993=1994
<1994=1995
<1995=1997,1996
<1998=1999
<2000=2001
<2001=2011,2010,2002
<2002=2009,2003
<2003=2005,2004
<2005=2006
<2006=2008,2007
<2051=2054,2053,2052
<2054=2292,2274,2273,2269,2262,2255,2248,2213,2186,2163,2154,2059,2055
<2055=2056
<2056=2058,2057
<2059=2146,2140,2137,2060
<2060=2133,2110,2061
<2061=2097,2064,2062
<2062=2063
<2064=2072,2065
<2065=2066
<2066=2068,2067
<2068=2069
<2069=2071,2070
<2072=2093,2073
<2073=2089,2078,2074
<2074=2075
<2075=2077,2076
<2078=2079
<2079=2087,2080
<2080=2085,2081
<2081=2082
<2082=2084,2083
<2085=2086
<2087=2088
<2089=2090
<2090=2092,2091
<2093=2094
<2094=2096,2095
<2097=2098
<2098=2102,2099
<2099=2101,2100
<2102=2109,2103
<2103=2105,2104
<2105=2106
<2106=2108,2107
<2110=2111
<2111=2132,2112
<2112=2130,2113
<2113=2123,2116,2114
<2114=2115
<2116=2117
<2117=2119,2118
<2119=2120
<2120=2122,2121
<2123=2124
<2124=2126,2125
<2126=2127
<2127=2129,2128
<2130=2131
<2133=2134
<2134=2136,2135
<2137=2139,2138
<2140=2141
<2141=2145,2142
<2142=2144,2143
<2146=2147
<2147=2148
<2148=2153,2152,2149
<2149=2151,2150
<2154=2155
<2155=2161,2156
<2156=2159,2157
<2157=2158
<2159=2160
<2161=2162
<2163=2182,2164
<2164=2172,2165
<2165=2166
<2166=2170,2167
<2167=2168
<2168=2169
<2170=2171
<2172=2173
<2173=2181,2174
<2174=2180,2175
<2175=2177,2176
<2177=2179,2178
<2182=2183
<2183=2185,2184
<2186=2209,2187
<2187=2197,2190,2188
<2188=2189
<2190=2191
<2191=2193,2192
<2193=2194
<2194=2196,2195
<2197=2205,2198
<2198=2199
<2199=2200
<2200=2204,2201
<2201=2203,2202
<2205=2206
<2206=2208,2207
<2209=2210
<2210=2212,2211
<2213=2242,2239,2214
<2214=2228,2224,2215
<2215=2216
<2216=2220,2217
<2217=2218
<2218=2219
<2220=2221
<2221=2223,2222
<2224=2226,2225
<2226=2227
<2228=2229
<2229=2238,2230
<2230=2236,2231
<2231=2234,2232
<2232=2233
<2234=2235
<2236=2237
<2239=2241,2240
<2242=2243
<2243=2247,2244
<2244=2246,2245
<2248=2249
<2249=2254,2253,2250
<2250=2252,2251
<2255=2256
<2256=2261,2260,2257
<2257=2259,2258
<2262=2263
<2263=2265,2264
<2265=2266
<2266=2268,2267
<2269=2270
<2270=2272,2271
<2274=2288,2275
<2275=2278,2276
<2276=2277
<2278=2284,2279
<2279=2280
<2280=2281
<2281=2283,2282
<2284=2285
<2285=2287,2286
<2288=2289
<2289=2291,2290
<2292=2293
<2293=2305,2304,2294
<2294=2303,2295
<2295=2297,2296
<2297=2299,2298
<2299=2300
<2300=2302,2301
<2326=2332,2331,2327
<2327=2328
<2328=2330,2329
<2332=2825,2818,2764,2763,2759,2752,2725,2695,2647,2566,2555,2548,2452,2402,2398,2391,2378,2367,2358,2347,2335,2333
<2333=2334
<2335=2336
<2336=2345,2337
<2337=2338
<2338=2339
<2339=2341,2340
<2341=2342
<2342=2344,2343
<2345=2346
<2347=2348
<2348=2352,2349
<2349=2350
<2350=2351
<2352=2353
<2353=2355,2354
<2355=2357,2356
<2358=2359
<2359=2365,2360
<2360=2363,2361
<2361=2362
<2363=2364
<2365=2366
<2367=2368
<2368=2376,2369
<2369=2374,2372,2370
<2370=2371
<2372=2373
<2374=2375
<2376=2377
<2378=2379
<2379=2383,2380
<2380=2381
<2381=2382
<2383=2384
<2384=2386,2385
<2386=2388,2387
<2388=2390,2389
<2391=2392
<2392=2394,2393
<2394=2395
<2395=2397,2396
<2398=2399
<2399=2401,2400
<2402=2448,2403
<2403=2423,2408,2404
<2404=2405
<2405=2407,2406
<2408=2409
<2409=2415,2410
<2410=2413,2411
<2411=2412
<2413=2414
<2415=2416
<2416=2418,2417
<2418=2420,2419
<2420=2422,2421
<2423=2424
<2424=2447,2425
<2425=2446,2426
<2426=2445,2427
<2427=2444,2428
<2428=2443,2429
<2429=2442,2430
<2430=2432,2431
<2432=2441,2433
<2433=2439,2434
<2434=2437,2435
<2435=2436
<2437=2438
<2439=2440
<2448=2449
<2449=2451,2450
<2452=2540,2536,2533,2453
<2453=2454
<2454=2525,2514,2511,2455
<2455=2456
<2456=2498,2457
<2457=2476,2458
<2458=2472,2459
<2459=2468,2464,2460
<2460=2461
<2461=2463,2462
<2464=2465
<2465=2467,2466
<2468=2469
<2469=2471,2470
<2472=2473
<2473=2475,2474
<2476=2477
<2477=2497,2496,2478
<2478=2495,2479
<2479=2487,2480
<2480=2485,2483,2481
<2481=2482
<2483=2484
<2485=2486
<2487=2488
<2488=2490,2489
<2490=2492,2491
<2492=2494,2493
<2498=2499
<2499=2510,2500
<2500=2502,2501
<2502=2503
<2503=2505,2504
<2505=2507,2506
<2507=2509,2508
<2511=2513,2512
<2514=2515
<2515=2524,2516
<2516=2518,2517
<2518=2519
<2519=2521,2520
<2521=2523,2522
<2525=2526
<2526=2527
<2527=2532,2531,2528
<2528=2530,2529
<2533=2535,2534
<2536=2537
<2537=2539,2538
<2540=2541
<2541=2542
<2542=2547,2546,2543
<2543=2545,2544
<2548=2549
<2549=2554,2553,2550
<2550=2552,2551
<2555=2556
<2556=2565,2564,2557
<2557=2563,2558
<2558=2562,2559
<2559=2561,2560
<2566=2638,2567
<2567=2620,2582,2570,2568
<2568=2569
<2570=2571
<2571=2580,2572
<2572=2573
<2573=2574
<2574=2576,2575
<2576=2577
<2577=2579,2578
<2580=2581
<2582=2616,2583
<2583=2584
<2584=2585
<2585=2615,2586
<2586=2614,2587
<2587=2613,2588
<2588=2612,2589
<2589=2602,2590
<2590=2601,2591
<2591=2593,2592
<2593=2595,2594
<2595=2596
<2596=2598,2597
<2598=2600,2599
<2602=2611,2603
<2603=2609,2604
<2604=2607,2605
<2605=2606
<2607=2608
<2609=2610
<2616=2617
<2617=2619,2618
<2620=2621
<2621=2637,2622
<2622=2636,2623
<2623=2632,2624
<2624=2625
<2625=2626
<2626=2628,2627
<2628=2629
<2629=2631,2630
<2632=2633
<2633=2635,2634
<2638=2639
<2639=2641,2640
<2641=2643,2642
<2643=2644
<2644=2646,2645
<2647=2687,2683,2680,2648
<2648=2664,2649
<2649=2660,2650
<2650=2651
<2651=2652
<2652=2656,2653
<2653=2654
<2654=2655
<2656=2657
<2657=2659,2658
<2660=2661
<2661=2663,2662
<2664=2665
<2665=2679,2678,2666
<2666=2677,2667
<2667=2676,2668
<2668=2670,2669
<2670=2671
<2671=2673,2672
<2673=2675,2674
<2680=2682,2681
<2683=2684
<2684=2686,2685
<2687=2688
<2688=2689
<2689=2694,2693,2690
<2690=2692,2691
<2695=2721,2696
<2696=2710,2697
<2697=2698
<2698=2709,2699
<2699=2707,2700
<2700=2705,2701
<2701=2702
<2702=2704,2703
<2705=2706
<2707=2708
<2710=2711
<2711=2720,2712
<2712=2718,2713
<2713=2716,2714
<2714=2715
<2716=2717
<2718=2719
<2721=2722
<2722=2724,2723
<2725=2739,2726
<2726=2738,2737,2727
<2727=2736,2728
<2728=2734,2729
<2729=2732,2730
<2730=2731
<2732=2733
<2734=2735
<2739=2751,2750,2740
<2740=2749,2741
<2741=2747,2742
<2742=2745,2743
<2743=2744
<2745=2746
<2747=2748
<2752=2753
<2753=2755,2754
<2755=2756
<2756=2758,2757
<2759=2760
<2760=2762,2761
<2764=2814,2765
<2765=2787,2775,2766
<2766=2767
<2767=2773,2768
<2768=2771,2769
<2769=2770
<2771=2772
<2773=2774
<2775=2776
<2776=2785,2777
<2777=2778
<2778=2779
<2779=2781,2780
<2781=2782
<2782=2784,2783
<2785=2786
<2787=2810,2794,2788
<2788=2789
<2789=2790
<2790=2791
<2791=2793,2792
<2794=2795
<2795=2796
<2796=2809,2797
<2797=2799,2798
<2799=2805,2800
<2800=2801
<2801=2802
<2802=2804,2803
<2805=2806
<2806=2808,2807
<2810=2811
<2811=2813,2812
<2814=2815
<2815=2817,2816
<2818=2819
<2819=2824,2823,2820
<2820=2822,2821
<2825=2826
<2826=2835,2827
<2827=2828
<2828=2829
<2829=2831,2830
<2831=2832
<2832=2834,2833
<2835=2836
<2880=2889,2888,2881
<2881=2885,2882
<2882=2884,2883
<2885=2887,2886
<2889=3330,3323,3316,2921,2909,2890
<2890=2898,2895,2891
<2891=2892
<2892=2893
<2893=2894
<2895=2896
<2896=2897
<2898=2899
<2899=2908,2900
<2900=2902,2901
<2902=2904,2903
<2904=2905
<2905=2907,2906
<2909=2910
<2910=2919,2911
<2911=2912
<2912=2913
<2913=2915,2914
<2915=2916
<2916=2918,2917
<2919=2920
<2921=3308,3299,3296,2922
<2922=3285,3272,3234,3225,2923
<2923=3221,3200,2924
<2924=2925
<2925=3196,2926
<2926=3192,2927
<2927=3188,3173,3156,2928
<2928=3137,3043,2929
<2929=2930
<2930=3029,2994,2985,2961,2931
<2931=2959,2932
<2932=2947,2940,2933
<2933=2934
<2934=2936,2935
<2936=2937
<2937=2939,2938
<2940=2941
<2941=2945,2942
<2942=2943
<2943=2944
<2945=2946
<2947=2948
<2948=2958,2957,2949
<2949=2956,2950
<2950=2952,2951
<2952=2953
<2953=2955,2954
<2959=2960
<2961=2962
<2962=2984,2983,2963
<2963=2982,2964
<2964=2980,2965
<2965=2978,2972,2970,2968,2966
<2966=2967
<2968=2969
<2970=2971
<2972=2973
<2973=2977,2974
<2974=2976,2975
<2978=2979
<2980=2981
<2985=2986
<2986=2990,2987
<2987=2988
<2988=2989
<2990=2991
<2991=2993,2992
<2994=3025,2995
<2995=3021,2996
<2996=2997
<2997=3020,2998
<2998=3019,2999
<2999=3016,3000
<3000=3015,3001
<3001=3003,3002
<3003=3014,3004
<3004=3012,3005
<3005=3008,3006
<3006=3007
<3008=3009
<3009=3011,3010
<3012=3013
<3016=3018,3017
<3021=3022
<3022=3024,3023
<3025=3026
<3026=3028,3027
<3029=3030
<3030=3042,3041,3031
<3031=3040,3032
<3032=3038,3033
<3033=3034
<3034=3035
<3035=3037,3036
<3038=3039
<3043=3113,3104,3084,3074,3044
<3044=3072,3045
<3045=3060,3053,3046
<3046=3047
<3047=3049,3048
<3049=3050
<3050=3052,3051
<3053=3054
<3054=3058,3055
<3055=3056
<3056=3057
<3058=3059
<3060=3061
<3061=3071,3070,3062
<3062=3069,3063
<3063=3065,3064
<3065=3066
<3066=3068,3067
<3072=3073
<3074=3075
<3075=3077,3076
<3077=3079,3078
<3079=3081,3080
<3081=3083,3082
<3084=3085
<3085=3103,3102,3086
<3086=3101,3087
<3087=3099,3088
<3088=3097,3095,3093,3091,3089
<3089=3090
<3091=3092
<3093=3094
<3095=3096
<3097=3098
<3099=3100
<3104=3105
<3105=3109,3106
<3106=3107
<3107=3108
<3109=3110
<3110=3112,3111
<3113=3133,3114
<3114=3129,3115
<3115=3116
<3116=3128,3117
<3117=3127,3118
<3118=3124,3119
<3119=3123,3120
<3120=3122,3121
<3124=3126,3125
<3129=3130
<3130=3132,3131
<3133=3134
<3134=3136,3135
<3137=3138
<3138=3149,3139
<3139=3141,3140
<3141=3142
<3142=3144,3143
<3144=3146,3145
<3146=3148,3147
<3149=3155,3150
<3150=3154,3151
<3151=3153,3152
<3156=3165,3157
<3157=3164,3163,3158
<3158=3162,3159
<3159=3161,3160
<3165=3172,3171,3166
<3166=3170,3167
<3167=3169,3168
<3173=3174
<3174=3187,3175
<3175=3185,3176
<3176=3181,3179,3177
<3177=3178
<3179=3180
<3181=3182
<3182=3184,3183
<3185=3186
<3188=3189
<3189=3191,3190
<3192=3193
<3193=3195,3194
<3196=3197
<3197=3199,3198
<3200=3212,3201
<3201=3202
<3202=3208,3203
<3203=3204
<3204=3205
<3205=3207,3206
<3208=3209
<3209=3211,3210
<3212=3213
<3213=3219,3214
<3214=3215
<3215=3216
<3216=3218,3217
<3219=3220
<3221=3222
<3222=3224,3223
<3225=3226
<3226=3232,3227
<3227=3228
<3228=3229
<3229=3231,3230
<3232=3233
<3234=3264,3260,3257,3235
<3235=3236
<3236=3246,3237
<3237=3242,3238
<3238=3239
<3239=3241,3240
<3242=3243
<3243=3245,3244
<3246=3247
<3247=3253,3248
<3248=3249
<3249=3250
<3250=3252,3251
<3253=3254
<3254=3256,3255
<3257=3259,3258
<3260=3261
<3261=3263,3262
<3264=3265
<3265=3266
<3266=3271,3270,3267
<3267=3269,3268
<3272=3279,3273
<3273=3278,3277,3274
<3274=3276,3275
<3279=3284,3283,3280
<3280=3282,3281
<3285=3286
<3286=3295,3294,3287
<3287=3293,3288
<3288=3290,3289
<3290=3292,3291
<3296=3298,3297
<3299=3300
<3300=3307,3301
<3301=3303,3302
<3303=3304
<3304=3306,3305
<3308=3309
<3309=3310
<3310=3315,3314,3311
<3311=3313,3312
<3316=3317
<3317=3322,3321,3318
<3318=3320,3319
<3323=3324
<3324=3326,3325
<3326=3327
<3327=3329,3328
<3330=3331
<3331=3340,3332
<3332=3333
<3333=3334
<3334=3336,3335
<3336=3337
<3337=3339,3338
<3340=3341
<3389=3395,3394,3390
<3390=3391
<3391=3393,3392
<3395=3588,3581,3569,3557,3550,3408,3396
<3396=3397
<3397=3406,3398
<3398=3399
<3399=3400
<3400=3402,3401
<3402=3403
<3403=3405,3404
<3406=3407
<3408=3542,3538,3535,3409
<3409=3531,3518,3501,3410
<3410=3493,3411
<3411=3484,3412
<3412=3480,3413
<3413=3439,3424,3414
<3414=3415
<3415=3417,3416
<3417=3419,3418
<3419=3421,3420
<3421=3423,3422
<3424=3425
<3425=3437,3426
<3426=3435,3433,3431,3429,3427
<3427=3428
<3429=3430
<3431=3432
<3433=3434
<3435=3436
<3437=3438
<3439=3476,3440
<3440=3460,3445,3441
<3441=3442
<3442=3444,3443
<3445=3446
<3446=3452,3447
<3447=3450,3448
<3448=3449
<3450=3451
<3452=3453
<3453=3455,3454
<3455=3457,3456
<3457=3459,3458
<3460=3461
<3461=3475,3462
<3462=3474,3463
<3463=3473,3464
<3464=3472,3465
<3465=3471,3466
<3466=3470,3467
<3467=3469,3468
<3476=3477
<3477=3479,3478
<3480=3481
<3481=3483,3482
<3484=3485
<3485=3489,3486
<3486=3487
<3487=3488
<3489=3490
<3490=3492,3491
<3493=3494
<3494=3500,3495
<3495=3499,3496
<3496=3498,3497
<3501=3510,3502
<3502=3509,3508,3503
<3503=3507,3504
<3504=3506,3505
<3510=3517,3516,3511
<3511=3515,3512
<3512=3514,3513
<3518=3519
<3519=3530,3520
<3520=3528,3521
<3521=3526,3524,3522
<3522=3523
<3524=3525
<3526=3527
<3528=3529
<3531=3532
<3532=3534,3533
<3535=3537,3536
<3538=3539
<3539=3541,3540
<3542=3543
<3543=3544
<3544=3549,3548,3545
<3545=3547,3546
<3550=3551
<3551=3553,3552
<3553=3554
<3554=3556,3555
<3557=3558
<3558=3567,3559
<3559=3560
<3560=3561
<3561=3563,3562
<3563=3564
<3564=3566,3565
<3567=3568
<3569=3570
<3570=3579,3571
<3571=3572
<3572=3573
<3573=3575,3574
<3575=3576
<3576=3578,3577
<3579=3580
<3581=3582
<3582=3586,3583
<3583=3584
<3584=3585
<3586=3587
<3588=3589
<3589=3598,3590
<3590=3591
<3591=3592
<3592=3594,3593
<3594=3595
<3595=3597,3596
<3598=3599
<3633=3642,3641,3634
<3634=3638,3635
<3635=3637,3636
<3638=3640,3639
<3642=3987,3983,3934,3925,3915,3911,3883,3865,3650,3643
<3643=3644
<3644=3648,3645
<3645=3646
<3646=3647
<3648=3649
<3650=3851,3651
<3651=3810,3795,3782,3775,3768,3731,3667,3663,3659,3652
<3652=3653
<3653=3655,3654
<3655=3656
<3656=3658,3657
<3659=3660
<3660=3662,3661
<3663=3664
<3664=3666,3665
<3667=3725,3668
<3668=3718,3676,3669
<3669=3670
<3670=3672,3671
<3672=3673
<3673=3675,3674
<3676=3710,3701,3698,3677
<3677=3687,3678
<3678=3679
<3679=3683,3680
<3680=3681
<3681=3682
<3683=3684
<3684=3686,3685
<3687=3688
<3688=3697,3696,3689
<3689=3695,3690
<3690=3692,3691
<3692=3694,3693
<3698=3700,3699
<3701=3702
<3702=3709,3703
<3703=3705,3704
<3705=3706
<3706=3708,3707
<3710=3711
<3711=3712
<3712=3717,3716,3713
<3713=3715,3714
<3718=3719
<3719=3721,3720
<3721=3722
<3722=3724,3723
<3725=3726
<3726=3730,3727
<3727=3729,3728
<3731=3764,3732
<3732=3752,3745,3733
<3733=3734
<3734=3743,3735
<3735=3736
<3736=3737
<3737=3739,3738
<3739=3740
<3740=3742,3741
<3743=3744
<3745=3746
<3746=3751,3747
<3747=3749,3748
<3749=3750
<3752=3753
<3753=3762,3754
<3754=3755
<3755=3756
<3756=3758,3757
<3758=3759
<3759=3761,3760
<3762=3763
<3764=3765
<3765=3767,3766
<3768=3769
<3769=3774,3773,3770
<3770=3772,3771
<3775=3776
<3776=3780,3777
<3777=3778
<3778=3779
<3780=3781
<3782=3791,3783
<3783=3784
<3784=3790,3785
<3785=3789,3786
<3786=3788,3787
<3791=3792
<3792=3794,3793
<3795=3796
<3796=3809,3808,3797
<3797=3807,3798
<3798=3803,3800,3799
<3800=3802,3801
<3803=3804
<3804=3806,3805
<3810=3847,3811
<3811=3843,3834,3812
<3812=3832,3828,3813
<3813=3814
<3814=3824,3820,3815
<3815=3816
<3816=3817
<3817=3819,3818
<3820=3821
<3821=3823,3822
<3824=3825
<3825=3827,3826
<3828=3829
<3829=3831,3830
<3832=3833
<3834=3835
<3835=3841,3836
<3836=3839,3837
<3837=3838
<3839=3840
<3841=3842
<3843=3844
<3844=3846,3845
<3847=3848
<3848=3850,3849
<3851=3852
<3852=3864,3853
<3853=3861,3854
<3854=3858,3855
<3855=3857,3856
<3858=3860,3859
<3861=3863,3862
<3865=3879,3866
<3866=3867
<3867=3868
<3868=3878,3869
<3869=3877,3870
<3870=3876,3871
<3871=3875,3872
<3872=3874,3873
<3879=3880
<3880=3882,3881
<3883=3907,3884
<3884=3893,3885
<3885=3891,3886
<3886=3887
<3887=3888
<3888=3890,3889
<3891=3892
<3893=3894
<3894=3906,3905,3895
<3895=3904,3896
<3896=3902,3897
<3897=3900,3898
<3898=3899
<3900=3901
<3902=3903
<3907=3908
<3908=3910,3909
<3911=3912
<3912=3914,3913
<3915=3921,3916
<3916=3917
<3917=3918
<3918=3920,3919
<3921=3922
<3922=3924,3923
<3925=3926
<3926=3932,3927
<3927=3930,3928
<3928=3929
<3930=3931
<3932=3933
<3934=3979,3935
<3935=3962,3953,3936
<3936=3949,3937
<3937=3945,3938
<3938=3939
<3939=3943,3940
<3940=3941
<3941=3942
<3943=3944
<3945=3946
<3946=3948,3947
<3949=3950
<3950=3952,3951
<3953=3954
<3954=3958,3955
<3955=3956
<3956=3957
<3958=3959
<3959=3961,3960
<3962=3970,3963
<3963=3964
<3964=3966,3965
<3966=3967
<3967=3969,3968
<3970=3971
<3971=3973,3972
<3973=3975,3974
<3975=3976
<3976=3978,3977
<3979=3980
<3980=3982,3981
<3983=3984
<3984=3986,3985
<3987=3988
<3988=3990,3989
<4026=4032,4031,4027
<4027=4028
<4028=4030,4029
<4032=4200,4196,4179,4154,4105,4091,4065,4058,4033
<4033=4054,4034
<4034=4042,4035
<4035=4036
<4036=4040,4037
<4037=4038
<4038=4039
<4040=4041
<4042=4050,4043
<4043=4044
<4044=4045
<4045=4049,4046
<4046=4048,4047
<4050=4051
<4051=4053,4052
<4054=4055
<4055=4057,4056
<4058=4059
<4059=4064,4060
<4060=4062,4061
<4062=4063
<4065=4087,4066
<4066=4075,4068,4067
<4068=4069
<4069=4073,4070
<4070=4071
<4071=4072
<4073=4074
<4075=4083,4076
<4076=4077
<4077=4078
<4078=4082,4079
<4079=4081,4080
<4083=4084
<4084=4086,4085
<4087=4088
<4088=4090,4089
<4091=4092
<4092=4104,4103,4093
<4093=4102,4094
<4094=4100,4095
<4095=4098,4096
<4096=4097
<4098=4099
<4100=4101
<4105=4150,4106
<4106=4133,4124,4107
<4107=4120,4108
<4108=4116,4109
<4109=4110
<4110=4114,4111
<4111=4112
<4112=4113
<4114=4115
<4116=4117
<4117=4119,4118
<4120=4121
<4121=4123,4122
<4124=4125
<4125=4129,4126
<4126=4127
<4127=4128
<4129=4130
<4130=4132,4131
<4133=4141,4134
<4134=4135
<4135=4137,4136
<4137=4138
<4138=4140,4139
<4141=4142
<4142=4144,4143
<4144=4146,4145
<4146=4147
<4147=4149,4148
<4150=4151
<4151=4153,4152
<4154=4171,4167,4164,4155
<4155=4156
<4156=4157
<4157=4161,4158
<4158=4160,4159
<4161=4163,4162
<4164=4166,4165
<4167=4168
<4168=4170,4169
<4171=4172
<4172=4173
<4173=4178,4177,4174
<4174=4176,4175
<4179=4180
<4180=4194,4181
<4181=4192,4190,4182
<4182=4183
<4183=4189,4184
<4184=4188,4185
<4185=4187,4186
<4190=4191
<4192=4193
<4194=4195
<4196=4197
<4197=4199,4198
<4200=4201
<4201=4203,4202
<4231=4240,4239,4232
<4232=4236,4233
<4233=4235,4234
<4236=4238,4237
<4240=4457,4450,4443,4272,4260,4241
<4241=4247,4245,4242
<4242=4243
<4243=4244
<4245=4246
<4247=4248
<4248=4259,4249
<4249=4258,4250
<4250=4257,4251
<4251=4253,4252
<4253=4254
<4254=4256,4255
<4260=4261
<4261=4270,4262
<4262=4263
<4263=4264
<4264=4266,4265
<4266=4267
<4267=4269,4268
<4270=4271
<4272=4441,4398,4273
<4273=4274
<4274=4275
<4275=4390,4381,4378,4276
<4276=4367,4360,4317,4277
<4277=4313,4308,4278
<4278=4279
<4279=4280
<4280=4300,4294,4291,4281
<4281=4282
<4282=4283
<4283=4287,4284
<4284=4285
<4285=4286
<4287=4288
<4288=4290,4289
<4291=4293,4292
<4294=4295
<4295=4299,4296
<4296=4298,4297
<4300=4301
<4301=4302
<4302=4307,4306,4303
<4303=4305,4304
<4308=4309
<4309=4310
<4310=4312,4311
<4313=4314
<4314=4316,4315
<4317=4352,4346,4343,4318
<4318=4319
<4319=4334,4320
<4320=4330,4321
<4321=4322
<4322=4326,4323
<4323=4324
<4324=4325
<4326=4327
<4327=4329,4328
<4330=4331
<4331=4333,4332
<4334=4335
<4335=4339,4336
<4336=4337
<4337=4338
<4339=4340
<4340=4342,4341
<4343=4345,4344
<4346=4347
<4347=4351,4348
<4348=4350,4349
<4352=4353
<4353=4354
<4354=4359,4358,4355
<4355=4357,4356
<4360=4361
<4361=4366,4365,4362
<4362=4364,4363
<4367=4368
<4368=4377,4376,4369
<4369=4375,4370
<4370=4372,4371
<4372=4374,4373
<4378=4380,4379
<4381=4382
<4382=4389,4383
<4383=4385,4384
<4385=4386
<4386=4388,4387
<4390=4391
<4391=4392
<4392=4397,4396,4393
<4393=4395,4394
<4398=4399
<4399=4433,4424,4421,4400
<4400=4410,4401
<4401=4402
<4402=4406,4403
<4403=4404
<4404=4405
<4406=4407
<4407=4409,4408
<4410=4411
<4411=4420,4419,4412
<4412=4418,4413
<4413=4415,4414
<4415=4417,4416
<4421=4423,4422
<4424=4425
<4425=4432,4426
<4426=4428,4427
<4428=4429
<4429=4431,4430
<4433=4434
<4434=4435
<4435=4440,4439,4436
<4436=4438,4437
<4441=4442
<4443=4444
<4444=4449,4448,4445
<4445=4447,4446
<4450=4451
<4451=4453,4452
<4453=4454
<4454=4456,4455
<4457=4458
<4458=4467,4459
<4459=4460
<4460=4461
<4461=4463,4462
<4463=4464
<4464=4466,4465
<4467=4468
<4491=4494,4493,4492
<4494=4883,4876,4864,4852,4845,4828,4811,4798,4791,4569,4519,4507,4495
<4495=4501,4499,4496
<4496=4497
<4497=4498
<4499=4500
<4501=4502
<4502=4506,4503
<4503=4505,4504
<4507=4508
<4508=4517,4509
<4509=4510
<4510=4511
<4511=4513,4512
<4513=4514
<4514=4516,4515
<4517=4518
<4519=4565,4520
<4520=4543,4521
<4521=4535,4531,4528,4522
<4522=4523
<4523=4525,4524
<4525=4527,4526
<4528=4530,4529
<4531=4532
<4532=4534,4533
<4535=4536
<4536=4537
<4537=4542,4541,4538
<4538=4540,4539
<4543=4557,4553,4550,4544
<4544=4545
<4545=4547,4546
<4547=4549,4548
<4550=4552,4551
<4553=4554
<4554=4556,4555
<4557=4558
<4558=4559
<4559=4564,4563,4560
<4560=4562,4561
<4565=4566
<4566=4568,4567
<4569=4783,4779,4776,4570
<4570=4769,4585,4579,4571
<4571=4572
<4572=4578,4573
<4573=4576,4575,4574
<4576=4577
<4579=4580
<4580=4584,4581
<4581=4583,4582
<4585=4761,4757,4750,4586
<4586=4587
<4587=4739,4588
<4588=4589
<4589=4731,4720,4717,4590
<4590=4666,4591
<4591=4653,4592
<4592=4631,4625,4619,4593
<4593=4608,4594
<4594=4599,4595
<4595=4596
<4596=4598,4597
<4599=4600
<4600=4604,4601
<4601=4602
<4602=4603
<4604=4605
<4605=4607,4606
<4608=4609
<4609=4617,4610
<4610=4615,4613,4611
<4611=4612
<4613=4614
<4615=4616
<4617=4618
<4619=4620
<4620=4622,4621
<4622=4624,4623
<4625=4626
<4626=4628,4627
<4628=4630,4629
<4631=4632
<4632=4652,4651,4633
<4633=4650,4634
<4634=4642,4635
<4635=4640,4638,4636
<4636=4637
<4638=4639
<4640=4641
<4642=4643
<4643=4645,4644
<4645=4647,4646
<4647=4649,4648
<4653=4654
<4654=4656,4655
<4656=4662,4657
<4657=4660,4658
<4658=4659
<4660=4661
<4662=4663
<4663=4665,4664
<4666=4715,4667
<4667=4704,4686,4668
<4668=4669
<4669=4684,4670
<4670=4671
<4671=4672
<4672=4683,4673
<4673=4679,4674
<4674=4677,4675
<4675=4676
<4677=4678
<4679=4680
<4680=4682,4681
<4684=4685
<4686=4687
<4687=4703,4702,4688
<4688=4701,4689
<4689=4697,4690
<4690=4695,4693,4691
<4691=4692
<4693=4694
<4695=4696
<4697=4698
<4698=4700,4699
<4704=4705
<4705=4714,4713,4706
<4706=4712,4707
<4707=4709,4708
<4709=4711,4710
<4715=4716
<4717=4719,4718
<4720=4721
<4721=4730,4722
<4722=4724,4723
<4724=4725
<4725=4727,4726
<4727=4729,4728
<4731=4732
<4732=4733
<4733=4738,4737,4734
<4734=4736,4735
<4739=4740
<4740=4742,4741
<4742=4746,4743
<4743=4744
<4744=4745
<4746=4747
<4747=4749,4748
<4750=4754,4751
<4751=4753,4752
<4754=4756,4755
<4757=4758
<4758=4760,4759
<4761=4762
<4762=4763
<4763=4768,4767,4764
<4764=4766,4765
<4769=4770
<4770=4775,4774,4771
<4771=4773,4772
<4776=4778,4777
<4779=4780
<4780=4782,4781
<4783=4784
<4784=4785
<4785=4790,4789,4786
<4786=4788,4787
<4791=4792
<4792=4797,4796,4793
<4793=4795,4794
<4798=4805,4799
<4799=4804,4803,4800
<4800=4802,4801
<4805=4810,4809,4806
<4806=4808,4807
<4811=4812
<4812=4826,4813
<4813=4824,4822,4814
<4814=4815
<4815=4821,4816
<4816=4820,4817
<4817=4819,4818
<4822=4823
<4824=4825
<4826=4827
<4828=4829
<4829=4843,4830
<4830=4841,4839,4831
<4831=4832
<4832=4838,4833
<4833=4837,4834
<4834=4836,4835
<4839=4840
<4841=4842
<4843=4844
<4845=4846
<4846=4848,4847
<4848=4849
<4849=4851,4850
<4852=4853
<4853=4862,4854
<4854=4855
<4855=4856
<4856=4858,4857
<4858=4859
<4859=4861,4860
<4862=4863
<4864=4865
<4865=4874,4866
<4866=4867
<4867=4868
<4868=4870,4869
<4870=4871
<4871=4873,4872
<4874=4875
<4876=4877
<4877=4881,4878
<4878=4879
<4879=4880
<4881=4882
<4883=4884
<4884=4893,4885
<4885=4886
<4886=4887
<4887=4889,4888
<4889=4890
<4890=4892,4891
<4893=4894
<4944=4959,4958,4945
<4945=4955,4952,4949,4946
<4946=4948,4947
<4949=4951,4950
<4952=4954,4953
<4955=4957,4956
<4959=5530,5521,5514,5510,5484,5468,5467,5463,5456,5425,5402,5363,5327,5292,5250,5246,5229,5218,5214,5036,4988,4972,4960
<4960=4961
<4961=4970,4962
<4962=4963
<4963=4964
<4964=4966,4965
<4966=4967
<4967=4969,4968
<4970=4971
<4972=4986,4973
<4973=4974
<4974=4975
<4975=4984,4976
<4976=4977
<4977=4978
<4978=4982,4979
<4979=4980
<4980=4981
<4982=4983
<4984=4985
<4986=4987
<4988=5032,5028,5025,4989
<4989=4990
<4990=5016,5009,4991
<4991=4992
<4992=5000,4993
<4993=4994
<4994=4995
<4995=4997,4996
<4997=4999,4998
<5000=5001
<5001=5005,5002
<5002=5003
<5003=5004
<5005=5006
<5006=5008,5007
<5009=5010
<5010=5011
<5011=5013,5012
<5013=5015,5014
<5016=5017
<5017=5021,5018
<5018=5019
<5019=5020
<5021=5022
<5022=5024,5023
<5025=5027,5026
<5028=5029
<5029=5031,5030
<5032=5033
<5033=5035,5034
<5036=5210,5206,5203,5037
<5037=5185,5119,5104,5038
<5038=5100,5039
<5039=5085,5070,5055,5040
<5040=5049,5041
<5041=5042
<5042=5044,5043
<5044=5048,5045
<5045=5047,5046
<5049=5050
<5050=5052,5051
<5052=5054,5053
<5055=5064,5056
<5056=5057
<5057=5059,5058
<5059=5063,5060
<5060=5062,5061
<5064=5065
<5065=5067,5066
<5067=5069,5068
<5070=5079,5071
<5071=5072
<5072=5074,5073
<5074=5078,5075
<5075=5077,5076
<5079=5080
<5080=5082,5081
<5082=5084,5083
<5085=5094,5086
<5086=5087
<5087=5089,5088
<5089=5093,5090
<5090=5092,5091
<5094=5095
<5095=5097,5096
<5097=5099,5098
<5100=5101
<5101=5103,5102
<5104=5105
<5105=5118,5106
<5106=5117,5107
<5107=5116,5108
<5108=5110,5109
<5110=5112,5111
<5112=5113
<5113=5115,5114
<5119=5181,5120
<5120=5166,5151,5136,5121
<5121=5130,5122
<5122=5123
<5123=5125,5124
<5125=5129,5126
<5126=5128,5127
<5130=5131
<5131=5133,5132
<5133=5135,5134
<5136=5145,5137
<5137=5138
<5138=5140,5139
<5140=5144,5141
<5141=5143,5142
<5145=5146
<5146=5148,5147
<5148=5150,5149
<5151=5160,5152
<5152=5153
<5153=5155,5154
<5155=5159,5156
<5156=5158,5157
<5160=5161
<5161=5163,5162
<5163=5165,5164
<5166=5175,5167
<5167=5168
<5168=5170,5169
<5170=5174,5171
<5171=5173,5172
<5175=5176
<5176=5178,5177
<5178=5180,5179
<5181=5182
<5182=5184,5183
<5185=5186
<5186=5202,5201,5187
<5187=5200,5188
<5188=5199,5189
<5189=5198,5190
<5190=5192,5191
<5192=5194,5193
<5194=5195
<5195=5197,5196
<5203=5205,5204
<5206=5207
<5207=5209,5208
<5210=5211
<5211=5213,5212
<5214=5215
<5215=5217,5216
<5218=5219
<5219=5228,5227,5220
<5220=5226,5221
<5221=5225,5222
<5222=5224,5223
<5229=5230
<5230=5244,5231
<5231=5242,5240,5232
<5232=5233
<5233=5239,5234
<5234=5238,5235
<5235=5237,5236
<5240=5241
<5242=5243
<5244=5245
<5246=5247
<5247=5249,5248
<5250=5290,5251
<5251=5278,5269,5257,5252
<5252=5253
<5253=5255,5254
<5255=5256
<5257=5258
<5258=5267,5259
<5259=5260
<5260=5261
<5261=5263,5262
<5263=5264
<5264=5266,5265
<5267=5268
<5269=5270
<5270=5276,5271
<5271=5274,5272
<5272=5273
<5274=5275
<5276=5277
<5278=5279
<5279=5288,5280
<5280=5281
<5281=5282
<5282=5284,5283
<5284=5285
<5285=5287,5286
<5288=5289
<5290=5291
<5292=5325,5293
<5293=5313,5306,5294
<5294=5295
<5295=5304,5296
<5296=5297
<5297=5298
<5298=5300,5299
<5300=5301
<5301=5303,5302
<5304=5305
<5306=5307
<5307=5311,5308
<5308=5309
<5309=5310
<5311=5312
<5313=5314
<5314=5323,5315
<5315=5316
<5316=5317
<5317=5319,5318
<5319=5320
<5320=5322,5321
<5323=5324
<5325=5326
<5327=5359,5347,5328
<5328=5329
<5329=5330
<5330=5331
<5331=5346,5332
<5332=5343,5333
<5333=5342,5334
<5334=5341,5335
<5335=5337,5336
<5337=5338
<5338=5340,5339
<5343=5345,5344
<5347=5348
<5348=5349
<5349=5358,5350
<5350=5357,5351
<5351=5353,5352
<5353=5354
<5354=5356,5355
<5359=5360
<5360=5362,5361
<5363=5393,5364
<5364=5365
<5365=5385,5381,5378,5366
<5366=5367
<5367=5368
<5368=5372,5369
<5369=5370
<5370=5371
<5372=5373
<5373=5375,5374
<5375=5377,5376
<5378=5380,5379
<5381=5382
<5382=5384,5383
<5385=5386
<5386=5387
<5387=5392,5391,5388
<5388=5390,5389
<5393=5394
<5394=5401,5395
<5395=5399,5396
<5396=5397
<5397=5398
<5399=5400
<5402=5421,5403
<5403=5417,5408,5404
<5404=5405
<5405=5407,5406
<5408=5409
<5409=5415,5410
<5410=5413,5411
<5411=5412
<5413=5414
<5415=5416
<5417=5418
<5418=5420,5419
<5421=5422
<5422=5424,5423
<5425=5448,5444,5441,5426
<5426=5427
<5427=5437,5428
<5428=5429
<5429=5433,5430
<5430=5431
<5431=5432
<5433=5434
<5434=5436,5435
<5437=5438
<5438=5440,5439
<5441=5443,5442
<5444=5445
<5445=5447,5446
<5448=5449
<5449=5450
<5450=5455,5454,5451
<5451=5453,5452
<5456=5457
<5457=5459,5458
<5459=5460
<5460=5462,5461
<5463=5464
<5464=5466,5465
<5468=5480,5469
<5469=5470
<5470=5471
<5471=5479,5472
<5472=5478,5473
<5473=5477,5474
<5474=5476,5475
<5480=5481
<5481=5483,5482
<5484=5504,5485
<5485=5496,5491,5486
<5486=5487
<5487=5489,5488
<5489=5490
<5491=5492
<5492=5494,5493
<5494=5495
<5496=5497
<5497=5503,5498
<5498=5502,5499
<5499=5501,5500
<5504=5505
<5505=5507,5506
<5507=5509,5508
<5510=5511
<5511=5513,5512
<5514=5519,5515
<5515=5516
<5516=5518,5517
<5519=5520
<5521=5522
<5522=5528,5523
<5523=5524
<5524=5525
<5525=5527,5526
<5528=5529
<5530=5531
<5531=5540,5532
<5532=5533
<5533=5534
<5534=5536,5535
<5536=5537
<5537=5539,5538
<5540=5541
<5593=5599,5598,5594
<5594=5595
<5595=5597,5596
<5599=5655,5646,5628,5614,5600
<5600=5610,5601
<5601=5602
<5602=5603
<5603=5609,5604
<5604=5608,5605
<5605=5607,5606
<5610=5611
<5611=5613,5612
<5614=5615
<5615=5627,5616
<5616=5622,5617
<5617=5621,5618
<5618=5620,5619
<5622=5624,5623
<5624=5626,5625
<5628=5642,5629
<5629=5630
<5630=5631
<5631=5641,5632
<5632=5640,5633
<5633=5639,5634
<5634=5638,5635
<5635=5637,5636
<5642=5643
<5643=5645,5644
<5646=5651,5647
<5647=5648
<5648=5650,5649
<5651=5652
<5652=5654,5653
<5655=5656
<5656=5661,5660,5657
<5657=5659,5658
<5670=5679,5678,5671
<5671=5675,5672
<5672=5674,5673
<5675=5677,5676
<5679=5886,5882,5875,5689,5680
<5680=5681
<5681=5687,5682
<5682=5685,5683
<5683=5684
<5685=5686
<5687=5688
<5689=5867,5858,5855,5690
<5690=5846,5815,5691
<5691=5804,5785,5692
<5692=5693
<5693=5773,5762,5694
<5694=5756,5730,5695
<5695=5696
<5696=5697
<5697=5717,5698
<5698=5708,5699
<5699=5700
<5700=5704,5701
<5701=5702
<5702=5703
<5704=5705
<5705=5707,5706
<5708=5713,5709
<5709=5710
<5710=5712,5711
<5713=5714
<5714=5716,5715
<5717=5718
<5718=5729,5719
<5719=5728,5720
<5720=5724,5721
<5721=5722
<5722=5723
<5724=5725
<5725=5727,5726
<5730=5747,5740,5731
<5731=5732
<5732=5736,5733
<5733=5734
<5734=5735
<5736=5737
<5737=5739,5738
<5740=5741
<5741=5745,5742
<5742=5743
<5743=5744
<5745=5746
<5747=5752,5748
<5748=5749
<5749=5751,5750
<5752=5753
<5753=5755,5754
<5756=5757
<5757=5759,5758
<5759=5761,5760
<5762=5763
<5763=5772,5771,5764
<5764=5770,5765
<5765=5769,5766
<5766=5768,5767
<5773=5774
<5774=5784,5783,5775
<5775=5782,5776
<5776=5778,5777
<5778=5779
<5779=5781,5780
<5785=5795,5786
<5786=5787
<5787=5791,5788
<5788=5789
<5789=5790
<5791=5792
<5792=5794,5793
<5795=5800,5796
<5796=5797
<5797=5799,5798
<5800=5801
<5801=5803,5802
<5804=5805
<5805=5807,5806
<5807=5814,5808
<5808=5810,5809
<5810=5811
<5811=5813,5812
<5815=5842,5816
<5816=5834,5821,5817
<5817=5818
<5818=5820,5819
<5821=5822
<5822=5830,5823
<5823=5828,5826,5824
<5824=5825
<5826=5827
<5828=5829
<5830=5831
<5831=5833,5832
<5834=5835
<5835=5841,5836
<5836=5840,5837
<5837=5839,5838
<5842=5843
<5843=5845,5844
<5846=5847
<5847=5854,5853,5848
<5848=5852,5849
<5849=5851,5850
<5855=5857,5856
<5858=5859
<5859=5866,5860
<5860=5862,5861
<5862=5863
<5863=5865,5864
<5867=5868
<5868=5869
<5869=5874,5873,5870
<5870=5872,5871
<5875=5876
<5876=5878,5877
<5878=5879
<5879=5881,5880
<5882=5883
<5883=5885,5884
<5913=5922,5921,5914
<5914=5918,5915
<5915=5917,5916
<5918=5920,5919
<5922=6044,6040,6033,5932,5923
<5923=5924
<5924=5930,5925
<5925=5928,5926
<5926=5927
<5928=5929
<5930=5931
<5932=6025,6016,6013,5933
<5933=6004,5973,5934
<5934=5955,5935
<5935=5945,5936
<5936=5937
<5937=5941,5938
<5938=5939
<5939=5940
<5941=5942
<5942=5944,5943
<5945=5951,5946
<5946=5947
<5947=5948
<5948=5950,5949
<5951=5952
<5952=5954,5953
<5955=5956
<5956=5965,5957
<5957=5964,5958
<5958=5960,5959
<5960=5961
<5961=5963,5962
<5965=5967,5966
<5967=5969,5968
<5969=5970
<5970=5972,5971
<5973=6000,5974
<5974=5992,5979,5975
<5975=5976
<5976=5978,5977
<5979=5980
<5980=5988,5981
<5981=5986,5984,5982
<5982=5983
<5984=5985
<5986=5987
<5988=5989
<5989=5991,5990
<5992=5993
<5993=5999,5994
<5994=5998,5995
<5995=5997,5996
<6000=6001
<6001=6003,6002
<6004=6005
<6005=6012,6011,6006
<6006=6010,6007
<6007=6009,6008
<6013=6015,6014
<6016=6017
<6017=6024,6018
<6018=6020,6019
<6020=6021
<6021=6023,6022
<6025=6026
<6026=6027
<6027=6032,6031,6028
<6028=6030,6029
<6033=6034
<6034=6036,6035
<6036=6037
<6037=6039,6038
<6040=6041
<6041=6043,6042
<6063=6066,6065,6064
<6066=6269,6067
<6067=6255,6068
<6068=6103,6069
<6069=6099,6070
<6070=6087,6071
<6071=6072
<6072=6086,6073
<6073=6085,6074
<6074=6084,6075
<6075=6083,6076
<6076=6082,6077
<6077=6081,6078
<6078=6080,6079
<6087=6088
<6088=6098,6089
<6089=6097,6090
<6090=6096,6091
<6091=6095,6092
<6092=6094,6093
<6099=6100
<6100=6102,6101
<6103=6247,6243,6240,6104
<6104=6105
<6105=6232,6221,6218,6106
<6106=6204,6193,6107
<6107=6189,6108
<6108=6188,6184,6177,6173,6160,6151,6129,6109
<6109=6122,6110
<6110=6111
<6111=6112
<6112=6116,6113
<6113=6114
<6114=6115
<6116=6117
<6117=6119,6118
<6119=6121,6120
<6122=6123
<6123=6125,6124
<6125=6126
<6126=6128,6127
<6129=6142,6130
<6130=6131
<6131=6132
<6132=6140,6133
<6133=6138,6136,6134
<6134=6135
<6136=6137
<6138=6139
<6140=6141
<6142=6143
<6143=6150,6144
<6144=6146,6145
<6146=6147
<6147=6149,6148
<6151=6152
<6152=6159,6153
<6153=6155,6154
<6155=6156
<6156=6158,6157
<6160=6161
<6161=6169,6162
<6162=6167,6165,6163
<6163=6164
<6165=6166
<6167=6168
<6169=6170
<6170=6172,6171
<6173=6174
<6174=6176,6175
<6177=6178
<6178=6180,6179
<6180=6181
<6181=6183,6182
<6184=6185
<6185=6187,6186
<6189=6190
<6190=6192,6191
<6193=6194
<6194=6203,6202,6195
<6195=6201,6196
<6196=6200,6197
<6197=6199,6198
<6204=6205
<6205=6217,6216,6206
<6206=6215,6207
<6207=6213,6208
<6208=6211,6209
<6209=6210
<6211=6212
<6213=6214
<6218=6220,6219
<6221=6222
<6222=6231,6223
<6223=6225,6224
<6225=6226
<6226=6228,6227
<6228=6230,6229
<6232=6233
<6233=6234
<6234=6239,6238,6235
<6235=6237,6236
<6240=6242,6241
<6243=6244
<6244=6246,6245
<6247=6248
<6248=6249
<6249=6254,6253,6250
<6250=6252,6251
<6255=6256
<6256=6266,6257
<6257=6263,6258
<6258=6260,6259
<6260=6262,6261
<6263=6265,6264
<6266=6268,6267
<6269=6276,6270
<6270=6275,6274,6271
<6271=6273,6272
<6276=6281,6280,6277
<6277=6279,6278
<6307=6313,6312,6308
<6308=6309
<6309=6311,6310
<6313=7074,7073,7061,7049,6340,6326,6314
<6314=6315
<6315=6324,6316
<6316=6317
<6317=6318
<6318=6320,6319
<6320=6321
<6321=6323,6322
<6324=6325
<6326=6338,6327
<6327=6328
<6328=6329
<6329=6336,6330
<6330=6331
<6331=6332
<6332=6334,6333
<6334=6335
<6336=6337
<6338=6339
<6340=7040,6531,6341
<6341=6342
<6342=6527,6487,6458,6448,6438,6428,6382,6366,6343
<6343=6344
<6344=6364,6345
<6345=6362,6360,6353,6346
<6346=6347
<6347=6349,6348
<6349=6350
<6350=6352,6351
<6353=6354
<6354=6356,6355
<6356=6357
<6357=6359,6358
<6360=6361
<6362=6363
<6364=6365
<6366=6367
<6367=6378,6368
<6368=6376,6369
<6369=6370
<6370=6372,6371
<6372=6373
<6373=6375,6374
<6376=6377
<6378=6379
<6379=6381,6380
<6382=6424,6383
<6383=6420,6411,6403,6388,6384
<6384=6385
<6385=6387,6386
<6388=6389
<6389=6395,6390
<6390=6393,6391
<6391=6392
<6393=6394
<6395=6396
<6396=6398,6397
<6398=6400,6399
<6400=6402,6401
<6403=6404
<6404=6410,6405
<6405=6409,6406
<6406=6408,6407
<6411=6412
<6412=6418,6413
<6413=6416,6414
<6414=6415
<6416=6417
<6418=6419
<6420=6421
<6421=6423,6422
<6424=6425
<6425=6427,6426
<6428=6429
<6429=6431,6430
<6431=6433,6432
<6433=6435,6434
<6435=6437,6436
<6438=6439
<6439=6441,6440
<6441=6443,6442
<6443=6445,6444
<6445=6447,6446
<6448=6449
<6449=6451,6450
<6451=6453,6452
<6453=6455,6454
<6455=6457,6456
<6458=6459
<6459=6486,6485,6460
<6460=6484,6461
<6461=6478,6462
<6462=6476,6474,6467,6465,6463
<6463=6464
<6465=6466
<6467=6468
<6468=6470,6469
<6470=6471
<6471=6473,6472
<6474=6475
<6476=6477
<6478=6479
<6479=6481,6480
<6481=6483,6482
<6487=6519,6510,6507,6488
<6488=6489
<6489=6490
<6490=6503,6491
<6491=6492
<6492=6493
<6493=6501,6494
<6494=6497,6495
<6495=6496
<6497=6498
<6498=6500,6499
<6501=6502
<6503=6504
<6504=6506,6505
<6507=6509,6508
<6510=6511
<6511=6518,6512
<6512=6514,6513
<6514=6515
<6515=6517,6516
<6519=6520
<6520=6521
<6521=6526,6525,6522
<6522=6524,6523
<6527=6528
<6528=6530,6529
<6531=7014,7003,6944,6938,6932,6919,6902,6901,6897,6896,6883,6876,6869,6862,6855,6848,6754,6735,6718,6648,6635,6612,6587,6552,6532
<6532=6545,6533
<6533=6534
<6534=6535
<6535=6539,6536
<6536=6537
<6537=6538
<6539=6540
<6540=6542,6541
<6542=6544,6543
<6545=6546
<6546=6548,6547
<6548=6549
<6549=6551,6550
<6552=6578,6553
<6553=6567,6554
<6554=6555
<6555=6559,6556
<6556=6557
<6557=6558
<6559=6560
<6560=6562,6561
<6562=6564,6563
<6564=6566,6565
<6567=6568
<6568=6576,6569
<6569=6574,6572,6570
<6570=6571
<6572=6573
<6574=6575
<6576=6577
<6578=6579
<6579=6586,6580
<6580=6582,6581
<6582=6583
<6583=6585,6584
<6587=6608,6588
<6588=6604,6593,6589
<6589=6590
<6590=6592,6591
<6593=6594
<6594=6600,6595
<6595=6598,6596
<6596=6597
<6598=6599
<6600=6601
<6601=6603,6602
<6604=6605
<6605=6607,6606
<6608=6609
<6609=6611,6610
<6612=6613
<6613=6633,6614
<6614=6631,6629,6622,6615
<6615=6616
<6616=6618,6617
<6618=6619
<6619=6621,6620
<6622=6623
<6623=6625,6624
<6625=6626
<6626=6628,6627
<6629=6630
<6631=6632
<6633=6634
<6635=6636
<6636=6644,6637
<6637=6642,6640,6638
<6638=6639
<6640=6641
<6642=6643
<6644=6645
<6645=6647,6646
<6648=6696,6649
<6649=6675,6650
<6650=6651
<6651=6671,6652
<6652=6669,6667,6665,6663,6661,6659,6657,6655,6653
<6653=6654
<6655=6656
<6657=6658
<6659=6660
<6661=6662
<6663=6664
<6665=6666
<6667=6668
<6669=6670
<6671=6672
<6672=6674,6673
<6675=6676
<6676=6695,6694,6677
<6677=6693,6678
<6678=6687,6679
<6679=6681,6680
<6681=6683,6682
<6683=6684
<6684=6686,6685
<6687=6689,6688
<6689=6690
<6690=6692,6691
<6696=6697
<6697=6715,6698
<6698=6702,6699
<6699=6701,6700
<6702=6709,6703
<6703=6705,6704
<6705=6706
<6706=6708,6707
<6709=6711,6710
<6711=6712
<6712=6714,6713
<6715=6717,6716
<6718=6719
<6719=6731,6720
<6720=6729,6727,6725,6723,6721
<6721=6722
<6723=6724
<6725=6726
<6727=6728
<6729=6730
<6731=6732
<6732=6734,6733
<6735=6736
<6736=6750,6737
<6737=6748,6744,6742,6740,6738
<6738=6739
<6740=6741
<6742=6743
<6744=6745
<6745=6747,6746
<6748=6749
<6750=6751
<6751=6753,6752
<6754=6840,6831,6828,6755
<6755=6814,6756
<6756=6805,6786,6757
<6757=6758
<6758=6777,6768,6759
<6759=6760
<6760=6764,6761
<6761=6762
<6762=6763
<6764=6765
<6765=6767,6766
<6768=6769
<6769=6773,6770
<6770=6771
<6771=6772
<6773=6774
<6774=6776,6775
<6777=6778
<6778=6782,6779
<6779=6780
<6780=6781
<6782=6783
<6783=6785,6784
<6786=6796,6787
<6787=6788
<6788=6792,6789
<6789=6790
<6790=6791
<6792=6793
<6793=6795,6794
<6796=6797
<6797=6801,6798
<6798=6799
<6799=6800
<6801=6802
<6802=6804,6803
<6805=6806
<6806=6812,6807
<6807=6810,6808
<6808=6809
<6810=6811
<6812=6813
<6814=6815
<6815=6827,6826,6816
<6816=6825,6817
<6817=6819,6818
<6819=6820
<6820=6822,6821
<6822=6824,6823
<6828=6830,6829
<6831=6832
<6832=6839,6833
<6833=6835,6834
<6835=6836
<6836=6838,6837
<6840=6841
<6841=6842
<6842=6847,6846,6843
<6843=6845,6844
<6848=6849
<6849=6851,6850
<6851=6852
<6852=6854,6853
<6855=6856
<6856=6858,6857
<6858=6859
<6859=6861,6860
<6862=6863
<6863=6865,6864
<6865=6866
<6866=6868,6867
<6869=6870
<6870=6872,6871
<6872=6873
<6873=6875,6874
<6876=6877
<6877=6879,6878
<6879=6880
<6880=6882,6881
<6883=6893,6890,6887,6884
<6884=6886,6885
<6887=6889,6888
<6890=6892,6891
<6893=6895,6894
<6897=6898
<6898=6900,6899
<6902=6903
<6903=6918,6917,6904
<6904=6911,6905
<6905=6907,6906
<6907=6908
<6908=6910,6909
<6911=6913,6912
<6913=6914
<6914=6916,6915
<6919=6920
<6920=6928,6921
<6921=6926,6924,6922
<6922=6923
<6924=6925
<6926=6927
<6928=6929
<6929=6931,6930
<6932=6933
<6933=6935,6934
<6935=6937,6936
<6938=6939
<6939=6941,6940
<6941=6943,6942
<6944=6999,6945
<6945=6988,6977,6961,6950,6946
<6946=6947
<6947=6949,6948
<6950=6951
<6951=6957,6952
<6952=6955,6953
<6953=6954
<6955=6956
<6957=6958
<6958=6960,6959
<6961=6962
<6962=6976,6963
<6963=6975,6964
<6964=6974,6965
<6965=6973,6966
<6966=6972,6967
<6967=6971,6968
<6968=6970,6969
<6977=6978
<6978=6987,6986,6979
<6979=6985,6980
<6980=6984,6981
<6981=6983,6982
<6988=6989
<6989=6998,6997,6990
<6990=6996,6991
<6991=6995,6992
<6992=6994,6993
<6999=7000
<7000=7002,7001
<7003=7004
<7004=7013,7012,7005
<7005=7011,7006
<7006=7008,7007
<7008=7010,7009
<7014=7029,7015
<7015=7017,7016
<7017=7018
<7018=7027,7019
<7019=7020
<7020=7021
<7021=7023,7022
<7023=7024
<7024=7026,7025
<7027=7028
<7029=7030
<7030=7032,7031
<7032=7033
<7033=7035,7034
<7035=7037,7036
<7037=7039,7038
<7040=7041
<7041=7048,7042
<7042=7044,7043
<7044=7045
<7045=7047,7046
<7049=7050
<7050=7060,7059,7051
<7051=7058,7052
<7052=7054,7053
<7054=7055
<7055=7057,7056
<7061=7062
<7062=7072,7071,7063
<7063=7070,7064
<7064=7066,7065
<7066=7067
<7067=7069,7068
<7074=7075
<7075=7084,7076
<7076=7077
<7077=7078
<7078=7080,7079
<7080=7081
<7081=7083,7082
<7084=7085
<7157=7160,7159,7158
<7160=7209,7205,7166,7161
<7161=7162
<7162=7164,7163
<7164=7165
<7166=7197,7193,7190,7167
<7167=7168
<7168=7179,7169
<7169=7170
<7170=7171
<7171=7173,7172
<7173=7174
<7174=7176,7175
<7176=7178,7177
<7179=7180
<7180=7182,7181
<7182=7184,7183
<7184=7185
<7185=7187,7186
<7187=7189,7188
<7190=7192,7191
<7193=7194
<7194=7196,7195
<7197=7198
<7198=7199
<7199=7204,7203,7200
<7200=7202,7201
<7205=7206
<7206=7208,7207
<7209=7210
<7210=7212,7211
<7224=7230,7229,7225
<7225=7226
<7226=7228,7227
<7230=7405,7249,7241,7231
<7231=7232
<7232=7239,7233
<7233=7234
<7234=7235
<7235=7237,7236
<7237=7238
<7239=7240
<7241=7242
<7242=7248,7243
<7243=7247,7244
<7244=7246,7245
<7249=7397,7393,7390,7250
<7250=7251
<7251=7382,7371,7368,7252
<7252=7354,7343,7253
<7253=7330,7254
<7254=7329,7325,7318,7281,7270,7259,7255
<7255=7256
<7256=7258,7257
<7259=7260
<7260=7264,7261
<7261=7262
<7262=7263
<7264=7265
<7265=7267,7266
<7267=7269,7268
<7270=7271
<7271=7279,7272
<7272=7277,7275,7273
<7273=7274
<7275=7276
<7277=7278
<7279=7280
<7281=7310,7301,7298,7282
<7282=7283
<7283=7294,7284
<7284=7285
<7285=7286
<7286=7288,7287
<7288=7289
<7289=7291,7290
<7291=7293,7292
<7294=7295
<7295=7297,7296
<7298=7300,7299
<7301=7302
<7302=7309,7303
<7303=7305,7304
<7305=7306
<7306=7308,7307
<7310=7311
<7311=7312
<7312=7317,7316,7313
<7313=7315,7314
<7318=7319
<7319=7321,7320
<7321=7322
<7322=7324,7323
<7325=7326
<7326=7328,7327
<7330=7331
<7331=7340,7332
<7332=7334,7333
<7334=7336,7335
<7336=7337
<7337=7339,7338
<7340=7342,7341
<7343=7344
<7344=7353,7352,7345
<7345=7351,7346
<7346=7350,7347
<7347=7349,7348
<7354=7355
<7355=7367,7366,7356
<7356=7365,7357
<7357=7363,7358
<7358=7361,7359
<7359=7360
<7361=7362
<7363=7364
<7368=7370,7369
<7371=7372
<7372=7381,7373
<7373=7375,7374
<7375=7376
<7376=7378,7377
<7378=7380,7379
<7382=7383
<7383=7384
<7384=7389,7388,7385
<7385=7387,7386
<7390=7392,7391
<7393=7394
<7394=7396,7395
<7397=7398
<7398=7399
<7399=7404,7403,7400
<7400=7402,7401
<7405=7406
<7406=7411,7410,7407
<7407=7409,7408
<7438=7441,7440,7439
<7441=7574,7548,7442
<7442=7540,7536,7533,7443
<7443=7444
<7444=7525,7514,7511,7445
<7445=7500,7446
<7446=7492,7483,7480,7447
<7447=7466,7459,7448
<7448=7449
<7449=7453,7450
<7450=7451
<7451=7452
<7453=7454
<7454=7456,7455
<7456=7458,7457
<7459=7460
<7460=7465,7464,7461
<7461=7463,7462
<7466=7467
<7467=7479,7478,7468
<7468=7477,7469
<7469=7473,7470
<7470=7471
<7471=7472
<7473=7474
<7474=7476,7475
<7480=7482,7481
<7483=7484
<7484=7491,7485
<7485=7487,7486
<7487=7488
<7488=7490,7489
<7492=7493
<7493=7494
<7494=7499,7498,7495
<7495=7497,7496
<7500=7501
<7501=7510,7509,7502
<7502=7508,7503
<7503=7505,7504
<7505=7507,7506
<7511=7513,7512
<7514=7515
<7515=7524,7516
<7516=7518,7517
<7518=7519
<7519=7521,7520
<7521=7523,7522
<7525=7526
<7526=7527
<7527=7532,7531,7528
<7528=7530,7529
<7533=7535,7534
<7536=7537
<7537=7539,7538
<7540=7541
<7541=7542
<7542=7547,7546,7543
<7543=7545,7544
<7548=7566,7562,7559,7549
<7549=7550
<7550=7551
<7551=7553,7552
<7553=7554
<7554=7556,7555
<7556=7558,7557
<7559=7561,7560
<7562=7563
<7563=7565,7564
<7566=7567
<7567=7568
<7568=7573,7572,7569
<7569=7571,7570
<7574=7575
<7575=7579,7576
<7576=7577
<7577=7578
<7579=7580
<7580=7582,7581
<7605=7608,7607,7606
<7608=7758,7751,7744,7737,7730,7723,7716,7709,7702,7685,7668,7651,7634,7627,7623,7616,7609
<7609=7610
<7610=7612,7611
<7612=7613
<7613=7615,7614
<7616=7617
<7617=7619,7618
<7619=7620
<7620=7622,7621
<7623=7624
<7624=7626,7625
<7627=7628
<7628=7630,7629
<7630=7631
<7631=7633,7632
<7634=7635
<7635=7649,7636
<7636=7647,7645,7637
<7637=7638
<7638=7644,7639
<7639=7643,7640
<7640=7642,7641
<7645=7646
<7647=7648
<7649=7650
<7651=7652
<7652=7666,7653
<7653=7664,7662,7654
<7654=7655
<7655=7661,7656
<7656=7660,7657
<7657=7659,7658
<7662=7663
<7664=7665
<7666=7667
<7668=7669
<7669=7683,7670
<7670=7681,7679,7671
<7671=7672
<7672=7678,7673
<7673=7677,7674
<7674=7676,7675
<7679=7680
<7681=7682
<7683=7684
<7685=7686
<7686=7700,7687
<7687=7698,7696,7688
<7688=7689
<7689=7695,7690
<7690=7694,7691
<7691=7693,7692
<7696=7697
<7698=7699
<7700=7701
<7702=7703
<7703=7705,7704
<7705=7706
<7706=7708,7707
<7709=7710
<7710=7712,7711
<7712=7713
<7713=7715,7714
<7716=7717
<7717=7719,7718
<7719=7720
<7720=7722,7721
<7723=7724
<7724=7726,7725
<7726=7727
<7727=7729,7728
<7730=7731
<7731=7733,7732
<7733=7734
<7734=7736,7735
<7737=7738
<7738=7740,7739
<7740=7741
<7741=7743,7742
<7744=7745
<7745=7747,7746
<7747=7748
<7748=7750,7749
<7751=7752
<7752=7754,7753
<7754=7755
<7755=7757,7756
<7758=7764,7759
<7759=7760
<7760=7761
<7761=7763,7762
<7764=7765
<7765=7767,7766
<7795=7801,7800,7796
<7796=7797
<7797=7799,7798
<7801=8055,7932,7914,7896,7885,7852,7838,7806,7802
<7802=7803
<7803=7805,7804
<7806=7830,7826,7823,7807
<7807=7812,7808
<7808=7809
<7809=7811,7810
<7812=7813
<7813=7817,7814
<7814=7815
<7815=7816
<7817=7818
<7818=7820,7819
<7820=7822,7821
<7823=7825,7824
<7826=7827
<7827=7829,7828
<7830=7831
<7831=7832
<7832=7837,7836,7833
<7833=7835,7834
<7838=7839
<7839=7850,7840
<7840=7841
<7841=7842
<7842=7849,7843
<7843=7845,7844
<7845=7846
<7846=7848,7847
<7850=7851
<7852=7877,7868,7865,7853
<7853=7854
<7854=7855
<7855=7859,7856
<7856=7857
<7857=7858
<7859=7860
<7860=7862,7861
<7862=7864,7863
<7865=7867,7866
<7868=7869
<7869=7876,7870
<7870=7872,7871
<7872=7873
<7873=7875,7874
<7877=7878
<7878=7879
<7879=7884,7883,7880
<7880=7882,7881
<7885=7886
<7886=7895,7887
<7887=7889,7888
<7889=7891,7890
<7891=7892
<7892=7894,7893
<7896=7897
<7897=7913,7898
<7898=7912,7899
<7899=7911,7900
<7900=7910,7901
<7901=7909,7902
<7902=7908,7903
<7903=7907,7904
<7904=7906,7905
<7914=7915
<7915=7931,7916
<7916=7930,7917
<7917=7929,7918
<7918=7928,7919
<7919=7927,7920
<7920=7926,7921
<7921=7925,7922
<7922=7924,7923
<7932=7933
<7933=8054,7934
<7934=8050,7935
<7935=8049,7936
<7936=8048,7937
<7937=8047,7938
<7938=8046,7939
<7939=8045,7940
<7940=8044,7941
<7941=8043,7942
<7942=8042,7943
<7943=8041,7944
<7944=8040,7945
<7945=8039,7946
<7946=8038,7947
<7947=8037,7948
<7948=8036,7949
<7949=8035,7950
<7950=8034,7951
<7951=8033,7952
<7952=8032,7953
<7953=8031,7954
<7954=8030,7955
<7955=8029,7956
<7956=8028,7957
<7957=8027,7958
<7958=8026,7959
<7959=8025,7960
<7960=8024,7961
<7961=8023,7962
<7962=8022,7963
<7963=8021,7964
<7964=8020,7965
<7965=8019,7966
<7966=8018,7967
<7967=8017,7968
<7968=8016,7969
<7969=8015,7970
<7970=8014,7971
<7971=8013,7972
<7972=8012,7973
<7973=8011,7974
<7974=8010,7975
<7975=8009,7976
<7976=8008,7977
<7977=8007,7978
<7978=8006,7979
<7979=8005,7980
<7980=8004,7981
<7981=8003,7982
<7982=8002,7983
<7983=8001,7984
<7984=8000,7985
<7985=7999,7986
<7986=7998,7987
<7987=7997,7988
<7988=7996,7989
<7989=7995,7990
<7990=7994,7991
<7991=7993,7992
<8050=8052,8051
<8052=8053
<8055=8069,8056
<8056=8057
<8057=8058
<8058=8067,8059
<8059=8060
<8060=8061
<8061=8065,8062
<8062=8063
<8063=8064
<8065=8066
<8067=8068
<8069=8070
<8070=8076,8071
<8071=8073,8072
<8073=8075,8074
<8094=8100,8099,8095
<8095=8096
<8096=8098,8097
<8100=8108,8101
<8101=8102
<8102=8106,8103
<8103=8104
<8104=8105
<8106=8107
<8108=8109
<8109=8121,8120,8110
<8110=8114,8111
<8111=8113,8112
<8114=8116,8115
<8116=8117
<8117=8119,8118
<8127=8133,8132,8128
<8128=8129
<8129=8131,8130
<8133=8141,8134
<8134=8135
<8135=8139,8136
<8136=8137
<8137=8138
<8139=8140
<8141=8142
<8142=8154,8153,8143
<8143=8147,8144
<8144=8146,8145
<8147=8149,8148
<8149=8150
<8150=8152,8151
<8160=8166,8165,8161
<8161=8162
<8162=8164,8163
<8166=8508,8504,8497,8493,8479,8475,8471,8458,8451,8445,8417,8384,8380,8356,8304,8243,8215,8211,8207,8198,8193,8171,8167
<8167=8168
<8168=8170,8169
<8171=8185,8172
<8172=8173
<8173=8174
<8174=8183,8175
<8175=8176
<8176=8177
<8177=8181,8178
<8178=8179
<8179=8180
<8181=8182
<8183=8184
<8185=8186
<8186=8192,8187
<8187=8189,8188
<8189=8191,8190
<8193=8194
<8194=8196,8195
<8196=8197
<8198=8199
<8199=8205,8200
<8200=8201
<8201=8202
<8202=8204,8203
<8205=8206
<8207=8208
<8208=8210,8209
<8211=8212
<8212=8214,8213
<8215=8235,8231,8228,8216
<8216=8217
<8217=8218
<8218=8222,8219
<8219=8220
<8220=8221
<8222=8223
<8223=8225,8224
<8225=8227,8226
<8228=8230,8229
<8231=8232
<8232=8234,8233
<8235=8236
<8236=8237
<8237=8242,8241,8238
<8238=8240,8239
<8243=8300,8244
<8244=8296,8289,8285,8245
<8245=8277,8273,8270,8246
<8246=8258,8247
<8247=8248
<8248=8252,8249
<8249=8250
<8250=8251
<8252=8253
<8253=8255,8254
<8255=8257,8256
<8258=8259
<8259=8266,8260
<8260=8261
<8261=8262
<8262=8264,8263
<8264=8265
<8266=8267
<8267=8269,8268
<8270=8272,8271
<8273=8274
<8274=8276,8275
<8277=8278
<8278=8279
<8279=8284,8283,8280
<8280=8282,8281
<8285=8286
<8286=8288,8287
<8289=8290
<8290=8292,8291
<8292=8293
<8293=8295,8294
<8296=8297
<8297=8299,8298
<8300=8301
<8301=8303,8302
<8304=8352,8305
<8305=8342,8333,8324,8315,8306
<8306=8307
<8307=8311,8308
<8308=8309
<8309=8310
<8311=8312
<8312=8314,8313
<8315=8316
<8316=8320,8317
<8317=8318
<8318=8319
<8320=8321
<8321=8323,8322
<8324=8325
<8325=8329,8326
<8326=8327
<8327=8328
<8329=8330
<8330=8332,8331
<8333=8334
<8334=8338,8335
<8335=8336
<8336=8337
<8338=8339
<8339=8341,8340
<8342=8343
<8343=8351,8344
<8344=8350,8345
<8345=8349,8346
<8346=8348,8347
<8352=8353
<8353=8355,8354
<8356=8357
<8357=8379,8358
<8358=8378,8359
<8359=8377,8360
<8360=8376,8361
<8361=8375,8362
<8362=8374,8363
<8363=8373,8364
<8364=8372,8365
<8365=8371,8366
<8366=8370,8367
<8367=8369,8368
<8380=8381
<8381=8383,8382
<8384=8385
<8385=8415,8386
<8386=8413,8411,8409,8407,8405,8403,8401,8399,8397,8395,8393,8391,8389,8387
<8387=8388
<8389=8390
<8391=8392
<8393=8394
<8395=8396
<8397=8398
<8399=8400
<8401=8402
<8403=8404
<8405=8406
<8407=8408
<8409=8410
<8411=8412
<8413=8414
<8415=8416
<8417=8418
<8418=8444,8419
<8419=8443,8420
<8420=8442,8421
<8421=8441,8422
<8422=8440,8423
<8423=8439,8424
<8424=8438,8425
<8425=8437,8426
<8426=8436,8427
<8427=8435,8428
<8428=8434,8429
<8429=8433,8430
<8430=8432,8431
<8445=8446
<8446=8450,8447
<8447=8449,8448
<8451=8452
<8452=8457,8456,8453
<8453=8455,8454
<8458=8465,8459
<8459=8464,8463,8460
<8460=8462,8461
<8465=8470,8469,8466
<8466=8468,8467
<8471=8472
<8472=8474,8473
<8475=8476
<8476=8478,8477
<8479=8489,8480
<8480=8485,8481
<8481=8482
<8482=8484,8483
<8485=8486
<8486=8488,8487
<8489=8490
<8490=8492,8491
<8493=8494
<8494=8496,8495
<8497=8498
<8498=8503,8502,8499
<8499=8501,8500
<8504=8505
<8505=8507,8506
<8508=8509
<8509=8514,8513,8510
<8510=8512,8511
<8558=8564,8563,8559
<8559=8560
<8560=8562,8561
<8564=8927,8926,8924,8920,8916,8909,8852,8603,8597,8567,8565
<8565=8566
<8567=8593,8570,8568
<8568=8569
<8570=8571
<8571=8572
<8572=8592,8573
<8573=8591,8574
<8574=8585,8575
<8575=8584,8576
<8576=8578,8577
<8578=8580,8579
<8580=8581
<8581=8583,8582
<8585=8587,8586
<8587=8588
<8588=8590,8589
<8593=8594
<8594=8596,8595
<8597=8598
<8598=8602,8599
<8599=8601,8600
<8603=8844,8840,8837,8604
<8604=8706,8605
<8605=8698,8687,8684,8606
<8606=8673,8669,8647,8621,8607
<8607=8608
<8608=8617,8609
<8609=8610
<8610=8611
<8611=8613,8612
<8613=8614
<8614=8616,8615
<8617=8618
<8618=8620,8619
<8621=8633,8622
<8622=8627,8623
<8623=8624
<8624=8626,8625
<8627=8628
<8628=8632,8629
<8629=8631,8630
<8633=8634
<8634=8645,8635
<8635=8638,8636
<8636=8637
<8638=8639
<8639=8641,8640
<8641=8642
<8642=8644,8643
<8645=8646
<8647=8648
<8648=8668,8649
<8649=8662,8650
<8650=8661,8651
<8651=8655,8652
<8652=8654,8653
<8655=8657,8656
<8657=8658
<8658=8660,8659
<8662=8664,8663
<8664=8665
<8665=8667,8666
<8669=8670
<8670=8672,8671
<8673=8674
<8674=8683,8682,8675
<8675=8681,8676
<8676=8678,8677
<8678=8680,8679
<8684=8686,8685
<8687=8688
<8688=8697,8689
<8689=8691,8690
<8691=8692
<8692=8694,8693
<8694=8696,8695
<8698=8699
<8699=8700
<8700=8705,8704,8701
<8701=8703,8702
<8706=8829,8818,8815,8707
<8707=8804,8719,8708
<8708=8709
<8709=8718,8710
<8710=8714,8711
<8711=8712
<8712=8713
<8714=8715
<8715=8717,8716
<8719=8796,8787,8784,8720
<8720=8780,8761,8735,8721
<8721=8722
<8722=8731,8723
<8723=8724
<8724=8725
<8725=8727,8726
<8727=8728
<8728=8730,8729
<8731=8732
<8732=8734,8733
<8735=8747,8736
<8736=8741,8737
<8737=8738
<8738=8740,8739
<8741=8742
<8742=8746,8743
<8743=8745,8744
<8747=8748
<8748=8759,8749
<8749=8752,8750
<8750=8751
<8752=8753
<8753=8755,8754
<8755=8756
<8756=8758,8757
<8759=8760
<8761=8762
<8762=8779,8763
<8763=8778,8764
<8764=8777,8765
<8765=8776,8766
<8766=8775,8767
<8767=8769,8768
<8769=8770
<8770=8772,8771
<8772=8774,8773
<8780=8781
<8781=8783,8782
<8784=8786,8785
<8787=8788
<8788=8795,8789
<8789=8791,8790
<8791=8792
<8792=8794,8793
<8796=8797
<8797=8798
<8798=8803,8802,8799
<8799=8801,8800
<8804=8805
<8805=8814,8813,8806
<8806=8812,8807
<8807=8809,8808
<8809=8811,8810
<8815=8817,8816
<8818=8819
<8819=8828,8820
<8820=8822,8821
<8822=8823
<8823=8825,8824
<8825=8827,8826
<8829=8830
<8830=8831
<8831=8836,8835,8832
<8832=8834,8833
<8837=8839,8838
<8840=8841
<8841=8843,8842
<8844=8845
<8845=8846
<8846=8851,8850,8847
<8847=8849,8848
<8852=8905,8853
<8853=8866,8854
<8854=8860,8855
<8855=8856
<8856=8857
<8857=8859,8858
<8860=8861
<8861=8863,8862
<8863=8865,8864
<8866=8897,8893,8890,8867
<8867=8881,8868
<8868=8869
<8869=8880,8870
<8870=8872,8871
<8872=8874,8873
<8874=8875
<8875=8877,8876
<8877=8879,8878
<8881=8882
<8882=8889,8888,8883
<8883=8887,8884
<8884=8886,8885
<8890=8892,8891
<8893=8894
<8894=8896,8895
<8897=8898
<8898=8899
<8899=8904,8903,8900
<8900=8902,8901
<8905=8906
<8906=8908,8907
<8909=8910
<8910=8915,8914,8911
<8911=8913,8912
<8916=8917
<8917=8919,8918
<8920=8921
<8921=8923,8922
<8924=8925
<8968=8983,8982,8969
<8969=8979,8976,8973,8970
<8970=8972,8971
<8973=8975,8974
<8976=8978,8977
<8979=8981,8980
<8983=9091,9079,9068,9067,9063,9049,9010,8993,8984
<8984=8985
<8985=8989,8986
<8986=8987
<8987=8988
<8989=8990
<8990=8992,8991
<8993=8994
<8994=9009,9008,8995
<8995=9007,8996
<8996=9002,8997
<8997=9001,8998
<8998=9000,8999
<9002=9006,9003
<9003=9005,9004
<9010=9041,9032,9029,9011
<9011=9012
<9012=9026,9013
<9013=9019,9014
<9014=9016,9015
<9016=9018,9017
<9019=9021,9020
<9021=9023,9022
<9023=9025,9024
<9026=9028,9027
<9029=9031,9030
<9032=9033
<9033=9040,9034
<9034=9036,9035
<9036=9037
<9037=9039,9038
<9041=9042
<9042=9043
<9043=9048,9047,9044
<9044=9046,9045
<9049=9050
<9050=9059,9051
<9051=9052
<9052=9053
<9053=9055,9054
<9055=9056
<9056=9058,9057
<9059=9060
<9060=9062,9061
<9063=9064
<9064=9066,9065
<9068=9069
<9069=9078,9077,9070
<9070=9076,9071
<9071=9073,9072
<9073=9075,9074
<9079=9080
<9080=9089,9081
<9081=9082
<9082=9083
<9083=9088,9084
<9084=9086,9085
<9086=9087
<9089=9090
<9091=9092
<9092=9101,9093
<9093=9094
<9094=9095
<9095=9100,9096
<9096=9098,9097
<9098=9099
<9101=9102
<9124=9139,9138,9125
<9125=9135,9132,9129,9126
<9126=9128,9127
<9129=9131,9130
<9132=9134,9133
<9135=9137,9136
<9139=9262,9250,9239,9220,9219,9215,9201,9162,9149,9140
<9140=9141
<9141=9145,9142
<9142=9143
<9143=9144
<9145=9146
<9146=9148,9147
<9149=9150
<9150=9161,9160,9151
<9151=9159,9152
<9152=9158,9153
<9153=9157,9154
<9154=9156,9155
<9162=9193,9184,9181,9163
<9163=9164
<9164=9178,9165
<9165=9171,9166
<9166=9168,9167
<9168=9170,9169
<9171=9173,9172
<9173=9175,9174
<9175=9177,9176
<9178=9180,9179
<9181=9183,9182
<9184=9185
<9185=9192,9186
<9186=9188,9187
<9188=9189
<9189=9191,9190
<9193=9194
<9194=9195
<9195=9200,9199,9196
<9196=9198,9197
<9201=9202
<9202=9211,9203
<9203=9204
<9204=9205
<9205=9207,9206
<9207=9208
<9208=9210,9209
<9211=9212
<9212=9214,9213
<9215=9216
<9216=9218,9217
<9220=9221
<9221=9238,9237,9222
<9222=9236,9223
<9223=9225,9224
<9225=9226
<9226=9228,9227
<9228=9234,9229
<9229=9232,9230
<9230=9231
<9232=9233
<9234=9235
<9239=9240
<9240=9249,9248,9241
<9241=9247,9242
<9242=9244,9243
<9244=9246,9245
<9250=9251
<9251=9260,9252
<9252=9253
<9253=9254
<9254=9259,9255
<9255=9257,9256
<9257=9258
<9260=9261
<9262=9263
<9263=9272,9264
<9264=9265
<9265=9266
<9266=9271,9267
<9267=9269,9268
<9269=9270
<9272=9273
<9298=9307,9306,9299
<9299=9303,9300
<9300=9302,9301
<9303=9305,9304
<9307=9323,9308
<9308=9309
<9309=9321,9310
<9310=9319,9317,9311
<9311=9312
<9312=9316,9313
<9313=9315,9314
<9317=9318
<9319=9320
<9321=9322
<9323=9324
<9324=9326,9325
<9332=9338,9337,9333
<9333=9334
<9334=9336,9335
<9338=9339
<9339=9340
<9340=9344,9341
<9341=9342
<9342=9343
<9344=9345
<9350=9398,9397,9351
<9351=9394,9391,9388,9385,9382,9379,9376,9373,9370,9367,9364,9361,9358,9355,9352
<9352=9354,9353
<9355=9357,9356
<9358=9360,9359
<9361=9363,9362
<9364=9366,9365
<9367=9369,9368
<9370=9372,9371
<9373=9375,9374
<9376=9378,9377
<9379=9381,9380
<9382=9384,9383
<9385=9387,9386
<9388=9390,9389
<9391=9393,9392
<9394=9396,9395
<9398=9757,9753,9747,9738,9734,9730,9726,9722,9718,9714,9710,9706,9702,9698,9694,9690,9686,9682,9678,9674,9670,9664,9660,9656,9652,9648,9644,9640,9636,9630,9624,9615,9608,9599,9513,9504,9495,9486,9477,9468,9459,9450,9441,9432,9423,9414,9410,9406,9399
<9399=9404,9400
<9400=9401
<9401=9403,9402
<9404=9405
<9406=9407
<9407=9409,9408
<9410=9411
<9411=9413,9412
<9414=9415
<9415=9421,9416
<9416=9419,9417
<9417=9418
<9419=9420
<9421=9422
<9423=9424
<9424=9430,9425
<9425=9428,9426
<9426=9427
<9428=9429
<9430=9431
<9432=9433
<9433=9439,9434
<9434=9437,9435
<9435=9436
<9437=9438
<9439=9440
<9441=9442
<9442=9446,9443
<9443=9444
<9444=9445
<9446=9447
<9447=9449,9448
<9450=9451
<9451=9455,9452
<9452=9453
<9453=9454
<9455=9456
<9456=9458,9457
<9459=9460
<9460=9464,9461
<9461=9462
<9462=9463
<9464=9465
<9465=9467,9466
<9468=9469
<9469=9473,9470
<9470=9471
<9471=9472
<9473=9474
<9474=9476,9475
<9477=9478
<9478=9482,9479
<9479=9480
<9480=9481
<9482=9483
<9483=9485,9484
<9486=9487
<9487=9491,9488
<9488=9489
<9489=9490
<9491=9492
<9492=9494,9493
<9495=9496
<9496=9500,9497
<9497=9498
<9498=9499
<9500=9501
<9501=9503,9502
<9504=9505
<9505=9509,9506
<9506=9507
<9507=9508
<9509=9510
<9510=9512,9511
<9513=9597,9520,9514
<9514=9515
<9515=9516
<9516=9517
<9517=9519,9518
<9520=9593,9584,9575,9566,9557,9548,9539,9530,9521
<9521=9522
<9522=9528,9523
<9523=9526,9524
<9524=9525
<9526=9527
<9528=9529
<9530=9531
<9531=9537,9532
<9532=9535,9533
<9533=9534
<9535=9536
<9537=9538
<9539=9540
<9540=9546,9541
<9541=9544,9542
<9542=9543
<9544=9545
<9546=9547
<9548=9549
<9549=9555,9550
<9550=9553,9551
<9551=9552
<9553=9554
<9555=9556
<9557=9558
<9558=9562,9559
<9559=9560
<9560=9561
<9562=9563
<9563=9565,9564
<9566=9567
<9567=9571,9568
<9568=9569
<9569=9570
<9571=9572
<9572=9574,9573
<9575=9576
<9576=9580,9577
<9577=9578
<9578=9579
<9580=9581
<9581=9583,9582
<9584=9585
<9585=9589,9586
<9586=9587
<9587=9588
<9589=9590
<9590=9592,9591
<9593=9594
<9594=9596,9595
<9597=9598
<9599=9600
<9600=9604,9601
<9601=9602
<9602=9603
<9604=9605
<9605=9607,9606
<9608=9609
<9609=9613,9610
<9610=9611
<9611=9612
<9613=9614
<9615=9616
<9616=9620,9617
<9617=9618
<9618=9619
<9620=9621
<9621=9623,9622
<9624=9625
<9625=9629,9626
<9626=9628,9627
<9630=9631
<9631=9635,9632
<9632=9634,9633
<9636=9637
<9637=9639,9638
<9640=9641
<9641=9643,9642
<9644=9645
<9645=9647,9646
<9648=9649
<9649=9651,9650
<9652=9653
<9653=9655,9654
<9656=9657
<9657=9659,9658
<9660=9661
<9661=9663,9662
<9664=9665
<9665=9669,9666
<9666=9668,9667
<9670=9671
<9671=9673,9672
<9674=9675
<9675=9677,9676
<9678=9679
<9679=9681,9680
<9682=9683
<9683=9685,9684
<9686=9687
<9687=9689,9688
<9690=9691
<9691=9693,9692
<9694=9695
<9695=9697,9696
<9698=9699
<9699=9701,9700
<9702=9703
<9703=9705,9704
<9706=9707
<9707=9709,9708
<9710=9711
<9711=9713,9712
<9714=9715
<9715=9717,9716
<9718=9719
<9719=9721,9720
<9722=9723
<9723=9725,9724
<9726=9727
<9727=9729,9728
<9730=9731
<9731=9733,9732
<9734=9735
<9735=9737,9736
<9738=9739
<9739=9745,9740
<9740=9741
<9741=9742
<9742=9744,9743
<9745=9746
<9747=9748
<9748=9752,9749
<9749=9751,9750
<9753=9754
<9754=9756,9755
<9757=9758
<9758=9760,9759
<9836=9839,9838,9837
<9839=9869,9842,9840
<9840=9841
<9842=9861,9857,9854,9843
<9843=9844
<9844=9853,9845
<9845=9847,9846
<9847=9848
<9848=9850,9849
<9850=9852,9851
<9854=9856,9855
<9857=9858
<9858=9860,9859
<9861=9862
<9862=9863
<9863=9868,9867,9864
<9864=9866,9865
<9869=9870
<9870=9875,9874,9871
<9871=9873,9872
<9886=9892,9891,9887
<9887=9888
<9888=9890,9889
<9892=9902,9893
<9893=9894
<9894=9896,9895
<9896=9897
<9897=9899,9898
<9899=9901,9900
<9902=9903
<9903=9909,9904
<9904=9905
<9905=9906
<9906=9908,9907
<9909=9910
<9920=9929,9928,9921
<9921=9925,9922
<9922=9924,9923
<9925=9927,9926
<9929=9958,9946,9930
<9930=9931
<9931=9933,9932
<9933=9934
<9934=9936,9935
<9936=9945,9937
<9937=9939,9938
<9939=9944,9940
<9940=9942,9941
<9942=9943
<9946=9947
<9947=9956,9948
<9948=9949
<9949=9950
<9950=9955,9951
<9951=9953,9952
<9953=9954
<9956=9957
<9958=9959
<9959=9968,9960
<9960=9961
<9961=9962
<9962=9967,9963
<9963=9965,9964
<9965=9966
<9968=9969
<9983=9986,9985,9984
<9986=10016,9989,9987
<9987=9988
<9989=10008,10004,10001,9990
<9990=9991
<9991=10000,9992
<9992=9994,9993
<9994=9995
<9995=9997,9996
<9997=9999,9998
<10001=10003,10002
<10004=10005
<10005=10007,10006
<10008=10009
<10009=10010
<10010=10015,10014,10011
<10011=10013,10012
<10016=10017
<10017=10022,10021,10018
<10018=10020,10019
<10033=10039,10038,10034
<10034=10035
<10035=10037,10036
<10039=10049,10040
<10040=10041
<10041=10043,10042
<10043=10044
<10044=10046,10045
<10046=10048,10047
<10049=10050
<10050=10059,10051
<10051=10052
<10052=10053
<10053=10058,10054
<10054=10056,10055
<10056=10057
<10059=10060
<10070=10079,10078,10071
<10071=10075,10072
<10072=10074,10073
<10075=10077,10076
<10079=10102,10090,10080
<10080=10081
<10081=10089,10082
<10082=10088,10083
<10083=10085,10084
<10085=10087,10086
<10090=10091
<10091=10100,10092
<10092=10093
<10093=10094
<10094=10099,10095
<10095=10097,10096
<10097=10098
<10100=10101
<10102=10103
<10103=10112,10104
<10104=10105
<10105=10106
<10106=10111,10107
<10107=10109,10108
<10109=10110
<10112=10113
<10127=10136,10135,10128
<10128=10132,10129
<10129=10131,10130
<10132=10134,10133
<10136=10155,10143,10137
<10137=10138
<10138=10140,10139
<10140=10142,10141
<10143=10144
<10144=10153,10145
<10145=10146
<10146=10147
<10147=10152,10148
<10148=10150,10149
<10150=10151
<10153=10154
<10155=10156
<10156=10165,10157
<10157=10158
<10158=10159
<10159=10164,10160
<10160=10162,10161
<10162=10163
<10165=10166
<10175=10187,10186,10176
<10176=10183,10180,10177
<10177=10179,10178
<10180=10182,10181
<10183=10185,10184
<10187=10241,10229,10215,10199,10188
<10188=10189
<10189=10198,10190
<10190=10196,10191
<10191=10194,10192
<10192=10193
<10194=10195
<10196=10197
<10199=10200
<10200=10213,10201
<10201=10202
<10202=10203
<10203=10212,10204
<10204=10206,10205
<10206=10207
<10207=10209,10208
<10209=10211,10210
<10213=10214
<10215=10216
<10216=10228,10227,10217
<10217=10226,10218
<10218=10220,10219
<10220=10225,10221
<10221=10223,10222
<10223=10224
<10229=10230
<10230=10239,10231
<10231=10232
<10232=10233
<10233=10238,10234
<10234=10236,10235
<10236=10237
<10239=10240
<10241=10242
<10242=10251,10243
<10243=10244
<10244=10245
<10245=10250,10246
<10246=10248,10247
<10248=10249
<10251=10252
<10267=10276,10275,10268
<10268=10272,10269
<10269=10271,10270
<10272=10274,10273
<10276=10299,10283,10277
<10277=10278
<10278=10280,10279
<10280=10282,10281
<10283=10284
<10284=10297,10285
<10285=10286
<10286=10287
<10287=10296,10288
<10288=10290,10289
<10290=10291
<10291=10293,10292
<10293=10295,10294
<10297=10298
<10299=10300
<10300=10309,10301
<10301=10302
<10302=10303
<10303=10308,10304
<10304=10306,10305
<10306=10307
<10309=10310
<10324=10333,10332,10325
<10325=10329,10326
<10326=10328,10327
<10329=10331,10330
<10333=10369,10357,10343,10334
<10334=10335
<10335=10337,10336
<10337=10338
<10338=10340,10339
<10340=10342,10341
<10343=10344
<10344=10356,10355,10345
<10345=10354,10346
<10346=10348,10347
<10348=10353,10349
<10349=10351,10350
<10351=10352
<10357=10358
<10358=10367,10359
<10359=10360
<10360=10361
<10361=10366,10362
<10362=10364,10363
<10364=10365
<10367=10368
<10369=10370
<10370=10379,10371
<10371=10372
<10372=10373
<10373=10378,10374
<10374=10376,10375
<10376=10377
<10379=10380
<10393=10405,10404,10394
<10394=10401,10398,10395
<10395=10397,10396
<10398=10400,10399
<10401=10403,10402
<10405=10690,10673,10659,10645,10630,10415,10406
<10406=10407
<10407=10413,10408
<10408=10411,10409
<10409=10410
<10411=10412
<10413=10414
<10415=10620,10616,10613,10416
<10416=10601,10537,10417
<10417=10526,10418
<10418=10419
<10419=10518,10507,10504,10420
<10420=10488,10470,10421
<10421=10462,10422
<10422=10454,10439,10435,10423
<10423=10424
<10424=10434,10425
<10425=10433,10426
<10426=10432,10427
<10427=10431,10428
<10428=10430,10429
<10435=10436
<10436=10438,10437
<10439=10440
<10440=10446,10441
<10441=10444,10442
<10442=10443
<10444=10445
<10446=10447
<10447=10449,10448
<10449=10451,10450
<10451=10453,10452
<10454=10455
<10455=10461,10456
<10456=10460,10457
<10457=10459,10458
<10462=10463
<10463=10467,10464
<10464=10466,10465
<10467=10469,10468
<10470=10484,10471
<10471=10480,10476,10472
<10472=10473
<10473=10475,10474
<10476=10477
<10477=10479,10478
<10480=10481
<10481=10483,10482
<10484=10485
<10485=10487,10486
<10488=10489
<10489=10503,10502,10490
<10490=10501,10491
<10491=10497,10492
<10492=10495,10493
<10493=10494
<10495=10496
<10497=10498
<10498=10500,10499
<10504=10506,10505
<10507=10508
<10508=10517,10509
<10509=10511,10510
<10511=10512
<10512=10514,10513
<10514=10516,10515
<10518=10519
<10519=10520
<10520=10525,10524,10521
<10521=10523,10522
<10526=10527
<10527=10529,10528
<10529=10533,10530
<10530=10531
<10531=10532
<10533=10534
<10534=10536,10535
<10537=10599,10538
<10538=10539
<10539=10591,10580,10577,10540
<10540=10541
<10541=10542
<10542=10575,10543
<10543=10544
<10544=10545
<10545=10556,10546
<10546=10552,10547
<10547=10550,10548
<10548=10549
<10550=10551
<10552=10553
<10553=10555,10554
<10556=10564,10557
<10557=10562,10560,10558
<10558=10559
<10560=10561
<10562=10563
<10564=10565
<10565=10567,10566
<10567=10573,10568
<10568=10571,10569
<10569=10570
<10571=10572
<10573=10574
<10575=10576
<10577=10579,10578
<10580=10581
<10581=10590,10582
<10582=10584,10583
<10584=10585
<10585=10587,10586
<10587=10589,10588
<10591=10592
<10592=10593
<10593=10598,10597,10594
<10594=10596,10595
<10599=10600
<10601=10602
<10602=10612,10611,10603
<10603=10610,10604
<10604=10608,10605
<10605=10606
<10606=10607
<10608=10609
<10613=10615,10614
<10616=10617
<10617=10619,10618
<10620=10621
<10621=10622
<10622=10629,10628,10623
<10623=10627,10624
<10624=10626,10625
<10630=10631
<10631=10644,10643,10632
<10632=10642,10633
<10633=10638,10635,10634
<10635=10637,10636
<10638=10639
<10639=10641,10640
<10645=10646
<10646=10658,10657,10647
<10647=10656,10648
<10648=10654,10649
<10649=10650
<10650=10651
<10651=10653,10652
<10654=10655
<10659=10660
<10660=10672,10671,10661
<10661=10670,10662
<10662=10668,10663
<10663=10664
<10664=10665
<10665=10667,10666
<10668=10669
<10673=10682,10674
<10674=10681,10680,10675
<10675=10679,10676
<10676=10678,10677
<10682=10689,10688,10683
<10683=10687,10684
<10684=10686,10685
<10690=10691
<10691=10692
<10692=10701,10693
<10693=10694
<10694=10695
<10695=10700,10696
<10696=10698,10697
<10698=10699
<10701=10702
<10738=10750,10749,10739
<10739=10746,10743,10740
<10740=10742,10741
<10743=10745,10744
<10746=10748,10747
<10750=11012,10995,10984,10973,10789,10751
<10751=10781,10770,10752
<10752=10753
<10753=10754
<10754=10768,10755
<10755=10762,10756
<10756=10757
<10757=10761,10758
<10758=10760,10759
<10762=10763
<10763=10767,10764
<10764=10766,10765
<10768=10769
<10770=10771
<10771=10779,10772
<10772=10777,10773
<10773=10774
<10774=10776,10775
<10777=10778
<10779=10780
<10781=10782
<10782=10788,10783
<10783=10787,10784
<10784=10786,10785
<10789=10965,10961,10958,10790
<10790=10939,10814,10791
<10791=10808,10792
<10792=10797,10793
<10793=10794
<10794=10796,10795
<10797=10798
<10798=10807,10799
<10799=10805,10800
<10800=10803,10801
<10801=10802
<10803=10804
<10805=10806
<10808=10809
<10809=10813,10810
<10810=10812,10811
<10814=10931,10920,10917,10815
<10815=10901,10879,10865,10816
<10816=10857,10817
<10817=10849,10834,10830,10818
<10818=10819
<10819=10829,10820
<10820=10828,10821
<10821=10827,10822
<10822=10826,10823
<10823=10825,10824
<10830=10831
<10831=10833,10832
<10834=10835
<10835=10841,10836
<10836=10839,10837
<10837=10838
<10839=10840
<10841=10842
<10842=10844,10843
<10844=10846,10845
<10846=10848,10847
<10849=10850
<10850=10856,10851
<10851=10855,10852
<10852=10854,10853
<10857=10858
<10858=10862,10859
<10859=10861,10860
<10862=10864,10863
<10865=10875,10866
<10866=10871,10867
<10867=10868
<10868=10870,10869
<10871=10872
<10872=10874,10873
<10875=10876
<10876=10878,10877
<10879=10880
<10880=10900,10881
<10881=10889,10882
<10882=10887,10885,10883
<10883=10884
<10885=10886
<10887=10888
<10889=10890
<10890=10892,10891
<10892=10898,10893
<10893=10896,10894
<10894=10895
<10896=10897
<10898=10899
<10901=10903,10902
<10903=10904
<10904=10906,10905
<10906=10907
<10907=10909,10908
<10909=10915,10910
<10910=10913,10911
<10911=10912
<10913=10914
<10915=10916
<10917=10919,10918
<10920=10921
<10921=10930,10922
<10922=10924,10923
<10924=10925
<10925=10927,10926
<10927=10929,10928
<10931=10932
<10932=10933
<10933=10938,10937,10934
<10934=10936,10935
<10939=10952,10946,10940
<10940=10945,10944,10941
<10941=10943,10942
<10946=10951,10950,10947
<10947=10949,10948
<10952=10957,10956,10953
<10953=10955,10954
<10958=10960,10959
<10961=10962
<10962=10964,10963
<10965=10966
<10966=10967
<10967=10972,10971,10968
<10968=10970,10969
<10973=10974
<10974=10983,10982,10975
<10975=10977,10976
<10977=10981,10978
<10978=10980,10979
<10984=10985
<10985=10994,10993,10986
<10986=10992,10987
<10987=10991,10988
<10988=10990,10989
<10995=11004,10996
<10996=11003,11002,10997
<10997=11001,10998
<10998=11000,10999
<11004=11011,11010,11005
<11005=11009,11006
<11006=11008,11007
<11012=11013
<11013=11014
<11014=11023,11015
<11015=11016
<11016=11017
<11017=11022,11018
<11018=11020,11019
<11020=11021
<11023=11024
<11059=11077,11076,11060
<11060=11073,11070,11067,11064,11061
<11061=11063,11062
<11064=11066,11065
<11067=11069,11068
<11070=11072,11071
<11073=11075,11074
<11077=11526,11514,11513,11509,11500,11499,11495,11299,11287,11268,11254,11112,11090,11078
<11078=11079
<11079=11088,11080
<11080=11081
<11081=11082
<11082=11084,11083
<11084=11085
<11085=11087,11086
<11088=11089
<11090=11110,11091
<11091=11092
<11092=11108,11093
<11093=11101,11094
<11094=11095
<11095=11097,11096
<11097=11098
<11098=11100,11099
<11101=11102
<11102=11104,11103
<11104=11105
<11105=11107,11106
<11108=11109
<11110=11111
<11112=11250,11195,11113
<11113=11114
<11114=11191,11172,11115
<11115=11116
<11116=11151,11121,11117
<11117=11118
<11118=11120,11119
<11121=11122
<11122=11147,11123
<11123=11140,11133,11124
<11124=11125
<11125=11127,11126
<11127=11129,11128
<11129=11130
<11130=11132,11131
<11133=11134
<11134=11136,11135
<11136=11137
<11137=11139,11138
<11140=11141
<11141=11143,11142
<11143=11144
<11144=11146,11145
<11147=11148
<11148=11150,11149
<11151=11152
<11152=11170,11153
<11153=11163,11156,11154
<11154=11155
<11156=11157
<11157=11159,11158
<11159=11160
<11160=11162,11161
<11163=11164
<11164=11166,11165
<11166=11167
<11167=11169,11168
<11170=11171
<11172=11173
<11173=11174
<11174=11187,11175
<11175=11176
<11176=11177
<11177=11186,11178
<11178=11182,11179
<11179=11180
<11180=11181
<11182=11183
<11183=11185,11184
<11187=11188
<11188=11190,11189
<11191=11192
<11192=11194,11193
<11195=11234,11230,11196
<11196=11221,11212,11209,11197
<11197=11198
<11198=11199
<11199=11205,11200
<11200=11201
<11201=11202
<11202=11204,11203
<11205=11206
<11206=11208,11207
<11209=11211,11210
<11212=11213
<11213=11220,11214
<11214=11216,11215
<11216=11217
<11217=11219,11218
<11221=11222
<11222=11229,11223
<11223=11225,11224
<11225=11226
<11226=11228,11227
<11230=11231
<11231=11233,11232
<11234=11235
<11235=11246,11236
<11236=11237
<11237=11238
<11238=11245,11239
<11239=11241,11240
<11241=11242
<11242=11244,11243
<11246=11247
<11247=11249,11248
<11250=11251
<11251=11253,11252
<11254=11255
<11255=11267,11266,11256
<11256=11265,11257
<11257=11259,11258
<11259=11261,11260
<11261=11262
<11262=11264,11263
<11268=11283,11269
<11269=11271,11270
<11271=11272
<11272=11281,11273
<11273=11274
<11274=11275
<11275=11277,11276
<11277=11278
<11278=11280,11279
<11281=11282
<11283=11284
<11284=11286,11285
<11287=11288
<11288=11298,11297,11289
<11289=11296,11290
<11290=11292,11291
<11292=11293
<11293=11295,11294
<11299=11487,11306,11300
<11300=11301
<11301=11302
<11302=11303
<11303=11305,11304
<11306=11476,11475,11471,11442,11435,11398,11369,11365,11323,11307
<11307=11308
<11308=11319,11309
<11309=11310
<11310=11311
<11311=11318,11312
<11312=11314,11313
<11314=11315
<11315=11317,11316
<11319=11320
<11320=11322,11321
<11323=11324
<11324=11364,11325
<11325=11362,11326
<11326=11355,11348,11341,11334,11327
<11327=11328
<11328=11330,11329
<11330=11331
<11331=11333,11332
<11334=11335
<11335=11337,11336
<11337=11338
<11338=11340,11339
<11341=11342
<11342=11344,11343
<11344=11345
<11345=11347,11346
<11348=11349
<11349=11351,11350
<11351=11352
<11352=11354,11353
<11355=11356
<11356=11358,11357
<11358=11359
<11359=11361,11360
<11362=11363
<11365=11366
<11366=11368,11367
<11369=11384,11370
<11370=11371
<11371=11380,11372
<11372=11373
<11373=11374
<11374=11376,11375
<11376=11377
<11377=11379,11378
<11380=11381
<11381=11383,11382
<11384=11385
<11385=11392,11386
<11386=11388,11387
<11388=11389
<11389=11391,11390
<11392=11394,11393
<11394=11395
<11395=11397,11396
<11398=11427,11418,11415,11399
<11399=11400
<11400=11411,11401
<11401=11402
<11402=11403
<11403=11405,11404
<11405=11406
<11406=11408,11407
<11408=11410,11409
<11411=11412
<11412=11414,11413
<11415=11417,11416
<11418=11419
<11419=11426,11420
<11420=11422,11421
<11422=11423
<11423=11425,11424
<11427=11428
<11428=11429
<11429=11434,11433,11430
<11430=11432,11431
<11435=11436
<11436=11438,11437
<11438=11439
<11439=11441,11440
<11442=11457,11443
<11443=11444
<11444=11453,11445
<11445=11446
<11446=11447
<11447=11449,11448
<11449=11450
<11450=11452,11451
<11453=11454
<11454=11456,11455
<11457=11458
<11458=11465,11459
<11459=11461,11460
<11461=11462
<11462=11464,11463
<11465=11467,11466
<11467=11468
<11468=11470,11469
<11471=11472
<11472=11474,11473
<11476=11477
<11477=11486,11485,11478
<11478=11484,11479
<11479=11481,11480
<11481=11483,11482
<11487=11488
<11488=11494,11489
<11489=11493,11490
<11490=11492,11491
<11495=11496
<11496=11498,11497
<11500=11501
<11501=11508,11502
<11502=11504,11503
<11504=11505
<11505=11507,11506
<11509=11510
<11510=11512,11511
<11514=11515
<11515=11524,11516
<11516=11517
<11517=11518
<11518=11520,11519
<11520=11521
<11521=11523,11522
<11524=11525
<11526=11528,11527
<11528=11529
<11529=11531,11530
<11583=11592,11591,11584
<11584=11588,11585
<11585=11587,11586
<11588=11590,11589
<11592=11814,11805,11796,11618,11602,11593
<11593=11594
<11594=11600,11595
<11595=11598,11596
<11596=11597
<11598=11599
<11600=11601
<11602=11616,11603
<11603=11604
<11604=11605
<11605=11614,11606
<11606=11607
<11607=11608
<11608=11612,11609
<11609=11610
<11610=11611
<11612=11613
<11614=11615
<11616=11617
<11618=11788,11784,11781,11619
<11619=11620
<11620=11773,11762,11759,11621
<11621=11758,11754,11747,11733,11718,11631,11622
<11622=11623
<11623=11630,11624
<11624=11626,11625
<11626=11627
<11627=11629,11628
<11631=11709,11645,11632
<11632=11633
<11633=11634
<11634=11635
<11635=11643,11636
<11636=11641,11639,11637
<11637=11638
<11639=11640
<11641=11642
<11643=11644
<11645=11672,11661,11650,11646
<11646=11647
<11647=11649,11648
<11650=11651
<11651=11655,11652
<11652=11653
<11653=11654
<11655=11656
<11656=11658,11657
<11658=11660,11659
<11661=11662
<11662=11670,11663
<11663=11668,11666,11664
<11664=11665
<11666=11667
<11668=11669
<11670=11671
<11672=11701,11692,11689,11673
<11673=11674
<11674=11685,11675
<11675=11676
<11676=11677
<11677=11679,11678
<11679=11680
<11680=11682,11681
<11682=11684,11683
<11685=11686
<11686=11688,11687
<11689=11691,11690
<11692=11693
<11693=11700,11694
<11694=11696,11695
<11696=11697
<11697=11699,11698
<11701=11702
<11702=11703
<11703=11708,11707,11704
<11704=11706,11705
<11709=11710
<11710=11712,11711
<11712=11714,11713
<11714=11715
<11715=11717,11716
<11718=11719
<11719=11729,11720
<11720=11727,11725,11723,11721
<11721=11722
<11723=11724
<11725=11726
<11727=11728
<11729=11730
<11730=11732,11731
<11733=11734
<11734=11746,11745,11735
<11735=11744,11736
<11736=11742,11737
<11737=11740,11738
<11738=11739
<11740=11741
<11742=11743
<11747=11748
<11748=11750,11749
<11750=11751
<11751=11753,11752
<11754=11755
<11755=11757,11756
<11759=11761,11760
<11762=11763
<11763=11772,11764
<11764=11766,11765
<11766=11767
<11767=11769,11768
<11769=11771,11770
<11773=11774
<11774=11775
<11775=11780,11779,11776
<11776=11778,11777
<11781=11783,11782
<11784=11785
<11785=11787,11786
<11788=11789
<11789=11790
<11790=11795,11794,11791
<11791=11793,11792
<11796=11801,11797
<11797=11798
<11798=11800,11799
<11801=11802
<11802=11804,11803
<11805=11810,11806
<11806=11807
<11807=11809,11808
<11810=11811
<11811=11813,11812
<11814=11821,11815
<11815=11820,11819,11816
<11816=11818,11817
<11821=11826,11825,11822
<11822=11824,11823
<11857=11863,11862,11858
<11858=11859
<11859=11861,11860
<11863=11864
<11864=11939,11932,11929,11865
<11865=11870,11866
<11866=11867
<11867=11869,11868
<11870=11921,11914,11911,11871
<11871=11896,11882,11872
<11872=11873
<11873=11881,11874
<11874=11877,11876,11875
<11877=11878
<11878=11880,11879
<11882=11883
<11883=11895,11894,11884
<11884=11893,11885
<11885=11887,11886
<11887=11892,11888
<11888=11890,11889
<11890=11891
<11896=11901,11897
<11897=11898
<11898=11900,11899
<11901=11902
<11902=11908,11903
<11903=11905,11904
<11905=11907,11906
<11908=11910,11909
<11911=11913,11912
<11914=11915
<11915=11920,11916
<11916=11918,11917
<11918=11919
<11921=11922
<11922=11923
<11923=11928,11927,11924
<11924=11926,11925
<11929=11931,11930
<11932=11933
<11933=11938,11934
<11934=11936,11935
<11936=11937
<11939=11940
<11940=11941
<11941=11946,11945,11942
<11942=11944,11943
<11958=11961,11960,11959
<11961=11962
<11962=12444,11963
<11963=12440,12284,12280,12124,12120,11964
<11964=12112,12105,12102,11965
<11965=12038,12034,11970,11966
<11966=11967
<11967=11969,11968
<11970=12026,12019,12016,11971
<11971=12001,11987,11972
<11972=11973
<11973=11986,11974
<11974=11977,11976,11975
<11977=11978
<11978=11982,11979
<11979=11980
<11980=11981
<11982=11983
<11983=11985,11984
<11987=11988
<11988=12000,11999,11989
<11989=11998,11990
<11990=11992,11991
<11992=11997,11993
<11993=11995,11994
<11995=11996
<12001=12006,12002
<12002=12003
<12003=12005,12004
<12006=12007
<12007=12013,12008
<12008=12010,12009
<12010=12012,12011
<12013=12015,12014
<12016=12018,12017
<12019=12020
<12020=12025,12021
<12021=12023,12022
<12023=12024
<12026=12027
<12027=12028
<12028=12033,12032,12029
<12029=12031,12030
<12034=12035
<12035=12037,12036
<12038=12094,12087,12084,12039
<12039=12069,12055,12040
<12040=12041
<12041=12054,12042
<12042=12045,12044,12043
<12045=12046
<12046=12050,12047
<12047=12048
<12048=12049
<12050=12051
<12051=12053,12052
<12055=12056
<12056=12068,12067,12057
<12057=12066,12058
<12058=12060,12059
<12060=12065,12061
<12061=12063,12062
<12063=12064
<12069=12074,12070
<12070=12071
<12071=12073,12072
<12074=12075
<12075=12081,12076
<12076=12078,12077
<12078=12080,12079
<12081=12083,12082
<12084=12086,12085
<12087=12088
<12088=12093,12089
<12089=12091,12090
<12091=12092
<12094=12095
<12095=12096
<12096=12101,12100,12097
<12097=12099,12098
<12102=12104,12103
<12105=12106
<12106=12111,12107
<12107=12109,12108
<12109=12110
<12112=12113
<12113=12114
<12114=12119,12118,12115
<12115=12117,12116
<12120=12121
<12121=12123,12122
<12124=12272,12265,12262,12125
<12125=12198,12194,12130,12126
<12126=12127
<12127=12129,12128
<12130=12186,12179,12176,12131
<12131=12161,12147,12132
<12132=12133
<12133=12146,12134
<12134=12137,12136,12135
<12137=12138
<12138=12142,12139
<12139=12140
<12140=12141
<12142=12143
<12143=12145,12144
<12147=12148
<12148=12160,12159,12149
<12149=12158,12150
<12150=12152,12151
<12152=12157,12153
<12153=12155,12154
<12155=12156
<12161=12166,12162
<12162=12163
<12163=12165,12164
<12166=12167
<12167=12173,12168
<12168=12170,12169
<12170=12172,12171
<12173=12175,12174
<12176=12178,12177
<12179=12180
<12180=12185,12181
<12181=12183,12182
<12183=12184
<12186=12187
<12187=12188
<12188=12193,12192,12189
<12189=12191,12190
<12194=12195
<12195=12197,12196
<12198=12254,12247,12244,12199
<12199=12229,12215,12200
<12200=12201
<12201=12214,12202
<12202=12205,12204,12203
<12205=12206
<12206=12210,12207
<12207=12208
<12208=12209
<12210=12211
<12211=12213,12212
<12215=12216
<12216=12228,12227,12217
<12217=12226,12218
<12218=12220,12219
<12220=12225,12221
<12221=12223,12222
<12223=12224
<12229=12234,12230
<12230=12231
<12231=12233,12232
<12234=12235
<12235=12241,12236
<12236=12238,12237
<12238=12240,12239
<12241=12243,12242
<12244=12246,12245
<12247=12248
<12248=12253,12249
<12249=12251,12250
<12251=12252
<12254=12255
<12255=12256
<12256=12261,12260,12257
<12257=12259,12258
<12262=12264,12263
<12265=12266
<12266=12271,12267
<12267=12269,12268
<12269=12270
<12272=12273
<12273=12274
<12274=12279,12278,12275
<12275=12277,12276
<12280=12281
<12281=12283,12282
<12284=12432,12425,12422,12285
<12285=12358,12354,12290,12286
<12286=12287
<12287=12289,12288
<12290=12346,12339,12336,12291
<12291=12321,12307,12292
<12292=12293
<12293=12306,12294
<12294=12297,12296,12295
<12297=12298
<12298=12302,12299
<12299=12300
<12300=12301
<12302=12303
<12303=12305,12304
<12307=12308
<12308=12320,12319,12309
<12309=12318,12310
<12310=12312,12311
<12312=12317,12313
<12313=12315,12314
<12315=12316
<12321=12326,12322
<12322=12323
<12323=12325,12324
<12326=12327
<12327=12333,12328
<12328=12330,12329
<12330=12332,12331
<12333=12335,12334
<12336=12338,12337
<12339=12340
<12340=12345,12341
<12341=12343,12342
<12343=12344
<12346=12347
<12347=12348
<12348=12353,12352,12349
<12349=12351,12350
<12354=12355
<12355=12357,12356
<12358=12414,12407,12404,12359
<12359=12389,12375,12360
<12360=12361
<12361=12374,12362
<12362=12365,12364,12363
<12365=12366
<12366=12370,12367
<12367=12368
<12368=12369
<12370=12371
<12371=12373,12372
<12375=12376
<12376=12388,12387,12377
<12377=12386,12378
<12378=12380,12379
<12380=12385,12381
<12381=12383,12382
<12383=12384
<12389=12394,12390
<12390=12391
<12391=12393,12392
<12394=12395
<12395=12401,12396
<12396=12398,12397
<12398=12400,12399
<12401=12403,12402
<12404=12406,12405
<12407=12408
<12408=12413,12409
<12409=12411,12410
<12411=12412
<12414=12415
<12415=12416
<12416=12421,12420,12417
<12417=12419,12418
<12422=12424,12423
<12425=12426
<12426=12431,12427
<12427=12429,12428
<12429=12430
<12432=12433
<12433=12434
<12434=12439,12438,12435
<12435=12437,12436
<12440=12441
<12441=12443,12442
<12444=12445
<12467=12470,12469,12468
<12470=12510,12471
<12471=12502,12493,12490,12472
<12472=12477,12473
<12473=12474
<12474=12476,12475
<12477=12478
<12478=12484,12479
<12479=12482,12480
<12480=12481
<12482=12483
<12484=12485
<12485=12487,12486
<12487=12489,12488
<12490=12492,12491
<12493=12494
<12494=12501,12495
<12495=12497,12496
<12497=12498
<12498=12500,12499
<12502=12503
<12503=12504
<12504=12509,12508,12505
<12505=12507,12506
<12510=12511
<12511=12522,12512
<12512=12516,12513
<12513=12515,12514
<12516=12518,12517
<12518=12519
<12519=12521,12520
<12533=12539,12538,12534
<12534=12535
<12535=12537,12536
<12539=12544,12540
<12540=12541
<12541=12543,12542
<12544=12604,12595,12592,12545
<12545=12584,12550,12546
<12546=12547
<12547=12549,12548
<12550=12576,12565,12562,12551
<12551=12552
<12552=12553
<12553=12561,12554
<12554=12556,12555
<12556=12558,12557
<12558=12560,12559
<12562=12564,12563
<12565=12566
<12566=12575,12567
<12567=12569,12568
<12569=12570
<12570=12572,12571
<12572=12574,12573
<12576=12577
<12577=12578
<12578=12583,12582,12579
<12579=12581,12580
<12584=12585
<12585=12591,12586
<12586=12590,12587
<12587=12589,12588
<12592=12594,12593
<12595=12596
<12596=12603,12597
<12597=12599,12598
<12599=12600
<12600=12602,12601
<12604=12605
<12605=12606
<12606=12611,12610,12607
<12607=12609,12608
<12622=12628,12627,12623
<12623=12624
<12624=12626,12625
<12628=12629
<12629=12686,12682,12679,12630
<12630=12671,12635,12631
<12631=12632
<12632=12634,12633
<12635=12663,12652,12649,12636
<12636=12637
<12637=12638
<12638=12648,12639
<12639=12647,12640
<12640=12642,12641
<12642=12644,12643
<12644=12646,12645
<12649=12651,12650
<12652=12653
<12653=12662,12654
<12654=12656,12655
<12656=12657
<12657=12659,12658
<12659=12661,12660
<12663=12664
<12664=12665
<12665=12670,12669,12666
<12666=12668,12667
<12671=12672
<12672=12678,12673
<12673=12677,12674
<12674=12676,12675
<12679=12681,12680
<12682=12683
<12683=12685,12684
<12686=12687
<12687=12688
<12688=12693,12692,12689
<12689=12691,12690
<12705=12714,12713,12706
<12706=12710,12707
<12707=12709,12708
<12710=12712,12711
<12714=12717,12715
<12715=12716
<12717=12718
<12718=12722,12719
<12719=12720
<12720=12721
<12722=12723
<12723=12725,12724
<12731=12737,12736,12732
<12732=12733
<12733=12735,12734
<12737=12886,12879,12872,12865,12858,12857,12853,12844,12840,12745,12738
<12738=12739
<12739=12744,12740
<12740=12742,12741
<12742=12743
<12745=12831,12822,12819,12746
<12746=12808,12747
<12747=12800,12791,12788,12748
<12748=12774,12760,12749
<12749=12750
<12750=12756,12751
<12751=12754,12752
<12752=12753
<12754=12755
<12756=12757
<12757=12759,12758
<12760=12761
<12761=12773,12772,12762
<12762=12771,12763
<12763=12765,12764
<12765=12766
<12766=12768,12767
<12768=12770,12769
<12774=12775
<12775=12787,12786,12776
<12776=12785,12777
<12777=12779,12778
<12779=12780
<12780=12782,12781
<12782=12784,12783
<12788=12790,12789
<12791=12792
<12792=12799,12793
<12793=12795,12794
<12795=12796
<12796=12798,12797
<12800=12801
<12801=12802
<12802=12807,12806,12803
<12803=12805,12804
<12808=12809
<12809=12818,12817,12810
<12810=12816,12811
<12811=12815,12812
<12812=12814,12813
<12819=12821,12820
<12822=12823
<12823=12830,12824
<12824=12826,12825
<12826=12827
<12827=12829,12828
<12831=12832
<12832=12839,12833
<12833=12835,12834
<12835=12836
<12836=12838,12837
<12840=12841
<12841=12843,12842
<12844=12845
<12845=12852,12846
<12846=12848,12847
<12848=12849
<12849=12851,12850
<12853=12854
<12854=12856,12855
<12858=12859
<12859=12864,12860
<12860=12862,12861
<12862=12863
<12865=12866
<12866=12871,12867
<12867=12869,12868
<12869=12870
<12872=12873
<12873=12875,12874
<12875=12876
<12876=12878,12877
<12879=12880
<12880=12885,12881
<12881=12883,12882
<12883=12884
<12886=12896,12893,12890,12887
<12887=12889,12888
<12890=12892,12891
<12893=12895,12894
<12896=12898,12897
<12927=12933,12932,12928
<12928=12929
<12929=12931,12930
<12933=13214,13207,13200,13193,13186,13175,13171,13035,12941,12934
<12934=12935
<12935=12940,12936
<12936=12938,12937
<12938=12939
<12941=13031,13027,13024,12942
<12942=12943
<12943=13015,12944
<12944=13006,12945
<12945=12998,12989,12986,12946
<12946=12972,12958,12947
<12947=12948
<12948=12954,12949
<12949=12952,12950
<12950=12951
<12952=12953
<12954=12955
<12955=12957,12956
<12958=12959
<12959=12971,12970,12960
<12960=12969,12961
<12961=12963,12962
<12963=12964
<12964=12966,12965
<12966=12968,12967
<12972=12973
<12973=12985,12984,12974
<12974=12983,12975
<12975=12977,12976
<12977=12978
<12978=12980,12979
<12980=12982,12981
<12986=12988,12987
<12989=12990
<12990=12997,12991
<12991=12993,12992
<12993=12994
<12994=12996,12995
<12998=12999
<12999=13000
<13000=13005,13004,13001
<13001=13003,13002
<13006=13007
<13007=13014,13013,13008
<13008=13012,13009
<13009=13011,13010
<13015=13016
<13016=13020,13017
<13017=13018
<13018=13019
<13020=13021
<13021=13023,13022
<13024=13026,13025
<13027=13028
<13028=13030,13029
<13031=13032
<13032=13034,13033
<13035=13167,13163,13160,13036
<13036=13142,13037
<13037=13134,13126,13119,13038
<13038=13039
<13039=13113,13040
<13040=13102,13041
<13041=13094,13085,13082,13042
<13042=13068,13054,13043
<13043=13044
<13044=13050,13045
<13045=13048,13046
<13046=13047
<13048=13049
<13050=13051
<13051=13053,13052
<13054=13055
<13055=13067,13066,13056
<13056=13065,13057
<13057=13059,13058
<13059=13060
<13060=13062,13061
<13062=13064,13063
<13068=13069
<13069=13081,13080,13070
<13070=13079,13071
<13071=13073,13072
<13073=13074
<13074=13076,13075
<13076=13078,13077
<13082=13084,13083
<13085=13086
<13086=13093,13087
<13087=13089,13088
<13089=13090
<13090=13092,13091
<13094=13095
<13095=13096
<13096=13101,13100,13097
<13097=13099,13098
<13102=13103
<13103=13112,13111,13104
<13104=13110,13105
<13105=13109,13106
<13106=13108,13107
<13113=13114
<13114=13116,13115
<13116=13118,13117
<13119=13123,13120
<13120=13122,13121
<13123=13125,13124
<13126=13127
<13127=13131,13128
<13128=13130,13129
<13131=13133,13132
<13134=13135
<13135=13136
<13136=13141,13140,13137
<13137=13139,13138
<13142=13143
<13143=13159,13158,13144
<13144=13157,13145
<13145=13156,13146
<13146=13155,13147
<13147=13149,13148
<13149=13151,13150
<13151=13152
<13152=13154,13153
<13160=13162,13161
<13163=13164
<13164=13166,13165
<13167=13168
<13168=13170,13169
<13171=13172
<13172=13174,13173
<13175=13176
<13176=13185,13184,13177
<13177=13183,13178
<13178=13182,13179
<13179=13181,13180
<13186=13187
<13187=13192,13188
<13188=13190,13189
<13190=13191
<13193=13194
<13194=13199,13195
<13195=13197,13196
<13197=13198
<13200=13201
<13201=13203,13202
<13203=13204
<13204=13206,13205
<13207=13208
<13208=13213,13209
<13209=13211,13210
<13211=13212
<13214=13224,13221,13218,13215
<13215=13217,13216
<13218=13220,13219
<13221=13223,13222
<13224=13226,13225
<13260=13263,13262,13261
<13263=13686,13673,13660,13647,13641,13608,13575,13542,13509,13476,13443,13410,13406,13400,13367,13334,13301,13268,13264
<13264=13265
<13265=13267,13266
<13268=13269
<13269=13300,13270
<13270=13299,13271
<13271=13293,13272
<13272=13292,13273
<13273=13286,13274
<13274=13276,13275
<13276=13285,13277
<13277=13279,13278
<13279=13281,13280
<13281=13282
<13282=13284,13283
<13286=13290,13287
<13287=13288
<13288=13289
<13290=13291
<13293=13295,13294
<13295=13296
<13296=13298,13297
<13301=13302
<13302=13333,13303
<13303=13332,13304
<13304=13326,13305
<13305=13325,13306
<13306=13319,13307
<13307=13309,13308
<13309=13318,13310
<13310=13312,13311
<13312=13314,13313
<13314=13315
<13315=13317,13316
<13319=13323,13320
<13320=13321
<13321=13322
<13323=13324
<13326=13328,13327
<13328=13329
<13329=13331,13330
<13334=13335
<13335=13366,13336
<13336=13365,13337
<13337=13359,13338
<13338=13358,13339
<13339=13352,13340
<13340=13342,13341
<13342=13351,13343
<13343=13345,13344
<13345=13347,13346
<13347=13348
<13348=13350,13349
<13352=13356,13353
<13353=13354
<13354=13355
<13356=13357
<13359=13361,13360
<13361=13362
<13362=13364,13363
<13367=13368
<13368=13399,13369
<13369=13398,13370
<13370=13392,13371
<13371=13391,13372
<13372=13385,13373
<13373=13375,13374
<13375=13384,13376
<13376=13378,13377
<13378=13380,13379
<13380=13381
<13381=13383,13382
<13385=13389,13386
<13386=13387
<13387=13388
<13389=13390
<13392=13394,13393
<13394=13395
<13395=13397,13396
<13400=13401
<13401=13405,13402
<13402=13404,13403
<13406=13407
<13407=13409,13408
<13410=13411
<13411=13442,13412
<13412=13441,13413
<13413=13435,13414
<13414=13434,13415
<13415=13428,13416
<13416=13418,13417
<13418=13427,13419
<13419=13421,13420
<13421=13423,13422
<13423=13424
<13424=13426,13425
<13428=13432,13429
<13429=13430
<13430=13431
<13432=13433
<13435=13437,13436
<13437=13438
<13438=13440,13439
<13443=13444
<13444=13475,13445
<13445=13474,13446
<13446=13468,13447
<13447=13467,13448
<13448=13461,13449
<13449=13451,13450
<13451=13460,13452
<13452=13454,13453
<13454=13456,13455
<13456=13457
<13457=13459,13458
<13461=13465,13462
<13462=13463
<13463=13464
<13465=13466
<13468=13470,13469
<13470=13471
<13471=13473,13472
<13476=13477
<13477=13508,13478
<13478=13507,13479
<13479=13501,13480
<13480=13500,13481
<13481=13494,13482
<13482=13484,13483
<13484=13493,13485
<13485=13487,13486
<13487=13489,13488
<13489=13490
<13490=13492,13491
<13494=13498,13495
<13495=13496
<13496=13497
<13498=13499
<13501=13503,13502
<13503=13504
<13504=13506,13505
<13509=13510
<13510=13541,13511
<13511=13540,13512
<13512=13534,13513
<13513=13533,13514
<13514=13527,13515
<13515=13517,13516
<13517=13526,13518
<13518=13520,13519
<13520=13522,13521
<13522=13523
<13523=13525,13524
<13527=13531,13528
<13528=13529
<13529=13530
<13531=13532
<13534=13536,13535
<13536=13537
<13537=13539,13538
<13542=13543
<13543=13574,13544
<13544=13573,13545
<13545=13567,13546
<13546=13566,13547
<13547=13560,13548
<13548=13550,13549
<13550=13559,13551
<13551=13553,13552
<13553=13555,13554
<13555=13556
<13556=13558,13557
<13560=13564,13561
<13561=13562
<13562=13563
<13564=13565
<13567=13569,13568
<13569=13570
<13570=13572,13571
<13575=13576
<13576=13607,13577
<13577=13606,13578
<13578=13600,13579
<13579=13599,13580
<13580=13593,13581
<13581=13583,13582
<13583=13592,13584
<13584=13586,13585
<13586=13588,13587
<13588=13589
<13589=13591,13590
<13593=13597,13594
<13594=13595
<13595=13596
<13597=13598
<13600=13602,13601
<13602=13603
<13603=13605,13604
<13608=13609
<13609=13640,13610
<13610=13639,13611
<13611=13633,13612
<13612=13632,13613
<13613=13626,13614
<13614=13616,13615
<13616=13625,13617
<13617=13619,13618
<13619=13621,13620
<13621=13622
<13622=13624,13623
<13626=13630,13627
<13627=13628
<13628=13629
<13630=13631
<13633=13635,13634
<13635=13636
<13636=13638,13637
<13641=13642
<13642=13646,13643
<13643=13645,13644
<13647=13648
<13648=13659,13649
<13649=13658,13650
<13650=13652,13651
<13652=13654,13653
<13654=13655
<13655=13657,13656
<13660=13661
<13661=13672,13662
<13662=13671,13663
<13663=13665,13664
<13665=13667,13666
<13667=13668
<13668=13670,13669
<13673=13674
<13674=13685,13675
<13675=13684,13676
<13676=13678,13677
<13678=13680,13679
<13680=13681
<13681=13683,13682
<13686=13698,13687
<13687=13697,13696,13688
<13688=13695,13689
<13689=13691,13690
<13691=13692
<13692=13694,13693
<13698=13708,13707,13699
<13699=13706,13700
<13700=13702,13701
<13702=13703
<13703=13705,13704
<13730=13733,13732,13731
<13733=13818,13811,13804,13797,13790,13783,13776,13769,13762,13755,13748,13741,13734
<13734=13735
<13735=13737,13736
<13737=13738
<13738=13740,13739
<13741=13742
<13742=13744,13743
<13744=13745
<13745=13747,13746
<13748=13749
<13749=13751,13750
<13751=13752
<13752=13754,13753
<13755=13756
<13756=13758,13757
<13758=13759
<13759=13761,13760
<13762=13763
<13763=13765,13764
<13765=13766
<13766=13768,13767
<13769=13770
<13770=13772,13771
<13772=13773
<13773=13775,13774
<13776=13777
<13777=13779,13778
<13779=13780
<13780=13782,13781
<13783=13784
<13784=13786,13785
<13786=13787
<13787=13789,13788
<13790=13791
<13791=13793,13792
<13793=13794
<13794=13796,13795
<13797=13798
<13798=13800,13799
<13800=13801
<13801=13803,13802
<13804=13805
<13805=13807,13806
<13807=13808
<13808=13810,13809
<13811=13812
<13812=13814,13813
<13814=13815
<13815=13817,13816
<13818=13819
<13819=13821,13820
<13821=13822
<13822=13824,13823
