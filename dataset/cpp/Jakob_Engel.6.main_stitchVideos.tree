>3	FunctionDef	getFileList (string s , string filter)
>4	ParameterList	string s , string filter
>5	Parameter	 
>6	Identifier	filter
>7	ParameterType	string
>8	Parameter	 
>9	Identifier	s
>10	ParameterType	string
>11	ReturnType	std 
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	Identifier	v
>15	IfStatement	if ( dpdf != NULL )
>16	CompoundStatement	 
>17	WhileStatement	while ( ( epdf = readdir ( dpdf ) ) )
>18	IfStatement	if ( epdf -> d_name [ 0 ] != '.' && ( filter == \"\" || string ( epdf -> d_name ) . find ( filter ) != string 
>19	ExpressionStatement	 
>20	CallExpression	v . push_back ( s + epdf -> d_name )
>21	ArgumentList	s + epdf -> d_name
>22	Argument	s + epdf -> d_name
>23	AdditiveExpression	s + epdf -> d_name
>24	PtrMemberAccess	epdf -> d_name
>25	Identifier	d_name
>26	Identifier	epdf
>27	Identifier	s
>28	Callee	v . push_back
>29	MemberAccess	v . push_back
>30	Identifier	push_back
>31	Identifier	v
>32	Condition	 
>33	AndExpression	epdf -> d_name [ 0 ] != '.' && ( filter == \"\" || string ( epdf -> d_name ) . find ( filter ) != string 
>34	OrExpression	filter == \"\" || string ( epdf -> d_name ) . find ( filter ) != string 
>35	EqualityExpression	string ( epdf -> d_name ) . find ( filter ) != string 
>36	Identifier	string 
>37	CallExpression	string ( epdf -> d_name ) . find ( filter )
>38	ArgumentList	filter
>39	Argument	filter
>40	Identifier	filter
>41	Callee	string ( epdf -> d_name ) . find
>42	MemberAccess	string ( epdf -> d_name ) . find
>43	Identifier	find
>44	CallExpression	string ( epdf -> d_name )
>45	ArgumentList	epdf -> d_name
>46	Argument	epdf -> d_name
>47	PtrMemberAccess	epdf -> d_name
>48	Identifier	d_name
>49	Identifier	epdf
>50	Callee	string
>51	Identifier	string
>52	EqualityExpression	filter == \"\"
>53	PrimaryExpression	\"\"
>54	Identifier	filter
>55	EqualityExpression	epdf -> d_name [ 0 ] != '.'
>56	PrimaryExpression	'.'
>57	ArrayIndexing	epdf -> d_name [ 0 ]
>58	PrimaryExpression	0
>59	PtrMemberAccess	epdf -> d_name
>60	Identifier	d_name
>61	Identifier	epdf
>62	Condition	 
>63	AssignmentExpr	epdf = readdir ( dpdf )
>64	CallExpression	readdir ( dpdf )
>65	ArgumentList	dpdf
>66	Argument	dpdf
>67	Identifier	dpdf
>68	Callee	readdir
>69	Identifier	readdir
>70	Identifier	epdf
>71	Condition	 
>72	EqualityExpression	dpdf != NULL
>73	Identifier	NULL
>74	Identifier	dpdf
>75	ExpressionStatement	 
>76	AssignmentExpr	dpdf = opendir ( s . c_str ( ) )
>77	CallExpression	opendir ( s . c_str ( ) )
>78	ArgumentList	s . c_str ( )
>79	Argument	s . c_str ( )
>80	CallExpression	s . c_str ( )
>81	ArgumentList	 
>82	Callee	s . c_str
>83	MemberAccess	s . c_str
>84	Identifier	c_str
>85	Identifier	s
>86	Callee	opendir
>87	Identifier	opendir
>88	Identifier	dpdf
>89	IdentifierDeclStatement	 
>90	IdentifierDecl	v
>91	Identifier	v
>92	IdentifierDeclType	std 
>93	IdentifierDeclStatement	 
>94	IdentifierDecl	* epdf
>95	Identifier	epdf
>96	IdentifierDeclType	struct dirent *
>97	IdentifierDeclStatement	 
>98	IdentifierDecl	* dpdf
>99	Identifier	dpdf
>100	IdentifierDeclType	DIR *
>101	ExpressionStatement	 
>102	CallExpression	printf ( \"getting files for %s!\n\" , s . c_str ( ) )
>103	ArgumentList	\"getting files for %s!\n\"
>104	Argument	s . c_str ( )
>105	CallExpression	s . c_str ( )
>106	ArgumentList	 
>107	Callee	s . c_str
>108	MemberAccess	s . c_str
>109	Identifier	c_str
>110	Identifier	s
>111	Argument	\"getting files for %s!\n\"
>112	PrimaryExpression	\"getting files for %s!\n\"
>113	Callee	printf
>114	Identifier	printf
>134	FunctionDef	dilate (int argc , char * * argv)
>135	ParameterList	int argc , char * * argv
>136	Parameter	 
>137	Identifier	argv
>138	ParameterType	char * *
>139	Parameter	 
>140	Identifier	argc
>141	ParameterType	int
>142	ReturnType	int
>143	CompoundStatement	 
>144	ReturnStatement	 
>145	PrimaryExpression	0
>146	ExpressionStatement	 
>147	CallExpression	cv 
>148	ArgumentList	bufer
>149	Argument	i2
>150	Identifier	i2
>151	Argument	bufer
>152	Identifier	bufer
>153	Callee	cv 
>154	Identifier	cv 
>155	ExpressionStatement	 
>156	CallExpression	snprintf ( bufer , 1000 , \"%s_dilated.png\" , argv [ 1 ] )
>157	ArgumentList	bufer
>158	Argument	argv [ 1 ]
>159	ArrayIndexing	argv [ 1 ]
>160	PrimaryExpression	1
>161	Identifier	argv
>162	Argument	\"%s_dilated.png\"
>163	PrimaryExpression	\"%s_dilated.png\"
>164	Argument	1000
>165	PrimaryExpression	1000
>166	Argument	bufer
>167	Identifier	bufer
>168	Callee	snprintf
>169	Identifier	snprintf
>170	ExpressionStatement	 
>171	CallExpression	printf ( \"done\n\" )
>172	ArgumentList	\"done\n\"
>173	Argument	\"done\n\"
>174	PrimaryExpression	\"done\n\"
>175	Callee	printf
>176	Identifier	printf
>177	ForStatement	for ( int x = 0 ; x < i . cols ; x ++ )
>178	ForStatement	for ( int y = 0 ; y < i . rows ; y ++ )
>179	CompoundStatement	 
>180	IfStatement	if ( num > 0 )
>181	ElseStatement	else
>182	ExpressionStatement	 
>183	AssignmentExpr	i2 . data [ 3 * px + 0 ] = i2 . data [ 3 * px + 1 ] = i2 . data [ 3 * px + 2 ] = 255
>184	AssignmentExpr	i2 . data [ 3 * px + 1 ] = i2 . data [ 3 * px + 2 ] = 255
>185	AssignmentExpr	i2 . data [ 3 * px + 2 ] = 255
>186	PrimaryExpression	255
>187	ArrayIndexing	i2 . data [ 3 * px + 2 ]
>188	AdditiveExpression	3 * px + 2
>189	PrimaryExpression	2
>190	MultiplicativeExpression	3 * px
>191	Identifier	px
>192	PrimaryExpression	3
>193	MemberAccess	i2 . data
>194	Identifier	data
>195	Identifier	i2
>196	ArrayIndexing	i2 . data [ 3 * px + 1 ]
>197	AdditiveExpression	3 * px + 1
>198	PrimaryExpression	1
>199	MultiplicativeExpression	3 * px
>200	Identifier	px
>201	PrimaryExpression	3
>202	MemberAccess	i2 . data
>203	Identifier	data
>204	Identifier	i2
>205	ArrayIndexing	i2 . data [ 3 * px + 0 ]
>206	AdditiveExpression	3 * px + 0
>207	PrimaryExpression	0
>208	MultiplicativeExpression	3 * px
>209	Identifier	px
>210	PrimaryExpression	3
>211	MemberAccess	i2 . data
>212	Identifier	data
>213	Identifier	i2
>214	ExpressionStatement	 
>215	AssignmentExpr	i2 . data [ 3 * px + 0 ] = i2 . data [ 3 * px + 1 ] = i2 . data [ 3 * px + 2 ] = sum / num
>216	AssignmentExpr	i2 . data [ 3 * px + 1 ] = i2 . data [ 3 * px + 2 ] = sum / num
>217	AssignmentExpr	i2 . data [ 3 * px + 2 ] = sum / num
>218	MultiplicativeExpression	sum / num
>219	Identifier	num
>220	Identifier	sum
>221	ArrayIndexing	i2 . data [ 3 * px + 2 ]
>222	AdditiveExpression	3 * px + 2
>223	PrimaryExpression	2
>224	MultiplicativeExpression	3 * px
>225	Identifier	px
>226	PrimaryExpression	3
>227	MemberAccess	i2 . data
>228	Identifier	data
>229	Identifier	i2
>230	ArrayIndexing	i2 . data [ 3 * px + 1 ]
>231	AdditiveExpression	3 * px + 1
>232	PrimaryExpression	1
>233	MultiplicativeExpression	3 * px
>234	Identifier	px
>235	PrimaryExpression	3
>236	MemberAccess	i2 . data
>237	Identifier	data
>238	Identifier	i2
>239	ArrayIndexing	i2 . data [ 3 * px + 0 ]
>240	AdditiveExpression	3 * px + 0
>241	PrimaryExpression	0
>242	MultiplicativeExpression	3 * px
>243	Identifier	px
>244	PrimaryExpression	3
>245	MemberAccess	i2 . data
>246	Identifier	data
>247	Identifier	i2
>248	Condition	 
>249	RelationalExpression	num > 0
>250	PrimaryExpression	0
>251	Identifier	num
>252	ForStatement	for ( int ax = - 1 ; ax <= 1 ; ax ++ )
>253	ForStatement	for ( int ay = - 1 ; ay <= 1 ; ay ++ )
>254	CompoundStatement	 
>255	ExpressionStatement	 
>256	AssignmentExpr	sum += i . data [ 3 * apx + 0 ]
>257	ArrayIndexing	i . data [ 3 * apx + 0 ]
>258	AdditiveExpression	3 * apx + 0
>259	PrimaryExpression	0
>260	MultiplicativeExpression	3 * apx
>261	Identifier	apx
>262	PrimaryExpression	3
>263	MemberAccess	i . data
>264	Identifier	data
>265	Identifier	i
>266	Identifier	sum
>267	ExpressionStatement	 
>268	IncDecOp	num ++
>269	IncDec	++
>270	Identifier	num
>271	IfStatement	if ( i . data [ 3 * apx + 0 ] == 51 || i . data [ 3 * apx + 0 ] != i . data [ 3 * apx + 1 ] || i . data [ 3 * apx + \
>272	ContinueStatement	 
>273	Condition	 
>274	OrExpression	i . data [ 3 * apx + 0 ] == 51 || i . data [ 3 * apx + 0 ] != i . data [ 3 * apx + 1 ] || i . data [ \
>275	OrExpression	i . data [ 3 * apx + 0 ] != i . data [ 3 * apx + 1 ] || i . data [ 3 * apx + 0 ] != i . data [ 3 * apx + \
>276	EqualityExpression	i . data [ 3 * apx + 0 ] != i . data [ 3 * apx + 2 ]
>277	ArrayIndexing	i . data [ 3 * apx + 2 ]
>278	AdditiveExpression	3 * apx + 2
>279	PrimaryExpression	2
>280	MultiplicativeExpression	3 * apx
>281	Identifier	apx
>282	PrimaryExpression	3
>283	MemberAccess	i . data
>284	Identifier	data
>285	Identifier	i
>286	ArrayIndexing	i . data [ 3 * apx + 0 ]
>287	AdditiveExpression	3 * apx + 0
>288	PrimaryExpression	0
>289	MultiplicativeExpression	3 * apx
>290	Identifier	apx
>291	PrimaryExpression	3
>292	MemberAccess	i . data
>293	Identifier	data
>294	Identifier	i
>295	EqualityExpression	i . data [ 3 * apx + 0 ] != i . data [ 3 * apx + 1 ]
>296	ArrayIndexing	i . data [ 3 * apx + 1 ]
>297	AdditiveExpression	3 * apx + 1
>298	PrimaryExpression	1
>299	MultiplicativeExpression	3 * apx
>300	Identifier	apx
>301	PrimaryExpression	3
>302	MemberAccess	i . data
>303	Identifier	data
>304	Identifier	i
>305	ArrayIndexing	i . data [ 3 * apx + 0 ]
>306	AdditiveExpression	3 * apx + 0
>307	PrimaryExpression	0
>308	MultiplicativeExpression	3 * apx
>309	Identifier	apx
>310	PrimaryExpression	3
>311	MemberAccess	i . data
>312	Identifier	data
>313	Identifier	i
>314	EqualityExpression	i . data [ 3 * apx + 0 ] == 51
>315	PrimaryExpression	51
>316	ArrayIndexing	i . data [ 3 * apx + 0 ]
>317	AdditiveExpression	3 * apx + 0
>318	PrimaryExpression	0
>319	MultiplicativeExpression	3 * apx
>320	Identifier	apx
>321	PrimaryExpression	3
>322	MemberAccess	i . data
>323	Identifier	data
>324	Identifier	i
>325	IdentifierDeclStatement	 
>326	IdentifierDecl	apx = ( ax + x ) + ( y + ay ) * i . cols
>327	AssignmentExpr	apx = ( ax + x ) + ( y + ay ) * i . cols
>328	AdditiveExpression	( ax + x ) + ( y + ay ) * i . cols
>329	MultiplicativeExpression	( y + ay ) * i . cols
>330	MemberAccess	i . cols
>331	Identifier	cols
>332	Identifier	i
>333	AdditiveExpression	y + ay
>334	Identifier	ay
>335	Identifier	y
>336	AdditiveExpression	ax + x
>337	Identifier	x
>338	Identifier	ax
>339	Identifier	apx
>340	Identifier	apx
>341	IdentifierDeclType	int
>342	IncDecOp	 
>343	IncDec	++
>344	Identifier	ay
>345	Condition	 
>346	RelationalExpression	ay <= 1
>347	PrimaryExpression	1
>348	Identifier	ay
>349	ForInit	 
>350	IdentifierDeclStatement	int ay = - 1 ;
>351	IdentifierDecl	ay = - 1
>352	AssignmentExpr	ay = - 1
>353	UnaryOp	- 1
>354	PrimaryExpression	1
>355	UnaryOperator	-
>356	Identifier	ay
>357	Identifier	ay
>358	IdentifierDeclType	int
>359	IncDecOp	 
>360	IncDec	++
>361	Identifier	ax
>362	Condition	 
>363	RelationalExpression	ax <= 1
>364	PrimaryExpression	1
>365	Identifier	ax
>366	ForInit	 
>367	IdentifierDeclStatement	int ax = - 1 ;
>368	IdentifierDecl	ax = - 1
>369	AssignmentExpr	ax = - 1
>370	UnaryOp	- 1
>371	PrimaryExpression	1
>372	UnaryOperator	-
>373	Identifier	ax
>374	Identifier	ax
>375	IdentifierDeclType	int
>376	IdentifierDeclStatement	 
>377	IdentifierDecl	sum = 0
>378	AssignmentExpr	sum = 0
>379	PrimaryExpression	0
>380	Identifier	sum
>381	Identifier	sum
>382	IdentifierDeclType	int
>383	IdentifierDeclStatement	 
>384	IdentifierDecl	num = 0
>385	AssignmentExpr	num = 0
>386	PrimaryExpression	0
>387	Identifier	num
>388	Identifier	num
>389	IdentifierDeclType	int
>390	IfStatement	if ( i . data [ 3 * px + 0 ] != 255 || i . data [ 3 * px + 1 ] != 255 || i . data [ 3 * px + 2 ] != 255 )
>391	ContinueStatement	 
>392	Condition	 
>393	OrExpression	i . data [ 3 * px + 0 ] != 255 || i . data [ 3 * px + 1 ] != 255 || i . data [ 3 * px + 2 ] != 255
>394	OrExpression	i . data [ 3 * px + 1 ] != 255 || i . data [ 3 * px + 2 ] != 255
>395	EqualityExpression	i . data [ 3 * px + 2 ] != 255
>396	PrimaryExpression	255
>397	ArrayIndexing	i . data [ 3 * px + 2 ]
>398	AdditiveExpression	3 * px + 2
>399	PrimaryExpression	2
>400	MultiplicativeExpression	3 * px
>401	Identifier	px
>402	PrimaryExpression	3
>403	MemberAccess	i . data
>404	Identifier	data
>405	Identifier	i
>406	EqualityExpression	i . data [ 3 * px + 1 ] != 255
>407	PrimaryExpression	255
>408	ArrayIndexing	i . data [ 3 * px + 1 ]
>409	AdditiveExpression	3 * px + 1
>410	PrimaryExpression	1
>411	MultiplicativeExpression	3 * px
>412	Identifier	px
>413	PrimaryExpression	3
>414	MemberAccess	i . data
>415	Identifier	data
>416	Identifier	i
>417	EqualityExpression	i . data [ 3 * px + 0 ] != 255
>418	PrimaryExpression	255
>419	ArrayIndexing	i . data [ 3 * px + 0 ]
>420	AdditiveExpression	3 * px + 0
>421	PrimaryExpression	0
>422	MultiplicativeExpression	3 * px
>423	Identifier	px
>424	PrimaryExpression	3
>425	MemberAccess	i . data
>426	Identifier	data
>427	Identifier	i
>428	IfStatement	if ( x == 0 || y == 0 || x == i . cols - 1 || y == i . rows - 1 )
>429	CompoundStatement	 
>430	ContinueStatement	 
>431	ExpressionStatement	 
>432	AssignmentExpr	i2 . data [ 3 * px + 0 ] = i2 . data [ 3 * px + 1 ] = i2 . data [ 3 * px + 2 ] = 255
>433	AssignmentExpr	i2 . data [ 3 * px + 1 ] = i2 . data [ 3 * px + 2 ] = 255
>434	AssignmentExpr	i2 . data [ 3 * px + 2 ] = 255
>435	PrimaryExpression	255
>436	ArrayIndexing	i2 . data [ 3 * px + 2 ]
>437	AdditiveExpression	3 * px + 2
>438	PrimaryExpression	2
>439	MultiplicativeExpression	3 * px
>440	Identifier	px
>441	PrimaryExpression	3
>442	MemberAccess	i2 . data
>443	Identifier	data
>444	Identifier	i2
>445	ArrayIndexing	i2 . data [ 3 * px + 1 ]
>446	AdditiveExpression	3 * px + 1
>447	PrimaryExpression	1
>448	MultiplicativeExpression	3 * px
>449	Identifier	px
>450	PrimaryExpression	3
>451	MemberAccess	i2 . data
>452	Identifier	data
>453	Identifier	i2
>454	ArrayIndexing	i2 . data [ 3 * px + 0 ]
>455	AdditiveExpression	3 * px + 0
>456	PrimaryExpression	0
>457	MultiplicativeExpression	3 * px
>458	Identifier	px
>459	PrimaryExpression	3
>460	MemberAccess	i2 . data
>461	Identifier	data
>462	Identifier	i2
>463	Condition	 
>464	OrExpression	x == 0 || y == 0 || x == i . cols - 1 || y == i . rows - 1
>465	OrExpression	y == 0 || x == i . cols - 1 || y == i . rows - 1
>466	OrExpression	x == i . cols - 1 || y == i . rows - 1
>467	EqualityExpression	y == i . rows - 1
>468	AdditiveExpression	i . rows - 1
>469	PrimaryExpression	1
>470	MemberAccess	i . rows
>471	Identifier	rows
>472	Identifier	i
>473	Identifier	y
>474	EqualityExpression	x == i . cols - 1
>475	AdditiveExpression	i . cols - 1
>476	PrimaryExpression	1
>477	MemberAccess	i . cols
>478	Identifier	cols
>479	Identifier	i
>480	Identifier	x
>481	EqualityExpression	y == 0
>482	PrimaryExpression	0
>483	Identifier	y
>484	EqualityExpression	x == 0
>485	PrimaryExpression	0
>486	Identifier	x
>487	IdentifierDeclStatement	 
>488	IdentifierDecl	px = x + y * i . cols
>489	AssignmentExpr	px = x + y * i . cols
>490	AdditiveExpression	x + y * i . cols
>491	MultiplicativeExpression	y * i . cols
>492	MemberAccess	i . cols
>493	Identifier	cols
>494	Identifier	i
>495	Identifier	y
>496	Identifier	x
>497	Identifier	px
>498	Identifier	px
>499	IdentifierDeclType	int
>500	IncDecOp	 
>501	IncDec	++
>502	Identifier	y
>503	Condition	 
>504	RelationalExpression	y < i . rows
>505	MemberAccess	i . rows
>506	Identifier	rows
>507	Identifier	i
>508	Identifier	y
>509	ForInit	 
>510	IdentifierDeclStatement	int y = 0 ;
>511	IdentifierDecl	y = 0
>512	AssignmentExpr	y = 0
>513	PrimaryExpression	0
>514	Identifier	y
>515	Identifier	y
>516	IdentifierDeclType	int
>517	IncDecOp	 
>518	IncDec	++
>519	Identifier	x
>520	Condition	 
>521	RelationalExpression	x < i . cols
>522	MemberAccess	i . cols
>523	Identifier	cols
>524	Identifier	i
>525	Identifier	x
>526	ForInit	 
>527	IdentifierDeclStatement	int x = 0 ;
>528	IdentifierDecl	x = 0
>529	AssignmentExpr	x = 0
>530	PrimaryExpression	0
>531	Identifier	x
>532	Identifier	x
>533	IdentifierDeclType	int
>534	ExpressionStatement	 
>535	CallExpression	printf ( \"loaded.\n\" )
>536	ArgumentList	\"loaded.\n\"
>537	Argument	\"loaded.\n\"
>538	PrimaryExpression	\"loaded.\n\"
>539	Callee	printf
>540	Identifier	printf
>541	IdentifierDeclStatement	 
>542	IdentifierDecl	i2 = cv 
>543	AssignmentExpr	i2 = cv 
>544	CallExpression	cv 
>545	ArgumentList	bufer
>546	Argument	bufer
>547	Identifier	bufer
>548	Callee	cv 
>549	Identifier	cv 
>550	Identifier	i2
>551	Identifier	i2
>552	IdentifierDeclType	cv 
>553	IdentifierDeclStatement	 
>554	IdentifierDecl	i = cv 
>555	AssignmentExpr	i = cv 
>556	CallExpression	cv 
>557	ArgumentList	bufer
>558	Argument	bufer
>559	Identifier	bufer
>560	Callee	cv 
>561	Identifier	cv 
>562	Identifier	i
>563	Identifier	i
>564	IdentifierDeclType	cv 
>565	ExpressionStatement	 
>566	CallExpression	snprintf ( bufer , 1000 , \"%s.png\" , argv [ 1 ] )
>567	ArgumentList	bufer
>568	Argument	argv [ 1 ]
>569	ArrayIndexing	argv [ 1 ]
>570	PrimaryExpression	1
>571	Identifier	argv
>572	Argument	\"%s.png\"
>573	PrimaryExpression	\"%s.png\"
>574	Argument	1000
>575	PrimaryExpression	1000
>576	Argument	bufer
>577	Identifier	bufer
>578	Callee	snprintf
>579	Identifier	snprintf
>580	IdentifierDeclStatement	 
>581	IdentifierDecl	bufer [ 1000 ]
>582	PrimaryExpression	1000
>583	Identifier	bufer
>584	IdentifierDeclType	char [ 1000 ]
>613	FunctionDef	rgb2bgr (cv 
>614	ParameterList	cv 
>615	Parameter	 
>616	Identifier	image
>617	ParameterType	cv 
>618	ReturnType	void
>619	CompoundStatement	 
>620	ForStatement	for ( int x = 0 ; x < image -> cols ; x ++ )
>621	ForStatement	for ( int y = 0 ; y < image -> rows ; y ++ )
>622	ExpressionStatement	 
>623	AssignmentExpr	image -> at < cv 
>624	CallExpression	cv 
>625	ArgumentList	image -> at < cv 
>626	Argument	image -> at < cv 
>627	RelationalExpression	image -> at < cv 
>628	RelationalExpression	cv 
>629	ArrayIndexing	( y , x ) [ 0 ]
>630	PrimaryExpression	0
>631	Expression	y , x
>632	Identifier	x
>633	Identifier	y
>634	Identifier	cv 
>635	PtrMemberAccess	image -> at
>636	Identifier	at
>637	Identifier	image
>638	Argument	image -> at < cv 
>639	RelationalExpression	image -> at < cv 
>640	RelationalExpression	cv 
>641	ArrayIndexing	( y , x ) [ 1 ]
>642	PrimaryExpression	1
>643	Expression	y , x
>644	Identifier	x
>645	Identifier	y
>646	Identifier	cv 
>647	PtrMemberAccess	image -> at
>648	Identifier	at
>649	Identifier	image
>650	Argument	image -> at < cv 
>651	RelationalExpression	image -> at < cv 
>652	RelationalExpression	cv 
>653	ArrayIndexing	( y , x ) [ 2 ]
>654	PrimaryExpression	2
>655	Expression	y , x
>656	Identifier	x
>657	Identifier	y
>658	Identifier	cv 
>659	PtrMemberAccess	image -> at
>660	Identifier	at
>661	Identifier	image
>662	Callee	cv 
>663	Identifier	cv 
>664	RelationalExpression	image -> at < cv 
>665	RelationalExpression	cv 
>666	Expression	y , x
>667	Identifier	x
>668	Identifier	y
>669	Identifier	cv 
>670	PtrMemberAccess	image -> at
>671	Identifier	at
>672	Identifier	image
>673	IncDecOp	 
>674	IncDec	++
>675	Identifier	y
>676	Condition	 
>677	RelationalExpression	y < image -> rows
>678	PtrMemberAccess	image -> rows
>679	Identifier	rows
>680	Identifier	image
>681	Identifier	y
>682	ForInit	 
>683	IdentifierDeclStatement	int y = 0 ;
>684	IdentifierDecl	y = 0
>685	AssignmentExpr	y = 0
>686	PrimaryExpression	0
>687	Identifier	y
>688	Identifier	y
>689	IdentifierDeclType	int
>690	IncDecOp	 
>691	IncDec	++
>692	Identifier	x
>693	Condition	 
>694	RelationalExpression	x < image -> cols
>695	PtrMemberAccess	image -> cols
>696	Identifier	cols
>697	Identifier	image
>698	Identifier	x
>699	ForInit	 
>700	IdentifierDeclStatement	int x = 0 ;
>701	IdentifierDecl	x = 0
>702	AssignmentExpr	x = 0
>703	PrimaryExpression	0
>704	Identifier	x
>705	Identifier	x
>706	IdentifierDeclType	int
>707	IdentifierDeclStatement	 
>708	IdentifierDecl	imageOut = image -> clone ( )
>709	AssignmentExpr	imageOut = image -> clone ( )
>710	CallExpression	image -> clone ( )
>711	ArgumentList	 
>712	Callee	image -> clone
>713	PtrMemberAccess	image -> clone
>714	Identifier	clone
>715	Identifier	image
>716	Identifier	imageOut
>717	Identifier	imageOut
>718	IdentifierDeclType	cv 
>734	FunctionDef	invertColor (int argc , char * * argv)
>735	ParameterList	int argc , char * * argv
>736	Parameter	 
>737	Identifier	argv
>738	ParameterType	char * *
>739	Parameter	 
>740	Identifier	argc
>741	ParameterType	int
>742	ReturnType	int
>743	CompoundStatement	 
>744	ReturnStatement	 
>745	PrimaryExpression	0
>746	ExpressionStatement	 
>747	CallExpression	cv 
>748	ArgumentList	argv [ 1 ]
>749	Argument	image
>750	Identifier	image
>751	Argument	argv [ 1 ]
>752	ArrayIndexing	argv [ 1 ]
>753	PrimaryExpression	1
>754	Identifier	argv
>755	Callee	cv 
>756	Identifier	cv 
>757	ExpressionStatement	 
>758	CallExpression	cv 
>759	ArgumentList	0
>760	Argument	0
>761	PrimaryExpression	0
>762	Callee	cv 
>763	Identifier	cv 
>764	ExpressionStatement	 
>765	CallExpression	cv 
>766	ArgumentList	\"image\"
>767	Argument	image
>768	Identifier	image
>769	Argument	\"image\"
>770	PrimaryExpression	\"image\"
>771	Callee	cv 
>772	Identifier	cv 
>773	ExpressionStatement	 
>774	CallExpression	rgb2bgr ( & image )
>775	ArgumentList	& image
>776	Argument	& image
>777	UnaryOp	& image
>778	Identifier	image
>779	UnaryOperator	&
>780	Callee	rgb2bgr
>781	Identifier	rgb2bgr
>782	ExpressionStatement	 
>783	CallExpression	cv 
>784	ArgumentList	0
>785	Argument	0
>786	PrimaryExpression	0
>787	Callee	cv 
>788	Identifier	cv 
>789	ExpressionStatement	 
>790	CallExpression	cv 
>791	ArgumentList	\"image\"
>792	Argument	image
>793	Identifier	image
>794	Argument	\"image\"
>795	PrimaryExpression	\"image\"
>796	Callee	cv 
>797	Identifier	cv 
>798	IdentifierDeclStatement	 
>799	IdentifierDecl	image = cv 
>800	AssignmentExpr	image = cv 
>801	CallExpression	cv 
>802	ArgumentList	argv [ 1 ]
>803	Argument	argv [ 1 ]
>804	ArrayIndexing	argv [ 1 ]
>805	PrimaryExpression	1
>806	Identifier	argv
>807	Callee	cv 
>808	Identifier	cv 
>809	Identifier	image
>810	Identifier	image
>811	IdentifierDeclType	cv 
>845	FunctionDef	inlayVid3 (int argc , char * * argv)
>846	ParameterList	int argc , char * * argv
>847	Parameter	 
>848	Identifier	argv
>849	ParameterType	char * *
>850	Parameter	 
>851	Identifier	argc
>852	ParameterType	int
>853	ReturnType	int
>854	CompoundStatement	 
>855	ReturnStatement	 
>856	PrimaryExpression	0
>857	ForStatement	for ( size_t i = 0 ; i < pointcloudFiles . size ( ) ; ++ i )
>858	CompoundStatement	 
>859	ExpressionStatement	 
>860	IncDecOp	c ++
>861	IncDec	++
>862	Identifier	c
>863	ExpressionStatement	 
>864	CallExpression	cv 
>865	ArgumentList	10
>866	Argument	10
>867	PrimaryExpression	10
>868	Callee	cv 
>869	Identifier	cv 
>870	ExpressionStatement	 
>871	CallExpression	cv 
>872	ArgumentList	\"out\"
>873	Argument	p
>874	Identifier	p
>875	Argument	\"out\"
>876	PrimaryExpression	\"out\"
>877	Callee	cv 
>878	Identifier	cv 
>879	ExpressionStatement	 
>880	CallExpression	cv 
>881	ArgumentList	buf
>882	Argument	p
>883	Identifier	p
>884	Argument	buf
>885	Identifier	buf
>886	Callee	cv 
>887	Identifier	cv 
>888	ExpressionStatement	 
>889	CallExpression	snprintf ( buf , 1000 , \"save_output_age/img%03d.png\" , c )
>890	ArgumentList	buf
>891	Argument	c
>892	Identifier	c
>893	Argument	\"save_output_age/img%03d.png\"
>894	PrimaryExpression	\"save_output_age/img%03d.png\"
>895	Argument	1000
>896	PrimaryExpression	1000
>897	Argument	buf
>898	Identifier	buf
>899	Callee	snprintf
>900	Identifier	snprintf
>901	ExpressionStatement	 
>902	CallExpression	osAge . copyTo ( p_roi_bot )
>903	ArgumentList	p_roi_bot
>904	Argument	p_roi_bot
>905	Identifier	p_roi_bot
>906	Callee	osAge . copyTo
>907	MemberAccess	osAge . copyTo
>908	Identifier	copyTo
>909	Identifier	osAge
>910	ExpressionStatement	 
>911	CallExpression	cv 
>912	ArgumentList	buf
>913	Argument	p
>914	Identifier	p
>915	Argument	buf
>916	Identifier	buf
>917	Callee	cv 
>918	Identifier	cv 
>919	ExpressionStatement	 
>920	CallExpression	snprintf ( buf , 1000 , \"save_output_var/img%03d.png\" , c )
>921	ArgumentList	buf
>922	Argument	c
>923	Identifier	c
>924	Argument	\"save_output_var/img%03d.png\"
>925	PrimaryExpression	\"save_output_var/img%03d.png\"
>926	Argument	1000
>927	PrimaryExpression	1000
>928	Argument	buf
>929	Identifier	buf
>930	Callee	snprintf
>931	Identifier	snprintf
>932	ExpressionStatement	 
>933	CallExpression	osVar . copyTo ( p_roi_bot )
>934	ArgumentList	p_roi_bot
>935	Argument	p_roi_bot
>936	Identifier	p_roi_bot
>937	Callee	osVar . copyTo
>938	MemberAccess	osVar . copyTo
>939	Identifier	copyTo
>940	Identifier	osVar
>941	ExpressionStatement	 
>942	CallExpression	cv 
>943	ArgumentList	buf
>944	Argument	p
>945	Identifier	p
>946	Argument	buf
>947	Identifier	buf
>948	Callee	cv 
>949	Identifier	cv 
>950	ExpressionStatement	 
>951	CallExpression	snprintf ( buf , 1000 , \"save_output_idepth/img%03d.png\" , c )
>952	ArgumentList	buf
>953	Argument	c
>954	Identifier	c
>955	Argument	\"save_output_idepth/img%03d.png\"
>956	PrimaryExpression	\"save_output_idepth/img%03d.png\"
>957	Argument	1000
>958	PrimaryExpression	1000
>959	Argument	buf
>960	Identifier	buf
>961	Callee	snprintf
>962	Identifier	snprintf
>963	ExpressionStatement	 
>964	CallExpression	osIdepth . copyTo ( p_roi_mid )
>965	ArgumentList	p_roi_mid
>966	Argument	p_roi_mid
>967	Identifier	p_roi_mid
>968	Callee	osIdepth . copyTo
>969	MemberAccess	osIdepth . copyTo
>970	Identifier	copyTo
>971	Identifier	osIdepth
>972	ExpressionStatement	 
>973	CallExpression	osOrg . copyTo ( p_roi_top )
>974	ArgumentList	p_roi_top
>975	Argument	p_roi_top
>976	Identifier	p_roi_top
>977	Callee	osOrg . copyTo
>978	MemberAccess	osOrg . copyTo
>979	Identifier	copyTo
>980	Identifier	osOrg
>981	ExpressionStatement	 
>982	CallExpression	cv 
>983	ArgumentList	oAge
>984	Argument	cv 
>985	CallExpression	cv 
>986	ArgumentList	oswidth
>987	Argument	osheight
>988	Identifier	osheight
>989	Argument	oswidth
>990	Identifier	oswidth
>991	Callee	cv 
>992	Identifier	cv 
>993	Argument	osAge
>994	Identifier	osAge
>995	Argument	oAge
>996	Identifier	oAge
>997	Callee	cv 
>998	Identifier	cv 
>999	IdentifierDeclStatement	 
>1000	IdentifierDecl	osAge = cv 
>1001	AssignmentExpr	osAge = cv 
>1002	CallExpression	cv 
>1003	ArgumentList	cv 
>1004	Argument	CV_8UC3
>1005	Identifier	CV_8UC3
>1006	Argument	cv 
>1007	CallExpression	cv 
>1008	ArgumentList	oswidth
>1009	Argument	osheight
>1010	Identifier	osheight
>1011	Argument	oswidth
>1012	Identifier	oswidth
>1013	Callee	cv 
>1014	Identifier	cv 
>1015	Callee	cv 
>1016	Identifier	cv 
>1017	Identifier	osAge
>1018	Identifier	osAge
>1019	IdentifierDeclType	cv 
>1020	ExpressionStatement	 
>1021	CallExpression	cv 
>1022	ArgumentList	oOrg
>1023	Argument	cv 
>1024	CallExpression	cv 
>1025	ArgumentList	oswidth
>1026	Argument	osheight
>1027	Identifier	osheight
>1028	Argument	oswidth
>1029	Identifier	oswidth
>1030	Callee	cv 
>1031	Identifier	cv 
>1032	Argument	osOrg
>1033	Identifier	osOrg
>1034	Argument	oOrg
>1035	Identifier	oOrg
>1036	Callee	cv 
>1037	Identifier	cv 
>1038	IdentifierDeclStatement	 
>1039	IdentifierDecl	osOrg = cv 
>1040	AssignmentExpr	osOrg = cv 
>1041	CallExpression	cv 
>1042	ArgumentList	cv 
>1043	Argument	CV_8UC3
>1044	Identifier	CV_8UC3
>1045	Argument	cv 
>1046	CallExpression	cv 
>1047	ArgumentList	oswidth
>1048	Argument	osheight
>1049	Identifier	osheight
>1050	Argument	oswidth
>1051	Identifier	oswidth
>1052	Callee	cv 
>1053	Identifier	cv 
>1054	Callee	cv 
>1055	Identifier	cv 
>1056	Identifier	osOrg
>1057	Identifier	osOrg
>1058	IdentifierDeclType	cv 
>1059	ExpressionStatement	 
>1060	CallExpression	cv 
>1061	ArgumentList	oVar
>1062	Argument	cv 
>1063	CallExpression	cv 
>1064	ArgumentList	oswidth
>1065	Argument	osheight
>1066	Identifier	osheight
>1067	Argument	oswidth
>1068	Identifier	oswidth
>1069	Callee	cv 
>1070	Identifier	cv 
>1071	Argument	osVar
>1072	Identifier	osVar
>1073	Argument	oVar
>1074	Identifier	oVar
>1075	Callee	cv 
>1076	Identifier	cv 
>1077	IdentifierDeclStatement	 
>1078	IdentifierDecl	osVar = cv 
>1079	AssignmentExpr	osVar = cv 
>1080	CallExpression	cv 
>1081	ArgumentList	cv 
>1082	Argument	CV_8UC3
>1083	Identifier	CV_8UC3
>1084	Argument	cv 
>1085	CallExpression	cv 
>1086	ArgumentList	oswidth
>1087	Argument	osheight
>1088	Identifier	osheight
>1089	Argument	oswidth
>1090	Identifier	oswidth
>1091	Callee	cv 
>1092	Identifier	cv 
>1093	Callee	cv 
>1094	Identifier	cv 
>1095	Identifier	osVar
>1096	Identifier	osVar
>1097	IdentifierDeclType	cv 
>1098	ExpressionStatement	 
>1099	CallExpression	cv 
>1100	ArgumentList	oIdepth
>1101	Argument	cv 
>1102	CallExpression	cv 
>1103	ArgumentList	oswidth
>1104	Argument	osheight
>1105	Identifier	osheight
>1106	Argument	oswidth
>1107	Identifier	oswidth
>1108	Callee	cv 
>1109	Identifier	cv 
>1110	Argument	osIdepth
>1111	Identifier	osIdepth
>1112	Argument	oIdepth
>1113	Identifier	oIdepth
>1114	Callee	cv 
>1115	Identifier	cv 
>1116	IdentifierDeclStatement	 
>1117	IdentifierDecl	osIdepth = cv 
>1118	AssignmentExpr	osIdepth = cv 
>1119	CallExpression	cv 
>1120	ArgumentList	cv 
>1121	Argument	CV_8UC3
>1122	Identifier	CV_8UC3
>1123	Argument	cv 
>1124	CallExpression	cv 
>1125	ArgumentList	oswidth
>1126	Argument	osheight
>1127	Identifier	osheight
>1128	Argument	oswidth
>1129	Identifier	oswidth
>1130	Callee	cv 
>1131	Identifier	cv 
>1132	Callee	cv 
>1133	Identifier	cv 
>1134	Identifier	osIdepth
>1135	Identifier	osIdepth
>1136	IdentifierDeclType	cv 
>1137	IdentifierDeclStatement	 
>1138	IdentifierDecl	p_roi_bot = p ( cv 
>1139	AssignmentExpr	p_roi_bot = p ( cv 
>1140	CallExpression	p ( cv 
>1141	ArgumentList	cv 
>1142	Argument	cv 
>1143	CallExpression	cv 
>1144	ArgumentList	5
>1145	Argument	osheight
>1146	Identifier	osheight
>1147	Argument	oswidth
>1148	Identifier	oswidth
>1149	Argument	16 + 2 * osheight
>1150	AdditiveExpression	16 + 2 * osheight
>1151	MultiplicativeExpression	2 * osheight
>1152	Identifier	osheight
>1153	PrimaryExpression	2
>1154	PrimaryExpression	16
>1155	Argument	5
>1156	PrimaryExpression	5
>1157	Callee	cv 
>1158	Identifier	cv 
>1159	Callee	p
>1160	Identifier	p
>1161	Identifier	p_roi_bot
>1162	Identifier	p_roi_bot
>1163	IdentifierDeclType	cv 
>1164	IdentifierDeclStatement	 
>1165	IdentifierDecl	p_roi_mid = p ( cv 
>1166	AssignmentExpr	p_roi_mid = p ( cv 
>1167	CallExpression	p ( cv 
>1168	ArgumentList	cv 
>1169	Argument	cv 
>1170	CallExpression	cv 
>1171	ArgumentList	5
>1172	Argument	osheight
>1173	Identifier	osheight
>1174	Argument	oswidth
>1175	Identifier	oswidth
>1176	Argument	11 + osheight
>1177	AdditiveExpression	11 + osheight
>1178	Identifier	osheight
>1179	PrimaryExpression	11
>1180	Argument	5
>1181	PrimaryExpression	5
>1182	Callee	cv 
>1183	Identifier	cv 
>1184	Callee	p
>1185	Identifier	p
>1186	Identifier	p_roi_mid
>1187	Identifier	p_roi_mid
>1188	IdentifierDeclType	cv 
>1189	IdentifierDeclStatement	 
>1190	IdentifierDecl	p_roi_top = p ( cv 
>1191	AssignmentExpr	p_roi_top = p ( cv 
>1192	CallExpression	p ( cv 
>1193	ArgumentList	cv 
>1194	Argument	cv 
>1195	CallExpression	cv 
>1196	ArgumentList	5
>1197	Argument	osheight
>1198	Identifier	osheight
>1199	Argument	oswidth
>1200	Identifier	oswidth
>1201	Argument	5
>1202	PrimaryExpression	5
>1203	Argument	5
>1204	PrimaryExpression	5
>1205	Callee	cv 
>1206	Identifier	cv 
>1207	Callee	p
>1208	Identifier	p
>1209	Identifier	p_roi_top
>1210	Identifier	p_roi_top
>1211	IdentifierDeclType	cv 
>1212	IdentifierDeclStatement	 
>1213	IdentifierDecl	oswidth = 311
>1214	AssignmentExpr	oswidth = 311
>1215	PrimaryExpression	311
>1216	Identifier	oswidth
>1217	Identifier	oswidth
>1218	IdentifierDeclType	int
>1219	IdentifierDeclStatement	 
>1220	IdentifierDecl	osheight = 233
>1221	AssignmentExpr	osheight = 233
>1222	PrimaryExpression	233
>1223	Identifier	osheight
>1224	Identifier	osheight
>1225	IdentifierDeclType	int
>1226	IdentifierDeclStatement	 
>1227	IdentifierDecl	p_roi_bot2 = p ( cv 
>1228	AssignmentExpr	p_roi_bot2 = p ( cv 
>1229	CallExpression	p ( cv 
>1230	ArgumentList	cv 
>1231	Argument	cv 
>1232	CallExpression	cv 
>1233	ArgumentList	7
>1234	Argument	osheight2
>1235	Identifier	osheight2
>1236	Argument	oswidth2
>1237	Identifier	oswidth2
>1238	Argument	7 + 8 + osheight2
>1239	AdditiveExpression	7 + 8 + osheight2
>1240	AdditiveExpression	8 + osheight2
>1241	Identifier	osheight2
>1242	PrimaryExpression	8
>1243	PrimaryExpression	7
>1244	Argument	7
>1245	PrimaryExpression	7
>1246	Callee	cv 
>1247	Identifier	cv 
>1248	Callee	p
>1249	Identifier	p
>1250	Identifier	p_roi_bot2
>1251	Identifier	p_roi_bot2
>1252	IdentifierDeclType	cv 
>1253	IdentifierDeclStatement	 
>1254	IdentifierDecl	p_roi_top2 = p ( cv 
>1255	AssignmentExpr	p_roi_top2 = p ( cv 
>1256	CallExpression	p ( cv 
>1257	ArgumentList	cv 
>1258	Argument	cv 
>1259	CallExpression	cv 
>1260	ArgumentList	7
>1261	Argument	osheight2
>1262	Identifier	osheight2
>1263	Argument	oswidth2
>1264	Identifier	oswidth2
>1265	Argument	7
>1266	PrimaryExpression	7
>1267	Argument	7
>1268	PrimaryExpression	7
>1269	Callee	cv 
>1270	Identifier	cv 
>1271	Callee	p
>1272	Identifier	p
>1273	Identifier	p_roi_top2
>1274	Identifier	p_roi_top2
>1275	IdentifierDeclType	cv 
>1276	IdentifierDeclStatement	 
>1277	IdentifierDecl	oswidth2 = 476
>1278	AssignmentExpr	oswidth2 = 476
>1279	PrimaryExpression	476
>1280	Identifier	oswidth2
>1281	Identifier	oswidth2
>1282	IdentifierDeclType	int
>1283	IdentifierDeclStatement	 
>1284	IdentifierDecl	osheight2 = 350
>1285	AssignmentExpr	osheight2 = 350
>1286	PrimaryExpression	350
>1287	Identifier	osheight2
>1288	Identifier	osheight2
>1289	IdentifierDeclType	int
>1290	ExpressionStatement	 
>1291	CallExpression	rgb2bgr ( & oIdepth )
>1292	ArgumentList	& oIdepth
>1293	Argument	& oIdepth
>1294	UnaryOp	& oIdepth
>1295	Identifier	oIdepth
>1296	UnaryOperator	&
>1297	Callee	rgb2bgr
>1298	Identifier	rgb2bgr
>1299	ExpressionStatement	 
>1300	CallExpression	dilateColorImage ( & oAge )
>1301	ArgumentList	& oAge
>1302	Argument	& oAge
>1303	UnaryOp	& oAge
>1304	Identifier	oAge
>1305	UnaryOperator	&
>1306	Callee	dilateColorImage
>1307	Identifier	dilateColorImage
>1308	ExpressionStatement	 
>1309	CallExpression	dilateColorImage ( & oIdepth )
>1310	ArgumentList	& oIdepth
>1311	Argument	& oIdepth
>1312	UnaryOp	& oIdepth
>1313	Identifier	oIdepth
>1314	UnaryOperator	&
>1315	Callee	dilateColorImage
>1316	Identifier	dilateColorImage
>1317	ExpressionStatement	 
>1318	CallExpression	dilateColorImage ( & oVar )
>1319	ArgumentList	& oVar
>1320	Argument	& oVar
>1321	UnaryOp	& oVar
>1322	Identifier	oVar
>1323	UnaryOperator	&
>1324	Callee	dilateColorImage
>1325	Identifier	dilateColorImage
>1326	IdentifierDeclStatement	 
>1327	IdentifierDecl	oAge = cv 
>1328	AssignmentExpr	oAge = cv 
>1329	CallExpression	cv 
>1330	ArgumentList	odometryFilesAge [ mindiffIDX ]
>1331	Argument	odometryFilesAge [ mindiffIDX ]
>1332	ArrayIndexing	odometryFilesAge [ mindiffIDX ]
>1333	Identifier	mindiffIDX
>1334	Identifier	odometryFilesAge
>1335	Callee	cv 
>1336	Identifier	cv 
>1337	Identifier	oAge
>1338	Identifier	oAge
>1339	IdentifierDeclType	cv 
>1340	IdentifierDeclStatement	 
>1341	IdentifierDecl	oOrg = cv 
>1342	AssignmentExpr	oOrg = cv 
>1343	CallExpression	cv 
>1344	ArgumentList	odometryFilesOrg [ mindiffIDX ]
>1345	Argument	odometryFilesOrg [ mindiffIDX ]
>1346	ArrayIndexing	odometryFilesOrg [ mindiffIDX ]
>1347	Identifier	mindiffIDX
>1348	Identifier	odometryFilesOrg
>1349	Callee	cv 
>1350	Identifier	cv 
>1351	Identifier	oOrg
>1352	Identifier	oOrg
>1353	IdentifierDeclType	cv 
>1354	IdentifierDeclStatement	 
>1355	IdentifierDecl	oVar = cv 
>1356	AssignmentExpr	oVar = cv 
>1357	CallExpression	cv 
>1358	ArgumentList	odometryFilesVar [ mindiffIDX ]
>1359	Argument	odometryFilesVar [ mindiffIDX ]
>1360	ArrayIndexing	odometryFilesVar [ mindiffIDX ]
>1361	Identifier	mindiffIDX
>1362	Identifier	odometryFilesVar
>1363	Callee	cv 
>1364	Identifier	cv 
>1365	Identifier	oVar
>1366	Identifier	oVar
>1367	IdentifierDeclType	cv 
>1368	IdentifierDeclStatement	 
>1369	IdentifierDecl	oIdepth = cv 
>1370	AssignmentExpr	oIdepth = cv 
>1371	CallExpression	cv 
>1372	ArgumentList	odometryFilesIdepth [ mindiffIDX ]
>1373	Argument	odometryFilesIdepth [ mindiffIDX ]
>1374	ArrayIndexing	odometryFilesIdepth [ mindiffIDX ]
>1375	Identifier	mindiffIDX
>1376	Identifier	odometryFilesIdepth
>1377	Callee	cv 
>1378	Identifier	cv 
>1379	Identifier	oIdepth
>1380	Identifier	oIdepth
>1381	IdentifierDeclType	cv 
>1382	IdentifierDeclStatement	 
>1383	IdentifierDecl	p = cv 
>1384	AssignmentExpr	p = cv 
>1385	CallExpression	cv 
>1386	ArgumentList	pointcloudFiles [ i ]
>1387	Argument	pointcloudFiles [ i ]
>1388	ArrayIndexing	pointcloudFiles [ i ]
>1389	Identifier	i
>1390	Identifier	pointcloudFiles
>1391	Callee	cv 
>1392	Identifier	cv 
>1393	Identifier	p
>1394	Identifier	p
>1395	IdentifierDeclType	cv 
>1396	IfStatement	if ( mindiff > 10 )
>1397	ExpressionStatement	 
>1398	CallExpression	printf ( \"pairing %ld with %ld (diff is
>1399	ArgumentList	\"pairing %ld with %ld (diff is
>1400	Argument	mindiff
>1401	Identifier	mindiff
>1402	Argument	odometryTimestamps [ mindiffIDX ]
>1403	ArrayIndexing	odometryTimestamps [ mindiffIDX ]
>1404	Identifier	mindiffIDX
>1405	Identifier	odometryTimestamps
>1406	Argument	pointcloudTimestamps [ i ]
>1407	ArrayIndexing	pointcloudTimestamps [ i ]
>1408	Identifier	i
>1409	Identifier	pointcloudTimestamps
>1410	Argument	\"pairing %ld with %ld (diff is
>1411	PrimaryExpression	\"pairing %ld with %ld (diff is
>1412	Callee	printf
>1413	Identifier	printf
>1414	Condition	 
>1415	RelationalExpression	mindiff > 10
>1416	PrimaryExpression	10
>1417	Identifier	mindiff
>1418	ForStatement	for ( size_t j = 0 ; j < odometryTimestamps . size ( ) ; ++ j )
>1419	IfStatement	if ( pointcloudTimestamps [ i ] - odometryTimestamps [ j ] < mindiff && - pointcloudTimestamps [ i ] + odometryTimestamps [ \
>1420	CompoundStatement	 
>1421	ExpressionStatement	 
>1422	AssignmentExpr	mindiffIDX = j
>1423	Identifier	j
>1424	Identifier	mindiffIDX
>1425	IfStatement	if ( mindiff < 0 )
>1426	ExpressionStatement	 
>1427	AssignmentExpr	mindiff = - mindiff
>1428	UnaryOp	- mindiff
>1429	Identifier	mindiff
>1430	UnaryOperator	-
>1431	Identifier	mindiff
>1432	Condition	 
>1433	RelationalExpression	mindiff < 0
>1434	PrimaryExpression	0
>1435	Identifier	mindiff
>1436	ExpressionStatement	 
>1437	AssignmentExpr	mindiff = pointcloudTimestamps [ i ] - odometryTimestamps [ j ]
>1438	AdditiveExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ]
>1439	ArrayIndexing	odometryTimestamps [ j ]
>1440	Identifier	j
>1441	Identifier	odometryTimestamps
>1442	ArrayIndexing	pointcloudTimestamps [ i ]
>1443	Identifier	i
>1444	Identifier	pointcloudTimestamps
>1445	Identifier	mindiff
>1446	Condition	 
>1447	AndExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ] < mindiff && - pointcloudTimestamps [ i ] + odometryTimestamps [ \
>1448	RelationalExpression	- pointcloudTimestamps [ i ] + odometryTimestamps [ j ] < mindiff
>1449	Identifier	mindiff
>1450	AdditiveExpression	- pointcloudTimestamps [ i ] + odometryTimestamps [ j ]
>1451	ArrayIndexing	odometryTimestamps [ j ]
>1452	Identifier	j
>1453	Identifier	odometryTimestamps
>1454	UnaryOp	- pointcloudTimestamps [ i ]
>1455	ArrayIndexing	pointcloudTimestamps [ i ]
>1456	Identifier	i
>1457	Identifier	pointcloudTimestamps
>1458	UnaryOperator	-
>1459	RelationalExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ] < mindiff
>1460	Identifier	mindiff
>1461	AdditiveExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ]
>1462	ArrayIndexing	odometryTimestamps [ j ]
>1463	Identifier	j
>1464	Identifier	odometryTimestamps
>1465	ArrayIndexing	pointcloudTimestamps [ i ]
>1466	Identifier	i
>1467	Identifier	pointcloudTimestamps
>1468	UnaryExpression	 
>1469	Identifier	j
>1470	IncDec	++
>1471	Condition	 
>1472	RelationalExpression	j < odometryTimestamps . size ( )
>1473	CallExpression	odometryTimestamps . size ( )
>1474	ArgumentList	 
>1475	Callee	odometryTimestamps . size
>1476	MemberAccess	odometryTimestamps . size
>1477	Identifier	size
>1478	Identifier	odometryTimestamps
>1479	Identifier	j
>1480	ForInit	 
>1481	IdentifierDeclStatement	size_t j = 0 ;
>1482	IdentifierDecl	j = 0
>1483	AssignmentExpr	j = 0
>1484	PrimaryExpression	0
>1485	Identifier	j
>1486	Identifier	j
>1487	IdentifierDeclType	size_t
>1488	IdentifierDeclStatement	 
>1489	IdentifierDecl	mindiffIDX = 0
>1490	AssignmentExpr	mindiffIDX = 0
>1491	PrimaryExpression	0
>1492	Identifier	mindiffIDX
>1493	Identifier	mindiffIDX
>1494	IdentifierDeclType	int
>1495	IdentifierDeclStatement	 
>1496	IdentifierDecl	mindiff = pointcloudTimestamps [ i ]
>1497	AssignmentExpr	mindiff = pointcloudTimestamps [ i ]
>1498	ArrayIndexing	pointcloudTimestamps [ i ]
>1499	Identifier	i
>1500	Identifier	pointcloudTimestamps
>1501	Identifier	mindiff
>1502	Identifier	mindiff
>1503	IdentifierDeclType	long
>1504	IfStatement	if ( pointcloudTimestamps [ i ] == - 1 )
>1505	CompoundStatement	 
>1506	ContinueStatement	 
>1507	ExpressionStatement	 
>1508	CallExpression	printf ( \"skipping pc file %s!\n\" , pointcloudFiles [ i ] . c_str ( ) )
>1509	ArgumentList	\"skipping pc file %s!\n\"
>1510	Argument	pointcloudFiles [ i ] . c_str ( )
>1511	CallExpression	pointcloudFiles [ i ] . c_str ( )
>1512	ArgumentList	 
>1513	Callee	pointcloudFiles [ i ] . c_str
>1514	MemberAccess	pointcloudFiles [ i ] . c_str
>1515	Identifier	c_str
>1516	ArrayIndexing	pointcloudFiles [ i ]
>1517	Identifier	i
>1518	Identifier	pointcloudFiles
>1519	Argument	\"skipping pc file %s!\n\"
>1520	PrimaryExpression	\"skipping pc file %s!\n\"
>1521	Callee	printf
>1522	Identifier	printf
>1523	Condition	 
>1524	EqualityExpression	pointcloudTimestamps [ i ] == - 1
>1525	UnaryOp	- 1
>1526	PrimaryExpression	1
>1527	UnaryOperator	-
>1528	ArrayIndexing	pointcloudTimestamps [ i ]
>1529	Identifier	i
>1530	Identifier	pointcloudTimestamps
>1531	UnaryExpression	 
>1532	Identifier	i
>1533	IncDec	++
>1534	Condition	 
>1535	RelationalExpression	i < pointcloudFiles . size ( )
>1536	CallExpression	pointcloudFiles . size ( )
>1537	ArgumentList	 
>1538	Callee	pointcloudFiles . size
>1539	MemberAccess	pointcloudFiles . size
>1540	Identifier	size
>1541	Identifier	pointcloudFiles
>1542	Identifier	i
>1543	ForInit	 
>1544	IdentifierDeclStatement	size_t i = 0 ;
>1545	IdentifierDecl	i = 0
>1546	AssignmentExpr	i = 0
>1547	PrimaryExpression	0
>1548	Identifier	i
>1549	Identifier	i
>1550	IdentifierDeclType	size_t
>1551	IdentifierDeclStatement	 
>1552	IdentifierDecl	currentShift = 0
>1553	AssignmentExpr	currentShift = 0
>1554	PrimaryExpression	0
>1555	Identifier	currentShift
>1556	Identifier	currentShift
>1557	IdentifierDeclType	float
>1558	IdentifierDeclStatement	 
>1559	IdentifierDecl	c = 0
>1560	AssignmentExpr	c = 0
>1561	PrimaryExpression	0
>1562	Identifier	c
>1563	Identifier	c
>1564	IdentifierDeclType	int
>1565	IdentifierDeclStatement	 
>1566	IdentifierDecl	buf [ 1000 ]
>1567	PrimaryExpression	1000
>1568	Identifier	buf
>1569	IdentifierDeclType	char [ 1000 ]
>1570	IfStatement	if ( ! system ( \"mkdir save_output_idepth\" ) )
>1571	ExpressionStatement	 
>1572	CallExpression	printf ( \"system call failed!\" )
>1573	ArgumentList	\"system call failed!\"
>1574	Argument	\"system call failed!\"
>1575	PrimaryExpression	\"system call failed!\"
>1576	Callee	printf
>1577	Identifier	printf
>1578	Condition	 
>1579	UnaryOp	! system ( \"mkdir save_output_idepth\" )
>1580	CallExpression	system ( \"mkdir save_output_idepth\" )
>1581	ArgumentList	\"mkdir save_output_idepth\"
>1582	Argument	\"mkdir save_output_idepth\"
>1583	PrimaryExpression	\"mkdir save_output_idepth\"
>1584	Callee	system
>1585	Identifier	system
>1586	UnaryOperator	!
>1587	IfStatement	if ( ! system ( \"mkdir save_output_var\" ) )
>1588	ExpressionStatement	 
>1589	CallExpression	printf ( \"system call failed!\" )
>1590	ArgumentList	\"system call failed!\"
>1591	Argument	\"system call failed!\"
>1592	PrimaryExpression	\"system call failed!\"
>1593	Callee	printf
>1594	Identifier	printf
>1595	Condition	 
>1596	UnaryOp	! system ( \"mkdir save_output_var\" )
>1597	CallExpression	system ( \"mkdir save_output_var\" )
>1598	ArgumentList	\"mkdir save_output_var\"
>1599	Argument	\"mkdir save_output_var\"
>1600	PrimaryExpression	\"mkdir save_output_var\"
>1601	Callee	system
>1602	Identifier	system
>1603	UnaryOperator	!
>1604	IfStatement	if ( ! system ( \"mkdir save_output_age\" ) )
>1605	ExpressionStatement	 
>1606	CallExpression	printf ( \"system call failed!\" )
>1607	ArgumentList	\"system call failed!\"
>1608	Argument	\"system call failed!\"
>1609	PrimaryExpression	\"system call failed!\"
>1610	Callee	printf
>1611	Identifier	printf
>1612	Condition	 
>1613	UnaryOp	! system ( \"mkdir save_output_age\" )
>1614	CallExpression	system ( \"mkdir save_output_age\" )
>1615	ArgumentList	\"mkdir save_output_age\"
>1616	Argument	\"mkdir save_output_age\"
>1617	PrimaryExpression	\"mkdir save_output_age\"
>1618	Callee	system
>1619	Identifier	system
>1620	UnaryOperator	!
>1621	IfStatement	if ( ! system ( \"rm -rf save_output_idepth\" ) )
>1622	ExpressionStatement	 
>1623	CallExpression	printf ( \"system call failed!\" )
>1624	ArgumentList	\"system call failed!\"
>1625	Argument	\"system call failed!\"
>1626	PrimaryExpression	\"system call failed!\"
>1627	Callee	printf
>1628	Identifier	printf
>1629	Condition	 
>1630	UnaryOp	! system ( \"rm -rf save_output_idepth\" )
>1631	CallExpression	system ( \"rm -rf save_output_idepth\" )
>1632	ArgumentList	\"rm -rf save_output_idepth\"
>1633	Argument	\"rm -rf save_output_idepth\"
>1634	PrimaryExpression	\"rm -rf save_output_idepth\"
>1635	Callee	system
>1636	Identifier	system
>1637	UnaryOperator	!
>1638	IfStatement	if ( ! system ( \"rm -rf save_output_var\" ) )
>1639	ExpressionStatement	 
>1640	CallExpression	printf ( \"system call failed!\" )
>1641	ArgumentList	\"system call failed!\"
>1642	Argument	\"system call failed!\"
>1643	PrimaryExpression	\"system call failed!\"
>1644	Callee	printf
>1645	Identifier	printf
>1646	Condition	 
>1647	UnaryOp	! system ( \"rm -rf save_output_var\" )
>1648	CallExpression	system ( \"rm -rf save_output_var\" )
>1649	ArgumentList	\"rm -rf save_output_var\"
>1650	Argument	\"rm -rf save_output_var\"
>1651	PrimaryExpression	\"rm -rf save_output_var\"
>1652	Callee	system
>1653	Identifier	system
>1654	UnaryOperator	!
>1655	IfStatement	if ( ! system ( \"rm -rf save_output_age\" ) )
>1656	ExpressionStatement	 
>1657	CallExpression	printf ( \"system call failed!\" )
>1658	ArgumentList	\"system call failed!\"
>1659	Argument	\"system call failed!\"
>1660	PrimaryExpression	\"system call failed!\"
>1661	Callee	printf
>1662	Identifier	printf
>1663	Condition	 
>1664	UnaryOp	! system ( \"rm -rf save_output_age\" )
>1665	CallExpression	system ( \"rm -rf save_output_age\" )
>1666	ArgumentList	\"rm -rf save_output_age\"
>1667	Argument	\"rm -rf save_output_age\"
>1668	PrimaryExpression	\"rm -rf save_output_age\"
>1669	Callee	system
>1670	Identifier	system
>1671	UnaryOperator	!
>1672	ForStatement	for ( size_t i = 0 ; i < pointcloudIDs . size ( ) ; ++ i )
>1673	ForStatement	for ( size_t j = i + 1 ; j < pointcloudIDs . size ( ) ; ++ j )
>1674	IfStatement	if ( pointcloudIDs [ i ] > pointcloudIDs [ j ] )
>1675	CompoundStatement	 
>1676	ExpressionStatement	 
>1677	AssignmentExpr	pointcloudFiles [ j ] = tmp2
>1678	Identifier	tmp2
>1679	ArrayIndexing	pointcloudFiles [ j ]
>1680	Identifier	j
>1681	Identifier	pointcloudFiles
>1682	ExpressionStatement	 
>1683	AssignmentExpr	pointcloudFiles [ i ] = pointcloudFiles [ j ]
>1684	ArrayIndexing	pointcloudFiles [ j ]
>1685	Identifier	j
>1686	Identifier	pointcloudFiles
>1687	ArrayIndexing	pointcloudFiles [ i ]
>1688	Identifier	i
>1689	Identifier	pointcloudFiles
>1690	IdentifierDeclStatement	 
>1691	IdentifierDecl	tmp2 = pointcloudFiles [ i ]
>1692	AssignmentExpr	tmp2 = pointcloudFiles [ i ]
>1693	ArrayIndexing	pointcloudFiles [ i ]
>1694	Identifier	i
>1695	Identifier	pointcloudFiles
>1696	Identifier	tmp2
>1697	Identifier	tmp2
>1698	IdentifierDeclType	string
>1699	ExpressionStatement	 
>1700	AssignmentExpr	pointcloudIDs [ j ] = tmp
>1701	Identifier	tmp
>1702	ArrayIndexing	pointcloudIDs [ j ]
>1703	Identifier	j
>1704	Identifier	pointcloudIDs
>1705	ExpressionStatement	 
>1706	AssignmentExpr	pointcloudIDs [ i ] = pointcloudIDs [ j ]
>1707	ArrayIndexing	pointcloudIDs [ j ]
>1708	Identifier	j
>1709	Identifier	pointcloudIDs
>1710	ArrayIndexing	pointcloudIDs [ i ]
>1711	Identifier	i
>1712	Identifier	pointcloudIDs
>1713	ExpressionStatement	 
>1714	AssignmentExpr	tmp = pointcloudIDs [ i ]
>1715	ArrayIndexing	pointcloudIDs [ i ]
>1716	Identifier	i
>1717	Identifier	pointcloudIDs
>1718	Identifier	tmp
>1719	ExpressionStatement	 
>1720	AssignmentExpr	pointcloudTimestamps [ j ] = tmp
>1721	Identifier	tmp
>1722	ArrayIndexing	pointcloudTimestamps [ j ]
>1723	Identifier	j
>1724	Identifier	pointcloudTimestamps
>1725	ExpressionStatement	 
>1726	AssignmentExpr	pointcloudTimestamps [ i ] = pointcloudTimestamps [ j ]
>1727	ArrayIndexing	pointcloudTimestamps [ j ]
>1728	Identifier	j
>1729	Identifier	pointcloudTimestamps
>1730	ArrayIndexing	pointcloudTimestamps [ i ]
>1731	Identifier	i
>1732	Identifier	pointcloudTimestamps
>1733	IdentifierDeclStatement	 
>1734	IdentifierDecl	tmp = pointcloudTimestamps [ i ]
>1735	AssignmentExpr	tmp = pointcloudTimestamps [ i ]
>1736	ArrayIndexing	pointcloudTimestamps [ i ]
>1737	Identifier	i
>1738	Identifier	pointcloudTimestamps
>1739	Identifier	tmp
>1740	Identifier	tmp
>1741	IdentifierDeclType	long
>1742	Condition	 
>1743	RelationalExpression	pointcloudIDs [ i ] > pointcloudIDs [ j ]
>1744	ArrayIndexing	pointcloudIDs [ j ]
>1745	Identifier	j
>1746	Identifier	pointcloudIDs
>1747	ArrayIndexing	pointcloudIDs [ i ]
>1748	Identifier	i
>1749	Identifier	pointcloudIDs
>1750	UnaryExpression	 
>1751	Identifier	j
>1752	IncDec	++
>1753	Condition	 
>1754	RelationalExpression	j < pointcloudIDs . size ( )
>1755	CallExpression	pointcloudIDs . size ( )
>1756	ArgumentList	 
>1757	Callee	pointcloudIDs . size
>1758	MemberAccess	pointcloudIDs . size
>1759	Identifier	size
>1760	Identifier	pointcloudIDs
>1761	Identifier	j
>1762	ForInit	 
>1763	IdentifierDeclStatement	size_t j = i + 1 ;
>1764	IdentifierDecl	j = i + 1
>1765	AssignmentExpr	j = i + 1
>1766	AdditiveExpression	i + 1
>1767	PrimaryExpression	1
>1768	Identifier	i
>1769	Identifier	j
>1770	Identifier	j
>1771	IdentifierDeclType	size_t
>1772	UnaryExpression	 
>1773	Identifier	i
>1774	IncDec	++
>1775	Condition	 
>1776	RelationalExpression	i < pointcloudIDs . size ( )
>1777	CallExpression	pointcloudIDs . size ( )
>1778	ArgumentList	 
>1779	Callee	pointcloudIDs . size
>1780	MemberAccess	pointcloudIDs . size
>1781	Identifier	size
>1782	Identifier	pointcloudIDs
>1783	Identifier	i
>1784	ForInit	 
>1785	IdentifierDeclStatement	size_t i = 0 ;
>1786	IdentifierDecl	i = 0
>1787	AssignmentExpr	i = 0
>1788	PrimaryExpression	0
>1789	Identifier	i
>1790	Identifier	i
>1791	IdentifierDeclType	size_t
>1792	ForStatement	for ( size_t i = 0 ; i < pointcloudFiles . size ( ) ; ++ i )
>1793	CompoundStatement	 
>1794	ExpressionStatement	 
>1795	CallExpression	pointcloudIDs . push_back ( id )
>1796	ArgumentList	id
>1797	Argument	id
>1798	Identifier	id
>1799	Callee	pointcloudIDs . push_back
>1800	MemberAccess	pointcloudIDs . push_back
>1801	Identifier	push_back
>1802	Identifier	pointcloudIDs
>1803	ExpressionStatement	 
>1804	CallExpression	pointcloudTimestamps . push_back ( time )
>1805	ArgumentList	time
>1806	Argument	time
>1807	Identifier	time
>1808	Callee	pointcloudTimestamps . push_back
>1809	MemberAccess	pointcloudTimestamps . push_back
>1810	Identifier	push_back
>1811	Identifier	pointcloudTimestamps
>1812	IfStatement	if ( 2 != sscanf ( tmpString . c_str ( ) , \"%ld-%ld.jpg\" , & id , & time ) )
>1813	ExpressionStatement	 
>1814	CallExpression	printf ( \"could not parse name as pc %s!\n\" , tmpString . c_str ( ) )
>1815	ArgumentList	\"could not parse name as pc %s!\n\"
>1816	Argument	tmpString . c_str ( )
>1817	CallExpression	tmpString . c_str ( )
>1818	ArgumentList	 
>1819	Callee	tmpString . c_str
>1820	MemberAccess	tmpString . c_str
>1821	Identifier	c_str
>1822	Identifier	tmpString
>1823	Argument	\"could not parse name as pc %s!\n\"
>1824	PrimaryExpression	\"could not parse name as pc %s!\n\"
>1825	Callee	printf
>1826	Identifier	printf
>1827	Condition	 
>1828	EqualityExpression	2 != sscanf ( tmpString . c_str ( ) , \"%ld-%ld.jpg\" , & id , & time )
>1829	CallExpression	sscanf ( tmpString . c_str ( ) , \"%ld-%ld.jpg\" , & id , & time )
>1830	ArgumentList	tmpString . c_str ( )
>1831	Argument	& time
>1832	UnaryOp	& time
>1833	Identifier	time
>1834	UnaryOperator	&
>1835	Argument	& id
>1836	UnaryOp	& id
>1837	Identifier	id
>1838	UnaryOperator	&
>1839	Argument	\"%ld-%ld.jpg\"
>1840	PrimaryExpression	\"%ld-%ld.jpg\"
>1841	Argument	tmpString . c_str ( )
>1842	CallExpression	tmpString . c_str ( )
>1843	ArgumentList	 
>1844	Callee	tmpString . c_str
>1845	MemberAccess	tmpString . c_str
>1846	Identifier	c_str
>1847	Identifier	tmpString
>1848	Callee	sscanf
>1849	Identifier	sscanf
>1850	PrimaryExpression	2
>1851	IfStatement	if ( pos != string 
>1852	ExpressionStatement	 
>1853	AssignmentExpr	tmpString = pointcloudFiles [ i ] . substr ( pos + 1 )
>1854	CallExpression	pointcloudFiles [ i ] . substr ( pos + 1 )
>1855	ArgumentList	pos + 1
>1856	Argument	pos + 1
>1857	AdditiveExpression	pos + 1
>1858	PrimaryExpression	1
>1859	Identifier	pos
>1860	Callee	pointcloudFiles [ i ] . substr
>1861	MemberAccess	pointcloudFiles [ i ] . substr
>1862	Identifier	substr
>1863	ArrayIndexing	pointcloudFiles [ i ]
>1864	Identifier	i
>1865	Identifier	pointcloudFiles
>1866	Identifier	tmpString
>1867	Condition	 
>1868	EqualityExpression	pos != string 
>1869	Identifier	string 
>1870	Identifier	pos
>1871	IdentifierDeclStatement	 
>1872	IdentifierDecl	tmpString = pointcloudFiles [ i ]
>1873	AssignmentExpr	tmpString = pointcloudFiles [ i ]
>1874	ArrayIndexing	pointcloudFiles [ i ]
>1875	Identifier	i
>1876	Identifier	pointcloudFiles
>1877	Identifier	tmpString
>1878	Identifier	tmpString
>1879	IdentifierDeclType	string
>1880	IdentifierDeclStatement	 
>1881	IdentifierDecl	pos = pointcloudFiles [ i ] . find_last_of ( \"/\" )
>1882	AssignmentExpr	pos = pointcloudFiles [ i ] . find_last_of ( \"/\" )
>1883	CallExpression	pointcloudFiles [ i ] . find_last_of ( \"/\" )
>1884	ArgumentList	\"/\"
>1885	Argument	\"/\"
>1886	PrimaryExpression	\"/\"
>1887	Callee	pointcloudFiles [ i ] . find_last_of
>1888	MemberAccess	pointcloudFiles [ i ] . find_last_of
>1889	Identifier	find_last_of
>1890	ArrayIndexing	pointcloudFiles [ i ]
>1891	Identifier	i
>1892	Identifier	pointcloudFiles
>1893	Identifier	pos
>1894	Identifier	pos
>1895	IdentifierDeclType	size_t
>1896	IdentifierDeclStatement	 
>1897	IdentifierDecl	time = - 1
>1898	AssignmentExpr	time = - 1
>1899	UnaryOp	- 1
>1900	PrimaryExpression	1
>1901	UnaryOperator	-
>1902	Identifier	time
>1903	Identifier	time
>1904	IdentifierDeclType	long
>1905	IdentifierDecl	id = - 1
>1906	AssignmentExpr	id = - 1
>1907	UnaryOp	- 1
>1908	PrimaryExpression	1
>1909	UnaryOperator	-
>1910	Identifier	id
>1911	Identifier	id
>1912	IdentifierDeclType	long
>1913	UnaryExpression	 
>1914	Identifier	i
>1915	IncDec	++
>1916	Condition	 
>1917	RelationalExpression	i < pointcloudFiles . size ( )
>1918	CallExpression	pointcloudFiles . size ( )
>1919	ArgumentList	 
>1920	Callee	pointcloudFiles . size
>1921	MemberAccess	pointcloudFiles . size
>1922	Identifier	size
>1923	Identifier	pointcloudFiles
>1924	Identifier	i
>1925	ForInit	 
>1926	IdentifierDeclStatement	size_t i = 0 ;
>1927	IdentifierDecl	i = 0
>1928	AssignmentExpr	i = 0
>1929	PrimaryExpression	0
>1930	Identifier	i
>1931	Identifier	i
>1932	IdentifierDeclType	size_t
>1933	IdentifierDeclStatement	 
>1934	IdentifierDecl	pointcloudIDs
>1935	Identifier	pointcloudIDs
>1936	IdentifierDeclType	std 
>1937	IdentifierDeclStatement	 
>1938	IdentifierDecl	pointcloudTimestamps
>1939	Identifier	pointcloudTimestamps
>1940	IdentifierDeclType	std 
>1941	ForStatement	for ( size_t i = 0 ; i < odometryFilesIdepth . size ( ) ; ++ i )
>1942	CompoundStatement	 
>1943	ExpressionStatement	 
>1944	CallExpression	odometryTimestamps . push_back ( id )
>1945	ArgumentList	id
>1946	Argument	id
>1947	Identifier	id
>1948	Callee	odometryTimestamps . push_back
>1949	MemberAccess	odometryTimestamps . push_back
>1950	Identifier	push_back
>1951	Identifier	odometryTimestamps
>1952	IfStatement	if ( 1 != sscanf ( tmpString . c_str ( ) , \"idepth-%ld.png\" , & id ) )
>1953	ExpressionStatement	 
>1954	CallExpression	printf ( \"could not parse name as odometry %s!\n\" , tmpString . c_str ( ) )
>1955	ArgumentList	\"could not parse name as odometry %s!\n\"
>1956	Argument	tmpString . c_str ( )
>1957	CallExpression	tmpString . c_str ( )
>1958	ArgumentList	 
>1959	Callee	tmpString . c_str
>1960	MemberAccess	tmpString . c_str
>1961	Identifier	c_str
>1962	Identifier	tmpString
>1963	Argument	\"could not parse name as odometry %s!\n\"
>1964	PrimaryExpression	\"could not parse name as odometry %s!\n\"
>1965	Callee	printf
>1966	Identifier	printf
>1967	Condition	 
>1968	EqualityExpression	1 != sscanf ( tmpString . c_str ( ) , \"idepth-%ld.png\" , & id )
>1969	CallExpression	sscanf ( tmpString . c_str ( ) , \"idepth-%ld.png\" , & id )
>1970	ArgumentList	tmpString . c_str ( )
>1971	Argument	& id
>1972	UnaryOp	& id
>1973	Identifier	id
>1974	UnaryOperator	&
>1975	Argument	\"idepth-%ld.png\"
>1976	PrimaryExpression	\"idepth-%ld.png\"
>1977	Argument	tmpString . c_str ( )
>1978	CallExpression	tmpString . c_str ( )
>1979	ArgumentList	 
>1980	Callee	tmpString . c_str
>1981	MemberAccess	tmpString . c_str
>1982	Identifier	c_str
>1983	Identifier	tmpString
>1984	Callee	sscanf
>1985	Identifier	sscanf
>1986	PrimaryExpression	1
>1987	IfStatement	if ( pos != string 
>1988	ExpressionStatement	 
>1989	AssignmentExpr	tmpString = odometryFilesIdepth [ i ] . substr ( pos + 1 )
>1990	CallExpression	odometryFilesIdepth [ i ] . substr ( pos + 1 )
>1991	ArgumentList	pos + 1
>1992	Argument	pos + 1
>1993	AdditiveExpression	pos + 1
>1994	PrimaryExpression	1
>1995	Identifier	pos
>1996	Callee	odometryFilesIdepth [ i ] . substr
>1997	MemberAccess	odometryFilesIdepth [ i ] . substr
>1998	Identifier	substr
>1999	ArrayIndexing	odometryFilesIdepth [ i ]
>2000	Identifier	i
>2001	Identifier	odometryFilesIdepth
>2002	Identifier	tmpString
>2003	Condition	 
>2004	EqualityExpression	pos != string 
>2005	Identifier	string 
>2006	Identifier	pos
>2007	IdentifierDeclStatement	 
>2008	IdentifierDecl	tmpString = odometryFilesIdepth [ i ]
>2009	AssignmentExpr	tmpString = odometryFilesIdepth [ i ]
>2010	ArrayIndexing	odometryFilesIdepth [ i ]
>2011	Identifier	i
>2012	Identifier	odometryFilesIdepth
>2013	Identifier	tmpString
>2014	Identifier	tmpString
>2015	IdentifierDeclType	string
>2016	IdentifierDeclStatement	 
>2017	IdentifierDecl	pos = odometryFilesIdepth [ i ] . find_last_of ( \"/\" )
>2018	AssignmentExpr	pos = odometryFilesIdepth [ i ] . find_last_of ( \"/\" )
>2019	CallExpression	odometryFilesIdepth [ i ] . find_last_of ( \"/\" )
>2020	ArgumentList	\"/\"
>2021	Argument	\"/\"
>2022	PrimaryExpression	\"/\"
>2023	Callee	odometryFilesIdepth [ i ] . find_last_of
>2024	MemberAccess	odometryFilesIdepth [ i ] . find_last_of
>2025	Identifier	find_last_of
>2026	ArrayIndexing	odometryFilesIdepth [ i ]
>2027	Identifier	i
>2028	Identifier	odometryFilesIdepth
>2029	Identifier	pos
>2030	Identifier	pos
>2031	IdentifierDeclType	size_t
>2032	IdentifierDeclStatement	 
>2033	IdentifierDecl	id = - 1
>2034	AssignmentExpr	id = - 1
>2035	UnaryOp	- 1
>2036	PrimaryExpression	1
>2037	UnaryOperator	-
>2038	Identifier	id
>2039	Identifier	id
>2040	IdentifierDeclType	long
>2041	UnaryExpression	 
>2042	Identifier	i
>2043	IncDec	++
>2044	Condition	 
>2045	RelationalExpression	i < odometryFilesIdepth . size ( )
>2046	CallExpression	odometryFilesIdepth . size ( )
>2047	ArgumentList	 
>2048	Callee	odometryFilesIdepth . size
>2049	MemberAccess	odometryFilesIdepth . size
>2050	Identifier	size
>2051	Identifier	odometryFilesIdepth
>2052	Identifier	i
>2053	ForInit	 
>2054	IdentifierDeclStatement	size_t i = 0 ;
>2055	IdentifierDecl	i = 0
>2056	AssignmentExpr	i = 0
>2057	PrimaryExpression	0
>2058	Identifier	i
>2059	Identifier	i
>2060	IdentifierDeclType	size_t
>2061	IdentifierDeclStatement	 
>2062	IdentifierDecl	odometryTimestamps
>2063	Identifier	odometryTimestamps
>2064	IdentifierDeclType	std 
>2065	ExpressionStatement	 
>2066	CallExpression	assert ( odometryFilesIdepth . size ( ) == odometryFilesAge . size ( ) )
>2067	ArgumentList	odometryFilesIdepth . size ( ) == odometryFilesAge . size ( )
>2068	Argument	odometryFilesIdepth . size ( ) == odometryFilesAge . size ( )
>2069	EqualityExpression	odometryFilesIdepth . size ( ) == odometryFilesAge . size ( )
>2070	CallExpression	odometryFilesAge . size ( )
>2071	ArgumentList	 
>2072	Callee	odometryFilesAge . size
>2073	MemberAccess	odometryFilesAge . size
>2074	Identifier	size
>2075	Identifier	odometryFilesAge
>2076	CallExpression	odometryFilesIdepth . size ( )
>2077	ArgumentList	 
>2078	Callee	odometryFilesIdepth . size
>2079	MemberAccess	odometryFilesIdepth . size
>2080	Identifier	size
>2081	Identifier	odometryFilesIdepth
>2082	Callee	assert
>2083	Identifier	assert
>2084	ExpressionStatement	 
>2085	CallExpression	assert ( odometryFilesIdepth . size ( ) == odometryFilesOrg . size ( ) )
>2086	ArgumentList	odometryFilesIdepth . size ( ) == odometryFilesOrg . size ( )
>2087	Argument	odometryFilesIdepth . size ( ) == odometryFilesOrg . size ( )
>2088	EqualityExpression	odometryFilesIdepth . size ( ) == odometryFilesOrg . size ( )
>2089	CallExpression	odometryFilesOrg . size ( )
>2090	ArgumentList	 
>2091	Callee	odometryFilesOrg . size
>2092	MemberAccess	odometryFilesOrg . size
>2093	Identifier	size
>2094	Identifier	odometryFilesOrg
>2095	CallExpression	odometryFilesIdepth . size ( )
>2096	ArgumentList	 
>2097	Callee	odometryFilesIdepth . size
>2098	MemberAccess	odometryFilesIdepth . size
>2099	Identifier	size
>2100	Identifier	odometryFilesIdepth
>2101	Callee	assert
>2102	Identifier	assert
>2103	ExpressionStatement	 
>2104	CallExpression	assert ( odometryFilesIdepth . size ( ) == odometryFilesVar . size ( ) )
>2105	ArgumentList	odometryFilesIdepth . size ( ) == odometryFilesVar . size ( )
>2106	Argument	odometryFilesIdepth . size ( ) == odometryFilesVar . size ( )
>2107	EqualityExpression	odometryFilesIdepth . size ( ) == odometryFilesVar . size ( )
>2108	CallExpression	odometryFilesVar . size ( )
>2109	ArgumentList	 
>2110	Callee	odometryFilesVar . size
>2111	MemberAccess	odometryFilesVar . size
>2112	Identifier	size
>2113	Identifier	odometryFilesVar
>2114	CallExpression	odometryFilesIdepth . size ( )
>2115	ArgumentList	 
>2116	Callee	odometryFilesIdepth . size
>2117	MemberAccess	odometryFilesIdepth . size
>2118	Identifier	size
>2119	Identifier	odometryFilesIdepth
>2120	Callee	assert
>2121	Identifier	assert
>2122	ExpressionStatement	 
>2123	CallExpression	printf ( \"pcFiles
>2124	ArgumentList	\"pcFiles
>2125	Argument	odometryFilesAge . size ( )
>2126	CallExpression	odometryFilesAge . size ( )
>2127	ArgumentList	 
>2128	Callee	odometryFilesAge . size
>2129	MemberAccess	odometryFilesAge . size
>2130	Identifier	size
>2131	Identifier	odometryFilesAge
>2132	Argument	odometryFilesOrg . size ( )
>2133	CallExpression	odometryFilesOrg . size ( )
>2134	ArgumentList	 
>2135	Callee	odometryFilesOrg . size
>2136	MemberAccess	odometryFilesOrg . size
>2137	Identifier	size
>2138	Identifier	odometryFilesOrg
>2139	Argument	odometryFilesVar . size ( )
>2140	CallExpression	odometryFilesVar . size ( )
>2141	ArgumentList	 
>2142	Callee	odometryFilesVar . size
>2143	MemberAccess	odometryFilesVar . size
>2144	Identifier	size
>2145	Identifier	odometryFilesVar
>2146	Argument	odometryFilesIdepth . size ( )
>2147	CallExpression	odometryFilesIdepth . size ( )
>2148	ArgumentList	 
>2149	Callee	odometryFilesIdepth . size
>2150	MemberAccess	odometryFilesIdepth . size
>2151	Identifier	size
>2152	Identifier	odometryFilesIdepth
>2153	Argument	pointcloudFiles . size ( )
>2154	CallExpression	pointcloudFiles . size ( )
>2155	ArgumentList	 
>2156	Callee	pointcloudFiles . size
>2157	MemberAccess	pointcloudFiles . size
>2158	Identifier	size
>2159	Identifier	pointcloudFiles
>2160	Argument	\"pcFiles
>2161	PrimaryExpression	\"pcFiles
>2162	Callee	printf
>2163	Identifier	printf
>2164	ExpressionStatement	 
>2165	CallExpression	std 
>2166	ArgumentList	odometryFilesAge . begin ( )
>2167	Argument	odometryFilesAge . end ( )
>2168	CallExpression	odometryFilesAge . end ( )
>2169	ArgumentList	 
>2170	Callee	odometryFilesAge . end
>2171	MemberAccess	odometryFilesAge . end
>2172	Identifier	end
>2173	Identifier	odometryFilesAge
>2174	Argument	odometryFilesAge . begin ( )
>2175	CallExpression	odometryFilesAge . begin ( )
>2176	ArgumentList	 
>2177	Callee	odometryFilesAge . begin
>2178	MemberAccess	odometryFilesAge . begin
>2179	Identifier	begin
>2180	Identifier	odometryFilesAge
>2181	Callee	std 
>2182	Identifier	std 
>2183	ExpressionStatement	 
>2184	CallExpression	std 
>2185	ArgumentList	odometryFilesOrg . begin ( )
>2186	Argument	odometryFilesOrg . end ( )
>2187	CallExpression	odometryFilesOrg . end ( )
>2188	ArgumentList	 
>2189	Callee	odometryFilesOrg . end
>2190	MemberAccess	odometryFilesOrg . end
>2191	Identifier	end
>2192	Identifier	odometryFilesOrg
>2193	Argument	odometryFilesOrg . begin ( )
>2194	CallExpression	odometryFilesOrg . begin ( )
>2195	ArgumentList	 
>2196	Callee	odometryFilesOrg . begin
>2197	MemberAccess	odometryFilesOrg . begin
>2198	Identifier	begin
>2199	Identifier	odometryFilesOrg
>2200	Callee	std 
>2201	Identifier	std 
>2202	ExpressionStatement	 
>2203	CallExpression	std 
>2204	ArgumentList	odometryFilesVar . begin ( )
>2205	Argument	odometryFilesVar . end ( )
>2206	CallExpression	odometryFilesVar . end ( )
>2207	ArgumentList	 
>2208	Callee	odometryFilesVar . end
>2209	MemberAccess	odometryFilesVar . end
>2210	Identifier	end
>2211	Identifier	odometryFilesVar
>2212	Argument	odometryFilesVar . begin ( )
>2213	CallExpression	odometryFilesVar . begin ( )
>2214	ArgumentList	 
>2215	Callee	odometryFilesVar . begin
>2216	MemberAccess	odometryFilesVar . begin
>2217	Identifier	begin
>2218	Identifier	odometryFilesVar
>2219	Callee	std 
>2220	Identifier	std 
>2221	ExpressionStatement	 
>2222	CallExpression	std 
>2223	ArgumentList	odometryFilesIdepth . begin ( )
>2224	Argument	odometryFilesIdepth . end ( )
>2225	CallExpression	odometryFilesIdepth . end ( )
>2226	ArgumentList	 
>2227	Callee	odometryFilesIdepth . end
>2228	MemberAccess	odometryFilesIdepth . end
>2229	Identifier	end
>2230	Identifier	odometryFilesIdepth
>2231	Argument	odometryFilesIdepth . begin ( )
>2232	CallExpression	odometryFilesIdepth . begin ( )
>2233	ArgumentList	 
>2234	Callee	odometryFilesIdepth . begin
>2235	MemberAccess	odometryFilesIdepth . begin
>2236	Identifier	begin
>2237	Identifier	odometryFilesIdepth
>2238	Callee	std 
>2239	Identifier	std 
>2240	IdentifierDeclStatement	 
>2241	IdentifierDecl	odometryFilesAge = getFileList ( \"save_odometry/\" , \"age\" )
>2242	AssignmentExpr	odometryFilesAge = getFileList ( \"save_odometry/\" , \"age\" )
>2243	CallExpression	getFileList ( \"save_odometry/\" , \"age\" )
>2244	ArgumentList	\"save_odometry/\"
>2245	Argument	\"age\"
>2246	PrimaryExpression	\"age\"
>2247	Argument	\"save_odometry/\"
>2248	PrimaryExpression	\"save_odometry/\"
>2249	Callee	getFileList
>2250	Identifier	getFileList
>2251	Identifier	odometryFilesAge
>2252	Identifier	odometryFilesAge
>2253	IdentifierDeclType	std 
>2254	IdentifierDeclStatement	 
>2255	IdentifierDecl	odometryFilesOrg = getFileList ( \"save_odometry/\" , \"org\" )
>2256	AssignmentExpr	odometryFilesOrg = getFileList ( \"save_odometry/\" , \"org\" )
>2257	CallExpression	getFileList ( \"save_odometry/\" , \"org\" )
>2258	ArgumentList	\"save_odometry/\"
>2259	Argument	\"org\"
>2260	PrimaryExpression	\"org\"
>2261	Argument	\"save_odometry/\"
>2262	PrimaryExpression	\"save_odometry/\"
>2263	Callee	getFileList
>2264	Identifier	getFileList
>2265	Identifier	odometryFilesOrg
>2266	Identifier	odometryFilesOrg
>2267	IdentifierDeclType	std 
>2268	IdentifierDeclStatement	 
>2269	IdentifierDecl	odometryFilesVar = getFileList ( \"save_odometry/\" , \"var\" )
>2270	AssignmentExpr	odometryFilesVar = getFileList ( \"save_odometry/\" , \"var\" )
>2271	CallExpression	getFileList ( \"save_odometry/\" , \"var\" )
>2272	ArgumentList	\"save_odometry/\"
>2273	Argument	\"var\"
>2274	PrimaryExpression	\"var\"
>2275	Argument	\"save_odometry/\"
>2276	PrimaryExpression	\"save_odometry/\"
>2277	Callee	getFileList
>2278	Identifier	getFileList
>2279	Identifier	odometryFilesVar
>2280	Identifier	odometryFilesVar
>2281	IdentifierDeclType	std 
>2282	IdentifierDeclStatement	 
>2283	IdentifierDecl	odometryFilesIdepth = getFileList ( \"save_odometry/\" , \"idepth\" )
>2284	AssignmentExpr	odometryFilesIdepth = getFileList ( \"save_odometry/\" , \"idepth\" )
>2285	CallExpression	getFileList ( \"save_odometry/\" , \"idepth\" )
>2286	ArgumentList	\"save_odometry/\"
>2287	Argument	\"idepth\"
>2288	PrimaryExpression	\"idepth\"
>2289	Argument	\"save_odometry/\"
>2290	PrimaryExpression	\"save_odometry/\"
>2291	Callee	getFileList
>2292	Identifier	getFileList
>2293	Identifier	odometryFilesIdepth
>2294	Identifier	odometryFilesIdepth
>2295	IdentifierDeclType	std 
>2296	IdentifierDeclStatement	 
>2297	IdentifierDecl	pointcloudFiles = getFileList ( \"save_pointcloud/\" , \"\" )
>2298	AssignmentExpr	pointcloudFiles = getFileList ( \"save_pointcloud/\" , \"\" )
>2299	CallExpression	getFileList ( \"save_pointcloud/\" , \"\" )
>2300	ArgumentList	\"save_pointcloud/\"
>2301	Argument	\"\"
>2302	PrimaryExpression	\"\"
>2303	Argument	\"save_pointcloud/\"
>2304	PrimaryExpression	\"save_pointcloud/\"
>2305	Callee	getFileList
>2306	Identifier	getFileList
>2307	Identifier	pointcloudFiles
>2308	Identifier	pointcloudFiles
>2309	IdentifierDeclType	std 
>2400	FunctionDef	getTimestamps (std 
>2401	ParameterList	std 
>2402	Parameter	 
>2403	Identifier	prefix
>2404	ParameterType	string
>2405	Parameter	 
>2406	Identifier	names
>2407	ParameterType	std 
>2408	ReturnType	std 
>2409	CompoundStatement	 
>2410	ReturnStatement	 
>2411	Identifier	ts
>2412	ForStatement	for ( size_t i = 0 ; i < names . size ( ) ; ++ i )
>2413	CompoundStatement	 
>2414	ExpressionStatement	 
>2415	CallExpression	ts . push_back ( tss )
>2416	ArgumentList	tss
>2417	Argument	tss
>2418	Identifier	tss
>2419	Callee	ts . push_back
>2420	MemberAccess	ts . push_back
>2421	Identifier	push_back
>2422	Identifier	ts
>2423	IfStatement	if ( 2 != sscanf ( tmpString . c_str ( ) , ( prefix + \"%ld-%ld.png\" ) . c_str ( ) , & id , & tss ) )
>2424	ExpressionStatement	 
>2425	CallExpression	printf ( \"ERROR
>2426	ArgumentList	\"ERROR
>2427	Argument	tmpString . c_str ( )
>2428	CallExpression	tmpString . c_str ( )
>2429	ArgumentList	 
>2430	Callee	tmpString . c_str
>2431	MemberAccess	tmpString . c_str
>2432	Identifier	c_str
>2433	Identifier	tmpString
>2434	Argument	\"ERROR
>2435	PrimaryExpression	\"ERROR
>2436	Callee	printf
>2437	Identifier	printf
>2438	Condition	 
>2439	EqualityExpression	2 != sscanf ( tmpString . c_str ( ) , ( prefix + \"%ld-%ld.png\" ) . c_str ( ) , & id , & tss )
>2440	CallExpression	sscanf ( tmpString . c_str ( ) , ( prefix + \"%ld-%ld.png\" ) . c_str ( ) , & id , & tss )
>2441	ArgumentList	tmpString . c_str ( )
>2442	Argument	& tss
>2443	UnaryOp	& tss
>2444	Identifier	tss
>2445	UnaryOperator	&
>2446	Argument	& id
>2447	UnaryOp	& id
>2448	Identifier	id
>2449	UnaryOperator	&
>2450	Argument	( prefix + \"%ld-%ld.png\" ) . c_str ( )
>2451	CallExpression	( prefix + \"%ld-%ld.png\" ) . c_str ( )
>2452	ArgumentList	 
>2453	Callee	( prefix + \"%ld-%ld.png\" ) . c_str
>2454	MemberAccess	( prefix + \"%ld-%ld.png\" ) . c_str
>2455	Identifier	c_str
>2456	AdditiveExpression	prefix + \"%ld-%ld.png\"
>2457	PrimaryExpression	\"%ld-%ld.png\"
>2458	Identifier	prefix
>2459	Argument	tmpString . c_str ( )
>2460	CallExpression	tmpString . c_str ( )
>2461	ArgumentList	 
>2462	Callee	tmpString . c_str
>2463	MemberAccess	tmpString . c_str
>2464	Identifier	c_str
>2465	Identifier	tmpString
>2466	Callee	sscanf
>2467	Identifier	sscanf
>2468	PrimaryExpression	2
>2469	IdentifierDeclStatement	 
>2470	IdentifierDecl	buf [ 100 ]
>2471	PrimaryExpression	100
>2472	Identifier	buf
>2473	IdentifierDeclType	char [ 100 ]
>2474	IfStatement	if ( pos != string 
>2475	ExpressionStatement	 
>2476	AssignmentExpr	tmpString = names [ i ] . substr ( pos + 1 )
>2477	CallExpression	names [ i ] . substr ( pos + 1 )
>2478	ArgumentList	pos + 1
>2479	Argument	pos + 1
>2480	AdditiveExpression	pos + 1
>2481	PrimaryExpression	1
>2482	Identifier	pos
>2483	Callee	names [ i ] . substr
>2484	MemberAccess	names [ i ] . substr
>2485	Identifier	substr
>2486	ArrayIndexing	names [ i ]
>2487	Identifier	i
>2488	Identifier	names
>2489	Identifier	tmpString
>2490	Condition	 
>2491	EqualityExpression	pos != string 
>2492	Identifier	string 
>2493	Identifier	pos
>2494	IdentifierDeclStatement	 
>2495	IdentifierDecl	tmpString = names [ i ]
>2496	AssignmentExpr	tmpString = names [ i ]
>2497	ArrayIndexing	names [ i ]
>2498	Identifier	i
>2499	Identifier	names
>2500	Identifier	tmpString
>2501	Identifier	tmpString
>2502	IdentifierDeclType	string
>2503	IdentifierDeclStatement	 
>2504	IdentifierDecl	pos = names [ i ] . find_last_of ( \"/\" )
>2505	AssignmentExpr	pos = names [ i ] . find_last_of ( \"/\" )
>2506	CallExpression	names [ i ] . find_last_of ( \"/\" )
>2507	ArgumentList	\"/\"
>2508	Argument	\"/\"
>2509	PrimaryExpression	\"/\"
>2510	Callee	names [ i ] . find_last_of
>2511	MemberAccess	names [ i ] . find_last_of
>2512	Identifier	find_last_of
>2513	ArrayIndexing	names [ i ]
>2514	Identifier	i
>2515	Identifier	names
>2516	Identifier	pos
>2517	Identifier	pos
>2518	IdentifierDeclType	size_t
>2519	IdentifierDeclStatement	 
>2520	IdentifierDecl	tss = - 1
>2521	AssignmentExpr	tss = - 1
>2522	UnaryOp	- 1
>2523	PrimaryExpression	1
>2524	UnaryOperator	-
>2525	Identifier	tss
>2526	Identifier	tss
>2527	IdentifierDeclType	long
>2528	IdentifierDeclStatement	 
>2529	IdentifierDecl	id = - 1
>2530	AssignmentExpr	id = - 1
>2531	UnaryOp	- 1
>2532	PrimaryExpression	1
>2533	UnaryOperator	-
>2534	Identifier	id
>2535	Identifier	id
>2536	IdentifierDeclType	long
>2537	UnaryExpression	 
>2538	Identifier	i
>2539	IncDec	++
>2540	Condition	 
>2541	RelationalExpression	i < names . size ( )
>2542	CallExpression	names . size ( )
>2543	ArgumentList	 
>2544	Callee	names . size
>2545	MemberAccess	names . size
>2546	Identifier	size
>2547	Identifier	names
>2548	Identifier	i
>2549	ForInit	 
>2550	IdentifierDeclStatement	size_t i = 0 ;
>2551	IdentifierDecl	i = 0
>2552	AssignmentExpr	i = 0
>2553	PrimaryExpression	0
>2554	Identifier	i
>2555	Identifier	i
>2556	IdentifierDeclType	size_t
>2557	IdentifierDeclStatement	 
>2558	IdentifierDecl	ts
>2559	Identifier	ts
>2560	IdentifierDeclType	std 
>2584	FunctionDef	inlayVidNew1 (int argc , char * * argv)
>2585	ParameterList	int argc , char * * argv
>2586	Parameter	 
>2587	Identifier	argv
>2588	ParameterType	char * *
>2589	Parameter	 
>2590	Identifier	argc
>2591	ParameterType	int
>2592	ReturnType	int
>2593	CompoundStatement	 
>2594	ReturnStatement	 
>2595	PrimaryExpression	0
>2596	ForStatement	for ( int i = 0 ; i < pointcloudFiles . size ( ) ; i ++ )
>2597	CompoundStatement	 
>2598	ExpressionStatement	 
>2599	CallExpression	cv 
>2600	ArgumentList	10
>2601	Argument	10
>2602	PrimaryExpression	10
>2603	Callee	cv 
>2604	Identifier	cv 
>2605	ExpressionStatement	 
>2606	CallExpression	cv 
>2607	ArgumentList	\"vid\"
>2608	Argument	p
>2609	Identifier	p
>2610	Argument	\"vid\"
>2611	PrimaryExpression	\"vid\"
>2612	Callee	cv 
>2613	Identifier	cv 
>2614	ExpressionStatement	 
>2615	CallExpression	cv 
>2616	ArgumentList	buf
>2617	Argument	p
>2618	Identifier	p
>2619	Argument	buf
>2620	Identifier	buf
>2621	Callee	cv 
>2622	Identifier	cv 
>2623	ExpressionStatement	 
>2624	CallExpression	snprintf ( buf , 1000 , \"%s/img%05d.png\" , target . c_str ( ) , i )
>2625	ArgumentList	buf
>2626	Argument	i
>2627	Identifier	i
>2628	Argument	target . c_str ( )
>2629	CallExpression	target . c_str ( )
>2630	ArgumentList	 
>2631	Callee	target . c_str
>2632	MemberAccess	target . c_str
>2633	Identifier	c_str
>2634	Identifier	target
>2635	Argument	\"%s/img%05d.png\"
>2636	PrimaryExpression	\"%s/img%05d.png\"
>2637	Argument	1000
>2638	PrimaryExpression	1000
>2639	Argument	buf
>2640	Identifier	buf
>2641	Callee	snprintf
>2642	Identifier	snprintf
>2643	ExpressionStatement	 
>2644	CallExpression	smapped . copyTo ( p_roi_bot )
>2645	ArgumentList	p_roi_bot
>2646	Argument	p_roi_bot
>2647	Identifier	p_roi_bot
>2648	Callee	smapped . copyTo
>2649	MemberAccess	smapped . copyTo
>2650	Identifier	copyTo
>2651	Identifier	smapped
>2652	ExpressionStatement	 
>2653	CallExpression	stracked . copyTo ( p_roi_top )
>2654	ArgumentList	p_roi_top
>2655	Argument	p_roi_top
>2656	Identifier	p_roi_top
>2657	Callee	stracked . copyTo
>2658	MemberAccess	stracked . copyTo
>2659	Identifier	copyTo
>2660	Identifier	stracked
>2661	IdentifierDeclStatement	 
>2662	IdentifierDecl	buf [ 1000 ]
>2663	PrimaryExpression	1000
>2664	Identifier	buf
>2665	IdentifierDeclType	char [ 1000 ]
>2666	IdentifierDeclStatement	 
>2667	IdentifierDecl	p_roi_bot = p ( cv 
>2668	AssignmentExpr	p_roi_bot = p ( cv 
>2669	CallExpression	p ( cv 
>2670	ArgumentList	cv 
>2671	Argument	cv 
>2672	CallExpression	cv 
>2673	ArgumentList	7
>2674	Argument	osheight
>2675	Identifier	osheight
>2676	Argument	oswidth
>2677	Identifier	oswidth
>2678	Argument	7 + 8 + osheight
>2679	AdditiveExpression	7 + 8 + osheight
>2680	AdditiveExpression	8 + osheight
>2681	Identifier	osheight
>2682	PrimaryExpression	8
>2683	PrimaryExpression	7
>2684	Argument	7
>2685	PrimaryExpression	7
>2686	Callee	cv 
>2687	Identifier	cv 
>2688	Callee	p
>2689	Identifier	p
>2690	Identifier	p_roi_bot
>2691	Identifier	p_roi_bot
>2692	IdentifierDeclType	cv 
>2693	IdentifierDeclStatement	 
>2694	IdentifierDecl	p_roi_top = p ( cv 
>2695	AssignmentExpr	p_roi_top = p ( cv 
>2696	CallExpression	p ( cv 
>2697	ArgumentList	cv 
>2698	Argument	cv 
>2699	CallExpression	cv 
>2700	ArgumentList	7
>2701	Argument	osheight
>2702	Identifier	osheight
>2703	Argument	oswidth
>2704	Identifier	oswidth
>2705	Argument	7
>2706	PrimaryExpression	7
>2707	Argument	7
>2708	PrimaryExpression	7
>2709	Callee	cv 
>2710	Identifier	cv 
>2711	Callee	p
>2712	Identifier	p
>2713	Identifier	p_roi_top
>2714	Identifier	p_roi_top
>2715	IdentifierDeclType	cv 
>2716	ExpressionStatement	 
>2717	CallExpression	cv 
>2718	ArgumentList	tracked
>2719	Argument	cv 
>2720	CallExpression	cv 
>2721	ArgumentList	oswidth
>2722	Argument	osheight
>2723	Identifier	osheight
>2724	Argument	oswidth
>2725	Identifier	oswidth
>2726	Callee	cv 
>2727	Identifier	cv 
>2728	Argument	stracked
>2729	Identifier	stracked
>2730	Argument	tracked
>2731	Identifier	tracked
>2732	Callee	cv 
>2733	Identifier	cv 
>2734	IdentifierDeclStatement	 
>2735	IdentifierDecl	stracked = cv 
>2736	AssignmentExpr	stracked = cv 
>2737	CallExpression	cv 
>2738	ArgumentList	cv 
>2739	Argument	CV_8UC3
>2740	Identifier	CV_8UC3
>2741	Argument	cv 
>2742	CallExpression	cv 
>2743	ArgumentList	oswidth
>2744	Argument	osheight
>2745	Identifier	osheight
>2746	Argument	oswidth
>2747	Identifier	oswidth
>2748	Callee	cv 
>2749	Identifier	cv 
>2750	Callee	cv 
>2751	Identifier	cv 
>2752	Identifier	stracked
>2753	Identifier	stracked
>2754	IdentifierDeclType	cv 
>2755	ExpressionStatement	 
>2756	CallExpression	cv 
>2757	ArgumentList	mapped
>2758	Argument	cv 
>2759	CallExpression	cv 
>2760	ArgumentList	oswidth
>2761	Argument	osheight
>2762	Identifier	osheight
>2763	Argument	oswidth
>2764	Identifier	oswidth
>2765	Callee	cv 
>2766	Identifier	cv 
>2767	Argument	smapped
>2768	Identifier	smapped
>2769	Argument	mapped
>2770	Identifier	mapped
>2771	Callee	cv 
>2772	Identifier	cv 
>2773	IdentifierDeclStatement	 
>2774	IdentifierDecl	smapped = cv 
>2775	AssignmentExpr	smapped = cv 
>2776	CallExpression	cv 
>2777	ArgumentList	cv 
>2778	Argument	CV_8UC3
>2779	Identifier	CV_8UC3
>2780	Argument	cv 
>2781	CallExpression	cv 
>2782	ArgumentList	oswidth
>2783	Argument	osheight
>2784	Identifier	osheight
>2785	Argument	oswidth
>2786	Identifier	oswidth
>2787	Callee	cv 
>2788	Identifier	cv 
>2789	Callee	cv 
>2790	Identifier	cv 
>2791	Identifier	smapped
>2792	Identifier	smapped
>2793	IdentifierDeclType	cv 
>2794	IdentifierDeclStatement	 
>2795	IdentifierDecl	oswidth = 476
>2796	AssignmentExpr	oswidth = 476
>2797	PrimaryExpression	476
>2798	Identifier	oswidth
>2799	Identifier	oswidth
>2800	IdentifierDeclType	int
>2801	IdentifierDeclStatement	 
>2802	IdentifierDecl	osheight = 350
>2803	AssignmentExpr	osheight = 350
>2804	PrimaryExpression	350
>2805	Identifier	osheight
>2806	Identifier	osheight
>2807	IdentifierDeclType	int
>2808	ExpressionStatement	 
>2809	CallExpression	dilateColorImage ( & mapped , 5 , 5 )
>2810	ArgumentList	& mapped
>2811	Argument	5
>2812	PrimaryExpression	5
>2813	Argument	5
>2814	PrimaryExpression	5
>2815	Argument	& mapped
>2816	UnaryOp	& mapped
>2817	Identifier	mapped
>2818	UnaryOperator	&
>2819	Callee	dilateColorImage
>2820	Identifier	dilateColorImage
>2821	IdentifierDeclStatement	 
>2822	IdentifierDecl	tracked = cv 
>2823	AssignmentExpr	tracked = cv 
>2824	CallExpression	cv 
>2825	ArgumentList	odometryFilesTracked [ trackedIdx ]
>2826	Argument	odometryFilesTracked [ trackedIdx ]
>2827	ArrayIndexing	odometryFilesTracked [ trackedIdx ]
>2828	Identifier	trackedIdx
>2829	Identifier	odometryFilesTracked
>2830	Callee	cv 
>2831	Identifier	cv 
>2832	Identifier	tracked
>2833	Identifier	tracked
>2834	IdentifierDeclType	cv 
>2835	IdentifierDeclStatement	 
>2836	IdentifierDecl	mapped = cv 
>2837	AssignmentExpr	mapped = cv 
>2838	CallExpression	cv 
>2839	ArgumentList	odometryFilesMapped [ mappedIdx ]
>2840	Argument	odometryFilesMapped [ mappedIdx ]
>2841	ArrayIndexing	odometryFilesMapped [ mappedIdx ]
>2842	Identifier	mappedIdx
>2843	Identifier	odometryFilesMapped
>2844	Callee	cv 
>2845	Identifier	cv 
>2846	Identifier	mapped
>2847	Identifier	mapped
>2848	IdentifierDeclType	cv 
>2849	IdentifierDeclStatement	 
>2850	IdentifierDecl	p = cv 
>2851	AssignmentExpr	p = cv 
>2852	CallExpression	cv 
>2853	ArgumentList	pointcloudFiles [ i ]
>2854	Argument	pointcloudFiles [ i ]
>2855	ArrayIndexing	pointcloudFiles [ i ]
>2856	Identifier	i
>2857	Identifier	pointcloudFiles
>2858	Callee	cv 
>2859	Identifier	cv 
>2860	Identifier	p
>2861	Identifier	p
>2862	IdentifierDeclType	cv 
>2863	ForStatement	for ( int j = 0 ; j < trackedTimes . size ( ) ; j ++ )
>2864	IfStatement	if ( trackedTimes [ j ] <= pcTs && ( trackedTimes [ j ] - pcTs ) * ( trackedTimes [ j ] - pcTs ) < preDiff )
>2865	CompoundStatement	 
>2866	ExpressionStatement	 
>2867	AssignmentExpr	preDiff = ( trackedTimes [ j ] - pcTs ) * ( trackedTimes [ j ] - pcTs )
>2868	MultiplicativeExpression	( trackedTimes [ j ] - pcTs ) * ( trackedTimes [ j ] - pcTs )
>2869	AdditiveExpression	trackedTimes [ j ] - pcTs
>2870	Identifier	pcTs
>2871	ArrayIndexing	trackedTimes [ j ]
>2872	Identifier	j
>2873	Identifier	trackedTimes
>2874	AdditiveExpression	trackedTimes [ j ] - pcTs
>2875	Identifier	pcTs
>2876	ArrayIndexing	trackedTimes [ j ]
>2877	Identifier	j
>2878	Identifier	trackedTimes
>2879	Identifier	preDiff
>2880	ExpressionStatement	 
>2881	AssignmentExpr	trackedIdx = j
>2882	Identifier	j
>2883	Identifier	trackedIdx
>2884	Condition	 
>2885	AndExpression	trackedTimes [ j ] <= pcTs && ( trackedTimes [ j ] - pcTs ) * ( trackedTimes [ j ] - pcTs ) < preDiff
>2886	RelationalExpression	( trackedTimes [ j ] - pcTs ) * ( trackedTimes [ j ] - pcTs ) < preDiff
>2887	Identifier	preDiff
>2888	MultiplicativeExpression	( trackedTimes [ j ] - pcTs ) * ( trackedTimes [ j ] - pcTs )
>2889	AdditiveExpression	trackedTimes [ j ] - pcTs
>2890	Identifier	pcTs
>2891	ArrayIndexing	trackedTimes [ j ]
>2892	Identifier	j
>2893	Identifier	trackedTimes
>2894	AdditiveExpression	trackedTimes [ j ] - pcTs
>2895	Identifier	pcTs
>2896	ArrayIndexing	trackedTimes [ j ]
>2897	Identifier	j
>2898	Identifier	trackedTimes
>2899	RelationalExpression	trackedTimes [ j ] <= pcTs
>2900	Identifier	pcTs
>2901	ArrayIndexing	trackedTimes [ j ]
>2902	Identifier	j
>2903	Identifier	trackedTimes
>2904	IncDecOp	 
>2905	IncDec	++
>2906	Identifier	j
>2907	Condition	 
>2908	RelationalExpression	j < trackedTimes . size ( )
>2909	CallExpression	trackedTimes . size ( )
>2910	ArgumentList	 
>2911	Callee	trackedTimes . size
>2912	MemberAccess	trackedTimes . size
>2913	Identifier	size
>2914	Identifier	trackedTimes
>2915	Identifier	j
>2916	ForInit	 
>2917	IdentifierDeclStatement	int j = 0 ;
>2918	IdentifierDecl	j = 0
>2919	AssignmentExpr	j = 0
>2920	PrimaryExpression	0
>2921	Identifier	j
>2922	Identifier	j
>2923	IdentifierDeclType	int
>2924	ExpressionStatement	 
>2925	AssignmentExpr	preDiff = 10000
>2926	PrimaryExpression	10000
>2927	Identifier	preDiff
>2928	ForStatement	for ( int j = 0 ; j < mappedTimes . size ( ) ; j ++ )
>2929	IfStatement	if ( ( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) ) * ( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) ) < \
>2930	CompoundStatement	 
>2931	ExpressionStatement	 
>2932	AssignmentExpr	preDiff = ( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) ) * ( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) )
>2933	MultiplicativeExpression	( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) ) * ( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) )
>2934	AdditiveExpression	mappedTimes [ j ] - ( pcTs - fixedMappingOffset )
>2935	AdditiveExpression	pcTs - fixedMappingOffset
>2936	Identifier	fixedMappingOffset
>2937	Identifier	pcTs
>2938	ArrayIndexing	mappedTimes [ j ]
>2939	Identifier	j
>2940	Identifier	mappedTimes
>2941	AdditiveExpression	mappedTimes [ j ] - ( pcTs - fixedMappingOffset )
>2942	AdditiveExpression	pcTs - fixedMappingOffset
>2943	Identifier	fixedMappingOffset
>2944	Identifier	pcTs
>2945	ArrayIndexing	mappedTimes [ j ]
>2946	Identifier	j
>2947	Identifier	mappedTimes
>2948	Identifier	preDiff
>2949	ExpressionStatement	 
>2950	AssignmentExpr	mappedIdx = j
>2951	Identifier	j
>2952	Identifier	mappedIdx
>2953	Condition	 
>2954	RelationalExpression	( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) ) * ( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) ) < \
>2955	Identifier	preDiff
>2956	MultiplicativeExpression	( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) ) * ( mappedTimes [ j ] - ( pcTs - fixedMappingOffset ) )
>2957	AdditiveExpression	mappedTimes [ j ] - ( pcTs - fixedMappingOffset )
>2958	AdditiveExpression	pcTs - fixedMappingOffset
>2959	Identifier	fixedMappingOffset
>2960	Identifier	pcTs
>2961	ArrayIndexing	mappedTimes [ j ]
>2962	Identifier	j
>2963	Identifier	mappedTimes
>2964	AdditiveExpression	mappedTimes [ j ] - ( pcTs - fixedMappingOffset )
>2965	AdditiveExpression	pcTs - fixedMappingOffset
>2966	Identifier	fixedMappingOffset
>2967	Identifier	pcTs
>2968	ArrayIndexing	mappedTimes [ j ]
>2969	Identifier	j
>2970	Identifier	mappedTimes
>2971	IncDecOp	 
>2972	IncDec	++
>2973	Identifier	j
>2974	Condition	 
>2975	RelationalExpression	j < mappedTimes . size ( )
>2976	CallExpression	mappedTimes . size ( )
>2977	ArgumentList	 
>2978	Callee	mappedTimes . size
>2979	MemberAccess	mappedTimes . size
>2980	Identifier	size
>2981	Identifier	mappedTimes
>2982	Identifier	j
>2983	ForInit	 
>2984	IdentifierDeclStatement	int j = 0 ;
>2985	IdentifierDecl	j = 0
>2986	AssignmentExpr	j = 0
>2987	PrimaryExpression	0
>2988	Identifier	j
>2989	Identifier	j
>2990	IdentifierDeclType	int
>2991	IdentifierDeclStatement	 
>2992	IdentifierDecl	preDiff = 10000000
>2993	AssignmentExpr	preDiff = 10000000
>2994	PrimaryExpression	10000000
>2995	Identifier	preDiff
>2996	Identifier	preDiff
>2997	IdentifierDeclType	int
>2998	IdentifierDeclStatement	 
>2999	IdentifierDecl	trackedIdx = 0
>3000	AssignmentExpr	trackedIdx = 0
>3001	PrimaryExpression	0
>3002	Identifier	trackedIdx
>3003	Identifier	trackedIdx
>3004	IdentifierDeclType	int
>3005	IdentifierDecl	mappedIdx = 0
>3006	AssignmentExpr	mappedIdx = 0
>3007	PrimaryExpression	0
>3008	Identifier	mappedIdx
>3009	Identifier	mappedIdx
>3010	IdentifierDeclType	int
>3011	IdentifierDeclStatement	 
>3012	IdentifierDecl	pcTs = pcTimes [ i ]
>3013	AssignmentExpr	pcTs = pcTimes [ i ]
>3014	ArrayIndexing	pcTimes [ i ]
>3015	Identifier	i
>3016	Identifier	pcTimes
>3017	Identifier	pcTs
>3018	Identifier	pcTs
>3019	IdentifierDeclType	long
>3020	IncDecOp	 
>3021	IncDec	++
>3022	Identifier	i
>3023	Condition	 
>3024	RelationalExpression	i < pointcloudFiles . size ( )
>3025	CallExpression	pointcloudFiles . size ( )
>3026	ArgumentList	 
>3027	Callee	pointcloudFiles . size
>3028	MemberAccess	pointcloudFiles . size
>3029	Identifier	size
>3030	Identifier	pointcloudFiles
>3031	Identifier	i
>3032	ForInit	 
>3033	IdentifierDeclStatement	int i = 0 ;
>3034	IdentifierDecl	i = 0
>3035	AssignmentExpr	i = 0
>3036	PrimaryExpression	0
>3037	Identifier	i
>3038	Identifier	i
>3039	IdentifierDeclType	int
>3040	IdentifierDeclStatement	 
>3041	IdentifierDecl	fixedMappingOffset = 200
>3042	AssignmentExpr	fixedMappingOffset = 200
>3043	PrimaryExpression	200
>3044	Identifier	fixedMappingOffset
>3045	Identifier	fixedMappingOffset
>3046	IdentifierDeclType	int
>3047	IfStatement	if ( ! system ( ( \"mkdir \" + target ) . c_str ( ) ) )
>3048	ExpressionStatement	 
>3049	CallExpression	printf ( \"system call failed!\" )
>3050	ArgumentList	\"system call failed!\"
>3051	Argument	\"system call failed!\"
>3052	PrimaryExpression	\"system call failed!\"
>3053	Callee	printf
>3054	Identifier	printf
>3055	Condition	 
>3056	UnaryOp	! system ( ( \"mkdir \" + target ) . c_str ( ) )
>3057	CallExpression	system ( ( \"mkdir \" + target ) . c_str ( ) )
>3058	ArgumentList	( \"mkdir \" + target ) . c_str ( )
>3059	Argument	( \"mkdir \" + target ) . c_str ( )
>3060	CallExpression	( \"mkdir \" + target ) . c_str ( )
>3061	ArgumentList	 
>3062	Callee	( \"mkdir \" + target ) . c_str
>3063	MemberAccess	( \"mkdir \" + target ) . c_str
>3064	Identifier	c_str
>3065	AdditiveExpression	\"mkdir \" + target
>3066	Identifier	target
>3067	PrimaryExpression	\"mkdir \"
>3068	Callee	system
>3069	Identifier	system
>3070	UnaryOperator	!
>3071	IfStatement	if ( ! system ( ( \"rm -rf \" + target ) . c_str ( ) ) )
>3072	ExpressionStatement	 
>3073	CallExpression	printf ( \"system call failed!\" )
>3074	ArgumentList	\"system call failed!\"
>3075	Argument	\"system call failed!\"
>3076	PrimaryExpression	\"system call failed!\"
>3077	Callee	printf
>3078	Identifier	printf
>3079	Condition	 
>3080	UnaryOp	! system ( ( \"rm -rf \" + target ) . c_str ( ) )
>3081	CallExpression	system ( ( \"rm -rf \" + target ) . c_str ( ) )
>3082	ArgumentList	( \"rm -rf \" + target ) . c_str ( )
>3083	Argument	( \"rm -rf \" + target ) . c_str ( )
>3084	CallExpression	( \"rm -rf \" + target ) . c_str ( )
>3085	ArgumentList	 
>3086	Callee	( \"rm -rf \" + target ) . c_str
>3087	MemberAccess	( \"rm -rf \" + target ) . c_str
>3088	Identifier	c_str
>3089	AdditiveExpression	\"rm -rf \" + target
>3090	Identifier	target
>3091	PrimaryExpression	\"rm -rf \"
>3092	Callee	system
>3093	Identifier	system
>3094	UnaryOperator	!
>3095	IdentifierDeclStatement	 
>3096	IdentifierDecl	trackedTimes = getTimestamps ( odometryFilesTracked , \"tracked\" )
>3097	AssignmentExpr	trackedTimes = getTimestamps ( odometryFilesTracked , \"tracked\" )
>3098	CallExpression	getTimestamps ( odometryFilesTracked , \"tracked\" )
>3099	ArgumentList	odometryFilesTracked
>3100	Argument	\"tracked\"
>3101	PrimaryExpression	\"tracked\"
>3102	Argument	odometryFilesTracked
>3103	Identifier	odometryFilesTracked
>3104	Callee	getTimestamps
>3105	Identifier	getTimestamps
>3106	Identifier	trackedTimes
>3107	Identifier	trackedTimes
>3108	IdentifierDeclType	std 
>3109	IdentifierDeclStatement	 
>3110	IdentifierDecl	mappedTimes = getTimestamps ( odometryFilesMapped , \"mapped\" )
>3111	AssignmentExpr	mappedTimes = getTimestamps ( odometryFilesMapped , \"mapped\" )
>3112	CallExpression	getTimestamps ( odometryFilesMapped , \"mapped\" )
>3113	ArgumentList	odometryFilesMapped
>3114	Argument	\"mapped\"
>3115	PrimaryExpression	\"mapped\"
>3116	Argument	odometryFilesMapped
>3117	Identifier	odometryFilesMapped
>3118	Callee	getTimestamps
>3119	Identifier	getTimestamps
>3120	Identifier	mappedTimes
>3121	Identifier	mappedTimes
>3122	IdentifierDeclType	std 
>3123	IdentifierDeclStatement	 
>3124	IdentifierDecl	pcTimes = getTimestamps ( pointcloudFiles , \"\" )
>3125	AssignmentExpr	pcTimes = getTimestamps ( pointcloudFiles , \"\" )
>3126	CallExpression	getTimestamps ( pointcloudFiles , \"\" )
>3127	ArgumentList	pointcloudFiles
>3128	Argument	\"\"
>3129	PrimaryExpression	\"\"
>3130	Argument	pointcloudFiles
>3131	Identifier	pointcloudFiles
>3132	Callee	getTimestamps
>3133	Identifier	getTimestamps
>3134	Identifier	pcTimes
>3135	Identifier	pcTimes
>3136	IdentifierDeclType	std 
>3137	ExpressionStatement	 
>3138	CallExpression	std 
>3139	ArgumentList	odometryFilesTracked . begin ( )
>3140	Argument	odometryFilesTracked . end ( )
>3141	CallExpression	odometryFilesTracked . end ( )
>3142	ArgumentList	 
>3143	Callee	odometryFilesTracked . end
>3144	MemberAccess	odometryFilesTracked . end
>3145	Identifier	end
>3146	Identifier	odometryFilesTracked
>3147	Argument	odometryFilesTracked . begin ( )
>3148	CallExpression	odometryFilesTracked . begin ( )
>3149	ArgumentList	 
>3150	Callee	odometryFilesTracked . begin
>3151	MemberAccess	odometryFilesTracked . begin
>3152	Identifier	begin
>3153	Identifier	odometryFilesTracked
>3154	Callee	std 
>3155	Identifier	std 
>3156	ExpressionStatement	 
>3157	CallExpression	std 
>3158	ArgumentList	odometryFilesMapped . begin ( )
>3159	Argument	odometryFilesMapped . end ( )
>3160	CallExpression	odometryFilesMapped . end ( )
>3161	ArgumentList	 
>3162	Callee	odometryFilesMapped . end
>3163	MemberAccess	odometryFilesMapped . end
>3164	Identifier	end
>3165	Identifier	odometryFilesMapped
>3166	Argument	odometryFilesMapped . begin ( )
>3167	CallExpression	odometryFilesMapped . begin ( )
>3168	ArgumentList	 
>3169	Callee	odometryFilesMapped . begin
>3170	MemberAccess	odometryFilesMapped . begin
>3171	Identifier	begin
>3172	Identifier	odometryFilesMapped
>3173	Callee	std 
>3174	Identifier	std 
>3175	ExpressionStatement	 
>3176	CallExpression	std 
>3177	ArgumentList	pointcloudFiles . begin ( )
>3178	Argument	pointcloudFiles . end ( )
>3179	CallExpression	pointcloudFiles . end ( )
>3180	ArgumentList	 
>3181	Callee	pointcloudFiles . end
>3182	MemberAccess	pointcloudFiles . end
>3183	Identifier	end
>3184	Identifier	pointcloudFiles
>3185	Argument	pointcloudFiles . begin ( )
>3186	CallExpression	pointcloudFiles . begin ( )
>3187	ArgumentList	 
>3188	Callee	pointcloudFiles . begin
>3189	MemberAccess	pointcloudFiles . begin
>3190	Identifier	begin
>3191	Identifier	pointcloudFiles
>3192	Callee	std 
>3193	Identifier	std 
>3194	ExpressionStatement	 
>3195	CallExpression	printf ( \"pcFiles
>3196	ArgumentList	\"pcFiles
>3197	Argument	odometryFilesTracked . size ( )
>3198	CallExpression	odometryFilesTracked . size ( )
>3199	ArgumentList	 
>3200	Callee	odometryFilesTracked . size
>3201	MemberAccess	odometryFilesTracked . size
>3202	Identifier	size
>3203	Identifier	odometryFilesTracked
>3204	Argument	odometryFilesMapped . size ( )
>3205	CallExpression	odometryFilesMapped . size ( )
>3206	ArgumentList	 
>3207	Callee	odometryFilesMapped . size
>3208	MemberAccess	odometryFilesMapped . size
>3209	Identifier	size
>3210	Identifier	odometryFilesMapped
>3211	Argument	pointcloudFiles . size ( )
>3212	CallExpression	pointcloudFiles . size ( )
>3213	ArgumentList	 
>3214	Callee	pointcloudFiles . size
>3215	MemberAccess	pointcloudFiles . size
>3216	Identifier	size
>3217	Identifier	pointcloudFiles
>3218	Argument	\"pcFiles
>3219	PrimaryExpression	\"pcFiles
>3220	Callee	printf
>3221	Identifier	printf
>3222	IdentifierDeclStatement	 
>3223	IdentifierDecl	target = \"/home/engelj/fuerte_workspace/bags/videoData/stitched-slam8\"
>3224	AssignmentExpr	target = \"/home/engelj/fuerte_workspace/bags/videoData/stitched-slam8\"
>3225	PrimaryExpression	\"/home/engelj/fuerte_workspace/bags/videoData/stitched-slam8\"
>3226	Identifier	target
>3227	Identifier	target
>3228	IdentifierDeclType	std 
>3229	IdentifierDeclStatement	 
>3230	IdentifierDecl	odometryFilesTracked = getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\" , \"tracked-\" )
>3231	AssignmentExpr	odometryFilesTracked = getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\" , \"\
>3232	CallExpression	getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\" , \"tracked-\" )
>3233	ArgumentList	\"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\"
>3234	Argument	\"tracked-\"
>3235	PrimaryExpression	\"tracked-\"
>3236	Argument	\"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\"
>3237	PrimaryExpression	\"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\"
>3238	Callee	getFileList
>3239	Identifier	getFileList
>3240	Identifier	odometryFilesTracked
>3241	Identifier	odometryFilesTracked
>3242	IdentifierDeclType	std 
>3243	IdentifierDeclStatement	 
>3244	IdentifierDecl	odometryFilesMapped = getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\" , \"mapped-\" )
>3245	AssignmentExpr	odometryFilesMapped = getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\" , \"\
>3246	CallExpression	getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\" , \"mapped-\" )
>3247	ArgumentList	\"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\"
>3248	Argument	\"mapped-\"
>3249	PrimaryExpression	\"mapped-\"
>3250	Argument	\"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\"
>3251	PrimaryExpression	\"/home/engelj/fuerte_workspace/bags/videoData/odometry-slam8-02/\"
>3252	Callee	getFileList
>3253	Identifier	getFileList
>3254	Identifier	odometryFilesMapped
>3255	Identifier	odometryFilesMapped
>3256	IdentifierDeclType	std 
>3257	IdentifierDeclStatement	 
>3258	IdentifierDecl	pointcloudFiles = getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/pc-slam8/\" , \"\" )
>3259	AssignmentExpr	pointcloudFiles = getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/pc-slam8/\" , \"\" )
>3260	CallExpression	getFileList ( \"/home/engelj/fuerte_workspace/bags/videoData/pc-slam8/\" , \"\" )
>3261	ArgumentList	\"/home/engelj/fuerte_workspace/bags/videoData/pc-slam8/\"
>3262	Argument	\"\"
>3263	PrimaryExpression	\"\"
>3264	Argument	\"/home/engelj/fuerte_workspace/bags/videoData/pc-slam8/\"
>3265	PrimaryExpression	\"/home/engelj/fuerte_workspace/bags/videoData/pc-slam8/\"
>3266	Callee	getFileList
>3267	Identifier	getFileList
>3268	Identifier	pointcloudFiles
>3269	Identifier	pointcloudFiles
>3270	IdentifierDeclType	std 
>3271	ExpressionStatement	 
>3272	CallExpression	printf ( \"inlayVidNew12\n\" )
>3273	ArgumentList	\"inlayVidNew12\n\"
>3274	Argument	\"inlayVidNew12\n\"
>3275	PrimaryExpression	\"inlayVidNew12\n\"
>3276	Callee	printf
>3277	Identifier	printf
>3340	FunctionDef	inlayVid (int argc , char * * argv)
>3341	ParameterList	int argc , char * * argv
>3342	Parameter	 
>3343	Identifier	argv
>3344	ParameterType	char * *
>3345	Parameter	 
>3346	Identifier	argc
>3347	ParameterType	int
>3348	ReturnType	int
>3349	CompoundStatement	 
>3350	ReturnStatement	 
>3351	PrimaryExpression	0
>3352	ForStatement	for ( int i = 0 ; i < pointcloudFiles . size ( ) ; i ++ )
>3353	CompoundStatement	 
>3354	ExpressionStatement	 
>3355	IncDecOp	c ++
>3356	IncDec	++
>3357	Identifier	c
>3358	ExpressionStatement	 
>3359	CallExpression	cv 
>3360	ArgumentList	10
>3361	Argument	10
>3362	PrimaryExpression	10
>3363	Callee	cv 
>3364	Identifier	cv 
>3365	ExpressionStatement	 
>3366	CallExpression	cv 
>3367	ArgumentList	\"out\"
>3368	Argument	p
>3369	Identifier	p
>3370	Argument	\"out\"
>3371	PrimaryExpression	\"out\"
>3372	Callee	cv 
>3373	Identifier	cv 
>3374	ExpressionStatement	 
>3375	CallExpression	cv 
>3376	ArgumentList	buf
>3377	Argument	p
>3378	Identifier	p
>3379	Argument	buf
>3380	Identifier	buf
>3381	Callee	cv 
>3382	Identifier	cv 
>3383	ExpressionStatement	 
>3384	CallExpression	snprintf ( buf , 1000 , \"save_output_idepth/img%03d.png\" , c )
>3385	ArgumentList	buf
>3386	Argument	c
>3387	Identifier	c
>3388	Argument	\"save_output_idepth/img%03d.png\"
>3389	PrimaryExpression	\"save_output_idepth/img%03d.png\"
>3390	Argument	1000
>3391	PrimaryExpression	1000
>3392	Argument	buf
>3393	Identifier	buf
>3394	Callee	snprintf
>3395	Identifier	snprintf
>3396	ExpressionStatement	 
>3397	CallExpression	osStereo . copyTo ( p_roi_bot )
>3398	ArgumentList	p_roi_bot
>3399	Argument	p_roi_bot
>3400	Identifier	p_roi_bot
>3401	Callee	osStereo . copyTo
>3402	MemberAccess	osStereo . copyTo
>3403	Identifier	copyTo
>3404	Identifier	osStereo
>3405	ExpressionStatement	 
>3406	CallExpression	osVar . copyTo ( p_roi_mid )
>3407	ArgumentList	p_roi_mid
>3408	Argument	p_roi_mid
>3409	Identifier	p_roi_mid
>3410	Callee	osVar . copyTo
>3411	MemberAccess	osVar . copyTo
>3412	Identifier	copyTo
>3413	Identifier	osVar
>3414	ExpressionStatement	 
>3415	CallExpression	osIdepth . copyTo ( p_roi_top )
>3416	ArgumentList	p_roi_top
>3417	Argument	p_roi_top
>3418	Identifier	p_roi_top
>3419	Callee	osIdepth . copyTo
>3420	MemberAccess	osIdepth . copyTo
>3421	Identifier	copyTo
>3422	Identifier	osIdepth
>3423	IdentifierDeclStatement	 
>3424	IdentifierDecl	p_roi_bot = p ( cv 
>3425	AssignmentExpr	p_roi_bot = p ( cv 
>3426	CallExpression	p ( cv 
>3427	ArgumentList	cv 
>3428	Argument	cv 
>3429	CallExpression	cv 
>3430	ArgumentList	5
>3431	Argument	osheight
>3432	Identifier	osheight
>3433	Argument	oswidth
>3434	Identifier	oswidth
>3435	Argument	16 + 2 * osheight
>3436	AdditiveExpression	16 + 2 * osheight
>3437	MultiplicativeExpression	2 * osheight
>3438	Identifier	osheight
>3439	PrimaryExpression	2
>3440	PrimaryExpression	16
>3441	Argument	5
>3442	PrimaryExpression	5
>3443	Callee	cv 
>3444	Identifier	cv 
>3445	Callee	p
>3446	Identifier	p
>3447	Identifier	p_roi_bot
>3448	Identifier	p_roi_bot
>3449	IdentifierDeclType	cv 
>3450	IdentifierDeclStatement	 
>3451	IdentifierDecl	p_roi_mid = p ( cv 
>3452	AssignmentExpr	p_roi_mid = p ( cv 
>3453	CallExpression	p ( cv 
>3454	ArgumentList	cv 
>3455	Argument	cv 
>3456	CallExpression	cv 
>3457	ArgumentList	5
>3458	Argument	osheight
>3459	Identifier	osheight
>3460	Argument	oswidth
>3461	Identifier	oswidth
>3462	Argument	11 + osheight
>3463	AdditiveExpression	11 + osheight
>3464	Identifier	osheight
>3465	PrimaryExpression	11
>3466	Argument	5
>3467	PrimaryExpression	5
>3468	Callee	cv 
>3469	Identifier	cv 
>3470	Callee	p
>3471	Identifier	p
>3472	Identifier	p_roi_mid
>3473	Identifier	p_roi_mid
>3474	IdentifierDeclType	cv 
>3475	IdentifierDeclStatement	 
>3476	IdentifierDecl	p_roi_top = p ( cv 
>3477	AssignmentExpr	p_roi_top = p ( cv 
>3478	CallExpression	p ( cv 
>3479	ArgumentList	cv 
>3480	Argument	cv 
>3481	CallExpression	cv 
>3482	ArgumentList	5
>3483	Argument	osheight
>3484	Identifier	osheight
>3485	Argument	oswidth
>3486	Identifier	oswidth
>3487	Argument	5
>3488	PrimaryExpression	5
>3489	Argument	5
>3490	PrimaryExpression	5
>3491	Callee	cv 
>3492	Identifier	cv 
>3493	Callee	p
>3494	Identifier	p
>3495	Identifier	p_roi_top
>3496	Identifier	p_roi_top
>3497	IdentifierDeclType	cv 
>3498	ExpressionStatement	 
>3499	CallExpression	cv 
>3500	ArgumentList	oStereo
>3501	Argument	cv 
>3502	CallExpression	cv 
>3503	ArgumentList	oswidth
>3504	Argument	osheight
>3505	Identifier	osheight
>3506	Argument	oswidth
>3507	Identifier	oswidth
>3508	Callee	cv 
>3509	Identifier	cv 
>3510	Argument	osStereo
>3511	Identifier	osStereo
>3512	Argument	oStereo
>3513	Identifier	oStereo
>3514	Callee	cv 
>3515	Identifier	cv 
>3516	IdentifierDeclStatement	 
>3517	IdentifierDecl	osStereo = cv 
>3518	AssignmentExpr	osStereo = cv 
>3519	CallExpression	cv 
>3520	ArgumentList	cv 
>3521	Argument	CV_8UC3
>3522	Identifier	CV_8UC3
>3523	Argument	cv 
>3524	CallExpression	cv 
>3525	ArgumentList	oswidth
>3526	Argument	osheight
>3527	Identifier	osheight
>3528	Argument	oswidth
>3529	Identifier	oswidth
>3530	Callee	cv 
>3531	Identifier	cv 
>3532	Callee	cv 
>3533	Identifier	cv 
>3534	Identifier	osStereo
>3535	Identifier	osStereo
>3536	IdentifierDeclType	cv 
>3537	ExpressionStatement	 
>3538	CallExpression	cv 
>3539	ArgumentList	oVar
>3540	Argument	cv 
>3541	CallExpression	cv 
>3542	ArgumentList	oswidth
>3543	Argument	osheight
>3544	Identifier	osheight
>3545	Argument	oswidth
>3546	Identifier	oswidth
>3547	Callee	cv 
>3548	Identifier	cv 
>3549	Argument	osVar
>3550	Identifier	osVar
>3551	Argument	oVar
>3552	Identifier	oVar
>3553	Callee	cv 
>3554	Identifier	cv 
>3555	IdentifierDeclStatement	 
>3556	IdentifierDecl	osVar = cv 
>3557	AssignmentExpr	osVar = cv 
>3558	CallExpression	cv 
>3559	ArgumentList	cv 
>3560	Argument	CV_8UC3
>3561	Identifier	CV_8UC3
>3562	Argument	cv 
>3563	CallExpression	cv 
>3564	ArgumentList	oswidth
>3565	Argument	osheight
>3566	Identifier	osheight
>3567	Argument	oswidth
>3568	Identifier	oswidth
>3569	Callee	cv 
>3570	Identifier	cv 
>3571	Callee	cv 
>3572	Identifier	cv 
>3573	Identifier	osVar
>3574	Identifier	osVar
>3575	IdentifierDeclType	cv 
>3576	ExpressionStatement	 
>3577	CallExpression	cv 
>3578	ArgumentList	oIdepth
>3579	Argument	cv 
>3580	CallExpression	cv 
>3581	ArgumentList	oswidth
>3582	Argument	osheight
>3583	Identifier	osheight
>3584	Argument	oswidth
>3585	Identifier	oswidth
>3586	Callee	cv 
>3587	Identifier	cv 
>3588	Argument	osIdepth
>3589	Identifier	osIdepth
>3590	Argument	oIdepth
>3591	Identifier	oIdepth
>3592	Callee	cv 
>3593	Identifier	cv 
>3594	IdentifierDeclStatement	 
>3595	IdentifierDecl	osIdepth = cv 
>3596	AssignmentExpr	osIdepth = cv 
>3597	CallExpression	cv 
>3598	ArgumentList	cv 
>3599	Argument	CV_8UC3
>3600	Identifier	CV_8UC3
>3601	Argument	cv 
>3602	CallExpression	cv 
>3603	ArgumentList	oswidth
>3604	Argument	osheight
>3605	Identifier	osheight
>3606	Argument	oswidth
>3607	Identifier	oswidth
>3608	Callee	cv 
>3609	Identifier	cv 
>3610	Callee	cv 
>3611	Identifier	cv 
>3612	Identifier	osIdepth
>3613	Identifier	osIdepth
>3614	IdentifierDeclType	cv 
>3615	ExpressionStatement	 
>3616	CallExpression	cv 
>3617	ArgumentList	oAge
>3618	Argument	cv 
>3619	CallExpression	cv 
>3620	ArgumentList	oswidth
>3621	Argument	osheight
>3622	Identifier	osheight
>3623	Argument	oswidth
>3624	Identifier	oswidth
>3625	Callee	cv 
>3626	Identifier	cv 
>3627	Argument	osAge
>3628	Identifier	osAge
>3629	Argument	oAge
>3630	Identifier	oAge
>3631	Callee	cv 
>3632	Identifier	cv 
>3633	IdentifierDeclStatement	 
>3634	IdentifierDecl	osAge = cv 
>3635	AssignmentExpr	osAge = cv 
>3636	CallExpression	cv 
>3637	ArgumentList	cv 
>3638	Argument	CV_8UC3
>3639	Identifier	CV_8UC3
>3640	Argument	cv 
>3641	CallExpression	cv 
>3642	ArgumentList	oswidth
>3643	Argument	osheight
>3644	Identifier	osheight
>3645	Argument	oswidth
>3646	Identifier	oswidth
>3647	Callee	cv 
>3648	Identifier	cv 
>3649	Callee	cv 
>3650	Identifier	cv 
>3651	Identifier	osAge
>3652	Identifier	osAge
>3653	IdentifierDeclType	cv 
>3654	IdentifierDeclStatement	 
>3655	IdentifierDecl	oswidth = 311
>3656	AssignmentExpr	oswidth = 311
>3657	PrimaryExpression	311
>3658	Identifier	oswidth
>3659	Identifier	oswidth
>3660	IdentifierDeclType	int
>3661	IdentifierDeclStatement	 
>3662	IdentifierDecl	osheight = 233
>3663	AssignmentExpr	osheight = 233
>3664	PrimaryExpression	233
>3665	Identifier	osheight
>3666	Identifier	osheight
>3667	IdentifierDeclType	int
>3668	ForStatement	for ( int px = 0 ; px < oStereo . cols * oStereo . rows ; px ++ )
>3669	CompoundStatement	 
>3670	IfStatement	if ( oStereo . data [ 3 * px + 0 ] == oStereo . data [ 3 * px + 1 ] && oStereo . data [ 3 * px + 0 ] == oStereo \
>3671	ExpressionStatement	 
>3672	AssignmentExpr	oStereo . data [ 3 * px + 0 ] = oStereo . data [ 3 * px + 1 ] = oStereo . data [ 3 * px + 2 ] = 200
>3673	AssignmentExpr	oStereo . data [ 3 * px + 1 ] = oStereo . data [ 3 * px + 2 ] = 200
>3674	AssignmentExpr	oStereo . data [ 3 * px + 2 ] = 200
>3675	PrimaryExpression	200
>3676	ArrayIndexing	oStereo . data [ 3 * px + 2 ]
>3677	AdditiveExpression	3 * px + 2
>3678	PrimaryExpression	2
>3679	MultiplicativeExpression	3 * px
>3680	Identifier	px
>3681	PrimaryExpression	3
>3682	MemberAccess	oStereo . data
>3683	Identifier	data
>3684	Identifier	oStereo
>3685	ArrayIndexing	oStereo . data [ 3 * px + 1 ]
>3686	AdditiveExpression	3 * px + 1
>3687	PrimaryExpression	1
>3688	MultiplicativeExpression	3 * px
>3689	Identifier	px
>3690	PrimaryExpression	3
>3691	MemberAccess	oStereo . data
>3692	Identifier	data
>3693	Identifier	oStereo
>3694	ArrayIndexing	oStereo . data [ 3 * px + 0 ]
>3695	AdditiveExpression	3 * px + 0
>3696	PrimaryExpression	0
>3697	MultiplicativeExpression	3 * px
>3698	Identifier	px
>3699	PrimaryExpression	3
>3700	MemberAccess	oStereo . data
>3701	Identifier	data
>3702	Identifier	oStereo
>3703	Condition	 
>3704	AndExpression	oStereo . data [ 3 * px + 0 ] == oStereo . data [ 3 * px + 1 ] && oStereo . data [ 3 * px + 0 ] == oStereo \
>3705	EqualityExpression	oStereo . data [ 3 * px + 0 ] == oStereo . data [ 3 * px + 2 ]
>3706	ArrayIndexing	oStereo . data [ 3 * px + 2 ]
>3707	AdditiveExpression	3 * px + 2
>3708	PrimaryExpression	2
>3709	MultiplicativeExpression	3 * px
>3710	Identifier	px
>3711	PrimaryExpression	3
>3712	MemberAccess	oStereo . data
>3713	Identifier	data
>3714	Identifier	oStereo
>3715	ArrayIndexing	oStereo . data [ 3 * px + 0 ]
>3716	AdditiveExpression	3 * px + 0
>3717	PrimaryExpression	0
>3718	MultiplicativeExpression	3 * px
>3719	Identifier	px
>3720	PrimaryExpression	3
>3721	MemberAccess	oStereo . data
>3722	Identifier	data
>3723	Identifier	oStereo
>3724	EqualityExpression	oStereo . data [ 3 * px + 0 ] == oStereo . data [ 3 * px + 1 ]
>3725	ArrayIndexing	oStereo . data [ 3 * px + 1 ]
>3726	AdditiveExpression	3 * px + 1
>3727	PrimaryExpression	1
>3728	MultiplicativeExpression	3 * px
>3729	Identifier	px
>3730	PrimaryExpression	3
>3731	MemberAccess	oStereo . data
>3732	Identifier	data
>3733	Identifier	oStereo
>3734	ArrayIndexing	oStereo . data [ 3 * px + 0 ]
>3735	AdditiveExpression	3 * px + 0
>3736	PrimaryExpression	0
>3737	MultiplicativeExpression	3 * px
>3738	Identifier	px
>3739	PrimaryExpression	3
>3740	MemberAccess	oStereo . data
>3741	Identifier	data
>3742	Identifier	oStereo
>3743	IncDecOp	 
>3744	IncDec	++
>3745	Identifier	px
>3746	Condition	 
>3747	RelationalExpression	px < oStereo . cols * oStereo . rows
>3748	MultiplicativeExpression	oStereo . cols * oStereo . rows
>3749	MemberAccess	oStereo . rows
>3750	Identifier	rows
>3751	Identifier	oStereo
>3752	MemberAccess	oStereo . cols
>3753	Identifier	cols
>3754	Identifier	oStereo
>3755	Identifier	px
>3756	ForInit	 
>3757	IdentifierDeclStatement	int px = 0 ;
>3758	IdentifierDecl	px = 0
>3759	AssignmentExpr	px = 0
>3760	PrimaryExpression	0
>3761	Identifier	px
>3762	Identifier	px
>3763	IdentifierDeclType	int
>3764	IdentifierDeclStatement	 
>3765	IdentifierDecl	oStereo = cv 
>3766	AssignmentExpr	oStereo = cv 
>3767	CallExpression	cv 
>3768	ArgumentList	odometryFilesStereo [ mindiffIDX ]
>3769	Argument	odometryFilesStereo [ mindiffIDX ]
>3770	ArrayIndexing	odometryFilesStereo [ mindiffIDX ]
>3771	Identifier	mindiffIDX
>3772	Identifier	odometryFilesStereo
>3773	Callee	cv 
>3774	Identifier	cv 
>3775	Identifier	oStereo
>3776	Identifier	oStereo
>3777	IdentifierDeclType	cv 
>3778	IdentifierDeclStatement	 
>3779	IdentifierDecl	oVar = cv 
>3780	AssignmentExpr	oVar = cv 
>3781	CallExpression	cv 
>3782	ArgumentList	odometryFilesVar [ mindiffIDX ]
>3783	Argument	odometryFilesVar [ mindiffIDX ]
>3784	ArrayIndexing	odometryFilesVar [ mindiffIDX ]
>3785	Identifier	mindiffIDX
>3786	Identifier	odometryFilesVar
>3787	Callee	cv 
>3788	Identifier	cv 
>3789	Identifier	oVar
>3790	Identifier	oVar
>3791	IdentifierDeclType	cv 
>3792	IdentifierDeclStatement	 
>3793	IdentifierDecl	oIdepth = cv 
>3794	AssignmentExpr	oIdepth = cv 
>3795	CallExpression	cv 
>3796	ArgumentList	odometryFilesIdepth [ mindiffIDX ]
>3797	Argument	odometryFilesIdepth [ mindiffIDX ]
>3798	ArrayIndexing	odometryFilesIdepth [ mindiffIDX ]
>3799	Identifier	mindiffIDX
>3800	Identifier	odometryFilesIdepth
>3801	Callee	cv 
>3802	Identifier	cv 
>3803	Identifier	oIdepth
>3804	Identifier	oIdepth
>3805	IdentifierDeclType	cv 
>3806	IdentifierDeclStatement	 
>3807	IdentifierDecl	oAge = cv 
>3808	AssignmentExpr	oAge = cv 
>3809	CallExpression	cv 
>3810	ArgumentList	odometryFilesAge [ mindiffIDX ]
>3811	Argument	odometryFilesAge [ mindiffIDX ]
>3812	ArrayIndexing	odometryFilesAge [ mindiffIDX ]
>3813	Identifier	mindiffIDX
>3814	Identifier	odometryFilesAge
>3815	Callee	cv 
>3816	Identifier	cv 
>3817	Identifier	oAge
>3818	Identifier	oAge
>3819	IdentifierDeclType	cv 
>3820	IdentifierDeclStatement	 
>3821	IdentifierDecl	p = cv 
>3822	AssignmentExpr	p = cv 
>3823	CallExpression	cv 
>3824	ArgumentList	pointcloudFiles [ i ]
>3825	Argument	pointcloudFiles [ i ]
>3826	ArrayIndexing	pointcloudFiles [ i ]
>3827	Identifier	i
>3828	Identifier	pointcloudFiles
>3829	Callee	cv 
>3830	Identifier	cv 
>3831	Identifier	p
>3832	Identifier	p
>3833	IdentifierDeclType	cv 
>3834	IfStatement	if ( mindiff > 10 )
>3835	ExpressionStatement	 
>3836	CallExpression	printf ( \"pairing %ld with %ld (diff is
>3837	ArgumentList	\"pairing %ld with %ld (diff is
>3838	Argument	mindiff
>3839	Identifier	mindiff
>3840	Argument	odometryTimestamps [ mindiffIDX ]
>3841	ArrayIndexing	odometryTimestamps [ mindiffIDX ]
>3842	Identifier	mindiffIDX
>3843	Identifier	odometryTimestamps
>3844	Argument	pointcloudTimestamps [ i ]
>3845	ArrayIndexing	pointcloudTimestamps [ i ]
>3846	Identifier	i
>3847	Identifier	pointcloudTimestamps
>3848	Argument	\"pairing %ld with %ld (diff is
>3849	PrimaryExpression	\"pairing %ld with %ld (diff is
>3850	Callee	printf
>3851	Identifier	printf
>3852	Condition	 
>3853	RelationalExpression	mindiff > 10
>3854	PrimaryExpression	10
>3855	Identifier	mindiff
>3856	ForStatement	for ( int j = 0 ; j < odometryTimestamps . size ( ) ; j ++ )
>3857	IfStatement	if ( pointcloudTimestamps [ i ] - odometryTimestamps [ j ] < mindiff && - pointcloudTimestamps [ i ] + odometryTimestamps [ \
>3858	CompoundStatement	 
>3859	ExpressionStatement	 
>3860	AssignmentExpr	mindiffIDX = j
>3861	Identifier	j
>3862	Identifier	mindiffIDX
>3863	IfStatement	if ( mindiff < 0 )
>3864	ExpressionStatement	 
>3865	AssignmentExpr	mindiff = - mindiff
>3866	UnaryOp	- mindiff
>3867	Identifier	mindiff
>3868	UnaryOperator	-
>3869	Identifier	mindiff
>3870	Condition	 
>3871	RelationalExpression	mindiff < 0
>3872	PrimaryExpression	0
>3873	Identifier	mindiff
>3874	ExpressionStatement	 
>3875	AssignmentExpr	mindiff = pointcloudTimestamps [ i ] - odometryTimestamps [ j ]
>3876	AdditiveExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ]
>3877	ArrayIndexing	odometryTimestamps [ j ]
>3878	Identifier	j
>3879	Identifier	odometryTimestamps
>3880	ArrayIndexing	pointcloudTimestamps [ i ]
>3881	Identifier	i
>3882	Identifier	pointcloudTimestamps
>3883	Identifier	mindiff
>3884	Condition	 
>3885	AndExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ] < mindiff && - pointcloudTimestamps [ i ] + odometryTimestamps [ \
>3886	RelationalExpression	- pointcloudTimestamps [ i ] + odometryTimestamps [ j ] < mindiff
>3887	Identifier	mindiff
>3888	AdditiveExpression	- pointcloudTimestamps [ i ] + odometryTimestamps [ j ]
>3889	ArrayIndexing	odometryTimestamps [ j ]
>3890	Identifier	j
>3891	Identifier	odometryTimestamps
>3892	UnaryOp	- pointcloudTimestamps [ i ]
>3893	ArrayIndexing	pointcloudTimestamps [ i ]
>3894	Identifier	i
>3895	Identifier	pointcloudTimestamps
>3896	UnaryOperator	-
>3897	RelationalExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ] < mindiff
>3898	Identifier	mindiff
>3899	AdditiveExpression	pointcloudTimestamps [ i ] - odometryTimestamps [ j ]
>3900	ArrayIndexing	odometryTimestamps [ j ]
>3901	Identifier	j
>3902	Identifier	odometryTimestamps
>3903	ArrayIndexing	pointcloudTimestamps [ i ]
>3904	Identifier	i
>3905	Identifier	pointcloudTimestamps
>3906	IncDecOp	 
>3907	IncDec	++
>3908	Identifier	j
>3909	Condition	 
>3910	RelationalExpression	j < odometryTimestamps . size ( )
>3911	CallExpression	odometryTimestamps . size ( )
>3912	ArgumentList	 
>3913	Callee	odometryTimestamps . size
>3914	MemberAccess	odometryTimestamps . size
>3915	Identifier	size
>3916	Identifier	odometryTimestamps
>3917	Identifier	j
>3918	ForInit	 
>3919	IdentifierDeclStatement	int j = 0 ;
>3920	IdentifierDecl	j = 0
>3921	AssignmentExpr	j = 0
>3922	PrimaryExpression	0
>3923	Identifier	j
>3924	Identifier	j
>3925	IdentifierDeclType	int
>3926	IdentifierDeclStatement	 
>3927	IdentifierDecl	mindiffIDX = 0
>3928	AssignmentExpr	mindiffIDX = 0
>3929	PrimaryExpression	0
>3930	Identifier	mindiffIDX
>3931	Identifier	mindiffIDX
>3932	IdentifierDeclType	int
>3933	IdentifierDeclStatement	 
>3934	IdentifierDecl	mindiff = pointcloudTimestamps [ i ]
>3935	AssignmentExpr	mindiff = pointcloudTimestamps [ i ]
>3936	ArrayIndexing	pointcloudTimestamps [ i ]
>3937	Identifier	i
>3938	Identifier	pointcloudTimestamps
>3939	Identifier	mindiff
>3940	Identifier	mindiff
>3941	IdentifierDeclType	long
>3942	IfStatement	if ( pointcloudTimestamps [ i ] == - 1 )
>3943	CompoundStatement	 
>3944	ContinueStatement	 
>3945	ExpressionStatement	 
>3946	CallExpression	printf ( \"skipping pc file %s!\n\" , pointcloudFiles [ i ] . c_str ( ) )
>3947	ArgumentList	\"skipping pc file %s!\n\"
>3948	Argument	pointcloudFiles [ i ] . c_str ( )
>3949	CallExpression	pointcloudFiles [ i ] . c_str ( )
>3950	ArgumentList	 
>3951	Callee	pointcloudFiles [ i ] . c_str
>3952	MemberAccess	pointcloudFiles [ i ] . c_str
>3953	Identifier	c_str
>3954	ArrayIndexing	pointcloudFiles [ i ]
>3955	Identifier	i
>3956	Identifier	pointcloudFiles
>3957	Argument	\"skipping pc file %s!\n\"
>3958	PrimaryExpression	\"skipping pc file %s!\n\"
>3959	Callee	printf
>3960	Identifier	printf
>3961	Condition	 
>3962	EqualityExpression	pointcloudTimestamps [ i ] == - 1
>3963	UnaryOp	- 1
>3964	PrimaryExpression	1
>3965	UnaryOperator	-
>3966	ArrayIndexing	pointcloudTimestamps [ i ]
>3967	Identifier	i
>3968	Identifier	pointcloudTimestamps
>3969	IncDecOp	 
>3970	IncDec	++
>3971	Identifier	i
>3972	Condition	 
>3973	RelationalExpression	i < pointcloudFiles . size ( )
>3974	CallExpression	pointcloudFiles . size ( )
>3975	ArgumentList	 
>3976	Callee	pointcloudFiles . size
>3977	MemberAccess	pointcloudFiles . size
>3978	Identifier	size
>3979	Identifier	pointcloudFiles
>3980	Identifier	i
>3981	ForInit	 
>3982	IdentifierDeclStatement	int i = 0 ;
>3983	IdentifierDecl	i = 0
>3984	AssignmentExpr	i = 0
>3985	PrimaryExpression	0
>3986	Identifier	i
>3987	Identifier	i
>3988	IdentifierDeclType	int
>3989	IdentifierDeclStatement	 
>3990	IdentifierDecl	currentShift = 0
>3991	AssignmentExpr	currentShift = 0
>3992	PrimaryExpression	0
>3993	Identifier	currentShift
>3994	Identifier	currentShift
>3995	IdentifierDeclType	float
>3996	IdentifierDeclStatement	 
>3997	IdentifierDecl	c = 0
>3998	AssignmentExpr	c = 0
>3999	PrimaryExpression	0
>4000	Identifier	c
>4001	Identifier	c
>4002	IdentifierDeclType	int
>4003	IdentifierDeclStatement	 
>4004	IdentifierDecl	buf [ 1000 ]
>4005	PrimaryExpression	1000
>4006	Identifier	buf
>4007	IdentifierDeclType	char [ 1000 ]
>4008	IfStatement	if ( ! system ( \"mkdir save_output_var\" ) )
>4009	ExpressionStatement	 
>4010	CallExpression	printf ( \"system call failed!\" )
>4011	ArgumentList	\"system call failed!\"
>4012	Argument	\"system call failed!\"
>4013	PrimaryExpression	\"system call failed!\"
>4014	Callee	printf
>4015	Identifier	printf
>4016	Condition	 
>4017	UnaryOp	! system ( \"mkdir save_output_var\" )
>4018	CallExpression	system ( \"mkdir save_output_var\" )
>4019	ArgumentList	\"mkdir save_output_var\"
>4020	Argument	\"mkdir save_output_var\"
>4021	PrimaryExpression	\"mkdir save_output_var\"
>4022	Callee	system
>4023	Identifier	system
>4024	UnaryOperator	!
>4025	IfStatement	if ( ! system ( \"mkdir save_output_stereo\" ) )
>4026	ExpressionStatement	 
>4027	CallExpression	printf ( \"system call failed!\" )
>4028	ArgumentList	\"system call failed!\"
>4029	Argument	\"system call failed!\"
>4030	PrimaryExpression	\"system call failed!\"
>4031	Callee	printf
>4032	Identifier	printf
>4033	Condition	 
>4034	UnaryOp	! system ( \"mkdir save_output_stereo\" )
>4035	CallExpression	system ( \"mkdir save_output_stereo\" )
>4036	ArgumentList	\"mkdir save_output_stereo\"
>4037	Argument	\"mkdir save_output_stereo\"
>4038	PrimaryExpression	\"mkdir save_output_stereo\"
>4039	Callee	system
>4040	Identifier	system
>4041	UnaryOperator	!
>4042	IfStatement	if ( ! system ( \"mkdir save_output_idepth\" ) )
>4043	ExpressionStatement	 
>4044	CallExpression	printf ( \"system call failed!\" )
>4045	ArgumentList	\"system call failed!\"
>4046	Argument	\"system call failed!\"
>4047	PrimaryExpression	\"system call failed!\"
>4048	Callee	printf
>4049	Identifier	printf
>4050	Condition	 
>4051	UnaryOp	! system ( \"mkdir save_output_idepth\" )
>4052	CallExpression	system ( \"mkdir save_output_idepth\" )
>4053	ArgumentList	\"mkdir save_output_idepth\"
>4054	Argument	\"mkdir save_output_idepth\"
>4055	PrimaryExpression	\"mkdir save_output_idepth\"
>4056	Callee	system
>4057	Identifier	system
>4058	UnaryOperator	!
>4059	IfStatement	if ( ! system ( \"mkdir save_output_age\" ) )
>4060	ExpressionStatement	 
>4061	CallExpression	printf ( \"system call failed!\" )
>4062	ArgumentList	\"system call failed!\"
>4063	Argument	\"system call failed!\"
>4064	PrimaryExpression	\"system call failed!\"
>4065	Callee	printf
>4066	Identifier	printf
>4067	Condition	 
>4068	UnaryOp	! system ( \"mkdir save_output_age\" )
>4069	CallExpression	system ( \"mkdir save_output_age\" )
>4070	ArgumentList	\"mkdir save_output_age\"
>4071	Argument	\"mkdir save_output_age\"
>4072	PrimaryExpression	\"mkdir save_output_age\"
>4073	Callee	system
>4074	Identifier	system
>4075	UnaryOperator	!
>4076	IfStatement	if ( ! system ( \"rm -rf save_output_var\" ) )
>4077	ExpressionStatement	 
>4078	CallExpression	printf ( \"system call failed!\" )
>4079	ArgumentList	\"system call failed!\"
>4080	Argument	\"system call failed!\"
>4081	PrimaryExpression	\"system call failed!\"
>4082	Callee	printf
>4083	Identifier	printf
>4084	Condition	 
>4085	UnaryOp	! system ( \"rm -rf save_output_var\" )
>4086	CallExpression	system ( \"rm -rf save_output_var\" )
>4087	ArgumentList	\"rm -rf save_output_var\"
>4088	Argument	\"rm -rf save_output_var\"
>4089	PrimaryExpression	\"rm -rf save_output_var\"
>4090	Callee	system
>4091	Identifier	system
>4092	UnaryOperator	!
>4093	IfStatement	if ( ! system ( \"rm -rf save_output_stereo\" ) )
>4094	ExpressionStatement	 
>4095	CallExpression	printf ( \"system call failed!\" )
>4096	ArgumentList	\"system call failed!\"
>4097	Argument	\"system call failed!\"
>4098	PrimaryExpression	\"system call failed!\"
>4099	Callee	printf
>4100	Identifier	printf
>4101	Condition	 
>4102	UnaryOp	! system ( \"rm -rf save_output_stereo\" )
>4103	CallExpression	system ( \"rm -rf save_output_stereo\" )
>4104	ArgumentList	\"rm -rf save_output_stereo\"
>4105	Argument	\"rm -rf save_output_stereo\"
>4106	PrimaryExpression	\"rm -rf save_output_stereo\"
>4107	Callee	system
>4108	Identifier	system
>4109	UnaryOperator	!
>4110	IfStatement	if ( ! system ( \"rm -rf save_output_idepth\" ) )
>4111	ExpressionStatement	 
>4112	CallExpression	printf ( \"system call failed!\" )
>4113	ArgumentList	\"system call failed!\"
>4114	Argument	\"system call failed!\"
>4115	PrimaryExpression	\"system call failed!\"
>4116	Callee	printf
>4117	Identifier	printf
>4118	Condition	 
>4119	UnaryOp	! system ( \"rm -rf save_output_idepth\" )
>4120	CallExpression	system ( \"rm -rf save_output_idepth\" )
>4121	ArgumentList	\"rm -rf save_output_idepth\"
>4122	Argument	\"rm -rf save_output_idepth\"
>4123	PrimaryExpression	\"rm -rf save_output_idepth\"
>4124	Callee	system
>4125	Identifier	system
>4126	UnaryOperator	!
>4127	IfStatement	if ( ! system ( \"rm -rf save_output_age\" ) )
>4128	ExpressionStatement	 
>4129	CallExpression	printf ( \"system call failed!\" )
>4130	ArgumentList	\"system call failed!\"
>4131	Argument	\"system call failed!\"
>4132	PrimaryExpression	\"system call failed!\"
>4133	Callee	printf
>4134	Identifier	printf
>4135	Condition	 
>4136	UnaryOp	! system ( \"rm -rf save_output_age\" )
>4137	CallExpression	system ( \"rm -rf save_output_age\" )
>4138	ArgumentList	\"rm -rf save_output_age\"
>4139	Argument	\"rm -rf save_output_age\"
>4140	PrimaryExpression	\"rm -rf save_output_age\"
>4141	Callee	system
>4142	Identifier	system
>4143	UnaryOperator	!
>4144	ForStatement	for ( int i = 0 ; i < pointcloudIDs . size ( ) ; i ++ )
>4145	ForStatement	for ( int j = i + 1 ; j < pointcloudIDs . size ( ) ; j ++ )
>4146	IfStatement	if ( pointcloudIDs [ i ] > pointcloudIDs [ j ] )
>4147	CompoundStatement	 
>4148	ExpressionStatement	 
>4149	AssignmentExpr	pointcloudFiles [ j ] = tmp2
>4150	Identifier	tmp2
>4151	ArrayIndexing	pointcloudFiles [ j ]
>4152	Identifier	j
>4153	Identifier	pointcloudFiles
>4154	ExpressionStatement	 
>4155	AssignmentExpr	pointcloudFiles [ i ] = pointcloudFiles [ j ]
>4156	ArrayIndexing	pointcloudFiles [ j ]
>4157	Identifier	j
>4158	Identifier	pointcloudFiles
>4159	ArrayIndexing	pointcloudFiles [ i ]
>4160	Identifier	i
>4161	Identifier	pointcloudFiles
>4162	IdentifierDeclStatement	 
>4163	IdentifierDecl	tmp2 = pointcloudFiles [ i ]
>4164	AssignmentExpr	tmp2 = pointcloudFiles [ i ]
>4165	ArrayIndexing	pointcloudFiles [ i ]
>4166	Identifier	i
>4167	Identifier	pointcloudFiles
>4168	Identifier	tmp2
>4169	Identifier	tmp2
>4170	IdentifierDeclType	string
>4171	ExpressionStatement	 
>4172	AssignmentExpr	pointcloudIDs [ j ] = tmp
>4173	Identifier	tmp
>4174	ArrayIndexing	pointcloudIDs [ j ]
>4175	Identifier	j
>4176	Identifier	pointcloudIDs
>4177	ExpressionStatement	 
>4178	AssignmentExpr	pointcloudIDs [ i ] = pointcloudIDs [ j ]
>4179	ArrayIndexing	pointcloudIDs [ j ]
>4180	Identifier	j
>4181	Identifier	pointcloudIDs
>4182	ArrayIndexing	pointcloudIDs [ i ]
>4183	Identifier	i
>4184	Identifier	pointcloudIDs
>4185	ExpressionStatement	 
>4186	AssignmentExpr	tmp = pointcloudIDs [ i ]
>4187	ArrayIndexing	pointcloudIDs [ i ]
>4188	Identifier	i
>4189	Identifier	pointcloudIDs
>4190	Identifier	tmp
>4191	ExpressionStatement	 
>4192	AssignmentExpr	pointcloudTimestamps [ j ] = tmp
>4193	Identifier	tmp
>4194	ArrayIndexing	pointcloudTimestamps [ j ]
>4195	Identifier	j
>4196	Identifier	pointcloudTimestamps
>4197	ExpressionStatement	 
>4198	AssignmentExpr	pointcloudTimestamps [ i ] = pointcloudTimestamps [ j ]
>4199	ArrayIndexing	pointcloudTimestamps [ j ]
>4200	Identifier	j
>4201	Identifier	pointcloudTimestamps
>4202	ArrayIndexing	pointcloudTimestamps [ i ]
>4203	Identifier	i
>4204	Identifier	pointcloudTimestamps
>4205	IdentifierDeclStatement	 
>4206	IdentifierDecl	tmp = pointcloudTimestamps [ i ]
>4207	AssignmentExpr	tmp = pointcloudTimestamps [ i ]
>4208	ArrayIndexing	pointcloudTimestamps [ i ]
>4209	Identifier	i
>4210	Identifier	pointcloudTimestamps
>4211	Identifier	tmp
>4212	Identifier	tmp
>4213	IdentifierDeclType	long
>4214	Condition	 
>4215	RelationalExpression	pointcloudIDs [ i ] > pointcloudIDs [ j ]
>4216	ArrayIndexing	pointcloudIDs [ j ]
>4217	Identifier	j
>4218	Identifier	pointcloudIDs
>4219	ArrayIndexing	pointcloudIDs [ i ]
>4220	Identifier	i
>4221	Identifier	pointcloudIDs
>4222	IncDecOp	 
>4223	IncDec	++
>4224	Identifier	j
>4225	Condition	 
>4226	RelationalExpression	j < pointcloudIDs . size ( )
>4227	CallExpression	pointcloudIDs . size ( )
>4228	ArgumentList	 
>4229	Callee	pointcloudIDs . size
>4230	MemberAccess	pointcloudIDs . size
>4231	Identifier	size
>4232	Identifier	pointcloudIDs
>4233	Identifier	j
>4234	ForInit	 
>4235	IdentifierDeclStatement	int j = i + 1 ;
>4236	IdentifierDecl	j = i + 1
>4237	AssignmentExpr	j = i + 1
>4238	AdditiveExpression	i + 1
>4239	PrimaryExpression	1
>4240	Identifier	i
>4241	Identifier	j
>4242	Identifier	j
>4243	IdentifierDeclType	int
>4244	IncDecOp	 
>4245	IncDec	++
>4246	Identifier	i
>4247	Condition	 
>4248	RelationalExpression	i < pointcloudIDs . size ( )
>4249	CallExpression	pointcloudIDs . size ( )
>4250	ArgumentList	 
>4251	Callee	pointcloudIDs . size
>4252	MemberAccess	pointcloudIDs . size
>4253	Identifier	size
>4254	Identifier	pointcloudIDs
>4255	Identifier	i
>4256	ForInit	 
>4257	IdentifierDeclStatement	int i = 0 ;
>4258	IdentifierDecl	i = 0
>4259	AssignmentExpr	i = 0
>4260	PrimaryExpression	0
>4261	Identifier	i
>4262	Identifier	i
>4263	IdentifierDeclType	int
>4264	ForStatement	for ( int i = 0 ; i < pointcloudFiles . size ( ) ; i ++ )
>4265	CompoundStatement	 
>4266	ExpressionStatement	 
>4267	CallExpression	pointcloudIDs . push_back ( id )
>4268	ArgumentList	id
>4269	Argument	id
>4270	Identifier	id
>4271	Callee	pointcloudIDs . push_back
>4272	MemberAccess	pointcloudIDs . push_back
>4273	Identifier	push_back
>4274	Identifier	pointcloudIDs
>4275	ExpressionStatement	 
>4276	CallExpression	pointcloudTimestamps . push_back ( time )
>4277	ArgumentList	time
>4278	Argument	time
>4279	Identifier	time
>4280	Callee	pointcloudTimestamps . push_back
>4281	MemberAccess	pointcloudTimestamps . push_back
>4282	Identifier	push_back
>4283	Identifier	pointcloudTimestamps
>4284	IfStatement	if ( 2 != sscanf ( tmpString . c_str ( ) , \"%ld-%ld.jpg\" , & id , & time ) )
>4285	ExpressionStatement	 
>4286	CallExpression	printf ( \"could not parse name as pc %s!\n\" , tmpString . c_str ( ) )
>4287	ArgumentList	\"could not parse name as pc %s!\n\"
>4288	Argument	tmpString . c_str ( )
>4289	CallExpression	tmpString . c_str ( )
>4290	ArgumentList	 
>4291	Callee	tmpString . c_str
>4292	MemberAccess	tmpString . c_str
>4293	Identifier	c_str
>4294	Identifier	tmpString
>4295	Argument	\"could not parse name as pc %s!\n\"
>4296	PrimaryExpression	\"could not parse name as pc %s!\n\"
>4297	Callee	printf
>4298	Identifier	printf
>4299	Condition	 
>4300	EqualityExpression	2 != sscanf ( tmpString . c_str ( ) , \"%ld-%ld.jpg\" , & id , & time )
>4301	CallExpression	sscanf ( tmpString . c_str ( ) , \"%ld-%ld.jpg\" , & id , & time )
>4302	ArgumentList	tmpString . c_str ( )
>4303	Argument	& time
>4304	UnaryOp	& time
>4305	Identifier	time
>4306	UnaryOperator	&
>4307	Argument	& id
>4308	UnaryOp	& id
>4309	Identifier	id
>4310	UnaryOperator	&
>4311	Argument	\"%ld-%ld.jpg\"
>4312	PrimaryExpression	\"%ld-%ld.jpg\"
>4313	Argument	tmpString . c_str ( )
>4314	CallExpression	tmpString . c_str ( )
>4315	ArgumentList	 
>4316	Callee	tmpString . c_str
>4317	MemberAccess	tmpString . c_str
>4318	Identifier	c_str
>4319	Identifier	tmpString
>4320	Callee	sscanf
>4321	Identifier	sscanf
>4322	PrimaryExpression	2
>4323	IfStatement	if ( pos != string 
>4324	ExpressionStatement	 
>4325	AssignmentExpr	tmpString = pointcloudFiles [ i ] . substr ( pos + 1 )
>4326	CallExpression	pointcloudFiles [ i ] . substr ( pos + 1 )
>4327	ArgumentList	pos + 1
>4328	Argument	pos + 1
>4329	AdditiveExpression	pos + 1
>4330	PrimaryExpression	1
>4331	Identifier	pos
>4332	Callee	pointcloudFiles [ i ] . substr
>4333	MemberAccess	pointcloudFiles [ i ] . substr
>4334	Identifier	substr
>4335	ArrayIndexing	pointcloudFiles [ i ]
>4336	Identifier	i
>4337	Identifier	pointcloudFiles
>4338	Identifier	tmpString
>4339	Condition	 
>4340	EqualityExpression	pos != string 
>4341	Identifier	string 
>4342	Identifier	pos
>4343	IdentifierDeclStatement	 
>4344	IdentifierDecl	tmpString = pointcloudFiles [ i ]
>4345	AssignmentExpr	tmpString = pointcloudFiles [ i ]
>4346	ArrayIndexing	pointcloudFiles [ i ]
>4347	Identifier	i
>4348	Identifier	pointcloudFiles
>4349	Identifier	tmpString
>4350	Identifier	tmpString
>4351	IdentifierDeclType	string
>4352	IdentifierDeclStatement	 
>4353	IdentifierDecl	pos = pointcloudFiles [ i ] . find_last_of ( \"/\" )
>4354	AssignmentExpr	pos = pointcloudFiles [ i ] . find_last_of ( \"/\" )
>4355	CallExpression	pointcloudFiles [ i ] . find_last_of ( \"/\" )
>4356	ArgumentList	\"/\"
>4357	Argument	\"/\"
>4358	PrimaryExpression	\"/\"
>4359	Callee	pointcloudFiles [ i ] . find_last_of
>4360	MemberAccess	pointcloudFiles [ i ] . find_last_of
>4361	Identifier	find_last_of
>4362	ArrayIndexing	pointcloudFiles [ i ]
>4363	Identifier	i
>4364	Identifier	pointcloudFiles
>4365	Identifier	pos
>4366	Identifier	pos
>4367	IdentifierDeclType	size_t
>4368	IdentifierDeclStatement	 
>4369	IdentifierDecl	time = - 1
>4370	AssignmentExpr	time = - 1
>4371	UnaryOp	- 1
>4372	PrimaryExpression	1
>4373	UnaryOperator	-
>4374	Identifier	time
>4375	Identifier	time
>4376	IdentifierDeclType	long
>4377	IdentifierDecl	id = - 1
>4378	AssignmentExpr	id = - 1
>4379	UnaryOp	- 1
>4380	PrimaryExpression	1
>4381	UnaryOperator	-
>4382	Identifier	id
>4383	Identifier	id
>4384	IdentifierDeclType	long
>4385	IncDecOp	 
>4386	IncDec	++
>4387	Identifier	i
>4388	Condition	 
>4389	RelationalExpression	i < pointcloudFiles . size ( )
>4390	CallExpression	pointcloudFiles . size ( )
>4391	ArgumentList	 
>4392	Callee	pointcloudFiles . size
>4393	MemberAccess	pointcloudFiles . size
>4394	Identifier	size
>4395	Identifier	pointcloudFiles
>4396	Identifier	i
>4397	ForInit	 
>4398	IdentifierDeclStatement	int i = 0 ;
>4399	IdentifierDecl	i = 0
>4400	AssignmentExpr	i = 0
>4401	PrimaryExpression	0
>4402	Identifier	i
>4403	Identifier	i
>4404	IdentifierDeclType	int
>4405	IdentifierDeclStatement	 
>4406	IdentifierDecl	pointcloudIDs
>4407	Identifier	pointcloudIDs
>4408	IdentifierDeclType	std 
>4409	IdentifierDeclStatement	 
>4410	IdentifierDecl	pointcloudTimestamps
>4411	Identifier	pointcloudTimestamps
>4412	IdentifierDeclType	std 
>4413	ForStatement	for ( int i = 0 ; i < odometryFilesAge . size ( ) ; i ++ )
>4414	CompoundStatement	 
>4415	ExpressionStatement	 
>4416	CallExpression	odometryTimestamps . push_back ( id )
>4417	ArgumentList	id
>4418	Argument	id
>4419	Identifier	id
>4420	Callee	odometryTimestamps . push_back
>4421	MemberAccess	odometryTimestamps . push_back
>4422	Identifier	push_back
>4423	Identifier	odometryTimestamps
>4424	IfStatement	if ( 1 != sscanf ( tmpString . c_str ( ) , \"age-%ld.png\" , & id ) )
>4425	ExpressionStatement	 
>4426	CallExpression	printf ( \"could not parse name as odometry %s!\n\" , tmpString . c_str ( ) )
>4427	ArgumentList	\"could not parse name as odometry %s!\n\"
>4428	Argument	tmpString . c_str ( )
>4429	CallExpression	tmpString . c_str ( )
>4430	ArgumentList	 
>4431	Callee	tmpString . c_str
>4432	MemberAccess	tmpString . c_str
>4433	Identifier	c_str
>4434	Identifier	tmpString
>4435	Argument	\"could not parse name as odometry %s!\n\"
>4436	PrimaryExpression	\"could not parse name as odometry %s!\n\"
>4437	Callee	printf
>4438	Identifier	printf
>4439	Condition	 
>4440	EqualityExpression	1 != sscanf ( tmpString . c_str ( ) , \"age-%ld.png\" , & id )
>4441	CallExpression	sscanf ( tmpString . c_str ( ) , \"age-%ld.png\" , & id )
>4442	ArgumentList	tmpString . c_str ( )
>4443	Argument	& id
>4444	UnaryOp	& id
>4445	Identifier	id
>4446	UnaryOperator	&
>4447	Argument	\"age-%ld.png\"
>4448	PrimaryExpression	\"age-%ld.png\"
>4449	Argument	tmpString . c_str ( )
>4450	CallExpression	tmpString . c_str ( )
>4451	ArgumentList	 
>4452	Callee	tmpString . c_str
>4453	MemberAccess	tmpString . c_str
>4454	Identifier	c_str
>4455	Identifier	tmpString
>4456	Callee	sscanf
>4457	Identifier	sscanf
>4458	PrimaryExpression	1
>4459	IfStatement	if ( pos != string 
>4460	ExpressionStatement	 
>4461	AssignmentExpr	tmpString = odometryFilesAge [ i ] . substr ( pos + 1 )
>4462	CallExpression	odometryFilesAge [ i ] . substr ( pos + 1 )
>4463	ArgumentList	pos + 1
>4464	Argument	pos + 1
>4465	AdditiveExpression	pos + 1
>4466	PrimaryExpression	1
>4467	Identifier	pos
>4468	Callee	odometryFilesAge [ i ] . substr
>4469	MemberAccess	odometryFilesAge [ i ] . substr
>4470	Identifier	substr
>4471	ArrayIndexing	odometryFilesAge [ i ]
>4472	Identifier	i
>4473	Identifier	odometryFilesAge
>4474	Identifier	tmpString
>4475	Condition	 
>4476	EqualityExpression	pos != string 
>4477	Identifier	string 
>4478	Identifier	pos
>4479	IdentifierDeclStatement	 
>4480	IdentifierDecl	tmpString = odometryFilesAge [ i ]
>4481	AssignmentExpr	tmpString = odometryFilesAge [ i ]
>4482	ArrayIndexing	odometryFilesAge [ i ]
>4483	Identifier	i
>4484	Identifier	odometryFilesAge
>4485	Identifier	tmpString
>4486	Identifier	tmpString
>4487	IdentifierDeclType	string
>4488	IdentifierDeclStatement	 
>4489	IdentifierDecl	pos = odometryFilesAge [ i ] . find_last_of ( \"/\" )
>4490	AssignmentExpr	pos = odometryFilesAge [ i ] . find_last_of ( \"/\" )
>4491	CallExpression	odometryFilesAge [ i ] . find_last_of ( \"/\" )
>4492	ArgumentList	\"/\"
>4493	Argument	\"/\"
>4494	PrimaryExpression	\"/\"
>4495	Callee	odometryFilesAge [ i ] . find_last_of
>4496	MemberAccess	odometryFilesAge [ i ] . find_last_of
>4497	Identifier	find_last_of
>4498	ArrayIndexing	odometryFilesAge [ i ]
>4499	Identifier	i
>4500	Identifier	odometryFilesAge
>4501	Identifier	pos
>4502	Identifier	pos
>4503	IdentifierDeclType	size_t
>4504	IdentifierDeclStatement	 
>4505	IdentifierDecl	id = - 1
>4506	AssignmentExpr	id = - 1
>4507	UnaryOp	- 1
>4508	PrimaryExpression	1
>4509	UnaryOperator	-
>4510	Identifier	id
>4511	Identifier	id
>4512	IdentifierDeclType	long
>4513	IncDecOp	 
>4514	IncDec	++
>4515	Identifier	i
>4516	Condition	 
>4517	RelationalExpression	i < odometryFilesAge . size ( )
>4518	CallExpression	odometryFilesAge . size ( )
>4519	ArgumentList	 
>4520	Callee	odometryFilesAge . size
>4521	MemberAccess	odometryFilesAge . size
>4522	Identifier	size
>4523	Identifier	odometryFilesAge
>4524	Identifier	i
>4525	ForInit	 
>4526	IdentifierDeclStatement	int i = 0 ;
>4527	IdentifierDecl	i = 0
>4528	AssignmentExpr	i = 0
>4529	PrimaryExpression	0
>4530	Identifier	i
>4531	Identifier	i
>4532	IdentifierDeclType	int
>4533	IdentifierDeclStatement	 
>4534	IdentifierDecl	odometryTimestamps
>4535	Identifier	odometryTimestamps
>4536	IdentifierDeclType	std 
>4537	ExpressionStatement	 
>4538	CallExpression	assert ( odometryFilesAge . size ( ) == odometryFilesVar . size ( ) )
>4539	ArgumentList	odometryFilesAge . size ( ) == odometryFilesVar . size ( )
>4540	Argument	odometryFilesAge . size ( ) == odometryFilesVar . size ( )
>4541	EqualityExpression	odometryFilesAge . size ( ) == odometryFilesVar . size ( )
>4542	CallExpression	odometryFilesVar . size ( )
>4543	ArgumentList	 
>4544	Callee	odometryFilesVar . size
>4545	MemberAccess	odometryFilesVar . size
>4546	Identifier	size
>4547	Identifier	odometryFilesVar
>4548	CallExpression	odometryFilesAge . size ( )
>4549	ArgumentList	 
>4550	Callee	odometryFilesAge . size
>4551	MemberAccess	odometryFilesAge . size
>4552	Identifier	size
>4553	Identifier	odometryFilesAge
>4554	Callee	assert
>4555	Identifier	assert
>4556	ExpressionStatement	 
>4557	CallExpression	assert ( odometryFilesAge . size ( ) == odometryFilesStereo . size ( ) )
>4558	ArgumentList	odometryFilesAge . size ( ) == odometryFilesStereo . size ( )
>4559	Argument	odometryFilesAge . size ( ) == odometryFilesStereo . size ( )
>4560	EqualityExpression	odometryFilesAge . size ( ) == odometryFilesStereo . size ( )
>4561	CallExpression	odometryFilesStereo . size ( )
>4562	ArgumentList	 
>4563	Callee	odometryFilesStereo . size
>4564	MemberAccess	odometryFilesStereo . size
>4565	Identifier	size
>4566	Identifier	odometryFilesStereo
>4567	CallExpression	odometryFilesAge . size ( )
>4568	ArgumentList	 
>4569	Callee	odometryFilesAge . size
>4570	MemberAccess	odometryFilesAge . size
>4571	Identifier	size
>4572	Identifier	odometryFilesAge
>4573	Callee	assert
>4574	Identifier	assert
>4575	ExpressionStatement	 
>4576	CallExpression	assert ( odometryFilesAge . size ( ) == odometryFilesIdepth . size ( ) )
>4577	ArgumentList	odometryFilesAge . size ( ) == odometryFilesIdepth . size ( )
>4578	Argument	odometryFilesAge . size ( ) == odometryFilesIdepth . size ( )
>4579	EqualityExpression	odometryFilesAge . size ( ) == odometryFilesIdepth . size ( )
>4580	CallExpression	odometryFilesIdepth . size ( )
>4581	ArgumentList	 
>4582	Callee	odometryFilesIdepth . size
>4583	MemberAccess	odometryFilesIdepth . size
>4584	Identifier	size
>4585	Identifier	odometryFilesIdepth
>4586	CallExpression	odometryFilesAge . size ( )
>4587	ArgumentList	 
>4588	Callee	odometryFilesAge . size
>4589	MemberAccess	odometryFilesAge . size
>4590	Identifier	size
>4591	Identifier	odometryFilesAge
>4592	Callee	assert
>4593	Identifier	assert
>4594	ExpressionStatement	 
>4595	CallExpression	printf ( \"pcFiles
>4596	ArgumentList	\"pcFiles
>4597	Argument	odometryFilesVar . size ( )
>4598	CallExpression	odometryFilesVar . size ( )
>4599	ArgumentList	 
>4600	Callee	odometryFilesVar . size
>4601	MemberAccess	odometryFilesVar . size
>4602	Identifier	size
>4603	Identifier	odometryFilesVar
>4604	Argument	odometryFilesStereo . size ( )
>4605	CallExpression	odometryFilesStereo . size ( )
>4606	ArgumentList	 
>4607	Callee	odometryFilesStereo . size
>4608	MemberAccess	odometryFilesStereo . size
>4609	Identifier	size
>4610	Identifier	odometryFilesStereo
>4611	Argument	odometryFilesIdepth . size ( )
>4612	CallExpression	odometryFilesIdepth . size ( )
>4613	ArgumentList	 
>4614	Callee	odometryFilesIdepth . size
>4615	MemberAccess	odometryFilesIdepth . size
>4616	Identifier	size
>4617	Identifier	odometryFilesIdepth
>4618	Argument	odometryFilesAge . size ( )
>4619	CallExpression	odometryFilesAge . size ( )
>4620	ArgumentList	 
>4621	Callee	odometryFilesAge . size
>4622	MemberAccess	odometryFilesAge . size
>4623	Identifier	size
>4624	Identifier	odometryFilesAge
>4625	Argument	pointcloudFiles . size ( )
>4626	CallExpression	pointcloudFiles . size ( )
>4627	ArgumentList	 
>4628	Callee	pointcloudFiles . size
>4629	MemberAccess	pointcloudFiles . size
>4630	Identifier	size
>4631	Identifier	pointcloudFiles
>4632	Argument	\"pcFiles
>4633	PrimaryExpression	\"pcFiles
>4634	Callee	printf
>4635	Identifier	printf
>4636	ExpressionStatement	 
>4637	CallExpression	std 
>4638	ArgumentList	odometryFilesVar . begin ( )
>4639	Argument	odometryFilesVar . end ( )
>4640	CallExpression	odometryFilesVar . end ( )
>4641	ArgumentList	 
>4642	Callee	odometryFilesVar . end
>4643	MemberAccess	odometryFilesVar . end
>4644	Identifier	end
>4645	Identifier	odometryFilesVar
>4646	Argument	odometryFilesVar . begin ( )
>4647	CallExpression	odometryFilesVar . begin ( )
>4648	ArgumentList	 
>4649	Callee	odometryFilesVar . begin
>4650	MemberAccess	odometryFilesVar . begin
>4651	Identifier	begin
>4652	Identifier	odometryFilesVar
>4653	Callee	std 
>4654	Identifier	std 
>4655	ExpressionStatement	 
>4656	CallExpression	std 
>4657	ArgumentList	odometryFilesStereo . begin ( )
>4658	Argument	odometryFilesStereo . end ( )
>4659	CallExpression	odometryFilesStereo . end ( )
>4660	ArgumentList	 
>4661	Callee	odometryFilesStereo . end
>4662	MemberAccess	odometryFilesStereo . end
>4663	Identifier	end
>4664	Identifier	odometryFilesStereo
>4665	Argument	odometryFilesStereo . begin ( )
>4666	CallExpression	odometryFilesStereo . begin ( )
>4667	ArgumentList	 
>4668	Callee	odometryFilesStereo . begin
>4669	MemberAccess	odometryFilesStereo . begin
>4670	Identifier	begin
>4671	Identifier	odometryFilesStereo
>4672	Callee	std 
>4673	Identifier	std 
>4674	ExpressionStatement	 
>4675	CallExpression	std 
>4676	ArgumentList	odometryFilesIdepth . begin ( )
>4677	Argument	odometryFilesIdepth . end ( )
>4678	CallExpression	odometryFilesIdepth . end ( )
>4679	ArgumentList	 
>4680	Callee	odometryFilesIdepth . end
>4681	MemberAccess	odometryFilesIdepth . end
>4682	Identifier	end
>4683	Identifier	odometryFilesIdepth
>4684	Argument	odometryFilesIdepth . begin ( )
>4685	CallExpression	odometryFilesIdepth . begin ( )
>4686	ArgumentList	 
>4687	Callee	odometryFilesIdepth . begin
>4688	MemberAccess	odometryFilesIdepth . begin
>4689	Identifier	begin
>4690	Identifier	odometryFilesIdepth
>4691	Callee	std 
>4692	Identifier	std 
>4693	ExpressionStatement	 
>4694	CallExpression	std 
>4695	ArgumentList	odometryFilesAge . begin ( )
>4696	Argument	odometryFilesAge . end ( )
>4697	CallExpression	odometryFilesAge . end ( )
>4698	ArgumentList	 
>4699	Callee	odometryFilesAge . end
>4700	MemberAccess	odometryFilesAge . end
>4701	Identifier	end
>4702	Identifier	odometryFilesAge
>4703	Argument	odometryFilesAge . begin ( )
>4704	CallExpression	odometryFilesAge . begin ( )
>4705	ArgumentList	 
>4706	Callee	odometryFilesAge . begin
>4707	MemberAccess	odometryFilesAge . begin
>4708	Identifier	begin
>4709	Identifier	odometryFilesAge
>4710	Callee	std 
>4711	Identifier	std 
>4712	IdentifierDeclStatement	 
>4713	IdentifierDecl	odometryFilesVar = getFileList ( \"save_odometry/\" , \"var\" )
>4714	AssignmentExpr	odometryFilesVar = getFileList ( \"save_odometry/\" , \"var\" )
>4715	CallExpression	getFileList ( \"save_odometry/\" , \"var\" )
>4716	ArgumentList	\"save_odometry/\"
>4717	Argument	\"var\"
>4718	PrimaryExpression	\"var\"
>4719	Argument	\"save_odometry/\"
>4720	PrimaryExpression	\"save_odometry/\"
>4721	Callee	getFileList
>4722	Identifier	getFileList
>4723	Identifier	odometryFilesVar
>4724	Identifier	odometryFilesVar
>4725	IdentifierDeclType	std 
>4726	IdentifierDeclStatement	 
>4727	IdentifierDecl	odometryFilesStereo = getFileList ( \"save_odometry/\" , \"stereo\" )
>4728	AssignmentExpr	odometryFilesStereo = getFileList ( \"save_odometry/\" , \"stereo\" )
>4729	CallExpression	getFileList ( \"save_odometry/\" , \"stereo\" )
>4730	ArgumentList	\"save_odometry/\"
>4731	Argument	\"stereo\"
>4732	PrimaryExpression	\"stereo\"
>4733	Argument	\"save_odometry/\"
>4734	PrimaryExpression	\"save_odometry/\"
>4735	Callee	getFileList
>4736	Identifier	getFileList
>4737	Identifier	odometryFilesStereo
>4738	Identifier	odometryFilesStereo
>4739	IdentifierDeclType	std 
>4740	IdentifierDeclStatement	 
>4741	IdentifierDecl	odometryFilesIdepth = getFileList ( \"save_odometry/\" , \"idepth\" )
>4742	AssignmentExpr	odometryFilesIdepth = getFileList ( \"save_odometry/\" , \"idepth\" )
>4743	CallExpression	getFileList ( \"save_odometry/\" , \"idepth\" )
>4744	ArgumentList	\"save_odometry/\"
>4745	Argument	\"idepth\"
>4746	PrimaryExpression	\"idepth\"
>4747	Argument	\"save_odometry/\"
>4748	PrimaryExpression	\"save_odometry/\"
>4749	Callee	getFileList
>4750	Identifier	getFileList
>4751	Identifier	odometryFilesIdepth
>4752	Identifier	odometryFilesIdepth
>4753	IdentifierDeclType	std 
>4754	IdentifierDeclStatement	 
>4755	IdentifierDecl	odometryFilesAge = getFileList ( \"save_odometry/\" , \"age\" )
>4756	AssignmentExpr	odometryFilesAge = getFileList ( \"save_odometry/\" , \"age\" )
>4757	CallExpression	getFileList ( \"save_odometry/\" , \"age\" )
>4758	ArgumentList	\"save_odometry/\"
>4759	Argument	\"age\"
>4760	PrimaryExpression	\"age\"
>4761	Argument	\"save_odometry/\"
>4762	PrimaryExpression	\"save_odometry/\"
>4763	Callee	getFileList
>4764	Identifier	getFileList
>4765	Identifier	odometryFilesAge
>4766	Identifier	odometryFilesAge
>4767	IdentifierDeclType	std 
>4768	IdentifierDeclStatement	 
>4769	IdentifierDecl	pointcloudFiles = getFileList ( \"save_pointcloud/\" , \"\" )
>4770	AssignmentExpr	pointcloudFiles = getFileList ( \"save_pointcloud/\" , \"\" )
>4771	CallExpression	getFileList ( \"save_pointcloud/\" , \"\" )
>4772	ArgumentList	\"save_pointcloud/\"
>4773	Argument	\"\"
>4774	PrimaryExpression	\"\"
>4775	Argument	\"save_pointcloud/\"
>4776	PrimaryExpression	\"save_pointcloud/\"
>4777	Callee	getFileList
>4778	Identifier	getFileList
>4779	Identifier	pointcloudFiles
>4780	Identifier	pointcloudFiles
>4781	IdentifierDeclType	std 
>4872	FunctionDef	inlayVid2 (int argc , char * * argv)
>4873	ParameterList	int argc , char * * argv
>4874	Parameter	 
>4875	Identifier	argv
>4876	ParameterType	char * *
>4877	Parameter	 
>4878	Identifier	argc
>4879	ParameterType	int
>4880	ReturnType	int
>4881	CompoundStatement	 
>4882	ReturnStatement	 
>4883	PrimaryExpression	0
>4884	ForStatement	for ( int i = 0 ; i < imgFiles . size ( ) ; i ++ )
>4885	CompoundStatement	 
>4886	ExpressionStatement	 
>4887	CallExpression	cv 
>4888	ArgumentList	buf
>4889	Argument	idepth
>4890	Identifier	idepth
>4891	Argument	buf
>4892	Identifier	buf
>4893	Callee	cv 
>4894	Identifier	cv 
>4895	ExpressionStatement	 
>4896	CallExpression	snprintf ( buf , 1000 , \"save_cam2_out/img%03d.png\" , i )
>4897	ArgumentList	buf
>4898	Argument	i
>4899	Identifier	i
>4900	Argument	\"save_cam2_out/img%03d.png\"
>4901	PrimaryExpression	\"save_cam2_out/img%03d.png\"
>4902	Argument	1000
>4903	PrimaryExpression	1000
>4904	Argument	buf
>4905	Identifier	buf
>4906	Callee	snprintf
>4907	Identifier	snprintf
>4908	ExpressionStatement	 
>4909	CallExpression	cv 
>4910	ArgumentList	10
>4911	Argument	10
>4912	PrimaryExpression	10
>4913	Callee	cv 
>4914	Identifier	cv 
>4915	ExpressionStatement	 
>4916	CallExpression	imshow ( \"out\" , idepth )
>4917	ArgumentList	\"out\"
>4918	Argument	idepth
>4919	Identifier	idepth
>4920	Argument	\"out\"
>4921	PrimaryExpression	\"out\"
>4922	Callee	imshow
>4923	Identifier	imshow
>4924	ExpressionStatement	 
>4925	CallExpression	imgR . copyTo ( roi )
>4926	ArgumentList	roi
>4927	Argument	roi
>4928	Identifier	roi
>4929	Callee	imgR . copyTo
>4930	MemberAccess	imgR . copyTo
>4931	Identifier	copyTo
>4932	Identifier	imgR
>4933	IdentifierDeclStatement	 
>4934	IdentifierDecl	roi = idepth ( cv 
>4935	AssignmentExpr	roi = idepth ( cv 
>4936	CallExpression	idepth ( cv 
>4937	ArgumentList	cv 
>4938	Argument	cv 
>4939	CallExpression	cv 
>4940	ArgumentList	4
>4941	Argument	img . rows / 3
>4942	MultiplicativeExpression	img . rows / 3
>4943	PrimaryExpression	3
>4944	MemberAccess	img . rows
>4945	Identifier	rows
>4946	Identifier	img
>4947	Argument	img . cols / 3
>4948	MultiplicativeExpression	img . cols / 3
>4949	PrimaryExpression	3
>4950	MemberAccess	img . cols
>4951	Identifier	cols
>4952	Identifier	img
>4953	Argument	4
>4954	PrimaryExpression	4
>4955	Argument	4
>4956	PrimaryExpression	4
>4957	Callee	cv 
>4958	Identifier	cv 
>4959	Callee	idepth
>4960	Identifier	idepth
>4961	Identifier	roi
>4962	Identifier	roi
>4963	IdentifierDeclType	cv 
>4964	ExpressionStatement	 
>4965	CallExpression	cv 
>4966	ArgumentList	img
>4967	Argument	cv 
>4968	CallExpression	cv 
>4969	ArgumentList	img . cols / 3
>4970	Argument	img . rows / 3
>4971	MultiplicativeExpression	img . rows / 3
>4972	PrimaryExpression	3
>4973	MemberAccess	img . rows
>4974	Identifier	rows
>4975	Identifier	img
>4976	Argument	img . cols / 3
>4977	MultiplicativeExpression	img . cols / 3
>4978	PrimaryExpression	3
>4979	MemberAccess	img . cols
>4980	Identifier	cols
>4981	Identifier	img
>4982	Callee	cv 
>4983	Identifier	cv 
>4984	Argument	imgR
>4985	Identifier	imgR
>4986	Argument	img
>4987	Identifier	img
>4988	Callee	cv 
>4989	Identifier	cv 
>4990	IdentifierDeclStatement	 
>4991	IdentifierDecl	imgR = cv 
>4992	AssignmentExpr	imgR = cv 
>4993	CallExpression	cv 
>4994	ArgumentList	cv 
>4995	Argument	CV_8UC3
>4996	Identifier	CV_8UC3
>4997	Argument	cv 
>4998	CallExpression	cv 
>4999	ArgumentList	img . cols / 3
>5000	Argument	img . rows / 3
>5001	MultiplicativeExpression	img . rows / 3
>5002	PrimaryExpression	3
>5003	MemberAccess	img . rows
>5004	Identifier	rows
>5005	Identifier	img
>5006	Argument	img . cols / 3
>5007	MultiplicativeExpression	img . cols / 3
>5008	PrimaryExpression	3
>5009	MemberAccess	img . cols
>5010	Identifier	cols
>5011	Identifier	img
>5012	Callee	cv 
>5013	Identifier	cv 
>5014	Callee	cv 
>5015	Identifier	cv 
>5016	Identifier	imgR
>5017	Identifier	imgR
>5018	IdentifierDeclType	cv 
>5019	IdentifierDeclStatement	 
>5020	IdentifierDecl	img = cv 
>5021	AssignmentExpr	img = cv 
>5022	CallExpression	cv 
>5023	ArgumentList	imgFiles [ i ]
>5024	Argument	imgFiles [ i ]
>5025	ArrayIndexing	imgFiles [ i ]
>5026	Identifier	i
>5027	Identifier	imgFiles
>5028	Callee	cv 
>5029	Identifier	cv 
>5030	Identifier	img
>5031	Identifier	img
>5032	IdentifierDeclType	cv 
>5033	IdentifierDeclStatement	 
>5034	IdentifierDecl	idepth = cv 
>5035	AssignmentExpr	idepth = cv 
>5036	CallExpression	cv 
>5037	ArgumentList	idepthFiles [ i ]
>5038	Argument	idepthFiles [ i ]
>5039	ArrayIndexing	idepthFiles [ i ]
>5040	Identifier	i
>5041	Identifier	idepthFiles
>5042	Callee	cv 
>5043	Identifier	cv 
>5044	Identifier	idepth
>5045	Identifier	idepth
>5046	IdentifierDeclType	cv 
>5047	IncDecOp	 
>5048	IncDec	++
>5049	Identifier	i
>5050	Condition	 
>5051	RelationalExpression	i < imgFiles . size ( )
>5052	CallExpression	imgFiles . size ( )
>5053	ArgumentList	 
>5054	Callee	imgFiles . size
>5055	MemberAccess	imgFiles . size
>5056	Identifier	size
>5057	Identifier	imgFiles
>5058	Identifier	i
>5059	ForInit	 
>5060	IdentifierDeclStatement	int i = 0 ;
>5061	IdentifierDecl	i = 0
>5062	AssignmentExpr	i = 0
>5063	PrimaryExpression	0
>5064	Identifier	i
>5065	Identifier	i
>5066	IdentifierDeclType	int
>5067	IdentifierDeclStatement	 
>5068	IdentifierDecl	buf [ 1000 ]
>5069	PrimaryExpression	1000
>5070	Identifier	buf
>5071	IdentifierDeclType	char [ 1000 ]
>5072	IdentifierDeclStatement	 
>5073	IdentifierDecl	plot = cv 
>5074	AssignmentExpr	plot = cv 
>5075	CallExpression	cv 
>5076	ArgumentList	\"plot.png\"
>5077	Argument	\"plot.png\"
>5078	PrimaryExpression	\"plot.png\"
>5079	Callee	cv 
>5080	Identifier	cv 
>5081	Identifier	plot
>5082	Identifier	plot
>5083	IdentifierDeclType	cv 
>5084	IfStatement	if ( ! system ( \"mkdir save_cam2_out\" ) )
>5085	ExpressionStatement	 
>5086	CallExpression	printf ( \"system call failed!\" )
>5087	ArgumentList	\"system call failed!\"
>5088	Argument	\"system call failed!\"
>5089	PrimaryExpression	\"system call failed!\"
>5090	Callee	printf
>5091	Identifier	printf
>5092	Condition	 
>5093	UnaryOp	! system ( \"mkdir save_cam2_out\" )
>5094	CallExpression	system ( \"mkdir save_cam2_out\" )
>5095	ArgumentList	\"mkdir save_cam2_out\"
>5096	Argument	\"mkdir save_cam2_out\"
>5097	PrimaryExpression	\"mkdir save_cam2_out\"
>5098	Callee	system
>5099	Identifier	system
>5100	UnaryOperator	!
>5101	IfStatement	if ( ! system ( \"rm -rf save_cam2_out\" ) )
>5102	ExpressionStatement	 
>5103	CallExpression	printf ( \"system call failed!\" )
>5104	ArgumentList	\"system call failed!\"
>5105	Argument	\"system call failed!\"
>5106	PrimaryExpression	\"system call failed!\"
>5107	Callee	printf
>5108	Identifier	printf
>5109	Condition	 
>5110	UnaryOp	! system ( \"rm -rf save_cam2_out\" )
>5111	CallExpression	system ( \"rm -rf save_cam2_out\" )
>5112	ArgumentList	\"rm -rf save_cam2_out\"
>5113	Argument	\"rm -rf save_cam2_out\"
>5114	PrimaryExpression	\"rm -rf save_cam2_out\"
>5115	Callee	system
>5116	Identifier	system
>5117	UnaryOperator	!
>5118	ExpressionStatement	 
>5119	CallExpression	assert ( imgFiles . size ( ) == idepthFiles . size ( ) )
>5120	ArgumentList	imgFiles . size ( ) == idepthFiles . size ( )
>5121	Argument	imgFiles . size ( ) == idepthFiles . size ( )
>5122	EqualityExpression	imgFiles . size ( ) == idepthFiles . size ( )
>5123	CallExpression	idepthFiles . size ( )
>5124	ArgumentList	 
>5125	Callee	idepthFiles . size
>5126	MemberAccess	idepthFiles . size
>5127	Identifier	size
>5128	Identifier	idepthFiles
>5129	CallExpression	imgFiles . size ( )
>5130	ArgumentList	 
>5131	Callee	imgFiles . size
>5132	MemberAccess	imgFiles . size
>5133	Identifier	size
>5134	Identifier	imgFiles
>5135	Callee	assert
>5136	Identifier	assert
>5137	ExpressionStatement	 
>5138	CallExpression	std 
>5139	ArgumentList	idepthFiles . begin ( )
>5140	Argument	idepthFiles . end ( )
>5141	CallExpression	idepthFiles . end ( )
>5142	ArgumentList	 
>5143	Callee	idepthFiles . end
>5144	MemberAccess	idepthFiles . end
>5145	Identifier	end
>5146	Identifier	idepthFiles
>5147	Argument	idepthFiles . begin ( )
>5148	CallExpression	idepthFiles . begin ( )
>5149	ArgumentList	 
>5150	Callee	idepthFiles . begin
>5151	MemberAccess	idepthFiles . begin
>5152	Identifier	begin
>5153	Identifier	idepthFiles
>5154	Callee	std 
>5155	Identifier	std 
>5156	ExpressionStatement	 
>5157	CallExpression	std 
>5158	ArgumentList	imgFiles . begin ( )
>5159	Argument	imgFiles . end ( )
>5160	CallExpression	imgFiles . end ( )
>5161	ArgumentList	 
>5162	Callee	imgFiles . end
>5163	MemberAccess	imgFiles . end
>5164	Identifier	end
>5165	Identifier	imgFiles
>5166	Argument	imgFiles . begin ( )
>5167	CallExpression	imgFiles . begin ( )
>5168	ArgumentList	 
>5169	Callee	imgFiles . begin
>5170	MemberAccess	imgFiles . begin
>5171	Identifier	begin
>5172	Identifier	imgFiles
>5173	Callee	std 
>5174	Identifier	std 
>5175	IdentifierDeclStatement	 
>5176	IdentifierDecl	idepthFiles = getFileList ( \"save_cam2/\" , \"idepth\" )
>5177	AssignmentExpr	idepthFiles = getFileList ( \"save_cam2/\" , \"idepth\" )
>5178	CallExpression	getFileList ( \"save_cam2/\" , \"idepth\" )
>5179	ArgumentList	\"save_cam2/\"
>5180	Argument	\"idepth\"
>5181	PrimaryExpression	\"idepth\"
>5182	Argument	\"save_cam2/\"
>5183	PrimaryExpression	\"save_cam2/\"
>5184	Callee	getFileList
>5185	Identifier	getFileList
>5186	Identifier	idepthFiles
>5187	Identifier	idepthFiles
>5188	IdentifierDeclType	std 
>5189	IdentifierDeclStatement	 
>5190	IdentifierDecl	imgFiles = getFileList ( \"save_cam2/\" , \"img\" )
>5191	AssignmentExpr	imgFiles = getFileList ( \"save_cam2/\" , \"img\" )
>5192	CallExpression	getFileList ( \"save_cam2/\" , \"img\" )
>5193	ArgumentList	\"save_cam2/\"
>5194	Argument	\"img\"
>5195	PrimaryExpression	\"img\"
>5196	Argument	\"save_cam2/\"
>5197	PrimaryExpression	\"save_cam2/\"
>5198	Callee	getFileList
>5199	Identifier	getFileList
>5200	Identifier	imgFiles
>5201	Identifier	imgFiles
>5202	IdentifierDeclType	std 
>5235	FunctionDef	makeBW (int argc , char * * argv)
>5236	ParameterList	int argc , char * * argv
>5237	Parameter	 
>5238	Identifier	argv
>5239	ParameterType	char * *
>5240	Parameter	 
>5241	Identifier	argc
>5242	ParameterType	int
>5243	ReturnType	int
>5244	CompoundStatement	 
>5245	ReturnStatement	 
>5246	PrimaryExpression	0
>5247	ExpressionStatement	 
>5248	CallExpression	cv 
>5249	ArgumentList	n
>5250	Argument	imageOut
>5251	Identifier	imageOut
>5252	Argument	n
>5253	Identifier	n
>5254	Callee	cv 
>5255	Identifier	cv 
>5256	ExpressionStatement	 
>5257	CallExpression	cv 
>5258	ArgumentList	0
>5259	Argument	0
>5260	PrimaryExpression	0
>5261	Callee	cv 
>5262	Identifier	cv 
>5263	ExpressionStatement	 
>5264	CallExpression	cv 
>5265	ArgumentList	\"image\"
>5266	Argument	imageOut
>5267	Identifier	imageOut
>5268	Argument	\"image\"
>5269	PrimaryExpression	\"image\"
>5270	Callee	cv 
>5271	Identifier	cv 
>5272	ExpressionStatement	 
>5273	CallExpression	printf ( \"output
>5274	ArgumentList	\"output
>5275	Argument	n . c_str ( )
>5276	CallExpression	n . c_str ( )
>5277	ArgumentList	 
>5278	Callee	n . c_str
>5279	MemberAccess	n . c_str
>5280	Identifier	c_str
>5281	Identifier	n
>5282	Argument	\"output
>5283	PrimaryExpression	\"output
>5284	Callee	printf
>5285	Identifier	printf
>5286	ExpressionStatement	 
>5287	CallExpression	n . replace ( n . length ( ) - 4 , std 
>5288	ArgumentList	n . length ( ) - 4
>5289	Argument	\"_bw.png\"
>5290	PrimaryExpression	\"_bw.png\"
>5291	Argument	std 
>5292	Identifier	std 
>5293	Argument	n . length ( ) - 4
>5294	AdditiveExpression	n . length ( ) - 4
>5295	PrimaryExpression	4
>5296	CallExpression	n . length ( )
>5297	ArgumentList	 
>5298	Callee	n . length
>5299	MemberAccess	n . length
>5300	Identifier	length
>5301	Identifier	n
>5302	Callee	n . replace
>5303	MemberAccess	n . replace
>5304	Identifier	replace
>5305	Identifier	n
>5306	IdentifierDeclStatement	 
>5307	IdentifierDecl	n = argv [ 1 ]
>5308	AssignmentExpr	n = argv [ 1 ]
>5309	ArrayIndexing	argv [ 1 ]
>5310	PrimaryExpression	1
>5311	Identifier	argv
>5312	Identifier	n
>5313	Identifier	n
>5314	IdentifierDeclType	std 
>5315	WhileStatement	while ( 's' != ( k = cv 
>5316	CompoundStatement	 
>5317	ExpressionStatement	 
>5318	CallExpression	cv 
>5319	ArgumentList	\"out\"
>5320	Argument	imageOut
>5321	Identifier	imageOut
>5322	Argument	\"out\"
>5323	PrimaryExpression	\"out\"
>5324	Callee	cv 
>5325	Identifier	cv 
>5326	ExpressionStatement	 
>5327	CallExpression	printf ( \"fac
>5328	ArgumentList	\"fac
>5329	Argument	fac
>5330	Identifier	fac
>5331	Argument	\"fac
>5332	PrimaryExpression	\"fac
>5333	Callee	printf
>5334	Identifier	printf
>5335	ForStatement	for ( int x = 0 ; x < image . cols ; x ++ )
>5336	ForStatement	for ( int y = 0 ; y < image . rows ; y ++ )
>5337	CompoundStatement	 
>5338	IfStatement	if ( err < 50 )
>5339	ElseStatement	else
>5340	CompoundStatement	 
>5341	ExpressionStatement	 
>5342	AssignmentExpr	imageOut . at < cv 
>5343	CallExpression	cv 
>5344	ArgumentList	best
>5345	Argument	best
>5346	Identifier	best
>5347	Argument	best
>5348	Identifier	best
>5349	Argument	best
>5350	Identifier	best
>5351	Callee	cv 
>5352	Identifier	cv 
>5353	RelationalExpression	imageOut . at < cv 
>5354	RelationalExpression	cv 
>5355	Expression	y , x
>5356	Identifier	x
>5357	Identifier	y
>5358	Identifier	cv 
>5359	MemberAccess	imageOut . at
>5360	Identifier	at
>5361	Identifier	imageOut
>5362	ForStatement	for ( int i = 0 ; i < 255 ; i ++ )
>5363	CompoundStatement	 
>5364	IfStatement	if ( score < bestScore )
>5365	CompoundStatement	 
>5366	ExpressionStatement	 
>5367	AssignmentExpr	best = i
>5368	Identifier	i
>5369	Identifier	best
>5370	ExpressionStatement	 
>5371	AssignmentExpr	bestScore = score
>5372	Identifier	score
>5373	Identifier	bestScore
>5374	Condition	 
>5375	RelationalExpression	score < bestScore
>5376	Identifier	bestScore
>5377	Identifier	score
>5378	IdentifierDeclStatement	 
>5379	IdentifierDecl	score = ( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] ) + ( col [ 1 ] - colors [ i ] [ 1 ] ) * ( \
>5380	AssignmentExpr	score = ( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] ) + ( col [ 1 ] - colors [ \
>5381	AdditiveExpression	( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] ) + ( col [ 1 ] - colors [ i ] [ \
>5382	AdditiveExpression	( col [ 1 ] - colors [ i ] [ 1 ] ) * ( col [ 1 ] - colors [ i ] [ 1 ] ) + ( col [ 2 ] - colors [ i ] [ \
>5383	MultiplicativeExpression	( col [ 2 ] - colors [ i ] [ 2 ] ) * ( col [ 2 ] - colors [ i ] [ 2 ] )
>5384	AdditiveExpression	col [ 2 ] - colors [ i ] [ 2 ]
>5385	ArrayIndexing	colors [ i ] [ 2 ]
>5386	PrimaryExpression	2
>5387	ArrayIndexing	colors [ i ]
>5388	Identifier	i
>5389	Identifier	colors
>5390	ArrayIndexing	col [ 2 ]
>5391	PrimaryExpression	2
>5392	Identifier	col
>5393	AdditiveExpression	col [ 2 ] - colors [ i ] [ 2 ]
>5394	ArrayIndexing	colors [ i ] [ 2 ]
>5395	PrimaryExpression	2
>5396	ArrayIndexing	colors [ i ]
>5397	Identifier	i
>5398	Identifier	colors
>5399	ArrayIndexing	col [ 2 ]
>5400	PrimaryExpression	2
>5401	Identifier	col
>5402	MultiplicativeExpression	( col [ 1 ] - colors [ i ] [ 1 ] ) * ( col [ 1 ] - colors [ i ] [ 1 ] )
>5403	AdditiveExpression	col [ 1 ] - colors [ i ] [ 1 ]
>5404	ArrayIndexing	colors [ i ] [ 1 ]
>5405	PrimaryExpression	1
>5406	ArrayIndexing	colors [ i ]
>5407	Identifier	i
>5408	Identifier	colors
>5409	ArrayIndexing	col [ 1 ]
>5410	PrimaryExpression	1
>5411	Identifier	col
>5412	AdditiveExpression	col [ 1 ] - colors [ i ] [ 1 ]
>5413	ArrayIndexing	colors [ i ] [ 1 ]
>5414	PrimaryExpression	1
>5415	ArrayIndexing	colors [ i ]
>5416	Identifier	i
>5417	Identifier	colors
>5418	ArrayIndexing	col [ 1 ]
>5419	PrimaryExpression	1
>5420	Identifier	col
>5421	MultiplicativeExpression	( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] )
>5422	AdditiveExpression	col [ 0 ] - colors [ i ] [ 0 ]
>5423	ArrayIndexing	colors [ i ] [ 0 ]
>5424	PrimaryExpression	0
>5425	ArrayIndexing	colors [ i ]
>5426	Identifier	i
>5427	Identifier	colors
>5428	ArrayIndexing	col [ 0 ]
>5429	PrimaryExpression	0
>5430	Identifier	col
>5431	AdditiveExpression	col [ 0 ] - colors [ i ] [ 0 ]
>5432	ArrayIndexing	colors [ i ] [ 0 ]
>5433	PrimaryExpression	0
>5434	ArrayIndexing	colors [ i ]
>5435	Identifier	i
>5436	Identifier	colors
>5437	ArrayIndexing	col [ 0 ]
>5438	PrimaryExpression	0
>5439	Identifier	col
>5440	Identifier	score
>5441	Identifier	score
>5442	IdentifierDeclType	int
>5443	IncDecOp	 
>5444	IncDec	++
>5445	Identifier	i
>5446	Condition	 
>5447	RelationalExpression	i < 255
>5448	PrimaryExpression	255
>5449	Identifier	i
>5450	ForInit	 
>5451	IdentifierDeclStatement	int i = 0 ;
>5452	IdentifierDecl	i = 0
>5453	AssignmentExpr	i = 0
>5454	PrimaryExpression	0
>5455	Identifier	i
>5456	Identifier	i
>5457	IdentifierDeclType	int
>5458	IdentifierDeclStatement	 
>5459	IdentifierDecl	bestScore = 999999999
>5460	AssignmentExpr	bestScore = 999999999
>5461	PrimaryExpression	999999999
>5462	Identifier	bestScore
>5463	Identifier	bestScore
>5464	IdentifierDeclType	int
>5465	IdentifierDecl	best = 0
>5466	AssignmentExpr	best = 0
>5467	PrimaryExpression	0
>5468	Identifier	best
>5469	Identifier	best
>5470	IdentifierDeclType	int
>5471	ExpressionStatement	 
>5472	AssignmentExpr	imageOut . at < cv 
>5473	CallExpression	cv 
>5474	ArgumentList	255
>5475	Argument	255
>5476	PrimaryExpression	255
>5477	Argument	255
>5478	PrimaryExpression	255
>5479	Argument	255
>5480	PrimaryExpression	255
>5481	Callee	cv 
>5482	Identifier	cv 
>5483	RelationalExpression	imageOut . at < cv 
>5484	RelationalExpression	cv 
>5485	Expression	y , x
>5486	Identifier	x
>5487	Identifier	y
>5488	Identifier	cv 
>5489	MemberAccess	imageOut . at
>5490	Identifier	at
>5491	Identifier	imageOut
>5492	Condition	 
>5493	RelationalExpression	err < 50
>5494	PrimaryExpression	50
>5495	Identifier	err
>5496	IdentifierDeclStatement	 
>5497	IdentifierDecl	err = ( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] ) + ( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ 2 ] ) + ( \
>5498	AssignmentExpr	err = ( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] ) + ( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] \
>5499	AdditiveExpression	( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] ) + ( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ \
>5500	AdditiveExpression	( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ 2 ] ) + ( col [ 2 ] - col [ 1 ] ) * ( col [ 2 ] - col [ \
>5501	MultiplicativeExpression	( col [ 2 ] - col [ 1 ] ) * ( col [ 2 ] - col [ 1 ] )
>5502	AdditiveExpression	col [ 2 ] - col [ 1 ]
>5503	ArrayIndexing	col [ 1 ]
>5504	PrimaryExpression	1
>5505	Identifier	col
>5506	ArrayIndexing	col [ 2 ]
>5507	PrimaryExpression	2
>5508	Identifier	col
>5509	AdditiveExpression	col [ 2 ] - col [ 1 ]
>5510	ArrayIndexing	col [ 1 ]
>5511	PrimaryExpression	1
>5512	Identifier	col
>5513	ArrayIndexing	col [ 2 ]
>5514	PrimaryExpression	2
>5515	Identifier	col
>5516	MultiplicativeExpression	( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ 2 ] )
>5517	AdditiveExpression	col [ 0 ] - col [ 2 ]
>5518	ArrayIndexing	col [ 2 ]
>5519	PrimaryExpression	2
>5520	Identifier	col
>5521	ArrayIndexing	col [ 0 ]
>5522	PrimaryExpression	0
>5523	Identifier	col
>5524	AdditiveExpression	col [ 0 ] - col [ 2 ]
>5525	ArrayIndexing	col [ 2 ]
>5526	PrimaryExpression	2
>5527	Identifier	col
>5528	ArrayIndexing	col [ 0 ]
>5529	PrimaryExpression	0
>5530	Identifier	col
>5531	MultiplicativeExpression	( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] )
>5532	AdditiveExpression	col [ 0 ] - col [ 1 ]
>5533	ArrayIndexing	col [ 1 ]
>5534	PrimaryExpression	1
>5535	Identifier	col
>5536	ArrayIndexing	col [ 0 ]
>5537	PrimaryExpression	0
>5538	Identifier	col
>5539	AdditiveExpression	col [ 0 ] - col [ 1 ]
>5540	ArrayIndexing	col [ 1 ]
>5541	PrimaryExpression	1
>5542	Identifier	col
>5543	ArrayIndexing	col [ 0 ]
>5544	PrimaryExpression	0
>5545	Identifier	col
>5546	Identifier	err
>5547	Identifier	err
>5548	IdentifierDeclType	int
>5549	IdentifierDeclStatement	 
>5550	IdentifierDecl	col = image . at < cv 
>5551	AssignmentExpr	col = image . at < cv 
>5552	RelationalExpression	image . at < cv 
>5553	RelationalExpression	cv 
>5554	Expression	y , x
>5555	Identifier	x
>5556	Identifier	y
>5557	Identifier	cv 
>5558	MemberAccess	image . at
>5559	Identifier	at
>5560	Identifier	image
>5561	Identifier	col
>5562	Identifier	col
>5563	IdentifierDeclType	cv 
>5564	IncDecOp	 
>5565	IncDec	++
>5566	Identifier	y
>5567	Condition	 
>5568	RelationalExpression	y < image . rows
>5569	MemberAccess	image . rows
>5570	Identifier	rows
>5571	Identifier	image
>5572	Identifier	y
>5573	ForInit	 
>5574	IdentifierDeclStatement	int y = 0 ;
>5575	IdentifierDecl	y = 0
>5576	AssignmentExpr	y = 0
>5577	PrimaryExpression	0
>5578	Identifier	y
>5579	Identifier	y
>5580	IdentifierDeclType	int
>5581	IncDecOp	 
>5582	IncDec	++
>5583	Identifier	x
>5584	Condition	 
>5585	RelationalExpression	x < image . cols
>5586	MemberAccess	image . cols
>5587	Identifier	cols
>5588	Identifier	image
>5589	Identifier	x
>5590	ForInit	 
>5591	IdentifierDeclStatement	int x = 0 ;
>5592	IdentifierDecl	x = 0
>5593	AssignmentExpr	x = 0
>5594	PrimaryExpression	0
>5595	Identifier	x
>5596	Identifier	x
>5597	IdentifierDeclType	int
>5598	ForStatement	for ( int y = 0 ; y < 255 ; y ++ )
>5599	CompoundStatement	 
>5600	ExpressionStatement	 
>5601	AssignmentExpr	colors [ y ] [ 2 ] = 255 - rc
>5602	AdditiveExpression	255 - rc
>5603	Identifier	rc
>5604	PrimaryExpression	255
>5605	ArrayIndexing	colors [ y ] [ 2 ]
>5606	PrimaryExpression	2
>5607	ArrayIndexing	colors [ y ]
>5608	Identifier	y
>5609	Identifier	colors
>5610	ExpressionStatement	 
>5611	AssignmentExpr	colors [ y ] [ 1 ] = 255 - gc
>5612	AdditiveExpression	255 - gc
>5613	Identifier	gc
>5614	PrimaryExpression	255
>5615	ArrayIndexing	colors [ y ] [ 1 ]
>5616	PrimaryExpression	1
>5617	ArrayIndexing	colors [ y ]
>5618	Identifier	y
>5619	Identifier	colors
>5620	ExpressionStatement	 
>5621	AssignmentExpr	colors [ y ] [ 0 ] = 255 - bc
>5622	AdditiveExpression	255 - bc
>5623	Identifier	bc
>5624	PrimaryExpression	255
>5625	ArrayIndexing	colors [ y ] [ 0 ]
>5626	PrimaryExpression	0
>5627	ArrayIndexing	colors [ y ]
>5628	Identifier	y
>5629	Identifier	colors
>5630	IdentifierDeclStatement	 
>5631	IdentifierDecl	bc = b < 0 ? 0 
>5632	AssignmentExpr	bc = b < 0 ? 0 
>5633	ConditionalExpression	b < 0 ? 0 
>5634	ConditionalExpression	b > 255 ? 255 
>5635	Identifier	b
>5636	PrimaryExpression	255
>5637	Condition	b > 255
>5638	RelationalExpression	b > 255
>5639	PrimaryExpression	255
>5640	Identifier	b
>5641	PrimaryExpression	0
>5642	Condition	b < 0
>5643	RelationalExpression	b < 0
>5644	PrimaryExpression	0
>5645	Identifier	b
>5646	Identifier	bc
>5647	Identifier	bc
>5648	IdentifierDeclType	uchar
>5649	IdentifierDeclStatement	 
>5650	IdentifierDecl	gc = g < 0 ? 0 
>5651	AssignmentExpr	gc = g < 0 ? 0 
>5652	ConditionalExpression	g < 0 ? 0 
>5653	ConditionalExpression	g > 255 ? 255 
>5654	Identifier	g
>5655	PrimaryExpression	255
>5656	Condition	g > 255
>5657	RelationalExpression	g > 255
>5658	PrimaryExpression	255
>5659	Identifier	g
>5660	PrimaryExpression	0
>5661	Condition	g < 0
>5662	RelationalExpression	g < 0
>5663	PrimaryExpression	0
>5664	Identifier	g
>5665	Identifier	gc
>5666	Identifier	gc
>5667	IdentifierDeclType	uchar
>5668	IdentifierDeclStatement	 
>5669	IdentifierDecl	rc = r < 0 ? 0 
>5670	AssignmentExpr	rc = r < 0 ? 0 
>5671	ConditionalExpression	r < 0 ? 0 
>5672	ConditionalExpression	r > 255 ? 255 
>5673	Identifier	r
>5674	PrimaryExpression	255
>5675	Condition	r > 255
>5676	RelationalExpression	r > 255
>5677	PrimaryExpression	255
>5678	Identifier	r
>5679	PrimaryExpression	0
>5680	Condition	r < 0
>5681	RelationalExpression	r < 0
>5682	PrimaryExpression	0
>5683	Identifier	r
>5684	Identifier	rc
>5685	Identifier	rc
>5686	IdentifierDeclType	uchar
>5687	IfStatement	if ( b < 0 )
>5688	ExpressionStatement	 
>5689	AssignmentExpr	b = - b
>5690	UnaryOp	- b
>5691	Identifier	b
>5692	UnaryOperator	-
>5693	Identifier	b
>5694	Condition	 
>5695	RelationalExpression	b < 0
>5696	PrimaryExpression	0
>5697	Identifier	b
>5698	IdentifierDeclStatement	 
>5699	IdentifierDecl	b = ( 2 - id ) * 255 / 1.0
>5700	AssignmentExpr	b = ( 2 - id ) * 255 / 1.0
>5701	MultiplicativeExpression	( 2 - id ) * 255 / 1.0
>5702	MultiplicativeExpression	255 / 1.0
>5703	PrimaryExpression	1.0
>5704	PrimaryExpression	255
>5705	AdditiveExpression	2 - id
>5706	Identifier	id
>5707	PrimaryExpression	2
>5708	Identifier	b
>5709	Identifier	b
>5710	IdentifierDeclType	float
>5711	IfStatement	if ( g < 0 )
>5712	ExpressionStatement	 
>5713	AssignmentExpr	g = - g
>5714	UnaryOp	- g
>5715	Identifier	g
>5716	UnaryOperator	-
>5717	Identifier	g
>5718	Condition	 
>5719	RelationalExpression	g < 0
>5720	PrimaryExpression	0
>5721	Identifier	g
>5722	IdentifierDeclStatement	 
>5723	IdentifierDecl	g = ( 1 - id ) * 255 / 1.0
>5724	AssignmentExpr	g = ( 1 - id ) * 255 / 1.0
>5725	MultiplicativeExpression	( 1 - id ) * 255 / 1.0
>5726	MultiplicativeExpression	255 / 1.0
>5727	PrimaryExpression	1.0
>5728	PrimaryExpression	255
>5729	AdditiveExpression	1 - id
>5730	Identifier	id
>5731	PrimaryExpression	1
>5732	Identifier	g
>5733	Identifier	g
>5734	IdentifierDeclType	float
>5735	IfStatement	if ( r < 0 )
>5736	ExpressionStatement	 
>5737	AssignmentExpr	r = - r
>5738	UnaryOp	- r
>5739	Identifier	r
>5740	UnaryOperator	-
>5741	Identifier	r
>5742	Condition	 
>5743	RelationalExpression	r < 0
>5744	PrimaryExpression	0
>5745	Identifier	r
>5746	IdentifierDeclStatement	 
>5747	IdentifierDecl	r = ( 0 - id ) * 255 / 1.0
>5748	AssignmentExpr	r = ( 0 - id ) * 255 / 1.0
>5749	MultiplicativeExpression	( 0 - id ) * 255 / 1.0
>5750	MultiplicativeExpression	255 / 1.0
>5751	PrimaryExpression	1.0
>5752	PrimaryExpression	255
>5753	AdditiveExpression	0 - id
>5754	Identifier	id
>5755	PrimaryExpression	0
>5756	Identifier	r
>5757	Identifier	r
>5758	IdentifierDeclType	float
>5759	IdentifierDeclStatement	 
>5760	IdentifierDecl	id = fac * ( y / 100.0 )
>5761	AssignmentExpr	id = fac * ( y / 100.0 )
>5762	MultiplicativeExpression	fac * ( y / 100.0 )
>5763	MultiplicativeExpression	y / 100.0
>5764	PrimaryExpression	100.0
>5765	Identifier	y
>5766	Identifier	fac
>5767	Identifier	id
>5768	Identifier	id
>5769	IdentifierDeclType	float
>5770	IncDecOp	 
>5771	IncDec	++
>5772	Identifier	y
>5773	Condition	 
>5774	RelationalExpression	y < 255
>5775	PrimaryExpression	255
>5776	Identifier	y
>5777	ForInit	 
>5778	IdentifierDeclStatement	int y = 0 ;
>5779	IdentifierDecl	y = 0
>5780	AssignmentExpr	y = 0
>5781	PrimaryExpression	0
>5782	Identifier	y
>5783	Identifier	y
>5784	IdentifierDeclType	int
>5785	IfStatement	if ( k == 'm' )
>5786	ExpressionStatement	 
>5787	AssignmentExpr	fac /= 1.05
>5788	PrimaryExpression	1.05
>5789	Identifier	fac
>5790	Condition	 
>5791	EqualityExpression	k == 'm'
>5792	PrimaryExpression	'm'
>5793	Identifier	k
>5794	IfStatement	if ( k == 'p' )
>5795	ExpressionStatement	 
>5796	AssignmentExpr	fac *= 1.05
>5797	PrimaryExpression	1.05
>5798	Identifier	fac
>5799	Condition	 
>5800	EqualityExpression	k == 'p'
>5801	PrimaryExpression	'p'
>5802	Identifier	k
>5803	Condition	 
>5804	EqualityExpression	's' != ( k = cv 
>5805	AssignmentExpr	k = cv 
>5806	CallExpression	cv 
>5807	ArgumentList	0
>5808	Argument	0
>5809	PrimaryExpression	0
>5810	Callee	cv 
>5811	Identifier	cv 
>5812	Identifier	k
>5813	PrimaryExpression	's'
>5814	ExpressionStatement	 
>5815	CallExpression	printf ( \"type depth
>5816	ArgumentList	\"type depth
>5817	Argument	imageOut . type ( )
>5818	CallExpression	imageOut . type ( )
>5819	ArgumentList	 
>5820	Callee	imageOut . type
>5821	MemberAccess	imageOut . type
>5822	Identifier	type
>5823	Identifier	imageOut
>5824	Argument	\"type depth
>5825	PrimaryExpression	\"type depth
>5826	Callee	printf
>5827	Identifier	printf
>5828	ExpressionStatement	 
>5829	CallExpression	printf ( \"type depth1
>5830	ArgumentList	\"type depth1
>5831	Argument	image . type ( )
>5832	CallExpression	image . type ( )
>5833	ArgumentList	 
>5834	Callee	image . type
>5835	MemberAccess	image . type
>5836	Identifier	type
>5837	Identifier	image
>5838	Argument	\"type depth1
>5839	PrimaryExpression	\"type depth1
>5840	Callee	printf
>5841	Identifier	printf
>5842	IdentifierDeclStatement	 
>5843	IdentifierDecl	imageOut = cv 
>5844	AssignmentExpr	imageOut = cv 
>5845	CallExpression	cv 
>5846	ArgumentList	image . rows
>5847	Argument	CV_8UC3
>5848	Identifier	CV_8UC3
>5849	Argument	image . cols
>5850	MemberAccess	image . cols
>5851	Identifier	cols
>5852	Identifier	image
>5853	Argument	image . rows
>5854	MemberAccess	image . rows
>5855	Identifier	rows
>5856	Identifier	image
>5857	Callee	cv 
>5858	Identifier	cv 
>5859	Identifier	imageOut
>5860	Identifier	imageOut
>5861	IdentifierDeclType	cv 
>5862	IdentifierDeclStatement	 
>5863	IdentifierDecl	image = cv 
>5864	AssignmentExpr	image = cv 
>5865	CallExpression	cv 
>5866	ArgumentList	argv [ 1 ]
>5867	Argument	- 1
>5868	UnaryOp	- 1
>5869	PrimaryExpression	1
>5870	UnaryOperator	-
>5871	Argument	argv [ 1 ]
>5872	ArrayIndexing	argv [ 1 ]
>5873	PrimaryExpression	1
>5874	Identifier	argv
>5875	Callee	cv 
>5876	Identifier	cv 
>5877	Identifier	image
>5878	Identifier	image
>5879	IdentifierDeclType	cv 
>5880	IdentifierDeclStatement	 
>5881	IdentifierDecl	k
>5882	Identifier	k
>5883	IdentifierDeclType	char
>5884	IdentifierDeclStatement	 
>5885	IdentifierDecl	fac = 1
>5886	AssignmentExpr	fac = 1
>5887	PrimaryExpression	1
>5888	Identifier	fac
>5889	Identifier	fac
>5890	IdentifierDeclType	float
>5891	ExpressionStatement	 
>5892	ArrayIndexing	colors [ 255 ] [ 3 ]
>5893	PrimaryExpression	3
>5894	ArrayIndexing	colors [ 255 ]
>5895	PrimaryExpression	255
>5896	Identifier	colors
>5897	Statement	 
>5946	FunctionDef	shiftRainbow (int argc , char * * argv)
>5947	ParameterList	int argc , char * * argv
>5948	Parameter	 
>5949	Identifier	argv
>5950	ParameterType	char * *
>5951	Parameter	 
>5952	Identifier	argc
>5953	ParameterType	int
>5954	ReturnType	int
>5955	CompoundStatement	 
>5956	ReturnStatement	 
>5957	PrimaryExpression	0
>5958	ExpressionStatement	 
>5959	CallExpression	cv 
>5960	ArgumentList	n
>5961	Argument	imageOut
>5962	Identifier	imageOut
>5963	Argument	n
>5964	Identifier	n
>5965	Callee	cv 
>5966	Identifier	cv 
>5967	ExpressionStatement	 
>5968	CallExpression	cv 
>5969	ArgumentList	0
>5970	Argument	0
>5971	PrimaryExpression	0
>5972	Callee	cv 
>5973	Identifier	cv 
>5974	ExpressionStatement	 
>5975	CallExpression	cv 
>5976	ArgumentList	\"image\"
>5977	Argument	imageOut
>5978	Identifier	imageOut
>5979	Argument	\"image\"
>5980	PrimaryExpression	\"image\"
>5981	Callee	cv 
>5982	Identifier	cv 
>5983	ExpressionStatement	 
>5984	CallExpression	printf ( \"output
>5985	ArgumentList	\"output
>5986	Argument	n . c_str ( )
>5987	CallExpression	n . c_str ( )
>5988	ArgumentList	 
>5989	Callee	n . c_str
>5990	MemberAccess	n . c_str
>5991	Identifier	c_str
>5992	Identifier	n
>5993	Argument	\"output
>5994	PrimaryExpression	\"output
>5995	Callee	printf
>5996	Identifier	printf
>5997	ExpressionStatement	 
>5998	CallExpression	n . replace ( n . length ( ) - 4 , std 
>5999	ArgumentList	n . length ( ) - 4
>6000	Argument	\"_recolored.png\"
>6001	PrimaryExpression	\"_recolored.png\"
>6002	Argument	std 
>6003	Identifier	std 
>6004	Argument	n . length ( ) - 4
>6005	AdditiveExpression	n . length ( ) - 4
>6006	PrimaryExpression	4
>6007	CallExpression	n . length ( )
>6008	ArgumentList	 
>6009	Callee	n . length
>6010	MemberAccess	n . length
>6011	Identifier	length
>6012	Identifier	n
>6013	Callee	n . replace
>6014	MemberAccess	n . replace
>6015	Identifier	replace
>6016	Identifier	n
>6017	IdentifierDeclStatement	 
>6018	IdentifierDecl	n = argv [ 1 ]
>6019	AssignmentExpr	n = argv [ 1 ]
>6020	ArrayIndexing	argv [ 1 ]
>6021	PrimaryExpression	1
>6022	Identifier	argv
>6023	Identifier	n
>6024	Identifier	n
>6025	IdentifierDeclType	std 
>6026	WhileStatement	while ( 's' != ( k = cv 
>6027	CompoundStatement	 
>6028	ExpressionStatement	 
>6029	CallExpression	cv 
>6030	ArgumentList	\"out\"
>6031	Argument	imageOut
>6032	Identifier	imageOut
>6033	Argument	\"out\"
>6034	PrimaryExpression	\"out\"
>6035	Callee	cv 
>6036	Identifier	cv 
>6037	ExpressionStatement	 
>6038	CallExpression	printf ( \"fac
>6039	ArgumentList	\"fac
>6040	Argument	off
>6041	Identifier	off
>6042	Argument	fac
>6043	Identifier	fac
>6044	Argument	\"fac
>6045	PrimaryExpression	\"fac
>6046	Callee	printf
>6047	Identifier	printf
>6048	ForStatement	for ( int x = 0 ; x < image . cols ; x ++ )
>6049	ForStatement	for ( int y = 0 ; y < image . rows ; y ++ )
>6050	CompoundStatement	 
>6051	IfStatement	if ( err < 50 )
>6052	ElseStatement	else
>6053	CompoundStatement	 
>6054	ExpressionStatement	 
>6055	AssignmentExpr	imageOut . at < cv 
>6056	CallExpression	cv 
>6057	ArgumentList	255 - bc
>6058	Argument	255 - rc
>6059	AdditiveExpression	255 - rc
>6060	Identifier	rc
>6061	PrimaryExpression	255
>6062	Argument	255 - gc
>6063	AdditiveExpression	255 - gc
>6064	Identifier	gc
>6065	PrimaryExpression	255
>6066	Argument	255 - bc
>6067	AdditiveExpression	255 - bc
>6068	Identifier	bc
>6069	PrimaryExpression	255
>6070	Callee	cv 
>6071	Identifier	cv 
>6072	RelationalExpression	imageOut . at < cv 
>6073	RelationalExpression	cv 
>6074	Expression	y , x
>6075	Identifier	x
>6076	Identifier	y
>6077	Identifier	cv 
>6078	MemberAccess	imageOut . at
>6079	Identifier	at
>6080	Identifier	imageOut
>6081	IdentifierDeclStatement	 
>6082	IdentifierDecl	bc = b < 0 ? 0 
>6083	AssignmentExpr	bc = b < 0 ? 0 
>6084	ConditionalExpression	b < 0 ? 0 
>6085	ConditionalExpression	b > 255 ? 255 
>6086	Identifier	b
>6087	PrimaryExpression	255
>6088	Condition	b > 255
>6089	RelationalExpression	b > 255
>6090	PrimaryExpression	255
>6091	Identifier	b
>6092	PrimaryExpression	0
>6093	Condition	b < 0
>6094	RelationalExpression	b < 0
>6095	PrimaryExpression	0
>6096	Identifier	b
>6097	Identifier	bc
>6098	Identifier	bc
>6099	IdentifierDeclType	uchar
>6100	IdentifierDeclStatement	 
>6101	IdentifierDecl	gc = g < 0 ? 0 
>6102	AssignmentExpr	gc = g < 0 ? 0 
>6103	ConditionalExpression	g < 0 ? 0 
>6104	ConditionalExpression	g > 255 ? 255 
>6105	Identifier	g
>6106	PrimaryExpression	255
>6107	Condition	g > 255
>6108	RelationalExpression	g > 255
>6109	PrimaryExpression	255
>6110	Identifier	g
>6111	PrimaryExpression	0
>6112	Condition	g < 0
>6113	RelationalExpression	g < 0
>6114	PrimaryExpression	0
>6115	Identifier	g
>6116	Identifier	gc
>6117	Identifier	gc
>6118	IdentifierDeclType	uchar
>6119	IdentifierDeclStatement	 
>6120	IdentifierDecl	rc = r < 0 ? 0 
>6121	AssignmentExpr	rc = r < 0 ? 0 
>6122	ConditionalExpression	r < 0 ? 0 
>6123	ConditionalExpression	r > 255 ? 255 
>6124	Identifier	r
>6125	PrimaryExpression	255
>6126	Condition	r > 255
>6127	RelationalExpression	r > 255
>6128	PrimaryExpression	255
>6129	Identifier	r
>6130	PrimaryExpression	0
>6131	Condition	r < 0
>6132	RelationalExpression	r < 0
>6133	PrimaryExpression	0
>6134	Identifier	r
>6135	Identifier	rc
>6136	Identifier	rc
>6137	IdentifierDeclType	uchar
>6138	IfStatement	if ( b < 0 )
>6139	ExpressionStatement	 
>6140	AssignmentExpr	b = - b
>6141	UnaryOp	- b
>6142	Identifier	b
>6143	UnaryOperator	-
>6144	Identifier	b
>6145	Condition	 
>6146	RelationalExpression	b < 0
>6147	PrimaryExpression	0
>6148	Identifier	b
>6149	IdentifierDeclStatement	 
>6150	IdentifierDecl	b = ( 2 - id ) * 255 / 1.0
>6151	AssignmentExpr	b = ( 2 - id ) * 255 / 1.0
>6152	MultiplicativeExpression	( 2 - id ) * 255 / 1.0
>6153	MultiplicativeExpression	255 / 1.0
>6154	PrimaryExpression	1.0
>6155	PrimaryExpression	255
>6156	AdditiveExpression	2 - id
>6157	Identifier	id
>6158	PrimaryExpression	2
>6159	Identifier	b
>6160	Identifier	b
>6161	IdentifierDeclType	float
>6162	IfStatement	if ( g < 0 )
>6163	ExpressionStatement	 
>6164	AssignmentExpr	g = - g
>6165	UnaryOp	- g
>6166	Identifier	g
>6167	UnaryOperator	-
>6168	Identifier	g
>6169	Condition	 
>6170	RelationalExpression	g < 0
>6171	PrimaryExpression	0
>6172	Identifier	g
>6173	IdentifierDeclStatement	 
>6174	IdentifierDecl	g = ( 1 - id ) * 255 / 1.0
>6175	AssignmentExpr	g = ( 1 - id ) * 255 / 1.0
>6176	MultiplicativeExpression	( 1 - id ) * 255 / 1.0
>6177	MultiplicativeExpression	255 / 1.0
>6178	PrimaryExpression	1.0
>6179	PrimaryExpression	255
>6180	AdditiveExpression	1 - id
>6181	Identifier	id
>6182	PrimaryExpression	1
>6183	Identifier	g
>6184	Identifier	g
>6185	IdentifierDeclType	float
>6186	IfStatement	if ( r < 0 )
>6187	ExpressionStatement	 
>6188	AssignmentExpr	r = - r
>6189	UnaryOp	- r
>6190	Identifier	r
>6191	UnaryOperator	-
>6192	Identifier	r
>6193	Condition	 
>6194	RelationalExpression	r < 0
>6195	PrimaryExpression	0
>6196	Identifier	r
>6197	IdentifierDeclStatement	 
>6198	IdentifierDecl	r = ( 0 - id ) * 255 / 1.0
>6199	AssignmentExpr	r = ( 0 - id ) * 255 / 1.0
>6200	MultiplicativeExpression	( 0 - id ) * 255 / 1.0
>6201	MultiplicativeExpression	255 / 1.0
>6202	PrimaryExpression	1.0
>6203	PrimaryExpression	255
>6204	AdditiveExpression	0 - id
>6205	Identifier	id
>6206	PrimaryExpression	0
>6207	Identifier	r
>6208	Identifier	r
>6209	IdentifierDeclType	float
>6210	IdentifierDeclStatement	 
>6211	IdentifierDecl	id = 1 * ( best / 200.0 + 0 )
>6212	AssignmentExpr	id = 1 * ( best / 200.0 + 0 )
>6213	MultiplicativeExpression	1 * ( best / 200.0 + 0 )
>6214	AdditiveExpression	best / 200.0 + 0
>6215	PrimaryExpression	0
>6216	MultiplicativeExpression	best / 200.0
>6217	PrimaryExpression	200.0
>6218	Identifier	best
>6219	PrimaryExpression	1
>6220	Identifier	id
>6221	Identifier	id
>6222	IdentifierDeclType	float
>6223	ForStatement	for ( int i = 0 ; i < 500 ; i ++ )
>6224	CompoundStatement	 
>6225	IfStatement	if ( score < bestScore )
>6226	CompoundStatement	 
>6227	ExpressionStatement	 
>6228	AssignmentExpr	best = i
>6229	Identifier	i
>6230	Identifier	best
>6231	ExpressionStatement	 
>6232	AssignmentExpr	bestScore = score
>6233	Identifier	score
>6234	Identifier	bestScore
>6235	Condition	 
>6236	RelationalExpression	score < bestScore
>6237	Identifier	bestScore
>6238	Identifier	score
>6239	IdentifierDeclStatement	 
>6240	IdentifierDecl	score = ( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] ) + ( col [ 1 ] - colors [ i ] [ 1 ] ) * ( \
>6241	AssignmentExpr	score = ( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] ) + ( col [ 1 ] - colors [ \
>6242	AdditiveExpression	( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] ) + ( col [ 1 ] - colors [ i ] [ \
>6243	AdditiveExpression	( col [ 1 ] - colors [ i ] [ 1 ] ) * ( col [ 1 ] - colors [ i ] [ 1 ] ) + ( col [ 2 ] - colors [ i ] [ \
>6244	MultiplicativeExpression	( col [ 2 ] - colors [ i ] [ 2 ] ) * ( col [ 2 ] - colors [ i ] [ 2 ] )
>6245	AdditiveExpression	col [ 2 ] - colors [ i ] [ 2 ]
>6246	ArrayIndexing	colors [ i ] [ 2 ]
>6247	PrimaryExpression	2
>6248	ArrayIndexing	colors [ i ]
>6249	Identifier	i
>6250	Identifier	colors
>6251	ArrayIndexing	col [ 2 ]
>6252	PrimaryExpression	2
>6253	Identifier	col
>6254	AdditiveExpression	col [ 2 ] - colors [ i ] [ 2 ]
>6255	ArrayIndexing	colors [ i ] [ 2 ]
>6256	PrimaryExpression	2
>6257	ArrayIndexing	colors [ i ]
>6258	Identifier	i
>6259	Identifier	colors
>6260	ArrayIndexing	col [ 2 ]
>6261	PrimaryExpression	2
>6262	Identifier	col
>6263	MultiplicativeExpression	( col [ 1 ] - colors [ i ] [ 1 ] ) * ( col [ 1 ] - colors [ i ] [ 1 ] )
>6264	AdditiveExpression	col [ 1 ] - colors [ i ] [ 1 ]
>6265	ArrayIndexing	colors [ i ] [ 1 ]
>6266	PrimaryExpression	1
>6267	ArrayIndexing	colors [ i ]
>6268	Identifier	i
>6269	Identifier	colors
>6270	ArrayIndexing	col [ 1 ]
>6271	PrimaryExpression	1
>6272	Identifier	col
>6273	AdditiveExpression	col [ 1 ] - colors [ i ] [ 1 ]
>6274	ArrayIndexing	colors [ i ] [ 1 ]
>6275	PrimaryExpression	1
>6276	ArrayIndexing	colors [ i ]
>6277	Identifier	i
>6278	Identifier	colors
>6279	ArrayIndexing	col [ 1 ]
>6280	PrimaryExpression	1
>6281	Identifier	col
>6282	MultiplicativeExpression	( col [ 0 ] - colors [ i ] [ 0 ] ) * ( col [ 0 ] - colors [ i ] [ 0 ] )
>6283	AdditiveExpression	col [ 0 ] - colors [ i ] [ 0 ]
>6284	ArrayIndexing	colors [ i ] [ 0 ]
>6285	PrimaryExpression	0
>6286	ArrayIndexing	colors [ i ]
>6287	Identifier	i
>6288	Identifier	colors
>6289	ArrayIndexing	col [ 0 ]
>6290	PrimaryExpression	0
>6291	Identifier	col
>6292	AdditiveExpression	col [ 0 ] - colors [ i ] [ 0 ]
>6293	ArrayIndexing	colors [ i ] [ 0 ]
>6294	PrimaryExpression	0
>6295	ArrayIndexing	colors [ i ]
>6296	Identifier	i
>6297	Identifier	colors
>6298	ArrayIndexing	col [ 0 ]
>6299	PrimaryExpression	0
>6300	Identifier	col
>6301	Identifier	score
>6302	Identifier	score
>6303	IdentifierDeclType	int
>6304	IncDecOp	 
>6305	IncDec	++
>6306	Identifier	i
>6307	Condition	 
>6308	RelationalExpression	i < 500
>6309	PrimaryExpression	500
>6310	Identifier	i
>6311	ForInit	 
>6312	IdentifierDeclStatement	int i = 0 ;
>6313	IdentifierDecl	i = 0
>6314	AssignmentExpr	i = 0
>6315	PrimaryExpression	0
>6316	Identifier	i
>6317	Identifier	i
>6318	IdentifierDeclType	int
>6319	IdentifierDeclStatement	 
>6320	IdentifierDecl	bestScore = 999999999
>6321	AssignmentExpr	bestScore = 999999999
>6322	PrimaryExpression	999999999
>6323	Identifier	bestScore
>6324	Identifier	bestScore
>6325	IdentifierDeclType	int
>6326	IdentifierDecl	best = 0
>6327	AssignmentExpr	best = 0
>6328	PrimaryExpression	0
>6329	Identifier	best
>6330	Identifier	best
>6331	IdentifierDeclType	int
>6332	ExpressionStatement	 
>6333	AssignmentExpr	imageOut . at < cv 
>6334	RelationalExpression	image . at < cv 
>6335	RelationalExpression	cv 
>6336	Expression	y , x
>6337	Identifier	x
>6338	Identifier	y
>6339	Identifier	cv 
>6340	MemberAccess	image . at
>6341	Identifier	at
>6342	Identifier	image
>6343	RelationalExpression	imageOut . at < cv 
>6344	RelationalExpression	cv 
>6345	Expression	y , x
>6346	Identifier	x
>6347	Identifier	y
>6348	Identifier	cv 
>6349	MemberAccess	imageOut . at
>6350	Identifier	at
>6351	Identifier	imageOut
>6352	Condition	 
>6353	RelationalExpression	err < 50
>6354	PrimaryExpression	50
>6355	Identifier	err
>6356	IdentifierDeclStatement	 
>6357	IdentifierDecl	err = ( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] ) + ( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ 2 ] ) + ( \
>6358	AssignmentExpr	err = ( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] ) + ( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] \
>6359	AdditiveExpression	( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] ) + ( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ \
>6360	AdditiveExpression	( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ 2 ] ) + ( col [ 2 ] - col [ 1 ] ) * ( col [ 2 ] - col [ \
>6361	MultiplicativeExpression	( col [ 2 ] - col [ 1 ] ) * ( col [ 2 ] - col [ 1 ] )
>6362	AdditiveExpression	col [ 2 ] - col [ 1 ]
>6363	ArrayIndexing	col [ 1 ]
>6364	PrimaryExpression	1
>6365	Identifier	col
>6366	ArrayIndexing	col [ 2 ]
>6367	PrimaryExpression	2
>6368	Identifier	col
>6369	AdditiveExpression	col [ 2 ] - col [ 1 ]
>6370	ArrayIndexing	col [ 1 ]
>6371	PrimaryExpression	1
>6372	Identifier	col
>6373	ArrayIndexing	col [ 2 ]
>6374	PrimaryExpression	2
>6375	Identifier	col
>6376	MultiplicativeExpression	( col [ 0 ] - col [ 2 ] ) * ( col [ 0 ] - col [ 2 ] )
>6377	AdditiveExpression	col [ 0 ] - col [ 2 ]
>6378	ArrayIndexing	col [ 2 ]
>6379	PrimaryExpression	2
>6380	Identifier	col
>6381	ArrayIndexing	col [ 0 ]
>6382	PrimaryExpression	0
>6383	Identifier	col
>6384	AdditiveExpression	col [ 0 ] - col [ 2 ]
>6385	ArrayIndexing	col [ 2 ]
>6386	PrimaryExpression	2
>6387	Identifier	col
>6388	ArrayIndexing	col [ 0 ]
>6389	PrimaryExpression	0
>6390	Identifier	col
>6391	MultiplicativeExpression	( col [ 0 ] - col [ 1 ] ) * ( col [ 0 ] - col [ 1 ] )
>6392	AdditiveExpression	col [ 0 ] - col [ 1 ]
>6393	ArrayIndexing	col [ 1 ]
>6394	PrimaryExpression	1
>6395	Identifier	col
>6396	ArrayIndexing	col [ 0 ]
>6397	PrimaryExpression	0
>6398	Identifier	col
>6399	AdditiveExpression	col [ 0 ] - col [ 1 ]
>6400	ArrayIndexing	col [ 1 ]
>6401	PrimaryExpression	1
>6402	Identifier	col
>6403	ArrayIndexing	col [ 0 ]
>6404	PrimaryExpression	0
>6405	Identifier	col
>6406	Identifier	err
>6407	Identifier	err
>6408	IdentifierDeclType	int
>6409	IdentifierDeclStatement	 
>6410	IdentifierDecl	col = image . at < cv 
>6411	AssignmentExpr	col = image . at < cv 
>6412	RelationalExpression	image . at < cv 
>6413	RelationalExpression	cv 
>6414	Expression	y , x
>6415	Identifier	x
>6416	Identifier	y
>6417	Identifier	cv 
>6418	MemberAccess	image . at
>6419	Identifier	at
>6420	Identifier	image
>6421	Identifier	col
>6422	Identifier	col
>6423	IdentifierDeclType	cv 
>6424	IncDecOp	 
>6425	IncDec	++
>6426	Identifier	y
>6427	Condition	 
>6428	RelationalExpression	y < image . rows
>6429	MemberAccess	image . rows
>6430	Identifier	rows
>6431	Identifier	image
>6432	Identifier	y
>6433	ForInit	 
>6434	IdentifierDeclStatement	int y = 0 ;
>6435	IdentifierDecl	y = 0
>6436	AssignmentExpr	y = 0
>6437	PrimaryExpression	0
>6438	Identifier	y
>6439	Identifier	y
>6440	IdentifierDeclType	int
>6441	IncDecOp	 
>6442	IncDec	++
>6443	Identifier	x
>6444	Condition	 
>6445	RelationalExpression	x < image . cols
>6446	MemberAccess	image . cols
>6447	Identifier	cols
>6448	Identifier	image
>6449	Identifier	x
>6450	ForInit	 
>6451	IdentifierDeclStatement	int x = 0 ;
>6452	IdentifierDecl	x = 0
>6453	AssignmentExpr	x = 0
>6454	PrimaryExpression	0
>6455	Identifier	x
>6456	Identifier	x
>6457	IdentifierDeclType	int
>6458	ForStatement	for ( int y = 0 ; y < 500 ; y ++ )
>6459	CompoundStatement	 
>6460	ExpressionStatement	 
>6461	AssignmentExpr	colors [ y ] [ 2 ] = 255 - rc
>6462	AdditiveExpression	255 - rc
>6463	Identifier	rc
>6464	PrimaryExpression	255
>6465	ArrayIndexing	colors [ y ] [ 2 ]
>6466	PrimaryExpression	2
>6467	ArrayIndexing	colors [ y ]
>6468	Identifier	y
>6469	Identifier	colors
>6470	ExpressionStatement	 
>6471	AssignmentExpr	colors [ y ] [ 1 ] = 255 - gc
>6472	AdditiveExpression	255 - gc
>6473	Identifier	gc
>6474	PrimaryExpression	255
>6475	ArrayIndexing	colors [ y ] [ 1 ]
>6476	PrimaryExpression	1
>6477	ArrayIndexing	colors [ y ]
>6478	Identifier	y
>6479	Identifier	colors
>6480	ExpressionStatement	 
>6481	AssignmentExpr	colors [ y ] [ 0 ] = 255 - bc
>6482	AdditiveExpression	255 - bc
>6483	Identifier	bc
>6484	PrimaryExpression	255
>6485	ArrayIndexing	colors [ y ] [ 0 ]
>6486	PrimaryExpression	0
>6487	ArrayIndexing	colors [ y ]
>6488	Identifier	y
>6489	Identifier	colors
>6490	IdentifierDeclStatement	 
>6491	IdentifierDecl	bc = b < 0 ? 0 
>6492	AssignmentExpr	bc = b < 0 ? 0 
>6493	ConditionalExpression	b < 0 ? 0 
>6494	ConditionalExpression	b > 255 ? 255 
>6495	Identifier	b
>6496	PrimaryExpression	255
>6497	Condition	b > 255
>6498	RelationalExpression	b > 255
>6499	PrimaryExpression	255
>6500	Identifier	b
>6501	PrimaryExpression	0
>6502	Condition	b < 0
>6503	RelationalExpression	b < 0
>6504	PrimaryExpression	0
>6505	Identifier	b
>6506	Identifier	bc
>6507	Identifier	bc
>6508	IdentifierDeclType	uchar
>6509	IdentifierDeclStatement	 
>6510	IdentifierDecl	gc = g < 0 ? 0 
>6511	AssignmentExpr	gc = g < 0 ? 0 
>6512	ConditionalExpression	g < 0 ? 0 
>6513	ConditionalExpression	g > 255 ? 255 
>6514	Identifier	g
>6515	PrimaryExpression	255
>6516	Condition	g > 255
>6517	RelationalExpression	g > 255
>6518	PrimaryExpression	255
>6519	Identifier	g
>6520	PrimaryExpression	0
>6521	Condition	g < 0
>6522	RelationalExpression	g < 0
>6523	PrimaryExpression	0
>6524	Identifier	g
>6525	Identifier	gc
>6526	Identifier	gc
>6527	IdentifierDeclType	uchar
>6528	IdentifierDeclStatement	 
>6529	IdentifierDecl	rc = r < 0 ? 0 
>6530	AssignmentExpr	rc = r < 0 ? 0 
>6531	ConditionalExpression	r < 0 ? 0 
>6532	ConditionalExpression	r > 255 ? 255 
>6533	Identifier	r
>6534	PrimaryExpression	255
>6535	Condition	r > 255
>6536	RelationalExpression	r > 255
>6537	PrimaryExpression	255
>6538	Identifier	r
>6539	PrimaryExpression	0
>6540	Condition	r < 0
>6541	RelationalExpression	r < 0
>6542	PrimaryExpression	0
>6543	Identifier	r
>6544	Identifier	rc
>6545	Identifier	rc
>6546	IdentifierDeclType	uchar
>6547	IfStatement	if ( b < 0 )
>6548	ExpressionStatement	 
>6549	AssignmentExpr	b = - b
>6550	UnaryOp	- b
>6551	Identifier	b
>6552	UnaryOperator	-
>6553	Identifier	b
>6554	Condition	 
>6555	RelationalExpression	b < 0
>6556	PrimaryExpression	0
>6557	Identifier	b
>6558	IdentifierDeclStatement	 
>6559	IdentifierDecl	b = ( 2 - id ) * 255 / 1.0
>6560	AssignmentExpr	b = ( 2 - id ) * 255 / 1.0
>6561	MultiplicativeExpression	( 2 - id ) * 255 / 1.0
>6562	MultiplicativeExpression	255 / 1.0
>6563	PrimaryExpression	1.0
>6564	PrimaryExpression	255
>6565	AdditiveExpression	2 - id
>6566	Identifier	id
>6567	PrimaryExpression	2
>6568	Identifier	b
>6569	Identifier	b
>6570	IdentifierDeclType	float
>6571	IfStatement	if ( g < 0 )
>6572	ExpressionStatement	 
>6573	AssignmentExpr	g = - g
>6574	UnaryOp	- g
>6575	Identifier	g
>6576	UnaryOperator	-
>6577	Identifier	g
>6578	Condition	 
>6579	RelationalExpression	g < 0
>6580	PrimaryExpression	0
>6581	Identifier	g
>6582	IdentifierDeclStatement	 
>6583	IdentifierDecl	g = ( 1 - id ) * 255 / 1.0
>6584	AssignmentExpr	g = ( 1 - id ) * 255 / 1.0
>6585	MultiplicativeExpression	( 1 - id ) * 255 / 1.0
>6586	MultiplicativeExpression	255 / 1.0
>6587	PrimaryExpression	1.0
>6588	PrimaryExpression	255
>6589	AdditiveExpression	1 - id
>6590	Identifier	id
>6591	PrimaryExpression	1
>6592	Identifier	g
>6593	Identifier	g
>6594	IdentifierDeclType	float
>6595	IfStatement	if ( r < 0 )
>6596	ExpressionStatement	 
>6597	AssignmentExpr	r = - r
>6598	UnaryOp	- r
>6599	Identifier	r
>6600	UnaryOperator	-
>6601	Identifier	r
>6602	Condition	 
>6603	RelationalExpression	r < 0
>6604	PrimaryExpression	0
>6605	Identifier	r
>6606	IdentifierDeclStatement	 
>6607	IdentifierDecl	r = ( 0 - id ) * 255 / 1.0
>6608	AssignmentExpr	r = ( 0 - id ) * 255 / 1.0
>6609	MultiplicativeExpression	( 0 - id ) * 255 / 1.0
>6610	MultiplicativeExpression	255 / 1.0
>6611	PrimaryExpression	1.0
>6612	PrimaryExpression	255
>6613	AdditiveExpression	0 - id
>6614	Identifier	id
>6615	PrimaryExpression	0
>6616	Identifier	r
>6617	Identifier	r
>6618	IdentifierDeclType	float
>6619	IdentifierDeclStatement	 
>6620	IdentifierDecl	id = fac * ( y / 200.0 + off )
>6621	AssignmentExpr	id = fac * ( y / 200.0 + off )
>6622	MultiplicativeExpression	fac * ( y / 200.0 + off )
>6623	AdditiveExpression	y / 200.0 + off
>6624	Identifier	off
>6625	MultiplicativeExpression	y / 200.0
>6626	PrimaryExpression	200.0
>6627	Identifier	y
>6628	Identifier	fac
>6629	Identifier	id
>6630	Identifier	id
>6631	IdentifierDeclType	float
>6632	IncDecOp	 
>6633	IncDec	++
>6634	Identifier	y
>6635	Condition	 
>6636	RelationalExpression	y < 500
>6637	PrimaryExpression	500
>6638	Identifier	y
>6639	ForInit	 
>6640	IdentifierDeclStatement	int y = 0 ;
>6641	IdentifierDecl	y = 0
>6642	AssignmentExpr	y = 0
>6643	PrimaryExpression	0
>6644	Identifier	y
>6645	Identifier	y
>6646	IdentifierDeclType	int
>6647	IfStatement	if ( k == 'n' )
>6648	ExpressionStatement	 
>6649	AssignmentExpr	off -= 0.05
>6650	PrimaryExpression	0.05
>6651	Identifier	off
>6652	Condition	 
>6653	EqualityExpression	k == 'n'
>6654	PrimaryExpression	'n'
>6655	Identifier	k
>6656	IfStatement	if ( k == 'o' )
>6657	ExpressionStatement	 
>6658	AssignmentExpr	off += 0.05
>6659	PrimaryExpression	0.05
>6660	Identifier	off
>6661	Condition	 
>6662	EqualityExpression	k == 'o'
>6663	PrimaryExpression	'o'
>6664	Identifier	k
>6665	IfStatement	if ( k == 'm' )
>6666	ExpressionStatement	 
>6667	AssignmentExpr	fac /= 1.05
>6668	PrimaryExpression	1.05
>6669	Identifier	fac
>6670	Condition	 
>6671	EqualityExpression	k == 'm'
>6672	PrimaryExpression	'm'
>6673	Identifier	k
>6674	IfStatement	if ( k == 'p' )
>6675	ExpressionStatement	 
>6676	AssignmentExpr	fac *= 1.05
>6677	PrimaryExpression	1.05
>6678	Identifier	fac
>6679	Condition	 
>6680	EqualityExpression	k == 'p'
>6681	PrimaryExpression	'p'
>6682	Identifier	k
>6683	Condition	 
>6684	EqualityExpression	's' != ( k = cv 
>6685	AssignmentExpr	k = cv 
>6686	CallExpression	cv 
>6687	ArgumentList	0
>6688	Argument	0
>6689	PrimaryExpression	0
>6690	Callee	cv 
>6691	Identifier	cv 
>6692	Identifier	k
>6693	PrimaryExpression	's'
>6694	ExpressionStatement	 
>6695	CallExpression	printf ( \"type depth
>6696	ArgumentList	\"type depth
>6697	Argument	imageOut . type ( )
>6698	CallExpression	imageOut . type ( )
>6699	ArgumentList	 
>6700	Callee	imageOut . type
>6701	MemberAccess	imageOut . type
>6702	Identifier	type
>6703	Identifier	imageOut
>6704	Argument	\"type depth
>6705	PrimaryExpression	\"type depth
>6706	Callee	printf
>6707	Identifier	printf
>6708	ExpressionStatement	 
>6709	CallExpression	printf ( \"type depth1
>6710	ArgumentList	\"type depth1
>6711	Argument	image . type ( )
>6712	CallExpression	image . type ( )
>6713	ArgumentList	 
>6714	Callee	image . type
>6715	MemberAccess	image . type
>6716	Identifier	type
>6717	Identifier	image
>6718	Argument	\"type depth1
>6719	PrimaryExpression	\"type depth1
>6720	Callee	printf
>6721	Identifier	printf
>6722	IdentifierDeclStatement	 
>6723	IdentifierDecl	imageOut = cv 
>6724	AssignmentExpr	imageOut = cv 
>6725	CallExpression	cv 
>6726	ArgumentList	image . rows
>6727	Argument	CV_8UC3
>6728	Identifier	CV_8UC3
>6729	Argument	image . cols
>6730	MemberAccess	image . cols
>6731	Identifier	cols
>6732	Identifier	image
>6733	Argument	image . rows
>6734	MemberAccess	image . rows
>6735	Identifier	rows
>6736	Identifier	image
>6737	Callee	cv 
>6738	Identifier	cv 
>6739	Identifier	imageOut
>6740	Identifier	imageOut
>6741	IdentifierDeclType	cv 
>6742	IdentifierDeclStatement	 
>6743	IdentifierDecl	image = cv 
>6744	AssignmentExpr	image = cv 
>6745	CallExpression	cv 
>6746	ArgumentList	argv [ 1 ]
>6747	Argument	- 1
>6748	UnaryOp	- 1
>6749	PrimaryExpression	1
>6750	UnaryOperator	-
>6751	Argument	argv [ 1 ]
>6752	ArrayIndexing	argv [ 1 ]
>6753	PrimaryExpression	1
>6754	Identifier	argv
>6755	Callee	cv 
>6756	Identifier	cv 
>6757	Identifier	image
>6758	Identifier	image
>6759	IdentifierDeclType	cv 
>6760	IdentifierDeclStatement	 
>6761	IdentifierDecl	k
>6762	Identifier	k
>6763	IdentifierDeclType	char
>6764	IdentifierDeclStatement	 
>6765	IdentifierDecl	off = 0
>6766	AssignmentExpr	off = 0
>6767	PrimaryExpression	0
>6768	Identifier	off
>6769	Identifier	off
>6770	IdentifierDeclType	float
>6771	IdentifierDeclStatement	 
>6772	IdentifierDecl	fac = 1
>6773	AssignmentExpr	fac = 1
>6774	PrimaryExpression	1
>6775	Identifier	fac
>6776	Identifier	fac
>6777	IdentifierDeclType	float
>6778	ExpressionStatement	 
>6779	ArrayIndexing	colors [ 500 ] [ 3 ]
>6780	PrimaryExpression	3
>6781	ArrayIndexing	colors [ 500 ]
>6782	PrimaryExpression	500
>6783	Identifier	colors
>6784	Statement	 
>6834	FunctionDef	makeRainbow (int argc , char * * argv)
>6835	ParameterList	int argc , char * * argv
>6836	Parameter	 
>6837	Identifier	argv
>6838	ParameterType	char * *
>6839	Parameter	 
>6840	Identifier	argc
>6841	ParameterType	int
>6842	ReturnType	int
>6843	CompoundStatement	 
>6844	ReturnStatement	 
>6845	PrimaryExpression	0
>6846	ExpressionStatement	 
>6847	CallExpression	cv 
>6848	ArgumentList	\"colored.png\"
>6849	Argument	depthColor
>6850	Identifier	depthColor
>6851	Argument	\"colored.png\"
>6852	PrimaryExpression	\"colored.png\"
>6853	Callee	cv 
>6854	Identifier	cv 
>6855	WhileStatement	while ( 's' != ( k = cv 
>6856	CompoundStatement	 
>6857	ExpressionStatement	 
>6858	CallExpression	cv 
>6859	ArgumentList	\"depth\"
>6860	Argument	depthColor
>6861	Identifier	depthColor
>6862	Argument	\"depth\"
>6863	PrimaryExpression	\"depth\"
>6864	Callee	cv 
>6865	Identifier	cv 
>6866	ExpressionStatement	 
>6867	CallExpression	printf ( \"fac
>6868	ArgumentList	\"fac
>6869	Argument	fac
>6870	Identifier	fac
>6871	Argument	\"fac
>6872	PrimaryExpression	\"fac
>6873	Callee	printf
>6874	Identifier	printf
>6875	ForStatement	for ( int x = 0 ; x < depth . cols ; x ++ )
>6876	ForStatement	for ( int y = 0 ; y < depth . rows ; y ++ )
>6877	CompoundStatement	 
>6878	IfStatement	if ( d == 0 )
>6879	ElseStatement	else
>6880	CompoundStatement	 
>6881	ExpressionStatement	 
>6882	AssignmentExpr	depthColor . at < cv 
>6883	CallExpression	cv 
>6884	ArgumentList	255 - bc
>6885	Argument	255 - rc
>6886	AdditiveExpression	255 - rc
>6887	Identifier	rc
>6888	PrimaryExpression	255
>6889	Argument	255 - gc
>6890	AdditiveExpression	255 - gc
>6891	Identifier	gc
>6892	PrimaryExpression	255
>6893	Argument	255 - bc
>6894	AdditiveExpression	255 - bc
>6895	Identifier	bc
>6896	PrimaryExpression	255
>6897	Callee	cv 
>6898	Identifier	cv 
>6899	RelationalExpression	depthColor . at < cv 
>6900	RelationalExpression	cv 
>6901	Expression	y , x
>6902	Identifier	x
>6903	Identifier	y
>6904	Identifier	cv 
>6905	MemberAccess	depthColor . at
>6906	Identifier	at
>6907	Identifier	depthColor
>6908	IdentifierDeclStatement	 
>6909	IdentifierDecl	bc = b < 0 ? 0 
>6910	AssignmentExpr	bc = b < 0 ? 0 
>6911	ConditionalExpression	b < 0 ? 0 
>6912	ConditionalExpression	b > 255 ? 255 
>6913	Identifier	b
>6914	PrimaryExpression	255
>6915	Condition	b > 255
>6916	RelationalExpression	b > 255
>6917	PrimaryExpression	255
>6918	Identifier	b
>6919	PrimaryExpression	0
>6920	Condition	b < 0
>6921	RelationalExpression	b < 0
>6922	PrimaryExpression	0
>6923	Identifier	b
>6924	Identifier	bc
>6925	Identifier	bc
>6926	IdentifierDeclType	uchar
>6927	IdentifierDeclStatement	 
>6928	IdentifierDecl	gc = g < 0 ? 0 
>6929	AssignmentExpr	gc = g < 0 ? 0 
>6930	ConditionalExpression	g < 0 ? 0 
>6931	ConditionalExpression	g > 255 ? 255 
>6932	Identifier	g
>6933	PrimaryExpression	255
>6934	Condition	g > 255
>6935	RelationalExpression	g > 255
>6936	PrimaryExpression	255
>6937	Identifier	g
>6938	PrimaryExpression	0
>6939	Condition	g < 0
>6940	RelationalExpression	g < 0
>6941	PrimaryExpression	0
>6942	Identifier	g
>6943	Identifier	gc
>6944	Identifier	gc
>6945	IdentifierDeclType	uchar
>6946	IdentifierDeclStatement	 
>6947	IdentifierDecl	rc = r < 0 ? 0 
>6948	AssignmentExpr	rc = r < 0 ? 0 
>6949	ConditionalExpression	r < 0 ? 0 
>6950	ConditionalExpression	r > 255 ? 255 
>6951	Identifier	r
>6952	PrimaryExpression	255
>6953	Condition	r > 255
>6954	RelationalExpression	r > 255
>6955	PrimaryExpression	255
>6956	Identifier	r
>6957	PrimaryExpression	0
>6958	Condition	r < 0
>6959	RelationalExpression	r < 0
>6960	PrimaryExpression	0
>6961	Identifier	r
>6962	Identifier	rc
>6963	Identifier	rc
>6964	IdentifierDeclType	uchar
>6965	IfStatement	if ( b < 0 )
>6966	ExpressionStatement	 
>6967	AssignmentExpr	b = - b
>6968	UnaryOp	- b
>6969	Identifier	b
>6970	UnaryOperator	-
>6971	Identifier	b
>6972	Condition	 
>6973	RelationalExpression	b < 0
>6974	PrimaryExpression	0
>6975	Identifier	b
>6976	IdentifierDeclStatement	 
>6977	IdentifierDecl	b = ( 2 - id ) * 255 / 1.0
>6978	AssignmentExpr	b = ( 2 - id ) * 255 / 1.0
>6979	MultiplicativeExpression	( 2 - id ) * 255 / 1.0
>6980	MultiplicativeExpression	255 / 1.0
>6981	PrimaryExpression	1.0
>6982	PrimaryExpression	255
>6983	AdditiveExpression	2 - id
>6984	Identifier	id
>6985	PrimaryExpression	2
>6986	Identifier	b
>6987	Identifier	b
>6988	IdentifierDeclType	float
>6989	IfStatement	if ( g < 0 )
>6990	ExpressionStatement	 
>6991	AssignmentExpr	g = - g
>6992	UnaryOp	- g
>6993	Identifier	g
>6994	UnaryOperator	-
>6995	Identifier	g
>6996	Condition	 
>6997	RelationalExpression	g < 0
>6998	PrimaryExpression	0
>6999	Identifier	g
>7000	IdentifierDeclStatement	 
>7001	IdentifierDecl	g = ( 1 - id ) * 255 / 1.0
>7002	AssignmentExpr	g = ( 1 - id ) * 255 / 1.0
>7003	MultiplicativeExpression	( 1 - id ) * 255 / 1.0
>7004	MultiplicativeExpression	255 / 1.0
>7005	PrimaryExpression	1.0
>7006	PrimaryExpression	255
>7007	AdditiveExpression	1 - id
>7008	Identifier	id
>7009	PrimaryExpression	1
>7010	Identifier	g
>7011	Identifier	g
>7012	IdentifierDeclType	float
>7013	IfStatement	if ( r < 0 )
>7014	ExpressionStatement	 
>7015	AssignmentExpr	r = - r
>7016	UnaryOp	- r
>7017	Identifier	r
>7018	UnaryOperator	-
>7019	Identifier	r
>7020	Condition	 
>7021	RelationalExpression	r < 0
>7022	PrimaryExpression	0
>7023	Identifier	r
>7024	IdentifierDeclStatement	 
>7025	IdentifierDecl	r = ( 0 - id ) * 255 / 1.0
>7026	AssignmentExpr	r = ( 0 - id ) * 255 / 1.0
>7027	MultiplicativeExpression	( 0 - id ) * 255 / 1.0
>7028	MultiplicativeExpression	255 / 1.0
>7029	PrimaryExpression	1.0
>7030	PrimaryExpression	255
>7031	AdditiveExpression	0 - id
>7032	Identifier	id
>7033	PrimaryExpression	0
>7034	Identifier	r
>7035	Identifier	r
>7036	IdentifierDeclType	float
>7037	IdentifierDeclStatement	 
>7038	IdentifierDecl	id = fac / d
>7039	AssignmentExpr	id = fac / d
>7040	MultiplicativeExpression	fac / d
>7041	Identifier	d
>7042	Identifier	fac
>7043	Identifier	id
>7044	Identifier	id
>7045	IdentifierDeclType	float
>7046	ExpressionStatement	 
>7047	AssignmentExpr	depthColor . at < cv 
>7048	CallExpression	cv 
>7049	ArgumentList	image . at < uchar > ( y , x )
>7050	Argument	image . at < uchar > ( y , x )
>7051	RelationalExpression	image . at < uchar > ( y , x )
>7052	RelationalExpression	uchar > ( y , x )
>7053	Expression	y , x
>7054	Identifier	x
>7055	Identifier	y
>7056	Identifier	uchar
>7057	MemberAccess	image . at
>7058	Identifier	at
>7059	Identifier	image
>7060	Argument	image . at < uchar > ( y , x )
>7061	RelationalExpression	image . at < uchar > ( y , x )
>7062	RelationalExpression	uchar > ( y , x )
>7063	Expression	y , x
>7064	Identifier	x
>7065	Identifier	y
>7066	Identifier	uchar
>7067	MemberAccess	image . at
>7068	Identifier	at
>7069	Identifier	image
>7070	Argument	image . at < uchar > ( y , x )
>7071	RelationalExpression	image . at < uchar > ( y , x )
>7072	RelationalExpression	uchar > ( y , x )
>7073	Expression	y , x
>7074	Identifier	x
>7075	Identifier	y
>7076	Identifier	uchar
>7077	MemberAccess	image . at
>7078	Identifier	at
>7079	Identifier	image
>7080	Callee	cv 
>7081	Identifier	cv 
>7082	RelationalExpression	depthColor . at < cv 
>7083	RelationalExpression	cv 
>7084	Expression	y , x
>7085	Identifier	x
>7086	Identifier	y
>7087	Identifier	cv 
>7088	MemberAccess	depthColor . at
>7089	Identifier	at
>7090	Identifier	depthColor
>7091	Condition	 
>7092	EqualityExpression	d == 0
>7093	PrimaryExpression	0
>7094	Identifier	d
>7095	IdentifierDeclStatement	 
>7096	IdentifierDecl	d = 1.0 / depth . at < float > ( y , x )
>7097	AssignmentExpr	d = 1.0 / depth . at < float > ( y , x )
>7098	RelationalExpression	1.0 / depth . at < float > ( y , x )
>7099	RelationalExpression	float > ( y , x )
>7100	Expression	y , x
>7101	Identifier	x
>7102	Identifier	y
>7103	Identifier	float
>7104	MultiplicativeExpression	1.0 / depth . at
>7105	MemberAccess	depth . at
>7106	Identifier	at
>7107	Identifier	depth
>7108	PrimaryExpression	1.0
>7109	Identifier	d
>7110	Identifier	d
>7111	IdentifierDeclType	float
>7112	IncDecOp	 
>7113	IncDec	++
>7114	Identifier	y
>7115	Condition	 
>7116	RelationalExpression	y < depth . rows
>7117	MemberAccess	depth . rows
>7118	Identifier	rows
>7119	Identifier	depth
>7120	Identifier	y
>7121	ForInit	 
>7122	IdentifierDeclStatement	int y = 0 ;
>7123	IdentifierDecl	y = 0
>7124	AssignmentExpr	y = 0
>7125	PrimaryExpression	0
>7126	Identifier	y
>7127	Identifier	y
>7128	IdentifierDeclType	int
>7129	IncDecOp	 
>7130	IncDec	++
>7131	Identifier	x
>7132	Condition	 
>7133	RelationalExpression	x < depth . cols
>7134	MemberAccess	depth . cols
>7135	Identifier	cols
>7136	Identifier	depth
>7137	Identifier	x
>7138	ForInit	 
>7139	IdentifierDeclStatement	int x = 0 ;
>7140	IdentifierDecl	x = 0
>7141	AssignmentExpr	x = 0
>7142	PrimaryExpression	0
>7143	Identifier	x
>7144	Identifier	x
>7145	IdentifierDeclType	int
>7146	IfStatement	if ( k == 'm' )
>7147	ExpressionStatement	 
>7148	AssignmentExpr	fac /= 1.05
>7149	PrimaryExpression	1.05
>7150	Identifier	fac
>7151	Condition	 
>7152	EqualityExpression	k == 'm'
>7153	PrimaryExpression	'm'
>7154	Identifier	k
>7155	IfStatement	if ( k == 'p' )
>7156	ExpressionStatement	 
>7157	AssignmentExpr	fac *= 1.05
>7158	PrimaryExpression	1.05
>7159	Identifier	fac
>7160	Condition	 
>7161	EqualityExpression	k == 'p'
>7162	PrimaryExpression	'p'
>7163	Identifier	k
>7164	Condition	 
>7165	EqualityExpression	's' != ( k = cv 
>7166	AssignmentExpr	k = cv 
>7167	CallExpression	cv 
>7168	ArgumentList	0
>7169	Argument	0
>7170	PrimaryExpression	0
>7171	Callee	cv 
>7172	Identifier	cv 
>7173	Identifier	k
>7174	PrimaryExpression	's'
>7175	ExpressionStatement	 
>7176	CallExpression	cv 
>7177	ArgumentList	\"depth\"
>7178	Argument	depth
>7179	Identifier	depth
>7180	Argument	\"depth\"
>7181	PrimaryExpression	\"depth\"
>7182	Callee	cv 
>7183	Identifier	cv 
>7184	IdentifierDeclStatement	 
>7185	IdentifierDecl	k
>7186	Identifier	k
>7187	IdentifierDeclType	char
>7188	IdentifierDeclStatement	 
>7189	IdentifierDecl	fac = 1
>7190	AssignmentExpr	fac = 1
>7191	PrimaryExpression	1
>7192	Identifier	fac
>7193	Identifier	fac
>7194	IdentifierDeclType	float
>7195	ExpressionStatement	 
>7196	CallExpression	printf ( \"type depthC
>7197	ArgumentList	\"type depthC
>7198	Argument	depthColor . type ( )
>7199	CallExpression	depthColor . type ( )
>7200	ArgumentList	 
>7201	Callee	depthColor . type
>7202	MemberAccess	depthColor . type
>7203	Identifier	type
>7204	Identifier	depthColor
>7205	Argument	\"type depthC
>7206	PrimaryExpression	\"type depthC
>7207	Callee	printf
>7208	Identifier	printf
>7209	ExpressionStatement	 
>7210	CallExpression	printf ( \"type depth
>7211	ArgumentList	\"type depth
>7212	Argument	depth . type ( )
>7213	CallExpression	depth . type ( )
>7214	ArgumentList	 
>7215	Callee	depth . type
>7216	MemberAccess	depth . type
>7217	Identifier	type
>7218	Identifier	depth
>7219	Argument	\"type depth
>7220	PrimaryExpression	\"type depth
>7221	Callee	printf
>7222	Identifier	printf
>7223	ExpressionStatement	 
>7224	CallExpression	printf ( \"type depth1
>7225	ArgumentList	\"type depth1
>7226	Argument	depth1 . type ( )
>7227	CallExpression	depth1 . type ( )
>7228	ArgumentList	 
>7229	Callee	depth1 . type
>7230	MemberAccess	depth1 . type
>7231	Identifier	type
>7232	Identifier	depth1
>7233	Argument	\"type depth1
>7234	PrimaryExpression	\"type depth1
>7235	Callee	printf
>7236	Identifier	printf
>7237	IdentifierDeclStatement	 
>7238	IdentifierDecl	depthColor = cv 
>7239	AssignmentExpr	depthColor = cv 
>7240	CallExpression	cv 
>7241	ArgumentList	depth . rows
>7242	Argument	CV_8UC3
>7243	Identifier	CV_8UC3
>7244	Argument	depth . cols
>7245	MemberAccess	depth . cols
>7246	Identifier	cols
>7247	Identifier	depth
>7248	Argument	depth . rows
>7249	MemberAccess	depth . rows
>7250	Identifier	rows
>7251	Identifier	depth
>7252	Callee	cv 
>7253	Identifier	cv 
>7254	Identifier	depthColor
>7255	Identifier	depthColor
>7256	IdentifierDeclType	cv 
>7257	ExpressionStatement	 
>7258	CallExpression	depth1 . convertTo ( depth , CV_32FC1 , 1.0 / 6502.0 )
>7259	ArgumentList	depth
>7260	Argument	1.0 / 6502.0
>7261	MultiplicativeExpression	1.0 / 6502.0
>7262	PrimaryExpression	6502.0
>7263	PrimaryExpression	1.0
>7264	Argument	CV_32FC1
>7265	Identifier	CV_32FC1
>7266	Argument	depth
>7267	Identifier	depth
>7268	Callee	depth1 . convertTo
>7269	MemberAccess	depth1 . convertTo
>7270	Identifier	convertTo
>7271	Identifier	depth1
>7272	IdentifierDeclStatement	 
>7273	IdentifierDecl	depth
>7274	Identifier	depth
>7275	IdentifierDeclType	cv 
>7276	IdentifierDeclStatement	 
>7277	IdentifierDecl	image = cv 
>7278	AssignmentExpr	image = cv 
>7279	CallExpression	cv 
>7280	ArgumentList	argv [ 2 ]
>7281	Argument	0
>7282	PrimaryExpression	0
>7283	Argument	argv [ 2 ]
>7284	ArrayIndexing	argv [ 2 ]
>7285	PrimaryExpression	2
>7286	Identifier	argv
>7287	Callee	cv 
>7288	Identifier	cv 
>7289	Identifier	image
>7290	Identifier	image
>7291	IdentifierDeclType	cv 
>7292	IdentifierDeclStatement	 
>7293	IdentifierDecl	depth1 = cv 
>7294	AssignmentExpr	depth1 = cv 
>7295	CallExpression	cv 
>7296	ArgumentList	argv [ 1 ]
>7297	Argument	0
>7298	PrimaryExpression	0
>7299	Argument	argv [ 1 ]
>7300	ArrayIndexing	argv [ 1 ]
>7301	PrimaryExpression	1
>7302	Identifier	argv
>7303	Callee	cv 
>7304	Identifier	cv 
>7305	Identifier	depth1
>7306	Identifier	depth1
>7307	IdentifierDeclType	cv 
>7346	FunctionDef	dilateColor (int argc , char * * argv)
>7347	ParameterList	int argc , char * * argv
>7348	Parameter	 
>7349	Identifier	argv
>7350	ParameterType	char * *
>7351	Parameter	 
>7352	Identifier	argc
>7353	ParameterType	int
>7354	ReturnType	int
>7355	CompoundStatement	 
>7356	ReturnStatement	 
>7357	PrimaryExpression	0
>7358	ExpressionStatement	 
>7359	CallExpression	cv 
>7360	ArgumentList	n
>7361	Argument	imageOut
>7362	Identifier	imageOut
>7363	Argument	n
>7364	Identifier	n
>7365	Callee	cv 
>7366	Identifier	cv 
>7367	ExpressionStatement	 
>7368	CallExpression	cv 
>7369	ArgumentList	0
>7370	Argument	0
>7371	PrimaryExpression	0
>7372	Callee	cv 
>7373	Identifier	cv 
>7374	ExpressionStatement	 
>7375	CallExpression	cv 
>7376	ArgumentList	\"image\"
>7377	Argument	imageOut
>7378	Identifier	imageOut
>7379	Argument	\"image\"
>7380	PrimaryExpression	\"image\"
>7381	Callee	cv 
>7382	Identifier	cv 
>7383	ExpressionStatement	 
>7384	CallExpression	printf ( \"output
>7385	ArgumentList	\"output
>7386	Argument	n . c_str ( )
>7387	CallExpression	n . c_str ( )
>7388	ArgumentList	 
>7389	Callee	n . c_str
>7390	MemberAccess	n . c_str
>7391	Identifier	c_str
>7392	Identifier	n
>7393	Argument	\"output
>7394	PrimaryExpression	\"output
>7395	Callee	printf
>7396	Identifier	printf
>7397	ExpressionStatement	 
>7398	CallExpression	n . replace ( n . length ( ) - 4 , std 
>7399	ArgumentList	n . length ( ) - 4
>7400	Argument	\"_dilated.png\"
>7401	PrimaryExpression	\"_dilated.png\"
>7402	Argument	std 
>7403	Identifier	std 
>7404	Argument	n . length ( ) - 4
>7405	AdditiveExpression	n . length ( ) - 4
>7406	PrimaryExpression	4
>7407	CallExpression	n . length ( )
>7408	ArgumentList	 
>7409	Callee	n . length
>7410	MemberAccess	n . length
>7411	Identifier	length
>7412	Identifier	n
>7413	Callee	n . replace
>7414	MemberAccess	n . replace
>7415	Identifier	replace
>7416	Identifier	n
>7417	IdentifierDeclStatement	 
>7418	IdentifierDecl	n = argv [ 1 ]
>7419	AssignmentExpr	n = argv [ 1 ]
>7420	ArrayIndexing	argv [ 1 ]
>7421	PrimaryExpression	1
>7422	Identifier	argv
>7423	Identifier	n
>7424	Identifier	n
>7425	IdentifierDeclType	std 
>7426	ForStatement	for ( int x = 1 ; x < image . cols - 1 ; x ++ )
>7427	ForStatement	for ( int y = 1 ; y < image . rows - 1 ; y ++ )
>7428	CompoundStatement	 
>7429	IfStatement	if ( num > 0 )
>7430	ExpressionStatement	 
>7431	AssignmentExpr	imageOut . at < cv 
>7432	CallExpression	cv 
>7433	ArgumentList	r / num
>7434	Argument	b / num
>7435	MultiplicativeExpression	b / num
>7436	Identifier	num
>7437	Identifier	b
>7438	Argument	g / num
>7439	MultiplicativeExpression	g / num
>7440	Identifier	num
>7441	Identifier	g
>7442	Argument	r / num
>7443	MultiplicativeExpression	r / num
>7444	Identifier	num
>7445	Identifier	r
>7446	Callee	cv 
>7447	Identifier	cv 
>7448	RelationalExpression	imageOut . at < cv 
>7449	RelationalExpression	cv 
>7450	Expression	y , x
>7451	Identifier	x
>7452	Identifier	y
>7453	Identifier	cv 
>7454	MemberAccess	imageOut . at
>7455	Identifier	at
>7456	Identifier	imageOut
>7457	Condition	 
>7458	RelationalExpression	num > 0
>7459	PrimaryExpression	0
>7460	Identifier	num
>7461	ForStatement	for ( int dx = - 1 ; dx <= 1 ; dx ++ )
>7462	ForStatement	for ( int dy = - 1 ; dy <= 1 ; dy ++ )
>7463	CompoundStatement	 
>7464	ExpressionStatement	 
>7465	IncDecOp	num ++
>7466	IncDec	++
>7467	Identifier	num
>7468	ExpressionStatement	 
>7469	AssignmentExpr	b += c2 [ 2 ]
>7470	ArrayIndexing	c2 [ 2 ]
>7471	PrimaryExpression	2
>7472	Identifier	c2
>7473	Identifier	b
>7474	ExpressionStatement	 
>7475	AssignmentExpr	g += c2 [ 1 ]
>7476	ArrayIndexing	c2 [ 1 ]
>7477	PrimaryExpression	1
>7478	Identifier	c2
>7479	Identifier	g
>7480	ExpressionStatement	 
>7481	AssignmentExpr	r += c2 [ 0 ]
>7482	ArrayIndexing	c2 [ 0 ]
>7483	PrimaryExpression	0
>7484	Identifier	c2
>7485	Identifier	r
>7486	IfStatement	if ( c2 [ 0 ] == c2 [ 1 ] && c2 [ 1 ] == c2 [ 2 ] )
>7487	ContinueStatement	 
>7488	Condition	 
>7489	AndExpression	c2 [ 0 ] == c2 [ 1 ] && c2 [ 1 ] == c2 [ 2 ]
>7490	EqualityExpression	c2 [ 1 ] == c2 [ 2 ]
>7491	ArrayIndexing	c2 [ 2 ]
>7492	PrimaryExpression	2
>7493	Identifier	c2
>7494	ArrayIndexing	c2 [ 1 ]
>7495	PrimaryExpression	1
>7496	Identifier	c2
>7497	EqualityExpression	c2 [ 0 ] == c2 [ 1 ]
>7498	ArrayIndexing	c2 [ 1 ]
>7499	PrimaryExpression	1
>7500	Identifier	c2
>7501	ArrayIndexing	c2 [ 0 ]
>7502	PrimaryExpression	0
>7503	Identifier	c2
>7504	IdentifierDeclStatement	 
>7505	IdentifierDecl	c2 = image . at < cv 
>7506	AssignmentExpr	c2 = image . at < cv 
>7507	RelationalExpression	image . at < cv 
>7508	RelationalExpression	cv 
>7509	Expression	y + dy , x + dx
>7510	AdditiveExpression	x + dx
>7511	Identifier	dx
>7512	Identifier	x
>7513	AdditiveExpression	y + dy
>7514	Identifier	dy
>7515	Identifier	y
>7516	Identifier	cv 
>7517	MemberAccess	image . at
>7518	Identifier	at
>7519	Identifier	image
>7520	Identifier	c2
>7521	Identifier	c2
>7522	IdentifierDeclType	cv 
>7523	IncDecOp	 
>7524	IncDec	++
>7525	Identifier	dy
>7526	Condition	 
>7527	RelationalExpression	dy <= 1
>7528	PrimaryExpression	1
>7529	Identifier	dy
>7530	ForInit	 
>7531	IdentifierDeclStatement	int dy = - 1 ;
>7532	IdentifierDecl	dy = - 1
>7533	AssignmentExpr	dy = - 1
>7534	UnaryOp	- 1
>7535	PrimaryExpression	1
>7536	UnaryOperator	-
>7537	Identifier	dy
>7538	Identifier	dy
>7539	IdentifierDeclType	int
>7540	IncDecOp	 
>7541	IncDec	++
>7542	Identifier	dx
>7543	Condition	 
>7544	RelationalExpression	dx <= 1
>7545	PrimaryExpression	1
>7546	Identifier	dx
>7547	ForInit	 
>7548	IdentifierDeclStatement	int dx = - 1 ;
>7549	IdentifierDecl	dx = - 1
>7550	AssignmentExpr	dx = - 1
>7551	UnaryOp	- 1
>7552	PrimaryExpression	1
>7553	UnaryOperator	-
>7554	Identifier	dx
>7555	Identifier	dx
>7556	IdentifierDeclType	int
>7557	IdentifierDeclStatement	 
>7558	IdentifierDecl	num = 0
>7559	AssignmentExpr	num = 0
>7560	PrimaryExpression	0
>7561	Identifier	num
>7562	Identifier	num
>7563	IdentifierDeclType	int
>7564	IdentifierDeclStatement	 
>7565	IdentifierDecl	b = 0
>7566	AssignmentExpr	b = 0
>7567	PrimaryExpression	0
>7568	Identifier	b
>7569	Identifier	b
>7570	IdentifierDeclType	float
>7571	IdentifierDecl	g = 0
>7572	AssignmentExpr	g = 0
>7573	PrimaryExpression	0
>7574	Identifier	g
>7575	Identifier	g
>7576	IdentifierDeclType	float
>7577	IdentifierDecl	r = 0
>7578	AssignmentExpr	r = 0
>7579	PrimaryExpression	0
>7580	Identifier	r
>7581	Identifier	r
>7582	IdentifierDeclType	float
>7583	IfStatement	if ( c [ 0 ] != c [ 1 ] || c [ 1 ] != c [ 2 ] )
>7584	ContinueStatement	 
>7585	Condition	 
>7586	OrExpression	c [ 0 ] != c [ 1 ] || c [ 1 ] != c [ 2 ]
>7587	EqualityExpression	c [ 1 ] != c [ 2 ]
>7588	ArrayIndexing	c [ 2 ]
>7589	PrimaryExpression	2
>7590	Identifier	c
>7591	ArrayIndexing	c [ 1 ]
>7592	PrimaryExpression	1
>7593	Identifier	c
>7594	EqualityExpression	c [ 0 ] != c [ 1 ]
>7595	ArrayIndexing	c [ 1 ]
>7596	PrimaryExpression	1
>7597	Identifier	c
>7598	ArrayIndexing	c [ 0 ]
>7599	PrimaryExpression	0
>7600	Identifier	c
>7601	IdentifierDeclStatement	 
>7602	IdentifierDecl	c = image . at < cv 
>7603	AssignmentExpr	c = image . at < cv 
>7604	RelationalExpression	image . at < cv 
>7605	RelationalExpression	cv 
>7606	Expression	y , x
>7607	Identifier	x
>7608	Identifier	y
>7609	Identifier	cv 
>7610	MemberAccess	image . at
>7611	Identifier	at
>7612	Identifier	image
>7613	Identifier	c
>7614	Identifier	c
>7615	IdentifierDeclType	cv 
>7616	IncDecOp	 
>7617	IncDec	++
>7618	Identifier	y
>7619	Condition	 
>7620	RelationalExpression	y < image . rows - 1
>7621	AdditiveExpression	image . rows - 1
>7622	PrimaryExpression	1
>7623	MemberAccess	image . rows
>7624	Identifier	rows
>7625	Identifier	image
>7626	Identifier	y
>7627	ForInit	 
>7628	IdentifierDeclStatement	int y = 1 ;
>7629	IdentifierDecl	y = 1
>7630	AssignmentExpr	y = 1
>7631	PrimaryExpression	1
>7632	Identifier	y
>7633	Identifier	y
>7634	IdentifierDeclType	int
>7635	IncDecOp	 
>7636	IncDec	++
>7637	Identifier	x
>7638	Condition	 
>7639	RelationalExpression	x < image . cols - 1
>7640	AdditiveExpression	image . cols - 1
>7641	PrimaryExpression	1
>7642	MemberAccess	image . cols
>7643	Identifier	cols
>7644	Identifier	image
>7645	Identifier	x
>7646	ForInit	 
>7647	IdentifierDeclStatement	int x = 1 ;
>7648	IdentifierDecl	x = 1
>7649	AssignmentExpr	x = 1
>7650	PrimaryExpression	1
>7651	Identifier	x
>7652	Identifier	x
>7653	IdentifierDeclType	int
>7654	ExpressionStatement	 
>7655	CallExpression	cv 
>7656	ArgumentList	0
>7657	Argument	0
>7658	PrimaryExpression	0
>7659	Callee	cv 
>7660	Identifier	cv 
>7661	ExpressionStatement	 
>7662	CallExpression	cv 
>7663	ArgumentList	\"image\"
>7664	Argument	image
>7665	Identifier	image
>7666	Argument	\"image\"
>7667	PrimaryExpression	\"image\"
>7668	Callee	cv 
>7669	Identifier	cv 
>7670	IdentifierDeclStatement	 
>7671	IdentifierDecl	imageOut = cv 
>7672	AssignmentExpr	imageOut = cv 
>7673	CallExpression	cv 
>7674	ArgumentList	argv [ 1 ]
>7675	Argument	argv [ 1 ]
>7676	ArrayIndexing	argv [ 1 ]
>7677	PrimaryExpression	1
>7678	Identifier	argv
>7679	Callee	cv 
>7680	Identifier	cv 
>7681	Identifier	imageOut
>7682	Identifier	imageOut
>7683	IdentifierDeclType	cv 
>7684	IdentifierDeclStatement	 
>7685	IdentifierDecl	image = cv 
>7686	AssignmentExpr	image = cv 
>7687	CallExpression	cv 
>7688	ArgumentList	argv [ 1 ]
>7689	Argument	argv [ 1 ]
>7690	ArrayIndexing	argv [ 1 ]
>7691	PrimaryExpression	1
>7692	Identifier	argv
>7693	Callee	cv 
>7694	Identifier	cv 
>7695	Identifier	image
>7696	Identifier	image
>7697	IdentifierDeclType	cv 
>7728	FunctionDef	makeRainbowStripe (int argc , char * * argv)
>7729	ParameterList	int argc , char * * argv
>7730	Parameter	 
>7731	Identifier	argv
>7732	ParameterType	char * *
>7733	Parameter	 
>7734	Identifier	argc
>7735	ParameterType	int
>7736	ReturnType	int
>7737	CompoundStatement	 
>7738	ReturnStatement	 
>7739	PrimaryExpression	0
>7740	ExpressionStatement	 
>7741	CallExpression	cv 
>7742	ArgumentList	\"stripe.png\"
>7743	Argument	stripe
>7744	Identifier	stripe
>7745	Argument	\"stripe.png\"
>7746	PrimaryExpression	\"stripe.png\"
>7747	Callee	cv 
>7748	Identifier	cv 
>7749	WhileStatement	while ( 's' != ( k = cv 
>7750	CompoundStatement	 
>7751	ExpressionStatement	 
>7752	CallExpression	cv 
>7753	ArgumentList	0
>7754	Argument	0
>7755	PrimaryExpression	0
>7756	Callee	cv 
>7757	Identifier	cv 
>7758	ExpressionStatement	 
>7759	CallExpression	cv 
>7760	ArgumentList	\"stripe\"
>7761	Argument	stripe
>7762	Identifier	stripe
>7763	Argument	\"stripe\"
>7764	PrimaryExpression	\"stripe\"
>7765	Callee	cv 
>7766	Identifier	cv 
>7767	ForStatement	for ( int x = 0 ; x < stripe . cols ; x ++ )
>7768	ForStatement	for ( int y = 0 ; y < stripe . rows ; y ++ )
>7769	CompoundStatement	 
>7770	ExpressionStatement	 
>7771	AssignmentExpr	stripe . at < cv 
>7772	CallExpression	cv 
>7773	ArgumentList	255 - bc
>7774	Argument	255 - rc
>7775	AdditiveExpression	255 - rc
>7776	Identifier	rc
>7777	PrimaryExpression	255
>7778	Argument	255 - gc
>7779	AdditiveExpression	255 - gc
>7780	Identifier	gc
>7781	PrimaryExpression	255
>7782	Argument	255 - bc
>7783	AdditiveExpression	255 - bc
>7784	Identifier	bc
>7785	PrimaryExpression	255
>7786	Callee	cv 
>7787	Identifier	cv 
>7788	RelationalExpression	stripe . at < cv 
>7789	RelationalExpression	cv 
>7790	Expression	y , x
>7791	Identifier	x
>7792	Identifier	y
>7793	Identifier	cv 
>7794	MemberAccess	stripe . at
>7795	Identifier	at
>7796	Identifier	stripe
>7797	IdentifierDeclStatement	 
>7798	IdentifierDecl	bc = b < 0 ? 0 
>7799	AssignmentExpr	bc = b < 0 ? 0 
>7800	ConditionalExpression	b < 0 ? 0 
>7801	ConditionalExpression	b > 255 ? 255 
>7802	Identifier	b
>7803	PrimaryExpression	255
>7804	Condition	b > 255
>7805	RelationalExpression	b > 255
>7806	PrimaryExpression	255
>7807	Identifier	b
>7808	PrimaryExpression	0
>7809	Condition	b < 0
>7810	RelationalExpression	b < 0
>7811	PrimaryExpression	0
>7812	Identifier	b
>7813	Identifier	bc
>7814	Identifier	bc
>7815	IdentifierDeclType	uchar
>7816	IdentifierDeclStatement	 
>7817	IdentifierDecl	gc = g < 0 ? 0 
>7818	AssignmentExpr	gc = g < 0 ? 0 
>7819	ConditionalExpression	g < 0 ? 0 
>7820	ConditionalExpression	g > 255 ? 255 
>7821	Identifier	g
>7822	PrimaryExpression	255
>7823	Condition	g > 255
>7824	RelationalExpression	g > 255
>7825	PrimaryExpression	255
>7826	Identifier	g
>7827	PrimaryExpression	0
>7828	Condition	g < 0
>7829	RelationalExpression	g < 0
>7830	PrimaryExpression	0
>7831	Identifier	g
>7832	Identifier	gc
>7833	Identifier	gc
>7834	IdentifierDeclType	uchar
>7835	IdentifierDeclStatement	 
>7836	IdentifierDecl	rc = r < 0 ? 0 
>7837	AssignmentExpr	rc = r < 0 ? 0 
>7838	ConditionalExpression	r < 0 ? 0 
>7839	ConditionalExpression	r > 255 ? 255 
>7840	Identifier	r
>7841	PrimaryExpression	255
>7842	Condition	r > 255
>7843	RelationalExpression	r > 255
>7844	PrimaryExpression	255
>7845	Identifier	r
>7846	PrimaryExpression	0
>7847	Condition	r < 0
>7848	RelationalExpression	r < 0
>7849	PrimaryExpression	0
>7850	Identifier	r
>7851	Identifier	rc
>7852	Identifier	rc
>7853	IdentifierDeclType	uchar
>7854	IfStatement	if ( b < 0 )
>7855	ExpressionStatement	 
>7856	AssignmentExpr	b = - b
>7857	UnaryOp	- b
>7858	Identifier	b
>7859	UnaryOperator	-
>7860	Identifier	b
>7861	Condition	 
>7862	RelationalExpression	b < 0
>7863	PrimaryExpression	0
>7864	Identifier	b
>7865	IdentifierDeclStatement	 
>7866	IdentifierDecl	b = ( 2 - id ) * 255 / 1.0
>7867	AssignmentExpr	b = ( 2 - id ) * 255 / 1.0
>7868	MultiplicativeExpression	( 2 - id ) * 255 / 1.0
>7869	MultiplicativeExpression	255 / 1.0
>7870	PrimaryExpression	1.0
>7871	PrimaryExpression	255
>7872	AdditiveExpression	2 - id
>7873	Identifier	id
>7874	PrimaryExpression	2
>7875	Identifier	b
>7876	Identifier	b
>7877	IdentifierDeclType	float
>7878	IfStatement	if ( g < 0 )
>7879	ExpressionStatement	 
>7880	AssignmentExpr	g = - g
>7881	UnaryOp	- g
>7882	Identifier	g
>7883	UnaryOperator	-
>7884	Identifier	g
>7885	Condition	 
>7886	RelationalExpression	g < 0
>7887	PrimaryExpression	0
>7888	Identifier	g
>7889	IdentifierDeclStatement	 
>7890	IdentifierDecl	g = ( 1 - id ) * 255 / 1.0
>7891	AssignmentExpr	g = ( 1 - id ) * 255 / 1.0
>7892	MultiplicativeExpression	( 1 - id ) * 255 / 1.0
>7893	MultiplicativeExpression	255 / 1.0
>7894	PrimaryExpression	1.0
>7895	PrimaryExpression	255
>7896	AdditiveExpression	1 - id
>7897	Identifier	id
>7898	PrimaryExpression	1
>7899	Identifier	g
>7900	Identifier	g
>7901	IdentifierDeclType	float
>7902	IfStatement	if ( r < 0 )
>7903	ExpressionStatement	 
>7904	AssignmentExpr	r = - r
>7905	UnaryOp	- r
>7906	Identifier	r
>7907	UnaryOperator	-
>7908	Identifier	r
>7909	Condition	 
>7910	RelationalExpression	r < 0
>7911	PrimaryExpression	0
>7912	Identifier	r
>7913	IdentifierDeclStatement	 
>7914	IdentifierDecl	r = ( 0 - id ) * 255 / 1.0
>7915	AssignmentExpr	r = ( 0 - id ) * 255 / 1.0
>7916	MultiplicativeExpression	( 0 - id ) * 255 / 1.0
>7917	MultiplicativeExpression	255 / 1.0
>7918	PrimaryExpression	1.0
>7919	PrimaryExpression	255
>7920	AdditiveExpression	0 - id
>7921	Identifier	id
>7922	PrimaryExpression	0
>7923	Identifier	r
>7924	Identifier	r
>7925	IdentifierDeclType	float
>7926	IdentifierDeclStatement	 
>7927	IdentifierDecl	id = fac * ( y / 200.0 )
>7928	AssignmentExpr	id = fac * ( y / 200.0 )
>7929	MultiplicativeExpression	fac * ( y / 200.0 )
>7930	MultiplicativeExpression	y / 200.0
>7931	PrimaryExpression	200.0
>7932	Identifier	y
>7933	Identifier	fac
>7934	Identifier	id
>7935	Identifier	id
>7936	IdentifierDeclType	float
>7937	IncDecOp	 
>7938	IncDec	++
>7939	Identifier	y
>7940	Condition	 
>7941	RelationalExpression	y < stripe . rows
>7942	MemberAccess	stripe . rows
>7943	Identifier	rows
>7944	Identifier	stripe
>7945	Identifier	y
>7946	ForInit	 
>7947	IdentifierDeclStatement	int y = 0 ;
>7948	IdentifierDecl	y = 0
>7949	AssignmentExpr	y = 0
>7950	PrimaryExpression	0
>7951	Identifier	y
>7952	Identifier	y
>7953	IdentifierDeclType	int
>7954	IncDecOp	 
>7955	IncDec	++
>7956	Identifier	x
>7957	Condition	 
>7958	RelationalExpression	x < stripe . cols
>7959	MemberAccess	stripe . cols
>7960	Identifier	cols
>7961	Identifier	stripe
>7962	Identifier	x
>7963	ForInit	 
>7964	IdentifierDeclStatement	int x = 0 ;
>7965	IdentifierDecl	x = 0
>7966	AssignmentExpr	x = 0
>7967	PrimaryExpression	0
>7968	Identifier	x
>7969	Identifier	x
>7970	IdentifierDeclType	int
>7971	IfStatement	if ( k == 'm' )
>7972	ExpressionStatement	 
>7973	AssignmentExpr	fac /= 1.05
>7974	PrimaryExpression	1.05
>7975	Identifier	fac
>7976	Condition	 
>7977	EqualityExpression	k == 'm'
>7978	PrimaryExpression	'm'
>7979	Identifier	k
>7980	IfStatement	if ( k == 'p' )
>7981	ExpressionStatement	 
>7982	AssignmentExpr	fac *= 1.05
>7983	PrimaryExpression	1.05
>7984	Identifier	fac
>7985	Condition	 
>7986	EqualityExpression	k == 'p'
>7987	PrimaryExpression	'p'
>7988	Identifier	k
>7989	Condition	 
>7990	EqualityExpression	's' != ( k = cv 
>7991	AssignmentExpr	k = cv 
>7992	CallExpression	cv 
>7993	ArgumentList	0
>7994	Argument	0
>7995	PrimaryExpression	0
>7996	Callee	cv 
>7997	Identifier	cv 
>7998	Identifier	k
>7999	PrimaryExpression	's'
>8000	ExpressionStatement	 
>8001	CallExpression	cv 
>8002	ArgumentList	\"stripe\"
>8003	Argument	stripe
>8004	Identifier	stripe
>8005	Argument	\"stripe\"
>8006	PrimaryExpression	\"stripe\"
>8007	Callee	cv 
>8008	Identifier	cv 
>8009	IdentifierDeclStatement	 
>8010	IdentifierDecl	k
>8011	Identifier	k
>8012	IdentifierDeclType	char
>8013	IdentifierDeclStatement	 
>8014	IdentifierDecl	fac = 1
>8015	AssignmentExpr	fac = 1
>8016	PrimaryExpression	1
>8017	Identifier	fac
>8018	Identifier	fac
>8019	IdentifierDeclType	float
>8020	IdentifierDeclStatement	 
>8021	IdentifierDecl	stripe = cv 
>8022	AssignmentExpr	stripe = cv 
>8023	CallExpression	cv 
>8024	ArgumentList	480
>8025	Argument	CV_8UC3
>8026	Identifier	CV_8UC3
>8027	Argument	50
>8028	PrimaryExpression	50
>8029	Argument	480
>8030	PrimaryExpression	480
>8031	Callee	cv 
>8032	Identifier	cv 
>8033	Identifier	stripe
>8034	Identifier	stripe
>8035	IdentifierDeclType	cv 
>8060	FunctionDef	downsample (std 
>8061	ParameterList	std 
>8062	Parameter	 
>8063	Identifier	lvl
>8064	ParameterType	int
>8065	Parameter	 
>8066	Identifier	folder
>8067	ParameterType	std 
>8068	ReturnType	void
>8069	CompoundStatement	 
>8070	CompoundStatement	 
>8071	ForStatement	for ( int i = 0 ; i < d . size ( ) ; i ++ )
>8072	CompoundStatement	 
>8073	ExpressionStatement	 
>8074	CallExpression	cv 
>8075	ArgumentList	d [ i ]
>8076	Argument	depthDown
>8077	Identifier	depthDown
>8078	Argument	d [ i ]
>8079	ArrayIndexing	d [ i ]
>8080	Identifier	i
>8081	Identifier	d
>8082	Callee	cv 
>8083	Identifier	cv 
>8084	ForStatement	for ( int y = 0 ; y < ( int ) h / fac ; y ++ )
>8085	ForStatement	for ( int x = 0 ; x < ( int ) w / fac ; x ++ )
>8086	CompoundStatement	 
>8087	ExpressionStatement	 
>8088	AssignmentExpr	depthDown . at < ushort > ( y , x ) = sid == 0 ? 0 
>8089	ConditionalExpression	sid == 0 ? 0 
>8090	MultiplicativeExpression	n / sid
>8091	Identifier	sid
>8092	Identifier	n
>8093	PrimaryExpression	0
>8094	Condition	sid == 0
>8095	EqualityExpression	sid == 0
>8096	PrimaryExpression	0
>8097	Identifier	sid
>8098	RelationalExpression	depthDown . at < ushort > ( y , x )
>8099	RelationalExpression	ushort > ( y , x )
>8100	Expression	y , x
>8101	Identifier	x
>8102	Identifier	y
>8103	Identifier	ushort
>8104	MemberAccess	depthDown . at
>8105	Identifier	at
>8106	Identifier	depthDown
>8107	ForStatement	for ( int dx = 0 ; dx < fac ; dx ++ )
>8108	ForStatement	for ( int dy = 0 ; dy < fac ; dy ++ )
>8109	CompoundStatement	 
>8110	IfStatement	if ( val > 0 && ! isnanf ( val ) )
>8111	CompoundStatement	 
>8112	ExpressionStatement	 
>8113	IncDecOp	n ++
>8114	IncDec	++
>8115	Identifier	n
>8116	ExpressionStatement	 
>8117	AssignmentExpr	sid += 1.0f / val
>8118	MultiplicativeExpression	1.0f / val
>8119	Identifier	val
>8120	PrimaryExpression	1.0f
>8121	Identifier	sid
>8122	Condition	 
>8123	AndExpression	val > 0 && ! isnanf ( val )
>8124	UnaryOp	! isnanf ( val )
>8125	CallExpression	isnanf ( val )
>8126	ArgumentList	val
>8127	Argument	val
>8128	Identifier	val
>8129	Callee	isnanf
>8130	Identifier	isnanf
>8131	UnaryOperator	!
>8132	RelationalExpression	val > 0
>8133	PrimaryExpression	0
>8134	Identifier	val
>8135	IdentifierDeclStatement	 
>8136	IdentifierDecl	val = depth . at < ushort > ( y * fac + dy , x * fac + dx )
>8137	AssignmentExpr	val = depth . at < ushort > ( y * fac + dy , x * fac + dx )
>8138	RelationalExpression	depth . at < ushort > ( y * fac + dy , x * fac + dx )
>8139	RelationalExpression	ushort > ( y * fac + dy , x * fac + dx )
>8140	Expression	y * fac + dy , x * fac + dx
>8141	AdditiveExpression	x * fac + dx
>8142	Identifier	dx
>8143	MultiplicativeExpression	x * fac
>8144	Identifier	fac
>8145	Identifier	x
>8146	AdditiveExpression	y * fac + dy
>8147	Identifier	dy
>8148	MultiplicativeExpression	y * fac
>8149	Identifier	fac
>8150	Identifier	y
>8151	Identifier	ushort
>8152	MemberAccess	depth . at
>8153	Identifier	at
>8154	Identifier	depth
>8155	Identifier	val
>8156	Identifier	val
>8157	IdentifierDeclType	float
>8158	IncDecOp	 
>8159	IncDec	++
>8160	Identifier	dy
>8161	Condition	 
>8162	RelationalExpression	dy < fac
>8163	Identifier	fac
>8164	Identifier	dy
>8165	ForInit	 
>8166	IdentifierDeclStatement	int dy = 0 ;
>8167	IdentifierDecl	dy = 0
>8168	AssignmentExpr	dy = 0
>8169	PrimaryExpression	0
>8170	Identifier	dy
>8171	Identifier	dy
>8172	IdentifierDeclType	int
>8173	IncDecOp	 
>8174	IncDec	++
>8175	Identifier	dx
>8176	Condition	 
>8177	RelationalExpression	dx < fac
>8178	Identifier	fac
>8179	Identifier	dx
>8180	ForInit	 
>8181	IdentifierDeclStatement	int dx = 0 ;
>8182	IdentifierDecl	dx = 0
>8183	AssignmentExpr	dx = 0
>8184	PrimaryExpression	0
>8185	Identifier	dx
>8186	Identifier	dx
>8187	IdentifierDeclType	int
>8188	IdentifierDeclStatement	 
>8189	IdentifierDecl	n = 0
>8190	AssignmentExpr	n = 0
>8191	PrimaryExpression	0
>8192	Identifier	n
>8193	Identifier	n
>8194	IdentifierDeclType	float
>8195	IdentifierDecl	sid = 0
>8196	AssignmentExpr	sid = 0
>8197	PrimaryExpression	0
>8198	Identifier	sid
>8199	Identifier	sid
>8200	IdentifierDeclType	float
>8201	IncDecOp	 
>8202	IncDec	++
>8203	Identifier	x
>8204	Condition	 
>8205	RelationalExpression	x < ( int ) w / fac
>8206	MultiplicativeExpression	( int ) w / fac
>8207	Identifier	fac
>8208	CastExpression	( int ) w
>8209	Identifier	w
>8210	CastTarget	int
>8211	Identifier	x
>8212	ForInit	 
>8213	IdentifierDeclStatement	int x = 0 ;
>8214	IdentifierDecl	x = 0
>8215	AssignmentExpr	x = 0
>8216	PrimaryExpression	0
>8217	Identifier	x
>8218	Identifier	x
>8219	IdentifierDeclType	int
>8220	IncDecOp	 
>8221	IncDec	++
>8222	Identifier	y
>8223	Condition	 
>8224	RelationalExpression	y < ( int ) h / fac
>8225	MultiplicativeExpression	( int ) h / fac
>8226	Identifier	fac
>8227	CastExpression	( int ) h
>8228	Identifier	h
>8229	CastTarget	int
>8230	Identifier	y
>8231	ForInit	 
>8232	IdentifierDeclStatement	int y = 0 ;
>8233	IdentifierDecl	y = 0
>8234	AssignmentExpr	y = 0
>8235	PrimaryExpression	0
>8236	Identifier	y
>8237	Identifier	y
>8238	IdentifierDeclType	int
>8239	ExpressionStatement	 
>8240	CallExpression	printf ( \"depth type %d, u16 %d\n\" , depth . type ( ) , CV_16U )
>8241	ArgumentList	\"depth type %d, u16 %d\n\"
>8242	Argument	CV_16U
>8243	Identifier	CV_16U
>8244	Argument	depth . type ( )
>8245	CallExpression	depth . type ( )
>8246	ArgumentList	 
>8247	Callee	depth . type
>8248	MemberAccess	depth . type
>8249	Identifier	type
>8250	Identifier	depth
>8251	Argument	\"depth type %d, u16 %d\n\"
>8252	PrimaryExpression	\"depth type %d, u16 %d\n\"
>8253	Callee	printf
>8254	Identifier	printf
>8255	IdentifierDeclStatement	 
>8256	IdentifierDecl	depthDown = cv 
>8257	AssignmentExpr	depthDown = cv 
>8258	CallExpression	cv 
>8259	ArgumentList	depth . rows / fac
>8260	Argument	depth . type ( )
>8261	CallExpression	depth . type ( )
>8262	ArgumentList	 
>8263	Callee	depth . type
>8264	MemberAccess	depth . type
>8265	Identifier	type
>8266	Identifier	depth
>8267	Argument	depth . cols / fac
>8268	MultiplicativeExpression	depth . cols / fac
>8269	Identifier	fac
>8270	MemberAccess	depth . cols
>8271	Identifier	cols
>8272	Identifier	depth
>8273	Argument	depth . rows / fac
>8274	MultiplicativeExpression	depth . rows / fac
>8275	Identifier	fac
>8276	MemberAccess	depth . rows
>8277	Identifier	rows
>8278	Identifier	depth
>8279	Callee	cv 
>8280	Identifier	cv 
>8281	Identifier	depthDown
>8282	Identifier	depthDown
>8283	IdentifierDeclType	cv 
>8284	IdentifierDeclStatement	 
>8285	IdentifierDecl	depth = cv 
>8286	AssignmentExpr	depth = cv 
>8287	CallExpression	cv 
>8288	ArgumentList	d [ i ]
>8289	Argument	CV_LOAD_IMAGE_UNCHANGED
>8290	Identifier	CV_LOAD_IMAGE_UNCHANGED
>8291	Argument	d [ i ]
>8292	ArrayIndexing	d [ i ]
>8293	Identifier	i
>8294	Identifier	d
>8295	Callee	cv 
>8296	Identifier	cv 
>8297	Identifier	depth
>8298	Identifier	depth
>8299	IdentifierDeclType	cv 
>8300	IncDecOp	 
>8301	IncDec	++
>8302	Identifier	i
>8303	Condition	 
>8304	RelationalExpression	i < d . size ( )
>8305	CallExpression	d . size ( )
>8306	ArgumentList	 
>8307	Callee	d . size
>8308	MemberAccess	d . size
>8309	Identifier	size
>8310	Identifier	d
>8311	Identifier	i
>8312	ForInit	 
>8313	IdentifierDeclStatement	int i = 0 ;
>8314	IdentifierDecl	i = 0
>8315	AssignmentExpr	i = 0
>8316	PrimaryExpression	0
>8317	Identifier	i
>8318	Identifier	i
>8319	IdentifierDeclType	int
>8320	IdentifierDeclStatement	 
>8321	IdentifierDecl	h = 480
>8322	AssignmentExpr	h = 480
>8323	PrimaryExpression	480
>8324	Identifier	h
>8325	Identifier	h
>8326	IdentifierDeclType	int
>8327	IdentifierDeclStatement	 
>8328	IdentifierDecl	w = 640
>8329	AssignmentExpr	w = 640
>8330	PrimaryExpression	640
>8331	Identifier	w
>8332	Identifier	w
>8333	IdentifierDeclType	int
>8334	IdentifierDeclStatement	 
>8335	IdentifierDecl	fac = ( int ) 1 << lvl
>8336	AssignmentExpr	fac = ( int ) 1 << lvl
>8337	ShiftExpression	( int ) 1 << lvl
>8338	Identifier	lvl
>8339	CastExpression	( int ) 1
>8340	PrimaryExpression	1
>8341	CastTarget	int
>8342	Identifier	fac
>8343	Identifier	fac
>8344	IdentifierDeclType	int
>8345	IdentifierDeclStatement	 
>8346	IdentifierDecl	d = getFileList ( folder + \"/depth/\" , \"\" )
>8347	AssignmentExpr	d = getFileList ( folder + \"/depth/\" , \"\" )
>8348	CallExpression	getFileList ( folder + \"/depth/\" , \"\" )
>8349	ArgumentList	folder + \"/depth/\"
>8350	Argument	\"\"
>8351	PrimaryExpression	\"\"
>8352	Argument	folder + \"/depth/\"
>8353	AdditiveExpression	folder + \"/depth/\"
>8354	PrimaryExpression	\"/depth/\"
>8355	Identifier	folder
>8356	Callee	getFileList
>8357	Identifier	getFileList
>8358	Identifier	d
>8359	Identifier	d
>8360	IdentifierDeclType	std 
>8361	CompoundStatement	 
>8362	ForStatement	for ( size_t i = 0 ; i < d . size ( ) ; ++ i )
>8363	CompoundStatement	 
>8364	ExpressionStatement	 
>8365	CallExpression	cv 
>8366	ArgumentList	d [ i ]
>8367	Argument	depthDown
>8368	Identifier	depthDown
>8369	Argument	d [ i ]
>8370	ArrayIndexing	d [ i ]
>8371	Identifier	i
>8372	Identifier	d
>8373	Callee	cv 
>8374	Identifier	cv 
>8375	ForStatement	for ( int y = 0 ; y < ( int ) h / fac ; y ++ )
>8376	ForStatement	for ( int x = 0 ; x < ( int ) w / fac ; x ++ )
>8377	CompoundStatement	 
>8378	ExpressionStatement	 
>8379	AssignmentExpr	depthDown . at < cv 
>8380	CallExpression	cv 
>8381	ArgumentList	sr / n
>8382	Argument	sb / n
>8383	MultiplicativeExpression	sb / n
>8384	Identifier	n
>8385	Identifier	sb
>8386	Argument	sg / n
>8387	MultiplicativeExpression	sg / n
>8388	Identifier	n
>8389	Identifier	sg
>8390	Argument	sr / n
>8391	MultiplicativeExpression	sr / n
>8392	Identifier	n
>8393	Identifier	sr
>8394	Callee	cv 
>8395	Identifier	cv 
>8396	RelationalExpression	depthDown . at < cv 
>8397	RelationalExpression	cv 
>8398	Expression	y , x
>8399	Identifier	x
>8400	Identifier	y
>8401	Identifier	cv 
>8402	MemberAccess	depthDown . at
>8403	Identifier	at
>8404	Identifier	depthDown
>8405	ForStatement	for ( int dx = 0 ; dx < fac ; ++ dx )
>8406	ForStatement	for ( int dy = 0 ; dy < fac ; ++ dy )
>8407	CompoundStatement	 
>8408	ExpressionStatement	 
>8409	UnaryExpression	++ n
>8410	Identifier	n
>8411	IncDec	++
>8412	ExpressionStatement	 
>8413	AssignmentExpr	sb += val [ 2 ]
>8414	ArrayIndexing	val [ 2 ]
>8415	PrimaryExpression	2
>8416	Identifier	val
>8417	Identifier	sb
>8418	ExpressionStatement	 
>8419	AssignmentExpr	sg += val [ 1 ]
>8420	ArrayIndexing	val [ 1 ]
>8421	PrimaryExpression	1
>8422	Identifier	val
>8423	Identifier	sg
>8424	ExpressionStatement	 
>8425	AssignmentExpr	sr += val [ 0 ]
>8426	ArrayIndexing	val [ 0 ]
>8427	PrimaryExpression	0
>8428	Identifier	val
>8429	Identifier	sr
>8430	IdentifierDeclStatement	 
>8431	IdentifierDecl	val = depth . at < cv 
>8432	AssignmentExpr	val = depth . at < cv 
>8433	RelationalExpression	depth . at < cv 
>8434	RelationalExpression	cv 
>8435	Expression	y * fac + dy , x * fac + dx
>8436	AdditiveExpression	x * fac + dx
>8437	Identifier	dx
>8438	MultiplicativeExpression	x * fac
>8439	Identifier	fac
>8440	Identifier	x
>8441	AdditiveExpression	y * fac + dy
>8442	Identifier	dy
>8443	MultiplicativeExpression	y * fac
>8444	Identifier	fac
>8445	Identifier	y
>8446	Identifier	cv 
>8447	MemberAccess	depth . at
>8448	Identifier	at
>8449	Identifier	depth
>8450	Identifier	val
>8451	Identifier	val
>8452	IdentifierDeclType	cv 
>8453	UnaryExpression	 
>8454	Identifier	dy
>8455	IncDec	++
>8456	Condition	 
>8457	RelationalExpression	dy < fac
>8458	Identifier	fac
>8459	Identifier	dy
>8460	ForInit	 
>8461	IdentifierDeclStatement	int dy = 0 ;
>8462	IdentifierDecl	dy = 0
>8463	AssignmentExpr	dy = 0
>8464	PrimaryExpression	0
>8465	Identifier	dy
>8466	Identifier	dy
>8467	IdentifierDeclType	int
>8468	UnaryExpression	 
>8469	Identifier	dx
>8470	IncDec	++
>8471	Condition	 
>8472	RelationalExpression	dx < fac
>8473	Identifier	fac
>8474	Identifier	dx
>8475	ForInit	 
>8476	IdentifierDeclStatement	int dx = 0 ;
>8477	IdentifierDecl	dx = 0
>8478	AssignmentExpr	dx = 0
>8479	PrimaryExpression	0
>8480	Identifier	dx
>8481	Identifier	dx
>8482	IdentifierDeclType	int
>8483	IdentifierDeclStatement	 
>8484	IdentifierDecl	n = 0
>8485	AssignmentExpr	n = 0
>8486	PrimaryExpression	0
>8487	Identifier	n
>8488	Identifier	n
>8489	IdentifierDeclType	float
>8490	IdentifierDecl	sb = 0
>8491	AssignmentExpr	sb = 0
>8492	PrimaryExpression	0
>8493	Identifier	sb
>8494	Identifier	sb
>8495	IdentifierDeclType	float
>8496	IdentifierDecl	sg = 0
>8497	AssignmentExpr	sg = 0
>8498	PrimaryExpression	0
>8499	Identifier	sg
>8500	Identifier	sg
>8501	IdentifierDeclType	float
>8502	IdentifierDecl	sr = 0
>8503	AssignmentExpr	sr = 0
>8504	PrimaryExpression	0
>8505	Identifier	sr
>8506	Identifier	sr
>8507	IdentifierDeclType	float
>8508	IncDecOp	 
>8509	IncDec	++
>8510	Identifier	x
>8511	Condition	 
>8512	RelationalExpression	x < ( int ) w / fac
>8513	MultiplicativeExpression	( int ) w / fac
>8514	Identifier	fac
>8515	CastExpression	( int ) w
>8516	Identifier	w
>8517	CastTarget	int
>8518	Identifier	x
>8519	ForInit	 
>8520	IdentifierDeclStatement	int x = 0 ;
>8521	IdentifierDecl	x = 0
>8522	AssignmentExpr	x = 0
>8523	PrimaryExpression	0
>8524	Identifier	x
>8525	Identifier	x
>8526	IdentifierDeclType	int
>8527	IncDecOp	 
>8528	IncDec	++
>8529	Identifier	y
>8530	Condition	 
>8531	RelationalExpression	y < ( int ) h / fac
>8532	MultiplicativeExpression	( int ) h / fac
>8533	Identifier	fac
>8534	CastExpression	( int ) h
>8535	Identifier	h
>8536	CastTarget	int
>8537	Identifier	y
>8538	ForInit	 
>8539	IdentifierDeclStatement	int y = 0 ;
>8540	IdentifierDecl	y = 0
>8541	AssignmentExpr	y = 0
>8542	PrimaryExpression	0
>8543	Identifier	y
>8544	Identifier	y
>8545	IdentifierDeclType	int
>8546	ExpressionStatement	 
>8547	CallExpression	printf ( \"color type %d, u16 %d\n\" , depth . type ( ) , CV_8UC3 )
>8548	ArgumentList	\"color type %d, u16 %d\n\"
>8549	Argument	CV_8UC3
>8550	Identifier	CV_8UC3
>8551	Argument	depth . type ( )
>8552	CallExpression	depth . type ( )
>8553	ArgumentList	 
>8554	Callee	depth . type
>8555	MemberAccess	depth . type
>8556	Identifier	type
>8557	Identifier	depth
>8558	Argument	\"color type %d, u16 %d\n\"
>8559	PrimaryExpression	\"color type %d, u16 %d\n\"
>8560	Callee	printf
>8561	Identifier	printf
>8562	IdentifierDeclStatement	 
>8563	IdentifierDecl	depthDown = cv 
>8564	AssignmentExpr	depthDown = cv 
>8565	CallExpression	cv 
>8566	ArgumentList	depth . rows / fac
>8567	Argument	depth . type ( )
>8568	CallExpression	depth . type ( )
>8569	ArgumentList	 
>8570	Callee	depth . type
>8571	MemberAccess	depth . type
>8572	Identifier	type
>8573	Identifier	depth
>8574	Argument	depth . cols / fac
>8575	MultiplicativeExpression	depth . cols / fac
>8576	Identifier	fac
>8577	MemberAccess	depth . cols
>8578	Identifier	cols
>8579	Identifier	depth
>8580	Argument	depth . rows / fac
>8581	MultiplicativeExpression	depth . rows / fac
>8582	Identifier	fac
>8583	MemberAccess	depth . rows
>8584	Identifier	rows
>8585	Identifier	depth
>8586	Callee	cv 
>8587	Identifier	cv 
>8588	Identifier	depthDown
>8589	Identifier	depthDown
>8590	IdentifierDeclType	cv 
>8591	IdentifierDeclStatement	 
>8592	IdentifierDecl	depth = cv 
>8593	AssignmentExpr	depth = cv 
>8594	CallExpression	cv 
>8595	ArgumentList	d [ i ]
>8596	Argument	CV_LOAD_IMAGE_UNCHANGED
>8597	Identifier	CV_LOAD_IMAGE_UNCHANGED
>8598	Argument	d [ i ]
>8599	ArrayIndexing	d [ i ]
>8600	Identifier	i
>8601	Identifier	d
>8602	Callee	cv 
>8603	Identifier	cv 
>8604	Identifier	depth
>8605	Identifier	depth
>8606	IdentifierDeclType	cv 
>8607	UnaryExpression	 
>8608	Identifier	i
>8609	IncDec	++
>8610	Condition	 
>8611	RelationalExpression	i < d . size ( )
>8612	CallExpression	d . size ( )
>8613	ArgumentList	 
>8614	Callee	d . size
>8615	MemberAccess	d . size
>8616	Identifier	size
>8617	Identifier	d
>8618	Identifier	i
>8619	ForInit	 
>8620	IdentifierDeclStatement	size_t i = 0 ;
>8621	IdentifierDecl	i = 0
>8622	AssignmentExpr	i = 0
>8623	PrimaryExpression	0
>8624	Identifier	i
>8625	Identifier	i
>8626	IdentifierDeclType	size_t
>8627	IdentifierDeclStatement	 
>8628	IdentifierDecl	h = 480
>8629	AssignmentExpr	h = 480
>8630	PrimaryExpression	480
>8631	Identifier	h
>8632	Identifier	h
>8633	IdentifierDeclType	int
>8634	IdentifierDeclStatement	 
>8635	IdentifierDecl	w = 640
>8636	AssignmentExpr	w = 640
>8637	PrimaryExpression	640
>8638	Identifier	w
>8639	Identifier	w
>8640	IdentifierDeclType	int
>8641	IdentifierDeclStatement	 
>8642	IdentifierDecl	fac = ( int ) 1 << lvl
>8643	AssignmentExpr	fac = ( int ) 1 << lvl
>8644	ShiftExpression	( int ) 1 << lvl
>8645	Identifier	lvl
>8646	CastExpression	( int ) 1
>8647	PrimaryExpression	1
>8648	CastTarget	int
>8649	Identifier	fac
>8650	Identifier	fac
>8651	IdentifierDeclType	int
>8652	IdentifierDeclStatement	 
>8653	IdentifierDecl	d = getFileList ( folder + \"/rgb/\" , \"\" )
>8654	AssignmentExpr	d = getFileList ( folder + \"/rgb/\" , \"\" )
>8655	CallExpression	getFileList ( folder + \"/rgb/\" , \"\" )
>8656	ArgumentList	folder + \"/rgb/\"
>8657	Argument	\"\"
>8658	PrimaryExpression	\"\"
>8659	Argument	folder + \"/rgb/\"
>8660	AdditiveExpression	folder + \"/rgb/\"
>8661	PrimaryExpression	\"/rgb/\"
>8662	Identifier	folder
>8663	Callee	getFileList
>8664	Identifier	getFileList
>8665	Identifier	d
>8666	Identifier	d
>8667	IdentifierDeclType	std 
>8708	FunctionDef	main (int argc , char * * argv)
>8709	ParameterList	int argc , char * * argv
>8710	Parameter	 
>8711	Identifier	argv
>8712	ParameterType	char * *
>8713	Parameter	 
>8714	Identifier	argc
>8715	ParameterType	int
>8716	ReturnType	int
>8717	CompoundStatement	 
>8718	ReturnStatement	 
>8719	CallExpression	shiftRainbow ( argc , argv )
>8720	ArgumentList	argc
>8721	Argument	argv
>8722	Identifier	argv
>8723	Argument	argc
>8724	Identifier	argc
>8725	Callee	shiftRainbow
>8726	Identifier	shiftRainbow
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=101,97,93,89,75,15,13
<13=14
<15=71,16
<16=17
<17=62,18
<18=32,19
<19=20
<20=28,21
<21=22
<22=23
<23=27,24
<24=26,25
<28=29
<29=31,30
<32=33
<33=55,34
<34=52,35
<35=37,36
<37=41,38
<38=39
<39=40
<41=42
<42=44,43
<44=50,45
<45=46
<46=47
<47=49,48
<50=51
<52=54,53
<55=57,56
<57=59,58
<59=61,60
<62=63
<63=70,64
<64=68,65
<65=66
<66=67
<68=69
<71=72
<72=74,73
<75=76
<76=88,77
<77=86,78
<78=79
<79=80
<80=82,81
<82=83
<83=85,84
<86=87
<89=90
<90=92,91
<93=94
<94=96,95
<97=98
<98=100,99
<101=102
<102=113,103
<103=111,104
<104=105
<105=107,106
<107=108
<108=110,109
<111=112
<113=114
<134=143,142,135
<135=139,136
<136=138,137
<139=141,140
<143=580,565,553,541,534,177,170,155,146,144
<144=145
<146=147
<147=153,148
<148=151,149
<149=150
<151=152
<153=154
<155=156
<156=168,157
<157=166,164,162,158
<158=159
<159=161,160
<162=163
<164=165
<166=167
<168=169
<170=171
<171=175,172
<172=173
<173=174
<175=176
<177=526,520,517,178
<178=509,503,500,179
<179=487,428,390,383,376,252,180
<180=248,214,181
<181=182
<182=183
<183=205,184
<184=196,185
<185=187,186
<187=193,188
<188=190,189
<190=192,191
<193=195,194
<196=202,197
<197=199,198
<199=201,200
<202=204,203
<205=211,206
<206=208,207
<208=210,209
<211=213,212
<214=215
<215=239,216
<216=230,217
<217=221,218
<218=220,219
<221=227,222
<222=224,223
<224=226,225
<227=229,228
<230=236,231
<231=233,232
<233=235,234
<236=238,237
<239=245,240
<240=242,241
<242=244,243
<245=247,246
<248=249
<249=251,250
<252=366,362,359,253
<253=349,345,342,254
<254=325,271,267,255
<255=256
<256=266,257
<257=263,258
<258=260,259
<260=262,261
<263=265,264
<267=268
<268=270,269
<271=273,272
<273=274
<274=314,275
<275=295,276
<276=286,277
<277=283,278
<278=280,279
<280=282,281
<283=285,284
<286=292,287
<287=289,288
<289=291,290
<292=294,293
<295=305,296
<296=302,297
<297=299,298
<299=301,300
<302=304,303
<305=311,306
<306=308,307
<308=310,309
<311=313,312
<314=316,315
<316=322,317
<317=319,318
<319=321,320
<322=324,323
<325=326
<326=341,340,327
<327=339,328
<328=336,329
<329=333,330
<330=332,331
<333=335,334
<336=338,337
<342=344,343
<345=346
<346=348,347
<349=350
<350=351
<351=358,357,352
<352=356,353
<353=355,354
<359=361,360
<362=363
<363=365,364
<366=367
<367=368
<368=375,374,369
<369=373,370
<370=372,371
<376=377
<377=382,381,378
<378=380,379
<383=384
<384=389,388,385
<385=387,386
<390=392,391
<392=393
<393=417,394
<394=406,395
<395=397,396
<397=403,398
<398=400,399
<400=402,401
<403=405,404
<406=408,407
<408=414,409
<409=411,410
<411=413,412
<414=416,415
<417=419,418
<419=425,420
<420=422,421
<422=424,423
<425=427,426
<428=463,429
<429=431,430
<431=432
<432=454,433
<433=445,434
<434=436,435
<436=442,437
<437=439,438
<439=441,440
<442=444,443
<445=451,446
<446=448,447
<448=450,449
<451=453,452
<454=460,455
<455=457,456
<457=459,458
<460=462,461
<463=464
<464=484,465
<465=481,466
<466=474,467
<467=473,468
<468=470,469
<470=472,471
<474=480,475
<475=477,476
<477=479,478
<481=483,482
<484=486,485
<487=488
<488=499,498,489
<489=497,490
<490=496,491
<491=495,492
<492=494,493
<500=502,501
<503=504
<504=508,505
<505=507,506
<509=510
<510=511
<511=516,515,512
<512=514,513
<517=519,518
<520=521
<521=525,522
<522=524,523
<526=527
<527=528
<528=533,532,529
<529=531,530
<534=535
<535=539,536
<536=537
<537=538
<539=540
<541=542
<542=552,551,543
<543=550,544
<544=548,545
<545=546
<546=547
<548=549
<553=554
<554=564,563,555
<555=562,556
<556=560,557
<557=558
<558=559
<560=561
<565=566
<566=578,567
<567=576,574,572,568
<568=569
<569=571,570
<572=573
<574=575
<576=577
<578=579
<580=581
<581=584,583,582
<613=619,618,614
<614=615
<615=617,616
<619=707,620
<620=699,693,690,621
<621=682,676,673,622
<622=623
<623=664,624
<624=662,625
<625=650,638,626
<626=627
<627=635,628
<628=634,629
<629=631,630
<631=633,632
<635=637,636
<638=639
<639=647,640
<640=646,641
<641=643,642
<643=645,644
<647=649,648
<650=651
<651=659,652
<652=658,653
<653=655,654
<655=657,656
<659=661,660
<662=663
<664=670,665
<665=669,666
<666=668,667
<670=672,671
<673=675,674
<676=677
<677=681,678
<678=680,679
<682=683
<683=684
<684=689,688,685
<685=687,686
<690=692,691
<693=694
<694=698,695
<695=697,696
<699=700
<700=701
<701=706,705,702
<702=704,703
<707=708
<708=718,717,709
<709=716,710
<710=712,711
<712=713
<713=715,714
<734=743,742,735
<735=739,736
<736=738,737
<739=741,740
<743=798,789,782,773,764,757,746,744
<744=745
<746=747
<747=755,748
<748=751,749
<749=750
<751=752
<752=754,753
<755=756
<757=758
<758=762,759
<759=760
<760=761
<762=763
<764=765
<765=771,766
<766=769,767
<767=768
<769=770
<771=772
<773=774
<774=780,775
<775=776
<776=777
<777=779,778
<780=781
<782=783
<783=787,784
<784=785
<785=786
<787=788
<789=790
<790=796,791
<791=794,792
<792=793
<794=795
<796=797
<798=799
<799=811,810,800
<800=809,801
<801=807,802
<802=803
<803=804
<804=806,805
<807=808
<845=854,853,846
<846=850,847
<847=849,848
<850=852,851
<854=2296,2282,2268,2254,2240,2221,2202,2183,2164,2122,2103,2084,2065,2061,1941,1937,1933,1792,1672,1655,1638,1621,1604,1587,1570,1565,1558,1551,857,855
<855=856
<857=1543,1534,1531,858
<858=1504,1495,1488,1418,1396,1382,1368,1354,1340,1326,1317,1308,1299,1290,1283,1276,1253,1226,1219,1212,1189,1164,1137,1116,1098,1077,1059,1038,1020,999,981,972,963,950,941,932,919,910,901,888,879,870,863,859
<859=860
<860=862,861
<863=864
<864=868,865
<865=866
<866=867
<868=869
<870=871
<871=877,872
<872=875,873
<873=874
<875=876
<877=878
<879=880
<880=886,881
<881=884,882
<882=883
<884=885
<886=887
<888=889
<889=899,890
<890=897,895,893,891
<891=892
<893=894
<895=896
<897=898
<899=900
<901=902
<902=906,903
<903=904
<904=905
<906=907
<907=909,908
<910=911
<911=917,912
<912=915,913
<913=914
<915=916
<917=918
<919=920
<920=930,921
<921=928,926,924,922
<922=923
<924=925
<926=927
<928=929
<930=931
<932=933
<933=937,934
<934=935
<935=936
<937=938
<938=940,939
<941=942
<942=948,943
<943=946,944
<944=945
<946=947
<948=949
<950=951
<951=961,952
<952=959,957,955,953
<953=954
<955=956
<957=958
<959=960
<961=962
<963=964
<964=968,965
<965=966
<966=967
<968=969
<969=971,970
<972=973
<973=977,974
<974=975
<975=976
<977=978
<978=980,979
<981=982
<982=997,983
<983=995,993,984
<984=985
<985=991,986
<986=989,987
<987=988
<989=990
<991=992
<993=994
<995=996
<997=998
<999=1000
<1000=1019,1018,1001
<1001=1017,1002
<1002=1015,1003
<1003=1006,1004
<1004=1005
<1006=1007
<1007=1013,1008
<1008=1011,1009
<1009=1010
<1011=1012
<1013=1014
<1015=1016
<1020=1021
<1021=1036,1022
<1022=1034,1032,1023
<1023=1024
<1024=1030,1025
<1025=1028,1026
<1026=1027
<1028=1029
<1030=1031
<1032=1033
<1034=1035
<1036=1037
<1038=1039
<1039=1058,1057,1040
<1040=1056,1041
<1041=1054,1042
<1042=1045,1043
<1043=1044
<1045=1046
<1046=1052,1047
<1047=1050,1048
<1048=1049
<1050=1051
<1052=1053
<1054=1055
<1059=1060
<1060=1075,1061
<1061=1073,1071,1062
<1062=1063
<1063=1069,1064
<1064=1067,1065
<1065=1066
<1067=1068
<1069=1070
<1071=1072
<1073=1074
<1075=1076
<1077=1078
<1078=1097,1096,1079
<1079=1095,1080
<1080=1093,1081
<1081=1084,1082
<1082=1083
<1084=1085
<1085=1091,1086
<1086=1089,1087
<1087=1088
<1089=1090
<1091=1092
<1093=1094
<1098=1099
<1099=1114,1100
<1100=1112,1110,1101
<1101=1102
<1102=1108,1103
<1103=1106,1104
<1104=1105
<1106=1107
<1108=1109
<1110=1111
<1112=1113
<1114=1115
<1116=1117
<1117=1136,1135,1118
<1118=1134,1119
<1119=1132,1120
<1120=1123,1121
<1121=1122
<1123=1124
<1124=1130,1125
<1125=1128,1126
<1126=1127
<1128=1129
<1130=1131
<1132=1133
<1137=1138
<1138=1163,1162,1139
<1139=1161,1140
<1140=1159,1141
<1141=1142
<1142=1143
<1143=1157,1144
<1144=1155,1149,1147,1145
<1145=1146
<1147=1148
<1149=1150
<1150=1154,1151
<1151=1153,1152
<1155=1156
<1157=1158
<1159=1160
<1164=1165
<1165=1188,1187,1166
<1166=1186,1167
<1167=1184,1168
<1168=1169
<1169=1170
<1170=1182,1171
<1171=1180,1176,1174,1172
<1172=1173
<1174=1175
<1176=1177
<1177=1179,1178
<1180=1181
<1182=1183
<1184=1185
<1189=1190
<1190=1211,1210,1191
<1191=1209,1192
<1192=1207,1193
<1193=1194
<1194=1195
<1195=1205,1196
<1196=1203,1201,1199,1197
<1197=1198
<1199=1200
<1201=1202
<1203=1204
<1205=1206
<1207=1208
<1212=1213
<1213=1218,1217,1214
<1214=1216,1215
<1219=1220
<1220=1225,1224,1221
<1221=1223,1222
<1226=1227
<1227=1252,1251,1228
<1228=1250,1229
<1229=1248,1230
<1230=1231
<1231=1232
<1232=1246,1233
<1233=1244,1238,1236,1234
<1234=1235
<1236=1237
<1238=1239
<1239=1243,1240
<1240=1242,1241
<1244=1245
<1246=1247
<1248=1249
<1253=1254
<1254=1275,1274,1255
<1255=1273,1256
<1256=1271,1257
<1257=1258
<1258=1259
<1259=1269,1260
<1260=1267,1265,1263,1261
<1261=1262
<1263=1264
<1265=1266
<1267=1268
<1269=1270
<1271=1272
<1276=1277
<1277=1282,1281,1278
<1278=1280,1279
<1283=1284
<1284=1289,1288,1285
<1285=1287,1286
<1290=1291
<1291=1297,1292
<1292=1293
<1293=1294
<1294=1296,1295
<1297=1298
<1299=1300
<1300=1306,1301
<1301=1302
<1302=1303
<1303=1305,1304
<1306=1307
<1308=1309
<1309=1315,1310
<1310=1311
<1311=1312
<1312=1314,1313
<1315=1316
<1317=1318
<1318=1324,1319
<1319=1320
<1320=1321
<1321=1323,1322
<1324=1325
<1326=1327
<1327=1339,1338,1328
<1328=1337,1329
<1329=1335,1330
<1330=1331
<1331=1332
<1332=1334,1333
<1335=1336
<1340=1341
<1341=1353,1352,1342
<1342=1351,1343
<1343=1349,1344
<1344=1345
<1345=1346
<1346=1348,1347
<1349=1350
<1354=1355
<1355=1367,1366,1356
<1356=1365,1357
<1357=1363,1358
<1358=1359
<1359=1360
<1360=1362,1361
<1363=1364
<1368=1369
<1369=1381,1380,1370
<1370=1379,1371
<1371=1377,1372
<1372=1373
<1373=1374
<1374=1376,1375
<1377=1378
<1382=1383
<1383=1395,1394,1384
<1384=1393,1385
<1385=1391,1386
<1386=1387
<1387=1388
<1388=1390,1389
<1391=1392
<1396=1414,1397
<1397=1398
<1398=1412,1399
<1399=1410,1406,1402,1400
<1400=1401
<1402=1403
<1403=1405,1404
<1406=1407
<1407=1409,1408
<1410=1411
<1412=1413
<1414=1415
<1415=1417,1416
<1418=1480,1471,1468,1419
<1419=1446,1420
<1420=1436,1425,1421
<1421=1422
<1422=1424,1423
<1425=1432,1426
<1426=1427
<1427=1431,1428
<1428=1430,1429
<1432=1433
<1433=1435,1434
<1436=1437
<1437=1445,1438
<1438=1442,1439
<1439=1441,1440
<1442=1444,1443
<1446=1447
<1447=1459,1448
<1448=1450,1449
<1450=1454,1451
<1451=1453,1452
<1454=1458,1455
<1455=1457,1456
<1459=1461,1460
<1461=1465,1462
<1462=1464,1463
<1465=1467,1466
<1468=1470,1469
<1471=1472
<1472=1479,1473
<1473=1475,1474
<1475=1476
<1476=1478,1477
<1480=1481
<1481=1482
<1482=1487,1486,1483
<1483=1485,1484
<1488=1489
<1489=1494,1493,1490
<1490=1492,1491
<1495=1496
<1496=1503,1502,1497
<1497=1501,1498
<1498=1500,1499
<1504=1523,1505
<1505=1507,1506
<1507=1508
<1508=1521,1509
<1509=1519,1510
<1510=1511
<1511=1513,1512
<1513=1514
<1514=1516,1515
<1516=1518,1517
<1519=1520
<1521=1522
<1523=1524
<1524=1528,1525
<1525=1527,1526
<1528=1530,1529
<1531=1533,1532
<1534=1535
<1535=1542,1536
<1536=1538,1537
<1538=1539
<1539=1541,1540
<1543=1544
<1544=1545
<1545=1550,1549,1546
<1546=1548,1547
<1551=1552
<1552=1557,1556,1553
<1553=1555,1554
<1558=1559
<1559=1564,1563,1560
<1560=1562,1561
<1565=1566
<1566=1569,1568,1567
<1570=1578,1571
<1571=1572
<1572=1576,1573
<1573=1574
<1574=1575
<1576=1577
<1578=1579
<1579=1586,1580
<1580=1584,1581
<1581=1582
<1582=1583
<1584=1585
<1587=1595,1588
<1588=1589
<1589=1593,1590
<1590=1591
<1591=1592
<1593=1594
<1595=1596
<1596=1603,1597
<1597=1601,1598
<1598=1599
<1599=1600
<1601=1602
<1604=1612,1605
<1605=1606
<1606=1610,1607
<1607=1608
<1608=1609
<1610=1611
<1612=1613
<1613=1620,1614
<1614=1618,1615
<1615=1616
<1616=1617
<1618=1619
<1621=1629,1622
<1622=1623
<1623=1627,1624
<1624=1625
<1625=1626
<1627=1628
<1629=1630
<1630=1637,1631
<1631=1635,1632
<1632=1633
<1633=1634
<1635=1636
<1638=1646,1639
<1639=1640
<1640=1644,1641
<1641=1642
<1642=1643
<1644=1645
<1646=1647
<1647=1654,1648
<1648=1652,1649
<1649=1650
<1650=1651
<1652=1653
<1655=1663,1656
<1656=1657
<1657=1661,1658
<1658=1659
<1659=1660
<1661=1662
<1663=1664
<1664=1671,1665
<1665=1669,1666
<1666=1667
<1667=1668
<1669=1670
<1672=1784,1775,1772,1673
<1673=1762,1753,1750,1674
<1674=1742,1675
<1675=1733,1725,1719,1713,1705,1699,1690,1682,1676
<1676=1677
<1677=1679,1678
<1679=1681,1680
<1682=1683
<1683=1687,1684
<1684=1686,1685
<1687=1689,1688
<1690=1691
<1691=1698,1697,1692
<1692=1696,1693
<1693=1695,1694
<1699=1700
<1700=1702,1701
<1702=1704,1703
<1705=1706
<1706=1710,1707
<1707=1709,1708
<1710=1712,1711
<1713=1714
<1714=1718,1715
<1715=1717,1716
<1719=1720
<1720=1722,1721
<1722=1724,1723
<1725=1726
<1726=1730,1727
<1727=1729,1728
<1730=1732,1731
<1733=1734
<1734=1741,1740,1735
<1735=1739,1736
<1736=1738,1737
<1742=1743
<1743=1747,1744
<1744=1746,1745
<1747=1749,1748
<1750=1752,1751
<1753=1754
<1754=1761,1755
<1755=1757,1756
<1757=1758
<1758=1760,1759
<1762=1763
<1763=1764
<1764=1771,1770,1765
<1765=1769,1766
<1766=1768,1767
<1772=1774,1773
<1775=1776
<1776=1783,1777
<1777=1779,1778
<1779=1780
<1780=1782,1781
<1784=1785
<1785=1786
<1786=1791,1790,1787
<1787=1789,1788
<1792=1925,1916,1913,1793
<1793=1896,1880,1871,1851,1812,1803,1794
<1794=1795
<1795=1799,1796
<1796=1797
<1797=1798
<1799=1800
<1800=1802,1801
<1803=1804
<1804=1808,1805
<1805=1806
<1806=1807
<1808=1809
<1809=1811,1810
<1812=1827,1813
<1813=1814
<1814=1825,1815
<1815=1823,1816
<1816=1817
<1817=1819,1818
<1819=1820
<1820=1822,1821
<1823=1824
<1825=1826
<1827=1828
<1828=1850,1829
<1829=1848,1830
<1830=1841,1839,1835,1831
<1831=1832
<1832=1834,1833
<1835=1836
<1836=1838,1837
<1839=1840
<1841=1842
<1842=1844,1843
<1844=1845
<1845=1847,1846
<1848=1849
<1851=1867,1852
<1852=1853
<1853=1866,1854
<1854=1860,1855
<1855=1856
<1856=1857
<1857=1859,1858
<1860=1861
<1861=1863,1862
<1863=1865,1864
<1867=1868
<1868=1870,1869
<1871=1872
<1872=1879,1878,1873
<1873=1877,1874
<1874=1876,1875
<1880=1881
<1881=1895,1894,1882
<1882=1893,1883
<1883=1887,1884
<1884=1885
<1885=1886
<1887=1888
<1888=1890,1889
<1890=1892,1891
<1896=1905,1897
<1897=1904,1903,1898
<1898=1902,1899
<1899=1901,1900
<1905=1912,1911,1906
<1906=1910,1907
<1907=1909,1908
<1913=1915,1914
<1916=1917
<1917=1924,1918
<1918=1920,1919
<1920=1921
<1921=1923,1922
<1925=1926
<1926=1927
<1927=1932,1931,1928
<1928=1930,1929
<1933=1934
<1934=1936,1935
<1937=1938
<1938=1940,1939
<1941=2053,2044,2041,1942
<1942=2032,2016,2007,1987,1952,1943
<1943=1944
<1944=1948,1945
<1945=1946
<1946=1947
<1948=1949
<1949=1951,1950
<1952=1967,1953
<1953=1954
<1954=1965,1955
<1955=1963,1956
<1956=1957
<1957=1959,1958
<1959=1960
<1960=1962,1961
<1963=1964
<1965=1966
<1967=1968
<1968=1986,1969
<1969=1984,1970
<1970=1977,1975,1971
<1971=1972
<1972=1974,1973
<1975=1976
<1977=1978
<1978=1980,1979
<1980=1981
<1981=1983,1982
<1984=1985
<1987=2003,1988
<1988=1989
<1989=2002,1990
<1990=1996,1991
<1991=1992
<1992=1993
<1993=1995,1994
<1996=1997
<1997=1999,1998
<1999=2001,2000
<2003=2004
<2004=2006,2005
<2007=2008
<2008=2015,2014,2009
<2009=2013,2010
<2010=2012,2011
<2016=2017
<2017=2031,2030,2018
<2018=2029,2019
<2019=2023,2020
<2020=2021
<2021=2022
<2023=2024
<2024=2026,2025
<2026=2028,2027
<2032=2033
<2033=2040,2039,2034
<2034=2038,2035
<2035=2037,2036
<2041=2043,2042
<2044=2045
<2045=2052,2046
<2046=2048,2047
<2048=2049
<2049=2051,2050
<2053=2054
<2054=2055
<2055=2060,2059,2056
<2056=2058,2057
<2061=2062
<2062=2064,2063
<2065=2066
<2066=2082,2067
<2067=2068
<2068=2069
<2069=2076,2070
<2070=2072,2071
<2072=2073
<2073=2075,2074
<2076=2078,2077
<2078=2079
<2079=2081,2080
<2082=2083
<2084=2085
<2085=2101,2086
<2086=2087
<2087=2088
<2088=2095,2089
<2089=2091,2090
<2091=2092
<2092=2094,2093
<2095=2097,2096
<2097=2098
<2098=2100,2099
<2101=2102
<2103=2104
<2104=2120,2105
<2105=2106
<2106=2107
<2107=2114,2108
<2108=2110,2109
<2110=2111
<2111=2113,2112
<2114=2116,2115
<2116=2117
<2117=2119,2118
<2120=2121
<2122=2123
<2123=2162,2124
<2124=2160,2153,2146,2139,2132,2125
<2125=2126
<2126=2128,2127
<2128=2129
<2129=2131,2130
<2132=2133
<2133=2135,2134
<2135=2136
<2136=2138,2137
<2139=2140
<2140=2142,2141
<2142=2143
<2143=2145,2144
<2146=2147
<2147=2149,2148
<2149=2150
<2150=2152,2151
<2153=2154
<2154=2156,2155
<2156=2157
<2157=2159,2158
<2160=2161
<2162=2163
<2164=2165
<2165=2181,2166
<2166=2174,2167
<2167=2168
<2168=2170,2169
<2170=2171
<2171=2173,2172
<2174=2175
<2175=2177,2176
<2177=2178
<2178=2180,2179
<2181=2182
<2183=2184
<2184=2200,2185
<2185=2193,2186
<2186=2187
<2187=2189,2188
<2189=2190
<2190=2192,2191
<2193=2194
<2194=2196,2195
<2196=2197
<2197=2199,2198
<2200=2201
<2202=2203
<2203=2219,2204
<2204=2212,2205
<2205=2206
<2206=2208,2207
<2208=2209
<2209=2211,2210
<2212=2213
<2213=2215,2214
<2215=2216
<2216=2218,2217
<2219=2220
<2221=2222
<2222=2238,2223
<2223=2231,2224
<2224=2225
<2225=2227,2226
<2227=2228
<2228=2230,2229
<2231=2232
<2232=2234,2233
<2234=2235
<2235=2237,2236
<2238=2239
<2240=2241
<2241=2253,2252,2242
<2242=2251,2243
<2243=2249,2244
<2244=2247,2245
<2245=2246
<2247=2248
<2249=2250
<2254=2255
<2255=2267,2266,2256
<2256=2265,2257
<2257=2263,2258
<2258=2261,2259
<2259=2260
<2261=2262
<2263=2264
<2268=2269
<2269=2281,2280,2270
<2270=2279,2271
<2271=2277,2272
<2272=2275,2273
<2273=2274
<2275=2276
<2277=2278
<2282=2283
<2283=2295,2294,2284
<2284=2293,2285
<2285=2291,2286
<2286=2289,2287
<2287=2288
<2289=2290
<2291=2292
<2296=2297
<2297=2309,2308,2298
<2298=2307,2299
<2299=2305,2300
<2300=2303,2301
<2301=2302
<2303=2304
<2305=2306
<2400=2409,2408,2401
<2401=2405,2402
<2402=2404,2403
<2405=2407,2406
<2409=2557,2412,2410
<2410=2411
<2412=2549,2540,2537,2413
<2413=2528,2519,2503,2494,2474,2469,2423,2414
<2414=2415
<2415=2419,2416
<2416=2417
<2417=2418
<2419=2420
<2420=2422,2421
<2423=2438,2424
<2424=2425
<2425=2436,2426
<2426=2434,2427
<2427=2428
<2428=2430,2429
<2430=2431
<2431=2433,2432
<2434=2435
<2436=2437
<2438=2439
<2439=2468,2440
<2440=2466,2441
<2441=2459,2450,2446,2442
<2442=2443
<2443=2445,2444
<2446=2447
<2447=2449,2448
<2450=2451
<2451=2453,2452
<2453=2454
<2454=2456,2455
<2456=2458,2457
<2459=2460
<2460=2462,2461
<2462=2463
<2463=2465,2464
<2466=2467
<2469=2470
<2470=2473,2472,2471
<2474=2490,2475
<2475=2476
<2476=2489,2477
<2477=2483,2478
<2478=2479
<2479=2480
<2480=2482,2481
<2483=2484
<2484=2486,2485
<2486=2488,2487
<2490=2491
<2491=2493,2492
<2494=2495
<2495=2502,2501,2496
<2496=2500,2497
<2497=2499,2498
<2503=2504
<2504=2518,2517,2505
<2505=2516,2506
<2506=2510,2507
<2507=2508
<2508=2509
<2510=2511
<2511=2513,2512
<2513=2515,2514
<2519=2520
<2520=2527,2526,2521
<2521=2525,2522
<2522=2524,2523
<2528=2529
<2529=2536,2535,2530
<2530=2534,2531
<2531=2533,2532
<2537=2539,2538
<2540=2541
<2541=2548,2542
<2542=2544,2543
<2544=2545
<2545=2547,2546
<2549=2550
<2550=2551
<2551=2556,2555,2552
<2552=2554,2553
<2557=2558
<2558=2560,2559
<2584=2593,2592,2585
<2585=2589,2586
<2586=2588,2587
<2589=2591,2590
<2593=3271,3257,3243,3229,3222,3194,3175,3156,3137,3123,3109,3095,3071,3047,3040,2596,2594
<2594=2595
<2596=3032,3023,3020,2597
<2597=3011,2998,2991,2928,2924,2863,2849,2835,2821,2808,2801,2794,2773,2755,2734,2716,2693,2666,2661,2652,2643,2623,2614,2605,2598
<2598=2599
<2599=2603,2600
<2600=2601
<2601=2602
<2603=2604
<2605=2606
<2606=2612,2607
<2607=2610,2608
<2608=2609
<2610=2611
<2612=2613
<2614=2615
<2615=2621,2616
<2616=2619,2617
<2617=2618
<2619=2620
<2621=2622
<2623=2624
<2624=2641,2625
<2625=2639,2637,2635,2628,2626
<2626=2627
<2628=2629
<2629=2631,2630
<2631=2632
<2632=2634,2633
<2635=2636
<2637=2638
<2639=2640
<2641=2642
<2643=2644
<2644=2648,2645
<2645=2646
<2646=2647
<2648=2649
<2649=2651,2650
<2652=2653
<2653=2657,2654
<2654=2655
<2655=2656
<2657=2658
<2658=2660,2659
<2661=2662
<2662=2665,2664,2663
<2666=2667
<2667=2692,2691,2668
<2668=2690,2669
<2669=2688,2670
<2670=2671
<2671=2672
<2672=2686,2673
<2673=2684,2678,2676,2674
<2674=2675
<2676=2677
<2678=2679
<2679=2683,2680
<2680=2682,2681
<2684=2685
<2686=2687
<2688=2689
<2693=2694
<2694=2715,2714,2695
<2695=2713,2696
<2696=2711,2697
<2697=2698
<2698=2699
<2699=2709,2700
<2700=2707,2705,2703,2701
<2701=2702
<2703=2704
<2705=2706
<2707=2708
<2709=2710
<2711=2712
<2716=2717
<2717=2732,2718
<2718=2730,2728,2719
<2719=2720
<2720=2726,2721
<2721=2724,2722
<2722=2723
<2724=2725
<2726=2727
<2728=2729
<2730=2731
<2732=2733
<2734=2735
<2735=2754,2753,2736
<2736=2752,2737
<2737=2750,2738
<2738=2741,2739
<2739=2740
<2741=2742
<2742=2748,2743
<2743=2746,2744
<2744=2745
<2746=2747
<2748=2749
<2750=2751
<2755=2756
<2756=2771,2757
<2757=2769,2767,2758
<2758=2759
<2759=2765,2760
<2760=2763,2761
<2761=2762
<2763=2764
<2765=2766
<2767=2768
<2769=2770
<2771=2772
<2773=2774
<2774=2793,2792,2775
<2775=2791,2776
<2776=2789,2777
<2777=2780,2778
<2778=2779
<2780=2781
<2781=2787,2782
<2782=2785,2783
<2783=2784
<2785=2786
<2787=2788
<2789=2790
<2794=2795
<2795=2800,2799,2796
<2796=2798,2797
<2801=2802
<2802=2807,2806,2803
<2803=2805,2804
<2808=2809
<2809=2819,2810
<2810=2815,2813,2811
<2811=2812
<2813=2814
<2815=2816
<2816=2818,2817
<2819=2820
<2821=2822
<2822=2834,2833,2823
<2823=2832,2824
<2824=2830,2825
<2825=2826
<2826=2827
<2827=2829,2828
<2830=2831
<2835=2836
<2836=2848,2847,2837
<2837=2846,2838
<2838=2844,2839
<2839=2840
<2840=2841
<2841=2843,2842
<2844=2845
<2849=2850
<2850=2862,2861,2851
<2851=2860,2852
<2852=2858,2853
<2853=2854
<2854=2855
<2855=2857,2856
<2858=2859
<2863=2916,2907,2904,2864
<2864=2884,2865
<2865=2880,2866
<2866=2867
<2867=2879,2868
<2868=2874,2869
<2869=2871,2870
<2871=2873,2872
<2874=2876,2875
<2876=2878,2877
<2880=2881
<2881=2883,2882
<2884=2885
<2885=2899,2886
<2886=2888,2887
<2888=2894,2889
<2889=2891,2890
<2891=2893,2892
<2894=2896,2895
<2896=2898,2897
<2899=2901,2900
<2901=2903,2902
<2904=2906,2905
<2907=2908
<2908=2915,2909
<2909=2911,2910
<2911=2912
<2912=2914,2913
<2916=2917
<2917=2918
<2918=2923,2922,2919
<2919=2921,2920
<2924=2925
<2925=2927,2926
<2928=2983,2974,2971,2929
<2929=2953,2930
<2930=2949,2931
<2931=2932
<2932=2948,2933
<2933=2941,2934
<2934=2938,2935
<2935=2937,2936
<2938=2940,2939
<2941=2945,2942
<2942=2944,2943
<2945=2947,2946
<2949=2950
<2950=2952,2951
<2953=2954
<2954=2956,2955
<2956=2964,2957
<2957=2961,2958
<2958=2960,2959
<2961=2963,2962
<2964=2968,2965
<2965=2967,2966
<2968=2970,2969
<2971=2973,2972
<2974=2975
<2975=2982,2976
<2976=2978,2977
<2978=2979
<2979=2981,2980
<2983=2984
<2984=2985
<2985=2990,2989,2986
<2986=2988,2987
<2991=2992
<2992=2997,2996,2993
<2993=2995,2994
<2998=3005,2999
<2999=3004,3003,3000
<3000=3002,3001
<3005=3010,3009,3006
<3006=3008,3007
<3011=3012
<3012=3019,3018,3013
<3013=3017,3014
<3014=3016,3015
<3020=3022,3021
<3023=3024
<3024=3031,3025
<3025=3027,3026
<3027=3028
<3028=3030,3029
<3032=3033
<3033=3034
<3034=3039,3038,3035
<3035=3037,3036
<3040=3041
<3041=3046,3045,3042
<3042=3044,3043
<3047=3055,3048
<3048=3049
<3049=3053,3050
<3050=3051
<3051=3052
<3053=3054
<3055=3056
<3056=3070,3057
<3057=3068,3058
<3058=3059
<3059=3060
<3060=3062,3061
<3062=3063
<3063=3065,3064
<3065=3067,3066
<3068=3069
<3071=3079,3072
<3072=3073
<3073=3077,3074
<3074=3075
<3075=3076
<3077=3078
<3079=3080
<3080=3094,3081
<3081=3092,3082
<3082=3083
<3083=3084
<3084=3086,3085
<3086=3087
<3087=3089,3088
<3089=3091,3090
<3092=3093
<3095=3096
<3096=3108,3107,3097
<3097=3106,3098
<3098=3104,3099
<3099=3102,3100
<3100=3101
<3102=3103
<3104=3105
<3109=3110
<3110=3122,3121,3111
<3111=3120,3112
<3112=3118,3113
<3113=3116,3114
<3114=3115
<3116=3117
<3118=3119
<3123=3124
<3124=3136,3135,3125
<3125=3134,3126
<3126=3132,3127
<3127=3130,3128
<3128=3129
<3130=3131
<3132=3133
<3137=3138
<3138=3154,3139
<3139=3147,3140
<3140=3141
<3141=3143,3142
<3143=3144
<3144=3146,3145
<3147=3148
<3148=3150,3149
<3150=3151
<3151=3153,3152
<3154=3155
<3156=3157
<3157=3173,3158
<3158=3166,3159
<3159=3160
<3160=3162,3161
<3162=3163
<3163=3165,3164
<3166=3167
<3167=3169,3168
<3169=3170
<3170=3172,3171
<3173=3174
<3175=3176
<3176=3192,3177
<3177=3185,3178
<3178=3179
<3179=3181,3180
<3181=3182
<3182=3184,3183
<3185=3186
<3186=3188,3187
<3188=3189
<3189=3191,3190
<3192=3193
<3194=3195
<3195=3220,3196
<3196=3218,3211,3204,3197
<3197=3198
<3198=3200,3199
<3200=3201
<3201=3203,3202
<3204=3205
<3205=3207,3206
<3207=3208
<3208=3210,3209
<3211=3212
<3212=3214,3213
<3214=3215
<3215=3217,3216
<3218=3219
<3220=3221
<3222=3223
<3223=3228,3227,3224
<3224=3226,3225
<3229=3230
<3230=3242,3241,3231
<3231=3240,3232
<3232=3238,3233
<3233=3236,3234
<3234=3235
<3236=3237
<3238=3239
<3243=3244
<3244=3256,3255,3245
<3245=3254,3246
<3246=3252,3247
<3247=3250,3248
<3248=3249
<3250=3251
<3252=3253
<3257=3258
<3258=3270,3269,3259
<3259=3268,3260
<3260=3266,3261
<3261=3264,3262
<3262=3263
<3264=3265
<3266=3267
<3271=3272
<3272=3276,3273
<3273=3274
<3274=3275
<3276=3277
<3340=3349,3348,3341
<3341=3345,3342
<3342=3344,3343
<3345=3347,3346
<3349=4768,4754,4740,4726,4712,4693,4674,4655,4636,4594,4575,4556,4537,4533,4413,4409,4405,4264,4144,4127,4110,4093,4076,4059,4042,4025,4008,4003,3996,3989,3352,3350
<3350=3351
<3352=3981,3972,3969,3353
<3353=3942,3933,3926,3856,3834,3820,3806,3792,3778,3764,3668,3661,3654,3633,3615,3594,3576,3555,3537,3516,3498,3475,3450,3423,3414,3405,3396,3383,3374,3365,3358,3354
<3354=3355
<3355=3357,3356
<3358=3359
<3359=3363,3360
<3360=3361
<3361=3362
<3363=3364
<3365=3366
<3366=3372,3367
<3367=3370,3368
<3368=3369
<3370=3371
<3372=3373
<3374=3375
<3375=3381,3376
<3376=3379,3377
<3377=3378
<3379=3380
<3381=3382
<3383=3384
<3384=3394,3385
<3385=3392,3390,3388,3386
<3386=3387
<3388=3389
<3390=3391
<3392=3393
<3394=3395
<3396=3397
<3397=3401,3398
<3398=3399
<3399=3400
<3401=3402
<3402=3404,3403
<3405=3406
<3406=3410,3407
<3407=3408
<3408=3409
<3410=3411
<3411=3413,3412
<3414=3415
<3415=3419,3416
<3416=3417
<3417=3418
<3419=3420
<3420=3422,3421
<3423=3424
<3424=3449,3448,3425
<3425=3447,3426
<3426=3445,3427
<3427=3428
<3428=3429
<3429=3443,3430
<3430=3441,3435,3433,3431
<3431=3432
<3433=3434
<3435=3436
<3436=3440,3437
<3437=3439,3438
<3441=3442
<3443=3444
<3445=3446
<3450=3451
<3451=3474,3473,3452
<3452=3472,3453
<3453=3470,3454
<3454=3455
<3455=3456
<3456=3468,3457
<3457=3466,3462,3460,3458
<3458=3459
<3460=3461
<3462=3463
<3463=3465,3464
<3466=3467
<3468=3469
<3470=3471
<3475=3476
<3476=3497,3496,3477
<3477=3495,3478
<3478=3493,3479
<3479=3480
<3480=3481
<3481=3491,3482
<3482=3489,3487,3485,3483
<3483=3484
<3485=3486
<3487=3488
<3489=3490
<3491=3492
<3493=3494
<3498=3499
<3499=3514,3500
<3500=3512,3510,3501
<3501=3502
<3502=3508,3503
<3503=3506,3504
<3504=3505
<3506=3507
<3508=3509
<3510=3511
<3512=3513
<3514=3515
<3516=3517
<3517=3536,3535,3518
<3518=3534,3519
<3519=3532,3520
<3520=3523,3521
<3521=3522
<3523=3524
<3524=3530,3525
<3525=3528,3526
<3526=3527
<3528=3529
<3530=3531
<3532=3533
<3537=3538
<3538=3553,3539
<3539=3551,3549,3540
<3540=3541
<3541=3547,3542
<3542=3545,3543
<3543=3544
<3545=3546
<3547=3548
<3549=3550
<3551=3552
<3553=3554
<3555=3556
<3556=3575,3574,3557
<3557=3573,3558
<3558=3571,3559
<3559=3562,3560
<3560=3561
<3562=3563
<3563=3569,3564
<3564=3567,3565
<3565=3566
<3567=3568
<3569=3570
<3571=3572
<3576=3577
<3577=3592,3578
<3578=3590,3588,3579
<3579=3580
<3580=3586,3581
<3581=3584,3582
<3582=3583
<3584=3585
<3586=3587
<3588=3589
<3590=3591
<3592=3593
<3594=3595
<3595=3614,3613,3596
<3596=3612,3597
<3597=3610,3598
<3598=3601,3599
<3599=3600
<3601=3602
<3602=3608,3603
<3603=3606,3604
<3604=3605
<3606=3607
<3608=3609
<3610=3611
<3615=3616
<3616=3631,3617
<3617=3629,3627,3618
<3618=3619
<3619=3625,3620
<3620=3623,3621
<3621=3622
<3623=3624
<3625=3626
<3627=3628
<3629=3630
<3631=3632
<3633=3634
<3634=3653,3652,3635
<3635=3651,3636
<3636=3649,3637
<3637=3640,3638
<3638=3639
<3640=3641
<3641=3647,3642
<3642=3645,3643
<3643=3644
<3645=3646
<3647=3648
<3649=3650
<3654=3655
<3655=3660,3659,3656
<3656=3658,3657
<3661=3662
<3662=3667,3666,3663
<3663=3665,3664
<3668=3756,3746,3743,3669
<3669=3670
<3670=3703,3671
<3671=3672
<3672=3694,3673
<3673=3685,3674
<3674=3676,3675
<3676=3682,3677
<3677=3679,3678
<3679=3681,3680
<3682=3684,3683
<3685=3691,3686
<3686=3688,3687
<3688=3690,3689
<3691=3693,3692
<3694=3700,3695
<3695=3697,3696
<3697=3699,3698
<3700=3702,3701
<3703=3704
<3704=3724,3705
<3705=3715,3706
<3706=3712,3707
<3707=3709,3708
<3709=3711,3710
<3712=3714,3713
<3715=3721,3716
<3716=3718,3717
<3718=3720,3719
<3721=3723,3722
<3724=3734,3725
<3725=3731,3726
<3726=3728,3727
<3728=3730,3729
<3731=3733,3732
<3734=3740,3735
<3735=3737,3736
<3737=3739,3738
<3740=3742,3741
<3743=3745,3744
<3746=3747
<3747=3755,3748
<3748=3752,3749
<3749=3751,3750
<3752=3754,3753
<3756=3757
<3757=3758
<3758=3763,3762,3759
<3759=3761,3760
<3764=3765
<3765=3777,3776,3766
<3766=3775,3767
<3767=3773,3768
<3768=3769
<3769=3770
<3770=3772,3771
<3773=3774
<3778=3779
<3779=3791,3790,3780
<3780=3789,3781
<3781=3787,3782
<3782=3783
<3783=3784
<3784=3786,3785
<3787=3788
<3792=3793
<3793=3805,3804,3794
<3794=3803,3795
<3795=3801,3796
<3796=3797
<3797=3798
<3798=3800,3799
<3801=3802
<3806=3807
<3807=3819,3818,3808
<3808=3817,3809
<3809=3815,3810
<3810=3811
<3811=3812
<3812=3814,3813
<3815=3816
<3820=3821
<3821=3833,3832,3822
<3822=3831,3823
<3823=3829,3824
<3824=3825
<3825=3826
<3826=3828,3827
<3829=3830
<3834=3852,3835
<3835=3836
<3836=3850,3837
<3837=3848,3844,3840,3838
<3838=3839
<3840=3841
<3841=3843,3842
<3844=3845
<3845=3847,3846
<3848=3849
<3850=3851
<3852=3853
<3853=3855,3854
<3856=3918,3909,3906,3857
<3857=3884,3858
<3858=3874,3863,3859
<3859=3860
<3860=3862,3861
<3863=3870,3864
<3864=3865
<3865=3869,3866
<3866=3868,3867
<3870=3871
<3871=3873,3872
<3874=3875
<3875=3883,3876
<3876=3880,3877
<3877=3879,3878
<3880=3882,3881
<3884=3885
<3885=3897,3886
<3886=3888,3887
<3888=3892,3889
<3889=3891,3890
<3892=3896,3893
<3893=3895,3894
<3897=3899,3898
<3899=3903,3900
<3900=3902,3901
<3903=3905,3904
<3906=3908,3907
<3909=3910
<3910=3917,3911
<3911=3913,3912
<3913=3914
<3914=3916,3915
<3918=3919
<3919=3920
<3920=3925,3924,3921
<3921=3923,3922
<3926=3927
<3927=3932,3931,3928
<3928=3930,3929
<3933=3934
<3934=3941,3940,3935
<3935=3939,3936
<3936=3938,3937
<3942=3961,3943
<3943=3945,3944
<3945=3946
<3946=3959,3947
<3947=3957,3948
<3948=3949
<3949=3951,3950
<3951=3952
<3952=3954,3953
<3954=3956,3955
<3957=3958
<3959=3960
<3961=3962
<3962=3966,3963
<3963=3965,3964
<3966=3968,3967
<3969=3971,3970
<3972=3973
<3973=3980,3974
<3974=3976,3975
<3976=3977
<3977=3979,3978
<3981=3982
<3982=3983
<3983=3988,3987,3984
<3984=3986,3985
<3989=3990
<3990=3995,3994,3991
<3991=3993,3992
<3996=3997
<3997=4002,4001,3998
<3998=4000,3999
<4003=4004
<4004=4007,4006,4005
<4008=4016,4009
<4009=4010
<4010=4014,4011
<4011=4012
<4012=4013
<4014=4015
<4016=4017
<4017=4024,4018
<4018=4022,4019
<4019=4020
<4020=4021
<4022=4023
<4025=4033,4026
<4026=4027
<4027=4031,4028
<4028=4029
<4029=4030
<4031=4032
<4033=4034
<4034=4041,4035
<4035=4039,4036
<4036=4037
<4037=4038
<4039=4040
<4042=4050,4043
<4043=4044
<4044=4048,4045
<4045=4046
<4046=4047
<4048=4049
<4050=4051
<4051=4058,4052
<4052=4056,4053
<4053=4054
<4054=4055
<4056=4057
<4059=4067,4060
<4060=4061
<4061=4065,4062
<4062=4063
<4063=4064
<4065=4066
<4067=4068
<4068=4075,4069
<4069=4073,4070
<4070=4071
<4071=4072
<4073=4074
<4076=4084,4077
<4077=4078
<4078=4082,4079
<4079=4080
<4080=4081
<4082=4083
<4084=4085
<4085=4092,4086
<4086=4090,4087
<4087=4088
<4088=4089
<4090=4091
<4093=4101,4094
<4094=4095
<4095=4099,4096
<4096=4097
<4097=4098
<4099=4100
<4101=4102
<4102=4109,4103
<4103=4107,4104
<4104=4105
<4105=4106
<4107=4108
<4110=4118,4111
<4111=4112
<4112=4116,4113
<4113=4114
<4114=4115
<4116=4117
<4118=4119
<4119=4126,4120
<4120=4124,4121
<4121=4122
<4122=4123
<4124=4125
<4127=4135,4128
<4128=4129
<4129=4133,4130
<4130=4131
<4131=4132
<4133=4134
<4135=4136
<4136=4143,4137
<4137=4141,4138
<4138=4139
<4139=4140
<4141=4142
<4144=4256,4247,4244,4145
<4145=4234,4225,4222,4146
<4146=4214,4147
<4147=4205,4197,4191,4185,4177,4171,4162,4154,4148
<4148=4149
<4149=4151,4150
<4151=4153,4152
<4154=4155
<4155=4159,4156
<4156=4158,4157
<4159=4161,4160
<4162=4163
<4163=4170,4169,4164
<4164=4168,4165
<4165=4167,4166
<4171=4172
<4172=4174,4173
<4174=4176,4175
<4177=4178
<4178=4182,4179
<4179=4181,4180
<4182=4184,4183
<4185=4186
<4186=4190,4187
<4187=4189,4188
<4191=4192
<4192=4194,4193
<4194=4196,4195
<4197=4198
<4198=4202,4199
<4199=4201,4200
<4202=4204,4203
<4205=4206
<4206=4213,4212,4207
<4207=4211,4208
<4208=4210,4209
<4214=4215
<4215=4219,4216
<4216=4218,4217
<4219=4221,4220
<4222=4224,4223
<4225=4226
<4226=4233,4227
<4227=4229,4228
<4229=4230
<4230=4232,4231
<4234=4235
<4235=4236
<4236=4243,4242,4237
<4237=4241,4238
<4238=4240,4239
<4244=4246,4245
<4247=4248
<4248=4255,4249
<4249=4251,4250
<4251=4252
<4252=4254,4253
<4256=4257
<4257=4258
<4258=4263,4262,4259
<4259=4261,4260
<4264=4397,4388,4385,4265
<4265=4368,4352,4343,4323,4284,4275,4266
<4266=4267
<4267=4271,4268
<4268=4269
<4269=4270
<4271=4272
<4272=4274,4273
<4275=4276
<4276=4280,4277
<4277=4278
<4278=4279
<4280=4281
<4281=4283,4282
<4284=4299,4285
<4285=4286
<4286=4297,4287
<4287=4295,4288
<4288=4289
<4289=4291,4290
<4291=4292
<4292=4294,4293
<4295=4296
<4297=4298
<4299=4300
<4300=4322,4301
<4301=4320,4302
<4302=4313,4311,4307,4303
<4303=4304
<4304=4306,4305
<4307=4308
<4308=4310,4309
<4311=4312
<4313=4314
<4314=4316,4315
<4316=4317
<4317=4319,4318
<4320=4321
<4323=4339,4324
<4324=4325
<4325=4338,4326
<4326=4332,4327
<4327=4328
<4328=4329
<4329=4331,4330
<4332=4333
<4333=4335,4334
<4335=4337,4336
<4339=4340
<4340=4342,4341
<4343=4344
<4344=4351,4350,4345
<4345=4349,4346
<4346=4348,4347
<4352=4353
<4353=4367,4366,4354
<4354=4365,4355
<4355=4359,4356
<4356=4357
<4357=4358
<4359=4360
<4360=4362,4361
<4362=4364,4363
<4368=4377,4369
<4369=4376,4375,4370
<4370=4374,4371
<4371=4373,4372
<4377=4384,4383,4378
<4378=4382,4379
<4379=4381,4380
<4385=4387,4386
<4388=4389
<4389=4396,4390
<4390=4392,4391
<4392=4393
<4393=4395,4394
<4397=4398
<4398=4399
<4399=4404,4403,4400
<4400=4402,4401
<4405=4406
<4406=4408,4407
<4409=4410
<4410=4412,4411
<4413=4525,4516,4513,4414
<4414=4504,4488,4479,4459,4424,4415
<4415=4416
<4416=4420,4417
<4417=4418
<4418=4419
<4420=4421
<4421=4423,4422
<4424=4439,4425
<4425=4426
<4426=4437,4427
<4427=4435,4428
<4428=4429
<4429=4431,4430
<4431=4432
<4432=4434,4433
<4435=4436
<4437=4438
<4439=4440
<4440=4458,4441
<4441=4456,4442
<4442=4449,4447,4443
<4443=4444
<4444=4446,4445
<4447=4448
<4449=4450
<4450=4452,4451
<4452=4453
<4453=4455,4454
<4456=4457
<4459=4475,4460
<4460=4461
<4461=4474,4462
<4462=4468,4463
<4463=4464
<4464=4465
<4465=4467,4466
<4468=4469
<4469=4471,4470
<4471=4473,4472
<4475=4476
<4476=4478,4477
<4479=4480
<4480=4487,4486,4481
<4481=4485,4482
<4482=4484,4483
<4488=4489
<4489=4503,4502,4490
<4490=4501,4491
<4491=4495,4492
<4492=4493
<4493=4494
<4495=4496
<4496=4498,4497
<4498=4500,4499
<4504=4505
<4505=4512,4511,4506
<4506=4510,4507
<4507=4509,4508
<4513=4515,4514
<4516=4517
<4517=4524,4518
<4518=4520,4519
<4520=4521
<4521=4523,4522
<4525=4526
<4526=4527
<4527=4532,4531,4528
<4528=4530,4529
<4533=4534
<4534=4536,4535
<4537=4538
<4538=4554,4539
<4539=4540
<4540=4541
<4541=4548,4542
<4542=4544,4543
<4544=4545
<4545=4547,4546
<4548=4550,4549
<4550=4551
<4551=4553,4552
<4554=4555
<4556=4557
<4557=4573,4558
<4558=4559
<4559=4560
<4560=4567,4561
<4561=4563,4562
<4563=4564
<4564=4566,4565
<4567=4569,4568
<4569=4570
<4570=4572,4571
<4573=4574
<4575=4576
<4576=4592,4577
<4577=4578
<4578=4579
<4579=4586,4580
<4580=4582,4581
<4582=4583
<4583=4585,4584
<4586=4588,4587
<4588=4589
<4589=4591,4590
<4592=4593
<4594=4595
<4595=4634,4596
<4596=4632,4625,4618,4611,4604,4597
<4597=4598
<4598=4600,4599
<4600=4601
<4601=4603,4602
<4604=4605
<4605=4607,4606
<4607=4608
<4608=4610,4609
<4611=4612
<4612=4614,4613
<4614=4615
<4615=4617,4616
<4618=4619
<4619=4621,4620
<4621=4622
<4622=4624,4623
<4625=4626
<4626=4628,4627
<4628=4629
<4629=4631,4630
<4632=4633
<4634=4635
<4636=4637
<4637=4653,4638
<4638=4646,4639
<4639=4640
<4640=4642,4641
<4642=4643
<4643=4645,4644
<4646=4647
<4647=4649,4648
<4649=4650
<4650=4652,4651
<4653=4654
<4655=4656
<4656=4672,4657
<4657=4665,4658
<4658=4659
<4659=4661,4660
<4661=4662
<4662=4664,4663
<4665=4666
<4666=4668,4667
<4668=4669
<4669=4671,4670
<4672=4673
<4674=4675
<4675=4691,4676
<4676=4684,4677
<4677=4678
<4678=4680,4679
<4680=4681
<4681=4683,4682
<4684=4685
<4685=4687,4686
<4687=4688
<4688=4690,4689
<4691=4692
<4693=4694
<4694=4710,4695
<4695=4703,4696
<4696=4697
<4697=4699,4698
<4699=4700
<4700=4702,4701
<4703=4704
<4704=4706,4705
<4706=4707
<4707=4709,4708
<4710=4711
<4712=4713
<4713=4725,4724,4714
<4714=4723,4715
<4715=4721,4716
<4716=4719,4717
<4717=4718
<4719=4720
<4721=4722
<4726=4727
<4727=4739,4738,4728
<4728=4737,4729
<4729=4735,4730
<4730=4733,4731
<4731=4732
<4733=4734
<4735=4736
<4740=4741
<4741=4753,4752,4742
<4742=4751,4743
<4743=4749,4744
<4744=4747,4745
<4745=4746
<4747=4748
<4749=4750
<4754=4755
<4755=4767,4766,4756
<4756=4765,4757
<4757=4763,4758
<4758=4761,4759
<4759=4760
<4761=4762
<4763=4764
<4768=4769
<4769=4781,4780,4770
<4770=4779,4771
<4771=4777,4772
<4772=4775,4773
<4773=4774
<4775=4776
<4777=4778
<4872=4881,4880,4873
<4873=4877,4874
<4874=4876,4875
<4877=4879,4878
<4881=5189,5175,5156,5137,5118,5101,5084,5072,5067,4884,4882
<4882=4883
<4884=5059,5050,5047,4885
<4885=5033,5019,4990,4964,4933,4924,4915,4908,4895,4886
<4886=4887
<4887=4893,4888
<4888=4891,4889
<4889=4890
<4891=4892
<4893=4894
<4895=4896
<4896=4906,4897
<4897=4904,4902,4900,4898
<4898=4899
<4900=4901
<4902=4903
<4904=4905
<4906=4907
<4908=4909
<4909=4913,4910
<4910=4911
<4911=4912
<4913=4914
<4915=4916
<4916=4922,4917
<4917=4920,4918
<4918=4919
<4920=4921
<4922=4923
<4924=4925
<4925=4929,4926
<4926=4927
<4927=4928
<4929=4930
<4930=4932,4931
<4933=4934
<4934=4963,4962,4935
<4935=4961,4936
<4936=4959,4937
<4937=4938
<4938=4939
<4939=4957,4940
<4940=4955,4953,4947,4941
<4941=4942
<4942=4944,4943
<4944=4946,4945
<4947=4948
<4948=4950,4949
<4950=4952,4951
<4953=4954
<4955=4956
<4957=4958
<4959=4960
<4964=4965
<4965=4988,4966
<4966=4986,4984,4967
<4967=4968
<4968=4982,4969
<4969=4976,4970
<4970=4971
<4971=4973,4972
<4973=4975,4974
<4976=4977
<4977=4979,4978
<4979=4981,4980
<4982=4983
<4984=4985
<4986=4987
<4988=4989
<4990=4991
<4991=5018,5017,4992
<4992=5016,4993
<4993=5014,4994
<4994=4997,4995
<4995=4996
<4997=4998
<4998=5012,4999
<4999=5006,5000
<5000=5001
<5001=5003,5002
<5003=5005,5004
<5006=5007
<5007=5009,5008
<5009=5011,5010
<5012=5013
<5014=5015
<5019=5020
<5020=5032,5031,5021
<5021=5030,5022
<5022=5028,5023
<5023=5024
<5024=5025
<5025=5027,5026
<5028=5029
<5033=5034
<5034=5046,5045,5035
<5035=5044,5036
<5036=5042,5037
<5037=5038
<5038=5039
<5039=5041,5040
<5042=5043
<5047=5049,5048
<5050=5051
<5051=5058,5052
<5052=5054,5053
<5054=5055
<5055=5057,5056
<5059=5060
<5060=5061
<5061=5066,5065,5062
<5062=5064,5063
<5067=5068
<5068=5071,5070,5069
<5072=5073
<5073=5083,5082,5074
<5074=5081,5075
<5075=5079,5076
<5076=5077
<5077=5078
<5079=5080
<5084=5092,5085
<5085=5086
<5086=5090,5087
<5087=5088
<5088=5089
<5090=5091
<5092=5093
<5093=5100,5094
<5094=5098,5095
<5095=5096
<5096=5097
<5098=5099
<5101=5109,5102
<5102=5103
<5103=5107,5104
<5104=5105
<5105=5106
<5107=5108
<5109=5110
<5110=5117,5111
<5111=5115,5112
<5112=5113
<5113=5114
<5115=5116
<5118=5119
<5119=5135,5120
<5120=5121
<5121=5122
<5122=5129,5123
<5123=5125,5124
<5125=5126
<5126=5128,5127
<5129=5131,5130
<5131=5132
<5132=5134,5133
<5135=5136
<5137=5138
<5138=5154,5139
<5139=5147,5140
<5140=5141
<5141=5143,5142
<5143=5144
<5144=5146,5145
<5147=5148
<5148=5150,5149
<5150=5151
<5151=5153,5152
<5154=5155
<5156=5157
<5157=5173,5158
<5158=5166,5159
<5159=5160
<5160=5162,5161
<5162=5163
<5163=5165,5164
<5166=5167
<5167=5169,5168
<5169=5170
<5170=5172,5171
<5173=5174
<5175=5176
<5176=5188,5187,5177
<5177=5186,5178
<5178=5184,5179
<5179=5182,5180
<5180=5181
<5182=5183
<5184=5185
<5189=5190
<5190=5202,5201,5191
<5191=5200,5192
<5192=5198,5193
<5193=5196,5194
<5194=5195
<5196=5197
<5198=5199
<5235=5244,5243,5236
<5236=5240,5237
<5237=5239,5238
<5240=5242,5241
<5244=5897,5891,5884,5880,5862,5842,5828,5814,5315,5306,5286,5272,5263,5256,5247,5245
<5245=5246
<5247=5248
<5248=5254,5249
<5249=5252,5250
<5250=5251
<5252=5253
<5254=5255
<5256=5257
<5257=5261,5258
<5258=5259
<5259=5260
<5261=5262
<5263=5264
<5264=5270,5265
<5265=5268,5266
<5266=5267
<5268=5269
<5270=5271
<5272=5273
<5273=5284,5274
<5274=5282,5275
<5275=5276
<5276=5278,5277
<5278=5279
<5279=5281,5280
<5282=5283
<5284=5285
<5286=5287
<5287=5302,5288
<5288=5293,5291,5289
<5289=5290
<5291=5292
<5293=5294
<5294=5296,5295
<5296=5298,5297
<5298=5299
<5299=5301,5300
<5302=5303
<5303=5305,5304
<5306=5307
<5307=5314,5313,5308
<5308=5312,5309
<5309=5311,5310
<5315=5803,5316
<5316=5794,5785,5598,5335,5326,5317
<5317=5318
<5318=5324,5319
<5319=5322,5320
<5320=5321
<5322=5323
<5324=5325
<5326=5327
<5327=5333,5328
<5328=5331,5329
<5329=5330
<5331=5332
<5333=5334
<5335=5590,5584,5581,5336
<5336=5573,5567,5564,5337
<5337=5549,5496,5338
<5338=5492,5471,5339
<5339=5340
<5340=5458,5362,5341
<5341=5342
<5342=5353,5343
<5343=5351,5344
<5344=5349,5347,5345
<5345=5346
<5347=5348
<5349=5350
<5351=5352
<5353=5359,5354
<5354=5358,5355
<5355=5357,5356
<5359=5361,5360
<5362=5450,5446,5443,5363
<5363=5378,5364
<5364=5374,5365
<5365=5370,5366
<5366=5367
<5367=5369,5368
<5370=5371
<5371=5373,5372
<5374=5375
<5375=5377,5376
<5378=5379
<5379=5442,5441,5380
<5380=5440,5381
<5381=5421,5382
<5382=5402,5383
<5383=5393,5384
<5384=5390,5385
<5385=5387,5386
<5387=5389,5388
<5390=5392,5391
<5393=5399,5394
<5394=5396,5395
<5396=5398,5397
<5399=5401,5400
<5402=5412,5403
<5403=5409,5404
<5404=5406,5405
<5406=5408,5407
<5409=5411,5410
<5412=5418,5413
<5413=5415,5414
<5415=5417,5416
<5418=5420,5419
<5421=5431,5422
<5422=5428,5423
<5423=5425,5424
<5425=5427,5426
<5428=5430,5429
<5431=5437,5432
<5432=5434,5433
<5434=5436,5435
<5437=5439,5438
<5443=5445,5444
<5446=5447
<5447=5449,5448
<5450=5451
<5451=5452
<5452=5457,5456,5453
<5453=5455,5454
<5458=5465,5459
<5459=5464,5463,5460
<5460=5462,5461
<5465=5470,5469,5466
<5466=5468,5467
<5471=5472
<5472=5483,5473
<5473=5481,5474
<5474=5479,5477,5475
<5475=5476
<5477=5478
<5479=5480
<5481=5482
<5483=5489,5484
<5484=5488,5485
<5485=5487,5486
<5489=5491,5490
<5492=5493
<5493=5495,5494
<5496=5497
<5497=5548,5547,5498
<5498=5546,5499
<5499=5531,5500
<5500=5516,5501
<5501=5509,5502
<5502=5506,5503
<5503=5505,5504
<5506=5508,5507
<5509=5513,5510
<5510=5512,5511
<5513=5515,5514
<5516=5524,5517
<5517=5521,5518
<5518=5520,5519
<5521=5523,5522
<5524=5528,5525
<5525=5527,5526
<5528=5530,5529
<5531=5539,5532
<5532=5536,5533
<5533=5535,5534
<5536=5538,5537
<5539=5543,5540
<5540=5542,5541
<5543=5545,5544
<5549=5550
<5550=5563,5562,5551
<5551=5561,5552
<5552=5558,5553
<5553=5557,5554
<5554=5556,5555
<5558=5560,5559
<5564=5566,5565
<5567=5568
<5568=5572,5569
<5569=5571,5570
<5573=5574
<5574=5575
<5575=5580,5579,5576
<5576=5578,5577
<5581=5583,5582
<5584=5585
<5585=5589,5586
<5586=5588,5587
<5590=5591
<5591=5592
<5592=5597,5596,5593
<5593=5595,5594
<5598=5777,5773,5770,5599
<5599=5759,5746,5735,5722,5711,5698,5687,5668,5649,5630,5620,5610,5600
<5600=5601
<5601=5605,5602
<5602=5604,5603
<5605=5607,5606
<5607=5609,5608
<5610=5611
<5611=5615,5612
<5612=5614,5613
<5615=5617,5616
<5617=5619,5618
<5620=5621
<5621=5625,5622
<5622=5624,5623
<5625=5627,5626
<5627=5629,5628
<5630=5631
<5631=5648,5647,5632
<5632=5646,5633
<5633=5642,5641,5634
<5634=5637,5636,5635
<5637=5638
<5638=5640,5639
<5642=5643
<5643=5645,5644
<5649=5650
<5650=5667,5666,5651
<5651=5665,5652
<5652=5661,5660,5653
<5653=5656,5655,5654
<5656=5657
<5657=5659,5658
<5661=5662
<5662=5664,5663
<5668=5669
<5669=5686,5685,5670
<5670=5684,5671
<5671=5680,5679,5672
<5672=5675,5674,5673
<5675=5676
<5676=5678,5677
<5680=5681
<5681=5683,5682
<5687=5694,5688
<5688=5689
<5689=5693,5690
<5690=5692,5691
<5694=5695
<5695=5697,5696
<5698=5699
<5699=5710,5709,5700
<5700=5708,5701
<5701=5705,5702
<5702=5704,5703
<5705=5707,5706
<5711=5718,5712
<5712=5713
<5713=5717,5714
<5714=5716,5715
<5718=5719
<5719=5721,5720
<5722=5723
<5723=5734,5733,5724
<5724=5732,5725
<5725=5729,5726
<5726=5728,5727
<5729=5731,5730
<5735=5742,5736
<5736=5737
<5737=5741,5738
<5738=5740,5739
<5742=5743
<5743=5745,5744
<5746=5747
<5747=5758,5757,5748
<5748=5756,5749
<5749=5753,5750
<5750=5752,5751
<5753=5755,5754
<5759=5760
<5760=5769,5768,5761
<5761=5767,5762
<5762=5766,5763
<5763=5765,5764
<5770=5772,5771
<5773=5774
<5774=5776,5775
<5777=5778
<5778=5779
<5779=5784,5783,5780
<5780=5782,5781
<5785=5790,5786
<5786=5787
<5787=5789,5788
<5790=5791
<5791=5793,5792
<5794=5799,5795
<5795=5796
<5796=5798,5797
<5799=5800
<5800=5802,5801
<5803=5804
<5804=5813,5805
<5805=5812,5806
<5806=5810,5807
<5807=5808
<5808=5809
<5810=5811
<5814=5815
<5815=5826,5816
<5816=5824,5817
<5817=5818
<5818=5820,5819
<5820=5821
<5821=5823,5822
<5824=5825
<5826=5827
<5828=5829
<5829=5840,5830
<5830=5838,5831
<5831=5832
<5832=5834,5833
<5834=5835
<5835=5837,5836
<5838=5839
<5840=5841
<5842=5843
<5843=5861,5860,5844
<5844=5859,5845
<5845=5857,5846
<5846=5853,5849,5847
<5847=5848
<5849=5850
<5850=5852,5851
<5853=5854
<5854=5856,5855
<5857=5858
<5862=5863
<5863=5879,5878,5864
<5864=5877,5865
<5865=5875,5866
<5866=5871,5867
<5867=5868
<5868=5870,5869
<5871=5872
<5872=5874,5873
<5875=5876
<5880=5881
<5881=5883,5882
<5884=5885
<5885=5890,5889,5886
<5886=5888,5887
<5891=5892
<5892=5894,5893
<5894=5896,5895
<5946=5955,5954,5947
<5947=5951,5948
<5948=5950,5949
<5951=5953,5952
<5955=6784,6778,6771,6764,6760,6742,6722,6708,6694,6026,6017,5997,5983,5974,5967,5958,5956
<5956=5957
<5958=5959
<5959=5965,5960
<5960=5963,5961
<5961=5962
<5963=5964
<5965=5966
<5967=5968
<5968=5972,5969
<5969=5970
<5970=5971
<5972=5973
<5974=5975
<5975=5981,5976
<5976=5979,5977
<5977=5978
<5979=5980
<5981=5982
<5983=5984
<5984=5995,5985
<5985=5993,5986
<5986=5987
<5987=5989,5988
<5989=5990
<5990=5992,5991
<5993=5994
<5995=5996
<5997=5998
<5998=6013,5999
<5999=6004,6002,6000
<6000=6001
<6002=6003
<6004=6005
<6005=6007,6006
<6007=6009,6008
<6009=6010
<6010=6012,6011
<6013=6014
<6014=6016,6015
<6017=6018
<6018=6025,6024,6019
<6019=6023,6020
<6020=6022,6021
<6026=6683,6027
<6027=6674,6665,6656,6647,6458,6048,6037,6028
<6028=6029
<6029=6035,6030
<6030=6033,6031
<6031=6032
<6033=6034
<6035=6036
<6037=6038
<6038=6046,6039
<6039=6044,6042,6040
<6040=6041
<6042=6043
<6044=6045
<6046=6047
<6048=6450,6444,6441,6049
<6049=6433,6427,6424,6050
<6050=6409,6356,6051
<6051=6352,6332,6052
<6052=6053
<6053=6319,6223,6210,6197,6186,6173,6162,6149,6138,6119,6100,6081,6054
<6054=6055
<6055=6072,6056
<6056=6070,6057
<6057=6066,6062,6058
<6058=6059
<6059=6061,6060
<6062=6063
<6063=6065,6064
<6066=6067
<6067=6069,6068
<6070=6071
<6072=6078,6073
<6073=6077,6074
<6074=6076,6075
<6078=6080,6079
<6081=6082
<6082=6099,6098,6083
<6083=6097,6084
<6084=6093,6092,6085
<6085=6088,6087,6086
<6088=6089
<6089=6091,6090
<6093=6094
<6094=6096,6095
<6100=6101
<6101=6118,6117,6102
<6102=6116,6103
<6103=6112,6111,6104
<6104=6107,6106,6105
<6107=6108
<6108=6110,6109
<6112=6113
<6113=6115,6114
<6119=6120
<6120=6137,6136,6121
<6121=6135,6122
<6122=6131,6130,6123
<6123=6126,6125,6124
<6126=6127
<6127=6129,6128
<6131=6132
<6132=6134,6133
<6138=6145,6139
<6139=6140
<6140=6144,6141
<6141=6143,6142
<6145=6146
<6146=6148,6147
<6149=6150
<6150=6161,6160,6151
<6151=6159,6152
<6152=6156,6153
<6153=6155,6154
<6156=6158,6157
<6162=6169,6163
<6163=6164
<6164=6168,6165
<6165=6167,6166
<6169=6170
<6170=6172,6171
<6173=6174
<6174=6185,6184,6175
<6175=6183,6176
<6176=6180,6177
<6177=6179,6178
<6180=6182,6181
<6186=6193,6187
<6187=6188
<6188=6192,6189
<6189=6191,6190
<6193=6194
<6194=6196,6195
<6197=6198
<6198=6209,6208,6199
<6199=6207,6200
<6200=6204,6201
<6201=6203,6202
<6204=6206,6205
<6210=6211
<6211=6222,6221,6212
<6212=6220,6213
<6213=6219,6214
<6214=6216,6215
<6216=6218,6217
<6223=6311,6307,6304,6224
<6224=6239,6225
<6225=6235,6226
<6226=6231,6227
<6227=6228
<6228=6230,6229
<6231=6232
<6232=6234,6233
<6235=6236
<6236=6238,6237
<6239=6240
<6240=6303,6302,6241
<6241=6301,6242
<6242=6282,6243
<6243=6263,6244
<6244=6254,6245
<6245=6251,6246
<6246=6248,6247
<6248=6250,6249
<6251=6253,6252
<6254=6260,6255
<6255=6257,6256
<6257=6259,6258
<6260=6262,6261
<6263=6273,6264
<6264=6270,6265
<6265=6267,6266
<6267=6269,6268
<6270=6272,6271
<6273=6279,6274
<6274=6276,6275
<6276=6278,6277
<6279=6281,6280
<6282=6292,6283
<6283=6289,6284
<6284=6286,6285
<6286=6288,6287
<6289=6291,6290
<6292=6298,6293
<6293=6295,6294
<6295=6297,6296
<6298=6300,6299
<6304=6306,6305
<6307=6308
<6308=6310,6309
<6311=6312
<6312=6313
<6313=6318,6317,6314
<6314=6316,6315
<6319=6326,6320
<6320=6325,6324,6321
<6321=6323,6322
<6326=6331,6330,6327
<6327=6329,6328
<6332=6333
<6333=6343,6334
<6334=6340,6335
<6335=6339,6336
<6336=6338,6337
<6340=6342,6341
<6343=6349,6344
<6344=6348,6345
<6345=6347,6346
<6349=6351,6350
<6352=6353
<6353=6355,6354
<6356=6357
<6357=6408,6407,6358
<6358=6406,6359
<6359=6391,6360
<6360=6376,6361
<6361=6369,6362
<6362=6366,6363
<6363=6365,6364
<6366=6368,6367
<6369=6373,6370
<6370=6372,6371
<6373=6375,6374
<6376=6384,6377
<6377=6381,6378
<6378=6380,6379
<6381=6383,6382
<6384=6388,6385
<6385=6387,6386
<6388=6390,6389
<6391=6399,6392
<6392=6396,6393
<6393=6395,6394
<6396=6398,6397
<6399=6403,6400
<6400=6402,6401
<6403=6405,6404
<6409=6410
<6410=6423,6422,6411
<6411=6421,6412
<6412=6418,6413
<6413=6417,6414
<6414=6416,6415
<6418=6420,6419
<6424=6426,6425
<6427=6428
<6428=6432,6429
<6429=6431,6430
<6433=6434
<6434=6435
<6435=6440,6439,6436
<6436=6438,6437
<6441=6443,6442
<6444=6445
<6445=6449,6446
<6446=6448,6447
<6450=6451
<6451=6452
<6452=6457,6456,6453
<6453=6455,6454
<6458=6639,6635,6632,6459
<6459=6619,6606,6595,6582,6571,6558,6547,6528,6509,6490,6480,6470,6460
<6460=6461
<6461=6465,6462
<6462=6464,6463
<6465=6467,6466
<6467=6469,6468
<6470=6471
<6471=6475,6472
<6472=6474,6473
<6475=6477,6476
<6477=6479,6478
<6480=6481
<6481=6485,6482
<6482=6484,6483
<6485=6487,6486
<6487=6489,6488
<6490=6491
<6491=6508,6507,6492
<6492=6506,6493
<6493=6502,6501,6494
<6494=6497,6496,6495
<6497=6498
<6498=6500,6499
<6502=6503
<6503=6505,6504
<6509=6510
<6510=6527,6526,6511
<6511=6525,6512
<6512=6521,6520,6513
<6513=6516,6515,6514
<6516=6517
<6517=6519,6518
<6521=6522
<6522=6524,6523
<6528=6529
<6529=6546,6545,6530
<6530=6544,6531
<6531=6540,6539,6532
<6532=6535,6534,6533
<6535=6536
<6536=6538,6537
<6540=6541
<6541=6543,6542
<6547=6554,6548
<6548=6549
<6549=6553,6550
<6550=6552,6551
<6554=6555
<6555=6557,6556
<6558=6559
<6559=6570,6569,6560
<6560=6568,6561
<6561=6565,6562
<6562=6564,6563
<6565=6567,6566
<6571=6578,6572
<6572=6573
<6573=6577,6574
<6574=6576,6575
<6578=6579
<6579=6581,6580
<6582=6583
<6583=6594,6593,6584
<6584=6592,6585
<6585=6589,6586
<6586=6588,6587
<6589=6591,6590
<6595=6602,6596
<6596=6597
<6597=6601,6598
<6598=6600,6599
<6602=6603
<6603=6605,6604
<6606=6607
<6607=6618,6617,6608
<6608=6616,6609
<6609=6613,6610
<6610=6612,6611
<6613=6615,6614
<6619=6620
<6620=6631,6630,6621
<6621=6629,6622
<6622=6628,6623
<6623=6625,6624
<6625=6627,6626
<6632=6634,6633
<6635=6636
<6636=6638,6637
<6639=6640
<6640=6641
<6641=6646,6645,6642
<6642=6644,6643
<6647=6652,6648
<6648=6649
<6649=6651,6650
<6652=6653
<6653=6655,6654
<6656=6661,6657
<6657=6658
<6658=6660,6659
<6661=6662
<6662=6664,6663
<6665=6670,6666
<6666=6667
<6667=6669,6668
<6670=6671
<6671=6673,6672
<6674=6679,6675
<6675=6676
<6676=6678,6677
<6679=6680
<6680=6682,6681
<6683=6684
<6684=6693,6685
<6685=6692,6686
<6686=6690,6687
<6687=6688
<6688=6689
<6690=6691
<6694=6695
<6695=6706,6696
<6696=6704,6697
<6697=6698
<6698=6700,6699
<6700=6701
<6701=6703,6702
<6704=6705
<6706=6707
<6708=6709
<6709=6720,6710
<6710=6718,6711
<6711=6712
<6712=6714,6713
<6714=6715
<6715=6717,6716
<6718=6719
<6720=6721
<6722=6723
<6723=6741,6740,6724
<6724=6739,6725
<6725=6737,6726
<6726=6733,6729,6727
<6727=6728
<6729=6730
<6730=6732,6731
<6733=6734
<6734=6736,6735
<6737=6738
<6742=6743
<6743=6759,6758,6744
<6744=6757,6745
<6745=6755,6746
<6746=6751,6747
<6747=6748
<6748=6750,6749
<6751=6752
<6752=6754,6753
<6755=6756
<6760=6761
<6761=6763,6762
<6764=6765
<6765=6770,6769,6766
<6766=6768,6767
<6771=6772
<6772=6777,6776,6773
<6773=6775,6774
<6778=6779
<6779=6781,6780
<6781=6783,6782
<6834=6843,6842,6835
<6835=6839,6836
<6836=6838,6837
<6839=6841,6840
<6843=7292,7276,7272,7257,7237,7223,7209,7195,7188,7184,7175,6855,6846,6844
<6844=6845
<6846=6847
<6847=6853,6848
<6848=6851,6849
<6849=6850
<6851=6852
<6853=6854
<6855=7164,6856
<6856=7155,7146,6875,6866,6857
<6857=6858
<6858=6864,6859
<6859=6862,6860
<6860=6861
<6862=6863
<6864=6865
<6866=6867
<6867=6873,6868
<6868=6871,6869
<6869=6870
<6871=6872
<6873=6874
<6875=7138,7132,7129,6876
<6876=7121,7115,7112,6877
<6877=7095,6878
<6878=7091,7046,6879
<6879=6880
<6880=7037,7024,7013,7000,6989,6976,6965,6946,6927,6908,6881
<6881=6882
<6882=6899,6883
<6883=6897,6884
<6884=6893,6889,6885
<6885=6886
<6886=6888,6887
<6889=6890
<6890=6892,6891
<6893=6894
<6894=6896,6895
<6897=6898
<6899=6905,6900
<6900=6904,6901
<6901=6903,6902
<6905=6907,6906
<6908=6909
<6909=6926,6925,6910
<6910=6924,6911
<6911=6920,6919,6912
<6912=6915,6914,6913
<6915=6916
<6916=6918,6917
<6920=6921
<6921=6923,6922
<6927=6928
<6928=6945,6944,6929
<6929=6943,6930
<6930=6939,6938,6931
<6931=6934,6933,6932
<6934=6935
<6935=6937,6936
<6939=6940
<6940=6942,6941
<6946=6947
<6947=6964,6963,6948
<6948=6962,6949
<6949=6958,6957,6950
<6950=6953,6952,6951
<6953=6954
<6954=6956,6955
<6958=6959
<6959=6961,6960
<6965=6972,6966
<6966=6967
<6967=6971,6968
<6968=6970,6969
<6972=6973
<6973=6975,6974
<6976=6977
<6977=6988,6987,6978
<6978=6986,6979
<6979=6983,6980
<6980=6982,6981
<6983=6985,6984
<6989=6996,6990
<6990=6991
<6991=6995,6992
<6992=6994,6993
<6996=6997
<6997=6999,6998
<7000=7001
<7001=7012,7011,7002
<7002=7010,7003
<7003=7007,7004
<7004=7006,7005
<7007=7009,7008
<7013=7020,7014
<7014=7015
<7015=7019,7016
<7016=7018,7017
<7020=7021
<7021=7023,7022
<7024=7025
<7025=7036,7035,7026
<7026=7034,7027
<7027=7031,7028
<7028=7030,7029
<7031=7033,7032
<7037=7038
<7038=7045,7044,7039
<7039=7043,7040
<7040=7042,7041
<7046=7047
<7047=7082,7048
<7048=7080,7049
<7049=7070,7060,7050
<7050=7051
<7051=7057,7052
<7052=7056,7053
<7053=7055,7054
<7057=7059,7058
<7060=7061
<7061=7067,7062
<7062=7066,7063
<7063=7065,7064
<7067=7069,7068
<7070=7071
<7071=7077,7072
<7072=7076,7073
<7073=7075,7074
<7077=7079,7078
<7080=7081
<7082=7088,7083
<7083=7087,7084
<7084=7086,7085
<7088=7090,7089
<7091=7092
<7092=7094,7093
<7095=7096
<7096=7111,7110,7097
<7097=7109,7098
<7098=7104,7099
<7099=7103,7100
<7100=7102,7101
<7104=7108,7105
<7105=7107,7106
<7112=7114,7113
<7115=7116
<7116=7120,7117
<7117=7119,7118
<7121=7122
<7122=7123
<7123=7128,7127,7124
<7124=7126,7125
<7129=7131,7130
<7132=7133
<7133=7137,7134
<7134=7136,7135
<7138=7139
<7139=7140
<7140=7145,7144,7141
<7141=7143,7142
<7146=7151,7147
<7147=7148
<7148=7150,7149
<7151=7152
<7152=7154,7153
<7155=7160,7156
<7156=7157
<7157=7159,7158
<7160=7161
<7161=7163,7162
<7164=7165
<7165=7174,7166
<7166=7173,7167
<7167=7171,7168
<7168=7169
<7169=7170
<7171=7172
<7175=7176
<7176=7182,7177
<7177=7180,7178
<7178=7179
<7180=7181
<7182=7183
<7184=7185
<7185=7187,7186
<7188=7189
<7189=7194,7193,7190
<7190=7192,7191
<7195=7196
<7196=7207,7197
<7197=7205,7198
<7198=7199
<7199=7201,7200
<7201=7202
<7202=7204,7203
<7205=7206
<7207=7208
<7209=7210
<7210=7221,7211
<7211=7219,7212
<7212=7213
<7213=7215,7214
<7215=7216
<7216=7218,7217
<7219=7220
<7221=7222
<7223=7224
<7224=7235,7225
<7225=7233,7226
<7226=7227
<7227=7229,7228
<7229=7230
<7230=7232,7231
<7233=7234
<7235=7236
<7237=7238
<7238=7256,7255,7239
<7239=7254,7240
<7240=7252,7241
<7241=7248,7244,7242
<7242=7243
<7244=7245
<7245=7247,7246
<7248=7249
<7249=7251,7250
<7252=7253
<7257=7258
<7258=7268,7259
<7259=7266,7264,7260
<7260=7261
<7261=7263,7262
<7264=7265
<7266=7267
<7268=7269
<7269=7271,7270
<7272=7273
<7273=7275,7274
<7276=7277
<7277=7291,7290,7278
<7278=7289,7279
<7279=7287,7280
<7280=7283,7281
<7281=7282
<7283=7284
<7284=7286,7285
<7287=7288
<7292=7293
<7293=7307,7306,7294
<7294=7305,7295
<7295=7303,7296
<7296=7299,7297
<7297=7298
<7299=7300
<7300=7302,7301
<7303=7304
<7346=7355,7354,7347
<7347=7351,7348
<7348=7350,7349
<7351=7353,7352
<7355=7684,7670,7661,7654,7426,7417,7397,7383,7374,7367,7358,7356
<7356=7357
<7358=7359
<7359=7365,7360
<7360=7363,7361
<7361=7362
<7363=7364
<7365=7366
<7367=7368
<7368=7372,7369
<7369=7370
<7370=7371
<7372=7373
<7374=7375
<7375=7381,7376
<7376=7379,7377
<7377=7378
<7379=7380
<7381=7382
<7383=7384
<7384=7395,7385
<7385=7393,7386
<7386=7387
<7387=7389,7388
<7389=7390
<7390=7392,7391
<7393=7394
<7395=7396
<7397=7398
<7398=7413,7399
<7399=7404,7402,7400
<7400=7401
<7402=7403
<7404=7405
<7405=7407,7406
<7407=7409,7408
<7409=7410
<7410=7412,7411
<7413=7414
<7414=7416,7415
<7417=7418
<7418=7425,7424,7419
<7419=7423,7420
<7420=7422,7421
<7426=7646,7638,7635,7427
<7427=7627,7619,7616,7428
<7428=7601,7583,7564,7557,7461,7429
<7429=7457,7430
<7430=7431
<7431=7448,7432
<7432=7446,7433
<7433=7442,7438,7434
<7434=7435
<7435=7437,7436
<7438=7439
<7439=7441,7440
<7442=7443
<7443=7445,7444
<7446=7447
<7448=7454,7449
<7449=7453,7450
<7450=7452,7451
<7454=7456,7455
<7457=7458
<7458=7460,7459
<7461=7547,7543,7540,7462
<7462=7530,7526,7523,7463
<7463=7504,7486,7480,7474,7468,7464
<7464=7465
<7465=7467,7466
<7468=7469
<7469=7473,7470
<7470=7472,7471
<7474=7475
<7475=7479,7476
<7476=7478,7477
<7480=7481
<7481=7485,7482
<7482=7484,7483
<7486=7488,7487
<7488=7489
<7489=7497,7490
<7490=7494,7491
<7491=7493,7492
<7494=7496,7495
<7497=7501,7498
<7498=7500,7499
<7501=7503,7502
<7504=7505
<7505=7522,7521,7506
<7506=7520,7507
<7507=7517,7508
<7508=7516,7509
<7509=7513,7510
<7510=7512,7511
<7513=7515,7514
<7517=7519,7518
<7523=7525,7524
<7526=7527
<7527=7529,7528
<7530=7531
<7531=7532
<7532=7539,7538,7533
<7533=7537,7534
<7534=7536,7535
<7540=7542,7541
<7543=7544
<7544=7546,7545
<7547=7548
<7548=7549
<7549=7556,7555,7550
<7550=7554,7551
<7551=7553,7552
<7557=7558
<7558=7563,7562,7559
<7559=7561,7560
<7564=7577,7571,7565
<7565=7570,7569,7566
<7566=7568,7567
<7571=7576,7575,7572
<7572=7574,7573
<7577=7582,7581,7578
<7578=7580,7579
<7583=7585,7584
<7585=7586
<7586=7594,7587
<7587=7591,7588
<7588=7590,7589
<7591=7593,7592
<7594=7598,7595
<7595=7597,7596
<7598=7600,7599
<7601=7602
<7602=7615,7614,7603
<7603=7613,7604
<7604=7610,7605
<7605=7609,7606
<7606=7608,7607
<7610=7612,7611
<7616=7618,7617
<7619=7620
<7620=7626,7621
<7621=7623,7622
<7623=7625,7624
<7627=7628
<7628=7629
<7629=7634,7633,7630
<7630=7632,7631
<7635=7637,7636
<7638=7639
<7639=7645,7640
<7640=7642,7641
<7642=7644,7643
<7646=7647
<7647=7648
<7648=7653,7652,7649
<7649=7651,7650
<7654=7655
<7655=7659,7656
<7656=7657
<7657=7658
<7659=7660
<7661=7662
<7662=7668,7663
<7663=7666,7664
<7664=7665
<7666=7667
<7668=7669
<7670=7671
<7671=7683,7682,7672
<7672=7681,7673
<7673=7679,7674
<7674=7675
<7675=7676
<7676=7678,7677
<7679=7680
<7684=7685
<7685=7697,7696,7686
<7686=7695,7687
<7687=7693,7688
<7688=7689
<7689=7690
<7690=7692,7691
<7693=7694
<7728=7737,7736,7729
<7729=7733,7730
<7730=7732,7731
<7733=7735,7734
<7737=8020,8013,8009,8000,7749,7740,7738
<7738=7739
<7740=7741
<7741=7747,7742
<7742=7745,7743
<7743=7744
<7745=7746
<7747=7748
<7749=7989,7750
<7750=7980,7971,7767,7758,7751
<7751=7752
<7752=7756,7753
<7753=7754
<7754=7755
<7756=7757
<7758=7759
<7759=7765,7760
<7760=7763,7761
<7761=7762
<7763=7764
<7765=7766
<7767=7963,7957,7954,7768
<7768=7946,7940,7937,7769
<7769=7926,7913,7902,7889,7878,7865,7854,7835,7816,7797,7770
<7770=7771
<7771=7788,7772
<7772=7786,7773
<7773=7782,7778,7774
<7774=7775
<7775=7777,7776
<7778=7779
<7779=7781,7780
<7782=7783
<7783=7785,7784
<7786=7787
<7788=7794,7789
<7789=7793,7790
<7790=7792,7791
<7794=7796,7795
<7797=7798
<7798=7815,7814,7799
<7799=7813,7800
<7800=7809,7808,7801
<7801=7804,7803,7802
<7804=7805
<7805=7807,7806
<7809=7810
<7810=7812,7811
<7816=7817
<7817=7834,7833,7818
<7818=7832,7819
<7819=7828,7827,7820
<7820=7823,7822,7821
<7823=7824
<7824=7826,7825
<7828=7829
<7829=7831,7830
<7835=7836
<7836=7853,7852,7837
<7837=7851,7838
<7838=7847,7846,7839
<7839=7842,7841,7840
<7842=7843
<7843=7845,7844
<7847=7848
<7848=7850,7849
<7854=7861,7855
<7855=7856
<7856=7860,7857
<7857=7859,7858
<7861=7862
<7862=7864,7863
<7865=7866
<7866=7877,7876,7867
<7867=7875,7868
<7868=7872,7869
<7869=7871,7870
<7872=7874,7873
<7878=7885,7879
<7879=7880
<7880=7884,7881
<7881=7883,7882
<7885=7886
<7886=7888,7887
<7889=7890
<7890=7901,7900,7891
<7891=7899,7892
<7892=7896,7893
<7893=7895,7894
<7896=7898,7897
<7902=7909,7903
<7903=7904
<7904=7908,7905
<7905=7907,7906
<7909=7910
<7910=7912,7911
<7913=7914
<7914=7925,7924,7915
<7915=7923,7916
<7916=7920,7917
<7917=7919,7918
<7920=7922,7921
<7926=7927
<7927=7936,7935,7928
<7928=7934,7929
<7929=7933,7930
<7930=7932,7931
<7937=7939,7938
<7940=7941
<7941=7945,7942
<7942=7944,7943
<7946=7947
<7947=7948
<7948=7953,7952,7949
<7949=7951,7950
<7954=7956,7955
<7957=7958
<7958=7962,7959
<7959=7961,7960
<7963=7964
<7964=7965
<7965=7970,7969,7966
<7966=7968,7967
<7971=7976,7972
<7972=7973
<7973=7975,7974
<7976=7977
<7977=7979,7978
<7980=7985,7981
<7981=7982
<7982=7984,7983
<7985=7986
<7986=7988,7987
<7989=7990
<7990=7999,7991
<7991=7998,7992
<7992=7996,7993
<7993=7994
<7994=7995
<7996=7997
<8000=8001
<8001=8007,8002
<8002=8005,8003
<8003=8004
<8005=8006
<8007=8008
<8009=8010
<8010=8012,8011
<8013=8014
<8014=8019,8018,8015
<8015=8017,8016
<8020=8021
<8021=8035,8034,8022
<8022=8033,8023
<8023=8031,8024
<8024=8029,8027,8025
<8025=8026
<8027=8028
<8029=8030
<8031=8032
<8060=8069,8068,8061
<8061=8065,8062
<8062=8064,8063
<8065=8067,8066
<8069=8361,8070
<8070=8345,8334,8327,8320,8071
<8071=8312,8303,8300,8072
<8072=8284,8255,8239,8084,8073
<8073=8074
<8074=8082,8075
<8075=8078,8076
<8076=8077
<8078=8079
<8079=8081,8080
<8082=8083
<8084=8231,8223,8220,8085
<8085=8212,8204,8201,8086
<8086=8188,8107,8087
<8087=8088
<8088=8098,8089
<8089=8094,8093,8090
<8090=8092,8091
<8094=8095
<8095=8097,8096
<8098=8104,8099
<8099=8103,8100
<8100=8102,8101
<8104=8106,8105
<8107=8180,8176,8173,8108
<8108=8165,8161,8158,8109
<8109=8135,8110
<8110=8122,8111
<8111=8116,8112
<8112=8113
<8113=8115,8114
<8116=8117
<8117=8121,8118
<8118=8120,8119
<8122=8123
<8123=8132,8124
<8124=8131,8125
<8125=8129,8126
<8126=8127
<8127=8128
<8129=8130
<8132=8134,8133
<8135=8136
<8136=8157,8156,8137
<8137=8155,8138
<8138=8152,8139
<8139=8151,8140
<8140=8146,8141
<8141=8143,8142
<8143=8145,8144
<8146=8148,8147
<8148=8150,8149
<8152=8154,8153
<8158=8160,8159
<8161=8162
<8162=8164,8163
<8165=8166
<8166=8167
<8167=8172,8171,8168
<8168=8170,8169
<8173=8175,8174
<8176=8177
<8177=8179,8178
<8180=8181
<8181=8182
<8182=8187,8186,8183
<8183=8185,8184
<8188=8195,8189
<8189=8194,8193,8190
<8190=8192,8191
<8195=8200,8199,8196
<8196=8198,8197
<8201=8203,8202
<8204=8205
<8205=8211,8206
<8206=8208,8207
<8208=8210,8209
<8212=8213
<8213=8214
<8214=8219,8218,8215
<8215=8217,8216
<8220=8222,8221
<8223=8224
<8224=8230,8225
<8225=8227,8226
<8227=8229,8228
<8231=8232
<8232=8233
<8233=8238,8237,8234
<8234=8236,8235
<8239=8240
<8240=8253,8241
<8241=8251,8244,8242
<8242=8243
<8244=8245
<8245=8247,8246
<8247=8248
<8248=8250,8249
<8251=8252
<8253=8254
<8255=8256
<8256=8283,8282,8257
<8257=8281,8258
<8258=8279,8259
<8259=8273,8267,8260
<8260=8261
<8261=8263,8262
<8263=8264
<8264=8266,8265
<8267=8268
<8268=8270,8269
<8270=8272,8271
<8273=8274
<8274=8276,8275
<8276=8278,8277
<8279=8280
<8284=8285
<8285=8299,8298,8286
<8286=8297,8287
<8287=8295,8288
<8288=8291,8289
<8289=8290
<8291=8292
<8292=8294,8293
<8295=8296
<8300=8302,8301
<8303=8304
<8304=8311,8305
<8305=8307,8306
<8307=8308
<8308=8310,8309
<8312=8313
<8313=8314
<8314=8319,8318,8315
<8315=8317,8316
<8320=8321
<8321=8326,8325,8322
<8322=8324,8323
<8327=8328
<8328=8333,8332,8329
<8329=8331,8330
<8334=8335
<8335=8344,8343,8336
<8336=8342,8337
<8337=8339,8338
<8339=8341,8340
<8345=8346
<8346=8360,8359,8347
<8347=8358,8348
<8348=8356,8349
<8349=8352,8350
<8350=8351
<8352=8353
<8353=8355,8354
<8356=8357
<8361=8652,8641,8634,8627,8362
<8362=8619,8610,8607,8363
<8363=8591,8562,8546,8375,8364
<8364=8365
<8365=8373,8366
<8366=8369,8367
<8367=8368
<8369=8370
<8370=8372,8371
<8373=8374
<8375=8538,8530,8527,8376
<8376=8519,8511,8508,8377
<8377=8483,8405,8378
<8378=8379
<8379=8396,8380
<8380=8394,8381
<8381=8390,8386,8382
<8382=8383
<8383=8385,8384
<8386=8387
<8387=8389,8388
<8390=8391
<8391=8393,8392
<8394=8395
<8396=8402,8397
<8397=8401,8398
<8398=8400,8399
<8402=8404,8403
<8405=8475,8471,8468,8406
<8406=8460,8456,8453,8407
<8407=8430,8424,8418,8412,8408
<8408=8409
<8409=8411,8410
<8412=8413
<8413=8417,8414
<8414=8416,8415
<8418=8419
<8419=8423,8420
<8420=8422,8421
<8424=8425
<8425=8429,8426
<8426=8428,8427
<8430=8431
<8431=8452,8451,8432
<8432=8450,8433
<8433=8447,8434
<8434=8446,8435
<8435=8441,8436
<8436=8438,8437
<8438=8440,8439
<8441=8443,8442
<8443=8445,8444
<8447=8449,8448
<8453=8455,8454
<8456=8457
<8457=8459,8458
<8460=8461
<8461=8462
<8462=8467,8466,8463
<8463=8465,8464
<8468=8470,8469
<8471=8472
<8472=8474,8473
<8475=8476
<8476=8477
<8477=8482,8481,8478
<8478=8480,8479
<8483=8502,8496,8490,8484
<8484=8489,8488,8485
<8485=8487,8486
<8490=8495,8494,8491
<8491=8493,8492
<8496=8501,8500,8497
<8497=8499,8498
<8502=8507,8506,8503
<8503=8505,8504
<8508=8510,8509
<8511=8512
<8512=8518,8513
<8513=8515,8514
<8515=8517,8516
<8519=8520
<8520=8521
<8521=8526,8525,8522
<8522=8524,8523
<8527=8529,8528
<8530=8531
<8531=8537,8532
<8532=8534,8533
<8534=8536,8535
<8538=8539
<8539=8540
<8540=8545,8544,8541
<8541=8543,8542
<8546=8547
<8547=8560,8548
<8548=8558,8551,8549
<8549=8550
<8551=8552
<8552=8554,8553
<8554=8555
<8555=8557,8556
<8558=8559
<8560=8561
<8562=8563
<8563=8590,8589,8564
<8564=8588,8565
<8565=8586,8566
<8566=8580,8574,8567
<8567=8568
<8568=8570,8569
<8570=8571
<8571=8573,8572
<8574=8575
<8575=8577,8576
<8577=8579,8578
<8580=8581
<8581=8583,8582
<8583=8585,8584
<8586=8587
<8591=8592
<8592=8606,8605,8593
<8593=8604,8594
<8594=8602,8595
<8595=8598,8596
<8596=8597
<8598=8599
<8599=8601,8600
<8602=8603
<8607=8609,8608
<8610=8611
<8611=8618,8612
<8612=8614,8613
<8614=8615
<8615=8617,8616
<8619=8620
<8620=8621
<8621=8626,8625,8622
<8622=8624,8623
<8627=8628
<8628=8633,8632,8629
<8629=8631,8630
<8634=8635
<8635=8640,8639,8636
<8636=8638,8637
<8641=8642
<8642=8651,8650,8643
<8643=8649,8644
<8644=8646,8645
<8646=8648,8647
<8652=8653
<8653=8667,8666,8654
<8654=8665,8655
<8655=8663,8656
<8656=8659,8657
<8657=8658
<8659=8660
<8660=8662,8661
<8663=8664
<8708=8717,8716,8709
<8709=8713,8710
<8710=8712,8711
<8713=8715,8714
<8717=8718
<8718=8719
<8719=8725,8720
<8720=8723,8721
<8721=8722
<8723=8724
<8725=8726
