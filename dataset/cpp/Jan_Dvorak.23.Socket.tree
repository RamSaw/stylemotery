>3	FunctionDef	Socket 
>4	ParameterList	 
>5	ReturnType	include < iostream >
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	memset ( & m_address , 0 , sizeof ( m_address ) )
>9	ArgumentList	& m_address
>10	Argument	sizeof ( m_address )
>11	SizeofExpr	sizeof ( m_address )
>12	SizeofOperand	m_address
>13	Sizeof	sizeof
>14	Argument	0
>15	PrimaryExpression	0
>16	Argument	& m_address
>17	UnaryOp	& m_address
>18	Identifier	m_address
>19	UnaryOperator	&
>20	Callee	memset
>21	Identifier	memset
>22	ExpressionStatement	 
>23	AssignmentExpr	m_socket = - 1
>24	UnaryOp	- 1
>25	PrimaryExpression	1
>26	UnaryOperator	-
>27	Identifier	m_socket
>33	FunctionDef	Socket 
>34	ParameterList	 
>35	CompoundStatement	 
>36	IfStatement	if ( m_socket >= 0 )
>37	CompoundStatement	 
>38	ExpressionStatement	 
>39	CallExpression	close ( m_socket )
>40	ArgumentList	m_socket
>41	Argument	m_socket
>42	Identifier	m_socket
>43	Callee	close
>44	Identifier	close
>45	Statement	 
>46	Condition	 
>47	RelationalExpression	m_socket >= 0
>48	PrimaryExpression	0
>49	Identifier	m_socket
>54	FunctionDef	Socket 
>55	ParameterList	 
>56	ReturnType	bool
>57	CompoundStatement	 
>58	ReturnStatement	 
>59	Identifier	true
>60	IfStatement	if ( setsockopt ( m_socket , SOL_SOCKET , SO_REUSEADDR , ( const char * ) & one , sizeof ( one ) ) == - 1 )
>61	ReturnStatement	 
>62	Identifier	false
>63	Condition	 
>64	EqualityExpression	setsockopt ( m_socket , SOL_SOCKET , SO_REUSEADDR , ( const char * ) & one , sizeof ( one ) ) == - 1
>65	UnaryOp	- 1
>66	PrimaryExpression	1
>67	UnaryOperator	-
>68	CallExpression	setsockopt ( m_socket , SOL_SOCKET , SO_REUSEADDR , ( const char * ) & one , sizeof ( one ) )
>69	ArgumentList	m_socket
>70	Argument	sizeof ( one )
>71	SizeofExpr	sizeof ( one )
>72	SizeofOperand	one
>73	Sizeof	sizeof
>74	Argument	( const char * ) & one
>75	CastExpression	( const char * ) & one
>76	UnaryOp	& one
>77	Identifier	one
>78	UnaryOperator	&
>79	CastTarget	const char *
>80	Argument	SO_REUSEADDR
>81	Identifier	SO_REUSEADDR
>82	Argument	SOL_SOCKET
>83	Identifier	SOL_SOCKET
>84	Argument	m_socket
>85	Identifier	m_socket
>86	Callee	setsockopt
>87	Identifier	setsockopt
>88	IdentifierDeclStatement	 
>89	IdentifierDecl	one = 1
>90	AssignmentExpr	one = 1
>91	PrimaryExpression	1
>92	Identifier	one
>93	Identifier	one
>94	IdentifierDeclType	int
>95	IfStatement	if ( ( m_socket = socket ( AF_INET , SOCK_STREAM , 0 ) ) == - 1 )
>96	ReturnStatement	 
>97	Identifier	false
>98	Condition	 
>99	EqualityExpression	( m_socket = socket ( AF_INET , SOCK_STREAM , 0 ) ) == - 1
>100	UnaryOp	- 1
>101	PrimaryExpression	1
>102	UnaryOperator	-
>103	AssignmentExpr	m_socket = socket ( AF_INET , SOCK_STREAM , 0 )
>104	CallExpression	socket ( AF_INET , SOCK_STREAM , 0 )
>105	ArgumentList	AF_INET
>106	Argument	0
>107	PrimaryExpression	0
>108	Argument	SOCK_STREAM
>109	Identifier	SOCK_STREAM
>110	Argument	AF_INET
>111	Identifier	AF_INET
>112	Callee	socket
>113	Identifier	socket
>114	Identifier	m_socket
>129	FunctionDef	Socket 
>130	ParameterList	const int port
>131	Parameter	 
>132	Identifier	port
>133	ParameterType	const int
>134	ReturnType	bool
>135	CompoundStatement	 
>136	ReturnStatement	 
>137	Identifier	true
>138	ReturnStatement	 
>139	Identifier	false
>140	Statement	 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	ExpressionStatement	 
>165	AssignmentExpr	m_address . sin_port = htons ( port )
>166	CallExpression	htons ( port )
>167	ArgumentList	port
>168	Argument	port
>169	Identifier	port
>170	Callee	htons
>171	Identifier	htons
>172	MemberAccess	m_address . sin_port
>173	Identifier	sin_port
>174	Identifier	m_address
>175	ExpressionStatement	 
>176	AssignmentExpr	m_address . sin_addr . s_addr = INADDR_ANY
>177	Identifier	INADDR_ANY
>178	MemberAccess	m_address . sin_addr . s_addr
>179	Identifier	s_addr
>180	MemberAccess	m_address . sin_addr
>181	Identifier	sin_addr
>182	Identifier	m_address
>183	ExpressionStatement	 
>184	AssignmentExpr	m_address . sin_family = AF_INET
>185	Identifier	AF_INET
>186	MemberAccess	m_address . sin_family
>187	Identifier	sin_family
>188	Identifier	m_address
>189	IfStatement	if ( m_socket == - 1 )
>190	ReturnStatement	 
>191	Identifier	false
>192	Condition	 
>193	EqualityExpression	m_socket == - 1
>194	UnaryOp	- 1
>195	PrimaryExpression	1
>196	UnaryOperator	-
>197	Identifier	m_socket
>213	FunctionDef	Socket 
>214	ParameterList	 
>215	ReturnType	bool
>216	CompoundStatement	 
>217	ReturnStatement	 
>218	Identifier	true
>219	ReturnStatement	 
>220	Identifier	false
>221	Statement	 
>222	Statement	 
>223	Statement	 
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	IfStatement	if ( m_socket == - 1 )
>235	ReturnStatement	 
>236	Identifier	false
>237	Condition	 
>238	EqualityExpression	m_socket == - 1
>239	UnaryOp	- 1
>240	PrimaryExpression	1
>241	UnaryOperator	-
>242	Identifier	m_socket
>249	FunctionDef	Socket 
>250	ParameterList	Socket & peer
>251	Parameter	 
>252	Identifier	peer
>253	ParameterType	Socket &
>254	ReturnType	bool
>255	CompoundStatement	 
>256	ReturnStatement	 
>257	Identifier	true
>258	IfStatement	if ( peer . m_socket < 0 )
>259	ReturnStatement	 
>260	Identifier	false
>261	Condition	 
>262	RelationalExpression	peer . m_socket < 0
>263	PrimaryExpression	0
>264	MemberAccess	peer . m_socket
>265	Identifier	m_socket
>266	Identifier	peer
>267	ExpressionStatement	 
>268	CallExpression	accept ( m_socket , ( sockaddr * ) & m_address , ( socklen_t * ) & addr_len )
>269	ArgumentList	m_socket
>270	Argument	( socklen_t * ) & addr_len
>271	CastExpression	( socklen_t * ) & addr_len
>272	UnaryOp	& addr_len
>273	Identifier	addr_len
>274	UnaryOperator	&
>275	CastTarget	socklen_t *
>276	Argument	( sockaddr * ) & m_address
>277	CastExpression	( sockaddr * ) & m_address
>278	UnaryOp	& m_address
>279	Identifier	m_address
>280	UnaryOperator	&
>281	CastTarget	sockaddr *
>282	Argument	m_socket
>283	Identifier	m_socket
>284	Callee	accept
>285	Identifier	accept
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	IdentifierDeclStatement	 
>292	IdentifierDecl	addr_len = sizeof ( m_address )
>293	AssignmentExpr	addr_len = sizeof ( m_address )
>294	SizeofExpr	sizeof ( m_address )
>295	SizeofOperand	m_address
>296	Sizeof	sizeof
>297	Identifier	addr_len
>298	Identifier	addr_len
>299	IdentifierDeclType	int
>311	FunctionDef	Socket 
>312	ParameterList	const std 
>313	Parameter	 
>314	Identifier	s
>315	ParameterType	const std 
>316	ReturnType	bool
>317	CompoundStatement	 
>318	ReturnStatement	 
>319	Identifier	true
>320	ReturnStatement	 
>321	Identifier	false
>322	Statement	 
>323	Statement	 
>324	Statement	 
>325	Statement	 
>326	Statement	 
>327	Statement	 
>328	Statement	 
>329	Statement	 
>330	Statement	 
>331	Statement	 
>332	Statement	 
>333	Statement	 
>334	Statement	 
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	Statement	 
>344	Statement	 
>345	Statement	 
>346	Statement	 
>353	FunctionDef	Socket 
>354	ParameterList	std 
>355	Parameter	 
>356	Identifier	s
>357	ParameterType	std 
>358	ReturnType	int
>359	CompoundStatement	 
>360	IfStatement	if ( status == - 1 )
>361	ElseStatement	else
>362	IfStatement	if ( status == 0 )
>363	ElseStatement	else
>364	CompoundStatement	 
>365	ReturnStatement	 
>366	Identifier	status
>367	ExpressionStatement	 
>368	AssignmentExpr	s = buf
>369	Identifier	buf
>370	Identifier	s
>371	ReturnStatement	 
>372	UnaryOp	- 1
>373	PrimaryExpression	1
>374	UnaryOperator	-
>375	Condition	 
>376	EqualityExpression	status == 0
>377	PrimaryExpression	0
>378	Identifier	status
>379	CompoundStatement	 
>380	ReturnStatement	 
>381	UnaryOp	- 1
>382	PrimaryExpression	1
>383	UnaryOperator	-
>384	IfStatement	if ( errno == EAGAIN )
>385	ReturnStatement	 
>386	PrimaryExpression	0
>387	Condition	 
>388	EqualityExpression	errno == EAGAIN
>389	Identifier	EAGAIN
>390	Identifier	errno
>391	Condition	 
>392	EqualityExpression	status == - 1
>393	UnaryOp	- 1
>394	PrimaryExpression	1
>395	UnaryOperator	-
>396	Identifier	status
>397	ExpressionStatement	 
>398	CallExpression	recv ( m_socket , buf , MAX_RECV , 0 )
>399	ArgumentList	m_socket
>400	Argument	0
>401	PrimaryExpression	0
>402	Argument	MAX_RECV
>403	Identifier	MAX_RECV
>404	Argument	buf
>405	Identifier	buf
>406	Argument	m_socket
>407	Identifier	m_socket
>408	Callee	recv
>409	Identifier	recv
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	Statement	 
>414	ExpressionStatement	 
>415	CallExpression	memset ( buf , 0 , MAX_RECV + 1 )
>416	ArgumentList	buf
>417	Argument	MAX_RECV + 1
>418	AdditiveExpression	MAX_RECV + 1
>419	PrimaryExpression	1
>420	Identifier	MAX_RECV
>421	Argument	0
>422	PrimaryExpression	0
>423	Argument	buf
>424	Identifier	buf
>425	Callee	memset
>426	Identifier	memset
>427	ExpressionStatement	 
>428	AssignmentExpr	s = \"\"
>429	PrimaryExpression	\"\"
>430	Identifier	s
>431	IdentifierDeclStatement	 
>432	IdentifierDecl	buf [ MAX_RECV + 1 ]
>433	AdditiveExpression	MAX_RECV + 1
>434	PrimaryExpression	1
>435	Identifier	MAX_RECV
>436	Identifier	buf
>437	IdentifierDeclType	char [ MAX_RECV + 1 ]
>448	FunctionDef	Socket 
>449	ParameterList	const std 
>450	Parameter	 
>451	Identifier	port
>452	ParameterType	const int
>453	Parameter	 
>454	Identifier	host
>455	ParameterType	const std 
>456	ReturnType	bool
>457	CompoundStatement	 
>458	ReturnStatement	 
>459	Identifier	true
>460	IfStatement	if ( status < 0 )
>461	ReturnStatement	 
>462	Identifier	false
>463	Condition	 
>464	RelationalExpression	status < 0
>465	PrimaryExpression	0
>466	Identifier	status
>467	ExpressionStatement	 
>468	CallExpression	connect ( m_socket , ( sockaddr * ) & m_address , sizeof ( m_address ) )
>469	ArgumentList	m_socket
>470	Argument	sizeof ( m_address )
>471	SizeofExpr	sizeof ( m_address )
>472	SizeofOperand	m_address
>473	Sizeof	sizeof
>474	Argument	( sockaddr * ) & m_address
>475	CastExpression	( sockaddr * ) & m_address
>476	UnaryOp	& m_address
>477	Identifier	m_address
>478	UnaryOperator	&
>479	CastTarget	sockaddr *
>480	Argument	m_socket
>481	Identifier	m_socket
>482	Callee	connect
>483	Identifier	connect
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	IfStatement	if ( errno == EAFNOSUPPORT )
>488	ReturnStatement	 
>489	Identifier	false
>490	Condition	 
>491	EqualityExpression	errno == EAFNOSUPPORT
>492	Identifier	EAFNOSUPPORT
>493	Identifier	errno
>494	IdentifierDeclStatement	 
>495	IdentifierDecl	status = inet_pton ( AF_INET , host . c_str ( ) , & m_address . sin_addr )
>496	AssignmentExpr	status = inet_pton ( AF_INET , host . c_str ( ) , & m_address . sin_addr )
>497	CallExpression	inet_pton ( AF_INET , host . c_str ( ) , & m_address . sin_addr )
>498	ArgumentList	AF_INET
>499	Argument	& m_address . sin_addr
>500	UnaryOp	& m_address . sin_addr
>501	MemberAccess	m_address . sin_addr
>502	Identifier	sin_addr
>503	Identifier	m_address
>504	UnaryOperator	&
>505	Argument	host . c_str ( )
>506	CallExpression	host . c_str ( )
>507	ArgumentList	 
>508	Callee	host . c_str
>509	MemberAccess	host . c_str
>510	Identifier	c_str
>511	Identifier	host
>512	Argument	AF_INET
>513	Identifier	AF_INET
>514	Callee	inet_pton
>515	Identifier	inet_pton
>516	Identifier	status
>517	Identifier	status
>518	IdentifierDeclType	int
>519	ExpressionStatement	 
>520	AssignmentExpr	m_address . sin_port = htons ( port )
>521	CallExpression	htons ( port )
>522	ArgumentList	port
>523	Argument	port
>524	Identifier	port
>525	Callee	htons
>526	Identifier	htons
>527	MemberAccess	m_address . sin_port
>528	Identifier	sin_port
>529	Identifier	m_address
>530	ExpressionStatement	 
>531	AssignmentExpr	m_address . sin_family = AF_INET
>532	Identifier	AF_INET
>533	MemberAccess	m_address . sin_family
>534	Identifier	sin_family
>535	Identifier	m_address
>536	IfStatement	if ( m_socket == - 1 )
>537	ReturnStatement	 
>538	Identifier	false
>539	Condition	 
>540	EqualityExpression	m_socket == - 1
>541	UnaryOp	- 1
>542	PrimaryExpression	1
>543	UnaryOperator	-
>544	Identifier	m_socket
>565	FunctionDef	Socket 
>566	ParameterList	const bool b
>567	Parameter	 
>568	Identifier	b
>569	ParameterType	const bool
>570	ReturnType	void
>571	CompoundStatement	 
>572	ExpressionStatement	 
>573	CallExpression	fcntl ( m_socket , F_SETFL , opts )
>574	ArgumentList	m_socket
>575	Argument	opts
>576	Identifier	opts
>577	Argument	F_SETFL
>578	Identifier	F_SETFL
>579	Argument	m_socket
>580	Identifier	m_socket
>581	Callee	fcntl
>582	Identifier	fcntl
>583	IfStatement	if ( b )
>584	ElseStatement	else
>585	ExpressionStatement	 
>586	AssignmentExpr	opts = ( opts & ~O_NONBLOCK )
>587	BitAndExpression	opts & ~O_NONBLOCK
>588	Identifier	~O_NONBLOCK
>589	Identifier	opts
>590	Identifier	opts
>591	ExpressionStatement	 
>592	AssignmentExpr	opts = ( opts | O_NONBLOCK )
>593	InclusiveOrExpression	opts | O_NONBLOCK
>594	Identifier	O_NONBLOCK
>595	Identifier	opts
>596	Identifier	opts
>597	Condition	 
>598	Identifier	b
>599	IfStatement	if ( opts < 0 )
>600	ReturnStatement	 
>601	Condition	 
>602	RelationalExpression	opts < 0
>603	PrimaryExpression	0
>604	Identifier	opts
>605	ExpressionStatement	 
>606	AssignmentExpr	opts = fcntl ( m_socket , F_GETFL )
>607	CallExpression	fcntl ( m_socket , F_GETFL )
>608	ArgumentList	m_socket
>609	Argument	F_GETFL
>610	Identifier	F_GETFL
>611	Argument	m_socket
>612	Identifier	m_socket
>613	Callee	fcntl
>614	Identifier	fcntl
>615	Identifier	opts
>616	IdentifierDeclStatement	 
>617	IdentifierDecl	opts
>618	Identifier	opts
>619	IdentifierDeclType	int
>631	FunctionDef	Socket 
>632	ParameterList	 
>633	ReturnType	void
>634	CompoundStatement	 
>635	ExpressionStatement	 
>636	AssignmentExpr	m_socket = - 1
>637	UnaryOp	- 1
>638	PrimaryExpression	1
>639	UnaryOperator	-
>640	Identifier	m_socket
>641	ExpressionStatement	 
>642	CallExpression	close ( m_socket )
>643	ArgumentList	m_socket
>644	Argument	m_socket
>645	Identifier	m_socket
>646	Callee	close
>647	Identifier	close
>648	Statement	 
>649	IfStatement	if ( m_socket == - 1 )
>650	ReturnStatement	 
>651	Condition	 
>652	EqualityExpression	m_socket == - 1
>653	UnaryOp	- 1
>654	PrimaryExpression	1
>655	UnaryOperator	-
>656	Identifier	m_socket
<3=6,5,4
<6=22,7
<7=8
<8=20,9
<9=16,14,10
<10=11
<11=13,12
<14=15
<16=17
<17=19,18
<20=21
<22=23
<23=27,24
<24=26,25
<33=35,34
<35=36
<36=46,37
<37=45,38
<38=39
<39=43,40
<40=41
<41=42
<43=44
<46=47
<47=49,48
<54=57,56,55
<57=95,88,60,58
<58=59
<60=63,61
<61=62
<63=64
<64=68,65
<65=67,66
<68=86,69
<69=84,82,80,74,70
<70=71
<71=73,72
<74=75
<75=79,76
<76=78,77
<80=81
<82=83
<84=85
<86=87
<88=89
<89=94,93,90
<90=92,91
<95=98,96
<96=97
<98=99
<99=103,100
<100=102,101
<103=114,104
<104=112,105
<105=110,108,106
<106=107
<108=109
<110=111
<112=113
<129=135,134,130
<130=131
<131=133,132
<135=189,183,175,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,138,136
<136=137
<138=139
<164=165
<165=172,166
<166=170,167
<167=168
<168=169
<170=171
<172=174,173
<175=176
<176=178,177
<178=180,179
<180=182,181
<183=184
<184=186,185
<186=188,187
<189=192,190
<190=191
<192=193
<193=197,194
<194=196,195
<213=216,215,214
<216=234,233,232,231,230,229,228,227,226,225,224,223,222,221,219,217
<217=218
<219=220
<234=237,235
<235=236
<237=238
<238=242,239
<239=241,240
<249=255,254,250
<250=251
<251=253,252
<255=291,290,289,288,287,286,267,258,256
<256=257
<258=261,259
<259=260
<261=262
<262=264,263
<264=266,265
<267=268
<268=284,269
<269=282,276,270
<270=271
<271=275,272
<272=274,273
<276=277
<277=281,278
<278=280,279
<282=283
<284=285
<291=292
<292=299,298,293
<293=297,294
<294=296,295
<311=317,316,312
<312=313
<313=315,314
<317=346,345,344,343,342,341,340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,320,318
<318=319
<320=321
<353=359,358,354
<354=355
<355=357,356
<359=431,427,414,413,412,411,410,397,360
<360=391,379,361
<361=362
<362=375,371,363
<363=364
<364=367,365
<365=366
<367=368
<368=370,369
<371=372
<372=374,373
<375=376
<376=378,377
<379=384,380
<380=381
<381=383,382
<384=387,385
<385=386
<387=388
<388=390,389
<391=392
<392=396,393
<393=395,394
<397=398
<398=408,399
<399=406,404,402,400
<400=401
<402=403
<404=405
<406=407
<408=409
<414=415
<415=425,416
<416=423,421,417
<417=418
<418=420,419
<421=422
<423=424
<425=426
<427=428
<428=430,429
<431=432
<432=437,436,433
<433=435,434
<448=457,456,449
<449=453,450
<450=452,451
<453=455,454
<457=536,530,519,494,487,486,485,484,467,460,458
<458=459
<460=463,461
<461=462
<463=464
<464=466,465
<467=468
<468=482,469
<469=480,474,470
<470=471
<471=473,472
<474=475
<475=479,476
<476=478,477
<480=481
<482=483
<487=490,488
<488=489
<490=491
<491=493,492
<494=495
<495=518,517,496
<496=516,497
<497=514,498
<498=512,505,499
<499=500
<500=504,501
<501=503,502
<505=506
<506=508,507
<508=509
<509=511,510
<512=513
<514=515
<519=520
<520=527,521
<521=525,522
<522=523
<523=524
<525=526
<527=529,528
<530=531
<531=533,532
<533=535,534
<536=539,537
<537=538
<539=540
<540=544,541
<541=543,542
<565=571,570,566
<566=567
<567=569,568
<571=616,605,599,583,572
<572=573
<573=581,574
<574=579,577,575
<575=576
<577=578
<579=580
<581=582
<583=597,591,584
<584=585
<585=586
<586=590,587
<587=589,588
<591=592
<592=596,593
<593=595,594
<597=598
<599=601,600
<601=602
<602=604,603
<605=606
<606=615,607
<607=613,608
<608=611,609
<609=610
<611=612
<613=614
<616=617
<617=619,618
<631=634,633,632
<634=649,648,641,635
<635=636
<636=640,637
<637=639,638
<641=642
<642=646,643
<643=644
<644=645
<646=647
<649=651,650
<651=652
<652=656,653
<653=655,654
