>7	FunctionDef	MenuitemOption 
>8	ParameterList	const string name , const string value
>9	Parameter	 
>10	Identifier	value
>11	ParameterType	const string
>12	Parameter	 
>13	Identifier	name
>14	ParameterType	const string
>15	CompoundStatement	 
>21	FunctionDef	MenuitemOption 
>22	ParameterList	const menuoptions_t & options , const string & name
>23	Parameter	 
>24	Identifier	name
>25	ParameterType	const string &
>26	Parameter	 
>27	Identifier	options
>28	ParameterType	const menuoptions_t &
>29	ReturnType	int
>30	CompoundStatement	 
>31	ReturnStatement	 
>32	UnaryOp	- 1
>33	PrimaryExpression	1
>34	UnaryOperator	-
>35	ForStatement	for ( unsigned int i = 0 ; i < options . size ( ) ; ++ i )
>36	CompoundStatement	 
>37	IfStatement	if ( options [ i ] . m_name == name )
>38	ReturnStatement	 
>39	Identifier	i
>40	Condition	 
>41	EqualityExpression	options [ i ] . m_name == name
>42	Identifier	name
>43	MemberAccess	options [ i ] . m_name
>44	Identifier	m_name
>45	ArrayIndexing	options [ i ]
>46	Identifier	i
>47	Identifier	options
>48	UnaryExpression	 
>49	Identifier	i
>50	IncDec	++
>51	Condition	 
>52	RelationalExpression	i < options . size ( )
>53	CallExpression	options . size ( )
>54	ArgumentList	 
>55	Callee	options . size
>56	MemberAccess	options . size
>57	Identifier	size
>58	Identifier	options
>59	Identifier	i
>60	ForInit	 
>61	IdentifierDeclStatement	unsigned int i = 0 ;
>62	IdentifierDecl	i = 0
>63	AssignmentExpr	i = 0
>64	PrimaryExpression	0
>65	Identifier	i
>66	Identifier	i
>67	IdentifierDeclType	unsigned int
>78	FunctionDef	Menuitem 
>79	ParameterList	const string & name , const string & text , const string & action , const string & submenu , menuoptions_t options , \
>80	Parameter	 
>81	Identifier	selected_option
>82	ParameterType	int
>83	Parameter	 
>84	Identifier	options
>85	ParameterType	menuoptions_t
>86	Parameter	 
>87	Identifier	submenu
>88	ParameterType	const string &
>89	Parameter	 
>90	Identifier	action
>91	ParameterType	const string &
>92	Parameter	 
>93	Identifier	text
>94	ParameterType	const string &
>95	Parameter	 
>96	Identifier	name
>97	ParameterType	const string &
>98	CompoundStatement	 
>108	FunctionDef	Menu 
>109	ParameterList	menuitems_t & items , const string & parent
>110	Parameter	 
>111	Identifier	parent
>112	ParameterType	const string &
>113	Parameter	 
>114	Identifier	items
>115	ParameterType	menuitems_t &
>116	CompoundStatement	 
>122	FunctionDef	Menu 
>123	ParameterList	 
>124	CompoundStatement	 
>128	FunctionDef	Menu 
>129	ParameterList	Menuitem item
>130	Parameter	 
>131	Identifier	item
>132	ParameterType	Menuitem
>133	ReturnType	void
>134	CompoundStatement	 
>135	ExpressionStatement	 
>136	CallExpression	m_items . push_back ( item )
>137	ArgumentList	item
>138	Argument	item
>139	Identifier	item
>140	Callee	m_items . push_back
>141	MemberAccess	m_items . push_back
>142	Identifier	push_back
>143	Identifier	m_items
>149	FunctionDef	Menu 
>150	ParameterList	 
>151	ReturnType	void
>152	CompoundStatement	 
>153	IfStatement	if ( m_selected >= ( int ) m_items . size ( ) )
>154	ExpressionStatement	 
>155	AssignmentExpr	m_selected = 0
>156	PrimaryExpression	0
>157	Identifier	m_selected
>158	Condition	 
>159	RelationalExpression	m_selected >= ( int ) m_items . size ( )
>160	CastExpression	( int ) m_items . size ( )
>161	CallExpression	m_items . size ( )
>162	ArgumentList	 
>163	Callee	m_items . size
>164	MemberAccess	m_items . size
>165	Identifier	size
>166	Identifier	m_items
>167	CastTarget	int
>168	Identifier	m_selected
>169	ExpressionStatement	 
>170	IncDecOp	m_selected ++
>171	IncDec	++
>172	Identifier	m_selected
>179	FunctionDef	Menu 
>180	ParameterList	 
>181	ReturnType	void
>182	CompoundStatement	 
>183	IfStatement	if ( m_selected < 0 )
>184	ExpressionStatement	 
>185	AssignmentExpr	m_selected = ( m_items . size ( ) - 1 )
>186	AdditiveExpression	m_items . size ( ) - 1
>187	PrimaryExpression	1
>188	CallExpression	m_items . size ( )
>189	ArgumentList	 
>190	Callee	m_items . size
>191	MemberAccess	m_items . size
>192	Identifier	size
>193	Identifier	m_items
>194	Identifier	m_selected
>195	Condition	 
>196	RelationalExpression	m_selected < 0
>197	PrimaryExpression	0
>198	Identifier	m_selected
>199	ExpressionStatement	 
>200	IncDecOp	m_selected --
>201	IncDec	--
>202	Identifier	m_selected
>209	FunctionDef	Menu 
>210	ParameterList	 
>211	ReturnType	void
>212	CompoundStatement	 
>213	IfStatement	if ( ! item . m_action . empty ( ) )
>214	ExpressionStatement	 
>215	CallExpression	add_action ( item . m_action , item . m_options [ item . m_selected_option ] . m_value )
>216	ArgumentList	item . m_action
>217	Argument	item . m_options [ item . m_selected_option ] . m_value
>218	MemberAccess	item . m_options [ item . m_selected_option ] . m_value
>219	Identifier	m_value
>220	ArrayIndexing	item . m_options [ item . m_selected_option ]
>221	MemberAccess	item . m_selected_option
>222	Identifier	m_selected_option
>223	Identifier	item
>224	MemberAccess	item . m_options
>225	Identifier	m_options
>226	Identifier	item
>227	Argument	item . m_action
>228	MemberAccess	item . m_action
>229	Identifier	m_action
>230	Identifier	item
>231	Callee	add_action
>232	Identifier	add_action
>233	Condition	 
>234	UnaryOp	! item . m_action . empty ( )
>235	CallExpression	item . m_action . empty ( )
>236	ArgumentList	 
>237	Callee	item . m_action . empty
>238	MemberAccess	item . m_action . empty
>239	Identifier	empty
>240	MemberAccess	item . m_action
>241	Identifier	m_action
>242	Identifier	item
>243	UnaryOperator	!
>244	IfStatement	if ( item . m_selected_option >= ( int ) item . m_options . size ( ) )
>245	ExpressionStatement	 
>246	AssignmentExpr	item . m_selected_option = 0
>247	PrimaryExpression	0
>248	MemberAccess	item . m_selected_option
>249	Identifier	m_selected_option
>250	Identifier	item
>251	Condition	 
>252	RelationalExpression	item . m_selected_option >= ( int ) item . m_options . size ( )
>253	CastExpression	( int ) item . m_options . size ( )
>254	CallExpression	item . m_options . size ( )
>255	ArgumentList	 
>256	Callee	item . m_options . size
>257	MemberAccess	item . m_options . size
>258	Identifier	size
>259	MemberAccess	item . m_options
>260	Identifier	m_options
>261	Identifier	item
>262	CastTarget	int
>263	MemberAccess	item . m_selected_option
>264	Identifier	m_selected_option
>265	Identifier	item
>266	ExpressionStatement	 
>267	IncDecOp	item . m_selected_option ++
>268	IncDec	++
>269	MemberAccess	item . m_selected_option
>270	Identifier	m_selected_option
>271	Identifier	item
>272	IfStatement	if ( item . m_options . empty ( ) )
>273	ReturnStatement	 
>274	Condition	 
>275	CallExpression	item . m_options . empty ( )
>276	ArgumentList	 
>277	Callee	item . m_options . empty
>278	MemberAccess	item . m_options . empty
>279	Identifier	empty
>280	MemberAccess	item . m_options
>281	Identifier	m_options
>282	Identifier	item
>283	IdentifierDeclStatement	 
>284	IdentifierDecl	& item = m_items [ m_selected ]
>285	AssignmentExpr	& item = m_items [ m_selected ]
>286	ArrayIndexing	m_items [ m_selected ]
>287	Identifier	m_selected
>288	Identifier	m_items
>289	Identifier	item
>290	Identifier	item
>291	IdentifierDeclType	Menuitem &
>310	FunctionDef	Menu 
>311	ParameterList	 
>312	ReturnType	void
>313	CompoundStatement	 
>314	IfStatement	if ( ! item . m_action . empty ( ) )
>315	ExpressionStatement	 
>316	CallExpression	add_action ( item . m_action , item . m_options [ item . m_selected_option ] . m_value )
>317	ArgumentList	item . m_action
>318	Argument	item . m_options [ item . m_selected_option ] . m_value
>319	MemberAccess	item . m_options [ item . m_selected_option ] . m_value
>320	Identifier	m_value
>321	ArrayIndexing	item . m_options [ item . m_selected_option ]
>322	MemberAccess	item . m_selected_option
>323	Identifier	m_selected_option
>324	Identifier	item
>325	MemberAccess	item . m_options
>326	Identifier	m_options
>327	Identifier	item
>328	Argument	item . m_action
>329	MemberAccess	item . m_action
>330	Identifier	m_action
>331	Identifier	item
>332	Callee	add_action
>333	Identifier	add_action
>334	Condition	 
>335	UnaryOp	! item . m_action . empty ( )
>336	CallExpression	item . m_action . empty ( )
>337	ArgumentList	 
>338	Callee	item . m_action . empty
>339	MemberAccess	item . m_action . empty
>340	Identifier	empty
>341	MemberAccess	item . m_action
>342	Identifier	m_action
>343	Identifier	item
>344	UnaryOperator	!
>345	IfStatement	if ( item . m_selected_option < 0 )
>346	ExpressionStatement	 
>347	AssignmentExpr	item . m_selected_option = item . m_options . size ( ) - 1
>348	AdditiveExpression	item . m_options . size ( ) - 1
>349	PrimaryExpression	1
>350	CallExpression	item . m_options . size ( )
>351	ArgumentList	 
>352	Callee	item . m_options . size
>353	MemberAccess	item . m_options . size
>354	Identifier	size
>355	MemberAccess	item . m_options
>356	Identifier	m_options
>357	Identifier	item
>358	MemberAccess	item . m_selected_option
>359	Identifier	m_selected_option
>360	Identifier	item
>361	Condition	 
>362	RelationalExpression	item . m_selected_option < 0
>363	PrimaryExpression	0
>364	MemberAccess	item . m_selected_option
>365	Identifier	m_selected_option
>366	Identifier	item
>367	ExpressionStatement	 
>368	IncDecOp	item . m_selected_option --
>369	IncDec	--
>370	MemberAccess	item . m_selected_option
>371	Identifier	m_selected_option
>372	Identifier	item
>373	IfStatement	if ( item . m_options . empty ( ) )
>374	ReturnStatement	 
>375	Condition	 
>376	CallExpression	item . m_options . empty ( )
>377	ArgumentList	 
>378	Callee	item . m_options . empty
>379	MemberAccess	item . m_options . empty
>380	Identifier	empty
>381	MemberAccess	item . m_options
>382	Identifier	m_options
>383	Identifier	item
>384	IdentifierDeclStatement	 
>385	IdentifierDecl	& item = m_items [ m_selected ]
>386	AssignmentExpr	& item = m_items [ m_selected ]
>387	ArrayIndexing	m_items [ m_selected ]
>388	Identifier	m_selected
>389	Identifier	m_items
>390	Identifier	item
>391	Identifier	item
>392	IdentifierDeclType	Menuitem &
>411	FunctionDef	Menu 
>412	ParameterList	const string & action_name , const string & action_value
>413	Parameter	 
>414	Identifier	action_value
>415	ParameterType	const string &
>416	Parameter	 
>417	Identifier	action_name
>418	ParameterType	const string &
>419	ReturnType	void
>420	CompoundStatement	 
>421	ExpressionStatement	 
>422	CallExpression	m_pending_actions . push_back ( make_pair ( action_name , action_value ) )
>423	ArgumentList	make_pair ( action_name , action_value )
>424	Argument	make_pair ( action_name , action_value )
>425	CallExpression	make_pair ( action_name , action_value )
>426	ArgumentList	action_name
>427	Argument	action_value
>428	Identifier	action_value
>429	Argument	action_name
>430	Identifier	action_name
>431	Callee	make_pair
>432	Identifier	make_pair
>433	Callee	m_pending_actions . push_back
>434	MemberAccess	m_pending_actions . push_back
>435	Identifier	push_back
>436	Identifier	m_pending_actions
>444	FunctionDef	Menu 
>445	ParameterList	 
>446	ReturnType	vec_str_pair_t
>447	CompoundStatement	 
>448	ReturnStatement	 
>449	Identifier	actions
>450	ExpressionStatement	 
>451	CallExpression	m_pending_actions . clear ( )
>452	ArgumentList	 
>453	Callee	m_pending_actions . clear
>454	MemberAccess	m_pending_actions . clear
>455	Identifier	clear
>456	Identifier	m_pending_actions
>457	IdentifierDeclStatement	 
>458	IdentifierDecl	actions = m_pending_actions
>459	AssignmentExpr	actions = m_pending_actions
>460	Identifier	m_pending_actions
>461	Identifier	m_pending_actions
>462	Identifier	actions
>463	IdentifierDeclType	vec_str_pair_t
>469	FunctionDef	Menu 
>470	ParameterList	 
>471	ReturnType	map_str_str_t
>472	CompoundStatement	 
>473	ReturnStatement	 
>474	Identifier	opts
>475	ForStatement	for ( menuitems_t 
>476	CompoundStatement	 
>477	ExpressionStatement	 
>478	AssignmentExpr	opts [ mi . m_name ] = mi . m_options [ mi . m_selected_option ] . m_value
>479	MemberAccess	mi . m_options [ mi . m_selected_option ] . m_value
>480	Identifier	m_value
>481	ArrayIndexing	mi . m_options [ mi . m_selected_option ]
>482	MemberAccess	mi . m_selected_option
>483	Identifier	m_selected_option
>484	Identifier	mi
>485	MemberAccess	mi . m_options
>486	Identifier	m_options
>487	Identifier	mi
>488	ArrayIndexing	opts [ mi . m_name ]
>489	MemberAccess	mi . m_name
>490	Identifier	m_name
>491	Identifier	mi
>492	Identifier	opts
>493	IfStatement	if ( mi . m_name . empty ( ) )
>494	ContinueStatement	 
>495	Condition	 
>496	CallExpression	mi . m_name . empty ( )
>497	ArgumentList	 
>498	Callee	mi . m_name . empty
>499	MemberAccess	mi . m_name . empty
>500	Identifier	empty
>501	MemberAccess	mi . m_name
>502	Identifier	m_name
>503	Identifier	mi
>504	IfStatement	if ( mi . m_options . empty ( ) )
>505	ContinueStatement	 
>506	Condition	 
>507	CallExpression	mi . m_options . empty ( )
>508	ArgumentList	 
>509	Callee	mi . m_options . empty
>510	MemberAccess	mi . m_options . empty
>511	Identifier	empty
>512	MemberAccess	mi . m_options
>513	Identifier	m_options
>514	Identifier	mi
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	mi = * it
>517	AssignmentExpr	mi = * it
>518	UnaryOp	* it
>519	Identifier	it
>520	UnaryOperator	*
>521	Identifier	mi
>522	Identifier	mi
>523	IdentifierDeclType	Menuitem
>524	UnaryExpression	 
>525	Identifier	it
>526	IncDec	++
>527	Condition	 
>528	EqualityExpression	it != end
>529	Identifier	end
>530	Identifier	it
>531	ForInit	 
>532	IdentifierDeclStatement	menuitems_t 
>533	IdentifierDecl	end = m_items . end ( )
>534	AssignmentExpr	end = m_items . end ( )
>535	CallExpression	m_items . end ( )
>536	ArgumentList	 
>537	Callee	m_items . end
>538	MemberAccess	m_items . end
>539	Identifier	end
>540	Identifier	m_items
>541	Identifier	end
>542	Identifier	end
>543	IdentifierDeclType	menuitems_t 
>544	IdentifierDecl	it = m_items . begin ( )
>545	AssignmentExpr	it = m_items . begin ( )
>546	CallExpression	m_items . begin ( )
>547	ArgumentList	 
>548	Callee	m_items . begin
>549	MemberAccess	m_items . begin
>550	Identifier	begin
>551	Identifier	m_items
>552	Identifier	it
>553	Identifier	it
>554	IdentifierDeclType	menuitems_t 
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	opts
>557	Identifier	opts
>558	IdentifierDeclType	map_str_str_t
>581	FunctionDef	Menu 
>582	ParameterList	 
>583	ReturnType	string
>584	CompoundStatement	 
>585	ReturnStatement	 
>586	PrimaryExpression	\"\"
>587	IfStatement	if ( ! item . m_options . empty ( ) )
>588	ElseStatement	else
>589	IfStatement	if ( ! item . m_action . empty ( ) )
>590	ElseStatement	else
>591	IfStatement	if ( ! item . m_submenu . empty ( ) )
>592	CompoundStatement	 
>593	IfStatement	if ( item . m_submenu == \"
>594	ElseStatement	else
>595	ReturnStatement	 
>596	MemberAccess	item . m_submenu
>597	Identifier	m_submenu
>598	Identifier	item
>599	ReturnStatement	 
>600	Identifier	m_parent
>601	Condition	 
>602	EqualityExpression	item . m_submenu == \"
>603	PrimaryExpression	\"
>604	MemberAccess	item . m_submenu
>605	Identifier	m_submenu
>606	Identifier	item
>607	Condition	 
>608	UnaryOp	! item . m_submenu . empty ( )
>609	CallExpression	item . m_submenu . empty ( )
>610	ArgumentList	 
>611	Callee	item . m_submenu . empty
>612	MemberAccess	item . m_submenu . empty
>613	Identifier	empty
>614	MemberAccess	item . m_submenu
>615	Identifier	m_submenu
>616	Identifier	item
>617	UnaryOperator	!
>618	CompoundStatement	 
>619	ExpressionStatement	 
>620	CallExpression	add_action ( item . m_action , \"\" )
>621	ArgumentList	item . m_action
>622	Argument	\"\"
>623	PrimaryExpression	\"\"
>624	Argument	item . m_action
>625	MemberAccess	item . m_action
>626	Identifier	m_action
>627	Identifier	item
>628	Callee	add_action
>629	Identifier	add_action
>630	IfStatement	if ( item . m_action == \"
>631	ReturnStatement	 
>632	PrimaryExpression	\"\"
>633	Condition	 
>634	EqualityExpression	item . m_action == \"
>635	PrimaryExpression	\"
>636	MemberAccess	item . m_action
>637	Identifier	m_action
>638	Identifier	item
>639	Condition	 
>640	UnaryOp	! item . m_action . empty ( )
>641	CallExpression	item . m_action . empty ( )
>642	ArgumentList	 
>643	Callee	item . m_action . empty
>644	MemberAccess	item . m_action . empty
>645	Identifier	empty
>646	MemberAccess	item . m_action
>647	Identifier	m_action
>648	Identifier	item
>649	UnaryOperator	!
>650	CompoundStatement	 
>651	ExpressionStatement	 
>652	CallExpression	selected_item_next_option ( )
>653	ArgumentList	 
>654	Callee	selected_item_next_option
>655	Identifier	selected_item_next_option
>656	Condition	 
>657	UnaryOp	! item . m_options . empty ( )
>658	CallExpression	item . m_options . empty ( )
>659	ArgumentList	 
>660	Callee	item . m_options . empty
>661	MemberAccess	item . m_options . empty
>662	Identifier	empty
>663	MemberAccess	item . m_options
>664	Identifier	m_options
>665	Identifier	item
>666	UnaryOperator	!
>667	IdentifierDeclStatement	 
>668	IdentifierDecl	& item = m_items [ m_selected ]
>669	AssignmentExpr	& item = m_items [ m_selected ]
>670	ArrayIndexing	m_items [ m_selected ]
>671	Identifier	m_selected
>672	Identifier	m_items
>673	Identifier	item
>674	Identifier	item
>675	IdentifierDeclType	Menuitem &
>691	FunctionDef	Menu 
>692	ParameterList	int item
>693	Parameter	 
>694	Identifier	item
>695	ParameterType	int
>696	ReturnType	void
>697	CompoundStatement	 
>698	ExpressionStatement	 
>699	AssignmentExpr	m_selected = item
>700	Identifier	item
>701	Identifier	m_selected
>702	ExpressionStatement	 
>703	AssignmentExpr	item = clamp < int > ( item , 0 , m_items . size ( ) )
>704	RelationalExpression	clamp < int > ( item , 0 , m_items . size ( ) )
>705	RelationalExpression	int > ( item , 0 , m_items . size ( ) )
>706	Expression	item , 0 , m_items . size ( )
>707	Expression	0 , m_items . size ( )
>708	CallExpression	m_items . size ( )
>709	ArgumentList	 
>710	Callee	m_items . size
>711	MemberAccess	m_items . size
>712	Identifier	size
>713	Identifier	m_items
>714	PrimaryExpression	0
>715	Identifier	item
>716	Identifier	int
>717	Identifier	clamp
>718	Identifier	item
>728	FunctionDef	GraphicMenu 
>729	ParameterList	menuitems_t & items , MFont * font , float font_size , vec4 color , vec4 color_hi
>730	Parameter	 
>731	Identifier	color_hi
>732	ParameterType	vec4
>733	Parameter	 
>734	Identifier	color
>735	ParameterType	vec4
>736	Parameter	 
>737	Identifier	font_size
>738	ParameterType	float
>739	Parameter	 
>740	Identifier	font
>741	ParameterType	MFont *
>742	Parameter	 
>743	Identifier	items
>744	ParameterType	menuitems_t &
>745	CompoundStatement	 
>754	FunctionDef	GraphicMenu 
>755	ParameterList	vec2 pos , bool centered
>756	Parameter	 
>757	Identifier	centered
>758	ParameterType	bool
>759	Parameter	 
>760	Identifier	pos
>761	ParameterType	vec2
>762	ReturnType	void
>763	CompoundStatement	 
>764	ExpressionStatement	 
>765	CallExpression	m_font -> finish_drawing ( )
>766	ArgumentList	 
>767	Callee	m_font -> finish_drawing
>768	PtrMemberAccess	m_font -> finish_drawing
>769	Identifier	finish_drawing
>770	Identifier	m_font
>771	ExpressionStatement	 
>772	CallExpression	glPopMatrix ( )
>773	ArgumentList	 
>774	Callee	glPopMatrix
>775	Identifier	glPopMatrix
>776	ForStatement	for ( int i = 0 ; i < ( int ) m_items . size ( ) ; ++ i )
>777	CompoundStatement	 
>778	ExpressionStatement	 
>779	CallExpression	m_bboxes . push_back ( bb )
>780	ArgumentList	bb
>781	Argument	bb
>782	Identifier	bb
>783	Callee	m_bboxes . push_back
>784	MemberAccess	m_bboxes . push_back
>785	Identifier	push_back
>786	Identifier	m_bboxes
>787	IdentifierDeclStatement	 
>788	IdentifierDecl	bb = m_font -> bbox ( text . c_str ( ) , m_font_size , vec2 ( xpos , ypos ) + pos , centered )
>789	AssignmentExpr	bb = m_font -> bbox ( text . c_str ( ) , m_font_size , vec2 ( xpos , ypos ) + pos , centered )
>790	CallExpression	m_font -> bbox ( text . c_str ( ) , m_font_size , vec2 ( xpos , ypos ) + pos , centered )
>791	ArgumentList	text . c_str ( )
>792	Argument	centered
>793	Identifier	centered
>794	Argument	vec2 ( xpos , ypos ) + pos
>795	AdditiveExpression	vec2 ( xpos , ypos ) + pos
>796	Identifier	pos
>797	CallExpression	vec2 ( xpos , ypos )
>798	ArgumentList	xpos
>799	Argument	ypos
>800	Identifier	ypos
>801	Argument	xpos
>802	Identifier	xpos
>803	Callee	vec2
>804	Identifier	vec2
>805	Argument	m_font_size
>806	Identifier	m_font_size
>807	Argument	text . c_str ( )
>808	CallExpression	text . c_str ( )
>809	ArgumentList	 
>810	Callee	text . c_str
>811	MemberAccess	text . c_str
>812	Identifier	c_str
>813	Identifier	text
>814	Callee	m_font -> bbox
>815	PtrMemberAccess	m_font -> bbox
>816	Identifier	bbox
>817	Identifier	m_font
>818	Identifier	bb
>819	Identifier	bb
>820	IdentifierDeclType	AABB
>821	IfStatement	if ( m_selected == i )
>822	ElseStatement	else
>823	CompoundStatement	 
>824	ExpressionStatement	 
>825	CallExpression	m_font -> print_text ( text . c_str ( ) , vec2 ( xpos , ypos ) , m_font_size , centered , color )
>826	ArgumentList	text . c_str ( )
>827	Argument	color
>828	Identifier	color
>829	Argument	centered
>830	Identifier	centered
>831	Argument	m_font_size
>832	Identifier	m_font_size
>833	Argument	vec2 ( xpos , ypos )
>834	CallExpression	vec2 ( xpos , ypos )
>835	ArgumentList	xpos
>836	Argument	ypos
>837	Identifier	ypos
>838	Argument	xpos
>839	Identifier	xpos
>840	Callee	vec2
>841	Identifier	vec2
>842	Argument	text . c_str ( )
>843	CallExpression	text . c_str ( )
>844	ArgumentList	 
>845	Callee	text . c_str
>846	MemberAccess	text . c_str
>847	Identifier	c_str
>848	Identifier	text
>849	Callee	m_font -> print_text
>850	PtrMemberAccess	m_font -> print_text
>851	Identifier	print_text
>852	Identifier	m_font
>853	CompoundStatement	 
>854	ExpressionStatement	 
>855	CallExpression	m_font -> print_text_with_shadow ( text . c_str ( ) , vec2 ( xpos , ypos ) , m_font_size , centered , color )
>856	ArgumentList	text . c_str ( )
>857	Argument	color
>858	Identifier	color
>859	Argument	centered
>860	Identifier	centered
>861	Argument	m_font_size
>862	Identifier	m_font_size
>863	Argument	vec2 ( xpos , ypos )
>864	CallExpression	vec2 ( xpos , ypos )
>865	ArgumentList	xpos
>866	Argument	ypos
>867	Identifier	ypos
>868	Argument	xpos
>869	Identifier	xpos
>870	Callee	vec2
>871	Identifier	vec2
>872	Argument	text . c_str ( )
>873	CallExpression	text . c_str ( )
>874	ArgumentList	 
>875	Callee	text . c_str
>876	MemberAccess	text . c_str
>877	Identifier	c_str
>878	Identifier	text
>879	Callee	m_font -> print_text_with_shadow
>880	PtrMemberAccess	m_font -> print_text_with_shadow
>881	Identifier	print_text_with_shadow
>882	Identifier	m_font
>883	Condition	 
>884	EqualityExpression	m_selected == i
>885	Identifier	i
>886	Identifier	m_selected
>887	IfStatement	if ( ! item . m_options . empty ( ) )
>888	ElseStatement	else
>889	CompoundStatement	 
>890	ExpressionStatement	 
>891	AssignmentExpr	text = item . m_text
>892	MemberAccess	item . m_text
>893	Identifier	m_text
>894	Identifier	item
>895	Identifier	text
>896	CompoundStatement	 
>897	IfStatement	if ( m_selected == i )
>898	ElseStatement	else
>899	CompoundStatement	 
>900	ExpressionStatement	 
>901	AssignmentExpr	text = item . m_text + \"
>902	AdditiveExpression	item . m_text + \"
>903	AdditiveExpression	\"
>904	MemberAccess	item . m_options [ item . m_selected_option ] . m_name
>905	Identifier	m_name
>906	ArrayIndexing	item . m_options [ item . m_selected_option ]
>907	MemberAccess	item . m_selected_option
>908	Identifier	m_selected_option
>909	Identifier	item
>910	MemberAccess	item . m_options
>911	Identifier	m_options
>912	Identifier	item
>913	PrimaryExpression	\"
>914	MemberAccess	item . m_text
>915	Identifier	m_text
>916	Identifier	item
>917	Identifier	text
>918	CompoundStatement	 
>919	ExpressionStatement	 
>920	AssignmentExpr	xpos += ( m_font -> size_of_text ( \"<>\" , m_font_size ) ) / 2.0f
>921	MultiplicativeExpression	( m_font -> size_of_text ( \"<>\" , m_font_size ) ) / 2.0f
>922	PrimaryExpression	2.0f
>923	CallExpression	m_font -> size_of_text ( \"<>\" , m_font_size )
>924	ArgumentList	\"<>\"
>925	Argument	m_font_size
>926	Identifier	m_font_size
>927	Argument	\"<>\"
>928	PrimaryExpression	\"<>\"
>929	Callee	m_font -> size_of_text
>930	PtrMemberAccess	m_font -> size_of_text
>931	Identifier	size_of_text
>932	Identifier	m_font
>933	Identifier	xpos
>934	ExpressionStatement	 
>935	AssignmentExpr	text = item . m_text + \"
>936	AdditiveExpression	item . m_text + \"
>937	AdditiveExpression	\"
>938	AdditiveExpression	item . m_options [ item . m_selected_option ] . m_name + \">\"
>939	PrimaryExpression	\">\"
>940	MemberAccess	item . m_options [ item . m_selected_option ] . m_name
>941	Identifier	m_name
>942	ArrayIndexing	item . m_options [ item . m_selected_option ]
>943	MemberAccess	item . m_selected_option
>944	Identifier	m_selected_option
>945	Identifier	item
>946	MemberAccess	item . m_options
>947	Identifier	m_options
>948	Identifier	item
>949	PrimaryExpression	\"
>950	MemberAccess	item . m_text
>951	Identifier	m_text
>952	Identifier	item
>953	Identifier	text
>954	Condition	 
>955	EqualityExpression	m_selected == i
>956	Identifier	i
>957	Identifier	m_selected
>958	Condition	 
>959	UnaryOp	! item . m_options . empty ( )
>960	CallExpression	item . m_options . empty ( )
>961	ArgumentList	 
>962	Callee	item . m_options . empty
>963	MemberAccess	item . m_options . empty
>964	Identifier	empty
>965	MemberAccess	item . m_options
>966	Identifier	m_options
>967	Identifier	item
>968	UnaryOperator	!
>969	IdentifierDeclStatement	 
>970	IdentifierDecl	text
>971	Identifier	text
>972	IdentifierDeclType	string
>973	IfStatement	if ( m_selected == i )
>974	ElseStatement	else
>975	ExpressionStatement	 
>976	AssignmentExpr	color = m_color
>977	Identifier	m_color
>978	Identifier	color
>979	ExpressionStatement	 
>980	AssignmentExpr	color = m_color_hi
>981	Identifier	m_color_hi
>982	Identifier	color
>983	Condition	 
>984	EqualityExpression	m_selected == i
>985	Identifier	i
>986	Identifier	m_selected
>987	IdentifierDeclStatement	 
>988	IdentifierDecl	color
>989	Identifier	color
>990	IdentifierDeclType	vec4
>991	IdentifierDeclStatement	 
>992	IdentifierDecl	xpos = 0.0
>993	AssignmentExpr	xpos = 0.0
>994	PrimaryExpression	0.0
>995	Identifier	xpos
>996	Identifier	xpos
>997	IdentifierDeclType	float
>998	IdentifierDeclStatement	 
>999	IdentifierDecl	ypos = m_font -> line_sep ( ) * i * m_font_size
>1000	AssignmentExpr	ypos = m_font -> line_sep ( ) * i * m_font_size
>1001	MultiplicativeExpression	m_font -> line_sep ( ) * i * m_font_size
>1002	MultiplicativeExpression	i * m_font_size
>1003	Identifier	m_font_size
>1004	Identifier	i
>1005	CallExpression	m_font -> line_sep ( )
>1006	ArgumentList	 
>1007	Callee	m_font -> line_sep
>1008	PtrMemberAccess	m_font -> line_sep
>1009	Identifier	line_sep
>1010	Identifier	m_font
>1011	Identifier	ypos
>1012	Identifier	ypos
>1013	IdentifierDeclType	float
>1014	IdentifierDeclStatement	 
>1015	IdentifierDecl	& item = m_items [ i ]
>1016	AssignmentExpr	& item = m_items [ i ]
>1017	ArrayIndexing	m_items [ i ]
>1018	Identifier	i
>1019	Identifier	m_items
>1020	Identifier	item
>1021	Identifier	item
>1022	IdentifierDeclType	Menuitem &
>1023	UnaryExpression	 
>1024	Identifier	i
>1025	IncDec	++
>1026	Condition	 
>1027	RelationalExpression	i < ( int ) m_items . size ( )
>1028	CastExpression	( int ) m_items . size ( )
>1029	CallExpression	m_items . size ( )
>1030	ArgumentList	 
>1031	Callee	m_items . size
>1032	MemberAccess	m_items . size
>1033	Identifier	size
>1034	Identifier	m_items
>1035	CastTarget	int
>1036	Identifier	i
>1037	ForInit	 
>1038	IdentifierDeclStatement	int i = 0 ;
>1039	IdentifierDecl	i = 0
>1040	AssignmentExpr	i = 0
>1041	PrimaryExpression	0
>1042	Identifier	i
>1043	Identifier	i
>1044	IdentifierDeclType	int
>1045	ExpressionStatement	 
>1046	CallExpression	m_bboxes . clear ( )
>1047	ArgumentList	 
>1048	Callee	m_bboxes . clear
>1049	MemberAccess	m_bboxes . clear
>1050	Identifier	clear
>1051	Identifier	m_bboxes
>1052	ExpressionStatement	 
>1053	CallExpression	glTranslate ( vec3 ( pos ) )
>1054	ArgumentList	vec3 ( pos )
>1055	Argument	vec3 ( pos )
>1056	CallExpression	vec3 ( pos )
>1057	ArgumentList	pos
>1058	Argument	pos
>1059	Identifier	pos
>1060	Callee	vec3
>1061	Identifier	vec3
>1062	Callee	glTranslate
>1063	Identifier	glTranslate
>1064	ExpressionStatement	 
>1065	CallExpression	glPushMatrix ( )
>1066	ArgumentList	 
>1067	Callee	glPushMatrix
>1068	Identifier	glPushMatrix
>1069	ExpressionStatement	 
>1070	CallExpression	m_font -> setup_drawing ( )
>1071	ArgumentList	 
>1072	Callee	m_font -> setup_drawing
>1073	PtrMemberAccess	m_font -> setup_drawing
>1074	Identifier	setup_drawing
>1075	Identifier	m_font
>1113	FunctionDef	GraphicMenu 
>1114	ParameterList	const vec2 p
>1115	Parameter	 
>1116	Identifier	p
>1117	ParameterType	const vec2
>1118	ReturnType	void
>1119	CompoundStatement	 
>1120	ForStatement	for ( unsigned int i = 0 ; i < m_bboxes . size ( ) ; ++ i )
>1121	CompoundStatement	 
>1122	IfStatement	if ( m_bboxes [ i ] . contains_point ( p ) )
>1123	CompoundStatement	 
>1124	ReturnStatement	 
>1125	ExpressionStatement	 
>1126	AssignmentExpr	m_selected = i
>1127	Identifier	i
>1128	Identifier	m_selected
>1129	Condition	 
>1130	CallExpression	m_bboxes [ i ] . contains_point ( p )
>1131	ArgumentList	p
>1132	Argument	p
>1133	Identifier	p
>1134	Callee	m_bboxes [ i ] . contains_point
>1135	MemberAccess	m_bboxes [ i ] . contains_point
>1136	Identifier	contains_point
>1137	ArrayIndexing	m_bboxes [ i ]
>1138	Identifier	i
>1139	Identifier	m_bboxes
>1140	UnaryExpression	 
>1141	Identifier	i
>1142	IncDec	++
>1143	Condition	 
>1144	RelationalExpression	i < m_bboxes . size ( )
>1145	CallExpression	m_bboxes . size ( )
>1146	ArgumentList	 
>1147	Callee	m_bboxes . size
>1148	MemberAccess	m_bboxes . size
>1149	Identifier	size
>1150	Identifier	m_bboxes
>1151	Identifier	i
>1152	ForInit	 
>1153	IdentifierDeclStatement	unsigned int i = 0 ;
>1154	IdentifierDecl	i = 0
>1155	AssignmentExpr	i = 0
>1156	PrimaryExpression	0
>1157	Identifier	i
>1158	Identifier	i
>1159	IdentifierDeclType	unsigned int
>1171	FunctionDef	MenuSystem 
>1172	ParameterList	 
>1173	CompoundStatement	 
>1177	FunctionDef	MenuSystem 
>1178	ParameterList	const string & menu_name , Menu * menu
>1179	Parameter	 
>1180	Identifier	menu
>1181	ParameterType	Menu *
>1182	Parameter	 
>1183	Identifier	menu_name
>1184	ParameterType	const string &
>1185	ReturnType	void
>1186	CompoundStatement	 
>1187	IfStatement	if ( menu_name == \"main\" )
>1188	ExpressionStatement	 
>1189	AssignmentExpr	m_current_menu = menu
>1190	Identifier	menu
>1191	Identifier	m_current_menu
>1192	Condition	 
>1193	EqualityExpression	menu_name == \"main\"
>1194	PrimaryExpression	\"main\"
>1195	Identifier	menu_name
>1196	ExpressionStatement	 
>1197	AssignmentExpr	m_menus [ menu_name ] = menu
>1198	Identifier	menu
>1199	ArrayIndexing	m_menus [ menu_name ]
>1200	Identifier	menu_name
>1201	Identifier	m_menus
>1211	FunctionDef	MenuSystem 
>1212	ParameterList	const string & menu_name
>1213	Parameter	 
>1214	Identifier	menu_name
>1215	ParameterType	const string &
>1216	ReturnType	void
>1217	CompoundStatement	 
>1218	ExpressionStatement	 
>1219	AssignmentExpr	m_current_menu = m_menus [ menu_name ]
>1220	ArrayIndexing	m_menus [ menu_name ]
>1221	Identifier	menu_name
>1222	Identifier	m_menus
>1223	Identifier	m_current_menu
>1232	FunctionDef	MenuSystem 
>1233	ParameterList	int item
>1234	Parameter	 
>1235	Identifier	item
>1236	ParameterType	int
>1237	ReturnType	void
>1238	CompoundStatement	 
>1239	IfStatement	if ( m_current_menu )
>1240	ExpressionStatement	 
>1241	CallExpression	m_current_menu -> switch_to_item ( item )
>1242	ArgumentList	item
>1243	Argument	item
>1244	Identifier	item
>1245	Callee	m_current_menu -> switch_to_item
>1246	PtrMemberAccess	m_current_menu -> switch_to_item
>1247	Identifier	switch_to_item
>1248	Identifier	m_current_menu
>1249	Condition	 
>1250	Identifier	m_current_menu
>1256	FunctionDef	MenuSystem 
>1257	ParameterList	vec2 pos , bool centered
>1258	Parameter	 
>1259	Identifier	centered
>1260	ParameterType	bool
>1261	Parameter	 
>1262	Identifier	pos
>1263	ParameterType	vec2
>1264	ReturnType	void
>1265	CompoundStatement	 
>1266	IfStatement	if ( m_current_menu )
>1267	ExpressionStatement	 
>1268	CallExpression	m_current_menu -> draw ( pos , centered )
>1269	ArgumentList	pos
>1270	Argument	centered
>1271	Identifier	centered
>1272	Argument	pos
>1273	Identifier	pos
>1274	Callee	m_current_menu -> draw
>1275	PtrMemberAccess	m_current_menu -> draw
>1276	Identifier	draw
>1277	Identifier	m_current_menu
>1278	Condition	 
>1279	Identifier	m_current_menu
>1286	FunctionDef	MenuSystem 
>1287	ParameterList	 
>1288	ReturnType	vec_str_pair_t
>1289	CompoundStatement	 
>1290	ReturnStatement	 
>1291	Identifier	actions
>1292	ForStatement	for ( menustore_t 
>1293	CompoundStatement	 
>1294	ExpressionStatement	 
>1295	CallExpression	copy ( a . begin ( ) , a . end ( ) , back_inserter ( actions ) )
>1296	ArgumentList	a . begin ( )
>1297	Argument	back_inserter ( actions )
>1298	CallExpression	back_inserter ( actions )
>1299	ArgumentList	actions
>1300	Argument	actions
>1301	Identifier	actions
>1302	Callee	back_inserter
>1303	Identifier	back_inserter
>1304	Argument	a . end ( )
>1305	CallExpression	a . end ( )
>1306	ArgumentList	 
>1307	Callee	a . end
>1308	MemberAccess	a . end
>1309	Identifier	end
>1310	Identifier	a
>1311	Argument	a . begin ( )
>1312	CallExpression	a . begin ( )
>1313	ArgumentList	 
>1314	Callee	a . begin
>1315	MemberAccess	a . begin
>1316	Identifier	begin
>1317	Identifier	a
>1318	Callee	copy
>1319	Identifier	copy
>1320	IdentifierDeclStatement	 
>1321	IdentifierDecl	a = ( * it ) . second -> get_pending_actions ( )
>1322	AssignmentExpr	a = ( * it ) . second -> get_pending_actions ( )
>1323	CallExpression	( * it ) . second -> get_pending_actions ( )
>1324	ArgumentList	 
>1325	Callee	( * it ) . second -> get_pending_actions
>1326	PtrMemberAccess	( * it ) . second -> get_pending_actions
>1327	Identifier	get_pending_actions
>1328	MemberAccess	( * it ) . second
>1329	Identifier	second
>1330	UnaryOp	* it
>1331	Identifier	it
>1332	UnaryOperator	*
>1333	Identifier	a
>1334	Identifier	a
>1335	IdentifierDeclType	vec_str_pair_t
>1336	UnaryExpression	 
>1337	Identifier	it
>1338	IncDec	++
>1339	Condition	 
>1340	EqualityExpression	it != m_menus . end ( )
>1341	CallExpression	m_menus . end ( )
>1342	ArgumentList	 
>1343	Callee	m_menus . end
>1344	MemberAccess	m_menus . end
>1345	Identifier	end
>1346	Identifier	m_menus
>1347	Identifier	it
>1348	ForInit	 
>1349	IdentifierDeclStatement	menustore_t 
>1350	IdentifierDecl	it = m_menus . begin ( )
>1351	AssignmentExpr	it = m_menus . begin ( )
>1352	CallExpression	m_menus . begin ( )
>1353	ArgumentList	 
>1354	Callee	m_menus . begin
>1355	MemberAccess	m_menus . begin
>1356	Identifier	begin
>1357	Identifier	m_menus
>1358	Identifier	it
>1359	Identifier	it
>1360	IdentifierDeclType	menustore_t 
>1361	IdentifierDeclStatement	 
>1362	IdentifierDecl	actions
>1363	Identifier	actions
>1364	IdentifierDeclType	vec_str_pair_t
>1382	FunctionDef	MenuSystem 
>1383	ParameterList	 
>1384	ReturnType	bool
>1385	CompoundStatement	 
>1386	IfStatement	if ( ! m_current_menu -> m_parent . empty ( ) )
>1387	ElseStatement	else
>1388	CompoundStatement	 
>1389	ReturnStatement	 
>1390	Identifier	false
>1391	CompoundStatement	 
>1392	ReturnStatement	 
>1393	Identifier	true
>1394	ExpressionStatement	 
>1395	AssignmentExpr	m_current_menu = m_menus [ m_current_menu -> m_parent ]
>1396	ArrayIndexing	m_menus [ m_current_menu -> m_parent ]
>1397	PtrMemberAccess	m_current_menu -> m_parent
>1398	Identifier	m_parent
>1399	Identifier	m_current_menu
>1400	Identifier	m_menus
>1401	Identifier	m_current_menu
>1402	Condition	 
>1403	UnaryOp	! m_current_menu -> m_parent . empty ( )
>1404	CallExpression	m_current_menu -> m_parent . empty ( )
>1405	ArgumentList	 
>1406	Callee	m_current_menu -> m_parent . empty
>1407	MemberAccess	m_current_menu -> m_parent . empty
>1408	Identifier	empty
>1409	PtrMemberAccess	m_current_menu -> m_parent
>1410	Identifier	m_parent
>1411	Identifier	m_current_menu
>1412	UnaryOperator	!
>1426	FunctionDef	MenuSystem 
>1427	ParameterList	 
>1428	ReturnType	void
>1429	CompoundStatement	 
>1430	IfStatement	if ( ! new_menu . empty ( ) )
>1431	CompoundStatement	 
>1432	ExpressionStatement	 
>1433	AssignmentExpr	m_current_menu = m_menus [ new_menu ]
>1434	ArrayIndexing	m_menus [ new_menu ]
>1435	Identifier	new_menu
>1436	Identifier	m_menus
>1437	Identifier	m_current_menu
>1438	IfStatement	if ( m_current_menu -> m_parent != new_menu )
>1439	CompoundStatement	 
>1440	ExpressionStatement	 
>1441	AssignmentExpr	m_menus [ new_menu ] -> m_parent = menup_to_str ( m_current_menu )
>1442	CallExpression	menup_to_str ( m_current_menu )
>1443	ArgumentList	m_current_menu
>1444	Argument	m_current_menu
>1445	Identifier	m_current_menu
>1446	Callee	menup_to_str
>1447	Identifier	menup_to_str
>1448	PtrMemberAccess	m_menus [ new_menu ] -> m_parent
>1449	Identifier	m_parent
>1450	ArrayIndexing	m_menus [ new_menu ]
>1451	Identifier	new_menu
>1452	Identifier	m_menus
>1453	ExpressionStatement	 
>1454	AssignmentExpr	m_menus [ new_menu ] -> m_selected = 0
>1455	PrimaryExpression	0
>1456	PtrMemberAccess	m_menus [ new_menu ] -> m_selected
>1457	Identifier	m_selected
>1458	ArrayIndexing	m_menus [ new_menu ]
>1459	Identifier	new_menu
>1460	Identifier	m_menus
>1461	Condition	 
>1462	EqualityExpression	m_current_menu -> m_parent != new_menu
>1463	Identifier	new_menu
>1464	PtrMemberAccess	m_current_menu -> m_parent
>1465	Identifier	m_parent
>1466	Identifier	m_current_menu
>1467	Condition	 
>1468	UnaryOp	! new_menu . empty ( )
>1469	CallExpression	new_menu . empty ( )
>1470	ArgumentList	 
>1471	Callee	new_menu . empty
>1472	MemberAccess	new_menu . empty
>1473	Identifier	empty
>1474	Identifier	new_menu
>1475	UnaryOperator	!
>1476	IdentifierDeclStatement	 
>1477	IdentifierDecl	new_menu = m_current_menu -> activate_item ( )
>1478	AssignmentExpr	new_menu = m_current_menu -> activate_item ( )
>1479	CallExpression	m_current_menu -> activate_item ( )
>1480	ArgumentList	 
>1481	Callee	m_current_menu -> activate_item
>1482	PtrMemberAccess	m_current_menu -> activate_item
>1483	Identifier	activate_item
>1484	Identifier	m_current_menu
>1485	Identifier	new_menu
>1486	Identifier	new_menu
>1487	IdentifierDeclType	string
>1505	FunctionDef	MenuSystem 
>1506	ParameterList	int key
>1507	Parameter	 
>1508	Identifier	key
>1509	ParameterType	int
>1510	ReturnType	bool
>1511	CompoundStatement	 
>1512	ReturnStatement	 
>1513	Identifier	false
>1514	SwitchStatement	switch ( key )
>1515	CompoundStatement	 
>1516	BreakStatement	 
>1517	IfStatement	if ( ! up_level ( ) )
>1518	ReturnStatement	 
>1519	Identifier	true
>1520	Condition	 
>1521	UnaryOp	! up_level ( )
>1522	CallExpression	up_level ( )
>1523	ArgumentList	 
>1524	Callee	up_level
>1525	Identifier	up_level
>1526	UnaryOperator	!
>1527	Label	 
>1528	Identifier	GLFW_KEY_ESC
>1529	BreakStatement	 
>1530	ExpressionStatement	 
>1531	CallExpression	activate ( )
>1532	ArgumentList	 
>1533	Callee	activate
>1534	Identifier	activate
>1535	Label	 
>1536	Identifier	GLFW_KEY_KP_ENTER
>1537	Label	 
>1538	Identifier	GLFW_KEY_ENTER
>1539	BreakStatement	 
>1540	IfStatement	if ( m_current_menu )
>1541	ExpressionStatement	 
>1542	CallExpression	m_current_menu -> selected_item_next_option ( )
>1543	ArgumentList	 
>1544	Callee	m_current_menu -> selected_item_next_option
>1545	PtrMemberAccess	m_current_menu -> selected_item_next_option
>1546	Identifier	selected_item_next_option
>1547	Identifier	m_current_menu
>1548	Condition	 
>1549	Identifier	m_current_menu
>1550	Label	 
>1551	Identifier	GLFW_KEY_RIGHT
>1552	BreakStatement	 
>1553	IfStatement	if ( m_current_menu )
>1554	ExpressionStatement	 
>1555	CallExpression	m_current_menu -> selected_item_prev_option ( )
>1556	ArgumentList	 
>1557	Callee	m_current_menu -> selected_item_prev_option
>1558	PtrMemberAccess	m_current_menu -> selected_item_prev_option
>1559	Identifier	selected_item_prev_option
>1560	Identifier	m_current_menu
>1561	Condition	 
>1562	Identifier	m_current_menu
>1563	Label	 
>1564	Identifier	GLFW_KEY_LEFT
>1565	BreakStatement	 
>1566	IfStatement	if ( m_current_menu )
>1567	ExpressionStatement	 
>1568	CallExpression	m_current_menu -> next_item ( )
>1569	ArgumentList	 
>1570	Callee	m_current_menu -> next_item
>1571	PtrMemberAccess	m_current_menu -> next_item
>1572	Identifier	next_item
>1573	Identifier	m_current_menu
>1574	Condition	 
>1575	Identifier	m_current_menu
>1576	Label	 
>1577	Identifier	GLFW_KEY_DOWN
>1578	BreakStatement	 
>1579	IfStatement	if ( m_current_menu )
>1580	ExpressionStatement	 
>1581	CallExpression	m_current_menu -> prev_item ( )
>1582	ArgumentList	 
>1583	Callee	m_current_menu -> prev_item
>1584	PtrMemberAccess	m_current_menu -> prev_item
>1585	Identifier	prev_item
>1586	Identifier	m_current_menu
>1587	Condition	 
>1588	Identifier	m_current_menu
>1589	Label	 
>1590	Identifier	GLFW_KEY_UP
>1591	Condition	 
>1592	Identifier	key
>1601	FunctionDef	MenuSystem 
>1602	ParameterList	int button
>1603	Parameter	 
>1604	Identifier	button
>1605	ParameterType	int
>1606	ReturnType	bool
>1607	CompoundStatement	 
>1608	ReturnStatement	 
>1609	Identifier	false
>1610	IfStatement	if ( button == GLFW_MOUSE_BUTTON_LEFT )
>1611	CompoundStatement	 
>1612	ExpressionStatement	 
>1613	CallExpression	activate ( )
>1614	ArgumentList	 
>1615	Callee	activate
>1616	Identifier	activate
>1617	Condition	 
>1618	EqualityExpression	button == GLFW_MOUSE_BUTTON_LEFT
>1619	Identifier	GLFW_MOUSE_BUTTON_LEFT
>1620	Identifier	button
>1627	FunctionDef	MenuSystem 
>1628	ParameterList	 
>1629	ReturnType	void
>1630	CompoundStatement	 
>1631	IfStatement	if ( m_current_menu )
>1632	CompoundStatement	 
>1633	ExpressionStatement	 
>1634	CallExpression	m_current_menu -> mouse_moved_to ( pos )
>1635	ArgumentList	pos
>1636	Argument	pos
>1637	Identifier	pos
>1638	Callee	m_current_menu -> mouse_moved_to
>1639	PtrMemberAccess	m_current_menu -> mouse_moved_to
>1640	Identifier	mouse_moved_to
>1641	Identifier	m_current_menu
>1642	IdentifierDeclStatement	 
>1643	IdentifierDecl	pos = g_mouse . get_pos ( )
>1644	AssignmentExpr	pos = g_mouse . get_pos ( )
>1645	CallExpression	g_mouse . get_pos ( )
>1646	ArgumentList	 
>1647	Callee	g_mouse . get_pos
>1648	MemberAccess	g_mouse . get_pos
>1649	Identifier	get_pos
>1650	Identifier	g_mouse
>1651	Identifier	pos
>1652	Identifier	pos
>1653	IdentifierDeclType	vec2
>1654	Condition	 
>1655	Identifier	m_current_menu
>1663	FunctionDef	MenuSystem 
>1664	ParameterList	int dir
>1665	Parameter	 
>1666	Identifier	dir
>1667	ParameterType	int
>1668	ReturnType	void
>1669	CompoundStatement	 
>1670	IfStatement	if ( m_current_menu )
>1671	CompoundStatement	 
>1672	IfStatement	if ( dir < 0 )
>1673	ElseStatement	else
>1674	IfStatement	if ( dir > 0 )
>1675	ExpressionStatement	 
>1676	CallExpression	m_current_menu -> next_item ( )
>1677	ArgumentList	 
>1678	Callee	m_current_menu -> next_item
>1679	PtrMemberAccess	m_current_menu -> next_item
>1680	Identifier	next_item
>1681	Identifier	m_current_menu
>1682	Condition	 
>1683	RelationalExpression	dir > 0
>1684	PrimaryExpression	0
>1685	Identifier	dir
>1686	ExpressionStatement	 
>1687	CallExpression	m_current_menu -> prev_item ( )
>1688	ArgumentList	 
>1689	Callee	m_current_menu -> prev_item
>1690	PtrMemberAccess	m_current_menu -> prev_item
>1691	Identifier	prev_item
>1692	Identifier	m_current_menu
>1693	Condition	 
>1694	RelationalExpression	dir < 0
>1695	PrimaryExpression	0
>1696	Identifier	dir
>1697	Condition	 
>1698	Identifier	m_current_menu
>1704	FunctionDef	MenuSystem 
>1705	ParameterList	Menu * menu
>1706	Parameter	 
>1707	Identifier	menu
>1708	ParameterType	Menu *
>1709	ReturnType	string
>1710	CompoundStatement	 
>1711	ReturnStatement	 
>1712	PrimaryExpression	\"\"
>1713	ForStatement	for ( menustore_t 
>1714	CompoundStatement	 
>1715	IfStatement	if ( ( * it ) . second == menu )
>1716	ReturnStatement	 
>1717	MemberAccess	( * it ) . first
>1718	Identifier	first
>1719	UnaryOp	* it
>1720	Identifier	it
>1721	UnaryOperator	*
>1722	Condition	 
>1723	EqualityExpression	( * it ) . second == menu
>1724	Identifier	menu
>1725	MemberAccess	( * it ) . second
>1726	Identifier	second
>1727	UnaryOp	* it
>1728	Identifier	it
>1729	UnaryOperator	*
>1730	UnaryExpression	 
>1731	Identifier	it
>1732	IncDec	++
>1733	Condition	 
>1734	EqualityExpression	it != m_menus . end ( )
>1735	CallExpression	m_menus . end ( )
>1736	ArgumentList	 
>1737	Callee	m_menus . end
>1738	MemberAccess	m_menus . end
>1739	Identifier	end
>1740	Identifier	m_menus
>1741	Identifier	it
>1742	ForInit	 
>1743	IdentifierDeclStatement	menustore_t 
>1744	IdentifierDecl	it = m_menus . begin ( )
>1745	AssignmentExpr	it = m_menus . begin ( )
>1746	CallExpression	m_menus . begin ( )
>1747	ArgumentList	 
>1748	Callee	m_menus . begin
>1749	MemberAccess	m_menus . begin
>1750	Identifier	begin
>1751	Identifier	m_menus
>1752	Identifier	it
>1753	Identifier	it
>1754	IdentifierDeclType	menustore_t 
>1766	FunctionDef	MenuSystem 
>1767	ParameterList	const string & str
>1768	Parameter	 
>1769	Identifier	str
>1770	ParameterType	const string &
>1771	ReturnType	Menu *
>1772	CompoundStatement	 
>1773	ReturnStatement	 
>1774	ArrayIndexing	m_menus [ str ]
>1775	Identifier	str
>1776	Identifier	m_menus
<7=15,8
<8=12,9
<9=11,10
<12=14,13
<21=30,29,22
<22=26,23
<23=25,24
<26=28,27
<30=35,31
<31=32
<32=34,33
<35=60,51,48,36
<36=37
<37=40,38
<38=39
<40=41
<41=43,42
<43=45,44
<45=47,46
<48=50,49
<51=52
<52=59,53
<53=55,54
<55=56
<56=58,57
<60=61
<61=62
<62=67,66,63
<63=65,64
<78=98,79
<79=95,92,89,86,83,80
<80=82,81
<83=85,84
<86=88,87
<89=91,90
<92=94,93
<95=97,96
<108=116,109
<109=113,110
<110=112,111
<113=115,114
<122=124,123
<128=134,133,129
<129=130
<130=132,131
<134=135
<135=136
<136=140,137
<137=138
<138=139
<140=141
<141=143,142
<149=152,151,150
<152=169,153
<153=158,154
<154=155
<155=157,156
<158=159
<159=168,160
<160=167,161
<161=163,162
<163=164
<164=166,165
<169=170
<170=172,171
<179=182,181,180
<182=199,183
<183=195,184
<184=185
<185=194,186
<186=188,187
<188=190,189
<190=191
<191=193,192
<195=196
<196=198,197
<199=200
<200=202,201
<209=212,211,210
<212=283,272,266,244,213
<213=233,214
<214=215
<215=231,216
<216=227,217
<217=218
<218=220,219
<220=224,221
<221=223,222
<224=226,225
<227=228
<228=230,229
<231=232
<233=234
<234=243,235
<235=237,236
<237=238
<238=240,239
<240=242,241
<244=251,245
<245=246
<246=248,247
<248=250,249
<251=252
<252=263,253
<253=262,254
<254=256,255
<256=257
<257=259,258
<259=261,260
<263=265,264
<266=267
<267=269,268
<269=271,270
<272=274,273
<274=275
<275=277,276
<277=278
<278=280,279
<280=282,281
<283=284
<284=291,290,285
<285=289,286
<286=288,287
<310=313,312,311
<313=384,373,367,345,314
<314=334,315
<315=316
<316=332,317
<317=328,318
<318=319
<319=321,320
<321=325,322
<322=324,323
<325=327,326
<328=329
<329=331,330
<332=333
<334=335
<335=344,336
<336=338,337
<338=339
<339=341,340
<341=343,342
<345=361,346
<346=347
<347=358,348
<348=350,349
<350=352,351
<352=353
<353=355,354
<355=357,356
<358=360,359
<361=362
<362=364,363
<364=366,365
<367=368
<368=370,369
<370=372,371
<373=375,374
<375=376
<376=378,377
<378=379
<379=381,380
<381=383,382
<384=385
<385=392,391,386
<386=390,387
<387=389,388
<411=420,419,412
<412=416,413
<413=415,414
<416=418,417
<420=421
<421=422
<422=433,423
<423=424
<424=425
<425=431,426
<426=429,427
<427=428
<429=430
<431=432
<433=434
<434=436,435
<444=447,446,445
<447=457,450,448
<448=449
<450=451
<451=453,452
<453=454
<454=456,455
<457=458
<458=463,462,459
<459=461,460
<469=472,471,470
<472=555,475,473
<473=474
<475=531,527,524,476
<476=515,504,493,477
<477=478
<478=488,479
<479=481,480
<481=485,482
<482=484,483
<485=487,486
<488=492,489
<489=491,490
<493=495,494
<495=496
<496=498,497
<498=499
<499=501,500
<501=503,502
<504=506,505
<506=507
<507=509,508
<509=510
<510=512,511
<512=514,513
<515=516
<516=523,522,517
<517=521,518
<518=520,519
<524=526,525
<527=528
<528=530,529
<531=532
<532=544,533
<533=543,542,534
<534=541,535
<535=537,536
<537=538
<538=540,539
<544=554,553,545
<545=552,546
<546=548,547
<548=549
<549=551,550
<555=556
<556=558,557
<581=584,583,582
<584=667,587,585
<585=586
<587=656,650,588
<588=589
<589=639,618,590
<590=591
<591=607,592
<592=593
<593=601,599,594
<594=595
<595=596
<596=598,597
<599=600
<601=602
<602=604,603
<604=606,605
<607=608
<608=617,609
<609=611,610
<611=612
<612=614,613
<614=616,615
<618=630,619
<619=620
<620=628,621
<621=624,622
<622=623
<624=625
<625=627,626
<628=629
<630=633,631
<631=632
<633=634
<634=636,635
<636=638,637
<639=640
<640=649,641
<641=643,642
<643=644
<644=646,645
<646=648,647
<650=651
<651=652
<652=654,653
<654=655
<656=657
<657=666,658
<658=660,659
<660=661
<661=663,662
<663=665,664
<667=668
<668=675,674,669
<669=673,670
<670=672,671
<691=697,696,692
<692=693
<693=695,694
<697=702,698
<698=699
<699=701,700
<702=703
<703=718,704
<704=717,705
<705=716,706
<706=715,707
<707=714,708
<708=710,709
<710=711
<711=713,712
<728=745,729
<729=742,739,736,733,730
<730=732,731
<733=735,734
<736=738,737
<739=741,740
<742=744,743
<754=763,762,755
<755=759,756
<756=758,757
<759=761,760
<763=1069,1064,1052,1045,776,771,764
<764=765
<765=767,766
<767=768
<768=770,769
<771=772
<772=774,773
<774=775
<776=1037,1026,1023,777
<777=1014,998,991,987,973,969,887,821,787,778
<778=779
<779=783,780
<780=781
<781=782
<783=784
<784=786,785
<787=788
<788=820,819,789
<789=818,790
<790=814,791
<791=807,805,794,792
<792=793
<794=795
<795=797,796
<797=803,798
<798=801,799
<799=800
<801=802
<803=804
<805=806
<807=808
<808=810,809
<810=811
<811=813,812
<814=815
<815=817,816
<821=883,853,822
<822=823
<823=824
<824=825
<825=849,826
<826=842,833,831,829,827
<827=828
<829=830
<831=832
<833=834
<834=840,835
<835=838,836
<836=837
<838=839
<840=841
<842=843
<843=845,844
<845=846
<846=848,847
<849=850
<850=852,851
<853=854
<854=855
<855=879,856
<856=872,863,861,859,857
<857=858
<859=860
<861=862
<863=864
<864=870,865
<865=868,866
<866=867
<868=869
<870=871
<872=873
<873=875,874
<875=876
<876=878,877
<879=880
<880=882,881
<883=884
<884=886,885
<887=958,896,888
<888=889
<889=890
<890=891
<891=895,892
<892=894,893
<896=897
<897=954,918,898
<898=899
<899=900
<900=901
<901=917,902
<902=914,903
<903=913,904
<904=906,905
<906=910,907
<907=909,908
<910=912,911
<914=916,915
<918=934,919
<919=920
<920=933,921
<921=923,922
<923=929,924
<924=927,925
<925=926
<927=928
<929=930
<930=932,931
<934=935
<935=953,936
<936=950,937
<937=949,938
<938=940,939
<940=942,941
<942=946,943
<943=945,944
<946=948,947
<950=952,951
<954=955
<955=957,956
<958=959
<959=968,960
<960=962,961
<962=963
<963=965,964
<965=967,966
<969=970
<970=972,971
<973=983,979,974
<974=975
<975=976
<976=978,977
<979=980
<980=982,981
<983=984
<984=986,985
<987=988
<988=990,989
<991=992
<992=997,996,993
<993=995,994
<998=999
<999=1013,1012,1000
<1000=1011,1001
<1001=1005,1002
<1002=1004,1003
<1005=1007,1006
<1007=1008
<1008=1010,1009
<1014=1015
<1015=1022,1021,1016
<1016=1020,1017
<1017=1019,1018
<1023=1025,1024
<1026=1027
<1027=1036,1028
<1028=1035,1029
<1029=1031,1030
<1031=1032
<1032=1034,1033
<1037=1038
<1038=1039
<1039=1044,1043,1040
<1040=1042,1041
<1045=1046
<1046=1048,1047
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1062,1054
<1054=1055
<1055=1056
<1056=1060,1057
<1057=1058
<1058=1059
<1060=1061
<1062=1063
<1064=1065
<1065=1067,1066
<1067=1068
<1069=1070
<1070=1072,1071
<1072=1073
<1073=1075,1074
<1113=1119,1118,1114
<1114=1115
<1115=1117,1116
<1119=1120
<1120=1152,1143,1140,1121
<1121=1122
<1122=1129,1123
<1123=1125,1124
<1125=1126
<1126=1128,1127
<1129=1130
<1130=1134,1131
<1131=1132
<1132=1133
<1134=1135
<1135=1137,1136
<1137=1139,1138
<1140=1142,1141
<1143=1144
<1144=1151,1145
<1145=1147,1146
<1147=1148
<1148=1150,1149
<1152=1153
<1153=1154
<1154=1159,1158,1155
<1155=1157,1156
<1171=1173,1172
<1177=1186,1185,1178
<1178=1182,1179
<1179=1181,1180
<1182=1184,1183
<1186=1196,1187
<1187=1192,1188
<1188=1189
<1189=1191,1190
<1192=1193
<1193=1195,1194
<1196=1197
<1197=1199,1198
<1199=1201,1200
<1211=1217,1216,1212
<1212=1213
<1213=1215,1214
<1217=1218
<1218=1219
<1219=1223,1220
<1220=1222,1221
<1232=1238,1237,1233
<1233=1234
<1234=1236,1235
<1238=1239
<1239=1249,1240
<1240=1241
<1241=1245,1242
<1242=1243
<1243=1244
<1245=1246
<1246=1248,1247
<1249=1250
<1256=1265,1264,1257
<1257=1261,1258
<1258=1260,1259
<1261=1263,1262
<1265=1266
<1266=1278,1267
<1267=1268
<1268=1274,1269
<1269=1272,1270
<1270=1271
<1272=1273
<1274=1275
<1275=1277,1276
<1278=1279
<1286=1289,1288,1287
<1289=1361,1292,1290
<1290=1291
<1292=1348,1339,1336,1293
<1293=1320,1294
<1294=1295
<1295=1318,1296
<1296=1311,1304,1297
<1297=1298
<1298=1302,1299
<1299=1300
<1300=1301
<1302=1303
<1304=1305
<1305=1307,1306
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1314,1313
<1314=1315
<1315=1317,1316
<1318=1319
<1320=1321
<1321=1335,1334,1322
<1322=1333,1323
<1323=1325,1324
<1325=1326
<1326=1328,1327
<1328=1330,1329
<1330=1332,1331
<1336=1338,1337
<1339=1340
<1340=1347,1341
<1341=1343,1342
<1343=1344
<1344=1346,1345
<1348=1349
<1349=1350
<1350=1360,1359,1351
<1351=1358,1352
<1352=1354,1353
<1354=1355
<1355=1357,1356
<1361=1362
<1362=1364,1363
<1382=1385,1384,1383
<1385=1386
<1386=1402,1391,1387
<1387=1388
<1388=1389
<1389=1390
<1391=1394,1392
<1392=1393
<1394=1395
<1395=1401,1396
<1396=1400,1397
<1397=1399,1398
<1402=1403
<1403=1412,1404
<1404=1406,1405
<1406=1407
<1407=1409,1408
<1409=1411,1410
<1426=1429,1428,1427
<1429=1476,1430
<1430=1467,1431
<1431=1438,1432
<1432=1433
<1433=1437,1434
<1434=1436,1435
<1438=1461,1439
<1439=1453,1440
<1440=1441
<1441=1448,1442
<1442=1446,1443
<1443=1444
<1444=1445
<1446=1447
<1448=1450,1449
<1450=1452,1451
<1453=1454
<1454=1456,1455
<1456=1458,1457
<1458=1460,1459
<1461=1462
<1462=1464,1463
<1464=1466,1465
<1467=1468
<1468=1475,1469
<1469=1471,1470
<1471=1472
<1472=1474,1473
<1476=1477
<1477=1487,1486,1478
<1478=1485,1479
<1479=1481,1480
<1481=1482
<1482=1484,1483
<1505=1511,1510,1506
<1506=1507
<1507=1509,1508
<1511=1514,1512
<1512=1513
<1514=1591,1515
<1515=1589,1579,1578,1576,1566,1565,1563,1553,1552,1550,1540,1539,1537,1535,1530,1529,1527,1517,1516
<1517=1520,1518
<1518=1519
<1520=1521
<1521=1526,1522
<1522=1524,1523
<1524=1525
<1527=1528
<1530=1531
<1531=1533,1532
<1533=1534
<1535=1536
<1537=1538
<1540=1548,1541
<1541=1542
<1542=1544,1543
<1544=1545
<1545=1547,1546
<1548=1549
<1550=1551
<1553=1561,1554
<1554=1555
<1555=1557,1556
<1557=1558
<1558=1560,1559
<1561=1562
<1563=1564
<1566=1574,1567
<1567=1568
<1568=1570,1569
<1570=1571
<1571=1573,1572
<1574=1575
<1576=1577
<1579=1587,1580
<1580=1581
<1581=1583,1582
<1583=1584
<1584=1586,1585
<1587=1588
<1589=1590
<1591=1592
<1601=1607,1606,1602
<1602=1603
<1603=1605,1604
<1607=1610,1608
<1608=1609
<1610=1617,1611
<1611=1612
<1612=1613
<1613=1615,1614
<1615=1616
<1617=1618
<1618=1620,1619
<1627=1630,1629,1628
<1630=1631
<1631=1654,1632
<1632=1642,1633
<1633=1634
<1634=1638,1635
<1635=1636
<1636=1637
<1638=1639
<1639=1641,1640
<1642=1643
<1643=1653,1652,1644
<1644=1651,1645
<1645=1647,1646
<1647=1648
<1648=1650,1649
<1654=1655
<1663=1669,1668,1664
<1664=1665
<1665=1667,1666
<1669=1670
<1670=1697,1671
<1671=1672
<1672=1693,1686,1673
<1673=1674
<1674=1682,1675
<1675=1676
<1676=1678,1677
<1678=1679
<1679=1681,1680
<1682=1683
<1683=1685,1684
<1686=1687
<1687=1689,1688
<1689=1690
<1690=1692,1691
<1693=1694
<1694=1696,1695
<1697=1698
<1704=1710,1709,1705
<1705=1706
<1706=1708,1707
<1710=1713,1711
<1711=1712
<1713=1742,1733,1730,1714
<1714=1715
<1715=1722,1716
<1716=1717
<1717=1719,1718
<1719=1721,1720
<1722=1723
<1723=1725,1724
<1725=1727,1726
<1727=1729,1728
<1730=1732,1731
<1733=1734
<1734=1741,1735
<1735=1737,1736
<1737=1738
<1738=1740,1739
<1742=1743
<1743=1744
<1744=1754,1753,1745
<1745=1752,1746
<1746=1748,1747
<1748=1749
<1749=1751,1750
<1766=1772,1771,1767
<1767=1768
<1768=1770,1769
<1772=1773
<1773=1774
<1774=1776,1775
