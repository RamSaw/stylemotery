>14	FunctionDef	ReadBundleFile (const char * bundle_file , std 
>15	ParameterList	const char * bundle_file , std 
>16	Parameter	 
>17	Identifier	bundle_version
>18	ParameterType	double &
>19	Parameter	 
>20	Identifier	points
>21	ParameterType	std 
>22	Parameter	 
>23	Identifier	cameras
>24	ParameterType	std 
>25	Parameter	 
>26	Identifier	bundle_file
>27	ParameterType	const char *
>28	ReturnType	void
>29	CompoundStatement	 
>30	ExpressionStatement	 
>31	CallExpression	fclose ( f )
>32	ArgumentList	f
>33	Argument	f
>34	Identifier	f
>35	Callee	fclose
>36	Identifier	fclose
>37	ExpressionStatement	 
>38	CallExpression	printf ( \"Num visible
>39	ArgumentList	\"Num visible
>40	Argument	total_num_visible
>41	Identifier	total_num_visible
>42	Argument	\"Num visible
>43	PrimaryExpression	\"Num visible
>44	Callee	printf
>45	Identifier	printf
>46	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>47	CompoundStatement	 
>48	IfStatement	if ( num_visible > 0 )
>49	CompoundStatement	 
>50	ExpressionStatement	 
>51	CallExpression	points . push_back ( pt )
>52	ArgumentList	pt
>53	Argument	pt
>54	Identifier	pt
>55	Callee	points . push_back
>56	MemberAccess	points . push_back
>57	Identifier	push_back
>58	Identifier	points
>59	Condition	 
>60	RelationalExpression	num_visible > 0
>61	PrimaryExpression	0
>62	Identifier	num_visible
>63	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>64	CompoundStatement	 
>65	IfStatement	if ( bundle_version >= 0.3 )
>66	ExpressionStatement	 
>67	CallExpression	fscanf ( f , \"%lf %lf\" , & x , & y )
>68	ArgumentList	f
>69	Argument	& y
>70	UnaryOp	& y
>71	Identifier	y
>72	UnaryOperator	&
>73	Argument	& x
>74	UnaryOp	& x
>75	Identifier	x
>76	UnaryOperator	&
>77	Argument	\"%lf %lf\"
>78	PrimaryExpression	\"%lf %lf\"
>79	Argument	f
>80	Identifier	f
>81	Callee	fscanf
>82	Identifier	fscanf
>83	Condition	 
>84	RelationalExpression	bundle_version >= 0.3
>85	PrimaryExpression	0.3
>86	Identifier	bundle_version
>87	IdentifierDeclStatement	 
>88	IdentifierDecl	y
>89	Identifier	y
>90	IdentifierDeclType	double
>91	IdentifierDecl	x
>92	Identifier	x
>93	IdentifierDeclType	double
>94	ExpressionStatement	 
>95	CallExpression	pt . views . push_back ( ImageKey ( view , key ) )
>96	ArgumentList	ImageKey ( view , key )
>97	Argument	ImageKey ( view , key )
>98	CallExpression	ImageKey ( view , key )
>99	ArgumentList	view
>100	Argument	key
>101	Identifier	key
>102	Argument	view
>103	Identifier	view
>104	Callee	ImageKey
>105	Identifier	ImageKey
>106	Callee	pt . views . push_back
>107	MemberAccess	pt . views . push_back
>108	Identifier	push_back
>109	MemberAccess	pt . views
>110	Identifier	views
>111	Identifier	pt
>112	ExpressionStatement	 
>113	CallExpression	assert ( view >= 0 && view < num_images )
>114	ArgumentList	view >= 0 && view < num_images
>115	Argument	view >= 0 && view < num_images
>116	AndExpression	view >= 0 && view < num_images
>117	RelationalExpression	view < num_images
>118	Identifier	num_images
>119	Identifier	view
>120	RelationalExpression	view >= 0
>121	PrimaryExpression	0
>122	Identifier	view
>123	Callee	assert
>124	Identifier	assert
>125	ExpressionStatement	 
>126	CallExpression	fscanf ( f , \"%d %d\" , & view , & key )
>127	ArgumentList	f
>128	Argument	& key
>129	UnaryOp	& key
>130	Identifier	key
>131	UnaryOperator	&
>132	Argument	& view
>133	UnaryOp	& view
>134	Identifier	view
>135	UnaryOperator	&
>136	Argument	\"%d %d\"
>137	PrimaryExpression	\"%d %d\"
>138	Argument	f
>139	Identifier	f
>140	Callee	fscanf
>141	Identifier	fscanf
>142	IdentifierDeclStatement	 
>143	IdentifierDecl	key
>144	Identifier	key
>145	IdentifierDeclType	int
>146	IdentifierDecl	view
>147	Identifier	view
>148	IdentifierDeclType	int
>149	IncDecOp	 
>150	IncDec	++
>151	Identifier	j
>152	Condition	 
>153	RelationalExpression	j < num_visible
>154	Identifier	num_visible
>155	Identifier	j
>156	ForInit	 
>157	IdentifierDeclStatement	int j = 0 ;
>158	IdentifierDecl	j = 0
>159	AssignmentExpr	j = 0
>160	PrimaryExpression	0
>161	Identifier	j
>162	Identifier	j
>163	IdentifierDeclType	int
>164	ExpressionStatement	 
>165	AssignmentExpr	total_num_visible += num_visible
>166	Identifier	num_visible
>167	Identifier	total_num_visible
>168	ExpressionStatement	 
>169	CallExpression	fscanf ( f , \"%d\" , & num_visible )
>170	ArgumentList	f
>171	Argument	& num_visible
>172	UnaryOp	& num_visible
>173	Identifier	num_visible
>174	UnaryOperator	&
>175	Argument	\"%d\"
>176	PrimaryExpression	\"%d\"
>177	Argument	f
>178	Identifier	f
>179	Callee	fscanf
>180	Identifier	fscanf
>181	IdentifierDeclStatement	 
>182	IdentifierDecl	num_visible
>183	Identifier	num_visible
>184	IdentifierDeclType	int
>185	ExpressionStatement	 
>186	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , pt . color + 0 , pt . color + 1 , pt . color + 2 )
>187	ArgumentList	f
>188	Argument	pt . color + 2
>189	AdditiveExpression	pt . color + 2
>190	PrimaryExpression	2
>191	MemberAccess	pt . color
>192	Identifier	color
>193	Identifier	pt
>194	Argument	pt . color + 1
>195	AdditiveExpression	pt . color + 1
>196	PrimaryExpression	1
>197	MemberAccess	pt . color
>198	Identifier	color
>199	Identifier	pt
>200	Argument	pt . color + 0
>201	AdditiveExpression	pt . color + 0
>202	PrimaryExpression	0
>203	MemberAccess	pt . color
>204	Identifier	color
>205	Identifier	pt
>206	Argument	\"%lf %lf %lf\n\"
>207	PrimaryExpression	\"%lf %lf %lf\n\"
>208	Argument	f
>209	Identifier	f
>210	Callee	fscanf
>211	Identifier	fscanf
>212	ExpressionStatement	 
>213	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , pt . pos + 0 , pt . pos + 1 , pt . pos + 2 )
>214	ArgumentList	f
>215	Argument	pt . pos + 2
>216	AdditiveExpression	pt . pos + 2
>217	PrimaryExpression	2
>218	MemberAccess	pt . pos
>219	Identifier	pos
>220	Identifier	pt
>221	Argument	pt . pos + 1
>222	AdditiveExpression	pt . pos + 1
>223	PrimaryExpression	1
>224	MemberAccess	pt . pos
>225	Identifier	pos
>226	Identifier	pt
>227	Argument	pt . pos + 0
>228	AdditiveExpression	pt . pos + 0
>229	PrimaryExpression	0
>230	MemberAccess	pt . pos
>231	Identifier	pos
>232	Identifier	pt
>233	Argument	\"%lf %lf %lf\n\"
>234	PrimaryExpression	\"%lf %lf %lf\n\"
>235	Argument	f
>236	Identifier	f
>237	Callee	fscanf
>238	Identifier	fscanf
>239	IdentifierDeclStatement	 
>240	IdentifierDecl	pt
>241	Identifier	pt
>242	IdentifierDeclType	point_t
>243	IncDecOp	 
>244	IncDec	++
>245	Identifier	i
>246	Condition	 
>247	RelationalExpression	i < num_points
>248	Identifier	num_points
>249	Identifier	i
>250	ForInit	 
>251	IdentifierDeclStatement	int i = 0 ;
>252	IdentifierDecl	i = 0
>253	AssignmentExpr	i = 0
>254	PrimaryExpression	0
>255	Identifier	i
>256	Identifier	i
>257	IdentifierDeclType	int
>258	IdentifierDeclStatement	 
>259	IdentifierDecl	total_num_visible = 0
>260	AssignmentExpr	total_num_visible = 0
>261	PrimaryExpression	0
>262	Identifier	total_num_visible
>263	Identifier	total_num_visible
>264	IdentifierDeclType	int
>265	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>266	CompoundStatement	 
>267	ExpressionStatement	 
>268	CallExpression	cameras . push_back ( cam )
>269	ArgumentList	cam
>270	Argument	cam
>271	Identifier	cam
>272	Callee	cameras . push_back
>273	MemberAccess	cameras . push_back
>274	Identifier	push_back
>275	Identifier	cameras
>276	ExpressionStatement	 
>277	CallExpression	memcpy ( cam . t , t , sizeof ( double ) * 3 )
>278	ArgumentList	cam . t
>279	Argument	sizeof ( double ) * 3
>280	MultiplicativeExpression	sizeof ( double ) * 3
>281	PrimaryExpression	3
>282	SizeofExpr	sizeof ( double )
>283	SizeofOperand	double
>284	Sizeof	sizeof
>285	Argument	t
>286	Identifier	t
>287	Argument	cam . t
>288	MemberAccess	cam . t
>289	Identifier	t
>290	Identifier	cam
>291	Callee	memcpy
>292	Identifier	memcpy
>293	ExpressionStatement	 
>294	CallExpression	memcpy ( cam . R , R , sizeof ( double ) * 9 )
>295	ArgumentList	cam . R
>296	Argument	sizeof ( double ) * 9
>297	MultiplicativeExpression	sizeof ( double ) * 9
>298	PrimaryExpression	9
>299	SizeofExpr	sizeof ( double )
>300	SizeofOperand	double
>301	Sizeof	sizeof
>302	Argument	R
>303	Identifier	R
>304	Argument	cam . R
>305	MemberAccess	cam . R
>306	Identifier	R
>307	Identifier	cam
>308	Callee	memcpy
>309	Identifier	memcpy
>310	ExpressionStatement	 
>311	AssignmentExpr	cam . f = focal_length
>312	Identifier	focal_length
>313	MemberAccess	cam . f
>314	Identifier	f
>315	Identifier	cam
>316	IdentifierDeclStatement	 
>317	IdentifierDecl	cam
>318	Identifier	cam
>319	IdentifierDeclType	camera_params_t
>320	ExpressionStatement	 
>321	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , t + 0 , t + 1 , t + 2 )
>322	ArgumentList	f
>323	Argument	t + 2
>324	AdditiveExpression	t + 2
>325	PrimaryExpression	2
>326	Identifier	t
>327	Argument	t + 1
>328	AdditiveExpression	t + 1
>329	PrimaryExpression	1
>330	Identifier	t
>331	Argument	t + 0
>332	AdditiveExpression	t + 0
>333	PrimaryExpression	0
>334	Identifier	t
>335	Argument	\"%lf %lf %lf\n\"
>336	PrimaryExpression	\"%lf %lf %lf\n\"
>337	Argument	f
>338	Identifier	f
>339	Callee	fscanf
>340	Identifier	fscanf
>341	ExpressionStatement	 
>342	CallExpression	fscanf ( f , \"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\" , R + 0 , R + 1 , R + 2 , R + 3 , R + 4 , R + 5 , R + 6 , \
>343	ArgumentList	f
>344	Argument	R + 8
>345	AdditiveExpression	R + 8
>346	PrimaryExpression	8
>347	Identifier	R
>348	Argument	R + 7
>349	AdditiveExpression	R + 7
>350	PrimaryExpression	7
>351	Identifier	R
>352	Argument	R + 6
>353	AdditiveExpression	R + 6
>354	PrimaryExpression	6
>355	Identifier	R
>356	Argument	R + 5
>357	AdditiveExpression	R + 5
>358	PrimaryExpression	5
>359	Identifier	R
>360	Argument	R + 4
>361	AdditiveExpression	R + 4
>362	PrimaryExpression	4
>363	Identifier	R
>364	Argument	R + 3
>365	AdditiveExpression	R + 3
>366	PrimaryExpression	3
>367	Identifier	R
>368	Argument	R + 2
>369	AdditiveExpression	R + 2
>370	PrimaryExpression	2
>371	Identifier	R
>372	Argument	R + 1
>373	AdditiveExpression	R + 1
>374	PrimaryExpression	1
>375	Identifier	R
>376	Argument	R + 0
>377	AdditiveExpression	R + 0
>378	PrimaryExpression	0
>379	Identifier	R
>380	Argument	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>381	PrimaryExpression	\"%lf %lf %lf\n%lf %lf %lf\n%lf %lf %lf\n\"
>382	Argument	f
>383	Identifier	f
>384	Callee	fscanf
>385	Identifier	fscanf
>386	IfStatement	if ( bundle_version < 0.2 )
>387	ElseStatement	else
>388	CompoundStatement	 
>389	ExpressionStatement	 
>390	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , & focal_length , & k0 , & k1 )
>391	ArgumentList	f
>392	Argument	& k1
>393	UnaryOp	& k1
>394	Identifier	k1
>395	UnaryOperator	&
>396	Argument	& k0
>397	UnaryOp	& k0
>398	Identifier	k0
>399	UnaryOperator	&
>400	Argument	& focal_length
>401	UnaryOp	& focal_length
>402	Identifier	focal_length
>403	UnaryOperator	&
>404	Argument	\"%lf %lf %lf\n\"
>405	PrimaryExpression	\"%lf %lf %lf\n\"
>406	Argument	f
>407	Identifier	f
>408	Callee	fscanf
>409	Identifier	fscanf
>410	CompoundStatement	 
>411	ExpressionStatement	 
>412	CallExpression	fscanf ( f , \"%lf\n\" , & focal_length )
>413	ArgumentList	f
>414	Argument	& focal_length
>415	UnaryOp	& focal_length
>416	Identifier	focal_length
>417	UnaryOperator	&
>418	Argument	\"%lf\n\"
>419	PrimaryExpression	\"%lf\n\"
>420	Argument	f
>421	Identifier	f
>422	Callee	fscanf
>423	Identifier	fscanf
>424	Condition	 
>425	RelationalExpression	bundle_version < 0.2
>426	PrimaryExpression	0.2
>427	Identifier	bundle_version
>428	IdentifierDeclStatement	 
>429	IdentifierDecl	t [ 3 ]
>430	PrimaryExpression	3
>431	Identifier	t
>432	IdentifierDeclType	double [ 3 ]
>433	IdentifierDeclStatement	 
>434	IdentifierDecl	R [ 9 ]
>435	PrimaryExpression	9
>436	Identifier	R
>437	IdentifierDeclType	double [ 9 ]
>438	IdentifierDeclStatement	 
>439	IdentifierDecl	k1
>440	Identifier	k1
>441	IdentifierDeclType	double
>442	IdentifierDecl	k0
>443	Identifier	k0
>444	IdentifierDeclType	double
>445	IdentifierDecl	focal_length
>446	Identifier	focal_length
>447	IdentifierDeclType	double
>448	IncDecOp	 
>449	IncDec	++
>450	Identifier	i
>451	Condition	 
>452	RelationalExpression	i < num_images
>453	Identifier	num_images
>454	Identifier	i
>455	ForInit	 
>456	IdentifierDeclStatement	int i = 0 ;
>457	IdentifierDecl	i = 0
>458	AssignmentExpr	i = 0
>459	PrimaryExpression	0
>460	Identifier	i
>461	Identifier	i
>462	IdentifierDeclType	int
>463	ExpressionStatement	 
>464	CallExpression	printf ( \"[ReadBundleFile] Reading %d images and %d points...\n\" , num_images , num_points )
>465	ArgumentList	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>466	Argument	num_points
>467	Identifier	num_points
>468	Argument	num_images
>469	Identifier	num_images
>470	Argument	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>471	PrimaryExpression	\"[ReadBundleFile] Reading %d images and %d points...\n\"
>472	Callee	printf
>473	Identifier	printf
>474	IfStatement	if ( first_line [ 0 ] == '#' )
>475	ElseStatement	else
>476	IfStatement	if ( first_line [ 0 ] == 'v' )
>477	ElseStatement	else
>478	CompoundStatement	 
>479	ExpressionStatement	 
>480	CallExpression	sscanf ( first_line , \"%d %d\n\" , & num_images , & num_points )
>481	ArgumentList	first_line
>482	Argument	& num_points
>483	UnaryOp	& num_points
>484	Identifier	num_points
>485	UnaryOperator	&
>486	Argument	& num_images
>487	UnaryOp	& num_images
>488	Identifier	num_images
>489	UnaryOperator	&
>490	Argument	\"%d %d\n\"
>491	PrimaryExpression	\"%d %d\n\"
>492	Argument	first_line
>493	Identifier	first_line
>494	Callee	sscanf
>495	Identifier	sscanf
>496	ExpressionStatement	 
>497	AssignmentExpr	bundle_version = 0.1
>498	PrimaryExpression	0.1
>499	Identifier	bundle_version
>500	CompoundStatement	 
>501	ExpressionStatement	 
>502	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>503	ArgumentList	f
>504	Argument	& num_points
>505	UnaryOp	& num_points
>506	Identifier	num_points
>507	UnaryOperator	&
>508	Argument	& num_images
>509	UnaryOp	& num_images
>510	Identifier	num_images
>511	UnaryOperator	&
>512	Argument	\"%d %d\n\"
>513	PrimaryExpression	\"%d %d\n\"
>514	Argument	f
>515	Identifier	f
>516	Callee	fscanf
>517	Identifier	fscanf
>518	ExpressionStatement	 
>519	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>520	ArgumentList	\"[ReadBundleFile] Bundle version
>521	Argument	version
>522	Identifier	version
>523	Argument	\"[ReadBundleFile] Bundle version
>524	PrimaryExpression	\"[ReadBundleFile] Bundle version
>525	Callee	printf
>526	Identifier	printf
>527	ExpressionStatement	 
>528	AssignmentExpr	bundle_version = version
>529	Identifier	version
>530	Identifier	bundle_version
>531	ExpressionStatement	 
>532	CallExpression	sscanf ( first_line , \"v%lf\" , & version )
>533	ArgumentList	first_line
>534	Argument	& version
>535	UnaryOp	& version
>536	Identifier	version
>537	UnaryOperator	&
>538	Argument	\"v%lf\"
>539	PrimaryExpression	\"v%lf\"
>540	Argument	first_line
>541	Identifier	first_line
>542	Callee	sscanf
>543	Identifier	sscanf
>544	IdentifierDeclStatement	 
>545	IdentifierDecl	version
>546	Identifier	version
>547	IdentifierDeclType	double
>548	Condition	 
>549	EqualityExpression	first_line [ 0 ] == 'v'
>550	PrimaryExpression	'v'
>551	ArrayIndexing	first_line [ 0 ]
>552	PrimaryExpression	0
>553	Identifier	first_line
>554	CompoundStatement	 
>555	ExpressionStatement	 
>556	CallExpression	fscanf ( f , \"%d %d\n\" , & num_images , & num_points )
>557	ArgumentList	f
>558	Argument	& num_points
>559	UnaryOp	& num_points
>560	Identifier	num_points
>561	UnaryOperator	&
>562	Argument	& num_images
>563	UnaryOp	& num_images
>564	Identifier	num_images
>565	UnaryOperator	&
>566	Argument	\"%d %d\n\"
>567	PrimaryExpression	\"%d %d\n\"
>568	Argument	f
>569	Identifier	f
>570	Callee	fscanf
>571	Identifier	fscanf
>572	ExpressionStatement	 
>573	CallExpression	printf ( \"[ReadBundleFile] Bundle version
>574	ArgumentList	\"[ReadBundleFile] Bundle version
>575	Argument	version
>576	Identifier	version
>577	Argument	\"[ReadBundleFile] Bundle version
>578	PrimaryExpression	\"[ReadBundleFile] Bundle version
>579	Callee	printf
>580	Identifier	printf
>581	ExpressionStatement	 
>582	AssignmentExpr	bundle_version = version
>583	Identifier	version
>584	Identifier	bundle_version
>585	ExpressionStatement	 
>586	CallExpression	sscanf ( first_line , \"# Bundle file v%lf\" , & version )
>587	ArgumentList	first_line
>588	Argument	& version
>589	UnaryOp	& version
>590	Identifier	version
>591	UnaryOperator	&
>592	Argument	\"# Bundle file v%lf\"
>593	PrimaryExpression	\"# Bundle file v%lf\"
>594	Argument	first_line
>595	Identifier	first_line
>596	Callee	sscanf
>597	Identifier	sscanf
>598	IdentifierDeclStatement	 
>599	IdentifierDecl	version
>600	Identifier	version
>601	IdentifierDeclType	double
>602	Condition	 
>603	EqualityExpression	first_line [ 0 ] == '#'
>604	PrimaryExpression	'#'
>605	ArrayIndexing	first_line [ 0 ]
>606	PrimaryExpression	0
>607	Identifier	first_line
>608	ExpressionStatement	 
>609	CallExpression	fgets ( first_line , 256 , f )
>610	ArgumentList	first_line
>611	Argument	f
>612	Identifier	f
>613	Argument	256
>614	PrimaryExpression	256
>615	Argument	first_line
>616	Identifier	first_line
>617	Callee	fgets
>618	Identifier	fgets
>619	IdentifierDeclStatement	 
>620	IdentifierDecl	first_line [ 256 ]
>621	PrimaryExpression	256
>622	Identifier	first_line
>623	IdentifierDeclType	char [ 256 ]
>624	IdentifierDeclStatement	 
>625	IdentifierDecl	num_points
>626	Identifier	num_points
>627	IdentifierDeclType	int
>628	IdentifierDecl	num_images
>629	Identifier	num_images
>630	IdentifierDeclType	int
>631	IfStatement	if ( f == NULL )
>632	CompoundStatement	 
>633	ReturnStatement	 
>634	ExpressionStatement	 
>635	CallExpression	printf ( \"Error opening file %s for reading\n\" , bundle_file )
>636	ArgumentList	\"Error opening file %s for reading\n\"
>637	Argument	bundle_file
>638	Identifier	bundle_file
>639	Argument	\"Error opening file %s for reading\n\"
>640	PrimaryExpression	\"Error opening file %s for reading\n\"
>641	Callee	printf
>642	Identifier	printf
>643	Condition	 
>644	EqualityExpression	f == NULL
>645	Identifier	NULL
>646	Identifier	f
>647	IdentifierDeclStatement	 
>648	IdentifierDecl	* f = fopen ( bundle_file , \"r\" )
>649	AssignmentExpr	* f = fopen ( bundle_file , \"r\" )
>650	CallExpression	fopen ( bundle_file , \"r\" )
>651	ArgumentList	bundle_file
>652	Argument	\"r\"
>653	PrimaryExpression	\"r\"
>654	Argument	bundle_file
>655	Identifier	bundle_file
>656	Callee	fopen
>657	Identifier	fopen
>658	Identifier	f
>659	Identifier	f
>660	IdentifierDeclType	FILE *
>709	FunctionDef	WriteVisFile (const char * vis_file , std 
>710	ParameterList	const char * vis_file , std 
>711	Parameter	 
>712	Identifier	points
>713	ParameterType	std 
>714	Parameter	 
>715	Identifier	cameras
>716	ParameterType	std 
>717	Parameter	 
>718	Identifier	vis_file
>719	ParameterType	const char *
>720	ReturnType	void
>721	CompoundStatement	 
>722	ExpressionStatement	 
>723	CallExpression	fclose ( f )
>724	ArgumentList	f
>725	Argument	f
>726	Identifier	f
>727	Callee	fclose
>728	Identifier	fclose
>729	ForStatement	for ( size_t i = 0 ; i < nCameras ; i ++ )
>730	CompoundStatement	 
>731	ExpressionStatement	 
>732	CallExpression	fprintf ( f , \"\n\" )
>733	ArgumentList	f
>734	Argument	\"\n\"
>735	PrimaryExpression	\"\n\"
>736	Argument	f
>737	Identifier	f
>738	Callee	fprintf
>739	Identifier	fprintf
>740	ForStatement	for ( size_t j = 0 ; j < nVis ; j ++ )
>741	CompoundStatement	 
>742	ExpressionStatement	 
>743	CallExpression	fprintf ( f , \" %d\" , vis [ j ] )
>744	ArgumentList	f
>745	Argument	vis [ j ]
>746	ArrayIndexing	vis [ j ]
>747	Identifier	j
>748	Identifier	vis
>749	Argument	\" %d\"
>750	PrimaryExpression	\" %d\"
>751	Argument	f
>752	Identifier	f
>753	Callee	fprintf
>754	Identifier	fprintf
>755	IncDecOp	 
>756	IncDec	++
>757	Identifier	j
>758	Condition	 
>759	RelationalExpression	j < nVis
>760	Identifier	nVis
>761	Identifier	j
>762	ForInit	 
>763	IdentifierDeclStatement	size_t j = 0 ;
>764	IdentifierDecl	j = 0
>765	AssignmentExpr	j = 0
>766	PrimaryExpression	0
>767	Identifier	j
>768	Identifier	j
>769	IdentifierDeclType	size_t
>770	ExpressionStatement	 
>771	CallExpression	fprintf ( f , \"%lu %lu\" , i , nVis )
>772	ArgumentList	f
>773	Argument	nVis
>774	Identifier	nVis
>775	Argument	i
>776	Identifier	i
>777	Argument	\"%lu %lu\"
>778	PrimaryExpression	\"%lu %lu\"
>779	Argument	f
>780	Identifier	f
>781	Callee	fprintf
>782	Identifier	fprintf
>783	IdentifierDeclStatement	 
>784	IdentifierDecl	nVis = vis . size ( )
>785	AssignmentExpr	nVis = vis . size ( )
>786	CallExpression	vis . size ( )
>787	ArgumentList	 
>788	Callee	vis . size
>789	MemberAccess	vis . size
>790	Identifier	size
>791	Identifier	vis
>792	Identifier	nVis
>793	Identifier	nVis
>794	IdentifierDeclType	size_t
>795	ForStatement	for ( size_t j = 0 ; j < nCameras ; j ++ )
>796	CompoundStatement	 
>797	IfStatement	if ( matches [ i * nCameras + j ] >= MATCH_THRESHOLD )
>798	ExpressionStatement	 
>799	CallExpression	vis . push_back ( j )
>800	ArgumentList	j
>801	Argument	j
>802	Identifier	j
>803	Callee	vis . push_back
>804	MemberAccess	vis . push_back
>805	Identifier	push_back
>806	Identifier	vis
>807	Condition	 
>808	RelationalExpression	matches [ i * nCameras + j ] >= MATCH_THRESHOLD
>809	Identifier	MATCH_THRESHOLD
>810	ArrayIndexing	matches [ i * nCameras + j ]
>811	AdditiveExpression	i * nCameras + j
>812	Identifier	j
>813	MultiplicativeExpression	i * nCameras
>814	Identifier	nCameras
>815	Identifier	i
>816	Identifier	matches
>817	IncDecOp	 
>818	IncDec	++
>819	Identifier	j
>820	Condition	 
>821	RelationalExpression	j < nCameras
>822	Identifier	nCameras
>823	Identifier	j
>824	ForInit	 
>825	IdentifierDeclStatement	size_t j = 0 ;
>826	IdentifierDecl	j = 0
>827	AssignmentExpr	j = 0
>828	PrimaryExpression	0
>829	Identifier	j
>830	Identifier	j
>831	IdentifierDeclType	size_t
>832	IdentifierDeclStatement	 
>833	IdentifierDecl	vis
>834	Identifier	vis
>835	IdentifierDeclType	std 
>836	IncDecOp	 
>837	IncDec	++
>838	Identifier	i
>839	Condition	 
>840	RelationalExpression	i < nCameras
>841	Identifier	nCameras
>842	Identifier	i
>843	ForInit	 
>844	IdentifierDeclStatement	size_t i = 0 ;
>845	IdentifierDecl	i = 0
>846	AssignmentExpr	i = 0
>847	PrimaryExpression	0
>848	Identifier	i
>849	Identifier	i
>850	IdentifierDeclType	size_t
>851	IdentifierDeclStatement	 
>852	IdentifierDecl	MATCH_THRESHOLD = 32
>853	AssignmentExpr	MATCH_THRESHOLD = 32
>854	PrimaryExpression	32
>855	Identifier	MATCH_THRESHOLD
>856	Identifier	MATCH_THRESHOLD
>857	IdentifierDeclType	const unsigned int
>858	ExpressionStatement	 
>859	CallExpression	fprintf ( f , \"%lu\n\" , nCameras )
>860	ArgumentList	f
>861	Argument	nCameras
>862	Identifier	nCameras
>863	Argument	\"%lu\n\"
>864	PrimaryExpression	\"%lu\n\"
>865	Argument	f
>866	Identifier	f
>867	Callee	fprintf
>868	Identifier	fprintf
>869	ExpressionStatement	 
>870	CallExpression	fprintf ( f , \"VISDATA\n\" )
>871	ArgumentList	f
>872	Argument	\"VISDATA\n\"
>873	PrimaryExpression	\"VISDATA\n\"
>874	Argument	f
>875	Identifier	f
>876	Callee	fprintf
>877	Identifier	fprintf
>878	ForStatement	for ( size_t i = 0 ; i < nPoints ; i ++ )
>879	CompoundStatement	 
>880	ForStatement	for ( size_t j = 0 ; j < nViews ; j ++ )
>881	CompoundStatement	 
>882	ForStatement	for ( size_t k = j + 1 ; k < nViews ; k ++ )
>883	CompoundStatement	 
>884	ExpressionStatement	 
>885	IncDecOp	matches [ i2 * nCameras + i1 ] ++
>886	IncDec	++
>887	ArrayIndexing	matches [ i2 * nCameras + i1 ]
>888	AdditiveExpression	i2 * nCameras + i1
>889	Identifier	i1
>890	MultiplicativeExpression	i2 * nCameras
>891	Identifier	nCameras
>892	Identifier	i2
>893	Identifier	matches
>894	ExpressionStatement	 
>895	IncDecOp	matches [ i1 * nCameras + i2 ] ++
>896	IncDec	++
>897	ArrayIndexing	matches [ i1 * nCameras + i2 ]
>898	AdditiveExpression	i1 * nCameras + i2
>899	Identifier	i2
>900	MultiplicativeExpression	i1 * nCameras
>901	Identifier	nCameras
>902	Identifier	i1
>903	Identifier	matches
>904	IdentifierDeclStatement	 
>905	IdentifierDecl	i2 = points [ i ] . views [ k ] . first
>906	AssignmentExpr	i2 = points [ i ] . views [ k ] . first
>907	MemberAccess	points [ i ] . views [ k ] . first
>908	Identifier	first
>909	ArrayIndexing	points [ i ] . views [ k ]
>910	Identifier	k
>911	MemberAccess	points [ i ] . views
>912	Identifier	views
>913	ArrayIndexing	points [ i ]
>914	Identifier	i
>915	Identifier	points
>916	Identifier	i2
>917	Identifier	i2
>918	IdentifierDeclType	int
>919	IfStatement	if ( j == k )
>920	ContinueStatement	 
>921	Condition	 
>922	EqualityExpression	j == k
>923	Identifier	k
>924	Identifier	j
>925	IncDecOp	 
>926	IncDec	++
>927	Identifier	k
>928	Condition	 
>929	RelationalExpression	k < nViews
>930	Identifier	nViews
>931	Identifier	k
>932	ForInit	 
>933	IdentifierDeclStatement	size_t k = j + 1 ;
>934	IdentifierDecl	k = j + 1
>935	AssignmentExpr	k = j + 1
>936	AdditiveExpression	j + 1
>937	PrimaryExpression	1
>938	Identifier	j
>939	Identifier	k
>940	Identifier	k
>941	IdentifierDeclType	size_t
>942	IdentifierDeclStatement	 
>943	IdentifierDecl	i1 = points [ i ] . views [ j ] . first
>944	AssignmentExpr	i1 = points [ i ] . views [ j ] . first
>945	MemberAccess	points [ i ] . views [ j ] . first
>946	Identifier	first
>947	ArrayIndexing	points [ i ] . views [ j ]
>948	Identifier	j
>949	MemberAccess	points [ i ] . views
>950	Identifier	views
>951	ArrayIndexing	points [ i ]
>952	Identifier	i
>953	Identifier	points
>954	Identifier	i1
>955	Identifier	i1
>956	IdentifierDeclType	int
>957	IncDecOp	 
>958	IncDec	++
>959	Identifier	j
>960	Condition	 
>961	RelationalExpression	j < nViews
>962	Identifier	nViews
>963	Identifier	j
>964	ForInit	 
>965	IdentifierDeclStatement	size_t j = 0 ;
>966	IdentifierDecl	j = 0
>967	AssignmentExpr	j = 0
>968	PrimaryExpression	0
>969	Identifier	j
>970	Identifier	j
>971	IdentifierDeclType	size_t
>972	IdentifierDeclStatement	 
>973	IdentifierDecl	nViews = points [ i ] . views . size ( )
>974	AssignmentExpr	nViews = points [ i ] . views . size ( )
>975	CallExpression	points [ i ] . views . size ( )
>976	ArgumentList	 
>977	Callee	points [ i ] . views . size
>978	MemberAccess	points [ i ] . views . size
>979	Identifier	size
>980	MemberAccess	points [ i ] . views
>981	Identifier	views
>982	ArrayIndexing	points [ i ]
>983	Identifier	i
>984	Identifier	points
>985	Identifier	nViews
>986	Identifier	nViews
>987	IdentifierDeclType	size_t
>988	IncDecOp	 
>989	IncDec	++
>990	Identifier	i
>991	Condition	 
>992	RelationalExpression	i < nPoints
>993	Identifier	nPoints
>994	Identifier	i
>995	ForInit	 
>996	IdentifierDeclStatement	size_t i = 0 ;
>997	IdentifierDecl	i = 0
>998	AssignmentExpr	i = 0
>999	PrimaryExpression	0
>1000	Identifier	i
>1001	Identifier	i
>1002	IdentifierDeclType	size_t
>1003	ForStatement	for ( size_t i = 0 ; i < nCameras ; i ++ )
>1004	CompoundStatement	 
>1005	ForStatement	for ( size_t j = 0 ; j < nCameras ; j ++ )
>1006	CompoundStatement	 
>1007	ExpressionStatement	 
>1008	AssignmentExpr	matches [ i * nCameras + j ] = 0
>1009	PrimaryExpression	0
>1010	ArrayIndexing	matches [ i * nCameras + j ]
>1011	AdditiveExpression	i * nCameras + j
>1012	Identifier	j
>1013	MultiplicativeExpression	i * nCameras
>1014	Identifier	nCameras
>1015	Identifier	i
>1016	Identifier	matches
>1017	IncDecOp	 
>1018	IncDec	++
>1019	Identifier	j
>1020	Condition	 
>1021	RelationalExpression	j < nCameras
>1022	Identifier	nCameras
>1023	Identifier	j
>1024	ForInit	 
>1025	IdentifierDeclStatement	size_t j = 0 ;
>1026	IdentifierDecl	j = 0
>1027	AssignmentExpr	j = 0
>1028	PrimaryExpression	0
>1029	Identifier	j
>1030	Identifier	j
>1031	IdentifierDeclType	size_t
>1032	IncDecOp	 
>1033	IncDec	++
>1034	Identifier	i
>1035	Condition	 
>1036	RelationalExpression	i < nCameras
>1037	Identifier	nCameras
>1038	Identifier	i
>1039	ForInit	 
>1040	IdentifierDeclStatement	size_t i = 0 ;
>1041	IdentifierDecl	i = 0
>1042	AssignmentExpr	i = 0
>1043	PrimaryExpression	0
>1044	Identifier	i
>1045	Identifier	i
>1046	IdentifierDeclType	size_t
>1047	IdentifierDeclStatement	 
>1048	IdentifierDecl	* matches = new unsigned int [ nCameras * nCameras ]
>1049	AssignmentExpr	* matches = new unsigned int [ nCameras * nCameras ]
>1050	MultiplicativeExpression	nCameras * nCameras
>1051	Identifier	nCameras
>1052	Identifier	nCameras
>1053	Identifier	matches
>1054	Identifier	matches
>1055	IdentifierDeclType	unsigned int *
>1056	IfStatement	if ( ! f )
>1057	CompoundStatement	 
>1058	ReturnStatement	 
>1059	ExpressionStatement	 
>1060	Statement	 
>1061	Statement	 
>1062	Statement	 
>1063	Statement	 
>1064	Statement	 
>1065	Statement	 
>1066	Statement	 
>1067	Condition	 
>1068	UnaryOp	! f
>1069	Identifier	f
>1070	UnaryOperator	!
>1071	IdentifierDeclStatement	 
>1072	IdentifierDecl	* f = fopen ( vis_file , \"w\" )
>1073	AssignmentExpr	* f = fopen ( vis_file , \"w\" )
>1074	CallExpression	fopen ( vis_file , \"w\" )
>1075	ArgumentList	vis_file
>1076	Argument	\"w\"
>1077	PrimaryExpression	\"w\"
>1078	Argument	vis_file
>1079	Identifier	vis_file
>1080	Callee	fopen
>1081	Identifier	fopen
>1082	Identifier	f
>1083	Identifier	f
>1084	IdentifierDeclType	FILE *
>1085	ExpressionStatement	 
>1086	CallExpression	printf ( \"Num cameras
>1087	ArgumentList	\"Num cameras
>1088	Argument	nCameras
>1089	Identifier	nCameras
>1090	Argument	\"Num cameras
>1091	PrimaryExpression	\"Num cameras
>1092	Callee	printf
>1093	Identifier	printf
>1094	IdentifierDeclStatement	 
>1095	IdentifierDecl	nPoints = points . size ( )
>1096	AssignmentExpr	nPoints = points . size ( )
>1097	CallExpression	points . size ( )
>1098	ArgumentList	 
>1099	Callee	points . size
>1100	MemberAccess	points . size
>1101	Identifier	size
>1102	Identifier	points
>1103	Identifier	nPoints
>1104	Identifier	nPoints
>1105	IdentifierDeclType	size_t
>1106	IdentifierDeclStatement	 
>1107	IdentifierDecl	nCameras = cameras . size ( )
>1108	AssignmentExpr	nCameras = cameras . size ( )
>1109	CallExpression	cameras . size ( )
>1110	ArgumentList	 
>1111	Callee	cameras . size
>1112	MemberAccess	cameras . size
>1113	Identifier	size
>1114	Identifier	cameras
>1115	Identifier	nCameras
>1116	Identifier	nCameras
>1117	IdentifierDeclType	size_t
>1157	FunctionDef	main (int argc , char * * argv)
>1158	ParameterList	int argc , char * * argv
>1159	Parameter	 
>1160	Identifier	argv
>1161	ParameterType	char * *
>1162	Parameter	 
>1163	Identifier	argc
>1164	ParameterType	int
>1165	ReturnType	int
>1166	CompoundStatement	 
>1167	ReturnStatement	 
>1168	PrimaryExpression	0
>1169	ExpressionStatement	 
>1170	CallExpression	WriteVisFile ( vis_file , cameras , points )
>1171	ArgumentList	vis_file
>1172	Argument	points
>1173	Identifier	points
>1174	Argument	cameras
>1175	Identifier	cameras
>1176	Argument	vis_file
>1177	Identifier	vis_file
>1178	Callee	WriteVisFile
>1179	Identifier	WriteVisFile
>1180	ExpressionStatement	 
>1181	CallExpression	ReadBundleFile ( bundle_file , cameras , points , bundle_version )
>1182	ArgumentList	bundle_file
>1183	Argument	bundle_version
>1184	Identifier	bundle_version
>1185	Argument	points
>1186	Identifier	points
>1187	Argument	cameras
>1188	Identifier	cameras
>1189	Argument	bundle_file
>1190	Identifier	bundle_file
>1191	Callee	ReadBundleFile
>1192	Identifier	ReadBundleFile
>1193	IdentifierDeclStatement	 
>1194	IdentifierDecl	bundle_version
>1195	Identifier	bundle_version
>1196	IdentifierDeclType	double
>1197	IdentifierDeclStatement	 
>1198	IdentifierDecl	points
>1199	Identifier	points
>1200	IdentifierDeclType	std 
>1201	IdentifierDeclStatement	 
>1202	IdentifierDecl	cameras
>1203	Identifier	cameras
>1204	IdentifierDeclType	std 
>1205	IdentifierDeclStatement	 
>1206	IdentifierDecl	* vis_file = argv [ 2 ]
>1207	AssignmentExpr	* vis_file = argv [ 2 ]
>1208	ArrayIndexing	argv [ 2 ]
>1209	PrimaryExpression	2
>1210	Identifier	argv
>1211	Identifier	vis_file
>1212	Identifier	vis_file
>1213	IdentifierDeclType	char *
>1214	IdentifierDeclStatement	 
>1215	IdentifierDecl	* bundle_file = argv [ 1 ]
>1216	AssignmentExpr	* bundle_file = argv [ 1 ]
>1217	ArrayIndexing	argv [ 1 ]
>1218	PrimaryExpression	1
>1219	Identifier	argv
>1220	Identifier	bundle_file
>1221	Identifier	bundle_file
>1222	IdentifierDeclType	char *
>1223	IfStatement	if ( argc != 3 )
>1224	CompoundStatement	 
>1225	ReturnStatement	 
>1226	PrimaryExpression	1
>1227	ExpressionStatement	 
>1228	CallExpression	printf ( \"Usage
>1229	ArgumentList	\"Usage
>1230	Argument	argv [ 0 ]
>1231	ArrayIndexing	argv [ 0 ]
>1232	PrimaryExpression	0
>1233	Identifier	argv
>1234	Argument	\"Usage
>1235	PrimaryExpression	\"Usage
>1236	Callee	printf
>1237	Identifier	printf
>1238	Condition	 
>1239	EqualityExpression	argc != 3
>1240	PrimaryExpression	3
>1241	Identifier	argc
<14=29,28,15
<15=25,22,19,16
<16=18,17
<19=21,20
<22=24,23
<25=27,26
<29=647,631,624,619,608,474,463,265,258,46,37,30
<30=31
<31=35,32
<32=33
<33=34
<35=36
<37=38
<38=44,39
<39=42,40
<40=41
<42=43
<44=45
<46=250,246,243,47
<47=239,212,185,181,168,164,63,48
<48=59,49
<49=50
<50=51
<51=55,52
<52=53
<53=54
<55=56
<56=58,57
<59=60
<60=62,61
<63=156,152,149,64
<64=142,125,112,94,87,65
<65=83,66
<66=67
<67=81,68
<68=79,77,73,69
<69=70
<70=72,71
<73=74
<74=76,75
<77=78
<79=80
<81=82
<83=84
<84=86,85
<87=91,88
<88=90,89
<91=93,92
<94=95
<95=106,96
<96=97
<97=98
<98=104,99
<99=102,100
<100=101
<102=103
<104=105
<106=107
<107=109,108
<109=111,110
<112=113
<113=123,114
<114=115
<115=116
<116=120,117
<117=119,118
<120=122,121
<123=124
<125=126
<126=140,127
<127=138,136,132,128
<128=129
<129=131,130
<132=133
<133=135,134
<136=137
<138=139
<140=141
<142=146,143
<143=145,144
<146=148,147
<149=151,150
<152=153
<153=155,154
<156=157
<157=158
<158=163,162,159
<159=161,160
<164=165
<165=167,166
<168=169
<169=179,170
<170=177,175,171
<171=172
<172=174,173
<175=176
<177=178
<179=180
<181=182
<182=184,183
<185=186
<186=210,187
<187=208,206,200,194,188
<188=189
<189=191,190
<191=193,192
<194=195
<195=197,196
<197=199,198
<200=201
<201=203,202
<203=205,204
<206=207
<208=209
<210=211
<212=213
<213=237,214
<214=235,233,227,221,215
<215=216
<216=218,217
<218=220,219
<221=222
<222=224,223
<224=226,225
<227=228
<228=230,229
<230=232,231
<233=234
<235=236
<237=238
<239=240
<240=242,241
<243=245,244
<246=247
<247=249,248
<250=251
<251=252
<252=257,256,253
<253=255,254
<258=259
<259=264,263,260
<260=262,261
<265=455,451,448,266
<266=438,433,428,386,341,320,316,310,293,276,267
<267=268
<268=272,269
<269=270
<270=271
<272=273
<273=275,274
<276=277
<277=291,278
<278=287,285,279
<279=280
<280=282,281
<282=284,283
<285=286
<287=288
<288=290,289
<291=292
<293=294
<294=308,295
<295=304,302,296
<296=297
<297=299,298
<299=301,300
<302=303
<304=305
<305=307,306
<308=309
<310=311
<311=313,312
<313=315,314
<316=317
<317=319,318
<320=321
<321=339,322
<322=337,335,331,327,323
<323=324
<324=326,325
<327=328
<328=330,329
<331=332
<332=334,333
<335=336
<337=338
<339=340
<341=342
<342=384,343
<343=382,380,376,372,368,364,360,356,352,348,344
<344=345
<345=347,346
<348=349
<349=351,350
<352=353
<353=355,354
<356=357
<357=359,358
<360=361
<361=363,362
<364=365
<365=367,366
<368=369
<369=371,370
<372=373
<373=375,374
<376=377
<377=379,378
<380=381
<382=383
<384=385
<386=424,410,387
<387=388
<388=389
<389=390
<390=408,391
<391=406,404,400,396,392
<392=393
<393=395,394
<396=397
<397=399,398
<400=401
<401=403,402
<404=405
<406=407
<408=409
<410=411
<411=412
<412=422,413
<413=420,418,414
<414=415
<415=417,416
<418=419
<420=421
<422=423
<424=425
<425=427,426
<428=429
<429=432,431,430
<433=434
<434=437,436,435
<438=445,442,439
<439=441,440
<442=444,443
<445=447,446
<448=450,449
<451=452
<452=454,453
<455=456
<456=457
<457=462,461,458
<458=460,459
<463=464
<464=472,465
<465=470,468,466
<466=467
<468=469
<470=471
<472=473
<474=602,554,475
<475=476
<476=548,500,477
<477=478
<478=496,479
<479=480
<480=494,481
<481=492,490,486,482
<482=483
<483=485,484
<486=487
<487=489,488
<490=491
<492=493
<494=495
<496=497
<497=499,498
<500=544,531,527,518,501
<501=502
<502=516,503
<503=514,512,508,504
<504=505
<505=507,506
<508=509
<509=511,510
<512=513
<514=515
<516=517
<518=519
<519=525,520
<520=523,521
<521=522
<523=524
<525=526
<527=528
<528=530,529
<531=532
<532=542,533
<533=540,538,534
<534=535
<535=537,536
<538=539
<540=541
<542=543
<544=545
<545=547,546
<548=549
<549=551,550
<551=553,552
<554=598,585,581,572,555
<555=556
<556=570,557
<557=568,566,562,558
<558=559
<559=561,560
<562=563
<563=565,564
<566=567
<568=569
<570=571
<572=573
<573=579,574
<574=577,575
<575=576
<577=578
<579=580
<581=582
<582=584,583
<585=586
<586=596,587
<587=594,592,588
<588=589
<589=591,590
<592=593
<594=595
<596=597
<598=599
<599=601,600
<602=603
<603=605,604
<605=607,606
<608=609
<609=617,610
<610=615,613,611
<611=612
<613=614
<615=616
<617=618
<619=620
<620=623,622,621
<624=628,625
<625=627,626
<628=630,629
<631=643,632
<632=634,633
<634=635
<635=641,636
<636=639,637
<637=638
<639=640
<641=642
<643=644
<644=646,645
<647=648
<648=660,659,649
<649=658,650
<650=656,651
<651=654,652
<652=653
<654=655
<656=657
<709=721,720,710
<710=717,714,711
<711=713,712
<714=716,715
<717=719,718
<721=1106,1094,1085,1071,1056,1047,1003,878,869,858,851,729,722
<722=723
<723=727,724
<724=725
<725=726
<727=728
<729=843,839,836,730
<730=832,795,783,770,740,731
<731=732
<732=738,733
<733=736,734
<734=735
<736=737
<738=739
<740=762,758,755,741
<741=742
<742=743
<743=753,744
<744=751,749,745
<745=746
<746=748,747
<749=750
<751=752
<753=754
<755=757,756
<758=759
<759=761,760
<762=763
<763=764
<764=769,768,765
<765=767,766
<770=771
<771=781,772
<772=779,777,775,773
<773=774
<775=776
<777=778
<779=780
<781=782
<783=784
<784=794,793,785
<785=792,786
<786=788,787
<788=789
<789=791,790
<795=824,820,817,796
<796=797
<797=807,798
<798=799
<799=803,800
<800=801
<801=802
<803=804
<804=806,805
<807=808
<808=810,809
<810=816,811
<811=813,812
<813=815,814
<817=819,818
<820=821
<821=823,822
<824=825
<825=826
<826=831,830,827
<827=829,828
<832=833
<833=835,834
<836=838,837
<839=840
<840=842,841
<843=844
<844=845
<845=850,849,846
<846=848,847
<851=852
<852=857,856,853
<853=855,854
<858=859
<859=867,860
<860=865,863,861
<861=862
<863=864
<865=866
<867=868
<869=870
<870=876,871
<871=874,872
<872=873
<874=875
<876=877
<878=995,991,988,879
<879=972,880
<880=964,960,957,881
<881=942,882
<882=932,928,925,883
<883=919,904,894,884
<884=885
<885=887,886
<887=893,888
<888=890,889
<890=892,891
<894=895
<895=897,896
<897=903,898
<898=900,899
<900=902,901
<904=905
<905=918,917,906
<906=916,907
<907=909,908
<909=911,910
<911=913,912
<913=915,914
<919=921,920
<921=922
<922=924,923
<925=927,926
<928=929
<929=931,930
<932=933
<933=934
<934=941,940,935
<935=939,936
<936=938,937
<942=943
<943=956,955,944
<944=954,945
<945=947,946
<947=949,948
<949=951,950
<951=953,952
<957=959,958
<960=961
<961=963,962
<964=965
<965=966
<966=971,970,967
<967=969,968
<972=973
<973=987,986,974
<974=985,975
<975=977,976
<977=978
<978=980,979
<980=982,981
<982=984,983
<988=990,989
<991=992
<992=994,993
<995=996
<996=997
<997=1002,1001,998
<998=1000,999
<1003=1039,1035,1032,1004
<1004=1005
<1005=1024,1020,1017,1006
<1006=1007
<1007=1008
<1008=1010,1009
<1010=1016,1011
<1011=1013,1012
<1013=1015,1014
<1017=1019,1018
<1020=1021
<1021=1023,1022
<1024=1025
<1025=1026
<1026=1031,1030,1027
<1027=1029,1028
<1032=1034,1033
<1035=1036
<1036=1038,1037
<1039=1040
<1040=1041
<1041=1046,1045,1042
<1042=1044,1043
<1047=1048
<1048=1055,1054,1049
<1049=1053,1050
<1050=1052,1051
<1056=1067,1057
<1057=1066,1065,1064,1063,1062,1061,1060,1059,1058
<1067=1068
<1068=1070,1069
<1071=1072
<1072=1084,1083,1073
<1073=1082,1074
<1074=1080,1075
<1075=1078,1076
<1076=1077
<1078=1079
<1080=1081
<1085=1086
<1086=1092,1087
<1087=1090,1088
<1088=1089
<1090=1091
<1092=1093
<1094=1095
<1095=1105,1104,1096
<1096=1103,1097
<1097=1099,1098
<1099=1100
<1100=1102,1101
<1106=1107
<1107=1117,1116,1108
<1108=1115,1109
<1109=1111,1110
<1111=1112
<1112=1114,1113
<1157=1166,1165,1158
<1158=1162,1159
<1159=1161,1160
<1162=1164,1163
<1166=1223,1214,1205,1201,1197,1193,1180,1169,1167
<1167=1168
<1169=1170
<1170=1178,1171
<1171=1176,1174,1172
<1172=1173
<1174=1175
<1176=1177
<1178=1179
<1180=1181
<1181=1191,1182
<1182=1189,1187,1185,1183
<1183=1184
<1185=1186
<1187=1188
<1189=1190
<1191=1192
<1193=1194
<1194=1196,1195
<1197=1198
<1198=1200,1199
<1201=1202
<1202=1204,1203
<1205=1206
<1206=1213,1212,1207
<1207=1211,1208
<1208=1210,1209
<1214=1215
<1215=1222,1221,1216
<1216=1220,1217
<1217=1219,1218
<1223=1238,1224
<1224=1227,1225
<1225=1226
<1227=1228
<1228=1236,1229
<1229=1234,1230
<1230=1231
<1231=1233,1232
<1234=1235
<1236=1237
<1238=1239
<1239=1241,1240
