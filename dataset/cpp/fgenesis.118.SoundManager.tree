>52	FunctionDef	FadeCh ()
>53	ParameterList	 
>54	CompoundStatement	 
>80	FunctionDef	addFadeCh (const FadeCh & fadeCh)
>81	ParameterList	const FadeCh & fadeCh
>82	Parameter	 
>83	Identifier	fadeCh
>84	ParameterType	const FadeCh &
>85	ReturnType	void
>86	CompoundStatement	 
>87	ExpressionStatement	 
>88	CallExpression	fadeChs . push_back ( fadeCh )
>89	ArgumentList	fadeCh
>90	Argument	fadeCh
>91	Identifier	fadeCh
>92	Callee	fadeChs . push_back
>93	MemberAccess	fadeChs . push_back
>94	Identifier	push_back
>95	Identifier	fadeChs
>96	ForStatement	for ( ; i != fadeChs . end ( ) ; )
>97	CompoundStatement	 
>98	IfStatement	if ( ( * i ) . c == fadeCh . c )
>99	ElseStatement	else
>100	CompoundStatement	 
>101	ExpressionStatement	 
>102	IncDecOp	i ++
>103	IncDec	++
>104	Identifier	i
>105	CompoundStatement	 
>106	ExpressionStatement	 
>107	AssignmentExpr	i = fadeChs . erase ( i )
>108	CallExpression	fadeChs . erase ( i )
>109	ArgumentList	i
>110	Argument	i
>111	Identifier	i
>112	Callee	fadeChs . erase
>113	MemberAccess	fadeChs . erase
>114	Identifier	erase
>115	Identifier	fadeChs
>116	Identifier	i
>117	Condition	 
>118	EqualityExpression	( * i ) . c == fadeCh . c
>119	MemberAccess	fadeCh . c
>120	Identifier	c
>121	Identifier	fadeCh
>122	MemberAccess	( * i ) . c
>123	Identifier	c
>124	UnaryOp	* i
>125	Identifier	i
>126	UnaryOperator	*
>127	Condition	 
>128	EqualityExpression	i != fadeChs . end ( )
>129	CallExpression	fadeChs . end ( )
>130	ArgumentList	 
>131	Callee	fadeChs . end
>132	MemberAccess	fadeChs . end
>133	Identifier	end
>134	Identifier	fadeChs
>135	Identifier	i
>136	IdentifierDeclStatement	 
>137	IdentifierDecl	i = fadeChs . begin ( )
>138	AssignmentExpr	i = fadeChs . begin ( )
>139	CallExpression	fadeChs . begin ( )
>140	ArgumentList	 
>141	Callee	fadeChs . begin
>142	MemberAccess	fadeChs . begin
>143	Identifier	begin
>144	Identifier	fadeChs
>145	Identifier	i
>146	Identifier	i
>147	IdentifierDeclType	FadeChs 
>160	FunctionDef	myopen (const char * name , int unicode , unsigned int * filesize , void * * handle , void * * userdata)
>161	ParameterList	const char * name , int unicode , unsigned int * filesize , void * * handle , void * * userdata
>162	Parameter	 
>163	Identifier	userdata
>164	ParameterType	void * *
>165	Parameter	 
>166	Identifier	handle
>167	ParameterType	void * *
>168	Parameter	 
>169	Identifier	filesize
>170	ParameterType	unsigned int *
>171	Parameter	 
>172	Identifier	unicode
>173	ParameterType	int
>174	Parameter	 
>175	Identifier	name
>176	ParameterType	const char *
>177	ReturnType	FMOD_RESULT F_CALLBACK
>178	CompoundStatement	 
>179	ReturnStatement	 
>180	Identifier	FMOD_OK
>181	IfStatement	if ( name )
>182	CompoundStatement	 
>183	ExpressionStatement	 
>184	AssignmentExpr	* handle = fp
>185	Identifier	fp
>186	UnaryOp	* handle
>187	Identifier	handle
>188	UnaryOperator	*
>189	ExpressionStatement	 
>190	AssignmentExpr	* userdata = ( void * ) 0x12345678
>191	CastExpression	( void * ) 0x12345678
>192	PrimaryExpression	0x12345678
>193	CastTarget	void *
>194	UnaryOp	* userdata
>195	Identifier	userdata
>196	UnaryOperator	*
>197	ExpressionStatement	 
>198	AssignmentExpr	* filesize = ( unsigned int ) sz
>199	CastExpression	( unsigned int ) sz
>200	Identifier	sz
>201	CastTarget	unsigned int
>202	UnaryOp	* filesize
>203	Identifier	filesize
>204	UnaryOperator	*
>205	IfStatement	if ( vfsize ( fp , & sz ) < 0 )
>206	CompoundStatement	 
>207	ReturnStatement	 
>208	Identifier	FMOD_ERR_FILE_NOTFOUND
>209	ExpressionStatement	 
>210	CallExpression	vfclose ( fp )
>211	ArgumentList	fp
>212	Argument	fp
>213	Identifier	fp
>214	Callee	vfclose
>215	Identifier	vfclose
>216	Condition	 
>217	RelationalExpression	vfsize ( fp , & sz ) < 0
>218	PrimaryExpression	0
>219	CallExpression	vfsize ( fp , & sz )
>220	ArgumentList	fp
>221	Argument	& sz
>222	UnaryOp	& sz
>223	Identifier	sz
>224	UnaryOperator	&
>225	Argument	fp
>226	Identifier	fp
>227	Callee	vfsize
>228	Identifier	vfsize
>229	IdentifierDeclStatement	 
>230	IdentifierDecl	sz = 0
>231	AssignmentExpr	sz = 0
>232	PrimaryExpression	0
>233	Identifier	sz
>234	Identifier	sz
>235	IdentifierDeclType	size_t
>236	IfStatement	if ( ! fp )
>237	ReturnStatement	 
>238	Identifier	FMOD_ERR_FILE_NOTFOUND
>239	Condition	 
>240	UnaryOp	! fp
>241	Identifier	fp
>242	UnaryOperator	!
>243	IdentifierDeclStatement	 
>244	IdentifierDecl	* fp = vfopen ( name , \"rb\" )
>245	AssignmentExpr	* fp = vfopen ( name , \"rb\" )
>246	CallExpression	vfopen ( name , \"rb\" )
>247	ArgumentList	name
>248	Argument	\"rb\"
>249	PrimaryExpression	\"rb\"
>250	Argument	name
>251	Identifier	name
>252	Callee	vfopen
>253	Identifier	vfopen
>254	Identifier	fp
>255	Identifier	fp
>256	IdentifierDeclType	VFILE *
>257	Condition	 
>258	Identifier	name
>277	FunctionDef	myclose (void * handle , void * userdata)
>278	ParameterList	void * handle , void * userdata
>279	Parameter	 
>280	Identifier	userdata
>281	ParameterType	void *
>282	Parameter	 
>283	Identifier	handle
>284	ParameterType	void *
>285	ReturnType	FMOD_RESULT F_CALLBACK
>286	CompoundStatement	 
>287	ReturnStatement	 
>288	Identifier	FMOD_OK
>289	ExpressionStatement	 
>290	CallExpression	vfclose ( ( VFILE * ) handle )
>291	ArgumentList	( VFILE * ) handle
>292	Argument	( VFILE * ) handle
>293	CastExpression	( VFILE * ) handle
>294	Identifier	handle
>295	CastTarget	VFILE *
>296	Callee	vfclose
>297	Identifier	vfclose
>298	IfStatement	if ( ! handle )
>299	CompoundStatement	 
>300	ReturnStatement	 
>301	Identifier	FMOD_ERR_INVALID_PARAM
>302	Condition	 
>303	UnaryOp	! handle
>304	Identifier	handle
>305	UnaryOperator	!
>313	FunctionDef	myread (void * handle , void * buffer , unsigned int sizebytes , unsigned int * bytesread , void * userdata)
>314	ParameterList	void * handle , void * buffer , unsigned int sizebytes , unsigned int * bytesread , void * userdata
>315	Parameter	 
>316	Identifier	userdata
>317	ParameterType	void *
>318	Parameter	 
>319	Identifier	bytesread
>320	ParameterType	unsigned int *
>321	Parameter	 
>322	Identifier	sizebytes
>323	ParameterType	unsigned int
>324	Parameter	 
>325	Identifier	buffer
>326	ParameterType	void *
>327	Parameter	 
>328	Identifier	handle
>329	ParameterType	void *
>330	ReturnType	FMOD_RESULT F_CALLBACK
>331	CompoundStatement	 
>332	ReturnStatement	 
>333	Identifier	FMOD_OK
>334	IfStatement	if ( bytesread )
>335	CompoundStatement	 
>336	IfStatement	if ( * bytesread < sizebytes )
>337	CompoundStatement	 
>338	ReturnStatement	 
>339	Identifier	FMOD_ERR_FILE_EOF
>340	Condition	 
>341	RelationalExpression	* bytesread < sizebytes
>342	Identifier	sizebytes
>343	UnaryOp	* bytesread
>344	Identifier	bytesread
>345	UnaryOperator	*
>346	ExpressionStatement	 
>347	AssignmentExpr	* bytesread = ( int ) vfread ( buffer , 1 , sizebytes , ( VFILE * ) handle )
>348	CastExpression	( int ) vfread ( buffer , 1 , sizebytes , ( VFILE * ) handle )
>349	CallExpression	vfread ( buffer , 1 , sizebytes , ( VFILE * ) handle )
>350	ArgumentList	buffer
>351	Argument	( VFILE * ) handle
>352	CastExpression	( VFILE * ) handle
>353	Identifier	handle
>354	CastTarget	VFILE *
>355	Argument	sizebytes
>356	Identifier	sizebytes
>357	Argument	1
>358	PrimaryExpression	1
>359	Argument	buffer
>360	Identifier	buffer
>361	Callee	vfread
>362	Identifier	vfread
>363	CastTarget	int
>364	UnaryOp	* bytesread
>365	Identifier	bytesread
>366	UnaryOperator	*
>367	Condition	 
>368	Identifier	bytesread
>369	IfStatement	if ( ! handle )
>370	CompoundStatement	 
>371	ReturnStatement	 
>372	Identifier	FMOD_ERR_INVALID_PARAM
>373	Condition	 
>374	UnaryOp	! handle
>375	Identifier	handle
>376	UnaryOperator	!
>390	FunctionDef	myseek (void * handle , unsigned int pos , void * userdata)
>391	ParameterList	void * handle , unsigned int pos , void * userdata
>392	Parameter	 
>393	Identifier	userdata
>394	ParameterType	void *
>395	Parameter	 
>396	Identifier	pos
>397	ParameterType	unsigned int
>398	Parameter	 
>399	Identifier	handle
>400	ParameterType	void *
>401	ReturnType	FMOD_RESULT F_CALLBACK
>402	CompoundStatement	 
>403	ReturnStatement	 
>404	Identifier	FMOD_OK
>405	ExpressionStatement	 
>406	CallExpression	vfseek ( ( VFILE * ) handle , pos , SEEK_SET )
>407	ArgumentList	( VFILE * ) handle
>408	Argument	SEEK_SET
>409	Identifier	SEEK_SET
>410	Argument	pos
>411	Identifier	pos
>412	Argument	( VFILE * ) handle
>413	CastExpression	( VFILE * ) handle
>414	Identifier	handle
>415	CastTarget	VFILE *
>416	Callee	vfseek
>417	Identifier	vfseek
>418	IfStatement	if ( ! handle )
>419	CompoundStatement	 
>420	ReturnStatement	 
>421	Identifier	FMOD_ERR_INVALID_PARAM
>422	Condition	 
>423	UnaryOp	! handle
>424	Identifier	handle
>425	UnaryOperator	!
>435	FunctionDef	SoundManager 
>436	ParameterList	 
>437	ReturnType	void
>438	CompoundStatement	 
>439	ExpressionStatement	 
>440	CallExpression	debugLog ( \"done\" )
>441	ArgumentList	\"done\"
>442	Argument	\"done\"
>443	PrimaryExpression	\"done\"
>444	Callee	debugLog
>445	Identifier	debugLog
>446	ExpressionStatement	 
>447	CallExpression	checkError ( )
>448	ArgumentList	 
>449	Callee	checkError
>450	Identifier	checkError
>451	ExpressionStatement	 
>452	AssignmentExpr	result = SoundCore 
>453	CallExpression	SoundCore 
>454	ArgumentList	 
>455	Callee	SoundCore 
>456	PtrMemberAccess	SoundCore 
>457	Identifier	update
>458	Identifier	SoundCore 
>459	Identifier	result
>460	ExpressionStatement	 
>461	CallExpression	debugLog ( \"update\" )
>462	ArgumentList	\"update\"
>463	Argument	\"update\"
>464	PrimaryExpression	\"update\"
>465	Callee	debugLog
>466	Identifier	debugLog
>467	ExpressionStatement	 
>468	CallExpression	checkError ( )
>469	ArgumentList	 
>470	Callee	checkError
>471	Identifier	checkError
>472	ExpressionStatement	 
>473	AssignmentExpr	result = SoundCore 
>474	CallExpression	SoundCore 
>475	ArgumentList	true
>476	Argument	true
>477	Identifier	true
>478	Callee	SoundCore 
>479	PtrMemberAccess	SoundCore 
>480	Identifier	setPaused
>481	Identifier	SoundCore 
>482	Identifier	result
>483	ExpressionStatement	 
>484	CallExpression	debugLog ( \"master channel\" )
>485	ArgumentList	\"master channel\"
>486	Argument	\"master channel\"
>487	PrimaryExpression	\"master channel\"
>488	Callee	debugLog
>489	Identifier	debugLog
>490	ExpressionStatement	 
>491	CallExpression	checkError ( )
>492	ArgumentList	 
>493	Callee	checkError
>494	Identifier	checkError
>495	ExpressionStatement	 
>496	AssignmentExpr	result = group_sfx -> setPaused ( true )
>497	CallExpression	group_sfx -> setPaused ( true )
>498	ArgumentList	true
>499	Argument	true
>500	Identifier	true
>501	Callee	group_sfx -> setPaused
>502	PtrMemberAccess	group_sfx -> setPaused
>503	Identifier	setPaused
>504	Identifier	group_sfx
>505	Identifier	result
>506	ExpressionStatement	 
>507	CallExpression	debugLog ( \"sfx\" )
>508	ArgumentList	\"sfx\"
>509	Argument	\"sfx\"
>510	PrimaryExpression	\"sfx\"
>511	Callee	debugLog
>512	Identifier	debugLog
>513	ExpressionStatement	 
>514	CallExpression	checkError ( )
>515	ArgumentList	 
>516	Callee	checkError
>517	Identifier	checkError
>518	ExpressionStatement	 
>519	AssignmentExpr	result = group_vox -> setPaused ( true )
>520	CallExpression	group_vox -> setPaused ( true )
>521	ArgumentList	true
>522	Argument	true
>523	Identifier	true
>524	Callee	group_vox -> setPaused
>525	PtrMemberAccess	group_vox -> setPaused
>526	Identifier	setPaused
>527	Identifier	group_vox
>528	Identifier	result
>529	ExpressionStatement	 
>530	CallExpression	debugLog ( \"vox\" )
>531	ArgumentList	\"vox\"
>532	Argument	\"vox\"
>533	PrimaryExpression	\"vox\"
>534	Callee	debugLog
>535	Identifier	debugLog
>536	ExpressionStatement	 
>537	CallExpression	checkError ( )
>538	ArgumentList	 
>539	Callee	checkError
>540	Identifier	checkError
>541	ExpressionStatement	 
>542	AssignmentExpr	result = group_mus -> setPaused ( true )
>543	CallExpression	group_mus -> setPaused ( true )
>544	ArgumentList	true
>545	Argument	true
>546	Identifier	true
>547	Callee	group_mus -> setPaused
>548	PtrMemberAccess	group_mus -> setPaused
>549	Identifier	setPaused
>550	Identifier	group_mus
>551	Identifier	result
>552	ExpressionStatement	 
>553	CallExpression	debugLog ( \"mus\" )
>554	ArgumentList	\"mus\"
>555	Argument	\"mus\"
>556	PrimaryExpression	\"mus\"
>557	Callee	debugLog
>558	Identifier	debugLog
>559	ExpressionStatement	 
>560	CallExpression	debugLog ( \"SoundManager
>561	ArgumentList	\"SoundManager
>562	Argument	\"SoundManager
>563	PrimaryExpression	\"SoundManager
>564	Callee	debugLog
>565	Identifier	debugLog
>586	FunctionDef	SoundManager 
>587	ParameterList	 
>588	ReturnType	void
>589	CompoundStatement	 
>590	ExpressionStatement	 
>591	CallExpression	debugLog ( \"done\" )
>592	ArgumentList	\"done\"
>593	Argument	\"done\"
>594	PrimaryExpression	\"done\"
>595	Callee	debugLog
>596	Identifier	debugLog
>597	ExpressionStatement	 
>598	CallExpression	checkError ( )
>599	ArgumentList	 
>600	Callee	checkError
>601	Identifier	checkError
>602	ExpressionStatement	 
>603	AssignmentExpr	result = SoundCore 
>604	CallExpression	SoundCore 
>605	ArgumentList	 
>606	Callee	SoundCore 
>607	PtrMemberAccess	SoundCore 
>608	Identifier	update
>609	Identifier	SoundCore 
>610	Identifier	result
>611	ExpressionStatement	 
>612	CallExpression	debugLog ( \"update\" )
>613	ArgumentList	\"update\"
>614	Argument	\"update\"
>615	PrimaryExpression	\"update\"
>616	Callee	debugLog
>617	Identifier	debugLog
>618	ExpressionStatement	 
>619	CallExpression	checkError ( )
>620	ArgumentList	 
>621	Callee	checkError
>622	Identifier	checkError
>623	ExpressionStatement	 
>624	AssignmentExpr	result = SoundCore 
>625	CallExpression	SoundCore 
>626	ArgumentList	false
>627	Argument	false
>628	Identifier	false
>629	Callee	SoundCore 
>630	PtrMemberAccess	SoundCore 
>631	Identifier	setPaused
>632	Identifier	SoundCore 
>633	Identifier	result
>634	ExpressionStatement	 
>635	CallExpression	debugLog ( \"master channel\" )
>636	ArgumentList	\"master channel\"
>637	Argument	\"master channel\"
>638	PrimaryExpression	\"master channel\"
>639	Callee	debugLog
>640	Identifier	debugLog
>641	ExpressionStatement	 
>642	CallExpression	checkError ( )
>643	ArgumentList	 
>644	Callee	checkError
>645	Identifier	checkError
>646	ExpressionStatement	 
>647	AssignmentExpr	result = group_sfx -> setPaused ( false )
>648	CallExpression	group_sfx -> setPaused ( false )
>649	ArgumentList	false
>650	Argument	false
>651	Identifier	false
>652	Callee	group_sfx -> setPaused
>653	PtrMemberAccess	group_sfx -> setPaused
>654	Identifier	setPaused
>655	Identifier	group_sfx
>656	Identifier	result
>657	ExpressionStatement	 
>658	CallExpression	debugLog ( \"sfx\" )
>659	ArgumentList	\"sfx\"
>660	Argument	\"sfx\"
>661	PrimaryExpression	\"sfx\"
>662	Callee	debugLog
>663	Identifier	debugLog
>664	ExpressionStatement	 
>665	CallExpression	checkError ( )
>666	ArgumentList	 
>667	Callee	checkError
>668	Identifier	checkError
>669	ExpressionStatement	 
>670	AssignmentExpr	result = group_vox -> setPaused ( false )
>671	CallExpression	group_vox -> setPaused ( false )
>672	ArgumentList	false
>673	Argument	false
>674	Identifier	false
>675	Callee	group_vox -> setPaused
>676	PtrMemberAccess	group_vox -> setPaused
>677	Identifier	setPaused
>678	Identifier	group_vox
>679	Identifier	result
>680	ExpressionStatement	 
>681	CallExpression	debugLog ( \"vox\" )
>682	ArgumentList	\"vox\"
>683	Argument	\"vox\"
>684	PrimaryExpression	\"vox\"
>685	Callee	debugLog
>686	Identifier	debugLog
>687	ExpressionStatement	 
>688	CallExpression	checkError ( )
>689	ArgumentList	 
>690	Callee	checkError
>691	Identifier	checkError
>692	ExpressionStatement	 
>693	AssignmentExpr	result = group_mus -> setPaused ( false )
>694	CallExpression	group_mus -> setPaused ( false )
>695	ArgumentList	false
>696	Argument	false
>697	Identifier	false
>698	Callee	group_mus -> setPaused
>699	PtrMemberAccess	group_mus -> setPaused
>700	Identifier	setPaused
>701	Identifier	group_mus
>702	Identifier	result
>703	ExpressionStatement	 
>704	CallExpression	debugLog ( \"mus\" )
>705	ArgumentList	\"mus\"
>706	Argument	\"mus\"
>707	PrimaryExpression	\"mus\"
>708	Callee	debugLog
>709	Identifier	debugLog
>710	ExpressionStatement	 
>711	CallExpression	debugLog ( \"SoundManager
>712	ArgumentList	\"SoundManager
>713	Argument	\"SoundManager
>714	PrimaryExpression	\"SoundManager
>715	Callee	debugLog
>716	Identifier	debugLog
>737	FunctionDef	SoundManager 
>738	ParameterList	const std 
>739	Parameter	 
>740	Identifier	name
>741	ParameterType	const std 
>742	ReturnType	Buffer
>743	CompoundStatement	 
>744	ReturnStatement	 
>745	ArrayIndexing	soundMap [ n ]
>746	Identifier	n
>747	Identifier	soundMap
>748	ExpressionStatement	 
>749	CallExpression	stringToLower ( n )
>750	ArgumentList	n
>751	Argument	n
>752	Identifier	n
>753	Callee	stringToLower
>754	Identifier	stringToLower
>755	IdentifierDeclStatement	 
>756	IdentifierDecl	n = name
>757	AssignmentExpr	n = name
>758	Identifier	name
>759	Identifier	name
>760	Identifier	n
>761	IdentifierDeclType	std 
>770	FunctionDef	SoundManager 
>771	ParameterList	int * curAlloc , int * maxAlloc
>772	Parameter	 
>773	Identifier	maxAlloc
>774	ParameterType	int *
>775	Parameter	 
>776	Identifier	curAlloc
>777	ParameterType	int *
>778	ReturnType	void
>779	CompoundStatement	 
>780	ExpressionStatement	 
>781	CallExpression	FMOD 
>782	ArgumentList	curAlloc
>783	Argument	maxAlloc
>784	Identifier	maxAlloc
>785	Argument	curAlloc
>786	Identifier	curAlloc
>787	Callee	FMOD 
>788	Identifier	FMOD 
>794	FunctionDef	SoundManager 
>795	ParameterList	const std 
>796	Parameter	 
>797	Identifier	defaultDevice
>798	ParameterType	const std 
>799	CompoundStatement	 
>800	IfStatement	if ( SoundCore 
>801	CompoundStatement	 
>802	ExpressionStatement	 
>803	AssignmentExpr	SoundCore 
>804	PrimaryExpression	0
>805	Identifier	SoundCore 
>806	Condition	 
>807	Identifier	SoundCore 
>808	ExpressionStatement	 
>809	AssignmentExpr	enabled = false
>810	Identifier	false
>811	Identifier	enabled
>812	ExpressionStatement	 
>813	CallExpression	debugLog ( \"get_out\" )
>814	ArgumentList	\"get_out\"
>815	Argument	\"get_out\"
>816	PrimaryExpression	\"get_out\"
>817	Callee	debugLog
>818	Identifier	debugLog
>819	Label	 
>820	Identifier	get_out
>821	ReturnStatement	 
>822	ExpressionStatement	 
>823	AssignmentExpr	enabled = true
>824	Identifier	true
>825	Identifier	enabled
>826	IfStatement	if ( dspReverb )
>827	CompoundStatement	 
>828	ExpressionStatement	 
>829	CallExpression	dspReverb -> setParameter ( FMOD_DSP_REVERB_MODE , 0 )
>830	ArgumentList	FMOD_DSP_REVERB_MODE
>831	Argument	0
>832	PrimaryExpression	0
>833	Argument	FMOD_DSP_REVERB_MODE
>834	Identifier	FMOD_DSP_REVERB_MODE
>835	Callee	dspReverb -> setParameter
>836	PtrMemberAccess	dspReverb -> setParameter
>837	Identifier	setParameter
>838	Identifier	dspReverb
>839	ExpressionStatement	 
>840	CallExpression	dspReverb -> setParameter ( FMOD_DSP_REVERB_WIDTH , 1.0 )
>841	ArgumentList	FMOD_DSP_REVERB_WIDTH
>842	Argument	1.0
>843	PrimaryExpression	1.0
>844	Argument	FMOD_DSP_REVERB_WIDTH
>845	Identifier	FMOD_DSP_REVERB_WIDTH
>846	Callee	dspReverb -> setParameter
>847	PtrMemberAccess	dspReverb -> setParameter
>848	Identifier	setParameter
>849	Identifier	dspReverb
>850	ExpressionStatement	 
>851	CallExpression	dspReverb -> setParameter ( FMOD_DSP_REVERB_DRYMIX , 0.88 )
>852	ArgumentList	FMOD_DSP_REVERB_DRYMIX
>853	Argument	0.88
>854	PrimaryExpression	0.88
>855	Argument	FMOD_DSP_REVERB_DRYMIX
>856	Identifier	FMOD_DSP_REVERB_DRYMIX
>857	Callee	dspReverb -> setParameter
>858	PtrMemberAccess	dspReverb -> setParameter
>859	Identifier	setParameter
>860	Identifier	dspReverb
>861	ExpressionStatement	 
>862	CallExpression	dspReverb -> setParameter ( FMOD_DSP_REVERB_WETMIX , 0.11 )
>863	ArgumentList	FMOD_DSP_REVERB_WETMIX
>864	Argument	0.11
>865	PrimaryExpression	0.11
>866	Argument	FMOD_DSP_REVERB_WETMIX
>867	Identifier	FMOD_DSP_REVERB_WETMIX
>868	Callee	dspReverb -> setParameter
>869	PtrMemberAccess	dspReverb -> setParameter
>870	Identifier	setParameter
>871	Identifier	dspReverb
>872	ExpressionStatement	 
>873	CallExpression	dspReverb -> setParameter ( FMOD_DSP_REVERB_DAMP , 0.7 )
>874	ArgumentList	FMOD_DSP_REVERB_DAMP
>875	Argument	0.7
>876	PrimaryExpression	0.7
>877	Argument	FMOD_DSP_REVERB_DAMP
>878	Identifier	FMOD_DSP_REVERB_DAMP
>879	Callee	dspReverb -> setParameter
>880	PtrMemberAccess	dspReverb -> setParameter
>881	Identifier	setParameter
>882	Identifier	dspReverb
>883	ExpressionStatement	 
>884	CallExpression	dspReverb -> setParameter ( FMOD_DSP_REVERB_ROOMSIZE , 0.8 )
>885	ArgumentList	FMOD_DSP_REVERB_ROOMSIZE
>886	Argument	0.8
>887	PrimaryExpression	0.8
>888	Argument	FMOD_DSP_REVERB_ROOMSIZE
>889	Identifier	FMOD_DSP_REVERB_ROOMSIZE
>890	Callee	dspReverb -> setParameter
>891	PtrMemberAccess	dspReverb -> setParameter
>892	Identifier	setParameter
>893	Identifier	dspReverb
>894	Condition	 
>895	Identifier	dspReverb
>896	IfStatement	if ( checkError ( ) )
>897	CompoundStatement	 
>898	ExpressionStatement	 
>899	AssignmentExpr	dspReverb = 0
>900	PrimaryExpression	0
>901	Identifier	dspReverb
>902	Condition	 
>903	CallExpression	checkError ( )
>904	ArgumentList	 
>905	Callee	checkError
>906	Identifier	checkError
>907	ExpressionStatement	 
>908	AssignmentExpr	result = SoundCore 
>909	CallExpression	SoundCore 
>910	ArgumentList	FMOD_DSP_TYPE_REVERB
>911	Argument	& dspReverb
>912	UnaryOp	& dspReverb
>913	Identifier	dspReverb
>914	UnaryOperator	&
>915	Argument	FMOD_DSP_TYPE_REVERB
>916	Identifier	FMOD_DSP_TYPE_REVERB
>917	Callee	SoundCore 
>918	PtrMemberAccess	SoundCore 
>919	Identifier	createDSPByType
>920	Identifier	SoundCore 
>921	Identifier	result
>922	ExpressionStatement	 
>923	CallExpression	debugLog ( \"createDSPByType reverb\" )
>924	ArgumentList	\"createDSPByType reverb\"
>925	Argument	\"createDSPByType reverb\"
>926	PrimaryExpression	\"createDSPByType reverb\"
>927	Callee	debugLog
>928	Identifier	debugLog
>929	IfStatement	if ( checkError ( ) )
>930	CompoundStatement	 
>931	ExpressionStatement	 
>932	AssignmentExpr	dspFlange = 0
>933	PrimaryExpression	0
>934	Identifier	dspFlange
>935	Condition	 
>936	CallExpression	checkError ( )
>937	ArgumentList	 
>938	Callee	checkError
>939	Identifier	checkError
>940	ExpressionStatement	 
>941	AssignmentExpr	result = SoundCore 
>942	CallExpression	SoundCore 
>943	ArgumentList	FMOD_DSP_TYPE_FLANGE
>944	Argument	& dspFlange
>945	UnaryOp	& dspFlange
>946	Identifier	dspFlange
>947	UnaryOperator	&
>948	Argument	FMOD_DSP_TYPE_FLANGE
>949	Identifier	FMOD_DSP_TYPE_FLANGE
>950	Callee	SoundCore 
>951	PtrMemberAccess	SoundCore 
>952	Identifier	createDSPByType
>953	Identifier	SoundCore 
>954	Identifier	result
>955	ExpressionStatement	 
>956	CallExpression	debugLog ( \"createDSPByType flange\" )
>957	ArgumentList	\"createDSPByType flange\"
>958	Argument	\"createDSPByType flange\"
>959	PrimaryExpression	\"createDSPByType flange\"
>960	Callee	debugLog
>961	Identifier	debugLog
>962	IfStatement	if ( checkError ( ) )
>963	GotoStatement	 
>964	Identifier	get_out
>965	Condition	 
>966	CallExpression	checkError ( )
>967	ArgumentList	 
>968	Callee	checkError
>969	Identifier	checkError
>970	ExpressionStatement	 
>971	AssignmentExpr	result = SoundCore 
>972	CallExpression	SoundCore 
>973	ArgumentList	& masterChannelGroup
>974	Argument	& masterChannelGroup
>975	UnaryOp	& masterChannelGroup
>976	Identifier	masterChannelGroup
>977	UnaryOperator	&
>978	Callee	SoundCore 
>979	PtrMemberAccess	SoundCore 
>980	Identifier	getMasterChannelGroup
>981	Identifier	SoundCore 
>982	Identifier	result
>983	ExpressionStatement	 
>984	CallExpression	debugLog ( \"getMasterChannelGroup\" )
>985	ArgumentList	\"getMasterChannelGroup\"
>986	Argument	\"getMasterChannelGroup\"
>987	PrimaryExpression	\"getMasterChannelGroup\"
>988	Callee	debugLog
>989	Identifier	debugLog
>990	IfStatement	if ( checkError ( ) )
>991	GotoStatement	 
>992	Identifier	get_out
>993	Condition	 
>994	CallExpression	checkError ( )
>995	ArgumentList	 
>996	Callee	checkError
>997	Identifier	checkError
>998	ExpressionStatement	 
>999	AssignmentExpr	result = SoundCore 
>1000	CallExpression	SoundCore 
>1001	ArgumentList	\"mus\"
>1002	Argument	& group_mus
>1003	UnaryOp	& group_mus
>1004	Identifier	group_mus
>1005	UnaryOperator	&
>1006	Argument	\"mus\"
>1007	PrimaryExpression	\"mus\"
>1008	Callee	SoundCore 
>1009	PtrMemberAccess	SoundCore 
>1010	Identifier	createChannelGroup
>1011	Identifier	SoundCore 
>1012	Identifier	result
>1013	ExpressionStatement	 
>1014	CallExpression	debugLog ( \"create channel group mus\" )
>1015	ArgumentList	\"create channel group mus\"
>1016	Argument	\"create channel group mus\"
>1017	PrimaryExpression	\"create channel group mus\"
>1018	Callee	debugLog
>1019	Identifier	debugLog
>1020	IfStatement	if ( checkError ( ) )
>1021	GotoStatement	 
>1022	Identifier	get_out
>1023	Condition	 
>1024	CallExpression	checkError ( )
>1025	ArgumentList	 
>1026	Callee	checkError
>1027	Identifier	checkError
>1028	ExpressionStatement	 
>1029	AssignmentExpr	result = SoundCore 
>1030	CallExpression	SoundCore 
>1031	ArgumentList	\"sfx\"
>1032	Argument	& group_sfx
>1033	UnaryOp	& group_sfx
>1034	Identifier	group_sfx
>1035	UnaryOperator	&
>1036	Argument	\"sfx\"
>1037	PrimaryExpression	\"sfx\"
>1038	Callee	SoundCore 
>1039	PtrMemberAccess	SoundCore 
>1040	Identifier	createChannelGroup
>1041	Identifier	SoundCore 
>1042	Identifier	result
>1043	ExpressionStatement	 
>1044	CallExpression	debugLog ( \"create channel group sfx\" )
>1045	ArgumentList	\"create channel group sfx\"
>1046	Argument	\"create channel group sfx\"
>1047	PrimaryExpression	\"create channel group sfx\"
>1048	Callee	debugLog
>1049	Identifier	debugLog
>1050	IfStatement	if ( checkError ( ) )
>1051	GotoStatement	 
>1052	Identifier	get_out
>1053	Condition	 
>1054	CallExpression	checkError ( )
>1055	ArgumentList	 
>1056	Callee	checkError
>1057	Identifier	checkError
>1058	ExpressionStatement	 
>1059	AssignmentExpr	result = SoundCore 
>1060	CallExpression	SoundCore 
>1061	ArgumentList	\"vox\"
>1062	Argument	& group_vox
>1063	UnaryOp	& group_vox
>1064	Identifier	group_vox
>1065	UnaryOperator	&
>1066	Argument	\"vox\"
>1067	PrimaryExpression	\"vox\"
>1068	Callee	SoundCore 
>1069	PtrMemberAccess	SoundCore 
>1070	Identifier	createChannelGroup
>1071	Identifier	SoundCore 
>1072	Identifier	result
>1073	ExpressionStatement	 
>1074	CallExpression	debugLog ( \"create channel group vox\" )
>1075	ArgumentList	\"create channel group vox\"
>1076	Argument	\"create channel group vox\"
>1077	PrimaryExpression	\"create channel group vox\"
>1078	Callee	debugLog
>1079	Identifier	debugLog
>1080	IfStatement	if ( checkError ( ) )
>1081	GotoStatement	 
>1082	Identifier	get_out
>1083	Condition	 
>1084	CallExpression	checkError ( )
>1085	ArgumentList	 
>1086	Callee	checkError
>1087	Identifier	checkError
>1088	ExpressionStatement	 
>1089	AssignmentExpr	result = SoundCore 
>1090	CallExpression	SoundCore 
>1091	ArgumentList	myopen
>1092	Argument	2048
>1093	PrimaryExpression	2048
>1094	Argument	myseek
>1095	Identifier	myseek
>1096	Argument	myread
>1097	Identifier	myread
>1098	Argument	myclose
>1099	Identifier	myclose
>1100	Argument	myopen
>1101	Identifier	myopen
>1102	Callee	SoundCore 
>1103	PtrMemberAccess	SoundCore 
>1104	Identifier	setFileSystem
>1105	Identifier	SoundCore 
>1106	Identifier	result
>1107	ExpressionStatement	 
>1108	CallExpression	debugLog ( \"set file system\" )
>1109	ArgumentList	\"set file system\"
>1110	Argument	\"set file system\"
>1111	PrimaryExpression	\"set file system\"
>1112	Callee	debugLog
>1113	Identifier	debugLog
>1114	ExpressionStatement	 
>1115	CallExpression	SoundCore 
>1116	ArgumentList	& channels
>1117	Argument	& channels
>1118	UnaryOp	& channels
>1119	Identifier	channels
>1120	UnaryOperator	&
>1121	Callee	SoundCore 
>1122	PtrMemberAccess	SoundCore 
>1123	Identifier	getNumChannels
>1124	Identifier	SoundCore 
>1125	IfStatement	if ( result == FMOD_ERR_OUTPUT_CREATEBUFFER )
>1126	CompoundStatement	 
>1127	IfStatement	if ( checkError ( ) )
>1128	GotoStatement	 
>1129	Identifier	get_out
>1130	Condition	 
>1131	CallExpression	checkError ( )
>1132	ArgumentList	 
>1133	Callee	checkError
>1134	Identifier	checkError
>1135	ExpressionStatement	 
>1136	AssignmentExpr	result = SoundCore 
>1137	CallExpression	SoundCore 
>1138	ArgumentList	channels
>1139	Argument	0
>1140	PrimaryExpression	0
>1141	Argument	FMOD_INIT_NORMAL
>1142	Identifier	FMOD_INIT_NORMAL
>1143	Argument	channels
>1144	Identifier	channels
>1145	Callee	SoundCore 
>1146	PtrMemberAccess	SoundCore 
>1147	Identifier	init
>1148	Identifier	SoundCore 
>1149	Identifier	result
>1150	ExpressionStatement	 
>1151	CallExpression	debugLog ( \"init 2\" )
>1152	ArgumentList	\"init 2\"
>1153	Argument	\"init 2\"
>1154	PrimaryExpression	\"init 2\"
>1155	Callee	debugLog
>1156	Identifier	debugLog
>1157	IfStatement	if ( checkError ( ) )
>1158	GotoStatement	 
>1159	Identifier	get_out
>1160	Condition	 
>1161	CallExpression	checkError ( )
>1162	ArgumentList	 
>1163	Callee	checkError
>1164	Identifier	checkError
>1165	ExpressionStatement	 
>1166	AssignmentExpr	result = SoundCore 
>1167	CallExpression	SoundCore 
>1168	ArgumentList	FMOD_SPEAKERMODE_STEREO
>1169	Argument	FMOD_SPEAKERMODE_STEREO
>1170	Identifier	FMOD_SPEAKERMODE_STEREO
>1171	Callee	SoundCore 
>1172	PtrMemberAccess	SoundCore 
>1173	Identifier	setSpeakerMode
>1174	Identifier	SoundCore 
>1175	Identifier	result
>1176	ExpressionStatement	 
>1177	CallExpression	debugLog ( \"err_output_createbuffer, speaker mode\" )
>1178	ArgumentList	\"err_output_createbuffer, speaker mode\"
>1179	Argument	\"err_output_createbuffer, speaker mode\"
>1180	PrimaryExpression	\"err_output_createbuffer, speaker mode\"
>1181	Callee	debugLog
>1182	Identifier	debugLog
>1183	Condition	 
>1184	EqualityExpression	result == FMOD_ERR_OUTPUT_CREATEBUFFER
>1185	Identifier	FMOD_ERR_OUTPUT_CREATEBUFFER
>1186	Identifier	result
>1187	ExpressionStatement	 
>1188	AssignmentExpr	result = SoundCore 
>1189	CallExpression	SoundCore 
>1190	ArgumentList	channels
>1191	Argument	0
>1192	PrimaryExpression	0
>1193	Argument	FMOD_INIT_NORMAL
>1194	Identifier	FMOD_INIT_NORMAL
>1195	Argument	channels
>1196	Identifier	channels
>1197	Callee	SoundCore 
>1198	PtrMemberAccess	SoundCore 
>1199	Identifier	init
>1200	Identifier	SoundCore 
>1201	Identifier	result
>1202	ExpressionStatement	 
>1203	CallExpression	debugLog ( \"init\" )
>1204	ArgumentList	\"init\"
>1205	Argument	\"init\"
>1206	PrimaryExpression	\"init\"
>1207	Callee	debugLog
>1208	Identifier	debugLog
>1209	IfStatement	if ( caps & FMOD_CAPS_HARDWARE_EMULATED )
>1210	CompoundStatement	 
>1211	IfStatement	if ( checkError ( ) )
>1212	GotoStatement	 
>1213	Identifier	get_out
>1214	Condition	 
>1215	CallExpression	checkError ( )
>1216	ArgumentList	 
>1217	Callee	checkError
>1218	Identifier	checkError
>1219	ExpressionStatement	 
>1220	AssignmentExpr	result = SoundCore 
>1221	CallExpression	SoundCore 
>1222	ArgumentList	1024
>1223	Argument	10
>1224	PrimaryExpression	10
>1225	Argument	1024
>1226	PrimaryExpression	1024
>1227	Callee	SoundCore 
>1228	PtrMemberAccess	SoundCore 
>1229	Identifier	setDSPBufferSize
>1230	Identifier	SoundCore 
>1231	Identifier	result
>1232	ExpressionStatement	 
>1233	CallExpression	debugLog ( \"acceleration slider is off\" )
>1234	ArgumentList	\"acceleration slider is off\"
>1235	Argument	\"acceleration slider is off\"
>1236	PrimaryExpression	\"acceleration slider is off\"
>1237	Callee	debugLog
>1238	Identifier	debugLog
>1239	Condition	 
>1240	BitAndExpression	caps & FMOD_CAPS_HARDWARE_EMULATED
>1241	Identifier	FMOD_CAPS_HARDWARE_EMULATED
>1242	Identifier	caps
>1243	ExpressionStatement	 
>1244	CallExpression	debugLog ( \"check caps\" )
>1245	ArgumentList	\"check caps\"
>1246	Argument	\"check caps\"
>1247	PrimaryExpression	\"check caps\"
>1248	Callee	debugLog
>1249	Identifier	debugLog
>1250	IfStatement	if ( checkError ( ) )
>1251	GotoStatement	 
>1252	Identifier	get_out
>1253	Condition	 
>1254	CallExpression	checkError ( )
>1255	ArgumentList	 
>1256	Callee	checkError
>1257	Identifier	checkError
>1258	ExpressionStatement	 
>1259	AssignmentExpr	result = SoundCore 
>1260	CallExpression	SoundCore 
>1261	ArgumentList	speakermode
>1262	Argument	speakermode
>1263	Identifier	speakermode
>1264	Callee	SoundCore 
>1265	PtrMemberAccess	SoundCore 
>1266	Identifier	setSpeakerMode
>1267	Identifier	SoundCore 
>1268	Identifier	result
>1269	ExpressionStatement	 
>1270	CallExpression	debugLog ( \"set speaker mode\" )
>1271	ArgumentList	\"set speaker mode\"
>1272	Argument	\"set speaker mode\"
>1273	PrimaryExpression	\"set speaker mode\"
>1274	Callee	debugLog
>1275	Identifier	debugLog
>1276	IfStatement	if ( checkError ( ) )
>1277	GotoStatement	 
>1278	Identifier	get_out
>1279	Condition	 
>1280	CallExpression	checkError ( )
>1281	ArgumentList	 
>1282	Callee	checkError
>1283	Identifier	checkError
>1284	ExpressionStatement	 
>1285	AssignmentExpr	result = SoundCore 
>1286	CallExpression	SoundCore 
>1287	ArgumentList	0
>1288	Argument	& speakermode
>1289	UnaryOp	& speakermode
>1290	Identifier	speakermode
>1291	UnaryOperator	&
>1292	Argument	0
>1293	PrimaryExpression	0
>1294	Argument	0
>1295	PrimaryExpression	0
>1296	Argument	& caps
>1297	UnaryOp	& caps
>1298	Identifier	caps
>1299	UnaryOperator	&
>1300	Argument	0
>1301	PrimaryExpression	0
>1302	Callee	SoundCore 
>1303	PtrMemberAccess	SoundCore 
>1304	Identifier	getDriverCaps
>1305	Identifier	SoundCore 
>1306	Identifier	result
>1307	ExpressionStatement	 
>1308	CallExpression	debugLog ( \"driver caps\" )
>1309	ArgumentList	\"driver caps\"
>1310	Argument	\"driver caps\"
>1311	PrimaryExpression	\"driver caps\"
>1312	Callee	debugLog
>1313	Identifier	debugLog
>1314	IfStatement	if ( version < FMOD_VERSION )
>1315	CompoundStatement	 
>1316	GotoStatement	 
>1317	Identifier	get_out
>1318	ExpressionStatement	 
>1319	CallExpression	debugLog ( str )
>1320	ArgumentList	str
>1321	Argument	str
>1322	Identifier	str
>1323	Callee	debugLog
>1324	Identifier	debugLog
>1325	ExpressionStatement	 
>1326	CallExpression	sprintf ( str , \"Error!  You are using an old version of FMOD %08x.  This program requires %08x\n\" , version , FMOD_\
>1327	ArgumentList	str
>1328	Argument	FMOD_VERSION
>1329	Identifier	FMOD_VERSION
>1330	Argument	version
>1331	Identifier	version
>1332	Argument	\"Error!  You are using an old version of FMOD %08x.  This program requires %08x\n\"
>1333	PrimaryExpression	\"Error!  You are using an old version of FMOD %08x.  This program requires %08x\n\"
>1334	Argument	str
>1335	Identifier	str
>1336	Callee	sprintf
>1337	Identifier	sprintf
>1338	IdentifierDeclStatement	 
>1339	IdentifierDecl	str [ 256 ]
>1340	PrimaryExpression	256
>1341	Identifier	str
>1342	IdentifierDeclType	char [ 256 ]
>1343	Condition	 
>1344	RelationalExpression	version < FMOD_VERSION
>1345	Identifier	FMOD_VERSION
>1346	Identifier	version
>1347	IfStatement	if ( checkError ( ) )
>1348	GotoStatement	 
>1349	Identifier	get_out
>1350	Condition	 
>1351	CallExpression	checkError ( )
>1352	ArgumentList	 
>1353	Callee	checkError
>1354	Identifier	checkError
>1355	ExpressionStatement	 
>1356	AssignmentExpr	result = SoundCore 
>1357	CallExpression	SoundCore 
>1358	ArgumentList	& version
>1359	Argument	& version
>1360	UnaryOp	& version
>1361	Identifier	version
>1362	UnaryOperator	&
>1363	Callee	SoundCore 
>1364	PtrMemberAccess	SoundCore 
>1365	Identifier	getVersion
>1366	Identifier	SoundCore 
>1367	Identifier	result
>1368	ExpressionStatement	 
>1369	CallExpression	debugLog ( \"getVersion\" )
>1370	ArgumentList	\"getVersion\"
>1371	Argument	\"getVersion\"
>1372	PrimaryExpression	\"getVersion\"
>1373	Callee	debugLog
>1374	Identifier	debugLog
>1375	IfStatement	if ( checkError ( ) )
>1376	GotoStatement	 
>1377	Identifier	get_out
>1378	Condition	 
>1379	CallExpression	checkError ( )
>1380	ArgumentList	 
>1381	Callee	checkError
>1382	Identifier	checkError
>1383	ExpressionStatement	 
>1384	AssignmentExpr	result = FMOD 
>1385	CallExpression	FMOD 
>1386	ArgumentList	& SoundCore 
>1387	Argument	& SoundCore 
>1388	UnaryOp	& SoundCore 
>1389	Identifier	SoundCore 
>1390	UnaryOperator	&
>1391	Callee	FMOD 
>1392	Identifier	FMOD 
>1393	Identifier	result
>1394	ExpressionStatement	 
>1395	CallExpression	debugLog ( \"system
>1396	ArgumentList	\"system
>1397	Argument	\"system
>1398	PrimaryExpression	\"system
>1399	Callee	debugLog
>1400	Identifier	debugLog
>1401	IdentifierDeclStatement	 
>1402	IdentifierDecl	caps
>1403	Identifier	caps
>1404	IdentifierDeclType	FMOD_CAPS
>1405	IdentifierDeclStatement	 
>1406	IdentifierDecl	speakermode
>1407	Identifier	speakermode
>1408	IdentifierDeclType	FMOD_SPEAKERMODE
>1409	IdentifierDeclStatement	 
>1410	IdentifierDecl	version
>1411	Identifier	version
>1412	IdentifierDeclType	unsigned int
>1413	IdentifierDeclStatement	 
>1414	IdentifierDecl	channels = 128
>1415	AssignmentExpr	channels = 128
>1416	PrimaryExpression	128
>1417	Identifier	channels
>1418	Identifier	channels
>1419	IdentifierDeclType	int
>1420	ExpressionStatement	 
>1421	AssignmentExpr	loadProgressCallback = NULL
>1422	Identifier	NULL
>1423	Identifier	loadProgressCallback
>1424	ExpressionStatement	 
>1425	AssignmentExpr	voiceFader = 1
>1426	PrimaryExpression	1
>1427	Identifier	voiceFader
>1428	ExpressionStatement	 
>1429	AssignmentExpr	sfxVol = 1
>1430	PrimaryExpression	1
>1431	Identifier	sfxVol
>1432	ExpressionStatement	 
>1433	AssignmentExpr	musVol = Vector ( 1 , 1 , 1 )
>1434	CallExpression	Vector ( 1 , 1 , 1 )
>1435	ArgumentList	1
>1436	Argument	1
>1437	PrimaryExpression	1
>1438	Argument	1
>1439	PrimaryExpression	1
>1440	Argument	1
>1441	PrimaryExpression	1
>1442	Callee	Vector
>1443	Identifier	Vector
>1444	Identifier	musVol
>1445	ExpressionStatement	 
>1446	AssignmentExpr	voxVol = Vector ( 1 , 1 , 1 )
>1447	CallExpression	Vector ( 1 , 1 , 1 )
>1448	ArgumentList	1
>1449	Argument	1
>1450	PrimaryExpression	1
>1451	Argument	1
>1452	PrimaryExpression	1
>1453	Argument	1
>1454	PrimaryExpression	1
>1455	Callee	Vector
>1456	Identifier	Vector
>1457	Identifier	voxVol
>1458	ExpressionStatement	 
>1459	AssignmentExpr	sfxFader = 1
>1460	PrimaryExpression	1
>1461	Identifier	sfxFader
>1462	ExpressionStatement	 
>1463	AssignmentExpr	enabled = false
>1464	Identifier	false
>1465	Identifier	enabled
>1466	ExpressionStatement	 
>1467	AssignmentExpr	sound = this
>1468	Identifier	this
>1469	Identifier	sound
>1470	ExpressionStatement	 
>1471	AssignmentExpr	overrideVoiceFader = - 1
>1472	UnaryOp	- 1
>1473	PrimaryExpression	1
>1474	UnaryOperator	-
>1475	Identifier	overrideVoiceFader
>1543	FunctionDef	SoundManager 
>1544	ParameterList	SoundEffectType effect , bool on
>1545	Parameter	 
>1546	Identifier	on
>1547	ParameterType	bool
>1548	Parameter	 
>1549	Identifier	effect
>1550	ParameterType	SoundEffectType
>1551	ReturnType	void
>1552	CompoundStatement	 
>1553	SwitchStatement	switch ( effect )
>1554	CompoundStatement	 
>1555	BreakStatement	 
>1556	IfStatement	if ( dspFlange )
>1557	CompoundStatement	 
>1558	IfStatement	if ( on && ! active )
>1559	ElseStatement	else
>1560	IfStatement	if ( ! on && active )
>1561	ExpressionStatement	 
>1562	CallExpression	dspFlange -> remove ( )
>1563	ArgumentList	 
>1564	Callee	dspFlange -> remove
>1565	PtrMemberAccess	dspFlange -> remove
>1566	Identifier	remove
>1567	Identifier	dspFlange
>1568	Condition	 
>1569	AndExpression	! on && active
>1570	Identifier	active
>1571	UnaryOp	! on
>1572	Identifier	on
>1573	UnaryOperator	!
>1574	ExpressionStatement	 
>1575	CallExpression	group_mus -> addDSP ( dspFlange , 0 )
>1576	ArgumentList	dspFlange
>1577	Argument	0
>1578	PrimaryExpression	0
>1579	Argument	dspFlange
>1580	Identifier	dspFlange
>1581	Callee	group_mus -> addDSP
>1582	PtrMemberAccess	group_mus -> addDSP
>1583	Identifier	addDSP
>1584	Identifier	group_mus
>1585	Condition	 
>1586	AndExpression	on && ! active
>1587	UnaryOp	! active
>1588	Identifier	active
>1589	UnaryOperator	!
>1590	Identifier	on
>1591	ExpressionStatement	 
>1592	CallExpression	dspFlange -> getActive ( & active )
>1593	ArgumentList	& active
>1594	Argument	& active
>1595	UnaryOp	& active
>1596	Identifier	active
>1597	UnaryOperator	&
>1598	Callee	dspFlange -> getActive
>1599	PtrMemberAccess	dspFlange -> getActive
>1600	Identifier	getActive
>1601	Identifier	dspFlange
>1602	Condition	 
>1603	Identifier	dspFlange
>1604	Label	 
>1605	Identifier	SFX_FLANGE
>1606	Condition	 
>1607	Identifier	effect
>1608	IdentifierDeclStatement	 
>1609	IdentifierDecl	active = false
>1610	AssignmentExpr	active = false
>1611	Identifier	false
>1612	Identifier	false
>1613	Identifier	active
>1614	IdentifierDeclType	bool
>1615	IfStatement	if ( ! enabled )
>1616	ReturnStatement	 
>1617	Condition	 
>1618	UnaryOp	! enabled
>1619	Identifier	enabled
>1620	UnaryOperator	!
>1632	FunctionDef	SoundManager 
>1633	ParameterList	 
>1634	ReturnType	std 
>1635	CompoundStatement	 
>1636	ReturnStatement	 
>1637	CallExpression	os . str ( )
>1638	ArgumentList	 
>1639	Callee	os . str
>1640	MemberAccess	os . str
>1641	Identifier	str
>1642	Identifier	os
>1643	ExpressionStatement	 
>1644	ShiftExpression	os << \"curMusVol (c1/c2/g)
>1645	ShiftExpression	\"curMusVol (c1/c2/g)
>1646	ShiftExpression	musicChannelVol << \" \" << musicChannel2Vol << \" \" << musicGroupVol << std 
>1647	ShiftExpression	\" \" << musicChannel2Vol << \" \" << musicGroupVol << std 
>1648	ShiftExpression	musicChannel2Vol << \" \" << musicGroupVol << std 
>1649	ShiftExpression	\" \" << musicGroupVol << std 
>1650	ShiftExpression	musicGroupVol << std 
>1651	Identifier	std 
>1652	Identifier	musicGroupVol
>1653	PrimaryExpression	\" \"
>1654	Identifier	musicChannel2Vol
>1655	PrimaryExpression	\" \"
>1656	Identifier	musicChannelVol
>1657	PrimaryExpression	\"curMusVol (c1/c2/g)
>1658	Identifier	os
>1659	IfStatement	if ( musicChannel2 )
>1660	ExpressionStatement	 
>1661	CallExpression	musicChannel2 -> getVolume ( & musicChannel2Vol )
>1662	ArgumentList	& musicChannel2Vol
>1663	Argument	& musicChannel2Vol
>1664	UnaryOp	& musicChannel2Vol
>1665	Identifier	musicChannel2Vol
>1666	UnaryOperator	&
>1667	Callee	musicChannel2 -> getVolume
>1668	PtrMemberAccess	musicChannel2 -> getVolume
>1669	Identifier	getVolume
>1670	Identifier	musicChannel2
>1671	Condition	 
>1672	Identifier	musicChannel2
>1673	IdentifierDeclStatement	 
>1674	IdentifierDecl	musicChannel2Vol = - 1
>1675	AssignmentExpr	musicChannel2Vol = - 1
>1676	UnaryOp	- 1
>1677	PrimaryExpression	1
>1678	UnaryOperator	-
>1679	Identifier	musicChannel2Vol
>1680	Identifier	musicChannel2Vol
>1681	IdentifierDeclType	float
>1682	IfStatement	if ( group_mus )
>1683	ExpressionStatement	 
>1684	CallExpression	group_mus -> getVolume ( & musicGroupVol )
>1685	ArgumentList	& musicGroupVol
>1686	Argument	& musicGroupVol
>1687	UnaryOp	& musicGroupVol
>1688	Identifier	musicGroupVol
>1689	UnaryOperator	&
>1690	Callee	group_mus -> getVolume
>1691	PtrMemberAccess	group_mus -> getVolume
>1692	Identifier	getVolume
>1693	Identifier	group_mus
>1694	Condition	 
>1695	Identifier	group_mus
>1696	IdentifierDeclStatement	 
>1697	IdentifierDecl	musicGroupVol = - 1
>1698	AssignmentExpr	musicGroupVol = - 1
>1699	UnaryOp	- 1
>1700	PrimaryExpression	1
>1701	UnaryOperator	-
>1702	Identifier	musicGroupVol
>1703	Identifier	musicGroupVol
>1704	IdentifierDeclType	float
>1705	IfStatement	if ( musicChannel )
>1706	ExpressionStatement	 
>1707	CallExpression	musicChannel -> getVolume ( & musicChannelVol )
>1708	ArgumentList	& musicChannelVol
>1709	Argument	& musicChannelVol
>1710	UnaryOp	& musicChannelVol
>1711	Identifier	musicChannelVol
>1712	UnaryOperator	&
>1713	Callee	musicChannel -> getVolume
>1714	PtrMemberAccess	musicChannel -> getVolume
>1715	Identifier	getVolume
>1716	Identifier	musicChannel
>1717	Condition	 
>1718	Identifier	musicChannel
>1719	IdentifierDeclStatement	 
>1720	IdentifierDecl	musicChannelVol = - 1
>1721	AssignmentExpr	musicChannelVol = - 1
>1722	UnaryOp	- 1
>1723	PrimaryExpression	1
>1724	UnaryOperator	-
>1725	Identifier	musicChannelVol
>1726	Identifier	musicChannelVol
>1727	IdentifierDeclType	float
>1728	ExpressionStatement	 
>1729	ShiftExpression	os << \"musVol
>1730	ShiftExpression	\"musVol
>1731	ShiftExpression	musVol . y << \" voxVol
>1732	ShiftExpression	\" voxVol
>1733	ShiftExpression	voxVol . y << std 
>1734	Identifier	std 
>1735	MemberAccess	voxVol . y
>1736	Identifier	y
>1737	Identifier	voxVol
>1738	PrimaryExpression	\" voxVol
>1739	MemberAccess	musVol . y
>1740	Identifier	y
>1741	Identifier	musVol
>1742	PrimaryExpression	\"musVol
>1743	Identifier	os
>1744	ExpressionStatement	 
>1745	ShiftExpression	os << \"sfxFader
>1746	ShiftExpression	\"sfxFader
>1747	ShiftExpression	this -> sfxFader << \" sfxVol
>1748	ShiftExpression	\" sfxVol
>1749	ShiftExpression	this -> sfxVol << \" [\" << lastMusic << \"]\" << std 
>1750	ShiftExpression	\" [\" << lastMusic << \"]\" << std 
>1751	ShiftExpression	lastMusic << \"]\" << std 
>1752	ShiftExpression	\"]\" << std 
>1753	Identifier	std 
>1754	PrimaryExpression	\"]\"
>1755	Identifier	lastMusic
>1756	PrimaryExpression	\" [\"
>1757	PtrMemberAccess	this -> sfxVol
>1758	Identifier	sfxVol
>1759	Identifier	this
>1760	PrimaryExpression	\" sfxVol
>1761	PtrMemberAccess	this -> sfxFader
>1762	Identifier	sfxFader
>1763	Identifier	this
>1764	PrimaryExpression	\"sfxFader
>1765	Identifier	os
>1766	IdentifierDeclStatement	 
>1767	IdentifierDecl	os
>1768	Identifier	os
>1769	IdentifierDeclType	std 
>1787	FunctionDef	SoundManager 
>1788	ParameterList	 
>1789	ReturnType	float
>1790	CompoundStatement	 
>1791	ReturnStatement	 
>1792	MemberAccess	musVol . y
>1793	Identifier	y
>1794	Identifier	musVol
>1800	FunctionDef	SoundManager 
>1801	ParameterList	 
>1802	ReturnType	float
>1803	CompoundStatement	 
>1804	ReturnStatement	 
>1805	MemberAccess	voxVol . y
>1806	Identifier	y
>1807	Identifier	voxVol
>1813	FunctionDef	SoundManager 
>1814	ParameterList	void * chan , float v
>1815	Parameter	 
>1816	Identifier	v
>1817	ParameterType	float
>1818	Parameter	 
>1819	Identifier	chan
>1820	ParameterType	void *
>1821	ReturnType	void
>1822	CompoundStatement	 
>1828	FunctionDef	SoundManager 
>1829	ParameterList	float v
>1830	Parameter	 
>1831	Identifier	v
>1832	ParameterType	float
>1833	ReturnType	void
>1834	CompoundStatement	 
>1835	ExpressionStatement	 
>1836	AssignmentExpr	overrideVoiceFader = v
>1837	Identifier	v
>1838	Identifier	overrideVoiceFader
>1844	FunctionDef	SoundManager 
>1845	ParameterList	float v , float t
>1846	Parameter	 
>1847	Identifier	t
>1848	ParameterType	float
>1849	Parameter	 
>1850	Identifier	v
>1851	ParameterType	float
>1852	ReturnType	void
>1853	CompoundStatement	 
>1854	ExpressionStatement	 
>1855	CallExpression	musVol . interpolateTo ( Vector ( musVol . x , v , musVol . z ) , t )
>1856	ArgumentList	Vector ( musVol . x , v , musVol . z )
>1857	Argument	t
>1858	Identifier	t
>1859	Argument	Vector ( musVol . x , v , musVol . z )
>1860	CallExpression	Vector ( musVol . x , v , musVol . z )
>1861	ArgumentList	musVol . x
>1862	Argument	musVol . z
>1863	MemberAccess	musVol . z
>1864	Identifier	z
>1865	Identifier	musVol
>1866	Argument	v
>1867	Identifier	v
>1868	Argument	musVol . x
>1869	MemberAccess	musVol . x
>1870	Identifier	x
>1871	Identifier	musVol
>1872	Callee	Vector
>1873	Identifier	Vector
>1874	Callee	musVol . interpolateTo
>1875	MemberAccess	musVol . interpolateTo
>1876	Identifier	interpolateTo
>1877	Identifier	musVol
>1878	IfStatement	if ( v != 0 && musVol . data && musVol . data -> target . y == 0 && musVol . y > 0 )
>1879	CompoundStatement	 
>1880	ReturnStatement	 
>1881	Condition	 
>1882	AndExpression	v != 0 && musVol . data && musVol . data -> target . y == 0 && musVol . y > 0
>1883	AndExpression	musVol . data && musVol . data -> target . y == 0 && musVol . y > 0
>1884	AndExpression	musVol . data -> target . y == 0 && musVol . y > 0
>1885	RelationalExpression	musVol . y > 0
>1886	PrimaryExpression	0
>1887	MemberAccess	musVol . y
>1888	Identifier	y
>1889	Identifier	musVol
>1890	EqualityExpression	musVol . data -> target . y == 0
>1891	PrimaryExpression	0
>1892	MemberAccess	musVol . data -> target . y
>1893	Identifier	y
>1894	PtrMemberAccess	musVol . data -> target
>1895	Identifier	target
>1896	MemberAccess	musVol . data
>1897	Identifier	data
>1898	Identifier	musVol
>1899	MemberAccess	musVol . data
>1900	Identifier	data
>1901	Identifier	musVol
>1902	EqualityExpression	v != 0
>1903	PrimaryExpression	0
>1904	Identifier	v
>1920	FunctionDef	SoundManager 
>1921	ParameterList	const std 
>1922	Parameter	 
>1923	Identifier	errMsg
>1924	ParameterType	const std 
>1925	ReturnType	void
>1926	CompoundStatement	 
>1927	ExpressionStatement	 
>1928	CallExpression	errorLog ( errMsg )
>1929	ArgumentList	errMsg
>1930	Argument	errMsg
>1931	Identifier	errMsg
>1932	Callee	errorLog
>1933	Identifier	errorLog
>1938	FunctionDef	SoundManager 
>1939	ParameterList	 
>1940	CompoundStatement	 
>1941	ExpressionStatement	 
>1942	CallExpression	SoundCore 
>1943	ArgumentList	 
>1944	Callee	SoundCore 
>1945	PtrMemberAccess	SoundCore 
>1946	Identifier	release
>1947	Identifier	SoundCore 
>1948	ExpressionStatement	 
>1949	CallExpression	soundMap . clear ( )
>1950	ArgumentList	 
>1951	Callee	soundMap . clear
>1952	MemberAccess	soundMap . clear
>1953	Identifier	clear
>1954	Identifier	soundMap
>1955	ForStatement	for ( SoundMap 
>1956	CompoundStatement	 
>1957	ExpressionStatement	 
>1958	CallExpression	samp -> release ( )
>1959	ArgumentList	 
>1960	Callee	samp -> release
>1961	PtrMemberAccess	samp -> release
>1962	Identifier	release
>1963	Identifier	samp
>1964	IdentifierDeclStatement	 
>1965	IdentifierDecl	* samp = ( FMOD 
>1966	AssignmentExpr	* samp = ( FMOD 
>1967	CastExpression	( FMOD 
>1968	MemberAccess	( * i ) . second
>1969	Identifier	second
>1970	UnaryOp	* i
>1971	Identifier	i
>1972	UnaryOperator	*
>1973	CastTarget	FMOD 
>1974	Identifier	samp
>1975	Identifier	samp
>1976	IdentifierDeclType	FMOD 
>1977	ExpressionStatement	 
>1978	CallExpression	debugLog ( \"unloading sound [\" + snd + \"]\" )
>1979	ArgumentList	\"unloading sound [\" + snd + \"]\"
>1980	Argument	\"unloading sound [\" + snd + \"]\"
>1981	AdditiveExpression	\"unloading sound [\" + snd + \"]\"
>1982	AdditiveExpression	snd + \"]\"
>1983	PrimaryExpression	\"]\"
>1984	Identifier	snd
>1985	PrimaryExpression	\"unloading sound [\"
>1986	Callee	debugLog
>1987	Identifier	debugLog
>1988	IdentifierDeclStatement	 
>1989	IdentifierDecl	snd = ( * i ) . first
>1990	AssignmentExpr	snd = ( * i ) . first
>1991	MemberAccess	( * i ) . first
>1992	Identifier	first
>1993	UnaryOp	* i
>1994	Identifier	i
>1995	UnaryOperator	*
>1996	Identifier	snd
>1997	Identifier	snd
>1998	IdentifierDeclType	std 
>1999	IncDecOp	 
>2000	IncDec	++
>2001	Identifier	i
>2002	Condition	 
>2003	EqualityExpression	i != soundMap . end ( )
>2004	CallExpression	soundMap . end ( )
>2005	ArgumentList	 
>2006	Callee	soundMap . end
>2007	MemberAccess	soundMap . end
>2008	Identifier	end
>2009	Identifier	soundMap
>2010	Identifier	i
>2011	ForInit	 
>2012	IdentifierDeclStatement	SoundMap 
>2013	IdentifierDecl	i = soundMap . begin ( )
>2014	AssignmentExpr	i = soundMap . begin ( )
>2015	CallExpression	soundMap . begin ( )
>2016	ArgumentList	 
>2017	Callee	soundMap . begin
>2018	MemberAccess	soundMap . begin
>2019	Identifier	begin
>2020	Identifier	soundMap
>2021	Identifier	i
>2022	Identifier	i
>2023	IdentifierDeclType	SoundMap 
>2024	IfStatement	if ( ! enabled )
>2025	ReturnStatement	 
>2026	Condition	 
>2027	UnaryOp	! enabled
>2028	Identifier	enabled
>2029	UnaryOperator	!
>2044	FunctionDef	SoundManager 
>2045	ParameterList	 
>2046	ReturnType	void
>2047	CompoundStatement	 
>2048	IfStatement	if ( group_sfx )
>2049	ExpressionStatement	 
>2050	CallExpression	group_sfx -> stop ( )
>2051	ArgumentList	 
>2052	Callee	group_sfx -> stop
>2053	PtrMemberAccess	group_sfx -> stop
>2054	Identifier	stop
>2055	Identifier	group_sfx
>2056	Condition	 
>2057	Identifier	group_sfx
>2062	FunctionDef	SoundManager 
>2063	ParameterList	 
>2064	ReturnType	void
>2065	CompoundStatement	 
>2069	FunctionDef	SoundManager 
>2070	ParameterList	 
>2071	ReturnType	void
>2072	CompoundStatement	 
>2073	IfStatement	if ( ! voxQueue . empty ( ) )
>2074	ElseStatement	else
>2075	CompoundStatement	 
>2076	ExpressionStatement	 
>2077	AssignmentExpr	sfxFader = 1
>2078	PrimaryExpression	1
>2079	Identifier	sfxFader
>2080	ExpressionStatement	 
>2081	CallExpression	setMusicFader ( 1 , 1 )
>2082	ArgumentList	1
>2083	Argument	1
>2084	PrimaryExpression	1
>2085	Argument	1
>2086	PrimaryExpression	1
>2087	Callee	setMusicFader
>2088	Identifier	setMusicFader
>2089	CompoundStatement	 
>2090	ExpressionStatement	 
>2091	CallExpression	playVoice ( vox , SVT_INTERRUPT )
>2092	ArgumentList	vox
>2093	Argument	SVT_INTERRUPT
>2094	Identifier	SVT_INTERRUPT
>2095	Argument	vox
>2096	Identifier	vox
>2097	Callee	playVoice
>2098	Identifier	playVoice
>2099	IfStatement	if ( ! voxQueue . empty ( ) )
>2100	ExpressionStatement	 
>2101	CallExpression	voxQueue . pop ( )
>2102	ArgumentList	 
>2103	Callee	voxQueue . pop
>2104	MemberAccess	voxQueue . pop
>2105	Identifier	pop
>2106	Identifier	voxQueue
>2107	Condition	 
>2108	UnaryOp	! voxQueue . empty ( )
>2109	CallExpression	voxQueue . empty ( )
>2110	ArgumentList	 
>2111	Callee	voxQueue . empty
>2112	MemberAccess	voxQueue . empty
>2113	Identifier	empty
>2114	Identifier	voxQueue
>2115	UnaryOperator	!
>2116	IdentifierDeclStatement	 
>2117	IdentifierDecl	vox = voxQueue . front ( )
>2118	AssignmentExpr	vox = voxQueue . front ( )
>2119	CallExpression	voxQueue . front ( )
>2120	ArgumentList	 
>2121	Callee	voxQueue . front
>2122	MemberAccess	voxQueue . front
>2123	Identifier	front
>2124	Identifier	voxQueue
>2125	Identifier	vox
>2126	Identifier	vox
>2127	IdentifierDeclType	std 
>2128	Condition	 
>2129	UnaryOp	! voxQueue . empty ( )
>2130	CallExpression	voxQueue . empty ( )
>2131	ArgumentList	 
>2132	Callee	voxQueue . empty
>2133	MemberAccess	voxQueue . empty
>2134	Identifier	empty
>2135	Identifier	voxQueue
>2136	UnaryOperator	!
>2137	IfStatement	if ( dspReverb )
>2138	ExpressionStatement	 
>2139	CallExpression	dspReverb -> remove ( )
>2140	ArgumentList	 
>2141	Callee	dspReverb -> remove
>2142	PtrMemberAccess	dspReverb -> remove
>2143	Identifier	remove
>2144	Identifier	dspReverb
>2145	Condition	 
>2146	Identifier	dspReverb
>2147	ExpressionStatement	 
>2148	CallExpression	event_stopVoice . call ( )
>2149	ArgumentList	 
>2150	Callee	event_stopVoice . call
>2151	MemberAccess	event_stopVoice . call
>2152	Identifier	call
>2153	Identifier	event_stopVoice
>2165	FunctionDef	SoundManager 
>2166	ParameterList	 
>2167	ReturnType	bool
>2168	CompoundStatement	 
>2169	ReturnStatement	 
>2170	Identifier	paused
>2171	ExpressionStatement	 
>2172	CallExpression	checkError ( )
>2173	ArgumentList	 
>2174	Callee	checkError
>2175	Identifier	checkError
>2176	ExpressionStatement	 
>2177	AssignmentExpr	result = masterChannelGroup -> getPaused ( & paused )
>2178	CallExpression	masterChannelGroup -> getPaused ( & paused )
>2179	ArgumentList	& paused
>2180	Argument	& paused
>2181	UnaryOp	& paused
>2182	Identifier	paused
>2183	UnaryOperator	&
>2184	Callee	masterChannelGroup -> getPaused
>2185	PtrMemberAccess	masterChannelGroup -> getPaused
>2186	Identifier	getPaused
>2187	Identifier	masterChannelGroup
>2188	Identifier	result
>2189	IfStatement	if ( ! enabled )
>2190	ReturnStatement	 
>2191	Identifier	paused
>2192	Condition	 
>2193	UnaryOp	! enabled
>2194	Identifier	enabled
>2195	UnaryOperator	!
>2196	IdentifierDeclStatement	 
>2197	IdentifierDecl	paused = false
>2198	AssignmentExpr	paused = false
>2199	Identifier	false
>2200	Identifier	false
>2201	Identifier	paused
>2202	IdentifierDeclType	bool
>2214	FunctionDef	SoundManager 
>2215	ParameterList	 
>2216	ReturnType	void
>2217	CompoundStatement	 
>2218	ExpressionStatement	 
>2219	CallExpression	SoundCore 
>2220	ArgumentList	 
>2221	Callee	SoundCore 
>2222	MemberAccess	SoundCore 
>2223	Identifier	clear
>2224	Identifier	SoundCore 
>2225	ForStatement	for ( ; i != fadeChs . end ( ) ; i ++ )
>2226	CompoundStatement	 
>2227	IfStatement	if ( f -> c )
>2228	CompoundStatement	 
>2229	ExpressionStatement	 
>2230	CallExpression	f -> c -> stop ( )
>2231	ArgumentList	 
>2232	Callee	f -> c -> stop
>2233	PtrMemberAccess	f -> c -> stop
>2234	Identifier	stop
>2235	PtrMemberAccess	f -> c
>2236	Identifier	c
>2237	Identifier	f
>2238	Condition	 
>2239	PtrMemberAccess	f -> c
>2240	Identifier	c
>2241	Identifier	f
>2242	IdentifierDeclStatement	 
>2243	IdentifierDecl	* f = & ( * i )
>2244	AssignmentExpr	* f = & ( * i )
>2245	UnaryOp	& ( * i )
>2246	UnaryOp	* i
>2247	Identifier	i
>2248	UnaryOperator	*
>2249	UnaryOperator	&
>2250	Identifier	f
>2251	Identifier	f
>2252	IdentifierDeclType	FadeCh *
>2253	IncDecOp	 
>2254	IncDec	++
>2255	Identifier	i
>2256	Condition	 
>2257	EqualityExpression	i != fadeChs . end ( )
>2258	CallExpression	fadeChs . end ( )
>2259	ArgumentList	 
>2260	Callee	fadeChs . end
>2261	MemberAccess	fadeChs . end
>2262	Identifier	end
>2263	Identifier	fadeChs
>2264	Identifier	i
>2265	IdentifierDeclStatement	 
>2266	IdentifierDecl	i = fadeChs . begin ( )
>2267	AssignmentExpr	i = fadeChs . begin ( )
>2268	CallExpression	fadeChs . begin ( )
>2269	ArgumentList	 
>2270	Callee	fadeChs . begin
>2271	MemberAccess	fadeChs . begin
>2272	Identifier	begin
>2273	Identifier	fadeChs
>2274	Identifier	i
>2275	Identifier	i
>2276	IdentifierDeclType	SoundCore 
>2289	FunctionDef	SoundManager 
>2290	ParameterList	float dt
>2291	Parameter	 
>2292	Identifier	dt
>2293	ParameterType	float
>2294	ReturnType	void
>2295	CompoundStatement	 
>2296	IfStatement	if ( wasPlayingVoice && ! isPlayingVoice ( ) )
>2297	CompoundStatement	 
>2298	ExpressionStatement	 
>2299	CallExpression	onVoiceEnded ( )
>2300	ArgumentList	 
>2301	Callee	onVoiceEnded
>2302	Identifier	onVoiceEnded
>2303	ExpressionStatement	 
>2304	AssignmentExpr	wasPlayingVoice = false
>2305	Identifier	false
>2306	Identifier	wasPlayingVoice
>2307	Condition	 
>2308	AndExpression	wasPlayingVoice && ! isPlayingVoice ( )
>2309	UnaryOp	! isPlayingVoice ( )
>2310	CallExpression	isPlayingVoice ( )
>2311	ArgumentList	 
>2312	Callee	isPlayingVoice
>2313	Identifier	isPlayingVoice
>2314	UnaryOperator	!
>2315	Identifier	wasPlayingVoice
>2316	ExpressionStatement	 
>2317	CallExpression	SoundCore 
>2318	ArgumentList	 
>2319	Callee	SoundCore 
>2320	PtrMemberAccess	SoundCore 
>2321	Identifier	update
>2322	Identifier	SoundCore 
>2323	IfStatement	if ( ! fadeChs . empty ( ) )
>2324	CompoundStatement	 
>2325	ForStatement	for ( FadeChs 
>2326	CompoundStatement	 
>2327	ExpressionStatement	 
>2328	IncDecOp	i ++
>2329	IncDec	++
>2330	Identifier	i
>2331	IfStatement	if ( f -> c )
>2332	CompoundStatement	 
>2333	ExpressionStatement	 
>2334	CallExpression	checkError ( )
>2335	ArgumentList	 
>2336	Callee	checkError
>2337	Identifier	checkError
>2338	ExpressionStatement	 
>2339	CallExpression	f -> c -> setVolume ( f -> v )
>2340	ArgumentList	f -> v
>2341	Argument	f -> v
>2342	PtrMemberAccess	f -> v
>2343	Identifier	v
>2344	Identifier	f
>2345	Callee	f -> c -> setVolume
>2346	PtrMemberAccess	f -> c -> setVolume
>2347	Identifier	setVolume
>2348	PtrMemberAccess	f -> c
>2349	Identifier	c
>2350	Identifier	f
>2351	Condition	 
>2352	PtrMemberAccess	f -> c
>2353	Identifier	c
>2354	Identifier	f
>2355	IfStatement	if ( f -> d > 0 )
>2356	ElseStatement	else
>2357	CompoundStatement	 
>2358	IfStatement	if ( f -> v <= f -> to )
>2359	CompoundStatement	 
>2360	ContinueStatement	 
>2361	ExpressionStatement	 
>2362	AssignmentExpr	i = fadeChs . erase ( i )
>2363	CallExpression	fadeChs . erase ( i )
>2364	ArgumentList	i
>2365	Argument	i
>2366	Identifier	i
>2367	Callee	fadeChs . erase
>2368	MemberAccess	fadeChs . erase
>2369	Identifier	erase
>2370	Identifier	fadeChs
>2371	Identifier	i
>2372	ExpressionStatement	 
>2373	AssignmentExpr	f -> c = 0
>2374	PrimaryExpression	0
>2375	PtrMemberAccess	f -> c
>2376	Identifier	c
>2377	Identifier	f
>2378	ExpressionStatement	 
>2379	CallExpression	checkError ( )
>2380	ArgumentList	 
>2381	Callee	checkError
>2382	Identifier	checkError
>2383	ExpressionStatement	 
>2384	AssignmentExpr	result = f -> c -> stop ( )
>2385	CallExpression	f -> c -> stop ( )
>2386	ArgumentList	 
>2387	Callee	f -> c -> stop
>2388	PtrMemberAccess	f -> c -> stop
>2389	Identifier	stop
>2390	PtrMemberAccess	f -> c
>2391	Identifier	c
>2392	Identifier	f
>2393	Identifier	result
>2394	ExpressionStatement	 
>2395	AssignmentExpr	f -> v = f -> to
>2396	PtrMemberAccess	f -> to
>2397	Identifier	to
>2398	Identifier	f
>2399	PtrMemberAccess	f -> v
>2400	Identifier	v
>2401	Identifier	f
>2402	Condition	 
>2403	RelationalExpression	f -> v <= f -> to
>2404	PtrMemberAccess	f -> to
>2405	Identifier	to
>2406	Identifier	f
>2407	PtrMemberAccess	f -> v
>2408	Identifier	v
>2409	Identifier	f
>2410	CompoundStatement	 
>2411	IfStatement	if ( f -> v >= f -> to )
>2412	CompoundStatement	 
>2413	ContinueStatement	 
>2414	ExpressionStatement	 
>2415	AssignmentExpr	i = fadeChs . erase ( i )
>2416	CallExpression	fadeChs . erase ( i )
>2417	ArgumentList	i
>2418	Argument	i
>2419	Identifier	i
>2420	Callee	fadeChs . erase
>2421	MemberAccess	fadeChs . erase
>2422	Identifier	erase
>2423	Identifier	fadeChs
>2424	Identifier	i
>2425	ExpressionStatement	 
>2426	AssignmentExpr	f -> v = f -> to
>2427	PtrMemberAccess	f -> to
>2428	Identifier	to
>2429	Identifier	f
>2430	PtrMemberAccess	f -> v
>2431	Identifier	v
>2432	Identifier	f
>2433	Condition	 
>2434	RelationalExpression	f -> v >= f -> to
>2435	PtrMemberAccess	f -> to
>2436	Identifier	to
>2437	Identifier	f
>2438	PtrMemberAccess	f -> v
>2439	Identifier	v
>2440	Identifier	f
>2441	Condition	 
>2442	RelationalExpression	f -> d > 0
>2443	PrimaryExpression	0
>2444	PtrMemberAccess	f -> d
>2445	Identifier	d
>2446	Identifier	f
>2447	ExpressionStatement	 
>2448	AssignmentExpr	f -> v += dt * f -> s * f -> d
>2449	MultiplicativeExpression	dt * f -> s * f -> d
>2450	MultiplicativeExpression	f -> s * f -> d
>2451	PtrMemberAccess	f -> d
>2452	Identifier	d
>2453	Identifier	f
>2454	PtrMemberAccess	f -> s
>2455	Identifier	s
>2456	Identifier	f
>2457	Identifier	dt
>2458	PtrMemberAccess	f -> v
>2459	Identifier	v
>2460	Identifier	f
>2461	IdentifierDeclStatement	 
>2462	IdentifierDecl	* f = & ( * i )
>2463	AssignmentExpr	* f = & ( * i )
>2464	UnaryOp	& ( * i )
>2465	UnaryOp	* i
>2466	Identifier	i
>2467	UnaryOperator	*
>2468	UnaryOperator	&
>2469	Identifier	f
>2470	Identifier	f
>2471	IdentifierDeclType	FadeCh *
>2472	ExpressionStatement	 
>2473	IncDecOp	itr ++
>2474	IncDec	++
>2475	Identifier	itr
>2476	Condition	 
>2477	EqualityExpression	i != fadeChs . end ( )
>2478	CallExpression	fadeChs . end ( )
>2479	ArgumentList	 
>2480	Callee	fadeChs . end
>2481	MemberAccess	fadeChs . end
>2482	Identifier	end
>2483	Identifier	fadeChs
>2484	Identifier	i
>2485	ForInit	 
>2486	IdentifierDeclStatement	FadeChs 
>2487	IdentifierDecl	i = fadeChs . begin ( )
>2488	AssignmentExpr	i = fadeChs . begin ( )
>2489	CallExpression	fadeChs . begin ( )
>2490	ArgumentList	 
>2491	Callee	fadeChs . begin
>2492	MemberAccess	fadeChs . begin
>2493	Identifier	begin
>2494	Identifier	fadeChs
>2495	Identifier	i
>2496	Identifier	i
>2497	IdentifierDeclType	FadeChs 
>2498	IdentifierDeclStatement	 
>2499	IdentifierDecl	itr = 0
>2500	AssignmentExpr	itr = 0
>2501	PrimaryExpression	0
>2502	Identifier	itr
>2503	Identifier	itr
>2504	IdentifierDeclType	int
>2505	Condition	 
>2506	UnaryOp	! fadeChs . empty ( )
>2507	CallExpression	fadeChs . empty ( )
>2508	ArgumentList	 
>2509	Callee	fadeChs . empty
>2510	MemberAccess	fadeChs . empty
>2511	Identifier	empty
>2512	Identifier	fadeChs
>2513	UnaryOperator	!
>2514	IfStatement	if ( musicChannel2 )
>2515	CompoundStatement	 
>2516	IfStatement	if ( musicFader2Timer <= 0 )
>2517	CompoundStatement	 
>2518	ExpressionStatement	 
>2519	AssignmentExpr	musicStream2 = 0
>2520	PrimaryExpression	0
>2521	Identifier	musicStream2
>2522	ExpressionStatement	 
>2523	AssignmentExpr	musicChannel2 = 0
>2524	PrimaryExpression	0
>2525	Identifier	musicChannel2
>2526	ExpressionStatement	 
>2527	CallExpression	checkError ( )
>2528	ArgumentList	 
>2529	Callee	checkError
>2530	Identifier	checkError
>2531	ExpressionStatement	 
>2532	AssignmentExpr	result = musicStream2 -> release ( )
>2533	CallExpression	musicStream2 -> release ( )
>2534	ArgumentList	 
>2535	Callee	musicStream2 -> release
>2536	PtrMemberAccess	musicStream2 -> release
>2537	Identifier	release
>2538	Identifier	musicStream2
>2539	Identifier	result
>2540	ExpressionStatement	 
>2541	CallExpression	checkError ( )
>2542	ArgumentList	 
>2543	Callee	checkError
>2544	Identifier	checkError
>2545	ExpressionStatement	 
>2546	AssignmentExpr	result = musicChannel2 -> stop ( )
>2547	CallExpression	musicChannel2 -> stop ( )
>2548	ArgumentList	 
>2549	Callee	musicChannel2 -> stop
>2550	PtrMemberAccess	musicChannel2 -> stop
>2551	Identifier	stop
>2552	Identifier	musicChannel2
>2553	Identifier	result
>2554	Condition	 
>2555	RelationalExpression	musicFader2Timer <= 0
>2556	PrimaryExpression	0
>2557	Identifier	musicFader2Timer
>2558	ExpressionStatement	 
>2559	CallExpression	musicChannel2 -> setVolume ( ( musicFader2Timer / musicFader2Time ) * musicFader2Volume )
>2560	ArgumentList	( musicFader2Timer / musicFader2Time ) * musicFader2Volume
>2561	Argument	( musicFader2Timer / musicFader2Time ) * musicFader2Volume
>2562	MultiplicativeExpression	( musicFader2Timer / musicFader2Time ) * musicFader2Volume
>2563	Identifier	musicFader2Volume
>2564	MultiplicativeExpression	musicFader2Timer / musicFader2Time
>2565	Identifier	musicFader2Time
>2566	Identifier	musicFader2Timer
>2567	Callee	musicChannel2 -> setVolume
>2568	PtrMemberAccess	musicChannel2 -> setVolume
>2569	Identifier	setVolume
>2570	Identifier	musicChannel2
>2571	IfStatement	if ( musicFader2Timer < 0 )
>2572	ExpressionStatement	 
>2573	AssignmentExpr	musicFader2Timer = 0
>2574	PrimaryExpression	0
>2575	Identifier	musicFader2Timer
>2576	Condition	 
>2577	RelationalExpression	musicFader2Timer < 0
>2578	PrimaryExpression	0
>2579	Identifier	musicFader2Timer
>2580	ExpressionStatement	 
>2581	AssignmentExpr	musicFader2Timer -= dt
>2582	Identifier	dt
>2583	Identifier	musicFader2Timer
>2584	Condition	 
>2585	Identifier	musicChannel2
>2586	IfStatement	if ( group_sfx )
>2587	CompoundStatement	 
>2588	ExpressionStatement	 
>2589	CallExpression	group_sfx -> setVolume ( sfxFader * sfxVol )
>2590	ArgumentList	sfxFader * sfxVol
>2591	Argument	sfxFader * sfxVol
>2592	MultiplicativeExpression	sfxFader * sfxVol
>2593	Identifier	sfxVol
>2594	Identifier	sfxFader
>2595	Callee	group_sfx -> setVolume
>2596	PtrMemberAccess	group_sfx -> setVolume
>2597	Identifier	setVolume
>2598	Identifier	group_sfx
>2599	Condition	 
>2600	Identifier	group_sfx
>2601	IfStatement	if ( musicChannel )
>2602	CompoundStatement	 
>2603	IfStatement	if ( musVol . y <= 0 && stopMusicOnFadeOut )
>2604	CompoundStatement	 
>2605	ExpressionStatement	 
>2606	AssignmentExpr	stopMusicOnFadeOut = false
>2607	Identifier	false
>2608	Identifier	stopMusicOnFadeOut
>2609	ExpressionStatement	 
>2610	CallExpression	stopMusic ( )
>2611	ArgumentList	 
>2612	Callee	stopMusic
>2613	Identifier	stopMusic
>2614	Condition	 
>2615	AndExpression	musVol . y <= 0 && stopMusicOnFadeOut
>2616	Identifier	stopMusicOnFadeOut
>2617	RelationalExpression	musVol . y <= 0
>2618	PrimaryExpression	0
>2619	MemberAccess	musVol . y
>2620	Identifier	y
>2621	Identifier	musVol
>2622	ExpressionStatement	 
>2623	CallExpression	checkError ( )
>2624	ArgumentList	 
>2625	Callee	checkError
>2626	Identifier	checkError
>2627	ExpressionStatement	 
>2628	AssignmentExpr	result = musicChannel -> setVolume ( musVol . y * 1.0f )
>2629	CallExpression	musicChannel -> setVolume ( musVol . y * 1.0f )
>2630	ArgumentList	musVol . y * 1.0f
>2631	Argument	musVol . y * 1.0f
>2632	MultiplicativeExpression	musVol . y * 1.0f
>2633	PrimaryExpression	1.0f
>2634	MemberAccess	musVol . y
>2635	Identifier	y
>2636	Identifier	musVol
>2637	Callee	musicChannel -> setVolume
>2638	PtrMemberAccess	musicChannel -> setVolume
>2639	Identifier	setVolume
>2640	Identifier	musicChannel
>2641	Identifier	result
>2642	Condition	 
>2643	Identifier	musicChannel
>2644	IfStatement	if ( musicChannel )
>2645	CompoundStatement	 
>2646	IfStatement	if ( ! isPlayingMusic ( ) )
>2647	CompoundStatement	 
>2648	IfStatement	if ( ! playingMusicOnce && lastMusic . size ( ) )
>2649	ElseStatement	else
>2650	CompoundStatement	 
>2651	ExpressionStatement	 
>2652	CallExpression	stopMusic ( )
>2653	ArgumentList	 
>2654	Callee	stopMusic
>2655	Identifier	stopMusic
>2656	CompoundStatement	 
>2657	ExpressionStatement	 
>2658	CallExpression	playMusic ( lastMusic , SLT_LOOP , SFT_IN , 1 , SCT_NORMAL )
>2659	ArgumentList	lastMusic
>2660	Argument	SCT_NORMAL
>2661	Identifier	SCT_NORMAL
>2662	Argument	1
>2663	PrimaryExpression	1
>2664	Argument	SFT_IN
>2665	Identifier	SFT_IN
>2666	Argument	SLT_LOOP
>2667	Identifier	SLT_LOOP
>2668	Argument	lastMusic
>2669	Identifier	lastMusic
>2670	Callee	playMusic
>2671	Identifier	playMusic
>2672	ExpressionStatement	 
>2673	CallExpression	debugLog ( \"music not playing, but it should be - force restart\" )
>2674	ArgumentList	\"music not playing, but it should be - force restart\"
>2675	Argument	\"music not playing, but it should be - force restart\"
>2676	PrimaryExpression	\"music not playing, but it should be - force restart\"
>2677	Callee	debugLog
>2678	Identifier	debugLog
>2679	Condition	 
>2680	AndExpression	! playingMusicOnce && lastMusic . size ( )
>2681	CallExpression	lastMusic . size ( )
>2682	ArgumentList	 
>2683	Callee	lastMusic . size
>2684	MemberAccess	lastMusic . size
>2685	Identifier	size
>2686	Identifier	lastMusic
>2687	UnaryOp	! playingMusicOnce
>2688	Identifier	playingMusicOnce
>2689	UnaryOperator	!
>2690	Condition	 
>2691	UnaryOp	! isPlayingMusic ( )
>2692	CallExpression	isPlayingMusic ( )
>2693	ArgumentList	 
>2694	Callee	isPlayingMusic
>2695	Identifier	isPlayingMusic
>2696	UnaryOperator	!
>2697	Condition	 
>2698	Identifier	musicChannel
>2699	ExpressionStatement	 
>2700	CallExpression	musVol . update ( dt )
>2701	ArgumentList	dt
>2702	Argument	dt
>2703	Identifier	dt
>2704	Callee	musVol . update
>2705	MemberAccess	musVol . update
>2706	Identifier	update
>2707	Identifier	musVol
>2708	ExpressionStatement	 
>2709	CallExpression	voxVol . update ( dt )
>2710	ArgumentList	dt
>2711	Argument	dt
>2712	Identifier	dt
>2713	Callee	voxVol . update
>2714	MemberAccess	voxVol . update
>2715	Identifier	update
>2716	Identifier	voxVol
>2717	ExpressionStatement	 
>2718	AssignmentExpr	dt = core -> get_old_dt ( )
>2719	CallExpression	core -> get_old_dt ( )
>2720	ArgumentList	 
>2721	Callee	core -> get_old_dt
>2722	PtrMemberAccess	core -> get_old_dt
>2723	Identifier	get_old_dt
>2724	Identifier	core
>2725	Identifier	dt
>2726	IfStatement	if ( isPaused ( ) )
>2727	ReturnStatement	 
>2728	Condition	 
>2729	CallExpression	isPaused ( )
>2730	ArgumentList	 
>2731	Callee	isPaused
>2732	Identifier	isPaused
>2790	FunctionDef	SoundManager 
>2791	ParameterList	SoundFadeType sft , float t
>2792	Parameter	 
>2793	Identifier	t
>2794	ParameterType	float
>2795	Parameter	 
>2796	Identifier	sft
>2797	ParameterType	SoundFadeType
>2798	ReturnType	void
>2799	CompoundStatement	 
>2800	SwitchStatement	switch ( sft )
>2801	CompoundStatement	 
>2802	BreakStatement	 
>2803	Label	 
>2804	Identifier	default
>2805	BreakStatement	 
>2806	ExpressionStatement	 
>2807	AssignmentExpr	stopMusicOnFadeOut = true
>2808	Identifier	true
>2809	Identifier	stopMusicOnFadeOut
>2810	ExpressionStatement	 
>2811	CallExpression	setMusicFader ( 0 , t )
>2812	ArgumentList	0
>2813	Argument	t
>2814	Identifier	t
>2815	Argument	0
>2816	PrimaryExpression	0
>2817	Callee	setMusicFader
>2818	Identifier	setMusicFader
>2819	Label	 
>2820	Identifier	SFT_OUT
>2821	BreakStatement	 
>2822	CompoundStatement	 
>2823	ExpressionStatement	 
>2824	AssignmentExpr	musicFader2Time = musicFader2Timer = t
>2825	AssignmentExpr	musicFader2Timer = t
>2826	Identifier	t
>2827	Identifier	musicFader2Timer
>2828	Identifier	musicFader2Time
>2829	ExpressionStatement	 
>2830	AssignmentExpr	musicFader2Volume = musVol . y
>2831	MemberAccess	musVol . y
>2832	Identifier	y
>2833	Identifier	musVol
>2834	Identifier	musicFader2Volume
>2835	ExpressionStatement	 
>2836	AssignmentExpr	musicChannel = 0
>2837	PrimaryExpression	0
>2838	Identifier	musicChannel
>2839	ExpressionStatement	 
>2840	AssignmentExpr	musicStream = 0
>2841	PrimaryExpression	0
>2842	Identifier	musicStream
>2843	ExpressionStatement	 
>2844	AssignmentExpr	musicStream2 = musicStream
>2845	Identifier	musicStream
>2846	Identifier	musicStream2
>2847	ExpressionStatement	 
>2848	AssignmentExpr	musicChannel2 = musicChannel
>2849	Identifier	musicChannel
>2850	Identifier	musicChannel2
>2851	IfStatement	if ( musicChannel2 )
>2852	CompoundStatement	 
>2853	ExpressionStatement	 
>2854	AssignmentExpr	musicChannel2 = 0
>2855	PrimaryExpression	0
>2856	Identifier	musicChannel2
>2857	IfStatement	if ( musicStream2 )
>2858	CompoundStatement	 
>2859	ExpressionStatement	 
>2860	AssignmentExpr	musicStream2 = 0
>2861	PrimaryExpression	0
>2862	Identifier	musicStream2
>2863	ExpressionStatement	 
>2864	CallExpression	musicStream2 -> release ( )
>2865	ArgumentList	 
>2866	Callee	musicStream2 -> release
>2867	PtrMemberAccess	musicStream2 -> release
>2868	Identifier	release
>2869	Identifier	musicStream2
>2870	Condition	 
>2871	Identifier	musicStream2
>2872	ExpressionStatement	 
>2873	CallExpression	musicChannel2 -> stop ( )
>2874	ArgumentList	 
>2875	Callee	musicChannel2 -> stop
>2876	PtrMemberAccess	musicChannel2 -> stop
>2877	Identifier	stop
>2878	Identifier	musicChannel2
>2879	Condition	 
>2880	Identifier	musicChannel2
>2881	Label	 
>2882	Identifier	SFT_CROSS
>2883	Condition	 
>2884	Identifier	sft
>2901	FunctionDef	SoundManager 
>2902	ParameterList	 
>2903	ReturnType	bool
>2904	CompoundStatement	 
>2905	ReturnStatement	 
>2906	Identifier	false
>2907	ReturnStatement	 
>2908	EqualityExpression	musicStream != 0
>2909	PrimaryExpression	0
>2910	Identifier	musicStream
>2911	IfStatement	if ( musicChannel )
>2912	CompoundStatement	 
>2913	ReturnStatement	 
>2914	Identifier	b
>2915	ExpressionStatement	 
>2916	CallExpression	musicChannel -> isPlaying ( & b )
>2917	ArgumentList	& b
>2918	Argument	& b
>2919	UnaryOp	& b
>2920	Identifier	b
>2921	UnaryOperator	&
>2922	Callee	musicChannel -> isPlaying
>2923	PtrMemberAccess	musicChannel -> isPlaying
>2924	Identifier	isPlaying
>2925	Identifier	musicChannel
>2926	IdentifierDeclStatement	 
>2927	IdentifierDecl	b = false
>2928	AssignmentExpr	b = false
>2929	Identifier	false
>2930	Identifier	false
>2931	Identifier	b
>2932	IdentifierDeclType	bool
>2933	Condition	 
>2934	Identifier	musicChannel
>2943	FunctionDef	SoundManager 
>2944	ParameterList	float v
>2945	Parameter	 
>2946	Identifier	v
>2947	ParameterType	float
>2948	ReturnType	void
>2949	CompoundStatement	 
>2950	ExpressionStatement	 
>2951	CallExpression	checkError ( )
>2952	ArgumentList	 
>2953	Callee	checkError
>2954	Identifier	checkError
>2955	ExpressionStatement	 
>2956	AssignmentExpr	result = group_mus -> setVolume ( v )
>2957	CallExpression	group_mus -> setVolume ( v )
>2958	ArgumentList	v
>2959	Argument	v
>2960	Identifier	v
>2961	Callee	group_mus -> setVolume
>2962	PtrMemberAccess	group_mus -> setVolume
>2963	Identifier	setVolume
>2964	Identifier	group_mus
>2965	Identifier	result
>2966	ExpressionStatement	 
>2967	AssignmentExpr	musVol . x = v
>2968	Identifier	v
>2969	MemberAccess	musVol . x
>2970	Identifier	x
>2971	Identifier	musVol
>2982	FunctionDef	SoundManager 
>2983	ParameterList	float v
>2984	Parameter	 
>2985	Identifier	v
>2986	ParameterType	float
>2987	ReturnType	void
>2988	CompoundStatement	 
>2989	ExpressionStatement	 
>2990	AssignmentExpr	sfxVol = v
>2991	Identifier	v
>2992	Identifier	sfxVol
>2998	FunctionDef	SoundManager 
>2999	ParameterList	 
>3000	ReturnType	float
>3001	CompoundStatement	 
>3002	ReturnStatement	 
>3003	Identifier	sfxVol
>3008	FunctionDef	SoundManager 
>3009	ParameterList	float v
>3010	Parameter	 
>3011	Identifier	v
>3012	ParameterType	float
>3013	ReturnType	void
>3014	CompoundStatement	 
>3015	ExpressionStatement	 
>3016	CallExpression	checkError ( )
>3017	ArgumentList	 
>3018	Callee	checkError
>3019	Identifier	checkError
>3020	ExpressionStatement	 
>3021	AssignmentExpr	result = group_vox -> setVolume ( v )
>3022	CallExpression	group_vox -> setVolume ( v )
>3023	ArgumentList	v
>3024	Argument	v
>3025	Identifier	v
>3026	Callee	group_vox -> setVolume
>3027	PtrMemberAccess	group_vox -> setVolume
>3028	Identifier	setVolume
>3029	Identifier	group_vox
>3030	Identifier	result
>3031	ExpressionStatement	 
>3032	AssignmentExpr	voxVol . x = v
>3033	Identifier	v
>3034	MemberAccess	voxVol . x
>3035	Identifier	x
>3036	Identifier	voxVol
>3047	FunctionDef	SoundManager 
>3048	ParameterList	 
>3049	ReturnType	bool
>3050	CompoundStatement	 
>3051	ReturnStatement	 
>3052	Identifier	false
>3053	IfStatement	if ( voiceChannel )
>3054	CompoundStatement	 
>3055	ReturnStatement	 
>3056	Identifier	b
>3057	IfStatement	if ( ! b )
>3058	ExpressionStatement	 
>3059	AssignmentExpr	voiceChannel = 0
>3060	PrimaryExpression	0
>3061	Identifier	voiceChannel
>3062	Condition	 
>3063	UnaryOp	! b
>3064	Identifier	b
>3065	UnaryOperator	!
>3066	IfStatement	if ( result == FMOD_ERR_CHANNEL_STOLEN )
>3067	ElseStatement	else
>3068	CompoundStatement	 
>3069	ExpressionStatement	 
>3070	CallExpression	checkError ( )
>3071	ArgumentList	 
>3072	Callee	checkError
>3073	Identifier	checkError
>3074	CompoundStatement	 
>3075	ExpressionStatement	 
>3076	CallExpression	debugLog ( \"voice channel 'stolen'\" )
>3077	ArgumentList	\"voice channel 'stolen'\"
>3078	Argument	\"voice channel 'stolen'\"
>3079	PrimaryExpression	\"voice channel 'stolen'\"
>3080	Callee	debugLog
>3081	Identifier	debugLog
>3082	ExpressionStatement	 
>3083	AssignmentExpr	b = false
>3084	Identifier	false
>3085	Identifier	b
>3086	Condition	 
>3087	EqualityExpression	result == FMOD_ERR_CHANNEL_STOLEN
>3088	Identifier	FMOD_ERR_CHANNEL_STOLEN
>3089	Identifier	result
>3090	ExpressionStatement	 
>3091	AssignmentExpr	result = voiceChannel -> isPlaying ( & b )
>3092	CallExpression	voiceChannel -> isPlaying ( & b )
>3093	ArgumentList	& b
>3094	Argument	& b
>3095	UnaryOp	& b
>3096	Identifier	b
>3097	UnaryOperator	&
>3098	Callee	voiceChannel -> isPlaying
>3099	PtrMemberAccess	voiceChannel -> isPlaying
>3100	Identifier	isPlaying
>3101	Identifier	voiceChannel
>3102	Identifier	result
>3103	IdentifierDeclStatement	 
>3104	IdentifierDecl	b = false
>3105	AssignmentExpr	b = false
>3106	Identifier	false
>3107	Identifier	false
>3108	Identifier	b
>3109	IdentifierDeclType	bool
>3110	Condition	 
>3111	Identifier	voiceChannel
>3123	FunctionDef	SoundManager 
>3124	ParameterList	float v
>3125	Parameter	 
>3126	Identifier	v
>3127	ParameterType	float
>3128	ReturnType	void
>3129	CompoundStatement	 
>3134	FunctionDef	SoundManager 
>3135	ParameterList	const std 
>3136	Parameter	 
>3137	Identifier	vmod
>3138	ParameterType	float
>3139	Parameter	 
>3140	Identifier	svt
>3141	ParameterType	SoundVoiceType
>3142	Parameter	 
>3143	Identifier	name
>3144	ParameterType	const std 
>3145	ReturnType	bool
>3146	CompoundStatement	 
>3147	ReturnStatement	 
>3148	Identifier	true
>3149	IfStatement	if ( playNow )
>3150	CompoundStatement	 
>3151	ExpressionStatement	 
>3152	CallExpression	core -> onPlayedVoice ( n )
>3153	ArgumentList	n
>3154	Argument	n
>3155	Identifier	n
>3156	Callee	core -> onPlayedVoice
>3157	PtrMemberAccess	core -> onPlayedVoice
>3158	Identifier	onPlayedVoice
>3159	Identifier	core
>3160	ExpressionStatement	 
>3161	CallExpression	event_playVoice . call ( )
>3162	ArgumentList	 
>3163	Callee	event_playVoice . call
>3164	MemberAccess	event_playVoice . call
>3165	Identifier	call
>3166	Identifier	event_playVoice
>3167	ExpressionStatement	 
>3168	AssignmentExpr	lastVoice = n
>3169	Identifier	n
>3170	Identifier	lastVoice
>3171	IfStatement	if ( voiceStream )
>3172	CompoundStatement	 
>3173	ExpressionStatement	 
>3174	AssignmentExpr	wasPlayingVoice = true
>3175	Identifier	true
>3176	Identifier	wasPlayingVoice
>3177	ExpressionStatement	 
>3178	CallExpression	checkError ( )
>3179	ArgumentList	 
>3180	Callee	checkError
>3181	Identifier	checkError
>3182	ExpressionStatement	 
>3183	AssignmentExpr	result = voiceChannel -> setPaused ( false )
>3184	CallExpression	voiceChannel -> setPaused ( false )
>3185	ArgumentList	false
>3186	Argument	false
>3187	Identifier	false
>3188	Callee	voiceChannel -> setPaused
>3189	PtrMemberAccess	voiceChannel -> setPaused
>3190	Identifier	setPaused
>3191	Identifier	voiceChannel
>3192	Identifier	result
>3193	ExpressionStatement	 
>3194	CallExpression	setSoundPos ( voiceChannel , 0 , 0 )
>3195	ArgumentList	voiceChannel
>3196	Argument	0
>3197	PrimaryExpression	0
>3198	Argument	0
>3199	PrimaryExpression	0
>3200	Argument	voiceChannel
>3201	Identifier	voiceChannel
>3202	Callee	setSoundPos
>3203	Identifier	setSoundPos
>3204	ExpressionStatement	 
>3205	CallExpression	setSoundRelative ( voiceChannel , true )
>3206	ArgumentList	voiceChannel
>3207	Argument	true
>3208	Identifier	true
>3209	Argument	voiceChannel
>3210	Identifier	voiceChannel
>3211	Callee	setSoundRelative
>3212	Identifier	setSoundRelative
>3213	ExpressionStatement	 
>3214	CallExpression	voiceChannel -> set3DMinMaxDistance ( 0.0f , 0.0f )
>3215	ArgumentList	0.0f
>3216	Argument	0.0f
>3217	PrimaryExpression	0.0f
>3218	Argument	0.0f
>3219	PrimaryExpression	0.0f
>3220	Callee	voiceChannel -> set3DMinMaxDistance
>3221	PtrMemberAccess	voiceChannel -> set3DMinMaxDistance
>3222	Identifier	set3DMinMaxDistance
>3223	Identifier	voiceChannel
>3224	ExpressionStatement	 
>3225	CallExpression	voiceChannel -> setUserData ( NULL )
>3226	ArgumentList	NULL
>3227	Argument	NULL
>3228	Identifier	NULL
>3229	Callee	voiceChannel -> setUserData
>3230	PtrMemberAccess	voiceChannel -> setUserData
>3231	Identifier	setUserData
>3232	Identifier	voiceChannel
>3233	ExpressionStatement	 
>3234	CallExpression	voiceChannel -> setCallback ( NULL )
>3235	ArgumentList	NULL
>3236	Argument	NULL
>3237	Identifier	NULL
>3238	Callee	voiceChannel -> setCallback
>3239	PtrMemberAccess	voiceChannel -> setCallback
>3240	Identifier	setCallback
>3241	Identifier	voiceChannel
>3242	ExpressionStatement	 
>3243	CallExpression	voiceChannel -> setFrequency ( 1 )
>3244	ArgumentList	1
>3245	Argument	1
>3246	PrimaryExpression	1
>3247	Callee	voiceChannel -> setFrequency
>3248	PtrMemberAccess	voiceChannel -> setFrequency
>3249	Identifier	setFrequency
>3250	Identifier	voiceChannel
>3251	ExpressionStatement	 
>3252	CallExpression	checkError ( )
>3253	ArgumentList	 
>3254	Callee	checkError
>3255	Identifier	checkError
>3256	ExpressionStatement	 
>3257	AssignmentExpr	result = voiceChannel -> setPriority ( 1 )
>3258	CallExpression	voiceChannel -> setPriority ( 1 )
>3259	ArgumentList	1
>3260	Argument	1
>3261	PrimaryExpression	1
>3262	Callee	voiceChannel -> setPriority
>3263	PtrMemberAccess	voiceChannel -> setPriority
>3264	Identifier	setPriority
>3265	Identifier	voiceChannel
>3266	Identifier	result
>3267	IfStatement	if ( vmod != - 1 )
>3268	CompoundStatement	 
>3269	ExpressionStatement	 
>3270	CallExpression	checkError ( )
>3271	ArgumentList	 
>3272	Callee	checkError
>3273	Identifier	checkError
>3274	ExpressionStatement	 
>3275	AssignmentExpr	result = voiceChannel -> setVolume ( vmod )
>3276	CallExpression	voiceChannel -> setVolume ( vmod )
>3277	ArgumentList	vmod
>3278	Argument	vmod
>3279	Identifier	vmod
>3280	Callee	voiceChannel -> setVolume
>3281	PtrMemberAccess	voiceChannel -> setVolume
>3282	Identifier	setVolume
>3283	Identifier	voiceChannel
>3284	Identifier	result
>3285	Condition	 
>3286	EqualityExpression	vmod != - 1
>3287	UnaryOp	- 1
>3288	PrimaryExpression	1
>3289	UnaryOperator	-
>3290	Identifier	vmod
>3291	ExpressionStatement	 
>3292	CallExpression	checkError ( )
>3293	ArgumentList	 
>3294	Callee	checkError
>3295	Identifier	checkError
>3296	ExpressionStatement	 
>3297	AssignmentExpr	result = voiceChannel -> setChannelGroup ( group_vox )
>3298	CallExpression	voiceChannel -> setChannelGroup ( group_vox )
>3299	ArgumentList	group_vox
>3300	Argument	group_vox
>3301	Identifier	group_vox
>3302	Callee	voiceChannel -> setChannelGroup
>3303	PtrMemberAccess	voiceChannel -> setChannelGroup
>3304	Identifier	setChannelGroup
>3305	Identifier	voiceChannel
>3306	Identifier	result
>3307	ExpressionStatement	 
>3308	CallExpression	checkError ( )
>3309	ArgumentList	 
>3310	Callee	checkError
>3311	Identifier	checkError
>3312	ExpressionStatement	 
>3313	AssignmentExpr	result = SoundCore 
>3314	CallExpression	SoundCore 
>3315	ArgumentList	FMOD_CHANNEL_FREE
>3316	Argument	& voiceChannel
>3317	UnaryOp	& voiceChannel
>3318	Identifier	voiceChannel
>3319	UnaryOperator	&
>3320	Argument	true
>3321	Identifier	true
>3322	Argument	voiceStream
>3323	Identifier	voiceStream
>3324	Argument	FMOD_CHANNEL_FREE
>3325	Identifier	FMOD_CHANNEL_FREE
>3326	Callee	SoundCore 
>3327	PtrMemberAccess	SoundCore 
>3328	Identifier	playSound
>3329	Identifier	SoundCore 
>3330	Identifier	result
>3331	IfStatement	if ( ! reverbKeyword . empty ( ) )
>3332	CompoundStatement	 
>3333	IfStatement	if ( dspReverb )
>3334	CompoundStatement	 
>3335	IfStatement	if ( ! active && useReverb )
>3336	ElseStatement	else
>3337	IfStatement	if ( active && ! useReverb )
>3338	CompoundStatement	 
>3339	ExpressionStatement	 
>3340	CallExpression	checkError ( )
>3341	ArgumentList	 
>3342	Callee	checkError
>3343	Identifier	checkError
>3344	ExpressionStatement	 
>3345	AssignmentExpr	result = dspReverb -> remove ( )
>3346	CallExpression	dspReverb -> remove ( )
>3347	ArgumentList	 
>3348	Callee	dspReverb -> remove
>3349	PtrMemberAccess	dspReverb -> remove
>3350	Identifier	remove
>3351	Identifier	dspReverb
>3352	Identifier	result
>3353	Condition	 
>3354	AndExpression	active && ! useReverb
>3355	UnaryOp	! useReverb
>3356	Identifier	useReverb
>3357	UnaryOperator	!
>3358	Identifier	active
>3359	CompoundStatement	 
>3360	ExpressionStatement	 
>3361	CallExpression	checkError ( )
>3362	ArgumentList	 
>3363	Callee	checkError
>3364	Identifier	checkError
>3365	ExpressionStatement	 
>3366	AssignmentExpr	result = group_vox -> addDSP ( dspReverb , 0 )
>3367	CallExpression	group_vox -> addDSP ( dspReverb , 0 )
>3368	ArgumentList	dspReverb
>3369	Argument	0
>3370	PrimaryExpression	0
>3371	Argument	dspReverb
>3372	Identifier	dspReverb
>3373	Callee	group_vox -> addDSP
>3374	PtrMemberAccess	group_vox -> addDSP
>3375	Identifier	addDSP
>3376	Identifier	group_vox
>3377	Identifier	result
>3378	Condition	 
>3379	AndExpression	! active && useReverb
>3380	Identifier	useReverb
>3381	UnaryOp	! active
>3382	Identifier	active
>3383	UnaryOperator	!
>3384	ExpressionStatement	 
>3385	CallExpression	checkError ( )
>3386	ArgumentList	 
>3387	Callee	checkError
>3388	Identifier	checkError
>3389	ExpressionStatement	 
>3390	AssignmentExpr	result = dspReverb -> getActive ( & active )
>3391	CallExpression	dspReverb -> getActive ( & active )
>3392	ArgumentList	& active
>3393	Argument	& active
>3394	UnaryOp	& active
>3395	Identifier	active
>3396	UnaryOperator	&
>3397	Callee	dspReverb -> getActive
>3398	PtrMemberAccess	dspReverb -> getActive
>3399	Identifier	getActive
>3400	Identifier	dspReverb
>3401	Identifier	result
>3402	IdentifierDeclStatement	 
>3403	IdentifierDecl	active = false
>3404	AssignmentExpr	active = false
>3405	Identifier	false
>3406	Identifier	false
>3407	Identifier	active
>3408	IdentifierDeclType	bool
>3409	Condition	 
>3410	Identifier	dspReverb
>3411	IdentifierDeclStatement	 
>3412	IdentifierDecl	useReverb = ( n . find ( reverbKeyword ) != std 
>3413	AssignmentExpr	useReverb = ( n . find ( reverbKeyword ) != std 
>3414	EqualityExpression	n . find ( reverbKeyword ) != std 
>3415	Identifier	std 
>3416	CallExpression	n . find ( reverbKeyword )
>3417	ArgumentList	reverbKeyword
>3418	Argument	reverbKeyword
>3419	Identifier	reverbKeyword
>3420	Callee	n . find
>3421	MemberAccess	n . find
>3422	Identifier	find
>3423	Identifier	n
>3424	Identifier	useReverb
>3425	Identifier	useReverb
>3426	IdentifierDeclType	bool
>3427	Condition	 
>3428	UnaryOp	! reverbKeyword . empty ( )
>3429	CallExpression	reverbKeyword . empty ( )
>3430	ArgumentList	 
>3431	Callee	reverbKeyword . empty
>3432	MemberAccess	reverbKeyword . empty
>3433	Identifier	empty
>3434	Identifier	reverbKeyword
>3435	UnaryOperator	!
>3436	Condition	 
>3437	Identifier	voiceStream
>3438	IfStatement	if ( checkError ( ) )
>3439	CompoundStatement	 
>3440	ExpressionStatement	 
>3441	AssignmentExpr	voiceStream = 0
>3442	PrimaryExpression	0
>3443	Identifier	voiceStream
>3444	Condition	 
>3445	CallExpression	checkError ( )
>3446	ArgumentList	 
>3447	Callee	checkError
>3448	Identifier	checkError
>3449	ExpressionStatement	 
>3450	AssignmentExpr	result = SoundCore 
>3451	CallExpression	SoundCore 
>3452	ArgumentList	fn . c_str ( )
>3453	Argument	& voiceStream
>3454	UnaryOp	& voiceStream
>3455	Identifier	voiceStream
>3456	UnaryOperator	&
>3457	Argument	0
>3458	PrimaryExpression	0
>3459	Argument	mode
>3460	Identifier	mode
>3461	Argument	fn . c_str ( )
>3462	CallExpression	fn . c_str ( )
>3463	ArgumentList	 
>3464	Callee	fn . c_str
>3465	MemberAccess	fn . c_str
>3466	Identifier	c_str
>3467	Identifier	fn
>3468	Callee	SoundCore 
>3469	PtrMemberAccess	SoundCore 
>3470	Identifier	createStream
>3471	Identifier	SoundCore 
>3472	Identifier	result
>3473	ExpressionStatement	 
>3474	AssignmentExpr	mode = FMOD_2D | FMOD_SOFTWARE | FMOD_CREATESTREAM
>3475	InclusiveOrExpression	FMOD_2D | FMOD_SOFTWARE | FMOD_CREATESTREAM
>3476	InclusiveOrExpression	FMOD_SOFTWARE | FMOD_CREATESTREAM
>3477	Identifier	FMOD_CREATESTREAM
>3478	Identifier	FMOD_SOFTWARE
>3479	Identifier	FMOD_2D
>3480	Identifier	mode
>3481	IdentifierDeclStatement	 
>3482	IdentifierDecl	mode = 0
>3483	AssignmentExpr	mode = 0
>3484	PrimaryExpression	0
>3485	Identifier	mode
>3486	Identifier	mode
>3487	IdentifierDeclType	FMOD_MODE
>3488	IfStatement	if ( overrideVoiceFader != - 1 )
>3489	ElseStatement	else
>3490	CompoundStatement	 
>3491	IfStatement	if ( voiceFader < 1 )
>3492	CompoundStatement	 
>3493	ExpressionStatement	 
>3494	AssignmentExpr	sfxFader = voiceFader
>3495	Identifier	voiceFader
>3496	Identifier	sfxFader
>3497	ExpressionStatement	 
>3498	CallExpression	setMusicFader ( voiceFader , 0.5 )
>3499	ArgumentList	voiceFader
>3500	Argument	0.5
>3501	PrimaryExpression	0.5
>3502	Argument	voiceFader
>3503	Identifier	voiceFader
>3504	Callee	setMusicFader
>3505	Identifier	setMusicFader
>3506	Condition	 
>3507	RelationalExpression	voiceFader < 1
>3508	PrimaryExpression	1
>3509	Identifier	voiceFader
>3510	CompoundStatement	 
>3511	IfStatement	if ( overrideVoiceFader < 1 )
>3512	CompoundStatement	 
>3513	ExpressionStatement	 
>3514	AssignmentExpr	sfxFader = overrideVoiceFader
>3515	Identifier	overrideVoiceFader
>3516	Identifier	sfxFader
>3517	ExpressionStatement	 
>3518	CallExpression	setMusicFader ( overrideVoiceFader , 0.5 )
>3519	ArgumentList	overrideVoiceFader
>3520	Argument	0.5
>3521	PrimaryExpression	0.5
>3522	Argument	overrideVoiceFader
>3523	Identifier	overrideVoiceFader
>3524	Callee	setMusicFader
>3525	Identifier	setMusicFader
>3526	Condition	 
>3527	RelationalExpression	overrideVoiceFader < 1
>3528	PrimaryExpression	1
>3529	Identifier	overrideVoiceFader
>3530	Condition	 
>3531	EqualityExpression	overrideVoiceFader != - 1
>3532	UnaryOp	- 1
>3533	PrimaryExpression	1
>3534	UnaryOperator	-
>3535	Identifier	overrideVoiceFader
>3536	ExpressionStatement	 
>3537	CallExpression	debugLog ( \"play now\" )
>3538	ArgumentList	\"play now\"
>3539	Argument	\"play now\"
>3540	PrimaryExpression	\"play now\"
>3541	Callee	debugLog
>3542	Identifier	debugLog
>3543	IfStatement	if ( voiceStream )
>3544	CompoundStatement	 
>3545	ExpressionStatement	 
>3546	CallExpression	stopVoice ( )
>3547	ArgumentList	 
>3548	Callee	stopVoice
>3549	Identifier	stopVoice
>3550	Condition	 
>3551	Identifier	voiceStream
>3552	Condition	 
>3553	Identifier	playNow
>3554	SwitchStatement	switch ( svt )
>3555	CompoundStatement	 
>3556	BreakStatement	 
>3557	Label	 
>3558	Identifier	default
>3559	BreakStatement	 
>3560	CompoundStatement	 
>3561	ExpressionStatement	 
>3562	AssignmentExpr	playNow = true
>3563	Identifier	true
>3564	Identifier	playNow
>3565	ExpressionStatement	 
>3566	CallExpression	stopAllVoice ( )
>3567	ArgumentList	 
>3568	Callee	stopAllVoice
>3569	Identifier	stopAllVoice
>3570	Label	 
>3571	Identifier	SVT_INTERRUPT
>3572	BreakStatement	 
>3573	CompoundStatement	 
>3574	IfStatement	if ( isPlayingVoice ( ) )
>3575	ElseStatement	else
>3576	CompoundStatement	 
>3577	ExpressionStatement	 
>3578	AssignmentExpr	playNow = true
>3579	Identifier	true
>3580	Identifier	playNow
>3581	CompoundStatement	 
>3582	IfStatement	if ( voxQueue . empty ( ) || voxQueue . front ( ) != n )
>3583	ExpressionStatement	 
>3584	CallExpression	voxQueue . push ( n )
>3585	ArgumentList	n
>3586	Argument	n
>3587	Identifier	n
>3588	Callee	voxQueue . push
>3589	MemberAccess	voxQueue . push
>3590	Identifier	push
>3591	Identifier	voxQueue
>3592	Condition	 
>3593	OrExpression	voxQueue . empty ( ) || voxQueue . front ( ) != n
>3594	EqualityExpression	voxQueue . front ( ) != n
>3595	Identifier	n
>3596	CallExpression	voxQueue . front ( )
>3597	ArgumentList	 
>3598	Callee	voxQueue . front
>3599	MemberAccess	voxQueue . front
>3600	Identifier	front
>3601	Identifier	voxQueue
>3602	CallExpression	voxQueue . empty ( )
>3603	ArgumentList	 
>3604	Callee	voxQueue . empty
>3605	MemberAccess	voxQueue . empty
>3606	Identifier	empty
>3607	Identifier	voxQueue
>3608	Condition	 
>3609	CallExpression	isPlayingVoice ( )
>3610	ArgumentList	 
>3611	Callee	isPlayingVoice
>3612	Identifier	isPlayingVoice
>3613	Label	 
>3614	Identifier	SVT_QUEUE
>3615	Condition	 
>3616	Identifier	svt
>3617	ExpressionStatement	 
>3618	CallExpression	debugLog ( \"checking is playing now...\" )
>3619	ArgumentList	\"checking is playing now...\"
>3620	Argument	\"checking is playing now...\"
>3621	PrimaryExpression	\"checking is playing now...\"
>3622	Callee	debugLog
>3623	Identifier	debugLog
>3624	IdentifierDeclStatement	 
>3625	IdentifierDecl	playNow = false
>3626	AssignmentExpr	playNow = false
>3627	Identifier	false
>3628	Identifier	false
>3629	Identifier	playNow
>3630	IdentifierDeclType	bool
>3631	IfStatement	if ( checkOther )
>3632	CompoundStatement	 
>3633	IfStatement	if ( ! exists ( fn ) )
>3634	CompoundStatement	 
>3635	ExpressionStatement	 
>3636	CallExpression	debugLog ( \"Could not find voice file [\" + fn + \"]\" )
>3637	ArgumentList	\"Could not find voice file [\" + fn + \"]\"
>3638	Argument	\"Could not find voice file [\" + fn + \"]\"
>3639	AdditiveExpression	\"Could not find voice file [\" + fn + \"]\"
>3640	AdditiveExpression	fn + \"]\"
>3641	PrimaryExpression	\"]\"
>3642	Identifier	fn
>3643	PrimaryExpression	\"Could not find voice file [\"
>3644	Callee	debugLog
>3645	Identifier	debugLog
>3646	Condition	 
>3647	UnaryOp	! exists ( fn )
>3648	CallExpression	exists ( fn )
>3649	ArgumentList	fn
>3650	Argument	fn
>3651	Identifier	fn
>3652	Callee	exists
>3653	Identifier	exists
>3654	UnaryOperator	!
>3655	ExpressionStatement	 
>3656	AssignmentExpr	fn = core -> adjustFilenameCase ( fn )
>3657	CallExpression	core -> adjustFilenameCase ( fn )
>3658	ArgumentList	fn
>3659	Argument	fn
>3660	Identifier	fn
>3661	Callee	core -> adjustFilenameCase
>3662	PtrMemberAccess	core -> adjustFilenameCase
>3663	Identifier	adjustFilenameCase
>3664	Identifier	core
>3665	Identifier	fn
>3666	ExpressionStatement	 
>3667	AssignmentExpr	fn = localisePath ( fn )
>3668	CallExpression	localisePath ( fn )
>3669	ArgumentList	fn
>3670	Argument	fn
>3671	Identifier	fn
>3672	Callee	localisePath
>3673	Identifier	localisePath
>3674	Identifier	fn
>3675	ExpressionStatement	 
>3676	AssignmentExpr	fn = voicePath + name + fileType
>3677	AdditiveExpression	voicePath + name + fileType
>3678	AdditiveExpression	name + fileType
>3679	Identifier	fileType
>3680	Identifier	name
>3681	Identifier	voicePath
>3682	Identifier	fn
>3683	Condition	 
>3684	Identifier	checkOther
>3685	IfStatement	if ( ! voicePath2 . empty ( ) )
>3686	CompoundStatement	 
>3687	IfStatement	if ( exists ( fn ) )
>3688	ExpressionStatement	 
>3689	AssignmentExpr	checkOther = false
>3690	Identifier	false
>3691	Identifier	checkOther
>3692	Condition	 
>3693	CallExpression	exists ( fn )
>3694	ArgumentList	fn
>3695	Argument	fn
>3696	Identifier	fn
>3697	Callee	exists
>3698	Identifier	exists
>3699	ExpressionStatement	 
>3700	AssignmentExpr	fn = core -> adjustFilenameCase ( fn )
>3701	CallExpression	core -> adjustFilenameCase ( fn )
>3702	ArgumentList	fn
>3703	Argument	fn
>3704	Identifier	fn
>3705	Callee	core -> adjustFilenameCase
>3706	PtrMemberAccess	core -> adjustFilenameCase
>3707	Identifier	adjustFilenameCase
>3708	Identifier	core
>3709	Identifier	fn
>3710	ExpressionStatement	 
>3711	AssignmentExpr	fn = localisePathInternalModpath ( fn )
>3712	CallExpression	localisePathInternalModpath ( fn )
>3713	ArgumentList	fn
>3714	Argument	fn
>3715	Identifier	fn
>3716	Callee	localisePathInternalModpath
>3717	Identifier	localisePathInternalModpath
>3718	Identifier	fn
>3719	ExpressionStatement	 
>3720	AssignmentExpr	fn = voicePath2 + name + fileType
>3721	AdditiveExpression	voicePath2 + name + fileType
>3722	AdditiveExpression	name + fileType
>3723	Identifier	fileType
>3724	Identifier	name
>3725	Identifier	voicePath2
>3726	Identifier	fn
>3727	Condition	 
>3728	UnaryOp	! voicePath2 . empty ( )
>3729	CallExpression	voicePath2 . empty ( )
>3730	ArgumentList	 
>3731	Callee	voicePath2 . empty
>3732	MemberAccess	voicePath2 . empty
>3733	Identifier	empty
>3734	Identifier	voicePath2
>3735	UnaryOperator	!
>3736	ExpressionStatement	 
>3737	CallExpression	stringToLower ( n )
>3738	ArgumentList	n
>3739	Argument	n
>3740	Identifier	n
>3741	Callee	stringToLower
>3742	Identifier	stringToLower
>3743	ExpressionStatement	 
>3744	AssignmentExpr	n = name
>3745	Identifier	name
>3746	Identifier	n
>3747	IdentifierDeclStatement	 
>3748	IdentifierDecl	n
>3749	Identifier	n
>3750	IdentifierDeclType	std 
>3751	IdentifierDecl	fn
>3752	Identifier	fn
>3753	IdentifierDeclType	std 
>3754	IdentifierDeclStatement	 
>3755	IdentifierDecl	checkOther = true
>3756	AssignmentExpr	checkOther = true
>3757	Identifier	true
>3758	Identifier	true
>3759	Identifier	checkOther
>3760	IdentifierDeclType	bool
>3761	IfStatement	if ( ! enabled )
>3762	ReturnStatement	 
>3763	Identifier	false
>3764	Condition	 
>3765	UnaryOp	! enabled
>3766	Identifier	enabled
>3767	UnaryOperator	!
>3837	FunctionDef	SoundManager 
>3838	ParameterList	void * ch , float v
>3839	Parameter	 
>3840	Identifier	v
>3841	ParameterType	float
>3842	Parameter	 
>3843	Identifier	ch
>3844	ParameterType	void *
>3845	ReturnType	void
>3846	CompoundStatement	 
>3852	FunctionDef	SoundManager 
>3853	ParameterList	 
>3854	ReturnType	float
>3855	CompoundStatement	 
>3856	ReturnStatement	 
>3857	PrimaryExpression	0
>3858	IfStatement	if ( isPlayingVoice ( ) )
>3859	CompoundStatement	 
>3860	ReturnStatement	 
>3861	MultiplicativeExpression	float ( position ) * 0.001f
>3862	PrimaryExpression	0.001f
>3863	CallExpression	float ( position )
>3864	ArgumentList	position
>3865	Argument	position
>3866	Identifier	position
>3867	Callee	float
>3868	Identifier	float
>3869	ExpressionStatement	 
>3870	CallExpression	voiceChannel -> getPosition ( & position , FMOD_TIMEUNIT_MS )
>3871	ArgumentList	& position
>3872	Argument	FMOD_TIMEUNIT_MS
>3873	Identifier	FMOD_TIMEUNIT_MS
>3874	Argument	& position
>3875	UnaryOp	& position
>3876	Identifier	position
>3877	UnaryOperator	&
>3878	Callee	voiceChannel -> getPosition
>3879	PtrMemberAccess	voiceChannel -> getPosition
>3880	Identifier	getPosition
>3881	Identifier	voiceChannel
>3882	IdentifierDeclStatement	 
>3883	IdentifierDecl	position
>3884	Identifier	position
>3885	IdentifierDeclType	unsigned int
>3886	Condition	 
>3887	CallExpression	isPlayingVoice ( )
>3888	ArgumentList	 
>3889	Callee	isPlayingVoice
>3890	Identifier	isPlayingVoice
>3900	FunctionDef	SoundManager 
>3901	ParameterList	const PlaySfx & play
>3902	Parameter	 
>3903	Identifier	play
>3904	ParameterType	const PlaySfx &
>3905	ReturnType	void *
>3906	CompoundStatement	 
>3907	ReturnStatement	 
>3908	PrimaryExpression	0
>3909	ReturnStatement	 
>3910	Identifier	channel
>3911	ExpressionStatement	 
>3912	CallExpression	checkError ( )
>3913	ArgumentList	 
>3914	Callee	checkError
>3915	Identifier	checkError
>3916	ExpressionStatement	 
>3917	AssignmentExpr	result = channel -> setPaused ( false )
>3918	CallExpression	channel -> setPaused ( false )
>3919	ArgumentList	false
>3920	Argument	false
>3921	Identifier	false
>3922	Callee	channel -> setPaused
>3923	PtrMemberAccess	channel -> setPaused
>3924	Identifier	setPaused
>3925	Identifier	channel
>3926	Identifier	result
>3927	ExpressionStatement	 
>3928	CallExpression	setSoundPos ( channel , play . x , play . y )
>3929	ArgumentList	channel
>3930	Argument	play . y
>3931	MemberAccess	play . y
>3932	Identifier	y
>3933	Identifier	play
>3934	Argument	play . x
>3935	MemberAccess	play . x
>3936	Identifier	x
>3937	Identifier	play
>3938	Argument	channel
>3939	Identifier	channel
>3940	Callee	setSoundPos
>3941	Identifier	setSoundPos
>3942	ExpressionStatement	 
>3943	CallExpression	setSoundRelative ( channel , play . relative )
>3944	ArgumentList	channel
>3945	Argument	play . relative
>3946	MemberAccess	play . relative
>3947	Identifier	relative
>3948	Identifier	play
>3949	Argument	channel
>3950	Identifier	channel
>3951	Callee	setSoundRelative
>3952	Identifier	setSoundRelative
>3953	IfStatement	if ( maxdist > 0 && play . positional )
>3954	ElseStatement	else
>3955	ExpressionStatement	 
>3956	CallExpression	channel -> set3DMinMaxDistance ( 0 , 0 )
>3957	ArgumentList	0
>3958	Argument	0
>3959	PrimaryExpression	0
>3960	Argument	0
>3961	PrimaryExpression	0
>3962	Callee	channel -> set3DMinMaxDistance
>3963	PtrMemberAccess	channel -> set3DMinMaxDistance
>3964	Identifier	set3DMinMaxDistance
>3965	Identifier	channel
>3966	ExpressionStatement	 
>3967	CallExpression	channel -> set3DMinMaxDistance ( maxdist * 0.3 , maxdist )
>3968	ArgumentList	maxdist * 0.3
>3969	Argument	maxdist
>3970	Identifier	maxdist
>3971	Argument	maxdist * 0.3
>3972	MultiplicativeExpression	maxdist * 0.3
>3973	PrimaryExpression	0.3
>3974	Identifier	maxdist
>3975	Callee	channel -> set3DMinMaxDistance
>3976	PtrMemberAccess	channel -> set3DMinMaxDistance
>3977	Identifier	set3DMinMaxDistance
>3978	Identifier	channel
>3979	Condition	 
>3980	AndExpression	maxdist > 0 && play . positional
>3981	MemberAccess	play . positional
>3982	Identifier	positional
>3983	Identifier	play
>3984	RelationalExpression	maxdist > 0
>3985	PrimaryExpression	0
>3986	Identifier	maxdist
>3987	IfStatement	if ( ! maxdist )
>3988	ExpressionStatement	 
>3989	AssignmentExpr	maxdist = 1800
>3990	PrimaryExpression	1800
>3991	Identifier	maxdist
>3992	Condition	 
>3993	UnaryOp	! maxdist
>3994	Identifier	maxdist
>3995	UnaryOperator	!
>3996	IdentifierDeclStatement	 
>3997	IdentifierDecl	maxdist = play . maxdist
>3998	AssignmentExpr	maxdist = play . maxdist
>3999	MemberAccess	play . maxdist
>4000	Identifier	maxdist
>4001	Identifier	play
>4002	Identifier	maxdist
>4003	Identifier	maxdist
>4004	IdentifierDeclType	float
>4005	ExpressionStatement	 
>4006	CallExpression	channel -> setUserData ( NULL )
>4007	ArgumentList	NULL
>4008	Argument	NULL
>4009	Identifier	NULL
>4010	Callee	channel -> setUserData
>4011	PtrMemberAccess	channel -> setUserData
>4012	Identifier	setUserData
>4013	Identifier	channel
>4014	ExpressionStatement	 
>4015	CallExpression	channel -> setCallback ( NULL )
>4016	ArgumentList	NULL
>4017	Argument	NULL
>4018	Identifier	NULL
>4019	Callee	channel -> setCallback
>4020	PtrMemberAccess	channel -> setCallback
>4021	Identifier	setCallback
>4022	Identifier	channel
>4023	ExpressionStatement	 
>4024	CallExpression	channel -> setFrequency ( freq )
>4025	ArgumentList	freq
>4026	Argument	freq
>4027	Identifier	freq
>4028	Callee	channel -> setFrequency
>4029	PtrMemberAccess	channel -> setFrequency
>4030	Identifier	setFrequency
>4031	Identifier	channel
>4032	IfStatement	if ( freq <= 0 )
>4033	ExpressionStatement	 
>4034	AssignmentExpr	freq = 1
>4035	PrimaryExpression	1
>4036	Identifier	freq
>4037	Condition	 
>4038	RelationalExpression	freq <= 0
>4039	PrimaryExpression	0
>4040	Identifier	freq
>4041	IdentifierDeclStatement	 
>4042	IdentifierDecl	freq = play . freq
>4043	AssignmentExpr	freq = play . freq
>4044	MemberAccess	play . freq
>4045	Identifier	freq
>4046	Identifier	play
>4047	Identifier	freq
>4048	Identifier	freq
>4049	IdentifierDeclType	float
>4050	IfStatement	if ( play . fade == SFT_IN )
>4051	ElseStatement	else
>4052	CompoundStatement	 
>4053	ExpressionStatement	 
>4054	CallExpression	checkError ( )
>4055	ArgumentList	 
>4056	Callee	checkError
>4057	Identifier	checkError
>4058	ExpressionStatement	 
>4059	AssignmentExpr	result = channel -> setVolume ( play . vol )
>4060	CallExpression	channel -> setVolume ( play . vol )
>4061	ArgumentList	play . vol
>4062	Argument	play . vol
>4063	MemberAccess	play . vol
>4064	Identifier	vol
>4065	Identifier	play
>4066	Callee	channel -> setVolume
>4067	PtrMemberAccess	channel -> setVolume
>4068	Identifier	setVolume
>4069	Identifier	channel
>4070	Identifier	result
>4071	CompoundStatement	 
>4072	ExpressionStatement	 
>4073	CallExpression	SoundCore 
>4074	ArgumentList	fade
>4075	Argument	fade
>4076	Identifier	fade
>4077	Callee	SoundCore 
>4078	Identifier	SoundCore 
>4079	ExpressionStatement	 
>4080	AssignmentExpr	fade . to = play . vol
>4081	MemberAccess	play . vol
>4082	Identifier	vol
>4083	Identifier	play
>4084	MemberAccess	fade . to
>4085	Identifier	to
>4086	Identifier	fade
>4087	ExpressionStatement	 
>4088	AssignmentExpr	fade . d = 1
>4089	PrimaryExpression	1
>4090	MemberAccess	fade . d
>4091	Identifier	d
>4092	Identifier	fade
>4093	ExpressionStatement	 
>4094	AssignmentExpr	fade . s = 1.0f / play . time
>4095	MultiplicativeExpression	1.0f / play . time
>4096	MemberAccess	play . time
>4097	Identifier	time
>4098	Identifier	play
>4099	PrimaryExpression	1.0f
>4100	MemberAccess	fade . s
>4101	Identifier	s
>4102	Identifier	fade
>4103	ExpressionStatement	 
>4104	AssignmentExpr	fade . v = 0
>4105	PrimaryExpression	0
>4106	MemberAccess	fade . v
>4107	Identifier	v
>4108	Identifier	fade
>4109	ExpressionStatement	 
>4110	AssignmentExpr	fade . c = channel
>4111	Identifier	channel
>4112	MemberAccess	fade . c
>4113	Identifier	c
>4114	Identifier	fade
>4115	IdentifierDeclStatement	 
>4116	IdentifierDecl	fade
>4117	Identifier	fade
>4118	IdentifierDeclType	FadeCh
>4119	ExpressionStatement	 
>4120	CallExpression	checkError ( )
>4121	ArgumentList	 
>4122	Callee	checkError
>4123	Identifier	checkError
>4124	ExpressionStatement	 
>4125	AssignmentExpr	result = channel -> setVolume ( 0 )
>4126	CallExpression	channel -> setVolume ( 0 )
>4127	ArgumentList	0
>4128	Argument	0
>4129	PrimaryExpression	0
>4130	Callee	channel -> setVolume
>4131	PtrMemberAccess	channel -> setVolume
>4132	Identifier	setVolume
>4133	Identifier	channel
>4134	Identifier	result
>4135	Condition	 
>4136	EqualityExpression	play . fade == SFT_IN
>4137	Identifier	SFT_IN
>4138	MemberAccess	play . fade
>4139	Identifier	fade
>4140	Identifier	play
>4141	ExpressionStatement	 
>4142	CallExpression	checkError ( )
>4143	ArgumentList	 
>4144	Callee	checkError
>4145	Identifier	checkError
>4146	ExpressionStatement	 
>4147	AssignmentExpr	result = channel -> setPriority ( ( int ) ( ( 1 - play . priority ) * 255 ) )
>4148	CallExpression	channel -> setPriority ( ( int ) ( ( 1 - play . priority ) * 255 ) )
>4149	ArgumentList	( int ) ( ( 1 - play . priority ) * 255 )
>4150	Argument	( int ) ( ( 1 - play . priority ) * 255 )
>4151	CastExpression	( int ) ( ( 1 - play . priority ) * 255 )
>4152	MultiplicativeExpression	( 1 - play . priority ) * 255
>4153	PrimaryExpression	255
>4154	AdditiveExpression	1 - play . priority
>4155	MemberAccess	play . priority
>4156	Identifier	priority
>4157	Identifier	play
>4158	PrimaryExpression	1
>4159	CastTarget	int
>4160	Callee	channel -> setPriority
>4161	PtrMemberAccess	channel -> setPriority
>4162	Identifier	setPriority
>4163	Identifier	channel
>4164	Identifier	result
>4165	ExpressionStatement	 
>4166	CallExpression	checkError ( )
>4167	ArgumentList	 
>4168	Callee	checkError
>4169	Identifier	checkError
>4170	ExpressionStatement	 
>4171	AssignmentExpr	result = channel -> setChannelGroup ( group_sfx )
>4172	CallExpression	channel -> setChannelGroup ( group_sfx )
>4173	ArgumentList	group_sfx
>4174	Argument	group_sfx
>4175	Identifier	group_sfx
>4176	Callee	channel -> setChannelGroup
>4177	PtrMemberAccess	channel -> setChannelGroup
>4178	Identifier	setChannelGroup
>4179	Identifier	channel
>4180	Identifier	result
>4181	IfStatement	if ( channel == NULL )
>4182	ReturnStatement	 
>4183	PrimaryExpression	0
>4184	Condition	 
>4185	EqualityExpression	channel == NULL
>4186	Identifier	NULL
>4187	Identifier	channel
>4188	ExpressionStatement	 
>4189	CallExpression	checkError ( )
>4190	ArgumentList	 
>4191	Callee	checkError
>4192	Identifier	checkError
>4193	ExpressionStatement	 
>4194	AssignmentExpr	result = SoundCore 
>4195	CallExpression	SoundCore 
>4196	ArgumentList	FMOD_CHANNEL_FREE
>4197	Argument	& channel
>4198	UnaryOp	& channel
>4199	Identifier	channel
>4200	UnaryOperator	&
>4201	Argument	true
>4202	Identifier	true
>4203	Argument	sound
>4204	Identifier	sound
>4205	Argument	FMOD_CHANNEL_FREE
>4206	Identifier	FMOD_CHANNEL_FREE
>4207	Callee	SoundCore 
>4208	PtrMemberAccess	SoundCore 
>4209	Identifier	playSound
>4210	Identifier	SoundCore 
>4211	Identifier	result
>4212	IfStatement	if ( ! sound )
>4213	ReturnStatement	 
>4214	PrimaryExpression	0
>4215	Condition	 
>4216	UnaryOp	! sound
>4217	Identifier	sound
>4218	UnaryOperator	!
>4219	IfStatement	if ( play . handle )
>4220	ElseStatement	else
>4221	IfStatement	if ( ! play . name . empty ( ) )
>4222	ExpressionStatement	 
>4223	AssignmentExpr	sound = ( FMOD 
>4224	CastExpression	( FMOD 
>4225	CallExpression	getBuffer ( play . name )
>4226	ArgumentList	play . name
>4227	Argument	play . name
>4228	MemberAccess	play . name
>4229	Identifier	name
>4230	Identifier	play
>4231	Callee	getBuffer
>4232	Identifier	getBuffer
>4233	CastTarget	FMOD 
>4234	Identifier	sound
>4235	Condition	 
>4236	UnaryOp	! play . name . empty ( )
>4237	CallExpression	play . name . empty ( )
>4238	ArgumentList	 
>4239	Callee	play . name . empty
>4240	MemberAccess	play . name . empty
>4241	Identifier	empty
>4242	MemberAccess	play . name
>4243	Identifier	name
>4244	Identifier	play
>4245	UnaryOperator	!
>4246	ExpressionStatement	 
>4247	AssignmentExpr	sound = ( FMOD 
>4248	CastExpression	( FMOD 
>4249	MemberAccess	play . handle
>4250	Identifier	handle
>4251	Identifier	play
>4252	CastTarget	FMOD 
>4253	Identifier	sound
>4254	Condition	 
>4255	MemberAccess	play . handle
>4256	Identifier	handle
>4257	Identifier	play
>4258	IdentifierDeclStatement	 
>4259	IdentifierDecl	* sound = 0
>4260	AssignmentExpr	* sound = 0
>4261	PrimaryExpression	0
>4262	Identifier	sound
>4263	Identifier	sound
>4264	IdentifierDeclType	FMOD 
>4265	IdentifierDeclStatement	 
>4266	IdentifierDecl	* channel = 0
>4267	AssignmentExpr	* channel = 0
>4268	PrimaryExpression	0
>4269	Identifier	channel
>4270	Identifier	channel
>4271	IdentifierDeclType	FMOD 
>4272	IfStatement	if ( ! enabled )
>4273	ReturnStatement	 
>4274	PrimaryExpression	0
>4275	Condition	 
>4276	UnaryOp	! enabled
>4277	Identifier	enabled
>4278	UnaryOperator	!
>4324	FunctionDef	SoundManager 
>4325	ParameterList	const std 
>4326	Parameter	 
>4327	Identifier	vol
>4328	ParameterType	float
>4329	Parameter	 
>4330	Identifier	name
>4331	ParameterType	const std 
>4332	ReturnType	void *
>4333	CompoundStatement	 
>4334	ReturnStatement	 
>4335	CallExpression	playSfx ( play )
>4336	ArgumentList	play
>4337	Argument	play
>4338	Identifier	play
>4339	Callee	playSfx
>4340	Identifier	playSfx
>4341	ExpressionStatement	 
>4342	AssignmentExpr	play . vol = vol
>4343	Identifier	vol
>4344	MemberAccess	play . vol
>4345	Identifier	vol
>4346	Identifier	play
>4347	ExpressionStatement	 
>4348	AssignmentExpr	play . name = name
>4349	Identifier	name
>4350	MemberAccess	play . name
>4351	Identifier	name
>4352	Identifier	play
>4353	IdentifierDeclStatement	 
>4354	IdentifierDecl	play
>4355	Identifier	play
>4356	IdentifierDeclType	PlaySfx
>4366	FunctionDef	SoundManager 
>4367	ParameterList	float v
>4368	Parameter	 
>4369	Identifier	v
>4370	ParameterType	float
>4371	ReturnType	void
>4372	CompoundStatement	 
>4373	ExpressionStatement	 
>4374	AssignmentExpr	voiceFader = v
>4375	Identifier	v
>4376	Identifier	voiceFader
>4382	FunctionDef	SoundManager 
>4383	ParameterList	const std 
>4384	Parameter	 
>4385	Identifier	name
>4386	ParameterType	const std 
>4387	ReturnType	bool
>4388	CompoundStatement	 
>4389	ReturnStatement	 
>4390	Identifier	false
>4391	IfStatement	if ( isPlayingMusic ( ) )
>4392	CompoundStatement	 
>4393	IfStatement	if ( test == lastMusic )
>4394	ReturnStatement	 
>4395	Identifier	true
>4396	Condition	 
>4397	EqualityExpression	test == lastMusic
>4398	Identifier	lastMusic
>4399	Identifier	test
>4400	ExpressionStatement	 
>4401	CallExpression	stringToLower ( test )
>4402	ArgumentList	test
>4403	Argument	test
>4404	Identifier	test
>4405	Callee	stringToLower
>4406	Identifier	stringToLower
>4407	IdentifierDeclStatement	 
>4408	IdentifierDecl	test = name
>4409	AssignmentExpr	test = name
>4410	Identifier	name
>4411	Identifier	name
>4412	Identifier	test
>4413	IdentifierDeclType	std 
>4414	Condition	 
>4415	CallExpression	isPlayingMusic ( )
>4416	ArgumentList	 
>4417	Callee	isPlayingMusic
>4418	Identifier	isPlayingMusic
>4428	FunctionDef	SoundManager 
>4429	ParameterList	const std 
>4430	Parameter	 
>4431	Identifier	sct
>4432	ParameterType	SoundConditionType
>4433	Parameter	 
>4434	Identifier	trans
>4435	ParameterType	float
>4436	Parameter	 
>4437	Identifier	sft
>4438	ParameterType	SoundFadeType
>4439	Parameter	 
>4440	Identifier	slt
>4441	ParameterType	SoundLoopType
>4442	Parameter	 
>4443	Identifier	name
>4444	ParameterType	const std 
>4445	ReturnType	bool
>4446	CompoundStatement	 
>4447	ReturnStatement	 
>4448	Identifier	true
>4449	IfStatement	if ( musicStream )
>4450	ElseStatement	else
>4451	CompoundStatement	 
>4452	ExpressionStatement	 
>4453	CallExpression	debugLog ( \"Failed to create music stream
>4454	ArgumentList	\"Failed to create music stream
>4455	Argument	\"Failed to create music stream
>4456	AdditiveExpression	\"Failed to create music stream
>4457	Identifier	fn
>4458	PrimaryExpression	\"Failed to create music stream
>4459	Callee	debugLog
>4460	Identifier	debugLog
>4461	CompoundStatement	 
>4462	ExpressionStatement	 
>4463	CallExpression	debugLog ( \"music play
>4464	ArgumentList	\"music play
>4465	Argument	\"music play
>4466	AdditiveExpression	\"music play
>4467	Identifier	fn
>4468	PrimaryExpression	\"music play
>4469	Callee	debugLog
>4470	Identifier	debugLog
>4471	ExpressionStatement	 
>4472	CallExpression	checkError ( )
>4473	ArgumentList	 
>4474	Callee	checkError
>4475	Identifier	checkError
>4476	ExpressionStatement	 
>4477	AssignmentExpr	result = musicChannel -> setPaused ( false )
>4478	CallExpression	musicChannel -> setPaused ( false )
>4479	ArgumentList	false
>4480	Argument	false
>4481	Identifier	false
>4482	Callee	musicChannel -> setPaused
>4483	PtrMemberAccess	musicChannel -> setPaused
>4484	Identifier	setPaused
>4485	Identifier	musicChannel
>4486	Identifier	result
>4487	ExpressionStatement	 
>4488	CallExpression	setSoundPos ( musicChannel , 0 , 0 )
>4489	ArgumentList	musicChannel
>4490	Argument	0
>4491	PrimaryExpression	0
>4492	Argument	0
>4493	PrimaryExpression	0
>4494	Argument	musicChannel
>4495	Identifier	musicChannel
>4496	Callee	setSoundPos
>4497	Identifier	setSoundPos
>4498	ExpressionStatement	 
>4499	CallExpression	setSoundRelative ( musicChannel , true )
>4500	ArgumentList	musicChannel
>4501	Argument	true
>4502	Identifier	true
>4503	Argument	musicChannel
>4504	Identifier	musicChannel
>4505	Callee	setSoundRelative
>4506	Identifier	setSoundRelative
>4507	ExpressionStatement	 
>4508	CallExpression	musicChannel -> set3DMinMaxDistance ( 0.0f , 0.0f )
>4509	ArgumentList	0.0f
>4510	Argument	0.0f
>4511	PrimaryExpression	0.0f
>4512	Argument	0.0f
>4513	PrimaryExpression	0.0f
>4514	Callee	musicChannel -> set3DMinMaxDistance
>4515	PtrMemberAccess	musicChannel -> set3DMinMaxDistance
>4516	Identifier	set3DMinMaxDistance
>4517	Identifier	musicChannel
>4518	ExpressionStatement	 
>4519	CallExpression	musicChannel -> setUserData ( NULL )
>4520	ArgumentList	NULL
>4521	Argument	NULL
>4522	Identifier	NULL
>4523	Callee	musicChannel -> setUserData
>4524	PtrMemberAccess	musicChannel -> setUserData
>4525	Identifier	setUserData
>4526	Identifier	musicChannel
>4527	ExpressionStatement	 
>4528	CallExpression	musicChannel -> setCallback ( NULL )
>4529	ArgumentList	NULL
>4530	Argument	NULL
>4531	Identifier	NULL
>4532	Callee	musicChannel -> setCallback
>4533	PtrMemberAccess	musicChannel -> setCallback
>4534	Identifier	setCallback
>4535	Identifier	musicChannel
>4536	ExpressionStatement	 
>4537	CallExpression	musicChannel -> setFrequency ( 1 )
>4538	ArgumentList	1
>4539	Argument	1
>4540	PrimaryExpression	1
>4541	Callee	musicChannel -> setFrequency
>4542	PtrMemberAccess	musicChannel -> setFrequency
>4543	Identifier	setFrequency
>4544	Identifier	musicChannel
>4545	IfStatement	if ( sft == SFT_IN || sft == SFT_CROSS )
>4546	ElseStatement	else
>4547	CompoundStatement	 
>4548	ExpressionStatement	 
>4549	CallExpression	checkError ( )
>4550	ArgumentList	 
>4551	Callee	checkError
>4552	Identifier	checkError
>4553	ExpressionStatement	 
>4554	AssignmentExpr	result = musicChannel -> setVolume ( musVol . y )
>4555	CallExpression	musicChannel -> setVolume ( musVol . y )
>4556	ArgumentList	musVol . y
>4557	Argument	musVol . y
>4558	MemberAccess	musVol . y
>4559	Identifier	y
>4560	Identifier	musVol
>4561	Callee	musicChannel -> setVolume
>4562	PtrMemberAccess	musicChannel -> setVolume
>4563	Identifier	setVolume
>4564	Identifier	musicChannel
>4565	Identifier	result
>4566	ExpressionStatement	 
>4567	CallExpression	setMusicFader ( 1 , 0 )
>4568	ArgumentList	1
>4569	Argument	0
>4570	PrimaryExpression	0
>4571	Argument	1
>4572	PrimaryExpression	1
>4573	Callee	setMusicFader
>4574	Identifier	setMusicFader
>4575	CompoundStatement	 
>4576	ExpressionStatement	 
>4577	CallExpression	checkError ( )
>4578	ArgumentList	 
>4579	Callee	checkError
>4580	Identifier	checkError
>4581	ExpressionStatement	 
>4582	AssignmentExpr	result = musicChannel -> setVolume ( 0 )
>4583	CallExpression	musicChannel -> setVolume ( 0 )
>4584	ArgumentList	0
>4585	Argument	0
>4586	PrimaryExpression	0
>4587	Callee	musicChannel -> setVolume
>4588	PtrMemberAccess	musicChannel -> setVolume
>4589	Identifier	setVolume
>4590	Identifier	musicChannel
>4591	Identifier	result
>4592	ExpressionStatement	 
>4593	CallExpression	setMusicFader ( 1 , trans )
>4594	ArgumentList	1
>4595	Argument	trans
>4596	Identifier	trans
>4597	Argument	1
>4598	PrimaryExpression	1
>4599	Callee	setMusicFader
>4600	Identifier	setMusicFader
>4601	ExpressionStatement	 
>4602	CallExpression	setMusicFader ( 0 )
>4603	ArgumentList	0
>4604	Argument	0
>4605	PrimaryExpression	0
>4606	Callee	setMusicFader
>4607	Identifier	setMusicFader
>4608	Condition	 
>4609	OrExpression	sft == SFT_IN || sft == SFT_CROSS
>4610	EqualityExpression	sft == SFT_CROSS
>4611	Identifier	SFT_CROSS
>4612	Identifier	sft
>4613	EqualityExpression	sft == SFT_IN
>4614	Identifier	SFT_IN
>4615	Identifier	sft
>4616	ExpressionStatement	 
>4617	CallExpression	checkError ( )
>4618	ArgumentList	 
>4619	Callee	checkError
>4620	Identifier	checkError
>4621	ExpressionStatement	 
>4622	AssignmentExpr	result = musicChannel -> setPriority ( 0 )
>4623	CallExpression	musicChannel -> setPriority ( 0 )
>4624	ArgumentList	0
>4625	Argument	0
>4626	PrimaryExpression	0
>4627	Callee	musicChannel -> setPriority
>4628	PtrMemberAccess	musicChannel -> setPriority
>4629	Identifier	setPriority
>4630	Identifier	musicChannel
>4631	Identifier	result
>4632	ExpressionStatement	 
>4633	CallExpression	checkError ( )
>4634	ArgumentList	 
>4635	Callee	checkError
>4636	Identifier	checkError
>4637	ExpressionStatement	 
>4638	AssignmentExpr	result = musicChannel -> setChannelGroup ( group_mus )
>4639	CallExpression	musicChannel -> setChannelGroup ( group_mus )
>4640	ArgumentList	group_mus
>4641	Argument	group_mus
>4642	Identifier	group_mus
>4643	Callee	musicChannel -> setChannelGroup
>4644	PtrMemberAccess	musicChannel -> setChannelGroup
>4645	Identifier	setChannelGroup
>4646	Identifier	musicChannel
>4647	Identifier	result
>4648	ExpressionStatement	 
>4649	CallExpression	checkError ( )
>4650	ArgumentList	 
>4651	Callee	checkError
>4652	Identifier	checkError
>4653	ExpressionStatement	 
>4654	AssignmentExpr	result = SoundCore 
>4655	CallExpression	SoundCore 
>4656	ArgumentList	FMOD_CHANNEL_FREE
>4657	Argument	& musicChannel
>4658	UnaryOp	& musicChannel
>4659	Identifier	musicChannel
>4660	UnaryOperator	&
>4661	Argument	true
>4662	Identifier	true
>4663	Argument	musicStream
>4664	Identifier	musicStream
>4665	Argument	FMOD_CHANNEL_FREE
>4666	Identifier	FMOD_CHANNEL_FREE
>4667	Callee	SoundCore 
>4668	PtrMemberAccess	SoundCore 
>4669	Identifier	playSound
>4670	Identifier	SoundCore 
>4671	Identifier	result
>4672	Condition	 
>4673	Identifier	musicStream
>4674	IfStatement	if ( checkError ( ) )
>4675	ExpressionStatement	 
>4676	AssignmentExpr	musicStream = 0
>4677	PrimaryExpression	0
>4678	Identifier	musicStream
>4679	Condition	 
>4680	CallExpression	checkError ( )
>4681	ArgumentList	 
>4682	Callee	checkError
>4683	Identifier	checkError
>4684	ExpressionStatement	 
>4685	AssignmentExpr	result = SoundCore 
>4686	CallExpression	SoundCore 
>4687	ArgumentList	fn . c_str ( )
>4688	Argument	& musicStream
>4689	UnaryOp	& musicStream
>4690	Identifier	musicStream
>4691	UnaryOperator	&
>4692	Argument	0
>4693	PrimaryExpression	0
>4694	Argument	mode
>4695	Identifier	mode
>4696	Argument	fn . c_str ( )
>4697	CallExpression	fn . c_str ( )
>4698	ArgumentList	 
>4699	Callee	fn . c_str
>4700	MemberAccess	fn . c_str
>4701	Identifier	c_str
>4702	Identifier	fn
>4703	Callee	SoundCore 
>4704	PtrMemberAccess	SoundCore 
>4705	Identifier	createStream
>4706	Identifier	SoundCore 
>4707	Identifier	result
>4708	ExpressionStatement	 
>4709	CallExpression	musVol . stop ( )
>4710	ArgumentList	 
>4711	Callee	musVol . stop
>4712	MemberAccess	musVol . stop
>4713	Identifier	stop
>4714	Identifier	musVol
>4715	ExpressionStatement	 
>4716	AssignmentExpr	stopMusicOnFadeOut = false
>4717	Identifier	false
>4718	Identifier	stopMusicOnFadeOut
>4719	SwitchStatement	switch ( slt )
>4720	CompoundStatement	 
>4721	BreakStatement	 
>4722	ExpressionStatement	 
>4723	AssignmentExpr	playingMusicOnce = false
>4724	Identifier	false
>4725	Identifier	playingMusicOnce
>4726	ExpressionStatement	 
>4727	AssignmentExpr	mode |= FMOD_LOOP_NORMAL
>4728	Identifier	FMOD_LOOP_NORMAL
>4729	Identifier	mode
>4730	Label	 
>4731	Identifier	default
>4732	BreakStatement	 
>4733	ExpressionStatement	 
>4734	AssignmentExpr	playingMusicOnce = true
>4735	Identifier	true
>4736	Identifier	playingMusicOnce
>4737	ExpressionStatement	 
>4738	AssignmentExpr	mode |= FMOD_LOOP_OFF
>4739	Identifier	FMOD_LOOP_OFF
>4740	Identifier	mode
>4741	Label	 
>4742	Identifier	SLT_NONE
>4743	Label	 
>4744	Identifier	SLT_OFF
>4745	Condition	 
>4746	Identifier	slt
>4747	ExpressionStatement	 
>4748	AssignmentExpr	mode = FMOD_2D | FMOD_SOFTWARE | FMOD_CREATESTREAM
>4749	InclusiveOrExpression	FMOD_2D | FMOD_SOFTWARE | FMOD_CREATESTREAM
>4750	InclusiveOrExpression	FMOD_SOFTWARE | FMOD_CREATESTREAM
>4751	Identifier	FMOD_CREATESTREAM
>4752	Identifier	FMOD_SOFTWARE
>4753	Identifier	FMOD_2D
>4754	Identifier	mode
>4755	IdentifierDeclStatement	 
>4756	IdentifierDecl	mode = 0
>4757	AssignmentExpr	mode = 0
>4758	PrimaryExpression	0
>4759	Identifier	mode
>4760	Identifier	mode
>4761	IdentifierDeclType	FMOD_MODE
>4762	IfStatement	if ( musicChannel )
>4763	CompoundStatement	 
>4764	ExpressionStatement	 
>4765	AssignmentExpr	musicChannel = 0
>4766	PrimaryExpression	0
>4767	Identifier	musicChannel
>4768	IfStatement	if ( sft == SFT_IN )
>4769	CompoundStatement	 
>4770	ExpressionStatement	 
>4771	CallExpression	musicChannel -> stop ( )
>4772	ArgumentList	 
>4773	Callee	musicChannel -> stop
>4774	PtrMemberAccess	musicChannel -> stop
>4775	Identifier	stop
>4776	Identifier	musicChannel
>4777	Condition	 
>4778	EqualityExpression	sft == SFT_IN
>4779	Identifier	SFT_IN
>4780	Identifier	sft
>4781	Condition	 
>4782	Identifier	musicChannel
>4783	IfStatement	if ( musicStream )
>4784	CompoundStatement	 
>4785	ExpressionStatement	 
>4786	AssignmentExpr	musicStream = 0
>4787	PrimaryExpression	0
>4788	Identifier	musicStream
>4789	ExpressionStatement	 
>4790	CallExpression	musicStream -> release ( )
>4791	ArgumentList	 
>4792	Callee	musicStream -> release
>4793	PtrMemberAccess	musicStream -> release
>4794	Identifier	release
>4795	Identifier	musicStream
>4796	Condition	 
>4797	Identifier	musicStream
>4798	IfStatement	if ( sft == SFT_CROSS )
>4799	CompoundStatement	 
>4800	ExpressionStatement	 
>4801	CallExpression	fadeMusic ( SFT_CROSS , trans )
>4802	ArgumentList	SFT_CROSS
>4803	Argument	trans
>4804	Identifier	trans
>4805	Argument	SFT_CROSS
>4806	Identifier	SFT_CROSS
>4807	Callee	fadeMusic
>4808	Identifier	fadeMusic
>4809	Condition	 
>4810	EqualityExpression	sft == SFT_CROSS
>4811	Identifier	SFT_CROSS
>4812	Identifier	sft
>4813	ExpressionStatement	 
>4814	CallExpression	stringToLower ( lastMusic )
>4815	ArgumentList	lastMusic
>4816	Argument	lastMusic
>4817	Identifier	lastMusic
>4818	Callee	stringToLower
>4819	Identifier	stringToLower
>4820	ExpressionStatement	 
>4821	AssignmentExpr	lastMusic = name
>4822	Identifier	name
>4823	Identifier	lastMusic
>4824	ExpressionStatement	 
>4825	AssignmentExpr	fn = core -> adjustFilenameCase ( fn )
>4826	CallExpression	core -> adjustFilenameCase ( fn )
>4827	ArgumentList	fn
>4828	Argument	fn
>4829	Identifier	fn
>4830	Callee	core -> adjustFilenameCase
>4831	PtrMemberAccess	core -> adjustFilenameCase
>4832	Identifier	adjustFilenameCase
>4833	Identifier	core
>4834	Identifier	fn
>4835	IfStatement	if ( ! name . empty ( ) && name [ 0 ] == '.' )
>4836	ElseStatement	else
>4837	CompoundStatement	 
>4838	IfStatement	if ( ! audioPath2 . empty ( ) )
>4839	ElseStatement	else
>4840	CompoundStatement	 
>4841	ExpressionStatement	 
>4842	AssignmentExpr	fn = musicPath + name + fileType
>4843	AdditiveExpression	musicPath + name + fileType
>4844	AdditiveExpression	name + fileType
>4845	Identifier	fileType
>4846	Identifier	name
>4847	Identifier	musicPath
>4848	Identifier	fn
>4849	CompoundStatement	 
>4850	IfStatement	if ( ! exists ( fn ) )
>4851	CompoundStatement	 
>4852	ExpressionStatement	 
>4853	AssignmentExpr	fn = musicPath + name + fileType
>4854	AdditiveExpression	musicPath + name + fileType
>4855	AdditiveExpression	name + fileType
>4856	Identifier	fileType
>4857	Identifier	name
>4858	Identifier	musicPath
>4859	Identifier	fn
>4860	Condition	 
>4861	UnaryOp	! exists ( fn )
>4862	CallExpression	exists ( fn )
>4863	ArgumentList	fn
>4864	Argument	fn
>4865	Identifier	fn
>4866	Callee	exists
>4867	Identifier	exists
>4868	UnaryOperator	!
>4869	ExpressionStatement	 
>4870	AssignmentExpr	fn = audioPath2 + name + fileType
>4871	AdditiveExpression	audioPath2 + name + fileType
>4872	AdditiveExpression	name + fileType
>4873	Identifier	fileType
>4874	Identifier	name
>4875	Identifier	audioPath2
>4876	Identifier	fn
>4877	Condition	 
>4878	UnaryOp	! audioPath2 . empty ( )
>4879	CallExpression	audioPath2 . empty ( )
>4880	ArgumentList	 
>4881	Callee	audioPath2 . empty
>4882	MemberAccess	audioPath2 . empty
>4883	Identifier	empty
>4884	Identifier	audioPath2
>4885	UnaryOperator	!
>4886	CompoundStatement	 
>4887	ExpressionStatement	 
>4888	AssignmentExpr	fn = name
>4889	Identifier	name
>4890	Identifier	fn
>4891	Condition	 
>4892	AndExpression	! name . empty ( ) && name [ 0 ] == '.'
>4893	EqualityExpression	name [ 0 ] == '.'
>4894	PrimaryExpression	'.'
>4895	ArrayIndexing	name [ 0 ]
>4896	PrimaryExpression	0
>4897	Identifier	name
>4898	UnaryOp	! name . empty ( )
>4899	CallExpression	name . empty ( )
>4900	ArgumentList	 
>4901	Callee	name . empty
>4902	MemberAccess	name . empty
>4903	Identifier	empty
>4904	Identifier	name
>4905	UnaryOperator	!
>4906	IdentifierDeclStatement	 
>4907	IdentifierDecl	fn = \"\"
>4908	AssignmentExpr	fn = \"\"
>4909	PrimaryExpression	\"\"
>4910	Identifier	fn
>4911	Identifier	fn
>4912	IdentifierDeclType	std 
>4913	IfStatement	if ( sct == SCT_ISNOTPLAYING && isPlayingMusic ( ) )
>4914	CompoundStatement	 
>4915	IfStatement	if ( isPlayingMusic ( name ) )
>4916	CompoundStatement	 
>4917	ReturnStatement	 
>4918	Identifier	false
>4919	IfStatement	if ( masterSoundLock )
>4920	ExpressionStatement	 
>4921	CallExpression	SDL_mutexV ( masterSoundLock )
>4922	ArgumentList	masterSoundLock
>4923	Argument	masterSoundLock
>4924	Identifier	masterSoundLock
>4925	Callee	SDL_mutexV
>4926	Identifier	SDL_mutexV
>4927	Condition	 
>4928	Identifier	masterSoundLock
>4929	Condition	 
>4930	CallExpression	isPlayingMusic ( name )
>4931	ArgumentList	name
>4932	Argument	name
>4933	Identifier	name
>4934	Callee	isPlayingMusic
>4935	Identifier	isPlayingMusic
>4936	Condition	 
>4937	AndExpression	sct == SCT_ISNOTPLAYING && isPlayingMusic ( )
>4938	CallExpression	isPlayingMusic ( )
>4939	ArgumentList	 
>4940	Callee	isPlayingMusic
>4941	Identifier	isPlayingMusic
>4942	EqualityExpression	sct == SCT_ISNOTPLAYING
>4943	Identifier	SCT_ISNOTPLAYING
>4944	Identifier	sct
>4945	IfStatement	if ( ! enabled )
>4946	ReturnStatement	 
>4947	Identifier	false
>4948	Condition	 
>4949	UnaryOp	! enabled
>4950	Identifier	enabled
>4951	UnaryOperator	!
>4952	ExpressionStatement	 
>4953	CallExpression	debugLog ( \"playMusic
>4954	ArgumentList	\"playMusic
>4955	Argument	\"playMusic
>4956	AdditiveExpression	\"playMusic
>4957	Identifier	name
>4958	PrimaryExpression	\"playMusic
>4959	Callee	debugLog
>4960	Identifier	debugLog
>5018	FunctionDef	SoundManager 
>5019	ParameterList	 
>5020	ReturnType	void
>5021	CompoundStatement	 
>5022	ExpressionStatement	 
>5023	AssignmentExpr	lastMusic = \"\"
>5024	PrimaryExpression	\"\"
>5025	Identifier	lastMusic
>5026	ExpressionStatement	 
>5027	AssignmentExpr	playingMusicOnce = false
>5028	Identifier	false
>5029	Identifier	playingMusicOnce
>5030	IfStatement	if ( musicChannel )
>5031	CompoundStatement	 
>5032	ExpressionStatement	 
>5033	AssignmentExpr	musicChannel = 0
>5034	PrimaryExpression	0
>5035	Identifier	musicChannel
>5036	ExpressionStatement	 
>5037	AssignmentExpr	musicStream = 0
>5038	PrimaryExpression	0
>5039	Identifier	musicStream
>5040	IfStatement	if ( musicStream )
>5041	CompoundStatement	 
>5042	ExpressionStatement	 
>5043	CallExpression	checkError ( )
>5044	ArgumentList	 
>5045	Callee	checkError
>5046	Identifier	checkError
>5047	ExpressionStatement	 
>5048	CallExpression	musicStream -> release ( )
>5049	ArgumentList	 
>5050	Callee	musicStream -> release
>5051	PtrMemberAccess	musicStream -> release
>5052	Identifier	release
>5053	Identifier	musicStream
>5054	Condition	 
>5055	Identifier	musicStream
>5056	ExpressionStatement	 
>5057	CallExpression	checkError ( )
>5058	ArgumentList	 
>5059	Callee	checkError
>5060	Identifier	checkError
>5061	ExpressionStatement	 
>5062	CallExpression	musicChannel -> stop ( )
>5063	ArgumentList	 
>5064	Callee	musicChannel -> stop
>5065	PtrMemberAccess	musicChannel -> stop
>5066	Identifier	stop
>5067	Identifier	musicChannel
>5068	Condition	 
>5069	Identifier	musicChannel
>5078	FunctionDef	SoundManager 
>5079	ParameterList	void * channel
>5080	Parameter	 
>5081	Identifier	channel
>5082	ParameterType	void *
>5083	ReturnType	void
>5084	CompoundStatement	 
>5085	IfStatement	if ( ch )
>5086	CompoundStatement	 
>5087	ExpressionStatement	 
>5088	AssignmentExpr	ch = 0
>5089	PrimaryExpression	0
>5090	Identifier	ch
>5091	ExpressionStatement	 
>5092	CallExpression	checkError ( )
>5093	ArgumentList	 
>5094	Callee	checkError
>5095	Identifier	checkError
>5096	ExpressionStatement	 
>5097	CallExpression	ch -> stop ( )
>5098	ArgumentList	 
>5099	Callee	ch -> stop
>5100	PtrMemberAccess	ch -> stop
>5101	Identifier	stop
>5102	Identifier	ch
>5103	Condition	 
>5104	Identifier	ch
>5105	IdentifierDeclStatement	 
>5106	IdentifierDecl	* ch = ( FMOD 
>5107	AssignmentExpr	* ch = ( FMOD 
>5108	CastExpression	( FMOD 
>5109	Identifier	channel
>5110	CastTarget	FMOD 
>5111	Identifier	ch
>5112	Identifier	ch
>5113	IdentifierDeclType	FMOD 
>5114	IfStatement	if ( ! channel )
>5115	ReturnStatement	 
>5116	Condition	 
>5117	UnaryOp	! channel
>5118	Identifier	channel
>5119	UnaryOperator	!
>5125	FunctionDef	SoundManager 
>5126	ParameterList	void * channel , SoundFadeType sft , float t
>5127	Parameter	 
>5128	Identifier	t
>5129	ParameterType	float
>5130	Parameter	 
>5131	Identifier	sft
>5132	ParameterType	SoundFadeType
>5133	Parameter	 
>5134	Identifier	channel
>5135	ParameterType	void *
>5136	ReturnType	void
>5137	CompoundStatement	 
>5138	IfStatement	if ( sft == SFT_OUT )
>5139	CompoundStatement	 
>5140	IfStatement	if ( ch )
>5141	CompoundStatement	 
>5142	ExpressionStatement	 
>5143	CallExpression	SoundCore 
>5144	ArgumentList	f
>5145	Argument	f
>5146	Identifier	f
>5147	Callee	SoundCore 
>5148	Identifier	SoundCore 
>5149	ExpressionStatement	 
>5150	AssignmentExpr	f . c = ch
>5151	Identifier	ch
>5152	MemberAccess	f . c
>5153	Identifier	c
>5154	Identifier	f
>5155	ExpressionStatement	 
>5156	CallExpression	checkError ( )
>5157	ArgumentList	 
>5158	Callee	checkError
>5159	Identifier	checkError
>5160	ExpressionStatement	 
>5161	AssignmentExpr	result = ch -> getVolume ( & f . v )
>5162	CallExpression	ch -> getVolume ( & f . v )
>5163	ArgumentList	& f . v
>5164	Argument	& f . v
>5165	UnaryOp	& f . v
>5166	MemberAccess	f . v
>5167	Identifier	v
>5168	Identifier	f
>5169	UnaryOperator	&
>5170	Callee	ch -> getVolume
>5171	PtrMemberAccess	ch -> getVolume
>5172	Identifier	getVolume
>5173	Identifier	ch
>5174	Identifier	result
>5175	ExpressionStatement	 
>5176	AssignmentExpr	f . s = 1.0f / t
>5177	MultiplicativeExpression	1.0f / t
>5178	Identifier	t
>5179	PrimaryExpression	1.0f
>5180	MemberAccess	f . s
>5181	Identifier	s
>5182	Identifier	f
>5183	IdentifierDeclStatement	 
>5184	IdentifierDecl	f
>5185	Identifier	f
>5186	IdentifierDeclType	FadeCh
>5187	Condition	 
>5188	Identifier	ch
>5189	IdentifierDeclStatement	 
>5190	IdentifierDecl	* ch = ( FMOD 
>5191	AssignmentExpr	* ch = ( FMOD 
>5192	CastExpression	( FMOD 
>5193	Identifier	channel
>5194	CastTarget	FMOD 
>5195	Identifier	ch
>5196	Identifier	ch
>5197	IdentifierDeclType	FMOD 
>5198	Condition	 
>5199	EqualityExpression	sft == SFT_OUT
>5200	Identifier	SFT_OUT
>5201	Identifier	sft
>5202	IfStatement	if ( ! channel )
>5203	ReturnStatement	 
>5204	Condition	 
>5205	UnaryOp	! channel
>5206	Identifier	channel
>5207	UnaryOperator	!
>5224	FunctionDef	SoundManager 
>5225	ParameterList	 
>5226	ReturnType	void
>5227	CompoundStatement	 
>5228	ExpressionStatement	 
>5229	CallExpression	onVoiceEnded ( )
>5230	ArgumentList	 
>5231	Callee	onVoiceEnded
>5232	Identifier	onVoiceEnded
>5233	IfStatement	if ( voiceStream )
>5234	CompoundStatement	 
>5235	ExpressionStatement	 
>5236	AssignmentExpr	voiceStream = 0
>5237	PrimaryExpression	0
>5238	Identifier	voiceStream
>5239	ExpressionStatement	 
>5240	CallExpression	checkError ( )
>5241	ArgumentList	 
>5242	Callee	checkError
>5243	Identifier	checkError
>5244	ExpressionStatement	 
>5245	AssignmentExpr	result = voiceStream -> release ( )
>5246	CallExpression	voiceStream -> release ( )
>5247	ArgumentList	 
>5248	Callee	voiceStream -> release
>5249	PtrMemberAccess	voiceStream -> release
>5250	Identifier	release
>5251	Identifier	voiceStream
>5252	Identifier	result
>5253	Condition	 
>5254	Identifier	voiceStream
>5255	IfStatement	if ( voiceChannel )
>5256	CompoundStatement	 
>5257	IfStatement	if ( playing )
>5258	CompoundStatement	 
>5259	ExpressionStatement	 
>5260	AssignmentExpr	voiceChannel = 0
>5261	PrimaryExpression	0
>5262	Identifier	voiceChannel
>5263	ExpressionStatement	 
>5264	CallExpression	checkError ( )
>5265	ArgumentList	 
>5266	Callee	checkError
>5267	Identifier	checkError
>5268	ExpressionStatement	 
>5269	AssignmentExpr	result = voiceChannel -> stop ( )
>5270	CallExpression	voiceChannel -> stop ( )
>5271	ArgumentList	 
>5272	Callee	voiceChannel -> stop
>5273	PtrMemberAccess	voiceChannel -> stop
>5274	Identifier	stop
>5275	Identifier	voiceChannel
>5276	Identifier	result
>5277	Condition	 
>5278	Identifier	playing
>5279	ExpressionStatement	 
>5280	CallExpression	checkError ( )
>5281	ArgumentList	 
>5282	Callee	checkError
>5283	Identifier	checkError
>5284	ExpressionStatement	 
>5285	AssignmentExpr	result = voiceChannel -> isPlaying ( & playing )
>5286	CallExpression	voiceChannel -> isPlaying ( & playing )
>5287	ArgumentList	& playing
>5288	Argument	& playing
>5289	UnaryOp	& playing
>5290	Identifier	playing
>5291	UnaryOperator	&
>5292	Callee	voiceChannel -> isPlaying
>5293	PtrMemberAccess	voiceChannel -> isPlaying
>5294	Identifier	isPlaying
>5295	Identifier	voiceChannel
>5296	Identifier	result
>5297	IdentifierDeclStatement	 
>5298	IdentifierDecl	playing = false
>5299	AssignmentExpr	playing = false
>5300	Identifier	false
>5301	Identifier	false
>5302	Identifier	playing
>5303	IdentifierDeclType	bool
>5304	Condition	 
>5305	Identifier	voiceChannel
>5320	FunctionDef	SoundManager 
>5321	ParameterList	 
>5322	ReturnType	void
>5323	CompoundStatement	 
>5324	ExpressionStatement	 
>5325	CallExpression	stopVoice ( )
>5326	ArgumentList	 
>5327	Callee	stopVoice
>5328	Identifier	stopVoice
>5329	WhileStatement	while ( ! voxQueue . empty ( ) )
>5330	ExpressionStatement	 
>5331	CallExpression	voxQueue . pop ( )
>5332	ArgumentList	 
>5333	Callee	voxQueue . pop
>5334	MemberAccess	voxQueue . pop
>5335	Identifier	pop
>5336	Identifier	voxQueue
>5337	Condition	 
>5338	UnaryOp	! voxQueue . empty ( )
>5339	CallExpression	voxQueue . empty ( )
>5340	ArgumentList	 
>5341	Callee	voxQueue . empty
>5342	MemberAccess	voxQueue . empty
>5343	Identifier	empty
>5344	Identifier	voxQueue
>5345	UnaryOperator	!
>5351	FunctionDef	loadCacheSoundsCallback (const std 
>5352	ParameterList	const std 
>5353	Parameter	 
>5354	Identifier	param
>5355	ParameterType	intptr_t
>5356	Parameter	 
>5357	Identifier	filename
>5358	ParameterType	const std 
>5359	ReturnType	void
>5360	CompoundStatement	 
>5361	IfStatement	if ( fileType == \".ogg\" )
>5362	CompoundStatement	 
>5363	ExpressionStatement	 
>5364	CallExpression	sm -> loadSoundIntoBank ( filename , \"\" , \"\" )
>5365	ArgumentList	filename
>5366	Argument	\"\"
>5367	PrimaryExpression	\"\"
>5368	Argument	\"\"
>5369	PrimaryExpression	\"\"
>5370	Argument	filename
>5371	Identifier	filename
>5372	Callee	sm -> loadSoundIntoBank
>5373	PtrMemberAccess	sm -> loadSoundIntoBank
>5374	Identifier	loadSoundIntoBank
>5375	Identifier	sm
>5376	ExpressionStatement	 
>5377	CallExpression	debugLog ( \"trying to load sound \" + filename )
>5378	ArgumentList	\"trying to load sound \" + filename
>5379	Argument	\"trying to load sound \" + filename
>5380	AdditiveExpression	\"trying to load sound \" + filename
>5381	Identifier	filename
>5382	PrimaryExpression	\"trying to load sound \"
>5383	Callee	debugLog
>5384	Identifier	debugLog
>5385	Condition	 
>5386	EqualityExpression	fileType == \".ogg\"
>5387	PrimaryExpression	\".ogg\"
>5388	Identifier	fileType
>5389	IfStatement	if ( ! sm -> enabled )
>5390	CompoundStatement	 
>5391	ReturnStatement	 
>5392	ExpressionStatement	 
>5393	CallExpression	debugLog ( \"Disabled
>5394	ArgumentList	\"Disabled
>5395	Argument	\"Disabled
>5396	AdditiveExpression	\"Disabled
>5397	AdditiveExpression	filename + \"]\"
>5398	PrimaryExpression	\"]\"
>5399	Identifier	filename
>5400	PrimaryExpression	\"Disabled
>5401	Callee	debugLog
>5402	Identifier	debugLog
>5403	Condition	 
>5404	UnaryOp	! sm -> enabled
>5405	PtrMemberAccess	sm -> enabled
>5406	Identifier	enabled
>5407	Identifier	sm
>5408	UnaryOperator	!
>5409	ExpressionStatement	 
>5410	AssignmentExpr	sm = ( SoundManager * ) param
>5411	CastExpression	( SoundManager * ) param
>5412	Identifier	param
>5413	CastTarget	SoundManager *
>5414	Identifier	sm
>5415	IdentifierDeclStatement	 
>5416	IdentifierDecl	* sm
>5417	Identifier	sm
>5418	IdentifierDeclType	SoundManager *
>5428	FunctionDef	SoundManager 
>5429	ParameterList	const std 
>5430	Parameter	 
>5431	Identifier	progressCallback
>5432	ParameterType	void ( )
>5433	Parameter	 
>5434	Identifier	ftype
>5435	ParameterType	const std 
>5436	Parameter	 
>5437	Identifier	path
>5438	ParameterType	const std 
>5439	ReturnType	void
>5440	CompoundStatement	 
>5441	ExpressionStatement	 
>5442	AssignmentExpr	loadProgressCallback = NULL
>5443	Identifier	NULL
>5444	Identifier	loadProgressCallback
>5445	ExpressionStatement	 
>5446	CallExpression	forEachFile ( path , ftype , loadCacheSoundsCallback , ( intptr_t ) this )
>5447	ArgumentList	path
>5448	Argument	( intptr_t ) this
>5449	CastExpression	( intptr_t ) this
>5450	Identifier	this
>5451	CastTarget	intptr_t
>5452	Argument	loadCacheSoundsCallback
>5453	Identifier	loadCacheSoundsCallback
>5454	Argument	ftype
>5455	Identifier	ftype
>5456	Argument	path
>5457	Identifier	path
>5458	Callee	forEachFile
>5459	Identifier	forEachFile
>5460	ExpressionStatement	 
>5461	AssignmentExpr	loadProgressCallback = progressCallback
>5462	Identifier	progressCallback
>5463	Identifier	loadProgressCallback
>5474	FunctionDef	SoundManager 
>5475	ParameterList	const std 
>5476	Parameter	 
>5477	Identifier	slt
>5478	ParameterType	SoundLoadType
>5479	Parameter	 
>5480	Identifier	format
>5481	ParameterType	const std 
>5482	Parameter	 
>5483	Identifier	path
>5484	ParameterType	const std 
>5485	Parameter	 
>5486	Identifier	filename
>5487	ParameterType	const std 
>5488	ReturnType	Buffer
>5489	CompoundStatement	 
>5490	ReturnStatement	 
>5491	CallExpression	Buffer ( )
>5492	ArgumentList	 
>5493	Callee	Buffer
>5494	Identifier	Buffer
>5495	ReturnStatement	 
>5496	Identifier	sound
>5497	IfStatement	if ( slt == SFXLOAD_LOCAL )
>5498	CompoundStatement	 
>5499	ExpressionStatement	 
>5500	CallExpression	localSounds . push_back ( name )
>5501	ArgumentList	name
>5502	Argument	name
>5503	Identifier	name
>5504	Callee	localSounds . push_back
>5505	MemberAccess	localSounds . push_back
>5506	Identifier	push_back
>5507	Identifier	localSounds
>5508	Condition	 
>5509	EqualityExpression	slt == SFXLOAD_LOCAL
>5510	Identifier	SFXLOAD_LOCAL
>5511	Identifier	slt
>5512	ExpressionStatement	 
>5513	AssignmentExpr	SoundCore 
>5514	Identifier	sound
>5515	ArrayIndexing	SoundCore 
>5516	Identifier	name
>5517	Identifier	SoundCore 
>5518	IfStatement	if ( checkError ( ) )
>5519	CompoundStatement	 
>5520	ReturnStatement	 
>5521	CallExpression	Buffer ( )
>5522	ArgumentList	 
>5523	Callee	Buffer
>5524	Identifier	Buffer
>5525	ExpressionStatement	 
>5526	CallExpression	debugLog ( \"createSound failed\" )
>5527	ArgumentList	\"createSound failed\"
>5528	Argument	\"createSound failed\"
>5529	PrimaryExpression	\"createSound failed\"
>5530	Callee	debugLog
>5531	Identifier	debugLog
>5532	Condition	 
>5533	CallExpression	checkError ( )
>5534	ArgumentList	 
>5535	Callee	checkError
>5536	Identifier	checkError
>5537	ExpressionStatement	 
>5538	AssignmentExpr	result = SoundCore 
>5539	CallExpression	SoundCore 
>5540	ArgumentList	f . c_str ( )
>5541	Argument	& sound
>5542	UnaryOp	& sound
>5543	Identifier	sound
>5544	UnaryOperator	&
>5545	Argument	0
>5546	PrimaryExpression	0
>5547	Argument	mode
>5548	Identifier	mode
>5549	Argument	f . c_str ( )
>5550	CallExpression	f . c_str ( )
>5551	ArgumentList	 
>5552	Callee	f . c_str
>5553	MemberAccess	f . c_str
>5554	Identifier	c_str
>5555	Identifier	f
>5556	Callee	SoundCore 
>5557	PtrMemberAccess	SoundCore 
>5558	Identifier	createSound
>5559	Identifier	SoundCore 
>5560	Identifier	result
>5561	IfStatement	if ( loop )
>5562	ExpressionStatement	 
>5563	AssignmentExpr	mode |= FMOD_LOOP_NORMAL
>5564	Identifier	FMOD_LOOP_NORMAL
>5565	Identifier	mode
>5566	Condition	 
>5567	Identifier	loop
>5568	IdentifierDeclStatement	 
>5569	IdentifierDecl	mode = FMOD_DEFAULT | FMOD_LOWMEM | FMOD_3D | FMOD_3D_LINEARROLLOFF
>5570	AssignmentExpr	mode = FMOD_DEFAULT | FMOD_LOWMEM | FMOD_3D | FMOD_3D_LINEARROLLOFF
>5571	InclusiveOrExpression	FMOD_DEFAULT | FMOD_LOWMEM | FMOD_3D | FMOD_3D_LINEARROLLOFF
>5572	InclusiveOrExpression	FMOD_LOWMEM | FMOD_3D | FMOD_3D_LINEARROLLOFF
>5573	InclusiveOrExpression	FMOD_3D | FMOD_3D_LINEARROLLOFF
>5574	Identifier	FMOD_3D_LINEARROLLOFF
>5575	Identifier	FMOD_3D
>5576	Identifier	FMOD_LOWMEM
>5577	Identifier	FMOD_DEFAULT
>5578	Identifier	mode
>5579	Identifier	mode
>5580	IdentifierDeclType	FMOD_MODE
>5581	IfStatement	if ( sound )
>5582	ReturnStatement	 
>5583	Identifier	sound
>5584	Condition	 
>5585	Identifier	sound
>5586	IdentifierDeclStatement	 
>5587	IdentifierDecl	* sound = SoundCore 
>5588	AssignmentExpr	* sound = SoundCore 
>5589	ArrayIndexing	SoundCore 
>5590	Identifier	name
>5591	Identifier	SoundCore 
>5592	Identifier	sound
>5593	Identifier	sound
>5594	IdentifierDeclType	FMOD 
>5595	ExpressionStatement	 
>5596	CallExpression	stringToLower ( name )
>5597	ArgumentList	name
>5598	Argument	name
>5599	Identifier	name
>5600	Callee	stringToLower
>5601	Identifier	stringToLower
>5602	IfStatement	if ( loc != std 
>5603	ElseStatement	else
>5604	CompoundStatement	 
>5605	ReturnStatement	 
>5606	CallExpression	Buffer ( )
>5607	ArgumentList	 
>5608	Callee	Buffer
>5609	Identifier	Buffer
>5610	ExpressionStatement	 
>5611	CallExpression	debugLog ( \"returning 0\" )
>5612	ArgumentList	\"returning 0\"
>5613	Argument	\"returning 0\"
>5614	PrimaryExpression	\"returning 0\"
>5615	Callee	debugLog
>5616	Identifier	debugLog
>5617	CompoundStatement	 
>5618	ExpressionStatement	 
>5619	AssignmentExpr	name = f . substr ( loc + 1 , loc2 - ( loc + 1 ) )
>5620	CallExpression	f . substr ( loc + 1 , loc2 - ( loc + 1 ) )
>5621	ArgumentList	loc + 1
>5622	Argument	loc2 - ( loc + 1 )
>5623	AdditiveExpression	loc2 - ( loc + 1 )
>5624	AdditiveExpression	loc + 1
>5625	PrimaryExpression	1
>5626	Identifier	loc
>5627	Identifier	loc2
>5628	Argument	loc + 1
>5629	AdditiveExpression	loc + 1
>5630	PrimaryExpression	1
>5631	Identifier	loc
>5632	Callee	f . substr
>5633	MemberAccess	f . substr
>5634	Identifier	substr
>5635	Identifier	f
>5636	Identifier	name
>5637	Condition	 
>5638	AndExpression	loc != std 
>5639	EqualityExpression	loc2 != std 
>5640	Identifier	std 
>5641	Identifier	loc2
>5642	EqualityExpression	loc != std 
>5643	Identifier	std 
>5644	Identifier	loc
>5645	IdentifierDeclStatement	 
>5646	IdentifierDecl	loc2 = f . rfind ( '.' )
>5647	AssignmentExpr	loc2 = f . rfind ( '.' )
>5648	CallExpression	f . rfind ( '.' )
>5649	ArgumentList	'.'
>5650	Argument	'.'
>5651	PrimaryExpression	'.'
>5652	Callee	f . rfind
>5653	MemberAccess	f . rfind
>5654	Identifier	rfind
>5655	Identifier	f
>5656	Identifier	loc2
>5657	Identifier	loc2
>5658	IdentifierDeclType	int
>5659	IdentifierDeclStatement	 
>5660	IdentifierDecl	loc = f . find_last_of ( '/' )
>5661	AssignmentExpr	loc = f . find_last_of ( '/' )
>5662	CallExpression	f . find_last_of ( '/' )
>5663	ArgumentList	'/'
>5664	Argument	'/'
>5665	PrimaryExpression	'/'
>5666	Callee	f . find_last_of
>5667	MemberAccess	f . find_last_of
>5668	Identifier	find_last_of
>5669	Identifier	f
>5670	Identifier	loc
>5671	Identifier	loc
>5672	IdentifierDeclType	int
>5673	IfStatement	if ( slt == SFXLOAD_LOCAL && ! audioPath2 . empty ( ) )
>5674	ElseStatement	else
>5675	CompoundStatement	 
>5676	ExpressionStatement	 
>5677	AssignmentExpr	f = core -> adjustFilenameCase ( f )
>5678	CallExpression	core -> adjustFilenameCase ( f )
>5679	ArgumentList	f
>5680	Argument	f
>5681	Identifier	f
>5682	Callee	core -> adjustFilenameCase
>5683	PtrMemberAccess	core -> adjustFilenameCase
>5684	Identifier	adjustFilenameCase
>5685	Identifier	core
>5686	Identifier	f
>5687	ExpressionStatement	 
>5688	AssignmentExpr	f = localisePath ( f )
>5689	CallExpression	localisePath ( f )
>5690	ArgumentList	f
>5691	Argument	f
>5692	Identifier	f
>5693	Callee	localisePath
>5694	Identifier	localisePath
>5695	Identifier	f
>5696	ExpressionStatement	 
>5697	AssignmentExpr	f = path + filename + format
>5698	AdditiveExpression	path + filename + format
>5699	AdditiveExpression	filename + format
>5700	Identifier	format
>5701	Identifier	filename
>5702	Identifier	path
>5703	Identifier	f
>5704	CompoundStatement	 
>5705	IfStatement	if ( ! exists ( f ) )
>5706	CompoundStatement	 
>5707	ExpressionStatement	 
>5708	AssignmentExpr	f = core -> adjustFilenameCase ( f )
>5709	CallExpression	core -> adjustFilenameCase ( f )
>5710	ArgumentList	f
>5711	Argument	f
>5712	Identifier	f
>5713	Callee	core -> adjustFilenameCase
>5714	PtrMemberAccess	core -> adjustFilenameCase
>5715	Identifier	adjustFilenameCase
>5716	Identifier	core
>5717	Identifier	f
>5718	ExpressionStatement	 
>5719	AssignmentExpr	f = localisePath ( f )
>5720	CallExpression	localisePath ( f )
>5721	ArgumentList	f
>5722	Argument	f
>5723	Identifier	f
>5724	Callee	localisePath
>5725	Identifier	localisePath
>5726	Identifier	f
>5727	ExpressionStatement	 
>5728	AssignmentExpr	f = path + filename + format
>5729	AdditiveExpression	path + filename + format
>5730	AdditiveExpression	filename + format
>5731	Identifier	format
>5732	Identifier	filename
>5733	Identifier	path
>5734	Identifier	f
>5735	Condition	 
>5736	UnaryOp	! exists ( f )
>5737	CallExpression	exists ( f )
>5738	ArgumentList	f
>5739	Argument	f
>5740	Identifier	f
>5741	Callee	exists
>5742	Identifier	exists
>5743	UnaryOperator	!
>5744	ExpressionStatement	 
>5745	AssignmentExpr	f = core -> adjustFilenameCase ( f )
>5746	CallExpression	core -> adjustFilenameCase ( f )
>5747	ArgumentList	f
>5748	Argument	f
>5749	Identifier	f
>5750	Callee	core -> adjustFilenameCase
>5751	PtrMemberAccess	core -> adjustFilenameCase
>5752	Identifier	adjustFilenameCase
>5753	Identifier	core
>5754	Identifier	f
>5755	ExpressionStatement	 
>5756	AssignmentExpr	f = localisePathInternalModpath ( f )
>5757	CallExpression	localisePathInternalModpath ( f )
>5758	ArgumentList	f
>5759	Argument	f
>5760	Identifier	f
>5761	Callee	localisePathInternalModpath
>5762	Identifier	localisePathInternalModpath
>5763	Identifier	f
>5764	ExpressionStatement	 
>5765	AssignmentExpr	f = audioPath2 + filename + format
>5766	AdditiveExpression	audioPath2 + filename + format
>5767	AdditiveExpression	filename + format
>5768	Identifier	format
>5769	Identifier	filename
>5770	Identifier	audioPath2
>5771	Identifier	f
>5772	Condition	 
>5773	AndExpression	slt == SFXLOAD_LOCAL && ! audioPath2 . empty ( )
>5774	UnaryOp	! audioPath2 . empty ( )
>5775	CallExpression	audioPath2 . empty ( )
>5776	ArgumentList	 
>5777	Callee	audioPath2 . empty
>5778	MemberAccess	audioPath2 . empty
>5779	Identifier	empty
>5780	Identifier	audioPath2
>5781	UnaryOperator	!
>5782	EqualityExpression	slt == SFXLOAD_LOCAL
>5783	Identifier	SFXLOAD_LOCAL
>5784	Identifier	slt
>5785	ExpressionStatement	 
>5786	CallExpression	debugLog ( filename )
>5787	ArgumentList	filename
>5788	Argument	filename
>5789	Identifier	filename
>5790	Callee	debugLog
>5791	Identifier	debugLog
>5792	IfStatement	if ( f . find ( \"loop\" ) != std 
>5793	ExpressionStatement	 
>5794	AssignmentExpr	loop = true
>5795	Identifier	true
>5796	Identifier	loop
>5797	Condition	 
>5798	EqualityExpression	f . find ( \"loop\" ) != std 
>5799	Identifier	std 
>5800	CallExpression	f . find ( \"loop\" )
>5801	ArgumentList	\"loop\"
>5802	Argument	\"loop\"
>5803	PrimaryExpression	\"loop\"
>5804	Callee	f . find
>5805	MemberAccess	f . find
>5806	Identifier	find
>5807	Identifier	f
>5808	ExpressionStatement	 
>5809	CallExpression	stringToLower ( f )
>5810	ArgumentList	f
>5811	Argument	f
>5812	Identifier	f
>5813	Callee	stringToLower
>5814	Identifier	stringToLower
>5815	IdentifierDeclStatement	 
>5816	IdentifierDecl	loop = false
>5817	AssignmentExpr	loop = false
>5818	Identifier	false
>5819	Identifier	false
>5820	Identifier	loop
>5821	IdentifierDeclType	bool
>5822	IdentifierDeclStatement	 
>5823	IdentifierDecl	name
>5824	Identifier	name
>5825	IdentifierDeclType	std 
>5826	IdentifierDecl	f = filename
>5827	AssignmentExpr	f = filename
>5828	Identifier	filename
>5829	Identifier	filename
>5830	Identifier	f
>5831	IdentifierDeclType	std 
>5832	IfStatement	if ( loadProgressCallback )
>5833	ExpressionStatement	 
>5834	CallExpression	loadProgressCallback ( )
>5835	ArgumentList	 
>5836	Callee	loadProgressCallback
>5837	Identifier	loadProgressCallback
>5838	Condition	 
>5839	Identifier	loadProgressCallback
>5888	FunctionDef	SoundManager 
>5889	ParameterList	const std 
>5890	Parameter	 
>5891	Identifier	filename
>5892	ParameterType	const std 
>5893	ReturnType	Buffer
>5894	CompoundStatement	 
>5895	ReturnStatement	 
>5896	Identifier	BBGE_AUDIO_NOCHANNEL
>5897	ReturnStatement	 
>5898	Identifier	b
>5899	IdentifierDeclStatement	 
>5900	IdentifierDecl	b = loadSoundIntoBank ( filename , localSoundPath , fileType , SFXLOAD_LOCAL )
>5901	AssignmentExpr	b = loadSoundIntoBank ( filename , localSoundPath , fileType , SFXLOAD_LOCAL )
>5902	CallExpression	loadSoundIntoBank ( filename , localSoundPath , fileType , SFXLOAD_LOCAL )
>5903	ArgumentList	filename
>5904	Argument	SFXLOAD_LOCAL
>5905	Identifier	SFXLOAD_LOCAL
>5906	Argument	fileType
>5907	Identifier	fileType
>5908	Argument	localSoundPath
>5909	Identifier	localSoundPath
>5910	Argument	filename
>5911	Identifier	filename
>5912	Callee	loadSoundIntoBank
>5913	Identifier	loadSoundIntoBank
>5914	Identifier	b
>5915	Identifier	b
>5916	IdentifierDeclType	Buffer
>5927	FunctionDef	SoundManager 
>5928	ParameterList	float speed
>5929	Parameter	 
>5930	Identifier	speed
>5931	ParameterType	float
>5932	ReturnType	void
>5933	CompoundStatement	 
>5934	ExpressionStatement	 
>5935	CallExpression	musicChannel -> setFrequency ( speed )
>5936	ArgumentList	speed
>5937	Argument	speed
>5938	Identifier	speed
>5939	Callee	musicChannel -> setFrequency
>5940	PtrMemberAccess	musicChannel -> setFrequency
>5941	Identifier	setFrequency
>5942	Identifier	musicChannel
>5948	FunctionDef	SoundManager 
>5949	ParameterList	float speed
>5950	Parameter	 
>5951	Identifier	speed
>5952	ParameterType	float
>5953	ReturnType	void
>5954	CompoundStatement	 
>5955	IfStatement	if ( modChannel )
>5956	ExpressionStatement	 
>5957	CallExpression	modChannel -> setFrequency ( speed )
>5958	ArgumentList	speed
>5959	Argument	speed
>5960	Identifier	speed
>5961	Callee	modChannel -> setFrequency
>5962	PtrMemberAccess	modChannel -> setFrequency
>5963	Identifier	setFrequency
>5964	Identifier	modChannel
>5965	Condition	 
>5966	Identifier	modChannel
>5972	FunctionDef	SoundManager 
>5973	ParameterList	 
>5974	ReturnType	void
>5975	CompoundStatement	 
>5976	ExpressionStatement	 
>5977	CallExpression	localSounds . clear ( )
>5978	ArgumentList	 
>5979	Callee	localSounds . clear
>5980	MemberAccess	localSounds . clear
>5981	Identifier	clear
>5982	Identifier	localSounds
>5983	ForStatement	for ( LocalSounds 
>5984	CompoundStatement	 
>5985	ExpressionStatement	 
>5986	AssignmentExpr	soundMap [ snd ] = 0
>5987	PrimaryExpression	0
>5988	ArrayIndexing	soundMap [ snd ]
>5989	Identifier	snd
>5990	Identifier	soundMap
>5991	ExpressionStatement	 
>5992	CallExpression	samp -> release ( )
>5993	ArgumentList	 
>5994	Callee	samp -> release
>5995	PtrMemberAccess	samp -> release
>5996	Identifier	release
>5997	Identifier	samp
>5998	IdentifierDeclStatement	 
>5999	IdentifierDecl	* samp = ( FMOD 
>6000	AssignmentExpr	* samp = ( FMOD 
>6001	CastExpression	( FMOD 
>6002	ArrayIndexing	soundMap [ snd ]
>6003	Identifier	snd
>6004	Identifier	soundMap
>6005	CastTarget	FMOD 
>6006	Identifier	samp
>6007	Identifier	samp
>6008	IdentifierDeclType	FMOD 
>6009	ExpressionStatement	 
>6010	CallExpression	debugLog ( \"unloading sound [\" + snd + \"]\" )
>6011	ArgumentList	\"unloading sound [\" + snd + \"]\"
>6012	Argument	\"unloading sound [\" + snd + \"]\"
>6013	AdditiveExpression	\"unloading sound [\" + snd + \"]\"
>6014	AdditiveExpression	snd + \"]\"
>6015	PrimaryExpression	\"]\"
>6016	Identifier	snd
>6017	PrimaryExpression	\"unloading sound [\"
>6018	Callee	debugLog
>6019	Identifier	debugLog
>6020	IdentifierDeclStatement	 
>6021	IdentifierDecl	snd = ( * i )
>6022	AssignmentExpr	snd = ( * i )
>6023	UnaryOp	* i
>6024	Identifier	i
>6025	UnaryOperator	*
>6026	Identifier	snd
>6027	Identifier	snd
>6028	IdentifierDeclType	std 
>6029	IncDecOp	 
>6030	IncDec	++
>6031	Identifier	i
>6032	Condition	 
>6033	EqualityExpression	i != localSounds . end ( )
>6034	CallExpression	localSounds . end ( )
>6035	ArgumentList	 
>6036	Callee	localSounds . end
>6037	MemberAccess	localSounds . end
>6038	Identifier	end
>6039	Identifier	localSounds
>6040	Identifier	i
>6041	ForInit	 
>6042	IdentifierDeclStatement	LocalSounds 
>6043	IdentifierDecl	i = localSounds . begin ( )
>6044	AssignmentExpr	i = localSounds . begin ( )
>6045	CallExpression	localSounds . begin ( )
>6046	ArgumentList	 
>6047	Callee	localSounds . begin
>6048	MemberAccess	localSounds . begin
>6049	Identifier	begin
>6050	Identifier	localSounds
>6051	Identifier	i
>6052	Identifier	i
>6053	IdentifierDeclType	LocalSounds 
>6067	FunctionDef	SoundManager 
>6068	ParameterList	 
>6069	ReturnType	bool
>6070	CompoundStatement	 
>6071	ReturnStatement	 
>6072	Identifier	false
>6073	IfStatement	if ( result != FMOD_OK )
>6074	CompoundStatement	 
>6075	ReturnStatement	 
>6076	Identifier	true
>6077	ExpressionStatement	 
>6078	CallExpression	debugLog ( os . str ( ) )
>6079	ArgumentList	os . str ( )
>6080	Argument	os . str ( )
>6081	CallExpression	os . str ( )
>6082	ArgumentList	 
>6083	Callee	os . str
>6084	MemberAccess	os . str
>6085	Identifier	str
>6086	Identifier	os
>6087	Callee	debugLog
>6088	Identifier	debugLog
>6089	SwitchStatement	switch ( result )
>6090	CompoundStatement	 
>6091	BreakStatement	 
>6092	ExpressionStatement	 
>6093	ShiftExpression	os << \"Unknown error code\"
>6094	PrimaryExpression	\"Unknown error code\"
>6095	Identifier	os
>6096	Label	 
>6097	Identifier	default
>6098	BreakStatement	 
>6099	ExpressionStatement	 
>6100	ShiftExpression	os << \"FMOD_ERR_DSP_NOTFOUND
>6101	PrimaryExpression	\"FMOD_ERR_DSP_NOTFOUND
>6102	Identifier	os
>6103	Label	 
>6104	Identifier	FMOD_ERR_DSP_NOTFOUND
>6105	BreakStatement	 
>6106	ExpressionStatement	 
>6107	ShiftExpression	os << \"FMOD_ERR_DSP_FORMAT
>6108	PrimaryExpression	\"FMOD_ERR_DSP_FORMAT
>6109	Identifier	os
>6110	Label	 
>6111	Identifier	FMOD_ERR_DSP_FORMAT
>6112	BreakStatement	 
>6113	ExpressionStatement	 
>6114	ShiftExpression	os << \"FMOD_ERR_DSP_CONNECTION
>6115	PrimaryExpression	\"FMOD_ERR_DSP_CONNECTION
>6116	Identifier	os
>6117	Label	 
>6118	Identifier	FMOD_ERR_DSP_CONNECTION
>6119	BreakStatement	 
>6120	ExpressionStatement	 
>6121	ShiftExpression	os << \"FMOD_ERR_DMA
>6122	PrimaryExpression	\"FMOD_ERR_DMA
>6123	Identifier	os
>6124	Label	 
>6125	Identifier	FMOD_ERR_DMA
>6126	BreakStatement	 
>6127	ExpressionStatement	 
>6128	ShiftExpression	os << \"FMOD_ERR_COM
>6129	PrimaryExpression	\"FMOD_ERR_COM
>6130	Identifier	os
>6131	Label	 
>6132	Identifier	FMOD_ERR_COM
>6133	BreakStatement	 
>6134	ExpressionStatement	 
>6135	ShiftExpression	os << \"FMOD_ERR_CHANNEL_STOLEN
>6136	PrimaryExpression	\"FMOD_ERR_CHANNEL_STOLEN
>6137	Identifier	os
>6138	Label	 
>6139	Identifier	FMOD_ERR_CHANNEL_STOLEN
>6140	BreakStatement	 
>6141	ExpressionStatement	 
>6142	ShiftExpression	os << \"FMOD_ERR_CHANNEL_ALLOC
>6143	PrimaryExpression	\"FMOD_ERR_CHANNEL_ALLOC
>6144	Identifier	os
>6145	Label	 
>6146	Identifier	FMOD_ERR_CHANNEL_ALLOC
>6147	BreakStatement	 
>6148	ExpressionStatement	 
>6149	ShiftExpression	os << \"Tried to call a function on a data type that does not allow this type of functionality (ie calling \
>6150	PrimaryExpression	\"Tried to call a function on a data type that does not allow this type of functionality (ie calling Sound
>6151	Identifier	os
>6152	Label	 
>6153	Identifier	FMOD_ERR_BADCOMMAND
>6154	BreakStatement	 
>6155	ExpressionStatement	 
>6156	ShiftExpression	os << \"FMOD_ERR_ALREADYLOCKED Tried to call lock a second time before unlock was called.\"
>6157	PrimaryExpression	\"FMOD_ERR_ALREADYLOCKED Tried to call lock a second time before unlock was called.\"
>6158	Identifier	os
>6159	Label	 
>6160	Identifier	FMOD_ERR_ALREADYLOCKED
>6161	Condition	 
>6162	Identifier	result
>6163	ExpressionStatement	 
>6164	ShiftExpression	os << \"FMODEX error
>6165	ShiftExpression	\"FMODEX error
>6166	ShiftExpression	result << \"
>6167	PrimaryExpression	\"
>6168	Identifier	result
>6169	PrimaryExpression	\"FMODEX error
>6170	Identifier	os
>6171	IdentifierDeclStatement	 
>6172	IdentifierDecl	os
>6173	Identifier	os
>6174	IdentifierDeclType	std 
>6175	Condition	 
>6176	EqualityExpression	result != FMOD_OK
>6177	Identifier	FMOD_OK
>6178	Identifier	result
>6188	FunctionDef	SoundManager 
>6189	ParameterList	float x , float y
>6190	Parameter	 
>6191	Identifier	y
>6192	ParameterType	float
>6193	Parameter	 
>6194	Identifier	x
>6195	ParameterType	float
>6196	ReturnType	void
>6197	CompoundStatement	 
>6198	ExpressionStatement	 
>6199	CallExpression	SoundCore 
>6200	ArgumentList	0
>6201	Argument	& up
>6202	UnaryOp	& up
>6203	Identifier	up
>6204	UnaryOperator	&
>6205	Argument	& forward
>6206	UnaryOp	& forward
>6207	Identifier	forward
>6208	UnaryOperator	&
>6209	Argument	NULL
>6210	Identifier	NULL
>6211	Argument	& pos
>6212	UnaryOp	& pos
>6213	Identifier	pos
>6214	UnaryOperator	&
>6215	Argument	0
>6216	PrimaryExpression	0
>6217	Callee	SoundCore 
>6218	PtrMemberAccess	SoundCore 
>6219	Identifier	set3DListenerAttributes
>6220	Identifier	SoundCore 
>6221	ExpressionStatement	 
>6222	AssignmentExpr	up . z = 0.0f
>6223	PrimaryExpression	0.0f
>6224	MemberAccess	up . z
>6225	Identifier	z
>6226	Identifier	up
>6227	ExpressionStatement	 
>6228	AssignmentExpr	up . y = 1.0f
>6229	PrimaryExpression	1.0f
>6230	MemberAccess	up . y
>6231	Identifier	y
>6232	Identifier	up
>6233	ExpressionStatement	 
>6234	AssignmentExpr	up . x = 0.0f
>6235	PrimaryExpression	0.0f
>6236	MemberAccess	up . x
>6237	Identifier	x
>6238	Identifier	up
>6239	IdentifierDeclStatement	 
>6240	IdentifierDecl	up
>6241	Identifier	up
>6242	IdentifierDeclType	FMOD_VECTOR
>6243	ExpressionStatement	 
>6244	AssignmentExpr	forward . z = - 1.0f
>6245	UnaryOp	- 1.0f
>6246	PrimaryExpression	1.0f
>6247	UnaryOperator	-
>6248	MemberAccess	forward . z
>6249	Identifier	z
>6250	Identifier	forward
>6251	ExpressionStatement	 
>6252	AssignmentExpr	forward . y = 0.0f
>6253	PrimaryExpression	0.0f
>6254	MemberAccess	forward . y
>6255	Identifier	y
>6256	Identifier	forward
>6257	ExpressionStatement	 
>6258	AssignmentExpr	forward . x = 0.0f
>6259	PrimaryExpression	0.0f
>6260	MemberAccess	forward . x
>6261	Identifier	x
>6262	Identifier	forward
>6263	IdentifierDeclStatement	 
>6264	IdentifierDecl	forward
>6265	Identifier	forward
>6266	IdentifierDeclType	FMOD_VECTOR
>6267	ExpressionStatement	 
>6268	AssignmentExpr	pos . z = 0.0f
>6269	PrimaryExpression	0.0f
>6270	MemberAccess	pos . z
>6271	Identifier	z
>6272	Identifier	pos
>6273	ExpressionStatement	 
>6274	AssignmentExpr	pos . y = y
>6275	Identifier	y
>6276	MemberAccess	pos . y
>6277	Identifier	y
>6278	Identifier	pos
>6279	ExpressionStatement	 
>6280	AssignmentExpr	pos . x = x
>6281	Identifier	x
>6282	MemberAccess	pos . x
>6283	Identifier	x
>6284	Identifier	pos
>6285	IdentifierDeclStatement	 
>6286	IdentifierDecl	pos
>6287	Identifier	pos
>6288	IdentifierDeclType	FMOD_VECTOR
>6311	FunctionDef	SoundManager 
>6312	ParameterList	void * channel , float x , float y
>6313	Parameter	 
>6314	Identifier	y
>6315	ParameterType	float
>6316	Parameter	 
>6317	Identifier	x
>6318	ParameterType	float
>6319	Parameter	 
>6320	Identifier	channel
>6321	ParameterType	void *
>6322	ReturnType	void
>6323	CompoundStatement	 
>6324	ExpressionStatement	 
>6325	CallExpression	pChannel -> set3DAttributes ( & pos , NULL )
>6326	ArgumentList	& pos
>6327	Argument	NULL
>6328	Identifier	NULL
>6329	Argument	& pos
>6330	UnaryOp	& pos
>6331	Identifier	pos
>6332	UnaryOperator	&
>6333	Callee	pChannel -> set3DAttributes
>6334	PtrMemberAccess	pChannel -> set3DAttributes
>6335	Identifier	set3DAttributes
>6336	Identifier	pChannel
>6337	ExpressionStatement	 
>6338	AssignmentExpr	pos . z = 0.0f
>6339	PrimaryExpression	0.0f
>6340	MemberAccess	pos . z
>6341	Identifier	z
>6342	Identifier	pos
>6343	ExpressionStatement	 
>6344	AssignmentExpr	pos . y = y
>6345	Identifier	y
>6346	MemberAccess	pos . y
>6347	Identifier	y
>6348	Identifier	pos
>6349	ExpressionStatement	 
>6350	AssignmentExpr	pos . x = x
>6351	Identifier	x
>6352	MemberAccess	pos . x
>6353	Identifier	x
>6354	Identifier	pos
>6355	IdentifierDeclStatement	 
>6356	IdentifierDecl	pos
>6357	Identifier	pos
>6358	IdentifierDeclType	FMOD_VECTOR
>6359	IdentifierDeclStatement	 
>6360	IdentifierDecl	* pChannel = ( FMOD 
>6361	AssignmentExpr	* pChannel = ( FMOD 
>6362	CastExpression	( FMOD 
>6363	Identifier	channel
>6364	CastTarget	FMOD 
>6365	Identifier	pChannel
>6366	Identifier	pChannel
>6367	IdentifierDeclType	FMOD 
>6368	IfStatement	if ( ! channel )
>6369	ReturnStatement	 
>6370	Condition	 
>6371	UnaryOp	! channel
>6372	Identifier	channel
>6373	UnaryOperator	!
>6387	FunctionDef	SoundManager 
>6388	ParameterList	void * channel , bool relative
>6389	Parameter	 
>6390	Identifier	relative
>6391	ParameterType	bool
>6392	Parameter	 
>6393	Identifier	channel
>6394	ParameterType	void *
>6395	ReturnType	void
>6396	CompoundStatement	 
>6397	IfStatement	if ( mode != newmode )
>6398	ExpressionStatement	 
>6399	CallExpression	pChannel -> setMode ( newmode )
>6400	ArgumentList	newmode
>6401	Argument	newmode
>6402	Identifier	newmode
>6403	Callee	pChannel -> setMode
>6404	PtrMemberAccess	pChannel -> setMode
>6405	Identifier	setMode
>6406	Identifier	pChannel
>6407	Condition	 
>6408	EqualityExpression	mode != newmode
>6409	Identifier	newmode
>6410	Identifier	mode
>6411	IfStatement	if ( relative )
>6412	ElseStatement	else
>6413	ExpressionStatement	 
>6414	AssignmentExpr	newmode |= ( FMOD_3D_WORLDRELATIVE | FMOD_3D )
>6415	InclusiveOrExpression	FMOD_3D_WORLDRELATIVE | FMOD_3D
>6416	Identifier	FMOD_3D
>6417	Identifier	FMOD_3D_WORLDRELATIVE
>6418	Identifier	newmode
>6419	ExpressionStatement	 
>6420	AssignmentExpr	newmode |= ( FMOD_3D_HEADRELATIVE | FMOD_3D )
>6421	InclusiveOrExpression	FMOD_3D_HEADRELATIVE | FMOD_3D
>6422	Identifier	FMOD_3D
>6423	Identifier	FMOD_3D_HEADRELATIVE
>6424	Identifier	newmode
>6425	Condition	 
>6426	Identifier	relative
>6427	IdentifierDeclStatement	 
>6428	IdentifierDecl	newmode = mode & ~ ( FMOD_3D_WORLDRELATIVE | FMOD_3D_HEADRELATIVE )
>6429	AssignmentExpr	newmode = mode & ~ ( FMOD_3D_WORLDRELATIVE | FMOD_3D_HEADRELATIVE )
>6430	BitAndExpression	mode & ~ ( FMOD_3D_WORLDRELATIVE | FMOD_3D_HEADRELATIVE )
>6431	UnaryOp	~ ( FMOD_3D_WORLDRELATIVE | FMOD_3D_HEADRELATIVE )
>6432	InclusiveOrExpression	FMOD_3D_WORLDRELATIVE | FMOD_3D_HEADRELATIVE
>6433	Identifier	FMOD_3D_HEADRELATIVE
>6434	Identifier	FMOD_3D_WORLDRELATIVE
>6435	UnaryOperator	~
>6436	Identifier	mode
>6437	Identifier	newmode
>6438	Identifier	newmode
>6439	IdentifierDeclType	FMOD_MODE
>6440	ExpressionStatement	 
>6441	CallExpression	pChannel -> getMode ( & mode )
>6442	ArgumentList	& mode
>6443	Argument	& mode
>6444	UnaryOp	& mode
>6445	Identifier	mode
>6446	UnaryOperator	&
>6447	Callee	pChannel -> getMode
>6448	PtrMemberAccess	pChannel -> getMode
>6449	Identifier	getMode
>6450	Identifier	pChannel
>6451	IdentifierDeclStatement	 
>6452	IdentifierDecl	mode = 0
>6453	AssignmentExpr	mode = 0
>6454	PrimaryExpression	0
>6455	Identifier	mode
>6456	Identifier	mode
>6457	IdentifierDeclType	FMOD_MODE
>6458	IdentifierDeclStatement	 
>6459	IdentifierDecl	* pChannel = ( FMOD 
>6460	AssignmentExpr	* pChannel = ( FMOD 
>6461	CastExpression	( FMOD 
>6462	Identifier	channel
>6463	CastTarget	FMOD 
>6464	Identifier	pChannel
>6465	Identifier	pChannel
>6466	IdentifierDeclType	FMOD 
>6467	IfStatement	if ( ! channel )
>6468	ReturnStatement	 
>6469	Condition	 
>6470	UnaryOp	! channel
>6471	Identifier	channel
>6472	UnaryOperator	!
>6485	FunctionDef	s_soundHolderCallback (void * channel , FMOD_CHANNEL_CALLBACKTYPE type , void * commanddata1 , void * commanddata2)
>6486	ParameterList	void * channel , FMOD_CHANNEL_CALLBACKTYPE type , void * commanddata1 , void * commanddata2
>6487	Parameter	 
>6488	Identifier	commanddata2
>6489	ParameterType	void *
>6490	Parameter	 
>6491	Identifier	commanddata1
>6492	ParameterType	void *
>6493	Parameter	 
>6494	Identifier	type
>6495	ParameterType	FMOD_CHANNEL_CALLBACKTYPE
>6496	Parameter	 
>6497	Identifier	channel
>6498	ParameterType	void *
>6499	ReturnType	static FMOD_RESULT
>6500	CompoundStatement	 
>6501	ReturnStatement	 
>6502	Identifier	FMOD_OK
>6503	SwitchStatement	switch ( type )
>6504	CompoundStatement	 
>6505	ReturnStatement	 
>6506	Identifier	FMOD_ERR_INVALID_PARAM
>6507	Label	 
>6508	Identifier	default
>6509	BreakStatement	 
>6510	ExpressionStatement	 
>6511	CallExpression	holder -> unlinkSound ( channel )
>6512	ArgumentList	channel
>6513	Argument	channel
>6514	Identifier	channel
>6515	Callee	holder -> unlinkSound
>6516	PtrMemberAccess	holder -> unlinkSound
>6517	Identifier	unlinkSound
>6518	Identifier	holder
>6519	Label	 
>6520	Identifier	FMOD_CHANNEL_CALLBACKTYPE_END
>6521	Condition	 
>6522	Identifier	type
>6523	ExpressionStatement	 
>6524	CallExpression	pChannel -> getUserData ( ( void * * ) & holder )
>6525	ArgumentList	( void * * ) & holder
>6526	Argument	( void * * ) & holder
>6527	CastExpression	( void * * ) & holder
>6528	UnaryOp	& holder
>6529	Identifier	holder
>6530	UnaryOperator	&
>6531	CastTarget	void * *
>6532	Callee	pChannel -> getUserData
>6533	PtrMemberAccess	pChannel -> getUserData
>6534	Identifier	getUserData
>6535	Identifier	pChannel
>6536	IdentifierDeclStatement	 
>6537	IdentifierDecl	* pChannel = ( FMOD 
>6538	AssignmentExpr	* pChannel = ( FMOD 
>6539	CastExpression	( FMOD 
>6540	Identifier	channel
>6541	CastTarget	FMOD 
>6542	Identifier	pChannel
>6543	Identifier	pChannel
>6544	IdentifierDeclType	FMOD 
>6545	IdentifierDeclStatement	 
>6546	IdentifierDecl	* holder = NULL
>6547	AssignmentExpr	* holder = NULL
>6548	Identifier	NULL
>6549	Identifier	NULL
>6550	Identifier	holder
>6551	IdentifierDeclType	SoundHolder *
>6552	IfStatement	if ( ! channel )
>6553	ReturnStatement	 
>6554	Identifier	FMOD_ERR_INVALID_PARAM
>6555	Condition	 
>6556	UnaryOp	! channel
>6557	Identifier	channel
>6558	UnaryOperator	!
>6572	FunctionDef	SoundHolder 
>6573	ParameterList	 
>6574	CompoundStatement	 
>6575	ExpressionStatement	 
>6576	CallExpression	unlinkAllSounds ( )
>6577	ArgumentList	 
>6578	Callee	unlinkAllSounds
>6579	Identifier	unlinkAllSounds
>6583	FunctionDef	SoundHolder 
>6584	ParameterList	float x , float y
>6585	Parameter	 
>6586	Identifier	y
>6587	ParameterType	float
>6588	Parameter	 
>6589	Identifier	x
>6590	ParameterType	float
>6591	ReturnType	void
>6592	CompoundStatement	 
>6593	IfStatement	if ( activeSounds . size ( ) )
>6594	ForStatement	for ( std 
>6595	ExpressionStatement	 
>6596	CallExpression	sound -> setSoundPos ( * it , x , y )
>6597	ArgumentList	* it
>6598	Argument	y
>6599	Identifier	y
>6600	Argument	x
>6601	Identifier	x
>6602	Argument	* it
>6603	UnaryOp	* it
>6604	Identifier	it
>6605	UnaryOperator	*
>6606	Callee	sound -> setSoundPos
>6607	PtrMemberAccess	sound -> setSoundPos
>6608	Identifier	setSoundPos
>6609	Identifier	sound
>6610	UnaryExpression	 
>6611	Identifier	it
>6612	IncDec	++
>6613	Condition	 
>6614	EqualityExpression	it != activeSounds . end ( )
>6615	CallExpression	activeSounds . end ( )
>6616	ArgumentList	 
>6617	Callee	activeSounds . end
>6618	MemberAccess	activeSounds . end
>6619	Identifier	end
>6620	Identifier	activeSounds
>6621	Identifier	it
>6622	ForInit	 
>6623	IdentifierDeclStatement	std 
>6624	IdentifierDecl	it = activeSounds . begin ( )
>6625	AssignmentExpr	it = activeSounds . begin ( )
>6626	CallExpression	activeSounds . begin ( )
>6627	ArgumentList	 
>6628	Callee	activeSounds . begin
>6629	MemberAccess	activeSounds . begin
>6630	Identifier	begin
>6631	Identifier	activeSounds
>6632	Identifier	it
>6633	Identifier	it
>6634	IdentifierDeclType	std 
>6635	Condition	 
>6636	CallExpression	activeSounds . size ( )
>6637	ArgumentList	 
>6638	Callee	activeSounds . size
>6639	MemberAccess	activeSounds . size
>6640	Identifier	size
>6641	Identifier	activeSounds
>6654	FunctionDef	SoundHolder 
>6655	ParameterList	 
>6656	ReturnType	void
>6657	CompoundStatement	 
>6658	WhileStatement	while ( activeSounds . size ( ) )
>6659	ExpressionStatement	 
>6660	CallExpression	sound -> stopSfx ( * activeSounds . begin ( ) )
>6661	ArgumentList	* activeSounds . begin ( )
>6662	Argument	* activeSounds . begin ( )
>6663	UnaryOp	* activeSounds . begin ( )
>6664	CallExpression	activeSounds . begin ( )
>6665	ArgumentList	 
>6666	Callee	activeSounds . begin
>6667	MemberAccess	activeSounds . begin
>6668	Identifier	begin
>6669	Identifier	activeSounds
>6670	UnaryOperator	*
>6671	Callee	sound -> stopSfx
>6672	PtrMemberAccess	sound -> stopSfx
>6673	Identifier	stopSfx
>6674	Identifier	sound
>6675	Condition	 
>6676	CallExpression	activeSounds . size ( )
>6677	ArgumentList	 
>6678	Callee	activeSounds . size
>6679	MemberAccess	activeSounds . size
>6680	Identifier	size
>6681	Identifier	activeSounds
>6692	FunctionDef	SoundHolder 
>6693	ParameterList	void * channel
>6694	Parameter	 
>6695	Identifier	channel
>6696	ParameterType	void *
>6697	ReturnType	void
>6698	CompoundStatement	 
>6699	ExpressionStatement	 
>6700	CallExpression	activeSounds . erase ( channel )
>6701	ArgumentList	channel
>6702	Argument	channel
>6703	Identifier	channel
>6704	Callee	activeSounds . erase
>6705	MemberAccess	activeSounds . erase
>6706	Identifier	erase
>6707	Identifier	activeSounds
>6708	ExpressionStatement	 
>6709	CallExpression	pChannel -> setCallback ( NULL )
>6710	ArgumentList	NULL
>6711	Argument	NULL
>6712	Identifier	NULL
>6713	Callee	pChannel -> setCallback
>6714	PtrMemberAccess	pChannel -> setCallback
>6715	Identifier	setCallback
>6716	Identifier	pChannel
>6717	ExpressionStatement	 
>6718	CallExpression	pChannel -> setUserData ( NULL )
>6719	ArgumentList	NULL
>6720	Argument	NULL
>6721	Identifier	NULL
>6722	Callee	pChannel -> setUserData
>6723	PtrMemberAccess	pChannel -> setUserData
>6724	Identifier	setUserData
>6725	Identifier	pChannel
>6726	IdentifierDeclStatement	 
>6727	IdentifierDecl	* pChannel = ( FMOD 
>6728	AssignmentExpr	* pChannel = ( FMOD 
>6729	CastExpression	( FMOD 
>6730	Identifier	channel
>6731	CastTarget	FMOD 
>6732	Identifier	pChannel
>6733	Identifier	pChannel
>6734	IdentifierDeclType	FMOD 
>6742	FunctionDef	SoundHolder 
>6743	ParameterList	void * channel
>6744	Parameter	 
>6745	Identifier	channel
>6746	ParameterType	void *
>6747	ReturnType	void
>6748	CompoundStatement	 
>6749	ExpressionStatement	 
>6750	CallExpression	activeSounds . insert ( channel )
>6751	ArgumentList	channel
>6752	Argument	channel
>6753	Identifier	channel
>6754	Callee	activeSounds . insert
>6755	MemberAccess	activeSounds . insert
>6756	Identifier	insert
>6757	Identifier	activeSounds
>6758	ExpressionStatement	 
>6759	CallExpression	pChannel -> setCallback ( s_soundHolderCallback )
>6760	ArgumentList	s_soundHolderCallback
>6761	Argument	s_soundHolderCallback
>6762	Identifier	s_soundHolderCallback
>6763	Callee	pChannel -> setCallback
>6764	PtrMemberAccess	pChannel -> setCallback
>6765	Identifier	setCallback
>6766	Identifier	pChannel
>6767	ExpressionStatement	 
>6768	CallExpression	pChannel -> setUserData ( this )
>6769	ArgumentList	this
>6770	Argument	this
>6771	Identifier	this
>6772	Callee	pChannel -> setUserData
>6773	PtrMemberAccess	pChannel -> setUserData
>6774	Identifier	setUserData
>6775	Identifier	pChannel
>6776	IdentifierDeclStatement	 
>6777	IdentifierDecl	* pChannel = ( FMOD 
>6778	AssignmentExpr	* pChannel = ( FMOD 
>6779	CastExpression	( FMOD 
>6780	Identifier	channel
>6781	CastTarget	FMOD 
>6782	Identifier	pChannel
>6783	Identifier	pChannel
>6784	IdentifierDeclType	FMOD 
>6785	IfStatement	if ( ! channel )
>6786	ReturnStatement	 
>6787	Condition	 
>6788	UnaryOp	! channel
>6789	Identifier	channel
>6790	UnaryOperator	!
>6799	FunctionDef	SoundHolder 
>6800	ParameterList	 
>6801	ReturnType	void
>6802	CompoundStatement	 
>6803	WhileStatement	while ( activeSounds . size ( ) )
>6804	ExpressionStatement	 
>6805	CallExpression	unlinkSound ( * activeSounds . begin ( ) )
>6806	ArgumentList	* activeSounds . begin ( )
>6807	Argument	* activeSounds . begin ( )
>6808	UnaryOp	* activeSounds . begin ( )
>6809	CallExpression	activeSounds . begin ( )
>6810	ArgumentList	 
>6811	Callee	activeSounds . begin
>6812	MemberAccess	activeSounds . begin
>6813	Identifier	begin
>6814	Identifier	activeSounds
>6815	UnaryOperator	*
>6816	Callee	unlinkSound
>6817	Identifier	unlinkSound
>6818	Condition	 
>6819	CallExpression	activeSounds . size ( )
>6820	ArgumentList	 
>6821	Callee	activeSounds . size
>6822	MemberAccess	activeSounds . size
>6823	Identifier	size
>6824	Identifier	activeSounds
<52=54,53
<80=86,85,81
<81=82
<82=84,83
<86=136,96,87
<87=88
<88=92,89
<89=90
<90=91
<92=93
<93=95,94
<96=127,97
<97=98
<98=117,105,99
<99=100
<100=101
<101=102
<102=104,103
<105=106
<106=107
<107=116,108
<108=112,109
<109=110
<110=111
<112=113
<113=115,114
<117=118
<118=122,119
<119=121,120
<122=124,123
<124=126,125
<127=128
<128=135,129
<129=131,130
<131=132
<132=134,133
<136=137
<137=147,146,138
<138=145,139
<139=141,140
<141=142
<142=144,143
<160=178,177,161
<161=174,171,168,165,162
<162=164,163
<165=167,166
<168=170,169
<171=173,172
<174=176,175
<178=181,179
<179=180
<181=257,182
<182=243,236,229,205,197,189,183
<183=184
<184=186,185
<186=188,187
<189=190
<190=194,191
<191=193,192
<194=196,195
<197=198
<198=202,199
<199=201,200
<202=204,203
<205=216,206
<206=209,207
<207=208
<209=210
<210=214,211
<211=212
<212=213
<214=215
<216=217
<217=219,218
<219=227,220
<220=225,221
<221=222
<222=224,223
<225=226
<227=228
<229=230
<230=235,234,231
<231=233,232
<236=239,237
<237=238
<239=240
<240=242,241
<243=244
<244=256,255,245
<245=254,246
<246=252,247
<247=250,248
<248=249
<250=251
<252=253
<257=258
<277=286,285,278
<278=282,279
<279=281,280
<282=284,283
<286=298,289,287
<287=288
<289=290
<290=296,291
<291=292
<292=293
<293=295,294
<296=297
<298=302,299
<299=300
<300=301
<302=303
<303=305,304
<313=331,330,314
<314=327,324,321,318,315
<315=317,316
<318=320,319
<321=323,322
<324=326,325
<327=329,328
<331=369,334,332
<332=333
<334=367,335
<335=346,336
<336=340,337
<337=338
<338=339
<340=341
<341=343,342
<343=345,344
<346=347
<347=364,348
<348=363,349
<349=361,350
<350=359,357,355,351
<351=352
<352=354,353
<355=356
<357=358
<359=360
<361=362
<364=366,365
<367=368
<369=373,370
<370=371
<371=372
<373=374
<374=376,375
<390=402,401,391
<391=398,395,392
<392=394,393
<395=397,396
<398=400,399
<402=418,405,403
<403=404
<405=406
<406=416,407
<407=412,410,408
<408=409
<410=411
<412=413
<413=415,414
<416=417
<418=422,419
<419=420
<420=421
<422=423
<423=425,424
<435=438,437,436
<438=559,552,541,536,529,518,513,506,495,490,483,472,467,460,451,446,439
<439=440
<440=444,441
<441=442
<442=443
<444=445
<446=447
<447=449,448
<449=450
<451=452
<452=459,453
<453=455,454
<455=456
<456=458,457
<460=461
<461=465,462
<462=463
<463=464
<465=466
<467=468
<468=470,469
<470=471
<472=473
<473=482,474
<474=478,475
<475=476
<476=477
<478=479
<479=481,480
<483=484
<484=488,485
<485=486
<486=487
<488=489
<490=491
<491=493,492
<493=494
<495=496
<496=505,497
<497=501,498
<498=499
<499=500
<501=502
<502=504,503
<506=507
<507=511,508
<508=509
<509=510
<511=512
<513=514
<514=516,515
<516=517
<518=519
<519=528,520
<520=524,521
<521=522
<522=523
<524=525
<525=527,526
<529=530
<530=534,531
<531=532
<532=533
<534=535
<536=537
<537=539,538
<539=540
<541=542
<542=551,543
<543=547,544
<544=545
<545=546
<547=548
<548=550,549
<552=553
<553=557,554
<554=555
<555=556
<557=558
<559=560
<560=564,561
<561=562
<562=563
<564=565
<586=589,588,587
<589=710,703,692,687,680,669,664,657,646,641,634,623,618,611,602,597,590
<590=591
<591=595,592
<592=593
<593=594
<595=596
<597=598
<598=600,599
<600=601
<602=603
<603=610,604
<604=606,605
<606=607
<607=609,608
<611=612
<612=616,613
<613=614
<614=615
<616=617
<618=619
<619=621,620
<621=622
<623=624
<624=633,625
<625=629,626
<626=627
<627=628
<629=630
<630=632,631
<634=635
<635=639,636
<636=637
<637=638
<639=640
<641=642
<642=644,643
<644=645
<646=647
<647=656,648
<648=652,649
<649=650
<650=651
<652=653
<653=655,654
<657=658
<658=662,659
<659=660
<660=661
<662=663
<664=665
<665=667,666
<667=668
<669=670
<670=679,671
<671=675,672
<672=673
<673=674
<675=676
<676=678,677
<680=681
<681=685,682
<682=683
<683=684
<685=686
<687=688
<688=690,689
<690=691
<692=693
<693=702,694
<694=698,695
<695=696
<696=697
<698=699
<699=701,700
<703=704
<704=708,705
<705=706
<706=707
<708=709
<710=711
<711=715,712
<712=713
<713=714
<715=716
<737=743,742,738
<738=739
<739=741,740
<743=755,748,744
<744=745
<745=747,746
<748=749
<749=753,750
<750=751
<751=752
<753=754
<755=756
<756=761,760,757
<757=759,758
<770=779,778,771
<771=775,772
<772=774,773
<775=777,776
<779=780
<780=781
<781=787,782
<782=785,783
<783=784
<785=786
<787=788
<794=799,795
<795=796
<796=798,797
<799=1470,1466,1462,1458,1445,1432,1428,1424,1420,1413,800,808,812,819,821,822,826,896,907,922,929,940,955,962,970,983,990,998,1013,1020,1028,1043,1050,1058,1073,1080,1088,1107,1114,1125,1187,1202,1209,1243,1250,1258,1269,1276,1284,1307,1314,1347,1355,1368,1375,1383,1394,1401,1405,1409
<800=806,801
<801=802
<802=803
<803=805,804
<806=807
<808=809
<809=811,810
<812=813
<813=817,814
<814=815
<815=816
<817=818
<819=820
<822=823
<823=825,824
<826=894,827
<827=883,872,861,850,839,828
<828=829
<829=835,830
<830=833,831
<831=832
<833=834
<835=836
<836=838,837
<839=840
<840=846,841
<841=844,842
<842=843
<844=845
<846=847
<847=849,848
<850=851
<851=857,852
<852=855,853
<853=854
<855=856
<857=858
<858=860,859
<861=862
<862=868,863
<863=866,864
<864=865
<866=867
<868=869
<869=871,870
<872=873
<873=879,874
<874=877,875
<875=876
<877=878
<879=880
<880=882,881
<883=884
<884=890,885
<885=888,886
<886=887
<888=889
<890=891
<891=893,892
<894=895
<896=902,897
<897=898
<898=899
<899=901,900
<902=903
<903=905,904
<905=906
<907=908
<908=921,909
<909=917,910
<910=915,911
<911=912
<912=914,913
<915=916
<917=918
<918=920,919
<922=923
<923=927,924
<924=925
<925=926
<927=928
<929=935,930
<930=931
<931=932
<932=934,933
<935=936
<936=938,937
<938=939
<940=941
<941=954,942
<942=950,943
<943=948,944
<944=945
<945=947,946
<948=949
<950=951
<951=953,952
<955=956
<956=960,957
<957=958
<958=959
<960=961
<962=965,963
<963=964
<965=966
<966=968,967
<968=969
<970=971
<971=982,972
<972=978,973
<973=974
<974=975
<975=977,976
<978=979
<979=981,980
<983=984
<984=988,985
<985=986
<986=987
<988=989
<990=993,991
<991=992
<993=994
<994=996,995
<996=997
<998=999
<999=1012,1000
<1000=1008,1001
<1001=1006,1002
<1002=1003
<1003=1005,1004
<1006=1007
<1008=1009
<1009=1011,1010
<1013=1014
<1014=1018,1015
<1015=1016
<1016=1017
<1018=1019
<1020=1023,1021
<1021=1022
<1023=1024
<1024=1026,1025
<1026=1027
<1028=1029
<1029=1042,1030
<1030=1038,1031
<1031=1036,1032
<1032=1033
<1033=1035,1034
<1036=1037
<1038=1039
<1039=1041,1040
<1043=1044
<1044=1048,1045
<1045=1046
<1046=1047
<1048=1049
<1050=1053,1051
<1051=1052
<1053=1054
<1054=1056,1055
<1056=1057
<1058=1059
<1059=1072,1060
<1060=1068,1061
<1061=1066,1062
<1062=1063
<1063=1065,1064
<1066=1067
<1068=1069
<1069=1071,1070
<1073=1074
<1074=1078,1075
<1075=1076
<1076=1077
<1078=1079
<1080=1083,1081
<1081=1082
<1083=1084
<1084=1086,1085
<1086=1087
<1088=1089
<1089=1106,1090
<1090=1102,1091
<1091=1100,1098,1096,1094,1092
<1092=1093
<1094=1095
<1096=1097
<1098=1099
<1100=1101
<1102=1103
<1103=1105,1104
<1107=1108
<1108=1112,1109
<1109=1110
<1110=1111
<1112=1113
<1114=1115
<1115=1121,1116
<1116=1117
<1117=1118
<1118=1120,1119
<1121=1122
<1122=1124,1123
<1125=1183,1126
<1126=1176,1165,1157,1150,1135,1127
<1127=1130,1128
<1128=1129
<1130=1131
<1131=1133,1132
<1133=1134
<1135=1136
<1136=1149,1137
<1137=1145,1138
<1138=1143,1141,1139
<1139=1140
<1141=1142
<1143=1144
<1145=1146
<1146=1148,1147
<1150=1151
<1151=1155,1152
<1152=1153
<1153=1154
<1155=1156
<1157=1160,1158
<1158=1159
<1160=1161
<1161=1163,1162
<1163=1164
<1165=1166
<1166=1175,1167
<1167=1171,1168
<1168=1169
<1169=1170
<1171=1172
<1172=1174,1173
<1176=1177
<1177=1181,1178
<1178=1179
<1179=1180
<1181=1182
<1183=1184
<1184=1186,1185
<1187=1188
<1188=1201,1189
<1189=1197,1190
<1190=1195,1193,1191
<1191=1192
<1193=1194
<1195=1196
<1197=1198
<1198=1200,1199
<1202=1203
<1203=1207,1204
<1204=1205
<1205=1206
<1207=1208
<1209=1239,1210
<1210=1232,1219,1211
<1211=1214,1212
<1212=1213
<1214=1215
<1215=1217,1216
<1217=1218
<1219=1220
<1220=1231,1221
<1221=1227,1222
<1222=1225,1223
<1223=1224
<1225=1226
<1227=1228
<1228=1230,1229
<1232=1233
<1233=1237,1234
<1234=1235
<1235=1236
<1237=1238
<1239=1240
<1240=1242,1241
<1243=1244
<1244=1248,1245
<1245=1246
<1246=1247
<1248=1249
<1250=1253,1251
<1251=1252
<1253=1254
<1254=1256,1255
<1256=1257
<1258=1259
<1259=1268,1260
<1260=1264,1261
<1261=1262
<1262=1263
<1264=1265
<1265=1267,1266
<1269=1270
<1270=1274,1271
<1271=1272
<1272=1273
<1274=1275
<1276=1279,1277
<1277=1278
<1279=1280
<1280=1282,1281
<1282=1283
<1284=1285
<1285=1306,1286
<1286=1302,1287
<1287=1300,1296,1294,1292,1288
<1288=1289
<1289=1291,1290
<1292=1293
<1294=1295
<1296=1297
<1297=1299,1298
<1300=1301
<1302=1303
<1303=1305,1304
<1307=1308
<1308=1312,1309
<1309=1310
<1310=1311
<1312=1313
<1314=1343,1315
<1315=1338,1325,1318,1316
<1316=1317
<1318=1319
<1319=1323,1320
<1320=1321
<1321=1322
<1323=1324
<1325=1326
<1326=1336,1327
<1327=1334,1332,1330,1328
<1328=1329
<1330=1331
<1332=1333
<1334=1335
<1336=1337
<1338=1339
<1339=1342,1341,1340
<1343=1344
<1344=1346,1345
<1347=1350,1348
<1348=1349
<1350=1351
<1351=1353,1352
<1353=1354
<1355=1356
<1356=1367,1357
<1357=1363,1358
<1358=1359
<1359=1360
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1368=1369
<1369=1373,1370
<1370=1371
<1371=1372
<1373=1374
<1375=1378,1376
<1376=1377
<1378=1379
<1379=1381,1380
<1381=1382
<1383=1384
<1384=1393,1385
<1385=1391,1386
<1386=1387
<1387=1388
<1388=1390,1389
<1391=1392
<1394=1395
<1395=1399,1396
<1396=1397
<1397=1398
<1399=1400
<1401=1402
<1402=1404,1403
<1405=1406
<1406=1408,1407
<1409=1410
<1410=1412,1411
<1413=1414
<1414=1419,1418,1415
<1415=1417,1416
<1420=1421
<1421=1423,1422
<1424=1425
<1425=1427,1426
<1428=1429
<1429=1431,1430
<1432=1433
<1433=1444,1434
<1434=1442,1435
<1435=1440,1438,1436
<1436=1437
<1438=1439
<1440=1441
<1442=1443
<1445=1446
<1446=1457,1447
<1447=1455,1448
<1448=1453,1451,1449
<1449=1450
<1451=1452
<1453=1454
<1455=1456
<1458=1459
<1459=1461,1460
<1462=1463
<1463=1465,1464
<1466=1467
<1467=1469,1468
<1470=1471
<1471=1475,1472
<1472=1474,1473
<1543=1552,1551,1544
<1544=1548,1545
<1545=1547,1546
<1548=1550,1549
<1552=1615,1608,1553
<1553=1606,1554
<1554=1604,1556,1555
<1556=1602,1557
<1557=1591,1558
<1558=1585,1574,1559
<1559=1560
<1560=1568,1561
<1561=1562
<1562=1564,1563
<1564=1565
<1565=1567,1566
<1568=1569
<1569=1571,1570
<1571=1573,1572
<1574=1575
<1575=1581,1576
<1576=1579,1577
<1577=1578
<1579=1580
<1581=1582
<1582=1584,1583
<1585=1586
<1586=1590,1587
<1587=1589,1588
<1591=1592
<1592=1598,1593
<1593=1594
<1594=1595
<1595=1597,1596
<1598=1599
<1599=1601,1600
<1602=1603
<1604=1605
<1606=1607
<1608=1609
<1609=1614,1613,1610
<1610=1612,1611
<1615=1617,1616
<1617=1618
<1618=1620,1619
<1632=1635,1634,1633
<1635=1766,1744,1728,1719,1705,1696,1682,1673,1659,1643,1636
<1636=1637
<1637=1639,1638
<1639=1640
<1640=1642,1641
<1643=1644
<1644=1658,1645
<1645=1657,1646
<1646=1656,1647
<1647=1655,1648
<1648=1654,1649
<1649=1653,1650
<1650=1652,1651
<1659=1671,1660
<1660=1661
<1661=1667,1662
<1662=1663
<1663=1664
<1664=1666,1665
<1667=1668
<1668=1670,1669
<1671=1672
<1673=1674
<1674=1681,1680,1675
<1675=1679,1676
<1676=1678,1677
<1682=1694,1683
<1683=1684
<1684=1690,1685
<1685=1686
<1686=1687
<1687=1689,1688
<1690=1691
<1691=1693,1692
<1694=1695
<1696=1697
<1697=1704,1703,1698
<1698=1702,1699
<1699=1701,1700
<1705=1717,1706
<1706=1707
<1707=1713,1708
<1708=1709
<1709=1710
<1710=1712,1711
<1713=1714
<1714=1716,1715
<1717=1718
<1719=1720
<1720=1727,1726,1721
<1721=1725,1722
<1722=1724,1723
<1728=1729
<1729=1743,1730
<1730=1742,1731
<1731=1739,1732
<1732=1738,1733
<1733=1735,1734
<1735=1737,1736
<1739=1741,1740
<1744=1745
<1745=1765,1746
<1746=1764,1747
<1747=1761,1748
<1748=1760,1749
<1749=1757,1750
<1750=1756,1751
<1751=1755,1752
<1752=1754,1753
<1757=1759,1758
<1761=1763,1762
<1766=1767
<1767=1769,1768
<1787=1790,1789,1788
<1790=1791
<1791=1792
<1792=1794,1793
<1800=1803,1802,1801
<1803=1804
<1804=1805
<1805=1807,1806
<1813=1822,1821,1814
<1814=1818,1815
<1815=1817,1816
<1818=1820,1819
<1828=1834,1833,1829
<1829=1830
<1830=1832,1831
<1834=1835
<1835=1836
<1836=1838,1837
<1844=1853,1852,1845
<1845=1849,1846
<1846=1848,1847
<1849=1851,1850
<1853=1878,1854
<1854=1855
<1855=1874,1856
<1856=1859,1857
<1857=1858
<1859=1860
<1860=1872,1861
<1861=1868,1866,1862
<1862=1863
<1863=1865,1864
<1866=1867
<1868=1869
<1869=1871,1870
<1872=1873
<1874=1875
<1875=1877,1876
<1878=1881,1879
<1879=1880
<1881=1882
<1882=1902,1883
<1883=1899,1884
<1884=1890,1885
<1885=1887,1886
<1887=1889,1888
<1890=1892,1891
<1892=1894,1893
<1894=1896,1895
<1896=1898,1897
<1899=1901,1900
<1902=1904,1903
<1920=1926,1925,1921
<1921=1922
<1922=1924,1923
<1926=1927
<1927=1928
<1928=1932,1929
<1929=1930
<1930=1931
<1932=1933
<1938=1940,1939
<1940=2024,1955,1948,1941
<1941=1942
<1942=1944,1943
<1944=1945
<1945=1947,1946
<1948=1949
<1949=1951,1950
<1951=1952
<1952=1954,1953
<1955=2011,2002,1999,1956
<1956=1988,1977,1964,1957
<1957=1958
<1958=1960,1959
<1960=1961
<1961=1963,1962
<1964=1965
<1965=1976,1975,1966
<1966=1974,1967
<1967=1973,1968
<1968=1970,1969
<1970=1972,1971
<1977=1978
<1978=1986,1979
<1979=1980
<1980=1981
<1981=1985,1982
<1982=1984,1983
<1986=1987
<1988=1989
<1989=1998,1997,1990
<1990=1996,1991
<1991=1993,1992
<1993=1995,1994
<1999=2001,2000
<2002=2003
<2003=2010,2004
<2004=2006,2005
<2006=2007
<2007=2009,2008
<2011=2012
<2012=2013
<2013=2023,2022,2014
<2014=2021,2015
<2015=2017,2016
<2017=2018
<2018=2020,2019
<2024=2026,2025
<2026=2027
<2027=2029,2028
<2044=2047,2046,2045
<2047=2048
<2048=2056,2049
<2049=2050
<2050=2052,2051
<2052=2053
<2053=2055,2054
<2056=2057
<2062=2065,2064,2063
<2069=2072,2071,2070
<2072=2147,2137,2073
<2073=2128,2089,2074
<2074=2075
<2075=2080,2076
<2076=2077
<2077=2079,2078
<2080=2081
<2081=2087,2082
<2082=2085,2083
<2083=2084
<2085=2086
<2087=2088
<2089=2116,2099,2090
<2090=2091
<2091=2097,2092
<2092=2095,2093
<2093=2094
<2095=2096
<2097=2098
<2099=2107,2100
<2100=2101
<2101=2103,2102
<2103=2104
<2104=2106,2105
<2107=2108
<2108=2115,2109
<2109=2111,2110
<2111=2112
<2112=2114,2113
<2116=2117
<2117=2127,2126,2118
<2118=2125,2119
<2119=2121,2120
<2121=2122
<2122=2124,2123
<2128=2129
<2129=2136,2130
<2130=2132,2131
<2132=2133
<2133=2135,2134
<2137=2145,2138
<2138=2139
<2139=2141,2140
<2141=2142
<2142=2144,2143
<2145=2146
<2147=2148
<2148=2150,2149
<2150=2151
<2151=2153,2152
<2165=2168,2167,2166
<2168=2196,2189,2176,2171,2169
<2169=2170
<2171=2172
<2172=2174,2173
<2174=2175
<2176=2177
<2177=2188,2178
<2178=2184,2179
<2179=2180
<2180=2181
<2181=2183,2182
<2184=2185
<2185=2187,2186
<2189=2192,2190
<2190=2191
<2192=2193
<2193=2195,2194
<2196=2197
<2197=2202,2201,2198
<2198=2200,2199
<2214=2217,2216,2215
<2217=2265,2225,2218
<2218=2219
<2219=2221,2220
<2221=2222
<2222=2224,2223
<2225=2256,2253,2226
<2226=2242,2227
<2227=2238,2228
<2228=2229
<2229=2230
<2230=2232,2231
<2232=2233
<2233=2235,2234
<2235=2237,2236
<2238=2239
<2239=2241,2240
<2242=2243
<2243=2252,2251,2244
<2244=2250,2245
<2245=2249,2246
<2246=2248,2247
<2253=2255,2254
<2256=2257
<2257=2264,2258
<2258=2260,2259
<2260=2261
<2261=2263,2262
<2265=2266
<2266=2276,2275,2267
<2267=2274,2268
<2268=2270,2269
<2270=2271
<2271=2273,2272
<2289=2295,2294,2290
<2290=2291
<2291=2293,2292
<2295=2726,2717,2708,2699,2644,2601,2586,2514,2323,2316,2296
<2296=2307,2297
<2297=2303,2298
<2298=2299
<2299=2301,2300
<2301=2302
<2303=2304
<2304=2306,2305
<2307=2308
<2308=2315,2309
<2309=2314,2310
<2310=2312,2311
<2312=2313
<2316=2317
<2317=2319,2318
<2319=2320
<2320=2322,2321
<2323=2505,2324
<2324=2498,2325
<2325=2485,2476,2326
<2326=2472,2461,2447,2355,2331,2327
<2327=2328
<2328=2330,2329
<2331=2351,2332
<2332=2338,2333
<2333=2334
<2334=2336,2335
<2336=2337
<2338=2339
<2339=2345,2340
<2340=2341
<2341=2342
<2342=2344,2343
<2345=2346
<2346=2348,2347
<2348=2350,2349
<2351=2352
<2352=2354,2353
<2355=2441,2410,2356
<2356=2357
<2357=2358
<2358=2402,2359
<2359=2394,2383,2378,2372,2361,2360
<2361=2362
<2362=2371,2363
<2363=2367,2364
<2364=2365
<2365=2366
<2367=2368
<2368=2370,2369
<2372=2373
<2373=2375,2374
<2375=2377,2376
<2378=2379
<2379=2381,2380
<2381=2382
<2383=2384
<2384=2393,2385
<2385=2387,2386
<2387=2388
<2388=2390,2389
<2390=2392,2391
<2394=2395
<2395=2399,2396
<2396=2398,2397
<2399=2401,2400
<2402=2403
<2403=2407,2404
<2404=2406,2405
<2407=2409,2408
<2410=2411
<2411=2433,2412
<2412=2425,2414,2413
<2414=2415
<2415=2424,2416
<2416=2420,2417
<2417=2418
<2418=2419
<2420=2421
<2421=2423,2422
<2425=2426
<2426=2430,2427
<2427=2429,2428
<2430=2432,2431
<2433=2434
<2434=2438,2435
<2435=2437,2436
<2438=2440,2439
<2441=2442
<2442=2444,2443
<2444=2446,2445
<2447=2448
<2448=2458,2449
<2449=2457,2450
<2450=2454,2451
<2451=2453,2452
<2454=2456,2455
<2458=2460,2459
<2461=2462
<2462=2471,2470,2463
<2463=2469,2464
<2464=2468,2465
<2465=2467,2466
<2472=2473
<2473=2475,2474
<2476=2477
<2477=2484,2478
<2478=2480,2479
<2480=2481
<2481=2483,2482
<2485=2486
<2486=2487
<2487=2497,2496,2488
<2488=2495,2489
<2489=2491,2490
<2491=2492
<2492=2494,2493
<2498=2499
<2499=2504,2503,2500
<2500=2502,2501
<2505=2506
<2506=2513,2507
<2507=2509,2508
<2509=2510
<2510=2512,2511
<2514=2584,2515
<2515=2580,2571,2558,2516
<2516=2554,2517
<2517=2545,2540,2531,2526,2522,2518
<2518=2519
<2519=2521,2520
<2522=2523
<2523=2525,2524
<2526=2527
<2527=2529,2528
<2529=2530
<2531=2532
<2532=2539,2533
<2533=2535,2534
<2535=2536
<2536=2538,2537
<2540=2541
<2541=2543,2542
<2543=2544
<2545=2546
<2546=2553,2547
<2547=2549,2548
<2549=2550
<2550=2552,2551
<2554=2555
<2555=2557,2556
<2558=2559
<2559=2567,2560
<2560=2561
<2561=2562
<2562=2564,2563
<2564=2566,2565
<2567=2568
<2568=2570,2569
<2571=2576,2572
<2572=2573
<2573=2575,2574
<2576=2577
<2577=2579,2578
<2580=2581
<2581=2583,2582
<2584=2585
<2586=2599,2587
<2587=2588
<2588=2589
<2589=2595,2590
<2590=2591
<2591=2592
<2592=2594,2593
<2595=2596
<2596=2598,2597
<2599=2600
<2601=2642,2602
<2602=2627,2622,2603
<2603=2614,2604
<2604=2609,2605
<2605=2606
<2606=2608,2607
<2609=2610
<2610=2612,2611
<2612=2613
<2614=2615
<2615=2617,2616
<2617=2619,2618
<2619=2621,2620
<2622=2623
<2623=2625,2624
<2625=2626
<2627=2628
<2628=2641,2629
<2629=2637,2630
<2630=2631
<2631=2632
<2632=2634,2633
<2634=2636,2635
<2637=2638
<2638=2640,2639
<2642=2643
<2644=2697,2645
<2645=2646
<2646=2690,2647
<2647=2648
<2648=2679,2656,2649
<2649=2650
<2650=2651
<2651=2652
<2652=2654,2653
<2654=2655
<2656=2672,2657
<2657=2658
<2658=2670,2659
<2659=2668,2666,2664,2662,2660
<2660=2661
<2662=2663
<2664=2665
<2666=2667
<2668=2669
<2670=2671
<2672=2673
<2673=2677,2674
<2674=2675
<2675=2676
<2677=2678
<2679=2680
<2680=2687,2681
<2681=2683,2682
<2683=2684
<2684=2686,2685
<2687=2689,2688
<2690=2691
<2691=2696,2692
<2692=2694,2693
<2694=2695
<2697=2698
<2699=2700
<2700=2704,2701
<2701=2702
<2702=2703
<2704=2705
<2705=2707,2706
<2708=2709
<2709=2713,2710
<2710=2711
<2711=2712
<2713=2714
<2714=2716,2715
<2717=2718
<2718=2725,2719
<2719=2721,2720
<2721=2722
<2722=2724,2723
<2726=2728,2727
<2728=2729
<2729=2731,2730
<2731=2732
<2790=2799,2798,2791
<2791=2795,2792
<2792=2794,2793
<2795=2797,2796
<2799=2800
<2800=2883,2801
<2801=2881,2822,2821,2819,2810,2806,2805,2803,2802
<2803=2804
<2806=2807
<2807=2809,2808
<2810=2811
<2811=2817,2812
<2812=2815,2813
<2813=2814
<2815=2816
<2817=2818
<2819=2820
<2822=2851,2847,2843,2839,2835,2829,2823
<2823=2824
<2824=2828,2825
<2825=2827,2826
<2829=2830
<2830=2834,2831
<2831=2833,2832
<2835=2836
<2836=2838,2837
<2839=2840
<2840=2842,2841
<2843=2844
<2844=2846,2845
<2847=2848
<2848=2850,2849
<2851=2879,2852
<2852=2872,2857,2853
<2853=2854
<2854=2856,2855
<2857=2870,2858
<2858=2863,2859
<2859=2860
<2860=2862,2861
<2863=2864
<2864=2866,2865
<2866=2867
<2867=2869,2868
<2870=2871
<2872=2873
<2873=2875,2874
<2875=2876
<2876=2878,2877
<2879=2880
<2881=2882
<2883=2884
<2901=2904,2903,2902
<2904=2911,2907,2905
<2905=2906
<2907=2908
<2908=2910,2909
<2911=2933,2912
<2912=2926,2915,2913
<2913=2914
<2915=2916
<2916=2922,2917
<2917=2918
<2918=2919
<2919=2921,2920
<2922=2923
<2923=2925,2924
<2926=2927
<2927=2932,2931,2928
<2928=2930,2929
<2933=2934
<2943=2949,2948,2944
<2944=2945
<2945=2947,2946
<2949=2966,2955,2950
<2950=2951
<2951=2953,2952
<2953=2954
<2955=2956
<2956=2965,2957
<2957=2961,2958
<2958=2959
<2959=2960
<2961=2962
<2962=2964,2963
<2966=2967
<2967=2969,2968
<2969=2971,2970
<2982=2988,2987,2983
<2983=2984
<2984=2986,2985
<2988=2989
<2989=2990
<2990=2992,2991
<2998=3001,3000,2999
<3001=3002
<3002=3003
<3008=3014,3013,3009
<3009=3010
<3010=3012,3011
<3014=3031,3020,3015
<3015=3016
<3016=3018,3017
<3018=3019
<3020=3021
<3021=3030,3022
<3022=3026,3023
<3023=3024
<3024=3025
<3026=3027
<3027=3029,3028
<3031=3032
<3032=3034,3033
<3034=3036,3035
<3047=3050,3049,3048
<3050=3053,3051
<3051=3052
<3053=3110,3054
<3054=3103,3090,3066,3057,3055
<3055=3056
<3057=3062,3058
<3058=3059
<3059=3061,3060
<3062=3063
<3063=3065,3064
<3066=3086,3074,3067
<3067=3068
<3068=3069
<3069=3070
<3070=3072,3071
<3072=3073
<3074=3082,3075
<3075=3076
<3076=3080,3077
<3077=3078
<3078=3079
<3080=3081
<3082=3083
<3083=3085,3084
<3086=3087
<3087=3089,3088
<3090=3091
<3091=3102,3092
<3092=3098,3093
<3093=3094
<3094=3095
<3095=3097,3096
<3098=3099
<3099=3101,3100
<3103=3104
<3104=3109,3108,3105
<3105=3107,3106
<3110=3111
<3123=3129,3128,3124
<3124=3125
<3125=3127,3126
<3134=3146,3145,3135
<3135=3142,3139,3136
<3136=3138,3137
<3139=3141,3140
<3142=3144,3143
<3146=3761,3754,3747,3743,3736,3685,3631,3624,3617,3554,3149,3147
<3147=3148
<3149=3552,3150
<3150=3543,3536,3488,3481,3473,3449,3438,3171,3167,3160,3151
<3151=3152
<3152=3156,3153
<3153=3154
<3154=3155
<3156=3157
<3157=3159,3158
<3160=3161
<3161=3163,3162
<3163=3164
<3164=3166,3165
<3167=3168
<3168=3170,3169
<3171=3436,3172
<3172=3331,3312,3307,3296,3291,3267,3256,3251,3242,3233,3224,3213,3204,3193,3182,3177,3173
<3173=3174
<3174=3176,3175
<3177=3178
<3178=3180,3179
<3180=3181
<3182=3183
<3183=3192,3184
<3184=3188,3185
<3185=3186
<3186=3187
<3188=3189
<3189=3191,3190
<3193=3194
<3194=3202,3195
<3195=3200,3198,3196
<3196=3197
<3198=3199
<3200=3201
<3202=3203
<3204=3205
<3205=3211,3206
<3206=3209,3207
<3207=3208
<3209=3210
<3211=3212
<3213=3214
<3214=3220,3215
<3215=3218,3216
<3216=3217
<3218=3219
<3220=3221
<3221=3223,3222
<3224=3225
<3225=3229,3226
<3226=3227
<3227=3228
<3229=3230
<3230=3232,3231
<3233=3234
<3234=3238,3235
<3235=3236
<3236=3237
<3238=3239
<3239=3241,3240
<3242=3243
<3243=3247,3244
<3244=3245
<3245=3246
<3247=3248
<3248=3250,3249
<3251=3252
<3252=3254,3253
<3254=3255
<3256=3257
<3257=3266,3258
<3258=3262,3259
<3259=3260
<3260=3261
<3262=3263
<3263=3265,3264
<3267=3285,3268
<3268=3274,3269
<3269=3270
<3270=3272,3271
<3272=3273
<3274=3275
<3275=3284,3276
<3276=3280,3277
<3277=3278
<3278=3279
<3280=3281
<3281=3283,3282
<3285=3286
<3286=3290,3287
<3287=3289,3288
<3291=3292
<3292=3294,3293
<3294=3295
<3296=3297
<3297=3306,3298
<3298=3302,3299
<3299=3300
<3300=3301
<3302=3303
<3303=3305,3304
<3307=3308
<3308=3310,3309
<3310=3311
<3312=3313
<3313=3330,3314
<3314=3326,3315
<3315=3324,3322,3320,3316
<3316=3317
<3317=3319,3318
<3320=3321
<3322=3323
<3324=3325
<3326=3327
<3327=3329,3328
<3331=3427,3332
<3332=3411,3333
<3333=3409,3334
<3334=3402,3389,3384,3335
<3335=3378,3359,3336
<3336=3337
<3337=3353,3338
<3338=3344,3339
<3339=3340
<3340=3342,3341
<3342=3343
<3344=3345
<3345=3352,3346
<3346=3348,3347
<3348=3349
<3349=3351,3350
<3353=3354
<3354=3358,3355
<3355=3357,3356
<3359=3365,3360
<3360=3361
<3361=3363,3362
<3363=3364
<3365=3366
<3366=3377,3367
<3367=3373,3368
<3368=3371,3369
<3369=3370
<3371=3372
<3373=3374
<3374=3376,3375
<3378=3379
<3379=3381,3380
<3381=3383,3382
<3384=3385
<3385=3387,3386
<3387=3388
<3389=3390
<3390=3401,3391
<3391=3397,3392
<3392=3393
<3393=3394
<3394=3396,3395
<3397=3398
<3398=3400,3399
<3402=3403
<3403=3408,3407,3404
<3404=3406,3405
<3409=3410
<3411=3412
<3412=3426,3425,3413
<3413=3424,3414
<3414=3416,3415
<3416=3420,3417
<3417=3418
<3418=3419
<3420=3421
<3421=3423,3422
<3427=3428
<3428=3435,3429
<3429=3431,3430
<3431=3432
<3432=3434,3433
<3436=3437
<3438=3444,3439
<3439=3440
<3440=3441
<3441=3443,3442
<3444=3445
<3445=3447,3446
<3447=3448
<3449=3450
<3450=3472,3451
<3451=3468,3452
<3452=3461,3459,3457,3453
<3453=3454
<3454=3456,3455
<3457=3458
<3459=3460
<3461=3462
<3462=3464,3463
<3464=3465
<3465=3467,3466
<3468=3469
<3469=3471,3470
<3473=3474
<3474=3480,3475
<3475=3479,3476
<3476=3478,3477
<3481=3482
<3482=3487,3486,3483
<3483=3485,3484
<3488=3530,3510,3489
<3489=3490
<3490=3491
<3491=3506,3492
<3492=3497,3493
<3493=3494
<3494=3496,3495
<3497=3498
<3498=3504,3499
<3499=3502,3500
<3500=3501
<3502=3503
<3504=3505
<3506=3507
<3507=3509,3508
<3510=3511
<3511=3526,3512
<3512=3517,3513
<3513=3514
<3514=3516,3515
<3517=3518
<3518=3524,3519
<3519=3522,3520
<3520=3521
<3522=3523
<3524=3525
<3526=3527
<3527=3529,3528
<3530=3531
<3531=3535,3532
<3532=3534,3533
<3536=3537
<3537=3541,3538
<3538=3539
<3539=3540
<3541=3542
<3543=3550,3544
<3544=3545
<3545=3546
<3546=3548,3547
<3548=3549
<3550=3551
<3552=3553
<3554=3615,3555
<3555=3613,3573,3572,3570,3560,3559,3557,3556
<3557=3558
<3560=3565,3561
<3561=3562
<3562=3564,3563
<3565=3566
<3566=3568,3567
<3568=3569
<3570=3571
<3573=3574
<3574=3608,3581,3575
<3575=3576
<3576=3577
<3577=3578
<3578=3580,3579
<3581=3582
<3582=3592,3583
<3583=3584
<3584=3588,3585
<3585=3586
<3586=3587
<3588=3589
<3589=3591,3590
<3592=3593
<3593=3602,3594
<3594=3596,3595
<3596=3598,3597
<3598=3599
<3599=3601,3600
<3602=3604,3603
<3604=3605
<3605=3607,3606
<3608=3609
<3609=3611,3610
<3611=3612
<3613=3614
<3615=3616
<3617=3618
<3618=3622,3619
<3619=3620
<3620=3621
<3622=3623
<3624=3625
<3625=3630,3629,3626
<3626=3628,3627
<3631=3683,3632
<3632=3675,3666,3655,3633
<3633=3646,3634
<3634=3635
<3635=3636
<3636=3644,3637
<3637=3638
<3638=3639
<3639=3643,3640
<3640=3642,3641
<3644=3645
<3646=3647
<3647=3654,3648
<3648=3652,3649
<3649=3650
<3650=3651
<3652=3653
<3655=3656
<3656=3665,3657
<3657=3661,3658
<3658=3659
<3659=3660
<3661=3662
<3662=3664,3663
<3666=3667
<3667=3674,3668
<3668=3672,3669
<3669=3670
<3670=3671
<3672=3673
<3675=3676
<3676=3682,3677
<3677=3681,3678
<3678=3680,3679
<3683=3684
<3685=3727,3686
<3686=3719,3710,3699,3687
<3687=3692,3688
<3688=3689
<3689=3691,3690
<3692=3693
<3693=3697,3694
<3694=3695
<3695=3696
<3697=3698
<3699=3700
<3700=3709,3701
<3701=3705,3702
<3702=3703
<3703=3704
<3705=3706
<3706=3708,3707
<3710=3711
<3711=3718,3712
<3712=3716,3713
<3713=3714
<3714=3715
<3716=3717
<3719=3720
<3720=3726,3721
<3721=3725,3722
<3722=3724,3723
<3727=3728
<3728=3735,3729
<3729=3731,3730
<3731=3732
<3732=3734,3733
<3736=3737
<3737=3741,3738
<3738=3739
<3739=3740
<3741=3742
<3743=3744
<3744=3746,3745
<3747=3751,3748
<3748=3750,3749
<3751=3753,3752
<3754=3755
<3755=3760,3759,3756
<3756=3758,3757
<3761=3764,3762
<3762=3763
<3764=3765
<3765=3767,3766
<3837=3846,3845,3838
<3838=3842,3839
<3839=3841,3840
<3842=3844,3843
<3852=3855,3854,3853
<3855=3858,3856
<3856=3857
<3858=3886,3859
<3859=3882,3869,3860
<3860=3861
<3861=3863,3862
<3863=3867,3864
<3864=3865
<3865=3866
<3867=3868
<3869=3870
<3870=3878,3871
<3871=3874,3872
<3872=3873
<3874=3875
<3875=3877,3876
<3878=3879
<3879=3881,3880
<3882=3883
<3883=3885,3884
<3886=3887
<3887=3889,3888
<3889=3890
<3900=3906,3905,3901
<3901=3902
<3902=3904,3903
<3906=4272,4265,4258,4219,4212,4193,4188,4181,4170,4165,4146,4141,4050,4041,4032,4023,4014,4005,3996,3987,3953,3942,3927,3916,3911,3909,3907
<3907=3908
<3909=3910
<3911=3912
<3912=3914,3913
<3914=3915
<3916=3917
<3917=3926,3918
<3918=3922,3919
<3919=3920
<3920=3921
<3922=3923
<3923=3925,3924
<3927=3928
<3928=3940,3929
<3929=3938,3934,3930
<3930=3931
<3931=3933,3932
<3934=3935
<3935=3937,3936
<3938=3939
<3940=3941
<3942=3943
<3943=3951,3944
<3944=3949,3945
<3945=3946
<3946=3948,3947
<3949=3950
<3951=3952
<3953=3979,3966,3954
<3954=3955
<3955=3956
<3956=3962,3957
<3957=3960,3958
<3958=3959
<3960=3961
<3962=3963
<3963=3965,3964
<3966=3967
<3967=3975,3968
<3968=3971,3969
<3969=3970
<3971=3972
<3972=3974,3973
<3975=3976
<3976=3978,3977
<3979=3980
<3980=3984,3981
<3981=3983,3982
<3984=3986,3985
<3987=3992,3988
<3988=3989
<3989=3991,3990
<3992=3993
<3993=3995,3994
<3996=3997
<3997=4004,4003,3998
<3998=4002,3999
<3999=4001,4000
<4005=4006
<4006=4010,4007
<4007=4008
<4008=4009
<4010=4011
<4011=4013,4012
<4014=4015
<4015=4019,4016
<4016=4017
<4017=4018
<4019=4020
<4020=4022,4021
<4023=4024
<4024=4028,4025
<4025=4026
<4026=4027
<4028=4029
<4029=4031,4030
<4032=4037,4033
<4033=4034
<4034=4036,4035
<4037=4038
<4038=4040,4039
<4041=4042
<4042=4049,4048,4043
<4043=4047,4044
<4044=4046,4045
<4050=4135,4071,4051
<4051=4052
<4052=4058,4053
<4053=4054
<4054=4056,4055
<4056=4057
<4058=4059
<4059=4070,4060
<4060=4066,4061
<4061=4062
<4062=4063
<4063=4065,4064
<4066=4067
<4067=4069,4068
<4071=4124,4119,4115,4109,4103,4093,4087,4079,4072
<4072=4073
<4073=4077,4074
<4074=4075
<4075=4076
<4077=4078
<4079=4080
<4080=4084,4081
<4081=4083,4082
<4084=4086,4085
<4087=4088
<4088=4090,4089
<4090=4092,4091
<4093=4094
<4094=4100,4095
<4095=4099,4096
<4096=4098,4097
<4100=4102,4101
<4103=4104
<4104=4106,4105
<4106=4108,4107
<4109=4110
<4110=4112,4111
<4112=4114,4113
<4115=4116
<4116=4118,4117
<4119=4120
<4120=4122,4121
<4122=4123
<4124=4125
<4125=4134,4126
<4126=4130,4127
<4127=4128
<4128=4129
<4130=4131
<4131=4133,4132
<4135=4136
<4136=4138,4137
<4138=4140,4139
<4141=4142
<4142=4144,4143
<4144=4145
<4146=4147
<4147=4164,4148
<4148=4160,4149
<4149=4150
<4150=4151
<4151=4159,4152
<4152=4154,4153
<4154=4158,4155
<4155=4157,4156
<4160=4161
<4161=4163,4162
<4165=4166
<4166=4168,4167
<4168=4169
<4170=4171
<4171=4180,4172
<4172=4176,4173
<4173=4174
<4174=4175
<4176=4177
<4177=4179,4178
<4181=4184,4182
<4182=4183
<4184=4185
<4185=4187,4186
<4188=4189
<4189=4191,4190
<4191=4192
<4193=4194
<4194=4211,4195
<4195=4207,4196
<4196=4205,4203,4201,4197
<4197=4198
<4198=4200,4199
<4201=4202
<4203=4204
<4205=4206
<4207=4208
<4208=4210,4209
<4212=4215,4213
<4213=4214
<4215=4216
<4216=4218,4217
<4219=4254,4246,4220
<4220=4221
<4221=4235,4222
<4222=4223
<4223=4234,4224
<4224=4233,4225
<4225=4231,4226
<4226=4227
<4227=4228
<4228=4230,4229
<4231=4232
<4235=4236
<4236=4245,4237
<4237=4239,4238
<4239=4240
<4240=4242,4241
<4242=4244,4243
<4246=4247
<4247=4253,4248
<4248=4252,4249
<4249=4251,4250
<4254=4255
<4255=4257,4256
<4258=4259
<4259=4264,4263,4260
<4260=4262,4261
<4265=4266
<4266=4271,4270,4267
<4267=4269,4268
<4272=4275,4273
<4273=4274
<4275=4276
<4276=4278,4277
<4324=4333,4332,4325
<4325=4329,4326
<4326=4328,4327
<4329=4331,4330
<4333=4353,4347,4341,4334
<4334=4335
<4335=4339,4336
<4336=4337
<4337=4338
<4339=4340
<4341=4342
<4342=4344,4343
<4344=4346,4345
<4347=4348
<4348=4350,4349
<4350=4352,4351
<4353=4354
<4354=4356,4355
<4366=4372,4371,4367
<4367=4368
<4368=4370,4369
<4372=4373
<4373=4374
<4374=4376,4375
<4382=4388,4387,4383
<4383=4384
<4384=4386,4385
<4388=4391,4389
<4389=4390
<4391=4414,4392
<4392=4407,4400,4393
<4393=4396,4394
<4394=4395
<4396=4397
<4397=4399,4398
<4400=4401
<4401=4405,4402
<4402=4403
<4403=4404
<4405=4406
<4407=4408
<4408=4413,4412,4409
<4409=4411,4410
<4414=4415
<4415=4417,4416
<4417=4418
<4428=4446,4445,4429
<4429=4442,4439,4436,4433,4430
<4430=4432,4431
<4433=4435,4434
<4436=4438,4437
<4439=4441,4440
<4442=4444,4443
<4446=4952,4945,4913,4906,4835,4824,4820,4813,4798,4783,4762,4755,4747,4719,4715,4708,4684,4674,4449,4447
<4447=4448
<4449=4672,4461,4450
<4450=4451
<4451=4452
<4452=4453
<4453=4459,4454
<4454=4455
<4455=4456
<4456=4458,4457
<4459=4460
<4461=4653,4648,4637,4632,4621,4616,4545,4536,4527,4518,4507,4498,4487,4476,4471,4462
<4462=4463
<4463=4469,4464
<4464=4465
<4465=4466
<4466=4468,4467
<4469=4470
<4471=4472
<4472=4474,4473
<4474=4475
<4476=4477
<4477=4486,4478
<4478=4482,4479
<4479=4480
<4480=4481
<4482=4483
<4483=4485,4484
<4487=4488
<4488=4496,4489
<4489=4494,4492,4490
<4490=4491
<4492=4493
<4494=4495
<4496=4497
<4498=4499
<4499=4505,4500
<4500=4503,4501
<4501=4502
<4503=4504
<4505=4506
<4507=4508
<4508=4514,4509
<4509=4512,4510
<4510=4511
<4512=4513
<4514=4515
<4515=4517,4516
<4518=4519
<4519=4523,4520
<4520=4521
<4521=4522
<4523=4524
<4524=4526,4525
<4527=4528
<4528=4532,4529
<4529=4530
<4530=4531
<4532=4533
<4533=4535,4534
<4536=4537
<4537=4541,4538
<4538=4539
<4539=4540
<4541=4542
<4542=4544,4543
<4545=4608,4575,4546
<4546=4547
<4547=4566,4553,4548
<4548=4549
<4549=4551,4550
<4551=4552
<4553=4554
<4554=4565,4555
<4555=4561,4556
<4556=4557
<4557=4558
<4558=4560,4559
<4561=4562
<4562=4564,4563
<4566=4567
<4567=4573,4568
<4568=4571,4569
<4569=4570
<4571=4572
<4573=4574
<4575=4601,4592,4581,4576
<4576=4577
<4577=4579,4578
<4579=4580
<4581=4582
<4582=4591,4583
<4583=4587,4584
<4584=4585
<4585=4586
<4587=4588
<4588=4590,4589
<4592=4593
<4593=4599,4594
<4594=4597,4595
<4595=4596
<4597=4598
<4599=4600
<4601=4602
<4602=4606,4603
<4603=4604
<4604=4605
<4606=4607
<4608=4609
<4609=4613,4610
<4610=4612,4611
<4613=4615,4614
<4616=4617
<4617=4619,4618
<4619=4620
<4621=4622
<4622=4631,4623
<4623=4627,4624
<4624=4625
<4625=4626
<4627=4628
<4628=4630,4629
<4632=4633
<4633=4635,4634
<4635=4636
<4637=4638
<4638=4647,4639
<4639=4643,4640
<4640=4641
<4641=4642
<4643=4644
<4644=4646,4645
<4648=4649
<4649=4651,4650
<4651=4652
<4653=4654
<4654=4671,4655
<4655=4667,4656
<4656=4665,4663,4661,4657
<4657=4658
<4658=4660,4659
<4661=4662
<4663=4664
<4665=4666
<4667=4668
<4668=4670,4669
<4672=4673
<4674=4679,4675
<4675=4676
<4676=4678,4677
<4679=4680
<4680=4682,4681
<4682=4683
<4684=4685
<4685=4707,4686
<4686=4703,4687
<4687=4696,4694,4692,4688
<4688=4689
<4689=4691,4690
<4692=4693
<4694=4695
<4696=4697
<4697=4699,4698
<4699=4700
<4700=4702,4701
<4703=4704
<4704=4706,4705
<4708=4709
<4709=4711,4710
<4711=4712
<4712=4714,4713
<4715=4716
<4716=4718,4717
<4719=4745,4720
<4720=4743,4741,4737,4733,4732,4730,4726,4722,4721
<4722=4723
<4723=4725,4724
<4726=4727
<4727=4729,4728
<4730=4731
<4733=4734
<4734=4736,4735
<4737=4738
<4738=4740,4739
<4741=4742
<4743=4744
<4745=4746
<4747=4748
<4748=4754,4749
<4749=4753,4750
<4750=4752,4751
<4755=4756
<4756=4761,4760,4757
<4757=4759,4758
<4762=4781,4763
<4763=4768,4764
<4764=4765
<4765=4767,4766
<4768=4777,4769
<4769=4770
<4770=4771
<4771=4773,4772
<4773=4774
<4774=4776,4775
<4777=4778
<4778=4780,4779
<4781=4782
<4783=4796,4784
<4784=4789,4785
<4785=4786
<4786=4788,4787
<4789=4790
<4790=4792,4791
<4792=4793
<4793=4795,4794
<4796=4797
<4798=4809,4799
<4799=4800
<4800=4801
<4801=4807,4802
<4802=4805,4803
<4803=4804
<4805=4806
<4807=4808
<4809=4810
<4810=4812,4811
<4813=4814
<4814=4818,4815
<4815=4816
<4816=4817
<4818=4819
<4820=4821
<4821=4823,4822
<4824=4825
<4825=4834,4826
<4826=4830,4827
<4827=4828
<4828=4829
<4830=4831
<4831=4833,4832
<4835=4891,4886,4836
<4836=4837
<4837=4838
<4838=4877,4849,4839
<4839=4840
<4840=4841
<4841=4842
<4842=4848,4843
<4843=4847,4844
<4844=4846,4845
<4849=4869,4850
<4850=4860,4851
<4851=4852
<4852=4853
<4853=4859,4854
<4854=4858,4855
<4855=4857,4856
<4860=4861
<4861=4868,4862
<4862=4866,4863
<4863=4864
<4864=4865
<4866=4867
<4869=4870
<4870=4876,4871
<4871=4875,4872
<4872=4874,4873
<4877=4878
<4878=4885,4879
<4879=4881,4880
<4881=4882
<4882=4884,4883
<4886=4887
<4887=4888
<4888=4890,4889
<4891=4892
<4892=4898,4893
<4893=4895,4894
<4895=4897,4896
<4898=4905,4899
<4899=4901,4900
<4901=4902
<4902=4904,4903
<4906=4907
<4907=4912,4911,4908
<4908=4910,4909
<4913=4936,4914
<4914=4915
<4915=4929,4916
<4916=4919,4917
<4917=4918
<4919=4927,4920
<4920=4921
<4921=4925,4922
<4922=4923
<4923=4924
<4925=4926
<4927=4928
<4929=4930
<4930=4934,4931
<4931=4932
<4932=4933
<4934=4935
<4936=4937
<4937=4942,4938
<4938=4940,4939
<4940=4941
<4942=4944,4943
<4945=4948,4946
<4946=4947
<4948=4949
<4949=4951,4950
<4952=4953
<4953=4959,4954
<4954=4955
<4955=4956
<4956=4958,4957
<4959=4960
<5018=5021,5020,5019
<5021=5030,5026,5022
<5022=5023
<5023=5025,5024
<5026=5027
<5027=5029,5028
<5030=5068,5031
<5031=5061,5056,5040,5036,5032
<5032=5033
<5033=5035,5034
<5036=5037
<5037=5039,5038
<5040=5054,5041
<5041=5047,5042
<5042=5043
<5043=5045,5044
<5045=5046
<5047=5048
<5048=5050,5049
<5050=5051
<5051=5053,5052
<5054=5055
<5056=5057
<5057=5059,5058
<5059=5060
<5061=5062
<5062=5064,5063
<5064=5065
<5065=5067,5066
<5068=5069
<5078=5084,5083,5079
<5079=5080
<5080=5082,5081
<5084=5114,5105,5085
<5085=5103,5086
<5086=5096,5091,5087
<5087=5088
<5088=5090,5089
<5091=5092
<5092=5094,5093
<5094=5095
<5096=5097
<5097=5099,5098
<5099=5100
<5100=5102,5101
<5103=5104
<5105=5106
<5106=5113,5112,5107
<5107=5111,5108
<5108=5110,5109
<5114=5116,5115
<5116=5117
<5117=5119,5118
<5125=5137,5136,5126
<5126=5133,5130,5127
<5127=5129,5128
<5130=5132,5131
<5133=5135,5134
<5137=5202,5138
<5138=5198,5139
<5139=5189,5140
<5140=5187,5141
<5141=5183,5175,5160,5155,5149,5142
<5142=5143
<5143=5147,5144
<5144=5145
<5145=5146
<5147=5148
<5149=5150
<5150=5152,5151
<5152=5154,5153
<5155=5156
<5156=5158,5157
<5158=5159
<5160=5161
<5161=5174,5162
<5162=5170,5163
<5163=5164
<5164=5165
<5165=5169,5166
<5166=5168,5167
<5170=5171
<5171=5173,5172
<5175=5176
<5176=5180,5177
<5177=5179,5178
<5180=5182,5181
<5183=5184
<5184=5186,5185
<5187=5188
<5189=5190
<5190=5197,5196,5191
<5191=5195,5192
<5192=5194,5193
<5198=5199
<5199=5201,5200
<5202=5204,5203
<5204=5205
<5205=5207,5206
<5224=5227,5226,5225
<5227=5255,5233,5228
<5228=5229
<5229=5231,5230
<5231=5232
<5233=5253,5234
<5234=5244,5239,5235
<5235=5236
<5236=5238,5237
<5239=5240
<5240=5242,5241
<5242=5243
<5244=5245
<5245=5252,5246
<5246=5248,5247
<5248=5249
<5249=5251,5250
<5253=5254
<5255=5304,5256
<5256=5297,5284,5279,5257
<5257=5277,5258
<5258=5268,5263,5259
<5259=5260
<5260=5262,5261
<5263=5264
<5264=5266,5265
<5266=5267
<5268=5269
<5269=5276,5270
<5270=5272,5271
<5272=5273
<5273=5275,5274
<5277=5278
<5279=5280
<5280=5282,5281
<5282=5283
<5284=5285
<5285=5296,5286
<5286=5292,5287
<5287=5288
<5288=5289
<5289=5291,5290
<5292=5293
<5293=5295,5294
<5297=5298
<5298=5303,5302,5299
<5299=5301,5300
<5304=5305
<5320=5323,5322,5321
<5323=5329,5324
<5324=5325
<5325=5327,5326
<5327=5328
<5329=5337,5330
<5330=5331
<5331=5333,5332
<5333=5334
<5334=5336,5335
<5337=5338
<5338=5345,5339
<5339=5341,5340
<5341=5342
<5342=5344,5343
<5351=5360,5359,5352
<5352=5356,5353
<5353=5355,5354
<5356=5358,5357
<5360=5415,5409,5389,5361
<5361=5385,5362
<5362=5376,5363
<5363=5364
<5364=5372,5365
<5365=5370,5368,5366
<5366=5367
<5368=5369
<5370=5371
<5372=5373
<5373=5375,5374
<5376=5377
<5377=5383,5378
<5378=5379
<5379=5380
<5380=5382,5381
<5383=5384
<5385=5386
<5386=5388,5387
<5389=5403,5390
<5390=5392,5391
<5392=5393
<5393=5401,5394
<5394=5395
<5395=5396
<5396=5400,5397
<5397=5399,5398
<5401=5402
<5403=5404
<5404=5408,5405
<5405=5407,5406
<5409=5410
<5410=5414,5411
<5411=5413,5412
<5415=5416
<5416=5418,5417
<5428=5440,5439,5429
<5429=5436,5433,5430
<5430=5432,5431
<5433=5435,5434
<5436=5438,5437
<5440=5460,5445,5441
<5441=5442
<5442=5444,5443
<5445=5446
<5446=5458,5447
<5447=5456,5454,5452,5448
<5448=5449
<5449=5451,5450
<5452=5453
<5454=5455
<5456=5457
<5458=5459
<5460=5461
<5461=5463,5462
<5474=5489,5488,5475
<5475=5485,5482,5479,5476
<5476=5478,5477
<5479=5481,5480
<5482=5484,5483
<5485=5487,5486
<5489=5832,5822,5815,5808,5792,5785,5673,5659,5645,5602,5595,5586,5581,5568,5561,5537,5518,5512,5497,5495,5490
<5490=5491
<5491=5493,5492
<5493=5494
<5495=5496
<5497=5508,5498
<5498=5499
<5499=5500
<5500=5504,5501
<5501=5502
<5502=5503
<5504=5505
<5505=5507,5506
<5508=5509
<5509=5511,5510
<5512=5513
<5513=5515,5514
<5515=5517,5516
<5518=5532,5519
<5519=5525,5520
<5520=5521
<5521=5523,5522
<5523=5524
<5525=5526
<5526=5530,5527
<5527=5528
<5528=5529
<5530=5531
<5532=5533
<5533=5535,5534
<5535=5536
<5537=5538
<5538=5560,5539
<5539=5556,5540
<5540=5549,5547,5545,5541
<5541=5542
<5542=5544,5543
<5545=5546
<5547=5548
<5549=5550
<5550=5552,5551
<5552=5553
<5553=5555,5554
<5556=5557
<5557=5559,5558
<5561=5566,5562
<5562=5563
<5563=5565,5564
<5566=5567
<5568=5569
<5569=5580,5579,5570
<5570=5578,5571
<5571=5577,5572
<5572=5576,5573
<5573=5575,5574
<5581=5584,5582
<5582=5583
<5584=5585
<5586=5587
<5587=5594,5593,5588
<5588=5592,5589
<5589=5591,5590
<5595=5596
<5596=5600,5597
<5597=5598
<5598=5599
<5600=5601
<5602=5637,5617,5603
<5603=5604
<5604=5610,5605
<5605=5606
<5606=5608,5607
<5608=5609
<5610=5611
<5611=5615,5612
<5612=5613
<5613=5614
<5615=5616
<5617=5618
<5618=5619
<5619=5636,5620
<5620=5632,5621
<5621=5628,5622
<5622=5623
<5623=5627,5624
<5624=5626,5625
<5628=5629
<5629=5631,5630
<5632=5633
<5633=5635,5634
<5637=5638
<5638=5642,5639
<5639=5641,5640
<5642=5644,5643
<5645=5646
<5646=5658,5657,5647
<5647=5656,5648
<5648=5652,5649
<5649=5650
<5650=5651
<5652=5653
<5653=5655,5654
<5659=5660
<5660=5672,5671,5661
<5661=5670,5662
<5662=5666,5663
<5663=5664
<5664=5665
<5666=5667
<5667=5669,5668
<5673=5772,5704,5674
<5674=5675
<5675=5696,5687,5676
<5676=5677
<5677=5686,5678
<5678=5682,5679
<5679=5680
<5680=5681
<5682=5683
<5683=5685,5684
<5687=5688
<5688=5695,5689
<5689=5693,5690
<5690=5691
<5691=5692
<5693=5694
<5696=5697
<5697=5703,5698
<5698=5702,5699
<5699=5701,5700
<5704=5764,5755,5744,5705
<5705=5735,5706
<5706=5727,5718,5707
<5707=5708
<5708=5717,5709
<5709=5713,5710
<5710=5711
<5711=5712
<5713=5714
<5714=5716,5715
<5718=5719
<5719=5726,5720
<5720=5724,5721
<5721=5722
<5722=5723
<5724=5725
<5727=5728
<5728=5734,5729
<5729=5733,5730
<5730=5732,5731
<5735=5736
<5736=5743,5737
<5737=5741,5738
<5738=5739
<5739=5740
<5741=5742
<5744=5745
<5745=5754,5746
<5746=5750,5747
<5747=5748
<5748=5749
<5750=5751
<5751=5753,5752
<5755=5756
<5756=5763,5757
<5757=5761,5758
<5758=5759
<5759=5760
<5761=5762
<5764=5765
<5765=5771,5766
<5766=5770,5767
<5767=5769,5768
<5772=5773
<5773=5782,5774
<5774=5781,5775
<5775=5777,5776
<5777=5778
<5778=5780,5779
<5782=5784,5783
<5785=5786
<5786=5790,5787
<5787=5788
<5788=5789
<5790=5791
<5792=5797,5793
<5793=5794
<5794=5796,5795
<5797=5798
<5798=5800,5799
<5800=5804,5801
<5801=5802
<5802=5803
<5804=5805
<5805=5807,5806
<5808=5809
<5809=5813,5810
<5810=5811
<5811=5812
<5813=5814
<5815=5816
<5816=5821,5820,5817
<5817=5819,5818
<5822=5826,5823
<5823=5825,5824
<5826=5831,5830,5827
<5827=5829,5828
<5832=5838,5833
<5833=5834
<5834=5836,5835
<5836=5837
<5838=5839
<5888=5894,5893,5889
<5889=5890
<5890=5892,5891
<5894=5899,5897,5895
<5895=5896
<5897=5898
<5899=5900
<5900=5916,5915,5901
<5901=5914,5902
<5902=5912,5903
<5903=5910,5908,5906,5904
<5904=5905
<5906=5907
<5908=5909
<5910=5911
<5912=5913
<5927=5933,5932,5928
<5928=5929
<5929=5931,5930
<5933=5934
<5934=5935
<5935=5939,5936
<5936=5937
<5937=5938
<5939=5940
<5940=5942,5941
<5948=5954,5953,5949
<5949=5950
<5950=5952,5951
<5954=5955
<5955=5965,5956
<5956=5957
<5957=5961,5958
<5958=5959
<5959=5960
<5961=5962
<5962=5964,5963
<5965=5966
<5972=5975,5974,5973
<5975=5983,5976
<5976=5977
<5977=5979,5978
<5979=5980
<5980=5982,5981
<5983=6041,6032,6029,5984
<5984=6020,6009,5998,5991,5985
<5985=5986
<5986=5988,5987
<5988=5990,5989
<5991=5992
<5992=5994,5993
<5994=5995
<5995=5997,5996
<5998=5999
<5999=6008,6007,6000
<6000=6006,6001
<6001=6005,6002
<6002=6004,6003
<6009=6010
<6010=6018,6011
<6011=6012
<6012=6013
<6013=6017,6014
<6014=6016,6015
<6018=6019
<6020=6021
<6021=6028,6027,6022
<6022=6026,6023
<6023=6025,6024
<6029=6031,6030
<6032=6033
<6033=6040,6034
<6034=6036,6035
<6036=6037
<6037=6039,6038
<6041=6042
<6042=6043
<6043=6053,6052,6044
<6044=6051,6045
<6045=6047,6046
<6047=6048
<6048=6050,6049
<6067=6070,6069,6068
<6070=6073,6071
<6071=6072
<6073=6175,6074
<6074=6171,6163,6089,6077,6075
<6075=6076
<6077=6078
<6078=6087,6079
<6079=6080
<6080=6081
<6081=6083,6082
<6083=6084
<6084=6086,6085
<6087=6088
<6089=6161,6090
<6090=6159,6155,6154,6152,6148,6147,6145,6141,6140,6138,6134,6133,6131,6127,6126,6124,6120,6119,6117,6113,6112,6110,6106,6105,6103,6099,6098,6096,6092,6091
<6092=6093
<6093=6095,6094
<6096=6097
<6099=6100
<6100=6102,6101
<6103=6104
<6106=6107
<6107=6109,6108
<6110=6111
<6113=6114
<6114=6116,6115
<6117=6118
<6120=6121
<6121=6123,6122
<6124=6125
<6127=6128
<6128=6130,6129
<6131=6132
<6134=6135
<6135=6137,6136
<6138=6139
<6141=6142
<6142=6144,6143
<6145=6146
<6148=6149
<6149=6151,6150
<6152=6153
<6155=6156
<6156=6158,6157
<6159=6160
<6161=6162
<6163=6164
<6164=6170,6165
<6165=6169,6166
<6166=6168,6167
<6171=6172
<6172=6174,6173
<6175=6176
<6176=6178,6177
<6188=6197,6196,6189
<6189=6193,6190
<6190=6192,6191
<6193=6195,6194
<6197=6285,6279,6273,6267,6263,6257,6251,6243,6239,6233,6227,6221,6198
<6198=6199
<6199=6217,6200
<6200=6215,6211,6209,6205,6201
<6201=6202
<6202=6204,6203
<6205=6206
<6206=6208,6207
<6209=6210
<6211=6212
<6212=6214,6213
<6215=6216
<6217=6218
<6218=6220,6219
<6221=6222
<6222=6224,6223
<6224=6226,6225
<6227=6228
<6228=6230,6229
<6230=6232,6231
<6233=6234
<6234=6236,6235
<6236=6238,6237
<6239=6240
<6240=6242,6241
<6243=6244
<6244=6248,6245
<6245=6247,6246
<6248=6250,6249
<6251=6252
<6252=6254,6253
<6254=6256,6255
<6257=6258
<6258=6260,6259
<6260=6262,6261
<6263=6264
<6264=6266,6265
<6267=6268
<6268=6270,6269
<6270=6272,6271
<6273=6274
<6274=6276,6275
<6276=6278,6277
<6279=6280
<6280=6282,6281
<6282=6284,6283
<6285=6286
<6286=6288,6287
<6311=6323,6322,6312
<6312=6319,6316,6313
<6313=6315,6314
<6316=6318,6317
<6319=6321,6320
<6323=6368,6359,6355,6349,6343,6337,6324
<6324=6325
<6325=6333,6326
<6326=6329,6327
<6327=6328
<6329=6330
<6330=6332,6331
<6333=6334
<6334=6336,6335
<6337=6338
<6338=6340,6339
<6340=6342,6341
<6343=6344
<6344=6346,6345
<6346=6348,6347
<6349=6350
<6350=6352,6351
<6352=6354,6353
<6355=6356
<6356=6358,6357
<6359=6360
<6360=6367,6366,6361
<6361=6365,6362
<6362=6364,6363
<6368=6370,6369
<6370=6371
<6371=6373,6372
<6387=6396,6395,6388
<6388=6392,6389
<6389=6391,6390
<6392=6394,6393
<6396=6467,6458,6451,6440,6427,6411,6397
<6397=6407,6398
<6398=6399
<6399=6403,6400
<6400=6401
<6401=6402
<6403=6404
<6404=6406,6405
<6407=6408
<6408=6410,6409
<6411=6425,6419,6412
<6412=6413
<6413=6414
<6414=6418,6415
<6415=6417,6416
<6419=6420
<6420=6424,6421
<6421=6423,6422
<6425=6426
<6427=6428
<6428=6439,6438,6429
<6429=6437,6430
<6430=6436,6431
<6431=6435,6432
<6432=6434,6433
<6440=6441
<6441=6447,6442
<6442=6443
<6443=6444
<6444=6446,6445
<6447=6448
<6448=6450,6449
<6451=6452
<6452=6457,6456,6453
<6453=6455,6454
<6458=6459
<6459=6466,6465,6460
<6460=6464,6461
<6461=6463,6462
<6467=6469,6468
<6469=6470
<6470=6472,6471
<6485=6500,6499,6486
<6486=6496,6493,6490,6487
<6487=6489,6488
<6490=6492,6491
<6493=6495,6494
<6496=6498,6497
<6500=6552,6545,6536,6523,6503,6501
<6501=6502
<6503=6521,6504
<6504=6519,6510,6509,6507,6505
<6505=6506
<6507=6508
<6510=6511
<6511=6515,6512
<6512=6513
<6513=6514
<6515=6516
<6516=6518,6517
<6519=6520
<6521=6522
<6523=6524
<6524=6532,6525
<6525=6526
<6526=6527
<6527=6531,6528
<6528=6530,6529
<6532=6533
<6533=6535,6534
<6536=6537
<6537=6544,6543,6538
<6538=6542,6539
<6539=6541,6540
<6545=6546
<6546=6551,6550,6547
<6547=6549,6548
<6552=6555,6553
<6553=6554
<6555=6556
<6556=6558,6557
<6572=6574,6573
<6574=6575
<6575=6576
<6576=6578,6577
<6578=6579
<6583=6592,6591,6584
<6584=6588,6585
<6585=6587,6586
<6588=6590,6589
<6592=6593
<6593=6635,6594
<6594=6622,6613,6610,6595
<6595=6596
<6596=6606,6597
<6597=6602,6600,6598
<6598=6599
<6600=6601
<6602=6603
<6603=6605,6604
<6606=6607
<6607=6609,6608
<6610=6612,6611
<6613=6614
<6614=6621,6615
<6615=6617,6616
<6617=6618
<6618=6620,6619
<6622=6623
<6623=6624
<6624=6634,6633,6625
<6625=6632,6626
<6626=6628,6627
<6628=6629
<6629=6631,6630
<6635=6636
<6636=6638,6637
<6638=6639
<6639=6641,6640
<6654=6657,6656,6655
<6657=6658
<6658=6675,6659
<6659=6660
<6660=6671,6661
<6661=6662
<6662=6663
<6663=6670,6664
<6664=6666,6665
<6666=6667
<6667=6669,6668
<6671=6672
<6672=6674,6673
<6675=6676
<6676=6678,6677
<6678=6679
<6679=6681,6680
<6692=6698,6697,6693
<6693=6694
<6694=6696,6695
<6698=6726,6717,6708,6699
<6699=6700
<6700=6704,6701
<6701=6702
<6702=6703
<6704=6705
<6705=6707,6706
<6708=6709
<6709=6713,6710
<6710=6711
<6711=6712
<6713=6714
<6714=6716,6715
<6717=6718
<6718=6722,6719
<6719=6720
<6720=6721
<6722=6723
<6723=6725,6724
<6726=6727
<6727=6734,6733,6728
<6728=6732,6729
<6729=6731,6730
<6742=6748,6747,6743
<6743=6744
<6744=6746,6745
<6748=6785,6776,6767,6758,6749
<6749=6750
<6750=6754,6751
<6751=6752
<6752=6753
<6754=6755
<6755=6757,6756
<6758=6759
<6759=6763,6760
<6760=6761
<6761=6762
<6763=6764
<6764=6766,6765
<6767=6768
<6768=6772,6769
<6769=6770
<6770=6771
<6772=6773
<6773=6775,6774
<6776=6777
<6777=6784,6783,6778
<6778=6782,6779
<6779=6781,6780
<6785=6787,6786
<6787=6788
<6788=6790,6789
<6799=6802,6801,6800
<6802=6803
<6803=6818,6804
<6804=6805
<6805=6816,6806
<6806=6807
<6807=6808
<6808=6815,6809
<6809=6811,6810
<6811=6812
<6812=6814,6813
<6816=6817
<6818=6819
<6819=6821,6820
<6821=6822
<6822=6824,6823
