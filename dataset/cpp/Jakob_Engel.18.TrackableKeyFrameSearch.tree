>3	FunctionDef	TrackableKeyFrameSearch 
>4	ParameterList	KeyFrameGraph * graph , int w , int h , Eigen 
>5	Parameter	 
>6	Identifier	K
>7	ParameterType	Eigen 
>8	Parameter	 
>9	Identifier	h
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	w
>13	ParameterType	int
>14	Parameter	 
>15	Identifier	graph
>16	ParameterType	KeyFrameGraph *
>17	CompoundStatement	 
>18	IfStatement	if ( enablePrintDebugInfo && printRelocalizationInfo )
>19	ExpressionStatement	 
>20	CallExpression	printf ( \"Relocalization Values
>21	ArgumentList	\"Relocalization Values
>22	Argument	fowY
>23	Identifier	fowY
>24	Argument	fowX
>25	Identifier	fowX
>26	Argument	\"Relocalization Values
>27	PrimaryExpression	\"Relocalization Values
>28	Callee	printf
>29	Identifier	printf
>30	Condition	 
>31	AndExpression	enablePrintDebugInfo && printRelocalizationInfo
>32	Identifier	printRelocalizationInfo
>33	Identifier	enablePrintDebugInfo
>34	ExpressionStatement	 
>35	AssignmentExpr	nAvgTrackPermaRef = 0
>36	PrimaryExpression	0
>37	Identifier	nAvgTrackPermaRef
>38	ExpressionStatement	 
>39	AssignmentExpr	nTrackPermaRef = 0
>40	PrimaryExpression	0
>41	Identifier	nTrackPermaRef
>42	ExpressionStatement	 
>43	AssignmentExpr	msTrackPermaRef = 0
>44	PrimaryExpression	0
>45	Identifier	msTrackPermaRef
>46	ExpressionStatement	 
>47	AssignmentExpr	fowY = 2 * atanf ( ( float ) ( ( h / K ( 1 , 1 ) ) / 2.0f ) )
>48	MultiplicativeExpression	2 * atanf ( ( float ) ( ( h / K ( 1 , 1 ) ) / 2.0f ) )
>49	CallExpression	atanf ( ( float ) ( ( h / K ( 1 , 1 ) ) / 2.0f ) )
>50	ArgumentList	( float ) ( ( h / K ( 1 , 1 ) ) / 2.0f )
>51	Argument	( float ) ( ( h / K ( 1 , 1 ) ) / 2.0f )
>52	CastExpression	( float ) ( ( h / K ( 1 , 1 ) ) / 2.0f )
>53	MultiplicativeExpression	( h / K ( 1 , 1 ) ) / 2.0f
>54	PrimaryExpression	2.0f
>55	MultiplicativeExpression	h / K ( 1 , 1 )
>56	CallExpression	K ( 1 , 1 )
>57	ArgumentList	1
>58	Argument	1
>59	PrimaryExpression	1
>60	Argument	1
>61	PrimaryExpression	1
>62	Callee	K
>63	Identifier	K
>64	Identifier	h
>65	CastTarget	float
>66	Callee	atanf
>67	Identifier	atanf
>68	PrimaryExpression	2
>69	Identifier	fowY
>70	ExpressionStatement	 
>71	AssignmentExpr	fowX = 2 * atanf ( ( float ) ( ( w / K ( 0 , 0 ) ) / 2.0f ) )
>72	MultiplicativeExpression	2 * atanf ( ( float ) ( ( w / K ( 0 , 0 ) ) / 2.0f ) )
>73	CallExpression	atanf ( ( float ) ( ( w / K ( 0 , 0 ) ) / 2.0f ) )
>74	ArgumentList	( float ) ( ( w / K ( 0 , 0 ) ) / 2.0f )
>75	Argument	( float ) ( ( w / K ( 0 , 0 ) ) / 2.0f )
>76	CastExpression	( float ) ( ( w / K ( 0 , 0 ) ) / 2.0f )
>77	MultiplicativeExpression	( w / K ( 0 , 0 ) ) / 2.0f
>78	PrimaryExpression	2.0f
>79	MultiplicativeExpression	w / K ( 0 , 0 )
>80	CallExpression	K ( 0 , 0 )
>81	ArgumentList	0
>82	Argument	0
>83	PrimaryExpression	0
>84	Argument	0
>85	PrimaryExpression	0
>86	Callee	K
>87	Identifier	K
>88	Identifier	w
>89	CastTarget	float
>90	Callee	atanf
>91	Identifier	atanf
>92	PrimaryExpression	2
>93	Identifier	fowX
>94	ExpressionStatement	 
>95	AssignmentExpr	tracker = new SE3Tracker ( w , h , K )
>96	Expression	w , h , K
>97	Expression	h , K
>98	Identifier	K
>99	Identifier	h
>100	Identifier	w
>101	Identifier	tracker
>118	FunctionDef	TrackableKeyFrameSearch 
>119	ParameterList	 
>120	CompoundStatement	 
>121	ExpressionStatement	 
>122	Identifier	tracker
>123	Statement	 
>127	FunctionDef	TrackableKeyFrameSearch 
>128	ParameterList	Frame * frame , float distanceTH , float angleTH , bool checkBothScales
>129	Parameter	 
>130	Identifier	checkBothScales
>131	ParameterType	bool
>132	Parameter	 
>133	Identifier	angleTH
>134	ParameterType	float
>135	Parameter	 
>136	Identifier	distanceTH
>137	ParameterType	float
>138	Parameter	 
>139	Identifier	frame
>140	ParameterType	Frame *
>141	ReturnType	std 
>142	CompoundStatement	 
>143	ReturnStatement	 
>144	Identifier	potentialReferenceFrames
>145	ExpressionStatement	 
>146	CallExpression	graph -> keyframesAllMutex . unlock_shared ( )
>147	ArgumentList	 
>148	Callee	graph -> keyframesAllMutex . unlock_shared
>149	MemberAccess	graph -> keyframesAllMutex . unlock_shared
>150	Identifier	unlock_shared
>151	PtrMemberAccess	graph -> keyframesAllMutex
>152	Identifier	keyframesAllMutex
>153	Identifier	graph
>154	ForStatement	for ( unsigned int i = 0 ; i < graph -> keyframesAll . size ( ) ; i ++ )
>155	CompoundStatement	 
>156	ExpressionStatement	 
>157	AssignmentExpr	potentialReferenceFrames . back ( ) . angle = dirDotProd
>158	Identifier	dirDotProd
>159	MemberAccess	potentialReferenceFrames . back ( ) . angle
>160	Identifier	angle
>161	CallExpression	potentialReferenceFrames . back ( )
>162	ArgumentList	 
>163	Callee	potentialReferenceFrames . back
>164	MemberAccess	potentialReferenceFrames . back
>165	Identifier	back
>166	Identifier	potentialReferenceFrames
>167	ExpressionStatement	 
>168	AssignmentExpr	potentialReferenceFrames . back ( ) . dist = dNorm2
>169	Identifier	dNorm2
>170	MemberAccess	potentialReferenceFrames . back ( ) . dist
>171	Identifier	dist
>172	CallExpression	potentialReferenceFrames . back ( )
>173	ArgumentList	 
>174	Callee	potentialReferenceFrames . back
>175	MemberAccess	potentialReferenceFrames . back
>176	Identifier	back
>177	Identifier	potentialReferenceFrames
>178	ExpressionStatement	 
>179	AssignmentExpr	potentialReferenceFrames . back ( ) . refToFrame = se3FromSim3 ( graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) \
>180	CallExpression	se3FromSim3 ( graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( ) ) \
>181	ArgumentList	 
>182	Callee	se3FromSim3 ( graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( ) ) \
>183	MemberAccess	se3FromSim3 ( graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( ) ) \
>184	Identifier	inverse
>185	CallExpression	se3FromSim3 ( graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( ) )
>186	ArgumentList	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( )
>187	Argument	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( )
>188	MultiplicativeExpression	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( )
>189	CallExpression	frame -> getScaledCamToWorld ( )
>190	ArgumentList	 
>191	Callee	frame -> getScaledCamToWorld
>192	PtrMemberAccess	frame -> getScaledCamToWorld
>193	Identifier	getScaledCamToWorld
>194	Identifier	frame
>195	CallExpression	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse ( )
>196	ArgumentList	 
>197	Callee	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse
>198	MemberAccess	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . inverse
>199	Identifier	inverse
>200	CallExpression	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( )
>201	ArgumentList	 
>202	Callee	graph -> keyframesAll [ i ] -> getScaledCamToWorld
>203	PtrMemberAccess	graph -> keyframesAll [ i ] -> getScaledCamToWorld
>204	Identifier	getScaledCamToWorld
>205	ArrayIndexing	graph -> keyframesAll [ i ]
>206	Identifier	i
>207	PtrMemberAccess	graph -> keyframesAll
>208	Identifier	keyframesAll
>209	Identifier	graph
>210	Callee	se3FromSim3
>211	Identifier	se3FromSim3
>212	MemberAccess	potentialReferenceFrames . back ( ) . refToFrame
>213	Identifier	refToFrame
>214	CallExpression	potentialReferenceFrames . back ( )
>215	ArgumentList	 
>216	Callee	potentialReferenceFrames . back
>217	MemberAccess	potentialReferenceFrames . back
>218	Identifier	back
>219	Identifier	potentialReferenceFrames
>220	ExpressionStatement	 
>221	AssignmentExpr	potentialReferenceFrames . back ( ) . ref = graph -> keyframesAll [ i ]
>222	ArrayIndexing	graph -> keyframesAll [ i ]
>223	Identifier	i
>224	PtrMemberAccess	graph -> keyframesAll
>225	Identifier	keyframesAll
>226	Identifier	graph
>227	MemberAccess	potentialReferenceFrames . back ( ) . ref
>228	Identifier	ref
>229	CallExpression	potentialReferenceFrames . back ( )
>230	ArgumentList	 
>231	Callee	potentialReferenceFrames . back
>232	MemberAccess	potentialReferenceFrames . back
>233	Identifier	back
>234	Identifier	potentialReferenceFrames
>235	ExpressionStatement	 
>236	CallExpression	potentialReferenceFrames . push_back ( TrackableKFStruct ( ) )
>237	ArgumentList	TrackableKFStruct ( )
>238	Argument	TrackableKFStruct ( )
>239	CallExpression	TrackableKFStruct ( )
>240	ArgumentList	 
>241	Callee	TrackableKFStruct
>242	Identifier	TrackableKFStruct
>243	Callee	potentialReferenceFrames . push_back
>244	MemberAccess	potentialReferenceFrames . push_back
>245	Identifier	push_back
>246	Identifier	potentialReferenceFrames
>247	IfStatement	if ( dirDotProd < cosAngleTH )
>248	ContinueStatement	 
>249	Condition	 
>250	RelationalExpression	dirDotProd < cosAngleTH
>251	Identifier	cosAngleTH
>252	Identifier	dirDotProd
>253	IdentifierDeclStatement	 
>254	IdentifierDecl	dirDotProd = otherViewingDir . dot ( viewingDir )
>255	AssignmentExpr	dirDotProd = otherViewingDir . dot ( viewingDir )
>256	CallExpression	otherViewingDir . dot ( viewingDir )
>257	ArgumentList	viewingDir
>258	Argument	viewingDir
>259	Identifier	viewingDir
>260	Callee	otherViewingDir . dot
>261	MemberAccess	otherViewingDir . dot
>262	Identifier	dot
>263	Identifier	otherViewingDir
>264	Identifier	dirDotProd
>265	Identifier	dirDotProd
>266	IdentifierDeclType	float
>267	ExpressionStatement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	IfStatement	if ( dNorm2 > distanceTH )
>295	ContinueStatement	 
>296	Condition	 
>297	RelationalExpression	dNorm2 > distanceTH
>298	Identifier	distanceTH
>299	Identifier	dNorm2
>300	IdentifierDeclStatement	 
>301	IdentifierDecl	dNorm2 = dist . dot ( dist )
>302	AssignmentExpr	dNorm2 = dist . dot ( dist )
>303	CallExpression	dist . dot ( dist )
>304	ArgumentList	dist
>305	Argument	dist
>306	Identifier	dist
>307	Callee	dist . dot
>308	MemberAccess	dist . dot
>309	Identifier	dot
>310	Identifier	dist
>311	Identifier	dNorm2
>312	Identifier	dNorm2
>313	IdentifierDeclType	float
>314	IdentifierDeclStatement	 
>315	IdentifierDecl	dist = ( pos - otherPos ) * distFac
>316	AssignmentExpr	dist = ( pos - otherPos ) * distFac
>317	MultiplicativeExpression	( pos - otherPos ) * distFac
>318	Identifier	distFac
>319	AdditiveExpression	pos - otherPos
>320	Identifier	otherPos
>321	Identifier	pos
>322	Identifier	dist
>323	Identifier	dist
>324	IdentifierDeclType	Eigen 
>325	IfStatement	if ( checkBothScales && distFacReciprocal < distFac )
>326	ExpressionStatement	 
>327	AssignmentExpr	distFac = distFacReciprocal
>328	Identifier	distFacReciprocal
>329	Identifier	distFac
>330	Condition	 
>331	AndExpression	checkBothScales && distFacReciprocal < distFac
>332	RelationalExpression	distFacReciprocal < distFac
>333	Identifier	distFac
>334	Identifier	distFacReciprocal
>335	Identifier	checkBothScales
>336	IdentifierDeclStatement	 
>337	IdentifierDecl	distFac = graph -> keyframesAll [ i ] -> meanIdepth / graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . scale ( )
>338	AssignmentExpr	distFac = graph -> keyframesAll [ i ] -> meanIdepth / graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) \
>339	MultiplicativeExpression	graph -> keyframesAll [ i ] -> meanIdepth / graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . \
>340	CallExpression	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . scale ( )
>341	ArgumentList	 
>342	Callee	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . scale
>343	MemberAccess	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . scale
>344	Identifier	scale
>345	CallExpression	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( )
>346	ArgumentList	 
>347	Callee	graph -> keyframesAll [ i ] -> getScaledCamToWorld
>348	PtrMemberAccess	graph -> keyframesAll [ i ] -> getScaledCamToWorld
>349	Identifier	getScaledCamToWorld
>350	ArrayIndexing	graph -> keyframesAll [ i ]
>351	Identifier	i
>352	PtrMemberAccess	graph -> keyframesAll
>353	Identifier	keyframesAll
>354	Identifier	graph
>355	PtrMemberAccess	graph -> keyframesAll [ i ] -> meanIdepth
>356	Identifier	meanIdepth
>357	ArrayIndexing	graph -> keyframesAll [ i ]
>358	Identifier	i
>359	PtrMemberAccess	graph -> keyframesAll
>360	Identifier	keyframesAll
>361	Identifier	graph
>362	Identifier	distFac
>363	Identifier	distFac
>364	IdentifierDeclType	float
>365	IdentifierDeclStatement	 
>366	IdentifierDecl	otherPos = graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . translation ( )
>367	AssignmentExpr	otherPos = graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . translation ( )
>368	CallExpression	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . translation ( )
>369	ArgumentList	 
>370	Callee	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . translation
>371	MemberAccess	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( ) . translation
>372	Identifier	translation
>373	CallExpression	graph -> keyframesAll [ i ] -> getScaledCamToWorld ( )
>374	ArgumentList	 
>375	Callee	graph -> keyframesAll [ i ] -> getScaledCamToWorld
>376	PtrMemberAccess	graph -> keyframesAll [ i ] -> getScaledCamToWorld
>377	Identifier	getScaledCamToWorld
>378	ArrayIndexing	graph -> keyframesAll [ i ]
>379	Identifier	i
>380	PtrMemberAccess	graph -> keyframesAll
>381	Identifier	keyframesAll
>382	Identifier	graph
>383	Identifier	otherPos
>384	Identifier	otherPos
>385	IdentifierDeclType	Eigen 
>386	IncDecOp	 
>387	IncDec	++
>388	Identifier	i
>389	Condition	 
>390	RelationalExpression	i < graph -> keyframesAll . size ( )
>391	CallExpression	graph -> keyframesAll . size ( )
>392	ArgumentList	 
>393	Callee	graph -> keyframesAll . size
>394	MemberAccess	graph -> keyframesAll . size
>395	Identifier	size
>396	PtrMemberAccess	graph -> keyframesAll
>397	Identifier	keyframesAll
>398	Identifier	graph
>399	Identifier	i
>400	ForInit	 
>401	IdentifierDeclStatement	unsigned int i = 0 ;
>402	IdentifierDecl	i = 0
>403	AssignmentExpr	i = 0
>404	PrimaryExpression	0
>405	Identifier	i
>406	Identifier	i
>407	IdentifierDeclType	unsigned int
>408	ExpressionStatement	 
>409	CallExpression	graph -> keyframesAllMutex . lock_shared ( )
>410	ArgumentList	 
>411	Callee	graph -> keyframesAllMutex . lock_shared
>412	MemberAccess	graph -> keyframesAllMutex . lock_shared
>413	Identifier	lock_shared
>414	PtrMemberAccess	graph -> keyframesAllMutex
>415	Identifier	keyframesAllMutex
>416	Identifier	graph
>417	IfStatement	if ( checkBothScales )
>418	ExpressionStatement	 
>419	AssignmentExpr	distFacReciprocal = frame -> meanIdepth / frame -> getScaledCamToWorld ( ) . scale ( )
>420	MultiplicativeExpression	frame -> meanIdepth / frame -> getScaledCamToWorld ( ) . scale ( )
>421	CallExpression	frame -> getScaledCamToWorld ( ) . scale ( )
>422	ArgumentList	 
>423	Callee	frame -> getScaledCamToWorld ( ) . scale
>424	MemberAccess	frame -> getScaledCamToWorld ( ) . scale
>425	Identifier	scale
>426	CallExpression	frame -> getScaledCamToWorld ( )
>427	ArgumentList	 
>428	Callee	frame -> getScaledCamToWorld
>429	PtrMemberAccess	frame -> getScaledCamToWorld
>430	Identifier	getScaledCamToWorld
>431	Identifier	frame
>432	PtrMemberAccess	frame -> meanIdepth
>433	Identifier	meanIdepth
>434	Identifier	frame
>435	Identifier	distFacReciprocal
>436	Condition	 
>437	Identifier	checkBothScales
>438	IdentifierDeclStatement	 
>439	IdentifierDecl	distFacReciprocal = 1
>440	AssignmentExpr	distFacReciprocal = 1
>441	PrimaryExpression	1
>442	Identifier	distFacReciprocal
>443	Identifier	distFacReciprocal
>444	IdentifierDeclType	float
>445	IdentifierDeclStatement	 
>446	IdentifierDecl	potentialReferenceFrames
>447	Identifier	potentialReferenceFrames
>448	IdentifierDeclType	std 
>449	ExpressionStatement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	IdentifierDeclStatement	 
>472	IdentifierDecl	pos = frame -> getScaledCamToWorld ( ) . translation ( )
>473	AssignmentExpr	pos = frame -> getScaledCamToWorld ( ) . translation ( )
>474	CallExpression	frame -> getScaledCamToWorld ( ) . translation ( )
>475	ArgumentList	 
>476	Callee	frame -> getScaledCamToWorld ( ) . translation
>477	MemberAccess	frame -> getScaledCamToWorld ( ) . translation
>478	Identifier	translation
>479	CallExpression	frame -> getScaledCamToWorld ( )
>480	ArgumentList	 
>481	Callee	frame -> getScaledCamToWorld
>482	PtrMemberAccess	frame -> getScaledCamToWorld
>483	Identifier	getScaledCamToWorld
>484	Identifier	frame
>485	Identifier	pos
>486	Identifier	pos
>487	IdentifierDeclType	Eigen 
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	cosAngleTH = cosf ( angleTH * 0.5f * ( fowX + fowY ) )
>490	AssignmentExpr	cosAngleTH = cosf ( angleTH * 0.5f * ( fowX + fowY ) )
>491	CallExpression	cosf ( angleTH * 0.5f * ( fowX + fowY ) )
>492	ArgumentList	angleTH * 0.5f * ( fowX + fowY )
>493	Argument	angleTH * 0.5f * ( fowX + fowY )
>494	MultiplicativeExpression	angleTH * 0.5f * ( fowX + fowY )
>495	MultiplicativeExpression	0.5f * ( fowX + fowY )
>496	AdditiveExpression	fowX + fowY
>497	Identifier	fowY
>498	Identifier	fowX
>499	PrimaryExpression	0.5f
>500	Identifier	angleTH
>501	Callee	cosf
>502	Identifier	cosf
>503	Identifier	cosAngleTH
>504	Identifier	cosAngleTH
>505	IdentifierDeclType	float
>559	FunctionDef	TrackableKeyFrameSearch 
>560	ParameterList	Frame * frame , float maxScore
>561	Parameter	 
>562	Identifier	maxScore
>563	ParameterType	float
>564	Parameter	 
>565	Identifier	frame
>566	ParameterType	Frame *
>567	ReturnType	Frame *
>568	CompoundStatement	 
>569	IfStatement	if ( bestFrame != 0 )
>570	ElseStatement	else
>571	CompoundStatement	 
>572	ReturnStatement	 
>573	PrimaryExpression	0
>574	IfStatement	if ( enablePrintDebugInfo && printRelocalizationInfo )
>575	ExpressionStatement	 
>576	CallExpression	printf ( \"FindReferences for %d
>577	ArgumentList	\"FindReferences for %d
>578	Argument	bestScore
>579	Identifier	bestScore
>580	Argument	checkedSecondary
>581	Identifier	checkedSecondary
>582	Argument	( int ) potentialReferenceFrames . size ( )
>583	CastExpression	( int ) potentialReferenceFrames . size ( )
>584	CallExpression	potentialReferenceFrames . size ( )
>585	ArgumentList	 
>586	Callee	potentialReferenceFrames . size
>587	MemberAccess	potentialReferenceFrames . size
>588	Identifier	size
>589	Identifier	potentialReferenceFrames
>590	CastTarget	int
>591	Argument	( int ) frame -> id ( )
>592	CastExpression	( int ) frame -> id ( )
>593	CallExpression	frame -> id ( )
>594	ArgumentList	 
>595	Callee	frame -> id
>596	PtrMemberAccess	frame -> id
>597	Identifier	id
>598	Identifier	frame
>599	CastTarget	int
>600	Argument	\"FindReferences for %d
>601	PrimaryExpression	\"FindReferences for %d
>602	Callee	printf
>603	Identifier	printf
>604	Condition	 
>605	AndExpression	enablePrintDebugInfo && printRelocalizationInfo
>606	Identifier	printRelocalizationInfo
>607	Identifier	enablePrintDebugInfo
>608	CompoundStatement	 
>609	ReturnStatement	 
>610	Identifier	bestFrame
>611	IfStatement	if ( enablePrintDebugInfo && printRelocalizationInfo )
>612	ExpressionStatement	 
>613	CallExpression	printf ( \"FindReferences for %d
>614	ArgumentList	\"FindReferences for %d
>615	Argument	bestFrame -> id ( )
>616	CallExpression	bestFrame -> id ( )
>617	ArgumentList	 
>618	Callee	bestFrame -> id
>619	PtrMemberAccess	bestFrame -> id
>620	Identifier	id
>621	Identifier	bestFrame
>622	Argument	bestPoseDiscrepancy
>623	Identifier	bestPoseDiscrepancy
>624	Argument	bestScore
>625	Identifier	bestScore
>626	Argument	bestUsage
>627	Identifier	bestUsage
>628	Argument	bestDist
>629	Identifier	bestDist
>630	Argument	checkedSecondary
>631	Identifier	checkedSecondary
>632	Argument	( int ) potentialReferenceFrames . size ( )
>633	CastExpression	( int ) potentialReferenceFrames . size ( )
>634	CallExpression	potentialReferenceFrames . size ( )
>635	ArgumentList	 
>636	Callee	potentialReferenceFrames . size
>637	MemberAccess	potentialReferenceFrames . size
>638	Identifier	size
>639	Identifier	potentialReferenceFrames
>640	CastTarget	int
>641	Argument	( int ) frame -> id ( )
>642	CastExpression	( int ) frame -> id ( )
>643	CallExpression	frame -> id ( )
>644	ArgumentList	 
>645	Callee	frame -> id
>646	PtrMemberAccess	frame -> id
>647	Identifier	id
>648	Identifier	frame
>649	CastTarget	int
>650	Argument	\"FindReferences for %d
>651	PrimaryExpression	\"FindReferences for %d
>652	Callee	printf
>653	Identifier	printf
>654	Condition	 
>655	AndExpression	enablePrintDebugInfo && printRelocalizationInfo
>656	Identifier	printRelocalizationInfo
>657	Identifier	enablePrintDebugInfo
>658	Condition	 
>659	EqualityExpression	bestFrame != 0
>660	PrimaryExpression	0
>661	Identifier	bestFrame
>662	ForStatement	for ( unsigned int i = 0 ; i < potentialReferenceFrames . size ( ) ; i ++ )
>663	CompoundStatement	 
>664	IfStatement	if ( score < maxScore )
>665	CompoundStatement	 
>666	IfStatement	if ( tracker -> trackingWasGood && goodVal > relocalizationTH && newScore < bestScore && poseDiscrepancy < 0.2 )
>667	CompoundStatement	 
>668	ExpressionStatement	 
>669	AssignmentExpr	bestUsage = tracker -> pointUsage
>670	PtrMemberAccess	tracker -> pointUsage
>671	Identifier	pointUsage
>672	Identifier	tracker
>673	Identifier	bestUsage
>674	ExpressionStatement	 
>675	AssignmentExpr	bestDist = dist . dot ( dist )
>676	CallExpression	dist . dot ( dist )
>677	ArgumentList	dist
>678	Argument	dist
>679	Identifier	dist
>680	Callee	dist . dot
>681	MemberAccess	dist . dot
>682	Identifier	dot
>683	Identifier	dist
>684	Identifier	bestDist
>685	ExpressionStatement	 
>686	AssignmentExpr	bestRefToFrame_tracked = RefToFrame_tracked
>687	Identifier	RefToFrame_tracked
>688	Identifier	bestRefToFrame_tracked
>689	ExpressionStatement	 
>690	AssignmentExpr	bestRefToFrame = potentialReferenceFrames [ i ] . refToFrame
>691	MemberAccess	potentialReferenceFrames [ i ] . refToFrame
>692	Identifier	refToFrame
>693	ArrayIndexing	potentialReferenceFrames [ i ]
>694	Identifier	i
>695	Identifier	potentialReferenceFrames
>696	Identifier	bestRefToFrame
>697	ExpressionStatement	 
>698	AssignmentExpr	bestFrame = potentialReferenceFrames [ i ] . ref
>699	MemberAccess	potentialReferenceFrames [ i ] . ref
>700	Identifier	ref
>701	ArrayIndexing	potentialReferenceFrames [ i ]
>702	Identifier	i
>703	Identifier	potentialReferenceFrames
>704	Identifier	bestFrame
>705	ExpressionStatement	 
>706	AssignmentExpr	bestScore = score
>707	Identifier	score
>708	Identifier	bestScore
>709	ExpressionStatement	 
>710	AssignmentExpr	bestPoseDiscrepancy = poseDiscrepancy
>711	Identifier	poseDiscrepancy
>712	Identifier	bestPoseDiscrepancy
>713	Condition	 
>714	AndExpression	tracker -> trackingWasGood && goodVal > relocalizationTH && newScore < bestScore && poseDiscrepancy < \
>715	AndExpression	goodVal > relocalizationTH && newScore < bestScore && poseDiscrepancy < 0.2
>716	AndExpression	newScore < bestScore && poseDiscrepancy < 0.2
>717	RelationalExpression	poseDiscrepancy < 0.2
>718	PrimaryExpression	0.2
>719	Identifier	poseDiscrepancy
>720	RelationalExpression	newScore < bestScore
>721	Identifier	bestScore
>722	Identifier	newScore
>723	RelationalExpression	goodVal > relocalizationTH
>724	Identifier	relocalizationTH
>725	Identifier	goodVal
>726	PtrMemberAccess	tracker -> trackingWasGood
>727	Identifier	trackingWasGood
>728	Identifier	tracker
>729	ExpressionStatement	 
>730	IncDecOp	checkedSecondary ++
>731	IncDec	++
>732	Identifier	checkedSecondary
>733	IdentifierDeclStatement	 
>734	IdentifierDecl	goodVal = tracker -> pointUsage * tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>735	AssignmentExpr	goodVal = tracker -> pointUsage * tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> \
>736	MultiplicativeExpression	tracker -> pointUsage * tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>737	MultiplicativeExpression	tracker -> lastGoodCount / ( tracker -> lastGoodCount + tracker -> lastBadCount )
>738	AdditiveExpression	tracker -> lastGoodCount + tracker -> lastBadCount
>739	PtrMemberAccess	tracker -> lastBadCount
>740	Identifier	lastBadCount
>741	Identifier	tracker
>742	PtrMemberAccess	tracker -> lastGoodCount
>743	Identifier	lastGoodCount
>744	Identifier	tracker
>745	PtrMemberAccess	tracker -> lastGoodCount
>746	Identifier	lastGoodCount
>747	Identifier	tracker
>748	PtrMemberAccess	tracker -> pointUsage
>749	Identifier	pointUsage
>750	Identifier	tracker
>751	Identifier	goodVal
>752	Identifier	goodVal
>753	IdentifierDeclType	float
>754	IdentifierDeclStatement	 
>755	IdentifierDecl	poseDiscrepancy = ( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) . log ( ) . \
>756	AssignmentExpr	poseDiscrepancy = ( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) \
>757	CallExpression	( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) . log ( ) . norm ( )
>758	ArgumentList	 
>759	Callee	( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) . log ( ) . norm
>760	MemberAccess	( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) . log ( ) . norm
>761	Identifier	norm
>762	CallExpression	( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) . log ( )
>763	ArgumentList	 
>764	Callee	( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) . log
>765	MemberAccess	( potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( ) ) . log
>766	Identifier	log
>767	MultiplicativeExpression	potentialReferenceFrames [ i ] . refToFrame * RefToFrame_tracked . inverse ( )
>768	CallExpression	RefToFrame_tracked . inverse ( )
>769	ArgumentList	 
>770	Callee	RefToFrame_tracked . inverse
>771	MemberAccess	RefToFrame_tracked . inverse
>772	Identifier	inverse
>773	Identifier	RefToFrame_tracked
>774	MemberAccess	potentialReferenceFrames [ i ] . refToFrame
>775	Identifier	refToFrame
>776	ArrayIndexing	potentialReferenceFrames [ i ]
>777	Identifier	i
>778	Identifier	potentialReferenceFrames
>779	Identifier	poseDiscrepancy
>780	Identifier	poseDiscrepancy
>781	IdentifierDeclType	float
>782	IdentifierDeclStatement	 
>783	IdentifierDecl	newScore = getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>784	AssignmentExpr	newScore = getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>785	CallExpression	getRefFrameScore ( dist . dot ( dist ) , tracker -> pointUsage )
>786	ArgumentList	dist . dot ( dist )
>787	Argument	tracker -> pointUsage
>788	PtrMemberAccess	tracker -> pointUsage
>789	Identifier	pointUsage
>790	Identifier	tracker
>791	Argument	dist . dot ( dist )
>792	CallExpression	dist . dot ( dist )
>793	ArgumentList	dist
>794	Argument	dist
>795	Identifier	dist
>796	Callee	dist . dot
>797	MemberAccess	dist . dot
>798	Identifier	dot
>799	Identifier	dist
>800	Callee	getRefFrameScore
>801	Identifier	getRefFrameScore
>802	Identifier	newScore
>803	Identifier	newScore
>804	IdentifierDeclType	float
>805	IdentifierDeclStatement	 
>806	IdentifierDecl	dist = RefToFrame_tracked . translation ( ) * potentialReferenceFrames [ i ] . ref -> meanIdepth
>807	AssignmentExpr	dist = RefToFrame_tracked . translation ( ) * potentialReferenceFrames [ i ] . ref -> meanIdepth
>808	MultiplicativeExpression	RefToFrame_tracked . translation ( ) * potentialReferenceFrames [ i ] . ref -> meanIdepth
>809	PtrMemberAccess	potentialReferenceFrames [ i ] . ref -> meanIdepth
>810	Identifier	meanIdepth
>811	MemberAccess	potentialReferenceFrames [ i ] . ref
>812	Identifier	ref
>813	ArrayIndexing	potentialReferenceFrames [ i ]
>814	Identifier	i
>815	Identifier	potentialReferenceFrames
>816	CallExpression	RefToFrame_tracked . translation ( )
>817	ArgumentList	 
>818	Callee	RefToFrame_tracked . translation
>819	MemberAccess	RefToFrame_tracked . translation
>820	Identifier	translation
>821	Identifier	RefToFrame_tracked
>822	Identifier	dist
>823	Identifier	dist
>824	IdentifierDeclType	Sophus 
>825	IdentifierDeclStatement	 
>826	IdentifierDecl	RefToFrame_tracked = tracker -> trackFrameOnPermaref ( potentialReferenceFrames [ i ] . ref , frame , potentialReferenceFrames [ \
>827	AssignmentExpr	RefToFrame_tracked = tracker -> trackFrameOnPermaref ( potentialReferenceFrames [ i ] . ref , frame , \
>828	CallExpression	tracker -> trackFrameOnPermaref ( potentialReferenceFrames [ i ] . ref , frame , potentialReferenceFrames [ i ] \
>829	ArgumentList	potentialReferenceFrames [ i ] . ref
>830	Argument	potentialReferenceFrames [ i ] . refToFrame
>831	MemberAccess	potentialReferenceFrames [ i ] . refToFrame
>832	Identifier	refToFrame
>833	ArrayIndexing	potentialReferenceFrames [ i ]
>834	Identifier	i
>835	Identifier	potentialReferenceFrames
>836	Argument	frame
>837	Identifier	frame
>838	Argument	potentialReferenceFrames [ i ] . ref
>839	MemberAccess	potentialReferenceFrames [ i ] . ref
>840	Identifier	ref
>841	ArrayIndexing	potentialReferenceFrames [ i ]
>842	Identifier	i
>843	Identifier	potentialReferenceFrames
>844	Callee	tracker -> trackFrameOnPermaref
>845	PtrMemberAccess	tracker -> trackFrameOnPermaref
>846	Identifier	trackFrameOnPermaref
>847	Identifier	tracker
>848	Identifier	RefToFrame_tracked
>849	Identifier	RefToFrame_tracked
>850	IdentifierDeclType	SE3
>851	Condition	 
>852	RelationalExpression	score < maxScore
>853	Identifier	maxScore
>854	Identifier	score
>855	IdentifierDeclStatement	 
>856	IdentifierDecl	score = getRefFrameScore ( potentialReferenceFrames [ i ] . dist , tracker -> pointUsage )
>857	AssignmentExpr	score = getRefFrameScore ( potentialReferenceFrames [ i ] . dist , tracker -> pointUsage )
>858	CallExpression	getRefFrameScore ( potentialReferenceFrames [ i ] . dist , tracker -> pointUsage )
>859	ArgumentList	potentialReferenceFrames [ i ] . dist
>860	Argument	tracker -> pointUsage
>861	PtrMemberAccess	tracker -> pointUsage
>862	Identifier	pointUsage
>863	Identifier	tracker
>864	Argument	potentialReferenceFrames [ i ] . dist
>865	MemberAccess	potentialReferenceFrames [ i ] . dist
>866	Identifier	dist
>867	ArrayIndexing	potentialReferenceFrames [ i ]
>868	Identifier	i
>869	Identifier	potentialReferenceFrames
>870	Callee	getRefFrameScore
>871	Identifier	getRefFrameScore
>872	Identifier	score
>873	Identifier	score
>874	IdentifierDeclType	float
>875	ExpressionStatement	 
>876	IncDecOp	nTrackPermaRef ++
>877	IncDec	++
>878	Identifier	nTrackPermaRef
>879	ExpressionStatement	 
>880	AssignmentExpr	msTrackPermaRef = 0.9 * msTrackPermaRef + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( \
>881	AdditiveExpression	0.9 * msTrackPermaRef + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec \
>882	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>883	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>884	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>885	PrimaryExpression	1000.0f
>886	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>887	MemberAccess	tv_start . tv_usec
>888	Identifier	tv_usec
>889	Identifier	tv_start
>890	MemberAccess	tv_end . tv_usec
>891	Identifier	tv_usec
>892	Identifier	tv_end
>893	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>894	PrimaryExpression	1000.0f
>895	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>896	MemberAccess	tv_start . tv_sec
>897	Identifier	tv_sec
>898	Identifier	tv_start
>899	MemberAccess	tv_end . tv_sec
>900	Identifier	tv_sec
>901	Identifier	tv_end
>902	PrimaryExpression	0.1
>903	MultiplicativeExpression	0.9 * msTrackPermaRef
>904	Identifier	msTrackPermaRef
>905	PrimaryExpression	0.9
>906	Identifier	msTrackPermaRef
>907	ExpressionStatement	 
>908	CallExpression	gettimeofday ( & tv_end , NULL )
>909	ArgumentList	& tv_end
>910	Argument	NULL
>911	Identifier	NULL
>912	Argument	& tv_end
>913	UnaryOp	& tv_end
>914	Identifier	tv_end
>915	UnaryOperator	&
>916	Callee	gettimeofday
>917	Identifier	gettimeofday
>918	ExpressionStatement	 
>919	CallExpression	tracker -> checkPermaRefOverlap ( potentialReferenceFrames [ i ] . ref , potentialReferenceFrames [ i ] . refToFrame )
>920	ArgumentList	potentialReferenceFrames [ i ] . ref
>921	Argument	potentialReferenceFrames [ i ] . refToFrame
>922	MemberAccess	potentialReferenceFrames [ i ] . refToFrame
>923	Identifier	refToFrame
>924	ArrayIndexing	potentialReferenceFrames [ i ]
>925	Identifier	i
>926	Identifier	potentialReferenceFrames
>927	Argument	potentialReferenceFrames [ i ] . ref
>928	MemberAccess	potentialReferenceFrames [ i ] . ref
>929	Identifier	ref
>930	ArrayIndexing	potentialReferenceFrames [ i ]
>931	Identifier	i
>932	Identifier	potentialReferenceFrames
>933	Callee	tracker -> checkPermaRefOverlap
>934	PtrMemberAccess	tracker -> checkPermaRefOverlap
>935	Identifier	checkPermaRefOverlap
>936	Identifier	tracker
>937	ExpressionStatement	 
>938	CallExpression	gettimeofday ( & tv_start , NULL )
>939	ArgumentList	& tv_start
>940	Argument	NULL
>941	Identifier	NULL
>942	Argument	& tv_start
>943	UnaryOp	& tv_start
>944	Identifier	tv_start
>945	UnaryOperator	&
>946	Callee	gettimeofday
>947	Identifier	gettimeofday
>948	IdentifierDeclStatement	 
>949	IdentifierDecl	tv_end
>950	Identifier	tv_end
>951	IdentifierDeclType	struct timeval
>952	IdentifierDecl	tv_start
>953	Identifier	tv_start
>954	IdentifierDeclType	struct timeval
>955	IfStatement	if ( potentialReferenceFrames [ i ] . ref -> idxInKeyframes < INITIALIZATION_PHASE_COUNT )
>956	ContinueStatement	 
>957	Condition	 
>958	RelationalExpression	potentialReferenceFrames [ i ] . ref -> idxInKeyframes < INITIALIZATION_PHASE_COUNT
>959	Identifier	INITIALIZATION_PHASE_COUNT
>960	PtrMemberAccess	potentialReferenceFrames [ i ] . ref -> idxInKeyframes
>961	Identifier	idxInKeyframes
>962	MemberAccess	potentialReferenceFrames [ i ] . ref
>963	Identifier	ref
>964	ArrayIndexing	potentialReferenceFrames [ i ]
>965	Identifier	i
>966	Identifier	potentialReferenceFrames
>967	IfStatement	if ( frame -> getTrackingParent ( ) == potentialReferenceFrames [ i ] . ref )
>968	ContinueStatement	 
>969	Condition	 
>970	EqualityExpression	frame -> getTrackingParent ( ) == potentialReferenceFrames [ i ] . ref
>971	MemberAccess	potentialReferenceFrames [ i ] . ref
>972	Identifier	ref
>973	ArrayIndexing	potentialReferenceFrames [ i ]
>974	Identifier	i
>975	Identifier	potentialReferenceFrames
>976	CallExpression	frame -> getTrackingParent ( )
>977	ArgumentList	 
>978	Callee	frame -> getTrackingParent
>979	PtrMemberAccess	frame -> getTrackingParent
>980	Identifier	getTrackingParent
>981	Identifier	frame
>982	IncDecOp	 
>983	IncDec	++
>984	Identifier	i
>985	Condition	 
>986	RelationalExpression	i < potentialReferenceFrames . size ( )
>987	CallExpression	potentialReferenceFrames . size ( )
>988	ArgumentList	 
>989	Callee	potentialReferenceFrames . size
>990	MemberAccess	potentialReferenceFrames . size
>991	Identifier	size
>992	Identifier	potentialReferenceFrames
>993	Identifier	i
>994	ForInit	 
>995	IdentifierDeclStatement	unsigned int i = 0 ;
>996	IdentifierDecl	i = 0
>997	AssignmentExpr	i = 0
>998	PrimaryExpression	0
>999	Identifier	i
>1000	Identifier	i
>1001	IdentifierDeclType	unsigned int
>1002	IdentifierDeclStatement	 
>1003	IdentifierDecl	checkedSecondary = 0
>1004	AssignmentExpr	checkedSecondary = 0
>1005	PrimaryExpression	0
>1006	Identifier	checkedSecondary
>1007	Identifier	checkedSecondary
>1008	IdentifierDeclType	int
>1009	IdentifierDeclStatement	 
>1010	IdentifierDecl	bestRefToFrame_tracked = SE3 ( )
>1011	AssignmentExpr	bestRefToFrame_tracked = SE3 ( )
>1012	CallExpression	SE3 ( )
>1013	ArgumentList	 
>1014	Callee	SE3
>1015	Identifier	SE3
>1016	Identifier	bestRefToFrame_tracked
>1017	Identifier	bestRefToFrame_tracked
>1018	IdentifierDeclType	SE3
>1019	IdentifierDeclStatement	 
>1020	IdentifierDecl	bestRefToFrame = SE3 ( )
>1021	AssignmentExpr	bestRefToFrame = SE3 ( )
>1022	CallExpression	SE3 ( )
>1023	ArgumentList	 
>1024	Callee	SE3
>1025	Identifier	SE3
>1026	Identifier	bestRefToFrame
>1027	Identifier	bestRefToFrame
>1028	IdentifierDeclType	SE3
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	* bestFrame = 0
>1031	AssignmentExpr	* bestFrame = 0
>1032	PrimaryExpression	0
>1033	Identifier	bestFrame
>1034	Identifier	bestFrame
>1035	IdentifierDeclType	Frame *
>1036	IdentifierDeclStatement	 
>1037	IdentifierDecl	bestPoseDiscrepancy = 0
>1038	AssignmentExpr	bestPoseDiscrepancy = 0
>1039	PrimaryExpression	0
>1040	Identifier	bestPoseDiscrepancy
>1041	Identifier	bestPoseDiscrepancy
>1042	IdentifierDeclType	float
>1043	IdentifierDeclStatement	 
>1044	IdentifierDecl	bestUsage
>1045	Identifier	bestUsage
>1046	IdentifierDeclType	float
>1047	IdentifierDecl	bestDist
>1048	Identifier	bestDist
>1049	IdentifierDeclType	float
>1050	IdentifierDeclStatement	 
>1051	IdentifierDecl	bestScore = maxScore
>1052	AssignmentExpr	bestScore = maxScore
>1053	Identifier	maxScore
>1054	Identifier	maxScore
>1055	Identifier	bestScore
>1056	IdentifierDeclType	float
>1057	IdentifierDeclStatement	 
>1058	IdentifierDecl	potentialReferenceFrames = findEuclideanOverlapFrames ( frame , maxScore / ( KFDistWeight * KFDistWeight ) , 0.75 )
>1059	AssignmentExpr	potentialReferenceFrames = findEuclideanOverlapFrames ( frame , maxScore / ( KFDistWeight * KFDistWeight ) , \
>1060	CallExpression	findEuclideanOverlapFrames ( frame , maxScore / ( KFDistWeight * KFDistWeight ) , 0.75 )
>1061	ArgumentList	frame
>1062	Argument	0.75
>1063	PrimaryExpression	0.75
>1064	Argument	maxScore / ( KFDistWeight * KFDistWeight )
>1065	MultiplicativeExpression	maxScore / ( KFDistWeight * KFDistWeight )
>1066	MultiplicativeExpression	KFDistWeight * KFDistWeight
>1067	Identifier	KFDistWeight
>1068	Identifier	KFDistWeight
>1069	Identifier	maxScore
>1070	Argument	frame
>1071	Identifier	frame
>1072	Callee	findEuclideanOverlapFrames
>1073	Identifier	findEuclideanOverlapFrames
>1074	Identifier	potentialReferenceFrames
>1075	Identifier	potentialReferenceFrames
>1076	IdentifierDeclType	std 
>1145	FunctionDef	TrackableKeyFrameSearch 
>1146	ParameterList	Frame * keyframe , Frame * & fabMapResult_out , bool includeFABMAP , bool closenessTH
>1147	Parameter	 
>1148	Identifier	closenessTH
>1149	ParameterType	bool
>1150	Parameter	 
>1151	Identifier	includeFABMAP
>1152	ParameterType	bool
>1153	Parameter	 
>1154	Identifier	fabMapResult_out
>1155	ParameterType	Frame * &
>1156	Parameter	 
>1157	Identifier	keyframe
>1158	ParameterType	Frame *
>1159	ReturnType	std 
>1160	CompoundStatement	 
>1161	ReturnStatement	 
>1162	Identifier	results
>1163	IfStatement	if ( enablePrintDebugInfo && printConstraintSearchInfo )
>1164	ExpressionStatement	 
>1165	CallExpression	printf ( \"Early LoopClosure-Candidates for %d
>1166	ArgumentList	\"Early LoopClosure-Candidates for %d
>1167	Argument	( int ) results . size ( )
>1168	CastExpression	( int ) results . size ( )
>1169	CallExpression	results . size ( )
>1170	ArgumentList	 
>1171	Callee	results . size
>1172	MemberAccess	results . size
>1173	Identifier	size
>1174	Identifier	results
>1175	CastTarget	int
>1176	Argument	appearanceBased
>1177	Identifier	appearanceBased
>1178	Argument	( int ) potentialReferenceFrames . size ( )
>1179	CastExpression	( int ) potentialReferenceFrames . size ( )
>1180	CallExpression	potentialReferenceFrames . size ( )
>1181	ArgumentList	 
>1182	Callee	potentialReferenceFrames . size
>1183	MemberAccess	potentialReferenceFrames . size
>1184	Identifier	size
>1185	Identifier	potentialReferenceFrames
>1186	CastTarget	int
>1187	Argument	( int ) keyframe -> id ( )
>1188	CastExpression	( int ) keyframe -> id ( )
>1189	CallExpression	keyframe -> id ( )
>1190	ArgumentList	 
>1191	Callee	keyframe -> id
>1192	PtrMemberAccess	keyframe -> id
>1193	Identifier	id
>1194	Identifier	keyframe
>1195	CastTarget	int
>1196	Argument	\"Early LoopClosure-Candidates for %d
>1197	PrimaryExpression	\"Early LoopClosure-Candidates for %d
>1198	Callee	printf
>1199	Identifier	printf
>1200	Condition	 
>1201	AndExpression	enablePrintDebugInfo && printConstraintSearchInfo
>1202	Identifier	printConstraintSearchInfo
>1203	Identifier	enablePrintDebugInfo
>1204	IfStatement	if ( includeFABMAP )
>1205	CompoundStatement	 
>1206	IfStatement	if ( fabMapResult_out != nullptr )
>1207	CompoundStatement	 
>1208	ExpressionStatement	 
>1209	AssignmentExpr	appearanceBased = 1 + fabMapResult_out -> neighbors . size ( )
>1210	AdditiveExpression	1 + fabMapResult_out -> neighbors . size ( )
>1211	CallExpression	fabMapResult_out -> neighbors . size ( )
>1212	ArgumentList	 
>1213	Callee	fabMapResult_out -> neighbors . size
>1214	MemberAccess	fabMapResult_out -> neighbors . size
>1215	Identifier	size
>1216	PtrMemberAccess	fabMapResult_out -> neighbors
>1217	Identifier	neighbors
>1218	Identifier	fabMapResult_out
>1219	PrimaryExpression	1
>1220	Identifier	appearanceBased
>1221	ExpressionStatement	 
>1222	CallExpression	results . insert ( fabMapResult_out -> neighbors . begin ( ) , fabMapResult_out -> neighbors . end ( ) )
>1223	ArgumentList	fabMapResult_out -> neighbors . begin ( )
>1224	Argument	fabMapResult_out -> neighbors . end ( )
>1225	CallExpression	fabMapResult_out -> neighbors . end ( )
>1226	ArgumentList	 
>1227	Callee	fabMapResult_out -> neighbors . end
>1228	MemberAccess	fabMapResult_out -> neighbors . end
>1229	Identifier	end
>1230	PtrMemberAccess	fabMapResult_out -> neighbors
>1231	Identifier	neighbors
>1232	Identifier	fabMapResult_out
>1233	Argument	fabMapResult_out -> neighbors . begin ( )
>1234	CallExpression	fabMapResult_out -> neighbors . begin ( )
>1235	ArgumentList	 
>1236	Callee	fabMapResult_out -> neighbors . begin
>1237	MemberAccess	fabMapResult_out -> neighbors . begin
>1238	Identifier	begin
>1239	PtrMemberAccess	fabMapResult_out -> neighbors
>1240	Identifier	neighbors
>1241	Identifier	fabMapResult_out
>1242	Callee	results . insert
>1243	MemberAccess	results . insert
>1244	Identifier	insert
>1245	Identifier	results
>1246	ExpressionStatement	 
>1247	CallExpression	results . insert ( fabMapResult_out )
>1248	ArgumentList	fabMapResult_out
>1249	Argument	fabMapResult_out
>1250	Identifier	fabMapResult_out
>1251	Callee	results . insert
>1252	MemberAccess	results . insert
>1253	Identifier	insert
>1254	Identifier	results
>1255	Condition	 
>1256	EqualityExpression	fabMapResult_out != nullptr
>1257	Identifier	nullptr
>1258	Identifier	fabMapResult_out
>1259	ExpressionStatement	 
>1260	AssignmentExpr	fabMapResult_out = findAppearanceBasedCandidate ( keyframe )
>1261	CallExpression	findAppearanceBasedCandidate ( keyframe )
>1262	ArgumentList	keyframe
>1263	Argument	keyframe
>1264	Identifier	keyframe
>1265	Callee	findAppearanceBasedCandidate
>1266	Identifier	findAppearanceBasedCandidate
>1267	Identifier	fabMapResult_out
>1268	Condition	 
>1269	Identifier	includeFABMAP
>1270	ExpressionStatement	 
>1271	AssignmentExpr	fabMapResult_out = 0
>1272	PrimaryExpression	0
>1273	Identifier	fabMapResult_out
>1274	IdentifierDeclStatement	 
>1275	IdentifierDecl	appearanceBased = 0
>1276	AssignmentExpr	appearanceBased = 0
>1277	PrimaryExpression	0
>1278	Identifier	appearanceBased
>1279	Identifier	appearanceBased
>1280	IdentifierDeclType	int
>1281	ForStatement	for ( unsigned int i = 0 ; i < potentialReferenceFrames . size ( ) ; i ++ )
>1282	ExpressionStatement	 
>1283	CallExpression	results . insert ( potentialReferenceFrames [ i ] . ref )
>1284	ArgumentList	potentialReferenceFrames [ i ] . ref
>1285	Argument	potentialReferenceFrames [ i ] . ref
>1286	MemberAccess	potentialReferenceFrames [ i ] . ref
>1287	Identifier	ref
>1288	ArrayIndexing	potentialReferenceFrames [ i ]
>1289	Identifier	i
>1290	Identifier	potentialReferenceFrames
>1291	Callee	results . insert
>1292	MemberAccess	results . insert
>1293	Identifier	insert
>1294	Identifier	results
>1295	IncDecOp	 
>1296	IncDec	++
>1297	Identifier	i
>1298	Condition	 
>1299	RelationalExpression	i < potentialReferenceFrames . size ( )
>1300	CallExpression	potentialReferenceFrames . size ( )
>1301	ArgumentList	 
>1302	Callee	potentialReferenceFrames . size
>1303	MemberAccess	potentialReferenceFrames . size
>1304	Identifier	size
>1305	Identifier	potentialReferenceFrames
>1306	Identifier	i
>1307	ForInit	 
>1308	IdentifierDeclStatement	unsigned int i = 0 ;
>1309	IdentifierDecl	i = 0
>1310	AssignmentExpr	i = 0
>1311	PrimaryExpression	0
>1312	Identifier	i
>1313	Identifier	i
>1314	IdentifierDeclType	unsigned int
>1315	IdentifierDeclStatement	 
>1316	IdentifierDecl	potentialReferenceFrames = findEuclideanOverlapFrames ( keyframe , closenessTH * 15 / ( KFDistWeight * KFDistWeight ) , \
>1317	AssignmentExpr	potentialReferenceFrames = findEuclideanOverlapFrames ( keyframe , closenessTH * 15 / ( KFDistWeight * \
>1318	CallExpression	findEuclideanOverlapFrames ( keyframe , closenessTH * 15 / ( KFDistWeight * KFDistWeight ) , 1.0 - 0.25 * closenessTH , \
>1319	ArgumentList	keyframe
>1320	Argument	true
>1321	Identifier	true
>1322	Argument	1.0 - 0.25 * closenessTH
>1323	AdditiveExpression	1.0 - 0.25 * closenessTH
>1324	MultiplicativeExpression	0.25 * closenessTH
>1325	Identifier	closenessTH
>1326	PrimaryExpression	0.25
>1327	PrimaryExpression	1.0
>1328	Argument	closenessTH * 15 / ( KFDistWeight * KFDistWeight )
>1329	MultiplicativeExpression	closenessTH * 15 / ( KFDistWeight * KFDistWeight )
>1330	MultiplicativeExpression	15 / ( KFDistWeight * KFDistWeight )
>1331	MultiplicativeExpression	KFDistWeight * KFDistWeight
>1332	Identifier	KFDistWeight
>1333	Identifier	KFDistWeight
>1334	PrimaryExpression	15
>1335	Identifier	closenessTH
>1336	Argument	keyframe
>1337	Identifier	keyframe
>1338	Callee	findEuclideanOverlapFrames
>1339	Identifier	findEuclideanOverlapFrames
>1340	Identifier	potentialReferenceFrames
>1341	Identifier	potentialReferenceFrames
>1342	IdentifierDeclType	std 
>1343	IdentifierDeclStatement	 
>1344	IdentifierDecl	results
>1345	Identifier	results
>1346	IdentifierDeclType	std 
>1377	FunctionDef	TrackableKeyFrameSearch 
>1378	ParameterList	Frame * keyframe
>1379	Parameter	 
>1380	Identifier	keyframe
>1381	ParameterType	Frame *
>1382	ReturnType	Frame *
>1383	CompoundStatement	 
>1384	IfStatement	if ( loopID >= 0 )
>1385	ElseStatement	else
>1386	ReturnStatement	 
>1387	Identifier	nullptr
>1388	ReturnStatement	 
>1389	CallExpression	fabmapIDToKeyframe . at ( loopID )
>1390	ArgumentList	loopID
>1391	Argument	loopID
>1392	Identifier	loopID
>1393	Callee	fabmapIDToKeyframe . at
>1394	MemberAccess	fabmapIDToKeyframe . at
>1395	Identifier	at
>1396	Identifier	fabmapIDToKeyframe
>1397	Condition	 
>1398	RelationalExpression	loopID >= 0
>1399	PrimaryExpression	0
>1400	Identifier	loopID
>1401	ExpressionStatement	 
>1402	CallExpression	fabmapIDToKeyframe . insert ( std 
>1403	ArgumentList	std 
>1404	Argument	std 
>1405	CallExpression	std 
>1406	ArgumentList	newID
>1407	Argument	keyframe
>1408	Identifier	keyframe
>1409	Argument	newID
>1410	Identifier	newID
>1411	Callee	std 
>1412	Identifier	std 
>1413	Callee	fabmapIDToKeyframe . insert
>1414	MemberAccess	fabmapIDToKeyframe . insert
>1415	Identifier	insert
>1416	Identifier	fabmapIDToKeyframe
>1417	IfStatement	if ( newID < 0 )
>1418	ReturnStatement	 
>1419	Identifier	nullptr
>1420	Condition	 
>1421	RelationalExpression	newID < 0
>1422	PrimaryExpression	0
>1423	Identifier	newID
>1424	ExpressionStatement	 
>1425	CallExpression	fabMap . compareAndAdd ( keyframe , & newID , & loopID )
>1426	ArgumentList	keyframe
>1427	Argument	& loopID
>1428	UnaryOp	& loopID
>1429	Identifier	loopID
>1430	UnaryOperator	&
>1431	Argument	& newID
>1432	UnaryOp	& newID
>1433	Identifier	newID
>1434	UnaryOperator	&
>1435	Argument	keyframe
>1436	Identifier	keyframe
>1437	Callee	fabMap . compareAndAdd
>1438	MemberAccess	fabMap . compareAndAdd
>1439	Identifier	compareAndAdd
>1440	Identifier	fabMap
>1441	IdentifierDeclStatement	 
>1442	IdentifierDecl	loopID
>1443	Identifier	loopID
>1444	IdentifierDeclType	int
>1445	IdentifierDecl	newID
>1446	Identifier	newID
>1447	IdentifierDeclType	int
>1448	IfStatement	if ( ! fabMap . isValid ( ) )
>1449	CompoundStatement	 
>1450	ReturnStatement	 
>1451	Identifier	nullptr
>1452	ExpressionStatement	 
>1453	CallExpression	printf ( \"Error
>1454	ArgumentList	\"Error
>1455	Argument	\"Error
>1456	PrimaryExpression	\"Error
>1457	Callee	printf
>1458	Identifier	printf
>1459	Condition	 
>1460	UnaryOp	! fabMap . isValid ( )
>1461	CallExpression	fabMap . isValid ( )
>1462	ArgumentList	 
>1463	Callee	fabMap . isValid
>1464	MemberAccess	fabMap . isValid
>1465	Identifier	isValid
>1466	Identifier	fabMap
>1467	UnaryOperator	!
>1468	IfStatement	if ( ! useFabMap )
>1469	ReturnStatement	 
>1470	Identifier	nullptr
>1471	Condition	 
>1472	UnaryOp	! useFabMap
>1473	Identifier	useFabMap
>1474	UnaryOperator	!
<3=17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=94,70,46,42,38,34,18
<18=30,19
<19=20
<20=28,21
<21=26,24,22
<22=23
<24=25
<26=27
<28=29
<30=31
<31=33,32
<34=35
<35=37,36
<38=39
<39=41,40
<42=43
<43=45,44
<46=47
<47=69,48
<48=68,49
<49=66,50
<50=51
<51=52
<52=65,53
<53=55,54
<55=64,56
<56=62,57
<57=60,58
<58=59
<60=61
<62=63
<66=67
<70=71
<71=93,72
<72=92,73
<73=90,74
<74=75
<75=76
<76=89,77
<77=79,78
<79=88,80
<80=86,81
<81=84,82
<82=83
<84=85
<86=87
<90=91
<94=95
<95=101,96
<96=100,97
<97=99,98
<118=120,119
<120=123,121
<121=122
<127=142,141,128
<128=138,135,132,129
<129=131,130
<132=134,133
<135=137,136
<138=140,139
<142=488,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,445,438,417,408,154,145,143
<143=144
<145=146
<146=148,147
<148=149
<149=151,150
<151=153,152
<154=400,389,386,155
<155=365,336,325,314,300,294,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,275,274,273,272,271,270,269,268,267,253,247,235,220,178,167,156
<156=157
<157=159,158
<159=161,160
<161=163,162
<163=164
<164=166,165
<167=168
<168=170,169
<170=172,171
<172=174,173
<174=175
<175=177,176
<178=179
<179=212,180
<180=182,181
<182=183
<183=185,184
<185=210,186
<186=187
<187=188
<188=195,189
<189=191,190
<191=192
<192=194,193
<195=197,196
<197=198
<198=200,199
<200=202,201
<202=203
<203=205,204
<205=207,206
<207=209,208
<210=211
<212=214,213
<214=216,215
<216=217
<217=219,218
<220=221
<221=227,222
<222=224,223
<224=226,225
<227=229,228
<229=231,230
<231=232
<232=234,233
<235=236
<236=243,237
<237=238
<238=239
<239=241,240
<241=242
<243=244
<244=246,245
<247=249,248
<249=250
<250=252,251
<253=254
<254=266,265,255
<255=264,256
<256=260,257
<257=258
<258=259
<260=261
<261=263,262
<294=296,295
<296=297
<297=299,298
<300=301
<301=313,312,302
<302=311,303
<303=307,304
<304=305
<305=306
<307=308
<308=310,309
<314=315
<315=324,323,316
<316=322,317
<317=319,318
<319=321,320
<325=330,326
<326=327
<327=329,328
<330=331
<331=335,332
<332=334,333
<336=337
<337=364,363,338
<338=362,339
<339=355,340
<340=342,341
<342=343
<343=345,344
<345=347,346
<347=348
<348=350,349
<350=352,351
<352=354,353
<355=357,356
<357=359,358
<359=361,360
<365=366
<366=385,384,367
<367=383,368
<368=370,369
<370=371
<371=373,372
<373=375,374
<375=376
<376=378,377
<378=380,379
<380=382,381
<386=388,387
<389=390
<390=399,391
<391=393,392
<393=394
<394=396,395
<396=398,397
<400=401
<401=402
<402=407,406,403
<403=405,404
<408=409
<409=411,410
<411=412
<412=414,413
<414=416,415
<417=436,418
<418=419
<419=435,420
<420=432,421
<421=423,422
<423=424
<424=426,425
<426=428,427
<428=429
<429=431,430
<432=434,433
<436=437
<438=439
<439=444,443,440
<440=442,441
<445=446
<446=448,447
<471=472
<472=487,486,473
<473=485,474
<474=476,475
<476=477
<477=479,478
<479=481,480
<481=482
<482=484,483
<488=489
<489=505,504,490
<490=503,491
<491=501,492
<492=493
<493=494
<494=500,495
<495=499,496
<496=498,497
<501=502
<559=568,567,560
<560=564,561
<561=563,562
<564=566,565
<568=1057,1050,1043,1036,1029,1019,1009,1002,662,569
<569=658,608,570
<570=571
<571=574,572
<572=573
<574=604,575
<575=576
<576=602,577
<577=600,591,582,580,578
<578=579
<580=581
<582=583
<583=590,584
<584=586,585
<586=587
<587=589,588
<591=592
<592=599,593
<593=595,594
<595=596
<596=598,597
<600=601
<602=603
<604=605
<605=607,606
<608=611,609
<609=610
<611=654,612
<612=613
<613=652,614
<614=650,641,632,630,628,626,624,622,615
<615=616
<616=618,617
<618=619
<619=621,620
<622=623
<624=625
<626=627
<628=629
<630=631
<632=633
<633=640,634
<634=636,635
<636=637
<637=639,638
<641=642
<642=649,643
<643=645,644
<645=646
<646=648,647
<650=651
<652=653
<654=655
<655=657,656
<658=659
<659=661,660
<662=994,985,982,663
<663=967,955,948,937,918,907,879,875,855,664
<664=851,665
<665=825,805,782,754,733,729,666
<666=713,667
<667=709,705,697,689,685,674,668
<668=669
<669=673,670
<670=672,671
<674=675
<675=684,676
<676=680,677
<677=678
<678=679
<680=681
<681=683,682
<685=686
<686=688,687
<689=690
<690=696,691
<691=693,692
<693=695,694
<697=698
<698=704,699
<699=701,700
<701=703,702
<705=706
<706=708,707
<709=710
<710=712,711
<713=714
<714=726,715
<715=723,716
<716=720,717
<717=719,718
<720=722,721
<723=725,724
<726=728,727
<729=730
<730=732,731
<733=734
<734=753,752,735
<735=751,736
<736=748,737
<737=745,738
<738=742,739
<739=741,740
<742=744,743
<745=747,746
<748=750,749
<754=755
<755=781,780,756
<756=779,757
<757=759,758
<759=760
<760=762,761
<762=764,763
<764=765
<765=767,766
<767=774,768
<768=770,769
<770=771
<771=773,772
<774=776,775
<776=778,777
<782=783
<783=804,803,784
<784=802,785
<785=800,786
<786=791,787
<787=788
<788=790,789
<791=792
<792=796,793
<793=794
<794=795
<796=797
<797=799,798
<800=801
<805=806
<806=824,823,807
<807=822,808
<808=816,809
<809=811,810
<811=813,812
<813=815,814
<816=818,817
<818=819
<819=821,820
<825=826
<826=850,849,827
<827=848,828
<828=844,829
<829=838,836,830
<830=831
<831=833,832
<833=835,834
<836=837
<838=839
<839=841,840
<841=843,842
<844=845
<845=847,846
<851=852
<852=854,853
<855=856
<856=874,873,857
<857=872,858
<858=870,859
<859=864,860
<860=861
<861=863,862
<864=865
<865=867,866
<867=869,868
<870=871
<875=876
<876=878,877
<879=880
<880=906,881
<881=903,882
<882=902,883
<883=893,884
<884=886,885
<886=890,887
<887=889,888
<890=892,891
<893=895,894
<895=899,896
<896=898,897
<899=901,900
<903=905,904
<907=908
<908=916,909
<909=912,910
<910=911
<912=913
<913=915,914
<916=917
<918=919
<919=933,920
<920=927,921
<921=922
<922=924,923
<924=926,925
<927=928
<928=930,929
<930=932,931
<933=934
<934=936,935
<937=938
<938=946,939
<939=942,940
<940=941
<942=943
<943=945,944
<946=947
<948=952,949
<949=951,950
<952=954,953
<955=957,956
<957=958
<958=960,959
<960=962,961
<962=964,963
<964=966,965
<967=969,968
<969=970
<970=976,971
<971=973,972
<973=975,974
<976=978,977
<978=979
<979=981,980
<982=984,983
<985=986
<986=993,987
<987=989,988
<989=990
<990=992,991
<994=995
<995=996
<996=1001,1000,997
<997=999,998
<1002=1003
<1003=1008,1007,1004
<1004=1006,1005
<1009=1010
<1010=1018,1017,1011
<1011=1016,1012
<1012=1014,1013
<1014=1015
<1019=1020
<1020=1028,1027,1021
<1021=1026,1022
<1022=1024,1023
<1024=1025
<1029=1030
<1030=1035,1034,1031
<1031=1033,1032
<1036=1037
<1037=1042,1041,1038
<1038=1040,1039
<1043=1047,1044
<1044=1046,1045
<1047=1049,1048
<1050=1051
<1051=1056,1055,1052
<1052=1054,1053
<1057=1058
<1058=1076,1075,1059
<1059=1074,1060
<1060=1072,1061
<1061=1070,1064,1062
<1062=1063
<1064=1065
<1065=1069,1066
<1066=1068,1067
<1070=1071
<1072=1073
<1145=1160,1159,1146
<1146=1156,1153,1150,1147
<1147=1149,1148
<1150=1152,1151
<1153=1155,1154
<1156=1158,1157
<1160=1343,1315,1281,1274,1270,1204,1163,1161
<1161=1162
<1163=1200,1164
<1164=1165
<1165=1198,1166
<1166=1196,1187,1178,1176,1167
<1167=1168
<1168=1175,1169
<1169=1171,1170
<1171=1172
<1172=1174,1173
<1176=1177
<1178=1179
<1179=1186,1180
<1180=1182,1181
<1182=1183
<1183=1185,1184
<1187=1188
<1188=1195,1189
<1189=1191,1190
<1191=1192
<1192=1194,1193
<1196=1197
<1198=1199
<1200=1201
<1201=1203,1202
<1204=1268,1205
<1205=1259,1206
<1206=1255,1207
<1207=1246,1221,1208
<1208=1209
<1209=1220,1210
<1210=1219,1211
<1211=1213,1212
<1213=1214
<1214=1216,1215
<1216=1218,1217
<1221=1222
<1222=1242,1223
<1223=1233,1224
<1224=1225
<1225=1227,1226
<1227=1228
<1228=1230,1229
<1230=1232,1231
<1233=1234
<1234=1236,1235
<1236=1237
<1237=1239,1238
<1239=1241,1240
<1242=1243
<1243=1245,1244
<1246=1247
<1247=1251,1248
<1248=1249
<1249=1250
<1251=1252
<1252=1254,1253
<1255=1256
<1256=1258,1257
<1259=1260
<1260=1267,1261
<1261=1265,1262
<1262=1263
<1263=1264
<1265=1266
<1268=1269
<1270=1271
<1271=1273,1272
<1274=1275
<1275=1280,1279,1276
<1276=1278,1277
<1281=1307,1298,1295,1282
<1282=1283
<1283=1291,1284
<1284=1285
<1285=1286
<1286=1288,1287
<1288=1290,1289
<1291=1292
<1292=1294,1293
<1295=1297,1296
<1298=1299
<1299=1306,1300
<1300=1302,1301
<1302=1303
<1303=1305,1304
<1307=1308
<1308=1309
<1309=1314,1313,1310
<1310=1312,1311
<1315=1316
<1316=1342,1341,1317
<1317=1340,1318
<1318=1338,1319
<1319=1336,1328,1322,1320
<1320=1321
<1322=1323
<1323=1327,1324
<1324=1326,1325
<1328=1329
<1329=1335,1330
<1330=1334,1331
<1331=1333,1332
<1336=1337
<1338=1339
<1343=1344
<1344=1346,1345
<1377=1383,1382,1378
<1378=1379
<1379=1381,1380
<1383=1468,1448,1441,1424,1417,1401,1384
<1384=1397,1388,1385
<1385=1386
<1386=1387
<1388=1389
<1389=1393,1390
<1390=1391
<1391=1392
<1393=1394
<1394=1396,1395
<1397=1398
<1398=1400,1399
<1401=1402
<1402=1413,1403
<1403=1404
<1404=1405
<1405=1411,1406
<1406=1409,1407
<1407=1408
<1409=1410
<1411=1412
<1413=1414
<1414=1416,1415
<1417=1420,1418
<1418=1419
<1420=1421
<1421=1423,1422
<1424=1425
<1425=1437,1426
<1426=1435,1431,1427
<1427=1428
<1428=1430,1429
<1431=1432
<1432=1434,1433
<1435=1436
<1437=1438
<1438=1440,1439
<1441=1445,1442
<1442=1444,1443
<1445=1447,1446
<1448=1459,1449
<1449=1452,1450
<1450=1451
<1452=1453
<1453=1457,1454
<1454=1455
<1455=1456
<1457=1458
<1459=1460
<1460=1467,1461
<1461=1463,1462
<1463=1464
<1464=1466,1465
<1468=1471,1469
<1469=1470
<1471=1472
<1472=1474,1473
