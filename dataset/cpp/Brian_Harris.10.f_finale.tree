>63	FunctionDef	F_StartFinale ()
>64	ParameterList	 
>65	ReturnType	void
>66	CompoundStatement	 
>67	CompoundStatement	 
>68	ExpressionStatement	 
>69	AssignmentExpr	endOfMission = true
>70	Identifier	true
>71	Identifier	endOfMission
>72	Statement	 
>73	Statement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	Statement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	IdentifierDeclStatement	 
>112	IdentifierDecl	endOfMission = false
>113	AssignmentExpr	endOfMission = false
>114	Identifier	false
>115	Identifier	false
>116	Identifier	endOfMission
>117	IdentifierDeclType	bool
>118	ExpressionStatement	 
>119	AssignmentExpr	g -> automapactive = false
>120	Identifier	false
>121	PtrMemberAccess	g -> automapactive
>122	Identifier	automapactive
>123	Identifier	g
>124	Statement	 
>125	ExpressionStatement	 
>126	AssignmentExpr	g -> viewactive = false
>127	Identifier	false
>128	PtrMemberAccess	g -> viewactive
>129	Identifier	viewactive
>130	Identifier	g
>131	Statement	 
>132	ExpressionStatement	 
>133	AssignmentExpr	g -> gamestate = GS_FINALE
>134	Identifier	GS_FINALE
>135	PtrMemberAccess	g -> gamestate
>136	Identifier	gamestate
>137	Identifier	g
>138	Statement	 
>139	ExpressionStatement	 
>140	AssignmentExpr	g -> gameaction = ga_nothing
>141	Identifier	ga_nothing
>142	PtrMemberAccess	g -> gameaction
>143	Identifier	gameaction
>144	Identifier	g
>145	Statement	 
>164	FunctionDef	F_Responder (event_t * event)
>165	ParameterList	event_t * event
>166	Parameter	 
>167	Identifier	event
>168	ParameterType	event_t *
>169	ReturnType	qboolean
>170	CompoundStatement	 
>171	ReturnStatement	 
>172	Identifier	false
>173	ReturnStatement	 
>174	CallExpression	F_CastResponder ( event )
>175	ArgumentList	event
>176	Argument	event
>177	Identifier	event
>178	Callee	F_CastResponder
>179	Identifier	F_CastResponder
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	IfStatement	if ( ! common -> IsMultiplayer ( ) && event -> type == ev_keydown && event -> data1 == KEY_ESCAPE )
>190	CompoundStatement	 
>191	ReturnStatement	 
>192	Identifier	true
>193	ExpressionStatement	 
>194	AssignmentExpr	startButtonPressed = true
>195	Identifier	true
>196	Identifier	startButtonPressed
>197	Condition	 
>198	AndExpression	! common -> IsMultiplayer ( ) && event -> type == ev_keydown && event -> data1 == KEY_ESCAPE
>199	AndExpression	event -> type == ev_keydown && event -> data1 == KEY_ESCAPE
>200	EqualityExpression	event -> data1 == KEY_ESCAPE
>201	Identifier	KEY_ESCAPE
>202	PtrMemberAccess	event -> data1
>203	Identifier	data1
>204	Identifier	event
>205	EqualityExpression	event -> type == ev_keydown
>206	Identifier	ev_keydown
>207	PtrMemberAccess	event -> type
>208	Identifier	type
>209	Identifier	event
>210	UnaryOp	! common -> IsMultiplayer ( )
>211	CallExpression	common -> IsMultiplayer ( )
>212	ArgumentList	 
>213	Callee	common -> IsMultiplayer
>214	PtrMemberAccess	common -> IsMultiplayer
>215	Identifier	IsMultiplayer
>216	Identifier	common
>217	UnaryOperator	!
>234	FunctionDef	F_Ticker ()
>235	ParameterList	 
>236	ReturnType	void
>237	CompoundStatement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	Statement	 
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	IdentifierDeclStatement	 
>259	IdentifierDecl	i
>260	Identifier	i
>261	IdentifierDeclType	int
>266	FunctionDef	F_TextWrite ()
>267	ParameterList	 
>268	ReturnType	void
>269	CompoundStatement	 
>270	ForStatement	for ( ; count ; count -- )
>271	CompoundStatement	 
>272	ExpressionStatement	 
>273	AssignmentExpr	cx += w
>274	Identifier	w
>275	Identifier	cx
>276	ExpressionStatement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	IfStatement	if ( cx + w > SCREENWIDTH )
>294	BreakStatement	 
>295	Condition	 
>296	RelationalExpression	cx + w > SCREENWIDTH
>297	Identifier	SCREENWIDTH
>298	AdditiveExpression	cx + w
>299	Identifier	w
>300	Identifier	cx
>301	ExpressionStatement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	Statement	 
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	IfStatement	if ( c < 0 || c > HU_FONTSIZE )
>317	CompoundStatement	 
>318	ContinueStatement	 
>319	ExpressionStatement	 
>320	AssignmentExpr	cx += 4
>321	PrimaryExpression	4
>322	Identifier	cx
>323	Condition	 
>324	OrExpression	c < 0 || c > HU_FONTSIZE
>325	RelationalExpression	c > HU_FONTSIZE
>326	Identifier	HU_FONTSIZE
>327	Identifier	c
>328	RelationalExpression	c < 0
>329	PrimaryExpression	0
>330	Identifier	c
>331	ExpressionStatement	 
>332	AssignmentExpr	c = toupper ( c ) - HU_FONTSTART
>333	AdditiveExpression	toupper ( c ) - HU_FONTSTART
>334	Identifier	HU_FONTSTART
>335	CallExpression	toupper ( c )
>336	ArgumentList	c
>337	Argument	c
>338	Identifier	c
>339	Callee	toupper
>340	Identifier	toupper
>341	Identifier	c
>342	IfStatement	if ( c == '\n' )
>343	CompoundStatement	 
>344	ContinueStatement	 
>345	ExpressionStatement	 
>346	AssignmentExpr	cy += 11
>347	PrimaryExpression	11
>348	Identifier	cy
>349	ExpressionStatement	 
>350	AssignmentExpr	cx = 10
>351	PrimaryExpression	10
>352	Identifier	cx
>353	Condition	 
>354	EqualityExpression	c == '\n'
>355	PrimaryExpression	'\n'
>356	Identifier	c
>357	IfStatement	if ( ! c )
>358	BreakStatement	 
>359	Condition	 
>360	UnaryOp	! c
>361	Identifier	c
>362	UnaryOperator	!
>363	ExpressionStatement	 
>364	AssignmentExpr	c = * ch ++
>365	UnaryOp	* ch ++
>366	IncDecOp	ch ++
>367	IncDec	++
>368	Identifier	ch
>369	UnaryOperator	*
>370	Identifier	c
>371	IncDecOp	 
>372	IncDec	--
>373	Identifier	count
>374	Condition	 
>375	Identifier	count
>376	IfStatement	if ( count < 0 )
>377	ExpressionStatement	 
>378	AssignmentExpr	count = 0
>379	PrimaryExpression	0
>380	Identifier	count
>381	Condition	 
>382	RelationalExpression	count < 0
>383	PrimaryExpression	0
>384	Identifier	count
>385	ExpressionStatement	 
>386	Identifier	TEXTSPEED
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	ExpressionStatement	 
>399	AssignmentExpr	ch = finaletext
>400	Identifier	finaletext
>401	Identifier	ch
>402	ExpressionStatement	 
>403	AssignmentExpr	cy = 10
>404	PrimaryExpression	10
>405	Identifier	cy
>406	ExpressionStatement	 
>407	AssignmentExpr	cx = 10
>408	PrimaryExpression	10
>409	Identifier	cx
>410	ExpressionStatement	 
>411	CallExpression	V_MarkRect ( 0 , 0 , SCREENWIDTH , SCREENHEIGHT )
>412	ArgumentList	0
>413	Argument	SCREENHEIGHT
>414	Identifier	SCREENHEIGHT
>415	Argument	SCREENWIDTH
>416	Identifier	SCREENWIDTH
>417	Argument	0
>418	PrimaryExpression	0
>419	Argument	0
>420	PrimaryExpression	0
>421	Callee	V_MarkRect
>422	Identifier	V_MarkRect
>423	ForStatement	for ( y = 0 ; y < SCREENHEIGHT ; y ++ )
>424	CompoundStatement	 
>425	IfStatement	if ( SCREENWIDTH & 63 )
>426	CompoundStatement	 
>427	ExpressionStatement	 
>428	AssignmentExpr	dest += ( SCREENWIDTH & 63 )
>429	BitAndExpression	SCREENWIDTH & 63
>430	PrimaryExpression	63
>431	Identifier	SCREENWIDTH
>432	Identifier	dest
>433	ExpressionStatement	 
>434	CallExpression	memcpy ( dest , src + ( ( y & 63 ) << 6 ) , SCREENWIDTH & 63 )
>435	ArgumentList	dest
>436	Argument	SCREENWIDTH & 63
>437	BitAndExpression	SCREENWIDTH & 63
>438	PrimaryExpression	63
>439	Identifier	SCREENWIDTH
>440	Argument	src + ( ( y & 63 ) << 6 )
>441	AdditiveExpression	src + ( ( y & 63 ) << 6 )
>442	ShiftExpression	( y & 63 ) << 6
>443	PrimaryExpression	6
>444	BitAndExpression	y & 63
>445	PrimaryExpression	63
>446	Identifier	y
>447	Identifier	src
>448	Argument	dest
>449	Identifier	dest
>450	Callee	memcpy
>451	Identifier	memcpy
>452	Condition	 
>453	BitAndExpression	SCREENWIDTH & 63
>454	PrimaryExpression	63
>455	Identifier	SCREENWIDTH
>456	ForStatement	for ( x = 0 ; x < SCREENWIDTH / 64 ; x ++ )
>457	CompoundStatement	 
>458	ExpressionStatement	 
>459	AssignmentExpr	dest += 64
>460	PrimaryExpression	64
>461	Identifier	dest
>462	ExpressionStatement	 
>463	CallExpression	memcpy ( dest , src + ( ( y & 63 ) << 6 ) , 64 )
>464	ArgumentList	dest
>465	Argument	64
>466	PrimaryExpression	64
>467	Argument	src + ( ( y & 63 ) << 6 )
>468	AdditiveExpression	src + ( ( y & 63 ) << 6 )
>469	ShiftExpression	( y & 63 ) << 6
>470	PrimaryExpression	6
>471	BitAndExpression	y & 63
>472	PrimaryExpression	63
>473	Identifier	y
>474	Identifier	src
>475	Argument	dest
>476	Identifier	dest
>477	Callee	memcpy
>478	Identifier	memcpy
>479	IncDecOp	 
>480	IncDec	++
>481	Identifier	x
>482	Condition	 
>483	RelationalExpression	x < SCREENWIDTH / 64
>484	MultiplicativeExpression	SCREENWIDTH / 64
>485	PrimaryExpression	64
>486	Identifier	SCREENWIDTH
>487	Identifier	x
>488	ForInit	 
>489	AssignmentExpr	x = 0
>490	PrimaryExpression	0
>491	Identifier	x
>492	IncDecOp	 
>493	IncDec	++
>494	Identifier	y
>495	Condition	 
>496	RelationalExpression	y < SCREENHEIGHT
>497	Identifier	SCREENHEIGHT
>498	Identifier	y
>499	ForInit	 
>500	AssignmentExpr	y = 0
>501	PrimaryExpression	0
>502	Identifier	y
>503	ExpressionStatement	 
>504	ArrayIndexing	g -> screens [ 0 ]
>505	PrimaryExpression	0
>506	PtrMemberAccess	g -> screens
>507	Identifier	screens
>508	Identifier	g
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	ExpressionStatement	 
>513	AssignmentExpr	src = ( byte * ) W_CacheLumpName ( finaleflat , PU_CACHE_SHARED )
>514	CastExpression	( byte * ) W_CacheLumpName ( finaleflat , PU_CACHE_SHARED )
>515	CallExpression	W_CacheLumpName ( finaleflat , PU_CACHE_SHARED )
>516	ArgumentList	finaleflat
>517	Argument	PU_CACHE_SHARED
>518	Identifier	PU_CACHE_SHARED
>519	Argument	finaleflat
>520	Identifier	finaleflat
>521	Callee	W_CacheLumpName
>522	Identifier	W_CacheLumpName
>523	CastTarget	byte *
>524	Identifier	src
>525	CompoundStatement	 
>526	ExpressionStatement	 
>527	CallExpression	DoomLib 
>528	ArgumentList	true
>529	Argument	true
>530	Identifier	true
>531	Callee	DoomLib 
>532	Identifier	DoomLib 
>533	Statement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	Statement	 
>538	Statement	 
>539	Statement	 
>540	Statement	 
>541	Statement	 
>542	IdentifierDeclStatement	 
>543	IdentifierDecl	cy
>544	Identifier	cy
>545	IdentifierDeclType	int
>546	IdentifierDeclStatement	 
>547	IdentifierDecl	cx
>548	Identifier	cx
>549	IdentifierDeclType	int
>550	IdentifierDeclStatement	 
>551	IdentifierDecl	c
>552	Identifier	c
>553	IdentifierDeclType	int
>554	IdentifierDeclStatement	 
>555	IdentifierDecl	* ch
>556	Identifier	ch
>557	IdentifierDeclType	const char *
>558	IdentifierDeclStatement	 
>559	IdentifierDecl	count
>560	Identifier	count
>561	IdentifierDeclType	int
>562	IdentifierDeclStatement	 
>563	IdentifierDecl	w
>564	Identifier	w
>565	IdentifierDeclType	int
>566	IdentifierDecl	y
>567	Identifier	y
>568	IdentifierDeclType	int
>569	IdentifierDecl	x
>570	Identifier	x
>571	IdentifierDeclType	int
>572	IdentifierDeclStatement	 
>573	IdentifierDecl	* dest
>574	Identifier	dest
>575	IdentifierDeclType	byte *
>576	IdentifierDeclStatement	 
>577	IdentifierDecl	* src
>578	Identifier	src
>579	IdentifierDeclType	byte *
>610	FunctionDef	F_StartCast ()
>611	ParameterList	 
>612	ReturnType	void
>613	CompoundStatement	 
>614	CompoundStatement	 
>615	ExpressionStatement	 
>616	AdditiveExpression	g -> finalecount + 50
>617	PrimaryExpression	50
>618	PtrMemberAccess	g -> finalecount
>619	Identifier	finalecount
>620	Identifier	g
>621	Statement	 
>622	Statement	 
>623	Statement	 
>624	Statement	 
>625	Statement	 
>626	Statement	 
>627	ExpressionStatement	 
>628	CallExpression	S_ChangeMusic ( mus_evil , true )
>629	ArgumentList	mus_evil
>630	Argument	true
>631	Identifier	true
>632	Argument	mus_evil
>633	Identifier	mus_evil
>634	Callee	S_ChangeMusic
>635	Identifier	S_ChangeMusic
>636	ExpressionStatement	 
>637	AssignmentExpr	g -> castattacking = false
>638	Identifier	false
>639	PtrMemberAccess	g -> castattacking
>640	Identifier	castattacking
>641	Identifier	g
>642	Statement	 
>643	ExpressionStatement	 
>644	AssignmentExpr	g -> castonmelee = 0
>645	PrimaryExpression	0
>646	PtrMemberAccess	g -> castonmelee
>647	Identifier	castonmelee
>648	Identifier	g
>649	Statement	 
>650	ExpressionStatement	 
>651	AssignmentExpr	g -> castframes = 0
>652	PrimaryExpression	0
>653	PtrMemberAccess	g -> castframes
>654	Identifier	castframes
>655	Identifier	g
>656	Statement	 
>657	ExpressionStatement	 
>658	AssignmentExpr	g -> finalestage = 2
>659	PrimaryExpression	2
>660	PtrMemberAccess	g -> finalestage
>661	Identifier	finalestage
>662	Identifier	g
>663	Statement	 
>664	ExpressionStatement	 
>665	AssignmentExpr	g -> castdeath = false
>666	Identifier	false
>667	PtrMemberAccess	g -> castdeath
>668	Identifier	castdeath
>669	Identifier	g
>670	Statement	 
>671	ExpressionStatement	 
>672	PtrMemberAccess	g -> caststate -> tics
>673	Identifier	tics
>674	PtrMemberAccess	g -> caststate
>675	Identifier	caststate
>676	Identifier	g
>677	Statement	 
>678	Statement	 
>679	Statement	 
>680	Statement	 
>681	Statement	 
>682	Statement	 
>683	ExpressionStatement	 
>684	Statement	 
>685	Statement	 
>686	Statement	 
>687	Statement	 
>688	Statement	 
>689	Statement	 
>690	Statement	 
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	Statement	 
>699	Statement	 
>700	Statement	 
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	ExpressionStatement	 
>711	AssignmentExpr	g -> castnum = 0
>712	PrimaryExpression	0
>713	PtrMemberAccess	g -> castnum
>714	Identifier	castnum
>715	Identifier	g
>716	Statement	 
>717	ExpressionStatement	 
>718	AssignmentExpr	g -> wipegamestate = ( gamestate_t ) - 1
>719	CastExpression	( gamestate_t ) - 1
>720	UnaryOp	- 1
>721	PrimaryExpression	1
>722	UnaryOperator	-
>723	CastTarget	gamestate_t
>724	PtrMemberAccess	g -> wipegamestate
>725	Identifier	wipegamestate
>726	Identifier	g
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	Statement	 
>734	Statement	 
>735	Statement	 
>736	Statement	 
>753	FunctionDef	F_CastTicker ()
>754	ParameterList	 
>755	ReturnType	void
>756	CompoundStatement	 
>757	CompoundStatement	 
>758	ExpressionStatement	 
>759	AssignmentExpr	g -> castframes = 0
>760	PrimaryExpression	0
>761	PtrMemberAccess	g -> castframes
>762	Identifier	castframes
>763	Identifier	g
>764	Statement	 
>765	ExpressionStatement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	ExpressionStatement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	Statement	 
>801	Statement	 
>802	Statement	 
>803	Statement	 
>804	Statement	 
>805	Statement	 
>806	Statement	 
>807	Statement	 
>808	Statement	 
>809	Statement	 
>810	Statement	 
>811	Statement	 
>812	Statement	 
>813	Statement	 
>814	Statement	 
>815	Statement	 
>816	Statement	 
>817	Statement	 
>818	Statement	 
>819	Statement	 
>820	Statement	 
>821	Statement	 
>822	Statement	 
>823	Statement	 
>824	Statement	 
>825	Statement	 
>826	Statement	 
>827	Statement	 
>828	Statement	 
>829	ExpressionStatement	 
>830	AssignmentExpr	g -> castnum = 0
>831	PrimaryExpression	0
>832	PtrMemberAccess	g -> castnum
>833	Identifier	castnum
>834	Identifier	g
>835	Statement	 
>836	Statement	 
>837	Statement	 
>838	Statement	 
>839	Statement	 
>840	Statement	 
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	Statement	 
>846	Statement	 
>847	Statement	 
>848	Statement	 
>849	Statement	 
>850	ExpressionStatement	 
>851	AssignmentExpr	g -> castdeath = false
>852	Identifier	false
>853	PtrMemberAccess	g -> castdeath
>854	Identifier	castdeath
>855	Identifier	g
>856	Statement	 
>857	ExpressionStatement	 
>858	IncDecOp	g -> castnum ++
>859	IncDec	++
>860	PtrMemberAccess	g -> castnum
>861	Identifier	castnum
>862	Identifier	g
>863	Statement	 
>864	Statement	 
>865	Statement	 
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	Statement	 
>877	Statement	 
>878	Statement	 
>879	Statement	 
>880	Statement	 
>881	Statement	 
>882	Statement	 
>883	Statement	 
>884	Statement	 
>885	ReturnStatement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	Statement	 
>896	CompoundStatement	 
>897	ExpressionStatement	 
>898	CallExpression	DoomLib 
>899	ArgumentList	true
>900	Argument	true
>901	Identifier	true
>902	Callee	DoomLib 
>903	Identifier	DoomLib 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	IdentifierDeclStatement	 
>917	IdentifierDecl	sfx
>918	Identifier	sfx
>919	IdentifierDeclType	int
>920	IdentifierDeclStatement	 
>921	IdentifierDecl	st
>922	Identifier	st
>923	IdentifierDeclType	int
>936	FunctionDef	F_CastResponder (event_t * ev)
>937	ParameterList	event_t * ev
>938	Parameter	 
>939	Identifier	ev
>940	ParameterType	event_t *
>941	ReturnType	qboolean
>942	CompoundStatement	 
>943	ReturnStatement	 
>944	Identifier	true
>945	ExpressionStatement	 
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	Statement	 
>955	Statement	 
>956	Statement	 
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	Statement	 
>970	Statement	 
>971	Statement	 
>972	Statement	 
>973	Statement	 
>974	Statement	 
>975	Statement	 
>976	Statement	 
>977	Statement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	Statement	 
>982	ExpressionStatement	 
>983	AssignmentExpr	g -> castattacking = false
>984	Identifier	false
>985	PtrMemberAccess	g -> castattacking
>986	Identifier	castattacking
>987	Identifier	g
>988	Statement	 
>989	ExpressionStatement	 
>990	AssignmentExpr	g -> castframes = 0
>991	PrimaryExpression	0
>992	PtrMemberAccess	g -> castframes
>993	Identifier	castframes
>994	Identifier	g
>995	Statement	 
>996	ExpressionStatement	 
>997	PtrMemberAccess	g -> caststate -> tics
>998	Identifier	tics
>999	PtrMemberAccess	g -> caststate
>1000	Identifier	caststate
>1001	Identifier	g
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	Statement	 
>1006	Statement	 
>1007	Statement	 
>1008	ExpressionStatement	 
>1009	Statement	 
>1010	Statement	 
>1011	Statement	 
>1012	Statement	 
>1013	Statement	 
>1014	Statement	 
>1015	Statement	 
>1016	Statement	 
>1017	Statement	 
>1018	Statement	 
>1019	Statement	 
>1020	Statement	 
>1021	Statement	 
>1022	Statement	 
>1023	Statement	 
>1024	Statement	 
>1025	Statement	 
>1026	Statement	 
>1027	Statement	 
>1028	Statement	 
>1029	Statement	 
>1030	Statement	 
>1031	Statement	 
>1032	Statement	 
>1033	Statement	 
>1034	Statement	 
>1035	ExpressionStatement	 
>1036	AssignmentExpr	g -> castdeath = true
>1037	Identifier	true
>1038	PtrMemberAccess	g -> castdeath
>1039	Identifier	castdeath
>1040	Identifier	g
>1041	Statement	 
>1042	ReturnStatement	 
>1043	Identifier	true
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	IfStatement	if ( ev -> type != ev_keydown )
>1052	ReturnStatement	 
>1053	Identifier	false
>1054	Condition	 
>1055	EqualityExpression	ev -> type != ev_keydown
>1056	Identifier	ev_keydown
>1057	PtrMemberAccess	ev -> type
>1058	Identifier	type
>1059	Identifier	ev
>1075	FunctionDef	F_CastPrint (char * text)
>1076	ParameterList	char * text
>1077	Parameter	 
>1078	Identifier	text
>1079	ParameterType	char *
>1080	ReturnType	void
>1081	CompoundStatement	 
>1082	WhileStatement	while ( ch )
>1083	CompoundStatement	 
>1084	ExpressionStatement	 
>1085	AssignmentExpr	cx += w
>1086	Identifier	w
>1087	Identifier	cx
>1088	ExpressionStatement	 
>1089	Statement	 
>1090	Statement	 
>1091	Statement	 
>1092	Statement	 
>1093	Statement	 
>1094	Statement	 
>1095	Statement	 
>1096	Statement	 
>1097	Statement	 
>1098	Statement	 
>1099	Statement	 
>1100	Statement	 
>1101	Statement	 
>1102	Statement	 
>1103	Statement	 
>1104	Statement	 
>1105	ExpressionStatement	 
>1106	Statement	 
>1107	Statement	 
>1108	Statement	 
>1109	Statement	 
>1110	Statement	 
>1111	Statement	 
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	IfStatement	if ( c < 0 || c > HU_FONTSIZE )
>1121	CompoundStatement	 
>1122	ContinueStatement	 
>1123	ExpressionStatement	 
>1124	AssignmentExpr	cx += 4
>1125	PrimaryExpression	4
>1126	Identifier	cx
>1127	Condition	 
>1128	OrExpression	c < 0 || c > HU_FONTSIZE
>1129	RelationalExpression	c > HU_FONTSIZE
>1130	Identifier	HU_FONTSIZE
>1131	Identifier	c
>1132	RelationalExpression	c < 0
>1133	PrimaryExpression	0
>1134	Identifier	c
>1135	ExpressionStatement	 
>1136	AssignmentExpr	c = toupper ( c ) - HU_FONTSTART
>1137	AdditiveExpression	toupper ( c ) - HU_FONTSTART
>1138	Identifier	HU_FONTSTART
>1139	CallExpression	toupper ( c )
>1140	ArgumentList	c
>1141	Argument	c
>1142	Identifier	c
>1143	Callee	toupper
>1144	Identifier	toupper
>1145	Identifier	c
>1146	IfStatement	if ( ! c )
>1147	BreakStatement	 
>1148	Condition	 
>1149	UnaryOp	! c
>1150	Identifier	c
>1151	UnaryOperator	!
>1152	ExpressionStatement	 
>1153	AssignmentExpr	c = * ch ++
>1154	UnaryOp	* ch ++
>1155	IncDecOp	ch ++
>1156	IncDec	++
>1157	Identifier	ch
>1158	UnaryOperator	*
>1159	Identifier	c
>1160	Condition	 
>1161	Identifier	ch
>1162	ExpressionStatement	 
>1163	AssignmentExpr	ch = text
>1164	Identifier	text
>1165	Identifier	ch
>1166	ExpressionStatement	 
>1167	AssignmentExpr	cx = 160 - width / 2
>1168	AdditiveExpression	160 - width / 2
>1169	MultiplicativeExpression	width / 2
>1170	PrimaryExpression	2
>1171	Identifier	width
>1172	PrimaryExpression	160
>1173	Identifier	cx
>1174	WhileStatement	while ( ch )
>1175	CompoundStatement	 
>1176	ExpressionStatement	 
>1177	AssignmentExpr	width += w
>1178	Identifier	w
>1179	Identifier	width
>1180	ExpressionStatement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	Statement	 
>1191	Statement	 
>1192	Statement	 
>1193	Statement	 
>1194	Statement	 
>1195	IfStatement	if ( c < 0 || c > HU_FONTSIZE )
>1196	CompoundStatement	 
>1197	ContinueStatement	 
>1198	ExpressionStatement	 
>1199	AssignmentExpr	width += 4
>1200	PrimaryExpression	4
>1201	Identifier	width
>1202	Condition	 
>1203	OrExpression	c < 0 || c > HU_FONTSIZE
>1204	RelationalExpression	c > HU_FONTSIZE
>1205	Identifier	HU_FONTSIZE
>1206	Identifier	c
>1207	RelationalExpression	c < 0
>1208	PrimaryExpression	0
>1209	Identifier	c
>1210	ExpressionStatement	 
>1211	AssignmentExpr	c = toupper ( c ) - HU_FONTSTART
>1212	AdditiveExpression	toupper ( c ) - HU_FONTSTART
>1213	Identifier	HU_FONTSTART
>1214	CallExpression	toupper ( c )
>1215	ArgumentList	c
>1216	Argument	c
>1217	Identifier	c
>1218	Callee	toupper
>1219	Identifier	toupper
>1220	Identifier	c
>1221	IfStatement	if ( ! c )
>1222	BreakStatement	 
>1223	Condition	 
>1224	UnaryOp	! c
>1225	Identifier	c
>1226	UnaryOperator	!
>1227	ExpressionStatement	 
>1228	AssignmentExpr	c = * ch ++
>1229	UnaryOp	* ch ++
>1230	IncDecOp	ch ++
>1231	IncDec	++
>1232	Identifier	ch
>1233	UnaryOperator	*
>1234	Identifier	c
>1235	Condition	 
>1236	Identifier	ch
>1237	ExpressionStatement	 
>1238	AssignmentExpr	width = 0
>1239	PrimaryExpression	0
>1240	Identifier	width
>1241	ExpressionStatement	 
>1242	AssignmentExpr	ch = text
>1243	Identifier	text
>1244	Identifier	ch
>1245	IdentifierDeclStatement	 
>1246	IdentifierDecl	width
>1247	Identifier	width
>1248	IdentifierDeclType	int
>1249	IdentifierDeclStatement	 
>1250	IdentifierDecl	w
>1251	Identifier	w
>1252	IdentifierDeclType	int
>1253	IdentifierDeclStatement	 
>1254	IdentifierDecl	cx
>1255	Identifier	cx
>1256	IdentifierDeclType	int
>1257	IdentifierDeclStatement	 
>1258	IdentifierDecl	c
>1259	Identifier	c
>1260	IdentifierDeclType	int
>1261	IdentifierDeclStatement	 
>1262	IdentifierDecl	* ch
>1263	Identifier	ch
>1264	IdentifierDeclType	char *
>1281	FunctionDef	F_CastDrawer ()
>1282	ParameterList	 
>1283	ReturnType	void
>1284	CompoundStatement	 
>1285	IfStatement	if ( flip )
>1286	ElseStatement	else
>1287	ExpressionStatement	 
>1288	CallExpression	V_DrawPatch ( 160 , 170 , 0 , patch )
>1289	ArgumentList	160
>1290	Argument	patch
>1291	Identifier	patch
>1292	Argument	0
>1293	PrimaryExpression	0
>1294	Argument	170
>1295	PrimaryExpression	170
>1296	Argument	160
>1297	PrimaryExpression	160
>1298	Callee	V_DrawPatch
>1299	Identifier	V_DrawPatch
>1300	ExpressionStatement	 
>1301	CallExpression	V_DrawPatchFlipped ( 160 , 170 , 0 , patch )
>1302	ArgumentList	160
>1303	Argument	patch
>1304	Identifier	patch
>1305	Argument	0
>1306	PrimaryExpression	0
>1307	Argument	170
>1308	PrimaryExpression	170
>1309	Argument	160
>1310	PrimaryExpression	160
>1311	Callee	V_DrawPatchFlipped
>1312	Identifier	V_DrawPatchFlipped
>1313	Condition	 
>1314	Identifier	flip
>1315	ExpressionStatement	 
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	Statement	 
>1320	Statement	 
>1321	Statement	 
>1322	Statement	 
>1323	Statement	 
>1324	Statement	 
>1325	Statement	 
>1326	Statement	 
>1327	Statement	 
>1328	Statement	 
>1329	Statement	 
>1330	Statement	 
>1331	Statement	 
>1332	Statement	 
>1333	ExpressionStatement	 
>1334	AssignmentExpr	flip = ( qboolean ) sprframe -> flip [ 0 ]
>1335	CastExpression	( qboolean ) sprframe -> flip [ 0 ]
>1336	ArrayIndexing	sprframe -> flip [ 0 ]
>1337	PrimaryExpression	0
>1338	PtrMemberAccess	sprframe -> flip
>1339	Identifier	flip
>1340	Identifier	sprframe
>1341	CastTarget	qboolean
>1342	Identifier	flip
>1343	ExpressionStatement	 
>1344	AssignmentExpr	lump = sprframe -> lump [ 0 ]
>1345	ArrayIndexing	sprframe -> lump [ 0 ]
>1346	PrimaryExpression	0
>1347	PtrMemberAccess	sprframe -> lump
>1348	Identifier	lump
>1349	Identifier	sprframe
>1350	Identifier	lump
>1351	ExpressionStatement	 
>1352	Statement	 
>1353	Statement	 
>1354	Statement	 
>1355	Statement	 
>1356	Statement	 
>1357	Statement	 
>1358	Statement	 
>1359	Statement	 
>1360	Statement	 
>1361	Statement	 
>1362	Statement	 
>1363	Statement	 
>1364	Statement	 
>1365	Statement	 
>1366	Statement	 
>1367	Statement	 
>1368	ExpressionStatement	 
>1369	Statement	 
>1370	Statement	 
>1371	Statement	 
>1372	Statement	 
>1373	Statement	 
>1374	Statement	 
>1375	Statement	 
>1376	Statement	 
>1377	Statement	 
>1378	Statement	 
>1379	Statement	 
>1380	Statement	 
>1381	Statement	 
>1382	Statement	 
>1383	Statement	 
>1384	ExpressionStatement	 
>1385	Statement	 
>1386	Statement	 
>1387	Statement	 
>1388	Statement	 
>1389	Statement	 
>1390	Statement	 
>1391	Statement	 
>1392	Statement	 
>1393	Statement	 
>1394	Statement	 
>1395	Statement	 
>1396	Statement	 
>1397	ExpressionStatement	 
>1398	CallExpression	V_DrawPatch ( 0 , 0 , 0 , ( patch_t * ) W_CacheLumpName ( \"BOSSBACK\" , PU_CACHE_SHARED ) )
>1399	ArgumentList	0
>1400	Argument	( patch_t * ) W_CacheLumpName ( \"BOSSBACK\" , PU_CACHE_SHARED )
>1401	CastExpression	( patch_t * ) W_CacheLumpName ( \"BOSSBACK\" , PU_CACHE_SHARED )
>1402	CallExpression	W_CacheLumpName ( \"BOSSBACK\" , PU_CACHE_SHARED )
>1403	ArgumentList	\"BOSSBACK\"
>1404	Argument	PU_CACHE_SHARED
>1405	Identifier	PU_CACHE_SHARED
>1406	Argument	\"BOSSBACK\"
>1407	PrimaryExpression	\"BOSSBACK\"
>1408	Callee	W_CacheLumpName
>1409	Identifier	W_CacheLumpName
>1410	CastTarget	patch_t *
>1411	Argument	0
>1412	PrimaryExpression	0
>1413	Argument	0
>1414	PrimaryExpression	0
>1415	Argument	0
>1416	PrimaryExpression	0
>1417	Callee	V_DrawPatch
>1418	Identifier	V_DrawPatch
>1419	IdentifierDeclStatement	 
>1420	IdentifierDecl	* patch
>1421	Identifier	patch
>1422	IdentifierDeclType	patch_t *
>1423	IdentifierDeclStatement	 
>1424	IdentifierDecl	flip
>1425	Identifier	flip
>1426	IdentifierDeclType	qboolean
>1427	IdentifierDeclStatement	 
>1428	IdentifierDecl	lump
>1429	Identifier	lump
>1430	IdentifierDeclType	int
>1431	IdentifierDeclStatement	 
>1432	IdentifierDecl	* sprframe
>1433	Identifier	sprframe
>1434	IdentifierDeclType	spriteframe_t *
>1435	IdentifierDeclStatement	 
>1436	IdentifierDecl	* sprdef
>1437	Identifier	sprdef
>1438	IdentifierDeclType	spritedef_t *
>1455	FunctionDef	F_DrawPatchCol (int x , patch_t * patch , int col)
>1456	ParameterList	int x , patch_t * patch , int col
>1457	Parameter	 
>1458	Identifier	col
>1459	ParameterType	int
>1460	Parameter	 
>1461	Identifier	patch
>1462	ParameterType	patch_t *
>1463	Parameter	 
>1464	Identifier	x
>1465	ParameterType	int
>1466	ReturnType	void
>1467	CompoundStatement	 
>1468	WhileStatement	while ( column -> topdelta != 0xff )
>1469	CompoundStatement	 
>1470	ExpressionStatement	 
>1471	AssignmentExpr	column = ( postColumn_t * ) ( ( byte * ) column + column -> length + 4 )
>1472	CastExpression	( postColumn_t * ) ( ( byte * ) column + column -> length + 4 )
>1473	AdditiveExpression	( byte * ) column + column -> length + 4
>1474	AdditiveExpression	column -> length + 4
>1475	PrimaryExpression	4
>1476	PtrMemberAccess	column -> length
>1477	Identifier	length
>1478	Identifier	column
>1479	CastExpression	( byte * ) column
>1480	Identifier	column
>1481	CastTarget	byte *
>1482	CastTarget	postColumn_t *
>1483	Identifier	column
>1484	WhileStatement	while ( count -- )
>1485	CompoundStatement	 
>1486	ExpressionStatement	 
>1487	IncDecOp	desty ++
>1488	IncDec	++
>1489	Identifier	desty
>1490	ForStatement	for ( int i = 0 ; i < GLOBAL_IMAGE_SCALER ; i ++ )
>1491	CompoundStatement	 
>1492	ForStatement	for ( int j = 0 ; j < GLOBAL_IMAGE_SCALER ; j ++ )
>1493	CompoundStatement	 
>1494	ExpressionStatement	 
>1495	AssignmentExpr	g -> screens [ 0 ] [ ( scaledx + j ) + ( scaledy + i ) * SCREENWIDTH ] = src
>1496	Identifier	src
>1497	ArrayIndexing	g -> screens [ 0 ] [ ( scaledx + j ) + ( scaledy + i ) * SCREENWIDTH ]
>1498	AdditiveExpression	( scaledx + j ) + ( scaledy + i ) * SCREENWIDTH
>1499	MultiplicativeExpression	( scaledy + i ) * SCREENWIDTH
>1500	Identifier	SCREENWIDTH
>1501	AdditiveExpression	scaledy + i
>1502	Identifier	i
>1503	Identifier	scaledy
>1504	AdditiveExpression	scaledx + j
>1505	Identifier	j
>1506	Identifier	scaledx
>1507	ArrayIndexing	g -> screens [ 0 ]
>1508	PrimaryExpression	0
>1509	PtrMemberAccess	g -> screens
>1510	Identifier	screens
>1511	Identifier	g
>1512	Statement	 
>1513	IncDecOp	 
>1514	IncDec	++
>1515	Identifier	j
>1516	Condition	 
>1517	RelationalExpression	j < GLOBAL_IMAGE_SCALER
>1518	Identifier	GLOBAL_IMAGE_SCALER
>1519	Identifier	j
>1520	ForInit	 
>1521	IdentifierDeclStatement	int j = 0 ;
>1522	IdentifierDecl	j = 0
>1523	AssignmentExpr	j = 0
>1524	PrimaryExpression	0
>1525	Identifier	j
>1526	Identifier	j
>1527	IdentifierDeclType	int
>1528	IncDecOp	 
>1529	IncDec	++
>1530	Identifier	i
>1531	Condition	 
>1532	RelationalExpression	i < GLOBAL_IMAGE_SCALER
>1533	Identifier	GLOBAL_IMAGE_SCALER
>1534	Identifier	i
>1535	ForInit	 
>1536	IdentifierDeclStatement	int i = 0 ;
>1537	IdentifierDecl	i = 0
>1538	AssignmentExpr	i = 0
>1539	PrimaryExpression	0
>1540	Identifier	i
>1541	Identifier	i
>1542	IdentifierDeclType	int
>1543	IdentifierDeclStatement	 
>1544	IdentifierDecl	src = * source ++
>1545	AssignmentExpr	src = * source ++
>1546	UnaryOp	* source ++
>1547	IncDecOp	source ++
>1548	IncDec	++
>1549	Identifier	source
>1550	UnaryOperator	*
>1551	Identifier	src
>1552	Identifier	src
>1553	IdentifierDeclType	byte
>1554	ExpressionStatement	 
>1555	AssignmentExpr	scaledy = desty * GLOBAL_IMAGE_SCALER
>1556	MultiplicativeExpression	desty * GLOBAL_IMAGE_SCALER
>1557	Identifier	GLOBAL_IMAGE_SCALER
>1558	Identifier	desty
>1559	Identifier	scaledy
>1560	ExpressionStatement	 
>1561	AssignmentExpr	scaledx = destx * GLOBAL_IMAGE_SCALER
>1562	MultiplicativeExpression	destx * GLOBAL_IMAGE_SCALER
>1563	Identifier	GLOBAL_IMAGE_SCALER
>1564	Identifier	destx
>1565	Identifier	scaledx
>1566	IdentifierDeclStatement	 
>1567	IdentifierDecl	scaledy
>1568	Identifier	scaledy
>1569	IdentifierDeclType	int
>1570	IdentifierDecl	scaledx
>1571	Identifier	scaledx
>1572	IdentifierDeclType	int
>1573	Condition	 
>1574	IncDecOp	count --
>1575	IncDec	--
>1576	Identifier	count
>1577	ExpressionStatement	 
>1578	AssignmentExpr	count = column -> length
>1579	PtrMemberAccess	column -> length
>1580	Identifier	length
>1581	Identifier	column
>1582	Identifier	count
>1583	ExpressionStatement	 
>1584	AssignmentExpr	desty = column -> topdelta
>1585	PtrMemberAccess	column -> topdelta
>1586	Identifier	topdelta
>1587	Identifier	column
>1588	Identifier	desty
>1589	ExpressionStatement	 
>1590	AssignmentExpr	source = ( byte * ) column + 3
>1591	AdditiveExpression	( byte * ) column + 3
>1592	PrimaryExpression	3
>1593	CastExpression	( byte * ) column
>1594	Identifier	column
>1595	CastTarget	byte *
>1596	Identifier	source
>1597	Condition	 
>1598	EqualityExpression	column -> topdelta != 0xff
>1599	PrimaryExpression	0xff
>1600	PtrMemberAccess	column -> topdelta
>1601	Identifier	topdelta
>1602	Identifier	column
>1603	IdentifierDeclStatement	 
>1604	IdentifierDecl	desty = 0
>1605	AssignmentExpr	desty = 0
>1606	PrimaryExpression	0
>1607	Identifier	desty
>1608	Identifier	desty
>1609	IdentifierDeclType	int
>1610	IdentifierDeclStatement	 
>1611	IdentifierDecl	destx = x
>1612	AssignmentExpr	destx = x
>1613	Identifier	x
>1614	Identifier	x
>1615	Identifier	destx
>1616	IdentifierDeclType	int
>1617	ExpressionStatement	 
>1618	AssignmentExpr	column = ( postColumn_t * ) ( ( byte * ) patch + LONG ( patch -> columnofs [ col ] ) )
>1619	CastExpression	( postColumn_t * ) ( ( byte * ) patch + LONG ( patch -> columnofs [ col ] ) )
>1620	AdditiveExpression	( byte * ) patch + LONG ( patch -> columnofs [ col ] )
>1621	CallExpression	LONG ( patch -> columnofs [ col ] )
>1622	ArgumentList	patch -> columnofs [ col ]
>1623	Argument	patch -> columnofs [ col ]
>1624	ArrayIndexing	patch -> columnofs [ col ]
>1625	Identifier	col
>1626	PtrMemberAccess	patch -> columnofs
>1627	Identifier	columnofs
>1628	Identifier	patch
>1629	Callee	LONG
>1630	Identifier	LONG
>1631	CastExpression	( byte * ) patch
>1632	Identifier	patch
>1633	CastTarget	byte *
>1634	CastTarget	postColumn_t *
>1635	Identifier	column
>1636	IdentifierDeclStatement	 
>1637	IdentifierDecl	count
>1638	Identifier	count
>1639	IdentifierDeclType	int
>1640	IdentifierDeclStatement	 
>1641	IdentifierDecl	* source
>1642	Identifier	source
>1643	IdentifierDeclType	byte *
>1644	IdentifierDeclStatement	 
>1645	IdentifierDecl	* column
>1646	Identifier	column
>1647	IdentifierDeclType	postColumn_t *
>1689	FunctionDef	F_BunnyScroll ()
>1690	ParameterList	 
>1691	ReturnType	void
>1692	CompoundStatement	 
>1693	ExpressionStatement	 
>1694	CallExpression	V_DrawPatch ( ( ORIGINAL_WIDTH - 13 * 8 ) / 2 , ( ORIGINAL_HEIGHT - 8 * 8 ) / 2 , 0 , ( patch_t * ) W_CacheLumpName ( \
>1695	ArgumentList	( ORIGINAL_WIDTH - 13 * 8 ) / 2
>1696	Argument	( patch_t * ) W_CacheLumpName ( name , PU_CACHE_SHARED )
>1697	CastExpression	( patch_t * ) W_CacheLumpName ( name , PU_CACHE_SHARED )
>1698	CallExpression	W_CacheLumpName ( name , PU_CACHE_SHARED )
>1699	ArgumentList	name
>1700	Argument	PU_CACHE_SHARED
>1701	Identifier	PU_CACHE_SHARED
>1702	Argument	name
>1703	Identifier	name
>1704	Callee	W_CacheLumpName
>1705	Identifier	W_CacheLumpName
>1706	CastTarget	patch_t *
>1707	Argument	0
>1708	PrimaryExpression	0
>1709	Argument	( ORIGINAL_HEIGHT - 8 * 8 ) / 2
>1710	MultiplicativeExpression	( ORIGINAL_HEIGHT - 8 * 8 ) / 2
>1711	PrimaryExpression	2
>1712	AdditiveExpression	ORIGINAL_HEIGHT - 8 * 8
>1713	MultiplicativeExpression	8 * 8
>1714	PrimaryExpression	8
>1715	PrimaryExpression	8
>1716	Identifier	ORIGINAL_HEIGHT
>1717	Argument	( ORIGINAL_WIDTH - 13 * 8 ) / 2
>1718	MultiplicativeExpression	( ORIGINAL_WIDTH - 13 * 8 ) / 2
>1719	PrimaryExpression	2
>1720	AdditiveExpression	ORIGINAL_WIDTH - 13 * 8
>1721	MultiplicativeExpression	13 * 8
>1722	PrimaryExpression	8
>1723	PrimaryExpression	13
>1724	Identifier	ORIGINAL_WIDTH
>1725	Callee	V_DrawPatch
>1726	Identifier	V_DrawPatch
>1727	ExpressionStatement	 
>1728	CallExpression	sprintf ( name , \"END%i\" , stage )
>1729	ArgumentList	name
>1730	Argument	stage
>1731	Identifier	stage
>1732	Argument	\"END%i\"
>1733	PrimaryExpression	\"END%i\"
>1734	Argument	name
>1735	Identifier	name
>1736	Callee	sprintf
>1737	Identifier	sprintf
>1738	CompoundStatement	 
>1739	ExpressionStatement	 
>1740	AssignmentExpr	g -> laststage = stage
>1741	Identifier	stage
>1742	PtrMemberAccess	g -> laststage
>1743	Identifier	laststage
>1744	Identifier	g
>1745	Statement	 
>1746	ExpressionStatement	 
>1747	CallExpression	S_StartSound ( NULL , sfx_pistol )
>1748	ArgumentList	NULL
>1749	Argument	sfx_pistol
>1750	Identifier	sfx_pistol
>1751	Argument	NULL
>1752	Identifier	NULL
>1753	Callee	S_StartSound
>1754	Identifier	S_StartSound
>1755	Statement	 
>1756	Statement	 
>1757	Statement	 
>1758	Statement	 
>1759	Statement	 
>1760	Statement	 
>1761	Statement	 
>1762	Statement	 
>1763	Statement	 
>1764	IfStatement	if ( stage > 6 )
>1765	ExpressionStatement	 
>1766	AssignmentExpr	stage = 6
>1767	PrimaryExpression	6
>1768	Identifier	stage
>1769	Condition	 
>1770	RelationalExpression	stage > 6
>1771	PrimaryExpression	6
>1772	Identifier	stage
>1773	ExpressionStatement	 
>1774	PrimaryExpression	5
>1775	Statement	 
>1776	Statement	 
>1777	Statement	 
>1778	Statement	 
>1779	Statement	 
>1780	Statement	 
>1781	Statement	 
>1782	Statement	 
>1783	Statement	 
>1784	Statement	 
>1785	Statement	 
>1786	CompoundStatement	 
>1787	ReturnStatement	 
>1788	ExpressionStatement	 
>1789	AssignmentExpr	g -> laststage = 0
>1790	PrimaryExpression	0
>1791	PtrMemberAccess	g -> laststage
>1792	Identifier	laststage
>1793	Identifier	g
>1794	Statement	 
>1795	ExpressionStatement	 
>1796	CallExpression	V_DrawPatch ( ( ORIGINAL_WIDTH - 13 * 8 ) / 2 , ( ORIGINAL_HEIGHT - 8 * 8 ) / 2 , 0 , ( patch_t * ) W_CacheLumpName ( \"\
>1797	ArgumentList	( ORIGINAL_WIDTH - 13 * 8 ) / 2
>1798	Argument	( patch_t * ) W_CacheLumpName ( \"END0\" , PU_CACHE_SHARED )
>1799	CastExpression	( patch_t * ) W_CacheLumpName ( \"END0\" , PU_CACHE_SHARED )
>1800	CallExpression	W_CacheLumpName ( \"END0\" , PU_CACHE_SHARED )
>1801	ArgumentList	\"END0\"
>1802	Argument	PU_CACHE_SHARED
>1803	Identifier	PU_CACHE_SHARED
>1804	Argument	\"END0\"
>1805	PrimaryExpression	\"END0\"
>1806	Callee	W_CacheLumpName
>1807	Identifier	W_CacheLumpName
>1808	CastTarget	patch_t *
>1809	Argument	0
>1810	PrimaryExpression	0
>1811	Argument	( ORIGINAL_HEIGHT - 8 * 8 ) / 2
>1812	MultiplicativeExpression	( ORIGINAL_HEIGHT - 8 * 8 ) / 2
>1813	PrimaryExpression	2
>1814	AdditiveExpression	ORIGINAL_HEIGHT - 8 * 8
>1815	MultiplicativeExpression	8 * 8
>1816	PrimaryExpression	8
>1817	PrimaryExpression	8
>1818	Identifier	ORIGINAL_HEIGHT
>1819	Argument	( ORIGINAL_WIDTH - 13 * 8 ) / 2
>1820	MultiplicativeExpression	( ORIGINAL_WIDTH - 13 * 8 ) / 2
>1821	PrimaryExpression	2
>1822	AdditiveExpression	ORIGINAL_WIDTH - 13 * 8
>1823	MultiplicativeExpression	13 * 8
>1824	PrimaryExpression	8
>1825	PrimaryExpression	13
>1826	Identifier	ORIGINAL_WIDTH
>1827	Callee	V_DrawPatch
>1828	Identifier	V_DrawPatch
>1829	Statement	 
>1830	Statement	 
>1831	Statement	 
>1832	Statement	 
>1833	Statement	 
>1834	Statement	 
>1835	Statement	 
>1836	Statement	 
>1837	Statement	 
>1838	ReturnStatement	 
>1839	Statement	 
>1840	Statement	 
>1841	Statement	 
>1842	Statement	 
>1843	Statement	 
>1844	Statement	 
>1845	Statement	 
>1846	Statement	 
>1847	Statement	 
>1848	ForStatement	for ( x = 0 ; x < ORIGINAL_WIDTH ; x ++ )
>1849	CompoundStatement	 
>1850	IfStatement	if ( x + scrolled < 320 )
>1851	ElseStatement	else
>1852	ExpressionStatement	 
>1853	CallExpression	F_DrawPatchCol ( x , p2 , x + scrolled - 320 )
>1854	ArgumentList	x
>1855	Argument	x + scrolled - 320
>1856	AdditiveExpression	x + scrolled - 320
>1857	AdditiveExpression	scrolled - 320
>1858	PrimaryExpression	320
>1859	Identifier	scrolled
>1860	Identifier	x
>1861	Argument	p2
>1862	Identifier	p2
>1863	Argument	x
>1864	Identifier	x
>1865	Callee	F_DrawPatchCol
>1866	Identifier	F_DrawPatchCol
>1867	ExpressionStatement	 
>1868	CallExpression	F_DrawPatchCol ( x , p1 , x + scrolled )
>1869	ArgumentList	x
>1870	Argument	x + scrolled
>1871	AdditiveExpression	x + scrolled
>1872	Identifier	scrolled
>1873	Identifier	x
>1874	Argument	p1
>1875	Identifier	p1
>1876	Argument	x
>1877	Identifier	x
>1878	Callee	F_DrawPatchCol
>1879	Identifier	F_DrawPatchCol
>1880	Condition	 
>1881	RelationalExpression	x + scrolled < 320
>1882	PrimaryExpression	320
>1883	AdditiveExpression	x + scrolled
>1884	Identifier	scrolled
>1885	Identifier	x
>1886	IncDecOp	 
>1887	IncDec	++
>1888	Identifier	x
>1889	Condition	 
>1890	RelationalExpression	x < ORIGINAL_WIDTH
>1891	Identifier	ORIGINAL_WIDTH
>1892	Identifier	x
>1893	ForInit	 
>1894	AssignmentExpr	x = 0
>1895	PrimaryExpression	0
>1896	Identifier	x
>1897	IfStatement	if ( scrolled < 0 )
>1898	ExpressionStatement	 
>1899	AssignmentExpr	scrolled = 0
>1900	PrimaryExpression	0
>1901	Identifier	scrolled
>1902	Condition	 
>1903	RelationalExpression	scrolled < 0
>1904	PrimaryExpression	0
>1905	Identifier	scrolled
>1906	IfStatement	if ( scrolled > 320 )
>1907	ExpressionStatement	 
>1908	AssignmentExpr	scrolled = 320
>1909	PrimaryExpression	320
>1910	Identifier	scrolled
>1911	Condition	 
>1912	RelationalExpression	scrolled > 320
>1913	PrimaryExpression	320
>1914	Identifier	scrolled
>1915	ExpressionStatement	 
>1916	PrimaryExpression	2
>1917	Statement	 
>1918	Statement	 
>1919	Statement	 
>1920	Statement	 
>1921	Statement	 
>1922	Statement	 
>1923	Statement	 
>1924	Statement	 
>1925	Statement	 
>1926	Statement	 
>1927	Statement	 
>1928	Statement	 
>1929	Statement	 
>1930	ExpressionStatement	 
>1931	CallExpression	V_MarkRect ( 0 , 0 , SCREENWIDTH , SCREENHEIGHT )
>1932	ArgumentList	0
>1933	Argument	SCREENHEIGHT
>1934	Identifier	SCREENHEIGHT
>1935	Argument	SCREENWIDTH
>1936	Identifier	SCREENWIDTH
>1937	Argument	0
>1938	PrimaryExpression	0
>1939	Argument	0
>1940	PrimaryExpression	0
>1941	Callee	V_MarkRect
>1942	Identifier	V_MarkRect
>1943	ExpressionStatement	 
>1944	AssignmentExpr	p2 = ( patch_t * ) W_CacheLumpName ( \"PFUB1\" , PU_LEVEL_SHARED )
>1945	CastExpression	( patch_t * ) W_CacheLumpName ( \"PFUB1\" , PU_LEVEL_SHARED )
>1946	CallExpression	W_CacheLumpName ( \"PFUB1\" , PU_LEVEL_SHARED )
>1947	ArgumentList	\"PFUB1\"
>1948	Argument	PU_LEVEL_SHARED
>1949	Identifier	PU_LEVEL_SHARED
>1950	Argument	\"PFUB1\"
>1951	PrimaryExpression	\"PFUB1\"
>1952	Callee	W_CacheLumpName
>1953	Identifier	W_CacheLumpName
>1954	CastTarget	patch_t *
>1955	Identifier	p2
>1956	ExpressionStatement	 
>1957	AssignmentExpr	p1 = ( patch_t * ) W_CacheLumpName ( \"PFUB2\" , PU_LEVEL_SHARED )
>1958	CastExpression	( patch_t * ) W_CacheLumpName ( \"PFUB2\" , PU_LEVEL_SHARED )
>1959	CallExpression	W_CacheLumpName ( \"PFUB2\" , PU_LEVEL_SHARED )
>1960	ArgumentList	\"PFUB2\"
>1961	Argument	PU_LEVEL_SHARED
>1962	Identifier	PU_LEVEL_SHARED
>1963	Argument	\"PFUB2\"
>1964	PrimaryExpression	\"PFUB2\"
>1965	Callee	W_CacheLumpName
>1966	Identifier	W_CacheLumpName
>1967	CastTarget	patch_t *
>1968	Identifier	p1
>1969	IdentifierDeclStatement	 
>1970	IdentifierDecl	stage
>1971	Identifier	stage
>1972	IdentifierDeclType	int
>1973	IdentifierDeclStatement	 
>1974	IdentifierDecl	name [ 10 ]
>1975	PrimaryExpression	10
>1976	Identifier	name
>1977	IdentifierDeclType	char [ 10 ]
>1978	IdentifierDeclStatement	 
>1979	IdentifierDecl	* p2
>1980	Identifier	p2
>1981	IdentifierDeclType	patch_t *
>1982	IdentifierDeclStatement	 
>1983	IdentifierDecl	* p1
>1984	Identifier	p1
>1985	IdentifierDeclType	patch_t *
>1986	IdentifierDeclStatement	 
>1987	IdentifierDecl	x
>1988	Identifier	x
>1989	IdentifierDeclType	int
>1990	IdentifierDeclStatement	 
>1991	IdentifierDecl	scrolled
>1992	Identifier	scrolled
>1993	IdentifierDeclType	int
>2015	FunctionDef	F_Drawer ()
>2016	ParameterList	 
>2017	ReturnType	void
>2018	CompoundStatement	 
>2019	ExpressionStatement	 
>2020	CallExpression	F_TextWrite ( )
>2021	ArgumentList	 
>2022	Callee	F_TextWrite
>2023	Identifier	F_TextWrite
>2024	Statement	 
>2025	Statement	 
>2026	Statement	 
>2027	Statement	 
>2028	Statement	 
>2029	Statement	 
>2030	Statement	 
>2031	Statement	 
>2032	CompoundStatement	 
>2033	ReturnStatement	 
>2034	ExpressionStatement	 
>2035	CallExpression	F_CastDrawer ( )
>2036	ArgumentList	 
>2037	Callee	F_CastDrawer
>2038	Identifier	F_CastDrawer
>2039	Statement	 
>2040	Statement	 
>2041	Statement	 
>2042	Statement	 
>2043	Statement	 
>2044	Statement	 
>2045	Statement	 
>2046	Statement	 
>2047	Statement	 
<63=66,65,64
<66=145,139,138,132,131,125,124,118,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,67
<67=68
<68=69
<69=71,70
<111=112
<112=117,116,113
<113=115,114
<118=119
<119=121,120
<121=123,122
<125=126
<126=128,127
<128=130,129
<132=133
<133=135,134
<135=137,136
<139=140
<140=142,141
<142=144,143
<164=170,169,165
<165=166
<166=168,167
<170=189,188,187,186,185,184,183,182,181,180,173,171
<171=172
<173=174
<174=178,175
<175=176
<176=177
<178=179
<189=197,190
<190=193,191
<191=192
<193=194
<194=196,195
<197=198
<198=210,199
<199=205,200
<200=202,201
<202=204,203
<205=207,206
<207=209,208
<210=217,211
<211=213,212
<213=214
<214=216,215
<234=237,236,235
<237=258,257,256,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238
<258=259
<259=261,260
<266=269,268,267
<269=576,572,562,558,554,550,546,542,541,540,539,538,537,536,535,534,533,525,512,511,510,509,503,423,410,406,402,398,397,396,395,394,393,392,391,390,389,388,387,385,376,270
<270=374,371,271
<271=363,357,342,331,316,315,314,313,312,311,310,309,308,307,306,305,304,303,302,301,293,292,291,290,289,288,287,286,285,284,283,282,281,280,279,278,277,276,272
<272=273
<273=275,274
<293=295,294
<295=296
<296=298,297
<298=300,299
<316=323,317
<317=319,318
<319=320
<320=322,321
<323=324
<324=328,325
<325=327,326
<328=330,329
<331=332
<332=341,333
<333=335,334
<335=339,336
<336=337
<337=338
<339=340
<342=353,343
<343=349,345,344
<345=346
<346=348,347
<349=350
<350=352,351
<353=354
<354=356,355
<357=359,358
<359=360
<360=362,361
<363=364
<364=370,365
<365=369,366
<366=368,367
<371=373,372
<374=375
<376=381,377
<377=378
<378=380,379
<381=382
<382=384,383
<385=386
<398=399
<399=401,400
<402=403
<403=405,404
<406=407
<407=409,408
<410=411
<411=421,412
<412=419,417,415,413
<413=414
<415=416
<417=418
<419=420
<421=422
<423=499,495,492,424
<424=456,425
<425=452,426
<426=433,427
<427=428
<428=432,429
<429=431,430
<433=434
<434=450,435
<435=448,440,436
<436=437
<437=439,438
<440=441
<441=447,442
<442=444,443
<444=446,445
<448=449
<450=451
<452=453
<453=455,454
<456=488,482,479,457
<457=462,458
<458=459
<459=461,460
<462=463
<463=477,464
<464=475,467,465
<465=466
<467=468
<468=474,469
<469=471,470
<471=473,472
<475=476
<477=478
<479=481,480
<482=483
<483=487,484
<484=486,485
<488=489
<489=491,490
<492=494,493
<495=496
<496=498,497
<499=500
<500=502,501
<503=504
<504=506,505
<506=508,507
<512=513
<513=524,514
<514=523,515
<515=521,516
<516=519,517
<517=518
<519=520
<521=522
<525=526
<526=527
<527=531,528
<528=529
<529=530
<531=532
<542=543
<543=545,544
<546=547
<547=549,548
<550=551
<551=553,552
<554=555
<555=557,556
<558=559
<559=561,560
<562=569,566,563
<563=565,564
<566=568,567
<569=571,570
<572=573
<573=575,574
<576=577
<577=579,578
<610=613,612,611
<613=736,735,734,733,732,731,730,729,728,614
<614=727,717,716,710,709,708,615,621,622,623,624,625,626,627,636,642,643,649,650,656,657,663,664,670,671,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707
<615=616
<616=618,617
<618=620,619
<627=628
<628=634,629
<629=632,630
<630=631
<632=633
<634=635
<636=637
<637=639,638
<639=641,640
<643=644
<644=646,645
<646=648,647
<650=651
<651=653,652
<653=655,654
<657=658
<658=660,659
<660=662,661
<664=665
<665=667,666
<667=669,668
<671=672
<672=674,673
<674=676,675
<710=711
<711=713,712
<713=715,714
<717=718
<718=724,719
<719=723,720
<720=722,721
<724=726,725
<753=756,755,754
<756=920,916,915,914,913,912,911,910,909,908,907,906,905,904,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,877,876,875,874,873,872,871,870,869,868,867,866,865,864,757
<757=863,857,856,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,829,828,827,826,825,824,823,822,821,820,819,818,817,816,815,814,813,758,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812
<758=759
<759=761,760
<761=763,762
<829=830
<830=832,831
<832=834,833
<850=851
<851=853,852
<853=855,854
<857=858
<858=860,859
<860=862,861
<896=897
<897=898
<898=902,899
<899=900
<900=901
<902=903
<916=917
<917=919,918
<920=921
<921=923,922
<936=942,941,937
<937=938
<938=940,939
<942=1051,1050,1049,1048,1047,1046,1045,1044,1042,1041,1035,1034,1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1023,1022,1021,1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1009,943,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,988,989,995,996,1002,1003,1004,1005,1006,1007,1008
<943=944
<982=983
<983=985,984
<985=987,986
<989=990
<990=992,991
<992=994,993
<996=997
<997=999,998
<999=1001,1000
<1035=1036
<1036=1038,1037
<1038=1040,1039
<1042=1043
<1051=1054,1052
<1052=1053
<1054=1055
<1055=1057,1056
<1057=1059,1058
<1075=1081,1080,1076
<1076=1077
<1077=1079,1078
<1081=1261,1257,1253,1249,1245,1241,1237,1174,1166,1162,1082
<1082=1160,1083
<1083=1152,1146,1135,1120,1119,1118,1117,1116,1115,1114,1113,1112,1111,1110,1109,1108,1107,1106,1105,1104,1103,1102,1101,1100,1099,1098,1097,1096,1095,1094,1093,1092,1091,1090,1089,1088,1084
<1084=1085
<1085=1087,1086
<1120=1127,1121
<1121=1123,1122
<1123=1124
<1124=1126,1125
<1127=1128
<1128=1132,1129
<1129=1131,1130
<1132=1134,1133
<1135=1136
<1136=1145,1137
<1137=1139,1138
<1139=1143,1140
<1140=1141
<1141=1142
<1143=1144
<1146=1148,1147
<1148=1149
<1149=1151,1150
<1152=1153
<1153=1159,1154
<1154=1158,1155
<1155=1157,1156
<1160=1161
<1162=1163
<1163=1165,1164
<1166=1167
<1167=1173,1168
<1168=1172,1169
<1169=1171,1170
<1174=1235,1175
<1175=1227,1221,1210,1195,1194,1193,1192,1191,1190,1189,1188,1187,1186,1185,1184,1183,1182,1181,1180,1176
<1176=1177
<1177=1179,1178
<1195=1202,1196
<1196=1198,1197
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1207,1204
<1204=1206,1205
<1207=1209,1208
<1210=1211
<1211=1220,1212
<1212=1214,1213
<1214=1218,1215
<1215=1216
<1216=1217
<1218=1219
<1221=1223,1222
<1223=1224
<1224=1226,1225
<1227=1228
<1228=1234,1229
<1229=1233,1230
<1230=1232,1231
<1235=1236
<1237=1238
<1238=1240,1239
<1241=1242
<1242=1244,1243
<1245=1246
<1246=1248,1247
<1249=1250
<1250=1252,1251
<1253=1254
<1254=1256,1255
<1257=1258
<1258=1260,1259
<1261=1262
<1262=1264,1263
<1281=1284,1283,1282
<1284=1435,1431,1427,1423,1419,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1384,1383,1382,1381,1380,1285,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1343,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379
<1285=1313,1300,1286
<1286=1287
<1287=1288
<1288=1298,1289
<1289=1296,1294,1292,1290
<1290=1291
<1292=1293
<1294=1295
<1296=1297
<1298=1299
<1300=1301
<1301=1311,1302
<1302=1309,1307,1305,1303
<1303=1304
<1305=1306
<1307=1308
<1309=1310
<1311=1312
<1313=1314
<1333=1334
<1334=1342,1335
<1335=1341,1336
<1336=1338,1337
<1338=1340,1339
<1343=1344
<1344=1350,1345
<1345=1347,1346
<1347=1349,1348
<1397=1398
<1398=1417,1399
<1399=1415,1413,1411,1400
<1400=1401
<1401=1410,1402
<1402=1408,1403
<1403=1406,1404
<1404=1405
<1406=1407
<1408=1409
<1411=1412
<1413=1414
<1415=1416
<1417=1418
<1419=1420
<1420=1422,1421
<1423=1424
<1424=1426,1425
<1427=1428
<1428=1430,1429
<1431=1432
<1432=1434,1433
<1435=1436
<1436=1438,1437
<1455=1467,1466,1456
<1456=1463,1460,1457
<1457=1459,1458
<1460=1462,1461
<1463=1465,1464
<1467=1644,1640,1636,1617,1610,1603,1468
<1468=1597,1469
<1469=1589,1583,1577,1484,1470
<1470=1471
<1471=1483,1472
<1472=1482,1473
<1473=1479,1474
<1474=1476,1475
<1476=1478,1477
<1479=1481,1480
<1484=1573,1485
<1485=1566,1560,1554,1543,1490,1486
<1486=1487
<1487=1489,1488
<1490=1535,1531,1528,1491
<1491=1492
<1492=1520,1516,1513,1493
<1493=1512,1494
<1494=1495
<1495=1497,1496
<1497=1507,1498
<1498=1504,1499
<1499=1501,1500
<1501=1503,1502
<1504=1506,1505
<1507=1509,1508
<1509=1511,1510
<1513=1515,1514
<1516=1517
<1517=1519,1518
<1520=1521
<1521=1522
<1522=1527,1526,1523
<1523=1525,1524
<1528=1530,1529
<1531=1532
<1532=1534,1533
<1535=1536
<1536=1537
<1537=1542,1541,1538
<1538=1540,1539
<1543=1544
<1544=1553,1552,1545
<1545=1551,1546
<1546=1550,1547
<1547=1549,1548
<1554=1555
<1555=1559,1556
<1556=1558,1557
<1560=1561
<1561=1565,1562
<1562=1564,1563
<1566=1570,1567
<1567=1569,1568
<1570=1572,1571
<1573=1574
<1574=1576,1575
<1577=1578
<1578=1582,1579
<1579=1581,1580
<1583=1584
<1584=1588,1585
<1585=1587,1586
<1589=1590
<1590=1596,1591
<1591=1593,1592
<1593=1595,1594
<1597=1598
<1598=1600,1599
<1600=1602,1601
<1603=1604
<1604=1609,1608,1605
<1605=1607,1606
<1610=1611
<1611=1616,1615,1612
<1612=1614,1613
<1617=1618
<1618=1635,1619
<1619=1634,1620
<1620=1631,1621
<1621=1629,1622
<1622=1623
<1623=1624
<1624=1626,1625
<1626=1628,1627
<1629=1630
<1631=1633,1632
<1636=1637
<1637=1639,1638
<1640=1641
<1641=1643,1642
<1644=1645
<1645=1647,1646
<1689=1692,1691,1690
<1692=1990,1986,1982,1978,1973,1969,1956,1943,1930,1929,1928,1927,1926,1925,1924,1923,1922,1921,1920,1919,1918,1693,1727,1738,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1773,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1897,1906,1915,1917
<1693=1694
<1694=1725,1695
<1695=1717,1709,1707,1696
<1696=1697
<1697=1706,1698
<1698=1704,1699
<1699=1702,1700
<1700=1701
<1702=1703
<1704=1705
<1707=1708
<1709=1710
<1710=1712,1711
<1712=1716,1713
<1713=1715,1714
<1717=1718
<1718=1720,1719
<1720=1724,1721
<1721=1723,1722
<1725=1726
<1727=1728
<1728=1736,1729
<1729=1734,1732,1730
<1730=1731
<1732=1733
<1734=1735
<1736=1737
<1738=1746,1745,1739
<1739=1740
<1740=1742,1741
<1742=1744,1743
<1746=1747
<1747=1753,1748
<1748=1751,1749
<1749=1750
<1751=1752
<1753=1754
<1764=1769,1765
<1765=1766
<1766=1768,1767
<1769=1770
<1770=1772,1771
<1773=1774
<1786=1795,1794,1788,1787
<1788=1789
<1789=1791,1790
<1791=1793,1792
<1795=1796
<1796=1827,1797
<1797=1819,1811,1809,1798
<1798=1799
<1799=1808,1800
<1800=1806,1801
<1801=1804,1802
<1802=1803
<1804=1805
<1806=1807
<1809=1810
<1811=1812
<1812=1814,1813
<1814=1818,1815
<1815=1817,1816
<1819=1820
<1820=1822,1821
<1822=1826,1823
<1823=1825,1824
<1827=1828
<1848=1893,1889,1886,1849
<1849=1850
<1850=1880,1867,1851
<1851=1852
<1852=1853
<1853=1865,1854
<1854=1863,1861,1855
<1855=1856
<1856=1860,1857
<1857=1859,1858
<1861=1862
<1863=1864
<1865=1866
<1867=1868
<1868=1878,1869
<1869=1876,1874,1870
<1870=1871
<1871=1873,1872
<1874=1875
<1876=1877
<1878=1879
<1880=1881
<1881=1883,1882
<1883=1885,1884
<1886=1888,1887
<1889=1890
<1890=1892,1891
<1893=1894
<1894=1896,1895
<1897=1902,1898
<1898=1899
<1899=1901,1900
<1902=1903
<1903=1905,1904
<1906=1911,1907
<1907=1908
<1908=1910,1909
<1911=1912
<1912=1914,1913
<1915=1916
<1930=1931
<1931=1941,1932
<1932=1939,1937,1935,1933
<1933=1934
<1935=1936
<1937=1938
<1939=1940
<1941=1942
<1943=1944
<1944=1955,1945
<1945=1954,1946
<1946=1952,1947
<1947=1950,1948
<1948=1949
<1950=1951
<1952=1953
<1956=1957
<1957=1968,1958
<1958=1967,1959
<1959=1965,1960
<1960=1963,1961
<1961=1962
<1963=1964
<1965=1966
<1969=1970
<1970=1972,1971
<1973=1974
<1974=1977,1976,1975
<1978=1979
<1979=1981,1980
<1982=1983
<1983=1985,1984
<1986=1987
<1987=1989,1988
<1990=1991
<1991=1993,1992
<2015=2018,2017,2016
<2018=2047,2046,2045,2044,2043,2042,2041,2040,2039,2032,2031,2030,2029,2028,2027,2026,2025,2024,2019
<2019=2020
<2020=2022,2021
<2022=2023
<2032=2034,2033
<2034=2035
<2035=2037,2036
<2037=2038
