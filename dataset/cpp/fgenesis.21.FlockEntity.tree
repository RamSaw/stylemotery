>7	FunctionDef	FlockEntity 
>8	ParameterList	 
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	AssignmentExpr	collideRadius = 8
>12	PrimaryExpression	8
>13	Identifier	collideRadius
>14	ExpressionStatement	 
>15	AssignmentExpr	angle = 0
>16	PrimaryExpression	0
>17	Identifier	angle
>18	ExpressionStatement	 
>19	AssignmentExpr	nearestDistance = HUGE_VALF
>20	Identifier	HUGE_VALF
>21	Identifier	nearestDistance
>22	ExpressionStatement	 
>23	AssignmentExpr	nearestFlockMate = 0
>24	PrimaryExpression	0
>25	Identifier	nearestFlockMate
>26	ExpressionStatement	 
>27	AssignmentExpr	nextInFlock = prevInFlock = 0
>28	AssignmentExpr	prevInFlock = 0
>29	PrimaryExpression	0
>30	Identifier	prevInFlock
>31	Identifier	nextInFlock
>32	ExpressionStatement	 
>33	AssignmentExpr	flock = 0
>34	PrimaryExpression	0
>35	Identifier	flock
>36	ExpressionStatement	 
>37	AssignmentExpr	flockType = FLOCK_FISH
>38	Identifier	FLOCK_FISH
>39	Identifier	flockType
>53	FunctionDef	FlockEntity 
>54	ParameterList	int id
>55	Parameter	 
>56	Identifier	id
>57	ParameterType	int
>58	ReturnType	void
>59	CompoundStatement	 
>60	IfStatement	if ( numEntities == 1 )
>61	ElseStatement	else
>62	CompoundStatement	 
>63	ExpressionStatement	 
>64	AssignmentExpr	flock -> heading = ( flock -> heading * ( numEntities - 1 ) + vel ) / numEntities
>65	MultiplicativeExpression	( flock -> heading * ( numEntities - 1 ) + vel ) / numEntities
>66	Identifier	numEntities
>67	AdditiveExpression	flock -> heading * ( numEntities - 1 ) + vel
>68	Identifier	vel
>69	MultiplicativeExpression	flock -> heading * ( numEntities - 1 )
>70	AdditiveExpression	numEntities - 1
>71	PrimaryExpression	1
>72	Identifier	numEntities
>73	PtrMemberAccess	flock -> heading
>74	Identifier	heading
>75	Identifier	flock
>76	PtrMemberAccess	flock -> heading
>77	Identifier	heading
>78	Identifier	flock
>79	ExpressionStatement	 
>80	AssignmentExpr	flock -> center = ( flock -> center * ( numEntities - 1 ) + position ) / numEntities
>81	MultiplicativeExpression	( flock -> center * ( numEntities - 1 ) + position ) / numEntities
>82	Identifier	numEntities
>83	AdditiveExpression	flock -> center * ( numEntities - 1 ) + position
>84	Identifier	position
>85	MultiplicativeExpression	flock -> center * ( numEntities - 1 )
>86	AdditiveExpression	numEntities - 1
>87	PrimaryExpression	1
>88	Identifier	numEntities
>89	PtrMemberAccess	flock -> center
>90	Identifier	center
>91	Identifier	flock
>92	PtrMemberAccess	flock -> center
>93	Identifier	center
>94	Identifier	flock
>95	CompoundStatement	 
>96	ExpressionStatement	 
>97	AssignmentExpr	flock -> heading = vel
>98	Identifier	vel
>99	PtrMemberAccess	flock -> heading
>100	Identifier	heading
>101	Identifier	flock
>102	ExpressionStatement	 
>103	AssignmentExpr	flock -> center = position
>104	Identifier	position
>105	PtrMemberAccess	flock -> center
>106	Identifier	center
>107	Identifier	flock
>108	Condition	 
>109	EqualityExpression	numEntities == 1
>110	PrimaryExpression	1
>111	Identifier	numEntities
>112	ForStatement	for ( FlockEntity * e = nextInFlock ; e ; e = e -> nextInFlock )
>113	CompoundStatement	 
>114	IfStatement	if ( distance < nearestDistance )
>115	CompoundStatement	 
>116	ExpressionStatement	 
>117	AssignmentExpr	nearestDistance = distance
>118	Identifier	distance
>119	Identifier	nearestDistance
>120	ExpressionStatement	 
>121	AssignmentExpr	nearestFlockMate = e
>122	Identifier	e
>123	Identifier	nearestFlockMate
>124	Condition	 
>125	RelationalExpression	distance < nearestDistance
>126	Identifier	nearestDistance
>127	Identifier	distance
>128	IdentifierDeclStatement	 
>129	IdentifierDecl	distance = ( e -> position - position ) . getLength2D ( )
>130	AssignmentExpr	distance = ( e -> position - position ) . getLength2D ( )
>131	CallExpression	( e -> position - position ) . getLength2D ( )
>132	ArgumentList	 
>133	Callee	( e -> position - position ) . getLength2D
>134	MemberAccess	( e -> position - position ) . getLength2D
>135	Identifier	getLength2D
>136	AdditiveExpression	e -> position - position
>137	Identifier	position
>138	PtrMemberAccess	e -> position
>139	Identifier	position
>140	Identifier	e
>141	Identifier	distance
>142	Identifier	distance
>143	IdentifierDeclType	const float
>144	ExpressionStatement	 
>145	IncDecOp	numEntities ++
>146	IncDec	++
>147	Identifier	numEntities
>148	AssignmentExpr	 
>149	PtrMemberAccess	e -> nextInFlock
>150	Identifier	nextInFlock
>151	Identifier	e
>152	Identifier	e
>153	Condition	 
>154	Identifier	e
>155	ForInit	 
>156	IdentifierDeclStatement	FlockEntity * e = nextInFlock ;
>157	IdentifierDecl	* e = nextInFlock
>158	AssignmentExpr	* e = nextInFlock
>159	Identifier	nextInFlock
>160	Identifier	nextInFlock
>161	Identifier	e
>162	IdentifierDeclType	FlockEntity *
>163	IdentifierDeclStatement	 
>164	IdentifierDecl	numEntities = 1
>165	AssignmentExpr	numEntities = 1
>166	PrimaryExpression	1
>167	Identifier	numEntities
>168	Identifier	numEntities
>169	IdentifierDeclType	int
>170	ExpressionStatement	 
>171	AssignmentExpr	nearestDistance = HUGE_VALF
>172	Identifier	HUGE_VALF
>173	Identifier	nearestDistance
>174	ExpressionStatement	 
>175	AssignmentExpr	nearestFlockMate = 0
>176	PrimaryExpression	0
>177	Identifier	nearestFlockMate
>178	ExpressionStatement	 
>179	AssignmentExpr	flock -> firstEntity = this
>180	Identifier	this
>181	PtrMemberAccess	flock -> firstEntity
>182	Identifier	firstEntity
>183	Identifier	flock
>184	IfStatement	if ( flock -> firstEntity )
>185	ExpressionStatement	 
>186	AssignmentExpr	flock -> firstEntity -> prevInFlock = this
>187	Identifier	this
>188	PtrMemberAccess	flock -> firstEntity -> prevInFlock
>189	Identifier	prevInFlock
>190	PtrMemberAccess	flock -> firstEntity
>191	Identifier	firstEntity
>192	Identifier	flock
>193	Condition	 
>194	PtrMemberAccess	flock -> firstEntity
>195	Identifier	firstEntity
>196	Identifier	flock
>197	ExpressionStatement	 
>198	AssignmentExpr	prevInFlock = 0
>199	PrimaryExpression	0
>200	Identifier	prevInFlock
>201	ExpressionStatement	 
>202	AssignmentExpr	nextInFlock = flock -> firstEntity
>203	PtrMemberAccess	flock -> firstEntity
>204	Identifier	firstEntity
>205	Identifier	flock
>206	Identifier	nextInFlock
>207	ExpressionStatement	 
>208	AssignmentExpr	flock = flocks [ id ]
>209	ArrayIndexing	flocks [ id ]
>210	Identifier	id
>211	Identifier	flocks
>212	Identifier	flock
>213	IfStatement	if ( ! flocks [ id ] )
>214	CompoundStatement	 
>215	ExpressionStatement	 
>216	AssignmentExpr	flocks [ id ] = new Flock ( id )
>217	Identifier	id
>218	ArrayIndexing	flocks [ id ]
>219	Identifier	id
>220	Identifier	flocks
>221	Condition	 
>222	UnaryOp	! flocks [ id ]
>223	ArrayIndexing	flocks [ id ]
>224	Identifier	id
>225	Identifier	flocks
>226	UnaryOperator	!
>227	IfStatement	if ( id >= flocks . size ( ) )
>228	CompoundStatement	 
>229	ForStatement	for ( int i = curSize ; i < id + 1 ; i ++ )
>230	ExpressionStatement	 
>231	AssignmentExpr	flocks [ i ] = 0
>232	PrimaryExpression	0
>233	ArrayIndexing	flocks [ i ]
>234	Identifier	i
>235	Identifier	flocks
>236	IncDecOp	 
>237	IncDec	++
>238	Identifier	i
>239	Condition	 
>240	RelationalExpression	i < id + 1
>241	AdditiveExpression	id + 1
>242	PrimaryExpression	1
>243	Identifier	id
>244	Identifier	i
>245	ForInit	 
>246	IdentifierDeclStatement	int i = curSize ;
>247	IdentifierDecl	i = curSize
>248	AssignmentExpr	i = curSize
>249	Identifier	curSize
>250	Identifier	curSize
>251	Identifier	i
>252	IdentifierDeclType	int
>253	ExpressionStatement	 
>254	CallExpression	flocks . resize ( id + 1 )
>255	ArgumentList	id + 1
>256	Argument	id + 1
>257	AdditiveExpression	id + 1
>258	PrimaryExpression	1
>259	Identifier	id
>260	Callee	flocks . resize
>261	MemberAccess	flocks . resize
>262	Identifier	resize
>263	Identifier	flocks
>264	IdentifierDeclStatement	 
>265	IdentifierDecl	curSize = flocks . size ( )
>266	AssignmentExpr	curSize = flocks . size ( )
>267	CallExpression	flocks . size ( )
>268	ArgumentList	 
>269	Callee	flocks . size
>270	MemberAccess	flocks . size
>271	Identifier	size
>272	Identifier	flocks
>273	Identifier	curSize
>274	Identifier	curSize
>275	IdentifierDeclType	int
>276	Condition	 
>277	RelationalExpression	id >= flocks . size ( )
>278	CallExpression	flocks . size ( )
>279	ArgumentList	 
>280	Callee	flocks . size
>281	MemberAccess	flocks . size
>282	Identifier	size
>283	Identifier	flocks
>284	Identifier	id
>319	FunctionDef	FlockEntity 
>320	ParameterList	 
>321	ReturnType	void
>322	CompoundStatement	 
>323	ExpressionStatement	 
>324	AssignmentExpr	nearestDistance = HUGE_VALF
>325	Identifier	HUGE_VALF
>326	Identifier	nearestDistance
>327	ExpressionStatement	 
>328	AssignmentExpr	nearestFlockMate = 0
>329	PrimaryExpression	0
>330	Identifier	nearestFlockMate
>331	ExpressionStatement	 
>332	AssignmentExpr	nextInFlock = prevInFlock = 0
>333	AssignmentExpr	prevInFlock = 0
>334	PrimaryExpression	0
>335	Identifier	prevInFlock
>336	Identifier	nextInFlock
>337	ExpressionStatement	 
>338	AssignmentExpr	flock = 0
>339	PrimaryExpression	0
>340	Identifier	flock
>341	IfStatement	if ( flock )
>342	CompoundStatement	 
>343	IfStatement	if ( ! flock -> firstEntity )
>344	CompoundStatement	 
>345	ExpressionStatement	 
>346	Identifier	flock
>347	Statement	 
>348	ExpressionStatement	 
>349	AssignmentExpr	flocks [ flock -> flockID ] = 0
>350	PrimaryExpression	0
>351	ArrayIndexing	flocks [ flock -> flockID ]
>352	PtrMemberAccess	flock -> flockID
>353	Identifier	flockID
>354	Identifier	flock
>355	Identifier	flocks
>356	Condition	 
>357	UnaryOp	! flock -> firstEntity
>358	PtrMemberAccess	flock -> firstEntity
>359	Identifier	firstEntity
>360	Identifier	flock
>361	UnaryOperator	!
>362	IfStatement	if ( prevInFlock )
>363	ElseStatement	else
>364	ExpressionStatement	 
>365	AssignmentExpr	flock -> firstEntity = nextInFlock
>366	Identifier	nextInFlock
>367	PtrMemberAccess	flock -> firstEntity
>368	Identifier	firstEntity
>369	Identifier	flock
>370	ExpressionStatement	 
>371	AssignmentExpr	prevInFlock -> nextInFlock = nextInFlock
>372	Identifier	nextInFlock
>373	PtrMemberAccess	prevInFlock -> nextInFlock
>374	Identifier	nextInFlock
>375	Identifier	prevInFlock
>376	Condition	 
>377	Identifier	prevInFlock
>378	IfStatement	if ( nextInFlock )
>379	ExpressionStatement	 
>380	AssignmentExpr	nextInFlock -> prevInFlock = prevInFlock
>381	Identifier	prevInFlock
>382	PtrMemberAccess	nextInFlock -> prevInFlock
>383	Identifier	prevInFlock
>384	Identifier	nextInFlock
>385	Condition	 
>386	Identifier	nextInFlock
>387	Condition	 
>388	Identifier	flock
>409	FunctionDef	FlockEntity 
>410	ParameterList	 
>411	ReturnType	void
>412	CompoundStatement	 
>413	ExpressionStatement	 
>414	CallExpression	CollideEntity 
>415	ArgumentList	 
>416	Callee	CollideEntity 
>417	Identifier	CollideEntity 
>418	ExpressionStatement	 
>419	CallExpression	removeFromFlock ( )
>420	ArgumentList	 
>421	Callee	removeFromFlock
>422	Identifier	removeFromFlock
>426	FunctionDef	FlockEntity 
>427	ParameterList	 
>428	ReturnType	void
>429	CompoundStatement	 
>430	ForStatement	for ( int flockID = 0 ; flockID < flocks . size ( ) ; flockID ++ )
>431	CompoundStatement	 
>432	IfStatement	if ( flock )
>433	CompoundStatement	 
>434	ExpressionStatement	 
>435	AssignmentExpr	flock -> heading /= numEntities
>436	Identifier	numEntities
>437	PtrMemberAccess	flock -> heading
>438	Identifier	heading
>439	Identifier	flock
>440	ExpressionStatement	 
>441	AssignmentExpr	flock -> center /= numEntities
>442	Identifier	numEntities
>443	PtrMemberAccess	flock -> center
>444	Identifier	center
>445	Identifier	flock
>446	ForStatement	for ( FlockEntity * e = flock -> firstEntity ; e ; e = e -> nextInFlock )
>447	CompoundStatement	 
>448	ExpressionStatement	 
>449	AssignmentExpr	e -> nearestDistance = sqrtf ( e -> nearestDistance )
>450	CallExpression	sqrtf ( e -> nearestDistance )
>451	ArgumentList	e -> nearestDistance
>452	Argument	e -> nearestDistance
>453	PtrMemberAccess	e -> nearestDistance
>454	Identifier	nearestDistance
>455	Identifier	e
>456	Callee	sqrtf
>457	Identifier	sqrtf
>458	PtrMemberAccess	e -> nearestDistance
>459	Identifier	nearestDistance
>460	Identifier	e
>461	AssignmentExpr	 
>462	PtrMemberAccess	e -> nextInFlock
>463	Identifier	nextInFlock
>464	Identifier	e
>465	Identifier	e
>466	Condition	 
>467	Identifier	e
>468	ForInit	 
>469	IdentifierDeclStatement	FlockEntity * e = flock -> firstEntity ;
>470	IdentifierDecl	* e = flock -> firstEntity
>471	AssignmentExpr	* e = flock -> firstEntity
>472	PtrMemberAccess	flock -> firstEntity
>473	Identifier	firstEntity
>474	Identifier	flock
>475	Identifier	e
>476	Identifier	e
>477	IdentifierDeclType	FlockEntity *
>478	ForStatement	for ( FlockEntity * e = flock -> firstEntity ; e ; e = e -> nextInFlock )
>479	CompoundStatement	 
>480	ExpressionStatement	 
>481	IncDecOp	numEntities ++
>482	IncDec	++
>483	Identifier	numEntities
>484	ForStatement	for ( FlockEntity * e2 = flock -> firstEntity ; e2 != e ; e2 = e2 -> nextInFlock )
>485	CompoundStatement	 
>486	IfStatement	if ( distanceSqr < e2 -> nearestDistance )
>487	CompoundStatement	 
>488	ExpressionStatement	 
>489	AssignmentExpr	e2 -> nearestDistance = distanceSqr
>490	Identifier	distanceSqr
>491	PtrMemberAccess	e2 -> nearestDistance
>492	Identifier	nearestDistance
>493	Identifier	e2
>494	ExpressionStatement	 
>495	AssignmentExpr	e2 -> nearestFlockMate = e
>496	Identifier	e
>497	PtrMemberAccess	e2 -> nearestFlockMate
>498	Identifier	nearestFlockMate
>499	Identifier	e2
>500	Condition	 
>501	RelationalExpression	distanceSqr < e2 -> nearestDistance
>502	PtrMemberAccess	e2 -> nearestDistance
>503	Identifier	nearestDistance
>504	Identifier	e2
>505	Identifier	distanceSqr
>506	IfStatement	if ( distanceSqr < e -> nearestDistance )
>507	CompoundStatement	 
>508	ExpressionStatement	 
>509	AssignmentExpr	e -> nearestDistance = distanceSqr
>510	Identifier	distanceSqr
>511	PtrMemberAccess	e -> nearestDistance
>512	Identifier	nearestDistance
>513	Identifier	e
>514	ExpressionStatement	 
>515	AssignmentExpr	e -> nearestFlockMate = e2
>516	Identifier	e2
>517	PtrMemberAccess	e -> nearestFlockMate
>518	Identifier	nearestFlockMate
>519	Identifier	e
>520	Condition	 
>521	RelationalExpression	distanceSqr < e -> nearestDistance
>522	PtrMemberAccess	e -> nearestDistance
>523	Identifier	nearestDistance
>524	Identifier	e
>525	Identifier	distanceSqr
>526	IdentifierDeclStatement	 
>527	IdentifierDecl	distanceSqr = ( e2 -> position - e -> position ) . getSquaredLength2D ( )
>528	AssignmentExpr	distanceSqr = ( e2 -> position - e -> position ) . getSquaredLength2D ( )
>529	CallExpression	( e2 -> position - e -> position ) . getSquaredLength2D ( )
>530	ArgumentList	 
>531	Callee	( e2 -> position - e -> position ) . getSquaredLength2D
>532	MemberAccess	( e2 -> position - e -> position ) . getSquaredLength2D
>533	Identifier	getSquaredLength2D
>534	AdditiveExpression	e2 -> position - e -> position
>535	PtrMemberAccess	e -> position
>536	Identifier	position
>537	Identifier	e
>538	PtrMemberAccess	e2 -> position
>539	Identifier	position
>540	Identifier	e2
>541	Identifier	distanceSqr
>542	Identifier	distanceSqr
>543	IdentifierDeclType	const float
>544	AssignmentExpr	 
>545	PtrMemberAccess	e2 -> nextInFlock
>546	Identifier	nextInFlock
>547	Identifier	e2
>548	Identifier	e2
>549	Condition	 
>550	EqualityExpression	e2 != e
>551	Identifier	e
>552	Identifier	e2
>553	ForInit	 
>554	IdentifierDeclStatement	FlockEntity * e2 = flock -> firstEntity ;
>555	IdentifierDecl	* e2 = flock -> firstEntity
>556	AssignmentExpr	* e2 = flock -> firstEntity
>557	PtrMemberAccess	flock -> firstEntity
>558	Identifier	firstEntity
>559	Identifier	flock
>560	Identifier	e2
>561	Identifier	e2
>562	IdentifierDeclType	FlockEntity *
>563	ExpressionStatement	 
>564	AssignmentExpr	e -> nearestDistance = HUGE_VALF
>565	Identifier	HUGE_VALF
>566	PtrMemberAccess	e -> nearestDistance
>567	Identifier	nearestDistance
>568	Identifier	e
>569	ExpressionStatement	 
>570	AssignmentExpr	e -> nearestFlockMate = 0
>571	PrimaryExpression	0
>572	PtrMemberAccess	e -> nearestFlockMate
>573	Identifier	nearestFlockMate
>574	Identifier	e
>575	ExpressionStatement	 
>576	AssignmentExpr	flock -> heading += e -> vel
>577	PtrMemberAccess	e -> vel
>578	Identifier	vel
>579	Identifier	e
>580	PtrMemberAccess	flock -> heading
>581	Identifier	heading
>582	Identifier	flock
>583	ExpressionStatement	 
>584	AssignmentExpr	flock -> center += e -> position
>585	PtrMemberAccess	e -> position
>586	Identifier	position
>587	Identifier	e
>588	PtrMemberAccess	flock -> center
>589	Identifier	center
>590	Identifier	flock
>591	AssignmentExpr	 
>592	PtrMemberAccess	e -> nextInFlock
>593	Identifier	nextInFlock
>594	Identifier	e
>595	Identifier	e
>596	Condition	 
>597	Identifier	e
>598	ForInit	 
>599	IdentifierDeclStatement	FlockEntity * e = flock -> firstEntity ;
>600	IdentifierDecl	* e = flock -> firstEntity
>601	AssignmentExpr	* e = flock -> firstEntity
>602	PtrMemberAccess	flock -> firstEntity
>603	Identifier	firstEntity
>604	Identifier	flock
>605	Identifier	e
>606	Identifier	e
>607	IdentifierDeclType	FlockEntity *
>608	IdentifierDeclStatement	 
>609	IdentifierDecl	numEntities = 0
>610	AssignmentExpr	numEntities = 0
>611	PrimaryExpression	0
>612	Identifier	numEntities
>613	Identifier	numEntities
>614	IdentifierDeclType	int
>615	ExpressionStatement	 
>616	AssignmentExpr	flock -> heading = Vector ( 0 , 0 , 0 )
>617	CallExpression	Vector ( 0 , 0 , 0 )
>618	ArgumentList	0
>619	Argument	0
>620	PrimaryExpression	0
>621	Argument	0
>622	PrimaryExpression	0
>623	Argument	0
>624	PrimaryExpression	0
>625	Callee	Vector
>626	Identifier	Vector
>627	PtrMemberAccess	flock -> heading
>628	Identifier	heading
>629	Identifier	flock
>630	ExpressionStatement	 
>631	AssignmentExpr	flock -> center = Vector ( 0 , 0 , 0 )
>632	CallExpression	Vector ( 0 , 0 , 0 )
>633	ArgumentList	0
>634	Argument	0
>635	PrimaryExpression	0
>636	Argument	0
>637	PrimaryExpression	0
>638	Argument	0
>639	PrimaryExpression	0
>640	Callee	Vector
>641	Identifier	Vector
>642	PtrMemberAccess	flock -> center
>643	Identifier	center
>644	Identifier	flock
>645	Condition	 
>646	Identifier	flock
>647	IdentifierDeclStatement	 
>648	IdentifierDecl	* flock = flocks [ flockID ]
>649	AssignmentExpr	* flock = flocks [ flockID ]
>650	ArrayIndexing	flocks [ flockID ]
>651	Identifier	flockID
>652	Identifier	flocks
>653	Identifier	flock
>654	Identifier	flock
>655	IdentifierDeclType	Flock *
>656	IncDecOp	 
>657	IncDec	++
>658	Identifier	flockID
>659	Condition	 
>660	RelationalExpression	flockID < flocks . size ( )
>661	CallExpression	flocks . size ( )
>662	ArgumentList	 
>663	Callee	flocks . size
>664	MemberAccess	flocks . size
>665	Identifier	size
>666	Identifier	flocks
>667	Identifier	flockID
>668	ForInit	 
>669	IdentifierDeclStatement	int flockID = 0 ;
>670	IdentifierDecl	flockID = 0
>671	AssignmentExpr	flockID = 0
>672	PrimaryExpression	0
>673	Identifier	flockID
>674	Identifier	flockID
>675	IdentifierDeclType	int
<7=9,8
<9=36,32,26,22,18,14,10
<10=11
<11=13,12
<14=15
<15=17,16
<18=19
<19=21,20
<22=23
<23=25,24
<26=27
<27=31,28
<28=30,29
<32=33
<33=35,34
<36=37
<37=39,38
<53=59,58,54
<54=55
<55=57,56
<59=227,213,207,201,197,184,178,174,170,163,112,60
<60=108,95,61
<61=62
<62=79,63
<63=64
<64=76,65
<65=67,66
<67=69,68
<69=73,70
<70=72,71
<73=75,74
<76=78,77
<79=80
<80=92,81
<81=83,82
<83=85,84
<85=89,86
<86=88,87
<89=91,90
<92=94,93
<95=102,96
<96=97
<97=99,98
<99=101,100
<102=103
<103=105,104
<105=107,106
<108=109
<109=111,110
<112=155,153,148,113
<113=144,128,114
<114=124,115
<115=120,116
<116=117
<117=119,118
<120=121
<121=123,122
<124=125
<125=127,126
<128=129
<129=143,142,130
<130=141,131
<131=133,132
<133=134
<134=136,135
<136=138,137
<138=140,139
<144=145
<145=147,146
<148=152,149
<149=151,150
<153=154
<155=156
<156=157
<157=162,161,158
<158=160,159
<163=164
<164=169,168,165
<165=167,166
<170=171
<171=173,172
<174=175
<175=177,176
<178=179
<179=181,180
<181=183,182
<184=193,185
<185=186
<186=188,187
<188=190,189
<190=192,191
<193=194
<194=196,195
<197=198
<198=200,199
<201=202
<202=206,203
<203=205,204
<207=208
<208=212,209
<209=211,210
<213=221,214
<214=215
<215=216
<216=218,217
<218=220,219
<221=222
<222=226,223
<223=225,224
<227=276,228
<228=264,253,229
<229=245,239,236,230
<230=231
<231=233,232
<233=235,234
<236=238,237
<239=240
<240=244,241
<241=243,242
<245=246
<246=247
<247=252,251,248
<248=250,249
<253=254
<254=260,255
<255=256
<256=257
<257=259,258
<260=261
<261=263,262
<264=265
<265=275,274,266
<266=273,267
<267=269,268
<269=270
<270=272,271
<276=277
<277=284,278
<278=280,279
<280=281
<281=283,282
<319=322,321,320
<322=341,337,331,327,323
<323=324
<324=326,325
<327=328
<328=330,329
<331=332
<332=336,333
<333=335,334
<337=338
<338=340,339
<341=387,342
<342=378,362,343
<343=356,344
<344=348,347,345
<345=346
<348=349
<349=351,350
<351=355,352
<352=354,353
<356=357
<357=361,358
<358=360,359
<362=376,370,363
<363=364
<364=365
<365=367,366
<367=369,368
<370=371
<371=373,372
<373=375,374
<376=377
<378=385,379
<379=380
<380=382,381
<382=384,383
<385=386
<387=388
<409=412,411,410
<412=418,413
<413=414
<414=416,415
<416=417
<418=419
<419=421,420
<421=422
<426=429,428,427
<429=430
<430=668,659,656,431
<431=647,432
<432=645,433
<433=630,615,608,478,446,440,434
<434=435
<435=437,436
<437=439,438
<440=441
<441=443,442
<443=445,444
<446=468,466,461,447
<447=448
<448=449
<449=458,450
<450=456,451
<451=452
<452=453
<453=455,454
<456=457
<458=460,459
<461=465,462
<462=464,463
<466=467
<468=469
<469=470
<470=477,476,471
<471=475,472
<472=474,473
<478=598,596,591,479
<479=583,575,569,563,484,480
<480=481
<481=483,482
<484=553,549,544,485
<485=526,506,486
<486=500,487
<487=494,488
<488=489
<489=491,490
<491=493,492
<494=495
<495=497,496
<497=499,498
<500=501
<501=505,502
<502=504,503
<506=520,507
<507=514,508
<508=509
<509=511,510
<511=513,512
<514=515
<515=517,516
<517=519,518
<520=521
<521=525,522
<522=524,523
<526=527
<527=543,542,528
<528=541,529
<529=531,530
<531=532
<532=534,533
<534=538,535
<535=537,536
<538=540,539
<544=548,545
<545=547,546
<549=550
<550=552,551
<553=554
<554=555
<555=562,561,556
<556=560,557
<557=559,558
<563=564
<564=566,565
<566=568,567
<569=570
<570=572,571
<572=574,573
<575=576
<576=580,577
<577=579,578
<580=582,581
<583=584
<584=588,585
<585=587,586
<588=590,589
<591=595,592
<592=594,593
<596=597
<598=599
<599=600
<600=607,606,601
<601=605,602
<602=604,603
<608=609
<609=614,613,610
<610=612,611
<615=616
<616=627,617
<617=625,618
<618=623,621,619
<619=620
<621=622
<623=624
<625=626
<627=629,628
<630=631
<631=642,632
<632=640,633
<633=638,636,634
<634=635
<636=637
<638=639
<640=641
<642=644,643
<645=646
<647=648
<648=655,654,649
<649=653,650
<650=652,651
<656=658,657
<659=660
<660=667,661
<661=663,662
<663=664
<664=666,665
<668=669
<669=670
<670=675,674,671
<671=673,672
