>3	FunctionDef	Control 
>4	ParameterList	control_type t
>5	Parameter	 
>6	Identifier	t
>7	ParameterType	control_type
>8	CompoundStatement	 
>13	FunctionDef	Control 
>14	ParameterList	 
>15	CompoundStatement	 
>19	FunctionDef	Control 
>20	ParameterList	TiXmlElement * node
>21	Parameter	 
>22	Identifier	node
>23	ParameterType	TiXmlElement *
>24	ReturnType	void
>25	CompoundStatement	 
>26	IdentifierDeclStatement	 
>27	IdentifierDecl	* child = NULL
>28	AssignmentExpr	* child = NULL
>29	Identifier	NULL
>30	Identifier	NULL
>31	Identifier	child
>32	IdentifierDeclType	TiXmlNode *
>33	ExpressionStatement	 
>34	AssignmentExpr	has_value_disabled = DVLib 
>35	CallExpression	DVLib 
>36	ArgumentList	DVLib 
>37	Argument	DVLib 
>38	CallExpression	DVLib 
>39	ArgumentList	node -> Attribute ( \"has_value_disabled\" )
>40	Argument	node -> Attribute ( \"has_value_disabled\" )
>41	CallExpression	node -> Attribute ( \"has_value_disabled\" )
>42	ArgumentList	\"has_value_disabled\"
>43	Argument	\"has_value_disabled\"
>44	PrimaryExpression	\"has_value_disabled\"
>45	Callee	node -> Attribute
>46	PtrMemberAccess	node -> Attribute
>47	Identifier	Attribute
>48	Identifier	node
>49	Callee	DVLib 
>50	Identifier	DVLib 
>51	Callee	DVLib 
>52	Identifier	DVLib 
>53	Identifier	has_value_disabled
>54	ExpressionStatement	 
>55	AssignmentExpr	check = wstring2controlcheck ( DVLib 
>56	CallExpression	wstring2controlcheck ( DVLib 
>57	ArgumentList	DVLib 
>58	Argument	DVLib 
>59	CallExpression	DVLib 
>60	ArgumentList	node -> Attribute ( \"check\" )
>61	Argument	node -> Attribute ( \"check\" )
>62	CallExpression	node -> Attribute ( \"check\" )
>63	ArgumentList	\"check\"
>64	Argument	\"check\"
>65	PrimaryExpression	\"check\"
>66	Callee	node -> Attribute
>67	PtrMemberAccess	node -> Attribute
>68	Identifier	Attribute
>69	Identifier	node
>70	Callee	DVLib 
>71	Identifier	DVLib 
>72	Callee	wstring2controlcheck
>73	Identifier	wstring2controlcheck
>74	Identifier	check
>75	ExpressionStatement	 
>76	AssignmentExpr	display_uninstall = DVLib 
>77	CallExpression	DVLib 
>78	ArgumentList	DVLib 
>79	Argument	DVLib 
>80	CallExpression	DVLib 
>81	ArgumentList	node -> Attribute ( \"display_uninstall\" )
>82	Argument	node -> Attribute ( \"display_uninstall\" )
>83	CallExpression	node -> Attribute ( \"display_uninstall\" )
>84	ArgumentList	\"display_uninstall\"
>85	Argument	\"display_uninstall\"
>86	PrimaryExpression	\"display_uninstall\"
>87	Callee	node -> Attribute
>88	PtrMemberAccess	node -> Attribute
>89	Identifier	Attribute
>90	Identifier	node
>91	Callee	DVLib 
>92	Identifier	DVLib 
>93	Callee	DVLib 
>94	Identifier	DVLib 
>95	Identifier	display_uninstall
>96	ExpressionStatement	 
>97	AssignmentExpr	display_install = DVLib 
>98	CallExpression	DVLib 
>99	ArgumentList	DVLib 
>100	Argument	DVLib 
>101	CallExpression	DVLib 
>102	ArgumentList	node -> Attribute ( \"display_install\" )
>103	Argument	node -> Attribute ( \"display_install\" )
>104	CallExpression	node -> Attribute ( \"display_install\" )
>105	ArgumentList	\"display_install\"
>106	Argument	\"display_install\"
>107	PrimaryExpression	\"display_install\"
>108	Callee	node -> Attribute
>109	PtrMemberAccess	node -> Attribute
>110	Identifier	Attribute
>111	Identifier	node
>112	Callee	DVLib 
>113	Identifier	DVLib 
>114	Callee	DVLib 
>115	Identifier	DVLib 
>116	Identifier	display_install
>117	ExpressionStatement	 
>118	AssignmentExpr	enabled = DVLib 
>119	CallExpression	DVLib 
>120	ArgumentList	DVLib 
>121	Argument	DVLib 
>122	CallExpression	DVLib 
>123	ArgumentList	node -> Attribute ( \"enabled\" )
>124	Argument	node -> Attribute ( \"enabled\" )
>125	CallExpression	node -> Attribute ( \"enabled\" )
>126	ArgumentList	\"enabled\"
>127	Argument	\"enabled\"
>128	PrimaryExpression	\"enabled\"
>129	Callee	node -> Attribute
>130	PtrMemberAccess	node -> Attribute
>131	Identifier	Attribute
>132	Identifier	node
>133	Callee	DVLib 
>134	Identifier	DVLib 
>135	Callee	DVLib 
>136	Identifier	DVLib 
>137	Identifier	enabled
>138	ExpressionStatement	 
>139	CallExpression	position . FromString ( DVLib 
>140	ArgumentList	DVLib 
>141	Argument	DVLib 
>142	CallExpression	DVLib 
>143	ArgumentList	node -> Attribute ( \"position\" )
>144	Argument	node -> Attribute ( \"position\" )
>145	CallExpression	node -> Attribute ( \"position\" )
>146	ArgumentList	\"position\"
>147	Argument	\"position\"
>148	PrimaryExpression	\"position\"
>149	Callee	node -> Attribute
>150	PtrMemberAccess	node -> Attribute
>151	Identifier	Attribute
>152	Identifier	node
>153	Callee	DVLib 
>154	Identifier	DVLib 
>155	Callee	position . FromString
>156	MemberAccess	position . FromString
>157	Identifier	FromString
>158	Identifier	position
>176	FunctionDef	Control 
>177	ParameterList	 
>178	ReturnType	std 
>179	CompoundStatement	 
>180	ReturnStatement	 
>181	CallExpression	ss . str ( )
>182	ArgumentList	 
>183	Callee	ss . str
>184	MemberAccess	ss . str
>185	Identifier	str
>186	Identifier	ss
>187	ExpressionStatement	 
>188	ShiftExpression	ss << position . ToString ( )
>189	CallExpression	position . ToString ( )
>190	ArgumentList	 
>191	Callee	position . ToString
>192	MemberAccess	position . ToString
>193	Identifier	ToString
>194	Identifier	position
>195	Identifier	ss
>196	IdentifierDeclStatement	 
>197	IdentifierDecl	ss
>198	Identifier	ss
>199	IdentifierDeclType	std 
>206	FunctionDef	Control 
>207	ParameterList	 
>208	ReturnType	bool
>209	CompoundStatement	 
>210	ReturnStatement	 
>211	Identifier	enabled
>212	IfStatement	if ( check == control_check_enabled || check == control_check_both )
>213	CompoundStatement	 
>214	ForStatement	for ( size_t j = 0 ; j < installedchecks . size ( ) ; j ++ )
>215	CompoundStatement	 
>216	IfStatement	if ( ! installedchecks [ j ] -> IsInstalled ( ) )
>217	ReturnStatement	 
>218	Identifier	false
>219	Condition	 
>220	UnaryOp	! installedchecks [ j ] -> IsInstalled ( )
>221	CallExpression	installedchecks [ j ] -> IsInstalled ( )
>222	ArgumentList	 
>223	Callee	installedchecks [ j ] -> IsInstalled
>224	PtrMemberAccess	installedchecks [ j ] -> IsInstalled
>225	Identifier	IsInstalled
>226	ArrayIndexing	installedchecks [ j ]
>227	Identifier	j
>228	Identifier	installedchecks
>229	UnaryOperator	!
>230	IncDecOp	 
>231	IncDec	++
>232	Identifier	j
>233	Condition	 
>234	RelationalExpression	j < installedchecks . size ( )
>235	CallExpression	installedchecks . size ( )
>236	ArgumentList	 
>237	Callee	installedchecks . size
>238	MemberAccess	installedchecks . size
>239	Identifier	size
>240	Identifier	installedchecks
>241	Identifier	j
>242	ForInit	 
>243	IdentifierDeclStatement	size_t j = 0 ;
>244	IdentifierDecl	j = 0
>245	AssignmentExpr	j = 0
>246	PrimaryExpression	0
>247	Identifier	j
>248	Identifier	j
>249	IdentifierDeclType	size_t
>250	Condition	 
>251	OrExpression	check == control_check_enabled || check == control_check_both
>252	EqualityExpression	check == control_check_both
>253	Identifier	control_check_both
>254	Identifier	check
>255	EqualityExpression	check == control_check_enabled
>256	Identifier	control_check_enabled
>257	Identifier	check
>274	FunctionDef	Control 
>275	ParameterList	 
>276	ReturnType	bool
>277	CompoundStatement	 
>278	ReturnStatement	 
>279	Identifier	true
>280	IfStatement	if ( check == control_check_display || check == control_check_both )
>281	CompoundStatement	 
>282	ForStatement	for ( size_t j = 0 ; j < installedchecks . size ( ) ; j ++ )
>283	CompoundStatement	 
>284	IfStatement	if ( ! installedchecks [ j ] -> IsInstalled ( ) )
>285	ReturnStatement	 
>286	Identifier	false
>287	Condition	 
>288	UnaryOp	! installedchecks [ j ] -> IsInstalled ( )
>289	CallExpression	installedchecks [ j ] -> IsInstalled ( )
>290	ArgumentList	 
>291	Callee	installedchecks [ j ] -> IsInstalled
>292	PtrMemberAccess	installedchecks [ j ] -> IsInstalled
>293	Identifier	IsInstalled
>294	ArrayIndexing	installedchecks [ j ]
>295	Identifier	j
>296	Identifier	installedchecks
>297	UnaryOperator	!
>298	IncDecOp	 
>299	IncDec	++
>300	Identifier	j
>301	Condition	 
>302	RelationalExpression	j < installedchecks . size ( )
>303	CallExpression	installedchecks . size ( )
>304	ArgumentList	 
>305	Callee	installedchecks . size
>306	MemberAccess	installedchecks . size
>307	Identifier	size
>308	Identifier	installedchecks
>309	Identifier	j
>310	ForInit	 
>311	IdentifierDeclStatement	size_t j = 0 ;
>312	IdentifierDecl	j = 0
>313	AssignmentExpr	j = 0
>314	PrimaryExpression	0
>315	Identifier	j
>316	Identifier	j
>317	IdentifierDeclType	size_t
>318	Condition	 
>319	OrExpression	check == control_check_display || check == control_check_both
>320	EqualityExpression	check == control_check_both
>321	Identifier	control_check_both
>322	Identifier	check
>323	EqualityExpression	check == control_check_display
>324	Identifier	control_check_display
>325	Identifier	check
>326	IfStatement	if ( InstallerSession 
>327	ReturnStatement	 
>328	Identifier	false
>329	Condition	 
>330	AndExpression	InstallerSession 
>331	UnaryOp	! display_uninstall
>332	Identifier	display_uninstall
>333	UnaryOperator	!
>334	EqualityExpression	InstallerSession 
>335	Identifier	SequenceUninstall
>336	PtrMemberAccess	InstallerSession 
>337	Identifier	sequence
>338	Identifier	InstallerSession 
>339	IfStatement	if ( InstallerSession 
>340	ReturnStatement	 
>341	Identifier	false
>342	Condition	 
>343	AndExpression	InstallerSession 
>344	UnaryOp	! display_install
>345	Identifier	display_install
>346	UnaryOperator	!
>347	EqualityExpression	InstallerSession 
>348	Identifier	SequenceInstall
>349	PtrMemberAccess	InstallerSession 
>350	Identifier	sequence
>351	Identifier	InstallerSession 
>375	FunctionDef	Control 
>376	ParameterList	const std 
>377	Parameter	 
>378	Identifier	value
>379	ParameterType	const std 
>380	ReturnType	control_check
>381	CompoundStatement	 
>382	ReturnStatement	 
>383	Identifier	control_check_enabled
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
<3=8,4
<4=5
<5=7,6
<13=15,14
<19=25,24,20
<20=21
<21=23,22
<25=138,117,96,75,54,33,26
<26=27
<27=32,31,28
<28=30,29
<33=34
<34=53,35
<35=51,36
<36=37
<37=38
<38=49,39
<39=40
<40=41
<41=45,42
<42=43
<43=44
<45=46
<46=48,47
<49=50
<51=52
<54=55
<55=74,56
<56=72,57
<57=58
<58=59
<59=70,60
<60=61
<61=62
<62=66,63
<63=64
<64=65
<66=67
<67=69,68
<70=71
<72=73
<75=76
<76=95,77
<77=93,78
<78=79
<79=80
<80=91,81
<81=82
<82=83
<83=87,84
<84=85
<85=86
<87=88
<88=90,89
<91=92
<93=94
<96=97
<97=116,98
<98=114,99
<99=100
<100=101
<101=112,102
<102=103
<103=104
<104=108,105
<105=106
<106=107
<108=109
<109=111,110
<112=113
<114=115
<117=118
<118=137,119
<119=135,120
<120=121
<121=122
<122=133,123
<123=124
<124=125
<125=129,126
<126=127
<127=128
<129=130
<130=132,131
<133=134
<135=136
<138=139
<139=155,140
<140=141
<141=142
<142=153,143
<143=144
<144=145
<145=149,146
<146=147
<147=148
<149=150
<150=152,151
<153=154
<155=156
<156=158,157
<176=179,178,177
<179=196,187,180
<180=181
<181=183,182
<183=184
<184=186,185
<187=188
<188=195,189
<189=191,190
<191=192
<192=194,193
<196=197
<197=199,198
<206=209,208,207
<209=212,210
<210=211
<212=250,213
<213=214
<214=242,233,230,215
<215=216
<216=219,217
<217=218
<219=220
<220=229,221
<221=223,222
<223=224
<224=226,225
<226=228,227
<230=232,231
<233=234
<234=241,235
<235=237,236
<237=238
<238=240,239
<242=243
<243=244
<244=249,248,245
<245=247,246
<250=251
<251=255,252
<252=254,253
<255=257,256
<274=277,276,275
<277=339,326,280,278
<278=279
<280=318,281
<281=282
<282=310,301,298,283
<283=284
<284=287,285
<285=286
<287=288
<288=297,289
<289=291,290
<291=292
<292=294,293
<294=296,295
<298=300,299
<301=302
<302=309,303
<303=305,304
<305=306
<306=308,307
<310=311
<311=312
<312=317,316,313
<313=315,314
<318=319
<319=323,320
<320=322,321
<323=325,324
<326=329,327
<327=328
<329=330
<330=334,331
<331=333,332
<334=336,335
<336=338,337
<339=342,340
<340=341
<342=343
<343=347,344
<344=346,345
<347=349,348
<349=351,350
<375=381,380,376
<376=377
<377=379,378
<381=390,389,388,387,386,385,384,382
<382=383
