>3	FunctionDef	check (bool ok , const char * file , int line)
>4	ParameterList	bool ok , const char * file , int line
>5	Parameter	 
>6	Identifier	line
>7	ParameterType	int
>8	Parameter	 
>9	Identifier	file
>10	ParameterType	const char *
>11	Parameter	 
>12	Identifier	ok
>13	ParameterType	bool
>14	ReturnType	void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	ShiftExpression	cout << file << '(' << line << \")
>18	ShiftExpression	file << '(' << line << \")
>19	ShiftExpression	'(' << line << \")
>20	ShiftExpression	line << \")
>21	PrimaryExpression	\")
>22	Identifier	line
>23	PrimaryExpression	'('
>24	Identifier	file
>25	Identifier	cout
>26	ExpressionStatement	 
>27	CallExpression	boost 
>28	ArgumentList	 
>29	Callee	boost 
>30	Identifier	boost 
>31	Statement	 
>32	Statement	 
>33	IfStatement	if ( ok )
>34	ReturnStatement	 
>35	Condition	 
>36	Identifier	ok
>43	FunctionDef	file_status_test ()
>44	ParameterList	 
>45	ReturnType	void
>46	CompoundStatement	 
>47	ExpressionStatement	 
>48	CallExpression	CHECK ( ( v & 0400 ) == 0400 )
>49	ArgumentList	( v & 0400 ) == 0400
>50	Argument	( v & 0400 ) == 0400
>51	EqualityExpression	( v & 0400 ) == 0400
>52	PrimaryExpression	0400
>53	BitAndExpression	v & 0400
>54	PrimaryExpression	0400
>55	Identifier	v
>56	Callee	CHECK
>57	Identifier	CHECK
>58	ExpressionStatement	 
>59	ShiftExpression	cout << \"  symlink_status(\\".\\") permissions are \" << std 
>60	ShiftExpression	\"  symlink_status(\\".\\") permissions are \" << std 
>61	ShiftExpression	std 
>62	ShiftExpression	( v & 0777 ) << std 
>63	ShiftExpression	std 
>64	Identifier	endl
>65	Identifier	std 
>66	BitAndExpression	v & 0777
>67	PrimaryExpression	0777
>68	Identifier	v
>69	Identifier	std 
>70	PrimaryExpression	\"  symlink_status(\\".\\") permissions are \"
>71	Identifier	cout
>72	ExpressionStatement	 
>73	AssignmentExpr	v = s . permissions ( )
>74	CallExpression	s . permissions ( )
>75	ArgumentList	 
>76	Callee	s . permissions
>77	MemberAccess	s . permissions
>78	Identifier	permissions
>79	Identifier	s
>80	Identifier	v
>81	ExpressionStatement	 
>82	AssignmentExpr	s = symlink_status ( \".\" )
>83	CallExpression	symlink_status ( \".\" )
>84	ArgumentList	\".\"
>85	Argument	\".\"
>86	PrimaryExpression	\".\"
>87	Callee	symlink_status
>88	Identifier	symlink_status
>89	Identifier	s
>90	ExpressionStatement	 
>91	CallExpression	CHECK ( ( v & 0400 ) == 0400 )
>92	ArgumentList	( v & 0400 ) == 0400
>93	Argument	( v & 0400 ) == 0400
>94	EqualityExpression	( v & 0400 ) == 0400
>95	PrimaryExpression	0400
>96	BitAndExpression	v & 0400
>97	PrimaryExpression	0400
>98	Identifier	v
>99	Callee	CHECK
>100	Identifier	CHECK
>101	ExpressionStatement	 
>102	ShiftExpression	cout << \"  status(\\".\\") permissions are \" << std 
>103	ShiftExpression	\"  status(\\".\\") permissions are \" << std 
>104	ShiftExpression	std 
>105	ShiftExpression	( v & 0777 ) << std 
>106	ShiftExpression	std 
>107	Identifier	endl
>108	Identifier	std 
>109	BitAndExpression	v & 0777
>110	PrimaryExpression	0777
>111	Identifier	v
>112	Identifier	std 
>113	PrimaryExpression	\"  status(\\".\\") permissions are \"
>114	Identifier	cout
>115	IdentifierDeclStatement	 
>116	IdentifierDecl	v = s . permissions ( )
>117	AssignmentExpr	v = s . permissions ( )
>118	CallExpression	s . permissions ( )
>119	ArgumentList	 
>120	Callee	s . permissions
>121	MemberAccess	s . permissions
>122	Identifier	permissions
>123	Identifier	s
>124	Identifier	v
>125	Identifier	v
>126	IdentifierDeclType	int
>127	IdentifierDeclStatement	 
>128	IdentifierDecl	s = status ( \".\" )
>129	AssignmentExpr	s = status ( \".\" )
>130	CallExpression	status ( \".\" )
>131	ArgumentList	\".\"
>132	Argument	\".\"
>133	PrimaryExpression	\".\"
>134	Callee	status
>135	Identifier	status
>136	Identifier	s
>137	Identifier	s
>138	IdentifierDeclType	file_status
>139	ExpressionStatement	 
>140	ShiftExpression	cout << \"file_status test...\" << endl
>141	ShiftExpression	\"file_status test...\" << endl
>142	Identifier	endl
>143	PrimaryExpression	\"file_status test...\"
>144	Identifier	cout
>153	FunctionDef	query_test ()
>154	ParameterList	 
>155	ReturnType	void
>156	CompoundStatement	 
>157	ExpressionStatement	 
>158	CallExpression	CHECK ( ! is_socket ( \"/\" ) )
>159	ArgumentList	! is_socket ( \"/\" )
>160	Argument	! is_socket ( \"/\" )
>161	UnaryOp	! is_socket ( \"/\" )
>162	CallExpression	is_socket ( \"/\" )
>163	ArgumentList	\"/\"
>164	Argument	\"/\"
>165	PrimaryExpression	\"/\"
>166	Callee	is_socket
>167	Identifier	is_socket
>168	UnaryOperator	!
>169	Callee	CHECK
>170	Identifier	CHECK
>171	ExpressionStatement	 
>172	CallExpression	CHECK ( ! is_fifo ( \"/\" ) )
>173	ArgumentList	! is_fifo ( \"/\" )
>174	Argument	! is_fifo ( \"/\" )
>175	UnaryOp	! is_fifo ( \"/\" )
>176	CallExpression	is_fifo ( \"/\" )
>177	ArgumentList	\"/\"
>178	Argument	\"/\"
>179	PrimaryExpression	\"/\"
>180	Callee	is_fifo
>181	Identifier	is_fifo
>182	UnaryOperator	!
>183	Callee	CHECK
>184	Identifier	CHECK
>185	ExpressionStatement	 
>186	CallExpression	CHECK ( ! is_character_file ( \"/\" ) )
>187	ArgumentList	! is_character_file ( \"/\" )
>188	Argument	! is_character_file ( \"/\" )
>189	UnaryOp	! is_character_file ( \"/\" )
>190	CallExpression	is_character_file ( \"/\" )
>191	ArgumentList	\"/\"
>192	Argument	\"/\"
>193	PrimaryExpression	\"/\"
>194	Callee	is_character_file
>195	Identifier	is_character_file
>196	UnaryOperator	!
>197	Callee	CHECK
>198	Identifier	CHECK
>199	ExpressionStatement	 
>200	CallExpression	CHECK ( ! is_block_file ( \"/\" ) )
>201	ArgumentList	! is_block_file ( \"/\" )
>202	Argument	! is_block_file ( \"/\" )
>203	UnaryOp	! is_block_file ( \"/\" )
>204	CallExpression	is_block_file ( \"/\" )
>205	ArgumentList	\"/\"
>206	Argument	\"/\"
>207	PrimaryExpression	\"/\"
>208	Callee	is_block_file
>209	Identifier	is_block_file
>210	UnaryOperator	!
>211	Callee	CHECK
>212	Identifier	CHECK
>213	ExpressionStatement	 
>214	CallExpression	CHECK ( ! is_other ( \"/\" ) )
>215	ArgumentList	! is_other ( \"/\" )
>216	Argument	! is_other ( \"/\" )
>217	UnaryOp	! is_other ( \"/\" )
>218	CallExpression	is_other ( \"/\" )
>219	ArgumentList	\"/\"
>220	Argument	\"/\"
>221	PrimaryExpression	\"/\"
>222	Callee	is_other
>223	Identifier	is_other
>224	UnaryOperator	!
>225	Callee	CHECK
>226	Identifier	CHECK
>227	ExpressionStatement	 
>228	CallExpression	CHECK ( ! boost 
>229	ArgumentList	! boost 
>230	Argument	! boost 
>231	UnaryOp	! boost 
>232	CallExpression	boost 
>233	ArgumentList	\"/\"
>234	Argument	\"/\"
>235	PrimaryExpression	\"/\"
>236	Callee	boost 
>237	Identifier	boost 
>238	UnaryOperator	!
>239	Callee	CHECK
>240	Identifier	CHECK
>241	ExpressionStatement	 
>242	CallExpression	CHECK ( ! is_regular_file ( \"/\" ) )
>243	ArgumentList	! is_regular_file ( \"/\" )
>244	Argument	! is_regular_file ( \"/\" )
>245	UnaryOp	! is_regular_file ( \"/\" )
>246	CallExpression	is_regular_file ( \"/\" )
>247	ArgumentList	\"/\"
>248	Argument	\"/\"
>249	PrimaryExpression	\"/\"
>250	Callee	is_regular_file
>251	Identifier	is_regular_file
>252	UnaryOperator	!
>253	Callee	CHECK
>254	Identifier	CHECK
>255	ExpressionStatement	 
>256	CallExpression	CHECK ( is_directory ( \"/\" ) )
>257	ArgumentList	is_directory ( \"/\" )
>258	Argument	is_directory ( \"/\" )
>259	CallExpression	is_directory ( \"/\" )
>260	ArgumentList	\"/\"
>261	Argument	\"/\"
>262	PrimaryExpression	\"/\"
>263	Callee	is_directory
>264	Identifier	is_directory
>265	Callee	CHECK
>266	Identifier	CHECK
>267	ExpressionStatement	 
>268	CallExpression	CHECK ( exists ( \"/\" ) )
>269	ArgumentList	exists ( \"/\" )
>270	Argument	exists ( \"/\" )
>271	CallExpression	exists ( \"/\" )
>272	ArgumentList	\"/\"
>273	Argument	\"/\"
>274	PrimaryExpression	\"/\"
>275	Callee	exists
>276	Identifier	exists
>277	Callee	CHECK
>278	Identifier	CHECK
>279	ExpressionStatement	 
>280	CallExpression	CHECK ( ! ec )
>281	ArgumentList	! ec
>282	Argument	! ec
>283	UnaryOp	! ec
>284	Identifier	ec
>285	UnaryOperator	!
>286	Callee	CHECK
>287	Identifier	CHECK
>288	IfStatement	if ( ec )
>289	CompoundStatement	 
>290	ExpressionStatement	 
>291	ShiftExpression	cout << \"ec value
>292	ShiftExpression	\"ec value
>293	ShiftExpression	ec . value ( ) << \", message
>294	ShiftExpression	\", message
>295	ShiftExpression	ec . message ( ) << endl
>296	Identifier	endl
>297	CallExpression	ec . message ( )
>298	ArgumentList	 
>299	Callee	ec . message
>300	MemberAccess	ec . message
>301	Identifier	message
>302	Identifier	ec
>303	PrimaryExpression	\", message
>304	CallExpression	ec . value ( )
>305	ArgumentList	 
>306	Callee	ec . value
>307	MemberAccess	ec . value
>308	Identifier	value
>309	Identifier	ec
>310	PrimaryExpression	\"ec value
>311	Identifier	cout
>312	ExpressionStatement	 
>313	ShiftExpression	cout << \"exists(\\"/\\", ec) resulted in non-zero ec.value()\" << endl
>314	ShiftExpression	\"exists(\\"/\\", ec) resulted in non-zero ec.value()\" << endl
>315	Identifier	endl
>316	PrimaryExpression	\"exists(\\"/\\", ec) resulted in non-zero ec.value()\"
>317	Identifier	cout
>318	Condition	 
>319	Identifier	ec
>320	ExpressionStatement	 
>321	CallExpression	exists ( \"/\" , ec )
>322	ArgumentList	\"/\"
>323	Argument	ec
>324	Identifier	ec
>325	Argument	\"/\"
>326	PrimaryExpression	\"/\"
>327	Callee	exists
>328	Identifier	exists
>329	ExpressionStatement	 
>330	CallExpression	CHECK ( ! exists ( \"no-such-file\" ) )
>331	ArgumentList	! exists ( \"no-such-file\" )
>332	Argument	! exists ( \"no-such-file\" )
>333	UnaryOp	! exists ( \"no-such-file\" )
>334	CallExpression	exists ( \"no-such-file\" )
>335	ArgumentList	\"no-such-file\"
>336	Argument	\"no-such-file\"
>337	PrimaryExpression	\"no-such-file\"
>338	Callee	exists
>339	Identifier	exists
>340	UnaryOperator	!
>341	Callee	CHECK
>342	Identifier	CHECK
>343	ExpressionStatement	 
>344	CallExpression	CHECK ( is_directory ( \"/\" ) )
>345	ArgumentList	is_directory ( \"/\" )
>346	Argument	is_directory ( \"/\" )
>347	CallExpression	is_directory ( \"/\" )
>348	ArgumentList	\"/\"
>349	Argument	\"/\"
>350	PrimaryExpression	\"/\"
>351	Callee	is_directory
>352	Identifier	is_directory
>353	Callee	CHECK
>354	Identifier	CHECK
>355	ExpressionStatement	 
>356	CallExpression	CHECK ( exists ( \"/\" ) )
>357	ArgumentList	exists ( \"/\" )
>358	Argument	exists ( \"/\" )
>359	CallExpression	exists ( \"/\" )
>360	ArgumentList	\"/\"
>361	Argument	\"/\"
>362	PrimaryExpression	\"/\"
>363	Callee	exists
>364	Identifier	exists
>365	Callee	CHECK
>366	Identifier	CHECK
>367	ExpressionStatement	 
>368	CallExpression	CHECK ( status ( \"no-such-file\" ) == file_status ( file_type 
>369	ArgumentList	status ( \"no-such-file\" ) == file_status ( file_type 
>370	Argument	status ( \"no-such-file\" ) == file_status ( file_type 
>371	EqualityExpression	status ( \"no-such-file\" ) == file_status ( file_type 
>372	CallExpression	file_status ( file_type 
>373	ArgumentList	file_type 
>374	Argument	no_perms
>375	Identifier	no_perms
>376	Argument	file_type 
>377	Identifier	file_type 
>378	Callee	file_status
>379	Identifier	file_status
>380	CallExpression	status ( \"no-such-file\" )
>381	ArgumentList	\"no-such-file\"
>382	Argument	\"no-such-file\"
>383	PrimaryExpression	\"no-such-file\"
>384	Callee	status
>385	Identifier	status
>386	Callee	CHECK
>387	Identifier	CHECK
>388	ExpressionStatement	 
>389	CallExpression	CHECK ( ec == errc 
>390	ArgumentList	ec == errc 
>391	Argument	ec == errc 
>392	EqualityExpression	ec == errc 
>393	Identifier	errc 
>394	Identifier	ec
>395	Callee	CHECK
>396	Identifier	CHECK
>397	ExpressionStatement	 
>398	CallExpression	CHECK ( file_size ( \"no-such-file\" , ec ) == static_cast < boost 
>399	ArgumentList	file_size ( \"no-such-file\" , ec ) == static_cast < boost 
>400	Argument	file_size ( \"no-such-file\" , ec ) == static_cast < boost 
>401	EqualityExpression	file_size ( \"no-such-file\" , ec ) == static_cast < boost 
>402	RelationalExpression	static_cast < boost 
>403	RelationalExpression	boost 
>404	UnaryOp	- 1
>405	PrimaryExpression	1
>406	UnaryOperator	-
>407	Identifier	boost 
>408	Identifier	static_cast
>409	CallExpression	file_size ( \"no-such-file\" , ec )
>410	ArgumentList	\"no-such-file\"
>411	Argument	ec
>412	Identifier	ec
>413	Argument	\"no-such-file\"
>414	PrimaryExpression	\"no-such-file\"
>415	Callee	file_size
>416	Identifier	file_size
>417	Callee	CHECK
>418	Identifier	CHECK
>419	IdentifierDeclStatement	 
>420	IdentifierDecl	ec
>421	Identifier	ec
>422	IdentifierDeclType	error_code
>423	ExpressionStatement	 
>424	ShiftExpression	cout << \"query test...\" << endl
>425	ShiftExpression	\"query test...\" << endl
>426	Identifier	endl
>427	PrimaryExpression	\"query test...\"
>428	Identifier	cout
>450	FunctionDef	directory_iterator_test ()
>451	ParameterList	 
>452	ReturnType	void
>453	CompoundStatement	 
>454	ExpressionStatement	 
>455	ShiftExpression	cout << \"directory_iterator_test complete\" << endl
>456	ShiftExpression	\"directory_iterator_test complete\" << endl
>457	Identifier	endl
>458	PrimaryExpression	\"directory_iterator_test complete\"
>459	Identifier	cout
>460	CompoundStatement	 
>461	ExpressionStatement	 
>462	CallExpression	CHECK ( ! x . path ( ) . empty ( ) )
>463	ArgumentList	! x . path ( ) . empty ( )
>464	Argument	! x . path ( ) . empty ( )
>465	UnaryOp	! x . path ( ) . empty ( )
>466	CallExpression	x . path ( ) . empty ( )
>467	ArgumentList	 
>468	Callee	x . path ( ) . empty
>469	MemberAccess	x . path ( ) . empty
>470	Identifier	empty
>471	CallExpression	x . path ( )
>472	ArgumentList	 
>473	Callee	x . path
>474	MemberAccess	x . path
>475	Identifier	path
>476	Identifier	x
>477	UnaryOperator	!
>478	Callee	CHECK
>479	Identifier	CHECK
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	CompoundStatement	 
>492	ExpressionStatement	 
>493	CallExpression	CHECK ( ! x . path ( ) . empty ( ) )
>494	ArgumentList	! x . path ( ) . empty ( )
>495	Argument	! x . path ( ) . empty ( )
>496	UnaryOp	! x . path ( ) . empty ( )
>497	CallExpression	x . path ( ) . empty ( )
>498	ArgumentList	 
>499	Callee	x . path ( ) . empty
>500	MemberAccess	x . path ( ) . empty
>501	Identifier	empty
>502	CallExpression	x . path ( )
>503	ArgumentList	 
>504	Callee	x . path
>505	MemberAccess	x . path
>506	Identifier	path
>507	Identifier	x
>508	UnaryOperator	!
>509	Callee	CHECK
>510	Identifier	CHECK
>511	Statement	 
>512	Statement	 
>513	Label	 
>514	Identifier	x
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	IdentifierDeclStatement	 
>520	IdentifierDecl	dir_itr ( \".\" )
>521	PrimaryExpression	\".\"
>522	Identifier	dir_itr
>523	IdentifierDeclType	const directory_iterator
>524	CompoundStatement	 
>525	ExpressionStatement	 
>526	CallExpression	CHECK ( ! x . path ( ) . empty ( ) )
>527	ArgumentList	! x . path ( ) . empty ( )
>528	Argument	! x . path ( ) . empty ( )
>529	UnaryOp	! x . path ( ) . empty ( )
>530	CallExpression	x . path ( ) . empty ( )
>531	ArgumentList	 
>532	Callee	x . path ( ) . empty
>533	MemberAccess	x . path ( ) . empty
>534	Identifier	empty
>535	CallExpression	x . path ( )
>536	ArgumentList	 
>537	Callee	x . path
>538	MemberAccess	x . path
>539	Identifier	path
>540	Identifier	x
>541	UnaryOperator	!
>542	Callee	CHECK
>543	Identifier	CHECK
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Label	 
>550	Identifier	x
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	ExpressionStatement	 
>556	CallExpression	CHECK ( directory_iterator ( ) == end )
>557	ArgumentList	directory_iterator ( ) == end
>558	Argument	directory_iterator ( ) == end
>559	EqualityExpression	directory_iterator ( ) == end
>560	Identifier	end
>561	CallExpression	directory_iterator ( )
>562	ArgumentList	 
>563	Callee	directory_iterator
>564	Identifier	directory_iterator
>565	Callee	CHECK
>566	Identifier	CHECK
>567	ExpressionStatement	 
>568	CallExpression	CHECK ( directory_iterator ( \".\" ) != directory_iterator ( ) )
>569	ArgumentList	directory_iterator ( \".\" ) != directory_iterator ( )
>570	Argument	directory_iterator ( \".\" ) != directory_iterator ( )
>571	EqualityExpression	directory_iterator ( \".\" ) != directory_iterator ( )
>572	CallExpression	directory_iterator ( )
>573	ArgumentList	 
>574	Callee	directory_iterator
>575	Identifier	directory_iterator
>576	CallExpression	directory_iterator ( \".\" )
>577	ArgumentList	\".\"
>578	Argument	\".\"
>579	PrimaryExpression	\".\"
>580	Callee	directory_iterator
>581	Identifier	directory_iterator
>582	Callee	CHECK
>583	Identifier	CHECK
>584	ForStatement	for ( ; it != end ; ++ it )
>585	CompoundStatement	 
>586	UnaryExpression	 
>587	Identifier	it
>588	IncDec	++
>589	Condition	 
>590	EqualityExpression	it != end
>591	Identifier	end
>592	Identifier	it
>593	IfStatement	if ( is_regular_file ( it -> status ( ) ) )
>594	ElseStatement	else
>595	CompoundStatement	 
>596	ExpressionStatement	 
>597	CallExpression	CHECK ( ! is_symlink ( it -> symlink_status ( ) ) )
>598	ArgumentList	! is_symlink ( it -> symlink_status ( ) )
>599	Argument	! is_symlink ( it -> symlink_status ( ) )
>600	UnaryOp	! is_symlink ( it -> symlink_status ( ) )
>601	CallExpression	is_symlink ( it -> symlink_status ( ) )
>602	ArgumentList	it -> symlink_status ( )
>603	Argument	it -> symlink_status ( )
>604	CallExpression	it -> symlink_status ( )
>605	ArgumentList	 
>606	Callee	it -> symlink_status
>607	PtrMemberAccess	it -> symlink_status
>608	Identifier	symlink_status
>609	Identifier	it
>610	Callee	is_symlink
>611	Identifier	is_symlink
>612	UnaryOperator	!
>613	Callee	CHECK
>614	Identifier	CHECK
>615	ExpressionStatement	 
>616	CallExpression	CHECK ( ! is_symlink ( it -> status ( ) ) )
>617	ArgumentList	! is_symlink ( it -> status ( ) )
>618	Argument	! is_symlink ( it -> status ( ) )
>619	UnaryOp	! is_symlink ( it -> status ( ) )
>620	CallExpression	is_symlink ( it -> status ( ) )
>621	ArgumentList	it -> status ( )
>622	Argument	it -> status ( )
>623	CallExpression	it -> status ( )
>624	ArgumentList	 
>625	Callee	it -> status
>626	PtrMemberAccess	it -> status
>627	Identifier	status
>628	Identifier	it
>629	Callee	is_symlink
>630	Identifier	is_symlink
>631	UnaryOperator	!
>632	Callee	CHECK
>633	Identifier	CHECK
>634	ExpressionStatement	 
>635	CallExpression	CHECK ( ! is_regular_file ( it -> symlink_status ( ) ) )
>636	ArgumentList	! is_regular_file ( it -> symlink_status ( ) )
>637	Argument	! is_regular_file ( it -> symlink_status ( ) )
>638	UnaryOp	! is_regular_file ( it -> symlink_status ( ) )
>639	CallExpression	is_regular_file ( it -> symlink_status ( ) )
>640	ArgumentList	it -> symlink_status ( )
>641	Argument	it -> symlink_status ( )
>642	CallExpression	it -> symlink_status ( )
>643	ArgumentList	 
>644	Callee	it -> symlink_status
>645	PtrMemberAccess	it -> symlink_status
>646	Identifier	symlink_status
>647	Identifier	it
>648	Callee	is_regular_file
>649	Identifier	is_regular_file
>650	UnaryOperator	!
>651	Callee	CHECK
>652	Identifier	CHECK
>653	ExpressionStatement	 
>654	CallExpression	CHECK ( ! is_regular_file ( it -> status ( ) ) )
>655	ArgumentList	! is_regular_file ( it -> status ( ) )
>656	Argument	! is_regular_file ( it -> status ( ) )
>657	UnaryOp	! is_regular_file ( it -> status ( ) )
>658	CallExpression	is_regular_file ( it -> status ( ) )
>659	ArgumentList	it -> status ( )
>660	Argument	it -> status ( )
>661	CallExpression	it -> status ( )
>662	ArgumentList	 
>663	Callee	it -> status
>664	PtrMemberAccess	it -> status
>665	Identifier	status
>666	Identifier	it
>667	Callee	is_regular_file
>668	Identifier	is_regular_file
>669	UnaryOperator	!
>670	Callee	CHECK
>671	Identifier	CHECK
>672	ExpressionStatement	 
>673	CallExpression	CHECK ( is_directory ( it -> symlink_status ( ) ) )
>674	ArgumentList	is_directory ( it -> symlink_status ( ) )
>675	Argument	is_directory ( it -> symlink_status ( ) )
>676	CallExpression	is_directory ( it -> symlink_status ( ) )
>677	ArgumentList	it -> symlink_status ( )
>678	Argument	it -> symlink_status ( )
>679	CallExpression	it -> symlink_status ( )
>680	ArgumentList	 
>681	Callee	it -> symlink_status
>682	PtrMemberAccess	it -> symlink_status
>683	Identifier	symlink_status
>684	Identifier	it
>685	Callee	is_directory
>686	Identifier	is_directory
>687	Callee	CHECK
>688	Identifier	CHECK
>689	ExpressionStatement	 
>690	CallExpression	CHECK ( is_directory ( it -> status ( ) ) )
>691	ArgumentList	is_directory ( it -> status ( ) )
>692	Argument	is_directory ( it -> status ( ) )
>693	CallExpression	is_directory ( it -> status ( ) )
>694	ArgumentList	it -> status ( )
>695	Argument	it -> status ( )
>696	CallExpression	it -> status ( )
>697	ArgumentList	 
>698	Callee	it -> status
>699	PtrMemberAccess	it -> status
>700	Identifier	status
>701	Identifier	it
>702	Callee	is_directory
>703	Identifier	is_directory
>704	Callee	CHECK
>705	Identifier	CHECK
>706	CompoundStatement	 
>707	ExpressionStatement	 
>708	CallExpression	CHECK ( ! is_symlink ( it -> symlink_status ( ) ) )
>709	ArgumentList	! is_symlink ( it -> symlink_status ( ) )
>710	Argument	! is_symlink ( it -> symlink_status ( ) )
>711	UnaryOp	! is_symlink ( it -> symlink_status ( ) )
>712	CallExpression	is_symlink ( it -> symlink_status ( ) )
>713	ArgumentList	it -> symlink_status ( )
>714	Argument	it -> symlink_status ( )
>715	CallExpression	it -> symlink_status ( )
>716	ArgumentList	 
>717	Callee	it -> symlink_status
>718	PtrMemberAccess	it -> symlink_status
>719	Identifier	symlink_status
>720	Identifier	it
>721	Callee	is_symlink
>722	Identifier	is_symlink
>723	UnaryOperator	!
>724	Callee	CHECK
>725	Identifier	CHECK
>726	ExpressionStatement	 
>727	CallExpression	CHECK ( ! is_directory ( it -> symlink_status ( ) ) )
>728	ArgumentList	! is_directory ( it -> symlink_status ( ) )
>729	Argument	! is_directory ( it -> symlink_status ( ) )
>730	UnaryOp	! is_directory ( it -> symlink_status ( ) )
>731	CallExpression	is_directory ( it -> symlink_status ( ) )
>732	ArgumentList	it -> symlink_status ( )
>733	Argument	it -> symlink_status ( )
>734	CallExpression	it -> symlink_status ( )
>735	ArgumentList	 
>736	Callee	it -> symlink_status
>737	PtrMemberAccess	it -> symlink_status
>738	Identifier	symlink_status
>739	Identifier	it
>740	Callee	is_directory
>741	Identifier	is_directory
>742	UnaryOperator	!
>743	Callee	CHECK
>744	Identifier	CHECK
>745	ExpressionStatement	 
>746	CallExpression	CHECK ( ! is_symlink ( it -> status ( ) ) )
>747	ArgumentList	! is_symlink ( it -> status ( ) )
>748	Argument	! is_symlink ( it -> status ( ) )
>749	UnaryOp	! is_symlink ( it -> status ( ) )
>750	CallExpression	is_symlink ( it -> status ( ) )
>751	ArgumentList	it -> status ( )
>752	Argument	it -> status ( )
>753	CallExpression	it -> status ( )
>754	ArgumentList	 
>755	Callee	it -> status
>756	PtrMemberAccess	it -> status
>757	Identifier	status
>758	Identifier	it
>759	Callee	is_symlink
>760	Identifier	is_symlink
>761	UnaryOperator	!
>762	Callee	CHECK
>763	Identifier	CHECK
>764	ExpressionStatement	 
>765	CallExpression	CHECK ( ! is_directory ( it -> status ( ) ) )
>766	ArgumentList	! is_directory ( it -> status ( ) )
>767	Argument	! is_directory ( it -> status ( ) )
>768	UnaryOp	! is_directory ( it -> status ( ) )
>769	CallExpression	is_directory ( it -> status ( ) )
>770	ArgumentList	it -> status ( )
>771	Argument	it -> status ( )
>772	CallExpression	it -> status ( )
>773	ArgumentList	 
>774	Callee	it -> status
>775	PtrMemberAccess	it -> status
>776	Identifier	status
>777	Identifier	it
>778	Callee	is_directory
>779	Identifier	is_directory
>780	UnaryOperator	!
>781	Callee	CHECK
>782	Identifier	CHECK
>783	ExpressionStatement	 
>784	CallExpression	CHECK ( is_regular_file ( it -> symlink_status ( ) ) )
>785	ArgumentList	is_regular_file ( it -> symlink_status ( ) )
>786	Argument	is_regular_file ( it -> symlink_status ( ) )
>787	CallExpression	is_regular_file ( it -> symlink_status ( ) )
>788	ArgumentList	it -> symlink_status ( )
>789	Argument	it -> symlink_status ( )
>790	CallExpression	it -> symlink_status ( )
>791	ArgumentList	 
>792	Callee	it -> symlink_status
>793	PtrMemberAccess	it -> symlink_status
>794	Identifier	symlink_status
>795	Identifier	it
>796	Callee	is_regular_file
>797	Identifier	is_regular_file
>798	Callee	CHECK
>799	Identifier	CHECK
>800	Condition	 
>801	CallExpression	is_regular_file ( it -> status ( ) )
>802	ArgumentList	it -> status ( )
>803	Argument	it -> status ( )
>804	CallExpression	it -> status ( )
>805	ArgumentList	 
>806	Callee	it -> status
>807	PtrMemberAccess	it -> status
>808	Identifier	status
>809	Identifier	it
>810	Callee	is_regular_file
>811	Identifier	is_regular_file
>812	ExpressionStatement	 
>813	CallExpression	CHECK ( ! it -> path ( ) . empty ( ) )
>814	ArgumentList	! it -> path ( ) . empty ( )
>815	Argument	! it -> path ( ) . empty ( )
>816	UnaryOp	! it -> path ( ) . empty ( )
>817	CallExpression	it -> path ( ) . empty ( )
>818	ArgumentList	 
>819	Callee	it -> path ( ) . empty
>820	MemberAccess	it -> path ( ) . empty
>821	Identifier	empty
>822	CallExpression	it -> path ( )
>823	ArgumentList	 
>824	Callee	it -> path
>825	PtrMemberAccess	it -> path
>826	Identifier	path
>827	Identifier	it
>828	UnaryOperator	!
>829	Callee	CHECK
>830	Identifier	CHECK
>831	IdentifierDeclStatement	 
>832	IdentifierDecl	it ( \".\" )
>833	PrimaryExpression	\".\"
>834	Identifier	it
>835	IdentifierDeclType	directory_iterator
>836	IdentifierDeclStatement	 
>837	IdentifierDecl	end
>838	Identifier	end
>839	IdentifierDeclType	directory_iterator
>840	ExpressionStatement	 
>841	ShiftExpression	cout << \"directory_iterator_test...\" << endl
>842	ShiftExpression	\"directory_iterator_test...\" << endl
>843	Identifier	endl
>844	PrimaryExpression	\"directory_iterator_test...\"
>845	Identifier	cout
>864	FunctionDef	recursive_directory_iterator_test ()
>865	ParameterList	 
>866	ReturnType	void
>867	CompoundStatement	 
>868	ExpressionStatement	 
>869	ShiftExpression	cout << \"recursive_directory_iterator_test complete\" << endl
>870	ShiftExpression	\"recursive_directory_iterator_test complete\" << endl
>871	Identifier	endl
>872	PrimaryExpression	\"recursive_directory_iterator_test complete\"
>873	Identifier	cout
>874	CompoundStatement	 
>875	ExpressionStatement	 
>876	CallExpression	CHECK ( ! x . path ( ) . empty ( ) )
>877	ArgumentList	! x . path ( ) . empty ( )
>878	Argument	! x . path ( ) . empty ( )
>879	UnaryOp	! x . path ( ) . empty ( )
>880	CallExpression	x . path ( ) . empty ( )
>881	ArgumentList	 
>882	Callee	x . path ( ) . empty
>883	MemberAccess	x . path ( ) . empty
>884	Identifier	empty
>885	CallExpression	x . path ( )
>886	ArgumentList	 
>887	Callee	x . path
>888	MemberAccess	x . path
>889	Identifier	path
>890	Identifier	x
>891	UnaryOperator	!
>892	Callee	CHECK
>893	Identifier	CHECK
>894	Statement	 
>895	Statement	 
>896	Statement	 
>897	Statement	 
>898	Statement	 
>899	Statement	 
>900	Statement	 
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	CompoundStatement	 
>906	ExpressionStatement	 
>907	CallExpression	CHECK ( ! x . path ( ) . empty ( ) )
>908	ArgumentList	! x . path ( ) . empty ( )
>909	Argument	! x . path ( ) . empty ( )
>910	UnaryOp	! x . path ( ) . empty ( )
>911	CallExpression	x . path ( ) . empty ( )
>912	ArgumentList	 
>913	Callee	x . path ( ) . empty
>914	MemberAccess	x . path ( ) . empty
>915	Identifier	empty
>916	CallExpression	x . path ( )
>917	ArgumentList	 
>918	Callee	x . path
>919	MemberAccess	x . path
>920	Identifier	path
>921	Identifier	x
>922	UnaryOperator	!
>923	Callee	CHECK
>924	Identifier	CHECK
>925	Statement	 
>926	Statement	 
>927	Label	 
>928	Identifier	x
>929	Statement	 
>930	Statement	 
>931	Statement	 
>932	Statement	 
>933	IdentifierDeclStatement	 
>934	IdentifierDecl	dir_itr ( \"..\" )
>935	PrimaryExpression	\"..\"
>936	Identifier	dir_itr
>937	IdentifierDeclType	const recursive_directory_iterator
>938	CompoundStatement	 
>939	ExpressionStatement	 
>940	CallExpression	CHECK ( ! x . path ( ) . empty ( ) )
>941	ArgumentList	! x . path ( ) . empty ( )
>942	Argument	! x . path ( ) . empty ( )
>943	UnaryOp	! x . path ( ) . empty ( )
>944	CallExpression	x . path ( ) . empty ( )
>945	ArgumentList	 
>946	Callee	x . path ( ) . empty
>947	MemberAccess	x . path ( ) . empty
>948	Identifier	empty
>949	CallExpression	x . path ( )
>950	ArgumentList	 
>951	Callee	x . path
>952	MemberAccess	x . path
>953	Identifier	path
>954	Identifier	x
>955	UnaryOperator	!
>956	Callee	CHECK
>957	Identifier	CHECK
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Label	 
>964	Identifier	x
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	ExpressionStatement	 
>970	CallExpression	CHECK ( recursive_directory_iterator ( ) == end )
>971	ArgumentList	recursive_directory_iterator ( ) == end
>972	Argument	recursive_directory_iterator ( ) == end
>973	EqualityExpression	recursive_directory_iterator ( ) == end
>974	Identifier	end
>975	CallExpression	recursive_directory_iterator ( )
>976	ArgumentList	 
>977	Callee	recursive_directory_iterator
>978	Identifier	recursive_directory_iterator
>979	Callee	CHECK
>980	Identifier	CHECK
>981	ExpressionStatement	 
>982	CallExpression	CHECK ( recursive_directory_iterator ( \"..\" ) != recursive_directory_iterator ( ) )
>983	ArgumentList	recursive_directory_iterator ( \"..\" ) != recursive_directory_iterator ( )
>984	Argument	recursive_directory_iterator ( \"..\" ) != recursive_directory_iterator ( )
>985	EqualityExpression	recursive_directory_iterator ( \"..\" ) != recursive_directory_iterator ( )
>986	CallExpression	recursive_directory_iterator ( )
>987	ArgumentList	 
>988	Callee	recursive_directory_iterator
>989	Identifier	recursive_directory_iterator
>990	CallExpression	recursive_directory_iterator ( \"..\" )
>991	ArgumentList	\"..\"
>992	Argument	\"..\"
>993	PrimaryExpression	\"..\"
>994	Callee	recursive_directory_iterator
>995	Identifier	recursive_directory_iterator
>996	Callee	CHECK
>997	Identifier	CHECK
>998	ForStatement	for ( ; it != end ; ++ it )
>999	CompoundStatement	 
>1000	UnaryExpression	 
>1001	Identifier	it
>1002	IncDec	++
>1003	Condition	 
>1004	EqualityExpression	it != end
>1005	Identifier	end
>1006	Identifier	it
>1007	IfStatement	if ( is_regular_file ( it -> status ( ) ) )
>1008	ElseStatement	else
>1009	CompoundStatement	 
>1010	ExpressionStatement	 
>1011	CallExpression	CHECK ( ! is_symlink ( it -> symlink_status ( ) ) )
>1012	ArgumentList	! is_symlink ( it -> symlink_status ( ) )
>1013	Argument	! is_symlink ( it -> symlink_status ( ) )
>1014	UnaryOp	! is_symlink ( it -> symlink_status ( ) )
>1015	CallExpression	is_symlink ( it -> symlink_status ( ) )
>1016	ArgumentList	it -> symlink_status ( )
>1017	Argument	it -> symlink_status ( )
>1018	CallExpression	it -> symlink_status ( )
>1019	ArgumentList	 
>1020	Callee	it -> symlink_status
>1021	PtrMemberAccess	it -> symlink_status
>1022	Identifier	symlink_status
>1023	Identifier	it
>1024	Callee	is_symlink
>1025	Identifier	is_symlink
>1026	UnaryOperator	!
>1027	Callee	CHECK
>1028	Identifier	CHECK
>1029	ExpressionStatement	 
>1030	CallExpression	CHECK ( ! is_symlink ( it -> status ( ) ) )
>1031	ArgumentList	! is_symlink ( it -> status ( ) )
>1032	Argument	! is_symlink ( it -> status ( ) )
>1033	UnaryOp	! is_symlink ( it -> status ( ) )
>1034	CallExpression	is_symlink ( it -> status ( ) )
>1035	ArgumentList	it -> status ( )
>1036	Argument	it -> status ( )
>1037	CallExpression	it -> status ( )
>1038	ArgumentList	 
>1039	Callee	it -> status
>1040	PtrMemberAccess	it -> status
>1041	Identifier	status
>1042	Identifier	it
>1043	Callee	is_symlink
>1044	Identifier	is_symlink
>1045	UnaryOperator	!
>1046	Callee	CHECK
>1047	Identifier	CHECK
>1048	ExpressionStatement	 
>1049	CallExpression	CHECK ( ! is_regular_file ( it -> symlink_status ( ) ) )
>1050	ArgumentList	! is_regular_file ( it -> symlink_status ( ) )
>1051	Argument	! is_regular_file ( it -> symlink_status ( ) )
>1052	UnaryOp	! is_regular_file ( it -> symlink_status ( ) )
>1053	CallExpression	is_regular_file ( it -> symlink_status ( ) )
>1054	ArgumentList	it -> symlink_status ( )
>1055	Argument	it -> symlink_status ( )
>1056	CallExpression	it -> symlink_status ( )
>1057	ArgumentList	 
>1058	Callee	it -> symlink_status
>1059	PtrMemberAccess	it -> symlink_status
>1060	Identifier	symlink_status
>1061	Identifier	it
>1062	Callee	is_regular_file
>1063	Identifier	is_regular_file
>1064	UnaryOperator	!
>1065	Callee	CHECK
>1066	Identifier	CHECK
>1067	ExpressionStatement	 
>1068	CallExpression	CHECK ( ! is_regular_file ( it -> status ( ) ) )
>1069	ArgumentList	! is_regular_file ( it -> status ( ) )
>1070	Argument	! is_regular_file ( it -> status ( ) )
>1071	UnaryOp	! is_regular_file ( it -> status ( ) )
>1072	CallExpression	is_regular_file ( it -> status ( ) )
>1073	ArgumentList	it -> status ( )
>1074	Argument	it -> status ( )
>1075	CallExpression	it -> status ( )
>1076	ArgumentList	 
>1077	Callee	it -> status
>1078	PtrMemberAccess	it -> status
>1079	Identifier	status
>1080	Identifier	it
>1081	Callee	is_regular_file
>1082	Identifier	is_regular_file
>1083	UnaryOperator	!
>1084	Callee	CHECK
>1085	Identifier	CHECK
>1086	ExpressionStatement	 
>1087	CallExpression	CHECK ( is_directory ( it -> symlink_status ( ) ) )
>1088	ArgumentList	is_directory ( it -> symlink_status ( ) )
>1089	Argument	is_directory ( it -> symlink_status ( ) )
>1090	CallExpression	is_directory ( it -> symlink_status ( ) )
>1091	ArgumentList	it -> symlink_status ( )
>1092	Argument	it -> symlink_status ( )
>1093	CallExpression	it -> symlink_status ( )
>1094	ArgumentList	 
>1095	Callee	it -> symlink_status
>1096	PtrMemberAccess	it -> symlink_status
>1097	Identifier	symlink_status
>1098	Identifier	it
>1099	Callee	is_directory
>1100	Identifier	is_directory
>1101	Callee	CHECK
>1102	Identifier	CHECK
>1103	ExpressionStatement	 
>1104	CallExpression	CHECK ( is_directory ( it -> status ( ) ) )
>1105	ArgumentList	is_directory ( it -> status ( ) )
>1106	Argument	is_directory ( it -> status ( ) )
>1107	CallExpression	is_directory ( it -> status ( ) )
>1108	ArgumentList	it -> status ( )
>1109	Argument	it -> status ( )
>1110	CallExpression	it -> status ( )
>1111	ArgumentList	 
>1112	Callee	it -> status
>1113	PtrMemberAccess	it -> status
>1114	Identifier	status
>1115	Identifier	it
>1116	Callee	is_directory
>1117	Identifier	is_directory
>1118	Callee	CHECK
>1119	Identifier	CHECK
>1120	CompoundStatement	 
>1121	ExpressionStatement	 
>1122	CallExpression	CHECK ( ! is_symlink ( it -> symlink_status ( ) ) )
>1123	ArgumentList	! is_symlink ( it -> symlink_status ( ) )
>1124	Argument	! is_symlink ( it -> symlink_status ( ) )
>1125	UnaryOp	! is_symlink ( it -> symlink_status ( ) )
>1126	CallExpression	is_symlink ( it -> symlink_status ( ) )
>1127	ArgumentList	it -> symlink_status ( )
>1128	Argument	it -> symlink_status ( )
>1129	CallExpression	it -> symlink_status ( )
>1130	ArgumentList	 
>1131	Callee	it -> symlink_status
>1132	PtrMemberAccess	it -> symlink_status
>1133	Identifier	symlink_status
>1134	Identifier	it
>1135	Callee	is_symlink
>1136	Identifier	is_symlink
>1137	UnaryOperator	!
>1138	Callee	CHECK
>1139	Identifier	CHECK
>1140	ExpressionStatement	 
>1141	CallExpression	CHECK ( ! is_directory ( it -> symlink_status ( ) ) )
>1142	ArgumentList	! is_directory ( it -> symlink_status ( ) )
>1143	Argument	! is_directory ( it -> symlink_status ( ) )
>1144	UnaryOp	! is_directory ( it -> symlink_status ( ) )
>1145	CallExpression	is_directory ( it -> symlink_status ( ) )
>1146	ArgumentList	it -> symlink_status ( )
>1147	Argument	it -> symlink_status ( )
>1148	CallExpression	it -> symlink_status ( )
>1149	ArgumentList	 
>1150	Callee	it -> symlink_status
>1151	PtrMemberAccess	it -> symlink_status
>1152	Identifier	symlink_status
>1153	Identifier	it
>1154	Callee	is_directory
>1155	Identifier	is_directory
>1156	UnaryOperator	!
>1157	Callee	CHECK
>1158	Identifier	CHECK
>1159	ExpressionStatement	 
>1160	CallExpression	CHECK ( ! is_symlink ( it -> status ( ) ) )
>1161	ArgumentList	! is_symlink ( it -> status ( ) )
>1162	Argument	! is_symlink ( it -> status ( ) )
>1163	UnaryOp	! is_symlink ( it -> status ( ) )
>1164	CallExpression	is_symlink ( it -> status ( ) )
>1165	ArgumentList	it -> status ( )
>1166	Argument	it -> status ( )
>1167	CallExpression	it -> status ( )
>1168	ArgumentList	 
>1169	Callee	it -> status
>1170	PtrMemberAccess	it -> status
>1171	Identifier	status
>1172	Identifier	it
>1173	Callee	is_symlink
>1174	Identifier	is_symlink
>1175	UnaryOperator	!
>1176	Callee	CHECK
>1177	Identifier	CHECK
>1178	ExpressionStatement	 
>1179	CallExpression	CHECK ( ! is_directory ( it -> status ( ) ) )
>1180	ArgumentList	! is_directory ( it -> status ( ) )
>1181	Argument	! is_directory ( it -> status ( ) )
>1182	UnaryOp	! is_directory ( it -> status ( ) )
>1183	CallExpression	is_directory ( it -> status ( ) )
>1184	ArgumentList	it -> status ( )
>1185	Argument	it -> status ( )
>1186	CallExpression	it -> status ( )
>1187	ArgumentList	 
>1188	Callee	it -> status
>1189	PtrMemberAccess	it -> status
>1190	Identifier	status
>1191	Identifier	it
>1192	Callee	is_directory
>1193	Identifier	is_directory
>1194	UnaryOperator	!
>1195	Callee	CHECK
>1196	Identifier	CHECK
>1197	ExpressionStatement	 
>1198	CallExpression	CHECK ( is_regular_file ( it -> symlink_status ( ) ) )
>1199	ArgumentList	is_regular_file ( it -> symlink_status ( ) )
>1200	Argument	is_regular_file ( it -> symlink_status ( ) )
>1201	CallExpression	is_regular_file ( it -> symlink_status ( ) )
>1202	ArgumentList	it -> symlink_status ( )
>1203	Argument	it -> symlink_status ( )
>1204	CallExpression	it -> symlink_status ( )
>1205	ArgumentList	 
>1206	Callee	it -> symlink_status
>1207	PtrMemberAccess	it -> symlink_status
>1208	Identifier	symlink_status
>1209	Identifier	it
>1210	Callee	is_regular_file
>1211	Identifier	is_regular_file
>1212	Callee	CHECK
>1213	Identifier	CHECK
>1214	Condition	 
>1215	CallExpression	is_regular_file ( it -> status ( ) )
>1216	ArgumentList	it -> status ( )
>1217	Argument	it -> status ( )
>1218	CallExpression	it -> status ( )
>1219	ArgumentList	 
>1220	Callee	it -> status
>1221	PtrMemberAccess	it -> status
>1222	Identifier	status
>1223	Identifier	it
>1224	Callee	is_regular_file
>1225	Identifier	is_regular_file
>1226	ExpressionStatement	 
>1227	CallExpression	CHECK ( ! it -> path ( ) . empty ( ) )
>1228	ArgumentList	! it -> path ( ) . empty ( )
>1229	Argument	! it -> path ( ) . empty ( )
>1230	UnaryOp	! it -> path ( ) . empty ( )
>1231	CallExpression	it -> path ( ) . empty ( )
>1232	ArgumentList	 
>1233	Callee	it -> path ( ) . empty
>1234	MemberAccess	it -> path ( ) . empty
>1235	Identifier	empty
>1236	CallExpression	it -> path ( )
>1237	ArgumentList	 
>1238	Callee	it -> path
>1239	PtrMemberAccess	it -> path
>1240	Identifier	path
>1241	Identifier	it
>1242	UnaryOperator	!
>1243	Callee	CHECK
>1244	Identifier	CHECK
>1245	IdentifierDeclStatement	 
>1246	IdentifierDecl	it ( \"..\" )
>1247	PrimaryExpression	\"..\"
>1248	Identifier	it
>1249	IdentifierDeclType	recursive_directory_iterator
>1250	IdentifierDeclStatement	 
>1251	IdentifierDecl	end
>1252	Identifier	end
>1253	IdentifierDeclType	recursive_directory_iterator
>1254	ExpressionStatement	 
>1255	ShiftExpression	cout << \"recursive_directory_iterator_test...\" << endl
>1256	ShiftExpression	\"recursive_directory_iterator_test...\" << endl
>1257	Identifier	endl
>1258	PrimaryExpression	\"recursive_directory_iterator_test...\"
>1259	Identifier	cout
>1278	FunctionDef	operations_test ()
>1279	ParameterList	 
>1280	ReturnType	void
>1281	CompoundStatement	 
>1282	ExpressionStatement	 
>1283	CallExpression	last_write_time ( \".\" , ft , ec )
>1284	ArgumentList	\".\"
>1285	Argument	ec
>1286	Identifier	ec
>1287	Argument	ft
>1288	Identifier	ft
>1289	Argument	\".\"
>1290	PrimaryExpression	\".\"
>1291	Callee	last_write_time
>1292	Identifier	last_write_time
>1293	IdentifierDeclStatement	 
>1294	IdentifierDecl	ft = last_write_time ( \".\" )
>1295	AssignmentExpr	ft = last_write_time ( \".\" )
>1296	CallExpression	last_write_time ( \".\" )
>1297	ArgumentList	\".\"
>1298	Argument	\".\"
>1299	PrimaryExpression	\".\"
>1300	Callee	last_write_time
>1301	Identifier	last_write_time
>1302	Identifier	ft
>1303	Identifier	ft
>1304	IdentifierDeclType	file_time_type
>1305	ExpressionStatement	 
>1306	CallExpression	CHECK ( ! equivalent ( \"/\" , \".\" ) )
>1307	ArgumentList	! equivalent ( \"/\" , \".\" )
>1308	Argument	! equivalent ( \"/\" , \".\" )
>1309	UnaryOp	! equivalent ( \"/\" , \".\" )
>1310	CallExpression	equivalent ( \"/\" , \".\" )
>1311	ArgumentList	\"/\"
>1312	Argument	\".\"
>1313	PrimaryExpression	\".\"
>1314	Argument	\"/\"
>1315	PrimaryExpression	\"/\"
>1316	Callee	equivalent
>1317	Identifier	equivalent
>1318	UnaryOperator	!
>1319	Callee	CHECK
>1320	Identifier	CHECK
>1321	ExpressionStatement	 
>1322	CallExpression	CHECK ( equivalent ( \"/\" , \"/\" ) )
>1323	ArgumentList	equivalent ( \"/\" , \"/\" )
>1324	Argument	equivalent ( \"/\" , \"/\" )
>1325	CallExpression	equivalent ( \"/\" , \"/\" )
>1326	ArgumentList	\"/\"
>1327	Argument	\"/\"
>1328	PrimaryExpression	\"/\"
>1329	Argument	\"/\"
>1330	PrimaryExpression	\"/\"
>1331	Callee	equivalent
>1332	Identifier	equivalent
>1333	Callee	CHECK
>1334	Identifier	CHECK
>1335	ExpressionStatement	 
>1336	CallExpression	CHECK ( info . available <= info . capacity )
>1337	ArgumentList	info . available <= info . capacity
>1338	Argument	info . available <= info . capacity
>1339	RelationalExpression	info . available <= info . capacity
>1340	MemberAccess	info . capacity
>1341	Identifier	capacity
>1342	Identifier	info
>1343	MemberAccess	info . available
>1344	Identifier	available
>1345	Identifier	info
>1346	Callee	CHECK
>1347	Identifier	CHECK
>1348	IdentifierDeclStatement	 
>1349	IdentifierDecl	info = space ( \"/\" )
>1350	AssignmentExpr	info = space ( \"/\" )
>1351	CallExpression	space ( \"/\" )
>1352	ArgumentList	\"/\"
>1353	Argument	\"/\"
>1354	PrimaryExpression	\"/\"
>1355	Callee	space
>1356	Identifier	space
>1357	Identifier	info
>1358	Identifier	info
>1359	IdentifierDeclType	space_info
>1360	ExpressionStatement	 
>1361	CallExpression	CHECK ( ! remove_all ( \"no-such-file-or-directory\" ) )
>1362	ArgumentList	! remove_all ( \"no-such-file-or-directory\" )
>1363	Argument	! remove_all ( \"no-such-file-or-directory\" )
>1364	UnaryOp	! remove_all ( \"no-such-file-or-directory\" )
>1365	CallExpression	remove_all ( \"no-such-file-or-directory\" )
>1366	ArgumentList	\"no-such-file-or-directory\"
>1367	Argument	\"no-such-file-or-directory\"
>1368	PrimaryExpression	\"no-such-file-or-directory\"
>1369	Callee	remove_all
>1370	Identifier	remove_all
>1371	UnaryOperator	!
>1372	Callee	CHECK
>1373	Identifier	CHECK
>1374	ExpressionStatement	 
>1375	CallExpression	CHECK ( ! boost 
>1376	ArgumentList	! boost 
>1377	Argument	! boost 
>1378	UnaryOp	! boost 
>1379	CallExpression	boost 
>1380	ArgumentList	\"no-such-file-or-directory\"
>1381	Argument	\"no-such-file-or-directory\"
>1382	PrimaryExpression	\"no-such-file-or-directory\"
>1383	Callee	boost 
>1384	Identifier	boost 
>1385	UnaryOperator	!
>1386	Callee	CHECK
>1387	Identifier	CHECK
>1388	ExpressionStatement	 
>1389	CallExpression	CHECK ( ! create_directory ( \"/\" , ec ) )
>1390	ArgumentList	! create_directory ( \"/\" , ec )
>1391	Argument	! create_directory ( \"/\" , ec )
>1392	UnaryOp	! create_directory ( \"/\" , ec )
>1393	CallExpression	create_directory ( \"/\" , ec )
>1394	ArgumentList	\"/\"
>1395	Argument	ec
>1396	Identifier	ec
>1397	Argument	\"/\"
>1398	PrimaryExpression	\"/\"
>1399	Callee	create_directory
>1400	Identifier	create_directory
>1401	UnaryOperator	!
>1402	Callee	CHECK
>1403	Identifier	CHECK
>1404	IdentifierDeclStatement	 
>1405	IdentifierDecl	ec
>1406	Identifier	ec
>1407	IdentifierDeclType	error_code
>1408	ExpressionStatement	 
>1409	ShiftExpression	cout << \"operations test...\" << endl
>1410	ShiftExpression	\"operations test...\" << endl
>1411	Identifier	endl
>1412	PrimaryExpression	\"operations test...\"
>1413	Identifier	cout
>1428	FunctionDef	directory_entry_test ()
>1429	ParameterList	 
>1430	ReturnType	void
>1431	CompoundStatement	 
>1432	ExpressionStatement	 
>1433	CallExpression	CHECK ( de . path ( ) == \"bar.foo\" )
>1434	ArgumentList	de . path ( ) == \"bar.foo\"
>1435	Argument	de . path ( ) == \"bar.foo\"
>1436	EqualityExpression	de . path ( ) == \"bar.foo\"
>1437	PrimaryExpression	\"bar.foo\"
>1438	CallExpression	de . path ( )
>1439	ArgumentList	 
>1440	Callee	de . path
>1441	MemberAccess	de . path
>1442	Identifier	path
>1443	Identifier	de
>1444	Callee	CHECK
>1445	Identifier	CHECK
>1446	ExpressionStatement	 
>1447	CallExpression	de . replace_filename ( \"bar.foo\" )
>1448	ArgumentList	\"bar.foo\"
>1449	Argument	\"bar.foo\"
>1450	PrimaryExpression	\"bar.foo\"
>1451	Callee	de . replace_filename
>1452	MemberAccess	de . replace_filename
>1453	Identifier	replace_filename
>1454	Identifier	de
>1455	ExpressionStatement	 
>1456	CallExpression	CHECK ( de != directory_entry ( \"goo.bar\" ) )
>1457	ArgumentList	de != directory_entry ( \"goo.bar\" )
>1458	Argument	de != directory_entry ( \"goo.bar\" )
>1459	EqualityExpression	de != directory_entry ( \"goo.bar\" )
>1460	CallExpression	directory_entry ( \"goo.bar\" )
>1461	ArgumentList	\"goo.bar\"
>1462	Argument	\"goo.bar\"
>1463	PrimaryExpression	\"goo.bar\"
>1464	Callee	directory_entry
>1465	Identifier	directory_entry
>1466	Identifier	de
>1467	Callee	CHECK
>1468	Identifier	CHECK
>1469	ExpressionStatement	 
>1470	CallExpression	CHECK ( de == directory_entry ( \"foo.bar\" ) )
>1471	ArgumentList	de == directory_entry ( \"foo.bar\" )
>1472	Argument	de == directory_entry ( \"foo.bar\" )
>1473	EqualityExpression	de == directory_entry ( \"foo.bar\" )
>1474	CallExpression	directory_entry ( \"foo.bar\" )
>1475	ArgumentList	\"foo.bar\"
>1476	Argument	\"foo.bar\"
>1477	PrimaryExpression	\"foo.bar\"
>1478	Callee	directory_entry
>1479	Identifier	directory_entry
>1480	Identifier	de
>1481	Callee	CHECK
>1482	Identifier	CHECK
>1483	ExpressionStatement	 
>1484	CallExpression	CHECK ( de < directory_entry ( \"goo.bar\" ) )
>1485	ArgumentList	de < directory_entry ( \"goo.bar\" )
>1486	Argument	de < directory_entry ( \"goo.bar\" )
>1487	RelationalExpression	de < directory_entry ( \"goo.bar\" )
>1488	CallExpression	directory_entry ( \"goo.bar\" )
>1489	ArgumentList	\"goo.bar\"
>1490	Argument	\"goo.bar\"
>1491	PrimaryExpression	\"goo.bar\"
>1492	Callee	directory_entry
>1493	Identifier	directory_entry
>1494	Identifier	de
>1495	Callee	CHECK
>1496	Identifier	CHECK
>1497	ExpressionStatement	 
>1498	CallExpression	CHECK ( de . symlink_status ( ) == file_status ( file_type 
>1499	ArgumentList	de . symlink_status ( ) == file_status ( file_type 
>1500	Argument	de . symlink_status ( ) == file_status ( file_type 
>1501	EqualityExpression	de . symlink_status ( ) == file_status ( file_type 
>1502	CallExpression	file_status ( file_type 
>1503	ArgumentList	file_type 
>1504	Argument	group_all
>1505	Identifier	group_all
>1506	Argument	file_type 
>1507	Identifier	file_type 
>1508	Callee	file_status
>1509	Identifier	file_status
>1510	CallExpression	de . symlink_status ( )
>1511	ArgumentList	 
>1512	Callee	de . symlink_status
>1513	MemberAccess	de . symlink_status
>1514	Identifier	symlink_status
>1515	Identifier	de
>1516	Callee	CHECK
>1517	Identifier	CHECK
>1518	ExpressionStatement	 
>1519	CallExpression	CHECK ( de . status ( ) == file_status ( file_type 
>1520	ArgumentList	de . status ( ) == file_status ( file_type 
>1521	Argument	de . status ( ) == file_status ( file_type 
>1522	EqualityExpression	de . status ( ) == file_status ( file_type 
>1523	CallExpression	file_status ( file_type 
>1524	ArgumentList	file_type 
>1525	Argument	owner_all
>1526	Identifier	owner_all
>1527	Argument	file_type 
>1528	Identifier	file_type 
>1529	Callee	file_status
>1530	Identifier	file_status
>1531	CallExpression	de . status ( )
>1532	ArgumentList	 
>1533	Callee	de . status
>1534	MemberAccess	de . status
>1535	Identifier	status
>1536	Identifier	de
>1537	Callee	CHECK
>1538	Identifier	CHECK
>1539	ExpressionStatement	 
>1540	CallExpression	CHECK ( de . path ( ) == \"foo.bar\" )
>1541	ArgumentList	de . path ( ) == \"foo.bar\"
>1542	Argument	de . path ( ) == \"foo.bar\"
>1543	EqualityExpression	de . path ( ) == \"foo.bar\"
>1544	PrimaryExpression	\"foo.bar\"
>1545	CallExpression	de . path ( )
>1546	ArgumentList	 
>1547	Callee	de . path
>1548	MemberAccess	de . path
>1549	Identifier	path
>1550	Identifier	de
>1551	Callee	CHECK
>1552	Identifier	CHECK
>1553	IdentifierDeclStatement	 
>1554	IdentifierDecl	de ( \"foo.bar\" , file_status ( file_type 
>1555	Expression	\"foo.bar\" , file_status ( file_type 
>1556	Expression	file_status ( file_type 
>1557	CallExpression	file_status ( file_type 
>1558	ArgumentList	file_type 
>1559	Argument	group_all
>1560	Identifier	group_all
>1561	Argument	file_type 
>1562	Identifier	file_type 
>1563	Callee	file_status
>1564	Identifier	file_status
>1565	CallExpression	file_status ( file_type 
>1566	ArgumentList	file_type 
>1567	Argument	owner_all
>1568	Identifier	owner_all
>1569	Argument	file_type 
>1570	Identifier	file_type 
>1571	Callee	file_status
>1572	Identifier	file_status
>1573	PrimaryExpression	\"foo.bar\"
>1574	Identifier	de
>1575	IdentifierDeclType	directory_entry
>1576	ExpressionStatement	 
>1577	ShiftExpression	cout << \"directory_entry test...\" << endl
>1578	ShiftExpression	\"directory_entry test...\" << endl
>1579	Identifier	endl
>1580	PrimaryExpression	\"directory_entry test...\"
>1581	Identifier	cout
>1595	FunctionDef	directory_entry_overload_test ()
>1596	ParameterList	 
>1597	ReturnType	void
>1598	CompoundStatement	 
>1599	IdentifierDeclStatement	 
>1600	IdentifierDecl	p ( * it )
>1601	UnaryOp	* it
>1602	Identifier	it
>1603	UnaryOperator	*
>1604	Identifier	p
>1605	IdentifierDeclType	path
>1606	IdentifierDeclStatement	 
>1607	IdentifierDecl	it ( \".\" )
>1608	PrimaryExpression	\".\"
>1609	Identifier	it
>1610	IdentifierDeclType	directory_iterator
>1611	ExpressionStatement	 
>1612	ShiftExpression	cout << \"directory_entry overload test...\" << endl
>1613	ShiftExpression	\"directory_entry overload test...\" << endl
>1614	Identifier	endl
>1615	PrimaryExpression	\"directory_entry overload test...\"
>1616	Identifier	cout
>1622	FunctionDef	error_handling_test ()
>1623	ParameterList	 
>1624	ReturnType	void
>1625	CompoundStatement	 
>1626	ExpressionStatement	 
>1627	CallExpression	CHECK ( ! create_directory ( \"/\" , ec ) )
>1628	ArgumentList	! create_directory ( \"/\" , ec )
>1629	Argument	! create_directory ( \"/\" , ec )
>1630	UnaryOp	! create_directory ( \"/\" , ec )
>1631	CallExpression	create_directory ( \"/\" , ec )
>1632	ArgumentList	\"/\"
>1633	Argument	ec
>1634	Identifier	ec
>1635	Argument	\"/\"
>1636	PrimaryExpression	\"/\"
>1637	Callee	create_directory
>1638	Identifier	create_directory
>1639	UnaryOperator	!
>1640	Callee	CHECK
>1641	Identifier	CHECK
>1642	IdentifierDeclStatement	 
>1643	IdentifierDecl	ec
>1644	Identifier	ec
>1645	IdentifierDeclType	error_code
>1646	ExpressionStatement	 
>1647	CallExpression	CHECK ( threw )
>1648	ArgumentList	threw
>1649	Argument	threw
>1650	Identifier	threw
>1651	Callee	CHECK
>1652	Identifier	CHECK
>1653	CompoundStatement	 
>1654	ExpressionStatement	 
>1655	ShiftExpression	cout << \"\nunexpected exception type caught\" << endl
>1656	ShiftExpression	\"\nunexpected exception type caught\" << endl
>1657	Identifier	endl
>1658	PrimaryExpression	\"\nunexpected exception type caught\"
>1659	Identifier	cout
>1660	Statement	 
>1661	Statement	 
>1662	Statement	 
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	BlockStarter	 
>1667	CompoundStatement	 
>1668	ExpressionStatement	\"what() returns \" << ex . what ( ) << \"\n\"
>1669	ShiftExpression	\"what() returns \" << ex . what ( ) << \"\n\"
>1670	ShiftExpression	ex . what ( ) << \"\n\"
>1671	PrimaryExpression	\"\n\"
>1672	CallExpression	ex . what ( )
>1673	ArgumentList	 
>1674	Callee	ex . what
>1675	MemberAccess	ex . what
>1676	Identifier	what
>1677	Identifier	ex
>1678	PrimaryExpression	\"what() returns \"
>1679	Statement	\"\nas expected, attempt to get size of non-existent file threw a filesystem_error\n\"
>1680	Statement	<<
>1681	Statement	cout
>1682	ExpressionStatement	threw = true
>1683	AssignmentExpr	threw = true
>1684	Identifier	true
>1685	Identifier	threw
>1686	Identifier	ex
>1687	BlockStarter	 
>1688	CompoundStatement	 
>1689	ExpressionStatement	file_size ( \"no-such-file\" )
>1690	CallExpression	file_size ( \"no-such-file\" )
>1691	ArgumentList	\"no-such-file\"
>1692	Argument	\"no-such-file\"
>1693	PrimaryExpression	\"no-such-file\"
>1694	Callee	file_size
>1695	Identifier	file_size
>1696	IdentifierDeclStatement	 
>1697	IdentifierDecl	threw ( false )
>1698	Identifier	false
>1699	Identifier	threw
>1700	IdentifierDeclType	bool
>1701	ExpressionStatement	 
>1702	ShiftExpression	cout << \"error handling test...\" << endl
>1703	ShiftExpression	\"error handling test...\" << endl
>1704	Identifier	endl
>1705	PrimaryExpression	\"error handling test...\"
>1706	Identifier	cout
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=33,32,31,26,16
<16=17
<17=25,18
<18=24,19
<19=23,20
<20=22,21
<26=27
<27=29,28
<29=30
<33=35,34
<35=36
<43=46,45,44
<46=139,127,115,101,90,81,72,58,47
<47=48
<48=56,49
<49=50
<50=51
<51=53,52
<53=55,54
<56=57
<58=59
<59=71,60
<60=70,61
<61=69,62
<62=66,63
<63=65,64
<66=68,67
<72=73
<73=80,74
<74=76,75
<76=77
<77=79,78
<81=82
<82=89,83
<83=87,84
<84=85
<85=86
<87=88
<90=91
<91=99,92
<92=93
<93=94
<94=96,95
<96=98,97
<99=100
<101=102
<102=114,103
<103=113,104
<104=112,105
<105=109,106
<106=108,107
<109=111,110
<115=116
<116=126,125,117
<117=124,118
<118=120,119
<120=121
<121=123,122
<127=128
<128=138,137,129
<129=136,130
<130=134,131
<131=132
<132=133
<134=135
<139=140
<140=144,141
<141=143,142
<153=156,155,154
<156=423,419,397,388,367,355,343,329,320,288,279,267,255,241,227,213,199,185,171,157
<157=158
<158=169,159
<159=160
<160=161
<161=168,162
<162=166,163
<163=164
<164=165
<166=167
<169=170
<171=172
<172=183,173
<173=174
<174=175
<175=182,176
<176=180,177
<177=178
<178=179
<180=181
<183=184
<185=186
<186=197,187
<187=188
<188=189
<189=196,190
<190=194,191
<191=192
<192=193
<194=195
<197=198
<199=200
<200=211,201
<201=202
<202=203
<203=210,204
<204=208,205
<205=206
<206=207
<208=209
<211=212
<213=214
<214=225,215
<215=216
<216=217
<217=224,218
<218=222,219
<219=220
<220=221
<222=223
<225=226
<227=228
<228=239,229
<229=230
<230=231
<231=238,232
<232=236,233
<233=234
<234=235
<236=237
<239=240
<241=242
<242=253,243
<243=244
<244=245
<245=252,246
<246=250,247
<247=248
<248=249
<250=251
<253=254
<255=256
<256=265,257
<257=258
<258=259
<259=263,260
<260=261
<261=262
<263=264
<265=266
<267=268
<268=277,269
<269=270
<270=271
<271=275,272
<272=273
<273=274
<275=276
<277=278
<279=280
<280=286,281
<281=282
<282=283
<283=285,284
<286=287
<288=318,289
<289=312,290
<290=291
<291=311,292
<292=310,293
<293=304,294
<294=303,295
<295=297,296
<297=299,298
<299=300
<300=302,301
<304=306,305
<306=307
<307=309,308
<312=313
<313=317,314
<314=316,315
<318=319
<320=321
<321=327,322
<322=325,323
<323=324
<325=326
<327=328
<329=330
<330=341,331
<331=332
<332=333
<333=340,334
<334=338,335
<335=336
<336=337
<338=339
<341=342
<343=344
<344=353,345
<345=346
<346=347
<347=351,348
<348=349
<349=350
<351=352
<353=354
<355=356
<356=365,357
<357=358
<358=359
<359=363,360
<360=361
<361=362
<363=364
<365=366
<367=368
<368=386,369
<369=370
<370=371
<371=380,372
<372=378,373
<373=376,374
<374=375
<376=377
<378=379
<380=384,381
<381=382
<382=383
<384=385
<386=387
<388=389
<389=395,390
<390=391
<391=392
<392=394,393
<395=396
<397=398
<398=417,399
<399=400
<400=401
<401=409,402
<402=408,403
<403=407,404
<404=406,405
<409=415,410
<410=413,411
<411=412
<413=414
<415=416
<417=418
<419=420
<420=422,421
<423=424
<424=428,425
<425=427,426
<450=453,452,451
<453=840,836,831,812,593,584,567,555,554,553,552,551,549,548,547,546,545,544,524,519,518,517,516,515,513,512,511,491,490,489,488,487,486,485,484,483,482,481,480,460,454
<454=455
<455=459,456
<456=458,457
<460=461
<461=462
<462=478,463
<463=464
<464=465
<465=477,466
<466=468,467
<468=469
<469=471,470
<471=473,472
<473=474
<474=476,475
<478=479
<491=492
<492=493
<493=509,494
<494=495
<495=496
<496=508,497
<497=499,498
<499=500
<500=502,501
<502=504,503
<504=505
<505=507,506
<509=510
<513=514
<519=520
<520=523,522,521
<524=525
<525=526
<526=542,527
<527=528
<528=529
<529=541,530
<530=532,531
<532=533
<533=535,534
<535=537,536
<537=538
<538=540,539
<542=543
<549=550
<555=556
<556=565,557
<557=558
<558=559
<559=561,560
<561=563,562
<563=564
<565=566
<567=568
<568=582,569
<569=570
<570=571
<571=576,572
<572=574,573
<574=575
<576=580,577
<577=578
<578=579
<580=581
<582=583
<584=589,586,585
<586=588,587
<589=590
<590=592,591
<593=800,706,594
<594=595
<595=689,672,653,634,615,596
<596=597
<597=613,598
<598=599
<599=600
<600=612,601
<601=610,602
<602=603
<603=604
<604=606,605
<606=607
<607=609,608
<610=611
<613=614
<615=616
<616=632,617
<617=618
<618=619
<619=631,620
<620=629,621
<621=622
<622=623
<623=625,624
<625=626
<626=628,627
<629=630
<632=633
<634=635
<635=651,636
<636=637
<637=638
<638=650,639
<639=648,640
<640=641
<641=642
<642=644,643
<644=645
<645=647,646
<648=649
<651=652
<653=654
<654=670,655
<655=656
<656=657
<657=669,658
<658=667,659
<659=660
<660=661
<661=663,662
<663=664
<664=666,665
<667=668
<670=671
<672=673
<673=687,674
<674=675
<675=676
<676=685,677
<677=678
<678=679
<679=681,680
<681=682
<682=684,683
<685=686
<687=688
<689=690
<690=704,691
<691=692
<692=693
<693=702,694
<694=695
<695=696
<696=698,697
<698=699
<699=701,700
<702=703
<704=705
<706=783,764,745,726,707
<707=708
<708=724,709
<709=710
<710=711
<711=723,712
<712=721,713
<713=714
<714=715
<715=717,716
<717=718
<718=720,719
<721=722
<724=725
<726=727
<727=743,728
<728=729
<729=730
<730=742,731
<731=740,732
<732=733
<733=734
<734=736,735
<736=737
<737=739,738
<740=741
<743=744
<745=746
<746=762,747
<747=748
<748=749
<749=761,750
<750=759,751
<751=752
<752=753
<753=755,754
<755=756
<756=758,757
<759=760
<762=763
<764=765
<765=781,766
<766=767
<767=768
<768=780,769
<769=778,770
<770=771
<771=772
<772=774,773
<774=775
<775=777,776
<778=779
<781=782
<783=784
<784=798,785
<785=786
<786=787
<787=796,788
<788=789
<789=790
<790=792,791
<792=793
<793=795,794
<796=797
<798=799
<800=801
<801=810,802
<802=803
<803=804
<804=806,805
<806=807
<807=809,808
<810=811
<812=813
<813=829,814
<814=815
<815=816
<816=828,817
<817=819,818
<819=820
<820=822,821
<822=824,823
<824=825
<825=827,826
<829=830
<831=832
<832=835,834,833
<836=837
<837=839,838
<840=841
<841=845,842
<842=844,843
<864=867,866,865
<867=1254,1250,1245,1226,1007,998,981,969,968,967,966,965,963,962,961,960,959,958,938,933,932,931,930,929,927,926,925,905,904,903,902,901,900,899,898,897,896,895,894,874,868
<868=869
<869=873,870
<870=872,871
<874=875
<875=876
<876=892,877
<877=878
<878=879
<879=891,880
<880=882,881
<882=883
<883=885,884
<885=887,886
<887=888
<888=890,889
<892=893
<905=906
<906=907
<907=923,908
<908=909
<909=910
<910=922,911
<911=913,912
<913=914
<914=916,915
<916=918,917
<918=919
<919=921,920
<923=924
<927=928
<933=934
<934=937,936,935
<938=939
<939=940
<940=956,941
<941=942
<942=943
<943=955,944
<944=946,945
<946=947
<947=949,948
<949=951,950
<951=952
<952=954,953
<956=957
<963=964
<969=970
<970=979,971
<971=972
<972=973
<973=975,974
<975=977,976
<977=978
<979=980
<981=982
<982=996,983
<983=984
<984=985
<985=990,986
<986=988,987
<988=989
<990=994,991
<991=992
<992=993
<994=995
<996=997
<998=1003,1000,999
<1000=1002,1001
<1003=1004
<1004=1006,1005
<1007=1214,1120,1008
<1008=1009
<1009=1103,1086,1067,1048,1029,1010
<1010=1011
<1011=1027,1012
<1012=1013
<1013=1014
<1014=1026,1015
<1015=1024,1016
<1016=1017
<1017=1018
<1018=1020,1019
<1020=1021
<1021=1023,1022
<1024=1025
<1027=1028
<1029=1030
<1030=1046,1031
<1031=1032
<1032=1033
<1033=1045,1034
<1034=1043,1035
<1035=1036
<1036=1037
<1037=1039,1038
<1039=1040
<1040=1042,1041
<1043=1044
<1046=1047
<1048=1049
<1049=1065,1050
<1050=1051
<1051=1052
<1052=1064,1053
<1053=1062,1054
<1054=1055
<1055=1056
<1056=1058,1057
<1058=1059
<1059=1061,1060
<1062=1063
<1065=1066
<1067=1068
<1068=1084,1069
<1069=1070
<1070=1071
<1071=1083,1072
<1072=1081,1073
<1073=1074
<1074=1075
<1075=1077,1076
<1077=1078
<1078=1080,1079
<1081=1082
<1084=1085
<1086=1087
<1087=1101,1088
<1088=1089
<1089=1090
<1090=1099,1091
<1091=1092
<1092=1093
<1093=1095,1094
<1095=1096
<1096=1098,1097
<1099=1100
<1101=1102
<1103=1104
<1104=1118,1105
<1105=1106
<1106=1107
<1107=1116,1108
<1108=1109
<1109=1110
<1110=1112,1111
<1112=1113
<1113=1115,1114
<1116=1117
<1118=1119
<1120=1197,1178,1159,1140,1121
<1121=1122
<1122=1138,1123
<1123=1124
<1124=1125
<1125=1137,1126
<1126=1135,1127
<1127=1128
<1128=1129
<1129=1131,1130
<1131=1132
<1132=1134,1133
<1135=1136
<1138=1139
<1140=1141
<1141=1157,1142
<1142=1143
<1143=1144
<1144=1156,1145
<1145=1154,1146
<1146=1147
<1147=1148
<1148=1150,1149
<1150=1151
<1151=1153,1152
<1154=1155
<1157=1158
<1159=1160
<1160=1176,1161
<1161=1162
<1162=1163
<1163=1175,1164
<1164=1173,1165
<1165=1166
<1166=1167
<1167=1169,1168
<1169=1170
<1170=1172,1171
<1173=1174
<1176=1177
<1178=1179
<1179=1195,1180
<1180=1181
<1181=1182
<1182=1194,1183
<1183=1192,1184
<1184=1185
<1185=1186
<1186=1188,1187
<1188=1189
<1189=1191,1190
<1192=1193
<1195=1196
<1197=1198
<1198=1212,1199
<1199=1200
<1200=1201
<1201=1210,1202
<1202=1203
<1203=1204
<1204=1206,1205
<1206=1207
<1207=1209,1208
<1210=1211
<1212=1213
<1214=1215
<1215=1224,1216
<1216=1217
<1217=1218
<1218=1220,1219
<1220=1221
<1221=1223,1222
<1224=1225
<1226=1227
<1227=1243,1228
<1228=1229
<1229=1230
<1230=1242,1231
<1231=1233,1232
<1233=1234
<1234=1236,1235
<1236=1238,1237
<1238=1239
<1239=1241,1240
<1243=1244
<1245=1246
<1246=1249,1248,1247
<1250=1251
<1251=1253,1252
<1254=1255
<1255=1259,1256
<1256=1258,1257
<1278=1281,1280,1279
<1281=1408,1404,1388,1374,1360,1348,1335,1321,1305,1293,1282
<1282=1283
<1283=1291,1284
<1284=1289,1287,1285
<1285=1286
<1287=1288
<1289=1290
<1291=1292
<1293=1294
<1294=1304,1303,1295
<1295=1302,1296
<1296=1300,1297
<1297=1298
<1298=1299
<1300=1301
<1305=1306
<1306=1319,1307
<1307=1308
<1308=1309
<1309=1318,1310
<1310=1316,1311
<1311=1314,1312
<1312=1313
<1314=1315
<1316=1317
<1319=1320
<1321=1322
<1322=1333,1323
<1323=1324
<1324=1325
<1325=1331,1326
<1326=1329,1327
<1327=1328
<1329=1330
<1331=1332
<1333=1334
<1335=1336
<1336=1346,1337
<1337=1338
<1338=1339
<1339=1343,1340
<1340=1342,1341
<1343=1345,1344
<1346=1347
<1348=1349
<1349=1359,1358,1350
<1350=1357,1351
<1351=1355,1352
<1352=1353
<1353=1354
<1355=1356
<1360=1361
<1361=1372,1362
<1362=1363
<1363=1364
<1364=1371,1365
<1365=1369,1366
<1366=1367
<1367=1368
<1369=1370
<1372=1373
<1374=1375
<1375=1386,1376
<1376=1377
<1377=1378
<1378=1385,1379
<1379=1383,1380
<1380=1381
<1381=1382
<1383=1384
<1386=1387
<1388=1389
<1389=1402,1390
<1390=1391
<1391=1392
<1392=1401,1393
<1393=1399,1394
<1394=1397,1395
<1395=1396
<1397=1398
<1399=1400
<1402=1403
<1404=1405
<1405=1407,1406
<1408=1409
<1409=1413,1410
<1410=1412,1411
<1428=1431,1430,1429
<1431=1576,1553,1539,1518,1497,1483,1469,1455,1446,1432
<1432=1433
<1433=1444,1434
<1434=1435
<1435=1436
<1436=1438,1437
<1438=1440,1439
<1440=1441
<1441=1443,1442
<1444=1445
<1446=1447
<1447=1451,1448
<1448=1449
<1449=1450
<1451=1452
<1452=1454,1453
<1455=1456
<1456=1467,1457
<1457=1458
<1458=1459
<1459=1466,1460
<1460=1464,1461
<1461=1462
<1462=1463
<1464=1465
<1467=1468
<1469=1470
<1470=1481,1471
<1471=1472
<1472=1473
<1473=1480,1474
<1474=1478,1475
<1475=1476
<1476=1477
<1478=1479
<1481=1482
<1483=1484
<1484=1495,1485
<1485=1486
<1486=1487
<1487=1494,1488
<1488=1492,1489
<1489=1490
<1490=1491
<1492=1493
<1495=1496
<1497=1498
<1498=1516,1499
<1499=1500
<1500=1501
<1501=1510,1502
<1502=1508,1503
<1503=1506,1504
<1504=1505
<1506=1507
<1508=1509
<1510=1512,1511
<1512=1513
<1513=1515,1514
<1516=1517
<1518=1519
<1519=1537,1520
<1520=1521
<1521=1522
<1522=1531,1523
<1523=1529,1524
<1524=1527,1525
<1525=1526
<1527=1528
<1529=1530
<1531=1533,1532
<1533=1534
<1534=1536,1535
<1537=1538
<1539=1540
<1540=1551,1541
<1541=1542
<1542=1543
<1543=1545,1544
<1545=1547,1546
<1547=1548
<1548=1550,1549
<1551=1552
<1553=1554
<1554=1575,1574,1555
<1555=1573,1556
<1556=1565,1557
<1557=1563,1558
<1558=1561,1559
<1559=1560
<1561=1562
<1563=1564
<1565=1571,1566
<1566=1569,1567
<1567=1568
<1569=1570
<1571=1572
<1576=1577
<1577=1581,1578
<1578=1580,1579
<1595=1598,1597,1596
<1598=1611,1606,1599
<1599=1600
<1600=1605,1604,1601
<1601=1603,1602
<1606=1607
<1607=1610,1609,1608
<1611=1612
<1612=1616,1613
<1613=1615,1614
<1622=1625,1624,1623
<1625=1701,1696,1687,1666,1665,1664,1663,1662,1661,1660,1653,1646,1642,1626
<1626=1627
<1627=1640,1628
<1628=1629
<1629=1630
<1630=1639,1631
<1631=1637,1632
<1632=1635,1633
<1633=1634
<1635=1636
<1637=1638
<1640=1641
<1642=1643
<1643=1645,1644
<1646=1647
<1647=1651,1648
<1648=1649
<1649=1650
<1651=1652
<1653=1654
<1654=1655
<1655=1659,1656
<1656=1658,1657
<1666=1686,1667
<1667=1682,1681,1680,1679,1668
<1668=1669
<1669=1678,1670
<1670=1672,1671
<1672=1674,1673
<1674=1675
<1675=1677,1676
<1682=1683
<1683=1685,1684
<1687=1688
<1688=1689
<1689=1690
<1690=1694,1691
<1691=1692
<1692=1693
<1694=1695
<1696=1697
<1697=1700,1699,1698
<1701=1702
<1702=1706,1703
<1703=1705,1704
