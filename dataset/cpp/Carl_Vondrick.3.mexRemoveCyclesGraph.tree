>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	CallExpression	convertSpMatrix ( plhs [ 0 ] , G2 . m ( ) , G2 . n ( ) , G2 . n ( ) , G2 . nzmax ( ) , G2 . v ( ) , G2 . r ( ) , \
>15	ArgumentList	plhs [ 0 ]
>16	Argument	G2 . pB ( )
>17	CallExpression	G2 . pB ( )
>18	ArgumentList	 
>19	Callee	G2 . pB
>20	MemberAccess	G2 . pB
>21	Identifier	pB
>22	Identifier	G2
>23	Argument	G2 . r ( )
>24	CallExpression	G2 . r ( )
>25	ArgumentList	 
>26	Callee	G2 . r
>27	MemberAccess	G2 . r
>28	Identifier	r
>29	Identifier	G2
>30	Argument	G2 . v ( )
>31	CallExpression	G2 . v ( )
>32	ArgumentList	 
>33	Callee	G2 . v
>34	MemberAccess	G2 . v
>35	Identifier	v
>36	Identifier	G2
>37	Argument	G2 . nzmax ( )
>38	CallExpression	G2 . nzmax ( )
>39	ArgumentList	 
>40	Callee	G2 . nzmax
>41	MemberAccess	G2 . nzmax
>42	Identifier	nzmax
>43	Identifier	G2
>44	Argument	G2 . n ( )
>45	CallExpression	G2 . n ( )
>46	ArgumentList	 
>47	Callee	G2 . n
>48	MemberAccess	G2 . n
>49	Identifier	n
>50	Identifier	G2
>51	Argument	G2 . n ( )
>52	CallExpression	G2 . n ( )
>53	ArgumentList	 
>54	Callee	G2 . n
>55	MemberAccess	G2 . n
>56	Identifier	n
>57	Identifier	G2
>58	Argument	G2 . m ( )
>59	CallExpression	G2 . m ( )
>60	ArgumentList	 
>61	Callee	G2 . m
>62	MemberAccess	G2 . m
>63	Identifier	m
>64	Identifier	G2
>65	Argument	plhs [ 0 ]
>66	ArrayIndexing	plhs [ 0 ]
>67	PrimaryExpression	0
>68	Identifier	plhs
>69	Callee	convertSpMatrix
>70	Identifier	convertSpMatrix
>71	ExpressionStatement	 
>72	RelationalExpression	deleteCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>73	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>74	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r
>75	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r
>76	Expression	D_pB2 , D_pE2 , D_v , D_r
>77	Expression	D_pE2 , D_v , D_r
>78	Expression	D_v , D_r
>79	Identifier	D_r
>80	Identifier	D_v
>81	Identifier	D_pE2
>82	Identifier	D_pB2
>83	Identifier	D_r2
>84	Identifier	D_v2
>85	Identifier	T
>86	Identifier	deleteCopySparse
>87	ExpressionStatement	 
>88	CallExpression	remove_cycles ( G , G2 )
>89	ArgumentList	G
>90	Argument	G2
>91	Identifier	G2
>92	Argument	G
>93	Identifier	G
>94	Callee	remove_cycles
>95	Identifier	remove_cycles
>96	IdentifierDeclStatement	 
>97	IdentifierDecl	G2
>98	Identifier	G2
>99	IdentifierDeclType	SpMatrix < T >
>100	IdentifierDeclStatement	 
>101	IdentifierDecl	G ( D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ] )
>102	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>103	Expression	D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>104	Expression	D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>105	Expression	D_pE2 , mD , p , D_pB2 [ p ]
>106	Expression	mD , p , D_pB2 [ p ]
>107	Expression	p , D_pB2 [ p ]
>108	ArrayIndexing	D_pB2 [ p ]
>109	Identifier	p
>110	Identifier	D_pB2
>111	Identifier	p
>112	Identifier	mD
>113	Identifier	D_pE2
>114	Identifier	D_pB2
>115	Identifier	D_r2
>116	Identifier	D_v2
>117	Identifier	G
>118	IdentifierDeclType	SpMatrix < T >
>119	ExpressionStatement	 
>120	RelationalExpression	createCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>121	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>122	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>123	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>124	Expression	D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>125	Expression	D_pE2 , D_v , D_r , D_pB , D_pE , p
>126	Expression	D_v , D_r , D_pB , D_pE , p
>127	Expression	D_r , D_pB , D_pE , p
>128	Expression	D_pB , D_pE , p
>129	Expression	D_pE , p
>130	Identifier	p
>131	Identifier	D_pE
>132	Identifier	D_pB
>133	Identifier	D_r
>134	Identifier	D_v
>135	Identifier	D_pE2
>136	Identifier	D_pB2
>137	Identifier	D_r2
>138	Identifier	D_v2
>139	Identifier	T
>140	Identifier	createCopySparse
>141	ExpressionStatement	 
>142	AssignmentExpr	D_pE = D_pB + 1
>143	AdditiveExpression	D_pB + 1
>144	PrimaryExpression	1
>145	Identifier	D_pB
>146	Identifier	D_pE
>147	ExpressionStatement	 
>148	AssignmentExpr	D_pB = mxGetJc ( prhs [ 0 ] )
>149	CallExpression	mxGetJc ( prhs [ 0 ] )
>150	ArgumentList	prhs [ 0 ]
>151	Argument	prhs [ 0 ]
>152	ArrayIndexing	prhs [ 0 ]
>153	PrimaryExpression	0
>154	Identifier	prhs
>155	Callee	mxGetJc
>156	Identifier	mxGetJc
>157	Identifier	D_pB
>158	ExpressionStatement	 
>159	AssignmentExpr	D_r = mxGetIr ( prhs [ 0 ] )
>160	CallExpression	mxGetIr ( prhs [ 0 ] )
>161	ArgumentList	prhs [ 0 ]
>162	Argument	prhs [ 0 ]
>163	ArrayIndexing	prhs [ 0 ]
>164	PrimaryExpression	0
>165	Identifier	prhs
>166	Callee	mxGetIr
>167	Identifier	mxGetIr
>168	Identifier	D_r
>169	ExpressionStatement	 
>170	CallExpression	mxGetPr ( prhs [ 0 ] )
>171	ArgumentList	prhs [ 0 ]
>172	Argument	prhs [ 0 ]
>173	ArrayIndexing	prhs [ 0 ]
>174	PrimaryExpression	0
>175	Identifier	prhs
>176	Callee	mxGetPr
>177	Identifier	mxGetPr
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	Statement	 
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	IdentifierDeclStatement	 
>186	IdentifierDecl	* D_v2
>187	Identifier	D_v2
>188	IdentifierDeclType	T *
>189	IdentifierDeclStatement	 
>190	IdentifierDecl	* D_pE2
>191	Identifier	D_pE2
>192	IdentifierDeclType	long *
>193	IdentifierDecl	* D_pB2
>194	Identifier	D_pB2
>195	IdentifierDeclType	long *
>196	IdentifierDecl	* D_r2
>197	Identifier	D_r2
>198	IdentifierDeclType	long *
>199	IdentifierDeclStatement	 
>200	IdentifierDecl	* D_pE
>201	Identifier	D_pE
>202	IdentifierDeclType	mwSize *
>203	IdentifierDecl	* D_pB
>204	Identifier	D_pB
>205	IdentifierDeclType	mwSize *
>206	IdentifierDecl	* D_r
>207	Identifier	D_r
>208	IdentifierDeclType	mwSize *
>209	IdentifierDeclStatement	 
>210	IdentifierDecl	* D_v
>211	Identifier	D_v
>212	IdentifierDeclType	double *
>213	IdentifierDeclStatement	 
>214	IdentifierDecl	n = p
>215	AssignmentExpr	n = p
>216	Identifier	p
>217	Identifier	p
>218	Identifier	n
>219	IdentifierDeclType	const long
>220	ExpressionStatement	 
>221	ArrayIndexing	dimsD [ 1 ]
>222	PrimaryExpression	1
>223	Identifier	dimsD
>224	Statement	 
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	ExpressionStatement	 
>232	ArrayIndexing	dimsD [ 0 ]
>233	PrimaryExpression	0
>234	Identifier	dimsD
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	IdentifierDeclStatement	 
>243	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 0 ] )
>244	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 0 ] )
>245	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>246	ArgumentList	prhs [ 0 ]
>247	Argument	prhs [ 0 ]
>248	ArrayIndexing	prhs [ 0 ]
>249	PrimaryExpression	0
>250	Identifier	prhs
>251	Callee	mxGetDimensions
>252	Identifier	mxGetDimensions
>253	Identifier	dimsD
>254	Identifier	dimsD
>255	IdentifierDeclType	const mwSize *
>256	IfStatement	if ( ! mxIsSparse ( prhs [ 0 ] ) )
>257	ExpressionStatement	 
>258	CallExpression	mexErrMsgTxt ( \"argument 1 should be sparse\" )
>259	ArgumentList	\"argument 1 should be sparse\"
>260	Argument	\"argument 1 should be sparse\"
>261	PrimaryExpression	\"argument 1 should be sparse\"
>262	Callee	mexErrMsgTxt
>263	Identifier	mexErrMsgTxt
>264	Condition	 
>265	UnaryOp	! mxIsSparse ( prhs [ 0 ] )
>266	CallExpression	mxIsSparse ( prhs [ 0 ] )
>267	ArgumentList	prhs [ 0 ]
>268	Argument	prhs [ 0 ]
>269	ArrayIndexing	prhs [ 0 ]
>270	PrimaryExpression	0
>271	Identifier	prhs
>272	Callee	mxIsSparse
>273	Identifier	mxIsSparse
>274	UnaryOperator	!
>275	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>276	ExpressionStatement	 
>277	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>278	ArgumentList	\"type of argument 1 is not consistent\"
>279	Argument	\"type of argument 1 is not consistent\"
>280	PrimaryExpression	\"type of argument 1 is not consistent\"
>281	Callee	mexErrMsgTxt
>282	Identifier	mexErrMsgTxt
>283	Condition	 
>284	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>285	RelationalExpression	T > ( prhs [ 0 ] )
>286	ArrayIndexing	prhs [ 0 ]
>287	PrimaryExpression	0
>288	Identifier	prhs
>289	Identifier	T
>290	UnaryOp	! mexCheckType
>291	Identifier	mexCheckType
>292	UnaryOperator	!
>325	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>326	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>327	Parameter	 
>328	Identifier	prhs
>329	ParameterType	const mxArray * [ ]
>330	Parameter	 
>331	Identifier	nrhs
>332	ParameterType	int
>333	Parameter	 
>334	Identifier	plhs
>335	ParameterType	mxArray * [ ]
>336	Parameter	 
>337	Identifier	nlhs
>338	ParameterType	int
>339	ReturnType	void
>340	CompoundStatement	 
>341	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>342	ElseStatement	else
>343	CompoundStatement	 
>344	ExpressionStatement	 
>345	RelationalExpression	callFunction < float > ( plhs , prhs )
>346	RelationalExpression	float > ( plhs , prhs )
>347	Expression	plhs , prhs
>348	Identifier	prhs
>349	Identifier	plhs
>350	Identifier	float
>351	Identifier	callFunction
>352	CompoundStatement	 
>353	ExpressionStatement	 
>354	RelationalExpression	callFunction < double > ( plhs , prhs )
>355	RelationalExpression	double > ( plhs , prhs )
>356	Expression	plhs , prhs
>357	Identifier	prhs
>358	Identifier	plhs
>359	Identifier	double
>360	Identifier	callFunction
>361	Condition	 
>362	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>363	Identifier	mxDOUBLE_CLASS
>364	CallExpression	mxGetClassID ( prhs [ 0 ] )
>365	ArgumentList	prhs [ 0 ]
>366	Argument	prhs [ 0 ]
>367	ArrayIndexing	prhs [ 0 ]
>368	PrimaryExpression	0
>369	Identifier	prhs
>370	Callee	mxGetClassID
>371	Identifier	mxGetClassID
>372	IfStatement	if ( nlhs != 1 )
>373	ExpressionStatement	 
>374	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>375	ArgumentList	\"Bad number of output arguments\"
>376	Argument	\"Bad number of output arguments\"
>377	PrimaryExpression	\"Bad number of output arguments\"
>378	Callee	mexErrMsgTxt
>379	Identifier	mexErrMsgTxt
>380	Condition	 
>381	EqualityExpression	nlhs != 1
>382	PrimaryExpression	1
>383	Identifier	nlhs
>384	IfStatement	if ( nrhs != 1 )
>385	ExpressionStatement	 
>386	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>387	ArgumentList	\"Bad number of inputs arguments\"
>388	Argument	\"Bad number of inputs arguments\"
>389	PrimaryExpression	\"Bad number of inputs arguments\"
>390	Callee	mexErrMsgTxt
>391	Identifier	mexErrMsgTxt
>392	Condition	 
>393	EqualityExpression	nrhs != 1
>394	PrimaryExpression	1
>395	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=275,256,242,241,240,239,238,237,236,235,231,230,229,228,227,226,225,224,220,213,209,199,189,185,184,183,182,181,180,179,178,169,158,147,141,119,100,96,87,71,13
<13=14
<14=69,15
<15=65,58,51,44,37,30,23,16
<16=17
<17=19,18
<19=20
<20=22,21
<23=24
<24=26,25
<26=27
<27=29,28
<30=31
<31=33,32
<33=34
<34=36,35
<37=38
<38=40,39
<40=41
<41=43,42
<44=45
<45=47,46
<47=48
<48=50,49
<51=52
<52=54,53
<54=55
<55=57,56
<58=59
<59=61,60
<61=62
<62=64,63
<65=66
<66=68,67
<69=70
<71=72
<72=86,73
<73=85,74
<74=84,75
<75=83,76
<76=82,77
<77=81,78
<78=80,79
<87=88
<88=94,89
<89=92,90
<90=91
<92=93
<94=95
<96=97
<97=99,98
<100=101
<101=118,117,102
<102=116,103
<103=115,104
<104=114,105
<105=113,106
<106=112,107
<107=111,108
<108=110,109
<119=120
<120=140,121
<121=139,122
<122=138,123
<123=137,124
<124=136,125
<125=135,126
<126=134,127
<127=133,128
<128=132,129
<129=131,130
<141=142
<142=146,143
<143=145,144
<147=148
<148=157,149
<149=155,150
<150=151
<151=152
<152=154,153
<155=156
<158=159
<159=168,160
<160=166,161
<161=162
<162=163
<163=165,164
<166=167
<169=170
<170=176,171
<171=172
<172=173
<173=175,174
<176=177
<185=186
<186=188,187
<189=196,193,190
<190=192,191
<193=195,194
<196=198,197
<199=206,203,200
<200=202,201
<203=205,204
<206=208,207
<209=210
<210=212,211
<213=214
<214=219,218,215
<215=217,216
<220=221
<221=223,222
<231=232
<232=234,233
<242=243
<243=255,254,244
<244=253,245
<245=251,246
<246=247
<247=248
<248=250,249
<251=252
<256=264,257
<257=258
<258=262,259
<259=260
<260=261
<262=263
<264=265
<265=274,266
<266=272,267
<267=268
<268=269
<269=271,270
<272=273
<275=283,276
<276=277
<277=281,278
<278=279
<279=280
<281=282
<283=284
<284=290,285
<285=289,286
<286=288,287
<290=292,291
<325=340,339,326
<326=336,333,330,327
<327=329,328
<330=332,331
<333=335,334
<336=338,337
<340=384,372,341
<341=361,352,342
<342=343
<343=344
<344=345
<345=351,346
<346=350,347
<347=349,348
<352=353
<353=354
<354=360,355
<355=359,356
<356=358,357
<361=362
<362=364,363
<364=370,365
<365=366
<366=367
<367=369,368
<370=371
<372=380,373
<373=374
<374=378,375
<375=376
<376=377
<378=379
<380=381
<381=383,382
<384=392,385
<385=386
<386=390,387
<387=388
<388=389
<390=391
<392=393
<393=395,394
