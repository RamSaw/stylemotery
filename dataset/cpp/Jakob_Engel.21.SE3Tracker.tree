>3	FunctionDef	SE3Tracker 
>4	ParameterList	int w , int h , Eigen 
>5	Parameter	 
>6	Identifier	K
>7	ParameterType	Eigen 
>8	Parameter	 
>9	Identifier	h
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	w
>13	ParameterType	int
>14	CompoundStatement	 
>15	ExpressionStatement	 
>16	AssignmentExpr	diverged = false
>17	Identifier	false
>18	Identifier	diverged
>19	ExpressionStatement	 
>20	AssignmentExpr	lastGoodCount = lastBadCount = 0
>21	AssignmentExpr	lastBadCount = 0
>22	PrimaryExpression	0
>23	Identifier	lastBadCount
>24	Identifier	lastGoodCount
>25	ExpressionStatement	 
>26	AssignmentExpr	pointUsage = 0
>27	PrimaryExpression	0
>28	Identifier	pointUsage
>29	ExpressionStatement	 
>30	AssignmentExpr	iterationNumber = 0
>31	PrimaryExpression	0
>32	Identifier	iterationNumber
>33	ExpressionStatement	 
>34	AssignmentExpr	lastResidual = 0
>35	PrimaryExpression	0
>36	Identifier	lastResidual
>37	ExpressionStatement	 
>38	AssignmentExpr	debugImageOldImageSource = cv 
>39	CallExpression	cv 
>40	ArgumentList	height
>41	Argument	CV_8UC3
>42	Identifier	CV_8UC3
>43	Argument	width
>44	Identifier	width
>45	Argument	height
>46	Identifier	height
>47	Callee	cv 
>48	Identifier	cv 
>49	Identifier	debugImageOldImageSource
>50	ExpressionStatement	 
>51	AssignmentExpr	debugImageOldImageWarped = cv 
>52	CallExpression	cv 
>53	ArgumentList	height
>54	Argument	CV_8UC3
>55	Identifier	CV_8UC3
>56	Argument	width
>57	Identifier	width
>58	Argument	height
>59	Identifier	height
>60	Callee	cv 
>61	Identifier	cv 
>62	Identifier	debugImageOldImageWarped
>63	ExpressionStatement	 
>64	AssignmentExpr	debugImageSecondFrame = cv 
>65	CallExpression	cv 
>66	ArgumentList	height
>67	Argument	CV_8UC3
>68	Identifier	CV_8UC3
>69	Argument	width
>70	Identifier	width
>71	Argument	height
>72	Identifier	height
>73	Callee	cv 
>74	Identifier	cv 
>75	Identifier	debugImageSecondFrame
>76	ExpressionStatement	 
>77	AssignmentExpr	debugImageResiduals = cv 
>78	CallExpression	cv 
>79	ArgumentList	height
>80	Argument	CV_8UC3
>81	Identifier	CV_8UC3
>82	Argument	width
>83	Identifier	width
>84	Argument	height
>85	Identifier	height
>86	Callee	cv 
>87	Identifier	cv 
>88	Identifier	debugImageResiduals
>89	ExpressionStatement	 
>90	AssignmentExpr	debugImageWeights = cv 
>91	CallExpression	cv 
>92	ArgumentList	height
>93	Argument	CV_8UC3
>94	Identifier	CV_8UC3
>95	Argument	width
>96	Identifier	width
>97	Argument	height
>98	Identifier	height
>99	Callee	cv 
>100	Identifier	cv 
>101	Identifier	debugImageWeights
>102	ExpressionStatement	 
>103	AssignmentExpr	buf_warped_size = 0
>104	PrimaryExpression	0
>105	Identifier	buf_warped_size
>106	ExpressionStatement	 
>107	AssignmentExpr	buf_weight_p = ( float * ) Eigen 
>108	CastExpression	( float * ) Eigen 
>109	CallExpression	Eigen 
>110	ArgumentList	w * h * sizeof ( float )
>111	Argument	w * h * sizeof ( float )
>112	MultiplicativeExpression	w * h * sizeof ( float )
>113	MultiplicativeExpression	h * sizeof ( float )
>114	SizeofExpr	sizeof ( float )
>115	SizeofOperand	float
>116	Sizeof	sizeof
>117	Identifier	h
>118	Identifier	w
>119	Callee	Eigen 
>120	Identifier	Eigen 
>121	CastTarget	float *
>122	Identifier	buf_weight_p
>123	ExpressionStatement	 
>124	AssignmentExpr	buf_idepthVar = ( float * ) Eigen 
>125	CastExpression	( float * ) Eigen 
>126	CallExpression	Eigen 
>127	ArgumentList	w * h * sizeof ( float )
>128	Argument	w * h * sizeof ( float )
>129	MultiplicativeExpression	w * h * sizeof ( float )
>130	MultiplicativeExpression	h * sizeof ( float )
>131	SizeofExpr	sizeof ( float )
>132	SizeofOperand	float
>133	Sizeof	sizeof
>134	Identifier	h
>135	Identifier	w
>136	Callee	Eigen 
>137	Identifier	Eigen 
>138	CastTarget	float *
>139	Identifier	buf_idepthVar
>140	ExpressionStatement	 
>141	AssignmentExpr	buf_d = ( float * ) Eigen 
>142	CastExpression	( float * ) Eigen 
>143	CallExpression	Eigen 
>144	ArgumentList	w * h * sizeof ( float )
>145	Argument	w * h * sizeof ( float )
>146	MultiplicativeExpression	w * h * sizeof ( float )
>147	MultiplicativeExpression	h * sizeof ( float )
>148	SizeofExpr	sizeof ( float )
>149	SizeofOperand	float
>150	Sizeof	sizeof
>151	Identifier	h
>152	Identifier	w
>153	Callee	Eigen 
>154	Identifier	Eigen 
>155	CastTarget	float *
>156	Identifier	buf_d
>157	ExpressionStatement	 
>158	AssignmentExpr	buf_warped_z = ( float * ) Eigen 
>159	CastExpression	( float * ) Eigen 
>160	CallExpression	Eigen 
>161	ArgumentList	w * h * sizeof ( float )
>162	Argument	w * h * sizeof ( float )
>163	MultiplicativeExpression	w * h * sizeof ( float )
>164	MultiplicativeExpression	h * sizeof ( float )
>165	SizeofExpr	sizeof ( float )
>166	SizeofOperand	float
>167	Sizeof	sizeof
>168	Identifier	h
>169	Identifier	w
>170	Callee	Eigen 
>171	Identifier	Eigen 
>172	CastTarget	float *
>173	Identifier	buf_warped_z
>174	ExpressionStatement	 
>175	AssignmentExpr	buf_warped_y = ( float * ) Eigen 
>176	CastExpression	( float * ) Eigen 
>177	CallExpression	Eigen 
>178	ArgumentList	w * h * sizeof ( float )
>179	Argument	w * h * sizeof ( float )
>180	MultiplicativeExpression	w * h * sizeof ( float )
>181	MultiplicativeExpression	h * sizeof ( float )
>182	SizeofExpr	sizeof ( float )
>183	SizeofOperand	float
>184	Sizeof	sizeof
>185	Identifier	h
>186	Identifier	w
>187	Callee	Eigen 
>188	Identifier	Eigen 
>189	CastTarget	float *
>190	Identifier	buf_warped_y
>191	ExpressionStatement	 
>192	AssignmentExpr	buf_warped_x = ( float * ) Eigen 
>193	CastExpression	( float * ) Eigen 
>194	CallExpression	Eigen 
>195	ArgumentList	w * h * sizeof ( float )
>196	Argument	w * h * sizeof ( float )
>197	MultiplicativeExpression	w * h * sizeof ( float )
>198	MultiplicativeExpression	h * sizeof ( float )
>199	SizeofExpr	sizeof ( float )
>200	SizeofOperand	float
>201	Sizeof	sizeof
>202	Identifier	h
>203	Identifier	w
>204	Callee	Eigen 
>205	Identifier	Eigen 
>206	CastTarget	float *
>207	Identifier	buf_warped_x
>208	ExpressionStatement	 
>209	AssignmentExpr	buf_warped_dy = ( float * ) Eigen 
>210	CastExpression	( float * ) Eigen 
>211	CallExpression	Eigen 
>212	ArgumentList	w * h * sizeof ( float )
>213	Argument	w * h * sizeof ( float )
>214	MultiplicativeExpression	w * h * sizeof ( float )
>215	MultiplicativeExpression	h * sizeof ( float )
>216	SizeofExpr	sizeof ( float )
>217	SizeofOperand	float
>218	Sizeof	sizeof
>219	Identifier	h
>220	Identifier	w
>221	Callee	Eigen 
>222	Identifier	Eigen 
>223	CastTarget	float *
>224	Identifier	buf_warped_dy
>225	ExpressionStatement	 
>226	AssignmentExpr	buf_warped_dx = ( float * ) Eigen 
>227	CastExpression	( float * ) Eigen 
>228	CallExpression	Eigen 
>229	ArgumentList	w * h * sizeof ( float )
>230	Argument	w * h * sizeof ( float )
>231	MultiplicativeExpression	w * h * sizeof ( float )
>232	MultiplicativeExpression	h * sizeof ( float )
>233	SizeofExpr	sizeof ( float )
>234	SizeofOperand	float
>235	Sizeof	sizeof
>236	Identifier	h
>237	Identifier	w
>238	Callee	Eigen 
>239	Identifier	Eigen 
>240	CastTarget	float *
>241	Identifier	buf_warped_dx
>242	ExpressionStatement	 
>243	AssignmentExpr	buf_warped_residual = ( float * ) Eigen 
>244	CastExpression	( float * ) Eigen 
>245	CallExpression	Eigen 
>246	ArgumentList	w * h * sizeof ( float )
>247	Argument	w * h * sizeof ( float )
>248	MultiplicativeExpression	w * h * sizeof ( float )
>249	MultiplicativeExpression	h * sizeof ( float )
>250	SizeofExpr	sizeof ( float )
>251	SizeofOperand	float
>252	Sizeof	sizeof
>253	Identifier	h
>254	Identifier	w
>255	Callee	Eigen 
>256	Identifier	Eigen 
>257	CastTarget	float *
>258	Identifier	buf_warped_residual
>259	ExpressionStatement	 
>260	AssignmentExpr	cyi = KInv ( 1 , 2 )
>261	CallExpression	KInv ( 1 , 2 )
>262	ArgumentList	1
>263	Argument	2
>264	PrimaryExpression	2
>265	Argument	1
>266	PrimaryExpression	1
>267	Callee	KInv
>268	Identifier	KInv
>269	Identifier	cyi
>270	ExpressionStatement	 
>271	AssignmentExpr	cxi = KInv ( 0 , 2 )
>272	CallExpression	KInv ( 0 , 2 )
>273	ArgumentList	0
>274	Argument	2
>275	PrimaryExpression	2
>276	Argument	0
>277	PrimaryExpression	0
>278	Callee	KInv
>279	Identifier	KInv
>280	Identifier	cxi
>281	ExpressionStatement	 
>282	AssignmentExpr	fyi = KInv ( 1 , 1 )
>283	CallExpression	KInv ( 1 , 1 )
>284	ArgumentList	1
>285	Argument	1
>286	PrimaryExpression	1
>287	Argument	1
>288	PrimaryExpression	1
>289	Callee	KInv
>290	Identifier	KInv
>291	Identifier	fyi
>292	ExpressionStatement	 
>293	AssignmentExpr	fxi = KInv ( 0 , 0 )
>294	CallExpression	KInv ( 0 , 0 )
>295	ArgumentList	0
>296	Argument	0
>297	PrimaryExpression	0
>298	Argument	0
>299	PrimaryExpression	0
>300	Callee	KInv
>301	Identifier	KInv
>302	Identifier	fxi
>303	ExpressionStatement	 
>304	AssignmentExpr	KInv = K . inverse ( )
>305	CallExpression	K . inverse ( )
>306	ArgumentList	 
>307	Callee	K . inverse
>308	MemberAccess	K . inverse
>309	Identifier	inverse
>310	Identifier	K
>311	Identifier	KInv
>312	ExpressionStatement	 
>313	AssignmentExpr	settings = DenseDepthTrackerSettings ( )
>314	CallExpression	DenseDepthTrackerSettings ( )
>315	ArgumentList	 
>316	Callee	DenseDepthTrackerSettings
>317	Identifier	DenseDepthTrackerSettings
>318	Identifier	settings
>319	ExpressionStatement	 
>320	AssignmentExpr	cy = K ( 1 , 2 )
>321	CallExpression	K ( 1 , 2 )
>322	ArgumentList	1
>323	Argument	2
>324	PrimaryExpression	2
>325	Argument	1
>326	PrimaryExpression	1
>327	Callee	K
>328	Identifier	K
>329	Identifier	cy
>330	ExpressionStatement	 
>331	AssignmentExpr	cx = K ( 0 , 2 )
>332	CallExpression	K ( 0 , 2 )
>333	ArgumentList	0
>334	Argument	2
>335	PrimaryExpression	2
>336	Argument	0
>337	PrimaryExpression	0
>338	Callee	K
>339	Identifier	K
>340	Identifier	cx
>341	ExpressionStatement	 
>342	AssignmentExpr	fy = K ( 1 , 1 )
>343	CallExpression	K ( 1 , 1 )
>344	ArgumentList	1
>345	Argument	1
>346	PrimaryExpression	1
>347	Argument	1
>348	PrimaryExpression	1
>349	Callee	K
>350	Identifier	K
>351	Identifier	fy
>352	ExpressionStatement	 
>353	AssignmentExpr	fx = K ( 0 , 0 )
>354	CallExpression	K ( 0 , 0 )
>355	ArgumentList	0
>356	Argument	0
>357	PrimaryExpression	0
>358	Argument	0
>359	PrimaryExpression	0
>360	Callee	K
>361	Identifier	K
>362	Identifier	fx
>363	ExpressionStatement	 
>364	AssignmentExpr	this -> K = K
>365	Identifier	K
>366	PtrMemberAccess	this -> K
>367	Identifier	K
>368	Identifier	this
>369	ExpressionStatement	 
>370	AssignmentExpr	height = h
>371	Identifier	h
>372	Identifier	height
>373	ExpressionStatement	 
>374	AssignmentExpr	width = w
>375	Identifier	w
>376	Identifier	width
>425	FunctionDef	SE3Tracker 
>426	ParameterList	 
>427	CompoundStatement	 
>428	ExpressionStatement	 
>429	CallExpression	Eigen 
>430	ArgumentList	( void * ) buf_weight_p
>431	Argument	( void * ) buf_weight_p
>432	CastExpression	( void * ) buf_weight_p
>433	Identifier	buf_weight_p
>434	CastTarget	void *
>435	Callee	Eigen 
>436	Identifier	Eigen 
>437	ExpressionStatement	 
>438	CallExpression	Eigen 
>439	ArgumentList	( void * ) buf_idepthVar
>440	Argument	( void * ) buf_idepthVar
>441	CastExpression	( void * ) buf_idepthVar
>442	Identifier	buf_idepthVar
>443	CastTarget	void *
>444	Callee	Eigen 
>445	Identifier	Eigen 
>446	ExpressionStatement	 
>447	CallExpression	Eigen 
>448	ArgumentList	( void * ) buf_d
>449	Argument	( void * ) buf_d
>450	CastExpression	( void * ) buf_d
>451	Identifier	buf_d
>452	CastTarget	void *
>453	Callee	Eigen 
>454	Identifier	Eigen 
>455	ExpressionStatement	 
>456	CallExpression	Eigen 
>457	ArgumentList	( void * ) buf_warped_z
>458	Argument	( void * ) buf_warped_z
>459	CastExpression	( void * ) buf_warped_z
>460	Identifier	buf_warped_z
>461	CastTarget	void *
>462	Callee	Eigen 
>463	Identifier	Eigen 
>464	ExpressionStatement	 
>465	CallExpression	Eigen 
>466	ArgumentList	( void * ) buf_warped_y
>467	Argument	( void * ) buf_warped_y
>468	CastExpression	( void * ) buf_warped_y
>469	Identifier	buf_warped_y
>470	CastTarget	void *
>471	Callee	Eigen 
>472	Identifier	Eigen 
>473	ExpressionStatement	 
>474	CallExpression	Eigen 
>475	ArgumentList	( void * ) buf_warped_x
>476	Argument	( void * ) buf_warped_x
>477	CastExpression	( void * ) buf_warped_x
>478	Identifier	buf_warped_x
>479	CastTarget	void *
>480	Callee	Eigen 
>481	Identifier	Eigen 
>482	ExpressionStatement	 
>483	CallExpression	Eigen 
>484	ArgumentList	( void * ) buf_warped_dy
>485	Argument	( void * ) buf_warped_dy
>486	CastExpression	( void * ) buf_warped_dy
>487	Identifier	buf_warped_dy
>488	CastTarget	void *
>489	Callee	Eigen 
>490	Identifier	Eigen 
>491	ExpressionStatement	 
>492	CallExpression	Eigen 
>493	ArgumentList	( void * ) buf_warped_dx
>494	Argument	( void * ) buf_warped_dx
>495	CastExpression	( void * ) buf_warped_dx
>496	Identifier	buf_warped_dx
>497	CastTarget	void *
>498	Callee	Eigen 
>499	Identifier	Eigen 
>500	ExpressionStatement	 
>501	CallExpression	Eigen 
>502	ArgumentList	( void * ) buf_warped_residual
>503	Argument	( void * ) buf_warped_residual
>504	CastExpression	( void * ) buf_warped_residual
>505	Identifier	buf_warped_residual
>506	CastTarget	void *
>507	Callee	Eigen 
>508	Identifier	Eigen 
>509	ExpressionStatement	 
>510	CallExpression	debugImageOldImageWarped . release ( )
>511	ArgumentList	 
>512	Callee	debugImageOldImageWarped . release
>513	MemberAccess	debugImageOldImageWarped . release
>514	Identifier	release
>515	Identifier	debugImageOldImageWarped
>516	ExpressionStatement	 
>517	CallExpression	debugImageOldImageSource . release ( )
>518	ArgumentList	 
>519	Callee	debugImageOldImageSource . release
>520	MemberAccess	debugImageOldImageSource . release
>521	Identifier	release
>522	Identifier	debugImageOldImageSource
>523	ExpressionStatement	 
>524	CallExpression	debugImageSecondFrame . release ( )
>525	ArgumentList	 
>526	Callee	debugImageSecondFrame . release
>527	MemberAccess	debugImageSecondFrame . release
>528	Identifier	release
>529	Identifier	debugImageSecondFrame
>530	ExpressionStatement	 
>531	CallExpression	debugImageWeights . release ( )
>532	ArgumentList	 
>533	Callee	debugImageWeights . release
>534	MemberAccess	debugImageWeights . release
>535	Identifier	release
>536	Identifier	debugImageWeights
>537	ExpressionStatement	 
>538	CallExpression	debugImageResiduals . release ( )
>539	ArgumentList	 
>540	Callee	debugImageResiduals . release
>541	MemberAccess	debugImageResiduals . release
>542	Identifier	release
>543	Identifier	debugImageResiduals
>561	FunctionDef	SE3Tracker 
>562	ParameterList	Frame * reference , SE3 referenceToFrameOrg
>563	Parameter	 
>564	Identifier	referenceToFrameOrg
>565	ParameterType	SE3
>566	Parameter	 
>567	Identifier	reference
>568	ParameterType	Frame *
>569	ReturnType	float
>570	CompoundStatement	 
>571	ReturnStatement	 
>572	Identifier	pointUsage
>573	ExpressionStatement	 
>574	AssignmentExpr	pointUsage = usageCount / ( float ) reference -> permaRefNumPts
>575	MultiplicativeExpression	usageCount / ( float ) reference -> permaRefNumPts
>576	CastExpression	( float ) reference -> permaRefNumPts
>577	PtrMemberAccess	reference -> permaRefNumPts
>578	Identifier	permaRefNumPts
>579	Identifier	reference
>580	CastTarget	float
>581	Identifier	usageCount
>582	Identifier	pointUsage
>583	ForStatement	for ( ; refPoint < refPoint_max ; refPoint ++ )
>584	CompoundStatement	 
>585	IfStatement	if ( ( u_new > 0 && v_new > 0 && u_new < w2 && v_new < h2 ) )
>586	CompoundStatement	 
>587	ExpressionStatement	 
>588	AssignmentExpr	usageCount += depthChange < 1 ? depthChange 
>589	ConditionalExpression	depthChange < 1 ? depthChange 
>590	PrimaryExpression	1
>591	Identifier	depthChange
>592	Condition	depthChange < 1
>593	RelationalExpression	depthChange < 1
>594	PrimaryExpression	1
>595	Identifier	depthChange
>596	Identifier	usageCount
>597	IdentifierDeclStatement	 
>598	IdentifierDecl	depthChange = ( * refPoint ) [ 2 ] / Wxp [ 2 ]
>599	AssignmentExpr	depthChange = ( * refPoint ) [ 2 ] / Wxp [ 2 ]
>600	MultiplicativeExpression	( * refPoint ) [ 2 ] / Wxp [ 2 ]
>601	ArrayIndexing	Wxp [ 2 ]
>602	PrimaryExpression	2
>603	Identifier	Wxp
>604	ArrayIndexing	( * refPoint ) [ 2 ]
>605	PrimaryExpression	2
>606	UnaryOp	* refPoint
>607	Identifier	refPoint
>608	UnaryOperator	*
>609	Identifier	depthChange
>610	Identifier	depthChange
>611	IdentifierDeclType	float
>612	Condition	 
>613	AndExpression	u_new > 0 && v_new > 0 && u_new < w2 && v_new < h2
>614	AndExpression	v_new > 0 && u_new < w2 && v_new < h2
>615	AndExpression	u_new < w2 && v_new < h2
>616	RelationalExpression	v_new < h2
>617	Identifier	h2
>618	Identifier	v_new
>619	RelationalExpression	u_new < w2
>620	Identifier	w2
>621	Identifier	u_new
>622	RelationalExpression	v_new > 0
>623	PrimaryExpression	0
>624	Identifier	v_new
>625	RelationalExpression	u_new > 0
>626	PrimaryExpression	0
>627	Identifier	u_new
>628	IdentifierDeclStatement	 
>629	IdentifierDecl	v_new = ( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>630	AssignmentExpr	v_new = ( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>631	AdditiveExpression	( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>632	Identifier	cy_l
>633	MultiplicativeExpression	( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l
>634	Identifier	fy_l
>635	MultiplicativeExpression	Wxp [ 1 ] / Wxp [ 2 ]
>636	ArrayIndexing	Wxp [ 2 ]
>637	PrimaryExpression	2
>638	Identifier	Wxp
>639	ArrayIndexing	Wxp [ 1 ]
>640	PrimaryExpression	1
>641	Identifier	Wxp
>642	Identifier	v_new
>643	Identifier	v_new
>644	IdentifierDeclType	float
>645	IdentifierDeclStatement	 
>646	IdentifierDecl	u_new = ( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>647	AssignmentExpr	u_new = ( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>648	AdditiveExpression	( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>649	Identifier	cx_l
>650	MultiplicativeExpression	( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l
>651	Identifier	fx_l
>652	MultiplicativeExpression	Wxp [ 0 ] / Wxp [ 2 ]
>653	ArrayIndexing	Wxp [ 2 ]
>654	PrimaryExpression	2
>655	Identifier	Wxp
>656	ArrayIndexing	Wxp [ 0 ]
>657	PrimaryExpression	0
>658	Identifier	Wxp
>659	Identifier	u_new
>660	Identifier	u_new
>661	IdentifierDeclType	float
>662	IdentifierDeclStatement	 
>663	IdentifierDecl	Wxp = rotMat * ( * refPoint ) + transVec
>664	AssignmentExpr	Wxp = rotMat * ( * refPoint ) + transVec
>665	AdditiveExpression	rotMat * ( * refPoint ) + transVec
>666	Identifier	transVec
>667	MultiplicativeExpression	rotMat * ( * refPoint )
>668	UnaryOp	* refPoint
>669	Identifier	refPoint
>670	UnaryOperator	*
>671	Identifier	rotMat
>672	Identifier	Wxp
>673	Identifier	Wxp
>674	IdentifierDeclType	Eigen 
>675	IncDecOp	 
>676	IncDec	++
>677	Identifier	refPoint
>678	Condition	 
>679	RelationalExpression	refPoint < refPoint_max
>680	Identifier	refPoint_max
>681	Identifier	refPoint
>682	IdentifierDeclStatement	 
>683	IdentifierDecl	usageCount = 0
>684	AssignmentExpr	usageCount = 0
>685	PrimaryExpression	0
>686	Identifier	usageCount
>687	Identifier	usageCount
>688	IdentifierDeclType	float
>689	IdentifierDeclStatement	 
>690	IdentifierDecl	* refPoint = reference -> permaRef_posData
>691	AssignmentExpr	* refPoint = reference -> permaRef_posData
>692	PtrMemberAccess	reference -> permaRef_posData
>693	Identifier	permaRef_posData
>694	Identifier	reference
>695	Identifier	refPoint
>696	Identifier	refPoint
>697	IdentifierDeclType	const Eigen 
>698	IdentifierDeclStatement	 
>699	IdentifierDecl	* refPoint_max = reference -> permaRef_posData + reference -> permaRefNumPts
>700	AssignmentExpr	* refPoint_max = reference -> permaRef_posData + reference -> permaRefNumPts
>701	AdditiveExpression	reference -> permaRef_posData + reference -> permaRefNumPts
>702	PtrMemberAccess	reference -> permaRefNumPts
>703	Identifier	permaRefNumPts
>704	Identifier	reference
>705	PtrMemberAccess	reference -> permaRef_posData
>706	Identifier	permaRef_posData
>707	Identifier	reference
>708	Identifier	refPoint_max
>709	Identifier	refPoint_max
>710	IdentifierDeclType	const Eigen 
>711	IdentifierDeclStatement	 
>712	IdentifierDecl	transVec = referenceToFrame . translation ( )
>713	AssignmentExpr	transVec = referenceToFrame . translation ( )
>714	CallExpression	referenceToFrame . translation ( )
>715	ArgumentList	 
>716	Callee	referenceToFrame . translation
>717	MemberAccess	referenceToFrame . translation
>718	Identifier	translation
>719	Identifier	referenceToFrame
>720	Identifier	transVec
>721	Identifier	transVec
>722	IdentifierDeclType	Eigen 
>723	IdentifierDeclStatement	 
>724	IdentifierDecl	rotMat = referenceToFrame . rotationMatrix ( )
>725	AssignmentExpr	rotMat = referenceToFrame . rotationMatrix ( )
>726	CallExpression	referenceToFrame . rotationMatrix ( )
>727	ArgumentList	 
>728	Callee	referenceToFrame . rotationMatrix
>729	MemberAccess	referenceToFrame . rotationMatrix
>730	Identifier	rotationMatrix
>731	Identifier	referenceToFrame
>732	Identifier	rotMat
>733	Identifier	rotMat
>734	IdentifierDeclType	Eigen 
>735	IdentifierDeclStatement	 
>736	IdentifierDecl	cy_l = KLvl ( 1 , 2 )
>737	AssignmentExpr	cy_l = KLvl ( 1 , 2 )
>738	CallExpression	KLvl ( 1 , 2 )
>739	ArgumentList	1
>740	Argument	2
>741	PrimaryExpression	2
>742	Argument	1
>743	PrimaryExpression	1
>744	Callee	KLvl
>745	Identifier	KLvl
>746	Identifier	cy_l
>747	Identifier	cy_l
>748	IdentifierDeclType	float
>749	IdentifierDeclStatement	 
>750	IdentifierDecl	cx_l = KLvl ( 0 , 2 )
>751	AssignmentExpr	cx_l = KLvl ( 0 , 2 )
>752	CallExpression	KLvl ( 0 , 2 )
>753	ArgumentList	0
>754	Argument	2
>755	PrimaryExpression	2
>756	Argument	0
>757	PrimaryExpression	0
>758	Callee	KLvl
>759	Identifier	KLvl
>760	Identifier	cx_l
>761	Identifier	cx_l
>762	IdentifierDeclType	float
>763	IdentifierDeclStatement	 
>764	IdentifierDecl	fy_l = KLvl ( 1 , 1 )
>765	AssignmentExpr	fy_l = KLvl ( 1 , 1 )
>766	CallExpression	KLvl ( 1 , 1 )
>767	ArgumentList	1
>768	Argument	1
>769	PrimaryExpression	1
>770	Argument	1
>771	PrimaryExpression	1
>772	Callee	KLvl
>773	Identifier	KLvl
>774	Identifier	fy_l
>775	Identifier	fy_l
>776	IdentifierDeclType	float
>777	IdentifierDeclStatement	 
>778	IdentifierDecl	fx_l = KLvl ( 0 , 0 )
>779	AssignmentExpr	fx_l = KLvl ( 0 , 0 )
>780	CallExpression	KLvl ( 0 , 0 )
>781	ArgumentList	0
>782	Argument	0
>783	PrimaryExpression	0
>784	Argument	0
>785	PrimaryExpression	0
>786	Callee	KLvl
>787	Identifier	KLvl
>788	Identifier	fx_l
>789	Identifier	fx_l
>790	IdentifierDeclType	float
>791	IdentifierDeclStatement	 
>792	IdentifierDecl	KLvl = reference -> K ( QUICK_KF_CHECK_LVL )
>793	AssignmentExpr	KLvl = reference -> K ( QUICK_KF_CHECK_LVL )
>794	CallExpression	reference -> K ( QUICK_KF_CHECK_LVL )
>795	ArgumentList	QUICK_KF_CHECK_LVL
>796	Argument	QUICK_KF_CHECK_LVL
>797	Identifier	QUICK_KF_CHECK_LVL
>798	Callee	reference -> K
>799	PtrMemberAccess	reference -> K
>800	Identifier	K
>801	Identifier	reference
>802	Identifier	KLvl
>803	Identifier	KLvl
>804	IdentifierDeclType	Eigen 
>805	IdentifierDeclStatement	 
>806	IdentifierDecl	h2 = reference -> height ( QUICK_KF_CHECK_LVL ) - 1
>807	AssignmentExpr	h2 = reference -> height ( QUICK_KF_CHECK_LVL ) - 1
>808	AdditiveExpression	reference -> height ( QUICK_KF_CHECK_LVL ) - 1
>809	PrimaryExpression	1
>810	CallExpression	reference -> height ( QUICK_KF_CHECK_LVL )
>811	ArgumentList	QUICK_KF_CHECK_LVL
>812	Argument	QUICK_KF_CHECK_LVL
>813	Identifier	QUICK_KF_CHECK_LVL
>814	Callee	reference -> height
>815	PtrMemberAccess	reference -> height
>816	Identifier	height
>817	Identifier	reference
>818	Identifier	h2
>819	Identifier	h2
>820	IdentifierDeclType	int
>821	IdentifierDeclStatement	 
>822	IdentifierDecl	w2 = reference -> width ( QUICK_KF_CHECK_LVL ) - 1
>823	AssignmentExpr	w2 = reference -> width ( QUICK_KF_CHECK_LVL ) - 1
>824	AdditiveExpression	reference -> width ( QUICK_KF_CHECK_LVL ) - 1
>825	PrimaryExpression	1
>826	CallExpression	reference -> width ( QUICK_KF_CHECK_LVL )
>827	ArgumentList	QUICK_KF_CHECK_LVL
>828	Argument	QUICK_KF_CHECK_LVL
>829	Identifier	QUICK_KF_CHECK_LVL
>830	Callee	reference -> width
>831	PtrMemberAccess	reference -> width
>832	Identifier	width
>833	Identifier	reference
>834	Identifier	w2
>835	Identifier	w2
>836	IdentifierDeclType	int
>837	IdentifierDeclStatement	 
>838	IdentifierDecl	lock2 = boost 
>839	AssignmentExpr	lock2 = boost 
>840	RelationalExpression	boost 
>841	RelationalExpression	boost 
>842	PtrMemberAccess	reference -> permaRef_mutex
>843	Identifier	permaRef_mutex
>844	Identifier	reference
>845	Identifier	boost 
>846	Identifier	boost 
>847	Identifier	lock2
>848	Identifier	lock2
>849	IdentifierDeclType	boost 
>850	ExpressionStatement	 
>851	Statement	 
>852	Statement	 
>853	Statement	 
>854	Statement	 
>855	Statement	 
>856	Statement	 
>857	Statement	 
>858	Statement	 
>859	Statement	 
>860	Statement	 
>861	Statement	 
>862	Statement	 
>863	Statement	 
>903	FunctionDef	SE3Tracker 
>904	ParameterList	Frame * reference , Frame * frame , SE3 referenceToFrameOrg
>905	Parameter	 
>906	Identifier	referenceToFrameOrg
>907	ParameterType	SE3
>908	Parameter	 
>909	Identifier	frame
>910	ParameterType	Frame *
>911	Parameter	 
>912	Identifier	reference
>913	ParameterType	Frame *
>914	ReturnType	SE3
>915	CompoundStatement	 
>916	ReturnStatement	 
>917	CallExpression	toSophus ( referenceToFrame )
>918	ArgumentList	referenceToFrame
>919	Argument	referenceToFrame
>920	Identifier	referenceToFrame
>921	Callee	toSophus
>922	Identifier	toSophus
>923	ExpressionStatement	 
>924	AssignmentExpr	trackingWasGood = ! diverged && lastGoodCount / ( frame -> width ( QUICK_KF_CHECK_LVL ) * frame -> height ( \
>925	AndExpression	! diverged && lastGoodCount / ( frame -> width ( QUICK_KF_CHECK_LVL ) * frame -> height ( QUICK_KF_CHECK_\
>926	AndExpression	lastGoodCount / ( frame -> width ( QUICK_KF_CHECK_LVL ) * frame -> height ( QUICK_KF_CHECK_LVL ) ) > \
>927	RelationalExpression	lastGoodCount / ( lastGoodCount + lastBadCount ) > MIN_GOODPERGOODBAD_PIXEL
>928	Identifier	MIN_GOODPERGOODBAD_PIXEL
>929	MultiplicativeExpression	lastGoodCount / ( lastGoodCount + lastBadCount )
>930	AdditiveExpression	lastGoodCount + lastBadCount
>931	Identifier	lastBadCount
>932	Identifier	lastGoodCount
>933	Identifier	lastGoodCount
>934	RelationalExpression	lastGoodCount / ( frame -> width ( QUICK_KF_CHECK_LVL ) * frame -> height ( QUICK_KF_CHECK_LVL ) ) > \
>935	Identifier	MIN_GOODPERALL_PIXEL
>936	MultiplicativeExpression	lastGoodCount / ( frame -> width ( QUICK_KF_CHECK_LVL ) * frame -> height ( QUICK_KF_CHECK_LVL ) )
>937	MultiplicativeExpression	frame -> width ( QUICK_KF_CHECK_LVL ) * frame -> height ( QUICK_KF_CHECK_LVL )
>938	CallExpression	frame -> height ( QUICK_KF_CHECK_LVL )
>939	ArgumentList	QUICK_KF_CHECK_LVL
>940	Argument	QUICK_KF_CHECK_LVL
>941	Identifier	QUICK_KF_CHECK_LVL
>942	Callee	frame -> height
>943	PtrMemberAccess	frame -> height
>944	Identifier	height
>945	Identifier	frame
>946	CallExpression	frame -> width ( QUICK_KF_CHECK_LVL )
>947	ArgumentList	QUICK_KF_CHECK_LVL
>948	Argument	QUICK_KF_CHECK_LVL
>949	Identifier	QUICK_KF_CHECK_LVL
>950	Callee	frame -> width
>951	PtrMemberAccess	frame -> width
>952	Identifier	width
>953	Identifier	frame
>954	Identifier	lastGoodCount
>955	UnaryOp	! diverged
>956	Identifier	diverged
>957	UnaryOperator	!
>958	Identifier	trackingWasGood
>959	ExpressionStatement	 
>960	AssignmentExpr	lastResidual = lastErr
>961	Identifier	lastErr
>962	Identifier	lastResidual
>963	ForStatement	for ( int iteration = 0 ; iteration < settings . maxItsTestTrack ; iteration ++ )
>964	CompoundStatement	 
>965	WhileStatement	while ( true )
>966	CompoundStatement	 
>967	IfStatement	if ( error < lastErr )
>968	ElseStatement	else
>969	CompoundStatement	 
>970	IfStatement	if ( LM_lambda == 0 )
>971	ElseStatement	else
>972	ExpressionStatement	 
>973	AssignmentExpr	LM_lambda *= std 
>974	CallExpression	std 
>975	ArgumentList	settings . lambdaFailFac
>976	Argument	incTry
>977	Identifier	incTry
>978	Argument	settings . lambdaFailFac
>979	MemberAccess	settings . lambdaFailFac
>980	Identifier	lambdaFailFac
>981	Identifier	settings
>982	Callee	std 
>983	Identifier	std 
>984	Identifier	LM_lambda
>985	ExpressionStatement	 
>986	AssignmentExpr	LM_lambda = 0.2
>987	PrimaryExpression	0.2
>988	Identifier	LM_lambda
>989	Condition	 
>990	EqualityExpression	LM_lambda == 0
>991	PrimaryExpression	0
>992	Identifier	LM_lambda
>993	IfStatement	if ( ! ( inc . dot ( inc ) > settings . stepSizeMinTestTrack ) )
>994	CompoundStatement	 
>995	BreakStatement	 
>996	ExpressionStatement	 
>997	AssignmentExpr	iteration = settings . maxItsTestTrack
>998	MemberAccess	settings . maxItsTestTrack
>999	Identifier	maxItsTestTrack
>1000	Identifier	settings
>1001	Identifier	iteration
>1002	Condition	 
>1003	UnaryOp	! ( inc . dot ( inc ) > settings . stepSizeMinTestTrack )
>1004	RelationalExpression	inc . dot ( inc ) > settings . stepSizeMinTestTrack
>1005	MemberAccess	settings . stepSizeMinTestTrack
>1006	Identifier	stepSizeMinTestTrack
>1007	Identifier	settings
>1008	CallExpression	inc . dot ( inc )
>1009	ArgumentList	inc
>1010	Argument	inc
>1011	Identifier	inc
>1012	Callee	inc . dot
>1013	MemberAccess	inc . dot
>1014	Identifier	dot
>1015	Identifier	inc
>1016	UnaryOperator	!
>1017	CompoundStatement	 
>1018	BreakStatement	 
>1019	IfStatement	if ( LM_lambda <= 0.2 )
>1020	ElseStatement	else
>1021	ExpressionStatement	 
>1022	AssignmentExpr	LM_lambda *= settings . lambdaSuccessFac
>1023	MemberAccess	settings . lambdaSuccessFac
>1024	Identifier	lambdaSuccessFac
>1025	Identifier	settings
>1026	Identifier	LM_lambda
>1027	ExpressionStatement	 
>1028	AssignmentExpr	LM_lambda = 0
>1029	PrimaryExpression	0
>1030	Identifier	LM_lambda
>1031	Condition	 
>1032	RelationalExpression	LM_lambda <= 0.2
>1033	PrimaryExpression	0.2
>1034	Identifier	LM_lambda
>1035	ExpressionStatement	 
>1036	AssignmentExpr	lastErr = error
>1037	Identifier	error
>1038	Identifier	lastErr
>1039	IfStatement	if ( error / lastErr > settings . convergenceEpsTestTrack )
>1040	ExpressionStatement	 
>1041	AssignmentExpr	iteration = settings . maxItsTestTrack
>1042	MemberAccess	settings . maxItsTestTrack
>1043	Identifier	maxItsTestTrack
>1044	Identifier	settings
>1045	Identifier	iteration
>1046	Condition	 
>1047	RelationalExpression	error / lastErr > settings . convergenceEpsTestTrack
>1048	MemberAccess	settings . convergenceEpsTestTrack
>1049	Identifier	convergenceEpsTestTrack
>1050	Identifier	settings
>1051	MultiplicativeExpression	error / lastErr
>1052	Identifier	lastErr
>1053	Identifier	error
>1054	IfStatement	if ( useAffineLightningEstimation )
>1055	CompoundStatement	 
>1056	ExpressionStatement	 
>1057	AssignmentExpr	affineEstimation_b = affineEstimation_b_lastIt
>1058	Identifier	affineEstimation_b_lastIt
>1059	Identifier	affineEstimation_b
>1060	ExpressionStatement	 
>1061	AssignmentExpr	affineEstimation_a = affineEstimation_a_lastIt
>1062	Identifier	affineEstimation_a_lastIt
>1063	Identifier	affineEstimation_a
>1064	Condition	 
>1065	Identifier	useAffineLightningEstimation
>1066	ExpressionStatement	 
>1067	AssignmentExpr	referenceToFrame = new_referenceToFrame
>1068	Identifier	new_referenceToFrame
>1069	Identifier	referenceToFrame
>1070	Condition	 
>1071	RelationalExpression	error < lastErr
>1072	Identifier	lastErr
>1073	Identifier	error
>1074	IdentifierDeclStatement	 
>1075	IdentifierDecl	error = callOptimized ( calcWeightsAndResidual , ( new_referenceToFrame ) )
>1076	AssignmentExpr	error = callOptimized ( calcWeightsAndResidual , ( new_referenceToFrame ) )
>1077	CallExpression	callOptimized ( calcWeightsAndResidual , ( new_referenceToFrame ) )
>1078	ArgumentList	calcWeightsAndResidual
>1079	Argument	new_referenceToFrame
>1080	Identifier	new_referenceToFrame
>1081	Argument	calcWeightsAndResidual
>1082	Identifier	calcWeightsAndResidual
>1083	Callee	callOptimized
>1084	Identifier	callOptimized
>1085	Identifier	error
>1086	Identifier	error
>1087	IdentifierDeclType	float
>1088	IfStatement	if ( buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_CHECK_\
>1089	CompoundStatement	 
>1090	ReturnStatement	 
>1091	CallExpression	SE3 ( )
>1092	ArgumentList	 
>1093	Callee	SE3
>1094	Identifier	SE3
>1095	ExpressionStatement	 
>1096	AssignmentExpr	trackingWasGood = false
>1097	Identifier	false
>1098	Identifier	trackingWasGood
>1099	ExpressionStatement	 
>1100	AssignmentExpr	diverged = true
>1101	Identifier	true
>1102	Identifier	diverged
>1103	Condition	 
>1104	RelationalExpression	buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_\
>1105	MultiplicativeExpression	MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_CHECK_LVL )
>1106	MultiplicativeExpression	( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_CHECK_LVL )
>1107	ShiftExpression	height >> QUICK_KF_CHECK_LVL
>1108	Identifier	QUICK_KF_CHECK_LVL
>1109	Identifier	height
>1110	ShiftExpression	width >> QUICK_KF_CHECK_LVL
>1111	Identifier	QUICK_KF_CHECK_LVL
>1112	Identifier	width
>1113	Identifier	MIN_GOODPERALL_PIXEL_ABSMIN
>1114	Identifier	buf_warped_size
>1115	ExpressionStatement	 
>1116	CallExpression	callOptimized ( calcResidualAndBuffers , ( reference -> permaRef_posData , reference -> permaRef_colorAndVarData , \
>1117	ArgumentList	calcResidualAndBuffers
>1118	Argument	reference -> permaRef_posData , reference -> permaRef_colorAndVarData , 0 , reference -> permaRefNumPts , frame , \
>1119	Expression	reference -> permaRef_posData , reference -> permaRef_colorAndVarData , 0 , reference -> permaRefNumPts , frame , \
>1120	Expression	reference -> permaRef_colorAndVarData , 0 , reference -> permaRefNumPts , frame , new_referenceToFrame , QUICK_KF_\
>1121	Expression	0 , reference -> permaRefNumPts , frame , new_referenceToFrame , QUICK_KF_CHECK_LVL , false
>1122	Expression	reference -> permaRefNumPts , frame , new_referenceToFrame , QUICK_KF_CHECK_LVL , false
>1123	Expression	frame , new_referenceToFrame , QUICK_KF_CHECK_LVL , false
>1124	Expression	new_referenceToFrame , QUICK_KF_CHECK_LVL , false
>1125	Expression	QUICK_KF_CHECK_LVL , false
>1126	Identifier	false
>1127	Identifier	QUICK_KF_CHECK_LVL
>1128	Identifier	new_referenceToFrame
>1129	Identifier	frame
>1130	PtrMemberAccess	reference -> permaRefNumPts
>1131	Identifier	permaRefNumPts
>1132	Identifier	reference
>1133	PrimaryExpression	0
>1134	PtrMemberAccess	reference -> permaRef_colorAndVarData
>1135	Identifier	permaRef_colorAndVarData
>1136	Identifier	reference
>1137	PtrMemberAccess	reference -> permaRef_posData
>1138	Identifier	permaRef_posData
>1139	Identifier	reference
>1140	Argument	calcResidualAndBuffers
>1141	Identifier	calcResidualAndBuffers
>1142	Callee	callOptimized
>1143	Identifier	callOptimized
>1144	IdentifierDeclStatement	 
>1145	IdentifierDecl	new_referenceToFrame = Sophus 
>1146	AssignmentExpr	new_referenceToFrame = Sophus 
>1147	MultiplicativeExpression	Sophus 
>1148	Identifier	referenceToFrame
>1149	CallExpression	Sophus 
>1150	ArgumentList	inc
>1151	Argument	inc
>1152	Identifier	inc
>1153	Callee	Sophus 
>1154	Identifier	Sophus 
>1155	Identifier	new_referenceToFrame
>1156	Identifier	new_referenceToFrame
>1157	IdentifierDeclType	Sophus 
>1158	ExpressionStatement	 
>1159	IncDecOp	incTry ++
>1160	IncDec	++
>1161	Identifier	incTry
>1162	IdentifierDeclStatement	 
>1163	IdentifierDecl	inc = A . ldlt ( ) . solve ( b )
>1164	AssignmentExpr	inc = A . ldlt ( ) . solve ( b )
>1165	CallExpression	A . ldlt ( ) . solve ( b )
>1166	ArgumentList	b
>1167	Argument	b
>1168	Identifier	b
>1169	Callee	A . ldlt ( ) . solve
>1170	MemberAccess	A . ldlt ( ) . solve
>1171	Identifier	solve
>1172	CallExpression	A . ldlt ( )
>1173	ArgumentList	 
>1174	Callee	A . ldlt
>1175	MemberAccess	A . ldlt
>1176	Identifier	ldlt
>1177	Identifier	A
>1178	Identifier	inc
>1179	Identifier	inc
>1180	IdentifierDeclType	Vector6
>1181	ForStatement	for ( int i = 0 ; i < 6 ; i ++ )
>1182	ExpressionStatement	 
>1183	AssignmentExpr	A ( i , i ) *= 1 + LM_lambda
>1184	AdditiveExpression	1 + LM_lambda
>1185	Identifier	LM_lambda
>1186	PrimaryExpression	1
>1187	CallExpression	A ( i , i )
>1188	ArgumentList	i
>1189	Argument	i
>1190	Identifier	i
>1191	Argument	i
>1192	Identifier	i
>1193	Callee	A
>1194	Identifier	A
>1195	IncDecOp	 
>1196	IncDec	++
>1197	Identifier	i
>1198	Condition	 
>1199	RelationalExpression	i < 6
>1200	PrimaryExpression	6
>1201	Identifier	i
>1202	ForInit	 
>1203	IdentifierDeclStatement	int i = 0 ;
>1204	IdentifierDecl	i = 0
>1205	AssignmentExpr	i = 0
>1206	PrimaryExpression	0
>1207	Identifier	i
>1208	Identifier	i
>1209	IdentifierDeclType	int
>1210	IdentifierDeclStatement	 
>1211	IdentifierDecl	A = ls . A
>1212	AssignmentExpr	A = ls . A
>1213	MemberAccess	ls . A
>1214	Identifier	A
>1215	Identifier	ls
>1216	Identifier	A
>1217	Identifier	A
>1218	IdentifierDeclType	Matrix6x6
>1219	IdentifierDeclStatement	 
>1220	IdentifierDecl	b = - ls . b
>1221	AssignmentExpr	b = - ls . b
>1222	UnaryOp	- ls . b
>1223	MemberAccess	ls . b
>1224	Identifier	b
>1225	Identifier	ls
>1226	UnaryOperator	-
>1227	Identifier	b
>1228	Identifier	b
>1229	IdentifierDeclType	Vector6
>1230	Condition	 
>1231	Identifier	true
>1232	IdentifierDeclStatement	 
>1233	IdentifierDecl	incTry = 0
>1234	AssignmentExpr	incTry = 0
>1235	PrimaryExpression	0
>1236	Identifier	incTry
>1237	Identifier	incTry
>1238	IdentifierDeclType	int
>1239	ExpressionStatement	 
>1240	CallExpression	callOptimized ( calculateWarpUpdate , ( ls ) )
>1241	ArgumentList	calculateWarpUpdate
>1242	Argument	ls
>1243	Identifier	ls
>1244	Argument	calculateWarpUpdate
>1245	Identifier	calculateWarpUpdate
>1246	Callee	callOptimized
>1247	Identifier	callOptimized
>1248	IncDecOp	 
>1249	IncDec	++
>1250	Identifier	iteration
>1251	Condition	 
>1252	RelationalExpression	iteration < settings . maxItsTestTrack
>1253	MemberAccess	settings . maxItsTestTrack
>1254	Identifier	maxItsTestTrack
>1255	Identifier	settings
>1256	Identifier	iteration
>1257	ForInit	 
>1258	IdentifierDeclStatement	int iteration = 0 ;
>1259	IdentifierDecl	iteration = 0
>1260	AssignmentExpr	iteration = 0
>1261	PrimaryExpression	0
>1262	Identifier	iteration
>1263	Identifier	iteration
>1264	IdentifierDeclType	int
>1265	IdentifierDeclStatement	 
>1266	IdentifierDecl	LM_lambda = settings . lambdaInitialTestTrack
>1267	AssignmentExpr	LM_lambda = settings . lambdaInitialTestTrack
>1268	MemberAccess	settings . lambdaInitialTestTrack
>1269	Identifier	lambdaInitialTestTrack
>1270	Identifier	settings
>1271	Identifier	LM_lambda
>1272	Identifier	LM_lambda
>1273	IdentifierDeclType	float
>1274	IdentifierDeclStatement	 
>1275	IdentifierDecl	lastErr = callOptimized ( calcWeightsAndResidual , ( referenceToFrame ) )
>1276	AssignmentExpr	lastErr = callOptimized ( calcWeightsAndResidual , ( referenceToFrame ) )
>1277	CallExpression	callOptimized ( calcWeightsAndResidual , ( referenceToFrame ) )
>1278	ArgumentList	calcWeightsAndResidual
>1279	Argument	referenceToFrame
>1280	Identifier	referenceToFrame
>1281	Argument	calcWeightsAndResidual
>1282	Identifier	calcWeightsAndResidual
>1283	Callee	callOptimized
>1284	Identifier	callOptimized
>1285	Identifier	lastErr
>1286	Identifier	lastErr
>1287	IdentifierDeclType	float
>1288	IfStatement	if ( useAffineLightningEstimation )
>1289	CompoundStatement	 
>1290	ExpressionStatement	 
>1291	AssignmentExpr	affineEstimation_b = affineEstimation_b_lastIt
>1292	Identifier	affineEstimation_b_lastIt
>1293	Identifier	affineEstimation_b
>1294	ExpressionStatement	 
>1295	AssignmentExpr	affineEstimation_a = affineEstimation_a_lastIt
>1296	Identifier	affineEstimation_a_lastIt
>1297	Identifier	affineEstimation_a
>1298	Condition	 
>1299	Identifier	useAffineLightningEstimation
>1300	IfStatement	if ( buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_CHECK_\
>1301	CompoundStatement	 
>1302	ReturnStatement	 
>1303	CallExpression	SE3 ( )
>1304	ArgumentList	 
>1305	Callee	SE3
>1306	Identifier	SE3
>1307	ExpressionStatement	 
>1308	AssignmentExpr	trackingWasGood = false
>1309	Identifier	false
>1310	Identifier	trackingWasGood
>1311	ExpressionStatement	 
>1312	AssignmentExpr	diverged = true
>1313	Identifier	true
>1314	Identifier	diverged
>1315	Condition	 
>1316	RelationalExpression	buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_\
>1317	MultiplicativeExpression	MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_CHECK_LVL )
>1318	MultiplicativeExpression	( width >> QUICK_KF_CHECK_LVL ) * ( height >> QUICK_KF_CHECK_LVL )
>1319	ShiftExpression	height >> QUICK_KF_CHECK_LVL
>1320	Identifier	QUICK_KF_CHECK_LVL
>1321	Identifier	height
>1322	ShiftExpression	width >> QUICK_KF_CHECK_LVL
>1323	Identifier	QUICK_KF_CHECK_LVL
>1324	Identifier	width
>1325	Identifier	MIN_GOODPERALL_PIXEL_ABSMIN
>1326	Identifier	buf_warped_size
>1327	ExpressionStatement	 
>1328	CallExpression	callOptimized ( calcResidualAndBuffers , ( reference -> permaRef_posData , reference -> permaRef_colorAndVarData , \
>1329	ArgumentList	calcResidualAndBuffers
>1330	Argument	reference -> permaRef_posData , reference -> permaRef_colorAndVarData , 0 , reference -> permaRefNumPts , frame , \
>1331	Expression	reference -> permaRef_posData , reference -> permaRef_colorAndVarData , 0 , reference -> permaRefNumPts , frame , \
>1332	Expression	reference -> permaRef_colorAndVarData , 0 , reference -> permaRefNumPts , frame , referenceToFrame , QUICK_KF_CHECK_\
>1333	Expression	0 , reference -> permaRefNumPts , frame , referenceToFrame , QUICK_KF_CHECK_LVL , false
>1334	Expression	reference -> permaRefNumPts , frame , referenceToFrame , QUICK_KF_CHECK_LVL , false
>1335	Expression	frame , referenceToFrame , QUICK_KF_CHECK_LVL , false
>1336	Expression	referenceToFrame , QUICK_KF_CHECK_LVL , false
>1337	Expression	QUICK_KF_CHECK_LVL , false
>1338	Identifier	false
>1339	Identifier	QUICK_KF_CHECK_LVL
>1340	Identifier	referenceToFrame
>1341	Identifier	frame
>1342	PtrMemberAccess	reference -> permaRefNumPts
>1343	Identifier	permaRefNumPts
>1344	Identifier	reference
>1345	PrimaryExpression	0
>1346	PtrMemberAccess	reference -> permaRef_colorAndVarData
>1347	Identifier	permaRef_colorAndVarData
>1348	Identifier	reference
>1349	PtrMemberAccess	reference -> permaRef_posData
>1350	Identifier	permaRef_posData
>1351	Identifier	reference
>1352	Argument	calcResidualAndBuffers
>1353	Identifier	calcResidualAndBuffers
>1354	Callee	callOptimized
>1355	Identifier	callOptimized
>1356	ExpressionStatement	 
>1357	AssignmentExpr	trackingWasGood = true
>1358	Identifier	true
>1359	Identifier	trackingWasGood
>1360	ExpressionStatement	 
>1361	AssignmentExpr	diverged = false
>1362	Identifier	false
>1363	Identifier	diverged
>1364	IdentifierDeclStatement	 
>1365	IdentifierDecl	ls
>1366	Identifier	ls
>1367	IdentifierDeclType	LGS6
>1368	ExpressionStatement	 
>1369	AssignmentExpr	affineEstimation_b = 0
>1370	PrimaryExpression	0
>1371	Identifier	affineEstimation_b
>1372	ExpressionStatement	 
>1373	AssignmentExpr	affineEstimation_a = 1
>1374	PrimaryExpression	1
>1375	Identifier	affineEstimation_a
>1376	IdentifierDeclStatement	 
>1377	IdentifierDecl	lock2 = boost 
>1378	AssignmentExpr	lock2 = boost 
>1379	RelationalExpression	boost 
>1380	RelationalExpression	boost 
>1381	PtrMemberAccess	reference -> permaRef_mutex
>1382	Identifier	permaRef_mutex
>1383	Identifier	reference
>1384	Identifier	boost 
>1385	Identifier	boost 
>1386	Identifier	lock2
>1387	Identifier	lock2
>1388	IdentifierDeclType	boost 
>1389	IdentifierDeclStatement	 
>1390	IdentifierDecl	lock = frame -> getActiveLock ( )
>1391	AssignmentExpr	lock = frame -> getActiveLock ( )
>1392	CallExpression	frame -> getActiveLock ( )
>1393	ArgumentList	 
>1394	Callee	frame -> getActiveLock
>1395	PtrMemberAccess	frame -> getActiveLock
>1396	Identifier	getActiveLock
>1397	Identifier	frame
>1398	Identifier	lock
>1399	Identifier	lock
>1400	IdentifierDeclType	boost 
>1401	ExpressionStatement	 
>1402	Statement	 
>1403	Statement	 
>1404	Statement	 
>1405	Statement	 
>1406	Statement	 
>1407	Statement	 
>1408	Statement	 
>1409	Statement	 
>1410	Statement	 
>1411	Statement	 
>1412	Statement	 
>1413	Statement	 
>1414	Statement	 
>1485	FunctionDef	SE3Tracker 
>1486	ParameterList	TrackingReference * reference , Frame * frame , const SE3 & frameToReference_initialEstimate
>1487	Parameter	 
>1488	Identifier	frameToReference_initialEstimate
>1489	ParameterType	const SE3 &
>1490	Parameter	 
>1491	Identifier	frame
>1492	ParameterType	Frame *
>1493	Parameter	 
>1494	Identifier	reference
>1495	ParameterType	TrackingReference *
>1496	ReturnType	SE3
>1497	CompoundStatement	 
>1498	ReturnStatement	 
>1499	CallExpression	toSophus ( referenceToFrame . inverse ( ) )
>1500	ArgumentList	referenceToFrame . inverse ( )
>1501	Argument	referenceToFrame . inverse ( )
>1502	CallExpression	referenceToFrame . inverse ( )
>1503	ArgumentList	 
>1504	Callee	referenceToFrame . inverse
>1505	MemberAccess	referenceToFrame . inverse
>1506	Identifier	inverse
>1507	Identifier	referenceToFrame
>1508	Callee	toSophus
>1509	Identifier	toSophus
>1510	ExpressionStatement	 
>1511	AssignmentExpr	frame -> pose -> trackingParent = reference -> keyframe -> pose
>1512	PtrMemberAccess	reference -> keyframe -> pose
>1513	Identifier	pose
>1514	PtrMemberAccess	reference -> keyframe
>1515	Identifier	keyframe
>1516	Identifier	reference
>1517	PtrMemberAccess	frame -> pose -> trackingParent
>1518	Identifier	trackingParent
>1519	PtrMemberAccess	frame -> pose
>1520	Identifier	pose
>1521	Identifier	frame
>1522	ExpressionStatement	 
>1523	AssignmentExpr	frame -> pose -> thisToParent_raw = sim3FromSE3 ( toSophus ( referenceToFrame . inverse ( ) ) , 1 )
>1524	CallExpression	sim3FromSE3 ( toSophus ( referenceToFrame . inverse ( ) ) , 1 )
>1525	ArgumentList	toSophus ( referenceToFrame . inverse ( ) )
>1526	Argument	1
>1527	PrimaryExpression	1
>1528	Argument	toSophus ( referenceToFrame . inverse ( ) )
>1529	CallExpression	toSophus ( referenceToFrame . inverse ( ) )
>1530	ArgumentList	referenceToFrame . inverse ( )
>1531	Argument	referenceToFrame . inverse ( )
>1532	CallExpression	referenceToFrame . inverse ( )
>1533	ArgumentList	 
>1534	Callee	referenceToFrame . inverse
>1535	MemberAccess	referenceToFrame . inverse
>1536	Identifier	inverse
>1537	Identifier	referenceToFrame
>1538	Callee	toSophus
>1539	Identifier	toSophus
>1540	Callee	sim3FromSE3
>1541	Identifier	sim3FromSE3
>1542	PtrMemberAccess	frame -> pose -> thisToParent_raw
>1543	Identifier	thisToParent_raw
>1544	PtrMemberAccess	frame -> pose
>1545	Identifier	pose
>1546	Identifier	frame
>1547	ExpressionStatement	 
>1548	AssignmentExpr	frame -> initialTrackedResidual = lastResidual / pointUsage
>1549	MultiplicativeExpression	lastResidual / pointUsage
>1550	Identifier	pointUsage
>1551	Identifier	lastResidual
>1552	PtrMemberAccess	frame -> initialTrackedResidual
>1553	Identifier	initialTrackedResidual
>1554	Identifier	frame
>1555	IfStatement	if ( trackingWasGood )
>1556	ExpressionStatement	 
>1557	IncDecOp	reference -> keyframe -> numFramesTrackedOnThis ++
>1558	IncDec	++
>1559	PtrMemberAccess	reference -> keyframe -> numFramesTrackedOnThis
>1560	Identifier	numFramesTrackedOnThis
>1561	PtrMemberAccess	reference -> keyframe
>1562	Identifier	keyframe
>1563	Identifier	reference
>1564	Condition	 
>1565	Identifier	trackingWasGood
>1566	ExpressionStatement	 
>1567	AssignmentExpr	trackingWasGood = ! diverged && lastGoodCount / ( frame -> width ( SE3TRACKING_MIN_LEVEL ) * frame -> \
>1568	AndExpression	! diverged && lastGoodCount / ( frame -> width ( SE3TRACKING_MIN_LEVEL ) * frame -> height ( SE3TRACKING_\
>1569	AndExpression	lastGoodCount / ( frame -> width ( SE3TRACKING_MIN_LEVEL ) * frame -> height ( SE3TRACKING_MIN_LEVEL ) ) > \
>1570	RelationalExpression	lastGoodCount / ( lastGoodCount + lastBadCount ) > MIN_GOODPERGOODBAD_PIXEL
>1571	Identifier	MIN_GOODPERGOODBAD_PIXEL
>1572	MultiplicativeExpression	lastGoodCount / ( lastGoodCount + lastBadCount )
>1573	AdditiveExpression	lastGoodCount + lastBadCount
>1574	Identifier	lastBadCount
>1575	Identifier	lastGoodCount
>1576	Identifier	lastGoodCount
>1577	RelationalExpression	lastGoodCount / ( frame -> width ( SE3TRACKING_MIN_LEVEL ) * frame -> height ( SE3TRACKING_MIN_LEVEL ) ) > \
>1578	Identifier	MIN_GOODPERALL_PIXEL
>1579	MultiplicativeExpression	lastGoodCount / ( frame -> width ( SE3TRACKING_MIN_LEVEL ) * frame -> height ( SE3TRACKING_MIN_LEVEL ) )
>1580	MultiplicativeExpression	frame -> width ( SE3TRACKING_MIN_LEVEL ) * frame -> height ( SE3TRACKING_MIN_LEVEL )
>1581	CallExpression	frame -> height ( SE3TRACKING_MIN_LEVEL )
>1582	ArgumentList	SE3TRACKING_MIN_LEVEL
>1583	Argument	SE3TRACKING_MIN_LEVEL
>1584	Identifier	SE3TRACKING_MIN_LEVEL
>1585	Callee	frame -> height
>1586	PtrMemberAccess	frame -> height
>1587	Identifier	height
>1588	Identifier	frame
>1589	CallExpression	frame -> width ( SE3TRACKING_MIN_LEVEL )
>1590	ArgumentList	SE3TRACKING_MIN_LEVEL
>1591	Argument	SE3TRACKING_MIN_LEVEL
>1592	Identifier	SE3TRACKING_MIN_LEVEL
>1593	Callee	frame -> width
>1594	PtrMemberAccess	frame -> width
>1595	Identifier	width
>1596	Identifier	frame
>1597	Identifier	lastGoodCount
>1598	UnaryOp	! diverged
>1599	Identifier	diverged
>1600	UnaryOperator	!
>1601	Identifier	trackingWasGood
>1602	ExpressionStatement	 
>1603	AssignmentExpr	lastResidual = last_residual
>1604	Identifier	last_residual
>1605	Identifier	lastResidual
>1606	ExpressionStatement	 
>1607	AssignmentExpr	saveAllTrackingStagesInternal = false
>1608	Identifier	false
>1609	Identifier	saveAllTrackingStagesInternal
>1610	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1611	CompoundStatement	 
>1612	ExpressionStatement	 
>1613	CallExpression	printf ( \"\n\" )
>1614	ArgumentList	\"\n\"
>1615	Argument	\"\n\"
>1616	PrimaryExpression	\"\n\"
>1617	Callee	printf
>1618	Identifier	printf
>1619	ForStatement	for ( int lvl = PYRAMID_LEVELS - 1 ; lvl >= 0 ; lvl -- )
>1620	CompoundStatement	 
>1621	ExpressionStatement	 
>1622	CallExpression	printf ( \"lvl %d
>1623	ArgumentList	\"lvl %d
>1624	Argument	numCalcWarpUpdateCalls [ lvl ]
>1625	ArrayIndexing	numCalcWarpUpdateCalls [ lvl ]
>1626	Identifier	lvl
>1627	Identifier	numCalcWarpUpdateCalls
>1628	Argument	numCalcResidualCalls [ lvl ]
>1629	ArrayIndexing	numCalcResidualCalls [ lvl ]
>1630	Identifier	lvl
>1631	Identifier	numCalcResidualCalls
>1632	Argument	lvl
>1633	Identifier	lvl
>1634	Argument	\"lvl %d
>1635	PrimaryExpression	\"lvl %d
>1636	Callee	printf
>1637	Identifier	printf
>1638	IncDecOp	 
>1639	IncDec	--
>1640	Identifier	lvl
>1641	Condition	 
>1642	RelationalExpression	lvl >= 0
>1643	PrimaryExpression	0
>1644	Identifier	lvl
>1645	ForInit	 
>1646	IdentifierDeclStatement	int lvl = PYRAMID_LEVELS - 1 ;
>1647	IdentifierDecl	lvl = PYRAMID_LEVELS - 1
>1648	AssignmentExpr	lvl = PYRAMID_LEVELS - 1
>1649	AdditiveExpression	PYRAMID_LEVELS - 1
>1650	PrimaryExpression	1
>1651	Identifier	PYRAMID_LEVELS
>1652	Identifier	lvl
>1653	Identifier	lvl
>1654	IdentifierDeclType	int
>1655	ExpressionStatement	 
>1656	CallExpression	printf ( \"Tracking
>1657	ArgumentList	\"Tracking
>1658	Argument	\"Tracking
>1659	PrimaryExpression	\"Tracking
>1660	Callee	printf
>1661	Identifier	printf
>1662	Condition	 
>1663	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1664	Identifier	printTrackingIterationInfo
>1665	Identifier	enablePrintDebugInfo
>1666	IfStatement	if ( plotTracking )
>1667	ExpressionStatement	 
>1668	CallExpression	Util 
>1669	ArgumentList	\"TrackingResidual\"
>1670	Argument	false
>1671	Identifier	false
>1672	Argument	debugImageResiduals
>1673	Identifier	debugImageResiduals
>1674	Argument	\"TrackingResidual\"
>1675	PrimaryExpression	\"TrackingResidual\"
>1676	Callee	Util 
>1677	Identifier	Util 
>1678	Condition	 
>1679	Identifier	plotTracking
>1680	ForStatement	for ( int lvl = SE3TRACKING_MAX_LEVEL - 1 ; lvl >= SE3TRACKING_MIN_LEVEL ; lvl -- )
>1681	CompoundStatement	 
>1682	ForStatement	for ( int iteration = 0 ; iteration < settings . maxItsPerLvl [ lvl ] ; iteration ++ )
>1683	CompoundStatement	 
>1684	WhileStatement	while ( true )
>1685	CompoundStatement	 
>1686	IfStatement	if ( error < lastErr )
>1687	ElseStatement	else
>1688	CompoundStatement	 
>1689	IfStatement	if ( LM_lambda == 0 )
>1690	ElseStatement	else
>1691	ExpressionStatement	 
>1692	AssignmentExpr	LM_lambda *= std 
>1693	CallExpression	std 
>1694	ArgumentList	settings . lambdaFailFac
>1695	Argument	incTry
>1696	Identifier	incTry
>1697	Argument	settings . lambdaFailFac
>1698	MemberAccess	settings . lambdaFailFac
>1699	Identifier	lambdaFailFac
>1700	Identifier	settings
>1701	Callee	std 
>1702	Identifier	std 
>1703	Identifier	LM_lambda
>1704	ExpressionStatement	 
>1705	AssignmentExpr	LM_lambda = 0.2
>1706	PrimaryExpression	0.2
>1707	Identifier	LM_lambda
>1708	Condition	 
>1709	EqualityExpression	LM_lambda == 0
>1710	PrimaryExpression	0
>1711	Identifier	LM_lambda
>1712	IfStatement	if ( ! ( inc . dot ( inc ) > settings . stepSizeMin [ lvl ] ) )
>1713	CompoundStatement	 
>1714	BreakStatement	 
>1715	ExpressionStatement	 
>1716	AssignmentExpr	iteration = settings . maxItsPerLvl [ lvl ]
>1717	ArrayIndexing	settings . maxItsPerLvl [ lvl ]
>1718	Identifier	lvl
>1719	MemberAccess	settings . maxItsPerLvl
>1720	Identifier	maxItsPerLvl
>1721	Identifier	settings
>1722	Identifier	iteration
>1723	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1724	CompoundStatement	 
>1725	ExpressionStatement	 
>1726	CallExpression	printf ( \"(%d-%d)
>1727	ArgumentList	\"(%d-%d)
>1728	Argument	iteration
>1729	Identifier	iteration
>1730	Argument	lvl
>1731	Identifier	lvl
>1732	Argument	\"(%d-%d)
>1733	PrimaryExpression	\"(%d-%d)
>1734	Callee	printf
>1735	Identifier	printf
>1736	Condition	 
>1737	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1738	Identifier	printTrackingIterationInfo
>1739	Identifier	enablePrintDebugInfo
>1740	Condition	 
>1741	UnaryOp	! ( inc . dot ( inc ) > settings . stepSizeMin [ lvl ] )
>1742	RelationalExpression	inc . dot ( inc ) > settings . stepSizeMin [ lvl ]
>1743	ArrayIndexing	settings . stepSizeMin [ lvl ]
>1744	Identifier	lvl
>1745	MemberAccess	settings . stepSizeMin
>1746	Identifier	stepSizeMin
>1747	Identifier	settings
>1748	CallExpression	inc . dot ( inc )
>1749	ArgumentList	inc
>1750	Argument	inc
>1751	Identifier	inc
>1752	Callee	inc . dot
>1753	MemberAccess	inc . dot
>1754	Identifier	dot
>1755	Identifier	inc
>1756	UnaryOperator	!
>1757	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1758	CompoundStatement	 
>1759	ExpressionStatement	 
>1760	CallExpression	printf ( \"(%d-%d)
>1761	ArgumentList	\"(%d-%d)
>1762	Argument	error
>1763	Identifier	error
>1764	Argument	lastErr
>1765	Identifier	lastErr
>1766	Argument	LM_lambda
>1767	Identifier	LM_lambda
>1768	Argument	sqrt ( inc . dot ( inc ) )
>1769	CallExpression	sqrt ( inc . dot ( inc ) )
>1770	ArgumentList	inc . dot ( inc )
>1771	Argument	inc . dot ( inc )
>1772	CallExpression	inc . dot ( inc )
>1773	ArgumentList	inc
>1774	Argument	inc
>1775	Identifier	inc
>1776	Callee	inc . dot
>1777	MemberAccess	inc . dot
>1778	Identifier	dot
>1779	Identifier	inc
>1780	Callee	sqrt
>1781	Identifier	sqrt
>1782	Argument	iteration
>1783	Identifier	iteration
>1784	Argument	lvl
>1785	Identifier	lvl
>1786	Argument	\"(%d-%d)
>1787	PrimaryExpression	\"(%d-%d)
>1788	Callee	printf
>1789	Identifier	printf
>1790	Condition	 
>1791	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1792	Identifier	printTrackingIterationInfo
>1793	Identifier	enablePrintDebugInfo
>1794	CompoundStatement	 
>1795	BreakStatement	 
>1796	IfStatement	if ( LM_lambda <= 0.2 )
>1797	ElseStatement	else
>1798	ExpressionStatement	 
>1799	AssignmentExpr	LM_lambda *= settings . lambdaSuccessFac
>1800	MemberAccess	settings . lambdaSuccessFac
>1801	Identifier	lambdaSuccessFac
>1802	Identifier	settings
>1803	Identifier	LM_lambda
>1804	ExpressionStatement	 
>1805	AssignmentExpr	LM_lambda = 0
>1806	PrimaryExpression	0
>1807	Identifier	LM_lambda
>1808	Condition	 
>1809	RelationalExpression	LM_lambda <= 0.2
>1810	PrimaryExpression	0.2
>1811	Identifier	LM_lambda
>1812	ExpressionStatement	 
>1813	AssignmentExpr	last_residual = lastErr = error
>1814	AssignmentExpr	lastErr = error
>1815	Identifier	error
>1816	Identifier	lastErr
>1817	Identifier	last_residual
>1818	IfStatement	if ( error / lastErr > settings . convergenceEps [ lvl ] )
>1819	CompoundStatement	 
>1820	ExpressionStatement	 
>1821	AssignmentExpr	iteration = settings . maxItsPerLvl [ lvl ]
>1822	ArrayIndexing	settings . maxItsPerLvl [ lvl ]
>1823	Identifier	lvl
>1824	MemberAccess	settings . maxItsPerLvl
>1825	Identifier	maxItsPerLvl
>1826	Identifier	settings
>1827	Identifier	iteration
>1828	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1829	CompoundStatement	 
>1830	ExpressionStatement	 
>1831	CallExpression	printf ( \"(%d-%d)
>1832	ArgumentList	\"(%d-%d)
>1833	Argument	iteration
>1834	Identifier	iteration
>1835	Argument	lvl
>1836	Identifier	lvl
>1837	Argument	\"(%d-%d)
>1838	PrimaryExpression	\"(%d-%d)
>1839	Callee	printf
>1840	Identifier	printf
>1841	Condition	 
>1842	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1843	Identifier	printTrackingIterationInfo
>1844	Identifier	enablePrintDebugInfo
>1845	Condition	 
>1846	RelationalExpression	error / lastErr > settings . convergenceEps [ lvl ]
>1847	ArrayIndexing	settings . convergenceEps [ lvl ]
>1848	Identifier	lvl
>1849	MemberAccess	settings . convergenceEps
>1850	Identifier	convergenceEps
>1851	Identifier	settings
>1852	MultiplicativeExpression	error / lastErr
>1853	Identifier	lastErr
>1854	Identifier	error
>1855	IfStatement	if ( enablePrintDebugInfo && printTrackingIterationInfo )
>1856	CompoundStatement	 
>1857	ExpressionStatement	 
>1858	CallExpression	printf ( \"         p=%.4f %.4f %.4f %.4f %.4f %.4f\n\" , referenceToFrame . log ( ) [ 0 ] , referenceToFrame . log ( ) [ \
>1859	ArgumentList	\"         p=%.4f %.4f %.4f %.4f %.4f %.4f\n\"
>1860	Argument	referenceToFrame . log ( ) [ 5 ]
>1861	ArrayIndexing	referenceToFrame . log ( ) [ 5 ]
>1862	PrimaryExpression	5
>1863	CallExpression	referenceToFrame . log ( )
>1864	ArgumentList	 
>1865	Callee	referenceToFrame . log
>1866	MemberAccess	referenceToFrame . log
>1867	Identifier	log
>1868	Identifier	referenceToFrame
>1869	Argument	referenceToFrame . log ( ) [ 4 ]
>1870	ArrayIndexing	referenceToFrame . log ( ) [ 4 ]
>1871	PrimaryExpression	4
>1872	CallExpression	referenceToFrame . log ( )
>1873	ArgumentList	 
>1874	Callee	referenceToFrame . log
>1875	MemberAccess	referenceToFrame . log
>1876	Identifier	log
>1877	Identifier	referenceToFrame
>1878	Argument	referenceToFrame . log ( ) [ 3 ]
>1879	ArrayIndexing	referenceToFrame . log ( ) [ 3 ]
>1880	PrimaryExpression	3
>1881	CallExpression	referenceToFrame . log ( )
>1882	ArgumentList	 
>1883	Callee	referenceToFrame . log
>1884	MemberAccess	referenceToFrame . log
>1885	Identifier	log
>1886	Identifier	referenceToFrame
>1887	Argument	referenceToFrame . log ( ) [ 2 ]
>1888	ArrayIndexing	referenceToFrame . log ( ) [ 2 ]
>1889	PrimaryExpression	2
>1890	CallExpression	referenceToFrame . log ( )
>1891	ArgumentList	 
>1892	Callee	referenceToFrame . log
>1893	MemberAccess	referenceToFrame . log
>1894	Identifier	log
>1895	Identifier	referenceToFrame
>1896	Argument	referenceToFrame . log ( ) [ 1 ]
>1897	ArrayIndexing	referenceToFrame . log ( ) [ 1 ]
>1898	PrimaryExpression	1
>1899	CallExpression	referenceToFrame . log ( )
>1900	ArgumentList	 
>1901	Callee	referenceToFrame . log
>1902	MemberAccess	referenceToFrame . log
>1903	Identifier	log
>1904	Identifier	referenceToFrame
>1905	Argument	referenceToFrame . log ( ) [ 0 ]
>1906	ArrayIndexing	referenceToFrame . log ( ) [ 0 ]
>1907	PrimaryExpression	0
>1908	CallExpression	referenceToFrame . log ( )
>1909	ArgumentList	 
>1910	Callee	referenceToFrame . log
>1911	MemberAccess	referenceToFrame . log
>1912	Identifier	log
>1913	Identifier	referenceToFrame
>1914	Argument	\"         p=%.4f %.4f %.4f %.4f %.4f %.4f\n\"
>1915	PrimaryExpression	\"         p=%.4f %.4f %.4f %.4f %.4f %.4f\n\"
>1916	Callee	printf
>1917	Identifier	printf
>1918	ExpressionStatement	 
>1919	CallExpression	printf ( \"(%d-%d)
>1920	ArgumentList	\"(%d-%d)
>1921	Argument	error
>1922	Identifier	error
>1923	Argument	lastErr
>1924	Identifier	lastErr
>1925	Argument	LM_lambda
>1926	Identifier	LM_lambda
>1927	Argument	sqrt ( inc . dot ( inc ) )
>1928	CallExpression	sqrt ( inc . dot ( inc ) )
>1929	ArgumentList	inc . dot ( inc )
>1930	Argument	inc . dot ( inc )
>1931	CallExpression	inc . dot ( inc )
>1932	ArgumentList	inc
>1933	Argument	inc
>1934	Identifier	inc
>1935	Callee	inc . dot
>1936	MemberAccess	inc . dot
>1937	Identifier	dot
>1938	Identifier	inc
>1939	Callee	sqrt
>1940	Identifier	sqrt
>1941	Argument	iteration
>1942	Identifier	iteration
>1943	Argument	lvl
>1944	Identifier	lvl
>1945	Argument	\"(%d-%d)
>1946	PrimaryExpression	\"(%d-%d)
>1947	Callee	printf
>1948	Identifier	printf
>1949	Condition	 
>1950	AndExpression	enablePrintDebugInfo && printTrackingIterationInfo
>1951	Identifier	printTrackingIterationInfo
>1952	Identifier	enablePrintDebugInfo
>1953	IfStatement	if ( useAffineLightningEstimation )
>1954	CompoundStatement	 
>1955	ExpressionStatement	 
>1956	AssignmentExpr	affineEstimation_b = affineEstimation_b_lastIt
>1957	Identifier	affineEstimation_b_lastIt
>1958	Identifier	affineEstimation_b
>1959	ExpressionStatement	 
>1960	AssignmentExpr	affineEstimation_a = affineEstimation_a_lastIt
>1961	Identifier	affineEstimation_a_lastIt
>1962	Identifier	affineEstimation_a
>1963	Condition	 
>1964	Identifier	useAffineLightningEstimation
>1965	ExpressionStatement	 
>1966	AssignmentExpr	referenceToFrame = new_referenceToFrame
>1967	Identifier	new_referenceToFrame
>1968	Identifier	referenceToFrame
>1969	Condition	 
>1970	RelationalExpression	error < lastErr
>1971	Identifier	lastErr
>1972	Identifier	error
>1973	ExpressionStatement	 
>1974	IncDecOp	numCalcResidualCalls [ lvl ] ++
>1975	IncDec	++
>1976	ArrayIndexing	numCalcResidualCalls [ lvl ]
>1977	Identifier	lvl
>1978	Identifier	numCalcResidualCalls
>1979	IdentifierDeclStatement	 
>1980	IdentifierDecl	error = callOptimized ( calcWeightsAndResidual , ( new_referenceToFrame ) )
>1981	AssignmentExpr	error = callOptimized ( calcWeightsAndResidual , ( new_referenceToFrame ) )
>1982	CallExpression	callOptimized ( calcWeightsAndResidual , ( new_referenceToFrame ) )
>1983	ArgumentList	calcWeightsAndResidual
>1984	Argument	new_referenceToFrame
>1985	Identifier	new_referenceToFrame
>1986	Argument	calcWeightsAndResidual
>1987	Identifier	calcWeightsAndResidual
>1988	Callee	callOptimized
>1989	Identifier	callOptimized
>1990	Identifier	error
>1991	Identifier	error
>1992	IdentifierDeclType	float
>1993	IfStatement	if ( buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl ) )
>1994	CompoundStatement	 
>1995	ReturnStatement	 
>1996	CallExpression	SE3 ( )
>1997	ArgumentList	 
>1998	Callee	SE3
>1999	Identifier	SE3
>2000	ExpressionStatement	 
>2001	AssignmentExpr	trackingWasGood = false
>2002	Identifier	false
>2003	Identifier	trackingWasGood
>2004	ExpressionStatement	 
>2005	AssignmentExpr	diverged = true
>2006	Identifier	true
>2007	Identifier	diverged
>2008	Condition	 
>2009	RelationalExpression	buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>2010	MultiplicativeExpression	MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>2011	MultiplicativeExpression	( width >> lvl ) * ( height >> lvl )
>2012	ShiftExpression	height >> lvl
>2013	Identifier	lvl
>2014	Identifier	height
>2015	ShiftExpression	width >> lvl
>2016	Identifier	lvl
>2017	Identifier	width
>2018	Identifier	MIN_GOODPERALL_PIXEL_ABSMIN
>2019	Identifier	buf_warped_size
>2020	ExpressionStatement	 
>2021	CallExpression	callOptimized ( calcResidualAndBuffers , ( reference -> posData [ lvl ] , reference -> colorAndVarData [ lvl ] , \
>2022	ArgumentList	calcResidualAndBuffers
>2023	Argument	reference -> posData [ lvl ] , reference -> colorAndVarData [ lvl ] , SE3TRACKING_MIN_LEVEL == lvl ? reference -> \
>2024	Expression	reference -> posData [ lvl ] , reference -> colorAndVarData [ lvl ] , SE3TRACKING_MIN_LEVEL == lvl ? reference -> \
>2025	Expression	reference -> colorAndVarData [ lvl ] , SE3TRACKING_MIN_LEVEL == lvl ? reference -> pointPosInXYGrid [ lvl ] 
>2026	Expression	SE3TRACKING_MIN_LEVEL == lvl ? reference -> pointPosInXYGrid [ lvl ] 
>2027	Expression	reference -> numData [ lvl ] , frame , new_referenceToFrame , lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2028	Expression	frame , new_referenceToFrame , lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2029	Expression	new_referenceToFrame , lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2030	Expression	lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2031	AndExpression	plotTracking && lvl == SE3TRACKING_MIN_LEVEL
>2032	EqualityExpression	lvl == SE3TRACKING_MIN_LEVEL
>2033	Identifier	SE3TRACKING_MIN_LEVEL
>2034	Identifier	lvl
>2035	Identifier	plotTracking
>2036	Identifier	lvl
>2037	Identifier	new_referenceToFrame
>2038	Identifier	frame
>2039	ArrayIndexing	reference -> numData [ lvl ]
>2040	Identifier	lvl
>2041	PtrMemberAccess	reference -> numData
>2042	Identifier	numData
>2043	Identifier	reference
>2044	ConditionalExpression	SE3TRACKING_MIN_LEVEL == lvl ? reference -> pointPosInXYGrid [ lvl ] 
>2045	PrimaryExpression	0
>2046	ArrayIndexing	reference -> pointPosInXYGrid [ lvl ]
>2047	Identifier	lvl
>2048	PtrMemberAccess	reference -> pointPosInXYGrid
>2049	Identifier	pointPosInXYGrid
>2050	Identifier	reference
>2051	Condition	SE3TRACKING_MIN_LEVEL == lvl
>2052	EqualityExpression	SE3TRACKING_MIN_LEVEL == lvl
>2053	Identifier	lvl
>2054	Identifier	SE3TRACKING_MIN_LEVEL
>2055	ArrayIndexing	reference -> colorAndVarData [ lvl ]
>2056	Identifier	lvl
>2057	PtrMemberAccess	reference -> colorAndVarData
>2058	Identifier	colorAndVarData
>2059	Identifier	reference
>2060	ArrayIndexing	reference -> posData [ lvl ]
>2061	Identifier	lvl
>2062	PtrMemberAccess	reference -> posData
>2063	Identifier	posData
>2064	Identifier	reference
>2065	Argument	calcResidualAndBuffers
>2066	Identifier	calcResidualAndBuffers
>2067	Callee	callOptimized
>2068	Identifier	callOptimized
>2069	IdentifierDeclStatement	 
>2070	IdentifierDecl	new_referenceToFrame = Sophus 
>2071	AssignmentExpr	new_referenceToFrame = Sophus 
>2072	MultiplicativeExpression	Sophus 
>2073	Identifier	referenceToFrame
>2074	CallExpression	Sophus 
>2075	ArgumentList	inc
>2076	Argument	inc
>2077	Identifier	inc
>2078	Callee	Sophus 
>2079	Identifier	Sophus 
>2080	Identifier	new_referenceToFrame
>2081	Identifier	new_referenceToFrame
>2082	IdentifierDeclType	Sophus 
>2083	ExpressionStatement	 
>2084	IncDecOp	incTry ++
>2085	IncDec	++
>2086	Identifier	incTry
>2087	IdentifierDeclStatement	 
>2088	IdentifierDecl	inc = A . ldlt ( ) . solve ( b )
>2089	AssignmentExpr	inc = A . ldlt ( ) . solve ( b )
>2090	CallExpression	A . ldlt ( ) . solve ( b )
>2091	ArgumentList	b
>2092	Argument	b
>2093	Identifier	b
>2094	Callee	A . ldlt ( ) . solve
>2095	MemberAccess	A . ldlt ( ) . solve
>2096	Identifier	solve
>2097	CallExpression	A . ldlt ( )
>2098	ArgumentList	 
>2099	Callee	A . ldlt
>2100	MemberAccess	A . ldlt
>2101	Identifier	ldlt
>2102	Identifier	A
>2103	Identifier	inc
>2104	Identifier	inc
>2105	IdentifierDeclType	Vector6
>2106	ForStatement	for ( int i = 0 ; i < 6 ; i ++ )
>2107	ExpressionStatement	 
>2108	AssignmentExpr	A ( i , i ) *= 1 + LM_lambda
>2109	AdditiveExpression	1 + LM_lambda
>2110	Identifier	LM_lambda
>2111	PrimaryExpression	1
>2112	CallExpression	A ( i , i )
>2113	ArgumentList	i
>2114	Argument	i
>2115	Identifier	i
>2116	Argument	i
>2117	Identifier	i
>2118	Callee	A
>2119	Identifier	A
>2120	IncDecOp	 
>2121	IncDec	++
>2122	Identifier	i
>2123	Condition	 
>2124	RelationalExpression	i < 6
>2125	PrimaryExpression	6
>2126	Identifier	i
>2127	ForInit	 
>2128	IdentifierDeclStatement	int i = 0 ;
>2129	IdentifierDecl	i = 0
>2130	AssignmentExpr	i = 0
>2131	PrimaryExpression	0
>2132	Identifier	i
>2133	Identifier	i
>2134	IdentifierDeclType	int
>2135	IdentifierDeclStatement	 
>2136	IdentifierDecl	A = ls . A
>2137	AssignmentExpr	A = ls . A
>2138	MemberAccess	ls . A
>2139	Identifier	A
>2140	Identifier	ls
>2141	Identifier	A
>2142	Identifier	A
>2143	IdentifierDeclType	Matrix6x6
>2144	IdentifierDeclStatement	 
>2145	IdentifierDecl	b = - ls . b
>2146	AssignmentExpr	b = - ls . b
>2147	UnaryOp	- ls . b
>2148	MemberAccess	ls . b
>2149	Identifier	b
>2150	Identifier	ls
>2151	UnaryOperator	-
>2152	Identifier	b
>2153	Identifier	b
>2154	IdentifierDeclType	Vector6
>2155	Condition	 
>2156	Identifier	true
>2157	IdentifierDeclStatement	 
>2158	IdentifierDecl	incTry = 0
>2159	AssignmentExpr	incTry = 0
>2160	PrimaryExpression	0
>2161	Identifier	incTry
>2162	Identifier	incTry
>2163	IdentifierDeclType	int
>2164	ExpressionStatement	 
>2165	AssignmentExpr	iterationNumber = iteration
>2166	Identifier	iteration
>2167	Identifier	iterationNumber
>2168	ExpressionStatement	 
>2169	IncDecOp	numCalcWarpUpdateCalls [ lvl ] ++
>2170	IncDec	++
>2171	ArrayIndexing	numCalcWarpUpdateCalls [ lvl ]
>2172	Identifier	lvl
>2173	Identifier	numCalcWarpUpdateCalls
>2174	ExpressionStatement	 
>2175	CallExpression	callOptimized ( calculateWarpUpdate , ( ls ) )
>2176	ArgumentList	calculateWarpUpdate
>2177	Argument	ls
>2178	Identifier	ls
>2179	Argument	calculateWarpUpdate
>2180	Identifier	calculateWarpUpdate
>2181	Callee	callOptimized
>2182	Identifier	callOptimized
>2183	IncDecOp	 
>2184	IncDec	++
>2185	Identifier	iteration
>2186	Condition	 
>2187	RelationalExpression	iteration < settings . maxItsPerLvl [ lvl ]
>2188	ArrayIndexing	settings . maxItsPerLvl [ lvl ]
>2189	Identifier	lvl
>2190	MemberAccess	settings . maxItsPerLvl
>2191	Identifier	maxItsPerLvl
>2192	Identifier	settings
>2193	Identifier	iteration
>2194	ForInit	 
>2195	IdentifierDeclStatement	int iteration = 0 ;
>2196	IdentifierDecl	iteration = 0
>2197	AssignmentExpr	iteration = 0
>2198	PrimaryExpression	0
>2199	Identifier	iteration
>2200	Identifier	iteration
>2201	IdentifierDeclType	int
>2202	IdentifierDeclStatement	 
>2203	IdentifierDecl	LM_lambda = settings . lambdaInitial [ lvl ]
>2204	AssignmentExpr	LM_lambda = settings . lambdaInitial [ lvl ]
>2205	ArrayIndexing	settings . lambdaInitial [ lvl ]
>2206	Identifier	lvl
>2207	MemberAccess	settings . lambdaInitial
>2208	Identifier	lambdaInitial
>2209	Identifier	settings
>2210	Identifier	LM_lambda
>2211	Identifier	LM_lambda
>2212	IdentifierDeclType	float
>2213	ExpressionStatement	 
>2214	IncDecOp	numCalcResidualCalls [ lvl ] ++
>2215	IncDec	++
>2216	ArrayIndexing	numCalcResidualCalls [ lvl ]
>2217	Identifier	lvl
>2218	Identifier	numCalcResidualCalls
>2219	IdentifierDeclStatement	 
>2220	IdentifierDecl	lastErr = callOptimized ( calcWeightsAndResidual , ( referenceToFrame ) )
>2221	AssignmentExpr	lastErr = callOptimized ( calcWeightsAndResidual , ( referenceToFrame ) )
>2222	CallExpression	callOptimized ( calcWeightsAndResidual , ( referenceToFrame ) )
>2223	ArgumentList	calcWeightsAndResidual
>2224	Argument	referenceToFrame
>2225	Identifier	referenceToFrame
>2226	Argument	calcWeightsAndResidual
>2227	Identifier	calcWeightsAndResidual
>2228	Callee	callOptimized
>2229	Identifier	callOptimized
>2230	Identifier	lastErr
>2231	Identifier	lastErr
>2232	IdentifierDeclType	float
>2233	IfStatement	if ( useAffineLightningEstimation )
>2234	CompoundStatement	 
>2235	ExpressionStatement	 
>2236	AssignmentExpr	affineEstimation_b = affineEstimation_b_lastIt
>2237	Identifier	affineEstimation_b_lastIt
>2238	Identifier	affineEstimation_b
>2239	ExpressionStatement	 
>2240	AssignmentExpr	affineEstimation_a = affineEstimation_a_lastIt
>2241	Identifier	affineEstimation_a_lastIt
>2242	Identifier	affineEstimation_a
>2243	Condition	 
>2244	Identifier	useAffineLightningEstimation
>2245	IfStatement	if ( buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl ) )
>2246	CompoundStatement	 
>2247	ReturnStatement	 
>2248	CallExpression	SE3 ( )
>2249	ArgumentList	 
>2250	Callee	SE3
>2251	Identifier	SE3
>2252	ExpressionStatement	 
>2253	AssignmentExpr	trackingWasGood = false
>2254	Identifier	false
>2255	Identifier	trackingWasGood
>2256	ExpressionStatement	 
>2257	AssignmentExpr	diverged = true
>2258	Identifier	true
>2259	Identifier	diverged
>2260	Condition	 
>2261	RelationalExpression	buf_warped_size < MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>2262	MultiplicativeExpression	MIN_GOODPERALL_PIXEL_ABSMIN * ( width >> lvl ) * ( height >> lvl )
>2263	MultiplicativeExpression	( width >> lvl ) * ( height >> lvl )
>2264	ShiftExpression	height >> lvl
>2265	Identifier	lvl
>2266	Identifier	height
>2267	ShiftExpression	width >> lvl
>2268	Identifier	lvl
>2269	Identifier	width
>2270	Identifier	MIN_GOODPERALL_PIXEL_ABSMIN
>2271	Identifier	buf_warped_size
>2272	ExpressionStatement	 
>2273	CallExpression	callOptimized ( calcResidualAndBuffers , ( reference -> posData [ lvl ] , reference -> colorAndVarData [ lvl ] , \
>2274	ArgumentList	calcResidualAndBuffers
>2275	Argument	reference -> posData [ lvl ] , reference -> colorAndVarData [ lvl ] , SE3TRACKING_MIN_LEVEL == lvl ? reference -> \
>2276	Expression	reference -> posData [ lvl ] , reference -> colorAndVarData [ lvl ] , SE3TRACKING_MIN_LEVEL == lvl ? reference -> \
>2277	Expression	reference -> colorAndVarData [ lvl ] , SE3TRACKING_MIN_LEVEL == lvl ? reference -> pointPosInXYGrid [ lvl ] 
>2278	Expression	SE3TRACKING_MIN_LEVEL == lvl ? reference -> pointPosInXYGrid [ lvl ] 
>2279	Expression	reference -> numData [ lvl ] , frame , referenceToFrame , lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2280	Expression	frame , referenceToFrame , lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2281	Expression	referenceToFrame , lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2282	Expression	lvl , ( plotTracking && lvl == SE3TRACKING_MIN_LEVEL )
>2283	AndExpression	plotTracking && lvl == SE3TRACKING_MIN_LEVEL
>2284	EqualityExpression	lvl == SE3TRACKING_MIN_LEVEL
>2285	Identifier	SE3TRACKING_MIN_LEVEL
>2286	Identifier	lvl
>2287	Identifier	plotTracking
>2288	Identifier	lvl
>2289	Identifier	referenceToFrame
>2290	Identifier	frame
>2291	ArrayIndexing	reference -> numData [ lvl ]
>2292	Identifier	lvl
>2293	PtrMemberAccess	reference -> numData
>2294	Identifier	numData
>2295	Identifier	reference
>2296	ConditionalExpression	SE3TRACKING_MIN_LEVEL == lvl ? reference -> pointPosInXYGrid [ lvl ] 
>2297	PrimaryExpression	0
>2298	ArrayIndexing	reference -> pointPosInXYGrid [ lvl ]
>2299	Identifier	lvl
>2300	PtrMemberAccess	reference -> pointPosInXYGrid
>2301	Identifier	pointPosInXYGrid
>2302	Identifier	reference
>2303	Condition	SE3TRACKING_MIN_LEVEL == lvl
>2304	EqualityExpression	SE3TRACKING_MIN_LEVEL == lvl
>2305	Identifier	lvl
>2306	Identifier	SE3TRACKING_MIN_LEVEL
>2307	ArrayIndexing	reference -> colorAndVarData [ lvl ]
>2308	Identifier	lvl
>2309	PtrMemberAccess	reference -> colorAndVarData
>2310	Identifier	colorAndVarData
>2311	Identifier	reference
>2312	ArrayIndexing	reference -> posData [ lvl ]
>2313	Identifier	lvl
>2314	PtrMemberAccess	reference -> posData
>2315	Identifier	posData
>2316	Identifier	reference
>2317	Argument	calcResidualAndBuffers
>2318	Identifier	calcResidualAndBuffers
>2319	Callee	callOptimized
>2320	Identifier	callOptimized
>2321	ExpressionStatement	 
>2322	CallExpression	reference -> makePointCloud ( lvl )
>2323	ArgumentList	lvl
>2324	Argument	lvl
>2325	Identifier	lvl
>2326	Callee	reference -> makePointCloud
>2327	PtrMemberAccess	reference -> makePointCloud
>2328	Identifier	makePointCloud
>2329	Identifier	reference
>2330	ExpressionStatement	 
>2331	AssignmentExpr	numCalcWarpUpdateCalls [ lvl ] = 0
>2332	PrimaryExpression	0
>2333	ArrayIndexing	numCalcWarpUpdateCalls [ lvl ]
>2334	Identifier	lvl
>2335	Identifier	numCalcWarpUpdateCalls
>2336	ExpressionStatement	 
>2337	AssignmentExpr	numCalcResidualCalls [ lvl ] = 0
>2338	PrimaryExpression	0
>2339	ArrayIndexing	numCalcResidualCalls [ lvl ]
>2340	Identifier	lvl
>2341	Identifier	numCalcResidualCalls
>2342	IncDecOp	 
>2343	IncDec	--
>2344	Identifier	lvl
>2345	Condition	 
>2346	RelationalExpression	lvl >= SE3TRACKING_MIN_LEVEL
>2347	Identifier	SE3TRACKING_MIN_LEVEL
>2348	Identifier	lvl
>2349	ForInit	 
>2350	IdentifierDeclStatement	int lvl = SE3TRACKING_MAX_LEVEL - 1 ;
>2351	IdentifierDecl	lvl = SE3TRACKING_MAX_LEVEL - 1
>2352	AssignmentExpr	lvl = SE3TRACKING_MAX_LEVEL - 1
>2353	AdditiveExpression	SE3TRACKING_MAX_LEVEL - 1
>2354	PrimaryExpression	1
>2355	Identifier	SE3TRACKING_MAX_LEVEL
>2356	Identifier	lvl
>2357	Identifier	lvl
>2358	IdentifierDeclType	int
>2359	IdentifierDeclStatement	 
>2360	IdentifierDecl	last_residual = 0
>2361	AssignmentExpr	last_residual = 0
>2362	PrimaryExpression	0
>2363	Identifier	last_residual
>2364	Identifier	last_residual
>2365	IdentifierDeclType	float
>2366	IdentifierDeclStatement	 
>2367	IdentifierDecl	numCalcWarpUpdateCalls [ PYRAMID_LEVELS ]
>2368	Identifier	PYRAMID_LEVELS
>2369	Identifier	numCalcWarpUpdateCalls
>2370	IdentifierDeclType	int [ PYRAMID_LEVELS ]
>2371	IdentifierDeclStatement	 
>2372	IdentifierDecl	numCalcResidualCalls [ PYRAMID_LEVELS ]
>2373	Identifier	PYRAMID_LEVELS
>2374	Identifier	numCalcResidualCalls
>2375	IdentifierDeclType	int [ PYRAMID_LEVELS ]
>2376	IdentifierDeclStatement	 
>2377	IdentifierDecl	ls
>2378	Identifier	ls
>2379	IdentifierDeclType	LGS6
>2380	ExpressionStatement	 
>2381	Statement	 
>2382	Statement	 
>2383	Statement	 
>2384	Statement	 
>2385	Statement	 
>2386	Statement	 
>2387	Statement	 
>2388	Statement	 
>2389	Statement	 
>2390	Statement	 
>2391	Statement	 
>2392	Statement	 
>2393	Statement	 
>2394	Statement	 
>2395	Statement	 
>2396	Statement	 
>2397	Statement	 
>2398	IfStatement	if ( plotTrackingIterationInfo )
>2399	CompoundStatement	 
>2400	ForStatement	for ( int row = 0 ; row < height ; ++ row )
>2401	ForStatement	for ( int col = 0 ; col < width ; ++ col )
>2402	ExpressionStatement	 
>2403	CallExpression	setPixelInCvMat ( & debugImageSecondFrame , getGrayCvPixel ( frameImage [ col + row * width ] ) , col , row , 1 )
>2404	ArgumentList	& debugImageSecondFrame
>2405	Argument	1
>2406	PrimaryExpression	1
>2407	Argument	row
>2408	Identifier	row
>2409	Argument	col
>2410	Identifier	col
>2411	Argument	getGrayCvPixel ( frameImage [ col + row * width ] )
>2412	CallExpression	getGrayCvPixel ( frameImage [ col + row * width ] )
>2413	ArgumentList	frameImage [ col + row * width ]
>2414	Argument	frameImage [ col + row * width ]
>2415	ArrayIndexing	frameImage [ col + row * width ]
>2416	AdditiveExpression	col + row * width
>2417	MultiplicativeExpression	row * width
>2418	Identifier	width
>2419	Identifier	row
>2420	Identifier	col
>2421	Identifier	frameImage
>2422	Callee	getGrayCvPixel
>2423	Identifier	getGrayCvPixel
>2424	Argument	& debugImageSecondFrame
>2425	UnaryOp	& debugImageSecondFrame
>2426	Identifier	debugImageSecondFrame
>2427	UnaryOperator	&
>2428	Callee	setPixelInCvMat
>2429	Identifier	setPixelInCvMat
>2430	UnaryExpression	 
>2431	Identifier	col
>2432	IncDec	++
>2433	Condition	 
>2434	RelationalExpression	col < width
>2435	Identifier	width
>2436	Identifier	col
>2437	ForInit	 
>2438	IdentifierDeclStatement	int col = 0 ;
>2439	IdentifierDecl	col = 0
>2440	AssignmentExpr	col = 0
>2441	PrimaryExpression	0
>2442	Identifier	col
>2443	Identifier	col
>2444	IdentifierDeclType	int
>2445	UnaryExpression	 
>2446	Identifier	row
>2447	IncDec	++
>2448	Condition	 
>2449	RelationalExpression	row < height
>2450	Identifier	height
>2451	Identifier	row
>2452	ForInit	 
>2453	IdentifierDeclStatement	int row = 0 ;
>2454	IdentifierDecl	row = 0
>2455	AssignmentExpr	row = 0
>2456	PrimaryExpression	0
>2457	Identifier	row
>2458	Identifier	row
>2459	IdentifierDeclType	int
>2460	IdentifierDeclStatement	 
>2461	IdentifierDecl	* frameImage = frame -> image ( )
>2462	AssignmentExpr	* frameImage = frame -> image ( )
>2463	CallExpression	frame -> image ( )
>2464	ArgumentList	 
>2465	Callee	frame -> image
>2466	PtrMemberAccess	frame -> image
>2467	Identifier	image
>2468	Identifier	frame
>2469	Identifier	frameImage
>2470	Identifier	frameImage
>2471	IdentifierDeclType	const float *
>2472	Condition	 
>2473	Identifier	plotTrackingIterationInfo
>2474	IfStatement	if ( saveAllTrackingStages )
>2475	CompoundStatement	 
>2476	ExpressionStatement	 
>2477	AssignmentExpr	saveAllTrackingStagesInternal = true
>2478	Identifier	true
>2479	Identifier	saveAllTrackingStagesInternal
>2480	ExpressionStatement	 
>2481	AssignmentExpr	saveAllTrackingStages = false
>2482	Identifier	false
>2483	Identifier	saveAllTrackingStages
>2484	Condition	 
>2485	Identifier	saveAllTrackingStages
>2486	ExpressionStatement	 
>2487	AssignmentExpr	affineEstimation_b = 0
>2488	PrimaryExpression	0
>2489	Identifier	affineEstimation_b
>2490	ExpressionStatement	 
>2491	AssignmentExpr	affineEstimation_a = 1
>2492	PrimaryExpression	1
>2493	Identifier	affineEstimation_a
>2494	ExpressionStatement	 
>2495	AssignmentExpr	trackingWasGood = true
>2496	Identifier	true
>2497	Identifier	trackingWasGood
>2498	ExpressionStatement	 
>2499	AssignmentExpr	diverged = false
>2500	Identifier	false
>2501	Identifier	diverged
>2502	IdentifierDeclStatement	 
>2503	IdentifierDecl	lock = frame -> getActiveLock ( )
>2504	AssignmentExpr	lock = frame -> getActiveLock ( )
>2505	CallExpression	frame -> getActiveLock ( )
>2506	ArgumentList	 
>2507	Callee	frame -> getActiveLock
>2508	PtrMemberAccess	frame -> getActiveLock
>2509	Identifier	getActiveLock
>2510	Identifier	frame
>2511	Identifier	lock
>2512	Identifier	lock
>2513	IdentifierDeclType	boost 
>2635	FunctionDef	SE3Tracker 
>2636	ParameterList	const Sophus 
>2637	Parameter	 
>2638	Identifier	referenceToFrame
>2639	ParameterType	const Sophus 
>2640	ReturnType	float
>2641	CompoundStatement	 
>2642	ReturnStatement	 
>2643	MultiplicativeExpression	sumRes / ( ( buf_warped_size >> 2 ) << 2 )
>2644	ShiftExpression	( buf_warped_size >> 2 ) << 2
>2645	PrimaryExpression	2
>2646	ShiftExpression	buf_warped_size >> 2
>2647	PrimaryExpression	2
>2648	Identifier	buf_warped_size
>2649	Identifier	sumRes
>2650	ExpressionStatement	 
>2651	AssignmentExpr	sumRes = SSEE ( sumResP , 0 ) + SSEE ( sumResP , 1 ) + SSEE ( sumResP , 2 ) + SSEE ( sumResP , 3 )
>2652	AdditiveExpression	SSEE ( sumResP , 0 ) + SSEE ( sumResP , 1 ) + SSEE ( sumResP , 2 ) + SSEE ( sumResP , 3 )
>2653	AdditiveExpression	SSEE ( sumResP , 1 ) + SSEE ( sumResP , 2 ) + SSEE ( sumResP , 3 )
>2654	AdditiveExpression	SSEE ( sumResP , 2 ) + SSEE ( sumResP , 3 )
>2655	CallExpression	SSEE ( sumResP , 3 )
>2656	ArgumentList	sumResP
>2657	Argument	3
>2658	PrimaryExpression	3
>2659	Argument	sumResP
>2660	Identifier	sumResP
>2661	Callee	SSEE
>2662	Identifier	SSEE
>2663	CallExpression	SSEE ( sumResP , 2 )
>2664	ArgumentList	sumResP
>2665	Argument	2
>2666	PrimaryExpression	2
>2667	Argument	sumResP
>2668	Identifier	sumResP
>2669	Callee	SSEE
>2670	Identifier	SSEE
>2671	CallExpression	SSEE ( sumResP , 1 )
>2672	ArgumentList	sumResP
>2673	Argument	1
>2674	PrimaryExpression	1
>2675	Argument	sumResP
>2676	Identifier	sumResP
>2677	Callee	SSEE
>2678	Identifier	SSEE
>2679	CallExpression	SSEE ( sumResP , 0 )
>2680	ArgumentList	sumResP
>2681	Argument	0
>2682	PrimaryExpression	0
>2683	Argument	sumResP
>2684	Identifier	sumResP
>2685	Callee	SSEE
>2686	Identifier	SSEE
>2687	Identifier	sumRes
>2688	ForStatement	for ( int i = 0 ; i < buf_warped_size - 3 ; i += 4 )
>2689	CompoundStatement	 
>2690	ExpressionStatement	 
>2691	CallExpression	_mm_store_ps ( buf_weight_p + i , _mm_mul_ps ( whs , w_ps ) )
>2692	ArgumentList	buf_weight_p + i
>2693	Argument	_mm_mul_ps ( whs , w_ps )
>2694	CallExpression	_mm_mul_ps ( whs , w_ps )
>2695	ArgumentList	whs
>2696	Argument	w_ps
>2697	Identifier	w_ps
>2698	Argument	whs
>2699	Identifier	whs
>2700	Callee	_mm_mul_ps
>2701	Identifier	_mm_mul_ps
>2702	Argument	buf_weight_p + i
>2703	AdditiveExpression	buf_weight_p + i
>2704	Identifier	i
>2705	Identifier	buf_weight_p
>2706	Callee	_mm_store_ps
>2707	Identifier	_mm_store_ps
>2708	IfStatement	if ( i + 3 < buf_warped_size )
>2709	ExpressionStatement	 
>2710	AssignmentExpr	sumResP = _mm_add_ps ( sumResP , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) ) )
>2711	CallExpression	_mm_add_ps ( sumResP , _mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) ) )
>2712	ArgumentList	sumResP
>2713	Argument	_mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) )
>2714	CallExpression	_mm_mul_ps ( whs , _mm_mul_ps ( weighted_rps , weighted_rps ) )
>2715	ArgumentList	whs
>2716	Argument	_mm_mul_ps ( weighted_rps , weighted_rps )
>2717	CallExpression	_mm_mul_ps ( weighted_rps , weighted_rps )
>2718	ArgumentList	weighted_rps
>2719	Argument	weighted_rps
>2720	Identifier	weighted_rps
>2721	Argument	weighted_rps
>2722	Identifier	weighted_rps
>2723	Callee	_mm_mul_ps
>2724	Identifier	_mm_mul_ps
>2725	Argument	whs
>2726	Identifier	whs
>2727	Callee	_mm_mul_ps
>2728	Identifier	_mm_mul_ps
>2729	Argument	sumResP
>2730	Identifier	sumResP
>2731	Callee	_mm_add_ps
>2732	Identifier	_mm_add_ps
>2733	Identifier	sumResP
>2734	Condition	 
>2735	RelationalExpression	i + 3 < buf_warped_size
>2736	Identifier	buf_warped_size
>2737	AdditiveExpression	i + 3
>2738	PrimaryExpression	3
>2739	Identifier	i
>2740	ExpressionStatement	 
>2741	AssignmentExpr	whs = _mm_or_ps ( _mm_and_ps ( whs , ones ) , _mm_andnot_ps ( whs , _mm_mul_ps ( huber_res_ponlys , _\
>2742	CallExpression	_mm_or_ps ( _mm_and_ps ( whs , ones ) , _mm_andnot_ps ( whs , _mm_mul_ps ( huber_res_ponlys , _mm_rcp_ps ( weighted_\
>2743	ArgumentList	_mm_and_ps ( whs , ones )
>2744	Argument	_mm_andnot_ps ( whs , _mm_mul_ps ( huber_res_ponlys , _mm_rcp_ps ( weighted_rps ) ) )
>2745	CallExpression	_mm_andnot_ps ( whs , _mm_mul_ps ( huber_res_ponlys , _mm_rcp_ps ( weighted_rps ) ) )
>2746	ArgumentList	whs
>2747	Argument	_mm_mul_ps ( huber_res_ponlys , _mm_rcp_ps ( weighted_rps ) )
>2748	CallExpression	_mm_mul_ps ( huber_res_ponlys , _mm_rcp_ps ( weighted_rps ) )
>2749	ArgumentList	huber_res_ponlys
>2750	Argument	_mm_rcp_ps ( weighted_rps )
>2751	CallExpression	_mm_rcp_ps ( weighted_rps )
>2752	ArgumentList	weighted_rps
>2753	Argument	weighted_rps
>2754	Identifier	weighted_rps
>2755	Callee	_mm_rcp_ps
>2756	Identifier	_mm_rcp_ps
>2757	Argument	huber_res_ponlys
>2758	Identifier	huber_res_ponlys
>2759	Callee	_mm_mul_ps
>2760	Identifier	_mm_mul_ps
>2761	Argument	whs
>2762	Identifier	whs
>2763	Callee	_mm_andnot_ps
>2764	Identifier	_mm_andnot_ps
>2765	Argument	_mm_and_ps ( whs , ones )
>2766	CallExpression	_mm_and_ps ( whs , ones )
>2767	ArgumentList	whs
>2768	Argument	ones
>2769	Identifier	ones
>2770	Argument	whs
>2771	Identifier	whs
>2772	Callee	_mm_and_ps
>2773	Identifier	_mm_and_ps
>2774	Callee	_mm_or_ps
>2775	Identifier	_mm_or_ps
>2776	Identifier	whs
>2777	IdentifierDeclStatement	 
>2778	IdentifierDecl	whs = _mm_cmplt_ps ( weighted_rps , huber_res_ponlys )
>2779	AssignmentExpr	whs = _mm_cmplt_ps ( weighted_rps , huber_res_ponlys )
>2780	CallExpression	_mm_cmplt_ps ( weighted_rps , huber_res_ponlys )
>2781	ArgumentList	weighted_rps
>2782	Argument	huber_res_ponlys
>2783	Identifier	huber_res_ponlys
>2784	Argument	weighted_rps
>2785	Identifier	weighted_rps
>2786	Callee	_mm_cmplt_ps
>2787	Identifier	_mm_cmplt_ps
>2788	Identifier	whs
>2789	Identifier	whs
>2790	IdentifierDeclType	__m128
>2791	ExpressionStatement	 
>2792	AssignmentExpr	weighted_rps = _mm_max_ps ( weighted_rps , _mm_sub_ps ( zeros , weighted_rps ) )
>2793	CallExpression	_mm_max_ps ( weighted_rps , _mm_sub_ps ( zeros , weighted_rps ) )
>2794	ArgumentList	weighted_rps
>2795	Argument	_mm_sub_ps ( zeros , weighted_rps )
>2796	CallExpression	_mm_sub_ps ( zeros , weighted_rps )
>2797	ArgumentList	zeros
>2798	Argument	weighted_rps
>2799	Identifier	weighted_rps
>2800	Argument	zeros
>2801	Identifier	zeros
>2802	Callee	_mm_sub_ps
>2803	Identifier	_mm_sub_ps
>2804	Argument	weighted_rps
>2805	Identifier	weighted_rps
>2806	Callee	_mm_max_ps
>2807	Identifier	_mm_max_ps
>2808	Identifier	weighted_rps
>2809	IdentifierDeclStatement	 
>2810	IdentifierDecl	weighted_rps = _mm_mul_ps ( _mm_load_ps ( buf_warped_residual + i ) , _mm_sqrt_ps ( w_ps ) )
>2811	AssignmentExpr	weighted_rps = _mm_mul_ps ( _mm_load_ps ( buf_warped_residual + i ) , _mm_sqrt_ps ( w_ps ) )
>2812	CallExpression	_mm_mul_ps ( _mm_load_ps ( buf_warped_residual + i ) , _mm_sqrt_ps ( w_ps ) )
>2813	ArgumentList	_mm_load_ps ( buf_warped_residual + i )
>2814	Argument	_mm_sqrt_ps ( w_ps )
>2815	CallExpression	_mm_sqrt_ps ( w_ps )
>2816	ArgumentList	w_ps
>2817	Argument	w_ps
>2818	Identifier	w_ps
>2819	Callee	_mm_sqrt_ps
>2820	Identifier	_mm_sqrt_ps
>2821	Argument	_mm_load_ps ( buf_warped_residual + i )
>2822	CallExpression	_mm_load_ps ( buf_warped_residual + i )
>2823	ArgumentList	buf_warped_residual + i
>2824	Argument	buf_warped_residual + i
>2825	AdditiveExpression	buf_warped_residual + i
>2826	Identifier	i
>2827	Identifier	buf_warped_residual
>2828	Callee	_mm_load_ps
>2829	Identifier	_mm_load_ps
>2830	Callee	_mm_mul_ps
>2831	Identifier	_mm_mul_ps
>2832	Identifier	weighted_rps
>2833	Identifier	weighted_rps
>2834	IdentifierDeclType	__m128
>2835	IdentifierDeclStatement	 
>2836	IdentifierDecl	w_ps = _mm_rcp_ps ( _mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _\
>2837	AssignmentExpr	w_ps = _mm_rcp_ps ( _mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( \
>2838	CallExpression	_mm_rcp_ps ( _mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_\
>2839	ArgumentList	_mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_\
>2840	Argument	_mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_\
>2841	CallExpression	_mm_add_ps ( sigma_i2s , _mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_\
>2842	ArgumentList	sigma_i2s
>2843	Argument	_mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) ) )
>2844	CallExpression	_mm_mul_ps ( drpdds , _mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) ) )
>2845	ArgumentList	drpdds
>2846	Argument	_mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) )
>2847	CallExpression	_mm_mul_ps ( drpdds , _mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) ) )
>2848	ArgumentList	drpdds
>2849	Argument	_mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) )
>2850	CallExpression	_mm_mul_ps ( depthVarFacs , _mm_load_ps ( buf_idepthVar + i ) )
>2851	ArgumentList	depthVarFacs
>2852	Argument	_mm_load_ps ( buf_idepthVar + i )
>2853	CallExpression	_mm_load_ps ( buf_idepthVar + i )
>2854	ArgumentList	buf_idepthVar + i
>2855	Argument	buf_idepthVar + i
>2856	AdditiveExpression	buf_idepthVar + i
>2857	Identifier	i
>2858	Identifier	buf_idepthVar
>2859	Callee	_mm_load_ps
>2860	Identifier	_mm_load_ps
>2861	Argument	depthVarFacs
>2862	Identifier	depthVarFacs
>2863	Callee	_mm_mul_ps
>2864	Identifier	_mm_mul_ps
>2865	Argument	drpdds
>2866	Identifier	drpdds
>2867	Callee	_mm_mul_ps
>2868	Identifier	_mm_mul_ps
>2869	Argument	drpdds
>2870	Identifier	drpdds
>2871	Callee	_mm_mul_ps
>2872	Identifier	_mm_mul_ps
>2873	Argument	sigma_i2s
>2874	Identifier	sigma_i2s
>2875	Callee	_mm_add_ps
>2876	Identifier	_mm_add_ps
>2877	Callee	_mm_rcp_ps
>2878	Identifier	_mm_rcp_ps
>2879	Identifier	w_ps
>2880	Identifier	w_ps
>2881	IdentifierDeclType	__m128
>2882	IdentifierDeclStatement	 
>2883	IdentifierDecl	drpdds = _mm_add_ps ( _mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) ) , _mm_mul_ps ( g1s , _mm_load_ps ( \
>2884	AssignmentExpr	drpdds = _mm_add_ps ( _mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) ) , _mm_mul_ps ( g1s , _mm_\
>2885	CallExpression	_mm_add_ps ( _mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) ) , _mm_mul_ps ( g1s , _mm_load_ps ( buf_warped_\
>2886	ArgumentList	_mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) )
>2887	Argument	_mm_mul_ps ( g1s , _mm_load_ps ( buf_warped_dy + i ) )
>2888	CallExpression	_mm_mul_ps ( g1s , _mm_load_ps ( buf_warped_dy + i ) )
>2889	ArgumentList	g1s
>2890	Argument	_mm_load_ps ( buf_warped_dy + i )
>2891	CallExpression	_mm_load_ps ( buf_warped_dy + i )
>2892	ArgumentList	buf_warped_dy + i
>2893	Argument	buf_warped_dy + i
>2894	AdditiveExpression	buf_warped_dy + i
>2895	Identifier	i
>2896	Identifier	buf_warped_dy
>2897	Callee	_mm_load_ps
>2898	Identifier	_mm_load_ps
>2899	Argument	g1s
>2900	Identifier	g1s
>2901	Callee	_mm_mul_ps
>2902	Identifier	_mm_mul_ps
>2903	Argument	_mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) )
>2904	CallExpression	_mm_mul_ps ( g0s , _mm_load_ps ( buf_warped_dx + i ) )
>2905	ArgumentList	g0s
>2906	Argument	_mm_load_ps ( buf_warped_dx + i )
>2907	CallExpression	_mm_load_ps ( buf_warped_dx + i )
>2908	ArgumentList	buf_warped_dx + i
>2909	Argument	buf_warped_dx + i
>2910	AdditiveExpression	buf_warped_dx + i
>2911	Identifier	i
>2912	Identifier	buf_warped_dx
>2913	Callee	_mm_load_ps
>2914	Identifier	_mm_load_ps
>2915	Argument	g0s
>2916	Identifier	g0s
>2917	Callee	_mm_mul_ps
>2918	Identifier	_mm_mul_ps
>2919	Callee	_mm_add_ps
>2920	Identifier	_mm_add_ps
>2921	Identifier	drpdds
>2922	Identifier	drpdds
>2923	IdentifierDeclType	__m128
>2924	ExpressionStatement	 
>2925	AssignmentExpr	g1s = _mm_mul_ps ( g1s , pz2ds )
>2926	CallExpression	_mm_mul_ps ( g1s , pz2ds )
>2927	ArgumentList	g1s
>2928	Argument	pz2ds
>2929	Identifier	pz2ds
>2930	Argument	g1s
>2931	Identifier	g1s
>2932	Callee	_mm_mul_ps
>2933	Identifier	_mm_mul_ps
>2934	Identifier	g1s
>2935	IdentifierDeclStatement	 
>2936	IdentifierDecl	g1s = _mm_sub_ps ( _mm_mul_ps ( pzs , tys ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs ) )
>2937	AssignmentExpr	g1s = _mm_sub_ps ( _mm_mul_ps ( pzs , tys ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs ) )
>2938	CallExpression	_mm_sub_ps ( _mm_mul_ps ( pzs , tys ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs ) )
>2939	ArgumentList	_mm_mul_ps ( pzs , tys )
>2940	Argument	_mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs )
>2941	CallExpression	_mm_mul_ps ( _mm_load_ps ( buf_warped_y + i ) , tzs )
>2942	ArgumentList	_mm_load_ps ( buf_warped_y + i )
>2943	Argument	tzs
>2944	Identifier	tzs
>2945	Argument	_mm_load_ps ( buf_warped_y + i )
>2946	CallExpression	_mm_load_ps ( buf_warped_y + i )
>2947	ArgumentList	buf_warped_y + i
>2948	Argument	buf_warped_y + i
>2949	AdditiveExpression	buf_warped_y + i
>2950	Identifier	i
>2951	Identifier	buf_warped_y
>2952	Callee	_mm_load_ps
>2953	Identifier	_mm_load_ps
>2954	Callee	_mm_mul_ps
>2955	Identifier	_mm_mul_ps
>2956	Argument	_mm_mul_ps ( pzs , tys )
>2957	CallExpression	_mm_mul_ps ( pzs , tys )
>2958	ArgumentList	pzs
>2959	Argument	tys
>2960	Identifier	tys
>2961	Argument	pzs
>2962	Identifier	pzs
>2963	Callee	_mm_mul_ps
>2964	Identifier	_mm_mul_ps
>2965	Callee	_mm_sub_ps
>2966	Identifier	_mm_sub_ps
>2967	Identifier	g1s
>2968	Identifier	g1s
>2969	IdentifierDeclType	__m128
>2970	ExpressionStatement	 
>2971	AssignmentExpr	g0s = _mm_mul_ps ( g0s , pz2ds )
>2972	CallExpression	_mm_mul_ps ( g0s , pz2ds )
>2973	ArgumentList	g0s
>2974	Argument	pz2ds
>2975	Identifier	pz2ds
>2976	Argument	g0s
>2977	Identifier	g0s
>2978	Callee	_mm_mul_ps
>2979	Identifier	_mm_mul_ps
>2980	Identifier	g0s
>2981	IdentifierDeclStatement	 
>2982	IdentifierDecl	g0s = _mm_sub_ps ( _mm_mul_ps ( pzs , txs ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs ) )
>2983	AssignmentExpr	g0s = _mm_sub_ps ( _mm_mul_ps ( pzs , txs ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs ) )
>2984	CallExpression	_mm_sub_ps ( _mm_mul_ps ( pzs , txs ) , _mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs ) )
>2985	ArgumentList	_mm_mul_ps ( pzs , txs )
>2986	Argument	_mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs )
>2987	CallExpression	_mm_mul_ps ( _mm_load_ps ( buf_warped_x + i ) , tzs )
>2988	ArgumentList	_mm_load_ps ( buf_warped_x + i )
>2989	Argument	tzs
>2990	Identifier	tzs
>2991	Argument	_mm_load_ps ( buf_warped_x + i )
>2992	CallExpression	_mm_load_ps ( buf_warped_x + i )
>2993	ArgumentList	buf_warped_x + i
>2994	Argument	buf_warped_x + i
>2995	AdditiveExpression	buf_warped_x + i
>2996	Identifier	i
>2997	Identifier	buf_warped_x
>2998	Callee	_mm_load_ps
>2999	Identifier	_mm_load_ps
>3000	Callee	_mm_mul_ps
>3001	Identifier	_mm_mul_ps
>3002	Argument	_mm_mul_ps ( pzs , txs )
>3003	CallExpression	_mm_mul_ps ( pzs , txs )
>3004	ArgumentList	pzs
>3005	Argument	txs
>3006	Identifier	txs
>3007	Argument	pzs
>3008	Identifier	pzs
>3009	Callee	_mm_mul_ps
>3010	Identifier	_mm_mul_ps
>3011	Callee	_mm_sub_ps
>3012	Identifier	_mm_sub_ps
>3013	Identifier	g0s
>3014	Identifier	g0s
>3015	IdentifierDeclType	__m128
>3016	IdentifierDeclStatement	 
>3017	IdentifierDecl	pz2ds = _mm_rcp_ps ( _mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) ) )
>3018	AssignmentExpr	pz2ds = _mm_rcp_ps ( _mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) ) )
>3019	CallExpression	_mm_rcp_ps ( _mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) ) )
>3020	ArgumentList	_mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) )
>3021	Argument	_mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) )
>3022	CallExpression	_mm_mul_ps ( _mm_mul_ps ( pzs , pzs ) , _mm_load_ps ( buf_d + i ) )
>3023	ArgumentList	_mm_mul_ps ( pzs , pzs )
>3024	Argument	_mm_load_ps ( buf_d + i )
>3025	CallExpression	_mm_load_ps ( buf_d + i )
>3026	ArgumentList	buf_d + i
>3027	Argument	buf_d + i
>3028	AdditiveExpression	buf_d + i
>3029	Identifier	i
>3030	Identifier	buf_d
>3031	Callee	_mm_load_ps
>3032	Identifier	_mm_load_ps
>3033	Argument	_mm_mul_ps ( pzs , pzs )
>3034	CallExpression	_mm_mul_ps ( pzs , pzs )
>3035	ArgumentList	pzs
>3036	Argument	pzs
>3037	Identifier	pzs
>3038	Argument	pzs
>3039	Identifier	pzs
>3040	Callee	_mm_mul_ps
>3041	Identifier	_mm_mul_ps
>3042	Callee	_mm_mul_ps
>3043	Identifier	_mm_mul_ps
>3044	Callee	_mm_rcp_ps
>3045	Identifier	_mm_rcp_ps
>3046	Identifier	pz2ds
>3047	Identifier	pz2ds
>3048	IdentifierDeclType	__m128
>3049	IdentifierDeclStatement	 
>3050	IdentifierDecl	pzs = _mm_load_ps ( buf_warped_z + i )
>3051	AssignmentExpr	pzs = _mm_load_ps ( buf_warped_z + i )
>3052	CallExpression	_mm_load_ps ( buf_warped_z + i )
>3053	ArgumentList	buf_warped_z + i
>3054	Argument	buf_warped_z + i
>3055	AdditiveExpression	buf_warped_z + i
>3056	Identifier	i
>3057	Identifier	buf_warped_z
>3058	Callee	_mm_load_ps
>3059	Identifier	_mm_load_ps
>3060	Identifier	pzs
>3061	Identifier	pzs
>3062	IdentifierDeclType	__m128
>3063	AssignmentExpr	 
>3064	PrimaryExpression	4
>3065	Identifier	i
>3066	Condition	 
>3067	RelationalExpression	i < buf_warped_size - 3
>3068	AdditiveExpression	buf_warped_size - 3
>3069	PrimaryExpression	3
>3070	Identifier	buf_warped_size
>3071	Identifier	i
>3072	ForInit	 
>3073	IdentifierDeclStatement	int i = 0 ;
>3074	IdentifierDecl	i = 0
>3075	AssignmentExpr	i = 0
>3076	PrimaryExpression	0
>3077	Identifier	i
>3078	Identifier	i
>3079	IdentifierDeclType	int
>3080	IdentifierDeclStatement	 
>3081	IdentifierDecl	sumRes = 0
>3082	AssignmentExpr	sumRes = 0
>3083	PrimaryExpression	0
>3084	Identifier	sumRes
>3085	Identifier	sumRes
>3086	IdentifierDeclType	float
>3087	IdentifierDeclStatement	 
>3088	IdentifierDecl	sumResP = zeros
>3089	AssignmentExpr	sumResP = zeros
>3090	Identifier	zeros
>3091	Identifier	zeros
>3092	Identifier	sumResP
>3093	IdentifierDeclType	__m128
>3094	IdentifierDeclStatement	 
>3095	IdentifierDecl	huber_res_ponlys = _mm_set1_ps ( ( float ) ( settings . huber_d / 2 ) )
>3096	AssignmentExpr	huber_res_ponlys = _mm_set1_ps ( ( float ) ( settings . huber_d / 2 ) )
>3097	CallExpression	_mm_set1_ps ( ( float ) ( settings . huber_d / 2 ) )
>3098	ArgumentList	( float ) ( settings . huber_d / 2 )
>3099	Argument	( float ) ( settings . huber_d / 2 )
>3100	CastExpression	( float ) ( settings . huber_d / 2 )
>3101	MultiplicativeExpression	settings . huber_d / 2
>3102	PrimaryExpression	2
>3103	MemberAccess	settings . huber_d
>3104	Identifier	huber_d
>3105	Identifier	settings
>3106	CastTarget	float
>3107	Callee	_mm_set1_ps
>3108	Identifier	_mm_set1_ps
>3109	Identifier	huber_res_ponlys
>3110	Identifier	huber_res_ponlys
>3111	IdentifierDeclType	const __m128
>3112	IdentifierDeclStatement	 
>3113	IdentifierDecl	sigma_i2s = _mm_set1_ps ( ( float ) cameraPixelNoise2 )
>3114	AssignmentExpr	sigma_i2s = _mm_set1_ps ( ( float ) cameraPixelNoise2 )
>3115	CallExpression	_mm_set1_ps ( ( float ) cameraPixelNoise2 )
>3116	ArgumentList	( float ) cameraPixelNoise2
>3117	Argument	( float ) cameraPixelNoise2
>3118	CastExpression	( float ) cameraPixelNoise2
>3119	Identifier	cameraPixelNoise2
>3120	CastTarget	float
>3121	Callee	_mm_set1_ps
>3122	Identifier	_mm_set1_ps
>3123	Identifier	sigma_i2s
>3124	Identifier	sigma_i2s
>3125	IdentifierDeclType	const __m128
>3126	IdentifierDeclStatement	 
>3127	IdentifierDecl	depthVarFacs = _mm_set1_ps ( ( float ) settings . var_weight )
>3128	AssignmentExpr	depthVarFacs = _mm_set1_ps ( ( float ) settings . var_weight )
>3129	CallExpression	_mm_set1_ps ( ( float ) settings . var_weight )
>3130	ArgumentList	( float ) settings . var_weight
>3131	Argument	( float ) settings . var_weight
>3132	CastExpression	( float ) settings . var_weight
>3133	MemberAccess	settings . var_weight
>3134	Identifier	var_weight
>3135	Identifier	settings
>3136	CastTarget	float
>3137	Callee	_mm_set1_ps
>3138	Identifier	_mm_set1_ps
>3139	Identifier	depthVarFacs
>3140	Identifier	depthVarFacs
>3141	IdentifierDeclType	const __m128
>3142	IdentifierDeclStatement	 
>3143	IdentifierDecl	ones = _mm_set1_ps ( 1.0f )
>3144	AssignmentExpr	ones = _mm_set1_ps ( 1.0f )
>3145	CallExpression	_mm_set1_ps ( 1.0f )
>3146	ArgumentList	1.0f
>3147	Argument	1.0f
>3148	PrimaryExpression	1.0f
>3149	Callee	_mm_set1_ps
>3150	Identifier	_mm_set1_ps
>3151	Identifier	ones
>3152	Identifier	ones
>3153	IdentifierDeclType	const __m128
>3154	IdentifierDeclStatement	 
>3155	IdentifierDecl	zeros = _mm_set1_ps ( 0.0f )
>3156	AssignmentExpr	zeros = _mm_set1_ps ( 0.0f )
>3157	CallExpression	_mm_set1_ps ( 0.0f )
>3158	ArgumentList	0.0f
>3159	Argument	0.0f
>3160	PrimaryExpression	0.0f
>3161	Callee	_mm_set1_ps
>3162	Identifier	_mm_set1_ps
>3163	Identifier	zeros
>3164	Identifier	zeros
>3165	IdentifierDeclType	const __m128
>3166	IdentifierDeclStatement	 
>3167	IdentifierDecl	tzs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 2 ] ) )
>3168	AssignmentExpr	tzs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 2 ] ) )
>3169	CallExpression	_mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 2 ] ) )
>3170	ArgumentList	( float ) ( referenceToFrame . translation ( ) [ 2 ] )
>3171	Argument	( float ) ( referenceToFrame . translation ( ) [ 2 ] )
>3172	CastExpression	( float ) ( referenceToFrame . translation ( ) [ 2 ] )
>3173	ArrayIndexing	referenceToFrame . translation ( ) [ 2 ]
>3174	PrimaryExpression	2
>3175	CallExpression	referenceToFrame . translation ( )
>3176	ArgumentList	 
>3177	Callee	referenceToFrame . translation
>3178	MemberAccess	referenceToFrame . translation
>3179	Identifier	translation
>3180	Identifier	referenceToFrame
>3181	CastTarget	float
>3182	Callee	_mm_set1_ps
>3183	Identifier	_mm_set1_ps
>3184	Identifier	tzs
>3185	Identifier	tzs
>3186	IdentifierDeclType	const __m128
>3187	IdentifierDeclStatement	 
>3188	IdentifierDecl	tys = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 1 ] ) )
>3189	AssignmentExpr	tys = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 1 ] ) )
>3190	CallExpression	_mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 1 ] ) )
>3191	ArgumentList	( float ) ( referenceToFrame . translation ( ) [ 1 ] )
>3192	Argument	( float ) ( referenceToFrame . translation ( ) [ 1 ] )
>3193	CastExpression	( float ) ( referenceToFrame . translation ( ) [ 1 ] )
>3194	ArrayIndexing	referenceToFrame . translation ( ) [ 1 ]
>3195	PrimaryExpression	1
>3196	CallExpression	referenceToFrame . translation ( )
>3197	ArgumentList	 
>3198	Callee	referenceToFrame . translation
>3199	MemberAccess	referenceToFrame . translation
>3200	Identifier	translation
>3201	Identifier	referenceToFrame
>3202	CastTarget	float
>3203	Callee	_mm_set1_ps
>3204	Identifier	_mm_set1_ps
>3205	Identifier	tys
>3206	Identifier	tys
>3207	IdentifierDeclType	const __m128
>3208	IdentifierDeclStatement	 
>3209	IdentifierDecl	txs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 0 ] ) )
>3210	AssignmentExpr	txs = _mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 0 ] ) )
>3211	CallExpression	_mm_set1_ps ( ( float ) ( referenceToFrame . translation ( ) [ 0 ] ) )
>3212	ArgumentList	( float ) ( referenceToFrame . translation ( ) [ 0 ] )
>3213	Argument	( float ) ( referenceToFrame . translation ( ) [ 0 ] )
>3214	CastExpression	( float ) ( referenceToFrame . translation ( ) [ 0 ] )
>3215	ArrayIndexing	referenceToFrame . translation ( ) [ 0 ]
>3216	PrimaryExpression	0
>3217	CallExpression	referenceToFrame . translation ( )
>3218	ArgumentList	 
>3219	Callee	referenceToFrame . translation
>3220	MemberAccess	referenceToFrame . translation
>3221	Identifier	translation
>3222	Identifier	referenceToFrame
>3223	CastTarget	float
>3224	Callee	_mm_set1_ps
>3225	Identifier	_mm_set1_ps
>3226	Identifier	txs
>3227	Identifier	txs
>3228	IdentifierDeclType	const __m128
>3282	FunctionDef	SE3Tracker 
>3283	ParameterList	const Sophus 
>3284	Parameter	 
>3285	Identifier	referenceToFrame
>3286	ParameterType	const Sophus 
>3287	ReturnType	float
>3288	CompoundStatement	 
>3289	ReturnStatement	 
>3290	MultiplicativeExpression	sumRes / buf_warped_size
>3291	Identifier	buf_warped_size
>3292	Identifier	sumRes
>3293	ForStatement	for ( int i = buf_warped_size - remaining ; i < buf_warped_size ; i ++ )
>3294	CompoundStatement	 
>3295	ExpressionStatement	 
>3296	AssignmentExpr	* ( buf_weight_p + i ) = wh * w_p
>3297	MultiplicativeExpression	wh * w_p
>3298	Identifier	w_p
>3299	Identifier	wh
>3300	UnaryOp	* ( buf_weight_p + i )
>3301	AdditiveExpression	buf_weight_p + i
>3302	Identifier	i
>3303	Identifier	buf_weight_p
>3304	UnaryOperator	*
>3305	ExpressionStatement	 
>3306	AssignmentExpr	sumRes += wh * w_p * rp * rp
>3307	MultiplicativeExpression	wh * w_p * rp * rp
>3308	MultiplicativeExpression	w_p * rp * rp
>3309	MultiplicativeExpression	rp * rp
>3310	Identifier	rp
>3311	Identifier	rp
>3312	Identifier	w_p
>3313	Identifier	wh
>3314	Identifier	sumRes
>3315	IdentifierDeclStatement	 
>3316	IdentifierDecl	wh = fabs ( weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3317	AssignmentExpr	wh = fabs ( weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3318	CallExpression	fabs ( weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3319	ArgumentList	weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3320	Argument	weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3321	ConditionalExpression	weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3322	MultiplicativeExpression	( settings . huber_d / 2 ) / weighted_rp
>3323	Identifier	weighted_rp
>3324	MultiplicativeExpression	settings . huber_d / 2
>3325	PrimaryExpression	2
>3326	MemberAccess	settings . huber_d
>3327	Identifier	huber_d
>3328	Identifier	settings
>3329	PrimaryExpression	1
>3330	Condition	weighted_rp < ( settings . huber_d / 2 )
>3331	RelationalExpression	weighted_rp < ( settings . huber_d / 2 )
>3332	MultiplicativeExpression	settings . huber_d / 2
>3333	PrimaryExpression	2
>3334	MemberAccess	settings . huber_d
>3335	Identifier	huber_d
>3336	Identifier	settings
>3337	Identifier	weighted_rp
>3338	Callee	fabs
>3339	Identifier	fabs
>3340	Identifier	wh
>3341	Identifier	wh
>3342	IdentifierDeclType	float
>3343	IdentifierDeclStatement	 
>3344	IdentifierDecl	weighted_rp = fabs ( rp * sqrtf ( w_p ) )
>3345	AssignmentExpr	weighted_rp = fabs ( rp * sqrtf ( w_p ) )
>3346	CallExpression	fabs ( rp * sqrtf ( w_p ) )
>3347	ArgumentList	rp * sqrtf ( w_p )
>3348	Argument	rp * sqrtf ( w_p )
>3349	MultiplicativeExpression	rp * sqrtf ( w_p )
>3350	CallExpression	sqrtf ( w_p )
>3351	ArgumentList	w_p
>3352	Argument	w_p
>3353	Identifier	w_p
>3354	Callee	sqrtf
>3355	Identifier	sqrtf
>3356	Identifier	rp
>3357	Callee	fabs
>3358	Identifier	fabs
>3359	Identifier	weighted_rp
>3360	Identifier	weighted_rp
>3361	IdentifierDeclType	float
>3362	IdentifierDeclStatement	 
>3363	IdentifierDecl	w_p = 1.0f / ( cameraPixelNoise2 + s * drpdd * drpdd )
>3364	AssignmentExpr	w_p = 1.0f / ( cameraPixelNoise2 + s * drpdd * drpdd )
>3365	MultiplicativeExpression	1.0f / ( cameraPixelNoise2 + s * drpdd * drpdd )
>3366	AdditiveExpression	cameraPixelNoise2 + s * drpdd * drpdd
>3367	MultiplicativeExpression	s * drpdd * drpdd
>3368	MultiplicativeExpression	drpdd * drpdd
>3369	Identifier	drpdd
>3370	Identifier	drpdd
>3371	Identifier	s
>3372	Identifier	cameraPixelNoise2
>3373	PrimaryExpression	1.0f
>3374	Identifier	w_p
>3375	Identifier	w_p
>3376	IdentifierDeclType	float
>3377	IdentifierDeclStatement	 
>3378	IdentifierDecl	drpdd = gx * g0 + gy * g1
>3379	AssignmentExpr	drpdd = gx * g0 + gy * g1
>3380	AdditiveExpression	gx * g0 + gy * g1
>3381	MultiplicativeExpression	gy * g1
>3382	Identifier	g1
>3383	Identifier	gy
>3384	MultiplicativeExpression	gx * g0
>3385	Identifier	g0
>3386	Identifier	gx
>3387	Identifier	drpdd
>3388	Identifier	drpdd
>3389	IdentifierDeclType	float
>3390	IdentifierDeclStatement	 
>3391	IdentifierDecl	g1 = ( ty * pz - tz * py ) / ( pz * pz * d )
>3392	AssignmentExpr	g1 = ( ty * pz - tz * py ) / ( pz * pz * d )
>3393	MultiplicativeExpression	( ty * pz - tz * py ) / ( pz * pz * d )
>3394	MultiplicativeExpression	pz * pz * d
>3395	MultiplicativeExpression	pz * d
>3396	Identifier	d
>3397	Identifier	pz
>3398	Identifier	pz
>3399	AdditiveExpression	ty * pz - tz * py
>3400	MultiplicativeExpression	tz * py
>3401	Identifier	py
>3402	Identifier	tz
>3403	MultiplicativeExpression	ty * pz
>3404	Identifier	pz
>3405	Identifier	ty
>3406	Identifier	g1
>3407	Identifier	g1
>3408	IdentifierDeclType	float
>3409	IdentifierDeclStatement	 
>3410	IdentifierDecl	g0 = ( tx * pz - tz * px ) / ( pz * pz * d )
>3411	AssignmentExpr	g0 = ( tx * pz - tz * px ) / ( pz * pz * d )
>3412	MultiplicativeExpression	( tx * pz - tz * px ) / ( pz * pz * d )
>3413	MultiplicativeExpression	pz * pz * d
>3414	MultiplicativeExpression	pz * d
>3415	Identifier	d
>3416	Identifier	pz
>3417	Identifier	pz
>3418	AdditiveExpression	tx * pz - tz * px
>3419	MultiplicativeExpression	tz * px
>3420	Identifier	px
>3421	Identifier	tz
>3422	MultiplicativeExpression	tx * pz
>3423	Identifier	pz
>3424	Identifier	tx
>3425	Identifier	g0
>3426	Identifier	g0
>3427	IdentifierDeclType	float
>3428	IdentifierDeclStatement	 
>3429	IdentifierDecl	s = settings . var_weight * * ( buf_idepthVar + i )
>3430	AssignmentExpr	s = settings . var_weight * * ( buf_idepthVar + i )
>3431	MultiplicativeExpression	settings . var_weight * * ( buf_idepthVar + i )
>3432	UnaryOp	* ( buf_idepthVar + i )
>3433	AdditiveExpression	buf_idepthVar + i
>3434	Identifier	i
>3435	Identifier	buf_idepthVar
>3436	UnaryOperator	*
>3437	MemberAccess	settings . var_weight
>3438	Identifier	var_weight
>3439	Identifier	settings
>3440	Identifier	s
>3441	Identifier	s
>3442	IdentifierDeclType	float
>3443	IdentifierDeclStatement	 
>3444	IdentifierDecl	gy = * ( buf_warped_dy + i )
>3445	AssignmentExpr	gy = * ( buf_warped_dy + i )
>3446	UnaryOp	* ( buf_warped_dy + i )
>3447	AdditiveExpression	buf_warped_dy + i
>3448	Identifier	i
>3449	Identifier	buf_warped_dy
>3450	UnaryOperator	*
>3451	Identifier	gy
>3452	Identifier	gy
>3453	IdentifierDeclType	float
>3454	IdentifierDeclStatement	 
>3455	IdentifierDecl	gx = * ( buf_warped_dx + i )
>3456	AssignmentExpr	gx = * ( buf_warped_dx + i )
>3457	UnaryOp	* ( buf_warped_dx + i )
>3458	AdditiveExpression	buf_warped_dx + i
>3459	Identifier	i
>3460	Identifier	buf_warped_dx
>3461	UnaryOperator	*
>3462	Identifier	gx
>3463	Identifier	gx
>3464	IdentifierDeclType	float
>3465	IdentifierDeclStatement	 
>3466	IdentifierDecl	rp = * ( buf_warped_residual + i )
>3467	AssignmentExpr	rp = * ( buf_warped_residual + i )
>3468	UnaryOp	* ( buf_warped_residual + i )
>3469	AdditiveExpression	buf_warped_residual + i
>3470	Identifier	i
>3471	Identifier	buf_warped_residual
>3472	UnaryOperator	*
>3473	Identifier	rp
>3474	Identifier	rp
>3475	IdentifierDeclType	float
>3476	IdentifierDeclStatement	 
>3477	IdentifierDecl	d = * ( buf_d + i )
>3478	AssignmentExpr	d = * ( buf_d + i )
>3479	UnaryOp	* ( buf_d + i )
>3480	AdditiveExpression	buf_d + i
>3481	Identifier	i
>3482	Identifier	buf_d
>3483	UnaryOperator	*
>3484	Identifier	d
>3485	Identifier	d
>3486	IdentifierDeclType	float
>3487	IdentifierDeclStatement	 
>3488	IdentifierDecl	pz = * ( buf_warped_z + i )
>3489	AssignmentExpr	pz = * ( buf_warped_z + i )
>3490	UnaryOp	* ( buf_warped_z + i )
>3491	AdditiveExpression	buf_warped_z + i
>3492	Identifier	i
>3493	Identifier	buf_warped_z
>3494	UnaryOperator	*
>3495	Identifier	pz
>3496	Identifier	pz
>3497	IdentifierDeclType	float
>3498	IdentifierDeclStatement	 
>3499	IdentifierDecl	py = * ( buf_warped_y + i )
>3500	AssignmentExpr	py = * ( buf_warped_y + i )
>3501	UnaryOp	* ( buf_warped_y + i )
>3502	AdditiveExpression	buf_warped_y + i
>3503	Identifier	i
>3504	Identifier	buf_warped_y
>3505	UnaryOperator	*
>3506	Identifier	py
>3507	Identifier	py
>3508	IdentifierDeclType	float
>3509	IdentifierDeclStatement	 
>3510	IdentifierDecl	px = * ( buf_warped_x + i )
>3511	AssignmentExpr	px = * ( buf_warped_x + i )
>3512	UnaryOp	* ( buf_warped_x + i )
>3513	AdditiveExpression	buf_warped_x + i
>3514	Identifier	i
>3515	Identifier	buf_warped_x
>3516	UnaryOperator	*
>3517	Identifier	px
>3518	Identifier	px
>3519	IdentifierDeclType	float
>3520	IncDecOp	 
>3521	IncDec	++
>3522	Identifier	i
>3523	Condition	 
>3524	RelationalExpression	i < buf_warped_size
>3525	Identifier	buf_warped_size
>3526	Identifier	i
>3527	ForInit	 
>3528	IdentifierDeclStatement	int i = buf_warped_size - remaining ;
>3529	IdentifierDecl	i = buf_warped_size - remaining
>3530	AssignmentExpr	i = buf_warped_size - remaining
>3531	AdditiveExpression	buf_warped_size - remaining
>3532	Identifier	remaining
>3533	Identifier	buf_warped_size
>3534	Identifier	i
>3535	Identifier	i
>3536	IdentifierDeclType	int
>3537	ExpressionStatement	 
>3538	AssignmentExpr	remaining = buf_warped_size
>3539	Identifier	buf_warped_size
>3540	Identifier	remaining
>3541	ExpressionStatement	 
>3542	AssignmentExpr	loop_count = 0
>3543	PrimaryExpression	0
>3544	Identifier	loop_count
>3545	IdentifierDeclStatement	 
>3546	IdentifierDecl	sumRes = 0
>3547	AssignmentExpr	sumRes = 0
>3548	PrimaryExpression	0
>3549	Identifier	sumRes
>3550	Identifier	sumRes
>3551	IdentifierDeclType	float
>3552	IdentifierDeclStatement	 
>3553	IdentifierDecl	sum_vector [ ] = { 0 , 0 , 0 , 0 }
>3554	AssignmentExpr	sum_vector [ ] = { 0 , 0 , 0 , 0 }
>3555	InitializerList	0
>3556	PrimaryExpression	0
>3557	PrimaryExpression	0
>3558	PrimaryExpression	0
>3559	PrimaryExpression	0
>3560	Identifier	sum_vector
>3561	Identifier	sum_vector
>3562	IdentifierDeclType	float [ ]
>3563	IdentifierDeclStatement	 
>3564	IdentifierDecl	remaining = buf_warped_size - 4 * loop_count
>3565	AssignmentExpr	remaining = buf_warped_size - 4 * loop_count
>3566	AdditiveExpression	buf_warped_size - 4 * loop_count
>3567	MultiplicativeExpression	4 * loop_count
>3568	Identifier	loop_count
>3569	PrimaryExpression	4
>3570	Identifier	buf_warped_size
>3571	Identifier	remaining
>3572	Identifier	remaining
>3573	IdentifierDeclType	int
>3574	IdentifierDeclStatement	 
>3575	IdentifierDecl	loop_count = buf_warped_size / 4
>3576	AssignmentExpr	loop_count = buf_warped_size / 4
>3577	MultiplicativeExpression	buf_warped_size / 4
>3578	PrimaryExpression	4
>3579	Identifier	buf_warped_size
>3580	Identifier	loop_count
>3581	Identifier	loop_count
>3582	IdentifierDeclType	int
>3583	IdentifierDeclStatement	 
>3584	IdentifierDecl	* cur_buf_weight_p = buf_weight_p
>3585	AssignmentExpr	* cur_buf_weight_p = buf_weight_p
>3586	Identifier	buf_weight_p
>3587	Identifier	buf_weight_p
>3588	Identifier	cur_buf_weight_p
>3589	IdentifierDeclType	float *
>3590	IdentifierDeclStatement	 
>3591	IdentifierDecl	* cur_buf_idepthVar = buf_idepthVar
>3592	AssignmentExpr	* cur_buf_idepthVar = buf_idepthVar
>3593	Identifier	buf_idepthVar
>3594	Identifier	buf_idepthVar
>3595	Identifier	cur_buf_idepthVar
>3596	IdentifierDeclType	float *
>3597	IdentifierDeclStatement	 
>3598	IdentifierDecl	* cur_buf_d = buf_d
>3599	AssignmentExpr	* cur_buf_d = buf_d
>3600	Identifier	buf_d
>3601	Identifier	buf_d
>3602	Identifier	cur_buf_d
>3603	IdentifierDeclType	float *
>3604	IdentifierDeclStatement	 
>3605	IdentifierDecl	* cur_buf_warped_residual = buf_warped_residual
>3606	AssignmentExpr	* cur_buf_warped_residual = buf_warped_residual
>3607	Identifier	buf_warped_residual
>3608	Identifier	buf_warped_residual
>3609	Identifier	cur_buf_warped_residual
>3610	IdentifierDeclType	float *
>3611	IdentifierDeclStatement	 
>3612	IdentifierDecl	* cur_buf_warped_dy = buf_warped_dy
>3613	AssignmentExpr	* cur_buf_warped_dy = buf_warped_dy
>3614	Identifier	buf_warped_dy
>3615	Identifier	buf_warped_dy
>3616	Identifier	cur_buf_warped_dy
>3617	IdentifierDeclType	float *
>3618	IdentifierDeclStatement	 
>3619	IdentifierDecl	* cur_buf_warped_dx = buf_warped_dx
>3620	AssignmentExpr	* cur_buf_warped_dx = buf_warped_dx
>3621	Identifier	buf_warped_dx
>3622	Identifier	buf_warped_dx
>3623	Identifier	cur_buf_warped_dx
>3624	IdentifierDeclType	float *
>3625	IdentifierDeclStatement	 
>3626	IdentifierDecl	* cur_buf_warped_y = buf_warped_y
>3627	AssignmentExpr	* cur_buf_warped_y = buf_warped_y
>3628	Identifier	buf_warped_y
>3629	Identifier	buf_warped_y
>3630	Identifier	cur_buf_warped_y
>3631	IdentifierDeclType	float *
>3632	IdentifierDeclStatement	 
>3633	IdentifierDecl	* cur_buf_warped_x = buf_warped_x
>3634	AssignmentExpr	* cur_buf_warped_x = buf_warped_x
>3635	Identifier	buf_warped_x
>3636	Identifier	buf_warped_x
>3637	Identifier	cur_buf_warped_x
>3638	IdentifierDeclType	float *
>3639	IdentifierDeclStatement	 
>3640	IdentifierDecl	* cur_buf_warped_z = buf_warped_z
>3641	AssignmentExpr	* cur_buf_warped_z = buf_warped_z
>3642	Identifier	buf_warped_z
>3643	Identifier	buf_warped_z
>3644	Identifier	cur_buf_warped_z
>3645	IdentifierDeclType	float *
>3646	IdentifierDeclStatement	 
>3647	IdentifierDecl	cutoff_res_ponly4 [ 4 ] = { 10000 , 10000 , 10000 , 10000 }
>3648	AssignmentExpr	cutoff_res_ponly4 [ 4 ] = { 10000 , 10000 , 10000 , 10000 }
>3649	InitializerList	10000
>3650	PrimaryExpression	10000
>3651	PrimaryExpression	10000
>3652	PrimaryExpression	10000
>3653	PrimaryExpression	10000
>3654	Identifier	cutoff_res_ponly4
>3655	PrimaryExpression	4
>3656	Identifier	cutoff_res_ponly4
>3657	IdentifierDeclType	float [ 4 ]
>3658	IdentifierDeclStatement	 
>3659	IdentifierDecl	constants [ ] = { tx , ty , tz , settings . var_weight , cameraPixelNoise2 , settings . huber_d / 2 , - 1 , - 1 }
>3660	AssignmentExpr	constants [ ] = { tx , ty , tz , settings . var_weight , cameraPixelNoise2 , settings . huber_d / 2 , \
>3661	InitializerList	tx
>3662	UnaryOp	- 1
>3663	PrimaryExpression	1
>3664	UnaryOperator	-
>3665	UnaryOp	- 1
>3666	PrimaryExpression	1
>3667	UnaryOperator	-
>3668	MultiplicativeExpression	settings . huber_d / 2
>3669	PrimaryExpression	2
>3670	MemberAccess	settings . huber_d
>3671	Identifier	huber_d
>3672	Identifier	settings
>3673	Identifier	cameraPixelNoise2
>3674	MemberAccess	settings . var_weight
>3675	Identifier	var_weight
>3676	Identifier	settings
>3677	Identifier	tz
>3678	Identifier	ty
>3679	Identifier	tx
>3680	Identifier	constants
>3681	Identifier	constants
>3682	IdentifierDeclType	float [ ]
>3683	IdentifierDeclStatement	 
>3684	IdentifierDecl	tz = referenceToFrame . translation ( ) [ 2 ]
>3685	AssignmentExpr	tz = referenceToFrame . translation ( ) [ 2 ]
>3686	ArrayIndexing	referenceToFrame . translation ( ) [ 2 ]
>3687	PrimaryExpression	2
>3688	CallExpression	referenceToFrame . translation ( )
>3689	ArgumentList	 
>3690	Callee	referenceToFrame . translation
>3691	MemberAccess	referenceToFrame . translation
>3692	Identifier	translation
>3693	Identifier	referenceToFrame
>3694	Identifier	tz
>3695	Identifier	tz
>3696	IdentifierDeclType	float
>3697	IdentifierDeclStatement	 
>3698	IdentifierDecl	ty = referenceToFrame . translation ( ) [ 1 ]
>3699	AssignmentExpr	ty = referenceToFrame . translation ( ) [ 1 ]
>3700	ArrayIndexing	referenceToFrame . translation ( ) [ 1 ]
>3701	PrimaryExpression	1
>3702	CallExpression	referenceToFrame . translation ( )
>3703	ArgumentList	 
>3704	Callee	referenceToFrame . translation
>3705	MemberAccess	referenceToFrame . translation
>3706	Identifier	translation
>3707	Identifier	referenceToFrame
>3708	Identifier	ty
>3709	Identifier	ty
>3710	IdentifierDeclType	float
>3711	IdentifierDeclStatement	 
>3712	IdentifierDecl	tx = referenceToFrame . translation ( ) [ 0 ]
>3713	AssignmentExpr	tx = referenceToFrame . translation ( ) [ 0 ]
>3714	ArrayIndexing	referenceToFrame . translation ( ) [ 0 ]
>3715	PrimaryExpression	0
>3716	CallExpression	referenceToFrame . translation ( )
>3717	ArgumentList	 
>3718	Callee	referenceToFrame . translation
>3719	MemberAccess	referenceToFrame . translation
>3720	Identifier	translation
>3721	Identifier	referenceToFrame
>3722	Identifier	tx
>3723	Identifier	tx
>3724	IdentifierDeclType	float
>3800	FunctionDef	SE3Tracker 
>3801	ParameterList	const Sophus 
>3802	Parameter	 
>3803	Identifier	referenceToFrame
>3804	ParameterType	const Sophus 
>3805	ReturnType	float
>3806	CompoundStatement	 
>3807	ReturnStatement	 
>3808	MultiplicativeExpression	sumRes / buf_warped_size
>3809	Identifier	buf_warped_size
>3810	Identifier	sumRes
>3811	ForStatement	for ( int i = 0 ; i < buf_warped_size ; i ++ )
>3812	CompoundStatement	 
>3813	ExpressionStatement	 
>3814	AssignmentExpr	* ( buf_weight_p + i ) = wh * w_p
>3815	MultiplicativeExpression	wh * w_p
>3816	Identifier	w_p
>3817	Identifier	wh
>3818	UnaryOp	* ( buf_weight_p + i )
>3819	AdditiveExpression	buf_weight_p + i
>3820	Identifier	i
>3821	Identifier	buf_weight_p
>3822	UnaryOperator	*
>3823	ExpressionStatement	 
>3824	AssignmentExpr	sumRes += wh * w_p * rp * rp
>3825	MultiplicativeExpression	wh * w_p * rp * rp
>3826	MultiplicativeExpression	w_p * rp * rp
>3827	MultiplicativeExpression	rp * rp
>3828	Identifier	rp
>3829	Identifier	rp
>3830	Identifier	w_p
>3831	Identifier	wh
>3832	Identifier	sumRes
>3833	IdentifierDeclStatement	 
>3834	IdentifierDecl	wh = fabs ( weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3835	AssignmentExpr	wh = fabs ( weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3836	CallExpression	fabs ( weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3837	ArgumentList	weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3838	Argument	weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3839	ConditionalExpression	weighted_rp < ( settings . huber_d / 2 ) ? 1 
>3840	MultiplicativeExpression	( settings . huber_d / 2 ) / weighted_rp
>3841	Identifier	weighted_rp
>3842	MultiplicativeExpression	settings . huber_d / 2
>3843	PrimaryExpression	2
>3844	MemberAccess	settings . huber_d
>3845	Identifier	huber_d
>3846	Identifier	settings
>3847	PrimaryExpression	1
>3848	Condition	weighted_rp < ( settings . huber_d / 2 )
>3849	RelationalExpression	weighted_rp < ( settings . huber_d / 2 )
>3850	MultiplicativeExpression	settings . huber_d / 2
>3851	PrimaryExpression	2
>3852	MemberAccess	settings . huber_d
>3853	Identifier	huber_d
>3854	Identifier	settings
>3855	Identifier	weighted_rp
>3856	Callee	fabs
>3857	Identifier	fabs
>3858	Identifier	wh
>3859	Identifier	wh
>3860	IdentifierDeclType	float
>3861	IdentifierDeclStatement	 
>3862	IdentifierDecl	weighted_rp = fabs ( rp * sqrtf ( w_p ) )
>3863	AssignmentExpr	weighted_rp = fabs ( rp * sqrtf ( w_p ) )
>3864	CallExpression	fabs ( rp * sqrtf ( w_p ) )
>3865	ArgumentList	rp * sqrtf ( w_p )
>3866	Argument	rp * sqrtf ( w_p )
>3867	MultiplicativeExpression	rp * sqrtf ( w_p )
>3868	CallExpression	sqrtf ( w_p )
>3869	ArgumentList	w_p
>3870	Argument	w_p
>3871	Identifier	w_p
>3872	Callee	sqrtf
>3873	Identifier	sqrtf
>3874	Identifier	rp
>3875	Callee	fabs
>3876	Identifier	fabs
>3877	Identifier	weighted_rp
>3878	Identifier	weighted_rp
>3879	IdentifierDeclType	float
>3880	IdentifierDeclStatement	 
>3881	IdentifierDecl	w_p = 1.0f / ( ( cameraPixelNoise2 ) + s * drpdd * drpdd )
>3882	AssignmentExpr	w_p = 1.0f / ( ( cameraPixelNoise2 ) + s * drpdd * drpdd )
>3883	MultiplicativeExpression	1.0f / ( ( cameraPixelNoise2 ) + s * drpdd * drpdd )
>3884	MultiplicativeExpression	( cameraPixelNoise2 ) + s * drpdd * drpdd
>3885	MultiplicativeExpression	drpdd * drpdd
>3886	Identifier	drpdd
>3887	Identifier	drpdd
>3888	CastExpression	( cameraPixelNoise2 ) + s
>3889	UnaryOp	+ s
>3890	Identifier	s
>3891	UnaryOperator	+
>3892	CastTarget	cameraPixelNoise2
>3893	PrimaryExpression	1.0f
>3894	Identifier	w_p
>3895	Identifier	w_p
>3896	IdentifierDeclType	float
>3897	IdentifierDeclStatement	 
>3898	IdentifierDecl	drpdd = gx * g0 + gy * g1
>3899	AssignmentExpr	drpdd = gx * g0 + gy * g1
>3900	AdditiveExpression	gx * g0 + gy * g1
>3901	MultiplicativeExpression	gy * g1
>3902	Identifier	g1
>3903	Identifier	gy
>3904	MultiplicativeExpression	gx * g0
>3905	Identifier	g0
>3906	Identifier	gx
>3907	Identifier	drpdd
>3908	Identifier	drpdd
>3909	IdentifierDeclType	float
>3910	IdentifierDeclStatement	 
>3911	IdentifierDecl	g1 = ( ty * pz - tz * py ) / ( pz * pz * d )
>3912	AssignmentExpr	g1 = ( ty * pz - tz * py ) / ( pz * pz * d )
>3913	MultiplicativeExpression	( ty * pz - tz * py ) / ( pz * pz * d )
>3914	MultiplicativeExpression	pz * pz * d
>3915	MultiplicativeExpression	pz * d
>3916	Identifier	d
>3917	Identifier	pz
>3918	Identifier	pz
>3919	AdditiveExpression	ty * pz - tz * py
>3920	MultiplicativeExpression	tz * py
>3921	Identifier	py
>3922	Identifier	tz
>3923	MultiplicativeExpression	ty * pz
>3924	Identifier	pz
>3925	Identifier	ty
>3926	Identifier	g1
>3927	Identifier	g1
>3928	IdentifierDeclType	float
>3929	IdentifierDeclStatement	 
>3930	IdentifierDecl	g0 = ( tx * pz - tz * px ) / ( pz * pz * d )
>3931	AssignmentExpr	g0 = ( tx * pz - tz * px ) / ( pz * pz * d )
>3932	MultiplicativeExpression	( tx * pz - tz * px ) / ( pz * pz * d )
>3933	MultiplicativeExpression	pz * pz * d
>3934	MultiplicativeExpression	pz * d
>3935	Identifier	d
>3936	Identifier	pz
>3937	Identifier	pz
>3938	AdditiveExpression	tx * pz - tz * px
>3939	MultiplicativeExpression	tz * px
>3940	Identifier	px
>3941	Identifier	tz
>3942	MultiplicativeExpression	tx * pz
>3943	Identifier	pz
>3944	Identifier	tx
>3945	Identifier	g0
>3946	Identifier	g0
>3947	IdentifierDeclType	float
>3948	IdentifierDeclStatement	 
>3949	IdentifierDecl	s = settings . var_weight * * ( buf_idepthVar + i )
>3950	AssignmentExpr	s = settings . var_weight * * ( buf_idepthVar + i )
>3951	MultiplicativeExpression	settings . var_weight * * ( buf_idepthVar + i )
>3952	UnaryOp	* ( buf_idepthVar + i )
>3953	AdditiveExpression	buf_idepthVar + i
>3954	Identifier	i
>3955	Identifier	buf_idepthVar
>3956	UnaryOperator	*
>3957	MemberAccess	settings . var_weight
>3958	Identifier	var_weight
>3959	Identifier	settings
>3960	Identifier	s
>3961	Identifier	s
>3962	IdentifierDeclType	float
>3963	IdentifierDeclStatement	 
>3964	IdentifierDecl	gy = * ( buf_warped_dy + i )
>3965	AssignmentExpr	gy = * ( buf_warped_dy + i )
>3966	UnaryOp	* ( buf_warped_dy + i )
>3967	AdditiveExpression	buf_warped_dy + i
>3968	Identifier	i
>3969	Identifier	buf_warped_dy
>3970	UnaryOperator	*
>3971	Identifier	gy
>3972	Identifier	gy
>3973	IdentifierDeclType	float
>3974	IdentifierDeclStatement	 
>3975	IdentifierDecl	gx = * ( buf_warped_dx + i )
>3976	AssignmentExpr	gx = * ( buf_warped_dx + i )
>3977	UnaryOp	* ( buf_warped_dx + i )
>3978	AdditiveExpression	buf_warped_dx + i
>3979	Identifier	i
>3980	Identifier	buf_warped_dx
>3981	UnaryOperator	*
>3982	Identifier	gx
>3983	Identifier	gx
>3984	IdentifierDeclType	float
>3985	IdentifierDeclStatement	 
>3986	IdentifierDecl	rp = * ( buf_warped_residual + i )
>3987	AssignmentExpr	rp = * ( buf_warped_residual + i )
>3988	UnaryOp	* ( buf_warped_residual + i )
>3989	AdditiveExpression	buf_warped_residual + i
>3990	Identifier	i
>3991	Identifier	buf_warped_residual
>3992	UnaryOperator	*
>3993	Identifier	rp
>3994	Identifier	rp
>3995	IdentifierDeclType	float
>3996	IdentifierDeclStatement	 
>3997	IdentifierDecl	d = * ( buf_d + i )
>3998	AssignmentExpr	d = * ( buf_d + i )
>3999	UnaryOp	* ( buf_d + i )
>4000	AdditiveExpression	buf_d + i
>4001	Identifier	i
>4002	Identifier	buf_d
>4003	UnaryOperator	*
>4004	Identifier	d
>4005	Identifier	d
>4006	IdentifierDeclType	float
>4007	IdentifierDeclStatement	 
>4008	IdentifierDecl	pz = * ( buf_warped_z + i )
>4009	AssignmentExpr	pz = * ( buf_warped_z + i )
>4010	UnaryOp	* ( buf_warped_z + i )
>4011	AdditiveExpression	buf_warped_z + i
>4012	Identifier	i
>4013	Identifier	buf_warped_z
>4014	UnaryOperator	*
>4015	Identifier	pz
>4016	Identifier	pz
>4017	IdentifierDeclType	float
>4018	IdentifierDeclStatement	 
>4019	IdentifierDecl	py = * ( buf_warped_y + i )
>4020	AssignmentExpr	py = * ( buf_warped_y + i )
>4021	UnaryOp	* ( buf_warped_y + i )
>4022	AdditiveExpression	buf_warped_y + i
>4023	Identifier	i
>4024	Identifier	buf_warped_y
>4025	UnaryOperator	*
>4026	Identifier	py
>4027	Identifier	py
>4028	IdentifierDeclType	float
>4029	IdentifierDeclStatement	 
>4030	IdentifierDecl	px = * ( buf_warped_x + i )
>4031	AssignmentExpr	px = * ( buf_warped_x + i )
>4032	UnaryOp	* ( buf_warped_x + i )
>4033	AdditiveExpression	buf_warped_x + i
>4034	Identifier	i
>4035	Identifier	buf_warped_x
>4036	UnaryOperator	*
>4037	Identifier	px
>4038	Identifier	px
>4039	IdentifierDeclType	float
>4040	IncDecOp	 
>4041	IncDec	++
>4042	Identifier	i
>4043	Condition	 
>4044	RelationalExpression	i < buf_warped_size
>4045	Identifier	buf_warped_size
>4046	Identifier	i
>4047	ForInit	 
>4048	IdentifierDeclStatement	int i = 0 ;
>4049	IdentifierDecl	i = 0
>4050	AssignmentExpr	i = 0
>4051	PrimaryExpression	0
>4052	Identifier	i
>4053	Identifier	i
>4054	IdentifierDeclType	int
>4055	IdentifierDeclStatement	 
>4056	IdentifierDecl	sumRes = 0
>4057	AssignmentExpr	sumRes = 0
>4058	PrimaryExpression	0
>4059	Identifier	sumRes
>4060	Identifier	sumRes
>4061	IdentifierDeclType	float
>4062	IdentifierDeclStatement	 
>4063	IdentifierDecl	tz = referenceToFrame . translation ( ) [ 2 ]
>4064	AssignmentExpr	tz = referenceToFrame . translation ( ) [ 2 ]
>4065	ArrayIndexing	referenceToFrame . translation ( ) [ 2 ]
>4066	PrimaryExpression	2
>4067	CallExpression	referenceToFrame . translation ( )
>4068	ArgumentList	 
>4069	Callee	referenceToFrame . translation
>4070	MemberAccess	referenceToFrame . translation
>4071	Identifier	translation
>4072	Identifier	referenceToFrame
>4073	Identifier	tz
>4074	Identifier	tz
>4075	IdentifierDeclType	float
>4076	IdentifierDeclStatement	 
>4077	IdentifierDecl	ty = referenceToFrame . translation ( ) [ 1 ]
>4078	AssignmentExpr	ty = referenceToFrame . translation ( ) [ 1 ]
>4079	ArrayIndexing	referenceToFrame . translation ( ) [ 1 ]
>4080	PrimaryExpression	1
>4081	CallExpression	referenceToFrame . translation ( )
>4082	ArgumentList	 
>4083	Callee	referenceToFrame . translation
>4084	MemberAccess	referenceToFrame . translation
>4085	Identifier	translation
>4086	Identifier	referenceToFrame
>4087	Identifier	ty
>4088	Identifier	ty
>4089	IdentifierDeclType	float
>4090	IdentifierDeclStatement	 
>4091	IdentifierDecl	tx = referenceToFrame . translation ( ) [ 0 ]
>4092	AssignmentExpr	tx = referenceToFrame . translation ( ) [ 0 ]
>4093	ArrayIndexing	referenceToFrame . translation ( ) [ 0 ]
>4094	PrimaryExpression	0
>4095	CallExpression	referenceToFrame . translation ( )
>4096	ArgumentList	 
>4097	Callee	referenceToFrame . translation
>4098	MemberAccess	referenceToFrame . translation
>4099	Identifier	translation
>4100	Identifier	referenceToFrame
>4101	Identifier	tx
>4102	Identifier	tx
>4103	IdentifierDeclType	float
>4164	FunctionDef	SE3Tracker 
>4165	ParameterList	 
>4166	ReturnType	void
>4167	CompoundStatement	 
>4168	IfStatement	if ( plotTrackingIterationInfo || saveAllTrackingStagesInternal )
>4169	CompoundStatement	 
>4170	ExpressionStatement	 
>4171	CallExpression	fillCvMat ( & debugImageOldImageWarped , cv 
>4172	ArgumentList	& debugImageOldImageWarped
>4173	Argument	cv 
>4174	CallExpression	cv 
>4175	ArgumentList	other
>4176	Argument	255
>4177	PrimaryExpression	255
>4178	Argument	other
>4179	Identifier	other
>4180	Argument	other
>4181	Identifier	other
>4182	Callee	cv 
>4183	Identifier	cv 
>4184	Argument	& debugImageOldImageWarped
>4185	UnaryOp	& debugImageOldImageWarped
>4186	Identifier	debugImageOldImageWarped
>4187	UnaryOperator	&
>4188	Callee	fillCvMat
>4189	Identifier	fillCvMat
>4190	ExpressionStatement	 
>4191	CallExpression	fillCvMat ( & debugImageOldImageSource , cv 
>4192	ArgumentList	& debugImageOldImageSource
>4193	Argument	cv 
>4194	CallExpression	cv 
>4195	ArgumentList	other
>4196	Argument	255
>4197	PrimaryExpression	255
>4198	Argument	other
>4199	Identifier	other
>4200	Argument	other
>4201	Identifier	other
>4202	Callee	cv 
>4203	Identifier	cv 
>4204	Argument	& debugImageOldImageSource
>4205	UnaryOp	& debugImageOldImageSource
>4206	Identifier	debugImageOldImageSource
>4207	UnaryOperator	&
>4208	Callee	fillCvMat
>4209	Identifier	fillCvMat
>4210	ExpressionStatement	 
>4211	CallExpression	fillCvMat ( & debugImageWeights , cv 
>4212	ArgumentList	& debugImageWeights
>4213	Argument	cv 
>4214	CallExpression	cv 
>4215	ArgumentList	other
>4216	Argument	255
>4217	PrimaryExpression	255
>4218	Argument	other
>4219	Identifier	other
>4220	Argument	other
>4221	Identifier	other
>4222	Callee	cv 
>4223	Identifier	cv 
>4224	Argument	& debugImageWeights
>4225	UnaryOp	& debugImageWeights
>4226	Identifier	debugImageWeights
>4227	UnaryOperator	&
>4228	Callee	fillCvMat
>4229	Identifier	fillCvMat
>4230	ExpressionStatement	 
>4231	CallExpression	fillCvMat ( & debugImageResiduals , cv 
>4232	ArgumentList	& debugImageResiduals
>4233	Argument	cv 
>4234	CallExpression	cv 
>4235	ArgumentList	other
>4236	Argument	255
>4237	PrimaryExpression	255
>4238	Argument	other
>4239	Identifier	other
>4240	Argument	other
>4241	Identifier	other
>4242	Callee	cv 
>4243	Identifier	cv 
>4244	Argument	& debugImageResiduals
>4245	UnaryOp	& debugImageResiduals
>4246	Identifier	debugImageResiduals
>4247	UnaryOperator	&
>4248	Callee	fillCvMat
>4249	Identifier	fillCvMat
>4250	IdentifierDeclStatement	 
>4251	IdentifierDecl	other = saveAllTrackingStagesInternal ? 255 
>4252	AssignmentExpr	other = saveAllTrackingStagesInternal ? 255 
>4253	ConditionalExpression	saveAllTrackingStagesInternal ? 255 
>4254	PrimaryExpression	0
>4255	PrimaryExpression	255
>4256	Condition	saveAllTrackingStagesInternal
>4257	Identifier	saveAllTrackingStagesInternal
>4258	Identifier	other
>4259	Identifier	other
>4260	IdentifierDeclType	int
>4261	Condition	 
>4262	OrExpression	plotTrackingIterationInfo || saveAllTrackingStagesInternal
>4263	Identifier	saveAllTrackingStagesInternal
>4264	Identifier	plotTrackingIterationInfo
>4276	FunctionDef	SE3Tracker 
>4277	ParameterList	int w
>4278	Parameter	 
>4279	Identifier	w
>4280	ParameterType	int
>4281	ReturnType	void
>4282	CompoundStatement	 
>4283	IfStatement	if ( saveAllTrackingStagesInternal )
>4284	CompoundStatement	 
>4285	ExpressionStatement	 
>4286	CallExpression	printf ( \"saved three images for lvl %d, iteration %d\n\" , w , iterationNumber )
>4287	ArgumentList	\"saved three images for lvl %d, iteration %d\n\"
>4288	Argument	iterationNumber
>4289	Identifier	iterationNumber
>4290	Argument	w
>4291	Identifier	w
>4292	Argument	\"saved three images for lvl %d, iteration %d\n\"
>4293	PrimaryExpression	\"saved three images for lvl %d, iteration %d\n\"
>4294	Callee	printf
>4295	Identifier	printf
>4296	ExpressionStatement	 
>4297	CallExpression	cv 
>4298	ArgumentList	charbuf
>4299	Argument	debugImageWeights
>4300	Identifier	debugImageWeights
>4301	Argument	charbuf
>4302	Identifier	charbuf
>4303	Callee	cv 
>4304	Identifier	cv 
>4305	ExpressionStatement	 
>4306	CallExpression	snprintf ( charbuf , 500 , \"save/%sweights-%d-%d.png\" , packagePath . c_str ( ) , w , iterationNumber )
>4307	ArgumentList	charbuf
>4308	Argument	iterationNumber
>4309	Identifier	iterationNumber
>4310	Argument	w
>4311	Identifier	w
>4312	Argument	packagePath . c_str ( )
>4313	CallExpression	packagePath . c_str ( )
>4314	ArgumentList	 
>4315	Callee	packagePath . c_str
>4316	MemberAccess	packagePath . c_str
>4317	Identifier	c_str
>4318	Identifier	packagePath
>4319	Argument	\"save/%sweights-%d-%d.png\"
>4320	PrimaryExpression	\"save/%sweights-%d-%d.png\"
>4321	Argument	500
>4322	PrimaryExpression	500
>4323	Argument	charbuf
>4324	Identifier	charbuf
>4325	Callee	snprintf
>4326	Identifier	snprintf
>4327	ExpressionStatement	 
>4328	CallExpression	cv 
>4329	ArgumentList	charbuf
>4330	Argument	debugImageOldImageWarped
>4331	Identifier	debugImageOldImageWarped
>4332	Argument	charbuf
>4333	Identifier	charbuf
>4334	Callee	cv 
>4335	Identifier	cv 
>4336	ExpressionStatement	 
>4337	CallExpression	snprintf ( charbuf , 500 , \"save/%swarped-%d-%d.png\" , packagePath . c_str ( ) , w , iterationNumber )
>4338	ArgumentList	charbuf
>4339	Argument	iterationNumber
>4340	Identifier	iterationNumber
>4341	Argument	w
>4342	Identifier	w
>4343	Argument	packagePath . c_str ( )
>4344	CallExpression	packagePath . c_str ( )
>4345	ArgumentList	 
>4346	Callee	packagePath . c_str
>4347	MemberAccess	packagePath . c_str
>4348	Identifier	c_str
>4349	Identifier	packagePath
>4350	Argument	\"save/%swarped-%d-%d.png\"
>4351	PrimaryExpression	\"save/%swarped-%d-%d.png\"
>4352	Argument	500
>4353	PrimaryExpression	500
>4354	Argument	charbuf
>4355	Identifier	charbuf
>4356	Callee	snprintf
>4357	Identifier	snprintf
>4358	ExpressionStatement	 
>4359	CallExpression	cv 
>4360	ArgumentList	charbuf
>4361	Argument	debugImageResiduals
>4362	Identifier	debugImageResiduals
>4363	Argument	charbuf
>4364	Identifier	charbuf
>4365	Callee	cv 
>4366	Identifier	cv 
>4367	ExpressionStatement	 
>4368	CallExpression	snprintf ( charbuf , 500 , \"save/%sresidual-%d-%d.png\" , packagePath . c_str ( ) , w , iterationNumber )
>4369	ArgumentList	charbuf
>4370	Argument	iterationNumber
>4371	Identifier	iterationNumber
>4372	Argument	w
>4373	Identifier	w
>4374	Argument	packagePath . c_str ( )
>4375	CallExpression	packagePath . c_str ( )
>4376	ArgumentList	 
>4377	Callee	packagePath . c_str
>4378	MemberAccess	packagePath . c_str
>4379	Identifier	c_str
>4380	Identifier	packagePath
>4381	Argument	\"save/%sresidual-%d-%d.png\"
>4382	PrimaryExpression	\"save/%sresidual-%d-%d.png\"
>4383	Argument	500
>4384	PrimaryExpression	500
>4385	Argument	charbuf
>4386	Identifier	charbuf
>4387	Callee	snprintf
>4388	Identifier	snprintf
>4389	IdentifierDeclStatement	 
>4390	IdentifierDecl	charbuf [ 500 ]
>4391	PrimaryExpression	500
>4392	Identifier	charbuf
>4393	IdentifierDeclType	char [ 500 ]
>4394	Condition	 
>4395	Identifier	saveAllTrackingStagesInternal
>4396	IfStatement	if ( plotTrackingIterationInfo )
>4397	CompoundStatement	 
>4398	WhileStatement	while ( looping )
>4399	CompoundStatement	 
>4400	IfStatement	if ( key == ' ' )
>4401	ElseStatement	else
>4402	ExpressionStatement	 
>4403	CallExpression	handleKey ( k )
>4404	ArgumentList	k
>4405	Argument	k
>4406	Identifier	k
>4407	Callee	handleKey
>4408	Identifier	handleKey
>4409	ExpressionStatement	 
>4410	AssignmentExpr	looping = false
>4411	Identifier	false
>4412	Identifier	looping
>4413	Condition	 
>4414	EqualityExpression	key == ' '
>4415	PrimaryExpression	' '
>4416	Identifier	key
>4417	IdentifierDeclStatement	 
>4418	IdentifierDecl	key = k
>4419	AssignmentExpr	key = k
>4420	Identifier	k
>4421	Identifier	k
>4422	Identifier	key
>4423	IdentifierDeclType	char
>4424	IfStatement	if ( k == - 1 )
>4425	CompoundStatement	 
>4426	IfStatement	if ( autoRunWithinFrame )
>4427	ElseStatement	else
>4428	ContinueStatement	 
>4429	BreakStatement	 
>4430	Condition	 
>4431	Identifier	autoRunWithinFrame
>4432	Condition	 
>4433	EqualityExpression	k == - 1
>4434	UnaryOp	- 1
>4435	PrimaryExpression	1
>4436	UnaryOperator	-
>4437	Identifier	k
>4438	IdentifierDeclStatement	 
>4439	IdentifierDecl	k = Util 
>4440	AssignmentExpr	k = Util 
>4441	CallExpression	Util 
>4442	ArgumentList	1
>4443	Argument	1
>4444	PrimaryExpression	1
>4445	Callee	Util 
>4446	Identifier	Util 
>4447	Identifier	k
>4448	Identifier	k
>4449	IdentifierDeclType	int
>4450	Condition	 
>4451	Identifier	looping
>4452	IdentifierDeclStatement	 
>4453	IdentifierDecl	looping = true
>4454	AssignmentExpr	looping = true
>4455	Identifier	true
>4456	Identifier	true
>4457	Identifier	looping
>4458	IdentifierDeclType	bool
>4459	ExpressionStatement	 
>4460	CallExpression	Util 
>4461	ArgumentList	\"Residuals\"
>4462	Argument	debugImageResiduals
>4463	Identifier	debugImageResiduals
>4464	Argument	\"Residuals\"
>4465	PrimaryExpression	\"Residuals\"
>4466	Callee	Util 
>4467	Identifier	Util 
>4468	ExpressionStatement	 
>4469	CallExpression	Util 
>4470	ArgumentList	\"Intensities of second_frame at pointcloud in first_frame\"
>4471	Argument	debugImageOldImageWarped
>4472	Identifier	debugImageOldImageWarped
>4473	Argument	\"Intensities of second_frame at pointcloud in first_frame\"
>4474	PrimaryExpression	\"Intensities of second_frame at pointcloud in first_frame\"
>4475	Callee	Util 
>4476	Identifier	Util 
>4477	ExpressionStatement	 
>4478	CallExpression	Util 
>4479	ArgumentList	\"Intensities of second_frame at transformed positions\"
>4480	Argument	debugImageOldImageSource
>4481	Identifier	debugImageOldImageSource
>4482	Argument	\"Intensities of second_frame at transformed positions\"
>4483	PrimaryExpression	\"Intensities of second_frame at transformed positions\"
>4484	Callee	Util 
>4485	Identifier	Util 
>4486	ExpressionStatement	 
>4487	CallExpression	Util 
>4488	ArgumentList	\"second_frame\"
>4489	Argument	debugImageSecondFrame
>4490	Identifier	debugImageSecondFrame
>4491	Argument	\"second_frame\"
>4492	PrimaryExpression	\"second_frame\"
>4493	Callee	Util 
>4494	Identifier	Util 
>4495	ExpressionStatement	 
>4496	CallExpression	Util 
>4497	ArgumentList	\"Weights\"
>4498	Argument	debugImageWeights
>4499	Identifier	debugImageWeights
>4500	Argument	\"Weights\"
>4501	PrimaryExpression	\"Weights\"
>4502	Callee	Util 
>4503	Identifier	Util 
>4504	Condition	 
>4505	Identifier	plotTrackingIterationInfo
>4528	FunctionDef	SE3Tracker 
>4529	ParameterList	const Eigen 
>4530	Parameter	 
>4531	Identifier	plotResidual
>4532	ParameterType	bool
>4533	Parameter	 
>4534	Identifier	level
>4535	ParameterType	int
>4536	Parameter	 
>4537	Identifier	referenceToFrame
>4538	ParameterType	const Sophus 
>4539	Parameter	 
>4540	Identifier	frame
>4541	ParameterType	Frame *
>4542	Parameter	 
>4543	Identifier	refNum
>4544	ParameterType	int
>4545	Parameter	 
>4546	Identifier	idxBuf
>4547	ParameterType	int *
>4548	Parameter	 
>4549	Identifier	refColVar
>4550	ParameterType	const Eigen 
>4551	Parameter	 
>4552	Identifier	refPoint
>4553	ParameterType	const Eigen 
>4554	ReturnType	float
>4555	CompoundStatement	 
>4556	ReturnStatement	 
>4557	CallExpression	calcResidualAndBuffers ( refPoint , refColVar , idxBuf , refNum , frame , referenceToFrame , level , plotResidual )
>4558	ArgumentList	refPoint
>4559	Argument	plotResidual
>4560	Identifier	plotResidual
>4561	Argument	level
>4562	Identifier	level
>4563	Argument	referenceToFrame
>4564	Identifier	referenceToFrame
>4565	Argument	frame
>4566	Identifier	frame
>4567	Argument	refNum
>4568	Identifier	refNum
>4569	Argument	idxBuf
>4570	Identifier	idxBuf
>4571	Argument	refColVar
>4572	Identifier	refColVar
>4573	Argument	refPoint
>4574	Identifier	refPoint
>4575	Callee	calcResidualAndBuffers
>4576	Identifier	calcResidualAndBuffers
>4589	FunctionDef	SE3Tracker 
>4590	ParameterList	const Eigen 
>4591	Parameter	 
>4592	Identifier	plotResidual
>4593	ParameterType	bool
>4594	Parameter	 
>4595	Identifier	level
>4596	ParameterType	int
>4597	Parameter	 
>4598	Identifier	referenceToFrame
>4599	ParameterType	const Sophus 
>4600	Parameter	 
>4601	Identifier	frame
>4602	ParameterType	Frame *
>4603	Parameter	 
>4604	Identifier	refNum
>4605	ParameterType	int
>4606	Parameter	 
>4607	Identifier	idxBuf
>4608	ParameterType	int *
>4609	Parameter	 
>4610	Identifier	refColVar
>4611	ParameterType	const Eigen 
>4612	Parameter	 
>4613	Identifier	refPoint
>4614	ParameterType	const Eigen 
>4615	ReturnType	float
>4616	CompoundStatement	 
>4617	ReturnStatement	 
>4618	CallExpression	calcResidualAndBuffers ( refPoint , refColVar , idxBuf , refNum , frame , referenceToFrame , level , plotResidual )
>4619	ArgumentList	refPoint
>4620	Argument	plotResidual
>4621	Identifier	plotResidual
>4622	Argument	level
>4623	Identifier	level
>4624	Argument	referenceToFrame
>4625	Identifier	referenceToFrame
>4626	Argument	frame
>4627	Identifier	frame
>4628	Argument	refNum
>4629	Identifier	refNum
>4630	Argument	idxBuf
>4631	Identifier	idxBuf
>4632	Argument	refColVar
>4633	Identifier	refColVar
>4634	Argument	refPoint
>4635	Identifier	refPoint
>4636	Callee	calcResidualAndBuffers
>4637	Identifier	calcResidualAndBuffers
>4650	FunctionDef	SE3Tracker 
>4651	ParameterList	const Eigen 
>4652	Parameter	 
>4653	Identifier	plotResidual
>4654	ParameterType	bool
>4655	Parameter	 
>4656	Identifier	level
>4657	ParameterType	int
>4658	Parameter	 
>4659	Identifier	referenceToFrame
>4660	ParameterType	const Sophus 
>4661	Parameter	 
>4662	Identifier	frame
>4663	ParameterType	Frame *
>4664	Parameter	 
>4665	Identifier	refNum
>4666	ParameterType	int
>4667	Parameter	 
>4668	Identifier	idxBuf
>4669	ParameterType	int *
>4670	Parameter	 
>4671	Identifier	refColVar
>4672	ParameterType	const Eigen 
>4673	Parameter	 
>4674	Identifier	refPoint
>4675	ParameterType	const Eigen 
>4676	ReturnType	float
>4677	CompoundStatement	 
>4678	ReturnStatement	 
>4679	MultiplicativeExpression	sumResUnweighted / goodCount
>4680	Identifier	goodCount
>4681	Identifier	sumResUnweighted
>4682	ExpressionStatement	 
>4683	CallExpression	calcResidualAndBuffers_debugFinish ( w )
>4684	ArgumentList	w
>4685	Argument	w
>4686	Identifier	w
>4687	Callee	calcResidualAndBuffers_debugFinish
>4688	Identifier	calcResidualAndBuffers_debugFinish
>4689	ExpressionStatement	 
>4690	AssignmentExpr	affineEstimation_b_lastIt = ( sy - affineEstimation_a_lastIt * sx ) / sw
>4691	MultiplicativeExpression	( sy - affineEstimation_a_lastIt * sx ) / sw
>4692	Identifier	sw
>4693	AdditiveExpression	sy - affineEstimation_a_lastIt * sx
>4694	MultiplicativeExpression	affineEstimation_a_lastIt * sx
>4695	Identifier	sx
>4696	Identifier	affineEstimation_a_lastIt
>4697	Identifier	sy
>4698	Identifier	affineEstimation_b_lastIt
>4699	ExpressionStatement	 
>4700	AssignmentExpr	affineEstimation_a_lastIt = sqrtf ( ( syy - sy * sy / sw ) / ( sxx - sx * sx / sw ) )
>4701	CallExpression	sqrtf ( ( syy - sy * sy / sw ) / ( sxx - sx * sx / sw ) )
>4702	ArgumentList	( syy - sy * sy / sw ) / ( sxx - sx * sx / sw )
>4703	Argument	( syy - sy * sy / sw ) / ( sxx - sx * sx / sw )
>4704	MultiplicativeExpression	( syy - sy * sy / sw ) / ( sxx - sx * sx / sw )
>4705	AdditiveExpression	sxx - sx * sx / sw
>4706	MultiplicativeExpression	sx * sx / sw
>4707	MultiplicativeExpression	sx / sw
>4708	Identifier	sw
>4709	Identifier	sx
>4710	Identifier	sx
>4711	Identifier	sxx
>4712	AdditiveExpression	syy - sy * sy / sw
>4713	MultiplicativeExpression	sy * sy / sw
>4714	MultiplicativeExpression	sy / sw
>4715	Identifier	sw
>4716	Identifier	sy
>4717	Identifier	sy
>4718	Identifier	syy
>4719	Callee	sqrtf
>4720	Identifier	sqrtf
>4721	Identifier	affineEstimation_a_lastIt
>4722	ExpressionStatement	 
>4723	AssignmentExpr	lastMeanRes = sumSignedRes / goodCount
>4724	MultiplicativeExpression	sumSignedRes / goodCount
>4725	Identifier	goodCount
>4726	Identifier	sumSignedRes
>4727	Identifier	lastMeanRes
>4728	ExpressionStatement	 
>4729	AssignmentExpr	lastBadCount = badCount
>4730	Identifier	badCount
>4731	Identifier	lastBadCount
>4732	ExpressionStatement	 
>4733	AssignmentExpr	lastGoodCount = goodCount
>4734	Identifier	goodCount
>4735	Identifier	lastGoodCount
>4736	ExpressionStatement	 
>4737	AssignmentExpr	pointUsage = usageCount / ( float ) refNum
>4738	MultiplicativeExpression	usageCount / ( float ) refNum
>4739	CastExpression	( float ) refNum
>4740	Identifier	refNum
>4741	CastTarget	float
>4742	Identifier	usageCount
>4743	Identifier	pointUsage
>4744	ExpressionStatement	 
>4745	AssignmentExpr	buf_warped_size = idx
>4746	Identifier	idx
>4747	Identifier	buf_warped_size
>4748	ForStatement	for ( ; refPoint < refPoint_max ; refPoint ++ , refColVar ++ , idxBuf ++ )
>4749	CompoundStatement	 
>4750	IfStatement	if ( plotTrackingIterationInfo || plotResidual )
>4751	CompoundStatement	 
>4752	IfStatement	if ( isGood )
>4753	ElseStatement	else
>4754	ExpressionStatement	 
>4755	CallExpression	setPixelInCvMat ( & debugImageResiduals , cv 
>4756	ArgumentList	& debugImageResiduals
>4757	Argument	width / w
>4758	MultiplicativeExpression	width / w
>4759	Identifier	w
>4760	Identifier	width
>4761	Argument	y
>4762	Identifier	y
>4763	Argument	x
>4764	Identifier	x
>4765	Argument	cv 
>4766	CallExpression	cv 
>4767	ArgumentList	0
>4768	Argument	255
>4769	PrimaryExpression	255
>4770	Argument	0
>4771	PrimaryExpression	0
>4772	Argument	0
>4773	PrimaryExpression	0
>4774	Callee	cv 
>4775	Identifier	cv 
>4776	Argument	& debugImageResiduals
>4777	UnaryOp	& debugImageResiduals
>4778	Identifier	debugImageResiduals
>4779	UnaryOperator	&
>4780	Callee	setPixelInCvMat
>4781	Identifier	setPixelInCvMat
>4782	ExpressionStatement	 
>4783	CallExpression	setPixelInCvMat ( & debugImageResiduals , getGrayCvPixel ( residual + 128 ) , x , y , ( width / w ) )
>4784	ArgumentList	& debugImageResiduals
>4785	Argument	width / w
>4786	MultiplicativeExpression	width / w
>4787	Identifier	w
>4788	Identifier	width
>4789	Argument	y
>4790	Identifier	y
>4791	Argument	x
>4792	Identifier	x
>4793	Argument	getGrayCvPixel ( residual + 128 )
>4794	CallExpression	getGrayCvPixel ( residual + 128 )
>4795	ArgumentList	residual + 128
>4796	Argument	residual + 128
>4797	AdditiveExpression	residual + 128
>4798	PrimaryExpression	128
>4799	Identifier	residual
>4800	Callee	getGrayCvPixel
>4801	Identifier	getGrayCvPixel
>4802	Argument	& debugImageResiduals
>4803	UnaryOp	& debugImageResiduals
>4804	Identifier	debugImageResiduals
>4805	UnaryOperator	&
>4806	Callee	setPixelInCvMat
>4807	Identifier	setPixelInCvMat
>4808	Condition	 
>4809	Identifier	isGood
>4810	IfStatement	if ( plotTrackingIterationInfo )
>4811	CompoundStatement	 
>4812	ExpressionStatement	 
>4813	CallExpression	setPixelInCvMat ( & debugImageOldImageWarped , getGrayCvPixel ( ( float ) resInterp [ 2 ] ) , x , y , ( width / \
>4814	ArgumentList	& debugImageOldImageWarped
>4815	Argument	width / w
>4816	MultiplicativeExpression	width / w
>4817	Identifier	w
>4818	Identifier	width
>4819	Argument	y
>4820	Identifier	y
>4821	Argument	x
>4822	Identifier	x
>4823	Argument	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>4824	CallExpression	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>4825	ArgumentList	( float ) resInterp [ 2 ]
>4826	Argument	( float ) resInterp [ 2 ]
>4827	CastExpression	( float ) resInterp [ 2 ]
>4828	ArrayIndexing	resInterp [ 2 ]
>4829	PrimaryExpression	2
>4830	Identifier	resInterp
>4831	CastTarget	float
>4832	Callee	getGrayCvPixel
>4833	Identifier	getGrayCvPixel
>4834	Argument	& debugImageOldImageWarped
>4835	UnaryOp	& debugImageOldImageWarped
>4836	Identifier	debugImageOldImageWarped
>4837	UnaryOperator	&
>4838	Callee	setPixelInCvMat
>4839	Identifier	setPixelInCvMat
>4840	ExpressionStatement	 
>4841	CallExpression	setPixelInCvMat ( & debugImageOldImageSource , getGrayCvPixel ( ( float ) resInterp [ 2 ] ) , u_new + 0.5 , v_new + \
>4842	ArgumentList	& debugImageOldImageSource
>4843	Argument	width / w
>4844	MultiplicativeExpression	width / w
>4845	Identifier	w
>4846	Identifier	width
>4847	Argument	v_new + 0.5
>4848	AdditiveExpression	v_new + 0.5
>4849	PrimaryExpression	0.5
>4850	Identifier	v_new
>4851	Argument	u_new + 0.5
>4852	AdditiveExpression	u_new + 0.5
>4853	PrimaryExpression	0.5
>4854	Identifier	u_new
>4855	Argument	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>4856	CallExpression	getGrayCvPixel ( ( float ) resInterp [ 2 ] )
>4857	ArgumentList	( float ) resInterp [ 2 ]
>4858	Argument	( float ) resInterp [ 2 ]
>4859	CastExpression	( float ) resInterp [ 2 ]
>4860	ArrayIndexing	resInterp [ 2 ]
>4861	PrimaryExpression	2
>4862	Identifier	resInterp
>4863	CastTarget	float
>4864	Callee	getGrayCvPixel
>4865	Identifier	getGrayCvPixel
>4866	Argument	& debugImageOldImageSource
>4867	UnaryOp	& debugImageOldImageSource
>4868	Identifier	debugImageOldImageSource
>4869	UnaryOperator	&
>4870	Callee	setPixelInCvMat
>4871	Identifier	setPixelInCvMat
>4872	Condition	 
>4873	Identifier	plotTrackingIterationInfo
>4874	IdentifierDeclStatement	 
>4875	IdentifierDecl	y = point [ 1 ] / point [ 2 ] + 0.5f
>4876	AssignmentExpr	y = point [ 1 ] / point [ 2 ] + 0.5f
>4877	AdditiveExpression	point [ 1 ] / point [ 2 ] + 0.5f
>4878	PrimaryExpression	0.5f
>4879	MultiplicativeExpression	point [ 1 ] / point [ 2 ]
>4880	ArrayIndexing	point [ 2 ]
>4881	PrimaryExpression	2
>4882	Identifier	point
>4883	ArrayIndexing	point [ 1 ]
>4884	PrimaryExpression	1
>4885	Identifier	point
>4886	Identifier	y
>4887	Identifier	y
>4888	IdentifierDeclType	int
>4889	IdentifierDeclStatement	 
>4890	IdentifierDecl	x = point [ 0 ] / point [ 2 ] + 0.5f
>4891	AssignmentExpr	x = point [ 0 ] / point [ 2 ] + 0.5f
>4892	AdditiveExpression	point [ 0 ] / point [ 2 ] + 0.5f
>4893	PrimaryExpression	0.5f
>4894	MultiplicativeExpression	point [ 0 ] / point [ 2 ]
>4895	ArrayIndexing	point [ 2 ]
>4896	PrimaryExpression	2
>4897	Identifier	point
>4898	ArrayIndexing	point [ 0 ]
>4899	PrimaryExpression	0
>4900	Identifier	point
>4901	Identifier	x
>4902	Identifier	x
>4903	IdentifierDeclType	int
>4904	IdentifierDeclStatement	 
>4905	IdentifierDecl	point = KLvl * ( * refPoint )
>4906	AssignmentExpr	point = KLvl * ( * refPoint )
>4907	MultiplicativeExpression	KLvl * ( * refPoint )
>4908	UnaryOp	* refPoint
>4909	Identifier	refPoint
>4910	UnaryOperator	*
>4911	Identifier	KLvl
>4912	Identifier	point
>4913	Identifier	point
>4914	IdentifierDeclType	Eigen 
>4915	Condition	 
>4916	OrExpression	plotTrackingIterationInfo || plotResidual
>4917	Identifier	plotResidual
>4918	Identifier	plotTrackingIterationInfo
>4919	ExpressionStatement	 
>4920	AssignmentExpr	usageCount += depthChange < 1 ? depthChange 
>4921	ConditionalExpression	depthChange < 1 ? depthChange 
>4922	PrimaryExpression	1
>4923	Identifier	depthChange
>4924	Condition	depthChange < 1
>4925	RelationalExpression	depthChange < 1
>4926	PrimaryExpression	1
>4927	Identifier	depthChange
>4928	Identifier	usageCount
>4929	IdentifierDeclStatement	 
>4930	IdentifierDecl	depthChange = ( * refPoint ) [ 2 ] / Wxp [ 2 ]
>4931	AssignmentExpr	depthChange = ( * refPoint ) [ 2 ] / Wxp [ 2 ]
>4932	MultiplicativeExpression	( * refPoint ) [ 2 ] / Wxp [ 2 ]
>4933	ArrayIndexing	Wxp [ 2 ]
>4934	PrimaryExpression	2
>4935	Identifier	Wxp
>4936	ArrayIndexing	( * refPoint ) [ 2 ]
>4937	PrimaryExpression	2
>4938	UnaryOp	* refPoint
>4939	Identifier	refPoint
>4940	UnaryOperator	*
>4941	Identifier	depthChange
>4942	Identifier	depthChange
>4943	IdentifierDeclType	float
>4944	IfStatement	if ( isGood )
>4945	ElseStatement	else
>4946	ExpressionStatement	 
>4947	IncDecOp	badCount ++
>4948	IncDec	++
>4949	Identifier	badCount
>4950	CompoundStatement	 
>4951	ExpressionStatement	 
>4952	IncDecOp	goodCount ++
>4953	IncDec	++
>4954	Identifier	goodCount
>4955	ExpressionStatement	 
>4956	AssignmentExpr	sumSignedRes += residual
>4957	Identifier	residual
>4958	Identifier	sumSignedRes
>4959	ExpressionStatement	 
>4960	AssignmentExpr	sumResUnweighted += residual * residual
>4961	MultiplicativeExpression	residual * residual
>4962	Identifier	residual
>4963	Identifier	residual
>4964	Identifier	sumResUnweighted
>4965	Condition	 
>4966	Identifier	isGood
>4967	ExpressionStatement	 
>4968	IncDecOp	idx ++
>4969	IncDec	++
>4970	Identifier	idx
>4971	ExpressionStatement	 
>4972	AssignmentExpr	* ( buf_idepthVar + idx ) = ( * refColVar ) [ 1 ]
>4973	ArrayIndexing	( * refColVar ) [ 1 ]
>4974	PrimaryExpression	1
>4975	UnaryOp	* refColVar
>4976	Identifier	refColVar
>4977	UnaryOperator	*
>4978	UnaryOp	* ( buf_idepthVar + idx )
>4979	AdditiveExpression	buf_idepthVar + idx
>4980	Identifier	idx
>4981	Identifier	buf_idepthVar
>4982	UnaryOperator	*
>4983	ExpressionStatement	 
>4984	AssignmentExpr	* ( buf_d + idx ) = 1.0f / ( * refPoint ) [ 2 ]
>4985	MultiplicativeExpression	1.0f / ( * refPoint ) [ 2 ]
>4986	ArrayIndexing	( * refPoint ) [ 2 ]
>4987	PrimaryExpression	2
>4988	UnaryOp	* refPoint
>4989	Identifier	refPoint
>4990	UnaryOperator	*
>4991	PrimaryExpression	1.0f
>4992	UnaryOp	* ( buf_d + idx )
>4993	AdditiveExpression	buf_d + idx
>4994	Identifier	idx
>4995	Identifier	buf_d
>4996	UnaryOperator	*
>4997	ExpressionStatement	 
>4998	AssignmentExpr	* ( buf_warped_residual + idx ) = residual
>4999	Identifier	residual
>5000	UnaryOp	* ( buf_warped_residual + idx )
>5001	AdditiveExpression	buf_warped_residual + idx
>5002	Identifier	idx
>5003	Identifier	buf_warped_residual
>5004	UnaryOperator	*
>5005	ExpressionStatement	 
>5006	AssignmentExpr	* ( buf_warped_dy + idx ) = fy_l * resInterp [ 1 ]
>5007	MultiplicativeExpression	fy_l * resInterp [ 1 ]
>5008	ArrayIndexing	resInterp [ 1 ]
>5009	PrimaryExpression	1
>5010	Identifier	resInterp
>5011	Identifier	fy_l
>5012	UnaryOp	* ( buf_warped_dy + idx )
>5013	AdditiveExpression	buf_warped_dy + idx
>5014	Identifier	idx
>5015	Identifier	buf_warped_dy
>5016	UnaryOperator	*
>5017	ExpressionStatement	 
>5018	AssignmentExpr	* ( buf_warped_dx + idx ) = fx_l * resInterp [ 0 ]
>5019	MultiplicativeExpression	fx_l * resInterp [ 0 ]
>5020	ArrayIndexing	resInterp [ 0 ]
>5021	PrimaryExpression	0
>5022	Identifier	resInterp
>5023	Identifier	fx_l
>5024	UnaryOp	* ( buf_warped_dx + idx )
>5025	AdditiveExpression	buf_warped_dx + idx
>5026	Identifier	idx
>5027	Identifier	buf_warped_dx
>5028	UnaryOperator	*
>5029	ExpressionStatement	 
>5030	AssignmentExpr	* ( buf_warped_z + idx ) = Wxp ( 2 )
>5031	CallExpression	Wxp ( 2 )
>5032	ArgumentList	2
>5033	Argument	2
>5034	PrimaryExpression	2
>5035	Callee	Wxp
>5036	Identifier	Wxp
>5037	UnaryOp	* ( buf_warped_z + idx )
>5038	AdditiveExpression	buf_warped_z + idx
>5039	Identifier	idx
>5040	Identifier	buf_warped_z
>5041	UnaryOperator	*
>5042	ExpressionStatement	 
>5043	AssignmentExpr	* ( buf_warped_y + idx ) = Wxp ( 1 )
>5044	CallExpression	Wxp ( 1 )
>5045	ArgumentList	1
>5046	Argument	1
>5047	PrimaryExpression	1
>5048	Callee	Wxp
>5049	Identifier	Wxp
>5050	UnaryOp	* ( buf_warped_y + idx )
>5051	AdditiveExpression	buf_warped_y + idx
>5052	Identifier	idx
>5053	Identifier	buf_warped_y
>5054	UnaryOperator	*
>5055	ExpressionStatement	 
>5056	AssignmentExpr	* ( buf_warped_x + idx ) = Wxp ( 0 )
>5057	CallExpression	Wxp ( 0 )
>5058	ArgumentList	0
>5059	Argument	0
>5060	PrimaryExpression	0
>5061	Callee	Wxp
>5062	Identifier	Wxp
>5063	UnaryOp	* ( buf_warped_x + idx )
>5064	AdditiveExpression	buf_warped_x + idx
>5065	Identifier	idx
>5066	Identifier	buf_warped_x
>5067	UnaryOperator	*
>5068	IfStatement	if ( isGoodOutBuffer != 0 )
>5069	ExpressionStatement	 
>5070	AssignmentExpr	isGoodOutBuffer [ * idxBuf ] = isGood
>5071	Identifier	isGood
>5072	ArrayIndexing	isGoodOutBuffer [ * idxBuf ]
>5073	UnaryOp	* idxBuf
>5074	Identifier	idxBuf
>5075	UnaryOperator	*
>5076	Identifier	isGoodOutBuffer
>5077	Condition	 
>5078	EqualityExpression	isGoodOutBuffer != 0
>5079	PrimaryExpression	0
>5080	Identifier	isGoodOutBuffer
>5081	IdentifierDeclStatement	 
>5082	IdentifierDecl	isGood = residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * ( resInterp [ 0 ] * resInterp [ 0 ] + \
>5083	AssignmentExpr	isGood = residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * ( resInterp [ 0 ] * resInterp [ \
>5084	RelationalExpression	residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * ( resInterp [ 0 ] * resInterp [ 0 ] + \
>5085	PrimaryExpression	1
>5086	MultiplicativeExpression	residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * ( resInterp [ 0 ] * resInterp [ 0 ] + \
>5087	MultiplicativeExpression	residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * ( resInterp [ 0 ] * resInterp [ 0 ] + resInterp [ \
>5088	AdditiveExpression	MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * ( resInterp [ 0 ] * resInterp [ 0 ] + resInterp [ 1 ] * resInterp [ \
>5089	MultiplicativeExpression	MAX_DIFF_GRAD_MULT * ( resInterp [ 0 ] * resInterp [ 0 ] + resInterp [ 1 ] * resInterp [ 1 ] )
>5090	AdditiveExpression	resInterp [ 0 ] * resInterp [ 0 ] + resInterp [ 1 ] * resInterp [ 1 ]
>5091	MultiplicativeExpression	resInterp [ 1 ] * resInterp [ 1 ]
>5092	ArrayIndexing	resInterp [ 1 ]
>5093	PrimaryExpression	1
>5094	Identifier	resInterp
>5095	ArrayIndexing	resInterp [ 1 ]
>5096	PrimaryExpression	1
>5097	Identifier	resInterp
>5098	MultiplicativeExpression	resInterp [ 0 ] * resInterp [ 0 ]
>5099	ArrayIndexing	resInterp [ 0 ]
>5100	PrimaryExpression	0
>5101	Identifier	resInterp
>5102	ArrayIndexing	resInterp [ 0 ]
>5103	PrimaryExpression	0
>5104	Identifier	resInterp
>5105	Identifier	MAX_DIFF_GRAD_MULT
>5106	Identifier	MAX_DIFF_CONSTANT
>5107	Identifier	residual
>5108	Identifier	residual
>5109	Identifier	isGood
>5110	Identifier	isGood
>5111	IdentifierDeclType	bool
>5112	ExpressionStatement	 
>5113	AssignmentExpr	sw += weight
>5114	Identifier	weight
>5115	Identifier	sw
>5116	ExpressionStatement	 
>5117	AssignmentExpr	sy += c2 * weight
>5118	MultiplicativeExpression	c2 * weight
>5119	Identifier	weight
>5120	Identifier	c2
>5121	Identifier	sy
>5122	ExpressionStatement	 
>5123	AssignmentExpr	sx += c1 * weight
>5124	MultiplicativeExpression	c1 * weight
>5125	Identifier	weight
>5126	Identifier	c1
>5127	Identifier	sx
>5128	ExpressionStatement	 
>5129	AssignmentExpr	syy += c2 * c2 * weight
>5130	MultiplicativeExpression	c2 * c2 * weight
>5131	MultiplicativeExpression	c2 * weight
>5132	Identifier	weight
>5133	Identifier	c2
>5134	Identifier	c2
>5135	Identifier	syy
>5136	ExpressionStatement	 
>5137	AssignmentExpr	sxx += c1 * c1 * weight
>5138	MultiplicativeExpression	c1 * c1 * weight
>5139	MultiplicativeExpression	c1 * weight
>5140	Identifier	weight
>5141	Identifier	c1
>5142	Identifier	c1
>5143	Identifier	sxx
>5144	IdentifierDeclStatement	 
>5145	IdentifierDecl	weight = fabsf ( residual ) < 5.0f ? 1 
>5146	AssignmentExpr	weight = fabsf ( residual ) < 5.0f ? 1 
>5147	ConditionalExpression	fabsf ( residual ) < 5.0f ? 1 
>5148	MultiplicativeExpression	5.0f / fabsf ( residual )
>5149	CallExpression	fabsf ( residual )
>5150	ArgumentList	residual
>5151	Argument	residual
>5152	Identifier	residual
>5153	Callee	fabsf
>5154	Identifier	fabsf
>5155	PrimaryExpression	5.0f
>5156	PrimaryExpression	1
>5157	Condition	fabsf ( residual ) < 5.0f
>5158	RelationalExpression	fabsf ( residual ) < 5.0f
>5159	PrimaryExpression	5.0f
>5160	CallExpression	fabsf ( residual )
>5161	ArgumentList	residual
>5162	Argument	residual
>5163	Identifier	residual
>5164	Callee	fabsf
>5165	Identifier	fabsf
>5166	Identifier	weight
>5167	Identifier	weight
>5168	IdentifierDeclType	float
>5169	IdentifierDeclStatement	 
>5170	IdentifierDecl	residual = c1 - c2
>5171	AssignmentExpr	residual = c1 - c2
>5172	AdditiveExpression	c1 - c2
>5173	Identifier	c2
>5174	Identifier	c1
>5175	Identifier	residual
>5176	Identifier	residual
>5177	IdentifierDeclType	float
>5178	IdentifierDeclStatement	 
>5179	IdentifierDecl	c2 = resInterp [ 2 ]
>5180	AssignmentExpr	c2 = resInterp [ 2 ]
>5181	ArrayIndexing	resInterp [ 2 ]
>5182	PrimaryExpression	2
>5183	Identifier	resInterp
>5184	Identifier	c2
>5185	Identifier	c2
>5186	IdentifierDeclType	float
>5187	IdentifierDeclStatement	 
>5188	IdentifierDecl	c1 = affineEstimation_a * ( * refColVar ) [ 0 ] + affineEstimation_b
>5189	AssignmentExpr	c1 = affineEstimation_a * ( * refColVar ) [ 0 ] + affineEstimation_b
>5190	AdditiveExpression	affineEstimation_a * ( * refColVar ) [ 0 ] + affineEstimation_b
>5191	Identifier	affineEstimation_b
>5192	MultiplicativeExpression	affineEstimation_a * ( * refColVar ) [ 0 ]
>5193	ArrayIndexing	( * refColVar ) [ 0 ]
>5194	PrimaryExpression	0
>5195	UnaryOp	* refColVar
>5196	Identifier	refColVar
>5197	UnaryOperator	*
>5198	Identifier	affineEstimation_a
>5199	Identifier	c1
>5200	Identifier	c1
>5201	IdentifierDeclType	float
>5202	IdentifierDeclStatement	 
>5203	IdentifierDecl	resInterp = getInterpolatedElement43 ( frame_gradients , u_new , v_new , w )
>5204	AssignmentExpr	resInterp = getInterpolatedElement43 ( frame_gradients , u_new , v_new , w )
>5205	CallExpression	getInterpolatedElement43 ( frame_gradients , u_new , v_new , w )
>5206	ArgumentList	frame_gradients
>5207	Argument	w
>5208	Identifier	w
>5209	Argument	v_new
>5210	Identifier	v_new
>5211	Argument	u_new
>5212	Identifier	u_new
>5213	Argument	frame_gradients
>5214	Identifier	frame_gradients
>5215	Callee	getInterpolatedElement43
>5216	Identifier	getInterpolatedElement43
>5217	Identifier	resInterp
>5218	Identifier	resInterp
>5219	IdentifierDeclType	Eigen 
>5220	IfStatement	if ( ! ( u_new > 1 && v_new > 1 && u_new < w - 2 && v_new < h - 2 ) )
>5221	CompoundStatement	 
>5222	ContinueStatement	 
>5223	IfStatement	if ( isGoodOutBuffer != 0 )
>5224	ExpressionStatement	 
>5225	AssignmentExpr	isGoodOutBuffer [ * idxBuf ] = false
>5226	Identifier	false
>5227	ArrayIndexing	isGoodOutBuffer [ * idxBuf ]
>5228	UnaryOp	* idxBuf
>5229	Identifier	idxBuf
>5230	UnaryOperator	*
>5231	Identifier	isGoodOutBuffer
>5232	Condition	 
>5233	EqualityExpression	isGoodOutBuffer != 0
>5234	PrimaryExpression	0
>5235	Identifier	isGoodOutBuffer
>5236	Condition	 
>5237	UnaryOp	! ( u_new > 1 && v_new > 1 && u_new < w - 2 && v_new < h - 2 )
>5238	AndExpression	u_new > 1 && v_new > 1 && u_new < w - 2 && v_new < h - 2
>5239	AndExpression	v_new > 1 && u_new < w - 2 && v_new < h - 2
>5240	AndExpression	u_new < w - 2 && v_new < h - 2
>5241	RelationalExpression	v_new < h - 2
>5242	AdditiveExpression	h - 2
>5243	PrimaryExpression	2
>5244	Identifier	h
>5245	Identifier	v_new
>5246	RelationalExpression	u_new < w - 2
>5247	AdditiveExpression	w - 2
>5248	PrimaryExpression	2
>5249	Identifier	w
>5250	Identifier	u_new
>5251	RelationalExpression	v_new > 1
>5252	PrimaryExpression	1
>5253	Identifier	v_new
>5254	RelationalExpression	u_new > 1
>5255	PrimaryExpression	1
>5256	Identifier	u_new
>5257	UnaryOperator	!
>5258	IdentifierDeclStatement	 
>5259	IdentifierDecl	v_new = ( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>5260	AssignmentExpr	v_new = ( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>5261	AdditiveExpression	( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l + cy_l
>5262	Identifier	cy_l
>5263	MultiplicativeExpression	( Wxp [ 1 ] / Wxp [ 2 ] ) * fy_l
>5264	Identifier	fy_l
>5265	MultiplicativeExpression	Wxp [ 1 ] / Wxp [ 2 ]
>5266	ArrayIndexing	Wxp [ 2 ]
>5267	PrimaryExpression	2
>5268	Identifier	Wxp
>5269	ArrayIndexing	Wxp [ 1 ]
>5270	PrimaryExpression	1
>5271	Identifier	Wxp
>5272	Identifier	v_new
>5273	Identifier	v_new
>5274	IdentifierDeclType	float
>5275	IdentifierDeclStatement	 
>5276	IdentifierDecl	u_new = ( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>5277	AssignmentExpr	u_new = ( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>5278	AdditiveExpression	( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l + cx_l
>5279	Identifier	cx_l
>5280	MultiplicativeExpression	( Wxp [ 0 ] / Wxp [ 2 ] ) * fx_l
>5281	Identifier	fx_l
>5282	MultiplicativeExpression	Wxp [ 0 ] / Wxp [ 2 ]
>5283	ArrayIndexing	Wxp [ 2 ]
>5284	PrimaryExpression	2
>5285	Identifier	Wxp
>5286	ArrayIndexing	Wxp [ 0 ]
>5287	PrimaryExpression	0
>5288	Identifier	Wxp
>5289	Identifier	u_new
>5290	Identifier	u_new
>5291	IdentifierDeclType	float
>5292	IdentifierDeclStatement	 
>5293	IdentifierDecl	Wxp = rotMat * ( * refPoint ) + transVec
>5294	AssignmentExpr	Wxp = rotMat * ( * refPoint ) + transVec
>5295	AdditiveExpression	rotMat * ( * refPoint ) + transVec
>5296	Identifier	transVec
>5297	MultiplicativeExpression	rotMat * ( * refPoint )
>5298	UnaryOp	* refPoint
>5299	Identifier	refPoint
>5300	UnaryOperator	*
>5301	Identifier	rotMat
>5302	Identifier	Wxp
>5303	Identifier	Wxp
>5304	IdentifierDeclType	Eigen 
>5305	Expression	 
>5306	Expression	refColVar ++ , idxBuf ++
>5307	IncDecOp	idxBuf ++
>5308	IncDec	++
>5309	Identifier	idxBuf
>5310	IncDecOp	refColVar ++
>5311	IncDec	++
>5312	Identifier	refColVar
>5313	IncDecOp	refPoint ++
>5314	IncDec	++
>5315	Identifier	refPoint
>5316	Condition	 
>5317	RelationalExpression	refPoint < refPoint_max
>5318	Identifier	refPoint_max
>5319	Identifier	refPoint
>5320	IdentifierDeclStatement	 
>5321	IdentifierDecl	usageCount = 0
>5322	AssignmentExpr	usageCount = 0
>5323	PrimaryExpression	0
>5324	Identifier	usageCount
>5325	Identifier	usageCount
>5326	IdentifierDeclType	float
>5327	IdentifierDeclStatement	 
>5328	IdentifierDecl	sw = 0
>5329	AssignmentExpr	sw = 0
>5330	PrimaryExpression	0
>5331	Identifier	sw
>5332	Identifier	sw
>5333	IdentifierDeclType	float
>5334	IdentifierDecl	sy = 0
>5335	AssignmentExpr	sy = 0
>5336	PrimaryExpression	0
>5337	Identifier	sy
>5338	Identifier	sy
>5339	IdentifierDeclType	float
>5340	IdentifierDecl	sx = 0
>5341	AssignmentExpr	sx = 0
>5342	PrimaryExpression	0
>5343	Identifier	sx
>5344	Identifier	sx
>5345	IdentifierDeclType	float
>5346	IdentifierDecl	syy = 0
>5347	AssignmentExpr	syy = 0
>5348	PrimaryExpression	0
>5349	Identifier	syy
>5350	Identifier	syy
>5351	IdentifierDeclType	float
>5352	IdentifierDecl	sxx = 0
>5353	AssignmentExpr	sxx = 0
>5354	PrimaryExpression	0
>5355	Identifier	sxx
>5356	Identifier	sxx
>5357	IdentifierDeclType	float
>5358	IdentifierDeclStatement	 
>5359	IdentifierDecl	sumSignedRes = 0
>5360	AssignmentExpr	sumSignedRes = 0
>5361	PrimaryExpression	0
>5362	Identifier	sumSignedRes
>5363	Identifier	sumSignedRes
>5364	IdentifierDeclType	float
>5365	IdentifierDeclStatement	 
>5366	IdentifierDecl	badCount = 0
>5367	AssignmentExpr	badCount = 0
>5368	PrimaryExpression	0
>5369	Identifier	badCount
>5370	Identifier	badCount
>5371	IdentifierDeclType	int
>5372	IdentifierDeclStatement	 
>5373	IdentifierDecl	goodCount = 0
>5374	AssignmentExpr	goodCount = 0
>5375	PrimaryExpression	0
>5376	Identifier	goodCount
>5377	Identifier	goodCount
>5378	IdentifierDeclType	int
>5379	IdentifierDeclStatement	 
>5380	IdentifierDecl	* isGoodOutBuffer = idxBuf != 0 ? frame -> refPixelWasGood ( ) 
>5381	AssignmentExpr	* isGoodOutBuffer = idxBuf != 0 ? frame -> refPixelWasGood ( ) 
>5382	ConditionalExpression	idxBuf != 0 ? frame -> refPixelWasGood ( ) 
>5383	PrimaryExpression	0
>5384	CallExpression	frame -> refPixelWasGood ( )
>5385	ArgumentList	 
>5386	Callee	frame -> refPixelWasGood
>5387	PtrMemberAccess	frame -> refPixelWasGood
>5388	Identifier	refPixelWasGood
>5389	Identifier	frame
>5390	Condition	idxBuf != 0
>5391	EqualityExpression	idxBuf != 0
>5392	PrimaryExpression	0
>5393	Identifier	idxBuf
>5394	Identifier	isGoodOutBuffer
>5395	Identifier	isGoodOutBuffer
>5396	IdentifierDeclType	bool *
>5397	IdentifierDeclStatement	 
>5398	IdentifierDecl	sumResUnweighted = 0
>5399	AssignmentExpr	sumResUnweighted = 0
>5400	PrimaryExpression	0
>5401	Identifier	sumResUnweighted
>5402	Identifier	sumResUnweighted
>5403	IdentifierDeclType	float
>5404	IdentifierDeclStatement	 
>5405	IdentifierDecl	idx = 0
>5406	AssignmentExpr	idx = 0
>5407	PrimaryExpression	0
>5408	Identifier	idx
>5409	Identifier	idx
>5410	IdentifierDeclType	int
>5411	IdentifierDeclStatement	 
>5412	IdentifierDecl	* frame_gradients = frame -> gradients ( level )
>5413	AssignmentExpr	* frame_gradients = frame -> gradients ( level )
>5414	CallExpression	frame -> gradients ( level )
>5415	ArgumentList	level
>5416	Argument	level
>5417	Identifier	level
>5418	Callee	frame -> gradients
>5419	PtrMemberAccess	frame -> gradients
>5420	Identifier	gradients
>5421	Identifier	frame
>5422	Identifier	frame_gradients
>5423	Identifier	frame_gradients
>5424	IdentifierDeclType	const Eigen 
>5425	IdentifierDeclStatement	 
>5426	IdentifierDecl	* refPoint_max = refPoint + refNum
>5427	AssignmentExpr	* refPoint_max = refPoint + refNum
>5428	AdditiveExpression	refPoint + refNum
>5429	Identifier	refNum
>5430	Identifier	refPoint
>5431	Identifier	refPoint_max
>5432	Identifier	refPoint_max
>5433	IdentifierDeclType	const Eigen 
>5434	IdentifierDeclStatement	 
>5435	IdentifierDecl	transVec = referenceToFrame . translation ( )
>5436	AssignmentExpr	transVec = referenceToFrame . translation ( )
>5437	CallExpression	referenceToFrame . translation ( )
>5438	ArgumentList	 
>5439	Callee	referenceToFrame . translation
>5440	MemberAccess	referenceToFrame . translation
>5441	Identifier	translation
>5442	Identifier	referenceToFrame
>5443	Identifier	transVec
>5444	Identifier	transVec
>5445	IdentifierDeclType	Eigen 
>5446	IdentifierDeclStatement	 
>5447	IdentifierDecl	rotMat = referenceToFrame . rotationMatrix ( )
>5448	AssignmentExpr	rotMat = referenceToFrame . rotationMatrix ( )
>5449	CallExpression	referenceToFrame . rotationMatrix ( )
>5450	ArgumentList	 
>5451	Callee	referenceToFrame . rotationMatrix
>5452	MemberAccess	referenceToFrame . rotationMatrix
>5453	Identifier	rotationMatrix
>5454	Identifier	referenceToFrame
>5455	Identifier	rotMat
>5456	Identifier	rotMat
>5457	IdentifierDeclType	Eigen 
>5458	IdentifierDeclStatement	 
>5459	IdentifierDecl	cy_l = KLvl ( 1 , 2 )
>5460	AssignmentExpr	cy_l = KLvl ( 1 , 2 )
>5461	CallExpression	KLvl ( 1 , 2 )
>5462	ArgumentList	1
>5463	Argument	2
>5464	PrimaryExpression	2
>5465	Argument	1
>5466	PrimaryExpression	1
>5467	Callee	KLvl
>5468	Identifier	KLvl
>5469	Identifier	cy_l
>5470	Identifier	cy_l
>5471	IdentifierDeclType	float
>5472	IdentifierDeclStatement	 
>5473	IdentifierDecl	cx_l = KLvl ( 0 , 2 )
>5474	AssignmentExpr	cx_l = KLvl ( 0 , 2 )
>5475	CallExpression	KLvl ( 0 , 2 )
>5476	ArgumentList	0
>5477	Argument	2
>5478	PrimaryExpression	2
>5479	Argument	0
>5480	PrimaryExpression	0
>5481	Callee	KLvl
>5482	Identifier	KLvl
>5483	Identifier	cx_l
>5484	Identifier	cx_l
>5485	IdentifierDeclType	float
>5486	IdentifierDeclStatement	 
>5487	IdentifierDecl	fy_l = KLvl ( 1 , 1 )
>5488	AssignmentExpr	fy_l = KLvl ( 1 , 1 )
>5489	CallExpression	KLvl ( 1 , 1 )
>5490	ArgumentList	1
>5491	Argument	1
>5492	PrimaryExpression	1
>5493	Argument	1
>5494	PrimaryExpression	1
>5495	Callee	KLvl
>5496	Identifier	KLvl
>5497	Identifier	fy_l
>5498	Identifier	fy_l
>5499	IdentifierDeclType	float
>5500	IdentifierDeclStatement	 
>5501	IdentifierDecl	fx_l = KLvl ( 0 , 0 )
>5502	AssignmentExpr	fx_l = KLvl ( 0 , 0 )
>5503	CallExpression	KLvl ( 0 , 0 )
>5504	ArgumentList	0
>5505	Argument	0
>5506	PrimaryExpression	0
>5507	Argument	0
>5508	PrimaryExpression	0
>5509	Callee	KLvl
>5510	Identifier	KLvl
>5511	Identifier	fx_l
>5512	Identifier	fx_l
>5513	IdentifierDeclType	float
>5514	IdentifierDeclStatement	 
>5515	IdentifierDecl	KLvl = frame -> K ( level )
>5516	AssignmentExpr	KLvl = frame -> K ( level )
>5517	CallExpression	frame -> K ( level )
>5518	ArgumentList	level
>5519	Argument	level
>5520	Identifier	level
>5521	Callee	frame -> K
>5522	PtrMemberAccess	frame -> K
>5523	Identifier	K
>5524	Identifier	frame
>5525	Identifier	KLvl
>5526	Identifier	KLvl
>5527	IdentifierDeclType	Eigen 
>5528	IdentifierDeclStatement	 
>5529	IdentifierDecl	h = frame -> height ( level )
>5530	AssignmentExpr	h = frame -> height ( level )
>5531	CallExpression	frame -> height ( level )
>5532	ArgumentList	level
>5533	Argument	level
>5534	Identifier	level
>5535	Callee	frame -> height
>5536	PtrMemberAccess	frame -> height
>5537	Identifier	height
>5538	Identifier	frame
>5539	Identifier	h
>5540	Identifier	h
>5541	IdentifierDeclType	int
>5542	IdentifierDeclStatement	 
>5543	IdentifierDecl	w = frame -> width ( level )
>5544	AssignmentExpr	w = frame -> width ( level )
>5545	CallExpression	frame -> width ( level )
>5546	ArgumentList	level
>5547	Argument	level
>5548	Identifier	level
>5549	Callee	frame -> width
>5550	PtrMemberAccess	frame -> width
>5551	Identifier	width
>5552	Identifier	frame
>5553	Identifier	w
>5554	Identifier	w
>5555	IdentifierDeclType	int
>5556	IfStatement	if ( plotResidual )
>5557	ExpressionStatement	 
>5558	CallExpression	debugImageResiduals . setTo ( 0 )
>5559	ArgumentList	0
>5560	Argument	0
>5561	PrimaryExpression	0
>5562	Callee	debugImageResiduals . setTo
>5563	MemberAccess	debugImageResiduals . setTo
>5564	Identifier	setTo
>5565	Identifier	debugImageResiduals
>5566	Condition	 
>5567	Identifier	plotResidual
>5568	ExpressionStatement	 
>5569	CallExpression	calcResidualAndBuffers_debugStart ( )
>5570	ArgumentList	 
>5571	Callee	calcResidualAndBuffers_debugStart
>5572	Identifier	calcResidualAndBuffers_debugStart
>5686	FunctionDef	SE3Tracker 
>5687	ParameterList	LGS6 & ls
>5688	Parameter	 
>5689	Identifier	ls
>5690	ParameterType	LGS6 &
>5691	ReturnType	void
>5692	CompoundStatement	 
>5693	ExpressionStatement	 
>5694	CallExpression	ls . finish ( )
>5695	ArgumentList	 
>5696	Callee	ls . finish
>5697	MemberAccess	ls . finish
>5698	Identifier	finish
>5699	Identifier	ls
>5700	ForStatement	for ( int i = 0 ; i < buf_warped_size - 3 ; i += 4 )
>5701	CompoundStatement	 
>5702	IfStatement	if ( i + 3 < buf_warped_size )
>5703	ElseStatement	else
>5704	CompoundStatement	 
>5705	ForStatement	for ( int k = 0 ; i + k < buf_warped_size ; k ++ )
>5706	CompoundStatement	 
>5707	ExpressionStatement	 
>5708	CallExpression	ls . update ( v6 , * ( buf_warped_residual + i + k ) , * ( buf_weight_p + i + k ) )
>5709	ArgumentList	v6
>5710	Argument	* ( buf_weight_p + i + k )
>5711	UnaryOp	* ( buf_weight_p + i + k )
>5712	AdditiveExpression	buf_weight_p + i + k
>5713	AdditiveExpression	i + k
>5714	Identifier	k
>5715	Identifier	i
>5716	Identifier	buf_weight_p
>5717	UnaryOperator	*
>5718	Argument	* ( buf_warped_residual + i + k )
>5719	UnaryOp	* ( buf_warped_residual + i + k )
>5720	AdditiveExpression	buf_warped_residual + i + k
>5721	AdditiveExpression	i + k
>5722	Identifier	k
>5723	Identifier	i
>5724	Identifier	buf_warped_residual
>5725	UnaryOperator	*
>5726	Argument	v6
>5727	Identifier	v6
>5728	Callee	ls . update
>5729	MemberAccess	ls . update
>5730	Identifier	update
>5731	Identifier	ls
>5732	ExpressionStatement	 
>5733	Expression	v6 << SSEE ( J61 , k ) , SSEE ( J62 , k ) , SSEE ( J63 , k ) , SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , \
>5734	Expression	SSEE ( J62 , k ) , SSEE ( J63 , k ) , SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , k )
>5735	Expression	SSEE ( J63 , k ) , SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , k )
>5736	Expression	SSEE ( J64 , k ) , SSEE ( J65 , k ) , SSEE ( J66 , k )
>5737	Expression	SSEE ( J65 , k ) , SSEE ( J66 , k )
>5738	CallExpression	SSEE ( J66 , k )
>5739	ArgumentList	J66
>5740	Argument	k
>5741	Identifier	k
>5742	Argument	J66
>5743	Identifier	J66
>5744	Callee	SSEE
>5745	Identifier	SSEE
>5746	CallExpression	SSEE ( J65 , k )
>5747	ArgumentList	J65
>5748	Argument	k
>5749	Identifier	k
>5750	Argument	J65
>5751	Identifier	J65
>5752	Callee	SSEE
>5753	Identifier	SSEE
>5754	CallExpression	SSEE ( J64 , k )
>5755	ArgumentList	J64
>5756	Argument	k
>5757	Identifier	k
>5758	Argument	J64
>5759	Identifier	J64
>5760	Callee	SSEE
>5761	Identifier	SSEE
>5762	CallExpression	SSEE ( J63 , k )
>5763	ArgumentList	J63
>5764	Argument	k
>5765	Identifier	k
>5766	Argument	J63
>5767	Identifier	J63
>5768	Callee	SSEE
>5769	Identifier	SSEE
>5770	CallExpression	SSEE ( J62 , k )
>5771	ArgumentList	J62
>5772	Argument	k
>5773	Identifier	k
>5774	Argument	J62
>5775	Identifier	J62
>5776	Callee	SSEE
>5777	Identifier	SSEE
>5778	ShiftExpression	v6 << SSEE ( J61 , k )
>5779	CallExpression	SSEE ( J61 , k )
>5780	ArgumentList	J61
>5781	Argument	k
>5782	Identifier	k
>5783	Argument	J61
>5784	Identifier	J61
>5785	Callee	SSEE
>5786	Identifier	SSEE
>5787	Identifier	v6
>5788	IdentifierDeclStatement	 
>5789	IdentifierDecl	v6
>5790	Identifier	v6
>5791	IdentifierDeclType	Vector6
>5792	IncDecOp	 
>5793	IncDec	++
>5794	Identifier	k
>5795	Condition	 
>5796	RelationalExpression	i + k < buf_warped_size
>5797	Identifier	buf_warped_size
>5798	AdditiveExpression	i + k
>5799	Identifier	k
>5800	Identifier	i
>5801	ForInit	 
>5802	IdentifierDeclStatement	int k = 0 ;
>5803	IdentifierDecl	k = 0
>5804	AssignmentExpr	k = 0
>5805	PrimaryExpression	0
>5806	Identifier	k
>5807	Identifier	k
>5808	IdentifierDeclType	int
>5809	CompoundStatement	 
>5810	ExpressionStatement	 
>5811	CallExpression	ls . updateSSE ( J61 , J62 , J63 , J64 , J65 , J66 , _mm_load_ps ( buf_warped_residual + i ) , _mm_load_ps ( buf_\
>5812	ArgumentList	J61
>5813	Argument	_mm_load_ps ( buf_weight_p + i )
>5814	CallExpression	_mm_load_ps ( buf_weight_p + i )
>5815	ArgumentList	buf_weight_p + i
>5816	Argument	buf_weight_p + i
>5817	AdditiveExpression	buf_weight_p + i
>5818	Identifier	i
>5819	Identifier	buf_weight_p
>5820	Callee	_mm_load_ps
>5821	Identifier	_mm_load_ps
>5822	Argument	_mm_load_ps ( buf_warped_residual + i )
>5823	CallExpression	_mm_load_ps ( buf_warped_residual + i )
>5824	ArgumentList	buf_warped_residual + i
>5825	Argument	buf_warped_residual + i
>5826	AdditiveExpression	buf_warped_residual + i
>5827	Identifier	i
>5828	Identifier	buf_warped_residual
>5829	Callee	_mm_load_ps
>5830	Identifier	_mm_load_ps
>5831	Argument	J66
>5832	Identifier	J66
>5833	Argument	J65
>5834	Identifier	J65
>5835	Argument	J64
>5836	Identifier	J64
>5837	Argument	J63
>5838	Identifier	J63
>5839	Argument	J62
>5840	Identifier	J62
>5841	Argument	J61
>5842	Identifier	J61
>5843	Callee	ls . updateSSE
>5844	MemberAccess	ls . updateSSE
>5845	Identifier	updateSSE
>5846	Identifier	ls
>5847	Condition	 
>5848	RelationalExpression	i + 3 < buf_warped_size
>5849	Identifier	buf_warped_size
>5850	AdditiveExpression	i + 3
>5851	PrimaryExpression	3
>5852	Identifier	i
>5853	ExpressionStatement	 
>5854	AssignmentExpr	J65 = val4
>5855	Identifier	val4
>5856	Identifier	J65
>5857	ExpressionStatement	 
>5858	AssignmentExpr	val4 = _mm_add_ps ( val4 , val3 )
>5859	CallExpression	_mm_add_ps ( val4 , val3 )
>5860	ArgumentList	val4
>5861	Argument	val3
>5862	Identifier	val3
>5863	Argument	val4
>5864	Identifier	val4
>5865	Callee	_mm_add_ps
>5866	Identifier	_mm_add_ps
>5867	Identifier	val4
>5868	ExpressionStatement	 
>5869	AssignmentExpr	val3 = _mm_mul_ps ( val2 , px )
>5870	CallExpression	_mm_mul_ps ( val2 , px )
>5871	ArgumentList	val2
>5872	Argument	px
>5873	Identifier	px
>5874	Argument	val2
>5875	Identifier	val2
>5876	Callee	_mm_mul_ps
>5877	Identifier	_mm_mul_ps
>5878	Identifier	val3
>5879	ExpressionStatement	 
>5880	AssignmentExpr	val4 = _mm_add_ps ( gx , val3 )
>5881	CallExpression	_mm_add_ps ( gx , val3 )
>5882	ArgumentList	gx
>5883	Argument	val3
>5884	Identifier	val3
>5885	Argument	gx
>5886	Identifier	gx
>5887	Callee	_mm_add_ps
>5888	Identifier	_mm_add_ps
>5889	Identifier	val4
>5890	ExpressionStatement	 
>5891	AssignmentExpr	val3 = _mm_mul_ps ( val1 , px )
>5892	CallExpression	_mm_mul_ps ( val1 , px )
>5893	ArgumentList	val1
>5894	Argument	px
>5895	Identifier	px
>5896	Argument	val1
>5897	Identifier	val1
>5898	Callee	_mm_mul_ps
>5899	Identifier	_mm_mul_ps
>5900	Identifier	val3
>5901	ExpressionStatement	 
>5902	AssignmentExpr	J64 = val4
>5903	Identifier	val4
>5904	Identifier	J64
>5905	ExpressionStatement	 
>5906	AssignmentExpr	val4 = _mm_sub_ps ( _mm_setr_ps ( 0 , 0 , 0 , 0 ) , val4 )
>5907	CallExpression	_mm_sub_ps ( _mm_setr_ps ( 0 , 0 , 0 , 0 ) , val4 )
>5908	ArgumentList	_mm_setr_ps ( 0 , 0 , 0 , 0 )
>5909	Argument	val4
>5910	Identifier	val4
>5911	Argument	_mm_setr_ps ( 0 , 0 , 0 , 0 )
>5912	CallExpression	_mm_setr_ps ( 0 , 0 , 0 , 0 )
>5913	ArgumentList	0
>5914	Argument	0
>5915	PrimaryExpression	0
>5916	Argument	0
>5917	PrimaryExpression	0
>5918	Argument	0
>5919	PrimaryExpression	0
>5920	Argument	0
>5921	PrimaryExpression	0
>5922	Callee	_mm_setr_ps
>5923	Identifier	_mm_setr_ps
>5924	Callee	_mm_sub_ps
>5925	Identifier	_mm_sub_ps
>5926	Identifier	val4
>5927	ExpressionStatement	 
>5928	AssignmentExpr	val4 = _mm_add_ps ( val3 , val4 )
>5929	CallExpression	_mm_add_ps ( val3 , val4 )
>5930	ArgumentList	val3
>5931	Argument	val4
>5932	Identifier	val4
>5933	Argument	val3
>5934	Identifier	val3
>5935	Callee	_mm_add_ps
>5936	Identifier	_mm_add_ps
>5937	Identifier	val4
>5938	ExpressionStatement	 
>5939	AssignmentExpr	val3 = _mm_mul_ps ( val2 , py )
>5940	CallExpression	_mm_mul_ps ( val2 , py )
>5941	ArgumentList	val2
>5942	Argument	py
>5943	Identifier	py
>5944	Argument	val2
>5945	Identifier	val2
>5946	Callee	_mm_mul_ps
>5947	Identifier	_mm_mul_ps
>5948	Identifier	val3
>5949	ExpressionStatement	 
>5950	AssignmentExpr	val4 = _mm_add_ps ( gy , val3 )
>5951	CallExpression	_mm_add_ps ( gy , val3 )
>5952	ArgumentList	gy
>5953	Argument	val3
>5954	Identifier	val3
>5955	Argument	gy
>5956	Identifier	gy
>5957	Callee	_mm_add_ps
>5958	Identifier	_mm_add_ps
>5959	Identifier	val4
>5960	ExpressionStatement	 
>5961	AssignmentExpr	val3 = _mm_mul_ps ( val1 , py )
>5962	CallExpression	_mm_mul_ps ( val1 , py )
>5963	ArgumentList	val1
>5964	Argument	py
>5965	Identifier	py
>5966	Argument	val1
>5967	Identifier	val1
>5968	Callee	_mm_mul_ps
>5969	Identifier	_mm_mul_ps
>5970	Identifier	val3
>5971	ExpressionStatement	 
>5972	AssignmentExpr	J63 = val3
>5973	Identifier	val3
>5974	Identifier	J63
>5975	ExpressionStatement	 
>5976	AssignmentExpr	val3 = _mm_sub_ps ( _mm_setr_ps ( 0 , 0 , 0 , 0 ) , val3 )
>5977	CallExpression	_mm_sub_ps ( _mm_setr_ps ( 0 , 0 , 0 , 0 ) , val3 )
>5978	ArgumentList	_mm_setr_ps ( 0 , 0 , 0 , 0 )
>5979	Argument	val3
>5980	Identifier	val3
>5981	Argument	_mm_setr_ps ( 0 , 0 , 0 , 0 )
>5982	CallExpression	_mm_setr_ps ( 0 , 0 , 0 , 0 )
>5983	ArgumentList	0
>5984	Argument	0
>5985	PrimaryExpression	0
>5986	Argument	0
>5987	PrimaryExpression	0
>5988	Argument	0
>5989	PrimaryExpression	0
>5990	Argument	0
>5991	PrimaryExpression	0
>5992	Callee	_mm_setr_ps
>5993	Identifier	_mm_setr_ps
>5994	Callee	_mm_sub_ps
>5995	Identifier	_mm_sub_ps
>5996	Identifier	val3
>5997	ExpressionStatement	 
>5998	AssignmentExpr	val3 = _mm_add_ps ( val1 , val2 )
>5999	CallExpression	_mm_add_ps ( val1 , val2 )
>6000	ArgumentList	val1
>6001	Argument	val2
>6002	Identifier	val2
>6003	Argument	val1
>6004	Identifier	val1
>6005	Callee	_mm_add_ps
>6006	Identifier	_mm_add_ps
>6007	Identifier	val3
>6008	ExpressionStatement	 
>6009	AssignmentExpr	val2 = _mm_mul_ps ( val2 , pz )
>6010	CallExpression	_mm_mul_ps ( val2 , pz )
>6011	ArgumentList	val2
>6012	Argument	pz
>6013	Identifier	pz
>6014	Argument	val2
>6015	Identifier	val2
>6016	Callee	_mm_mul_ps
>6017	Identifier	_mm_mul_ps
>6018	Identifier	val2
>6019	ExpressionStatement	 
>6020	AssignmentExpr	val2 = _mm_mul_ps ( py , gy )
>6021	CallExpression	_mm_mul_ps ( py , gy )
>6022	ArgumentList	py
>6023	Argument	gy
>6024	Identifier	gy
>6025	Argument	py
>6026	Identifier	py
>6027	Callee	_mm_mul_ps
>6028	Identifier	_mm_mul_ps
>6029	Identifier	val2
>6030	ExpressionStatement	 
>6031	AssignmentExpr	val1 = _mm_mul_ps ( val1 , pz )
>6032	CallExpression	_mm_mul_ps ( val1 , pz )
>6033	ArgumentList	val1
>6034	Argument	pz
>6035	Identifier	pz
>6036	Argument	val1
>6037	Identifier	val1
>6038	Callee	_mm_mul_ps
>6039	Identifier	_mm_mul_ps
>6040	Identifier	val1
>6041	ExpressionStatement	 
>6042	AssignmentExpr	val1 = _mm_mul_ps ( px , gx )
>6043	CallExpression	_mm_mul_ps ( px , gx )
>6044	ArgumentList	px
>6045	Argument	gx
>6046	Identifier	gx
>6047	Argument	px
>6048	Identifier	px
>6049	Callee	_mm_mul_ps
>6050	Identifier	_mm_mul_ps
>6051	Identifier	val1
>6052	ExpressionStatement	 
>6053	AssignmentExpr	pz = _mm_mul_ps ( pz , pz )
>6054	CallExpression	_mm_mul_ps ( pz , pz )
>6055	ArgumentList	pz
>6056	Argument	pz
>6057	Identifier	pz
>6058	Argument	pz
>6059	Identifier	pz
>6060	Callee	_mm_mul_ps
>6061	Identifier	_mm_mul_ps
>6062	Identifier	pz
>6063	ExpressionStatement	 
>6064	AssignmentExpr	J66 = val1
>6065	Identifier	val1
>6066	Identifier	J66
>6067	ExpressionStatement	 
>6068	AssignmentExpr	val1 = _mm_sub_ps ( val1 , val2 )
>6069	CallExpression	_mm_sub_ps ( val1 , val2 )
>6070	ArgumentList	val1
>6071	Argument	val2
>6072	Identifier	val2
>6073	Argument	val1
>6074	Identifier	val1
>6075	Callee	_mm_sub_ps
>6076	Identifier	_mm_sub_ps
>6077	Identifier	val1
>6078	ExpressionStatement	 
>6079	AssignmentExpr	val2 = _mm_mul_ps ( val2 , pz )
>6080	CallExpression	_mm_mul_ps ( val2 , pz )
>6081	ArgumentList	val2
>6082	Argument	pz
>6083	Identifier	pz
>6084	Argument	val2
>6085	Identifier	val2
>6086	Callee	_mm_mul_ps
>6087	Identifier	_mm_mul_ps
>6088	Identifier	val2
>6089	ExpressionStatement	 
>6090	AssignmentExpr	val2 = _mm_mul_ps ( py , gx )
>6091	CallExpression	_mm_mul_ps ( py , gx )
>6092	ArgumentList	py
>6093	Argument	gx
>6094	Identifier	gx
>6095	Argument	py
>6096	Identifier	py
>6097	Callee	_mm_mul_ps
>6098	Identifier	_mm_mul_ps
>6099	Identifier	val2
>6100	IdentifierDeclStatement	 
>6101	IdentifierDecl	py = _mm_load_ps ( buf_warped_y + i )
>6102	AssignmentExpr	py = _mm_load_ps ( buf_warped_y + i )
>6103	CallExpression	_mm_load_ps ( buf_warped_y + i )
>6104	ArgumentList	buf_warped_y + i
>6105	Argument	buf_warped_y + i
>6106	AdditiveExpression	buf_warped_y + i
>6107	Identifier	i
>6108	Identifier	buf_warped_y
>6109	Callee	_mm_load_ps
>6110	Identifier	_mm_load_ps
>6111	Identifier	py
>6112	Identifier	py
>6113	IdentifierDeclType	__m128
>6114	ExpressionStatement	 
>6115	AssignmentExpr	val1 = _mm_mul_ps ( val1 , pz )
>6116	CallExpression	_mm_mul_ps ( val1 , pz )
>6117	ArgumentList	val1
>6118	Argument	pz
>6119	Identifier	pz
>6120	Argument	val1
>6121	Identifier	val1
>6122	Callee	_mm_mul_ps
>6123	Identifier	_mm_mul_ps
>6124	Identifier	val1
>6125	ExpressionStatement	 
>6126	AssignmentExpr	val1 = _mm_mul_ps ( px , gy )
>6127	CallExpression	_mm_mul_ps ( px , gy )
>6128	ArgumentList	px
>6129	Argument	gy
>6130	Identifier	gy
>6131	Argument	px
>6132	Identifier	px
>6133	Callee	_mm_mul_ps
>6134	Identifier	_mm_mul_ps
>6135	Identifier	val1
>6136	IdentifierDeclStatement	 
>6137	IdentifierDecl	px = _mm_load_ps ( buf_warped_x + i )
>6138	AssignmentExpr	px = _mm_load_ps ( buf_warped_x + i )
>6139	CallExpression	_mm_load_ps ( buf_warped_x + i )
>6140	ArgumentList	buf_warped_x + i
>6141	Argument	buf_warped_x + i
>6142	AdditiveExpression	buf_warped_x + i
>6143	Identifier	i
>6144	Identifier	buf_warped_x
>6145	Callee	_mm_load_ps
>6146	Identifier	_mm_load_ps
>6147	Identifier	px
>6148	Identifier	px
>6149	IdentifierDeclType	__m128
>6150	ExpressionStatement	 
>6151	AssignmentExpr	J62 = val1
>6152	Identifier	val1
>6153	Identifier	J62
>6154	ExpressionStatement	 
>6155	AssignmentExpr	val1 = _mm_mul_ps ( pz , gy )
>6156	CallExpression	_mm_mul_ps ( pz , gy )
>6157	ArgumentList	pz
>6158	Argument	gy
>6159	Identifier	gy
>6160	Argument	pz
>6161	Identifier	pz
>6162	Callee	_mm_mul_ps
>6163	Identifier	_mm_mul_ps
>6164	Identifier	val1
>6165	IdentifierDeclStatement	 
>6166	IdentifierDecl	gy = _mm_load_ps ( buf_warped_dy + i )
>6167	AssignmentExpr	gy = _mm_load_ps ( buf_warped_dy + i )
>6168	CallExpression	_mm_load_ps ( buf_warped_dy + i )
>6169	ArgumentList	buf_warped_dy + i
>6170	Argument	buf_warped_dy + i
>6171	AdditiveExpression	buf_warped_dy + i
>6172	Identifier	i
>6173	Identifier	buf_warped_dy
>6174	Callee	_mm_load_ps
>6175	Identifier	_mm_load_ps
>6176	Identifier	gy
>6177	Identifier	gy
>6178	IdentifierDeclType	__m128
>6179	ExpressionStatement	 
>6180	AssignmentExpr	J61 = val1
>6181	Identifier	val1
>6182	Identifier	J61
>6183	ExpressionStatement	 
>6184	AssignmentExpr	val1 = _mm_mul_ps ( pz , gx )
>6185	CallExpression	_mm_mul_ps ( pz , gx )
>6186	ArgumentList	pz
>6187	Argument	gx
>6188	Identifier	gx
>6189	Argument	pz
>6190	Identifier	pz
>6191	Callee	_mm_mul_ps
>6192	Identifier	_mm_mul_ps
>6193	Identifier	val1
>6194	IdentifierDeclStatement	 
>6195	IdentifierDecl	gx = _mm_load_ps ( buf_warped_dx + i )
>6196	AssignmentExpr	gx = _mm_load_ps ( buf_warped_dx + i )
>6197	CallExpression	_mm_load_ps ( buf_warped_dx + i )
>6198	ArgumentList	buf_warped_dx + i
>6199	Argument	buf_warped_dx + i
>6200	AdditiveExpression	buf_warped_dx + i
>6201	Identifier	i
>6202	Identifier	buf_warped_dx
>6203	Callee	_mm_load_ps
>6204	Identifier	_mm_load_ps
>6205	Identifier	gx
>6206	Identifier	gx
>6207	IdentifierDeclType	__m128
>6208	ExpressionStatement	 
>6209	AssignmentExpr	pz = _mm_rcp_ps ( pz )
>6210	CallExpression	_mm_rcp_ps ( pz )
>6211	ArgumentList	pz
>6212	Argument	pz
>6213	Identifier	pz
>6214	Callee	_mm_rcp_ps
>6215	Identifier	_mm_rcp_ps
>6216	Identifier	pz
>6217	IdentifierDeclStatement	 
>6218	IdentifierDecl	pz = _mm_load_ps ( buf_warped_z + i )
>6219	AssignmentExpr	pz = _mm_load_ps ( buf_warped_z + i )
>6220	CallExpression	_mm_load_ps ( buf_warped_z + i )
>6221	ArgumentList	buf_warped_z + i
>6222	Argument	buf_warped_z + i
>6223	AdditiveExpression	buf_warped_z + i
>6224	Identifier	i
>6225	Identifier	buf_warped_z
>6226	Callee	_mm_load_ps
>6227	Identifier	_mm_load_ps
>6228	Identifier	pz
>6229	Identifier	pz
>6230	IdentifierDeclType	__m128
>6231	IdentifierDeclStatement	 
>6232	IdentifierDecl	J66
>6233	Identifier	J66
>6234	IdentifierDeclType	__m128
>6235	IdentifierDecl	J65
>6236	Identifier	J65
>6237	IdentifierDeclType	__m128
>6238	IdentifierDecl	J64
>6239	Identifier	J64
>6240	IdentifierDeclType	__m128
>6241	IdentifierDecl	J63
>6242	Identifier	J63
>6243	IdentifierDeclType	__m128
>6244	IdentifierDecl	J62
>6245	Identifier	J62
>6246	IdentifierDeclType	__m128
>6247	IdentifierDecl	J61
>6248	Identifier	J61
>6249	IdentifierDeclType	__m128
>6250	IdentifierDeclStatement	 
>6251	IdentifierDecl	val4
>6252	Identifier	val4
>6253	IdentifierDeclType	__m128
>6254	IdentifierDecl	val3
>6255	Identifier	val3
>6256	IdentifierDeclType	__m128
>6257	IdentifierDecl	val2
>6258	Identifier	val2
>6259	IdentifierDeclType	__m128
>6260	IdentifierDecl	val1
>6261	Identifier	val1
>6262	IdentifierDeclType	__m128
>6263	AssignmentExpr	 
>6264	PrimaryExpression	4
>6265	Identifier	i
>6266	Condition	 
>6267	RelationalExpression	i < buf_warped_size - 3
>6268	AdditiveExpression	buf_warped_size - 3
>6269	PrimaryExpression	3
>6270	Identifier	buf_warped_size
>6271	Identifier	i
>6272	ForInit	 
>6273	IdentifierDeclStatement	int i = 0 ;
>6274	IdentifierDecl	i = 0
>6275	AssignmentExpr	i = 0
>6276	PrimaryExpression	0
>6277	Identifier	i
>6278	Identifier	i
>6279	IdentifierDeclType	int
>6280	ExpressionStatement	 
>6281	CallExpression	ls . initialize ( width * height )
>6282	ArgumentList	width * height
>6283	Argument	width * height
>6284	MultiplicativeExpression	width * height
>6285	Identifier	height
>6286	Identifier	width
>6287	Callee	ls . initialize
>6288	MemberAccess	ls . initialize
>6289	Identifier	initialize
>6290	Identifier	ls
>6335	FunctionDef	SE3Tracker 
>6336	ParameterList	LGS6 & ls
>6337	Parameter	 
>6338	Identifier	ls
>6339	ParameterType	LGS6 &
>6340	ReturnType	void
>6341	CompoundStatement	 
>6342	ExpressionStatement	 
>6343	CallExpression	ls . finish ( )
>6344	ArgumentList	 
>6345	Callee	ls . finish
>6346	MemberAccess	ls . finish
>6347	Identifier	finish
>6348	Identifier	ls
>6349	ForStatement	for ( int i = 0 ; i < buf_warped_size ; i += 4 )
>6350	CompoundStatement	 
>6351	IfStatement	if ( ! ( i + 3 >= buf_warped_size ) )
>6352	ElseStatement	else
>6353	CompoundStatement	 
>6354	ExpressionStatement	 
>6355	CallExpression	ls . update ( v4 , * ( buf_warped_residual + i + 3 ) , * ( buf_weight_p + i + 3 ) )
>6356	ArgumentList	v4
>6357	Argument	* ( buf_weight_p + i + 3 )
>6358	UnaryOp	* ( buf_weight_p + i + 3 )
>6359	AdditiveExpression	buf_weight_p + i + 3
>6360	AdditiveExpression	i + 3
>6361	PrimaryExpression	3
>6362	Identifier	i
>6363	Identifier	buf_weight_p
>6364	UnaryOperator	*
>6365	Argument	* ( buf_warped_residual + i + 3 )
>6366	UnaryOp	* ( buf_warped_residual + i + 3 )
>6367	AdditiveExpression	buf_warped_residual + i + 3
>6368	AdditiveExpression	i + 3
>6369	PrimaryExpression	3
>6370	Identifier	i
>6371	Identifier	buf_warped_residual
>6372	UnaryOperator	*
>6373	Argument	v4
>6374	Identifier	v4
>6375	Callee	ls . update
>6376	MemberAccess	ls . update
>6377	Identifier	update
>6378	Identifier	ls
>6379	IfStatement	if ( i + 3 >= buf_warped_size )
>6380	BreakStatement	 
>6381	Condition	 
>6382	RelationalExpression	i + 3 >= buf_warped_size
>6383	Identifier	buf_warped_size
>6384	AdditiveExpression	i + 3
>6385	PrimaryExpression	3
>6386	Identifier	i
>6387	ExpressionStatement	 
>6388	CallExpression	ls . update ( v3 , * ( buf_warped_residual + i + 2 ) , * ( buf_weight_p + i + 2 ) )
>6389	ArgumentList	v3
>6390	Argument	* ( buf_weight_p + i + 2 )
>6391	UnaryOp	* ( buf_weight_p + i + 2 )
>6392	AdditiveExpression	buf_weight_p + i + 2
>6393	AdditiveExpression	i + 2
>6394	PrimaryExpression	2
>6395	Identifier	i
>6396	Identifier	buf_weight_p
>6397	UnaryOperator	*
>6398	Argument	* ( buf_warped_residual + i + 2 )
>6399	UnaryOp	* ( buf_warped_residual + i + 2 )
>6400	AdditiveExpression	buf_warped_residual + i + 2
>6401	AdditiveExpression	i + 2
>6402	PrimaryExpression	2
>6403	Identifier	i
>6404	Identifier	buf_warped_residual
>6405	UnaryOperator	*
>6406	Argument	v3
>6407	Identifier	v3
>6408	Callee	ls . update
>6409	MemberAccess	ls . update
>6410	Identifier	update
>6411	Identifier	ls
>6412	IfStatement	if ( i + 2 >= buf_warped_size )
>6413	BreakStatement	 
>6414	Condition	 
>6415	RelationalExpression	i + 2 >= buf_warped_size
>6416	Identifier	buf_warped_size
>6417	AdditiveExpression	i + 2
>6418	PrimaryExpression	2
>6419	Identifier	i
>6420	ExpressionStatement	 
>6421	CallExpression	ls . update ( v2 , * ( buf_warped_residual + i + 1 ) , * ( buf_weight_p + i + 1 ) )
>6422	ArgumentList	v2
>6423	Argument	* ( buf_weight_p + i + 1 )
>6424	UnaryOp	* ( buf_weight_p + i + 1 )
>6425	AdditiveExpression	buf_weight_p + i + 1
>6426	AdditiveExpression	i + 1
>6427	PrimaryExpression	1
>6428	Identifier	i
>6429	Identifier	buf_weight_p
>6430	UnaryOperator	*
>6431	Argument	* ( buf_warped_residual + i + 1 )
>6432	UnaryOp	* ( buf_warped_residual + i + 1 )
>6433	AdditiveExpression	buf_warped_residual + i + 1
>6434	AdditiveExpression	i + 1
>6435	PrimaryExpression	1
>6436	Identifier	i
>6437	Identifier	buf_warped_residual
>6438	UnaryOperator	*
>6439	Argument	v2
>6440	Identifier	v2
>6441	Callee	ls . update
>6442	MemberAccess	ls . update
>6443	Identifier	update
>6444	Identifier	ls
>6445	IfStatement	if ( i + 1 >= buf_warped_size )
>6446	BreakStatement	 
>6447	Condition	 
>6448	RelationalExpression	i + 1 >= buf_warped_size
>6449	Identifier	buf_warped_size
>6450	AdditiveExpression	i + 1
>6451	PrimaryExpression	1
>6452	Identifier	i
>6453	ExpressionStatement	 
>6454	CallExpression	ls . update ( v1 , * ( buf_warped_residual + i + 0 ) , * ( buf_weight_p + i + 0 ) )
>6455	ArgumentList	v1
>6456	Argument	* ( buf_weight_p + i + 0 )
>6457	UnaryOp	* ( buf_weight_p + i + 0 )
>6458	AdditiveExpression	buf_weight_p + i + 0
>6459	AdditiveExpression	i + 0
>6460	PrimaryExpression	0
>6461	Identifier	i
>6462	Identifier	buf_weight_p
>6463	UnaryOperator	*
>6464	Argument	* ( buf_warped_residual + i + 0 )
>6465	UnaryOp	* ( buf_warped_residual + i + 0 )
>6466	AdditiveExpression	buf_warped_residual + i + 0
>6467	AdditiveExpression	i + 0
>6468	PrimaryExpression	0
>6469	Identifier	i
>6470	Identifier	buf_warped_residual
>6471	UnaryOperator	*
>6472	Argument	v1
>6473	Identifier	v1
>6474	Callee	ls . update
>6475	MemberAccess	ls . update
>6476	Identifier	update
>6477	Identifier	ls
>6478	CompoundStatement	 
>6479	ExpressionStatement	 
>6480	CallExpression	ls . update ( v4 , * ( buf_warped_residual + i + 3 ) , * ( buf_weight_p + i + 3 ) )
>6481	ArgumentList	v4
>6482	Argument	* ( buf_weight_p + i + 3 )
>6483	UnaryOp	* ( buf_weight_p + i + 3 )
>6484	AdditiveExpression	buf_weight_p + i + 3
>6485	AdditiveExpression	i + 3
>6486	PrimaryExpression	3
>6487	Identifier	i
>6488	Identifier	buf_weight_p
>6489	UnaryOperator	*
>6490	Argument	* ( buf_warped_residual + i + 3 )
>6491	UnaryOp	* ( buf_warped_residual + i + 3 )
>6492	AdditiveExpression	buf_warped_residual + i + 3
>6493	AdditiveExpression	i + 3
>6494	PrimaryExpression	3
>6495	Identifier	i
>6496	Identifier	buf_warped_residual
>6497	UnaryOperator	*
>6498	Argument	v4
>6499	Identifier	v4
>6500	Callee	ls . update
>6501	MemberAccess	ls . update
>6502	Identifier	update
>6503	Identifier	ls
>6504	ExpressionStatement	 
>6505	CallExpression	ls . update ( v3 , * ( buf_warped_residual + i + 2 ) , * ( buf_weight_p + i + 2 ) )
>6506	ArgumentList	v3
>6507	Argument	* ( buf_weight_p + i + 2 )
>6508	UnaryOp	* ( buf_weight_p + i + 2 )
>6509	AdditiveExpression	buf_weight_p + i + 2
>6510	AdditiveExpression	i + 2
>6511	PrimaryExpression	2
>6512	Identifier	i
>6513	Identifier	buf_weight_p
>6514	UnaryOperator	*
>6515	Argument	* ( buf_warped_residual + i + 2 )
>6516	UnaryOp	* ( buf_warped_residual + i + 2 )
>6517	AdditiveExpression	buf_warped_residual + i + 2
>6518	AdditiveExpression	i + 2
>6519	PrimaryExpression	2
>6520	Identifier	i
>6521	Identifier	buf_warped_residual
>6522	UnaryOperator	*
>6523	Argument	v3
>6524	Identifier	v3
>6525	Callee	ls . update
>6526	MemberAccess	ls . update
>6527	Identifier	update
>6528	Identifier	ls
>6529	ExpressionStatement	 
>6530	CallExpression	ls . update ( v2 , * ( buf_warped_residual + i + 1 ) , * ( buf_weight_p + i + 1 ) )
>6531	ArgumentList	v2
>6532	Argument	* ( buf_weight_p + i + 1 )
>6533	UnaryOp	* ( buf_weight_p + i + 1 )
>6534	AdditiveExpression	buf_weight_p + i + 1
>6535	AdditiveExpression	i + 1
>6536	PrimaryExpression	1
>6537	Identifier	i
>6538	Identifier	buf_weight_p
>6539	UnaryOperator	*
>6540	Argument	* ( buf_warped_residual + i + 1 )
>6541	UnaryOp	* ( buf_warped_residual + i + 1 )
>6542	AdditiveExpression	buf_warped_residual + i + 1
>6543	AdditiveExpression	i + 1
>6544	PrimaryExpression	1
>6545	Identifier	i
>6546	Identifier	buf_warped_residual
>6547	UnaryOperator	*
>6548	Argument	v2
>6549	Identifier	v2
>6550	Callee	ls . update
>6551	MemberAccess	ls . update
>6552	Identifier	update
>6553	Identifier	ls
>6554	ExpressionStatement	 
>6555	CallExpression	ls . update ( v1 , * ( buf_warped_residual + i + 0 ) , * ( buf_weight_p + i + 0 ) )
>6556	ArgumentList	v1
>6557	Argument	* ( buf_weight_p + i + 0 )
>6558	UnaryOp	* ( buf_weight_p + i + 0 )
>6559	AdditiveExpression	buf_weight_p + i + 0
>6560	AdditiveExpression	i + 0
>6561	PrimaryExpression	0
>6562	Identifier	i
>6563	Identifier	buf_weight_p
>6564	UnaryOperator	*
>6565	Argument	* ( buf_warped_residual + i + 0 )
>6566	UnaryOp	* ( buf_warped_residual + i + 0 )
>6567	AdditiveExpression	buf_warped_residual + i + 0
>6568	AdditiveExpression	i + 0
>6569	PrimaryExpression	0
>6570	Identifier	i
>6571	Identifier	buf_warped_residual
>6572	UnaryOperator	*
>6573	Argument	v1
>6574	Identifier	v1
>6575	Callee	ls . update
>6576	MemberAccess	ls . update
>6577	Identifier	update
>6578	Identifier	ls
>6579	Condition	 
>6580	UnaryOp	! ( i + 3 >= buf_warped_size )
>6581	RelationalExpression	i + 3 >= buf_warped_size
>6582	Identifier	buf_warped_size
>6583	AdditiveExpression	i + 3
>6584	PrimaryExpression	3
>6585	Identifier	i
>6586	UnaryOperator	!
>6587	ExpressionStatement	 
>6588	Statement	 
>6589	Statement	 
>6590	Statement	 
>6591	Statement	 
>6592	Statement	 
>6593	Statement	 
>6594	Statement	 
>6595	Statement	 
>6596	Statement	 
>6597	Statement	 
>6598	Statement	 
>6599	Statement	 
>6600	Statement	 
>6601	Statement	 
>6602	Statement	 
>6603	Statement	 
>6604	Statement	 
>6605	Statement	 
>6606	Statement	 
>6607	Statement	 
>6608	Statement	 
>6609	Statement	 
>6610	Statement	 
>6611	Statement	 
>6612	Statement	 
>6613	Statement	 
>6614	Statement	 
>6615	Statement	 
>6616	Statement	 
>6617	Statement	 
>6618	Statement	 
>6619	Statement	 
>6620	Statement	 
>6621	Statement	 
>6622	Statement	 
>6623	Statement	 
>6624	Statement	 
>6625	Statement	 
>6626	Statement	 
>6627	Statement	 
>6628	Statement	 
>6629	Statement	 
>6630	Statement	 
>6631	Statement	 
>6632	Statement	 
>6633	Statement	 
>6634	Statement	 
>6635	Statement	 
>6636	Statement	 
>6637	Statement	 
>6638	Statement	 
>6639	Statement	 
>6640	Statement	 
>6641	Statement	 
>6642	Statement	 
>6643	Statement	 
>6644	Statement	 
>6645	Statement	 
>6646	Statement	 
>6647	Statement	 
>6648	Statement	 
>6649	Statement	 
>6650	Statement	 
>6651	Statement	 
>6652	Statement	 
>6653	Statement	 
>6654	Statement	 
>6655	Statement	 
>6656	Statement	 
>6657	Statement	 
>6658	Statement	 
>6659	Statement	 
>6660	Statement	 
>6661	Statement	 
>6662	Statement	 
>6663	Statement	 
>6664	Statement	 
>6665	Statement	 
>6666	Statement	 
>6667	Statement	 
>6668	Statement	 
>6669	Statement	 
>6670	Statement	 
>6671	Statement	 
>6672	Statement	 
>6673	Statement	 
>6674	Statement	 
>6675	Statement	 
>6676	Statement	 
>6677	Statement	 
>6678	Statement	 
>6679	Statement	 
>6680	Statement	 
>6681	Statement	 
>6682	Statement	 
>6683	Statement	 
>6684	Statement	 
>6685	Statement	 
>6686	Statement	 
>6687	Statement	 
>6688	Statement	 
>6689	Statement	 
>6690	Statement	 
>6691	Statement	 
>6692	Statement	 
>6693	Statement	 
>6694	Statement	 
>6695	Statement	 
>6696	Statement	 
>6697	Statement	 
>6698	Statement	 
>6699	Statement	 
>6700	Statement	 
>6701	Statement	 
>6702	Statement	 
>6703	Statement	 
>6704	Statement	 
>6705	Statement	 
>6706	Statement	 
>6707	Statement	 
>6708	Statement	 
>6709	Statement	 
>6710	Statement	 
>6711	Statement	 
>6712	Statement	 
>6713	Statement	 
>6714	Statement	 
>6715	Statement	 
>6716	Statement	 
>6717	Statement	 
>6718	Statement	 
>6719	Statement	 
>6720	Statement	 
>6721	Statement	 
>6722	Statement	 
>6723	Statement	 
>6724	Statement	 
>6725	Statement	 
>6726	Statement	 
>6727	Statement	 
>6728	Statement	 
>6729	Statement	 
>6730	Statement	 
>6731	Statement	 
>6732	Statement	 
>6733	Statement	 
>6734	Statement	 
>6735	ExpressionStatement	 
>6736	AssignmentExpr	v4_ptr = & v4 [ 0 ]
>6737	UnaryOp	& v4 [ 0 ]
>6738	ArrayIndexing	v4 [ 0 ]
>6739	PrimaryExpression	0
>6740	Identifier	v4
>6741	UnaryOperator	&
>6742	Identifier	v4_ptr
>6743	ExpressionStatement	 
>6744	AssignmentExpr	v3_ptr = & v3 [ 0 ]
>6745	UnaryOp	& v3 [ 0 ]
>6746	ArrayIndexing	v3 [ 0 ]
>6747	PrimaryExpression	0
>6748	Identifier	v3
>6749	UnaryOperator	&
>6750	Identifier	v3_ptr
>6751	ExpressionStatement	 
>6752	AssignmentExpr	v2_ptr = & v2 [ 0 ]
>6753	UnaryOp	& v2 [ 0 ]
>6754	ArrayIndexing	v2 [ 0 ]
>6755	PrimaryExpression	0
>6756	Identifier	v2
>6757	UnaryOperator	&
>6758	Identifier	v2_ptr
>6759	ExpressionStatement	 
>6760	AssignmentExpr	v1_ptr = & v1 [ 0 ]
>6761	UnaryOp	& v1 [ 0 ]
>6762	ArrayIndexing	v1 [ 0 ]
>6763	PrimaryExpression	0
>6764	Identifier	v1
>6765	UnaryOperator	&
>6766	Identifier	v1_ptr
>6767	AssignmentExpr	 
>6768	PrimaryExpression	4
>6769	Identifier	i
>6770	Condition	 
>6771	RelationalExpression	i < buf_warped_size
>6772	Identifier	buf_warped_size
>6773	Identifier	i
>6774	ForInit	 
>6775	IdentifierDeclStatement	int i = 0 ;
>6776	IdentifierDecl	i = 0
>6777	AssignmentExpr	i = 0
>6778	PrimaryExpression	0
>6779	Identifier	i
>6780	Identifier	i
>6781	IdentifierDeclType	int
>6782	IdentifierDeclStatement	 
>6783	IdentifierDecl	* v4_ptr
>6784	Identifier	v4_ptr
>6785	IdentifierDeclType	float *
>6786	IdentifierDeclStatement	 
>6787	IdentifierDecl	* v3_ptr
>6788	Identifier	v3_ptr
>6789	IdentifierDeclType	float *
>6790	IdentifierDeclStatement	 
>6791	IdentifierDecl	* v2_ptr
>6792	Identifier	v2_ptr
>6793	IdentifierDeclType	float *
>6794	IdentifierDeclStatement	 
>6795	IdentifierDecl	* v1_ptr
>6796	Identifier	v1_ptr
>6797	IdentifierDeclType	float *
>6798	IdentifierDeclStatement	 
>6799	IdentifierDecl	v4
>6800	Identifier	v4
>6801	IdentifierDeclType	Vector6
>6802	IdentifierDecl	v3
>6803	Identifier	v3
>6804	IdentifierDeclType	Vector6
>6805	IdentifierDecl	v2
>6806	Identifier	v2
>6807	IdentifierDeclType	Vector6
>6808	IdentifierDecl	v1
>6809	Identifier	v1
>6810	IdentifierDeclType	Vector6
>6811	IdentifierDeclStatement	 
>6812	IdentifierDecl	* cur_buf_warped_dy = buf_warped_dy
>6813	AssignmentExpr	* cur_buf_warped_dy = buf_warped_dy
>6814	Identifier	buf_warped_dy
>6815	Identifier	buf_warped_dy
>6816	Identifier	cur_buf_warped_dy
>6817	IdentifierDeclType	float *
>6818	IdentifierDeclStatement	 
>6819	IdentifierDecl	* cur_buf_warped_dx = buf_warped_dx
>6820	AssignmentExpr	* cur_buf_warped_dx = buf_warped_dx
>6821	Identifier	buf_warped_dx
>6822	Identifier	buf_warped_dx
>6823	Identifier	cur_buf_warped_dx
>6824	IdentifierDeclType	float *
>6825	IdentifierDeclStatement	 
>6826	IdentifierDecl	* cur_buf_warped_y = buf_warped_y
>6827	AssignmentExpr	* cur_buf_warped_y = buf_warped_y
>6828	Identifier	buf_warped_y
>6829	Identifier	buf_warped_y
>6830	Identifier	cur_buf_warped_y
>6831	IdentifierDeclType	float *
>6832	IdentifierDeclStatement	 
>6833	IdentifierDecl	* cur_buf_warped_x = buf_warped_x
>6834	AssignmentExpr	* cur_buf_warped_x = buf_warped_x
>6835	Identifier	buf_warped_x
>6836	Identifier	buf_warped_x
>6837	Identifier	cur_buf_warped_x
>6838	IdentifierDeclType	float *
>6839	IdentifierDeclStatement	 
>6840	IdentifierDecl	* cur_buf_warped_z = buf_warped_z
>6841	AssignmentExpr	* cur_buf_warped_z = buf_warped_z
>6842	Identifier	buf_warped_z
>6843	Identifier	buf_warped_z
>6844	Identifier	cur_buf_warped_z
>6845	IdentifierDeclType	float *
>6846	ExpressionStatement	 
>6847	CallExpression	ls . initialize ( width * height )
>6848	ArgumentList	width * height
>6849	Argument	width * height
>6850	MultiplicativeExpression	width * height
>6851	Identifier	height
>6852	Identifier	width
>6853	Callee	ls . initialize
>6854	MemberAccess	ls . initialize
>6855	Identifier	initialize
>6856	Identifier	ls
>6900	FunctionDef	SE3Tracker 
>6901	ParameterList	LGS6 & ls
>6902	Parameter	 
>6903	Identifier	ls
>6904	ParameterType	LGS6 &
>6905	ReturnType	void
>6906	CompoundStatement	 
>6907	ExpressionStatement	 
>6908	CallExpression	ls . finish ( )
>6909	ArgumentList	 
>6910	Callee	ls . finish
>6911	MemberAccess	ls . finish
>6912	Identifier	finish
>6913	Identifier	ls
>6914	ForStatement	for ( int i = 0 ; i < buf_warped_size ; i ++ )
>6915	CompoundStatement	 
>6916	ExpressionStatement	 
>6917	CallExpression	ls . update ( v , r , * ( buf_weight_p + i ) )
>6918	ArgumentList	v
>6919	Argument	* ( buf_weight_p + i )
>6920	UnaryOp	* ( buf_weight_p + i )
>6921	AdditiveExpression	buf_weight_p + i
>6922	Identifier	i
>6923	Identifier	buf_weight_p
>6924	UnaryOperator	*
>6925	Argument	r
>6926	Identifier	r
>6927	Argument	v
>6928	Identifier	v
>6929	Callee	ls . update
>6930	MemberAccess	ls . update
>6931	Identifier	update
>6932	Identifier	ls
>6933	ExpressionStatement	 
>6934	AssignmentExpr	v [ 5 ] = ( - py * z ) * gx + ( px * z ) * gy
>6935	AdditiveExpression	( - py * z ) * gx + ( px * z ) * gy
>6936	MultiplicativeExpression	( px * z ) * gy
>6937	Identifier	gy
>6938	MultiplicativeExpression	px * z
>6939	Identifier	z
>6940	Identifier	px
>6941	MultiplicativeExpression	( - py * z ) * gx
>6942	Identifier	gx
>6943	MultiplicativeExpression	- py * z
>6944	Identifier	z
>6945	UnaryOp	- py
>6946	Identifier	py
>6947	UnaryOperator	-
>6948	ArrayIndexing	v [ 5 ]
>6949	PrimaryExpression	5
>6950	Identifier	v
>6951	ExpressionStatement	 
>6952	AssignmentExpr	v [ 4 ] = ( 1.0 + px * px * z_sqr ) * gx + ( px * py * z_sqr ) * gy
>6953	AdditiveExpression	( 1.0 + px * px * z_sqr ) * gx + ( px * py * z_sqr ) * gy
>6954	MultiplicativeExpression	( px * py * z_sqr ) * gy
>6955	Identifier	gy
>6956	MultiplicativeExpression	px * py * z_sqr
>6957	MultiplicativeExpression	py * z_sqr
>6958	Identifier	z_sqr
>6959	Identifier	py
>6960	Identifier	px
>6961	MultiplicativeExpression	( 1.0 + px * px * z_sqr ) * gx
>6962	Identifier	gx
>6963	AdditiveExpression	1.0 + px * px * z_sqr
>6964	MultiplicativeExpression	px * px * z_sqr
>6965	MultiplicativeExpression	px * z_sqr
>6966	Identifier	z_sqr
>6967	Identifier	px
>6968	Identifier	px
>6969	PrimaryExpression	1.0
>6970	ArrayIndexing	v [ 4 ]
>6971	PrimaryExpression	4
>6972	Identifier	v
>6973	ExpressionStatement	 
>6974	AssignmentExpr	v [ 3 ] = ( - px * py * z_sqr ) * gx + ( - ( 1.0 + py * py * z_sqr ) ) * gy
>6975	AdditiveExpression	( - px * py * z_sqr ) * gx + ( - ( 1.0 + py * py * z_sqr ) ) * gy
>6976	MultiplicativeExpression	( - ( 1.0 + py * py * z_sqr ) ) * gy
>6977	Identifier	gy
>6978	UnaryOp	- ( 1.0 + py * py * z_sqr )
>6979	AdditiveExpression	1.0 + py * py * z_sqr
>6980	MultiplicativeExpression	py * py * z_sqr
>6981	MultiplicativeExpression	py * z_sqr
>6982	Identifier	z_sqr
>6983	Identifier	py
>6984	Identifier	py
>6985	PrimaryExpression	1.0
>6986	UnaryOperator	-
>6987	MultiplicativeExpression	( - px * py * z_sqr ) * gx
>6988	Identifier	gx
>6989	MultiplicativeExpression	- px * py * z_sqr
>6990	MultiplicativeExpression	py * z_sqr
>6991	Identifier	z_sqr
>6992	Identifier	py
>6993	UnaryOp	- px
>6994	Identifier	px
>6995	UnaryOperator	-
>6996	ArrayIndexing	v [ 3 ]
>6997	PrimaryExpression	3
>6998	Identifier	v
>6999	ExpressionStatement	 
>7000	AssignmentExpr	v [ 2 ] = ( - px * z_sqr ) * gx + ( - py * z_sqr ) * gy
>7001	AdditiveExpression	( - px * z_sqr ) * gx + ( - py * z_sqr ) * gy
>7002	MultiplicativeExpression	( - py * z_sqr ) * gy
>7003	Identifier	gy
>7004	MultiplicativeExpression	- py * z_sqr
>7005	Identifier	z_sqr
>7006	UnaryOp	- py
>7007	Identifier	py
>7008	UnaryOperator	-
>7009	MultiplicativeExpression	( - px * z_sqr ) * gx
>7010	Identifier	gx
>7011	MultiplicativeExpression	- px * z_sqr
>7012	Identifier	z_sqr
>7013	UnaryOp	- px
>7014	Identifier	px
>7015	UnaryOperator	-
>7016	ArrayIndexing	v [ 2 ]
>7017	PrimaryExpression	2
>7018	Identifier	v
>7019	ExpressionStatement	 
>7020	AssignmentExpr	v [ 1 ] = 0 + z * gy
>7021	AdditiveExpression	0 + z * gy
>7022	MultiplicativeExpression	z * gy
>7023	Identifier	gy
>7024	Identifier	z
>7025	PrimaryExpression	0
>7026	ArrayIndexing	v [ 1 ]
>7027	PrimaryExpression	1
>7028	Identifier	v
>7029	ExpressionStatement	 
>7030	AssignmentExpr	v [ 0 ] = z * gx + 0
>7031	AdditiveExpression	z * gx + 0
>7032	PrimaryExpression	0
>7033	MultiplicativeExpression	z * gx
>7034	Identifier	gx
>7035	Identifier	z
>7036	ArrayIndexing	v [ 0 ]
>7037	PrimaryExpression	0
>7038	Identifier	v
>7039	IdentifierDeclStatement	 
>7040	IdentifierDecl	v
>7041	Identifier	v
>7042	IdentifierDeclType	Vector6
>7043	IdentifierDeclStatement	 
>7044	IdentifierDecl	z_sqr = 1.0f / ( pz * pz )
>7045	AssignmentExpr	z_sqr = 1.0f / ( pz * pz )
>7046	MultiplicativeExpression	1.0f / ( pz * pz )
>7047	MultiplicativeExpression	pz * pz
>7048	Identifier	pz
>7049	Identifier	pz
>7050	PrimaryExpression	1.0f
>7051	Identifier	z_sqr
>7052	Identifier	z_sqr
>7053	IdentifierDeclType	float
>7054	IdentifierDeclStatement	 
>7055	IdentifierDecl	z = 1.0f / pz
>7056	AssignmentExpr	z = 1.0f / pz
>7057	MultiplicativeExpression	1.0f / pz
>7058	Identifier	pz
>7059	PrimaryExpression	1.0f
>7060	Identifier	z
>7061	Identifier	z
>7062	IdentifierDeclType	float
>7063	IdentifierDeclStatement	 
>7064	IdentifierDecl	gy = * ( buf_warped_dy + i )
>7065	AssignmentExpr	gy = * ( buf_warped_dy + i )
>7066	UnaryOp	* ( buf_warped_dy + i )
>7067	AdditiveExpression	buf_warped_dy + i
>7068	Identifier	i
>7069	Identifier	buf_warped_dy
>7070	UnaryOperator	*
>7071	Identifier	gy
>7072	Identifier	gy
>7073	IdentifierDeclType	float
>7074	IdentifierDeclStatement	 
>7075	IdentifierDecl	gx = * ( buf_warped_dx + i )
>7076	AssignmentExpr	gx = * ( buf_warped_dx + i )
>7077	UnaryOp	* ( buf_warped_dx + i )
>7078	AdditiveExpression	buf_warped_dx + i
>7079	Identifier	i
>7080	Identifier	buf_warped_dx
>7081	UnaryOperator	*
>7082	Identifier	gx
>7083	Identifier	gx
>7084	IdentifierDeclType	float
>7085	IdentifierDeclStatement	 
>7086	IdentifierDecl	r = * ( buf_warped_residual + i )
>7087	AssignmentExpr	r = * ( buf_warped_residual + i )
>7088	UnaryOp	* ( buf_warped_residual + i )
>7089	AdditiveExpression	buf_warped_residual + i
>7090	Identifier	i
>7091	Identifier	buf_warped_residual
>7092	UnaryOperator	*
>7093	Identifier	r
>7094	Identifier	r
>7095	IdentifierDeclType	float
>7096	IdentifierDeclStatement	 
>7097	IdentifierDecl	pz = * ( buf_warped_z + i )
>7098	AssignmentExpr	pz = * ( buf_warped_z + i )
>7099	UnaryOp	* ( buf_warped_z + i )
>7100	AdditiveExpression	buf_warped_z + i
>7101	Identifier	i
>7102	Identifier	buf_warped_z
>7103	UnaryOperator	*
>7104	Identifier	pz
>7105	Identifier	pz
>7106	IdentifierDeclType	float
>7107	IdentifierDeclStatement	 
>7108	IdentifierDecl	py = * ( buf_warped_y + i )
>7109	AssignmentExpr	py = * ( buf_warped_y + i )
>7110	UnaryOp	* ( buf_warped_y + i )
>7111	AdditiveExpression	buf_warped_y + i
>7112	Identifier	i
>7113	Identifier	buf_warped_y
>7114	UnaryOperator	*
>7115	Identifier	py
>7116	Identifier	py
>7117	IdentifierDeclType	float
>7118	IdentifierDeclStatement	 
>7119	IdentifierDecl	px = * ( buf_warped_x + i )
>7120	AssignmentExpr	px = * ( buf_warped_x + i )
>7121	UnaryOp	* ( buf_warped_x + i )
>7122	AdditiveExpression	buf_warped_x + i
>7123	Identifier	i
>7124	Identifier	buf_warped_x
>7125	UnaryOperator	*
>7126	Identifier	px
>7127	Identifier	px
>7128	IdentifierDeclType	float
>7129	IncDecOp	 
>7130	IncDec	++
>7131	Identifier	i
>7132	Condition	 
>7133	RelationalExpression	i < buf_warped_size
>7134	Identifier	buf_warped_size
>7135	Identifier	i
>7136	ForInit	 
>7137	IdentifierDeclStatement	int i = 0 ;
>7138	IdentifierDecl	i = 0
>7139	AssignmentExpr	i = 0
>7140	PrimaryExpression	0
>7141	Identifier	i
>7142	Identifier	i
>7143	IdentifierDeclType	int
>7144	ExpressionStatement	 
>7145	CallExpression	ls . initialize ( width * height )
>7146	ArgumentList	width * height
>7147	Argument	width * height
>7148	MultiplicativeExpression	width * height
>7149	Identifier	height
>7150	Identifier	width
>7151	Callee	ls . initialize
>7152	MemberAccess	ls . initialize
>7153	Identifier	initialize
>7154	Identifier	ls
<3=14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=373,369,363,352,341,330,319,312,303,292,281,270,259,242,225,208,191,174,157,140,123,106,102,89,76,63,50,37,33,29,25,19,15
<15=16
<16=18,17
<19=20
<20=24,21
<21=23,22
<25=26
<26=28,27
<29=30
<30=32,31
<33=34
<34=36,35
<37=38
<38=49,39
<39=47,40
<40=45,43,41
<41=42
<43=44
<45=46
<47=48
<50=51
<51=62,52
<52=60,53
<53=58,56,54
<54=55
<56=57
<58=59
<60=61
<63=64
<64=75,65
<65=73,66
<66=71,69,67
<67=68
<69=70
<71=72
<73=74
<76=77
<77=88,78
<78=86,79
<79=84,82,80
<80=81
<82=83
<84=85
<86=87
<89=90
<90=101,91
<91=99,92
<92=97,95,93
<93=94
<95=96
<97=98
<99=100
<102=103
<103=105,104
<106=107
<107=122,108
<108=121,109
<109=119,110
<110=111
<111=112
<112=118,113
<113=117,114
<114=116,115
<119=120
<123=124
<124=139,125
<125=138,126
<126=136,127
<127=128
<128=129
<129=135,130
<130=134,131
<131=133,132
<136=137
<140=141
<141=156,142
<142=155,143
<143=153,144
<144=145
<145=146
<146=152,147
<147=151,148
<148=150,149
<153=154
<157=158
<158=173,159
<159=172,160
<160=170,161
<161=162
<162=163
<163=169,164
<164=168,165
<165=167,166
<170=171
<174=175
<175=190,176
<176=189,177
<177=187,178
<178=179
<179=180
<180=186,181
<181=185,182
<182=184,183
<187=188
<191=192
<192=207,193
<193=206,194
<194=204,195
<195=196
<196=197
<197=203,198
<198=202,199
<199=201,200
<204=205
<208=209
<209=224,210
<210=223,211
<211=221,212
<212=213
<213=214
<214=220,215
<215=219,216
<216=218,217
<221=222
<225=226
<226=241,227
<227=240,228
<228=238,229
<229=230
<230=231
<231=237,232
<232=236,233
<233=235,234
<238=239
<242=243
<243=258,244
<244=257,245
<245=255,246
<246=247
<247=248
<248=254,249
<249=253,250
<250=252,251
<255=256
<259=260
<260=269,261
<261=267,262
<262=265,263
<263=264
<265=266
<267=268
<270=271
<271=280,272
<272=278,273
<273=276,274
<274=275
<276=277
<278=279
<281=282
<282=291,283
<283=289,284
<284=287,285
<285=286
<287=288
<289=290
<292=293
<293=302,294
<294=300,295
<295=298,296
<296=297
<298=299
<300=301
<303=304
<304=311,305
<305=307,306
<307=308
<308=310,309
<312=313
<313=318,314
<314=316,315
<316=317
<319=320
<320=329,321
<321=327,322
<322=325,323
<323=324
<325=326
<327=328
<330=331
<331=340,332
<332=338,333
<333=336,334
<334=335
<336=337
<338=339
<341=342
<342=351,343
<343=349,344
<344=347,345
<345=346
<347=348
<349=350
<352=353
<353=362,354
<354=360,355
<355=358,356
<356=357
<358=359
<360=361
<363=364
<364=366,365
<366=368,367
<369=370
<370=372,371
<373=374
<374=376,375
<425=427,426
<427=537,530,523,516,509,500,491,482,473,464,455,446,437,428
<428=429
<429=435,430
<430=431
<431=432
<432=434,433
<435=436
<437=438
<438=444,439
<439=440
<440=441
<441=443,442
<444=445
<446=447
<447=453,448
<448=449
<449=450
<450=452,451
<453=454
<455=456
<456=462,457
<457=458
<458=459
<459=461,460
<462=463
<464=465
<465=471,466
<466=467
<467=468
<468=470,469
<471=472
<473=474
<474=480,475
<475=476
<476=477
<477=479,478
<480=481
<482=483
<483=489,484
<484=485
<485=486
<486=488,487
<489=490
<491=492
<492=498,493
<493=494
<494=495
<495=497,496
<498=499
<500=501
<501=507,502
<502=503
<503=504
<504=506,505
<507=508
<509=510
<510=512,511
<512=513
<513=515,514
<516=517
<517=519,518
<519=520
<520=522,521
<523=524
<524=526,525
<526=527
<527=529,528
<530=531
<531=533,532
<533=534
<534=536,535
<537=538
<538=540,539
<540=541
<541=543,542
<561=570,569,562
<562=566,563
<563=565,564
<566=568,567
<570=863,862,861,860,859,858,857,856,855,854,853,852,851,850,837,821,805,791,777,763,749,735,723,711,698,689,682,583,573,571
<571=572
<573=574
<574=582,575
<575=581,576
<576=580,577
<577=579,578
<583=678,675,584
<584=662,645,628,585
<585=612,586
<586=597,587
<587=588
<588=596,589
<589=592,591,590
<592=593
<593=595,594
<597=598
<598=611,610,599
<599=609,600
<600=604,601
<601=603,602
<604=606,605
<606=608,607
<612=613
<613=625,614
<614=622,615
<615=619,616
<616=618,617
<619=621,620
<622=624,623
<625=627,626
<628=629
<629=644,643,630
<630=642,631
<631=633,632
<633=635,634
<635=639,636
<636=638,637
<639=641,640
<645=646
<646=661,660,647
<647=659,648
<648=650,649
<650=652,651
<652=656,653
<653=655,654
<656=658,657
<662=663
<663=674,673,664
<664=672,665
<665=667,666
<667=671,668
<668=670,669
<675=677,676
<678=679
<679=681,680
<682=683
<683=688,687,684
<684=686,685
<689=690
<690=697,696,691
<691=695,692
<692=694,693
<698=699
<699=710,709,700
<700=708,701
<701=705,702
<702=704,703
<705=707,706
<711=712
<712=722,721,713
<713=720,714
<714=716,715
<716=717
<717=719,718
<723=724
<724=734,733,725
<725=732,726
<726=728,727
<728=729
<729=731,730
<735=736
<736=748,747,737
<737=746,738
<738=744,739
<739=742,740
<740=741
<742=743
<744=745
<749=750
<750=762,761,751
<751=760,752
<752=758,753
<753=756,754
<754=755
<756=757
<758=759
<763=764
<764=776,775,765
<765=774,766
<766=772,767
<767=770,768
<768=769
<770=771
<772=773
<777=778
<778=790,789,779
<779=788,780
<780=786,781
<781=784,782
<782=783
<784=785
<786=787
<791=792
<792=804,803,793
<793=802,794
<794=798,795
<795=796
<796=797
<798=799
<799=801,800
<805=806
<806=820,819,807
<807=818,808
<808=810,809
<810=814,811
<811=812
<812=813
<814=815
<815=817,816
<821=822
<822=836,835,823
<823=834,824
<824=826,825
<826=830,827
<827=828
<828=829
<830=831
<831=833,832
<837=838
<838=849,848,839
<839=847,840
<840=846,841
<841=845,842
<842=844,843
<903=915,914,904
<904=911,908,905
<905=907,906
<908=910,909
<911=913,912
<915=1414,1413,1412,1411,1410,1409,1408,1407,1406,1405,1404,1403,1402,1401,1389,1376,1372,1368,1364,1360,1356,1327,1300,1288,1274,1265,963,959,923,916
<916=917
<917=921,918
<918=919
<919=920
<921=922
<923=924
<924=958,925
<925=955,926
<926=934,927
<927=929,928
<929=933,930
<930=932,931
<934=936,935
<936=954,937
<937=946,938
<938=942,939
<939=940
<940=941
<942=943
<943=945,944
<946=950,947
<947=948
<948=949
<950=951
<951=953,952
<955=957,956
<959=960
<960=962,961
<963=1257,1251,1248,964
<964=1239,1232,965
<965=1230,966
<966=1219,1210,1181,1162,1158,1144,1115,1088,1074,967
<967=1070,1017,968
<968=969
<969=993,970
<970=989,985,971
<971=972
<972=973
<973=984,974
<974=982,975
<975=978,976
<976=977
<978=979
<979=981,980
<982=983
<985=986
<986=988,987
<989=990
<990=992,991
<993=1002,994
<994=996,995
<996=997
<997=1001,998
<998=1000,999
<1002=1003
<1003=1016,1004
<1004=1008,1005
<1005=1007,1006
<1008=1012,1009
<1009=1010
<1010=1011
<1012=1013
<1013=1015,1014
<1017=1066,1054,1039,1035,1019,1018
<1019=1031,1027,1020
<1020=1021
<1021=1022
<1022=1026,1023
<1023=1025,1024
<1027=1028
<1028=1030,1029
<1031=1032
<1032=1034,1033
<1035=1036
<1036=1038,1037
<1039=1046,1040
<1040=1041
<1041=1045,1042
<1042=1044,1043
<1046=1047
<1047=1051,1048
<1048=1050,1049
<1051=1053,1052
<1054=1064,1055
<1055=1060,1056
<1056=1057
<1057=1059,1058
<1060=1061
<1061=1063,1062
<1064=1065
<1066=1067
<1067=1069,1068
<1070=1071
<1071=1073,1072
<1074=1075
<1075=1087,1086,1076
<1076=1085,1077
<1077=1083,1078
<1078=1081,1079
<1079=1080
<1081=1082
<1083=1084
<1088=1103,1089
<1089=1099,1095,1090
<1090=1091
<1091=1093,1092
<1093=1094
<1095=1096
<1096=1098,1097
<1099=1100
<1100=1102,1101
<1103=1104
<1104=1114,1105
<1105=1113,1106
<1106=1110,1107
<1107=1109,1108
<1110=1112,1111
<1115=1116
<1116=1142,1117
<1117=1140,1118
<1118=1119
<1119=1137,1120
<1120=1134,1121
<1121=1133,1122
<1122=1130,1123
<1123=1129,1124
<1124=1128,1125
<1125=1127,1126
<1130=1132,1131
<1134=1136,1135
<1137=1139,1138
<1140=1141
<1142=1143
<1144=1145
<1145=1157,1156,1146
<1146=1155,1147
<1147=1149,1148
<1149=1153,1150
<1150=1151
<1151=1152
<1153=1154
<1158=1159
<1159=1161,1160
<1162=1163
<1163=1180,1179,1164
<1164=1178,1165
<1165=1169,1166
<1166=1167
<1167=1168
<1169=1170
<1170=1172,1171
<1172=1174,1173
<1174=1175
<1175=1177,1176
<1181=1202,1198,1195,1182
<1182=1183
<1183=1187,1184
<1184=1186,1185
<1187=1193,1188
<1188=1191,1189
<1189=1190
<1191=1192
<1193=1194
<1195=1197,1196
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1204
<1204=1209,1208,1205
<1205=1207,1206
<1210=1211
<1211=1218,1217,1212
<1212=1216,1213
<1213=1215,1214
<1219=1220
<1220=1229,1228,1221
<1221=1227,1222
<1222=1226,1223
<1223=1225,1224
<1230=1231
<1232=1233
<1233=1238,1237,1234
<1234=1236,1235
<1239=1240
<1240=1246,1241
<1241=1244,1242
<1242=1243
<1244=1245
<1246=1247
<1248=1250,1249
<1251=1252
<1252=1256,1253
<1253=1255,1254
<1257=1258
<1258=1259
<1259=1264,1263,1260
<1260=1262,1261
<1265=1266
<1266=1273,1272,1267
<1267=1271,1268
<1268=1270,1269
<1274=1275
<1275=1287,1286,1276
<1276=1285,1277
<1277=1283,1278
<1278=1281,1279
<1279=1280
<1281=1282
<1283=1284
<1288=1298,1289
<1289=1294,1290
<1290=1291
<1291=1293,1292
<1294=1295
<1295=1297,1296
<1298=1299
<1300=1315,1301
<1301=1311,1307,1302
<1302=1303
<1303=1305,1304
<1305=1306
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1314,1313
<1315=1316
<1316=1326,1317
<1317=1325,1318
<1318=1322,1319
<1319=1321,1320
<1322=1324,1323
<1327=1328
<1328=1354,1329
<1329=1352,1330
<1330=1331
<1331=1349,1332
<1332=1346,1333
<1333=1345,1334
<1334=1342,1335
<1335=1341,1336
<1336=1340,1337
<1337=1339,1338
<1342=1344,1343
<1346=1348,1347
<1349=1351,1350
<1352=1353
<1354=1355
<1356=1357
<1357=1359,1358
<1360=1361
<1361=1363,1362
<1364=1365
<1365=1367,1366
<1368=1369
<1369=1371,1370
<1372=1373
<1373=1375,1374
<1376=1377
<1377=1388,1387,1378
<1378=1386,1379
<1379=1385,1380
<1380=1384,1381
<1381=1383,1382
<1389=1390
<1390=1400,1399,1391
<1391=1398,1392
<1392=1394,1393
<1394=1395
<1395=1397,1396
<1485=1497,1496,1486
<1486=1493,1490,1487
<1487=1489,1488
<1490=1492,1491
<1493=1495,1494
<1497=2502,2498,2494,2490,2486,2474,2398,2397,2396,2395,2394,2393,2392,2391,2390,2389,2388,2387,2386,2385,2384,2383,2382,2381,2380,2376,2371,2366,2359,1680,1666,1610,1606,1602,1566,1555,1547,1522,1510,1498
<1498=1499
<1499=1508,1500
<1500=1501
<1501=1502
<1502=1504,1503
<1504=1505
<1505=1507,1506
<1508=1509
<1510=1511
<1511=1517,1512
<1512=1514,1513
<1514=1516,1515
<1517=1519,1518
<1519=1521,1520
<1522=1523
<1523=1542,1524
<1524=1540,1525
<1525=1528,1526
<1526=1527
<1528=1529
<1529=1538,1530
<1530=1531
<1531=1532
<1532=1534,1533
<1534=1535
<1535=1537,1536
<1538=1539
<1540=1541
<1542=1544,1543
<1544=1546,1545
<1547=1548
<1548=1552,1549
<1549=1551,1550
<1552=1554,1553
<1555=1564,1556
<1556=1557
<1557=1559,1558
<1559=1561,1560
<1561=1563,1562
<1564=1565
<1566=1567
<1567=1601,1568
<1568=1598,1569
<1569=1577,1570
<1570=1572,1571
<1572=1576,1573
<1573=1575,1574
<1577=1579,1578
<1579=1597,1580
<1580=1589,1581
<1581=1585,1582
<1582=1583
<1583=1584
<1585=1586
<1586=1588,1587
<1589=1593,1590
<1590=1591
<1591=1592
<1593=1594
<1594=1596,1595
<1598=1600,1599
<1602=1603
<1603=1605,1604
<1606=1607
<1607=1609,1608
<1610=1662,1611
<1611=1655,1619,1612
<1612=1613
<1613=1617,1614
<1614=1615
<1615=1616
<1617=1618
<1619=1645,1641,1638,1620
<1620=1621
<1621=1622
<1622=1636,1623
<1623=1634,1632,1628,1624
<1624=1625
<1625=1627,1626
<1628=1629
<1629=1631,1630
<1632=1633
<1634=1635
<1636=1637
<1638=1640,1639
<1641=1642
<1642=1644,1643
<1645=1646
<1646=1647
<1647=1654,1653,1648
<1648=1652,1649
<1649=1651,1650
<1655=1656
<1656=1660,1657
<1657=1658
<1658=1659
<1660=1661
<1662=1663
<1663=1665,1664
<1666=1678,1667
<1667=1668
<1668=1676,1669
<1669=1674,1672,1670
<1670=1671
<1672=1673
<1674=1675
<1676=1677
<1678=1679
<1680=2349,2345,2342,1681
<1681=2336,2330,2321,2272,2245,2233,2219,2213,2202,1682
<1682=2194,2186,2183,1683
<1683=2174,2168,2164,2157,1684
<1684=2155,1685
<1685=2144,2135,2106,2087,2083,2069,2020,1993,1979,1973,1686
<1686=1969,1794,1687
<1687=1688
<1688=1757,1712,1689
<1689=1708,1704,1690
<1690=1691
<1691=1692
<1692=1703,1693
<1693=1701,1694
<1694=1697,1695
<1695=1696
<1697=1698
<1698=1700,1699
<1701=1702
<1704=1705
<1705=1707,1706
<1708=1709
<1709=1711,1710
<1712=1740,1713
<1713=1723,1715,1714
<1715=1716
<1716=1722,1717
<1717=1719,1718
<1719=1721,1720
<1723=1736,1724
<1724=1725
<1725=1726
<1726=1734,1727
<1727=1732,1730,1728
<1728=1729
<1730=1731
<1732=1733
<1734=1735
<1736=1737
<1737=1739,1738
<1740=1741
<1741=1756,1742
<1742=1748,1743
<1743=1745,1744
<1745=1747,1746
<1748=1752,1749
<1749=1750
<1750=1751
<1752=1753
<1753=1755,1754
<1757=1790,1758
<1758=1759
<1759=1760
<1760=1788,1761
<1761=1786,1784,1782,1768,1766,1764,1762
<1762=1763
<1764=1765
<1766=1767
<1768=1769
<1769=1780,1770
<1770=1771
<1771=1772
<1772=1776,1773
<1773=1774
<1774=1775
<1776=1777
<1777=1779,1778
<1780=1781
<1782=1783
<1784=1785
<1786=1787
<1788=1789
<1790=1791
<1791=1793,1792
<1794=1965,1953,1855,1818,1812,1796,1795
<1796=1808,1804,1797
<1797=1798
<1798=1799
<1799=1803,1800
<1800=1802,1801
<1804=1805
<1805=1807,1806
<1808=1809
<1809=1811,1810
<1812=1813
<1813=1817,1814
<1814=1816,1815
<1818=1845,1819
<1819=1828,1820
<1820=1821
<1821=1827,1822
<1822=1824,1823
<1824=1826,1825
<1828=1841,1829
<1829=1830
<1830=1831
<1831=1839,1832
<1832=1837,1835,1833
<1833=1834
<1835=1836
<1837=1838
<1839=1840
<1841=1842
<1842=1844,1843
<1845=1846
<1846=1852,1847
<1847=1849,1848
<1849=1851,1850
<1852=1854,1853
<1855=1949,1856
<1856=1918,1857
<1857=1858
<1858=1916,1859
<1859=1914,1905,1896,1887,1878,1869,1860
<1860=1861
<1861=1863,1862
<1863=1865,1864
<1865=1866
<1866=1868,1867
<1869=1870
<1870=1872,1871
<1872=1874,1873
<1874=1875
<1875=1877,1876
<1878=1879
<1879=1881,1880
<1881=1883,1882
<1883=1884
<1884=1886,1885
<1887=1888
<1888=1890,1889
<1890=1892,1891
<1892=1893
<1893=1895,1894
<1896=1897
<1897=1899,1898
<1899=1901,1900
<1901=1902
<1902=1904,1903
<1905=1906
<1906=1908,1907
<1908=1910,1909
<1910=1911
<1911=1913,1912
<1914=1915
<1916=1917
<1918=1919
<1919=1947,1920
<1920=1945,1943,1941,1927,1925,1923,1921
<1921=1922
<1923=1924
<1925=1926
<1927=1928
<1928=1939,1929
<1929=1930
<1930=1931
<1931=1935,1932
<1932=1933
<1933=1934
<1935=1936
<1936=1938,1937
<1939=1940
<1941=1942
<1943=1944
<1945=1946
<1947=1948
<1949=1950
<1950=1952,1951
<1953=1963,1954
<1954=1959,1955
<1955=1956
<1956=1958,1957
<1959=1960
<1960=1962,1961
<1963=1964
<1965=1966
<1966=1968,1967
<1969=1970
<1970=1972,1971
<1973=1974
<1974=1976,1975
<1976=1978,1977
<1979=1980
<1980=1992,1991,1981
<1981=1990,1982
<1982=1988,1983
<1983=1986,1984
<1984=1985
<1986=1987
<1988=1989
<1993=2008,1994
<1994=2004,2000,1995
<1995=1996
<1996=1998,1997
<1998=1999
<2000=2001
<2001=2003,2002
<2004=2005
<2005=2007,2006
<2008=2009
<2009=2019,2010
<2010=2018,2011
<2011=2015,2012
<2012=2014,2013
<2015=2017,2016
<2020=2021
<2021=2067,2022
<2022=2065,2023
<2023=2024
<2024=2060,2025
<2025=2055,2026
<2026=2044,2027
<2027=2039,2028
<2028=2038,2029
<2029=2037,2030
<2030=2036,2031
<2031=2035,2032
<2032=2034,2033
<2039=2041,2040
<2041=2043,2042
<2044=2051,2046,2045
<2046=2048,2047
<2048=2050,2049
<2051=2052
<2052=2054,2053
<2055=2057,2056
<2057=2059,2058
<2060=2062,2061
<2062=2064,2063
<2065=2066
<2067=2068
<2069=2070
<2070=2082,2081,2071
<2071=2080,2072
<2072=2074,2073
<2074=2078,2075
<2075=2076
<2076=2077
<2078=2079
<2083=2084
<2084=2086,2085
<2087=2088
<2088=2105,2104,2089
<2089=2103,2090
<2090=2094,2091
<2091=2092
<2092=2093
<2094=2095
<2095=2097,2096
<2097=2099,2098
<2099=2100
<2100=2102,2101
<2106=2127,2123,2120,2107
<2107=2108
<2108=2112,2109
<2109=2111,2110
<2112=2118,2113
<2113=2116,2114
<2114=2115
<2116=2117
<2118=2119
<2120=2122,2121
<2123=2124
<2124=2126,2125
<2127=2128
<2128=2129
<2129=2134,2133,2130
<2130=2132,2131
<2135=2136
<2136=2143,2142,2137
<2137=2141,2138
<2138=2140,2139
<2144=2145
<2145=2154,2153,2146
<2146=2152,2147
<2147=2151,2148
<2148=2150,2149
<2155=2156
<2157=2158
<2158=2163,2162,2159
<2159=2161,2160
<2164=2165
<2165=2167,2166
<2168=2169
<2169=2171,2170
<2171=2173,2172
<2174=2175
<2175=2181,2176
<2176=2179,2177
<2177=2178
<2179=2180
<2181=2182
<2183=2185,2184
<2186=2187
<2187=2193,2188
<2188=2190,2189
<2190=2192,2191
<2194=2195
<2195=2196
<2196=2201,2200,2197
<2197=2199,2198
<2202=2203
<2203=2212,2211,2204
<2204=2210,2205
<2205=2207,2206
<2207=2209,2208
<2213=2214
<2214=2216,2215
<2216=2218,2217
<2219=2220
<2220=2232,2231,2221
<2221=2230,2222
<2222=2228,2223
<2223=2226,2224
<2224=2225
<2226=2227
<2228=2229
<2233=2243,2234
<2234=2239,2235
<2235=2236
<2236=2238,2237
<2239=2240
<2240=2242,2241
<2243=2244
<2245=2260,2246
<2246=2256,2252,2247
<2247=2248
<2248=2250,2249
<2250=2251
<2252=2253
<2253=2255,2254
<2256=2257
<2257=2259,2258
<2260=2261
<2261=2271,2262
<2262=2270,2263
<2263=2267,2264
<2264=2266,2265
<2267=2269,2268
<2272=2273
<2273=2319,2274
<2274=2317,2275
<2275=2276
<2276=2312,2277
<2277=2307,2278
<2278=2296,2279
<2279=2291,2280
<2280=2290,2281
<2281=2289,2282
<2282=2288,2283
<2283=2287,2284
<2284=2286,2285
<2291=2293,2292
<2293=2295,2294
<2296=2303,2298,2297
<2298=2300,2299
<2300=2302,2301
<2303=2304
<2304=2306,2305
<2307=2309,2308
<2309=2311,2310
<2312=2314,2313
<2314=2316,2315
<2317=2318
<2319=2320
<2321=2322
<2322=2326,2323
<2323=2324
<2324=2325
<2326=2327
<2327=2329,2328
<2330=2331
<2331=2333,2332
<2333=2335,2334
<2336=2337
<2337=2339,2338
<2339=2341,2340
<2342=2344,2343
<2345=2346
<2346=2348,2347
<2349=2350
<2350=2351
<2351=2358,2357,2352
<2352=2356,2353
<2353=2355,2354
<2359=2360
<2360=2365,2364,2361
<2361=2363,2362
<2366=2367
<2367=2370,2369,2368
<2371=2372
<2372=2375,2374,2373
<2376=2377
<2377=2379,2378
<2398=2472,2399
<2399=2460,2400
<2400=2452,2448,2445,2401
<2401=2437,2433,2430,2402
<2402=2403
<2403=2428,2404
<2404=2424,2411,2409,2407,2405
<2405=2406
<2407=2408
<2409=2410
<2411=2412
<2412=2422,2413
<2413=2414
<2414=2415
<2415=2421,2416
<2416=2420,2417
<2417=2419,2418
<2422=2423
<2424=2425
<2425=2427,2426
<2428=2429
<2430=2432,2431
<2433=2434
<2434=2436,2435
<2437=2438
<2438=2439
<2439=2444,2443,2440
<2440=2442,2441
<2445=2447,2446
<2448=2449
<2449=2451,2450
<2452=2453
<2453=2454
<2454=2459,2458,2455
<2455=2457,2456
<2460=2461
<2461=2471,2470,2462
<2462=2469,2463
<2463=2465,2464
<2465=2466
<2466=2468,2467
<2472=2473
<2474=2484,2475
<2475=2480,2476
<2476=2477
<2477=2479,2478
<2480=2481
<2481=2483,2482
<2484=2485
<2486=2487
<2487=2489,2488
<2490=2491
<2491=2493,2492
<2494=2495
<2495=2497,2496
<2498=2499
<2499=2501,2500
<2502=2503
<2503=2513,2512,2504
<2504=2511,2505
<2505=2507,2506
<2507=2508
<2508=2510,2509
<2635=2641,2640,2636
<2636=2637
<2637=2639,2638
<2641=3208,3187,3166,3154,3142,3126,3112,3094,3087,3080,2688,2650,2642
<2642=2643
<2643=2649,2644
<2644=2646,2645
<2646=2648,2647
<2650=2651
<2651=2687,2652
<2652=2679,2653
<2653=2671,2654
<2654=2663,2655
<2655=2661,2656
<2656=2659,2657
<2657=2658
<2659=2660
<2661=2662
<2663=2669,2664
<2664=2667,2665
<2665=2666
<2667=2668
<2669=2670
<2671=2677,2672
<2672=2675,2673
<2673=2674
<2675=2676
<2677=2678
<2679=2685,2680
<2680=2683,2681
<2681=2682
<2683=2684
<2685=2686
<2688=3072,3066,3063,2689
<2689=3049,3016,2981,2970,2935,2924,2882,2835,2809,2791,2777,2740,2708,2690
<2690=2691
<2691=2706,2692
<2692=2702,2693
<2693=2694
<2694=2700,2695
<2695=2698,2696
<2696=2697
<2698=2699
<2700=2701
<2702=2703
<2703=2705,2704
<2706=2707
<2708=2734,2709
<2709=2710
<2710=2733,2711
<2711=2731,2712
<2712=2729,2713
<2713=2714
<2714=2727,2715
<2715=2725,2716
<2716=2717
<2717=2723,2718
<2718=2721,2719
<2719=2720
<2721=2722
<2723=2724
<2725=2726
<2727=2728
<2729=2730
<2731=2732
<2734=2735
<2735=2737,2736
<2737=2739,2738
<2740=2741
<2741=2776,2742
<2742=2774,2743
<2743=2765,2744
<2744=2745
<2745=2763,2746
<2746=2761,2747
<2747=2748
<2748=2759,2749
<2749=2757,2750
<2750=2751
<2751=2755,2752
<2752=2753
<2753=2754
<2755=2756
<2757=2758
<2759=2760
<2761=2762
<2763=2764
<2765=2766
<2766=2772,2767
<2767=2770,2768
<2768=2769
<2770=2771
<2772=2773
<2774=2775
<2777=2778
<2778=2790,2789,2779
<2779=2788,2780
<2780=2786,2781
<2781=2784,2782
<2782=2783
<2784=2785
<2786=2787
<2791=2792
<2792=2808,2793
<2793=2806,2794
<2794=2804,2795
<2795=2796
<2796=2802,2797
<2797=2800,2798
<2798=2799
<2800=2801
<2802=2803
<2804=2805
<2806=2807
<2809=2810
<2810=2834,2833,2811
<2811=2832,2812
<2812=2830,2813
<2813=2821,2814
<2814=2815
<2815=2819,2816
<2816=2817
<2817=2818
<2819=2820
<2821=2822
<2822=2828,2823
<2823=2824
<2824=2825
<2825=2827,2826
<2828=2829
<2830=2831
<2835=2836
<2836=2881,2880,2837
<2837=2879,2838
<2838=2877,2839
<2839=2840
<2840=2841
<2841=2875,2842
<2842=2873,2843
<2843=2844
<2844=2871,2845
<2845=2869,2846
<2846=2847
<2847=2867,2848
<2848=2865,2849
<2849=2850
<2850=2863,2851
<2851=2861,2852
<2852=2853
<2853=2859,2854
<2854=2855
<2855=2856
<2856=2858,2857
<2859=2860
<2861=2862
<2863=2864
<2865=2866
<2867=2868
<2869=2870
<2871=2872
<2873=2874
<2875=2876
<2877=2878
<2882=2883
<2883=2923,2922,2884
<2884=2921,2885
<2885=2919,2886
<2886=2903,2887
<2887=2888
<2888=2901,2889
<2889=2899,2890
<2890=2891
<2891=2897,2892
<2892=2893
<2893=2894
<2894=2896,2895
<2897=2898
<2899=2900
<2901=2902
<2903=2904
<2904=2917,2905
<2905=2915,2906
<2906=2907
<2907=2913,2908
<2908=2909
<2909=2910
<2910=2912,2911
<2913=2914
<2915=2916
<2917=2918
<2919=2920
<2924=2925
<2925=2934,2926
<2926=2932,2927
<2927=2930,2928
<2928=2929
<2930=2931
<2932=2933
<2935=2936
<2936=2969,2968,2937
<2937=2967,2938
<2938=2965,2939
<2939=2956,2940
<2940=2941
<2941=2954,2942
<2942=2945,2943
<2943=2944
<2945=2946
<2946=2952,2947
<2947=2948
<2948=2949
<2949=2951,2950
<2952=2953
<2954=2955
<2956=2957
<2957=2963,2958
<2958=2961,2959
<2959=2960
<2961=2962
<2963=2964
<2965=2966
<2970=2971
<2971=2980,2972
<2972=2978,2973
<2973=2976,2974
<2974=2975
<2976=2977
<2978=2979
<2981=2982
<2982=3015,3014,2983
<2983=3013,2984
<2984=3011,2985
<2985=3002,2986
<2986=2987
<2987=3000,2988
<2988=2991,2989
<2989=2990
<2991=2992
<2992=2998,2993
<2993=2994
<2994=2995
<2995=2997,2996
<2998=2999
<3000=3001
<3002=3003
<3003=3009,3004
<3004=3007,3005
<3005=3006
<3007=3008
<3009=3010
<3011=3012
<3016=3017
<3017=3048,3047,3018
<3018=3046,3019
<3019=3044,3020
<3020=3021
<3021=3022
<3022=3042,3023
<3023=3033,3024
<3024=3025
<3025=3031,3026
<3026=3027
<3027=3028
<3028=3030,3029
<3031=3032
<3033=3034
<3034=3040,3035
<3035=3038,3036
<3036=3037
<3038=3039
<3040=3041
<3042=3043
<3044=3045
<3049=3050
<3050=3062,3061,3051
<3051=3060,3052
<3052=3058,3053
<3053=3054
<3054=3055
<3055=3057,3056
<3058=3059
<3063=3065,3064
<3066=3067
<3067=3071,3068
<3068=3070,3069
<3072=3073
<3073=3074
<3074=3079,3078,3075
<3075=3077,3076
<3080=3081
<3081=3086,3085,3082
<3082=3084,3083
<3087=3088
<3088=3093,3092,3089
<3089=3091,3090
<3094=3095
<3095=3111,3110,3096
<3096=3109,3097
<3097=3107,3098
<3098=3099
<3099=3100
<3100=3106,3101
<3101=3103,3102
<3103=3105,3104
<3107=3108
<3112=3113
<3113=3125,3124,3114
<3114=3123,3115
<3115=3121,3116
<3116=3117
<3117=3118
<3118=3120,3119
<3121=3122
<3126=3127
<3127=3141,3140,3128
<3128=3139,3129
<3129=3137,3130
<3130=3131
<3131=3132
<3132=3136,3133
<3133=3135,3134
<3137=3138
<3142=3143
<3143=3153,3152,3144
<3144=3151,3145
<3145=3149,3146
<3146=3147
<3147=3148
<3149=3150
<3154=3155
<3155=3165,3164,3156
<3156=3163,3157
<3157=3161,3158
<3158=3159
<3159=3160
<3161=3162
<3166=3167
<3167=3186,3185,3168
<3168=3184,3169
<3169=3182,3170
<3170=3171
<3171=3172
<3172=3181,3173
<3173=3175,3174
<3175=3177,3176
<3177=3178
<3178=3180,3179
<3182=3183
<3187=3188
<3188=3207,3206,3189
<3189=3205,3190
<3190=3203,3191
<3191=3192
<3192=3193
<3193=3202,3194
<3194=3196,3195
<3196=3198,3197
<3198=3199
<3199=3201,3200
<3203=3204
<3208=3209
<3209=3228,3227,3210
<3210=3226,3211
<3211=3224,3212
<3212=3213
<3213=3214
<3214=3223,3215
<3215=3217,3216
<3217=3219,3218
<3219=3220
<3220=3222,3221
<3224=3225
<3282=3288,3287,3283
<3283=3284
<3284=3286,3285
<3288=3711,3697,3683,3658,3646,3639,3632,3625,3618,3611,3604,3597,3590,3583,3574,3563,3552,3545,3541,3537,3293,3289
<3289=3290
<3290=3292,3291
<3293=3527,3523,3520,3294
<3294=3509,3498,3487,3476,3465,3454,3443,3428,3409,3390,3377,3362,3343,3315,3305,3295
<3295=3296
<3296=3300,3297
<3297=3299,3298
<3300=3304,3301
<3301=3303,3302
<3305=3306
<3306=3314,3307
<3307=3313,3308
<3308=3312,3309
<3309=3311,3310
<3315=3316
<3316=3342,3341,3317
<3317=3340,3318
<3318=3338,3319
<3319=3320
<3320=3321
<3321=3330,3329,3322
<3322=3324,3323
<3324=3326,3325
<3326=3328,3327
<3330=3331
<3331=3337,3332
<3332=3334,3333
<3334=3336,3335
<3338=3339
<3343=3344
<3344=3361,3360,3345
<3345=3359,3346
<3346=3357,3347
<3347=3348
<3348=3349
<3349=3356,3350
<3350=3354,3351
<3351=3352
<3352=3353
<3354=3355
<3357=3358
<3362=3363
<3363=3376,3375,3364
<3364=3374,3365
<3365=3373,3366
<3366=3372,3367
<3367=3371,3368
<3368=3370,3369
<3377=3378
<3378=3389,3388,3379
<3379=3387,3380
<3380=3384,3381
<3381=3383,3382
<3384=3386,3385
<3390=3391
<3391=3408,3407,3392
<3392=3406,3393
<3393=3399,3394
<3394=3398,3395
<3395=3397,3396
<3399=3403,3400
<3400=3402,3401
<3403=3405,3404
<3409=3410
<3410=3427,3426,3411
<3411=3425,3412
<3412=3418,3413
<3413=3417,3414
<3414=3416,3415
<3418=3422,3419
<3419=3421,3420
<3422=3424,3423
<3428=3429
<3429=3442,3441,3430
<3430=3440,3431
<3431=3437,3432
<3432=3436,3433
<3433=3435,3434
<3437=3439,3438
<3443=3444
<3444=3453,3452,3445
<3445=3451,3446
<3446=3450,3447
<3447=3449,3448
<3454=3455
<3455=3464,3463,3456
<3456=3462,3457
<3457=3461,3458
<3458=3460,3459
<3465=3466
<3466=3475,3474,3467
<3467=3473,3468
<3468=3472,3469
<3469=3471,3470
<3476=3477
<3477=3486,3485,3478
<3478=3484,3479
<3479=3483,3480
<3480=3482,3481
<3487=3488
<3488=3497,3496,3489
<3489=3495,3490
<3490=3494,3491
<3491=3493,3492
<3498=3499
<3499=3508,3507,3500
<3500=3506,3501
<3501=3505,3502
<3502=3504,3503
<3509=3510
<3510=3519,3518,3511
<3511=3517,3512
<3512=3516,3513
<3513=3515,3514
<3520=3522,3521
<3523=3524
<3524=3526,3525
<3527=3528
<3528=3529
<3529=3536,3535,3530
<3530=3534,3531
<3531=3533,3532
<3537=3538
<3538=3540,3539
<3541=3542
<3542=3544,3543
<3545=3546
<3546=3551,3550,3547
<3547=3549,3548
<3552=3553
<3553=3562,3561,3554
<3554=3560,3555
<3555=3559,3558,3557,3556
<3563=3564
<3564=3573,3572,3565
<3565=3571,3566
<3566=3570,3567
<3567=3569,3568
<3574=3575
<3575=3582,3581,3576
<3576=3580,3577
<3577=3579,3578
<3583=3584
<3584=3589,3588,3585
<3585=3587,3586
<3590=3591
<3591=3596,3595,3592
<3592=3594,3593
<3597=3598
<3598=3603,3602,3599
<3599=3601,3600
<3604=3605
<3605=3610,3609,3606
<3606=3608,3607
<3611=3612
<3612=3617,3616,3613
<3613=3615,3614
<3618=3619
<3619=3624,3623,3620
<3620=3622,3621
<3625=3626
<3626=3631,3630,3627
<3627=3629,3628
<3632=3633
<3633=3638,3637,3634
<3634=3636,3635
<3639=3640
<3640=3645,3644,3641
<3641=3643,3642
<3646=3647
<3647=3657,3656,3655,3648
<3648=3654,3649
<3649=3653,3652,3651,3650
<3658=3659
<3659=3682,3681,3660
<3660=3680,3661
<3661=3679,3678,3677,3674,3673,3668,3665,3662
<3662=3664,3663
<3665=3667,3666
<3668=3670,3669
<3670=3672,3671
<3674=3676,3675
<3683=3684
<3684=3696,3695,3685
<3685=3694,3686
<3686=3688,3687
<3688=3690,3689
<3690=3691
<3691=3693,3692
<3697=3698
<3698=3710,3709,3699
<3699=3708,3700
<3700=3702,3701
<3702=3704,3703
<3704=3705
<3705=3707,3706
<3711=3712
<3712=3724,3723,3713
<3713=3722,3714
<3714=3716,3715
<3716=3718,3717
<3718=3719
<3719=3721,3720
<3800=3806,3805,3801
<3801=3802
<3802=3804,3803
<3806=4090,4076,4062,4055,3811,3807
<3807=3808
<3808=3810,3809
<3811=4047,4043,4040,3812
<3812=4029,4018,4007,3996,3985,3974,3963,3948,3929,3910,3897,3880,3861,3833,3823,3813
<3813=3814
<3814=3818,3815
<3815=3817,3816
<3818=3822,3819
<3819=3821,3820
<3823=3824
<3824=3832,3825
<3825=3831,3826
<3826=3830,3827
<3827=3829,3828
<3833=3834
<3834=3860,3859,3835
<3835=3858,3836
<3836=3856,3837
<3837=3838
<3838=3839
<3839=3848,3847,3840
<3840=3842,3841
<3842=3844,3843
<3844=3846,3845
<3848=3849
<3849=3855,3850
<3850=3852,3851
<3852=3854,3853
<3856=3857
<3861=3862
<3862=3879,3878,3863
<3863=3877,3864
<3864=3875,3865
<3865=3866
<3866=3867
<3867=3874,3868
<3868=3872,3869
<3869=3870
<3870=3871
<3872=3873
<3875=3876
<3880=3881
<3881=3896,3895,3882
<3882=3894,3883
<3883=3893,3884
<3884=3888,3885
<3885=3887,3886
<3888=3892,3889
<3889=3891,3890
<3897=3898
<3898=3909,3908,3899
<3899=3907,3900
<3900=3904,3901
<3901=3903,3902
<3904=3906,3905
<3910=3911
<3911=3928,3927,3912
<3912=3926,3913
<3913=3919,3914
<3914=3918,3915
<3915=3917,3916
<3919=3923,3920
<3920=3922,3921
<3923=3925,3924
<3929=3930
<3930=3947,3946,3931
<3931=3945,3932
<3932=3938,3933
<3933=3937,3934
<3934=3936,3935
<3938=3942,3939
<3939=3941,3940
<3942=3944,3943
<3948=3949
<3949=3962,3961,3950
<3950=3960,3951
<3951=3957,3952
<3952=3956,3953
<3953=3955,3954
<3957=3959,3958
<3963=3964
<3964=3973,3972,3965
<3965=3971,3966
<3966=3970,3967
<3967=3969,3968
<3974=3975
<3975=3984,3983,3976
<3976=3982,3977
<3977=3981,3978
<3978=3980,3979
<3985=3986
<3986=3995,3994,3987
<3987=3993,3988
<3988=3992,3989
<3989=3991,3990
<3996=3997
<3997=4006,4005,3998
<3998=4004,3999
<3999=4003,4000
<4000=4002,4001
<4007=4008
<4008=4017,4016,4009
<4009=4015,4010
<4010=4014,4011
<4011=4013,4012
<4018=4019
<4019=4028,4027,4020
<4020=4026,4021
<4021=4025,4022
<4022=4024,4023
<4029=4030
<4030=4039,4038,4031
<4031=4037,4032
<4032=4036,4033
<4033=4035,4034
<4040=4042,4041
<4043=4044
<4044=4046,4045
<4047=4048
<4048=4049
<4049=4054,4053,4050
<4050=4052,4051
<4055=4056
<4056=4061,4060,4057
<4057=4059,4058
<4062=4063
<4063=4075,4074,4064
<4064=4073,4065
<4065=4067,4066
<4067=4069,4068
<4069=4070
<4070=4072,4071
<4076=4077
<4077=4089,4088,4078
<4078=4087,4079
<4079=4081,4080
<4081=4083,4082
<4083=4084
<4084=4086,4085
<4090=4091
<4091=4103,4102,4092
<4092=4101,4093
<4093=4095,4094
<4095=4097,4096
<4097=4098
<4098=4100,4099
<4164=4167,4166,4165
<4167=4168
<4168=4261,4169
<4169=4250,4230,4210,4190,4170
<4170=4171
<4171=4188,4172
<4172=4184,4173
<4173=4174
<4174=4182,4175
<4175=4180,4178,4176
<4176=4177
<4178=4179
<4180=4181
<4182=4183
<4184=4185
<4185=4187,4186
<4188=4189
<4190=4191
<4191=4208,4192
<4192=4204,4193
<4193=4194
<4194=4202,4195
<4195=4200,4198,4196
<4196=4197
<4198=4199
<4200=4201
<4202=4203
<4204=4205
<4205=4207,4206
<4208=4209
<4210=4211
<4211=4228,4212
<4212=4224,4213
<4213=4214
<4214=4222,4215
<4215=4220,4218,4216
<4216=4217
<4218=4219
<4220=4221
<4222=4223
<4224=4225
<4225=4227,4226
<4228=4229
<4230=4231
<4231=4248,4232
<4232=4244,4233
<4233=4234
<4234=4242,4235
<4235=4240,4238,4236
<4236=4237
<4238=4239
<4240=4241
<4242=4243
<4244=4245
<4245=4247,4246
<4248=4249
<4250=4251
<4251=4260,4259,4252
<4252=4258,4253
<4253=4256,4255,4254
<4256=4257
<4261=4262
<4262=4264,4263
<4276=4282,4281,4277
<4277=4278
<4278=4280,4279
<4282=4396,4283
<4283=4394,4284
<4284=4389,4367,4358,4336,4327,4305,4296,4285
<4285=4286
<4286=4294,4287
<4287=4292,4290,4288
<4288=4289
<4290=4291
<4292=4293
<4294=4295
<4296=4297
<4297=4303,4298
<4298=4301,4299
<4299=4300
<4301=4302
<4303=4304
<4305=4306
<4306=4325,4307
<4307=4323,4321,4319,4312,4310,4308
<4308=4309
<4310=4311
<4312=4313
<4313=4315,4314
<4315=4316
<4316=4318,4317
<4319=4320
<4321=4322
<4323=4324
<4325=4326
<4327=4328
<4328=4334,4329
<4329=4332,4330
<4330=4331
<4332=4333
<4334=4335
<4336=4337
<4337=4356,4338
<4338=4354,4352,4350,4343,4341,4339
<4339=4340
<4341=4342
<4343=4344
<4344=4346,4345
<4346=4347
<4347=4349,4348
<4350=4351
<4352=4353
<4354=4355
<4356=4357
<4358=4359
<4359=4365,4360
<4360=4363,4361
<4361=4362
<4363=4364
<4365=4366
<4367=4368
<4368=4387,4369
<4369=4385,4383,4381,4374,4372,4370
<4370=4371
<4372=4373
<4374=4375
<4375=4377,4376
<4377=4378
<4378=4380,4379
<4381=4382
<4383=4384
<4385=4386
<4387=4388
<4389=4390
<4390=4393,4392,4391
<4394=4395
<4396=4504,4397
<4397=4495,4486,4477,4468,4459,4452,4398
<4398=4450,4399
<4399=4438,4424,4417,4400
<4400=4413,4409,4401
<4401=4402
<4402=4403
<4403=4407,4404
<4404=4405
<4405=4406
<4407=4408
<4409=4410
<4410=4412,4411
<4413=4414
<4414=4416,4415
<4417=4418
<4418=4423,4422,4419
<4419=4421,4420
<4424=4432,4425
<4425=4426
<4426=4430,4429,4427
<4427=4428
<4430=4431
<4432=4433
<4433=4437,4434
<4434=4436,4435
<4438=4439
<4439=4449,4448,4440
<4440=4447,4441
<4441=4445,4442
<4442=4443
<4443=4444
<4445=4446
<4450=4451
<4452=4453
<4453=4458,4457,4454
<4454=4456,4455
<4459=4460
<4460=4466,4461
<4461=4464,4462
<4462=4463
<4464=4465
<4466=4467
<4468=4469
<4469=4475,4470
<4470=4473,4471
<4471=4472
<4473=4474
<4475=4476
<4477=4478
<4478=4484,4479
<4479=4482,4480
<4480=4481
<4482=4483
<4484=4485
<4486=4487
<4487=4493,4488
<4488=4491,4489
<4489=4490
<4491=4492
<4493=4494
<4495=4496
<4496=4502,4497
<4497=4500,4498
<4498=4499
<4500=4501
<4502=4503
<4504=4505
<4528=4555,4554,4529
<4529=4551,4548,4545,4542,4539,4536,4533,4530
<4530=4532,4531
<4533=4535,4534
<4536=4538,4537
<4539=4541,4540
<4542=4544,4543
<4545=4547,4546
<4548=4550,4549
<4551=4553,4552
<4555=4556
<4556=4557
<4557=4575,4558
<4558=4573,4571,4569,4567,4565,4563,4561,4559
<4559=4560
<4561=4562
<4563=4564
<4565=4566
<4567=4568
<4569=4570
<4571=4572
<4573=4574
<4575=4576
<4589=4616,4615,4590
<4590=4612,4609,4606,4603,4600,4597,4594,4591
<4591=4593,4592
<4594=4596,4595
<4597=4599,4598
<4600=4602,4601
<4603=4605,4604
<4606=4608,4607
<4609=4611,4610
<4612=4614,4613
<4616=4617
<4617=4618
<4618=4636,4619
<4619=4634,4632,4630,4628,4626,4624,4622,4620
<4620=4621
<4622=4623
<4624=4625
<4626=4627
<4628=4629
<4630=4631
<4632=4633
<4634=4635
<4636=4637
<4650=4677,4676,4651
<4651=4673,4670,4667,4664,4661,4658,4655,4652
<4652=4654,4653
<4655=4657,4656
<4658=4660,4659
<4661=4663,4662
<4664=4666,4665
<4667=4669,4668
<4670=4672,4671
<4673=4675,4674
<4677=5568,5556,5542,5528,5514,5500,5486,5472,5458,5446,5434,5425,5411,5404,5397,5379,5372,5365,5358,5327,5320,4748,4744,4736,4732,4728,4722,4699,4689,4682,4678
<4678=4679
<4679=4681,4680
<4682=4683
<4683=4687,4684
<4684=4685
<4685=4686
<4687=4688
<4689=4690
<4690=4698,4691
<4691=4693,4692
<4693=4697,4694
<4694=4696,4695
<4699=4700
<4700=4721,4701
<4701=4719,4702
<4702=4703
<4703=4704
<4704=4712,4705
<4705=4711,4706
<4706=4710,4707
<4707=4709,4708
<4712=4718,4713
<4713=4717,4714
<4714=4716,4715
<4719=4720
<4722=4723
<4723=4727,4724
<4724=4726,4725
<4728=4729
<4729=4731,4730
<4732=4733
<4733=4735,4734
<4736=4737
<4737=4743,4738
<4738=4742,4739
<4739=4741,4740
<4744=4745
<4745=4747,4746
<4748=5316,5305,4749
<4749=5292,5275,5258,5220,5202,5187,5178,5169,5144,5136,5128,5122,5116,5112,5081,5068,5055,5042,5029,5017,5005,4997,4983,4971,4967,4944,4929,4919,4750
<4750=4915,4751
<4751=4904,4889,4874,4810,4752
<4752=4808,4782,4753
<4753=4754
<4754=4755
<4755=4780,4756
<4756=4776,4765,4763,4761,4757
<4757=4758
<4758=4760,4759
<4761=4762
<4763=4764
<4765=4766
<4766=4774,4767
<4767=4772,4770,4768
<4768=4769
<4770=4771
<4772=4773
<4774=4775
<4776=4777
<4777=4779,4778
<4780=4781
<4782=4783
<4783=4806,4784
<4784=4802,4793,4791,4789,4785
<4785=4786
<4786=4788,4787
<4789=4790
<4791=4792
<4793=4794
<4794=4800,4795
<4795=4796
<4796=4797
<4797=4799,4798
<4800=4801
<4802=4803
<4803=4805,4804
<4806=4807
<4808=4809
<4810=4872,4811
<4811=4840,4812
<4812=4813
<4813=4838,4814
<4814=4834,4823,4821,4819,4815
<4815=4816
<4816=4818,4817
<4819=4820
<4821=4822
<4823=4824
<4824=4832,4825
<4825=4826
<4826=4827
<4827=4831,4828
<4828=4830,4829
<4832=4833
<4834=4835
<4835=4837,4836
<4838=4839
<4840=4841
<4841=4870,4842
<4842=4866,4855,4851,4847,4843
<4843=4844
<4844=4846,4845
<4847=4848
<4848=4850,4849
<4851=4852
<4852=4854,4853
<4855=4856
<4856=4864,4857
<4857=4858
<4858=4859
<4859=4863,4860
<4860=4862,4861
<4864=4865
<4866=4867
<4867=4869,4868
<4870=4871
<4872=4873
<4874=4875
<4875=4888,4887,4876
<4876=4886,4877
<4877=4879,4878
<4879=4883,4880
<4880=4882,4881
<4883=4885,4884
<4889=4890
<4890=4903,4902,4891
<4891=4901,4892
<4892=4894,4893
<4894=4898,4895
<4895=4897,4896
<4898=4900,4899
<4904=4905
<4905=4914,4913,4906
<4906=4912,4907
<4907=4911,4908
<4908=4910,4909
<4915=4916
<4916=4918,4917
<4919=4920
<4920=4928,4921
<4921=4924,4923,4922
<4924=4925
<4925=4927,4926
<4929=4930
<4930=4943,4942,4931
<4931=4941,4932
<4932=4936,4933
<4933=4935,4934
<4936=4938,4937
<4938=4940,4939
<4944=4965,4950,4945
<4945=4946
<4946=4947
<4947=4949,4948
<4950=4959,4955,4951
<4951=4952
<4952=4954,4953
<4955=4956
<4956=4958,4957
<4959=4960
<4960=4964,4961
<4961=4963,4962
<4965=4966
<4967=4968
<4968=4970,4969
<4971=4972
<4972=4978,4973
<4973=4975,4974
<4975=4977,4976
<4978=4982,4979
<4979=4981,4980
<4983=4984
<4984=4992,4985
<4985=4991,4986
<4986=4988,4987
<4988=4990,4989
<4992=4996,4993
<4993=4995,4994
<4997=4998
<4998=5000,4999
<5000=5004,5001
<5001=5003,5002
<5005=5006
<5006=5012,5007
<5007=5011,5008
<5008=5010,5009
<5012=5016,5013
<5013=5015,5014
<5017=5018
<5018=5024,5019
<5019=5023,5020
<5020=5022,5021
<5024=5028,5025
<5025=5027,5026
<5029=5030
<5030=5037,5031
<5031=5035,5032
<5032=5033
<5033=5034
<5035=5036
<5037=5041,5038
<5038=5040,5039
<5042=5043
<5043=5050,5044
<5044=5048,5045
<5045=5046
<5046=5047
<5048=5049
<5050=5054,5051
<5051=5053,5052
<5055=5056
<5056=5063,5057
<5057=5061,5058
<5058=5059
<5059=5060
<5061=5062
<5063=5067,5064
<5064=5066,5065
<5068=5077,5069
<5069=5070
<5070=5072,5071
<5072=5076,5073
<5073=5075,5074
<5077=5078
<5078=5080,5079
<5081=5082
<5082=5111,5110,5083
<5083=5109,5084
<5084=5086,5085
<5086=5108,5087
<5087=5107,5088
<5088=5106,5089
<5089=5105,5090
<5090=5098,5091
<5091=5095,5092
<5092=5094,5093
<5095=5097,5096
<5098=5102,5099
<5099=5101,5100
<5102=5104,5103
<5112=5113
<5113=5115,5114
<5116=5117
<5117=5121,5118
<5118=5120,5119
<5122=5123
<5123=5127,5124
<5124=5126,5125
<5128=5129
<5129=5135,5130
<5130=5134,5131
<5131=5133,5132
<5136=5137
<5137=5143,5138
<5138=5142,5139
<5139=5141,5140
<5144=5145
<5145=5168,5167,5146
<5146=5166,5147
<5147=5157,5156,5148
<5148=5155,5149
<5149=5153,5150
<5150=5151
<5151=5152
<5153=5154
<5157=5158
<5158=5160,5159
<5160=5164,5161
<5161=5162
<5162=5163
<5164=5165
<5169=5170
<5170=5177,5176,5171
<5171=5175,5172
<5172=5174,5173
<5178=5179
<5179=5186,5185,5180
<5180=5184,5181
<5181=5183,5182
<5187=5188
<5188=5201,5200,5189
<5189=5199,5190
<5190=5192,5191
<5192=5198,5193
<5193=5195,5194
<5195=5197,5196
<5202=5203
<5203=5219,5218,5204
<5204=5217,5205
<5205=5215,5206
<5206=5213,5211,5209,5207
<5207=5208
<5209=5210
<5211=5212
<5213=5214
<5215=5216
<5220=5236,5221
<5221=5223,5222
<5223=5232,5224
<5224=5225
<5225=5227,5226
<5227=5231,5228
<5228=5230,5229
<5232=5233
<5233=5235,5234
<5236=5237
<5237=5257,5238
<5238=5254,5239
<5239=5251,5240
<5240=5246,5241
<5241=5245,5242
<5242=5244,5243
<5246=5250,5247
<5247=5249,5248
<5251=5253,5252
<5254=5256,5255
<5258=5259
<5259=5274,5273,5260
<5260=5272,5261
<5261=5263,5262
<5263=5265,5264
<5265=5269,5266
<5266=5268,5267
<5269=5271,5270
<5275=5276
<5276=5291,5290,5277
<5277=5289,5278
<5278=5280,5279
<5280=5282,5281
<5282=5286,5283
<5283=5285,5284
<5286=5288,5287
<5292=5293
<5293=5304,5303,5294
<5294=5302,5295
<5295=5297,5296
<5297=5301,5298
<5298=5300,5299
<5305=5313,5306
<5306=5310,5307
<5307=5309,5308
<5310=5312,5311
<5313=5315,5314
<5316=5317
<5317=5319,5318
<5320=5321
<5321=5326,5325,5322
<5322=5324,5323
<5327=5352,5346,5340,5334,5328
<5328=5333,5332,5329
<5329=5331,5330
<5334=5339,5338,5335
<5335=5337,5336
<5340=5345,5344,5341
<5341=5343,5342
<5346=5351,5350,5347
<5347=5349,5348
<5352=5357,5356,5353
<5353=5355,5354
<5358=5359
<5359=5364,5363,5360
<5360=5362,5361
<5365=5366
<5366=5371,5370,5367
<5367=5369,5368
<5372=5373
<5373=5378,5377,5374
<5374=5376,5375
<5379=5380
<5380=5396,5395,5381
<5381=5394,5382
<5382=5390,5384,5383
<5384=5386,5385
<5386=5387
<5387=5389,5388
<5390=5391
<5391=5393,5392
<5397=5398
<5398=5403,5402,5399
<5399=5401,5400
<5404=5405
<5405=5410,5409,5406
<5406=5408,5407
<5411=5412
<5412=5424,5423,5413
<5413=5422,5414
<5414=5418,5415
<5415=5416
<5416=5417
<5418=5419
<5419=5421,5420
<5425=5426
<5426=5433,5432,5427
<5427=5431,5428
<5428=5430,5429
<5434=5435
<5435=5445,5444,5436
<5436=5443,5437
<5437=5439,5438
<5439=5440
<5440=5442,5441
<5446=5447
<5447=5457,5456,5448
<5448=5455,5449
<5449=5451,5450
<5451=5452
<5452=5454,5453
<5458=5459
<5459=5471,5470,5460
<5460=5469,5461
<5461=5467,5462
<5462=5465,5463
<5463=5464
<5465=5466
<5467=5468
<5472=5473
<5473=5485,5484,5474
<5474=5483,5475
<5475=5481,5476
<5476=5479,5477
<5477=5478
<5479=5480
<5481=5482
<5486=5487
<5487=5499,5498,5488
<5488=5497,5489
<5489=5495,5490
<5490=5493,5491
<5491=5492
<5493=5494
<5495=5496
<5500=5501
<5501=5513,5512,5502
<5502=5511,5503
<5503=5509,5504
<5504=5507,5505
<5505=5506
<5507=5508
<5509=5510
<5514=5515
<5515=5527,5526,5516
<5516=5525,5517
<5517=5521,5518
<5518=5519
<5519=5520
<5521=5522
<5522=5524,5523
<5528=5529
<5529=5541,5540,5530
<5530=5539,5531
<5531=5535,5532
<5532=5533
<5533=5534
<5535=5536
<5536=5538,5537
<5542=5543
<5543=5555,5554,5544
<5544=5553,5545
<5545=5549,5546
<5546=5547
<5547=5548
<5549=5550
<5550=5552,5551
<5556=5566,5557
<5557=5558
<5558=5562,5559
<5559=5560
<5560=5561
<5562=5563
<5563=5565,5564
<5566=5567
<5568=5569
<5569=5571,5570
<5571=5572
<5686=5692,5691,5687
<5687=5688
<5688=5690,5689
<5692=6280,5700,5693
<5693=5694
<5694=5696,5695
<5696=5697
<5697=5699,5698
<5700=6272,6266,6263,5701
<5701=6250,6231,6217,6208,6194,6183,6179,6165,6154,6150,6136,6125,6114,6100,6089,6078,6067,6063,6052,6041,6030,6019,6008,5997,5975,5971,5960,5949,5938,5927,5905,5901,5890,5879,5868,5857,5853,5702
<5702=5847,5809,5703
<5703=5704
<5704=5705
<5705=5801,5795,5792,5706
<5706=5788,5732,5707
<5707=5708
<5708=5728,5709
<5709=5726,5718,5710
<5710=5711
<5711=5717,5712
<5712=5716,5713
<5713=5715,5714
<5718=5719
<5719=5725,5720
<5720=5724,5721
<5721=5723,5722
<5726=5727
<5728=5729
<5729=5731,5730
<5732=5733
<5733=5778,5734
<5734=5770,5735
<5735=5762,5736
<5736=5754,5737
<5737=5746,5738
<5738=5744,5739
<5739=5742,5740
<5740=5741
<5742=5743
<5744=5745
<5746=5752,5747
<5747=5750,5748
<5748=5749
<5750=5751
<5752=5753
<5754=5760,5755
<5755=5758,5756
<5756=5757
<5758=5759
<5760=5761
<5762=5768,5763
<5763=5766,5764
<5764=5765
<5766=5767
<5768=5769
<5770=5776,5771
<5771=5774,5772
<5772=5773
<5774=5775
<5776=5777
<5778=5787,5779
<5779=5785,5780
<5780=5783,5781
<5781=5782
<5783=5784
<5785=5786
<5788=5789
<5789=5791,5790
<5792=5794,5793
<5795=5796
<5796=5798,5797
<5798=5800,5799
<5801=5802
<5802=5803
<5803=5808,5807,5804
<5804=5806,5805
<5809=5810
<5810=5811
<5811=5843,5812
<5812=5841,5839,5837,5835,5833,5831,5822,5813
<5813=5814
<5814=5820,5815
<5815=5816
<5816=5817
<5817=5819,5818
<5820=5821
<5822=5823
<5823=5829,5824
<5824=5825
<5825=5826
<5826=5828,5827
<5829=5830
<5831=5832
<5833=5834
<5835=5836
<5837=5838
<5839=5840
<5841=5842
<5843=5844
<5844=5846,5845
<5847=5848
<5848=5850,5849
<5850=5852,5851
<5853=5854
<5854=5856,5855
<5857=5858
<5858=5867,5859
<5859=5865,5860
<5860=5863,5861
<5861=5862
<5863=5864
<5865=5866
<5868=5869
<5869=5878,5870
<5870=5876,5871
<5871=5874,5872
<5872=5873
<5874=5875
<5876=5877
<5879=5880
<5880=5889,5881
<5881=5887,5882
<5882=5885,5883
<5883=5884
<5885=5886
<5887=5888
<5890=5891
<5891=5900,5892
<5892=5898,5893
<5893=5896,5894
<5894=5895
<5896=5897
<5898=5899
<5901=5902
<5902=5904,5903
<5905=5906
<5906=5926,5907
<5907=5924,5908
<5908=5911,5909
<5909=5910
<5911=5912
<5912=5922,5913
<5913=5920,5918,5916,5914
<5914=5915
<5916=5917
<5918=5919
<5920=5921
<5922=5923
<5924=5925
<5927=5928
<5928=5937,5929
<5929=5935,5930
<5930=5933,5931
<5931=5932
<5933=5934
<5935=5936
<5938=5939
<5939=5948,5940
<5940=5946,5941
<5941=5944,5942
<5942=5943
<5944=5945
<5946=5947
<5949=5950
<5950=5959,5951
<5951=5957,5952
<5952=5955,5953
<5953=5954
<5955=5956
<5957=5958
<5960=5961
<5961=5970,5962
<5962=5968,5963
<5963=5966,5964
<5964=5965
<5966=5967
<5968=5969
<5971=5972
<5972=5974,5973
<5975=5976
<5976=5996,5977
<5977=5994,5978
<5978=5981,5979
<5979=5980
<5981=5982
<5982=5992,5983
<5983=5990,5988,5986,5984
<5984=5985
<5986=5987
<5988=5989
<5990=5991
<5992=5993
<5994=5995
<5997=5998
<5998=6007,5999
<5999=6005,6000
<6000=6003,6001
<6001=6002
<6003=6004
<6005=6006
<6008=6009
<6009=6018,6010
<6010=6016,6011
<6011=6014,6012
<6012=6013
<6014=6015
<6016=6017
<6019=6020
<6020=6029,6021
<6021=6027,6022
<6022=6025,6023
<6023=6024
<6025=6026
<6027=6028
<6030=6031
<6031=6040,6032
<6032=6038,6033
<6033=6036,6034
<6034=6035
<6036=6037
<6038=6039
<6041=6042
<6042=6051,6043
<6043=6049,6044
<6044=6047,6045
<6045=6046
<6047=6048
<6049=6050
<6052=6053
<6053=6062,6054
<6054=6060,6055
<6055=6058,6056
<6056=6057
<6058=6059
<6060=6061
<6063=6064
<6064=6066,6065
<6067=6068
<6068=6077,6069
<6069=6075,6070
<6070=6073,6071
<6071=6072
<6073=6074
<6075=6076
<6078=6079
<6079=6088,6080
<6080=6086,6081
<6081=6084,6082
<6082=6083
<6084=6085
<6086=6087
<6089=6090
<6090=6099,6091
<6091=6097,6092
<6092=6095,6093
<6093=6094
<6095=6096
<6097=6098
<6100=6101
<6101=6113,6112,6102
<6102=6111,6103
<6103=6109,6104
<6104=6105
<6105=6106
<6106=6108,6107
<6109=6110
<6114=6115
<6115=6124,6116
<6116=6122,6117
<6117=6120,6118
<6118=6119
<6120=6121
<6122=6123
<6125=6126
<6126=6135,6127
<6127=6133,6128
<6128=6131,6129
<6129=6130
<6131=6132
<6133=6134
<6136=6137
<6137=6149,6148,6138
<6138=6147,6139
<6139=6145,6140
<6140=6141
<6141=6142
<6142=6144,6143
<6145=6146
<6150=6151
<6151=6153,6152
<6154=6155
<6155=6164,6156
<6156=6162,6157
<6157=6160,6158
<6158=6159
<6160=6161
<6162=6163
<6165=6166
<6166=6178,6177,6167
<6167=6176,6168
<6168=6174,6169
<6169=6170
<6170=6171
<6171=6173,6172
<6174=6175
<6179=6180
<6180=6182,6181
<6183=6184
<6184=6193,6185
<6185=6191,6186
<6186=6189,6187
<6187=6188
<6189=6190
<6191=6192
<6194=6195
<6195=6207,6206,6196
<6196=6205,6197
<6197=6203,6198
<6198=6199
<6199=6200
<6200=6202,6201
<6203=6204
<6208=6209
<6209=6216,6210
<6210=6214,6211
<6211=6212
<6212=6213
<6214=6215
<6217=6218
<6218=6230,6229,6219
<6219=6228,6220
<6220=6226,6221
<6221=6222
<6222=6223
<6223=6225,6224
<6226=6227
<6231=6247,6244,6241,6238,6235,6232
<6232=6234,6233
<6235=6237,6236
<6238=6240,6239
<6241=6243,6242
<6244=6246,6245
<6247=6249,6248
<6250=6260,6257,6254,6251
<6251=6253,6252
<6254=6256,6255
<6257=6259,6258
<6260=6262,6261
<6263=6265,6264
<6266=6267
<6267=6271,6268
<6268=6270,6269
<6272=6273
<6273=6274
<6274=6279,6278,6275
<6275=6277,6276
<6280=6281
<6281=6287,6282
<6282=6283
<6283=6284
<6284=6286,6285
<6287=6288
<6288=6290,6289
<6335=6341,6340,6336
<6336=6337
<6337=6339,6338
<6341=6846,6839,6832,6825,6818,6811,6798,6794,6790,6786,6782,6349,6342
<6342=6343
<6343=6345,6344
<6345=6346
<6346=6348,6347
<6349=6774,6770,6767,6350
<6350=6759,6751,6743,6735,6734,6733,6732,6731,6730,6729,6728,6727,6726,6725,6724,6723,6722,6721,6720,6719,6718,6717,6716,6715,6714,6713,6712,6711,6710,6709,6708,6707,6706,6705,6704,6703,6702,6701,6700,6699,6698,6697,6696,6695,6694,6693,6692,6691,6690,6689,6688,6687,6686,6685,6684,6683,6682,6681,6680,6679,6678,6677,6676,6675,6674,6673,6672,6671,6670,6669,6668,6667,6666,6665,6664,6663,6662,6661,6660,6659,6658,6657,6656,6655,6654,6653,6652,6651,6650,6649,6648,6647,6646,6645,6644,6643,6642,6641,6640,6639,6638,6637,6636,6351,6587,6588,6589,6590,6591,6592,6593,6594,6595,6596,6597,6598,6599,6600,6601,6602,6603,6604,6605,6606,6607,6608,6609,6610,6611,6612,6613,6614,6615,6616,6617,6618,6619,6620,6621,6622,6623,6624,6625,6626,6627,6628,6629,6630,6631,6632,6633,6634,6635
<6351=6579,6478,6352
<6352=6353
<6353=6453,6445,6420,6412,6387,6379,6354
<6354=6355
<6355=6375,6356
<6356=6373,6365,6357
<6357=6358
<6358=6364,6359
<6359=6363,6360
<6360=6362,6361
<6365=6366
<6366=6372,6367
<6367=6371,6368
<6368=6370,6369
<6373=6374
<6375=6376
<6376=6378,6377
<6379=6381,6380
<6381=6382
<6382=6384,6383
<6384=6386,6385
<6387=6388
<6388=6408,6389
<6389=6406,6398,6390
<6390=6391
<6391=6397,6392
<6392=6396,6393
<6393=6395,6394
<6398=6399
<6399=6405,6400
<6400=6404,6401
<6401=6403,6402
<6406=6407
<6408=6409
<6409=6411,6410
<6412=6414,6413
<6414=6415
<6415=6417,6416
<6417=6419,6418
<6420=6421
<6421=6441,6422
<6422=6439,6431,6423
<6423=6424
<6424=6430,6425
<6425=6429,6426
<6426=6428,6427
<6431=6432
<6432=6438,6433
<6433=6437,6434
<6434=6436,6435
<6439=6440
<6441=6442
<6442=6444,6443
<6445=6447,6446
<6447=6448
<6448=6450,6449
<6450=6452,6451
<6453=6454
<6454=6474,6455
<6455=6472,6464,6456
<6456=6457
<6457=6463,6458
<6458=6462,6459
<6459=6461,6460
<6464=6465
<6465=6471,6466
<6466=6470,6467
<6467=6469,6468
<6472=6473
<6474=6475
<6475=6477,6476
<6478=6554,6529,6504,6479
<6479=6480
<6480=6500,6481
<6481=6498,6490,6482
<6482=6483
<6483=6489,6484
<6484=6488,6485
<6485=6487,6486
<6490=6491
<6491=6497,6492
<6492=6496,6493
<6493=6495,6494
<6498=6499
<6500=6501
<6501=6503,6502
<6504=6505
<6505=6525,6506
<6506=6523,6515,6507
<6507=6508
<6508=6514,6509
<6509=6513,6510
<6510=6512,6511
<6515=6516
<6516=6522,6517
<6517=6521,6518
<6518=6520,6519
<6523=6524
<6525=6526
<6526=6528,6527
<6529=6530
<6530=6550,6531
<6531=6548,6540,6532
<6532=6533
<6533=6539,6534
<6534=6538,6535
<6535=6537,6536
<6540=6541
<6541=6547,6542
<6542=6546,6543
<6543=6545,6544
<6548=6549
<6550=6551
<6551=6553,6552
<6554=6555
<6555=6575,6556
<6556=6573,6565,6557
<6557=6558
<6558=6564,6559
<6559=6563,6560
<6560=6562,6561
<6565=6566
<6566=6572,6567
<6567=6571,6568
<6568=6570,6569
<6573=6574
<6575=6576
<6576=6578,6577
<6579=6580
<6580=6586,6581
<6581=6583,6582
<6583=6585,6584
<6735=6736
<6736=6742,6737
<6737=6741,6738
<6738=6740,6739
<6743=6744
<6744=6750,6745
<6745=6749,6746
<6746=6748,6747
<6751=6752
<6752=6758,6753
<6753=6757,6754
<6754=6756,6755
<6759=6760
<6760=6766,6761
<6761=6765,6762
<6762=6764,6763
<6767=6769,6768
<6770=6771
<6771=6773,6772
<6774=6775
<6775=6776
<6776=6781,6780,6777
<6777=6779,6778
<6782=6783
<6783=6785,6784
<6786=6787
<6787=6789,6788
<6790=6791
<6791=6793,6792
<6794=6795
<6795=6797,6796
<6798=6808,6805,6802,6799
<6799=6801,6800
<6802=6804,6803
<6805=6807,6806
<6808=6810,6809
<6811=6812
<6812=6817,6816,6813
<6813=6815,6814
<6818=6819
<6819=6824,6823,6820
<6820=6822,6821
<6825=6826
<6826=6831,6830,6827
<6827=6829,6828
<6832=6833
<6833=6838,6837,6834
<6834=6836,6835
<6839=6840
<6840=6845,6844,6841
<6841=6843,6842
<6846=6847
<6847=6853,6848
<6848=6849
<6849=6850
<6850=6852,6851
<6853=6854
<6854=6856,6855
<6900=6906,6905,6901
<6901=6902
<6902=6904,6903
<6906=7144,6914,6907
<6907=6908
<6908=6910,6909
<6910=6911
<6911=6913,6912
<6914=7136,7132,7129,6915
<6915=7118,7107,7096,7085,7074,7063,7054,7043,7039,7029,7019,6999,6973,6951,6933,6916
<6916=6917
<6917=6929,6918
<6918=6927,6925,6919
<6919=6920
<6920=6924,6921
<6921=6923,6922
<6925=6926
<6927=6928
<6929=6930
<6930=6932,6931
<6933=6934
<6934=6948,6935
<6935=6941,6936
<6936=6938,6937
<6938=6940,6939
<6941=6943,6942
<6943=6945,6944
<6945=6947,6946
<6948=6950,6949
<6951=6952
<6952=6970,6953
<6953=6961,6954
<6954=6956,6955
<6956=6960,6957
<6957=6959,6958
<6961=6963,6962
<6963=6969,6964
<6964=6968,6965
<6965=6967,6966
<6970=6972,6971
<6973=6974
<6974=6996,6975
<6975=6987,6976
<6976=6978,6977
<6978=6986,6979
<6979=6985,6980
<6980=6984,6981
<6981=6983,6982
<6987=6989,6988
<6989=6993,6990
<6990=6992,6991
<6993=6995,6994
<6996=6998,6997
<6999=7000
<7000=7016,7001
<7001=7009,7002
<7002=7004,7003
<7004=7006,7005
<7006=7008,7007
<7009=7011,7010
<7011=7013,7012
<7013=7015,7014
<7016=7018,7017
<7019=7020
<7020=7026,7021
<7021=7025,7022
<7022=7024,7023
<7026=7028,7027
<7029=7030
<7030=7036,7031
<7031=7033,7032
<7033=7035,7034
<7036=7038,7037
<7039=7040
<7040=7042,7041
<7043=7044
<7044=7053,7052,7045
<7045=7051,7046
<7046=7050,7047
<7047=7049,7048
<7054=7055
<7055=7062,7061,7056
<7056=7060,7057
<7057=7059,7058
<7063=7064
<7064=7073,7072,7065
<7065=7071,7066
<7066=7070,7067
<7067=7069,7068
<7074=7075
<7075=7084,7083,7076
<7076=7082,7077
<7077=7081,7078
<7078=7080,7079
<7085=7086
<7086=7095,7094,7087
<7087=7093,7088
<7088=7092,7089
<7089=7091,7090
<7096=7097
<7097=7106,7105,7098
<7098=7104,7099
<7099=7103,7100
<7100=7102,7101
<7107=7108
<7108=7117,7116,7109
<7109=7115,7110
<7110=7114,7111
<7111=7113,7112
<7118=7119
<7119=7128,7127,7120
<7120=7126,7121
<7121=7125,7122
<7122=7124,7123
<7129=7131,7130
<7132=7133
<7133=7135,7134
<7136=7137
<7137=7138
<7138=7143,7142,7139
<7139=7141,7140
<7144=7145
<7145=7151,7146
<7146=7147
<7147=7148
<7148=7150,7149
<7151=7152
<7152=7154,7153
