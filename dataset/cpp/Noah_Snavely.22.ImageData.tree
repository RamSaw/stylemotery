>5	FunctionDef	CompareImageDates (ImageDate * date1 , ImageDate * date2)
>6	ParameterList	ImageDate * date1 , ImageDate * date2
>7	Parameter	 
>8	Identifier	date2
>9	ParameterType	ImageDate *
>10	Parameter	 
>11	Identifier	date1
>12	ParameterType	ImageDate *
>13	ReturnType	int
>14	CompoundStatement	 
>15	ReturnStatement	 
>16	PrimaryExpression	0
>17	IfStatement	if ( date1 -> m_day < date2 -> m_day )
>18	ElseStatement	else
>19	IfStatement	if ( date2 -> m_day < date1 -> m_day )
>20	ReturnStatement	 
>21	PrimaryExpression	1
>22	Condition	 
>23	RelationalExpression	date2 -> m_day < date1 -> m_day
>24	PtrMemberAccess	date1 -> m_day
>25	Identifier	m_day
>26	Identifier	date1
>27	PtrMemberAccess	date2 -> m_day
>28	Identifier	m_day
>29	Identifier	date2
>30	ReturnStatement	 
>31	UnaryOp	- 1
>32	PrimaryExpression	1
>33	UnaryOperator	-
>34	Condition	 
>35	RelationalExpression	date1 -> m_day < date2 -> m_day
>36	PtrMemberAccess	date2 -> m_day
>37	Identifier	m_day
>38	Identifier	date2
>39	PtrMemberAccess	date1 -> m_day
>40	Identifier	m_day
>41	Identifier	date1
>42	IfStatement	if ( date1 -> m_month < date2 -> m_month )
>43	ElseStatement	else
>44	IfStatement	if ( date2 -> m_month < date1 -> m_month )
>45	ReturnStatement	 
>46	PrimaryExpression	1
>47	Condition	 
>48	RelationalExpression	date2 -> m_month < date1 -> m_month
>49	PtrMemberAccess	date1 -> m_month
>50	Identifier	m_month
>51	Identifier	date1
>52	PtrMemberAccess	date2 -> m_month
>53	Identifier	m_month
>54	Identifier	date2
>55	ReturnStatement	 
>56	UnaryOp	- 1
>57	PrimaryExpression	1
>58	UnaryOperator	-
>59	Condition	 
>60	RelationalExpression	date1 -> m_month < date2 -> m_month
>61	PtrMemberAccess	date2 -> m_month
>62	Identifier	m_month
>63	Identifier	date2
>64	PtrMemberAccess	date1 -> m_month
>65	Identifier	m_month
>66	Identifier	date1
>67	IfStatement	if ( date1 -> m_year < date2 -> m_year )
>68	ElseStatement	else
>69	IfStatement	if ( date2 -> m_year < date1 -> m_year )
>70	ReturnStatement	 
>71	UnaryOp	- 1
>72	PrimaryExpression	1
>73	UnaryOperator	-
>74	Condition	 
>75	RelationalExpression	date2 -> m_year < date1 -> m_year
>76	PtrMemberAccess	date1 -> m_year
>77	Identifier	m_year
>78	Identifier	date1
>79	PtrMemberAccess	date2 -> m_year
>80	Identifier	m_year
>81	Identifier	date2
>82	ReturnStatement	 
>83	UnaryOp	- 1
>84	PrimaryExpression	1
>85	UnaryOperator	-
>86	Condition	 
>87	RelationalExpression	date1 -> m_year < date2 -> m_year
>88	PtrMemberAccess	date2 -> m_year
>89	Identifier	m_year
>90	Identifier	date2
>91	PtrMemberAccess	date1 -> m_year
>92	Identifier	m_year
>93	Identifier	date1
>94	IfStatement	if ( ! date1 -> m_known || ! date2 -> m_known )
>95	ReturnStatement	 
>96	PrimaryExpression	0
>97	Condition	 
>98	OrExpression	! date1 -> m_known || ! date2 -> m_known
>99	UnaryOp	! date2 -> m_known
>100	PtrMemberAccess	date2 -> m_known
>101	Identifier	m_known
>102	Identifier	date2
>103	UnaryOperator	!
>104	UnaryOp	! date1 -> m_known
>105	PtrMemberAccess	date1 -> m_known
>106	Identifier	m_known
>107	Identifier	date1
>108	UnaryOperator	!
>126	FunctionDef	ImageDate 
>127	ParameterList	char * buf
>128	Parameter	 
>129	Identifier	buf
>130	ParameterType	char *
>131	ReturnType	void
>132	CompoundStatement	 
>133	IfStatement	if ( ! m_known || m_month < 1 || m_month > 12 )
>134	ElseStatement	else
>135	ExpressionStatement	 
>136	CallExpression	strcpy ( buf , month_strings [ m_month - 1 ] )
>137	ArgumentList	buf
>138	Argument	month_strings [ m_month - 1 ]
>139	ArrayIndexing	month_strings [ m_month - 1 ]
>140	AdditiveExpression	m_month - 1
>141	PrimaryExpression	1
>142	Identifier	m_month
>143	Identifier	month_strings
>144	Argument	buf
>145	Identifier	buf
>146	Callee	strcpy
>147	Identifier	strcpy
>148	ExpressionStatement	 
>149	CallExpression	strcpy ( buf , \"Unknown\" )
>150	ArgumentList	buf
>151	Argument	\"Unknown\"
>152	PrimaryExpression	\"Unknown\"
>153	Argument	buf
>154	Identifier	buf
>155	Callee	strcpy
>156	Identifier	strcpy
>157	Condition	 
>158	OrExpression	! m_known || m_month < 1 || m_month > 12
>159	OrExpression	m_month < 1 || m_month > 12
>160	RelationalExpression	m_month > 12
>161	PrimaryExpression	12
>162	Identifier	m_month
>163	RelationalExpression	m_month < 1
>164	PrimaryExpression	1
>165	Identifier	m_month
>166	UnaryOp	! m_known
>167	Identifier	m_known
>168	UnaryOperator	!
>178	FunctionDef	ImageDate 
>179	ParameterList	char * buf
>180	Parameter	 
>181	Identifier	buf
>182	ParameterType	char *
>183	ReturnType	void
>184	CompoundStatement	 
>185	IfStatement	if ( m_month == 0 )
>186	ElseStatement	else
>187	CompoundStatement	 
>188	ExpressionStatement	 
>189	CallExpression	sprintf ( buf , \"%s %d, %d, %02d
>190	ArgumentList	buf
>191	Argument	m_minute
>192	Identifier	m_minute
>193	Argument	m_hour
>194	Identifier	m_hour
>195	Argument	m_year
>196	Identifier	m_year
>197	Argument	m_day
>198	Identifier	m_day
>199	Argument	month_str
>200	Identifier	month_str
>201	Argument	\"%s %d, %d, %02d
>202	PrimaryExpression	\"%s %d, %d, %02d
>203	Argument	buf
>204	Identifier	buf
>205	Callee	sprintf
>206	Identifier	sprintf
>207	ExpressionStatement	 
>208	CallExpression	GetMonthString ( month_str )
>209	ArgumentList	month_str
>210	Argument	month_str
>211	Identifier	month_str
>212	Callee	GetMonthString
>213	Identifier	GetMonthString
>214	IdentifierDeclStatement	 
>215	IdentifierDecl	month_str [ 256 ]
>216	PrimaryExpression	256
>217	Identifier	month_str
>218	IdentifierDeclType	char [ 256 ]
>219	CompoundStatement	 
>220	ExpressionStatement	 
>221	CallExpression	sprintf ( buf , \"%d\" , m_year )
>222	ArgumentList	buf
>223	Argument	m_year
>224	Identifier	m_year
>225	Argument	\"%d\"
>226	PrimaryExpression	\"%d\"
>227	Argument	buf
>228	Identifier	buf
>229	Callee	sprintf
>230	Identifier	sprintf
>231	Condition	 
>232	EqualityExpression	m_month == 0
>233	PrimaryExpression	0
>234	Identifier	m_month
>235	IfStatement	if ( ! m_known )
>236	CompoundStatement	 
>237	ReturnStatement	 
>238	ExpressionStatement	 
>239	CallExpression	strcpy ( buf , \"Unknown\" )
>240	ArgumentList	buf
>241	Argument	\"Unknown\"
>242	PrimaryExpression	\"Unknown\"
>243	Argument	buf
>244	Identifier	buf
>245	Callee	strcpy
>246	Identifier	strcpy
>247	Condition	 
>248	UnaryOp	! m_known
>249	Identifier	m_known
>250	UnaryOperator	!
>262	FunctionDef	ImageDate 
>263	ParameterList	 
>264	ReturnType	double
>265	CompoundStatement	 
>266	ReturnStatement	 
>267	AdditiveExpression	( double ) m_second + 60.0 * ( m_minute + 60.0 * ( m_hour + 24.0 * ( m_day + 31.0 * ( m_month + 12.0 * ( \
>268	MultiplicativeExpression	60.0 * ( m_minute + 60.0 * ( m_hour + 24.0 * ( m_day + 31.0 * ( m_month + 12.0 * ( m_year - 1800 ) ) ) ) )
>269	AdditiveExpression	m_minute + 60.0 * ( m_hour + 24.0 * ( m_day + 31.0 * ( m_month + 12.0 * ( m_year - 1800 ) ) ) )
>270	MultiplicativeExpression	60.0 * ( m_hour + 24.0 * ( m_day + 31.0 * ( m_month + 12.0 * ( m_year - 1800 ) ) ) )
>271	AdditiveExpression	m_hour + 24.0 * ( m_day + 31.0 * ( m_month + 12.0 * ( m_year - 1800 ) ) )
>272	MultiplicativeExpression	24.0 * ( m_day + 31.0 * ( m_month + 12.0 * ( m_year - 1800 ) ) )
>273	AdditiveExpression	m_day + 31.0 * ( m_month + 12.0 * ( m_year - 1800 ) )
>274	MultiplicativeExpression	31.0 * ( m_month + 12.0 * ( m_year - 1800 ) )
>275	AdditiveExpression	m_month + 12.0 * ( m_year - 1800 )
>276	MultiplicativeExpression	12.0 * ( m_year - 1800 )
>277	AdditiveExpression	m_year - 1800
>278	PrimaryExpression	1800
>279	Identifier	m_year
>280	PrimaryExpression	12.0
>281	Identifier	m_month
>282	PrimaryExpression	31.0
>283	Identifier	m_day
>284	PrimaryExpression	24.0
>285	Identifier	m_hour
>286	PrimaryExpression	60.0
>287	Identifier	m_minute
>288	PrimaryExpression	60.0
>289	CastExpression	( double ) m_second
>290	Identifier	m_second
>291	CastTarget	double
>292	IfStatement	if ( ! m_known )
>293	ReturnStatement	 
>294	Identifier	DBL_MAX
>295	Condition	 
>296	UnaryOp	! m_known
>297	Identifier	m_known
>298	UnaryOperator	!
>310	FunctionDef	ImageDate 
>311	ParameterList	 
>312	ReturnType	double
>313	CompoundStatement	 
>314	ReturnStatement	 
>315	AdditiveExpression	m_day + 31.0 * ( m_month + 12.0 * ( m_year - 1800 ) )
>316	MultiplicativeExpression	31.0 * ( m_month + 12.0 * ( m_year - 1800 ) )
>317	AdditiveExpression	m_month + 12.0 * ( m_year - 1800 )
>318	MultiplicativeExpression	12.0 * ( m_year - 1800 )
>319	AdditiveExpression	m_year - 1800
>320	PrimaryExpression	1800
>321	Identifier	m_year
>322	PrimaryExpression	12.0
>323	Identifier	m_month
>324	PrimaryExpression	31.0
>325	Identifier	m_day
>326	IfStatement	if ( ! m_known )
>327	ReturnStatement	 
>328	Identifier	DBL_MAX
>329	Condition	 
>330	UnaryOp	! m_known
>331	Identifier	m_known
>332	UnaryOperator	!
>341	FunctionDef	ImageDate 
>342	ParameterList	 
>343	ReturnType	double
>344	CompoundStatement	 
>345	ReturnStatement	 
>346	AdditiveExpression	( double ) m_second + 60.0 * ( m_minute + 60.0 * ( m_hour ) )
>347	MultiplicativeExpression	60.0 * ( m_minute + 60.0 * ( m_hour ) )
>348	AdditiveExpression	m_minute + 60.0 * ( m_hour )
>349	MultiplicativeExpression	60.0 * ( m_hour )
>350	Identifier	m_hour
>351	PrimaryExpression	60.0
>352	Identifier	m_minute
>353	PrimaryExpression	60.0
>354	CastExpression	( double ) m_second
>355	Identifier	m_second
>356	CastTarget	double
>357	IfStatement	if ( ! m_known )
>358	ReturnStatement	 
>359	Identifier	DBL_MAX
>360	Condition	 
>361	UnaryOp	! m_known
>362	Identifier	m_known
>363	UnaryOperator	!
>372	FunctionDef	ImageNote 
>373	ParameterList	FILE * f , double width , double height
>374	Parameter	 
>375	Identifier	height
>376	ParameterType	double
>377	Parameter	 
>378	Identifier	width
>379	ParameterType	double
>380	Parameter	 
>381	Identifier	f
>382	ParameterType	FILE *
>383	ReturnType	void
>384	CompoundStatement	 
>385	ExpressionStatement	 
>386	AssignmentExpr	m_bbox = BoundingBox ( x , y - h , x + w , y )
>387	CallExpression	BoundingBox ( x , y - h , x + w , y )
>388	ArgumentList	x
>389	Argument	y
>390	Identifier	y
>391	Argument	x + w
>392	AdditiveExpression	x + w
>393	Identifier	w
>394	Identifier	x
>395	Argument	y - h
>396	AdditiveExpression	y - h
>397	Identifier	h
>398	Identifier	y
>399	Argument	x
>400	Identifier	x
>401	Callee	BoundingBox
>402	Identifier	BoundingBox
>403	Identifier	m_bbox
>404	ExpressionStatement	 
>405	AssignmentExpr	y = height - y - 1 - 0.5 * height
>406	AdditiveExpression	height - y - 1 - 0.5 * height
>407	AdditiveExpression	y - 1 - 0.5 * height
>408	AdditiveExpression	1 - 0.5 * height
>409	MultiplicativeExpression	0.5 * height
>410	Identifier	height
>411	PrimaryExpression	0.5
>412	PrimaryExpression	1
>413	Identifier	y
>414	Identifier	height
>415	Identifier	y
>416	ExpressionStatement	 
>417	AssignmentExpr	x -= 0.5 * width
>418	MultiplicativeExpression	0.5 * width
>419	Identifier	width
>420	PrimaryExpression	0.5
>421	Identifier	x
>422	ExpressionStatement	 
>423	CallExpression	fscanf ( f , \"%lf %lf %lf %lf\n\" , & x , & y , & w , & h )
>424	ArgumentList	f
>425	Argument	& h
>426	UnaryOp	& h
>427	Identifier	h
>428	UnaryOperator	&
>429	Argument	& w
>430	UnaryOp	& w
>431	Identifier	w
>432	UnaryOperator	&
>433	Argument	& y
>434	UnaryOp	& y
>435	Identifier	y
>436	UnaryOperator	&
>437	Argument	& x
>438	UnaryOp	& x
>439	Identifier	x
>440	UnaryOperator	&
>441	Argument	\"%lf %lf %lf %lf\n\"
>442	PrimaryExpression	\"%lf %lf %lf %lf\n\"
>443	Argument	f
>444	Identifier	f
>445	Callee	fscanf
>446	Identifier	fscanf
>447	IdentifierDeclStatement	 
>448	IdentifierDecl	h
>449	Identifier	h
>450	IdentifierDeclType	double
>451	IdentifierDecl	w
>452	Identifier	w
>453	IdentifierDeclType	double
>454	IdentifierDecl	y
>455	Identifier	y
>456	IdentifierDeclType	double
>457	IdentifierDecl	x
>458	Identifier	x
>459	IdentifierDeclType	double
>460	ExpressionStatement	 
>461	AssignmentExpr	m_text = strdup ( buf )
>462	CallExpression	strdup ( buf )
>463	ArgumentList	buf
>464	Argument	buf
>465	Identifier	buf
>466	Callee	strdup
>467	Identifier	strdup
>468	Identifier	m_text
>469	ForStatement	for ( int i = 0 ; i < ( int ) strlen ( buf ) ; i ++ )
>470	CompoundStatement	 
>471	IfStatement	if ( buf [ i ] == '*' )
>472	ExpressionStatement	 
>473	AssignmentExpr	buf [ i ] = '\n'
>474	PrimaryExpression	'\n'
>475	ArrayIndexing	buf [ i ]
>476	Identifier	i
>477	Identifier	buf
>478	Condition	 
>479	EqualityExpression	buf [ i ] == '*'
>480	PrimaryExpression	'*'
>481	ArrayIndexing	buf [ i ]
>482	Identifier	i
>483	Identifier	buf
>484	IncDecOp	 
>485	IncDec	++
>486	Identifier	i
>487	Condition	 
>488	RelationalExpression	i < ( int ) strlen ( buf )
>489	CastExpression	( int ) strlen ( buf )
>490	CallExpression	strlen ( buf )
>491	ArgumentList	buf
>492	Argument	buf
>493	Identifier	buf
>494	Callee	strlen
>495	Identifier	strlen
>496	CastTarget	int
>497	Identifier	i
>498	ForInit	 
>499	IdentifierDeclStatement	int i = 0 ;
>500	IdentifierDecl	i = 0
>501	AssignmentExpr	i = 0
>502	PrimaryExpression	0
>503	Identifier	i
>504	Identifier	i
>505	IdentifierDeclType	int
>506	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\r' )
>507	ExpressionStatement	 
>508	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>509	PrimaryExpression	0
>510	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>511	AdditiveExpression	strlen ( buf ) - 1
>512	PrimaryExpression	1
>513	CallExpression	strlen ( buf )
>514	ArgumentList	buf
>515	Argument	buf
>516	Identifier	buf
>517	Callee	strlen
>518	Identifier	strlen
>519	Identifier	buf
>520	Condition	 
>521	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\r'
>522	PrimaryExpression	'\r'
>523	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>524	AdditiveExpression	strlen ( buf ) - 1
>525	PrimaryExpression	1
>526	CallExpression	strlen ( buf )
>527	ArgumentList	buf
>528	Argument	buf
>529	Identifier	buf
>530	Callee	strlen
>531	Identifier	strlen
>532	Identifier	buf
>533	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>534	ExpressionStatement	 
>535	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>536	PrimaryExpression	0
>537	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>538	AdditiveExpression	strlen ( buf ) - 1
>539	PrimaryExpression	1
>540	CallExpression	strlen ( buf )
>541	ArgumentList	buf
>542	Argument	buf
>543	Identifier	buf
>544	Callee	strlen
>545	Identifier	strlen
>546	Identifier	buf
>547	Condition	 
>548	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>549	PrimaryExpression	'\n'
>550	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>551	AdditiveExpression	strlen ( buf ) - 1
>552	PrimaryExpression	1
>553	CallExpression	strlen ( buf )
>554	ArgumentList	buf
>555	Argument	buf
>556	Identifier	buf
>557	Callee	strlen
>558	Identifier	strlen
>559	Identifier	buf
>560	ExpressionStatement	 
>561	CallExpression	fgets ( buf , 255 , f )
>562	ArgumentList	buf
>563	Argument	f
>564	Identifier	f
>565	Argument	255
>566	PrimaryExpression	255
>567	Argument	buf
>568	Identifier	buf
>569	Callee	fgets
>570	Identifier	fgets
>571	IdentifierDeclStatement	 
>572	IdentifierDecl	buf [ 256 ]
>573	PrimaryExpression	256
>574	Identifier	buf
>575	IdentifierDeclType	char [ 256 ]
>600	FunctionDef	ImageData 
>601	ParameterList	char * buf , const char * path , bool fisheye_by_default
>602	Parameter	 
>603	Identifier	fisheye_by_default
>604	ParameterType	bool
>605	Parameter	 
>606	Identifier	path
>607	ParameterType	const char *
>608	Parameter	 
>609	Identifier	buf
>610	ParameterType	char *
>611	ReturnType	void
>612	CompoundStatement	 
>613	ExpressionStatement	 
>614	AssignmentExpr	m_key_name = strdup ( key_buf )
>615	CallExpression	strdup ( key_buf )
>616	ArgumentList	key_buf
>617	Argument	key_buf
>618	Identifier	key_buf
>619	Callee	strdup
>620	Identifier	strdup
>621	Identifier	m_key_name
>622	ExpressionStatement	 
>623	AssignmentExpr	key_buf [ strlen ( m_name ) - 1 ] = 'y'
>624	PrimaryExpression	'y'
>625	ArrayIndexing	key_buf [ strlen ( m_name ) - 1 ]
>626	AdditiveExpression	strlen ( m_name ) - 1
>627	PrimaryExpression	1
>628	CallExpression	strlen ( m_name )
>629	ArgumentList	m_name
>630	Argument	m_name
>631	Identifier	m_name
>632	Callee	strlen
>633	Identifier	strlen
>634	Identifier	key_buf
>635	ExpressionStatement	 
>636	AssignmentExpr	key_buf [ strlen ( m_name ) - 2 ] = 'e'
>637	PrimaryExpression	'e'
>638	ArrayIndexing	key_buf [ strlen ( m_name ) - 2 ]
>639	AdditiveExpression	strlen ( m_name ) - 2
>640	PrimaryExpression	2
>641	CallExpression	strlen ( m_name )
>642	ArgumentList	m_name
>643	Argument	m_name
>644	Identifier	m_name
>645	Callee	strlen
>646	Identifier	strlen
>647	Identifier	key_buf
>648	ExpressionStatement	 
>649	AssignmentExpr	key_buf [ strlen ( m_name ) - 3 ] = 'k'
>650	PrimaryExpression	'k'
>651	ArrayIndexing	key_buf [ strlen ( m_name ) - 3 ]
>652	AdditiveExpression	strlen ( m_name ) - 3
>653	PrimaryExpression	3
>654	CallExpression	strlen ( m_name )
>655	ArgumentList	m_name
>656	Argument	m_name
>657	Identifier	m_name
>658	Callee	strlen
>659	Identifier	strlen
>660	Identifier	key_buf
>661	ExpressionStatement	 
>662	CallExpression	strcpy ( key_buf , m_name )
>663	ArgumentList	key_buf
>664	Argument	m_name
>665	Identifier	m_name
>666	Argument	key_buf
>667	Identifier	key_buf
>668	Callee	strcpy
>669	Identifier	strcpy
>670	IdentifierDeclStatement	 
>671	IdentifierDecl	key_buf [ 256 ]
>672	PrimaryExpression	256
>673	Identifier	key_buf
>674	IdentifierDeclType	char [ 256 ]
>675	IfStatement	if ( * name_end == 0 )
>676	ElseStatement	else
>677	CompoundStatement	 
>678	ExpressionStatement	 
>679	CallExpression	strcpy ( m_flickr_index , name_end + 1 )
>680	ArgumentList	m_flickr_index
>681	Argument	name_end + 1
>682	AdditiveExpression	name_end + 1
>683	PrimaryExpression	1
>684	Identifier	name_end
>685	Argument	m_flickr_index
>686	Identifier	m_flickr_index
>687	Callee	strcpy
>688	Identifier	strcpy
>689	ExpressionStatement	 
>690	AssignmentExpr	m_user_name [ name_end - base_name ] = 0
>691	PrimaryExpression	0
>692	ArrayIndexing	m_user_name [ name_end - base_name ]
>693	AdditiveExpression	name_end - base_name
>694	Identifier	base_name
>695	Identifier	name_end
>696	Identifier	m_user_name
>697	ExpressionStatement	 
>698	CallExpression	strncpy ( m_user_name , base_name , name_end - base_name )
>699	ArgumentList	m_user_name
>700	Argument	name_end - base_name
>701	AdditiveExpression	name_end - base_name
>702	Identifier	base_name
>703	Identifier	name_end
>704	Argument	base_name
>705	Identifier	base_name
>706	Argument	m_user_name
>707	Identifier	m_user_name
>708	Callee	strncpy
>709	Identifier	strncpy
>710	CompoundStatement	 
>711	ExpressionStatement	 
>712	CallExpression	strcpy ( m_flickr_index , \"Unknown\" )
>713	ArgumentList	m_flickr_index
>714	Argument	\"Unknown\"
>715	PrimaryExpression	\"Unknown\"
>716	Argument	m_flickr_index
>717	Identifier	m_flickr_index
>718	Callee	strcpy
>719	Identifier	strcpy
>720	ExpressionStatement	 
>721	CallExpression	strcpy ( m_user_name , \"Unknown\" )
>722	ArgumentList	m_user_name
>723	Argument	\"Unknown\"
>724	PrimaryExpression	\"Unknown\"
>725	Argument	m_user_name
>726	Identifier	m_user_name
>727	Callee	strcpy
>728	Identifier	strcpy
>729	Condition	 
>730	EqualityExpression	* name_end == 0
>731	PrimaryExpression	0
>732	UnaryOp	* name_end
>733	Identifier	name_end
>734	UnaryOperator	*
>735	WhileStatement	while ( * name_end != '_' && * name_end != 0 )
>736	ExpressionStatement	 
>737	IncDecOp	name_end ++
>738	IncDec	++
>739	Identifier	name_end
>740	Condition	 
>741	AndExpression	* name_end != '_' && * name_end != 0
>742	EqualityExpression	* name_end != 0
>743	PrimaryExpression	0
>744	UnaryOp	* name_end
>745	Identifier	name_end
>746	UnaryOperator	*
>747	EqualityExpression	* name_end != '_'
>748	PrimaryExpression	'_'
>749	UnaryOp	* name_end
>750	Identifier	name_end
>751	UnaryOperator	*
>752	IdentifierDeclStatement	 
>753	IdentifierDecl	* name_end = base_name
>754	AssignmentExpr	* name_end = base_name
>755	Identifier	base_name
>756	Identifier	base_name
>757	Identifier	name_end
>758	IdentifierDeclType	char *
>759	ExpressionStatement	 
>760	CallExpression	GetBaseName ( base_name )
>761	ArgumentList	base_name
>762	Argument	base_name
>763	Identifier	base_name
>764	Callee	GetBaseName
>765	Identifier	GetBaseName
>766	IdentifierDeclStatement	 
>767	IdentifierDecl	base_name [ 256 ]
>768	PrimaryExpression	256
>769	Identifier	base_name
>770	IdentifierDeclType	char [ 256 ]
>771	ExpressionStatement	 
>772	AssignmentExpr	m_texture_index = - 1
>773	UnaryOp	- 1
>774	PrimaryExpression	1
>775	UnaryOperator	-
>776	Identifier	m_texture_index
>777	ExpressionStatement	 
>778	AssignmentExpr	m_camera . m_adjusted = false
>779	Identifier	false
>780	MemberAccess	m_camera . m_adjusted
>781	Identifier	m_adjusted
>782	Identifier	m_camera
>783	ExpressionStatement	 
>784	AssignmentExpr	m_init_focal = init_focal
>785	Identifier	init_focal
>786	Identifier	m_init_focal
>787	ExpressionStatement	 
>788	AssignmentExpr	m_has_init_focal = has_init_focal
>789	Identifier	has_init_focal
>790	Identifier	m_has_init_focal
>791	ExpressionStatement	 
>792	AssignmentExpr	m_fisheye = fisheye
>793	Identifier	fisheye
>794	Identifier	m_fisheye
>795	ExpressionStatement	 
>796	AssignmentExpr	m_keys_scale_rot_loaded = false
>797	Identifier	false
>798	Identifier	m_keys_scale_rot_loaded
>799	ExpressionStatement	 
>800	AssignmentExpr	m_keys_loaded = false
>801	Identifier	false
>802	Identifier	m_keys_loaded
>803	ExpressionStatement	 
>804	AssignmentExpr	m_image_loaded = false
>805	Identifier	false
>806	Identifier	m_image_loaded
>807	ExpressionStatement	 
>808	AssignmentExpr	m_thumb8 = NULL
>809	Identifier	NULL
>810	Identifier	m_thumb8
>811	ExpressionStatement	 
>812	AssignmentExpr	m_thumb = NULL
>813	Identifier	NULL
>814	Identifier	m_thumb
>815	ExpressionStatement	 
>816	AssignmentExpr	m_img = NULL
>817	Identifier	NULL
>818	Identifier	m_img
>819	IfStatement	if ( path == NULL || strcmp ( path , \".\" ) == 0 || toks [ 0 ] . c_str ( ) [ 0 ] == '/' )
>820	ElseStatement	else
>821	CompoundStatement	 
>822	ExpressionStatement	 
>823	AssignmentExpr	m_name = strdup ( tmp_name )
>824	CallExpression	strdup ( tmp_name )
>825	ArgumentList	tmp_name
>826	Argument	tmp_name
>827	Identifier	tmp_name
>828	Callee	strdup
>829	Identifier	strdup
>830	Identifier	m_name
>831	ExpressionStatement	 
>832	CallExpression	sprintf ( tmp_name , \"%s/%s\" , path , toks [ 0 ] . c_str ( ) )
>833	ArgumentList	tmp_name
>834	Argument	toks [ 0 ] . c_str ( )
>835	CallExpression	toks [ 0 ] . c_str ( )
>836	ArgumentList	 
>837	Callee	toks [ 0 ] . c_str
>838	MemberAccess	toks [ 0 ] . c_str
>839	Identifier	c_str
>840	ArrayIndexing	toks [ 0 ]
>841	PrimaryExpression	0
>842	Identifier	toks
>843	Argument	path
>844	Identifier	path
>845	Argument	\"%s/%s\"
>846	PrimaryExpression	\"%s/%s\"
>847	Argument	tmp_name
>848	Identifier	tmp_name
>849	Callee	sprintf
>850	Identifier	sprintf
>851	IdentifierDeclStatement	 
>852	IdentifierDecl	tmp_name [ 512 ]
>853	PrimaryExpression	512
>854	Identifier	tmp_name
>855	IdentifierDeclType	char [ 512 ]
>856	CompoundStatement	 
>857	ExpressionStatement	 
>858	AssignmentExpr	m_name = strdup ( toks [ 0 ] . c_str ( ) )
>859	CallExpression	strdup ( toks [ 0 ] . c_str ( ) )
>860	ArgumentList	toks [ 0 ] . c_str ( )
>861	Argument	toks [ 0 ] . c_str ( )
>862	CallExpression	toks [ 0 ] . c_str ( )
>863	ArgumentList	 
>864	Callee	toks [ 0 ] . c_str
>865	MemberAccess	toks [ 0 ] . c_str
>866	Identifier	c_str
>867	ArrayIndexing	toks [ 0 ]
>868	PrimaryExpression	0
>869	Identifier	toks
>870	Callee	strdup
>871	Identifier	strdup
>872	Identifier	m_name
>873	Condition	 
>874	OrExpression	path == NULL || strcmp ( path , \".\" ) == 0 || toks [ 0 ] . c_str ( ) [ 0 ] == '/'
>875	OrExpression	strcmp ( path , \".\" ) == 0 || toks [ 0 ] . c_str ( ) [ 0 ] == '/'
>876	EqualityExpression	toks [ 0 ] . c_str ( ) [ 0 ] == '/'
>877	PrimaryExpression	'/'
>878	ArrayIndexing	toks [ 0 ] . c_str ( ) [ 0 ]
>879	PrimaryExpression	0
>880	CallExpression	toks [ 0 ] . c_str ( )
>881	ArgumentList	 
>882	Callee	toks [ 0 ] . c_str
>883	MemberAccess	toks [ 0 ] . c_str
>884	Identifier	c_str
>885	ArrayIndexing	toks [ 0 ]
>886	PrimaryExpression	0
>887	Identifier	toks
>888	EqualityExpression	strcmp ( path , \".\" ) == 0
>889	PrimaryExpression	0
>890	CallExpression	strcmp ( path , \".\" )
>891	ArgumentList	path
>892	Argument	\".\"
>893	PrimaryExpression	\".\"
>894	Argument	path
>895	Identifier	path
>896	Callee	strcmp
>897	Identifier	strcmp
>898	EqualityExpression	path == NULL
>899	Identifier	NULL
>900	Identifier	path
>901	IdentifierDeclStatement	 
>902	IdentifierDecl	data
>903	Identifier	data
>904	IdentifierDeclType	ImageData
>905	IfStatement	if ( num_toks >= 3 )
>906	CompoundStatement	 
>907	ExpressionStatement	 
>908	AssignmentExpr	init_focal = atof ( toks [ 2 ] . c_str ( ) )
>909	CallExpression	atof ( toks [ 2 ] . c_str ( ) )
>910	ArgumentList	toks [ 2 ] . c_str ( )
>911	Argument	toks [ 2 ] . c_str ( )
>912	CallExpression	toks [ 2 ] . c_str ( )
>913	ArgumentList	 
>914	Callee	toks [ 2 ] . c_str
>915	MemberAccess	toks [ 2 ] . c_str
>916	Identifier	c_str
>917	ArrayIndexing	toks [ 2 ]
>918	PrimaryExpression	2
>919	Identifier	toks
>920	Callee	atof
>921	Identifier	atof
>922	Identifier	init_focal
>923	ExpressionStatement	 
>924	AssignmentExpr	has_init_focal = true
>925	Identifier	true
>926	Identifier	has_init_focal
>927	Condition	 
>928	RelationalExpression	num_toks >= 3
>929	PrimaryExpression	3
>930	Identifier	num_toks
>931	IdentifierDeclStatement	 
>932	IdentifierDecl	init_focal = 0.0
>933	AssignmentExpr	init_focal = 0.0
>934	PrimaryExpression	0.0
>935	Identifier	init_focal
>936	Identifier	init_focal
>937	IdentifierDeclType	double
>938	IdentifierDeclStatement	 
>939	IdentifierDecl	has_init_focal = false
>940	AssignmentExpr	has_init_focal = false
>941	Identifier	false
>942	Identifier	false
>943	Identifier	has_init_focal
>944	IdentifierDeclType	bool
>945	IfStatement	if ( num_toks >= 2 )
>946	CompoundStatement	 
>947	ExpressionStatement	 
>948	AssignmentExpr	fisheye = ( atoi ( toks [ 1 ] . c_str ( ) ) == 1 )
>949	EqualityExpression	atoi ( toks [ 1 ] . c_str ( ) ) == 1
>950	PrimaryExpression	1
>951	CallExpression	atoi ( toks [ 1 ] . c_str ( ) )
>952	ArgumentList	toks [ 1 ] . c_str ( )
>953	Argument	toks [ 1 ] . c_str ( )
>954	CallExpression	toks [ 1 ] . c_str ( )
>955	ArgumentList	 
>956	Callee	toks [ 1 ] . c_str
>957	MemberAccess	toks [ 1 ] . c_str
>958	Identifier	c_str
>959	ArrayIndexing	toks [ 1 ]
>960	PrimaryExpression	1
>961	Identifier	toks
>962	Callee	atoi
>963	Identifier	atoi
>964	Identifier	fisheye
>965	Condition	 
>966	RelationalExpression	num_toks >= 2
>967	PrimaryExpression	2
>968	Identifier	num_toks
>969	IdentifierDeclStatement	 
>970	IdentifierDecl	fisheye = fisheye_by_default
>971	AssignmentExpr	fisheye = fisheye_by_default
>972	Identifier	fisheye_by_default
>973	Identifier	fisheye_by_default
>974	Identifier	fisheye
>975	IdentifierDeclType	bool
>976	IdentifierDeclStatement	 
>977	IdentifierDecl	num_toks = ( int ) toks . size ( )
>978	AssignmentExpr	num_toks = ( int ) toks . size ( )
>979	CastExpression	( int ) toks . size ( )
>980	CallExpression	toks . size ( )
>981	ArgumentList	 
>982	Callee	toks . size
>983	MemberAccess	toks . size
>984	Identifier	size
>985	Identifier	toks
>986	CastTarget	int
>987	Identifier	num_toks
>988	Identifier	num_toks
>989	IdentifierDeclType	int
>990	WhileStatement	while ( t . HasMoreTokens ( ) )
>991	CompoundStatement	 
>992	ExpressionStatement	 
>993	CallExpression	toks . push_back ( tok )
>994	ArgumentList	tok
>995	Argument	tok
>996	Identifier	tok
>997	Callee	toks . push_back
>998	MemberAccess	toks . push_back
>999	Identifier	push_back
>1000	Identifier	toks
>1001	ExpressionStatement	 
>1002	AssignmentExpr	tok = t . GetNextToken ( )
>1003	CallExpression	t . GetNextToken ( )
>1004	ArgumentList	 
>1005	Callee	t . GetNextToken
>1006	MemberAccess	t . GetNextToken
>1007	Identifier	GetNextToken
>1008	Identifier	t
>1009	Identifier	tok
>1010	Condition	 
>1011	CallExpression	t . HasMoreTokens ( )
>1012	ArgumentList	 
>1013	Callee	t . HasMoreTokens
>1014	MemberAccess	t . HasMoreTokens
>1015	Identifier	HasMoreTokens
>1016	Identifier	t
>1017	ExpressionStatement	 
>1018	CallExpression	Tokenize ( str , toks , \" \" )
>1019	ArgumentList	str
>1020	Argument	\" \"
>1021	PrimaryExpression	\" \"
>1022	Argument	toks
>1023	Identifier	toks
>1024	Argument	str
>1025	Identifier	str
>1026	Callee	Tokenize
>1027	Identifier	Tokenize
>1028	IdentifierDeclStatement	 
>1029	IdentifierDecl	toks
>1030	Identifier	toks
>1031	IdentifierDeclType	std 
>1032	IdentifierDeclStatement	 
>1033	IdentifierDecl	str ( buf )
>1034	Identifier	buf
>1035	Identifier	str
>1036	IdentifierDeclType	std 
>1037	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\r' )
>1038	ExpressionStatement	 
>1039	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>1040	PrimaryExpression	0
>1041	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1042	AdditiveExpression	strlen ( buf ) - 1
>1043	PrimaryExpression	1
>1044	CallExpression	strlen ( buf )
>1045	ArgumentList	buf
>1046	Argument	buf
>1047	Identifier	buf
>1048	Callee	strlen
>1049	Identifier	strlen
>1050	Identifier	buf
>1051	Condition	 
>1052	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\r'
>1053	PrimaryExpression	'\r'
>1054	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1055	AdditiveExpression	strlen ( buf ) - 1
>1056	PrimaryExpression	1
>1057	CallExpression	strlen ( buf )
>1058	ArgumentList	buf
>1059	Argument	buf
>1060	Identifier	buf
>1061	Callee	strlen
>1062	Identifier	strlen
>1063	Identifier	buf
>1064	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>1065	ExpressionStatement	 
>1066	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>1067	PrimaryExpression	0
>1068	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1069	AdditiveExpression	strlen ( buf ) - 1
>1070	PrimaryExpression	1
>1071	CallExpression	strlen ( buf )
>1072	ArgumentList	buf
>1073	Argument	buf
>1074	Identifier	buf
>1075	Callee	strlen
>1076	Identifier	strlen
>1077	Identifier	buf
>1078	Condition	 
>1079	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>1080	PrimaryExpression	'\n'
>1081	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>1082	AdditiveExpression	strlen ( buf ) - 1
>1083	PrimaryExpression	1
>1084	CallExpression	strlen ( buf )
>1085	ArgumentList	buf
>1086	Argument	buf
>1087	Identifier	buf
>1088	Callee	strlen
>1089	Identifier	strlen
>1090	Identifier	buf
>1149	FunctionDef	ImageData 
>1150	ParameterList	 
>1151	ReturnType	void
>1152	CompoundStatement	 
>1153	ExpressionStatement	 
>1154	AssignmentExpr	m_image_loaded = true
>1155	Identifier	true
>1156	Identifier	m_image_loaded
>1157	ExpressionStatement	 
>1158	AssignmentExpr	m_img = img
>1159	Identifier	img
>1160	Identifier	m_img
>1161	IfStatement	if ( FileExists ( jpeg_buf ) )
>1162	ElseStatement	else
>1163	IfStatement	if ( FileExists ( bmp_buf ) )
>1164	ElseStatement	else
>1165	CompoundStatement	 
>1166	ExpressionStatement	 
>1167	AssignmentExpr	img = img_read_pgm_file ( m_name )
>1168	CallExpression	img_read_pgm_file ( m_name )
>1169	ArgumentList	m_name
>1170	Argument	m_name
>1171	Identifier	m_name
>1172	Callee	img_read_pgm_file
>1173	Identifier	img_read_pgm_file
>1174	Identifier	img
>1175	CompoundStatement	 
>1176	ExpressionStatement	 
>1177	AssignmentExpr	img = img_read_bmp_file ( bmp_buf )
>1178	CallExpression	img_read_bmp_file ( bmp_buf )
>1179	ArgumentList	bmp_buf
>1180	Argument	bmp_buf
>1181	Identifier	bmp_buf
>1182	Callee	img_read_bmp_file
>1183	Identifier	img_read_bmp_file
>1184	Identifier	img
>1185	Condition	 
>1186	CallExpression	FileExists ( bmp_buf )
>1187	ArgumentList	bmp_buf
>1188	Argument	bmp_buf
>1189	Identifier	bmp_buf
>1190	Callee	FileExists
>1191	Identifier	FileExists
>1192	CompoundStatement	 
>1193	ExpressionStatement	 
>1194	AssignmentExpr	img = LoadJPEG ( jpeg_buf )
>1195	CallExpression	LoadJPEG ( jpeg_buf )
>1196	ArgumentList	jpeg_buf
>1197	Argument	jpeg_buf
>1198	Identifier	jpeg_buf
>1199	Callee	LoadJPEG
>1200	Identifier	LoadJPEG
>1201	Identifier	img
>1202	Condition	 
>1203	CallExpression	FileExists ( jpeg_buf )
>1204	ArgumentList	jpeg_buf
>1205	Argument	jpeg_buf
>1206	Identifier	jpeg_buf
>1207	Callee	FileExists
>1208	Identifier	FileExists
>1209	IdentifierDeclStatement	 
>1210	IdentifierDecl	* img
>1211	Identifier	img
>1212	IdentifierDeclType	img_t *
>1213	ExpressionStatement	 
>1214	AssignmentExpr	bmp_buf [ strlen ( m_name ) - 1 ] = 'p'
>1215	PrimaryExpression	'p'
>1216	ArrayIndexing	bmp_buf [ strlen ( m_name ) - 1 ]
>1217	AdditiveExpression	strlen ( m_name ) - 1
>1218	PrimaryExpression	1
>1219	CallExpression	strlen ( m_name )
>1220	ArgumentList	m_name
>1221	Argument	m_name
>1222	Identifier	m_name
>1223	Callee	strlen
>1224	Identifier	strlen
>1225	Identifier	bmp_buf
>1226	ExpressionStatement	 
>1227	AssignmentExpr	bmp_buf [ strlen ( m_name ) - 2 ] = 'm'
>1228	PrimaryExpression	'm'
>1229	ArrayIndexing	bmp_buf [ strlen ( m_name ) - 2 ]
>1230	AdditiveExpression	strlen ( m_name ) - 2
>1231	PrimaryExpression	2
>1232	CallExpression	strlen ( m_name )
>1233	ArgumentList	m_name
>1234	Argument	m_name
>1235	Identifier	m_name
>1236	Callee	strlen
>1237	Identifier	strlen
>1238	Identifier	bmp_buf
>1239	ExpressionStatement	 
>1240	AssignmentExpr	bmp_buf [ strlen ( m_name ) - 3 ] = 'b'
>1241	PrimaryExpression	'b'
>1242	ArrayIndexing	bmp_buf [ strlen ( m_name ) - 3 ]
>1243	AdditiveExpression	strlen ( m_name ) - 3
>1244	PrimaryExpression	3
>1245	CallExpression	strlen ( m_name )
>1246	ArgumentList	m_name
>1247	Argument	m_name
>1248	Identifier	m_name
>1249	Callee	strlen
>1250	Identifier	strlen
>1251	Identifier	bmp_buf
>1252	ExpressionStatement	 
>1253	CallExpression	strcpy ( bmp_buf , m_name )
>1254	ArgumentList	bmp_buf
>1255	Argument	m_name
>1256	Identifier	m_name
>1257	Argument	bmp_buf
>1258	Identifier	bmp_buf
>1259	Callee	strcpy
>1260	Identifier	strcpy
>1261	IdentifierDeclStatement	 
>1262	IdentifierDecl	bmp_buf [ 256 ]
>1263	PrimaryExpression	256
>1264	Identifier	bmp_buf
>1265	IdentifierDeclType	char [ 256 ]
>1266	ExpressionStatement	 
>1267	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 1 ] = 'g'
>1268	PrimaryExpression	'g'
>1269	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 1 ]
>1270	AdditiveExpression	strlen ( m_name ) - 1
>1271	PrimaryExpression	1
>1272	CallExpression	strlen ( m_name )
>1273	ArgumentList	m_name
>1274	Argument	m_name
>1275	Identifier	m_name
>1276	Callee	strlen
>1277	Identifier	strlen
>1278	Identifier	jpeg_buf
>1279	ExpressionStatement	 
>1280	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 2 ] = 'p'
>1281	PrimaryExpression	'p'
>1282	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 2 ]
>1283	AdditiveExpression	strlen ( m_name ) - 2
>1284	PrimaryExpression	2
>1285	CallExpression	strlen ( m_name )
>1286	ArgumentList	m_name
>1287	Argument	m_name
>1288	Identifier	m_name
>1289	Callee	strlen
>1290	Identifier	strlen
>1291	Identifier	jpeg_buf
>1292	ExpressionStatement	 
>1293	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 3 ] = 'j'
>1294	PrimaryExpression	'j'
>1295	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 3 ]
>1296	AdditiveExpression	strlen ( m_name ) - 3
>1297	PrimaryExpression	3
>1298	CallExpression	strlen ( m_name )
>1299	ArgumentList	m_name
>1300	Argument	m_name
>1301	Identifier	m_name
>1302	Callee	strlen
>1303	Identifier	strlen
>1304	Identifier	jpeg_buf
>1305	ExpressionStatement	 
>1306	CallExpression	strcpy ( jpeg_buf , m_name )
>1307	ArgumentList	jpeg_buf
>1308	Argument	m_name
>1309	Identifier	m_name
>1310	Argument	jpeg_buf
>1311	Identifier	jpeg_buf
>1312	Callee	strcpy
>1313	Identifier	strcpy
>1314	IdentifierDeclStatement	 
>1315	IdentifierDecl	jpeg_buf [ 256 ]
>1316	PrimaryExpression	256
>1317	Identifier	jpeg_buf
>1318	IdentifierDeclType	char [ 256 ]
>1337	FunctionDef	ImageData 
>1338	ParameterList	 
>1339	ReturnType	void
>1340	CompoundStatement	 
>1341	ExpressionStatement	 
>1342	AssignmentExpr	m_image_loaded = false
>1343	Identifier	false
>1344	Identifier	m_image_loaded
>1345	ExpressionStatement	 
>1346	CallExpression	img_free ( m_img )
>1347	ArgumentList	m_img
>1348	Argument	m_img
>1349	Identifier	m_img
>1350	Callee	img_free
>1351	Identifier	img_free
>1352	IfStatement	if ( ! m_image_loaded )
>1353	CompoundStatement	 
>1354	ReturnStatement	 
>1355	ExpressionStatement	 
>1356	CallExpression	printf ( \"[ImageData
>1357	ArgumentList	\"[ImageData
>1358	Argument	\"[ImageData
>1359	PrimaryExpression	\"[ImageData
>1360	Callee	printf
>1361	Identifier	printf
>1362	Condition	 
>1363	UnaryOp	! m_image_loaded
>1364	Identifier	m_image_loaded
>1365	UnaryOperator	!
>1372	FunctionDef	ImageData 
>1373	ParameterList	 
>1374	ReturnType	void
>1375	CompoundStatement	 
>1376	ExpressionStatement	 
>1377	AssignmentExpr	m_texture_image_loaded = true
>1378	Identifier	true
>1379	Identifier	m_texture_image_loaded
>1380	ExpressionStatement	 
>1381	AssignmentExpr	m_back_texture_img = img
>1382	Identifier	img
>1383	Identifier	m_back_texture_img
>1384	IfStatement	if ( FileExists ( texture_jpeg_buf ) )
>1385	ElseStatement	else
>1386	IfStatement	if ( FileExists ( bmp_buf ) )
>1387	ElseStatement	else
>1388	IfStatement	if ( FileExists ( jpeg_buf ) )
>1389	ElseStatement	else
>1390	CompoundStatement	 
>1391	ExpressionStatement	 
>1392	AssignmentExpr	img = img_read_pgm_file ( m_name )
>1393	CallExpression	img_read_pgm_file ( m_name )
>1394	ArgumentList	m_name
>1395	Argument	m_name
>1396	Identifier	m_name
>1397	Callee	img_read_pgm_file
>1398	Identifier	img_read_pgm_file
>1399	Identifier	img
>1400	CompoundStatement	 
>1401	ExpressionStatement	 
>1402	AssignmentExpr	img = LoadJPEG ( jpeg_buf )
>1403	CallExpression	LoadJPEG ( jpeg_buf )
>1404	ArgumentList	jpeg_buf
>1405	Argument	jpeg_buf
>1406	Identifier	jpeg_buf
>1407	Callee	LoadJPEG
>1408	Identifier	LoadJPEG
>1409	Identifier	img
>1410	Condition	 
>1411	CallExpression	FileExists ( jpeg_buf )
>1412	ArgumentList	jpeg_buf
>1413	Argument	jpeg_buf
>1414	Identifier	jpeg_buf
>1415	Callee	FileExists
>1416	Identifier	FileExists
>1417	CompoundStatement	 
>1418	ExpressionStatement	 
>1419	AssignmentExpr	img = LoadJPEG ( bmp_buf )
>1420	CallExpression	LoadJPEG ( bmp_buf )
>1421	ArgumentList	bmp_buf
>1422	Argument	bmp_buf
>1423	Identifier	bmp_buf
>1424	Callee	LoadJPEG
>1425	Identifier	LoadJPEG
>1426	Identifier	img
>1427	Condition	 
>1428	CallExpression	FileExists ( bmp_buf )
>1429	ArgumentList	bmp_buf
>1430	Argument	bmp_buf
>1431	Identifier	bmp_buf
>1432	Callee	FileExists
>1433	Identifier	FileExists
>1434	CompoundStatement	 
>1435	ExpressionStatement	 
>1436	AssignmentExpr	img = LoadJPEG ( texture_jpeg_buf )
>1437	CallExpression	LoadJPEG ( texture_jpeg_buf )
>1438	ArgumentList	texture_jpeg_buf
>1439	Argument	texture_jpeg_buf
>1440	Identifier	texture_jpeg_buf
>1441	Callee	LoadJPEG
>1442	Identifier	LoadJPEG
>1443	Identifier	img
>1444	Condition	 
>1445	CallExpression	FileExists ( texture_jpeg_buf )
>1446	ArgumentList	texture_jpeg_buf
>1447	Argument	texture_jpeg_buf
>1448	Identifier	texture_jpeg_buf
>1449	Callee	FileExists
>1450	Identifier	FileExists
>1451	IdentifierDeclStatement	 
>1452	IdentifierDecl	* img
>1453	Identifier	img
>1454	IdentifierDeclType	img_t *
>1455	ExpressionStatement	 
>1456	AssignmentExpr	bmp_buf [ strlen ( texture_jpeg_buf ) - 1 ] = 0
>1457	PrimaryExpression	0
>1458	ArrayIndexing	bmp_buf [ strlen ( texture_jpeg_buf ) - 1 ]
>1459	AdditiveExpression	strlen ( texture_jpeg_buf ) - 1
>1460	PrimaryExpression	1
>1461	CallExpression	strlen ( texture_jpeg_buf )
>1462	ArgumentList	texture_jpeg_buf
>1463	Argument	texture_jpeg_buf
>1464	Identifier	texture_jpeg_buf
>1465	Callee	strlen
>1466	Identifier	strlen
>1467	Identifier	bmp_buf
>1468	ExpressionStatement	 
>1469	AssignmentExpr	bmp_buf [ strlen ( texture_jpeg_buf ) - 2 ] = 'g'
>1470	PrimaryExpression	'g'
>1471	ArrayIndexing	bmp_buf [ strlen ( texture_jpeg_buf ) - 2 ]
>1472	AdditiveExpression	strlen ( texture_jpeg_buf ) - 2
>1473	PrimaryExpression	2
>1474	CallExpression	strlen ( texture_jpeg_buf )
>1475	ArgumentList	texture_jpeg_buf
>1476	Argument	texture_jpeg_buf
>1477	Identifier	texture_jpeg_buf
>1478	Callee	strlen
>1479	Identifier	strlen
>1480	Identifier	bmp_buf
>1481	ExpressionStatement	 
>1482	AssignmentExpr	bmp_buf [ strlen ( texture_jpeg_buf ) - 3 ] = 'p'
>1483	PrimaryExpression	'p'
>1484	ArrayIndexing	bmp_buf [ strlen ( texture_jpeg_buf ) - 3 ]
>1485	AdditiveExpression	strlen ( texture_jpeg_buf ) - 3
>1486	PrimaryExpression	3
>1487	CallExpression	strlen ( texture_jpeg_buf )
>1488	ArgumentList	texture_jpeg_buf
>1489	Argument	texture_jpeg_buf
>1490	Identifier	texture_jpeg_buf
>1491	Callee	strlen
>1492	Identifier	strlen
>1493	Identifier	bmp_buf
>1494	ExpressionStatement	 
>1495	AssignmentExpr	bmp_buf [ strlen ( texture_jpeg_buf ) - 4 ] = 'j'
>1496	PrimaryExpression	'j'
>1497	ArrayIndexing	bmp_buf [ strlen ( texture_jpeg_buf ) - 4 ]
>1498	AdditiveExpression	strlen ( texture_jpeg_buf ) - 4
>1499	PrimaryExpression	4
>1500	CallExpression	strlen ( texture_jpeg_buf )
>1501	ArgumentList	texture_jpeg_buf
>1502	Argument	texture_jpeg_buf
>1503	Identifier	texture_jpeg_buf
>1504	Callee	strlen
>1505	Identifier	strlen
>1506	Identifier	bmp_buf
>1507	ExpressionStatement	 
>1508	AssignmentExpr	bmp_buf [ strlen ( texture_jpeg_buf ) - 5 ] = '.'
>1509	PrimaryExpression	'.'
>1510	ArrayIndexing	bmp_buf [ strlen ( texture_jpeg_buf ) - 5 ]
>1511	AdditiveExpression	strlen ( texture_jpeg_buf ) - 5
>1512	PrimaryExpression	5
>1513	CallExpression	strlen ( texture_jpeg_buf )
>1514	ArgumentList	texture_jpeg_buf
>1515	Argument	texture_jpeg_buf
>1516	Identifier	texture_jpeg_buf
>1517	Callee	strlen
>1518	Identifier	strlen
>1519	Identifier	bmp_buf
>1520	ExpressionStatement	 
>1521	CallExpression	strcpy ( bmp_buf , texture_jpeg_buf )
>1522	ArgumentList	bmp_buf
>1523	Argument	texture_jpeg_buf
>1524	Identifier	texture_jpeg_buf
>1525	Argument	bmp_buf
>1526	Identifier	bmp_buf
>1527	Callee	strcpy
>1528	Identifier	strcpy
>1529	IdentifierDeclStatement	 
>1530	IdentifierDecl	bmp_buf [ 256 ]
>1531	PrimaryExpression	256
>1532	Identifier	bmp_buf
>1533	IdentifierDeclType	char [ 256 ]
>1534	ExpressionStatement	 
>1535	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 1 ] = 'g'
>1536	PrimaryExpression	'g'
>1537	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 1 ]
>1538	AdditiveExpression	strlen ( m_name ) - 1
>1539	PrimaryExpression	1
>1540	CallExpression	strlen ( m_name )
>1541	ArgumentList	m_name
>1542	Argument	m_name
>1543	Identifier	m_name
>1544	Callee	strlen
>1545	Identifier	strlen
>1546	Identifier	jpeg_buf
>1547	ExpressionStatement	 
>1548	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 2 ] = 'p'
>1549	PrimaryExpression	'p'
>1550	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 2 ]
>1551	AdditiveExpression	strlen ( m_name ) - 2
>1552	PrimaryExpression	2
>1553	CallExpression	strlen ( m_name )
>1554	ArgumentList	m_name
>1555	Argument	m_name
>1556	Identifier	m_name
>1557	Callee	strlen
>1558	Identifier	strlen
>1559	Identifier	jpeg_buf
>1560	ExpressionStatement	 
>1561	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 3 ] = 'j'
>1562	PrimaryExpression	'j'
>1563	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 3 ]
>1564	AdditiveExpression	strlen ( m_name ) - 3
>1565	PrimaryExpression	3
>1566	CallExpression	strlen ( m_name )
>1567	ArgumentList	m_name
>1568	Argument	m_name
>1569	Identifier	m_name
>1570	Callee	strlen
>1571	Identifier	strlen
>1572	Identifier	jpeg_buf
>1573	ExpressionStatement	 
>1574	CallExpression	strcpy ( jpeg_buf , m_name )
>1575	ArgumentList	jpeg_buf
>1576	Argument	m_name
>1577	Identifier	m_name
>1578	Argument	jpeg_buf
>1579	Identifier	jpeg_buf
>1580	Callee	strcpy
>1581	Identifier	strcpy
>1582	IdentifierDeclStatement	 
>1583	IdentifierDecl	jpeg_buf [ 256 ]
>1584	PrimaryExpression	256
>1585	Identifier	jpeg_buf
>1586	IdentifierDeclType	char [ 256 ]
>1587	ExpressionStatement	 
>1588	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 9 ] = 0
>1589	PrimaryExpression	0
>1590	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 9 ]
>1591	AdditiveExpression	strlen ( m_name ) + 9
>1592	PrimaryExpression	9
>1593	CallExpression	strlen ( m_name )
>1594	ArgumentList	m_name
>1595	Argument	m_name
>1596	Identifier	m_name
>1597	Callee	strlen
>1598	Identifier	strlen
>1599	Identifier	texture_jpeg_buf
>1600	ExpressionStatement	 
>1601	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 8 ] = 'g'
>1602	PrimaryExpression	'g'
>1603	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 8 ]
>1604	AdditiveExpression	strlen ( m_name ) + 8
>1605	PrimaryExpression	8
>1606	CallExpression	strlen ( m_name )
>1607	ArgumentList	m_name
>1608	Argument	m_name
>1609	Identifier	m_name
>1610	Callee	strlen
>1611	Identifier	strlen
>1612	Identifier	texture_jpeg_buf
>1613	ExpressionStatement	 
>1614	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 7 ] = 'p'
>1615	PrimaryExpression	'p'
>1616	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 7 ]
>1617	AdditiveExpression	strlen ( m_name ) + 7
>1618	PrimaryExpression	7
>1619	CallExpression	strlen ( m_name )
>1620	ArgumentList	m_name
>1621	Argument	m_name
>1622	Identifier	m_name
>1623	Callee	strlen
>1624	Identifier	strlen
>1625	Identifier	texture_jpeg_buf
>1626	ExpressionStatement	 
>1627	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 6 ] = 'j'
>1628	PrimaryExpression	'j'
>1629	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 6 ]
>1630	AdditiveExpression	strlen ( m_name ) + 6
>1631	PrimaryExpression	6
>1632	CallExpression	strlen ( m_name )
>1633	ArgumentList	m_name
>1634	Argument	m_name
>1635	Identifier	m_name
>1636	Callee	strlen
>1637	Identifier	strlen
>1638	Identifier	texture_jpeg_buf
>1639	ExpressionStatement	 
>1640	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 5 ] = '.'
>1641	PrimaryExpression	'.'
>1642	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 5 ]
>1643	AdditiveExpression	strlen ( m_name ) + 5
>1644	PrimaryExpression	5
>1645	CallExpression	strlen ( m_name )
>1646	ArgumentList	m_name
>1647	Argument	m_name
>1648	Identifier	m_name
>1649	Callee	strlen
>1650	Identifier	strlen
>1651	Identifier	texture_jpeg_buf
>1652	ExpressionStatement	 
>1653	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 4 ] = '3'
>1654	PrimaryExpression	'3'
>1655	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 4 ]
>1656	AdditiveExpression	strlen ( m_name ) + 4
>1657	PrimaryExpression	4
>1658	CallExpression	strlen ( m_name )
>1659	ArgumentList	m_name
>1660	Argument	m_name
>1661	Identifier	m_name
>1662	Callee	strlen
>1663	Identifier	strlen
>1664	Identifier	texture_jpeg_buf
>1665	ExpressionStatement	 
>1666	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 3 ] = 'e'
>1667	PrimaryExpression	'e'
>1668	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 3 ]
>1669	AdditiveExpression	strlen ( m_name ) + 3
>1670	PrimaryExpression	3
>1671	CallExpression	strlen ( m_name )
>1672	ArgumentList	m_name
>1673	Argument	m_name
>1674	Identifier	m_name
>1675	Callee	strlen
>1676	Identifier	strlen
>1677	Identifier	texture_jpeg_buf
>1678	ExpressionStatement	 
>1679	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 2 ] = 'r'
>1680	PrimaryExpression	'r'
>1681	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 2 ]
>1682	AdditiveExpression	strlen ( m_name ) + 2
>1683	PrimaryExpression	2
>1684	CallExpression	strlen ( m_name )
>1685	ArgumentList	m_name
>1686	Argument	m_name
>1687	Identifier	m_name
>1688	Callee	strlen
>1689	Identifier	strlen
>1690	Identifier	texture_jpeg_buf
>1691	ExpressionStatement	 
>1692	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 1 ] = 'u'
>1693	PrimaryExpression	'u'
>1694	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 1 ]
>1695	AdditiveExpression	strlen ( m_name ) + 1
>1696	PrimaryExpression	1
>1697	CallExpression	strlen ( m_name )
>1698	ArgumentList	m_name
>1699	Argument	m_name
>1700	Identifier	m_name
>1701	Callee	strlen
>1702	Identifier	strlen
>1703	Identifier	texture_jpeg_buf
>1704	ExpressionStatement	 
>1705	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 0 ] = 't'
>1706	PrimaryExpression	't'
>1707	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 0 ]
>1708	AdditiveExpression	strlen ( m_name ) + 0
>1709	PrimaryExpression	0
>1710	CallExpression	strlen ( m_name )
>1711	ArgumentList	m_name
>1712	Argument	m_name
>1713	Identifier	m_name
>1714	Callee	strlen
>1715	Identifier	strlen
>1716	Identifier	texture_jpeg_buf
>1717	ExpressionStatement	 
>1718	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 1 ] = 'x'
>1719	PrimaryExpression	'x'
>1720	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 1 ]
>1721	AdditiveExpression	strlen ( m_name ) - 1
>1722	PrimaryExpression	1
>1723	CallExpression	strlen ( m_name )
>1724	ArgumentList	m_name
>1725	Argument	m_name
>1726	Identifier	m_name
>1727	Callee	strlen
>1728	Identifier	strlen
>1729	Identifier	texture_jpeg_buf
>1730	ExpressionStatement	 
>1731	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 2 ] = 'e'
>1732	PrimaryExpression	'e'
>1733	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 2 ]
>1734	AdditiveExpression	strlen ( m_name ) - 2
>1735	PrimaryExpression	2
>1736	CallExpression	strlen ( m_name )
>1737	ArgumentList	m_name
>1738	Argument	m_name
>1739	Identifier	m_name
>1740	Callee	strlen
>1741	Identifier	strlen
>1742	Identifier	texture_jpeg_buf
>1743	ExpressionStatement	 
>1744	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 3 ] = 't'
>1745	PrimaryExpression	't'
>1746	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 3 ]
>1747	AdditiveExpression	strlen ( m_name ) - 3
>1748	PrimaryExpression	3
>1749	CallExpression	strlen ( m_name )
>1750	ArgumentList	m_name
>1751	Argument	m_name
>1752	Identifier	m_name
>1753	Callee	strlen
>1754	Identifier	strlen
>1755	Identifier	texture_jpeg_buf
>1756	ExpressionStatement	 
>1757	CallExpression	strcpy ( texture_jpeg_buf , m_name )
>1758	ArgumentList	texture_jpeg_buf
>1759	Argument	m_name
>1760	Identifier	m_name
>1761	Argument	texture_jpeg_buf
>1762	Identifier	texture_jpeg_buf
>1763	Callee	strcpy
>1764	Identifier	strcpy
>1765	IdentifierDeclStatement	 
>1766	IdentifierDecl	texture_jpeg_buf [ 256 ]
>1767	PrimaryExpression	256
>1768	Identifier	texture_jpeg_buf
>1769	IdentifierDeclType	char [ 256 ]
>1789	FunctionDef	ImageData 
>1790	ParameterList	 
>1791	ReturnType	void
>1792	CompoundStatement	 
>1793	ExpressionStatement	 
>1794	AssignmentExpr	m_texture_image_loaded = true
>1795	Identifier	true
>1796	Identifier	m_texture_image_loaded
>1797	ExpressionStatement	 
>1798	AssignmentExpr	m_texture_img = img
>1799	Identifier	img
>1800	Identifier	m_texture_img
>1801	IfStatement	if ( FileExists ( texture_jpeg_buf ) )
>1802	ElseStatement	else
>1803	IfStatement	if ( FileExists ( jpeg_buf ) )
>1804	ElseStatement	else
>1805	IfStatement	if ( FileExists ( bmp_buf ) )
>1806	ElseStatement	else
>1807	CompoundStatement	 
>1808	ExpressionStatement	 
>1809	AssignmentExpr	img = img_read_pgm_file ( m_name )
>1810	CallExpression	img_read_pgm_file ( m_name )
>1811	ArgumentList	m_name
>1812	Argument	m_name
>1813	Identifier	m_name
>1814	Callee	img_read_pgm_file
>1815	Identifier	img_read_pgm_file
>1816	Identifier	img
>1817	CompoundStatement	 
>1818	ExpressionStatement	 
>1819	AssignmentExpr	img = img_read_bmp_file ( bmp_buf )
>1820	CallExpression	img_read_bmp_file ( bmp_buf )
>1821	ArgumentList	bmp_buf
>1822	Argument	bmp_buf
>1823	Identifier	bmp_buf
>1824	Callee	img_read_bmp_file
>1825	Identifier	img_read_bmp_file
>1826	Identifier	img
>1827	Condition	 
>1828	CallExpression	FileExists ( bmp_buf )
>1829	ArgumentList	bmp_buf
>1830	Argument	bmp_buf
>1831	Identifier	bmp_buf
>1832	Callee	FileExists
>1833	Identifier	FileExists
>1834	CompoundStatement	 
>1835	ExpressionStatement	 
>1836	AssignmentExpr	img = LoadJPEG ( jpeg_buf )
>1837	CallExpression	LoadJPEG ( jpeg_buf )
>1838	ArgumentList	jpeg_buf
>1839	Argument	jpeg_buf
>1840	Identifier	jpeg_buf
>1841	Callee	LoadJPEG
>1842	Identifier	LoadJPEG
>1843	Identifier	img
>1844	Condition	 
>1845	CallExpression	FileExists ( jpeg_buf )
>1846	ArgumentList	jpeg_buf
>1847	Argument	jpeg_buf
>1848	Identifier	jpeg_buf
>1849	Callee	FileExists
>1850	Identifier	FileExists
>1851	CompoundStatement	 
>1852	ExpressionStatement	 
>1853	AssignmentExpr	img = LoadJPEG ( texture_jpeg_buf )
>1854	CallExpression	LoadJPEG ( texture_jpeg_buf )
>1855	ArgumentList	texture_jpeg_buf
>1856	Argument	texture_jpeg_buf
>1857	Identifier	texture_jpeg_buf
>1858	Callee	LoadJPEG
>1859	Identifier	LoadJPEG
>1860	Identifier	img
>1861	Condition	 
>1862	CallExpression	FileExists ( texture_jpeg_buf )
>1863	ArgumentList	texture_jpeg_buf
>1864	Argument	texture_jpeg_buf
>1865	Identifier	texture_jpeg_buf
>1866	Callee	FileExists
>1867	Identifier	FileExists
>1868	IdentifierDeclStatement	 
>1869	IdentifierDecl	* img
>1870	Identifier	img
>1871	IdentifierDeclType	img_t *
>1872	ExpressionStatement	 
>1873	AssignmentExpr	bmp_buf [ strlen ( m_name ) - 1 ] = 'p'
>1874	PrimaryExpression	'p'
>1875	ArrayIndexing	bmp_buf [ strlen ( m_name ) - 1 ]
>1876	AdditiveExpression	strlen ( m_name ) - 1
>1877	PrimaryExpression	1
>1878	CallExpression	strlen ( m_name )
>1879	ArgumentList	m_name
>1880	Argument	m_name
>1881	Identifier	m_name
>1882	Callee	strlen
>1883	Identifier	strlen
>1884	Identifier	bmp_buf
>1885	ExpressionStatement	 
>1886	AssignmentExpr	bmp_buf [ strlen ( m_name ) - 2 ] = 'm'
>1887	PrimaryExpression	'm'
>1888	ArrayIndexing	bmp_buf [ strlen ( m_name ) - 2 ]
>1889	AdditiveExpression	strlen ( m_name ) - 2
>1890	PrimaryExpression	2
>1891	CallExpression	strlen ( m_name )
>1892	ArgumentList	m_name
>1893	Argument	m_name
>1894	Identifier	m_name
>1895	Callee	strlen
>1896	Identifier	strlen
>1897	Identifier	bmp_buf
>1898	ExpressionStatement	 
>1899	AssignmentExpr	bmp_buf [ strlen ( m_name ) - 3 ] = 'b'
>1900	PrimaryExpression	'b'
>1901	ArrayIndexing	bmp_buf [ strlen ( m_name ) - 3 ]
>1902	AdditiveExpression	strlen ( m_name ) - 3
>1903	PrimaryExpression	3
>1904	CallExpression	strlen ( m_name )
>1905	ArgumentList	m_name
>1906	Argument	m_name
>1907	Identifier	m_name
>1908	Callee	strlen
>1909	Identifier	strlen
>1910	Identifier	bmp_buf
>1911	ExpressionStatement	 
>1912	CallExpression	strcpy ( bmp_buf , m_name )
>1913	ArgumentList	bmp_buf
>1914	Argument	m_name
>1915	Identifier	m_name
>1916	Argument	bmp_buf
>1917	Identifier	bmp_buf
>1918	Callee	strcpy
>1919	Identifier	strcpy
>1920	IdentifierDeclStatement	 
>1921	IdentifierDecl	bmp_buf [ 256 ]
>1922	PrimaryExpression	256
>1923	Identifier	bmp_buf
>1924	IdentifierDeclType	char [ 256 ]
>1925	ExpressionStatement	 
>1926	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 1 ] = 'g'
>1927	PrimaryExpression	'g'
>1928	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 1 ]
>1929	AdditiveExpression	strlen ( m_name ) - 1
>1930	PrimaryExpression	1
>1931	CallExpression	strlen ( m_name )
>1932	ArgumentList	m_name
>1933	Argument	m_name
>1934	Identifier	m_name
>1935	Callee	strlen
>1936	Identifier	strlen
>1937	Identifier	jpeg_buf
>1938	ExpressionStatement	 
>1939	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 2 ] = 'p'
>1940	PrimaryExpression	'p'
>1941	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 2 ]
>1942	AdditiveExpression	strlen ( m_name ) - 2
>1943	PrimaryExpression	2
>1944	CallExpression	strlen ( m_name )
>1945	ArgumentList	m_name
>1946	Argument	m_name
>1947	Identifier	m_name
>1948	Callee	strlen
>1949	Identifier	strlen
>1950	Identifier	jpeg_buf
>1951	ExpressionStatement	 
>1952	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 3 ] = 'j'
>1953	PrimaryExpression	'j'
>1954	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 3 ]
>1955	AdditiveExpression	strlen ( m_name ) - 3
>1956	PrimaryExpression	3
>1957	CallExpression	strlen ( m_name )
>1958	ArgumentList	m_name
>1959	Argument	m_name
>1960	Identifier	m_name
>1961	Callee	strlen
>1962	Identifier	strlen
>1963	Identifier	jpeg_buf
>1964	ExpressionStatement	 
>1965	CallExpression	strcpy ( jpeg_buf , m_name )
>1966	ArgumentList	jpeg_buf
>1967	Argument	m_name
>1968	Identifier	m_name
>1969	Argument	jpeg_buf
>1970	Identifier	jpeg_buf
>1971	Callee	strcpy
>1972	Identifier	strcpy
>1973	IdentifierDeclStatement	 
>1974	IdentifierDecl	jpeg_buf [ 256 ]
>1975	PrimaryExpression	256
>1976	Identifier	jpeg_buf
>1977	IdentifierDeclType	char [ 256 ]
>1978	ExpressionStatement	 
>1979	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 8 ] = 0
>1980	PrimaryExpression	0
>1981	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 8 ]
>1982	AdditiveExpression	strlen ( m_name ) + 8
>1983	PrimaryExpression	8
>1984	CallExpression	strlen ( m_name )
>1985	ArgumentList	m_name
>1986	Argument	m_name
>1987	Identifier	m_name
>1988	Callee	strlen
>1989	Identifier	strlen
>1990	Identifier	texture_jpeg_buf
>1991	ExpressionStatement	 
>1992	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 7 ] = 'g'
>1993	PrimaryExpression	'g'
>1994	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 7 ]
>1995	AdditiveExpression	strlen ( m_name ) + 7
>1996	PrimaryExpression	7
>1997	CallExpression	strlen ( m_name )
>1998	ArgumentList	m_name
>1999	Argument	m_name
>2000	Identifier	m_name
>2001	Callee	strlen
>2002	Identifier	strlen
>2003	Identifier	texture_jpeg_buf
>2004	ExpressionStatement	 
>2005	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 6 ] = 'p'
>2006	PrimaryExpression	'p'
>2007	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 6 ]
>2008	AdditiveExpression	strlen ( m_name ) + 6
>2009	PrimaryExpression	6
>2010	CallExpression	strlen ( m_name )
>2011	ArgumentList	m_name
>2012	Argument	m_name
>2013	Identifier	m_name
>2014	Callee	strlen
>2015	Identifier	strlen
>2016	Identifier	texture_jpeg_buf
>2017	ExpressionStatement	 
>2018	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 5 ] = 'j'
>2019	PrimaryExpression	'j'
>2020	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 5 ]
>2021	AdditiveExpression	strlen ( m_name ) + 5
>2022	PrimaryExpression	5
>2023	CallExpression	strlen ( m_name )
>2024	ArgumentList	m_name
>2025	Argument	m_name
>2026	Identifier	m_name
>2027	Callee	strlen
>2028	Identifier	strlen
>2029	Identifier	texture_jpeg_buf
>2030	ExpressionStatement	 
>2031	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 4 ] = '.'
>2032	PrimaryExpression	'.'
>2033	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 4 ]
>2034	AdditiveExpression	strlen ( m_name ) + 4
>2035	PrimaryExpression	4
>2036	CallExpression	strlen ( m_name )
>2037	ArgumentList	m_name
>2038	Argument	m_name
>2039	Identifier	m_name
>2040	Callee	strlen
>2041	Identifier	strlen
>2042	Identifier	texture_jpeg_buf
>2043	ExpressionStatement	 
>2044	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 3 ] = 'e'
>2045	PrimaryExpression	'e'
>2046	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 3 ]
>2047	AdditiveExpression	strlen ( m_name ) + 3
>2048	PrimaryExpression	3
>2049	CallExpression	strlen ( m_name )
>2050	ArgumentList	m_name
>2051	Argument	m_name
>2052	Identifier	m_name
>2053	Callee	strlen
>2054	Identifier	strlen
>2055	Identifier	texture_jpeg_buf
>2056	ExpressionStatement	 
>2057	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 2 ] = 'r'
>2058	PrimaryExpression	'r'
>2059	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 2 ]
>2060	AdditiveExpression	strlen ( m_name ) + 2
>2061	PrimaryExpression	2
>2062	CallExpression	strlen ( m_name )
>2063	ArgumentList	m_name
>2064	Argument	m_name
>2065	Identifier	m_name
>2066	Callee	strlen
>2067	Identifier	strlen
>2068	Identifier	texture_jpeg_buf
>2069	ExpressionStatement	 
>2070	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 1 ] = 'u'
>2071	PrimaryExpression	'u'
>2072	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 1 ]
>2073	AdditiveExpression	strlen ( m_name ) + 1
>2074	PrimaryExpression	1
>2075	CallExpression	strlen ( m_name )
>2076	ArgumentList	m_name
>2077	Argument	m_name
>2078	Identifier	m_name
>2079	Callee	strlen
>2080	Identifier	strlen
>2081	Identifier	texture_jpeg_buf
>2082	ExpressionStatement	 
>2083	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 0 ] = 't'
>2084	PrimaryExpression	't'
>2085	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 0 ]
>2086	AdditiveExpression	strlen ( m_name ) + 0
>2087	PrimaryExpression	0
>2088	CallExpression	strlen ( m_name )
>2089	ArgumentList	m_name
>2090	Argument	m_name
>2091	Identifier	m_name
>2092	Callee	strlen
>2093	Identifier	strlen
>2094	Identifier	texture_jpeg_buf
>2095	ExpressionStatement	 
>2096	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 1 ] = 'x'
>2097	PrimaryExpression	'x'
>2098	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 1 ]
>2099	AdditiveExpression	strlen ( m_name ) - 1
>2100	PrimaryExpression	1
>2101	CallExpression	strlen ( m_name )
>2102	ArgumentList	m_name
>2103	Argument	m_name
>2104	Identifier	m_name
>2105	Callee	strlen
>2106	Identifier	strlen
>2107	Identifier	texture_jpeg_buf
>2108	ExpressionStatement	 
>2109	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 2 ] = 'e'
>2110	PrimaryExpression	'e'
>2111	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 2 ]
>2112	AdditiveExpression	strlen ( m_name ) - 2
>2113	PrimaryExpression	2
>2114	CallExpression	strlen ( m_name )
>2115	ArgumentList	m_name
>2116	Argument	m_name
>2117	Identifier	m_name
>2118	Callee	strlen
>2119	Identifier	strlen
>2120	Identifier	texture_jpeg_buf
>2121	ExpressionStatement	 
>2122	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 3 ] = 't'
>2123	PrimaryExpression	't'
>2124	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 3 ]
>2125	AdditiveExpression	strlen ( m_name ) - 3
>2126	PrimaryExpression	3
>2127	CallExpression	strlen ( m_name )
>2128	ArgumentList	m_name
>2129	Argument	m_name
>2130	Identifier	m_name
>2131	Callee	strlen
>2132	Identifier	strlen
>2133	Identifier	texture_jpeg_buf
>2134	ExpressionStatement	 
>2135	CallExpression	strcpy ( texture_jpeg_buf , m_name )
>2136	ArgumentList	texture_jpeg_buf
>2137	Argument	m_name
>2138	Identifier	m_name
>2139	Argument	texture_jpeg_buf
>2140	Identifier	texture_jpeg_buf
>2141	Callee	strcpy
>2142	Identifier	strcpy
>2143	IdentifierDeclStatement	 
>2144	IdentifierDecl	texture_jpeg_buf [ 256 ]
>2145	PrimaryExpression	256
>2146	Identifier	texture_jpeg_buf
>2147	IdentifierDeclType	char [ 256 ]
>2168	FunctionDef	ImageData 
>2169	ParameterList	 
>2170	ReturnType	void
>2171	CompoundStatement	 
>2172	ExpressionStatement	 
>2173	AssignmentExpr	m_texture_image_loaded = false
>2174	Identifier	false
>2175	Identifier	m_texture_image_loaded
>2176	ExpressionStatement	 
>2177	CallExpression	img_free ( m_back_texture_img )
>2178	ArgumentList	m_back_texture_img
>2179	Argument	m_back_texture_img
>2180	Identifier	m_back_texture_img
>2181	Callee	img_free
>2182	Identifier	img_free
>2189	FunctionDef	ImageData 
>2190	ParameterList	 
>2191	ReturnType	void
>2192	CompoundStatement	 
>2193	ExpressionStatement	 
>2194	AssignmentExpr	m_texture_image_loaded = false
>2195	Identifier	false
>2196	Identifier	m_texture_image_loaded
>2197	ExpressionStatement	 
>2198	CallExpression	img_free ( m_texture_img )
>2199	ArgumentList	m_texture_img
>2200	Argument	m_texture_img
>2201	Identifier	m_texture_img
>2202	Callee	img_free
>2203	Identifier	img_free
>2204	IfStatement	if ( ! m_texture_image_loaded )
>2205	CompoundStatement	 
>2206	ReturnStatement	 
>2207	ExpressionStatement	 
>2208	CallExpression	printf ( \"[ImageData
>2209	ArgumentList	\"[ImageData
>2210	Argument	\"[ImageData
>2211	PrimaryExpression	\"[ImageData
>2212	Callee	printf
>2213	Identifier	printf
>2214	Condition	 
>2215	UnaryOp	! m_texture_image_loaded
>2216	Identifier	m_texture_image_loaded
>2217	UnaryOperator	!
>2224	FunctionDef	ImageData 
>2225	ParameterList	 
>2226	ReturnType	bool
>2227	CompoundStatement	 
>2228	IfStatement	if ( FileExists ( texture_jpeg_buf ) )
>2229	ElseStatement	else
>2230	CompoundStatement	 
>2231	ReturnStatement	 
>2232	Identifier	false
>2233	CompoundStatement	 
>2234	ReturnStatement	 
>2235	Identifier	true
>2236	Condition	 
>2237	CallExpression	FileExists ( texture_jpeg_buf )
>2238	ArgumentList	texture_jpeg_buf
>2239	Argument	texture_jpeg_buf
>2240	Identifier	texture_jpeg_buf
>2241	Callee	FileExists
>2242	Identifier	FileExists
>2243	ExpressionStatement	 
>2244	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 8 ] = 0
>2245	PrimaryExpression	0
>2246	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 8 ]
>2247	AdditiveExpression	strlen ( m_name ) + 8
>2248	PrimaryExpression	8
>2249	CallExpression	strlen ( m_name )
>2250	ArgumentList	m_name
>2251	Argument	m_name
>2252	Identifier	m_name
>2253	Callee	strlen
>2254	Identifier	strlen
>2255	Identifier	texture_jpeg_buf
>2256	ExpressionStatement	 
>2257	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 7 ] = 'g'
>2258	PrimaryExpression	'g'
>2259	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 7 ]
>2260	AdditiveExpression	strlen ( m_name ) + 7
>2261	PrimaryExpression	7
>2262	CallExpression	strlen ( m_name )
>2263	ArgumentList	m_name
>2264	Argument	m_name
>2265	Identifier	m_name
>2266	Callee	strlen
>2267	Identifier	strlen
>2268	Identifier	texture_jpeg_buf
>2269	ExpressionStatement	 
>2270	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 6 ] = 'p'
>2271	PrimaryExpression	'p'
>2272	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 6 ]
>2273	AdditiveExpression	strlen ( m_name ) + 6
>2274	PrimaryExpression	6
>2275	CallExpression	strlen ( m_name )
>2276	ArgumentList	m_name
>2277	Argument	m_name
>2278	Identifier	m_name
>2279	Callee	strlen
>2280	Identifier	strlen
>2281	Identifier	texture_jpeg_buf
>2282	ExpressionStatement	 
>2283	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 5 ] = 'j'
>2284	PrimaryExpression	'j'
>2285	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 5 ]
>2286	AdditiveExpression	strlen ( m_name ) + 5
>2287	PrimaryExpression	5
>2288	CallExpression	strlen ( m_name )
>2289	ArgumentList	m_name
>2290	Argument	m_name
>2291	Identifier	m_name
>2292	Callee	strlen
>2293	Identifier	strlen
>2294	Identifier	texture_jpeg_buf
>2295	ExpressionStatement	 
>2296	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 4 ] = '.'
>2297	PrimaryExpression	'.'
>2298	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 4 ]
>2299	AdditiveExpression	strlen ( m_name ) + 4
>2300	PrimaryExpression	4
>2301	CallExpression	strlen ( m_name )
>2302	ArgumentList	m_name
>2303	Argument	m_name
>2304	Identifier	m_name
>2305	Callee	strlen
>2306	Identifier	strlen
>2307	Identifier	texture_jpeg_buf
>2308	ExpressionStatement	 
>2309	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 3 ] = 'e'
>2310	PrimaryExpression	'e'
>2311	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 3 ]
>2312	AdditiveExpression	strlen ( m_name ) + 3
>2313	PrimaryExpression	3
>2314	CallExpression	strlen ( m_name )
>2315	ArgumentList	m_name
>2316	Argument	m_name
>2317	Identifier	m_name
>2318	Callee	strlen
>2319	Identifier	strlen
>2320	Identifier	texture_jpeg_buf
>2321	ExpressionStatement	 
>2322	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 2 ] = 'r'
>2323	PrimaryExpression	'r'
>2324	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 2 ]
>2325	AdditiveExpression	strlen ( m_name ) + 2
>2326	PrimaryExpression	2
>2327	CallExpression	strlen ( m_name )
>2328	ArgumentList	m_name
>2329	Argument	m_name
>2330	Identifier	m_name
>2331	Callee	strlen
>2332	Identifier	strlen
>2333	Identifier	texture_jpeg_buf
>2334	ExpressionStatement	 
>2335	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 1 ] = 'u'
>2336	PrimaryExpression	'u'
>2337	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 1 ]
>2338	AdditiveExpression	strlen ( m_name ) + 1
>2339	PrimaryExpression	1
>2340	CallExpression	strlen ( m_name )
>2341	ArgumentList	m_name
>2342	Argument	m_name
>2343	Identifier	m_name
>2344	Callee	strlen
>2345	Identifier	strlen
>2346	Identifier	texture_jpeg_buf
>2347	ExpressionStatement	 
>2348	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) + 0 ] = 't'
>2349	PrimaryExpression	't'
>2350	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) + 0 ]
>2351	AdditiveExpression	strlen ( m_name ) + 0
>2352	PrimaryExpression	0
>2353	CallExpression	strlen ( m_name )
>2354	ArgumentList	m_name
>2355	Argument	m_name
>2356	Identifier	m_name
>2357	Callee	strlen
>2358	Identifier	strlen
>2359	Identifier	texture_jpeg_buf
>2360	ExpressionStatement	 
>2361	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 1 ] = 'x'
>2362	PrimaryExpression	'x'
>2363	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 1 ]
>2364	AdditiveExpression	strlen ( m_name ) - 1
>2365	PrimaryExpression	1
>2366	CallExpression	strlen ( m_name )
>2367	ArgumentList	m_name
>2368	Argument	m_name
>2369	Identifier	m_name
>2370	Callee	strlen
>2371	Identifier	strlen
>2372	Identifier	texture_jpeg_buf
>2373	ExpressionStatement	 
>2374	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 2 ] = 'e'
>2375	PrimaryExpression	'e'
>2376	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 2 ]
>2377	AdditiveExpression	strlen ( m_name ) - 2
>2378	PrimaryExpression	2
>2379	CallExpression	strlen ( m_name )
>2380	ArgumentList	m_name
>2381	Argument	m_name
>2382	Identifier	m_name
>2383	Callee	strlen
>2384	Identifier	strlen
>2385	Identifier	texture_jpeg_buf
>2386	ExpressionStatement	 
>2387	AssignmentExpr	texture_jpeg_buf [ strlen ( m_name ) - 3 ] = 't'
>2388	PrimaryExpression	't'
>2389	ArrayIndexing	texture_jpeg_buf [ strlen ( m_name ) - 3 ]
>2390	AdditiveExpression	strlen ( m_name ) - 3
>2391	PrimaryExpression	3
>2392	CallExpression	strlen ( m_name )
>2393	ArgumentList	m_name
>2394	Argument	m_name
>2395	Identifier	m_name
>2396	Callee	strlen
>2397	Identifier	strlen
>2398	Identifier	texture_jpeg_buf
>2399	ExpressionStatement	 
>2400	CallExpression	strcpy ( texture_jpeg_buf , m_name )
>2401	ArgumentList	texture_jpeg_buf
>2402	Argument	m_name
>2403	Identifier	m_name
>2404	Argument	texture_jpeg_buf
>2405	Identifier	texture_jpeg_buf
>2406	Callee	strcpy
>2407	Identifier	strcpy
>2408	IdentifierDeclStatement	 
>2409	IdentifierDecl	texture_jpeg_buf [ 256 ]
>2410	PrimaryExpression	256
>2411	Identifier	texture_jpeg_buf
>2412	IdentifierDeclType	char [ 256 ]
>2424	FunctionDef	ImageData 
>2425	ParameterList	 
>2426	ReturnType	void
>2427	CompoundStatement	 
>2428	ExpressionStatement	 
>2429	CallExpression	LoadTextureImage ( m_thumb , m_thumb_texture_index , m_thumb_bounds )
>2430	ArgumentList	m_thumb
>2431	Argument	m_thumb_bounds
>2432	Identifier	m_thumb_bounds
>2433	Argument	m_thumb_texture_index
>2434	Identifier	m_thumb_texture_index
>2435	Argument	m_thumb
>2436	Identifier	m_thumb
>2437	Callee	LoadTextureImage
>2438	Identifier	LoadTextureImage
>2439	ExpressionStatement	 
>2440	CallExpression	LoadFloatingThumbnail ( )
>2441	ArgumentList	 
>2442	Callee	LoadFloatingThumbnail
>2443	Identifier	LoadFloatingThumbnail
>2444	IfStatement	if ( m_thumb != NULL )
>2445	ReturnStatement	 
>2446	Condition	 
>2447	EqualityExpression	m_thumb != NULL
>2448	Identifier	NULL
>2449	Identifier	m_thumb
>2457	FunctionDef	ImageData 
>2458	ParameterList	 
>2459	ReturnType	void
>2460	CompoundStatement	 
>2461	ExpressionStatement	 
>2462	CallExpression	img_write_bmp_file ( m_thumb , thumb_bmp_buf )
>2463	ArgumentList	m_thumb
>2464	Argument	thumb_bmp_buf
>2465	Identifier	thumb_bmp_buf
>2466	Argument	m_thumb
>2467	Identifier	m_thumb
>2468	Callee	img_write_bmp_file
>2469	Identifier	img_write_bmp_file
>2470	ExpressionStatement	 
>2471	CallExpression	img_free ( img )
>2472	ArgumentList	img
>2473	Argument	img
>2474	Identifier	img
>2475	Callee	img_free
>2476	Identifier	img_free
>2477	ExpressionStatement	 
>2478	AssignmentExpr	m_thumb = thumb
>2479	Identifier	thumb
>2480	Identifier	m_thumb
>2481	IdentifierDeclStatement	 
>2482	IdentifierDecl	* thumb = img_scale_fast ( img , 4 )
>2483	AssignmentExpr	* thumb = img_scale_fast ( img , 4 )
>2484	CallExpression	img_scale_fast ( img , 4 )
>2485	ArgumentList	img
>2486	Argument	4
>2487	PrimaryExpression	4
>2488	Argument	img
>2489	Identifier	img
>2490	Callee	img_scale_fast
>2491	Identifier	img_scale_fast
>2492	Identifier	thumb
>2493	Identifier	thumb
>2494	IdentifierDeclType	img_t *
>2495	IdentifierDeclStatement	 
>2496	IdentifierDecl	* img = UndistortImage ( 0.0 , 0.0 )
>2497	AssignmentExpr	* img = UndistortImage ( 0.0 , 0.0 )
>2498	CallExpression	UndistortImage ( 0.0 , 0.0 )
>2499	ArgumentList	0.0
>2500	Argument	0.0
>2501	PrimaryExpression	0.0
>2502	Argument	0.0
>2503	PrimaryExpression	0.0
>2504	Callee	UndistortImage
>2505	Identifier	UndistortImage
>2506	Identifier	img
>2507	Identifier	img
>2508	IdentifierDeclType	img_t *
>2509	IfStatement	if ( m_thumb != NULL )
>2510	CompoundStatement	 
>2511	ReturnStatement	 
>2512	IfStatement	if ( m_thumb -> w >= 512 || m_thumb -> h >= 512 )
>2513	CompoundStatement	 
>2514	ExpressionStatement	 
>2515	AssignmentExpr	m_thumb = thumb_new
>2516	Identifier	thumb_new
>2517	Identifier	m_thumb
>2518	ExpressionStatement	 
>2519	CallExpression	img_free ( m_thumb )
>2520	ArgumentList	m_thumb
>2521	Argument	m_thumb
>2522	Identifier	m_thumb
>2523	Callee	img_free
>2524	Identifier	img_free
>2525	IdentifierDeclStatement	 
>2526	IdentifierDecl	* thumb_new = img_scale_fast ( m_thumb , scale )
>2527	AssignmentExpr	* thumb_new = img_scale_fast ( m_thumb , scale )
>2528	CallExpression	img_scale_fast ( m_thumb , scale )
>2529	ArgumentList	m_thumb
>2530	Argument	scale
>2531	Identifier	scale
>2532	Argument	m_thumb
>2533	Identifier	m_thumb
>2534	Callee	img_scale_fast
>2535	Identifier	img_scale_fast
>2536	Identifier	thumb_new
>2537	Identifier	thumb_new
>2538	IdentifierDeclType	img_t *
>2539	WhileStatement	while ( m_thumb -> w / scale >= 512 || m_thumb -> h / scale >= 512 )
>2540	ExpressionStatement	 
>2541	AssignmentExpr	scale *= 2
>2542	PrimaryExpression	2
>2543	Identifier	scale
>2544	Condition	 
>2545	OrExpression	m_thumb -> w / scale >= 512 || m_thumb -> h / scale >= 512
>2546	RelationalExpression	m_thumb -> h / scale >= 512
>2547	PrimaryExpression	512
>2548	MultiplicativeExpression	m_thumb -> h / scale
>2549	Identifier	scale
>2550	PtrMemberAccess	m_thumb -> h
>2551	Identifier	h
>2552	Identifier	m_thumb
>2553	RelationalExpression	m_thumb -> w / scale >= 512
>2554	PrimaryExpression	512
>2555	MultiplicativeExpression	m_thumb -> w / scale
>2556	Identifier	scale
>2557	PtrMemberAccess	m_thumb -> w
>2558	Identifier	w
>2559	Identifier	m_thumb
>2560	IdentifierDeclStatement	 
>2561	IdentifierDecl	scale = 1
>2562	AssignmentExpr	scale = 1
>2563	PrimaryExpression	1
>2564	Identifier	scale
>2565	Identifier	scale
>2566	IdentifierDeclType	int
>2567	Condition	 
>2568	OrExpression	m_thumb -> w >= 512 || m_thumb -> h >= 512
>2569	RelationalExpression	m_thumb -> h >= 512
>2570	PrimaryExpression	512
>2571	PtrMemberAccess	m_thumb -> h
>2572	Identifier	h
>2573	Identifier	m_thumb
>2574	RelationalExpression	m_thumb -> w >= 512
>2575	PrimaryExpression	512
>2576	PtrMemberAccess	m_thumb -> w
>2577	Identifier	w
>2578	Identifier	m_thumb
>2579	Condition	 
>2580	EqualityExpression	m_thumb != NULL
>2581	Identifier	NULL
>2582	Identifier	m_thumb
>2583	IfStatement	if ( FileExists ( thumb_bmp_buf ) )
>2584	CompoundStatement	 
>2585	ExpressionStatement	 
>2586	AssignmentExpr	m_thumb = img_read_bmp_file ( thumb_bmp_buf )
>2587	CallExpression	img_read_bmp_file ( thumb_bmp_buf )
>2588	ArgumentList	thumb_bmp_buf
>2589	Argument	thumb_bmp_buf
>2590	Identifier	thumb_bmp_buf
>2591	Callee	img_read_bmp_file
>2592	Identifier	img_read_bmp_file
>2593	Identifier	m_thumb
>2594	Condition	 
>2595	CallExpression	FileExists ( thumb_bmp_buf )
>2596	ArgumentList	thumb_bmp_buf
>2597	Argument	thumb_bmp_buf
>2598	Identifier	thumb_bmp_buf
>2599	Callee	FileExists
>2600	Identifier	FileExists
>2601	IfStatement	if ( FileExists ( thumb_jpg_buf ) )
>2602	CompoundStatement	 
>2603	ExpressionStatement	 
>2604	AssignmentExpr	m_thumb = LoadJPEG ( thumb_jpg_buf )
>2605	CallExpression	LoadJPEG ( thumb_jpg_buf )
>2606	ArgumentList	thumb_jpg_buf
>2607	Argument	thumb_jpg_buf
>2608	Identifier	thumb_jpg_buf
>2609	Callee	LoadJPEG
>2610	Identifier	LoadJPEG
>2611	Identifier	m_thumb
>2612	Condition	 
>2613	CallExpression	FileExists ( thumb_jpg_buf )
>2614	ArgumentList	thumb_jpg_buf
>2615	Argument	thumb_jpg_buf
>2616	Identifier	thumb_jpg_buf
>2617	Callee	FileExists
>2618	Identifier	FileExists
>2619	ExpressionStatement	 
>2620	AssignmentExpr	m_thumb = NULL
>2621	Identifier	NULL
>2622	Identifier	m_thumb
>2623	ExpressionStatement	 
>2624	CallExpression	sprintf ( thumb_bmp_buf , \"%s.thumb.float.bmp\" , basename )
>2625	ArgumentList	thumb_bmp_buf
>2626	Argument	basename
>2627	Identifier	basename
>2628	Argument	\"%s.thumb.float.bmp\"
>2629	PrimaryExpression	\"%s.thumb.float.bmp\"
>2630	Argument	thumb_bmp_buf
>2631	Identifier	thumb_bmp_buf
>2632	Callee	sprintf
>2633	Identifier	sprintf
>2634	IdentifierDeclStatement	 
>2635	IdentifierDecl	thumb_bmp_buf [ 256 ]
>2636	PrimaryExpression	256
>2637	Identifier	thumb_bmp_buf
>2638	IdentifierDeclType	char [ 256 ]
>2639	ExpressionStatement	 
>2640	CallExpression	sprintf ( thumb_jpg_buf , \"%s.thumb.float.jpg\" , basename )
>2641	ArgumentList	thumb_jpg_buf
>2642	Argument	basename
>2643	Identifier	basename
>2644	Argument	\"%s.thumb.float.jpg\"
>2645	PrimaryExpression	\"%s.thumb.float.jpg\"
>2646	Argument	thumb_jpg_buf
>2647	Identifier	thumb_jpg_buf
>2648	Callee	sprintf
>2649	Identifier	sprintf
>2650	IdentifierDeclStatement	 
>2651	IdentifierDecl	thumb_jpg_buf [ 256 ]
>2652	PrimaryExpression	256
>2653	Identifier	thumb_jpg_buf
>2654	IdentifierDeclType	char [ 256 ]
>2655	ExpressionStatement	 
>2656	AssignmentExpr	basename [ strlen ( basename ) - 4 ] = 0
>2657	PrimaryExpression	0
>2658	ArrayIndexing	basename [ strlen ( basename ) - 4 ]
>2659	AdditiveExpression	strlen ( basename ) - 4
>2660	PrimaryExpression	4
>2661	CallExpression	strlen ( basename )
>2662	ArgumentList	basename
>2663	Argument	basename
>2664	Identifier	basename
>2665	Callee	strlen
>2666	Identifier	strlen
>2667	Identifier	basename
>2668	ExpressionStatement	 
>2669	CallExpression	strcpy ( basename , m_name )
>2670	ArgumentList	basename
>2671	Argument	m_name
>2672	Identifier	m_name
>2673	Argument	basename
>2674	Identifier	basename
>2675	Callee	strcpy
>2676	Identifier	strcpy
>2677	IdentifierDeclStatement	 
>2678	IdentifierDecl	basename [ 256 ]
>2679	PrimaryExpression	256
>2680	Identifier	basename
>2681	IdentifierDeclType	char [ 256 ]
>2682	ExpressionStatement	 
>2683	CallExpression	printf ( \"Loading floating thumb\n\" )
>2684	ArgumentList	\"Loading floating thumb\n\"
>2685	Argument	\"Loading floating thumb\n\"
>2686	PrimaryExpression	\"Loading floating thumb\n\"
>2687	Callee	printf
>2688	Identifier	printf
>2713	FunctionDef	ImageData 
>2714	ParameterList	 
>2715	ReturnType	void
>2716	CompoundStatement	 
>2717	ExpressionStatement	 
>2718	CallExpression	img_write_bmp_file ( m_thumb256 , thumb_bmp_buf )
>2719	ArgumentList	m_thumb256
>2720	Argument	thumb_bmp_buf
>2721	Identifier	thumb_bmp_buf
>2722	Argument	m_thumb256
>2723	Identifier	m_thumb256
>2724	Callee	img_write_bmp_file
>2725	Identifier	img_write_bmp_file
>2726	ExpressionStatement	 
>2727	CallExpression	UnloadImage ( )
>2728	ArgumentList	 
>2729	Callee	UnloadImage
>2730	Identifier	UnloadImage
>2731	ExpressionStatement	 
>2732	AssignmentExpr	m_thumb256 = thumb256
>2733	Identifier	thumb256
>2734	Identifier	m_thumb256
>2735	IdentifierDeclStatement	 
>2736	IdentifierDecl	* thumb256 = RescaleImage ( m_img , 256 , scale )
>2737	AssignmentExpr	* thumb256 = RescaleImage ( m_img , 256 , scale )
>2738	CallExpression	RescaleImage ( m_img , 256 , scale )
>2739	ArgumentList	m_img
>2740	Argument	scale
>2741	Identifier	scale
>2742	Argument	256
>2743	PrimaryExpression	256
>2744	Argument	m_img
>2745	Identifier	m_img
>2746	Callee	RescaleImage
>2747	Identifier	RescaleImage
>2748	Identifier	thumb256
>2749	Identifier	thumb256
>2750	IdentifierDeclType	img_t *
>2751	IdentifierDeclStatement	 
>2752	IdentifierDecl	scale
>2753	Identifier	scale
>2754	IdentifierDeclType	double
>2755	ExpressionStatement	 
>2756	CallExpression	LoadImage ( )
>2757	ArgumentList	 
>2758	Callee	LoadImage
>2759	Identifier	LoadImage
>2760	IfStatement	if ( m_thumb256 != NULL )
>2761	CompoundStatement	 
>2762	ReturnStatement	 
>2763	Condition	 
>2764	EqualityExpression	m_thumb256 != NULL
>2765	Identifier	NULL
>2766	Identifier	m_thumb256
>2767	IfStatement	if ( FileExists ( thumb_bmp_buf ) )
>2768	CompoundStatement	 
>2769	ExpressionStatement	 
>2770	AssignmentExpr	m_thumb256 = img_read_bmp_file ( thumb_bmp_buf )
>2771	CallExpression	img_read_bmp_file ( thumb_bmp_buf )
>2772	ArgumentList	thumb_bmp_buf
>2773	Argument	thumb_bmp_buf
>2774	Identifier	thumb_bmp_buf
>2775	Callee	img_read_bmp_file
>2776	Identifier	img_read_bmp_file
>2777	Identifier	m_thumb256
>2778	Condition	 
>2779	CallExpression	FileExists ( thumb_bmp_buf )
>2780	ArgumentList	thumb_bmp_buf
>2781	Argument	thumb_bmp_buf
>2782	Identifier	thumb_bmp_buf
>2783	Callee	FileExists
>2784	Identifier	FileExists
>2785	IfStatement	if ( FileExists ( thumb_jpg_buf ) )
>2786	CompoundStatement	 
>2787	ExpressionStatement	 
>2788	AssignmentExpr	m_thumb256 = LoadJPEG ( thumb_jpg_buf )
>2789	CallExpression	LoadJPEG ( thumb_jpg_buf )
>2790	ArgumentList	thumb_jpg_buf
>2791	Argument	thumb_jpg_buf
>2792	Identifier	thumb_jpg_buf
>2793	Callee	LoadJPEG
>2794	Identifier	LoadJPEG
>2795	Identifier	m_thumb256
>2796	Condition	 
>2797	CallExpression	FileExists ( thumb_jpg_buf )
>2798	ArgumentList	thumb_jpg_buf
>2799	Argument	thumb_jpg_buf
>2800	Identifier	thumb_jpg_buf
>2801	Callee	FileExists
>2802	Identifier	FileExists
>2803	ExpressionStatement	 
>2804	AssignmentExpr	m_thumb256 = NULL
>2805	Identifier	NULL
>2806	Identifier	m_thumb256
>2807	ExpressionStatement	 
>2808	CallExpression	sprintf ( thumb_bmp_buf , \"%s.thumb256.bmp\" , basename )
>2809	ArgumentList	thumb_bmp_buf
>2810	Argument	basename
>2811	Identifier	basename
>2812	Argument	\"%s.thumb256.bmp\"
>2813	PrimaryExpression	\"%s.thumb256.bmp\"
>2814	Argument	thumb_bmp_buf
>2815	Identifier	thumb_bmp_buf
>2816	Callee	sprintf
>2817	Identifier	sprintf
>2818	IdentifierDeclStatement	 
>2819	IdentifierDecl	thumb_bmp_buf [ 256 ]
>2820	PrimaryExpression	256
>2821	Identifier	thumb_bmp_buf
>2822	IdentifierDeclType	char [ 256 ]
>2823	ExpressionStatement	 
>2824	CallExpression	sprintf ( thumb_jpg_buf , \"%s.thumb256.jpg\" , basename )
>2825	ArgumentList	thumb_jpg_buf
>2826	Argument	basename
>2827	Identifier	basename
>2828	Argument	\"%s.thumb256.jpg\"
>2829	PrimaryExpression	\"%s.thumb256.jpg\"
>2830	Argument	thumb_jpg_buf
>2831	Identifier	thumb_jpg_buf
>2832	Callee	sprintf
>2833	Identifier	sprintf
>2834	IdentifierDeclStatement	 
>2835	IdentifierDecl	thumb_jpg_buf [ 256 ]
>2836	PrimaryExpression	256
>2837	Identifier	thumb_jpg_buf
>2838	IdentifierDeclType	char [ 256 ]
>2839	ExpressionStatement	 
>2840	AssignmentExpr	basename [ strlen ( basename ) - 4 ] = 0
>2841	PrimaryExpression	0
>2842	ArrayIndexing	basename [ strlen ( basename ) - 4 ]
>2843	AdditiveExpression	strlen ( basename ) - 4
>2844	PrimaryExpression	4
>2845	CallExpression	strlen ( basename )
>2846	ArgumentList	basename
>2847	Argument	basename
>2848	Identifier	basename
>2849	Callee	strlen
>2850	Identifier	strlen
>2851	Identifier	basename
>2852	ExpressionStatement	 
>2853	CallExpression	strcpy ( basename , m_name )
>2854	ArgumentList	basename
>2855	Argument	m_name
>2856	Identifier	m_name
>2857	Argument	basename
>2858	Identifier	basename
>2859	Callee	strcpy
>2860	Identifier	strcpy
>2861	IdentifierDeclStatement	 
>2862	IdentifierDecl	basename [ 256 ]
>2863	PrimaryExpression	256
>2864	Identifier	basename
>2865	IdentifierDeclType	char [ 256 ]
>2885	FunctionDef	ImageData 
>2886	ParameterList	 
>2887	ReturnType	void
>2888	CompoundStatement	 
>2889	ExpressionStatement	 
>2890	AssignmentExpr	m_thumb_texture_index = - 1
>2891	UnaryOp	- 1
>2892	PrimaryExpression	1
>2893	UnaryOperator	-
>2894	Identifier	m_thumb_texture_index
>2895	ExpressionStatement	 
>2896	AssignmentExpr	m_thumb = NULL
>2897	Identifier	NULL
>2898	Identifier	m_thumb
>2899	IfStatement	if ( m_thumb != NULL )
>2900	ExpressionStatement	 
>2901	CallExpression	img_free ( m_thumb )
>2902	ArgumentList	m_thumb
>2903	Argument	m_thumb
>2904	Identifier	m_thumb
>2905	Callee	img_free
>2906	Identifier	img_free
>2907	Condition	 
>2908	EqualityExpression	m_thumb != NULL
>2909	Identifier	NULL
>2910	Identifier	m_thumb
>2917	FunctionDef	ImageData 
>2918	ParameterList	 
>2919	ReturnType	void
>2920	CompoundStatement	 
>2921	ExpressionStatement	 
>2922	CallExpression	LoadTextureImage ( m_thumb_fixed , m_thumb_fixed_texture_index , m_thumb_fixed_bounds )
>2923	ArgumentList	m_thumb_fixed
>2924	Argument	m_thumb_fixed_bounds
>2925	Identifier	m_thumb_fixed_bounds
>2926	Argument	m_thumb_fixed_texture_index
>2927	Identifier	m_thumb_fixed_texture_index
>2928	Argument	m_thumb_fixed
>2929	Identifier	m_thumb_fixed
>2930	Callee	LoadTextureImage
>2931	Identifier	LoadTextureImage
>2932	ExpressionStatement	 
>2933	CallExpression	LoadFixedThumbnail ( 128 , 128 , m_rotation )
>2934	ArgumentList	128
>2935	Argument	m_rotation
>2936	Identifier	m_rotation
>2937	Argument	128
>2938	PrimaryExpression	128
>2939	Argument	128
>2940	PrimaryExpression	128
>2941	Callee	LoadFixedThumbnail
>2942	Identifier	LoadFixedThumbnail
>2943	IfStatement	if ( m_thumb_fixed != NULL )
>2944	ReturnStatement	 
>2945	Condition	 
>2946	EqualityExpression	m_thumb_fixed != NULL
>2947	Identifier	NULL
>2948	Identifier	m_thumb_fixed
>2957	FunctionDef	ImageData 
>2958	ParameterList	int w_max , int h_max , int rotation
>2959	Parameter	 
>2960	Identifier	rotation
>2961	ParameterType	int
>2962	Parameter	 
>2963	Identifier	h_max
>2964	ParameterType	int
>2965	Parameter	 
>2966	Identifier	w_max
>2967	ParameterType	int
>2968	ReturnType	void
>2969	CompoundStatement	 
>2970	ExpressionStatement	 
>2971	CallExpression	img_write_bmp_file ( m_thumb_fixed , thumb_bmp_buf )
>2972	ArgumentList	m_thumb_fixed
>2973	Argument	thumb_bmp_buf
>2974	Identifier	thumb_bmp_buf
>2975	Argument	m_thumb_fixed
>2976	Identifier	m_thumb_fixed
>2977	Callee	img_write_bmp_file
>2978	Identifier	img_write_bmp_file
>2979	ExpressionStatement	 
>2980	CallExpression	img_free ( img )
>2981	ArgumentList	img
>2982	Argument	img
>2983	Identifier	img
>2984	Callee	img_free
>2985	Identifier	img_free
>2986	ExpressionStatement	 
>2987	AssignmentExpr	m_thumb_fixed = thumb
>2988	Identifier	thumb
>2989	Identifier	m_thumb_fixed
>2990	ForStatement	for ( int y = 0 ; y < w_max ; y ++ )
>2991	CompoundStatement	 
>2992	ForStatement	for ( int x = 0 ; x < h_max ; x ++ )
>2993	CompoundStatement	 
>2994	IfStatement	if ( x < x_start || y < y_start )
>2995	ElseStatement	else
>2996	IfStatement	if ( x >= x_end || y >= y_end )
>2997	ElseStatement	else
>2998	CompoundStatement	 
>2999	ExpressionStatement	 
>3000	CallExpression	img_set_pixel ( thumb , x , y , c . r , c . g , c . b )
>3001	ArgumentList	thumb
>3002	Argument	c . b
>3003	MemberAccess	c . b
>3004	Identifier	b
>3005	Identifier	c
>3006	Argument	c . g
>3007	MemberAccess	c . g
>3008	Identifier	g
>3009	Identifier	c
>3010	Argument	c . r
>3011	MemberAccess	c . r
>3012	Identifier	r
>3013	Identifier	c
>3014	Argument	y
>3015	Identifier	y
>3016	Argument	x
>3017	Identifier	x
>3018	Argument	thumb
>3019	Identifier	thumb
>3020	Callee	img_set_pixel
>3021	Identifier	img_set_pixel
>3022	IdentifierDeclStatement	 
>3023	IdentifierDecl	c = img_get_pixel ( scaled , x - x_start , y - y_start )
>3024	AssignmentExpr	c = img_get_pixel ( scaled , x - x_start , y - y_start )
>3025	CallExpression	img_get_pixel ( scaled , x - x_start , y - y_start )
>3026	ArgumentList	scaled
>3027	Argument	y - y_start
>3028	AdditiveExpression	y - y_start
>3029	Identifier	y_start
>3030	Identifier	y
>3031	Argument	x - x_start
>3032	AdditiveExpression	x - x_start
>3033	Identifier	x_start
>3034	Identifier	x
>3035	Argument	scaled
>3036	Identifier	scaled
>3037	Callee	img_get_pixel
>3038	Identifier	img_get_pixel
>3039	Identifier	c
>3040	Identifier	c
>3041	IdentifierDeclType	color_t
>3042	CompoundStatement	 
>3043	ExpressionStatement	 
>3044	CallExpression	img_set_pixel ( thumb , x , y , 0x0 , 0x0 , 0x0 )
>3045	ArgumentList	thumb
>3046	Argument	0x0
>3047	PrimaryExpression	0x0
>3048	Argument	0x0
>3049	PrimaryExpression	0x0
>3050	Argument	0x0
>3051	PrimaryExpression	0x0
>3052	Argument	y
>3053	Identifier	y
>3054	Argument	x
>3055	Identifier	x
>3056	Argument	thumb
>3057	Identifier	thumb
>3058	Callee	img_set_pixel
>3059	Identifier	img_set_pixel
>3060	Condition	 
>3061	OrExpression	x >= x_end || y >= y_end
>3062	RelationalExpression	y >= y_end
>3063	Identifier	y_end
>3064	Identifier	y
>3065	RelationalExpression	x >= x_end
>3066	Identifier	x_end
>3067	Identifier	x
>3068	CompoundStatement	 
>3069	ExpressionStatement	 
>3070	CallExpression	img_set_pixel ( thumb , x , y , 0x0 , 0x0 , 0x0 )
>3071	ArgumentList	thumb
>3072	Argument	0x0
>3073	PrimaryExpression	0x0
>3074	Argument	0x0
>3075	PrimaryExpression	0x0
>3076	Argument	0x0
>3077	PrimaryExpression	0x0
>3078	Argument	y
>3079	Identifier	y
>3080	Argument	x
>3081	Identifier	x
>3082	Argument	thumb
>3083	Identifier	thumb
>3084	Callee	img_set_pixel
>3085	Identifier	img_set_pixel
>3086	Condition	 
>3087	OrExpression	x < x_start || y < y_start
>3088	RelationalExpression	y < y_start
>3089	Identifier	y_start
>3090	Identifier	y
>3091	RelationalExpression	x < x_start
>3092	Identifier	x_start
>3093	Identifier	x
>3094	IncDecOp	 
>3095	IncDec	++
>3096	Identifier	x
>3097	Condition	 
>3098	RelationalExpression	x < h_max
>3099	Identifier	h_max
>3100	Identifier	x
>3101	ForInit	 
>3102	IdentifierDeclStatement	int x = 0 ;
>3103	IdentifierDecl	x = 0
>3104	AssignmentExpr	x = 0
>3105	PrimaryExpression	0
>3106	Identifier	x
>3107	Identifier	x
>3108	IdentifierDeclType	int
>3109	IncDecOp	 
>3110	IncDec	++
>3111	Identifier	y
>3112	Condition	 
>3113	RelationalExpression	y < w_max
>3114	Identifier	w_max
>3115	Identifier	y
>3116	ForInit	 
>3117	IdentifierDeclStatement	int y = 0 ;
>3118	IdentifierDecl	y = 0
>3119	AssignmentExpr	y = 0
>3120	PrimaryExpression	0
>3121	Identifier	y
>3122	Identifier	y
>3123	IdentifierDeclType	int
>3124	IdentifierDeclStatement	 
>3125	IdentifierDecl	y_end = y_start + scaled -> h
>3126	AssignmentExpr	y_end = y_start + scaled -> h
>3127	AdditiveExpression	y_start + scaled -> h
>3128	PtrMemberAccess	scaled -> h
>3129	Identifier	h
>3130	Identifier	scaled
>3131	Identifier	y_start
>3132	Identifier	y_end
>3133	Identifier	y_end
>3134	IdentifierDeclType	int
>3135	IdentifierDeclStatement	 
>3136	IdentifierDecl	x_end = x_start + scaled -> w
>3137	AssignmentExpr	x_end = x_start + scaled -> w
>3138	AdditiveExpression	x_start + scaled -> w
>3139	PtrMemberAccess	scaled -> w
>3140	Identifier	w
>3141	Identifier	scaled
>3142	Identifier	x_start
>3143	Identifier	x_end
>3144	Identifier	x_end
>3145	IdentifierDeclType	int
>3146	IdentifierDeclStatement	 
>3147	IdentifierDecl	y_start = iround ( 0.5 * ( h_max - scaled -> h ) )
>3148	AssignmentExpr	y_start = iround ( 0.5 * ( h_max - scaled -> h ) )
>3149	CallExpression	iround ( 0.5 * ( h_max - scaled -> h ) )
>3150	ArgumentList	0.5 * ( h_max - scaled -> h )
>3151	Argument	0.5 * ( h_max - scaled -> h )
>3152	MultiplicativeExpression	0.5 * ( h_max - scaled -> h )
>3153	AdditiveExpression	h_max - scaled -> h
>3154	PtrMemberAccess	scaled -> h
>3155	Identifier	h
>3156	Identifier	scaled
>3157	Identifier	h_max
>3158	PrimaryExpression	0.5
>3159	Callee	iround
>3160	Identifier	iround
>3161	Identifier	y_start
>3162	Identifier	y_start
>3163	IdentifierDeclType	int
>3164	IdentifierDeclStatement	 
>3165	IdentifierDecl	x_start = iround ( 0.5 * ( w_max - scaled -> w ) )
>3166	AssignmentExpr	x_start = iround ( 0.5 * ( w_max - scaled -> w ) )
>3167	CallExpression	iround ( 0.5 * ( w_max - scaled -> w ) )
>3168	ArgumentList	0.5 * ( w_max - scaled -> w )
>3169	Argument	0.5 * ( w_max - scaled -> w )
>3170	MultiplicativeExpression	0.5 * ( w_max - scaled -> w )
>3171	AdditiveExpression	w_max - scaled -> w
>3172	PtrMemberAccess	scaled -> w
>3173	Identifier	w
>3174	Identifier	scaled
>3175	Identifier	w_max
>3176	PrimaryExpression	0.5
>3177	Callee	iround
>3178	Identifier	iround
>3179	Identifier	x_start
>3180	Identifier	x_start
>3181	IdentifierDeclType	int
>3182	IdentifierDeclStatement	 
>3183	IdentifierDecl	* thumb = img_new ( w_max , h_max )
>3184	AssignmentExpr	* thumb = img_new ( w_max , h_max )
>3185	CallExpression	img_new ( w_max , h_max )
>3186	ArgumentList	w_max
>3187	Argument	h_max
>3188	Identifier	h_max
>3189	Argument	w_max
>3190	Identifier	w_max
>3191	Callee	img_new
>3192	Identifier	img_new
>3193	Identifier	thumb
>3194	Identifier	thumb
>3195	IdentifierDeclType	img_t *
>3196	ExpressionStatement	 
>3197	CallExpression	transform_free ( T )
>3198	ArgumentList	T
>3199	Argument	T
>3200	Identifier	T
>3201	Callee	transform_free
>3202	Identifier	transform_free
>3203	ExpressionStatement	 
>3204	CallExpression	img_free ( blur )
>3205	ArgumentList	blur
>3206	Argument	blur
>3207	Identifier	blur
>3208	Callee	img_free
>3209	Identifier	img_free
>3210	IdentifierDeclStatement	 
>3211	IdentifierDecl	* scaled = img_resample_bbox ( blur , T )
>3212	AssignmentExpr	* scaled = img_resample_bbox ( blur , T )
>3213	CallExpression	img_resample_bbox ( blur , T )
>3214	ArgumentList	blur
>3215	Argument	T
>3216	Identifier	T
>3217	Argument	blur
>3218	Identifier	blur
>3219	Callee	img_resample_bbox
>3220	Identifier	img_resample_bbox
>3221	Identifier	scaled
>3222	Identifier	scaled
>3223	IdentifierDeclType	img_t *
>3224	IdentifierDeclStatement	 
>3225	IdentifierDecl	* T = new_scaling_transform ( 1.0 / ratio , 1.0 / ratio )
>3226	AssignmentExpr	* T = new_scaling_transform ( 1.0 / ratio , 1.0 / ratio )
>3227	CallExpression	new_scaling_transform ( 1.0 / ratio , 1.0 / ratio )
>3228	ArgumentList	1.0 / ratio
>3229	Argument	1.0 / ratio
>3230	MultiplicativeExpression	1.0 / ratio
>3231	Identifier	ratio
>3232	PrimaryExpression	1.0
>3233	Argument	1.0 / ratio
>3234	MultiplicativeExpression	1.0 / ratio
>3235	Identifier	ratio
>3236	PrimaryExpression	1.0
>3237	Callee	new_scaling_transform
>3238	Identifier	new_scaling_transform
>3239	Identifier	T
>3240	Identifier	T
>3241	IdentifierDeclType	trans2D_t *
>3242	IdentifierDeclStatement	 
>3243	IdentifierDecl	* blur = img_smooth ( img , 0.35 * ratio , 0 )
>3244	AssignmentExpr	* blur = img_smooth ( img , 0.35 * ratio , 0 )
>3245	CallExpression	img_smooth ( img , 0.35 * ratio , 0 )
>3246	ArgumentList	img
>3247	Argument	0
>3248	PrimaryExpression	0
>3249	Argument	0.35 * ratio
>3250	MultiplicativeExpression	0.35 * ratio
>3251	Identifier	ratio
>3252	PrimaryExpression	0.35
>3253	Argument	img
>3254	Identifier	img
>3255	Callee	img_smooth
>3256	Identifier	img_smooth
>3257	Identifier	blur
>3258	Identifier	blur
>3259	IdentifierDeclType	img_t *
>3260	ExpressionStatement	 
>3261	CallExpression	printf ( \"Blurring, sigma is %0.3f\n\" , 0.35 * ratio )
>3262	ArgumentList	\"Blurring, sigma is %0.3f\n\"
>3263	Argument	0.35 * ratio
>3264	MultiplicativeExpression	0.35 * ratio
>3265	Identifier	ratio
>3266	PrimaryExpression	0.35
>3267	Argument	\"Blurring, sigma is %0.3f\n\"
>3268	PrimaryExpression	\"Blurring, sigma is %0.3f\n\"
>3269	Callee	printf
>3270	Identifier	printf
>3271	IdentifierDeclStatement	 
>3272	IdentifierDecl	* img = UndistortImage ( 0.0 , 0.0 , rotation )
>3273	AssignmentExpr	* img = UndistortImage ( 0.0 , 0.0 , rotation )
>3274	CallExpression	UndistortImage ( 0.0 , 0.0 , rotation )
>3275	ArgumentList	0.0
>3276	Argument	rotation
>3277	Identifier	rotation
>3278	Argument	0.0
>3279	PrimaryExpression	0.0
>3280	Argument	0.0
>3281	PrimaryExpression	0.0
>3282	Callee	UndistortImage
>3283	Identifier	UndistortImage
>3284	Identifier	img
>3285	Identifier	img
>3286	IdentifierDeclType	img_t *
>3287	IfStatement	if ( w_ratio > h_ratio )
>3288	ElseStatement	else
>3289	CompoundStatement	 
>3290	ExpressionStatement	 
>3291	AssignmentExpr	ratio = h_ratio
>3292	Identifier	h_ratio
>3293	Identifier	ratio
>3294	CompoundStatement	 
>3295	ExpressionStatement	 
>3296	AssignmentExpr	ratio = w_ratio
>3297	Identifier	w_ratio
>3298	Identifier	ratio
>3299	Condition	 
>3300	RelationalExpression	w_ratio > h_ratio
>3301	Identifier	h_ratio
>3302	Identifier	w_ratio
>3303	IdentifierDeclStatement	 
>3304	IdentifierDecl	ratio
>3305	Identifier	ratio
>3306	IdentifierDeclType	double
>3307	IdentifierDeclStatement	 
>3308	IdentifierDecl	h_ratio = ( double ) h / ( double ) h_max
>3309	AssignmentExpr	h_ratio = ( double ) h / ( double ) h_max
>3310	MultiplicativeExpression	( double ) h / ( double ) h_max
>3311	CastExpression	( double ) h_max
>3312	Identifier	h_max
>3313	CastTarget	double
>3314	CastExpression	( double ) h
>3315	Identifier	h
>3316	CastTarget	double
>3317	Identifier	h_ratio
>3318	Identifier	h_ratio
>3319	IdentifierDeclType	double
>3320	IdentifierDeclStatement	 
>3321	IdentifierDecl	w_ratio = ( double ) w / ( double ) w_max
>3322	AssignmentExpr	w_ratio = ( double ) w / ( double ) w_max
>3323	MultiplicativeExpression	( double ) w / ( double ) w_max
>3324	CastExpression	( double ) w_max
>3325	Identifier	w_max
>3326	CastTarget	double
>3327	CastExpression	( double ) w
>3328	Identifier	w
>3329	CastTarget	double
>3330	Identifier	w_ratio
>3331	Identifier	w_ratio
>3332	IdentifierDeclType	double
>3333	IdentifierDeclStatement	 
>3334	IdentifierDecl	h = GetHeight ( )
>3335	AssignmentExpr	h = GetHeight ( )
>3336	CallExpression	GetHeight ( )
>3337	ArgumentList	 
>3338	Callee	GetHeight
>3339	Identifier	GetHeight
>3340	Identifier	h
>3341	Identifier	h
>3342	IdentifierDeclType	int
>3343	IdentifierDeclStatement	 
>3344	IdentifierDecl	w = GetWidth ( )
>3345	AssignmentExpr	w = GetWidth ( )
>3346	CallExpression	GetWidth ( )
>3347	ArgumentList	 
>3348	Callee	GetWidth
>3349	Identifier	GetWidth
>3350	Identifier	w
>3351	Identifier	w
>3352	IdentifierDeclType	int
>3353	IfStatement	if ( FileExists ( thumb_bmp_buf ) )
>3354	CompoundStatement	 
>3355	ReturnStatement	 
>3356	ExpressionStatement	 
>3357	AssignmentExpr	m_thumb_fixed = img_read_bmp_file ( thumb_bmp_buf )
>3358	CallExpression	img_read_bmp_file ( thumb_bmp_buf )
>3359	ArgumentList	thumb_bmp_buf
>3360	Argument	thumb_bmp_buf
>3361	Identifier	thumb_bmp_buf
>3362	Callee	img_read_bmp_file
>3363	Identifier	img_read_bmp_file
>3364	Identifier	m_thumb_fixed
>3365	Condition	 
>3366	CallExpression	FileExists ( thumb_bmp_buf )
>3367	ArgumentList	thumb_bmp_buf
>3368	Argument	thumb_bmp_buf
>3369	Identifier	thumb_bmp_buf
>3370	Callee	FileExists
>3371	Identifier	FileExists
>3372	IfStatement	if ( FileExists ( thumb_jpg_buf ) )
>3373	CompoundStatement	 
>3374	ReturnStatement	 
>3375	ExpressionStatement	 
>3376	AssignmentExpr	m_thumb_fixed = LoadJPEG ( thumb_jpg_buf )
>3377	CallExpression	LoadJPEG ( thumb_jpg_buf )
>3378	ArgumentList	thumb_jpg_buf
>3379	Argument	thumb_jpg_buf
>3380	Identifier	thumb_jpg_buf
>3381	Callee	LoadJPEG
>3382	Identifier	LoadJPEG
>3383	Identifier	m_thumb_fixed
>3384	Condition	 
>3385	CallExpression	FileExists ( thumb_jpg_buf )
>3386	ArgumentList	thumb_jpg_buf
>3387	Argument	thumb_jpg_buf
>3388	Identifier	thumb_jpg_buf
>3389	Callee	FileExists
>3390	Identifier	FileExists
>3391	ExpressionStatement	 
>3392	CallExpression	sprintf ( thumb_bmp_buf , \"%s.thumb.bmp\" , basename )
>3393	ArgumentList	thumb_bmp_buf
>3394	Argument	basename
>3395	Identifier	basename
>3396	Argument	\"%s.thumb.bmp\"
>3397	PrimaryExpression	\"%s.thumb.bmp\"
>3398	Argument	thumb_bmp_buf
>3399	Identifier	thumb_bmp_buf
>3400	Callee	sprintf
>3401	Identifier	sprintf
>3402	IdentifierDeclStatement	 
>3403	IdentifierDecl	thumb_bmp_buf [ 256 ]
>3404	PrimaryExpression	256
>3405	Identifier	thumb_bmp_buf
>3406	IdentifierDeclType	char [ 256 ]
>3407	ExpressionStatement	 
>3408	CallExpression	sprintf ( thumb_jpg_buf , \"%s.thumb.jpg\" , basename )
>3409	ArgumentList	thumb_jpg_buf
>3410	Argument	basename
>3411	Identifier	basename
>3412	Argument	\"%s.thumb.jpg\"
>3413	PrimaryExpression	\"%s.thumb.jpg\"
>3414	Argument	thumb_jpg_buf
>3415	Identifier	thumb_jpg_buf
>3416	Callee	sprintf
>3417	Identifier	sprintf
>3418	IdentifierDeclStatement	 
>3419	IdentifierDecl	thumb_jpg_buf [ 256 ]
>3420	PrimaryExpression	256
>3421	Identifier	thumb_jpg_buf
>3422	IdentifierDeclType	char [ 256 ]
>3423	ExpressionStatement	 
>3424	AssignmentExpr	basename [ strlen ( basename ) - 4 ] = 0
>3425	PrimaryExpression	0
>3426	ArrayIndexing	basename [ strlen ( basename ) - 4 ]
>3427	AdditiveExpression	strlen ( basename ) - 4
>3428	PrimaryExpression	4
>3429	CallExpression	strlen ( basename )
>3430	ArgumentList	basename
>3431	Argument	basename
>3432	Identifier	basename
>3433	Callee	strlen
>3434	Identifier	strlen
>3435	Identifier	basename
>3436	ExpressionStatement	 
>3437	CallExpression	strcpy ( basename , m_name )
>3438	ArgumentList	basename
>3439	Argument	m_name
>3440	Identifier	m_name
>3441	Argument	basename
>3442	Identifier	basename
>3443	Callee	strcpy
>3444	Identifier	strcpy
>3445	IdentifierDeclStatement	 
>3446	IdentifierDecl	basename [ 256 ]
>3447	PrimaryExpression	256
>3448	Identifier	basename
>3449	IdentifierDeclType	char [ 256 ]
>3450	ExpressionStatement	 
>3451	CallExpression	printf ( \"Loading fixed thumb\n\" )
>3452	ArgumentList	\"Loading fixed thumb\n\"
>3453	Argument	\"Loading fixed thumb\n\"
>3454	PrimaryExpression	\"Loading fixed thumb\n\"
>3455	Callee	printf
>3456	Identifier	printf
>3506	FunctionDef	ImageData 
>3507	ParameterList	 
>3508	ReturnType	void
>3509	CompoundStatement	 
>3510	ExpressionStatement	 
>3511	AssignmentExpr	m_thumb_fixed_texture_index = - 1
>3512	UnaryOp	- 1
>3513	PrimaryExpression	1
>3514	UnaryOperator	-
>3515	Identifier	m_thumb_fixed_texture_index
>3516	ExpressionStatement	 
>3517	AssignmentExpr	m_thumb_fixed = NULL
>3518	Identifier	NULL
>3519	Identifier	m_thumb_fixed
>3520	IfStatement	if ( m_thumb_fixed != NULL )
>3521	ExpressionStatement	 
>3522	CallExpression	img_free ( m_thumb_fixed )
>3523	ArgumentList	m_thumb_fixed
>3524	Argument	m_thumb_fixed
>3525	Identifier	m_thumb_fixed
>3526	Callee	img_free
>3527	Identifier	img_free
>3528	Condition	 
>3529	EqualityExpression	m_thumb_fixed != NULL
>3530	Identifier	NULL
>3531	Identifier	m_thumb_fixed
>3538	FunctionDef	ImageData 
>3539	ParameterList	 
>3540	ReturnType	int
>3541	CompoundStatement	 
>3542	IfStatement	if ( m_keys_loaded )
>3543	ElseStatement	else
>3544	CompoundStatement	 
>3545	ReturnStatement	 
>3546	Identifier	m_num_keys
>3547	IfStatement	if ( ! m_cached_keys )
>3548	ExpressionStatement	 
>3549	CallExpression	CacheNumKeys ( )
>3550	ArgumentList	 
>3551	Callee	CacheNumKeys
>3552	Identifier	CacheNumKeys
>3553	Condition	 
>3554	UnaryOp	! m_cached_keys
>3555	Identifier	m_cached_keys
>3556	UnaryOperator	!
>3557	CompoundStatement	 
>3558	ReturnStatement	 
>3559	CastExpression	( int ) m_keys . size ( )
>3560	CallExpression	m_keys . size ( )
>3561	ArgumentList	 
>3562	Callee	m_keys . size
>3563	MemberAccess	m_keys . size
>3564	Identifier	size
>3565	Identifier	m_keys
>3566	CastTarget	int
>3567	Condition	 
>3568	Identifier	m_keys_loaded
>3577	FunctionDef	ImageData 
>3578	ParameterList	const char * sift_binary , bool undistort
>3579	Parameter	 
>3580	Identifier	undistort
>3581	ParameterType	bool
>3582	Parameter	 
>3583	Identifier	sift_binary
>3584	ParameterType	const char *
>3585	ReturnType	void
>3586	CompoundStatement	 
>3587	IfStatement	if ( FileExists ( m_key_name ) || FileExists ( gzKeyName ) )
>3588	ElseStatement	else
>3589	CompoundStatement	 
>3590	ExpressionStatement	 
>3591	CallExpression	ExtractFeatures ( sift_binary , undistort )
>3592	ArgumentList	sift_binary
>3593	Argument	undistort
>3594	Identifier	undistort
>3595	Argument	sift_binary
>3596	Identifier	sift_binary
>3597	Callee	ExtractFeatures
>3598	Identifier	ExtractFeatures
>3599	CompoundStatement	 
>3600	ExpressionStatement	 
>3601	CallExpression	LoadKeys ( true , undistort )
>3602	ArgumentList	true
>3603	Argument	undistort
>3604	Identifier	undistort
>3605	Argument	true
>3606	Identifier	true
>3607	Callee	LoadKeys
>3608	Identifier	LoadKeys
>3609	Condition	 
>3610	OrExpression	FileExists ( m_key_name ) || FileExists ( gzKeyName )
>3611	CallExpression	FileExists ( gzKeyName )
>3612	ArgumentList	gzKeyName
>3613	Argument	gzKeyName
>3614	Identifier	gzKeyName
>3615	Callee	FileExists
>3616	Identifier	FileExists
>3617	CallExpression	FileExists ( m_key_name )
>3618	ArgumentList	m_key_name
>3619	Argument	m_key_name
>3620	Identifier	m_key_name
>3621	Callee	FileExists
>3622	Identifier	FileExists
>3623	ExpressionStatement	 
>3624	CallExpression	sprintf ( gzKeyName , \"%s.gz\" , m_key_name )
>3625	ArgumentList	gzKeyName
>3626	Argument	m_key_name
>3627	Identifier	m_key_name
>3628	Argument	\"%s.gz\"
>3629	PrimaryExpression	\"%s.gz\"
>3630	Argument	gzKeyName
>3631	Identifier	gzKeyName
>3632	Callee	sprintf
>3633	Identifier	sprintf
>3634	IdentifierDeclStatement	 
>3635	IdentifierDecl	gzKeyName [ 512 ]
>3636	PrimaryExpression	512
>3637	Identifier	gzKeyName
>3638	IdentifierDeclType	char [ 512 ]
>3639	ExpressionStatement	 
>3640	AssignmentExpr	key_buf [ strlen ( m_name ) - 1 ] = 'y'
>3641	PrimaryExpression	'y'
>3642	ArrayIndexing	key_buf [ strlen ( m_name ) - 1 ]
>3643	AdditiveExpression	strlen ( m_name ) - 1
>3644	PrimaryExpression	1
>3645	CallExpression	strlen ( m_name )
>3646	ArgumentList	m_name
>3647	Argument	m_name
>3648	Identifier	m_name
>3649	Callee	strlen
>3650	Identifier	strlen
>3651	Identifier	key_buf
>3652	ExpressionStatement	 
>3653	AssignmentExpr	key_buf [ strlen ( m_name ) - 2 ] = 'e'
>3654	PrimaryExpression	'e'
>3655	ArrayIndexing	key_buf [ strlen ( m_name ) - 2 ]
>3656	AdditiveExpression	strlen ( m_name ) - 2
>3657	PrimaryExpression	2
>3658	CallExpression	strlen ( m_name )
>3659	ArgumentList	m_name
>3660	Argument	m_name
>3661	Identifier	m_name
>3662	Callee	strlen
>3663	Identifier	strlen
>3664	Identifier	key_buf
>3665	ExpressionStatement	 
>3666	AssignmentExpr	key_buf [ strlen ( m_name ) - 3 ] = 'k'
>3667	PrimaryExpression	'k'
>3668	ArrayIndexing	key_buf [ strlen ( m_name ) - 3 ]
>3669	AdditiveExpression	strlen ( m_name ) - 3
>3670	PrimaryExpression	3
>3671	CallExpression	strlen ( m_name )
>3672	ArgumentList	m_name
>3673	Argument	m_name
>3674	Identifier	m_name
>3675	Callee	strlen
>3676	Identifier	strlen
>3677	Identifier	key_buf
>3678	ExpressionStatement	 
>3679	CallExpression	strcpy ( key_buf , m_name )
>3680	ArgumentList	key_buf
>3681	Argument	m_name
>3682	Identifier	m_name
>3683	Argument	key_buf
>3684	Identifier	key_buf
>3685	Callee	strcpy
>3686	Identifier	strcpy
>3687	IdentifierDeclStatement	 
>3688	IdentifierDecl	key_buf [ 256 ]
>3689	PrimaryExpression	256
>3690	Identifier	key_buf
>3691	IdentifierDeclType	char [ 256 ]
>3692	IfStatement	if ( m_keys_loaded )
>3693	ReturnStatement	 
>3694	Condition	 
>3695	Identifier	m_keys_loaded
>3711	FunctionDef	ImageData 
>3712	ParameterList	const char * sift_binary , bool undistort
>3713	Parameter	 
>3714	Identifier	undistort
>3715	ParameterType	bool
>3716	Parameter	 
>3717	Identifier	sift_binary
>3718	ParameterType	const char *
>3719	ReturnType	void
>3720	CompoundStatement	 
>3721	IfStatement	if ( undistort )
>3722	ExpressionStatement	 
>3723	CallExpression	UndistortKeys ( )
>3724	ArgumentList	 
>3725	Callee	UndistortKeys
>3726	Identifier	UndistortKeys
>3727	Condition	 
>3728	Identifier	undistort
>3729	ExpressionStatement	 
>3730	AssignmentExpr	m_keys = kps
>3731	Identifier	kps
>3732	Identifier	m_keys
>3733	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>3734	CompoundStatement	 
>3735	ExpressionStatement	 
>3736	AssignmentExpr	kps [ k ] . m_y -= 0.5 * GetHeight ( )
>3737	MultiplicativeExpression	0.5 * GetHeight ( )
>3738	CallExpression	GetHeight ( )
>3739	ArgumentList	 
>3740	Callee	GetHeight
>3741	Identifier	GetHeight
>3742	PrimaryExpression	0.5
>3743	MemberAccess	kps [ k ] . m_y
>3744	Identifier	m_y
>3745	ArrayIndexing	kps [ k ]
>3746	Identifier	k
>3747	Identifier	kps
>3748	ExpressionStatement	 
>3749	AssignmentExpr	kps [ k ] . m_x -= 0.5 * GetWidth ( )
>3750	MultiplicativeExpression	0.5 * GetWidth ( )
>3751	CallExpression	GetWidth ( )
>3752	ArgumentList	 
>3753	Callee	GetWidth
>3754	Identifier	GetWidth
>3755	PrimaryExpression	0.5
>3756	MemberAccess	kps [ k ] . m_x
>3757	Identifier	m_x
>3758	ArrayIndexing	kps [ k ]
>3759	Identifier	k
>3760	Identifier	kps
>3761	IncDecOp	 
>3762	IncDec	++
>3763	Identifier	k
>3764	Condition	 
>3765	RelationalExpression	k < ( int ) kps . size ( )
>3766	CastExpression	( int ) kps . size ( )
>3767	CallExpression	kps . size ( )
>3768	ArgumentList	 
>3769	Callee	kps . size
>3770	MemberAccess	kps . size
>3771	Identifier	size
>3772	Identifier	kps
>3773	CastTarget	int
>3774	Identifier	k
>3775	ForInit	 
>3776	IdentifierDeclStatement	int k = 0 ;
>3777	IdentifierDecl	k = 0
>3778	AssignmentExpr	k = 0
>3779	PrimaryExpression	0
>3780	Identifier	k
>3781	Identifier	k
>3782	IdentifierDeclType	int
>3783	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>3784	CompoundStatement	 
>3785	ExpressionStatement	 
>3786	AssignmentExpr	kps [ k ] . m_y = GetHeight ( ) - kps [ k ] . m_y - 1.0
>3787	AdditiveExpression	GetHeight ( ) - kps [ k ] . m_y - 1.0
>3788	AdditiveExpression	kps [ k ] . m_y - 1.0
>3789	PrimaryExpression	1.0
>3790	MemberAccess	kps [ k ] . m_y
>3791	Identifier	m_y
>3792	ArrayIndexing	kps [ k ]
>3793	Identifier	k
>3794	Identifier	kps
>3795	CallExpression	GetHeight ( )
>3796	ArgumentList	 
>3797	Callee	GetHeight
>3798	Identifier	GetHeight
>3799	MemberAccess	kps [ k ] . m_y
>3800	Identifier	m_y
>3801	ArrayIndexing	kps [ k ]
>3802	Identifier	k
>3803	Identifier	kps
>3804	IncDecOp	 
>3805	IncDec	++
>3806	Identifier	k
>3807	Condition	 
>3808	RelationalExpression	k < ( int ) kps . size ( )
>3809	CastExpression	( int ) kps . size ( )
>3810	CallExpression	kps . size ( )
>3811	ArgumentList	 
>3812	Callee	kps . size
>3813	MemberAccess	kps . size
>3814	Identifier	size
>3815	Identifier	kps
>3816	CastTarget	int
>3817	Identifier	k
>3818	ForInit	 
>3819	IdentifierDeclStatement	int k = 0 ;
>3820	IdentifierDecl	k = 0
>3821	AssignmentExpr	k = 0
>3822	PrimaryExpression	0
>3823	Identifier	k
>3824	Identifier	k
>3825	IdentifierDeclType	int
>3826	IdentifierDeclStatement	 
>3827	IdentifierDecl	kps = ReadKeyFile ( out )
>3828	AssignmentExpr	kps = ReadKeyFile ( out )
>3829	CallExpression	ReadKeyFile ( out )
>3830	ArgumentList	out
>3831	Argument	out
>3832	Identifier	out
>3833	Callee	ReadKeyFile
>3834	Identifier	ReadKeyFile
>3835	Identifier	kps
>3836	Identifier	kps
>3837	IdentifierDeclType	std 
>3838	ExpressionStatement	 
>3839	AssignmentExpr	m_key_name = strdup ( out )
>3840	CallExpression	strdup ( out )
>3841	ArgumentList	out
>3842	Argument	out
>3843	Identifier	out
>3844	Callee	strdup
>3845	Identifier	strdup
>3846	Identifier	m_key_name
>3847	ExpressionStatement	 
>3848	CallExpression	system ( cmd )
>3849	ArgumentList	cmd
>3850	Argument	cmd
>3851	Identifier	cmd
>3852	Callee	system
>3853	Identifier	system
>3854	IfStatement	if ( log )
>3855	CompoundStatement	 
>3856	ExpressionStatement	 
>3857	CallExpression	log -> AppendText ( \"'\n\" )
>3858	ArgumentList	\"'\n\"
>3859	Argument	\"'\n\"
>3860	PrimaryExpression	\"'\n\"
>3861	Callee	log -> AppendText
>3862	PtrMemberAccess	log -> AppendText
>3863	Identifier	AppendText
>3864	Identifier	log
>3865	ExpressionStatement	 
>3866	CallExpression	log -> AppendText ( cmd )
>3867	ArgumentList	cmd
>3868	Argument	cmd
>3869	Identifier	cmd
>3870	Callee	log -> AppendText
>3871	PtrMemberAccess	log -> AppendText
>3872	Identifier	AppendText
>3873	Identifier	log
>3874	ExpressionStatement	 
>3875	CallExpression	log -> AppendText ( \"Running command '\" )
>3876	ArgumentList	\"Running command '\"
>3877	Argument	\"Running command '\"
>3878	PrimaryExpression	\"Running command '\"
>3879	Callee	log -> AppendText
>3880	PtrMemberAccess	log -> AppendText
>3881	Identifier	AppendText
>3882	Identifier	log
>3883	ExpressionStatement	 
>3884	CallExpression	log -> AppendText ( \"  \" )
>3885	ArgumentList	\"  \"
>3886	Argument	\"  \"
>3887	PrimaryExpression	\"  \"
>3888	Callee	log -> AppendText
>3889	PtrMemberAccess	log -> AppendText
>3890	Identifier	AppendText
>3891	Identifier	log
>3892	Condition	 
>3893	Identifier	log
>3894	ExpressionStatement	 
>3895	CallExpression	sprintf ( cmd , \"%s < %s > %s\" , sift_binary , in , out )
>3896	ArgumentList	cmd
>3897	Argument	out
>3898	Identifier	out
>3899	Argument	in
>3900	Identifier	in
>3901	Argument	sift_binary
>3902	Identifier	sift_binary
>3903	Argument	\"%s < %s > %s\"
>3904	PrimaryExpression	\"%s < %s > %s\"
>3905	Argument	cmd
>3906	Identifier	cmd
>3907	Callee	sprintf
>3908	Identifier	sprintf
>3909	IdentifierDeclStatement	 
>3910	IdentifierDecl	cmd [ 2048 ]
>3911	PrimaryExpression	2048
>3912	Identifier	cmd
>3913	IdentifierDeclType	char [ 2048 ]
>3914	ExpressionStatement	 
>3915	CallExpression	strcat ( out , \".key\" )
>3916	ArgumentList	out
>3917	Argument	\".key\"
>3918	PrimaryExpression	\".key\"
>3919	Argument	out
>3920	Identifier	out
>3921	Callee	strcat
>3922	Identifier	strcat
>3923	ExpressionStatement	 
>3924	AssignmentExpr	out [ ext - in ] = 0
>3925	PrimaryExpression	0
>3926	ArrayIndexing	out [ ext - in ]
>3927	AdditiveExpression	ext - in
>3928	Identifier	in
>3929	Identifier	ext
>3930	Identifier	out
>3931	ExpressionStatement	 
>3932	CallExpression	strncpy ( out , in , ext - in )
>3933	ArgumentList	out
>3934	Argument	ext - in
>3935	AdditiveExpression	ext - in
>3936	Identifier	in
>3937	Identifier	ext
>3938	Argument	in
>3939	Identifier	in
>3940	Argument	out
>3941	Identifier	out
>3942	Callee	strncpy
>3943	Identifier	strncpy
>3944	IdentifierDeclStatement	 
>3945	IdentifierDecl	out [ 256 ]
>3946	PrimaryExpression	256
>3947	Identifier	out
>3948	IdentifierDeclType	char [ 256 ]
>3949	IdentifierDeclStatement	 
>3950	IdentifierDecl	* ext = strrchr ( ( char * ) in , '.' )
>3951	AssignmentExpr	* ext = strrchr ( ( char * ) in , '.' )
>3952	CallExpression	strrchr ( ( char * ) in , '.' )
>3953	ArgumentList	( char * ) in
>3954	Argument	'.'
>3955	PrimaryExpression	'.'
>3956	Argument	( char * ) in
>3957	CastExpression	( char * ) in
>3958	Identifier	in
>3959	CastTarget	char *
>3960	Callee	strrchr
>3961	Identifier	strrchr
>3962	Identifier	ext
>3963	Identifier	ext
>3964	IdentifierDeclType	char *
>3965	IdentifierDeclStatement	 
>3966	IdentifierDecl	* in = m_name
>3967	AssignmentExpr	* in = m_name
>3968	Identifier	m_name
>3969	Identifier	m_name
>3970	Identifier	in
>3971	IdentifierDeclType	const char *
>4000	FunctionDef	ImageData 
>4001	ParameterList	bool undistort
>4002	Parameter	 
>4003	Identifier	undistort
>4004	ParameterType	bool
>4005	ReturnType	void
>4006	CompoundStatement	 
>4007	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>4008	CompoundStatement	 
>4009	ExpressionStatement	 
>4010	AssignmentExpr	m_keys [ i ] . m_d = kps [ i ] . m_d
>4011	MemberAccess	kps [ i ] . m_d
>4012	Identifier	m_d
>4013	ArrayIndexing	kps [ i ]
>4014	Identifier	i
>4015	Identifier	kps
>4016	MemberAccess	m_keys [ i ] . m_d
>4017	Identifier	m_d
>4018	ArrayIndexing	m_keys [ i ]
>4019	Identifier	i
>4020	Identifier	m_keys
>4021	IncDecOp	 
>4022	IncDec	++
>4023	Identifier	i
>4024	Condition	 
>4025	RelationalExpression	i < num_keys
>4026	Identifier	num_keys
>4027	Identifier	i
>4028	ForInit	 
>4029	IdentifierDeclStatement	int i = 0 ;
>4030	IdentifierDecl	i = 0
>4031	AssignmentExpr	i = 0
>4032	PrimaryExpression	0
>4033	Identifier	i
>4034	Identifier	i
>4035	IdentifierDeclType	int
>4036	ExpressionStatement	 
>4037	CallExpression	assert ( kps . size ( ) == m_keys . size ( ) )
>4038	ArgumentList	kps . size ( ) == m_keys . size ( )
>4039	Argument	kps . size ( ) == m_keys . size ( )
>4040	EqualityExpression	kps . size ( ) == m_keys . size ( )
>4041	CallExpression	m_keys . size ( )
>4042	ArgumentList	 
>4043	Callee	m_keys . size
>4044	MemberAccess	m_keys . size
>4045	Identifier	size
>4046	Identifier	m_keys
>4047	CallExpression	kps . size ( )
>4048	ArgumentList	 
>4049	Callee	kps . size
>4050	MemberAccess	kps . size
>4051	Identifier	size
>4052	Identifier	kps
>4053	Callee	assert
>4054	Identifier	assert
>4055	IdentifierDeclStatement	 
>4056	IdentifierDecl	kps = ReadKeyFile ( m_key_name , undistort )
>4057	AssignmentExpr	kps = ReadKeyFile ( m_key_name , undistort )
>4058	CallExpression	ReadKeyFile ( m_key_name , undistort )
>4059	ArgumentList	m_key_name
>4060	Argument	undistort
>4061	Identifier	undistort
>4062	Argument	m_key_name
>4063	Identifier	m_key_name
>4064	Callee	ReadKeyFile
>4065	Identifier	ReadKeyFile
>4066	Identifier	kps
>4067	Identifier	kps
>4068	IdentifierDeclType	std 
>4069	IfStatement	if ( m_keys [ 0 ] . m_d != NULL )
>4070	ReturnStatement	 
>4071	Condition	 
>4072	EqualityExpression	m_keys [ 0 ] . m_d != NULL
>4073	Identifier	NULL
>4074	MemberAccess	m_keys [ 0 ] . m_d
>4075	Identifier	m_d
>4076	ArrayIndexing	m_keys [ 0 ]
>4077	PrimaryExpression	0
>4078	Identifier	m_keys
>4079	IfStatement	if ( num_keys == 0 )
>4080	ReturnStatement	 
>4081	Condition	 
>4082	EqualityExpression	num_keys == 0
>4083	PrimaryExpression	0
>4084	Identifier	num_keys
>4085	IdentifierDeclStatement	 
>4086	IdentifierDecl	num_keys = ( int ) m_keys . size ( )
>4087	AssignmentExpr	num_keys = ( int ) m_keys . size ( )
>4088	CastExpression	( int ) m_keys . size ( )
>4089	CallExpression	m_keys . size ( )
>4090	ArgumentList	 
>4091	Callee	m_keys . size
>4092	MemberAccess	m_keys . size
>4093	Identifier	size
>4094	Identifier	m_keys
>4095	CastTarget	int
>4096	Identifier	num_keys
>4097	Identifier	num_keys
>4098	IdentifierDeclType	int
>4099	IfStatement	if ( ! m_keys_desc_loaded )
>4100	CompoundStatement	 
>4101	ReturnStatement	 
>4102	ExpressionStatement	 
>4103	CallExpression	LoadKeys ( true , undistort )
>4104	ArgumentList	true
>4105	Argument	undistort
>4106	Identifier	undistort
>4107	Argument	true
>4108	Identifier	true
>4109	Callee	LoadKeys
>4110	Identifier	LoadKeys
>4111	Condition	 
>4112	UnaryOp	! m_keys_desc_loaded
>4113	Identifier	m_keys_desc_loaded
>4114	UnaryOperator	!
>4136	FunctionDef	ImageData 
>4137	ParameterList	bool descriptor , bool undistort
>4138	Parameter	 
>4139	Identifier	undistort
>4140	ParameterType	bool
>4141	Parameter	 
>4142	Identifier	descriptor
>4143	ParameterType	bool
>4144	ReturnType	void
>4145	CompoundStatement	 
>4146	IfStatement	if ( undistort )
>4147	ExpressionStatement	 
>4148	CallExpression	UndistortKeys ( )
>4149	ArgumentList	 
>4150	Callee	UndistortKeys
>4151	Identifier	UndistortKeys
>4152	Condition	 
>4153	Identifier	undistort
>4154	IfStatement	if ( ! descriptor )
>4155	ElseStatement	else
>4156	CompoundStatement	 
>4157	ExpressionStatement	 
>4158	AssignmentExpr	m_keys_desc_loaded = true
>4159	Identifier	true
>4160	Identifier	m_keys_desc_loaded
>4161	ExpressionStatement	 
>4162	AssignmentExpr	m_keys_desc = kps
>4163	Identifier	kps
>4164	Identifier	m_keys_desc
>4165	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>4166	CompoundStatement	 
>4167	ExpressionStatement	 
>4168	AssignmentExpr	kps [ k ] . m_y -= 0.5 * GetHeight ( )
>4169	MultiplicativeExpression	0.5 * GetHeight ( )
>4170	CallExpression	GetHeight ( )
>4171	ArgumentList	 
>4172	Callee	GetHeight
>4173	Identifier	GetHeight
>4174	PrimaryExpression	0.5
>4175	MemberAccess	kps [ k ] . m_y
>4176	Identifier	m_y
>4177	ArrayIndexing	kps [ k ]
>4178	Identifier	k
>4179	Identifier	kps
>4180	ExpressionStatement	 
>4181	AssignmentExpr	kps [ k ] . m_x -= 0.5 * GetWidth ( )
>4182	MultiplicativeExpression	0.5 * GetWidth ( )
>4183	CallExpression	GetWidth ( )
>4184	ArgumentList	 
>4185	Callee	GetWidth
>4186	Identifier	GetWidth
>4187	PrimaryExpression	0.5
>4188	MemberAccess	kps [ k ] . m_x
>4189	Identifier	m_x
>4190	ArrayIndexing	kps [ k ]
>4191	Identifier	k
>4192	Identifier	kps
>4193	IncDecOp	 
>4194	IncDec	++
>4195	Identifier	k
>4196	Condition	 
>4197	RelationalExpression	k < ( int ) kps . size ( )
>4198	CastExpression	( int ) kps . size ( )
>4199	CallExpression	kps . size ( )
>4200	ArgumentList	 
>4201	Callee	kps . size
>4202	MemberAccess	kps . size
>4203	Identifier	size
>4204	Identifier	kps
>4205	CastTarget	int
>4206	Identifier	k
>4207	ForInit	 
>4208	IdentifierDeclStatement	int k = 0 ;
>4209	IdentifierDecl	k = 0
>4210	AssignmentExpr	k = 0
>4211	PrimaryExpression	0
>4212	Identifier	k
>4213	Identifier	k
>4214	IdentifierDeclType	int
>4215	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>4216	CompoundStatement	 
>4217	ExpressionStatement	 
>4218	AssignmentExpr	kps [ k ] . m_y = GetHeight ( ) - kps [ k ] . m_y - 1.0
>4219	AdditiveExpression	GetHeight ( ) - kps [ k ] . m_y - 1.0
>4220	AdditiveExpression	kps [ k ] . m_y - 1.0
>4221	PrimaryExpression	1.0
>4222	MemberAccess	kps [ k ] . m_y
>4223	Identifier	m_y
>4224	ArrayIndexing	kps [ k ]
>4225	Identifier	k
>4226	Identifier	kps
>4227	CallExpression	GetHeight ( )
>4228	ArgumentList	 
>4229	Callee	GetHeight
>4230	Identifier	GetHeight
>4231	MemberAccess	kps [ k ] . m_y
>4232	Identifier	m_y
>4233	ArrayIndexing	kps [ k ]
>4234	Identifier	k
>4235	Identifier	kps
>4236	IncDecOp	 
>4237	IncDec	++
>4238	Identifier	k
>4239	Condition	 
>4240	RelationalExpression	k < ( int ) kps . size ( )
>4241	CastExpression	( int ) kps . size ( )
>4242	CallExpression	kps . size ( )
>4243	ArgumentList	 
>4244	Callee	kps . size
>4245	MemberAccess	kps . size
>4246	Identifier	size
>4247	Identifier	kps
>4248	CastTarget	int
>4249	Identifier	k
>4250	ForInit	 
>4251	IdentifierDeclStatement	int k = 0 ;
>4252	IdentifierDecl	k = 0
>4253	AssignmentExpr	k = 0
>4254	PrimaryExpression	0
>4255	Identifier	k
>4256	Identifier	k
>4257	IdentifierDeclType	int
>4258	IdentifierDeclStatement	 
>4259	IdentifierDecl	kps = ReadKeyFileWithDesc ( m_key_name , true )
>4260	AssignmentExpr	kps = ReadKeyFileWithDesc ( m_key_name , true )
>4261	CallExpression	ReadKeyFileWithDesc ( m_key_name , true )
>4262	ArgumentList	m_key_name
>4263	Argument	true
>4264	Identifier	true
>4265	Argument	m_key_name
>4266	Identifier	m_key_name
>4267	Callee	ReadKeyFileWithDesc
>4268	Identifier	ReadKeyFileWithDesc
>4269	Identifier	kps
>4270	Identifier	kps
>4271	IdentifierDeclType	std 
>4272	CompoundStatement	 
>4273	ExpressionStatement	 
>4274	AssignmentExpr	m_keys_loaded = true
>4275	Identifier	true
>4276	Identifier	m_keys_loaded
>4277	ExpressionStatement	 
>4278	AssignmentExpr	m_keys = kps
>4279	Identifier	kps
>4280	Identifier	m_keys
>4281	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>4282	CompoundStatement	 
>4283	ExpressionStatement	 
>4284	AssignmentExpr	kps [ k ] . m_y -= 0.5 * ( GetHeight ( ) - 1 )
>4285	MultiplicativeExpression	0.5 * ( GetHeight ( ) - 1 )
>4286	AdditiveExpression	GetHeight ( ) - 1
>4287	PrimaryExpression	1
>4288	CallExpression	GetHeight ( )
>4289	ArgumentList	 
>4290	Callee	GetHeight
>4291	Identifier	GetHeight
>4292	PrimaryExpression	0.5
>4293	MemberAccess	kps [ k ] . m_y
>4294	Identifier	m_y
>4295	ArrayIndexing	kps [ k ]
>4296	Identifier	k
>4297	Identifier	kps
>4298	ExpressionStatement	 
>4299	AssignmentExpr	kps [ k ] . m_x -= 0.5 * ( GetWidth ( ) - 1 )
>4300	MultiplicativeExpression	0.5 * ( GetWidth ( ) - 1 )
>4301	AdditiveExpression	GetWidth ( ) - 1
>4302	PrimaryExpression	1
>4303	CallExpression	GetWidth ( )
>4304	ArgumentList	 
>4305	Callee	GetWidth
>4306	Identifier	GetWidth
>4307	PrimaryExpression	0.5
>4308	MemberAccess	kps [ k ] . m_x
>4309	Identifier	m_x
>4310	ArrayIndexing	kps [ k ]
>4311	Identifier	k
>4312	Identifier	kps
>4313	IncDecOp	 
>4314	IncDec	++
>4315	Identifier	k
>4316	Condition	 
>4317	RelationalExpression	k < ( int ) kps . size ( )
>4318	CastExpression	( int ) kps . size ( )
>4319	CallExpression	kps . size ( )
>4320	ArgumentList	 
>4321	Callee	kps . size
>4322	MemberAccess	kps . size
>4323	Identifier	size
>4324	Identifier	kps
>4325	CastTarget	int
>4326	Identifier	k
>4327	ForInit	 
>4328	IdentifierDeclStatement	int k = 0 ;
>4329	IdentifierDecl	k = 0
>4330	AssignmentExpr	k = 0
>4331	PrimaryExpression	0
>4332	Identifier	k
>4333	Identifier	k
>4334	IdentifierDeclType	int
>4335	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>4336	CompoundStatement	 
>4337	ExpressionStatement	 
>4338	AssignmentExpr	kps [ k ] . m_y = GetHeight ( ) - kps [ k ] . m_y - 1.0
>4339	AdditiveExpression	GetHeight ( ) - kps [ k ] . m_y - 1.0
>4340	AdditiveExpression	kps [ k ] . m_y - 1.0
>4341	PrimaryExpression	1.0
>4342	MemberAccess	kps [ k ] . m_y
>4343	Identifier	m_y
>4344	ArrayIndexing	kps [ k ]
>4345	Identifier	k
>4346	Identifier	kps
>4347	CallExpression	GetHeight ( )
>4348	ArgumentList	 
>4349	Callee	GetHeight
>4350	Identifier	GetHeight
>4351	MemberAccess	kps [ k ] . m_y
>4352	Identifier	m_y
>4353	ArrayIndexing	kps [ k ]
>4354	Identifier	k
>4355	Identifier	kps
>4356	IncDecOp	 
>4357	IncDec	++
>4358	Identifier	k
>4359	Condition	 
>4360	RelationalExpression	k < ( int ) kps . size ( )
>4361	CastExpression	( int ) kps . size ( )
>4362	CallExpression	kps . size ( )
>4363	ArgumentList	 
>4364	Callee	kps . size
>4365	MemberAccess	kps . size
>4366	Identifier	size
>4367	Identifier	kps
>4368	CastTarget	int
>4369	Identifier	k
>4370	ForInit	 
>4371	IdentifierDeclStatement	int k = 0 ;
>4372	IdentifierDecl	k = 0
>4373	AssignmentExpr	k = 0
>4374	PrimaryExpression	0
>4375	Identifier	k
>4376	Identifier	k
>4377	IdentifierDeclType	int
>4378	IdentifierDeclStatement	 
>4379	IdentifierDecl	kps = ReadKeyFile ( m_key_name )
>4380	AssignmentExpr	kps = ReadKeyFile ( m_key_name )
>4381	CallExpression	ReadKeyFile ( m_key_name )
>4382	ArgumentList	m_key_name
>4383	Argument	m_key_name
>4384	Identifier	m_key_name
>4385	Callee	ReadKeyFile
>4386	Identifier	ReadKeyFile
>4387	Identifier	kps
>4388	Identifier	kps
>4389	IdentifierDeclType	std 
>4390	Condition	 
>4391	UnaryOp	! descriptor
>4392	Identifier	descriptor
>4393	UnaryOperator	!
>4394	IfStatement	if ( m_keys_desc_loaded && descriptor )
>4395	ReturnStatement	 
>4396	Condition	 
>4397	AndExpression	m_keys_desc_loaded && descriptor
>4398	Identifier	descriptor
>4399	Identifier	m_keys_desc_loaded
>4400	IfStatement	if ( m_keys_loaded && ! descriptor )
>4401	ReturnStatement	 
>4402	Condition	 
>4403	AndExpression	m_keys_loaded && ! descriptor
>4404	UnaryOp	! descriptor
>4405	Identifier	descriptor
>4406	UnaryOperator	!
>4407	Identifier	m_keys_loaded
>4430	FunctionDef	ImageData 
>4431	ParameterList	 
>4432	ReturnType	void
>4433	CompoundStatement	 
>4434	IfStatement	if ( m_keys_desc_loaded )
>4435	ElseStatement	else
>4436	IfStatement	if ( m_keys_loaded )
>4437	CompoundStatement	 
>4438	ExpressionStatement	 
>4439	AssignmentExpr	m_keys_loaded = false
>4440	Identifier	false
>4441	Identifier	m_keys_loaded
>4442	ExpressionStatement	 
>4443	CallExpression	m_keys . clear ( )
>4444	ArgumentList	 
>4445	Callee	m_keys . clear
>4446	MemberAccess	m_keys . clear
>4447	Identifier	clear
>4448	Identifier	m_keys
>4449	Condition	 
>4450	Identifier	m_keys_loaded
>4451	CompoundStatement	 
>4452	ExpressionStatement	 
>4453	AssignmentExpr	m_keys_desc_loaded = false
>4454	Identifier	false
>4455	Identifier	m_keys_desc_loaded
>4456	ExpressionStatement	 
>4457	CallExpression	m_keys_desc . clear ( )
>4458	ArgumentList	 
>4459	Callee	m_keys_desc . clear
>4460	MemberAccess	m_keys_desc . clear
>4461	Identifier	clear
>4462	Identifier	m_keys_desc
>4463	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>4464	CompoundStatement	 
>4465	ExpressionStatement	 
>4466	AssignmentExpr	m_keys_desc [ i ] . m_d = NULL
>4467	Identifier	NULL
>4468	MemberAccess	m_keys_desc [ i ] . m_d
>4469	Identifier	m_d
>4470	ArrayIndexing	m_keys_desc [ i ]
>4471	Identifier	i
>4472	Identifier	m_keys_desc
>4473	ExpressionStatement	 
>4474	MemberAccess	m_keys_desc [ i ] . m_d
>4475	Identifier	m_d
>4476	ArrayIndexing	m_keys_desc [ i ]
>4477	Identifier	i
>4478	Identifier	m_keys_desc
>4479	Statement	 
>4480	Statement	 
>4481	IfStatement	if ( m_keys_desc [ i ] . m_d )
>4482	Statement	 
>4483	Condition	 
>4484	MemberAccess	m_keys_desc [ i ] . m_d
>4485	Identifier	m_d
>4486	ArrayIndexing	m_keys_desc [ i ]
>4487	Identifier	i
>4488	Identifier	m_keys_desc
>4489	IncDecOp	 
>4490	IncDec	++
>4491	Identifier	i
>4492	Condition	 
>4493	RelationalExpression	i < num_keys
>4494	Identifier	num_keys
>4495	Identifier	i
>4496	ForInit	 
>4497	IdentifierDeclStatement	int i = 0 ;
>4498	IdentifierDecl	i = 0
>4499	AssignmentExpr	i = 0
>4500	PrimaryExpression	0
>4501	Identifier	i
>4502	Identifier	i
>4503	IdentifierDeclType	int
>4504	IdentifierDeclStatement	 
>4505	IdentifierDecl	num_keys = ( int ) m_keys_desc . size ( )
>4506	AssignmentExpr	num_keys = ( int ) m_keys_desc . size ( )
>4507	CastExpression	( int ) m_keys_desc . size ( )
>4508	CallExpression	m_keys_desc . size ( )
>4509	ArgumentList	 
>4510	Callee	m_keys_desc . size
>4511	MemberAccess	m_keys_desc . size
>4512	Identifier	size
>4513	Identifier	m_keys_desc
>4514	CastTarget	int
>4515	Identifier	num_keys
>4516	Identifier	num_keys
>4517	IdentifierDeclType	int
>4518	Condition	 
>4519	Identifier	m_keys_desc_loaded
>4535	FunctionDef	ImageData 
>4536	ParameterList	bool descriptor , bool undistort
>4537	Parameter	 
>4538	Identifier	undistort
>4539	ParameterType	bool
>4540	Parameter	 
>4541	Identifier	descriptor
>4542	ParameterType	bool
>4543	ReturnType	void
>4544	CompoundStatement	 
>4545	IfStatement	if ( undistort )
>4546	ExpressionStatement	 
>4547	CallExpression	UndistortKeys ( )
>4548	ArgumentList	 
>4549	Callee	UndistortKeys
>4550	Identifier	UndistortKeys
>4551	Condition	 
>4552	Identifier	undistort
>4553	ExpressionStatement	 
>4554	AssignmentExpr	m_keys_scale_rot_loaded = true
>4555	Identifier	true
>4556	Identifier	m_keys_scale_rot_loaded
>4557	ExpressionStatement	 
>4558	AssignmentExpr	m_keys_scale_rot = kps
>4559	Identifier	kps
>4560	Identifier	m_keys_scale_rot
>4561	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>4562	CompoundStatement	 
>4563	ExpressionStatement	 
>4564	AssignmentExpr	kps [ k ] . m_y -= 0.5 * GetHeight ( )
>4565	MultiplicativeExpression	0.5 * GetHeight ( )
>4566	CallExpression	GetHeight ( )
>4567	ArgumentList	 
>4568	Callee	GetHeight
>4569	Identifier	GetHeight
>4570	PrimaryExpression	0.5
>4571	MemberAccess	kps [ k ] . m_y
>4572	Identifier	m_y
>4573	ArrayIndexing	kps [ k ]
>4574	Identifier	k
>4575	Identifier	kps
>4576	ExpressionStatement	 
>4577	AssignmentExpr	kps [ k ] . m_x -= 0.5 * GetWidth ( )
>4578	MultiplicativeExpression	0.5 * GetWidth ( )
>4579	CallExpression	GetWidth ( )
>4580	ArgumentList	 
>4581	Callee	GetWidth
>4582	Identifier	GetWidth
>4583	PrimaryExpression	0.5
>4584	MemberAccess	kps [ k ] . m_x
>4585	Identifier	m_x
>4586	ArrayIndexing	kps [ k ]
>4587	Identifier	k
>4588	Identifier	kps
>4589	IncDecOp	 
>4590	IncDec	++
>4591	Identifier	k
>4592	Condition	 
>4593	RelationalExpression	k < ( int ) kps . size ( )
>4594	CastExpression	( int ) kps . size ( )
>4595	CallExpression	kps . size ( )
>4596	ArgumentList	 
>4597	Callee	kps . size
>4598	MemberAccess	kps . size
>4599	Identifier	size
>4600	Identifier	kps
>4601	CastTarget	int
>4602	Identifier	k
>4603	ForInit	 
>4604	IdentifierDeclStatement	int k = 0 ;
>4605	IdentifierDecl	k = 0
>4606	AssignmentExpr	k = 0
>4607	PrimaryExpression	0
>4608	Identifier	k
>4609	Identifier	k
>4610	IdentifierDeclType	int
>4611	ForStatement	for ( int k = 0 ; k < ( int ) kps . size ( ) ; k ++ )
>4612	CompoundStatement	 
>4613	ExpressionStatement	 
>4614	AssignmentExpr	kps [ k ] . m_y = GetHeight ( ) - kps [ k ] . m_y - 1.0
>4615	AdditiveExpression	GetHeight ( ) - kps [ k ] . m_y - 1.0
>4616	AdditiveExpression	kps [ k ] . m_y - 1.0
>4617	PrimaryExpression	1.0
>4618	MemberAccess	kps [ k ] . m_y
>4619	Identifier	m_y
>4620	ArrayIndexing	kps [ k ]
>4621	Identifier	k
>4622	Identifier	kps
>4623	CallExpression	GetHeight ( )
>4624	ArgumentList	 
>4625	Callee	GetHeight
>4626	Identifier	GetHeight
>4627	MemberAccess	kps [ k ] . m_y
>4628	Identifier	m_y
>4629	ArrayIndexing	kps [ k ]
>4630	Identifier	k
>4631	Identifier	kps
>4632	IncDecOp	 
>4633	IncDec	++
>4634	Identifier	k
>4635	Condition	 
>4636	RelationalExpression	k < ( int ) kps . size ( )
>4637	CastExpression	( int ) kps . size ( )
>4638	CallExpression	kps . size ( )
>4639	ArgumentList	 
>4640	Callee	kps . size
>4641	MemberAccess	kps . size
>4642	Identifier	size
>4643	Identifier	kps
>4644	CastTarget	int
>4645	Identifier	k
>4646	ForInit	 
>4647	IdentifierDeclStatement	int k = 0 ;
>4648	IdentifierDecl	k = 0
>4649	AssignmentExpr	k = 0
>4650	PrimaryExpression	0
>4651	Identifier	k
>4652	Identifier	k
>4653	IdentifierDeclType	int
>4654	IdentifierDeclStatement	 
>4655	IdentifierDecl	kps = ReadKeyFileWithScaleRot ( m_key_name , descriptor )
>4656	AssignmentExpr	kps = ReadKeyFileWithScaleRot ( m_key_name , descriptor )
>4657	CallExpression	ReadKeyFileWithScaleRot ( m_key_name , descriptor )
>4658	ArgumentList	m_key_name
>4659	Argument	descriptor
>4660	Identifier	descriptor
>4661	Argument	m_key_name
>4662	Identifier	m_key_name
>4663	Callee	ReadKeyFileWithScaleRot
>4664	Identifier	ReadKeyFileWithScaleRot
>4665	Identifier	kps
>4666	Identifier	kps
>4667	IdentifierDeclType	std 
>4668	IfStatement	if ( m_keys_scale_rot_loaded )
>4669	ReturnStatement	 
>4670	Condition	 
>4671	Identifier	m_keys_scale_rot_loaded
>4691	FunctionDef	ImageData 
>4692	ParameterList	 
>4693	ReturnType	void
>4694	CompoundStatement	 
>4695	ExpressionStatement	 
>4696	AssignmentExpr	m_keys_scale_rot_loaded = false
>4697	Identifier	false
>4698	Identifier	m_keys_scale_rot_loaded
>4699	ExpressionStatement	 
>4700	CallExpression	m_keys_scale_rot . clear ( )
>4701	ArgumentList	 
>4702	Callee	m_keys_scale_rot . clear
>4703	MemberAccess	m_keys_scale_rot . clear
>4704	Identifier	clear
>4705	Identifier	m_keys_scale_rot
>4706	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>4707	CompoundStatement	 
>4708	ExpressionStatement	 
>4709	MemberAccess	m_keys_scale_rot [ i ] . m_d
>4710	Identifier	m_d
>4711	ArrayIndexing	m_keys_scale_rot [ i ]
>4712	Identifier	i
>4713	Identifier	m_keys_scale_rot
>4714	Statement	 
>4715	Statement	 
>4716	IfStatement	if ( m_keys_scale_rot [ i ] . m_d )
>4717	Statement	 
>4718	Condition	 
>4719	MemberAccess	m_keys_scale_rot [ i ] . m_d
>4720	Identifier	m_d
>4721	ArrayIndexing	m_keys_scale_rot [ i ]
>4722	Identifier	i
>4723	Identifier	m_keys_scale_rot
>4724	IncDecOp	 
>4725	IncDec	++
>4726	Identifier	i
>4727	Condition	 
>4728	RelationalExpression	i < num_keys
>4729	Identifier	num_keys
>4730	Identifier	i
>4731	ForInit	 
>4732	IdentifierDeclStatement	int i = 0 ;
>4733	IdentifierDecl	i = 0
>4734	AssignmentExpr	i = 0
>4735	PrimaryExpression	0
>4736	Identifier	i
>4737	Identifier	i
>4738	IdentifierDeclType	int
>4750	FunctionDef	ImageData 
>4751	ParameterList	 
>4752	ReturnType	void
>4753	CompoundStatement	 
>4754	ExpressionStatement	 
>4755	AssignmentExpr	m_cached_keys = true
>4756	Identifier	true
>4757	Identifier	m_cached_keys
>4758	ExpressionStatement	 
>4759	AssignmentExpr	m_num_keys = GetNumberOfKeys ( m_key_name )
>4760	CallExpression	GetNumberOfKeys ( m_key_name )
>4761	ArgumentList	m_key_name
>4762	Argument	m_key_name
>4763	Identifier	m_key_name
>4764	Callee	GetNumberOfKeys
>4765	Identifier	GetNumberOfKeys
>4766	Identifier	m_num_keys
>4775	FunctionDef	ImageData 
>4776	ParameterList	 
>4777	ReturnType	void
>4778	CompoundStatement	 
>4779	ExpressionStatement	 
>4780	AssignmentExpr	m_cached_dimensions = true
>4781	Identifier	true
>4782	Identifier	m_cached_dimensions
>4783	ExpressionStatement	 
>4784	AssignmentExpr	m_height = h
>4785	Identifier	h
>4786	Identifier	m_height
>4787	ExpressionStatement	 
>4788	AssignmentExpr	m_width = w
>4789	Identifier	w
>4790	Identifier	m_width
>4791	IfStatement	if ( f != NULL )
>4792	ElseStatement	else
>4793	CompoundStatement	 
>4794	IfStatement	if ( FileExists ( bmp_file ) )
>4795	ElseStatement	else
>4796	CompoundStatement	 
>4797	IfStatement	if ( FileExists ( jpeg_file ) )
>4798	ElseStatement	else
>4799	CompoundStatement	 
>4800	ExpressionStatement	 
>4801	Statement	 
>4802	Statement	 
>4803	Statement	 
>4804	Statement	 
>4805	Statement	 
>4806	Statement	 
>4807	Statement	 
>4808	CompoundStatement	 
>4809	ExpressionStatement	 
>4810	CallExpression	GetJPEGDimensions ( jpeg_file , w , h )
>4811	ArgumentList	jpeg_file
>4812	Argument	h
>4813	Identifier	h
>4814	Argument	w
>4815	Identifier	w
>4816	Argument	jpeg_file
>4817	Identifier	jpeg_file
>4818	Callee	GetJPEGDimensions
>4819	Identifier	GetJPEGDimensions
>4820	Condition	 
>4821	CallExpression	FileExists ( jpeg_file )
>4822	ArgumentList	jpeg_file
>4823	Argument	jpeg_file
>4824	Identifier	jpeg_file
>4825	Callee	FileExists
>4826	Identifier	FileExists
>4827	ExpressionStatement	 
>4828	AssignmentExpr	jpeg_file [ strlen ( m_name ) - 1 ] = 'g'
>4829	PrimaryExpression	'g'
>4830	ArrayIndexing	jpeg_file [ strlen ( m_name ) - 1 ]
>4831	AdditiveExpression	strlen ( m_name ) - 1
>4832	PrimaryExpression	1
>4833	CallExpression	strlen ( m_name )
>4834	ArgumentList	m_name
>4835	Argument	m_name
>4836	Identifier	m_name
>4837	Callee	strlen
>4838	Identifier	strlen
>4839	Identifier	jpeg_file
>4840	ExpressionStatement	 
>4841	AssignmentExpr	jpeg_file [ strlen ( m_name ) - 2 ] = 'p'
>4842	PrimaryExpression	'p'
>4843	ArrayIndexing	jpeg_file [ strlen ( m_name ) - 2 ]
>4844	AdditiveExpression	strlen ( m_name ) - 2
>4845	PrimaryExpression	2
>4846	CallExpression	strlen ( m_name )
>4847	ArgumentList	m_name
>4848	Argument	m_name
>4849	Identifier	m_name
>4850	Callee	strlen
>4851	Identifier	strlen
>4852	Identifier	jpeg_file
>4853	ExpressionStatement	 
>4854	AssignmentExpr	jpeg_file [ strlen ( m_name ) - 3 ] = 'j'
>4855	PrimaryExpression	'j'
>4856	ArrayIndexing	jpeg_file [ strlen ( m_name ) - 3 ]
>4857	AdditiveExpression	strlen ( m_name ) - 3
>4858	PrimaryExpression	3
>4859	CallExpression	strlen ( m_name )
>4860	ArgumentList	m_name
>4861	Argument	m_name
>4862	Identifier	m_name
>4863	Callee	strlen
>4864	Identifier	strlen
>4865	Identifier	jpeg_file
>4866	ExpressionStatement	 
>4867	CallExpression	strcpy ( jpeg_file , m_name )
>4868	ArgumentList	jpeg_file
>4869	Argument	m_name
>4870	Identifier	m_name
>4871	Argument	jpeg_file
>4872	Identifier	jpeg_file
>4873	Callee	strcpy
>4874	Identifier	strcpy
>4875	IdentifierDeclStatement	 
>4876	IdentifierDecl	jpeg_file [ 256 ]
>4877	PrimaryExpression	256
>4878	Identifier	jpeg_file
>4879	IdentifierDeclType	char [ 256 ]
>4880	CompoundStatement	 
>4881	ExpressionStatement	 
>4882	CallExpression	bmp_file_get_dimensions ( bmp_file , & w , & h )
>4883	ArgumentList	bmp_file
>4884	Argument	& h
>4885	UnaryOp	& h
>4886	Identifier	h
>4887	UnaryOperator	&
>4888	Argument	& w
>4889	UnaryOp	& w
>4890	Identifier	w
>4891	UnaryOperator	&
>4892	Argument	bmp_file
>4893	Identifier	bmp_file
>4894	Callee	bmp_file_get_dimensions
>4895	Identifier	bmp_file_get_dimensions
>4896	Condition	 
>4897	CallExpression	FileExists ( bmp_file )
>4898	ArgumentList	bmp_file
>4899	Argument	bmp_file
>4900	Identifier	bmp_file
>4901	Callee	FileExists
>4902	Identifier	FileExists
>4903	ExpressionStatement	 
>4904	AssignmentExpr	bmp_file [ strlen ( m_name ) - 1 ] = 'p'
>4905	PrimaryExpression	'p'
>4906	ArrayIndexing	bmp_file [ strlen ( m_name ) - 1 ]
>4907	AdditiveExpression	strlen ( m_name ) - 1
>4908	PrimaryExpression	1
>4909	CallExpression	strlen ( m_name )
>4910	ArgumentList	m_name
>4911	Argument	m_name
>4912	Identifier	m_name
>4913	Callee	strlen
>4914	Identifier	strlen
>4915	Identifier	bmp_file
>4916	ExpressionStatement	 
>4917	AssignmentExpr	bmp_file [ strlen ( m_name ) - 2 ] = 'm'
>4918	PrimaryExpression	'm'
>4919	ArrayIndexing	bmp_file [ strlen ( m_name ) - 2 ]
>4920	AdditiveExpression	strlen ( m_name ) - 2
>4921	PrimaryExpression	2
>4922	CallExpression	strlen ( m_name )
>4923	ArgumentList	m_name
>4924	Argument	m_name
>4925	Identifier	m_name
>4926	Callee	strlen
>4927	Identifier	strlen
>4928	Identifier	bmp_file
>4929	ExpressionStatement	 
>4930	AssignmentExpr	bmp_file [ strlen ( m_name ) - 3 ] = 'b'
>4931	PrimaryExpression	'b'
>4932	ArrayIndexing	bmp_file [ strlen ( m_name ) - 3 ]
>4933	AdditiveExpression	strlen ( m_name ) - 3
>4934	PrimaryExpression	3
>4935	CallExpression	strlen ( m_name )
>4936	ArgumentList	m_name
>4937	Argument	m_name
>4938	Identifier	m_name
>4939	Callee	strlen
>4940	Identifier	strlen
>4941	Identifier	bmp_file
>4942	ExpressionStatement	 
>4943	CallExpression	strcpy ( bmp_file , m_name )
>4944	ArgumentList	bmp_file
>4945	Argument	m_name
>4946	Identifier	m_name
>4947	Argument	bmp_file
>4948	Identifier	bmp_file
>4949	Callee	strcpy
>4950	Identifier	strcpy
>4951	IdentifierDeclStatement	 
>4952	IdentifierDecl	bmp_file [ 256 ]
>4953	PrimaryExpression	256
>4954	Identifier	bmp_file
>4955	IdentifierDeclType	char [ 256 ]
>4956	CompoundStatement	 
>4957	IfStatement	if ( strcmp ( m_name + len - 3 , \"pgm\" ) == 0 )
>4958	ElseStatement	else
>4959	IfStatement	if ( strcmp ( m_name + len - 3 , \"bmp\" ) == 0 )
>4960	ElseStatement	else
>4961	IfStatement	if ( strcmp ( m_name + len - 3 , \"jpg\" ) == 0 )
>4962	ExpressionStatement	 
>4963	CallExpression	GetJPEGDimensions ( m_name , w , h )
>4964	ArgumentList	m_name
>4965	Argument	h
>4966	Identifier	h
>4967	Argument	w
>4968	Identifier	w
>4969	Argument	m_name
>4970	Identifier	m_name
>4971	Callee	GetJPEGDimensions
>4972	Identifier	GetJPEGDimensions
>4973	Condition	 
>4974	EqualityExpression	strcmp ( m_name + len - 3 , \"jpg\" ) == 0
>4975	PrimaryExpression	0
>4976	CallExpression	strcmp ( m_name + len - 3 , \"jpg\" )
>4977	ArgumentList	m_name + len - 3
>4978	Argument	\"jpg\"
>4979	PrimaryExpression	\"jpg\"
>4980	Argument	m_name + len - 3
>4981	AdditiveExpression	m_name + len - 3
>4982	AdditiveExpression	len - 3
>4983	PrimaryExpression	3
>4984	Identifier	len
>4985	Identifier	m_name
>4986	Callee	strcmp
>4987	Identifier	strcmp
>4988	ExpressionStatement	 
>4989	CallExpression	bmp_file_get_dimensions ( m_name , & w , & h )
>4990	ArgumentList	m_name
>4991	Argument	& h
>4992	UnaryOp	& h
>4993	Identifier	h
>4994	UnaryOperator	&
>4995	Argument	& w
>4996	UnaryOp	& w
>4997	Identifier	w
>4998	UnaryOperator	&
>4999	Argument	m_name
>5000	Identifier	m_name
>5001	Callee	bmp_file_get_dimensions
>5002	Identifier	bmp_file_get_dimensions
>5003	Condition	 
>5004	EqualityExpression	strcmp ( m_name + len - 3 , \"bmp\" ) == 0
>5005	PrimaryExpression	0
>5006	CallExpression	strcmp ( m_name + len - 3 , \"bmp\" )
>5007	ArgumentList	m_name + len - 3
>5008	Argument	\"bmp\"
>5009	PrimaryExpression	\"bmp\"
>5010	Argument	m_name + len - 3
>5011	AdditiveExpression	m_name + len - 3
>5012	AdditiveExpression	len - 3
>5013	PrimaryExpression	3
>5014	Identifier	len
>5015	Identifier	m_name
>5016	Callee	strcmp
>5017	Identifier	strcmp
>5018	ExpressionStatement	 
>5019	CallExpression	img_read_pgm_dimensions ( m_name , & w , & h )
>5020	ArgumentList	m_name
>5021	Argument	& h
>5022	UnaryOp	& h
>5023	Identifier	h
>5024	UnaryOperator	&
>5025	Argument	& w
>5026	UnaryOp	& w
>5027	Identifier	w
>5028	UnaryOperator	&
>5029	Argument	m_name
>5030	Identifier	m_name
>5031	Callee	img_read_pgm_dimensions
>5032	Identifier	img_read_pgm_dimensions
>5033	Condition	 
>5034	EqualityExpression	strcmp ( m_name + len - 3 , \"pgm\" ) == 0
>5035	PrimaryExpression	0
>5036	CallExpression	strcmp ( m_name + len - 3 , \"pgm\" )
>5037	ArgumentList	m_name + len - 3
>5038	Argument	\"pgm\"
>5039	PrimaryExpression	\"pgm\"
>5040	Argument	m_name + len - 3
>5041	AdditiveExpression	m_name + len - 3
>5042	AdditiveExpression	len - 3
>5043	PrimaryExpression	3
>5044	Identifier	len
>5045	Identifier	m_name
>5046	Callee	strcmp
>5047	Identifier	strcmp
>5048	IdentifierDeclStatement	 
>5049	IdentifierDecl	len = strlen ( m_name )
>5050	AssignmentExpr	len = strlen ( m_name )
>5051	CallExpression	strlen ( m_name )
>5052	ArgumentList	m_name
>5053	Argument	m_name
>5054	Identifier	m_name
>5055	Callee	strlen
>5056	Identifier	strlen
>5057	Identifier	len
>5058	Identifier	len
>5059	IdentifierDeclType	int
>5060	ExpressionStatement	 
>5061	CallExpression	fclose ( f )
>5062	ArgumentList	f
>5063	Argument	f
>5064	Identifier	f
>5065	Callee	fclose
>5066	Identifier	fclose
>5067	Condition	 
>5068	EqualityExpression	f != NULL
>5069	Identifier	NULL
>5070	Identifier	f
>5071	IdentifierDeclStatement	 
>5072	IdentifierDecl	* f = fopen ( m_name , \"r\" )
>5073	AssignmentExpr	* f = fopen ( m_name , \"r\" )
>5074	CallExpression	fopen ( m_name , \"r\" )
>5075	ArgumentList	m_name
>5076	Argument	\"r\"
>5077	PrimaryExpression	\"r\"
>5078	Argument	m_name
>5079	Identifier	m_name
>5080	Callee	fopen
>5081	Identifier	fopen
>5082	Identifier	f
>5083	Identifier	f
>5084	IdentifierDeclType	FILE *
>5085	IdentifierDeclStatement	 
>5086	IdentifierDecl	h = 1000
>5087	AssignmentExpr	h = 1000
>5088	PrimaryExpression	1000
>5089	Identifier	h
>5090	Identifier	h
>5091	IdentifierDeclType	int
>5092	IdentifierDecl	w = 1504
>5093	AssignmentExpr	w = 1504
>5094	PrimaryExpression	1504
>5095	Identifier	w
>5096	Identifier	w
>5097	IdentifierDeclType	int
>5122	FunctionDef	ImageData 
>5123	ParameterList	 
>5124	ReturnType	int
>5125	CompoundStatement	 
>5126	IfStatement	if ( m_image_loaded )
>5127	ElseStatement	else
>5128	CompoundStatement	 
>5129	ReturnStatement	 
>5130	CallExpression	iround ( global_scale * m_width )
>5131	ArgumentList	global_scale * m_width
>5132	Argument	global_scale * m_width
>5133	MultiplicativeExpression	global_scale * m_width
>5134	Identifier	m_width
>5135	Identifier	global_scale
>5136	Callee	iround
>5137	Identifier	iround
>5138	ExpressionStatement	 
>5139	CallExpression	CacheDimensions ( )
>5140	ArgumentList	 
>5141	Callee	CacheDimensions
>5142	Identifier	CacheDimensions
>5143	IfStatement	if ( m_cached_dimensions )
>5144	ReturnStatement	 
>5145	CallExpression	iround ( global_scale * m_width )
>5146	ArgumentList	global_scale * m_width
>5147	Argument	global_scale * m_width
>5148	MultiplicativeExpression	global_scale * m_width
>5149	Identifier	m_width
>5150	Identifier	global_scale
>5151	Callee	iround
>5152	Identifier	iround
>5153	Condition	 
>5154	Identifier	m_cached_dimensions
>5155	ReturnStatement	 
>5156	CallExpression	iround ( global_scale * m_img -> w )
>5157	ArgumentList	global_scale * m_img -> w
>5158	Argument	global_scale * m_img -> w
>5159	MultiplicativeExpression	global_scale * m_img -> w
>5160	PtrMemberAccess	m_img -> w
>5161	Identifier	w
>5162	Identifier	m_img
>5163	Identifier	global_scale
>5164	Callee	iround
>5165	Identifier	iround
>5166	Condition	 
>5167	Identifier	m_image_loaded
>5179	FunctionDef	ImageData 
>5180	ParameterList	 
>5181	ReturnType	int
>5182	CompoundStatement	 
>5183	IfStatement	if ( m_image_loaded )
>5184	ElseStatement	else
>5185	CompoundStatement	 
>5186	ReturnStatement	 
>5187	CallExpression	iround ( global_scale * m_height )
>5188	ArgumentList	global_scale * m_height
>5189	Argument	global_scale * m_height
>5190	MultiplicativeExpression	global_scale * m_height
>5191	Identifier	m_height
>5192	Identifier	global_scale
>5193	Callee	iround
>5194	Identifier	iround
>5195	ExpressionStatement	 
>5196	CallExpression	CacheDimensions ( )
>5197	ArgumentList	 
>5198	Callee	CacheDimensions
>5199	Identifier	CacheDimensions
>5200	IfStatement	if ( m_cached_dimensions )
>5201	ReturnStatement	 
>5202	CallExpression	iround ( global_scale * m_height )
>5203	ArgumentList	global_scale * m_height
>5204	Argument	global_scale * m_height
>5205	MultiplicativeExpression	global_scale * m_height
>5206	Identifier	m_height
>5207	Identifier	global_scale
>5208	Callee	iround
>5209	Identifier	iround
>5210	Condition	 
>5211	Identifier	m_cached_dimensions
>5212	ReturnStatement	 
>5213	CallExpression	iround ( global_scale * m_img -> h )
>5214	ArgumentList	global_scale * m_img -> h
>5215	Argument	global_scale * m_img -> h
>5216	MultiplicativeExpression	global_scale * m_img -> h
>5217	PtrMemberAccess	m_img -> h
>5218	Identifier	h
>5219	Identifier	m_img
>5220	Identifier	global_scale
>5221	Callee	iround
>5222	Identifier	iround
>5223	Condition	 
>5224	Identifier	m_image_loaded
>5236	FunctionDef	ImageData 
>5237	ParameterList	 
>5238	ReturnType	int
>5239	CompoundStatement	 
>5240	ReturnStatement	 
>5241	MultiplicativeExpression	GetWidth ( ) * GetHeight ( )
>5242	CallExpression	GetHeight ( )
>5243	ArgumentList	 
>5244	Callee	GetHeight
>5245	Identifier	GetHeight
>5246	CallExpression	GetWidth ( )
>5247	ArgumentList	 
>5248	Callee	GetWidth
>5249	Identifier	GetWidth
>5255	FunctionDef	ImageData 
>5256	ParameterList	char * buf
>5257	Parameter	 
>5258	Identifier	buf
>5259	ParameterType	char *
>5260	ReturnType	void
>5261	CompoundStatement	 
>5262	ExpressionStatement	 
>5263	AssignmentExpr	buf [ strlen ( buf ) - 4 ] = 0
>5264	PrimaryExpression	0
>5265	ArrayIndexing	buf [ strlen ( buf ) - 4 ]
>5266	AdditiveExpression	strlen ( buf ) - 4
>5267	PrimaryExpression	4
>5268	CallExpression	strlen ( buf )
>5269	ArgumentList	buf
>5270	Argument	buf
>5271	Identifier	buf
>5272	Callee	strlen
>5273	Identifier	strlen
>5274	Identifier	buf
>5275	IfStatement	if ( i == - 1 )
>5276	ElseStatement	else
>5277	ExpressionStatement	 
>5278	CallExpression	strcpy ( buf , m_name + i + 1 )
>5279	ArgumentList	buf
>5280	Argument	m_name + i + 1
>5281	AdditiveExpression	m_name + i + 1
>5282	AdditiveExpression	i + 1
>5283	PrimaryExpression	1
>5284	Identifier	i
>5285	Identifier	m_name
>5286	Argument	buf
>5287	Identifier	buf
>5288	Callee	strcpy
>5289	Identifier	strcpy
>5290	ExpressionStatement	 
>5291	CallExpression	strcpy ( buf , m_name )
>5292	ArgumentList	buf
>5293	Argument	m_name
>5294	Identifier	m_name
>5295	Argument	buf
>5296	Identifier	buf
>5297	Callee	strcpy
>5298	Identifier	strcpy
>5299	Condition	 
>5300	EqualityExpression	i == - 1
>5301	UnaryOp	- 1
>5302	PrimaryExpression	1
>5303	UnaryOperator	-
>5304	Identifier	i
>5305	ForStatement	for ( i = len - 1 ; i >= 0 && m_name [ i ] != '/' ; i -- )
>5306	CompoundStatement	 
>5307	IncDecOp	 
>5308	IncDec	--
>5309	Identifier	i
>5310	Condition	 
>5311	AndExpression	i >= 0 && m_name [ i ] != '/'
>5312	EqualityExpression	m_name [ i ] != '/'
>5313	PrimaryExpression	'/'
>5314	ArrayIndexing	m_name [ i ]
>5315	Identifier	i
>5316	Identifier	m_name
>5317	RelationalExpression	i >= 0
>5318	PrimaryExpression	0
>5319	Identifier	i
>5320	ForInit	 
>5321	AssignmentExpr	i = len - 1
>5322	AdditiveExpression	len - 1
>5323	PrimaryExpression	1
>5324	Identifier	len
>5325	Identifier	i
>5326	IdentifierDeclStatement	 
>5327	IdentifierDecl	i
>5328	Identifier	i
>5329	IdentifierDeclType	int
>5330	IdentifierDeclStatement	 
>5331	IdentifierDecl	len = strlen ( m_name )
>5332	AssignmentExpr	len = strlen ( m_name )
>5333	CallExpression	strlen ( m_name )
>5334	ArgumentList	m_name
>5335	Argument	m_name
>5336	Identifier	m_name
>5337	Callee	strlen
>5338	Identifier	strlen
>5339	Identifier	len
>5340	Identifier	len
>5341	IdentifierDeclType	int
>5354	FunctionDef	ImageData 
>5355	ParameterList	char * buf
>5356	Parameter	 
>5357	Identifier	buf
>5358	ParameterType	char *
>5359	ReturnType	void
>5360	CompoundStatement	 
>5361	IfStatement	if ( m_real_name != NULL )
>5362	ElseStatement	else
>5363	CompoundStatement	 
>5364	ExpressionStatement	 
>5365	CallExpression	GetBaseName ( buf )
>5366	ArgumentList	buf
>5367	Argument	buf
>5368	Identifier	buf
>5369	Callee	GetBaseName
>5370	Identifier	GetBaseName
>5371	CompoundStatement	 
>5372	ExpressionStatement	 
>5373	CallExpression	strcpy ( buf , m_real_name )
>5374	ArgumentList	buf
>5375	Argument	m_real_name
>5376	Identifier	m_real_name
>5377	Argument	buf
>5378	Identifier	buf
>5379	Callee	strcpy
>5380	Identifier	strcpy
>5381	Condition	 
>5382	EqualityExpression	m_real_name != NULL
>5383	Identifier	NULL
>5384	Identifier	m_real_name
>5391	FunctionDef	ImageData 
>5392	ParameterList	char * buf
>5393	Parameter	 
>5394	Identifier	buf
>5395	ParameterType	char *
>5396	ReturnType	void
>5397	CompoundStatement	 
>5398	ExpressionStatement	 
>5399	AssignmentExpr	buf [ strlen ( m_name ) - 1 ] = 'x'
>5400	PrimaryExpression	'x'
>5401	ArrayIndexing	buf [ strlen ( m_name ) - 1 ]
>5402	AdditiveExpression	strlen ( m_name ) - 1
>5403	PrimaryExpression	1
>5404	CallExpression	strlen ( m_name )
>5405	ArgumentList	m_name
>5406	Argument	m_name
>5407	Identifier	m_name
>5408	Callee	strlen
>5409	Identifier	strlen
>5410	Identifier	buf
>5411	ExpressionStatement	 
>5412	AssignmentExpr	buf [ strlen ( m_name ) - 2 ] = 't'
>5413	PrimaryExpression	't'
>5414	ArrayIndexing	buf [ strlen ( m_name ) - 2 ]
>5415	AdditiveExpression	strlen ( m_name ) - 2
>5416	PrimaryExpression	2
>5417	CallExpression	strlen ( m_name )
>5418	ArgumentList	m_name
>5419	Argument	m_name
>5420	Identifier	m_name
>5421	Callee	strlen
>5422	Identifier	strlen
>5423	Identifier	buf
>5424	ExpressionStatement	 
>5425	AssignmentExpr	buf [ strlen ( m_name ) - 3 ] = 'c'
>5426	PrimaryExpression	'c'
>5427	ArrayIndexing	buf [ strlen ( m_name ) - 3 ]
>5428	AdditiveExpression	strlen ( m_name ) - 3
>5429	PrimaryExpression	3
>5430	CallExpression	strlen ( m_name )
>5431	ArgumentList	m_name
>5432	Argument	m_name
>5433	Identifier	m_name
>5434	Callee	strlen
>5435	Identifier	strlen
>5436	Identifier	buf
>5437	ExpressionStatement	 
>5438	CallExpression	strcpy ( buf , m_name )
>5439	ArgumentList	buf
>5440	Argument	m_name
>5441	Identifier	m_name
>5442	Argument	buf
>5443	Identifier	buf
>5444	Callee	strcpy
>5445	Identifier	strcpy
>5454	FunctionDef	ImageData 
>5455	ParameterList	 
>5456	ReturnType	bool
>5457	CompoundStatement	 
>5458	IfStatement	if ( FileExists ( buf ) )
>5459	ElseStatement	else
>5460	ReturnStatement	 
>5461	Identifier	false
>5462	ReturnStatement	 
>5463	Identifier	true
>5464	Condition	 
>5465	CallExpression	FileExists ( buf )
>5466	ArgumentList	buf
>5467	Argument	buf
>5468	Identifier	buf
>5469	Callee	FileExists
>5470	Identifier	FileExists
>5471	ExpressionStatement	 
>5472	CallExpression	GetCompressedTextureFilename ( buf )
>5473	ArgumentList	buf
>5474	Argument	buf
>5475	Identifier	buf
>5476	Callee	GetCompressedTextureFilename
>5477	Identifier	GetCompressedTextureFilename
>5478	IdentifierDeclStatement	 
>5479	IdentifierDecl	buf [ 256 ]
>5480	PrimaryExpression	256
>5481	Identifier	buf
>5482	IdentifierDeclType	char [ 256 ]
>5490	FunctionDef	ImageData 
>5491	ParameterList	 
>5492	ReturnType	BoundingBox
>5493	CompoundStatement	 
>5494	ReturnStatement	 
>5495	CallExpression	BoundingBox ( - 0.5 * w , - 0.5 * h , 0.5 * w , 0.5 * h )
>5496	ArgumentList	- 0.5 * w
>5497	Argument	0.5 * h
>5498	MultiplicativeExpression	0.5 * h
>5499	Identifier	h
>5500	PrimaryExpression	0.5
>5501	Argument	0.5 * w
>5502	MultiplicativeExpression	0.5 * w
>5503	Identifier	w
>5504	PrimaryExpression	0.5
>5505	Argument	- 0.5 * h
>5506	MultiplicativeExpression	- 0.5 * h
>5507	Identifier	h
>5508	UnaryOp	- 0.5
>5509	PrimaryExpression	0.5
>5510	UnaryOperator	-
>5511	Argument	- 0.5 * w
>5512	MultiplicativeExpression	- 0.5 * w
>5513	Identifier	w
>5514	UnaryOp	- 0.5
>5515	PrimaryExpression	0.5
>5516	UnaryOperator	-
>5517	Callee	BoundingBox
>5518	Identifier	BoundingBox
>5519	IdentifierDeclStatement	 
>5520	IdentifierDecl	h = GetHeight ( )
>5521	AssignmentExpr	h = GetHeight ( )
>5522	CallExpression	GetHeight ( )
>5523	ArgumentList	 
>5524	Callee	GetHeight
>5525	Identifier	GetHeight
>5526	Identifier	h
>5527	Identifier	h
>5528	IdentifierDeclType	int
>5529	IdentifierDecl	w = GetWidth ( )
>5530	AssignmentExpr	w = GetWidth ( )
>5531	CallExpression	GetWidth ( )
>5532	ArgumentList	 
>5533	Callee	GetWidth
>5534	Identifier	GetWidth
>5535	Identifier	w
>5536	Identifier	w
>5537	IdentifierDeclType	int
>5546	FunctionDef	ImageData 
>5547	ParameterList	v2_t point
>5548	Parameter	 
>5549	Identifier	point
>5550	ParameterType	v2_t
>5551	ReturnType	v2_t
>5552	CompoundStatement	 
>5553	ReturnStatement	 
>5554	CallExpression	v2_new ( ( Vx ( point ) + 0.5 * w ) / ( double ) w , ( Vy ( point ) + 0.5 * h ) / ( double ) h )
>5555	ArgumentList	( Vx ( point ) + 0.5 * w ) / ( double ) w
>5556	Argument	( Vy ( point ) + 0.5 * h ) / ( double ) h
>5557	MultiplicativeExpression	( Vy ( point ) + 0.5 * h ) / ( double ) h
>5558	CastExpression	( double ) h
>5559	Identifier	h
>5560	CastTarget	double
>5561	AdditiveExpression	Vy ( point ) + 0.5 * h
>5562	MultiplicativeExpression	0.5 * h
>5563	Identifier	h
>5564	PrimaryExpression	0.5
>5565	CallExpression	Vy ( point )
>5566	ArgumentList	point
>5567	Argument	point
>5568	Identifier	point
>5569	Callee	Vy
>5570	Identifier	Vy
>5571	Argument	( Vx ( point ) + 0.5 * w ) / ( double ) w
>5572	MultiplicativeExpression	( Vx ( point ) + 0.5 * w ) / ( double ) w
>5573	CastExpression	( double ) w
>5574	Identifier	w
>5575	CastTarget	double
>5576	AdditiveExpression	Vx ( point ) + 0.5 * w
>5577	MultiplicativeExpression	0.5 * w
>5578	Identifier	w
>5579	PrimaryExpression	0.5
>5580	CallExpression	Vx ( point )
>5581	ArgumentList	point
>5582	Argument	point
>5583	Identifier	point
>5584	Callee	Vx
>5585	Identifier	Vx
>5586	Callee	v2_new
>5587	Identifier	v2_new
>5588	IdentifierDeclStatement	 
>5589	IdentifierDecl	h = GetHeight ( )
>5590	AssignmentExpr	h = GetHeight ( )
>5591	CallExpression	GetHeight ( )
>5592	ArgumentList	 
>5593	Callee	GetHeight
>5594	Identifier	GetHeight
>5595	Identifier	h
>5596	Identifier	h
>5597	IdentifierDeclType	int
>5598	IdentifierDeclStatement	 
>5599	IdentifierDecl	w = GetWidth ( )
>5600	AssignmentExpr	w = GetWidth ( )
>5601	CallExpression	GetWidth ( )
>5602	ArgumentList	 
>5603	Callee	GetWidth
>5604	Identifier	GetWidth
>5605	Identifier	w
>5606	Identifier	w
>5607	IdentifierDeclType	int
>5619	FunctionDef	ImageData 
>5620	ParameterList	const std 
>5621	Parameter	 
>5622	Identifier	pts
>5623	ParameterType	const std 
>5624	ReturnType	std 
>5625	CompoundStatement	 
>5626	ReturnStatement	 
>5627	Identifier	coords
>5628	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>5629	CompoundStatement	 
>5630	ExpressionStatement	 
>5631	CallExpression	coords . push_back ( GetPointTexCoords ( pts [ i ] ) )
>5632	ArgumentList	GetPointTexCoords ( pts [ i ] )
>5633	Argument	GetPointTexCoords ( pts [ i ] )
>5634	CallExpression	GetPointTexCoords ( pts [ i ] )
>5635	ArgumentList	pts [ i ]
>5636	Argument	pts [ i ]
>5637	ArrayIndexing	pts [ i ]
>5638	Identifier	i
>5639	Identifier	pts
>5640	Callee	GetPointTexCoords
>5641	Identifier	GetPointTexCoords
>5642	Callee	coords . push_back
>5643	MemberAccess	coords . push_back
>5644	Identifier	push_back
>5645	Identifier	coords
>5646	IncDecOp	 
>5647	IncDec	++
>5648	Identifier	i
>5649	Condition	 
>5650	RelationalExpression	i < num_points
>5651	Identifier	num_points
>5652	Identifier	i
>5653	ForInit	 
>5654	IdentifierDeclStatement	int i = 0 ;
>5655	IdentifierDecl	i = 0
>5656	AssignmentExpr	i = 0
>5657	PrimaryExpression	0
>5658	Identifier	i
>5659	Identifier	i
>5660	IdentifierDeclType	int
>5661	IdentifierDeclStatement	 
>5662	IdentifierDecl	coords
>5663	Identifier	coords
>5664	IdentifierDeclType	std 
>5665	IdentifierDeclStatement	 
>5666	IdentifierDecl	num_points = ( int ) pts . size ( )
>5667	AssignmentExpr	num_points = ( int ) pts . size ( )
>5668	CastExpression	( int ) pts . size ( )
>5669	CallExpression	pts . size ( )
>5670	ArgumentList	 
>5671	Callee	pts . size
>5672	MemberAccess	pts . size
>5673	Identifier	size
>5674	Identifier	pts
>5675	CastTarget	int
>5676	Identifier	num_points
>5677	Identifier	num_points
>5678	IdentifierDeclType	int
>5690	FunctionDef	ImageData 
>5691	ParameterList	double x , double y
>5692	Parameter	 
>5693	Identifier	y
>5694	ParameterType	double
>5695	Parameter	 
>5696	Identifier	x
>5697	ParameterType	double
>5698	ReturnType	bool
>5699	CompoundStatement	 
>5700	ReturnStatement	 
>5701	Identifier	true
>5702	IfStatement	if ( x < 0.0 || x >= w - 1 || y < 0.0 || y >= h - 1 )
>5703	ReturnStatement	 
>5704	Identifier	false
>5705	Condition	 
>5706	OrExpression	x < 0.0 || x >= w - 1 || y < 0.0 || y >= h - 1
>5707	OrExpression	x >= w - 1 || y < 0.0 || y >= h - 1
>5708	OrExpression	y < 0.0 || y >= h - 1
>5709	RelationalExpression	y >= h - 1
>5710	AdditiveExpression	h - 1
>5711	PrimaryExpression	1
>5712	Identifier	h
>5713	Identifier	y
>5714	RelationalExpression	y < 0.0
>5715	PrimaryExpression	0.0
>5716	Identifier	y
>5717	RelationalExpression	x >= w - 1
>5718	AdditiveExpression	w - 1
>5719	PrimaryExpression	1
>5720	Identifier	w
>5721	Identifier	x
>5722	RelationalExpression	x < 0.0
>5723	PrimaryExpression	0.0
>5724	Identifier	x
>5725	IdentifierDeclStatement	 
>5726	IdentifierDecl	h = GetHeight ( )
>5727	AssignmentExpr	h = GetHeight ( )
>5728	CallExpression	GetHeight ( )
>5729	ArgumentList	 
>5730	Callee	GetHeight
>5731	Identifier	GetHeight
>5732	Identifier	h
>5733	Identifier	h
>5734	IdentifierDeclType	int
>5735	IdentifierDeclStatement	 
>5736	IdentifierDecl	w = GetWidth ( )
>5737	AssignmentExpr	w = GetWidth ( )
>5738	CallExpression	GetWidth ( )
>5739	ArgumentList	 
>5740	Callee	GetWidth
>5741	Identifier	GetWidth
>5742	Identifier	w
>5743	Identifier	w
>5744	IdentifierDeclType	int
>5756	FunctionDef	ImageData 
>5757	ParameterList	double x , double y , double & x_n , double & y_n
>5758	Parameter	 
>5759	Identifier	y_n
>5760	ParameterType	double &
>5761	Parameter	 
>5762	Identifier	x_n
>5763	ParameterType	double &
>5764	Parameter	 
>5765	Identifier	y
>5766	ParameterType	double
>5767	Parameter	 
>5768	Identifier	x
>5769	ParameterType	double
>5770	ReturnType	void
>5771	CompoundStatement	 
>5772	ExpressionStatement	 
>5773	AssignmentExpr	y_n = y * size2i
>5774	MultiplicativeExpression	y * size2i
>5775	Identifier	size2i
>5776	Identifier	y
>5777	Identifier	y_n
>5778	ExpressionStatement	 
>5779	AssignmentExpr	x_n = x * size2i
>5780	MultiplicativeExpression	x * size2i
>5781	Identifier	size2i
>5782	Identifier	x
>5783	Identifier	x_n
>5784	IdentifierDeclStatement	 
>5785	IdentifierDecl	size2i = 1.0 / size2
>5786	AssignmentExpr	size2i = 1.0 / size2
>5787	MultiplicativeExpression	1.0 / size2
>5788	Identifier	size2
>5789	PrimaryExpression	1.0
>5790	Identifier	size2i
>5791	Identifier	size2i
>5792	IdentifierDeclType	double
>5793	IdentifierDeclStatement	 
>5794	IdentifierDecl	size2 = 0.5 * size
>5795	AssignmentExpr	size2 = 0.5 * size
>5796	MultiplicativeExpression	0.5 * size
>5797	Identifier	size
>5798	PrimaryExpression	0.5
>5799	Identifier	size2
>5800	Identifier	size2
>5801	IdentifierDeclType	double
>5802	IdentifierDeclStatement	 
>5803	IdentifierDecl	size = MAX ( GetWidth ( ) , GetHeight ( ) )
>5804	AssignmentExpr	size = MAX ( GetWidth ( ) , GetHeight ( ) )
>5805	CallExpression	MAX ( GetWidth ( ) , GetHeight ( ) )
>5806	ArgumentList	GetWidth ( )
>5807	Argument	GetHeight ( )
>5808	CallExpression	GetHeight ( )
>5809	ArgumentList	 
>5810	Callee	GetHeight
>5811	Identifier	GetHeight
>5812	Argument	GetWidth ( )
>5813	CallExpression	GetWidth ( )
>5814	ArgumentList	 
>5815	Callee	GetWidth
>5816	Identifier	GetWidth
>5817	Callee	MAX
>5818	Identifier	MAX
>5819	Identifier	size
>5820	Identifier	size
>5821	IdentifierDeclType	double
>5835	FunctionDef	ImageData 
>5836	ParameterList	double x_n , double y_n , double & x , double & y
>5837	Parameter	 
>5838	Identifier	y
>5839	ParameterType	double &
>5840	Parameter	 
>5841	Identifier	x
>5842	ParameterType	double &
>5843	Parameter	 
>5844	Identifier	y_n
>5845	ParameterType	double
>5846	Parameter	 
>5847	Identifier	x_n
>5848	ParameterType	double
>5849	ReturnType	void
>5850	CompoundStatement	 
>5851	ExpressionStatement	 
>5852	AssignmentExpr	y = y_n * size2
>5853	MultiplicativeExpression	y_n * size2
>5854	Identifier	size2
>5855	Identifier	y_n
>5856	Identifier	y
>5857	ExpressionStatement	 
>5858	AssignmentExpr	x = x_n * size2
>5859	MultiplicativeExpression	x_n * size2
>5860	Identifier	size2
>5861	Identifier	x_n
>5862	Identifier	x
>5863	IdentifierDeclStatement	 
>5864	IdentifierDecl	size2 = 0.5 * size
>5865	AssignmentExpr	size2 = 0.5 * size
>5866	MultiplicativeExpression	0.5 * size
>5867	Identifier	size
>5868	PrimaryExpression	0.5
>5869	Identifier	size2
>5870	Identifier	size2
>5871	IdentifierDeclType	double
>5872	IdentifierDeclStatement	 
>5873	IdentifierDecl	size = MAX ( GetWidth ( ) , GetHeight ( ) )
>5874	AssignmentExpr	size = MAX ( GetWidth ( ) , GetHeight ( ) )
>5875	CallExpression	MAX ( GetWidth ( ) , GetHeight ( ) )
>5876	ArgumentList	GetWidth ( )
>5877	Argument	GetHeight ( )
>5878	CallExpression	GetHeight ( )
>5879	ArgumentList	 
>5880	Callee	GetHeight
>5881	Identifier	GetHeight
>5882	Argument	GetWidth ( )
>5883	CallExpression	GetWidth ( )
>5884	ArgumentList	 
>5885	Callee	GetWidth
>5886	Identifier	GetWidth
>5887	Callee	MAX
>5888	Identifier	MAX
>5889	Identifier	size
>5890	Identifier	size
>5891	IdentifierDeclType	double
>5904	FunctionDef	ImageData 
>5905	ParameterList	double x , double y , double & x_out , double & y_out
>5906	Parameter	 
>5907	Identifier	y_out
>5908	ParameterType	double &
>5909	Parameter	 
>5910	Identifier	x_out
>5911	ParameterType	double &
>5912	Parameter	 
>5913	Identifier	y
>5914	ParameterType	double
>5915	Parameter	 
>5916	Identifier	x
>5917	ParameterType	double
>5918	ReturnType	void
>5919	CompoundStatement	 
>5920	ExpressionStatement	 
>5921	CallExpression	DistortPoint ( x , y , I , x_out , y_out )
>5922	ArgumentList	x
>5923	Argument	y_out
>5924	Identifier	y_out
>5925	Argument	x_out
>5926	Identifier	x_out
>5927	Argument	I
>5928	Identifier	I
>5929	Argument	y
>5930	Identifier	y
>5931	Argument	x
>5932	Identifier	x
>5933	Callee	DistortPoint
>5934	Identifier	DistortPoint
>5935	ExpressionStatement	 
>5936	CallExpression	GetRotationFromSpherical ( - 0.5 * M_PI , 0.5 * M_PI , I )
>5937	ArgumentList	- 0.5 * M_PI
>5938	Argument	I
>5939	Identifier	I
>5940	Argument	0.5 * M_PI
>5941	MultiplicativeExpression	0.5 * M_PI
>5942	Identifier	M_PI
>5943	PrimaryExpression	0.5
>5944	Argument	- 0.5 * M_PI
>5945	MultiplicativeExpression	- 0.5 * M_PI
>5946	Identifier	M_PI
>5947	UnaryOp	- 0.5
>5948	PrimaryExpression	0.5
>5949	UnaryOperator	-
>5950	Callee	GetRotationFromSpherical
>5951	Identifier	GetRotationFromSpherical
>5952	IdentifierDeclStatement	 
>5953	IdentifierDecl	I [ 9 ]
>5954	PrimaryExpression	9
>5955	Identifier	I
>5956	IdentifierDeclType	double [ 9 ]
>5966	FunctionDef	ImageData 
>5967	ParameterList	double x , double y , double * R , double & x_out , double & y_out
>5968	Parameter	 
>5969	Identifier	y_out
>5970	ParameterType	double &
>5971	Parameter	 
>5972	Identifier	x_out
>5973	ParameterType	double &
>5974	Parameter	 
>5975	Identifier	R
>5976	ParameterType	double *
>5977	Parameter	 
>5978	Identifier	y
>5979	ParameterType	double
>5980	Parameter	 
>5981	Identifier	x
>5982	ParameterType	double
>5983	ReturnType	void
>5984	CompoundStatement	 
>5985	ExpressionStatement	 
>5986	AssignmentExpr	y_out = yn * ( rnew / r ) + m_fCy
>5987	AdditiveExpression	yn * ( rnew / r ) + m_fCy
>5988	Identifier	m_fCy
>5989	MultiplicativeExpression	yn * ( rnew / r )
>5990	MultiplicativeExpression	rnew / r
>5991	Identifier	r
>5992	Identifier	rnew
>5993	Identifier	yn
>5994	Identifier	y_out
>5995	ExpressionStatement	 
>5996	AssignmentExpr	x_out = xn * ( rnew / r ) + m_fCx
>5997	AdditiveExpression	xn * ( rnew / r ) + m_fCx
>5998	Identifier	m_fCx
>5999	MultiplicativeExpression	xn * ( rnew / r )
>6000	MultiplicativeExpression	rnew / r
>6001	Identifier	r
>6002	Identifier	rnew
>6003	Identifier	xn
>6004	Identifier	x_out
>6005	IdentifierDeclStatement	 
>6006	IdentifierDecl	rnew = m_fRad * angle / ( 0.5 * m_fAngle )
>6007	AssignmentExpr	rnew = m_fRad * angle / ( 0.5 * m_fAngle )
>6008	MultiplicativeExpression	m_fRad * angle / ( 0.5 * m_fAngle )
>6009	MultiplicativeExpression	angle / ( 0.5 * m_fAngle )
>6010	MultiplicativeExpression	0.5 * m_fAngle
>6011	Identifier	m_fAngle
>6012	PrimaryExpression	0.5
>6013	Identifier	angle
>6014	Identifier	m_fRad
>6015	Identifier	rnew
>6016	Identifier	rnew
>6017	IdentifierDeclType	double
>6018	IdentifierDeclStatement	 
>6019	IdentifierDecl	angle = RAD2DEG ( atan ( r / m_fFocal ) )
>6020	AssignmentExpr	angle = RAD2DEG ( atan ( r / m_fFocal ) )
>6021	CallExpression	RAD2DEG ( atan ( r / m_fFocal ) )
>6022	ArgumentList	atan ( r / m_fFocal )
>6023	Argument	atan ( r / m_fFocal )
>6024	CallExpression	atan ( r / m_fFocal )
>6025	ArgumentList	r / m_fFocal
>6026	Argument	r / m_fFocal
>6027	MultiplicativeExpression	r / m_fFocal
>6028	Identifier	m_fFocal
>6029	Identifier	r
>6030	Callee	atan
>6031	Identifier	atan
>6032	Callee	RAD2DEG
>6033	Identifier	RAD2DEG
>6034	Identifier	angle
>6035	Identifier	angle
>6036	IdentifierDeclType	double
>6037	IdentifierDeclStatement	 
>6038	IdentifierDecl	r = sqrt ( xn * xn + yn * yn )
>6039	AssignmentExpr	r = sqrt ( xn * xn + yn * yn )
>6040	CallExpression	sqrt ( xn * xn + yn * yn )
>6041	ArgumentList	xn * xn + yn * yn
>6042	Argument	xn * xn + yn * yn
>6043	AdditiveExpression	xn * xn + yn * yn
>6044	MultiplicativeExpression	yn * yn
>6045	Identifier	yn
>6046	Identifier	yn
>6047	MultiplicativeExpression	xn * xn
>6048	Identifier	xn
>6049	Identifier	xn
>6050	Callee	sqrt
>6051	Identifier	sqrt
>6052	Identifier	r
>6053	Identifier	r
>6054	IdentifierDeclType	double
>6055	IfStatement	if ( ray_rot [ 2 ] <= 0.0 )
>6056	ElseStatement	else
>6057	CompoundStatement	 
>6058	ExpressionStatement	 
>6059	AssignmentExpr	yn = ray_rot [ 1 ] * m_fFocal / ray_rot [ 2 ]
>6060	MultiplicativeExpression	ray_rot [ 1 ] * m_fFocal / ray_rot [ 2 ]
>6061	MultiplicativeExpression	m_fFocal / ray_rot [ 2 ]
>6062	ArrayIndexing	ray_rot [ 2 ]
>6063	PrimaryExpression	2
>6064	Identifier	ray_rot
>6065	Identifier	m_fFocal
>6066	ArrayIndexing	ray_rot [ 1 ]
>6067	PrimaryExpression	1
>6068	Identifier	ray_rot
>6069	Identifier	yn
>6070	ExpressionStatement	 
>6071	AssignmentExpr	xn = ray_rot [ 0 ] * m_fFocal / ray_rot [ 2 ]
>6072	MultiplicativeExpression	ray_rot [ 0 ] * m_fFocal / ray_rot [ 2 ]
>6073	MultiplicativeExpression	m_fFocal / ray_rot [ 2 ]
>6074	ArrayIndexing	ray_rot [ 2 ]
>6075	PrimaryExpression	2
>6076	Identifier	ray_rot
>6077	Identifier	m_fFocal
>6078	ArrayIndexing	ray_rot [ 0 ]
>6079	PrimaryExpression	0
>6080	Identifier	ray_rot
>6081	Identifier	xn
>6082	CompoundStatement	 
>6083	ReturnStatement	 
>6084	ExpressionStatement	 
>6085	AssignmentExpr	yn = - DBL_MAX
>6086	UnaryOp	- DBL_MAX
>6087	Identifier	DBL_MAX
>6088	UnaryOperator	-
>6089	Identifier	yn
>6090	ExpressionStatement	 
>6091	AssignmentExpr	xn = - DBL_MAX
>6092	UnaryOp	- DBL_MAX
>6093	Identifier	DBL_MAX
>6094	UnaryOperator	-
>6095	Identifier	xn
>6096	Condition	 
>6097	RelationalExpression	ray_rot [ 2 ] <= 0.0
>6098	PrimaryExpression	0.0
>6099	ArrayIndexing	ray_rot [ 2 ]
>6100	PrimaryExpression	2
>6101	Identifier	ray_rot
>6102	ExpressionStatement	 
>6103	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , ray , ray_rot )
>6104	ArgumentList	3
>6105	Argument	ray_rot
>6106	Identifier	ray_rot
>6107	Argument	ray
>6108	Identifier	ray
>6109	Argument	R
>6110	Identifier	R
>6111	Argument	1
>6112	PrimaryExpression	1
>6113	Argument	3
>6114	PrimaryExpression	3
>6115	Argument	3
>6116	PrimaryExpression	3
>6117	Argument	3
>6118	PrimaryExpression	3
>6119	Callee	matrix_product
>6120	Identifier	matrix_product
>6121	IdentifierDeclStatement	 
>6122	IdentifierDecl	ray_rot [ 3 ]
>6123	PrimaryExpression	3
>6124	Identifier	ray_rot
>6125	IdentifierDeclType	double [ 3 ]
>6126	IdentifierDecl	ray [ 3 ] = { xn , yn , - m_fFocal }
>6127	AssignmentExpr	ray [ 3 ] = { xn , yn , - m_fFocal }
>6128	InitializerList	xn
>6129	UnaryOp	- m_fFocal
>6130	Identifier	m_fFocal
>6131	UnaryOperator	-
>6132	Identifier	yn
>6133	Identifier	xn
>6134	Identifier	ray
>6135	PrimaryExpression	3
>6136	Identifier	ray
>6137	IdentifierDeclType	double [ 3 ]
>6138	IdentifierDeclStatement	 
>6139	IdentifierDecl	yn = y
>6140	AssignmentExpr	yn = y
>6141	Identifier	y
>6142	Identifier	y
>6143	Identifier	yn
>6144	IdentifierDeclType	double
>6145	IdentifierDeclStatement	 
>6146	IdentifierDecl	xn = x
>6147	AssignmentExpr	xn = x
>6148	Identifier	x
>6149	Identifier	x
>6150	Identifier	xn
>6151	IdentifierDeclType	double
>6152	IfStatement	if ( ! m_fisheye )
>6153	CompoundStatement	 
>6154	ReturnStatement	 
>6155	ExpressionStatement	 
>6156	AssignmentExpr	y_out = y
>6157	Identifier	y
>6158	Identifier	y_out
>6159	ExpressionStatement	 
>6160	AssignmentExpr	x_out = x
>6161	Identifier	x
>6162	Identifier	x_out
>6163	Condition	 
>6164	UnaryOp	! m_fisheye
>6165	Identifier	m_fisheye
>6166	UnaryOperator	!
>6193	FunctionDef	ImageData 
>6194	ParameterList	double x , double y , double & x_out , double & y_out
>6195	Parameter	 
>6196	Identifier	y_out
>6197	ParameterType	double &
>6198	Parameter	 
>6199	Identifier	x_out
>6200	ParameterType	double &
>6201	Parameter	 
>6202	Identifier	y
>6203	ParameterType	double
>6204	Parameter	 
>6205	Identifier	x
>6206	ParameterType	double
>6207	ReturnType	void
>6208	CompoundStatement	 
>6209	ExpressionStatement	 
>6210	AssignmentExpr	y_out = yn * ( rnew / r )
>6211	MultiplicativeExpression	yn * ( rnew / r )
>6212	MultiplicativeExpression	rnew / r
>6213	Identifier	r
>6214	Identifier	rnew
>6215	Identifier	yn
>6216	Identifier	y_out
>6217	ExpressionStatement	 
>6218	AssignmentExpr	x_out = xn * ( rnew / r )
>6219	MultiplicativeExpression	xn * ( rnew / r )
>6220	MultiplicativeExpression	rnew / r
>6221	Identifier	r
>6222	Identifier	rnew
>6223	Identifier	xn
>6224	Identifier	x_out
>6225	IdentifierDeclStatement	 
>6226	IdentifierDecl	rnew = m_fFocal * tan ( DEG2RAD ( angle ) )
>6227	AssignmentExpr	rnew = m_fFocal * tan ( DEG2RAD ( angle ) )
>6228	MultiplicativeExpression	m_fFocal * tan ( DEG2RAD ( angle ) )
>6229	CallExpression	tan ( DEG2RAD ( angle ) )
>6230	ArgumentList	DEG2RAD ( angle )
>6231	Argument	DEG2RAD ( angle )
>6232	CallExpression	DEG2RAD ( angle )
>6233	ArgumentList	angle
>6234	Argument	angle
>6235	Identifier	angle
>6236	Callee	DEG2RAD
>6237	Identifier	DEG2RAD
>6238	Callee	tan
>6239	Identifier	tan
>6240	Identifier	m_fFocal
>6241	Identifier	rnew
>6242	Identifier	rnew
>6243	IdentifierDeclType	double
>6244	IdentifierDeclStatement	 
>6245	IdentifierDecl	angle = 0.5 * m_fAngle * ( r / m_fRad )
>6246	AssignmentExpr	angle = 0.5 * m_fAngle * ( r / m_fRad )
>6247	MultiplicativeExpression	0.5 * m_fAngle * ( r / m_fRad )
>6248	MultiplicativeExpression	m_fAngle * ( r / m_fRad )
>6249	MultiplicativeExpression	r / m_fRad
>6250	Identifier	m_fRad
>6251	Identifier	r
>6252	Identifier	m_fAngle
>6253	PrimaryExpression	0.5
>6254	Identifier	angle
>6255	Identifier	angle
>6256	IdentifierDeclType	double
>6257	IdentifierDeclStatement	 
>6258	IdentifierDecl	r = sqrt ( xn * xn + yn * yn )
>6259	AssignmentExpr	r = sqrt ( xn * xn + yn * yn )
>6260	CallExpression	sqrt ( xn * xn + yn * yn )
>6261	ArgumentList	xn * xn + yn * yn
>6262	Argument	xn * xn + yn * yn
>6263	AdditiveExpression	xn * xn + yn * yn
>6264	MultiplicativeExpression	yn * yn
>6265	Identifier	yn
>6266	Identifier	yn
>6267	MultiplicativeExpression	xn * xn
>6268	Identifier	xn
>6269	Identifier	xn
>6270	Callee	sqrt
>6271	Identifier	sqrt
>6272	Identifier	r
>6273	Identifier	r
>6274	IdentifierDeclType	double
>6275	IdentifierDeclStatement	 
>6276	IdentifierDecl	yn = y - m_fCy
>6277	AssignmentExpr	yn = y - m_fCy
>6278	AdditiveExpression	y - m_fCy
>6279	Identifier	m_fCy
>6280	Identifier	y
>6281	Identifier	yn
>6282	Identifier	yn
>6283	IdentifierDeclType	double
>6284	IdentifierDeclStatement	 
>6285	IdentifierDecl	xn = x - m_fCx
>6286	AssignmentExpr	xn = x - m_fCx
>6287	AdditiveExpression	x - m_fCx
>6288	Identifier	m_fCx
>6289	Identifier	x
>6290	Identifier	xn
>6291	Identifier	xn
>6292	IdentifierDeclType	double
>6293	IfStatement	if ( ! m_fisheye )
>6294	CompoundStatement	 
>6295	ReturnStatement	 
>6296	ExpressionStatement	 
>6297	AssignmentExpr	y_out = y
>6298	Identifier	y
>6299	Identifier	y_out
>6300	ExpressionStatement	 
>6301	AssignmentExpr	x_out = x
>6302	Identifier	x
>6303	Identifier	x_out
>6304	Condition	 
>6305	UnaryOp	! m_fisheye
>6306	Identifier	m_fisheye
>6307	UnaryOperator	!
>6329	FunctionDef	ImageData 
>6330	ParameterList	 
>6331	ReturnType	void
>6332	CompoundStatement	 
>6333	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>6334	CompoundStatement	 
>6335	ExpressionStatement	 
>6336	AssignmentExpr	m_keys [ i ] . m_y = y_new
>6337	Identifier	y_new
>6338	MemberAccess	m_keys [ i ] . m_y
>6339	Identifier	m_y
>6340	ArrayIndexing	m_keys [ i ]
>6341	Identifier	i
>6342	Identifier	m_keys
>6343	ExpressionStatement	 
>6344	AssignmentExpr	m_keys [ i ] . m_x = x_new
>6345	Identifier	x_new
>6346	MemberAccess	m_keys [ i ] . m_x
>6347	Identifier	m_x
>6348	ArrayIndexing	m_keys [ i ]
>6349	Identifier	i
>6350	Identifier	m_keys
>6351	ExpressionStatement	 
>6352	CallExpression	UndistortPoint ( x , y , x_new , y_new )
>6353	ArgumentList	x
>6354	Argument	y_new
>6355	Identifier	y_new
>6356	Argument	x_new
>6357	Identifier	x_new
>6358	Argument	y
>6359	Identifier	y
>6360	Argument	x
>6361	Identifier	x
>6362	Callee	UndistortPoint
>6363	Identifier	UndistortPoint
>6364	IdentifierDeclStatement	 
>6365	IdentifierDecl	y_new
>6366	Identifier	y_new
>6367	IdentifierDeclType	double
>6368	IdentifierDecl	x_new
>6369	Identifier	x_new
>6370	IdentifierDeclType	double
>6371	IdentifierDeclStatement	 
>6372	IdentifierDecl	y = m_keys [ i ] . m_y
>6373	AssignmentExpr	y = m_keys [ i ] . m_y
>6374	MemberAccess	m_keys [ i ] . m_y
>6375	Identifier	m_y
>6376	ArrayIndexing	m_keys [ i ]
>6377	Identifier	i
>6378	Identifier	m_keys
>6379	Identifier	y
>6380	Identifier	y
>6381	IdentifierDeclType	double
>6382	IdentifierDeclStatement	 
>6383	IdentifierDecl	x = m_keys [ i ] . m_x
>6384	AssignmentExpr	x = m_keys [ i ] . m_x
>6385	MemberAccess	m_keys [ i ] . m_x
>6386	Identifier	m_x
>6387	ArrayIndexing	m_keys [ i ]
>6388	Identifier	i
>6389	Identifier	m_keys
>6390	Identifier	x
>6391	Identifier	x
>6392	IdentifierDeclType	double
>6393	IncDecOp	 
>6394	IncDec	++
>6395	Identifier	i
>6396	Condition	 
>6397	RelationalExpression	i < num_keys
>6398	Identifier	num_keys
>6399	Identifier	i
>6400	ForInit	 
>6401	IdentifierDeclStatement	int i = 0 ;
>6402	IdentifierDecl	i = 0
>6403	AssignmentExpr	i = 0
>6404	PrimaryExpression	0
>6405	Identifier	i
>6406	Identifier	i
>6407	IdentifierDeclType	int
>6408	IfStatement	if ( num_keys == 0 )
>6409	ReturnStatement	 
>6410	Condition	 
>6411	EqualityExpression	num_keys == 0
>6412	PrimaryExpression	0
>6413	Identifier	num_keys
>6414	IdentifierDeclStatement	 
>6415	IdentifierDecl	num_keys = ( int ) m_keys . size ( )
>6416	AssignmentExpr	num_keys = ( int ) m_keys . size ( )
>6417	CastExpression	( int ) m_keys . size ( )
>6418	CallExpression	m_keys . size ( )
>6419	ArgumentList	 
>6420	Callee	m_keys . size
>6421	MemberAccess	m_keys . size
>6422	Identifier	size
>6423	Identifier	m_keys
>6424	CastTarget	int
>6425	Identifier	num_keys
>6426	Identifier	num_keys
>6427	IdentifierDeclType	int
>6428	IfStatement	if ( ! m_fisheye )
>6429	ReturnStatement	 
>6430	Condition	 
>6431	UnaryOp	! m_fisheye
>6432	Identifier	m_fisheye
>6433	UnaryOperator	!
>6450	FunctionDef	ImageData 
>6451	ParameterList	 
>6452	ReturnType	std 
>6453	CompoundStatement	 
>6454	ReturnStatement	 
>6455	Identifier	keys_new
>6456	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>6457	CompoundStatement	 
>6458	ExpressionStatement	 
>6459	AssignmentExpr	keys_new [ i ] . m_y = y_new
>6460	Identifier	y_new
>6461	MemberAccess	keys_new [ i ] . m_y
>6462	Identifier	m_y
>6463	ArrayIndexing	keys_new [ i ]
>6464	Identifier	i
>6465	Identifier	keys_new
>6466	ExpressionStatement	 
>6467	AssignmentExpr	keys_new [ i ] . m_x = x_new
>6468	Identifier	x_new
>6469	MemberAccess	keys_new [ i ] . m_x
>6470	Identifier	m_x
>6471	ArrayIndexing	keys_new [ i ]
>6472	Identifier	i
>6473	Identifier	keys_new
>6474	ExpressionStatement	 
>6475	CallExpression	UndistortPoint ( x , y , x_new , y_new )
>6476	ArgumentList	x
>6477	Argument	y_new
>6478	Identifier	y_new
>6479	Argument	x_new
>6480	Identifier	x_new
>6481	Argument	y
>6482	Identifier	y
>6483	Argument	x
>6484	Identifier	x
>6485	Callee	UndistortPoint
>6486	Identifier	UndistortPoint
>6487	IdentifierDeclStatement	 
>6488	IdentifierDecl	y_new
>6489	Identifier	y_new
>6490	IdentifierDeclType	double
>6491	IdentifierDecl	x_new
>6492	Identifier	x_new
>6493	IdentifierDeclType	double
>6494	IdentifierDeclStatement	 
>6495	IdentifierDecl	y = m_keys [ i ] . m_y
>6496	AssignmentExpr	y = m_keys [ i ] . m_y
>6497	MemberAccess	m_keys [ i ] . m_y
>6498	Identifier	m_y
>6499	ArrayIndexing	m_keys [ i ]
>6500	Identifier	i
>6501	Identifier	m_keys
>6502	Identifier	y
>6503	Identifier	y
>6504	IdentifierDeclType	double
>6505	IdentifierDeclStatement	 
>6506	IdentifierDecl	x = m_keys [ i ] . m_x
>6507	AssignmentExpr	x = m_keys [ i ] . m_x
>6508	MemberAccess	m_keys [ i ] . m_x
>6509	Identifier	m_x
>6510	ArrayIndexing	m_keys [ i ]
>6511	Identifier	i
>6512	Identifier	m_keys
>6513	Identifier	x
>6514	Identifier	x
>6515	IdentifierDeclType	double
>6516	IncDecOp	 
>6517	IncDec	++
>6518	Identifier	i
>6519	Condition	 
>6520	RelationalExpression	i < num_keys
>6521	Identifier	num_keys
>6522	Identifier	i
>6523	ForInit	 
>6524	IdentifierDeclStatement	int i = 0 ;
>6525	IdentifierDecl	i = 0
>6526	AssignmentExpr	i = 0
>6527	PrimaryExpression	0
>6528	Identifier	i
>6529	Identifier	i
>6530	IdentifierDeclType	int
>6531	ExpressionStatement	 
>6532	CallExpression	keys_new . resize ( num_keys )
>6533	ArgumentList	num_keys
>6534	Argument	num_keys
>6535	Identifier	num_keys
>6536	Callee	keys_new . resize
>6537	MemberAccess	keys_new . resize
>6538	Identifier	resize
>6539	Identifier	keys_new
>6540	IdentifierDeclStatement	 
>6541	IdentifierDecl	keys_new
>6542	Identifier	keys_new
>6543	IdentifierDeclType	std 
>6544	IfStatement	if ( num_keys == 0 )
>6545	ReturnStatement	 
>6546	Identifier	m_keys
>6547	Condition	 
>6548	EqualityExpression	num_keys == 0
>6549	PrimaryExpression	0
>6550	Identifier	num_keys
>6551	IdentifierDeclStatement	 
>6552	IdentifierDecl	num_keys = ( int ) m_keys . size ( )
>6553	AssignmentExpr	num_keys = ( int ) m_keys . size ( )
>6554	CastExpression	( int ) m_keys . size ( )
>6555	CallExpression	m_keys . size ( )
>6556	ArgumentList	 
>6557	Callee	m_keys . size
>6558	MemberAccess	m_keys . size
>6559	Identifier	size
>6560	Identifier	m_keys
>6561	CastTarget	int
>6562	Identifier	num_keys
>6563	Identifier	num_keys
>6564	IdentifierDeclType	int
>6565	IfStatement	if ( ! m_fisheye )
>6566	ReturnStatement	 
>6567	Identifier	m_keys
>6568	Condition	 
>6569	UnaryOp	! m_fisheye
>6570	Identifier	m_fisheye
>6571	UnaryOperator	!
>6592	FunctionDef	ImageData 
>6593	ParameterList	int w_new , int h_new
>6594	Parameter	 
>6595	Identifier	h_new
>6596	ParameterType	int
>6597	Parameter	 
>6598	Identifier	w_new
>6599	ParameterType	int
>6600	ReturnType	img_t *
>6601	CompoundStatement	 
>6602	ReturnStatement	 
>6603	Identifier	img_out
>6604	IfStatement	if ( unload )
>6605	ExpressionStatement	 
>6606	CallExpression	UnloadImage ( )
>6607	ArgumentList	 
>6608	Callee	UnloadImage
>6609	Identifier	UnloadImage
>6610	Condition	 
>6611	Identifier	unload
>6612	ExpressionStatement	 
>6613	CallExpression	img_write_bmp_file ( img_out , undistort_bmp_buf )
>6614	ArgumentList	img_out
>6615	Argument	undistort_bmp_buf
>6616	Identifier	undistort_bmp_buf
>6617	Argument	img_out
>6618	Identifier	img_out
>6619	Callee	img_write_bmp_file
>6620	Identifier	img_write_bmp_file
>6621	ForStatement	for ( int y = 0 ; y < h_new ; y ++ )
>6622	CompoundStatement	 
>6623	ForStatement	for ( int x = 0 ; x < w_new ; x ++ )
>6624	CompoundStatement	 
>6625	ExpressionStatement	 
>6626	CallExpression	img_set_pixel ( img_out , x , y , iround ( c . r ) , iround ( c . g ) , iround ( c . b ) )
>6627	ArgumentList	img_out
>6628	Argument	iround ( c . b )
>6629	CallExpression	iround ( c . b )
>6630	ArgumentList	c . b
>6631	Argument	c . b
>6632	MemberAccess	c . b
>6633	Identifier	b
>6634	Identifier	c
>6635	Callee	iround
>6636	Identifier	iround
>6637	Argument	iround ( c . g )
>6638	CallExpression	iround ( c . g )
>6639	ArgumentList	c . g
>6640	Argument	c . g
>6641	MemberAccess	c . g
>6642	Identifier	g
>6643	Identifier	c
>6644	Callee	iround
>6645	Identifier	iround
>6646	Argument	iround ( c . r )
>6647	CallExpression	iround ( c . r )
>6648	ArgumentList	c . r
>6649	Argument	c . r
>6650	MemberAccess	c . r
>6651	Identifier	r
>6652	Identifier	c
>6653	Callee	iround
>6654	Identifier	iround
>6655	Argument	y
>6656	Identifier	y
>6657	Argument	x
>6658	Identifier	x
>6659	Argument	img_out
>6660	Identifier	img_out
>6661	Callee	img_set_pixel
>6662	Identifier	img_set_pixel
>6663	IdentifierDeclStatement	 
>6664	IdentifierDecl	c = pixel_lerp ( m_img , x_new , y_new )
>6665	AssignmentExpr	c = pixel_lerp ( m_img , x_new , y_new )
>6666	CallExpression	pixel_lerp ( m_img , x_new , y_new )
>6667	ArgumentList	m_img
>6668	Argument	y_new
>6669	Identifier	y_new
>6670	Argument	x_new
>6671	Identifier	x_new
>6672	Argument	m_img
>6673	Identifier	m_img
>6674	Callee	pixel_lerp
>6675	Identifier	pixel_lerp
>6676	Identifier	c
>6677	Identifier	c
>6678	IdentifierDeclType	fcolor_t
>6679	IfStatement	if ( x_new < 0 || x_new >= width || y_new < 0 || y_new >= height )
>6680	ContinueStatement	 
>6681	Condition	 
>6682	OrExpression	x_new < 0 || x_new >= width || y_new < 0 || y_new >= height
>6683	OrExpression	x_new >= width || y_new < 0 || y_new >= height
>6684	OrExpression	y_new < 0 || y_new >= height
>6685	RelationalExpression	y_new >= height
>6686	Identifier	height
>6687	Identifier	y_new
>6688	RelationalExpression	y_new < 0
>6689	PrimaryExpression	0
>6690	Identifier	y_new
>6691	RelationalExpression	x_new >= width
>6692	Identifier	width
>6693	Identifier	x_new
>6694	RelationalExpression	x_new < 0
>6695	PrimaryExpression	0
>6696	Identifier	x_new
>6697	ExpressionStatement	 
>6698	AssignmentExpr	y_new += 0.5 * height
>6699	MultiplicativeExpression	0.5 * height
>6700	Identifier	height
>6701	PrimaryExpression	0.5
>6702	Identifier	y_new
>6703	ExpressionStatement	 
>6704	AssignmentExpr	x_new += 0.5 * width
>6705	MultiplicativeExpression	0.5 * width
>6706	Identifier	width
>6707	PrimaryExpression	0.5
>6708	Identifier	x_new
>6709	ExpressionStatement	 
>6710	CallExpression	DistortPoint ( xn , yn , R , x_new , y_new )
>6711	ArgumentList	xn
>6712	Argument	y_new
>6713	Identifier	y_new
>6714	Argument	x_new
>6715	Identifier	x_new
>6716	Argument	R
>6717	Identifier	R
>6718	Argument	yn
>6719	Identifier	yn
>6720	Argument	xn
>6721	Identifier	xn
>6722	Callee	DistortPoint
>6723	Identifier	DistortPoint
>6724	IdentifierDeclStatement	 
>6725	IdentifierDecl	y_new
>6726	Identifier	y_new
>6727	IdentifierDeclType	double
>6728	IdentifierDecl	x_new
>6729	Identifier	x_new
>6730	IdentifierDeclType	double
>6731	IdentifierDeclStatement	 
>6732	IdentifierDecl	yn = y - 0.5 * h_new
>6733	AssignmentExpr	yn = y - 0.5 * h_new
>6734	AdditiveExpression	y - 0.5 * h_new
>6735	MultiplicativeExpression	0.5 * h_new
>6736	Identifier	h_new
>6737	PrimaryExpression	0.5
>6738	Identifier	y
>6739	Identifier	yn
>6740	Identifier	yn
>6741	IdentifierDeclType	double
>6742	IdentifierDeclStatement	 
>6743	IdentifierDecl	xn = x - 0.5 * w_new
>6744	AssignmentExpr	xn = x - 0.5 * w_new
>6745	AdditiveExpression	x - 0.5 * w_new
>6746	MultiplicativeExpression	0.5 * w_new
>6747	Identifier	w_new
>6748	PrimaryExpression	0.5
>6749	Identifier	x
>6750	Identifier	xn
>6751	Identifier	xn
>6752	IdentifierDeclType	double
>6753	IncDecOp	 
>6754	IncDec	++
>6755	Identifier	x
>6756	Condition	 
>6757	RelationalExpression	x < w_new
>6758	Identifier	w_new
>6759	Identifier	x
>6760	ForInit	 
>6761	IdentifierDeclStatement	int x = 0 ;
>6762	IdentifierDecl	x = 0
>6763	AssignmentExpr	x = 0
>6764	PrimaryExpression	0
>6765	Identifier	x
>6766	Identifier	x
>6767	IdentifierDeclType	int
>6768	IncDecOp	 
>6769	IncDec	++
>6770	Identifier	y
>6771	Condition	 
>6772	RelationalExpression	y < h_new
>6773	Identifier	h_new
>6774	Identifier	y
>6775	ForInit	 
>6776	IdentifierDeclStatement	int y = 0 ;
>6777	IdentifierDecl	y = 0
>6778	AssignmentExpr	y = 0
>6779	PrimaryExpression	0
>6780	Identifier	y
>6781	Identifier	y
>6782	IdentifierDeclType	int
>6783	IdentifierDeclStatement	 
>6784	IdentifierDecl	* img_out = img_new ( w_new , h_new )
>6785	AssignmentExpr	* img_out = img_new ( w_new , h_new )
>6786	CallExpression	img_new ( w_new , h_new )
>6787	ArgumentList	w_new
>6788	Argument	h_new
>6789	Identifier	h_new
>6790	Argument	w_new
>6791	Identifier	w_new
>6792	Callee	img_new
>6793	Identifier	img_new
>6794	Identifier	img_out
>6795	Identifier	img_out
>6796	IdentifierDeclType	img_t *
>6797	IdentifierDeclStatement	 
>6798	IdentifierDecl	height = GetHeight ( )
>6799	AssignmentExpr	height = GetHeight ( )
>6800	CallExpression	GetHeight ( )
>6801	ArgumentList	 
>6802	Callee	GetHeight
>6803	Identifier	GetHeight
>6804	Identifier	height
>6805	Identifier	height
>6806	IdentifierDeclType	int
>6807	IdentifierDeclStatement	 
>6808	IdentifierDecl	width = GetWidth ( )
>6809	AssignmentExpr	width = GetWidth ( )
>6810	CallExpression	GetWidth ( )
>6811	ArgumentList	 
>6812	Callee	GetWidth
>6813	Identifier	GetWidth
>6814	Identifier	width
>6815	Identifier	width
>6816	IdentifierDeclType	int
>6817	ExpressionStatement	 
>6818	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , Rsph , Rz , R )
>6819	ArgumentList	3
>6820	Argument	R
>6821	Identifier	R
>6822	Argument	Rz
>6823	Identifier	Rz
>6824	Argument	Rsph
>6825	Identifier	Rsph
>6826	Argument	3
>6827	PrimaryExpression	3
>6828	Argument	3
>6829	PrimaryExpression	3
>6830	Argument	3
>6831	PrimaryExpression	3
>6832	Argument	3
>6833	PrimaryExpression	3
>6834	Callee	matrix_product
>6835	Identifier	matrix_product
>6836	IdentifierDeclStatement	 
>6837	IdentifierDecl	R [ 9 ]
>6838	PrimaryExpression	9
>6839	Identifier	R
>6840	IdentifierDeclType	double [ 9 ]
>6841	IdentifierDeclStatement	 
>6842	IdentifierDecl	Rz [ 9 ] = { 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }
>6843	AssignmentExpr	Rz [ 9 ] = { 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }
>6844	InitializerList	0
>6845	PrimaryExpression	1
>6846	PrimaryExpression	0
>6847	PrimaryExpression	0
>6848	PrimaryExpression	0
>6849	PrimaryExpression	0
>6850	PrimaryExpression	1
>6851	PrimaryExpression	0
>6852	UnaryOp	- 1
>6853	PrimaryExpression	1
>6854	UnaryOperator	-
>6855	PrimaryExpression	0
>6856	Identifier	Rz
>6857	PrimaryExpression	9
>6858	Identifier	Rz
>6859	IdentifierDeclType	double [ 9 ]
>6860	ExpressionStatement	 
>6861	CallExpression	GetRotationFromSpherical ( - 0.5 * M_PI , 0.5 * M_PI , Rsph )
>6862	ArgumentList	- 0.5 * M_PI
>6863	Argument	Rsph
>6864	Identifier	Rsph
>6865	Argument	0.5 * M_PI
>6866	MultiplicativeExpression	0.5 * M_PI
>6867	Identifier	M_PI
>6868	PrimaryExpression	0.5
>6869	Argument	- 0.5 * M_PI
>6870	MultiplicativeExpression	- 0.5 * M_PI
>6871	Identifier	M_PI
>6872	UnaryOp	- 0.5
>6873	PrimaryExpression	0.5
>6874	UnaryOperator	-
>6875	Callee	GetRotationFromSpherical
>6876	Identifier	GetRotationFromSpherical
>6877	IdentifierDeclStatement	 
>6878	IdentifierDecl	Rsph [ 9 ]
>6879	PrimaryExpression	9
>6880	Identifier	Rsph
>6881	IdentifierDeclType	double [ 9 ]
>6882	IfStatement	if ( ! m_fisheye )
>6883	CompoundStatement	 
>6884	ReturnStatement	 
>6885	Identifier	out
>6886	IfStatement	if ( unload )
>6887	ExpressionStatement	 
>6888	CallExpression	UnloadImage ( )
>6889	ArgumentList	 
>6890	Callee	UnloadImage
>6891	Identifier	UnloadImage
>6892	Condition	 
>6893	Identifier	unload
>6894	IdentifierDeclStatement	 
>6895	IdentifierDecl	* out = img_copy ( m_img )
>6896	AssignmentExpr	* out = img_copy ( m_img )
>6897	CallExpression	img_copy ( m_img )
>6898	ArgumentList	m_img
>6899	Argument	m_img
>6900	Identifier	m_img
>6901	Callee	img_copy
>6902	Identifier	img_copy
>6903	Identifier	out
>6904	Identifier	out
>6905	IdentifierDeclType	img_t *
>6906	Condition	 
>6907	UnaryOp	! m_fisheye
>6908	Identifier	m_fisheye
>6909	UnaryOperator	!
>6910	IfStatement	if ( ! m_image_loaded )
>6911	CompoundStatement	 
>6912	ExpressionStatement	 
>6913	CallExpression	LoadImage ( )
>6914	ArgumentList	 
>6915	Callee	LoadImage
>6916	Identifier	LoadImage
>6917	ExpressionStatement	 
>6918	AssignmentExpr	unload = true
>6919	Identifier	true
>6920	Identifier	unload
>6921	Condition	 
>6922	UnaryOp	! m_image_loaded
>6923	Identifier	m_image_loaded
>6924	UnaryOperator	!
>6925	IfStatement	if ( FileExists ( undistort_bmp_buf ) )
>6926	CompoundStatement	 
>6927	ReturnStatement	 
>6928	CallExpression	img_read_bmp_file ( undistort_bmp_buf )
>6929	ArgumentList	undistort_bmp_buf
>6930	Argument	undistort_bmp_buf
>6931	Identifier	undistort_bmp_buf
>6932	Callee	img_read_bmp_file
>6933	Identifier	img_read_bmp_file
>6934	Condition	 
>6935	CallExpression	FileExists ( undistort_bmp_buf )
>6936	ArgumentList	undistort_bmp_buf
>6937	Argument	undistort_bmp_buf
>6938	Identifier	undistort_bmp_buf
>6939	Callee	FileExists
>6940	Identifier	FileExists
>6941	IfStatement	if ( FileExists ( undistort_jpg_buf ) )
>6942	CompoundStatement	 
>6943	ReturnStatement	 
>6944	CallExpression	LoadJPEG ( undistort_jpg_buf )
>6945	ArgumentList	undistort_jpg_buf
>6946	Argument	undistort_jpg_buf
>6947	Identifier	undistort_jpg_buf
>6948	Callee	LoadJPEG
>6949	Identifier	LoadJPEG
>6950	Condition	 
>6951	CallExpression	FileExists ( undistort_jpg_buf )
>6952	ArgumentList	undistort_jpg_buf
>6953	Argument	undistort_jpg_buf
>6954	Identifier	undistort_jpg_buf
>6955	Callee	FileExists
>6956	Identifier	FileExists
>6957	ExpressionStatement	 
>6958	CallExpression	sprintf ( undistort_bmp_buf , \"%s.undistort.bmp\" , basename )
>6959	ArgumentList	undistort_bmp_buf
>6960	Argument	basename
>6961	Identifier	basename
>6962	Argument	\"%s.undistort.bmp\"
>6963	PrimaryExpression	\"%s.undistort.bmp\"
>6964	Argument	undistort_bmp_buf
>6965	Identifier	undistort_bmp_buf
>6966	Callee	sprintf
>6967	Identifier	sprintf
>6968	IdentifierDeclStatement	 
>6969	IdentifierDecl	undistort_bmp_buf [ 256 ]
>6970	PrimaryExpression	256
>6971	Identifier	undistort_bmp_buf
>6972	IdentifierDeclType	char [ 256 ]
>6973	ExpressionStatement	 
>6974	CallExpression	sprintf ( undistort_jpg_buf , \"%s.undistort.jpg\" , basename )
>6975	ArgumentList	undistort_jpg_buf
>6976	Argument	basename
>6977	Identifier	basename
>6978	Argument	\"%s.undistort.jpg\"
>6979	PrimaryExpression	\"%s.undistort.jpg\"
>6980	Argument	undistort_jpg_buf
>6981	Identifier	undistort_jpg_buf
>6982	Callee	sprintf
>6983	Identifier	sprintf
>6984	IdentifierDeclStatement	 
>6985	IdentifierDecl	undistort_jpg_buf [ 256 ]
>6986	PrimaryExpression	256
>6987	Identifier	undistort_jpg_buf
>6988	IdentifierDeclType	char [ 256 ]
>6989	ExpressionStatement	 
>6990	AssignmentExpr	basename [ strlen ( basename ) - 4 ] = 0
>6991	PrimaryExpression	0
>6992	ArrayIndexing	basename [ strlen ( basename ) - 4 ]
>6993	AdditiveExpression	strlen ( basename ) - 4
>6994	PrimaryExpression	4
>6995	CallExpression	strlen ( basename )
>6996	ArgumentList	basename
>6997	Argument	basename
>6998	Identifier	basename
>6999	Callee	strlen
>7000	Identifier	strlen
>7001	Identifier	basename
>7002	ExpressionStatement	 
>7003	CallExpression	strcpy ( basename , m_name )
>7004	ArgumentList	basename
>7005	Argument	m_name
>7006	Identifier	m_name
>7007	Argument	basename
>7008	Identifier	basename
>7009	Callee	strcpy
>7010	Identifier	strcpy
>7011	IdentifierDeclStatement	 
>7012	IdentifierDecl	basename [ 256 ]
>7013	PrimaryExpression	256
>7014	Identifier	basename
>7015	IdentifierDeclType	char [ 256 ]
>7016	IdentifierDeclStatement	 
>7017	IdentifierDecl	unload = false
>7018	AssignmentExpr	unload = false
>7019	Identifier	false
>7020	Identifier	false
>7021	Identifier	unload
>7022	IdentifierDeclType	bool
>7068	FunctionDef	ImageData 
>7069	ParameterList	double theta , double phi , int num_rot
>7070	Parameter	 
>7071	Identifier	num_rot
>7072	ParameterType	int
>7073	Parameter	 
>7074	Identifier	phi
>7075	ParameterType	double
>7076	Parameter	 
>7077	Identifier	theta
>7078	ParameterType	double
>7079	ReturnType	img_t *
>7080	CompoundStatement	 
>7081	ReturnStatement	 
>7082	Identifier	img_out
>7083	IfStatement	if ( unload )
>7084	CompoundStatement	 
>7085	ExpressionStatement	 
>7086	CallExpression	UnloadImage ( )
>7087	ArgumentList	 
>7088	Callee	UnloadImage
>7089	Identifier	UnloadImage
>7090	ExpressionStatement	 
>7091	CallExpression	printf ( \"[ImageData
>7092	ArgumentList	\"[ImageData
>7093	Argument	\"[ImageData
>7094	PrimaryExpression	\"[ImageData
>7095	Callee	printf
>7096	Identifier	printf
>7097	Condition	 
>7098	Identifier	unload
>7099	ForStatement	for ( int y = 0 ; y < height / SUBSAMPLE_LEVEL ; y ++ )
>7100	CompoundStatement	 
>7101	ForStatement	for ( int x = 0 ; x < width / SUBSAMPLE_LEVEL ; x ++ )
>7102	CompoundStatement	 
>7103	ExpressionStatement	 
>7104	CallExpression	img_set_pixel ( img_out , x , y , iround ( c . r ) , iround ( c . g ) , iround ( c . b ) )
>7105	ArgumentList	img_out
>7106	Argument	iround ( c . b )
>7107	CallExpression	iround ( c . b )
>7108	ArgumentList	c . b
>7109	Argument	c . b
>7110	MemberAccess	c . b
>7111	Identifier	b
>7112	Identifier	c
>7113	Callee	iround
>7114	Identifier	iround
>7115	Argument	iround ( c . g )
>7116	CallExpression	iround ( c . g )
>7117	ArgumentList	c . g
>7118	Argument	c . g
>7119	MemberAccess	c . g
>7120	Identifier	g
>7121	Identifier	c
>7122	Callee	iround
>7123	Identifier	iround
>7124	Argument	iround ( c . r )
>7125	CallExpression	iround ( c . r )
>7126	ArgumentList	c . r
>7127	Argument	c . r
>7128	MemberAccess	c . r
>7129	Identifier	r
>7130	Identifier	c
>7131	Callee	iround
>7132	Identifier	iround
>7133	Argument	y
>7134	Identifier	y
>7135	Argument	x
>7136	Identifier	x
>7137	Argument	img_out
>7138	Identifier	img_out
>7139	Callee	img_set_pixel
>7140	Identifier	img_set_pixel
>7141	IdentifierDeclStatement	 
>7142	IdentifierDecl	c = pixel_lerp ( m_img , x_new , y_new )
>7143	AssignmentExpr	c = pixel_lerp ( m_img , x_new , y_new )
>7144	CallExpression	pixel_lerp ( m_img , x_new , y_new )
>7145	ArgumentList	m_img
>7146	Argument	y_new
>7147	Identifier	y_new
>7148	Argument	x_new
>7149	Identifier	x_new
>7150	Argument	m_img
>7151	Identifier	m_img
>7152	Callee	pixel_lerp
>7153	Identifier	pixel_lerp
>7154	Identifier	c
>7155	Identifier	c
>7156	IdentifierDeclType	fcolor_t
>7157	IfStatement	if ( x_new < 0 || x_new >= width || y_new < 0 || y_new >= height )
>7158	ContinueStatement	 
>7159	Condition	 
>7160	OrExpression	x_new < 0 || x_new >= width || y_new < 0 || y_new >= height
>7161	OrExpression	x_new >= width || y_new < 0 || y_new >= height
>7162	OrExpression	y_new < 0 || y_new >= height
>7163	RelationalExpression	y_new >= height
>7164	Identifier	height
>7165	Identifier	y_new
>7166	RelationalExpression	y_new < 0
>7167	PrimaryExpression	0
>7168	Identifier	y_new
>7169	RelationalExpression	x_new >= width
>7170	Identifier	width
>7171	Identifier	x_new
>7172	RelationalExpression	x_new < 0
>7173	PrimaryExpression	0
>7174	Identifier	x_new
>7175	ExpressionStatement	 
>7176	AssignmentExpr	y_new += 0.5 * height
>7177	MultiplicativeExpression	0.5 * height
>7178	Identifier	height
>7179	PrimaryExpression	0.5
>7180	Identifier	y_new
>7181	ExpressionStatement	 
>7182	AssignmentExpr	x_new += 0.5 * width
>7183	MultiplicativeExpression	0.5 * width
>7184	Identifier	width
>7185	PrimaryExpression	0.5
>7186	Identifier	x_new
>7187	ExpressionStatement	 
>7188	CallExpression	DistortPoint ( xn , yn , R , x_new , y_new )
>7189	ArgumentList	xn
>7190	Argument	y_new
>7191	Identifier	y_new
>7192	Argument	x_new
>7193	Identifier	x_new
>7194	Argument	R
>7195	Identifier	R
>7196	Argument	yn
>7197	Identifier	yn
>7198	Argument	xn
>7199	Identifier	xn
>7200	Callee	DistortPoint
>7201	Identifier	DistortPoint
>7202	IdentifierDeclStatement	 
>7203	IdentifierDecl	y_new
>7204	Identifier	y_new
>7205	IdentifierDeclType	double
>7206	IdentifierDecl	x_new
>7207	Identifier	x_new
>7208	IdentifierDeclType	double
>7209	IdentifierDeclStatement	 
>7210	IdentifierDecl	yn = y - 0.5 * height
>7211	AssignmentExpr	yn = y - 0.5 * height
>7212	AdditiveExpression	y - 0.5 * height
>7213	MultiplicativeExpression	0.5 * height
>7214	Identifier	height
>7215	PrimaryExpression	0.5
>7216	Identifier	y
>7217	Identifier	yn
>7218	Identifier	yn
>7219	IdentifierDeclType	double
>7220	IdentifierDeclStatement	 
>7221	IdentifierDecl	xn = x - 0.5 * width
>7222	AssignmentExpr	xn = x - 0.5 * width
>7223	AdditiveExpression	x - 0.5 * width
>7224	MultiplicativeExpression	0.5 * width
>7225	Identifier	width
>7226	PrimaryExpression	0.5
>7227	Identifier	x
>7228	Identifier	xn
>7229	Identifier	xn
>7230	IdentifierDeclType	double
>7231	IncDecOp	 
>7232	IncDec	++
>7233	Identifier	x
>7234	Condition	 
>7235	RelationalExpression	x < width / SUBSAMPLE_LEVEL
>7236	MultiplicativeExpression	width / SUBSAMPLE_LEVEL
>7237	Identifier	SUBSAMPLE_LEVEL
>7238	Identifier	width
>7239	Identifier	x
>7240	ForInit	 
>7241	IdentifierDeclStatement	int x = 0 ;
>7242	IdentifierDecl	x = 0
>7243	AssignmentExpr	x = 0
>7244	PrimaryExpression	0
>7245	Identifier	x
>7246	Identifier	x
>7247	IdentifierDeclType	int
>7248	IncDecOp	 
>7249	IncDec	++
>7250	Identifier	y
>7251	Condition	 
>7252	RelationalExpression	y < height / SUBSAMPLE_LEVEL
>7253	MultiplicativeExpression	height / SUBSAMPLE_LEVEL
>7254	Identifier	SUBSAMPLE_LEVEL
>7255	Identifier	height
>7256	Identifier	y
>7257	ForInit	 
>7258	IdentifierDeclStatement	int y = 0 ;
>7259	IdentifierDecl	y = 0
>7260	AssignmentExpr	y = 0
>7261	PrimaryExpression	0
>7262	Identifier	y
>7263	Identifier	y
>7264	IdentifierDeclType	int
>7265	IdentifierDeclStatement	 
>7266	IdentifierDecl	* img_out = img_new ( width / SUBSAMPLE_LEVEL , height / SUBSAMPLE_LEVEL )
>7267	AssignmentExpr	* img_out = img_new ( width / SUBSAMPLE_LEVEL , height / SUBSAMPLE_LEVEL )
>7268	CallExpression	img_new ( width / SUBSAMPLE_LEVEL , height / SUBSAMPLE_LEVEL )
>7269	ArgumentList	width / SUBSAMPLE_LEVEL
>7270	Argument	height / SUBSAMPLE_LEVEL
>7271	MultiplicativeExpression	height / SUBSAMPLE_LEVEL
>7272	Identifier	SUBSAMPLE_LEVEL
>7273	Identifier	height
>7274	Argument	width / SUBSAMPLE_LEVEL
>7275	MultiplicativeExpression	width / SUBSAMPLE_LEVEL
>7276	Identifier	SUBSAMPLE_LEVEL
>7277	Identifier	width
>7278	Callee	img_new
>7279	Identifier	img_new
>7280	Identifier	img_out
>7281	Identifier	img_out
>7282	IdentifierDeclType	img_t *
>7283	IdentifierDeclStatement	 
>7284	IdentifierDecl	height = GetHeight ( )
>7285	AssignmentExpr	height = GetHeight ( )
>7286	CallExpression	GetHeight ( )
>7287	ArgumentList	 
>7288	Callee	GetHeight
>7289	Identifier	GetHeight
>7290	Identifier	height
>7291	Identifier	height
>7292	IdentifierDeclType	int
>7293	IdentifierDeclStatement	 
>7294	IdentifierDecl	width = GetWidth ( )
>7295	AssignmentExpr	width = GetWidth ( )
>7296	CallExpression	GetWidth ( )
>7297	ArgumentList	 
>7298	Callee	GetWidth
>7299	Identifier	GetWidth
>7300	Identifier	width
>7301	Identifier	width
>7302	IdentifierDeclType	int
>7303	ExpressionStatement	 
>7304	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , Rsph , Rz , R )
>7305	ArgumentList	3
>7306	Argument	R
>7307	Identifier	R
>7308	Argument	Rz
>7309	Identifier	Rz
>7310	Argument	Rsph
>7311	Identifier	Rsph
>7312	Argument	3
>7313	PrimaryExpression	3
>7314	Argument	3
>7315	PrimaryExpression	3
>7316	Argument	3
>7317	PrimaryExpression	3
>7318	Argument	3
>7319	PrimaryExpression	3
>7320	Callee	matrix_product
>7321	Identifier	matrix_product
>7322	IdentifierDeclStatement	 
>7323	IdentifierDecl	R [ 9 ]
>7324	PrimaryExpression	9
>7325	Identifier	R
>7326	IdentifierDeclType	double [ 9 ]
>7327	ExpressionStatement	 
>7328	CallExpression	matrix_power ( 3 , R90 , num_rot , Rz )
>7329	ArgumentList	3
>7330	Argument	Rz
>7331	Identifier	Rz
>7332	Argument	num_rot
>7333	Identifier	num_rot
>7334	Argument	R90
>7335	Identifier	R90
>7336	Argument	3
>7337	PrimaryExpression	3
>7338	Callee	matrix_power
>7339	Identifier	matrix_power
>7340	IdentifierDeclStatement	 
>7341	IdentifierDecl	Rz [ 9 ]
>7342	PrimaryExpression	9
>7343	Identifier	Rz
>7344	IdentifierDeclType	double [ 9 ]
>7345	IdentifierDeclStatement	 
>7346	IdentifierDecl	R90 [ 9 ] = { 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }
>7347	AssignmentExpr	R90 [ 9 ] = { 0 , - 1 , 0 , 1 , 0 , 0 , 0 , 0 , 1 }
>7348	InitializerList	0
>7349	PrimaryExpression	1
>7350	PrimaryExpression	0
>7351	PrimaryExpression	0
>7352	PrimaryExpression	0
>7353	PrimaryExpression	0
>7354	PrimaryExpression	1
>7355	PrimaryExpression	0
>7356	UnaryOp	- 1
>7357	PrimaryExpression	1
>7358	UnaryOperator	-
>7359	PrimaryExpression	0
>7360	Identifier	R90
>7361	PrimaryExpression	9
>7362	Identifier	R90
>7363	IdentifierDeclType	double [ 9 ]
>7364	ExpressionStatement	 
>7365	CallExpression	GetRotationFromSpherical ( theta - 0.5 * M_PI , phi + 0.5 * M_PI , Rsph )
>7366	ArgumentList	theta - 0.5 * M_PI
>7367	Argument	Rsph
>7368	Identifier	Rsph
>7369	Argument	phi + 0.5 * M_PI
>7370	AdditiveExpression	phi + 0.5 * M_PI
>7371	MultiplicativeExpression	0.5 * M_PI
>7372	Identifier	M_PI
>7373	PrimaryExpression	0.5
>7374	Identifier	phi
>7375	Argument	theta - 0.5 * M_PI
>7376	AdditiveExpression	theta - 0.5 * M_PI
>7377	MultiplicativeExpression	0.5 * M_PI
>7378	Identifier	M_PI
>7379	PrimaryExpression	0.5
>7380	Identifier	theta
>7381	Callee	GetRotationFromSpherical
>7382	Identifier	GetRotationFromSpherical
>7383	IdentifierDeclStatement	 
>7384	IdentifierDecl	Rsph [ 9 ]
>7385	PrimaryExpression	9
>7386	Identifier	Rsph
>7387	IdentifierDeclType	double [ 9 ]
>7388	IfStatement	if ( ! m_fisheye )
>7389	CompoundStatement	 
>7390	ReturnStatement	 
>7391	Identifier	out
>7392	IfStatement	if ( unload )
>7393	ExpressionStatement	 
>7394	CallExpression	UnloadImage ( )
>7395	ArgumentList	 
>7396	Callee	UnloadImage
>7397	Identifier	UnloadImage
>7398	Condition	 
>7399	Identifier	unload
>7400	IdentifierDeclStatement	 
>7401	IdentifierDecl	* out = img_copy ( m_img )
>7402	AssignmentExpr	* out = img_copy ( m_img )
>7403	CallExpression	img_copy ( m_img )
>7404	ArgumentList	m_img
>7405	Argument	m_img
>7406	Identifier	m_img
>7407	Callee	img_copy
>7408	Identifier	img_copy
>7409	Identifier	out
>7410	Identifier	out
>7411	IdentifierDeclType	img_t *
>7412	Condition	 
>7413	UnaryOp	! m_fisheye
>7414	Identifier	m_fisheye
>7415	UnaryOperator	!
>7416	IfStatement	if ( ! m_image_loaded )
>7417	CompoundStatement	 
>7418	ExpressionStatement	 
>7419	CallExpression	LoadImage ( )
>7420	ArgumentList	 
>7421	Callee	LoadImage
>7422	Identifier	LoadImage
>7423	ExpressionStatement	 
>7424	AssignmentExpr	unload = true
>7425	Identifier	true
>7426	Identifier	unload
>7427	ExpressionStatement	 
>7428	CallExpression	printf ( \"[ImageData
>7429	ArgumentList	\"[ImageData
>7430	Argument	\"[ImageData
>7431	PrimaryExpression	\"[ImageData
>7432	Callee	printf
>7433	Identifier	printf
>7434	Condition	 
>7435	UnaryOp	! m_image_loaded
>7436	Identifier	m_image_loaded
>7437	UnaryOperator	!
>7438	IdentifierDeclStatement	 
>7439	IdentifierDecl	unload = false
>7440	AssignmentExpr	unload = false
>7441	Identifier	false
>7442	Identifier	false
>7443	Identifier	unload
>7444	IdentifierDeclType	bool
>7483	FunctionDef	ProjectOnLine (double * p , double * line , double * proj)
>7484	ParameterList	double * p , double * line , double * proj
>7485	Parameter	 
>7486	Identifier	proj
>7487	ParameterType	double *
>7488	Parameter	 
>7489	Identifier	line
>7490	ParameterType	double *
>7491	Parameter	 
>7492	Identifier	p
>7493	ParameterType	double *
>7494	ReturnType	static void
>7495	CompoundStatement	 
>7496	ExpressionStatement	 
>7497	AssignmentExpr	proj [ 1 ] = perp [ 1 ] + vec [ 1 ]
>7498	AdditiveExpression	perp [ 1 ] + vec [ 1 ]
>7499	ArrayIndexing	vec [ 1 ]
>7500	PrimaryExpression	1
>7501	Identifier	vec
>7502	ArrayIndexing	perp [ 1 ]
>7503	PrimaryExpression	1
>7504	Identifier	perp
>7505	ArrayIndexing	proj [ 1 ]
>7506	PrimaryExpression	1
>7507	Identifier	proj
>7508	ExpressionStatement	 
>7509	AssignmentExpr	proj [ 0 ] = perp [ 0 ] + vec [ 0 ]
>7510	AdditiveExpression	perp [ 0 ] + vec [ 0 ]
>7511	ArrayIndexing	vec [ 0 ]
>7512	PrimaryExpression	0
>7513	Identifier	vec
>7514	ArrayIndexing	perp [ 0 ]
>7515	PrimaryExpression	0
>7516	Identifier	perp
>7517	ArrayIndexing	proj [ 0 ]
>7518	PrimaryExpression	0
>7519	Identifier	proj
>7520	IdentifierDeclStatement	 
>7521	IdentifierDecl	perp [ 2 ] = { p_diff [ 0 ] - par [ 0 ] , p_diff [ 1 ] - par [ 1 ] }
>7522	AssignmentExpr	perp [ 2 ] = { p_diff [ 0 ] - par [ 0 ] , p_diff [ 1 ] - par [ 1 ] }
>7523	InitializerList	p_diff [ 0 ] - par [ 0 ]
>7524	AdditiveExpression	p_diff [ 1 ] - par [ 1 ]
>7525	ArrayIndexing	par [ 1 ]
>7526	PrimaryExpression	1
>7527	Identifier	par
>7528	ArrayIndexing	p_diff [ 1 ]
>7529	PrimaryExpression	1
>7530	Identifier	p_diff
>7531	AdditiveExpression	p_diff [ 0 ] - par [ 0 ]
>7532	ArrayIndexing	par [ 0 ]
>7533	PrimaryExpression	0
>7534	Identifier	par
>7535	ArrayIndexing	p_diff [ 0 ]
>7536	PrimaryExpression	0
>7537	Identifier	p_diff
>7538	Identifier	perp
>7539	PrimaryExpression	2
>7540	Identifier	perp
>7541	IdentifierDeclType	double [ 2 ]
>7542	IdentifierDeclStatement	 
>7543	IdentifierDecl	par [ 2 ] = { dot * line [ 0 ] , dot * line [ 1 ] }
>7544	AssignmentExpr	par [ 2 ] = { dot * line [ 0 ] , dot * line [ 1 ] }
>7545	InitializerList	dot * line [ 0 ]
>7546	MultiplicativeExpression	dot * line [ 1 ]
>7547	ArrayIndexing	line [ 1 ]
>7548	PrimaryExpression	1
>7549	Identifier	line
>7550	Identifier	dot
>7551	MultiplicativeExpression	dot * line [ 0 ]
>7552	ArrayIndexing	line [ 0 ]
>7553	PrimaryExpression	0
>7554	Identifier	line
>7555	Identifier	dot
>7556	Identifier	par
>7557	PrimaryExpression	2
>7558	Identifier	par
>7559	IdentifierDeclType	double [ 2 ]
>7560	IdentifierDeclStatement	 
>7561	IdentifierDecl	dot = p_diff [ 0 ] * line [ 0 ] + p_diff [ 1 ] * line [ 1 ]
>7562	AssignmentExpr	dot = p_diff [ 0 ] * line [ 0 ] + p_diff [ 1 ] * line [ 1 ]
>7563	AdditiveExpression	p_diff [ 0 ] * line [ 0 ] + p_diff [ 1 ] * line [ 1 ]
>7564	MultiplicativeExpression	p_diff [ 1 ] * line [ 1 ]
>7565	ArrayIndexing	line [ 1 ]
>7566	PrimaryExpression	1
>7567	Identifier	line
>7568	ArrayIndexing	p_diff [ 1 ]
>7569	PrimaryExpression	1
>7570	Identifier	p_diff
>7571	MultiplicativeExpression	p_diff [ 0 ] * line [ 0 ]
>7572	ArrayIndexing	line [ 0 ]
>7573	PrimaryExpression	0
>7574	Identifier	line
>7575	ArrayIndexing	p_diff [ 0 ]
>7576	PrimaryExpression	0
>7577	Identifier	p_diff
>7578	Identifier	dot
>7579	Identifier	dot
>7580	IdentifierDeclType	double
>7581	IdentifierDeclStatement	 
>7582	IdentifierDecl	p_diff [ 2 ] = { p [ 0 ] - vec [ 0 ] , p [ 1 ] - vec [ 1 ] }
>7583	AssignmentExpr	p_diff [ 2 ] = { p [ 0 ] - vec [ 0 ] , p [ 1 ] - vec [ 1 ] }
>7584	InitializerList	p [ 0 ] - vec [ 0 ]
>7585	AdditiveExpression	p [ 1 ] - vec [ 1 ]
>7586	ArrayIndexing	vec [ 1 ]
>7587	PrimaryExpression	1
>7588	Identifier	vec
>7589	ArrayIndexing	p [ 1 ]
>7590	PrimaryExpression	1
>7591	Identifier	p
>7592	AdditiveExpression	p [ 0 ] - vec [ 0 ]
>7593	ArrayIndexing	vec [ 0 ]
>7594	PrimaryExpression	0
>7595	Identifier	vec
>7596	ArrayIndexing	p [ 0 ]
>7597	PrimaryExpression	0
>7598	Identifier	p
>7599	Identifier	p_diff
>7600	PrimaryExpression	2
>7601	Identifier	p_diff
>7602	IdentifierDeclType	double [ 2 ]
>7603	IdentifierDeclStatement	 
>7604	IdentifierDecl	vec [ 2 ] = { - line [ 2 ] * line [ 0 ] , - line [ 2 ] * line [ 1 ] }
>7605	AssignmentExpr	vec [ 2 ] = { - line [ 2 ] * line [ 0 ] , - line [ 2 ] * line [ 1 ] }
>7606	InitializerList	- line [ 2 ] * line [ 0 ]
>7607	MultiplicativeExpression	- line [ 2 ] * line [ 1 ]
>7608	ArrayIndexing	line [ 1 ]
>7609	PrimaryExpression	1
>7610	Identifier	line
>7611	UnaryOp	- line [ 2 ]
>7612	ArrayIndexing	line [ 2 ]
>7613	PrimaryExpression	2
>7614	Identifier	line
>7615	UnaryOperator	-
>7616	MultiplicativeExpression	- line [ 2 ] * line [ 0 ]
>7617	ArrayIndexing	line [ 0 ]
>7618	PrimaryExpression	0
>7619	Identifier	line
>7620	UnaryOp	- line [ 2 ]
>7621	ArrayIndexing	line [ 2 ]
>7622	PrimaryExpression	2
>7623	Identifier	line
>7624	UnaryOperator	-
>7625	Identifier	vec
>7626	PrimaryExpression	2
>7627	Identifier	vec
>7628	IdentifierDeclType	double [ 2 ]
>7647	FunctionDef	ImageData 
>7648	ParameterList	double sigma , double threshold1 , double threshold2 , double min_line_segment_size
>7649	Parameter	 
>7650	Identifier	min_line_segment_size
>7651	ParameterType	double
>7652	Parameter	 
>7653	Identifier	threshold2
>7654	ParameterType	double
>7655	Parameter	 
>7656	Identifier	threshold1
>7657	ParameterType	double
>7658	Parameter	 
>7659	Identifier	sigma
>7660	ParameterType	double
>7661	ReturnType	void
>7662	CompoundStatement	 
>7663	IfStatement	if ( unload )
>7664	CompoundStatement	 
>7665	ExpressionStatement	 
>7666	CallExpression	UnloadImage ( )
>7667	ArgumentList	 
>7668	Callee	UnloadImage
>7669	Identifier	UnloadImage
>7670	ExpressionStatement	 
>7671	CallExpression	printf ( \"[ImageData
>7672	ArgumentList	\"[ImageData
>7673	Argument	\"[ImageData
>7674	PrimaryExpression	\"[ImageData
>7675	Callee	printf
>7676	Identifier	printf
>7677	Condition	 
>7678	Identifier	unload
>7679	ForStatement	for ( int angle_i = 0 ; angle_i < num_angles ; angle_i ++ )
>7680	CompoundStatement	 
>7681	ExpressionStatement	 
>7682	CallExpression	img_free ( img_out )
>7683	ArgumentList	img_out
>7684	Argument	img_out
>7685	Identifier	img_out
>7686	Callee	img_free
>7687	Identifier	img_free
>7688	ExpressionStatement	 
>7689	CallExpression	free ( lines_long )
>7690	ArgumentList	lines_long
>7691	Argument	lines_long
>7692	Identifier	lines_long
>7693	Callee	free
>7694	Identifier	free
>7695	ExpressionStatement	 
>7696	CallExpression	free ( lines )
>7697	ArgumentList	lines
>7698	Argument	lines
>7699	Identifier	lines
>7700	Callee	free
>7701	Identifier	free
>7702	ExpressionStatement	 
>7703	CallExpression	free ( links )
>7704	ArgumentList	links
>7705	Argument	links
>7706	Identifier	links
>7707	Callee	free
>7708	Identifier	free
>7709	ForStatement	for ( int i = 0 ; i < num_lines ; i ++ )
>7710	CompoundStatement	 
>7711	ExpressionStatement	 
>7712	CallExpression	edge_free ( & lines [ i ] )
>7713	ArgumentList	& lines [ i ]
>7714	Argument	& lines [ i ]
>7715	UnaryOp	& lines [ i ]
>7716	ArrayIndexing	lines [ i ]
>7717	Identifier	i
>7718	Identifier	lines
>7719	UnaryOperator	&
>7720	Callee	edge_free
>7721	Identifier	edge_free
>7722	IncDecOp	 
>7723	IncDec	++
>7724	Identifier	i
>7725	Condition	 
>7726	RelationalExpression	i < num_lines
>7727	Identifier	num_lines
>7728	Identifier	i
>7729	ForInit	 
>7730	IdentifierDeclStatement	int i = 0 ;
>7731	IdentifierDecl	i = 0
>7732	AssignmentExpr	i = 0
>7733	PrimaryExpression	0
>7734	Identifier	i
>7735	Identifier	i
>7736	IdentifierDeclType	int
>7737	ExpressionStatement	 
>7738	CallExpression	printf ( \"[ImageData
>7739	ArgumentList	\"[ImageData
>7740	Argument	num_lines
>7741	Identifier	num_lines
>7742	Argument	\"[ImageData
>7743	PrimaryExpression	\"[ImageData
>7744	Callee	printf
>7745	Identifier	printf
>7746	ExpressionStatement	 
>7747	CallExpression	printf ( \"[ImageData
>7748	ArgumentList	\"[ImageData
>7749	Argument	num_lines_long
>7750	Identifier	num_lines_long
>7751	Argument	\"[ImageData
>7752	PrimaryExpression	\"[ImageData
>7753	Callee	printf
>7754	Identifier	printf
>7755	ForStatement	for ( int i = 0 ; i < num_lines_long ; i ++ )
>7756	CompoundStatement	 
>7757	ExpressionStatement	 
>7758	Identifier	projs
>7759	Statement	 
>7760	Statement	 
>7761	Statement	 
>7762	ExpressionStatement	 
>7763	Identifier	pts
>7764	Statement	 
>7765	Statement	 
>7766	Statement	 
>7767	IfStatement	if ( m_fisheye )
>7768	ElseStatement	else
>7769	CompoundStatement	 
>7770	ExpressionStatement	 
>7771	CallExpression	m_line_segments . push_back ( line )
>7772	ArgumentList	line
>7773	Argument	line
>7774	Identifier	line
>7775	Callee	m_line_segments . push_back
>7776	MemberAccess	m_line_segments . push_back
>7777	Identifier	push_back
>7778	Identifier	m_line_segments
>7779	ExpressionStatement	 
>7780	AssignmentExpr	line . m_p2 [ 1 ] = Vy ( projs [ extrema2 ] )
>7781	CallExpression	Vy ( projs [ extrema2 ] )
>7782	ArgumentList	projs [ extrema2 ]
>7783	Argument	projs [ extrema2 ]
>7784	ArrayIndexing	projs [ extrema2 ]
>7785	Identifier	extrema2
>7786	Identifier	projs
>7787	Callee	Vy
>7788	Identifier	Vy
>7789	ArrayIndexing	line . m_p2 [ 1 ]
>7790	PrimaryExpression	1
>7791	MemberAccess	line . m_p2
>7792	Identifier	m_p2
>7793	Identifier	line
>7794	ExpressionStatement	 
>7795	AssignmentExpr	line . m_p2 [ 0 ] = Vx ( projs [ extrema2 ] )
>7796	CallExpression	Vx ( projs [ extrema2 ] )
>7797	ArgumentList	projs [ extrema2 ]
>7798	Argument	projs [ extrema2 ]
>7799	ArrayIndexing	projs [ extrema2 ]
>7800	Identifier	extrema2
>7801	Identifier	projs
>7802	Callee	Vx
>7803	Identifier	Vx
>7804	ArrayIndexing	line . m_p2 [ 0 ]
>7805	PrimaryExpression	0
>7806	MemberAccess	line . m_p2
>7807	Identifier	m_p2
>7808	Identifier	line
>7809	ExpressionStatement	 
>7810	AssignmentExpr	line . m_p1 [ 1 ] = Vy ( projs [ extrema1 ] )
>7811	CallExpression	Vy ( projs [ extrema1 ] )
>7812	ArgumentList	projs [ extrema1 ]
>7813	Argument	projs [ extrema1 ]
>7814	ArrayIndexing	projs [ extrema1 ]
>7815	Identifier	extrema1
>7816	Identifier	projs
>7817	Callee	Vy
>7818	Identifier	Vy
>7819	ArrayIndexing	line . m_p1 [ 1 ]
>7820	PrimaryExpression	1
>7821	MemberAccess	line . m_p1
>7822	Identifier	m_p1
>7823	Identifier	line
>7824	ExpressionStatement	 
>7825	AssignmentExpr	line . m_p1 [ 0 ] = Vx ( projs [ extrema1 ] )
>7826	CallExpression	Vx ( projs [ extrema1 ] )
>7827	ArgumentList	projs [ extrema1 ]
>7828	Argument	projs [ extrema1 ]
>7829	ArrayIndexing	projs [ extrema1 ]
>7830	Identifier	extrema1
>7831	Identifier	projs
>7832	Callee	Vx
>7833	Identifier	Vx
>7834	ArrayIndexing	line . m_p1 [ 0 ]
>7835	PrimaryExpression	0
>7836	MemberAccess	line . m_p1
>7837	Identifier	m_p1
>7838	Identifier	line
>7839	IdentifierDeclStatement	 
>7840	IdentifierDecl	line
>7841	Identifier	line
>7842	IdentifierDeclType	LineSegment2D
>7843	CompoundStatement	 
>7844	ExpressionStatement	 
>7845	CallExpression	m_line_segments . push_back ( line )
>7846	ArgumentList	line
>7847	Argument	line
>7848	Identifier	line
>7849	Callee	m_line_segments . push_back
>7850	MemberAccess	m_line_segments . push_back
>7851	Identifier	push_back
>7852	Identifier	m_line_segments
>7853	ExpressionStatement	 
>7854	AssignmentExpr	line . m_p2 [ 1 ] = Rp2 [ 1 ]
>7855	ArrayIndexing	Rp2 [ 1 ]
>7856	PrimaryExpression	1
>7857	Identifier	Rp2
>7858	ArrayIndexing	line . m_p2 [ 1 ]
>7859	PrimaryExpression	1
>7860	MemberAccess	line . m_p2
>7861	Identifier	m_p2
>7862	Identifier	line
>7863	ExpressionStatement	 
>7864	AssignmentExpr	line . m_p2 [ 0 ] = Rp2 [ 0 ]
>7865	ArrayIndexing	Rp2 [ 0 ]
>7866	PrimaryExpression	0
>7867	Identifier	Rp2
>7868	ArrayIndexing	line . m_p2 [ 0 ]
>7869	PrimaryExpression	0
>7870	MemberAccess	line . m_p2
>7871	Identifier	m_p2
>7872	Identifier	line
>7873	ExpressionStatement	 
>7874	AssignmentExpr	line . m_p1 [ 1 ] = Rp1 [ 1 ]
>7875	ArrayIndexing	Rp1 [ 1 ]
>7876	PrimaryExpression	1
>7877	Identifier	Rp1
>7878	ArrayIndexing	line . m_p1 [ 1 ]
>7879	PrimaryExpression	1
>7880	MemberAccess	line . m_p1
>7881	Identifier	m_p1
>7882	Identifier	line
>7883	ExpressionStatement	 
>7884	AssignmentExpr	line . m_p1 [ 0 ] = Rp1 [ 0 ]
>7885	ArrayIndexing	Rp1 [ 0 ]
>7886	PrimaryExpression	0
>7887	Identifier	Rp1
>7888	ArrayIndexing	line . m_p1 [ 0 ]
>7889	PrimaryExpression	0
>7890	MemberAccess	line . m_p1
>7891	Identifier	m_p1
>7892	Identifier	line
>7893	IdentifierDeclStatement	 
>7894	IdentifierDecl	line
>7895	Identifier	line
>7896	IdentifierDeclType	LineSegment2D
>7897	ExpressionStatement	 
>7898	CallExpression	matrix_scale ( 3 , 1 , Rp2 , m_fFocal / Rp2 [ 2 ] , Rp2 )
>7899	ArgumentList	3
>7900	Argument	Rp2
>7901	Identifier	Rp2
>7902	Argument	m_fFocal / Rp2 [ 2 ]
>7903	MultiplicativeExpression	m_fFocal / Rp2 [ 2 ]
>7904	ArrayIndexing	Rp2 [ 2 ]
>7905	PrimaryExpression	2
>7906	Identifier	Rp2
>7907	Identifier	m_fFocal
>7908	Argument	Rp2
>7909	Identifier	Rp2
>7910	Argument	1
>7911	PrimaryExpression	1
>7912	Argument	3
>7913	PrimaryExpression	3
>7914	Callee	matrix_scale
>7915	Identifier	matrix_scale
>7916	ExpressionStatement	 
>7917	CallExpression	matrix_scale ( 3 , 1 , Rp1 , m_fFocal / Rp1 [ 2 ] , Rp1 )
>7918	ArgumentList	3
>7919	Argument	Rp1
>7920	Identifier	Rp1
>7921	Argument	m_fFocal / Rp1 [ 2 ]
>7922	MultiplicativeExpression	m_fFocal / Rp1 [ 2 ]
>7923	ArrayIndexing	Rp1 [ 2 ]
>7924	PrimaryExpression	2
>7925	Identifier	Rp1
>7926	Identifier	m_fFocal
>7927	Argument	Rp1
>7928	Identifier	Rp1
>7929	Argument	1
>7930	PrimaryExpression	1
>7931	Argument	3
>7932	PrimaryExpression	3
>7933	Callee	matrix_scale
>7934	Identifier	matrix_scale
>7935	ExpressionStatement	 
>7936	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , p2 , Rp2 )
>7937	ArgumentList	3
>7938	Argument	Rp2
>7939	Identifier	Rp2
>7940	Argument	p2
>7941	Identifier	p2
>7942	Argument	R
>7943	Identifier	R
>7944	Argument	1
>7945	PrimaryExpression	1
>7946	Argument	3
>7947	PrimaryExpression	3
>7948	Argument	3
>7949	PrimaryExpression	3
>7950	Argument	3
>7951	PrimaryExpression	3
>7952	Callee	matrix_product
>7953	Identifier	matrix_product
>7954	ExpressionStatement	 
>7955	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , p1 , Rp1 )
>7956	ArgumentList	3
>7957	Argument	Rp1
>7958	Identifier	Rp1
>7959	Argument	p1
>7960	Identifier	p1
>7961	Argument	R
>7962	Identifier	R
>7963	Argument	1
>7964	PrimaryExpression	1
>7965	Argument	3
>7966	PrimaryExpression	3
>7967	Argument	3
>7968	PrimaryExpression	3
>7969	Argument	3
>7970	PrimaryExpression	3
>7971	Callee	matrix_product
>7972	Identifier	matrix_product
>7973	IdentifierDeclStatement	 
>7974	IdentifierDecl	Rp2 [ 3 ]
>7975	PrimaryExpression	3
>7976	Identifier	Rp2
>7977	IdentifierDeclType	double [ 3 ]
>7978	IdentifierDecl	Rp1 [ 3 ]
>7979	PrimaryExpression	3
>7980	Identifier	Rp1
>7981	IdentifierDeclType	double [ 3 ]
>7982	IdentifierDeclStatement	 
>7983	IdentifierDecl	p2 [ 3 ] = { Vx ( projs [ extrema2 ] ) , Vy ( projs [ extrema2 ] ) , - m_fFocal }
>7984	AssignmentExpr	p2 [ 3 ] = { Vx ( projs [ extrema2 ] ) , Vy ( projs [ extrema2 ] ) , - m_fFocal }
>7985	InitializerList	Vx ( projs [ extrema2 ] )
>7986	UnaryOp	- m_fFocal
>7987	Identifier	m_fFocal
>7988	UnaryOperator	-
>7989	CallExpression	Vy ( projs [ extrema2 ] )
>7990	ArgumentList	projs [ extrema2 ]
>7991	Argument	projs [ extrema2 ]
>7992	ArrayIndexing	projs [ extrema2 ]
>7993	Identifier	extrema2
>7994	Identifier	projs
>7995	Callee	Vy
>7996	Identifier	Vy
>7997	CallExpression	Vx ( projs [ extrema2 ] )
>7998	ArgumentList	projs [ extrema2 ]
>7999	Argument	projs [ extrema2 ]
>8000	ArrayIndexing	projs [ extrema2 ]
>8001	Identifier	extrema2
>8002	Identifier	projs
>8003	Callee	Vx
>8004	Identifier	Vx
>8005	Identifier	p2
>8006	PrimaryExpression	3
>8007	Identifier	p2
>8008	IdentifierDeclType	double [ 3 ]
>8009	IdentifierDeclStatement	 
>8010	IdentifierDecl	p1 [ 3 ] = { Vx ( projs [ extrema1 ] ) , Vy ( projs [ extrema1 ] ) , - m_fFocal }
>8011	AssignmentExpr	p1 [ 3 ] = { Vx ( projs [ extrema1 ] ) , Vy ( projs [ extrema1 ] ) , - m_fFocal }
>8012	InitializerList	Vx ( projs [ extrema1 ] )
>8013	UnaryOp	- m_fFocal
>8014	Identifier	m_fFocal
>8015	UnaryOperator	-
>8016	CallExpression	Vy ( projs [ extrema1 ] )
>8017	ArgumentList	projs [ extrema1 ]
>8018	Argument	projs [ extrema1 ]
>8019	ArrayIndexing	projs [ extrema1 ]
>8020	Identifier	extrema1
>8021	Identifier	projs
>8022	Callee	Vy
>8023	Identifier	Vy
>8024	CallExpression	Vx ( projs [ extrema1 ] )
>8025	ArgumentList	projs [ extrema1 ]
>8026	Argument	projs [ extrema1 ]
>8027	ArrayIndexing	projs [ extrema1 ]
>8028	Identifier	extrema1
>8029	Identifier	projs
>8030	Callee	Vx
>8031	Identifier	Vx
>8032	Identifier	p1
>8033	PrimaryExpression	3
>8034	Identifier	p1
>8035	IdentifierDeclType	double [ 3 ]
>8036	ExpressionStatement	 
>8037	CallExpression	GetRotationFromSpherical ( - 0.5 * M_PI , angle + 0.5 * M_PI , R )
>8038	ArgumentList	- 0.5 * M_PI
>8039	Argument	R
>8040	Identifier	R
>8041	Argument	angle + 0.5 * M_PI
>8042	AdditiveExpression	angle + 0.5 * M_PI
>8043	MultiplicativeExpression	0.5 * M_PI
>8044	Identifier	M_PI
>8045	PrimaryExpression	0.5
>8046	Identifier	angle
>8047	Argument	- 0.5 * M_PI
>8048	MultiplicativeExpression	- 0.5 * M_PI
>8049	Identifier	M_PI
>8050	UnaryOp	- 0.5
>8051	PrimaryExpression	0.5
>8052	UnaryOperator	-
>8053	Callee	GetRotationFromSpherical
>8054	Identifier	GetRotationFromSpherical
>8055	IdentifierDeclStatement	 
>8056	IdentifierDecl	R [ 9 ]
>8057	PrimaryExpression	9
>8058	Identifier	R
>8059	IdentifierDeclType	double [ 9 ]
>8060	Condition	 
>8061	Identifier	m_fisheye
>8062	IdentifierDeclStatement	 
>8063	IdentifierDecl	extrema2 = idx_max
>8064	AssignmentExpr	extrema2 = idx_max
>8065	Identifier	idx_max
>8066	Identifier	idx_max
>8067	Identifier	extrema2
>8068	IdentifierDeclType	int
>8069	ForStatement	for ( int j = 0 ; j < length ; j ++ )
>8070	CompoundStatement	 
>8071	IfStatement	if ( norm > norm_max )
>8072	CompoundStatement	 
>8073	ExpressionStatement	 
>8074	AssignmentExpr	idx_max = j
>8075	Identifier	j
>8076	Identifier	idx_max
>8077	ExpressionStatement	 
>8078	AssignmentExpr	norm_max = norm
>8079	Identifier	norm
>8080	Identifier	norm_max
>8081	Condition	 
>8082	RelationalExpression	norm > norm_max
>8083	Identifier	norm_max
>8084	Identifier	norm
>8085	IdentifierDeclStatement	 
>8086	IdentifierDecl	norm = v2_norm ( p )
>8087	AssignmentExpr	norm = v2_norm ( p )
>8088	CallExpression	v2_norm ( p )
>8089	ArgumentList	p
>8090	Argument	p
>8091	Identifier	p
>8092	Callee	v2_norm
>8093	Identifier	v2_norm
>8094	Identifier	norm
>8095	Identifier	norm
>8096	IdentifierDeclType	double
>8097	IdentifierDeclStatement	 
>8098	IdentifierDecl	p = v2_sub ( projs [ j ] , projs [ extrema1 ] )
>8099	AssignmentExpr	p = v2_sub ( projs [ j ] , projs [ extrema1 ] )
>8100	CallExpression	v2_sub ( projs [ j ] , projs [ extrema1 ] )
>8101	ArgumentList	projs [ j ]
>8102	Argument	projs [ extrema1 ]
>8103	ArrayIndexing	projs [ extrema1 ]
>8104	Identifier	extrema1
>8105	Identifier	projs
>8106	Argument	projs [ j ]
>8107	ArrayIndexing	projs [ j ]
>8108	Identifier	j
>8109	Identifier	projs
>8110	Callee	v2_sub
>8111	Identifier	v2_sub
>8112	Identifier	p
>8113	Identifier	p
>8114	IdentifierDeclType	v2_t
>8115	IncDecOp	 
>8116	IncDec	++
>8117	Identifier	j
>8118	Condition	 
>8119	RelationalExpression	j < length
>8120	Identifier	length
>8121	Identifier	j
>8122	ForInit	 
>8123	IdentifierDeclStatement	int j = 0 ;
>8124	IdentifierDecl	j = 0
>8125	AssignmentExpr	j = 0
>8126	PrimaryExpression	0
>8127	Identifier	j
>8128	Identifier	j
>8129	IdentifierDeclType	int
>8130	ExpressionStatement	 
>8131	AssignmentExpr	idx_max = - 1
>8132	UnaryOp	- 1
>8133	PrimaryExpression	1
>8134	UnaryOperator	-
>8135	Identifier	idx_max
>8136	ExpressionStatement	 
>8137	AssignmentExpr	norm_max = 0.0
>8138	PrimaryExpression	0.0
>8139	Identifier	norm_max
>8140	IdentifierDeclStatement	 
>8141	IdentifierDecl	extrema1 = idx_max
>8142	AssignmentExpr	extrema1 = idx_max
>8143	Identifier	idx_max
>8144	Identifier	idx_max
>8145	Identifier	extrema1
>8146	IdentifierDeclType	int
>8147	ForStatement	for ( int j = 0 ; j < length ; j ++ )
>8148	CompoundStatement	 
>8149	IfStatement	if ( norm > norm_max )
>8150	CompoundStatement	 
>8151	ExpressionStatement	 
>8152	AssignmentExpr	idx_max = j
>8153	Identifier	j
>8154	Identifier	idx_max
>8155	ExpressionStatement	 
>8156	AssignmentExpr	norm_max = norm
>8157	Identifier	norm
>8158	Identifier	norm_max
>8159	Condition	 
>8160	RelationalExpression	norm > norm_max
>8161	Identifier	norm_max
>8162	Identifier	norm
>8163	IdentifierDeclStatement	 
>8164	IdentifierDecl	norm = v2_norm ( p )
>8165	AssignmentExpr	norm = v2_norm ( p )
>8166	CallExpression	v2_norm ( p )
>8167	ArgumentList	p
>8168	Argument	p
>8169	Identifier	p
>8170	Callee	v2_norm
>8171	Identifier	v2_norm
>8172	Identifier	norm
>8173	Identifier	norm
>8174	IdentifierDeclType	double
>8175	IdentifierDeclStatement	 
>8176	IdentifierDecl	p = v2_sub ( projs [ j ] , mean )
>8177	AssignmentExpr	p = v2_sub ( projs [ j ] , mean )
>8178	CallExpression	v2_sub ( projs [ j ] , mean )
>8179	ArgumentList	projs [ j ]
>8180	Argument	mean
>8181	Identifier	mean
>8182	Argument	projs [ j ]
>8183	ArrayIndexing	projs [ j ]
>8184	Identifier	j
>8185	Identifier	projs
>8186	Callee	v2_sub
>8187	Identifier	v2_sub
>8188	Identifier	p
>8189	Identifier	p
>8190	IdentifierDeclType	v2_t
>8191	IncDecOp	 
>8192	IncDec	++
>8193	Identifier	j
>8194	Condition	 
>8195	RelationalExpression	j < length
>8196	Identifier	length
>8197	Identifier	j
>8198	ForInit	 
>8199	IdentifierDeclStatement	int j = 0 ;
>8200	IdentifierDecl	j = 0
>8201	AssignmentExpr	j = 0
>8202	PrimaryExpression	0
>8203	Identifier	j
>8204	Identifier	j
>8205	IdentifierDeclType	int
>8206	IdentifierDeclStatement	 
>8207	IdentifierDecl	idx_max = - 1
>8208	AssignmentExpr	idx_max = - 1
>8209	UnaryOp	- 1
>8210	PrimaryExpression	1
>8211	UnaryOperator	-
>8212	Identifier	idx_max
>8213	Identifier	idx_max
>8214	IdentifierDeclType	int
>8215	IdentifierDeclStatement	 
>8216	IdentifierDecl	norm_max = 0.0
>8217	AssignmentExpr	norm_max = 0.0
>8218	PrimaryExpression	0.0
>8219	Identifier	norm_max
>8220	Identifier	norm_max
>8221	IdentifierDeclType	double
>8222	ExpressionStatement	 
>8223	AssignmentExpr	mean = v2_scale ( 1.0 / length , mean )
>8224	CallExpression	v2_scale ( 1.0 / length , mean )
>8225	ArgumentList	1.0 / length
>8226	Argument	mean
>8227	Identifier	mean
>8228	Argument	1.0 / length
>8229	MultiplicativeExpression	1.0 / length
>8230	Identifier	length
>8231	PrimaryExpression	1.0
>8232	Callee	v2_scale
>8233	Identifier	v2_scale
>8234	Identifier	mean
>8235	ForStatement	for ( int j = 0 ; j < length ; j ++ )
>8236	CompoundStatement	 
>8237	ExpressionStatement	 
>8238	AssignmentExpr	mean = v2_add ( mean , projs [ j ] )
>8239	CallExpression	v2_add ( mean , projs [ j ] )
>8240	ArgumentList	mean
>8241	Argument	projs [ j ]
>8242	ArrayIndexing	projs [ j ]
>8243	Identifier	j
>8244	Identifier	projs
>8245	Argument	mean
>8246	Identifier	mean
>8247	Callee	v2_add
>8248	Identifier	v2_add
>8249	Identifier	mean
>8250	IncDecOp	 
>8251	IncDec	++
>8252	Identifier	j
>8253	Condition	 
>8254	RelationalExpression	j < length
>8255	Identifier	length
>8256	Identifier	j
>8257	ForInit	 
>8258	IdentifierDeclStatement	int j = 0 ;
>8259	IdentifierDecl	j = 0
>8260	AssignmentExpr	j = 0
>8261	PrimaryExpression	0
>8262	Identifier	j
>8263	Identifier	j
>8264	IdentifierDeclType	int
>8265	IdentifierDeclStatement	 
>8266	IdentifierDecl	mean = v2_new ( 0.0 , 0.0 )
>8267	AssignmentExpr	mean = v2_new ( 0.0 , 0.0 )
>8268	CallExpression	v2_new ( 0.0 , 0.0 )
>8269	ArgumentList	0.0
>8270	Argument	0.0
>8271	PrimaryExpression	0.0
>8272	Argument	0.0
>8273	PrimaryExpression	0.0
>8274	Callee	v2_new
>8275	Identifier	v2_new
>8276	Identifier	mean
>8277	Identifier	mean
>8278	IdentifierDeclType	v2_t
>8279	ForStatement	for ( int j = 0 ; j < length ; j ++ )
>8280	CompoundStatement	 
>8281	ExpressionStatement	 
>8282	AssignmentExpr	projs [ j ] = v2_new ( proj_arr [ 0 ] , proj_arr [ 1 ] )
>8283	CallExpression	v2_new ( proj_arr [ 0 ] , proj_arr [ 1 ] )
>8284	ArgumentList	proj_arr [ 0 ]
>8285	Argument	proj_arr [ 1 ]
>8286	ArrayIndexing	proj_arr [ 1 ]
>8287	PrimaryExpression	1
>8288	Identifier	proj_arr
>8289	Argument	proj_arr [ 0 ]
>8290	ArrayIndexing	proj_arr [ 0 ]
>8291	PrimaryExpression	0
>8292	Identifier	proj_arr
>8293	Callee	v2_new
>8294	Identifier	v2_new
>8295	ArrayIndexing	projs [ j ]
>8296	Identifier	j
>8297	Identifier	projs
>8298	ExpressionStatement	 
>8299	CallExpression	ProjectOnLine ( pt_arr , params , proj_arr )
>8300	ArgumentList	pt_arr
>8301	Argument	proj_arr
>8302	Identifier	proj_arr
>8303	Argument	params
>8304	Identifier	params
>8305	Argument	pt_arr
>8306	Identifier	pt_arr
>8307	Callee	ProjectOnLine
>8308	Identifier	ProjectOnLine
>8309	IdentifierDeclStatement	 
>8310	IdentifierDecl	proj_arr [ 2 ]
>8311	PrimaryExpression	2
>8312	Identifier	proj_arr
>8313	IdentifierDeclType	double [ 2 ]
>8314	IdentifierDeclStatement	 
>8315	IdentifierDecl	pt_arr [ 2 ] = { Vx ( pts [ j ] ) , Vy ( pts [ j ] ) }
>8316	AssignmentExpr	pt_arr [ 2 ] = { Vx ( pts [ j ] ) , Vy ( pts [ j ] ) }
>8317	InitializerList	Vx ( pts [ j ] )
>8318	CallExpression	Vy ( pts [ j ] )
>8319	ArgumentList	pts [ j ]
>8320	Argument	pts [ j ]
>8321	ArrayIndexing	pts [ j ]
>8322	Identifier	j
>8323	Identifier	pts
>8324	Callee	Vy
>8325	Identifier	Vy
>8326	CallExpression	Vx ( pts [ j ] )
>8327	ArgumentList	pts [ j ]
>8328	Argument	pts [ j ]
>8329	ArrayIndexing	pts [ j ]
>8330	Identifier	j
>8331	Identifier	pts
>8332	Callee	Vx
>8333	Identifier	Vx
>8334	Identifier	pt_arr
>8335	PrimaryExpression	2
>8336	Identifier	pt_arr
>8337	IdentifierDeclType	double [ 2 ]
>8338	IncDecOp	 
>8339	IncDec	++
>8340	Identifier	j
>8341	Condition	 
>8342	RelationalExpression	j < length
>8343	Identifier	length
>8344	Identifier	j
>8345	ForInit	 
>8346	IdentifierDeclStatement	int j = 0 ;
>8347	IdentifierDecl	j = 0
>8348	AssignmentExpr	j = 0
>8349	PrimaryExpression	0
>8350	Identifier	j
>8351	Identifier	j
>8352	IdentifierDeclType	int
>8353	IdentifierDeclStatement	 
>8354	IdentifierDecl	* projs = new v2_t [ length ]
>8355	AssignmentExpr	* projs = new v2_t [ length ]
>8356	Identifier	length
>8357	Identifier	length
>8358	Identifier	projs
>8359	IdentifierDeclType	v2_t *
>8360	ExpressionStatement	 
>8361	CallExpression	fit_2D_line_orthogonal_regression ( length , pts , params )
>8362	ArgumentList	length
>8363	Argument	params
>8364	Identifier	params
>8365	Argument	pts
>8366	Identifier	pts
>8367	Argument	length
>8368	Identifier	length
>8369	Callee	fit_2D_line_orthogonal_regression
>8370	Identifier	fit_2D_line_orthogonal_regression
>8371	IdentifierDeclStatement	 
>8372	IdentifierDecl	params [ 3 ]
>8373	PrimaryExpression	3
>8374	Identifier	params
>8375	IdentifierDeclType	double [ 3 ]
>8376	WhileStatement	while ( link != NULL )
>8377	CompoundStatement	 
>8378	ExpressionStatement	 
>8379	IncDecOp	count ++
>8380	IncDec	++
>8381	Identifier	count
>8382	ExpressionStatement	 
>8383	AssignmentExpr	link = link -> next
>8384	PtrMemberAccess	link -> next
>8385	Identifier	next
>8386	Identifier	link
>8387	Identifier	link
>8388	ExpressionStatement	 
>8389	AssignmentExpr	pts [ count ] = v2_new ( link -> x , link -> y )
>8390	CallExpression	v2_new ( link -> x , link -> y )
>8391	ArgumentList	link -> x
>8392	Argument	link -> y
>8393	PtrMemberAccess	link -> y
>8394	Identifier	y
>8395	Identifier	link
>8396	Argument	link -> x
>8397	PtrMemberAccess	link -> x
>8398	Identifier	x
>8399	Identifier	link
>8400	Callee	v2_new
>8401	Identifier	v2_new
>8402	ArrayIndexing	pts [ count ]
>8403	Identifier	count
>8404	Identifier	pts
>8405	Condition	 
>8406	EqualityExpression	link != NULL
>8407	Identifier	NULL
>8408	Identifier	link
>8409	IdentifierDeclStatement	 
>8410	IdentifierDecl	count = 0
>8411	AssignmentExpr	count = 0
>8412	PrimaryExpression	0
>8413	Identifier	count
>8414	Identifier	count
>8415	IdentifierDeclType	int
>8416	ExpressionStatement	 
>8417	AssignmentExpr	link = lines_long [ i ] . next
>8418	MemberAccess	lines_long [ i ] . next
>8419	Identifier	next
>8420	ArrayIndexing	lines_long [ i ]
>8421	Identifier	i
>8422	Identifier	lines_long
>8423	Identifier	link
>8424	IdentifierDeclStatement	 
>8425	IdentifierDecl	* pts = new v2_t [ length ]
>8426	AssignmentExpr	* pts = new v2_t [ length ]
>8427	Identifier	length
>8428	Identifier	length
>8429	Identifier	pts
>8430	IdentifierDeclType	v2_t *
>8431	WhileStatement	while ( link != NULL )
>8432	CompoundStatement	 
>8433	ExpressionStatement	 
>8434	IncDecOp	length ++
>8435	IncDec	++
>8436	Identifier	length
>8437	ExpressionStatement	 
>8438	AssignmentExpr	link = link -> next
>8439	PtrMemberAccess	link -> next
>8440	Identifier	next
>8441	Identifier	link
>8442	Identifier	link
>8443	Condition	 
>8444	EqualityExpression	link != NULL
>8445	Identifier	NULL
>8446	Identifier	link
>8447	IdentifierDeclStatement	 
>8448	IdentifierDecl	length = 0
>8449	AssignmentExpr	length = 0
>8450	PrimaryExpression	0
>8451	Identifier	length
>8452	Identifier	length
>8453	IdentifierDeclType	int
>8454	IdentifierDeclStatement	 
>8455	IdentifierDecl	* link = lines_long [ i ] . next
>8456	AssignmentExpr	* link = lines_long [ i ] . next
>8457	MemberAccess	lines_long [ i ] . next
>8458	Identifier	next
>8459	ArrayIndexing	lines_long [ i ]
>8460	Identifier	i
>8461	Identifier	lines_long
>8462	Identifier	link
>8463	Identifier	link
>8464	IdentifierDeclType	edge_link_t *
>8465	IncDecOp	 
>8466	IncDec	++
>8467	Identifier	i
>8468	Condition	 
>8469	RelationalExpression	i < num_lines_long
>8470	Identifier	num_lines_long
>8471	Identifier	i
>8472	ForInit	 
>8473	IdentifierDeclStatement	int i = 0 ;
>8474	IdentifierDecl	i = 0
>8475	AssignmentExpr	i = 0
>8476	PrimaryExpression	0
>8477	Identifier	i
>8478	Identifier	i
>8479	IdentifierDeclType	int
>8480	ExpressionStatement	 
>8481	CallExpression	edge_remove_small ( num_lines , & lines , & num_lines_long , & lines_long , iround ( min_line_segment_size ) )
>8482	ArgumentList	num_lines
>8483	Argument	iround ( min_line_segment_size )
>8484	CallExpression	iround ( min_line_segment_size )
>8485	ArgumentList	min_line_segment_size
>8486	Argument	min_line_segment_size
>8487	Identifier	min_line_segment_size
>8488	Callee	iround
>8489	Identifier	iround
>8490	Argument	& lines_long
>8491	UnaryOp	& lines_long
>8492	Identifier	lines_long
>8493	UnaryOperator	&
>8494	Argument	& num_lines_long
>8495	UnaryOp	& num_lines_long
>8496	Identifier	num_lines_long
>8497	UnaryOperator	&
>8498	Argument	& lines
>8499	UnaryOp	& lines
>8500	Identifier	lines
>8501	UnaryOperator	&
>8502	Argument	num_lines
>8503	Identifier	num_lines
>8504	Callee	edge_remove_small
>8505	Identifier	edge_remove_small
>8506	IdentifierDeclStatement	 
>8507	IdentifierDecl	* lines_long
>8508	Identifier	lines_long
>8509	IdentifierDeclType	edge_link_t *
>8510	IdentifierDeclStatement	 
>8511	IdentifierDecl	num_lines_long
>8512	Identifier	num_lines_long
>8513	IdentifierDeclType	int
>8514	ExpressionStatement	 
>8515	CallExpression	img_break_edges ( num_links , & links , & num_lines , & lines , 2.5 )
>8516	ArgumentList	num_links
>8517	Argument	2.5
>8518	PrimaryExpression	2.5
>8519	Argument	& lines
>8520	UnaryOp	& lines
>8521	Identifier	lines
>8522	UnaryOperator	&
>8523	Argument	& num_lines
>8524	UnaryOp	& num_lines
>8525	Identifier	num_lines
>8526	UnaryOperator	&
>8527	Argument	& links
>8528	UnaryOp	& links
>8529	Identifier	links
>8530	UnaryOperator	&
>8531	Argument	num_links
>8532	Identifier	num_links
>8533	Callee	img_break_edges
>8534	Identifier	img_break_edges
>8535	IdentifierDeclStatement	 
>8536	IdentifierDecl	* lines
>8537	Identifier	lines
>8538	IdentifierDeclType	edge_link_t *
>8539	IdentifierDeclStatement	 
>8540	IdentifierDecl	num_lines
>8541	Identifier	num_lines
>8542	IdentifierDeclType	int
>8543	IfStatement	if ( m_fisheye )
>8544	CompoundStatement	 
>8545	ForStatement	for ( int i = 0 ; i < num_links ; i ++ )
>8546	CompoundStatement	 
>8547	WhileStatement	while ( link != NULL )
>8548	CompoundStatement	 
>8549	ExpressionStatement	 
>8550	AssignmentExpr	link = link -> next
>8551	PtrMemberAccess	link -> next
>8552	Identifier	next
>8553	Identifier	link
>8554	Identifier	link
>8555	ExpressionStatement	 
>8556	AssignmentExpr	link -> y = y_new
>8557	Identifier	y_new
>8558	PtrMemberAccess	link -> y
>8559	Identifier	y
>8560	Identifier	link
>8561	ExpressionStatement	 
>8562	AssignmentExpr	link -> x = x_new
>8563	Identifier	x_new
>8564	PtrMemberAccess	link -> x
>8565	Identifier	x
>8566	Identifier	link
>8567	ExpressionStatement	 
>8568	CallExpression	UndistortPoint ( link -> x - 0.5 * w , link -> y - 0.5 * h , x_new , y_new )
>8569	ArgumentList	link -> x - 0.5 * w
>8570	Argument	y_new
>8571	Identifier	y_new
>8572	Argument	x_new
>8573	Identifier	x_new
>8574	Argument	link -> y - 0.5 * h
>8575	AdditiveExpression	link -> y - 0.5 * h
>8576	MultiplicativeExpression	0.5 * h
>8577	Identifier	h
>8578	PrimaryExpression	0.5
>8579	PtrMemberAccess	link -> y
>8580	Identifier	y
>8581	Identifier	link
>8582	Argument	link -> x - 0.5 * w
>8583	AdditiveExpression	link -> x - 0.5 * w
>8584	MultiplicativeExpression	0.5 * w
>8585	Identifier	w
>8586	PrimaryExpression	0.5
>8587	PtrMemberAccess	link -> x
>8588	Identifier	x
>8589	Identifier	link
>8590	Callee	UndistortPoint
>8591	Identifier	UndistortPoint
>8592	IdentifierDeclStatement	 
>8593	IdentifierDecl	y_new
>8594	Identifier	y_new
>8595	IdentifierDeclType	double
>8596	IdentifierDecl	x_new
>8597	Identifier	x_new
>8598	IdentifierDeclType	double
>8599	Condition	 
>8600	EqualityExpression	link != NULL
>8601	Identifier	NULL
>8602	Identifier	link
>8603	IdentifierDeclStatement	 
>8604	IdentifierDecl	* link = links [ i ] . next
>8605	AssignmentExpr	* link = links [ i ] . next
>8606	MemberAccess	links [ i ] . next
>8607	Identifier	next
>8608	ArrayIndexing	links [ i ]
>8609	Identifier	i
>8610	Identifier	links
>8611	Identifier	link
>8612	Identifier	link
>8613	IdentifierDeclType	edge_link_t *
>8614	IncDecOp	 
>8615	IncDec	++
>8616	Identifier	i
>8617	Condition	 
>8618	RelationalExpression	i < num_links
>8619	Identifier	num_links
>8620	Identifier	i
>8621	ForInit	 
>8622	IdentifierDeclStatement	int i = 0 ;
>8623	IdentifierDecl	i = 0
>8624	AssignmentExpr	i = 0
>8625	PrimaryExpression	0
>8626	Identifier	i
>8627	Identifier	i
>8628	IdentifierDeclType	int
>8629	Condition	 
>8630	Identifier	m_fisheye
>8631	ExpressionStatement	 
>8632	CallExpression	img_link_edges ( img_out , & num_links , & links )
>8633	ArgumentList	img_out
>8634	Argument	& links
>8635	UnaryOp	& links
>8636	Identifier	links
>8637	UnaryOperator	&
>8638	Argument	& num_links
>8639	UnaryOp	& num_links
>8640	Identifier	num_links
>8641	UnaryOperator	&
>8642	Argument	img_out
>8643	Identifier	img_out
>8644	Callee	img_link_edges
>8645	Identifier	img_link_edges
>8646	IdentifierDeclStatement	 
>8647	IdentifierDecl	* links
>8648	Identifier	links
>8649	IdentifierDeclType	edge_link_t *
>8650	IdentifierDeclStatement	 
>8651	IdentifierDecl	num_links
>8652	Identifier	num_links
>8653	IdentifierDeclType	int
>8654	IdentifierDeclStatement	 
>8655	IdentifierDecl	* img_out = img_canny_edge_detect ( m_img , sigma , threshold1 , threshold2 )
>8656	AssignmentExpr	* img_out = img_canny_edge_detect ( m_img , sigma , threshold1 , threshold2 )
>8657	CallExpression	img_canny_edge_detect ( m_img , sigma , threshold1 , threshold2 )
>8658	ArgumentList	m_img
>8659	Argument	threshold2
>8660	Identifier	threshold2
>8661	Argument	threshold1
>8662	Identifier	threshold1
>8663	Argument	sigma
>8664	Identifier	sigma
>8665	Argument	m_img
>8666	Identifier	m_img
>8667	Callee	img_canny_edge_detect
>8668	Identifier	img_canny_edge_detect
>8669	Identifier	img_out
>8670	Identifier	img_out
>8671	IdentifierDeclType	img_t *
>8672	IdentifierDeclStatement	 
>8673	IdentifierDecl	angle = angles [ angle_i ]
>8674	AssignmentExpr	angle = angles [ angle_i ]
>8675	ArrayIndexing	angles [ angle_i ]
>8676	Identifier	angle_i
>8677	Identifier	angles
>8678	Identifier	angle
>8679	Identifier	angle
>8680	IdentifierDeclType	double
>8681	IncDecOp	 
>8682	IncDec	++
>8683	Identifier	angle_i
>8684	Condition	 
>8685	RelationalExpression	angle_i < num_angles
>8686	Identifier	num_angles
>8687	Identifier	angle_i
>8688	ForInit	 
>8689	IdentifierDeclStatement	int angle_i = 0 ;
>8690	IdentifierDecl	angle_i = 0
>8691	AssignmentExpr	angle_i = 0
>8692	PrimaryExpression	0
>8693	Identifier	angle_i
>8694	Identifier	angle_i
>8695	IdentifierDeclType	int
>8696	IdentifierDeclStatement	 
>8697	IdentifierDecl	angles [ num_angles ] = { 0.0 , - 0.125 * M_PI , 0.125 * M_PI }
>8698	AssignmentExpr	angles [ num_angles ] = { 0.0 , - 0.125 * M_PI , 0.125 * M_PI }
>8699	InitializerList	0.0
>8700	MultiplicativeExpression	0.125 * M_PI
>8701	Identifier	M_PI
>8702	PrimaryExpression	0.125
>8703	MultiplicativeExpression	- 0.125 * M_PI
>8704	Identifier	M_PI
>8705	UnaryOp	- 0.125
>8706	PrimaryExpression	0.125
>8707	UnaryOperator	-
>8708	PrimaryExpression	0.0
>8709	Identifier	num_angles
>8710	Identifier	num_angles
>8711	Identifier	angles
>8712	IdentifierDeclType	double [ num_angles ]
>8713	IdentifierDeclStatement	 
>8714	IdentifierDecl	num_angles = 3
>8715	AssignmentExpr	num_angles = 3
>8716	PrimaryExpression	3
>8717	Identifier	num_angles
>8718	Identifier	num_angles
>8719	IdentifierDeclType	const int
>8720	IdentifierDeclStatement	 
>8721	IdentifierDecl	h = m_img -> h
>8722	AssignmentExpr	h = m_img -> h
>8723	PtrMemberAccess	m_img -> h
>8724	Identifier	h
>8725	Identifier	m_img
>8726	Identifier	h
>8727	Identifier	h
>8728	IdentifierDeclType	int
>8729	IdentifierDeclStatement	 
>8730	IdentifierDecl	w = m_img -> w
>8731	AssignmentExpr	w = m_img -> w
>8732	PtrMemberAccess	m_img -> w
>8733	Identifier	w
>8734	Identifier	m_img
>8735	Identifier	w
>8736	Identifier	w
>8737	IdentifierDeclType	int
>8738	IfStatement	if ( ! m_image_loaded )
>8739	CompoundStatement	 
>8740	ExpressionStatement	 
>8741	AssignmentExpr	unload = true
>8742	Identifier	true
>8743	Identifier	unload
>8744	ExpressionStatement	 
>8745	CallExpression	LoadImage ( )
>8746	ArgumentList	 
>8747	Callee	LoadImage
>8748	Identifier	LoadImage
>8749	ExpressionStatement	 
>8750	CallExpression	printf ( \"[ImageData
>8751	ArgumentList	\"[ImageData
>8752	Argument	\"[ImageData
>8753	PrimaryExpression	\"[ImageData
>8754	Callee	printf
>8755	Identifier	printf
>8756	Condition	 
>8757	UnaryOp	! m_image_loaded
>8758	Identifier	m_image_loaded
>8759	UnaryOperator	!
>8760	IdentifierDeclStatement	 
>8761	IdentifierDecl	unload = false
>8762	AssignmentExpr	unload = false
>8763	Identifier	false
>8764	Identifier	false
>8765	Identifier	unload
>8766	IdentifierDeclType	bool
>8867	FunctionDef	ImageData 
>8868	ParameterList	 
>8869	ReturnType	img_t *
>8870	CompoundStatement	 
>8871	ReturnStatement	 
>8872	Identifier	segment_img
>8873	ForStatement	for ( int i = 0 ; i < num_segments ; i ++ )
>8874	CompoundStatement	 
>8875	ExpressionStatement	 
>8876	CallExpression	img_draw_line ( segment_img , x1 , y1 , x2 , y2 , r , g , b )
>8877	ArgumentList	segment_img
>8878	Argument	b
>8879	Identifier	b
>8880	Argument	g
>8881	Identifier	g
>8882	Argument	r
>8883	Identifier	r
>8884	Argument	y2
>8885	Identifier	y2
>8886	Argument	x2
>8887	Identifier	x2
>8888	Argument	y1
>8889	Identifier	y1
>8890	Argument	x1
>8891	Identifier	x1
>8892	Argument	segment_img
>8893	Identifier	segment_img
>8894	Callee	img_draw_line
>8895	Identifier	img_draw_line
>8896	IdentifierDeclStatement	 
>8897	IdentifierDecl	b = rand ( ) % 256
>8898	AssignmentExpr	b = rand ( ) % 256
>8899	MultiplicativeExpression	rand ( ) % 256
>8900	PrimaryExpression	256
>8901	CallExpression	rand ( )
>8902	ArgumentList	 
>8903	Callee	rand
>8904	Identifier	rand
>8905	Identifier	b
>8906	Identifier	b
>8907	IdentifierDeclType	int
>8908	IdentifierDeclStatement	 
>8909	IdentifierDecl	g = rand ( ) % 256
>8910	AssignmentExpr	g = rand ( ) % 256
>8911	MultiplicativeExpression	rand ( ) % 256
>8912	PrimaryExpression	256
>8913	CallExpression	rand ( )
>8914	ArgumentList	 
>8915	Callee	rand
>8916	Identifier	rand
>8917	Identifier	g
>8918	Identifier	g
>8919	IdentifierDeclType	int
>8920	IdentifierDeclStatement	 
>8921	IdentifierDecl	r = rand ( ) % 256
>8922	AssignmentExpr	r = rand ( ) % 256
>8923	MultiplicativeExpression	rand ( ) % 256
>8924	PrimaryExpression	256
>8925	CallExpression	rand ( )
>8926	ArgumentList	 
>8927	Callee	rand
>8928	Identifier	rand
>8929	Identifier	r
>8930	Identifier	r
>8931	IdentifierDeclType	int
>8932	IdentifierDeclStatement	 
>8933	IdentifierDecl	y2 = iround ( m_line_segments [ i ] . m_p2 [ 1 ] + 0.5 * h )
>8934	AssignmentExpr	y2 = iround ( m_line_segments [ i ] . m_p2 [ 1 ] + 0.5 * h )
>8935	CallExpression	iround ( m_line_segments [ i ] . m_p2 [ 1 ] + 0.5 * h )
>8936	ArgumentList	m_line_segments [ i ] . m_p2 [ 1 ] + 0.5 * h
>8937	Argument	m_line_segments [ i ] . m_p2 [ 1 ] + 0.5 * h
>8938	AdditiveExpression	m_line_segments [ i ] . m_p2 [ 1 ] + 0.5 * h
>8939	MultiplicativeExpression	0.5 * h
>8940	Identifier	h
>8941	PrimaryExpression	0.5
>8942	ArrayIndexing	m_line_segments [ i ] . m_p2 [ 1 ]
>8943	PrimaryExpression	1
>8944	MemberAccess	m_line_segments [ i ] . m_p2
>8945	Identifier	m_p2
>8946	ArrayIndexing	m_line_segments [ i ]
>8947	Identifier	i
>8948	Identifier	m_line_segments
>8949	Callee	iround
>8950	Identifier	iround
>8951	Identifier	y2
>8952	Identifier	y2
>8953	IdentifierDeclType	int
>8954	IdentifierDeclStatement	 
>8955	IdentifierDecl	x2 = iround ( m_line_segments [ i ] . m_p2 [ 0 ] + 0.5 * w )
>8956	AssignmentExpr	x2 = iround ( m_line_segments [ i ] . m_p2 [ 0 ] + 0.5 * w )
>8957	CallExpression	iround ( m_line_segments [ i ] . m_p2 [ 0 ] + 0.5 * w )
>8958	ArgumentList	m_line_segments [ i ] . m_p2 [ 0 ] + 0.5 * w
>8959	Argument	m_line_segments [ i ] . m_p2 [ 0 ] + 0.5 * w
>8960	AdditiveExpression	m_line_segments [ i ] . m_p2 [ 0 ] + 0.5 * w
>8961	MultiplicativeExpression	0.5 * w
>8962	Identifier	w
>8963	PrimaryExpression	0.5
>8964	ArrayIndexing	m_line_segments [ i ] . m_p2 [ 0 ]
>8965	PrimaryExpression	0
>8966	MemberAccess	m_line_segments [ i ] . m_p2
>8967	Identifier	m_p2
>8968	ArrayIndexing	m_line_segments [ i ]
>8969	Identifier	i
>8970	Identifier	m_line_segments
>8971	Callee	iround
>8972	Identifier	iround
>8973	Identifier	x2
>8974	Identifier	x2
>8975	IdentifierDeclType	int
>8976	IdentifierDeclStatement	 
>8977	IdentifierDecl	y1 = iround ( m_line_segments [ i ] . m_p1 [ 1 ] + 0.5 * h )
>8978	AssignmentExpr	y1 = iround ( m_line_segments [ i ] . m_p1 [ 1 ] + 0.5 * h )
>8979	CallExpression	iround ( m_line_segments [ i ] . m_p1 [ 1 ] + 0.5 * h )
>8980	ArgumentList	m_line_segments [ i ] . m_p1 [ 1 ] + 0.5 * h
>8981	Argument	m_line_segments [ i ] . m_p1 [ 1 ] + 0.5 * h
>8982	AdditiveExpression	m_line_segments [ i ] . m_p1 [ 1 ] + 0.5 * h
>8983	MultiplicativeExpression	0.5 * h
>8984	Identifier	h
>8985	PrimaryExpression	0.5
>8986	ArrayIndexing	m_line_segments [ i ] . m_p1 [ 1 ]
>8987	PrimaryExpression	1
>8988	MemberAccess	m_line_segments [ i ] . m_p1
>8989	Identifier	m_p1
>8990	ArrayIndexing	m_line_segments [ i ]
>8991	Identifier	i
>8992	Identifier	m_line_segments
>8993	Callee	iround
>8994	Identifier	iround
>8995	Identifier	y1
>8996	Identifier	y1
>8997	IdentifierDeclType	int
>8998	IdentifierDeclStatement	 
>8999	IdentifierDecl	x1 = iround ( m_line_segments [ i ] . m_p1 [ 0 ] + 0.5 * w )
>9000	AssignmentExpr	x1 = iround ( m_line_segments [ i ] . m_p1 [ 0 ] + 0.5 * w )
>9001	CallExpression	iround ( m_line_segments [ i ] . m_p1 [ 0 ] + 0.5 * w )
>9002	ArgumentList	m_line_segments [ i ] . m_p1 [ 0 ] + 0.5 * w
>9003	Argument	m_line_segments [ i ] . m_p1 [ 0 ] + 0.5 * w
>9004	AdditiveExpression	m_line_segments [ i ] . m_p1 [ 0 ] + 0.5 * w
>9005	MultiplicativeExpression	0.5 * w
>9006	Identifier	w
>9007	PrimaryExpression	0.5
>9008	ArrayIndexing	m_line_segments [ i ] . m_p1 [ 0 ]
>9009	PrimaryExpression	0
>9010	MemberAccess	m_line_segments [ i ] . m_p1
>9011	Identifier	m_p1
>9012	ArrayIndexing	m_line_segments [ i ]
>9013	Identifier	i
>9014	Identifier	m_line_segments
>9015	Callee	iround
>9016	Identifier	iround
>9017	Identifier	x1
>9018	Identifier	x1
>9019	IdentifierDeclType	int
>9020	IncDecOp	 
>9021	IncDec	++
>9022	Identifier	i
>9023	Condition	 
>9024	RelationalExpression	i < num_segments
>9025	Identifier	num_segments
>9026	Identifier	i
>9027	ForInit	 
>9028	IdentifierDeclStatement	int i = 0 ;
>9029	IdentifierDecl	i = 0
>9030	AssignmentExpr	i = 0
>9031	PrimaryExpression	0
>9032	Identifier	i
>9033	Identifier	i
>9034	IdentifierDeclType	int
>9035	IdentifierDeclStatement	 
>9036	IdentifierDecl	num_segments = ( int ) m_line_segments . size ( )
>9037	AssignmentExpr	num_segments = ( int ) m_line_segments . size ( )
>9038	CastExpression	( int ) m_line_segments . size ( )
>9039	CallExpression	m_line_segments . size ( )
>9040	ArgumentList	 
>9041	Callee	m_line_segments . size
>9042	MemberAccess	m_line_segments . size
>9043	Identifier	size
>9044	Identifier	m_line_segments
>9045	CastTarget	int
>9046	Identifier	num_segments
>9047	Identifier	num_segments
>9048	IdentifierDeclType	int
>9049	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>9050	CompoundStatement	 
>9051	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>9052	CompoundStatement	 
>9053	ExpressionStatement	 
>9054	CallExpression	img_set_pixel ( segment_img , x , y , r_int , g_int , b_int )
>9055	ArgumentList	segment_img
>9056	Argument	b_int
>9057	Identifier	b_int
>9058	Argument	g_int
>9059	Identifier	g_int
>9060	Argument	r_int
>9061	Identifier	r_int
>9062	Argument	y
>9063	Identifier	y
>9064	Argument	x
>9065	Identifier	x
>9066	Argument	segment_img
>9067	Identifier	segment_img
>9068	Callee	img_set_pixel
>9069	Identifier	img_set_pixel
>9070	IdentifierDeclStatement	 
>9071	IdentifierDecl	b_int = CLAMP ( iround ( b ) , 0 , 255 )
>9072	AssignmentExpr	b_int = CLAMP ( iround ( b ) , 0 , 255 )
>9073	CallExpression	CLAMP ( iround ( b ) , 0 , 255 )
>9074	ArgumentList	iround ( b )
>9075	Argument	255
>9076	PrimaryExpression	255
>9077	Argument	0
>9078	PrimaryExpression	0
>9079	Argument	iround ( b )
>9080	CallExpression	iround ( b )
>9081	ArgumentList	b
>9082	Argument	b
>9083	Identifier	b
>9084	Callee	iround
>9085	Identifier	iround
>9086	Callee	CLAMP
>9087	Identifier	CLAMP
>9088	Identifier	b_int
>9089	Identifier	b_int
>9090	IdentifierDeclType	int
>9091	IdentifierDeclStatement	 
>9092	IdentifierDecl	g_int = CLAMP ( iround ( g ) , 0 , 255 )
>9093	AssignmentExpr	g_int = CLAMP ( iround ( g ) , 0 , 255 )
>9094	CallExpression	CLAMP ( iround ( g ) , 0 , 255 )
>9095	ArgumentList	iround ( g )
>9096	Argument	255
>9097	PrimaryExpression	255
>9098	Argument	0
>9099	PrimaryExpression	0
>9100	Argument	iround ( g )
>9101	CallExpression	iround ( g )
>9102	ArgumentList	g
>9103	Argument	g
>9104	Identifier	g
>9105	Callee	iround
>9106	Identifier	iround
>9107	Callee	CLAMP
>9108	Identifier	CLAMP
>9109	Identifier	g_int
>9110	Identifier	g_int
>9111	IdentifierDeclType	int
>9112	IdentifierDeclStatement	 
>9113	IdentifierDecl	r_int = CLAMP ( iround ( r ) , 0 , 255 )
>9114	AssignmentExpr	r_int = CLAMP ( iround ( r ) , 0 , 255 )
>9115	CallExpression	CLAMP ( iround ( r ) , 0 , 255 )
>9116	ArgumentList	iround ( r )
>9117	Argument	255
>9118	PrimaryExpression	255
>9119	Argument	0
>9120	PrimaryExpression	0
>9121	Argument	iround ( r )
>9122	CallExpression	iround ( r )
>9123	ArgumentList	r
>9124	Argument	r
>9125	Identifier	r
>9126	Callee	iround
>9127	Identifier	iround
>9128	Callee	CLAMP
>9129	Identifier	CLAMP
>9130	Identifier	r_int
>9131	Identifier	r_int
>9132	IdentifierDeclType	int
>9133	IdentifierDeclStatement	 
>9134	IdentifierDecl	b = 0.75 * p . b + 0.25 * 0xff
>9135	AssignmentExpr	b = 0.75 * p . b + 0.25 * 0xff
>9136	AdditiveExpression	0.75 * p . b + 0.25 * 0xff
>9137	MultiplicativeExpression	0.25 * 0xff
>9138	PrimaryExpression	0xff
>9139	PrimaryExpression	0.25
>9140	MultiplicativeExpression	0.75 * p . b
>9141	MemberAccess	p . b
>9142	Identifier	b
>9143	Identifier	p
>9144	PrimaryExpression	0.75
>9145	Identifier	b
>9146	Identifier	b
>9147	IdentifierDeclType	double
>9148	IdentifierDeclStatement	 
>9149	IdentifierDecl	g = 0.75 * p . g + 0.25 * 0xff
>9150	AssignmentExpr	g = 0.75 * p . g + 0.25 * 0xff
>9151	AdditiveExpression	0.75 * p . g + 0.25 * 0xff
>9152	MultiplicativeExpression	0.25 * 0xff
>9153	PrimaryExpression	0xff
>9154	PrimaryExpression	0.25
>9155	MultiplicativeExpression	0.75 * p . g
>9156	MemberAccess	p . g
>9157	Identifier	g
>9158	Identifier	p
>9159	PrimaryExpression	0.75
>9160	Identifier	g
>9161	Identifier	g
>9162	IdentifierDeclType	double
>9163	IdentifierDeclStatement	 
>9164	IdentifierDecl	r = 0.75 * p . r + 0.25 * 0xff
>9165	AssignmentExpr	r = 0.75 * p . r + 0.25 * 0xff
>9166	AdditiveExpression	0.75 * p . r + 0.25 * 0xff
>9167	MultiplicativeExpression	0.25 * 0xff
>9168	PrimaryExpression	0xff
>9169	PrimaryExpression	0.25
>9170	MultiplicativeExpression	0.75 * p . r
>9171	MemberAccess	p . r
>9172	Identifier	r
>9173	Identifier	p
>9174	PrimaryExpression	0.75
>9175	Identifier	r
>9176	Identifier	r
>9177	IdentifierDeclType	double
>9178	IdentifierDeclStatement	 
>9179	IdentifierDecl	p = img_get_pixel ( segment_img , x , y )
>9180	AssignmentExpr	p = img_get_pixel ( segment_img , x , y )
>9181	CallExpression	img_get_pixel ( segment_img , x , y )
>9182	ArgumentList	segment_img
>9183	Argument	y
>9184	Identifier	y
>9185	Argument	x
>9186	Identifier	x
>9187	Argument	segment_img
>9188	Identifier	segment_img
>9189	Callee	img_get_pixel
>9190	Identifier	img_get_pixel
>9191	Identifier	p
>9192	Identifier	p
>9193	IdentifierDeclType	color_t
>9194	IncDecOp	 
>9195	IncDec	++
>9196	Identifier	x
>9197	Condition	 
>9198	RelationalExpression	x < w
>9199	Identifier	w
>9200	Identifier	x
>9201	ForInit	 
>9202	IdentifierDeclStatement	int x = 0 ;
>9203	IdentifierDecl	x = 0
>9204	AssignmentExpr	x = 0
>9205	PrimaryExpression	0
>9206	Identifier	x
>9207	Identifier	x
>9208	IdentifierDeclType	int
>9209	IncDecOp	 
>9210	IncDec	++
>9211	Identifier	y
>9212	Condition	 
>9213	RelationalExpression	y < h
>9214	Identifier	h
>9215	Identifier	y
>9216	ForInit	 
>9217	IdentifierDeclStatement	int y = 0 ;
>9218	IdentifierDecl	y = 0
>9219	AssignmentExpr	y = 0
>9220	PrimaryExpression	0
>9221	Identifier	y
>9222	Identifier	y
>9223	IdentifierDeclType	int
>9224	IdentifierDeclStatement	 
>9225	IdentifierDecl	h = GetHeight ( )
>9226	AssignmentExpr	h = GetHeight ( )
>9227	CallExpression	GetHeight ( )
>9228	ArgumentList	 
>9229	Callee	GetHeight
>9230	Identifier	GetHeight
>9231	Identifier	h
>9232	Identifier	h
>9233	IdentifierDeclType	int
>9234	IdentifierDeclStatement	 
>9235	IdentifierDecl	w = GetWidth ( )
>9236	AssignmentExpr	w = GetWidth ( )
>9237	CallExpression	GetWidth ( )
>9238	ArgumentList	 
>9239	Callee	GetWidth
>9240	Identifier	GetWidth
>9241	Identifier	w
>9242	Identifier	w
>9243	IdentifierDeclType	int
>9244	IdentifierDeclStatement	 
>9245	IdentifierDecl	* segment_img = UndistortImage ( )
>9246	AssignmentExpr	* segment_img = UndistortImage ( )
>9247	CallExpression	UndistortImage ( )
>9248	ArgumentList	 
>9249	Callee	UndistortImage
>9250	Identifier	UndistortImage
>9251	Identifier	segment_img
>9252	Identifier	segment_img
>9253	IdentifierDeclType	img_t *
>9295	FunctionDef	ImageData 
>9296	ParameterList	LineSegment2D & line
>9297	Parameter	 
>9298	Identifier	line
>9299	ParameterType	LineSegment2D &
>9300	ReturnType	bool
>9301	CompoundStatement	 
>9302	ReturnStatement	 
>9303	Identifier	false
>9304	IfStatement	if ( num_supporting >= SUPPORTING_PERCENT_THRESHOLD * NUM_SEGMENT_SAMPLES )
>9305	ReturnStatement	 
>9306	Identifier	true
>9307	Condition	 
>9308	RelationalExpression	num_supporting >= SUPPORTING_PERCENT_THRESHOLD * NUM_SEGMENT_SAMPLES
>9309	MultiplicativeExpression	SUPPORTING_PERCENT_THRESHOLD * NUM_SEGMENT_SAMPLES
>9310	Identifier	NUM_SEGMENT_SAMPLES
>9311	Identifier	SUPPORTING_PERCENT_THRESHOLD
>9312	Identifier	num_supporting
>9313	Statement	 
>9314	Statement	 
>9315	Statement	 
>9316	ForStatement	for ( int i = 0 ; i < NUM_SEGMENT_SAMPLES ; i ++ )
>9317	CompoundStatement	 
>9318	IfStatement	if ( mag > SUPPORT_MAGNITUDE_THRESHOLD )
>9319	CompoundStatement	 
>9320	IfStatement	if ( angle < SUPPORT_ANGLE_THRESHOLD )
>9321	ExpressionStatement	 
>9322	IncDecOp	num_supporting ++
>9323	IncDec	++
>9324	Identifier	num_supporting
>9325	Condition	 
>9326	RelationalExpression	angle < SUPPORT_ANGLE_THRESHOLD
>9327	Identifier	SUPPORT_ANGLE_THRESHOLD
>9328	Identifier	angle
>9329	Statement	 
>9330	Statement	 
>9331	Statement	 
>9332	IdentifierDeclStatement	 
>9333	IdentifierDecl	angle = acos ( fabs ( dot ) )
>9334	AssignmentExpr	angle = acos ( fabs ( dot ) )
>9335	CallExpression	acos ( fabs ( dot ) )
>9336	ArgumentList	fabs ( dot )
>9337	Argument	fabs ( dot )
>9338	CallExpression	fabs ( dot )
>9339	ArgumentList	dot
>9340	Argument	dot
>9341	Identifier	dot
>9342	Callee	fabs
>9343	Identifier	fabs
>9344	Callee	acos
>9345	Identifier	acos
>9346	Identifier	angle
>9347	Identifier	angle
>9348	IdentifierDeclType	double
>9349	ExpressionStatement	 
>9350	CallExpression	matrix_product ( 1 , 2 , 2 , 1 , grad , l , & dot )
>9351	ArgumentList	1
>9352	Argument	& dot
>9353	UnaryOp	& dot
>9354	Identifier	dot
>9355	UnaryOperator	&
>9356	Argument	l
>9357	Identifier	l
>9358	Argument	grad
>9359	Identifier	grad
>9360	Argument	1
>9361	PrimaryExpression	1
>9362	Argument	2
>9363	PrimaryExpression	2
>9364	Argument	2
>9365	PrimaryExpression	2
>9366	Argument	1
>9367	PrimaryExpression	1
>9368	Callee	matrix_product
>9369	Identifier	matrix_product
>9370	IdentifierDeclStatement	 
>9371	IdentifierDecl	dot
>9372	Identifier	dot
>9373	IdentifierDeclType	double
>9374	ExpressionStatement	 
>9375	AssignmentExpr	grad [ 1 ] /= mag
>9376	Identifier	mag
>9377	ArrayIndexing	grad [ 1 ]
>9378	PrimaryExpression	1
>9379	Identifier	grad
>9380	ExpressionStatement	 
>9381	AssignmentExpr	grad [ 0 ] /= mag
>9382	Identifier	mag
>9383	ArrayIndexing	grad [ 0 ]
>9384	PrimaryExpression	0
>9385	Identifier	grad
>9386	Condition	 
>9387	RelationalExpression	mag > SUPPORT_MAGNITUDE_THRESHOLD
>9388	Identifier	SUPPORT_MAGNITUDE_THRESHOLD
>9389	Identifier	mag
>9390	Statement	 
>9391	Statement	 
>9392	Statement	 
>9393	IdentifierDeclStatement	 
>9394	IdentifierDecl	mag = sqrt ( grad [ 0 ] * grad [ 0 ] + grad [ 1 ] * grad [ 1 ] )
>9395	AssignmentExpr	mag = sqrt ( grad [ 0 ] * grad [ 0 ] + grad [ 1 ] * grad [ 1 ] )
>9396	CallExpression	sqrt ( grad [ 0 ] * grad [ 0 ] + grad [ 1 ] * grad [ 1 ] )
>9397	ArgumentList	grad [ 0 ] * grad [ 0 ] + grad [ 1 ] * grad [ 1 ]
>9398	Argument	grad [ 0 ] * grad [ 0 ] + grad [ 1 ] * grad [ 1 ]
>9399	AdditiveExpression	grad [ 0 ] * grad [ 0 ] + grad [ 1 ] * grad [ 1 ]
>9400	MultiplicativeExpression	grad [ 1 ] * grad [ 1 ]
>9401	ArrayIndexing	grad [ 1 ]
>9402	PrimaryExpression	1
>9403	Identifier	grad
>9404	ArrayIndexing	grad [ 1 ]
>9405	PrimaryExpression	1
>9406	Identifier	grad
>9407	MultiplicativeExpression	grad [ 0 ] * grad [ 0 ]
>9408	ArrayIndexing	grad [ 0 ]
>9409	PrimaryExpression	0
>9410	Identifier	grad
>9411	ArrayIndexing	grad [ 0 ]
>9412	PrimaryExpression	0
>9413	Identifier	grad
>9414	Callee	sqrt
>9415	Identifier	sqrt
>9416	Identifier	mag
>9417	Identifier	mag
>9418	IdentifierDeclType	double
>9419	ExpressionStatement	 
>9420	CallExpression	Gradient ( sample [ 0 ] , sample [ 1 ] , grad )
>9421	ArgumentList	sample [ 0 ]
>9422	Argument	grad
>9423	Identifier	grad
>9424	Argument	sample [ 1 ]
>9425	ArrayIndexing	sample [ 1 ]
>9426	PrimaryExpression	1
>9427	Identifier	sample
>9428	Argument	sample [ 0 ]
>9429	ArrayIndexing	sample [ 0 ]
>9430	PrimaryExpression	0
>9431	Identifier	sample
>9432	Callee	Gradient
>9433	Identifier	Gradient
>9434	IdentifierDeclStatement	 
>9435	IdentifierDecl	grad [ 2 ]
>9436	PrimaryExpression	2
>9437	Identifier	grad
>9438	IdentifierDeclType	double [ 2 ]
>9439	ExpressionStatement	 
>9440	CallExpression	line . Sample ( t , sample )
>9441	ArgumentList	t
>9442	Argument	sample
>9443	Identifier	sample
>9444	Argument	t
>9445	Identifier	t
>9446	Callee	line . Sample
>9447	MemberAccess	line . Sample
>9448	Identifier	Sample
>9449	Identifier	line
>9450	IdentifierDeclStatement	 
>9451	IdentifierDecl	sample [ 2 ]
>9452	PrimaryExpression	2
>9453	Identifier	sample
>9454	IdentifierDeclType	double [ 2 ]
>9455	IdentifierDeclStatement	 
>9456	IdentifierDecl	t = ( double ) i / ( double ) ( NUM_SEGMENT_SAMPLES - 1 )
>9457	AssignmentExpr	t = ( double ) i / ( double ) ( NUM_SEGMENT_SAMPLES - 1 )
>9458	MultiplicativeExpression	( double ) i / ( double ) ( NUM_SEGMENT_SAMPLES - 1 )
>9459	CastExpression	( double ) ( NUM_SEGMENT_SAMPLES - 1 )
>9460	AdditiveExpression	NUM_SEGMENT_SAMPLES - 1
>9461	PrimaryExpression	1
>9462	Identifier	NUM_SEGMENT_SAMPLES
>9463	CastTarget	double
>9464	CastExpression	( double ) i
>9465	Identifier	i
>9466	CastTarget	double
>9467	Identifier	t
>9468	Identifier	t
>9469	IdentifierDeclType	double
>9470	IncDecOp	 
>9471	IncDec	++
>9472	Identifier	i
>9473	Condition	 
>9474	RelationalExpression	i < NUM_SEGMENT_SAMPLES
>9475	Identifier	NUM_SEGMENT_SAMPLES
>9476	Identifier	i
>9477	ForInit	 
>9478	IdentifierDeclStatement	int i = 0 ;
>9479	IdentifierDecl	i = 0
>9480	AssignmentExpr	i = 0
>9481	PrimaryExpression	0
>9482	Identifier	i
>9483	Identifier	i
>9484	IdentifierDeclType	int
>9485	ExpressionStatement	 
>9486	CallExpression	matrix_scale ( 3 , 1 , l , 1.0 / mag , l )
>9487	ArgumentList	3
>9488	Argument	l
>9489	Identifier	l
>9490	Argument	1.0 / mag
>9491	MultiplicativeExpression	1.0 / mag
>9492	Identifier	mag
>9493	PrimaryExpression	1.0
>9494	Argument	l
>9495	Identifier	l
>9496	Argument	1
>9497	PrimaryExpression	1
>9498	Argument	3
>9499	PrimaryExpression	3
>9500	Callee	matrix_scale
>9501	Identifier	matrix_scale
>9502	IdentifierDeclStatement	 
>9503	IdentifierDecl	mag = sqrt ( l [ 0 ] * l [ 0 ] + l [ 1 ] * l [ 1 ] )
>9504	AssignmentExpr	mag = sqrt ( l [ 0 ] * l [ 0 ] + l [ 1 ] * l [ 1 ] )
>9505	CallExpression	sqrt ( l [ 0 ] * l [ 0 ] + l [ 1 ] * l [ 1 ] )
>9506	ArgumentList	l [ 0 ] * l [ 0 ] + l [ 1 ] * l [ 1 ]
>9507	Argument	l [ 0 ] * l [ 0 ] + l [ 1 ] * l [ 1 ]
>9508	AdditiveExpression	l [ 0 ] * l [ 0 ] + l [ 1 ] * l [ 1 ]
>9509	MultiplicativeExpression	l [ 1 ] * l [ 1 ]
>9510	ArrayIndexing	l [ 1 ]
>9511	PrimaryExpression	1
>9512	Identifier	l
>9513	ArrayIndexing	l [ 1 ]
>9514	PrimaryExpression	1
>9515	Identifier	l
>9516	MultiplicativeExpression	l [ 0 ] * l [ 0 ]
>9517	ArrayIndexing	l [ 0 ]
>9518	PrimaryExpression	0
>9519	Identifier	l
>9520	ArrayIndexing	l [ 0 ]
>9521	PrimaryExpression	0
>9522	Identifier	l
>9523	Callee	sqrt
>9524	Identifier	sqrt
>9525	Identifier	mag
>9526	Identifier	mag
>9527	IdentifierDeclType	double
>9528	ExpressionStatement	 
>9529	CallExpression	line . Homogeneous ( l )
>9530	ArgumentList	l
>9531	Argument	l
>9532	Identifier	l
>9533	Callee	line . Homogeneous
>9534	MemberAccess	line . Homogeneous
>9535	Identifier	Homogeneous
>9536	Identifier	line
>9537	IdentifierDeclStatement	 
>9538	IdentifierDecl	l [ 3 ]
>9539	PrimaryExpression	3
>9540	Identifier	l
>9541	IdentifierDeclType	double [ 3 ]
>9542	IdentifierDeclStatement	 
>9543	IdentifierDecl	num_supporting = 0
>9544	AssignmentExpr	num_supporting = 0
>9545	PrimaryExpression	0
>9546	Identifier	num_supporting
>9547	Identifier	num_supporting
>9548	IdentifierDeclType	int
>9549	Statement	 
>9550	Statement	 
>9551	Statement	 
>9552	IfStatement	if ( line . m_p2 [ 0 ] + 0.5 * w < 5.0 || line . m_p2 [ 0 ] + 0.5 * w > w - 6 || line . m_p2 [ 1 ] + 0.5 * h < 5.0 || \
>9553	ReturnStatement	 
>9554	Identifier	false
>9555	Condition	 
>9556	OrExpression	line . m_p2 [ 0 ] + 0.5 * w < 5.0 || line . m_p2 [ 0 ] + 0.5 * w > w - 6 || line . m_p2 [ 1 ] + 0.5 * \
>9557	OrExpression	line . m_p2 [ 0 ] + 0.5 * w > w - 6 || line . m_p2 [ 1 ] + 0.5 * h < 5.0 || line . m_p2 [ 1 ] + 0.5 * \
>9558	OrExpression	line . m_p2 [ 1 ] + 0.5 * h < 5.0 || line . m_p2 [ 1 ] + 0.5 * h > h - 6
>9559	RelationalExpression	line . m_p2 [ 1 ] + 0.5 * h > h - 6
>9560	AdditiveExpression	h - 6
>9561	PrimaryExpression	6
>9562	Identifier	h
>9563	AdditiveExpression	line . m_p2 [ 1 ] + 0.5 * h
>9564	MultiplicativeExpression	0.5 * h
>9565	Identifier	h
>9566	PrimaryExpression	0.5
>9567	ArrayIndexing	line . m_p2 [ 1 ]
>9568	PrimaryExpression	1
>9569	MemberAccess	line . m_p2
>9570	Identifier	m_p2
>9571	Identifier	line
>9572	RelationalExpression	line . m_p2 [ 1 ] + 0.5 * h < 5.0
>9573	PrimaryExpression	5.0
>9574	AdditiveExpression	line . m_p2 [ 1 ] + 0.5 * h
>9575	MultiplicativeExpression	0.5 * h
>9576	Identifier	h
>9577	PrimaryExpression	0.5
>9578	ArrayIndexing	line . m_p2 [ 1 ]
>9579	PrimaryExpression	1
>9580	MemberAccess	line . m_p2
>9581	Identifier	m_p2
>9582	Identifier	line
>9583	RelationalExpression	line . m_p2 [ 0 ] + 0.5 * w > w - 6
>9584	AdditiveExpression	w - 6
>9585	PrimaryExpression	6
>9586	Identifier	w
>9587	AdditiveExpression	line . m_p2 [ 0 ] + 0.5 * w
>9588	MultiplicativeExpression	0.5 * w
>9589	Identifier	w
>9590	PrimaryExpression	0.5
>9591	ArrayIndexing	line . m_p2 [ 0 ]
>9592	PrimaryExpression	0
>9593	MemberAccess	line . m_p2
>9594	Identifier	m_p2
>9595	Identifier	line
>9596	RelationalExpression	line . m_p2 [ 0 ] + 0.5 * w < 5.0
>9597	PrimaryExpression	5.0
>9598	AdditiveExpression	line . m_p2 [ 0 ] + 0.5 * w
>9599	MultiplicativeExpression	0.5 * w
>9600	Identifier	w
>9601	PrimaryExpression	0.5
>9602	ArrayIndexing	line . m_p2 [ 0 ]
>9603	PrimaryExpression	0
>9604	MemberAccess	line . m_p2
>9605	Identifier	m_p2
>9606	Identifier	line
>9607	IfStatement	if ( line . m_p1 [ 0 ] + 0.5 * w < 5.0 || line . m_p1 [ 0 ] + 0.5 * w > w - 6 || line . m_p1 [ 1 ] + 0.5 * h < 5.0 || \
>9608	ReturnStatement	 
>9609	Identifier	false
>9610	Condition	 
>9611	OrExpression	line . m_p1 [ 0 ] + 0.5 * w < 5.0 || line . m_p1 [ 0 ] + 0.5 * w > w - 6 || line . m_p1 [ 1 ] + 0.5 * \
>9612	OrExpression	line . m_p1 [ 0 ] + 0.5 * w > w - 6 || line . m_p1 [ 1 ] + 0.5 * h < 5.0 || line . m_p1 [ 1 ] + 0.5 * \
>9613	OrExpression	line . m_p1 [ 1 ] + 0.5 * h < 5.0 || line . m_p1 [ 1 ] + 0.5 * h > h - 6
>9614	RelationalExpression	line . m_p1 [ 1 ] + 0.5 * h > h - 6
>9615	AdditiveExpression	h - 6
>9616	PrimaryExpression	6
>9617	Identifier	h
>9618	AdditiveExpression	line . m_p1 [ 1 ] + 0.5 * h
>9619	MultiplicativeExpression	0.5 * h
>9620	Identifier	h
>9621	PrimaryExpression	0.5
>9622	ArrayIndexing	line . m_p1 [ 1 ]
>9623	PrimaryExpression	1
>9624	MemberAccess	line . m_p1
>9625	Identifier	m_p1
>9626	Identifier	line
>9627	RelationalExpression	line . m_p1 [ 1 ] + 0.5 * h < 5.0
>9628	PrimaryExpression	5.0
>9629	AdditiveExpression	line . m_p1 [ 1 ] + 0.5 * h
>9630	MultiplicativeExpression	0.5 * h
>9631	Identifier	h
>9632	PrimaryExpression	0.5
>9633	ArrayIndexing	line . m_p1 [ 1 ]
>9634	PrimaryExpression	1
>9635	MemberAccess	line . m_p1
>9636	Identifier	m_p1
>9637	Identifier	line
>9638	RelationalExpression	line . m_p1 [ 0 ] + 0.5 * w > w - 6
>9639	AdditiveExpression	w - 6
>9640	PrimaryExpression	6
>9641	Identifier	w
>9642	AdditiveExpression	line . m_p1 [ 0 ] + 0.5 * w
>9643	MultiplicativeExpression	0.5 * w
>9644	Identifier	w
>9645	PrimaryExpression	0.5
>9646	ArrayIndexing	line . m_p1 [ 0 ]
>9647	PrimaryExpression	0
>9648	MemberAccess	line . m_p1
>9649	Identifier	m_p1
>9650	Identifier	line
>9651	RelationalExpression	line . m_p1 [ 0 ] + 0.5 * w < 5.0
>9652	PrimaryExpression	5.0
>9653	AdditiveExpression	line . m_p1 [ 0 ] + 0.5 * w
>9654	MultiplicativeExpression	0.5 * w
>9655	Identifier	w
>9656	PrimaryExpression	0.5
>9657	ArrayIndexing	line . m_p1 [ 0 ]
>9658	PrimaryExpression	0
>9659	MemberAccess	line . m_p1
>9660	Identifier	m_p1
>9661	Identifier	line
>9662	IdentifierDeclStatement	 
>9663	IdentifierDecl	h = GetHeight ( )
>9664	AssignmentExpr	h = GetHeight ( )
>9665	CallExpression	GetHeight ( )
>9666	ArgumentList	 
>9667	Callee	GetHeight
>9668	Identifier	GetHeight
>9669	Identifier	h
>9670	Identifier	h
>9671	IdentifierDeclType	int
>9672	IdentifierDeclStatement	 
>9673	IdentifierDecl	w = GetWidth ( )
>9674	AssignmentExpr	w = GetWidth ( )
>9675	CallExpression	GetWidth ( )
>9676	ArgumentList	 
>9677	Callee	GetWidth
>9678	Identifier	GetWidth
>9679	Identifier	w
>9680	Identifier	w
>9681	IdentifierDeclType	int
>9717	FunctionDef	ImageData 
>9718	ParameterList	double * line , double * isect1 , double * isect2 , ImageBoundary & b1 , ImageBoundary & b2
>9719	Parameter	 
>9720	Identifier	b2
>9721	ParameterType	ImageBoundary &
>9722	Parameter	 
>9723	Identifier	b1
>9724	ParameterType	ImageBoundary &
>9725	Parameter	 
>9726	Identifier	isect2
>9727	ParameterType	double *
>9728	Parameter	 
>9729	Identifier	isect1
>9730	ParameterType	double *
>9731	Parameter	 
>9732	Identifier	line
>9733	ParameterType	double *
>9734	ReturnType	bool
>9735	CompoundStatement	 
>9736	IfStatement	if ( num_isect == 2 )
>9737	ElseStatement	else
>9738	IfStatement	if ( num_isect == 0 )
>9739	ElseStatement	else
>9740	CompoundStatement	 
>9741	ReturnStatement	 
>9742	Identifier	false
>9743	ExpressionStatement	 
>9744	Statement	 
>9745	Statement	 
>9746	Statement	 
>9747	Statement	 
>9748	Statement	 
>9749	Statement	 
>9750	Statement	 
>9751	ReturnStatement	 
>9752	Identifier	false
>9753	Condition	 
>9754	EqualityExpression	num_isect == 0
>9755	PrimaryExpression	0
>9756	Identifier	num_isect
>9757	ReturnStatement	 
>9758	Identifier	true
>9759	Condition	 
>9760	EqualityExpression	num_isect == 2
>9761	PrimaryExpression	2
>9762	Identifier	num_isect
>9763	IfStatement	if ( west_isect [ 1 ] >= - 0.5 * m_height && west_isect [ 1 ] <= 0.5 * m_height )
>9764	CompoundStatement	 
>9765	ExpressionStatement	 
>9766	IncDecOp	num_isect ++
>9767	IncDec	++
>9768	Identifier	num_isect
>9769	IfStatement	if ( num_isect == 0 )
>9770	ElseStatement	else
>9771	IfStatement	if ( num_isect == 1 )
>9772	ElseStatement	else
>9773	CompoundStatement	 
>9774	ExpressionStatement	 
>9775	Statement	 
>9776	Statement	 
>9777	Statement	 
>9778	Statement	 
>9779	Statement	 
>9780	CompoundStatement	 
>9781	ExpressionStatement	 
>9782	CallExpression	memcpy ( isect2 , west_isect , 3 * sizeof ( double ) )
>9783	ArgumentList	isect2
>9784	Argument	3 * sizeof ( double )
>9785	MultiplicativeExpression	3 * sizeof ( double )
>9786	SizeofExpr	sizeof ( double )
>9787	SizeofOperand	double
>9788	Sizeof	sizeof
>9789	PrimaryExpression	3
>9790	Argument	west_isect
>9791	Identifier	west_isect
>9792	Argument	isect2
>9793	Identifier	isect2
>9794	Callee	memcpy
>9795	Identifier	memcpy
>9796	ExpressionStatement	 
>9797	AssignmentExpr	b2 = BoundaryWest
>9798	Identifier	BoundaryWest
>9799	Identifier	b2
>9800	Condition	 
>9801	EqualityExpression	num_isect == 1
>9802	PrimaryExpression	1
>9803	Identifier	num_isect
>9804	CompoundStatement	 
>9805	ExpressionStatement	 
>9806	CallExpression	memcpy ( isect1 , west_isect , 3 * sizeof ( double ) )
>9807	ArgumentList	isect1
>9808	Argument	3 * sizeof ( double )
>9809	MultiplicativeExpression	3 * sizeof ( double )
>9810	SizeofExpr	sizeof ( double )
>9811	SizeofOperand	double
>9812	Sizeof	sizeof
>9813	PrimaryExpression	3
>9814	Argument	west_isect
>9815	Identifier	west_isect
>9816	Argument	isect1
>9817	Identifier	isect1
>9818	Callee	memcpy
>9819	Identifier	memcpy
>9820	ExpressionStatement	 
>9821	AssignmentExpr	b1 = BoundaryWest
>9822	Identifier	BoundaryWest
>9823	Identifier	b1
>9824	Condition	 
>9825	EqualityExpression	num_isect == 0
>9826	PrimaryExpression	0
>9827	Identifier	num_isect
>9828	Condition	 
>9829	AndExpression	west_isect [ 1 ] >= - 0.5 * m_height && west_isect [ 1 ] <= 0.5 * m_height
>9830	RelationalExpression	west_isect [ 1 ] <= 0.5 * m_height
>9831	MultiplicativeExpression	0.5 * m_height
>9832	Identifier	m_height
>9833	PrimaryExpression	0.5
>9834	ArrayIndexing	west_isect [ 1 ]
>9835	PrimaryExpression	1
>9836	Identifier	west_isect
>9837	RelationalExpression	west_isect [ 1 ] >= - 0.5 * m_height
>9838	MultiplicativeExpression	- 0.5 * m_height
>9839	Identifier	m_height
>9840	UnaryOp	- 0.5
>9841	PrimaryExpression	0.5
>9842	UnaryOperator	-
>9843	ArrayIndexing	west_isect [ 1 ]
>9844	PrimaryExpression	1
>9845	Identifier	west_isect
>9846	IfStatement	if ( east_isect [ 1 ] >= - 0.5 * m_height && east_isect [ 1 ] <= 0.5 * m_height )
>9847	CompoundStatement	 
>9848	ExpressionStatement	 
>9849	IncDecOp	num_isect ++
>9850	IncDec	++
>9851	Identifier	num_isect
>9852	IfStatement	if ( num_isect == 0 )
>9853	ElseStatement	else
>9854	IfStatement	if ( num_isect == 1 )
>9855	ElseStatement	else
>9856	CompoundStatement	 
>9857	ExpressionStatement	 
>9858	Statement	 
>9859	Statement	 
>9860	Statement	 
>9861	Statement	 
>9862	Statement	 
>9863	CompoundStatement	 
>9864	ExpressionStatement	 
>9865	CallExpression	memcpy ( isect2 , east_isect , 3 * sizeof ( double ) )
>9866	ArgumentList	isect2
>9867	Argument	3 * sizeof ( double )
>9868	MultiplicativeExpression	3 * sizeof ( double )
>9869	SizeofExpr	sizeof ( double )
>9870	SizeofOperand	double
>9871	Sizeof	sizeof
>9872	PrimaryExpression	3
>9873	Argument	east_isect
>9874	Identifier	east_isect
>9875	Argument	isect2
>9876	Identifier	isect2
>9877	Callee	memcpy
>9878	Identifier	memcpy
>9879	ExpressionStatement	 
>9880	AssignmentExpr	b2 = BoundaryEast
>9881	Identifier	BoundaryEast
>9882	Identifier	b2
>9883	Condition	 
>9884	EqualityExpression	num_isect == 1
>9885	PrimaryExpression	1
>9886	Identifier	num_isect
>9887	CompoundStatement	 
>9888	ExpressionStatement	 
>9889	CallExpression	memcpy ( isect1 , east_isect , 3 * sizeof ( double ) )
>9890	ArgumentList	isect1
>9891	Argument	3 * sizeof ( double )
>9892	MultiplicativeExpression	3 * sizeof ( double )
>9893	SizeofExpr	sizeof ( double )
>9894	SizeofOperand	double
>9895	Sizeof	sizeof
>9896	PrimaryExpression	3
>9897	Argument	east_isect
>9898	Identifier	east_isect
>9899	Argument	isect1
>9900	Identifier	isect1
>9901	Callee	memcpy
>9902	Identifier	memcpy
>9903	ExpressionStatement	 
>9904	AssignmentExpr	b1 = BoundaryEast
>9905	Identifier	BoundaryEast
>9906	Identifier	b1
>9907	Condition	 
>9908	EqualityExpression	num_isect == 0
>9909	PrimaryExpression	0
>9910	Identifier	num_isect
>9911	Condition	 
>9912	AndExpression	east_isect [ 1 ] >= - 0.5 * m_height && east_isect [ 1 ] <= 0.5 * m_height
>9913	RelationalExpression	east_isect [ 1 ] <= 0.5 * m_height
>9914	MultiplicativeExpression	0.5 * m_height
>9915	Identifier	m_height
>9916	PrimaryExpression	0.5
>9917	ArrayIndexing	east_isect [ 1 ]
>9918	PrimaryExpression	1
>9919	Identifier	east_isect
>9920	RelationalExpression	east_isect [ 1 ] >= - 0.5 * m_height
>9921	MultiplicativeExpression	- 0.5 * m_height
>9922	Identifier	m_height
>9923	UnaryOp	- 0.5
>9924	PrimaryExpression	0.5
>9925	UnaryOperator	-
>9926	ArrayIndexing	east_isect [ 1 ]
>9927	PrimaryExpression	1
>9928	Identifier	east_isect
>9929	IfStatement	if ( south_isect [ 0 ] >= - 0.5 * m_width && south_isect [ 0 ] <= 0.5 * m_width )
>9930	CompoundStatement	 
>9931	ExpressionStatement	 
>9932	IncDecOp	num_isect ++
>9933	IncDec	++
>9934	Identifier	num_isect
>9935	IfStatement	if ( num_isect == 0 )
>9936	ElseStatement	else
>9937	IfStatement	if ( num_isect == 1 )
>9938	CompoundStatement	 
>9939	ExpressionStatement	 
>9940	CallExpression	memcpy ( isect2 , south_isect , 3 * sizeof ( double ) )
>9941	ArgumentList	isect2
>9942	Argument	3 * sizeof ( double )
>9943	MultiplicativeExpression	3 * sizeof ( double )
>9944	SizeofExpr	sizeof ( double )
>9945	SizeofOperand	double
>9946	Sizeof	sizeof
>9947	PrimaryExpression	3
>9948	Argument	south_isect
>9949	Identifier	south_isect
>9950	Argument	isect2
>9951	Identifier	isect2
>9952	Callee	memcpy
>9953	Identifier	memcpy
>9954	ExpressionStatement	 
>9955	AssignmentExpr	b2 = BoundarySouth
>9956	Identifier	BoundarySouth
>9957	Identifier	b2
>9958	Condition	 
>9959	EqualityExpression	num_isect == 1
>9960	PrimaryExpression	1
>9961	Identifier	num_isect
>9962	CompoundStatement	 
>9963	ExpressionStatement	 
>9964	CallExpression	memcpy ( isect1 , south_isect , 3 * sizeof ( double ) )
>9965	ArgumentList	isect1
>9966	Argument	3 * sizeof ( double )
>9967	MultiplicativeExpression	3 * sizeof ( double )
>9968	SizeofExpr	sizeof ( double )
>9969	SizeofOperand	double
>9970	Sizeof	sizeof
>9971	PrimaryExpression	3
>9972	Argument	south_isect
>9973	Identifier	south_isect
>9974	Argument	isect1
>9975	Identifier	isect1
>9976	Callee	memcpy
>9977	Identifier	memcpy
>9978	ExpressionStatement	 
>9979	AssignmentExpr	b1 = BoundarySouth
>9980	Identifier	BoundarySouth
>9981	Identifier	b1
>9982	Condition	 
>9983	EqualityExpression	num_isect == 0
>9984	PrimaryExpression	0
>9985	Identifier	num_isect
>9986	Condition	 
>9987	AndExpression	south_isect [ 0 ] >= - 0.5 * m_width && south_isect [ 0 ] <= 0.5 * m_width
>9988	RelationalExpression	south_isect [ 0 ] <= 0.5 * m_width
>9989	MultiplicativeExpression	0.5 * m_width
>9990	Identifier	m_width
>9991	PrimaryExpression	0.5
>9992	ArrayIndexing	south_isect [ 0 ]
>9993	PrimaryExpression	0
>9994	Identifier	south_isect
>9995	RelationalExpression	south_isect [ 0 ] >= - 0.5 * m_width
>9996	MultiplicativeExpression	- 0.5 * m_width
>9997	Identifier	m_width
>9998	UnaryOp	- 0.5
>9999	PrimaryExpression	0.5
>10000	UnaryOperator	-
>10001	ArrayIndexing	south_isect [ 0 ]
>10002	PrimaryExpression	0
>10003	Identifier	south_isect
>10004	IfStatement	if ( north_isect [ 0 ] >= - 0.5 * m_width && north_isect [ 0 ] <= 0.5 * m_width )
>10005	CompoundStatement	 
>10006	ExpressionStatement	 
>10007	IncDecOp	num_isect ++
>10008	IncDec	++
>10009	Identifier	num_isect
>10010	ExpressionStatement	 
>10011	CallExpression	memcpy ( isect1 , north_isect , 3 * sizeof ( double ) )
>10012	ArgumentList	isect1
>10013	Argument	3 * sizeof ( double )
>10014	MultiplicativeExpression	3 * sizeof ( double )
>10015	SizeofExpr	sizeof ( double )
>10016	SizeofOperand	double
>10017	Sizeof	sizeof
>10018	PrimaryExpression	3
>10019	Argument	north_isect
>10020	Identifier	north_isect
>10021	Argument	isect1
>10022	Identifier	isect1
>10023	Callee	memcpy
>10024	Identifier	memcpy
>10025	ExpressionStatement	 
>10026	AssignmentExpr	b1 = BoundaryNorth
>10027	Identifier	BoundaryNorth
>10028	Identifier	b1
>10029	Condition	 
>10030	AndExpression	north_isect [ 0 ] >= - 0.5 * m_width && north_isect [ 0 ] <= 0.5 * m_width
>10031	RelationalExpression	north_isect [ 0 ] <= 0.5 * m_width
>10032	MultiplicativeExpression	0.5 * m_width
>10033	Identifier	m_width
>10034	PrimaryExpression	0.5
>10035	ArrayIndexing	north_isect [ 0 ]
>10036	PrimaryExpression	0
>10037	Identifier	north_isect
>10038	RelationalExpression	north_isect [ 0 ] >= - 0.5 * m_width
>10039	MultiplicativeExpression	- 0.5 * m_width
>10040	Identifier	m_width
>10041	UnaryOp	- 0.5
>10042	PrimaryExpression	0.5
>10043	UnaryOperator	-
>10044	ArrayIndexing	north_isect [ 0 ]
>10045	PrimaryExpression	0
>10046	Identifier	north_isect
>10047	IdentifierDeclStatement	 
>10048	IdentifierDecl	num_isect = 0
>10049	AssignmentExpr	num_isect = 0
>10050	PrimaryExpression	0
>10051	Identifier	num_isect
>10052	Identifier	num_isect
>10053	IdentifierDeclType	int
>10054	ExpressionStatement	 
>10055	CallExpression	matrix_scale ( 3 , 1 , west_isect , 1.0 / west_isect [ 2 ] , west_isect )
>10056	ArgumentList	3
>10057	Argument	west_isect
>10058	Identifier	west_isect
>10059	Argument	1.0 / west_isect [ 2 ]
>10060	MultiplicativeExpression	1.0 / west_isect [ 2 ]
>10061	ArrayIndexing	west_isect [ 2 ]
>10062	PrimaryExpression	2
>10063	Identifier	west_isect
>10064	PrimaryExpression	1.0
>10065	Argument	west_isect
>10066	Identifier	west_isect
>10067	Argument	1
>10068	PrimaryExpression	1
>10069	Argument	3
>10070	PrimaryExpression	3
>10071	Callee	matrix_scale
>10072	Identifier	matrix_scale
>10073	ExpressionStatement	 
>10074	CallExpression	matrix_scale ( 3 , 1 , south_isect , 1.0 / south_isect [ 2 ] , south_isect )
>10075	ArgumentList	3
>10076	Argument	south_isect
>10077	Identifier	south_isect
>10078	Argument	1.0 / south_isect [ 2 ]
>10079	MultiplicativeExpression	1.0 / south_isect [ 2 ]
>10080	ArrayIndexing	south_isect [ 2 ]
>10081	PrimaryExpression	2
>10082	Identifier	south_isect
>10083	PrimaryExpression	1.0
>10084	Argument	south_isect
>10085	Identifier	south_isect
>10086	Argument	1
>10087	PrimaryExpression	1
>10088	Argument	3
>10089	PrimaryExpression	3
>10090	Callee	matrix_scale
>10091	Identifier	matrix_scale
>10092	ExpressionStatement	 
>10093	CallExpression	matrix_scale ( 3 , 1 , east_isect , 1.0 / east_isect [ 2 ] , east_isect )
>10094	ArgumentList	3
>10095	Argument	east_isect
>10096	Identifier	east_isect
>10097	Argument	1.0 / east_isect [ 2 ]
>10098	MultiplicativeExpression	1.0 / east_isect [ 2 ]
>10099	ArrayIndexing	east_isect [ 2 ]
>10100	PrimaryExpression	2
>10101	Identifier	east_isect
>10102	PrimaryExpression	1.0
>10103	Argument	east_isect
>10104	Identifier	east_isect
>10105	Argument	1
>10106	PrimaryExpression	1
>10107	Argument	3
>10108	PrimaryExpression	3
>10109	Callee	matrix_scale
>10110	Identifier	matrix_scale
>10111	ExpressionStatement	 
>10112	CallExpression	matrix_scale ( 3 , 1 , north_isect , 1.0 / north_isect [ 2 ] , north_isect )
>10113	ArgumentList	3
>10114	Argument	north_isect
>10115	Identifier	north_isect
>10116	Argument	1.0 / north_isect [ 2 ]
>10117	MultiplicativeExpression	1.0 / north_isect [ 2 ]
>10118	ArrayIndexing	north_isect [ 2 ]
>10119	PrimaryExpression	2
>10120	Identifier	north_isect
>10121	PrimaryExpression	1.0
>10122	Argument	north_isect
>10123	Identifier	north_isect
>10124	Argument	1
>10125	PrimaryExpression	1
>10126	Argument	3
>10127	PrimaryExpression	3
>10128	Callee	matrix_scale
>10129	Identifier	matrix_scale
>10130	ExpressionStatement	 
>10131	CallExpression	matrix_cross ( west , line , west_isect )
>10132	ArgumentList	west
>10133	Argument	west_isect
>10134	Identifier	west_isect
>10135	Argument	line
>10136	Identifier	line
>10137	Argument	west
>10138	Identifier	west
>10139	Callee	matrix_cross
>10140	Identifier	matrix_cross
>10141	ExpressionStatement	 
>10142	CallExpression	matrix_cross ( south , line , south_isect )
>10143	ArgumentList	south
>10144	Argument	south_isect
>10145	Identifier	south_isect
>10146	Argument	line
>10147	Identifier	line
>10148	Argument	south
>10149	Identifier	south
>10150	Callee	matrix_cross
>10151	Identifier	matrix_cross
>10152	ExpressionStatement	 
>10153	CallExpression	matrix_cross ( east , line , east_isect )
>10154	ArgumentList	east
>10155	Argument	east_isect
>10156	Identifier	east_isect
>10157	Argument	line
>10158	Identifier	line
>10159	Argument	east
>10160	Identifier	east
>10161	Callee	matrix_cross
>10162	Identifier	matrix_cross
>10163	ExpressionStatement	 
>10164	CallExpression	matrix_cross ( north , line , north_isect )
>10165	ArgumentList	north
>10166	Argument	north_isect
>10167	Identifier	north_isect
>10168	Argument	line
>10169	Identifier	line
>10170	Argument	north
>10171	Identifier	north
>10172	Callee	matrix_cross
>10173	Identifier	matrix_cross
>10174	IdentifierDeclStatement	 
>10175	IdentifierDecl	west_isect [ 3 ]
>10176	PrimaryExpression	3
>10177	Identifier	west_isect
>10178	IdentifierDeclType	double [ 3 ]
>10179	IdentifierDecl	south_isect [ 3 ]
>10180	PrimaryExpression	3
>10181	Identifier	south_isect
>10182	IdentifierDeclType	double [ 3 ]
>10183	IdentifierDecl	east_isect [ 3 ]
>10184	PrimaryExpression	3
>10185	Identifier	east_isect
>10186	IdentifierDeclType	double [ 3 ]
>10187	IdentifierDecl	north_isect [ 3 ]
>10188	PrimaryExpression	3
>10189	Identifier	north_isect
>10190	IdentifierDeclType	double [ 3 ]
>10191	ExpressionStatement	 
>10192	CallExpression	matrix_cross ( lower_left , upper_left , west )
>10193	ArgumentList	lower_left
>10194	Argument	west
>10195	Identifier	west
>10196	Argument	upper_left
>10197	Identifier	upper_left
>10198	Argument	lower_left
>10199	Identifier	lower_left
>10200	Callee	matrix_cross
>10201	Identifier	matrix_cross
>10202	ExpressionStatement	 
>10203	CallExpression	matrix_cross ( lower_left , lower_right , south )
>10204	ArgumentList	lower_left
>10205	Argument	south
>10206	Identifier	south
>10207	Argument	lower_right
>10208	Identifier	lower_right
>10209	Argument	lower_left
>10210	Identifier	lower_left
>10211	Callee	matrix_cross
>10212	Identifier	matrix_cross
>10213	ExpressionStatement	 
>10214	CallExpression	matrix_cross ( upper_right , lower_right , east )
>10215	ArgumentList	upper_right
>10216	Argument	east
>10217	Identifier	east
>10218	Argument	lower_right
>10219	Identifier	lower_right
>10220	Argument	upper_right
>10221	Identifier	upper_right
>10222	Callee	matrix_cross
>10223	Identifier	matrix_cross
>10224	ExpressionStatement	 
>10225	CallExpression	matrix_cross ( upper_right , upper_left , north )
>10226	ArgumentList	upper_right
>10227	Argument	north
>10228	Identifier	north
>10229	Argument	upper_left
>10230	Identifier	upper_left
>10231	Argument	upper_right
>10232	Identifier	upper_right
>10233	Callee	matrix_cross
>10234	Identifier	matrix_cross
>10235	IdentifierDeclStatement	 
>10236	IdentifierDecl	west [ 3 ]
>10237	PrimaryExpression	3
>10238	Identifier	west
>10239	IdentifierDeclType	double [ 3 ]
>10240	IdentifierDecl	south [ 3 ]
>10241	PrimaryExpression	3
>10242	Identifier	south
>10243	IdentifierDeclType	double [ 3 ]
>10244	IdentifierDecl	east [ 3 ]
>10245	PrimaryExpression	3
>10246	Identifier	east
>10247	IdentifierDeclType	double [ 3 ]
>10248	IdentifierDecl	north [ 3 ]
>10249	PrimaryExpression	3
>10250	Identifier	north
>10251	IdentifierDeclType	double [ 3 ]
>10252	IdentifierDeclStatement	 
>10253	IdentifierDecl	lower_right [ 3 ] = { 0.5 * m_width , - 0.5 * m_height , 1.0 }
>10254	AssignmentExpr	lower_right [ 3 ] = { 0.5 * m_width , - 0.5 * m_height , 1.0 }
>10255	InitializerList	0.5 * m_width
>10256	PrimaryExpression	1.0
>10257	MultiplicativeExpression	- 0.5 * m_height
>10258	Identifier	m_height
>10259	UnaryOp	- 0.5
>10260	PrimaryExpression	0.5
>10261	UnaryOperator	-
>10262	MultiplicativeExpression	0.5 * m_width
>10263	Identifier	m_width
>10264	PrimaryExpression	0.5
>10265	Identifier	lower_right
>10266	PrimaryExpression	3
>10267	Identifier	lower_right
>10268	IdentifierDeclType	double [ 3 ]
>10269	IdentifierDeclStatement	 
>10270	IdentifierDecl	upper_right [ 3 ] = { 0.5 * m_width , 0.5 * m_height , 1.0 }
>10271	AssignmentExpr	upper_right [ 3 ] = { 0.5 * m_width , 0.5 * m_height , 1.0 }
>10272	InitializerList	0.5 * m_width
>10273	PrimaryExpression	1.0
>10274	MultiplicativeExpression	0.5 * m_height
>10275	Identifier	m_height
>10276	PrimaryExpression	0.5
>10277	MultiplicativeExpression	0.5 * m_width
>10278	Identifier	m_width
>10279	PrimaryExpression	0.5
>10280	Identifier	upper_right
>10281	PrimaryExpression	3
>10282	Identifier	upper_right
>10283	IdentifierDeclType	double [ 3 ]
>10284	IdentifierDeclStatement	 
>10285	IdentifierDecl	lower_left [ 3 ] = { - 0.5 * m_width , - 0.5 * m_height , 1.0 }
>10286	AssignmentExpr	lower_left [ 3 ] = { - 0.5 * m_width , - 0.5 * m_height , 1.0 }
>10287	InitializerList	- 0.5 * m_width
>10288	PrimaryExpression	1.0
>10289	MultiplicativeExpression	- 0.5 * m_height
>10290	Identifier	m_height
>10291	UnaryOp	- 0.5
>10292	PrimaryExpression	0.5
>10293	UnaryOperator	-
>10294	MultiplicativeExpression	- 0.5 * m_width
>10295	Identifier	m_width
>10296	UnaryOp	- 0.5
>10297	PrimaryExpression	0.5
>10298	UnaryOperator	-
>10299	Identifier	lower_left
>10300	PrimaryExpression	3
>10301	Identifier	lower_left
>10302	IdentifierDeclType	double [ 3 ]
>10303	IdentifierDeclStatement	 
>10304	IdentifierDecl	upper_left [ 3 ] = { - 0.5 * m_width , 0.5 * m_height , 1.0 }
>10305	AssignmentExpr	upper_left [ 3 ] = { - 0.5 * m_width , 0.5 * m_height , 1.0 }
>10306	InitializerList	- 0.5 * m_width
>10307	PrimaryExpression	1.0
>10308	MultiplicativeExpression	0.5 * m_height
>10309	Identifier	m_height
>10310	PrimaryExpression	0.5
>10311	MultiplicativeExpression	- 0.5 * m_width
>10312	Identifier	m_width
>10313	UnaryOp	- 0.5
>10314	PrimaryExpression	0.5
>10315	UnaryOperator	-
>10316	Identifier	upper_left
>10317	PrimaryExpression	3
>10318	Identifier	upper_left
>10319	IdentifierDeclType	double [ 3 ]
>10357	FunctionDef	ImageData 
>10358	ParameterList	double x , double y , double * grad
>10359	Parameter	 
>10360	Identifier	grad
>10361	ParameterType	double *
>10362	Parameter	 
>10363	Identifier	y
>10364	ParameterType	double
>10365	Parameter	 
>10366	Identifier	x
>10367	ParameterType	double
>10368	ReturnType	void
>10369	CompoundStatement	 
>10370	ExpressionStatement	 
>10371	AssignmentExpr	grad [ 1 ] = gy
>10372	Identifier	gy
>10373	ArrayIndexing	grad [ 1 ]
>10374	PrimaryExpression	1
>10375	Identifier	grad
>10376	ExpressionStatement	 
>10377	AssignmentExpr	grad [ 0 ] = gx
>10378	Identifier	gx
>10379	ArrayIndexing	grad [ 0 ]
>10380	PrimaryExpression	0
>10381	Identifier	grad
>10382	ForStatement	for ( int dy = - 1 ; dy <= 1 ; dy ++ )
>10383	CompoundStatement	 
>10384	ForStatement	for ( int dx = - 1 ; dx <= 1 ; dx ++ , idx ++ )
>10385	CompoundStatement	 
>10386	ExpressionStatement	 
>10387	AssignmentExpr	gy += sobel_y [ idx ] * v
>10388	MultiplicativeExpression	sobel_y [ idx ] * v
>10389	Identifier	v
>10390	ArrayIndexing	sobel_y [ idx ]
>10391	Identifier	idx
>10392	Identifier	sobel_y
>10393	Identifier	gy
>10394	ExpressionStatement	 
>10395	AssignmentExpr	gx += sobel_x [ idx ] * v
>10396	MultiplicativeExpression	sobel_x [ idx ] * v
>10397	Identifier	v
>10398	ArrayIndexing	sobel_x [ idx ]
>10399	Identifier	idx
>10400	Identifier	sobel_x
>10401	Identifier	gx
>10402	IdentifierDeclStatement	 
>10403	IdentifierDecl	v = fcolor_intensity ( c )
>10404	AssignmentExpr	v = fcolor_intensity ( c )
>10405	CallExpression	fcolor_intensity ( c )
>10406	ArgumentList	c
>10407	Argument	c
>10408	Identifier	c
>10409	Callee	fcolor_intensity
>10410	Identifier	fcolor_intensity
>10411	Identifier	v
>10412	Identifier	v
>10413	IdentifierDeclType	double
>10414	IdentifierDeclStatement	 
>10415	IdentifierDecl	c = pixel_lerp ( m_img , x_d + 0.5 * w , y_d + 0.5 * h )
>10416	AssignmentExpr	c = pixel_lerp ( m_img , x_d + 0.5 * w , y_d + 0.5 * h )
>10417	CallExpression	pixel_lerp ( m_img , x_d + 0.5 * w , y_d + 0.5 * h )
>10418	ArgumentList	m_img
>10419	Argument	y_d + 0.5 * h
>10420	AdditiveExpression	y_d + 0.5 * h
>10421	MultiplicativeExpression	0.5 * h
>10422	Identifier	h
>10423	PrimaryExpression	0.5
>10424	Identifier	y_d
>10425	Argument	x_d + 0.5 * w
>10426	AdditiveExpression	x_d + 0.5 * w
>10427	MultiplicativeExpression	0.5 * w
>10428	Identifier	w
>10429	PrimaryExpression	0.5
>10430	Identifier	x_d
>10431	Argument	m_img
>10432	Identifier	m_img
>10433	Callee	pixel_lerp
>10434	Identifier	pixel_lerp
>10435	Identifier	c
>10436	Identifier	c
>10437	IdentifierDeclType	fcolor_t
>10438	ExpressionStatement	 
>10439	CallExpression	DistortPoint ( x + dx , y + dy , ident , x_d , y_d )
>10440	ArgumentList	x + dx
>10441	Argument	y_d
>10442	Identifier	y_d
>10443	Argument	x_d
>10444	Identifier	x_d
>10445	Argument	ident
>10446	Identifier	ident
>10447	Argument	y + dy
>10448	AdditiveExpression	y + dy
>10449	Identifier	dy
>10450	Identifier	y
>10451	Argument	x + dx
>10452	AdditiveExpression	x + dx
>10453	Identifier	dx
>10454	Identifier	x
>10455	Callee	DistortPoint
>10456	Identifier	DistortPoint
>10457	IdentifierDeclStatement	 
>10458	IdentifierDecl	y_d
>10459	Identifier	y_d
>10460	IdentifierDeclType	double
>10461	IdentifierDecl	x_d
>10462	Identifier	x_d
>10463	IdentifierDeclType	double
>10464	Expression	 
>10465	IncDecOp	idx ++
>10466	IncDec	++
>10467	Identifier	idx
>10468	IncDecOp	dx ++
>10469	IncDec	++
>10470	Identifier	dx
>10471	Condition	 
>10472	RelationalExpression	dx <= 1
>10473	PrimaryExpression	1
>10474	Identifier	dx
>10475	ForInit	 
>10476	IdentifierDeclStatement	int dx = - 1 ;
>10477	IdentifierDecl	dx = - 1
>10478	AssignmentExpr	dx = - 1
>10479	UnaryOp	- 1
>10480	PrimaryExpression	1
>10481	UnaryOperator	-
>10482	Identifier	dx
>10483	Identifier	dx
>10484	IdentifierDeclType	int
>10485	IncDecOp	 
>10486	IncDec	++
>10487	Identifier	dy
>10488	Condition	 
>10489	RelationalExpression	dy <= 1
>10490	PrimaryExpression	1
>10491	Identifier	dy
>10492	ForInit	 
>10493	IdentifierDeclStatement	int dy = - 1 ;
>10494	IdentifierDecl	dy = - 1
>10495	AssignmentExpr	dy = - 1
>10496	UnaryOp	- 1
>10497	PrimaryExpression	1
>10498	UnaryOperator	-
>10499	Identifier	dy
>10500	Identifier	dy
>10501	IdentifierDeclType	int
>10502	IdentifierDeclStatement	 
>10503	IdentifierDecl	idx = 0
>10504	AssignmentExpr	idx = 0
>10505	PrimaryExpression	0
>10506	Identifier	idx
>10507	Identifier	idx
>10508	IdentifierDeclType	int
>10509	ExpressionStatement	 
>10510	CallExpression	GetRotationFromSpherical ( - 0.5 * M_PI , 0.5 * M_PI , ident )
>10511	ArgumentList	- 0.5 * M_PI
>10512	Argument	ident
>10513	Identifier	ident
>10514	Argument	0.5 * M_PI
>10515	MultiplicativeExpression	0.5 * M_PI
>10516	Identifier	M_PI
>10517	PrimaryExpression	0.5
>10518	Argument	- 0.5 * M_PI
>10519	MultiplicativeExpression	- 0.5 * M_PI
>10520	Identifier	M_PI
>10521	UnaryOp	- 0.5
>10522	PrimaryExpression	0.5
>10523	UnaryOperator	-
>10524	Callee	GetRotationFromSpherical
>10525	Identifier	GetRotationFromSpherical
>10526	IdentifierDeclStatement	 
>10527	IdentifierDecl	ident [ 9 ]
>10528	PrimaryExpression	9
>10529	Identifier	ident
>10530	IdentifierDeclType	double [ 9 ]
>10531	IdentifierDeclStatement	 
>10532	IdentifierDecl	h = GetHeight ( )
>10533	AssignmentExpr	h = GetHeight ( )
>10534	CallExpression	GetHeight ( )
>10535	ArgumentList	 
>10536	Callee	GetHeight
>10537	Identifier	GetHeight
>10538	Identifier	h
>10539	Identifier	h
>10540	IdentifierDeclType	int
>10541	IdentifierDeclStatement	 
>10542	IdentifierDecl	w = GetWidth ( )
>10543	AssignmentExpr	w = GetWidth ( )
>10544	CallExpression	GetWidth ( )
>10545	ArgumentList	 
>10546	Callee	GetWidth
>10547	Identifier	GetWidth
>10548	Identifier	w
>10549	Identifier	w
>10550	IdentifierDeclType	int
>10551	IdentifierDeclStatement	 
>10552	IdentifierDecl	gy = 0.0
>10553	AssignmentExpr	gy = 0.0
>10554	PrimaryExpression	0.0
>10555	Identifier	gy
>10556	Identifier	gy
>10557	IdentifierDeclType	double
>10558	IdentifierDecl	gx = 0.0
>10559	AssignmentExpr	gx = 0.0
>10560	PrimaryExpression	0.0
>10561	Identifier	gx
>10562	Identifier	gx
>10563	IdentifierDeclType	double
>10594	FunctionDef	ImageData 
>10595	ParameterList	 
>10596	ReturnType	void
>10597	CompoundStatement	 
>10598	IfStatement	if ( unload )
>10599	ExpressionStatement	 
>10600	CallExpression	UnloadImage ( )
>10601	ArgumentList	 
>10602	Callee	UnloadImage
>10603	Identifier	UnloadImage
>10604	Condition	 
>10605	Identifier	unload
>10606	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>10607	CompoundStatement	 
>10608	ExpressionStatement	 
>10609	AssignmentExpr	m_keys [ i ] . m_b = iround ( col . b )
>10610	CallExpression	iround ( col . b )
>10611	ArgumentList	col . b
>10612	Argument	col . b
>10613	MemberAccess	col . b
>10614	Identifier	b
>10615	Identifier	col
>10616	Callee	iround
>10617	Identifier	iround
>10618	MemberAccess	m_keys [ i ] . m_b
>10619	Identifier	m_b
>10620	ArrayIndexing	m_keys [ i ]
>10621	Identifier	i
>10622	Identifier	m_keys
>10623	ExpressionStatement	 
>10624	AssignmentExpr	m_keys [ i ] . m_g = iround ( col . g )
>10625	CallExpression	iround ( col . g )
>10626	ArgumentList	col . g
>10627	Argument	col . g
>10628	MemberAccess	col . g
>10629	Identifier	g
>10630	Identifier	col
>10631	Callee	iround
>10632	Identifier	iround
>10633	MemberAccess	m_keys [ i ] . m_g
>10634	Identifier	m_g
>10635	ArrayIndexing	m_keys [ i ]
>10636	Identifier	i
>10637	Identifier	m_keys
>10638	ExpressionStatement	 
>10639	AssignmentExpr	m_keys [ i ] . m_r = iround ( col . r )
>10640	CallExpression	iround ( col . r )
>10641	ArgumentList	col . r
>10642	Argument	col . r
>10643	MemberAccess	col . r
>10644	Identifier	r
>10645	Identifier	col
>10646	Callee	iround
>10647	Identifier	iround
>10648	MemberAccess	m_keys [ i ] . m_r
>10649	Identifier	m_r
>10650	ArrayIndexing	m_keys [ i ]
>10651	Identifier	i
>10652	Identifier	m_keys
>10653	ExpressionStatement	 
>10654	AssignmentExpr	col = pixel_lerp ( m_img , x_d + 0.5 * w , y_d + 0.5 * h )
>10655	CallExpression	pixel_lerp ( m_img , x_d + 0.5 * w , y_d + 0.5 * h )
>10656	ArgumentList	m_img
>10657	Argument	y_d + 0.5 * h
>10658	AdditiveExpression	y_d + 0.5 * h
>10659	MultiplicativeExpression	0.5 * h
>10660	Identifier	h
>10661	PrimaryExpression	0.5
>10662	Identifier	y_d
>10663	Argument	x_d + 0.5 * w
>10664	AdditiveExpression	x_d + 0.5 * w
>10665	MultiplicativeExpression	0.5 * w
>10666	Identifier	w
>10667	PrimaryExpression	0.5
>10668	Identifier	x_d
>10669	Argument	m_img
>10670	Identifier	m_img
>10671	Callee	pixel_lerp
>10672	Identifier	pixel_lerp
>10673	Identifier	col
>10674	IdentifierDeclStatement	 
>10675	IdentifierDecl	col
>10676	Identifier	col
>10677	IdentifierDeclType	fcolor_t
>10678	ExpressionStatement	 
>10679	CallExpression	DistortPoint ( x , y , ident , x_d , y_d )
>10680	ArgumentList	x
>10681	Argument	y_d
>10682	Identifier	y_d
>10683	Argument	x_d
>10684	Identifier	x_d
>10685	Argument	ident
>10686	Identifier	ident
>10687	Argument	y
>10688	Identifier	y
>10689	Argument	x
>10690	Identifier	x
>10691	Callee	DistortPoint
>10692	Identifier	DistortPoint
>10693	IdentifierDeclStatement	 
>10694	IdentifierDecl	y_d
>10695	Identifier	y_d
>10696	IdentifierDeclType	double
>10697	IdentifierDecl	x_d
>10698	Identifier	x_d
>10699	IdentifierDeclType	double
>10700	IdentifierDeclStatement	 
>10701	IdentifierDecl	y = m_keys [ i ] . m_y
>10702	AssignmentExpr	y = m_keys [ i ] . m_y
>10703	MemberAccess	m_keys [ i ] . m_y
>10704	Identifier	m_y
>10705	ArrayIndexing	m_keys [ i ]
>10706	Identifier	i
>10707	Identifier	m_keys
>10708	Identifier	y
>10709	Identifier	y
>10710	IdentifierDeclType	double
>10711	IdentifierDeclStatement	 
>10712	IdentifierDecl	x = m_keys [ i ] . m_x
>10713	AssignmentExpr	x = m_keys [ i ] . m_x
>10714	MemberAccess	m_keys [ i ] . m_x
>10715	Identifier	m_x
>10716	ArrayIndexing	m_keys [ i ]
>10717	Identifier	i
>10718	Identifier	m_keys
>10719	Identifier	x
>10720	Identifier	x
>10721	IdentifierDeclType	double
>10722	IncDecOp	 
>10723	IncDec	++
>10724	Identifier	i
>10725	Condition	 
>10726	RelationalExpression	i < num_keys
>10727	Identifier	num_keys
>10728	Identifier	i
>10729	ForInit	 
>10730	IdentifierDeclStatement	int i = 0 ;
>10731	IdentifierDecl	i = 0
>10732	AssignmentExpr	i = 0
>10733	PrimaryExpression	0
>10734	Identifier	i
>10735	Identifier	i
>10736	IdentifierDeclType	int
>10737	IdentifierDeclStatement	 
>10738	IdentifierDecl	num_keys = ( int ) m_keys . size ( )
>10739	AssignmentExpr	num_keys = ( int ) m_keys . size ( )
>10740	CastExpression	( int ) m_keys . size ( )
>10741	CallExpression	m_keys . size ( )
>10742	ArgumentList	 
>10743	Callee	m_keys . size
>10744	MemberAccess	m_keys . size
>10745	Identifier	size
>10746	Identifier	m_keys
>10747	CastTarget	int
>10748	Identifier	num_keys
>10749	Identifier	num_keys
>10750	IdentifierDeclType	int
>10751	IdentifierDeclStatement	 
>10752	IdentifierDecl	h = GetHeight ( )
>10753	AssignmentExpr	h = GetHeight ( )
>10754	CallExpression	GetHeight ( )
>10755	ArgumentList	 
>10756	Callee	GetHeight
>10757	Identifier	GetHeight
>10758	Identifier	h
>10759	Identifier	h
>10760	IdentifierDeclType	int
>10761	IdentifierDeclStatement	 
>10762	IdentifierDecl	w = GetWidth ( )
>10763	AssignmentExpr	w = GetWidth ( )
>10764	CallExpression	GetWidth ( )
>10765	ArgumentList	 
>10766	Callee	GetWidth
>10767	Identifier	GetWidth
>10768	Identifier	w
>10769	Identifier	w
>10770	IdentifierDeclType	int
>10771	IfStatement	if ( ! m_image_loaded )
>10772	CompoundStatement	 
>10773	ExpressionStatement	 
>10774	AssignmentExpr	unload = true
>10775	Identifier	true
>10776	Identifier	unload
>10777	ExpressionStatement	 
>10778	CallExpression	LoadImage ( )
>10779	ArgumentList	 
>10780	Callee	LoadImage
>10781	Identifier	LoadImage
>10782	Condition	 
>10783	UnaryOp	! m_image_loaded
>10784	Identifier	m_image_loaded
>10785	UnaryOperator	!
>10786	IdentifierDeclStatement	 
>10787	IdentifierDecl	unload = false
>10788	AssignmentExpr	unload = false
>10789	Identifier	false
>10790	Identifier	false
>10791	Identifier	unload
>10792	IdentifierDeclType	bool
>10793	ExpressionStatement	 
>10794	CallExpression	GetRotationFromSpherical ( - 0.5 * M_PI , 0.5 * M_PI , ident )
>10795	ArgumentList	- 0.5 * M_PI
>10796	Argument	ident
>10797	Identifier	ident
>10798	Argument	0.5 * M_PI
>10799	MultiplicativeExpression	0.5 * M_PI
>10800	Identifier	M_PI
>10801	PrimaryExpression	0.5
>10802	Argument	- 0.5 * M_PI
>10803	MultiplicativeExpression	- 0.5 * M_PI
>10804	Identifier	M_PI
>10805	UnaryOp	- 0.5
>10806	PrimaryExpression	0.5
>10807	UnaryOperator	-
>10808	Callee	GetRotationFromSpherical
>10809	Identifier	GetRotationFromSpherical
>10810	IdentifierDeclStatement	 
>10811	IdentifierDecl	ident [ 9 ]
>10812	PrimaryExpression	9
>10813	Identifier	ident
>10814	IdentifierDeclType	double [ 9 ]
>10850	FunctionDef	ImageData 
>10851	ParameterList	 
>10852	ReturnType	bool
>10853	CompoundStatement	 
>10854	ReturnStatement	 
>10855	Identifier	true
>10856	ExpressionStatement	 
>10857	CallExpression	m_camera . Finalize ( )
>10858	ArgumentList	 
>10859	Callee	m_camera . Finalize
>10860	MemberAccess	m_camera . Finalize
>10861	Identifier	Finalize
>10862	Identifier	m_camera
>10863	ExpressionStatement	 
>10864	AssignmentExpr	m_camera . m_adjusted = true
>10865	Identifier	true
>10866	MemberAccess	m_camera . m_adjusted
>10867	Identifier	m_adjusted
>10868	Identifier	m_camera
>10869	ForStatement	for ( int i = 0 ; i < NUM_LINK_DIRECTIONS ; i ++ )
>10870	CompoundStatement	 
>10871	ExpressionStatement	 
>10872	AssignmentExpr	m_camera . m_links [ i ] = - 1
>10873	UnaryOp	- 1
>10874	PrimaryExpression	1
>10875	UnaryOperator	-
>10876	ArrayIndexing	m_camera . m_links [ i ]
>10877	Identifier	i
>10878	MemberAccess	m_camera . m_links
>10879	Identifier	m_links
>10880	Identifier	m_camera
>10881	IncDecOp	 
>10882	IncDec	++
>10883	Identifier	i
>10884	Condition	 
>10885	RelationalExpression	i < NUM_LINK_DIRECTIONS
>10886	Identifier	NUM_LINK_DIRECTIONS
>10887	Identifier	i
>10888	ForInit	 
>10889	IdentifierDeclStatement	int i = 0 ;
>10890	IdentifierDecl	i = 0
>10891	AssignmentExpr	i = 0
>10892	PrimaryExpression	0
>10893	Identifier	i
>10894	Identifier	i
>10895	IdentifierDeclType	int
>10896	ExpressionStatement	 
>10897	AssignmentExpr	m_camera . m_height = GetHeight ( )
>10898	CallExpression	GetHeight ( )
>10899	ArgumentList	 
>10900	Callee	GetHeight
>10901	Identifier	GetHeight
>10902	MemberAccess	m_camera . m_height
>10903	Identifier	m_height
>10904	Identifier	m_camera
>10905	ExpressionStatement	 
>10906	AssignmentExpr	m_camera . m_width = GetWidth ( )
>10907	CallExpression	GetWidth ( )
>10908	ArgumentList	 
>10909	Callee	GetWidth
>10910	Identifier	GetWidth
>10911	MemberAccess	m_camera . m_width
>10912	Identifier	m_width
>10913	Identifier	m_camera
>10914	ExpressionStatement	 
>10915	CallExpression	fclose ( f )
>10916	ArgumentList	f
>10917	Argument	f
>10918	Identifier	f
>10919	Callee	fclose
>10920	Identifier	fclose
>10921	ExpressionStatement	 
>10922	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , m_camera . m_t + 0 , m_camera . m_t + 1 , m_camera . m_t + 2 )
>10923	ArgumentList	f
>10924	Argument	m_camera . m_t + 2
>10925	AdditiveExpression	m_camera . m_t + 2
>10926	PrimaryExpression	2
>10927	MemberAccess	m_camera . m_t
>10928	Identifier	m_t
>10929	Identifier	m_camera
>10930	Argument	m_camera . m_t + 1
>10931	AdditiveExpression	m_camera . m_t + 1
>10932	PrimaryExpression	1
>10933	MemberAccess	m_camera . m_t
>10934	Identifier	m_t
>10935	Identifier	m_camera
>10936	Argument	m_camera . m_t + 0
>10937	AdditiveExpression	m_camera . m_t + 0
>10938	PrimaryExpression	0
>10939	MemberAccess	m_camera . m_t
>10940	Identifier	m_t
>10941	Identifier	m_camera
>10942	Argument	\"%lf %lf %lf\n\"
>10943	PrimaryExpression	\"%lf %lf %lf\n\"
>10944	Argument	f
>10945	Identifier	f
>10946	Callee	fscanf
>10947	Identifier	fscanf
>10948	ExpressionStatement	 
>10949	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , m_camera . m_R + 6 , m_camera . m_R + 7 , m_camera . m_R + 8 )
>10950	ArgumentList	f
>10951	Argument	m_camera . m_R + 8
>10952	AdditiveExpression	m_camera . m_R + 8
>10953	PrimaryExpression	8
>10954	MemberAccess	m_camera . m_R
>10955	Identifier	m_R
>10956	Identifier	m_camera
>10957	Argument	m_camera . m_R + 7
>10958	AdditiveExpression	m_camera . m_R + 7
>10959	PrimaryExpression	7
>10960	MemberAccess	m_camera . m_R
>10961	Identifier	m_R
>10962	Identifier	m_camera
>10963	Argument	m_camera . m_R + 6
>10964	AdditiveExpression	m_camera . m_R + 6
>10965	PrimaryExpression	6
>10966	MemberAccess	m_camera . m_R
>10967	Identifier	m_R
>10968	Identifier	m_camera
>10969	Argument	\"%lf %lf %lf\n\"
>10970	PrimaryExpression	\"%lf %lf %lf\n\"
>10971	Argument	f
>10972	Identifier	f
>10973	Callee	fscanf
>10974	Identifier	fscanf
>10975	ExpressionStatement	 
>10976	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , m_camera . m_R + 3 , m_camera . m_R + 4 , m_camera . m_R + 5 )
>10977	ArgumentList	f
>10978	Argument	m_camera . m_R + 5
>10979	AdditiveExpression	m_camera . m_R + 5
>10980	PrimaryExpression	5
>10981	MemberAccess	m_camera . m_R
>10982	Identifier	m_R
>10983	Identifier	m_camera
>10984	Argument	m_camera . m_R + 4
>10985	AdditiveExpression	m_camera . m_R + 4
>10986	PrimaryExpression	4
>10987	MemberAccess	m_camera . m_R
>10988	Identifier	m_R
>10989	Identifier	m_camera
>10990	Argument	m_camera . m_R + 3
>10991	AdditiveExpression	m_camera . m_R + 3
>10992	PrimaryExpression	3
>10993	MemberAccess	m_camera . m_R
>10994	Identifier	m_R
>10995	Identifier	m_camera
>10996	Argument	\"%lf %lf %lf\n\"
>10997	PrimaryExpression	\"%lf %lf %lf\n\"
>10998	Argument	f
>10999	Identifier	f
>11000	Callee	fscanf
>11001	Identifier	fscanf
>11002	ExpressionStatement	 
>11003	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , m_camera . m_R + 0 , m_camera . m_R + 1 , m_camera . m_R + 2 )
>11004	ArgumentList	f
>11005	Argument	m_camera . m_R + 2
>11006	AdditiveExpression	m_camera . m_R + 2
>11007	PrimaryExpression	2
>11008	MemberAccess	m_camera . m_R
>11009	Identifier	m_R
>11010	Identifier	m_camera
>11011	Argument	m_camera . m_R + 1
>11012	AdditiveExpression	m_camera . m_R + 1
>11013	PrimaryExpression	1
>11014	MemberAccess	m_camera . m_R
>11015	Identifier	m_R
>11016	Identifier	m_camera
>11017	Argument	m_camera . m_R + 0
>11018	AdditiveExpression	m_camera . m_R + 0
>11019	PrimaryExpression	0
>11020	MemberAccess	m_camera . m_R
>11021	Identifier	m_R
>11022	Identifier	m_camera
>11023	Argument	\"%lf %lf %lf\n\"
>11024	PrimaryExpression	\"%lf %lf %lf\n\"
>11025	Argument	f
>11026	Identifier	f
>11027	Callee	fscanf
>11028	Identifier	fscanf
>11029	ExpressionStatement	 
>11030	CallExpression	fscanf ( f , \"%lf %lf %lf\n\" , & ( m_camera . m_focal ) , m_camera . m_k + 0 , m_camera . m_k + 1 )
>11031	ArgumentList	f
>11032	Argument	m_camera . m_k + 1
>11033	AdditiveExpression	m_camera . m_k + 1
>11034	PrimaryExpression	1
>11035	MemberAccess	m_camera . m_k
>11036	Identifier	m_k
>11037	Identifier	m_camera
>11038	Argument	m_camera . m_k + 0
>11039	AdditiveExpression	m_camera . m_k + 0
>11040	PrimaryExpression	0
>11041	MemberAccess	m_camera . m_k
>11042	Identifier	m_k
>11043	Identifier	m_camera
>11044	Argument	& ( m_camera . m_focal )
>11045	UnaryOp	& ( m_camera . m_focal )
>11046	MemberAccess	m_camera . m_focal
>11047	Identifier	m_focal
>11048	Identifier	m_camera
>11049	UnaryOperator	&
>11050	Argument	\"%lf %lf %lf\n\"
>11051	PrimaryExpression	\"%lf %lf %lf\n\"
>11052	Argument	f
>11053	Identifier	f
>11054	Callee	fscanf
>11055	Identifier	fscanf
>11056	IfStatement	if ( f == NULL )
>11057	CompoundStatement	 
>11058	ReturnStatement	 
>11059	Identifier	false
>11060	Condition	 
>11061	EqualityExpression	f == NULL
>11062	Identifier	NULL
>11063	Identifier	f
>11064	IdentifierDeclStatement	 
>11065	IdentifierDecl	* f = fopen ( cam_buf , \"r\" )
>11066	AssignmentExpr	* f = fopen ( cam_buf , \"r\" )
>11067	CallExpression	fopen ( cam_buf , \"r\" )
>11068	ArgumentList	cam_buf
>11069	Argument	\"r\"
>11070	PrimaryExpression	\"r\"
>11071	Argument	cam_buf
>11072	Identifier	cam_buf
>11073	Callee	fopen
>11074	Identifier	fopen
>11075	Identifier	f
>11076	Identifier	f
>11077	IdentifierDeclType	FILE *
>11078	ExpressionStatement	 
>11079	AssignmentExpr	cam_buf [ strlen ( m_name ) - 1 ] = 'm'
>11080	PrimaryExpression	'm'
>11081	ArrayIndexing	cam_buf [ strlen ( m_name ) - 1 ]
>11082	AdditiveExpression	strlen ( m_name ) - 1
>11083	PrimaryExpression	1
>11084	CallExpression	strlen ( m_name )
>11085	ArgumentList	m_name
>11086	Argument	m_name
>11087	Identifier	m_name
>11088	Callee	strlen
>11089	Identifier	strlen
>11090	Identifier	cam_buf
>11091	ExpressionStatement	 
>11092	AssignmentExpr	cam_buf [ strlen ( m_name ) - 2 ] = 'a'
>11093	PrimaryExpression	'a'
>11094	ArrayIndexing	cam_buf [ strlen ( m_name ) - 2 ]
>11095	AdditiveExpression	strlen ( m_name ) - 2
>11096	PrimaryExpression	2
>11097	CallExpression	strlen ( m_name )
>11098	ArgumentList	m_name
>11099	Argument	m_name
>11100	Identifier	m_name
>11101	Callee	strlen
>11102	Identifier	strlen
>11103	Identifier	cam_buf
>11104	ExpressionStatement	 
>11105	AssignmentExpr	cam_buf [ strlen ( m_name ) - 3 ] = 'c'
>11106	PrimaryExpression	'c'
>11107	ArrayIndexing	cam_buf [ strlen ( m_name ) - 3 ]
>11108	AdditiveExpression	strlen ( m_name ) - 3
>11109	PrimaryExpression	3
>11110	CallExpression	strlen ( m_name )
>11111	ArgumentList	m_name
>11112	Argument	m_name
>11113	Identifier	m_name
>11114	Callee	strlen
>11115	Identifier	strlen
>11116	Identifier	cam_buf
>11117	ExpressionStatement	 
>11118	CallExpression	strcpy ( cam_buf , m_name )
>11119	ArgumentList	cam_buf
>11120	Argument	m_name
>11121	Identifier	m_name
>11122	Argument	cam_buf
>11123	Identifier	cam_buf
>11124	Callee	strcpy
>11125	Identifier	strcpy
>11126	IdentifierDeclStatement	 
>11127	IdentifierDecl	cam_buf [ 256 ]
>11128	PrimaryExpression	256
>11129	Identifier	cam_buf
>11130	IdentifierDeclType	char [ 256 ]
>11161	FunctionDef	ImageData 
>11162	ParameterList	int img_idx , std 
>11163	Parameter	 
>11164	Identifier	pt_data
>11165	ParameterType	std 
>11166	Parameter	 
>11167	Identifier	img_idx
>11168	ParameterType	int
>11169	ReturnType	bool
>11170	CompoundStatement	 
>11171	ReturnStatement	 
>11172	Identifier	true
>11173	ExpressionStatement	 
>11174	CallExpression	fclose ( f )
>11175	ArgumentList	f
>11176	Argument	f
>11177	Identifier	f
>11178	Callee	fclose
>11179	Identifier	fclose
>11180	ForStatement	for ( int i = 0 ; i < num_tracks ; i ++ )
>11181	CompoundStatement	 
>11182	ExpressionStatement	 
>11183	CallExpression	pt_data [ track ] . m_views . push_back ( ImageKey ( img_idx , key ) )
>11184	ArgumentList	ImageKey ( img_idx , key )
>11185	Argument	ImageKey ( img_idx , key )
>11186	CallExpression	ImageKey ( img_idx , key )
>11187	ArgumentList	img_idx
>11188	Argument	key
>11189	Identifier	key
>11190	Argument	img_idx
>11191	Identifier	img_idx
>11192	Callee	ImageKey
>11193	Identifier	ImageKey
>11194	Callee	pt_data [ track ] . m_views . push_back
>11195	MemberAccess	pt_data [ track ] . m_views . push_back
>11196	Identifier	push_back
>11197	MemberAccess	pt_data [ track ] . m_views
>11198	Identifier	m_views
>11199	ArrayIndexing	pt_data [ track ]
>11200	Identifier	track
>11201	Identifier	pt_data
>11202	ExpressionStatement	 
>11203	CallExpression	m_visible_keys . push_back ( key )
>11204	ArgumentList	key
>11205	Argument	key
>11206	Identifier	key
>11207	Callee	m_visible_keys . push_back
>11208	MemberAccess	m_visible_keys . push_back
>11209	Identifier	push_back
>11210	Identifier	m_visible_keys
>11211	ExpressionStatement	 
>11212	CallExpression	m_visible_points . push_back ( track )
>11213	ArgumentList	track
>11214	Argument	track
>11215	Identifier	track
>11216	Callee	m_visible_points . push_back
>11217	MemberAccess	m_visible_points . push_back
>11218	Identifier	push_back
>11219	Identifier	m_visible_points
>11220	IfStatement	if ( key < 0 || key >= num_keys )
>11221	ElseStatement	else
>11222	ExpressionStatement	 
>11223	AssignmentExpr	m_keys [ key ] = track
>11224	Identifier	track
>11225	ArrayIndexing	m_keys [ key ]
>11226	Identifier	key
>11227	Identifier	m_keys
>11228	ExpressionStatement	 
>11229	CallExpression	printf ( \"[ImageData
>11230	ArgumentList	\"[ImageData
>11231	Argument	key
>11232	Identifier	key
>11233	Argument	\"[ImageData
>11234	PrimaryExpression	\"[ImageData
>11235	Callee	printf
>11236	Identifier	printf
>11237	Condition	 
>11238	OrExpression	key < 0 || key >= num_keys
>11239	RelationalExpression	key >= num_keys
>11240	Identifier	num_keys
>11241	Identifier	key
>11242	RelationalExpression	key < 0
>11243	PrimaryExpression	0
>11244	Identifier	key
>11245	ExpressionStatement	 
>11246	CallExpression	fscanf ( f , \"%d %d\n\" , & key , & track )
>11247	ArgumentList	f
>11248	Argument	& track
>11249	UnaryOp	& track
>11250	Identifier	track
>11251	UnaryOperator	&
>11252	Argument	& key
>11253	UnaryOp	& key
>11254	Identifier	key
>11255	UnaryOperator	&
>11256	Argument	\"%d %d\n\"
>11257	PrimaryExpression	\"%d %d\n\"
>11258	Argument	f
>11259	Identifier	f
>11260	Callee	fscanf
>11261	Identifier	fscanf
>11262	IdentifierDeclStatement	 
>11263	IdentifierDecl	track
>11264	Identifier	track
>11265	IdentifierDeclType	int
>11266	IdentifierDecl	key
>11267	Identifier	key
>11268	IdentifierDeclType	int
>11269	IncDecOp	 
>11270	IncDec	++
>11271	Identifier	i
>11272	Condition	 
>11273	RelationalExpression	i < num_tracks
>11274	Identifier	num_tracks
>11275	Identifier	i
>11276	ForInit	 
>11277	IdentifierDeclStatement	int i = 0 ;
>11278	IdentifierDecl	i = 0
>11279	AssignmentExpr	i = 0
>11280	PrimaryExpression	0
>11281	Identifier	i
>11282	Identifier	i
>11283	IdentifierDeclType	int
>11284	ExpressionStatement	 
>11285	CallExpression	fscanf ( f , \"%d\n\" , & num_tracks )
>11286	ArgumentList	f
>11287	Argument	& num_tracks
>11288	UnaryOp	& num_tracks
>11289	Identifier	num_tracks
>11290	UnaryOperator	&
>11291	Argument	\"%d\n\"
>11292	PrimaryExpression	\"%d\n\"
>11293	Argument	f
>11294	Identifier	f
>11295	Callee	fscanf
>11296	Identifier	fscanf
>11297	IdentifierDeclStatement	 
>11298	IdentifierDecl	num_tracks
>11299	Identifier	num_tracks
>11300	IdentifierDeclType	int
>11301	ExpressionStatement	 
>11302	CallExpression	m_visible_points . clear ( )
>11303	ArgumentList	 
>11304	Callee	m_visible_points . clear
>11305	MemberAccess	m_visible_points . clear
>11306	Identifier	clear
>11307	Identifier	m_visible_points
>11308	IfStatement	if ( f == NULL )
>11309	CompoundStatement	 
>11310	ReturnStatement	 
>11311	Identifier	false
>11312	ExpressionStatement	 
>11313	CallExpression	printf ( \"[ImageData
>11314	ArgumentList	\"[ImageData
>11315	Argument	cam_buf
>11316	Identifier	cam_buf
>11317	Argument	\"[ImageData
>11318	PrimaryExpression	\"[ImageData
>11319	Callee	printf
>11320	Identifier	printf
>11321	Condition	 
>11322	EqualityExpression	f == NULL
>11323	Identifier	NULL
>11324	Identifier	f
>11325	IdentifierDeclStatement	 
>11326	IdentifierDecl	* f = fopen ( cam_buf , \"r\" )
>11327	AssignmentExpr	* f = fopen ( cam_buf , \"r\" )
>11328	CallExpression	fopen ( cam_buf , \"r\" )
>11329	ArgumentList	cam_buf
>11330	Argument	\"r\"
>11331	PrimaryExpression	\"r\"
>11332	Argument	cam_buf
>11333	Identifier	cam_buf
>11334	Callee	fopen
>11335	Identifier	fopen
>11336	Identifier	f
>11337	Identifier	f
>11338	IdentifierDeclType	FILE *
>11339	ExpressionStatement	 
>11340	AssignmentExpr	cam_buf [ strlen ( m_name ) - 1 ] = 'k'
>11341	PrimaryExpression	'k'
>11342	ArrayIndexing	cam_buf [ strlen ( m_name ) - 1 ]
>11343	AdditiveExpression	strlen ( m_name ) - 1
>11344	PrimaryExpression	1
>11345	CallExpression	strlen ( m_name )
>11346	ArgumentList	m_name
>11347	Argument	m_name
>11348	Identifier	m_name
>11349	Callee	strlen
>11350	Identifier	strlen
>11351	Identifier	cam_buf
>11352	ExpressionStatement	 
>11353	AssignmentExpr	cam_buf [ strlen ( m_name ) - 2 ] = 'r'
>11354	PrimaryExpression	'r'
>11355	ArrayIndexing	cam_buf [ strlen ( m_name ) - 2 ]
>11356	AdditiveExpression	strlen ( m_name ) - 2
>11357	PrimaryExpression	2
>11358	CallExpression	strlen ( m_name )
>11359	ArgumentList	m_name
>11360	Argument	m_name
>11361	Identifier	m_name
>11362	Callee	strlen
>11363	Identifier	strlen
>11364	Identifier	cam_buf
>11365	ExpressionStatement	 
>11366	AssignmentExpr	cam_buf [ strlen ( m_name ) - 3 ] = 't'
>11367	PrimaryExpression	't'
>11368	ArrayIndexing	cam_buf [ strlen ( m_name ) - 3 ]
>11369	AdditiveExpression	strlen ( m_name ) - 3
>11370	PrimaryExpression	3
>11371	CallExpression	strlen ( m_name )
>11372	ArgumentList	m_name
>11373	Argument	m_name
>11374	Identifier	m_name
>11375	Callee	strlen
>11376	Identifier	strlen
>11377	Identifier	cam_buf
>11378	ExpressionStatement	 
>11379	CallExpression	strcpy ( cam_buf , m_name )
>11380	ArgumentList	cam_buf
>11381	Argument	m_name
>11382	Identifier	m_name
>11383	Argument	cam_buf
>11384	Identifier	cam_buf
>11385	Callee	strcpy
>11386	Identifier	strcpy
>11387	IdentifierDeclStatement	 
>11388	IdentifierDecl	cam_buf [ 256 ]
>11389	PrimaryExpression	256
>11390	Identifier	cam_buf
>11391	IdentifierDeclType	char [ 256 ]
>11424	FunctionDef	ImageData 
>11425	ParameterList	 
>11426	ReturnType	void
>11427	CompoundStatement	 
>11428	ExpressionStatement	 
>11429	CallExpression	fclose ( f )
>11430	ArgumentList	f
>11431	Argument	f
>11432	Identifier	f
>11433	Callee	fclose
>11434	Identifier	fclose
>11435	ExpressionStatement	 
>11436	CallExpression	fprintf ( f , \"%0.8e %0.8e %0.8e\n\" , m_camera . m_t [ 0 ] , m_camera . m_t [ 1 ] , m_camera . m_t [ 2 ] )
>11437	ArgumentList	f
>11438	Argument	m_camera . m_t [ 2 ]
>11439	ArrayIndexing	m_camera . m_t [ 2 ]
>11440	PrimaryExpression	2
>11441	MemberAccess	m_camera . m_t
>11442	Identifier	m_t
>11443	Identifier	m_camera
>11444	Argument	m_camera . m_t [ 1 ]
>11445	ArrayIndexing	m_camera . m_t [ 1 ]
>11446	PrimaryExpression	1
>11447	MemberAccess	m_camera . m_t
>11448	Identifier	m_t
>11449	Identifier	m_camera
>11450	Argument	m_camera . m_t [ 0 ]
>11451	ArrayIndexing	m_camera . m_t [ 0 ]
>11452	PrimaryExpression	0
>11453	MemberAccess	m_camera . m_t
>11454	Identifier	m_t
>11455	Identifier	m_camera
>11456	Argument	\"%0.8e %0.8e %0.8e\n\"
>11457	PrimaryExpression	\"%0.8e %0.8e %0.8e\n\"
>11458	Argument	f
>11459	Identifier	f
>11460	Callee	fprintf
>11461	Identifier	fprintf
>11462	ExpressionStatement	 
>11463	CallExpression	fprintf ( f , \"%0.8e %0.8e %0.8e\n\" , m_camera . m_R [ 6 ] , m_camera . m_R [ 7 ] , m_camera . m_R [ 8 ] )
>11464	ArgumentList	f
>11465	Argument	m_camera . m_R [ 8 ]
>11466	ArrayIndexing	m_camera . m_R [ 8 ]
>11467	PrimaryExpression	8
>11468	MemberAccess	m_camera . m_R
>11469	Identifier	m_R
>11470	Identifier	m_camera
>11471	Argument	m_camera . m_R [ 7 ]
>11472	ArrayIndexing	m_camera . m_R [ 7 ]
>11473	PrimaryExpression	7
>11474	MemberAccess	m_camera . m_R
>11475	Identifier	m_R
>11476	Identifier	m_camera
>11477	Argument	m_camera . m_R [ 6 ]
>11478	ArrayIndexing	m_camera . m_R [ 6 ]
>11479	PrimaryExpression	6
>11480	MemberAccess	m_camera . m_R
>11481	Identifier	m_R
>11482	Identifier	m_camera
>11483	Argument	\"%0.8e %0.8e %0.8e\n\"
>11484	PrimaryExpression	\"%0.8e %0.8e %0.8e\n\"
>11485	Argument	f
>11486	Identifier	f
>11487	Callee	fprintf
>11488	Identifier	fprintf
>11489	ExpressionStatement	 
>11490	CallExpression	fprintf ( f , \"%0.8e %0.8e %0.8e\n\" , m_camera . m_R [ 3 ] , m_camera . m_R [ 4 ] , m_camera . m_R [ 5 ] )
>11491	ArgumentList	f
>11492	Argument	m_camera . m_R [ 5 ]
>11493	ArrayIndexing	m_camera . m_R [ 5 ]
>11494	PrimaryExpression	5
>11495	MemberAccess	m_camera . m_R
>11496	Identifier	m_R
>11497	Identifier	m_camera
>11498	Argument	m_camera . m_R [ 4 ]
>11499	ArrayIndexing	m_camera . m_R [ 4 ]
>11500	PrimaryExpression	4
>11501	MemberAccess	m_camera . m_R
>11502	Identifier	m_R
>11503	Identifier	m_camera
>11504	Argument	m_camera . m_R [ 3 ]
>11505	ArrayIndexing	m_camera . m_R [ 3 ]
>11506	PrimaryExpression	3
>11507	MemberAccess	m_camera . m_R
>11508	Identifier	m_R
>11509	Identifier	m_camera
>11510	Argument	\"%0.8e %0.8e %0.8e\n\"
>11511	PrimaryExpression	\"%0.8e %0.8e %0.8e\n\"
>11512	Argument	f
>11513	Identifier	f
>11514	Callee	fprintf
>11515	Identifier	fprintf
>11516	ExpressionStatement	 
>11517	CallExpression	fprintf ( f , \"%0.8e %0.8e %0.8e\n\" , m_camera . m_R [ 0 ] , m_camera . m_R [ 1 ] , m_camera . m_R [ 2 ] )
>11518	ArgumentList	f
>11519	Argument	m_camera . m_R [ 2 ]
>11520	ArrayIndexing	m_camera . m_R [ 2 ]
>11521	PrimaryExpression	2
>11522	MemberAccess	m_camera . m_R
>11523	Identifier	m_R
>11524	Identifier	m_camera
>11525	Argument	m_camera . m_R [ 1 ]
>11526	ArrayIndexing	m_camera . m_R [ 1 ]
>11527	PrimaryExpression	1
>11528	MemberAccess	m_camera . m_R
>11529	Identifier	m_R
>11530	Identifier	m_camera
>11531	Argument	m_camera . m_R [ 0 ]
>11532	ArrayIndexing	m_camera . m_R [ 0 ]
>11533	PrimaryExpression	0
>11534	MemberAccess	m_camera . m_R
>11535	Identifier	m_R
>11536	Identifier	m_camera
>11537	Argument	\"%0.8e %0.8e %0.8e\n\"
>11538	PrimaryExpression	\"%0.8e %0.8e %0.8e\n\"
>11539	Argument	f
>11540	Identifier	f
>11541	Callee	fprintf
>11542	Identifier	fprintf
>11543	ExpressionStatement	 
>11544	CallExpression	fprintf ( f , \"%0.8e %0.8e %0.8e\n\" , m_camera . m_focal , m_camera . m_k [ 0 ] , m_camera . m_k [ 1 ] )
>11545	ArgumentList	f
>11546	Argument	m_camera . m_k [ 1 ]
>11547	ArrayIndexing	m_camera . m_k [ 1 ]
>11548	PrimaryExpression	1
>11549	MemberAccess	m_camera . m_k
>11550	Identifier	m_k
>11551	Identifier	m_camera
>11552	Argument	m_camera . m_k [ 0 ]
>11553	ArrayIndexing	m_camera . m_k [ 0 ]
>11554	PrimaryExpression	0
>11555	MemberAccess	m_camera . m_k
>11556	Identifier	m_k
>11557	Identifier	m_camera
>11558	Argument	m_camera . m_focal
>11559	MemberAccess	m_camera . m_focal
>11560	Identifier	m_focal
>11561	Identifier	m_camera
>11562	Argument	\"%0.8e %0.8e %0.8e\n\"
>11563	PrimaryExpression	\"%0.8e %0.8e %0.8e\n\"
>11564	Argument	f
>11565	Identifier	f
>11566	Callee	fprintf
>11567	Identifier	fprintf
>11568	IfStatement	if ( f == NULL )
>11569	CompoundStatement	 
>11570	ReturnStatement	 
>11571	ExpressionStatement	 
>11572	CallExpression	printf ( \"[ImageData
>11573	ArgumentList	\"[ImageData
>11574	Argument	cam_buf
>11575	Identifier	cam_buf
>11576	Argument	\"[ImageData
>11577	PrimaryExpression	\"[ImageData
>11578	Callee	printf
>11579	Identifier	printf
>11580	Condition	 
>11581	EqualityExpression	f == NULL
>11582	Identifier	NULL
>11583	Identifier	f
>11584	IdentifierDeclStatement	 
>11585	IdentifierDecl	* f = fopen ( cam_buf , \"w\" )
>11586	AssignmentExpr	* f = fopen ( cam_buf , \"w\" )
>11587	CallExpression	fopen ( cam_buf , \"w\" )
>11588	ArgumentList	cam_buf
>11589	Argument	\"w\"
>11590	PrimaryExpression	\"w\"
>11591	Argument	cam_buf
>11592	Identifier	cam_buf
>11593	Callee	fopen
>11594	Identifier	fopen
>11595	Identifier	f
>11596	Identifier	f
>11597	IdentifierDeclType	FILE *
>11598	ExpressionStatement	 
>11599	AssignmentExpr	cam_buf [ strlen ( m_name ) - 1 ] = 'm'
>11600	PrimaryExpression	'm'
>11601	ArrayIndexing	cam_buf [ strlen ( m_name ) - 1 ]
>11602	AdditiveExpression	strlen ( m_name ) - 1
>11603	PrimaryExpression	1
>11604	CallExpression	strlen ( m_name )
>11605	ArgumentList	m_name
>11606	Argument	m_name
>11607	Identifier	m_name
>11608	Callee	strlen
>11609	Identifier	strlen
>11610	Identifier	cam_buf
>11611	ExpressionStatement	 
>11612	AssignmentExpr	cam_buf [ strlen ( m_name ) - 2 ] = 'a'
>11613	PrimaryExpression	'a'
>11614	ArrayIndexing	cam_buf [ strlen ( m_name ) - 2 ]
>11615	AdditiveExpression	strlen ( m_name ) - 2
>11616	PrimaryExpression	2
>11617	CallExpression	strlen ( m_name )
>11618	ArgumentList	m_name
>11619	Argument	m_name
>11620	Identifier	m_name
>11621	Callee	strlen
>11622	Identifier	strlen
>11623	Identifier	cam_buf
>11624	ExpressionStatement	 
>11625	AssignmentExpr	cam_buf [ strlen ( m_name ) - 3 ] = 'c'
>11626	PrimaryExpression	'c'
>11627	ArrayIndexing	cam_buf [ strlen ( m_name ) - 3 ]
>11628	AdditiveExpression	strlen ( m_name ) - 3
>11629	PrimaryExpression	3
>11630	CallExpression	strlen ( m_name )
>11631	ArgumentList	m_name
>11632	Argument	m_name
>11633	Identifier	m_name
>11634	Callee	strlen
>11635	Identifier	strlen
>11636	Identifier	cam_buf
>11637	ExpressionStatement	 
>11638	CallExpression	strcpy ( cam_buf , m_name )
>11639	ArgumentList	cam_buf
>11640	Argument	m_name
>11641	Identifier	m_name
>11642	Argument	cam_buf
>11643	Identifier	cam_buf
>11644	Callee	strcpy
>11645	Identifier	strcpy
>11646	IdentifierDeclStatement	 
>11647	IdentifierDecl	cam_buf [ 256 ]
>11648	PrimaryExpression	256
>11649	Identifier	cam_buf
>11650	IdentifierDeclType	char [ 256 ]
>11671	FunctionDef	ImageData 
>11672	ParameterList	FILE * f
>11673	Parameter	 
>11674	Identifier	f
>11675	ParameterType	FILE *
>11676	ReturnType	void
>11677	CompoundStatement	 
>11678	ExpressionStatement	 
>11679	CallExpression	fprintf ( f , \"%s</camera>\n\" , spacer )
>11680	ArgumentList	f
>11681	Argument	spacer
>11682	Identifier	spacer
>11683	Argument	\"%s</camera>\n\"
>11684	PrimaryExpression	\"%s</camera>\n\"
>11685	Argument	f
>11686	Identifier	f
>11687	Callee	fprintf
>11688	Identifier	fprintf
>11689	IfStatement	if ( t0 < 0.0 || t1 < 0.0 || t2 < 0.0 || t3 < 0.0 )
>11690	ElseStatement	else
>11691	CompoundStatement	 
>11692	ExpressionStatement	 
>11693	CallExpression	fprintf ( f , \"%s  <p4> %0.6e %0.6e %0.6e </p4>\n\" , spacer , isect [ 9 ] , isect [ 10 ] , isect [ 11 ] )
>11694	ArgumentList	f
>11695	Argument	isect [ 11 ]
>11696	ArrayIndexing	isect [ 11 ]
>11697	PrimaryExpression	11
>11698	Identifier	isect
>11699	Argument	isect [ 10 ]
>11700	ArrayIndexing	isect [ 10 ]
>11701	PrimaryExpression	10
>11702	Identifier	isect
>11703	Argument	isect [ 9 ]
>11704	ArrayIndexing	isect [ 9 ]
>11705	PrimaryExpression	9
>11706	Identifier	isect
>11707	Argument	spacer
>11708	Identifier	spacer
>11709	Argument	\"%s  <p4> %0.6e %0.6e %0.6e </p4>\n\"
>11710	PrimaryExpression	\"%s  <p4> %0.6e %0.6e %0.6e </p4>\n\"
>11711	Argument	f
>11712	Identifier	f
>11713	Callee	fprintf
>11714	Identifier	fprintf
>11715	ExpressionStatement	 
>11716	CallExpression	fprintf ( f , \"%s  <p3> %0.6e %0.6e %0.6e </p3>\n\" , spacer , isect [ 6 ] , isect [ 7 ] , isect [ 8 ] )
>11717	ArgumentList	f
>11718	Argument	isect [ 8 ]
>11719	ArrayIndexing	isect [ 8 ]
>11720	PrimaryExpression	8
>11721	Identifier	isect
>11722	Argument	isect [ 7 ]
>11723	ArrayIndexing	isect [ 7 ]
>11724	PrimaryExpression	7
>11725	Identifier	isect
>11726	Argument	isect [ 6 ]
>11727	ArrayIndexing	isect [ 6 ]
>11728	PrimaryExpression	6
>11729	Identifier	isect
>11730	Argument	spacer
>11731	Identifier	spacer
>11732	Argument	\"%s  <p3> %0.6e %0.6e %0.6e </p3>\n\"
>11733	PrimaryExpression	\"%s  <p3> %0.6e %0.6e %0.6e </p3>\n\"
>11734	Argument	f
>11735	Identifier	f
>11736	Callee	fprintf
>11737	Identifier	fprintf
>11738	ExpressionStatement	 
>11739	CallExpression	fprintf ( f , \"%s  <p2> %0.6e %0.6e %0.6e </p2>\n\" , spacer , isect [ 3 ] , isect [ 4 ] , isect [ 5 ] )
>11740	ArgumentList	f
>11741	Argument	isect [ 5 ]
>11742	ArrayIndexing	isect [ 5 ]
>11743	PrimaryExpression	5
>11744	Identifier	isect
>11745	Argument	isect [ 4 ]
>11746	ArrayIndexing	isect [ 4 ]
>11747	PrimaryExpression	4
>11748	Identifier	isect
>11749	Argument	isect [ 3 ]
>11750	ArrayIndexing	isect [ 3 ]
>11751	PrimaryExpression	3
>11752	Identifier	isect
>11753	Argument	spacer
>11754	Identifier	spacer
>11755	Argument	\"%s  <p2> %0.6e %0.6e %0.6e </p2>\n\"
>11756	PrimaryExpression	\"%s  <p2> %0.6e %0.6e %0.6e </p2>\n\"
>11757	Argument	f
>11758	Identifier	f
>11759	Callee	fprintf
>11760	Identifier	fprintf
>11761	ExpressionStatement	 
>11762	CallExpression	fprintf ( f , \"%s  <p1> %0.6e %0.6e %0.6e </p1>\n\" , spacer , isect [ 0 ] , isect [ 1 ] , isect [ 2 ] )
>11763	ArgumentList	f
>11764	Argument	isect [ 2 ]
>11765	ArrayIndexing	isect [ 2 ]
>11766	PrimaryExpression	2
>11767	Identifier	isect
>11768	Argument	isect [ 1 ]
>11769	ArrayIndexing	isect [ 1 ]
>11770	PrimaryExpression	1
>11771	Identifier	isect
>11772	Argument	isect [ 0 ]
>11773	ArrayIndexing	isect [ 0 ]
>11774	PrimaryExpression	0
>11775	Identifier	isect
>11776	Argument	spacer
>11777	Identifier	spacer
>11778	Argument	\"%s  <p1> %0.6e %0.6e %0.6e </p1>\n\"
>11779	PrimaryExpression	\"%s  <p1> %0.6e %0.6e %0.6e </p1>\n\"
>11780	Argument	f
>11781	Identifier	f
>11782	Callee	fprintf
>11783	Identifier	fprintf
>11784	CompoundStatement	 
>11785	ExpressionStatement	 
>11786	CallExpression	fprintf ( f , \"%s  <p4> 0.0 0.0 0.0 </p4>\n\" , spacer )
>11787	ArgumentList	f
>11788	Argument	spacer
>11789	Identifier	spacer
>11790	Argument	\"%s  <p4> 0.0 0.0 0.0 </p4>\n\"
>11791	PrimaryExpression	\"%s  <p4> 0.0 0.0 0.0 </p4>\n\"
>11792	Argument	f
>11793	Identifier	f
>11794	Callee	fprintf
>11795	Identifier	fprintf
>11796	ExpressionStatement	 
>11797	CallExpression	fprintf ( f , \"%s  <p3> 0.0 0.0 0.0 </p3>\n\" , spacer )
>11798	ArgumentList	f
>11799	Argument	spacer
>11800	Identifier	spacer
>11801	Argument	\"%s  <p3> 0.0 0.0 0.0 </p3>\n\"
>11802	PrimaryExpression	\"%s  <p3> 0.0 0.0 0.0 </p3>\n\"
>11803	Argument	f
>11804	Identifier	f
>11805	Callee	fprintf
>11806	Identifier	fprintf
>11807	ExpressionStatement	 
>11808	CallExpression	fprintf ( f , \"%s  <p2> 0.0 0.0 0.0 </p2>\n\" , spacer )
>11809	ArgumentList	f
>11810	Argument	spacer
>11811	Identifier	spacer
>11812	Argument	\"%s  <p2> 0.0 0.0 0.0 </p2>\n\"
>11813	PrimaryExpression	\"%s  <p2> 0.0 0.0 0.0 </p2>\n\"
>11814	Argument	f
>11815	Identifier	f
>11816	Callee	fprintf
>11817	Identifier	fprintf
>11818	ExpressionStatement	 
>11819	CallExpression	fprintf ( f , \"%s  <p1> 0.0 0.0 0.0 </p1>\n\" , spacer )
>11820	ArgumentList	f
>11821	Argument	spacer
>11822	Identifier	spacer
>11823	Argument	\"%s  <p1> 0.0 0.0 0.0 </p1>\n\"
>11824	PrimaryExpression	\"%s  <p1> 0.0 0.0 0.0 </p1>\n\"
>11825	Argument	f
>11826	Identifier	f
>11827	Callee	fprintf
>11828	Identifier	fprintf
>11829	Condition	 
>11830	OrExpression	t0 < 0.0 || t1 < 0.0 || t2 < 0.0 || t3 < 0.0
>11831	OrExpression	t1 < 0.0 || t2 < 0.0 || t3 < 0.0
>11832	OrExpression	t2 < 0.0 || t3 < 0.0
>11833	RelationalExpression	t3 < 0.0
>11834	PrimaryExpression	0.0
>11835	Identifier	t3
>11836	RelationalExpression	t2 < 0.0
>11837	PrimaryExpression	0.0
>11838	Identifier	t2
>11839	RelationalExpression	t1 < 0.0
>11840	PrimaryExpression	0.0
>11841	Identifier	t1
>11842	RelationalExpression	t0 < 0.0
>11843	PrimaryExpression	0.0
>11844	Identifier	t0
>11845	IdentifierDeclStatement	 
>11846	IdentifierDecl	t3 = m_fit_plane . IntersectRay ( eye , ray_world + 9 , isect + 9 )
>11847	AssignmentExpr	t3 = m_fit_plane . IntersectRay ( eye , ray_world + 9 , isect + 9 )
>11848	CallExpression	m_fit_plane . IntersectRay ( eye , ray_world + 9 , isect + 9 )
>11849	ArgumentList	eye
>11850	Argument	isect + 9
>11851	AdditiveExpression	isect + 9
>11852	PrimaryExpression	9
>11853	Identifier	isect
>11854	Argument	ray_world + 9
>11855	AdditiveExpression	ray_world + 9
>11856	PrimaryExpression	9
>11857	Identifier	ray_world
>11858	Argument	eye
>11859	Identifier	eye
>11860	Callee	m_fit_plane . IntersectRay
>11861	MemberAccess	m_fit_plane . IntersectRay
>11862	Identifier	IntersectRay
>11863	Identifier	m_fit_plane
>11864	Identifier	t3
>11865	Identifier	t3
>11866	IdentifierDeclType	double
>11867	IdentifierDeclStatement	 
>11868	IdentifierDecl	t2 = m_fit_plane . IntersectRay ( eye , ray_world + 6 , isect + 6 )
>11869	AssignmentExpr	t2 = m_fit_plane . IntersectRay ( eye , ray_world + 6 , isect + 6 )
>11870	CallExpression	m_fit_plane . IntersectRay ( eye , ray_world + 6 , isect + 6 )
>11871	ArgumentList	eye
>11872	Argument	isect + 6
>11873	AdditiveExpression	isect + 6
>11874	PrimaryExpression	6
>11875	Identifier	isect
>11876	Argument	ray_world + 6
>11877	AdditiveExpression	ray_world + 6
>11878	PrimaryExpression	6
>11879	Identifier	ray_world
>11880	Argument	eye
>11881	Identifier	eye
>11882	Callee	m_fit_plane . IntersectRay
>11883	MemberAccess	m_fit_plane . IntersectRay
>11884	Identifier	IntersectRay
>11885	Identifier	m_fit_plane
>11886	Identifier	t2
>11887	Identifier	t2
>11888	IdentifierDeclType	double
>11889	IdentifierDeclStatement	 
>11890	IdentifierDecl	t1 = m_fit_plane . IntersectRay ( eye , ray_world + 3 , isect + 3 )
>11891	AssignmentExpr	t1 = m_fit_plane . IntersectRay ( eye , ray_world + 3 , isect + 3 )
>11892	CallExpression	m_fit_plane . IntersectRay ( eye , ray_world + 3 , isect + 3 )
>11893	ArgumentList	eye
>11894	Argument	isect + 3
>11895	AdditiveExpression	isect + 3
>11896	PrimaryExpression	3
>11897	Identifier	isect
>11898	Argument	ray_world + 3
>11899	AdditiveExpression	ray_world + 3
>11900	PrimaryExpression	3
>11901	Identifier	ray_world
>11902	Argument	eye
>11903	Identifier	eye
>11904	Callee	m_fit_plane . IntersectRay
>11905	MemberAccess	m_fit_plane . IntersectRay
>11906	Identifier	IntersectRay
>11907	Identifier	m_fit_plane
>11908	Identifier	t1
>11909	Identifier	t1
>11910	IdentifierDeclType	double
>11911	IdentifierDeclStatement	 
>11912	IdentifierDecl	t0 = m_fit_plane . IntersectRay ( eye , ray_world + 0 , isect + 0 )
>11913	AssignmentExpr	t0 = m_fit_plane . IntersectRay ( eye , ray_world + 0 , isect + 0 )
>11914	CallExpression	m_fit_plane . IntersectRay ( eye , ray_world + 0 , isect + 0 )
>11915	ArgumentList	eye
>11916	Argument	isect + 0
>11917	AdditiveExpression	isect + 0
>11918	PrimaryExpression	0
>11919	Identifier	isect
>11920	Argument	ray_world + 0
>11921	AdditiveExpression	ray_world + 0
>11922	PrimaryExpression	0
>11923	Identifier	ray_world
>11924	Argument	eye
>11925	Identifier	eye
>11926	Callee	m_fit_plane . IntersectRay
>11927	MemberAccess	m_fit_plane . IntersectRay
>11928	Identifier	IntersectRay
>11929	Identifier	m_fit_plane
>11930	Identifier	t0
>11931	Identifier	t0
>11932	IdentifierDeclType	double
>11933	IdentifierDeclStatement	 
>11934	IdentifierDecl	isect [ 18 ]
>11935	PrimaryExpression	18
>11936	Identifier	isect
>11937	IdentifierDeclType	double [ 18 ]
>11938	ExpressionStatement	 
>11939	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , ray4 , ray_world + 9 )
>11940	ArgumentList	3
>11941	Argument	ray_world + 9
>11942	AdditiveExpression	ray_world + 9
>11943	PrimaryExpression	9
>11944	Identifier	ray_world
>11945	Argument	ray4
>11946	Identifier	ray4
>11947	Argument	R
>11948	Identifier	R
>11949	Argument	1
>11950	PrimaryExpression	1
>11951	Argument	3
>11952	PrimaryExpression	3
>11953	Argument	3
>11954	PrimaryExpression	3
>11955	Argument	3
>11956	PrimaryExpression	3
>11957	Callee	matrix_product
>11958	Identifier	matrix_product
>11959	ExpressionStatement	 
>11960	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , ray3 , ray_world + 6 )
>11961	ArgumentList	3
>11962	Argument	ray_world + 6
>11963	AdditiveExpression	ray_world + 6
>11964	PrimaryExpression	6
>11965	Identifier	ray_world
>11966	Argument	ray3
>11967	Identifier	ray3
>11968	Argument	R
>11969	Identifier	R
>11970	Argument	1
>11971	PrimaryExpression	1
>11972	Argument	3
>11973	PrimaryExpression	3
>11974	Argument	3
>11975	PrimaryExpression	3
>11976	Argument	3
>11977	PrimaryExpression	3
>11978	Callee	matrix_product
>11979	Identifier	matrix_product
>11980	ExpressionStatement	 
>11981	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , ray2 , ray_world + 3 )
>11982	ArgumentList	3
>11983	Argument	ray_world + 3
>11984	AdditiveExpression	ray_world + 3
>11985	PrimaryExpression	3
>11986	Identifier	ray_world
>11987	Argument	ray2
>11988	Identifier	ray2
>11989	Argument	R
>11990	Identifier	R
>11991	Argument	1
>11992	PrimaryExpression	1
>11993	Argument	3
>11994	PrimaryExpression	3
>11995	Argument	3
>11996	PrimaryExpression	3
>11997	Argument	3
>11998	PrimaryExpression	3
>11999	Callee	matrix_product
>12000	Identifier	matrix_product
>12001	ExpressionStatement	 
>12002	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , ray1 , ray_world + 0 )
>12003	ArgumentList	3
>12004	Argument	ray_world + 0
>12005	AdditiveExpression	ray_world + 0
>12006	PrimaryExpression	0
>12007	Identifier	ray_world
>12008	Argument	ray1
>12009	Identifier	ray1
>12010	Argument	R
>12011	Identifier	R
>12012	Argument	1
>12013	PrimaryExpression	1
>12014	Argument	3
>12015	PrimaryExpression	3
>12016	Argument	3
>12017	PrimaryExpression	3
>12018	Argument	3
>12019	PrimaryExpression	3
>12020	Callee	matrix_product
>12021	Identifier	matrix_product
>12022	ExpressionStatement	 
>12023	CallExpression	m_camera . GetPose ( R )
>12024	ArgumentList	R
>12025	Argument	R
>12026	Identifier	R
>12027	Callee	m_camera . GetPose
>12028	MemberAccess	m_camera . GetPose
>12029	Identifier	GetPose
>12030	Identifier	m_camera
>12031	IdentifierDeclStatement	 
>12032	IdentifierDecl	R [ 9 ]
>12033	PrimaryExpression	9
>12034	Identifier	R
>12035	IdentifierDeclType	double [ 9 ]
>12036	IdentifierDeclStatement	 
>12037	IdentifierDecl	ray_world [ 18 ]
>12038	PrimaryExpression	18
>12039	Identifier	ray_world
>12040	IdentifierDeclType	double [ 18 ]
>12041	IdentifierDeclStatement	 
>12042	IdentifierDecl	ray4 [ 3 ] = { 0.5 * w , 0.5 * h , - m_camera . m_focal }
>12043	AssignmentExpr	ray4 [ 3 ] = { 0.5 * w , 0.5 * h , - m_camera . m_focal }
>12044	InitializerList	0.5 * w
>12045	UnaryOp	- m_camera . m_focal
>12046	MemberAccess	m_camera . m_focal
>12047	Identifier	m_focal
>12048	Identifier	m_camera
>12049	UnaryOperator	-
>12050	MultiplicativeExpression	0.5 * h
>12051	Identifier	h
>12052	PrimaryExpression	0.5
>12053	MultiplicativeExpression	0.5 * w
>12054	Identifier	w
>12055	PrimaryExpression	0.5
>12056	Identifier	ray4
>12057	PrimaryExpression	3
>12058	Identifier	ray4
>12059	IdentifierDeclType	double [ 3 ]
>12060	IdentifierDeclStatement	 
>12061	IdentifierDecl	ray3 [ 3 ] = { - 0.5 * w , 0.5 * h , - m_camera . m_focal }
>12062	AssignmentExpr	ray3 [ 3 ] = { - 0.5 * w , 0.5 * h , - m_camera . m_focal }
>12063	InitializerList	- 0.5 * w
>12064	UnaryOp	- m_camera . m_focal
>12065	MemberAccess	m_camera . m_focal
>12066	Identifier	m_focal
>12067	Identifier	m_camera
>12068	UnaryOperator	-
>12069	MultiplicativeExpression	0.5 * h
>12070	Identifier	h
>12071	PrimaryExpression	0.5
>12072	MultiplicativeExpression	- 0.5 * w
>12073	Identifier	w
>12074	UnaryOp	- 0.5
>12075	PrimaryExpression	0.5
>12076	UnaryOperator	-
>12077	Identifier	ray3
>12078	PrimaryExpression	3
>12079	Identifier	ray3
>12080	IdentifierDeclType	double [ 3 ]
>12081	IdentifierDeclStatement	 
>12082	IdentifierDecl	ray2 [ 3 ] = { 0.5 * w , - 0.5 * h , - m_camera . m_focal }
>12083	AssignmentExpr	ray2 [ 3 ] = { 0.5 * w , - 0.5 * h , - m_camera . m_focal }
>12084	InitializerList	0.5 * w
>12085	UnaryOp	- m_camera . m_focal
>12086	MemberAccess	m_camera . m_focal
>12087	Identifier	m_focal
>12088	Identifier	m_camera
>12089	UnaryOperator	-
>12090	MultiplicativeExpression	- 0.5 * h
>12091	Identifier	h
>12092	UnaryOp	- 0.5
>12093	PrimaryExpression	0.5
>12094	UnaryOperator	-
>12095	MultiplicativeExpression	0.5 * w
>12096	Identifier	w
>12097	PrimaryExpression	0.5
>12098	Identifier	ray2
>12099	PrimaryExpression	3
>12100	Identifier	ray2
>12101	IdentifierDeclType	double [ 3 ]
>12102	IdentifierDeclStatement	 
>12103	IdentifierDecl	ray1 [ 3 ] = { - 0.5 * w , - 0.5 * h , - m_camera . m_focal }
>12104	AssignmentExpr	ray1 [ 3 ] = { - 0.5 * w , - 0.5 * h , - m_camera . m_focal }
>12105	InitializerList	- 0.5 * w
>12106	UnaryOp	- m_camera . m_focal
>12107	MemberAccess	m_camera . m_focal
>12108	Identifier	m_focal
>12109	Identifier	m_camera
>12110	UnaryOperator	-
>12111	MultiplicativeExpression	- 0.5 * h
>12112	Identifier	h
>12113	UnaryOp	- 0.5
>12114	PrimaryExpression	0.5
>12115	UnaryOperator	-
>12116	MultiplicativeExpression	- 0.5 * w
>12117	Identifier	w
>12118	UnaryOp	- 0.5
>12119	PrimaryExpression	0.5
>12120	UnaryOperator	-
>12121	Identifier	ray1
>12122	PrimaryExpression	3
>12123	Identifier	ray1
>12124	IdentifierDeclType	double [ 3 ]
>12125	IdentifierDeclStatement	 
>12126	IdentifierDecl	h = GetHeight ( )
>12127	AssignmentExpr	h = GetHeight ( )
>12128	CallExpression	GetHeight ( )
>12129	ArgumentList	 
>12130	Callee	GetHeight
>12131	Identifier	GetHeight
>12132	Identifier	h
>12133	Identifier	h
>12134	IdentifierDeclType	int
>12135	IdentifierDeclStatement	 
>12136	IdentifierDecl	w = GetWidth ( )
>12137	AssignmentExpr	w = GetWidth ( )
>12138	CallExpression	GetWidth ( )
>12139	ArgumentList	 
>12140	Callee	GetWidth
>12141	Identifier	GetWidth
>12142	Identifier	w
>12143	Identifier	w
>12144	IdentifierDeclType	int
>12145	ExpressionStatement	 
>12146	CallExpression	m_camera . GetPosition ( eye )
>12147	ArgumentList	eye
>12148	Argument	eye
>12149	Identifier	eye
>12150	Callee	m_camera . GetPosition
>12151	MemberAccess	m_camera . GetPosition
>12152	Identifier	GetPosition
>12153	Identifier	m_camera
>12154	IdentifierDeclStatement	 
>12155	IdentifierDecl	eye [ 3 ]
>12156	PrimaryExpression	3
>12157	Identifier	eye
>12158	IdentifierDeclType	double [ 3 ]
>12159	ExpressionStatement	 
>12160	CallExpression	m_camera . WriteXML ( f )
>12161	ArgumentList	f
>12162	Argument	f
>12163	Identifier	f
>12164	Callee	m_camera . WriteXML
>12165	MemberAccess	m_camera . WriteXML
>12166	Identifier	WriteXML
>12167	Identifier	m_camera
>12168	IfStatement	if ( ! m_camera . m_adjusted )
>12169	CompoundStatement	 
>12170	ReturnStatement	 
>12171	ExpressionStatement	 
>12172	CallExpression	fprintf ( f , \"%s</camera>\n\" , spacer )
>12173	ArgumentList	f
>12174	Argument	spacer
>12175	Identifier	spacer
>12176	Argument	\"%s</camera>\n\"
>12177	PrimaryExpression	\"%s</camera>\n\"
>12178	Argument	f
>12179	Identifier	f
>12180	Callee	fprintf
>12181	Identifier	fprintf
>12182	Condition	 
>12183	UnaryOp	! m_camera . m_adjusted
>12184	MemberAccess	m_camera . m_adjusted
>12185	Identifier	m_adjusted
>12186	Identifier	m_camera
>12187	UnaryOperator	!
>12188	ExpressionStatement	 
>12189	CallExpression	fprintf ( f , \"%s  <perms> %d </perms>\n\" , spacer , m_licensed ? 1 
>12190	ArgumentList	f
>12191	Argument	m_licensed ? 1 
>12192	ConditionalExpression	m_licensed ? 1 
>12193	PrimaryExpression	0
>12194	PrimaryExpression	1
>12195	Condition	m_licensed
>12196	Identifier	m_licensed
>12197	Argument	spacer
>12198	Identifier	spacer
>12199	Argument	\"%s  <perms> %d </perms>\n\"
>12200	PrimaryExpression	\"%s  <perms> %d </perms>\n\"
>12201	Argument	f
>12202	Identifier	f
>12203	Callee	fprintf
>12204	Identifier	fprintf
>12205	ExpressionStatement	 
>12206	CallExpression	fprintf ( f , \"%s  <takenOn> %s </takenOn>\n\" , spacer , \"\" )
>12207	ArgumentList	f
>12208	Argument	\"\"
>12209	PrimaryExpression	\"\"
>12210	Argument	spacer
>12211	Identifier	spacer
>12212	Argument	\"%s  <takenOn> %s </takenOn>\n\"
>12213	PrimaryExpression	\"%s  <takenOn> %s </takenOn>\n\"
>12214	Argument	f
>12215	Identifier	f
>12216	Callee	fprintf
>12217	Identifier	fprintf
>12218	ExpressionStatement	 
>12219	CallExpression	fprintf ( f , \"%s  <takenBy> %s </takenBy>\n\" , spacer , \"\" )
>12220	ArgumentList	f
>12221	Argument	\"\"
>12222	PrimaryExpression	\"\"
>12223	Argument	spacer
>12224	Identifier	spacer
>12225	Argument	\"%s  <takenBy> %s </takenBy>\n\"
>12226	PrimaryExpression	\"%s  <takenBy> %s </takenBy>\n\"
>12227	Argument	f
>12228	Identifier	f
>12229	Callee	fprintf
>12230	Identifier	fprintf
>12231	ExpressionStatement	 
>12232	CallExpression	fprintf ( f , \"%s  <title> %s </title>\n\" , spacer , \"\" )
>12233	ArgumentList	f
>12234	Argument	\"\"
>12235	PrimaryExpression	\"\"
>12236	Argument	spacer
>12237	Identifier	spacer
>12238	Argument	\"%s  <title> %s </title>\n\"
>12239	PrimaryExpression	\"%s  <title> %s </title>\n\"
>12240	Argument	f
>12241	Identifier	f
>12242	Callee	fprintf
>12243	Identifier	fprintf
>12244	ExpressionStatement	 
>12245	CallExpression	fprintf ( f , \"%s  <flickr> %s </flickr>\n\" , spacer , flickr_url )
>12246	ArgumentList	f
>12247	Argument	flickr_url
>12248	Identifier	flickr_url
>12249	Argument	spacer
>12250	Identifier	spacer
>12251	Argument	\"%s  <flickr> %s </flickr>\n\"
>12252	PrimaryExpression	\"%s  <flickr> %s </flickr>\n\"
>12253	Argument	f
>12254	Identifier	f
>12255	Callee	fprintf
>12256	Identifier	fprintf
>12257	ExpressionStatement	 
>12258	CallExpression	fprintf ( f , \"%s  <name> %s </name>\n\" , spacer , jpeg_buf )
>12259	ArgumentList	f
>12260	Argument	jpeg_buf
>12261	Identifier	jpeg_buf
>12262	Argument	spacer
>12263	Identifier	spacer
>12264	Argument	\"%s  <name> %s </name>\n\"
>12265	PrimaryExpression	\"%s  <name> %s </name>\n\"
>12266	Argument	f
>12267	Identifier	f
>12268	Callee	fprintf
>12269	Identifier	fprintf
>12270	ExpressionStatement	 
>12271	CallExpression	sprintf ( flickr_url , \"http
>12272	ArgumentList	flickr_url
>12273	Argument	m_flickr_index
>12274	Identifier	m_flickr_index
>12275	Argument	m_user_name
>12276	Identifier	m_user_name
>12277	Argument	\"http
>12278	PrimaryExpression	\"http
>12279	Argument	flickr_url
>12280	Identifier	flickr_url
>12281	Callee	sprintf
>12282	Identifier	sprintf
>12283	IdentifierDeclStatement	 
>12284	IdentifierDecl	flickr_url [ 1024 ]
>12285	PrimaryExpression	1024
>12286	Identifier	flickr_url
>12287	IdentifierDeclType	char [ 1024 ]
>12288	ExpressionStatement	 
>12289	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 1 ] = 'g'
>12290	PrimaryExpression	'g'
>12291	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 1 ]
>12292	AdditiveExpression	strlen ( m_name ) - 1
>12293	PrimaryExpression	1
>12294	CallExpression	strlen ( m_name )
>12295	ArgumentList	m_name
>12296	Argument	m_name
>12297	Identifier	m_name
>12298	Callee	strlen
>12299	Identifier	strlen
>12300	Identifier	jpeg_buf
>12301	ExpressionStatement	 
>12302	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 2 ] = 'p'
>12303	PrimaryExpression	'p'
>12304	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 2 ]
>12305	AdditiveExpression	strlen ( m_name ) - 2
>12306	PrimaryExpression	2
>12307	CallExpression	strlen ( m_name )
>12308	ArgumentList	m_name
>12309	Argument	m_name
>12310	Identifier	m_name
>12311	Callee	strlen
>12312	Identifier	strlen
>12313	Identifier	jpeg_buf
>12314	ExpressionStatement	 
>12315	AssignmentExpr	jpeg_buf [ strlen ( m_name ) - 3 ] = 'j'
>12316	PrimaryExpression	'j'
>12317	ArrayIndexing	jpeg_buf [ strlen ( m_name ) - 3 ]
>12318	AdditiveExpression	strlen ( m_name ) - 3
>12319	PrimaryExpression	3
>12320	CallExpression	strlen ( m_name )
>12321	ArgumentList	m_name
>12322	Argument	m_name
>12323	Identifier	m_name
>12324	Callee	strlen
>12325	Identifier	strlen
>12326	Identifier	jpeg_buf
>12327	ExpressionStatement	 
>12328	CallExpression	strcpy ( jpeg_buf , m_name )
>12329	ArgumentList	jpeg_buf
>12330	Argument	m_name
>12331	Identifier	m_name
>12332	Argument	jpeg_buf
>12333	Identifier	jpeg_buf
>12334	Callee	strcpy
>12335	Identifier	strcpy
>12336	IdentifierDeclStatement	 
>12337	IdentifierDecl	jpeg_buf [ 256 ]
>12338	PrimaryExpression	256
>12339	Identifier	jpeg_buf
>12340	IdentifierDeclType	char [ 256 ]
>12341	ExpressionStatement	 
>12342	CallExpression	fprintf ( f , \"%s  <adj> %d </adj>\n\" , spacer , m_camera . m_adjusted ? 1 
>12343	ArgumentList	f
>12344	Argument	m_camera . m_adjusted ? 1 
>12345	ConditionalExpression	m_camera . m_adjusted ? 1 
>12346	PrimaryExpression	0
>12347	PrimaryExpression	1
>12348	Condition	m_camera . m_adjusted
>12349	MemberAccess	m_camera . m_adjusted
>12350	Identifier	m_adjusted
>12351	Identifier	m_camera
>12352	Argument	spacer
>12353	Identifier	spacer
>12354	Argument	\"%s  <adj> %d </adj>\n\"
>12355	PrimaryExpression	\"%s  <adj> %d </adj>\n\"
>12356	Argument	f
>12357	Identifier	f
>12358	Callee	fprintf
>12359	Identifier	fprintf
>12360	ExpressionStatement	 
>12361	CallExpression	fprintf ( f , \"%s  <w> %d </w>\n%s  <h> %d </h>\n\" , spacer , GetWidth ( ) , spacer , GetHeight ( ) )
>12362	ArgumentList	f
>12363	Argument	GetHeight ( )
>12364	CallExpression	GetHeight ( )
>12365	ArgumentList	 
>12366	Callee	GetHeight
>12367	Identifier	GetHeight
>12368	Argument	spacer
>12369	Identifier	spacer
>12370	Argument	GetWidth ( )
>12371	CallExpression	GetWidth ( )
>12372	ArgumentList	 
>12373	Callee	GetWidth
>12374	Identifier	GetWidth
>12375	Argument	spacer
>12376	Identifier	spacer
>12377	Argument	\"%s  <w> %d </w>\n%s  <h> %d </h>\n\"
>12378	PrimaryExpression	\"%s  <w> %d </w>\n%s  <h> %d </h>\n\"
>12379	Argument	f
>12380	Identifier	f
>12381	Callee	fprintf
>12382	Identifier	fprintf
>12383	ExpressionStatement	 
>12384	CallExpression	fprintf ( f , \"%s<camera>\n\" , spacer )
>12385	ArgumentList	f
>12386	Argument	spacer
>12387	Identifier	spacer
>12388	Argument	\"%s<camera>\n\"
>12389	PrimaryExpression	\"%s<camera>\n\"
>12390	Argument	f
>12391	Identifier	f
>12392	Callee	fprintf
>12393	Identifier	fprintf
>12394	IdentifierDeclStatement	 
>12395	IdentifierDecl	* spacer = \"  \"
>12396	AssignmentExpr	* spacer = \"  \"
>12397	PrimaryExpression	\"  \"
>12398	Identifier	spacer
>12399	Identifier	spacer
>12400	IdentifierDeclType	char *
>12401	Statement	 
>12438	FunctionDef	ImageData 
>12439	ParameterList	 
>12440	ReturnType	void
>12441	CompoundStatement	 
>12442	ExpressionStatement	 
>12443	CallExpression	fclose ( f )
>12444	ArgumentList	f
>12445	Argument	f
>12446	Identifier	f
>12447	Callee	fclose
>12448	Identifier	fclose
>12449	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>12450	IfStatement	if ( m_keys [ i ] . m_extra != - 1 )
>12451	ExpressionStatement	 
>12452	CallExpression	fprintf ( f , \"%d %d\n\" , i , m_keys [ i ] . m_extra )
>12453	ArgumentList	f
>12454	Argument	m_keys [ i ] . m_extra
>12455	MemberAccess	m_keys [ i ] . m_extra
>12456	Identifier	m_extra
>12457	ArrayIndexing	m_keys [ i ]
>12458	Identifier	i
>12459	Identifier	m_keys
>12460	Argument	i
>12461	Identifier	i
>12462	Argument	\"%d %d\n\"
>12463	PrimaryExpression	\"%d %d\n\"
>12464	Argument	f
>12465	Identifier	f
>12466	Callee	fprintf
>12467	Identifier	fprintf
>12468	Condition	 
>12469	EqualityExpression	m_keys [ i ] . m_extra != - 1
>12470	UnaryOp	- 1
>12471	PrimaryExpression	1
>12472	UnaryOperator	-
>12473	MemberAccess	m_keys [ i ] . m_extra
>12474	Identifier	m_extra
>12475	ArrayIndexing	m_keys [ i ]
>12476	Identifier	i
>12477	Identifier	m_keys
>12478	IncDecOp	 
>12479	IncDec	++
>12480	Identifier	i
>12481	Condition	 
>12482	RelationalExpression	i < num_keys
>12483	Identifier	num_keys
>12484	Identifier	i
>12485	ForInit	 
>12486	IdentifierDeclStatement	int i = 0 ;
>12487	IdentifierDecl	i = 0
>12488	AssignmentExpr	i = 0
>12489	PrimaryExpression	0
>12490	Identifier	i
>12491	Identifier	i
>12492	IdentifierDeclType	int
>12493	ExpressionStatement	 
>12494	CallExpression	fprintf ( f , \"%d\n\" , num_tracks )
>12495	ArgumentList	f
>12496	Argument	num_tracks
>12497	Identifier	num_tracks
>12498	Argument	\"%d\n\"
>12499	PrimaryExpression	\"%d\n\"
>12500	Argument	f
>12501	Identifier	f
>12502	Callee	fprintf
>12503	Identifier	fprintf
>12504	ForStatement	for ( int i = 0 ; i < num_keys ; i ++ )
>12505	IfStatement	if ( m_keys [ i ] . m_extra != - 1 )
>12506	ExpressionStatement	 
>12507	IncDecOp	num_tracks ++
>12508	IncDec	++
>12509	Identifier	num_tracks
>12510	Condition	 
>12511	EqualityExpression	m_keys [ i ] . m_extra != - 1
>12512	UnaryOp	- 1
>12513	PrimaryExpression	1
>12514	UnaryOperator	-
>12515	MemberAccess	m_keys [ i ] . m_extra
>12516	Identifier	m_extra
>12517	ArrayIndexing	m_keys [ i ]
>12518	Identifier	i
>12519	Identifier	m_keys
>12520	IncDecOp	 
>12521	IncDec	++
>12522	Identifier	i
>12523	Condition	 
>12524	RelationalExpression	i < num_keys
>12525	Identifier	num_keys
>12526	Identifier	i
>12527	ForInit	 
>12528	IdentifierDeclStatement	int i = 0 ;
>12529	IdentifierDecl	i = 0
>12530	AssignmentExpr	i = 0
>12531	PrimaryExpression	0
>12532	Identifier	i
>12533	Identifier	i
>12534	IdentifierDeclType	int
>12535	IdentifierDeclStatement	 
>12536	IdentifierDecl	num_tracks = 0
>12537	AssignmentExpr	num_tracks = 0
>12538	PrimaryExpression	0
>12539	Identifier	num_tracks
>12540	Identifier	num_tracks
>12541	IdentifierDeclType	int
>12542	IdentifierDeclStatement	 
>12543	IdentifierDecl	num_keys = ( int ) m_keys . size ( )
>12544	AssignmentExpr	num_keys = ( int ) m_keys . size ( )
>12545	CastExpression	( int ) m_keys . size ( )
>12546	CallExpression	m_keys . size ( )
>12547	ArgumentList	 
>12548	Callee	m_keys . size
>12549	MemberAccess	m_keys . size
>12550	Identifier	size
>12551	Identifier	m_keys
>12552	CastTarget	int
>12553	Identifier	num_keys
>12554	Identifier	num_keys
>12555	IdentifierDeclType	int
>12556	IfStatement	if ( f == NULL )
>12557	CompoundStatement	 
>12558	ReturnStatement	 
>12559	ExpressionStatement	 
>12560	CallExpression	printf ( \"[ImageData
>12561	ArgumentList	\"[ImageData
>12562	Argument	cam_buf
>12563	Identifier	cam_buf
>12564	Argument	\"[ImageData
>12565	PrimaryExpression	\"[ImageData
>12566	Callee	printf
>12567	Identifier	printf
>12568	Condition	 
>12569	EqualityExpression	f == NULL
>12570	Identifier	NULL
>12571	Identifier	f
>12572	IdentifierDeclStatement	 
>12573	IdentifierDecl	* f = fopen ( cam_buf , \"w\" )
>12574	AssignmentExpr	* f = fopen ( cam_buf , \"w\" )
>12575	CallExpression	fopen ( cam_buf , \"w\" )
>12576	ArgumentList	cam_buf
>12577	Argument	\"w\"
>12578	PrimaryExpression	\"w\"
>12579	Argument	cam_buf
>12580	Identifier	cam_buf
>12581	Callee	fopen
>12582	Identifier	fopen
>12583	Identifier	f
>12584	Identifier	f
>12585	IdentifierDeclType	FILE *
>12586	ExpressionStatement	 
>12587	AssignmentExpr	cam_buf [ strlen ( m_name ) - 1 ] = 'k'
>12588	PrimaryExpression	'k'
>12589	ArrayIndexing	cam_buf [ strlen ( m_name ) - 1 ]
>12590	AdditiveExpression	strlen ( m_name ) - 1
>12591	PrimaryExpression	1
>12592	CallExpression	strlen ( m_name )
>12593	ArgumentList	m_name
>12594	Argument	m_name
>12595	Identifier	m_name
>12596	Callee	strlen
>12597	Identifier	strlen
>12598	Identifier	cam_buf
>12599	ExpressionStatement	 
>12600	AssignmentExpr	cam_buf [ strlen ( m_name ) - 2 ] = 'r'
>12601	PrimaryExpression	'r'
>12602	ArrayIndexing	cam_buf [ strlen ( m_name ) - 2 ]
>12603	AdditiveExpression	strlen ( m_name ) - 2
>12604	PrimaryExpression	2
>12605	CallExpression	strlen ( m_name )
>12606	ArgumentList	m_name
>12607	Argument	m_name
>12608	Identifier	m_name
>12609	Callee	strlen
>12610	Identifier	strlen
>12611	Identifier	cam_buf
>12612	ExpressionStatement	 
>12613	AssignmentExpr	cam_buf [ strlen ( m_name ) - 3 ] = 't'
>12614	PrimaryExpression	't'
>12615	ArrayIndexing	cam_buf [ strlen ( m_name ) - 3 ]
>12616	AdditiveExpression	strlen ( m_name ) - 3
>12617	PrimaryExpression	3
>12618	CallExpression	strlen ( m_name )
>12619	ArgumentList	m_name
>12620	Argument	m_name
>12621	Identifier	m_name
>12622	Callee	strlen
>12623	Identifier	strlen
>12624	Identifier	cam_buf
>12625	ExpressionStatement	 
>12626	CallExpression	strcpy ( cam_buf , m_name )
>12627	ArgumentList	cam_buf
>12628	Argument	m_name
>12629	Identifier	m_name
>12630	Argument	cam_buf
>12631	Identifier	cam_buf
>12632	Callee	strcpy
>12633	Identifier	strcpy
>12634	IdentifierDeclStatement	 
>12635	IdentifierDecl	cam_buf [ 256 ]
>12636	PrimaryExpression	256
>12637	Identifier	cam_buf
>12638	IdentifierDeclType	char [ 256 ]
>12658	FunctionDef	ImageData 
>12659	ParameterList	 
>12660	ReturnType	void
>12661	CompoundStatement	 
>12662	ExpressionStatement	 
>12663	CallExpression	fclose ( f )
>12664	ArgumentList	f
>12665	Argument	f
>12666	Identifier	f
>12667	Callee	fclose
>12668	Identifier	fclose
>12669	ExpressionStatement	 
>12670	CallExpression	fscanf ( f , \"%d
>12671	ArgumentList	f
>12672	Argument	& ( m_date . m_second )
>12673	UnaryOp	& ( m_date . m_second )
>12674	MemberAccess	m_date . m_second
>12675	Identifier	m_second
>12676	Identifier	m_date
>12677	UnaryOperator	&
>12678	Argument	& ( m_date . m_minute )
>12679	UnaryOp	& ( m_date . m_minute )
>12680	MemberAccess	m_date . m_minute
>12681	Identifier	m_minute
>12682	Identifier	m_date
>12683	UnaryOperator	&
>12684	Argument	& ( m_date . m_hour )
>12685	UnaryOp	& ( m_date . m_hour )
>12686	MemberAccess	m_date . m_hour
>12687	Identifier	m_hour
>12688	Identifier	m_date
>12689	UnaryOperator	&
>12690	Argument	& ( m_date . m_day )
>12691	UnaryOp	& ( m_date . m_day )
>12692	MemberAccess	m_date . m_day
>12693	Identifier	m_day
>12694	Identifier	m_date
>12695	UnaryOperator	&
>12696	Argument	& ( m_date . m_month )
>12697	UnaryOp	& ( m_date . m_month )
>12698	MemberAccess	m_date . m_month
>12699	Identifier	m_month
>12700	Identifier	m_date
>12701	UnaryOperator	&
>12702	Argument	& ( m_date . m_year )
>12703	UnaryOp	& ( m_date . m_year )
>12704	MemberAccess	m_date . m_year
>12705	Identifier	m_year
>12706	Identifier	m_date
>12707	UnaryOperator	&
>12708	Argument	\"%d
>12709	PrimaryExpression	\"%d
>12710	Argument	f
>12711	Identifier	f
>12712	Callee	fscanf
>12713	Identifier	fscanf
>12714	ExpressionStatement	 
>12715	CallExpression	strcpy ( m_user_name , buf )
>12716	ArgumentList	m_user_name
>12717	Argument	buf
>12718	Identifier	buf
>12719	Argument	m_user_name
>12720	Identifier	m_user_name
>12721	Callee	strcpy
>12722	Identifier	strcpy
>12723	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\r' )
>12724	ExpressionStatement	 
>12725	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>12726	PrimaryExpression	0
>12727	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12728	AdditiveExpression	strlen ( buf ) - 1
>12729	PrimaryExpression	1
>12730	CallExpression	strlen ( buf )
>12731	ArgumentList	buf
>12732	Argument	buf
>12733	Identifier	buf
>12734	Callee	strlen
>12735	Identifier	strlen
>12736	Identifier	buf
>12737	Condition	 
>12738	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\r'
>12739	PrimaryExpression	'\r'
>12740	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12741	AdditiveExpression	strlen ( buf ) - 1
>12742	PrimaryExpression	1
>12743	CallExpression	strlen ( buf )
>12744	ArgumentList	buf
>12745	Argument	buf
>12746	Identifier	buf
>12747	Callee	strlen
>12748	Identifier	strlen
>12749	Identifier	buf
>12750	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>12751	ExpressionStatement	 
>12752	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>12753	PrimaryExpression	0
>12754	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12755	AdditiveExpression	strlen ( buf ) - 1
>12756	PrimaryExpression	1
>12757	CallExpression	strlen ( buf )
>12758	ArgumentList	buf
>12759	Argument	buf
>12760	Identifier	buf
>12761	Callee	strlen
>12762	Identifier	strlen
>12763	Identifier	buf
>12764	Condition	 
>12765	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>12766	PrimaryExpression	'\n'
>12767	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12768	AdditiveExpression	strlen ( buf ) - 1
>12769	PrimaryExpression	1
>12770	CallExpression	strlen ( buf )
>12771	ArgumentList	buf
>12772	Argument	buf
>12773	Identifier	buf
>12774	Callee	strlen
>12775	Identifier	strlen
>12776	Identifier	buf
>12777	ExpressionStatement	 
>12778	CallExpression	fgets ( buf , 256 , f )
>12779	ArgumentList	buf
>12780	Argument	f
>12781	Identifier	f
>12782	Argument	256
>12783	PrimaryExpression	256
>12784	Argument	buf
>12785	Identifier	buf
>12786	Callee	fgets
>12787	Identifier	fgets
>12788	ExpressionStatement	 
>12789	AssignmentExpr	m_real_name = strdup ( buf )
>12790	CallExpression	strdup ( buf )
>12791	ArgumentList	buf
>12792	Argument	buf
>12793	Identifier	buf
>12794	Callee	strdup
>12795	Identifier	strdup
>12796	Identifier	m_real_name
>12797	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\r' )
>12798	ExpressionStatement	 
>12799	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>12800	PrimaryExpression	0
>12801	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12802	AdditiveExpression	strlen ( buf ) - 1
>12803	PrimaryExpression	1
>12804	CallExpression	strlen ( buf )
>12805	ArgumentList	buf
>12806	Argument	buf
>12807	Identifier	buf
>12808	Callee	strlen
>12809	Identifier	strlen
>12810	Identifier	buf
>12811	Condition	 
>12812	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\r'
>12813	PrimaryExpression	'\r'
>12814	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12815	AdditiveExpression	strlen ( buf ) - 1
>12816	PrimaryExpression	1
>12817	CallExpression	strlen ( buf )
>12818	ArgumentList	buf
>12819	Argument	buf
>12820	Identifier	buf
>12821	Callee	strlen
>12822	Identifier	strlen
>12823	Identifier	buf
>12824	IfStatement	if ( buf [ strlen ( buf ) - 1 ] == '\n' )
>12825	ExpressionStatement	 
>12826	AssignmentExpr	buf [ strlen ( buf ) - 1 ] = 0
>12827	PrimaryExpression	0
>12828	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12829	AdditiveExpression	strlen ( buf ) - 1
>12830	PrimaryExpression	1
>12831	CallExpression	strlen ( buf )
>12832	ArgumentList	buf
>12833	Argument	buf
>12834	Identifier	buf
>12835	Callee	strlen
>12836	Identifier	strlen
>12837	Identifier	buf
>12838	Condition	 
>12839	EqualityExpression	buf [ strlen ( buf ) - 1 ] == '\n'
>12840	PrimaryExpression	'\n'
>12841	ArrayIndexing	buf [ strlen ( buf ) - 1 ]
>12842	AdditiveExpression	strlen ( buf ) - 1
>12843	PrimaryExpression	1
>12844	CallExpression	strlen ( buf )
>12845	ArgumentList	buf
>12846	Argument	buf
>12847	Identifier	buf
>12848	Callee	strlen
>12849	Identifier	strlen
>12850	Identifier	buf
>12851	ExpressionStatement	 
>12852	CallExpression	fgets ( buf , 256 , f )
>12853	ArgumentList	buf
>12854	Argument	f
>12855	Identifier	f
>12856	Argument	256
>12857	PrimaryExpression	256
>12858	Argument	buf
>12859	Identifier	buf
>12860	Callee	fgets
>12861	Identifier	fgets
>12862	IdentifierDeclStatement	 
>12863	IdentifierDecl	buf [ 256 ]
>12864	PrimaryExpression	256
>12865	Identifier	buf
>12866	IdentifierDeclType	char [ 256 ]
>12867	IfStatement	if ( f == NULL )
>12868	ReturnStatement	 
>12869	Condition	 
>12870	EqualityExpression	f == NULL
>12871	Identifier	NULL
>12872	Identifier	f
>12873	IdentifierDeclStatement	 
>12874	IdentifierDecl	* f = fopen ( meta_buf , \"r\" )
>12875	AssignmentExpr	* f = fopen ( meta_buf , \"r\" )
>12876	CallExpression	fopen ( meta_buf , \"r\" )
>12877	ArgumentList	meta_buf
>12878	Argument	\"r\"
>12879	PrimaryExpression	\"r\"
>12880	Argument	meta_buf
>12881	Identifier	meta_buf
>12882	Callee	fopen
>12883	Identifier	fopen
>12884	Identifier	f
>12885	Identifier	f
>12886	IdentifierDeclType	FILE *
>12887	ExpressionStatement	 
>12888	AssignmentExpr	meta_buf [ strlen ( m_name ) - 1 ] = 't'
>12889	PrimaryExpression	't'
>12890	ArrayIndexing	meta_buf [ strlen ( m_name ) - 1 ]
>12891	AdditiveExpression	strlen ( m_name ) - 1
>12892	PrimaryExpression	1
>12893	CallExpression	strlen ( m_name )
>12894	ArgumentList	m_name
>12895	Argument	m_name
>12896	Identifier	m_name
>12897	Callee	strlen
>12898	Identifier	strlen
>12899	Identifier	meta_buf
>12900	ExpressionStatement	 
>12901	AssignmentExpr	meta_buf [ strlen ( m_name ) - 2 ] = 'e'
>12902	PrimaryExpression	'e'
>12903	ArrayIndexing	meta_buf [ strlen ( m_name ) - 2 ]
>12904	AdditiveExpression	strlen ( m_name ) - 2
>12905	PrimaryExpression	2
>12906	CallExpression	strlen ( m_name )
>12907	ArgumentList	m_name
>12908	Argument	m_name
>12909	Identifier	m_name
>12910	Callee	strlen
>12911	Identifier	strlen
>12912	Identifier	meta_buf
>12913	ExpressionStatement	 
>12914	AssignmentExpr	meta_buf [ strlen ( m_name ) - 3 ] = 'm'
>12915	PrimaryExpression	'm'
>12916	ArrayIndexing	meta_buf [ strlen ( m_name ) - 3 ]
>12917	AdditiveExpression	strlen ( m_name ) - 3
>12918	PrimaryExpression	3
>12919	CallExpression	strlen ( m_name )
>12920	ArgumentList	m_name
>12921	Argument	m_name
>12922	Identifier	m_name
>12923	Callee	strlen
>12924	Identifier	strlen
>12925	Identifier	meta_buf
>12926	ExpressionStatement	 
>12927	CallExpression	strcpy ( meta_buf , m_name )
>12928	ArgumentList	meta_buf
>12929	Argument	m_name
>12930	Identifier	m_name
>12931	Argument	meta_buf
>12932	Identifier	meta_buf
>12933	Callee	strcpy
>12934	Identifier	strcpy
>12935	IdentifierDeclStatement	 
>12936	IdentifierDecl	meta_buf [ 256 ]
>12937	PrimaryExpression	256
>12938	Identifier	meta_buf
>12939	IdentifierDeclType	char [ 256 ]
>12964	FunctionDef	ImageData 
>12965	ParameterList	 
>12966	ReturnType	std 
>12967	CompoundStatement	 
>12968	ReturnStatement	 
>12969	Identifier	notes
>12970	ForStatement	for ( int i = 0 ; i < num_notes ; i ++ )
>12971	CompoundStatement	 
>12972	ExpressionStatement	 
>12973	CallExpression	notes . push_back ( note )
>12974	ArgumentList	note
>12975	Argument	note
>12976	Identifier	note
>12977	Callee	notes . push_back
>12978	MemberAccess	notes . push_back
>12979	Identifier	push_back
>12980	Identifier	notes
>12981	ExpressionStatement	 
>12982	CallExpression	note . Read ( f , ( double ) GetWidth ( ) , ( double ) GetHeight ( ) )
>12983	ArgumentList	f
>12984	Argument	( double ) GetHeight ( )
>12985	CastExpression	( double ) GetHeight ( )
>12986	CallExpression	GetHeight ( )
>12987	ArgumentList	 
>12988	Callee	GetHeight
>12989	Identifier	GetHeight
>12990	CastTarget	double
>12991	Argument	( double ) GetWidth ( )
>12992	CastExpression	( double ) GetWidth ( )
>12993	CallExpression	GetWidth ( )
>12994	ArgumentList	 
>12995	Callee	GetWidth
>12996	Identifier	GetWidth
>12997	CastTarget	double
>12998	Argument	f
>12999	Identifier	f
>13000	Callee	note . Read
>13001	MemberAccess	note . Read
>13002	Identifier	Read
>13003	Identifier	note
>13004	IdentifierDeclStatement	 
>13005	IdentifierDecl	note
>13006	Identifier	note
>13007	IdentifierDeclType	ImageNote
>13008	IncDecOp	 
>13009	IncDec	++
>13010	Identifier	i
>13011	Condition	 
>13012	RelationalExpression	i < num_notes
>13013	Identifier	num_notes
>13014	Identifier	i
>13015	ForInit	 
>13016	IdentifierDeclStatement	int i = 0 ;
>13017	IdentifierDecl	i = 0
>13018	AssignmentExpr	i = 0
>13019	PrimaryExpression	0
>13020	Identifier	i
>13021	Identifier	i
>13022	IdentifierDeclType	int
>13023	ExpressionStatement	 
>13024	CallExpression	fscanf ( f , \"%d\n\" , & num_notes )
>13025	ArgumentList	f
>13026	Argument	& num_notes
>13027	UnaryOp	& num_notes
>13028	Identifier	num_notes
>13029	UnaryOperator	&
>13030	Argument	\"%d\n\"
>13031	PrimaryExpression	\"%d\n\"
>13032	Argument	f
>13033	Identifier	f
>13034	Callee	fscanf
>13035	Identifier	fscanf
>13036	IdentifierDeclStatement	 
>13037	IdentifierDecl	num_notes
>13038	Identifier	num_notes
>13039	IdentifierDeclType	int
>13040	IfStatement	if ( f == NULL )
>13041	ReturnStatement	 
>13042	Identifier	notes
>13043	Condition	 
>13044	EqualityExpression	f == NULL
>13045	Identifier	NULL
>13046	Identifier	f
>13047	IdentifierDeclStatement	 
>13048	IdentifierDecl	notes
>13049	Identifier	notes
>13050	IdentifierDeclType	std 
>13051	IdentifierDeclStatement	 
>13052	IdentifierDecl	* f = fopen ( note_buf , \"r\" )
>13053	AssignmentExpr	* f = fopen ( note_buf , \"r\" )
>13054	CallExpression	fopen ( note_buf , \"r\" )
>13055	ArgumentList	note_buf
>13056	Argument	\"r\"
>13057	PrimaryExpression	\"r\"
>13058	Argument	note_buf
>13059	Identifier	note_buf
>13060	Callee	fopen
>13061	Identifier	fopen
>13062	Identifier	f
>13063	Identifier	f
>13064	IdentifierDeclType	FILE *
>13065	ExpressionStatement	 
>13066	AssignmentExpr	note_buf [ strlen ( m_name ) - 1 ] = 't'
>13067	PrimaryExpression	't'
>13068	ArrayIndexing	note_buf [ strlen ( m_name ) - 1 ]
>13069	AdditiveExpression	strlen ( m_name ) - 1
>13070	PrimaryExpression	1
>13071	CallExpression	strlen ( m_name )
>13072	ArgumentList	m_name
>13073	Argument	m_name
>13074	Identifier	m_name
>13075	Callee	strlen
>13076	Identifier	strlen
>13077	Identifier	note_buf
>13078	ExpressionStatement	 
>13079	AssignmentExpr	note_buf [ strlen ( m_name ) - 2 ] = 'o'
>13080	PrimaryExpression	'o'
>13081	ArrayIndexing	note_buf [ strlen ( m_name ) - 2 ]
>13082	AdditiveExpression	strlen ( m_name ) - 2
>13083	PrimaryExpression	2
>13084	CallExpression	strlen ( m_name )
>13085	ArgumentList	m_name
>13086	Argument	m_name
>13087	Identifier	m_name
>13088	Callee	strlen
>13089	Identifier	strlen
>13090	Identifier	note_buf
>13091	ExpressionStatement	 
>13092	AssignmentExpr	note_buf [ strlen ( m_name ) - 3 ] = 'n'
>13093	PrimaryExpression	'n'
>13094	ArrayIndexing	note_buf [ strlen ( m_name ) - 3 ]
>13095	AdditiveExpression	strlen ( m_name ) - 3
>13096	PrimaryExpression	3
>13097	CallExpression	strlen ( m_name )
>13098	ArgumentList	m_name
>13099	Argument	m_name
>13100	Identifier	m_name
>13101	Callee	strlen
>13102	Identifier	strlen
>13103	Identifier	note_buf
>13104	ExpressionStatement	 
>13105	CallExpression	strcpy ( note_buf , m_name )
>13106	ArgumentList	note_buf
>13107	Argument	m_name
>13108	Identifier	m_name
>13109	Argument	note_buf
>13110	Identifier	note_buf
>13111	Callee	strcpy
>13112	Identifier	strcpy
>13113	IdentifierDeclStatement	 
>13114	IdentifierDecl	note_buf [ 256 ]
>13115	PrimaryExpression	256
>13116	Identifier	note_buf
>13117	IdentifierDeclType	char [ 256 ]
>13136	FunctionDef	ImageData 
>13137	ParameterList	const std 
>13138	Parameter	 
>13139	Identifier	pts_plane
>13140	ParameterType	std 
>13141	Parameter	 
>13142	Identifier	pts_world
>13143	ParameterType	std 
>13144	Parameter	 
>13145	Identifier	pt_data
>13146	ParameterType	const std 
>13147	ReturnType	void
>13148	CompoundStatement	 
>13149	ExpressionStatement	 
>13150	AssignmentExpr	m_dist_pts_plane = pts_plane
>13151	Identifier	pts_plane
>13152	Identifier	m_dist_pts_plane
>13153	ExpressionStatement	 
>13154	AssignmentExpr	m_dist_pts_world = pts_world
>13155	Identifier	pts_world
>13156	Identifier	m_dist_pts_world
>13157	ExpressionStatement	 
>13158	Identifier	grid
>13159	Statement	 
>13160	Statement	 
>13161	Statement	 
>13162	ForStatement	for ( int i = 0 ; i < GRID_SIZE * GRID_SIZE ; i ++ )
>13163	CompoundStatement	 
>13164	ExpressionStatement	 
>13165	CallExpression	pts_plane . push_back ( DPoint3 ( isect ) )
>13166	ArgumentList	DPoint3 ( isect )
>13167	Argument	DPoint3 ( isect )
>13168	CallExpression	DPoint3 ( isect )
>13169	ArgumentList	isect
>13170	Argument	isect
>13171	Identifier	isect
>13172	Callee	DPoint3
>13173	Identifier	DPoint3
>13174	Callee	pts_plane . push_back
>13175	MemberAccess	pts_plane . push_back
>13176	Identifier	push_back
>13177	Identifier	pts_plane
>13178	ExpressionStatement	 
>13179	CallExpression	m_fit_plane . IntersectRay ( eye , ray , isect )
>13180	ArgumentList	eye
>13181	Argument	isect
>13182	Identifier	isect
>13183	Argument	ray
>13184	Identifier	ray
>13185	Argument	eye
>13186	Identifier	eye
>13187	Callee	m_fit_plane . IntersectRay
>13188	MemberAccess	m_fit_plane . IntersectRay
>13189	Identifier	IntersectRay
>13190	Identifier	m_fit_plane
>13191	IdentifierDeclStatement	 
>13192	IdentifierDecl	isect [ 3 ]
>13193	PrimaryExpression	3
>13194	Identifier	isect
>13195	IdentifierDeclType	double [ 3 ]
>13196	ExpressionStatement	 
>13197	CallExpression	m_camera . PixelToCameraRayAbsolute ( proj [ 0 ] , proj [ 1 ] , ray )
>13198	ArgumentList	proj [ 0 ]
>13199	Argument	ray
>13200	Identifier	ray
>13201	Argument	proj [ 1 ]
>13202	ArrayIndexing	proj [ 1 ]
>13203	PrimaryExpression	1
>13204	Identifier	proj
>13205	Argument	proj [ 0 ]
>13206	ArrayIndexing	proj [ 0 ]
>13207	PrimaryExpression	0
>13208	Identifier	proj
>13209	Callee	m_camera . PixelToCameraRayAbsolute
>13210	MemberAccess	m_camera . PixelToCameraRayAbsolute
>13211	Identifier	PixelToCameraRayAbsolute
>13212	Identifier	m_camera
>13213	IdentifierDeclStatement	 
>13214	IdentifierDecl	ray [ 3 ]
>13215	PrimaryExpression	3
>13216	Identifier	ray
>13217	IdentifierDeclType	double [ 3 ]
>13218	ExpressionStatement	 
>13219	CallExpression	m_camera . Project ( pt_data [ pt_idx ] . m_pos , proj )
>13220	ArgumentList	pt_data [ pt_idx ] . m_pos
>13221	Argument	proj
>13222	Identifier	proj
>13223	Argument	pt_data [ pt_idx ] . m_pos
>13224	MemberAccess	pt_data [ pt_idx ] . m_pos
>13225	Identifier	m_pos
>13226	ArrayIndexing	pt_data [ pt_idx ]
>13227	Identifier	pt_idx
>13228	Identifier	pt_data
>13229	Callee	m_camera . Project
>13230	MemberAccess	m_camera . Project
>13231	Identifier	Project
>13232	Identifier	m_camera
>13233	IdentifierDeclStatement	 
>13234	IdentifierDecl	proj [ 2 ]
>13235	PrimaryExpression	2
>13236	Identifier	proj
>13237	IdentifierDeclType	double [ 2 ]
>13238	ExpressionStatement	 
>13239	CallExpression	pts_world . push_back ( DPoint3 ( pt_data [ pt_idx ] . m_pos ) )
>13240	ArgumentList	DPoint3 ( pt_data [ pt_idx ] . m_pos )
>13241	Argument	DPoint3 ( pt_data [ pt_idx ] . m_pos )
>13242	CallExpression	DPoint3 ( pt_data [ pt_idx ] . m_pos )
>13243	ArgumentList	pt_data [ pt_idx ] . m_pos
>13244	Argument	pt_data [ pt_idx ] . m_pos
>13245	MemberAccess	pt_data [ pt_idx ] . m_pos
>13246	Identifier	m_pos
>13247	ArrayIndexing	pt_data [ pt_idx ]
>13248	Identifier	pt_idx
>13249	Identifier	pt_data
>13250	Callee	DPoint3
>13251	Identifier	DPoint3
>13252	Callee	pts_world . push_back
>13253	MemberAccess	pts_world . push_back
>13254	Identifier	push_back
>13255	Identifier	pts_world
>13256	IdentifierDeclStatement	 
>13257	IdentifierDecl	pt_idx = grid [ i ] [ bin_idx ]
>13258	AssignmentExpr	pt_idx = grid [ i ] [ bin_idx ]
>13259	ArrayIndexing	grid [ i ] [ bin_idx ]
>13260	Identifier	bin_idx
>13261	ArrayIndexing	grid [ i ]
>13262	Identifier	i
>13263	Identifier	grid
>13264	Identifier	pt_idx
>13265	Identifier	pt_idx
>13266	IdentifierDeclType	int
>13267	IdentifierDeclStatement	 
>13268	IdentifierDecl	bin_idx = rand ( ) % num_bin_points
>13269	AssignmentExpr	bin_idx = rand ( ) % num_bin_points
>13270	MultiplicativeExpression	rand ( ) % num_bin_points
>13271	Identifier	num_bin_points
>13272	CallExpression	rand ( )
>13273	ArgumentList	 
>13274	Callee	rand
>13275	Identifier	rand
>13276	Identifier	bin_idx
>13277	Identifier	bin_idx
>13278	IdentifierDeclType	int
>13279	IfStatement	if ( num_bin_points == 0 )
>13280	ContinueStatement	 
>13281	Condition	 
>13282	EqualityExpression	num_bin_points == 0
>13283	PrimaryExpression	0
>13284	Identifier	num_bin_points
>13285	IdentifierDeclStatement	 
>13286	IdentifierDecl	num_bin_points = ( int ) grid [ i ] . size ( )
>13287	AssignmentExpr	num_bin_points = ( int ) grid [ i ] . size ( )
>13288	CastExpression	( int ) grid [ i ] . size ( )
>13289	CallExpression	grid [ i ] . size ( )
>13290	ArgumentList	 
>13291	Callee	grid [ i ] . size
>13292	MemberAccess	grid [ i ] . size
>13293	Identifier	size
>13294	ArrayIndexing	grid [ i ]
>13295	Identifier	i
>13296	Identifier	grid
>13297	CastTarget	int
>13298	Identifier	num_bin_points
>13299	Identifier	num_bin_points
>13300	IdentifierDeclType	int
>13301	IncDecOp	 
>13302	IncDec	++
>13303	Identifier	i
>13304	Condition	 
>13305	RelationalExpression	i < GRID_SIZE * GRID_SIZE
>13306	MultiplicativeExpression	GRID_SIZE * GRID_SIZE
>13307	Identifier	GRID_SIZE
>13308	Identifier	GRID_SIZE
>13309	Identifier	i
>13310	ForInit	 
>13311	IdentifierDeclStatement	int i = 0 ;
>13312	IdentifierDecl	i = 0
>13313	AssignmentExpr	i = 0
>13314	PrimaryExpression	0
>13315	Identifier	i
>13316	Identifier	i
>13317	IdentifierDeclType	int
>13318	ExpressionStatement	 
>13319	CallExpression	m_camera . GetPosition ( eye )
>13320	ArgumentList	eye
>13321	Argument	eye
>13322	Identifier	eye
>13323	Callee	m_camera . GetPosition
>13324	MemberAccess	m_camera . GetPosition
>13325	Identifier	GetPosition
>13326	Identifier	m_camera
>13327	IdentifierDeclStatement	 
>13328	IdentifierDecl	eye [ 3 ]
>13329	PrimaryExpression	3
>13330	Identifier	eye
>13331	IdentifierDeclType	double [ 3 ]
>13332	ForStatement	for ( int i = 0 ; i < num_vis_points ; i ++ )
>13333	CompoundStatement	 
>13334	ExpressionStatement	 
>13335	CallExpression	grid [ g_y * GRID_SIZE + g_x ] . push_back ( idx )
>13336	ArgumentList	idx
>13337	Argument	idx
>13338	Identifier	idx
>13339	Callee	grid [ g_y * GRID_SIZE + g_x ] . push_back
>13340	MemberAccess	grid [ g_y * GRID_SIZE + g_x ] . push_back
>13341	Identifier	push_back
>13342	ArrayIndexing	grid [ g_y * GRID_SIZE + g_x ]
>13343	AdditiveExpression	g_y * GRID_SIZE + g_x
>13344	Identifier	g_x
>13345	MultiplicativeExpression	g_y * GRID_SIZE
>13346	Identifier	GRID_SIZE
>13347	Identifier	g_y
>13348	Identifier	grid
>13349	ExpressionStatement	 
>13350	CallExpression	assert ( g_x >= 0 && g_x < GRID_SIZE && g_y >= 0 && g_y < GRID_SIZE )
>13351	ArgumentList	g_x >= 0 && g_x < GRID_SIZE && g_y >= 0 && g_y < GRID_SIZE
>13352	Argument	g_x >= 0 && g_x < GRID_SIZE && g_y >= 0 && g_y < GRID_SIZE
>13353	AndExpression	g_x >= 0 && g_x < GRID_SIZE && g_y >= 0 && g_y < GRID_SIZE
>13354	AndExpression	g_x < GRID_SIZE && g_y >= 0 && g_y < GRID_SIZE
>13355	AndExpression	g_y >= 0 && g_y < GRID_SIZE
>13356	RelationalExpression	g_y < GRID_SIZE
>13357	Identifier	GRID_SIZE
>13358	Identifier	g_y
>13359	RelationalExpression	g_y >= 0
>13360	PrimaryExpression	0
>13361	Identifier	g_y
>13362	RelationalExpression	g_x < GRID_SIZE
>13363	Identifier	GRID_SIZE
>13364	Identifier	g_x
>13365	RelationalExpression	g_x >= 0
>13366	PrimaryExpression	0
>13367	Identifier	g_x
>13368	Callee	assert
>13369	Identifier	assert
>13370	IdentifierDeclStatement	 
>13371	IdentifierDecl	g_y = iround ( floor ( GRID_SIZE * proj [ 1 ] ) )
>13372	AssignmentExpr	g_y = iround ( floor ( GRID_SIZE * proj [ 1 ] ) )
>13373	CallExpression	iround ( floor ( GRID_SIZE * proj [ 1 ] ) )
>13374	ArgumentList	floor ( GRID_SIZE * proj [ 1 ] )
>13375	Argument	floor ( GRID_SIZE * proj [ 1 ] )
>13376	CallExpression	floor ( GRID_SIZE * proj [ 1 ] )
>13377	ArgumentList	GRID_SIZE * proj [ 1 ]
>13378	Argument	GRID_SIZE * proj [ 1 ]
>13379	MultiplicativeExpression	GRID_SIZE * proj [ 1 ]
>13380	ArrayIndexing	proj [ 1 ]
>13381	PrimaryExpression	1
>13382	Identifier	proj
>13383	Identifier	GRID_SIZE
>13384	Callee	floor
>13385	Identifier	floor
>13386	Callee	iround
>13387	Identifier	iround
>13388	Identifier	g_y
>13389	Identifier	g_y
>13390	IdentifierDeclType	int
>13391	IdentifierDeclStatement	 
>13392	IdentifierDecl	g_x = iround ( floor ( GRID_SIZE * proj [ 0 ] ) )
>13393	AssignmentExpr	g_x = iround ( floor ( GRID_SIZE * proj [ 0 ] ) )
>13394	CallExpression	iround ( floor ( GRID_SIZE * proj [ 0 ] ) )
>13395	ArgumentList	floor ( GRID_SIZE * proj [ 0 ] )
>13396	Argument	floor ( GRID_SIZE * proj [ 0 ] )
>13397	CallExpression	floor ( GRID_SIZE * proj [ 0 ] )
>13398	ArgumentList	GRID_SIZE * proj [ 0 ]
>13399	Argument	GRID_SIZE * proj [ 0 ]
>13400	MultiplicativeExpression	GRID_SIZE * proj [ 0 ]
>13401	ArrayIndexing	proj [ 0 ]
>13402	PrimaryExpression	0
>13403	Identifier	proj
>13404	Identifier	GRID_SIZE
>13405	Callee	floor
>13406	Identifier	floor
>13407	Callee	iround
>13408	Identifier	iround
>13409	Identifier	g_x
>13410	Identifier	g_x
>13411	IdentifierDeclType	int
>13412	ExpressionStatement	 
>13413	AssignmentExpr	proj [ 1 ] = CLAMP ( proj [ 1 ] , 0.0 , 0.9999 )
>13414	CallExpression	CLAMP ( proj [ 1 ] , 0.0 , 0.9999 )
>13415	ArgumentList	proj [ 1 ]
>13416	Argument	0.9999
>13417	PrimaryExpression	0.9999
>13418	Argument	0.0
>13419	PrimaryExpression	0.0
>13420	Argument	proj [ 1 ]
>13421	ArrayIndexing	proj [ 1 ]
>13422	PrimaryExpression	1
>13423	Identifier	proj
>13424	Callee	CLAMP
>13425	Identifier	CLAMP
>13426	ArrayIndexing	proj [ 1 ]
>13427	PrimaryExpression	1
>13428	Identifier	proj
>13429	ExpressionStatement	 
>13430	AssignmentExpr	proj [ 0 ] = CLAMP ( proj [ 0 ] , 0.0 , 0.9999 )
>13431	CallExpression	CLAMP ( proj [ 0 ] , 0.0 , 0.9999 )
>13432	ArgumentList	proj [ 0 ]
>13433	Argument	0.9999
>13434	PrimaryExpression	0.9999
>13435	Argument	0.0
>13436	PrimaryExpression	0.0
>13437	Argument	proj [ 0 ]
>13438	ArrayIndexing	proj [ 0 ]
>13439	PrimaryExpression	0
>13440	Identifier	proj
>13441	Callee	CLAMP
>13442	Identifier	CLAMP
>13443	ArrayIndexing	proj [ 0 ]
>13444	PrimaryExpression	0
>13445	Identifier	proj
>13446	ExpressionStatement	 
>13447	AssignmentExpr	proj [ 1 ] *= h_inv + 0.5
>13448	AdditiveExpression	h_inv + 0.5
>13449	PrimaryExpression	0.5
>13450	Identifier	h_inv
>13451	ArrayIndexing	proj [ 1 ]
>13452	PrimaryExpression	1
>13453	Identifier	proj
>13454	ExpressionStatement	 
>13455	AssignmentExpr	proj [ 0 ] *= w_inv + 0.5
>13456	AdditiveExpression	w_inv + 0.5
>13457	PrimaryExpression	0.5
>13458	Identifier	w_inv
>13459	ArrayIndexing	proj [ 0 ]
>13460	PrimaryExpression	0
>13461	Identifier	proj
>13462	ExpressionStatement	 
>13463	CallExpression	m_camera . Project ( pt_data [ idx ] . m_pos , proj )
>13464	ArgumentList	pt_data [ idx ] . m_pos
>13465	Argument	proj
>13466	Identifier	proj
>13467	Argument	pt_data [ idx ] . m_pos
>13468	MemberAccess	pt_data [ idx ] . m_pos
>13469	Identifier	m_pos
>13470	ArrayIndexing	pt_data [ idx ]
>13471	Identifier	idx
>13472	Identifier	pt_data
>13473	Callee	m_camera . Project
>13474	MemberAccess	m_camera . Project
>13475	Identifier	Project
>13476	Identifier	m_camera
>13477	IdentifierDeclStatement	 
>13478	IdentifierDecl	proj [ 2 ]
>13479	PrimaryExpression	2
>13480	Identifier	proj
>13481	IdentifierDeclType	double [ 2 ]
>13482	IdentifierDeclStatement	 
>13483	IdentifierDecl	idx = m_visible_points [ i ]
>13484	AssignmentExpr	idx = m_visible_points [ i ]
>13485	ArrayIndexing	m_visible_points [ i ]
>13486	Identifier	i
>13487	Identifier	m_visible_points
>13488	Identifier	idx
>13489	Identifier	idx
>13490	IdentifierDeclType	int
>13491	IncDecOp	 
>13492	IncDec	++
>13493	Identifier	i
>13494	Condition	 
>13495	RelationalExpression	i < num_vis_points
>13496	Identifier	num_vis_points
>13497	Identifier	i
>13498	ForInit	 
>13499	IdentifierDeclStatement	int i = 0 ;
>13500	IdentifierDecl	i = 0
>13501	AssignmentExpr	i = 0
>13502	PrimaryExpression	0
>13503	Identifier	i
>13504	Identifier	i
>13505	IdentifierDeclType	int
>13506	IdentifierDeclStatement	 
>13507	IdentifierDecl	h_inv = 1.0 / GetHeight ( )
>13508	AssignmentExpr	h_inv = 1.0 / GetHeight ( )
>13509	MultiplicativeExpression	1.0 / GetHeight ( )
>13510	CallExpression	GetHeight ( )
>13511	ArgumentList	 
>13512	Callee	GetHeight
>13513	Identifier	GetHeight
>13514	PrimaryExpression	1.0
>13515	Identifier	h_inv
>13516	Identifier	h_inv
>13517	IdentifierDeclType	double
>13518	IdentifierDeclStatement	 
>13519	IdentifierDecl	w_inv = 1.0 / GetWidth ( )
>13520	AssignmentExpr	w_inv = 1.0 / GetWidth ( )
>13521	MultiplicativeExpression	1.0 / GetWidth ( )
>13522	CallExpression	GetWidth ( )
>13523	ArgumentList	 
>13524	Callee	GetWidth
>13525	Identifier	GetWidth
>13526	PrimaryExpression	1.0
>13527	Identifier	w_inv
>13528	Identifier	w_inv
>13529	IdentifierDeclType	double
>13530	IdentifierDeclStatement	 
>13531	IdentifierDecl	num_vis_points = ( int ) m_visible_points . size ( )
>13532	AssignmentExpr	num_vis_points = ( int ) m_visible_points . size ( )
>13533	CastExpression	( int ) m_visible_points . size ( )
>13534	CallExpression	m_visible_points . size ( )
>13535	ArgumentList	 
>13536	Callee	m_visible_points . size
>13537	MemberAccess	m_visible_points . size
>13538	Identifier	size
>13539	Identifier	m_visible_points
>13540	CastTarget	int
>13541	Identifier	num_vis_points
>13542	Identifier	num_vis_points
>13543	IdentifierDeclType	int
>13544	IdentifierDeclStatement	 
>13545	IdentifierDecl	* grid = new std 
>13546	AssignmentExpr	* grid = new std 
>13547	MultiplicativeExpression	GRID_SIZE * GRID_SIZE
>13548	Identifier	GRID_SIZE
>13549	Identifier	GRID_SIZE
>13550	Identifier	grid
>13551	Identifier	grid
>13552	IdentifierDeclType	std 
>13604	FunctionDef	ImageData 
>13605	ParameterList	const std 
>13606	Parameter	 
>13607	Identifier	pt_data
>13608	ParameterType	const std 
>13609	ReturnType	void
>13610	CompoundStatement	 
>13611	ExpressionStatement	 
>13612	AssignmentExpr	m_ortho_plane . m_dist = - dot
>13613	UnaryOp	- dot
>13614	Identifier	dot
>13615	UnaryOperator	-
>13616	MemberAccess	m_ortho_plane . m_dist
>13617	Identifier	m_dist
>13618	Identifier	m_ortho_plane
>13619	ExpressionStatement	 
>13620	AssignmentExpr	m_ortho_plane . m_normal [ 2 ] = view [ 2 ]
>13621	ArrayIndexing	view [ 2 ]
>13622	PrimaryExpression	2
>13623	Identifier	view
>13624	ArrayIndexing	m_ortho_plane . m_normal [ 2 ]
>13625	PrimaryExpression	2
>13626	MemberAccess	m_ortho_plane . m_normal
>13627	Identifier	m_normal
>13628	Identifier	m_ortho_plane
>13629	ExpressionStatement	 
>13630	AssignmentExpr	m_ortho_plane . m_normal [ 1 ] = view [ 1 ]
>13631	ArrayIndexing	view [ 1 ]
>13632	PrimaryExpression	1
>13633	Identifier	view
>13634	ArrayIndexing	m_ortho_plane . m_normal [ 1 ]
>13635	PrimaryExpression	1
>13636	MemberAccess	m_ortho_plane . m_normal
>13637	Identifier	m_normal
>13638	Identifier	m_ortho_plane
>13639	ExpressionStatement	 
>13640	AssignmentExpr	m_ortho_plane . m_normal [ 0 ] = view [ 0 ]
>13641	ArrayIndexing	view [ 0 ]
>13642	PrimaryExpression	0
>13643	Identifier	view
>13644	ArrayIndexing	m_ortho_plane . m_normal [ 0 ]
>13645	PrimaryExpression	0
>13646	MemberAccess	m_ortho_plane . m_normal
>13647	Identifier	m_normal
>13648	Identifier	m_ortho_plane
>13649	ExpressionStatement	 
>13650	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , mean , view , & dot )
>13651	ArgumentList	1
>13652	Argument	& dot
>13653	UnaryOp	& dot
>13654	Identifier	dot
>13655	UnaryOperator	&
>13656	Argument	view
>13657	Identifier	view
>13658	Argument	mean
>13659	Identifier	mean
>13660	Argument	1
>13661	PrimaryExpression	1
>13662	Argument	3
>13663	PrimaryExpression	3
>13664	Argument	3
>13665	PrimaryExpression	3
>13666	Argument	1
>13667	PrimaryExpression	1
>13668	Callee	matrix_product
>13669	Identifier	matrix_product
>13670	IdentifierDeclStatement	 
>13671	IdentifierDecl	dot
>13672	Identifier	dot
>13673	IdentifierDeclType	double
>13674	ExpressionStatement	 
>13675	CallExpression	matrix_scale ( 3 , 1 , view , 1.0 / norm , view )
>13676	ArgumentList	3
>13677	Argument	view
>13678	Identifier	view
>13679	Argument	1.0 / norm
>13680	MultiplicativeExpression	1.0 / norm
>13681	Identifier	norm
>13682	PrimaryExpression	1.0
>13683	Argument	view
>13684	Identifier	view
>13685	Argument	1
>13686	PrimaryExpression	1
>13687	Argument	3
>13688	PrimaryExpression	3
>13689	Callee	matrix_scale
>13690	Identifier	matrix_scale
>13691	IdentifierDeclStatement	 
>13692	IdentifierDecl	norm = matrix_norm ( 3 , 1 , view )
>13693	AssignmentExpr	norm = matrix_norm ( 3 , 1 , view )
>13694	CallExpression	matrix_norm ( 3 , 1 , view )
>13695	ArgumentList	3
>13696	Argument	view
>13697	Identifier	view
>13698	Argument	1
>13699	PrimaryExpression	1
>13700	Argument	3
>13701	PrimaryExpression	3
>13702	Callee	matrix_norm
>13703	Identifier	matrix_norm
>13704	Identifier	norm
>13705	Identifier	norm
>13706	IdentifierDeclType	double
>13707	ExpressionStatement	 
>13708	AssignmentExpr	view [ 1 ] = 0.0
>13709	PrimaryExpression	0.0
>13710	ArrayIndexing	view [ 1 ]
>13711	PrimaryExpression	1
>13712	Identifier	view
>13713	ExpressionStatement	 
>13714	CallExpression	m_camera . GetViewDirection ( view )
>13715	ArgumentList	view
>13716	Argument	view
>13717	Identifier	view
>13718	Callee	m_camera . GetViewDirection
>13719	MemberAccess	m_camera . GetViewDirection
>13720	Identifier	GetViewDirection
>13721	Identifier	m_camera
>13722	IdentifierDeclStatement	 
>13723	IdentifierDecl	view [ 3 ]
>13724	PrimaryExpression	3
>13725	Identifier	view
>13726	IdentifierDeclType	double [ 3 ]
>13727	IdentifierDeclStatement	 
>13728	IdentifierDecl	mean [ 3 ] = { - 0.043 , 0.120 , - 0.500 }
>13729	AssignmentExpr	mean [ 3 ] = { - 0.043 , 0.120 , - 0.500 }
>13730	InitializerList	- 0.043
>13731	UnaryOp	- 0.500
>13732	PrimaryExpression	0.500
>13733	UnaryOperator	-
>13734	PrimaryExpression	0.120
>13735	UnaryOp	- 0.043
>13736	PrimaryExpression	0.043
>13737	UnaryOperator	-
>13738	Identifier	mean
>13739	PrimaryExpression	3
>13740	Identifier	mean
>13741	IdentifierDeclType	double [ 3 ]
>13742	ExpressionStatement	 
>13743	CallExpression	matrix_scale ( 3 , 1 , mean , 1.0 / num_vis_points , mean )
>13744	ArgumentList	3
>13745	Argument	mean
>13746	Identifier	mean
>13747	Argument	1.0 / num_vis_points
>13748	MultiplicativeExpression	1.0 / num_vis_points
>13749	Identifier	num_vis_points
>13750	PrimaryExpression	1.0
>13751	Argument	mean
>13752	Identifier	mean
>13753	Argument	1
>13754	PrimaryExpression	1
>13755	Argument	3
>13756	PrimaryExpression	3
>13757	Callee	matrix_scale
>13758	Identifier	matrix_scale
>13759	ForStatement	for ( int i = 0 ; i < num_vis_points ; i ++ )
>13760	CompoundStatement	 
>13761	ExpressionStatement	 
>13762	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , mean , pos , mean )
>13763	ArgumentList	3
>13764	Argument	mean
>13765	Identifier	mean
>13766	Argument	pos
>13767	Identifier	pos
>13768	Argument	mean
>13769	Identifier	mean
>13770	Argument	1
>13771	PrimaryExpression	1
>13772	Argument	3
>13773	PrimaryExpression	3
>13774	Argument	1
>13775	PrimaryExpression	1
>13776	Argument	3
>13777	PrimaryExpression	3
>13778	Callee	matrix_sum
>13779	Identifier	matrix_sum
>13780	IdentifierDeclStatement	 
>13781	IdentifierDecl	* pos = ( double * ) pt_data [ idx ] . m_pos
>13782	AssignmentExpr	* pos = ( double * ) pt_data [ idx ] . m_pos
>13783	CastExpression	( double * ) pt_data [ idx ] . m_pos
>13784	MemberAccess	pt_data [ idx ] . m_pos
>13785	Identifier	m_pos
>13786	ArrayIndexing	pt_data [ idx ]
>13787	Identifier	idx
>13788	Identifier	pt_data
>13789	CastTarget	double *
>13790	Identifier	pos
>13791	Identifier	pos
>13792	IdentifierDeclType	double *
>13793	IdentifierDeclStatement	 
>13794	IdentifierDecl	idx = m_visible_points [ i ]
>13795	AssignmentExpr	idx = m_visible_points [ i ]
>13796	ArrayIndexing	m_visible_points [ i ]
>13797	Identifier	i
>13798	Identifier	m_visible_points
>13799	Identifier	idx
>13800	Identifier	idx
>13801	IdentifierDeclType	int
>13802	IncDecOp	 
>13803	IncDec	++
>13804	Identifier	i
>13805	Condition	 
>13806	RelationalExpression	i < num_vis_points
>13807	Identifier	num_vis_points
>13808	Identifier	i
>13809	ForInit	 
>13810	IdentifierDeclStatement	int i = 0 ;
>13811	IdentifierDecl	i = 0
>13812	AssignmentExpr	i = 0
>13813	PrimaryExpression	0
>13814	Identifier	i
>13815	Identifier	i
>13816	IdentifierDeclType	int
>13817	IdentifierDeclStatement	 
>13818	IdentifierDecl	mean [ 3 ] = { 0.0 , 0.0 , 0.0 }
>13819	AssignmentExpr	mean [ 3 ] = { 0.0 , 0.0 , 0.0 }
>13820	InitializerList	0.0
>13821	PrimaryExpression	0.0
>13822	PrimaryExpression	0.0
>13823	PrimaryExpression	0.0
>13824	Identifier	mean
>13825	PrimaryExpression	3
>13826	Identifier	mean
>13827	IdentifierDeclType	double [ 3 ]
>13828	IdentifierDeclStatement	 
>13829	IdentifierDecl	num_vis_points = ( int ) m_visible_points . size ( )
>13830	AssignmentExpr	num_vis_points = ( int ) m_visible_points . size ( )
>13831	CastExpression	( int ) m_visible_points . size ( )
>13832	CallExpression	m_visible_points . size ( )
>13833	ArgumentList	 
>13834	Callee	m_visible_points . size
>13835	MemberAccess	m_visible_points . size
>13836	Identifier	size
>13837	Identifier	m_visible_points
>13838	CastTarget	int
>13839	Identifier	num_vis_points
>13840	Identifier	num_vis_points
>13841	IdentifierDeclType	int
>13870	FunctionDef	ImageData 
>13871	ParameterList	int id , const std 
>13872	Parameter	 
>13873	Identifier	pt_data
>13874	ParameterType	const std 
>13875	Parameter	 
>13876	Identifier	id
>13877	ParameterType	int
>13878	ReturnType	void
>13879	CompoundStatement	 
>13880	ExpressionStatement	 
>13881	CallExpression	UnloadImage ( )
>13882	ArgumentList	 
>13883	Callee	UnloadImage
>13884	Identifier	UnloadImage
>13885	ExpressionStatement	 
>13886	CallExpression	UnloadKeysWithScaleRot ( )
>13887	ArgumentList	 
>13888	Callee	UnloadKeysWithScaleRot
>13889	Identifier	UnloadKeysWithScaleRot
>13890	ExpressionStatement	 
>13891	Identifier	weights
>13892	Statement	 
>13893	Statement	 
>13894	Statement	 
>13895	ExpressionStatement	 
>13896	CallExpression	img_write_bmp_file ( m_feature_weight_map , buf )
>13897	ArgumentList	m_feature_weight_map
>13898	Argument	buf
>13899	Identifier	buf
>13900	Argument	m_feature_weight_map
>13901	Identifier	m_feature_weight_map
>13902	Callee	img_write_bmp_file
>13903	Identifier	img_write_bmp_file
>13904	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>13905	CompoundStatement	 
>13906	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>13907	CompoundStatement	 
>13908	ExpressionStatement	 
>13909	CallExpression	img_set_pixel ( m_feature_weight_map , x , y , c , c , c )
>13910	ArgumentList	m_feature_weight_map
>13911	Argument	c
>13912	Identifier	c
>13913	Argument	c
>13914	Identifier	c
>13915	Argument	c
>13916	Identifier	c
>13917	Argument	y
>13918	Identifier	y
>13919	Argument	x
>13920	Identifier	x
>13921	Argument	m_feature_weight_map
>13922	Identifier	m_feature_weight_map
>13923	Callee	img_set_pixel
>13924	Identifier	img_set_pixel
>13925	IdentifierDeclStatement	 
>13926	IdentifierDecl	c = iround ( wt * 255.0 )
>13927	AssignmentExpr	c = iround ( wt * 255.0 )
>13928	CallExpression	iround ( wt * 255.0 )
>13929	ArgumentList	wt * 255.0
>13930	Argument	wt * 255.0
>13931	MultiplicativeExpression	wt * 255.0
>13932	PrimaryExpression	255.0
>13933	Identifier	wt
>13934	Callee	iround
>13935	Identifier	iround
>13936	Identifier	c
>13937	Identifier	c
>13938	IdentifierDeclType	int
>13939	IdentifierDeclStatement	 
>13940	IdentifierDecl	wt = CLAMP ( weights [ idx ] , 0.0 , 1.0 )
>13941	AssignmentExpr	wt = CLAMP ( weights [ idx ] , 0.0 , 1.0 )
>13942	CallExpression	CLAMP ( weights [ idx ] , 0.0 , 1.0 )
>13943	ArgumentList	weights [ idx ]
>13944	Argument	1.0
>13945	PrimaryExpression	1.0
>13946	Argument	0.0
>13947	PrimaryExpression	0.0
>13948	Argument	weights [ idx ]
>13949	ArrayIndexing	weights [ idx ]
>13950	Identifier	idx
>13951	Identifier	weights
>13952	Callee	CLAMP
>13953	Identifier	CLAMP
>13954	Identifier	wt
>13955	Identifier	wt
>13956	IdentifierDeclType	double
>13957	IdentifierDeclStatement	 
>13958	IdentifierDecl	idx = y * w + x
>13959	AssignmentExpr	idx = y * w + x
>13960	AdditiveExpression	y * w + x
>13961	Identifier	x
>13962	MultiplicativeExpression	y * w
>13963	Identifier	w
>13964	Identifier	y
>13965	Identifier	idx
>13966	Identifier	idx
>13967	IdentifierDeclType	int
>13968	IncDecOp	 
>13969	IncDec	++
>13970	Identifier	x
>13971	Condition	 
>13972	RelationalExpression	x < w
>13973	Identifier	w
>13974	Identifier	x
>13975	ForInit	 
>13976	IdentifierDeclStatement	int x = 0 ;
>13977	IdentifierDecl	x = 0
>13978	AssignmentExpr	x = 0
>13979	PrimaryExpression	0
>13980	Identifier	x
>13981	Identifier	x
>13982	IdentifierDeclType	int
>13983	IncDecOp	 
>13984	IncDec	++
>13985	Identifier	y
>13986	Condition	 
>13987	RelationalExpression	y < h
>13988	Identifier	h
>13989	Identifier	y
>13990	ForInit	 
>13991	IdentifierDeclStatement	int y = 0 ;
>13992	IdentifierDecl	y = 0
>13993	AssignmentExpr	y = 0
>13994	PrimaryExpression	0
>13995	Identifier	y
>13996	Identifier	y
>13997	IdentifierDeclType	int
>13998	ForStatement	for ( int i = 0 ; i < num_vis_pts ; i ++ )
>13999	CompoundStatement	 
>14000	ExpressionStatement	 
>14001	Identifier	kernel
>14002	Statement	 
>14003	Statement	 
>14004	Statement	 
>14005	ForStatement	for ( int dy = - width / 2 ; dy <= width / 2 ; dy ++ )
>14006	CompoundStatement	 
>14007	ForStatement	for ( int dx = - width / 2 ; dx <= width / 2 ; dx ++ )
>14008	CompoundStatement	 
>14009	ExpressionStatement	 
>14010	AssignmentExpr	weights [ y_img * w + x_img ] += wt
>14011	Identifier	wt
>14012	ArrayIndexing	weights [ y_img * w + x_img ]
>14013	AdditiveExpression	y_img * w + x_img
>14014	Identifier	x_img
>14015	MultiplicativeExpression	y_img * w
>14016	Identifier	w
>14017	Identifier	y_img
>14018	Identifier	weights
>14019	IfStatement	if ( x_img < 0 || x_img >= w || y_img < 0 || y_img >= h )
>14020	ContinueStatement	 
>14021	Condition	 
>14022	OrExpression	x_img < 0 || x_img >= w || y_img < 0 || y_img >= h
>14023	OrExpression	x_img >= w || y_img < 0 || y_img >= h
>14024	OrExpression	y_img < 0 || y_img >= h
>14025	RelationalExpression	y_img >= h
>14026	Identifier	h
>14027	Identifier	y_img
>14028	RelationalExpression	y_img < 0
>14029	PrimaryExpression	0
>14030	Identifier	y_img
>14031	RelationalExpression	x_img >= w
>14032	Identifier	w
>14033	Identifier	x_img
>14034	RelationalExpression	x_img < 0
>14035	PrimaryExpression	0
>14036	Identifier	x_img
>14037	IdentifierDeclStatement	 
>14038	IdentifierDecl	y_img = iround ( y + dy )
>14039	AssignmentExpr	y_img = iround ( y + dy )
>14040	CallExpression	iround ( y + dy )
>14041	ArgumentList	y + dy
>14042	Argument	y + dy
>14043	AdditiveExpression	y + dy
>14044	Identifier	dy
>14045	Identifier	y
>14046	Callee	iround
>14047	Identifier	iround
>14048	Identifier	y_img
>14049	Identifier	y_img
>14050	IdentifierDeclType	int
>14051	IdentifierDeclStatement	 
>14052	IdentifierDecl	x_img = iround ( x + dx )
>14053	AssignmentExpr	x_img = iround ( x + dx )
>14054	CallExpression	iround ( x + dx )
>14055	ArgumentList	x + dx
>14056	Argument	x + dx
>14057	AdditiveExpression	x + dx
>14058	Identifier	dx
>14059	Identifier	x
>14060	Callee	iround
>14061	Identifier	iround
>14062	Identifier	x_img
>14063	Identifier	x_img
>14064	IdentifierDeclType	int
>14065	IdentifierDeclStatement	 
>14066	IdentifierDecl	wt = kernel [ dy + width / 2 ] * kernel [ dx + width / 2 ]
>14067	AssignmentExpr	wt = kernel [ dy + width / 2 ] * kernel [ dx + width / 2 ]
>14068	MultiplicativeExpression	kernel [ dy + width / 2 ] * kernel [ dx + width / 2 ]
>14069	ArrayIndexing	kernel [ dx + width / 2 ]
>14070	AdditiveExpression	dx + width / 2
>14071	MultiplicativeExpression	width / 2
>14072	PrimaryExpression	2
>14073	Identifier	width
>14074	Identifier	dx
>14075	Identifier	kernel
>14076	ArrayIndexing	kernel [ dy + width / 2 ]
>14077	AdditiveExpression	dy + width / 2
>14078	MultiplicativeExpression	width / 2
>14079	PrimaryExpression	2
>14080	Identifier	width
>14081	Identifier	dy
>14082	Identifier	kernel
>14083	Identifier	wt
>14084	Identifier	wt
>14085	IdentifierDeclType	double
>14086	IncDecOp	 
>14087	IncDec	++
>14088	Identifier	dx
>14089	Condition	 
>14090	RelationalExpression	dx <= width / 2
>14091	MultiplicativeExpression	width / 2
>14092	PrimaryExpression	2
>14093	Identifier	width
>14094	Identifier	dx
>14095	ForInit	 
>14096	IdentifierDeclStatement	int dx = - width / 2 ;
>14097	IdentifierDecl	dx = - width / 2
>14098	AssignmentExpr	dx = - width / 2
>14099	MultiplicativeExpression	- width / 2
>14100	PrimaryExpression	2
>14101	UnaryOp	- width
>14102	Identifier	width
>14103	UnaryOperator	-
>14104	Identifier	dx
>14105	Identifier	dx
>14106	IdentifierDeclType	int
>14107	IncDecOp	 
>14108	IncDec	++
>14109	Identifier	dy
>14110	Condition	 
>14111	RelationalExpression	dy <= width / 2
>14112	MultiplicativeExpression	width / 2
>14113	PrimaryExpression	2
>14114	Identifier	width
>14115	Identifier	dy
>14116	ForInit	 
>14117	IdentifierDeclStatement	int dy = - width / 2 ;
>14118	IdentifierDecl	dy = - width / 2
>14119	AssignmentExpr	dy = - width / 2
>14120	MultiplicativeExpression	- width / 2
>14121	PrimaryExpression	2
>14122	UnaryOp	- width
>14123	Identifier	width
>14124	UnaryOperator	-
>14125	Identifier	dy
>14126	Identifier	dy
>14127	IdentifierDeclType	int
>14128	ExpressionStatement	 
>14129	CallExpression	matrix_scale ( width , 1 , kernel , 0.5 / mid , kernel )
>14130	ArgumentList	width
>14131	Argument	kernel
>14132	Identifier	kernel
>14133	Argument	0.5 / mid
>14134	MultiplicativeExpression	0.5 / mid
>14135	Identifier	mid
>14136	PrimaryExpression	0.5
>14137	Argument	kernel
>14138	Identifier	kernel
>14139	Argument	1
>14140	PrimaryExpression	1
>14141	Argument	width
>14142	Identifier	width
>14143	Callee	matrix_scale
>14144	Identifier	matrix_scale
>14145	IdentifierDeclStatement	 
>14146	IdentifierDecl	mid = kernel [ width / 2 ]
>14147	AssignmentExpr	mid = kernel [ width / 2 ]
>14148	ArrayIndexing	kernel [ width / 2 ]
>14149	MultiplicativeExpression	width / 2
>14150	PrimaryExpression	2
>14151	Identifier	width
>14152	Identifier	kernel
>14153	Identifier	mid
>14154	Identifier	mid
>14155	IdentifierDeclType	double
>14156	IdentifierDeclStatement	 
>14157	IdentifierDecl	* kernel = compute_gaussian_filter ( fscale , 3.0 , & width )
>14158	AssignmentExpr	* kernel = compute_gaussian_filter ( fscale , 3.0 , & width )
>14159	CallExpression	compute_gaussian_filter ( fscale , 3.0 , & width )
>14160	ArgumentList	fscale
>14161	Argument	& width
>14162	UnaryOp	& width
>14163	Identifier	width
>14164	UnaryOperator	&
>14165	Argument	3.0
>14166	PrimaryExpression	3.0
>14167	Argument	fscale
>14168	Identifier	fscale
>14169	Callee	compute_gaussian_filter
>14170	Identifier	compute_gaussian_filter
>14171	Identifier	kernel
>14172	Identifier	kernel
>14173	IdentifierDeclType	double *
>14174	IdentifierDeclStatement	 
>14175	IdentifierDecl	width
>14176	Identifier	width
>14177	IdentifierDeclType	int
>14178	ExpressionStatement	 
>14179	AssignmentExpr	fscale = CLAMP ( fscale , 1.0 , 10.0 )
>14180	CallExpression	CLAMP ( fscale , 1.0 , 10.0 )
>14181	ArgumentList	fscale
>14182	Argument	10.0
>14183	PrimaryExpression	10.0
>14184	Argument	1.0
>14185	PrimaryExpression	1.0
>14186	Argument	fscale
>14187	Identifier	fscale
>14188	Callee	CLAMP
>14189	Identifier	CLAMP
>14190	Identifier	fscale
>14191	IdentifierDeclStatement	 
>14192	IdentifierDecl	y = scale * ( proj [ 1 ] + 0.5 * m_img -> h )
>14193	AssignmentExpr	y = scale * ( proj [ 1 ] + 0.5 * m_img -> h )
>14194	MultiplicativeExpression	scale * ( proj [ 1 ] + 0.5 * m_img -> h )
>14195	AdditiveExpression	proj [ 1 ] + 0.5 * m_img -> h
>14196	MultiplicativeExpression	0.5 * m_img -> h
>14197	PtrMemberAccess	m_img -> h
>14198	Identifier	h
>14199	Identifier	m_img
>14200	PrimaryExpression	0.5
>14201	ArrayIndexing	proj [ 1 ]
>14202	PrimaryExpression	1
>14203	Identifier	proj
>14204	Identifier	scale
>14205	Identifier	y
>14206	Identifier	y
>14207	IdentifierDeclType	double
>14208	IdentifierDeclStatement	 
>14209	IdentifierDecl	x = scale * ( proj [ 0 ] + 0.5 * m_img -> w )
>14210	AssignmentExpr	x = scale * ( proj [ 0 ] + 0.5 * m_img -> w )
>14211	MultiplicativeExpression	scale * ( proj [ 0 ] + 0.5 * m_img -> w )
>14212	AdditiveExpression	proj [ 0 ] + 0.5 * m_img -> w
>14213	MultiplicativeExpression	0.5 * m_img -> w
>14214	PtrMemberAccess	m_img -> w
>14215	Identifier	w
>14216	Identifier	m_img
>14217	PrimaryExpression	0.5
>14218	ArrayIndexing	proj [ 0 ]
>14219	PrimaryExpression	0
>14220	Identifier	proj
>14221	Identifier	scale
>14222	Identifier	x
>14223	Identifier	x
>14224	IdentifierDeclType	double
>14225	ExpressionStatement	 
>14226	CallExpression	m_camera . Project ( pt_data [ pt_idx ] . m_pos , proj )
>14227	ArgumentList	pt_data [ pt_idx ] . m_pos
>14228	Argument	proj
>14229	Identifier	proj
>14230	Argument	pt_data [ pt_idx ] . m_pos
>14231	MemberAccess	pt_data [ pt_idx ] . m_pos
>14232	Identifier	m_pos
>14233	ArrayIndexing	pt_data [ pt_idx ]
>14234	Identifier	pt_idx
>14235	Identifier	pt_data
>14236	Callee	m_camera . Project
>14237	MemberAccess	m_camera . Project
>14238	Identifier	Project
>14239	Identifier	m_camera
>14240	IdentifierDeclStatement	 
>14241	IdentifierDecl	proj [ 2 ]
>14242	PrimaryExpression	2
>14243	Identifier	proj
>14244	IdentifierDeclType	double [ 2 ]
>14245	IdentifierDeclStatement	 
>14246	IdentifierDecl	fscale = 3.0 * scale * m_keys_scale_rot [ key ] . m_scale
>14247	AssignmentExpr	fscale = 3.0 * scale * m_keys_scale_rot [ key ] . m_scale
>14248	MultiplicativeExpression	3.0 * scale * m_keys_scale_rot [ key ] . m_scale
>14249	MultiplicativeExpression	scale * m_keys_scale_rot [ key ] . m_scale
>14250	MemberAccess	m_keys_scale_rot [ key ] . m_scale
>14251	Identifier	m_scale
>14252	ArrayIndexing	m_keys_scale_rot [ key ]
>14253	Identifier	key
>14254	Identifier	m_keys_scale_rot
>14255	Identifier	scale
>14256	PrimaryExpression	3.0
>14257	Identifier	fscale
>14258	Identifier	fscale
>14259	IdentifierDeclType	double
>14260	IfStatement	if ( key == - 1 )
>14261	CompoundStatement	 
>14262	ContinueStatement	 
>14263	ExpressionStatement	 
>14264	Statement	 
>14265	Statement	 
>14266	Statement	 
>14267	Statement	 
>14268	Statement	 
>14269	Statement	 
>14270	Statement	 
>14271	Condition	 
>14272	EqualityExpression	key == - 1
>14273	UnaryOp	- 1
>14274	PrimaryExpression	1
>14275	UnaryOperator	-
>14276	Identifier	key
>14277	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>14278	CompoundStatement	 
>14279	IfStatement	if ( pt_data [ pt_idx ] . m_views [ j ] . first == id )
>14280	CompoundStatement	 
>14281	BreakStatement	 
>14282	ExpressionStatement	 
>14283	AssignmentExpr	key = pt_data [ pt_idx ] . m_views [ j ] . second
>14284	MemberAccess	pt_data [ pt_idx ] . m_views [ j ] . second
>14285	Identifier	second
>14286	ArrayIndexing	pt_data [ pt_idx ] . m_views [ j ]
>14287	Identifier	j
>14288	MemberAccess	pt_data [ pt_idx ] . m_views
>14289	Identifier	m_views
>14290	ArrayIndexing	pt_data [ pt_idx ]
>14291	Identifier	pt_idx
>14292	Identifier	pt_data
>14293	Identifier	key
>14294	Condition	 
>14295	EqualityExpression	pt_data [ pt_idx ] . m_views [ j ] . first == id
>14296	Identifier	id
>14297	MemberAccess	pt_data [ pt_idx ] . m_views [ j ] . first
>14298	Identifier	first
>14299	ArrayIndexing	pt_data [ pt_idx ] . m_views [ j ]
>14300	Identifier	j
>14301	MemberAccess	pt_data [ pt_idx ] . m_views
>14302	Identifier	m_views
>14303	ArrayIndexing	pt_data [ pt_idx ]
>14304	Identifier	pt_idx
>14305	Identifier	pt_data
>14306	IncDecOp	 
>14307	IncDec	++
>14308	Identifier	j
>14309	Condition	 
>14310	RelationalExpression	j < num_views
>14311	Identifier	num_views
>14312	Identifier	j
>14313	ForInit	 
>14314	IdentifierDeclStatement	int j = 0 ;
>14315	IdentifierDecl	j = 0
>14316	AssignmentExpr	j = 0
>14317	PrimaryExpression	0
>14318	Identifier	j
>14319	Identifier	j
>14320	IdentifierDeclType	int
>14321	IdentifierDeclStatement	 
>14322	IdentifierDecl	num_views = ( int ) pt_data [ pt_idx ] . m_views . size ( )
>14323	AssignmentExpr	num_views = ( int ) pt_data [ pt_idx ] . m_views . size ( )
>14324	CastExpression	( int ) pt_data [ pt_idx ] . m_views . size ( )
>14325	CallExpression	pt_data [ pt_idx ] . m_views . size ( )
>14326	ArgumentList	 
>14327	Callee	pt_data [ pt_idx ] . m_views . size
>14328	MemberAccess	pt_data [ pt_idx ] . m_views . size
>14329	Identifier	size
>14330	MemberAccess	pt_data [ pt_idx ] . m_views
>14331	Identifier	m_views
>14332	ArrayIndexing	pt_data [ pt_idx ]
>14333	Identifier	pt_idx
>14334	Identifier	pt_data
>14335	CastTarget	int
>14336	Identifier	num_views
>14337	Identifier	num_views
>14338	IdentifierDeclType	int
>14339	IdentifierDeclStatement	 
>14340	IdentifierDecl	key = - 1
>14341	AssignmentExpr	key = - 1
>14342	UnaryOp	- 1
>14343	PrimaryExpression	1
>14344	UnaryOperator	-
>14345	Identifier	key
>14346	Identifier	key
>14347	IdentifierDeclType	int
>14348	IdentifierDeclStatement	 
>14349	IdentifierDecl	pt_idx = m_visible_points [ i ]
>14350	AssignmentExpr	pt_idx = m_visible_points [ i ]
>14351	ArrayIndexing	m_visible_points [ i ]
>14352	Identifier	i
>14353	Identifier	m_visible_points
>14354	Identifier	pt_idx
>14355	Identifier	pt_idx
>14356	IdentifierDeclType	int
>14357	IncDecOp	 
>14358	IncDec	++
>14359	Identifier	i
>14360	Condition	 
>14361	RelationalExpression	i < num_vis_pts
>14362	Identifier	num_vis_pts
>14363	Identifier	i
>14364	ForInit	 
>14365	IdentifierDeclStatement	int i = 0 ;
>14366	IdentifierDecl	i = 0
>14367	AssignmentExpr	i = 0
>14368	PrimaryExpression	0
>14369	Identifier	i
>14370	Identifier	i
>14371	IdentifierDeclType	int
>14372	IdentifierDeclStatement	 
>14373	IdentifierDecl	num_vis_pts = ( int ) m_visible_points . size ( )
>14374	AssignmentExpr	num_vis_pts = ( int ) m_visible_points . size ( )
>14375	CastExpression	( int ) m_visible_points . size ( )
>14376	CallExpression	m_visible_points . size ( )
>14377	ArgumentList	 
>14378	Callee	m_visible_points . size
>14379	MemberAccess	m_visible_points . size
>14380	Identifier	size
>14381	Identifier	m_visible_points
>14382	CastTarget	int
>14383	Identifier	num_vis_pts
>14384	Identifier	num_vis_pts
>14385	IdentifierDeclType	int
>14386	ExpressionStatement	 
>14387	AssignmentExpr	m_feature_weight_map = img_new ( w , h )
>14388	CallExpression	img_new ( w , h )
>14389	ArgumentList	w
>14390	Argument	h
>14391	Identifier	h
>14392	Argument	w
>14393	Identifier	w
>14394	Callee	img_new
>14395	Identifier	img_new
>14396	Identifier	m_feature_weight_map
>14397	ForStatement	for ( int i = 0 ; i < w * h ; i ++ )
>14398	ExpressionStatement	 
>14399	AssignmentExpr	weights [ i ] = 0.0
>14400	PrimaryExpression	0.0
>14401	ArrayIndexing	weights [ i ]
>14402	Identifier	i
>14403	Identifier	weights
>14404	IncDecOp	 
>14405	IncDec	++
>14406	Identifier	i
>14407	Condition	 
>14408	RelationalExpression	i < w * h
>14409	MultiplicativeExpression	w * h
>14410	Identifier	h
>14411	Identifier	w
>14412	Identifier	i
>14413	ForInit	 
>14414	IdentifierDeclStatement	int i = 0 ;
>14415	IdentifierDecl	i = 0
>14416	AssignmentExpr	i = 0
>14417	PrimaryExpression	0
>14418	Identifier	i
>14419	Identifier	i
>14420	IdentifierDeclType	int
>14421	IdentifierDeclStatement	 
>14422	IdentifierDecl	* weights = new double [ w * h ]
>14423	AssignmentExpr	* weights = new double [ w * h ]
>14424	MultiplicativeExpression	w * h
>14425	Identifier	h
>14426	Identifier	w
>14427	Identifier	weights
>14428	Identifier	weights
>14429	IdentifierDeclType	double *
>14430	IdentifierDeclStatement	 
>14431	IdentifierDecl	h = iround ( m_img -> h * scale + 1 )
>14432	AssignmentExpr	h = iround ( m_img -> h * scale + 1 )
>14433	CallExpression	iround ( m_img -> h * scale + 1 )
>14434	ArgumentList	m_img -> h * scale + 1
>14435	Argument	m_img -> h * scale + 1
>14436	AdditiveExpression	m_img -> h * scale + 1
>14437	PrimaryExpression	1
>14438	MultiplicativeExpression	m_img -> h * scale
>14439	Identifier	scale
>14440	PtrMemberAccess	m_img -> h
>14441	Identifier	h
>14442	Identifier	m_img
>14443	Callee	iround
>14444	Identifier	iround
>14445	Identifier	h
>14446	Identifier	h
>14447	IdentifierDeclType	int
>14448	IdentifierDeclStatement	 
>14449	IdentifierDecl	w = iround ( m_img -> w * scale + 1 )
>14450	AssignmentExpr	w = iround ( m_img -> w * scale + 1 )
>14451	CallExpression	iround ( m_img -> w * scale + 1 )
>14452	ArgumentList	m_img -> w * scale + 1
>14453	Argument	m_img -> w * scale + 1
>14454	AdditiveExpression	m_img -> w * scale + 1
>14455	PrimaryExpression	1
>14456	MultiplicativeExpression	m_img -> w * scale
>14457	Identifier	scale
>14458	PtrMemberAccess	m_img -> w
>14459	Identifier	w
>14460	Identifier	m_img
>14461	Callee	iround
>14462	Identifier	iround
>14463	Identifier	w
>14464	Identifier	w
>14465	IdentifierDeclType	int
>14466	ExpressionStatement	 
>14467	AssignmentExpr	scale = 1.0 / ratio
>14468	MultiplicativeExpression	1.0 / ratio
>14469	Identifier	ratio
>14470	PrimaryExpression	1.0
>14471	Identifier	scale
>14472	IdentifierDeclStatement	 
>14473	IdentifierDecl	ratio = ( double ) dim / ( double ) MAX_DIM
>14474	AssignmentExpr	ratio = ( double ) dim / ( double ) MAX_DIM
>14475	MultiplicativeExpression	( double ) dim / ( double ) MAX_DIM
>14476	CastExpression	( double ) MAX_DIM
>14477	Identifier	MAX_DIM
>14478	CastTarget	double
>14479	CastExpression	( double ) dim
>14480	Identifier	dim
>14481	CastTarget	double
>14482	Identifier	ratio
>14483	Identifier	ratio
>14484	IdentifierDeclType	double
>14485	IdentifierDeclStatement	 
>14486	IdentifierDecl	dim = MAX ( m_img -> w , m_img -> h )
>14487	AssignmentExpr	dim = MAX ( m_img -> w , m_img -> h )
>14488	CallExpression	MAX ( m_img -> w , m_img -> h )
>14489	ArgumentList	m_img -> w
>14490	Argument	m_img -> h
>14491	PtrMemberAccess	m_img -> h
>14492	Identifier	h
>14493	Identifier	m_img
>14494	Argument	m_img -> w
>14495	PtrMemberAccess	m_img -> w
>14496	Identifier	w
>14497	Identifier	m_img
>14498	Callee	MAX
>14499	Identifier	MAX
>14500	Identifier	dim
>14501	Identifier	dim
>14502	IdentifierDeclType	int
>14503	IdentifierDeclStatement	 
>14504	IdentifierDecl	scale
>14505	Identifier	scale
>14506	IdentifierDeclType	double
>14507	ExpressionStatement	 
>14508	CallExpression	LoadImage ( )
>14509	ArgumentList	 
>14510	Callee	LoadImage
>14511	Identifier	LoadImage
>14512	ExpressionStatement	 
>14513	CallExpression	LoadKeysWithScaleRot ( false )
>14514	ArgumentList	false
>14515	Argument	false
>14516	Identifier	false
>14517	Callee	LoadKeysWithScaleRot
>14518	Identifier	LoadKeysWithScaleRot
>14519	IfStatement	if ( FileExists ( buf ) )
>14520	CompoundStatement	 
>14521	ReturnStatement	 
>14522	ExpressionStatement	 
>14523	AssignmentExpr	m_feature_weight_map = img_read_bmp_file ( buf )
>14524	CallExpression	img_read_bmp_file ( buf )
>14525	ArgumentList	buf
>14526	Argument	buf
>14527	Identifier	buf
>14528	Callee	img_read_bmp_file
>14529	Identifier	img_read_bmp_file
>14530	Identifier	m_feature_weight_map
>14531	Condition	 
>14532	CallExpression	FileExists ( buf )
>14533	ArgumentList	buf
>14534	Argument	buf
>14535	Identifier	buf
>14536	Callee	FileExists
>14537	Identifier	FileExists
>14538	ExpressionStatement	 
>14539	AssignmentExpr	buf [ len + 3 ] = 0
>14540	PrimaryExpression	0
>14541	ArrayIndexing	buf [ len + 3 ]
>14542	AdditiveExpression	len + 3
>14543	PrimaryExpression	3
>14544	Identifier	len
>14545	Identifier	buf
>14546	ExpressionStatement	 
>14547	AssignmentExpr	buf [ len + 2 ] = 'p'
>14548	PrimaryExpression	'p'
>14549	ArrayIndexing	buf [ len + 2 ]
>14550	AdditiveExpression	len + 2
>14551	PrimaryExpression	2
>14552	Identifier	len
>14553	Identifier	buf
>14554	ExpressionStatement	 
>14555	AssignmentExpr	buf [ len + 1 ] = 'm'
>14556	PrimaryExpression	'm'
>14557	ArrayIndexing	buf [ len + 1 ]
>14558	AdditiveExpression	len + 1
>14559	PrimaryExpression	1
>14560	Identifier	len
>14561	Identifier	buf
>14562	ExpressionStatement	 
>14563	AssignmentExpr	buf [ len + 0 ] = 'b'
>14564	PrimaryExpression	'b'
>14565	ArrayIndexing	buf [ len + 0 ]
>14566	AdditiveExpression	len + 0
>14567	PrimaryExpression	0
>14568	Identifier	len
>14569	Identifier	buf
>14570	ExpressionStatement	 
>14571	AssignmentExpr	buf [ len - 1 ] = '.'
>14572	PrimaryExpression	'.'
>14573	ArrayIndexing	buf [ len - 1 ]
>14574	AdditiveExpression	len - 1
>14575	PrimaryExpression	1
>14576	Identifier	len
>14577	Identifier	buf
>14578	ExpressionStatement	 
>14579	AssignmentExpr	buf [ len - 2 ] = 't'
>14580	PrimaryExpression	't'
>14581	ArrayIndexing	buf [ len - 2 ]
>14582	AdditiveExpression	len - 2
>14583	PrimaryExpression	2
>14584	Identifier	len
>14585	Identifier	buf
>14586	ExpressionStatement	 
>14587	AssignmentExpr	buf [ len - 3 ] = 'w'
>14588	PrimaryExpression	'w'
>14589	ArrayIndexing	buf [ len - 3 ]
>14590	AdditiveExpression	len - 3
>14591	PrimaryExpression	3
>14592	Identifier	len
>14593	Identifier	buf
>14594	IdentifierDeclStatement	 
>14595	IdentifierDecl	len = strlen ( buf )
>14596	AssignmentExpr	len = strlen ( buf )
>14597	CallExpression	strlen ( buf )
>14598	ArgumentList	buf
>14599	Argument	buf
>14600	Identifier	buf
>14601	Callee	strlen
>14602	Identifier	strlen
>14603	Identifier	len
>14604	Identifier	len
>14605	IdentifierDeclType	int
>14606	ExpressionStatement	 
>14607	CallExpression	strcpy ( buf , m_name )
>14608	ArgumentList	buf
>14609	Argument	m_name
>14610	Identifier	m_name
>14611	Argument	buf
>14612	Identifier	buf
>14613	Callee	strcpy
>14614	Identifier	strcpy
>14615	IdentifierDeclStatement	 
>14616	IdentifierDecl	buf [ 1024 ]
>14617	PrimaryExpression	1024
>14618	Identifier	buf
>14619	IdentifierDeclType	char [ 1024 ]
>14702	FunctionDef	ImageData 
>14703	ParameterList	 
>14704	ReturnType	bool
>14705	CompoundStatement	 
>14706	ReturnStatement	 
>14707	Identifier	false
>14708	IfStatement	if ( FileExists ( buf ) )
>14709	CompoundStatement	 
>14710	ReturnStatement	 
>14711	Identifier	true
>14712	ExpressionStatement	 
>14713	AssignmentExpr	m_feature_weight_map = img_read_bmp_file ( buf )
>14714	CallExpression	img_read_bmp_file ( buf )
>14715	ArgumentList	buf
>14716	Argument	buf
>14717	Identifier	buf
>14718	Callee	img_read_bmp_file
>14719	Identifier	img_read_bmp_file
>14720	Identifier	m_feature_weight_map
>14721	Condition	 
>14722	CallExpression	FileExists ( buf )
>14723	ArgumentList	buf
>14724	Argument	buf
>14725	Identifier	buf
>14726	Callee	FileExists
>14727	Identifier	FileExists
>14728	ExpressionStatement	 
>14729	AssignmentExpr	buf [ len + 3 ] = 0
>14730	PrimaryExpression	0
>14731	ArrayIndexing	buf [ len + 3 ]
>14732	AdditiveExpression	len + 3
>14733	PrimaryExpression	3
>14734	Identifier	len
>14735	Identifier	buf
>14736	ExpressionStatement	 
>14737	AssignmentExpr	buf [ len + 2 ] = 'p'
>14738	PrimaryExpression	'p'
>14739	ArrayIndexing	buf [ len + 2 ]
>14740	AdditiveExpression	len + 2
>14741	PrimaryExpression	2
>14742	Identifier	len
>14743	Identifier	buf
>14744	ExpressionStatement	 
>14745	AssignmentExpr	buf [ len + 1 ] = 'm'
>14746	PrimaryExpression	'm'
>14747	ArrayIndexing	buf [ len + 1 ]
>14748	AdditiveExpression	len + 1
>14749	PrimaryExpression	1
>14750	Identifier	len
>14751	Identifier	buf
>14752	ExpressionStatement	 
>14753	AssignmentExpr	buf [ len + 0 ] = 'b'
>14754	PrimaryExpression	'b'
>14755	ArrayIndexing	buf [ len + 0 ]
>14756	AdditiveExpression	len + 0
>14757	PrimaryExpression	0
>14758	Identifier	len
>14759	Identifier	buf
>14760	ExpressionStatement	 
>14761	AssignmentExpr	buf [ len - 1 ] = '.'
>14762	PrimaryExpression	'.'
>14763	ArrayIndexing	buf [ len - 1 ]
>14764	AdditiveExpression	len - 1
>14765	PrimaryExpression	1
>14766	Identifier	len
>14767	Identifier	buf
>14768	ExpressionStatement	 
>14769	AssignmentExpr	buf [ len - 2 ] = 't'
>14770	PrimaryExpression	't'
>14771	ArrayIndexing	buf [ len - 2 ]
>14772	AdditiveExpression	len - 2
>14773	PrimaryExpression	2
>14774	Identifier	len
>14775	Identifier	buf
>14776	ExpressionStatement	 
>14777	AssignmentExpr	buf [ len - 3 ] = 'w'
>14778	PrimaryExpression	'w'
>14779	ArrayIndexing	buf [ len - 3 ]
>14780	AdditiveExpression	len - 3
>14781	PrimaryExpression	3
>14782	Identifier	len
>14783	Identifier	buf
>14784	IdentifierDeclStatement	 
>14785	IdentifierDecl	len = strlen ( buf )
>14786	AssignmentExpr	len = strlen ( buf )
>14787	CallExpression	strlen ( buf )
>14788	ArgumentList	buf
>14789	Argument	buf
>14790	Identifier	buf
>14791	Callee	strlen
>14792	Identifier	strlen
>14793	Identifier	len
>14794	Identifier	len
>14795	IdentifierDeclType	int
>14796	ExpressionStatement	 
>14797	CallExpression	strcpy ( buf , m_name )
>14798	ArgumentList	buf
>14799	Argument	m_name
>14800	Identifier	m_name
>14801	Argument	buf
>14802	Identifier	buf
>14803	Callee	strcpy
>14804	Identifier	strcpy
>14805	IdentifierDeclStatement	 
>14806	IdentifierDecl	buf [ 1024 ]
>14807	PrimaryExpression	1024
>14808	Identifier	buf
>14809	IdentifierDeclType	char [ 1024 ]
>14824	FunctionDef	ImageData 
>14825	ParameterList	 
>14826	ReturnType	void
>14827	CompoundStatement	 
>14828	ExpressionStatement	 
>14829	CallExpression	img_write_bmp_file ( m_feature_weight_map , buf )
>14830	ArgumentList	m_feature_weight_map
>14831	Argument	buf
>14832	Identifier	buf
>14833	Argument	m_feature_weight_map
>14834	Identifier	m_feature_weight_map
>14835	Callee	img_write_bmp_file
>14836	Identifier	img_write_bmp_file
>14837	ExpressionStatement	 
>14838	AssignmentExpr	buf [ len + 3 ] = 0
>14839	PrimaryExpression	0
>14840	ArrayIndexing	buf [ len + 3 ]
>14841	AdditiveExpression	len + 3
>14842	PrimaryExpression	3
>14843	Identifier	len
>14844	Identifier	buf
>14845	ExpressionStatement	 
>14846	AssignmentExpr	buf [ len + 2 ] = 'p'
>14847	PrimaryExpression	'p'
>14848	ArrayIndexing	buf [ len + 2 ]
>14849	AdditiveExpression	len + 2
>14850	PrimaryExpression	2
>14851	Identifier	len
>14852	Identifier	buf
>14853	ExpressionStatement	 
>14854	AssignmentExpr	buf [ len + 1 ] = 'm'
>14855	PrimaryExpression	'm'
>14856	ArrayIndexing	buf [ len + 1 ]
>14857	AdditiveExpression	len + 1
>14858	PrimaryExpression	1
>14859	Identifier	len
>14860	Identifier	buf
>14861	ExpressionStatement	 
>14862	AssignmentExpr	buf [ len + 0 ] = 'b'
>14863	PrimaryExpression	'b'
>14864	ArrayIndexing	buf [ len + 0 ]
>14865	AdditiveExpression	len + 0
>14866	PrimaryExpression	0
>14867	Identifier	len
>14868	Identifier	buf
>14869	ExpressionStatement	 
>14870	AssignmentExpr	buf [ len - 1 ] = '.'
>14871	PrimaryExpression	'.'
>14872	ArrayIndexing	buf [ len - 1 ]
>14873	AdditiveExpression	len - 1
>14874	PrimaryExpression	1
>14875	Identifier	len
>14876	Identifier	buf
>14877	ExpressionStatement	 
>14878	AssignmentExpr	buf [ len - 2 ] = 't'
>14879	PrimaryExpression	't'
>14880	ArrayIndexing	buf [ len - 2 ]
>14881	AdditiveExpression	len - 2
>14882	PrimaryExpression	2
>14883	Identifier	len
>14884	Identifier	buf
>14885	ExpressionStatement	 
>14886	AssignmentExpr	buf [ len - 3 ] = 'w'
>14887	PrimaryExpression	'w'
>14888	ArrayIndexing	buf [ len - 3 ]
>14889	AdditiveExpression	len - 3
>14890	PrimaryExpression	3
>14891	Identifier	len
>14892	Identifier	buf
>14893	IdentifierDeclStatement	 
>14894	IdentifierDecl	len = strlen ( buf )
>14895	AssignmentExpr	len = strlen ( buf )
>14896	CallExpression	strlen ( buf )
>14897	ArgumentList	buf
>14898	Argument	buf
>14899	Identifier	buf
>14900	Callee	strlen
>14901	Identifier	strlen
>14902	Identifier	len
>14903	Identifier	len
>14904	IdentifierDeclType	int
>14905	ExpressionStatement	 
>14906	CallExpression	strcpy ( buf , m_name )
>14907	ArgumentList	buf
>14908	Argument	m_name
>14909	Identifier	m_name
>14910	Argument	buf
>14911	Identifier	buf
>14912	Callee	strcpy
>14913	Identifier	strcpy
>14914	IdentifierDeclStatement	 
>14915	IdentifierDecl	buf [ 1024 ]
>14916	PrimaryExpression	1024
>14917	Identifier	buf
>14918	IdentifierDeclType	char [ 1024 ]
>14929	FunctionDef	ImageData 
>14930	ParameterList	int id , const std 
>14931	Parameter	 
>14932	Identifier	used_points
>14933	ParameterType	const std 
>14934	Parameter	 
>14935	Identifier	pt_data
>14936	ParameterType	const std 
>14937	Parameter	 
>14938	Identifier	id
>14939	ParameterType	int
>14940	ReturnType	void
>14941	CompoundStatement	 
>14942	ExpressionStatement	 
>14943	CallExpression	UnloadImage ( )
>14944	ArgumentList	 
>14945	Callee	UnloadImage
>14946	Identifier	UnloadImage
>14947	ExpressionStatement	 
>14948	CallExpression	UnloadKeysWithScaleRot ( )
>14949	ArgumentList	 
>14950	Callee	UnloadKeysWithScaleRot
>14951	Identifier	UnloadKeysWithScaleRot
>14952	ExpressionStatement	 
>14953	Identifier	weights
>14954	Statement	 
>14955	Statement	 
>14956	Statement	 
>14957	ExpressionStatement	 
>14958	CallExpression	SaveFeatureWeightMap ( )
>14959	ArgumentList	 
>14960	Callee	SaveFeatureWeightMap
>14961	Identifier	SaveFeatureWeightMap
>14962	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>14963	CompoundStatement	 
>14964	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>14965	CompoundStatement	 
>14966	ExpressionStatement	 
>14967	CallExpression	img_set_pixel ( m_feature_weight_map , x , y , c , c , c )
>14968	ArgumentList	m_feature_weight_map
>14969	Argument	c
>14970	Identifier	c
>14971	Argument	c
>14972	Identifier	c
>14973	Argument	c
>14974	Identifier	c
>14975	Argument	y
>14976	Identifier	y
>14977	Argument	x
>14978	Identifier	x
>14979	Argument	m_feature_weight_map
>14980	Identifier	m_feature_weight_map
>14981	Callee	img_set_pixel
>14982	Identifier	img_set_pixel
>14983	IdentifierDeclStatement	 
>14984	IdentifierDecl	c = iround ( wt * 255.0 )
>14985	AssignmentExpr	c = iround ( wt * 255.0 )
>14986	CallExpression	iround ( wt * 255.0 )
>14987	ArgumentList	wt * 255.0
>14988	Argument	wt * 255.0
>14989	MultiplicativeExpression	wt * 255.0
>14990	PrimaryExpression	255.0
>14991	Identifier	wt
>14992	Callee	iround
>14993	Identifier	iround
>14994	Identifier	c
>14995	Identifier	c
>14996	IdentifierDeclType	int
>14997	IdentifierDeclStatement	 
>14998	IdentifierDecl	wt = CLAMP ( weights [ idx ] , 0.0 , 1.0 )
>14999	AssignmentExpr	wt = CLAMP ( weights [ idx ] , 0.0 , 1.0 )
>15000	CallExpression	CLAMP ( weights [ idx ] , 0.0 , 1.0 )
>15001	ArgumentList	weights [ idx ]
>15002	Argument	1.0
>15003	PrimaryExpression	1.0
>15004	Argument	0.0
>15005	PrimaryExpression	0.0
>15006	Argument	weights [ idx ]
>15007	ArrayIndexing	weights [ idx ]
>15008	Identifier	idx
>15009	Identifier	weights
>15010	Callee	CLAMP
>15011	Identifier	CLAMP
>15012	Identifier	wt
>15013	Identifier	wt
>15014	IdentifierDeclType	double
>15015	IdentifierDeclStatement	 
>15016	IdentifierDecl	idx = y * w + x
>15017	AssignmentExpr	idx = y * w + x
>15018	AdditiveExpression	y * w + x
>15019	Identifier	x
>15020	MultiplicativeExpression	y * w
>15021	Identifier	w
>15022	Identifier	y
>15023	Identifier	idx
>15024	Identifier	idx
>15025	IdentifierDeclType	int
>15026	IncDecOp	 
>15027	IncDec	++
>15028	Identifier	x
>15029	Condition	 
>15030	RelationalExpression	x < w
>15031	Identifier	w
>15032	Identifier	x
>15033	ForInit	 
>15034	IdentifierDeclStatement	int x = 0 ;
>15035	IdentifierDecl	x = 0
>15036	AssignmentExpr	x = 0
>15037	PrimaryExpression	0
>15038	Identifier	x
>15039	Identifier	x
>15040	IdentifierDeclType	int
>15041	IncDecOp	 
>15042	IncDec	++
>15043	Identifier	y
>15044	Condition	 
>15045	RelationalExpression	y < h
>15046	Identifier	h
>15047	Identifier	y
>15048	ForInit	 
>15049	IdentifierDeclStatement	int y = 0 ;
>15050	IdentifierDecl	y = 0
>15051	AssignmentExpr	y = 0
>15052	PrimaryExpression	0
>15053	Identifier	y
>15054	Identifier	y
>15055	IdentifierDeclType	int
>15056	ForStatement	for ( int i = 0 ; i < num_vis_pts ; i ++ )
>15057	CompoundStatement	 
>15058	ExpressionStatement	 
>15059	Identifier	kernel
>15060	Statement	 
>15061	Statement	 
>15062	Statement	 
>15063	ForStatement	for ( int dy = - width / 2 ; dy <= width / 2 ; dy ++ )
>15064	CompoundStatement	 
>15065	ForStatement	for ( int dx = - width / 2 ; dx <= width / 2 ; dx ++ )
>15066	CompoundStatement	 
>15067	ExpressionStatement	 
>15068	AssignmentExpr	weights [ y_img * w + x_img ] += wt
>15069	Identifier	wt
>15070	ArrayIndexing	weights [ y_img * w + x_img ]
>15071	AdditiveExpression	y_img * w + x_img
>15072	Identifier	x_img
>15073	MultiplicativeExpression	y_img * w
>15074	Identifier	w
>15075	Identifier	y_img
>15076	Identifier	weights
>15077	IfStatement	if ( x_img < 0 || x_img >= w || y_img < 0 || y_img >= h )
>15078	ContinueStatement	 
>15079	Condition	 
>15080	OrExpression	x_img < 0 || x_img >= w || y_img < 0 || y_img >= h
>15081	OrExpression	x_img >= w || y_img < 0 || y_img >= h
>15082	OrExpression	y_img < 0 || y_img >= h
>15083	RelationalExpression	y_img >= h
>15084	Identifier	h
>15085	Identifier	y_img
>15086	RelationalExpression	y_img < 0
>15087	PrimaryExpression	0
>15088	Identifier	y_img
>15089	RelationalExpression	x_img >= w
>15090	Identifier	w
>15091	Identifier	x_img
>15092	RelationalExpression	x_img < 0
>15093	PrimaryExpression	0
>15094	Identifier	x_img
>15095	IdentifierDeclStatement	 
>15096	IdentifierDecl	y_img = iround ( y + dy )
>15097	AssignmentExpr	y_img = iround ( y + dy )
>15098	CallExpression	iround ( y + dy )
>15099	ArgumentList	y + dy
>15100	Argument	y + dy
>15101	AdditiveExpression	y + dy
>15102	Identifier	dy
>15103	Identifier	y
>15104	Callee	iround
>15105	Identifier	iround
>15106	Identifier	y_img
>15107	Identifier	y_img
>15108	IdentifierDeclType	int
>15109	IdentifierDeclStatement	 
>15110	IdentifierDecl	x_img = iround ( x + dx )
>15111	AssignmentExpr	x_img = iround ( x + dx )
>15112	CallExpression	iround ( x + dx )
>15113	ArgumentList	x + dx
>15114	Argument	x + dx
>15115	AdditiveExpression	x + dx
>15116	Identifier	dx
>15117	Identifier	x
>15118	Callee	iround
>15119	Identifier	iround
>15120	Identifier	x_img
>15121	Identifier	x_img
>15122	IdentifierDeclType	int
>15123	IdentifierDeclStatement	 
>15124	IdentifierDecl	wt = kernel [ dy + width / 2 ] * kernel [ dx + width / 2 ]
>15125	AssignmentExpr	wt = kernel [ dy + width / 2 ] * kernel [ dx + width / 2 ]
>15126	MultiplicativeExpression	kernel [ dy + width / 2 ] * kernel [ dx + width / 2 ]
>15127	ArrayIndexing	kernel [ dx + width / 2 ]
>15128	AdditiveExpression	dx + width / 2
>15129	MultiplicativeExpression	width / 2
>15130	PrimaryExpression	2
>15131	Identifier	width
>15132	Identifier	dx
>15133	Identifier	kernel
>15134	ArrayIndexing	kernel [ dy + width / 2 ]
>15135	AdditiveExpression	dy + width / 2
>15136	MultiplicativeExpression	width / 2
>15137	PrimaryExpression	2
>15138	Identifier	width
>15139	Identifier	dy
>15140	Identifier	kernel
>15141	Identifier	wt
>15142	Identifier	wt
>15143	IdentifierDeclType	double
>15144	IncDecOp	 
>15145	IncDec	++
>15146	Identifier	dx
>15147	Condition	 
>15148	RelationalExpression	dx <= width / 2
>15149	MultiplicativeExpression	width / 2
>15150	PrimaryExpression	2
>15151	Identifier	width
>15152	Identifier	dx
>15153	ForInit	 
>15154	IdentifierDeclStatement	int dx = - width / 2 ;
>15155	IdentifierDecl	dx = - width / 2
>15156	AssignmentExpr	dx = - width / 2
>15157	MultiplicativeExpression	- width / 2
>15158	PrimaryExpression	2
>15159	UnaryOp	- width
>15160	Identifier	width
>15161	UnaryOperator	-
>15162	Identifier	dx
>15163	Identifier	dx
>15164	IdentifierDeclType	int
>15165	IncDecOp	 
>15166	IncDec	++
>15167	Identifier	dy
>15168	Condition	 
>15169	RelationalExpression	dy <= width / 2
>15170	MultiplicativeExpression	width / 2
>15171	PrimaryExpression	2
>15172	Identifier	width
>15173	Identifier	dy
>15174	ForInit	 
>15175	IdentifierDeclStatement	int dy = - width / 2 ;
>15176	IdentifierDecl	dy = - width / 2
>15177	AssignmentExpr	dy = - width / 2
>15178	MultiplicativeExpression	- width / 2
>15179	PrimaryExpression	2
>15180	UnaryOp	- width
>15181	Identifier	width
>15182	UnaryOperator	-
>15183	Identifier	dy
>15184	Identifier	dy
>15185	IdentifierDeclType	int
>15186	ExpressionStatement	 
>15187	CallExpression	matrix_scale ( width , 1 , kernel , 0.5 / mid , kernel )
>15188	ArgumentList	width
>15189	Argument	kernel
>15190	Identifier	kernel
>15191	Argument	0.5 / mid
>15192	MultiplicativeExpression	0.5 / mid
>15193	Identifier	mid
>15194	PrimaryExpression	0.5
>15195	Argument	kernel
>15196	Identifier	kernel
>15197	Argument	1
>15198	PrimaryExpression	1
>15199	Argument	width
>15200	Identifier	width
>15201	Callee	matrix_scale
>15202	Identifier	matrix_scale
>15203	IdentifierDeclStatement	 
>15204	IdentifierDecl	mid = kernel [ width / 2 ]
>15205	AssignmentExpr	mid = kernel [ width / 2 ]
>15206	ArrayIndexing	kernel [ width / 2 ]
>15207	MultiplicativeExpression	width / 2
>15208	PrimaryExpression	2
>15209	Identifier	width
>15210	Identifier	kernel
>15211	Identifier	mid
>15212	Identifier	mid
>15213	IdentifierDeclType	double
>15214	IdentifierDeclStatement	 
>15215	IdentifierDecl	* kernel = compute_gaussian_filter ( fscale , 3.0 , & width )
>15216	AssignmentExpr	* kernel = compute_gaussian_filter ( fscale , 3.0 , & width )
>15217	CallExpression	compute_gaussian_filter ( fscale , 3.0 , & width )
>15218	ArgumentList	fscale
>15219	Argument	& width
>15220	UnaryOp	& width
>15221	Identifier	width
>15222	UnaryOperator	&
>15223	Argument	3.0
>15224	PrimaryExpression	3.0
>15225	Argument	fscale
>15226	Identifier	fscale
>15227	Callee	compute_gaussian_filter
>15228	Identifier	compute_gaussian_filter
>15229	Identifier	kernel
>15230	Identifier	kernel
>15231	IdentifierDeclType	double *
>15232	IdentifierDeclStatement	 
>15233	IdentifierDecl	width
>15234	Identifier	width
>15235	IdentifierDeclType	int
>15236	ExpressionStatement	 
>15237	AssignmentExpr	fscale = CLAMP ( fscale , 1.0 , 10.0 )
>15238	CallExpression	CLAMP ( fscale , 1.0 , 10.0 )
>15239	ArgumentList	fscale
>15240	Argument	10.0
>15241	PrimaryExpression	10.0
>15242	Argument	1.0
>15243	PrimaryExpression	1.0
>15244	Argument	fscale
>15245	Identifier	fscale
>15246	Callee	CLAMP
>15247	Identifier	CLAMP
>15248	Identifier	fscale
>15249	IdentifierDeclStatement	 
>15250	IdentifierDecl	y = scale * ( m_keys_scale_rot [ key ] . m_y + 0.5 * m_img -> h )
>15251	AssignmentExpr	y = scale * ( m_keys_scale_rot [ key ] . m_y + 0.5 * m_img -> h )
>15252	MultiplicativeExpression	scale * ( m_keys_scale_rot [ key ] . m_y + 0.5 * m_img -> h )
>15253	AdditiveExpression	m_keys_scale_rot [ key ] . m_y + 0.5 * m_img -> h
>15254	MultiplicativeExpression	0.5 * m_img -> h
>15255	PtrMemberAccess	m_img -> h
>15256	Identifier	h
>15257	Identifier	m_img
>15258	PrimaryExpression	0.5
>15259	MemberAccess	m_keys_scale_rot [ key ] . m_y
>15260	Identifier	m_y
>15261	ArrayIndexing	m_keys_scale_rot [ key ]
>15262	Identifier	key
>15263	Identifier	m_keys_scale_rot
>15264	Identifier	scale
>15265	Identifier	y
>15266	Identifier	y
>15267	IdentifierDeclType	double
>15268	IdentifierDeclStatement	 
>15269	IdentifierDecl	x = scale * ( m_keys_scale_rot [ key ] . m_x + 0.5 * m_img -> w )
>15270	AssignmentExpr	x = scale * ( m_keys_scale_rot [ key ] . m_x + 0.5 * m_img -> w )
>15271	MultiplicativeExpression	scale * ( m_keys_scale_rot [ key ] . m_x + 0.5 * m_img -> w )
>15272	AdditiveExpression	m_keys_scale_rot [ key ] . m_x + 0.5 * m_img -> w
>15273	MultiplicativeExpression	0.5 * m_img -> w
>15274	PtrMemberAccess	m_img -> w
>15275	Identifier	w
>15276	Identifier	m_img
>15277	PrimaryExpression	0.5
>15278	MemberAccess	m_keys_scale_rot [ key ] . m_x
>15279	Identifier	m_x
>15280	ArrayIndexing	m_keys_scale_rot [ key ]
>15281	Identifier	key
>15282	Identifier	m_keys_scale_rot
>15283	Identifier	scale
>15284	Identifier	x
>15285	Identifier	x
>15286	IdentifierDeclType	double
>15287	IdentifierDeclStatement	 
>15288	IdentifierDecl	fscale = 3.0 * scale * m_keys_scale_rot [ key ] . m_scale
>15289	AssignmentExpr	fscale = 3.0 * scale * m_keys_scale_rot [ key ] . m_scale
>15290	MultiplicativeExpression	3.0 * scale * m_keys_scale_rot [ key ] . m_scale
>15291	MultiplicativeExpression	scale * m_keys_scale_rot [ key ] . m_scale
>15292	MemberAccess	m_keys_scale_rot [ key ] . m_scale
>15293	Identifier	m_scale
>15294	ArrayIndexing	m_keys_scale_rot [ key ]
>15295	Identifier	key
>15296	Identifier	m_keys_scale_rot
>15297	Identifier	scale
>15298	PrimaryExpression	3.0
>15299	Identifier	fscale
>15300	Identifier	fscale
>15301	IdentifierDeclType	double
>15302	IfStatement	if ( key == - 1 )
>15303	CompoundStatement	 
>15304	ContinueStatement	 
>15305	ExpressionStatement	 
>15306	Statement	 
>15307	Statement	 
>15308	Statement	 
>15309	Statement	 
>15310	Statement	 
>15311	Statement	 
>15312	Statement	 
>15313	Condition	 
>15314	EqualityExpression	key == - 1
>15315	UnaryOp	- 1
>15316	PrimaryExpression	1
>15317	UnaryOperator	-
>15318	Identifier	key
>15319	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>15320	CompoundStatement	 
>15321	IfStatement	if ( pt_data [ pt_idx ] . m_views [ j ] . first == id )
>15322	CompoundStatement	 
>15323	BreakStatement	 
>15324	ExpressionStatement	 
>15325	AssignmentExpr	key = pt_data [ pt_idx ] . m_views [ j ] . second
>15326	MemberAccess	pt_data [ pt_idx ] . m_views [ j ] . second
>15327	Identifier	second
>15328	ArrayIndexing	pt_data [ pt_idx ] . m_views [ j ]
>15329	Identifier	j
>15330	MemberAccess	pt_data [ pt_idx ] . m_views
>15331	Identifier	m_views
>15332	ArrayIndexing	pt_data [ pt_idx ]
>15333	Identifier	pt_idx
>15334	Identifier	pt_data
>15335	Identifier	key
>15336	Condition	 
>15337	EqualityExpression	pt_data [ pt_idx ] . m_views [ j ] . first == id
>15338	Identifier	id
>15339	MemberAccess	pt_data [ pt_idx ] . m_views [ j ] . first
>15340	Identifier	first
>15341	ArrayIndexing	pt_data [ pt_idx ] . m_views [ j ]
>15342	Identifier	j
>15343	MemberAccess	pt_data [ pt_idx ] . m_views
>15344	Identifier	m_views
>15345	ArrayIndexing	pt_data [ pt_idx ]
>15346	Identifier	pt_idx
>15347	Identifier	pt_data
>15348	IncDecOp	 
>15349	IncDec	++
>15350	Identifier	j
>15351	Condition	 
>15352	RelationalExpression	j < num_views
>15353	Identifier	num_views
>15354	Identifier	j
>15355	ForInit	 
>15356	IdentifierDeclStatement	int j = 0 ;
>15357	IdentifierDecl	j = 0
>15358	AssignmentExpr	j = 0
>15359	PrimaryExpression	0
>15360	Identifier	j
>15361	Identifier	j
>15362	IdentifierDeclType	int
>15363	IdentifierDeclStatement	 
>15364	IdentifierDecl	num_views = ( int ) pt_data [ pt_idx ] . m_views . size ( )
>15365	AssignmentExpr	num_views = ( int ) pt_data [ pt_idx ] . m_views . size ( )
>15366	CastExpression	( int ) pt_data [ pt_idx ] . m_views . size ( )
>15367	CallExpression	pt_data [ pt_idx ] . m_views . size ( )
>15368	ArgumentList	 
>15369	Callee	pt_data [ pt_idx ] . m_views . size
>15370	MemberAccess	pt_data [ pt_idx ] . m_views . size
>15371	Identifier	size
>15372	MemberAccess	pt_data [ pt_idx ] . m_views
>15373	Identifier	m_views
>15374	ArrayIndexing	pt_data [ pt_idx ]
>15375	Identifier	pt_idx
>15376	Identifier	pt_data
>15377	CastTarget	int
>15378	Identifier	num_views
>15379	Identifier	num_views
>15380	IdentifierDeclType	int
>15381	IdentifierDeclStatement	 
>15382	IdentifierDecl	key = - 1
>15383	AssignmentExpr	key = - 1
>15384	UnaryOp	- 1
>15385	PrimaryExpression	1
>15386	UnaryOperator	-
>15387	Identifier	key
>15388	Identifier	key
>15389	IdentifierDeclType	int
>15390	IdentifierDeclStatement	 
>15391	IdentifierDecl	pt_idx = visible_points [ i ]
>15392	AssignmentExpr	pt_idx = visible_points [ i ]
>15393	ArrayIndexing	visible_points [ i ]
>15394	Identifier	i
>15395	Identifier	visible_points
>15396	Identifier	pt_idx
>15397	Identifier	pt_idx
>15398	IdentifierDeclType	int
>15399	IncDecOp	 
>15400	IncDec	++
>15401	Identifier	i
>15402	Condition	 
>15403	RelationalExpression	i < num_vis_pts
>15404	Identifier	num_vis_pts
>15405	Identifier	i
>15406	ForInit	 
>15407	IdentifierDeclStatement	int i = 0 ;
>15408	IdentifierDecl	i = 0
>15409	AssignmentExpr	i = 0
>15410	PrimaryExpression	0
>15411	Identifier	i
>15412	Identifier	i
>15413	IdentifierDeclType	int
>15414	IdentifierDeclStatement	 
>15415	IdentifierDecl	num_vis_pts = ( int ) visible_points . size ( )
>15416	AssignmentExpr	num_vis_pts = ( int ) visible_points . size ( )
>15417	CastExpression	( int ) visible_points . size ( )
>15418	CallExpression	visible_points . size ( )
>15419	ArgumentList	 
>15420	Callee	visible_points . size
>15421	MemberAccess	visible_points . size
>15422	Identifier	size
>15423	Identifier	visible_points
>15424	CastTarget	int
>15425	Identifier	num_vis_pts
>15426	Identifier	num_vis_pts
>15427	IdentifierDeclType	int
>15428	IdentifierDeclStatement	 
>15429	IdentifierDecl	visible_points = GetVectorIntersection ( used_points , m_visible_points )
>15430	AssignmentExpr	visible_points = GetVectorIntersection ( used_points , m_visible_points )
>15431	CallExpression	GetVectorIntersection ( used_points , m_visible_points )
>15432	ArgumentList	used_points
>15433	Argument	m_visible_points
>15434	Identifier	m_visible_points
>15435	Argument	used_points
>15436	Identifier	used_points
>15437	Callee	GetVectorIntersection
>15438	Identifier	GetVectorIntersection
>15439	Identifier	visible_points
>15440	Identifier	visible_points
>15441	IdentifierDeclType	std 
>15442	ExpressionStatement	 
>15443	AssignmentExpr	m_feature_weight_map = img_new ( w , h )
>15444	CallExpression	img_new ( w , h )
>15445	ArgumentList	w
>15446	Argument	h
>15447	Identifier	h
>15448	Argument	w
>15449	Identifier	w
>15450	Callee	img_new
>15451	Identifier	img_new
>15452	Identifier	m_feature_weight_map
>15453	ForStatement	for ( int i = 0 ; i < w * h ; i ++ )
>15454	ExpressionStatement	 
>15455	AssignmentExpr	weights [ i ] = 0.0
>15456	PrimaryExpression	0.0
>15457	ArrayIndexing	weights [ i ]
>15458	Identifier	i
>15459	Identifier	weights
>15460	IncDecOp	 
>15461	IncDec	++
>15462	Identifier	i
>15463	Condition	 
>15464	RelationalExpression	i < w * h
>15465	MultiplicativeExpression	w * h
>15466	Identifier	h
>15467	Identifier	w
>15468	Identifier	i
>15469	ForInit	 
>15470	IdentifierDeclStatement	int i = 0 ;
>15471	IdentifierDecl	i = 0
>15472	AssignmentExpr	i = 0
>15473	PrimaryExpression	0
>15474	Identifier	i
>15475	Identifier	i
>15476	IdentifierDeclType	int
>15477	IdentifierDeclStatement	 
>15478	IdentifierDecl	* weights = new double [ w * h ]
>15479	AssignmentExpr	* weights = new double [ w * h ]
>15480	MultiplicativeExpression	w * h
>15481	Identifier	h
>15482	Identifier	w
>15483	Identifier	weights
>15484	Identifier	weights
>15485	IdentifierDeclType	double *
>15486	IdentifierDeclStatement	 
>15487	IdentifierDecl	h = iround ( m_img -> h * scale + 1 )
>15488	AssignmentExpr	h = iround ( m_img -> h * scale + 1 )
>15489	CallExpression	iround ( m_img -> h * scale + 1 )
>15490	ArgumentList	m_img -> h * scale + 1
>15491	Argument	m_img -> h * scale + 1
>15492	AdditiveExpression	m_img -> h * scale + 1
>15493	PrimaryExpression	1
>15494	MultiplicativeExpression	m_img -> h * scale
>15495	Identifier	scale
>15496	PtrMemberAccess	m_img -> h
>15497	Identifier	h
>15498	Identifier	m_img
>15499	Callee	iround
>15500	Identifier	iround
>15501	Identifier	h
>15502	Identifier	h
>15503	IdentifierDeclType	int
>15504	IdentifierDeclStatement	 
>15505	IdentifierDecl	w = iround ( m_img -> w * scale + 1 )
>15506	AssignmentExpr	w = iround ( m_img -> w * scale + 1 )
>15507	CallExpression	iround ( m_img -> w * scale + 1 )
>15508	ArgumentList	m_img -> w * scale + 1
>15509	Argument	m_img -> w * scale + 1
>15510	AdditiveExpression	m_img -> w * scale + 1
>15511	PrimaryExpression	1
>15512	MultiplicativeExpression	m_img -> w * scale
>15513	Identifier	scale
>15514	PtrMemberAccess	m_img -> w
>15515	Identifier	w
>15516	Identifier	m_img
>15517	Callee	iround
>15518	Identifier	iround
>15519	Identifier	w
>15520	Identifier	w
>15521	IdentifierDeclType	int
>15522	ExpressionStatement	 
>15523	AssignmentExpr	scale = 1.0 / ratio
>15524	MultiplicativeExpression	1.0 / ratio
>15525	Identifier	ratio
>15526	PrimaryExpression	1.0
>15527	Identifier	scale
>15528	IdentifierDeclStatement	 
>15529	IdentifierDecl	ratio = ( double ) dim / ( double ) MAX_DIM
>15530	AssignmentExpr	ratio = ( double ) dim / ( double ) MAX_DIM
>15531	MultiplicativeExpression	( double ) dim / ( double ) MAX_DIM
>15532	CastExpression	( double ) MAX_DIM
>15533	Identifier	MAX_DIM
>15534	CastTarget	double
>15535	CastExpression	( double ) dim
>15536	Identifier	dim
>15537	CastTarget	double
>15538	Identifier	ratio
>15539	Identifier	ratio
>15540	IdentifierDeclType	double
>15541	IdentifierDeclStatement	 
>15542	IdentifierDecl	dim = MAX ( m_img -> w , m_img -> h )
>15543	AssignmentExpr	dim = MAX ( m_img -> w , m_img -> h )
>15544	CallExpression	MAX ( m_img -> w , m_img -> h )
>15545	ArgumentList	m_img -> w
>15546	Argument	m_img -> h
>15547	PtrMemberAccess	m_img -> h
>15548	Identifier	h
>15549	Identifier	m_img
>15550	Argument	m_img -> w
>15551	PtrMemberAccess	m_img -> w
>15552	Identifier	w
>15553	Identifier	m_img
>15554	Callee	MAX
>15555	Identifier	MAX
>15556	Identifier	dim
>15557	Identifier	dim
>15558	IdentifierDeclType	int
>15559	IdentifierDeclStatement	 
>15560	IdentifierDecl	scale
>15561	Identifier	scale
>15562	IdentifierDeclType	double
>15563	ExpressionStatement	 
>15564	CallExpression	LoadImage ( )
>15565	ArgumentList	 
>15566	Callee	LoadImage
>15567	Identifier	LoadImage
>15568	ExpressionStatement	 
>15569	CallExpression	LoadKeysWithScaleRot ( false )
>15570	ArgumentList	false
>15571	Argument	false
>15572	Identifier	false
>15573	Callee	LoadKeysWithScaleRot
>15574	Identifier	LoadKeysWithScaleRot
>15575	IfStatement	if ( LoadFeatureWeightMap ( ) )
>15576	ReturnStatement	 
>15577	Condition	 
>15578	CallExpression	LoadFeatureWeightMap ( )
>15579	ArgumentList	 
>15580	Callee	LoadFeatureWeightMap
>15581	Identifier	LoadFeatureWeightMap
>15658	FunctionDef	ImageData 
>15659	ParameterList	const std 
>15660	Parameter	 
>15661	Identifier	pt_data
>15662	ParameterType	const std 
>15663	ReturnType	void
>15664	CompoundStatement	 
>15665	ExpressionStatement	 
>15666	CallExpression	printf ( \"[ImageData
>15667	ArgumentList	\"[ImageData
>15668	Argument	( double ) ( end - start ) / CLOCKS_PER_SEC
>15669	MultiplicativeExpression	( double ) ( end - start ) / CLOCKS_PER_SEC
>15670	Identifier	CLOCKS_PER_SEC
>15671	CastExpression	( double ) ( end - start )
>15672	AdditiveExpression	end - start
>15673	Identifier	start
>15674	Identifier	end
>15675	CastTarget	double
>15676	Argument	\"[ImageData
>15677	PrimaryExpression	\"[ImageData
>15678	Callee	printf
>15679	Identifier	printf
>15680	IdentifierDeclStatement	 
>15681	IdentifierDecl	end = clock ( )
>15682	AssignmentExpr	end = clock ( )
>15683	CallExpression	clock ( )
>15684	ArgumentList	 
>15685	Callee	clock
>15686	Identifier	clock
>15687	Identifier	end
>15688	Identifier	end
>15689	IdentifierDeclType	clock_t
>15690	ExpressionStatement	 
>15691	AssignmentExpr	m_tps_basis . m_basis_points = GetThinPlateSplineBasis ( pts , m_tps_basis . m_indices , 0.005 * MAX ( \
>15692	CallExpression	GetThinPlateSplineBasis ( pts , m_tps_basis . m_indices , 0.005 * MAX ( GetWidth ( ) , GetHeight ( ) ) , & ( m_tps_\
>15693	ArgumentList	pts
>15694	Argument	& ( m_tps_basis . m_ipiv )
>15695	UnaryOp	& ( m_tps_basis . m_ipiv )
>15696	MemberAccess	m_tps_basis . m_ipiv
>15697	Identifier	m_ipiv
>15698	Identifier	m_tps_basis
>15699	UnaryOperator	&
>15700	Argument	& ( m_tps_basis . m_LU )
>15701	UnaryOp	& ( m_tps_basis . m_LU )
>15702	MemberAccess	m_tps_basis . m_LU
>15703	Identifier	m_LU
>15704	Identifier	m_tps_basis
>15705	UnaryOperator	&
>15706	Argument	0.005 * MAX ( GetWidth ( ) , GetHeight ( ) )
>15707	MultiplicativeExpression	0.005 * MAX ( GetWidth ( ) , GetHeight ( ) )
>15708	CallExpression	MAX ( GetWidth ( ) , GetHeight ( ) )
>15709	ArgumentList	GetWidth ( )
>15710	Argument	GetHeight ( )
>15711	CallExpression	GetHeight ( )
>15712	ArgumentList	 
>15713	Callee	GetHeight
>15714	Identifier	GetHeight
>15715	Argument	GetWidth ( )
>15716	CallExpression	GetWidth ( )
>15717	ArgumentList	 
>15718	Callee	GetWidth
>15719	Identifier	GetWidth
>15720	Callee	MAX
>15721	Identifier	MAX
>15722	PrimaryExpression	0.005
>15723	Argument	m_tps_basis . m_indices
>15724	MemberAccess	m_tps_basis . m_indices
>15725	Identifier	m_indices
>15726	Identifier	m_tps_basis
>15727	Argument	pts
>15728	Identifier	pts
>15729	Callee	GetThinPlateSplineBasis
>15730	Identifier	GetThinPlateSplineBasis
>15731	MemberAccess	m_tps_basis . m_basis_points
>15732	Identifier	m_basis_points
>15733	Identifier	m_tps_basis
>15734	ForStatement	for ( int i = 0 ; i < num_vis_points ; i ++ )
>15735	CompoundStatement	 
>15736	ExpressionStatement	 
>15737	AssignmentExpr	pts [ i ] = DPoint ( p [ 0 ] , p [ 1 ] )
>15738	CallExpression	DPoint ( p [ 0 ] , p [ 1 ] )
>15739	ArgumentList	p [ 0 ]
>15740	Argument	p [ 1 ]
>15741	ArrayIndexing	p [ 1 ]
>15742	PrimaryExpression	1
>15743	Identifier	p
>15744	Argument	p [ 0 ]
>15745	ArrayIndexing	p [ 0 ]
>15746	PrimaryExpression	0
>15747	Identifier	p
>15748	Callee	DPoint
>15749	Identifier	DPoint
>15750	ArrayIndexing	pts [ i ]
>15751	Identifier	i
>15752	Identifier	pts
>15753	ExpressionStatement	 
>15754	CallExpression	m_camera . Project ( pt_data [ pt_idx ] . m_pos , p )
>15755	ArgumentList	pt_data [ pt_idx ] . m_pos
>15756	Argument	p
>15757	Identifier	p
>15758	Argument	pt_data [ pt_idx ] . m_pos
>15759	MemberAccess	pt_data [ pt_idx ] . m_pos
>15760	Identifier	m_pos
>15761	ArrayIndexing	pt_data [ pt_idx ]
>15762	Identifier	pt_idx
>15763	Identifier	pt_data
>15764	Callee	m_camera . Project
>15765	MemberAccess	m_camera . Project
>15766	Identifier	Project
>15767	Identifier	m_camera
>15768	IdentifierDeclStatement	 
>15769	IdentifierDecl	p [ 2 ]
>15770	PrimaryExpression	2
>15771	Identifier	p
>15772	IdentifierDeclType	double [ 2 ]
>15773	IdentifierDeclStatement	 
>15774	IdentifierDecl	pt_idx = m_visible_points [ i ]
>15775	AssignmentExpr	pt_idx = m_visible_points [ i ]
>15776	ArrayIndexing	m_visible_points [ i ]
>15777	Identifier	i
>15778	Identifier	m_visible_points
>15779	Identifier	pt_idx
>15780	Identifier	pt_idx
>15781	IdentifierDeclType	int
>15782	IncDecOp	 
>15783	IncDec	++
>15784	Identifier	i
>15785	Condition	 
>15786	RelationalExpression	i < num_vis_points
>15787	Identifier	num_vis_points
>15788	Identifier	i
>15789	ForInit	 
>15790	IdentifierDeclStatement	int i = 0 ;
>15791	IdentifierDecl	i = 0
>15792	AssignmentExpr	i = 0
>15793	PrimaryExpression	0
>15794	Identifier	i
>15795	Identifier	i
>15796	IdentifierDeclType	int
>15797	ExpressionStatement	 
>15798	CallExpression	pts . resize ( num_vis_points )
>15799	ArgumentList	num_vis_points
>15800	Argument	num_vis_points
>15801	Identifier	num_vis_points
>15802	Callee	pts . resize
>15803	MemberAccess	pts . resize
>15804	Identifier	resize
>15805	Identifier	pts
>15806	IdentifierDeclStatement	 
>15807	IdentifierDecl	pts
>15808	Identifier	pts
>15809	IdentifierDeclType	std 
>15810	IdentifierDeclStatement	 
>15811	IdentifierDecl	num_vis_points = ( int ) m_visible_points . size ( )
>15812	AssignmentExpr	num_vis_points = ( int ) m_visible_points . size ( )
>15813	CastExpression	( int ) m_visible_points . size ( )
>15814	CallExpression	m_visible_points . size ( )
>15815	ArgumentList	 
>15816	Callee	m_visible_points . size
>15817	MemberAccess	m_visible_points . size
>15818	Identifier	size
>15819	Identifier	m_visible_points
>15820	CastTarget	int
>15821	Identifier	num_vis_points
>15822	Identifier	num_vis_points
>15823	IdentifierDeclType	int
>15824	IdentifierDeclStatement	 
>15825	IdentifierDecl	start = clock ( )
>15826	AssignmentExpr	start = clock ( )
>15827	CallExpression	clock ( )
>15828	ArgumentList	 
>15829	Callee	clock
>15830	Identifier	clock
>15831	Identifier	start
>15832	Identifier	start
>15833	IdentifierDeclType	clock_t
>15834	ExpressionStatement	 
>15835	CallExpression	printf ( \"[ImageData
>15836	ArgumentList	\"[ImageData
>15837	Argument	m_name
>15838	Identifier	m_name
>15839	Argument	\"[ImageData
>15840	PrimaryExpression	\"[ImageData
>15841	Callee	printf
>15842	Identifier	printf
>15878	FunctionDef	ImageData 
>15879	ParameterList	 
>15880	ReturnType	void
>15881	CompoundStatement	 
>15882	ExpressionStatement	 
>15883	CallExpression	m_tps_basis . Clear ( )
>15884	ArgumentList	 
>15885	Callee	m_tps_basis . Clear
>15886	MemberAccess	m_tps_basis . Clear
>15887	Identifier	Clear
>15888	Identifier	m_tps_basis
>15893	FunctionDef	ImageData 
>15894	ParameterList	int nbins , double * r_hist , double * g_hist , double * b_hist
>15895	Parameter	 
>15896	Identifier	b_hist
>15897	ParameterType	double *
>15898	Parameter	 
>15899	Identifier	g_hist
>15900	ParameterType	double *
>15901	Parameter	 
>15902	Identifier	r_hist
>15903	ParameterType	double *
>15904	Parameter	 
>15905	Identifier	nbins
>15906	ParameterType	int
>15907	ReturnType	void
>15908	CompoundStatement	 
>15909	ForStatement	for ( int i = 0 ; i < nbins ; i ++ )
>15910	CompoundStatement	 
>15911	ExpressionStatement	 
>15912	AssignmentExpr	b_hist [ i ] /= b_sum
>15913	Identifier	b_sum
>15914	ArrayIndexing	b_hist [ i ]
>15915	Identifier	i
>15916	Identifier	b_hist
>15917	ExpressionStatement	 
>15918	AssignmentExpr	g_hist [ i ] /= g_sum
>15919	Identifier	g_sum
>15920	ArrayIndexing	g_hist [ i ]
>15921	Identifier	i
>15922	Identifier	g_hist
>15923	ExpressionStatement	 
>15924	AssignmentExpr	r_hist [ i ] /= r_sum
>15925	Identifier	r_sum
>15926	ArrayIndexing	r_hist [ i ]
>15927	Identifier	i
>15928	Identifier	r_hist
>15929	IncDecOp	 
>15930	IncDec	++
>15931	Identifier	i
>15932	Condition	 
>15933	RelationalExpression	i < nbins
>15934	Identifier	nbins
>15935	Identifier	i
>15936	ForInit	 
>15937	IdentifierDeclStatement	int i = 0 ;
>15938	IdentifierDecl	i = 0
>15939	AssignmentExpr	i = 0
>15940	PrimaryExpression	0
>15941	Identifier	i
>15942	Identifier	i
>15943	IdentifierDeclType	int
>15944	ForStatement	for ( int i = 0 ; i < nbins ; i ++ )
>15945	CompoundStatement	 
>15946	ExpressionStatement	 
>15947	AssignmentExpr	b_sum += b_hist [ i ]
>15948	ArrayIndexing	b_hist [ i ]
>15949	Identifier	i
>15950	Identifier	b_hist
>15951	Identifier	b_sum
>15952	ExpressionStatement	 
>15953	AssignmentExpr	g_sum += g_hist [ i ]
>15954	ArrayIndexing	g_hist [ i ]
>15955	Identifier	i
>15956	Identifier	g_hist
>15957	Identifier	g_sum
>15958	ExpressionStatement	 
>15959	AssignmentExpr	r_sum += r_hist [ i ]
>15960	ArrayIndexing	r_hist [ i ]
>15961	Identifier	i
>15962	Identifier	r_hist
>15963	Identifier	r_sum
>15964	IncDecOp	 
>15965	IncDec	++
>15966	Identifier	i
>15967	Condition	 
>15968	RelationalExpression	i < nbins
>15969	Identifier	nbins
>15970	Identifier	i
>15971	ForInit	 
>15972	IdentifierDeclStatement	int i = 0 ;
>15973	IdentifierDecl	i = 0
>15974	AssignmentExpr	i = 0
>15975	PrimaryExpression	0
>15976	Identifier	i
>15977	Identifier	i
>15978	IdentifierDeclType	int
>15979	IdentifierDeclStatement	 
>15980	IdentifierDecl	b_sum = 0.0
>15981	AssignmentExpr	b_sum = 0.0
>15982	PrimaryExpression	0.0
>15983	Identifier	b_sum
>15984	Identifier	b_sum
>15985	IdentifierDeclType	double
>15986	IdentifierDecl	g_sum = 0.0
>15987	AssignmentExpr	g_sum = 0.0
>15988	PrimaryExpression	0.0
>15989	Identifier	g_sum
>15990	Identifier	g_sum
>15991	IdentifierDeclType	double
>15992	IdentifierDecl	r_sum = 0.0
>15993	AssignmentExpr	r_sum = 0.0
>15994	PrimaryExpression	0.0
>15995	Identifier	r_sum
>15996	Identifier	r_sum
>15997	IdentifierDeclType	double
>15998	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>15999	CompoundStatement	 
>16000	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>16001	CompoundStatement	 
>16002	IfStatement	if ( b_f == nbins - 1 )
>16003	ElseStatement	else
>16004	CompoundStatement	 
>16005	ExpressionStatement	 
>16006	AssignmentExpr	b_hist [ b_c ] += wt * t
>16007	MultiplicativeExpression	wt * t
>16008	Identifier	t
>16009	Identifier	wt
>16010	ArrayIndexing	b_hist [ b_c ]
>16011	Identifier	b_c
>16012	Identifier	b_hist
>16013	ExpressionStatement	 
>16014	AssignmentExpr	b_hist [ b_f ] += wt * ( 1.0 - t )
>16015	MultiplicativeExpression	wt * ( 1.0 - t )
>16016	AdditiveExpression	1.0 - t
>16017	Identifier	t
>16018	PrimaryExpression	1.0
>16019	Identifier	wt
>16020	ArrayIndexing	b_hist [ b_f ]
>16021	Identifier	b_f
>16022	Identifier	b_hist
>16023	CompoundStatement	 
>16024	ExpressionStatement	 
>16025	AssignmentExpr	b_hist [ b_f ] += wt
>16026	Identifier	wt
>16027	ArrayIndexing	b_hist [ b_f ]
>16028	Identifier	b_f
>16029	Identifier	b_hist
>16030	Condition	 
>16031	EqualityExpression	b_f == nbins - 1
>16032	AdditiveExpression	nbins - 1
>16033	PrimaryExpression	1
>16034	Identifier	nbins
>16035	Identifier	b_f
>16036	ExpressionStatement	 
>16037	AssignmentExpr	t = b_norm - b_f
>16038	AdditiveExpression	b_norm - b_f
>16039	Identifier	b_f
>16040	Identifier	b_norm
>16041	Identifier	t
>16042	IfStatement	if ( g_f == nbins - 1 )
>16043	ElseStatement	else
>16044	CompoundStatement	 
>16045	ExpressionStatement	 
>16046	AssignmentExpr	g_hist [ g_c ] += wt * t
>16047	MultiplicativeExpression	wt * t
>16048	Identifier	t
>16049	Identifier	wt
>16050	ArrayIndexing	g_hist [ g_c ]
>16051	Identifier	g_c
>16052	Identifier	g_hist
>16053	ExpressionStatement	 
>16054	AssignmentExpr	g_hist [ g_f ] += wt * ( 1.0 - t )
>16055	MultiplicativeExpression	wt * ( 1.0 - t )
>16056	AdditiveExpression	1.0 - t
>16057	Identifier	t
>16058	PrimaryExpression	1.0
>16059	Identifier	wt
>16060	ArrayIndexing	g_hist [ g_f ]
>16061	Identifier	g_f
>16062	Identifier	g_hist
>16063	CompoundStatement	 
>16064	ExpressionStatement	 
>16065	AssignmentExpr	g_hist [ g_f ] += wt
>16066	Identifier	wt
>16067	ArrayIndexing	g_hist [ g_f ]
>16068	Identifier	g_f
>16069	Identifier	g_hist
>16070	Condition	 
>16071	EqualityExpression	g_f == nbins - 1
>16072	AdditiveExpression	nbins - 1
>16073	PrimaryExpression	1
>16074	Identifier	nbins
>16075	Identifier	g_f
>16076	ExpressionStatement	 
>16077	AssignmentExpr	t = g_norm - g_f
>16078	AdditiveExpression	g_norm - g_f
>16079	Identifier	g_f
>16080	Identifier	g_norm
>16081	Identifier	t
>16082	IfStatement	if ( r_f == nbins - 1 )
>16083	ElseStatement	else
>16084	CompoundStatement	 
>16085	ExpressionStatement	 
>16086	AssignmentExpr	r_hist [ r_c ] += wt * t
>16087	MultiplicativeExpression	wt * t
>16088	Identifier	t
>16089	Identifier	wt
>16090	ArrayIndexing	r_hist [ r_c ]
>16091	Identifier	r_c
>16092	Identifier	r_hist
>16093	ExpressionStatement	 
>16094	AssignmentExpr	r_hist [ r_f ] += wt * ( 1.0 - t )
>16095	MultiplicativeExpression	wt * ( 1.0 - t )
>16096	AdditiveExpression	1.0 - t
>16097	Identifier	t
>16098	PrimaryExpression	1.0
>16099	Identifier	wt
>16100	ArrayIndexing	r_hist [ r_f ]
>16101	Identifier	r_f
>16102	Identifier	r_hist
>16103	CompoundStatement	 
>16104	ExpressionStatement	 
>16105	AssignmentExpr	r_hist [ r_f ] += wt
>16106	Identifier	wt
>16107	ArrayIndexing	r_hist [ r_f ]
>16108	Identifier	r_f
>16109	Identifier	r_hist
>16110	Condition	 
>16111	EqualityExpression	r_f == nbins - 1
>16112	AdditiveExpression	nbins - 1
>16113	PrimaryExpression	1
>16114	Identifier	nbins
>16115	Identifier	r_f
>16116	ExpressionStatement	 
>16117	AssignmentExpr	t = r_norm - r_f
>16118	AdditiveExpression	r_norm - r_f
>16119	Identifier	r_f
>16120	Identifier	r_norm
>16121	Identifier	t
>16122	IdentifierDeclStatement	 
>16123	IdentifierDecl	t = 0.0
>16124	AssignmentExpr	t = 0.0
>16125	PrimaryExpression	0.0
>16126	Identifier	t
>16127	Identifier	t
>16128	IdentifierDeclType	double
>16129	ExpressionStatement	 
>16130	CallExpression	assert ( b_f <= nbins - 1 )
>16131	ArgumentList	b_f <= nbins - 1
>16132	Argument	b_f <= nbins - 1
>16133	RelationalExpression	b_f <= nbins - 1
>16134	AdditiveExpression	nbins - 1
>16135	PrimaryExpression	1
>16136	Identifier	nbins
>16137	Identifier	b_f
>16138	Callee	assert
>16139	Identifier	assert
>16140	ExpressionStatement	 
>16141	CallExpression	assert ( g_f <= nbins - 1 )
>16142	ArgumentList	g_f <= nbins - 1
>16143	Argument	g_f <= nbins - 1
>16144	RelationalExpression	g_f <= nbins - 1
>16145	AdditiveExpression	nbins - 1
>16146	PrimaryExpression	1
>16147	Identifier	nbins
>16148	Identifier	g_f
>16149	Callee	assert
>16150	Identifier	assert
>16151	ExpressionStatement	 
>16152	CallExpression	assert ( r_f <= nbins - 1 )
>16153	ArgumentList	r_f <= nbins - 1
>16154	Argument	r_f <= nbins - 1
>16155	RelationalExpression	r_f <= nbins - 1
>16156	AdditiveExpression	nbins - 1
>16157	PrimaryExpression	1
>16158	Identifier	nbins
>16159	Identifier	r_f
>16160	Callee	assert
>16161	Identifier	assert
>16162	IdentifierDeclStatement	 
>16163	IdentifierDecl	b_c = b_f + 1
>16164	AssignmentExpr	b_c = b_f + 1
>16165	AdditiveExpression	b_f + 1
>16166	PrimaryExpression	1
>16167	Identifier	b_f
>16168	Identifier	b_c
>16169	Identifier	b_c
>16170	IdentifierDeclType	int
>16171	IdentifierDeclStatement	 
>16172	IdentifierDecl	g_c = g_f + 1
>16173	AssignmentExpr	g_c = g_f + 1
>16174	AdditiveExpression	g_f + 1
>16175	PrimaryExpression	1
>16176	Identifier	g_f
>16177	Identifier	g_c
>16178	Identifier	g_c
>16179	IdentifierDeclType	int
>16180	IdentifierDeclStatement	 
>16181	IdentifierDecl	r_c = r_f + 1
>16182	AssignmentExpr	r_c = r_f + 1
>16183	AdditiveExpression	r_f + 1
>16184	PrimaryExpression	1
>16185	Identifier	r_f
>16186	Identifier	r_c
>16187	Identifier	r_c
>16188	IdentifierDeclType	int
>16189	IdentifierDeclStatement	 
>16190	IdentifierDecl	b_f = iround ( floor ( b_norm ) )
>16191	AssignmentExpr	b_f = iround ( floor ( b_norm ) )
>16192	CallExpression	iround ( floor ( b_norm ) )
>16193	ArgumentList	floor ( b_norm )
>16194	Argument	floor ( b_norm )
>16195	CallExpression	floor ( b_norm )
>16196	ArgumentList	b_norm
>16197	Argument	b_norm
>16198	Identifier	b_norm
>16199	Callee	floor
>16200	Identifier	floor
>16201	Callee	iround
>16202	Identifier	iround
>16203	Identifier	b_f
>16204	Identifier	b_f
>16205	IdentifierDeclType	int
>16206	IdentifierDeclStatement	 
>16207	IdentifierDecl	g_f = iround ( floor ( g_norm ) )
>16208	AssignmentExpr	g_f = iround ( floor ( g_norm ) )
>16209	CallExpression	iround ( floor ( g_norm ) )
>16210	ArgumentList	floor ( g_norm )
>16211	Argument	floor ( g_norm )
>16212	CallExpression	floor ( g_norm )
>16213	ArgumentList	g_norm
>16214	Argument	g_norm
>16215	Identifier	g_norm
>16216	Callee	floor
>16217	Identifier	floor
>16218	Callee	iround
>16219	Identifier	iround
>16220	Identifier	g_f
>16221	Identifier	g_f
>16222	IdentifierDeclType	int
>16223	IdentifierDeclStatement	 
>16224	IdentifierDecl	r_f = iround ( floor ( r_norm ) )
>16225	AssignmentExpr	r_f = iround ( floor ( r_norm ) )
>16226	CallExpression	iround ( floor ( r_norm ) )
>16227	ArgumentList	floor ( r_norm )
>16228	Argument	floor ( r_norm )
>16229	CallExpression	floor ( r_norm )
>16230	ArgumentList	r_norm
>16231	Argument	r_norm
>16232	Identifier	r_norm
>16233	Callee	floor
>16234	Identifier	floor
>16235	Callee	iround
>16236	Identifier	iround
>16237	Identifier	r_f
>16238	Identifier	r_f
>16239	IdentifierDeclType	int
>16240	IdentifierDeclStatement	 
>16241	IdentifierDecl	b_norm = c . b / 256.0 * nbins
>16242	AssignmentExpr	b_norm = c . b / 256.0 * nbins
>16243	MultiplicativeExpression	c . b / 256.0 * nbins
>16244	MultiplicativeExpression	256.0 * nbins
>16245	Identifier	nbins
>16246	PrimaryExpression	256.0
>16247	MemberAccess	c . b
>16248	Identifier	b
>16249	Identifier	c
>16250	Identifier	b_norm
>16251	Identifier	b_norm
>16252	IdentifierDeclType	double
>16253	IdentifierDeclStatement	 
>16254	IdentifierDecl	g_norm = c . g / 256.0 * nbins
>16255	AssignmentExpr	g_norm = c . g / 256.0 * nbins
>16256	MultiplicativeExpression	c . g / 256.0 * nbins
>16257	MultiplicativeExpression	256.0 * nbins
>16258	Identifier	nbins
>16259	PrimaryExpression	256.0
>16260	MemberAccess	c . g
>16261	Identifier	g
>16262	Identifier	c
>16263	Identifier	g_norm
>16264	Identifier	g_norm
>16265	IdentifierDeclType	double
>16266	IdentifierDeclStatement	 
>16267	IdentifierDecl	r_norm = c . r / 256.0 * nbins
>16268	AssignmentExpr	r_norm = c . r / 256.0 * nbins
>16269	MultiplicativeExpression	c . r / 256.0 * nbins
>16270	MultiplicativeExpression	256.0 * nbins
>16271	Identifier	nbins
>16272	PrimaryExpression	256.0
>16273	MemberAccess	c . r
>16274	Identifier	r
>16275	Identifier	c
>16276	Identifier	r_norm
>16277	Identifier	r_norm
>16278	IdentifierDeclType	double
>16279	IdentifierDeclStatement	 
>16280	IdentifierDecl	wt = cwt . r / 255.0
>16281	AssignmentExpr	wt = cwt . r / 255.0
>16282	MultiplicativeExpression	cwt . r / 255.0
>16283	PrimaryExpression	255.0
>16284	MemberAccess	cwt . r
>16285	Identifier	r
>16286	Identifier	cwt
>16287	Identifier	wt
>16288	Identifier	wt
>16289	IdentifierDeclType	double
>16290	IdentifierDeclStatement	 
>16291	IdentifierDecl	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>16292	AssignmentExpr	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>16293	CallExpression	img_get_pixel ( m_feature_weight_map , x , y )
>16294	ArgumentList	m_feature_weight_map
>16295	Argument	y
>16296	Identifier	y
>16297	Argument	x
>16298	Identifier	x
>16299	Argument	m_feature_weight_map
>16300	Identifier	m_feature_weight_map
>16301	Callee	img_get_pixel
>16302	Identifier	img_get_pixel
>16303	Identifier	cwt
>16304	Identifier	cwt
>16305	IdentifierDeclType	color_t
>16306	IdentifierDeclStatement	 
>16307	IdentifierDecl	c = img_get_pixel ( m_thumb256 , x , y )
>16308	AssignmentExpr	c = img_get_pixel ( m_thumb256 , x , y )
>16309	CallExpression	img_get_pixel ( m_thumb256 , x , y )
>16310	ArgumentList	m_thumb256
>16311	Argument	y
>16312	Identifier	y
>16313	Argument	x
>16314	Identifier	x
>16315	Argument	m_thumb256
>16316	Identifier	m_thumb256
>16317	Callee	img_get_pixel
>16318	Identifier	img_get_pixel
>16319	Identifier	c
>16320	Identifier	c
>16321	IdentifierDeclType	color_t
>16322	IncDecOp	 
>16323	IncDec	++
>16324	Identifier	x
>16325	Condition	 
>16326	RelationalExpression	x < w
>16327	Identifier	w
>16328	Identifier	x
>16329	ForInit	 
>16330	IdentifierDeclStatement	int x = 0 ;
>16331	IdentifierDecl	x = 0
>16332	AssignmentExpr	x = 0
>16333	PrimaryExpression	0
>16334	Identifier	x
>16335	Identifier	x
>16336	IdentifierDeclType	int
>16337	IncDecOp	 
>16338	IncDec	++
>16339	Identifier	y
>16340	Condition	 
>16341	RelationalExpression	y < h
>16342	Identifier	h
>16343	Identifier	y
>16344	ForInit	 
>16345	IdentifierDeclStatement	int y = 0 ;
>16346	IdentifierDecl	y = 0
>16347	AssignmentExpr	y = 0
>16348	PrimaryExpression	0
>16349	Identifier	y
>16350	Identifier	y
>16351	IdentifierDeclType	int
>16352	IdentifierDeclStatement	 
>16353	IdentifierDecl	h = m_thumb256 -> h
>16354	AssignmentExpr	h = m_thumb256 -> h
>16355	PtrMemberAccess	m_thumb256 -> h
>16356	Identifier	h
>16357	Identifier	m_thumb256
>16358	Identifier	h
>16359	Identifier	h
>16360	IdentifierDeclType	int
>16361	IdentifierDeclStatement	 
>16362	IdentifierDecl	w = m_thumb256 -> w
>16363	AssignmentExpr	w = m_thumb256 -> w
>16364	PtrMemberAccess	m_thumb256 -> w
>16365	Identifier	w
>16366	Identifier	m_thumb256
>16367	Identifier	w
>16368	Identifier	w
>16369	IdentifierDeclType	int
>16370	IfStatement	if ( ! LoadFeatureWeightMap ( ) )
>16371	CompoundStatement	 
>16372	ReturnStatement	 
>16373	ExpressionStatement	 
>16374	Statement	 
>16375	Statement	 
>16376	Statement	 
>16377	Statement	 
>16378	Statement	 
>16379	Statement	 
>16380	Statement	 
>16381	Condition	 
>16382	UnaryOp	! LoadFeatureWeightMap ( )
>16383	CallExpression	LoadFeatureWeightMap ( )
>16384	ArgumentList	 
>16385	Callee	LoadFeatureWeightMap
>16386	Identifier	LoadFeatureWeightMap
>16387	UnaryOperator	!
>16388	ExpressionStatement	 
>16389	CallExpression	LoadThumb256 ( )
>16390	ArgumentList	 
>16391	Callee	LoadThumb256
>16392	Identifier	LoadThumb256
>16444	FunctionDef	ImageData 
>16445	ParameterList	int nbins , double * L_hist , double * U_hist , double * V_hist
>16446	Parameter	 
>16447	Identifier	V_hist
>16448	ParameterType	double *
>16449	Parameter	 
>16450	Identifier	U_hist
>16451	ParameterType	double *
>16452	Parameter	 
>16453	Identifier	L_hist
>16454	ParameterType	double *
>16455	Parameter	 
>16456	Identifier	nbins
>16457	ParameterType	int
>16458	ReturnType	void
>16459	CompoundStatement	 
>16460	ForStatement	for ( int i = 0 ; i < nbins ; i ++ )
>16461	CompoundStatement	 
>16462	ExpressionStatement	 
>16463	AssignmentExpr	V_hist [ i ] /= V_sum
>16464	Identifier	V_sum
>16465	ArrayIndexing	V_hist [ i ]
>16466	Identifier	i
>16467	Identifier	V_hist
>16468	ExpressionStatement	 
>16469	AssignmentExpr	U_hist [ i ] /= U_sum
>16470	Identifier	U_sum
>16471	ArrayIndexing	U_hist [ i ]
>16472	Identifier	i
>16473	Identifier	U_hist
>16474	ExpressionStatement	 
>16475	AssignmentExpr	L_hist [ i ] /= L_sum
>16476	Identifier	L_sum
>16477	ArrayIndexing	L_hist [ i ]
>16478	Identifier	i
>16479	Identifier	L_hist
>16480	IncDecOp	 
>16481	IncDec	++
>16482	Identifier	i
>16483	Condition	 
>16484	RelationalExpression	i < nbins
>16485	Identifier	nbins
>16486	Identifier	i
>16487	ForInit	 
>16488	IdentifierDeclStatement	int i = 0 ;
>16489	IdentifierDecl	i = 0
>16490	AssignmentExpr	i = 0
>16491	PrimaryExpression	0
>16492	Identifier	i
>16493	Identifier	i
>16494	IdentifierDeclType	int
>16495	ForStatement	for ( int i = 0 ; i < nbins ; i ++ )
>16496	CompoundStatement	 
>16497	ExpressionStatement	 
>16498	AssignmentExpr	V_sum += V_hist [ i ]
>16499	ArrayIndexing	V_hist [ i ]
>16500	Identifier	i
>16501	Identifier	V_hist
>16502	Identifier	V_sum
>16503	ExpressionStatement	 
>16504	AssignmentExpr	U_sum += U_hist [ i ]
>16505	ArrayIndexing	U_hist [ i ]
>16506	Identifier	i
>16507	Identifier	U_hist
>16508	Identifier	U_sum
>16509	ExpressionStatement	 
>16510	AssignmentExpr	L_sum += L_hist [ i ]
>16511	ArrayIndexing	L_hist [ i ]
>16512	Identifier	i
>16513	Identifier	L_hist
>16514	Identifier	L_sum
>16515	IncDecOp	 
>16516	IncDec	++
>16517	Identifier	i
>16518	Condition	 
>16519	RelationalExpression	i < nbins
>16520	Identifier	nbins
>16521	Identifier	i
>16522	ForInit	 
>16523	IdentifierDeclStatement	int i = 0 ;
>16524	IdentifierDecl	i = 0
>16525	AssignmentExpr	i = 0
>16526	PrimaryExpression	0
>16527	Identifier	i
>16528	Identifier	i
>16529	IdentifierDeclType	int
>16530	IdentifierDeclStatement	 
>16531	IdentifierDecl	V_sum = 0.0
>16532	AssignmentExpr	V_sum = 0.0
>16533	PrimaryExpression	0.0
>16534	Identifier	V_sum
>16535	Identifier	V_sum
>16536	IdentifierDeclType	double
>16537	IdentifierDecl	U_sum = 0.0
>16538	AssignmentExpr	U_sum = 0.0
>16539	PrimaryExpression	0.0
>16540	Identifier	U_sum
>16541	Identifier	U_sum
>16542	IdentifierDeclType	double
>16543	IdentifierDecl	L_sum = 0.0
>16544	AssignmentExpr	L_sum = 0.0
>16545	PrimaryExpression	0.0
>16546	Identifier	L_sum
>16547	Identifier	L_sum
>16548	IdentifierDeclType	double
>16549	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>16550	CompoundStatement	 
>16551	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>16552	CompoundStatement	 
>16553	IfStatement	if ( V_f == nbins - 1 )
>16554	ElseStatement	else
>16555	CompoundStatement	 
>16556	ExpressionStatement	 
>16557	AssignmentExpr	V_hist [ V_c ] += wt * t
>16558	MultiplicativeExpression	wt * t
>16559	Identifier	t
>16560	Identifier	wt
>16561	ArrayIndexing	V_hist [ V_c ]
>16562	Identifier	V_c
>16563	Identifier	V_hist
>16564	ExpressionStatement	 
>16565	AssignmentExpr	V_hist [ V_f ] += wt * ( 1.0 - t )
>16566	MultiplicativeExpression	wt * ( 1.0 - t )
>16567	AdditiveExpression	1.0 - t
>16568	Identifier	t
>16569	PrimaryExpression	1.0
>16570	Identifier	wt
>16571	ArrayIndexing	V_hist [ V_f ]
>16572	Identifier	V_f
>16573	Identifier	V_hist
>16574	CompoundStatement	 
>16575	ExpressionStatement	 
>16576	AssignmentExpr	V_hist [ V_f ] += wt
>16577	Identifier	wt
>16578	ArrayIndexing	V_hist [ V_f ]
>16579	Identifier	V_f
>16580	Identifier	V_hist
>16581	Condition	 
>16582	EqualityExpression	V_f == nbins - 1
>16583	AdditiveExpression	nbins - 1
>16584	PrimaryExpression	1
>16585	Identifier	nbins
>16586	Identifier	V_f
>16587	ExpressionStatement	 
>16588	AssignmentExpr	t = V_norm - V_f
>16589	AdditiveExpression	V_norm - V_f
>16590	Identifier	V_f
>16591	Identifier	V_norm
>16592	Identifier	t
>16593	IfStatement	if ( U_f == nbins - 1 )
>16594	ElseStatement	else
>16595	CompoundStatement	 
>16596	ExpressionStatement	 
>16597	AssignmentExpr	U_hist [ U_c ] += wt * t
>16598	MultiplicativeExpression	wt * t
>16599	Identifier	t
>16600	Identifier	wt
>16601	ArrayIndexing	U_hist [ U_c ]
>16602	Identifier	U_c
>16603	Identifier	U_hist
>16604	ExpressionStatement	 
>16605	AssignmentExpr	U_hist [ U_f ] += wt * ( 1.0 - t )
>16606	MultiplicativeExpression	wt * ( 1.0 - t )
>16607	AdditiveExpression	1.0 - t
>16608	Identifier	t
>16609	PrimaryExpression	1.0
>16610	Identifier	wt
>16611	ArrayIndexing	U_hist [ U_f ]
>16612	Identifier	U_f
>16613	Identifier	U_hist
>16614	CompoundStatement	 
>16615	ExpressionStatement	 
>16616	AssignmentExpr	U_hist [ U_f ] += wt
>16617	Identifier	wt
>16618	ArrayIndexing	U_hist [ U_f ]
>16619	Identifier	U_f
>16620	Identifier	U_hist
>16621	Condition	 
>16622	EqualityExpression	U_f == nbins - 1
>16623	AdditiveExpression	nbins - 1
>16624	PrimaryExpression	1
>16625	Identifier	nbins
>16626	Identifier	U_f
>16627	ExpressionStatement	 
>16628	AssignmentExpr	t = U_norm - U_f
>16629	AdditiveExpression	U_norm - U_f
>16630	Identifier	U_f
>16631	Identifier	U_norm
>16632	Identifier	t
>16633	IfStatement	if ( L_f == nbins - 1 )
>16634	ElseStatement	else
>16635	CompoundStatement	 
>16636	ExpressionStatement	 
>16637	AssignmentExpr	L_hist [ L_c ] += wt * t
>16638	MultiplicativeExpression	wt * t
>16639	Identifier	t
>16640	Identifier	wt
>16641	ArrayIndexing	L_hist [ L_c ]
>16642	Identifier	L_c
>16643	Identifier	L_hist
>16644	ExpressionStatement	 
>16645	AssignmentExpr	L_hist [ L_f ] += wt * ( 1.0 - t )
>16646	MultiplicativeExpression	wt * ( 1.0 - t )
>16647	AdditiveExpression	1.0 - t
>16648	Identifier	t
>16649	PrimaryExpression	1.0
>16650	Identifier	wt
>16651	ArrayIndexing	L_hist [ L_f ]
>16652	Identifier	L_f
>16653	Identifier	L_hist
>16654	CompoundStatement	 
>16655	ExpressionStatement	 
>16656	AssignmentExpr	L_hist [ L_f ] += wt
>16657	Identifier	wt
>16658	ArrayIndexing	L_hist [ L_f ]
>16659	Identifier	L_f
>16660	Identifier	L_hist
>16661	Condition	 
>16662	EqualityExpression	L_f == nbins - 1
>16663	AdditiveExpression	nbins - 1
>16664	PrimaryExpression	1
>16665	Identifier	nbins
>16666	Identifier	L_f
>16667	ExpressionStatement	 
>16668	AssignmentExpr	t = L_norm - L_f
>16669	AdditiveExpression	L_norm - L_f
>16670	Identifier	L_f
>16671	Identifier	L_norm
>16672	Identifier	t
>16673	IdentifierDeclStatement	 
>16674	IdentifierDecl	t = 0.0
>16675	AssignmentExpr	t = 0.0
>16676	PrimaryExpression	0.0
>16677	Identifier	t
>16678	Identifier	t
>16679	IdentifierDeclType	double
>16680	ExpressionStatement	 
>16681	CallExpression	assert ( V_f <= nbins - 1 )
>16682	ArgumentList	V_f <= nbins - 1
>16683	Argument	V_f <= nbins - 1
>16684	RelationalExpression	V_f <= nbins - 1
>16685	AdditiveExpression	nbins - 1
>16686	PrimaryExpression	1
>16687	Identifier	nbins
>16688	Identifier	V_f
>16689	Callee	assert
>16690	Identifier	assert
>16691	ExpressionStatement	 
>16692	CallExpression	assert ( U_f <= nbins - 1 )
>16693	ArgumentList	U_f <= nbins - 1
>16694	Argument	U_f <= nbins - 1
>16695	RelationalExpression	U_f <= nbins - 1
>16696	AdditiveExpression	nbins - 1
>16697	PrimaryExpression	1
>16698	Identifier	nbins
>16699	Identifier	U_f
>16700	Callee	assert
>16701	Identifier	assert
>16702	ExpressionStatement	 
>16703	CallExpression	assert ( L_f <= nbins - 1 )
>16704	ArgumentList	L_f <= nbins - 1
>16705	Argument	L_f <= nbins - 1
>16706	RelationalExpression	L_f <= nbins - 1
>16707	AdditiveExpression	nbins - 1
>16708	PrimaryExpression	1
>16709	Identifier	nbins
>16710	Identifier	L_f
>16711	Callee	assert
>16712	Identifier	assert
>16713	IdentifierDeclStatement	 
>16714	IdentifierDecl	V_c = V_f + 1
>16715	AssignmentExpr	V_c = V_f + 1
>16716	AdditiveExpression	V_f + 1
>16717	PrimaryExpression	1
>16718	Identifier	V_f
>16719	Identifier	V_c
>16720	Identifier	V_c
>16721	IdentifierDeclType	int
>16722	IdentifierDeclStatement	 
>16723	IdentifierDecl	U_c = U_f + 1
>16724	AssignmentExpr	U_c = U_f + 1
>16725	AdditiveExpression	U_f + 1
>16726	PrimaryExpression	1
>16727	Identifier	U_f
>16728	Identifier	U_c
>16729	Identifier	U_c
>16730	IdentifierDeclType	int
>16731	IdentifierDeclStatement	 
>16732	IdentifierDecl	L_c = L_f + 1
>16733	AssignmentExpr	L_c = L_f + 1
>16734	AdditiveExpression	L_f + 1
>16735	PrimaryExpression	1
>16736	Identifier	L_f
>16737	Identifier	L_c
>16738	Identifier	L_c
>16739	IdentifierDeclType	int
>16740	IdentifierDeclStatement	 
>16741	IdentifierDecl	V_f = iround ( floor ( V_norm ) )
>16742	AssignmentExpr	V_f = iround ( floor ( V_norm ) )
>16743	CallExpression	iround ( floor ( V_norm ) )
>16744	ArgumentList	floor ( V_norm )
>16745	Argument	floor ( V_norm )
>16746	CallExpression	floor ( V_norm )
>16747	ArgumentList	V_norm
>16748	Argument	V_norm
>16749	Identifier	V_norm
>16750	Callee	floor
>16751	Identifier	floor
>16752	Callee	iround
>16753	Identifier	iround
>16754	Identifier	V_f
>16755	Identifier	V_f
>16756	IdentifierDeclType	int
>16757	IdentifierDeclStatement	 
>16758	IdentifierDecl	U_f = iround ( floor ( U_norm ) )
>16759	AssignmentExpr	U_f = iround ( floor ( U_norm ) )
>16760	CallExpression	iround ( floor ( U_norm ) )
>16761	ArgumentList	floor ( U_norm )
>16762	Argument	floor ( U_norm )
>16763	CallExpression	floor ( U_norm )
>16764	ArgumentList	U_norm
>16765	Argument	U_norm
>16766	Identifier	U_norm
>16767	Callee	floor
>16768	Identifier	floor
>16769	Callee	iround
>16770	Identifier	iround
>16771	Identifier	U_f
>16772	Identifier	U_f
>16773	IdentifierDeclType	int
>16774	IdentifierDeclStatement	 
>16775	IdentifierDecl	L_f = iround ( floor ( L_norm ) )
>16776	AssignmentExpr	L_f = iround ( floor ( L_norm ) )
>16777	CallExpression	iround ( floor ( L_norm ) )
>16778	ArgumentList	floor ( L_norm )
>16779	Argument	floor ( L_norm )
>16780	CallExpression	floor ( L_norm )
>16781	ArgumentList	L_norm
>16782	Argument	L_norm
>16783	Identifier	L_norm
>16784	Callee	floor
>16785	Identifier	floor
>16786	Callee	iround
>16787	Identifier	iround
>16788	Identifier	L_f
>16789	Identifier	L_f
>16790	IdentifierDeclType	int
>16791	ExpressionStatement	 
>16792	AssignmentExpr	V_norm = CLAMP ( V_norm , 0.0 , 1.0 ) * nbins
>16793	MultiplicativeExpression	CLAMP ( V_norm , 0.0 , 1.0 ) * nbins
>16794	Identifier	nbins
>16795	CallExpression	CLAMP ( V_norm , 0.0 , 1.0 )
>16796	ArgumentList	V_norm
>16797	Argument	1.0
>16798	PrimaryExpression	1.0
>16799	Argument	0.0
>16800	PrimaryExpression	0.0
>16801	Argument	V_norm
>16802	Identifier	V_norm
>16803	Callee	CLAMP
>16804	Identifier	CLAMP
>16805	Identifier	V_norm
>16806	ExpressionStatement	 
>16807	AssignmentExpr	U_norm = CLAMP ( U_norm , 0.0 , 1.0 ) * nbins
>16808	MultiplicativeExpression	CLAMP ( U_norm , 0.0 , 1.0 ) * nbins
>16809	Identifier	nbins
>16810	CallExpression	CLAMP ( U_norm , 0.0 , 1.0 )
>16811	ArgumentList	U_norm
>16812	Argument	1.0
>16813	PrimaryExpression	1.0
>16814	Argument	0.0
>16815	PrimaryExpression	0.0
>16816	Argument	U_norm
>16817	Identifier	U_norm
>16818	Callee	CLAMP
>16819	Identifier	CLAMP
>16820	Identifier	U_norm
>16821	ExpressionStatement	 
>16822	AssignmentExpr	L_norm = CLAMP ( L_norm , 0.0 , 1.0 ) * nbins
>16823	MultiplicativeExpression	CLAMP ( L_norm , 0.0 , 1.0 ) * nbins
>16824	Identifier	nbins
>16825	CallExpression	CLAMP ( L_norm , 0.0 , 1.0 )
>16826	ArgumentList	L_norm
>16827	Argument	1.0
>16828	PrimaryExpression	1.0
>16829	Argument	0.0
>16830	PrimaryExpression	0.0
>16831	Argument	L_norm
>16832	Identifier	L_norm
>16833	Callee	CLAMP
>16834	Identifier	CLAMP
>16835	Identifier	L_norm
>16836	IdentifierDeclStatement	 
>16837	IdentifierDecl	V_norm = ( V - Vmin ) / ( Vmax - Vmin )
>16838	AssignmentExpr	V_norm = ( V - Vmin ) / ( Vmax - Vmin )
>16839	MultiplicativeExpression	( V - Vmin ) / ( Vmax - Vmin )
>16840	AdditiveExpression	Vmax - Vmin
>16841	Identifier	Vmin
>16842	Identifier	Vmax
>16843	AdditiveExpression	V - Vmin
>16844	Identifier	Vmin
>16845	Identifier	V
>16846	Identifier	V_norm
>16847	Identifier	V_norm
>16848	IdentifierDeclType	double
>16849	IdentifierDeclStatement	 
>16850	IdentifierDecl	U_norm = ( U - Umin ) / ( Umax - Umin )
>16851	AssignmentExpr	U_norm = ( U - Umin ) / ( Umax - Umin )
>16852	MultiplicativeExpression	( U - Umin ) / ( Umax - Umin )
>16853	AdditiveExpression	Umax - Umin
>16854	Identifier	Umin
>16855	Identifier	Umax
>16856	AdditiveExpression	U - Umin
>16857	Identifier	Umin
>16858	Identifier	U
>16859	Identifier	U_norm
>16860	Identifier	U_norm
>16861	IdentifierDeclType	double
>16862	IdentifierDeclStatement	 
>16863	IdentifierDecl	L_norm = ( L - Lmin ) / ( Lmax - Lmin )
>16864	AssignmentExpr	L_norm = ( L - Lmin ) / ( Lmax - Lmin )
>16865	MultiplicativeExpression	( L - Lmin ) / ( Lmax - Lmin )
>16866	AdditiveExpression	Lmax - Lmin
>16867	Identifier	Lmin
>16868	Identifier	Lmax
>16869	AdditiveExpression	L - Lmin
>16870	Identifier	Lmin
>16871	Identifier	L
>16872	Identifier	L_norm
>16873	Identifier	L_norm
>16874	IdentifierDeclType	double
>16875	IdentifierDeclStatement	 
>16876	IdentifierDecl	wt = cwt . r / 255.0
>16877	AssignmentExpr	wt = cwt . r / 255.0
>16878	MultiplicativeExpression	cwt . r / 255.0
>16879	PrimaryExpression	255.0
>16880	MemberAccess	cwt . r
>16881	Identifier	r
>16882	Identifier	cwt
>16883	Identifier	wt
>16884	Identifier	wt
>16885	IdentifierDeclType	double
>16886	IfStatement	if ( Vmax < V || V < Vmin )
>16887	ExpressionStatement	 
>16888	CallExpression	printf ( \"V
>16889	ArgumentList	\"V
>16890	Argument	V
>16891	Identifier	V
>16892	Argument	\"V
>16893	PrimaryExpression	\"V
>16894	Callee	printf
>16895	Identifier	printf
>16896	Condition	 
>16897	OrExpression	Vmax < V || V < Vmin
>16898	RelationalExpression	V < Vmin
>16899	Identifier	Vmin
>16900	Identifier	V
>16901	RelationalExpression	Vmax < V
>16902	Identifier	V
>16903	Identifier	Vmax
>16904	IfStatement	if ( Umax < U || U < Umin )
>16905	ExpressionStatement	 
>16906	CallExpression	printf ( \"U
>16907	ArgumentList	\"U
>16908	Argument	U
>16909	Identifier	U
>16910	Argument	\"U
>16911	PrimaryExpression	\"U
>16912	Callee	printf
>16913	Identifier	printf
>16914	Condition	 
>16915	OrExpression	Umax < U || U < Umin
>16916	RelationalExpression	U < Umin
>16917	Identifier	Umin
>16918	Identifier	U
>16919	RelationalExpression	Umax < U
>16920	Identifier	U
>16921	Identifier	Umax
>16922	IfStatement	if ( Lmax < L || L < Lmin )
>16923	ExpressionStatement	 
>16924	CallExpression	printf ( \"L
>16925	ArgumentList	\"L
>16926	Argument	L
>16927	Identifier	L
>16928	Argument	\"L
>16929	PrimaryExpression	\"L
>16930	Callee	printf
>16931	Identifier	printf
>16932	Condition	 
>16933	OrExpression	Lmax < L || L < Lmin
>16934	RelationalExpression	L < Lmin
>16935	Identifier	Lmin
>16936	Identifier	L
>16937	RelationalExpression	Lmax < L
>16938	Identifier	L
>16939	Identifier	Lmax
>16940	ExpressionStatement	 
>16941	CallExpression	color_RGBtoLUV ( c . r , c . g , c . b , & L , & U , & V )
>16942	ArgumentList	c . r
>16943	Argument	& V
>16944	UnaryOp	& V
>16945	Identifier	V
>16946	UnaryOperator	&
>16947	Argument	& U
>16948	UnaryOp	& U
>16949	Identifier	U
>16950	UnaryOperator	&
>16951	Argument	& L
>16952	UnaryOp	& L
>16953	Identifier	L
>16954	UnaryOperator	&
>16955	Argument	c . b
>16956	MemberAccess	c . b
>16957	Identifier	b
>16958	Identifier	c
>16959	Argument	c . g
>16960	MemberAccess	c . g
>16961	Identifier	g
>16962	Identifier	c
>16963	Argument	c . r
>16964	MemberAccess	c . r
>16965	Identifier	r
>16966	Identifier	c
>16967	Callee	color_RGBtoLUV
>16968	Identifier	color_RGBtoLUV
>16969	IdentifierDeclStatement	 
>16970	IdentifierDecl	V
>16971	Identifier	V
>16972	IdentifierDeclType	double
>16973	IdentifierDecl	U
>16974	Identifier	U
>16975	IdentifierDeclType	double
>16976	IdentifierDecl	L
>16977	Identifier	L
>16978	IdentifierDeclType	double
>16979	IdentifierDeclStatement	 
>16980	IdentifierDecl	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>16981	AssignmentExpr	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>16982	CallExpression	img_get_pixel ( m_feature_weight_map , x , y )
>16983	ArgumentList	m_feature_weight_map
>16984	Argument	y
>16985	Identifier	y
>16986	Argument	x
>16987	Identifier	x
>16988	Argument	m_feature_weight_map
>16989	Identifier	m_feature_weight_map
>16990	Callee	img_get_pixel
>16991	Identifier	img_get_pixel
>16992	Identifier	cwt
>16993	Identifier	cwt
>16994	IdentifierDeclType	color_t
>16995	IdentifierDeclStatement	 
>16996	IdentifierDecl	c = img_get_pixel ( m_thumb256 , x , y )
>16997	AssignmentExpr	c = img_get_pixel ( m_thumb256 , x , y )
>16998	CallExpression	img_get_pixel ( m_thumb256 , x , y )
>16999	ArgumentList	m_thumb256
>17000	Argument	y
>17001	Identifier	y
>17002	Argument	x
>17003	Identifier	x
>17004	Argument	m_thumb256
>17005	Identifier	m_thumb256
>17006	Callee	img_get_pixel
>17007	Identifier	img_get_pixel
>17008	Identifier	c
>17009	Identifier	c
>17010	IdentifierDeclType	color_t
>17011	IncDecOp	 
>17012	IncDec	++
>17013	Identifier	x
>17014	Condition	 
>17015	RelationalExpression	x < w
>17016	Identifier	w
>17017	Identifier	x
>17018	ForInit	 
>17019	IdentifierDeclStatement	int x = 0 ;
>17020	IdentifierDecl	x = 0
>17021	AssignmentExpr	x = 0
>17022	PrimaryExpression	0
>17023	Identifier	x
>17024	Identifier	x
>17025	IdentifierDeclType	int
>17026	IncDecOp	 
>17027	IncDec	++
>17028	Identifier	y
>17029	Condition	 
>17030	RelationalExpression	y < h
>17031	Identifier	h
>17032	Identifier	y
>17033	ForInit	 
>17034	IdentifierDeclStatement	int y = 0 ;
>17035	IdentifierDecl	y = 0
>17036	AssignmentExpr	y = 0
>17037	PrimaryExpression	0
>17038	Identifier	y
>17039	Identifier	y
>17040	IdentifierDeclType	int
>17041	IdentifierDeclStatement	 
>17042	IdentifierDecl	Vmax = 110.0
>17043	AssignmentExpr	Vmax = 110.0
>17044	PrimaryExpression	110.0
>17045	Identifier	Vmax
>17046	Identifier	Vmax
>17047	IdentifierDeclType	const double
>17048	IdentifierDeclStatement	 
>17049	IdentifierDecl	Vmin = - 105.0
>17050	AssignmentExpr	Vmin = - 105.0
>17051	UnaryOp	- 105.0
>17052	PrimaryExpression	105.0
>17053	UnaryOperator	-
>17054	Identifier	Vmin
>17055	Identifier	Vmin
>17056	IdentifierDeclType	const double
>17057	IdentifierDeclStatement	 
>17058	IdentifierDecl	Umax = 180.0
>17059	AssignmentExpr	Umax = 180.0
>17060	PrimaryExpression	180.0
>17061	Identifier	Umax
>17062	Identifier	Umax
>17063	IdentifierDeclType	const double
>17064	IdentifierDeclStatement	 
>17065	IdentifierDecl	Umin = - 84.0
>17066	AssignmentExpr	Umin = - 84.0
>17067	UnaryOp	- 84.0
>17068	PrimaryExpression	84.0
>17069	UnaryOperator	-
>17070	Identifier	Umin
>17071	Identifier	Umin
>17072	IdentifierDeclType	const double
>17073	IdentifierDeclStatement	 
>17074	IdentifierDecl	Lmax = 100.01
>17075	AssignmentExpr	Lmax = 100.01
>17076	PrimaryExpression	100.01
>17077	Identifier	Lmax
>17078	Identifier	Lmax
>17079	IdentifierDeclType	const double
>17080	IdentifierDeclStatement	 
>17081	IdentifierDecl	Lmin = 0.0
>17082	AssignmentExpr	Lmin = 0.0
>17083	PrimaryExpression	0.0
>17084	Identifier	Lmin
>17085	Identifier	Lmin
>17086	IdentifierDeclType	const double
>17087	IdentifierDeclStatement	 
>17088	IdentifierDecl	h = m_thumb256 -> h
>17089	AssignmentExpr	h = m_thumb256 -> h
>17090	PtrMemberAccess	m_thumb256 -> h
>17091	Identifier	h
>17092	Identifier	m_thumb256
>17093	Identifier	h
>17094	Identifier	h
>17095	IdentifierDeclType	int
>17096	IdentifierDeclStatement	 
>17097	IdentifierDecl	w = m_thumb256 -> w
>17098	AssignmentExpr	w = m_thumb256 -> w
>17099	PtrMemberAccess	m_thumb256 -> w
>17100	Identifier	w
>17101	Identifier	m_thumb256
>17102	Identifier	w
>17103	Identifier	w
>17104	IdentifierDeclType	int
>17105	IfStatement	if ( ! LoadFeatureWeightMap ( ) )
>17106	CompoundStatement	 
>17107	ReturnStatement	 
>17108	ExpressionStatement	 
>17109	Statement	 
>17110	Statement	 
>17111	Statement	 
>17112	Statement	 
>17113	Statement	 
>17114	Statement	 
>17115	Statement	 
>17116	Condition	 
>17117	UnaryOp	! LoadFeatureWeightMap ( )
>17118	CallExpression	LoadFeatureWeightMap ( )
>17119	ArgumentList	 
>17120	Callee	LoadFeatureWeightMap
>17121	Identifier	LoadFeatureWeightMap
>17122	UnaryOperator	!
>17123	ExpressionStatement	 
>17124	CallExpression	LoadThumb256 ( )
>17125	ArgumentList	 
>17126	Callee	LoadThumb256
>17127	Identifier	LoadThumb256
>17192	FunctionDef	ImageData 
>17193	ParameterList	int nbins , double * L_hist , double * U_hist , double * V_hist
>17194	Parameter	 
>17195	Identifier	V_hist
>17196	ParameterType	double *
>17197	Parameter	 
>17198	Identifier	U_hist
>17199	ParameterType	double *
>17200	Parameter	 
>17201	Identifier	L_hist
>17202	ParameterType	double *
>17203	Parameter	 
>17204	Identifier	nbins
>17205	ParameterType	int
>17206	ReturnType	void
>17207	CompoundStatement	 
>17208	ForStatement	for ( int i = 0 ; i < nbins ; i ++ )
>17209	CompoundStatement	 
>17210	ExpressionStatement	 
>17211	AssignmentExpr	V_hist [ i ] /= V_sum
>17212	Identifier	V_sum
>17213	ArrayIndexing	V_hist [ i ]
>17214	Identifier	i
>17215	Identifier	V_hist
>17216	ExpressionStatement	 
>17217	AssignmentExpr	U_hist [ i ] /= U_sum
>17218	Identifier	U_sum
>17219	ArrayIndexing	U_hist [ i ]
>17220	Identifier	i
>17221	Identifier	U_hist
>17222	ExpressionStatement	 
>17223	AssignmentExpr	L_hist [ i ] /= L_sum
>17224	Identifier	L_sum
>17225	ArrayIndexing	L_hist [ i ]
>17226	Identifier	i
>17227	Identifier	L_hist
>17228	IncDecOp	 
>17229	IncDec	++
>17230	Identifier	i
>17231	Condition	 
>17232	RelationalExpression	i < nbins
>17233	Identifier	nbins
>17234	Identifier	i
>17235	ForInit	 
>17236	IdentifierDeclStatement	int i = 0 ;
>17237	IdentifierDecl	i = 0
>17238	AssignmentExpr	i = 0
>17239	PrimaryExpression	0
>17240	Identifier	i
>17241	Identifier	i
>17242	IdentifierDeclType	int
>17243	ForStatement	for ( int i = 0 ; i < nbins ; i ++ )
>17244	CompoundStatement	 
>17245	ExpressionStatement	 
>17246	AssignmentExpr	V_sum += V_hist [ i ]
>17247	ArrayIndexing	V_hist [ i ]
>17248	Identifier	i
>17249	Identifier	V_hist
>17250	Identifier	V_sum
>17251	ExpressionStatement	 
>17252	AssignmentExpr	U_sum += U_hist [ i ]
>17253	ArrayIndexing	U_hist [ i ]
>17254	Identifier	i
>17255	Identifier	U_hist
>17256	Identifier	U_sum
>17257	ExpressionStatement	 
>17258	AssignmentExpr	L_sum += L_hist [ i ]
>17259	ArrayIndexing	L_hist [ i ]
>17260	Identifier	i
>17261	Identifier	L_hist
>17262	Identifier	L_sum
>17263	IncDecOp	 
>17264	IncDec	++
>17265	Identifier	i
>17266	Condition	 
>17267	RelationalExpression	i < nbins
>17268	Identifier	nbins
>17269	Identifier	i
>17270	ForInit	 
>17271	IdentifierDeclStatement	int i = 0 ;
>17272	IdentifierDecl	i = 0
>17273	AssignmentExpr	i = 0
>17274	PrimaryExpression	0
>17275	Identifier	i
>17276	Identifier	i
>17277	IdentifierDeclType	int
>17278	IdentifierDeclStatement	 
>17279	IdentifierDecl	V_sum = 0.0
>17280	AssignmentExpr	V_sum = 0.0
>17281	PrimaryExpression	0.0
>17282	Identifier	V_sum
>17283	Identifier	V_sum
>17284	IdentifierDeclType	double
>17285	IdentifierDecl	U_sum = 0.0
>17286	AssignmentExpr	U_sum = 0.0
>17287	PrimaryExpression	0.0
>17288	Identifier	U_sum
>17289	Identifier	U_sum
>17290	IdentifierDeclType	double
>17291	IdentifierDecl	L_sum = 0.0
>17292	AssignmentExpr	L_sum = 0.0
>17293	PrimaryExpression	0.0
>17294	Identifier	L_sum
>17295	Identifier	L_sum
>17296	IdentifierDeclType	double
>17297	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>17298	CompoundStatement	 
>17299	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>17300	CompoundStatement	 
>17301	IfStatement	if ( V_f == nbins - 1 )
>17302	ElseStatement	else
>17303	CompoundStatement	 
>17304	ExpressionStatement	 
>17305	AssignmentExpr	V_hist [ V_c ] += wt * t
>17306	MultiplicativeExpression	wt * t
>17307	Identifier	t
>17308	Identifier	wt
>17309	ArrayIndexing	V_hist [ V_c ]
>17310	Identifier	V_c
>17311	Identifier	V_hist
>17312	ExpressionStatement	 
>17313	AssignmentExpr	V_hist [ V_f ] += wt * ( 1.0 - t )
>17314	MultiplicativeExpression	wt * ( 1.0 - t )
>17315	AdditiveExpression	1.0 - t
>17316	Identifier	t
>17317	PrimaryExpression	1.0
>17318	Identifier	wt
>17319	ArrayIndexing	V_hist [ V_f ]
>17320	Identifier	V_f
>17321	Identifier	V_hist
>17322	CompoundStatement	 
>17323	ExpressionStatement	 
>17324	AssignmentExpr	V_hist [ V_f ] += wt
>17325	Identifier	wt
>17326	ArrayIndexing	V_hist [ V_f ]
>17327	Identifier	V_f
>17328	Identifier	V_hist
>17329	Condition	 
>17330	EqualityExpression	V_f == nbins - 1
>17331	AdditiveExpression	nbins - 1
>17332	PrimaryExpression	1
>17333	Identifier	nbins
>17334	Identifier	V_f
>17335	ExpressionStatement	 
>17336	AssignmentExpr	t = V_norm - V_f
>17337	AdditiveExpression	V_norm - V_f
>17338	Identifier	V_f
>17339	Identifier	V_norm
>17340	Identifier	t
>17341	IfStatement	if ( U_f == nbins - 1 )
>17342	ElseStatement	else
>17343	CompoundStatement	 
>17344	ExpressionStatement	 
>17345	AssignmentExpr	U_hist [ U_c ] += wt * t
>17346	MultiplicativeExpression	wt * t
>17347	Identifier	t
>17348	Identifier	wt
>17349	ArrayIndexing	U_hist [ U_c ]
>17350	Identifier	U_c
>17351	Identifier	U_hist
>17352	ExpressionStatement	 
>17353	AssignmentExpr	U_hist [ U_f ] += wt * ( 1.0 - t )
>17354	MultiplicativeExpression	wt * ( 1.0 - t )
>17355	AdditiveExpression	1.0 - t
>17356	Identifier	t
>17357	PrimaryExpression	1.0
>17358	Identifier	wt
>17359	ArrayIndexing	U_hist [ U_f ]
>17360	Identifier	U_f
>17361	Identifier	U_hist
>17362	CompoundStatement	 
>17363	ExpressionStatement	 
>17364	AssignmentExpr	U_hist [ U_f ] += wt
>17365	Identifier	wt
>17366	ArrayIndexing	U_hist [ U_f ]
>17367	Identifier	U_f
>17368	Identifier	U_hist
>17369	Condition	 
>17370	EqualityExpression	U_f == nbins - 1
>17371	AdditiveExpression	nbins - 1
>17372	PrimaryExpression	1
>17373	Identifier	nbins
>17374	Identifier	U_f
>17375	ExpressionStatement	 
>17376	AssignmentExpr	t = U_norm - U_f
>17377	AdditiveExpression	U_norm - U_f
>17378	Identifier	U_f
>17379	Identifier	U_norm
>17380	Identifier	t
>17381	IfStatement	if ( L_f == nbins - 1 )
>17382	ElseStatement	else
>17383	CompoundStatement	 
>17384	ExpressionStatement	 
>17385	AssignmentExpr	L_hist [ L_c ] += wt * t
>17386	MultiplicativeExpression	wt * t
>17387	Identifier	t
>17388	Identifier	wt
>17389	ArrayIndexing	L_hist [ L_c ]
>17390	Identifier	L_c
>17391	Identifier	L_hist
>17392	ExpressionStatement	 
>17393	AssignmentExpr	L_hist [ L_f ] += wt * ( 1.0 - t )
>17394	MultiplicativeExpression	wt * ( 1.0 - t )
>17395	AdditiveExpression	1.0 - t
>17396	Identifier	t
>17397	PrimaryExpression	1.0
>17398	Identifier	wt
>17399	ArrayIndexing	L_hist [ L_f ]
>17400	Identifier	L_f
>17401	Identifier	L_hist
>17402	CompoundStatement	 
>17403	ExpressionStatement	 
>17404	AssignmentExpr	L_hist [ L_f ] += wt
>17405	Identifier	wt
>17406	ArrayIndexing	L_hist [ L_f ]
>17407	Identifier	L_f
>17408	Identifier	L_hist
>17409	Condition	 
>17410	EqualityExpression	L_f == nbins - 1
>17411	AdditiveExpression	nbins - 1
>17412	PrimaryExpression	1
>17413	Identifier	nbins
>17414	Identifier	L_f
>17415	ExpressionStatement	 
>17416	AssignmentExpr	t = L_norm - L_f
>17417	AdditiveExpression	L_norm - L_f
>17418	Identifier	L_f
>17419	Identifier	L_norm
>17420	Identifier	t
>17421	IdentifierDeclStatement	 
>17422	IdentifierDecl	t = 0.0
>17423	AssignmentExpr	t = 0.0
>17424	PrimaryExpression	0.0
>17425	Identifier	t
>17426	Identifier	t
>17427	IdentifierDeclType	double
>17428	ExpressionStatement	 
>17429	CallExpression	assert ( V_f <= nbins - 1 )
>17430	ArgumentList	V_f <= nbins - 1
>17431	Argument	V_f <= nbins - 1
>17432	RelationalExpression	V_f <= nbins - 1
>17433	AdditiveExpression	nbins - 1
>17434	PrimaryExpression	1
>17435	Identifier	nbins
>17436	Identifier	V_f
>17437	Callee	assert
>17438	Identifier	assert
>17439	ExpressionStatement	 
>17440	CallExpression	assert ( U_f <= nbins - 1 )
>17441	ArgumentList	U_f <= nbins - 1
>17442	Argument	U_f <= nbins - 1
>17443	RelationalExpression	U_f <= nbins - 1
>17444	AdditiveExpression	nbins - 1
>17445	PrimaryExpression	1
>17446	Identifier	nbins
>17447	Identifier	U_f
>17448	Callee	assert
>17449	Identifier	assert
>17450	ExpressionStatement	 
>17451	CallExpression	assert ( L_f <= nbins - 1 )
>17452	ArgumentList	L_f <= nbins - 1
>17453	Argument	L_f <= nbins - 1
>17454	RelationalExpression	L_f <= nbins - 1
>17455	AdditiveExpression	nbins - 1
>17456	PrimaryExpression	1
>17457	Identifier	nbins
>17458	Identifier	L_f
>17459	Callee	assert
>17460	Identifier	assert
>17461	IdentifierDeclStatement	 
>17462	IdentifierDecl	V_c = V_f + 1
>17463	AssignmentExpr	V_c = V_f + 1
>17464	AdditiveExpression	V_f + 1
>17465	PrimaryExpression	1
>17466	Identifier	V_f
>17467	Identifier	V_c
>17468	Identifier	V_c
>17469	IdentifierDeclType	int
>17470	IdentifierDeclStatement	 
>17471	IdentifierDecl	U_c = U_f + 1
>17472	AssignmentExpr	U_c = U_f + 1
>17473	AdditiveExpression	U_f + 1
>17474	PrimaryExpression	1
>17475	Identifier	U_f
>17476	Identifier	U_c
>17477	Identifier	U_c
>17478	IdentifierDeclType	int
>17479	IdentifierDeclStatement	 
>17480	IdentifierDecl	L_c = L_f + 1
>17481	AssignmentExpr	L_c = L_f + 1
>17482	AdditiveExpression	L_f + 1
>17483	PrimaryExpression	1
>17484	Identifier	L_f
>17485	Identifier	L_c
>17486	Identifier	L_c
>17487	IdentifierDeclType	int
>17488	IdentifierDeclStatement	 
>17489	IdentifierDecl	V_f = iround ( floor ( V_norm ) )
>17490	AssignmentExpr	V_f = iround ( floor ( V_norm ) )
>17491	CallExpression	iround ( floor ( V_norm ) )
>17492	ArgumentList	floor ( V_norm )
>17493	Argument	floor ( V_norm )
>17494	CallExpression	floor ( V_norm )
>17495	ArgumentList	V_norm
>17496	Argument	V_norm
>17497	Identifier	V_norm
>17498	Callee	floor
>17499	Identifier	floor
>17500	Callee	iround
>17501	Identifier	iround
>17502	Identifier	V_f
>17503	Identifier	V_f
>17504	IdentifierDeclType	int
>17505	IdentifierDeclStatement	 
>17506	IdentifierDecl	U_f = iround ( floor ( U_norm ) )
>17507	AssignmentExpr	U_f = iround ( floor ( U_norm ) )
>17508	CallExpression	iround ( floor ( U_norm ) )
>17509	ArgumentList	floor ( U_norm )
>17510	Argument	floor ( U_norm )
>17511	CallExpression	floor ( U_norm )
>17512	ArgumentList	U_norm
>17513	Argument	U_norm
>17514	Identifier	U_norm
>17515	Callee	floor
>17516	Identifier	floor
>17517	Callee	iround
>17518	Identifier	iround
>17519	Identifier	U_f
>17520	Identifier	U_f
>17521	IdentifierDeclType	int
>17522	IdentifierDeclStatement	 
>17523	IdentifierDecl	L_f = iround ( floor ( L_norm ) )
>17524	AssignmentExpr	L_f = iround ( floor ( L_norm ) )
>17525	CallExpression	iround ( floor ( L_norm ) )
>17526	ArgumentList	floor ( L_norm )
>17527	Argument	floor ( L_norm )
>17528	CallExpression	floor ( L_norm )
>17529	ArgumentList	L_norm
>17530	Argument	L_norm
>17531	Identifier	L_norm
>17532	Callee	floor
>17533	Identifier	floor
>17534	Callee	iround
>17535	Identifier	iround
>17536	Identifier	L_f
>17537	Identifier	L_f
>17538	IdentifierDeclType	int
>17539	ExpressionStatement	 
>17540	AssignmentExpr	V_norm = CLAMP ( V_norm , 0.0 , 1.0 - 1.0e-3 ) * nbins
>17541	MultiplicativeExpression	CLAMP ( V_norm , 0.0 , 1.0 - 1.0e-3 ) * nbins
>17542	Identifier	nbins
>17543	CallExpression	CLAMP ( V_norm , 0.0 , 1.0 - 1.0e-3 )
>17544	ArgumentList	V_norm
>17545	Argument	1.0 - 1.0e-3
>17546	AdditiveExpression	1.0 - 1.0e-3
>17547	PrimaryExpression	1.0e-3
>17548	PrimaryExpression	1.0
>17549	Argument	0.0
>17550	PrimaryExpression	0.0
>17551	Argument	V_norm
>17552	Identifier	V_norm
>17553	Callee	CLAMP
>17554	Identifier	CLAMP
>17555	Identifier	V_norm
>17556	ExpressionStatement	 
>17557	AssignmentExpr	U_norm = CLAMP ( U_norm , 0.0 , 1.0 - 1.0e-3 ) * nbins
>17558	MultiplicativeExpression	CLAMP ( U_norm , 0.0 , 1.0 - 1.0e-3 ) * nbins
>17559	Identifier	nbins
>17560	CallExpression	CLAMP ( U_norm , 0.0 , 1.0 - 1.0e-3 )
>17561	ArgumentList	U_norm
>17562	Argument	1.0 - 1.0e-3
>17563	AdditiveExpression	1.0 - 1.0e-3
>17564	PrimaryExpression	1.0e-3
>17565	PrimaryExpression	1.0
>17566	Argument	0.0
>17567	PrimaryExpression	0.0
>17568	Argument	U_norm
>17569	Identifier	U_norm
>17570	Callee	CLAMP
>17571	Identifier	CLAMP
>17572	Identifier	U_norm
>17573	ExpressionStatement	 
>17574	AssignmentExpr	L_norm = CLAMP ( L_norm , 0.0 , 1.0 - 1.0e-3 ) * nbins
>17575	MultiplicativeExpression	CLAMP ( L_norm , 0.0 , 1.0 - 1.0e-3 ) * nbins
>17576	Identifier	nbins
>17577	CallExpression	CLAMP ( L_norm , 0.0 , 1.0 - 1.0e-3 )
>17578	ArgumentList	L_norm
>17579	Argument	1.0 - 1.0e-3
>17580	AdditiveExpression	1.0 - 1.0e-3
>17581	PrimaryExpression	1.0e-3
>17582	PrimaryExpression	1.0
>17583	Argument	0.0
>17584	PrimaryExpression	0.0
>17585	Argument	L_norm
>17586	Identifier	L_norm
>17587	Callee	CLAMP
>17588	Identifier	CLAMP
>17589	Identifier	L_norm
>17590	IdentifierDeclStatement	 
>17591	IdentifierDecl	wt = cwt . r / 255.0
>17592	AssignmentExpr	wt = cwt . r / 255.0
>17593	MultiplicativeExpression	cwt . r / 255.0
>17594	PrimaryExpression	255.0
>17595	MemberAccess	cwt . r
>17596	Identifier	r
>17597	Identifier	cwt
>17598	Identifier	wt
>17599	Identifier	wt
>17600	IdentifierDeclType	double
>17601	IdentifierDeclStatement	 
>17602	IdentifierDecl	V_norm = ( V - Vmean ) / Vstd + 0.5
>17603	AssignmentExpr	V_norm = ( V - Vmean ) / Vstd + 0.5
>17604	AdditiveExpression	( V - Vmean ) / Vstd + 0.5
>17605	PrimaryExpression	0.5
>17606	MultiplicativeExpression	( V - Vmean ) / Vstd
>17607	Identifier	Vstd
>17608	AdditiveExpression	V - Vmean
>17609	Identifier	Vmean
>17610	Identifier	V
>17611	Identifier	V_norm
>17612	Identifier	V_norm
>17613	IdentifierDeclType	double
>17614	IdentifierDeclStatement	 
>17615	IdentifierDecl	U_norm = ( U - Umean ) / Ustd + 0.5
>17616	AssignmentExpr	U_norm = ( U - Umean ) / Ustd + 0.5
>17617	AdditiveExpression	( U - Umean ) / Ustd + 0.5
>17618	PrimaryExpression	0.5
>17619	MultiplicativeExpression	( U - Umean ) / Ustd
>17620	Identifier	Ustd
>17621	AdditiveExpression	U - Umean
>17622	Identifier	Umean
>17623	Identifier	U
>17624	Identifier	U_norm
>17625	Identifier	U_norm
>17626	IdentifierDeclType	double
>17627	IdentifierDeclStatement	 
>17628	IdentifierDecl	L_norm = ( L - Lmean ) / Lstd + 0.5
>17629	AssignmentExpr	L_norm = ( L - Lmean ) / Lstd + 0.5
>17630	AdditiveExpression	( L - Lmean ) / Lstd + 0.5
>17631	PrimaryExpression	0.5
>17632	MultiplicativeExpression	( L - Lmean ) / Lstd
>17633	Identifier	Lstd
>17634	AdditiveExpression	L - Lmean
>17635	Identifier	Lmean
>17636	Identifier	L
>17637	Identifier	L_norm
>17638	Identifier	L_norm
>17639	IdentifierDeclType	double
>17640	ExpressionStatement	 
>17641	CallExpression	color_RGBtoLUV ( c . r , c . g , c . b , & L , & U , & V )
>17642	ArgumentList	c . r
>17643	Argument	& V
>17644	UnaryOp	& V
>17645	Identifier	V
>17646	UnaryOperator	&
>17647	Argument	& U
>17648	UnaryOp	& U
>17649	Identifier	U
>17650	UnaryOperator	&
>17651	Argument	& L
>17652	UnaryOp	& L
>17653	Identifier	L
>17654	UnaryOperator	&
>17655	Argument	c . b
>17656	MemberAccess	c . b
>17657	Identifier	b
>17658	Identifier	c
>17659	Argument	c . g
>17660	MemberAccess	c . g
>17661	Identifier	g
>17662	Identifier	c
>17663	Argument	c . r
>17664	MemberAccess	c . r
>17665	Identifier	r
>17666	Identifier	c
>17667	Callee	color_RGBtoLUV
>17668	Identifier	color_RGBtoLUV
>17669	IdentifierDeclStatement	 
>17670	IdentifierDecl	V
>17671	Identifier	V
>17672	IdentifierDeclType	double
>17673	IdentifierDecl	U
>17674	Identifier	U
>17675	IdentifierDeclType	double
>17676	IdentifierDecl	L
>17677	Identifier	L
>17678	IdentifierDeclType	double
>17679	IdentifierDeclStatement	 
>17680	IdentifierDecl	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>17681	AssignmentExpr	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>17682	CallExpression	img_get_pixel ( m_feature_weight_map , x , y )
>17683	ArgumentList	m_feature_weight_map
>17684	Argument	y
>17685	Identifier	y
>17686	Argument	x
>17687	Identifier	x
>17688	Argument	m_feature_weight_map
>17689	Identifier	m_feature_weight_map
>17690	Callee	img_get_pixel
>17691	Identifier	img_get_pixel
>17692	Identifier	cwt
>17693	Identifier	cwt
>17694	IdentifierDeclType	color_t
>17695	IdentifierDeclStatement	 
>17696	IdentifierDecl	c = img_get_pixel ( m_thumb256 , x , y )
>17697	AssignmentExpr	c = img_get_pixel ( m_thumb256 , x , y )
>17698	CallExpression	img_get_pixel ( m_thumb256 , x , y )
>17699	ArgumentList	m_thumb256
>17700	Argument	y
>17701	Identifier	y
>17702	Argument	x
>17703	Identifier	x
>17704	Argument	m_thumb256
>17705	Identifier	m_thumb256
>17706	Callee	img_get_pixel
>17707	Identifier	img_get_pixel
>17708	Identifier	c
>17709	Identifier	c
>17710	IdentifierDeclType	color_t
>17711	IncDecOp	 
>17712	IncDec	++
>17713	Identifier	x
>17714	Condition	 
>17715	RelationalExpression	x < w
>17716	Identifier	w
>17717	Identifier	x
>17718	ForInit	 
>17719	IdentifierDeclStatement	int x = 0 ;
>17720	IdentifierDecl	x = 0
>17721	AssignmentExpr	x = 0
>17722	PrimaryExpression	0
>17723	Identifier	x
>17724	Identifier	x
>17725	IdentifierDeclType	int
>17726	IncDecOp	 
>17727	IncDec	++
>17728	Identifier	y
>17729	Condition	 
>17730	RelationalExpression	y < h
>17731	Identifier	h
>17732	Identifier	y
>17733	ForInit	 
>17734	IdentifierDeclStatement	int y = 0 ;
>17735	IdentifierDecl	y = 0
>17736	AssignmentExpr	y = 0
>17737	PrimaryExpression	0
>17738	Identifier	y
>17739	Identifier	y
>17740	IdentifierDeclType	int
>17741	IdentifierDeclStatement	 
>17742	IdentifierDecl	Vstd = 2.0 * sqrt ( Vsum / wt_sum )
>17743	AssignmentExpr	Vstd = 2.0 * sqrt ( Vsum / wt_sum )
>17744	MultiplicativeExpression	2.0 * sqrt ( Vsum / wt_sum )
>17745	CallExpression	sqrt ( Vsum / wt_sum )
>17746	ArgumentList	Vsum / wt_sum
>17747	Argument	Vsum / wt_sum
>17748	MultiplicativeExpression	Vsum / wt_sum
>17749	Identifier	wt_sum
>17750	Identifier	Vsum
>17751	Callee	sqrt
>17752	Identifier	sqrt
>17753	PrimaryExpression	2.0
>17754	Identifier	Vstd
>17755	Identifier	Vstd
>17756	IdentifierDeclType	double
>17757	IdentifierDeclStatement	 
>17758	IdentifierDecl	Ustd = 2.0 * sqrt ( Usum / wt_sum )
>17759	AssignmentExpr	Ustd = 2.0 * sqrt ( Usum / wt_sum )
>17760	MultiplicativeExpression	2.0 * sqrt ( Usum / wt_sum )
>17761	CallExpression	sqrt ( Usum / wt_sum )
>17762	ArgumentList	Usum / wt_sum
>17763	Argument	Usum / wt_sum
>17764	MultiplicativeExpression	Usum / wt_sum
>17765	Identifier	wt_sum
>17766	Identifier	Usum
>17767	Callee	sqrt
>17768	Identifier	sqrt
>17769	PrimaryExpression	2.0
>17770	Identifier	Ustd
>17771	Identifier	Ustd
>17772	IdentifierDeclType	double
>17773	IdentifierDeclStatement	 
>17774	IdentifierDecl	Lstd = 2.0 * sqrt ( Lsum / wt_sum )
>17775	AssignmentExpr	Lstd = 2.0 * sqrt ( Lsum / wt_sum )
>17776	MultiplicativeExpression	2.0 * sqrt ( Lsum / wt_sum )
>17777	CallExpression	sqrt ( Lsum / wt_sum )
>17778	ArgumentList	Lsum / wt_sum
>17779	Argument	Lsum / wt_sum
>17780	MultiplicativeExpression	Lsum / wt_sum
>17781	Identifier	wt_sum
>17782	Identifier	Lsum
>17783	Callee	sqrt
>17784	Identifier	sqrt
>17785	PrimaryExpression	2.0
>17786	Identifier	Lstd
>17787	Identifier	Lstd
>17788	IdentifierDeclType	double
>17789	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>17790	CompoundStatement	 
>17791	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>17792	CompoundStatement	 
>17793	ExpressionStatement	 
>17794	AssignmentExpr	Vsum += wt * ( V - Vmean ) * ( V - Vmean )
>17795	MultiplicativeExpression	wt * ( V - Vmean ) * ( V - Vmean )
>17796	MultiplicativeExpression	( V - Vmean ) * ( V - Vmean )
>17797	AdditiveExpression	V - Vmean
>17798	Identifier	Vmean
>17799	Identifier	V
>17800	AdditiveExpression	V - Vmean
>17801	Identifier	Vmean
>17802	Identifier	V
>17803	Identifier	wt
>17804	Identifier	Vsum
>17805	ExpressionStatement	 
>17806	AssignmentExpr	Usum += wt * ( U - Umean ) * ( U - Umean )
>17807	MultiplicativeExpression	wt * ( U - Umean ) * ( U - Umean )
>17808	MultiplicativeExpression	( U - Umean ) * ( U - Umean )
>17809	AdditiveExpression	U - Umean
>17810	Identifier	Umean
>17811	Identifier	U
>17812	AdditiveExpression	U - Umean
>17813	Identifier	Umean
>17814	Identifier	U
>17815	Identifier	wt
>17816	Identifier	Usum
>17817	ExpressionStatement	 
>17818	AssignmentExpr	Lsum += wt * ( L - Lmean ) * ( L - Lmean )
>17819	MultiplicativeExpression	wt * ( L - Lmean ) * ( L - Lmean )
>17820	MultiplicativeExpression	( L - Lmean ) * ( L - Lmean )
>17821	AdditiveExpression	L - Lmean
>17822	Identifier	Lmean
>17823	Identifier	L
>17824	AdditiveExpression	L - Lmean
>17825	Identifier	Lmean
>17826	Identifier	L
>17827	Identifier	wt
>17828	Identifier	Lsum
>17829	IdentifierDeclStatement	 
>17830	IdentifierDecl	wt = cwt . r / 255.0
>17831	AssignmentExpr	wt = cwt . r / 255.0
>17832	MultiplicativeExpression	cwt . r / 255.0
>17833	PrimaryExpression	255.0
>17834	MemberAccess	cwt . r
>17835	Identifier	r
>17836	Identifier	cwt
>17837	Identifier	wt
>17838	Identifier	wt
>17839	IdentifierDeclType	double
>17840	ExpressionStatement	 
>17841	CallExpression	color_RGBtoLUV ( c . r , c . g , c . b , & L , & U , & V )
>17842	ArgumentList	c . r
>17843	Argument	& V
>17844	UnaryOp	& V
>17845	Identifier	V
>17846	UnaryOperator	&
>17847	Argument	& U
>17848	UnaryOp	& U
>17849	Identifier	U
>17850	UnaryOperator	&
>17851	Argument	& L
>17852	UnaryOp	& L
>17853	Identifier	L
>17854	UnaryOperator	&
>17855	Argument	c . b
>17856	MemberAccess	c . b
>17857	Identifier	b
>17858	Identifier	c
>17859	Argument	c . g
>17860	MemberAccess	c . g
>17861	Identifier	g
>17862	Identifier	c
>17863	Argument	c . r
>17864	MemberAccess	c . r
>17865	Identifier	r
>17866	Identifier	c
>17867	Callee	color_RGBtoLUV
>17868	Identifier	color_RGBtoLUV
>17869	IdentifierDeclStatement	 
>17870	IdentifierDecl	V
>17871	Identifier	V
>17872	IdentifierDeclType	double
>17873	IdentifierDecl	U
>17874	Identifier	U
>17875	IdentifierDeclType	double
>17876	IdentifierDecl	L
>17877	Identifier	L
>17878	IdentifierDeclType	double
>17879	IdentifierDeclStatement	 
>17880	IdentifierDecl	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>17881	AssignmentExpr	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>17882	CallExpression	img_get_pixel ( m_feature_weight_map , x , y )
>17883	ArgumentList	m_feature_weight_map
>17884	Argument	y
>17885	Identifier	y
>17886	Argument	x
>17887	Identifier	x
>17888	Argument	m_feature_weight_map
>17889	Identifier	m_feature_weight_map
>17890	Callee	img_get_pixel
>17891	Identifier	img_get_pixel
>17892	Identifier	cwt
>17893	Identifier	cwt
>17894	IdentifierDeclType	color_t
>17895	IdentifierDeclStatement	 
>17896	IdentifierDecl	c = img_get_pixel ( m_thumb256 , x , y )
>17897	AssignmentExpr	c = img_get_pixel ( m_thumb256 , x , y )
>17898	CallExpression	img_get_pixel ( m_thumb256 , x , y )
>17899	ArgumentList	m_thumb256
>17900	Argument	y
>17901	Identifier	y
>17902	Argument	x
>17903	Identifier	x
>17904	Argument	m_thumb256
>17905	Identifier	m_thumb256
>17906	Callee	img_get_pixel
>17907	Identifier	img_get_pixel
>17908	Identifier	c
>17909	Identifier	c
>17910	IdentifierDeclType	color_t
>17911	IncDecOp	 
>17912	IncDec	++
>17913	Identifier	x
>17914	Condition	 
>17915	RelationalExpression	x < w
>17916	Identifier	w
>17917	Identifier	x
>17918	ForInit	 
>17919	IdentifierDeclStatement	int x = 0 ;
>17920	IdentifierDecl	x = 0
>17921	AssignmentExpr	x = 0
>17922	PrimaryExpression	0
>17923	Identifier	x
>17924	Identifier	x
>17925	IdentifierDeclType	int
>17926	IncDecOp	 
>17927	IncDec	++
>17928	Identifier	y
>17929	Condition	 
>17930	RelationalExpression	y < h
>17931	Identifier	h
>17932	Identifier	y
>17933	ForInit	 
>17934	IdentifierDeclStatement	int y = 0 ;
>17935	IdentifierDecl	y = 0
>17936	AssignmentExpr	y = 0
>17937	PrimaryExpression	0
>17938	Identifier	y
>17939	Identifier	y
>17940	IdentifierDeclType	int
>17941	ExpressionStatement	 
>17942	AssignmentExpr	Lsum = Usum = Vsum = 0.0
>17943	AssignmentExpr	Usum = Vsum = 0.0
>17944	AssignmentExpr	Vsum = 0.0
>17945	PrimaryExpression	0.0
>17946	Identifier	Vsum
>17947	Identifier	Usum
>17948	Identifier	Lsum
>17949	IdentifierDeclStatement	 
>17950	IdentifierDecl	Vmean = Vsum / wt_sum
>17951	AssignmentExpr	Vmean = Vsum / wt_sum
>17952	MultiplicativeExpression	Vsum / wt_sum
>17953	Identifier	wt_sum
>17954	Identifier	Vsum
>17955	Identifier	Vmean
>17956	Identifier	Vmean
>17957	IdentifierDeclType	double
>17958	IdentifierDeclStatement	 
>17959	IdentifierDecl	Umean = Usum / wt_sum
>17960	AssignmentExpr	Umean = Usum / wt_sum
>17961	MultiplicativeExpression	Usum / wt_sum
>17962	Identifier	wt_sum
>17963	Identifier	Usum
>17964	Identifier	Umean
>17965	Identifier	Umean
>17966	IdentifierDeclType	double
>17967	IdentifierDeclStatement	 
>17968	IdentifierDecl	Lmean = Lsum / wt_sum
>17969	AssignmentExpr	Lmean = Lsum / wt_sum
>17970	MultiplicativeExpression	Lsum / wt_sum
>17971	Identifier	wt_sum
>17972	Identifier	Lsum
>17973	Identifier	Lmean
>17974	Identifier	Lmean
>17975	IdentifierDeclType	double
>17976	ForStatement	for ( int y = 0 ; y < h ; y ++ )
>17977	CompoundStatement	 
>17978	ForStatement	for ( int x = 0 ; x < w ; x ++ )
>17979	CompoundStatement	 
>17980	ExpressionStatement	 
>17981	AssignmentExpr	wt_sum += wt
>17982	Identifier	wt
>17983	Identifier	wt_sum
>17984	ExpressionStatement	 
>17985	AssignmentExpr	Vsum += wt * V
>17986	MultiplicativeExpression	wt * V
>17987	Identifier	V
>17988	Identifier	wt
>17989	Identifier	Vsum
>17990	ExpressionStatement	 
>17991	AssignmentExpr	Usum += wt * U
>17992	MultiplicativeExpression	wt * U
>17993	Identifier	U
>17994	Identifier	wt
>17995	Identifier	Usum
>17996	ExpressionStatement	 
>17997	AssignmentExpr	Lsum += wt * L
>17998	MultiplicativeExpression	wt * L
>17999	Identifier	L
>18000	Identifier	wt
>18001	Identifier	Lsum
>18002	IdentifierDeclStatement	 
>18003	IdentifierDecl	wt = cwt . r / 255.0
>18004	AssignmentExpr	wt = cwt . r / 255.0
>18005	MultiplicativeExpression	cwt . r / 255.0
>18006	PrimaryExpression	255.0
>18007	MemberAccess	cwt . r
>18008	Identifier	r
>18009	Identifier	cwt
>18010	Identifier	wt
>18011	Identifier	wt
>18012	IdentifierDeclType	double
>18013	ExpressionStatement	 
>18014	CallExpression	color_RGBtoLUV ( c . r , c . g , c . b , & L , & U , & V )
>18015	ArgumentList	c . r
>18016	Argument	& V
>18017	UnaryOp	& V
>18018	Identifier	V
>18019	UnaryOperator	&
>18020	Argument	& U
>18021	UnaryOp	& U
>18022	Identifier	U
>18023	UnaryOperator	&
>18024	Argument	& L
>18025	UnaryOp	& L
>18026	Identifier	L
>18027	UnaryOperator	&
>18028	Argument	c . b
>18029	MemberAccess	c . b
>18030	Identifier	b
>18031	Identifier	c
>18032	Argument	c . g
>18033	MemberAccess	c . g
>18034	Identifier	g
>18035	Identifier	c
>18036	Argument	c . r
>18037	MemberAccess	c . r
>18038	Identifier	r
>18039	Identifier	c
>18040	Callee	color_RGBtoLUV
>18041	Identifier	color_RGBtoLUV
>18042	IdentifierDeclStatement	 
>18043	IdentifierDecl	V
>18044	Identifier	V
>18045	IdentifierDeclType	double
>18046	IdentifierDecl	U
>18047	Identifier	U
>18048	IdentifierDeclType	double
>18049	IdentifierDecl	L
>18050	Identifier	L
>18051	IdentifierDeclType	double
>18052	IdentifierDeclStatement	 
>18053	IdentifierDecl	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>18054	AssignmentExpr	cwt = img_get_pixel ( m_feature_weight_map , x , y )
>18055	CallExpression	img_get_pixel ( m_feature_weight_map , x , y )
>18056	ArgumentList	m_feature_weight_map
>18057	Argument	y
>18058	Identifier	y
>18059	Argument	x
>18060	Identifier	x
>18061	Argument	m_feature_weight_map
>18062	Identifier	m_feature_weight_map
>18063	Callee	img_get_pixel
>18064	Identifier	img_get_pixel
>18065	Identifier	cwt
>18066	Identifier	cwt
>18067	IdentifierDeclType	color_t
>18068	IdentifierDeclStatement	 
>18069	IdentifierDecl	c = img_get_pixel ( m_thumb256 , x , y )
>18070	AssignmentExpr	c = img_get_pixel ( m_thumb256 , x , y )
>18071	CallExpression	img_get_pixel ( m_thumb256 , x , y )
>18072	ArgumentList	m_thumb256
>18073	Argument	y
>18074	Identifier	y
>18075	Argument	x
>18076	Identifier	x
>18077	Argument	m_thumb256
>18078	Identifier	m_thumb256
>18079	Callee	img_get_pixel
>18080	Identifier	img_get_pixel
>18081	Identifier	c
>18082	Identifier	c
>18083	IdentifierDeclType	color_t
>18084	IncDecOp	 
>18085	IncDec	++
>18086	Identifier	x
>18087	Condition	 
>18088	RelationalExpression	x < w
>18089	Identifier	w
>18090	Identifier	x
>18091	ForInit	 
>18092	IdentifierDeclStatement	int x = 0 ;
>18093	IdentifierDecl	x = 0
>18094	AssignmentExpr	x = 0
>18095	PrimaryExpression	0
>18096	Identifier	x
>18097	Identifier	x
>18098	IdentifierDeclType	int
>18099	IncDecOp	 
>18100	IncDec	++
>18101	Identifier	y
>18102	Condition	 
>18103	RelationalExpression	y < h
>18104	Identifier	h
>18105	Identifier	y
>18106	ForInit	 
>18107	IdentifierDeclStatement	int y = 0 ;
>18108	IdentifierDecl	y = 0
>18109	AssignmentExpr	y = 0
>18110	PrimaryExpression	0
>18111	Identifier	y
>18112	Identifier	y
>18113	IdentifierDeclType	int
>18114	IdentifierDeclStatement	 
>18115	IdentifierDecl	wt_sum = 0.0
>18116	AssignmentExpr	wt_sum = 0.0
>18117	PrimaryExpression	0.0
>18118	Identifier	wt_sum
>18119	Identifier	wt_sum
>18120	IdentifierDeclType	double
>18121	IdentifierDeclStatement	 
>18122	IdentifierDecl	Vsum = 0.0
>18123	AssignmentExpr	Vsum = 0.0
>18124	PrimaryExpression	0.0
>18125	Identifier	Vsum
>18126	Identifier	Vsum
>18127	IdentifierDeclType	double
>18128	IdentifierDeclStatement	 
>18129	IdentifierDecl	Usum = 0.0
>18130	AssignmentExpr	Usum = 0.0
>18131	PrimaryExpression	0.0
>18132	Identifier	Usum
>18133	Identifier	Usum
>18134	IdentifierDeclType	double
>18135	IdentifierDeclStatement	 
>18136	IdentifierDecl	Lsum = 0.0
>18137	AssignmentExpr	Lsum = 0.0
>18138	PrimaryExpression	0.0
>18139	Identifier	Lsum
>18140	Identifier	Lsum
>18141	IdentifierDeclType	double
>18142	IdentifierDeclStatement	 
>18143	IdentifierDecl	h = m_thumb256 -> h
>18144	AssignmentExpr	h = m_thumb256 -> h
>18145	PtrMemberAccess	m_thumb256 -> h
>18146	Identifier	h
>18147	Identifier	m_thumb256
>18148	Identifier	h
>18149	Identifier	h
>18150	IdentifierDeclType	int
>18151	IdentifierDeclStatement	 
>18152	IdentifierDecl	w = m_thumb256 -> w
>18153	AssignmentExpr	w = m_thumb256 -> w
>18154	PtrMemberAccess	m_thumb256 -> w
>18155	Identifier	w
>18156	Identifier	m_thumb256
>18157	Identifier	w
>18158	Identifier	w
>18159	IdentifierDeclType	int
>18160	IfStatement	if ( ! LoadFeatureWeightMap ( ) )
>18161	CompoundStatement	 
>18162	ReturnStatement	 
>18163	ExpressionStatement	 
>18164	Statement	 
>18165	Statement	 
>18166	Statement	 
>18167	Statement	 
>18168	Statement	 
>18169	Statement	 
>18170	Statement	 
>18171	Condition	 
>18172	UnaryOp	! LoadFeatureWeightMap ( )
>18173	CallExpression	LoadFeatureWeightMap ( )
>18174	ArgumentList	 
>18175	Callee	LoadFeatureWeightMap
>18176	Identifier	LoadFeatureWeightMap
>18177	UnaryOperator	!
>18178	ExpressionStatement	 
>18179	CallExpression	LoadThumb256 ( )
>18180	ArgumentList	 
>18181	Callee	LoadThumb256
>18182	Identifier	LoadThumb256
<5=14,13,6
<6=10,7
<7=9,8
<10=12,11
<14=94,67,42,17,15
<15=16
<17=34,30,18
<18=19
<19=22,20
<20=21
<22=23
<23=27,24
<24=26,25
<27=29,28
<30=31
<31=33,32
<34=35
<35=39,36
<36=38,37
<39=41,40
<42=59,55,43
<43=44
<44=47,45
<45=46
<47=48
<48=52,49
<49=51,50
<52=54,53
<55=56
<56=58,57
<59=60
<60=64,61
<61=63,62
<64=66,65
<67=86,82,68
<68=69
<69=74,70
<70=71
<71=73,72
<74=75
<75=79,76
<76=78,77
<79=81,80
<82=83
<83=85,84
<86=87
<87=91,88
<88=90,89
<91=93,92
<94=97,95
<95=96
<97=98
<98=104,99
<99=103,100
<100=102,101
<104=108,105
<105=107,106
<126=132,131,127
<127=128
<128=130,129
<132=133
<133=157,148,134
<134=135
<135=136
<136=146,137
<137=144,138
<138=139
<139=143,140
<140=142,141
<144=145
<146=147
<148=149
<149=155,150
<150=153,151
<151=152
<153=154
<155=156
<157=158
<158=166,159
<159=163,160
<160=162,161
<163=165,164
<166=168,167
<178=184,183,179
<179=180
<180=182,181
<184=235,185
<185=231,219,186
<186=187
<187=214,207,188
<188=189
<189=205,190
<190=203,201,199,197,195,193,191
<191=192
<193=194
<195=196
<197=198
<199=200
<201=202
<203=204
<205=206
<207=208
<208=212,209
<209=210
<210=211
<212=213
<214=215
<215=218,217,216
<219=220
<220=221
<221=229,222
<222=227,225,223
<223=224
<225=226
<227=228
<229=230
<231=232
<232=234,233
<235=247,236
<236=238,237
<238=239
<239=245,240
<240=243,241
<241=242
<243=244
<245=246
<247=248
<248=250,249
<262=265,264,263
<265=292,266
<266=267
<267=289,268
<268=288,269
<269=287,270
<270=286,271
<271=285,272
<272=284,273
<273=283,274
<274=282,275
<275=281,276
<276=280,277
<277=279,278
<289=291,290
<292=295,293
<293=294
<295=296
<296=298,297
<310=313,312,311
<313=326,314
<314=315
<315=325,316
<316=324,317
<317=323,318
<318=322,319
<319=321,320
<326=329,327
<327=328
<329=330
<330=332,331
<341=344,343,342
<344=357,345
<345=346
<346=354,347
<347=353,348
<348=352,349
<349=351,350
<354=356,355
<357=360,358
<358=359
<360=361
<361=363,362
<372=384,383,373
<373=380,377,374
<374=376,375
<377=379,378
<380=382,381
<384=571,560,533,506,469,460,447,422,416,404,385
<385=386
<386=403,387
<387=401,388
<388=399,395,391,389
<389=390
<391=392
<392=394,393
<395=396
<396=398,397
<399=400
<401=402
<404=405
<405=415,406
<406=414,407
<407=413,408
<408=412,409
<409=411,410
<416=417
<417=421,418
<418=420,419
<422=423
<423=445,424
<424=443,441,437,433,429,425
<425=426
<426=428,427
<429=430
<430=432,431
<433=434
<434=436,435
<437=438
<438=440,439
<441=442
<443=444
<445=446
<447=457,454,451,448
<448=450,449
<451=453,452
<454=456,455
<457=459,458
<460=461
<461=468,462
<462=466,463
<463=464
<464=465
<466=467
<469=498,487,484,470
<470=471
<471=478,472
<472=473
<473=475,474
<475=477,476
<478=479
<479=481,480
<481=483,482
<484=486,485
<487=488
<488=497,489
<489=496,490
<490=494,491
<491=492
<492=493
<494=495
<498=499
<499=500
<500=505,504,501
<501=503,502
<506=520,507
<507=508
<508=510,509
<510=519,511
<511=513,512
<513=517,514
<514=515
<515=516
<517=518
<520=521
<521=523,522
<523=532,524
<524=526,525
<526=530,527
<527=528
<528=529
<530=531
<533=547,534
<534=535
<535=537,536
<537=546,538
<538=540,539
<540=544,541
<541=542
<542=543
<544=545
<547=548
<548=550,549
<550=559,551
<551=553,552
<553=557,554
<554=555
<555=556
<557=558
<560=561
<561=569,562
<562=567,565,563
<563=564
<565=566
<567=568
<569=570
<571=572
<572=575,574,573
<600=612,611,601
<601=608,605,602
<602=604,603
<605=607,606
<608=610,609
<612=1064,1037,1032,1028,1017,990,976,969,945,938,931,905,901,819,815,811,807,803,799,795,791,787,783,777,771,766,759,752,735,675,670,661,648,635,622,613
<613=614
<614=621,615
<615=619,616
<616=617
<617=618
<619=620
<622=623
<623=625,624
<625=634,626
<626=628,627
<628=632,629
<629=630
<630=631
<632=633
<635=636
<636=638,637
<638=647,639
<639=641,640
<641=645,642
<642=643
<643=644
<645=646
<648=649
<649=651,650
<651=660,652
<652=654,653
<654=658,655
<655=656
<656=657
<658=659
<661=662
<662=668,663
<663=666,664
<664=665
<666=667
<668=669
<670=671
<671=674,673,672
<675=729,710,676
<676=677
<677=697,689,678
<678=679
<679=687,680
<680=685,681
<681=682
<682=684,683
<685=686
<687=688
<689=690
<690=692,691
<692=696,693
<693=695,694
<697=698
<698=708,699
<699=706,704,700
<700=701
<701=703,702
<704=705
<706=707
<708=709
<710=720,711
<711=712
<712=718,713
<713=716,714
<714=715
<716=717
<718=719
<720=721
<721=727,722
<722=725,723
<723=724
<725=726
<727=728
<729=730
<730=732,731
<732=734,733
<735=740,736
<736=737
<737=739,738
<740=741
<741=747,742
<742=744,743
<744=746,745
<747=749,748
<749=751,750
<752=753
<753=758,757,754
<754=756,755
<759=760
<760=764,761
<761=762
<762=763
<764=765
<766=767
<767=770,769,768
<771=772
<772=776,773
<773=775,774
<777=778
<778=780,779
<780=782,781
<783=784
<784=786,785
<787=788
<788=790,789
<791=792
<792=794,793
<795=796
<796=798,797
<799=800
<800=802,801
<803=804
<804=806,805
<807=808
<808=810,809
<811=812
<812=814,813
<815=816
<816=818,817
<819=873,856,820
<820=821
<821=851,831,822
<822=823
<823=830,824
<824=828,825
<825=826
<826=827
<828=829
<831=832
<832=849,833
<833=847,845,843,834
<834=835
<835=837,836
<837=838
<838=840,839
<840=842,841
<843=844
<845=846
<847=848
<849=850
<851=852
<852=855,854,853
<856=857
<857=858
<858=872,859
<859=870,860
<860=861
<861=862
<862=864,863
<864=865
<865=867,866
<867=869,868
<870=871
<873=874
<874=898,875
<875=888,876
<876=878,877
<878=880,879
<880=882,881
<882=883
<883=885,884
<885=887,886
<888=890,889
<890=896,891
<891=894,892
<892=893
<894=895
<896=897
<898=900,899
<901=902
<902=904,903
<905=927,906
<906=923,907
<907=908
<908=922,909
<909=920,910
<910=911
<911=912
<912=914,913
<914=915
<915=917,916
<917=919,918
<920=921
<923=924
<924=926,925
<927=928
<928=930,929
<931=932
<932=937,936,933
<933=935,934
<938=939
<939=944,943,940
<940=942,941
<945=965,946
<946=947
<947=948
<948=964,949
<949=951,950
<951=962,952
<952=953
<953=954
<954=956,955
<956=957
<957=959,958
<959=961,960
<962=963
<965=966
<966=968,967
<969=970
<970=975,974,971
<971=973,972
<976=977
<977=989,988,978
<978=987,979
<979=986,980
<980=982,981
<982=983
<983=985,984
<990=1010,991
<991=1001,992
<992=993
<993=997,994
<994=995
<995=996
<997=998
<998=1000,999
<1001=1002
<1002=1009,1003
<1003=1005,1004
<1005=1006
<1006=1008,1007
<1010=1011
<1011=1013,1012
<1013=1014
<1014=1016,1015
<1017=1018
<1018=1026,1019
<1019=1024,1022,1020
<1020=1021
<1022=1023
<1024=1025
<1026=1027
<1028=1029
<1029=1031,1030
<1032=1033
<1033=1036,1035,1034
<1037=1051,1038
<1038=1039
<1039=1041,1040
<1041=1050,1042
<1042=1044,1043
<1044=1048,1045
<1045=1046
<1046=1047
<1048=1049
<1051=1052
<1052=1054,1053
<1054=1063,1055
<1055=1057,1056
<1057=1061,1058
<1058=1059
<1059=1060
<1061=1062
<1064=1078,1065
<1065=1066
<1066=1068,1067
<1068=1077,1069
<1069=1071,1070
<1071=1075,1072
<1072=1073
<1073=1074
<1075=1076
<1078=1079
<1079=1081,1080
<1081=1090,1082
<1082=1084,1083
<1084=1088,1085
<1085=1086
<1086=1087
<1088=1089
<1149=1152,1151,1150
<1152=1314,1305,1292,1279,1266,1261,1252,1239,1226,1213,1209,1161,1157,1153
<1153=1154
<1154=1156,1155
<1157=1158
<1158=1160,1159
<1161=1202,1192,1162
<1162=1163
<1163=1185,1175,1164
<1164=1165
<1165=1166
<1166=1167
<1167=1174,1168
<1168=1172,1169
<1169=1170
<1170=1171
<1172=1173
<1175=1176
<1176=1177
<1177=1184,1178
<1178=1182,1179
<1179=1180
<1180=1181
<1182=1183
<1185=1186
<1186=1190,1187
<1187=1188
<1188=1189
<1190=1191
<1192=1193
<1193=1194
<1194=1201,1195
<1195=1199,1196
<1196=1197
<1197=1198
<1199=1200
<1202=1203
<1203=1207,1204
<1204=1205
<1205=1206
<1207=1208
<1209=1210
<1210=1212,1211
<1213=1214
<1214=1216,1215
<1216=1225,1217
<1217=1219,1218
<1219=1223,1220
<1220=1221
<1221=1222
<1223=1224
<1226=1227
<1227=1229,1228
<1229=1238,1230
<1230=1232,1231
<1232=1236,1233
<1233=1234
<1234=1235
<1236=1237
<1239=1240
<1240=1242,1241
<1242=1251,1243
<1243=1245,1244
<1245=1249,1246
<1246=1247
<1247=1248
<1249=1250
<1252=1253
<1253=1259,1254
<1254=1257,1255
<1255=1256
<1257=1258
<1259=1260
<1261=1262
<1262=1265,1264,1263
<1266=1267
<1267=1269,1268
<1269=1278,1270
<1270=1272,1271
<1272=1276,1273
<1273=1274
<1274=1275
<1276=1277
<1279=1280
<1280=1282,1281
<1282=1291,1283
<1283=1285,1284
<1285=1289,1286
<1286=1287
<1287=1288
<1289=1290
<1292=1293
<1293=1295,1294
<1295=1304,1296
<1296=1298,1297
<1298=1302,1299
<1299=1300
<1300=1301
<1302=1303
<1305=1306
<1306=1312,1307
<1307=1310,1308
<1308=1309
<1310=1311
<1312=1313
<1314=1315
<1315=1318,1317,1316
<1337=1340,1339,1338
<1340=1352,1345,1341
<1341=1342
<1342=1344,1343
<1345=1346
<1346=1350,1347
<1347=1348
<1348=1349
<1350=1351
<1352=1362,1353
<1353=1355,1354
<1355=1356
<1356=1360,1357
<1357=1358
<1358=1359
<1360=1361
<1362=1363
<1363=1365,1364
<1372=1375,1374,1373
<1375=1765,1756,1743,1730,1717,1704,1691,1678,1665,1652,1639,1626,1613,1600,1587,1582,1573,1560,1547,1534,1529,1520,1507,1494,1481,1468,1455,1451,1384,1380,1376
<1376=1377
<1377=1379,1378
<1380=1381
<1381=1383,1382
<1384=1444,1434,1385
<1385=1386
<1386=1427,1417,1387
<1387=1388
<1388=1410,1400,1389
<1389=1390
<1390=1391
<1391=1392
<1392=1399,1393
<1393=1397,1394
<1394=1395
<1395=1396
<1397=1398
<1400=1401
<1401=1402
<1402=1409,1403
<1403=1407,1404
<1404=1405
<1405=1406
<1407=1408
<1410=1411
<1411=1415,1412
<1412=1413
<1413=1414
<1415=1416
<1417=1418
<1418=1419
<1419=1426,1420
<1420=1424,1421
<1421=1422
<1422=1423
<1424=1425
<1427=1428
<1428=1432,1429
<1429=1430
<1430=1431
<1432=1433
<1434=1435
<1435=1436
<1436=1443,1437
<1437=1441,1438
<1438=1439
<1439=1440
<1441=1442
<1444=1445
<1445=1449,1446
<1446=1447
<1447=1448
<1449=1450
<1451=1452
<1452=1454,1453
<1455=1456
<1456=1458,1457
<1458=1467,1459
<1459=1461,1460
<1461=1465,1462
<1462=1463
<1463=1464
<1465=1466
<1468=1469
<1469=1471,1470
<1471=1480,1472
<1472=1474,1473
<1474=1478,1475
<1475=1476
<1476=1477
<1478=1479
<1481=1482
<1482=1484,1483
<1484=1493,1485
<1485=1487,1486
<1487=1491,1488
<1488=1489
<1489=1490
<1491=1492
<1494=1495
<1495=1497,1496
<1497=1506,1498
<1498=1500,1499
<1500=1504,1501
<1501=1502
<1502=1503
<1504=1505
<1507=1508
<1508=1510,1509
<1510=1519,1511
<1511=1513,1512
<1513=1517,1514
<1514=1515
<1515=1516
<1517=1518
<1520=1521
<1521=1527,1522
<1522=1525,1523
<1523=1524
<1525=1526
<1527=1528
<1529=1530
<1530=1533,1532,1531
<1534=1535
<1535=1537,1536
<1537=1546,1538
<1538=1540,1539
<1540=1544,1541
<1541=1542
<1542=1543
<1544=1545
<1547=1548
<1548=1550,1549
<1550=1559,1551
<1551=1553,1552
<1553=1557,1554
<1554=1555
<1555=1556
<1557=1558
<1560=1561
<1561=1563,1562
<1563=1572,1564
<1564=1566,1565
<1566=1570,1567
<1567=1568
<1568=1569
<1570=1571
<1573=1574
<1574=1580,1575
<1575=1578,1576
<1576=1577
<1578=1579
<1580=1581
<1582=1583
<1583=1586,1585,1584
<1587=1588
<1588=1590,1589
<1590=1599,1591
<1591=1593,1592
<1593=1597,1594
<1594=1595
<1595=1596
<1597=1598
<1600=1601
<1601=1603,1602
<1603=1612,1604
<1604=1606,1605
<1606=1610,1607
<1607=1608
<1608=1609
<1610=1611
<1613=1614
<1614=1616,1615
<1616=1625,1617
<1617=1619,1618
<1619=1623,1620
<1620=1621
<1621=1622
<1623=1624
<1626=1627
<1627=1629,1628
<1629=1638,1630
<1630=1632,1631
<1632=1636,1633
<1633=1634
<1634=1635
<1636=1637
<1639=1640
<1640=1642,1641
<1642=1651,1643
<1643=1645,1644
<1645=1649,1646
<1646=1647
<1647=1648
<1649=1650
<1652=1653
<1653=1655,1654
<1655=1664,1656
<1656=1658,1657
<1658=1662,1659
<1659=1660
<1660=1661
<1662=1663
<1665=1666
<1666=1668,1667
<1668=1677,1669
<1669=1671,1670
<1671=1675,1672
<1672=1673
<1673=1674
<1675=1676
<1678=1679
<1679=1681,1680
<1681=1690,1682
<1682=1684,1683
<1684=1688,1685
<1685=1686
<1686=1687
<1688=1689
<1691=1692
<1692=1694,1693
<1694=1703,1695
<1695=1697,1696
<1697=1701,1698
<1698=1699
<1699=1700
<1701=1702
<1704=1705
<1705=1707,1706
<1707=1716,1708
<1708=1710,1709
<1710=1714,1711
<1711=1712
<1712=1713
<1714=1715
<1717=1718
<1718=1720,1719
<1720=1729,1721
<1721=1723,1722
<1723=1727,1724
<1724=1725
<1725=1726
<1727=1728
<1730=1731
<1731=1733,1732
<1733=1742,1734
<1734=1736,1735
<1736=1740,1737
<1737=1738
<1738=1739
<1740=1741
<1743=1744
<1744=1746,1745
<1746=1755,1747
<1747=1749,1748
<1749=1753,1750
<1750=1751
<1751=1752
<1753=1754
<1756=1757
<1757=1763,1758
<1758=1761,1759
<1759=1760
<1761=1762
<1763=1764
<1765=1766
<1766=1769,1768,1767
<1789=1792,1791,1790
<1792=2143,2134,2121,2108,2095,2082,2069,2056,2043,2030,2017,2004,1991,1978,1973,1964,1951,1938,1925,1920,1911,1898,1885,1872,1868,1801,1797,1793
<1793=1794
<1794=1796,1795
<1797=1798
<1798=1800,1799
<1801=1861,1851,1802
<1802=1803
<1803=1844,1834,1804
<1804=1805
<1805=1827,1817,1806
<1806=1807
<1807=1808
<1808=1809
<1809=1816,1810
<1810=1814,1811
<1811=1812
<1812=1813
<1814=1815
<1817=1818
<1818=1819
<1819=1826,1820
<1820=1824,1821
<1821=1822
<1822=1823
<1824=1825
<1827=1828
<1828=1832,1829
<1829=1830
<1830=1831
<1832=1833
<1834=1835
<1835=1836
<1836=1843,1837
<1837=1841,1838
<1838=1839
<1839=1840
<1841=1842
<1844=1845
<1845=1849,1846
<1846=1847
<1847=1848
<1849=1850
<1851=1852
<1852=1853
<1853=1860,1854
<1854=1858,1855
<1855=1856
<1856=1857
<1858=1859
<1861=1862
<1862=1866,1863
<1863=1864
<1864=1865
<1866=1867
<1868=1869
<1869=1871,1870
<1872=1873
<1873=1875,1874
<1875=1884,1876
<1876=1878,1877
<1878=1882,1879
<1879=1880
<1880=1881
<1882=1883
<1885=1886
<1886=1888,1887
<1888=1897,1889
<1889=1891,1890
<1891=1895,1892
<1892=1893
<1893=1894
<1895=1896
<1898=1899
<1899=1901,1900
<1901=1910,1902
<1902=1904,1903
<1904=1908,1905
<1905=1906
<1906=1907
<1908=1909
<1911=1912
<1912=1918,1913
<1913=1916,1914
<1914=1915
<1916=1917
<1918=1919
<1920=1921
<1921=1924,1923,1922
<1925=1926
<1926=1928,1927
<1928=1937,1929
<1929=1931,1930
<1931=1935,1932
<1932=1933
<1933=1934
<1935=1936
<1938=1939
<1939=1941,1940
<1941=1950,1942
<1942=1944,1943
<1944=1948,1945
<1945=1946
<1946=1947
<1948=1949
<1951=1952
<1952=1954,1953
<1954=1963,1955
<1955=1957,1956
<1957=1961,1958
<1958=1959
<1959=1960
<1961=1962
<1964=1965
<1965=1971,1966
<1966=1969,1967
<1967=1968
<1969=1970
<1971=1972
<1973=1974
<1974=1977,1976,1975
<1978=1979
<1979=1981,1980
<1981=1990,1982
<1982=1984,1983
<1984=1988,1985
<1985=1986
<1986=1987
<1988=1989
<1991=1992
<1992=1994,1993
<1994=2003,1995
<1995=1997,1996
<1997=2001,1998
<1998=1999
<1999=2000
<2001=2002
<2004=2005
<2005=2007,2006
<2007=2016,2008
<2008=2010,2009
<2010=2014,2011
<2011=2012
<2012=2013
<2014=2015
<2017=2018
<2018=2020,2019
<2020=2029,2021
<2021=2023,2022
<2023=2027,2024
<2024=2025
<2025=2026
<2027=2028
<2030=2031
<2031=2033,2032
<2033=2042,2034
<2034=2036,2035
<2036=2040,2037
<2037=2038
<2038=2039
<2040=2041
<2043=2044
<2044=2046,2045
<2046=2055,2047
<2047=2049,2048
<2049=2053,2050
<2050=2051
<2051=2052
<2053=2054
<2056=2057
<2057=2059,2058
<2059=2068,2060
<2060=2062,2061
<2062=2066,2063
<2063=2064
<2064=2065
<2066=2067
<2069=2070
<2070=2072,2071
<2072=2081,2073
<2073=2075,2074
<2075=2079,2076
<2076=2077
<2077=2078
<2079=2080
<2082=2083
<2083=2085,2084
<2085=2094,2086
<2086=2088,2087
<2088=2092,2089
<2089=2090
<2090=2091
<2092=2093
<2095=2096
<2096=2098,2097
<2098=2107,2099
<2099=2101,2100
<2101=2105,2102
<2102=2103
<2103=2104
<2105=2106
<2108=2109
<2109=2111,2110
<2111=2120,2112
<2112=2114,2113
<2114=2118,2115
<2115=2116
<2116=2117
<2118=2119
<2121=2122
<2122=2124,2123
<2124=2133,2125
<2125=2127,2126
<2127=2131,2128
<2128=2129
<2129=2130
<2131=2132
<2134=2135
<2135=2141,2136
<2136=2139,2137
<2137=2138
<2139=2140
<2141=2142
<2143=2144
<2144=2147,2146,2145
<2168=2171,2170,2169
<2171=2176,2172
<2172=2173
<2173=2175,2174
<2176=2177
<2177=2181,2178
<2178=2179
<2179=2180
<2181=2182
<2189=2192,2191,2190
<2192=2204,2197,2193
<2193=2194
<2194=2196,2195
<2197=2198
<2198=2202,2199
<2199=2200
<2200=2201
<2202=2203
<2204=2214,2205
<2205=2207,2206
<2207=2208
<2208=2212,2209
<2209=2210
<2210=2211
<2212=2213
<2214=2215
<2215=2217,2216
<2224=2227,2226,2225
<2227=2408,2399,2386,2373,2360,2347,2334,2321,2308,2295,2282,2269,2256,2243,2228
<2228=2236,2233,2229
<2229=2230
<2230=2231
<2231=2232
<2233=2234
<2234=2235
<2236=2237
<2237=2241,2238
<2238=2239
<2239=2240
<2241=2242
<2243=2244
<2244=2246,2245
<2246=2255,2247
<2247=2249,2248
<2249=2253,2250
<2250=2251
<2251=2252
<2253=2254
<2256=2257
<2257=2259,2258
<2259=2268,2260
<2260=2262,2261
<2262=2266,2263
<2263=2264
<2264=2265
<2266=2267
<2269=2270
<2270=2272,2271
<2272=2281,2273
<2273=2275,2274
<2275=2279,2276
<2276=2277
<2277=2278
<2279=2280
<2282=2283
<2283=2285,2284
<2285=2294,2286
<2286=2288,2287
<2288=2292,2289
<2289=2290
<2290=2291
<2292=2293
<2295=2296
<2296=2298,2297
<2298=2307,2299
<2299=2301,2300
<2301=2305,2302
<2302=2303
<2303=2304
<2305=2306
<2308=2309
<2309=2311,2310
<2311=2320,2312
<2312=2314,2313
<2314=2318,2315
<2315=2316
<2316=2317
<2318=2319
<2321=2322
<2322=2324,2323
<2324=2333,2325
<2325=2327,2326
<2327=2331,2328
<2328=2329
<2329=2330
<2331=2332
<2334=2335
<2335=2337,2336
<2337=2346,2338
<2338=2340,2339
<2340=2344,2341
<2341=2342
<2342=2343
<2344=2345
<2347=2348
<2348=2350,2349
<2350=2359,2351
<2351=2353,2352
<2353=2357,2354
<2354=2355
<2355=2356
<2357=2358
<2360=2361
<2361=2363,2362
<2363=2372,2364
<2364=2366,2365
<2366=2370,2367
<2367=2368
<2368=2369
<2370=2371
<2373=2374
<2374=2376,2375
<2376=2385,2377
<2377=2379,2378
<2379=2383,2380
<2380=2381
<2381=2382
<2383=2384
<2386=2387
<2387=2389,2388
<2389=2398,2390
<2390=2392,2391
<2392=2396,2393
<2393=2394
<2394=2395
<2396=2397
<2399=2400
<2400=2406,2401
<2401=2404,2402
<2402=2403
<2404=2405
<2406=2407
<2408=2409
<2409=2412,2411,2410
<2424=2427,2426,2425
<2427=2444,2439,2428
<2428=2429
<2429=2437,2430
<2430=2435,2433,2431
<2431=2432
<2433=2434
<2435=2436
<2437=2438
<2439=2440
<2440=2442,2441
<2442=2443
<2444=2446,2445
<2446=2447
<2447=2449,2448
<2457=2460,2459,2458
<2460=2682,2677,2668,2655,2650,2639,2634,2623,2619,2601,2583,2509,2495,2481,2477,2470,2461
<2461=2462
<2462=2468,2463
<2463=2466,2464
<2464=2465
<2466=2467
<2468=2469
<2470=2471
<2471=2475,2472
<2472=2473
<2473=2474
<2475=2476
<2477=2478
<2478=2480,2479
<2481=2482
<2482=2494,2493,2483
<2483=2492,2484
<2484=2490,2485
<2485=2488,2486
<2486=2487
<2488=2489
<2490=2491
<2495=2496
<2496=2508,2507,2497
<2497=2506,2498
<2498=2504,2499
<2499=2502,2500
<2500=2501
<2502=2503
<2504=2505
<2509=2579,2510
<2510=2512,2511
<2512=2567,2513
<2513=2560,2539,2525,2518,2514
<2514=2515
<2515=2517,2516
<2518=2519
<2519=2523,2520
<2520=2521
<2521=2522
<2523=2524
<2525=2526
<2526=2538,2537,2527
<2527=2536,2528
<2528=2534,2529
<2529=2532,2530
<2530=2531
<2532=2533
<2534=2535
<2539=2544,2540
<2540=2541
<2541=2543,2542
<2544=2545
<2545=2553,2546
<2546=2548,2547
<2548=2550,2549
<2550=2552,2551
<2553=2555,2554
<2555=2557,2556
<2557=2559,2558
<2560=2561
<2561=2566,2565,2562
<2562=2564,2563
<2567=2568
<2568=2574,2569
<2569=2571,2570
<2571=2573,2572
<2574=2576,2575
<2576=2578,2577
<2579=2580
<2580=2582,2581
<2583=2594,2584
<2584=2585
<2585=2586
<2586=2593,2587
<2587=2591,2588
<2588=2589
<2589=2590
<2591=2592
<2594=2595
<2595=2599,2596
<2596=2597
<2597=2598
<2599=2600
<2601=2612,2602
<2602=2603
<2603=2604
<2604=2611,2605
<2605=2609,2606
<2606=2607
<2607=2608
<2609=2610
<2612=2613
<2613=2617,2614
<2614=2615
<2615=2616
<2617=2618
<2619=2620
<2620=2622,2621
<2623=2624
<2624=2632,2625
<2625=2630,2628,2626
<2626=2627
<2628=2629
<2630=2631
<2632=2633
<2634=2635
<2635=2638,2637,2636
<2639=2640
<2640=2648,2641
<2641=2646,2644,2642
<2642=2643
<2644=2645
<2646=2647
<2648=2649
<2650=2651
<2651=2654,2653,2652
<2655=2656
<2656=2658,2657
<2658=2667,2659
<2659=2661,2660
<2661=2665,2662
<2662=2663
<2663=2664
<2665=2666
<2668=2669
<2669=2675,2670
<2670=2673,2671
<2671=2672
<2673=2674
<2675=2676
<2677=2678
<2678=2681,2680,2679
<2682=2683
<2683=2687,2684
<2684=2685
<2685=2686
<2687=2688
<2713=2716,2715,2714
<2716=2861,2852,2839,2834,2823,2818,2807,2803,2785,2767,2760,2755,2751,2735,2731,2726,2717
<2717=2718
<2718=2724,2719
<2719=2722,2720
<2720=2721
<2722=2723
<2724=2725
<2726=2727
<2727=2729,2728
<2729=2730
<2731=2732
<2732=2734,2733
<2735=2736
<2736=2750,2749,2737
<2737=2748,2738
<2738=2746,2739
<2739=2744,2742,2740
<2740=2741
<2742=2743
<2744=2745
<2746=2747
<2751=2752
<2752=2754,2753
<2755=2756
<2756=2758,2757
<2758=2759
<2760=2763,2761
<2761=2762
<2763=2764
<2764=2766,2765
<2767=2778,2768
<2768=2769
<2769=2770
<2770=2777,2771
<2771=2775,2772
<2772=2773
<2773=2774
<2775=2776
<2778=2779
<2779=2783,2780
<2780=2781
<2781=2782
<2783=2784
<2785=2796,2786
<2786=2787
<2787=2788
<2788=2795,2789
<2789=2793,2790
<2790=2791
<2791=2792
<2793=2794
<2796=2797
<2797=2801,2798
<2798=2799
<2799=2800
<2801=2802
<2803=2804
<2804=2806,2805
<2807=2808
<2808=2816,2809
<2809=2814,2812,2810
<2810=2811
<2812=2813
<2814=2815
<2816=2817
<2818=2819
<2819=2822,2821,2820
<2823=2824
<2824=2832,2825
<2825=2830,2828,2826
<2826=2827
<2828=2829
<2830=2831
<2832=2833
<2834=2835
<2835=2838,2837,2836
<2839=2840
<2840=2842,2841
<2842=2851,2843
<2843=2845,2844
<2845=2849,2846
<2846=2847
<2847=2848
<2849=2850
<2852=2853
<2853=2859,2854
<2854=2857,2855
<2855=2856
<2857=2858
<2859=2860
<2861=2862
<2862=2865,2864,2863
<2885=2888,2887,2886
<2888=2899,2895,2889
<2889=2890
<2890=2894,2891
<2891=2893,2892
<2895=2896
<2896=2898,2897
<2899=2907,2900
<2900=2901
<2901=2905,2902
<2902=2903
<2903=2904
<2905=2906
<2907=2908
<2908=2910,2909
<2917=2920,2919,2918
<2920=2943,2932,2921
<2921=2922
<2922=2930,2923
<2923=2928,2926,2924
<2924=2925
<2926=2927
<2928=2929
<2930=2931
<2932=2933
<2933=2941,2934
<2934=2939,2937,2935
<2935=2936
<2937=2938
<2939=2940
<2941=2942
<2943=2945,2944
<2945=2946
<2946=2948,2947
<2957=2969,2968,2958
<2958=2965,2962,2959
<2959=2961,2960
<2962=2964,2963
<2965=2967,2966
<2969=3450,3445,3436,3423,3418,3407,3402,3391,3372,3353,3343,3333,3320,3307,3303,3287,3271,3260,3242,3224,3210,3203,3196,3182,3164,3146,3135,3124,2990,2986,2979,2970
<2970=2971
<2971=2977,2972
<2972=2975,2973
<2973=2974
<2975=2976
<2977=2978
<2979=2980
<2980=2984,2981
<2981=2982
<2982=2983
<2984=2985
<2986=2987
<2987=2989,2988
<2990=3116,3112,3109,2991
<2991=2992
<2992=3101,3097,3094,2993
<2993=2994
<2994=3086,3068,2995
<2995=2996
<2996=3060,3042,2997
<2997=2998
<2998=3022,2999
<2999=3000
<3000=3020,3001
<3001=3018,3016,3014,3010,3006,3002
<3002=3003
<3003=3005,3004
<3006=3007
<3007=3009,3008
<3010=3011
<3011=3013,3012
<3014=3015
<3016=3017
<3018=3019
<3020=3021
<3022=3023
<3023=3041,3040,3024
<3024=3039,3025
<3025=3037,3026
<3026=3035,3031,3027
<3027=3028
<3028=3030,3029
<3031=3032
<3032=3034,3033
<3035=3036
<3037=3038
<3042=3043
<3043=3044
<3044=3058,3045
<3045=3056,3054,3052,3050,3048,3046
<3046=3047
<3048=3049
<3050=3051
<3052=3053
<3054=3055
<3056=3057
<3058=3059
<3060=3061
<3061=3065,3062
<3062=3064,3063
<3065=3067,3066
<3068=3069
<3069=3070
<3070=3084,3071
<3071=3082,3080,3078,3076,3074,3072
<3072=3073
<3074=3075
<3076=3077
<3078=3079
<3080=3081
<3082=3083
<3084=3085
<3086=3087
<3087=3091,3088
<3088=3090,3089
<3091=3093,3092
<3094=3096,3095
<3097=3098
<3098=3100,3099
<3101=3102
<3102=3103
<3103=3108,3107,3104
<3104=3106,3105
<3109=3111,3110
<3112=3113
<3113=3115,3114
<3116=3117
<3117=3118
<3118=3123,3122,3119
<3119=3121,3120
<3124=3125
<3125=3134,3133,3126
<3126=3132,3127
<3127=3131,3128
<3128=3130,3129
<3135=3136
<3136=3145,3144,3137
<3137=3143,3138
<3138=3142,3139
<3139=3141,3140
<3146=3147
<3147=3163,3162,3148
<3148=3161,3149
<3149=3159,3150
<3150=3151
<3151=3152
<3152=3158,3153
<3153=3157,3154
<3154=3156,3155
<3159=3160
<3164=3165
<3165=3181,3180,3166
<3166=3179,3167
<3167=3177,3168
<3168=3169
<3169=3170
<3170=3176,3171
<3171=3175,3172
<3172=3174,3173
<3177=3178
<3182=3183
<3183=3195,3194,3184
<3184=3193,3185
<3185=3191,3186
<3186=3189,3187
<3187=3188
<3189=3190
<3191=3192
<3196=3197
<3197=3201,3198
<3198=3199
<3199=3200
<3201=3202
<3203=3204
<3204=3208,3205
<3205=3206
<3206=3207
<3208=3209
<3210=3211
<3211=3223,3222,3212
<3212=3221,3213
<3213=3219,3214
<3214=3217,3215
<3215=3216
<3217=3218
<3219=3220
<3224=3225
<3225=3241,3240,3226
<3226=3239,3227
<3227=3237,3228
<3228=3233,3229
<3229=3230
<3230=3232,3231
<3233=3234
<3234=3236,3235
<3237=3238
<3242=3243
<3243=3259,3258,3244
<3244=3257,3245
<3245=3255,3246
<3246=3253,3249,3247
<3247=3248
<3249=3250
<3250=3252,3251
<3253=3254
<3255=3256
<3260=3261
<3261=3269,3262
<3262=3267,3263
<3263=3264
<3264=3266,3265
<3267=3268
<3269=3270
<3271=3272
<3272=3286,3285,3273
<3273=3284,3274
<3274=3282,3275
<3275=3280,3278,3276
<3276=3277
<3278=3279
<3280=3281
<3282=3283
<3287=3299,3294,3288
<3288=3289
<3289=3290
<3290=3291
<3291=3293,3292
<3294=3295
<3295=3296
<3296=3298,3297
<3299=3300
<3300=3302,3301
<3303=3304
<3304=3306,3305
<3307=3308
<3308=3319,3318,3309
<3309=3317,3310
<3310=3314,3311
<3311=3313,3312
<3314=3316,3315
<3320=3321
<3321=3332,3331,3322
<3322=3330,3323
<3323=3327,3324
<3324=3326,3325
<3327=3329,3328
<3333=3334
<3334=3342,3341,3335
<3335=3340,3336
<3336=3338,3337
<3338=3339
<3343=3344
<3344=3352,3351,3345
<3345=3350,3346
<3346=3348,3347
<3348=3349
<3353=3365,3354
<3354=3356,3355
<3356=3357
<3357=3364,3358
<3358=3362,3359
<3359=3360
<3360=3361
<3362=3363
<3365=3366
<3366=3370,3367
<3367=3368
<3368=3369
<3370=3371
<3372=3384,3373
<3373=3375,3374
<3375=3376
<3376=3383,3377
<3377=3381,3378
<3378=3379
<3379=3380
<3381=3382
<3384=3385
<3385=3389,3386
<3386=3387
<3387=3388
<3389=3390
<3391=3392
<3392=3400,3393
<3393=3398,3396,3394
<3394=3395
<3396=3397
<3398=3399
<3400=3401
<3402=3403
<3403=3406,3405,3404
<3407=3408
<3408=3416,3409
<3409=3414,3412,3410
<3410=3411
<3412=3413
<3414=3415
<3416=3417
<3418=3419
<3419=3422,3421,3420
<3423=3424
<3424=3426,3425
<3426=3435,3427
<3427=3429,3428
<3429=3433,3430
<3430=3431
<3431=3432
<3433=3434
<3436=3437
<3437=3443,3438
<3438=3441,3439
<3439=3440
<3441=3442
<3443=3444
<3445=3446
<3446=3449,3448,3447
<3450=3451
<3451=3455,3452
<3452=3453
<3453=3454
<3455=3456
<3506=3509,3508,3507
<3509=3520,3516,3510
<3510=3511
<3511=3515,3512
<3512=3514,3513
<3516=3517
<3517=3519,3518
<3520=3528,3521
<3521=3522
<3522=3526,3523
<3523=3524
<3524=3525
<3526=3527
<3528=3529
<3529=3531,3530
<3538=3541,3540,3539
<3541=3542
<3542=3567,3557,3543
<3543=3544
<3544=3547,3545
<3545=3546
<3547=3553,3548
<3548=3549
<3549=3551,3550
<3551=3552
<3553=3554
<3554=3556,3555
<3557=3558
<3558=3559
<3559=3566,3560
<3560=3562,3561
<3562=3563
<3563=3565,3564
<3567=3568
<3577=3586,3585,3578
<3578=3582,3579
<3579=3581,3580
<3582=3584,3583
<3586=3692,3687,3678,3665,3652,3639,3634,3623,3587
<3587=3609,3599,3588
<3588=3589
<3589=3590
<3590=3591
<3591=3597,3592
<3592=3595,3593
<3593=3594
<3595=3596
<3597=3598
<3599=3600
<3600=3601
<3601=3607,3602
<3602=3605,3603
<3603=3604
<3605=3606
<3607=3608
<3609=3610
<3610=3617,3611
<3611=3615,3612
<3612=3613
<3613=3614
<3615=3616
<3617=3621,3618
<3618=3619
<3619=3620
<3621=3622
<3623=3624
<3624=3632,3625
<3625=3630,3628,3626
<3626=3627
<3628=3629
<3630=3631
<3632=3633
<3634=3635
<3635=3638,3637,3636
<3639=3640
<3640=3642,3641
<3642=3651,3643
<3643=3645,3644
<3645=3649,3646
<3646=3647
<3647=3648
<3649=3650
<3652=3653
<3653=3655,3654
<3655=3664,3656
<3656=3658,3657
<3658=3662,3659
<3659=3660
<3660=3661
<3662=3663
<3665=3666
<3666=3668,3667
<3668=3677,3669
<3669=3671,3670
<3671=3675,3672
<3672=3673
<3673=3674
<3675=3676
<3678=3679
<3679=3685,3680
<3680=3683,3681
<3681=3682
<3683=3684
<3685=3686
<3687=3688
<3688=3691,3690,3689
<3692=3694,3693
<3694=3695
<3711=3720,3719,3712
<3712=3716,3713
<3713=3715,3714
<3716=3718,3717
<3720=3965,3949,3944,3931,3923,3914,3909,3894,3854,3847,3838,3826,3783,3733,3729,3721
<3721=3727,3722
<3722=3723
<3723=3725,3724
<3725=3726
<3727=3728
<3729=3730
<3730=3732,3731
<3733=3775,3764,3761,3734
<3734=3748,3735
<3735=3736
<3736=3743,3737
<3737=3742,3738
<3738=3740,3739
<3740=3741
<3743=3745,3744
<3745=3747,3746
<3748=3749
<3749=3756,3750
<3750=3755,3751
<3751=3753,3752
<3753=3754
<3756=3758,3757
<3758=3760,3759
<3761=3763,3762
<3764=3765
<3765=3774,3766
<3766=3773,3767
<3767=3769,3768
<3769=3770
<3770=3772,3771
<3775=3776
<3776=3777
<3777=3782,3781,3778
<3778=3780,3779
<3783=3818,3807,3804,3784
<3784=3785
<3785=3786
<3786=3799,3787
<3787=3795,3788
<3788=3790,3789
<3790=3792,3791
<3792=3794,3793
<3795=3797,3796
<3797=3798
<3799=3801,3800
<3801=3803,3802
<3804=3806,3805
<3807=3808
<3808=3817,3809
<3809=3816,3810
<3810=3812,3811
<3812=3813
<3813=3815,3814
<3818=3819
<3819=3820
<3820=3825,3824,3821
<3821=3823,3822
<3826=3827
<3827=3837,3836,3828
<3828=3835,3829
<3829=3833,3830
<3830=3831
<3831=3832
<3833=3834
<3838=3839
<3839=3846,3840
<3840=3844,3841
<3841=3842
<3842=3843
<3844=3845
<3847=3848
<3848=3852,3849
<3849=3850
<3850=3851
<3852=3853
<3854=3892,3855
<3855=3883,3874,3865,3856
<3856=3857
<3857=3861,3858
<3858=3859
<3859=3860
<3861=3862
<3862=3864,3863
<3865=3866
<3866=3870,3867
<3867=3868
<3868=3869
<3870=3871
<3871=3873,3872
<3874=3875
<3875=3879,3876
<3876=3877
<3877=3878
<3879=3880
<3880=3882,3881
<3883=3884
<3884=3888,3885
<3885=3886
<3886=3887
<3888=3889
<3889=3891,3890
<3892=3893
<3894=3895
<3895=3907,3896
<3896=3905,3903,3901,3899,3897
<3897=3898
<3899=3900
<3901=3902
<3903=3904
<3905=3906
<3907=3908
<3909=3910
<3910=3913,3912,3911
<3914=3915
<3915=3921,3916
<3916=3919,3917
<3917=3918
<3919=3920
<3921=3922
<3923=3924
<3924=3926,3925
<3926=3930,3927
<3927=3929,3928
<3931=3932
<3932=3942,3933
<3933=3940,3938,3934
<3934=3935
<3935=3937,3936
<3938=3939
<3940=3941
<3942=3943
<3944=3945
<3945=3948,3947,3946
<3949=3950
<3950=3964,3963,3951
<3951=3962,3952
<3952=3960,3953
<3953=3956,3954
<3954=3955
<3956=3957
<3957=3959,3958
<3960=3961
<3965=3966
<3966=3971,3970,3967
<3967=3969,3968
<4000=4006,4005,4001
<4001=4002
<4002=4004,4003
<4006=4099,4085,4079,4069,4055,4036,4007
<4007=4028,4024,4021,4008
<4008=4009
<4009=4010
<4010=4016,4011
<4011=4013,4012
<4013=4015,4014
<4016=4018,4017
<4018=4020,4019
<4021=4023,4022
<4024=4025
<4025=4027,4026
<4028=4029
<4029=4030
<4030=4035,4034,4031
<4031=4033,4032
<4036=4037
<4037=4053,4038
<4038=4039
<4039=4040
<4040=4047,4041
<4041=4043,4042
<4043=4044
<4044=4046,4045
<4047=4049,4048
<4049=4050
<4050=4052,4051
<4053=4054
<4055=4056
<4056=4068,4067,4057
<4057=4066,4058
<4058=4064,4059
<4059=4062,4060
<4060=4061
<4062=4063
<4064=4065
<4069=4071,4070
<4071=4072
<4072=4074,4073
<4074=4076,4075
<4076=4078,4077
<4079=4081,4080
<4081=4082
<4082=4084,4083
<4085=4086
<4086=4098,4097,4087
<4087=4096,4088
<4088=4095,4089
<4089=4091,4090
<4091=4092
<4092=4094,4093
<4099=4111,4100
<4100=4102,4101
<4102=4103
<4103=4109,4104
<4104=4107,4105
<4105=4106
<4107=4108
<4109=4110
<4111=4112
<4112=4114,4113
<4136=4145,4144,4137
<4137=4141,4138
<4138=4140,4139
<4141=4143,4142
<4145=4400,4394,4154,4146
<4146=4152,4147
<4147=4148
<4148=4150,4149
<4150=4151
<4152=4153
<4154=4390,4272,4155
<4155=4156
<4156=4258,4215,4165,4161,4157
<4157=4158
<4158=4160,4159
<4161=4162
<4162=4164,4163
<4165=4207,4196,4193,4166
<4166=4180,4167
<4167=4168
<4168=4175,4169
<4169=4174,4170
<4170=4172,4171
<4172=4173
<4175=4177,4176
<4177=4179,4178
<4180=4181
<4181=4188,4182
<4182=4187,4183
<4183=4185,4184
<4185=4186
<4188=4190,4189
<4190=4192,4191
<4193=4195,4194
<4196=4197
<4197=4206,4198
<4198=4205,4199
<4199=4201,4200
<4201=4202
<4202=4204,4203
<4207=4208
<4208=4209
<4209=4214,4213,4210
<4210=4212,4211
<4215=4250,4239,4236,4216
<4216=4217
<4217=4218
<4218=4231,4219
<4219=4227,4220
<4220=4222,4221
<4222=4224,4223
<4224=4226,4225
<4227=4229,4228
<4229=4230
<4231=4233,4232
<4233=4235,4234
<4236=4238,4237
<4239=4240
<4240=4249,4241
<4241=4248,4242
<4242=4244,4243
<4244=4245
<4245=4247,4246
<4250=4251
<4251=4252
<4252=4257,4256,4253
<4253=4255,4254
<4258=4259
<4259=4271,4270,4260
<4260=4269,4261
<4261=4267,4262
<4262=4265,4263
<4263=4264
<4265=4266
<4267=4268
<4272=4378,4335,4281,4277,4273
<4273=4274
<4274=4276,4275
<4277=4278
<4278=4280,4279
<4281=4327,4316,4313,4282
<4282=4298,4283
<4283=4284
<4284=4293,4285
<4285=4292,4286
<4286=4288,4287
<4288=4290,4289
<4290=4291
<4293=4295,4294
<4295=4297,4296
<4298=4299
<4299=4308,4300
<4300=4307,4301
<4301=4303,4302
<4303=4305,4304
<4305=4306
<4308=4310,4309
<4310=4312,4311
<4313=4315,4314
<4316=4317
<4317=4326,4318
<4318=4325,4319
<4319=4321,4320
<4321=4322
<4322=4324,4323
<4327=4328
<4328=4329
<4329=4334,4333,4330
<4330=4332,4331
<4335=4370,4359,4356,4336
<4336=4337
<4337=4338
<4338=4351,4339
<4339=4347,4340
<4340=4342,4341
<4342=4344,4343
<4344=4346,4345
<4347=4349,4348
<4349=4350
<4351=4353,4352
<4353=4355,4354
<4356=4358,4357
<4359=4360
<4360=4369,4361
<4361=4368,4362
<4362=4364,4363
<4364=4365
<4365=4367,4366
<4370=4371
<4371=4372
<4372=4377,4376,4373
<4373=4375,4374
<4378=4379
<4379=4389,4388,4380
<4380=4387,4381
<4381=4385,4382
<4382=4383
<4383=4384
<4385=4386
<4390=4391
<4391=4393,4392
<4394=4396,4395
<4396=4397
<4397=4399,4398
<4400=4402,4401
<4402=4403
<4403=4407,4404
<4404=4406,4405
<4430=4433,4432,4431
<4433=4434
<4434=4518,4451,4435
<4435=4436
<4436=4449,4437
<4437=4442,4438
<4438=4439
<4439=4441,4440
<4442=4443
<4443=4445,4444
<4445=4446
<4446=4448,4447
<4449=4450
<4451=4504,4463,4456,4452
<4452=4453
<4453=4455,4454
<4456=4457
<4457=4459,4458
<4459=4460
<4460=4462,4461
<4463=4496,4492,4489,4464
<4464=4481,4480,4479,4473,4465
<4465=4466
<4466=4468,4467
<4468=4470,4469
<4470=4472,4471
<4473=4474
<4474=4476,4475
<4476=4478,4477
<4481=4483,4482
<4483=4484
<4484=4486,4485
<4486=4488,4487
<4489=4491,4490
<4492=4493
<4493=4495,4494
<4496=4497
<4497=4498
<4498=4503,4502,4499
<4499=4501,4500
<4504=4505
<4505=4517,4516,4506
<4506=4515,4507
<4507=4514,4508
<4508=4510,4509
<4510=4511
<4511=4513,4512
<4518=4519
<4535=4544,4543,4536
<4536=4540,4537
<4537=4539,4538
<4540=4542,4541
<4544=4668,4654,4611,4561,4557,4553,4545
<4545=4551,4546
<4546=4547
<4547=4549,4548
<4549=4550
<4551=4552
<4553=4554
<4554=4556,4555
<4557=4558
<4558=4560,4559
<4561=4603,4592,4589,4562
<4562=4576,4563
<4563=4564
<4564=4571,4565
<4565=4570,4566
<4566=4568,4567
<4568=4569
<4571=4573,4572
<4573=4575,4574
<4576=4577
<4577=4584,4578
<4578=4583,4579
<4579=4581,4580
<4581=4582
<4584=4586,4585
<4586=4588,4587
<4589=4591,4590
<4592=4593
<4593=4602,4594
<4594=4601,4595
<4595=4597,4596
<4597=4598
<4598=4600,4599
<4603=4604
<4604=4605
<4605=4610,4609,4606
<4606=4608,4607
<4611=4646,4635,4632,4612
<4612=4613
<4613=4614
<4614=4627,4615
<4615=4623,4616
<4616=4618,4617
<4618=4620,4619
<4620=4622,4621
<4623=4625,4624
<4625=4626
<4627=4629,4628
<4629=4631,4630
<4632=4634,4633
<4635=4636
<4636=4645,4637
<4637=4644,4638
<4638=4640,4639
<4640=4641
<4641=4643,4642
<4646=4647
<4647=4648
<4648=4653,4652,4649
<4649=4651,4650
<4654=4655
<4655=4667,4666,4656
<4656=4665,4657
<4657=4663,4658
<4658=4661,4659
<4659=4660
<4661=4662
<4663=4664
<4668=4670,4669
<4670=4671
<4691=4694,4693,4692
<4694=4706,4699,4695
<4695=4696
<4696=4698,4697
<4699=4700
<4700=4702,4701
<4702=4703
<4703=4705,4704
<4706=4731,4727,4724,4707
<4707=4716,4715,4714,4708
<4708=4709
<4709=4711,4710
<4711=4713,4712
<4716=4718,4717
<4718=4719
<4719=4721,4720
<4721=4723,4722
<4724=4726,4725
<4727=4728
<4728=4730,4729
<4731=4732
<4732=4733
<4733=4738,4737,4734
<4734=4736,4735
<4750=4753,4752,4751
<4753=4758,4754
<4754=4755
<4755=4757,4756
<4758=4759
<4759=4766,4760
<4760=4764,4761
<4761=4762
<4762=4763
<4764=4765
<4775=4778,4777,4776
<4778=5085,5071,4791,4787,4783,4779
<4779=4780
<4780=4782,4781
<4783=4784
<4784=4786,4785
<4787=4788
<4788=4790,4789
<4791=5067,4956,4792
<4792=4793
<4793=4951,4942,4929,4916,4903,4794
<4794=4896,4880,4795
<4795=4796
<4796=4875,4866,4853,4840,4827,4797
<4797=4820,4808,4798
<4798=4799
<4799=4807,4806,4805,4804,4803,4802,4801,4800
<4808=4809
<4809=4810
<4810=4818,4811
<4811=4816,4814,4812
<4812=4813
<4814=4815
<4816=4817
<4818=4819
<4820=4821
<4821=4825,4822
<4822=4823
<4823=4824
<4825=4826
<4827=4828
<4828=4830,4829
<4830=4839,4831
<4831=4833,4832
<4833=4837,4834
<4834=4835
<4835=4836
<4837=4838
<4840=4841
<4841=4843,4842
<4843=4852,4844
<4844=4846,4845
<4846=4850,4847
<4847=4848
<4848=4849
<4850=4851
<4853=4854
<4854=4856,4855
<4856=4865,4857
<4857=4859,4858
<4859=4863,4860
<4860=4861
<4861=4862
<4863=4864
<4866=4867
<4867=4873,4868
<4868=4871,4869
<4869=4870
<4871=4872
<4873=4874
<4875=4876
<4876=4879,4878,4877
<4880=4881
<4881=4882
<4882=4894,4883
<4883=4892,4888,4884
<4884=4885
<4885=4887,4886
<4888=4889
<4889=4891,4890
<4892=4893
<4894=4895
<4896=4897
<4897=4901,4898
<4898=4899
<4899=4900
<4901=4902
<4903=4904
<4904=4906,4905
<4906=4915,4907
<4907=4909,4908
<4909=4913,4910
<4910=4911
<4911=4912
<4913=4914
<4916=4917
<4917=4919,4918
<4919=4928,4920
<4920=4922,4921
<4922=4926,4923
<4923=4924
<4924=4925
<4926=4927
<4929=4930
<4930=4932,4931
<4932=4941,4933
<4933=4935,4934
<4935=4939,4936
<4936=4937
<4937=4938
<4939=4940
<4942=4943
<4943=4949,4944
<4944=4947,4945
<4945=4946
<4947=4948
<4949=4950
<4951=4952
<4952=4955,4954,4953
<4956=5060,5048,4957
<4957=5033,5018,4958
<4958=4959
<4959=5003,4988,4960
<4960=4961
<4961=4973,4962
<4962=4963
<4963=4971,4964
<4964=4969,4967,4965
<4965=4966
<4967=4968
<4969=4970
<4971=4972
<4973=4974
<4974=4976,4975
<4976=4986,4977
<4977=4980,4978
<4978=4979
<4980=4981
<4981=4985,4982
<4982=4984,4983
<4986=4987
<4988=4989
<4989=5001,4990
<4990=4999,4995,4991
<4991=4992
<4992=4994,4993
<4995=4996
<4996=4998,4997
<4999=5000
<5001=5002
<5003=5004
<5004=5006,5005
<5006=5016,5007
<5007=5010,5008
<5008=5009
<5010=5011
<5011=5015,5012
<5012=5014,5013
<5016=5017
<5018=5019
<5019=5031,5020
<5020=5029,5025,5021
<5021=5022
<5022=5024,5023
<5025=5026
<5026=5028,5027
<5029=5030
<5031=5032
<5033=5034
<5034=5036,5035
<5036=5046,5037
<5037=5040,5038
<5038=5039
<5040=5041
<5041=5045,5042
<5042=5044,5043
<5046=5047
<5048=5049
<5049=5059,5058,5050
<5050=5057,5051
<5051=5055,5052
<5052=5053
<5053=5054
<5055=5056
<5060=5061
<5061=5065,5062
<5062=5063
<5063=5064
<5065=5066
<5067=5068
<5068=5070,5069
<5071=5072
<5072=5084,5083,5073
<5073=5082,5074
<5074=5080,5075
<5075=5078,5076
<5076=5077
<5078=5079
<5080=5081
<5085=5092,5086
<5086=5091,5090,5087
<5087=5089,5088
<5092=5097,5096,5093
<5093=5095,5094
<5122=5125,5124,5123
<5125=5126
<5126=5166,5155,5127
<5127=5128
<5128=5143,5138,5129
<5129=5130
<5130=5136,5131
<5131=5132
<5132=5133
<5133=5135,5134
<5136=5137
<5138=5139
<5139=5141,5140
<5141=5142
<5143=5153,5144
<5144=5145
<5145=5151,5146
<5146=5147
<5147=5148
<5148=5150,5149
<5151=5152
<5153=5154
<5155=5156
<5156=5164,5157
<5157=5158
<5158=5159
<5159=5163,5160
<5160=5162,5161
<5164=5165
<5166=5167
<5179=5182,5181,5180
<5182=5183
<5183=5223,5212,5184
<5184=5185
<5185=5200,5195,5186
<5186=5187
<5187=5193,5188
<5188=5189
<5189=5190
<5190=5192,5191
<5193=5194
<5195=5196
<5196=5198,5197
<5198=5199
<5200=5210,5201
<5201=5202
<5202=5208,5203
<5203=5204
<5204=5205
<5205=5207,5206
<5208=5209
<5210=5211
<5212=5213
<5213=5221,5214
<5214=5215
<5215=5216
<5216=5220,5217
<5217=5219,5218
<5221=5222
<5223=5224
<5236=5239,5238,5237
<5239=5240
<5240=5241
<5241=5246,5242
<5242=5244,5243
<5244=5245
<5246=5248,5247
<5248=5249
<5255=5261,5260,5256
<5256=5257
<5257=5259,5258
<5261=5330,5326,5305,5275,5262
<5262=5263
<5263=5265,5264
<5265=5274,5266
<5266=5268,5267
<5268=5272,5269
<5269=5270
<5270=5271
<5272=5273
<5275=5299,5290,5276
<5276=5277
<5277=5278
<5278=5288,5279
<5279=5286,5280
<5280=5281
<5281=5285,5282
<5282=5284,5283
<5286=5287
<5288=5289
<5290=5291
<5291=5297,5292
<5292=5295,5293
<5293=5294
<5295=5296
<5297=5298
<5299=5300
<5300=5304,5301
<5301=5303,5302
<5305=5320,5310,5307,5306
<5307=5309,5308
<5310=5311
<5311=5317,5312
<5312=5314,5313
<5314=5316,5315
<5317=5319,5318
<5320=5321
<5321=5325,5322
<5322=5324,5323
<5326=5327
<5327=5329,5328
<5330=5331
<5331=5341,5340,5332
<5332=5339,5333
<5333=5337,5334
<5334=5335
<5335=5336
<5337=5338
<5354=5360,5359,5355
<5355=5356
<5356=5358,5357
<5360=5361
<5361=5381,5371,5362
<5362=5363
<5363=5364
<5364=5365
<5365=5369,5366
<5366=5367
<5367=5368
<5369=5370
<5371=5372
<5372=5373
<5373=5379,5374
<5374=5377,5375
<5375=5376
<5377=5378
<5379=5380
<5381=5382
<5382=5384,5383
<5391=5397,5396,5392
<5392=5393
<5393=5395,5394
<5397=5437,5424,5411,5398
<5398=5399
<5399=5401,5400
<5401=5410,5402
<5402=5404,5403
<5404=5408,5405
<5405=5406
<5406=5407
<5408=5409
<5411=5412
<5412=5414,5413
<5414=5423,5415
<5415=5417,5416
<5417=5421,5418
<5418=5419
<5419=5420
<5421=5422
<5424=5425
<5425=5427,5426
<5427=5436,5428
<5428=5430,5429
<5430=5434,5431
<5431=5432
<5432=5433
<5434=5435
<5437=5438
<5438=5444,5439
<5439=5442,5440
<5440=5441
<5442=5443
<5444=5445
<5454=5457,5456,5455
<5457=5478,5471,5458
<5458=5464,5462,5459
<5459=5460
<5460=5461
<5462=5463
<5464=5465
<5465=5469,5466
<5466=5467
<5467=5468
<5469=5470
<5471=5472
<5472=5476,5473
<5473=5474
<5474=5475
<5476=5477
<5478=5479
<5479=5482,5481,5480
<5490=5493,5492,5491
<5493=5519,5494
<5494=5495
<5495=5517,5496
<5496=5511,5505,5501,5497
<5497=5498
<5498=5500,5499
<5501=5502
<5502=5504,5503
<5505=5506
<5506=5508,5507
<5508=5510,5509
<5511=5512
<5512=5514,5513
<5514=5516,5515
<5517=5518
<5519=5529,5520
<5520=5528,5527,5521
<5521=5526,5522
<5522=5524,5523
<5524=5525
<5529=5537,5536,5530
<5530=5535,5531
<5531=5533,5532
<5533=5534
<5546=5552,5551,5547
<5547=5548
<5548=5550,5549
<5552=5598,5588,5553
<5553=5554
<5554=5586,5555
<5555=5571,5556
<5556=5557
<5557=5561,5558
<5558=5560,5559
<5561=5565,5562
<5562=5564,5563
<5565=5569,5566
<5566=5567
<5567=5568
<5569=5570
<5571=5572
<5572=5576,5573
<5573=5575,5574
<5576=5580,5577
<5577=5579,5578
<5580=5584,5581
<5581=5582
<5582=5583
<5584=5585
<5586=5587
<5588=5589
<5589=5597,5596,5590
<5590=5595,5591
<5591=5593,5592
<5593=5594
<5598=5599
<5599=5607,5606,5600
<5600=5605,5601
<5601=5603,5602
<5603=5604
<5619=5625,5624,5620
<5620=5621
<5621=5623,5622
<5625=5665,5661,5628,5626
<5626=5627
<5628=5653,5649,5646,5629
<5629=5630
<5630=5631
<5631=5642,5632
<5632=5633
<5633=5634
<5634=5640,5635
<5635=5636
<5636=5637
<5637=5639,5638
<5640=5641
<5642=5643
<5643=5645,5644
<5646=5648,5647
<5649=5650
<5650=5652,5651
<5653=5654
<5654=5655
<5655=5660,5659,5656
<5656=5658,5657
<5661=5662
<5662=5664,5663
<5665=5666
<5666=5678,5677,5667
<5667=5676,5668
<5668=5675,5669
<5669=5671,5670
<5671=5672
<5672=5674,5673
<5690=5699,5698,5691
<5691=5695,5692
<5692=5694,5693
<5695=5697,5696
<5699=5735,5725,5702,5700
<5700=5701
<5702=5705,5703
<5703=5704
<5705=5706
<5706=5722,5707
<5707=5717,5708
<5708=5714,5709
<5709=5713,5710
<5710=5712,5711
<5714=5716,5715
<5717=5721,5718
<5718=5720,5719
<5722=5724,5723
<5725=5726
<5726=5734,5733,5727
<5727=5732,5728
<5728=5730,5729
<5730=5731
<5735=5736
<5736=5744,5743,5737
<5737=5742,5738
<5738=5740,5739
<5740=5741
<5756=5771,5770,5757
<5757=5767,5764,5761,5758
<5758=5760,5759
<5761=5763,5762
<5764=5766,5765
<5767=5769,5768
<5771=5802,5793,5784,5778,5772
<5772=5773
<5773=5777,5774
<5774=5776,5775
<5778=5779
<5779=5783,5780
<5780=5782,5781
<5784=5785
<5785=5792,5791,5786
<5786=5790,5787
<5787=5789,5788
<5793=5794
<5794=5801,5800,5795
<5795=5799,5796
<5796=5798,5797
<5802=5803
<5803=5821,5820,5804
<5804=5819,5805
<5805=5817,5806
<5806=5812,5807
<5807=5808
<5808=5810,5809
<5810=5811
<5812=5813
<5813=5815,5814
<5815=5816
<5817=5818
<5835=5850,5849,5836
<5836=5846,5843,5840,5837
<5837=5839,5838
<5840=5842,5841
<5843=5845,5844
<5846=5848,5847
<5850=5872,5863,5857,5851
<5851=5852
<5852=5856,5853
<5853=5855,5854
<5857=5858
<5858=5862,5859
<5859=5861,5860
<5863=5864
<5864=5871,5870,5865
<5865=5869,5866
<5866=5868,5867
<5872=5873
<5873=5891,5890,5874
<5874=5889,5875
<5875=5887,5876
<5876=5882,5877
<5877=5878
<5878=5880,5879
<5880=5881
<5882=5883
<5883=5885,5884
<5885=5886
<5887=5888
<5904=5919,5918,5905
<5905=5915,5912,5909,5906
<5906=5908,5907
<5909=5911,5910
<5912=5914,5913
<5915=5917,5916
<5919=5952,5935,5920
<5920=5921
<5921=5933,5922
<5922=5931,5929,5927,5925,5923
<5923=5924
<5925=5926
<5927=5928
<5929=5930
<5931=5932
<5933=5934
<5935=5936
<5936=5950,5937
<5937=5944,5940,5938
<5938=5939
<5940=5941
<5941=5943,5942
<5944=5945
<5945=5947,5946
<5947=5949,5948
<5950=5951
<5952=5953
<5953=5956,5955,5954
<5966=5984,5983,5967
<5967=5980,5977,5974,5971,5968
<5968=5970,5969
<5971=5973,5972
<5974=5976,5975
<5977=5979,5978
<5980=5982,5981
<5984=6152,6145,6138,6121,6102,6055,6037,6018,6005,5995,5985
<5985=5986
<5986=5994,5987
<5987=5989,5988
<5989=5993,5990
<5990=5992,5991
<5995=5996
<5996=6004,5997
<5997=5999,5998
<5999=6003,6000
<6000=6002,6001
<6005=6006
<6006=6017,6016,6007
<6007=6015,6008
<6008=6014,6009
<6009=6013,6010
<6010=6012,6011
<6018=6019
<6019=6036,6035,6020
<6020=6034,6021
<6021=6032,6022
<6022=6023
<6023=6024
<6024=6030,6025
<6025=6026
<6026=6027
<6027=6029,6028
<6030=6031
<6032=6033
<6037=6038
<6038=6054,6053,6039
<6039=6052,6040
<6040=6050,6041
<6041=6042
<6042=6043
<6043=6047,6044
<6044=6046,6045
<6047=6049,6048
<6050=6051
<6055=6096,6082,6056
<6056=6057
<6057=6070,6058
<6058=6059
<6059=6069,6060
<6060=6066,6061
<6061=6065,6062
<6062=6064,6063
<6066=6068,6067
<6070=6071
<6071=6081,6072
<6072=6078,6073
<6073=6077,6074
<6074=6076,6075
<6078=6080,6079
<6082=6090,6084,6083
<6084=6085
<6085=6089,6086
<6086=6088,6087
<6090=6091
<6091=6095,6092
<6092=6094,6093
<6096=6097
<6097=6099,6098
<6099=6101,6100
<6102=6103
<6103=6119,6104
<6104=6117,6115,6113,6111,6109,6107,6105
<6105=6106
<6107=6108
<6109=6110
<6111=6112
<6113=6114
<6115=6116
<6117=6118
<6119=6120
<6121=6126,6122
<6122=6125,6124,6123
<6126=6137,6136,6135,6127
<6127=6134,6128
<6128=6133,6132,6129
<6129=6131,6130
<6138=6139
<6139=6144,6143,6140
<6140=6142,6141
<6145=6146
<6146=6151,6150,6147
<6147=6149,6148
<6152=6163,6153
<6153=6159,6155,6154
<6155=6156
<6156=6158,6157
<6159=6160
<6160=6162,6161
<6163=6164
<6164=6166,6165
<6193=6208,6207,6194
<6194=6204,6201,6198,6195
<6195=6197,6196
<6198=6200,6199
<6201=6203,6202
<6204=6206,6205
<6208=6293,6284,6275,6257,6244,6225,6217,6209
<6209=6210
<6210=6216,6211
<6211=6215,6212
<6212=6214,6213
<6217=6218
<6218=6224,6219
<6219=6223,6220
<6220=6222,6221
<6225=6226
<6226=6243,6242,6227
<6227=6241,6228
<6228=6240,6229
<6229=6238,6230
<6230=6231
<6231=6232
<6232=6236,6233
<6233=6234
<6234=6235
<6236=6237
<6238=6239
<6244=6245
<6245=6256,6255,6246
<6246=6254,6247
<6247=6253,6248
<6248=6252,6249
<6249=6251,6250
<6257=6258
<6258=6274,6273,6259
<6259=6272,6260
<6260=6270,6261
<6261=6262
<6262=6263
<6263=6267,6264
<6264=6266,6265
<6267=6269,6268
<6270=6271
<6275=6276
<6276=6283,6282,6277
<6277=6281,6278
<6278=6280,6279
<6284=6285
<6285=6292,6291,6286
<6286=6290,6287
<6287=6289,6288
<6293=6304,6294
<6294=6300,6296,6295
<6296=6297
<6297=6299,6298
<6300=6301
<6301=6303,6302
<6304=6305
<6305=6307,6306
<6329=6332,6331,6330
<6332=6428,6414,6408,6333
<6333=6400,6396,6393,6334
<6334=6382,6371,6364,6351,6343,6335
<6335=6336
<6336=6338,6337
<6338=6340,6339
<6340=6342,6341
<6343=6344
<6344=6346,6345
<6346=6348,6347
<6348=6350,6349
<6351=6352
<6352=6362,6353
<6353=6360,6358,6356,6354
<6354=6355
<6356=6357
<6358=6359
<6360=6361
<6362=6363
<6364=6368,6365
<6365=6367,6366
<6368=6370,6369
<6371=6372
<6372=6381,6380,6373
<6373=6379,6374
<6374=6376,6375
<6376=6378,6377
<6382=6383
<6383=6392,6391,6384
<6384=6390,6385
<6385=6387,6386
<6387=6389,6388
<6393=6395,6394
<6396=6397
<6397=6399,6398
<6400=6401
<6401=6402
<6402=6407,6406,6403
<6403=6405,6404
<6408=6410,6409
<6410=6411
<6411=6413,6412
<6414=6415
<6415=6427,6426,6416
<6416=6425,6417
<6417=6424,6418
<6418=6420,6419
<6420=6421
<6421=6423,6422
<6428=6430,6429
<6430=6431
<6431=6433,6432
<6450=6453,6452,6451
<6453=6565,6551,6544,6540,6531,6456,6454
<6454=6455
<6456=6523,6519,6516,6457
<6457=6505,6494,6487,6474,6466,6458
<6458=6459
<6459=6461,6460
<6461=6463,6462
<6463=6465,6464
<6466=6467
<6467=6469,6468
<6469=6471,6470
<6471=6473,6472
<6474=6475
<6475=6485,6476
<6476=6483,6481,6479,6477
<6477=6478
<6479=6480
<6481=6482
<6483=6484
<6485=6486
<6487=6491,6488
<6488=6490,6489
<6491=6493,6492
<6494=6495
<6495=6504,6503,6496
<6496=6502,6497
<6497=6499,6498
<6499=6501,6500
<6505=6506
<6506=6515,6514,6507
<6507=6513,6508
<6508=6510,6509
<6510=6512,6511
<6516=6518,6517
<6519=6520
<6520=6522,6521
<6523=6524
<6524=6525
<6525=6530,6529,6526
<6526=6528,6527
<6531=6532
<6532=6536,6533
<6533=6534
<6534=6535
<6536=6537
<6537=6539,6538
<6540=6541
<6541=6543,6542
<6544=6547,6545
<6545=6546
<6547=6548
<6548=6550,6549
<6551=6552
<6552=6564,6563,6553
<6553=6562,6554
<6554=6561,6555
<6555=6557,6556
<6557=6558
<6558=6560,6559
<6565=6568,6566
<6566=6567
<6568=6569
<6569=6571,6570
<6592=6601,6600,6593
<6593=6597,6594
<6594=6596,6595
<6597=6599,6598
<6601=7016,7011,7002,6989,6984,6973,6968,6957,6941,6925,6910,6882,6877,6860,6841,6836,6817,6807,6797,6783,6621,6612,6604,6602
<6602=6603
<6604=6610,6605
<6605=6606
<6606=6608,6607
<6608=6609
<6610=6611
<6612=6613
<6613=6619,6614
<6614=6617,6615
<6615=6616
<6617=6618
<6619=6620
<6621=6775,6771,6768,6622
<6622=6623
<6623=6760,6756,6753,6624
<6624=6742,6731,6724,6709,6703,6697,6679,6663,6625
<6625=6626
<6626=6661,6627
<6627=6659,6657,6655,6646,6637,6628
<6628=6629
<6629=6635,6630
<6630=6631
<6631=6632
<6632=6634,6633
<6635=6636
<6637=6638
<6638=6644,6639
<6639=6640
<6640=6641
<6641=6643,6642
<6644=6645
<6646=6647
<6647=6653,6648
<6648=6649
<6649=6650
<6650=6652,6651
<6653=6654
<6655=6656
<6657=6658
<6659=6660
<6661=6662
<6663=6664
<6664=6678,6677,6665
<6665=6676,6666
<6666=6674,6667
<6667=6672,6670,6668
<6668=6669
<6670=6671
<6672=6673
<6674=6675
<6679=6681,6680
<6681=6682
<6682=6694,6683
<6683=6691,6684
<6684=6688,6685
<6685=6687,6686
<6688=6690,6689
<6691=6693,6692
<6694=6696,6695
<6697=6698
<6698=6702,6699
<6699=6701,6700
<6703=6704
<6704=6708,6705
<6705=6707,6706
<6709=6710
<6710=6722,6711
<6711=6720,6718,6716,6714,6712
<6712=6713
<6714=6715
<6716=6717
<6718=6719
<6720=6721
<6722=6723
<6724=6728,6725
<6725=6727,6726
<6728=6730,6729
<6731=6732
<6732=6741,6740,6733
<6733=6739,6734
<6734=6738,6735
<6735=6737,6736
<6742=6743
<6743=6752,6751,6744
<6744=6750,6745
<6745=6749,6746
<6746=6748,6747
<6753=6755,6754
<6756=6757
<6757=6759,6758
<6760=6761
<6761=6762
<6762=6767,6766,6763
<6763=6765,6764
<6768=6770,6769
<6771=6772
<6772=6774,6773
<6775=6776
<6776=6777
<6777=6782,6781,6778
<6778=6780,6779
<6783=6784
<6784=6796,6795,6785
<6785=6794,6786
<6786=6792,6787
<6787=6790,6788
<6788=6789
<6790=6791
<6792=6793
<6797=6798
<6798=6806,6805,6799
<6799=6804,6800
<6800=6802,6801
<6802=6803
<6807=6808
<6808=6816,6815,6809
<6809=6814,6810
<6810=6812,6811
<6812=6813
<6817=6818
<6818=6834,6819
<6819=6832,6830,6828,6826,6824,6822,6820
<6820=6821
<6822=6823
<6824=6825
<6826=6827
<6828=6829
<6830=6831
<6832=6833
<6834=6835
<6836=6837
<6837=6840,6839,6838
<6841=6842
<6842=6859,6858,6857,6843
<6843=6856,6844
<6844=6855,6852,6851,6850,6849,6848,6847,6846,6845
<6852=6854,6853
<6860=6861
<6861=6875,6862
<6862=6869,6865,6863
<6863=6864
<6865=6866
<6866=6868,6867
<6869=6870
<6870=6872,6871
<6872=6874,6873
<6875=6876
<6877=6878
<6878=6881,6880,6879
<6882=6906,6883
<6883=6894,6886,6884
<6884=6885
<6886=6892,6887
<6887=6888
<6888=6890,6889
<6890=6891
<6892=6893
<6894=6895
<6895=6905,6904,6896
<6896=6903,6897
<6897=6901,6898
<6898=6899
<6899=6900
<6901=6902
<6906=6907
<6907=6909,6908
<6910=6921,6911
<6911=6917,6912
<6912=6913
<6913=6915,6914
<6915=6916
<6917=6918
<6918=6920,6919
<6921=6922
<6922=6924,6923
<6925=6934,6926
<6926=6927
<6927=6928
<6928=6932,6929
<6929=6930
<6930=6931
<6932=6933
<6934=6935
<6935=6939,6936
<6936=6937
<6937=6938
<6939=6940
<6941=6950,6942
<6942=6943
<6943=6944
<6944=6948,6945
<6945=6946
<6946=6947
<6948=6949
<6950=6951
<6951=6955,6952
<6952=6953
<6953=6954
<6955=6956
<6957=6958
<6958=6966,6959
<6959=6964,6962,6960
<6960=6961
<6962=6963
<6964=6965
<6966=6967
<6968=6969
<6969=6972,6971,6970
<6973=6974
<6974=6982,6975
<6975=6980,6978,6976
<6976=6977
<6978=6979
<6980=6981
<6982=6983
<6984=6985
<6985=6988,6987,6986
<6989=6990
<6990=6992,6991
<6992=7001,6993
<6993=6995,6994
<6995=6999,6996
<6996=6997
<6997=6998
<6999=7000
<7002=7003
<7003=7009,7004
<7004=7007,7005
<7005=7006
<7007=7008
<7009=7010
<7011=7012
<7012=7015,7014,7013
<7016=7017
<7017=7022,7021,7018
<7018=7020,7019
<7068=7080,7079,7069
<7069=7076,7073,7070
<7070=7072,7071
<7073=7075,7074
<7076=7078,7077
<7080=7438,7416,7388,7383,7364,7345,7340,7327,7322,7303,7293,7283,7265,7099,7083,7081
<7081=7082
<7083=7097,7084
<7084=7090,7085
<7085=7086
<7086=7088,7087
<7088=7089
<7090=7091
<7091=7095,7092
<7092=7093
<7093=7094
<7095=7096
<7097=7098
<7099=7257,7251,7248,7100
<7100=7101
<7101=7240,7234,7231,7102
<7102=7220,7209,7202,7187,7181,7175,7157,7141,7103
<7103=7104
<7104=7139,7105
<7105=7137,7135,7133,7124,7115,7106
<7106=7107
<7107=7113,7108
<7108=7109
<7109=7110
<7110=7112,7111
<7113=7114
<7115=7116
<7116=7122,7117
<7117=7118
<7118=7119
<7119=7121,7120
<7122=7123
<7124=7125
<7125=7131,7126
<7126=7127
<7127=7128
<7128=7130,7129
<7131=7132
<7133=7134
<7135=7136
<7137=7138
<7139=7140
<7141=7142
<7142=7156,7155,7143
<7143=7154,7144
<7144=7152,7145
<7145=7150,7148,7146
<7146=7147
<7148=7149
<7150=7151
<7152=7153
<7157=7159,7158
<7159=7160
<7160=7172,7161
<7161=7169,7162
<7162=7166,7163
<7163=7165,7164
<7166=7168,7167
<7169=7171,7170
<7172=7174,7173
<7175=7176
<7176=7180,7177
<7177=7179,7178
<7181=7182
<7182=7186,7183
<7183=7185,7184
<7187=7188
<7188=7200,7189
<7189=7198,7196,7194,7192,7190
<7190=7191
<7192=7193
<7194=7195
<7196=7197
<7198=7199
<7200=7201
<7202=7206,7203
<7203=7205,7204
<7206=7208,7207
<7209=7210
<7210=7219,7218,7211
<7211=7217,7212
<7212=7216,7213
<7213=7215,7214
<7220=7221
<7221=7230,7229,7222
<7222=7228,7223
<7223=7227,7224
<7224=7226,7225
<7231=7233,7232
<7234=7235
<7235=7239,7236
<7236=7238,7237
<7240=7241
<7241=7242
<7242=7247,7246,7243
<7243=7245,7244
<7248=7250,7249
<7251=7252
<7252=7256,7253
<7253=7255,7254
<7257=7258
<7258=7259
<7259=7264,7263,7260
<7260=7262,7261
<7265=7266
<7266=7282,7281,7267
<7267=7280,7268
<7268=7278,7269
<7269=7274,7270
<7270=7271
<7271=7273,7272
<7274=7275
<7275=7277,7276
<7278=7279
<7283=7284
<7284=7292,7291,7285
<7285=7290,7286
<7286=7288,7287
<7288=7289
<7293=7294
<7294=7302,7301,7295
<7295=7300,7296
<7296=7298,7297
<7298=7299
<7303=7304
<7304=7320,7305
<7305=7318,7316,7314,7312,7310,7308,7306
<7306=7307
<7308=7309
<7310=7311
<7312=7313
<7314=7315
<7316=7317
<7318=7319
<7320=7321
<7322=7323
<7323=7326,7325,7324
<7327=7328
<7328=7338,7329
<7329=7336,7334,7332,7330
<7330=7331
<7332=7333
<7334=7335
<7336=7337
<7338=7339
<7340=7341
<7341=7344,7343,7342
<7345=7346
<7346=7363,7362,7361,7347
<7347=7360,7348
<7348=7359,7356,7355,7354,7353,7352,7351,7350,7349
<7356=7358,7357
<7364=7365
<7365=7381,7366
<7366=7375,7369,7367
<7367=7368
<7369=7370
<7370=7374,7371
<7371=7373,7372
<7375=7376
<7376=7380,7377
<7377=7379,7378
<7381=7382
<7383=7384
<7384=7387,7386,7385
<7388=7412,7389
<7389=7400,7392,7390
<7390=7391
<7392=7398,7393
<7393=7394
<7394=7396,7395
<7396=7397
<7398=7399
<7400=7401
<7401=7411,7410,7402
<7402=7409,7403
<7403=7407,7404
<7404=7405
<7405=7406
<7407=7408
<7412=7413
<7413=7415,7414
<7416=7434,7417
<7417=7427,7423,7418
<7418=7419
<7419=7421,7420
<7421=7422
<7423=7424
<7424=7426,7425
<7427=7428
<7428=7432,7429
<7429=7430
<7430=7431
<7432=7433
<7434=7435
<7435=7437,7436
<7438=7439
<7439=7444,7443,7440
<7440=7442,7441
<7483=7495,7494,7484
<7484=7491,7488,7485
<7485=7487,7486
<7488=7490,7489
<7491=7493,7492
<7495=7603,7581,7560,7542,7520,7508,7496
<7496=7497
<7497=7505,7498
<7498=7502,7499
<7499=7501,7500
<7502=7504,7503
<7505=7507,7506
<7508=7509
<7509=7517,7510
<7510=7514,7511
<7511=7513,7512
<7514=7516,7515
<7517=7519,7518
<7520=7521
<7521=7541,7540,7539,7522
<7522=7538,7523
<7523=7531,7524
<7524=7528,7525
<7525=7527,7526
<7528=7530,7529
<7531=7535,7532
<7532=7534,7533
<7535=7537,7536
<7542=7543
<7543=7559,7558,7557,7544
<7544=7556,7545
<7545=7551,7546
<7546=7550,7547
<7547=7549,7548
<7551=7555,7552
<7552=7554,7553
<7560=7561
<7561=7580,7579,7562
<7562=7578,7563
<7563=7571,7564
<7564=7568,7565
<7565=7567,7566
<7568=7570,7569
<7571=7575,7572
<7572=7574,7573
<7575=7577,7576
<7581=7582
<7582=7602,7601,7600,7583
<7583=7599,7584
<7584=7592,7585
<7585=7589,7586
<7586=7588,7587
<7589=7591,7590
<7592=7596,7593
<7593=7595,7594
<7596=7598,7597
<7603=7604
<7604=7628,7627,7626,7605
<7605=7625,7606
<7606=7616,7607
<7607=7611,7608
<7608=7610,7609
<7611=7615,7612
<7612=7614,7613
<7616=7620,7617
<7617=7619,7618
<7620=7624,7621
<7621=7623,7622
<7647=7662,7661,7648
<7648=7658,7655,7652,7649
<7649=7651,7650
<7652=7654,7653
<7655=7657,7656
<7658=7660,7659
<7662=8760,8738,8729,8720,8713,8696,7679,7663
<7663=7677,7664
<7664=7670,7665
<7665=7666
<7666=7668,7667
<7668=7669
<7670=7671
<7671=7675,7672
<7672=7673
<7673=7674
<7675=7676
<7677=7678
<7679=8688,8684,8681,7680
<7680=8672,8654,8650,8646,8631,8543,8539,8535,8514,8510,8506,8480,7755,7746,7737,7709,7702,7695,7688,7681
<7681=7682
<7682=7686,7683
<7683=7684
<7684=7685
<7686=7687
<7688=7689
<7689=7693,7690
<7690=7691
<7691=7692
<7693=7694
<7695=7696
<7696=7700,7697
<7697=7698
<7698=7699
<7700=7701
<7702=7703
<7703=7707,7704
<7704=7705
<7705=7706
<7707=7708
<7709=7729,7725,7722,7710
<7710=7711
<7711=7712
<7712=7720,7713
<7713=7714
<7714=7715
<7715=7719,7716
<7716=7718,7717
<7720=7721
<7722=7724,7723
<7725=7726
<7726=7728,7727
<7729=7730
<7730=7731
<7731=7736,7735,7732
<7732=7734,7733
<7737=7738
<7738=7744,7739
<7739=7742,7740
<7740=7741
<7742=7743
<7744=7745
<7746=7747
<7747=7753,7748
<7748=7751,7749
<7749=7750
<7751=7752
<7753=7754
<7755=8472,8468,8465,7756
<7756=8454,8447,8431,8424,8416,8409,8376,8371,8360,8353,8279,8265,8235,8222,8215,8206,8147,8140,8136,8130,8069,8062,7767,7766,7765,7764,7762,7761,7760,7759,7757
<7757=7758
<7762=7763
<7767=8060,7843,7768
<7768=7769
<7769=7839,7824,7809,7794,7779,7770
<7770=7771
<7771=7775,7772
<7772=7773
<7773=7774
<7775=7776
<7776=7778,7777
<7779=7780
<7780=7789,7781
<7781=7787,7782
<7782=7783
<7783=7784
<7784=7786,7785
<7787=7788
<7789=7791,7790
<7791=7793,7792
<7794=7795
<7795=7804,7796
<7796=7802,7797
<7797=7798
<7798=7799
<7799=7801,7800
<7802=7803
<7804=7806,7805
<7806=7808,7807
<7809=7810
<7810=7819,7811
<7811=7817,7812
<7812=7813
<7813=7814
<7814=7816,7815
<7817=7818
<7819=7821,7820
<7821=7823,7822
<7824=7825
<7825=7834,7826
<7826=7832,7827
<7827=7828
<7828=7829
<7829=7831,7830
<7832=7833
<7834=7836,7835
<7836=7838,7837
<7839=7840
<7840=7842,7841
<7843=8055,8036,8009,7982,7973,7954,7935,7916,7897,7893,7883,7873,7863,7853,7844
<7844=7845
<7845=7849,7846
<7846=7847
<7847=7848
<7849=7850
<7850=7852,7851
<7853=7854
<7854=7858,7855
<7855=7857,7856
<7858=7860,7859
<7860=7862,7861
<7863=7864
<7864=7868,7865
<7865=7867,7866
<7868=7870,7869
<7870=7872,7871
<7873=7874
<7874=7878,7875
<7875=7877,7876
<7878=7880,7879
<7880=7882,7881
<7883=7884
<7884=7888,7885
<7885=7887,7886
<7888=7890,7889
<7890=7892,7891
<7893=7894
<7894=7896,7895
<7897=7898
<7898=7914,7899
<7899=7912,7910,7908,7902,7900
<7900=7901
<7902=7903
<7903=7907,7904
<7904=7906,7905
<7908=7909
<7910=7911
<7912=7913
<7914=7915
<7916=7917
<7917=7933,7918
<7918=7931,7929,7927,7921,7919
<7919=7920
<7921=7922
<7922=7926,7923
<7923=7925,7924
<7927=7928
<7929=7930
<7931=7932
<7933=7934
<7935=7936
<7936=7952,7937
<7937=7950,7948,7946,7944,7942,7940,7938
<7938=7939
<7940=7941
<7942=7943
<7944=7945
<7946=7947
<7948=7949
<7950=7951
<7952=7953
<7954=7955
<7955=7971,7956
<7956=7969,7967,7965,7963,7961,7959,7957
<7957=7958
<7959=7960
<7961=7962
<7963=7964
<7965=7966
<7967=7968
<7969=7970
<7971=7972
<7973=7978,7974
<7974=7977,7976,7975
<7978=7981,7980,7979
<7982=7983
<7983=8008,8007,8006,7984
<7984=8005,7985
<7985=7997,7989,7986
<7986=7988,7987
<7989=7995,7990
<7990=7991
<7991=7992
<7992=7994,7993
<7995=7996
<7997=8003,7998
<7998=7999
<7999=8000
<8000=8002,8001
<8003=8004
<8009=8010
<8010=8035,8034,8033,8011
<8011=8032,8012
<8012=8024,8016,8013
<8013=8015,8014
<8016=8022,8017
<8017=8018
<8018=8019
<8019=8021,8020
<8022=8023
<8024=8030,8025
<8025=8026
<8026=8027
<8027=8029,8028
<8030=8031
<8036=8037
<8037=8053,8038
<8038=8047,8041,8039
<8039=8040
<8041=8042
<8042=8046,8043
<8043=8045,8044
<8047=8048
<8048=8050,8049
<8050=8052,8051
<8053=8054
<8055=8056
<8056=8059,8058,8057
<8060=8061
<8062=8063
<8063=8068,8067,8064
<8064=8066,8065
<8069=8122,8118,8115,8070
<8070=8097,8085,8071
<8071=8081,8072
<8072=8077,8073
<8073=8074
<8074=8076,8075
<8077=8078
<8078=8080,8079
<8081=8082
<8082=8084,8083
<8085=8086
<8086=8096,8095,8087
<8087=8094,8088
<8088=8092,8089
<8089=8090
<8090=8091
<8092=8093
<8097=8098
<8098=8114,8113,8099
<8099=8112,8100
<8100=8110,8101
<8101=8106,8102
<8102=8103
<8103=8105,8104
<8106=8107
<8107=8109,8108
<8110=8111
<8115=8117,8116
<8118=8119
<8119=8121,8120
<8122=8123
<8123=8124
<8124=8129,8128,8125
<8125=8127,8126
<8130=8131
<8131=8135,8132
<8132=8134,8133
<8136=8137
<8137=8139,8138
<8140=8141
<8141=8146,8145,8142
<8142=8144,8143
<8147=8198,8194,8191,8148
<8148=8175,8163,8149
<8149=8159,8150
<8150=8155,8151
<8151=8152
<8152=8154,8153
<8155=8156
<8156=8158,8157
<8159=8160
<8160=8162,8161
<8163=8164
<8164=8174,8173,8165
<8165=8172,8166
<8166=8170,8167
<8167=8168
<8168=8169
<8170=8171
<8175=8176
<8176=8190,8189,8177
<8177=8188,8178
<8178=8186,8179
<8179=8182,8180
<8180=8181
<8182=8183
<8183=8185,8184
<8186=8187
<8191=8193,8192
<8194=8195
<8195=8197,8196
<8198=8199
<8199=8200
<8200=8205,8204,8201
<8201=8203,8202
<8206=8207
<8207=8214,8213,8208
<8208=8212,8209
<8209=8211,8210
<8215=8216
<8216=8221,8220,8217
<8217=8219,8218
<8222=8223
<8223=8234,8224
<8224=8232,8225
<8225=8228,8226
<8226=8227
<8228=8229
<8229=8231,8230
<8232=8233
<8235=8257,8253,8250,8236
<8236=8237
<8237=8238
<8238=8249,8239
<8239=8247,8240
<8240=8245,8241
<8241=8242
<8242=8244,8243
<8245=8246
<8247=8248
<8250=8252,8251
<8253=8254
<8254=8256,8255
<8257=8258
<8258=8259
<8259=8264,8263,8260
<8260=8262,8261
<8265=8266
<8266=8278,8277,8267
<8267=8276,8268
<8268=8274,8269
<8269=8272,8270
<8270=8271
<8272=8273
<8274=8275
<8279=8345,8341,8338,8280
<8280=8314,8309,8298,8281
<8281=8282
<8282=8295,8283
<8283=8293,8284
<8284=8289,8285
<8285=8286
<8286=8288,8287
<8289=8290
<8290=8292,8291
<8293=8294
<8295=8297,8296
<8298=8299
<8299=8307,8300
<8300=8305,8303,8301
<8301=8302
<8303=8304
<8305=8306
<8307=8308
<8309=8310
<8310=8313,8312,8311
<8314=8315
<8315=8337,8336,8335,8316
<8316=8334,8317
<8317=8326,8318
<8318=8324,8319
<8319=8320
<8320=8321
<8321=8323,8322
<8324=8325
<8326=8332,8327
<8327=8328
<8328=8329
<8329=8331,8330
<8332=8333
<8338=8340,8339
<8341=8342
<8342=8344,8343
<8345=8346
<8346=8347
<8347=8352,8351,8348
<8348=8350,8349
<8353=8354
<8354=8359,8358,8355
<8355=8357,8356
<8360=8361
<8361=8369,8362
<8362=8367,8365,8363
<8363=8364
<8365=8366
<8367=8368
<8369=8370
<8371=8372
<8372=8375,8374,8373
<8376=8405,8377
<8377=8388,8382,8378
<8378=8379
<8379=8381,8380
<8382=8383
<8383=8387,8384
<8384=8386,8385
<8388=8389
<8389=8402,8390
<8390=8400,8391
<8391=8396,8392
<8392=8393
<8393=8395,8394
<8396=8397
<8397=8399,8398
<8400=8401
<8402=8404,8403
<8405=8406
<8406=8408,8407
<8409=8410
<8410=8415,8414,8411
<8411=8413,8412
<8416=8417
<8417=8423,8418
<8418=8420,8419
<8420=8422,8421
<8424=8425
<8425=8430,8429,8426
<8426=8428,8427
<8431=8443,8432
<8432=8437,8433
<8433=8434
<8434=8436,8435
<8437=8438
<8438=8442,8439
<8439=8441,8440
<8443=8444
<8444=8446,8445
<8447=8448
<8448=8453,8452,8449
<8449=8451,8450
<8454=8455
<8455=8464,8463,8456
<8456=8462,8457
<8457=8459,8458
<8459=8461,8460
<8465=8467,8466
<8468=8469
<8469=8471,8470
<8472=8473
<8473=8474
<8474=8479,8478,8475
<8475=8477,8476
<8480=8481
<8481=8504,8482
<8482=8502,8498,8494,8490,8483
<8483=8484
<8484=8488,8485
<8485=8486
<8486=8487
<8488=8489
<8490=8491
<8491=8493,8492
<8494=8495
<8495=8497,8496
<8498=8499
<8499=8501,8500
<8502=8503
<8504=8505
<8506=8507
<8507=8509,8508
<8510=8511
<8511=8513,8512
<8514=8515
<8515=8533,8516
<8516=8531,8527,8523,8519,8517
<8517=8518
<8519=8520
<8520=8522,8521
<8523=8524
<8524=8526,8525
<8527=8528
<8528=8530,8529
<8531=8532
<8533=8534
<8535=8536
<8536=8538,8537
<8539=8540
<8540=8542,8541
<8543=8629,8544
<8544=8545
<8545=8621,8617,8614,8546
<8546=8603,8547
<8547=8599,8548
<8548=8592,8567,8561,8555,8549
<8549=8550
<8550=8554,8551
<8551=8553,8552
<8555=8556
<8556=8558,8557
<8558=8560,8559
<8561=8562
<8562=8564,8563
<8564=8566,8565
<8567=8568
<8568=8590,8569
<8569=8582,8574,8572,8570
<8570=8571
<8572=8573
<8574=8575
<8575=8579,8576
<8576=8578,8577
<8579=8581,8580
<8582=8583
<8583=8587,8584
<8584=8586,8585
<8587=8589,8588
<8590=8591
<8592=8596,8593
<8593=8595,8594
<8596=8598,8597
<8599=8600
<8600=8602,8601
<8603=8604
<8604=8613,8612,8605
<8605=8611,8606
<8606=8608,8607
<8608=8610,8609
<8614=8616,8615
<8617=8618
<8618=8620,8619
<8621=8622
<8622=8623
<8623=8628,8627,8624
<8624=8626,8625
<8629=8630
<8631=8632
<8632=8644,8633
<8633=8642,8638,8634
<8634=8635
<8635=8637,8636
<8638=8639
<8639=8641,8640
<8642=8643
<8644=8645
<8646=8647
<8647=8649,8648
<8650=8651
<8651=8653,8652
<8654=8655
<8655=8671,8670,8656
<8656=8669,8657
<8657=8667,8658
<8658=8665,8663,8661,8659
<8659=8660
<8661=8662
<8663=8664
<8665=8666
<8667=8668
<8672=8673
<8673=8680,8679,8674
<8674=8678,8675
<8675=8677,8676
<8681=8683,8682
<8684=8685
<8685=8687,8686
<8688=8689
<8689=8690
<8690=8695,8694,8691
<8691=8693,8692
<8696=8697
<8697=8712,8711,8710,8698
<8698=8709,8699
<8699=8708,8703,8700
<8700=8702,8701
<8703=8705,8704
<8705=8707,8706
<8713=8714
<8714=8719,8718,8715
<8715=8717,8716
<8720=8721
<8721=8728,8727,8722
<8722=8726,8723
<8723=8725,8724
<8729=8730
<8730=8737,8736,8731
<8731=8735,8732
<8732=8734,8733
<8738=8756,8739
<8739=8749,8744,8740
<8740=8741
<8741=8743,8742
<8744=8745
<8745=8747,8746
<8747=8748
<8749=8750
<8750=8754,8751
<8751=8752
<8752=8753
<8754=8755
<8756=8757
<8757=8759,8758
<8760=8761
<8761=8766,8765,8762
<8762=8764,8763
<8867=8870,8869,8868
<8870=9244,9234,9224,9049,9035,8873,8871
<8871=8872
<8873=9027,9023,9020,8874
<8874=8998,8976,8954,8932,8920,8908,8896,8875
<8875=8876
<8876=8894,8877
<8877=8892,8890,8888,8886,8884,8882,8880,8878
<8878=8879
<8880=8881
<8882=8883
<8884=8885
<8886=8887
<8888=8889
<8890=8891
<8892=8893
<8894=8895
<8896=8897
<8897=8907,8906,8898
<8898=8905,8899
<8899=8901,8900
<8901=8903,8902
<8903=8904
<8908=8909
<8909=8919,8918,8910
<8910=8917,8911
<8911=8913,8912
<8913=8915,8914
<8915=8916
<8920=8921
<8921=8931,8930,8922
<8922=8929,8923
<8923=8925,8924
<8925=8927,8926
<8927=8928
<8932=8933
<8933=8953,8952,8934
<8934=8951,8935
<8935=8949,8936
<8936=8937
<8937=8938
<8938=8942,8939
<8939=8941,8940
<8942=8944,8943
<8944=8946,8945
<8946=8948,8947
<8949=8950
<8954=8955
<8955=8975,8974,8956
<8956=8973,8957
<8957=8971,8958
<8958=8959
<8959=8960
<8960=8964,8961
<8961=8963,8962
<8964=8966,8965
<8966=8968,8967
<8968=8970,8969
<8971=8972
<8976=8977
<8977=8997,8996,8978
<8978=8995,8979
<8979=8993,8980
<8980=8981
<8981=8982
<8982=8986,8983
<8983=8985,8984
<8986=8988,8987
<8988=8990,8989
<8990=8992,8991
<8993=8994
<8998=8999
<8999=9019,9018,9000
<9000=9017,9001
<9001=9015,9002
<9002=9003
<9003=9004
<9004=9008,9005
<9005=9007,9006
<9008=9010,9009
<9010=9012,9011
<9012=9014,9013
<9015=9016
<9020=9022,9021
<9023=9024
<9024=9026,9025
<9027=9028
<9028=9029
<9029=9034,9033,9030
<9030=9032,9031
<9035=9036
<9036=9048,9047,9037
<9037=9046,9038
<9038=9045,9039
<9039=9041,9040
<9041=9042
<9042=9044,9043
<9049=9216,9212,9209,9050
<9050=9051
<9051=9201,9197,9194,9052
<9052=9178,9163,9148,9133,9112,9091,9070,9053
<9053=9054
<9054=9068,9055
<9055=9066,9064,9062,9060,9058,9056
<9056=9057
<9058=9059
<9060=9061
<9062=9063
<9064=9065
<9066=9067
<9068=9069
<9070=9071
<9071=9090,9089,9072
<9072=9088,9073
<9073=9086,9074
<9074=9079,9077,9075
<9075=9076
<9077=9078
<9079=9080
<9080=9084,9081
<9081=9082
<9082=9083
<9084=9085
<9086=9087
<9091=9092
<9092=9111,9110,9093
<9093=9109,9094
<9094=9107,9095
<9095=9100,9098,9096
<9096=9097
<9098=9099
<9100=9101
<9101=9105,9102
<9102=9103
<9103=9104
<9105=9106
<9107=9108
<9112=9113
<9113=9132,9131,9114
<9114=9130,9115
<9115=9128,9116
<9116=9121,9119,9117
<9117=9118
<9119=9120
<9121=9122
<9122=9126,9123
<9123=9124
<9124=9125
<9126=9127
<9128=9129
<9133=9134
<9134=9147,9146,9135
<9135=9145,9136
<9136=9140,9137
<9137=9139,9138
<9140=9144,9141
<9141=9143,9142
<9148=9149
<9149=9162,9161,9150
<9150=9160,9151
<9151=9155,9152
<9152=9154,9153
<9155=9159,9156
<9156=9158,9157
<9163=9164
<9164=9177,9176,9165
<9165=9175,9166
<9166=9170,9167
<9167=9169,9168
<9170=9174,9171
<9171=9173,9172
<9178=9179
<9179=9193,9192,9180
<9180=9191,9181
<9181=9189,9182
<9182=9187,9185,9183
<9183=9184
<9185=9186
<9187=9188
<9189=9190
<9194=9196,9195
<9197=9198
<9198=9200,9199
<9201=9202
<9202=9203
<9203=9208,9207,9204
<9204=9206,9205
<9209=9211,9210
<9212=9213
<9213=9215,9214
<9216=9217
<9217=9218
<9218=9223,9222,9219
<9219=9221,9220
<9224=9225
<9225=9233,9232,9226
<9226=9231,9227
<9227=9229,9228
<9229=9230
<9234=9235
<9235=9243,9242,9236
<9236=9241,9237
<9237=9239,9238
<9239=9240
<9244=9245
<9245=9253,9252,9246
<9246=9251,9247
<9247=9249,9248
<9249=9250
<9295=9301,9300,9296
<9296=9297
<9297=9299,9298
<9301=9672,9662,9607,9552,9551,9550,9549,9542,9537,9528,9502,9485,9316,9315,9314,9313,9304,9302
<9302=9303
<9304=9307,9305
<9305=9306
<9307=9308
<9308=9312,9309
<9309=9311,9310
<9316=9477,9473,9470,9317
<9317=9455,9450,9439,9434,9419,9393,9392,9391,9390,9318
<9318=9386,9319
<9319=9380,9374,9370,9349,9332,9331,9330,9329,9320
<9320=9325,9321
<9321=9322
<9322=9324,9323
<9325=9326
<9326=9328,9327
<9332=9333
<9333=9348,9347,9334
<9334=9346,9335
<9335=9344,9336
<9336=9337
<9337=9338
<9338=9342,9339
<9339=9340
<9340=9341
<9342=9343
<9344=9345
<9349=9350
<9350=9368,9351
<9351=9366,9364,9362,9360,9358,9356,9352
<9352=9353
<9353=9355,9354
<9356=9357
<9358=9359
<9360=9361
<9362=9363
<9364=9365
<9366=9367
<9368=9369
<9370=9371
<9371=9373,9372
<9374=9375
<9375=9377,9376
<9377=9379,9378
<9380=9381
<9381=9383,9382
<9383=9385,9384
<9386=9387
<9387=9389,9388
<9393=9394
<9394=9418,9417,9395
<9395=9416,9396
<9396=9414,9397
<9397=9398
<9398=9399
<9399=9407,9400
<9400=9404,9401
<9401=9403,9402
<9404=9406,9405
<9407=9411,9408
<9408=9410,9409
<9411=9413,9412
<9414=9415
<9419=9420
<9420=9432,9421
<9421=9428,9424,9422
<9422=9423
<9424=9425
<9425=9427,9426
<9428=9429
<9429=9431,9430
<9432=9433
<9434=9435
<9435=9438,9437,9436
<9439=9440
<9440=9446,9441
<9441=9444,9442
<9442=9443
<9444=9445
<9446=9447
<9447=9449,9448
<9450=9451
<9451=9454,9453,9452
<9455=9456
<9456=9469,9468,9457
<9457=9467,9458
<9458=9464,9459
<9459=9463,9460
<9460=9462,9461
<9464=9466,9465
<9470=9472,9471
<9473=9474
<9474=9476,9475
<9477=9478
<9478=9479
<9479=9484,9483,9480
<9480=9482,9481
<9485=9486
<9486=9500,9487
<9487=9498,9496,9494,9490,9488
<9488=9489
<9490=9491
<9491=9493,9492
<9494=9495
<9496=9497
<9498=9499
<9500=9501
<9502=9503
<9503=9527,9526,9504
<9504=9525,9505
<9505=9523,9506
<9506=9507
<9507=9508
<9508=9516,9509
<9509=9513,9510
<9510=9512,9511
<9513=9515,9514
<9516=9520,9517
<9517=9519,9518
<9520=9522,9521
<9523=9524
<9528=9529
<9529=9533,9530
<9530=9531
<9531=9532
<9533=9534
<9534=9536,9535
<9537=9538
<9538=9541,9540,9539
<9542=9543
<9543=9548,9547,9544
<9544=9546,9545
<9552=9555,9553
<9553=9554
<9555=9556
<9556=9596,9557
<9557=9583,9558
<9558=9572,9559
<9559=9563,9560
<9560=9562,9561
<9563=9567,9564
<9564=9566,9565
<9567=9569,9568
<9569=9571,9570
<9572=9574,9573
<9574=9578,9575
<9575=9577,9576
<9578=9580,9579
<9580=9582,9581
<9583=9587,9584
<9584=9586,9585
<9587=9591,9588
<9588=9590,9589
<9591=9593,9592
<9593=9595,9594
<9596=9598,9597
<9598=9602,9599
<9599=9601,9600
<9602=9604,9603
<9604=9606,9605
<9607=9610,9608
<9608=9609
<9610=9611
<9611=9651,9612
<9612=9638,9613
<9613=9627,9614
<9614=9618,9615
<9615=9617,9616
<9618=9622,9619
<9619=9621,9620
<9622=9624,9623
<9624=9626,9625
<9627=9629,9628
<9629=9633,9630
<9630=9632,9631
<9633=9635,9634
<9635=9637,9636
<9638=9642,9639
<9639=9641,9640
<9642=9646,9643
<9643=9645,9644
<9646=9648,9647
<9648=9650,9649
<9651=9653,9652
<9653=9657,9654
<9654=9656,9655
<9657=9659,9658
<9659=9661,9660
<9662=9663
<9663=9671,9670,9664
<9664=9669,9665
<9665=9667,9666
<9667=9668
<9672=9673
<9673=9681,9680,9674
<9674=9679,9675
<9675=9677,9676
<9677=9678
<9717=9735,9734,9718
<9718=9731,9728,9725,9722,9719
<9719=9721,9720
<9722=9724,9723
<9725=9727,9726
<9728=9730,9729
<9731=9733,9732
<9735=10303,10284,10269,10252,10235,10224,10213,10202,10191,10174,10163,10152,10141,10130,10111,10092,10073,10054,10047,10004,9929,9846,9763,9736
<9736=9759,9757,9737
<9737=9738
<9738=9753,9751,9739
<9739=9740
<9740=9750,9749,9748,9747,9746,9745,9744,9743,9741
<9741=9742
<9751=9752
<9753=9754
<9754=9756,9755
<9757=9758
<9759=9760
<9760=9762,9761
<9763=9828,9764
<9764=9769,9765
<9765=9766
<9766=9768,9767
<9769=9824,9804,9770
<9770=9771
<9771=9800,9780,9772
<9772=9773
<9773=9779,9778,9777,9776,9775,9774
<9780=9796,9781
<9781=9782
<9782=9794,9783
<9783=9792,9790,9784
<9784=9785
<9785=9789,9786
<9786=9788,9787
<9790=9791
<9792=9793
<9794=9795
<9796=9797
<9797=9799,9798
<9800=9801
<9801=9803,9802
<9804=9820,9805
<9805=9806
<9806=9818,9807
<9807=9816,9814,9808
<9808=9809
<9809=9813,9810
<9810=9812,9811
<9814=9815
<9816=9817
<9818=9819
<9820=9821
<9821=9823,9822
<9824=9825
<9825=9827,9826
<9828=9829
<9829=9837,9830
<9830=9834,9831
<9831=9833,9832
<9834=9836,9835
<9837=9843,9838
<9838=9840,9839
<9840=9842,9841
<9843=9845,9844
<9846=9911,9847
<9847=9852,9848
<9848=9849
<9849=9851,9850
<9852=9907,9887,9853
<9853=9854
<9854=9883,9863,9855
<9855=9856
<9856=9862,9861,9860,9859,9858,9857
<9863=9879,9864
<9864=9865
<9865=9877,9866
<9866=9875,9873,9867
<9867=9868
<9868=9872,9869
<9869=9871,9870
<9873=9874
<9875=9876
<9877=9878
<9879=9880
<9880=9882,9881
<9883=9884
<9884=9886,9885
<9887=9903,9888
<9888=9889
<9889=9901,9890
<9890=9899,9897,9891
<9891=9892
<9892=9896,9893
<9893=9895,9894
<9897=9898
<9899=9900
<9901=9902
<9903=9904
<9904=9906,9905
<9907=9908
<9908=9910,9909
<9911=9912
<9912=9920,9913
<9913=9917,9914
<9914=9916,9915
<9917=9919,9918
<9920=9926,9921
<9921=9923,9922
<9923=9925,9924
<9926=9928,9927
<9929=9986,9930
<9930=9935,9931
<9931=9932
<9932=9934,9933
<9935=9982,9962,9936
<9936=9937
<9937=9958,9938
<9938=9954,9939
<9939=9940
<9940=9952,9941
<9941=9950,9948,9942
<9942=9943
<9943=9947,9944
<9944=9946,9945
<9948=9949
<9950=9951
<9952=9953
<9954=9955
<9955=9957,9956
<9958=9959
<9959=9961,9960
<9962=9978,9963
<9963=9964
<9964=9976,9965
<9965=9974,9972,9966
<9966=9967
<9967=9971,9968
<9968=9970,9969
<9972=9973
<9974=9975
<9976=9977
<9978=9979
<9979=9981,9980
<9982=9983
<9983=9985,9984
<9986=9987
<9987=9995,9988
<9988=9992,9989
<9989=9991,9990
<9992=9994,9993
<9995=10001,9996
<9996=9998,9997
<9998=10000,9999
<10001=10003,10002
<10004=10029,10005
<10005=10025,10010,10006
<10006=10007
<10007=10009,10008
<10010=10011
<10011=10023,10012
<10012=10021,10019,10013
<10013=10014
<10014=10018,10015
<10015=10017,10016
<10019=10020
<10021=10022
<10023=10024
<10025=10026
<10026=10028,10027
<10029=10030
<10030=10038,10031
<10031=10035,10032
<10032=10034,10033
<10035=10037,10036
<10038=10044,10039
<10039=10041,10040
<10041=10043,10042
<10044=10046,10045
<10047=10048
<10048=10053,10052,10049
<10049=10051,10050
<10054=10055
<10055=10071,10056
<10056=10069,10067,10065,10059,10057
<10057=10058
<10059=10060
<10060=10064,10061
<10061=10063,10062
<10065=10066
<10067=10068
<10069=10070
<10071=10072
<10073=10074
<10074=10090,10075
<10075=10088,10086,10084,10078,10076
<10076=10077
<10078=10079
<10079=10083,10080
<10080=10082,10081
<10084=10085
<10086=10087
<10088=10089
<10090=10091
<10092=10093
<10093=10109,10094
<10094=10107,10105,10103,10097,10095
<10095=10096
<10097=10098
<10098=10102,10099
<10099=10101,10100
<10103=10104
<10105=10106
<10107=10108
<10109=10110
<10111=10112
<10112=10128,10113
<10113=10126,10124,10122,10116,10114
<10114=10115
<10116=10117
<10117=10121,10118
<10118=10120,10119
<10122=10123
<10124=10125
<10126=10127
<10128=10129
<10130=10131
<10131=10139,10132
<10132=10137,10135,10133
<10133=10134
<10135=10136
<10137=10138
<10139=10140
<10141=10142
<10142=10150,10143
<10143=10148,10146,10144
<10144=10145
<10146=10147
<10148=10149
<10150=10151
<10152=10153
<10153=10161,10154
<10154=10159,10157,10155
<10155=10156
<10157=10158
<10159=10160
<10161=10162
<10163=10164
<10164=10172,10165
<10165=10170,10168,10166
<10166=10167
<10168=10169
<10170=10171
<10172=10173
<10174=10187,10183,10179,10175
<10175=10178,10177,10176
<10179=10182,10181,10180
<10183=10186,10185,10184
<10187=10190,10189,10188
<10191=10192
<10192=10200,10193
<10193=10198,10196,10194
<10194=10195
<10196=10197
<10198=10199
<10200=10201
<10202=10203
<10203=10211,10204
<10204=10209,10207,10205
<10205=10206
<10207=10208
<10209=10210
<10211=10212
<10213=10214
<10214=10222,10215
<10215=10220,10218,10216
<10216=10217
<10218=10219
<10220=10221
<10222=10223
<10224=10225
<10225=10233,10226
<10226=10231,10229,10227
<10227=10228
<10229=10230
<10231=10232
<10233=10234
<10235=10248,10244,10240,10236
<10236=10239,10238,10237
<10240=10243,10242,10241
<10244=10247,10246,10245
<10248=10251,10250,10249
<10252=10253
<10253=10268,10267,10266,10254
<10254=10265,10255
<10255=10262,10257,10256
<10257=10259,10258
<10259=10261,10260
<10262=10264,10263
<10269=10270
<10270=10283,10282,10281,10271
<10271=10280,10272
<10272=10277,10274,10273
<10274=10276,10275
<10277=10279,10278
<10284=10285
<10285=10302,10301,10300,10286
<10286=10299,10287
<10287=10294,10289,10288
<10289=10291,10290
<10291=10293,10292
<10294=10296,10295
<10296=10298,10297
<10303=10304
<10304=10319,10318,10317,10305
<10305=10316,10306
<10306=10311,10308,10307
<10308=10310,10309
<10311=10313,10312
<10313=10315,10314
<10357=10369,10368,10358
<10358=10365,10362,10359
<10359=10361,10360
<10362=10364,10363
<10365=10367,10366
<10369=10551,10541,10531,10526,10509,10502,10382,10376,10370
<10370=10371
<10371=10373,10372
<10373=10375,10374
<10376=10377
<10377=10379,10378
<10379=10381,10380
<10382=10492,10488,10485,10383
<10383=10384
<10384=10475,10471,10464,10385
<10385=10457,10438,10414,10402,10394,10386
<10386=10387
<10387=10393,10388
<10388=10390,10389
<10390=10392,10391
<10394=10395
<10395=10401,10396
<10396=10398,10397
<10398=10400,10399
<10402=10403
<10403=10413,10412,10404
<10404=10411,10405
<10405=10409,10406
<10406=10407
<10407=10408
<10409=10410
<10414=10415
<10415=10437,10436,10416
<10416=10435,10417
<10417=10433,10418
<10418=10431,10425,10419
<10419=10420
<10420=10424,10421
<10421=10423,10422
<10425=10426
<10426=10430,10427
<10427=10429,10428
<10431=10432
<10433=10434
<10438=10439
<10439=10455,10440
<10440=10451,10447,10445,10443,10441
<10441=10442
<10443=10444
<10445=10446
<10447=10448
<10448=10450,10449
<10451=10452
<10452=10454,10453
<10455=10456
<10457=10461,10458
<10458=10460,10459
<10461=10463,10462
<10464=10468,10465
<10465=10467,10466
<10468=10470,10469
<10471=10472
<10472=10474,10473
<10475=10476
<10476=10477
<10477=10484,10483,10478
<10478=10482,10479
<10479=10481,10480
<10485=10487,10486
<10488=10489
<10489=10491,10490
<10492=10493
<10493=10494
<10494=10501,10500,10495
<10495=10499,10496
<10496=10498,10497
<10502=10503
<10503=10508,10507,10504
<10504=10506,10505
<10509=10510
<10510=10524,10511
<10511=10518,10514,10512
<10512=10513
<10514=10515
<10515=10517,10516
<10518=10519
<10519=10521,10520
<10521=10523,10522
<10524=10525
<10526=10527
<10527=10530,10529,10528
<10531=10532
<10532=10540,10539,10533
<10533=10538,10534
<10534=10536,10535
<10536=10537
<10541=10542
<10542=10550,10549,10543
<10543=10548,10544
<10544=10546,10545
<10546=10547
<10551=10558,10552
<10552=10557,10556,10553
<10553=10555,10554
<10558=10563,10562,10559
<10559=10561,10560
<10594=10597,10596,10595
<10597=10810,10793,10786,10771,10761,10751,10737,10606,10598
<10598=10604,10599
<10599=10600
<10600=10602,10601
<10602=10603
<10604=10605
<10606=10729,10725,10722,10607
<10607=10711,10700,10693,10678,10674,10653,10638,10623,10608
<10608=10609
<10609=10618,10610
<10610=10616,10611
<10611=10612
<10612=10613
<10613=10615,10614
<10616=10617
<10618=10620,10619
<10620=10622,10621
<10623=10624
<10624=10633,10625
<10625=10631,10626
<10626=10627
<10627=10628
<10628=10630,10629
<10631=10632
<10633=10635,10634
<10635=10637,10636
<10638=10639
<10639=10648,10640
<10640=10646,10641
<10641=10642
<10642=10643
<10643=10645,10644
<10646=10647
<10648=10650,10649
<10650=10652,10651
<10653=10654
<10654=10673,10655
<10655=10671,10656
<10656=10669,10663,10657
<10657=10658
<10658=10662,10659
<10659=10661,10660
<10663=10664
<10664=10668,10665
<10665=10667,10666
<10669=10670
<10671=10672
<10674=10675
<10675=10677,10676
<10678=10679
<10679=10691,10680
<10680=10689,10687,10685,10683,10681
<10681=10682
<10683=10684
<10685=10686
<10687=10688
<10689=10690
<10691=10692
<10693=10697,10694
<10694=10696,10695
<10697=10699,10698
<10700=10701
<10701=10710,10709,10702
<10702=10708,10703
<10703=10705,10704
<10705=10707,10706
<10711=10712
<10712=10721,10720,10713
<10713=10719,10714
<10714=10716,10715
<10716=10718,10717
<10722=10724,10723
<10725=10726
<10726=10728,10727
<10729=10730
<10730=10731
<10731=10736,10735,10732
<10732=10734,10733
<10737=10738
<10738=10750,10749,10739
<10739=10748,10740
<10740=10747,10741
<10741=10743,10742
<10743=10744
<10744=10746,10745
<10751=10752
<10752=10760,10759,10753
<10753=10758,10754
<10754=10756,10755
<10756=10757
<10761=10762
<10762=10770,10769,10763
<10763=10768,10764
<10764=10766,10765
<10766=10767
<10771=10782,10772
<10772=10777,10773
<10773=10774
<10774=10776,10775
<10777=10778
<10778=10780,10779
<10780=10781
<10782=10783
<10783=10785,10784
<10786=10787
<10787=10792,10791,10788
<10788=10790,10789
<10793=10794
<10794=10808,10795
<10795=10802,10798,10796
<10796=10797
<10798=10799
<10799=10801,10800
<10802=10803
<10803=10805,10804
<10805=10807,10806
<10808=10809
<10810=10811
<10811=10814,10813,10812
<10850=10853,10852,10851
<10853=11126,11117,11104,11091,11078,11064,11056,11029,11002,10975,10948,10921,10914,10905,10896,10869,10863,10856,10854
<10854=10855
<10856=10857
<10857=10859,10858
<10859=10860
<10860=10862,10861
<10863=10864
<10864=10866,10865
<10866=10868,10867
<10869=10888,10884,10881,10870
<10870=10871
<10871=10872
<10872=10876,10873
<10873=10875,10874
<10876=10878,10877
<10878=10880,10879
<10881=10883,10882
<10884=10885
<10885=10887,10886
<10888=10889
<10889=10890
<10890=10895,10894,10891
<10891=10893,10892
<10896=10897
<10897=10902,10898
<10898=10900,10899
<10900=10901
<10902=10904,10903
<10905=10906
<10906=10911,10907
<10907=10909,10908
<10909=10910
<10911=10913,10912
<10914=10915
<10915=10919,10916
<10916=10917
<10917=10918
<10919=10920
<10921=10922
<10922=10946,10923
<10923=10944,10942,10936,10930,10924
<10924=10925
<10925=10927,10926
<10927=10929,10928
<10930=10931
<10931=10933,10932
<10933=10935,10934
<10936=10937
<10937=10939,10938
<10939=10941,10940
<10942=10943
<10944=10945
<10946=10947
<10948=10949
<10949=10973,10950
<10950=10971,10969,10963,10957,10951
<10951=10952
<10952=10954,10953
<10954=10956,10955
<10957=10958
<10958=10960,10959
<10960=10962,10961
<10963=10964
<10964=10966,10965
<10966=10968,10967
<10969=10970
<10971=10972
<10973=10974
<10975=10976
<10976=11000,10977
<10977=10998,10996,10990,10984,10978
<10978=10979
<10979=10981,10980
<10981=10983,10982
<10984=10985
<10985=10987,10986
<10987=10989,10988
<10990=10991
<10991=10993,10992
<10993=10995,10994
<10996=10997
<10998=10999
<11000=11001
<11002=11003
<11003=11027,11004
<11004=11025,11023,11017,11011,11005
<11005=11006
<11006=11008,11007
<11008=11010,11009
<11011=11012
<11012=11014,11013
<11014=11016,11015
<11017=11018
<11018=11020,11019
<11020=11022,11021
<11023=11024
<11025=11026
<11027=11028
<11029=11030
<11030=11054,11031
<11031=11052,11050,11044,11038,11032
<11032=11033
<11033=11035,11034
<11035=11037,11036
<11038=11039
<11039=11041,11040
<11041=11043,11042
<11044=11045
<11045=11049,11046
<11046=11048,11047
<11050=11051
<11052=11053
<11054=11055
<11056=11060,11057
<11057=11058
<11058=11059
<11060=11061
<11061=11063,11062
<11064=11065
<11065=11077,11076,11066
<11066=11075,11067
<11067=11073,11068
<11068=11071,11069
<11069=11070
<11071=11072
<11073=11074
<11078=11079
<11079=11081,11080
<11081=11090,11082
<11082=11084,11083
<11084=11088,11085
<11085=11086
<11086=11087
<11088=11089
<11091=11092
<11092=11094,11093
<11094=11103,11095
<11095=11097,11096
<11097=11101,11098
<11098=11099
<11099=11100
<11101=11102
<11104=11105
<11105=11107,11106
<11107=11116,11108
<11108=11110,11109
<11110=11114,11111
<11111=11112
<11112=11113
<11114=11115
<11117=11118
<11118=11124,11119
<11119=11122,11120
<11120=11121
<11122=11123
<11124=11125
<11126=11127
<11127=11130,11129,11128
<11161=11170,11169,11162
<11162=11166,11163
<11163=11165,11164
<11166=11168,11167
<11170=11387,11378,11365,11352,11339,11325,11308,11301,11297,11284,11180,11173,11171
<11171=11172
<11173=11174
<11174=11178,11175
<11175=11176
<11176=11177
<11178=11179
<11180=11276,11272,11269,11181
<11181=11262,11245,11220,11211,11202,11182
<11182=11183
<11183=11194,11184
<11184=11185
<11185=11186
<11186=11192,11187
<11187=11190,11188
<11188=11189
<11190=11191
<11192=11193
<11194=11195
<11195=11197,11196
<11197=11199,11198
<11199=11201,11200
<11202=11203
<11203=11207,11204
<11204=11205
<11205=11206
<11207=11208
<11208=11210,11209
<11211=11212
<11212=11216,11213
<11213=11214
<11214=11215
<11216=11217
<11217=11219,11218
<11220=11237,11228,11221
<11221=11222
<11222=11223
<11223=11225,11224
<11225=11227,11226
<11228=11229
<11229=11235,11230
<11230=11233,11231
<11231=11232
<11233=11234
<11235=11236
<11237=11238
<11238=11242,11239
<11239=11241,11240
<11242=11244,11243
<11245=11246
<11246=11260,11247
<11247=11258,11256,11252,11248
<11248=11249
<11249=11251,11250
<11252=11253
<11253=11255,11254
<11256=11257
<11258=11259
<11260=11261
<11262=11266,11263
<11263=11265,11264
<11266=11268,11267
<11269=11271,11270
<11272=11273
<11273=11275,11274
<11276=11277
<11277=11278
<11278=11283,11282,11279
<11279=11281,11280
<11284=11285
<11285=11295,11286
<11286=11293,11291,11287
<11287=11288
<11288=11290,11289
<11291=11292
<11293=11294
<11295=11296
<11297=11298
<11298=11300,11299
<11301=11302
<11302=11304,11303
<11304=11305
<11305=11307,11306
<11308=11321,11309
<11309=11312,11310
<11310=11311
<11312=11313
<11313=11319,11314
<11314=11317,11315
<11315=11316
<11317=11318
<11319=11320
<11321=11322
<11322=11324,11323
<11325=11326
<11326=11338,11337,11327
<11327=11336,11328
<11328=11334,11329
<11329=11332,11330
<11330=11331
<11332=11333
<11334=11335
<11339=11340
<11340=11342,11341
<11342=11351,11343
<11343=11345,11344
<11345=11349,11346
<11346=11347
<11347=11348
<11349=11350
<11352=11353
<11353=11355,11354
<11355=11364,11356
<11356=11358,11357
<11358=11362,11359
<11359=11360
<11360=11361
<11362=11363
<11365=11366
<11366=11368,11367
<11368=11377,11369
<11369=11371,11370
<11371=11375,11372
<11372=11373
<11373=11374
<11375=11376
<11378=11379
<11379=11385,11380
<11380=11383,11381
<11381=11382
<11383=11384
<11385=11386
<11387=11388
<11388=11391,11390,11389
<11424=11427,11426,11425
<11427=11646,11637,11624,11611,11598,11584,11568,11543,11516,11489,11462,11435,11428
<11428=11429
<11429=11433,11430
<11430=11431
<11431=11432
<11433=11434
<11435=11436
<11436=11460,11437
<11437=11458,11456,11450,11444,11438
<11438=11439
<11439=11441,11440
<11441=11443,11442
<11444=11445
<11445=11447,11446
<11447=11449,11448
<11450=11451
<11451=11453,11452
<11453=11455,11454
<11456=11457
<11458=11459
<11460=11461
<11462=11463
<11463=11487,11464
<11464=11485,11483,11477,11471,11465
<11465=11466
<11466=11468,11467
<11468=11470,11469
<11471=11472
<11472=11474,11473
<11474=11476,11475
<11477=11478
<11478=11480,11479
<11480=11482,11481
<11483=11484
<11485=11486
<11487=11488
<11489=11490
<11490=11514,11491
<11491=11512,11510,11504,11498,11492
<11492=11493
<11493=11495,11494
<11495=11497,11496
<11498=11499
<11499=11501,11500
<11501=11503,11502
<11504=11505
<11505=11507,11506
<11507=11509,11508
<11510=11511
<11512=11513
<11514=11515
<11516=11517
<11517=11541,11518
<11518=11539,11537,11531,11525,11519
<11519=11520
<11520=11522,11521
<11522=11524,11523
<11525=11526
<11526=11528,11527
<11528=11530,11529
<11531=11532
<11532=11534,11533
<11534=11536,11535
<11537=11538
<11539=11540
<11541=11542
<11543=11544
<11544=11566,11545
<11545=11564,11562,11558,11552,11546
<11546=11547
<11547=11549,11548
<11549=11551,11550
<11552=11553
<11553=11555,11554
<11555=11557,11556
<11558=11559
<11559=11561,11560
<11562=11563
<11564=11565
<11566=11567
<11568=11580,11569
<11569=11571,11570
<11571=11572
<11572=11578,11573
<11573=11576,11574
<11574=11575
<11576=11577
<11578=11579
<11580=11581
<11581=11583,11582
<11584=11585
<11585=11597,11596,11586
<11586=11595,11587
<11587=11593,11588
<11588=11591,11589
<11589=11590
<11591=11592
<11593=11594
<11598=11599
<11599=11601,11600
<11601=11610,11602
<11602=11604,11603
<11604=11608,11605
<11605=11606
<11606=11607
<11608=11609
<11611=11612
<11612=11614,11613
<11614=11623,11615
<11615=11617,11616
<11617=11621,11618
<11618=11619
<11619=11620
<11621=11622
<11624=11625
<11625=11627,11626
<11627=11636,11628
<11628=11630,11629
<11630=11634,11631
<11631=11632
<11632=11633
<11634=11635
<11637=11638
<11638=11644,11639
<11639=11642,11640
<11640=11641
<11642=11643
<11644=11645
<11646=11647
<11647=11650,11649,11648
<11671=11677,11676,11672
<11672=11673
<11673=11675,11674
<11677=12401,12394,12383,12360,12341,12336,12327,12314,12301,12288,12283,12270,12257,12244,12231,12218,12205,12188,12168,12159,12154,12145,12135,12125,12102,12081,12060,12041,12036,12031,12022,12001,11980,11959,11938,11933,11911,11889,11867,11845,11689,11678
<11678=11679
<11679=11687,11680
<11680=11685,11683,11681
<11681=11682
<11683=11684
<11685=11686
<11687=11688
<11689=11829,11784,11690
<11690=11691
<11691=11761,11738,11715,11692
<11692=11693
<11693=11713,11694
<11694=11711,11709,11707,11703,11699,11695
<11695=11696
<11696=11698,11697
<11699=11700
<11700=11702,11701
<11703=11704
<11704=11706,11705
<11707=11708
<11709=11710
<11711=11712
<11713=11714
<11715=11716
<11716=11736,11717
<11717=11734,11732,11730,11726,11722,11718
<11718=11719
<11719=11721,11720
<11722=11723
<11723=11725,11724
<11726=11727
<11727=11729,11728
<11730=11731
<11732=11733
<11734=11735
<11736=11737
<11738=11739
<11739=11759,11740
<11740=11757,11755,11753,11749,11745,11741
<11741=11742
<11742=11744,11743
<11745=11746
<11746=11748,11747
<11749=11750
<11750=11752,11751
<11753=11754
<11755=11756
<11757=11758
<11759=11760
<11761=11762
<11762=11782,11763
<11763=11780,11778,11776,11772,11768,11764
<11764=11765
<11765=11767,11766
<11768=11769
<11769=11771,11770
<11772=11773
<11773=11775,11774
<11776=11777
<11778=11779
<11780=11781
<11782=11783
<11784=11818,11807,11796,11785
<11785=11786
<11786=11794,11787
<11787=11792,11790,11788
<11788=11789
<11790=11791
<11792=11793
<11794=11795
<11796=11797
<11797=11805,11798
<11798=11803,11801,11799
<11799=11800
<11801=11802
<11803=11804
<11805=11806
<11807=11808
<11808=11816,11809
<11809=11814,11812,11810
<11810=11811
<11812=11813
<11814=11815
<11816=11817
<11818=11819
<11819=11827,11820
<11820=11825,11823,11821
<11821=11822
<11823=11824
<11825=11826
<11827=11828
<11829=11830
<11830=11842,11831
<11831=11839,11832
<11832=11836,11833
<11833=11835,11834
<11836=11838,11837
<11839=11841,11840
<11842=11844,11843
<11845=11846
<11846=11866,11865,11847
<11847=11864,11848
<11848=11860,11849
<11849=11858,11854,11850
<11850=11851
<11851=11853,11852
<11854=11855
<11855=11857,11856
<11858=11859
<11860=11861
<11861=11863,11862
<11867=11868
<11868=11888,11887,11869
<11869=11886,11870
<11870=11882,11871
<11871=11880,11876,11872
<11872=11873
<11873=11875,11874
<11876=11877
<11877=11879,11878
<11880=11881
<11882=11883
<11883=11885,11884
<11889=11890
<11890=11910,11909,11891
<11891=11908,11892
<11892=11904,11893
<11893=11902,11898,11894
<11894=11895
<11895=11897,11896
<11898=11899
<11899=11901,11900
<11902=11903
<11904=11905
<11905=11907,11906
<11911=11912
<11912=11932,11931,11913
<11913=11930,11914
<11914=11926,11915
<11915=11924,11920,11916
<11916=11917
<11917=11919,11918
<11920=11921
<11921=11923,11922
<11924=11925
<11926=11927
<11927=11929,11928
<11933=11934
<11934=11937,11936,11935
<11938=11939
<11939=11957,11940
<11940=11955,11953,11951,11949,11947,11945,11941
<11941=11942
<11942=11944,11943
<11945=11946
<11947=11948
<11949=11950
<11951=11952
<11953=11954
<11955=11956
<11957=11958
<11959=11960
<11960=11978,11961
<11961=11976,11974,11972,11970,11968,11966,11962
<11962=11963
<11963=11965,11964
<11966=11967
<11968=11969
<11970=11971
<11972=11973
<11974=11975
<11976=11977
<11978=11979
<11980=11981
<11981=11999,11982
<11982=11997,11995,11993,11991,11989,11987,11983
<11983=11984
<11984=11986,11985
<11987=11988
<11989=11990
<11991=11992
<11993=11994
<11995=11996
<11997=11998
<11999=12000
<12001=12002
<12002=12020,12003
<12003=12018,12016,12014,12012,12010,12008,12004
<12004=12005
<12005=12007,12006
<12008=12009
<12010=12011
<12012=12013
<12014=12015
<12016=12017
<12018=12019
<12020=12021
<12022=12023
<12023=12027,12024
<12024=12025
<12025=12026
<12027=12028
<12028=12030,12029
<12031=12032
<12032=12035,12034,12033
<12036=12037
<12037=12040,12039,12038
<12041=12042
<12042=12059,12058,12057,12043
<12043=12056,12044
<12044=12053,12050,12045
<12045=12049,12046
<12046=12048,12047
<12050=12052,12051
<12053=12055,12054
<12060=12061
<12061=12080,12079,12078,12062
<12062=12077,12063
<12063=12072,12069,12064
<12064=12068,12065
<12065=12067,12066
<12069=12071,12070
<12072=12074,12073
<12074=12076,12075
<12081=12082
<12082=12101,12100,12099,12083
<12083=12098,12084
<12084=12095,12090,12085
<12085=12089,12086
<12086=12088,12087
<12090=12092,12091
<12092=12094,12093
<12095=12097,12096
<12102=12103
<12103=12124,12123,12122,12104
<12104=12121,12105
<12105=12116,12111,12106
<12106=12110,12107
<12107=12109,12108
<12111=12113,12112
<12113=12115,12114
<12116=12118,12117
<12118=12120,12119
<12125=12126
<12126=12134,12133,12127
<12127=12132,12128
<12128=12130,12129
<12130=12131
<12135=12136
<12136=12144,12143,12137
<12137=12142,12138
<12138=12140,12139
<12140=12141
<12145=12146
<12146=12150,12147
<12147=12148
<12148=12149
<12150=12151
<12151=12153,12152
<12154=12155
<12155=12158,12157,12156
<12159=12160
<12160=12164,12161
<12161=12162
<12162=12163
<12164=12165
<12165=12167,12166
<12168=12182,12169
<12169=12171,12170
<12171=12172
<12172=12180,12173
<12173=12178,12176,12174
<12174=12175
<12176=12177
<12178=12179
<12180=12181
<12182=12183
<12183=12187,12184
<12184=12186,12185
<12188=12189
<12189=12203,12190
<12190=12201,12199,12197,12191
<12191=12192
<12192=12195,12194,12193
<12195=12196
<12197=12198
<12199=12200
<12201=12202
<12203=12204
<12205=12206
<12206=12216,12207
<12207=12214,12212,12210,12208
<12208=12209
<12210=12211
<12212=12213
<12214=12215
<12216=12217
<12218=12219
<12219=12229,12220
<12220=12227,12225,12223,12221
<12221=12222
<12223=12224
<12225=12226
<12227=12228
<12229=12230
<12231=12232
<12232=12242,12233
<12233=12240,12238,12236,12234
<12234=12235
<12236=12237
<12238=12239
<12240=12241
<12242=12243
<12244=12245
<12245=12255,12246
<12246=12253,12251,12249,12247
<12247=12248
<12249=12250
<12251=12252
<12253=12254
<12255=12256
<12257=12258
<12258=12268,12259
<12259=12266,12264,12262,12260
<12260=12261
<12262=12263
<12264=12265
<12266=12267
<12268=12269
<12270=12271
<12271=12281,12272
<12272=12279,12277,12275,12273
<12273=12274
<12275=12276
<12277=12278
<12279=12280
<12281=12282
<12283=12284
<12284=12287,12286,12285
<12288=12289
<12289=12291,12290
<12291=12300,12292
<12292=12294,12293
<12294=12298,12295
<12295=12296
<12296=12297
<12298=12299
<12301=12302
<12302=12304,12303
<12304=12313,12305
<12305=12307,12306
<12307=12311,12308
<12308=12309
<12309=12310
<12311=12312
<12314=12315
<12315=12317,12316
<12317=12326,12318
<12318=12320,12319
<12320=12324,12321
<12321=12322
<12322=12323
<12324=12325
<12327=12328
<12328=12334,12329
<12329=12332,12330
<12330=12331
<12332=12333
<12334=12335
<12336=12337
<12337=12340,12339,12338
<12341=12342
<12342=12358,12343
<12343=12356,12354,12352,12344
<12344=12345
<12345=12348,12347,12346
<12348=12349
<12349=12351,12350
<12352=12353
<12354=12355
<12356=12357
<12358=12359
<12360=12361
<12361=12381,12362
<12362=12379,12377,12375,12370,12368,12363
<12363=12364
<12364=12366,12365
<12366=12367
<12368=12369
<12370=12371
<12371=12373,12372
<12373=12374
<12375=12376
<12377=12378
<12379=12380
<12381=12382
<12383=12384
<12384=12392,12385
<12385=12390,12388,12386
<12386=12387
<12388=12389
<12390=12391
<12392=12393
<12394=12395
<12395=12400,12399,12396
<12396=12398,12397
<12438=12441,12440,12439
<12441=12634,12625,12612,12599,12586,12572,12556,12542,12535,12504,12493,12449,12442
<12442=12443
<12443=12447,12444
<12444=12445
<12445=12446
<12447=12448
<12449=12485,12481,12478,12450
<12450=12468,12451
<12451=12452
<12452=12466,12453
<12453=12464,12462,12460,12454
<12454=12455
<12455=12457,12456
<12457=12459,12458
<12460=12461
<12462=12463
<12464=12465
<12466=12467
<12468=12469
<12469=12473,12470
<12470=12472,12471
<12473=12475,12474
<12475=12477,12476
<12478=12480,12479
<12481=12482
<12482=12484,12483
<12485=12486
<12486=12487
<12487=12492,12491,12488
<12488=12490,12489
<12493=12494
<12494=12502,12495
<12495=12500,12498,12496
<12496=12497
<12498=12499
<12500=12501
<12502=12503
<12504=12527,12523,12520,12505
<12505=12510,12506
<12506=12507
<12507=12509,12508
<12510=12511
<12511=12515,12512
<12512=12514,12513
<12515=12517,12516
<12517=12519,12518
<12520=12522,12521
<12523=12524
<12524=12526,12525
<12527=12528
<12528=12529
<12529=12534,12533,12530
<12530=12532,12531
<12535=12536
<12536=12541,12540,12537
<12537=12539,12538
<12542=12543
<12543=12555,12554,12544
<12544=12553,12545
<12545=12552,12546
<12546=12548,12547
<12548=12549
<12549=12551,12550
<12556=12568,12557
<12557=12559,12558
<12559=12560
<12560=12566,12561
<12561=12564,12562
<12562=12563
<12564=12565
<12566=12567
<12568=12569
<12569=12571,12570
<12572=12573
<12573=12585,12584,12574
<12574=12583,12575
<12575=12581,12576
<12576=12579,12577
<12577=12578
<12579=12580
<12581=12582
<12586=12587
<12587=12589,12588
<12589=12598,12590
<12590=12592,12591
<12592=12596,12593
<12593=12594
<12594=12595
<12596=12597
<12599=12600
<12600=12602,12601
<12602=12611,12603
<12603=12605,12604
<12605=12609,12606
<12606=12607
<12607=12608
<12609=12610
<12612=12613
<12613=12615,12614
<12615=12624,12616
<12616=12618,12617
<12618=12622,12619
<12619=12620
<12620=12621
<12622=12623
<12625=12626
<12626=12632,12627
<12627=12630,12628
<12628=12629
<12630=12631
<12632=12633
<12634=12635
<12635=12638,12637,12636
<12658=12661,12660,12659
<12661=12935,12926,12913,12900,12887,12873,12867,12862,12851,12824,12797,12788,12777,12750,12723,12714,12669,12662
<12662=12663
<12663=12667,12664
<12664=12665
<12665=12666
<12667=12668
<12669=12670
<12670=12712,12671
<12671=12710,12708,12702,12696,12690,12684,12678,12672
<12672=12673
<12673=12677,12674
<12674=12676,12675
<12678=12679
<12679=12683,12680
<12680=12682,12681
<12684=12685
<12685=12689,12686
<12686=12688,12687
<12690=12691
<12691=12695,12692
<12692=12694,12693
<12696=12697
<12697=12701,12698
<12698=12700,12699
<12702=12703
<12703=12707,12704
<12704=12706,12705
<12708=12709
<12710=12711
<12712=12713
<12714=12715
<12715=12721,12716
<12716=12719,12717
<12717=12718
<12719=12720
<12721=12722
<12723=12737,12724
<12724=12725
<12725=12727,12726
<12727=12736,12728
<12728=12730,12729
<12730=12734,12731
<12731=12732
<12732=12733
<12734=12735
<12737=12738
<12738=12740,12739
<12740=12749,12741
<12741=12743,12742
<12743=12747,12744
<12744=12745
<12745=12746
<12747=12748
<12750=12764,12751
<12751=12752
<12752=12754,12753
<12754=12763,12755
<12755=12757,12756
<12757=12761,12758
<12758=12759
<12759=12760
<12761=12762
<12764=12765
<12765=12767,12766
<12767=12776,12768
<12768=12770,12769
<12770=12774,12771
<12771=12772
<12772=12773
<12774=12775
<12777=12778
<12778=12786,12779
<12779=12784,12782,12780
<12780=12781
<12782=12783
<12784=12785
<12786=12787
<12788=12789
<12789=12796,12790
<12790=12794,12791
<12791=12792
<12792=12793
<12794=12795
<12797=12811,12798
<12798=12799
<12799=12801,12800
<12801=12810,12802
<12802=12804,12803
<12804=12808,12805
<12805=12806
<12806=12807
<12808=12809
<12811=12812
<12812=12814,12813
<12814=12823,12815
<12815=12817,12816
<12817=12821,12818
<12818=12819
<12819=12820
<12821=12822
<12824=12838,12825
<12825=12826
<12826=12828,12827
<12828=12837,12829
<12829=12831,12830
<12831=12835,12832
<12832=12833
<12833=12834
<12835=12836
<12838=12839
<12839=12841,12840
<12841=12850,12842
<12842=12844,12843
<12844=12848,12845
<12845=12846
<12846=12847
<12848=12849
<12851=12852
<12852=12860,12853
<12853=12858,12856,12854
<12854=12855
<12856=12857
<12858=12859
<12860=12861
<12862=12863
<12863=12866,12865,12864
<12867=12869,12868
<12869=12870
<12870=12872,12871
<12873=12874
<12874=12886,12885,12875
<12875=12884,12876
<12876=12882,12877
<12877=12880,12878
<12878=12879
<12880=12881
<12882=12883
<12887=12888
<12888=12890,12889
<12890=12899,12891
<12891=12893,12892
<12893=12897,12894
<12894=12895
<12895=12896
<12897=12898
<12900=12901
<12901=12903,12902
<12903=12912,12904
<12904=12906,12905
<12906=12910,12907
<12907=12908
<12908=12909
<12910=12911
<12913=12914
<12914=12916,12915
<12916=12925,12917
<12917=12919,12918
<12919=12923,12920
<12920=12921
<12921=12922
<12923=12924
<12926=12927
<12927=12933,12928
<12928=12931,12929
<12929=12930
<12931=12932
<12933=12934
<12935=12936
<12936=12939,12938,12937
<12964=12967,12966,12965
<12967=13113,13104,13091,13078,13065,13051,13047,13040,13036,13023,12970,12968
<12968=12969
<12970=13015,13011,13008,12971
<12971=13004,12981,12972
<12972=12973
<12973=12977,12974
<12974=12975
<12975=12976
<12977=12978
<12978=12980,12979
<12981=12982
<12982=13000,12983
<12983=12998,12991,12984
<12984=12985
<12985=12990,12986
<12986=12988,12987
<12988=12989
<12991=12992
<12992=12997,12993
<12993=12995,12994
<12995=12996
<12998=12999
<13000=13001
<13001=13003,13002
<13004=13005
<13005=13007,13006
<13008=13010,13009
<13011=13012
<13012=13014,13013
<13015=13016
<13016=13017
<13017=13022,13021,13018
<13018=13020,13019
<13023=13024
<13024=13034,13025
<13025=13032,13030,13026
<13026=13027
<13027=13029,13028
<13030=13031
<13032=13033
<13034=13035
<13036=13037
<13037=13039,13038
<13040=13043,13041
<13041=13042
<13043=13044
<13044=13046,13045
<13047=13048
<13048=13050,13049
<13051=13052
<13052=13064,13063,13053
<13053=13062,13054
<13054=13060,13055
<13055=13058,13056
<13056=13057
<13058=13059
<13060=13061
<13065=13066
<13066=13068,13067
<13068=13077,13069
<13069=13071,13070
<13071=13075,13072
<13072=13073
<13073=13074
<13075=13076
<13078=13079
<13079=13081,13080
<13081=13090,13082
<13082=13084,13083
<13084=13088,13085
<13085=13086
<13086=13087
<13088=13089
<13091=13092
<13092=13094,13093
<13094=13103,13095
<13095=13097,13096
<13097=13101,13098
<13098=13099
<13099=13100
<13101=13102
<13104=13105
<13105=13111,13106
<13106=13109,13107
<13107=13108
<13109=13110
<13111=13112
<13113=13114
<13114=13117,13116,13115
<13136=13148,13147,13137
<13137=13144,13141,13138
<13138=13140,13139
<13141=13143,13142
<13144=13146,13145
<13148=13544,13530,13518,13506,13332,13327,13318,13162,13161,13160,13159,13157,13153,13149
<13149=13150
<13150=13152,13151
<13153=13154
<13154=13156,13155
<13157=13158
<13162=13310,13304,13301,13163
<13163=13285,13279,13267,13256,13238,13233,13218,13213,13196,13191,13178,13164
<13164=13165
<13165=13174,13166
<13166=13167
<13167=13168
<13168=13172,13169
<13169=13170
<13170=13171
<13172=13173
<13174=13175
<13175=13177,13176
<13178=13179
<13179=13187,13180
<13180=13185,13183,13181
<13181=13182
<13183=13184
<13185=13186
<13187=13188
<13188=13190,13189
<13191=13192
<13192=13195,13194,13193
<13196=13197
<13197=13209,13198
<13198=13205,13201,13199
<13199=13200
<13201=13202
<13202=13204,13203
<13205=13206
<13206=13208,13207
<13209=13210
<13210=13212,13211
<13213=13214
<13214=13217,13216,13215
<13218=13219
<13219=13229,13220
<13220=13223,13221
<13221=13222
<13223=13224
<13224=13226,13225
<13226=13228,13227
<13229=13230
<13230=13232,13231
<13233=13234
<13234=13237,13236,13235
<13238=13239
<13239=13252,13240
<13240=13241
<13241=13242
<13242=13250,13243
<13243=13244
<13244=13245
<13245=13247,13246
<13247=13249,13248
<13250=13251
<13252=13253
<13253=13255,13254
<13256=13257
<13257=13266,13265,13258
<13258=13264,13259
<13259=13261,13260
<13261=13263,13262
<13267=13268
<13268=13278,13277,13269
<13269=13276,13270
<13270=13272,13271
<13272=13274,13273
<13274=13275
<13279=13281,13280
<13281=13282
<13282=13284,13283
<13285=13286
<13286=13300,13299,13287
<13287=13298,13288
<13288=13297,13289
<13289=13291,13290
<13291=13292
<13292=13294,13293
<13294=13296,13295
<13301=13303,13302
<13304=13305
<13305=13309,13306
<13306=13308,13307
<13310=13311
<13311=13312
<13312=13317,13316,13313
<13313=13315,13314
<13318=13319
<13319=13323,13320
<13320=13321
<13321=13322
<13323=13324
<13324=13326,13325
<13327=13328
<13328=13331,13330,13329
<13332=13498,13494,13491,13333
<13333=13482,13477,13462,13454,13446,13429,13412,13391,13370,13349,13334
<13334=13335
<13335=13339,13336
<13336=13337
<13337=13338
<13339=13340
<13340=13342,13341
<13342=13348,13343
<13343=13345,13344
<13345=13347,13346
<13349=13350
<13350=13368,13351
<13351=13352
<13352=13353
<13353=13365,13354
<13354=13362,13355
<13355=13359,13356
<13356=13358,13357
<13359=13361,13360
<13362=13364,13363
<13365=13367,13366
<13368=13369
<13370=13371
<13371=13390,13389,13372
<13372=13388,13373
<13373=13386,13374
<13374=13375
<13375=13376
<13376=13384,13377
<13377=13378
<13378=13379
<13379=13383,13380
<13380=13382,13381
<13384=13385
<13386=13387
<13391=13392
<13392=13411,13410,13393
<13393=13409,13394
<13394=13407,13395
<13395=13396
<13396=13397
<13397=13405,13398
<13398=13399
<13399=13400
<13400=13404,13401
<13401=13403,13402
<13405=13406
<13407=13408
<13412=13413
<13413=13426,13414
<13414=13424,13415
<13415=13420,13418,13416
<13416=13417
<13418=13419
<13420=13421
<13421=13423,13422
<13424=13425
<13426=13428,13427
<13429=13430
<13430=13443,13431
<13431=13441,13432
<13432=13437,13435,13433
<13433=13434
<13435=13436
<13437=13438
<13438=13440,13439
<13441=13442
<13443=13445,13444
<13446=13447
<13447=13451,13448
<13448=13450,13449
<13451=13453,13452
<13454=13455
<13455=13459,13456
<13456=13458,13457
<13459=13461,13460
<13462=13463
<13463=13473,13464
<13464=13467,13465
<13465=13466
<13467=13468
<13468=13470,13469
<13470=13472,13471
<13473=13474
<13474=13476,13475
<13477=13478
<13478=13481,13480,13479
<13482=13483
<13483=13490,13489,13484
<13484=13488,13485
<13485=13487,13486
<13491=13493,13492
<13494=13495
<13495=13497,13496
<13498=13499
<13499=13500
<13500=13505,13504,13501
<13501=13503,13502
<13506=13507
<13507=13517,13516,13508
<13508=13515,13509
<13509=13514,13510
<13510=13512,13511
<13512=13513
<13518=13519
<13519=13529,13528,13520
<13520=13527,13521
<13521=13526,13522
<13522=13524,13523
<13524=13525
<13530=13531
<13531=13543,13542,13532
<13532=13541,13533
<13533=13540,13534
<13534=13536,13535
<13536=13537
<13537=13539,13538
<13544=13545
<13545=13552,13551,13546
<13546=13550,13547
<13547=13549,13548
<13604=13610,13609,13605
<13605=13606
<13606=13608,13607
<13610=13828,13817,13759,13742,13727,13722,13713,13707,13691,13674,13670,13649,13639,13629,13619,13611
<13611=13612
<13612=13616,13613
<13613=13615,13614
<13616=13618,13617
<13619=13620
<13620=13624,13621
<13621=13623,13622
<13624=13626,13625
<13626=13628,13627
<13629=13630
<13630=13634,13631
<13631=13633,13632
<13634=13636,13635
<13636=13638,13637
<13639=13640
<13640=13644,13641
<13641=13643,13642
<13644=13646,13645
<13646=13648,13647
<13649=13650
<13650=13668,13651
<13651=13666,13664,13662,13660,13658,13656,13652
<13652=13653
<13653=13655,13654
<13656=13657
<13658=13659
<13660=13661
<13662=13663
<13664=13665
<13666=13667
<13668=13669
<13670=13671
<13671=13673,13672
<13674=13675
<13675=13689,13676
<13676=13687,13685,13683,13679,13677
<13677=13678
<13679=13680
<13680=13682,13681
<13683=13684
<13685=13686
<13687=13688
<13689=13690
<13691=13692
<13692=13706,13705,13693
<13693=13704,13694
<13694=13702,13695
<13695=13700,13698,13696
<13696=13697
<13698=13699
<13700=13701
<13702=13703
<13707=13708
<13708=13710,13709
<13710=13712,13711
<13713=13714
<13714=13718,13715
<13715=13716
<13716=13717
<13718=13719
<13719=13721,13720
<13722=13723
<13723=13726,13725,13724
<13727=13728
<13728=13741,13740,13739,13729
<13729=13738,13730
<13730=13735,13734,13731
<13731=13733,13732
<13735=13737,13736
<13742=13743
<13743=13757,13744
<13744=13755,13753,13751,13747,13745
<13745=13746
<13747=13748
<13748=13750,13749
<13751=13752
<13753=13754
<13755=13756
<13757=13758
<13759=13809,13805,13802,13760
<13760=13793,13780,13761
<13761=13762
<13762=13778,13763
<13763=13776,13774,13772,13770,13768,13766,13764
<13764=13765
<13766=13767
<13768=13769
<13770=13771
<13772=13773
<13774=13775
<13776=13777
<13778=13779
<13780=13781
<13781=13792,13791,13782
<13782=13790,13783
<13783=13789,13784
<13784=13786,13785
<13786=13788,13787
<13793=13794
<13794=13801,13800,13795
<13795=13799,13796
<13796=13798,13797
<13802=13804,13803
<13805=13806
<13806=13808,13807
<13809=13810
<13810=13811
<13811=13816,13815,13812
<13812=13814,13813
<13817=13818
<13818=13827,13826,13825,13819
<13819=13824,13820
<13820=13823,13822,13821
<13828=13829
<13829=13841,13840,13830
<13830=13839,13831
<13831=13838,13832
<13832=13834,13833
<13834=13835
<13835=13837,13836
<13870=13879,13878,13871
<13871=13875,13872
<13872=13874,13873
<13875=13877,13876
<13879=14615,14606,14594,14586,14578,14570,14562,14554,14546,14538,14519,14512,14507,14503,14485,14472,14466,14448,14430,14421,14397,14386,14372,13998,13904,13895,13894,13893,13892,13890,13885,13880
<13880=13881
<13881=13883,13882
<13883=13884
<13885=13886
<13886=13888,13887
<13888=13889
<13890=13891
<13895=13896
<13896=13902,13897
<13897=13900,13898
<13898=13899
<13900=13901
<13902=13903
<13904=13990,13986,13983,13905
<13905=13906
<13906=13975,13971,13968,13907
<13907=13957,13939,13925,13908
<13908=13909
<13909=13923,13910
<13910=13921,13919,13917,13915,13913,13911
<13911=13912
<13913=13914
<13915=13916
<13917=13918
<13919=13920
<13921=13922
<13923=13924
<13925=13926
<13926=13938,13937,13927
<13927=13936,13928
<13928=13934,13929
<13929=13930
<13930=13931
<13931=13933,13932
<13934=13935
<13939=13940
<13940=13956,13955,13941
<13941=13954,13942
<13942=13952,13943
<13943=13948,13946,13944
<13944=13945
<13946=13947
<13948=13949
<13949=13951,13950
<13952=13953
<13957=13958
<13958=13967,13966,13959
<13959=13965,13960
<13960=13962,13961
<13962=13964,13963
<13968=13970,13969
<13971=13972
<13972=13974,13973
<13975=13976
<13976=13977
<13977=13982,13981,13978
<13978=13980,13979
<13983=13985,13984
<13986=13987
<13987=13989,13988
<13990=13991
<13991=13992
<13992=13997,13996,13993
<13993=13995,13994
<13998=14364,14360,14357,13999
<13999=14348,14339,14321,14277,14260,14245,14240,14225,14208,14191,14178,14174,14156,14145,14128,14005,14004,14003,14002,14000
<14000=14001
<14005=14116,14110,14107,14006
<14006=14007
<14007=14095,14089,14086,14008
<14008=14065,14051,14037,14019,14009
<14009=14010
<14010=14012,14011
<14012=14018,14013
<14013=14015,14014
<14015=14017,14016
<14019=14021,14020
<14021=14022
<14022=14034,14023
<14023=14031,14024
<14024=14028,14025
<14025=14027,14026
<14028=14030,14029
<14031=14033,14032
<14034=14036,14035
<14037=14038
<14038=14050,14049,14039
<14039=14048,14040
<14040=14046,14041
<14041=14042
<14042=14043
<14043=14045,14044
<14046=14047
<14051=14052
<14052=14064,14063,14053
<14053=14062,14054
<14054=14060,14055
<14055=14056
<14056=14057
<14057=14059,14058
<14060=14061
<14065=14066
<14066=14085,14084,14067
<14067=14083,14068
<14068=14076,14069
<14069=14075,14070
<14070=14074,14071
<14071=14073,14072
<14076=14082,14077
<14077=14081,14078
<14078=14080,14079
<14086=14088,14087
<14089=14090
<14090=14094,14091
<14091=14093,14092
<14095=14096
<14096=14097
<14097=14106,14105,14098
<14098=14104,14099
<14099=14101,14100
<14101=14103,14102
<14107=14109,14108
<14110=14111
<14111=14115,14112
<14112=14114,14113
<14116=14117
<14117=14118
<14118=14127,14126,14119
<14119=14125,14120
<14120=14122,14121
<14122=14124,14123
<14128=14129
<14129=14143,14130
<14130=14141,14139,14137,14133,14131
<14131=14132
<14133=14134
<14134=14136,14135
<14137=14138
<14139=14140
<14141=14142
<14143=14144
<14145=14146
<14146=14155,14154,14147
<14147=14153,14148
<14148=14152,14149
<14149=14151,14150
<14156=14157
<14157=14173,14172,14158
<14158=14171,14159
<14159=14169,14160
<14160=14167,14165,14161
<14161=14162
<14162=14164,14163
<14165=14166
<14167=14168
<14169=14170
<14174=14175
<14175=14177,14176
<14178=14179
<14179=14190,14180
<14180=14188,14181
<14181=14186,14184,14182
<14182=14183
<14184=14185
<14186=14187
<14188=14189
<14191=14192
<14192=14207,14206,14193
<14193=14205,14194
<14194=14204,14195
<14195=14201,14196
<14196=14200,14197
<14197=14199,14198
<14201=14203,14202
<14208=14209
<14209=14224,14223,14210
<14210=14222,14211
<14211=14221,14212
<14212=14218,14213
<14213=14217,14214
<14214=14216,14215
<14218=14220,14219
<14225=14226
<14226=14236,14227
<14227=14230,14228
<14228=14229
<14230=14231
<14231=14233,14232
<14233=14235,14234
<14236=14237
<14237=14239,14238
<14240=14241
<14241=14244,14243,14242
<14245=14246
<14246=14259,14258,14247
<14247=14257,14248
<14248=14256,14249
<14249=14255,14250
<14250=14252,14251
<14252=14254,14253
<14260=14271,14261
<14261=14270,14269,14268,14267,14266,14265,14264,14263,14262
<14271=14272
<14272=14276,14273
<14273=14275,14274
<14277=14313,14309,14306,14278
<14278=14279
<14279=14294,14280
<14280=14282,14281
<14282=14283
<14283=14293,14284
<14284=14286,14285
<14286=14288,14287
<14288=14290,14289
<14290=14292,14291
<14294=14295
<14295=14297,14296
<14297=14299,14298
<14299=14301,14300
<14301=14303,14302
<14303=14305,14304
<14306=14308,14307
<14309=14310
<14310=14312,14311
<14313=14314
<14314=14315
<14315=14320,14319,14316
<14316=14318,14317
<14321=14322
<14322=14338,14337,14323
<14323=14336,14324
<14324=14335,14325
<14325=14327,14326
<14327=14328
<14328=14330,14329
<14330=14332,14331
<14332=14334,14333
<14339=14340
<14340=14347,14346,14341
<14341=14345,14342
<14342=14344,14343
<14348=14349
<14349=14356,14355,14350
<14350=14354,14351
<14351=14353,14352
<14357=14359,14358
<14360=14361
<14361=14363,14362
<14364=14365
<14365=14366
<14366=14371,14370,14367
<14367=14369,14368
<14372=14373
<14373=14385,14384,14374
<14374=14383,14375
<14375=14382,14376
<14376=14378,14377
<14378=14379
<14379=14381,14380
<14386=14387
<14387=14396,14388
<14388=14394,14389
<14389=14392,14390
<14390=14391
<14392=14393
<14394=14395
<14397=14413,14407,14404,14398
<14398=14399
<14399=14401,14400
<14401=14403,14402
<14404=14406,14405
<14407=14408
<14408=14412,14409
<14409=14411,14410
<14413=14414
<14414=14415
<14415=14420,14419,14416
<14416=14418,14417
<14421=14422
<14422=14429,14428,14423
<14423=14427,14424
<14424=14426,14425
<14430=14431
<14431=14447,14446,14432
<14432=14445,14433
<14433=14443,14434
<14434=14435
<14435=14436
<14436=14438,14437
<14438=14440,14439
<14440=14442,14441
<14443=14444
<14448=14449
<14449=14465,14464,14450
<14450=14463,14451
<14451=14461,14452
<14452=14453
<14453=14454
<14454=14456,14455
<14456=14458,14457
<14458=14460,14459
<14461=14462
<14466=14467
<14467=14471,14468
<14468=14470,14469
<14472=14473
<14473=14484,14483,14474
<14474=14482,14475
<14475=14479,14476
<14476=14478,14477
<14479=14481,14480
<14485=14486
<14486=14502,14501,14487
<14487=14500,14488
<14488=14498,14489
<14489=14494,14490
<14490=14491
<14491=14493,14492
<14494=14495
<14495=14497,14496
<14498=14499
<14503=14504
<14504=14506,14505
<14507=14508
<14508=14510,14509
<14510=14511
<14512=14513
<14513=14517,14514
<14514=14515
<14515=14516
<14517=14518
<14519=14531,14520
<14520=14522,14521
<14522=14523
<14523=14530,14524
<14524=14528,14525
<14525=14526
<14526=14527
<14528=14529
<14531=14532
<14532=14536,14533
<14533=14534
<14534=14535
<14536=14537
<14538=14539
<14539=14541,14540
<14541=14545,14542
<14542=14544,14543
<14546=14547
<14547=14549,14548
<14549=14553,14550
<14550=14552,14551
<14554=14555
<14555=14557,14556
<14557=14561,14558
<14558=14560,14559
<14562=14563
<14563=14565,14564
<14565=14569,14566
<14566=14568,14567
<14570=14571
<14571=14573,14572
<14573=14577,14574
<14574=14576,14575
<14578=14579
<14579=14581,14580
<14581=14585,14582
<14582=14584,14583
<14586=14587
<14587=14589,14588
<14589=14593,14590
<14590=14592,14591
<14594=14595
<14595=14605,14604,14596
<14596=14603,14597
<14597=14601,14598
<14598=14599
<14599=14600
<14601=14602
<14606=14607
<14607=14613,14608
<14608=14611,14609
<14609=14610
<14611=14612
<14613=14614
<14615=14616
<14616=14619,14618,14617
<14702=14705,14704,14703
<14705=14805,14796,14784,14776,14768,14760,14752,14744,14736,14728,14708,14706
<14706=14707
<14708=14721,14709
<14709=14712,14710
<14710=14711
<14712=14713
<14713=14720,14714
<14714=14718,14715
<14715=14716
<14716=14717
<14718=14719
<14721=14722
<14722=14726,14723
<14723=14724
<14724=14725
<14726=14727
<14728=14729
<14729=14731,14730
<14731=14735,14732
<14732=14734,14733
<14736=14737
<14737=14739,14738
<14739=14743,14740
<14740=14742,14741
<14744=14745
<14745=14747,14746
<14747=14751,14748
<14748=14750,14749
<14752=14753
<14753=14755,14754
<14755=14759,14756
<14756=14758,14757
<14760=14761
<14761=14763,14762
<14763=14767,14764
<14764=14766,14765
<14768=14769
<14769=14771,14770
<14771=14775,14772
<14772=14774,14773
<14776=14777
<14777=14779,14778
<14779=14783,14780
<14780=14782,14781
<14784=14785
<14785=14795,14794,14786
<14786=14793,14787
<14787=14791,14788
<14788=14789
<14789=14790
<14791=14792
<14796=14797
<14797=14803,14798
<14798=14801,14799
<14799=14800
<14801=14802
<14803=14804
<14805=14806
<14806=14809,14808,14807
<14824=14827,14826,14825
<14827=14914,14905,14893,14885,14877,14869,14861,14853,14845,14837,14828
<14828=14829
<14829=14835,14830
<14830=14833,14831
<14831=14832
<14833=14834
<14835=14836
<14837=14838
<14838=14840,14839
<14840=14844,14841
<14841=14843,14842
<14845=14846
<14846=14848,14847
<14848=14852,14849
<14849=14851,14850
<14853=14854
<14854=14856,14855
<14856=14860,14857
<14857=14859,14858
<14861=14862
<14862=14864,14863
<14864=14868,14865
<14865=14867,14866
<14869=14870
<14870=14872,14871
<14872=14876,14873
<14873=14875,14874
<14877=14878
<14878=14880,14879
<14880=14884,14881
<14881=14883,14882
<14885=14886
<14886=14888,14887
<14888=14892,14889
<14889=14891,14890
<14893=14894
<14894=14904,14903,14895
<14895=14902,14896
<14896=14900,14897
<14897=14898
<14898=14899
<14900=14901
<14905=14906
<14906=14912,14907
<14907=14910,14908
<14908=14909
<14910=14911
<14912=14913
<14914=14915
<14915=14918,14917,14916
<14929=14941,14940,14930
<14930=14937,14934,14931
<14931=14933,14932
<14934=14936,14935
<14937=14939,14938
<14941=15575,15568,15563,15559,15541,15528,15522,15504,15486,15477,15453,15442,15428,15414,15056,14962,14957,14956,14955,14954,14952,14947,14942
<14942=14943
<14943=14945,14944
<14945=14946
<14947=14948
<14948=14950,14949
<14950=14951
<14952=14953
<14957=14958
<14958=14960,14959
<14960=14961
<14962=15048,15044,15041,14963
<14963=14964
<14964=15033,15029,15026,14965
<14965=15015,14997,14983,14966
<14966=14967
<14967=14981,14968
<14968=14979,14977,14975,14973,14971,14969
<14969=14970
<14971=14972
<14973=14974
<14975=14976
<14977=14978
<14979=14980
<14981=14982
<14983=14984
<14984=14996,14995,14985
<14985=14994,14986
<14986=14992,14987
<14987=14988
<14988=14989
<14989=14991,14990
<14992=14993
<14997=14998
<14998=15014,15013,14999
<14999=15012,15000
<15000=15010,15001
<15001=15006,15004,15002
<15002=15003
<15004=15005
<15006=15007
<15007=15009,15008
<15010=15011
<15015=15016
<15016=15025,15024,15017
<15017=15023,15018
<15018=15020,15019
<15020=15022,15021
<15026=15028,15027
<15029=15030
<15030=15032,15031
<15033=15034
<15034=15035
<15035=15040,15039,15036
<15036=15038,15037
<15041=15043,15042
<15044=15045
<15045=15047,15046
<15048=15049
<15049=15050
<15050=15055,15054,15051
<15051=15053,15052
<15056=15406,15402,15399,15057
<15057=15390,15381,15363,15319,15302,15287,15268,15249,15236,15232,15214,15203,15186,15063,15062,15061,15060,15058
<15058=15059
<15063=15174,15168,15165,15064
<15064=15065
<15065=15153,15147,15144,15066
<15066=15123,15109,15095,15077,15067
<15067=15068
<15068=15070,15069
<15070=15076,15071
<15071=15073,15072
<15073=15075,15074
<15077=15079,15078
<15079=15080
<15080=15092,15081
<15081=15089,15082
<15082=15086,15083
<15083=15085,15084
<15086=15088,15087
<15089=15091,15090
<15092=15094,15093
<15095=15096
<15096=15108,15107,15097
<15097=15106,15098
<15098=15104,15099
<15099=15100
<15100=15101
<15101=15103,15102
<15104=15105
<15109=15110
<15110=15122,15121,15111
<15111=15120,15112
<15112=15118,15113
<15113=15114
<15114=15115
<15115=15117,15116
<15118=15119
<15123=15124
<15124=15143,15142,15125
<15125=15141,15126
<15126=15134,15127
<15127=15133,15128
<15128=15132,15129
<15129=15131,15130
<15134=15140,15135
<15135=15139,15136
<15136=15138,15137
<15144=15146,15145
<15147=15148
<15148=15152,15149
<15149=15151,15150
<15153=15154
<15154=15155
<15155=15164,15163,15156
<15156=15162,15157
<15157=15159,15158
<15159=15161,15160
<15165=15167,15166
<15168=15169
<15169=15173,15170
<15170=15172,15171
<15174=15175
<15175=15176
<15176=15185,15184,15177
<15177=15183,15178
<15178=15180,15179
<15180=15182,15181
<15186=15187
<15187=15201,15188
<15188=15199,15197,15195,15191,15189
<15189=15190
<15191=15192
<15192=15194,15193
<15195=15196
<15197=15198
<15199=15200
<15201=15202
<15203=15204
<15204=15213,15212,15205
<15205=15211,15206
<15206=15210,15207
<15207=15209,15208
<15214=15215
<15215=15231,15230,15216
<15216=15229,15217
<15217=15227,15218
<15218=15225,15223,15219
<15219=15220
<15220=15222,15221
<15223=15224
<15225=15226
<15227=15228
<15232=15233
<15233=15235,15234
<15236=15237
<15237=15248,15238
<15238=15246,15239
<15239=15244,15242,15240
<15240=15241
<15242=15243
<15244=15245
<15246=15247
<15249=15250
<15250=15267,15266,15251
<15251=15265,15252
<15252=15264,15253
<15253=15259,15254
<15254=15258,15255
<15255=15257,15256
<15259=15261,15260
<15261=15263,15262
<15268=15269
<15269=15286,15285,15270
<15270=15284,15271
<15271=15283,15272
<15272=15278,15273
<15273=15277,15274
<15274=15276,15275
<15278=15280,15279
<15280=15282,15281
<15287=15288
<15288=15301,15300,15289
<15289=15299,15290
<15290=15298,15291
<15291=15297,15292
<15292=15294,15293
<15294=15296,15295
<15302=15313,15303
<15303=15312,15311,15310,15309,15308,15307,15306,15305,15304
<15313=15314
<15314=15318,15315
<15315=15317,15316
<15319=15355,15351,15348,15320
<15320=15321
<15321=15336,15322
<15322=15324,15323
<15324=15325
<15325=15335,15326
<15326=15328,15327
<15328=15330,15329
<15330=15332,15331
<15332=15334,15333
<15336=15337
<15337=15339,15338
<15339=15341,15340
<15341=15343,15342
<15343=15345,15344
<15345=15347,15346
<15348=15350,15349
<15351=15352
<15352=15354,15353
<15355=15356
<15356=15357
<15357=15362,15361,15358
<15358=15360,15359
<15363=15364
<15364=15380,15379,15365
<15365=15378,15366
<15366=15377,15367
<15367=15369,15368
<15369=15370
<15370=15372,15371
<15372=15374,15373
<15374=15376,15375
<15381=15382
<15382=15389,15388,15383
<15383=15387,15384
<15384=15386,15385
<15390=15391
<15391=15398,15397,15392
<15392=15396,15393
<15393=15395,15394
<15399=15401,15400
<15402=15403
<15403=15405,15404
<15406=15407
<15407=15408
<15408=15413,15412,15409
<15409=15411,15410
<15414=15415
<15415=15427,15426,15416
<15416=15425,15417
<15417=15424,15418
<15418=15420,15419
<15420=15421
<15421=15423,15422
<15428=15429
<15429=15441,15440,15430
<15430=15439,15431
<15431=15437,15432
<15432=15435,15433
<15433=15434
<15435=15436
<15437=15438
<15442=15443
<15443=15452,15444
<15444=15450,15445
<15445=15448,15446
<15446=15447
<15448=15449
<15450=15451
<15453=15469,15463,15460,15454
<15454=15455
<15455=15457,15456
<15457=15459,15458
<15460=15462,15461
<15463=15464
<15464=15468,15465
<15465=15467,15466
<15469=15470
<15470=15471
<15471=15476,15475,15472
<15472=15474,15473
<15477=15478
<15478=15485,15484,15479
<15479=15483,15480
<15480=15482,15481
<15486=15487
<15487=15503,15502,15488
<15488=15501,15489
<15489=15499,15490
<15490=15491
<15491=15492
<15492=15494,15493
<15494=15496,15495
<15496=15498,15497
<15499=15500
<15504=15505
<15505=15521,15520,15506
<15506=15519,15507
<15507=15517,15508
<15508=15509
<15509=15510
<15510=15512,15511
<15512=15514,15513
<15514=15516,15515
<15517=15518
<15522=15523
<15523=15527,15524
<15524=15526,15525
<15528=15529
<15529=15540,15539,15530
<15530=15538,15531
<15531=15535,15532
<15532=15534,15533
<15535=15537,15536
<15541=15542
<15542=15558,15557,15543
<15543=15556,15544
<15544=15554,15545
<15545=15550,15546
<15546=15547
<15547=15549,15548
<15550=15551
<15551=15553,15552
<15554=15555
<15559=15560
<15560=15562,15561
<15563=15564
<15564=15566,15565
<15566=15567
<15568=15569
<15569=15573,15570
<15570=15571
<15571=15572
<15573=15574
<15575=15577,15576
<15577=15578
<15578=15580,15579
<15580=15581
<15658=15664,15663,15659
<15659=15660
<15660=15662,15661
<15664=15834,15824,15810,15806,15797,15734,15690,15680,15665
<15665=15666
<15666=15678,15667
<15667=15676,15668
<15668=15669
<15669=15671,15670
<15671=15675,15672
<15672=15674,15673
<15676=15677
<15678=15679
<15680=15681
<15681=15689,15688,15682
<15682=15687,15683
<15683=15685,15684
<15685=15686
<15690=15691
<15691=15731,15692
<15692=15729,15693
<15693=15727,15723,15706,15700,15694
<15694=15695
<15695=15699,15696
<15696=15698,15697
<15700=15701
<15701=15705,15702
<15702=15704,15703
<15706=15707
<15707=15722,15708
<15708=15720,15709
<15709=15715,15710
<15710=15711
<15711=15713,15712
<15713=15714
<15715=15716
<15716=15718,15717
<15718=15719
<15720=15721
<15723=15724
<15724=15726,15725
<15727=15728
<15729=15730
<15731=15733,15732
<15734=15789,15785,15782,15735
<15735=15773,15768,15753,15736
<15736=15737
<15737=15750,15738
<15738=15748,15739
<15739=15744,15740
<15740=15741
<15741=15743,15742
<15744=15745
<15745=15747,15746
<15748=15749
<15750=15752,15751
<15753=15754
<15754=15764,15755
<15755=15758,15756
<15756=15757
<15758=15759
<15759=15761,15760
<15761=15763,15762
<15764=15765
<15765=15767,15766
<15768=15769
<15769=15772,15771,15770
<15773=15774
<15774=15781,15780,15775
<15775=15779,15776
<15776=15778,15777
<15782=15784,15783
<15785=15786
<15786=15788,15787
<15789=15790
<15790=15791
<15791=15796,15795,15792
<15792=15794,15793
<15797=15798
<15798=15802,15799
<15799=15800
<15800=15801
<15802=15803
<15803=15805,15804
<15806=15807
<15807=15809,15808
<15810=15811
<15811=15823,15822,15812
<15812=15821,15813
<15813=15820,15814
<15814=15816,15815
<15816=15817
<15817=15819,15818
<15824=15825
<15825=15833,15832,15826
<15826=15831,15827
<15827=15829,15828
<15829=15830
<15834=15835
<15835=15841,15836
<15836=15839,15837
<15837=15838
<15839=15840
<15841=15842
<15878=15881,15880,15879
<15881=15882
<15882=15883
<15883=15885,15884
<15885=15886
<15886=15888,15887
<15893=15908,15907,15894
<15894=15904,15901,15898,15895
<15895=15897,15896
<15898=15900,15899
<15901=15903,15902
<15904=15906,15905
<15908=16388,16370,16361,16352,15998,15979,15944,15909
<15909=15936,15932,15929,15910
<15910=15923,15917,15911
<15911=15912
<15912=15914,15913
<15914=15916,15915
<15917=15918
<15918=15920,15919
<15920=15922,15921
<15923=15924
<15924=15926,15925
<15926=15928,15927
<15929=15931,15930
<15932=15933
<15933=15935,15934
<15936=15937
<15937=15938
<15938=15943,15942,15939
<15939=15941,15940
<15944=15971,15967,15964,15945
<15945=15958,15952,15946
<15946=15947
<15947=15951,15948
<15948=15950,15949
<15952=15953
<15953=15957,15954
<15954=15956,15955
<15958=15959
<15959=15963,15960
<15960=15962,15961
<15964=15966,15965
<15967=15968
<15968=15970,15969
<15971=15972
<15972=15973
<15973=15978,15977,15974
<15974=15976,15975
<15979=15992,15986,15980
<15980=15985,15984,15981
<15981=15983,15982
<15986=15991,15990,15987
<15987=15989,15988
<15992=15997,15996,15993
<15993=15995,15994
<15998=16344,16340,16337,15999
<15999=16000
<16000=16329,16325,16322,16001
<16001=16306,16290,16279,16266,16253,16240,16223,16206,16189,16180,16171,16162,16151,16140,16129,16122,16116,16082,16076,16042,16036,16002
<16002=16030,16023,16003
<16003=16004
<16004=16013,16005
<16005=16006
<16006=16010,16007
<16007=16009,16008
<16010=16012,16011
<16013=16014
<16014=16020,16015
<16015=16019,16016
<16016=16018,16017
<16020=16022,16021
<16023=16024
<16024=16025
<16025=16027,16026
<16027=16029,16028
<16030=16031
<16031=16035,16032
<16032=16034,16033
<16036=16037
<16037=16041,16038
<16038=16040,16039
<16042=16070,16063,16043
<16043=16044
<16044=16053,16045
<16045=16046
<16046=16050,16047
<16047=16049,16048
<16050=16052,16051
<16053=16054
<16054=16060,16055
<16055=16059,16056
<16056=16058,16057
<16060=16062,16061
<16063=16064
<16064=16065
<16065=16067,16066
<16067=16069,16068
<16070=16071
<16071=16075,16072
<16072=16074,16073
<16076=16077
<16077=16081,16078
<16078=16080,16079
<16082=16110,16103,16083
<16083=16084
<16084=16093,16085
<16085=16086
<16086=16090,16087
<16087=16089,16088
<16090=16092,16091
<16093=16094
<16094=16100,16095
<16095=16099,16096
<16096=16098,16097
<16100=16102,16101
<16103=16104
<16104=16105
<16105=16107,16106
<16107=16109,16108
<16110=16111
<16111=16115,16112
<16112=16114,16113
<16116=16117
<16117=16121,16118
<16118=16120,16119
<16122=16123
<16123=16128,16127,16124
<16124=16126,16125
<16129=16130
<16130=16138,16131
<16131=16132
<16132=16133
<16133=16137,16134
<16134=16136,16135
<16138=16139
<16140=16141
<16141=16149,16142
<16142=16143
<16143=16144
<16144=16148,16145
<16145=16147,16146
<16149=16150
<16151=16152
<16152=16160,16153
<16153=16154
<16154=16155
<16155=16159,16156
<16156=16158,16157
<16160=16161
<16162=16163
<16163=16170,16169,16164
<16164=16168,16165
<16165=16167,16166
<16171=16172
<16172=16179,16178,16173
<16173=16177,16174
<16174=16176,16175
<16180=16181
<16181=16188,16187,16182
<16182=16186,16183
<16183=16185,16184
<16189=16190
<16190=16205,16204,16191
<16191=16203,16192
<16192=16201,16193
<16193=16194
<16194=16195
<16195=16199,16196
<16196=16197
<16197=16198
<16199=16200
<16201=16202
<16206=16207
<16207=16222,16221,16208
<16208=16220,16209
<16209=16218,16210
<16210=16211
<16211=16212
<16212=16216,16213
<16213=16214
<16214=16215
<16216=16217
<16218=16219
<16223=16224
<16224=16239,16238,16225
<16225=16237,16226
<16226=16235,16227
<16227=16228
<16228=16229
<16229=16233,16230
<16230=16231
<16231=16232
<16233=16234
<16235=16236
<16240=16241
<16241=16252,16251,16242
<16242=16250,16243
<16243=16247,16244
<16244=16246,16245
<16247=16249,16248
<16253=16254
<16254=16265,16264,16255
<16255=16263,16256
<16256=16260,16257
<16257=16259,16258
<16260=16262,16261
<16266=16267
<16267=16278,16277,16268
<16268=16276,16269
<16269=16273,16270
<16270=16272,16271
<16273=16275,16274
<16279=16280
<16280=16289,16288,16281
<16281=16287,16282
<16282=16284,16283
<16284=16286,16285
<16290=16291
<16291=16305,16304,16292
<16292=16303,16293
<16293=16301,16294
<16294=16299,16297,16295
<16295=16296
<16297=16298
<16299=16300
<16301=16302
<16306=16307
<16307=16321,16320,16308
<16308=16319,16309
<16309=16317,16310
<16310=16315,16313,16311
<16311=16312
<16313=16314
<16315=16316
<16317=16318
<16322=16324,16323
<16325=16326
<16326=16328,16327
<16329=16330
<16330=16331
<16331=16336,16335,16332
<16332=16334,16333
<16337=16339,16338
<16340=16341
<16341=16343,16342
<16344=16345
<16345=16346
<16346=16351,16350,16347
<16347=16349,16348
<16352=16353
<16353=16360,16359,16354
<16354=16358,16355
<16355=16357,16356
<16361=16362
<16362=16369,16368,16363
<16363=16367,16364
<16364=16366,16365
<16370=16381,16371
<16371=16380,16379,16378,16377,16376,16375,16374,16373,16372
<16381=16382
<16382=16387,16383
<16383=16385,16384
<16385=16386
<16388=16389
<16389=16391,16390
<16391=16392
<16444=16459,16458,16445
<16445=16455,16452,16449,16446
<16446=16448,16447
<16449=16451,16450
<16452=16454,16453
<16455=16457,16456
<16459=17123,17105,17096,17087,17080,17073,17064,17057,17048,17041,16549,16530,16495,16460
<16460=16487,16483,16480,16461
<16461=16474,16468,16462
<16462=16463
<16463=16465,16464
<16465=16467,16466
<16468=16469
<16469=16471,16470
<16471=16473,16472
<16474=16475
<16475=16477,16476
<16477=16479,16478
<16480=16482,16481
<16483=16484
<16484=16486,16485
<16487=16488
<16488=16489
<16489=16494,16493,16490
<16490=16492,16491
<16495=16522,16518,16515,16496
<16496=16509,16503,16497
<16497=16498
<16498=16502,16499
<16499=16501,16500
<16503=16504
<16504=16508,16505
<16505=16507,16506
<16509=16510
<16510=16514,16511
<16511=16513,16512
<16515=16517,16516
<16518=16519
<16519=16521,16520
<16522=16523
<16523=16524
<16524=16529,16528,16525
<16525=16527,16526
<16530=16543,16537,16531
<16531=16536,16535,16532
<16532=16534,16533
<16537=16542,16541,16538
<16538=16540,16539
<16543=16548,16547,16544
<16544=16546,16545
<16549=17033,17029,17026,16550
<16550=16551
<16551=17018,17014,17011,16552
<16552=16995,16979,16969,16940,16922,16904,16886,16875,16862,16849,16836,16821,16806,16791,16774,16757,16740,16731,16722,16713,16702,16691,16680,16673,16667,16633,16627,16593,16587,16553
<16553=16581,16574,16554
<16554=16555
<16555=16564,16556
<16556=16557
<16557=16561,16558
<16558=16560,16559
<16561=16563,16562
<16564=16565
<16565=16571,16566
<16566=16570,16567
<16567=16569,16568
<16571=16573,16572
<16574=16575
<16575=16576
<16576=16578,16577
<16578=16580,16579
<16581=16582
<16582=16586,16583
<16583=16585,16584
<16587=16588
<16588=16592,16589
<16589=16591,16590
<16593=16621,16614,16594
<16594=16595
<16595=16604,16596
<16596=16597
<16597=16601,16598
<16598=16600,16599
<16601=16603,16602
<16604=16605
<16605=16611,16606
<16606=16610,16607
<16607=16609,16608
<16611=16613,16612
<16614=16615
<16615=16616
<16616=16618,16617
<16618=16620,16619
<16621=16622
<16622=16626,16623
<16623=16625,16624
<16627=16628
<16628=16632,16629
<16629=16631,16630
<16633=16661,16654,16634
<16634=16635
<16635=16644,16636
<16636=16637
<16637=16641,16638
<16638=16640,16639
<16641=16643,16642
<16644=16645
<16645=16651,16646
<16646=16650,16647
<16647=16649,16648
<16651=16653,16652
<16654=16655
<16655=16656
<16656=16658,16657
<16658=16660,16659
<16661=16662
<16662=16666,16663
<16663=16665,16664
<16667=16668
<16668=16672,16669
<16669=16671,16670
<16673=16674
<16674=16679,16678,16675
<16675=16677,16676
<16680=16681
<16681=16689,16682
<16682=16683
<16683=16684
<16684=16688,16685
<16685=16687,16686
<16689=16690
<16691=16692
<16692=16700,16693
<16693=16694
<16694=16695
<16695=16699,16696
<16696=16698,16697
<16700=16701
<16702=16703
<16703=16711,16704
<16704=16705
<16705=16706
<16706=16710,16707
<16707=16709,16708
<16711=16712
<16713=16714
<16714=16721,16720,16715
<16715=16719,16716
<16716=16718,16717
<16722=16723
<16723=16730,16729,16724
<16724=16728,16725
<16725=16727,16726
<16731=16732
<16732=16739,16738,16733
<16733=16737,16734
<16734=16736,16735
<16740=16741
<16741=16756,16755,16742
<16742=16754,16743
<16743=16752,16744
<16744=16745
<16745=16746
<16746=16750,16747
<16747=16748
<16748=16749
<16750=16751
<16752=16753
<16757=16758
<16758=16773,16772,16759
<16759=16771,16760
<16760=16769,16761
<16761=16762
<16762=16763
<16763=16767,16764
<16764=16765
<16765=16766
<16767=16768
<16769=16770
<16774=16775
<16775=16790,16789,16776
<16776=16788,16777
<16777=16786,16778
<16778=16779
<16779=16780
<16780=16784,16781
<16781=16782
<16782=16783
<16784=16785
<16786=16787
<16791=16792
<16792=16805,16793
<16793=16795,16794
<16795=16803,16796
<16796=16801,16799,16797
<16797=16798
<16799=16800
<16801=16802
<16803=16804
<16806=16807
<16807=16820,16808
<16808=16810,16809
<16810=16818,16811
<16811=16816,16814,16812
<16812=16813
<16814=16815
<16816=16817
<16818=16819
<16821=16822
<16822=16835,16823
<16823=16825,16824
<16825=16833,16826
<16826=16831,16829,16827
<16827=16828
<16829=16830
<16831=16832
<16833=16834
<16836=16837
<16837=16848,16847,16838
<16838=16846,16839
<16839=16843,16840
<16840=16842,16841
<16843=16845,16844
<16849=16850
<16850=16861,16860,16851
<16851=16859,16852
<16852=16856,16853
<16853=16855,16854
<16856=16858,16857
<16862=16863
<16863=16874,16873,16864
<16864=16872,16865
<16865=16869,16866
<16866=16868,16867
<16869=16871,16870
<16875=16876
<16876=16885,16884,16877
<16877=16883,16878
<16878=16880,16879
<16880=16882,16881
<16886=16896,16887
<16887=16888
<16888=16894,16889
<16889=16892,16890
<16890=16891
<16892=16893
<16894=16895
<16896=16897
<16897=16901,16898
<16898=16900,16899
<16901=16903,16902
<16904=16914,16905
<16905=16906
<16906=16912,16907
<16907=16910,16908
<16908=16909
<16910=16911
<16912=16913
<16914=16915
<16915=16919,16916
<16916=16918,16917
<16919=16921,16920
<16922=16932,16923
<16923=16924
<16924=16930,16925
<16925=16928,16926
<16926=16927
<16928=16929
<16930=16931
<16932=16933
<16933=16937,16934
<16934=16936,16935
<16937=16939,16938
<16940=16941
<16941=16967,16942
<16942=16963,16959,16955,16951,16947,16943
<16943=16944
<16944=16946,16945
<16947=16948
<16948=16950,16949
<16951=16952
<16952=16954,16953
<16955=16956
<16956=16958,16957
<16959=16960
<16960=16962,16961
<16963=16964
<16964=16966,16965
<16967=16968
<16969=16976,16973,16970
<16970=16972,16971
<16973=16975,16974
<16976=16978,16977
<16979=16980
<16980=16994,16993,16981
<16981=16992,16982
<16982=16990,16983
<16983=16988,16986,16984
<16984=16985
<16986=16987
<16988=16989
<16990=16991
<16995=16996
<16996=17010,17009,16997
<16997=17008,16998
<16998=17006,16999
<16999=17004,17002,17000
<17000=17001
<17002=17003
<17004=17005
<17006=17007
<17011=17013,17012
<17014=17015
<17015=17017,17016
<17018=17019
<17019=17020
<17020=17025,17024,17021
<17021=17023,17022
<17026=17028,17027
<17029=17030
<17030=17032,17031
<17033=17034
<17034=17035
<17035=17040,17039,17036
<17036=17038,17037
<17041=17042
<17042=17047,17046,17043
<17043=17045,17044
<17048=17049
<17049=17056,17055,17050
<17050=17054,17051
<17051=17053,17052
<17057=17058
<17058=17063,17062,17059
<17059=17061,17060
<17064=17065
<17065=17072,17071,17066
<17066=17070,17067
<17067=17069,17068
<17073=17074
<17074=17079,17078,17075
<17075=17077,17076
<17080=17081
<17081=17086,17085,17082
<17082=17084,17083
<17087=17088
<17088=17095,17094,17089
<17089=17093,17090
<17090=17092,17091
<17096=17097
<17097=17104,17103,17098
<17098=17102,17099
<17099=17101,17100
<17105=17116,17106
<17106=17115,17114,17113,17112,17111,17110,17109,17108,17107
<17116=17117
<17117=17122,17118
<17118=17120,17119
<17120=17121
<17123=17124
<17124=17126,17125
<17126=17127
<17192=17207,17206,17193
<17193=17203,17200,17197,17194
<17194=17196,17195
<17197=17199,17198
<17200=17202,17201
<17203=17205,17204
<17207=18178,18160,18151,18142,18135,18128,18121,18114,17976,17967,17958,17949,17941,17789,17773,17757,17741,17297,17278,17243,17208
<17208=17235,17231,17228,17209
<17209=17222,17216,17210
<17210=17211
<17211=17213,17212
<17213=17215,17214
<17216=17217
<17217=17219,17218
<17219=17221,17220
<17222=17223
<17223=17225,17224
<17225=17227,17226
<17228=17230,17229
<17231=17232
<17232=17234,17233
<17235=17236
<17236=17237
<17237=17242,17241,17238
<17238=17240,17239
<17243=17270,17266,17263,17244
<17244=17257,17251,17245
<17245=17246
<17246=17250,17247
<17247=17249,17248
<17251=17252
<17252=17256,17253
<17253=17255,17254
<17257=17258
<17258=17262,17259
<17259=17261,17260
<17263=17265,17264
<17266=17267
<17267=17269,17268
<17270=17271
<17271=17272
<17272=17277,17276,17273
<17273=17275,17274
<17278=17291,17285,17279
<17279=17284,17283,17280
<17280=17282,17281
<17285=17290,17289,17286
<17286=17288,17287
<17291=17296,17295,17292
<17292=17294,17293
<17297=17733,17729,17726,17298
<17298=17299
<17299=17718,17714,17711,17300
<17300=17695,17679,17669,17640,17627,17614,17601,17590,17573,17556,17539,17522,17505,17488,17479,17470,17461,17450,17439,17428,17421,17415,17381,17375,17341,17335,17301
<17301=17329,17322,17302
<17302=17303
<17303=17312,17304
<17304=17305
<17305=17309,17306
<17306=17308,17307
<17309=17311,17310
<17312=17313
<17313=17319,17314
<17314=17318,17315
<17315=17317,17316
<17319=17321,17320
<17322=17323
<17323=17324
<17324=17326,17325
<17326=17328,17327
<17329=17330
<17330=17334,17331
<17331=17333,17332
<17335=17336
<17336=17340,17337
<17337=17339,17338
<17341=17369,17362,17342
<17342=17343
<17343=17352,17344
<17344=17345
<17345=17349,17346
<17346=17348,17347
<17349=17351,17350
<17352=17353
<17353=17359,17354
<17354=17358,17355
<17355=17357,17356
<17359=17361,17360
<17362=17363
<17363=17364
<17364=17366,17365
<17366=17368,17367
<17369=17370
<17370=17374,17371
<17371=17373,17372
<17375=17376
<17376=17380,17377
<17377=17379,17378
<17381=17409,17402,17382
<17382=17383
<17383=17392,17384
<17384=17385
<17385=17389,17386
<17386=17388,17387
<17389=17391,17390
<17392=17393
<17393=17399,17394
<17394=17398,17395
<17395=17397,17396
<17399=17401,17400
<17402=17403
<17403=17404
<17404=17406,17405
<17406=17408,17407
<17409=17410
<17410=17414,17411
<17411=17413,17412
<17415=17416
<17416=17420,17417
<17417=17419,17418
<17421=17422
<17422=17427,17426,17423
<17423=17425,17424
<17428=17429
<17429=17437,17430
<17430=17431
<17431=17432
<17432=17436,17433
<17433=17435,17434
<17437=17438
<17439=17440
<17440=17448,17441
<17441=17442
<17442=17443
<17443=17447,17444
<17444=17446,17445
<17448=17449
<17450=17451
<17451=17459,17452
<17452=17453
<17453=17454
<17454=17458,17455
<17455=17457,17456
<17459=17460
<17461=17462
<17462=17469,17468,17463
<17463=17467,17464
<17464=17466,17465
<17470=17471
<17471=17478,17477,17472
<17472=17476,17473
<17473=17475,17474
<17479=17480
<17480=17487,17486,17481
<17481=17485,17482
<17482=17484,17483
<17488=17489
<17489=17504,17503,17490
<17490=17502,17491
<17491=17500,17492
<17492=17493
<17493=17494
<17494=17498,17495
<17495=17496
<17496=17497
<17498=17499
<17500=17501
<17505=17506
<17506=17521,17520,17507
<17507=17519,17508
<17508=17517,17509
<17509=17510
<17510=17511
<17511=17515,17512
<17512=17513
<17513=17514
<17515=17516
<17517=17518
<17522=17523
<17523=17538,17537,17524
<17524=17536,17525
<17525=17534,17526
<17526=17527
<17527=17528
<17528=17532,17529
<17529=17530
<17530=17531
<17532=17533
<17534=17535
<17539=17540
<17540=17555,17541
<17541=17543,17542
<17543=17553,17544
<17544=17551,17549,17545
<17545=17546
<17546=17548,17547
<17549=17550
<17551=17552
<17553=17554
<17556=17557
<17557=17572,17558
<17558=17560,17559
<17560=17570,17561
<17561=17568,17566,17562
<17562=17563
<17563=17565,17564
<17566=17567
<17568=17569
<17570=17571
<17573=17574
<17574=17589,17575
<17575=17577,17576
<17577=17587,17578
<17578=17585,17583,17579
<17579=17580
<17580=17582,17581
<17583=17584
<17585=17586
<17587=17588
<17590=17591
<17591=17600,17599,17592
<17592=17598,17593
<17593=17595,17594
<17595=17597,17596
<17601=17602
<17602=17613,17612,17603
<17603=17611,17604
<17604=17606,17605
<17606=17608,17607
<17608=17610,17609
<17614=17615
<17615=17626,17625,17616
<17616=17624,17617
<17617=17619,17618
<17619=17621,17620
<17621=17623,17622
<17627=17628
<17628=17639,17638,17629
<17629=17637,17630
<17630=17632,17631
<17632=17634,17633
<17634=17636,17635
<17640=17641
<17641=17667,17642
<17642=17663,17659,17655,17651,17647,17643
<17643=17644
<17644=17646,17645
<17647=17648
<17648=17650,17649
<17651=17652
<17652=17654,17653
<17655=17656
<17656=17658,17657
<17659=17660
<17660=17662,17661
<17663=17664
<17664=17666,17665
<17667=17668
<17669=17676,17673,17670
<17670=17672,17671
<17673=17675,17674
<17676=17678,17677
<17679=17680
<17680=17694,17693,17681
<17681=17692,17682
<17682=17690,17683
<17683=17688,17686,17684
<17684=17685
<17686=17687
<17688=17689
<17690=17691
<17695=17696
<17696=17710,17709,17697
<17697=17708,17698
<17698=17706,17699
<17699=17704,17702,17700
<17700=17701
<17702=17703
<17704=17705
<17706=17707
<17711=17713,17712
<17714=17715
<17715=17717,17716
<17718=17719
<17719=17720
<17720=17725,17724,17721
<17721=17723,17722
<17726=17728,17727
<17729=17730
<17730=17732,17731
<17733=17734
<17734=17735
<17735=17740,17739,17736
<17736=17738,17737
<17741=17742
<17742=17756,17755,17743
<17743=17754,17744
<17744=17753,17745
<17745=17751,17746
<17746=17747
<17747=17748
<17748=17750,17749
<17751=17752
<17757=17758
<17758=17772,17771,17759
<17759=17770,17760
<17760=17769,17761
<17761=17767,17762
<17762=17763
<17763=17764
<17764=17766,17765
<17767=17768
<17773=17774
<17774=17788,17787,17775
<17775=17786,17776
<17776=17785,17777
<17777=17783,17778
<17778=17779
<17779=17780
<17780=17782,17781
<17783=17784
<17789=17933,17929,17926,17790
<17790=17791
<17791=17918,17914,17911,17792
<17792=17895,17879,17869,17840,17829,17817,17805,17793
<17793=17794
<17794=17804,17795
<17795=17803,17796
<17796=17800,17797
<17797=17799,17798
<17800=17802,17801
<17805=17806
<17806=17816,17807
<17807=17815,17808
<17808=17812,17809
<17809=17811,17810
<17812=17814,17813
<17817=17818
<17818=17828,17819
<17819=17827,17820
<17820=17824,17821
<17821=17823,17822
<17824=17826,17825
<17829=17830
<17830=17839,17838,17831
<17831=17837,17832
<17832=17834,17833
<17834=17836,17835
<17840=17841
<17841=17867,17842
<17842=17863,17859,17855,17851,17847,17843
<17843=17844
<17844=17846,17845
<17847=17848
<17848=17850,17849
<17851=17852
<17852=17854,17853
<17855=17856
<17856=17858,17857
<17859=17860
<17860=17862,17861
<17863=17864
<17864=17866,17865
<17867=17868
<17869=17876,17873,17870
<17870=17872,17871
<17873=17875,17874
<17876=17878,17877
<17879=17880
<17880=17894,17893,17881
<17881=17892,17882
<17882=17890,17883
<17883=17888,17886,17884
<17884=17885
<17886=17887
<17888=17889
<17890=17891
<17895=17896
<17896=17910,17909,17897
<17897=17908,17898
<17898=17906,17899
<17899=17904,17902,17900
<17900=17901
<17902=17903
<17904=17905
<17906=17907
<17911=17913,17912
<17914=17915
<17915=17917,17916
<17918=17919
<17919=17920
<17920=17925,17924,17921
<17921=17923,17922
<17926=17928,17927
<17929=17930
<17930=17932,17931
<17933=17934
<17934=17935
<17935=17940,17939,17936
<17936=17938,17937
<17941=17942
<17942=17948,17943
<17943=17947,17944
<17944=17946,17945
<17949=17950
<17950=17957,17956,17951
<17951=17955,17952
<17952=17954,17953
<17958=17959
<17959=17966,17965,17960
<17960=17964,17961
<17961=17963,17962
<17967=17968
<17968=17975,17974,17969
<17969=17973,17970
<17970=17972,17971
<17976=18106,18102,18099,17977
<17977=17978
<17978=18091,18087,18084,17979
<17979=18068,18052,18042,18013,18002,17996,17990,17984,17980
<17980=17981
<17981=17983,17982
<17984=17985
<17985=17989,17986
<17986=17988,17987
<17990=17991
<17991=17995,17992
<17992=17994,17993
<17996=17997
<17997=18001,17998
<17998=18000,17999
<18002=18003
<18003=18012,18011,18004
<18004=18010,18005
<18005=18007,18006
<18007=18009,18008
<18013=18014
<18014=18040,18015
<18015=18036,18032,18028,18024,18020,18016
<18016=18017
<18017=18019,18018
<18020=18021
<18021=18023,18022
<18024=18025
<18025=18027,18026
<18028=18029
<18029=18031,18030
<18032=18033
<18033=18035,18034
<18036=18037
<18037=18039,18038
<18040=18041
<18042=18049,18046,18043
<18043=18045,18044
<18046=18048,18047
<18049=18051,18050
<18052=18053
<18053=18067,18066,18054
<18054=18065,18055
<18055=18063,18056
<18056=18061,18059,18057
<18057=18058
<18059=18060
<18061=18062
<18063=18064
<18068=18069
<18069=18083,18082,18070
<18070=18081,18071
<18071=18079,18072
<18072=18077,18075,18073
<18073=18074
<18075=18076
<18077=18078
<18079=18080
<18084=18086,18085
<18087=18088
<18088=18090,18089
<18091=18092
<18092=18093
<18093=18098,18097,18094
<18094=18096,18095
<18099=18101,18100
<18102=18103
<18103=18105,18104
<18106=18107
<18107=18108
<18108=18113,18112,18109
<18109=18111,18110
<18114=18115
<18115=18120,18119,18116
<18116=18118,18117
<18121=18122
<18122=18127,18126,18123
<18123=18125,18124
<18128=18129
<18129=18134,18133,18130
<18130=18132,18131
<18135=18136
<18136=18141,18140,18137
<18137=18139,18138
<18142=18143
<18143=18150,18149,18144
<18144=18148,18145
<18145=18147,18146
<18151=18152
<18152=18159,18158,18153
<18153=18157,18154
<18154=18156,18155
<18160=18171,18161
<18161=18170,18169,18168,18167,18166,18165,18164,18163,18162
<18171=18172
<18172=18177,18173
<18173=18175,18174
<18175=18176
<18178=18179
<18179=18181,18180
<18181=18182
