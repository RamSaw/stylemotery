>3	FunctionDef	NyARRasterFilter_ARToolkitThreshold 
>4	ParameterList	int i_threshold
>5	Parameter	 
>6	Identifier	i_threshold
>7	ParameterType	int
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	AssignmentExpr	this -> _threshold = i_threshold
>11	Identifier	i_threshold
>12	PtrMemberAccess	this -> _threshold
>13	Identifier	_threshold
>14	Identifier	this
>22	FunctionDef	NyARRasterFilter_ARToolkitThreshold 
>23	ParameterList	int i_threshold
>24	Parameter	 
>25	Identifier	i_threshold
>26	ParameterType	int
>27	ReturnType	void
>28	CompoundStatement	 
>29	ExpressionStatement	 
>30	AssignmentExpr	this -> _threshold = i_threshold
>31	Identifier	i_threshold
>32	PtrMemberAccess	this -> _threshold
>33	Identifier	_threshold
>34	Identifier	this
>42	FunctionDef	NyARRasterFilter_ARToolkitThreshold 
>43	ParameterList	const INyARRgbRaster & i_input , NyARBinRaster & i_output
>44	Parameter	 
>45	Identifier	i_output
>46	ParameterType	NyARBinRaster &
>47	Parameter	 
>48	Identifier	i_input
>49	ParameterType	const INyARRgbRaster &
>50	ReturnType	void
>51	CompoundStatement	 
>52	ReturnStatement	 
>53	SwitchStatement	switch ( in_buffer_reader -> getBufferType ( ) )
>54	CompoundStatement	 
>55	ExpressionStatement	 
>56	CallExpression	NyARException ( )
>57	ArgumentList	 
>58	Callee	NyARException
>59	Identifier	NyARException
>60	Statement	 
>61	Label	 
>62	Identifier	default
>63	BreakStatement	 
>64	ExpressionStatement	 
>65	CallExpression	convert32BitRgbx ( in_buf , out_buf , size )
>66	ArgumentList	in_buf
>67	Argument	size
>68	Identifier	size
>69	Argument	out_buf
>70	Identifier	out_buf
>71	Argument	in_buf
>72	Identifier	in_buf
>73	Callee	convert32BitRgbx
>74	Identifier	convert32BitRgbx
>75	Label	 
>76	Identifier	INyARBufferReader 
>77	BreakStatement	 
>78	ExpressionStatement	 
>79	CallExpression	convert24BitRgb ( in_buf , out_buf , size )
>80	ArgumentList	in_buf
>81	Argument	size
>82	Identifier	size
>83	Argument	out_buf
>84	Identifier	out_buf
>85	Argument	in_buf
>86	Identifier	in_buf
>87	Callee	convert24BitRgb
>88	Identifier	convert24BitRgb
>89	Label	 
>90	Identifier	INyARBufferReader 
>91	Label	 
>92	Identifier	INyARBufferReader 
>93	Condition	 
>94	CallExpression	in_buffer_reader -> getBufferType ( )
>95	ArgumentList	 
>96	Callee	in_buffer_reader -> getBufferType
>97	PtrMemberAccess	in_buffer_reader -> getBufferType
>98	Identifier	getBufferType
>99	Identifier	in_buffer_reader
>100	IdentifierDeclStatement	 
>101	IdentifierDecl	* size = i_output . getSize ( )
>102	AssignmentExpr	* size = i_output . getSize ( )
>103	CallExpression	i_output . getSize ( )
>104	ArgumentList	 
>105	Callee	i_output . getSize
>106	MemberAccess	i_output . getSize
>107	Identifier	getSize
>108	Identifier	i_output
>109	Identifier	size
>110	Identifier	size
>111	IdentifierDeclType	const TNyARIntSize *
>112	IdentifierDeclStatement	 
>113	IdentifierDecl	* in_buf = ( const NyAR_BYTE_t * ) in_buffer_reader -> getBuffer ( )
>114	AssignmentExpr	* in_buf = ( const NyAR_BYTE_t * ) in_buffer_reader -> getBuffer ( )
>115	CastExpression	( const NyAR_BYTE_t * ) in_buffer_reader -> getBuffer ( )
>116	CallExpression	in_buffer_reader -> getBuffer ( )
>117	ArgumentList	 
>118	Callee	in_buffer_reader -> getBuffer
>119	PtrMemberAccess	in_buffer_reader -> getBuffer
>120	Identifier	getBuffer
>121	Identifier	in_buffer_reader
>122	CastTarget	const NyAR_BYTE_t *
>123	Identifier	in_buf
>124	Identifier	in_buf
>125	IdentifierDeclType	const NyAR_BYTE_t *
>126	IdentifierDeclStatement	 
>127	IdentifierDecl	* out_buf = ( int * ) out_buffer_reader -> getBuffer ( )
>128	AssignmentExpr	* out_buf = ( int * ) out_buffer_reader -> getBuffer ( )
>129	CastExpression	( int * ) out_buffer_reader -> getBuffer ( )
>130	CallExpression	out_buffer_reader -> getBuffer ( )
>131	ArgumentList	 
>132	Callee	out_buffer_reader -> getBuffer
>133	PtrMemberAccess	out_buffer_reader -> getBuffer
>134	Identifier	getBuffer
>135	Identifier	out_buffer_reader
>136	CastTarget	int *
>137	Identifier	out_buf
>138	Identifier	out_buf
>139	IdentifierDeclType	int *
>140	ExpressionStatement	 
>141	CallExpression	NyAR_ASSERT ( TNyARIntSize 
>142	ArgumentList	TNyARIntSize 
>143	Argument	TNyARIntSize 
>144	CallExpression	TNyARIntSize 
>145	ArgumentList	i_input . getSize ( )
>146	Argument	i_output . getSize ( )
>147	CallExpression	i_output . getSize ( )
>148	ArgumentList	 
>149	Callee	i_output . getSize
>150	MemberAccess	i_output . getSize
>151	Identifier	getSize
>152	Identifier	i_output
>153	Argument	i_input . getSize ( )
>154	CallExpression	i_input . getSize ( )
>155	ArgumentList	 
>156	Callee	i_input . getSize
>157	MemberAccess	i_input . getSize
>158	Identifier	getSize
>159	Identifier	i_input
>160	Callee	TNyARIntSize 
>161	Identifier	TNyARIntSize 
>162	Callee	NyAR_ASSERT
>163	Identifier	NyAR_ASSERT
>164	ExpressionStatement	 
>165	CallExpression	NyAR_ASSERT ( checkInputType ( in_buf_type ) == true )
>166	ArgumentList	checkInputType ( in_buf_type ) == true
>167	Argument	checkInputType ( in_buf_type ) == true
>168	EqualityExpression	checkInputType ( in_buf_type ) == true
>169	Identifier	true
>170	CallExpression	checkInputType ( in_buf_type )
>171	ArgumentList	in_buf_type
>172	Argument	in_buf_type
>173	Identifier	in_buf_type
>174	Callee	checkInputType
>175	Identifier	checkInputType
>176	Callee	NyAR_ASSERT
>177	Identifier	NyAR_ASSERT
>178	ExpressionStatement	 
>179	CallExpression	NyAR_ASSERT ( out_buffer_reader -> isEqualBufferType ( INyARBufferReader 
>180	ArgumentList	out_buffer_reader -> isEqualBufferType ( INyARBufferReader 
>181	Argument	out_buffer_reader -> isEqualBufferType ( INyARBufferReader 
>182	CallExpression	out_buffer_reader -> isEqualBufferType ( INyARBufferReader 
>183	ArgumentList	INyARBufferReader 
>184	Argument	INyARBufferReader 
>185	Identifier	INyARBufferReader 
>186	Callee	out_buffer_reader -> isEqualBufferType
>187	PtrMemberAccess	out_buffer_reader -> isEqualBufferType
>188	Identifier	isEqualBufferType
>189	Identifier	out_buffer_reader
>190	Callee	NyAR_ASSERT
>191	Identifier	NyAR_ASSERT
>192	IdentifierDeclStatement	 
>193	IdentifierDecl	in_buf_type = in_buffer_reader -> getBufferType ( )
>194	AssignmentExpr	in_buf_type = in_buffer_reader -> getBufferType ( )
>195	CallExpression	in_buffer_reader -> getBufferType ( )
>196	ArgumentList	 
>197	Callee	in_buffer_reader -> getBufferType
>198	PtrMemberAccess	in_buffer_reader -> getBufferType
>199	Identifier	getBufferType
>200	Identifier	in_buffer_reader
>201	Identifier	in_buf_type
>202	Identifier	in_buf_type
>203	IdentifierDeclType	int
>204	IdentifierDeclStatement	 
>205	IdentifierDecl	* out_buffer_reader = i_output . getBufferReader ( )
>206	AssignmentExpr	* out_buffer_reader = i_output . getBufferReader ( )
>207	CallExpression	i_output . getBufferReader ( )
>208	ArgumentList	 
>209	Callee	i_output . getBufferReader
>210	MemberAccess	i_output . getBufferReader
>211	Identifier	getBufferReader
>212	Identifier	i_output
>213	Identifier	out_buffer_reader
>214	Identifier	out_buffer_reader
>215	IdentifierDeclType	const INyARBufferReader *
>216	IdentifierDeclStatement	 
>217	IdentifierDecl	* in_buffer_reader = i_input . getBufferReader ( )
>218	AssignmentExpr	* in_buffer_reader = i_input . getBufferReader ( )
>219	CallExpression	i_input . getBufferReader ( )
>220	ArgumentList	 
>221	Callee	i_input . getBufferReader
>222	MemberAccess	i_input . getBufferReader
>223	Identifier	getBufferReader
>224	Identifier	i_input
>225	Identifier	in_buffer_reader
>226	Identifier	in_buffer_reader
>227	IdentifierDeclType	const INyARBufferReader *
>253	FunctionDef	NyARRasterFilter_ARToolkitThreshold 
>254	ParameterList	const NyAR_BYTE_t * i_in , int * i_out , const TNyARIntSize * i_size
>255	Parameter	 
>256	Identifier	i_size
>257	ParameterType	const TNyARIntSize *
>258	Parameter	 
>259	Identifier	i_out
>260	ParameterType	int *
>261	Parameter	 
>262	Identifier	i_in
>263	ParameterType	const NyAR_BYTE_t *
>264	ReturnType	void
>265	CompoundStatement	 
>266	ReturnStatement	 
>267	ForStatement	for ( ; xy >= 0 ; )
>268	CompoundStatement	 
>269	ExpressionStatement	 
>270	IncDecOp	xy --
>271	IncDec	--
>272	Identifier	xy
>273	ExpressionStatement	 
>274	AssignmentExpr	bp -= 3
>275	PrimaryExpression	3
>276	Identifier	bp
>277	ExpressionStatement	 
>278	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>279	ConditionalExpression	w <= th ? 0 
>280	PrimaryExpression	1
>281	PrimaryExpression	0
>282	Condition	w <= th
>283	RelationalExpression	w <= th
>284	Identifier	th
>285	Identifier	w
>286	ArrayIndexing	i_out [ xy ]
>287	Identifier	xy
>288	Identifier	i_out
>289	ExpressionStatement	 
>290	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>291	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>292	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>293	BitAndExpression	i_in [ bp + 2 ] & 0xff
>294	PrimaryExpression	0xff
>295	ArrayIndexing	i_in [ bp + 2 ]
>296	AdditiveExpression	bp + 2
>297	PrimaryExpression	2
>298	Identifier	bp
>299	Identifier	i_in
>300	BitAndExpression	i_in [ bp + 1 ] & 0xff
>301	PrimaryExpression	0xff
>302	ArrayIndexing	i_in [ bp + 1 ]
>303	AdditiveExpression	bp + 1
>304	PrimaryExpression	1
>305	Identifier	bp
>306	Identifier	i_in
>307	BitAndExpression	i_in [ bp ] & 0xff
>308	PrimaryExpression	0xff
>309	ArrayIndexing	i_in [ bp ]
>310	Identifier	bp
>311	Identifier	i_in
>312	Identifier	w
>313	ExpressionStatement	 
>314	IncDecOp	xy --
>315	IncDec	--
>316	Identifier	xy
>317	ExpressionStatement	 
>318	AssignmentExpr	bp -= 3
>319	PrimaryExpression	3
>320	Identifier	bp
>321	ExpressionStatement	 
>322	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>323	ConditionalExpression	w <= th ? 0 
>324	PrimaryExpression	1
>325	PrimaryExpression	0
>326	Condition	w <= th
>327	RelationalExpression	w <= th
>328	Identifier	th
>329	Identifier	w
>330	ArrayIndexing	i_out [ xy ]
>331	Identifier	xy
>332	Identifier	i_out
>333	ExpressionStatement	 
>334	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>335	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>336	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>337	BitAndExpression	i_in [ bp + 2 ] & 0xff
>338	PrimaryExpression	0xff
>339	ArrayIndexing	i_in [ bp + 2 ]
>340	AdditiveExpression	bp + 2
>341	PrimaryExpression	2
>342	Identifier	bp
>343	Identifier	i_in
>344	BitAndExpression	i_in [ bp + 1 ] & 0xff
>345	PrimaryExpression	0xff
>346	ArrayIndexing	i_in [ bp + 1 ]
>347	AdditiveExpression	bp + 1
>348	PrimaryExpression	1
>349	Identifier	bp
>350	Identifier	i_in
>351	BitAndExpression	i_in [ bp ] & 0xff
>352	PrimaryExpression	0xff
>353	ArrayIndexing	i_in [ bp ]
>354	Identifier	bp
>355	Identifier	i_in
>356	Identifier	w
>357	ExpressionStatement	 
>358	IncDecOp	xy --
>359	IncDec	--
>360	Identifier	xy
>361	ExpressionStatement	 
>362	AssignmentExpr	bp -= 3
>363	PrimaryExpression	3
>364	Identifier	bp
>365	ExpressionStatement	 
>366	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>367	ConditionalExpression	w <= th ? 0 
>368	PrimaryExpression	1
>369	PrimaryExpression	0
>370	Condition	w <= th
>371	RelationalExpression	w <= th
>372	Identifier	th
>373	Identifier	w
>374	ArrayIndexing	i_out [ xy ]
>375	Identifier	xy
>376	Identifier	i_out
>377	ExpressionStatement	 
>378	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>379	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>380	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>381	BitAndExpression	i_in [ bp + 2 ] & 0xff
>382	PrimaryExpression	0xff
>383	ArrayIndexing	i_in [ bp + 2 ]
>384	AdditiveExpression	bp + 2
>385	PrimaryExpression	2
>386	Identifier	bp
>387	Identifier	i_in
>388	BitAndExpression	i_in [ bp + 1 ] & 0xff
>389	PrimaryExpression	0xff
>390	ArrayIndexing	i_in [ bp + 1 ]
>391	AdditiveExpression	bp + 1
>392	PrimaryExpression	1
>393	Identifier	bp
>394	Identifier	i_in
>395	BitAndExpression	i_in [ bp ] & 0xff
>396	PrimaryExpression	0xff
>397	ArrayIndexing	i_in [ bp ]
>398	Identifier	bp
>399	Identifier	i_in
>400	Identifier	w
>401	ExpressionStatement	 
>402	IncDecOp	xy --
>403	IncDec	--
>404	Identifier	xy
>405	ExpressionStatement	 
>406	AssignmentExpr	bp -= 3
>407	PrimaryExpression	3
>408	Identifier	bp
>409	ExpressionStatement	 
>410	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>411	ConditionalExpression	w <= th ? 0 
>412	PrimaryExpression	1
>413	PrimaryExpression	0
>414	Condition	w <= th
>415	RelationalExpression	w <= th
>416	Identifier	th
>417	Identifier	w
>418	ArrayIndexing	i_out [ xy ]
>419	Identifier	xy
>420	Identifier	i_out
>421	ExpressionStatement	 
>422	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>423	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>424	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>425	BitAndExpression	i_in [ bp + 2 ] & 0xff
>426	PrimaryExpression	0xff
>427	ArrayIndexing	i_in [ bp + 2 ]
>428	AdditiveExpression	bp + 2
>429	PrimaryExpression	2
>430	Identifier	bp
>431	Identifier	i_in
>432	BitAndExpression	i_in [ bp + 1 ] & 0xff
>433	PrimaryExpression	0xff
>434	ArrayIndexing	i_in [ bp + 1 ]
>435	AdditiveExpression	bp + 1
>436	PrimaryExpression	1
>437	Identifier	bp
>438	Identifier	i_in
>439	BitAndExpression	i_in [ bp ] & 0xff
>440	PrimaryExpression	0xff
>441	ArrayIndexing	i_in [ bp ]
>442	Identifier	bp
>443	Identifier	i_in
>444	Identifier	w
>445	ExpressionStatement	 
>446	IncDecOp	xy --
>447	IncDec	--
>448	Identifier	xy
>449	ExpressionStatement	 
>450	AssignmentExpr	bp -= 3
>451	PrimaryExpression	3
>452	Identifier	bp
>453	ExpressionStatement	 
>454	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>455	ConditionalExpression	w <= th ? 0 
>456	PrimaryExpression	1
>457	PrimaryExpression	0
>458	Condition	w <= th
>459	RelationalExpression	w <= th
>460	Identifier	th
>461	Identifier	w
>462	ArrayIndexing	i_out [ xy ]
>463	Identifier	xy
>464	Identifier	i_out
>465	ExpressionStatement	 
>466	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>467	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>468	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>469	BitAndExpression	i_in [ bp + 2 ] & 0xff
>470	PrimaryExpression	0xff
>471	ArrayIndexing	i_in [ bp + 2 ]
>472	AdditiveExpression	bp + 2
>473	PrimaryExpression	2
>474	Identifier	bp
>475	Identifier	i_in
>476	BitAndExpression	i_in [ bp + 1 ] & 0xff
>477	PrimaryExpression	0xff
>478	ArrayIndexing	i_in [ bp + 1 ]
>479	AdditiveExpression	bp + 1
>480	PrimaryExpression	1
>481	Identifier	bp
>482	Identifier	i_in
>483	BitAndExpression	i_in [ bp ] & 0xff
>484	PrimaryExpression	0xff
>485	ArrayIndexing	i_in [ bp ]
>486	Identifier	bp
>487	Identifier	i_in
>488	Identifier	w
>489	ExpressionStatement	 
>490	IncDecOp	xy --
>491	IncDec	--
>492	Identifier	xy
>493	ExpressionStatement	 
>494	AssignmentExpr	bp -= 3
>495	PrimaryExpression	3
>496	Identifier	bp
>497	ExpressionStatement	 
>498	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>499	ConditionalExpression	w <= th ? 0 
>500	PrimaryExpression	1
>501	PrimaryExpression	0
>502	Condition	w <= th
>503	RelationalExpression	w <= th
>504	Identifier	th
>505	Identifier	w
>506	ArrayIndexing	i_out [ xy ]
>507	Identifier	xy
>508	Identifier	i_out
>509	ExpressionStatement	 
>510	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>511	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>512	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>513	BitAndExpression	i_in [ bp + 2 ] & 0xff
>514	PrimaryExpression	0xff
>515	ArrayIndexing	i_in [ bp + 2 ]
>516	AdditiveExpression	bp + 2
>517	PrimaryExpression	2
>518	Identifier	bp
>519	Identifier	i_in
>520	BitAndExpression	i_in [ bp + 1 ] & 0xff
>521	PrimaryExpression	0xff
>522	ArrayIndexing	i_in [ bp + 1 ]
>523	AdditiveExpression	bp + 1
>524	PrimaryExpression	1
>525	Identifier	bp
>526	Identifier	i_in
>527	BitAndExpression	i_in [ bp ] & 0xff
>528	PrimaryExpression	0xff
>529	ArrayIndexing	i_in [ bp ]
>530	Identifier	bp
>531	Identifier	i_in
>532	Identifier	w
>533	ExpressionStatement	 
>534	IncDecOp	xy --
>535	IncDec	--
>536	Identifier	xy
>537	ExpressionStatement	 
>538	AssignmentExpr	bp -= 3
>539	PrimaryExpression	3
>540	Identifier	bp
>541	ExpressionStatement	 
>542	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>543	ConditionalExpression	w <= th ? 0 
>544	PrimaryExpression	1
>545	PrimaryExpression	0
>546	Condition	w <= th
>547	RelationalExpression	w <= th
>548	Identifier	th
>549	Identifier	w
>550	ArrayIndexing	i_out [ xy ]
>551	Identifier	xy
>552	Identifier	i_out
>553	ExpressionStatement	 
>554	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>555	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>556	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>557	BitAndExpression	i_in [ bp + 2 ] & 0xff
>558	PrimaryExpression	0xff
>559	ArrayIndexing	i_in [ bp + 2 ]
>560	AdditiveExpression	bp + 2
>561	PrimaryExpression	2
>562	Identifier	bp
>563	Identifier	i_in
>564	BitAndExpression	i_in [ bp + 1 ] & 0xff
>565	PrimaryExpression	0xff
>566	ArrayIndexing	i_in [ bp + 1 ]
>567	AdditiveExpression	bp + 1
>568	PrimaryExpression	1
>569	Identifier	bp
>570	Identifier	i_in
>571	BitAndExpression	i_in [ bp ] & 0xff
>572	PrimaryExpression	0xff
>573	ArrayIndexing	i_in [ bp ]
>574	Identifier	bp
>575	Identifier	i_in
>576	Identifier	w
>577	ExpressionStatement	 
>578	IncDecOp	xy --
>579	IncDec	--
>580	Identifier	xy
>581	ExpressionStatement	 
>582	AssignmentExpr	bp -= 3
>583	PrimaryExpression	3
>584	Identifier	bp
>585	ExpressionStatement	 
>586	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>587	ConditionalExpression	w <= th ? 0 
>588	PrimaryExpression	1
>589	PrimaryExpression	0
>590	Condition	w <= th
>591	RelationalExpression	w <= th
>592	Identifier	th
>593	Identifier	w
>594	ArrayIndexing	i_out [ xy ]
>595	Identifier	xy
>596	Identifier	i_out
>597	ExpressionStatement	 
>598	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>599	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>600	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>601	BitAndExpression	i_in [ bp + 2 ] & 0xff
>602	PrimaryExpression	0xff
>603	ArrayIndexing	i_in [ bp + 2 ]
>604	AdditiveExpression	bp + 2
>605	PrimaryExpression	2
>606	Identifier	bp
>607	Identifier	i_in
>608	BitAndExpression	i_in [ bp + 1 ] & 0xff
>609	PrimaryExpression	0xff
>610	ArrayIndexing	i_in [ bp + 1 ]
>611	AdditiveExpression	bp + 1
>612	PrimaryExpression	1
>613	Identifier	bp
>614	Identifier	i_in
>615	BitAndExpression	i_in [ bp ] & 0xff
>616	PrimaryExpression	0xff
>617	ArrayIndexing	i_in [ bp ]
>618	Identifier	bp
>619	Identifier	i_in
>620	Identifier	w
>621	Condition	 
>622	RelationalExpression	xy >= 0
>623	PrimaryExpression	0
>624	Identifier	xy
>625	ForStatement	for ( xy = pix_count - 1 ; xy >= pix_mod_part ; xy -- )
>626	CompoundStatement	 
>627	ExpressionStatement	 
>628	AssignmentExpr	bp -= 3
>629	PrimaryExpression	3
>630	Identifier	bp
>631	ExpressionStatement	 
>632	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>633	ConditionalExpression	w <= th ? 0 
>634	PrimaryExpression	1
>635	PrimaryExpression	0
>636	Condition	w <= th
>637	RelationalExpression	w <= th
>638	Identifier	th
>639	Identifier	w
>640	ArrayIndexing	i_out [ xy ]
>641	Identifier	xy
>642	Identifier	i_out
>643	ExpressionStatement	 
>644	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>645	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>646	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>647	BitAndExpression	i_in [ bp + 2 ] & 0xff
>648	PrimaryExpression	0xff
>649	ArrayIndexing	i_in [ bp + 2 ]
>650	AdditiveExpression	bp + 2
>651	PrimaryExpression	2
>652	Identifier	bp
>653	Identifier	i_in
>654	BitAndExpression	i_in [ bp + 1 ] & 0xff
>655	PrimaryExpression	0xff
>656	ArrayIndexing	i_in [ bp + 1 ]
>657	AdditiveExpression	bp + 1
>658	PrimaryExpression	1
>659	Identifier	bp
>660	Identifier	i_in
>661	BitAndExpression	i_in [ bp ] & 0xff
>662	PrimaryExpression	0xff
>663	ArrayIndexing	i_in [ bp ]
>664	Identifier	bp
>665	Identifier	i_in
>666	Identifier	w
>667	IncDecOp	 
>668	IncDec	--
>669	Identifier	xy
>670	Condition	 
>671	RelationalExpression	xy >= pix_mod_part
>672	Identifier	pix_mod_part
>673	Identifier	xy
>674	ForInit	 
>675	AssignmentExpr	xy = pix_count - 1
>676	AdditiveExpression	pix_count - 1
>677	PrimaryExpression	1
>678	Identifier	pix_count
>679	Identifier	xy
>680	IdentifierDeclStatement	 
>681	IdentifierDecl	pix_mod_part = pix_count - ( pix_count % 8 )
>682	AssignmentExpr	pix_mod_part = pix_count - ( pix_count % 8 )
>683	AdditiveExpression	pix_count - ( pix_count % 8 )
>684	MultiplicativeExpression	pix_count % 8
>685	PrimaryExpression	8
>686	Identifier	pix_count
>687	Identifier	pix_count
>688	Identifier	pix_mod_part
>689	Identifier	pix_mod_part
>690	IdentifierDeclType	int
>691	IdentifierDeclStatement	 
>692	IdentifierDecl	pix_count = i_size -> h * i_size -> w
>693	AssignmentExpr	pix_count = i_size -> h * i_size -> w
>694	MultiplicativeExpression	i_size -> h * i_size -> w
>695	PtrMemberAccess	i_size -> w
>696	Identifier	w
>697	Identifier	i_size
>698	PtrMemberAccess	i_size -> h
>699	Identifier	h
>700	Identifier	i_size
>701	Identifier	pix_count
>702	Identifier	pix_count
>703	IdentifierDeclType	int
>704	IdentifierDeclStatement	 
>705	IdentifierDecl	xy
>706	Identifier	xy
>707	IdentifierDeclType	int
>708	IdentifierDeclStatement	 
>709	IdentifierDecl	w
>710	Identifier	w
>711	IdentifierDeclType	int
>712	IdentifierDeclStatement	 
>713	IdentifierDecl	bp = ( i_size -> w * i_size -> h - 1 ) * 3
>714	AssignmentExpr	bp = ( i_size -> w * i_size -> h - 1 ) * 3
>715	MultiplicativeExpression	( i_size -> w * i_size -> h - 1 ) * 3
>716	PrimaryExpression	3
>717	AdditiveExpression	i_size -> w * i_size -> h - 1
>718	PrimaryExpression	1
>719	MultiplicativeExpression	i_size -> w * i_size -> h
>720	PtrMemberAccess	i_size -> h
>721	Identifier	h
>722	Identifier	i_size
>723	PtrMemberAccess	i_size -> w
>724	Identifier	w
>725	Identifier	i_size
>726	Identifier	bp
>727	Identifier	bp
>728	IdentifierDeclType	int
>729	IdentifierDeclStatement	 
>730	IdentifierDecl	th = this -> _threshold * 3
>731	AssignmentExpr	th = this -> _threshold * 3
>732	MultiplicativeExpression	this -> _threshold * 3
>733	PrimaryExpression	3
>734	PtrMemberAccess	this -> _threshold
>735	Identifier	_threshold
>736	Identifier	this
>737	Identifier	th
>738	Identifier	th
>739	IdentifierDeclType	int
>762	FunctionDef	NyARRasterFilter_ARToolkitThreshold 
>763	ParameterList	const NyAR_BYTE_t * i_in , int * i_out , const TNyARIntSize * i_size
>764	Parameter	 
>765	Identifier	i_size
>766	ParameterType	const TNyARIntSize *
>767	Parameter	 
>768	Identifier	i_out
>769	ParameterType	int *
>770	Parameter	 
>771	Identifier	i_in
>772	ParameterType	const NyAR_BYTE_t *
>773	ReturnType	void
>774	CompoundStatement	 
>775	ReturnStatement	 
>776	ForStatement	for ( ; xy >= 0 ; )
>777	CompoundStatement	 
>778	ExpressionStatement	 
>779	IncDecOp	xy --
>780	IncDec	--
>781	Identifier	xy
>782	ExpressionStatement	 
>783	AssignmentExpr	bp -= 4
>784	PrimaryExpression	4
>785	Identifier	bp
>786	ExpressionStatement	 
>787	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>788	ConditionalExpression	w <= th ? 0 
>789	PrimaryExpression	1
>790	PrimaryExpression	0
>791	Condition	w <= th
>792	RelationalExpression	w <= th
>793	Identifier	th
>794	Identifier	w
>795	ArrayIndexing	i_out [ xy ]
>796	Identifier	xy
>797	Identifier	i_out
>798	ExpressionStatement	 
>799	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>800	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>801	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>802	BitAndExpression	i_in [ bp + 2 ] & 0xff
>803	PrimaryExpression	0xff
>804	ArrayIndexing	i_in [ bp + 2 ]
>805	AdditiveExpression	bp + 2
>806	PrimaryExpression	2
>807	Identifier	bp
>808	Identifier	i_in
>809	BitAndExpression	i_in [ bp + 1 ] & 0xff
>810	PrimaryExpression	0xff
>811	ArrayIndexing	i_in [ bp + 1 ]
>812	AdditiveExpression	bp + 1
>813	PrimaryExpression	1
>814	Identifier	bp
>815	Identifier	i_in
>816	BitAndExpression	i_in [ bp ] & 0xff
>817	PrimaryExpression	0xff
>818	ArrayIndexing	i_in [ bp ]
>819	Identifier	bp
>820	Identifier	i_in
>821	Identifier	w
>822	ExpressionStatement	 
>823	IncDecOp	xy --
>824	IncDec	--
>825	Identifier	xy
>826	ExpressionStatement	 
>827	AssignmentExpr	bp -= 4
>828	PrimaryExpression	4
>829	Identifier	bp
>830	ExpressionStatement	 
>831	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>832	ConditionalExpression	w <= th ? 0 
>833	PrimaryExpression	1
>834	PrimaryExpression	0
>835	Condition	w <= th
>836	RelationalExpression	w <= th
>837	Identifier	th
>838	Identifier	w
>839	ArrayIndexing	i_out [ xy ]
>840	Identifier	xy
>841	Identifier	i_out
>842	ExpressionStatement	 
>843	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>844	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>845	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>846	BitAndExpression	i_in [ bp + 2 ] & 0xff
>847	PrimaryExpression	0xff
>848	ArrayIndexing	i_in [ bp + 2 ]
>849	AdditiveExpression	bp + 2
>850	PrimaryExpression	2
>851	Identifier	bp
>852	Identifier	i_in
>853	BitAndExpression	i_in [ bp + 1 ] & 0xff
>854	PrimaryExpression	0xff
>855	ArrayIndexing	i_in [ bp + 1 ]
>856	AdditiveExpression	bp + 1
>857	PrimaryExpression	1
>858	Identifier	bp
>859	Identifier	i_in
>860	BitAndExpression	i_in [ bp ] & 0xff
>861	PrimaryExpression	0xff
>862	ArrayIndexing	i_in [ bp ]
>863	Identifier	bp
>864	Identifier	i_in
>865	Identifier	w
>866	ExpressionStatement	 
>867	IncDecOp	xy --
>868	IncDec	--
>869	Identifier	xy
>870	ExpressionStatement	 
>871	AssignmentExpr	bp -= 4
>872	PrimaryExpression	4
>873	Identifier	bp
>874	ExpressionStatement	 
>875	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>876	ConditionalExpression	w <= th ? 0 
>877	PrimaryExpression	1
>878	PrimaryExpression	0
>879	Condition	w <= th
>880	RelationalExpression	w <= th
>881	Identifier	th
>882	Identifier	w
>883	ArrayIndexing	i_out [ xy ]
>884	Identifier	xy
>885	Identifier	i_out
>886	ExpressionStatement	 
>887	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>888	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>889	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>890	BitAndExpression	i_in [ bp + 2 ] & 0xff
>891	PrimaryExpression	0xff
>892	ArrayIndexing	i_in [ bp + 2 ]
>893	AdditiveExpression	bp + 2
>894	PrimaryExpression	2
>895	Identifier	bp
>896	Identifier	i_in
>897	BitAndExpression	i_in [ bp + 1 ] & 0xff
>898	PrimaryExpression	0xff
>899	ArrayIndexing	i_in [ bp + 1 ]
>900	AdditiveExpression	bp + 1
>901	PrimaryExpression	1
>902	Identifier	bp
>903	Identifier	i_in
>904	BitAndExpression	i_in [ bp ] & 0xff
>905	PrimaryExpression	0xff
>906	ArrayIndexing	i_in [ bp ]
>907	Identifier	bp
>908	Identifier	i_in
>909	Identifier	w
>910	ExpressionStatement	 
>911	IncDecOp	xy --
>912	IncDec	--
>913	Identifier	xy
>914	ExpressionStatement	 
>915	AssignmentExpr	bp -= 4
>916	PrimaryExpression	4
>917	Identifier	bp
>918	ExpressionStatement	 
>919	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>920	ConditionalExpression	w <= th ? 0 
>921	PrimaryExpression	1
>922	PrimaryExpression	0
>923	Condition	w <= th
>924	RelationalExpression	w <= th
>925	Identifier	th
>926	Identifier	w
>927	ArrayIndexing	i_out [ xy ]
>928	Identifier	xy
>929	Identifier	i_out
>930	ExpressionStatement	 
>931	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>932	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>933	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>934	BitAndExpression	i_in [ bp + 2 ] & 0xff
>935	PrimaryExpression	0xff
>936	ArrayIndexing	i_in [ bp + 2 ]
>937	AdditiveExpression	bp + 2
>938	PrimaryExpression	2
>939	Identifier	bp
>940	Identifier	i_in
>941	BitAndExpression	i_in [ bp + 1 ] & 0xff
>942	PrimaryExpression	0xff
>943	ArrayIndexing	i_in [ bp + 1 ]
>944	AdditiveExpression	bp + 1
>945	PrimaryExpression	1
>946	Identifier	bp
>947	Identifier	i_in
>948	BitAndExpression	i_in [ bp ] & 0xff
>949	PrimaryExpression	0xff
>950	ArrayIndexing	i_in [ bp ]
>951	Identifier	bp
>952	Identifier	i_in
>953	Identifier	w
>954	ExpressionStatement	 
>955	IncDecOp	xy --
>956	IncDec	--
>957	Identifier	xy
>958	ExpressionStatement	 
>959	AssignmentExpr	bp -= 4
>960	PrimaryExpression	4
>961	Identifier	bp
>962	ExpressionStatement	 
>963	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>964	ConditionalExpression	w <= th ? 0 
>965	PrimaryExpression	1
>966	PrimaryExpression	0
>967	Condition	w <= th
>968	RelationalExpression	w <= th
>969	Identifier	th
>970	Identifier	w
>971	ArrayIndexing	i_out [ xy ]
>972	Identifier	xy
>973	Identifier	i_out
>974	ExpressionStatement	 
>975	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>976	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>977	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>978	BitAndExpression	i_in [ bp + 2 ] & 0xff
>979	PrimaryExpression	0xff
>980	ArrayIndexing	i_in [ bp + 2 ]
>981	AdditiveExpression	bp + 2
>982	PrimaryExpression	2
>983	Identifier	bp
>984	Identifier	i_in
>985	BitAndExpression	i_in [ bp + 1 ] & 0xff
>986	PrimaryExpression	0xff
>987	ArrayIndexing	i_in [ bp + 1 ]
>988	AdditiveExpression	bp + 1
>989	PrimaryExpression	1
>990	Identifier	bp
>991	Identifier	i_in
>992	BitAndExpression	i_in [ bp ] & 0xff
>993	PrimaryExpression	0xff
>994	ArrayIndexing	i_in [ bp ]
>995	Identifier	bp
>996	Identifier	i_in
>997	Identifier	w
>998	ExpressionStatement	 
>999	IncDecOp	xy --
>1000	IncDec	--
>1001	Identifier	xy
>1002	ExpressionStatement	 
>1003	AssignmentExpr	bp -= 4
>1004	PrimaryExpression	4
>1005	Identifier	bp
>1006	ExpressionStatement	 
>1007	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>1008	ConditionalExpression	w <= th ? 0 
>1009	PrimaryExpression	1
>1010	PrimaryExpression	0
>1011	Condition	w <= th
>1012	RelationalExpression	w <= th
>1013	Identifier	th
>1014	Identifier	w
>1015	ArrayIndexing	i_out [ xy ]
>1016	Identifier	xy
>1017	Identifier	i_out
>1018	ExpressionStatement	 
>1019	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>1020	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1021	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1022	BitAndExpression	i_in [ bp + 2 ] & 0xff
>1023	PrimaryExpression	0xff
>1024	ArrayIndexing	i_in [ bp + 2 ]
>1025	AdditiveExpression	bp + 2
>1026	PrimaryExpression	2
>1027	Identifier	bp
>1028	Identifier	i_in
>1029	BitAndExpression	i_in [ bp + 1 ] & 0xff
>1030	PrimaryExpression	0xff
>1031	ArrayIndexing	i_in [ bp + 1 ]
>1032	AdditiveExpression	bp + 1
>1033	PrimaryExpression	1
>1034	Identifier	bp
>1035	Identifier	i_in
>1036	BitAndExpression	i_in [ bp ] & 0xff
>1037	PrimaryExpression	0xff
>1038	ArrayIndexing	i_in [ bp ]
>1039	Identifier	bp
>1040	Identifier	i_in
>1041	Identifier	w
>1042	ExpressionStatement	 
>1043	IncDecOp	xy --
>1044	IncDec	--
>1045	Identifier	xy
>1046	ExpressionStatement	 
>1047	AssignmentExpr	bp -= 4
>1048	PrimaryExpression	4
>1049	Identifier	bp
>1050	ExpressionStatement	 
>1051	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>1052	ConditionalExpression	w <= th ? 0 
>1053	PrimaryExpression	1
>1054	PrimaryExpression	0
>1055	Condition	w <= th
>1056	RelationalExpression	w <= th
>1057	Identifier	th
>1058	Identifier	w
>1059	ArrayIndexing	i_out [ xy ]
>1060	Identifier	xy
>1061	Identifier	i_out
>1062	ExpressionStatement	 
>1063	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>1064	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1065	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1066	BitAndExpression	i_in [ bp + 2 ] & 0xff
>1067	PrimaryExpression	0xff
>1068	ArrayIndexing	i_in [ bp + 2 ]
>1069	AdditiveExpression	bp + 2
>1070	PrimaryExpression	2
>1071	Identifier	bp
>1072	Identifier	i_in
>1073	BitAndExpression	i_in [ bp + 1 ] & 0xff
>1074	PrimaryExpression	0xff
>1075	ArrayIndexing	i_in [ bp + 1 ]
>1076	AdditiveExpression	bp + 1
>1077	PrimaryExpression	1
>1078	Identifier	bp
>1079	Identifier	i_in
>1080	BitAndExpression	i_in [ bp ] & 0xff
>1081	PrimaryExpression	0xff
>1082	ArrayIndexing	i_in [ bp ]
>1083	Identifier	bp
>1084	Identifier	i_in
>1085	Identifier	w
>1086	ExpressionStatement	 
>1087	IncDecOp	xy --
>1088	IncDec	--
>1089	Identifier	xy
>1090	ExpressionStatement	 
>1091	AssignmentExpr	bp -= 4
>1092	PrimaryExpression	4
>1093	Identifier	bp
>1094	ExpressionStatement	 
>1095	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>1096	ConditionalExpression	w <= th ? 0 
>1097	PrimaryExpression	1
>1098	PrimaryExpression	0
>1099	Condition	w <= th
>1100	RelationalExpression	w <= th
>1101	Identifier	th
>1102	Identifier	w
>1103	ArrayIndexing	i_out [ xy ]
>1104	Identifier	xy
>1105	Identifier	i_out
>1106	ExpressionStatement	 
>1107	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>1108	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1109	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1110	BitAndExpression	i_in [ bp + 2 ] & 0xff
>1111	PrimaryExpression	0xff
>1112	ArrayIndexing	i_in [ bp + 2 ]
>1113	AdditiveExpression	bp + 2
>1114	PrimaryExpression	2
>1115	Identifier	bp
>1116	Identifier	i_in
>1117	BitAndExpression	i_in [ bp + 1 ] & 0xff
>1118	PrimaryExpression	0xff
>1119	ArrayIndexing	i_in [ bp + 1 ]
>1120	AdditiveExpression	bp + 1
>1121	PrimaryExpression	1
>1122	Identifier	bp
>1123	Identifier	i_in
>1124	BitAndExpression	i_in [ bp ] & 0xff
>1125	PrimaryExpression	0xff
>1126	ArrayIndexing	i_in [ bp ]
>1127	Identifier	bp
>1128	Identifier	i_in
>1129	Identifier	w
>1130	Condition	 
>1131	RelationalExpression	xy >= 0
>1132	PrimaryExpression	0
>1133	Identifier	xy
>1134	ForStatement	for ( xy = pix_count - 1 ; xy >= pix_mod_part ; xy -- )
>1135	CompoundStatement	 
>1136	ExpressionStatement	 
>1137	AssignmentExpr	bp -= 4
>1138	PrimaryExpression	4
>1139	Identifier	bp
>1140	ExpressionStatement	 
>1141	AssignmentExpr	i_out [ xy ] = w <= th ? 0 
>1142	ConditionalExpression	w <= th ? 0 
>1143	PrimaryExpression	1
>1144	PrimaryExpression	0
>1145	Condition	w <= th
>1146	RelationalExpression	w <= th
>1147	Identifier	th
>1148	Identifier	w
>1149	ArrayIndexing	i_out [ xy ]
>1150	Identifier	xy
>1151	Identifier	i_out
>1152	ExpressionStatement	 
>1153	AssignmentExpr	w = ( ( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff ) )
>1154	AdditiveExpression	( i_in [ bp ] & 0xff ) + ( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1155	AdditiveExpression	( i_in [ bp + 1 ] & 0xff ) + ( i_in [ bp + 2 ] & 0xff )
>1156	BitAndExpression	i_in [ bp + 2 ] & 0xff
>1157	PrimaryExpression	0xff
>1158	ArrayIndexing	i_in [ bp + 2 ]
>1159	AdditiveExpression	bp + 2
>1160	PrimaryExpression	2
>1161	Identifier	bp
>1162	Identifier	i_in
>1163	BitAndExpression	i_in [ bp + 1 ] & 0xff
>1164	PrimaryExpression	0xff
>1165	ArrayIndexing	i_in [ bp + 1 ]
>1166	AdditiveExpression	bp + 1
>1167	PrimaryExpression	1
>1168	Identifier	bp
>1169	Identifier	i_in
>1170	BitAndExpression	i_in [ bp ] & 0xff
>1171	PrimaryExpression	0xff
>1172	ArrayIndexing	i_in [ bp ]
>1173	Identifier	bp
>1174	Identifier	i_in
>1175	Identifier	w
>1176	IncDecOp	 
>1177	IncDec	--
>1178	Identifier	xy
>1179	Condition	 
>1180	RelationalExpression	xy >= pix_mod_part
>1181	Identifier	pix_mod_part
>1182	Identifier	xy
>1183	ForInit	 
>1184	AssignmentExpr	xy = pix_count - 1
>1185	AdditiveExpression	pix_count - 1
>1186	PrimaryExpression	1
>1187	Identifier	pix_count
>1188	Identifier	xy
>1189	IdentifierDeclStatement	 
>1190	IdentifierDecl	pix_mod_part = pix_count - ( pix_count % 8 )
>1191	AssignmentExpr	pix_mod_part = pix_count - ( pix_count % 8 )
>1192	AdditiveExpression	pix_count - ( pix_count % 8 )
>1193	MultiplicativeExpression	pix_count % 8
>1194	PrimaryExpression	8
>1195	Identifier	pix_count
>1196	Identifier	pix_count
>1197	Identifier	pix_mod_part
>1198	Identifier	pix_mod_part
>1199	IdentifierDeclType	int
>1200	IdentifierDeclStatement	 
>1201	IdentifierDecl	pix_count = i_size -> h * i_size -> w
>1202	AssignmentExpr	pix_count = i_size -> h * i_size -> w
>1203	MultiplicativeExpression	i_size -> h * i_size -> w
>1204	PtrMemberAccess	i_size -> w
>1205	Identifier	w
>1206	Identifier	i_size
>1207	PtrMemberAccess	i_size -> h
>1208	Identifier	h
>1209	Identifier	i_size
>1210	Identifier	pix_count
>1211	Identifier	pix_count
>1212	IdentifierDeclType	int
>1213	IdentifierDeclStatement	 
>1214	IdentifierDecl	xy
>1215	Identifier	xy
>1216	IdentifierDeclType	int
>1217	IdentifierDeclStatement	 
>1218	IdentifierDecl	w
>1219	Identifier	w
>1220	IdentifierDeclType	int
>1221	IdentifierDeclStatement	 
>1222	IdentifierDecl	bp = ( i_size -> w * i_size -> h - 1 ) * 4
>1223	AssignmentExpr	bp = ( i_size -> w * i_size -> h - 1 ) * 4
>1224	MultiplicativeExpression	( i_size -> w * i_size -> h - 1 ) * 4
>1225	PrimaryExpression	4
>1226	AdditiveExpression	i_size -> w * i_size -> h - 1
>1227	PrimaryExpression	1
>1228	MultiplicativeExpression	i_size -> w * i_size -> h
>1229	PtrMemberAccess	i_size -> h
>1230	Identifier	h
>1231	Identifier	i_size
>1232	PtrMemberAccess	i_size -> w
>1233	Identifier	w
>1234	Identifier	i_size
>1235	Identifier	bp
>1236	Identifier	bp
>1237	IdentifierDeclType	int
>1238	IdentifierDeclStatement	 
>1239	IdentifierDecl	th = this -> _threshold * 3
>1240	AssignmentExpr	th = this -> _threshold * 3
>1241	MultiplicativeExpression	this -> _threshold * 3
>1242	PrimaryExpression	3
>1243	PtrMemberAccess	this -> _threshold
>1244	Identifier	_threshold
>1245	Identifier	this
>1246	Identifier	th
>1247	Identifier	th
>1248	IdentifierDeclType	int
>1271	FunctionDef	NyARRasterFilter_ARToolkitThreshold 
>1272	ParameterList	int i_input_type
>1273	Parameter	 
>1274	Identifier	i_input_type
>1275	ParameterType	int
>1276	ReturnType	bool
>1277	CompoundStatement	 
>1278	SwitchStatement	switch ( i_input_type )
>1279	CompoundStatement	 
>1280	ReturnStatement	 
>1281	Identifier	false
>1282	Label	 
>1283	Identifier	default
>1284	ReturnStatement	 
>1285	Identifier	true
>1286	Label	 
>1287	Identifier	INyARBufferReader 
>1288	Label	 
>1289	Identifier	INyARBufferReader 
>1290	Label	 
>1291	Identifier	INyARBufferReader 
>1292	Label	 
>1293	Identifier	INyARBufferReader 
>1294	Condition	 
>1295	Identifier	i_input_type
>1302	FunctionDef	test ()
>1303	ParameterList	 
>1304	ReturnType	void
>1305	CompoundStatement	 
>1306	ReturnStatement	 
>1307	ExpressionStatement	 
>1308	Identifier	in_raster
>1309	Statement	 
>1310	ForStatement	for ( int i = 0 ; i < 320 * 240 ; i ++ )
>1311	CompoundStatement	 
>1312	ExpressionStatement	 
>1313	AssignmentExpr	sum += * ( p + i )
>1314	UnaryOp	* ( p + i )
>1315	AdditiveExpression	p + i
>1316	Identifier	i
>1317	Identifier	p
>1318	UnaryOperator	*
>1319	Identifier	sum
>1320	IncDecOp	 
>1321	IncDec	++
>1322	Identifier	i
>1323	Condition	 
>1324	RelationalExpression	i < 320 * 240
>1325	MultiplicativeExpression	320 * 240
>1326	PrimaryExpression	240
>1327	PrimaryExpression	320
>1328	Identifier	i
>1329	ForInit	 
>1330	IdentifierDeclStatement	int i = 0 ;
>1331	IdentifierDecl	i = 0
>1332	AssignmentExpr	i = 0
>1333	PrimaryExpression	0
>1334	Identifier	i
>1335	Identifier	i
>1336	IdentifierDeclType	int
>1337	IdentifierDeclStatement	 
>1338	IdentifierDecl	sum = 0
>1339	AssignmentExpr	sum = 0
>1340	PrimaryExpression	0
>1341	Identifier	sum
>1342	Identifier	sum
>1343	IdentifierDeclType	int
>1344	ExpressionStatement	 
>1345	AssignmentExpr	p = ( const int * ) gs . getBufferReader ( ) -> getBuffer ( )
>1346	CastExpression	( const int * ) gs . getBufferReader ( ) -> getBuffer ( )
>1347	CallExpression	gs . getBufferReader ( ) -> getBuffer ( )
>1348	ArgumentList	 
>1349	Callee	gs . getBufferReader ( ) -> getBuffer
>1350	PtrMemberAccess	gs . getBufferReader ( ) -> getBuffer
>1351	Identifier	getBuffer
>1352	CallExpression	gs . getBufferReader ( )
>1353	ArgumentList	 
>1354	Callee	gs . getBufferReader
>1355	MemberAccess	gs . getBufferReader
>1356	Identifier	getBufferReader
>1357	Identifier	gs
>1358	CastTarget	const int *
>1359	Identifier	p
>1360	IdentifierDeclStatement	 
>1361	IdentifierDecl	* p
>1362	Identifier	p
>1363	IdentifierDeclType	const int *
>1364	ExpressionStatement	 
>1365	CallExpression	OutputDebugString ( w )
>1366	ArgumentList	w
>1367	Argument	w
>1368	Identifier	w
>1369	Callee	OutputDebugString
>1370	Identifier	OutputDebugString
>1371	ExpressionStatement	 
>1372	Statement	 
>1373	Statement	 
>1374	Statement	 
>1375	Statement	 
>1376	Statement	 
>1377	Statement	 
>1378	Statement	 
>1379	Statement	 
>1380	Statement	 
>1381	IdentifierDeclStatement	 
>1382	IdentifierDecl	w [ 256 ]
>1383	PrimaryExpression	256
>1384	Identifier	w
>1385	IdentifierDeclType	TCHAR [ 256 ]
>1386	ExpressionStatement	 
>1387	AssignmentExpr	t = GetTickCount ( ) - t
>1388	AdditiveExpression	GetTickCount ( ) - t
>1389	Identifier	t
>1390	CallExpression	GetTickCount ( )
>1391	ArgumentList	 
>1392	Callee	GetTickCount
>1393	Identifier	GetTickCount
>1394	Identifier	t
>1395	ForStatement	for ( int i = 0 ; i < 100 ; i ++ )
>1396	CompoundStatement	 
>1397	ExpressionStatement	 
>1398	CallExpression	th . doFilter ( in_raster , & gs )
>1399	ArgumentList	in_raster
>1400	Argument	& gs
>1401	UnaryOp	& gs
>1402	Identifier	gs
>1403	UnaryOperator	&
>1404	Argument	in_raster
>1405	Identifier	in_raster
>1406	Callee	th . doFilter
>1407	MemberAccess	th . doFilter
>1408	Identifier	doFilter
>1409	Identifier	th
>1410	IncDecOp	 
>1411	IncDec	++
>1412	Identifier	i
>1413	Condition	 
>1414	RelationalExpression	i < 100
>1415	PrimaryExpression	100
>1416	Identifier	i
>1417	ForInit	 
>1418	IdentifierDeclStatement	int i = 0 ;
>1419	IdentifierDecl	i = 0
>1420	AssignmentExpr	i = 0
>1421	PrimaryExpression	0
>1422	Identifier	i
>1423	Identifier	i
>1424	IdentifierDeclType	int
>1425	IdentifierDeclStatement	 
>1426	IdentifierDecl	t = GetTickCount ( )
>1427	AssignmentExpr	t = GetTickCount ( )
>1428	CallExpression	GetTickCount ( )
>1429	ArgumentList	 
>1430	Callee	GetTickCount
>1431	Identifier	GetTickCount
>1432	Identifier	t
>1433	Identifier	t
>1434	IdentifierDeclType	DWORD
>1435	IdentifierDeclStatement	 
>1436	IdentifierDecl	th ( 100 )
>1437	PrimaryExpression	100
>1438	Identifier	th
>1439	IdentifierDeclType	NyARRasterFilter_ARToolkitThreshold
>1440	IdentifierDeclStatement	 
>1441	IdentifierDecl	gs ( 320 , 240 )
>1442	Expression	320 , 240
>1443	PrimaryExpression	240
>1444	PrimaryExpression	320
>1445	Identifier	gs
>1446	IdentifierDeclType	NyARBinRaster
>1447	IdentifierDeclStatement	 
>1448	IdentifierDecl	* in_raster = NyARRgbRaster_BGRA 
>1449	AssignmentExpr	* in_raster = NyARRgbRaster_BGRA 
>1450	CallExpression	NyARRgbRaster_BGRA 
>1451	ArgumentList	s
>1452	Argument	240
>1453	PrimaryExpression	240
>1454	Argument	320
>1455	PrimaryExpression	320
>1456	Argument	s
>1457	Identifier	s
>1458	Callee	NyARRgbRaster_BGRA 
>1459	Identifier	NyARRgbRaster_BGRA 
>1460	Identifier	in_raster
>1461	Identifier	in_raster
>1462	IdentifierDeclType	NyARRgbRaster_BGRA *
>1463	ExpressionStatement	 
>1464	CallExpression	fclose ( fp )
>1465	ArgumentList	fp
>1466	Argument	fp
>1467	Identifier	fp
>1468	Callee	fclose
>1469	Identifier	fclose
>1470	ExpressionStatement	 
>1471	CallExpression	fread ( s , 1 , 320 * 240 * 4 , fp )
>1472	ArgumentList	s
>1473	Argument	fp
>1474	Identifier	fp
>1475	Argument	320 * 240 * 4
>1476	MultiplicativeExpression	320 * 240 * 4
>1477	MultiplicativeExpression	240 * 4
>1478	PrimaryExpression	4
>1479	PrimaryExpression	240
>1480	PrimaryExpression	320
>1481	Argument	1
>1482	PrimaryExpression	1
>1483	Argument	s
>1484	Identifier	s
>1485	Callee	fread
>1486	Identifier	fread
>1487	IfStatement	if ( ( fp = fopen ( \"\\temp\\320x240ABGR.raw\" , \"r\" ) ) == NULL )
>1488	CompoundStatement	 
>1489	ExpressionStatement	 
>1490	CallExpression	exit ( - 1 )
>1491	ArgumentList	- 1
>1492	Argument	- 1
>1493	UnaryOp	- 1
>1494	PrimaryExpression	1
>1495	UnaryOperator	-
>1496	Callee	exit
>1497	Identifier	exit
>1498	ExpressionStatement	 
>1499	CallExpression	printf ( \"file open error!!\n\" )
>1500	ArgumentList	\"file open error!!\n\"
>1501	Argument	\"file open error!!\n\"
>1502	PrimaryExpression	\"file open error!!\n\"
>1503	Callee	printf
>1504	Identifier	printf
>1505	Condition	 
>1506	EqualityExpression	( fp = fopen ( \"\\temp\\320x240ABGR.raw\" , \"r\" ) ) == NULL
>1507	Identifier	NULL
>1508	AssignmentExpr	fp = fopen ( \"\\temp\\320x240ABGR.raw\" , \"r\" )
>1509	CallExpression	fopen ( \"\\temp\\320x240ABGR.raw\" , \"r\" )
>1510	ArgumentList	\"\\temp\\320x240ABGR.raw\"
>1511	Argument	\"r\"
>1512	PrimaryExpression	\"r\"
>1513	Argument	\"\\temp\\320x240ABGR.raw\"
>1514	PrimaryExpression	\"\\temp\\320x240ABGR.raw\"
>1515	Callee	fopen
>1516	Identifier	fopen
>1517	Identifier	fp
>1518	IdentifierDeclStatement	 
>1519	IdentifierDecl	s [ 320 * 240 * 4 ]
>1520	MultiplicativeExpression	320 * 240 * 4
>1521	MultiplicativeExpression	240 * 4
>1522	PrimaryExpression	4
>1523	PrimaryExpression	240
>1524	PrimaryExpression	320
>1525	Identifier	s
>1526	IdentifierDeclType	unsigned char [ 320 * 240 * 4 ]
>1527	Statement	 
>1528	IdentifierDeclStatement	 
>1529	IdentifierDecl	* fp
>1530	Identifier	fp
>1531	IdentifierDeclType	FILE *
<3=8,4
<4=5
<5=7,6
<8=9
<9=10
<10=12,11
<12=14,13
<22=28,27,23
<23=24
<24=26,25
<28=29
<29=30
<30=32,31
<32=34,33
<42=51,50,43
<43=47,44
<44=46,45
<47=49,48
<51=216,204,192,178,164,140,126,112,100,53,52
<53=93,54
<54=91,89,78,77,75,64,63,61,60,55
<55=56
<56=58,57
<58=59
<61=62
<64=65
<65=73,66
<66=71,69,67
<67=68
<69=70
<71=72
<73=74
<75=76
<78=79
<79=87,80
<80=85,83,81
<81=82
<83=84
<85=86
<87=88
<89=90
<91=92
<93=94
<94=96,95
<96=97
<97=99,98
<100=101
<101=111,110,102
<102=109,103
<103=105,104
<105=106
<106=108,107
<112=113
<113=125,124,114
<114=123,115
<115=122,116
<116=118,117
<118=119
<119=121,120
<126=127
<127=139,138,128
<128=137,129
<129=136,130
<130=132,131
<132=133
<133=135,134
<140=141
<141=162,142
<142=143
<143=144
<144=160,145
<145=153,146
<146=147
<147=149,148
<149=150
<150=152,151
<153=154
<154=156,155
<156=157
<157=159,158
<160=161
<162=163
<164=165
<165=176,166
<166=167
<167=168
<168=170,169
<170=174,171
<171=172
<172=173
<174=175
<176=177
<178=179
<179=190,180
<180=181
<181=182
<182=186,183
<183=184
<184=185
<186=187
<187=189,188
<190=191
<192=193
<193=203,202,194
<194=201,195
<195=197,196
<197=198
<198=200,199
<204=205
<205=215,214,206
<206=213,207
<207=209,208
<209=210
<210=212,211
<216=217
<217=227,226,218
<218=225,219
<219=221,220
<221=222
<222=224,223
<253=265,264,254
<254=261,258,255
<255=257,256
<258=260,259
<261=263,262
<265=729,712,708,704,691,680,625,267,266
<267=621,268
<268=597,585,581,577,553,541,537,533,509,497,493,489,465,453,449,445,421,409,405,401,377,365,361,357,333,321,317,313,289,277,273,269
<269=270
<270=272,271
<273=274
<274=276,275
<277=278
<278=286,279
<279=282,281,280
<282=283
<283=285,284
<286=288,287
<289=290
<290=312,291
<291=307,292
<292=300,293
<293=295,294
<295=299,296
<296=298,297
<300=302,301
<302=306,303
<303=305,304
<307=309,308
<309=311,310
<313=314
<314=316,315
<317=318
<318=320,319
<321=322
<322=330,323
<323=326,325,324
<326=327
<327=329,328
<330=332,331
<333=334
<334=356,335
<335=351,336
<336=344,337
<337=339,338
<339=343,340
<340=342,341
<344=346,345
<346=350,347
<347=349,348
<351=353,352
<353=355,354
<357=358
<358=360,359
<361=362
<362=364,363
<365=366
<366=374,367
<367=370,369,368
<370=371
<371=373,372
<374=376,375
<377=378
<378=400,379
<379=395,380
<380=388,381
<381=383,382
<383=387,384
<384=386,385
<388=390,389
<390=394,391
<391=393,392
<395=397,396
<397=399,398
<401=402
<402=404,403
<405=406
<406=408,407
<409=410
<410=418,411
<411=414,413,412
<414=415
<415=417,416
<418=420,419
<421=422
<422=444,423
<423=439,424
<424=432,425
<425=427,426
<427=431,428
<428=430,429
<432=434,433
<434=438,435
<435=437,436
<439=441,440
<441=443,442
<445=446
<446=448,447
<449=450
<450=452,451
<453=454
<454=462,455
<455=458,457,456
<458=459
<459=461,460
<462=464,463
<465=466
<466=488,467
<467=483,468
<468=476,469
<469=471,470
<471=475,472
<472=474,473
<476=478,477
<478=482,479
<479=481,480
<483=485,484
<485=487,486
<489=490
<490=492,491
<493=494
<494=496,495
<497=498
<498=506,499
<499=502,501,500
<502=503
<503=505,504
<506=508,507
<509=510
<510=532,511
<511=527,512
<512=520,513
<513=515,514
<515=519,516
<516=518,517
<520=522,521
<522=526,523
<523=525,524
<527=529,528
<529=531,530
<533=534
<534=536,535
<537=538
<538=540,539
<541=542
<542=550,543
<543=546,545,544
<546=547
<547=549,548
<550=552,551
<553=554
<554=576,555
<555=571,556
<556=564,557
<557=559,558
<559=563,560
<560=562,561
<564=566,565
<566=570,567
<567=569,568
<571=573,572
<573=575,574
<577=578
<578=580,579
<581=582
<582=584,583
<585=586
<586=594,587
<587=590,589,588
<590=591
<591=593,592
<594=596,595
<597=598
<598=620,599
<599=615,600
<600=608,601
<601=603,602
<603=607,604
<604=606,605
<608=610,609
<610=614,611
<611=613,612
<615=617,616
<617=619,618
<621=622
<622=624,623
<625=674,670,667,626
<626=643,631,627
<627=628
<628=630,629
<631=632
<632=640,633
<633=636,635,634
<636=637
<637=639,638
<640=642,641
<643=644
<644=666,645
<645=661,646
<646=654,647
<647=649,648
<649=653,650
<650=652,651
<654=656,655
<656=660,657
<657=659,658
<661=663,662
<663=665,664
<667=669,668
<670=671
<671=673,672
<674=675
<675=679,676
<676=678,677
<680=681
<681=690,689,682
<682=688,683
<683=687,684
<684=686,685
<691=692
<692=703,702,693
<693=701,694
<694=698,695
<695=697,696
<698=700,699
<704=705
<705=707,706
<708=709
<709=711,710
<712=713
<713=728,727,714
<714=726,715
<715=717,716
<717=719,718
<719=723,720
<720=722,721
<723=725,724
<729=730
<730=739,738,731
<731=737,732
<732=734,733
<734=736,735
<762=774,773,763
<763=770,767,764
<764=766,765
<767=769,768
<770=772,771
<774=1238,1221,1217,1213,1200,1189,1134,776,775
<776=1130,777
<777=1106,1094,1090,1086,1062,1050,1046,1042,1018,1006,1002,998,974,962,958,954,930,918,914,910,886,874,870,866,842,830,826,822,798,786,782,778
<778=779
<779=781,780
<782=783
<783=785,784
<786=787
<787=795,788
<788=791,790,789
<791=792
<792=794,793
<795=797,796
<798=799
<799=821,800
<800=816,801
<801=809,802
<802=804,803
<804=808,805
<805=807,806
<809=811,810
<811=815,812
<812=814,813
<816=818,817
<818=820,819
<822=823
<823=825,824
<826=827
<827=829,828
<830=831
<831=839,832
<832=835,834,833
<835=836
<836=838,837
<839=841,840
<842=843
<843=865,844
<844=860,845
<845=853,846
<846=848,847
<848=852,849
<849=851,850
<853=855,854
<855=859,856
<856=858,857
<860=862,861
<862=864,863
<866=867
<867=869,868
<870=871
<871=873,872
<874=875
<875=883,876
<876=879,878,877
<879=880
<880=882,881
<883=885,884
<886=887
<887=909,888
<888=904,889
<889=897,890
<890=892,891
<892=896,893
<893=895,894
<897=899,898
<899=903,900
<900=902,901
<904=906,905
<906=908,907
<910=911
<911=913,912
<914=915
<915=917,916
<918=919
<919=927,920
<920=923,922,921
<923=924
<924=926,925
<927=929,928
<930=931
<931=953,932
<932=948,933
<933=941,934
<934=936,935
<936=940,937
<937=939,938
<941=943,942
<943=947,944
<944=946,945
<948=950,949
<950=952,951
<954=955
<955=957,956
<958=959
<959=961,960
<962=963
<963=971,964
<964=967,966,965
<967=968
<968=970,969
<971=973,972
<974=975
<975=997,976
<976=992,977
<977=985,978
<978=980,979
<980=984,981
<981=983,982
<985=987,986
<987=991,988
<988=990,989
<992=994,993
<994=996,995
<998=999
<999=1001,1000
<1002=1003
<1003=1005,1004
<1006=1007
<1007=1015,1008
<1008=1011,1010,1009
<1011=1012
<1012=1014,1013
<1015=1017,1016
<1018=1019
<1019=1041,1020
<1020=1036,1021
<1021=1029,1022
<1022=1024,1023
<1024=1028,1025
<1025=1027,1026
<1029=1031,1030
<1031=1035,1032
<1032=1034,1033
<1036=1038,1037
<1038=1040,1039
<1042=1043
<1043=1045,1044
<1046=1047
<1047=1049,1048
<1050=1051
<1051=1059,1052
<1052=1055,1054,1053
<1055=1056
<1056=1058,1057
<1059=1061,1060
<1062=1063
<1063=1085,1064
<1064=1080,1065
<1065=1073,1066
<1066=1068,1067
<1068=1072,1069
<1069=1071,1070
<1073=1075,1074
<1075=1079,1076
<1076=1078,1077
<1080=1082,1081
<1082=1084,1083
<1086=1087
<1087=1089,1088
<1090=1091
<1091=1093,1092
<1094=1095
<1095=1103,1096
<1096=1099,1098,1097
<1099=1100
<1100=1102,1101
<1103=1105,1104
<1106=1107
<1107=1129,1108
<1108=1124,1109
<1109=1117,1110
<1110=1112,1111
<1112=1116,1113
<1113=1115,1114
<1117=1119,1118
<1119=1123,1120
<1120=1122,1121
<1124=1126,1125
<1126=1128,1127
<1130=1131
<1131=1133,1132
<1134=1183,1179,1176,1135
<1135=1152,1140,1136
<1136=1137
<1137=1139,1138
<1140=1141
<1141=1149,1142
<1142=1145,1144,1143
<1145=1146
<1146=1148,1147
<1149=1151,1150
<1152=1153
<1153=1175,1154
<1154=1170,1155
<1155=1163,1156
<1156=1158,1157
<1158=1162,1159
<1159=1161,1160
<1163=1165,1164
<1165=1169,1166
<1166=1168,1167
<1170=1172,1171
<1172=1174,1173
<1176=1178,1177
<1179=1180
<1180=1182,1181
<1183=1184
<1184=1188,1185
<1185=1187,1186
<1189=1190
<1190=1199,1198,1191
<1191=1197,1192
<1192=1196,1193
<1193=1195,1194
<1200=1201
<1201=1212,1211,1202
<1202=1210,1203
<1203=1207,1204
<1204=1206,1205
<1207=1209,1208
<1213=1214
<1214=1216,1215
<1217=1218
<1218=1220,1219
<1221=1222
<1222=1237,1236,1223
<1223=1235,1224
<1224=1226,1225
<1226=1228,1227
<1228=1232,1229
<1229=1231,1230
<1232=1234,1233
<1238=1239
<1239=1248,1247,1240
<1240=1246,1241
<1241=1243,1242
<1243=1245,1244
<1271=1277,1276,1272
<1272=1273
<1273=1275,1274
<1277=1278
<1278=1294,1279
<1279=1292,1290,1288,1286,1284,1282,1280
<1280=1281
<1282=1283
<1284=1285
<1286=1287
<1288=1289
<1290=1291
<1292=1293
<1294=1295
<1302=1305,1304,1303
<1305=1528,1527,1518,1487,1470,1463,1447,1440,1435,1425,1395,1386,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1364,1360,1344,1337,1310,1309,1307,1306
<1307=1308
<1310=1329,1323,1320,1311
<1311=1312
<1312=1313
<1313=1319,1314
<1314=1318,1315
<1315=1317,1316
<1320=1322,1321
<1323=1324
<1324=1328,1325
<1325=1327,1326
<1329=1330
<1330=1331
<1331=1336,1335,1332
<1332=1334,1333
<1337=1338
<1338=1343,1342,1339
<1339=1341,1340
<1344=1345
<1345=1359,1346
<1346=1358,1347
<1347=1349,1348
<1349=1350
<1350=1352,1351
<1352=1354,1353
<1354=1355
<1355=1357,1356
<1360=1361
<1361=1363,1362
<1364=1365
<1365=1369,1366
<1366=1367
<1367=1368
<1369=1370
<1381=1382
<1382=1385,1384,1383
<1386=1387
<1387=1394,1388
<1388=1390,1389
<1390=1392,1391
<1392=1393
<1395=1417,1413,1410,1396
<1396=1397
<1397=1398
<1398=1406,1399
<1399=1404,1400
<1400=1401
<1401=1403,1402
<1404=1405
<1406=1407
<1407=1409,1408
<1410=1412,1411
<1413=1414
<1414=1416,1415
<1417=1418
<1418=1419
<1419=1424,1423,1420
<1420=1422,1421
<1425=1426
<1426=1434,1433,1427
<1427=1432,1428
<1428=1430,1429
<1430=1431
<1435=1436
<1436=1439,1438,1437
<1440=1441
<1441=1446,1445,1442
<1442=1444,1443
<1447=1448
<1448=1462,1461,1449
<1449=1460,1450
<1450=1458,1451
<1451=1456,1454,1452
<1452=1453
<1454=1455
<1456=1457
<1458=1459
<1463=1464
<1464=1468,1465
<1465=1466
<1466=1467
<1468=1469
<1470=1471
<1471=1485,1472
<1472=1483,1481,1475,1473
<1473=1474
<1475=1476
<1476=1480,1477
<1477=1479,1478
<1481=1482
<1483=1484
<1485=1486
<1487=1505,1488
<1488=1498,1489
<1489=1490
<1490=1496,1491
<1491=1492
<1492=1493
<1493=1495,1494
<1496=1497
<1498=1499
<1499=1503,1500
<1500=1501
<1501=1502
<1503=1504
<1505=1506
<1506=1508,1507
<1508=1517,1509
<1509=1515,1510
<1510=1513,1511
<1511=1512
<1513=1514
<1515=1516
<1518=1519
<1519=1526,1525,1520
<1520=1524,1521
<1521=1523,1522
<1528=1529
<1529=1531,1530
