>3	FunctionDef	TwitchTMI 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	TwitchTMI 
>10	ParameterList	const CString & sArgsi , CString & sMessage
>11	Parameter	 
>12	Identifier	sMessage
>13	ParameterType	CString &
>14	Parameter	 
>15	Identifier	sArgsi
>16	ParameterType	const CString &
>17	ReturnType	bool
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	true
>21	ExpressionStatement	 
>22	CallExpression	PutIRC ( \"CAP REQ 
>23	ArgumentList	\"CAP REQ 
>24	Argument	\"CAP REQ 
>25	PrimaryExpression	\"CAP REQ 
>26	Callee	PutIRC
>27	Identifier	PutIRC
>28	ExpressionStatement	 
>29	CallExpression	PutIRC ( \"CAP REQ 
>30	ArgumentList	\"CAP REQ 
>31	Argument	\"CAP REQ 
>32	PrimaryExpression	\"CAP REQ 
>33	Callee	PutIRC
>34	Identifier	PutIRC
>35	ExpressionStatement	 
>36	CallExpression	max ( )
>37	ArgumentList	 
>38	Callee	max
>39	Identifier	max
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	IfStatement	if ( GetArgs ( ) . Token ( 0 ) != \"FrankerZ\" )
>52	Statement	 
>53	Condition	 
>54	EqualityExpression	GetArgs ( ) . Token ( 0 ) != \"FrankerZ\"
>55	PrimaryExpression	\"FrankerZ\"
>56	CallExpression	GetArgs ( ) . Token ( 0 )
>57	ArgumentList	0
>58	Argument	0
>59	PrimaryExpression	0
>60	Callee	GetArgs ( ) . Token
>61	MemberAccess	GetArgs ( ) . Token
>62	Identifier	Token
>63	CallExpression	GetArgs ( )
>64	ArgumentList	 
>65	Callee	GetArgs
>66	Identifier	GetArgs
>67	IfStatement	if ( GetNetwork ( ) )
>68	CompoundStatement	 
>69	CompoundStatement	 
>70	ExpressionStatement	 
>71	CallExpression	CThreadPool 
>72	ArgumentList	this , chname
>73	Argument	this , chname
>74	Expression	this , chname
>75	Identifier	chname
>76	Identifier	this
>77	Callee	CThreadPool 
>78	MemberAccess	CThreadPool 
>79	Identifier	addJob
>80	CallExpression	CThreadPool 
>81	ArgumentList	 
>82	Callee	CThreadPool 
>83	Identifier	CThreadPool 
>84	IdentifierDeclStatement	 
>85	IdentifierDecl	chname = ch -> GetName ( ) . substr ( 1 )
>86	AssignmentExpr	chname = ch -> GetName ( ) . substr ( 1 )
>87	CallExpression	ch -> GetName ( ) . substr ( 1 )
>88	ArgumentList	1
>89	Argument	1
>90	PrimaryExpression	1
>91	Callee	ch -> GetName ( ) . substr
>92	MemberAccess	ch -> GetName ( ) . substr
>93	Identifier	substr
>94	CallExpression	ch -> GetName ( )
>95	ArgumentList	 
>96	Callee	ch -> GetName
>97	PtrMemberAccess	ch -> GetName
>98	Identifier	GetName
>99	Identifier	ch
>100	Identifier	chname
>101	Identifier	chname
>102	IdentifierDeclType	CString
>103	ExpressionStatement	 
>104	CallExpression	ch -> SetTopic ( CString ( ) )
>105	ArgumentList	CString ( )
>106	Argument	CString ( )
>107	CallExpression	CString ( )
>108	ArgumentList	 
>109	Callee	CString
>110	Identifier	CString
>111	Callee	ch -> SetTopic
>112	PtrMemberAccess	ch -> SetTopic
>113	Identifier	SetTopic
>114	Identifier	ch
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Label	 
>124	Identifier	ch
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Condition	 
>130	CallExpression	GetNetwork ( )
>131	ArgumentList	 
>132	Callee	GetNetwork
>133	Identifier	GetNetwork
>134	ExpressionStatement	 
>135	CallExpression	OnBoot ( )
>136	ArgumentList	 
>137	Callee	OnBoot
>138	Identifier	OnBoot
>156	FunctionDef	TwitchTMI 
>157	ParameterList	 
>158	ReturnType	bool
>159	CompoundStatement	 
>160	ReturnStatement	 
>161	Identifier	true
>162	ExpressionStatement	 
>163	CallExpression	AddTimer ( timer )
>164	ArgumentList	timer
>165	Argument	timer
>166	Identifier	timer
>167	Callee	AddTimer
>168	Identifier	AddTimer
>169	ExpressionStatement	 
>170	AssignmentExpr	timer = new TwitchTMIUpdateTimer ( this )
>171	Identifier	this
>172	Identifier	timer
>173	ExpressionStatement	 
>174	CallExpression	initCurl ( )
>175	ArgumentList	 
>176	Callee	initCurl
>177	Identifier	initCurl
>184	FunctionDef	TwitchTMI 
>185	ParameterList	 
>186	ReturnType	void
>187	CompoundStatement	 
>188	ExpressionStatement	 
>189	CallExpression	PutIRC ( \"CAP REQ 
>190	ArgumentList	\"CAP REQ 
>191	Argument	\"CAP REQ 
>192	PrimaryExpression	\"CAP REQ 
>193	Callee	PutIRC
>194	Identifier	PutIRC
>195	ExpressionStatement	 
>196	CallExpression	PutIRC ( \"CAP REQ 
>197	ArgumentList	\"CAP REQ 
>198	Argument	\"CAP REQ 
>199	PrimaryExpression	\"CAP REQ 
>200	Callee	PutIRC
>201	Identifier	PutIRC
>205	FunctionDef	TwitchTMI 
>206	ParameterList	CString & sLine
>207	Parameter	 
>208	Identifier	sLine
>209	ParameterType	CString &
>210	ReturnType	CModule 
>211	CompoundStatement	 
>212	ReturnStatement	 
>213	Identifier	CModule 
>214	IfStatement	if ( sLine . Left ( 9 ) . Equals ( \"JTVCLIENT\" ) )
>215	ReturnStatement	 
>216	Identifier	CModule 
>217	Condition	 
>218	CallExpression	sLine . Left ( 9 ) . Equals ( \"JTVCLIENT\" )
>219	ArgumentList	\"JTVCLIENT\"
>220	Argument	\"JTVCLIENT\"
>221	PrimaryExpression	\"JTVCLIENT\"
>222	Callee	sLine . Left ( 9 ) . Equals
>223	MemberAccess	sLine . Left ( 9 ) . Equals
>224	Identifier	Equals
>225	CallExpression	sLine . Left ( 9 )
>226	ArgumentList	9
>227	Argument	9
>228	PrimaryExpression	9
>229	Callee	sLine . Left
>230	MemberAccess	sLine . Left
>231	Identifier	Left
>232	Identifier	sLine
>233	IfStatement	if ( sLine . Left ( 12 ) . Equals ( \"TWITCHCLIENT\" ) )
>234	ReturnStatement	 
>235	Identifier	CModule 
>236	Condition	 
>237	CallExpression	sLine . Left ( 12 ) . Equals ( \"TWITCHCLIENT\" )
>238	ArgumentList	\"TWITCHCLIENT\"
>239	Argument	\"TWITCHCLIENT\"
>240	PrimaryExpression	\"TWITCHCLIENT\"
>241	Callee	sLine . Left ( 12 ) . Equals
>242	MemberAccess	sLine . Left ( 12 ) . Equals
>243	Identifier	Equals
>244	CallExpression	sLine . Left ( 12 )
>245	ArgumentList	12
>246	Argument	12
>247	PrimaryExpression	12
>248	Callee	sLine . Left
>249	MemberAccess	sLine . Left
>250	Identifier	Left
>251	Identifier	sLine
>252	IfStatement	if ( sLine . Left ( 5 ) . Equals ( \"AWAY \" ) )
>253	ReturnStatement	 
>254	Identifier	CModule 
>255	Condition	 
>256	CallExpression	sLine . Left ( 5 ) . Equals ( \"AWAY \" )
>257	ArgumentList	\"AWAY \"
>258	Argument	\"AWAY \"
>259	PrimaryExpression	\"AWAY \"
>260	Callee	sLine . Left ( 5 ) . Equals
>261	MemberAccess	sLine . Left ( 5 ) . Equals
>262	Identifier	Equals
>263	CallExpression	sLine . Left ( 5 )
>264	ArgumentList	5
>265	Argument	5
>266	PrimaryExpression	5
>267	Callee	sLine . Left
>268	MemberAccess	sLine . Left
>269	Identifier	Left
>270	Identifier	sLine
>271	IfStatement	if ( sLine . Left ( 5 ) . Equals ( \"WHO #\" ) )
>272	ReturnStatement	 
>273	Identifier	CModule 
>274	Condition	 
>275	CallExpression	sLine . Left ( 5 ) . Equals ( \"WHO #\" )
>276	ArgumentList	\"WHO #\"
>277	Argument	\"WHO #\"
>278	PrimaryExpression	\"WHO #\"
>279	Callee	sLine . Left ( 5 ) . Equals
>280	MemberAccess	sLine . Left ( 5 ) . Equals
>281	Identifier	Equals
>282	CallExpression	sLine . Left ( 5 )
>283	ArgumentList	5
>284	Argument	5
>285	PrimaryExpression	5
>286	Callee	sLine . Left
>287	MemberAccess	sLine . Left
>288	Identifier	Left
>289	Identifier	sLine
>300	FunctionDef	TwitchTMI 
>301	ParameterList	CString & sChannel , CString & sKey
>302	Parameter	 
>303	Identifier	sKey
>304	ParameterType	CString &
>305	Parameter	 
>306	Identifier	sChannel
>307	ParameterType	CString &
>308	ReturnType	CModule 
>309	CompoundStatement	 
>310	ReturnStatement	 
>311	Identifier	CModule 
>312	ExpressionStatement	 
>313	CallExpression	CThreadPool 
>314	ArgumentList	this , chname
>315	Argument	this , chname
>316	Expression	this , chname
>317	Identifier	chname
>318	Identifier	this
>319	Callee	CThreadPool 
>320	MemberAccess	CThreadPool 
>321	Identifier	addJob
>322	CallExpression	CThreadPool 
>323	ArgumentList	 
>324	Callee	CThreadPool 
>325	Identifier	CThreadPool 
>326	IdentifierDeclStatement	 
>327	IdentifierDecl	chname = sChannel . substr ( 1 )
>328	AssignmentExpr	chname = sChannel . substr ( 1 )
>329	CallExpression	sChannel . substr ( 1 )
>330	ArgumentList	1
>331	Argument	1
>332	PrimaryExpression	1
>333	Callee	sChannel . substr
>334	MemberAccess	sChannel . substr
>335	Identifier	substr
>336	Identifier	sChannel
>337	Identifier	chname
>338	Identifier	chname
>339	IdentifierDeclType	CString
>350	FunctionDef	TwitchTMI 
>351	ParameterList	CPrivMessage & Message
>352	Parameter	 
>353	Identifier	Message
>354	ParameterType	CPrivMessage &
>355	ReturnType	CModule 
>356	CompoundStatement	 
>357	ReturnStatement	 
>358	Identifier	CModule 
>359	IfStatement	if ( Message . GetNick ( ) . GetNick ( ) . Equals ( \"jtv\" ) )
>360	ReturnStatement	 
>361	Identifier	CModule 
>362	Condition	 
>363	CallExpression	Message . GetNick ( ) . GetNick ( ) . Equals ( \"jtv\" )
>364	ArgumentList	\"jtv\"
>365	Argument	\"jtv\"
>366	PrimaryExpression	\"jtv\"
>367	Callee	Message . GetNick ( ) . GetNick ( ) . Equals
>368	MemberAccess	Message . GetNick ( ) . GetNick ( ) . Equals
>369	Identifier	Equals
>370	CallExpression	Message . GetNick ( ) . GetNick ( )
>371	ArgumentList	 
>372	Callee	Message . GetNick ( ) . GetNick
>373	MemberAccess	Message . GetNick ( ) . GetNick
>374	Identifier	GetNick
>375	CallExpression	Message . GetNick ( )
>376	ArgumentList	 
>377	Callee	Message . GetNick
>378	MemberAccess	Message . GetNick
>379	Identifier	GetNick
>380	Identifier	Message
>390	FunctionDef	TwitchTMI 
>391	ParameterList	CChanMessage & Message
>392	Parameter	 
>393	Identifier	Message
>394	ParameterType	CChanMessage &
>395	ReturnType	CModule 
>396	CompoundStatement	 
>397	ReturnStatement	 
>398	Identifier	CModule 
>399	IfStatement	if ( realNick != \"\" )
>400	CompoundStatement	 
>401	ExpressionStatement	 
>402	CallExpression	Message . GetNick ( ) . SetNick ( realNick )
>403	ArgumentList	realNick
>404	Argument	realNick
>405	Identifier	realNick
>406	Callee	Message . GetNick ( ) . SetNick
>407	MemberAccess	Message . GetNick ( ) . SetNick
>408	Identifier	SetNick
>409	CallExpression	Message . GetNick ( )
>410	ArgumentList	 
>411	Callee	Message . GetNick
>412	MemberAccess	Message . GetNick
>413	Identifier	GetNick
>414	Identifier	Message
>415	Condition	 
>416	EqualityExpression	realNick != \"\"
>417	PrimaryExpression	\"\"
>418	Identifier	realNick
>419	IdentifierDeclStatement	 
>420	IdentifierDecl	realNick = Message . GetTag ( \"display-name\" ) . Trim_n ( )
>421	AssignmentExpr	realNick = Message . GetTag ( \"display-name\" ) . Trim_n ( )
>422	CallExpression	Message . GetTag ( \"display-name\" ) . Trim_n ( )
>423	ArgumentList	 
>424	Callee	Message . GetTag ( \"display-name\" ) . Trim_n
>425	MemberAccess	Message . GetTag ( \"display-name\" ) . Trim_n
>426	Identifier	Trim_n
>427	CallExpression	Message . GetTag ( \"display-name\" )
>428	ArgumentList	\"display-name\"
>429	Argument	\"display-name\"
>430	PrimaryExpression	\"display-name\"
>431	Callee	Message . GetTag
>432	MemberAccess	Message . GetTag
>433	Identifier	GetTag
>434	Identifier	Message
>435	Identifier	realNick
>436	Identifier	realNick
>437	IdentifierDeclType	CString
>438	IfStatement	if ( Message . GetText ( ) == \"FrankerZ\" && std 
>439	CompoundStatement	 
>440	ExpressionStatement	 
>441	AssignmentExpr	lastFrankerZ = std 
>442	CallExpression	std 
>443	ArgumentList	nullptr
>444	Argument	nullptr
>445	Identifier	nullptr
>446	Callee	std 
>447	Identifier	std 
>448	Identifier	lastFrankerZ
>449	ExpressionStatement	 
>450	Statement	 
>451	Statement	 
>452	CompoundStatement	 
>453	IfStatement	if ( ! chan -> AutoClearChanBuffer ( ) || ! GetNetwork ( ) -> IsUserOnline ( ) || chan -> IsDetached ( ) )
>454	CompoundStatement	 
>455	ExpressionStatement	 
>456	CallExpression	chan -> AddBuffer ( s2 + \"{text}\" , \"FrankerZ\" )
>457	ArgumentList	s2 + \"{text}\"
>458	Argument	\"FrankerZ\"
>459	PrimaryExpression	\"FrankerZ\"
>460	Argument	s2 + \"{text}\"
>461	AdditiveExpression	s2 + \"{text}\"
>462	PrimaryExpression	\"{text}\"
>463	Identifier	s2
>464	Callee	chan -> AddBuffer
>465	PtrMemberAccess	chan -> AddBuffer
>466	Identifier	AddBuffer
>467	Identifier	chan
>468	Condition	 
>469	OrExpression	! chan -> AutoClearChanBuffer ( ) || ! GetNetwork ( ) -> IsUserOnline ( ) || chan -> IsDetached ( )
>470	OrExpression	! GetNetwork ( ) -> IsUserOnline ( ) || chan -> IsDetached ( )
>471	CallExpression	chan -> IsDetached ( )
>472	ArgumentList	 
>473	Callee	chan -> IsDetached
>474	PtrMemberAccess	chan -> IsDetached
>475	Identifier	IsDetached
>476	Identifier	chan
>477	UnaryOp	! GetNetwork ( ) -> IsUserOnline ( )
>478	CallExpression	GetNetwork ( ) -> IsUserOnline ( )
>479	ArgumentList	 
>480	Callee	GetNetwork ( ) -> IsUserOnline
>481	PtrMemberAccess	GetNetwork ( ) -> IsUserOnline
>482	Identifier	IsUserOnline
>483	CallExpression	GetNetwork ( )
>484	ArgumentList	 
>485	Callee	GetNetwork
>486	Identifier	GetNetwork
>487	UnaryOperator	!
>488	UnaryOp	! chan -> AutoClearChanBuffer ( )
>489	CallExpression	chan -> AutoClearChanBuffer ( )
>490	ArgumentList	 
>491	Callee	chan -> AutoClearChanBuffer
>492	PtrMemberAccess	chan -> AutoClearChanBuffer
>493	Identifier	AutoClearChanBuffer
>494	Identifier	chan
>495	UnaryOperator	!
>496	ExpressionStatement	 
>497	CallExpression	PutUser ( s2 + \"FrankerZ\" )
>498	ArgumentList	s2 + \"FrankerZ\"
>499	Argument	s2 + \"FrankerZ\"
>500	AdditiveExpression	s2 + \"FrankerZ\"
>501	PrimaryExpression	\"FrankerZ\"
>502	Identifier	s2
>503	Callee	PutUser
>504	Identifier	PutUser
>505	Statement	 
>506	Statement	 
>507	Statement	 
>508	Statement	 
>509	Statement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	CompoundStatement	 
>516	Statement	 
>517	Statement	 
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	Statement	 
>526	Statement	 
>527	Statement	 
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	IdentifierDeclStatement	 
>532	IdentifierDecl	s2 = ss2 . str ( )
>533	AssignmentExpr	s2 = ss2 . str ( )
>534	CallExpression	ss2 . str ( )
>535	ArgumentList	 
>536	Callee	ss2 . str
>537	MemberAccess	ss2 . str
>538	Identifier	str
>539	Identifier	ss2
>540	Identifier	s2
>541	Identifier	s2
>542	IdentifierDeclType	CString
>543	ExpressionStatement	 
>544	CallExpression	PutIRC ( ss1 . str ( ) )
>545	ArgumentList	ss1 . str ( )
>546	Argument	ss1 . str ( )
>547	CallExpression	ss1 . str ( )
>548	ArgumentList	 
>549	Callee	ss1 . str
>550	MemberAccess	ss1 . str
>551	Identifier	str
>552	Identifier	ss1
>553	Callee	PutIRC
>554	Identifier	PutIRC
>555	ExpressionStatement	 
>556	ShiftExpression	ss2 << \"
>557	ShiftExpression	\"
>558	ShiftExpression	mynick << \" PRIVMSG \" << chan -> GetName ( ) << \" 
>559	ShiftExpression	\" PRIVMSG \" << chan -> GetName ( ) << \" 
>560	ShiftExpression	chan -> GetName ( ) << \" 
>561	PrimaryExpression	\" 
>562	CallExpression	chan -> GetName ( )
>563	ArgumentList	 
>564	Callee	chan -> GetName
>565	PtrMemberAccess	chan -> GetName
>566	Identifier	GetName
>567	Identifier	chan
>568	PrimaryExpression	\" PRIVMSG \"
>569	Identifier	mynick
>570	PrimaryExpression	\"
>571	Identifier	ss2
>572	ExpressionStatement	 
>573	ShiftExpression	ss1 << \"PRIVMSG \" << chan -> GetName ( ) << \" 
>574	ShiftExpression	\"PRIVMSG \" << chan -> GetName ( ) << \" 
>575	ShiftExpression	chan -> GetName ( ) << \" 
>576	PrimaryExpression	\" 
>577	CallExpression	chan -> GetName ( )
>578	ArgumentList	 
>579	Callee	chan -> GetName
>580	PtrMemberAccess	chan -> GetName
>581	Identifier	GetName
>582	Identifier	chan
>583	PrimaryExpression	\"PRIVMSG \"
>584	Identifier	ss1
>585	IdentifierDeclStatement	 
>586	IdentifierDecl	* chan = Message . GetChan ( )
>587	AssignmentExpr	* chan = Message . GetChan ( )
>588	CallExpression	Message . GetChan ( )
>589	ArgumentList	 
>590	Callee	Message . GetChan
>591	MemberAccess	Message . GetChan
>592	Identifier	GetChan
>593	Identifier	Message
>594	Identifier	chan
>595	Identifier	chan
>596	IdentifierDeclType	CChan *
>597	IdentifierDeclStatement	 
>598	IdentifierDecl	mynick = GetNetwork ( ) -> GetIRCNick ( ) . GetNickMask ( )
>599	AssignmentExpr	mynick = GetNetwork ( ) -> GetIRCNick ( ) . GetNickMask ( )
>600	CallExpression	GetNetwork ( ) -> GetIRCNick ( ) . GetNickMask ( )
>601	ArgumentList	 
>602	Callee	GetNetwork ( ) -> GetIRCNick ( ) . GetNickMask
>603	MemberAccess	GetNetwork ( ) -> GetIRCNick ( ) . GetNickMask
>604	Identifier	GetNickMask
>605	CallExpression	GetNetwork ( ) -> GetIRCNick ( )
>606	ArgumentList	 
>607	Callee	GetNetwork ( ) -> GetIRCNick
>608	PtrMemberAccess	GetNetwork ( ) -> GetIRCNick
>609	Identifier	GetIRCNick
>610	CallExpression	GetNetwork ( )
>611	ArgumentList	 
>612	Callee	GetNetwork
>613	Identifier	GetNetwork
>614	Identifier	mynick
>615	Identifier	mynick
>616	IdentifierDeclType	CString
>617	IdentifierDeclStatement	 
>618	IdentifierDecl	ss2
>619	Identifier	ss2
>620	IdentifierDeclType	std 
>621	IdentifierDecl	ss1
>622	Identifier	ss1
>623	IdentifierDeclType	std 
>624	Condition	 
>625	AndExpression	Message . GetText ( ) == \"FrankerZ\" && std 
>626	RelationalExpression	std 
>627	PrimaryExpression	10
>628	AdditiveExpression	std 
>629	Identifier	lastFrankerZ
>630	CallExpression	std 
>631	ArgumentList	nullptr
>632	Argument	nullptr
>633	Identifier	nullptr
>634	Callee	std 
>635	Identifier	std 
>636	EqualityExpression	Message . GetText ( ) == \"FrankerZ\"
>637	PrimaryExpression	\"FrankerZ\"
>638	CallExpression	Message . GetText ( )
>639	ArgumentList	 
>640	Callee	Message . GetText
>641	MemberAccess	Message . GetText
>642	Identifier	GetText
>643	Identifier	Message
>644	IfStatement	if ( Message . GetNick ( ) . GetNick ( ) . Equals ( \"jtv\" ) )
>645	ReturnStatement	 
>646	Identifier	CModule 
>647	Condition	 
>648	CallExpression	Message . GetNick ( ) . GetNick ( ) . Equals ( \"jtv\" )
>649	ArgumentList	\"jtv\"
>650	Argument	\"jtv\"
>651	PrimaryExpression	\"jtv\"
>652	Callee	Message . GetNick ( ) . GetNick ( ) . Equals
>653	MemberAccess	Message . GetNick ( ) . GetNick ( ) . Equals
>654	Identifier	Equals
>655	CallExpression	Message . GetNick ( ) . GetNick ( )
>656	ArgumentList	 
>657	Callee	Message . GetNick ( ) . GetNick
>658	MemberAccess	Message . GetNick ( ) . GetNick
>659	Identifier	GetNick
>660	CallExpression	Message . GetNick ( )
>661	ArgumentList	 
>662	Callee	Message . GetNick
>663	MemberAccess	Message . GetNick
>664	Identifier	GetNick
>665	Identifier	Message
>698	FunctionDef	TwitchTMI 
>699	ParameterList	CChanAction & Message
>700	Parameter	 
>701	Identifier	Message
>702	ParameterType	CChanAction &
>703	ReturnType	CModule 
>704	CompoundStatement	 
>705	ReturnStatement	 
>706	Identifier	CModule 
>707	IfStatement	if ( realNick != \"\" )
>708	CompoundStatement	 
>709	ExpressionStatement	 
>710	CallExpression	Message . GetNick ( ) . SetNick ( realNick )
>711	ArgumentList	realNick
>712	Argument	realNick
>713	Identifier	realNick
>714	Callee	Message . GetNick ( ) . SetNick
>715	MemberAccess	Message . GetNick ( ) . SetNick
>716	Identifier	SetNick
>717	CallExpression	Message . GetNick ( )
>718	ArgumentList	 
>719	Callee	Message . GetNick
>720	MemberAccess	Message . GetNick
>721	Identifier	GetNick
>722	Identifier	Message
>723	Condition	 
>724	EqualityExpression	realNick != \"\"
>725	PrimaryExpression	\"\"
>726	Identifier	realNick
>727	IdentifierDeclStatement	 
>728	IdentifierDecl	realNick = Message . GetTag ( \"display-name\" ) . Trim_n ( )
>729	AssignmentExpr	realNick = Message . GetTag ( \"display-name\" ) . Trim_n ( )
>730	CallExpression	Message . GetTag ( \"display-name\" ) . Trim_n ( )
>731	ArgumentList	 
>732	Callee	Message . GetTag ( \"display-name\" ) . Trim_n
>733	MemberAccess	Message . GetTag ( \"display-name\" ) . Trim_n
>734	Identifier	Trim_n
>735	CallExpression	Message . GetTag ( \"display-name\" )
>736	ArgumentList	\"display-name\"
>737	Argument	\"display-name\"
>738	PrimaryExpression	\"display-name\"
>739	Callee	Message . GetTag
>740	MemberAccess	Message . GetTag
>741	Identifier	GetTag
>742	Identifier	Message
>743	Identifier	realNick
>744	Identifier	realNick
>745	IdentifierDeclType	CString
>755	FunctionDef	TwitchTMI 
>756	ParameterList	const CString & sCap
>757	Parameter	 
>758	Identifier	sCap
>759	ParameterType	const CString &
>760	ReturnType	bool
>761	CompoundStatement	 
>762	ReturnStatement	 
>763	Identifier	false
>764	ExpressionStatement	 
>765	CallExpression	CUtils 
>766	ArgumentList	CString ( \"TwitchTMI
>767	Argument	CString ( \"TwitchTMI
>768	AdditiveExpression	CString ( \"TwitchTMI
>769	AdditiveExpression	sCap + \" cap\"
>770	PrimaryExpression	\" cap\"
>771	Identifier	sCap
>772	CallExpression	CString ( \"TwitchTMI
>773	ArgumentList	\"TwitchTMI
>774	Argument	\"TwitchTMI
>775	PrimaryExpression	\"TwitchTMI
>776	Callee	CString
>777	Identifier	CString
>778	Callee	CUtils 
>779	Identifier	CUtils 
>780	IfStatement	if ( sCap == \"twitch.tv/membership\" )
>781	ElseStatement	else
>782	IfStatement	if ( sCap == \"twitch.tv/tags\" )
>783	CompoundStatement	 
>784	ReturnStatement	 
>785	Identifier	true
>786	ExpressionStatement	 
>787	CallExpression	CUtils 
>788	ArgumentList	\"TwitchTMI
>789	Argument	\"TwitchTMI
>790	PrimaryExpression	\"TwitchTMI
>791	Callee	CUtils 
>792	Identifier	CUtils 
>793	Condition	 
>794	EqualityExpression	sCap == \"twitch.tv/tags\"
>795	PrimaryExpression	\"twitch.tv/tags\"
>796	Identifier	sCap
>797	CompoundStatement	 
>798	ReturnStatement	 
>799	Identifier	true
>800	ExpressionStatement	 
>801	CallExpression	CUtils 
>802	ArgumentList	\"TwitchTMI
>803	Argument	\"TwitchTMI
>804	PrimaryExpression	\"TwitchTMI
>805	Callee	CUtils 
>806	Identifier	CUtils 
>807	Condition	 
>808	EqualityExpression	sCap == \"twitch.tv/membership\"
>809	PrimaryExpression	\"twitch.tv/membership\"
>810	Identifier	sCap
>818	FunctionDef	TwitchTMIUpdateTimer 
>819	ParameterList	TwitchTMI * tmod
>820	Parameter	 
>821	Identifier	tmod
>822	ParameterType	TwitchTMI *
>823	CompoundStatement	 
>828	FunctionDef	TwitchTMIUpdateTimer 
>829	ParameterList	 
>830	ReturnType	void
>831	CompoundStatement	 
>832	CompoundStatement	 
>833	ExpressionStatement	 
>834	CallExpression	CThreadPool 
>835	ArgumentList	mod , chname
>836	Argument	mod , chname
>837	Expression	mod , chname
>838	Identifier	chname
>839	Identifier	mod
>840	Callee	CThreadPool 
>841	MemberAccess	CThreadPool 
>842	Identifier	addJob
>843	CallExpression	CThreadPool 
>844	ArgumentList	 
>845	Callee	CThreadPool 
>846	Identifier	CThreadPool 
>847	IdentifierDeclStatement	 
>848	IdentifierDecl	chname = chan -> GetName ( ) . substr ( 1 )
>849	AssignmentExpr	chname = chan -> GetName ( ) . substr ( 1 )
>850	CallExpression	chan -> GetName ( ) . substr ( 1 )
>851	ArgumentList	1
>852	Argument	1
>853	PrimaryExpression	1
>854	Callee	chan -> GetName ( ) . substr
>855	MemberAccess	chan -> GetName ( ) . substr
>856	Identifier	substr
>857	CallExpression	chan -> GetName ( )
>858	ArgumentList	 
>859	Callee	chan -> GetName
>860	PtrMemberAccess	chan -> GetName
>861	Identifier	GetName
>862	Identifier	chan
>863	Identifier	chname
>864	Identifier	chname
>865	IdentifierDeclType	CString
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	Label	 
>877	Identifier	chan
>878	Statement	 
>879	Statement	 
>880	Statement	 
>881	Statement	 
>882	IfStatement	if ( ! mod -> GetNetwork ( ) )
>883	ReturnStatement	 
>884	Condition	 
>885	UnaryOp	! mod -> GetNetwork ( )
>886	CallExpression	mod -> GetNetwork ( )
>887	ArgumentList	 
>888	Callee	mod -> GetNetwork
>889	PtrMemberAccess	mod -> GetNetwork
>890	Identifier	GetNetwork
>891	Identifier	mod
>892	UnaryOperator	!
>905	FunctionDef	TwitchTMIJob 
>906	ParameterList	 
>907	ReturnType	void
>908	CompoundStatement	 
>909	ExpressionStatement	 
>910	CallExpression	title . Trim ( )
>911	ArgumentList	 
>912	Callee	title . Trim
>913	MemberAccess	title . Trim
>914	Identifier	Trim
>915	Identifier	title
>916	ExpressionStatement	 
>917	AssignmentExpr	title = titleVal . asString ( )
>918	CallExpression	titleVal . asString ( )
>919	ArgumentList	 
>920	Callee	titleVal . asString
>921	MemberAccess	titleVal . asString
>922	Identifier	asString
>923	Identifier	titleVal
>924	Identifier	title
>925	IfStatement	if ( ! titleVal . isString ( ) )
>926	ReturnStatement	 
>927	Condition	 
>928	UnaryOp	! titleVal . isString ( )
>929	CallExpression	titleVal . isString ( )
>930	ArgumentList	 
>931	Callee	titleVal . isString
>932	MemberAccess	titleVal . isString
>933	Identifier	isString
>934	Identifier	titleVal
>935	UnaryOperator	!
>936	IfStatement	if ( ! titleVal . isString ( ) )
>937	ExpressionStatement	 
>938	AssignmentExpr	titleVal = root [ \"title\" ]
>939	ArrayIndexing	root [ \"title\" ]
>940	PrimaryExpression	\"title\"
>941	Identifier	root
>942	Identifier	titleVal
>943	Condition	 
>944	UnaryOp	! titleVal . isString ( )
>945	CallExpression	titleVal . isString ( )
>946	ArgumentList	 
>947	Callee	titleVal . isString
>948	MemberAccess	titleVal . isString
>949	Identifier	isString
>950	Identifier	titleVal
>951	UnaryOperator	!
>952	ExpressionStatement	 
>953	AssignmentExpr	title = CString ( )
>954	CallExpression	CString ( )
>955	ArgumentList	 
>956	Callee	CString
>957	Identifier	CString
>958	Identifier	title
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	& titleVal = root [ \"status\" ]
>961	AssignmentExpr	& titleVal = root [ \"status\" ]
>962	ArrayIndexing	root [ \"status\" ]
>963	PrimaryExpression	\"status\"
>964	Identifier	root
>965	Identifier	titleVal
>966	Identifier	titleVal
>967	IdentifierDeclType	Json 
>968	IfStatement	if ( root . isNull ( ) )
>969	CompoundStatement	 
>970	ReturnStatement	 
>971	Condition	 
>972	CallExpression	root . isNull ( )
>973	ArgumentList	 
>974	Callee	root . isNull
>975	MemberAccess	root . isNull
>976	Identifier	isNull
>977	Identifier	root
>978	IdentifierDeclStatement	 
>979	IdentifierDecl	root = getJsonFromUrl ( url . c_str ( ) , \"Accept
>980	AssignmentExpr	root = getJsonFromUrl ( url . c_str ( ) , \"Accept
>981	CallExpression	getJsonFromUrl ( url . c_str ( ) , \"Accept
>982	ArgumentList	url . c_str ( )
>983	Argument	\"Accept
>984	PrimaryExpression	\"Accept
>985	Argument	url . c_str ( )
>986	CallExpression	url . c_str ( )
>987	ArgumentList	 
>988	Callee	url . c_str
>989	MemberAccess	url . c_str
>990	Identifier	c_str
>991	Identifier	url
>992	Callee	getJsonFromUrl
>993	Identifier	getJsonFromUrl
>994	Identifier	root
>995	Identifier	root
>996	IdentifierDeclType	Json 
>997	IdentifierDeclStatement	 
>998	IdentifierDecl	url = ss . str ( )
>999	AssignmentExpr	url = ss . str ( )
>1000	CallExpression	ss . str ( )
>1001	ArgumentList	 
>1002	Callee	ss . str
>1003	MemberAccess	ss . str
>1004	Identifier	str
>1005	Identifier	ss
>1006	Identifier	url
>1007	Identifier	url
>1008	IdentifierDeclType	CString
>1009	ExpressionStatement	 
>1010	ShiftExpression	ss << \"https
>1011	ShiftExpression	\"https
>1012	Identifier	channel
>1013	PrimaryExpression	\"https
>1014	Identifier	ss
>1015	IdentifierDeclStatement	 
>1016	IdentifierDecl	ss
>1017	Identifier	ss
>1018	IdentifierDeclType	std 
>1035	FunctionDef	TwitchTMIJob 
>1036	ParameterList	 
>1037	ReturnType	void
>1038	CompoundStatement	 
>1039	IfStatement	if ( chan -> GetTopic ( ) != title )
>1040	CompoundStatement	 
>1041	ExpressionStatement	 
>1042	CallExpression	mod -> PutUser ( ss . str ( ) )
>1043	ArgumentList	ss . str ( )
>1044	Argument	ss . str ( )
>1045	CallExpression	ss . str ( )
>1046	ArgumentList	 
>1047	Callee	ss . str
>1048	MemberAccess	ss . str
>1049	Identifier	str
>1050	Identifier	ss
>1051	Callee	mod -> PutUser
>1052	PtrMemberAccess	mod -> PutUser
>1053	Identifier	PutUser
>1054	Identifier	mod
>1055	ExpressionStatement	 
>1056	ShiftExpression	ss << \"
>1057	ShiftExpression	\"
>1058	ShiftExpression	channel << \" 
>1059	ShiftExpression	\" 
>1060	Identifier	title
>1061	PrimaryExpression	\" 
>1062	Identifier	channel
>1063	PrimaryExpression	\"
>1064	Identifier	ss
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	ss
>1067	Identifier	ss
>1068	IdentifierDeclType	std 
>1069	ExpressionStatement	 
>1070	CallExpression	chan -> SetTopicDate ( ( unsigned long ) time ( nullptr ) )
>1071	ArgumentList	( unsigned long ) time ( nullptr )
>1072	Argument	( unsigned long ) time ( nullptr )
>1073	CastExpression	( unsigned long ) time ( nullptr )
>1074	CallExpression	time ( nullptr )
>1075	ArgumentList	nullptr
>1076	Argument	nullptr
>1077	Identifier	nullptr
>1078	Callee	time
>1079	Identifier	time
>1080	CastTarget	unsigned long
>1081	Callee	chan -> SetTopicDate
>1082	PtrMemberAccess	chan -> SetTopicDate
>1083	Identifier	SetTopicDate
>1084	Identifier	chan
>1085	ExpressionStatement	 
>1086	CallExpression	chan -> SetTopicOwner ( \"jtv\" )
>1087	ArgumentList	\"jtv\"
>1088	Argument	\"jtv\"
>1089	PrimaryExpression	\"jtv\"
>1090	Callee	chan -> SetTopicOwner
>1091	PtrMemberAccess	chan -> SetTopicOwner
>1092	Identifier	SetTopicOwner
>1093	Identifier	chan
>1094	ExpressionStatement	 
>1095	CallExpression	chan -> SetTopic ( title )
>1096	ArgumentList	title
>1097	Argument	title
>1098	Identifier	title
>1099	Callee	chan -> SetTopic
>1100	PtrMemberAccess	chan -> SetTopic
>1101	Identifier	SetTopic
>1102	Identifier	chan
>1103	Condition	 
>1104	EqualityExpression	chan -> GetTopic ( ) != title
>1105	Identifier	title
>1106	CallExpression	chan -> GetTopic ( )
>1107	ArgumentList	 
>1108	Callee	chan -> GetTopic
>1109	PtrMemberAccess	chan -> GetTopic
>1110	Identifier	GetTopic
>1111	Identifier	chan
>1112	IfStatement	if ( ! chan )
>1113	ReturnStatement	 
>1114	Condition	 
>1115	UnaryOp	! chan
>1116	Identifier	chan
>1117	UnaryOperator	!
>1118	IdentifierDeclStatement	 
>1119	IdentifierDecl	* chan = mod -> GetNetwork ( ) -> FindChan ( CString ( \"#\" ) + channel )
>1120	AssignmentExpr	* chan = mod -> GetNetwork ( ) -> FindChan ( CString ( \"#\" ) + channel )
>1121	CallExpression	mod -> GetNetwork ( ) -> FindChan ( CString ( \"#\" ) + channel )
>1122	ArgumentList	CString ( \"#\" ) + channel
>1123	Argument	CString ( \"#\" ) + channel
>1124	AdditiveExpression	CString ( \"#\" ) + channel
>1125	Identifier	channel
>1126	CallExpression	CString ( \"#\" )
>1127	ArgumentList	\"#\"
>1128	Argument	\"#\"
>1129	PrimaryExpression	\"#\"
>1130	Callee	CString
>1131	Identifier	CString
>1132	Callee	mod -> GetNetwork ( ) -> FindChan
>1133	PtrMemberAccess	mod -> GetNetwork ( ) -> FindChan
>1134	Identifier	FindChan
>1135	CallExpression	mod -> GetNetwork ( )
>1136	ArgumentList	 
>1137	Callee	mod -> GetNetwork
>1138	PtrMemberAccess	mod -> GetNetwork
>1139	Identifier	GetNetwork
>1140	Identifier	mod
>1141	Identifier	chan
>1142	Identifier	chan
>1143	IdentifierDeclType	CChan *
>1144	IfStatement	if ( title . empty ( ) )
>1145	ReturnStatement	 
>1146	Condition	 
>1147	CallExpression	title . empty ( )
>1148	ArgumentList	 
>1149	Callee	title . empty
>1150	MemberAccess	title . empty
>1151	Identifier	empty
>1152	Identifier	title
<3=5,4
<9=18,17,10
<10=14,11
<11=13,12
<14=16,15
<18=134,67,51,50,49,48,47,46,45,44,43,42,41,40,35,28,21,19
<19=20
<21=22
<22=26,23
<23=24
<24=25
<26=27
<28=29
<29=33,30
<30=31
<31=32
<33=34
<35=36
<36=38,37
<38=39
<51=53,52
<53=54
<54=56,55
<56=60,57
<57=58
<58=59
<60=61
<61=63,62
<63=65,64
<65=66
<67=129,68
<68=128,127,126,125,123,122,121,120,119,118,117,116,115,69
<69=103,84,70
<70=71
<71=77,72
<72=73
<73=74
<74=76,75
<77=78
<78=80,79
<80=82,81
<82=83
<84=85
<85=102,101,86
<86=100,87
<87=91,88
<88=89
<89=90
<91=92
<92=94,93
<94=96,95
<96=97
<97=99,98
<103=104
<104=111,105
<105=106
<106=107
<107=109,108
<109=110
<111=112
<112=114,113
<123=124
<129=130
<130=132,131
<132=133
<134=135
<135=137,136
<137=138
<156=159,158,157
<159=173,169,162,160
<160=161
<162=163
<163=167,164
<164=165
<165=166
<167=168
<169=170
<170=172,171
<173=174
<174=176,175
<176=177
<184=187,186,185
<187=195,188
<188=189
<189=193,190
<190=191
<191=192
<193=194
<195=196
<196=200,197
<197=198
<198=199
<200=201
<205=211,210,206
<206=207
<207=209,208
<211=271,252,233,214,212
<212=213
<214=217,215
<215=216
<217=218
<218=222,219
<219=220
<220=221
<222=223
<223=225,224
<225=229,226
<226=227
<227=228
<229=230
<230=232,231
<233=236,234
<234=235
<236=237
<237=241,238
<238=239
<239=240
<241=242
<242=244,243
<244=248,245
<245=246
<246=247
<248=249
<249=251,250
<252=255,253
<253=254
<255=256
<256=260,257
<257=258
<258=259
<260=261
<261=263,262
<263=267,264
<264=265
<265=266
<267=268
<268=270,269
<271=274,272
<272=273
<274=275
<275=279,276
<276=277
<277=278
<279=280
<280=282,281
<282=286,283
<283=284
<284=285
<286=287
<287=289,288
<300=309,308,301
<301=305,302
<302=304,303
<305=307,306
<309=326,312,310
<310=311
<312=313
<313=319,314
<314=315
<315=316
<316=318,317
<319=320
<320=322,321
<322=324,323
<324=325
<326=327
<327=339,338,328
<328=337,329
<329=333,330
<330=331
<331=332
<333=334
<334=336,335
<350=356,355,351
<351=352
<352=354,353
<356=359,357
<357=358
<359=362,360
<360=361
<362=363
<363=367,364
<364=365
<365=366
<367=368
<368=370,369
<370=372,371
<372=373
<373=375,374
<375=377,376
<377=378
<378=380,379
<390=396,395,391
<391=392
<392=394,393
<396=644,438,419,399,397
<397=398
<399=415,400
<400=401
<401=402
<402=406,403
<403=404
<404=405
<406=407
<407=409,408
<409=411,410
<411=412
<412=414,413
<415=416
<416=418,417
<419=420
<420=437,436,421
<421=435,422
<422=424,423
<424=425
<425=427,426
<427=431,428
<428=429
<429=430
<431=432
<432=434,433
<438=624,439
<439=617,597,585,572,555,543,531,530,529,528,527,526,525,524,523,522,521,520,519,518,517,516,515,514,513,512,511,510,509,508,507,506,505,452,451,450,449,440
<440=441
<441=448,442
<442=446,443
<443=444
<444=445
<446=447
<452=496,453
<453=468,454
<454=455
<455=456
<456=464,457
<457=460,458
<458=459
<460=461
<461=463,462
<464=465
<465=467,466
<468=469
<469=488,470
<470=477,471
<471=473,472
<473=474
<474=476,475
<477=487,478
<478=480,479
<480=481
<481=483,482
<483=485,484
<485=486
<488=495,489
<489=491,490
<491=492
<492=494,493
<496=497
<497=503,498
<498=499
<499=500
<500=502,501
<503=504
<531=532
<532=542,541,533
<533=540,534
<534=536,535
<536=537
<537=539,538
<543=544
<544=553,545
<545=546
<546=547
<547=549,548
<549=550
<550=552,551
<553=554
<555=556
<556=571,557
<557=570,558
<558=569,559
<559=568,560
<560=562,561
<562=564,563
<564=565
<565=567,566
<572=573
<573=584,574
<574=583,575
<575=577,576
<577=579,578
<579=580
<580=582,581
<585=586
<586=596,595,587
<587=594,588
<588=590,589
<590=591
<591=593,592
<597=598
<598=616,615,599
<599=614,600
<600=602,601
<602=603
<603=605,604
<605=607,606
<607=608
<608=610,609
<610=612,611
<612=613
<617=621,618
<618=620,619
<621=623,622
<624=625
<625=636,626
<626=628,627
<628=630,629
<630=634,631
<631=632
<632=633
<634=635
<636=638,637
<638=640,639
<640=641
<641=643,642
<644=647,645
<645=646
<647=648
<648=652,649
<649=650
<650=651
<652=653
<653=655,654
<655=657,656
<657=658
<658=660,659
<660=662,661
<662=663
<663=665,664
<698=704,703,699
<699=700
<700=702,701
<704=727,707,705
<705=706
<707=723,708
<708=709
<709=710
<710=714,711
<711=712
<712=713
<714=715
<715=717,716
<717=719,718
<719=720
<720=722,721
<723=724
<724=726,725
<727=728
<728=745,744,729
<729=743,730
<730=732,731
<732=733
<733=735,734
<735=739,736
<736=737
<737=738
<739=740
<740=742,741
<755=761,760,756
<756=757
<757=759,758
<761=780,764,762
<762=763
<764=765
<765=778,766
<766=767
<767=768
<768=772,769
<769=771,770
<772=776,773
<773=774
<774=775
<776=777
<778=779
<780=807,797,781
<781=782
<782=793,783
<783=786,784
<784=785
<786=787
<787=791,788
<788=789
<789=790
<791=792
<793=794
<794=796,795
<797=800,798
<798=799
<800=801
<801=805,802
<802=803
<803=804
<805=806
<807=808
<808=810,809
<818=823,819
<819=820
<820=822,821
<828=831,830,829
<831=882,881,880,879,878,876,875,874,873,872,871,870,869,868,867,866,832
<832=847,833
<833=834
<834=840,835
<835=836
<836=837
<837=839,838
<840=841
<841=843,842
<843=845,844
<845=846
<847=848
<848=865,864,849
<849=863,850
<850=854,851
<851=852
<852=853
<854=855
<855=857,856
<857=859,858
<859=860
<860=862,861
<876=877
<882=884,883
<884=885
<885=892,886
<886=888,887
<888=889
<889=891,890
<905=908,907,906
<908=1015,1009,997,978,968,959,952,936,925,916,909
<909=910
<910=912,911
<912=913
<913=915,914
<916=917
<917=924,918
<918=920,919
<920=921
<921=923,922
<925=927,926
<927=928
<928=935,929
<929=931,930
<931=932
<932=934,933
<936=943,937
<937=938
<938=942,939
<939=941,940
<943=944
<944=951,945
<945=947,946
<947=948
<948=950,949
<952=953
<953=958,954
<954=956,955
<956=957
<959=960
<960=967,966,961
<961=965,962
<962=964,963
<968=971,969
<969=970
<971=972
<972=974,973
<974=975
<975=977,976
<978=979
<979=996,995,980
<980=994,981
<981=992,982
<982=985,983
<983=984
<985=986
<986=988,987
<988=989
<989=991,990
<992=993
<997=998
<998=1008,1007,999
<999=1006,1000
<1000=1002,1001
<1002=1003
<1003=1005,1004
<1009=1010
<1010=1014,1011
<1011=1013,1012
<1015=1016
<1016=1018,1017
<1035=1038,1037,1036
<1038=1144,1118,1112,1039
<1039=1103,1040
<1040=1094,1085,1069,1065,1055,1041
<1041=1042
<1042=1051,1043
<1043=1044
<1044=1045
<1045=1047,1046
<1047=1048
<1048=1050,1049
<1051=1052
<1052=1054,1053
<1055=1056
<1056=1064,1057
<1057=1063,1058
<1058=1062,1059
<1059=1061,1060
<1065=1066
<1066=1068,1067
<1069=1070
<1070=1081,1071
<1071=1072
<1072=1073
<1073=1080,1074
<1074=1078,1075
<1075=1076
<1076=1077
<1078=1079
<1081=1082
<1082=1084,1083
<1085=1086
<1086=1090,1087
<1087=1088
<1088=1089
<1090=1091
<1091=1093,1092
<1094=1095
<1095=1099,1096
<1096=1097
<1097=1098
<1099=1100
<1100=1102,1101
<1103=1104
<1104=1106,1105
<1106=1108,1107
<1108=1109
<1109=1111,1110
<1112=1114,1113
<1114=1115
<1115=1117,1116
<1118=1119
<1119=1143,1142,1120
<1120=1141,1121
<1121=1132,1122
<1122=1123
<1123=1124
<1124=1126,1125
<1126=1130,1127
<1127=1128
<1128=1129
<1130=1131
<1132=1133
<1133=1135,1134
<1135=1137,1136
<1137=1138
<1138=1140,1139
<1144=1146,1145
<1146=1147
<1147=1149,1148
<1149=1150
<1150=1152,1151
