>11	FunctionDef	Game 
>12	ParameterList	int difficulty , int wave
>13	Parameter	 
>14	Identifier	wave
>15	ParameterType	int
>16	Parameter	 
>17	Identifier	difficulty
>18	ParameterType	int
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	CallExpression	change_gamemode ( GM_STARTWAVE )
>22	ArgumentList	GM_STARTWAVE
>23	Argument	GM_STARTWAVE
>24	Identifier	GM_STARTWAVE
>25	Callee	change_gamemode
>26	Identifier	change_gamemode
>27	ExpressionStatement	 
>28	AssignmentExpr	m_missile_radius = 0.07 - ( 0.02 * m_difficulty )
>29	AdditiveExpression	0.07 - ( 0.02 * m_difficulty )
>30	MultiplicativeExpression	0.02 * m_difficulty
>31	Identifier	m_difficulty
>32	PrimaryExpression	0.02
>33	PrimaryExpression	0.07
>34	Identifier	m_missile_radius
>35	ExpressionStatement	 
>36	AssignmentExpr	m_pboat2 = new PBoat ( vec2 ( 1.52f , 0.25f ) )
>37	CallExpression	vec2 ( 1.52f , 0.25f )
>38	ArgumentList	1.52f
>39	Argument	0.25f
>40	PrimaryExpression	0.25f
>41	Argument	1.52f
>42	PrimaryExpression	1.52f
>43	Callee	vec2
>44	Identifier	vec2
>45	Identifier	m_pboat2
>46	ExpressionStatement	 
>47	AssignmentExpr	m_pboat1 = new PBoat ( vec2 ( 0.08f , 0.25f ) )
>48	CallExpression	vec2 ( 0.08f , 0.25f )
>49	ArgumentList	0.08f
>50	Argument	0.25f
>51	PrimaryExpression	0.25f
>52	Argument	0.08f
>53	PrimaryExpression	0.08f
>54	Callee	vec2
>55	Identifier	vec2
>56	Identifier	m_pboat1
>57	ExpressionStatement	 
>58	AssignmentExpr	m_boats [ 2 ] = new Boat ( vec2 ( 1.23f , 0.24f ) , \"Nice Boat\" )
>59	Expression	vec2 ( 1.23f , 0.24f ) , \"Nice Boat\"
>60	PrimaryExpression	\"Nice Boat\"
>61	CallExpression	vec2 ( 1.23f , 0.24f )
>62	ArgumentList	1.23f
>63	Argument	0.24f
>64	PrimaryExpression	0.24f
>65	Argument	1.23f
>66	PrimaryExpression	1.23f
>67	Callee	vec2
>68	Identifier	vec2
>69	ArrayIndexing	m_boats [ 2 ]
>70	PrimaryExpression	2
>71	Identifier	m_boats
>72	ExpressionStatement	 
>73	AssignmentExpr	m_boats [ 1 ] = new Boat ( vec2 ( 0.80f , 0.24f ) , \"The Slightly Radioactive Whale\" )
>74	Expression	vec2 ( 0.80f , 0.24f ) , \"The Slightly Radioactive Whale\"
>75	PrimaryExpression	\"The Slightly Radioactive Whale\"
>76	CallExpression	vec2 ( 0.80f , 0.24f )
>77	ArgumentList	0.80f
>78	Argument	0.24f
>79	PrimaryExpression	0.24f
>80	Argument	0.80f
>81	PrimaryExpression	0.80f
>82	Callee	vec2
>83	Identifier	vec2
>84	ArrayIndexing	m_boats [ 1 ]
>85	PrimaryExpression	1
>86	Identifier	m_boats
>87	ExpressionStatement	 
>88	AssignmentExpr	m_boats [ 0 ] = new Boat ( vec2 ( 0.37f , 0.24f ) , \"S.S. Epic Failure\" )
>89	Expression	vec2 ( 0.37f , 0.24f ) , \"S.S. Epic Failure\"
>90	PrimaryExpression	\"S.S. Epic Failure\"
>91	CallExpression	vec2 ( 0.37f , 0.24f )
>92	ArgumentList	0.37f
>93	Argument	0.24f
>94	PrimaryExpression	0.24f
>95	Argument	0.37f
>96	PrimaryExpression	0.37f
>97	Callee	vec2
>98	Identifier	vec2
>99	ArrayIndexing	m_boats [ 0 ]
>100	PrimaryExpression	0
>101	Identifier	m_boats
>115	FunctionDef	Game 
>116	ParameterList	 
>117	CompoundStatement	 
>118	ExpressionStatement	 
>119	ArrayIndexing	m_missiles [ i ]
>120	Identifier	i
>121	Identifier	m_missiles
>122	ForStatement	for ( unsigned int i = 0 ; i < m_missiles . size ( ) ; ++ i )
>123	Statement	 
>124	UnaryExpression	 
>125	Identifier	i
>126	IncDec	++
>127	Condition	 
>128	RelationalExpression	i < m_missiles . size ( )
>129	CallExpression	m_missiles . size ( )
>130	ArgumentList	 
>131	Callee	m_missiles . size
>132	MemberAccess	m_missiles . size
>133	Identifier	size
>134	Identifier	m_missiles
>135	Identifier	i
>136	ForInit	 
>137	IdentifierDeclStatement	unsigned int i = 0 ;
>138	IdentifierDecl	i = 0
>139	AssignmentExpr	i = 0
>140	PrimaryExpression	0
>141	Identifier	i
>142	Identifier	i
>143	IdentifierDeclType	unsigned int
>144	ExpressionStatement	 
>145	Identifier	m_pboat2
>146	Statement	 
>147	ExpressionStatement	 
>148	Identifier	m_pboat1
>149	Statement	 
>150	ExpressionStatement	 
>151	ArrayIndexing	m_boats [ i ]
>152	Identifier	i
>153	Identifier	m_boats
>154	ForStatement	for ( int i = 0 ; i < 3 ; ++ i )
>155	Statement	 
>156	UnaryExpression	 
>157	Identifier	i
>158	IncDec	++
>159	Condition	 
>160	RelationalExpression	i < 3
>161	PrimaryExpression	3
>162	Identifier	i
>163	ForInit	 
>164	IdentifierDeclStatement	int i = 0 ;
>165	IdentifierDecl	i = 0
>166	AssignmentExpr	i = 0
>167	PrimaryExpression	0
>168	Identifier	i
>169	Identifier	i
>170	IdentifierDeclType	int
>178	FunctionDef	Game 
>179	ParameterList	game_modes_t gamemode
>180	Parameter	 
>181	Identifier	gamemode
>182	ParameterType	game_modes_t
>183	ReturnType	void
>184	CompoundStatement	 
>185	ExpressionStatement	 
>186	AssignmentExpr	m_last_gamemode_change = g_timer -> now ( )
>187	CallExpression	g_timer -> now ( )
>188	ArgumentList	 
>189	Callee	g_timer -> now
>190	PtrMemberAccess	g_timer -> now
>191	Identifier	now
>192	Identifier	g_timer
>193	Identifier	m_last_gamemode_change
>194	ExpressionStatement	 
>195	AssignmentExpr	m_gamemode = gamemode
>196	Identifier	gamemode
>197	Identifier	m_gamemode
>207	FunctionDef	Game 
>208	ParameterList	 
>209	ReturnType	void
>210	CompoundStatement	 
>211	ExpressionStatement	 
>212	CallExpression	m_missiles . clear ( )
>213	ArgumentList	 
>214	Callee	m_missiles . clear
>215	MemberAccess	m_missiles . clear
>216	Identifier	clear
>217	Identifier	m_missiles
>218	ExpressionStatement	 
>219	CallExpression	m_torpedoes . clear ( )
>220	ArgumentList	 
>221	Callee	m_torpedoes . clear
>222	MemberAccess	m_torpedoes . clear
>223	Identifier	clear
>224	Identifier	m_torpedoes
>225	ExpressionStatement	 
>226	CallExpression	m_pboat2 -> reload_ammo ( )
>227	ArgumentList	 
>228	Callee	m_pboat2 -> reload_ammo
>229	PtrMemberAccess	m_pboat2 -> reload_ammo
>230	Identifier	reload_ammo
>231	Identifier	m_pboat2
>232	ExpressionStatement	 
>233	CallExpression	m_pboat1 -> reload_ammo ( )
>234	ArgumentList	 
>235	Callee	m_pboat1 -> reload_ammo
>236	PtrMemberAccess	m_pboat1 -> reload_ammo
>237	Identifier	reload_ammo
>238	Identifier	m_pboat1
>239	ExpressionStatement	 
>240	AssignmentExpr	m_last_torpedo_spawned_at = 0.0
>241	PrimaryExpression	0.0
>242	Identifier	m_last_torpedo_spawned_at
>243	ExpressionStatement	 
>244	AssignmentExpr	m_torpedo_spawn_time = clamp < float > ( 4.0 - ( m_wave - 1 ) * 0.1 , 1.0 , 4.0 )
>245	RelationalExpression	clamp < float > ( 4.0 - ( m_wave - 1 ) * 0.1 , 1.0 , 4.0 )
>246	RelationalExpression	float > ( 4.0 - ( m_wave - 1 ) * 0.1 , 1.0 , 4.0 )
>247	Expression	4.0 - ( m_wave - 1 ) * 0.1 , 1.0 , 4.0
>248	Expression	1.0 , 4.0
>249	PrimaryExpression	4.0
>250	PrimaryExpression	1.0
>251	AdditiveExpression	4.0 - ( m_wave - 1 ) * 0.1
>252	MultiplicativeExpression	( m_wave - 1 ) * 0.1
>253	PrimaryExpression	0.1
>254	AdditiveExpression	m_wave - 1
>255	PrimaryExpression	1
>256	Identifier	m_wave
>257	PrimaryExpression	4.0
>258	Identifier	float
>259	Identifier	clamp
>260	Identifier	m_torpedo_spawn_time
>261	ExpressionStatement	 
>262	AssignmentExpr	m_torpedoes_to_spawn = clamp < int > ( 5 + ( m_wave - 1 ) , 0 , 20 )
>263	RelationalExpression	clamp < int > ( 5 + ( m_wave - 1 ) , 0 , 20 )
>264	RelationalExpression	int > ( 5 + ( m_wave - 1 ) , 0 , 20 )
>265	Expression	5 + ( m_wave - 1 ) , 0 , 20
>266	Expression	0 , 20
>267	PrimaryExpression	20
>268	PrimaryExpression	0
>269	AdditiveExpression	5 + ( m_wave - 1 )
>270	AdditiveExpression	m_wave - 1
>271	PrimaryExpression	1
>272	Identifier	m_wave
>273	PrimaryExpression	5
>274	Identifier	int
>275	Identifier	clamp
>276	Identifier	m_torpedoes_to_spawn
>291	FunctionDef	Game 
>292	ParameterList	 
>293	ReturnType	void
>294	CompoundStatement	 
>295	ExpressionStatement	 
>296	AssignmentExpr	m_last_torpedo_spawned_at = g_timer -> now ( )
>297	CallExpression	g_timer -> now ( )
>298	ArgumentList	 
>299	Callee	g_timer -> now
>300	PtrMemberAccess	g_timer -> now
>301	Identifier	now
>302	Identifier	g_timer
>303	Identifier	m_last_torpedo_spawned_at
>304	ExpressionStatement	 
>305	IncDecOp	m_torpedoes_to_spawn --
>306	IncDec	--
>307	Identifier	m_torpedoes_to_spawn
>308	ExpressionStatement	 
>309	CallExpression	m_torpedoes . push_back ( Torpedo ( pos , vector , velocity ) )
>310	ArgumentList	Torpedo ( pos , vector , velocity )
>311	Argument	Torpedo ( pos , vector , velocity )
>312	CallExpression	Torpedo ( pos , vector , velocity )
>313	ArgumentList	pos
>314	Argument	velocity
>315	Identifier	velocity
>316	Argument	vector
>317	Identifier	vector
>318	Argument	pos
>319	Identifier	pos
>320	Callee	Torpedo
>321	Identifier	Torpedo
>322	Callee	m_torpedoes . push_back
>323	MemberAccess	m_torpedoes . push_back
>324	Identifier	push_back
>325	Identifier	m_torpedoes
>326	IdentifierDeclStatement	 
>327	IdentifierDecl	velocity = 0.05 + ( ( float ) m_wave / 100.0 ) * 0.2
>328	AssignmentExpr	velocity = 0.05 + ( ( float ) m_wave / 100.0 ) * 0.2
>329	AdditiveExpression	0.05 + ( ( float ) m_wave / 100.0 ) * 0.2
>330	MultiplicativeExpression	( ( float ) m_wave / 100.0 ) * 0.2
>331	PrimaryExpression	0.2
>332	MultiplicativeExpression	( float ) m_wave / 100.0
>333	PrimaryExpression	100.0
>334	CastExpression	( float ) m_wave
>335	Identifier	m_wave
>336	CastTarget	float
>337	PrimaryExpression	0.05
>338	Identifier	velocity
>339	Identifier	velocity
>340	IdentifierDeclType	float
>341	IdentifierDeclStatement	 
>342	IdentifierDecl	vector = target - pos
>343	AssignmentExpr	vector = target - pos
>344	AdditiveExpression	target - pos
>345	Identifier	pos
>346	Identifier	target
>347	Identifier	vector
>348	Identifier	vector
>349	IdentifierDeclType	vec2
>350	IfStatement	if ( m_boats [ 0 ] -> is_alive ( ) && ! m_boats [ 1 ] -> is_alive ( ) && ! m_boats [ 2 ] -> is_alive ( ) )
>351	ElseStatement	else
>352	IfStatement	if ( ! m_boats [ 0 ] -> is_alive ( ) && ! m_boats [ 1 ] -> is_alive ( ) && m_boats [ 2 ] -> is_alive ( ) )
>353	ElseStatement	else
>354	ExpressionStatement	 
>355	AssignmentExpr	target = vec2 ( rand_range ( 0.17 , 1.43 ) , 0.25 )
>356	CallExpression	vec2 ( rand_range ( 0.17 , 1.43 ) , 0.25 )
>357	ArgumentList	rand_range ( 0.17 , 1.43 )
>358	Argument	0.25
>359	PrimaryExpression	0.25
>360	Argument	rand_range ( 0.17 , 1.43 )
>361	CallExpression	rand_range ( 0.17 , 1.43 )
>362	ArgumentList	0.17
>363	Argument	1.43
>364	PrimaryExpression	1.43
>365	Argument	0.17
>366	PrimaryExpression	0.17
>367	Callee	rand_range
>368	Identifier	rand_range
>369	Callee	vec2
>370	Identifier	vec2
>371	Identifier	target
>372	ExpressionStatement	 
>373	AssignmentExpr	target = vec2 ( rand_range ( 0.80 , 1.43 ) , 0.25 )
>374	CallExpression	vec2 ( rand_range ( 0.80 , 1.43 ) , 0.25 )
>375	ArgumentList	rand_range ( 0.80 , 1.43 )
>376	Argument	0.25
>377	PrimaryExpression	0.25
>378	Argument	rand_range ( 0.80 , 1.43 )
>379	CallExpression	rand_range ( 0.80 , 1.43 )
>380	ArgumentList	0.80
>381	Argument	1.43
>382	PrimaryExpression	1.43
>383	Argument	0.80
>384	PrimaryExpression	0.80
>385	Callee	rand_range
>386	Identifier	rand_range
>387	Callee	vec2
>388	Identifier	vec2
>389	Identifier	target
>390	Condition	 
>391	AndExpression	! m_boats [ 0 ] -> is_alive ( ) && ! m_boats [ 1 ] -> is_alive ( ) && m_boats [ 2 ] -> is_alive ( )
>392	AndExpression	! m_boats [ 1 ] -> is_alive ( ) && m_boats [ 2 ] -> is_alive ( )
>393	CallExpression	m_boats [ 2 ] -> is_alive ( )
>394	ArgumentList	 
>395	Callee	m_boats [ 2 ] -> is_alive
>396	PtrMemberAccess	m_boats [ 2 ] -> is_alive
>397	Identifier	is_alive
>398	ArrayIndexing	m_boats [ 2 ]
>399	PrimaryExpression	2
>400	Identifier	m_boats
>401	UnaryOp	! m_boats [ 1 ] -> is_alive ( )
>402	CallExpression	m_boats [ 1 ] -> is_alive ( )
>403	ArgumentList	 
>404	Callee	m_boats [ 1 ] -> is_alive
>405	PtrMemberAccess	m_boats [ 1 ] -> is_alive
>406	Identifier	is_alive
>407	ArrayIndexing	m_boats [ 1 ]
>408	PrimaryExpression	1
>409	Identifier	m_boats
>410	UnaryOperator	!
>411	UnaryOp	! m_boats [ 0 ] -> is_alive ( )
>412	CallExpression	m_boats [ 0 ] -> is_alive ( )
>413	ArgumentList	 
>414	Callee	m_boats [ 0 ] -> is_alive
>415	PtrMemberAccess	m_boats [ 0 ] -> is_alive
>416	Identifier	is_alive
>417	ArrayIndexing	m_boats [ 0 ]
>418	PrimaryExpression	0
>419	Identifier	m_boats
>420	UnaryOperator	!
>421	ExpressionStatement	 
>422	AssignmentExpr	target = vec2 ( rand_range ( 0.17 , 0.80 ) , 0.25 )
>423	CallExpression	vec2 ( rand_range ( 0.17 , 0.80 ) , 0.25 )
>424	ArgumentList	rand_range ( 0.17 , 0.80 )
>425	Argument	0.25
>426	PrimaryExpression	0.25
>427	Argument	rand_range ( 0.17 , 0.80 )
>428	CallExpression	rand_range ( 0.17 , 0.80 )
>429	ArgumentList	0.17
>430	Argument	0.80
>431	PrimaryExpression	0.80
>432	Argument	0.17
>433	PrimaryExpression	0.17
>434	Callee	rand_range
>435	Identifier	rand_range
>436	Callee	vec2
>437	Identifier	vec2
>438	Identifier	target
>439	Condition	 
>440	AndExpression	m_boats [ 0 ] -> is_alive ( ) && ! m_boats [ 1 ] -> is_alive ( ) && ! m_boats [ 2 ] -> is_alive ( )
>441	AndExpression	! m_boats [ 1 ] -> is_alive ( ) && ! m_boats [ 2 ] -> is_alive ( )
>442	UnaryOp	! m_boats [ 2 ] -> is_alive ( )
>443	CallExpression	m_boats [ 2 ] -> is_alive ( )
>444	ArgumentList	 
>445	Callee	m_boats [ 2 ] -> is_alive
>446	PtrMemberAccess	m_boats [ 2 ] -> is_alive
>447	Identifier	is_alive
>448	ArrayIndexing	m_boats [ 2 ]
>449	PrimaryExpression	2
>450	Identifier	m_boats
>451	UnaryOperator	!
>452	UnaryOp	! m_boats [ 1 ] -> is_alive ( )
>453	CallExpression	m_boats [ 1 ] -> is_alive ( )
>454	ArgumentList	 
>455	Callee	m_boats [ 1 ] -> is_alive
>456	PtrMemberAccess	m_boats [ 1 ] -> is_alive
>457	Identifier	is_alive
>458	ArrayIndexing	m_boats [ 1 ]
>459	PrimaryExpression	1
>460	Identifier	m_boats
>461	UnaryOperator	!
>462	CallExpression	m_boats [ 0 ] -> is_alive ( )
>463	ArgumentList	 
>464	Callee	m_boats [ 0 ] -> is_alive
>465	PtrMemberAccess	m_boats [ 0 ] -> is_alive
>466	Identifier	is_alive
>467	ArrayIndexing	m_boats [ 0 ]
>468	PrimaryExpression	0
>469	Identifier	m_boats
>470	IdentifierDeclStatement	 
>471	IdentifierDecl	target
>472	Identifier	target
>473	IdentifierDeclType	vec2
>474	IdentifierDeclStatement	 
>475	IdentifierDecl	pos ( RAND_0_1 * 1.6 , 1.1 )
>476	Expression	RAND_0_1 * 1.6 , 1.1
>477	PrimaryExpression	1.1
>478	MultiplicativeExpression	RAND_0_1 * 1.6
>479	PrimaryExpression	1.6
>480	Identifier	RAND_0_1
>481	Identifier	pos
>482	IdentifierDeclType	vec2
>506	FunctionDef	Game 
>507	ParameterList	FX * effect , int draw_order_id
>508	Parameter	 
>509	Identifier	draw_order_id
>510	ParameterType	int
>511	Parameter	 
>512	Identifier	effect
>513	ParameterType	FX *
>514	ReturnType	void
>515	CompoundStatement	 
>516	ExpressionStatement	 
>517	CallExpression	m_effects . add_effect ( effect , draw_order_id )
>518	ArgumentList	effect
>519	Argument	draw_order_id
>520	Identifier	draw_order_id
>521	Argument	effect
>522	Identifier	effect
>523	Callee	m_effects . add_effect
>524	MemberAccess	m_effects . add_effect
>525	Identifier	add_effect
>526	Identifier	m_effects
>533	FunctionDef	Game 
>534	ParameterList	 
>535	ReturnType	int
>536	CompoundStatement	 
>537	ReturnStatement	 
>538	MultiplicativeExpression	( 20 + m_wave - 1 ) * ( 1.0 + 0.5 * m_difficulty )
>539	AdditiveExpression	1.0 + 0.5 * m_difficulty
>540	MultiplicativeExpression	0.5 * m_difficulty
>541	Identifier	m_difficulty
>542	PrimaryExpression	0.5
>543	PrimaryExpression	1.0
>544	AdditiveExpression	20 + m_wave - 1
>545	AdditiveExpression	m_wave - 1
>546	PrimaryExpression	1
>547	Identifier	m_wave
>548	PrimaryExpression	20
>554	FunctionDef	Game 
>555	ParameterList	 
>556	ReturnType	int
>557	CompoundStatement	 
>558	ReturnStatement	 
>559	MultiplicativeExpression	50 * ( 1.0 + 0.5 * m_difficulty )
>560	AdditiveExpression	1.0 + 0.5 * m_difficulty
>561	MultiplicativeExpression	0.5 * m_difficulty
>562	Identifier	m_difficulty
>563	PrimaryExpression	0.5
>564	PrimaryExpression	1.0
>565	PrimaryExpression	50
>570	FunctionDef	Game 
>571	ParameterList	 
>572	ReturnType	int
>573	CompoundStatement	 
>574	ReturnStatement	 
>575	MultiplicativeExpression	2 * ( 1.0 + 0.5 * m_difficulty )
>576	AdditiveExpression	1.0 + 0.5 * m_difficulty
>577	MultiplicativeExpression	0.5 * m_difficulty
>578	Identifier	m_difficulty
>579	PrimaryExpression	0.5
>580	PrimaryExpression	1.0
>581	PrimaryExpression	2
>586	FunctionDef	Game 
>587	ParameterList	 
>588	ReturnType	void
>589	CompoundStatement	 
>590	ExpressionStatement	 
>591	CallExpression	m_pboat2 -> draw ( )
>592	ArgumentList	 
>593	Callee	m_pboat2 -> draw
>594	PtrMemberAccess	m_pboat2 -> draw
>595	Identifier	draw
>596	Identifier	m_pboat2
>597	ExpressionStatement	 
>598	CallExpression	m_pboat1 -> draw ( )
>599	ArgumentList	 
>600	Callee	m_pboat1 -> draw
>601	PtrMemberAccess	m_pboat1 -> draw
>602	Identifier	draw
>603	Identifier	m_pboat1
>604	ForStatement	for ( int i = 0 ; i < 3 ; ++ i )
>605	ExpressionStatement	 
>606	CallExpression	m_boats [ i ] -> draw ( )
>607	ArgumentList	 
>608	Callee	m_boats [ i ] -> draw
>609	PtrMemberAccess	m_boats [ i ] -> draw
>610	Identifier	draw
>611	ArrayIndexing	m_boats [ i ]
>612	Identifier	i
>613	Identifier	m_boats
>614	UnaryExpression	 
>615	Identifier	i
>616	IncDec	++
>617	Condition	 
>618	RelationalExpression	i < 3
>619	PrimaryExpression	3
>620	Identifier	i
>621	ForInit	 
>622	IdentifierDeclStatement	int i = 0 ;
>623	IdentifierDecl	i = 0
>624	AssignmentExpr	i = 0
>625	PrimaryExpression	0
>626	Identifier	i
>627	Identifier	i
>628	IdentifierDeclType	int
>629	ExpressionStatement	 
>630	CallExpression	glLoadIdentity ( )
>631	ArgumentList	 
>632	Callee	glLoadIdentity
>633	Identifier	glLoadIdentity
>643	FunctionDef	Game 
>644	ParameterList	 
>645	ReturnType	void
>646	CompoundStatement	 
>647	CompoundStatement	 
>648	ExpressionStatement	 
>649	CallExpression	g_resources . font -> print_text_with_shadow ( text , vec2 ( 1.47 , 0.0 ) , 0.7 , false , color )
>650	ArgumentList	text
>651	Argument	color
>652	Identifier	color
>653	Argument	false
>654	Identifier	false
>655	Argument	0.7
>656	PrimaryExpression	0.7
>657	Argument	vec2 ( 1.47 , 0.0 )
>658	CallExpression	vec2 ( 1.47 , 0.0 )
>659	ArgumentList	1.47
>660	Argument	0.0
>661	PrimaryExpression	0.0
>662	Argument	1.47
>663	PrimaryExpression	1.47
>664	Callee	vec2
>665	Identifier	vec2
>666	Argument	text
>667	Identifier	text
>668	Callee	g_resources . font -> print_text_with_shadow
>669	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>670	Identifier	print_text_with_shadow
>671	MemberAccess	g_resources . font
>672	Identifier	font
>673	Identifier	g_resources
>674	IfStatement	if ( mouse_over_menu_button ( mousepos ) )
>675	ExpressionStatement	 
>676	AssignmentExpr	color = vec4 ( 1 , 1 , 0 , 1 )
>677	CallExpression	vec4 ( 1 , 1 , 0 , 1 )
>678	ArgumentList	1
>679	Argument	1
>680	PrimaryExpression	1
>681	Argument	0
>682	PrimaryExpression	0
>683	Argument	1
>684	PrimaryExpression	1
>685	Argument	1
>686	PrimaryExpression	1
>687	Callee	vec4
>688	Identifier	vec4
>689	Identifier	color
>690	Condition	 
>691	CallExpression	mouse_over_menu_button ( mousepos )
>692	ArgumentList	mousepos
>693	Argument	mousepos
>694	Identifier	mousepos
>695	Callee	mouse_over_menu_button
>696	Identifier	mouse_over_menu_button
>697	IdentifierDeclStatement	 
>698	IdentifierDecl	mousepos = g_mouse . get_pos ( )
>699	AssignmentExpr	mousepos = g_mouse . get_pos ( )
>700	CallExpression	g_mouse . get_pos ( )
>701	ArgumentList	 
>702	Callee	g_mouse . get_pos
>703	MemberAccess	g_mouse . get_pos
>704	Identifier	get_pos
>705	Identifier	g_mouse
>706	Identifier	mousepos
>707	Identifier	mousepos
>708	IdentifierDeclType	vec2
>709	IdentifierDeclStatement	 
>710	IdentifierDecl	color ( 1 , 1 , 1 , 1 )
>711	Expression	1 , 1 , 1 , 1
>712	Expression	1 , 1 , 1
>713	Expression	1 , 1
>714	PrimaryExpression	1
>715	PrimaryExpression	1
>716	PrimaryExpression	1
>717	PrimaryExpression	1
>718	Identifier	color
>719	IdentifierDeclType	vec4
>720	IdentifierDeclStatement	 
>721	IdentifierDecl	* text = \"MENU \"
>722	AssignmentExpr	* text = \"MENU \"
>723	PrimaryExpression	\"MENU \"
>724	Identifier	text
>725	Identifier	text
>726	IdentifierDeclType	const char *
>727	CompoundStatement	 
>728	ExpressionStatement	 
>729	CallExpression	g_resources . font -> print_text_with_shadow ( score , vec2 ( 0.0 , 0.0 ) , 1.0 , true , vec4 ( 1 , 1 , 1 , 1 ) )
>730	ArgumentList	score
>731	Argument	vec4 ( 1 , 1 , 1 , 1 )
>732	CallExpression	vec4 ( 1 , 1 , 1 , 1 )
>733	ArgumentList	1
>734	Argument	1
>735	PrimaryExpression	1
>736	Argument	1
>737	PrimaryExpression	1
>738	Argument	1
>739	PrimaryExpression	1
>740	Argument	1
>741	PrimaryExpression	1
>742	Callee	vec4
>743	Identifier	vec4
>744	Argument	true
>745	Identifier	true
>746	Argument	1.0
>747	PrimaryExpression	1.0
>748	Argument	vec2 ( 0.0 , 0.0 )
>749	CallExpression	vec2 ( 0.0 , 0.0 )
>750	ArgumentList	0.0
>751	Argument	0.0
>752	PrimaryExpression	0.0
>753	Argument	0.0
>754	PrimaryExpression	0.0
>755	Callee	vec2
>756	Identifier	vec2
>757	Argument	score
>758	Identifier	score
>759	Callee	g_resources . font -> print_text_with_shadow
>760	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>761	Identifier	print_text_with_shadow
>762	MemberAccess	g_resources . font
>763	Identifier	font
>764	Identifier	g_resources
>765	ExpressionStatement	 
>766	CallExpression	sprintf ( score , \"%06i\" , clamp < int > ( m_score , 0 , 999999 ) )
>767	ArgumentList	score
>768	Argument	clamp < int > ( m_score , 0 , 999999 )
>769	RelationalExpression	clamp < int > ( m_score , 0 , 999999 )
>770	RelationalExpression	int > ( m_score , 0 , 999999 )
>771	Expression	m_score , 0 , 999999
>772	Expression	0 , 999999
>773	PrimaryExpression	999999
>774	PrimaryExpression	0
>775	Identifier	m_score
>776	Identifier	int
>777	Identifier	clamp
>778	Argument	\"%06i\"
>779	PrimaryExpression	\"%06i\"
>780	Argument	score
>781	Identifier	score
>782	Callee	sprintf
>783	Identifier	sprintf
>784	IdentifierDeclStatement	 
>785	IdentifierDecl	score [ 7 ] = { 0 }
>786	AssignmentExpr	score [ 7 ] = { 0 }
>787	InitializerList	0
>788	PrimaryExpression	0
>789	Identifier	score
>790	PrimaryExpression	7
>791	Identifier	score
>792	IdentifierDeclType	char [ 7 ]
>793	CompoundStatement	 
>794	ExpressionStatement	 
>795	CallExpression	g_resources . font -> print_text_with_shadow ( wave . c_str ( ) , vec2 ( 0.0 , 0.0 ) , 0.7 , false , vec4 ( 1 , \
>796	ArgumentList	wave . c_str ( )
>797	Argument	vec4 ( 1 , 1 , 1 , 1 )
>798	CallExpression	vec4 ( 1 , 1 , 1 , 1 )
>799	ArgumentList	1
>800	Argument	1
>801	PrimaryExpression	1
>802	Argument	1
>803	PrimaryExpression	1
>804	Argument	1
>805	PrimaryExpression	1
>806	Argument	1
>807	PrimaryExpression	1
>808	Callee	vec4
>809	Identifier	vec4
>810	Argument	false
>811	Identifier	false
>812	Argument	0.7
>813	PrimaryExpression	0.7
>814	Argument	vec2 ( 0.0 , 0.0 )
>815	CallExpression	vec2 ( 0.0 , 0.0 )
>816	ArgumentList	0.0
>817	Argument	0.0
>818	PrimaryExpression	0.0
>819	Argument	0.0
>820	PrimaryExpression	0.0
>821	Callee	vec2
>822	Identifier	vec2
>823	Argument	wave . c_str ( )
>824	CallExpression	wave . c_str ( )
>825	ArgumentList	 
>826	Callee	wave . c_str
>827	MemberAccess	wave . c_str
>828	Identifier	c_str
>829	Identifier	wave
>830	Callee	g_resources . font -> print_text_with_shadow
>831	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>832	Identifier	print_text_with_shadow
>833	MemberAccess	g_resources . font
>834	Identifier	font
>835	Identifier	g_resources
>836	IdentifierDeclStatement	 
>837	IdentifierDecl	wave = \"Wave
>838	AssignmentExpr	wave = \"Wave
>839	RelationalExpression	\"Wave
>840	RelationalExpression	int > ( m_wave )
>841	Identifier	m_wave
>842	Identifier	int
>843	AdditiveExpression	\"Wave
>844	Identifier	to_string
>845	PrimaryExpression	\"Wave
>846	Identifier	wave
>847	Identifier	wave
>848	IdentifierDeclType	string
>872	FunctionDef	Game 
>873	ParameterList	 
>874	ReturnType	int
>875	CompoundStatement	 
>876	ReturnStatement	 
>877	Identifier	n
>878	CompoundStatement	 
>879	ExpressionStatement	 
>880	IncDecOp	n ++
>881	IncDec	++
>882	Identifier	n
>883	IfStatement	if ( t . alive ( ) == false )
>884	ContinueStatement	 
>885	Condition	 
>886	EqualityExpression	t . alive ( ) == false
>887	Identifier	false
>888	CallExpression	t . alive ( )
>889	ArgumentList	 
>890	Callee	t . alive
>891	MemberAccess	t . alive
>892	Identifier	alive
>893	Identifier	t
>894	IdentifierDeclStatement	 
>895	IdentifierDecl	& t = * it
>896	AssignmentExpr	& t = * it
>897	UnaryOp	* it
>898	Identifier	it
>899	UnaryOperator	*
>900	Identifier	t
>901	Identifier	t
>902	IdentifierDeclType	Torpedo &
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	IdentifierDeclStatement	 
>915	IdentifierDecl	n = m_torpedoes_to_spawn
>916	AssignmentExpr	n = m_torpedoes_to_spawn
>917	Identifier	m_torpedoes_to_spawn
>918	Identifier	m_torpedoes_to_spawn
>919	Identifier	n
>920	IdentifierDeclType	int
>932	FunctionDef	Game 
>933	ParameterList	 
>934	ReturnType	int
>935	CompoundStatement	 
>936	ReturnStatement	 
>937	Identifier	n
>938	ForStatement	for ( int i = 0 ; i < 3 ; ++ i )
>939	CompoundStatement	 
>940	IfStatement	if ( m_boats [ i ] -> is_alive ( ) )
>941	ExpressionStatement	 
>942	IncDecOp	n ++
>943	IncDec	++
>944	Identifier	n
>945	Condition	 
>946	CallExpression	m_boats [ i ] -> is_alive ( )
>947	ArgumentList	 
>948	Callee	m_boats [ i ] -> is_alive
>949	PtrMemberAccess	m_boats [ i ] -> is_alive
>950	Identifier	is_alive
>951	ArrayIndexing	m_boats [ i ]
>952	Identifier	i
>953	Identifier	m_boats
>954	UnaryExpression	 
>955	Identifier	i
>956	IncDec	++
>957	Condition	 
>958	RelationalExpression	i < 3
>959	PrimaryExpression	3
>960	Identifier	i
>961	ForInit	 
>962	IdentifierDeclStatement	int i = 0 ;
>963	IdentifierDecl	i = 0
>964	AssignmentExpr	i = 0
>965	PrimaryExpression	0
>966	Identifier	i
>967	Identifier	i
>968	IdentifierDeclType	int
>969	IdentifierDeclStatement	 
>970	IdentifierDecl	n = 0
>971	AssignmentExpr	n = 0
>972	PrimaryExpression	0
>973	Identifier	n
>974	Identifier	n
>975	IdentifierDeclType	int
>987	FunctionDef	Game 
>988	ParameterList	 
>989	ReturnType	void
>990	CompoundStatement	 
>991	ExpressionStatement	 
>992	CallExpression	gamemode_specific_stuff ( )
>993	ArgumentList	 
>994	Callee	gamemode_specific_stuff
>995	Identifier	gamemode_specific_stuff
>996	ExpressionStatement	 
>997	CallExpression	draw_HUD ( )
>998	ArgumentList	 
>999	Callee	draw_HUD
>1000	Identifier	draw_HUD
>1001	ExpressionStatement	 
>1002	CallExpression	m_effects . draw_all ( )
>1003	ArgumentList	 
>1004	Callee	m_effects . draw_all
>1005	MemberAccess	m_effects . draw_all
>1006	Identifier	draw_all
>1007	Identifier	m_effects
>1008	ExpressionStatement	 
>1009	CallExpression	m_effects . update ( )
>1010	ArgumentList	 
>1011	Callee	m_effects . update
>1012	MemberAccess	m_effects . update
>1013	Identifier	update
>1014	Identifier	m_effects
>1015	CompoundStatement	 
>1016	ExpressionStatement	 
>1017	CallExpression	t . draw ( )
>1018	ArgumentList	 
>1019	Callee	t . draw
>1020	MemberAccess	t . draw
>1021	Identifier	draw
>1022	Identifier	t
>1023	ForStatement	for ( unsigned int y = 0 ; y < m_missiles . size ( ) ; ++ y )
>1024	CompoundStatement	 
>1025	IfStatement	if ( m . exploding ( ) && t . m_obb . overlaps ( m . m_explosion_circle ) )
>1026	CompoundStatement	 
>1027	ExpressionStatement	 
>1028	CallExpression	add_effect ( textfx , 1 )
>1029	ArgumentList	textfx
>1030	Argument	1
>1031	PrimaryExpression	1
>1032	Argument	textfx
>1033	Identifier	textfx
>1034	Callee	add_effect
>1035	Identifier	add_effect
>1036	IdentifierDeclStatement	 
>1037	IdentifierDecl	* textfx = new FX_Moving_Text ( tscore , t_pos , vec2 ( 0.0 , - 1.0 ) , vec2 ( 0.0 , 0.03 ) )
>1038	AssignmentExpr	* textfx = new FX_Moving_Text ( tscore , t_pos , vec2 ( 0.0 , - 1.0 ) , vec2 ( 0.0 , 0.03 ) )
>1039	Expression	tscore , t_pos , vec2 ( 0.0 , - 1.0 ) , vec2 ( 0.0 , 0.03 )
>1040	Expression	t_pos , vec2 ( 0.0 , - 1.0 ) , vec2 ( 0.0 , 0.03 )
>1041	Expression	vec2 ( 0.0 , - 1.0 ) , vec2 ( 0.0 , 0.03 )
>1042	CallExpression	vec2 ( 0.0 , 0.03 )
>1043	ArgumentList	0.0
>1044	Argument	0.03
>1045	PrimaryExpression	0.03
>1046	Argument	0.0
>1047	PrimaryExpression	0.0
>1048	Callee	vec2
>1049	Identifier	vec2
>1050	CallExpression	vec2 ( 0.0 , - 1.0 )
>1051	ArgumentList	0.0
>1052	Argument	- 1.0
>1053	UnaryOp	- 1.0
>1054	PrimaryExpression	1.0
>1055	UnaryOperator	-
>1056	Argument	0.0
>1057	PrimaryExpression	0.0
>1058	Callee	vec2
>1059	Identifier	vec2
>1060	Identifier	t_pos
>1061	Identifier	tscore
>1062	Identifier	textfx
>1063	Identifier	textfx
>1064	IdentifierDeclType	FX *
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	tscore = \"+\" + to_string < int > ( torpedo_hit_score ( ) )
>1067	AssignmentExpr	tscore = \"+\" + to_string < int > ( torpedo_hit_score ( ) )
>1068	RelationalExpression	\"+\" + to_string < int > ( torpedo_hit_score ( ) )
>1069	RelationalExpression	int > ( torpedo_hit_score ( ) )
>1070	CallExpression	torpedo_hit_score ( )
>1071	ArgumentList	 
>1072	Callee	torpedo_hit_score
>1073	Identifier	torpedo_hit_score
>1074	Identifier	int
>1075	AdditiveExpression	\"+\" + to_string
>1076	Identifier	to_string
>1077	PrimaryExpression	\"+\"
>1078	Identifier	tscore
>1079	Identifier	tscore
>1080	IdentifierDeclType	string
>1081	ExpressionStatement	 
>1082	AssignmentExpr	m_score += torpedo_hit_score ( )
>1083	CallExpression	torpedo_hit_score ( )
>1084	ArgumentList	 
>1085	Callee	torpedo_hit_score
>1086	Identifier	torpedo_hit_score
>1087	Identifier	m_score
>1088	ExpressionStatement	 
>1089	CallExpression	t . explode ( )
>1090	ArgumentList	 
>1091	Callee	t . explode
>1092	MemberAccess	t . explode
>1093	Identifier	explode
>1094	Identifier	t
>1095	Condition	 
>1096	AndExpression	m . exploding ( ) && t . m_obb . overlaps ( m . m_explosion_circle )
>1097	CallExpression	t . m_obb . overlaps ( m . m_explosion_circle )
>1098	ArgumentList	m . m_explosion_circle
>1099	Argument	m . m_explosion_circle
>1100	MemberAccess	m . m_explosion_circle
>1101	Identifier	m_explosion_circle
>1102	Identifier	m
>1103	Callee	t . m_obb . overlaps
>1104	MemberAccess	t . m_obb . overlaps
>1105	Identifier	overlaps
>1106	MemberAccess	t . m_obb
>1107	Identifier	m_obb
>1108	Identifier	t
>1109	CallExpression	m . exploding ( )
>1110	ArgumentList	 
>1111	Callee	m . exploding
>1112	MemberAccess	m . exploding
>1113	Identifier	exploding
>1114	Identifier	m
>1115	IdentifierDeclStatement	 
>1116	IdentifierDecl	& m = * m_missiles [ y ]
>1117	AssignmentExpr	& m = * m_missiles [ y ]
>1118	UnaryOp	* m_missiles [ y ]
>1119	ArrayIndexing	m_missiles [ y ]
>1120	Identifier	y
>1121	Identifier	m_missiles
>1122	UnaryOperator	*
>1123	Identifier	m
>1124	Identifier	m
>1125	IdentifierDeclType	Missile &
>1126	UnaryExpression	 
>1127	Identifier	y
>1128	IncDec	++
>1129	Condition	 
>1130	RelationalExpression	y < m_missiles . size ( )
>1131	CallExpression	m_missiles . size ( )
>1132	ArgumentList	 
>1133	Callee	m_missiles . size
>1134	MemberAccess	m_missiles . size
>1135	Identifier	size
>1136	Identifier	m_missiles
>1137	Identifier	y
>1138	ForInit	 
>1139	IdentifierDeclStatement	unsigned int y = 0 ;
>1140	IdentifierDecl	y = 0
>1141	AssignmentExpr	y = 0
>1142	PrimaryExpression	0
>1143	Identifier	y
>1144	Identifier	y
>1145	IdentifierDeclType	unsigned int
>1146	ForStatement	for ( int i = 0 ; i < 3 ; ++ i )
>1147	CompoundStatement	 
>1148	IfStatement	if ( ! m_boats [ i ] -> is_sinking ( ) && t . m_obb . overlaps ( m_boats [ i ] -> m_obb ) )
>1149	CompoundStatement	 
>1150	ExpressionStatement	 
>1151	CallExpression	m_boats [ i ] -> hit ( t_pos [ 0 ] )
>1152	ArgumentList	t_pos [ 0 ]
>1153	Argument	t_pos [ 0 ]
>1154	ArrayIndexing	t_pos [ 0 ]
>1155	PrimaryExpression	0
>1156	Identifier	t_pos
>1157	Callee	m_boats [ i ] -> hit
>1158	PtrMemberAccess	m_boats [ i ] -> hit
>1159	Identifier	hit
>1160	ArrayIndexing	m_boats [ i ]
>1161	Identifier	i
>1162	Identifier	m_boats
>1163	ExpressionStatement	 
>1164	CallExpression	t . explode ( )
>1165	ArgumentList	 
>1166	Callee	t . explode
>1167	MemberAccess	t . explode
>1168	Identifier	explode
>1169	Identifier	t
>1170	Condition	 
>1171	AndExpression	! m_boats [ i ] -> is_sinking ( ) && t . m_obb . overlaps ( m_boats [ i ] -> m_obb )
>1172	CallExpression	t . m_obb . overlaps ( m_boats [ i ] -> m_obb )
>1173	ArgumentList	m_boats [ i ] -> m_obb
>1174	Argument	m_boats [ i ] -> m_obb
>1175	PtrMemberAccess	m_boats [ i ] -> m_obb
>1176	Identifier	m_obb
>1177	ArrayIndexing	m_boats [ i ]
>1178	Identifier	i
>1179	Identifier	m_boats
>1180	Callee	t . m_obb . overlaps
>1181	MemberAccess	t . m_obb . overlaps
>1182	Identifier	overlaps
>1183	MemberAccess	t . m_obb
>1184	Identifier	m_obb
>1185	Identifier	t
>1186	UnaryOp	! m_boats [ i ] -> is_sinking ( )
>1187	CallExpression	m_boats [ i ] -> is_sinking ( )
>1188	ArgumentList	 
>1189	Callee	m_boats [ i ] -> is_sinking
>1190	PtrMemberAccess	m_boats [ i ] -> is_sinking
>1191	Identifier	is_sinking
>1192	ArrayIndexing	m_boats [ i ]
>1193	Identifier	i
>1194	Identifier	m_boats
>1195	UnaryOperator	!
>1196	UnaryExpression	 
>1197	Identifier	i
>1198	IncDec	++
>1199	Condition	 
>1200	RelationalExpression	i < 3
>1201	PrimaryExpression	3
>1202	Identifier	i
>1203	ForInit	 
>1204	IdentifierDeclStatement	int i = 0 ;
>1205	IdentifierDecl	i = 0
>1206	AssignmentExpr	i = 0
>1207	PrimaryExpression	0
>1208	Identifier	i
>1209	Identifier	i
>1210	IdentifierDeclType	int
>1211	IfStatement	if ( t_pos [ 1 ] < 0.30 )
>1212	CompoundStatement	 
>1213	IfStatement	if ( t_pos [ 1 ] < sea_level )
>1214	ExpressionStatement	 
>1215	CallExpression	t . explode ( )
>1216	ArgumentList	 
>1217	Callee	t . explode
>1218	MemberAccess	t . explode
>1219	Identifier	explode
>1220	Identifier	t
>1221	Condition	 
>1222	RelationalExpression	t_pos [ 1 ] < sea_level
>1223	Identifier	sea_level
>1224	ArrayIndexing	t_pos [ 1 ]
>1225	PrimaryExpression	1
>1226	Identifier	t_pos
>1227	IdentifierDeclStatement	 
>1228	IdentifierDecl	sea_level = Sea 
>1229	AssignmentExpr	sea_level = Sea 
>1230	AdditiveExpression	Sea 
>1231	PrimaryExpression	0.263
>1232	CallExpression	Sea 
>1233	ArgumentList	t_pos [ 0 ]
>1234	Argument	t_pos [ 0 ]
>1235	ArrayIndexing	t_pos [ 0 ]
>1236	PrimaryExpression	0
>1237	Identifier	t_pos
>1238	Callee	Sea 
>1239	Identifier	Sea 
>1240	Identifier	sea_level
>1241	Identifier	sea_level
>1242	IdentifierDeclType	float
>1243	Condition	 
>1244	RelationalExpression	t_pos [ 1 ] < 0.30
>1245	PrimaryExpression	0.30
>1246	ArrayIndexing	t_pos [ 1 ]
>1247	PrimaryExpression	1
>1248	Identifier	t_pos
>1249	IdentifierDeclStatement	 
>1250	IdentifierDecl	t_pos = t . get_pos ( )
>1251	AssignmentExpr	t_pos = t . get_pos ( )
>1252	CallExpression	t . get_pos ( )
>1253	ArgumentList	 
>1254	Callee	t . get_pos
>1255	MemberAccess	t . get_pos
>1256	Identifier	get_pos
>1257	Identifier	t
>1258	Identifier	t_pos
>1259	Identifier	t_pos
>1260	IdentifierDeclType	vec2
>1261	IfStatement	if ( t . alive ( ) == false )
>1262	ContinueStatement	 
>1263	Condition	 
>1264	EqualityExpression	t . alive ( ) == false
>1265	Identifier	false
>1266	CallExpression	t . alive ( )
>1267	ArgumentList	 
>1268	Callee	t . alive
>1269	MemberAccess	t . alive
>1270	Identifier	alive
>1271	Identifier	t
>1272	ExpressionStatement	 
>1273	CallExpression	t . update ( )
>1274	ArgumentList	 
>1275	Callee	t . update
>1276	MemberAccess	t . update
>1277	Identifier	update
>1278	Identifier	t
>1279	IdentifierDeclStatement	 
>1280	IdentifierDecl	& t = * it
>1281	AssignmentExpr	& t = * it
>1282	UnaryOp	* it
>1283	Identifier	it
>1284	UnaryOperator	*
>1285	Identifier	t
>1286	Identifier	t
>1287	IdentifierDeclType	Torpedo &
>1288	Statement	 
>1289	Statement	 
>1290	Statement	 
>1291	Statement	 
>1292	Statement	 
>1293	Statement	 
>1294	Statement	 
>1295	Statement	 
>1296	Statement	 
>1297	Statement	 
>1298	Statement	 
>1299	ForStatement	for ( unsigned int i = 0 ; i < m_missiles . size ( ) ; ++ i )
>1300	ExpressionStatement	 
>1301	CallExpression	m_missiles [ i ] -> draw ( )
>1302	ArgumentList	 
>1303	Callee	m_missiles [ i ] -> draw
>1304	PtrMemberAccess	m_missiles [ i ] -> draw
>1305	Identifier	draw
>1306	ArrayIndexing	m_missiles [ i ]
>1307	Identifier	i
>1308	Identifier	m_missiles
>1309	UnaryExpression	 
>1310	Identifier	i
>1311	IncDec	++
>1312	Condition	 
>1313	RelationalExpression	i < m_missiles . size ( )
>1314	CallExpression	m_missiles . size ( )
>1315	ArgumentList	 
>1316	Callee	m_missiles . size
>1317	MemberAccess	m_missiles . size
>1318	Identifier	size
>1319	Identifier	m_missiles
>1320	Identifier	i
>1321	ForInit	 
>1322	IdentifierDeclStatement	unsigned int i = 0 ;
>1323	IdentifierDecl	i = 0
>1324	AssignmentExpr	i = 0
>1325	PrimaryExpression	0
>1326	Identifier	i
>1327	Identifier	i
>1328	IdentifierDeclType	unsigned int
>1329	ForStatement	for ( unsigned int i = 0 ; i < m_missiles . size ( ) ; ++ i )
>1330	ExpressionStatement	 
>1331	CallExpression	m_missiles [ i ] -> draw_dest ( )
>1332	ArgumentList	 
>1333	Callee	m_missiles [ i ] -> draw_dest
>1334	PtrMemberAccess	m_missiles [ i ] -> draw_dest
>1335	Identifier	draw_dest
>1336	ArrayIndexing	m_missiles [ i ]
>1337	Identifier	i
>1338	Identifier	m_missiles
>1339	UnaryExpression	 
>1340	Identifier	i
>1341	IncDec	++
>1342	Condition	 
>1343	RelationalExpression	i < m_missiles . size ( )
>1344	CallExpression	m_missiles . size ( )
>1345	ArgumentList	 
>1346	Callee	m_missiles . size
>1347	MemberAccess	m_missiles . size
>1348	Identifier	size
>1349	Identifier	m_missiles
>1350	Identifier	i
>1351	ForInit	 
>1352	IdentifierDeclStatement	unsigned int i = 0 ;
>1353	IdentifierDecl	i = 0
>1354	AssignmentExpr	i = 0
>1355	PrimaryExpression	0
>1356	Identifier	i
>1357	Identifier	i
>1358	IdentifierDeclType	unsigned int
>1359	ForStatement	for ( unsigned int i = 0 ; i < m_missiles . size ( ) ; ++ i )
>1360	CompoundStatement	 
>1361	ExpressionStatement	 
>1362	CallExpression	m_missiles [ i ] -> draw_path ( )
>1363	ArgumentList	 
>1364	Callee	m_missiles [ i ] -> draw_path
>1365	PtrMemberAccess	m_missiles [ i ] -> draw_path
>1366	Identifier	draw_path
>1367	ArrayIndexing	m_missiles [ i ]
>1368	Identifier	i
>1369	Identifier	m_missiles
>1370	ExpressionStatement	 
>1371	CallExpression	m_missiles [ i ] -> update ( )
>1372	ArgumentList	 
>1373	Callee	m_missiles [ i ] -> update
>1374	PtrMemberAccess	m_missiles [ i ] -> update
>1375	Identifier	update
>1376	ArrayIndexing	m_missiles [ i ]
>1377	Identifier	i
>1378	Identifier	m_missiles
>1379	UnaryExpression	 
>1380	Identifier	i
>1381	IncDec	++
>1382	Condition	 
>1383	RelationalExpression	i < m_missiles . size ( )
>1384	CallExpression	m_missiles . size ( )
>1385	ArgumentList	 
>1386	Callee	m_missiles . size
>1387	MemberAccess	m_missiles . size
>1388	Identifier	size
>1389	Identifier	m_missiles
>1390	Identifier	i
>1391	ForInit	 
>1392	IdentifierDeclStatement	unsigned int i = 0 ;
>1393	IdentifierDecl	i = 0
>1394	AssignmentExpr	i = 0
>1395	PrimaryExpression	0
>1396	Identifier	i
>1397	Identifier	i
>1398	IdentifierDeclType	unsigned int
>1399	ExpressionStatement	 
>1400	CallExpression	glLoadIdentity ( )
>1401	ArgumentList	 
>1402	Callee	glLoadIdentity
>1403	Identifier	glLoadIdentity
>1447	FunctionDef	Game 
>1448	ParameterList	 
>1449	ReturnType	void
>1450	CompoundStatement	 
>1451	SwitchStatement	switch ( m_gamemode )
>1452	CompoundStatement	 
>1453	CompoundStatement	 
>1454	BreakStatement	 
>1455	ExpressionStatement	 
>1456	CallExpression	g_resources . font -> print_text_with_shadow ( nametext . c_str ( ) , vec2 ( 0.55 , y + adv_y * 3 ) , 1.0 , false , \
>1457	ArgumentList	nametext . c_str ( )
>1458	Argument	vec4 ( 1 , 1 , 0 , 1 )
>1459	CallExpression	vec4 ( 1 , 1 , 0 , 1 )
>1460	ArgumentList	1
>1461	Argument	1
>1462	PrimaryExpression	1
>1463	Argument	0
>1464	PrimaryExpression	0
>1465	Argument	1
>1466	PrimaryExpression	1
>1467	Argument	1
>1468	PrimaryExpression	1
>1469	Callee	vec4
>1470	Identifier	vec4
>1471	Argument	false
>1472	Identifier	false
>1473	Argument	1.0
>1474	PrimaryExpression	1.0
>1475	Argument	vec2 ( 0.55 , y + adv_y * 3 )
>1476	CallExpression	vec2 ( 0.55 , y + adv_y * 3 )
>1477	ArgumentList	0.55
>1478	Argument	y + adv_y * 3
>1479	AdditiveExpression	y + adv_y * 3
>1480	MultiplicativeExpression	adv_y * 3
>1481	PrimaryExpression	3
>1482	Identifier	adv_y
>1483	Identifier	y
>1484	Argument	0.55
>1485	PrimaryExpression	0.55
>1486	Callee	vec2
>1487	Identifier	vec2
>1488	Argument	nametext . c_str ( )
>1489	CallExpression	nametext . c_str ( )
>1490	ArgumentList	 
>1491	Callee	nametext . c_str
>1492	MemberAccess	nametext . c_str
>1493	Identifier	c_str
>1494	Identifier	nametext
>1495	Callee	g_resources . font -> print_text_with_shadow
>1496	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>1497	Identifier	print_text_with_shadow
>1498	MemberAccess	g_resources . font
>1499	Identifier	font
>1500	Identifier	g_resources
>1501	IfStatement	if ( gm_time - ( floor ( gm_time ) ) < 0.5 )
>1502	ExpressionStatement	 
>1503	AssignmentExpr	nametext += \"_\"
>1504	PrimaryExpression	\"_\"
>1505	Identifier	nametext
>1506	Condition	 
>1507	RelationalExpression	gm_time - ( floor ( gm_time ) ) < 0.5
>1508	PrimaryExpression	0.5
>1509	AdditiveExpression	gm_time - ( floor ( gm_time ) )
>1510	CallExpression	floor ( gm_time )
>1511	ArgumentList	gm_time
>1512	Argument	gm_time
>1513	Identifier	gm_time
>1514	Callee	floor
>1515	Identifier	floor
>1516	Identifier	gm_time
>1517	IdentifierDeclStatement	 
>1518	IdentifierDecl	nametext = \"> \" + m_hiscore_name
>1519	AssignmentExpr	nametext = \"> \" + m_hiscore_name
>1520	AdditiveExpression	\"> \" + m_hiscore_name
>1521	Identifier	m_hiscore_name
>1522	PrimaryExpression	\"> \"
>1523	Identifier	nametext
>1524	Identifier	nametext
>1525	IdentifierDeclType	string
>1526	ExpressionStatement	 
>1527	CallExpression	g_resources . font -> print_text_with_shadow ( s3 . c_str ( ) , vec2 ( 0.0 , y + adv_y * 2 ) , 1.0 , true , vec4 ( \
>1528	ArgumentList	s3 . c_str ( )
>1529	Argument	vec4 ( 1 , 1 , 1 , 1 )
>1530	CallExpression	vec4 ( 1 , 1 , 1 , 1 )
>1531	ArgumentList	1
>1532	Argument	1
>1533	PrimaryExpression	1
>1534	Argument	1
>1535	PrimaryExpression	1
>1536	Argument	1
>1537	PrimaryExpression	1
>1538	Argument	1
>1539	PrimaryExpression	1
>1540	Callee	vec4
>1541	Identifier	vec4
>1542	Argument	true
>1543	Identifier	true
>1544	Argument	1.0
>1545	PrimaryExpression	1.0
>1546	Argument	vec2 ( 0.0 , y + adv_y * 2 )
>1547	CallExpression	vec2 ( 0.0 , y + adv_y * 2 )
>1548	ArgumentList	0.0
>1549	Argument	y + adv_y * 2
>1550	AdditiveExpression	y + adv_y * 2
>1551	MultiplicativeExpression	adv_y * 2
>1552	PrimaryExpression	2
>1553	Identifier	adv_y
>1554	Identifier	y
>1555	Argument	0.0
>1556	PrimaryExpression	0.0
>1557	Callee	vec2
>1558	Identifier	vec2
>1559	Argument	s3 . c_str ( )
>1560	CallExpression	s3 . c_str ( )
>1561	ArgumentList	 
>1562	Callee	s3 . c_str
>1563	MemberAccess	s3 . c_str
>1564	Identifier	c_str
>1565	Identifier	s3
>1566	Callee	g_resources . font -> print_text_with_shadow
>1567	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>1568	Identifier	print_text_with_shadow
>1569	MemberAccess	g_resources . font
>1570	Identifier	font
>1571	Identifier	g_resources
>1572	ExpressionStatement	 
>1573	CallExpression	g_resources . font -> print_text_with_shadow ( s2 . c_str ( ) , vec2 ( 0.0 , y + adv_y ) , 1.0 , true , vec4 ( 1 , \
>1574	ArgumentList	s2 . c_str ( )
>1575	Argument	vec4 ( 1 , 1 , 1 , 1 )
>1576	CallExpression	vec4 ( 1 , 1 , 1 , 1 )
>1577	ArgumentList	1
>1578	Argument	1
>1579	PrimaryExpression	1
>1580	Argument	1
>1581	PrimaryExpression	1
>1582	Argument	1
>1583	PrimaryExpression	1
>1584	Argument	1
>1585	PrimaryExpression	1
>1586	Callee	vec4
>1587	Identifier	vec4
>1588	Argument	true
>1589	Identifier	true
>1590	Argument	1.0
>1591	PrimaryExpression	1.0
>1592	Argument	vec2 ( 0.0 , y + adv_y )
>1593	CallExpression	vec2 ( 0.0 , y + adv_y )
>1594	ArgumentList	0.0
>1595	Argument	y + adv_y
>1596	AdditiveExpression	y + adv_y
>1597	Identifier	adv_y
>1598	Identifier	y
>1599	Argument	0.0
>1600	PrimaryExpression	0.0
>1601	Callee	vec2
>1602	Identifier	vec2
>1603	Argument	s2 . c_str ( )
>1604	CallExpression	s2 . c_str ( )
>1605	ArgumentList	 
>1606	Callee	s2 . c_str
>1607	MemberAccess	s2 . c_str
>1608	Identifier	c_str
>1609	Identifier	s2
>1610	Callee	g_resources . font -> print_text_with_shadow
>1611	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>1612	Identifier	print_text_with_shadow
>1613	MemberAccess	g_resources . font
>1614	Identifier	font
>1615	Identifier	g_resources
>1616	ExpressionStatement	 
>1617	CallExpression	g_resources . font -> print_text_with_shadow ( s . c_str ( ) , vec2 ( 0.0 , y ) , 1.0 , true , vec4 ( 1 , 1 , 1 , \
>1618	ArgumentList	s . c_str ( )
>1619	Argument	vec4 ( 1 , 1 , 1 , 1 )
>1620	CallExpression	vec4 ( 1 , 1 , 1 , 1 )
>1621	ArgumentList	1
>1622	Argument	1
>1623	PrimaryExpression	1
>1624	Argument	1
>1625	PrimaryExpression	1
>1626	Argument	1
>1627	PrimaryExpression	1
>1628	Argument	1
>1629	PrimaryExpression	1
>1630	Callee	vec4
>1631	Identifier	vec4
>1632	Argument	true
>1633	Identifier	true
>1634	Argument	1.0
>1635	PrimaryExpression	1.0
>1636	Argument	vec2 ( 0.0 , y )
>1637	CallExpression	vec2 ( 0.0 , y )
>1638	ArgumentList	0.0
>1639	Argument	y
>1640	Identifier	y
>1641	Argument	0.0
>1642	PrimaryExpression	0.0
>1643	Callee	vec2
>1644	Identifier	vec2
>1645	Argument	s . c_str ( )
>1646	CallExpression	s . c_str ( )
>1647	ArgumentList	 
>1648	Callee	s . c_str
>1649	MemberAccess	s . c_str
>1650	Identifier	c_str
>1651	Identifier	s
>1652	Callee	g_resources . font -> print_text_with_shadow
>1653	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>1654	Identifier	print_text_with_shadow
>1655	MemberAccess	g_resources . font
>1656	Identifier	font
>1657	Identifier	g_resources
>1658	IdentifierDeclStatement	 
>1659	IdentifierDecl	s3 = \"Enter your name
>1660	AssignmentExpr	s3 = \"Enter your name
>1661	PrimaryExpression	\"Enter your name
>1662	Identifier	s3
>1663	Identifier	s3
>1664	IdentifierDeclType	string
>1665	IdentifierDeclStatement	 
>1666	IdentifierDecl	s2 = \"You've made a high score!\"
>1667	AssignmentExpr	s2 = \"You've made a high score!\"
>1668	PrimaryExpression	\"You've made a high score!\"
>1669	Identifier	s2
>1670	Identifier	s2
>1671	IdentifierDeclType	string
>1672	IdentifierDeclStatement	 
>1673	IdentifierDecl	s = \"Game Over\"
>1674	AssignmentExpr	s = \"Game Over\"
>1675	PrimaryExpression	\"Game Over\"
>1676	Identifier	s
>1677	Identifier	s
>1678	IdentifierDeclType	string
>1679	IdentifierDeclStatement	 
>1680	IdentifierDecl	adv_y = g_resources . font -> line_sep ( ) * 1.0
>1681	AssignmentExpr	adv_y = g_resources . font -> line_sep ( ) * 1.0
>1682	MultiplicativeExpression	g_resources . font -> line_sep ( ) * 1.0
>1683	PrimaryExpression	1.0
>1684	CallExpression	g_resources . font -> line_sep ( )
>1685	ArgumentList	 
>1686	Callee	g_resources . font -> line_sep
>1687	PtrMemberAccess	g_resources . font -> line_sep
>1688	Identifier	line_sep
>1689	MemberAccess	g_resources . font
>1690	Identifier	font
>1691	Identifier	g_resources
>1692	Identifier	adv_y
>1693	Identifier	adv_y
>1694	IdentifierDeclType	float
>1695	IdentifierDeclStatement	 
>1696	IdentifierDecl	y = 0.4 + menu_shift_y
>1697	AssignmentExpr	y = 0.4 + menu_shift_y
>1698	AdditiveExpression	0.4 + menu_shift_y
>1699	Identifier	menu_shift_y
>1700	PrimaryExpression	0.4
>1701	Identifier	y
>1702	Identifier	y
>1703	IdentifierDeclType	float
>1704	Label	 
>1705	Identifier	GM_GAMEOVER_HISCORE
>1706	CompoundStatement	 
>1707	BreakStatement	 
>1708	ExpressionStatement	 
>1709	CallExpression	g_resources . font -> print_text_with_shadow ( s . c_str ( ) , vec2 ( 0.0 , 0.4 + menu_shift_y ) , 1.0 , true , \
>1710	ArgumentList	s . c_str ( )
>1711	Argument	vec4 ( 1 , 1 , 1 , 1 )
>1712	CallExpression	vec4 ( 1 , 1 , 1 , 1 )
>1713	ArgumentList	1
>1714	Argument	1
>1715	PrimaryExpression	1
>1716	Argument	1
>1717	PrimaryExpression	1
>1718	Argument	1
>1719	PrimaryExpression	1
>1720	Argument	1
>1721	PrimaryExpression	1
>1722	Callee	vec4
>1723	Identifier	vec4
>1724	Argument	true
>1725	Identifier	true
>1726	Argument	1.0
>1727	PrimaryExpression	1.0
>1728	Argument	vec2 ( 0.0 , 0.4 + menu_shift_y )
>1729	CallExpression	vec2 ( 0.0 , 0.4 + menu_shift_y )
>1730	ArgumentList	0.0
>1731	Argument	0.4 + menu_shift_y
>1732	AdditiveExpression	0.4 + menu_shift_y
>1733	Identifier	menu_shift_y
>1734	PrimaryExpression	0.4
>1735	Argument	0.0
>1736	PrimaryExpression	0.0
>1737	Callee	vec2
>1738	Identifier	vec2
>1739	Argument	s . c_str ( )
>1740	CallExpression	s . c_str ( )
>1741	ArgumentList	 
>1742	Callee	s . c_str
>1743	MemberAccess	s . c_str
>1744	Identifier	c_str
>1745	Identifier	s
>1746	Callee	g_resources . font -> print_text_with_shadow
>1747	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>1748	Identifier	print_text_with_shadow
>1749	MemberAccess	g_resources . font
>1750	Identifier	font
>1751	Identifier	g_resources
>1752	IdentifierDeclStatement	 
>1753	IdentifierDecl	s = \"Game Over\"
>1754	AssignmentExpr	s = \"Game Over\"
>1755	PrimaryExpression	\"Game Over\"
>1756	Identifier	s
>1757	Identifier	s
>1758	IdentifierDeclType	string
>1759	IfStatement	if ( g_app -> m_hiscore -> is_highscore ( m_score ) )
>1760	CompoundStatement	 
>1761	BreakStatement	 
>1762	ExpressionStatement	 
>1763	AssignmentExpr	m_hiscore_name = g_app -> m_hiscore -> first_nonbuiltin_name ( )
>1764	CallExpression	g_app -> m_hiscore -> first_nonbuiltin_name ( )
>1765	ArgumentList	 
>1766	Callee	g_app -> m_hiscore -> first_nonbuiltin_name
>1767	PtrMemberAccess	g_app -> m_hiscore -> first_nonbuiltin_name
>1768	Identifier	first_nonbuiltin_name
>1769	PtrMemberAccess	g_app -> m_hiscore
>1770	Identifier	m_hiscore
>1771	Identifier	g_app
>1772	Identifier	m_hiscore_name
>1773	ExpressionStatement	 
>1774	CallExpression	change_gamemode ( GM_GAMEOVER_HISCORE )
>1775	ArgumentList	GM_GAMEOVER_HISCORE
>1776	Argument	GM_GAMEOVER_HISCORE
>1777	Identifier	GM_GAMEOVER_HISCORE
>1778	Callee	change_gamemode
>1779	Identifier	change_gamemode
>1780	Condition	 
>1781	CallExpression	g_app -> m_hiscore -> is_highscore ( m_score )
>1782	ArgumentList	m_score
>1783	Argument	m_score
>1784	Identifier	m_score
>1785	Callee	g_app -> m_hiscore -> is_highscore
>1786	PtrMemberAccess	g_app -> m_hiscore -> is_highscore
>1787	Identifier	is_highscore
>1788	PtrMemberAccess	g_app -> m_hiscore
>1789	Identifier	m_hiscore
>1790	Identifier	g_app
>1791	Label	 
>1792	Identifier	GM_GAMEOVER
>1793	BreakStatement	 
>1794	CompoundStatement	 
>1795	IfStatement	if ( gm_time > 8.0 )
>1796	CompoundStatement	 
>1797	ExpressionStatement	 
>1798	CallExpression	change_gamemode ( GM_STARTWAVE )
>1799	ArgumentList	GM_STARTWAVE
>1800	Argument	GM_STARTWAVE
>1801	Identifier	GM_STARTWAVE
>1802	Callee	change_gamemode
>1803	Identifier	change_gamemode
>1804	ExpressionStatement	 
>1805	IncDecOp	m_wave ++
>1806	IncDec	++
>1807	Identifier	m_wave
>1808	ExpressionStatement	 
>1809	AssignmentExpr	m_score += missilesleftscore + shipsleftscore
>1810	AdditiveExpression	missilesleftscore + shipsleftscore
>1811	Identifier	shipsleftscore
>1812	Identifier	missilesleftscore
>1813	Identifier	m_score
>1814	Condition	 
>1815	RelationalExpression	gm_time > 8.0
>1816	PrimaryExpression	8.0
>1817	Identifier	gm_time
>1818	CompoundStatement	 
>1819	ExpressionStatement	 
>1820	CallExpression	glPopMatrix ( )
>1821	ArgumentList	 
>1822	Callee	glPopMatrix
>1823	Identifier	glPopMatrix
>1824	ExpressionStatement	 
>1825	CallExpression	g_resources . mesh_missile -> draw ( )
>1826	ArgumentList	 
>1827	Callee	g_resources . mesh_missile -> draw
>1828	PtrMemberAccess	g_resources . mesh_missile -> draw
>1829	Identifier	draw
>1830	MemberAccess	g_resources . mesh_missile
>1831	Identifier	mesh_missile
>1832	Identifier	g_resources
>1833	ExpressionStatement	 
>1834	CallExpression	glColor4f ( 0 , 0 , 0 , alpha_missiles )
>1835	ArgumentList	0
>1836	Argument	alpha_missiles
>1837	Identifier	alpha_missiles
>1838	Argument	0
>1839	PrimaryExpression	0
>1840	Argument	0
>1841	PrimaryExpression	0
>1842	Argument	0
>1843	PrimaryExpression	0
>1844	Callee	glColor4f
>1845	Identifier	glColor4f
>1846	ExpressionStatement	 
>1847	CallExpression	glRotatef ( 180 , 0 , 0 , 1 )
>1848	ArgumentList	180
>1849	Argument	1
>1850	PrimaryExpression	1
>1851	Argument	0
>1852	PrimaryExpression	0
>1853	Argument	0
>1854	PrimaryExpression	0
>1855	Argument	180
>1856	PrimaryExpression	180
>1857	Callee	glRotatef
>1858	Identifier	glRotatef
>1859	ExpressionStatement	 
>1860	CallExpression	glScalef ( 0.05 , 0.05 , 1.0 )
>1861	ArgumentList	0.05
>1862	Argument	1.0
>1863	PrimaryExpression	1.0
>1864	Argument	0.05
>1865	PrimaryExpression	0.05
>1866	Argument	0.05
>1867	PrimaryExpression	0.05
>1868	Callee	glScalef
>1869	Identifier	glScalef
>1870	ExpressionStatement	 
>1871	CallExpression	glTranslatef ( 0.68 , y + adv_y * 3 + 0.037 , 0 )
>1872	ArgumentList	0.68
>1873	Argument	0
>1874	PrimaryExpression	0
>1875	Argument	y + adv_y * 3 + 0.037
>1876	AdditiveExpression	y + adv_y * 3 + 0.037
>1877	AdditiveExpression	adv_y * 3 + 0.037
>1878	PrimaryExpression	0.037
>1879	MultiplicativeExpression	adv_y * 3
>1880	PrimaryExpression	3
>1881	Identifier	adv_y
>1882	Identifier	y
>1883	Argument	0.68
>1884	PrimaryExpression	0.68
>1885	Callee	glTranslatef
>1886	Identifier	glTranslatef
>1887	ExpressionStatement	 
>1888	CallExpression	glPushMatrix ( )
>1889	ArgumentList	 
>1890	Callee	glPushMatrix
>1891	Identifier	glPushMatrix
>1892	ExpressionStatement	 
>1893	CallExpression	g_resources . font -> print_text_with_shadow ( s . c_str ( ) , vec2 ( 0.85 , y + adv_y * 3 ) , 1.0 , false , vec4 ( \
>1894	ArgumentList	s . c_str ( )
>1895	Argument	vec4 ( 1 , 1 , 1 , alpha_missiles )
>1896	CallExpression	vec4 ( 1 , 1 , 1 , alpha_missiles )
>1897	ArgumentList	1
>1898	Argument	alpha_missiles
>1899	Identifier	alpha_missiles
>1900	Argument	1
>1901	PrimaryExpression	1
>1902	Argument	1
>1903	PrimaryExpression	1
>1904	Argument	1
>1905	PrimaryExpression	1
>1906	Callee	vec4
>1907	Identifier	vec4
>1908	Argument	false
>1909	Identifier	false
>1910	Argument	1.0
>1911	PrimaryExpression	1.0
>1912	Argument	vec2 ( 0.85 , y + adv_y * 3 )
>1913	CallExpression	vec2 ( 0.85 , y + adv_y * 3 )
>1914	ArgumentList	0.85
>1915	Argument	y + adv_y * 3
>1916	AdditiveExpression	y + adv_y * 3
>1917	MultiplicativeExpression	adv_y * 3
>1918	PrimaryExpression	3
>1919	Identifier	adv_y
>1920	Identifier	y
>1921	Argument	0.85
>1922	PrimaryExpression	0.85
>1923	Callee	vec2
>1924	Identifier	vec2
>1925	Argument	s . c_str ( )
>1926	CallExpression	s . c_str ( )
>1927	ArgumentList	 
>1928	Callee	s . c_str
>1929	MemberAccess	s . c_str
>1930	Identifier	c_str
>1931	Identifier	s
>1932	Callee	g_resources . font -> print_text_with_shadow
>1933	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>1934	Identifier	print_text_with_shadow
>1935	MemberAccess	g_resources . font
>1936	Identifier	font
>1937	Identifier	g_resources
>1938	ExpressionStatement	 
>1939	AssignmentExpr	s = + \" = +\" + to_string < int > ( missilesleftscore )
>1940	RelationalExpression	+ \" = +\" + to_string < int > ( missilesleftscore )
>1941	RelationalExpression	int > ( missilesleftscore )
>1942	Identifier	missilesleftscore
>1943	Identifier	int
>1944	AdditiveExpression	+ \" = +\" + to_string
>1945	Identifier	to_string
>1946	UnaryOp	+ \" = +\"
>1947	PrimaryExpression	\" = +\"
>1948	UnaryOperator	+
>1949	Identifier	s
>1950	ExpressionStatement	 
>1951	CallExpression	g_resources . font -> print_text_with_shadow ( s . c_str ( ) , vec2 ( 0.73 , y + adv_y * 3 ) , 1.0 , false , vec4 ( \
>1952	ArgumentList	s . c_str ( )
>1953	Argument	vec4 ( 1 , 1 , 1 , alpha_missiles )
>1954	CallExpression	vec4 ( 1 , 1 , 1 , alpha_missiles )
>1955	ArgumentList	1
>1956	Argument	alpha_missiles
>1957	Identifier	alpha_missiles
>1958	Argument	1
>1959	PrimaryExpression	1
>1960	Argument	1
>1961	PrimaryExpression	1
>1962	Argument	1
>1963	PrimaryExpression	1
>1964	Callee	vec4
>1965	Identifier	vec4
>1966	Argument	false
>1967	Identifier	false
>1968	Argument	1.0
>1969	PrimaryExpression	1.0
>1970	Argument	vec2 ( 0.73 , y + adv_y * 3 )
>1971	CallExpression	vec2 ( 0.73 , y + adv_y * 3 )
>1972	ArgumentList	0.73
>1973	Argument	y + adv_y * 3
>1974	AdditiveExpression	y + adv_y * 3
>1975	MultiplicativeExpression	adv_y * 3
>1976	PrimaryExpression	3
>1977	Identifier	adv_y
>1978	Identifier	y
>1979	Argument	0.73
>1980	PrimaryExpression	0.73
>1981	Callee	vec2
>1982	Identifier	vec2
>1983	Argument	s . c_str ( )
>1984	CallExpression	s . c_str ( )
>1985	ArgumentList	 
>1986	Callee	s . c_str
>1987	MemberAccess	s . c_str
>1988	Identifier	c_str
>1989	Identifier	s
>1990	Callee	g_resources . font -> print_text_with_shadow
>1991	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>1992	Identifier	print_text_with_shadow
>1993	MemberAccess	g_resources . font
>1994	Identifier	font
>1995	Identifier	g_resources
>1996	ExpressionStatement	 
>1997	AssignmentExpr	s = \"x\" + to_string < int > ( missilesleft )
>1998	RelationalExpression	\"x\" + to_string < int > ( missilesleft )
>1999	RelationalExpression	int > ( missilesleft )
>2000	Identifier	missilesleft
>2001	Identifier	int
>2002	AdditiveExpression	\"x\" + to_string
>2003	Identifier	to_string
>2004	PrimaryExpression	\"x\"
>2005	Identifier	s
>2006	CompoundStatement	 
>2007	ExpressionStatement	 
>2008	CallExpression	glPopMatrix ( )
>2009	ArgumentList	 
>2010	Callee	glPopMatrix
>2011	Identifier	glPopMatrix
>2012	ExpressionStatement	 
>2013	CallExpression	g_resources . mesh_tanker -> draw ( )
>2014	ArgumentList	 
>2015	Callee	g_resources . mesh_tanker -> draw
>2016	PtrMemberAccess	g_resources . mesh_tanker -> draw
>2017	Identifier	draw
>2018	MemberAccess	g_resources . mesh_tanker
>2019	Identifier	mesh_tanker
>2020	Identifier	g_resources
>2021	ExpressionStatement	 
>2022	CallExpression	glColor4f ( 0 , 0 , 0 , alpha_ships )
>2023	ArgumentList	0
>2024	Argument	alpha_ships
>2025	Identifier	alpha_ships
>2026	Argument	0
>2027	PrimaryExpression	0
>2028	Argument	0
>2029	PrimaryExpression	0
>2030	Argument	0
>2031	PrimaryExpression	0
>2032	Callee	glColor4f
>2033	Identifier	glColor4f
>2034	ExpressionStatement	 
>2035	CallExpression	glScalef ( 0.17 , 0.17 , 1.0 )
>2036	ArgumentList	0.17
>2037	Argument	1.0
>2038	PrimaryExpression	1.0
>2039	Argument	0.17
>2040	PrimaryExpression	0.17
>2041	Argument	0.17
>2042	PrimaryExpression	0.17
>2043	Callee	glScalef
>2044	Identifier	glScalef
>2045	ExpressionStatement	 
>2046	CallExpression	glTranslatef ( 0.63 , y + adv_y * 2 + 0.030 , 0 )
>2047	ArgumentList	0.63
>2048	Argument	0
>2049	PrimaryExpression	0
>2050	Argument	y + adv_y * 2 + 0.030
>2051	AdditiveExpression	y + adv_y * 2 + 0.030
>2052	AdditiveExpression	adv_y * 2 + 0.030
>2053	PrimaryExpression	0.030
>2054	MultiplicativeExpression	adv_y * 2
>2055	PrimaryExpression	2
>2056	Identifier	adv_y
>2057	Identifier	y
>2058	Argument	0.63
>2059	PrimaryExpression	0.63
>2060	Callee	glTranslatef
>2061	Identifier	glTranslatef
>2062	ExpressionStatement	 
>2063	CallExpression	glPushMatrix ( )
>2064	ArgumentList	 
>2065	Callee	glPushMatrix
>2066	Identifier	glPushMatrix
>2067	ExpressionStatement	 
>2068	CallExpression	g_resources . font -> print_text_with_shadow ( s . c_str ( ) , vec2 ( 0.85 , y + adv_y * 2 ) , 1.0 , false , vec4 ( \
>2069	ArgumentList	s . c_str ( )
>2070	Argument	vec4 ( 1 , 1 , 1 , alpha_ships )
>2071	CallExpression	vec4 ( 1 , 1 , 1 , alpha_ships )
>2072	ArgumentList	1
>2073	Argument	alpha_ships
>2074	Identifier	alpha_ships
>2075	Argument	1
>2076	PrimaryExpression	1
>2077	Argument	1
>2078	PrimaryExpression	1
>2079	Argument	1
>2080	PrimaryExpression	1
>2081	Callee	vec4
>2082	Identifier	vec4
>2083	Argument	false
>2084	Identifier	false
>2085	Argument	1.0
>2086	PrimaryExpression	1.0
>2087	Argument	vec2 ( 0.85 , y + adv_y * 2 )
>2088	CallExpression	vec2 ( 0.85 , y + adv_y * 2 )
>2089	ArgumentList	0.85
>2090	Argument	y + adv_y * 2
>2091	AdditiveExpression	y + adv_y * 2
>2092	MultiplicativeExpression	adv_y * 2
>2093	PrimaryExpression	2
>2094	Identifier	adv_y
>2095	Identifier	y
>2096	Argument	0.85
>2097	PrimaryExpression	0.85
>2098	Callee	vec2
>2099	Identifier	vec2
>2100	Argument	s . c_str ( )
>2101	CallExpression	s . c_str ( )
>2102	ArgumentList	 
>2103	Callee	s . c_str
>2104	MemberAccess	s . c_str
>2105	Identifier	c_str
>2106	Identifier	s
>2107	Callee	g_resources . font -> print_text_with_shadow
>2108	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>2109	Identifier	print_text_with_shadow
>2110	MemberAccess	g_resources . font
>2111	Identifier	font
>2112	Identifier	g_resources
>2113	ExpressionStatement	 
>2114	AssignmentExpr	s = + \" = +\" + to_string < int > ( shipsleftscore )
>2115	RelationalExpression	+ \" = +\" + to_string < int > ( shipsleftscore )
>2116	RelationalExpression	int > ( shipsleftscore )
>2117	Identifier	shipsleftscore
>2118	Identifier	int
>2119	AdditiveExpression	+ \" = +\" + to_string
>2120	Identifier	to_string
>2121	UnaryOp	+ \" = +\"
>2122	PrimaryExpression	\" = +\"
>2123	UnaryOperator	+
>2124	Identifier	s
>2125	ExpressionStatement	 
>2126	CallExpression	g_resources . font -> print_text_with_shadow ( s . c_str ( ) , vec2 ( 0.73 , y + adv_y * 2 ) , 1.0 , false , vec4 ( \
>2127	ArgumentList	s . c_str ( )
>2128	Argument	vec4 ( 1 , 1 , 1 , alpha_ships )
>2129	CallExpression	vec4 ( 1 , 1 , 1 , alpha_ships )
>2130	ArgumentList	1
>2131	Argument	alpha_ships
>2132	Identifier	alpha_ships
>2133	Argument	1
>2134	PrimaryExpression	1
>2135	Argument	1
>2136	PrimaryExpression	1
>2137	Argument	1
>2138	PrimaryExpression	1
>2139	Callee	vec4
>2140	Identifier	vec4
>2141	Argument	false
>2142	Identifier	false
>2143	Argument	1.0
>2144	PrimaryExpression	1.0
>2145	Argument	vec2 ( 0.73 , y + adv_y * 2 )
>2146	CallExpression	vec2 ( 0.73 , y + adv_y * 2 )
>2147	ArgumentList	0.73
>2148	Argument	y + adv_y * 2
>2149	AdditiveExpression	y + adv_y * 2
>2150	MultiplicativeExpression	adv_y * 2
>2151	PrimaryExpression	2
>2152	Identifier	adv_y
>2153	Identifier	y
>2154	Argument	0.73
>2155	PrimaryExpression	0.73
>2156	Callee	vec2
>2157	Identifier	vec2
>2158	Argument	s . c_str ( )
>2159	CallExpression	s . c_str ( )
>2160	ArgumentList	 
>2161	Callee	s . c_str
>2162	MemberAccess	s . c_str
>2163	Identifier	c_str
>2164	Identifier	s
>2165	Callee	g_resources . font -> print_text_with_shadow
>2166	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>2167	Identifier	print_text_with_shadow
>2168	MemberAccess	g_resources . font
>2169	Identifier	font
>2170	Identifier	g_resources
>2171	ExpressionStatement	 
>2172	AssignmentExpr	s = \"x\" + to_string < int > ( shipsleft )
>2173	RelationalExpression	\"x\" + to_string < int > ( shipsleft )
>2174	RelationalExpression	int > ( shipsleft )
>2175	Identifier	shipsleft
>2176	Identifier	int
>2177	AdditiveExpression	\"x\" + to_string
>2178	Identifier	to_string
>2179	PrimaryExpression	\"x\"
>2180	Identifier	s
>2181	ExpressionStatement	 
>2182	CallExpression	g_resources . font -> print_text_with_shadow ( s . c_str ( ) , vec2 ( 0.0 , y ) , 1.0 , true , vec4 ( 1 , 1 , 1 , \
>2183	ArgumentList	s . c_str ( )
>2184	Argument	vec4 ( 1 , 1 , 1 , alpha )
>2185	CallExpression	vec4 ( 1 , 1 , 1 , alpha )
>2186	ArgumentList	1
>2187	Argument	alpha
>2188	Identifier	alpha
>2189	Argument	1
>2190	PrimaryExpression	1
>2191	Argument	1
>2192	PrimaryExpression	1
>2193	Argument	1
>2194	PrimaryExpression	1
>2195	Callee	vec4
>2196	Identifier	vec4
>2197	Argument	true
>2198	Identifier	true
>2199	Argument	1.0
>2200	PrimaryExpression	1.0
>2201	Argument	vec2 ( 0.0 , y )
>2202	CallExpression	vec2 ( 0.0 , y )
>2203	ArgumentList	0.0
>2204	Argument	y
>2205	Identifier	y
>2206	Argument	0.0
>2207	PrimaryExpression	0.0
>2208	Callee	vec2
>2209	Identifier	vec2
>2210	Argument	s . c_str ( )
>2211	CallExpression	s . c_str ( )
>2212	ArgumentList	 
>2213	Callee	s . c_str
>2214	MemberAccess	s . c_str
>2215	Identifier	c_str
>2216	Identifier	s
>2217	Callee	g_resources . font -> print_text_with_shadow
>2218	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>2219	Identifier	print_text_with_shadow
>2220	MemberAccess	g_resources . font
>2221	Identifier	font
>2222	Identifier	g_resources
>2223	ExpressionStatement	 
>2224	AssignmentExpr	s = \"Wave \" + to_string < int > ( m_wave ) + \" cleared!\"
>2225	RelationalExpression	\"Wave \" + to_string < int > ( m_wave ) + \" cleared!\"
>2226	RelationalExpression	int > ( m_wave ) + \" cleared!\"
>2227	CastExpression	( m_wave ) + \" cleared!\"
>2228	UnaryOp	+ \" cleared!\"
>2229	PrimaryExpression	\" cleared!\"
>2230	UnaryOperator	+
>2231	CastTarget	m_wave
>2232	Identifier	int
>2233	AdditiveExpression	\"Wave \" + to_string
>2234	Identifier	to_string
>2235	PrimaryExpression	\"Wave \"
>2236	Identifier	s
>2237	IdentifierDeclStatement	 
>2238	IdentifierDecl	alpha_missiles = fade_in_out ( 2.0 , 2.5 , 7.5 , 8.0 , gm_time )
>2239	AssignmentExpr	alpha_missiles = fade_in_out ( 2.0 , 2.5 , 7.5 , 8.0 , gm_time )
>2240	CallExpression	fade_in_out ( 2.0 , 2.5 , 7.5 , 8.0 , gm_time )
>2241	ArgumentList	2.0
>2242	Argument	gm_time
>2243	Identifier	gm_time
>2244	Argument	8.0
>2245	PrimaryExpression	8.0
>2246	Argument	7.5
>2247	PrimaryExpression	7.5
>2248	Argument	2.5
>2249	PrimaryExpression	2.5
>2250	Argument	2.0
>2251	PrimaryExpression	2.0
>2252	Callee	fade_in_out
>2253	Identifier	fade_in_out
>2254	Identifier	alpha_missiles
>2255	Identifier	alpha_missiles
>2256	IdentifierDeclType	float
>2257	IdentifierDeclStatement	 
>2258	IdentifierDecl	alpha_ships = fade_in_out ( 1.0 , 1.5 , 7.5 , 8.0 , gm_time )
>2259	AssignmentExpr	alpha_ships = fade_in_out ( 1.0 , 1.5 , 7.5 , 8.0 , gm_time )
>2260	CallExpression	fade_in_out ( 1.0 , 1.5 , 7.5 , 8.0 , gm_time )
>2261	ArgumentList	1.0
>2262	Argument	gm_time
>2263	Identifier	gm_time
>2264	Argument	8.0
>2265	PrimaryExpression	8.0
>2266	Argument	7.5
>2267	PrimaryExpression	7.5
>2268	Argument	1.5
>2269	PrimaryExpression	1.5
>2270	Argument	1.0
>2271	PrimaryExpression	1.0
>2272	Callee	fade_in_out
>2273	Identifier	fade_in_out
>2274	Identifier	alpha_ships
>2275	Identifier	alpha_ships
>2276	IdentifierDeclType	float
>2277	IdentifierDeclStatement	 
>2278	IdentifierDecl	alpha = fade_in_out ( 0.0 , 0.5 , 7.5 , 8.0 , gm_time )
>2279	AssignmentExpr	alpha = fade_in_out ( 0.0 , 0.5 , 7.5 , 8.0 , gm_time )
>2280	CallExpression	fade_in_out ( 0.0 , 0.5 , 7.5 , 8.0 , gm_time )
>2281	ArgumentList	0.0
>2282	Argument	gm_time
>2283	Identifier	gm_time
>2284	Argument	8.0
>2285	PrimaryExpression	8.0
>2286	Argument	7.5
>2287	PrimaryExpression	7.5
>2288	Argument	0.5
>2289	PrimaryExpression	0.5
>2290	Argument	0.0
>2291	PrimaryExpression	0.0
>2292	Callee	fade_in_out
>2293	Identifier	fade_in_out
>2294	Identifier	alpha
>2295	Identifier	alpha
>2296	IdentifierDeclType	float
>2297	IdentifierDeclStatement	 
>2298	IdentifierDecl	shipsleftscore = ship_left_score ( ) * shipsleft
>2299	AssignmentExpr	shipsleftscore = ship_left_score ( ) * shipsleft
>2300	MultiplicativeExpression	ship_left_score ( ) * shipsleft
>2301	Identifier	shipsleft
>2302	CallExpression	ship_left_score ( )
>2303	ArgumentList	 
>2304	Callee	ship_left_score
>2305	Identifier	ship_left_score
>2306	Identifier	shipsleftscore
>2307	Identifier	shipsleftscore
>2308	IdentifierDeclType	int
>2309	IdentifierDeclStatement	 
>2310	IdentifierDecl	missilesleftscore = missile_left_score ( ) * missilesleft
>2311	AssignmentExpr	missilesleftscore = missile_left_score ( ) * missilesleft
>2312	MultiplicativeExpression	missile_left_score ( ) * missilesleft
>2313	Identifier	missilesleft
>2314	CallExpression	missile_left_score ( )
>2315	ArgumentList	 
>2316	Callee	missile_left_score
>2317	Identifier	missile_left_score
>2318	Identifier	missilesleftscore
>2319	Identifier	missilesleftscore
>2320	IdentifierDeclType	int
>2321	IdentifierDeclStatement	 
>2322	IdentifierDecl	shipsleft = ships_left ( )
>2323	AssignmentExpr	shipsleft = ships_left ( )
>2324	CallExpression	ships_left ( )
>2325	ArgumentList	 
>2326	Callee	ships_left
>2327	Identifier	ships_left
>2328	Identifier	shipsleft
>2329	Identifier	shipsleft
>2330	IdentifierDeclType	int
>2331	IdentifierDeclStatement	 
>2332	IdentifierDecl	missilesleft = m_pboat1 -> missiles_left ( ) + m_pboat2 -> missiles_left ( )
>2333	AssignmentExpr	missilesleft = m_pboat1 -> missiles_left ( ) + m_pboat2 -> missiles_left ( )
>2334	AdditiveExpression	m_pboat1 -> missiles_left ( ) + m_pboat2 -> missiles_left ( )
>2335	CallExpression	m_pboat2 -> missiles_left ( )
>2336	ArgumentList	 
>2337	Callee	m_pboat2 -> missiles_left
>2338	PtrMemberAccess	m_pboat2 -> missiles_left
>2339	Identifier	missiles_left
>2340	Identifier	m_pboat2
>2341	CallExpression	m_pboat1 -> missiles_left ( )
>2342	ArgumentList	 
>2343	Callee	m_pboat1 -> missiles_left
>2344	PtrMemberAccess	m_pboat1 -> missiles_left
>2345	Identifier	missiles_left
>2346	Identifier	m_pboat1
>2347	Identifier	missilesleft
>2348	Identifier	missilesleft
>2349	IdentifierDeclType	int
>2350	IdentifierDeclStatement	 
>2351	IdentifierDecl	adv_y = g_resources . font -> line_sep ( ) * 1.0
>2352	AssignmentExpr	adv_y = g_resources . font -> line_sep ( ) * 1.0
>2353	MultiplicativeExpression	g_resources . font -> line_sep ( ) * 1.0
>2354	PrimaryExpression	1.0
>2355	CallExpression	g_resources . font -> line_sep ( )
>2356	ArgumentList	 
>2357	Callee	g_resources . font -> line_sep
>2358	PtrMemberAccess	g_resources . font -> line_sep
>2359	Identifier	line_sep
>2360	MemberAccess	g_resources . font
>2361	Identifier	font
>2362	Identifier	g_resources
>2363	Identifier	adv_y
>2364	Identifier	adv_y
>2365	IdentifierDeclType	float
>2366	IdentifierDeclStatement	 
>2367	IdentifierDecl	y = 0.4 + menu_shift_y
>2368	AssignmentExpr	y = 0.4 + menu_shift_y
>2369	AdditiveExpression	0.4 + menu_shift_y
>2370	Identifier	menu_shift_y
>2371	PrimaryExpression	0.4
>2372	Identifier	y
>2373	Identifier	y
>2374	IdentifierDeclType	float
>2375	Label	 
>2376	Identifier	GM_ENDWAVE
>2377	BreakStatement	 
>2378	IfStatement	if ( torpedoes_left ( ) < 1 )
>2379	CompoundStatement	 
>2380	BreakStatement	 
>2381	ExpressionStatement	 
>2382	CallExpression	change_gamemode ( GM_ENDWAVE )
>2383	ArgumentList	GM_ENDWAVE
>2384	Argument	GM_ENDWAVE
>2385	Identifier	GM_ENDWAVE
>2386	Callee	change_gamemode
>2387	Identifier	change_gamemode
>2388	Condition	 
>2389	RelationalExpression	torpedoes_left ( ) < 1
>2390	PrimaryExpression	1
>2391	CallExpression	torpedoes_left ( )
>2392	ArgumentList	 
>2393	Callee	torpedoes_left
>2394	Identifier	torpedoes_left
>2395	IfStatement	if ( ships_left ( ) < 1 )
>2396	CompoundStatement	 
>2397	BreakStatement	 
>2398	ExpressionStatement	 
>2399	CallExpression	change_gamemode ( GM_GAMEOVER )
>2400	ArgumentList	GM_GAMEOVER
>2401	Argument	GM_GAMEOVER
>2402	Identifier	GM_GAMEOVER
>2403	Callee	change_gamemode
>2404	Identifier	change_gamemode
>2405	Condition	 
>2406	RelationalExpression	ships_left ( ) < 1
>2407	PrimaryExpression	1
>2408	CallExpression	ships_left ( )
>2409	ArgumentList	 
>2410	Callee	ships_left
>2411	Identifier	ships_left
>2412	IfStatement	if ( m_torpedoes_to_spawn > 0 && g_timer -> now ( ) > ( m_torpedo_spawn_time + m_last_torpedo_spawned_at ) )
>2413	CompoundStatement	 
>2414	ExpressionStatement	 
>2415	CallExpression	spawn_torpedo ( )
>2416	ArgumentList	 
>2417	Callee	spawn_torpedo
>2418	Identifier	spawn_torpedo
>2419	Condition	 
>2420	AndExpression	m_torpedoes_to_spawn > 0 && g_timer -> now ( ) > ( m_torpedo_spawn_time + m_last_torpedo_spawned_at )
>2421	RelationalExpression	g_timer -> now ( ) > ( m_torpedo_spawn_time + m_last_torpedo_spawned_at )
>2422	AdditiveExpression	m_torpedo_spawn_time + m_last_torpedo_spawned_at
>2423	Identifier	m_last_torpedo_spawned_at
>2424	Identifier	m_torpedo_spawn_time
>2425	CallExpression	g_timer -> now ( )
>2426	ArgumentList	 
>2427	Callee	g_timer -> now
>2428	PtrMemberAccess	g_timer -> now
>2429	Identifier	now
>2430	Identifier	g_timer
>2431	RelationalExpression	m_torpedoes_to_spawn > 0
>2432	PrimaryExpression	0
>2433	Identifier	m_torpedoes_to_spawn
>2434	Label	 
>2435	Identifier	GM_INGAME
>2436	BreakStatement	 
>2437	IfStatement	if ( gm_time <= 3.0 )
>2438	ElseStatement	else
>2439	CompoundStatement	 
>2440	ExpressionStatement	 
>2441	CallExpression	change_gamemode ( GM_INGAME )
>2442	ArgumentList	GM_INGAME
>2443	Argument	GM_INGAME
>2444	Identifier	GM_INGAME
>2445	Callee	change_gamemode
>2446	Identifier	change_gamemode
>2447	ExpressionStatement	 
>2448	CallExpression	start_wave ( )
>2449	ArgumentList	 
>2450	Callee	start_wave
>2451	Identifier	start_wave
>2452	CompoundStatement	 
>2453	ExpressionStatement	 
>2454	CallExpression	g_resources . font -> print_text_with_shadow ( wave2 . c_str ( ) , vec2 ( 0.0 , 0.4 + menu_shift_y + g_resources \
>2455	ArgumentList	wave2 . c_str ( )
>2456	Argument	vec4 ( 1 , 1 , 1 , alpha )
>2457	CallExpression	vec4 ( 1 , 1 , 1 , alpha )
>2458	ArgumentList	1
>2459	Argument	alpha
>2460	Identifier	alpha
>2461	Argument	1
>2462	PrimaryExpression	1
>2463	Argument	1
>2464	PrimaryExpression	1
>2465	Argument	1
>2466	PrimaryExpression	1
>2467	Callee	vec4
>2468	Identifier	vec4
>2469	Argument	true
>2470	Identifier	true
>2471	Argument	1.0
>2472	PrimaryExpression	1.0
>2473	Argument	vec2 ( 0.0 , 0.4 + menu_shift_y + g_resources . font -> line_sep ( ) * 1.0 )
>2474	CallExpression	vec2 ( 0.0 , 0.4 + menu_shift_y + g_resources . font -> line_sep ( ) * 1.0 )
>2475	ArgumentList	0.0
>2476	Argument	0.4 + menu_shift_y + g_resources . font -> line_sep ( ) * 1.0
>2477	AdditiveExpression	0.4 + menu_shift_y + g_resources . font -> line_sep ( ) * 1.0
>2478	AdditiveExpression	menu_shift_y + g_resources . font -> line_sep ( ) * 1.0
>2479	MultiplicativeExpression	g_resources . font -> line_sep ( ) * 1.0
>2480	PrimaryExpression	1.0
>2481	CallExpression	g_resources . font -> line_sep ( )
>2482	ArgumentList	 
>2483	Callee	g_resources . font -> line_sep
>2484	PtrMemberAccess	g_resources . font -> line_sep
>2485	Identifier	line_sep
>2486	MemberAccess	g_resources . font
>2487	Identifier	font
>2488	Identifier	g_resources
>2489	Identifier	menu_shift_y
>2490	PrimaryExpression	0.4
>2491	Argument	0.0
>2492	PrimaryExpression	0.0
>2493	Callee	vec2
>2494	Identifier	vec2
>2495	Argument	wave2 . c_str ( )
>2496	CallExpression	wave2 . c_str ( )
>2497	ArgumentList	 
>2498	Callee	wave2 . c_str
>2499	MemberAccess	wave2 . c_str
>2500	Identifier	c_str
>2501	Identifier	wave2
>2502	Callee	g_resources . font -> print_text_with_shadow
>2503	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>2504	Identifier	print_text_with_shadow
>2505	MemberAccess	g_resources . font
>2506	Identifier	font
>2507	Identifier	g_resources
>2508	ExpressionStatement	 
>2509	CallExpression	g_resources . font -> print_text_with_shadow ( wave . c_str ( ) , vec2 ( 0.0 , 0.4 + menu_shift_y ) , 1.0 , true , \
>2510	ArgumentList	wave . c_str ( )
>2511	Argument	vec4 ( 1 , 1 , 1 , alpha )
>2512	CallExpression	vec4 ( 1 , 1 , 1 , alpha )
>2513	ArgumentList	1
>2514	Argument	alpha
>2515	Identifier	alpha
>2516	Argument	1
>2517	PrimaryExpression	1
>2518	Argument	1
>2519	PrimaryExpression	1
>2520	Argument	1
>2521	PrimaryExpression	1
>2522	Callee	vec4
>2523	Identifier	vec4
>2524	Argument	true
>2525	Identifier	true
>2526	Argument	1.0
>2527	PrimaryExpression	1.0
>2528	Argument	vec2 ( 0.0 , 0.4 + menu_shift_y )
>2529	CallExpression	vec2 ( 0.0 , 0.4 + menu_shift_y )
>2530	ArgumentList	0.0
>2531	Argument	0.4 + menu_shift_y
>2532	AdditiveExpression	0.4 + menu_shift_y
>2533	Identifier	menu_shift_y
>2534	PrimaryExpression	0.4
>2535	Argument	0.0
>2536	PrimaryExpression	0.0
>2537	Callee	vec2
>2538	Identifier	vec2
>2539	Argument	wave . c_str ( )
>2540	CallExpression	wave . c_str ( )
>2541	ArgumentList	 
>2542	Callee	wave . c_str
>2543	MemberAccess	wave . c_str
>2544	Identifier	c_str
>2545	Identifier	wave
>2546	Callee	g_resources . font -> print_text_with_shadow
>2547	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>2548	Identifier	print_text_with_shadow
>2549	MemberAccess	g_resources . font
>2550	Identifier	font
>2551	Identifier	g_resources
>2552	IdentifierDeclStatement	 
>2553	IdentifierDecl	wave2 = \"Get Ready!\"
>2554	AssignmentExpr	wave2 = \"Get Ready!\"
>2555	PrimaryExpression	\"Get Ready!\"
>2556	Identifier	wave2
>2557	Identifier	wave2
>2558	IdentifierDeclType	string
>2559	IdentifierDeclStatement	 
>2560	IdentifierDecl	wave = \"Wave \" + to_string < int > ( m_wave )
>2561	AssignmentExpr	wave = \"Wave \" + to_string < int > ( m_wave )
>2562	RelationalExpression	\"Wave \" + to_string < int > ( m_wave )
>2563	RelationalExpression	int > ( m_wave )
>2564	Identifier	m_wave
>2565	Identifier	int
>2566	AdditiveExpression	\"Wave \" + to_string
>2567	Identifier	to_string
>2568	PrimaryExpression	\"Wave \"
>2569	Identifier	wave
>2570	Identifier	wave
>2571	IdentifierDeclType	string
>2572	ExpressionStatement	 
>2573	AssignmentExpr	alpha = clamp < float > ( alpha , 0.0 , 1.0 )
>2574	RelationalExpression	clamp < float > ( alpha , 0.0 , 1.0 )
>2575	RelationalExpression	float > ( alpha , 0.0 , 1.0 )
>2576	Expression	alpha , 0.0 , 1.0
>2577	Expression	0.0 , 1.0
>2578	PrimaryExpression	1.0
>2579	PrimaryExpression	0.0
>2580	Identifier	alpha
>2581	Identifier	float
>2582	Identifier	clamp
>2583	Identifier	alpha
>2584	IdentifierDeclStatement	 
>2585	IdentifierDecl	alpha = fade_in_out ( 0.0 , 0.5 , 2.5 , 3.0 , gm_time )
>2586	AssignmentExpr	alpha = fade_in_out ( 0.0 , 0.5 , 2.5 , 3.0 , gm_time )
>2587	CallExpression	fade_in_out ( 0.0 , 0.5 , 2.5 , 3.0 , gm_time )
>2588	ArgumentList	0.0
>2589	Argument	gm_time
>2590	Identifier	gm_time
>2591	Argument	3.0
>2592	PrimaryExpression	3.0
>2593	Argument	2.5
>2594	PrimaryExpression	2.5
>2595	Argument	0.5
>2596	PrimaryExpression	0.5
>2597	Argument	0.0
>2598	PrimaryExpression	0.0
>2599	Callee	fade_in_out
>2600	Identifier	fade_in_out
>2601	Identifier	alpha
>2602	Identifier	alpha
>2603	IdentifierDeclType	float
>2604	Condition	 
>2605	RelationalExpression	gm_time <= 3.0
>2606	PrimaryExpression	3.0
>2607	Identifier	gm_time
>2608	ExpressionStatement	 
>2609	CallExpression	m_pboat2 -> reload_ammo ( )
>2610	ArgumentList	 
>2611	Callee	m_pboat2 -> reload_ammo
>2612	PtrMemberAccess	m_pboat2 -> reload_ammo
>2613	Identifier	reload_ammo
>2614	Identifier	m_pboat2
>2615	ExpressionStatement	 
>2616	CallExpression	m_pboat1 -> reload_ammo ( )
>2617	ArgumentList	 
>2618	Callee	m_pboat1 -> reload_ammo
>2619	PtrMemberAccess	m_pboat1 -> reload_ammo
>2620	Identifier	reload_ammo
>2621	Identifier	m_pboat1
>2622	Label	 
>2623	Identifier	GM_STARTWAVE
>2624	Condition	 
>2625	Identifier	m_gamemode
>2626	IdentifierDeclStatement	 
>2627	IdentifierDecl	s = \"\"
>2628	AssignmentExpr	s = \"\"
>2629	PrimaryExpression	\"\"
>2630	Identifier	s
>2631	Identifier	s
>2632	IdentifierDeclType	string
>2633	IfStatement	if ( g_mode != MODE_GAME )
>2634	ExpressionStatement	 
>2635	AssignmentExpr	menu_shift_y = - 0.35
>2636	UnaryOp	- 0.35
>2637	PrimaryExpression	0.35
>2638	UnaryOperator	-
>2639	Identifier	menu_shift_y
>2640	Condition	 
>2641	EqualityExpression	g_mode != MODE_GAME
>2642	Identifier	MODE_GAME
>2643	Identifier	g_mode
>2644	IdentifierDeclStatement	 
>2645	IdentifierDecl	menu_shift_y = 0.0
>2646	AssignmentExpr	menu_shift_y = 0.0
>2647	PrimaryExpression	0.0
>2648	Identifier	menu_shift_y
>2649	Identifier	menu_shift_y
>2650	IdentifierDeclType	float
>2651	IdentifierDeclStatement	 
>2652	IdentifierDecl	gm_time = g_timer -> now ( ) - m_last_gamemode_change
>2653	AssignmentExpr	gm_time = g_timer -> now ( ) - m_last_gamemode_change
>2654	AdditiveExpression	g_timer -> now ( ) - m_last_gamemode_change
>2655	Identifier	m_last_gamemode_change
>2656	CallExpression	g_timer -> now ( )
>2657	ArgumentList	 
>2658	Callee	g_timer -> now
>2659	PtrMemberAccess	g_timer -> now
>2660	Identifier	now
>2661	Identifier	g_timer
>2662	Identifier	gm_time
>2663	Identifier	gm_time
>2664	IdentifierDeclType	float
>2743	FunctionDef	Game 
>2744	ParameterList	const vec2 & pos
>2745	Parameter	 
>2746	Identifier	pos
>2747	ParameterType	const vec2 &
>2748	ReturnType	bool
>2749	CompoundStatement	 
>2750	ReturnStatement	 
>2751	Identifier	false
>2752	IfStatement	if ( pos [ 0 ] > 1.46 && pos [ 1 ] < 0.06 )
>2753	CompoundStatement	 
>2754	ReturnStatement	 
>2755	Identifier	true
>2756	Condition	 
>2757	AndExpression	pos [ 0 ] > 1.46 && pos [ 1 ] < 0.06
>2758	RelationalExpression	pos [ 1 ] < 0.06
>2759	PrimaryExpression	0.06
>2760	ArrayIndexing	pos [ 1 ]
>2761	PrimaryExpression	1
>2762	Identifier	pos
>2763	RelationalExpression	pos [ 0 ] > 1.46
>2764	PrimaryExpression	1.46
>2765	ArrayIndexing	pos [ 0 ]
>2766	PrimaryExpression	0
>2767	Identifier	pos
>2775	FunctionDef	Game 
>2776	ParameterList	int button , int action
>2777	Parameter	 
>2778	Identifier	action
>2779	ParameterType	int
>2780	Parameter	 
>2781	Identifier	button
>2782	ParameterType	int
>2783	ReturnType	void
>2784	CompoundStatement	 
>2785	SwitchStatement	switch ( m_gamemode )
>2786	CompoundStatement	 
>2787	BreakStatement	 
>2788	SwitchStatement	switch ( button )
>2789	CompoundStatement	 
>2790	ReturnStatement	 
>2791	Label	 
>2792	Identifier	default
>2793	BreakStatement	 
>2794	IfStatement	if ( m_pboat2 -> missiles_left ( ) )
>2795	CompoundStatement	 
>2796	ExpressionStatement	 
>2797	CallExpression	m_missiles . push_back ( m_pboat2 -> fire_missile ( dest , m_missile_radius ) )
>2798	ArgumentList	m_pboat2 -> fire_missile ( dest , m_missile_radius )
>2799	Argument	m_pboat2 -> fire_missile ( dest , m_missile_radius )
>2800	CallExpression	m_pboat2 -> fire_missile ( dest , m_missile_radius )
>2801	ArgumentList	dest
>2802	Argument	m_missile_radius
>2803	Identifier	m_missile_radius
>2804	Argument	dest
>2805	Identifier	dest
>2806	Callee	m_pboat2 -> fire_missile
>2807	PtrMemberAccess	m_pboat2 -> fire_missile
>2808	Identifier	fire_missile
>2809	Identifier	m_pboat2
>2810	Callee	m_missiles . push_back
>2811	MemberAccess	m_missiles . push_back
>2812	Identifier	push_back
>2813	Identifier	m_missiles
>2814	Condition	 
>2815	CallExpression	m_pboat2 -> missiles_left ( )
>2816	ArgumentList	 
>2817	Callee	m_pboat2 -> missiles_left
>2818	PtrMemberAccess	m_pboat2 -> missiles_left
>2819	Identifier	missiles_left
>2820	Identifier	m_pboat2
>2821	Label	 
>2822	Identifier	GLFW_MOUSE_BUTTON_RIGHT
>2823	BreakStatement	 
>2824	IfStatement	if ( m_pboat1 -> missiles_left ( ) )
>2825	CompoundStatement	 
>2826	ExpressionStatement	 
>2827	CallExpression	m_missiles . push_back ( m_pboat1 -> fire_missile ( dest , m_missile_radius ) )
>2828	ArgumentList	m_pboat1 -> fire_missile ( dest , m_missile_radius )
>2829	Argument	m_pboat1 -> fire_missile ( dest , m_missile_radius )
>2830	CallExpression	m_pboat1 -> fire_missile ( dest , m_missile_radius )
>2831	ArgumentList	dest
>2832	Argument	m_missile_radius
>2833	Identifier	m_missile_radius
>2834	Argument	dest
>2835	Identifier	dest
>2836	Callee	m_pboat1 -> fire_missile
>2837	PtrMemberAccess	m_pboat1 -> fire_missile
>2838	Identifier	fire_missile
>2839	Identifier	m_pboat1
>2840	Callee	m_missiles . push_back
>2841	MemberAccess	m_missiles . push_back
>2842	Identifier	push_back
>2843	Identifier	m_missiles
>2844	Condition	 
>2845	CallExpression	m_pboat1 -> missiles_left ( )
>2846	ArgumentList	 
>2847	Callee	m_pboat1 -> missiles_left
>2848	PtrMemberAccess	m_pboat1 -> missiles_left
>2849	Identifier	missiles_left
>2850	Identifier	m_pboat1
>2851	Label	 
>2852	Identifier	GLFW_MOUSE_BUTTON_LEFT
>2853	Condition	 
>2854	Identifier	button
>2855	Label	 
>2856	Identifier	GM_INGAME
>2857	BreakStatement	 
>2858	Label	 
>2859	Identifier	GM_GAMEOVER_HISCORE
>2860	Label	 
>2861	Identifier	GM_GAMEOVER
>2862	Label	 
>2863	Identifier	GM_ENDWAVE
>2864	Label	 
>2865	Identifier	GM_STARTWAVE
>2866	Condition	 
>2867	Identifier	m_gamemode
>2868	IfStatement	if ( dest [ 1 ] < 0.35 )
>2869	ExpressionStatement	 
>2870	AssignmentExpr	dest [ 1 ] = 0.35
>2871	PrimaryExpression	0.35
>2872	ArrayIndexing	dest [ 1 ]
>2873	PrimaryExpression	1
>2874	Identifier	dest
>2875	Condition	 
>2876	RelationalExpression	dest [ 1 ] < 0.35
>2877	PrimaryExpression	0.35
>2878	ArrayIndexing	dest [ 1 ]
>2879	PrimaryExpression	1
>2880	Identifier	dest
>2881	IfStatement	if ( dest [ 1 ] < 0.25 )
>2882	ReturnStatement	 
>2883	Condition	 
>2884	RelationalExpression	dest [ 1 ] < 0.25
>2885	PrimaryExpression	0.25
>2886	ArrayIndexing	dest [ 1 ]
>2887	PrimaryExpression	1
>2888	Identifier	dest
>2889	IfStatement	if ( g_timer -> is_paused ( ) )
>2890	ReturnStatement	 
>2891	Condition	 
>2892	CallExpression	g_timer -> is_paused ( )
>2893	ArgumentList	 
>2894	Callee	g_timer -> is_paused
>2895	PtrMemberAccess	g_timer -> is_paused
>2896	Identifier	is_paused
>2897	Identifier	g_timer
>2898	IfStatement	if ( mouse_over_menu_button ( dest ) && g_mode != MODE_MENU )
>2899	CompoundStatement	 
>2900	ReturnStatement	 
>2901	ExpressionStatement	 
>2902	CallExpression	g_timer -> pause ( )
>2903	ArgumentList	 
>2904	Callee	g_timer -> pause
>2905	PtrMemberAccess	g_timer -> pause
>2906	Identifier	pause
>2907	Identifier	g_timer
>2908	ExpressionStatement	 
>2909	CallExpression	g_app -> m_gamemenu -> switch_to_item ( 0 )
>2910	ArgumentList	0
>2911	Argument	0
>2912	PrimaryExpression	0
>2913	Callee	g_app -> m_gamemenu -> switch_to_item
>2914	PtrMemberAccess	g_app -> m_gamemenu -> switch_to_item
>2915	Identifier	switch_to_item
>2916	PtrMemberAccess	g_app -> m_gamemenu
>2917	Identifier	m_gamemenu
>2918	Identifier	g_app
>2919	ExpressionStatement	 
>2920	AssignmentExpr	g_mode = MODE_MENU
>2921	Identifier	MODE_MENU
>2922	Identifier	g_mode
>2923	Condition	 
>2924	AndExpression	mouse_over_menu_button ( dest ) && g_mode != MODE_MENU
>2925	EqualityExpression	g_mode != MODE_MENU
>2926	Identifier	MODE_MENU
>2927	Identifier	g_mode
>2928	CallExpression	mouse_over_menu_button ( dest )
>2929	ArgumentList	dest
>2930	Argument	dest
>2931	Identifier	dest
>2932	Callee	mouse_over_menu_button
>2933	Identifier	mouse_over_menu_button
>2934	IdentifierDeclStatement	 
>2935	IdentifierDecl	dest = g_mouse . get_pos ( )
>2936	AssignmentExpr	dest = g_mouse . get_pos ( )
>2937	CallExpression	g_mouse . get_pos ( )
>2938	ArgumentList	 
>2939	Callee	g_mouse . get_pos
>2940	MemberAccess	g_mouse . get_pos
>2941	Identifier	get_pos
>2942	Identifier	g_mouse
>2943	Identifier	dest
>2944	Identifier	dest
>2945	IdentifierDeclType	vec2
>2975	FunctionDef	Game 
>2976	ParameterList	int key
>2977	Parameter	 
>2978	Identifier	key
>2979	ParameterType	int
>2980	ReturnType	void
>2981	CompoundStatement	 
>2982	SwitchStatement	switch ( key )
>2983	CompoundStatement	 
>2984	BreakStatement	 
>2985	ExpressionStatement	 
>2986	CallExpression	g_app -> m_gamemenu -> switch_to_item ( 0 )
>2987	ArgumentList	0
>2988	Argument	0
>2989	PrimaryExpression	0
>2990	Callee	g_app -> m_gamemenu -> switch_to_item
>2991	PtrMemberAccess	g_app -> m_gamemenu -> switch_to_item
>2992	Identifier	switch_to_item
>2993	PtrMemberAccess	g_app -> m_gamemenu
>2994	Identifier	m_gamemenu
>2995	Identifier	g_app
>2996	ExpressionStatement	 
>2997	CallExpression	g_app -> m_gamemenu -> switch_to_menu ( \"main\" )
>2998	ArgumentList	\"main\"
>2999	Argument	\"main\"
>3000	PrimaryExpression	\"main\"
>3001	Callee	g_app -> m_gamemenu -> switch_to_menu
>3002	PtrMemberAccess	g_app -> m_gamemenu -> switch_to_menu
>3003	Identifier	switch_to_menu
>3004	PtrMemberAccess	g_app -> m_gamemenu
>3005	Identifier	m_gamemenu
>3006	Identifier	g_app
>3007	ExpressionStatement	 
>3008	AssignmentExpr	g_mode = MODE_SCORES
>3009	Identifier	MODE_SCORES
>3010	Identifier	g_mode
>3011	ExpressionStatement	 
>3012	AssignmentExpr	m_ended = true
>3013	Identifier	true
>3014	Identifier	m_ended
>3015	ExpressionStatement	 
>3016	AssignmentExpr	m_score = 0
>3017	PrimaryExpression	0
>3018	Identifier	m_score
>3019	ExpressionStatement	 
>3020	CallExpression	change_gamemode ( GM_GAMEOVER )
>3021	ArgumentList	GM_GAMEOVER
>3022	Argument	GM_GAMEOVER
>3023	Identifier	GM_GAMEOVER
>3024	Callee	change_gamemode
>3025	Identifier	change_gamemode
>3026	ExpressionStatement	 
>3027	CallExpression	g_app -> m_hiscore -> add_highscore ( m_hiscore_name , m_score )
>3028	ArgumentList	m_hiscore_name
>3029	Argument	m_score
>3030	Identifier	m_score
>3031	Argument	m_hiscore_name
>3032	Identifier	m_hiscore_name
>3033	Callee	g_app -> m_hiscore -> add_highscore
>3034	PtrMemberAccess	g_app -> m_hiscore -> add_highscore
>3035	Identifier	add_highscore
>3036	PtrMemberAccess	g_app -> m_hiscore
>3037	Identifier	m_hiscore
>3038	Identifier	g_app
>3039	Label	 
>3040	Identifier	GLFW_KEY_ENTER
>3041	BreakStatement	 
>3042	IfStatement	if ( m_hiscore_name . length ( ) > 0 )
>3043	ExpressionStatement	 
>3044	CallExpression	m_hiscore_name . erase ( m_hiscore_name . end ( ) - 1 )
>3045	ArgumentList	m_hiscore_name . end ( ) - 1
>3046	Argument	m_hiscore_name . end ( ) - 1
>3047	AdditiveExpression	m_hiscore_name . end ( ) - 1
>3048	PrimaryExpression	1
>3049	CallExpression	m_hiscore_name . end ( )
>3050	ArgumentList	 
>3051	Callee	m_hiscore_name . end
>3052	MemberAccess	m_hiscore_name . end
>3053	Identifier	end
>3054	Identifier	m_hiscore_name
>3055	Callee	m_hiscore_name . erase
>3056	MemberAccess	m_hiscore_name . erase
>3057	Identifier	erase
>3058	Identifier	m_hiscore_name
>3059	Condition	 
>3060	RelationalExpression	m_hiscore_name . length ( ) > 0
>3061	PrimaryExpression	0
>3062	CallExpression	m_hiscore_name . length ( )
>3063	ArgumentList	 
>3064	Callee	m_hiscore_name . length
>3065	MemberAccess	m_hiscore_name . length
>3066	Identifier	length
>3067	Identifier	m_hiscore_name
>3068	Label	 
>3069	Identifier	GLFW_KEY_BACKSPACE
>3070	Condition	 
>3071	Identifier	key
>3089	FunctionDef	Game 
>3090	ParameterList	int ch
>3091	Parameter	 
>3092	Identifier	ch
>3093	ParameterType	int
>3094	ReturnType	void
>3095	CompoundStatement	 
>3096	IfStatement	if ( isprint ( ch ) )
>3097	IfStatement	if ( m_hiscore_name . length ( ) < 16 )
>3098	ExpressionStatement	 
>3099	AssignmentExpr	m_hiscore_name += ch
>3100	Identifier	ch
>3101	Identifier	m_hiscore_name
>3102	Condition	 
>3103	RelationalExpression	m_hiscore_name . length ( ) < 16
>3104	PrimaryExpression	16
>3105	CallExpression	m_hiscore_name . length ( )
>3106	ArgumentList	 
>3107	Callee	m_hiscore_name . length
>3108	MemberAccess	m_hiscore_name . length
>3109	Identifier	length
>3110	Identifier	m_hiscore_name
>3111	Condition	 
>3112	CallExpression	isprint ( ch )
>3113	ArgumentList	ch
>3114	Argument	ch
>3115	Identifier	ch
>3116	Callee	isprint
>3117	Identifier	isprint
>3125	FunctionDef	Game 
>3126	ParameterList	int ch , int action
>3127	Parameter	 
>3128	Identifier	action
>3129	ParameterType	int
>3130	Parameter	 
>3131	Identifier	ch
>3132	ParameterType	int
>3133	ReturnType	void
>3134	CompoundStatement	 
>3135	IfStatement	if ( m_gamemode == GM_GAMEOVER_HISCORE )
>3136	CompoundStatement	 
>3137	ReturnStatement	 
>3138	ExpressionStatement	 
>3139	CallExpression	highscore_entry_char ( ch )
>3140	ArgumentList	ch
>3141	Argument	ch
>3142	Identifier	ch
>3143	Callee	highscore_entry_char
>3144	Identifier	highscore_entry_char
>3145	Condition	 
>3146	EqualityExpression	m_gamemode == GM_GAMEOVER_HISCORE
>3147	Identifier	GM_GAMEOVER_HISCORE
>3148	Identifier	m_gamemode
>3156	FunctionDef	Game 
>3157	ParameterList	int key , int action
>3158	Parameter	 
>3159	Identifier	action
>3160	ParameterType	int
>3161	Parameter	 
>3162	Identifier	key
>3163	ParameterType	int
>3164	ReturnType	void
>3165	CompoundStatement	 
>3166	SwitchStatement	switch ( key )
>3167	CompoundStatement	 
>3168	Condition	 
>3169	Identifier	key
>3170	IfStatement	if ( m_gamemode == GM_GAMEOVER_HISCORE )
>3171	CompoundStatement	 
>3172	ReturnStatement	 
>3173	ExpressionStatement	 
>3174	CallExpression	highscore_entry_key ( key )
>3175	ArgumentList	key
>3176	Argument	key
>3177	Identifier	key
>3178	Callee	highscore_entry_key
>3179	Identifier	highscore_entry_key
>3180	Condition	 
>3181	EqualityExpression	m_gamemode == GM_GAMEOVER_HISCORE
>3182	Identifier	GM_GAMEOVER_HISCORE
>3183	Identifier	m_gamemode
>3184	IfStatement	if ( key == GLFW_KEY_ESC )
>3185	CompoundStatement	 
>3186	ReturnStatement	 
>3187	ExpressionStatement	 
>3188	CallExpression	g_app -> m_gamemenu -> switch_to_item ( 0 )
>3189	ArgumentList	0
>3190	Argument	0
>3191	PrimaryExpression	0
>3192	Callee	g_app -> m_gamemenu -> switch_to_item
>3193	PtrMemberAccess	g_app -> m_gamemenu -> switch_to_item
>3194	Identifier	switch_to_item
>3195	PtrMemberAccess	g_app -> m_gamemenu
>3196	Identifier	m_gamemenu
>3197	Identifier	g_app
>3198	ExpressionStatement	 
>3199	AssignmentExpr	g_mode = MODE_MENU
>3200	Identifier	MODE_MENU
>3201	Identifier	g_mode
>3202	IfStatement	if ( m_gamemode == GM_GAMEOVER )
>3203	ElseStatement	else
>3204	CompoundStatement	 
>3205	ExpressionStatement	 
>3206	CallExpression	g_timer -> pause ( )
>3207	ArgumentList	 
>3208	Callee	g_timer -> pause
>3209	PtrMemberAccess	g_timer -> pause
>3210	Identifier	pause
>3211	Identifier	g_timer
>3212	CompoundStatement	 
>3213	ExpressionStatement	 
>3214	AssignmentExpr	m_ended = true
>3215	Identifier	true
>3216	Identifier	m_ended
>3217	ExpressionStatement	 
>3218	CallExpression	g_app -> m_gamemenu -> switch_to_item ( 0 )
>3219	ArgumentList	0
>3220	Argument	0
>3221	PrimaryExpression	0
>3222	Callee	g_app -> m_gamemenu -> switch_to_item
>3223	PtrMemberAccess	g_app -> m_gamemenu -> switch_to_item
>3224	Identifier	switch_to_item
>3225	PtrMemberAccess	g_app -> m_gamemenu
>3226	Identifier	m_gamemenu
>3227	Identifier	g_app
>3228	ExpressionStatement	 
>3229	CallExpression	g_app -> m_gamemenu -> switch_to_menu ( \"main\" )
>3230	ArgumentList	\"main\"
>3231	Argument	\"main\"
>3232	PrimaryExpression	\"main\"
>3233	Callee	g_app -> m_gamemenu -> switch_to_menu
>3234	PtrMemberAccess	g_app -> m_gamemenu -> switch_to_menu
>3235	Identifier	switch_to_menu
>3236	PtrMemberAccess	g_app -> m_gamemenu
>3237	Identifier	m_gamemenu
>3238	Identifier	g_app
>3239	Condition	 
>3240	EqualityExpression	m_gamemode == GM_GAMEOVER
>3241	Identifier	GM_GAMEOVER
>3242	Identifier	m_gamemode
>3243	IfStatement	if ( m_gamemode == GM_GAMEOVER_HISCORE )
>3244	ReturnStatement	 
>3245	Condition	 
>3246	EqualityExpression	m_gamemode == GM_GAMEOVER_HISCORE
>3247	Identifier	GM_GAMEOVER_HISCORE
>3248	Identifier	m_gamemode
>3249	Condition	 
>3250	EqualityExpression	key == GLFW_KEY_ESC
>3251	Identifier	GLFW_KEY_ESC
>3252	Identifier	key
>3271	FunctionDef	Game 
>3272	ParameterList	 
>3273	ReturnType	bool
>3274	CompoundStatement	 
>3275	ReturnStatement	 
>3276	Identifier	m_ended
>3281	FunctionDef	Game 
>3282	ParameterList	 
>3283	ReturnType	game_modes_t
>3284	CompoundStatement	 
>3285	ReturnStatement	 
>3286	Identifier	m_gamemode
<11=19,12
<12=16,13
<13=15,14
<16=18,17
<19=87,72,57,46,35,27,20
<20=21
<21=25,22
<22=23
<23=24
<25=26
<27=28
<28=34,29
<29=33,30
<30=32,31
<35=36
<36=45,37
<37=43,38
<38=41,39
<39=40
<41=42
<43=44
<46=47
<47=56,48
<48=54,49
<49=52,50
<50=51
<52=53
<54=55
<57=58
<58=69,59
<59=61,60
<61=67,62
<62=65,63
<63=64
<65=66
<67=68
<69=71,70
<72=73
<73=84,74
<74=76,75
<76=82,77
<77=80,78
<78=79
<80=81
<82=83
<84=86,85
<87=88
<88=99,89
<89=91,90
<91=97,92
<92=95,93
<93=94
<95=96
<97=98
<99=101,100
<115=117,116
<117=154,150,149,147,146,144,122,118
<118=119
<119=121,120
<122=136,127,124,123
<124=126,125
<127=128
<128=135,129
<129=131,130
<131=132
<132=134,133
<136=137
<137=138
<138=143,142,139
<139=141,140
<144=145
<147=148
<150=151
<151=153,152
<154=163,159,156,155
<156=158,157
<159=160
<160=162,161
<163=164
<164=165
<165=170,169,166
<166=168,167
<178=184,183,179
<179=180
<180=182,181
<184=194,185
<185=186
<186=193,187
<187=189,188
<189=190
<190=192,191
<194=195
<195=197,196
<207=210,209,208
<210=261,243,239,232,225,218,211
<211=212
<212=214,213
<214=215
<215=217,216
<218=219
<219=221,220
<221=222
<222=224,223
<225=226
<226=228,227
<228=229
<229=231,230
<232=233
<233=235,234
<235=236
<236=238,237
<239=240
<240=242,241
<243=244
<244=260,245
<245=259,246
<246=258,247
<247=251,248
<248=250,249
<251=257,252
<252=254,253
<254=256,255
<261=262
<262=276,263
<263=275,264
<264=274,265
<265=269,266
<266=268,267
<269=273,270
<270=272,271
<291=294,293,292
<294=474,470,350,341,326,308,304,295
<295=296
<296=303,297
<297=299,298
<299=300
<300=302,301
<304=305
<305=307,306
<308=309
<309=322,310
<310=311
<311=312
<312=320,313
<313=318,316,314
<314=315
<316=317
<318=319
<320=321
<322=323
<323=325,324
<326=327
<327=340,339,328
<328=338,329
<329=337,330
<330=332,331
<332=334,333
<334=336,335
<341=342
<342=349,348,343
<343=347,344
<344=346,345
<350=439,421,351
<351=352
<352=390,372,353
<353=354
<354=355
<355=371,356
<356=369,357
<357=360,358
<358=359
<360=361
<361=367,362
<362=365,363
<363=364
<365=366
<367=368
<369=370
<372=373
<373=389,374
<374=387,375
<375=378,376
<376=377
<378=379
<379=385,380
<380=383,381
<381=382
<383=384
<385=386
<387=388
<390=391
<391=411,392
<392=401,393
<393=395,394
<395=396
<396=398,397
<398=400,399
<401=410,402
<402=404,403
<404=405
<405=407,406
<407=409,408
<411=420,412
<412=414,413
<414=415
<415=417,416
<417=419,418
<421=422
<422=438,423
<423=436,424
<424=427,425
<425=426
<427=428
<428=434,429
<429=432,430
<430=431
<432=433
<434=435
<436=437
<439=440
<440=462,441
<441=452,442
<442=451,443
<443=445,444
<445=446
<446=448,447
<448=450,449
<452=461,453
<453=455,454
<455=456
<456=458,457
<458=460,459
<462=464,463
<464=465
<465=467,466
<467=469,468
<470=471
<471=473,472
<474=475
<475=482,481,476
<476=478,477
<478=480,479
<506=515,514,507
<507=511,508
<508=510,509
<511=513,512
<515=516
<516=517
<517=523,518
<518=521,519
<519=520
<521=522
<523=524
<524=526,525
<533=536,535,534
<536=537
<537=538
<538=544,539
<539=543,540
<540=542,541
<544=548,545
<545=547,546
<554=557,556,555
<557=558
<558=559
<559=565,560
<560=564,561
<561=563,562
<570=573,572,571
<573=574
<574=575
<575=581,576
<576=580,577
<577=579,578
<586=589,588,587
<589=629,604,597,590
<590=591
<591=593,592
<593=594
<594=596,595
<597=598
<598=600,599
<600=601
<601=603,602
<604=621,617,614,605
<605=606
<606=608,607
<608=609
<609=611,610
<611=613,612
<614=616,615
<617=618
<618=620,619
<621=622
<622=623
<623=628,627,624
<624=626,625
<629=630
<630=632,631
<632=633
<643=646,645,644
<646=793,727,647
<647=720,709,697,674,648
<648=649
<649=668,650
<650=666,657,655,653,651
<651=652
<653=654
<655=656
<657=658
<658=664,659
<659=662,660
<660=661
<662=663
<664=665
<666=667
<668=669
<669=671,670
<671=673,672
<674=690,675
<675=676
<676=689,677
<677=687,678
<678=685,683,681,679
<679=680
<681=682
<683=684
<685=686
<687=688
<690=691
<691=695,692
<692=693
<693=694
<695=696
<697=698
<698=708,707,699
<699=706,700
<700=702,701
<702=703
<703=705,704
<709=710
<710=719,718,711
<711=717,712
<712=716,713
<713=715,714
<720=721
<721=726,725,722
<722=724,723
<727=784,765,728
<728=729
<729=759,730
<730=757,748,746,744,731
<731=732
<732=742,733
<733=740,738,736,734
<734=735
<736=737
<738=739
<740=741
<742=743
<744=745
<746=747
<748=749
<749=755,750
<750=753,751
<751=752
<753=754
<755=756
<757=758
<759=760
<760=762,761
<762=764,763
<765=766
<766=782,767
<767=780,778,768
<768=769
<769=777,770
<770=776,771
<771=775,772
<772=774,773
<778=779
<780=781
<782=783
<784=785
<785=792,791,790,786
<786=789,787
<787=788
<793=836,794
<794=795
<795=830,796
<796=823,814,812,810,797
<797=798
<798=808,799
<799=806,804,802,800
<800=801
<802=803
<804=805
<806=807
<808=809
<810=811
<812=813
<814=815
<815=821,816
<816=819,817
<817=818
<819=820
<821=822
<823=824
<824=826,825
<826=827
<827=829,828
<830=831
<831=833,832
<833=835,834
<836=837
<837=848,847,838
<838=846,839
<839=843,840
<840=842,841
<843=845,844
<872=875,874,873
<875=914,913,912,911,910,909,908,907,906,905,904,903,878,876
<876=877
<878=894,883,879
<879=880
<880=882,881
<883=885,884
<885=886
<886=888,887
<888=890,889
<890=891
<891=893,892
<894=895
<895=902,901,896
<896=900,897
<897=899,898
<914=915
<915=920,919,916
<916=918,917
<932=935,934,933
<935=969,938,936
<936=937
<938=961,957,954,939
<939=940
<940=945,941
<941=942
<942=944,943
<945=946
<946=948,947
<948=949
<949=951,950
<951=953,952
<954=956,955
<957=958
<958=960,959
<961=962
<962=963
<963=968,967,964
<964=966,965
<969=970
<970=975,974,971
<971=973,972
<987=990,989,988
<990=1399,1359,1329,1299,1298,1297,1296,1295,1294,1293,1292,1291,1290,1289,1288,1015,1008,1001,996,991
<991=992
<992=994,993
<994=995
<996=997
<997=999,998
<999=1000
<1001=1002
<1002=1004,1003
<1004=1005
<1005=1007,1006
<1008=1009
<1009=1011,1010
<1011=1012
<1012=1014,1013
<1015=1279,1272,1261,1249,1211,1146,1023,1016
<1016=1017
<1017=1019,1018
<1019=1020
<1020=1022,1021
<1023=1138,1129,1126,1024
<1024=1115,1025
<1025=1095,1026
<1026=1088,1081,1065,1036,1027
<1027=1028
<1028=1034,1029
<1029=1032,1030
<1030=1031
<1032=1033
<1034=1035
<1036=1037
<1037=1064,1063,1038
<1038=1062,1039
<1039=1061,1040
<1040=1060,1041
<1041=1050,1042
<1042=1048,1043
<1043=1046,1044
<1044=1045
<1046=1047
<1048=1049
<1050=1058,1051
<1051=1056,1052
<1052=1053
<1053=1055,1054
<1056=1057
<1058=1059
<1065=1066
<1066=1080,1079,1067
<1067=1078,1068
<1068=1075,1069
<1069=1074,1070
<1070=1072,1071
<1072=1073
<1075=1077,1076
<1081=1082
<1082=1087,1083
<1083=1085,1084
<1085=1086
<1088=1089
<1089=1091,1090
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1109,1097
<1097=1103,1098
<1098=1099
<1099=1100
<1100=1102,1101
<1103=1104
<1104=1106,1105
<1106=1108,1107
<1109=1111,1110
<1111=1112
<1112=1114,1113
<1115=1116
<1116=1125,1124,1117
<1117=1123,1118
<1118=1122,1119
<1119=1121,1120
<1126=1128,1127
<1129=1130
<1130=1137,1131
<1131=1133,1132
<1133=1134
<1134=1136,1135
<1138=1139
<1139=1140
<1140=1145,1144,1141
<1141=1143,1142
<1146=1203,1199,1196,1147
<1147=1148
<1148=1170,1149
<1149=1163,1150
<1150=1151
<1151=1157,1152
<1152=1153
<1153=1154
<1154=1156,1155
<1157=1158
<1158=1160,1159
<1160=1162,1161
<1163=1164
<1164=1166,1165
<1166=1167
<1167=1169,1168
<1170=1171
<1171=1186,1172
<1172=1180,1173
<1173=1174
<1174=1175
<1175=1177,1176
<1177=1179,1178
<1180=1181
<1181=1183,1182
<1183=1185,1184
<1186=1195,1187
<1187=1189,1188
<1189=1190
<1190=1192,1191
<1192=1194,1193
<1196=1198,1197
<1199=1200
<1200=1202,1201
<1203=1204
<1204=1205
<1205=1210,1209,1206
<1206=1208,1207
<1211=1243,1212
<1212=1227,1213
<1213=1221,1214
<1214=1215
<1215=1217,1216
<1217=1218
<1218=1220,1219
<1221=1222
<1222=1224,1223
<1224=1226,1225
<1227=1228
<1228=1242,1241,1229
<1229=1240,1230
<1230=1232,1231
<1232=1238,1233
<1233=1234
<1234=1235
<1235=1237,1236
<1238=1239
<1243=1244
<1244=1246,1245
<1246=1248,1247
<1249=1250
<1250=1260,1259,1251
<1251=1258,1252
<1252=1254,1253
<1254=1255
<1255=1257,1256
<1261=1263,1262
<1263=1264
<1264=1266,1265
<1266=1268,1267
<1268=1269
<1269=1271,1270
<1272=1273
<1273=1275,1274
<1275=1276
<1276=1278,1277
<1279=1280
<1280=1287,1286,1281
<1281=1285,1282
<1282=1284,1283
<1299=1321,1312,1309,1300
<1300=1301
<1301=1303,1302
<1303=1304
<1304=1306,1305
<1306=1308,1307
<1309=1311,1310
<1312=1313
<1313=1320,1314
<1314=1316,1315
<1316=1317
<1317=1319,1318
<1321=1322
<1322=1323
<1323=1328,1327,1324
<1324=1326,1325
<1329=1351,1342,1339,1330
<1330=1331
<1331=1333,1332
<1333=1334
<1334=1336,1335
<1336=1338,1337
<1339=1341,1340
<1342=1343
<1343=1350,1344
<1344=1346,1345
<1346=1347
<1347=1349,1348
<1351=1352
<1352=1353
<1353=1358,1357,1354
<1354=1356,1355
<1359=1391,1382,1379,1360
<1360=1370,1361
<1361=1362
<1362=1364,1363
<1364=1365
<1365=1367,1366
<1367=1369,1368
<1370=1371
<1371=1373,1372
<1373=1374
<1374=1376,1375
<1376=1378,1377
<1379=1381,1380
<1382=1383
<1383=1390,1384
<1384=1386,1385
<1386=1387
<1387=1389,1388
<1391=1392
<1392=1393
<1393=1398,1397,1394
<1394=1396,1395
<1399=1400
<1400=1402,1401
<1402=1403
<1447=1450,1449,1448
<1450=2651,2644,2633,2626,1451
<1451=2624,1452
<1452=2622,2615,2608,2437,2436,2434,2412,2395,2378,2377,2375,1794,1793,1791,1706,1704,1453
<1453=1695,1679,1672,1665,1658,1616,1572,1526,1517,1501,1455,1454
<1455=1456
<1456=1495,1457
<1457=1488,1475,1473,1471,1458
<1458=1459
<1459=1469,1460
<1460=1467,1465,1463,1461
<1461=1462
<1463=1464
<1465=1466
<1467=1468
<1469=1470
<1471=1472
<1473=1474
<1475=1476
<1476=1486,1477
<1477=1484,1478
<1478=1479
<1479=1483,1480
<1480=1482,1481
<1484=1485
<1486=1487
<1488=1489
<1489=1491,1490
<1491=1492
<1492=1494,1493
<1495=1496
<1496=1498,1497
<1498=1500,1499
<1501=1506,1502
<1502=1503
<1503=1505,1504
<1506=1507
<1507=1509,1508
<1509=1516,1510
<1510=1514,1511
<1511=1512
<1512=1513
<1514=1515
<1517=1518
<1518=1525,1524,1519
<1519=1523,1520
<1520=1522,1521
<1526=1527
<1527=1566,1528
<1528=1559,1546,1544,1542,1529
<1529=1530
<1530=1540,1531
<1531=1538,1536,1534,1532
<1532=1533
<1534=1535
<1536=1537
<1538=1539
<1540=1541
<1542=1543
<1544=1545
<1546=1547
<1547=1557,1548
<1548=1555,1549
<1549=1550
<1550=1554,1551
<1551=1553,1552
<1555=1556
<1557=1558
<1559=1560
<1560=1562,1561
<1562=1563
<1563=1565,1564
<1566=1567
<1567=1569,1568
<1569=1571,1570
<1572=1573
<1573=1610,1574
<1574=1603,1592,1590,1588,1575
<1575=1576
<1576=1586,1577
<1577=1584,1582,1580,1578
<1578=1579
<1580=1581
<1582=1583
<1584=1585
<1586=1587
<1588=1589
<1590=1591
<1592=1593
<1593=1601,1594
<1594=1599,1595
<1595=1596
<1596=1598,1597
<1599=1600
<1601=1602
<1603=1604
<1604=1606,1605
<1606=1607
<1607=1609,1608
<1610=1611
<1611=1613,1612
<1613=1615,1614
<1616=1617
<1617=1652,1618
<1618=1645,1636,1634,1632,1619
<1619=1620
<1620=1630,1621
<1621=1628,1626,1624,1622
<1622=1623
<1624=1625
<1626=1627
<1628=1629
<1630=1631
<1632=1633
<1634=1635
<1636=1637
<1637=1643,1638
<1638=1641,1639
<1639=1640
<1641=1642
<1643=1644
<1645=1646
<1646=1648,1647
<1648=1649
<1649=1651,1650
<1652=1653
<1653=1655,1654
<1655=1657,1656
<1658=1659
<1659=1664,1663,1660
<1660=1662,1661
<1665=1666
<1666=1671,1670,1667
<1667=1669,1668
<1672=1673
<1673=1678,1677,1674
<1674=1676,1675
<1679=1680
<1680=1694,1693,1681
<1681=1692,1682
<1682=1684,1683
<1684=1686,1685
<1686=1687
<1687=1689,1688
<1689=1691,1690
<1695=1696
<1696=1703,1702,1697
<1697=1701,1698
<1698=1700,1699
<1704=1705
<1706=1759,1752,1708,1707
<1708=1709
<1709=1746,1710
<1710=1739,1728,1726,1724,1711
<1711=1712
<1712=1722,1713
<1713=1720,1718,1716,1714
<1714=1715
<1716=1717
<1718=1719
<1720=1721
<1722=1723
<1724=1725
<1726=1727
<1728=1729
<1729=1737,1730
<1730=1735,1731
<1731=1732
<1732=1734,1733
<1735=1736
<1737=1738
<1739=1740
<1740=1742,1741
<1742=1743
<1743=1745,1744
<1746=1747
<1747=1749,1748
<1749=1751,1750
<1752=1753
<1753=1758,1757,1754
<1754=1756,1755
<1759=1780,1760
<1760=1773,1762,1761
<1762=1763
<1763=1772,1764
<1764=1766,1765
<1766=1767
<1767=1769,1768
<1769=1771,1770
<1773=1774
<1774=1778,1775
<1775=1776
<1776=1777
<1778=1779
<1780=1781
<1781=1785,1782
<1782=1783
<1783=1784
<1785=1786
<1786=1788,1787
<1788=1790,1789
<1791=1792
<1794=2366,2350,2331,2321,2309,2297,2277,2257,2237,2223,2181,2006,1818,1795
<1795=1814,1796
<1796=1808,1804,1797
<1797=1798
<1798=1802,1799
<1799=1800
<1800=1801
<1802=1803
<1804=1805
<1805=1807,1806
<1808=1809
<1809=1813,1810
<1810=1812,1811
<1814=1815
<1815=1817,1816
<1818=1996,1950,1938,1892,1887,1870,1859,1846,1833,1824,1819
<1819=1820
<1820=1822,1821
<1822=1823
<1824=1825
<1825=1827,1826
<1827=1828
<1828=1830,1829
<1830=1832,1831
<1833=1834
<1834=1844,1835
<1835=1842,1840,1838,1836
<1836=1837
<1838=1839
<1840=1841
<1842=1843
<1844=1845
<1846=1847
<1847=1857,1848
<1848=1855,1853,1851,1849
<1849=1850
<1851=1852
<1853=1854
<1855=1856
<1857=1858
<1859=1860
<1860=1868,1861
<1861=1866,1864,1862
<1862=1863
<1864=1865
<1866=1867
<1868=1869
<1870=1871
<1871=1885,1872
<1872=1883,1875,1873
<1873=1874
<1875=1876
<1876=1882,1877
<1877=1879,1878
<1879=1881,1880
<1883=1884
<1885=1886
<1887=1888
<1888=1890,1889
<1890=1891
<1892=1893
<1893=1932,1894
<1894=1925,1912,1910,1908,1895
<1895=1896
<1896=1906,1897
<1897=1904,1902,1900,1898
<1898=1899
<1900=1901
<1902=1903
<1904=1905
<1906=1907
<1908=1909
<1910=1911
<1912=1913
<1913=1923,1914
<1914=1921,1915
<1915=1916
<1916=1920,1917
<1917=1919,1918
<1921=1922
<1923=1924
<1925=1926
<1926=1928,1927
<1928=1929
<1929=1931,1930
<1932=1933
<1933=1935,1934
<1935=1937,1936
<1938=1939
<1939=1949,1940
<1940=1944,1941
<1941=1943,1942
<1944=1946,1945
<1946=1948,1947
<1950=1951
<1951=1990,1952
<1952=1983,1970,1968,1966,1953
<1953=1954
<1954=1964,1955
<1955=1962,1960,1958,1956
<1956=1957
<1958=1959
<1960=1961
<1962=1963
<1964=1965
<1966=1967
<1968=1969
<1970=1971
<1971=1981,1972
<1972=1979,1973
<1973=1974
<1974=1978,1975
<1975=1977,1976
<1979=1980
<1981=1982
<1983=1984
<1984=1986,1985
<1986=1987
<1987=1989,1988
<1990=1991
<1991=1993,1992
<1993=1995,1994
<1996=1997
<1997=2005,1998
<1998=2002,1999
<1999=2001,2000
<2002=2004,2003
<2006=2171,2125,2113,2067,2062,2045,2034,2021,2012,2007
<2007=2008
<2008=2010,2009
<2010=2011
<2012=2013
<2013=2015,2014
<2015=2016
<2016=2018,2017
<2018=2020,2019
<2021=2022
<2022=2032,2023
<2023=2030,2028,2026,2024
<2024=2025
<2026=2027
<2028=2029
<2030=2031
<2032=2033
<2034=2035
<2035=2043,2036
<2036=2041,2039,2037
<2037=2038
<2039=2040
<2041=2042
<2043=2044
<2045=2046
<2046=2060,2047
<2047=2058,2050,2048
<2048=2049
<2050=2051
<2051=2057,2052
<2052=2054,2053
<2054=2056,2055
<2058=2059
<2060=2061
<2062=2063
<2063=2065,2064
<2065=2066
<2067=2068
<2068=2107,2069
<2069=2100,2087,2085,2083,2070
<2070=2071
<2071=2081,2072
<2072=2079,2077,2075,2073
<2073=2074
<2075=2076
<2077=2078
<2079=2080
<2081=2082
<2083=2084
<2085=2086
<2087=2088
<2088=2098,2089
<2089=2096,2090
<2090=2091
<2091=2095,2092
<2092=2094,2093
<2096=2097
<2098=2099
<2100=2101
<2101=2103,2102
<2103=2104
<2104=2106,2105
<2107=2108
<2108=2110,2109
<2110=2112,2111
<2113=2114
<2114=2124,2115
<2115=2119,2116
<2116=2118,2117
<2119=2121,2120
<2121=2123,2122
<2125=2126
<2126=2165,2127
<2127=2158,2145,2143,2141,2128
<2128=2129
<2129=2139,2130
<2130=2137,2135,2133,2131
<2131=2132
<2133=2134
<2135=2136
<2137=2138
<2139=2140
<2141=2142
<2143=2144
<2145=2146
<2146=2156,2147
<2147=2154,2148
<2148=2149
<2149=2153,2150
<2150=2152,2151
<2154=2155
<2156=2157
<2158=2159
<2159=2161,2160
<2161=2162
<2162=2164,2163
<2165=2166
<2166=2168,2167
<2168=2170,2169
<2171=2172
<2172=2180,2173
<2173=2177,2174
<2174=2176,2175
<2177=2179,2178
<2181=2182
<2182=2217,2183
<2183=2210,2201,2199,2197,2184
<2184=2185
<2185=2195,2186
<2186=2193,2191,2189,2187
<2187=2188
<2189=2190
<2191=2192
<2193=2194
<2195=2196
<2197=2198
<2199=2200
<2201=2202
<2202=2208,2203
<2203=2206,2204
<2204=2205
<2206=2207
<2208=2209
<2210=2211
<2211=2213,2212
<2213=2214
<2214=2216,2215
<2217=2218
<2218=2220,2219
<2220=2222,2221
<2223=2224
<2224=2236,2225
<2225=2233,2226
<2226=2232,2227
<2227=2231,2228
<2228=2230,2229
<2233=2235,2234
<2237=2238
<2238=2256,2255,2239
<2239=2254,2240
<2240=2252,2241
<2241=2250,2248,2246,2244,2242
<2242=2243
<2244=2245
<2246=2247
<2248=2249
<2250=2251
<2252=2253
<2257=2258
<2258=2276,2275,2259
<2259=2274,2260
<2260=2272,2261
<2261=2270,2268,2266,2264,2262
<2262=2263
<2264=2265
<2266=2267
<2268=2269
<2270=2271
<2272=2273
<2277=2278
<2278=2296,2295,2279
<2279=2294,2280
<2280=2292,2281
<2281=2290,2288,2286,2284,2282
<2282=2283
<2284=2285
<2286=2287
<2288=2289
<2290=2291
<2292=2293
<2297=2298
<2298=2308,2307,2299
<2299=2306,2300
<2300=2302,2301
<2302=2304,2303
<2304=2305
<2309=2310
<2310=2320,2319,2311
<2311=2318,2312
<2312=2314,2313
<2314=2316,2315
<2316=2317
<2321=2322
<2322=2330,2329,2323
<2323=2328,2324
<2324=2326,2325
<2326=2327
<2331=2332
<2332=2349,2348,2333
<2333=2347,2334
<2334=2341,2335
<2335=2337,2336
<2337=2338
<2338=2340,2339
<2341=2343,2342
<2343=2344
<2344=2346,2345
<2350=2351
<2351=2365,2364,2352
<2352=2363,2353
<2353=2355,2354
<2355=2357,2356
<2357=2358
<2358=2360,2359
<2360=2362,2361
<2366=2367
<2367=2374,2373,2368
<2368=2372,2369
<2369=2371,2370
<2375=2376
<2378=2388,2379
<2379=2381,2380
<2381=2382
<2382=2386,2383
<2383=2384
<2384=2385
<2386=2387
<2388=2389
<2389=2391,2390
<2391=2393,2392
<2393=2394
<2395=2405,2396
<2396=2398,2397
<2398=2399
<2399=2403,2400
<2400=2401
<2401=2402
<2403=2404
<2405=2406
<2406=2408,2407
<2408=2410,2409
<2410=2411
<2412=2419,2413
<2413=2414
<2414=2415
<2415=2417,2416
<2417=2418
<2419=2420
<2420=2431,2421
<2421=2425,2422
<2422=2424,2423
<2425=2427,2426
<2427=2428
<2428=2430,2429
<2431=2433,2432
<2434=2435
<2437=2604,2452,2438
<2438=2439
<2439=2447,2440
<2440=2441
<2441=2445,2442
<2442=2443
<2443=2444
<2445=2446
<2447=2448
<2448=2450,2449
<2450=2451
<2452=2584,2572,2559,2552,2508,2453
<2453=2454
<2454=2502,2455
<2455=2495,2473,2471,2469,2456
<2456=2457
<2457=2467,2458
<2458=2465,2463,2461,2459
<2459=2460
<2461=2462
<2463=2464
<2465=2466
<2467=2468
<2469=2470
<2471=2472
<2473=2474
<2474=2493,2475
<2475=2491,2476
<2476=2477
<2477=2490,2478
<2478=2489,2479
<2479=2481,2480
<2481=2483,2482
<2483=2484
<2484=2486,2485
<2486=2488,2487
<2491=2492
<2493=2494
<2495=2496
<2496=2498,2497
<2498=2499
<2499=2501,2500
<2502=2503
<2503=2505,2504
<2505=2507,2506
<2508=2509
<2509=2546,2510
<2510=2539,2528,2526,2524,2511
<2511=2512
<2512=2522,2513
<2513=2520,2518,2516,2514
<2514=2515
<2516=2517
<2518=2519
<2520=2521
<2522=2523
<2524=2525
<2526=2527
<2528=2529
<2529=2537,2530
<2530=2535,2531
<2531=2532
<2532=2534,2533
<2535=2536
<2537=2538
<2539=2540
<2540=2542,2541
<2542=2543
<2543=2545,2544
<2546=2547
<2547=2549,2548
<2549=2551,2550
<2552=2553
<2553=2558,2557,2554
<2554=2556,2555
<2559=2560
<2560=2571,2570,2561
<2561=2569,2562
<2562=2566,2563
<2563=2565,2564
<2566=2568,2567
<2572=2573
<2573=2583,2574
<2574=2582,2575
<2575=2581,2576
<2576=2580,2577
<2577=2579,2578
<2584=2585
<2585=2603,2602,2586
<2586=2601,2587
<2587=2599,2588
<2588=2597,2595,2593,2591,2589
<2589=2590
<2591=2592
<2593=2594
<2595=2596
<2597=2598
<2599=2600
<2604=2605
<2605=2607,2606
<2608=2609
<2609=2611,2610
<2611=2612
<2612=2614,2613
<2615=2616
<2616=2618,2617
<2618=2619
<2619=2621,2620
<2622=2623
<2624=2625
<2626=2627
<2627=2632,2631,2628
<2628=2630,2629
<2633=2640,2634
<2634=2635
<2635=2639,2636
<2636=2638,2637
<2640=2641
<2641=2643,2642
<2644=2645
<2645=2650,2649,2646
<2646=2648,2647
<2651=2652
<2652=2664,2663,2653
<2653=2662,2654
<2654=2656,2655
<2656=2658,2657
<2658=2659
<2659=2661,2660
<2743=2749,2748,2744
<2744=2745
<2745=2747,2746
<2749=2752,2750
<2750=2751
<2752=2756,2753
<2753=2754
<2754=2755
<2756=2757
<2757=2763,2758
<2758=2760,2759
<2760=2762,2761
<2763=2765,2764
<2765=2767,2766
<2775=2784,2783,2776
<2776=2780,2777
<2777=2779,2778
<2780=2782,2781
<2784=2934,2898,2889,2881,2868,2785
<2785=2866,2786
<2786=2864,2862,2860,2858,2857,2855,2788,2787
<2788=2853,2789
<2789=2851,2824,2823,2821,2794,2793,2791,2790
<2791=2792
<2794=2814,2795
<2795=2796
<2796=2797
<2797=2810,2798
<2798=2799
<2799=2800
<2800=2806,2801
<2801=2804,2802
<2802=2803
<2804=2805
<2806=2807
<2807=2809,2808
<2810=2811
<2811=2813,2812
<2814=2815
<2815=2817,2816
<2817=2818
<2818=2820,2819
<2821=2822
<2824=2844,2825
<2825=2826
<2826=2827
<2827=2840,2828
<2828=2829
<2829=2830
<2830=2836,2831
<2831=2834,2832
<2832=2833
<2834=2835
<2836=2837
<2837=2839,2838
<2840=2841
<2841=2843,2842
<2844=2845
<2845=2847,2846
<2847=2848
<2848=2850,2849
<2851=2852
<2853=2854
<2855=2856
<2858=2859
<2860=2861
<2862=2863
<2864=2865
<2866=2867
<2868=2875,2869
<2869=2870
<2870=2872,2871
<2872=2874,2873
<2875=2876
<2876=2878,2877
<2878=2880,2879
<2881=2883,2882
<2883=2884
<2884=2886,2885
<2886=2888,2887
<2889=2891,2890
<2891=2892
<2892=2894,2893
<2894=2895
<2895=2897,2896
<2898=2923,2899
<2899=2919,2908,2901,2900
<2901=2902
<2902=2904,2903
<2904=2905
<2905=2907,2906
<2908=2909
<2909=2913,2910
<2910=2911
<2911=2912
<2913=2914
<2914=2916,2915
<2916=2918,2917
<2919=2920
<2920=2922,2921
<2923=2924
<2924=2928,2925
<2925=2927,2926
<2928=2932,2929
<2929=2930
<2930=2931
<2932=2933
<2934=2935
<2935=2945,2944,2936
<2936=2943,2937
<2937=2939,2938
<2939=2940
<2940=2942,2941
<2975=2981,2980,2976
<2976=2977
<2977=2979,2978
<2981=2982
<2982=3070,2983
<2983=3068,3042,3041,3039,3026,3019,3015,3011,3007,2996,2985,2984
<2985=2986
<2986=2990,2987
<2987=2988
<2988=2989
<2990=2991
<2991=2993,2992
<2993=2995,2994
<2996=2997
<2997=3001,2998
<2998=2999
<2999=3000
<3001=3002
<3002=3004,3003
<3004=3006,3005
<3007=3008
<3008=3010,3009
<3011=3012
<3012=3014,3013
<3015=3016
<3016=3018,3017
<3019=3020
<3020=3024,3021
<3021=3022
<3022=3023
<3024=3025
<3026=3027
<3027=3033,3028
<3028=3031,3029
<3029=3030
<3031=3032
<3033=3034
<3034=3036,3035
<3036=3038,3037
<3039=3040
<3042=3059,3043
<3043=3044
<3044=3055,3045
<3045=3046
<3046=3047
<3047=3049,3048
<3049=3051,3050
<3051=3052
<3052=3054,3053
<3055=3056
<3056=3058,3057
<3059=3060
<3060=3062,3061
<3062=3064,3063
<3064=3065
<3065=3067,3066
<3068=3069
<3070=3071
<3089=3095,3094,3090
<3090=3091
<3091=3093,3092
<3095=3096
<3096=3111,3097
<3097=3102,3098
<3098=3099
<3099=3101,3100
<3102=3103
<3103=3105,3104
<3105=3107,3106
<3107=3108
<3108=3110,3109
<3111=3112
<3112=3116,3113
<3113=3114
<3114=3115
<3116=3117
<3125=3134,3133,3126
<3126=3130,3127
<3127=3129,3128
<3130=3132,3131
<3134=3135
<3135=3145,3136
<3136=3138,3137
<3138=3139
<3139=3143,3140
<3140=3141
<3141=3142
<3143=3144
<3145=3146
<3146=3148,3147
<3156=3165,3164,3157
<3157=3161,3158
<3158=3160,3159
<3161=3163,3162
<3165=3184,3170,3166
<3166=3168,3167
<3168=3169
<3170=3180,3171
<3171=3173,3172
<3173=3174
<3174=3178,3175
<3175=3176
<3176=3177
<3178=3179
<3180=3181
<3181=3183,3182
<3184=3249,3185
<3185=3243,3202,3198,3187,3186
<3187=3188
<3188=3192,3189
<3189=3190
<3190=3191
<3192=3193
<3193=3195,3194
<3195=3197,3196
<3198=3199
<3199=3201,3200
<3202=3239,3212,3203
<3203=3204
<3204=3205
<3205=3206
<3206=3208,3207
<3208=3209
<3209=3211,3210
<3212=3228,3217,3213
<3213=3214
<3214=3216,3215
<3217=3218
<3218=3222,3219
<3219=3220
<3220=3221
<3222=3223
<3223=3225,3224
<3225=3227,3226
<3228=3229
<3229=3233,3230
<3230=3231
<3231=3232
<3233=3234
<3234=3236,3235
<3236=3238,3237
<3239=3240
<3240=3242,3241
<3243=3245,3244
<3245=3246
<3246=3248,3247
<3249=3250
<3250=3252,3251
<3271=3274,3273,3272
<3274=3275
<3275=3276
<3281=3284,3283,3282
<3284=3285
<3285=3286
