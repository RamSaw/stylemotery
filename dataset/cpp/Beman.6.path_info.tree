>3	FunctionDef	say_what (bool b)
>4	ParameterList	bool b
>5	Parameter	 
>6	Identifier	b
>7	ParameterType	bool
>8	ReturnType	const char *
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	ConditionalExpression	b ? \"true\" 
>12	PrimaryExpression	\"false\"
>13	PrimaryExpression	\"true\"
>14	Condition	b
>15	Identifier	b
>20	FunctionDef	main (int argc , char * argv [ ])
>21	ParameterList	int argc , char * argv [ ]
>22	Parameter	 
>23	Identifier	argv
>24	ParameterType	char * [ ]
>25	Parameter	 
>26	Identifier	argc
>27	ParameterType	int
>28	ReturnType	int
>29	CompoundStatement	 
>30	ExpressionStatement	 
>31	ShiftExpression	cout << \"  c_str()--------------
>32	ShiftExpression	\"  c_str()--------------
>33	ShiftExpression	p . c_str ( ) << endl
>34	Identifier	endl
>35	CallExpression	p . c_str ( )
>36	ArgumentList	 
>37	Callee	p . c_str
>38	MemberAccess	p . c_str
>39	Identifier	c_str
>40	Identifier	p
>41	PrimaryExpression	\"  c_str()--------------
>42	Identifier	cout
>43	ExpressionStatement	 
>44	ShiftExpression	cout << \"  native()-------------
>45	ShiftExpression	\"  native()-------------
>46	ShiftExpression	p . native ( ) << endl
>47	Identifier	endl
>48	CallExpression	p . native ( )
>49	ArgumentList	 
>50	Callee	p . native
>51	MemberAccess	p . native
>52	Identifier	native
>53	Identifier	p
>54	PrimaryExpression	\"  native()-------------
>55	Identifier	cout
>56	Statement	 
>57	Statement	 
>58	ExpressionStatement	 
>59	ShiftExpression	cout << \"\nobservers, native format
>60	ShiftExpression	\"\nobservers, native format
>61	Identifier	endl
>62	PrimaryExpression	\"\nobservers, native format
>63	Identifier	cout
>64	ForStatement	for ( path 
>65	ExpressionStatement	 
>66	ShiftExpression	cout << \"  \" << * it << '\n'
>67	ShiftExpression	\"  \" << * it << '\n'
>68	ShiftExpression	* it << '\n'
>69	PrimaryExpression	'\n'
>70	UnaryOp	* it
>71	Identifier	it
>72	UnaryOperator	*
>73	PrimaryExpression	\"  \"
>74	Identifier	cout
>75	UnaryExpression	 
>76	Identifier	it
>77	IncDec	++
>78	Condition	 
>79	EqualityExpression	it != it_end
>80	Identifier	it_end
>81	Identifier	it
>82	ForInit	 
>83	IdentifierDeclStatement	path 
>84	IdentifierDecl	it_end ( p . end ( ) )
>85	CallExpression	p . end ( )
>86	ArgumentList	 
>87	Callee	p . end
>88	MemberAccess	p . end
>89	Identifier	end
>90	Identifier	p
>91	Identifier	it_end
>92	IdentifierDeclType	path 
>93	IdentifierDecl	it ( p . begin ( ) )
>94	CallExpression	p . begin ( )
>95	ArgumentList	 
>96	Callee	p . begin
>97	MemberAccess	p . begin
>98	Identifier	begin
>99	Identifier	p
>100	Identifier	it
>101	IdentifierDeclType	path 
>102	ExpressionStatement	 
>103	ShiftExpression	cout << \"\nelements
>104	PrimaryExpression	\"\nelements
>105	Identifier	cout
>106	ExpressionStatement	 
>107	ShiftExpression	cout << \"  make_preferred()----------
>108	ShiftExpression	\"  make_preferred()----------
>109	ShiftExpression	path ( p ) . make_preferred ( ) << \"\n\"
>110	PrimaryExpression	\"\n\"
>111	CallExpression	path ( p ) . make_preferred ( )
>112	ArgumentList	 
>113	Callee	path ( p ) . make_preferred
>114	MemberAccess	path ( p ) . make_preferred
>115	Identifier	make_preferred
>116	CallExpression	path ( p )
>117	ArgumentList	p
>118	Argument	p
>119	Identifier	p
>120	Callee	path
>121	Identifier	path
>122	PrimaryExpression	\"  make_preferred()----------
>123	Identifier	cout
>124	ExpressionStatement	 
>125	ShiftExpression	cout << \"  cout << -------------
>126	ShiftExpression	\"  cout << -------------
>127	ShiftExpression	p << \"\n\"
>128	PrimaryExpression	\"\n\"
>129	Identifier	p
>130	PrimaryExpression	\"  cout << -------------
>131	Identifier	cout
>132	ExpressionStatement	 
>133	ShiftExpression	cout << \"\ncomposed path
>134	PrimaryExpression	\"\ncomposed path
>135	Identifier	cout
>136	ForStatement	for ( ; argc > 1 ; -- argc , ++ argv )
>137	ExpressionStatement	 
>138	AssignmentExpr	p /= argv [ 1 ]
>139	ArrayIndexing	argv [ 1 ]
>140	PrimaryExpression	1
>141	Identifier	argv
>142	Identifier	p
>143	Expression	 
>144	UnaryExpression	++ argv
>145	Identifier	argv
>146	IncDec	++
>147	UnaryExpression	-- argc
>148	Identifier	argc
>149	IncDec	--
>150	Condition	 
>151	RelationalExpression	argc > 1
>152	PrimaryExpression	1
>153	Identifier	argc
>154	IdentifierDeclStatement	 
>155	IdentifierDecl	p
>156	Identifier	p
>157	IdentifierDeclType	path
>158	IfStatement	if ( argc < 2 )
>159	ElseStatement	else
>160	ExpressionStatement	 
>161	PrimaryExpression	\"         would report info about the composed path foo/bar\\baz\n\"
>162	CompoundStatement	 
>163	ReturnStatement	 
>164	PrimaryExpression	1
>165	Statement	 
>166	ExpressionStatement	 
>167	PrimaryExpression	\"         would report info about the composed path foo/bar/baz\n\"
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Statement	 
>174	Condition	 
>175	RelationalExpression	argc < 2
>176	PrimaryExpression	2
>177	Identifier	argc
<3=9,8,4
<4=5
<5=7,6
<9=10
<10=11
<11=14,13,12
<14=15
<20=29,28,21
<21=25,22
<22=24,23
<25=27,26
<29=158,154,136,132,124,106,102,64,58,57,56,43,30
<30=31
<31=42,32
<32=41,33
<33=35,34
<35=37,36
<37=38
<38=40,39
<43=44
<44=55,45
<45=54,46
<46=48,47
<48=50,49
<50=51
<51=53,52
<58=59
<59=63,60
<60=62,61
<64=82,78,75,65
<65=66
<66=74,67
<67=73,68
<68=70,69
<70=72,71
<75=77,76
<78=79
<79=81,80
<82=83
<83=93,84
<84=92,91,85
<85=87,86
<87=88
<88=90,89
<93=101,100,94
<94=96,95
<96=97
<97=99,98
<102=103
<103=105,104
<106=107
<107=123,108
<108=122,109
<109=111,110
<111=113,112
<113=114
<114=116,115
<116=120,117
<117=118
<118=119
<120=121
<124=125
<125=131,126
<126=130,127
<127=129,128
<132=133
<133=135,134
<136=150,143,137
<137=138
<138=142,139
<139=141,140
<143=147,144
<144=146,145
<147=149,148
<150=151
<151=153,152
<154=155
<155=157,156
<158=174,162,159
<159=160
<160=161
<162=173,172,171,170,169,168,166,165,163
<163=164
<166=167
<174=175
<175=177,176
