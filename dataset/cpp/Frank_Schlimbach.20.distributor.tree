>7	FunctionDef	distributor 
>8	ParameterList	 
>9	CompoundStatement	 
>13	FunctionDef	distributor 
>14	ParameterList	communicator_loader_type loader , bool dist_env
>15	Parameter	 
>16	Identifier	dist_env
>17	ParameterType	bool
>18	Parameter	 
>19	Identifier	loader
>20	ParameterType	communicator_loader_type
>21	ReturnType	void
>22	CompoundStatement	 
>23	ExpressionStatement	 
>24	CallExpression	CNC_ASSERT ( theDistributor -> m_communicator )
>25	ArgumentList	theDistributor -> m_communicator
>26	Argument	theDistributor -> m_communicator
>27	PtrMemberAccess	theDistributor -> m_communicator
>28	Identifier	m_communicator
>29	Identifier	theDistributor
>30	Callee	CNC_ASSERT
>31	Identifier	CNC_ASSERT
>32	ExpressionStatement	 
>33	CallExpression	loader ( * theDistributor , dist_env )
>34	ArgumentList	* theDistributor
>35	Argument	dist_env
>36	Identifier	dist_env
>37	Argument	* theDistributor
>38	UnaryOp	* theDistributor
>39	Identifier	theDistributor
>40	UnaryOperator	*
>41	Callee	loader
>42	Identifier	loader
>43	ExpressionStatement	 
>44	AssignmentExpr	theDistributor -> m_distEnv = dist_env
>45	Identifier	dist_env
>46	PtrMemberAccess	theDistributor -> m_distEnv
>47	Identifier	m_distEnv
>48	Identifier	theDistributor
>49	ExpressionStatement	 
>50	AssignmentExpr	theDistributor -> m_state = DIST_INITING
>51	Identifier	DIST_INITING
>52	PtrMemberAccess	theDistributor -> m_state
>53	Identifier	m_state
>54	Identifier	theDistributor
>55	ExpressionStatement	 
>56	AssignmentExpr	theDistributor = new distributor ( )
>57	UnaryExpression	new distributor ( )
>58	Identifier	theDistributor
>70	FunctionDef	distributor 
>71	ParameterList	 
>72	ReturnType	void
>73	CompoundStatement	 
>74	ExpressionStatement	 
>75	AssignmentExpr	theDistributor = NULL
>76	Identifier	NULL
>77	Identifier	theDistributor
>78	ExpressionStatement	 
>79	Identifier	theDistributor
>80	Statement	 
>86	FunctionDef	distributor 
>87	ParameterList	long flag
>88	Parameter	 
>89	Identifier	flag
>90	ParameterType	long
>91	ReturnType	void
>92	CompoundStatement	 
>93	ExpressionStatement	 
>94	CallExpression	theDistributor -> m_communicator -> init ( 0 , flag )
>95	ArgumentList	0
>96	Argument	flag
>97	Identifier	flag
>98	Argument	0
>99	PrimaryExpression	0
>100	Callee	theDistributor -> m_communicator -> init
>101	PtrMemberAccess	theDistributor -> m_communicator -> init
>102	Identifier	init
>103	PtrMemberAccess	theDistributor -> m_communicator
>104	Identifier	m_communicator
>105	Identifier	theDistributor
>106	ExpressionStatement	 
>107	AssignmentExpr	theDistributor -> m_state = DIST_ON
>108	Identifier	DIST_ON
>109	PtrMemberAccess	theDistributor -> m_state
>110	Identifier	m_state
>111	Identifier	theDistributor
>112	ExpressionStatement	 
>113	AssignmentExpr	theDistributor -> m_nMsgsRecvd = 0
>114	PrimaryExpression	0
>115	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>116	Identifier	m_nMsgsRecvd
>117	Identifier	theDistributor
>118	ExpressionStatement	 
>119	AssignmentExpr	theDistributor -> m_nextGId = 0
>120	PrimaryExpression	0
>121	PtrMemberAccess	theDistributor -> m_nextGId
>122	Identifier	m_nextGId
>123	Identifier	theDistributor
>124	ExpressionStatement	 
>125	CallExpression	CNC_ASSERT ( m_communicator )
>126	ArgumentList	m_communicator
>127	Argument	m_communicator
>128	Identifier	m_communicator
>129	Callee	CNC_ASSERT
>130	Identifier	CNC_ASSERT
>143	FunctionDef	distributor 
>144	ParameterList	 
>145	ReturnType	void
>146	CompoundStatement	 
>147	ExpressionStatement	 
>148	AssignmentExpr	theDistributor -> m_state = DIST_SUSPENDED
>149	Identifier	DIST_SUSPENDED
>150	PtrMemberAccess	theDistributor -> m_state
>151	Identifier	m_state
>152	Identifier	theDistributor
>153	IfStatement	if ( active ( ) && theDistributor -> m_communicator )
>154	CompoundStatement	 
>155	ExpressionStatement	 
>156	CallExpression	theDistributor -> m_communicator -> fini ( )
>157	ArgumentList	 
>158	Callee	theDistributor -> m_communicator -> fini
>159	PtrMemberAccess	theDistributor -> m_communicator -> fini
>160	Identifier	fini
>161	PtrMemberAccess	theDistributor -> m_communicator
>162	Identifier	m_communicator
>163	Identifier	theDistributor
>164	Condition	 
>165	AndExpression	active ( ) && theDistributor -> m_communicator
>166	PtrMemberAccess	theDistributor -> m_communicator
>167	Identifier	m_communicator
>168	Identifier	theDistributor
>169	CallExpression	active ( )
>170	ArgumentList	 
>171	Callee	active
>172	Identifier	active
>190	FunctionDef	distributor 
>191	ParameterList	distributable_context * dctxt
>192	Parameter	 
>193	Identifier	dctxt
>194	ParameterType	distributable_context *
>195	ReturnType	int
>196	CompoundStatement	 
>197	ReturnStatement	 
>198	Identifier	_gid
>199	ExpressionStatement	 
>200	CallExpression	dctxt -> fini_dist_ready ( )
>201	ArgumentList	 
>202	Callee	dctxt -> fini_dist_ready
>203	PtrMemberAccess	dctxt -> fini_dist_ready
>204	Identifier	fini_dist_ready
>205	Identifier	dctxt
>206	ExpressionStatement	 
>207	CallExpression	bcast_msg ( _serlzr )
>208	ArgumentList	_serlzr
>209	Argument	_serlzr
>210	Identifier	_serlzr
>211	Callee	bcast_msg
>212	Identifier	bcast_msg
>213	ExpressionStatement	 
>214	BitAndExpression	( * _serlzr ) & DIS_CTXT & _tid & _gid & ( * dctxt )
>215	BitAndExpression	DIS_CTXT & _tid & _gid & ( * dctxt )
>216	BitAndExpression	_tid & _gid & ( * dctxt )
>217	BitAndExpression	_gid & ( * dctxt )
>218	UnaryOp	* dctxt
>219	Identifier	dctxt
>220	UnaryOperator	*
>221	Identifier	_gid
>222	Identifier	_tid
>223	Identifier	DIS_CTXT
>224	UnaryOp	* _serlzr
>225	Identifier	_serlzr
>226	UnaryOperator	*
>227	IdentifierDeclStatement	 
>228	IdentifierDecl	_tid = dctxt -> factory_id ( )
>229	AssignmentExpr	_tid = dctxt -> factory_id ( )
>230	CallExpression	dctxt -> factory_id ( )
>231	ArgumentList	 
>232	Callee	dctxt -> factory_id
>233	PtrMemberAccess	dctxt -> factory_id
>234	Identifier	factory_id
>235	Identifier	dctxt
>236	Identifier	_tid
>237	Identifier	_tid
>238	IdentifierDeclType	int
>239	IdentifierDeclStatement	 
>240	IdentifierDecl	* _serlzr = new_serializer ( NULL )
>241	AssignmentExpr	* _serlzr = new_serializer ( NULL )
>242	CallExpression	new_serializer ( NULL )
>243	ArgumentList	NULL
>244	Argument	NULL
>245	Identifier	NULL
>246	Callee	new_serializer
>247	Identifier	new_serializer
>248	Identifier	_serlzr
>249	Identifier	_serlzr
>250	IdentifierDeclType	serializer *
>251	IfStatement	if ( theDistributor -> distributed_env ( ) )
>252	CompoundStatement	 
>253	ReturnStatement	 
>254	Identifier	_gid
>255	ExpressionStatement	 
>256	CallExpression	dctxt -> fini_dist_ready ( )
>257	ArgumentList	 
>258	Callee	dctxt -> fini_dist_ready
>259	PtrMemberAccess	dctxt -> fini_dist_ready
>260	Identifier	fini_dist_ready
>261	Identifier	dctxt
>262	Condition	 
>263	CallExpression	theDistributor -> distributed_env ( )
>264	ArgumentList	 
>265	Callee	theDistributor -> distributed_env
>266	PtrMemberAccess	theDistributor -> distributed_env
>267	Identifier	distributed_env
>268	Identifier	theDistributor
>269	ExpressionStatement	 
>270	CallExpression	_accr . release ( )
>271	ArgumentList	 
>272	Callee	_accr . release
>273	MemberAccess	_accr . release
>274	Identifier	release
>275	Identifier	_accr
>276	ExpressionStatement	 
>277	CallExpression	dctxt -> set_gid ( _gid )
>278	ArgumentList	_gid
>279	Argument	_gid
>280	Identifier	_gid
>281	Callee	dctxt -> set_gid
>282	PtrMemberAccess	dctxt -> set_gid
>283	Identifier	set_gid
>284	Identifier	dctxt
>285	ExpressionStatement	 
>286	AssignmentExpr	_accr -> second = dctxt
>287	Identifier	dctxt
>288	PtrMemberAccess	_accr -> second
>289	Identifier	second
>290	Identifier	_accr
>291	ExpressionStatement	 
>292	CallExpression	theDistributor -> m_distContexts [ 0 ] . insert ( _accr , _gid )
>293	ArgumentList	_accr
>294	Argument	_gid
>295	Identifier	_gid
>296	Argument	_accr
>297	Identifier	_accr
>298	Callee	theDistributor -> m_distContexts [ 0 ] . insert
>299	MemberAccess	theDistributor -> m_distContexts [ 0 ] . insert
>300	Identifier	insert
>301	ArrayIndexing	theDistributor -> m_distContexts [ 0 ]
>302	PrimaryExpression	0
>303	PtrMemberAccess	theDistributor -> m_distContexts
>304	Identifier	m_distContexts
>305	Identifier	theDistributor
>306	IdentifierDeclStatement	 
>307	IdentifierDecl	_accr
>308	Identifier	_accr
>309	IdentifierDeclType	my_map 
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	_gid = theDistributor -> m_nextGId ++
>312	AssignmentExpr	_gid = theDistributor -> m_nextGId ++
>313	IncDecOp	theDistributor -> m_nextGId ++
>314	IncDec	++
>315	PtrMemberAccess	theDistributor -> m_nextGId
>316	Identifier	m_nextGId
>317	Identifier	theDistributor
>318	Identifier	_gid
>319	Identifier	_gid
>320	IdentifierDeclType	int
>321	IfStatement	if ( ! active ( ) || theDistributor -> m_communicator == NULL || ! dctxt -> distributed ( ) || ( remote ( ) && ! \
>322	CompoundStatement	 
>323	ReturnStatement	 
>324	CallExpression	dctxt -> gid ( )
>325	ArgumentList	 
>326	Callee	dctxt -> gid
>327	PtrMemberAccess	dctxt -> gid
>328	Identifier	gid
>329	Identifier	dctxt
>330	Condition	 
>331	OrExpression	! active ( ) || theDistributor -> m_communicator == NULL || ! dctxt -> distributed ( ) || ( remote ( ) && ! \
>332	OrExpression	theDistributor -> m_communicator == NULL || ! dctxt -> distributed ( ) || ( remote ( ) && ! theDistributor \
>333	OrExpression	! dctxt -> distributed ( ) || ( remote ( ) && ! theDistributor -> distributed_env ( ) )
>334	AndExpression	remote ( ) && ! theDistributor -> distributed_env ( )
>335	UnaryOp	! theDistributor -> distributed_env ( )
>336	CallExpression	theDistributor -> distributed_env ( )
>337	ArgumentList	 
>338	Callee	theDistributor -> distributed_env
>339	PtrMemberAccess	theDistributor -> distributed_env
>340	Identifier	distributed_env
>341	Identifier	theDistributor
>342	UnaryOperator	!
>343	CallExpression	remote ( )
>344	ArgumentList	 
>345	Callee	remote
>346	Identifier	remote
>347	UnaryOp	! dctxt -> distributed ( )
>348	CallExpression	dctxt -> distributed ( )
>349	ArgumentList	 
>350	Callee	dctxt -> distributed
>351	PtrMemberAccess	dctxt -> distributed
>352	Identifier	distributed
>353	Identifier	dctxt
>354	UnaryOperator	!
>355	EqualityExpression	theDistributor -> m_communicator == NULL
>356	Identifier	NULL
>357	PtrMemberAccess	theDistributor -> m_communicator
>358	Identifier	m_communicator
>359	Identifier	theDistributor
>360	UnaryOp	! active ( )
>361	CallExpression	active ( )
>362	ArgumentList	 
>363	Callee	active
>364	Identifier	active
>365	UnaryOperator	!
>392	FunctionDef	distributor 
>393	ParameterList	distributable_context * dctxt
>394	Parameter	 
>395	Identifier	dctxt
>396	ParameterType	distributable_context *
>397	ReturnType	void
>398	CompoundStatement	 
>399	ExpressionStatement	 
>400	CallExpression	theDistributor -> m_distContexts [ 0 ] . erase ( dctxt -> gid ( ) )
>401	ArgumentList	dctxt -> gid ( )
>402	Argument	dctxt -> gid ( )
>403	CallExpression	dctxt -> gid ( )
>404	ArgumentList	 
>405	Callee	dctxt -> gid
>406	PtrMemberAccess	dctxt -> gid
>407	Identifier	gid
>408	Identifier	dctxt
>409	Callee	theDistributor -> m_distContexts [ 0 ] . erase
>410	MemberAccess	theDistributor -> m_distContexts [ 0 ] . erase
>411	Identifier	erase
>412	ArrayIndexing	theDistributor -> m_distContexts [ 0 ]
>413	PrimaryExpression	0
>414	PtrMemberAccess	theDistributor -> m_distContexts
>415	Identifier	m_distContexts
>416	Identifier	theDistributor
>417	ExpressionStatement	 
>418	CallExpression	bcast_msg ( _serlzr )
>419	ArgumentList	_serlzr
>420	Argument	_serlzr
>421	Identifier	_serlzr
>422	Callee	bcast_msg
>423	Identifier	bcast_msg
>424	ExpressionStatement	 
>425	BitAndExpression	( * _serlzr ) & UN_CTXT & _tid & _gid
>426	BitAndExpression	UN_CTXT & _tid & _gid
>427	BitAndExpression	_tid & _gid
>428	Identifier	_gid
>429	Identifier	_tid
>430	Identifier	UN_CTXT
>431	UnaryOp	* _serlzr
>432	Identifier	_serlzr
>433	UnaryOperator	*
>434	IdentifierDeclStatement	 
>435	IdentifierDecl	_gid = dctxt -> gid ( )
>436	AssignmentExpr	_gid = dctxt -> gid ( )
>437	CallExpression	dctxt -> gid ( )
>438	ArgumentList	 
>439	Callee	dctxt -> gid
>440	PtrMemberAccess	dctxt -> gid
>441	Identifier	gid
>442	Identifier	dctxt
>443	Identifier	_gid
>444	Identifier	_gid
>445	IdentifierDeclType	int
>446	IdentifierDeclStatement	 
>447	IdentifierDecl	_tid = dctxt -> factory_id ( )
>448	AssignmentExpr	_tid = dctxt -> factory_id ( )
>449	CallExpression	dctxt -> factory_id ( )
>450	ArgumentList	 
>451	Callee	dctxt -> factory_id
>452	PtrMemberAccess	dctxt -> factory_id
>453	Identifier	factory_id
>454	Identifier	dctxt
>455	Identifier	_tid
>456	Identifier	_tid
>457	IdentifierDeclType	int
>458	IdentifierDeclStatement	 
>459	IdentifierDecl	* _serlzr = new_serializer ( NULL )
>460	AssignmentExpr	* _serlzr = new_serializer ( NULL )
>461	CallExpression	new_serializer ( NULL )
>462	ArgumentList	NULL
>463	Argument	NULL
>464	Identifier	NULL
>465	Callee	new_serializer
>466	Identifier	new_serializer
>467	Identifier	_serlzr
>468	Identifier	_serlzr
>469	IdentifierDeclType	serializer *
>470	IfStatement	if ( ! active ( ) || theDistributor -> m_communicator == NULL || ! dctxt -> distributed ( ) || remote ( ) || theDistributor \
>471	CompoundStatement	 
>472	ReturnStatement	 
>473	Condition	 
>474	OrExpression	! active ( ) || theDistributor -> m_communicator == NULL || ! dctxt -> distributed ( ) || remote ( ) || \
>475	OrExpression	theDistributor -> m_communicator == NULL || ! dctxt -> distributed ( ) || remote ( ) || theDistributor \
>476	OrExpression	! dctxt -> distributed ( ) || remote ( ) || theDistributor -> distributed_env ( )
>477	OrExpression	remote ( ) || theDistributor -> distributed_env ( )
>478	CallExpression	theDistributor -> distributed_env ( )
>479	ArgumentList	 
>480	Callee	theDistributor -> distributed_env
>481	PtrMemberAccess	theDistributor -> distributed_env
>482	Identifier	distributed_env
>483	Identifier	theDistributor
>484	CallExpression	remote ( )
>485	ArgumentList	 
>486	Callee	remote
>487	Identifier	remote
>488	UnaryOp	! dctxt -> distributed ( )
>489	CallExpression	dctxt -> distributed ( )
>490	ArgumentList	 
>491	Callee	dctxt -> distributed
>492	PtrMemberAccess	dctxt -> distributed
>493	Identifier	distributed
>494	Identifier	dctxt
>495	UnaryOperator	!
>496	EqualityExpression	theDistributor -> m_communicator == NULL
>497	Identifier	NULL
>498	PtrMemberAccess	theDistributor -> m_communicator
>499	Identifier	m_communicator
>500	Identifier	theDistributor
>501	UnaryOp	! active ( )
>502	CallExpression	active ( )
>503	ArgumentList	 
>504	Callee	active
>505	Identifier	active
>506	UnaryOperator	!
>529	FunctionDef	distributor 
>530	ParameterList	serializer * serlzr , int rcver
>531	Parameter	 
>532	Identifier	rcver
>533	ParameterType	int
>534	Parameter	 
>535	Identifier	serlzr
>536	ParameterType	serializer *
>537	ReturnType	void
>538	CompoundStatement	 
>539	ExpressionStatement	 
>540	CallExpression	theDistributor -> m_communicator -> send_msg ( serlzr , rcver )
>541	ArgumentList	serlzr
>542	Argument	rcver
>543	Identifier	rcver
>544	Argument	serlzr
>545	Identifier	serlzr
>546	Callee	theDistributor -> m_communicator -> send_msg
>547	PtrMemberAccess	theDistributor -> m_communicator -> send_msg
>548	Identifier	send_msg
>549	PtrMemberAccess	theDistributor -> m_communicator
>550	Identifier	m_communicator
>551	Identifier	theDistributor
>552	ExpressionStatement	 
>553	CallExpression	BufferAccess 
>554	ArgumentList	* serlzr
>555	Argument	* serlzr
>556	UnaryOp	* serlzr
>557	Identifier	serlzr
>558	UnaryOperator	*
>559	Callee	BufferAccess 
>560	Identifier	BufferAccess 
>570	FunctionDef	distributor 
>571	ParameterList	serializer * serlzr
>572	Parameter	 
>573	Identifier	serlzr
>574	ParameterType	serializer *
>575	ReturnType	void
>576	CompoundStatement	 
>577	ExpressionStatement	 
>578	CallExpression	theDistributor -> m_communicator -> bcast_msg ( serlzr )
>579	ArgumentList	serlzr
>580	Argument	serlzr
>581	Identifier	serlzr
>582	Callee	theDistributor -> m_communicator -> bcast_msg
>583	PtrMemberAccess	theDistributor -> m_communicator -> bcast_msg
>584	Identifier	bcast_msg
>585	PtrMemberAccess	theDistributor -> m_communicator
>586	Identifier	m_communicator
>587	Identifier	theDistributor
>588	ExpressionStatement	 
>589	CallExpression	BufferAccess 
>590	ArgumentList	* serlzr
>591	Argument	* serlzr
>592	UnaryOp	* serlzr
>593	Identifier	serlzr
>594	UnaryOperator	*
>595	Callee	BufferAccess 
>596	Identifier	BufferAccess 
>605	FunctionDef	distributor 
>606	ParameterList	serializer * serlzr , const int * rcvers , int nrecvrs
>607	Parameter	 
>608	Identifier	nrecvrs
>609	ParameterType	int
>610	Parameter	 
>611	Identifier	rcvers
>612	ParameterType	const int *
>613	Parameter	 
>614	Identifier	serlzr
>615	ParameterType	serializer *
>616	ReturnType	bool
>617	CompoundStatement	 
>618	ReturnStatement	 
>619	Identifier	_res
>620	IdentifierDeclStatement	 
>621	IdentifierDecl	_res = theDistributor -> m_communicator -> bcast_msg ( serlzr , rcvers , nrecvrs )
>622	AssignmentExpr	_res = theDistributor -> m_communicator -> bcast_msg ( serlzr , rcvers , nrecvrs )
>623	CallExpression	theDistributor -> m_communicator -> bcast_msg ( serlzr , rcvers , nrecvrs )
>624	ArgumentList	serlzr
>625	Argument	nrecvrs
>626	Identifier	nrecvrs
>627	Argument	rcvers
>628	Identifier	rcvers
>629	Argument	serlzr
>630	Identifier	serlzr
>631	Callee	theDistributor -> m_communicator -> bcast_msg
>632	PtrMemberAccess	theDistributor -> m_communicator -> bcast_msg
>633	Identifier	bcast_msg
>634	PtrMemberAccess	theDistributor -> m_communicator
>635	Identifier	m_communicator
>636	Identifier	theDistributor
>637	Identifier	_res
>638	Identifier	_res
>639	IdentifierDeclType	bool
>640	ExpressionStatement	 
>641	CallExpression	BufferAccess 
>642	ArgumentList	* serlzr
>643	Argument	* serlzr
>644	UnaryOp	* serlzr
>645	Identifier	serlzr
>646	UnaryOperator	*
>647	Callee	BufferAccess 
>648	Identifier	BufferAccess 
>663	FunctionDef	distributor 
>664	ParameterList	serializer * serlzr , int pid
>665	Parameter	 
>666	Identifier	pid
>667	ParameterType	int
>668	Parameter	 
>669	Identifier	serlzr
>670	ParameterType	serializer *
>671	ReturnType	void
>672	CompoundStatement	 
>673	IfStatement	if ( _dctxtId == SELF )
>674	ElseStatement	else
>675	CompoundStatement	 
>676	ExpressionStatement	 
>677	CallExpression	_dctxt -> recv_msg ( serlzr )
>678	ArgumentList	serlzr
>679	Argument	serlzr
>680	Identifier	serlzr
>681	Callee	_dctxt -> recv_msg
>682	PtrMemberAccess	_dctxt -> recv_msg
>683	Identifier	recv_msg
>684	Identifier	_dctxt
>685	ExpressionStatement	 
>686	CallExpression	_accr . release ( )
>687	ArgumentList	 
>688	Callee	_accr . release
>689	MemberAccess	_accr . release
>690	Identifier	release
>691	Identifier	_accr
>692	IdentifierDeclStatement	 
>693	IdentifierDecl	* _dctxt = _accr -> second
>694	AssignmentExpr	* _dctxt = _accr -> second
>695	PtrMemberAccess	_accr -> second
>696	Identifier	second
>697	Identifier	_accr
>698	Identifier	_dctxt
>699	Identifier	_dctxt
>700	IdentifierDeclType	distributable_context *
>701	ExpressionStatement	 
>702	CallExpression	CNC_ASSERT_MSG ( _inTable , \"Received message for not (yet) existing context\n\" )
>703	ArgumentList	_inTable
>704	Argument	\"Received message for not (yet) existing context\n\"
>705	PrimaryExpression	\"Received message for not (yet) existing context\n\"
>706	Argument	_inTable
>707	Identifier	_inTable
>708	Callee	CNC_ASSERT_MSG
>709	Identifier	CNC_ASSERT_MSG
>710	IdentifierDeclStatement	 
>711	IdentifierDecl	_inTable = theDistributor -> m_distContexts [ pid ] . find ( _accr , _dctxtId )
>712	AssignmentExpr	_inTable = theDistributor -> m_distContexts [ pid ] . find ( _accr , _dctxtId )
>713	CallExpression	theDistributor -> m_distContexts [ pid ] . find ( _accr , _dctxtId )
>714	ArgumentList	_accr
>715	Argument	_dctxtId
>716	Identifier	_dctxtId
>717	Argument	_accr
>718	Identifier	_accr
>719	Callee	theDistributor -> m_distContexts [ pid ] . find
>720	MemberAccess	theDistributor -> m_distContexts [ pid ] . find
>721	Identifier	find
>722	ArrayIndexing	theDistributor -> m_distContexts [ pid ]
>723	Identifier	pid
>724	PtrMemberAccess	theDistributor -> m_distContexts
>725	Identifier	m_distContexts
>726	Identifier	theDistributor
>727	Identifier	_inTable
>728	Identifier	_inTable
>729	IdentifierDeclType	bool
>730	IdentifierDeclStatement	 
>731	IdentifierDecl	_accr
>732	Identifier	_accr
>733	IdentifierDeclType	my_map 
>734	ExpressionStatement	 
>735	UnaryExpression	++ theDistributor -> m_nMsgsRecvd
>736	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>737	Identifier	m_nMsgsRecvd
>738	Identifier	theDistributor
>739	IncDec	++
>740	CompoundStatement	 
>741	SwitchStatement	switch ( _action )
>742	CompoundStatement	 
>743	CompoundStatement	 
>744	ExpressionStatement	 
>745	CallExpression	_dctxt -> fini_dist_ready ( )
>746	ArgumentList	 
>747	Callee	_dctxt -> fini_dist_ready
>748	PtrMemberAccess	_dctxt -> fini_dist_ready
>749	Identifier	fini_dist_ready
>750	Identifier	_dctxt
>751	ExpressionStatement	 
>752	BitAndExpression	( * serlzr ) & ( * _dctxt )
>753	UnaryOp	* _dctxt
>754	Identifier	_dctxt
>755	UnaryOperator	*
>756	UnaryOp	* serlzr
>757	Identifier	serlzr
>758	UnaryOperator	*
>759	ExpressionStatement	 
>760	AssignmentExpr	_accr -> second = _dctxt
>761	Identifier	_dctxt
>762	PtrMemberAccess	_accr -> second
>763	Identifier	second
>764	Identifier	_accr
>765	ExpressionStatement	 
>766	CallExpression	_dctxt -> set_gid ( _dctxtId )
>767	ArgumentList	_dctxtId
>768	Argument	_dctxtId
>769	Identifier	_dctxtId
>770	Callee	_dctxt -> set_gid
>771	PtrMemberAccess	_dctxt -> set_gid
>772	Identifier	set_gid
>773	Identifier	_dctxt
>774	ExpressionStatement	 
>775	Identifier	_crtbl
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	ExpressionStatement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	IdentifierDeclStatement	 
>798	IdentifierDecl	* _crtbl = factory 
>799	AssignmentExpr	* _crtbl = factory 
>800	CallExpression	factory 
>801	ArgumentList	_typeId
>802	Argument	_typeId
>803	Identifier	_typeId
>804	Callee	factory 
>805	Identifier	factory 
>806	Identifier	_crtbl
>807	Identifier	_crtbl
>808	IdentifierDeclType	creatable *
>809	ExpressionStatement	 
>810	CallExpression	CNC_ASSERT ( _action == DIS_CTXT )
>811	ArgumentList	_action == DIS_CTXT
>812	Argument	_action == DIS_CTXT
>813	EqualityExpression	_action == DIS_CTXT
>814	Identifier	DIS_CTXT
>815	Identifier	_action
>816	Callee	CNC_ASSERT
>817	Identifier	CNC_ASSERT
>818	IfStatement	if ( ! _inserted )
>819	CompoundStatement	 
>820	ReturnStatement	 
>821	ExpressionStatement	 
>822	CallExpression	theDistributor -> m_distContexts [ pid ] . erase ( _accr )
>823	ArgumentList	_accr
>824	Argument	_accr
>825	Identifier	_accr
>826	Callee	theDistributor -> m_distContexts [ pid ] . erase
>827	MemberAccess	theDistributor -> m_distContexts [ pid ] . erase
>828	Identifier	erase
>829	ArrayIndexing	theDistributor -> m_distContexts [ pid ]
>830	Identifier	pid
>831	PtrMemberAccess	theDistributor -> m_distContexts
>832	Identifier	m_distContexts
>833	Identifier	theDistributor
>834	ExpressionStatement	 
>835	Identifier	_dctxt
>836	Statement	 
>837	ExpressionStatement	 
>838	CallExpression	CNC_ASSERT ( _accr -> second != NULL )
>839	ArgumentList	_accr -> second != NULL
>840	Argument	_accr -> second != NULL
>841	EqualityExpression	_accr -> second != NULL
>842	Identifier	NULL
>843	PtrMemberAccess	_accr -> second
>844	Identifier	second
>845	Identifier	_accr
>846	Callee	CNC_ASSERT
>847	Identifier	CNC_ASSERT
>848	IdentifierDeclStatement	 
>849	IdentifierDecl	* _dctxt = _accr -> second
>850	AssignmentExpr	* _dctxt = _accr -> second
>851	PtrMemberAccess	_accr -> second
>852	Identifier	second
>853	Identifier	_accr
>854	Identifier	_dctxt
>855	Identifier	_dctxt
>856	IdentifierDeclType	distributable_context *
>857	ExpressionStatement	 
>858	CallExpression	CNC_ASSERT ( _action == UN_CTXT )
>859	ArgumentList	_action == UN_CTXT
>860	Argument	_action == UN_CTXT
>861	EqualityExpression	_action == UN_CTXT
>862	Identifier	UN_CTXT
>863	Identifier	_action
>864	Callee	CNC_ASSERT
>865	Identifier	CNC_ASSERT
>866	Condition	 
>867	UnaryOp	! _inserted
>868	Identifier	_inserted
>869	UnaryOperator	!
>870	IdentifierDeclStatement	 
>871	IdentifierDecl	_inserted = theDistributor -> m_distContexts [ pid ] . insert ( _accr , _dctxtId )
>872	AssignmentExpr	_inserted = theDistributor -> m_distContexts [ pid ] . insert ( _accr , _dctxtId )
>873	CallExpression	theDistributor -> m_distContexts [ pid ] . insert ( _accr , _dctxtId )
>874	ArgumentList	_accr
>875	Argument	_dctxtId
>876	Identifier	_dctxtId
>877	Argument	_accr
>878	Identifier	_accr
>879	Callee	theDistributor -> m_distContexts [ pid ] . insert
>880	MemberAccess	theDistributor -> m_distContexts [ pid ] . insert
>881	Identifier	insert
>882	ArrayIndexing	theDistributor -> m_distContexts [ pid ]
>883	Identifier	pid
>884	PtrMemberAccess	theDistributor -> m_distContexts
>885	Identifier	m_distContexts
>886	Identifier	theDistributor
>887	Identifier	_inserted
>888	Identifier	_inserted
>889	IdentifierDeclType	bool
>890	IdentifierDeclStatement	 
>891	IdentifierDecl	_accr
>892	Identifier	_accr
>893	IdentifierDeclType	my_map 
>894	ExpressionStatement	 
>895	BitAndExpression	( * serlzr ) & _typeId & _dctxtId
>896	BitAndExpression	_typeId & _dctxtId
>897	Identifier	_dctxtId
>898	Identifier	_typeId
>899	UnaryOp	* serlzr
>900	Identifier	serlzr
>901	UnaryOperator	*
>902	IdentifierDeclStatement	 
>903	IdentifierDecl	_typeId
>904	Identifier	_typeId
>905	IdentifierDeclType	int
>906	ExpressionStatement	 
>907	UnaryExpression	++ theDistributor -> m_nMsgsRecvd
>908	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>909	Identifier	m_nMsgsRecvd
>910	Identifier	theDistributor
>911	IncDec	++
>912	Label	 
>913	Identifier	default
>914	CompoundStatement	 
>915	BreakStatement	 
>916	IfStatement	if ( myPid ( ) )
>917	ElseStatement	else
>918	CompoundStatement	 
>919	ExpressionStatement	 
>920	CallExpression	theDistributor -> m_sync . push ( 0 )
>921	ArgumentList	0
>922	Argument	0
>923	PrimaryExpression	0
>924	Callee	theDistributor -> m_sync . push
>925	MemberAccess	theDistributor -> m_sync . push
>926	Identifier	push
>927	PtrMemberAccess	theDistributor -> m_sync
>928	Identifier	m_sync
>929	Identifier	theDistributor
>930	ExpressionStatement	 
>931	AssignmentExpr	theDistributor -> m_nMsgsRecvd += _nMsgs
>932	Identifier	_nMsgs
>933	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>934	Identifier	m_nMsgsRecvd
>935	Identifier	theDistributor
>936	ExpressionStatement	 
>937	BitAndExpression	( * serlzr ) & _nMsgs
>938	Identifier	_nMsgs
>939	UnaryOp	* serlzr
>940	Identifier	serlzr
>941	UnaryOperator	*
>942	IdentifierDeclStatement	 
>943	IdentifierDecl	_nMsgs
>944	Identifier	_nMsgs
>945	IdentifierDeclType	int
>946	CompoundStatement	 
>947	IfStatement	if ( -- theDistributor -> m_flushCount == 0 )
>948	CompoundStatement	 
>949	ExpressionStatement	 
>950	CallExpression	send_msg ( _serlzr , 0 )
>951	ArgumentList	_serlzr
>952	Argument	0
>953	PrimaryExpression	0
>954	Argument	_serlzr
>955	Identifier	_serlzr
>956	Callee	send_msg
>957	Identifier	send_msg
>958	ExpressionStatement	 
>959	BitAndExpression	( * _serlzr ) & PONG & _nMsgs
>960	BitAndExpression	PONG & _nMsgs
>961	Identifier	_nMsgs
>962	Identifier	PONG
>963	UnaryOp	* _serlzr
>964	Identifier	_serlzr
>965	UnaryOperator	*
>966	IdentifierDeclStatement	 
>967	IdentifierDecl	_nMsgs = theDistributor -> m_nMsgsRecvd . fetch_and_store ( 0 )
>968	AssignmentExpr	_nMsgs = theDistributor -> m_nMsgsRecvd . fetch_and_store ( 0 )
>969	CallExpression	theDistributor -> m_nMsgsRecvd . fetch_and_store ( 0 )
>970	ArgumentList	0
>971	Argument	0
>972	PrimaryExpression	0
>973	Callee	theDistributor -> m_nMsgsRecvd . fetch_and_store
>974	MemberAccess	theDistributor -> m_nMsgsRecvd . fetch_and_store
>975	Identifier	fetch_and_store
>976	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>977	Identifier	m_nMsgsRecvd
>978	Identifier	theDistributor
>979	Identifier	_nMsgs
>980	Identifier	_nMsgs
>981	IdentifierDeclType	int
>982	IfStatement	if ( has_pending_messages ( ) )
>983	CompoundStatement	 
>984	ExpressionStatement	 
>985	UnaryExpression	++ theDistributor -> m_nMsgsRecvd
>986	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>987	Identifier	m_nMsgsRecvd
>988	Identifier	theDistributor
>989	IncDec	++
>990	Condition	 
>991	CallExpression	has_pending_messages ( )
>992	ArgumentList	 
>993	Callee	has_pending_messages
>994	Identifier	has_pending_messages
>995	IdentifierDeclStatement	 
>996	IdentifierDecl	* _serlzr = new_serializer ( NULL )
>997	AssignmentExpr	* _serlzr = new_serializer ( NULL )
>998	CallExpression	new_serializer ( NULL )
>999	ArgumentList	NULL
>1000	Argument	NULL
>1001	Identifier	NULL
>1002	Callee	new_serializer
>1003	Identifier	new_serializer
>1004	Identifier	_serlzr
>1005	Identifier	_serlzr
>1006	IdentifierDeclType	serializer *
>1007	Condition	 
>1008	EqualityExpression	-- theDistributor -> m_flushCount == 0
>1009	PrimaryExpression	0
>1010	UnaryExpression	-- theDistributor -> m_flushCount
>1011	PtrMemberAccess	theDistributor -> m_flushCount
>1012	Identifier	m_flushCount
>1013	Identifier	theDistributor
>1014	IncDec	--
>1015	Condition	 
>1016	CallExpression	myPid ( )
>1017	ArgumentList	 
>1018	Callee	myPid
>1019	Identifier	myPid
>1020	Label	 
>1021	Identifier	PONG
>1022	CompoundStatement	 
>1023	IfStatement	if ( _n == 2 )
>1024	ElseStatement	else
>1025	CompoundStatement	 
>1026	IfStatement	if ( theDistributor -> m_flushCount == 2 - _n )
>1027	ElseStatement	else
>1028	CompoundStatement	 
>1029	BreakStatement	 
>1030	ExpressionStatement	 
>1031	AssignmentExpr	theDistributor -> m_flushCount += _n - 2
>1032	AdditiveExpression	_n - 2
>1033	PrimaryExpression	2
>1034	Identifier	_n
>1035	PtrMemberAccess	theDistributor -> m_flushCount
>1036	Identifier	m_flushCount
>1037	Identifier	theDistributor
>1038	CompoundStatement	 
>1039	ExpressionStatement	 
>1040	AssignmentExpr	theDistributor -> m_flushCount = 1
>1041	PrimaryExpression	1
>1042	PtrMemberAccess	theDistributor -> m_flushCount
>1043	Identifier	m_flushCount
>1044	Identifier	theDistributor
>1045	Condition	 
>1046	EqualityExpression	theDistributor -> m_flushCount == 2 - _n
>1047	AdditiveExpression	2 - _n
>1048	Identifier	_n
>1049	PrimaryExpression	2
>1050	PtrMemberAccess	theDistributor -> m_flushCount
>1051	Identifier	m_flushCount
>1052	Identifier	theDistributor
>1053	ExpressionStatement	 
>1054	CallExpression	bcast_msg ( _serlzr , & _rcvers . front ( ) , _rcvers . size ( ) )
>1055	ArgumentList	_serlzr
>1056	Argument	_rcvers . size ( )
>1057	CallExpression	_rcvers . size ( )
>1058	ArgumentList	 
>1059	Callee	_rcvers . size
>1060	MemberAccess	_rcvers . size
>1061	Identifier	size
>1062	Identifier	_rcvers
>1063	Argument	& _rcvers . front ( )
>1064	UnaryOp	& _rcvers . front ( )
>1065	CallExpression	_rcvers . front ( )
>1066	ArgumentList	 
>1067	Callee	_rcvers . front
>1068	MemberAccess	_rcvers . front
>1069	Identifier	front
>1070	Identifier	_rcvers
>1071	UnaryOperator	&
>1072	Argument	_serlzr
>1073	Identifier	_serlzr
>1074	Callee	bcast_msg
>1075	Identifier	bcast_msg
>1076	IfStatement	if ( has_pending_messages ( ) )
>1077	CompoundStatement	 
>1078	ExpressionStatement	 
>1079	UnaryExpression	++ theDistributor -> m_nMsgsRecvd
>1080	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>1081	Identifier	m_nMsgsRecvd
>1082	Identifier	theDistributor
>1083	IncDec	++
>1084	Condition	 
>1085	CallExpression	has_pending_messages ( )
>1086	ArgumentList	 
>1087	Callee	has_pending_messages
>1088	Identifier	has_pending_messages
>1089	ForStatement	for ( int i = 1 ; i < _n ; ++ i )
>1090	CompoundStatement	 
>1091	IfStatement	if ( i != myPid ( ) )
>1092	CompoundStatement	 
>1093	ExpressionStatement	 
>1094	CallExpression	_rcvers . push_back ( i )
>1095	ArgumentList	i
>1096	Argument	i
>1097	Identifier	i
>1098	Callee	_rcvers . push_back
>1099	MemberAccess	_rcvers . push_back
>1100	Identifier	push_back
>1101	Identifier	_rcvers
>1102	Condition	 
>1103	EqualityExpression	i != myPid ( )
>1104	CallExpression	myPid ( )
>1105	ArgumentList	 
>1106	Callee	myPid
>1107	Identifier	myPid
>1108	Identifier	i
>1109	UnaryExpression	 
>1110	Identifier	i
>1111	IncDec	++
>1112	Condition	 
>1113	RelationalExpression	i < _n
>1114	Identifier	_n
>1115	Identifier	i
>1116	ForInit	 
>1117	IdentifierDeclStatement	int i = 1 ;
>1118	IdentifierDecl	i = 1
>1119	AssignmentExpr	i = 1
>1120	PrimaryExpression	1
>1121	Identifier	i
>1122	Identifier	i
>1123	IdentifierDeclType	int
>1124	ExpressionStatement	 
>1125	CallExpression	_rcvers . reserve ( _n - 2 )
>1126	ArgumentList	_n - 2
>1127	Argument	_n - 2
>1128	AdditiveExpression	_n - 2
>1129	PrimaryExpression	2
>1130	Identifier	_n
>1131	Callee	_rcvers . reserve
>1132	MemberAccess	_rcvers . reserve
>1133	Identifier	reserve
>1134	Identifier	_rcvers
>1135	IdentifierDeclStatement	 
>1136	IdentifierDecl	_rcvers
>1137	Identifier	_rcvers
>1138	IdentifierDeclType	scalable_vector < int >
>1139	CompoundStatement	 
>1140	ExpressionStatement	 
>1141	AssignmentExpr	theDistributor -> m_flushCount = 1
>1142	PrimaryExpression	1
>1143	PtrMemberAccess	theDistributor -> m_flushCount
>1144	Identifier	m_flushCount
>1145	Identifier	theDistributor
>1146	Condition	 
>1147	EqualityExpression	_n == 2
>1148	PrimaryExpression	2
>1149	Identifier	_n
>1150	IdentifierDeclStatement	 
>1151	IdentifierDecl	_n = numProcs ( )
>1152	AssignmentExpr	_n = numProcs ( )
>1153	CallExpression	numProcs ( )
>1154	ArgumentList	 
>1155	Callee	numProcs
>1156	Identifier	numProcs
>1157	Identifier	_n
>1158	Identifier	_n
>1159	IdentifierDeclType	int
>1160	ExpressionStatement	 
>1161	BitAndExpression	( * _serlzr ) & PONG
>1162	Identifier	PONG
>1163	UnaryOp	* _serlzr
>1164	Identifier	_serlzr
>1165	UnaryOperator	*
>1166	IdentifierDeclStatement	 
>1167	IdentifierDecl	* _serlzr = new_serializer ( NULL )
>1168	AssignmentExpr	* _serlzr = new_serializer ( NULL )
>1169	CallExpression	new_serializer ( NULL )
>1170	ArgumentList	NULL
>1171	Argument	NULL
>1172	Identifier	NULL
>1173	Callee	new_serializer
>1174	Identifier	new_serializer
>1175	Identifier	_serlzr
>1176	Identifier	_serlzr
>1177	IdentifierDeclType	serializer *
>1178	ExpressionStatement	 
>1179	CallExpression	CNC_ASSERT ( myPid ( ) )
>1180	ArgumentList	myPid ( )
>1181	Argument	myPid ( )
>1182	CallExpression	myPid ( )
>1183	ArgumentList	 
>1184	Callee	myPid
>1185	Identifier	myPid
>1186	Callee	CNC_ASSERT
>1187	Identifier	CNC_ASSERT
>1188	Label	 
>1189	Identifier	PING
>1190	Condition	 
>1191	Identifier	_action
>1192	ExpressionStatement	 
>1193	BitAndExpression	( * serlzr ) & _action
>1194	Identifier	_action
>1195	UnaryOp	* serlzr
>1196	Identifier	serlzr
>1197	UnaryOperator	*
>1198	IdentifierDeclStatement	 
>1199	IdentifierDecl	_action
>1200	Identifier	_action
>1201	IdentifierDeclType	char
>1202	Condition	 
>1203	EqualityExpression	_dctxtId == SELF
>1204	Identifier	SELF
>1205	Identifier	_dctxtId
>1206	ExpressionStatement	 
>1207	BitAndExpression	( * serlzr ) & _dctxtId
>1208	Identifier	_dctxtId
>1209	UnaryOp	* serlzr
>1210	Identifier	serlzr
>1211	UnaryOperator	*
>1212	IdentifierDeclStatement	 
>1213	IdentifierDecl	_dctxtId
>1214	Identifier	_dctxtId
>1215	IdentifierDeclType	int
>1216	ExpressionStatement	 
>1217	CallExpression	BufferAccess 
>1218	ArgumentList	* serlzr
>1219	Argument	* serlzr
>1220	UnaryOp	* serlzr
>1221	Identifier	serlzr
>1222	UnaryOperator	*
>1223	Callee	BufferAccess 
>1224	Identifier	BufferAccess 
>1270	FunctionDef	distributor 
>1271	ParameterList	 
>1272	ReturnType	int
>1273	CompoundStatement	 
>1274	ReturnStatement	 
>1275	Identifier	_res
>1276	IdentifierDeclStatement	 
>1277	IdentifierDecl	_res = theDistributor -> m_nMsgsRecvd . fetch_and_store ( 0 )
>1278	AssignmentExpr	_res = theDistributor -> m_nMsgsRecvd . fetch_and_store ( 0 )
>1279	CallExpression	theDistributor -> m_nMsgsRecvd . fetch_and_store ( 0 )
>1280	ArgumentList	0
>1281	Argument	0
>1282	PrimaryExpression	0
>1283	Callee	theDistributor -> m_nMsgsRecvd . fetch_and_store
>1284	MemberAccess	theDistributor -> m_nMsgsRecvd . fetch_and_store
>1285	Identifier	fetch_and_store
>1286	PtrMemberAccess	theDistributor -> m_nMsgsRecvd
>1287	Identifier	m_nMsgsRecvd
>1288	Identifier	theDistributor
>1289	Identifier	_res
>1290	Identifier	_res
>1291	IdentifierDeclType	int
>1292	ForStatement	for ( int i = 0 ; i < _n ; ++ i )
>1293	CompoundStatement	 
>1294	ExpressionStatement	 
>1295	CallExpression	theDistributor -> m_sync . pop ( _tmp )
>1296	ArgumentList	_tmp
>1297	Argument	_tmp
>1298	Identifier	_tmp
>1299	Callee	theDistributor -> m_sync . pop
>1300	MemberAccess	theDistributor -> m_sync . pop
>1301	Identifier	pop
>1302	PtrMemberAccess	theDistributor -> m_sync
>1303	Identifier	m_sync
>1304	Identifier	theDistributor
>1305	UnaryExpression	 
>1306	Identifier	i
>1307	IncDec	++
>1308	Condition	 
>1309	RelationalExpression	i < _n
>1310	Identifier	_n
>1311	Identifier	i
>1312	ForInit	 
>1313	IdentifierDeclStatement	int i = 0 ;
>1314	IdentifierDecl	i = 0
>1315	AssignmentExpr	i = 0
>1316	PrimaryExpression	0
>1317	Identifier	i
>1318	Identifier	i
>1319	IdentifierDeclType	int
>1320	IdentifierDeclStatement	 
>1321	IdentifierDecl	_tmp
>1322	Identifier	_tmp
>1323	IdentifierDeclType	int
>1324	IdentifierDeclStatement	 
>1325	IdentifierDecl	_n = numProcs ( ) - 1
>1326	AssignmentExpr	_n = numProcs ( ) - 1
>1327	AdditiveExpression	numProcs ( ) - 1
>1328	PrimaryExpression	1
>1329	CallExpression	numProcs ( )
>1330	ArgumentList	 
>1331	Callee	numProcs
>1332	Identifier	numProcs
>1333	Identifier	_n
>1334	Identifier	_n
>1335	IdentifierDeclType	int
>1336	ExpressionStatement	 
>1337	CallExpression	bcast_msg ( _serlzr )
>1338	ArgumentList	_serlzr
>1339	Argument	_serlzr
>1340	Identifier	_serlzr
>1341	Callee	bcast_msg
>1342	Identifier	bcast_msg
>1343	ExpressionStatement	 
>1344	BitAndExpression	( * _serlzr ) & PING
>1345	Identifier	PING
>1346	UnaryOp	* _serlzr
>1347	Identifier	_serlzr
>1348	UnaryOperator	*
>1349	ExpressionStatement	 
>1350	CallExpression	CNC_ASSERT ( theDistributor -> m_sync . size ( ) == 0 )
>1351	ArgumentList	theDistributor -> m_sync . size ( ) == 0
>1352	Argument	theDistributor -> m_sync . size ( ) == 0
>1353	EqualityExpression	theDistributor -> m_sync . size ( ) == 0
>1354	PrimaryExpression	0
>1355	CallExpression	theDistributor -> m_sync . size ( )
>1356	ArgumentList	 
>1357	Callee	theDistributor -> m_sync . size
>1358	MemberAccess	theDistributor -> m_sync . size
>1359	Identifier	size
>1360	PtrMemberAccess	theDistributor -> m_sync
>1361	Identifier	m_sync
>1362	Identifier	theDistributor
>1363	Callee	CNC_ASSERT
>1364	Identifier	CNC_ASSERT
>1365	ExpressionStatement	 
>1366	CallExpression	CNC_ASSERT ( myPid ( ) == 0 )
>1367	ArgumentList	myPid ( ) == 0
>1368	Argument	myPid ( ) == 0
>1369	EqualityExpression	myPid ( ) == 0
>1370	PrimaryExpression	0
>1371	CallExpression	myPid ( )
>1372	ArgumentList	 
>1373	Callee	myPid
>1374	Identifier	myPid
>1375	Callee	CNC_ASSERT
>1376	Identifier	CNC_ASSERT
>1377	IdentifierDeclStatement	 
>1378	IdentifierDecl	* _serlzr = new_serializer ( NULL )
>1379	AssignmentExpr	* _serlzr = new_serializer ( NULL )
>1380	CallExpression	new_serializer ( NULL )
>1381	ArgumentList	NULL
>1382	Argument	NULL
>1383	Identifier	NULL
>1384	Callee	new_serializer
>1385	Identifier	new_serializer
>1386	Identifier	_serlzr
>1387	Identifier	_serlzr
>1388	IdentifierDeclType	serializer *
>1407	FunctionDef	distributor 
>1408	ParameterList	const distributable_context * dctxt
>1409	Parameter	 
>1410	Identifier	dctxt
>1411	ParameterType	const distributable_context *
>1412	ReturnType	serializer *
>1413	CompoundStatement	 
>1414	ReturnStatement	 
>1415	Identifier	_serlzr
>1416	ExpressionStatement	 
>1417	BitAndExpression	( * _serlzr ) & _dctxtId
>1418	Identifier	_dctxtId
>1419	UnaryOp	* _serlzr
>1420	Identifier	_serlzr
>1421	UnaryOperator	*
>1422	IdentifierDeclStatement	 
>1423	IdentifierDecl	_dctxtId = dctxt ? dctxt -> gid ( ) 
>1424	AssignmentExpr	_dctxtId = dctxt ? dctxt -> gid ( ) 
>1425	ConditionalExpression	dctxt ? dctxt -> gid ( ) 
>1426	Identifier	SELF
>1427	CallExpression	dctxt -> gid ( )
>1428	ArgumentList	 
>1429	Callee	dctxt -> gid
>1430	PtrMemberAccess	dctxt -> gid
>1431	Identifier	gid
>1432	Identifier	dctxt
>1433	Condition	dctxt
>1434	Identifier	dctxt
>1435	Identifier	_dctxtId
>1436	Identifier	_dctxtId
>1437	IdentifierDeclType	int
>1438	ExpressionStatement	 
>1439	CallExpression	_serlzr -> set_mode_pack ( )
>1440	ArgumentList	 
>1441	Callee	_serlzr -> set_mode_pack
>1442	PtrMemberAccess	_serlzr -> set_mode_pack
>1443	Identifier	set_mode_pack
>1444	Identifier	_serlzr
>1445	IdentifierDeclStatement	 
>1446	IdentifierDecl	* _serlzr = new serializer ( false , true )
>1447	AssignmentExpr	* _serlzr = new serializer ( false , true )
>1448	Expression	false , true
>1449	Identifier	true
>1450	Identifier	false
>1451	Identifier	_serlzr
>1452	Identifier	_serlzr
>1453	IdentifierDeclType	serializer *
<7=9,8
<13=22,21,14
<14=18,15
<15=17,16
<18=20,19
<22=55,49,43,32,23
<23=24
<24=30,25
<25=26
<26=27
<27=29,28
<30=31
<32=33
<33=41,34
<34=37,35
<35=36
<37=38
<38=40,39
<41=42
<43=44
<44=46,45
<46=48,47
<49=50
<50=52,51
<52=54,53
<55=56
<56=58,57
<70=73,72,71
<73=80,78,74
<74=75
<75=77,76
<78=79
<86=92,91,87
<87=88
<88=90,89
<92=124,118,112,106,93
<93=94
<94=100,95
<95=98,96
<96=97
<98=99
<100=101
<101=103,102
<103=105,104
<106=107
<107=109,108
<109=111,110
<112=113
<113=115,114
<115=117,116
<118=119
<119=121,120
<121=123,122
<124=125
<125=129,126
<126=127
<127=128
<129=130
<143=146,145,144
<146=153,147
<147=148
<148=150,149
<150=152,151
<153=164,154
<154=155
<155=156
<156=158,157
<158=159
<159=161,160
<161=163,162
<164=165
<165=169,166
<166=168,167
<169=171,170
<171=172
<190=196,195,191
<191=192
<192=194,193
<196=321,310,306,291,285,276,269,251,239,227,213,206,199,197
<197=198
<199=200
<200=202,201
<202=203
<203=205,204
<206=207
<207=211,208
<208=209
<209=210
<211=212
<213=214
<214=224,215
<215=223,216
<216=222,217
<217=221,218
<218=220,219
<224=226,225
<227=228
<228=238,237,229
<229=236,230
<230=232,231
<232=233
<233=235,234
<239=240
<240=250,249,241
<241=248,242
<242=246,243
<243=244
<244=245
<246=247
<251=262,252
<252=255,253
<253=254
<255=256
<256=258,257
<258=259
<259=261,260
<262=263
<263=265,264
<265=266
<266=268,267
<269=270
<270=272,271
<272=273
<273=275,274
<276=277
<277=281,278
<278=279
<279=280
<281=282
<282=284,283
<285=286
<286=288,287
<288=290,289
<291=292
<292=298,293
<293=296,294
<294=295
<296=297
<298=299
<299=301,300
<301=303,302
<303=305,304
<306=307
<307=309,308
<310=311
<311=320,319,312
<312=318,313
<313=315,314
<315=317,316
<321=330,322
<322=323
<323=324
<324=326,325
<326=327
<327=329,328
<330=331
<331=360,332
<332=355,333
<333=347,334
<334=343,335
<335=342,336
<336=338,337
<338=339
<339=341,340
<343=345,344
<345=346
<347=354,348
<348=350,349
<350=351
<351=353,352
<355=357,356
<357=359,358
<360=365,361
<361=363,362
<363=364
<392=398,397,393
<393=394
<394=396,395
<398=470,458,446,434,424,417,399
<399=400
<400=409,401
<401=402
<402=403
<403=405,404
<405=406
<406=408,407
<409=410
<410=412,411
<412=414,413
<414=416,415
<417=418
<418=422,419
<419=420
<420=421
<422=423
<424=425
<425=431,426
<426=430,427
<427=429,428
<431=433,432
<434=435
<435=445,444,436
<436=443,437
<437=439,438
<439=440
<440=442,441
<446=447
<447=457,456,448
<448=455,449
<449=451,450
<451=452
<452=454,453
<458=459
<459=469,468,460
<460=467,461
<461=465,462
<462=463
<463=464
<465=466
<470=473,471
<471=472
<473=474
<474=501,475
<475=496,476
<476=488,477
<477=484,478
<478=480,479
<480=481
<481=483,482
<484=486,485
<486=487
<488=495,489
<489=491,490
<491=492
<492=494,493
<496=498,497
<498=500,499
<501=506,502
<502=504,503
<504=505
<529=538,537,530
<530=534,531
<531=533,532
<534=536,535
<538=552,539
<539=540
<540=546,541
<541=544,542
<542=543
<544=545
<546=547
<547=549,548
<549=551,550
<552=553
<553=559,554
<554=555
<555=556
<556=558,557
<559=560
<570=576,575,571
<571=572
<572=574,573
<576=588,577
<577=578
<578=582,579
<579=580
<580=581
<582=583
<583=585,584
<585=587,586
<588=589
<589=595,590
<590=591
<591=592
<592=594,593
<595=596
<605=617,616,606
<606=613,610,607
<607=609,608
<610=612,611
<613=615,614
<617=640,620,618
<618=619
<620=621
<621=639,638,622
<622=637,623
<623=631,624
<624=629,627,625
<625=626
<627=628
<629=630
<631=632
<632=634,633
<634=636,635
<640=641
<641=647,642
<642=643
<643=644
<644=646,645
<647=648
<663=672,671,664
<664=668,665
<665=667,666
<668=670,669
<672=1216,1212,1206,673
<673=1202,740,674
<674=675
<675=734,730,710,701,692,685,676
<676=677
<677=681,678
<678=679
<679=680
<681=682
<682=684,683
<685=686
<686=688,687
<688=689
<689=691,690
<692=693
<693=700,699,694
<694=698,695
<695=697,696
<701=702
<702=708,703
<703=706,704
<704=705
<706=707
<708=709
<710=711
<711=729,728,712
<712=727,713
<713=719,714
<714=717,715
<715=716
<717=718
<719=720
<720=722,721
<722=724,723
<724=726,725
<730=731
<731=733,732
<734=735
<735=739,736
<736=738,737
<740=1198,1192,741
<741=1190,742
<742=1188,1022,1020,914,912,743
<743=906,902,894,890,870,818,809,797,796,795,794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,774,765,759,751,744
<744=745
<745=747,746
<747=748
<748=750,749
<751=752
<752=756,753
<753=755,754
<756=758,757
<759=760
<760=762,761
<762=764,763
<765=766
<766=770,767
<767=768
<768=769
<770=771
<771=773,772
<774=775
<797=798
<798=808,807,799
<799=806,800
<800=804,801
<801=802
<802=803
<804=805
<809=810
<810=816,811
<811=812
<812=813
<813=815,814
<816=817
<818=866,819
<819=857,848,837,836,834,821,820
<821=822
<822=826,823
<823=824
<824=825
<826=827
<827=829,828
<829=831,830
<831=833,832
<834=835
<837=838
<838=846,839
<839=840
<840=841
<841=843,842
<843=845,844
<846=847
<848=849
<849=856,855,850
<850=854,851
<851=853,852
<857=858
<858=864,859
<859=860
<860=861
<861=863,862
<864=865
<866=867
<867=869,868
<870=871
<871=889,888,872
<872=887,873
<873=879,874
<874=877,875
<875=876
<877=878
<879=880
<880=882,881
<882=884,883
<884=886,885
<890=891
<891=893,892
<894=895
<895=899,896
<896=898,897
<899=901,900
<902=903
<903=905,904
<906=907
<907=911,908
<908=910,909
<912=913
<914=916,915
<916=1015,946,917
<917=918
<918=942,936,930,919
<919=920
<920=924,921
<921=922
<922=923
<924=925
<925=927,926
<927=929,928
<930=931
<931=933,932
<933=935,934
<936=937
<937=939,938
<939=941,940
<942=943
<943=945,944
<946=947
<947=1007,948
<948=995,982,966,958,949
<949=950
<950=956,951
<951=954,952
<952=953
<954=955
<956=957
<958=959
<959=963,960
<960=962,961
<963=965,964
<966=967
<967=981,980,968
<968=979,969
<969=973,970
<970=971
<971=972
<973=974
<974=976,975
<976=978,977
<982=990,983
<983=984
<984=985
<985=989,986
<986=988,987
<990=991
<991=993,992
<993=994
<995=996
<996=1006,1005,997
<997=1004,998
<998=1002,999
<999=1000
<1000=1001
<1002=1003
<1007=1008
<1008=1010,1009
<1010=1014,1011
<1011=1013,1012
<1015=1016
<1016=1018,1017
<1018=1019
<1020=1021
<1022=1178,1166,1160,1150,1023
<1023=1146,1139,1024
<1024=1025
<1025=1135,1124,1089,1076,1053,1026
<1026=1045,1038,1027
<1027=1028
<1028=1030,1029
<1030=1031
<1031=1035,1032
<1032=1034,1033
<1035=1037,1036
<1038=1039
<1039=1040
<1040=1042,1041
<1042=1044,1043
<1045=1046
<1046=1050,1047
<1047=1049,1048
<1050=1052,1051
<1053=1054
<1054=1074,1055
<1055=1072,1063,1056
<1056=1057
<1057=1059,1058
<1059=1060
<1060=1062,1061
<1063=1064
<1064=1071,1065
<1065=1067,1066
<1067=1068
<1068=1070,1069
<1072=1073
<1074=1075
<1076=1084,1077
<1077=1078
<1078=1079
<1079=1083,1080
<1080=1082,1081
<1084=1085
<1085=1087,1086
<1087=1088
<1089=1116,1112,1109,1090
<1090=1091
<1091=1102,1092
<1092=1093
<1093=1094
<1094=1098,1095
<1095=1096
<1096=1097
<1098=1099
<1099=1101,1100
<1102=1103
<1103=1108,1104
<1104=1106,1105
<1106=1107
<1109=1111,1110
<1112=1113
<1113=1115,1114
<1116=1117
<1117=1118
<1118=1123,1122,1119
<1119=1121,1120
<1124=1125
<1125=1131,1126
<1126=1127
<1127=1128
<1128=1130,1129
<1131=1132
<1132=1134,1133
<1135=1136
<1136=1138,1137
<1139=1140
<1140=1141
<1141=1143,1142
<1143=1145,1144
<1146=1147
<1147=1149,1148
<1150=1151
<1151=1159,1158,1152
<1152=1157,1153
<1153=1155,1154
<1155=1156
<1160=1161
<1161=1163,1162
<1163=1165,1164
<1166=1167
<1167=1177,1176,1168
<1168=1175,1169
<1169=1173,1170
<1170=1171
<1171=1172
<1173=1174
<1178=1179
<1179=1186,1180
<1180=1181
<1181=1182
<1182=1184,1183
<1184=1185
<1186=1187
<1188=1189
<1190=1191
<1192=1193
<1193=1195,1194
<1195=1197,1196
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1205,1204
<1206=1207
<1207=1209,1208
<1209=1211,1210
<1212=1213
<1213=1215,1214
<1216=1217
<1217=1223,1218
<1218=1219
<1219=1220
<1220=1222,1221
<1223=1224
<1270=1273,1272,1271
<1273=1377,1365,1349,1343,1336,1324,1320,1292,1276,1274
<1274=1275
<1276=1277
<1277=1291,1290,1278
<1278=1289,1279
<1279=1283,1280
<1280=1281
<1281=1282
<1283=1284
<1284=1286,1285
<1286=1288,1287
<1292=1312,1308,1305,1293
<1293=1294
<1294=1295
<1295=1299,1296
<1296=1297
<1297=1298
<1299=1300
<1300=1302,1301
<1302=1304,1303
<1305=1307,1306
<1308=1309
<1309=1311,1310
<1312=1313
<1313=1314
<1314=1319,1318,1315
<1315=1317,1316
<1320=1321
<1321=1323,1322
<1324=1325
<1325=1335,1334,1326
<1326=1333,1327
<1327=1329,1328
<1329=1331,1330
<1331=1332
<1336=1337
<1337=1341,1338
<1338=1339
<1339=1340
<1341=1342
<1343=1344
<1344=1346,1345
<1346=1348,1347
<1349=1350
<1350=1363,1351
<1351=1352
<1352=1353
<1353=1355,1354
<1355=1357,1356
<1357=1358
<1358=1360,1359
<1360=1362,1361
<1363=1364
<1365=1366
<1366=1375,1367
<1367=1368
<1368=1369
<1369=1371,1370
<1371=1373,1372
<1373=1374
<1375=1376
<1377=1378
<1378=1388,1387,1379
<1379=1386,1380
<1380=1384,1381
<1381=1382
<1382=1383
<1384=1385
<1407=1413,1412,1408
<1408=1409
<1409=1411,1410
<1413=1445,1438,1422,1416,1414
<1414=1415
<1416=1417
<1417=1419,1418
<1419=1421,1420
<1422=1423
<1423=1437,1436,1424
<1424=1435,1425
<1425=1433,1427,1426
<1427=1429,1428
<1429=1430
<1430=1432,1431
<1433=1434
<1438=1439
<1439=1441,1440
<1441=1442
<1442=1444,1443
<1445=1446
<1446=1453,1452,1447
<1447=1451,1448
<1448=1450,1449
