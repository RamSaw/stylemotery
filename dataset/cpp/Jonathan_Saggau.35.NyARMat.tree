>9	FunctionDef	NyARMat 
>10	ParameterList	int i_row , int i_clm
>11	Parameter	 
>12	Identifier	i_clm
>13	ParameterType	int
>14	Parameter	 
>15	Identifier	i_row
>16	ParameterType	int
>17	CompoundStatement	 
>18	ReturnStatement	 
>19	ExpressionStatement	 
>20	AssignmentExpr	this -> row = i_row
>21	Identifier	i_row
>22	PtrMemberAccess	this -> row
>23	Identifier	row
>24	Identifier	this
>25	ExpressionStatement	 
>26	AssignmentExpr	this -> clm = i_clm
>27	Identifier	i_clm
>28	PtrMemberAccess	this -> clm
>29	Identifier	clm
>30	Identifier	this
>31	ExpressionStatement	 
>32	AssignmentExpr	this -> m = new double [ i_row * i_clm ]
>33	MultiplicativeExpression	i_row * i_clm
>34	Identifier	i_clm
>35	Identifier	i_row
>36	PtrMemberAccess	this -> m
>37	Identifier	m
>38	Identifier	this
>39	ExpressionStatement	 
>40	AssignmentExpr	this -> wk_PCA_PCA_u = NULL
>41	Identifier	NULL
>42	PtrMemberAccess	this -> wk_PCA_PCA_u
>43	Identifier	wk_PCA_PCA_u
>44	Identifier	this
>45	ExpressionStatement	 
>46	AssignmentExpr	this -> wk_work_matrixPCA = NULL
>47	Identifier	NULL
>48	PtrMemberAccess	this -> wk_work_matrixPCA
>49	Identifier	wk_work_matrixPCA
>50	Identifier	this
>51	ExpressionStatement	 
>52	AssignmentExpr	this -> wk_PCA_QRM_ev = new NyARVec ( 1 )
>53	PrimaryExpression	1
>54	PtrMemberAccess	this -> wk_PCA_QRM_ev
>55	Identifier	wk_PCA_QRM_ev
>56	Identifier	this
>71	FunctionDef	NyARMat 
>72	ParameterList	 
>73	CompoundStatement	 
>74	ReturnStatement	 
>75	ExpressionStatement	 
>76	CallExpression	NyAR_SAFE_DELETE ( this -> m )
>77	ArgumentList	this -> m
>78	Argument	this -> m
>79	PtrMemberAccess	this -> m
>80	Identifier	m
>81	Identifier	this
>82	Callee	NyAR_SAFE_DELETE
>83	Identifier	NyAR_SAFE_DELETE
>84	ExpressionStatement	 
>85	CallExpression	NyAR_SAFE_DELETE ( this -> wk_PCA_PCA_u )
>86	ArgumentList	this -> wk_PCA_PCA_u
>87	Argument	this -> wk_PCA_PCA_u
>88	PtrMemberAccess	this -> wk_PCA_PCA_u
>89	Identifier	wk_PCA_PCA_u
>90	Identifier	this
>91	Callee	NyAR_SAFE_DELETE
>92	Identifier	NyAR_SAFE_DELETE
>93	ExpressionStatement	 
>94	CallExpression	NyAR_SAFE_DELETE ( this -> wk_work_matrixPCA )
>95	ArgumentList	this -> wk_work_matrixPCA
>96	Argument	this -> wk_work_matrixPCA
>97	PtrMemberAccess	this -> wk_work_matrixPCA
>98	Identifier	wk_work_matrixPCA
>99	Identifier	this
>100	Callee	NyAR_SAFE_DELETE
>101	Identifier	NyAR_SAFE_DELETE
>102	ExpressionStatement	 
>103	CallExpression	NyAR_SAFE_DELETE ( this -> wk_PCA_QRM_ev )
>104	ArgumentList	this -> wk_PCA_QRM_ev
>105	Argument	this -> wk_PCA_QRM_ev
>106	PtrMemberAccess	this -> wk_PCA_QRM_ev
>107	Identifier	wk_PCA_QRM_ev
>108	Identifier	this
>109	Callee	NyAR_SAFE_DELETE
>110	Identifier	NyAR_SAFE_DELETE
>120	FunctionDef	NyARMat 
>121	ParameterList	int i_row , int i_clm
>122	Parameter	 
>123	Identifier	i_clm
>124	ParameterType	int
>125	Parameter	 
>126	Identifier	i_row
>127	ParameterType	int
>128	ReturnType	void
>129	CompoundStatement	 
>130	ReturnStatement	 
>131	ExpressionStatement	 
>132	AssignmentExpr	this -> row = i_row
>133	Identifier	i_row
>134	PtrMemberAccess	this -> row
>135	Identifier	row
>136	Identifier	this
>137	ExpressionStatement	 
>138	AssignmentExpr	this -> clm = i_clm
>139	Identifier	i_clm
>140	PtrMemberAccess	this -> clm
>141	Identifier	clm
>142	Identifier	this
>143	IfStatement	if ( i_row * i_clm > this -> m_length )
>144	ElseStatement	else
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	AssignmentExpr	this -> m_length = i_row * i_clm
>148	MultiplicativeExpression	i_row * i_clm
>149	Identifier	i_clm
>150	Identifier	i_row
>151	PtrMemberAccess	this -> m_length
>152	Identifier	m_length
>153	Identifier	this
>154	ExpressionStatement	 
>155	AssignmentExpr	this -> m = new double [ i_row * i_clm ]
>156	MultiplicativeExpression	i_row * i_clm
>157	Identifier	i_clm
>158	Identifier	i_row
>159	PtrMemberAccess	this -> m
>160	Identifier	m
>161	Identifier	this
>162	ExpressionStatement	 
>163	CallExpression	NyAR_SAFE_DELETE ( this -> m )
>164	ArgumentList	this -> m
>165	Argument	this -> m
>166	PtrMemberAccess	this -> m
>167	Identifier	m
>168	Identifier	this
>169	Callee	NyAR_SAFE_DELETE
>170	Identifier	NyAR_SAFE_DELETE
>171	CompoundStatement	 
>172	Condition	 
>173	RelationalExpression	i_row * i_clm > this -> m_length
>174	PtrMemberAccess	this -> m_length
>175	Identifier	m_length
>176	Identifier	this
>177	MultiplicativeExpression	i_row * i_clm
>178	Identifier	i_clm
>179	Identifier	i_row
>191	FunctionDef	NyARMat 
>192	ParameterList	 
>193	ReturnType	int
>194	CompoundStatement	 
>195	ReturnStatement	 
>196	PtrMemberAccess	this -> clm
>197	Identifier	clm
>198	Identifier	this
>205	FunctionDef	NyARMat 
>206	ParameterList	 
>207	ReturnType	int
>208	CompoundStatement	 
>209	ReturnStatement	 
>210	PtrMemberAccess	this -> row
>211	Identifier	row
>212	Identifier	this
>219	FunctionDef	NyARMat 
>220	ParameterList	 
>221	ReturnType	void
>222	CompoundStatement	 
>223	ReturnStatement	 
>224	ForStatement	for ( int i = 0 ; i < this -> m_length ; i ++ )
>225	CompoundStatement	 
>226	ExpressionStatement	 
>227	AssignmentExpr	* ( m_ptr + i ) = 0
>228	PrimaryExpression	0
>229	UnaryOp	* ( m_ptr + i )
>230	AdditiveExpression	m_ptr + i
>231	Identifier	i
>232	Identifier	m_ptr
>233	UnaryOperator	*
>234	IncDecOp	 
>235	IncDec	++
>236	Identifier	i
>237	Condition	 
>238	RelationalExpression	i < this -> m_length
>239	PtrMemberAccess	this -> m_length
>240	Identifier	m_length
>241	Identifier	this
>242	Identifier	i
>243	ForInit	 
>244	IdentifierDeclStatement	int i = 0 ;
>245	IdentifierDecl	i = 0
>246	AssignmentExpr	i = 0
>247	PrimaryExpression	0
>248	Identifier	i
>249	Identifier	i
>250	IdentifierDeclType	int
>251	IdentifierDeclStatement	 
>252	IdentifierDecl	* m_ptr = this -> m
>253	AssignmentExpr	* m_ptr = this -> m
>254	PtrMemberAccess	this -> m
>255	Identifier	m
>256	Identifier	this
>257	Identifier	m_ptr
>258	Identifier	m_ptr
>259	IdentifierDeclType	double *
>272	FunctionDef	NyARMat 
>273	ParameterList	const NyARMat & i_copy_from
>274	Parameter	 
>275	Identifier	i_copy_from
>276	ParameterType	const NyARMat &
>277	ReturnType	void
>278	CompoundStatement	 
>279	ReturnStatement	 
>280	ExpressionStatement	 
>281	CallExpression	memcpy ( this -> m , i_copy_from . m , sizeof ( double ) * this -> row * this -> clm )
>282	ArgumentList	this -> m
>283	Argument	sizeof ( double ) * this -> row * this -> clm
>284	MultiplicativeExpression	sizeof ( double ) * this -> row * this -> clm
>285	MultiplicativeExpression	this -> row * this -> clm
>286	PtrMemberAccess	this -> clm
>287	Identifier	clm
>288	Identifier	this
>289	PtrMemberAccess	this -> row
>290	Identifier	row
>291	Identifier	this
>292	SizeofExpr	sizeof ( double )
>293	SizeofOperand	double
>294	Sizeof	sizeof
>295	Argument	i_copy_from . m
>296	MemberAccess	i_copy_from . m
>297	Identifier	m
>298	Identifier	i_copy_from
>299	Argument	this -> m
>300	PtrMemberAccess	this -> m
>301	Identifier	m
>302	Identifier	this
>303	Callee	memcpy
>304	Identifier	memcpy
>305	IfStatement	if ( this -> row != i_copy_from . row || this -> clm != i_copy_from . clm )
>306	CompoundStatement	 
>307	ExpressionStatement	 
>308	CallExpression	NyARException ( )
>309	ArgumentList	 
>310	Callee	NyARException
>311	Identifier	NyARException
>312	Statement	 
>313	Condition	 
>314	OrExpression	this -> row != i_copy_from . row || this -> clm != i_copy_from . clm
>315	EqualityExpression	this -> clm != i_copy_from . clm
>316	MemberAccess	i_copy_from . clm
>317	Identifier	clm
>318	Identifier	i_copy_from
>319	PtrMemberAccess	this -> clm
>320	Identifier	clm
>321	Identifier	this
>322	EqualityExpression	this -> row != i_copy_from . row
>323	MemberAccess	i_copy_from . row
>324	Identifier	row
>325	Identifier	i_copy_from
>326	PtrMemberAccess	this -> row
>327	Identifier	row
>328	Identifier	this
>341	FunctionDef	NyARMat 
>342	ParameterList	 
>343	ReturnType	double *
>344	CompoundStatement	 
>345	ReturnStatement	 
>346	PtrMemberAccess	this -> m
>347	Identifier	m
>348	Identifier	this
>355	FunctionDef	NyARMat 
>356	ParameterList	const NyARMat & a , const NyARMat & b
>357	Parameter	 
>358	Identifier	b
>359	ParameterType	const NyARMat &
>360	Parameter	 
>361	Identifier	a
>362	ParameterType	const NyARMat &
>363	ReturnType	void
>364	CompoundStatement	 
>365	ReturnStatement	 
>366	ForStatement	for ( r = 0 ; r < d_row ; r ++ )
>367	CompoundStatement	 
>368	ExpressionStatement	 
>369	AssignmentExpr	am_ptr += a_clm
>370	Identifier	a_clm
>371	Identifier	am_ptr
>372	ForStatement	for ( c = 0 ; c < d_clm ; c ++ )
>373	CompoundStatement	 
>374	ExpressionStatement	 
>375	IncDecOp	dm ++
>376	IncDec	++
>377	Identifier	dm
>378	ExpressionStatement	 
>379	AssignmentExpr	* dm = w
>380	Identifier	w
>381	UnaryOp	* dm
>382	Identifier	dm
>383	UnaryOperator	*
>384	ForStatement	for ( i = 0 ; i < a . clm ; i ++ )
>385	CompoundStatement	 
>386	ExpressionStatement	 
>387	AssignmentExpr	bm_ptr += d_clm
>388	Identifier	d_clm
>389	Identifier	bm_ptr
>390	ExpressionStatement	 
>391	AssignmentExpr	w += * ( am_ptr + i ) * * bm_ptr
>392	MultiplicativeExpression	* ( am_ptr + i ) * * bm_ptr
>393	UnaryOp	* bm_ptr
>394	Identifier	bm_ptr
>395	UnaryOperator	*
>396	UnaryOp	* ( am_ptr + i )
>397	AdditiveExpression	am_ptr + i
>398	Identifier	i
>399	Identifier	am_ptr
>400	UnaryOperator	*
>401	Identifier	w
>402	IncDecOp	 
>403	IncDec	++
>404	Identifier	i
>405	Condition	 
>406	RelationalExpression	i < a . clm
>407	MemberAccess	a . clm
>408	Identifier	clm
>409	Identifier	a
>410	Identifier	i
>411	ForInit	 
>412	AssignmentExpr	i = 0
>413	PrimaryExpression	0
>414	Identifier	i
>415	ExpressionStatement	 
>416	AssignmentExpr	w = 0.0
>417	PrimaryExpression	0.0
>418	Identifier	w
>419	ExpressionStatement	 
>420	AssignmentExpr	bm_ptr = b . m + c
>421	AdditiveExpression	b . m + c
>422	Identifier	c
>423	MemberAccess	b . m
>424	Identifier	m
>425	Identifier	b
>426	Identifier	bm_ptr
>427	IncDecOp	 
>428	IncDec	++
>429	Identifier	c
>430	Condition	 
>431	RelationalExpression	c < d_clm
>432	Identifier	d_clm
>433	Identifier	c
>434	ForInit	 
>435	AssignmentExpr	c = 0
>436	PrimaryExpression	0
>437	Identifier	c
>438	IncDecOp	 
>439	IncDec	++
>440	Identifier	r
>441	Condition	 
>442	RelationalExpression	r < d_row
>443	Identifier	d_row
>444	Identifier	r
>445	ForInit	 
>446	AssignmentExpr	r = 0
>447	PrimaryExpression	0
>448	Identifier	r
>449	ExpressionStatement	 
>450	AssignmentExpr	am_ptr = a . m
>451	MemberAccess	a . m
>452	Identifier	m
>453	Identifier	a
>454	Identifier	am_ptr
>455	IdentifierDeclStatement	 
>456	IdentifierDecl	a_clm = a . clm
>457	AssignmentExpr	a_clm = a . clm
>458	MemberAccess	a . clm
>459	Identifier	clm
>460	Identifier	a
>461	Identifier	a_clm
>462	Identifier	a_clm
>463	IdentifierDeclType	const int
>464	IdentifierDeclStatement	 
>465	IdentifierDecl	* bm_ptr
>466	Identifier	bm_ptr
>467	IdentifierDeclType	const double *
>468	IdentifierDecl	* am_ptr
>469	Identifier	am_ptr
>470	IdentifierDeclType	const double *
>471	IdentifierDeclStatement	 
>472	IdentifierDecl	* dm = this -> m
>473	AssignmentExpr	* dm = this -> m
>474	PtrMemberAccess	this -> m
>475	Identifier	m
>476	Identifier	this
>477	Identifier	dm
>478	Identifier	dm
>479	IdentifierDeclType	double *
>480	IdentifierDeclStatement	 
>481	IdentifierDecl	i
>482	Identifier	i
>483	IdentifierDeclType	int
>484	IdentifierDecl	c
>485	Identifier	c
>486	IdentifierDeclType	int
>487	IdentifierDecl	r
>488	Identifier	r
>489	IdentifierDeclType	int
>490	IdentifierDeclStatement	 
>491	IdentifierDecl	w
>492	Identifier	w
>493	IdentifierDeclType	double
>494	IfStatement	if ( a . clm != b . row || d_row != a . row || d_clm != b . clm )
>495	CompoundStatement	 
>496	ExpressionStatement	 
>497	CallExpression	NyARException ( )
>498	ArgumentList	 
>499	Callee	NyARException
>500	Identifier	NyARException
>501	Statement	 
>502	Condition	 
>503	OrExpression	a . clm != b . row || d_row != a . row || d_clm != b . clm
>504	OrExpression	d_row != a . row || d_clm != b . clm
>505	EqualityExpression	d_clm != b . clm
>506	MemberAccess	b . clm
>507	Identifier	clm
>508	Identifier	b
>509	Identifier	d_clm
>510	EqualityExpression	d_row != a . row
>511	MemberAccess	a . row
>512	Identifier	row
>513	Identifier	a
>514	Identifier	d_row
>515	EqualityExpression	a . clm != b . row
>516	MemberAccess	b . row
>517	Identifier	row
>518	Identifier	b
>519	MemberAccess	a . clm
>520	Identifier	clm
>521	Identifier	a
>522	IdentifierDeclStatement	 
>523	IdentifierDecl	d_clm = this -> clm
>524	AssignmentExpr	d_clm = this -> clm
>525	PtrMemberAccess	this -> clm
>526	Identifier	clm
>527	Identifier	this
>528	Identifier	d_clm
>529	Identifier	d_clm
>530	IdentifierDeclType	const int
>531	IdentifierDeclStatement	 
>532	IdentifierDecl	d_row = this -> row
>533	AssignmentExpr	d_row = this -> row
>534	PtrMemberAccess	this -> row
>535	Identifier	row
>536	Identifier	this
>537	Identifier	d_row
>538	Identifier	d_row
>539	IdentifierDeclType	const int
>571	FunctionDef	NyARMat 
>572	ParameterList	 
>573	ReturnType	bool
>574	CompoundStatement	 
>575	ReturnStatement	 
>576	Identifier	true
>577	ForStatement	for ( int n = 0 ; n < dimen ; n ++ )
>578	CompoundStatement	 
>579	ForStatement	for ( int i = 0 ; i < dimen ; i ++ )
>580	CompoundStatement	 
>581	ExpressionStatement	 
>582	AssignmentExpr	ap_i [ n ] = work
>583	Identifier	work
>584	ArrayIndexing	ap_i [ n ]
>585	Identifier	n
>586	Identifier	ap_i
>587	ExpressionStatement	 
>588	AssignmentExpr	ap_i [ j ] = ap_i [ n ]
>589	ArrayIndexing	ap_i [ n ]
>590	Identifier	n
>591	Identifier	ap_i
>592	ArrayIndexing	ap_i [ j ]
>593	Identifier	j
>594	Identifier	ap_i
>595	ExpressionStatement	 
>596	AssignmentExpr	work = ap_i [ j ]
>597	ArrayIndexing	ap_i [ j ]
>598	Identifier	j
>599	Identifier	ap_i
>600	Identifier	work
>601	ExpressionStatement	 
>602	AssignmentExpr	ap_i = ap + i * dimen
>603	AdditiveExpression	ap + i * dimen
>604	MultiplicativeExpression	i * dimen
>605	Identifier	dimen
>606	Identifier	i
>607	Identifier	ap
>608	Identifier	ap_i
>609	IncDecOp	 
>610	IncDec	++
>611	Identifier	i
>612	Condition	 
>613	RelationalExpression	i < dimen
>614	Identifier	dimen
>615	Identifier	i
>616	ForInit	 
>617	IdentifierDeclStatement	int i = 0 ;
>618	IdentifierDecl	i = 0
>619	AssignmentExpr	i = 0
>620	PrimaryExpression	0
>621	Identifier	i
>622	Identifier	i
>623	IdentifierDeclType	int
>624	ExpressionStatement	 
>625	AssignmentExpr	nos [ j ] = nos [ n ]
>626	ArrayIndexing	nos [ n ]
>627	Identifier	n
>628	Identifier	nos
>629	ArrayIndexing	nos [ j ]
>630	Identifier	j
>631	Identifier	nos
>632	ForStatement	for ( j = n ; j < dimen ; j ++ )
>633	CompoundStatement	 
>634	IfStatement	if ( nos [ j ] == n )
>635	CompoundStatement	 
>636	BreakStatement	 
>637	Condition	 
>638	EqualityExpression	nos [ j ] == n
>639	Identifier	n
>640	ArrayIndexing	nos [ j ]
>641	Identifier	j
>642	Identifier	nos
>643	IncDecOp	 
>644	IncDec	++
>645	Identifier	j
>646	Condition	 
>647	RelationalExpression	j < dimen
>648	Identifier	dimen
>649	Identifier	j
>650	ForInit	 
>651	AssignmentExpr	j = n
>652	Identifier	n
>653	Identifier	j
>654	IncDecOp	 
>655	IncDec	++
>656	Identifier	n
>657	Condition	 
>658	RelationalExpression	n < dimen
>659	Identifier	dimen
>660	Identifier	n
>661	ForInit	 
>662	IdentifierDeclStatement	int n = 0 ;
>663	IdentifierDecl	n = 0
>664	AssignmentExpr	n = 0
>665	PrimaryExpression	0
>666	Identifier	n
>667	Identifier	n
>668	IdentifierDeclType	int
>669	ForStatement	for ( int n = 0 ; n < dimen ; n ++ )
>670	CompoundStatement	 
>671	ForStatement	for ( int i = 0 ; i < dimen ; i ++ )
>672	CompoundStatement	 
>673	IfStatement	if ( i != n )
>674	CompoundStatement	 
>675	ExpressionStatement	 
>676	AssignmentExpr	ap_i [ j ] = - work * ap_n [ j ]
>677	MultiplicativeExpression	- work * ap_n [ j ]
>678	ArrayIndexing	ap_n [ j ]
>679	Identifier	j
>680	Identifier	ap_n
>681	UnaryOp	- work
>682	Identifier	work
>683	UnaryOperator	-
>684	ArrayIndexing	ap_i [ j ]
>685	Identifier	j
>686	Identifier	ap_i
>687	ForStatement	for ( j = 0 ; j < dimen_1 ; j ++ )
>688	CompoundStatement	 
>689	ExpressionStatement	 
>690	AssignmentExpr	ap_i [ j ] = ap_i [ j + 1 ] - work * ap_n [ j ]
>691	AdditiveExpression	ap_i [ j + 1 ] - work * ap_n [ j ]
>692	MultiplicativeExpression	work * ap_n [ j ]
>693	ArrayIndexing	ap_n [ j ]
>694	Identifier	j
>695	Identifier	ap_n
>696	Identifier	work
>697	ArrayIndexing	ap_i [ j + 1 ]
>698	AdditiveExpression	j + 1
>699	PrimaryExpression	1
>700	Identifier	j
>701	Identifier	ap_i
>702	ArrayIndexing	ap_i [ j ]
>703	Identifier	j
>704	Identifier	ap_i
>705	IncDecOp	 
>706	IncDec	++
>707	Identifier	j
>708	Condition	 
>709	RelationalExpression	j < dimen_1
>710	Identifier	dimen_1
>711	Identifier	j
>712	ForInit	 
>713	AssignmentExpr	j = 0
>714	PrimaryExpression	0
>715	Identifier	j
>716	ExpressionStatement	 
>717	AssignmentExpr	work = ap_i [ 0 ]
>718	ArrayIndexing	ap_i [ 0 ]
>719	PrimaryExpression	0
>720	Identifier	ap_i
>721	Identifier	work
>722	ExpressionStatement	 
>723	AssignmentExpr	ap_i = ap + i * dimen
>724	AdditiveExpression	ap + i * dimen
>725	MultiplicativeExpression	i * dimen
>726	Identifier	dimen
>727	Identifier	i
>728	Identifier	ap
>729	Identifier	ap_i
>730	Condition	 
>731	EqualityExpression	i != n
>732	Identifier	n
>733	Identifier	i
>734	IncDecOp	 
>735	IncDec	++
>736	Identifier	i
>737	Condition	 
>738	RelationalExpression	i < dimen
>739	Identifier	dimen
>740	Identifier	i
>741	ForInit	 
>742	IdentifierDeclStatement	int i = 0 ;
>743	IdentifierDecl	i = 0
>744	AssignmentExpr	i = 0
>745	PrimaryExpression	0
>746	Identifier	i
>747	Identifier	i
>748	IdentifierDeclType	int
>749	ExpressionStatement	 
>750	AssignmentExpr	ap_n [ j ] = 1.0 / work
>751	MultiplicativeExpression	1.0 / work
>752	Identifier	work
>753	PrimaryExpression	1.0
>754	ArrayIndexing	ap_n [ j ]
>755	Identifier	j
>756	Identifier	ap_n
>757	ForStatement	for ( j = 0 ; j < dimen_1 ; j ++ )
>758	CompoundStatement	 
>759	ExpressionStatement	 
>760	AssignmentExpr	ap_n [ j ] = ap_n [ j + 1 ] / work
>761	MultiplicativeExpression	ap_n [ j + 1 ] / work
>762	Identifier	work
>763	ArrayIndexing	ap_n [ j + 1 ]
>764	AdditiveExpression	j + 1
>765	PrimaryExpression	1
>766	Identifier	j
>767	Identifier	ap_n
>768	ArrayIndexing	ap_n [ j ]
>769	Identifier	j
>770	Identifier	ap_n
>771	IncDecOp	 
>772	IncDec	++
>773	Identifier	j
>774	Condition	 
>775	RelationalExpression	j < dimen_1
>776	Identifier	dimen_1
>777	Identifier	j
>778	ForInit	 
>779	AssignmentExpr	j = 0
>780	PrimaryExpression	0
>781	Identifier	j
>782	ExpressionStatement	 
>783	AssignmentExpr	work = ap_n [ 0 ]
>784	ArrayIndexing	ap_n [ 0 ]
>785	PrimaryExpression	0
>786	Identifier	ap_n
>787	Identifier	work
>788	ForStatement	for ( j = 0 ; j < dimen ; j ++ )
>789	CompoundStatement	 
>790	ExpressionStatement	 
>791	AssignmentExpr	ap_n [ j ] = work
>792	Identifier	work
>793	ArrayIndexing	ap_n [ j ]
>794	Identifier	j
>795	Identifier	ap_n
>796	ExpressionStatement	 
>797	AssignmentExpr	ap_ip [ j ] = ap_n [ j ]
>798	ArrayIndexing	ap_n [ j ]
>799	Identifier	j
>800	Identifier	ap_n
>801	ArrayIndexing	ap_ip [ j ]
>802	Identifier	j
>803	Identifier	ap_ip
>804	ExpressionStatement	 
>805	AssignmentExpr	work = ap_ip [ j ]
>806	ArrayIndexing	ap_ip [ j ]
>807	Identifier	j
>808	Identifier	ap_ip
>809	Identifier	work
>810	IncDecOp	 
>811	IncDec	++
>812	Identifier	j
>813	Condition	 
>814	RelationalExpression	j < dimen
>815	Identifier	dimen
>816	Identifier	j
>817	ForInit	 
>818	AssignmentExpr	j = 0
>819	PrimaryExpression	0
>820	Identifier	j
>821	ExpressionStatement	 
>822	AssignmentExpr	ap_ip = ap + ip * dimen
>823	AdditiveExpression	ap + ip * dimen
>824	MultiplicativeExpression	ip * dimen
>825	Identifier	dimen
>826	Identifier	ip
>827	Identifier	ap
>828	Identifier	ap_ip
>829	ExpressionStatement	 
>830	AssignmentExpr	nos [ n ] = nwork
>831	Identifier	nwork
>832	ArrayIndexing	nos [ n ]
>833	Identifier	n
>834	Identifier	nos
>835	ExpressionStatement	 
>836	AssignmentExpr	nos [ ip ] = nos [ n ]
>837	ArrayIndexing	nos [ n ]
>838	Identifier	n
>839	Identifier	nos
>840	ArrayIndexing	nos [ ip ]
>841	Identifier	ip
>842	Identifier	nos
>843	ExpressionStatement	 
>844	AssignmentExpr	nwork = nos [ ip ]
>845	ArrayIndexing	nos [ ip ]
>846	Identifier	ip
>847	Identifier	nos
>848	Identifier	nwork
>849	IfStatement	if ( p == 0.0 )
>850	CompoundStatement	 
>851	ReturnStatement	 
>852	Identifier	false
>853	Condition	 
>854	EqualityExpression	p == 0.0
>855	PrimaryExpression	0.0
>856	Identifier	p
>857	ForStatement	for ( int i = n ; i < dimen ; i ++ )
>858	CompoundStatement	 
>859	IfStatement	if ( p < ( pbuf = fabs ( ap [ i * dimen + 0 ] ) ) )
>860	CompoundStatement	 
>861	ExpressionStatement	 
>862	AssignmentExpr	ip = i
>863	Identifier	i
>864	Identifier	ip
>865	ExpressionStatement	 
>866	AssignmentExpr	p = pbuf
>867	Identifier	pbuf
>868	Identifier	p
>869	Condition	 
>870	RelationalExpression	p < ( pbuf = fabs ( ap [ i * dimen + 0 ] ) )
>871	AssignmentExpr	pbuf = fabs ( ap [ i * dimen + 0 ] )
>872	CallExpression	fabs ( ap [ i * dimen + 0 ] )
>873	ArgumentList	ap [ i * dimen + 0 ]
>874	Argument	ap [ i * dimen + 0 ]
>875	ArrayIndexing	ap [ i * dimen + 0 ]
>876	AdditiveExpression	i * dimen + 0
>877	PrimaryExpression	0
>878	MultiplicativeExpression	i * dimen
>879	Identifier	dimen
>880	Identifier	i
>881	Identifier	ap
>882	Callee	fabs
>883	Identifier	fabs
>884	Identifier	pbuf
>885	Identifier	p
>886	IncDecOp	 
>887	IncDec	++
>888	Identifier	i
>889	Condition	 
>890	RelationalExpression	i < dimen
>891	Identifier	dimen
>892	Identifier	i
>893	ForInit	 
>894	IdentifierDeclStatement	int i = n ;
>895	IdentifierDecl	i = n
>896	AssignmentExpr	i = n
>897	Identifier	n
>898	Identifier	n
>899	Identifier	i
>900	IdentifierDeclType	int
>901	ExpressionStatement	 
>902	AssignmentExpr	p = 0.0
>903	PrimaryExpression	0.0
>904	Identifier	p
>905	ExpressionStatement	 
>906	AssignmentExpr	ap_n = ap + n * dimen
>907	AdditiveExpression	ap + n * dimen
>908	MultiplicativeExpression	n * dimen
>909	Identifier	dimen
>910	Identifier	n
>911	Identifier	ap
>912	Identifier	ap_n
>913	IncDecOp	 
>914	IncDec	++
>915	Identifier	n
>916	Condition	 
>917	RelationalExpression	n < dimen
>918	Identifier	dimen
>919	Identifier	n
>920	ForInit	 
>921	IdentifierDeclStatement	int n = 0 ;
>922	IdentifierDecl	n = 0
>923	AssignmentExpr	n = 0
>924	PrimaryExpression	0
>925	Identifier	n
>926	Identifier	n
>927	IdentifierDeclType	int
>928	ExpressionStatement	 
>929	AssignmentExpr	ip = 0
>930	PrimaryExpression	0
>931	Identifier	ip
>932	ForStatement	for ( int n = 0 ; n < dimen ; n ++ )
>933	CompoundStatement	 
>934	ExpressionStatement	 
>935	AssignmentExpr	* ( nos + n ) = n
>936	Identifier	n
>937	UnaryOp	* ( nos + n )
>938	AdditiveExpression	nos + n
>939	Identifier	n
>940	Identifier	nos
>941	UnaryOperator	*
>942	IncDecOp	 
>943	IncDec	++
>944	Identifier	n
>945	Condition	 
>946	RelationalExpression	n < dimen
>947	Identifier	dimen
>948	Identifier	n
>949	ForInit	 
>950	IdentifierDeclStatement	int n = 0 ;
>951	IdentifierDecl	n = 0
>952	AssignmentExpr	n = 0
>953	PrimaryExpression	0
>954	Identifier	n
>955	Identifier	n
>956	IdentifierDeclType	int
>957	SwitchStatement	switch ( dimen )
>958	CompoundStatement	 
>959	ReturnStatement	 
>960	Identifier	true
>961	ExpressionStatement	 
>962	AssignmentExpr	ap [ 0 * dimen + 0 ] = 1.0 / ap [ 0 * dimen + 0 ]
>963	MultiplicativeExpression	1.0 / ap [ 0 * dimen + 0 ]
>964	ArrayIndexing	ap [ 0 * dimen + 0 ]
>965	AdditiveExpression	0 * dimen + 0
>966	PrimaryExpression	0
>967	MultiplicativeExpression	0 * dimen
>968	Identifier	dimen
>969	PrimaryExpression	0
>970	Identifier	ap
>971	PrimaryExpression	1.0
>972	ArrayIndexing	ap [ 0 * dimen + 0 ]
>973	AdditiveExpression	0 * dimen + 0
>974	PrimaryExpression	0
>975	MultiplicativeExpression	0 * dimen
>976	Identifier	dimen
>977	PrimaryExpression	0
>978	Identifier	ap
>979	Label	 
>980	ExpressionStatement	 
>981	CallExpression	NyARException ( )
>982	ArgumentList	 
>983	Callee	NyARException
>984	Identifier	NyARException
>985	Statement	 
>986	Label	 
>987	Condition	 
>988	Identifier	dimen
>989	IdentifierDeclStatement	 
>990	IdentifierDecl	work
>991	Identifier	work
>992	IdentifierDeclType	double
>993	IdentifierDecl	pbuf
>994	Identifier	pbuf
>995	IdentifierDeclType	double
>996	IdentifierDecl	p
>997	Identifier	p
>998	IdentifierDeclType	double
>999	IdentifierDeclStatement	 
>1000	IdentifierDecl	nwork
>1001	Identifier	nwork
>1002	IdentifierDeclType	int
>1003	IdentifierDecl	ip
>1004	Identifier	ip
>1005	IdentifierDeclType	int
>1006	IdentifierDecl	j
>1007	Identifier	j
>1008	IdentifierDeclType	int
>1009	IdentifierDeclStatement	 
>1010	IdentifierDecl	* ap_i
>1011	Identifier	ap_i
>1012	IdentifierDeclType	double *
>1013	IdentifierDecl	* ap_ip
>1014	Identifier	ap_ip
>1015	IdentifierDeclType	double *
>1016	IdentifierDecl	* ap_n
>1017	Identifier	ap_n
>1018	IdentifierDeclType	double *
>1019	IdentifierDeclStatement	 
>1020	IdentifierDecl	dimen_1 = dimen - 1
>1021	AssignmentExpr	dimen_1 = dimen - 1
>1022	AdditiveExpression	dimen - 1
>1023	PrimaryExpression	1
>1024	Identifier	dimen
>1025	Identifier	dimen_1
>1026	Identifier	dimen_1
>1027	IdentifierDeclType	int
>1028	IdentifierDeclStatement	 
>1029	IdentifierDecl	dimen = this -> row
>1030	AssignmentExpr	dimen = this -> row
>1031	PtrMemberAccess	this -> row
>1032	Identifier	row
>1033	Identifier	this
>1034	Identifier	dimen
>1035	Identifier	dimen
>1036	IdentifierDeclType	const int
>1037	IdentifierDeclStatement	 
>1038	IdentifierDecl	* ap = this -> m
>1039	AssignmentExpr	* ap = this -> m
>1040	PtrMemberAccess	this -> m
>1041	Identifier	m
>1042	Identifier	this
>1043	Identifier	ap
>1044	Identifier	ap
>1045	IdentifierDeclType	double *
>1046	IdentifierDeclStatement	 
>1047	IdentifierDecl	nos [ 50 ]
>1048	PrimaryExpression	50
>1049	Identifier	nos
>1050	IdentifierDeclType	int [ 50 ]
>1087	FunctionDef	NyARMat 
>1088	ParameterList	 
>1089	ReturnType	void
>1090	CompoundStatement	 
>1091	ForStatement	for ( int i = 0 ; i < this -> clm ; i ++ )
>1092	CompoundStatement	 
>1093	ExpressionStatement	 
>1094	CallExpression	printf ( \"\n\" )
>1095	ArgumentList	\"\n\"
>1096	Argument	\"\n\"
>1097	PrimaryExpression	\"\n\"
>1098	Callee	printf
>1099	Identifier	printf
>1100	ForStatement	for ( int i2 = 0 ; i2 < this -> row ; i2 ++ )
>1101	CompoundStatement	 
>1102	ExpressionStatement	 
>1103	CallExpression	printf ( \"%f \" , * ( m_ptr ++ ) )
>1104	ArgumentList	\"%f \"
>1105	Argument	* ( m_ptr ++ )
>1106	UnaryOp	* ( m_ptr ++ )
>1107	IncDecOp	m_ptr ++
>1108	IncDec	++
>1109	Identifier	m_ptr
>1110	UnaryOperator	*
>1111	Argument	\"%f \"
>1112	PrimaryExpression	\"%f \"
>1113	Callee	printf
>1114	Identifier	printf
>1115	IncDecOp	 
>1116	IncDec	++
>1117	Identifier	i2
>1118	Condition	 
>1119	RelationalExpression	i2 < this -> row
>1120	PtrMemberAccess	this -> row
>1121	Identifier	row
>1122	Identifier	this
>1123	Identifier	i2
>1124	ForInit	 
>1125	IdentifierDeclStatement	int i2 = 0 ;
>1126	IdentifierDecl	i2 = 0
>1127	AssignmentExpr	i2 = 0
>1128	PrimaryExpression	0
>1129	Identifier	i2
>1130	Identifier	i2
>1131	IdentifierDeclType	int
>1132	IncDecOp	 
>1133	IncDec	++
>1134	Identifier	i
>1135	Condition	 
>1136	RelationalExpression	i < this -> clm
>1137	PtrMemberAccess	this -> clm
>1138	Identifier	clm
>1139	Identifier	this
>1140	Identifier	i
>1141	ForInit	 
>1142	IdentifierDeclStatement	int i = 0 ;
>1143	IdentifierDecl	i = 0
>1144	AssignmentExpr	i = 0
>1145	PrimaryExpression	0
>1146	Identifier	i
>1147	Identifier	i
>1148	IdentifierDeclType	int
>1149	IdentifierDeclStatement	 
>1150	IdentifierDecl	* m_ptr = this -> m
>1151	AssignmentExpr	* m_ptr = this -> m
>1152	PtrMemberAccess	this -> m
>1153	Identifier	m
>1154	Identifier	this
>1155	Identifier	m_ptr
>1156	Identifier	m_ptr
>1157	IdentifierDeclType	const double *
<9=17,10
<10=14,11
<11=13,12
<14=16,15
<17=51,45,39,31,25,19,18
<19=20
<20=22,21
<22=24,23
<25=26
<26=28,27
<28=30,29
<31=32
<32=36,33
<33=35,34
<36=38,37
<39=40
<40=42,41
<42=44,43
<45=46
<46=48,47
<48=50,49
<51=52
<52=54,53
<54=56,55
<71=73,72
<73=102,93,84,75,74
<75=76
<76=82,77
<77=78
<78=79
<79=81,80
<82=83
<84=85
<85=91,86
<86=87
<87=88
<88=90,89
<91=92
<93=94
<94=100,95
<95=96
<96=97
<97=99,98
<100=101
<102=103
<103=109,104
<104=105
<105=106
<106=108,107
<109=110
<120=129,128,121
<121=125,122
<122=124,123
<125=127,126
<129=143,137,131,130
<131=132
<132=134,133
<134=136,135
<137=138
<138=140,139
<140=142,141
<143=172,171,144
<144=145
<145=162,154,146
<146=147
<147=151,148
<148=150,149
<151=153,152
<154=155
<155=159,156
<156=158,157
<159=161,160
<162=163
<163=169,164
<164=165
<165=166
<166=168,167
<169=170
<172=173
<173=177,174
<174=176,175
<177=179,178
<191=194,193,192
<194=195
<195=196
<196=198,197
<205=208,207,206
<208=209
<209=210
<210=212,211
<219=222,221,220
<222=251,224,223
<224=243,237,234,225
<225=226
<226=227
<227=229,228
<229=233,230
<230=232,231
<234=236,235
<237=238
<238=242,239
<239=241,240
<243=244
<244=245
<245=250,249,246
<246=248,247
<251=252
<252=259,258,253
<253=257,254
<254=256,255
<272=278,277,273
<273=274
<274=276,275
<278=305,280,279
<280=281
<281=303,282
<282=299,295,283
<283=284
<284=292,285
<285=289,286
<286=288,287
<289=291,290
<292=294,293
<295=296
<296=298,297
<299=300
<300=302,301
<303=304
<305=313,306
<306=312,307
<307=308
<308=310,309
<310=311
<313=314
<314=322,315
<315=319,316
<316=318,317
<319=321,320
<322=326,323
<323=325,324
<326=328,327
<341=344,343,342
<344=345
<345=346
<346=348,347
<355=364,363,356
<356=360,357
<357=359,358
<360=362,361
<364=531,522,494,490,480,471,464,455,449,366,365
<366=445,441,438,367
<367=372,368
<368=369
<369=371,370
<372=434,430,427,373
<373=419,415,384,378,374
<374=375
<375=377,376
<378=379
<379=381,380
<381=383,382
<384=411,405,402,385
<385=390,386
<386=387
<387=389,388
<390=391
<391=401,392
<392=396,393
<393=395,394
<396=400,397
<397=399,398
<402=404,403
<405=406
<406=410,407
<407=409,408
<411=412
<412=414,413
<415=416
<416=418,417
<419=420
<420=426,421
<421=423,422
<423=425,424
<427=429,428
<430=431
<431=433,432
<434=435
<435=437,436
<438=440,439
<441=442
<442=444,443
<445=446
<446=448,447
<449=450
<450=454,451
<451=453,452
<455=456
<456=463,462,457
<457=461,458
<458=460,459
<464=468,465
<465=467,466
<468=470,469
<471=472
<472=479,478,473
<473=477,474
<474=476,475
<480=487,484,481
<481=483,482
<484=486,485
<487=489,488
<490=491
<491=493,492
<494=502,495
<495=501,496
<496=497
<497=499,498
<499=500
<502=503
<503=515,504
<504=510,505
<505=509,506
<506=508,507
<510=514,511
<511=513,512
<515=519,516
<516=518,517
<519=521,520
<522=523
<523=530,529,524
<524=528,525
<525=527,526
<531=532
<532=539,538,533
<533=537,534
<534=536,535
<571=574,573,572
<574=1046,1037,1028,1019,1009,999,989,957,932,928,669,577,575
<575=576
<577=661,657,654,578
<578=632,624,579
<579=616,612,609,580
<580=601,595,587,581
<581=582
<582=584,583
<584=586,585
<587=588
<588=592,589
<589=591,590
<592=594,593
<595=596
<596=600,597
<597=599,598
<601=602
<602=608,603
<603=607,604
<604=606,605
<609=611,610
<612=613
<613=615,614
<616=617
<617=618
<618=623,622,619
<619=621,620
<624=625
<625=629,626
<626=628,627
<629=631,630
<632=650,646,643,633
<633=634
<634=637,635
<635=636
<637=638
<638=640,639
<640=642,641
<643=645,644
<646=647
<647=649,648
<650=651
<651=653,652
<654=656,655
<657=658
<658=660,659
<661=662
<662=663
<663=668,667,664
<664=666,665
<669=920,916,913,670
<670=905,901,857,849,843,835,829,821,788,782,757,749,671
<671=741,737,734,672
<672=673
<673=730,674
<674=722,716,687,675
<675=676
<676=684,677
<677=681,678
<678=680,679
<681=683,682
<684=686,685
<687=712,708,705,688
<688=689
<689=690
<690=702,691
<691=697,692
<692=696,693
<693=695,694
<697=701,698
<698=700,699
<702=704,703
<705=707,706
<708=709
<709=711,710
<712=713
<713=715,714
<716=717
<717=721,718
<718=720,719
<722=723
<723=729,724
<724=728,725
<725=727,726
<730=731
<731=733,732
<734=736,735
<737=738
<738=740,739
<741=742
<742=743
<743=748,747,744
<744=746,745
<749=750
<750=754,751
<751=753,752
<754=756,755
<757=778,774,771,758
<758=759
<759=760
<760=768,761
<761=763,762
<763=767,764
<764=766,765
<768=770,769
<771=773,772
<774=775
<775=777,776
<778=779
<779=781,780
<782=783
<783=787,784
<784=786,785
<788=817,813,810,789
<789=804,796,790
<790=791
<791=793,792
<793=795,794
<796=797
<797=801,798
<798=800,799
<801=803,802
<804=805
<805=809,806
<806=808,807
<810=812,811
<813=814
<814=816,815
<817=818
<818=820,819
<821=822
<822=828,823
<823=827,824
<824=826,825
<829=830
<830=832,831
<832=834,833
<835=836
<836=840,837
<837=839,838
<840=842,841
<843=844
<844=848,845
<845=847,846
<849=853,850
<850=851
<851=852
<853=854
<854=856,855
<857=893,889,886,858
<858=859
<859=869,860
<860=865,861
<861=862
<862=864,863
<865=866
<866=868,867
<869=870
<870=885,871
<871=884,872
<872=882,873
<873=874
<874=875
<875=881,876
<876=878,877
<878=880,879
<882=883
<886=888,887
<889=890
<890=892,891
<893=894
<894=895
<895=900,899,896
<896=898,897
<901=902
<902=904,903
<905=906
<906=912,907
<907=911,908
<908=910,909
<913=915,914
<916=917
<917=919,918
<920=921
<921=922
<922=927,926,923
<923=925,924
<928=929
<929=931,930
<932=949,945,942,933
<933=934
<934=935
<935=937,936
<937=941,938
<938=940,939
<942=944,943
<945=946
<946=948,947
<949=950
<950=951
<951=956,955,952
<952=954,953
<957=987,958
<958=986,985,980,979,961,959
<959=960
<961=962
<962=972,963
<963=971,964
<964=970,965
<965=967,966
<967=969,968
<972=978,973
<973=975,974
<975=977,976
<980=981
<981=983,982
<983=984
<987=988
<989=996,993,990
<990=992,991
<993=995,994
<996=998,997
<999=1006,1003,1000
<1000=1002,1001
<1003=1005,1004
<1006=1008,1007
<1009=1016,1013,1010
<1010=1012,1011
<1013=1015,1014
<1016=1018,1017
<1019=1020
<1020=1027,1026,1021
<1021=1025,1022
<1022=1024,1023
<1028=1029
<1029=1036,1035,1030
<1030=1034,1031
<1031=1033,1032
<1037=1038
<1038=1045,1044,1039
<1039=1043,1040
<1040=1042,1041
<1046=1047
<1047=1050,1049,1048
<1087=1090,1089,1088
<1090=1149,1091
<1091=1141,1135,1132,1092
<1092=1100,1093
<1093=1094
<1094=1098,1095
<1095=1096
<1096=1097
<1098=1099
<1100=1124,1118,1115,1101
<1101=1102
<1102=1103
<1103=1113,1104
<1104=1111,1105
<1105=1106
<1106=1110,1107
<1107=1109,1108
<1111=1112
<1113=1114
<1115=1117,1116
<1118=1119
<1119=1123,1120
<1120=1122,1121
<1124=1125
<1125=1126
<1126=1131,1130,1127
<1127=1129,1128
<1132=1134,1133
<1135=1136
<1136=1140,1137
<1137=1139,1138
<1141=1142
<1142=1143
<1143=1148,1147,1144
<1144=1146,1145
<1149=1150
<1150=1157,1156,1151
<1151=1155,1152
<1152=1154,1153
