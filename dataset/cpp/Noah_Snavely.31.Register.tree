>7	FunctionDef	EstimateTransform (const std 
>8	ParameterList	const std 
>9	Parameter	 
>10	Identifier	Mout
>11	ParameterType	double *
>12	Parameter	 
>13	Identifier	RANSACthresh
>14	ParameterType	double
>15	Parameter	 
>16	Identifier	nRANSAC
>17	ParameterType	int
>18	Parameter	 
>19	Identifier	mm
>20	ParameterType	MotionModel
>21	Parameter	 
>22	Identifier	matches
>23	ParameterType	const std 
>24	Parameter	 
>25	Identifier	k2
>26	ParameterType	const std 
>27	Parameter	 
>28	Identifier	k1
>29	ParameterType	const std 
>30	ReturnType	std 
>31	CompoundStatement	 
>32	ReturnStatement	 
>33	Identifier	inliers
>34	ExpressionStatement	 
>35	Identifier	weight
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	ExpressionStatement	 
>40	Identifier	l_pts
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	ExpressionStatement	 
>45	Identifier	r_pts
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	ExpressionStatement	 
>50	Identifier	match_idxs
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	ExpressionStatement	 
>55	CallExpression	LeastSquaresFit ( k1 , k2 , matches , mm , inliers , Mout )
>56	ArgumentList	k1
>57	Argument	Mout
>58	Identifier	Mout
>59	Argument	inliers
>60	Identifier	inliers
>61	Argument	mm
>62	Identifier	mm
>63	Argument	matches
>64	Identifier	matches
>65	Argument	k2
>66	Identifier	k2
>67	Argument	k1
>68	Identifier	k1
>69	Callee	LeastSquaresFit
>70	Identifier	LeastSquaresFit
>71	ExpressionStatement	 
>72	CallExpression	memcpy ( Mout , Mbest , 9 * sizeof ( double ) )
>73	ArgumentList	Mout
>74	Argument	9 * sizeof ( double )
>75	MultiplicativeExpression	9 * sizeof ( double )
>76	SizeofExpr	sizeof ( double )
>77	SizeofOperand	double
>78	Sizeof	sizeof
>79	PrimaryExpression	9
>80	Argument	Mbest
>81	Identifier	Mbest
>82	Argument	Mout
>83	Identifier	Mout
>84	Callee	memcpy
>85	Identifier	memcpy
>86	ExpressionStatement	 
>87	CallExpression	CountInliers ( k1 , k2 , matches , Mbest , RANSACthresh , inliers )
>88	ArgumentList	k1
>89	Argument	inliers
>90	Identifier	inliers
>91	Argument	RANSACthresh
>92	Identifier	RANSACthresh
>93	Argument	Mbest
>94	Identifier	Mbest
>95	Argument	matches
>96	Identifier	matches
>97	Argument	k2
>98	Identifier	k2
>99	Argument	k1
>100	Identifier	k1
>101	Callee	CountInliers
>102	Identifier	CountInliers
>103	IdentifierDeclStatement	 
>104	IdentifierDecl	inliers
>105	Identifier	inliers
>106	IdentifierDeclType	std 
>107	ForStatement	for ( int round = 0 ; round < nRANSAC ; round ++ )
>108	CompoundStatement	 
>109	IfStatement	if ( num_inliers > max_inliers )
>110	CompoundStatement	 
>111	ExpressionStatement	 
>112	CallExpression	memcpy ( Mbest , Mcurr , 9 * sizeof ( double ) )
>113	ArgumentList	Mbest
>114	Argument	9 * sizeof ( double )
>115	MultiplicativeExpression	9 * sizeof ( double )
>116	SizeofExpr	sizeof ( double )
>117	SizeofOperand	double
>118	Sizeof	sizeof
>119	PrimaryExpression	9
>120	Argument	Mcurr
>121	Identifier	Mcurr
>122	Argument	Mbest
>123	Identifier	Mbest
>124	Callee	memcpy
>125	Identifier	memcpy
>126	ExpressionStatement	 
>127	AssignmentExpr	max_inliers = num_inliers
>128	Identifier	num_inliers
>129	Identifier	max_inliers
>130	Condition	 
>131	RelationalExpression	num_inliers > max_inliers
>132	Identifier	max_inliers
>133	Identifier	num_inliers
>134	IdentifierDeclStatement	 
>135	IdentifierDecl	num_inliers = CountInliers ( k1 , k2 , matches , Mcurr , RANSACthresh , inliers )
>136	AssignmentExpr	num_inliers = CountInliers ( k1 , k2 , matches , Mcurr , RANSACthresh , inliers )
>137	CallExpression	CountInliers ( k1 , k2 , matches , Mcurr , RANSACthresh , inliers )
>138	ArgumentList	k1
>139	Argument	inliers
>140	Identifier	inliers
>141	Argument	RANSACthresh
>142	Identifier	RANSACthresh
>143	Argument	Mcurr
>144	Identifier	Mcurr
>145	Argument	matches
>146	Identifier	matches
>147	Argument	k2
>148	Identifier	k2
>149	Argument	k1
>150	Identifier	k1
>151	Callee	CountInliers
>152	Identifier	CountInliers
>153	Identifier	num_inliers
>154	Identifier	num_inliers
>155	IdentifierDeclType	int
>156	IdentifierDeclStatement	 
>157	IdentifierDecl	inliers
>158	Identifier	inliers
>159	IdentifierDeclType	std 
>160	SwitchStatement	switch ( mm )
>161	CompoundStatement	 
>162	CompoundStatement	 
>163	BreakStatement	 
>164	ExpressionStatement	 
>165	CallExpression	align_homography ( min_matches , r_pts , l_pts , Mcurr , 0 )
>166	ArgumentList	min_matches
>167	Argument	0
>168	PrimaryExpression	0
>169	Argument	Mcurr
>170	Identifier	Mcurr
>171	Argument	l_pts
>172	Identifier	l_pts
>173	Argument	r_pts
>174	Identifier	r_pts
>175	Argument	min_matches
>176	Identifier	min_matches
>177	Callee	align_homography
>178	Identifier	align_homography
>179	Label	 
>180	Identifier	MotionHomography
>181	CompoundStatement	 
>182	BreakStatement	 
>183	ExpressionStatement	 
>184	CallExpression	memcpy ( Mcurr , Tout , 9 * sizeof ( double ) )
>185	ArgumentList	Mcurr
>186	Argument	9 * sizeof ( double )
>187	MultiplicativeExpression	9 * sizeof ( double )
>188	SizeofExpr	sizeof ( double )
>189	SizeofOperand	double
>190	Sizeof	sizeof
>191	PrimaryExpression	9
>192	Argument	Tout
>193	Identifier	Tout
>194	Argument	Mcurr
>195	Identifier	Mcurr
>196	Callee	memcpy
>197	Identifier	memcpy
>198	ExpressionStatement	 
>199	CallExpression	align_horn ( min_matches , r_pts , l_pts , R , T , Tout , & scale , weight )
>200	ArgumentList	min_matches
>201	Argument	weight
>202	Identifier	weight
>203	Argument	& scale
>204	UnaryOp	& scale
>205	Identifier	scale
>206	UnaryOperator	&
>207	Argument	Tout
>208	Identifier	Tout
>209	Argument	T
>210	Identifier	T
>211	Argument	R
>212	Identifier	R
>213	Argument	l_pts
>214	Identifier	l_pts
>215	Argument	r_pts
>216	Identifier	r_pts
>217	Argument	min_matches
>218	Identifier	min_matches
>219	Callee	align_horn
>220	Identifier	align_horn
>221	IdentifierDeclStatement	 
>222	IdentifierDecl	scale
>223	Identifier	scale
>224	IdentifierDeclType	double
>225	IdentifierDecl	Tout [ 9 ]
>226	PrimaryExpression	9
>227	Identifier	Tout
>228	IdentifierDeclType	double [ 9 ]
>229	IdentifierDecl	T [ 9 ]
>230	PrimaryExpression	9
>231	Identifier	T
>232	IdentifierDeclType	double [ 9 ]
>233	IdentifierDecl	R [ 9 ]
>234	PrimaryExpression	9
>235	Identifier	R
>236	IdentifierDeclType	double [ 9 ]
>237	Label	 
>238	Identifier	MotionRigid
>239	Condition	 
>240	Identifier	mm
>241	IdentifierDeclStatement	 
>242	IdentifierDecl	Mcurr [ 9 ]
>243	PrimaryExpression	9
>244	Identifier	Mcurr
>245	IdentifierDeclType	double [ 9 ]
>246	ForStatement	for ( int i = 0 ; i < min_matches ; i ++ )
>247	CompoundStatement	 
>248	ExpressionStatement	 
>249	AssignmentExpr	weight [ i ] = 1.0
>250	PrimaryExpression	1.0
>251	ArrayIndexing	weight [ i ]
>252	Identifier	i
>253	Identifier	weight
>254	ExpressionStatement	 
>255	AssignmentExpr	Vz ( r_pts [ i ] ) = 1.0
>256	PrimaryExpression	1.0
>257	CallExpression	Vz ( r_pts [ i ] )
>258	ArgumentList	r_pts [ i ]
>259	Argument	r_pts [ i ]
>260	ArrayIndexing	r_pts [ i ]
>261	Identifier	i
>262	Identifier	r_pts
>263	Callee	Vz
>264	Identifier	Vz
>265	ExpressionStatement	 
>266	AssignmentExpr	Vy ( r_pts [ i ] ) = k2 [ idx2 ] . m_y
>267	MemberAccess	k2 [ idx2 ] . m_y
>268	Identifier	m_y
>269	ArrayIndexing	k2 [ idx2 ]
>270	Identifier	idx2
>271	Identifier	k2
>272	CallExpression	Vy ( r_pts [ i ] )
>273	ArgumentList	r_pts [ i ]
>274	Argument	r_pts [ i ]
>275	ArrayIndexing	r_pts [ i ]
>276	Identifier	i
>277	Identifier	r_pts
>278	Callee	Vy
>279	Identifier	Vy
>280	ExpressionStatement	 
>281	AssignmentExpr	Vx ( r_pts [ i ] ) = k2 [ idx2 ] . m_x
>282	MemberAccess	k2 [ idx2 ] . m_x
>283	Identifier	m_x
>284	ArrayIndexing	k2 [ idx2 ]
>285	Identifier	idx2
>286	Identifier	k2
>287	CallExpression	Vx ( r_pts [ i ] )
>288	ArgumentList	r_pts [ i ]
>289	Argument	r_pts [ i ]
>290	ArrayIndexing	r_pts [ i ]
>291	Identifier	i
>292	Identifier	r_pts
>293	Callee	Vx
>294	Identifier	Vx
>295	ExpressionStatement	 
>296	AssignmentExpr	Vz ( l_pts [ i ] ) = 1.0
>297	PrimaryExpression	1.0
>298	CallExpression	Vz ( l_pts [ i ] )
>299	ArgumentList	l_pts [ i ]
>300	Argument	l_pts [ i ]
>301	ArrayIndexing	l_pts [ i ]
>302	Identifier	i
>303	Identifier	l_pts
>304	Callee	Vz
>305	Identifier	Vz
>306	ExpressionStatement	 
>307	AssignmentExpr	Vy ( l_pts [ i ] ) = k1 [ idx1 ] . m_y
>308	MemberAccess	k1 [ idx1 ] . m_y
>309	Identifier	m_y
>310	ArrayIndexing	k1 [ idx1 ]
>311	Identifier	idx1
>312	Identifier	k1
>313	CallExpression	Vy ( l_pts [ i ] )
>314	ArgumentList	l_pts [ i ]
>315	Argument	l_pts [ i ]
>316	ArrayIndexing	l_pts [ i ]
>317	Identifier	i
>318	Identifier	l_pts
>319	Callee	Vy
>320	Identifier	Vy
>321	ExpressionStatement	 
>322	AssignmentExpr	Vx ( l_pts [ i ] ) = k1 [ idx1 ] . m_x
>323	MemberAccess	k1 [ idx1 ] . m_x
>324	Identifier	m_x
>325	ArrayIndexing	k1 [ idx1 ]
>326	Identifier	idx1
>327	Identifier	k1
>328	CallExpression	Vx ( l_pts [ i ] )
>329	ArgumentList	l_pts [ i ]
>330	Argument	l_pts [ i ]
>331	ArrayIndexing	l_pts [ i ]
>332	Identifier	i
>333	Identifier	l_pts
>334	Callee	Vx
>335	Identifier	Vx
>336	IdentifierDeclStatement	 
>337	IdentifierDecl	idx2 = matches [ match_idxs [ i ] ] . m_idx2
>338	AssignmentExpr	idx2 = matches [ match_idxs [ i ] ] . m_idx2
>339	MemberAccess	matches [ match_idxs [ i ] ] . m_idx2
>340	Identifier	m_idx2
>341	ArrayIndexing	matches [ match_idxs [ i ] ]
>342	ArrayIndexing	match_idxs [ i ]
>343	Identifier	i
>344	Identifier	match_idxs
>345	Identifier	matches
>346	Identifier	idx2
>347	Identifier	idx2
>348	IdentifierDeclType	int
>349	IdentifierDeclStatement	 
>350	IdentifierDecl	idx1 = matches [ match_idxs [ i ] ] . m_idx1
>351	AssignmentExpr	idx1 = matches [ match_idxs [ i ] ] . m_idx1
>352	MemberAccess	matches [ match_idxs [ i ] ] . m_idx1
>353	Identifier	m_idx1
>354	ArrayIndexing	matches [ match_idxs [ i ] ]
>355	ArrayIndexing	match_idxs [ i ]
>356	Identifier	i
>357	Identifier	match_idxs
>358	Identifier	matches
>359	Identifier	idx1
>360	Identifier	idx1
>361	IdentifierDeclType	int
>362	IncDecOp	 
>363	IncDec	++
>364	Identifier	i
>365	Condition	 
>366	RelationalExpression	i < min_matches
>367	Identifier	min_matches
>368	Identifier	i
>369	ForInit	 
>370	IdentifierDeclStatement	int i = 0 ;
>371	IdentifierDecl	i = 0
>372	AssignmentExpr	i = 0
>373	PrimaryExpression	0
>374	Identifier	i
>375	Identifier	i
>376	IdentifierDeclType	int
>377	ForStatement	for ( int i = 0 ; i < min_matches ; i ++ )
>378	CompoundStatement	 
>379	ExpressionStatement	 
>380	AssignmentExpr	match_idxs [ i ] = idx
>381	Identifier	idx
>382	ArrayIndexing	match_idxs [ i ]
>383	Identifier	i
>384	Identifier	match_idxs
>385	DoStatement	do
>386	Condition	 
>387	UnaryOp	! found
>388	Identifier	found
>389	UnaryOperator	!
>390	CompoundStatement	 
>391	ForStatement	for ( int j = 0 ; j < i ; j ++ )
>392	CompoundStatement	 
>393	IfStatement	if ( match_idxs [ j ] == idx )
>394	CompoundStatement	 
>395	BreakStatement	 
>396	ExpressionStatement	 
>397	AssignmentExpr	found = false
>398	Identifier	false
>399	Identifier	found
>400	Condition	 
>401	EqualityExpression	match_idxs [ j ] == idx
>402	Identifier	idx
>403	ArrayIndexing	match_idxs [ j ]
>404	Identifier	j
>405	Identifier	match_idxs
>406	IncDecOp	 
>407	IncDec	++
>408	Identifier	j
>409	Condition	 
>410	RelationalExpression	j < i
>411	Identifier	i
>412	Identifier	j
>413	ForInit	 
>414	IdentifierDeclStatement	int j = 0 ;
>415	IdentifierDecl	j = 0
>416	AssignmentExpr	j = 0
>417	PrimaryExpression	0
>418	Identifier	j
>419	Identifier	j
>420	IdentifierDeclType	int
>421	ExpressionStatement	 
>422	AssignmentExpr	idx = rand ( ) % num_matches
>423	MultiplicativeExpression	rand ( ) % num_matches
>424	Identifier	num_matches
>425	CallExpression	rand ( )
>426	ArgumentList	 
>427	Callee	rand
>428	Identifier	rand
>429	Identifier	idx
>430	ExpressionStatement	 
>431	AssignmentExpr	found = true
>432	Identifier	true
>433	Identifier	found
>434	IdentifierDeclStatement	 
>435	IdentifierDecl	idx
>436	Identifier	idx
>437	IdentifierDeclType	int
>438	IdentifierDeclStatement	 
>439	IdentifierDecl	found
>440	Identifier	found
>441	IdentifierDeclType	bool
>442	IncDecOp	 
>443	IncDec	++
>444	Identifier	i
>445	Condition	 
>446	RelationalExpression	i < min_matches
>447	Identifier	min_matches
>448	Identifier	i
>449	ForInit	 
>450	IdentifierDeclStatement	int i = 0 ;
>451	IdentifierDecl	i = 0
>452	AssignmentExpr	i = 0
>453	PrimaryExpression	0
>454	Identifier	i
>455	Identifier	i
>456	IdentifierDeclType	int
>457	IncDecOp	 
>458	IncDec	++
>459	Identifier	round
>460	Condition	 
>461	RelationalExpression	round < nRANSAC
>462	Identifier	nRANSAC
>463	Identifier	round
>464	ForInit	 
>465	IdentifierDeclStatement	int round = 0 ;
>466	IdentifierDecl	round = 0
>467	AssignmentExpr	round = 0
>468	PrimaryExpression	0
>469	Identifier	round
>470	Identifier	round
>471	IdentifierDeclType	int
>472	IdentifierDeclStatement	 
>473	IdentifierDecl	* weight = new double [ min_matches ]
>474	AssignmentExpr	* weight = new double [ min_matches ]
>475	Identifier	min_matches
>476	Identifier	min_matches
>477	Identifier	weight
>478	IdentifierDeclType	double *
>479	IdentifierDeclStatement	 
>480	IdentifierDecl	* l_pts = new v3_t [ min_matches ]
>481	AssignmentExpr	* l_pts = new v3_t [ min_matches ]
>482	Identifier	min_matches
>483	Identifier	min_matches
>484	Identifier	l_pts
>485	IdentifierDeclType	v3_t *
>486	IdentifierDeclStatement	 
>487	IdentifierDecl	* r_pts = new v3_t [ min_matches ]
>488	AssignmentExpr	* r_pts = new v3_t [ min_matches ]
>489	Identifier	min_matches
>490	Identifier	min_matches
>491	Identifier	r_pts
>492	IdentifierDeclType	v3_t *
>493	IfStatement	if ( num_matches < min_matches )
>494	CompoundStatement	 
>495	ReturnStatement	 
>496	Identifier	empty
>497	ExpressionStatement	 
>498	CallExpression	printf ( \"Cannot estimate rigid transform\n\" )
>499	ArgumentList	\"Cannot estimate rigid transform\n\"
>500	Argument	\"Cannot estimate rigid transform\n\"
>501	PrimaryExpression	\"Cannot estimate rigid transform\n\"
>502	Callee	printf
>503	Identifier	printf
>504	IdentifierDeclStatement	 
>505	IdentifierDecl	empty
>506	Identifier	empty
>507	IdentifierDeclType	std 
>508	Condition	 
>509	RelationalExpression	num_matches < min_matches
>510	Identifier	min_matches
>511	Identifier	num_matches
>512	IdentifierDeclStatement	 
>513	IdentifierDecl	Mbest [ 9 ]
>514	PrimaryExpression	9
>515	Identifier	Mbest
>516	IdentifierDeclType	double [ 9 ]
>517	IdentifierDeclStatement	 
>518	IdentifierDecl	max_inliers = 0
>519	AssignmentExpr	max_inliers = 0
>520	PrimaryExpression	0
>521	Identifier	max_inliers
>522	Identifier	max_inliers
>523	IdentifierDeclType	int
>524	IdentifierDeclStatement	 
>525	IdentifierDecl	num_matches = ( int ) matches . size ( )
>526	AssignmentExpr	num_matches = ( int ) matches . size ( )
>527	CastExpression	( int ) matches . size ( )
>528	CallExpression	matches . size ( )
>529	ArgumentList	 
>530	Callee	matches . size
>531	MemberAccess	matches . size
>532	Identifier	size
>533	Identifier	matches
>534	CastTarget	int
>535	Identifier	num_matches
>536	Identifier	num_matches
>537	IdentifierDeclType	int
>538	IdentifierDeclStatement	 
>539	IdentifierDecl	* match_idxs = new int [ min_matches ]
>540	AssignmentExpr	* match_idxs = new int [ min_matches ]
>541	Identifier	min_matches
>542	Identifier	min_matches
>543	Identifier	match_idxs
>544	IdentifierDeclType	int *
>545	SwitchStatement	switch ( mm )
>546	CompoundStatement	 
>547	BreakStatement	 
>548	ExpressionStatement	 
>549	AssignmentExpr	min_matches = 4
>550	PrimaryExpression	4
>551	Identifier	min_matches
>552	Label	 
>553	Identifier	MotionHomography
>554	BreakStatement	 
>555	ExpressionStatement	 
>556	AssignmentExpr	min_matches = 3
>557	PrimaryExpression	3
>558	Identifier	min_matches
>559	Label	 
>560	Identifier	MotionRigid
>561	Condition	 
>562	Identifier	mm
>563	IdentifierDeclStatement	 
>564	IdentifierDecl	min_matches = - 1
>565	AssignmentExpr	min_matches = - 1
>566	UnaryOp	- 1
>567	PrimaryExpression	1
>568	UnaryOperator	-
>569	Identifier	min_matches
>570	Identifier	min_matches
>571	IdentifierDeclType	int
>633	FunctionDef	CountInliers (const std 
>634	ParameterList	const std 
>635	Parameter	 
>636	Identifier	inliers
>637	ParameterType	std 
>638	Parameter	 
>639	Identifier	thresh
>640	ParameterType	double
>641	Parameter	 
>642	Identifier	M
>643	ParameterType	double *
>644	Parameter	 
>645	Identifier	matches
>646	ParameterType	std 
>647	Parameter	 
>648	Identifier	k2
>649	ParameterType	const std 
>650	Parameter	 
>651	Identifier	k1
>652	ParameterType	const std 
>653	ReturnType	static int
>654	CompoundStatement	 
>655	ReturnStatement	 
>656	Identifier	count
>657	ForStatement	for ( unsigned int i = 0 ; i < matches . size ( ) ; i ++ )
>658	CompoundStatement	 
>659	IfStatement	if ( dist <= thresh )
>660	CompoundStatement	 
>661	ExpressionStatement	 
>662	CallExpression	inliers . push_back ( i )
>663	ArgumentList	i
>664	Argument	i
>665	Identifier	i
>666	Callee	inliers . push_back
>667	MemberAccess	inliers . push_back
>668	Identifier	push_back
>669	Identifier	inliers
>670	ExpressionStatement	 
>671	IncDecOp	count ++
>672	IncDec	++
>673	Identifier	count
>674	Condition	 
>675	RelationalExpression	dist <= thresh
>676	Identifier	thresh
>677	Identifier	dist
>678	IdentifierDeclStatement	 
>679	IdentifierDecl	dist = sqrt ( dx * dx + dy * dy )
>680	AssignmentExpr	dist = sqrt ( dx * dx + dy * dy )
>681	CallExpression	sqrt ( dx * dx + dy * dy )
>682	ArgumentList	dx * dx + dy * dy
>683	Argument	dx * dx + dy * dy
>684	AdditiveExpression	dx * dx + dy * dy
>685	MultiplicativeExpression	dy * dy
>686	Identifier	dy
>687	Identifier	dy
>688	MultiplicativeExpression	dx * dx
>689	Identifier	dx
>690	Identifier	dx
>691	Callee	sqrt
>692	Identifier	sqrt
>693	Identifier	dist
>694	Identifier	dist
>695	IdentifierDeclType	double
>696	IdentifierDeclStatement	 
>697	IdentifierDecl	dy = qy - k2 [ matches [ i ] . m_idx2 ] . m_y
>698	AssignmentExpr	dy = qy - k2 [ matches [ i ] . m_idx2 ] . m_y
>699	AdditiveExpression	qy - k2 [ matches [ i ] . m_idx2 ] . m_y
>700	MemberAccess	k2 [ matches [ i ] . m_idx2 ] . m_y
>701	Identifier	m_y
>702	ArrayIndexing	k2 [ matches [ i ] . m_idx2 ]
>703	MemberAccess	matches [ i ] . m_idx2
>704	Identifier	m_idx2
>705	ArrayIndexing	matches [ i ]
>706	Identifier	i
>707	Identifier	matches
>708	Identifier	k2
>709	Identifier	qy
>710	Identifier	dy
>711	Identifier	dy
>712	IdentifierDeclType	double
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	dx = qx - k2 [ matches [ i ] . m_idx2 ] . m_x
>715	AssignmentExpr	dx = qx - k2 [ matches [ i ] . m_idx2 ] . m_x
>716	AdditiveExpression	qx - k2 [ matches [ i ] . m_idx2 ] . m_x
>717	MemberAccess	k2 [ matches [ i ] . m_idx2 ] . m_x
>718	Identifier	m_x
>719	ArrayIndexing	k2 [ matches [ i ] . m_idx2 ]
>720	MemberAccess	matches [ i ] . m_idx2
>721	Identifier	m_idx2
>722	ArrayIndexing	matches [ i ]
>723	Identifier	i
>724	Identifier	matches
>725	Identifier	k2
>726	Identifier	qx
>727	Identifier	dx
>728	Identifier	dx
>729	IdentifierDeclType	double
>730	IdentifierDeclStatement	 
>731	IdentifierDecl	qy = q [ 1 ] / q [ 2 ]
>732	AssignmentExpr	qy = q [ 1 ] / q [ 2 ]
>733	MultiplicativeExpression	q [ 1 ] / q [ 2 ]
>734	ArrayIndexing	q [ 2 ]
>735	PrimaryExpression	2
>736	Identifier	q
>737	ArrayIndexing	q [ 1 ]
>738	PrimaryExpression	1
>739	Identifier	q
>740	Identifier	qy
>741	Identifier	qy
>742	IdentifierDeclType	double
>743	IdentifierDeclStatement	 
>744	IdentifierDecl	qx = q [ 0 ] / q [ 2 ]
>745	AssignmentExpr	qx = q [ 0 ] / q [ 2 ]
>746	MultiplicativeExpression	q [ 0 ] / q [ 2 ]
>747	ArrayIndexing	q [ 2 ]
>748	PrimaryExpression	2
>749	Identifier	q
>750	ArrayIndexing	q [ 0 ]
>751	PrimaryExpression	0
>752	Identifier	q
>753	Identifier	qx
>754	Identifier	qx
>755	IdentifierDeclType	double
>756	ExpressionStatement	 
>757	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , M , p , q )
>758	ArgumentList	3
>759	Argument	q
>760	Identifier	q
>761	Argument	p
>762	Identifier	p
>763	Argument	M
>764	Identifier	M
>765	Argument	1
>766	PrimaryExpression	1
>767	Argument	3
>768	PrimaryExpression	3
>769	Argument	3
>770	PrimaryExpression	3
>771	Argument	3
>772	PrimaryExpression	3
>773	Callee	matrix_product
>774	Identifier	matrix_product
>775	IdentifierDeclStatement	 
>776	IdentifierDecl	q [ 3 ]
>777	PrimaryExpression	3
>778	Identifier	q
>779	IdentifierDeclType	double [ 3 ]
>780	ExpressionStatement	 
>781	AssignmentExpr	p [ 2 ] = 1.0
>782	PrimaryExpression	1.0
>783	ArrayIndexing	p [ 2 ]
>784	PrimaryExpression	2
>785	Identifier	p
>786	ExpressionStatement	 
>787	AssignmentExpr	p [ 1 ] = k1 [ matches [ i ] . m_idx1 ] . m_y
>788	MemberAccess	k1 [ matches [ i ] . m_idx1 ] . m_y
>789	Identifier	m_y
>790	ArrayIndexing	k1 [ matches [ i ] . m_idx1 ]
>791	MemberAccess	matches [ i ] . m_idx1
>792	Identifier	m_idx1
>793	ArrayIndexing	matches [ i ]
>794	Identifier	i
>795	Identifier	matches
>796	Identifier	k1
>797	ArrayIndexing	p [ 1 ]
>798	PrimaryExpression	1
>799	Identifier	p
>800	ExpressionStatement	 
>801	AssignmentExpr	p [ 0 ] = k1 [ matches [ i ] . m_idx1 ] . m_x
>802	MemberAccess	k1 [ matches [ i ] . m_idx1 ] . m_x
>803	Identifier	m_x
>804	ArrayIndexing	k1 [ matches [ i ] . m_idx1 ]
>805	MemberAccess	matches [ i ] . m_idx1
>806	Identifier	m_idx1
>807	ArrayIndexing	matches [ i ]
>808	Identifier	i
>809	Identifier	matches
>810	Identifier	k1
>811	ArrayIndexing	p [ 0 ]
>812	PrimaryExpression	0
>813	Identifier	p
>814	IdentifierDeclStatement	 
>815	IdentifierDecl	p [ 3 ]
>816	PrimaryExpression	3
>817	Identifier	p
>818	IdentifierDeclType	double [ 3 ]
>819	IncDecOp	 
>820	IncDec	++
>821	Identifier	i
>822	Condition	 
>823	RelationalExpression	i < matches . size ( )
>824	CallExpression	matches . size ( )
>825	ArgumentList	 
>826	Callee	matches . size
>827	MemberAccess	matches . size
>828	Identifier	size
>829	Identifier	matches
>830	Identifier	i
>831	ForInit	 
>832	IdentifierDeclStatement	unsigned int i = 0 ;
>833	IdentifierDecl	i = 0
>834	AssignmentExpr	i = 0
>835	PrimaryExpression	0
>836	Identifier	i
>837	Identifier	i
>838	IdentifierDeclType	unsigned int
>839	IdentifierDeclStatement	 
>840	IdentifierDecl	count = 0
>841	AssignmentExpr	count = 0
>842	PrimaryExpression	0
>843	Identifier	count
>844	Identifier	count
>845	IdentifierDeclType	int
>846	ExpressionStatement	 
>847	CallExpression	inliers . clear ( )
>848	ArgumentList	 
>849	Callee	inliers . clear
>850	MemberAccess	inliers . clear
>851	Identifier	clear
>852	Identifier	inliers
>889	FunctionDef	LeastSquaresFit (const std 
>890	ParameterList	const std 
>891	Parameter	 
>892	Identifier	M
>893	ParameterType	double *
>894	Parameter	 
>895	Identifier	inliers
>896	ParameterType	const std 
>897	Parameter	 
>898	Identifier	mm
>899	ParameterType	MotionModel
>900	Parameter	 
>901	Identifier	matches
>902	ParameterType	std 
>903	Parameter	 
>904	Identifier	k2
>905	ParameterType	const std 
>906	Parameter	 
>907	Identifier	k1
>908	ParameterType	const std 
>909	ReturnType	static int
>910	CompoundStatement	 
>911	ReturnStatement	 
>912	PrimaryExpression	0
>913	ExpressionStatement	 
>914	Identifier	weight
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	ExpressionStatement	 
>919	Identifier	l_pts
>920	Statement	 
>921	Statement	 
>922	Statement	 
>923	ExpressionStatement	 
>924	Identifier	r_pts
>925	Statement	 
>926	Statement	 
>927	Statement	 
>928	ExpressionStatement	 
>929	CallExpression	printf ( \"[LeastSquaresFit] Residual error (after) is %0.3e\n\" , error )
>930	ArgumentList	\"[LeastSquaresFit] Residual error (after) is %0.3e\n\"
>931	Argument	error
>932	Identifier	error
>933	Argument	\"[LeastSquaresFit] Residual error (after) is %0.3e\n\"
>934	PrimaryExpression	\"[LeastSquaresFit] Residual error (after) is %0.3e\n\"
>935	Callee	printf
>936	Identifier	printf
>937	ForStatement	for ( int i = 0 ; i < ( int ) inliers . size ( ) ; i ++ )
>938	CompoundStatement	 
>939	ExpressionStatement	 
>940	AssignmentExpr	error += dx * dx + dy * dy
>941	AdditiveExpression	dx * dx + dy * dy
>942	MultiplicativeExpression	dy * dy
>943	Identifier	dy
>944	Identifier	dy
>945	MultiplicativeExpression	dx * dx
>946	Identifier	dx
>947	Identifier	dx
>948	Identifier	error
>949	IdentifierDeclStatement	 
>950	IdentifierDecl	dy = rp [ 1 ] - r [ 1 ]
>951	AssignmentExpr	dy = rp [ 1 ] - r [ 1 ]
>952	AdditiveExpression	rp [ 1 ] - r [ 1 ]
>953	ArrayIndexing	r [ 1 ]
>954	PrimaryExpression	1
>955	Identifier	r
>956	ArrayIndexing	rp [ 1 ]
>957	PrimaryExpression	1
>958	Identifier	rp
>959	Identifier	dy
>960	Identifier	dy
>961	IdentifierDeclType	double
>962	IdentifierDeclStatement	 
>963	IdentifierDecl	dx = rp [ 0 ] - r [ 0 ]
>964	AssignmentExpr	dx = rp [ 0 ] - r [ 0 ]
>965	AdditiveExpression	rp [ 0 ] - r [ 0 ]
>966	ArrayIndexing	r [ 0 ]
>967	PrimaryExpression	0
>968	Identifier	r
>969	ArrayIndexing	rp [ 0 ]
>970	PrimaryExpression	0
>971	Identifier	rp
>972	Identifier	dx
>973	Identifier	dx
>974	IdentifierDeclType	double
>975	ExpressionStatement	 
>976	AssignmentExpr	rp [ 1 ] /= rp [ 2 ]
>977	ArrayIndexing	rp [ 2 ]
>978	PrimaryExpression	2
>979	Identifier	rp
>980	ArrayIndexing	rp [ 1 ]
>981	PrimaryExpression	1
>982	Identifier	rp
>983	ExpressionStatement	 
>984	AssignmentExpr	rp [ 0 ] /= rp [ 2 ]
>985	ArrayIndexing	rp [ 2 ]
>986	PrimaryExpression	2
>987	Identifier	rp
>988	ArrayIndexing	rp [ 0 ]
>989	PrimaryExpression	0
>990	Identifier	rp
>991	ExpressionStatement	 
>992	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , M , l , rp )
>993	ArgumentList	3
>994	Argument	rp
>995	Identifier	rp
>996	Argument	l
>997	Identifier	l
>998	Argument	M
>999	Identifier	M
>1000	Argument	1
>1001	PrimaryExpression	1
>1002	Argument	3
>1003	PrimaryExpression	3
>1004	Argument	3
>1005	PrimaryExpression	3
>1006	Argument	3
>1007	PrimaryExpression	3
>1008	Callee	matrix_product
>1009	Identifier	matrix_product
>1010	IdentifierDeclStatement	 
>1011	IdentifierDecl	rp [ 3 ]
>1012	PrimaryExpression	3
>1013	Identifier	rp
>1014	IdentifierDeclType	double [ 3 ]
>1015	ExpressionStatement	 
>1016	AssignmentExpr	r [ 2 ] = 1.0
>1017	PrimaryExpression	1.0
>1018	ArrayIndexing	r [ 2 ]
>1019	PrimaryExpression	2
>1020	Identifier	r
>1021	ExpressionStatement	 
>1022	AssignmentExpr	r [ 1 ] = k2 [ idx2 ] . m_y
>1023	MemberAccess	k2 [ idx2 ] . m_y
>1024	Identifier	m_y
>1025	ArrayIndexing	k2 [ idx2 ]
>1026	Identifier	idx2
>1027	Identifier	k2
>1028	ArrayIndexing	r [ 1 ]
>1029	PrimaryExpression	1
>1030	Identifier	r
>1031	ExpressionStatement	 
>1032	AssignmentExpr	r [ 0 ] = k2 [ idx2 ] . m_x
>1033	MemberAccess	k2 [ idx2 ] . m_x
>1034	Identifier	m_x
>1035	ArrayIndexing	k2 [ idx2 ]
>1036	Identifier	idx2
>1037	Identifier	k2
>1038	ArrayIndexing	r [ 0 ]
>1039	PrimaryExpression	0
>1040	Identifier	r
>1041	ExpressionStatement	 
>1042	AssignmentExpr	l [ 2 ] = 1.0
>1043	PrimaryExpression	1.0
>1044	ArrayIndexing	l [ 2 ]
>1045	PrimaryExpression	2
>1046	Identifier	l
>1047	ExpressionStatement	 
>1048	AssignmentExpr	l [ 1 ] = k1 [ idx1 ] . m_y
>1049	MemberAccess	k1 [ idx1 ] . m_y
>1050	Identifier	m_y
>1051	ArrayIndexing	k1 [ idx1 ]
>1052	Identifier	idx1
>1053	Identifier	k1
>1054	ArrayIndexing	l [ 1 ]
>1055	PrimaryExpression	1
>1056	Identifier	l
>1057	ExpressionStatement	 
>1058	AssignmentExpr	l [ 0 ] = k1 [ idx1 ] . m_x
>1059	MemberAccess	k1 [ idx1 ] . m_x
>1060	Identifier	m_x
>1061	ArrayIndexing	k1 [ idx1 ]
>1062	Identifier	idx1
>1063	Identifier	k1
>1064	ArrayIndexing	l [ 0 ]
>1065	PrimaryExpression	0
>1066	Identifier	l
>1067	IdentifierDeclStatement	 
>1068	IdentifierDecl	l [ 3 ]
>1069	PrimaryExpression	3
>1070	Identifier	l
>1071	IdentifierDeclType	double [ 3 ]
>1072	IdentifierDecl	r [ 3 ]
>1073	PrimaryExpression	3
>1074	Identifier	r
>1075	IdentifierDeclType	double [ 3 ]
>1076	IdentifierDeclStatement	 
>1077	IdentifierDecl	idx2 = matches [ inliers [ i ] ] . m_idx2
>1078	AssignmentExpr	idx2 = matches [ inliers [ i ] ] . m_idx2
>1079	MemberAccess	matches [ inliers [ i ] ] . m_idx2
>1080	Identifier	m_idx2
>1081	ArrayIndexing	matches [ inliers [ i ] ]
>1082	ArrayIndexing	inliers [ i ]
>1083	Identifier	i
>1084	Identifier	inliers
>1085	Identifier	matches
>1086	Identifier	idx2
>1087	Identifier	idx2
>1088	IdentifierDeclType	int
>1089	IdentifierDeclStatement	 
>1090	IdentifierDecl	idx1 = matches [ inliers [ i ] ] . m_idx1
>1091	AssignmentExpr	idx1 = matches [ inliers [ i ] ] . m_idx1
>1092	MemberAccess	matches [ inliers [ i ] ] . m_idx1
>1093	Identifier	m_idx1
>1094	ArrayIndexing	matches [ inliers [ i ] ]
>1095	ArrayIndexing	inliers [ i ]
>1096	Identifier	i
>1097	Identifier	inliers
>1098	Identifier	matches
>1099	Identifier	idx1
>1100	Identifier	idx1
>1101	IdentifierDeclType	int
>1102	IncDecOp	 
>1103	IncDec	++
>1104	Identifier	i
>1105	Condition	 
>1106	RelationalExpression	i < ( int ) inliers . size ( )
>1107	CastExpression	( int ) inliers . size ( )
>1108	CallExpression	inliers . size ( )
>1109	ArgumentList	 
>1110	Callee	inliers . size
>1111	MemberAccess	inliers . size
>1112	Identifier	size
>1113	Identifier	inliers
>1114	CastTarget	int
>1115	Identifier	i
>1116	ForInit	 
>1117	IdentifierDeclStatement	int i = 0 ;
>1118	IdentifierDecl	i = 0
>1119	AssignmentExpr	i = 0
>1120	PrimaryExpression	0
>1121	Identifier	i
>1122	Identifier	i
>1123	IdentifierDeclType	int
>1124	ExpressionStatement	 
>1125	AssignmentExpr	error = 0.0
>1126	PrimaryExpression	0.0
>1127	Identifier	error
>1128	SwitchStatement	switch ( mm )
>1129	CompoundStatement	 
>1130	CompoundStatement	 
>1131	BreakStatement	 
>1132	ExpressionStatement	 
>1133	CallExpression	align_homography ( ( int ) inliers . size ( ) , r_pts , l_pts , M , 1 )
>1134	ArgumentList	( int ) inliers . size ( )
>1135	Argument	1
>1136	PrimaryExpression	1
>1137	Argument	M
>1138	Identifier	M
>1139	Argument	l_pts
>1140	Identifier	l_pts
>1141	Argument	r_pts
>1142	Identifier	r_pts
>1143	Argument	( int ) inliers . size ( )
>1144	CastExpression	( int ) inliers . size ( )
>1145	CallExpression	inliers . size ( )
>1146	ArgumentList	 
>1147	Callee	inliers . size
>1148	MemberAccess	inliers . size
>1149	Identifier	size
>1150	Identifier	inliers
>1151	CastTarget	int
>1152	Callee	align_homography
>1153	Identifier	align_homography
>1154	Label	 
>1155	Identifier	MotionHomography
>1156	CompoundStatement	 
>1157	BreakStatement	 
>1158	ExpressionStatement	 
>1159	CallExpression	memcpy ( M , Tout , 9 * sizeof ( double ) )
>1160	ArgumentList	M
>1161	Argument	9 * sizeof ( double )
>1162	MultiplicativeExpression	9 * sizeof ( double )
>1163	SizeofExpr	sizeof ( double )
>1164	SizeofOperand	double
>1165	Sizeof	sizeof
>1166	PrimaryExpression	9
>1167	Argument	Tout
>1168	Identifier	Tout
>1169	Argument	M
>1170	Identifier	M
>1171	Callee	memcpy
>1172	Identifier	memcpy
>1173	ExpressionStatement	 
>1174	CallExpression	align_horn ( ( int ) inliers . size ( ) , r_pts , l_pts , R , T , Tout , & scale , weight )
>1175	ArgumentList	( int ) inliers . size ( )
>1176	Argument	weight
>1177	Identifier	weight
>1178	Argument	& scale
>1179	UnaryOp	& scale
>1180	Identifier	scale
>1181	UnaryOperator	&
>1182	Argument	Tout
>1183	Identifier	Tout
>1184	Argument	T
>1185	Identifier	T
>1186	Argument	R
>1187	Identifier	R
>1188	Argument	l_pts
>1189	Identifier	l_pts
>1190	Argument	r_pts
>1191	Identifier	r_pts
>1192	Argument	( int ) inliers . size ( )
>1193	CastExpression	( int ) inliers . size ( )
>1194	CallExpression	inliers . size ( )
>1195	ArgumentList	 
>1196	Callee	inliers . size
>1197	MemberAccess	inliers . size
>1198	Identifier	size
>1199	Identifier	inliers
>1200	CastTarget	int
>1201	Callee	align_horn
>1202	Identifier	align_horn
>1203	IdentifierDeclStatement	 
>1204	IdentifierDecl	scale
>1205	Identifier	scale
>1206	IdentifierDeclType	double
>1207	IdentifierDecl	Tout [ 9 ]
>1208	PrimaryExpression	9
>1209	Identifier	Tout
>1210	IdentifierDeclType	double [ 9 ]
>1211	IdentifierDecl	T [ 9 ]
>1212	PrimaryExpression	9
>1213	Identifier	T
>1214	IdentifierDeclType	double [ 9 ]
>1215	IdentifierDecl	R [ 9 ]
>1216	PrimaryExpression	9
>1217	Identifier	R
>1218	IdentifierDeclType	double [ 9 ]
>1219	Label	 
>1220	Identifier	MotionRigid
>1221	Condition	 
>1222	Identifier	mm
>1223	ForStatement	for ( int i = 0 ; i < ( int ) inliers . size ( ) ; i ++ )
>1224	CompoundStatement	 
>1225	ExpressionStatement	 
>1226	AssignmentExpr	weight [ i ] = 1.0
>1227	PrimaryExpression	1.0
>1228	ArrayIndexing	weight [ i ]
>1229	Identifier	i
>1230	Identifier	weight
>1231	ExpressionStatement	 
>1232	AssignmentExpr	Vz ( r_pts [ i ] ) = 1.0
>1233	PrimaryExpression	1.0
>1234	CallExpression	Vz ( r_pts [ i ] )
>1235	ArgumentList	r_pts [ i ]
>1236	Argument	r_pts [ i ]
>1237	ArrayIndexing	r_pts [ i ]
>1238	Identifier	i
>1239	Identifier	r_pts
>1240	Callee	Vz
>1241	Identifier	Vz
>1242	ExpressionStatement	 
>1243	AssignmentExpr	Vy ( r_pts [ i ] ) = k2 [ idx2 ] . m_y
>1244	MemberAccess	k2 [ idx2 ] . m_y
>1245	Identifier	m_y
>1246	ArrayIndexing	k2 [ idx2 ]
>1247	Identifier	idx2
>1248	Identifier	k2
>1249	CallExpression	Vy ( r_pts [ i ] )
>1250	ArgumentList	r_pts [ i ]
>1251	Argument	r_pts [ i ]
>1252	ArrayIndexing	r_pts [ i ]
>1253	Identifier	i
>1254	Identifier	r_pts
>1255	Callee	Vy
>1256	Identifier	Vy
>1257	ExpressionStatement	 
>1258	AssignmentExpr	Vx ( r_pts [ i ] ) = k2 [ idx2 ] . m_x
>1259	MemberAccess	k2 [ idx2 ] . m_x
>1260	Identifier	m_x
>1261	ArrayIndexing	k2 [ idx2 ]
>1262	Identifier	idx2
>1263	Identifier	k2
>1264	CallExpression	Vx ( r_pts [ i ] )
>1265	ArgumentList	r_pts [ i ]
>1266	Argument	r_pts [ i ]
>1267	ArrayIndexing	r_pts [ i ]
>1268	Identifier	i
>1269	Identifier	r_pts
>1270	Callee	Vx
>1271	Identifier	Vx
>1272	ExpressionStatement	 
>1273	AssignmentExpr	Vz ( l_pts [ i ] ) = 1.0
>1274	PrimaryExpression	1.0
>1275	CallExpression	Vz ( l_pts [ i ] )
>1276	ArgumentList	l_pts [ i ]
>1277	Argument	l_pts [ i ]
>1278	ArrayIndexing	l_pts [ i ]
>1279	Identifier	i
>1280	Identifier	l_pts
>1281	Callee	Vz
>1282	Identifier	Vz
>1283	ExpressionStatement	 
>1284	AssignmentExpr	Vy ( l_pts [ i ] ) = k1 [ idx1 ] . m_y
>1285	MemberAccess	k1 [ idx1 ] . m_y
>1286	Identifier	m_y
>1287	ArrayIndexing	k1 [ idx1 ]
>1288	Identifier	idx1
>1289	Identifier	k1
>1290	CallExpression	Vy ( l_pts [ i ] )
>1291	ArgumentList	l_pts [ i ]
>1292	Argument	l_pts [ i ]
>1293	ArrayIndexing	l_pts [ i ]
>1294	Identifier	i
>1295	Identifier	l_pts
>1296	Callee	Vy
>1297	Identifier	Vy
>1298	ExpressionStatement	 
>1299	AssignmentExpr	Vx ( l_pts [ i ] ) = k1 [ idx1 ] . m_x
>1300	MemberAccess	k1 [ idx1 ] . m_x
>1301	Identifier	m_x
>1302	ArrayIndexing	k1 [ idx1 ]
>1303	Identifier	idx1
>1304	Identifier	k1
>1305	CallExpression	Vx ( l_pts [ i ] )
>1306	ArgumentList	l_pts [ i ]
>1307	Argument	l_pts [ i ]
>1308	ArrayIndexing	l_pts [ i ]
>1309	Identifier	i
>1310	Identifier	l_pts
>1311	Callee	Vx
>1312	Identifier	Vx
>1313	IdentifierDeclStatement	 
>1314	IdentifierDecl	idx2 = matches [ inliers [ i ] ] . m_idx2
>1315	AssignmentExpr	idx2 = matches [ inliers [ i ] ] . m_idx2
>1316	MemberAccess	matches [ inliers [ i ] ] . m_idx2
>1317	Identifier	m_idx2
>1318	ArrayIndexing	matches [ inliers [ i ] ]
>1319	ArrayIndexing	inliers [ i ]
>1320	Identifier	i
>1321	Identifier	inliers
>1322	Identifier	matches
>1323	Identifier	idx2
>1324	Identifier	idx2
>1325	IdentifierDeclType	int
>1326	IdentifierDeclStatement	 
>1327	IdentifierDecl	idx1 = matches [ inliers [ i ] ] . m_idx1
>1328	AssignmentExpr	idx1 = matches [ inliers [ i ] ] . m_idx1
>1329	MemberAccess	matches [ inliers [ i ] ] . m_idx1
>1330	Identifier	m_idx1
>1331	ArrayIndexing	matches [ inliers [ i ] ]
>1332	ArrayIndexing	inliers [ i ]
>1333	Identifier	i
>1334	Identifier	inliers
>1335	Identifier	matches
>1336	Identifier	idx1
>1337	Identifier	idx1
>1338	IdentifierDeclType	int
>1339	IncDecOp	 
>1340	IncDec	++
>1341	Identifier	i
>1342	Condition	 
>1343	RelationalExpression	i < ( int ) inliers . size ( )
>1344	CastExpression	( int ) inliers . size ( )
>1345	CallExpression	inliers . size ( )
>1346	ArgumentList	 
>1347	Callee	inliers . size
>1348	MemberAccess	inliers . size
>1349	Identifier	size
>1350	Identifier	inliers
>1351	CastTarget	int
>1352	Identifier	i
>1353	ForInit	 
>1354	IdentifierDeclStatement	int i = 0 ;
>1355	IdentifierDecl	i = 0
>1356	AssignmentExpr	i = 0
>1357	PrimaryExpression	0
>1358	Identifier	i
>1359	Identifier	i
>1360	IdentifierDeclType	int
>1361	ExpressionStatement	 
>1362	CallExpression	printf ( \"[LeastSquaresFit] Residual error (before) is %0.3e\n\" , error )
>1363	ArgumentList	\"[LeastSquaresFit] Residual error (before) is %0.3e\n\"
>1364	Argument	error
>1365	Identifier	error
>1366	Argument	\"[LeastSquaresFit] Residual error (before) is %0.3e\n\"
>1367	PrimaryExpression	\"[LeastSquaresFit] Residual error (before) is %0.3e\n\"
>1368	Callee	printf
>1369	Identifier	printf
>1370	ForStatement	for ( int i = 0 ; i < ( int ) inliers . size ( ) ; i ++ )
>1371	CompoundStatement	 
>1372	ExpressionStatement	 
>1373	AssignmentExpr	error += dx * dx + dy * dy
>1374	AdditiveExpression	dx * dx + dy * dy
>1375	MultiplicativeExpression	dy * dy
>1376	Identifier	dy
>1377	Identifier	dy
>1378	MultiplicativeExpression	dx * dx
>1379	Identifier	dx
>1380	Identifier	dx
>1381	Identifier	error
>1382	IdentifierDeclStatement	 
>1383	IdentifierDecl	dy = rp [ 1 ] - r [ 1 ]
>1384	AssignmentExpr	dy = rp [ 1 ] - r [ 1 ]
>1385	AdditiveExpression	rp [ 1 ] - r [ 1 ]
>1386	ArrayIndexing	r [ 1 ]
>1387	PrimaryExpression	1
>1388	Identifier	r
>1389	ArrayIndexing	rp [ 1 ]
>1390	PrimaryExpression	1
>1391	Identifier	rp
>1392	Identifier	dy
>1393	Identifier	dy
>1394	IdentifierDeclType	double
>1395	IdentifierDeclStatement	 
>1396	IdentifierDecl	dx = rp [ 0 ] - r [ 0 ]
>1397	AssignmentExpr	dx = rp [ 0 ] - r [ 0 ]
>1398	AdditiveExpression	rp [ 0 ] - r [ 0 ]
>1399	ArrayIndexing	r [ 0 ]
>1400	PrimaryExpression	0
>1401	Identifier	r
>1402	ArrayIndexing	rp [ 0 ]
>1403	PrimaryExpression	0
>1404	Identifier	rp
>1405	Identifier	dx
>1406	Identifier	dx
>1407	IdentifierDeclType	double
>1408	ExpressionStatement	 
>1409	AssignmentExpr	rp [ 1 ] /= rp [ 2 ]
>1410	ArrayIndexing	rp [ 2 ]
>1411	PrimaryExpression	2
>1412	Identifier	rp
>1413	ArrayIndexing	rp [ 1 ]
>1414	PrimaryExpression	1
>1415	Identifier	rp
>1416	ExpressionStatement	 
>1417	AssignmentExpr	rp [ 0 ] /= rp [ 2 ]
>1418	ArrayIndexing	rp [ 2 ]
>1419	PrimaryExpression	2
>1420	Identifier	rp
>1421	ArrayIndexing	rp [ 0 ]
>1422	PrimaryExpression	0
>1423	Identifier	rp
>1424	ExpressionStatement	 
>1425	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , M , l , rp )
>1426	ArgumentList	3
>1427	Argument	rp
>1428	Identifier	rp
>1429	Argument	l
>1430	Identifier	l
>1431	Argument	M
>1432	Identifier	M
>1433	Argument	1
>1434	PrimaryExpression	1
>1435	Argument	3
>1436	PrimaryExpression	3
>1437	Argument	3
>1438	PrimaryExpression	3
>1439	Argument	3
>1440	PrimaryExpression	3
>1441	Callee	matrix_product
>1442	Identifier	matrix_product
>1443	IdentifierDeclStatement	 
>1444	IdentifierDecl	rp [ 3 ]
>1445	PrimaryExpression	3
>1446	Identifier	rp
>1447	IdentifierDeclType	double [ 3 ]
>1448	ExpressionStatement	 
>1449	AssignmentExpr	r [ 2 ] = 1.0
>1450	PrimaryExpression	1.0
>1451	ArrayIndexing	r [ 2 ]
>1452	PrimaryExpression	2
>1453	Identifier	r
>1454	ExpressionStatement	 
>1455	AssignmentExpr	r [ 1 ] = k2 [ idx2 ] . m_y
>1456	MemberAccess	k2 [ idx2 ] . m_y
>1457	Identifier	m_y
>1458	ArrayIndexing	k2 [ idx2 ]
>1459	Identifier	idx2
>1460	Identifier	k2
>1461	ArrayIndexing	r [ 1 ]
>1462	PrimaryExpression	1
>1463	Identifier	r
>1464	ExpressionStatement	 
>1465	AssignmentExpr	r [ 0 ] = k2 [ idx2 ] . m_x
>1466	MemberAccess	k2 [ idx2 ] . m_x
>1467	Identifier	m_x
>1468	ArrayIndexing	k2 [ idx2 ]
>1469	Identifier	idx2
>1470	Identifier	k2
>1471	ArrayIndexing	r [ 0 ]
>1472	PrimaryExpression	0
>1473	Identifier	r
>1474	ExpressionStatement	 
>1475	AssignmentExpr	l [ 2 ] = 1.0
>1476	PrimaryExpression	1.0
>1477	ArrayIndexing	l [ 2 ]
>1478	PrimaryExpression	2
>1479	Identifier	l
>1480	ExpressionStatement	 
>1481	AssignmentExpr	l [ 1 ] = k1 [ idx1 ] . m_y
>1482	MemberAccess	k1 [ idx1 ] . m_y
>1483	Identifier	m_y
>1484	ArrayIndexing	k1 [ idx1 ]
>1485	Identifier	idx1
>1486	Identifier	k1
>1487	ArrayIndexing	l [ 1 ]
>1488	PrimaryExpression	1
>1489	Identifier	l
>1490	ExpressionStatement	 
>1491	AssignmentExpr	l [ 0 ] = k1 [ idx1 ] . m_x
>1492	MemberAccess	k1 [ idx1 ] . m_x
>1493	Identifier	m_x
>1494	ArrayIndexing	k1 [ idx1 ]
>1495	Identifier	idx1
>1496	Identifier	k1
>1497	ArrayIndexing	l [ 0 ]
>1498	PrimaryExpression	0
>1499	Identifier	l
>1500	IdentifierDeclStatement	 
>1501	IdentifierDecl	l [ 3 ]
>1502	PrimaryExpression	3
>1503	Identifier	l
>1504	IdentifierDeclType	double [ 3 ]
>1505	IdentifierDecl	r [ 3 ]
>1506	PrimaryExpression	3
>1507	Identifier	r
>1508	IdentifierDeclType	double [ 3 ]
>1509	IdentifierDeclStatement	 
>1510	IdentifierDecl	idx2 = matches [ inliers [ i ] ] . m_idx2
>1511	AssignmentExpr	idx2 = matches [ inliers [ i ] ] . m_idx2
>1512	MemberAccess	matches [ inliers [ i ] ] . m_idx2
>1513	Identifier	m_idx2
>1514	ArrayIndexing	matches [ inliers [ i ] ]
>1515	ArrayIndexing	inliers [ i ]
>1516	Identifier	i
>1517	Identifier	inliers
>1518	Identifier	matches
>1519	Identifier	idx2
>1520	Identifier	idx2
>1521	IdentifierDeclType	int
>1522	IdentifierDeclStatement	 
>1523	IdentifierDecl	idx1 = matches [ inliers [ i ] ] . m_idx1
>1524	AssignmentExpr	idx1 = matches [ inliers [ i ] ] . m_idx1
>1525	MemberAccess	matches [ inliers [ i ] ] . m_idx1
>1526	Identifier	m_idx1
>1527	ArrayIndexing	matches [ inliers [ i ] ]
>1528	ArrayIndexing	inliers [ i ]
>1529	Identifier	i
>1530	Identifier	inliers
>1531	Identifier	matches
>1532	Identifier	idx1
>1533	Identifier	idx1
>1534	IdentifierDeclType	int
>1535	IncDecOp	 
>1536	IncDec	++
>1537	Identifier	i
>1538	Condition	 
>1539	RelationalExpression	i < ( int ) inliers . size ( )
>1540	CastExpression	( int ) inliers . size ( )
>1541	CallExpression	inliers . size ( )
>1542	ArgumentList	 
>1543	Callee	inliers . size
>1544	MemberAccess	inliers . size
>1545	Identifier	size
>1546	Identifier	inliers
>1547	CastTarget	int
>1548	Identifier	i
>1549	ForInit	 
>1550	IdentifierDeclStatement	int i = 0 ;
>1551	IdentifierDecl	i = 0
>1552	AssignmentExpr	i = 0
>1553	PrimaryExpression	0
>1554	Identifier	i
>1555	Identifier	i
>1556	IdentifierDeclType	int
>1557	IdentifierDeclStatement	 
>1558	IdentifierDecl	error = 0.0
>1559	AssignmentExpr	error = 0.0
>1560	PrimaryExpression	0.0
>1561	Identifier	error
>1562	Identifier	error
>1563	IdentifierDeclType	double
>1564	IdentifierDeclStatement	 
>1565	IdentifierDecl	* weight = new double [ inliers . size ( ) ]
>1566	AssignmentExpr	* weight = new double [ inliers . size ( ) ]
>1567	CallExpression	inliers . size ( )
>1568	ArgumentList	 
>1569	Callee	inliers . size
>1570	MemberAccess	inliers . size
>1571	Identifier	size
>1572	Identifier	inliers
>1573	Identifier	weight
>1574	Identifier	weight
>1575	IdentifierDeclType	double *
>1576	IdentifierDeclStatement	 
>1577	IdentifierDecl	* l_pts = new v3_t [ inliers . size ( ) ]
>1578	AssignmentExpr	* l_pts = new v3_t [ inliers . size ( ) ]
>1579	CallExpression	inliers . size ( )
>1580	ArgumentList	 
>1581	Callee	inliers . size
>1582	MemberAccess	inliers . size
>1583	Identifier	size
>1584	Identifier	inliers
>1585	Identifier	l_pts
>1586	Identifier	l_pts
>1587	IdentifierDeclType	v3_t *
>1588	IdentifierDeclStatement	 
>1589	IdentifierDecl	* r_pts = new v3_t [ inliers . size ( ) ]
>1590	AssignmentExpr	* r_pts = new v3_t [ inliers . size ( ) ]
>1591	CallExpression	inliers . size ( )
>1592	ArgumentList	 
>1593	Callee	inliers . size
>1594	MemberAccess	inliers . size
>1595	Identifier	size
>1596	Identifier	inliers
>1597	Identifier	r_pts
>1598	Identifier	r_pts
>1599	IdentifierDeclType	v3_t *
<7=31,30,8
<8=27,24,21,18,15,12,9
<9=11,10
<12=14,13
<15=17,16
<18=20,19
<21=23,22
<24=26,25
<27=29,28
<31=563,545,538,524,517,512,493,486,479,472,107,103,86,71,54,53,52,51,49,48,47,46,44,43,42,41,39,38,37,36,34,32
<32=33
<34=35
<39=40
<44=45
<49=50
<54=55
<55=69,56
<56=67,65,63,61,59,57
<57=58
<59=60
<61=62
<63=64
<65=66
<67=68
<69=70
<71=72
<72=84,73
<73=82,80,74
<74=75
<75=79,76
<76=78,77
<80=81
<82=83
<84=85
<86=87
<87=101,88
<88=99,97,95,93,91,89
<89=90
<91=92
<93=94
<95=96
<97=98
<99=100
<101=102
<103=104
<104=106,105
<107=464,460,457,108
<108=377,246,241,160,156,134,109
<109=130,110
<110=126,111
<111=112
<112=124,113
<113=122,120,114
<114=115
<115=119,116
<116=118,117
<120=121
<122=123
<124=125
<126=127
<127=129,128
<130=131
<131=133,132
<134=135
<135=155,154,136
<136=153,137
<137=151,138
<138=149,147,145,143,141,139
<139=140
<141=142
<143=144
<145=146
<147=148
<149=150
<151=152
<156=157
<157=159,158
<160=239,161
<161=237,181,179,162
<162=164,163
<164=165
<165=177,166
<166=175,173,171,169,167
<167=168
<169=170
<171=172
<173=174
<175=176
<177=178
<179=180
<181=221,198,183,182
<183=184
<184=196,185
<185=194,192,186
<186=187
<187=191,188
<188=190,189
<192=193
<194=195
<196=197
<198=199
<199=219,200
<200=217,215,213,211,209,207,203,201
<201=202
<203=204
<204=206,205
<207=208
<209=210
<211=212
<213=214
<215=216
<217=218
<219=220
<221=233,229,225,222
<222=224,223
<225=228,227,226
<229=232,231,230
<233=236,235,234
<237=238
<239=240
<241=242
<242=245,244,243
<246=369,365,362,247
<247=349,336,321,306,295,280,265,254,248
<248=249
<249=251,250
<251=253,252
<254=255
<255=257,256
<257=263,258
<258=259
<259=260
<260=262,261
<263=264
<265=266
<266=272,267
<267=269,268
<269=271,270
<272=278,273
<273=274
<274=275
<275=277,276
<278=279
<280=281
<281=287,282
<282=284,283
<284=286,285
<287=293,288
<288=289
<289=290
<290=292,291
<293=294
<295=296
<296=298,297
<298=304,299
<299=300
<300=301
<301=303,302
<304=305
<306=307
<307=313,308
<308=310,309
<310=312,311
<313=319,314
<314=315
<315=316
<316=318,317
<319=320
<321=322
<322=328,323
<323=325,324
<325=327,326
<328=334,329
<329=330
<330=331
<331=333,332
<334=335
<336=337
<337=348,347,338
<338=346,339
<339=341,340
<341=345,342
<342=344,343
<349=350
<350=361,360,351
<351=359,352
<352=354,353
<354=358,355
<355=357,356
<362=364,363
<365=366
<366=368,367
<369=370
<370=371
<371=376,375,372
<372=374,373
<377=449,445,442,378
<378=438,434,385,379
<379=380
<380=382,381
<382=384,383
<385=390,386
<386=387
<387=389,388
<390=430,421,391
<391=413,409,406,392
<392=393
<393=400,394
<394=396,395
<396=397
<397=399,398
<400=401
<401=403,402
<403=405,404
<406=408,407
<409=410
<410=412,411
<413=414
<414=415
<415=420,419,416
<416=418,417
<421=422
<422=429,423
<423=425,424
<425=427,426
<427=428
<430=431
<431=433,432
<434=435
<435=437,436
<438=439
<439=441,440
<442=444,443
<445=446
<446=448,447
<449=450
<450=451
<451=456,455,452
<452=454,453
<457=459,458
<460=461
<461=463,462
<464=465
<465=466
<466=471,470,467
<467=469,468
<472=473
<473=478,477,474
<474=476,475
<479=480
<480=485,484,481
<481=483,482
<486=487
<487=492,491,488
<488=490,489
<493=508,494
<494=504,497,495
<495=496
<497=498
<498=502,499
<499=500
<500=501
<502=503
<504=505
<505=507,506
<508=509
<509=511,510
<512=513
<513=516,515,514
<517=518
<518=523,522,519
<519=521,520
<524=525
<525=537,536,526
<526=535,527
<527=534,528
<528=530,529
<530=531
<531=533,532
<538=539
<539=544,543,540
<540=542,541
<545=561,546
<546=559,555,554,552,548,547
<548=549
<549=551,550
<552=553
<555=556
<556=558,557
<559=560
<561=562
<563=564
<564=571,570,565
<565=569,566
<566=568,567
<633=654,653,634
<634=650,647,644,641,638,635
<635=637,636
<638=640,639
<641=643,642
<644=646,645
<647=649,648
<650=652,651
<654=846,839,657,655
<655=656
<657=831,822,819,658
<658=814,800,786,780,775,756,743,730,713,696,678,659
<659=674,660
<660=670,661
<661=662
<662=666,663
<663=664
<664=665
<666=667
<667=669,668
<670=671
<671=673,672
<674=675
<675=677,676
<678=679
<679=695,694,680
<680=693,681
<681=691,682
<682=683
<683=684
<684=688,685
<685=687,686
<688=690,689
<691=692
<696=697
<697=712,711,698
<698=710,699
<699=709,700
<700=702,701
<702=708,703
<703=705,704
<705=707,706
<713=714
<714=729,728,715
<715=727,716
<716=726,717
<717=719,718
<719=725,720
<720=722,721
<722=724,723
<730=731
<731=742,741,732
<732=740,733
<733=737,734
<734=736,735
<737=739,738
<743=744
<744=755,754,745
<745=753,746
<746=750,747
<747=749,748
<750=752,751
<756=757
<757=773,758
<758=771,769,767,765,763,761,759
<759=760
<761=762
<763=764
<765=766
<767=768
<769=770
<771=772
<773=774
<775=776
<776=779,778,777
<780=781
<781=783,782
<783=785,784
<786=787
<787=797,788
<788=790,789
<790=796,791
<791=793,792
<793=795,794
<797=799,798
<800=801
<801=811,802
<802=804,803
<804=810,805
<805=807,806
<807=809,808
<811=813,812
<814=815
<815=818,817,816
<819=821,820
<822=823
<823=830,824
<824=826,825
<826=827
<827=829,828
<831=832
<832=833
<833=838,837,834
<834=836,835
<839=840
<840=845,844,841
<841=843,842
<846=847
<847=849,848
<849=850
<850=852,851
<889=910,909,890
<890=906,903,900,897,894,891
<891=893,892
<894=896,895
<897=899,898
<900=902,901
<903=905,904
<906=908,907
<910=1588,1576,1564,1557,1370,1361,1223,1128,1124,937,928,927,926,925,923,922,921,920,918,917,916,915,913,911
<911=912
<913=914
<918=919
<923=924
<928=929
<929=935,930
<930=933,931
<931=932
<933=934
<935=936
<937=1116,1105,1102,938
<938=1089,1076,1067,1057,1047,1041,1031,1021,1015,1010,991,983,975,962,949,939
<939=940
<940=948,941
<941=945,942
<942=944,943
<945=947,946
<949=950
<950=961,960,951
<951=959,952
<952=956,953
<953=955,954
<956=958,957
<962=963
<963=974,973,964
<964=972,965
<965=969,966
<966=968,967
<969=971,970
<975=976
<976=980,977
<977=979,978
<980=982,981
<983=984
<984=988,985
<985=987,986
<988=990,989
<991=992
<992=1008,993
<993=1006,1004,1002,1000,998,996,994
<994=995
<996=997
<998=999
<1000=1001
<1002=1003
<1004=1005
<1006=1007
<1008=1009
<1010=1011
<1011=1014,1013,1012
<1015=1016
<1016=1018,1017
<1018=1020,1019
<1021=1022
<1022=1028,1023
<1023=1025,1024
<1025=1027,1026
<1028=1030,1029
<1031=1032
<1032=1038,1033
<1033=1035,1034
<1035=1037,1036
<1038=1040,1039
<1041=1042
<1042=1044,1043
<1044=1046,1045
<1047=1048
<1048=1054,1049
<1049=1051,1050
<1051=1053,1052
<1054=1056,1055
<1057=1058
<1058=1064,1059
<1059=1061,1060
<1061=1063,1062
<1064=1066,1065
<1067=1072,1068
<1068=1071,1070,1069
<1072=1075,1074,1073
<1076=1077
<1077=1088,1087,1078
<1078=1086,1079
<1079=1081,1080
<1081=1085,1082
<1082=1084,1083
<1089=1090
<1090=1101,1100,1091
<1091=1099,1092
<1092=1094,1093
<1094=1098,1095
<1095=1097,1096
<1102=1104,1103
<1105=1106
<1106=1115,1107
<1107=1114,1108
<1108=1110,1109
<1110=1111
<1111=1113,1112
<1116=1117
<1117=1118
<1118=1123,1122,1119
<1119=1121,1120
<1124=1125
<1125=1127,1126
<1128=1221,1129
<1129=1219,1156,1154,1130
<1130=1132,1131
<1132=1133
<1133=1152,1134
<1134=1143,1141,1139,1137,1135
<1135=1136
<1137=1138
<1139=1140
<1141=1142
<1143=1144
<1144=1151,1145
<1145=1147,1146
<1147=1148
<1148=1150,1149
<1152=1153
<1154=1155
<1156=1203,1173,1158,1157
<1158=1159
<1159=1171,1160
<1160=1169,1167,1161
<1161=1162
<1162=1166,1163
<1163=1165,1164
<1167=1168
<1169=1170
<1171=1172
<1173=1174
<1174=1201,1175
<1175=1192,1190,1188,1186,1184,1182,1178,1176
<1176=1177
<1178=1179
<1179=1181,1180
<1182=1183
<1184=1185
<1186=1187
<1188=1189
<1190=1191
<1192=1193
<1193=1200,1194
<1194=1196,1195
<1196=1197
<1197=1199,1198
<1201=1202
<1203=1215,1211,1207,1204
<1204=1206,1205
<1207=1210,1209,1208
<1211=1214,1213,1212
<1215=1218,1217,1216
<1219=1220
<1221=1222
<1223=1353,1342,1339,1224
<1224=1326,1313,1298,1283,1272,1257,1242,1231,1225
<1225=1226
<1226=1228,1227
<1228=1230,1229
<1231=1232
<1232=1234,1233
<1234=1240,1235
<1235=1236
<1236=1237
<1237=1239,1238
<1240=1241
<1242=1243
<1243=1249,1244
<1244=1246,1245
<1246=1248,1247
<1249=1255,1250
<1250=1251
<1251=1252
<1252=1254,1253
<1255=1256
<1257=1258
<1258=1264,1259
<1259=1261,1260
<1261=1263,1262
<1264=1270,1265
<1265=1266
<1266=1267
<1267=1269,1268
<1270=1271
<1272=1273
<1273=1275,1274
<1275=1281,1276
<1276=1277
<1277=1278
<1278=1280,1279
<1281=1282
<1283=1284
<1284=1290,1285
<1285=1287,1286
<1287=1289,1288
<1290=1296,1291
<1291=1292
<1292=1293
<1293=1295,1294
<1296=1297
<1298=1299
<1299=1305,1300
<1300=1302,1301
<1302=1304,1303
<1305=1311,1306
<1306=1307
<1307=1308
<1308=1310,1309
<1311=1312
<1313=1314
<1314=1325,1324,1315
<1315=1323,1316
<1316=1318,1317
<1318=1322,1319
<1319=1321,1320
<1326=1327
<1327=1338,1337,1328
<1328=1336,1329
<1329=1331,1330
<1331=1335,1332
<1332=1334,1333
<1339=1341,1340
<1342=1343
<1343=1352,1344
<1344=1351,1345
<1345=1347,1346
<1347=1348
<1348=1350,1349
<1353=1354
<1354=1355
<1355=1360,1359,1356
<1356=1358,1357
<1361=1362
<1362=1368,1363
<1363=1366,1364
<1364=1365
<1366=1367
<1368=1369
<1370=1549,1538,1535,1371
<1371=1522,1509,1500,1490,1480,1474,1464,1454,1448,1443,1424,1416,1408,1395,1382,1372
<1372=1373
<1373=1381,1374
<1374=1378,1375
<1375=1377,1376
<1378=1380,1379
<1382=1383
<1383=1394,1393,1384
<1384=1392,1385
<1385=1389,1386
<1386=1388,1387
<1389=1391,1390
<1395=1396
<1396=1407,1406,1397
<1397=1405,1398
<1398=1402,1399
<1399=1401,1400
<1402=1404,1403
<1408=1409
<1409=1413,1410
<1410=1412,1411
<1413=1415,1414
<1416=1417
<1417=1421,1418
<1418=1420,1419
<1421=1423,1422
<1424=1425
<1425=1441,1426
<1426=1439,1437,1435,1433,1431,1429,1427
<1427=1428
<1429=1430
<1431=1432
<1433=1434
<1435=1436
<1437=1438
<1439=1440
<1441=1442
<1443=1444
<1444=1447,1446,1445
<1448=1449
<1449=1451,1450
<1451=1453,1452
<1454=1455
<1455=1461,1456
<1456=1458,1457
<1458=1460,1459
<1461=1463,1462
<1464=1465
<1465=1471,1466
<1466=1468,1467
<1468=1470,1469
<1471=1473,1472
<1474=1475
<1475=1477,1476
<1477=1479,1478
<1480=1481
<1481=1487,1482
<1482=1484,1483
<1484=1486,1485
<1487=1489,1488
<1490=1491
<1491=1497,1492
<1492=1494,1493
<1494=1496,1495
<1497=1499,1498
<1500=1505,1501
<1501=1504,1503,1502
<1505=1508,1507,1506
<1509=1510
<1510=1521,1520,1511
<1511=1519,1512
<1512=1514,1513
<1514=1518,1515
<1515=1517,1516
<1522=1523
<1523=1534,1533,1524
<1524=1532,1525
<1525=1527,1526
<1527=1531,1528
<1528=1530,1529
<1535=1537,1536
<1538=1539
<1539=1548,1540
<1540=1547,1541
<1541=1543,1542
<1543=1544
<1544=1546,1545
<1549=1550
<1550=1551
<1551=1556,1555,1552
<1552=1554,1553
<1557=1558
<1558=1563,1562,1559
<1559=1561,1560
<1564=1565
<1565=1575,1574,1566
<1566=1573,1567
<1567=1569,1568
<1569=1570
<1570=1572,1571
<1576=1577
<1577=1587,1586,1578
<1578=1585,1579
<1579=1581,1580
<1581=1582
<1582=1584,1583
<1588=1589
<1589=1599,1598,1590
<1590=1597,1591
<1591=1593,1592
<1593=1594
<1594=1596,1595
