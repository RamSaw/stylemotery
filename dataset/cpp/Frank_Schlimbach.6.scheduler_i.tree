>4	FunctionDef	tbb_waiter (scheduler_i * s)
>5	ParameterList	scheduler_i * s
>6	Parameter	 
>7	Identifier	s
>8	ParameterType	scheduler_i *
>9	CompoundStatement	 
>26	FunctionDef	scheduler_i 
>27	ParameterList	context_base & c
>28	Parameter	 
>29	Identifier	c
>30	ParameterType	context_base &
>31	CompoundStatement	 
>32	IfStatement	if ( 0 == distributor 
>33	CompoundStatement	 
>34	ExpressionStatement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Condition	 
>45	OrExpression	0 == distributor 
>46	CallExpression	distributor 
>47	ArgumentList	 
>48	Callee	distributor 
>49	Identifier	distributor 
>50	EqualityExpression	0 == distributor 
>51	CallExpression	distributor 
>52	ArgumentList	 
>53	Callee	distributor 
>54	Identifier	distributor 
>55	PrimaryExpression	0
>56	ExpressionStatement	 
>57	AssignmentExpr	m_activeGraphs = 0
>58	PrimaryExpression	0
>59	Identifier	m_activeGraphs
>60	ExpressionStatement	 
>61	AssignmentExpr	m_userStepsInFlight = 0
>62	PrimaryExpression	0
>63	Identifier	m_userStepsInFlight
>64	ExpressionStatement	 
>65	CallExpression	set_current ( NULL )
>66	ArgumentList	NULL
>67	Argument	NULL
>68	Identifier	NULL
>69	Callee	set_current
>70	Identifier	set_current
>80	FunctionDef	scheduler_i 
>81	ParameterList	 
>82	ReturnType	void
>83	CompoundStatement	 
>84	ExpressionStatement	 
>85	AssignmentExpr	m_root = - 1
>86	UnaryOp	- 1
>87	PrimaryExpression	1
>88	UnaryOperator	-
>89	Identifier	m_root
>94	FunctionDef	scheduler_i 
>95	ParameterList	 
>96	ReturnType	void
>97	CompoundStatement	 
>101	FunctionDef	scheduler_i 
>102	ParameterList	 
>103	CompoundStatement	 
>104	ExpressionStatement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	ExpressionStatement	 
>117	Identifier	m_barrier
>118	Statement	 
>119	ExpressionStatement	 
>120	CallExpression	m_context . print_scheduler_statistics ( )
>121	ArgumentList	 
>122	Callee	m_context . print_scheduler_statistics
>123	MemberAccess	m_context . print_scheduler_statistics
>124	Identifier	print_scheduler_statistics
>125	Identifier	m_context
>130	FunctionDef	scheduler_i 
>131	ParameterList	schedulable * stepInstance , bool compute_on , bool do_schedule , bool is_service_task
>132	Parameter	 
>133	Identifier	is_service_task
>134	ParameterType	bool
>135	Parameter	 
>136	Identifier	do_schedule
>137	ParameterType	bool
>138	Parameter	 
>139	Identifier	compute_on
>140	ParameterType	bool
>141	Parameter	 
>142	Identifier	stepInstance
>143	ParameterType	schedulable *
>144	ReturnType	bool
>145	CompoundStatement	 
>146	ReturnStatement	 
>147	Identifier	true
>148	IfStatement	if ( passOnTo != COMPUTE_ON_ALL )
>149	CompoundStatement	 
>150	ExpressionStatement	 
>151	AssignmentExpr	passOnTo = COMPUTE_ON_LOCAL
>152	Identifier	COMPUTE_ON_LOCAL
>153	Identifier	passOnTo
>154	Condition	 
>155	EqualityExpression	passOnTo != COMPUTE_ON_ALL
>156	Identifier	COMPUTE_ON_ALL
>157	Identifier	passOnTo
>158	IfStatement	if ( do_schedule && _to_be_scheduled == CNC_NeedsSequentialize )
>159	ElseStatement	else
>160	IfStatement	if ( do_schedule && ( _to_be_scheduled == CNC_Prepared || passOnTo == COMPUTE_ON_ALL ) )
>161	ElseStatement	else
>162	IfStatement	if ( stepInstance -> done ( ) )
>163	CompoundStatement	 
>164	ReturnStatement	 
>165	Identifier	false
>166	Condition	 
>167	CallExpression	stepInstance -> done ( )
>168	ArgumentList	 
>169	Callee	stepInstance -> done
>170	PtrMemberAccess	stepInstance -> done
>171	Identifier	done
>172	Identifier	stepInstance
>173	CompoundStatement	 
>174	ExpressionStatement	 
>175	CallExpression	schedule ( stepInstance , true , _tmp )
>176	ArgumentList	stepInstance
>177	Argument	_tmp
>178	Identifier	_tmp
>179	Argument	true
>180	Identifier	true
>181	Argument	stepInstance
>182	Identifier	stepInstance
>183	Callee	schedule
>184	Identifier	schedule
>185	Condition	 
>186	AndExpression	do_schedule && ( _to_be_scheduled == CNC_Prepared || passOnTo == COMPUTE_ON_ALL )
>187	OrExpression	_to_be_scheduled == CNC_Prepared || passOnTo == COMPUTE_ON_ALL
>188	EqualityExpression	passOnTo == COMPUTE_ON_ALL
>189	Identifier	COMPUTE_ON_ALL
>190	Identifier	passOnTo
>191	EqualityExpression	_to_be_scheduled == CNC_Prepared
>192	Identifier	CNC_Prepared
>193	Identifier	_to_be_scheduled
>194	Identifier	do_schedule
>195	CompoundStatement	 
>196	ExpressionStatement	 
>197	CallExpression	sequentialize ( stepInstance )
>198	ArgumentList	stepInstance
>199	Argument	stepInstance
>200	Identifier	stepInstance
>201	Callee	sequentialize
>202	Identifier	sequentialize
>203	Condition	 
>204	AndExpression	do_schedule && _to_be_scheduled == CNC_NeedsSequentialize
>205	EqualityExpression	_to_be_scheduled == CNC_NeedsSequentialize
>206	Identifier	CNC_NeedsSequentialize
>207	Identifier	_to_be_scheduled
>208	Identifier	do_schedule
>209	IfStatement	if ( passOnTo != NO_COMPUTE_ON && passOnTo != distributor 
>210	CompoundStatement	 
>211	IfStatement	if ( passOnTo != COMPUTE_ON_ALL )
>212	CompoundStatement	 
>213	ReturnStatement	 
>214	Identifier	false
>215	Condition	 
>216	EqualityExpression	passOnTo != COMPUTE_ON_ALL
>217	Identifier	COMPUTE_ON_ALL
>218	Identifier	passOnTo
>219	ExpressionStatement	 
>220	CallExpression	stepInstance -> compute_on ( passOnTo )
>221	ArgumentList	passOnTo
>222	Argument	passOnTo
>223	Identifier	passOnTo
>224	Callee	stepInstance -> compute_on
>225	PtrMemberAccess	stepInstance -> compute_on
>226	Identifier	compute_on
>227	Identifier	stepInstance
>228	ExpressionStatement	 
>229	CallExpression	CNC_ASSERT ( passOnTo < distributor 
>230	ArgumentList	passOnTo < distributor 
>231	Argument	passOnTo < distributor 
>232	AndExpression	passOnTo < distributor 
>233	EqualityExpression	passOnTo != COMPUTE_ON_LOCAL
>234	Identifier	COMPUTE_ON_LOCAL
>235	Identifier	passOnTo
>236	RelationalExpression	passOnTo < distributor 
>237	CallExpression	distributor 
>238	ArgumentList	 
>239	Callee	distributor 
>240	Identifier	distributor 
>241	Identifier	passOnTo
>242	Callee	CNC_ASSERT
>243	Identifier	CNC_ASSERT
>244	Condition	 
>245	AndExpression	passOnTo != NO_COMPUTE_ON && passOnTo != distributor 
>246	EqualityExpression	passOnTo != distributor 
>247	CallExpression	distributor 
>248	ArgumentList	 
>249	Callee	distributor 
>250	Identifier	distributor 
>251	Identifier	passOnTo
>252	EqualityExpression	passOnTo != NO_COMPUTE_ON
>253	Identifier	NO_COMPUTE_ON
>254	Identifier	passOnTo
>255	ExpressionStatement	 
>256	CallExpression	set_current ( _tmp )
>257	ArgumentList	_tmp
>258	Argument	_tmp
>259	Identifier	_tmp
>260	Callee	set_current
>261	Identifier	set_current
>262	IdentifierDeclStatement	 
>263	IdentifierDecl	_to_be_scheduled = stepInstance -> prepare ( sD , passOnTo , _tmp )
>264	AssignmentExpr	_to_be_scheduled = stepInstance -> prepare ( sD , passOnTo , _tmp )
>265	CallExpression	stepInstance -> prepare ( sD , passOnTo , _tmp )
>266	ArgumentList	sD
>267	Argument	_tmp
>268	Identifier	_tmp
>269	Argument	passOnTo
>270	Identifier	passOnTo
>271	Argument	sD
>272	Identifier	sD
>273	Callee	stepInstance -> prepare
>274	PtrMemberAccess	stepInstance -> prepare
>275	Identifier	prepare
>276	Identifier	stepInstance
>277	Identifier	_to_be_scheduled
>278	Identifier	_to_be_scheduled
>279	IdentifierDeclType	char
>280	IdentifierDeclStatement	 
>281	IdentifierDecl	passOnTo = ( compute_on && m_context . distributed ( ) ) ? distributor 
>282	AssignmentExpr	passOnTo = ( compute_on && m_context . distributed ( ) ) ? distributor 
>283	ConditionalExpression	( compute_on && m_context . distributed ( ) ) ? distributor 
>284	Identifier	NO_COMPUTE_ON
>285	CallExpression	distributor 
>286	ArgumentList	 
>287	Callee	distributor 
>288	Identifier	distributor 
>289	Condition	compute_on && m_context . distributed ( )
>290	AndExpression	compute_on && m_context . distributed ( )
>291	CallExpression	m_context . distributed ( )
>292	ArgumentList	 
>293	Callee	m_context . distributed
>294	MemberAccess	m_context . distributed
>295	Identifier	distributed
>296	Identifier	m_context
>297	Identifier	compute_on
>298	Identifier	passOnTo
>299	Identifier	passOnTo
>300	IdentifierDeclType	int
>301	ExpressionStatement	 
>302	CallExpression	set_current ( stepInstance )
>303	ArgumentList	stepInstance
>304	Argument	stepInstance
>305	Identifier	stepInstance
>306	Callee	set_current
>307	Identifier	set_current
>308	IdentifierDeclStatement	 
>309	IdentifierDecl	* _tmp = current ( )
>310	AssignmentExpr	* _tmp = current ( )
>311	CallExpression	current ( )
>312	ArgumentList	 
>313	Callee	current
>314	Identifier	current
>315	Identifier	_tmp
>316	Identifier	_tmp
>317	IdentifierDeclType	schedulable *
>318	IdentifierDeclStatement	 
>319	IdentifierDecl	sD
>320	Identifier	sD
>321	IdentifierDeclType	step_delayer
>348	FunctionDef	scheduler_i 
>349	ParameterList	scheduler_i 
>350	Parameter	 
>351	Identifier	group
>352	ParameterType	scheduler_i 
>353	ReturnType	scheduler_i 
>354	CompoundStatement	 
>355	ReturnStatement	 
>356	Identifier	group
>357	ExpressionStatement	 
>358	CallExpression	group -> add ( stepInstance )
>359	ArgumentList	stepInstance
>360	Argument	stepInstance
>361	Identifier	stepInstance
>362	Callee	group -> add
>363	PtrMemberAccess	group -> add
>364	Identifier	add
>365	Identifier	group
>366	IfStatement	if ( group == NULL )
>367	ReturnStatement	 
>368	Identifier	stepInstance
>369	Condition	 
>370	EqualityExpression	group == NULL
>371	Identifier	NULL
>372	Identifier	group
>373	IfStatement	if ( stepInstance )
>374	CompoundStatement	 
>375	ExpressionStatement	 
>376	CallExpression	stepInstance -> suspend ( )
>377	ArgumentList	 
>378	Callee	stepInstance -> suspend
>379	PtrMemberAccess	stepInstance -> suspend
>380	Identifier	suspend
>381	Identifier	stepInstance
>382	Condition	 
>383	Identifier	stepInstance
>384	IdentifierDeclStatement	 
>385	IdentifierDecl	* stepInstance = current ( )
>386	AssignmentExpr	* stepInstance = current ( )
>387	CallExpression	current ( )
>388	ArgumentList	 
>389	Callee	current
>390	Identifier	current
>391	Identifier	stepInstance
>392	Identifier	stepInstance
>393	IdentifierDeclType	schedulable *
>406	FunctionDef	re_schedule (schedulable * s)
>407	ParameterList	schedulable * s
>408	Parameter	 
>409	Identifier	s
>410	ParameterType	schedulable *
>411	CompoundStatement	 
>416	FunctionDef	re_schedule (const re_schedule & r)
>417	ParameterList	const re_schedule & r
>418	Parameter	 
>419	Identifier	r
>420	ParameterType	const re_schedule &
>421	CompoundStatement	 
>426	FunctionDef	operator ( ) (schedulable * stepInstance , argument_type * arg)
>427	ParameterList	schedulable * stepInstance , argument_type * arg
>428	Parameter	 
>429	Identifier	arg
>430	ParameterType	argument_type *
>431	Parameter	 
>432	Identifier	stepInstance
>433	ParameterType	schedulable *
>434	ReturnType	void
>435	CompoundStatement	 
>436	IfStatement	if ( stepInstance != NULL )
>437	ElseStatement	else
>438	CompoundStatement	 
>439	ExpressionStatement	 
>440	AssignmentExpr	* arg = true
>441	Identifier	true
>442	UnaryOp	* arg
>443	Identifier	arg
>444	UnaryOperator	*
>445	CompoundStatement	 
>446	ExpressionStatement	 
>447	CallExpression	LOG_STATS ( stepInstance -> scheduler ( ) . m_context . stats ( ) , step_resumed ( ) )
>448	ArgumentList	stepInstance -> scheduler ( ) . m_context . stats ( )
>449	Argument	step_resumed ( )
>450	CallExpression	step_resumed ( )
>451	ArgumentList	 
>452	Callee	step_resumed
>453	Identifier	step_resumed
>454	Argument	stepInstance -> scheduler ( ) . m_context . stats ( )
>455	CallExpression	stepInstance -> scheduler ( ) . m_context . stats ( )
>456	ArgumentList	 
>457	Callee	stepInstance -> scheduler ( ) . m_context . stats
>458	MemberAccess	stepInstance -> scheduler ( ) . m_context . stats
>459	Identifier	stats
>460	MemberAccess	stepInstance -> scheduler ( ) . m_context
>461	Identifier	m_context
>462	CallExpression	stepInstance -> scheduler ( )
>463	ArgumentList	 
>464	Callee	stepInstance -> scheduler
>465	PtrMemberAccess	stepInstance -> scheduler
>466	Identifier	scheduler
>467	Identifier	stepInstance
>468	Callee	LOG_STATS
>469	Identifier	LOG_STATS
>470	IfStatement	if ( stepInstance -> unsuspend ( ) )
>471	CompoundStatement	 
>472	ExpressionStatement	 
>473	CallExpression	stepInstance -> scheduler ( ) . schedule ( stepInstance , true , m_currStepI )
>474	ArgumentList	stepInstance
>475	Argument	m_currStepI
>476	Identifier	m_currStepI
>477	Argument	true
>478	Identifier	true
>479	Argument	stepInstance
>480	Identifier	stepInstance
>481	Callee	stepInstance -> scheduler ( ) . schedule
>482	MemberAccess	stepInstance -> scheduler ( ) . schedule
>483	Identifier	schedule
>484	CallExpression	stepInstance -> scheduler ( )
>485	ArgumentList	 
>486	Callee	stepInstance -> scheduler
>487	PtrMemberAccess	stepInstance -> scheduler
>488	Identifier	scheduler
>489	Identifier	stepInstance
>490	Condition	 
>491	CallExpression	stepInstance -> unsuspend ( )
>492	ArgumentList	 
>493	Callee	stepInstance -> unsuspend
>494	PtrMemberAccess	stepInstance -> unsuspend
>495	Identifier	unsuspend
>496	Identifier	stepInstance
>497	Condition	 
>498	EqualityExpression	stepInstance != NULL
>499	Identifier	NULL
>500	Identifier	stepInstance
>516	FunctionDef	scheduler_i 
>517	ParameterList	scheduler_i 
>518	Parameter	 
>519	Identifier	group
>520	ParameterType	scheduler_i 
>521	ReturnType	bool
>522	CompoundStatement	 
>523	ReturnStatement	 
>524	Identifier	_arg
>525	ExpressionStatement	 
>526	AssignmentExpr	group = NULL
>527	Identifier	NULL
>528	Identifier	group
>529	ExpressionStatement	 
>530	Identifier	group
>531	Statement	 
>532	ExpressionStatement	 
>533	CallExpression	group -> for_all ( _rs , & _arg )
>534	ArgumentList	_rs
>535	Argument	& _arg
>536	UnaryOp	& _arg
>537	Identifier	_arg
>538	UnaryOperator	&
>539	Argument	_rs
>540	Identifier	_rs
>541	Callee	group -> for_all
>542	PtrMemberAccess	group -> for_all
>543	Identifier	for_all
>544	Identifier	group
>545	IdentifierDeclStatement	 
>546	IdentifierDecl	_arg = false
>547	AssignmentExpr	_arg = false
>548	Identifier	false
>549	Identifier	false
>550	Identifier	_arg
>551	IdentifierDeclType	re_schedule 
>552	IdentifierDeclStatement	 
>553	IdentifierDecl	_rs ( current ( ) )
>554	CallExpression	current ( )
>555	ArgumentList	 
>556	Callee	current
>557	Identifier	current
>558	Identifier	_rs
>559	IdentifierDeclType	re_schedule
>569	FunctionDef	scheduler_i 
>570	ParameterList	 
>571	ReturnType	schedulable *
>572	CompoundStatement	 
>573	ReturnStatement	 
>574	CallExpression	m_TLSCurrent . get ( )
>575	ArgumentList	 
>576	Callee	m_TLSCurrent . get
>577	MemberAccess	m_TLSCurrent . get
>578	Identifier	get
>579	Identifier	m_TLSCurrent
>585	FunctionDef	scheduler_i 
>586	ParameterList	schedulable * s
>587	Parameter	 
>588	Identifier	s
>589	ParameterType	schedulable *
>590	ReturnType	void
>591	CompoundStatement	 
>592	ExpressionStatement	 
>593	CallExpression	m_TLSCurrent . set ( s )
>594	ArgumentList	s
>595	Argument	s
>596	Identifier	s
>597	Callee	m_TLSCurrent . set
>598	MemberAccess	m_TLSCurrent . set
>599	Identifier	set
>600	Identifier	m_TLSCurrent
>606	FunctionDef	scheduler_i 
>607	ParameterList	schedulable * s
>608	Parameter	 
>609	Identifier	s
>610	ParameterType	schedulable *
>611	ReturnType	void
>612	CompoundStatement	 
>613	ExpressionStatement	 
>614	AssignmentExpr	s -> m_inPending = true
>615	Identifier	true
>616	PtrMemberAccess	s -> m_inPending
>617	Identifier	m_inPending
>618	Identifier	s
>619	ExpressionStatement	 
>620	CallExpression	m_pendingSteps . push_back ( s )
>621	ArgumentList	s
>622	Argument	s
>623	Identifier	s
>624	Callee	m_pendingSteps . push_back
>625	MemberAccess	m_pendingSteps . push_back
>626	Identifier	push_back
>627	Identifier	m_pendingSteps
>628	IfStatement	if ( m_pendingSteps . capacity ( ) == 0 )
>629	ExpressionStatement	 
>630	CallExpression	m_pendingSteps . reserve ( 8 )
>631	ArgumentList	8
>632	Argument	8
>633	PrimaryExpression	8
>634	Callee	m_pendingSteps . reserve
>635	MemberAccess	m_pendingSteps . reserve
>636	Identifier	reserve
>637	Identifier	m_pendingSteps
>638	Condition	 
>639	EqualityExpression	m_pendingSteps . capacity ( ) == 0
>640	PrimaryExpression	0
>641	CallExpression	m_pendingSteps . capacity ( )
>642	ArgumentList	 
>643	Callee	m_pendingSteps . capacity
>644	MemberAccess	m_pendingSteps . capacity
>645	Identifier	capacity
>646	Identifier	m_pendingSteps
>647	ExpressionStatement	 
>648	AssignmentExpr	s -> m_status = CNC_Pending
>649	Identifier	CNC_Pending
>650	PtrMemberAccess	s -> m_status
>651	Identifier	m_status
>652	Identifier	s
>653	IdentifierDeclStatement	 
>654	IdentifierDecl	_l ( m_mutex )
>655	Identifier	m_mutex
>656	Identifier	_l
>657	IdentifierDeclType	mutex_t 
>670	FunctionDef	scheduler_i 
>671	ParameterList	schedulable * s
>672	Parameter	 
>673	Identifier	s
>674	ParameterType	schedulable *
>675	ReturnType	void
>676	CompoundStatement	 
>677	ExpressionStatement	 
>678	CallExpression	m_seqSteps . push_back ( s )
>679	ArgumentList	s
>680	Argument	s
>681	Identifier	s
>682	Callee	m_seqSteps . push_back
>683	MemberAccess	m_seqSteps . push_back
>684	Identifier	push_back
>685	Identifier	m_seqSteps
>686	IfStatement	if ( m_seqSteps . capacity ( ) == 0 )
>687	ExpressionStatement	 
>688	CallExpression	m_seqSteps . reserve ( 8 )
>689	ArgumentList	8
>690	Argument	8
>691	PrimaryExpression	8
>692	Callee	m_seqSteps . reserve
>693	MemberAccess	m_seqSteps . reserve
>694	Identifier	reserve
>695	Identifier	m_seqSteps
>696	Condition	 
>697	EqualityExpression	m_seqSteps . capacity ( ) == 0
>698	PrimaryExpression	0
>699	CallExpression	m_seqSteps . capacity ( )
>700	ArgumentList	 
>701	Callee	m_seqSteps . capacity
>702	MemberAccess	m_seqSteps . capacity
>703	Identifier	capacity
>704	Identifier	m_seqSteps
>705	ExpressionStatement	 
>706	AssignmentExpr	s -> m_sequentialize = true
>707	Identifier	true
>708	PtrMemberAccess	s -> m_sequentialize
>709	Identifier	m_sequentialize
>710	Identifier	s
>711	IdentifierDeclStatement	 
>712	IdentifierDecl	_l ( m_mutex )
>713	Identifier	m_mutex
>714	Identifier	_l
>715	IdentifierDeclType	mutex_t 
>726	FunctionDef	scheduler_i 
>727	ParameterList	schedulable * stepInstance , bool countit , schedulable * currStepInstance
>728	Parameter	 
>729	Identifier	currStepInstance
>730	ParameterType	schedulable *
>731	Parameter	 
>732	Identifier	countit
>733	ParameterType	bool
>734	Parameter	 
>735	Identifier	stepInstance
>736	ParameterType	schedulable *
>737	ReturnType	void
>738	CompoundStatement	 
>739	ExpressionStatement	 
>740	CallExpression	LOG_STATS ( m_context . stats ( ) , step_scheduled ( ) )
>741	ArgumentList	m_context . stats ( )
>742	Argument	step_scheduled ( )
>743	CallExpression	step_scheduled ( )
>744	ArgumentList	 
>745	Callee	step_scheduled
>746	Identifier	step_scheduled
>747	Argument	m_context . stats ( )
>748	CallExpression	m_context . stats ( )
>749	ArgumentList	 
>750	Callee	m_context . stats
>751	MemberAccess	m_context . stats
>752	Identifier	stats
>753	Identifier	m_context
>754	Callee	LOG_STATS
>755	Identifier	LOG_STATS
>756	IfStatement	if ( m_bypass == false || ! ( currStepInstance != NULL && currStepInstance -> prepared ( ) && & currStepInstance \
>757	ElseStatement	else
>758	CompoundStatement	 
>759	IfStatement	if ( currStepInstance -> m_succStep )
>760	ElseStatement	else
>761	CompoundStatement	 
>762	ExpressionStatement	 
>763	AssignmentExpr	currStepInstance -> m_succStep = stepInstance
>764	Identifier	stepInstance
>765	PtrMemberAccess	currStepInstance -> m_succStep
>766	Identifier	m_succStep
>767	Identifier	currStepInstance
>768	CompoundStatement	 
>769	ExpressionStatement	 
>770	CallExpression	do_schedule ( stepInstance )
>771	ArgumentList	stepInstance
>772	Argument	stepInstance
>773	Identifier	stepInstance
>774	Callee	do_schedule
>775	Identifier	do_schedule
>776	Condition	 
>777	PtrMemberAccess	currStepInstance -> m_succStep
>778	Identifier	m_succStep
>779	Identifier	currStepInstance
>780	CompoundStatement	 
>781	ExpressionStatement	 
>782	CallExpression	do_schedule ( stepInstance )
>783	ArgumentList	stepInstance
>784	Argument	stepInstance
>785	Identifier	stepInstance
>786	Callee	do_schedule
>787	Identifier	do_schedule
>788	Condition	 
>789	OrExpression	m_bypass == false || ! ( currStepInstance != NULL && currStepInstance -> prepared ( ) && & currStepInstance \
>790	UnaryOp	! ( currStepInstance != NULL && currStepInstance -> prepared ( ) && & currStepInstance -> scheduler ( ) == this )
>791	AndExpression	currStepInstance != NULL && currStepInstance -> prepared ( ) && & currStepInstance -> scheduler ( ) == \
>792	AndExpression	currStepInstance -> prepared ( ) && & currStepInstance -> scheduler ( ) == this
>793	EqualityExpression	& currStepInstance -> scheduler ( ) == this
>794	Identifier	this
>795	UnaryOp	& currStepInstance -> scheduler ( )
>796	CallExpression	currStepInstance -> scheduler ( )
>797	ArgumentList	 
>798	Callee	currStepInstance -> scheduler
>799	PtrMemberAccess	currStepInstance -> scheduler
>800	Identifier	scheduler
>801	Identifier	currStepInstance
>802	UnaryOperator	&
>803	CallExpression	currStepInstance -> prepared ( )
>804	ArgumentList	 
>805	Callee	currStepInstance -> prepared
>806	PtrMemberAccess	currStepInstance -> prepared
>807	Identifier	prepared
>808	Identifier	currStepInstance
>809	EqualityExpression	currStepInstance != NULL
>810	Identifier	NULL
>811	Identifier	currStepInstance
>812	UnaryOperator	!
>813	EqualityExpression	m_bypass == false
>814	Identifier	false
>815	Identifier	m_bypass
>816	IfStatement	if ( countit )
>817	ExpressionStatement	 
>818	UnaryExpression	++ m_userStepsInFlight
>819	Identifier	m_userStepsInFlight
>820	IncDec	++
>821	Condition	 
>822	Identifier	countit
>823	IfStatement	if ( currStepInstance && currStepInstance -> is_sequentialized ( ) )
>824	CompoundStatement	 
>825	ReturnStatement	 
>826	ExpressionStatement	 
>827	CallExpression	pending ( stepInstance )
>828	ArgumentList	stepInstance
>829	Argument	stepInstance
>830	Identifier	stepInstance
>831	Callee	pending
>832	Identifier	pending
>833	Condition	 
>834	AndExpression	currStepInstance && currStepInstance -> is_sequentialized ( )
>835	CallExpression	currStepInstance -> is_sequentialized ( )
>836	ArgumentList	 
>837	Callee	currStepInstance -> is_sequentialized
>838	PtrMemberAccess	currStepInstance -> is_sequentialized
>839	Identifier	is_sequentialized
>840	Identifier	currStepInstance
>841	Identifier	currStepInstance
>842	ExpressionStatement	 
>843	CallExpression	CNC_ASSERT ( & stepInstance -> scheduler ( ) == this )
>844	ArgumentList	& stepInstance -> scheduler ( ) == this
>845	Argument	& stepInstance -> scheduler ( ) == this
>846	EqualityExpression	& stepInstance -> scheduler ( ) == this
>847	Identifier	this
>848	UnaryOp	& stepInstance -> scheduler ( )
>849	CallExpression	stepInstance -> scheduler ( )
>850	ArgumentList	 
>851	Callee	stepInstance -> scheduler
>852	PtrMemberAccess	stepInstance -> scheduler
>853	Identifier	scheduler
>854	Identifier	stepInstance
>855	UnaryOperator	&
>856	Callee	CNC_ASSERT
>857	Identifier	CNC_ASSERT
>858	ExpressionStatement	 
>859	CallExpression	CNC_ASSERT ( countit == true )
>860	ArgumentList	countit == true
>861	Argument	countit == true
>862	EqualityExpression	countit == true
>863	Identifier	true
>864	Identifier	countit
>865	Callee	CNC_ASSERT
>866	Identifier	CNC_ASSERT
>867	IfStatement	if ( stepInstance == currStepInstance )
>868	ReturnStatement	 
>869	Condition	 
>870	EqualityExpression	stepInstance == currStepInstance
>871	Identifier	currStepInstance
>872	Identifier	stepInstance
>895	FunctionDef	scheduler_i 
>896	ParameterList	schedulable * s
>897	Parameter	 
>898	Identifier	s
>899	ParameterType	schedulable *
>900	ReturnType	void
>901	CompoundStatement	 
>902	ExpressionStatement	 
>903	CallExpression	set_current ( NULL )
>904	ArgumentList	NULL
>905	Argument	NULL
>906	Identifier	NULL
>907	Callee	set_current
>908	Identifier	set_current
>909	DoStatement	do
>910	Condition	 
>911	EqualityExpression	s != NULL
>912	Identifier	NULL
>913	Identifier	s
>914	CompoundStatement	 
>915	IfStatement	if ( m_bypass == false )
>916	ElseStatement	else
>917	CompoundStatement	 
>918	ExpressionStatement	 
>919	CallExpression	CNC_ASSERT ( s == NULL || s -> m_succStep == NULL || s -> m_succStep == s )
>920	ArgumentList	s == NULL || s -> m_succStep == NULL || s -> m_succStep == s
>921	Argument	s == NULL || s -> m_succStep == NULL || s -> m_succStep == s
>922	OrExpression	s == NULL || s -> m_succStep == NULL || s -> m_succStep == s
>923	OrExpression	s -> m_succStep == NULL || s -> m_succStep == s
>924	EqualityExpression	s -> m_succStep == s
>925	Identifier	s
>926	PtrMemberAccess	s -> m_succStep
>927	Identifier	m_succStep
>928	Identifier	s
>929	EqualityExpression	s -> m_succStep == NULL
>930	Identifier	NULL
>931	PtrMemberAccess	s -> m_succStep
>932	Identifier	m_succStep
>933	Identifier	s
>934	EqualityExpression	s == NULL
>935	Identifier	NULL
>936	Identifier	s
>937	Callee	CNC_ASSERT
>938	Identifier	CNC_ASSERT
>939	ExpressionStatement	 
>940	AssignmentExpr	s = _newS == s ? NULL 
>941	ConditionalExpression	_newS == s ? NULL 
>942	Identifier	_newS
>943	Identifier	NULL
>944	Condition	_newS == s
>945	EqualityExpression	_newS == s
>946	Identifier	s
>947	Identifier	_newS
>948	Identifier	s
>949	CompoundStatement	 
>950	ExpressionStatement	 
>951	AssignmentExpr	s = NULL
>952	Identifier	NULL
>953	Identifier	s
>954	Condition	 
>955	EqualityExpression	m_bypass == false
>956	Identifier	false
>957	Identifier	m_bypass
>958	IfStatement	if ( _res == CNC_Success )
>959	ElseStatement	else
>960	CompoundStatement	 
>961	IfStatement	if ( s -> unsuspend ( ) && ! s -> done ( ) && _res != CNC_NeedsSequentialize )
>962	ElseStatement	else
>963	CompoundStatement	 
>964	IfStatement	if ( m_bypass == false )
>965	ElseStatement	else
>966	CompoundStatement	 
>967	IfStatement	if ( _newS && _newS != s )
>968	ExpressionStatement	 
>969	AssignmentExpr	_newS -> m_succStep = _newS
>970	Identifier	_newS
>971	PtrMemberAccess	_newS -> m_succStep
>972	Identifier	m_succStep
>973	Identifier	_newS
>974	Condition	 
>975	AndExpression	_newS && _newS != s
>976	EqualityExpression	_newS != s
>977	Identifier	s
>978	Identifier	_newS
>979	Identifier	_newS
>980	ExpressionStatement	 
>981	AssignmentExpr	s -> m_succStep = NULL
>982	Identifier	NULL
>983	PtrMemberAccess	s -> m_succStep
>984	Identifier	m_succStep
>985	Identifier	s
>986	ExpressionStatement	 
>987	CallExpression	CNC_ASSERT ( _newS == NULL || _newS -> m_succStep == NULL || s == _newS )
>988	ArgumentList	_newS == NULL || _newS -> m_succStep == NULL || s == _newS
>989	Argument	_newS == NULL || _newS -> m_succStep == NULL || s == _newS
>990	OrExpression	_newS == NULL || _newS -> m_succStep == NULL || s == _newS
>991	OrExpression	_newS -> m_succStep == NULL || s == _newS
>992	EqualityExpression	s == _newS
>993	Identifier	_newS
>994	Identifier	s
>995	EqualityExpression	_newS -> m_succStep == NULL
>996	Identifier	NULL
>997	PtrMemberAccess	_newS -> m_succStep
>998	Identifier	m_succStep
>999	Identifier	_newS
>1000	EqualityExpression	_newS == NULL
>1001	Identifier	NULL
>1002	Identifier	_newS
>1003	Callee	CNC_ASSERT
>1004	Identifier	CNC_ASSERT
>1005	CompoundStatement	 
>1006	Condition	 
>1007	EqualityExpression	m_bypass == false
>1008	Identifier	false
>1009	Identifier	m_bypass
>1010	ExpressionStatement	 
>1011	UnaryExpression	-- m_userStepsInFlight
>1012	Identifier	m_userStepsInFlight
>1013	IncDec	--
>1014	CompoundStatement	 
>1015	ContinueStatement	 
>1016	Condition	 
>1017	AndExpression	s -> unsuspend ( ) && ! s -> done ( ) && _res != CNC_NeedsSequentialize
>1018	AndExpression	! s -> done ( ) && _res != CNC_NeedsSequentialize
>1019	EqualityExpression	_res != CNC_NeedsSequentialize
>1020	Identifier	CNC_NeedsSequentialize
>1021	Identifier	_res
>1022	UnaryOp	! s -> done ( )
>1023	CallExpression	s -> done ( )
>1024	ArgumentList	 
>1025	Callee	s -> done
>1026	PtrMemberAccess	s -> done
>1027	Identifier	done
>1028	Identifier	s
>1029	UnaryOperator	!
>1030	CallExpression	s -> unsuspend ( )
>1031	ArgumentList	 
>1032	Callee	s -> unsuspend
>1033	PtrMemberAccess	s -> unsuspend
>1034	Identifier	unsuspend
>1035	Identifier	s
>1036	CompoundStatement	 
>1037	IfStatement	if ( ! s -> m_inPending )
>1038	CompoundStatement	 
>1039	ExpressionStatement	 
>1040	Identifier	s
>1041	Statement	 
>1042	Condition	 
>1043	UnaryOp	! s -> m_inPending
>1044	PtrMemberAccess	s -> m_inPending
>1045	Identifier	m_inPending
>1046	Identifier	s
>1047	UnaryOperator	!
>1048	ExpressionStatement	 
>1049	UnaryExpression	-- m_userStepsInFlight
>1050	Identifier	m_userStepsInFlight
>1051	IncDec	--
>1052	Condition	 
>1053	EqualityExpression	_res == CNC_Success
>1054	Identifier	CNC_Success
>1055	Identifier	_res
>1056	IdentifierDeclStatement	 
>1057	IdentifierDecl	* _newS = m_bypass == false ? NULL 
>1058	AssignmentExpr	* _newS = m_bypass == false ? NULL 
>1059	ConditionalExpression	m_bypass == false ? NULL 
>1060	PtrMemberAccess	s -> m_succStep
>1061	Identifier	m_succStep
>1062	Identifier	s
>1063	Identifier	NULL
>1064	Condition	m_bypass == false
>1065	EqualityExpression	m_bypass == false
>1066	Identifier	false
>1067	Identifier	m_bypass
>1068	Identifier	_newS
>1069	Identifier	_newS
>1070	IdentifierDeclType	schedulable *
>1071	IdentifierDeclStatement	 
>1072	IdentifierDecl	_res = s -> execute ( )
>1073	AssignmentExpr	_res = s -> execute ( )
>1074	CallExpression	s -> execute ( )
>1075	ArgumentList	 
>1076	Callee	s -> execute
>1077	PtrMemberAccess	s -> execute
>1078	Identifier	execute
>1079	Identifier	s
>1080	Identifier	_res
>1081	Identifier	_res
>1082	IdentifierDeclType	int
>1083	ExpressionStatement	 
>1084	CallExpression	s -> reset_was_suspended ( )
>1085	ArgumentList	 
>1086	Callee	s -> reset_was_suspended
>1087	PtrMemberAccess	s -> reset_was_suspended
>1088	Identifier	reset_was_suspended
>1089	Identifier	s
>1090	IfStatement	if ( s -> from_pending ( ) )
>1091	ElseStatement	else
>1092	CompoundStatement	 
>1093	ExpressionStatement	 
>1094	CallExpression	s -> suspend ( )
>1095	ArgumentList	 
>1096	Callee	s -> suspend
>1097	PtrMemberAccess	s -> suspend
>1098	Identifier	suspend
>1099	Identifier	s
>1100	CompoundStatement	 
>1101	ExpressionStatement	 
>1102	AssignmentExpr	s -> m_status = CNC_Prepared
>1103	Identifier	CNC_Prepared
>1104	PtrMemberAccess	s -> m_status
>1105	Identifier	m_status
>1106	Identifier	s
>1107	ExpressionStatement	 
>1108	CallExpression	CNC_ASSERT ( s -> num_suspends ( ) >= 1 )
>1109	ArgumentList	s -> num_suspends ( ) >= 1
>1110	Argument	s -> num_suspends ( ) >= 1
>1111	RelationalExpression	s -> num_suspends ( ) >= 1
>1112	PrimaryExpression	1
>1113	CallExpression	s -> num_suspends ( )
>1114	ArgumentList	 
>1115	Callee	s -> num_suspends
>1116	PtrMemberAccess	s -> num_suspends
>1117	Identifier	num_suspends
>1118	Identifier	s
>1119	Callee	CNC_ASSERT
>1120	Identifier	CNC_ASSERT
>1121	Condition	 
>1122	CallExpression	s -> from_pending ( )
>1123	ArgumentList	 
>1124	Callee	s -> from_pending
>1125	PtrMemberAccess	s -> from_pending
>1126	Identifier	from_pending
>1127	Identifier	s
>1128	ExpressionStatement	 
>1129	CallExpression	set_current ( s )
>1130	ArgumentList	s
>1131	Argument	s
>1132	Identifier	s
>1133	Callee	set_current
>1134	Identifier	set_current
>1158	FunctionDef	tbb_waiter 
>1159	ParameterList	 
>1160	ReturnType	tbb 
>1161	CompoundStatement	 
>1162	ReturnStatement	 
>1163	Identifier	NULL
>1164	ExpressionStatement	 
>1165	CallExpression	decrement_ref_count ( )
>1166	ArgumentList	 
>1167	Callee	decrement_ref_count
>1168	Identifier	decrement_ref_count
>1169	ExpressionStatement	 
>1170	CallExpression	m_sched -> wait_loop ( )
>1171	ArgumentList	 
>1172	Callee	m_sched -> wait_loop
>1173	PtrMemberAccess	m_sched -> wait_loop
>1174	Identifier	wait_loop
>1175	Identifier	m_sched
>1176	ExpressionStatement	 
>1177	CallExpression	increment_ref_count ( )
>1178	ArgumentList	 
>1179	Callee	increment_ref_count
>1180	Identifier	increment_ref_count
>1186	FunctionDef	scheduler_i 
>1187	ParameterList	 
>1188	ReturnType	void
>1189	CompoundStatement	 
>1190	ExpressionStatement	 
>1191	CallExpression	tbb 
>1192	ArgumentList	* _waitTask
>1193	Argument	* _waitTask
>1194	UnaryOp	* _waitTask
>1195	Identifier	_waitTask
>1196	UnaryOperator	*
>1197	Callee	tbb 
>1198	Identifier	tbb 
>1199	ExpressionStatement	 
>1200	CallExpression	tbb_waiter ( this )
>1201	ArgumentList	this
>1202	Argument	this
>1203	Identifier	this
>1204	Callee	tbb_waiter
>1205	Identifier	tbb_waiter
>1206	Statement	 
>1207	Statement	 
>1208	Statement	 
>1209	Statement	 
>1210	Statement	 
>1211	Statement	 
>1212	Statement	 
>1213	Statement	 
>1214	Statement	 
>1215	Statement	 
>1216	Statement	 
>1217	Statement	 
>1218	Statement	 
>1219	Statement	 
>1232	FunctionDef	scheduler_i 
>1233	ParameterList	bool send
>1234	Parameter	 
>1235	Identifier	send
>1236	ParameterType	bool
>1237	ReturnType	void
>1238	CompoundStatement	 
>1239	IfStatement	if ( send )
>1240	CompoundStatement	 
>1241	ExpressionStatement	 
>1242	CallExpression	m_context . bcast_msg ( _ser )
>1243	ArgumentList	_ser
>1244	Argument	_ser
>1245	Identifier	_ser
>1246	Callee	m_context . bcast_msg
>1247	MemberAccess	m_context . bcast_msg
>1248	Identifier	bcast_msg
>1249	Identifier	m_context
>1250	ExpressionStatement	 
>1251	BitAndExpression	( * _ser ) & PING & m_root
>1252	BitAndExpression	PING & m_root
>1253	Identifier	m_root
>1254	Identifier	PING
>1255	UnaryOp	* _ser
>1256	Identifier	_ser
>1257	UnaryOperator	*
>1258	ExpressionStatement	 
>1259	CallExpression	CNC_ASSERT ( m_root == 0 )
>1260	ArgumentList	m_root == 0
>1261	Argument	m_root == 0
>1262	EqualityExpression	m_root == 0
>1263	PrimaryExpression	0
>1264	Identifier	m_root
>1265	Callee	CNC_ASSERT
>1266	Identifier	CNC_ASSERT
>1267	IdentifierDeclStatement	 
>1268	IdentifierDecl	* _ser = m_context . new_serializer ( this )
>1269	AssignmentExpr	* _ser = m_context . new_serializer ( this )
>1270	CallExpression	m_context . new_serializer ( this )
>1271	ArgumentList	this
>1272	Argument	this
>1273	Identifier	this
>1274	Callee	m_context . new_serializer
>1275	MemberAccess	m_context . new_serializer
>1276	Identifier	new_serializer
>1277	Identifier	m_context
>1278	Identifier	_ser
>1279	Identifier	_ser
>1280	IdentifierDeclType	serializer *
>1281	Condition	 
>1282	Identifier	send
>1283	ExpressionStatement	 
>1284	CallExpression	CNC_ASSERT ( m_context . distributed ( ) )
>1285	ArgumentList	m_context . distributed ( )
>1286	Argument	m_context . distributed ( )
>1287	CallExpression	m_context . distributed ( )
>1288	ArgumentList	 
>1289	Callee	m_context . distributed
>1290	MemberAccess	m_context . distributed
>1291	Identifier	distributed
>1292	Identifier	m_context
>1293	Callee	CNC_ASSERT
>1294	Identifier	CNC_ASSERT
>1295	ExpressionStatement	 
>1296	CallExpression	CNC_ASSERT ( distributor 
>1297	ArgumentList	distributor 
>1298	Argument	distributor 
>1299	CallExpression	distributor 
>1300	ArgumentList	 
>1301	Callee	distributor 
>1302	Identifier	distributor 
>1303	Callee	CNC_ASSERT
>1304	Identifier	CNC_ASSERT
>1305	ExpressionStatement	 
>1306	CallExpression	CNC_ASSERT ( subscribed ( ) )
>1307	ArgumentList	subscribed ( )
>1308	Argument	subscribed ( )
>1309	CallExpression	subscribed ( )
>1310	ArgumentList	 
>1311	Callee	subscribed
>1312	Identifier	subscribed
>1313	Callee	CNC_ASSERT
>1314	Identifier	CNC_ASSERT
>1315	ExpressionStatement	 
>1316	ShiftExpression	std 
>1317	ShiftExpression	subscribed ( ) << \" \" << distributor 
>1318	ShiftExpression	\" \" << distributor 
>1319	ShiftExpression	distributor 
>1320	ShiftExpression	\" \" << m_context . distributed ( ) << std 
>1321	ShiftExpression	m_context . distributed ( ) << std 
>1322	Identifier	std 
>1323	CallExpression	m_context . distributed ( )
>1324	ArgumentList	 
>1325	Callee	m_context . distributed
>1326	MemberAccess	m_context . distributed
>1327	Identifier	distributed
>1328	Identifier	m_context
>1329	PrimaryExpression	\" \"
>1330	CallExpression	distributor 
>1331	ArgumentList	 
>1332	Callee	distributor 
>1333	Identifier	distributor 
>1334	PrimaryExpression	\" \"
>1335	CallExpression	subscribed ( )
>1336	ArgumentList	 
>1337	Callee	subscribed
>1338	Identifier	subscribed
>1339	Identifier	std 
>1352	FunctionDef	scheduler_i 
>1353	ParameterList	 
>1354	ReturnType	void
>1355	CompoundStatement	 
>1356	ForStatement	for ( int i = 0 ; i < 99999 && _curr_pend > 0 ; ++ i )
>1357	CompoundStatement	 
>1358	WhileStatement	while ( ! m_pendingSteps . empty ( ) )
>1359	CompoundStatement	 
>1360	IfStatement	if ( ! _s -> done ( ) )
>1361	ElseStatement	else
>1362	CompoundStatement	 
>1363	ExpressionStatement	 
>1364	Identifier	_s
>1365	Statement	 
>1366	CompoundStatement	 
>1367	ExpressionStatement	 
>1368	CallExpression	LOG_STATS ( m_context . stats ( ) , step_resumed ( ) )
>1369	ArgumentList	m_context . stats ( )
>1370	Argument	step_resumed ( )
>1371	CallExpression	step_resumed ( )
>1372	ArgumentList	 
>1373	Callee	step_resumed
>1374	Identifier	step_resumed
>1375	Argument	m_context . stats ( )
>1376	CallExpression	m_context . stats ( )
>1377	ArgumentList	 
>1378	Callee	m_context . stats
>1379	MemberAccess	m_context . stats
>1380	Identifier	stats
>1381	Identifier	m_context
>1382	Callee	LOG_STATS
>1383	Identifier	LOG_STATS
>1384	ExpressionStatement	 
>1385	CallExpression	schedule ( _s )
>1386	ArgumentList	_s
>1387	Argument	_s
>1388	Identifier	_s
>1389	Callee	schedule
>1390	Identifier	schedule
>1391	ExpressionStatement	 
>1392	AssignmentExpr	_s -> m_inPending = false
>1393	Identifier	false
>1394	PtrMemberAccess	_s -> m_inPending
>1395	Identifier	m_inPending
>1396	Identifier	_s
>1397	ExpressionStatement	 
>1398	AssignmentExpr	_s -> m_status = CNC_FromPending
>1399	Identifier	CNC_FromPending
>1400	PtrMemberAccess	_s -> m_status
>1401	Identifier	m_status
>1402	Identifier	_s
>1403	ExpressionStatement	 
>1404	CallExpression	CNC_ASSERT ( ! _s -> is_sequentialized ( ) )
>1405	ArgumentList	! _s -> is_sequentialized ( )
>1406	Argument	! _s -> is_sequentialized ( )
>1407	UnaryOp	! _s -> is_sequentialized ( )
>1408	CallExpression	_s -> is_sequentialized ( )
>1409	ArgumentList	 
>1410	Callee	_s -> is_sequentialized
>1411	PtrMemberAccess	_s -> is_sequentialized
>1412	Identifier	is_sequentialized
>1413	Identifier	_s
>1414	UnaryOperator	!
>1415	Callee	CNC_ASSERT
>1416	Identifier	CNC_ASSERT
>1417	Condition	 
>1418	UnaryOp	! _s -> done ( )
>1419	CallExpression	_s -> done ( )
>1420	ArgumentList	 
>1421	Callee	_s -> done
>1422	PtrMemberAccess	_s -> done
>1423	Identifier	done
>1424	Identifier	_s
>1425	UnaryOperator	!
>1426	ExpressionStatement	 
>1427	CallExpression	m_pendingSteps . pop_back ( )
>1428	ArgumentList	 
>1429	Callee	m_pendingSteps . pop_back
>1430	MemberAccess	m_pendingSteps . pop_back
>1431	Identifier	pop_back
>1432	Identifier	m_pendingSteps
>1433	IdentifierDeclStatement	 
>1434	IdentifierDecl	* _s = m_pendingSteps . back ( )
>1435	AssignmentExpr	* _s = m_pendingSteps . back ( )
>1436	CallExpression	m_pendingSteps . back ( )
>1437	ArgumentList	 
>1438	Callee	m_pendingSteps . back
>1439	MemberAccess	m_pendingSteps . back
>1440	Identifier	back
>1441	Identifier	m_pendingSteps
>1442	Identifier	_s
>1443	Identifier	_s
>1444	IdentifierDeclType	schedulable *
>1445	Condition	 
>1446	UnaryOp	! m_pendingSteps . empty ( )
>1447	CallExpression	m_pendingSteps . empty ( )
>1448	ArgumentList	 
>1449	Callee	m_pendingSteps . empty
>1450	MemberAccess	m_pendingSteps . empty
>1451	Identifier	empty
>1452	Identifier	m_pendingSteps
>1453	UnaryOperator	!
>1454	IdentifierDeclStatement	 
>1455	IdentifierDecl	_l ( m_mutex )
>1456	Identifier	m_mutex
>1457	Identifier	_l
>1458	IdentifierDeclType	mutex_t 
>1459	ExpressionStatement	 
>1460	AssignmentExpr	_curr_pend = m_pendingSteps . size ( ) + m_seqSteps . size ( )
>1461	AdditiveExpression	m_pendingSteps . size ( ) + m_seqSteps . size ( )
>1462	CallExpression	m_seqSteps . size ( )
>1463	ArgumentList	 
>1464	Callee	m_seqSteps . size
>1465	MemberAccess	m_seqSteps . size
>1466	Identifier	size
>1467	Identifier	m_seqSteps
>1468	CallExpression	m_pendingSteps . size ( )
>1469	ArgumentList	 
>1470	Callee	m_pendingSteps . size
>1471	MemberAccess	m_pendingSteps . size
>1472	Identifier	size
>1473	Identifier	m_pendingSteps
>1474	Identifier	_curr_pend
>1475	IfStatement	if ( ! m_seqSteps . empty ( ) )
>1476	CompoundStatement	 
>1477	DoStatement	do
>1478	Condition	 
>1479	UnaryOp	! _seq2 . empty ( )
>1480	CallExpression	_seq2 . empty ( )
>1481	ArgumentList	 
>1482	Callee	_seq2 . empty
>1483	MemberAccess	_seq2 . empty
>1484	Identifier	empty
>1485	Identifier	_seq2
>1486	UnaryOperator	!
>1487	CompoundStatement	 
>1488	ExpressionStatement	 
>1489	CallExpression	do_execute ( _s )
>1490	ArgumentList	_s
>1491	Argument	_s
>1492	Identifier	_s
>1493	Callee	do_execute
>1494	Identifier	do_execute
>1495	ExpressionStatement	 
>1496	UnaryExpression	++ m_userStepsInFlight
>1497	Identifier	m_userStepsInFlight
>1498	IncDec	++
>1499	ExpressionStatement	 
>1500	CallExpression	CNC_ASSERT ( _s -> is_sequentialized ( ) )
>1501	ArgumentList	_s -> is_sequentialized ( )
>1502	Argument	_s -> is_sequentialized ( )
>1503	CallExpression	_s -> is_sequentialized ( )
>1504	ArgumentList	 
>1505	Callee	_s -> is_sequentialized
>1506	PtrMemberAccess	_s -> is_sequentialized
>1507	Identifier	is_sequentialized
>1508	Identifier	_s
>1509	Callee	CNC_ASSERT
>1510	Identifier	CNC_ASSERT
>1511	ExpressionStatement	 
>1512	CallExpression	_seq2 . pop_back ( )
>1513	ArgumentList	 
>1514	Callee	_seq2 . pop_back
>1515	MemberAccess	_seq2 . pop_back
>1516	Identifier	pop_back
>1517	Identifier	_seq2
>1518	IdentifierDeclStatement	 
>1519	IdentifierDecl	* _s = _seq2 . back ( )
>1520	AssignmentExpr	* _s = _seq2 . back ( )
>1521	CallExpression	_seq2 . back ( )
>1522	ArgumentList	 
>1523	Callee	_seq2 . back
>1524	MemberAccess	_seq2 . back
>1525	Identifier	back
>1526	Identifier	_seq2
>1527	Identifier	_s
>1528	Identifier	_s
>1529	IdentifierDeclType	schedulable *
>1530	ExpressionStatement	 
>1531	CallExpression	_seq2 . swap ( m_seqSteps )
>1532	ArgumentList	m_seqSteps
>1533	Argument	m_seqSteps
>1534	Identifier	m_seqSteps
>1535	Callee	_seq2 . swap
>1536	MemberAccess	_seq2 . swap
>1537	Identifier	swap
>1538	Identifier	_seq2
>1539	Condition	 
>1540	UnaryOp	! m_seqSteps . empty ( )
>1541	CallExpression	m_seqSteps . empty ( )
>1542	ArgumentList	 
>1543	Callee	m_seqSteps . empty
>1544	MemberAccess	m_seqSteps . empty
>1545	Identifier	empty
>1546	Identifier	m_seqSteps
>1547	UnaryOperator	!
>1548	ForStatement	for ( pending_list_type 
>1549	CompoundStatement	 
>1550	IfStatement	if ( ! ( * i ) -> done ( ) )
>1551	CompoundStatement	 
>1552	ExpressionStatement	 
>1553	CallExpression	( * i ) -> suspend ( )
>1554	ArgumentList	 
>1555	Callee	( * i ) -> suspend
>1556	PtrMemberAccess	( * i ) -> suspend
>1557	Identifier	suspend
>1558	UnaryOp	* i
>1559	Identifier	i
>1560	UnaryOperator	*
>1561	ExpressionStatement	 
>1562	CallExpression	CNC_ASSERT ( ( * i ) -> is_sequentialized ( ) )
>1563	ArgumentList	( * i ) -> is_sequentialized ( )
>1564	Argument	( * i ) -> is_sequentialized ( )
>1565	CallExpression	( * i ) -> is_sequentialized ( )
>1566	ArgumentList	 
>1567	Callee	( * i ) -> is_sequentialized
>1568	PtrMemberAccess	( * i ) -> is_sequentialized
>1569	Identifier	is_sequentialized
>1570	UnaryOp	* i
>1571	Identifier	i
>1572	UnaryOperator	*
>1573	Callee	CNC_ASSERT
>1574	Identifier	CNC_ASSERT
>1575	Condition	 
>1576	UnaryOp	! ( * i ) -> done ( )
>1577	CallExpression	( * i ) -> done ( )
>1578	ArgumentList	 
>1579	Callee	( * i ) -> done
>1580	PtrMemberAccess	( * i ) -> done
>1581	Identifier	done
>1582	UnaryOp	* i
>1583	Identifier	i
>1584	UnaryOperator	*
>1585	UnaryOperator	!
>1586	UnaryExpression	 
>1587	Identifier	i
>1588	IncDec	++
>1589	Condition	 
>1590	EqualityExpression	i != m_seqSteps . end ( )
>1591	CallExpression	m_seqSteps . end ( )
>1592	ArgumentList	 
>1593	Callee	m_seqSteps . end
>1594	MemberAccess	m_seqSteps . end
>1595	Identifier	end
>1596	Identifier	m_seqSteps
>1597	Identifier	i
>1598	ForInit	 
>1599	IdentifierDeclStatement	pending_list_type 
>1600	IdentifierDecl	i = m_seqSteps . begin ( )
>1601	AssignmentExpr	i = m_seqSteps . begin ( )
>1602	CallExpression	m_seqSteps . begin ( )
>1603	ArgumentList	 
>1604	Callee	m_seqSteps . begin
>1605	MemberAccess	m_seqSteps . begin
>1606	Identifier	begin
>1607	Identifier	m_seqSteps
>1608	Identifier	i
>1609	Identifier	i
>1610	IdentifierDeclType	pending_list_type 
>1611	ForStatement	for ( pending_list_type 
>1612	CompoundStatement	 
>1613	IfStatement	if ( ! ( * i ) -> done ( ) )
>1614	CompoundStatement	 
>1615	ExpressionStatement	 
>1616	CallExpression	( * i ) -> suspend ( )
>1617	ArgumentList	 
>1618	Callee	( * i ) -> suspend
>1619	PtrMemberAccess	( * i ) -> suspend
>1620	Identifier	suspend
>1621	UnaryOp	* i
>1622	Identifier	i
>1623	UnaryOperator	*
>1624	ExpressionStatement	 
>1625	CallExpression	CNC_ASSERT ( ( * i ) -> is_pending ( ) )
>1626	ArgumentList	( * i ) -> is_pending ( )
>1627	Argument	( * i ) -> is_pending ( )
>1628	CallExpression	( * i ) -> is_pending ( )
>1629	ArgumentList	 
>1630	Callee	( * i ) -> is_pending
>1631	PtrMemberAccess	( * i ) -> is_pending
>1632	Identifier	is_pending
>1633	UnaryOp	* i
>1634	Identifier	i
>1635	UnaryOperator	*
>1636	Callee	CNC_ASSERT
>1637	Identifier	CNC_ASSERT
>1638	Condition	 
>1639	UnaryOp	! ( * i ) -> done ( )
>1640	CallExpression	( * i ) -> done ( )
>1641	ArgumentList	 
>1642	Callee	( * i ) -> done
>1643	PtrMemberAccess	( * i ) -> done
>1644	Identifier	done
>1645	UnaryOp	* i
>1646	Identifier	i
>1647	UnaryOperator	*
>1648	UnaryOperator	!
>1649	UnaryExpression	 
>1650	Identifier	i
>1651	IncDec	++
>1652	Condition	 
>1653	EqualityExpression	i != m_pendingSteps . end ( )
>1654	CallExpression	m_pendingSteps . end ( )
>1655	ArgumentList	 
>1656	Callee	m_pendingSteps . end
>1657	MemberAccess	m_pendingSteps . end
>1658	Identifier	end
>1659	Identifier	m_pendingSteps
>1660	Identifier	i
>1661	ForInit	 
>1662	IdentifierDeclStatement	pending_list_type 
>1663	IdentifierDecl	i = m_pendingSteps . begin ( )
>1664	AssignmentExpr	i = m_pendingSteps . begin ( )
>1665	CallExpression	m_pendingSteps . begin ( )
>1666	ArgumentList	 
>1667	Callee	m_pendingSteps . begin
>1668	MemberAccess	m_pendingSteps . begin
>1669	Identifier	begin
>1670	Identifier	m_pendingSteps
>1671	Identifier	i
>1672	Identifier	i
>1673	IdentifierDeclType	pending_list_type 
>1674	DoStatement	do
>1675	Condition	 
>1676	RelationalExpression	m_activeGraphs > 0
>1677	PrimaryExpression	0
>1678	Identifier	m_activeGraphs
>1679	CompoundStatement	 
>1680	ExpressionStatement	 
>1681	CallExpression	wait ( m_userStepsInFlight )
>1682	ArgumentList	m_userStepsInFlight
>1683	Argument	m_userStepsInFlight
>1684	Identifier	m_userStepsInFlight
>1685	Callee	wait
>1686	Identifier	wait
>1687	UnaryExpression	 
>1688	Identifier	i
>1689	IncDec	++
>1690	Condition	 
>1691	AndExpression	i < 99999 && _curr_pend > 0
>1692	RelationalExpression	_curr_pend > 0
>1693	PrimaryExpression	0
>1694	Identifier	_curr_pend
>1695	RelationalExpression	i < 99999
>1696	PrimaryExpression	99999
>1697	Identifier	i
>1698	ForInit	 
>1699	IdentifierDeclStatement	int i = 0 ;
>1700	IdentifierDecl	i = 0
>1701	AssignmentExpr	i = 0
>1702	PrimaryExpression	0
>1703	Identifier	i
>1704	Identifier	i
>1705	IdentifierDeclType	int
>1706	IdentifierDeclStatement	 
>1707	IdentifierDecl	_seq2
>1708	Identifier	_seq2
>1709	IdentifierDeclType	pending_list_type
>1710	IdentifierDeclStatement	 
>1711	IdentifierDecl	_curr_pend = 1
>1712	AssignmentExpr	_curr_pend = 1
>1713	PrimaryExpression	1
>1714	Identifier	_curr_pend
>1715	Identifier	_curr_pend
>1716	IdentifierDeclType	int
>1755	FunctionDef	_yield ()
>1756	ParameterList	 
>1757	ReturnType	static bool
>1758	CompoundStatement	 
>1759	ReturnStatement	 
>1760	Identifier	true
>1761	ExpressionStatement	 
>1762	CallExpression	tbb 
>1763	ArgumentList	tbb 
>1764	Argument	tbb 
>1765	CallExpression	tbb 
>1766	ArgumentList	0.0002
>1767	Argument	0.0002
>1768	PrimaryExpression	0.0002
>1769	Callee	tbb 
>1770	Identifier	tbb 
>1771	Callee	tbb 
>1772	Identifier	tbb 
>1778	FunctionDef	scheduler_i 
>1779	ParameterList	bool from_schedulable
>1780	Parameter	 
>1781	Identifier	from_schedulable
>1782	ParameterType	bool
>1783	ReturnType	void
>1784	CompoundStatement	 
>1785	IfStatement	if ( ! from_schedulable )
>1786	ExpressionStatement	 
>1787	UnaryExpression	-- m_userStepsInFlight
>1788	Identifier	m_userStepsInFlight
>1789	IncDec	--
>1790	Condition	 
>1791	UnaryOp	! from_schedulable
>1792	Identifier	from_schedulable
>1793	UnaryOperator	!
>1794	IfStatement	if ( subscribed ( ) && m_context . distributed ( ) )
>1795	ElseStatement	else
>1796	CompoundStatement	 
>1797	ExpressionStatement	 
>1798	CallExpression	CNC_ASSERT ( m_userStepsInFlight == 1 )
>1799	ArgumentList	m_userStepsInFlight == 1
>1800	Argument	m_userStepsInFlight == 1
>1801	EqualityExpression	m_userStepsInFlight == 1
>1802	PrimaryExpression	1
>1803	Identifier	m_userStepsInFlight
>1804	Callee	CNC_ASSERT
>1805	Identifier	CNC_ASSERT
>1806	ExpressionStatement	 
>1807	CallExpression	wait_all ( )
>1808	ArgumentList	 
>1809	Callee	wait_all
>1810	Identifier	wait_all
>1811	CompoundStatement	 
>1812	IfStatement	if ( distributor 
>1813	ElseStatement	else
>1814	CompoundStatement	 
>1815	CompoundStatement	 
>1816	ExpressionStatement	 
>1817	CallExpression	m_context . bcast_msg ( _ser )
>1818	ArgumentList	_ser
>1819	Argument	_ser
>1820	Identifier	_ser
>1821	Callee	m_context . bcast_msg
>1822	MemberAccess	m_context . bcast_msg
>1823	Identifier	bcast_msg
>1824	Identifier	m_context
>1825	ExpressionStatement	 
>1826	BitAndExpression	( * _ser ) & DONE
>1827	Identifier	DONE
>1828	UnaryOp	* _ser
>1829	Identifier	_ser
>1830	UnaryOperator	*
>1831	IdentifierDeclStatement	 
>1832	IdentifierDecl	* _ser = m_context . new_serializer ( this )
>1833	AssignmentExpr	* _ser = m_context . new_serializer ( this )
>1834	CallExpression	m_context . new_serializer ( this )
>1835	ArgumentList	this
>1836	Argument	this
>1837	Identifier	this
>1838	Callee	m_context . new_serializer
>1839	MemberAccess	m_context . new_serializer
>1840	Identifier	new_serializer
>1841	Identifier	m_context
>1842	Identifier	_ser
>1843	Identifier	_ser
>1844	IdentifierDeclType	serializer *
>1845	Condition	 
>1846	AndExpression	distributor 
>1847	EqualityExpression	m_root == distributor 
>1848	CallExpression	distributor 
>1849	ArgumentList	 
>1850	Callee	distributor 
>1851	Identifier	distributor 
>1852	Identifier	m_root
>1853	CallExpression	distributor 
>1854	ArgumentList	 
>1855	Callee	distributor 
>1856	Identifier	distributor 
>1857	ExpressionStatement	 
>1858	CallExpression	CNC_ASSERT ( m_userStepsInFlight == 1 || m_root != distributor 
>1859	ArgumentList	m_userStepsInFlight == 1 || m_root != distributor 
>1860	Argument	m_userStepsInFlight == 1 || m_root != distributor 
>1861	OrExpression	m_userStepsInFlight == 1 || m_root != distributor 
>1862	EqualityExpression	m_root != distributor 
>1863	CallExpression	distributor 
>1864	ArgumentList	 
>1865	Callee	distributor 
>1866	Identifier	distributor 
>1867	Identifier	m_root
>1868	EqualityExpression	m_userStepsInFlight == 1
>1869	PrimaryExpression	1
>1870	Identifier	m_userStepsInFlight
>1871	Callee	CNC_ASSERT
>1872	Identifier	CNC_ASSERT
>1873	DoStatement	do
>1874	Condition	 
>1875	OrExpression	fini_wait ( ) || ( m_root == distributor 
>1876	AndExpression	m_root == distributor 
>1877	RelationalExpression	distributor 
>1878	AdditiveExpression	2 * _nProcs - 2
>1879	PrimaryExpression	2
>1880	MultiplicativeExpression	2 * _nProcs
>1881	Identifier	_nProcs
>1882	PrimaryExpression	2
>1883	CallExpression	distributor 
>1884	ArgumentList	 
>1885	Callee	distributor 
>1886	Identifier	distributor 
>1887	EqualityExpression	m_root == distributor 
>1888	CallExpression	distributor 
>1889	ArgumentList	 
>1890	Callee	distributor 
>1891	Identifier	distributor 
>1892	Identifier	m_root
>1893	CallExpression	fini_wait ( )
>1894	ArgumentList	 
>1895	Callee	fini_wait
>1896	Identifier	fini_wait
>1897	CompoundStatement	 
>1898	ExpressionStatement	 
>1899	AssignmentExpr	send = m_root == distributor 
>1900	EqualityExpression	m_root == distributor 
>1901	CallExpression	distributor 
>1902	ArgumentList	 
>1903	Callee	distributor 
>1904	Identifier	distributor 
>1905	Identifier	m_root
>1906	Identifier	send
>1907	DoStatement	do
>1908	Condition	 
>1909	AndExpression	distributor 
>1910	CallExpression	_yield ( )
>1911	ArgumentList	 
>1912	Callee	_yield
>1913	Identifier	_yield
>1914	CallExpression	distributor 
>1915	ArgumentList	 
>1916	Callee	distributor 
>1917	Identifier	distributor 
>1918	CompoundStatement	 
>1919	ExpressionStatement	 
>1920	CallExpression	wait_all ( )
>1921	ArgumentList	 
>1922	Callee	wait_all
>1923	Identifier	wait_all
>1924	ExpressionStatement	 
>1925	CallExpression	init_wait ( send )
>1926	ArgumentList	send
>1927	Argument	send
>1928	Identifier	send
>1929	Callee	init_wait
>1930	Identifier	init_wait
>1931	IdentifierDeclStatement	 
>1932	IdentifierDecl	_nProcs = distributor 
>1933	AssignmentExpr	_nProcs = distributor 
>1934	CallExpression	distributor 
>1935	ArgumentList	 
>1936	Callee	distributor 
>1937	Identifier	distributor 
>1938	Identifier	_nProcs
>1939	Identifier	_nProcs
>1940	IdentifierDeclType	int
>1941	Condition	 
>1942	AndExpression	subscribed ( ) && m_context . distributed ( )
>1943	CallExpression	m_context . distributed ( )
>1944	ArgumentList	 
>1945	Callee	m_context . distributed
>1946	MemberAccess	m_context . distributed
>1947	Identifier	distributed
>1948	Identifier	m_context
>1949	CallExpression	subscribed ( )
>1950	ArgumentList	 
>1951	Callee	subscribed
>1952	Identifier	subscribed
>1953	IdentifierDeclStatement	 
>1954	IdentifierDecl	send = m_root == distributor 
>1955	AssignmentExpr	send = m_root == distributor 
>1956	AndExpression	m_root == distributor 
>1957	UnaryOp	! distributor 
>1958	CallExpression	distributor 
>1959	ArgumentList	 
>1960	Callee	distributor 
>1961	Identifier	distributor 
>1962	UnaryOperator	!
>1963	EqualityExpression	m_root == distributor 
>1964	CallExpression	distributor 
>1965	ArgumentList	 
>1966	Callee	distributor 
>1967	Identifier	distributor 
>1968	Identifier	m_root
>1969	Identifier	send
>1970	Identifier	send
>1971	IdentifierDeclType	bool
>1972	IfStatement	if ( ! from_schedulable )
>1973	ExpressionStatement	 
>1974	UnaryExpression	++ m_userStepsInFlight
>1975	Identifier	m_userStepsInFlight
>1976	IncDec	++
>1977	Condition	 
>1978	UnaryOp	! from_schedulable
>1979	Identifier	from_schedulable
>1980	UnaryOperator	!
>2002	FunctionDef	scheduler_i 
>2003	ParameterList	 
>2004	ReturnType	bool
>2005	CompoundStatement	 
>2006	IfStatement	if ( m_root != distributor 
>2007	ElseStatement	else
>2008	CompoundStatement	 
>2009	ReturnStatement	 
>2010	Identifier	false
>2011	ForStatement	for ( int i = 0 ; i < n ; ++ i )
>2012	ExpressionStatement	 
>2013	CallExpression	m_barrier -> pop ( _tmp )
>2014	ArgumentList	_tmp
>2015	Argument	_tmp
>2016	Identifier	_tmp
>2017	Callee	m_barrier -> pop
>2018	PtrMemberAccess	m_barrier -> pop
>2019	Identifier	pop
>2020	Identifier	m_barrier
>2021	UnaryExpression	 
>2022	Identifier	i
>2023	IncDec	++
>2024	Condition	 
>2025	RelationalExpression	i < n
>2026	Identifier	n
>2027	Identifier	i
>2028	ForInit	 
>2029	IdentifierDeclStatement	int i = 0 ;
>2030	IdentifierDecl	i = 0
>2031	AssignmentExpr	i = 0
>2032	PrimaryExpression	0
>2033	Identifier	i
>2034	Identifier	i
>2035	IdentifierDeclType	int
>2036	IdentifierDeclStatement	 
>2037	IdentifierDecl	_tmp
>2038	Identifier	_tmp
>2039	IdentifierDeclType	int
>2040	IdentifierDeclStatement	 
>2041	IdentifierDecl	n = distributor 
>2042	AssignmentExpr	n = distributor 
>2043	AdditiveExpression	distributor 
>2044	PrimaryExpression	1
>2045	CallExpression	distributor 
>2046	ArgumentList	 
>2047	Callee	distributor 
>2048	Identifier	distributor 
>2049	Identifier	n
>2050	Identifier	n
>2051	IdentifierDeclType	int
>2052	CompoundStatement	 
>2053	ReturnStatement	 
>2054	Identifier	false
>2055	IfStatement	if ( distributor 
>2056	CompoundStatement	 
>2057	ReturnStatement	 
>2058	EqualityExpression	_tmp == 0
>2059	PrimaryExpression	0
>2060	Identifier	_tmp
>2061	ExpressionStatement	 
>2062	CallExpression	m_barrier -> pop ( _tmp )
>2063	ArgumentList	_tmp
>2064	Argument	_tmp
>2065	Identifier	_tmp
>2066	Callee	m_barrier -> pop
>2067	PtrMemberAccess	m_barrier -> pop
>2068	Identifier	pop
>2069	Identifier	m_barrier
>2070	IdentifierDeclStatement	 
>2071	IdentifierDecl	_tmp
>2072	Identifier	_tmp
>2073	IdentifierDeclType	int
>2074	Condition	 
>2075	CallExpression	distributor 
>2076	ArgumentList	 
>2077	Callee	distributor 
>2078	Identifier	distributor 
>2079	ExpressionStatement	 
>2080	CallExpression	m_context . send_msg ( _ser , m_root )
>2081	ArgumentList	_ser
>2082	Argument	m_root
>2083	Identifier	m_root
>2084	Argument	_ser
>2085	Identifier	_ser
>2086	Callee	m_context . send_msg
>2087	MemberAccess	m_context . send_msg
>2088	Identifier	send_msg
>2089	Identifier	m_context
>2090	ExpressionStatement	 
>2091	BitAndExpression	( * _ser ) & PONG
>2092	Identifier	PONG
>2093	UnaryOp	* _ser
>2094	Identifier	_ser
>2095	UnaryOperator	*
>2096	IdentifierDeclStatement	 
>2097	IdentifierDecl	* _ser = m_context . new_serializer ( this )
>2098	AssignmentExpr	* _ser = m_context . new_serializer ( this )
>2099	CallExpression	m_context . new_serializer ( this )
>2100	ArgumentList	this
>2101	Argument	this
>2102	Identifier	this
>2103	Callee	m_context . new_serializer
>2104	MemberAccess	m_context . new_serializer
>2105	Identifier	new_serializer
>2106	Identifier	m_context
>2107	Identifier	_ser
>2108	Identifier	_ser
>2109	IdentifierDeclType	serializer *
>2110	ExpressionStatement	 
>2111	CallExpression	CNC_ASSERT ( m_root >= 0 )
>2112	ArgumentList	m_root >= 0
>2113	Argument	m_root >= 0
>2114	RelationalExpression	m_root >= 0
>2115	PrimaryExpression	0
>2116	Identifier	m_root
>2117	Callee	CNC_ASSERT
>2118	Identifier	CNC_ASSERT
>2119	Condition	 
>2120	EqualityExpression	m_root != distributor 
>2121	CallExpression	distributor 
>2122	ArgumentList	 
>2123	Callee	distributor 
>2124	Identifier	distributor 
>2125	Identifier	m_root
>2126	ExpressionStatement	 
>2127	CallExpression	CNC_ASSERT ( subscribed ( ) && distributor 
>2128	ArgumentList	subscribed ( ) && distributor 
>2129	Argument	subscribed ( ) && distributor 
>2130	AndExpression	subscribed ( ) && distributor 
>2131	AndExpression	distributor 
>2132	CallExpression	m_context . distributed ( )
>2133	ArgumentList	 
>2134	Callee	m_context . distributed
>2135	MemberAccess	m_context . distributed
>2136	Identifier	distributed
>2137	Identifier	m_context
>2138	CallExpression	distributor 
>2139	ArgumentList	 
>2140	Callee	distributor 
>2141	Identifier	distributor 
>2142	CallExpression	subscribed ( )
>2143	ArgumentList	 
>2144	Callee	subscribed
>2145	Identifier	subscribed
>2146	Callee	CNC_ASSERT
>2147	Identifier	CNC_ASSERT
>2167	FunctionDef	scheduler_i 
>2168	ParameterList	serializer * ser
>2169	Parameter	 
>2170	Identifier	ser
>2171	ParameterType	serializer *
>2172	ReturnType	void
>2173	CompoundStatement	 
>2174	SwitchStatement	switch ( _pingpong )
>2175	CompoundStatement	 
>2176	CompoundStatement	 
>2177	BreakStatement	 
>2178	ExpressionStatement	 
>2179	CallExpression	m_barrier -> push ( 1 )
>2180	ArgumentList	1
>2181	Argument	1
>2182	PrimaryExpression	1
>2183	Callee	m_barrier -> push
>2184	PtrMemberAccess	m_barrier -> push
>2185	Identifier	push
>2186	Identifier	m_barrier
>2187	ExpressionStatement	 
>2188	CallExpression	CNC_ASSERT ( distributor 
>2189	ArgumentList	distributor 
>2190	Argument	distributor 
>2191	CallExpression	distributor 
>2192	ArgumentList	 
>2193	Callee	distributor 
>2194	Identifier	distributor 
>2195	Callee	CNC_ASSERT
>2196	Identifier	CNC_ASSERT
>2197	ExpressionStatement	 
>2198	CallExpression	CNC_ASSERT ( _pingpong == DONE )
>2199	ArgumentList	_pingpong == DONE
>2200	Argument	_pingpong == DONE
>2201	EqualityExpression	_pingpong == DONE
>2202	Identifier	DONE
>2203	Identifier	_pingpong
>2204	Callee	CNC_ASSERT
>2205	Identifier	CNC_ASSERT
>2206	Label	 
>2207	Identifier	default
>2208	CompoundStatement	 
>2209	BreakStatement	 
>2210	ExpressionStatement	 
>2211	CallExpression	m_barrier -> push ( 1 )
>2212	ArgumentList	1
>2213	Argument	1
>2214	PrimaryExpression	1
>2215	Callee	m_barrier -> push
>2216	PtrMemberAccess	m_barrier -> push
>2217	Identifier	push
>2218	Identifier	m_barrier
>2219	ExpressionStatement	 
>2220	CallExpression	CNC_ASSERT ( m_barrier )
>2221	ArgumentList	m_barrier
>2222	Argument	m_barrier
>2223	Identifier	m_barrier
>2224	Callee	CNC_ASSERT
>2225	Identifier	CNC_ASSERT
>2226	Label	 
>2227	Identifier	PONG
>2228	CompoundStatement	 
>2229	BreakStatement	 
>2230	IfStatement	if ( distributor 
>2231	ElseStatement	else
>2232	CompoundStatement	 
>2233	ExpressionStatement	 
>2234	CallExpression	enqueue_waiter ( )
>2235	ArgumentList	 
>2236	Callee	enqueue_waiter
>2237	Identifier	enqueue_waiter
>2238	CompoundStatement	 
>2239	ExpressionStatement	 
>2240	CallExpression	m_barrier -> push ( 0 )
>2241	ArgumentList	0
>2242	Argument	0
>2243	PrimaryExpression	0
>2244	Callee	m_barrier -> push
>2245	PtrMemberAccess	m_barrier -> push
>2246	Identifier	push
>2247	Identifier	m_barrier
>2248	Condition	 
>2249	CallExpression	distributor 
>2250	ArgumentList	 
>2251	Callee	distributor 
>2252	Identifier	distributor 
>2253	ExpressionStatement	 
>2254	CallExpression	CNC_ASSERT ( m_root >= 0 )
>2255	ArgumentList	m_root >= 0
>2256	Argument	m_root >= 0
>2257	RelationalExpression	m_root >= 0
>2258	PrimaryExpression	0
>2259	Identifier	m_root
>2260	Callee	CNC_ASSERT
>2261	Identifier	CNC_ASSERT
>2262	ExpressionStatement	 
>2263	BitAndExpression	( * ser ) & m_root
>2264	Identifier	m_root
>2265	UnaryOp	* ser
>2266	Identifier	ser
>2267	UnaryOperator	*
>2268	Label	 
>2269	Identifier	PING
>2270	Condition	 
>2271	Identifier	_pingpong
>2272	ExpressionStatement	 
>2273	BitAndExpression	( * ser ) & _pingpong
>2274	Identifier	_pingpong
>2275	UnaryOp	* ser
>2276	Identifier	ser
>2277	UnaryOperator	*
>2278	IdentifierDeclStatement	 
>2279	IdentifierDecl	_pingpong
>2280	Identifier	_pingpong
>2281	IdentifierDeclType	char
>2282	ExpressionStatement	 
>2283	CallExpression	CNC_ASSERT ( subscribed ( ) && distributor 
>2284	ArgumentList	subscribed ( ) && distributor 
>2285	Argument	subscribed ( ) && distributor 
>2286	AndExpression	subscribed ( ) && distributor 
>2287	AndExpression	distributor 
>2288	CallExpression	m_context . distributed ( )
>2289	ArgumentList	 
>2290	Callee	m_context . distributed
>2291	MemberAccess	m_context . distributed
>2292	Identifier	distributed
>2293	Identifier	m_context
>2294	CallExpression	distributor 
>2295	ArgumentList	 
>2296	Callee	distributor 
>2297	Identifier	distributor 
>2298	CallExpression	subscribed ( )
>2299	ArgumentList	 
>2300	Callee	subscribed
>2301	Identifier	subscribed
>2302	Callee	CNC_ASSERT
>2303	Identifier	CNC_ASSERT
>2317	FunctionDef	round_robin_next (int numP)
>2318	ParameterList	int numP
>2319	Parameter	 
>2320	Identifier	numP
>2321	ParameterType	int
>2322	ReturnType	inline int
>2323	CompoundStatement	 
>2324	ReturnStatement	 
>2325	MultiplicativeExpression	++ _i % _n
>2326	Identifier	_n
>2327	UnaryExpression	++ _i
>2328	Identifier	_i
>2329	IncDec	++
>2330	IdentifierDeclStatement	 
>2331	IdentifierDecl	_i = s_currP . local ( )
>2332	AssignmentExpr	_i = s_currP . local ( )
>2333	CallExpression	s_currP . local ( )
>2334	ArgumentList	 
>2335	Callee	s_currP . local
>2336	MemberAccess	s_currP . local
>2337	Identifier	local
>2338	Identifier	s_currP
>2339	Identifier	_i
>2340	Identifier	_i
>2341	IdentifierDeclType	tbb 
>2342	IdentifierDeclStatement	 
>2343	IdentifierDecl	s_currP ( distributor 
>2344	CallExpression	distributor 
>2345	ArgumentList	 
>2346	Callee	distributor 
>2347	Identifier	distributor 
>2348	Identifier	s_currP
>2349	IdentifierDeclType	tbb 
>2350	Statement	 
>2351	IdentifierDeclStatement	 
>2352	IdentifierDecl	_n = distributor 
>2353	AssignmentExpr	_n = distributor 
>2354	CallExpression	distributor 
>2355	ArgumentList	 
>2356	Callee	distributor 
>2357	Identifier	distributor 
>2358	Identifier	_n
>2359	Identifier	_n
>2360	IdentifierDeclType	int
>2370	FunctionDef	scheduler_i 
>2371	ParameterList	int pot
>2372	Parameter	 
>2373	Identifier	pot
>2374	ParameterType	int
>2375	ReturnType	int
>2376	CompoundStatement	 
>2377	ReturnStatement	 
>2378	Identifier	pot
>2379	ExpressionStatement	 
>2380	CallExpression	CNC_ASSERT_MSG ( pot == COMPUTE_ON_ALL || pot == COMPUTE_ON_ALL_OTHERS || ( pot >= 0 && pot < _np ) , \"compute_on \
>2381	ArgumentList	pot == COMPUTE_ON_ALL || pot == COMPUTE_ON_ALL_OTHERS || ( pot >= 0 && pot < _np )
>2382	Argument	\"compute_on must return process id, CnC
>2383	PrimaryExpression	\"compute_on must return process id, CnC
>2384	Argument	pot == COMPUTE_ON_ALL || pot == COMPUTE_ON_ALL_OTHERS || ( pot >= 0 && pot < _np )
>2385	OrExpression	pot == COMPUTE_ON_ALL || pot == COMPUTE_ON_ALL_OTHERS || ( pot >= 0 && pot < _np )
>2386	OrExpression	pot == COMPUTE_ON_ALL_OTHERS || ( pot >= 0 && pot < _np )
>2387	AndExpression	pot >= 0 && pot < _np
>2388	RelationalExpression	pot < _np
>2389	Identifier	_np
>2390	Identifier	pot
>2391	RelationalExpression	pot >= 0
>2392	PrimaryExpression	0
>2393	Identifier	pot
>2394	EqualityExpression	pot == COMPUTE_ON_ALL_OTHERS
>2395	Identifier	COMPUTE_ON_ALL_OTHERS
>2396	Identifier	pot
>2397	EqualityExpression	pot == COMPUTE_ON_ALL
>2398	Identifier	COMPUTE_ON_ALL
>2399	Identifier	pot
>2400	Callee	CNC_ASSERT_MSG
>2401	Identifier	CNC_ASSERT_MSG
>2402	IfStatement	if ( pot != COMPUTE_ON_LOCAL && pot != _mypid && pot != COMPUTE_ON_ALL && pot != COMPUTE_ON_ALL_OTHERS )
>2403	ElseStatement	else
>2404	IfStatement	if ( pot == COMPUTE_ON_LOCAL )
>2405	CompoundStatement	 
>2406	ExpressionStatement	 
>2407	AssignmentExpr	pot = _mypid
>2408	Identifier	_mypid
>2409	Identifier	pot
>2410	Condition	 
>2411	EqualityExpression	pot == COMPUTE_ON_LOCAL
>2412	Identifier	COMPUTE_ON_LOCAL
>2413	Identifier	pot
>2414	CompoundStatement	 
>2415	IfStatement	if ( pot < 0 || pot >= _np )
>2416	CompoundStatement	 
>2417	ExpressionStatement	 
>2418	AssignmentExpr	pot = round_robin_next ( _np )
>2419	CallExpression	round_robin_next ( _np )
>2420	ArgumentList	_np
>2421	Argument	_np
>2422	Identifier	_np
>2423	Callee	round_robin_next
>2424	Identifier	round_robin_next
>2425	Identifier	pot
>2426	Condition	 
>2427	OrExpression	pot < 0 || pot >= _np
>2428	RelationalExpression	pot >= _np
>2429	Identifier	_np
>2430	Identifier	pot
>2431	RelationalExpression	pot < 0
>2432	PrimaryExpression	0
>2433	Identifier	pot
>2434	Condition	 
>2435	AndExpression	pot != COMPUTE_ON_LOCAL && pot != _mypid && pot != COMPUTE_ON_ALL && pot != COMPUTE_ON_ALL_OTHERS
>2436	AndExpression	pot != _mypid && pot != COMPUTE_ON_ALL && pot != COMPUTE_ON_ALL_OTHERS
>2437	AndExpression	pot != COMPUTE_ON_ALL && pot != COMPUTE_ON_ALL_OTHERS
>2438	EqualityExpression	pot != COMPUTE_ON_ALL_OTHERS
>2439	Identifier	COMPUTE_ON_ALL_OTHERS
>2440	Identifier	pot
>2441	EqualityExpression	pot != COMPUTE_ON_ALL
>2442	Identifier	COMPUTE_ON_ALL
>2443	Identifier	pot
>2444	EqualityExpression	pot != _mypid
>2445	Identifier	_mypid
>2446	Identifier	pot
>2447	EqualityExpression	pot != COMPUTE_ON_LOCAL
>2448	Identifier	COMPUTE_ON_LOCAL
>2449	Identifier	pot
>2450	IdentifierDeclStatement	 
>2451	IdentifierDecl	_np = distributor 
>2452	AssignmentExpr	_np = distributor 
>2453	CallExpression	distributor 
>2454	ArgumentList	 
>2455	Callee	distributor 
>2456	Identifier	distributor 
>2457	Identifier	_np
>2458	Identifier	_np
>2459	IdentifierDeclType	int
>2460	IdentifierDeclStatement	 
>2461	IdentifierDecl	_mypid = distributor 
>2462	AssignmentExpr	_mypid = distributor 
>2463	CallExpression	distributor 
>2464	ArgumentList	 
>2465	Callee	distributor 
>2466	Identifier	distributor 
>2467	Identifier	_mypid
>2468	Identifier	_mypid
>2469	IdentifierDeclType	int
<4=9,5
<5=6
<6=8,7
<26=31,27
<27=28
<28=30,29
<31=64,60,56,32
<32=44,33
<33=43,42,41,40,39,38,37,36,35,34
<44=45
<45=50,46
<46=48,47
<48=49
<50=55,51
<51=53,52
<53=54
<56=57
<57=59,58
<60=61
<61=63,62
<64=65
<65=69,66
<66=67
<67=68
<69=70
<80=83,82,81
<83=84
<84=85
<85=89,86
<86=88,87
<94=97,96,95
<101=103,102
<103=119,118,116,115,114,113,112,111,110,109,108,107,106,105,104
<116=117
<119=120
<120=122,121
<122=123
<123=125,124
<130=145,144,131
<131=141,138,135,132
<132=134,133
<135=137,136
<138=140,139
<141=143,142
<145=318,308,301,280,262,255,209,158,148,146
<146=147
<148=154,149
<149=150
<150=151
<151=153,152
<154=155
<155=157,156
<158=203,195,159
<159=160
<160=185,173,161
<161=162
<162=166,163
<163=164
<164=165
<166=167
<167=169,168
<169=170
<170=172,171
<173=174
<174=175
<175=183,176
<176=181,179,177
<177=178
<179=180
<181=182
<183=184
<185=186
<186=194,187
<187=191,188
<188=190,189
<191=193,192
<195=196
<196=197
<197=201,198
<198=199
<199=200
<201=202
<203=204
<204=208,205
<205=207,206
<209=244,210
<210=228,219,211
<211=215,212
<212=213
<213=214
<215=216
<216=218,217
<219=220
<220=224,221
<221=222
<222=223
<224=225
<225=227,226
<228=229
<229=242,230
<230=231
<231=232
<232=236,233
<233=235,234
<236=241,237
<237=239,238
<239=240
<242=243
<244=245
<245=252,246
<246=251,247
<247=249,248
<249=250
<252=254,253
<255=256
<256=260,257
<257=258
<258=259
<260=261
<262=263
<263=279,278,264
<264=277,265
<265=273,266
<266=271,269,267
<267=268
<269=270
<271=272
<273=274
<274=276,275
<280=281
<281=300,299,282
<282=298,283
<283=289,285,284
<285=287,286
<287=288
<289=290
<290=297,291
<291=293,292
<293=294
<294=296,295
<301=302
<302=306,303
<303=304
<304=305
<306=307
<308=309
<309=317,316,310
<310=315,311
<311=313,312
<313=314
<318=319
<319=321,320
<348=354,353,349
<349=350
<350=352,351
<354=384,373,366,357,355
<355=356
<357=358
<358=362,359
<359=360
<360=361
<362=363
<363=365,364
<366=369,367
<367=368
<369=370
<370=372,371
<373=382,374
<374=375
<375=376
<376=378,377
<378=379
<379=381,380
<382=383
<384=385
<385=393,392,386
<386=391,387
<387=389,388
<389=390
<406=411,407
<407=408
<408=410,409
<416=421,417
<417=418
<418=420,419
<426=435,434,427
<427=431,428
<428=430,429
<431=433,432
<435=436
<436=497,445,437
<437=438
<438=439
<439=440
<440=442,441
<442=444,443
<445=470,446
<446=447
<447=468,448
<448=454,449
<449=450
<450=452,451
<452=453
<454=455
<455=457,456
<457=458
<458=460,459
<460=462,461
<462=464,463
<464=465
<465=467,466
<468=469
<470=490,471
<471=472
<472=473
<473=481,474
<474=479,477,475
<475=476
<477=478
<479=480
<481=482
<482=484,483
<484=486,485
<486=487
<487=489,488
<490=491
<491=493,492
<493=494
<494=496,495
<497=498
<498=500,499
<516=522,521,517
<517=518
<518=520,519
<522=552,545,532,531,529,525,523
<523=524
<525=526
<526=528,527
<529=530
<532=533
<533=541,534
<534=539,535
<535=536
<536=538,537
<539=540
<541=542
<542=544,543
<545=546
<546=551,550,547
<547=549,548
<552=553
<553=559,558,554
<554=556,555
<556=557
<569=572,571,570
<572=573
<573=574
<574=576,575
<576=577
<577=579,578
<585=591,590,586
<586=587
<587=589,588
<591=592
<592=593
<593=597,594
<594=595
<595=596
<597=598
<598=600,599
<606=612,611,607
<607=608
<608=610,609
<612=653,647,628,619,613
<613=614
<614=616,615
<616=618,617
<619=620
<620=624,621
<621=622
<622=623
<624=625
<625=627,626
<628=638,629
<629=630
<630=634,631
<631=632
<632=633
<634=635
<635=637,636
<638=639
<639=641,640
<641=643,642
<643=644
<644=646,645
<647=648
<648=650,649
<650=652,651
<653=654
<654=657,656,655
<670=676,675,671
<671=672
<672=674,673
<676=711,705,686,677
<677=678
<678=682,679
<679=680
<680=681
<682=683
<683=685,684
<686=696,687
<687=688
<688=692,689
<689=690
<690=691
<692=693
<693=695,694
<696=697
<697=699,698
<699=701,700
<701=702
<702=704,703
<705=706
<706=708,707
<708=710,709
<711=712
<712=715,714,713
<726=738,737,727
<727=734,731,728
<728=730,729
<731=733,732
<734=736,735
<738=867,858,842,823,816,756,739
<739=740
<740=754,741
<741=747,742
<742=743
<743=745,744
<745=746
<747=748
<748=750,749
<750=751
<751=753,752
<754=755
<756=788,780,757
<757=758
<758=759
<759=776,768,760
<760=761
<761=762
<762=763
<763=765,764
<765=767,766
<768=769
<769=770
<770=774,771
<771=772
<772=773
<774=775
<776=777
<777=779,778
<780=781
<781=782
<782=786,783
<783=784
<784=785
<786=787
<788=789
<789=813,790
<790=812,791
<791=809,792
<792=803,793
<793=795,794
<795=802,796
<796=798,797
<798=799
<799=801,800
<803=805,804
<805=806
<806=808,807
<809=811,810
<813=815,814
<816=821,817
<817=818
<818=820,819
<821=822
<823=833,824
<824=826,825
<826=827
<827=831,828
<828=829
<829=830
<831=832
<833=834
<834=841,835
<835=837,836
<837=838
<838=840,839
<842=843
<843=856,844
<844=845
<845=846
<846=848,847
<848=855,849
<849=851,850
<851=852
<852=854,853
<856=857
<858=859
<859=865,860
<860=861
<861=862
<862=864,863
<865=866
<867=869,868
<869=870
<870=872,871
<895=901,900,896
<896=897
<897=899,898
<901=909,902
<902=903
<903=907,904
<904=905
<905=906
<907=908
<909=914,910
<910=911
<911=913,912
<914=1128,1090,1083,1071,1056,958,915
<915=954,949,916
<916=917
<917=939,918
<918=919
<919=937,920
<920=921
<921=922
<922=934,923
<923=929,924
<924=926,925
<926=928,927
<929=931,930
<931=933,932
<934=936,935
<937=938
<939=940
<940=948,941
<941=944,943,942
<944=945
<945=947,946
<949=950
<950=951
<951=953,952
<954=955
<955=957,956
<958=1052,1036,959
<959=960
<960=961
<961=1016,1014,962
<962=963
<963=1010,964
<964=1006,1005,965
<965=966
<966=986,980,967
<967=974,968
<968=969
<969=971,970
<971=973,972
<974=975
<975=979,976
<976=978,977
<980=981
<981=983,982
<983=985,984
<986=987
<987=1003,988
<988=989
<989=990
<990=1000,991
<991=995,992
<992=994,993
<995=997,996
<997=999,998
<1000=1002,1001
<1003=1004
<1006=1007
<1007=1009,1008
<1010=1011
<1011=1013,1012
<1014=1015
<1016=1017
<1017=1030,1018
<1018=1022,1019
<1019=1021,1020
<1022=1029,1023
<1023=1025,1024
<1025=1026
<1026=1028,1027
<1030=1032,1031
<1032=1033
<1033=1035,1034
<1036=1048,1037
<1037=1042,1038
<1038=1041,1039
<1039=1040
<1042=1043
<1043=1047,1044
<1044=1046,1045
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1055,1054
<1056=1057
<1057=1070,1069,1058
<1058=1068,1059
<1059=1064,1063,1060
<1060=1062,1061
<1064=1065
<1065=1067,1066
<1071=1072
<1072=1082,1081,1073
<1073=1080,1074
<1074=1076,1075
<1076=1077
<1077=1079,1078
<1083=1084
<1084=1086,1085
<1086=1087
<1087=1089,1088
<1090=1121,1100,1091
<1091=1092
<1092=1093
<1093=1094
<1094=1096,1095
<1096=1097
<1097=1099,1098
<1100=1107,1101
<1101=1102
<1102=1104,1103
<1104=1106,1105
<1107=1108
<1108=1119,1109
<1109=1110
<1110=1111
<1111=1113,1112
<1113=1115,1114
<1115=1116
<1116=1118,1117
<1119=1120
<1121=1122
<1122=1124,1123
<1124=1125
<1125=1127,1126
<1128=1129
<1129=1133,1130
<1130=1131
<1131=1132
<1133=1134
<1158=1161,1160,1159
<1161=1176,1169,1164,1162
<1162=1163
<1164=1165
<1165=1167,1166
<1167=1168
<1169=1170
<1170=1172,1171
<1172=1173
<1173=1175,1174
<1176=1177
<1177=1179,1178
<1179=1180
<1186=1189,1188,1187
<1189=1219,1218,1217,1216,1215,1214,1213,1212,1211,1210,1209,1208,1207,1206,1199,1190
<1190=1191
<1191=1197,1192
<1192=1193
<1193=1194
<1194=1196,1195
<1197=1198
<1199=1200
<1200=1204,1201
<1201=1202
<1202=1203
<1204=1205
<1232=1238,1237,1233
<1233=1234
<1234=1236,1235
<1238=1315,1305,1295,1283,1239
<1239=1281,1240
<1240=1267,1258,1250,1241
<1241=1242
<1242=1246,1243
<1243=1244
<1244=1245
<1246=1247
<1247=1249,1248
<1250=1251
<1251=1255,1252
<1252=1254,1253
<1255=1257,1256
<1258=1259
<1259=1265,1260
<1260=1261
<1261=1262
<1262=1264,1263
<1265=1266
<1267=1268
<1268=1280,1279,1269
<1269=1278,1270
<1270=1274,1271
<1271=1272
<1272=1273
<1274=1275
<1275=1277,1276
<1281=1282
<1283=1284
<1284=1293,1285
<1285=1286
<1286=1287
<1287=1289,1288
<1289=1290
<1290=1292,1291
<1293=1294
<1295=1296
<1296=1303,1297
<1297=1298
<1298=1299
<1299=1301,1300
<1301=1302
<1303=1304
<1305=1306
<1306=1313,1307
<1307=1308
<1308=1309
<1309=1311,1310
<1311=1312
<1313=1314
<1315=1316
<1316=1339,1317
<1317=1335,1318
<1318=1334,1319
<1319=1330,1320
<1320=1329,1321
<1321=1323,1322
<1323=1325,1324
<1325=1326
<1326=1328,1327
<1330=1332,1331
<1332=1333
<1335=1337,1336
<1337=1338
<1352=1355,1354,1353
<1355=1710,1706,1356
<1356=1698,1690,1687,1357
<1357=1674,1611,1548,1475,1459,1454,1358
<1358=1445,1359
<1359=1433,1426,1360
<1360=1417,1366,1361
<1361=1362
<1362=1365,1363
<1363=1364
<1366=1403,1397,1391,1384,1367
<1367=1368
<1368=1382,1369
<1369=1375,1370
<1370=1371
<1371=1373,1372
<1373=1374
<1375=1376
<1376=1378,1377
<1378=1379
<1379=1381,1380
<1382=1383
<1384=1385
<1385=1389,1386
<1386=1387
<1387=1388
<1389=1390
<1391=1392
<1392=1394,1393
<1394=1396,1395
<1397=1398
<1398=1400,1399
<1400=1402,1401
<1403=1404
<1404=1415,1405
<1405=1406
<1406=1407
<1407=1414,1408
<1408=1410,1409
<1410=1411
<1411=1413,1412
<1415=1416
<1417=1418
<1418=1425,1419
<1419=1421,1420
<1421=1422
<1422=1424,1423
<1426=1427
<1427=1429,1428
<1429=1430
<1430=1432,1431
<1433=1434
<1434=1444,1443,1435
<1435=1442,1436
<1436=1438,1437
<1438=1439
<1439=1441,1440
<1445=1446
<1446=1453,1447
<1447=1449,1448
<1449=1450
<1450=1452,1451
<1454=1455
<1455=1458,1457,1456
<1459=1460
<1460=1474,1461
<1461=1468,1462
<1462=1464,1463
<1464=1465
<1465=1467,1466
<1468=1470,1469
<1470=1471
<1471=1473,1472
<1475=1539,1476
<1476=1530,1477
<1477=1487,1478
<1478=1479
<1479=1486,1480
<1480=1482,1481
<1482=1483
<1483=1485,1484
<1487=1518,1511,1499,1495,1488
<1488=1489
<1489=1493,1490
<1490=1491
<1491=1492
<1493=1494
<1495=1496
<1496=1498,1497
<1499=1500
<1500=1509,1501
<1501=1502
<1502=1503
<1503=1505,1504
<1505=1506
<1506=1508,1507
<1509=1510
<1511=1512
<1512=1514,1513
<1514=1515
<1515=1517,1516
<1518=1519
<1519=1529,1528,1520
<1520=1527,1521
<1521=1523,1522
<1523=1524
<1524=1526,1525
<1530=1531
<1531=1535,1532
<1532=1533
<1533=1534
<1535=1536
<1536=1538,1537
<1539=1540
<1540=1547,1541
<1541=1543,1542
<1543=1544
<1544=1546,1545
<1548=1598,1589,1586,1549
<1549=1550
<1550=1575,1551
<1551=1561,1552
<1552=1553
<1553=1555,1554
<1555=1556
<1556=1558,1557
<1558=1560,1559
<1561=1562
<1562=1573,1563
<1563=1564
<1564=1565
<1565=1567,1566
<1567=1568
<1568=1570,1569
<1570=1572,1571
<1573=1574
<1575=1576
<1576=1585,1577
<1577=1579,1578
<1579=1580
<1580=1582,1581
<1582=1584,1583
<1586=1588,1587
<1589=1590
<1590=1597,1591
<1591=1593,1592
<1593=1594
<1594=1596,1595
<1598=1599
<1599=1600
<1600=1610,1609,1601
<1601=1608,1602
<1602=1604,1603
<1604=1605
<1605=1607,1606
<1611=1661,1652,1649,1612
<1612=1613
<1613=1638,1614
<1614=1624,1615
<1615=1616
<1616=1618,1617
<1618=1619
<1619=1621,1620
<1621=1623,1622
<1624=1625
<1625=1636,1626
<1626=1627
<1627=1628
<1628=1630,1629
<1630=1631
<1631=1633,1632
<1633=1635,1634
<1636=1637
<1638=1639
<1639=1648,1640
<1640=1642,1641
<1642=1643
<1643=1645,1644
<1645=1647,1646
<1649=1651,1650
<1652=1653
<1653=1660,1654
<1654=1656,1655
<1656=1657
<1657=1659,1658
<1661=1662
<1662=1663
<1663=1673,1672,1664
<1664=1671,1665
<1665=1667,1666
<1667=1668
<1668=1670,1669
<1674=1679,1675
<1675=1676
<1676=1678,1677
<1679=1680
<1680=1681
<1681=1685,1682
<1682=1683
<1683=1684
<1685=1686
<1687=1689,1688
<1690=1691
<1691=1695,1692
<1692=1694,1693
<1695=1697,1696
<1698=1699
<1699=1700
<1700=1705,1704,1701
<1701=1703,1702
<1706=1707
<1707=1709,1708
<1710=1711
<1711=1716,1715,1712
<1712=1714,1713
<1755=1758,1757,1756
<1758=1761,1759
<1759=1760
<1761=1762
<1762=1771,1763
<1763=1764
<1764=1765
<1765=1769,1766
<1766=1767
<1767=1768
<1769=1770
<1771=1772
<1778=1784,1783,1779
<1779=1780
<1780=1782,1781
<1784=1972,1953,1794,1785
<1785=1790,1786
<1786=1787
<1787=1789,1788
<1790=1791
<1791=1793,1792
<1794=1941,1811,1795
<1795=1796
<1796=1806,1797
<1797=1798
<1798=1804,1799
<1799=1800
<1800=1801
<1801=1803,1802
<1804=1805
<1806=1807
<1807=1809,1808
<1809=1810
<1811=1931,1873,1857,1812
<1812=1845,1815,1813
<1813=1814
<1815=1831,1825,1816
<1816=1817
<1817=1821,1818
<1818=1819
<1819=1820
<1821=1822
<1822=1824,1823
<1825=1826
<1826=1828,1827
<1828=1830,1829
<1831=1832
<1832=1844,1843,1833
<1833=1842,1834
<1834=1838,1835
<1835=1836
<1836=1837
<1838=1839
<1839=1841,1840
<1845=1846
<1846=1853,1847
<1847=1852,1848
<1848=1850,1849
<1850=1851
<1853=1855,1854
<1855=1856
<1857=1858
<1858=1871,1859
<1859=1860
<1860=1861
<1861=1868,1862
<1862=1867,1863
<1863=1865,1864
<1865=1866
<1868=1870,1869
<1871=1872
<1873=1897,1874
<1874=1875
<1875=1893,1876
<1876=1887,1877
<1877=1883,1878
<1878=1880,1879
<1880=1882,1881
<1883=1885,1884
<1885=1886
<1887=1892,1888
<1888=1890,1889
<1890=1891
<1893=1895,1894
<1895=1896
<1897=1924,1907,1898
<1898=1899
<1899=1906,1900
<1900=1905,1901
<1901=1903,1902
<1903=1904
<1907=1918,1908
<1908=1909
<1909=1914,1910
<1910=1912,1911
<1912=1913
<1914=1916,1915
<1916=1917
<1918=1919
<1919=1920
<1920=1922,1921
<1922=1923
<1924=1925
<1925=1929,1926
<1926=1927
<1927=1928
<1929=1930
<1931=1932
<1932=1940,1939,1933
<1933=1938,1934
<1934=1936,1935
<1936=1937
<1941=1942
<1942=1949,1943
<1943=1945,1944
<1945=1946
<1946=1948,1947
<1949=1951,1950
<1951=1952
<1953=1954
<1954=1971,1970,1955
<1955=1969,1956
<1956=1963,1957
<1957=1962,1958
<1958=1960,1959
<1960=1961
<1963=1968,1964
<1964=1966,1965
<1966=1967
<1972=1977,1973
<1973=1974
<1974=1976,1975
<1977=1978
<1978=1980,1979
<2002=2005,2004,2003
<2005=2126,2006
<2006=2119,2052,2007
<2007=2008
<2008=2040,2036,2011,2009
<2009=2010
<2011=2028,2024,2021,2012
<2012=2013
<2013=2017,2014
<2014=2015
<2015=2016
<2017=2018
<2018=2020,2019
<2021=2023,2022
<2024=2025
<2025=2027,2026
<2028=2029
<2029=2030
<2030=2035,2034,2031
<2031=2033,2032
<2036=2037
<2037=2039,2038
<2040=2041
<2041=2051,2050,2042
<2042=2049,2043
<2043=2045,2044
<2045=2047,2046
<2047=2048
<2052=2110,2096,2090,2079,2055,2053
<2053=2054
<2055=2074,2056
<2056=2070,2061,2057
<2057=2058
<2058=2060,2059
<2061=2062
<2062=2066,2063
<2063=2064
<2064=2065
<2066=2067
<2067=2069,2068
<2070=2071
<2071=2073,2072
<2074=2075
<2075=2077,2076
<2077=2078
<2079=2080
<2080=2086,2081
<2081=2084,2082
<2082=2083
<2084=2085
<2086=2087
<2087=2089,2088
<2090=2091
<2091=2093,2092
<2093=2095,2094
<2096=2097
<2097=2109,2108,2098
<2098=2107,2099
<2099=2103,2100
<2100=2101
<2101=2102
<2103=2104
<2104=2106,2105
<2110=2111
<2111=2117,2112
<2112=2113
<2113=2114
<2114=2116,2115
<2117=2118
<2119=2120
<2120=2125,2121
<2121=2123,2122
<2123=2124
<2126=2127
<2127=2146,2128
<2128=2129
<2129=2130
<2130=2142,2131
<2131=2138,2132
<2132=2134,2133
<2134=2135
<2135=2137,2136
<2138=2140,2139
<2140=2141
<2142=2144,2143
<2144=2145
<2146=2147
<2167=2173,2172,2168
<2168=2169
<2169=2171,2170
<2173=2282,2278,2272,2174
<2174=2270,2175
<2175=2268,2228,2226,2208,2206,2176
<2176=2197,2187,2178,2177
<2178=2179
<2179=2183,2180
<2180=2181
<2181=2182
<2183=2184
<2184=2186,2185
<2187=2188
<2188=2195,2189
<2189=2190
<2190=2191
<2191=2193,2192
<2193=2194
<2195=2196
<2197=2198
<2198=2204,2199
<2199=2200
<2200=2201
<2201=2203,2202
<2204=2205
<2206=2207
<2208=2219,2210,2209
<2210=2211
<2211=2215,2212
<2212=2213
<2213=2214
<2215=2216
<2216=2218,2217
<2219=2220
<2220=2224,2221
<2221=2222
<2222=2223
<2224=2225
<2226=2227
<2228=2262,2253,2230,2229
<2230=2248,2238,2231
<2231=2232
<2232=2233
<2233=2234
<2234=2236,2235
<2236=2237
<2238=2239
<2239=2240
<2240=2244,2241
<2241=2242
<2242=2243
<2244=2245
<2245=2247,2246
<2248=2249
<2249=2251,2250
<2251=2252
<2253=2254
<2254=2260,2255
<2255=2256
<2256=2257
<2257=2259,2258
<2260=2261
<2262=2263
<2263=2265,2264
<2265=2267,2266
<2268=2269
<2270=2271
<2272=2273
<2273=2275,2274
<2275=2277,2276
<2278=2279
<2279=2281,2280
<2282=2283
<2283=2302,2284
<2284=2285
<2285=2286
<2286=2298,2287
<2287=2294,2288
<2288=2290,2289
<2290=2291
<2291=2293,2292
<2294=2296,2295
<2296=2297
<2298=2300,2299
<2300=2301
<2302=2303
<2317=2323,2322,2318
<2318=2319
<2319=2321,2320
<2323=2351,2350,2342,2330,2324
<2324=2325
<2325=2327,2326
<2327=2329,2328
<2330=2331
<2331=2341,2340,2332
<2332=2339,2333
<2333=2335,2334
<2335=2336
<2336=2338,2337
<2342=2343
<2343=2349,2348,2344
<2344=2346,2345
<2346=2347
<2351=2352
<2352=2360,2359,2353
<2353=2358,2354
<2354=2356,2355
<2356=2357
<2370=2376,2375,2371
<2371=2372
<2372=2374,2373
<2376=2460,2450,2402,2379,2377
<2377=2378
<2379=2380
<2380=2400,2381
<2381=2384,2382
<2382=2383
<2384=2385
<2385=2397,2386
<2386=2394,2387
<2387=2391,2388
<2388=2390,2389
<2391=2393,2392
<2394=2396,2395
<2397=2399,2398
<2400=2401
<2402=2434,2414,2403
<2403=2404
<2404=2410,2405
<2405=2406
<2406=2407
<2407=2409,2408
<2410=2411
<2411=2413,2412
<2414=2415
<2415=2426,2416
<2416=2417
<2417=2418
<2418=2425,2419
<2419=2423,2420
<2420=2421
<2421=2422
<2423=2424
<2426=2427
<2427=2431,2428
<2428=2430,2429
<2431=2433,2432
<2434=2435
<2435=2447,2436
<2436=2444,2437
<2437=2441,2438
<2438=2440,2439
<2441=2443,2442
<2444=2446,2445
<2447=2449,2448
<2450=2451
<2451=2459,2458,2452
<2452=2457,2453
<2453=2455,2454
<2455=2456
<2460=2461
<2461=2469,2468,2462
<2462=2467,2463
<2463=2465,2464
<2465=2466
