>5	FunctionDef	FPScounter 
>6	ParameterList	float interval
>7	Parameter	 
>8	Identifier	interval
>9	ParameterType	float
>10	CompoundStatement	 
>15	FunctionDef	FPScounter 
>16	ParameterList	 
>17	ReturnType	float
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	m_fps
>21	IfStatement	if ( ( t - m_old_t ) > m_interval )
>22	CompoundStatement	 
>23	ExpressionStatement	 
>24	AssignmentExpr	m_old_t = ( float ) t
>25	CastExpression	( float ) t
>26	Identifier	t
>27	CastTarget	float
>28	Identifier	m_old_t
>29	ExpressionStatement	 
>30	AssignmentExpr	m_frames = 0
>31	PrimaryExpression	0
>32	Identifier	m_frames
>33	ExpressionStatement	 
>34	AssignmentExpr	m_fps = m_frames / ( t - m_old_t )
>35	MultiplicativeExpression	m_frames / ( t - m_old_t )
>36	AdditiveExpression	t - m_old_t
>37	Identifier	m_old_t
>38	Identifier	t
>39	Identifier	m_frames
>40	Identifier	m_fps
>41	Condition	 
>42	RelationalExpression	( t - m_old_t ) > m_interval
>43	Identifier	m_interval
>44	AdditiveExpression	t - m_old_t
>45	Identifier	m_old_t
>46	Identifier	t
>47	IdentifierDeclStatement	 
>48	IdentifierDecl	t = ( float ) glfwGetTime ( )
>49	AssignmentExpr	t = ( float ) glfwGetTime ( )
>50	CastExpression	( float ) glfwGetTime ( )
>51	CallExpression	glfwGetTime ( )
>52	ArgumentList	 
>53	Callee	glfwGetTime
>54	Identifier	glfwGetTime
>55	CastTarget	float
>56	Identifier	t
>57	Identifier	t
>58	IdentifierDeclType	float
>59	ExpressionStatement	 
>60	IncDecOp	m_frames ++
>61	IncDec	++
>62	Identifier	m_frames
>72	FunctionDef	vec2_ary_to_double_ary (vec2_ary_t v2ary)
>73	ParameterList	vec2_ary_t v2ary
>74	Parameter	 
>75	Identifier	v2ary
>76	ParameterType	vec2_ary_t
>77	ReturnType	double_ary_t
>78	CompoundStatement	 
>79	ReturnStatement	 
>80	Identifier	out
>81	ForStatement	for ( vec2_ary_t 
>82	CompoundStatement	 
>83	ExpressionStatement	 
>84	CallExpression	out . push_back ( ( * it ) [ 1 ] )
>85	ArgumentList	( * it ) [ 1 ]
>86	Argument	( * it ) [ 1 ]
>87	ArrayIndexing	( * it ) [ 1 ]
>88	PrimaryExpression	1
>89	UnaryOp	* it
>90	Identifier	it
>91	UnaryOperator	*
>92	Callee	out . push_back
>93	MemberAccess	out . push_back
>94	Identifier	push_back
>95	Identifier	out
>96	ExpressionStatement	 
>97	CallExpression	out . push_back ( ( * it ) [ 0 ] )
>98	ArgumentList	( * it ) [ 0 ]
>99	Argument	( * it ) [ 0 ]
>100	ArrayIndexing	( * it ) [ 0 ]
>101	PrimaryExpression	0
>102	UnaryOp	* it
>103	Identifier	it
>104	UnaryOperator	*
>105	Callee	out . push_back
>106	MemberAccess	out . push_back
>107	Identifier	push_back
>108	Identifier	out
>109	UnaryExpression	 
>110	Identifier	it
>111	IncDec	++
>112	Condition	 
>113	EqualityExpression	it != v2ary . end ( )
>114	CallExpression	v2ary . end ( )
>115	ArgumentList	 
>116	Callee	v2ary . end
>117	MemberAccess	v2ary . end
>118	Identifier	end
>119	Identifier	v2ary
>120	Identifier	it
>121	ForInit	 
>122	IdentifierDeclStatement	vec2_ary_t 
>123	IdentifierDecl	it = v2ary . begin ( )
>124	AssignmentExpr	it = v2ary . begin ( )
>125	CallExpression	v2ary . begin ( )
>126	ArgumentList	 
>127	Callee	v2ary . begin
>128	MemberAccess	v2ary . begin
>129	Identifier	begin
>130	Identifier	v2ary
>131	Identifier	it
>132	Identifier	it
>133	IdentifierDeclType	vec2_ary_t 
>134	ExpressionStatement	 
>135	CallExpression	out . reserve ( v2ary . size ( ) * 2 )
>136	ArgumentList	v2ary . size ( ) * 2
>137	Argument	v2ary . size ( ) * 2
>138	MultiplicativeExpression	v2ary . size ( ) * 2
>139	PrimaryExpression	2
>140	CallExpression	v2ary . size ( )
>141	ArgumentList	 
>142	Callee	v2ary . size
>143	MemberAccess	v2ary . size
>144	Identifier	size
>145	Identifier	v2ary
>146	Callee	out . reserve
>147	MemberAccess	out . reserve
>148	Identifier	reserve
>149	Identifier	out
>150	IdentifierDeclStatement	 
>151	IdentifierDecl	out
>152	Identifier	out
>153	IdentifierDeclType	double_ary_t
>165	FunctionDef	vec2_ary_to_float_ary (vec2_ary_t v2ary)
>166	ParameterList	vec2_ary_t v2ary
>167	Parameter	 
>168	Identifier	v2ary
>169	ParameterType	vec2_ary_t
>170	ReturnType	float_ary_t
>171	CompoundStatement	 
>172	ReturnStatement	 
>173	Identifier	out
>174	ForStatement	for ( vec2_ary_t 
>175	CompoundStatement	 
>176	ExpressionStatement	 
>177	CallExpression	out . push_back ( ( * it ) [ 1 ] )
>178	ArgumentList	( * it ) [ 1 ]
>179	Argument	( * it ) [ 1 ]
>180	ArrayIndexing	( * it ) [ 1 ]
>181	PrimaryExpression	1
>182	UnaryOp	* it
>183	Identifier	it
>184	UnaryOperator	*
>185	Callee	out . push_back
>186	MemberAccess	out . push_back
>187	Identifier	push_back
>188	Identifier	out
>189	ExpressionStatement	 
>190	CallExpression	out . push_back ( ( * it ) [ 0 ] )
>191	ArgumentList	( * it ) [ 0 ]
>192	Argument	( * it ) [ 0 ]
>193	ArrayIndexing	( * it ) [ 0 ]
>194	PrimaryExpression	0
>195	UnaryOp	* it
>196	Identifier	it
>197	UnaryOperator	*
>198	Callee	out . push_back
>199	MemberAccess	out . push_back
>200	Identifier	push_back
>201	Identifier	out
>202	UnaryExpression	 
>203	Identifier	it
>204	IncDec	++
>205	Condition	 
>206	EqualityExpression	it != v2ary . end ( )
>207	CallExpression	v2ary . end ( )
>208	ArgumentList	 
>209	Callee	v2ary . end
>210	MemberAccess	v2ary . end
>211	Identifier	end
>212	Identifier	v2ary
>213	Identifier	it
>214	ForInit	 
>215	IdentifierDeclStatement	vec2_ary_t 
>216	IdentifierDecl	it = v2ary . begin ( )
>217	AssignmentExpr	it = v2ary . begin ( )
>218	CallExpression	v2ary . begin ( )
>219	ArgumentList	 
>220	Callee	v2ary . begin
>221	MemberAccess	v2ary . begin
>222	Identifier	begin
>223	Identifier	v2ary
>224	Identifier	it
>225	Identifier	it
>226	IdentifierDeclType	vec2_ary_t 
>227	ExpressionStatement	 
>228	CallExpression	out . reserve ( v2ary . size ( ) * 2 )
>229	ArgumentList	v2ary . size ( ) * 2
>230	Argument	v2ary . size ( ) * 2
>231	MultiplicativeExpression	v2ary . size ( ) * 2
>232	PrimaryExpression	2
>233	CallExpression	v2ary . size ( )
>234	ArgumentList	 
>235	Callee	v2ary . size
>236	MemberAccess	v2ary . size
>237	Identifier	size
>238	Identifier	v2ary
>239	Callee	out . reserve
>240	MemberAccess	out . reserve
>241	Identifier	reserve
>242	Identifier	out
>243	IdentifierDeclStatement	 
>244	IdentifierDecl	out
>245	Identifier	out
>246	IdentifierDeclType	float_ary_t
>258	FunctionDef	get_time_con (float c)
>259	ParameterList	float c
>260	Parameter	 
>261	Identifier	c
>262	ParameterType	float
>263	ReturnType	float
>264	CompoundStatement	 
>265	ReturnStatement	 
>266	CallExpression	get_time_con_time ( ( float ) g_timer -> now ( ) , c )
>267	ArgumentList	( float ) g_timer -> now ( )
>268	Argument	c
>269	Identifier	c
>270	Argument	( float ) g_timer -> now ( )
>271	CastExpression	( float ) g_timer -> now ( )
>272	CallExpression	g_timer -> now ( )
>273	ArgumentList	 
>274	Callee	g_timer -> now
>275	PtrMemberAccess	g_timer -> now
>276	Identifier	now
>277	Identifier	g_timer
>278	CastTarget	float
>279	Callee	get_time_con_time
>280	Identifier	get_time_con_time
>289	FunctionDef	get_time_con_time (float t , float c)
>290	ParameterList	float t , float c
>291	Parameter	 
>292	Identifier	c
>293	ParameterType	float
>294	Parameter	 
>295	Identifier	t
>296	ParameterType	float
>297	ReturnType	float
>298	CompoundStatement	 
>299	ReturnStatement	 
>300	MultiplicativeExpression	fract * c
>301	Identifier	c
>302	Identifier	fract
>303	IdentifierDeclStatement	 
>304	IdentifierDecl	fract = modf ( tc , & tmp )
>305	AssignmentExpr	fract = modf ( tc , & tmp )
>306	CallExpression	modf ( tc , & tmp )
>307	ArgumentList	tc
>308	Argument	& tmp
>309	UnaryOp	& tmp
>310	Identifier	tmp
>311	UnaryOperator	&
>312	Argument	tc
>313	Identifier	tc
>314	Callee	modf
>315	Identifier	modf
>316	Identifier	fract
>317	Identifier	fract
>318	IdentifierDeclType	float
>319	IdentifierDeclStatement	 
>320	IdentifierDecl	tc = t / c
>321	AssignmentExpr	tc = t / c
>322	MultiplicativeExpression	t / c
>323	Identifier	c
>324	Identifier	t
>325	Identifier	tc
>326	Identifier	tc
>327	IdentifierDeclType	float
>328	IdentifierDeclStatement	 
>329	IdentifierDecl	tmp
>330	Identifier	tmp
>331	IdentifierDeclType	float
>342	FunctionDef	save_texture_as_ppm (GLuint texid , const char * fname)
>343	ParameterList	GLuint texid , const char * fname
>344	Parameter	 
>345	Identifier	fname
>346	ParameterType	const char *
>347	Parameter	 
>348	Identifier	texid
>349	ParameterType	GLuint
>350	ReturnType	void
>351	CompoundStatement	 
>352	ExpressionStatement	 
>353	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>354	ArgumentList	GL_TEXTURE_2D
>355	Argument	0
>356	PrimaryExpression	0
>357	Argument	GL_TEXTURE_2D
>358	Identifier	GL_TEXTURE_2D
>359	Callee	glBindTexture
>360	Identifier	glBindTexture
>361	ExpressionStatement	 
>362	CallExpression	fclose ( f )
>363	ArgumentList	f
>364	Argument	f
>365	Identifier	f
>366	Callee	fclose
>367	Identifier	fclose
>368	ExpressionStatement	 
>369	CallExpression	fwrite ( data , 1 , width * height * 3 , f )
>370	ArgumentList	data
>371	Argument	f
>372	Identifier	f
>373	Argument	width * height * 3
>374	MultiplicativeExpression	width * height * 3
>375	MultiplicativeExpression	height * 3
>376	PrimaryExpression	3
>377	Identifier	height
>378	Identifier	width
>379	Argument	1
>380	PrimaryExpression	1
>381	Argument	data
>382	Identifier	data
>383	Callee	fwrite
>384	Identifier	fwrite
>385	ExpressionStatement	 
>386	CallExpression	fprintf ( f , \"P6\n%i %i\n255\n\" , width , height )
>387	ArgumentList	f
>388	Argument	height
>389	Identifier	height
>390	Argument	width
>391	Identifier	width
>392	Argument	\"P6\n%i %i\n255\n\"
>393	PrimaryExpression	\"P6\n%i %i\n255\n\"
>394	Argument	f
>395	Identifier	f
>396	Callee	fprintf
>397	Identifier	fprintf
>398	IfStatement	if ( ! f )
>399	ReturnStatement	 
>400	Condition	 
>401	UnaryOp	! f
>402	Identifier	f
>403	UnaryOperator	!
>404	IdentifierDeclStatement	 
>405	IdentifierDecl	* f = fopen ( fname , \"wb\" )
>406	AssignmentExpr	* f = fopen ( fname , \"wb\" )
>407	CallExpression	fopen ( fname , \"wb\" )
>408	ArgumentList	fname
>409	Argument	\"wb\"
>410	PrimaryExpression	\"wb\"
>411	Argument	fname
>412	Identifier	fname
>413	Callee	fopen
>414	Identifier	fopen
>415	Identifier	f
>416	Identifier	f
>417	IdentifierDeclType	FILE *
>418	ExpressionStatement	 
>419	CallExpression	glGetTexImage ( GL_TEXTURE_2D , 0 , GL_RGB , GL_UNSIGNED_BYTE , data )
>420	ArgumentList	GL_TEXTURE_2D
>421	Argument	data
>422	Identifier	data
>423	Argument	GL_UNSIGNED_BYTE
>424	Identifier	GL_UNSIGNED_BYTE
>425	Argument	GL_RGB
>426	Identifier	GL_RGB
>427	Argument	0
>428	PrimaryExpression	0
>429	Argument	GL_TEXTURE_2D
>430	Identifier	GL_TEXTURE_2D
>431	Callee	glGetTexImage
>432	Identifier	glGetTexImage
>433	IdentifierDeclStatement	 
>434	IdentifierDecl	* data = new unsigned char [ width * height * 3 ]
>435	AssignmentExpr	* data = new unsigned char [ width * height * 3 ]
>436	MultiplicativeExpression	width * height * 3
>437	MultiplicativeExpression	height * 3
>438	PrimaryExpression	3
>439	Identifier	height
>440	Identifier	width
>441	Identifier	data
>442	Identifier	data
>443	IdentifierDeclType	unsigned char *
>444	ExpressionStatement	 
>445	CallExpression	glGetTexLevelParameteriv ( GL_TEXTURE_2D , 0 , GL_TEXTURE_HEIGHT , & height )
>446	ArgumentList	GL_TEXTURE_2D
>447	Argument	& height
>448	UnaryOp	& height
>449	Identifier	height
>450	UnaryOperator	&
>451	Argument	GL_TEXTURE_HEIGHT
>452	Identifier	GL_TEXTURE_HEIGHT
>453	Argument	0
>454	PrimaryExpression	0
>455	Argument	GL_TEXTURE_2D
>456	Identifier	GL_TEXTURE_2D
>457	Callee	glGetTexLevelParameteriv
>458	Identifier	glGetTexLevelParameteriv
>459	ExpressionStatement	 
>460	CallExpression	glGetTexLevelParameteriv ( GL_TEXTURE_2D , 0 , GL_TEXTURE_WIDTH , & width )
>461	ArgumentList	GL_TEXTURE_2D
>462	Argument	& width
>463	UnaryOp	& width
>464	Identifier	width
>465	UnaryOperator	&
>466	Argument	GL_TEXTURE_WIDTH
>467	Identifier	GL_TEXTURE_WIDTH
>468	Argument	0
>469	PrimaryExpression	0
>470	Argument	GL_TEXTURE_2D
>471	Identifier	GL_TEXTURE_2D
>472	Callee	glGetTexLevelParameteriv
>473	Identifier	glGetTexLevelParameteriv
>474	ExpressionStatement	 
>475	CallExpression	glBindTexture ( GL_TEXTURE_2D , texid )
>476	ArgumentList	GL_TEXTURE_2D
>477	Argument	texid
>478	Identifier	texid
>479	Argument	GL_TEXTURE_2D
>480	Identifier	GL_TEXTURE_2D
>481	Callee	glBindTexture
>482	Identifier	glBindTexture
>483	IdentifierDeclStatement	 
>484	IdentifierDecl	height = 0
>485	AssignmentExpr	height = 0
>486	PrimaryExpression	0
>487	Identifier	height
>488	Identifier	height
>489	IdentifierDeclType	GLint
>490	IdentifierDecl	width = 0
>491	AssignmentExpr	width = 0
>492	PrimaryExpression	0
>493	Identifier	width
>494	Identifier	width
>495	IdentifierDeclType	GLint
>513	FunctionDef	draw_textured_quad (float size , GLuint texture , bool blend)
>514	ParameterList	float size , GLuint texture , bool blend
>515	Parameter	 
>516	Identifier	blend
>517	ParameterType	bool
>518	Parameter	 
>519	Identifier	texture
>520	ParameterType	GLuint
>521	Parameter	 
>522	Identifier	size
>523	ParameterType	float
>524	ReturnType	void
>525	CompoundStatement	 
>526	IfStatement	if ( texture )
>527	ExpressionStatement	 
>528	CallExpression	glDisable ( GL_TEXTURE_2D )
>529	ArgumentList	GL_TEXTURE_2D
>530	Argument	GL_TEXTURE_2D
>531	Identifier	GL_TEXTURE_2D
>532	Callee	glDisable
>533	Identifier	glDisable
>534	Condition	 
>535	Identifier	texture
>536	IfStatement	if ( blend )
>537	ExpressionStatement	 
>538	CallExpression	glDisable ( GL_BLEND )
>539	ArgumentList	GL_BLEND
>540	Argument	GL_BLEND
>541	Identifier	GL_BLEND
>542	Callee	glDisable
>543	Identifier	glDisable
>544	Condition	 
>545	Identifier	blend
>546	ExpressionStatement	 
>547	CallExpression	glEnd ( )
>548	ArgumentList	 
>549	Callee	glEnd
>550	Identifier	glEnd
>551	ExpressionStatement	 
>552	CallExpression	glVertex2f ( size , - size )
>553	ArgumentList	size
>554	Argument	- size
>555	UnaryOp	- size
>556	Identifier	size
>557	UnaryOperator	-
>558	Argument	size
>559	Identifier	size
>560	Callee	glVertex2f
>561	Identifier	glVertex2f
>562	ExpressionStatement	 
>563	CallExpression	glTexCoord2f ( 1.0 , 0.0 )
>564	ArgumentList	1.0
>565	Argument	0.0
>566	PrimaryExpression	0.0
>567	Argument	1.0
>568	PrimaryExpression	1.0
>569	Callee	glTexCoord2f
>570	Identifier	glTexCoord2f
>571	ExpressionStatement	 
>572	CallExpression	glVertex2f ( size , size )
>573	ArgumentList	size
>574	Argument	size
>575	Identifier	size
>576	Argument	size
>577	Identifier	size
>578	Callee	glVertex2f
>579	Identifier	glVertex2f
>580	ExpressionStatement	 
>581	CallExpression	glTexCoord2f ( 1.0 , 1.0 )
>582	ArgumentList	1.0
>583	Argument	1.0
>584	PrimaryExpression	1.0
>585	Argument	1.0
>586	PrimaryExpression	1.0
>587	Callee	glTexCoord2f
>588	Identifier	glTexCoord2f
>589	ExpressionStatement	 
>590	CallExpression	glVertex2f ( - size , size )
>591	ArgumentList	- size
>592	Argument	size
>593	Identifier	size
>594	Argument	- size
>595	UnaryOp	- size
>596	Identifier	size
>597	UnaryOperator	-
>598	Callee	glVertex2f
>599	Identifier	glVertex2f
>600	ExpressionStatement	 
>601	CallExpression	glTexCoord2f ( 0.0 , 1.0 )
>602	ArgumentList	0.0
>603	Argument	1.0
>604	PrimaryExpression	1.0
>605	Argument	0.0
>606	PrimaryExpression	0.0
>607	Callee	glTexCoord2f
>608	Identifier	glTexCoord2f
>609	ExpressionStatement	 
>610	CallExpression	glVertex2f ( - size , - size )
>611	ArgumentList	- size
>612	Argument	- size
>613	UnaryOp	- size
>614	Identifier	size
>615	UnaryOperator	-
>616	Argument	- size
>617	UnaryOp	- size
>618	Identifier	size
>619	UnaryOperator	-
>620	Callee	glVertex2f
>621	Identifier	glVertex2f
>622	ExpressionStatement	 
>623	CallExpression	glTexCoord2f ( 0.0 , 0.0 )
>624	ArgumentList	0.0
>625	Argument	0.0
>626	PrimaryExpression	0.0
>627	Argument	0.0
>628	PrimaryExpression	0.0
>629	Callee	glTexCoord2f
>630	Identifier	glTexCoord2f
>631	ExpressionStatement	 
>632	CallExpression	glBegin ( GL_QUADS )
>633	ArgumentList	GL_QUADS
>634	Argument	GL_QUADS
>635	Identifier	GL_QUADS
>636	Callee	glBegin
>637	Identifier	glBegin
>638	IfStatement	if ( texture )
>639	CompoundStatement	 
>640	ExpressionStatement	 
>641	CallExpression	glBindTexture ( GL_TEXTURE_2D , texture )
>642	ArgumentList	GL_TEXTURE_2D
>643	Argument	texture
>644	Identifier	texture
>645	Argument	GL_TEXTURE_2D
>646	Identifier	GL_TEXTURE_2D
>647	Callee	glBindTexture
>648	Identifier	glBindTexture
>649	ExpressionStatement	 
>650	CallExpression	glEnable ( GL_TEXTURE_2D )
>651	ArgumentList	GL_TEXTURE_2D
>652	Argument	GL_TEXTURE_2D
>653	Identifier	GL_TEXTURE_2D
>654	Callee	glEnable
>655	Identifier	glEnable
>656	Condition	 
>657	Identifier	texture
>658	ExpressionStatement	 
>659	AssignmentExpr	size /= 2.0
>660	PrimaryExpression	2.0
>661	Identifier	size
>662	IfStatement	if ( blend )
>663	ElseStatement	else
>664	CompoundStatement	 
>665	ExpressionStatement	 
>666	CallExpression	glDisable ( GL_BLEND )
>667	ArgumentList	GL_BLEND
>668	Argument	GL_BLEND
>669	Identifier	GL_BLEND
>670	Callee	glDisable
>671	Identifier	glDisable
>672	CompoundStatement	 
>673	ExpressionStatement	 
>674	CallExpression	glBlendFunc ( GL_ONE , GL_ONE_MINUS_SRC_ALPHA )
>675	ArgumentList	GL_ONE
>676	Argument	GL_ONE_MINUS_SRC_ALPHA
>677	Identifier	GL_ONE_MINUS_SRC_ALPHA
>678	Argument	GL_ONE
>679	Identifier	GL_ONE
>680	Callee	glBlendFunc
>681	Identifier	glBlendFunc
>682	ExpressionStatement	 
>683	CallExpression	glEnable ( GL_BLEND )
>684	ArgumentList	GL_BLEND
>685	Argument	GL_BLEND
>686	Identifier	GL_BLEND
>687	Callee	glEnable
>688	Identifier	glEnable
>689	Condition	 
>690	Identifier	blend
>702	FunctionDef	draw_aa_line (Line l , float width , vec4 color , float stipple)
>703	ParameterList	Line l , float width , vec4 color , float stipple
>704	Parameter	 
>705	Identifier	stipple
>706	ParameterType	float
>707	Parameter	 
>708	Identifier	color
>709	ParameterType	vec4
>710	Parameter	 
>711	Identifier	width
>712	ParameterType	float
>713	Parameter	 
>714	Identifier	l
>715	ParameterType	Line
>716	ReturnType	void
>717	CompoundStatement	 
>718	ExpressionStatement	 
>719	CallExpression	glDisable ( GL_TEXTURE_2D )
>720	ArgumentList	GL_TEXTURE_2D
>721	Argument	GL_TEXTURE_2D
>722	Identifier	GL_TEXTURE_2D
>723	Callee	glDisable
>724	Identifier	glDisable
>725	ExpressionStatement	 
>726	CallExpression	g_resources . shader_line -> unuse ( )
>727	ArgumentList	 
>728	Callee	g_resources . shader_line -> unuse
>729	PtrMemberAccess	g_resources . shader_line -> unuse
>730	Identifier	unuse
>731	MemberAccess	g_resources . shader_line
>732	Identifier	shader_line
>733	Identifier	g_resources
>734	ExpressionStatement	 
>735	CallExpression	glEnd ( )
>736	ArgumentList	 
>737	Callee	glEnd
>738	Identifier	glEnd
>739	ExpressionStatement	 
>740	CallExpression	glVertex ( p2_a )
>741	ArgumentList	p2_a
>742	Argument	p2_a
>743	Identifier	p2_a
>744	Callee	glVertex
>745	Identifier	glVertex
>746	ExpressionStatement	 
>747	CallExpression	glTexCoord2f ( len , 0.0 )
>748	ArgumentList	len
>749	Argument	0.0
>750	PrimaryExpression	0.0
>751	Argument	len
>752	Identifier	len
>753	Callee	glTexCoord2f
>754	Identifier	glTexCoord2f
>755	ExpressionStatement	 
>756	CallExpression	glVertex ( p2_b )
>757	ArgumentList	p2_b
>758	Argument	p2_b
>759	Identifier	p2_b
>760	Callee	glVertex
>761	Identifier	glVertex
>762	ExpressionStatement	 
>763	CallExpression	glTexCoord2f ( len , 1.0 )
>764	ArgumentList	len
>765	Argument	1.0
>766	PrimaryExpression	1.0
>767	Argument	len
>768	Identifier	len
>769	Callee	glTexCoord2f
>770	Identifier	glTexCoord2f
>771	ExpressionStatement	 
>772	CallExpression	glVertex ( p1_b )
>773	ArgumentList	p1_b
>774	Argument	p1_b
>775	Identifier	p1_b
>776	Callee	glVertex
>777	Identifier	glVertex
>778	ExpressionStatement	 
>779	CallExpression	glTexCoord2f ( 0.0 , 1.0 )
>780	ArgumentList	0.0
>781	Argument	1.0
>782	PrimaryExpression	1.0
>783	Argument	0.0
>784	PrimaryExpression	0.0
>785	Callee	glTexCoord2f
>786	Identifier	glTexCoord2f
>787	ExpressionStatement	 
>788	CallExpression	glVertex ( p1_a )
>789	ArgumentList	p1_a
>790	Argument	p1_a
>791	Identifier	p1_a
>792	Callee	glVertex
>793	Identifier	glVertex
>794	ExpressionStatement	 
>795	CallExpression	glTexCoord2f ( 0.0 , 0.0 )
>796	ArgumentList	0.0
>797	Argument	0.0
>798	PrimaryExpression	0.0
>799	Argument	0.0
>800	PrimaryExpression	0.0
>801	Callee	glTexCoord2f
>802	Identifier	glTexCoord2f
>803	ExpressionStatement	 
>804	CallExpression	glBegin ( GL_QUADS )
>805	ArgumentList	GL_QUADS
>806	Argument	GL_QUADS
>807	Identifier	GL_QUADS
>808	Callee	glBegin
>809	Identifier	glBegin
>810	ExpressionStatement	 
>811	CallExpression	glColor ( color )
>812	ArgumentList	color
>813	Argument	color
>814	Identifier	color
>815	Callee	glColor
>816	Identifier	glColor
>817	ExpressionStatement	 
>818	CallExpression	glBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>819	ArgumentList	GL_SRC_ALPHA
>820	Argument	GL_ONE_MINUS_SRC_ALPHA
>821	Identifier	GL_ONE_MINUS_SRC_ALPHA
>822	Argument	GL_SRC_ALPHA
>823	Identifier	GL_SRC_ALPHA
>824	Callee	glBlendFunc
>825	Identifier	glBlendFunc
>826	ExpressionStatement	 
>827	CallExpression	glEnable ( GL_BLEND )
>828	ArgumentList	GL_BLEND
>829	Argument	GL_BLEND
>830	Identifier	GL_BLEND
>831	Callee	glEnable
>832	Identifier	glEnable
>833	ExpressionStatement	 
>834	CallExpression	glEnable ( GL_TEXTURE_2D )
>835	ArgumentList	GL_TEXTURE_2D
>836	Argument	GL_TEXTURE_2D
>837	Identifier	GL_TEXTURE_2D
>838	Callee	glEnable
>839	Identifier	glEnable
>840	ExpressionStatement	 
>841	CallExpression	my_glUniform1f ( g_resources . shader_line -> get_uni_loc ( \"stipple\" ) , clamp_0_1 ( stipple ) )
>842	ArgumentList	g_resources . shader_line -> get_uni_loc ( \"stipple\" )
>843	Argument	clamp_0_1 ( stipple )
>844	CallExpression	clamp_0_1 ( stipple )
>845	ArgumentList	stipple
>846	Argument	stipple
>847	Identifier	stipple
>848	Callee	clamp_0_1
>849	Identifier	clamp_0_1
>850	Argument	g_resources . shader_line -> get_uni_loc ( \"stipple\" )
>851	CallExpression	g_resources . shader_line -> get_uni_loc ( \"stipple\" )
>852	ArgumentList	\"stipple\"
>853	Argument	\"stipple\"
>854	PrimaryExpression	\"stipple\"
>855	Callee	g_resources . shader_line -> get_uni_loc
>856	PtrMemberAccess	g_resources . shader_line -> get_uni_loc
>857	Identifier	get_uni_loc
>858	MemberAccess	g_resources . shader_line
>859	Identifier	shader_line
>860	Identifier	g_resources
>861	Callee	my_glUniform1f
>862	Identifier	my_glUniform1f
>863	ExpressionStatement	 
>864	CallExpression	g_resources . shader_line -> use ( )
>865	ArgumentList	 
>866	Callee	g_resources . shader_line -> use
>867	PtrMemberAccess	g_resources . shader_line -> use
>868	Identifier	use
>869	MemberAccess	g_resources . shader_line
>870	Identifier	shader_line
>871	Identifier	g_resources
>872	ExpressionStatement	 
>873	AssignmentExpr	len *= stipple
>874	Identifier	stipple
>875	Identifier	len
>876	ExpressionStatement	 
>877	CallExpression	glBindTexture ( GL_TEXTURE_2D , g_resources . texture_line )
>878	ArgumentList	GL_TEXTURE_2D
>879	Argument	g_resources . texture_line
>880	MemberAccess	g_resources . texture_line
>881	Identifier	texture_line
>882	Identifier	g_resources
>883	Argument	GL_TEXTURE_2D
>884	Identifier	GL_TEXTURE_2D
>885	Callee	glBindTexture
>886	Identifier	glBindTexture
>887	IdentifierDeclStatement	 
>888	IdentifierDecl	len = length ( l . p2 - l . p1 )
>889	AssignmentExpr	len = length ( l . p2 - l . p1 )
>890	CallExpression	length ( l . p2 - l . p1 )
>891	ArgumentList	l . p2 - l . p1
>892	Argument	l . p2 - l . p1
>893	AdditiveExpression	l . p2 - l . p1
>894	MemberAccess	l . p1
>895	Identifier	p1
>896	Identifier	l
>897	MemberAccess	l . p2
>898	Identifier	p2
>899	Identifier	l
>900	Callee	length
>901	Identifier	length
>902	Identifier	len
>903	Identifier	len
>904	IdentifierDeclType	float
>905	IdentifierDeclStatement	 
>906	IdentifierDecl	p2_b = vec2 ( - linedir [ 1 ] , + linedir [ 0 ] ) + l . p2
>907	AssignmentExpr	p2_b = vec2 ( - linedir [ 1 ] , + linedir [ 0 ] ) + l . p2
>908	AdditiveExpression	vec2 ( - linedir [ 1 ] , + linedir [ 0 ] ) + l . p2
>909	MemberAccess	l . p2
>910	Identifier	p2
>911	Identifier	l
>912	CallExpression	vec2 ( - linedir [ 1 ] , + linedir [ 0 ] )
>913	ArgumentList	- linedir [ 1 ]
>914	Argument	+ linedir [ 0 ]
>915	UnaryOp	+ linedir [ 0 ]
>916	ArrayIndexing	linedir [ 0 ]
>917	PrimaryExpression	0
>918	Identifier	linedir
>919	UnaryOperator	+
>920	Argument	- linedir [ 1 ]
>921	UnaryOp	- linedir [ 1 ]
>922	ArrayIndexing	linedir [ 1 ]
>923	PrimaryExpression	1
>924	Identifier	linedir
>925	UnaryOperator	-
>926	Callee	vec2
>927	Identifier	vec2
>928	Identifier	p2_b
>929	Identifier	p2_b
>930	IdentifierDeclType	vec2
>931	IdentifierDeclStatement	 
>932	IdentifierDecl	p2_a = vec2 ( + linedir [ 1 ] , - linedir [ 0 ] ) + l . p2
>933	AssignmentExpr	p2_a = vec2 ( + linedir [ 1 ] , - linedir [ 0 ] ) + l . p2
>934	AdditiveExpression	vec2 ( + linedir [ 1 ] , - linedir [ 0 ] ) + l . p2
>935	MemberAccess	l . p2
>936	Identifier	p2
>937	Identifier	l
>938	CallExpression	vec2 ( + linedir [ 1 ] , - linedir [ 0 ] )
>939	ArgumentList	+ linedir [ 1 ]
>940	Argument	- linedir [ 0 ]
>941	UnaryOp	- linedir [ 0 ]
>942	ArrayIndexing	linedir [ 0 ]
>943	PrimaryExpression	0
>944	Identifier	linedir
>945	UnaryOperator	-
>946	Argument	+ linedir [ 1 ]
>947	UnaryOp	+ linedir [ 1 ]
>948	ArrayIndexing	linedir [ 1 ]
>949	PrimaryExpression	1
>950	Identifier	linedir
>951	UnaryOperator	+
>952	Callee	vec2
>953	Identifier	vec2
>954	Identifier	p2_a
>955	Identifier	p2_a
>956	IdentifierDeclType	vec2
>957	IdentifierDeclStatement	 
>958	IdentifierDecl	p1_b = vec2 ( - linedir [ 1 ] , + linedir [ 0 ] ) + l . p1
>959	AssignmentExpr	p1_b = vec2 ( - linedir [ 1 ] , + linedir [ 0 ] ) + l . p1
>960	AdditiveExpression	vec2 ( - linedir [ 1 ] , + linedir [ 0 ] ) + l . p1
>961	MemberAccess	l . p1
>962	Identifier	p1
>963	Identifier	l
>964	CallExpression	vec2 ( - linedir [ 1 ] , + linedir [ 0 ] )
>965	ArgumentList	- linedir [ 1 ]
>966	Argument	+ linedir [ 0 ]
>967	UnaryOp	+ linedir [ 0 ]
>968	ArrayIndexing	linedir [ 0 ]
>969	PrimaryExpression	0
>970	Identifier	linedir
>971	UnaryOperator	+
>972	Argument	- linedir [ 1 ]
>973	UnaryOp	- linedir [ 1 ]
>974	ArrayIndexing	linedir [ 1 ]
>975	PrimaryExpression	1
>976	Identifier	linedir
>977	UnaryOperator	-
>978	Callee	vec2
>979	Identifier	vec2
>980	Identifier	p1_b
>981	Identifier	p1_b
>982	IdentifierDeclType	vec2
>983	IdentifierDeclStatement	 
>984	IdentifierDecl	p1_a = vec2 ( + linedir [ 1 ] , - linedir [ 0 ] ) + l . p1
>985	AssignmentExpr	p1_a = vec2 ( + linedir [ 1 ] , - linedir [ 0 ] ) + l . p1
>986	AdditiveExpression	vec2 ( + linedir [ 1 ] , - linedir [ 0 ] ) + l . p1
>987	MemberAccess	l . p1
>988	Identifier	p1
>989	Identifier	l
>990	CallExpression	vec2 ( + linedir [ 1 ] , - linedir [ 0 ] )
>991	ArgumentList	+ linedir [ 1 ]
>992	Argument	- linedir [ 0 ]
>993	UnaryOp	- linedir [ 0 ]
>994	ArrayIndexing	linedir [ 0 ]
>995	PrimaryExpression	0
>996	Identifier	linedir
>997	UnaryOperator	-
>998	Argument	+ linedir [ 1 ]
>999	UnaryOp	+ linedir [ 1 ]
>1000	ArrayIndexing	linedir [ 1 ]
>1001	PrimaryExpression	1
>1002	Identifier	linedir
>1003	UnaryOperator	+
>1004	Callee	vec2
>1005	Identifier	vec2
>1006	Identifier	p1_a
>1007	Identifier	p1_a
>1008	IdentifierDeclType	vec2
>1009	ExpressionStatement	 
>1010	AssignmentExpr	linedir *= 0.001 * width
>1011	MultiplicativeExpression	0.001 * width
>1012	Identifier	width
>1013	PrimaryExpression	0.001
>1014	Identifier	linedir
>1015	IdentifierDeclStatement	 
>1016	IdentifierDecl	linedir = normalized ( l . p2 - l . p1 )
>1017	AssignmentExpr	linedir = normalized ( l . p2 - l . p1 )
>1018	CallExpression	normalized ( l . p2 - l . p1 )
>1019	ArgumentList	l . p2 - l . p1
>1020	Argument	l . p2 - l . p1
>1021	AdditiveExpression	l . p2 - l . p1
>1022	MemberAccess	l . p1
>1023	Identifier	p1
>1024	Identifier	l
>1025	MemberAccess	l . p2
>1026	Identifier	p2
>1027	Identifier	l
>1028	Callee	normalized
>1029	Identifier	normalized
>1030	Identifier	linedir
>1031	Identifier	linedir
>1032	IdentifierDeclType	vec2
>1064	FunctionDef	move_texture_red_component (GLuint texid)
>1065	ParameterList	GLuint texid
>1066	Parameter	 
>1067	Identifier	texid
>1068	ParameterType	GLuint
>1069	ReturnType	GLuint
>1070	CompoundStatement	 
>1071	ReturnStatement	 
>1072	Identifier	newtexid
>1073	ExpressionStatement	 
>1074	Identifier	data
>1075	Statement	 
>1076	Statement	 
>1077	Statement	 
>1078	ExpressionStatement	 
>1079	CallExpression	my_glGenerateMipmap ( GL_TEXTURE_2D )
>1080	ArgumentList	GL_TEXTURE_2D
>1081	Argument	GL_TEXTURE_2D
>1082	Identifier	GL_TEXTURE_2D
>1083	Callee	my_glGenerateMipmap
>1084	Identifier	my_glGenerateMipmap
>1085	ExpressionStatement	 
>1086	CallExpression	glTexImage2D ( GL_TEXTURE_2D , 0 , 1 , width , height , 0 , GL_RED , GL_UNSIGNED_BYTE , data )
>1087	ArgumentList	GL_TEXTURE_2D
>1088	Argument	data
>1089	Identifier	data
>1090	Argument	GL_UNSIGNED_BYTE
>1091	Identifier	GL_UNSIGNED_BYTE
>1092	Argument	GL_RED
>1093	Identifier	GL_RED
>1094	Argument	0
>1095	PrimaryExpression	0
>1096	Argument	height
>1097	Identifier	height
>1098	Argument	width
>1099	Identifier	width
>1100	Argument	1
>1101	PrimaryExpression	1
>1102	Argument	0
>1103	PrimaryExpression	0
>1104	Argument	GL_TEXTURE_2D
>1105	Identifier	GL_TEXTURE_2D
>1106	Callee	glTexImage2D
>1107	Identifier	glTexImage2D
>1108	ExpressionStatement	 
>1109	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_GENERATE_MIPMAP , GL_TRUE )
>1110	ArgumentList	GL_TEXTURE_2D
>1111	Argument	GL_TRUE
>1112	Identifier	GL_TRUE
>1113	Argument	GL_GENERATE_MIPMAP
>1114	Identifier	GL_GENERATE_MIPMAP
>1115	Argument	GL_TEXTURE_2D
>1116	Identifier	GL_TEXTURE_2D
>1117	Callee	glTexParameteri
>1118	Identifier	glTexParameteri
>1119	ExpressionStatement	 
>1120	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_T , GL_CLAMP )
>1121	ArgumentList	GL_TEXTURE_2D
>1122	Argument	GL_CLAMP
>1123	Identifier	GL_CLAMP
>1124	Argument	GL_TEXTURE_WRAP_T
>1125	Identifier	GL_TEXTURE_WRAP_T
>1126	Argument	GL_TEXTURE_2D
>1127	Identifier	GL_TEXTURE_2D
>1128	Callee	glTexParameteri
>1129	Identifier	glTexParameteri
>1130	ExpressionStatement	 
>1131	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_S , GL_CLAMP )
>1132	ArgumentList	GL_TEXTURE_2D
>1133	Argument	GL_CLAMP
>1134	Identifier	GL_CLAMP
>1135	Argument	GL_TEXTURE_WRAP_S
>1136	Identifier	GL_TEXTURE_WRAP_S
>1137	Argument	GL_TEXTURE_2D
>1138	Identifier	GL_TEXTURE_2D
>1139	Callee	glTexParameteri
>1140	Identifier	glTexParameteri
>1141	ExpressionStatement	 
>1142	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_MIN_FILTER , GL_LINEAR_MIPMAP_LINEAR )
>1143	ArgumentList	GL_TEXTURE_2D
>1144	Argument	GL_LINEAR_MIPMAP_LINEAR
>1145	Identifier	GL_LINEAR_MIPMAP_LINEAR
>1146	Argument	GL_TEXTURE_MIN_FILTER
>1147	Identifier	GL_TEXTURE_MIN_FILTER
>1148	Argument	GL_TEXTURE_2D
>1149	Identifier	GL_TEXTURE_2D
>1150	Callee	glTexParameteri
>1151	Identifier	glTexParameteri
>1152	ExpressionStatement	 
>1153	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_MAG_FILTER , GL_LINEAR )
>1154	ArgumentList	GL_TEXTURE_2D
>1155	Argument	GL_LINEAR
>1156	Identifier	GL_LINEAR
>1157	Argument	GL_TEXTURE_MAG_FILTER
>1158	Identifier	GL_TEXTURE_MAG_FILTER
>1159	Argument	GL_TEXTURE_2D
>1160	Identifier	GL_TEXTURE_2D
>1161	Callee	glTexParameteri
>1162	Identifier	glTexParameteri
>1163	ExpressionStatement	 
>1164	CallExpression	glBindTexture ( GL_TEXTURE_2D , newtexid )
>1165	ArgumentList	GL_TEXTURE_2D
>1166	Argument	newtexid
>1167	Identifier	newtexid
>1168	Argument	GL_TEXTURE_2D
>1169	Identifier	GL_TEXTURE_2D
>1170	Callee	glBindTexture
>1171	Identifier	glBindTexture
>1172	ExpressionStatement	 
>1173	CallExpression	glGenTextures ( 1 , & newtexid )
>1174	ArgumentList	1
>1175	Argument	& newtexid
>1176	UnaryOp	& newtexid
>1177	Identifier	newtexid
>1178	UnaryOperator	&
>1179	Argument	1
>1180	PrimaryExpression	1
>1181	Callee	glGenTextures
>1182	Identifier	glGenTextures
>1183	IdentifierDeclStatement	 
>1184	IdentifierDecl	newtexid = 0
>1185	AssignmentExpr	newtexid = 0
>1186	PrimaryExpression	0
>1187	Identifier	newtexid
>1188	Identifier	newtexid
>1189	IdentifierDeclType	GLuint
>1190	ExpressionStatement	 
>1191	CallExpression	glDeleteTextures ( 1 , & texid )
>1192	ArgumentList	1
>1193	Argument	& texid
>1194	UnaryOp	& texid
>1195	Identifier	texid
>1196	UnaryOperator	&
>1197	Argument	1
>1198	PrimaryExpression	1
>1199	Callee	glDeleteTextures
>1200	Identifier	glDeleteTextures
>1201	ExpressionStatement	 
>1202	CallExpression	glGetTexImage ( GL_TEXTURE_2D , 1 , GL_RED , GL_UNSIGNED_BYTE , data )
>1203	ArgumentList	GL_TEXTURE_2D
>1204	Argument	data
>1205	Identifier	data
>1206	Argument	GL_UNSIGNED_BYTE
>1207	Identifier	GL_UNSIGNED_BYTE
>1208	Argument	GL_RED
>1209	Identifier	GL_RED
>1210	Argument	1
>1211	PrimaryExpression	1
>1212	Argument	GL_TEXTURE_2D
>1213	Identifier	GL_TEXTURE_2D
>1214	Callee	glGetTexImage
>1215	Identifier	glGetTexImage
>1216	IdentifierDeclStatement	 
>1217	IdentifierDecl	* data = new unsigned char [ width * height ]
>1218	AssignmentExpr	* data = new unsigned char [ width * height ]
>1219	MultiplicativeExpression	width * height
>1220	Identifier	height
>1221	Identifier	width
>1222	Identifier	data
>1223	Identifier	data
>1224	IdentifierDeclType	unsigned char *
>1225	ExpressionStatement	 
>1226	CallExpression	glGetTexLevelParameteriv ( GL_TEXTURE_2D , 1 , GL_TEXTURE_HEIGHT , & height )
>1227	ArgumentList	GL_TEXTURE_2D
>1228	Argument	& height
>1229	UnaryOp	& height
>1230	Identifier	height
>1231	UnaryOperator	&
>1232	Argument	GL_TEXTURE_HEIGHT
>1233	Identifier	GL_TEXTURE_HEIGHT
>1234	Argument	1
>1235	PrimaryExpression	1
>1236	Argument	GL_TEXTURE_2D
>1237	Identifier	GL_TEXTURE_2D
>1238	Callee	glGetTexLevelParameteriv
>1239	Identifier	glGetTexLevelParameteriv
>1240	ExpressionStatement	 
>1241	CallExpression	glGetTexLevelParameteriv ( GL_TEXTURE_2D , 1 , GL_TEXTURE_WIDTH , & width )
>1242	ArgumentList	GL_TEXTURE_2D
>1243	Argument	& width
>1244	UnaryOp	& width
>1245	Identifier	width
>1246	UnaryOperator	&
>1247	Argument	GL_TEXTURE_WIDTH
>1248	Identifier	GL_TEXTURE_WIDTH
>1249	Argument	1
>1250	PrimaryExpression	1
>1251	Argument	GL_TEXTURE_2D
>1252	Identifier	GL_TEXTURE_2D
>1253	Callee	glGetTexLevelParameteriv
>1254	Identifier	glGetTexLevelParameteriv
>1255	ExpressionStatement	 
>1256	CallExpression	glBindTexture ( GL_TEXTURE_2D , texid )
>1257	ArgumentList	GL_TEXTURE_2D
>1258	Argument	texid
>1259	Identifier	texid
>1260	Argument	GL_TEXTURE_2D
>1261	Identifier	GL_TEXTURE_2D
>1262	Callee	glBindTexture
>1263	Identifier	glBindTexture
>1264	IdentifierDeclStatement	 
>1265	IdentifierDecl	height
>1266	Identifier	height
>1267	IdentifierDeclType	int
>1268	IdentifierDecl	width
>1269	Identifier	width
>1270	IdentifierDeclType	int
>1297	FunctionDef	hsv2rgb (vec3 const & hsv)
>1298	ParameterList	vec3 const & hsv
>1299	Parameter	 
>1300	Identifier	hsv
>1301	ParameterType	vec3 const &
>1302	ReturnType	vec3
>1303	CompoundStatement	 
>1304	SwitchStatement	switch ( i )
>1305	CompoundStatement	 
>1306	ReturnStatement	 
>1307	CallExpression	vec3 ( v , m , n )
>1308	ArgumentList	v
>1309	Argument	n
>1310	Identifier	n
>1311	Argument	m
>1312	Identifier	m
>1313	Argument	v
>1314	Identifier	v
>1315	Callee	vec3
>1316	Identifier	vec3
>1317	Label	 
>1318	ReturnStatement	 
>1319	CallExpression	vec3 ( n , m , v )
>1320	ArgumentList	n
>1321	Argument	v
>1322	Identifier	v
>1323	Argument	m
>1324	Identifier	m
>1325	Argument	n
>1326	Identifier	n
>1327	Callee	vec3
>1328	Identifier	vec3
>1329	Label	 
>1330	ReturnStatement	 
>1331	CallExpression	vec3 ( m , n , v )
>1332	ArgumentList	m
>1333	Argument	v
>1334	Identifier	v
>1335	Argument	n
>1336	Identifier	n
>1337	Argument	m
>1338	Identifier	m
>1339	Callee	vec3
>1340	Identifier	vec3
>1341	Label	 
>1342	ReturnStatement	 
>1343	CallExpression	vec3 ( m , v , n )
>1344	ArgumentList	m
>1345	Argument	n
>1346	Identifier	n
>1347	Argument	v
>1348	Identifier	v
>1349	Argument	m
>1350	Identifier	m
>1351	Callee	vec3
>1352	Identifier	vec3
>1353	Label	 
>1354	ReturnStatement	 
>1355	CallExpression	vec3 ( n , v , m )
>1356	ArgumentList	n
>1357	Argument	m
>1358	Identifier	m
>1359	Argument	v
>1360	Identifier	v
>1361	Argument	n
>1362	Identifier	n
>1363	Callee	vec3
>1364	Identifier	vec3
>1365	Label	 
>1366	ReturnStatement	 
>1367	CallExpression	vec3 ( v , n , m )
>1368	ArgumentList	v
>1369	Argument	m
>1370	Identifier	m
>1371	Argument	n
>1372	Identifier	n
>1373	Argument	v
>1374	Identifier	v
>1375	Callee	vec3
>1376	Identifier	vec3
>1377	Label	 
>1378	Label	 
>1379	Label	 
>1380	Identifier	default
>1381	Condition	 
>1382	Identifier	i
>1383	IdentifierDeclStatement	 
>1384	IdentifierDecl	n = v * ( 1 - s * f )
>1385	AssignmentExpr	n = v * ( 1 - s * f )
>1386	MultiplicativeExpression	v * ( 1 - s * f )
>1387	AdditiveExpression	1 - s * f
>1388	MultiplicativeExpression	s * f
>1389	Identifier	f
>1390	Identifier	s
>1391	PrimaryExpression	1
>1392	Identifier	v
>1393	Identifier	n
>1394	Identifier	n
>1395	IdentifierDeclType	float
>1396	IdentifierDeclStatement	 
>1397	IdentifierDecl	m = v * ( 1 - s )
>1398	AssignmentExpr	m = v * ( 1 - s )
>1399	MultiplicativeExpression	v * ( 1 - s )
>1400	AdditiveExpression	1 - s
>1401	Identifier	s
>1402	PrimaryExpression	1
>1403	Identifier	v
>1404	Identifier	m
>1405	Identifier	m
>1406	IdentifierDeclType	float
>1407	IfStatement	if ( ! ( i & 1 ) )
>1408	ExpressionStatement	 
>1409	AssignmentExpr	f = 1 - f
>1410	AdditiveExpression	1 - f
>1411	Identifier	f
>1412	PrimaryExpression	1
>1413	Identifier	f
>1414	Condition	 
>1415	UnaryOp	! ( i & 1 )
>1416	BitAndExpression	i & 1
>1417	PrimaryExpression	1
>1418	Identifier	i
>1419	UnaryOperator	!
>1420	IdentifierDeclStatement	 
>1421	IdentifierDecl	f = h - i
>1422	AssignmentExpr	f = h - i
>1423	AdditiveExpression	h - i
>1424	Identifier	i
>1425	Identifier	h
>1426	Identifier	f
>1427	Identifier	f
>1428	IdentifierDeclType	float
>1429	IdentifierDeclStatement	 
>1430	IdentifierDecl	i = floor ( h )
>1431	AssignmentExpr	i = floor ( h )
>1432	CallExpression	floor ( h )
>1433	ArgumentList	h
>1434	Argument	h
>1435	Identifier	h
>1436	Callee	floor
>1437	Identifier	floor
>1438	Identifier	i
>1439	Identifier	i
>1440	IdentifierDeclType	int
>1441	IdentifierDeclStatement	 
>1442	IdentifierDecl	out
>1443	Identifier	out
>1444	IdentifierDeclType	vec3
>1445	IdentifierDeclStatement	 
>1446	IdentifierDecl	v = hsv [ 2 ]
>1447	AssignmentExpr	v = hsv [ 2 ]
>1448	ArrayIndexing	hsv [ 2 ]
>1449	PrimaryExpression	2
>1450	Identifier	hsv
>1451	Identifier	v
>1452	Identifier	v
>1453	IdentifierDeclType	float
>1454	IdentifierDeclStatement	 
>1455	IdentifierDecl	s = hsv [ 1 ]
>1456	AssignmentExpr	s = hsv [ 1 ]
>1457	ArrayIndexing	hsv [ 1 ]
>1458	PrimaryExpression	1
>1459	Identifier	hsv
>1460	Identifier	s
>1461	Identifier	s
>1462	IdentifierDeclType	float
>1463	IdentifierDeclStatement	 
>1464	IdentifierDecl	h = hsv [ 0 ] * 6.0f
>1465	AssignmentExpr	h = hsv [ 0 ] * 6.0f
>1466	MultiplicativeExpression	hsv [ 0 ] * 6.0f
>1467	PrimaryExpression	6.0f
>1468	ArrayIndexing	hsv [ 0 ]
>1469	PrimaryExpression	0
>1470	Identifier	hsv
>1471	Identifier	h
>1472	Identifier	h
>1473	IdentifierDeclType	float
>1489	FunctionDef	rgb2hsv (vec3 const & rgb)
>1490	ParameterList	vec3 const & rgb
>1491	Parameter	 
>1492	Identifier	rgb
>1493	ParameterType	vec3 const &
>1494	ReturnType	vec3
>1495	CompoundStatement	 
>1496	ReturnStatement	 
>1497	CallExpression	vec3 ( ( i - f / ( v - x ) ) / 6.0f , ( v - x ) / v , v )
>1498	ArgumentList	( i - f / ( v - x ) ) / 6.0f
>1499	Argument	v
>1500	Identifier	v
>1501	Argument	( v - x ) / v
>1502	MultiplicativeExpression	( v - x ) / v
>1503	Identifier	v
>1504	AdditiveExpression	v - x
>1505	Identifier	x
>1506	Identifier	v
>1507	Argument	( i - f / ( v - x ) ) / 6.0f
>1508	MultiplicativeExpression	( i - f / ( v - x ) ) / 6.0f
>1509	PrimaryExpression	6.0f
>1510	AdditiveExpression	i - f / ( v - x )
>1511	MultiplicativeExpression	f / ( v - x )
>1512	AdditiveExpression	v - x
>1513	Identifier	x
>1514	Identifier	v
>1515	Identifier	f
>1516	Identifier	i
>1517	Callee	vec3
>1518	Identifier	vec3
>1519	IdentifierDeclStatement	 
>1520	IdentifierDecl	i = ( r == x ) ? 3 
>1521	AssignmentExpr	i = ( r == x ) ? 3 
>1522	ConditionalExpression	( r == x ) ? 3 
>1523	ConditionalExpression	( g == x ) ? 5 
>1524	PrimaryExpression	1
>1525	PrimaryExpression	5
>1526	Condition	g == x
>1527	EqualityExpression	g == x
>1528	Identifier	x
>1529	Identifier	g
>1530	PrimaryExpression	3
>1531	Condition	r == x
>1532	EqualityExpression	r == x
>1533	Identifier	x
>1534	Identifier	r
>1535	Identifier	i
>1536	Identifier	i
>1537	IdentifierDeclType	int
>1538	IdentifierDeclStatement	 
>1539	IdentifierDecl	f = ( r == x ) ? g - b 
>1540	AssignmentExpr	f = ( r == x ) ? g - b 
>1541	ConditionalExpression	( r == x ) ? g - b 
>1542	ConditionalExpression	( g == x ) ? b - r 
>1543	AdditiveExpression	r - g
>1544	Identifier	g
>1545	Identifier	r
>1546	AdditiveExpression	b - r
>1547	Identifier	r
>1548	Identifier	b
>1549	Condition	g == x
>1550	EqualityExpression	g == x
>1551	Identifier	x
>1552	Identifier	g
>1553	AdditiveExpression	g - b
>1554	Identifier	b
>1555	Identifier	g
>1556	Condition	r == x
>1557	EqualityExpression	r == x
>1558	Identifier	x
>1559	Identifier	r
>1560	Identifier	f
>1561	Identifier	f
>1562	IdentifierDeclType	float
>1563	IfStatement	if ( v == x )
>1564	ReturnStatement	 
>1565	CallExpression	vec3 ( 0 , 0 , v )
>1566	ArgumentList	0
>1567	Argument	v
>1568	Identifier	v
>1569	Argument	0
>1570	PrimaryExpression	0
>1571	Argument	0
>1572	PrimaryExpression	0
>1573	Callee	vec3
>1574	Identifier	vec3
>1575	Condition	 
>1576	EqualityExpression	v == x
>1577	Identifier	x
>1578	Identifier	v
>1579	IdentifierDeclStatement	 
>1580	IdentifierDecl	v = max ( max ( r , g ) , b )
>1581	AssignmentExpr	v = max ( max ( r , g ) , b )
>1582	CallExpression	max ( max ( r , g ) , b )
>1583	ArgumentList	max ( r , g )
>1584	Argument	b
>1585	Identifier	b
>1586	Argument	max ( r , g )
>1587	CallExpression	max ( r , g )
>1588	ArgumentList	r
>1589	Argument	g
>1590	Identifier	g
>1591	Argument	r
>1592	Identifier	r
>1593	Callee	max
>1594	Identifier	max
>1595	Callee	max
>1596	Identifier	max
>1597	Identifier	v
>1598	Identifier	v
>1599	IdentifierDeclType	float
>1600	IdentifierDeclStatement	 
>1601	IdentifierDecl	x = min ( min ( r , g ) , b )
>1602	AssignmentExpr	x = min ( min ( r , g ) , b )
>1603	CallExpression	min ( min ( r , g ) , b )
>1604	ArgumentList	min ( r , g )
>1605	Argument	b
>1606	Identifier	b
>1607	Argument	min ( r , g )
>1608	CallExpression	min ( r , g )
>1609	ArgumentList	r
>1610	Argument	g
>1611	Identifier	g
>1612	Argument	r
>1613	Identifier	r
>1614	Callee	min
>1615	Identifier	min
>1616	Callee	min
>1617	Identifier	min
>1618	Identifier	x
>1619	Identifier	x
>1620	IdentifierDeclType	float
>1621	IdentifierDeclStatement	 
>1622	IdentifierDecl	b = rgb [ 2 ]
>1623	AssignmentExpr	b = rgb [ 2 ]
>1624	ArrayIndexing	rgb [ 2 ]
>1625	PrimaryExpression	2
>1626	Identifier	rgb
>1627	Identifier	b
>1628	Identifier	b
>1629	IdentifierDeclType	float
>1630	IdentifierDeclStatement	 
>1631	IdentifierDecl	g = rgb [ 1 ]
>1632	AssignmentExpr	g = rgb [ 1 ]
>1633	ArrayIndexing	rgb [ 1 ]
>1634	PrimaryExpression	1
>1635	Identifier	rgb
>1636	Identifier	g
>1637	Identifier	g
>1638	IdentifierDeclType	float
>1639	IdentifierDeclStatement	 
>1640	IdentifierDecl	r = rgb [ 0 ]
>1641	AssignmentExpr	r = rgb [ 0 ]
>1642	ArrayIndexing	rgb [ 0 ]
>1643	PrimaryExpression	0
>1644	Identifier	rgb
>1645	Identifier	r
>1646	Identifier	r
>1647	IdentifierDeclType	float
>1663	FunctionDef	__cxa_pure_virtual ()
>1664	ParameterList	 
>1665	ReturnType	void
>1666	CompoundStatement	 
<5=10,6
<6=7
<7=9,8
<15=18,17,16
<18=59,47,21,19
<19=20
<21=41,22
<22=33,29,23
<23=24
<24=28,25
<25=27,26
<29=30
<30=32,31
<33=34
<34=40,35
<35=39,36
<36=38,37
<41=42
<42=44,43
<44=46,45
<47=48
<48=58,57,49
<49=56,50
<50=55,51
<51=53,52
<53=54
<59=60
<60=62,61
<72=78,77,73
<73=74
<74=76,75
<78=150,134,81,79
<79=80
<81=121,112,109,82
<82=96,83
<83=84
<84=92,85
<85=86
<86=87
<87=89,88
<89=91,90
<92=93
<93=95,94
<96=97
<97=105,98
<98=99
<99=100
<100=102,101
<102=104,103
<105=106
<106=108,107
<109=111,110
<112=113
<113=120,114
<114=116,115
<116=117
<117=119,118
<121=122
<122=123
<123=133,132,124
<124=131,125
<125=127,126
<127=128
<128=130,129
<134=135
<135=146,136
<136=137
<137=138
<138=140,139
<140=142,141
<142=143
<143=145,144
<146=147
<147=149,148
<150=151
<151=153,152
<165=171,170,166
<166=167
<167=169,168
<171=243,227,174,172
<172=173
<174=214,205,202,175
<175=189,176
<176=177
<177=185,178
<178=179
<179=180
<180=182,181
<182=184,183
<185=186
<186=188,187
<189=190
<190=198,191
<191=192
<192=193
<193=195,194
<195=197,196
<198=199
<199=201,200
<202=204,203
<205=206
<206=213,207
<207=209,208
<209=210
<210=212,211
<214=215
<215=216
<216=226,225,217
<217=224,218
<218=220,219
<220=221
<221=223,222
<227=228
<228=239,229
<229=230
<230=231
<231=233,232
<233=235,234
<235=236
<236=238,237
<239=240
<240=242,241
<243=244
<244=246,245
<258=264,263,259
<259=260
<260=262,261
<264=265
<265=266
<266=279,267
<267=270,268
<268=269
<270=271
<271=278,272
<272=274,273
<274=275
<275=277,276
<279=280
<289=298,297,290
<290=294,291
<291=293,292
<294=296,295
<298=328,319,303,299
<299=300
<300=302,301
<303=304
<304=318,317,305
<305=316,306
<306=314,307
<307=312,308
<308=309
<309=311,310
<312=313
<314=315
<319=320
<320=327,326,321
<321=325,322
<322=324,323
<328=329
<329=331,330
<342=351,350,343
<343=347,344
<344=346,345
<347=349,348
<351=483,474,459,444,433,418,404,398,385,368,361,352
<352=353
<353=359,354
<354=357,355
<355=356
<357=358
<359=360
<361=362
<362=366,363
<363=364
<364=365
<366=367
<368=369
<369=383,370
<370=381,379,373,371
<371=372
<373=374
<374=378,375
<375=377,376
<379=380
<381=382
<383=384
<385=386
<386=396,387
<387=394,392,390,388
<388=389
<390=391
<392=393
<394=395
<396=397
<398=400,399
<400=401
<401=403,402
<404=405
<405=417,416,406
<406=415,407
<407=413,408
<408=411,409
<409=410
<411=412
<413=414
<418=419
<419=431,420
<420=429,427,425,423,421
<421=422
<423=424
<425=426
<427=428
<429=430
<431=432
<433=434
<434=443,442,435
<435=441,436
<436=440,437
<437=439,438
<444=445
<445=457,446
<446=455,453,451,447
<447=448
<448=450,449
<451=452
<453=454
<455=456
<457=458
<459=460
<460=472,461
<461=470,468,466,462
<462=463
<463=465,464
<466=467
<468=469
<470=471
<472=473
<474=475
<475=481,476
<476=479,477
<477=478
<479=480
<481=482
<483=490,484
<484=489,488,485
<485=487,486
<490=495,494,491
<491=493,492
<513=525,524,514
<514=521,518,515
<515=517,516
<518=520,519
<521=523,522
<525=662,658,638,631,622,609,600,589,580,571,562,551,546,536,526
<526=534,527
<527=528
<528=532,529
<529=530
<530=531
<532=533
<534=535
<536=544,537
<537=538
<538=542,539
<539=540
<540=541
<542=543
<544=545
<546=547
<547=549,548
<549=550
<551=552
<552=560,553
<553=558,554
<554=555
<555=557,556
<558=559
<560=561
<562=563
<563=569,564
<564=567,565
<565=566
<567=568
<569=570
<571=572
<572=578,573
<573=576,574
<574=575
<576=577
<578=579
<580=581
<581=587,582
<582=585,583
<583=584
<585=586
<587=588
<589=590
<590=598,591
<591=594,592
<592=593
<594=595
<595=597,596
<598=599
<600=601
<601=607,602
<602=605,603
<603=604
<605=606
<607=608
<609=610
<610=620,611
<611=616,612
<612=613
<613=615,614
<616=617
<617=619,618
<620=621
<622=623
<623=629,624
<624=627,625
<625=626
<627=628
<629=630
<631=632
<632=636,633
<633=634
<634=635
<636=637
<638=656,639
<639=649,640
<640=641
<641=647,642
<642=645,643
<643=644
<645=646
<647=648
<649=650
<650=654,651
<651=652
<652=653
<654=655
<656=657
<658=659
<659=661,660
<662=689,672,663
<663=664
<664=665
<665=666
<666=670,667
<667=668
<668=669
<670=671
<672=682,673
<673=674
<674=680,675
<675=678,676
<676=677
<678=679
<680=681
<682=683
<683=687,684
<684=685
<685=686
<687=688
<689=690
<702=717,716,703
<703=713,710,707,704
<704=706,705
<707=709,708
<710=712,711
<713=715,714
<717=1015,1009,983,957,931,905,887,876,872,863,840,833,826,817,810,803,794,787,778,771,762,755,746,739,734,725,718
<718=719
<719=723,720
<720=721
<721=722
<723=724
<725=726
<726=728,727
<728=729
<729=731,730
<731=733,732
<734=735
<735=737,736
<737=738
<739=740
<740=744,741
<741=742
<742=743
<744=745
<746=747
<747=753,748
<748=751,749
<749=750
<751=752
<753=754
<755=756
<756=760,757
<757=758
<758=759
<760=761
<762=763
<763=769,764
<764=767,765
<765=766
<767=768
<769=770
<771=772
<772=776,773
<773=774
<774=775
<776=777
<778=779
<779=785,780
<780=783,781
<781=782
<783=784
<785=786
<787=788
<788=792,789
<789=790
<790=791
<792=793
<794=795
<795=801,796
<796=799,797
<797=798
<799=800
<801=802
<803=804
<804=808,805
<805=806
<806=807
<808=809
<810=811
<811=815,812
<812=813
<813=814
<815=816
<817=818
<818=824,819
<819=822,820
<820=821
<822=823
<824=825
<826=827
<827=831,828
<828=829
<829=830
<831=832
<833=834
<834=838,835
<835=836
<836=837
<838=839
<840=841
<841=861,842
<842=850,843
<843=844
<844=848,845
<845=846
<846=847
<848=849
<850=851
<851=855,852
<852=853
<853=854
<855=856
<856=858,857
<858=860,859
<861=862
<863=864
<864=866,865
<866=867
<867=869,868
<869=871,870
<872=873
<873=875,874
<876=877
<877=885,878
<878=883,879
<879=880
<880=882,881
<883=884
<885=886
<887=888
<888=904,903,889
<889=902,890
<890=900,891
<891=892
<892=893
<893=897,894
<894=896,895
<897=899,898
<900=901
<905=906
<906=930,929,907
<907=928,908
<908=912,909
<909=911,910
<912=926,913
<913=920,914
<914=915
<915=919,916
<916=918,917
<920=921
<921=925,922
<922=924,923
<926=927
<931=932
<932=956,955,933
<933=954,934
<934=938,935
<935=937,936
<938=952,939
<939=946,940
<940=941
<941=945,942
<942=944,943
<946=947
<947=951,948
<948=950,949
<952=953
<957=958
<958=982,981,959
<959=980,960
<960=964,961
<961=963,962
<964=978,965
<965=972,966
<966=967
<967=971,968
<968=970,969
<972=973
<973=977,974
<974=976,975
<978=979
<983=984
<984=1008,1007,985
<985=1006,986
<986=990,987
<987=989,988
<990=1004,991
<991=998,992
<992=993
<993=997,994
<994=996,995
<998=999
<999=1003,1000
<1000=1002,1001
<1004=1005
<1009=1010
<1010=1014,1011
<1011=1013,1012
<1015=1016
<1016=1032,1031,1017
<1017=1030,1018
<1018=1028,1019
<1019=1020
<1020=1021
<1021=1025,1022
<1022=1024,1023
<1025=1027,1026
<1028=1029
<1064=1070,1069,1065
<1065=1066
<1066=1068,1067
<1070=1264,1255,1240,1225,1216,1201,1190,1183,1172,1163,1152,1141,1130,1119,1108,1085,1078,1077,1076,1075,1073,1071
<1071=1072
<1073=1074
<1078=1079
<1079=1083,1080
<1080=1081
<1081=1082
<1083=1084
<1085=1086
<1086=1106,1087
<1087=1104,1102,1100,1098,1096,1094,1092,1090,1088
<1088=1089
<1090=1091
<1092=1093
<1094=1095
<1096=1097
<1098=1099
<1100=1101
<1102=1103
<1104=1105
<1106=1107
<1108=1109
<1109=1117,1110
<1110=1115,1113,1111
<1111=1112
<1113=1114
<1115=1116
<1117=1118
<1119=1120
<1120=1128,1121
<1121=1126,1124,1122
<1122=1123
<1124=1125
<1126=1127
<1128=1129
<1130=1131
<1131=1139,1132
<1132=1137,1135,1133
<1133=1134
<1135=1136
<1137=1138
<1139=1140
<1141=1142
<1142=1150,1143
<1143=1148,1146,1144
<1144=1145
<1146=1147
<1148=1149
<1150=1151
<1152=1153
<1153=1161,1154
<1154=1159,1157,1155
<1155=1156
<1157=1158
<1159=1160
<1161=1162
<1163=1164
<1164=1170,1165
<1165=1168,1166
<1166=1167
<1168=1169
<1170=1171
<1172=1173
<1173=1181,1174
<1174=1179,1175
<1175=1176
<1176=1178,1177
<1179=1180
<1181=1182
<1183=1184
<1184=1189,1188,1185
<1185=1187,1186
<1190=1191
<1191=1199,1192
<1192=1197,1193
<1193=1194
<1194=1196,1195
<1197=1198
<1199=1200
<1201=1202
<1202=1214,1203
<1203=1212,1210,1208,1206,1204
<1204=1205
<1206=1207
<1208=1209
<1210=1211
<1212=1213
<1214=1215
<1216=1217
<1217=1224,1223,1218
<1218=1222,1219
<1219=1221,1220
<1225=1226
<1226=1238,1227
<1227=1236,1234,1232,1228
<1228=1229
<1229=1231,1230
<1232=1233
<1234=1235
<1236=1237
<1238=1239
<1240=1241
<1241=1253,1242
<1242=1251,1249,1247,1243
<1243=1244
<1244=1246,1245
<1247=1248
<1249=1250
<1251=1252
<1253=1254
<1255=1256
<1256=1262,1257
<1257=1260,1258
<1258=1259
<1260=1261
<1262=1263
<1264=1268,1265
<1265=1267,1266
<1268=1270,1269
<1297=1303,1302,1298
<1298=1299
<1299=1301,1300
<1303=1463,1454,1445,1441,1429,1420,1407,1396,1383,1304
<1304=1381,1305
<1305=1379,1378,1377,1366,1365,1354,1353,1342,1341,1330,1329,1318,1317,1306
<1306=1307
<1307=1315,1308
<1308=1313,1311,1309
<1309=1310
<1311=1312
<1313=1314
<1315=1316
<1318=1319
<1319=1327,1320
<1320=1325,1323,1321
<1321=1322
<1323=1324
<1325=1326
<1327=1328
<1330=1331
<1331=1339,1332
<1332=1337,1335,1333
<1333=1334
<1335=1336
<1337=1338
<1339=1340
<1342=1343
<1343=1351,1344
<1344=1349,1347,1345
<1345=1346
<1347=1348
<1349=1350
<1351=1352
<1354=1355
<1355=1363,1356
<1356=1361,1359,1357
<1357=1358
<1359=1360
<1361=1362
<1363=1364
<1366=1367
<1367=1375,1368
<1368=1373,1371,1369
<1369=1370
<1371=1372
<1373=1374
<1375=1376
<1379=1380
<1381=1382
<1383=1384
<1384=1395,1394,1385
<1385=1393,1386
<1386=1392,1387
<1387=1391,1388
<1388=1390,1389
<1396=1397
<1397=1406,1405,1398
<1398=1404,1399
<1399=1403,1400
<1400=1402,1401
<1407=1414,1408
<1408=1409
<1409=1413,1410
<1410=1412,1411
<1414=1415
<1415=1419,1416
<1416=1418,1417
<1420=1421
<1421=1428,1427,1422
<1422=1426,1423
<1423=1425,1424
<1429=1430
<1430=1440,1439,1431
<1431=1438,1432
<1432=1436,1433
<1433=1434
<1434=1435
<1436=1437
<1441=1442
<1442=1444,1443
<1445=1446
<1446=1453,1452,1447
<1447=1451,1448
<1448=1450,1449
<1454=1455
<1455=1462,1461,1456
<1456=1460,1457
<1457=1459,1458
<1463=1464
<1464=1473,1472,1465
<1465=1471,1466
<1466=1468,1467
<1468=1470,1469
<1489=1495,1494,1490
<1490=1491
<1491=1493,1492
<1495=1639,1630,1621,1600,1579,1563,1538,1519,1496
<1496=1497
<1497=1517,1498
<1498=1507,1501,1499
<1499=1500
<1501=1502
<1502=1504,1503
<1504=1506,1505
<1507=1508
<1508=1510,1509
<1510=1516,1511
<1511=1515,1512
<1512=1514,1513
<1517=1518
<1519=1520
<1520=1537,1536,1521
<1521=1535,1522
<1522=1531,1530,1523
<1523=1526,1525,1524
<1526=1527
<1527=1529,1528
<1531=1532
<1532=1534,1533
<1538=1539
<1539=1562,1561,1540
<1540=1560,1541
<1541=1556,1553,1542
<1542=1549,1546,1543
<1543=1545,1544
<1546=1548,1547
<1549=1550
<1550=1552,1551
<1553=1555,1554
<1556=1557
<1557=1559,1558
<1563=1575,1564
<1564=1565
<1565=1573,1566
<1566=1571,1569,1567
<1567=1568
<1569=1570
<1571=1572
<1573=1574
<1575=1576
<1576=1578,1577
<1579=1580
<1580=1599,1598,1581
<1581=1597,1582
<1582=1595,1583
<1583=1586,1584
<1584=1585
<1586=1587
<1587=1593,1588
<1588=1591,1589
<1589=1590
<1591=1592
<1593=1594
<1595=1596
<1600=1601
<1601=1620,1619,1602
<1602=1618,1603
<1603=1616,1604
<1604=1607,1605
<1605=1606
<1607=1608
<1608=1614,1609
<1609=1612,1610
<1610=1611
<1612=1613
<1614=1615
<1616=1617
<1621=1622
<1622=1629,1628,1623
<1623=1627,1624
<1624=1626,1625
<1630=1631
<1631=1638,1637,1632
<1632=1636,1633
<1633=1635,1634
<1639=1640
<1640=1647,1646,1641
<1641=1645,1642
<1642=1644,1643
<1663=1666,1665,1664
