>3	FunctionDef	swap (argument_type * a , argument_type * b)
>4	ParameterList	argument_type * a , argument_type * b
>5	Parameter	 
>6	Identifier	b
>7	ParameterType	argument_type *
>8	Parameter	 
>9	Identifier	a
>10	ParameterType	argument_type *
>11	ReturnType	static void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	AssignmentExpr	* b = t
>15	Identifier	t
>16	UnaryOp	* b
>17	Identifier	b
>18	UnaryOperator	*
>19	ExpressionStatement	 
>20	AssignmentExpr	* a = * b
>21	UnaryOp	* b
>22	Identifier	b
>23	UnaryOperator	*
>24	UnaryOp	* a
>25	Identifier	a
>26	UnaryOperator	*
>27	IdentifierDeclStatement	 
>28	IdentifierDecl	t = * a
>29	AssignmentExpr	t = * a
>30	UnaryOp	* a
>31	Identifier	a
>32	UnaryOperator	*
>33	Identifier	t
>34	Identifier	t
>35	IdentifierDeclType	argument_type
>44	FunctionDef	vector_dump (const argument_type * array , const size_t size)
>45	ParameterList	const argument_type * array , const size_t size
>46	Parameter	 
>47	Identifier	size
>48	ParameterType	const size_t
>49	Parameter	 
>50	Identifier	array
>51	ParameterType	const argument_type *
>52	ReturnType	static void
>53	CompoundStatement	 
>54	ExpressionStatement	 
>55	ShiftExpression	std 
>56	Identifier	std 
>57	Identifier	std 
>58	ForStatement	for ( size_t i = 1 ; i < size ; ++ i )
>59	CompoundStatement	 
>60	ExpressionStatement	 
>61	ShiftExpression	std 
>62	ShiftExpression	\", \" << array [ i ]
>63	ArrayIndexing	array [ i ]
>64	Identifier	i
>65	Identifier	array
>66	PrimaryExpression	\", \"
>67	Identifier	std 
>68	UnaryExpression	 
>69	Identifier	i
>70	IncDec	++
>71	Condition	 
>72	RelationalExpression	i < size
>73	Identifier	size
>74	Identifier	i
>75	ForInit	 
>76	IdentifierDeclStatement	size_t i = 1 ;
>77	IdentifierDecl	i = 1
>78	AssignmentExpr	i = 1
>79	PrimaryExpression	1
>80	Identifier	i
>81	Identifier	i
>82	IdentifierDeclType	size_t
>83	ExpressionStatement	 
>84	ShiftExpression	std 
>85	ArrayIndexing	array [ 0 ]
>86	PrimaryExpression	0
>87	Identifier	array
>88	Identifier	std 
>95	FunctionDef	vector_init (T * array , const size_t size , size_t mod)
>96	ParameterList	T * array , const size_t size , size_t mod
>97	Parameter	 
>98	Identifier	mod
>99	ParameterType	size_t
>100	Parameter	 
>101	Identifier	size
>102	ParameterType	const size_t
>103	Parameter	 
>104	Identifier	array
>105	ParameterType	T *
>106	ReturnType	static void
>107	CompoundStatement	 
>108	ExpressionStatement	 
>109	CallExpression	assert ( 0 )
>110	ArgumentList	0
>111	Argument	0
>112	PrimaryExpression	0
>113	Callee	assert
>114	Identifier	assert
>127	FunctionDef	serial_quicksort_helper (argument_type * array , size_t size , bool verbose , const Comparator & compareFunctor)
>128	ParameterList	argument_type * array , size_t size , bool verbose , const Comparator & compareFunctor
>129	Parameter	 
>130	Identifier	compareFunctor
>131	ParameterType	const Comparator &
>132	Parameter	 
>133	Identifier	verbose
>134	ParameterType	bool
>135	Parameter	 
>136	Identifier	size
>137	ParameterType	size_t
>138	Parameter	 
>139	Identifier	array
>140	ParameterType	argument_type *
>141	ReturnType	static void
>142	CompoundStatement	 
>143	IfStatement	if ( size > 1 )
>144	CompoundStatement	 
>145	IfStatement	if ( size == 2 )
>146	ElseStatement	else
>147	CompoundStatement	 
>148	ExpressionStatement	 
>149	CallExpression	serial_quicksort_helper ( & array [ i + 1 ] , size - ( i + 1 ) , verbose , compareFunctor )
>150	ArgumentList	& array [ i + 1 ]
>151	Argument	compareFunctor
>152	Identifier	compareFunctor
>153	Argument	verbose
>154	Identifier	verbose
>155	Argument	size - ( i + 1 )
>156	AdditiveExpression	size - ( i + 1 )
>157	AdditiveExpression	i + 1
>158	PrimaryExpression	1
>159	Identifier	i
>160	Identifier	size
>161	Argument	& array [ i + 1 ]
>162	UnaryOp	& array [ i + 1 ]
>163	ArrayIndexing	array [ i + 1 ]
>164	AdditiveExpression	i + 1
>165	PrimaryExpression	1
>166	Identifier	i
>167	Identifier	array
>168	UnaryOperator	&
>169	Callee	serial_quicksort_helper
>170	Identifier	serial_quicksort_helper
>171	ExpressionStatement	 
>172	CallExpression	serial_quicksort_helper ( array , i , verbose , compareFunctor )
>173	ArgumentList	array
>174	Argument	compareFunctor
>175	Identifier	compareFunctor
>176	Argument	verbose
>177	Identifier	verbose
>178	Argument	i
>179	Identifier	i
>180	Argument	array
>181	Identifier	array
>182	Callee	serial_quicksort_helper
>183	Identifier	serial_quicksort_helper
>184	IfStatement	if ( verbose )
>185	CompoundStatement	 
>186	ExpressionStatement	 
>187	CallExpression	vector_dump ( array , size )
>188	ArgumentList	array
>189	Argument	size
>190	Identifier	size
>191	Argument	array
>192	Identifier	array
>193	Callee	vector_dump
>194	Identifier	vector_dump
>195	Condition	 
>196	Identifier	verbose
>197	IdentifierDeclStatement	 
>198	IdentifierDecl	i = partition ( array , size , verbose , compareFunctor )
>199	AssignmentExpr	i = partition ( array , size , verbose , compareFunctor )
>200	CallExpression	partition ( array , size , verbose , compareFunctor )
>201	ArgumentList	array
>202	Argument	compareFunctor
>203	Identifier	compareFunctor
>204	Argument	verbose
>205	Identifier	verbose
>206	Argument	size
>207	Identifier	size
>208	Argument	array
>209	Identifier	array
>210	Callee	partition
>211	Identifier	partition
>212	Identifier	i
>213	Identifier	i
>214	IdentifierDeclType	size_t
>215	IfStatement	if ( verbose )
>216	CompoundStatement	 
>217	ExpressionStatement	 
>218	CallExpression	vector_dump ( array , size )
>219	ArgumentList	array
>220	Argument	size
>221	Identifier	size
>222	Argument	array
>223	Identifier	array
>224	Callee	vector_dump
>225	Identifier	vector_dump
>226	ExpressionStatement	 
>227	ShiftExpression	std 
>228	ShiftExpression	\"qs( \" << std 
>229	ShiftExpression	std 
>230	ShiftExpression	array << std 
>231	ShiftExpression	std 
>232	ShiftExpression	\",\" << size << \")\" << std 
>233	ShiftExpression	size << \")\" << std 
>234	ShiftExpression	\")\" << std 
>235	Identifier	std 
>236	PrimaryExpression	\")\"
>237	Identifier	size
>238	PrimaryExpression	\",\"
>239	Identifier	std 
>240	Identifier	array
>241	Identifier	std 
>242	PrimaryExpression	\"qs( \"
>243	Identifier	std 
>244	Condition	 
>245	Identifier	verbose
>246	CompoundStatement	 
>247	IfStatement	if ( array [ 1 ] < array [ 0 ] )
>248	CompoundStatement	 
>249	ExpressionStatement	 
>250	CallExpression	swap ( & array [ 0 ] , & array [ 1 ] )
>251	ArgumentList	& array [ 0 ]
>252	Argument	& array [ 1 ]
>253	UnaryOp	& array [ 1 ]
>254	ArrayIndexing	array [ 1 ]
>255	PrimaryExpression	1
>256	Identifier	array
>257	UnaryOperator	&
>258	Argument	& array [ 0 ]
>259	UnaryOp	& array [ 0 ]
>260	ArrayIndexing	array [ 0 ]
>261	PrimaryExpression	0
>262	Identifier	array
>263	UnaryOperator	&
>264	Callee	swap
>265	Identifier	swap
>266	Condition	 
>267	RelationalExpression	array [ 1 ] < array [ 0 ]
>268	ArrayIndexing	array [ 0 ]
>269	PrimaryExpression	0
>270	Identifier	array
>271	ArrayIndexing	array [ 1 ]
>272	PrimaryExpression	1
>273	Identifier	array
>274	Condition	 
>275	EqualityExpression	size == 2
>276	PrimaryExpression	2
>277	Identifier	size
>278	Condition	 
>279	RelationalExpression	size > 1
>280	PrimaryExpression	1
>281	Identifier	size
>294	FunctionDef	partition (argument_type * array , size_t size , bool verbose , const Comparator & compareFunctor)
>295	ParameterList	argument_type * array , size_t size , bool verbose , const Comparator & compareFunctor
>296	Parameter	 
>297	Identifier	compareFunctor
>298	ParameterType	const Comparator &
>299	Parameter	 
>300	Identifier	verbose
>301	ParameterType	bool
>302	Parameter	 
>303	Identifier	size
>304	ParameterType	size_t
>305	Parameter	 
>306	Identifier	array
>307	ParameterType	argument_type *
>308	ReturnType	static size_t
>309	CompoundStatement	 
>310	ReturnStatement	 
>311	Identifier	i
>312	ExpressionStatement	 
>313	CallExpression	swap ( & array [ 0 ] , & array [ i ] )
>314	ArgumentList	& array [ 0 ]
>315	Argument	& array [ i ]
>316	UnaryOp	& array [ i ]
>317	ArrayIndexing	array [ i ]
>318	Identifier	i
>319	Identifier	array
>320	UnaryOperator	&
>321	Argument	& array [ 0 ]
>322	UnaryOp	& array [ 0 ]
>323	ArrayIndexing	array [ 0 ]
>324	PrimaryExpression	0
>325	Identifier	array
>326	UnaryOperator	&
>327	Callee	swap
>328	Identifier	swap
>329	ExpressionStatement	 
>330	CallExpression	assert ( i == j )
>331	ArgumentList	i == j
>332	Argument	i == j
>333	EqualityExpression	i == j
>334	Identifier	j
>335	Identifier	i
>336	Callee	assert
>337	Identifier	assert
>338	IfStatement	if ( verbose )
>339	CompoundStatement	 
>340	ExpressionStatement	 
>341	ShiftExpression	std 
>342	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>343	ShiftExpression	i << \") j(\" << j << \")\" << std 
>344	ShiftExpression	\") j(\" << j << \")\" << std 
>345	ShiftExpression	j << \")\" << std 
>346	ShiftExpression	\")\" << std 
>347	Identifier	std 
>348	PrimaryExpression	\")\"
>349	Identifier	j
>350	PrimaryExpression	\") j(\"
>351	Identifier	i
>352	PrimaryExpression	\"i(\"
>353	Identifier	std 
>354	Condition	 
>355	Identifier	verbose
>356	Label	 
>357	Identifier	done
>358	ForStatement	for ( ; ; )
>359	CompoundStatement	 
>360	ExpressionStatement	 
>361	CallExpression	swap ( & array [ i ] , & array [ j ] )
>362	ArgumentList	& array [ i ]
>363	Argument	& array [ j ]
>364	UnaryOp	& array [ j ]
>365	ArrayIndexing	array [ j ]
>366	Identifier	j
>367	Identifier	array
>368	UnaryOperator	&
>369	Argument	& array [ i ]
>370	UnaryOp	& array [ i ]
>371	ArrayIndexing	array [ i ]
>372	Identifier	i
>373	Identifier	array
>374	UnaryOperator	&
>375	Callee	swap
>376	Identifier	swap
>377	IfStatement	if ( i == j )
>378	GotoStatement	 
>379	Identifier	done
>380	Condition	 
>381	EqualityExpression	i == j
>382	Identifier	j
>383	Identifier	i
>384	IfStatement	if ( verbose )
>385	CompoundStatement	 
>386	ExpressionStatement	 
>387	ShiftExpression	std 
>388	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>389	ShiftExpression	i << \") j(\" << j << \")\" << std 
>390	ShiftExpression	\") j(\" << j << \")\" << std 
>391	ShiftExpression	j << \")\" << std 
>392	ShiftExpression	\")\" << std 
>393	Identifier	std 
>394	PrimaryExpression	\")\"
>395	Identifier	j
>396	PrimaryExpression	\") j(\"
>397	Identifier	i
>398	PrimaryExpression	\"i(\"
>399	Identifier	std 
>400	Condition	 
>401	Identifier	verbose
>402	DoStatement	do
>403	Condition	 
>404	AndExpression	compareFunctor ( array [ i ] , pivot ) && array [ i ] != pivot
>405	EqualityExpression	array [ i ] != pivot
>406	Identifier	pivot
>407	ArrayIndexing	array [ i ]
>408	Identifier	i
>409	Identifier	array
>410	CallExpression	compareFunctor ( array [ i ] , pivot )
>411	ArgumentList	array [ i ]
>412	Argument	pivot
>413	Identifier	pivot
>414	Argument	array [ i ]
>415	ArrayIndexing	array [ i ]
>416	Identifier	i
>417	Identifier	array
>418	Callee	compareFunctor
>419	Identifier	compareFunctor
>420	CompoundStatement	 
>421	ExpressionStatement	 
>422	UnaryExpression	++ i
>423	Identifier	i
>424	IncDec	++
>425	IfStatement	if ( i == j )
>426	GotoStatement	 
>427	Identifier	done
>428	Condition	 
>429	EqualityExpression	i == j
>430	Identifier	j
>431	Identifier	i
>432	ExpressionStatement	 
>433	CallExpression	assert ( i <= j )
>434	ArgumentList	i <= j
>435	Argument	i <= j
>436	RelationalExpression	i <= j
>437	Identifier	j
>438	Identifier	i
>439	Callee	assert
>440	Identifier	assert
>441	IfStatement	if ( verbose )
>442	CompoundStatement	 
>443	ExpressionStatement	 
>444	ShiftExpression	std 
>445	ShiftExpression	\"i(\" << i << \") j(\" << j << \")\" << std 
>446	ShiftExpression	i << \") j(\" << j << \")\" << std 
>447	ShiftExpression	\") j(\" << j << \")\" << std 
>448	ShiftExpression	j << \")\" << std 
>449	ShiftExpression	\")\" << std 
>450	Identifier	std 
>451	PrimaryExpression	\")\"
>452	Identifier	j
>453	PrimaryExpression	\") j(\"
>454	Identifier	i
>455	PrimaryExpression	\"i(\"
>456	Identifier	std 
>457	Condition	 
>458	Identifier	verbose
>459	DoStatement	do
>460	Condition	 
>461	UnaryOp	! compareFunctor ( array [ j ] , pivot )
>462	CallExpression	compareFunctor ( array [ j ] , pivot )
>463	ArgumentList	array [ j ]
>464	Argument	pivot
>465	Identifier	pivot
>466	Argument	array [ j ]
>467	ArrayIndexing	array [ j ]
>468	Identifier	j
>469	Identifier	array
>470	Callee	compareFunctor
>471	Identifier	compareFunctor
>472	UnaryOperator	!
>473	CompoundStatement	 
>474	ExpressionStatement	 
>475	CallExpression	assert ( i <= j )
>476	ArgumentList	i <= j
>477	Argument	i <= j
>478	RelationalExpression	i <= j
>479	Identifier	j
>480	Identifier	i
>481	Callee	assert
>482	Identifier	assert
>483	ExpressionStatement	 
>484	UnaryExpression	-- j
>485	Identifier	j
>486	IncDec	--
>487	ExpressionStatement	 
>488	CallExpression	assert ( i < j )
>489	ArgumentList	i < j
>490	Argument	i < j
>491	RelationalExpression	i < j
>492	Identifier	j
>493	Identifier	i
>494	Callee	assert
>495	Identifier	assert
>496	IfStatement	if ( verbose )
>497	CompoundStatement	 
>498	ExpressionStatement	 
>499	CallExpression	vector_dump ( array , size )
>500	ArgumentList	array
>501	Argument	size
>502	Identifier	size
>503	Argument	array
>504	Identifier	array
>505	Callee	vector_dump
>506	Identifier	vector_dump
>507	ExpressionStatement	 
>508	ShiftExpression	std 
>509	ShiftExpression	\"for(;;)\" << std 
>510	Identifier	std 
>511	PrimaryExpression	\"for(;;)\"
>512	Identifier	std 
>513	Condition	 
>514	Identifier	verbose
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	j = size
>517	AssignmentExpr	j = size
>518	Identifier	size
>519	Identifier	size
>520	Identifier	j
>521	IdentifierDeclType	size_t
>522	IdentifierDeclStatement	 
>523	IdentifierDecl	i = 0
>524	AssignmentExpr	i = 0
>525	PrimaryExpression	0
>526	Identifier	i
>527	Identifier	i
>528	IdentifierDeclType	size_t
>529	IdentifierDeclStatement	 
>530	IdentifierDecl	pivot = array [ 0 ]
>531	AssignmentExpr	pivot = array [ 0 ]
>532	ArrayIndexing	array [ 0 ]
>533	PrimaryExpression	0
>534	Identifier	array
>535	Identifier	pivot
>536	Identifier	pivot
>537	IdentifierDeclType	argument_type
>538	ExpressionStatement	 
>539	CallExpression	swap ( & array [ 0 ] , & array [ middleIndex ] )
>540	ArgumentList	& array [ 0 ]
>541	Argument	& array [ middleIndex ]
>542	UnaryOp	& array [ middleIndex ]
>543	ArrayIndexing	array [ middleIndex ]
>544	Identifier	middleIndex
>545	Identifier	array
>546	UnaryOperator	&
>547	Argument	& array [ 0 ]
>548	UnaryOp	& array [ 0 ]
>549	ArrayIndexing	array [ 0 ]
>550	PrimaryExpression	0
>551	Identifier	array
>552	UnaryOperator	&
>553	Callee	swap
>554	Identifier	swap
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	middleIndex = size / 2
>557	AssignmentExpr	middleIndex = size / 2
>558	MultiplicativeExpression	size / 2
>559	PrimaryExpression	2
>560	Identifier	size
>561	Identifier	middleIndex
>562	Identifier	middleIndex
>563	IdentifierDeclType	size_t
>584	FunctionDef	vector_base (size_t size , bool verbose)
>585	ParameterList	size_t size , bool verbose
>586	Parameter	 
>587	Identifier	verbose
>588	ParameterType	bool
>589	Parameter	 
>590	Identifier	size
>591	ParameterType	size_t
>592	CompoundStatement	 
>598	FunctionDef	vector_base ()
>599	ParameterList	 
>600	CompoundStatement	 
>604	FunctionDef	~vector_base ()
>605	ParameterList	 
>606	CompoundStatement	 
>610	FunctionDef	size ()
>611	ParameterList	 
>612	ReturnType	size_t
>613	CompoundStatement	 
>614	ReturnStatement	 
>615	Identifier	m_size
>620	FunctionDef	serial_quicksort ()
>621	ParameterList	 
>622	ReturnType	void
>623	CompoundStatement	 
>624	ExpressionStatement	 
>625	CallExpression	serial_quicksort_helper ( m_array , m_size , m_verbose , m_compareFunctor )
>626	ArgumentList	m_array
>627	Argument	m_compareFunctor
>628	Identifier	m_compareFunctor
>629	Argument	m_verbose
>630	Identifier	m_verbose
>631	Argument	m_size
>632	Identifier	m_size
>633	Argument	m_array
>634	Identifier	m_array
>635	Callee	serial_quicksort_helper
>636	Identifier	serial_quicksort_helper
>644	FunctionDef	print ()
>645	ParameterList	 
>646	ReturnType	void
>647	CompoundStatement	 
>648	ExpressionStatement	 
>649	CallExpression	vector_dump ( m_array , m_size )
>650	ArgumentList	m_array
>651	Argument	m_size
>652	Identifier	m_size
>653	Argument	m_array
>654	Identifier	m_array
>655	Callee	vector_dump
>656	Identifier	vector_dump
>662	FunctionDef	isSorted ()
>663	ParameterList	 
>664	ReturnType	bool
>665	CompoundStatement	 
>666	ReturnStatement	 
>667	Identifier	sortedTillNow
>668	IfStatement	if ( m_size > 1 )
>669	CompoundStatement	 
>670	ForStatement	for ( size_t i = 1 ; i < size && sortedTillNow ; ++ i )
>671	CompoundStatement	 
>672	ExpressionStatement	 
>673	AssignmentExpr	last = m_array [ i ]
>674	ArrayIndexing	m_array [ i ]
>675	Identifier	i
>676	Identifier	m_array
>677	Identifier	last
>678	ExpressionStatement	 
>679	AssignmentExpr	sortedTillNow = sortedTillNow && m_compareFunctor ( last , m_array [ i ] )
>680	AndExpression	sortedTillNow && m_compareFunctor ( last , m_array [ i ] )
>681	CallExpression	m_compareFunctor ( last , m_array [ i ] )
>682	ArgumentList	last
>683	Argument	m_array [ i ]
>684	ArrayIndexing	m_array [ i ]
>685	Identifier	i
>686	Identifier	m_array
>687	Argument	last
>688	Identifier	last
>689	Callee	m_compareFunctor
>690	Identifier	m_compareFunctor
>691	Identifier	sortedTillNow
>692	Identifier	sortedTillNow
>693	UnaryExpression	 
>694	Identifier	i
>695	IncDec	++
>696	Condition	 
>697	AndExpression	i < size && sortedTillNow
>698	Identifier	sortedTillNow
>699	RelationalExpression	i < size
>700	Identifier	size
>701	Identifier	i
>702	ForInit	 
>703	IdentifierDeclStatement	size_t i = 1 ;
>704	IdentifierDecl	i = 1
>705	AssignmentExpr	i = 1
>706	PrimaryExpression	1
>707	Identifier	i
>708	Identifier	i
>709	IdentifierDeclType	size_t
>710	IdentifierDeclStatement	 
>711	IdentifierDecl	last ( m_array [ 0 ] )
>712	ArrayIndexing	m_array [ 0 ]
>713	PrimaryExpression	0
>714	Identifier	m_array
>715	Identifier	last
>716	IdentifierDeclType	argument_type
>717	IdentifierDeclStatement	 
>718	IdentifierDecl	size = m_size
>719	AssignmentExpr	size = m_size
>720	Identifier	m_size
>721	Identifier	m_size
>722	Identifier	size
>723	IdentifierDeclType	size_t
>724	Condition	 
>725	RelationalExpression	m_size > 1
>726	PrimaryExpression	1
>727	Identifier	m_size
>728	IdentifierDeclStatement	 
>729	IdentifierDecl	sortedTillNow = true
>730	AssignmentExpr	sortedTillNow = true
>731	Identifier	true
>732	Identifier	true
>733	Identifier	sortedTillNow
>734	IdentifierDeclType	bool
>761	FunctionDef	~my_vector_type ()
>762	ParameterList	 
>763	CompoundStatement	 
>764	IfStatement	if ( shouldBeFreed )
>765	CompoundStatement	 
>766	ExpressionStatement	 
>767	PtrMemberAccess	this -> m_array
>768	Identifier	m_array
>769	Identifier	this
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Condition	 
>774	Identifier	shouldBeFreed
>780	FunctionDef	partitionVector ()
>781	ParameterList	 
>782	ReturnType	size_t
>783	CompoundStatement	 
>784	ReturnStatement	 
>785	Identifier	toBeReturned
>786	ExpressionStatement	 
>787	AssignmentExpr	isPartitioned = true
>788	Identifier	true
>789	Identifier	isPartitioned
>790	IdentifierDeclStatement	 
>791	IdentifierDecl	toBeReturned = partition ( this -> m_array , this -> m_size , this -> m_verbose , this -> m_compareFunctor )
>792	AssignmentExpr	toBeReturned = partition ( this -> m_array , this -> m_size , this -> m_verbose , this -> m_compareFunctor )
>793	CallExpression	partition ( this -> m_array , this -> m_size , this -> m_verbose , this -> m_compareFunctor )
>794	ArgumentList	this -> m_array
>795	Argument	this -> m_compareFunctor
>796	PtrMemberAccess	this -> m_compareFunctor
>797	Identifier	m_compareFunctor
>798	Identifier	this
>799	Argument	this -> m_verbose
>800	PtrMemberAccess	this -> m_verbose
>801	Identifier	m_verbose
>802	Identifier	this
>803	Argument	this -> m_size
>804	PtrMemberAccess	this -> m_size
>805	Identifier	m_size
>806	Identifier	this
>807	Argument	this -> m_array
>808	PtrMemberAccess	this -> m_array
>809	Identifier	m_array
>810	Identifier	this
>811	Callee	partition
>812	Identifier	partition
>813	Identifier	toBeReturned
>814	Identifier	toBeReturned
>815	IdentifierDeclType	size_t
>829	FunctionDef	getIndex (size_t index)
>830	ParameterList	size_t index
>831	Parameter	 
>832	Identifier	index
>833	ParameterType	size_t
>834	ReturnType	argument_type
>835	CompoundStatement	 
>836	ReturnStatement	 
>837	ArrayIndexing	this -> m_array [ index ]
>838	Identifier	index
>839	PtrMemberAccess	this -> m_array
>840	Identifier	m_array
>841	Identifier	this
>864	FunctionDef	operator = (const my_vector_type & copied)
>865	ParameterList	const my_vector_type & copied
>866	Parameter	 
>867	Identifier	copied
>868	ParameterType	const my_vector_type &
>869	ReturnType	my_vector_type &
>870	CompoundStatement	 
>871	ReturnStatement	 
>872	UnaryOp	* this
>873	Identifier	this
>874	UnaryOperator	*
>875	ForStatement	for ( size_t i = 0 ; i < size ; ++ i )
>876	CompoundStatement	 
>877	ExpressionStatement	 
>878	AssignmentExpr	this -> m_array [ i ] = copied . m_array [ i ]
>879	ArrayIndexing	copied . m_array [ i ]
>880	Identifier	i
>881	MemberAccess	copied . m_array
>882	Identifier	m_array
>883	Identifier	copied
>884	ArrayIndexing	this -> m_array [ i ]
>885	Identifier	i
>886	PtrMemberAccess	this -> m_array
>887	Identifier	m_array
>888	Identifier	this
>889	UnaryExpression	 
>890	Identifier	i
>891	IncDec	++
>892	Condition	 
>893	RelationalExpression	i < size
>894	Identifier	size
>895	Identifier	i
>896	ForInit	 
>897	IdentifierDeclStatement	size_t i = 0 ;
>898	IdentifierDecl	i = 0
>899	AssignmentExpr	i = 0
>900	PrimaryExpression	0
>901	Identifier	i
>902	Identifier	i
>903	IdentifierDeclType	size_t
>904	IdentifierDeclStatement	 
>905	IdentifierDecl	size = this -> m_size
>906	AssignmentExpr	size = this -> m_size
>907	PtrMemberAccess	this -> m_size
>908	Identifier	m_size
>909	Identifier	this
>910	Identifier	size
>911	Identifier	size
>912	IdentifierDeclType	size_t
>913	ExpressionStatement	 
>914	AssignmentExpr	this -> m_array = new argument_type [ this -> m_size ]
>915	PtrMemberAccess	this -> m_size
>916	Identifier	m_size
>917	Identifier	this
>918	PtrMemberAccess	this -> m_array
>919	Identifier	m_array
>920	Identifier	this
>921	ExpressionStatement	 
>922	AssignmentExpr	this -> m_size = copied . m_size
>923	MemberAccess	copied . m_size
>924	Identifier	m_size
>925	Identifier	copied
>926	PtrMemberAccess	this -> m_size
>927	Identifier	m_size
>928	Identifier	this
>929	ExpressionStatement	 
>930	PtrMemberAccess	this -> m_array
>931	Identifier	m_array
>932	Identifier	this
>933	Statement	 
>934	Statement	 
>935	Statement	 
>959	FunctionDef	computeChildTag (ancestry_path_tag_type parent , int childIndex)
>960	ParameterList	ancestry_path_tag_type parent , int childIndex
>961	Parameter	 
>962	Identifier	childIndex
>963	ParameterType	int
>964	Parameter	 
>965	Identifier	parent
>966	ParameterType	ancestry_path_tag_type
>967	ReturnType	inline ancestry_path_tag_type
>968	CompoundStatement	 
>969	ReturnStatement	 
>970	AdditiveExpression	( parent << 1 ) + childIndex
>971	Identifier	childIndex
>972	ShiftExpression	parent << 1
>973	PrimaryExpression	1
>974	Identifier	parent
>980	FunctionDef	computeParentTag (ancestry_path_tag_type child)
>981	ParameterList	ancestry_path_tag_type child
>982	Parameter	 
>983	Identifier	child
>984	ParameterType	ancestry_path_tag_type
>985	ReturnType	inline ancestry_path_tag_type
>986	CompoundStatement	 
>987	ReturnStatement	 
>988	ShiftExpression	( child - 1 ) >> 1
>989	PrimaryExpression	1
>990	AdditiveExpression	child - 1
>991	PrimaryExpression	1
>992	Identifier	child
>1019	FunctionDef	execute (ancestry_path_tag_type ancestry , template_quick_sort_context_type & graph)
>1020	ParameterList	ancestry_path_tag_type ancestry , template_quick_sort_context_type & graph
>1021	Parameter	 
>1022	Identifier	graph
>1023	ParameterType	template_quick_sort_context_type &
>1024	Parameter	 
>1025	Identifier	ancestry
>1026	ParameterType	ancestry_path_tag_type
>1027	CompoundStatement	 
>1028	ReturnStatement	 
>1029	Identifier	CnC 
>1030	IfStatement	if ( currentVectorSize <= THRESHOLD )
>1031	ElseStatement	else
>1032	CompoundStatement	 
>1033	ExpressionStatement	 
>1034	CallExpression	graph . ancestryPathSplitTagSpace . put ( leftChildTag )
>1035	ArgumentList	leftChildTag
>1036	Argument	leftChildTag
>1037	Identifier	leftChildTag
>1038	Callee	graph . ancestryPathSplitTagSpace . put
>1039	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1040	Identifier	put
>1041	MemberAccess	graph . ancestryPathSplitTagSpace
>1042	Identifier	ancestryPathSplitTagSpace
>1043	Identifier	graph
>1044	ExpressionStatement	 
>1045	CallExpression	graph . unsortedVectorSpace . put ( leftChildTag , leftChildVector )
>1046	ArgumentList	leftChildTag
>1047	Argument	leftChildVector
>1048	Identifier	leftChildVector
>1049	Argument	leftChildTag
>1050	Identifier	leftChildTag
>1051	Callee	graph . unsortedVectorSpace . put
>1052	MemberAccess	graph . unsortedVectorSpace . put
>1053	Identifier	put
>1054	MemberAccess	graph . unsortedVectorSpace
>1055	Identifier	unsortedVectorSpace
>1056	Identifier	graph
>1057	IdentifierDeclStatement	 
>1058	IdentifierDecl	leftChildTag = computeChildTag ( ancestry , vector_type 
>1059	AssignmentExpr	leftChildTag = computeChildTag ( ancestry , vector_type 
>1060	CallExpression	computeChildTag ( ancestry , vector_type 
>1061	ArgumentList	ancestry
>1062	Argument	vector_type 
>1063	Identifier	vector_type 
>1064	Argument	ancestry
>1065	Identifier	ancestry
>1066	Callee	computeChildTag
>1067	Identifier	computeChildTag
>1068	Identifier	leftChildTag
>1069	Identifier	leftChildTag
>1070	IdentifierDeclType	ancestry_path_tag_type
>1071	IdentifierDeclStatement	 
>1072	IdentifierDecl	leftChildVector ( currentVector , pivotIndex , vector_type 
>1073	Expression	currentVector , pivotIndex , vector_type 
>1074	Expression	pivotIndex , vector_type 
>1075	Identifier	vector_type 
>1076	Identifier	pivotIndex
>1077	Identifier	currentVector
>1078	Identifier	leftChildVector
>1079	IdentifierDeclType	vector_type
>1080	ExpressionStatement	 
>1081	CallExpression	graph . ancestryPathSplitTagSpace . put ( rightChildTag )
>1082	ArgumentList	rightChildTag
>1083	Argument	rightChildTag
>1084	Identifier	rightChildTag
>1085	Callee	graph . ancestryPathSplitTagSpace . put
>1086	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1087	Identifier	put
>1088	MemberAccess	graph . ancestryPathSplitTagSpace
>1089	Identifier	ancestryPathSplitTagSpace
>1090	Identifier	graph
>1091	ExpressionStatement	 
>1092	CallExpression	graph . unsortedVectorSpace . put ( rightChildTag , rightChildVector )
>1093	ArgumentList	rightChildTag
>1094	Argument	rightChildVector
>1095	Identifier	rightChildVector
>1096	Argument	rightChildTag
>1097	Identifier	rightChildTag
>1098	Callee	graph . unsortedVectorSpace . put
>1099	MemberAccess	graph . unsortedVectorSpace . put
>1100	Identifier	put
>1101	MemberAccess	graph . unsortedVectorSpace
>1102	Identifier	unsortedVectorSpace
>1103	Identifier	graph
>1104	IdentifierDeclStatement	 
>1105	IdentifierDecl	rightChildTag = computeChildTag ( ancestry , vector_type 
>1106	AssignmentExpr	rightChildTag = computeChildTag ( ancestry , vector_type 
>1107	CallExpression	computeChildTag ( ancestry , vector_type 
>1108	ArgumentList	ancestry
>1109	Argument	vector_type 
>1110	Identifier	vector_type 
>1111	Argument	ancestry
>1112	Identifier	ancestry
>1113	Callee	computeChildTag
>1114	Identifier	computeChildTag
>1115	Identifier	rightChildTag
>1116	Identifier	rightChildTag
>1117	IdentifierDeclType	ancestry_path_tag_type
>1118	IdentifierDeclStatement	 
>1119	IdentifierDecl	rightChildVector ( currentVector , pivotIndex , vector_type 
>1120	Expression	currentVector , pivotIndex , vector_type 
>1121	Expression	pivotIndex , vector_type 
>1122	Identifier	vector_type 
>1123	Identifier	pivotIndex
>1124	Identifier	currentVector
>1125	Identifier	rightChildVector
>1126	IdentifierDeclType	vector_type
>1127	ExpressionStatement	 
>1128	CallExpression	graph . pivotSpace . put ( ancestry , currentVector . getIndex ( pivotIndex ) )
>1129	ArgumentList	ancestry
>1130	Argument	currentVector . getIndex ( pivotIndex )
>1131	CallExpression	currentVector . getIndex ( pivotIndex )
>1132	ArgumentList	pivotIndex
>1133	Argument	pivotIndex
>1134	Identifier	pivotIndex
>1135	Callee	currentVector . getIndex
>1136	MemberAccess	currentVector . getIndex
>1137	Identifier	getIndex
>1138	Identifier	currentVector
>1139	Argument	ancestry
>1140	Identifier	ancestry
>1141	Callee	graph . pivotSpace . put
>1142	MemberAccess	graph . pivotSpace . put
>1143	Identifier	put
>1144	MemberAccess	graph . pivotSpace
>1145	Identifier	pivotSpace
>1146	Identifier	graph
>1147	IdentifierDeclStatement	 
>1148	IdentifierDecl	pivotIndex = currentVector . partitionVector ( )
>1149	AssignmentExpr	pivotIndex = currentVector . partitionVector ( )
>1150	CallExpression	currentVector . partitionVector ( )
>1151	ArgumentList	 
>1152	Callee	currentVector . partitionVector
>1153	MemberAccess	currentVector . partitionVector
>1154	Identifier	partitionVector
>1155	Identifier	currentVector
>1156	Identifier	pivotIndex
>1157	Identifier	pivotIndex
>1158	IdentifierDeclType	size_t
>1159	CompoundStatement	 
>1160	IfStatement	if ( ancestry > 0 )
>1161	CompoundStatement	 
>1162	ExpressionStatement	 
>1163	CallExpression	graph . ancestryPathConcatTagSpace . put ( computeParentTag ( ancestry ) )
>1164	ArgumentList	computeParentTag ( ancestry )
>1165	Argument	computeParentTag ( ancestry )
>1166	CallExpression	computeParentTag ( ancestry )
>1167	ArgumentList	ancestry
>1168	Argument	ancestry
>1169	Identifier	ancestry
>1170	Callee	computeParentTag
>1171	Identifier	computeParentTag
>1172	Callee	graph . ancestryPathConcatTagSpace . put
>1173	MemberAccess	graph . ancestryPathConcatTagSpace . put
>1174	Identifier	put
>1175	MemberAccess	graph . ancestryPathConcatTagSpace
>1176	Identifier	ancestryPathConcatTagSpace
>1177	Identifier	graph
>1178	Condition	 
>1179	RelationalExpression	ancestry > 0
>1180	PrimaryExpression	0
>1181	Identifier	ancestry
>1182	ExpressionStatement	 
>1183	CallExpression	graph . sortedVectorSpace . put ( ancestry , currentVector )
>1184	ArgumentList	ancestry
>1185	Argument	currentVector
>1186	Identifier	currentVector
>1187	Argument	ancestry
>1188	Identifier	ancestry
>1189	Callee	graph . sortedVectorSpace . put
>1190	MemberAccess	graph . sortedVectorSpace . put
>1191	Identifier	put
>1192	MemberAccess	graph . sortedVectorSpace
>1193	Identifier	sortedVectorSpace
>1194	Identifier	graph
>1195	ExpressionStatement	 
>1196	CallExpression	currentVector . serial_quicksort ( )
>1197	ArgumentList	 
>1198	Callee	currentVector . serial_quicksort
>1199	MemberAccess	currentVector . serial_quicksort
>1200	Identifier	serial_quicksort
>1201	Identifier	currentVector
>1202	Condition	 
>1203	RelationalExpression	currentVectorSize <= THRESHOLD
>1204	Identifier	THRESHOLD
>1205	Identifier	currentVectorSize
>1206	IdentifierDeclStatement	 
>1207	IdentifierDecl	currentVectorSize = currentVector . size ( )
>1208	AssignmentExpr	currentVectorSize = currentVector . size ( )
>1209	CallExpression	currentVector . size ( )
>1210	ArgumentList	 
>1211	Callee	currentVector . size
>1212	MemberAccess	currentVector . size
>1213	Identifier	size
>1214	Identifier	currentVector
>1215	Identifier	currentVectorSize
>1216	Identifier	currentVectorSize
>1217	IdentifierDeclType	size_t
>1218	IdentifierDeclStatement	 
>1219	IdentifierDecl	currentVector ( graph . unsortedVectorSpace . get ( ancestry ) )
>1220	CallExpression	graph . unsortedVectorSpace . get ( ancestry )
>1221	ArgumentList	ancestry
>1222	Argument	ancestry
>1223	Identifier	ancestry
>1224	Callee	graph . unsortedVectorSpace . get
>1225	MemberAccess	graph . unsortedVectorSpace . get
>1226	Identifier	get
>1227	MemberAccess	graph . unsortedVectorSpace
>1228	Identifier	unsortedVectorSpace
>1229	Identifier	graph
>1230	Identifier	currentVector
>1231	IdentifierDeclType	vector_type
>1258	FunctionDef	execute (ancestry_path_tag_type ancestry , template_quick_sort_context_type & graph)
>1259	ParameterList	ancestry_path_tag_type ancestry , template_quick_sort_context_type & graph
>1260	Parameter	 
>1261	Identifier	graph
>1262	ParameterType	template_quick_sort_context_type &
>1263	Parameter	 
>1264	Identifier	ancestry
>1265	ParameterType	ancestry_path_tag_type
>1266	CompoundStatement	 
>1267	ReturnStatement	 
>1268	Identifier	CnC 
>1269	IfStatement	if ( ancestry > 0 )
>1270	CompoundStatement	 
>1271	ExpressionStatement	 
>1272	CallExpression	graph . ancestryPathConcatTagSpace . put ( computeParentTag ( ancestry ) )
>1273	ArgumentList	computeParentTag ( ancestry )
>1274	Argument	computeParentTag ( ancestry )
>1275	CallExpression	computeParentTag ( ancestry )
>1276	ArgumentList	ancestry
>1277	Argument	ancestry
>1278	Identifier	ancestry
>1279	Callee	computeParentTag
>1280	Identifier	computeParentTag
>1281	Callee	graph . ancestryPathConcatTagSpace . put
>1282	MemberAccess	graph . ancestryPathConcatTagSpace . put
>1283	Identifier	put
>1284	MemberAccess	graph . ancestryPathConcatTagSpace
>1285	Identifier	ancestryPathConcatTagSpace
>1286	Identifier	graph
>1287	Condition	 
>1288	RelationalExpression	ancestry > 0
>1289	PrimaryExpression	0
>1290	Identifier	ancestry
>1291	ExpressionStatement	 
>1292	CallExpression	graph . sortedVectorSpace . put ( ancestry , currentSortedVector )
>1293	ArgumentList	ancestry
>1294	Argument	currentSortedVector
>1295	Identifier	currentSortedVector
>1296	Argument	ancestry
>1297	Identifier	ancestry
>1298	Callee	graph . sortedVectorSpace . put
>1299	MemberAccess	graph . sortedVectorSpace . put
>1300	Identifier	put
>1301	MemberAccess	graph . sortedVectorSpace
>1302	Identifier	sortedVectorSpace
>1303	Identifier	graph
>1304	IdentifierDeclStatement	 
>1305	IdentifierDecl	currentSortedVector ( leftChildVector , pivot , rightChildVector )
>1306	Expression	leftChildVector , pivot , rightChildVector
>1307	Expression	pivot , rightChildVector
>1308	Identifier	rightChildVector
>1309	Identifier	pivot
>1310	Identifier	leftChildVector
>1311	Identifier	currentSortedVector
>1312	IdentifierDeclType	vector_type
>1313	IdentifierDeclStatement	 
>1314	IdentifierDecl	pivot ( graph . pivotSpace . get ( ancestry ) )
>1315	CallExpression	graph . pivotSpace . get ( ancestry )
>1316	ArgumentList	ancestry
>1317	Argument	ancestry
>1318	Identifier	ancestry
>1319	Callee	graph . pivotSpace . get
>1320	MemberAccess	graph . pivotSpace . get
>1321	Identifier	get
>1322	MemberAccess	graph . pivotSpace
>1323	Identifier	pivotSpace
>1324	Identifier	graph
>1325	Identifier	pivot
>1326	IdentifierDeclType	vector_member_type
>1327	IdentifierDeclStatement	 
>1328	IdentifierDecl	leftChildVector ( graph . sortedVectorSpace . get ( computeChildTag ( ancestry , vector_type 
>1329	CallExpression	graph . sortedVectorSpace . get ( computeChildTag ( ancestry , vector_type 
>1330	ArgumentList	computeChildTag ( ancestry , vector_type 
>1331	Argument	computeChildTag ( ancestry , vector_type 
>1332	CallExpression	computeChildTag ( ancestry , vector_type 
>1333	ArgumentList	ancestry
>1334	Argument	vector_type 
>1335	Identifier	vector_type 
>1336	Argument	ancestry
>1337	Identifier	ancestry
>1338	Callee	computeChildTag
>1339	Identifier	computeChildTag
>1340	Callee	graph . sortedVectorSpace . get
>1341	MemberAccess	graph . sortedVectorSpace . get
>1342	Identifier	get
>1343	MemberAccess	graph . sortedVectorSpace
>1344	Identifier	sortedVectorSpace
>1345	Identifier	graph
>1346	Identifier	leftChildVector
>1347	IdentifierDeclType	vector_type
>1348	IdentifierDeclStatement	 
>1349	IdentifierDecl	rightChildVector ( graph . sortedVectorSpace . get ( computeChildTag ( ancestry , vector_type 
>1350	CallExpression	graph . sortedVectorSpace . get ( computeChildTag ( ancestry , vector_type 
>1351	ArgumentList	computeChildTag ( ancestry , vector_type 
>1352	Argument	computeChildTag ( ancestry , vector_type 
>1353	CallExpression	computeChildTag ( ancestry , vector_type 
>1354	ArgumentList	ancestry
>1355	Argument	vector_type 
>1356	Identifier	vector_type 
>1357	Argument	ancestry
>1358	Identifier	ancestry
>1359	Callee	computeChildTag
>1360	Identifier	computeChildTag
>1361	Callee	graph . sortedVectorSpace . get
>1362	MemberAccess	graph . sortedVectorSpace . get
>1363	Identifier	get
>1364	MemberAccess	graph . sortedVectorSpace
>1365	Identifier	sortedVectorSpace
>1366	Identifier	graph
>1367	Identifier	rightChildVector
>1368	IdentifierDeclType	vector_type
>1386	FunctionDef	main (int argc , char * argv [ ])
>1387	ParameterList	int argc , char * argv [ ]
>1388	Parameter	 
>1389	Identifier	argv
>1390	ParameterType	char * [ ]
>1391	Parameter	 
>1392	Identifier	argc
>1393	ParameterType	int
>1394	ReturnType	int
>1395	CompoundStatement	 
>1396	ReturnStatement	 
>1397	Identifier	toBeReturned
>1398	IfStatement	if ( argc < 2 )
>1399	ElseStatement	else
>1400	CompoundStatement	 
>1401	ExpressionStatement	 
>1402	CallExpression	printf ( \"Computed in %g seconds\n\" , ( t1 - t0 ) . seconds ( ) )
>1403	ArgumentList	\"Computed in %g seconds\n\"
>1404	Argument	( t1 - t0 ) . seconds ( )
>1405	CallExpression	( t1 - t0 ) . seconds ( )
>1406	ArgumentList	 
>1407	Callee	( t1 - t0 ) . seconds
>1408	MemberAccess	( t1 - t0 ) . seconds
>1409	Identifier	seconds
>1410	AdditiveExpression	t1 - t0
>1411	Identifier	t0
>1412	Identifier	t1
>1413	Argument	\"Computed in %g seconds\n\"
>1414	PrimaryExpression	\"Computed in %g seconds\n\"
>1415	Callee	printf
>1416	Identifier	printf
>1417	ExpressionStatement	 
>1418	CallExpression	assert ( sorted . isSorted ( ) )
>1419	ArgumentList	sorted . isSorted ( )
>1420	Argument	sorted . isSorted ( )
>1421	CallExpression	sorted . isSorted ( )
>1422	ArgumentList	 
>1423	Callee	sorted . isSorted
>1424	MemberAccess	sorted . isSorted
>1425	Identifier	isSorted
>1426	Identifier	sorted
>1427	Callee	assert
>1428	Identifier	assert
>1429	ExpressionStatement	 
>1430	CallExpression	assert ( sorted . size ( ) == integerVector . size ( ) )
>1431	ArgumentList	sorted . size ( ) == integerVector . size ( )
>1432	Argument	sorted . size ( ) == integerVector . size ( )
>1433	EqualityExpression	sorted . size ( ) == integerVector . size ( )
>1434	CallExpression	integerVector . size ( )
>1435	ArgumentList	 
>1436	Callee	integerVector . size
>1437	MemberAccess	integerVector . size
>1438	Identifier	size
>1439	Identifier	integerVector
>1440	CallExpression	sorted . size ( )
>1441	ArgumentList	 
>1442	Callee	sorted . size
>1443	MemberAccess	sorted . size
>1444	Identifier	size
>1445	Identifier	sorted
>1446	Callee	assert
>1447	Identifier	assert
>1448	IdentifierDeclStatement	 
>1449	IdentifierDecl	t1 = tbb 
>1450	AssignmentExpr	t1 = tbb 
>1451	CallExpression	tbb 
>1452	ArgumentList	 
>1453	Callee	tbb 
>1454	Identifier	tbb 
>1455	Identifier	t1
>1456	Identifier	t1
>1457	IdentifierDeclType	tbb 
>1458	ExpressionStatement	 
>1459	CallExpression	graph . wait ( )
>1460	ArgumentList	 
>1461	Callee	graph . wait
>1462	MemberAccess	graph . wait
>1463	Identifier	wait
>1464	Identifier	graph
>1465	IdentifierDeclStatement	 
>1466	IdentifierDecl	sorted ( graph . sortedVectorSpace . get ( 0 ) )
>1467	CallExpression	graph . sortedVectorSpace . get ( 0 )
>1468	ArgumentList	0
>1469	Argument	0
>1470	PrimaryExpression	0
>1471	Callee	graph . sortedVectorSpace . get
>1472	MemberAccess	graph . sortedVectorSpace . get
>1473	Identifier	get
>1474	MemberAccess	graph . sortedVectorSpace
>1475	Identifier	sortedVectorSpace
>1476	Identifier	graph
>1477	Identifier	sorted
>1478	IdentifierDeclType	my_vector_type < double >
>1479	ExpressionStatement	 
>1480	CallExpression	graph . ancestryPathSplitTagSpace . put ( 0 )
>1481	ArgumentList	0
>1482	Argument	0
>1483	PrimaryExpression	0
>1484	Callee	graph . ancestryPathSplitTagSpace . put
>1485	MemberAccess	graph . ancestryPathSplitTagSpace . put
>1486	Identifier	put
>1487	MemberAccess	graph . ancestryPathSplitTagSpace
>1488	Identifier	ancestryPathSplitTagSpace
>1489	Identifier	graph
>1490	ExpressionStatement	 
>1491	CallExpression	graph . unsortedVectorSpace . put ( ancestry_path_tag_type ( 0 ) , integerVector )
>1492	ArgumentList	ancestry_path_tag_type ( 0 )
>1493	Argument	integerVector
>1494	Identifier	integerVector
>1495	Argument	ancestry_path_tag_type ( 0 )
>1496	CallExpression	ancestry_path_tag_type ( 0 )
>1497	ArgumentList	0
>1498	Argument	0
>1499	PrimaryExpression	0
>1500	Callee	ancestry_path_tag_type
>1501	Identifier	ancestry_path_tag_type
>1502	Callee	graph . unsortedVectorSpace . put
>1503	MemberAccess	graph . unsortedVectorSpace . put
>1504	Identifier	put
>1505	MemberAccess	graph . unsortedVectorSpace
>1506	Identifier	unsortedVectorSpace
>1507	Identifier	graph
>1508	IdentifierDeclStatement	 
>1509	IdentifierDecl	graph
>1510	Identifier	graph
>1511	IdentifierDeclType	quick_sort_context < double >
>1512	IdentifierDeclStatement	 
>1513	IdentifierDecl	t0 = tbb 
>1514	AssignmentExpr	t0 = tbb 
>1515	CallExpression	tbb 
>1516	ArgumentList	 
>1517	Callee	tbb 
>1518	Identifier	tbb 
>1519	Identifier	t0
>1520	Identifier	t0
>1521	IdentifierDeclType	tbb 
>1522	IdentifierDeclStatement	 
>1523	IdentifierDecl	integerVector ( size_t ( size ) , verbose )
>1524	Expression	size_t ( size ) , verbose
>1525	Identifier	verbose
>1526	CallExpression	size_t ( size )
>1527	ArgumentList	size
>1528	Argument	size
>1529	Identifier	size
>1530	Callee	size_t
>1531	Identifier	size_t
>1532	Identifier	integerVector
>1533	IdentifierDeclType	my_vector_type < double >
>1534	IdentifierDeclStatement	 
>1535	IdentifierDecl	verbose = argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1536	AssignmentExpr	verbose = argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1537	AndExpression	argc == 3 && ! strcmp ( \"-v\" , argv [ 2 ] )
>1538	UnaryOp	! strcmp ( \"-v\" , argv [ 2 ] )
>1539	CallExpression	strcmp ( \"-v\" , argv [ 2 ] )
>1540	ArgumentList	\"-v\"
>1541	Argument	argv [ 2 ]
>1542	ArrayIndexing	argv [ 2 ]
>1543	PrimaryExpression	2
>1544	Identifier	argv
>1545	Argument	\"-v\"
>1546	PrimaryExpression	\"-v\"
>1547	Callee	strcmp
>1548	Identifier	strcmp
>1549	UnaryOperator	!
>1550	EqualityExpression	argc == 3
>1551	PrimaryExpression	3
>1552	Identifier	argc
>1553	Identifier	verbose
>1554	Identifier	verbose
>1555	IdentifierDeclType	bool
>1556	IdentifierDeclStatement	 
>1557	IdentifierDecl	size = atoi ( argv [ 1 ] )
>1558	AssignmentExpr	size = atoi ( argv [ 1 ] )
>1559	CallExpression	atoi ( argv [ 1 ] )
>1560	ArgumentList	argv [ 1 ]
>1561	Argument	argv [ 1 ]
>1562	ArrayIndexing	argv [ 1 ]
>1563	PrimaryExpression	1
>1564	Identifier	argv
>1565	Callee	atoi
>1566	Identifier	atoi
>1567	Identifier	size
>1568	Identifier	size
>1569	IdentifierDeclType	int
>1570	ExpressionStatement	 
>1571	CallExpression	srand ( 0xdeadbeef )
>1572	ArgumentList	0xdeadbeef
>1573	Argument	0xdeadbeef
>1574	PrimaryExpression	0xdeadbeef
>1575	Callee	srand
>1576	Identifier	srand
>1577	CompoundStatement	 
>1578	ExpressionStatement	 
>1579	AssignmentExpr	toBeReturned = 1
>1580	PrimaryExpression	1
>1581	Identifier	toBeReturned
>1582	ExpressionStatement	 
>1583	ShiftExpression	std 
>1584	PrimaryExpression	\"usage
>1585	Identifier	std 
>1586	Condition	 
>1587	RelationalExpression	argc < 2
>1588	PrimaryExpression	2
>1589	Identifier	argc
>1590	ExpressionStatement	 
>1591	CallExpression	setbuf ( stderr , NULL )
>1592	ArgumentList	stderr
>1593	Argument	NULL
>1594	Identifier	NULL
>1595	Argument	stderr
>1596	Identifier	stderr
>1597	Callee	setbuf
>1598	Identifier	setbuf
>1599	ExpressionStatement	 
>1600	CallExpression	setbuf ( stdout , NULL )
>1601	ArgumentList	stdout
>1602	Argument	NULL
>1603	Identifier	NULL
>1604	Argument	stdout
>1605	Identifier	stdout
>1606	Callee	setbuf
>1607	Identifier	setbuf
>1608	IdentifierDeclStatement	 
>1609	IdentifierDecl	toBeReturned = 0
>1610	AssignmentExpr	toBeReturned = 0
>1611	PrimaryExpression	0
>1612	Identifier	toBeReturned
>1613	Identifier	toBeReturned
>1614	IdentifierDeclType	int
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=27,19,13
<13=14
<14=16,15
<16=18,17
<19=20
<20=24,21
<21=23,22
<24=26,25
<27=28
<28=35,34,29
<29=33,30
<30=32,31
<44=53,52,45
<45=49,46
<46=48,47
<49=51,50
<53=83,58,54
<54=55
<55=57,56
<58=75,71,68,59
<59=60
<60=61
<61=67,62
<62=66,63
<63=65,64
<68=70,69
<71=72
<72=74,73
<75=76
<76=77
<77=82,81,78
<78=80,79
<83=84
<84=88,85
<85=87,86
<95=107,106,96
<96=103,100,97
<97=99,98
<100=102,101
<103=105,104
<107=108
<108=109
<109=113,110
<110=111
<111=112
<113=114
<127=142,141,128
<128=138,135,132,129
<129=131,130
<132=134,133
<135=137,136
<138=140,139
<142=143
<143=278,144
<144=145
<145=274,246,146
<146=147
<147=215,197,184,171,148
<148=149
<149=169,150
<150=161,155,153,151
<151=152
<153=154
<155=156
<156=160,157
<157=159,158
<161=162
<162=168,163
<163=167,164
<164=166,165
<169=170
<171=172
<172=182,173
<173=180,178,176,174
<174=175
<176=177
<178=179
<180=181
<182=183
<184=195,185
<185=186
<186=187
<187=193,188
<188=191,189
<189=190
<191=192
<193=194
<195=196
<197=198
<198=214,213,199
<199=212,200
<200=210,201
<201=208,206,204,202
<202=203
<204=205
<206=207
<208=209
<210=211
<215=244,216
<216=226,217
<217=218
<218=224,219
<219=222,220
<220=221
<222=223
<224=225
<226=227
<227=243,228
<228=242,229
<229=241,230
<230=240,231
<231=239,232
<232=238,233
<233=237,234
<234=236,235
<244=245
<246=247
<247=266,248
<248=249
<249=250
<250=264,251
<251=258,252
<252=253
<253=257,254
<254=256,255
<258=259
<259=263,260
<260=262,261
<264=265
<266=267
<267=271,268
<268=270,269
<271=273,272
<274=275
<275=277,276
<278=279
<279=281,280
<294=309,308,295
<295=305,302,299,296
<296=298,297
<299=301,300
<302=304,303
<305=307,306
<309=555,538,529,522,515,358,356,338,329,312,310
<310=311
<312=313
<313=327,314
<314=321,315
<315=316
<316=320,317
<317=319,318
<321=322
<322=326,323
<323=325,324
<327=328
<329=330
<330=336,331
<331=332
<332=333
<333=335,334
<336=337
<338=354,339
<339=340
<340=341
<341=353,342
<342=352,343
<343=351,344
<344=350,345
<345=349,346
<346=348,347
<354=355
<356=357
<358=359
<359=496,487,459,441,402,384,377,360
<360=361
<361=375,362
<362=369,363
<363=364
<364=368,365
<365=367,366
<369=370
<370=374,371
<371=373,372
<375=376
<377=380,378
<378=379
<380=381
<381=383,382
<384=400,385
<385=386
<386=387
<387=399,388
<388=398,389
<389=397,390
<390=396,391
<391=395,392
<392=394,393
<400=401
<402=420,403
<403=404
<404=410,405
<405=407,406
<407=409,408
<410=418,411
<411=414,412
<412=413
<414=415
<415=417,416
<418=419
<420=432,425,421
<421=422
<422=424,423
<425=428,426
<426=427
<428=429
<429=431,430
<432=433
<433=439,434
<434=435
<435=436
<436=438,437
<439=440
<441=457,442
<442=443
<443=444
<444=456,445
<445=455,446
<446=454,447
<447=453,448
<448=452,449
<449=451,450
<457=458
<459=473,460
<460=461
<461=472,462
<462=470,463
<463=466,464
<464=465
<466=467
<467=469,468
<470=471
<473=483,474
<474=475
<475=481,476
<476=477
<477=478
<478=480,479
<481=482
<483=484
<484=486,485
<487=488
<488=494,489
<489=490
<490=491
<491=493,492
<494=495
<496=513,497
<497=507,498
<498=499
<499=505,500
<500=503,501
<501=502
<503=504
<505=506
<507=508
<508=512,509
<509=511,510
<513=514
<515=516
<516=521,520,517
<517=519,518
<522=523
<523=528,527,524
<524=526,525
<529=530
<530=537,536,531
<531=535,532
<532=534,533
<538=539
<539=553,540
<540=547,541
<541=542
<542=546,543
<543=545,544
<547=548
<548=552,549
<549=551,550
<553=554
<555=556
<556=563,562,557
<557=561,558
<558=560,559
<584=592,585
<585=589,586
<586=588,587
<589=591,590
<598=600,599
<604=606,605
<610=613,612,611
<613=614
<614=615
<620=623,622,621
<623=624
<624=625
<625=635,626
<626=633,631,629,627
<627=628
<629=630
<631=632
<633=634
<635=636
<644=647,646,645
<647=648
<648=649
<649=655,650
<650=653,651
<651=652
<653=654
<655=656
<662=665,664,663
<665=728,668,666
<666=667
<668=724,669
<669=717,710,670
<670=702,696,693,671
<671=678,672
<672=673
<673=677,674
<674=676,675
<678=679
<679=692,680
<680=691,681
<681=689,682
<682=687,683
<683=684
<684=686,685
<687=688
<689=690
<693=695,694
<696=697
<697=699,698
<699=701,700
<702=703
<703=704
<704=709,708,705
<705=707,706
<710=711
<711=716,715,712
<712=714,713
<717=718
<718=723,722,719
<719=721,720
<724=725
<725=727,726
<728=729
<729=734,733,730
<730=732,731
<761=763,762
<763=764
<764=773,765
<765=772,771,770,766
<766=767
<767=769,768
<773=774
<780=783,782,781
<783=790,786,784
<784=785
<786=787
<787=789,788
<790=791
<791=815,814,792
<792=813,793
<793=811,794
<794=807,803,799,795
<795=796
<796=798,797
<799=800
<800=802,801
<803=804
<804=806,805
<807=808
<808=810,809
<811=812
<829=835,834,830
<830=831
<831=833,832
<835=836
<836=837
<837=839,838
<839=841,840
<864=870,869,865
<865=866
<866=868,867
<870=935,934,933,929,921,913,904,875,871
<871=872
<872=874,873
<875=896,892,889,876
<876=877
<877=878
<878=884,879
<879=881,880
<881=883,882
<884=886,885
<886=888,887
<889=891,890
<892=893
<893=895,894
<896=897
<897=898
<898=903,902,899
<899=901,900
<904=905
<905=912,911,906
<906=910,907
<907=909,908
<913=914
<914=918,915
<915=917,916
<918=920,919
<921=922
<922=926,923
<923=925,924
<926=928,927
<929=930
<930=932,931
<959=968,967,960
<960=964,961
<961=963,962
<964=966,965
<968=969
<969=970
<970=972,971
<972=974,973
<980=986,985,981
<981=982
<982=984,983
<986=987
<987=988
<988=990,989
<990=992,991
<1019=1027,1020
<1020=1024,1021
<1021=1023,1022
<1024=1026,1025
<1027=1218,1206,1030,1028
<1028=1029
<1030=1202,1159,1031
<1031=1032
<1032=1147,1127,1118,1104,1091,1080,1071,1057,1044,1033
<1033=1034
<1034=1038,1035
<1035=1036
<1036=1037
<1038=1039
<1039=1041,1040
<1041=1043,1042
<1044=1045
<1045=1051,1046
<1046=1049,1047
<1047=1048
<1049=1050
<1051=1052
<1052=1054,1053
<1054=1056,1055
<1057=1058
<1058=1070,1069,1059
<1059=1068,1060
<1060=1066,1061
<1061=1064,1062
<1062=1063
<1064=1065
<1066=1067
<1071=1072
<1072=1079,1078,1073
<1073=1077,1074
<1074=1076,1075
<1080=1081
<1081=1085,1082
<1082=1083
<1083=1084
<1085=1086
<1086=1088,1087
<1088=1090,1089
<1091=1092
<1092=1098,1093
<1093=1096,1094
<1094=1095
<1096=1097
<1098=1099
<1099=1101,1100
<1101=1103,1102
<1104=1105
<1105=1117,1116,1106
<1106=1115,1107
<1107=1113,1108
<1108=1111,1109
<1109=1110
<1111=1112
<1113=1114
<1118=1119
<1119=1126,1125,1120
<1120=1124,1121
<1121=1123,1122
<1127=1128
<1128=1141,1129
<1129=1139,1130
<1130=1131
<1131=1135,1132
<1132=1133
<1133=1134
<1135=1136
<1136=1138,1137
<1139=1140
<1141=1142
<1142=1144,1143
<1144=1146,1145
<1147=1148
<1148=1158,1157,1149
<1149=1156,1150
<1150=1152,1151
<1152=1153
<1153=1155,1154
<1159=1195,1182,1160
<1160=1178,1161
<1161=1162
<1162=1163
<1163=1172,1164
<1164=1165
<1165=1166
<1166=1170,1167
<1167=1168
<1168=1169
<1170=1171
<1172=1173
<1173=1175,1174
<1175=1177,1176
<1178=1179
<1179=1181,1180
<1182=1183
<1183=1189,1184
<1184=1187,1185
<1185=1186
<1187=1188
<1189=1190
<1190=1192,1191
<1192=1194,1193
<1195=1196
<1196=1198,1197
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1205,1204
<1206=1207
<1207=1217,1216,1208
<1208=1215,1209
<1209=1211,1210
<1211=1212
<1212=1214,1213
<1218=1219
<1219=1231,1230,1220
<1220=1224,1221
<1221=1222
<1222=1223
<1224=1225
<1225=1227,1226
<1227=1229,1228
<1258=1266,1259
<1259=1263,1260
<1260=1262,1261
<1263=1265,1264
<1266=1348,1327,1313,1304,1291,1269,1267
<1267=1268
<1269=1287,1270
<1270=1271
<1271=1272
<1272=1281,1273
<1273=1274
<1274=1275
<1275=1279,1276
<1276=1277
<1277=1278
<1279=1280
<1281=1282
<1282=1284,1283
<1284=1286,1285
<1287=1288
<1288=1290,1289
<1291=1292
<1292=1298,1293
<1293=1296,1294
<1294=1295
<1296=1297
<1298=1299
<1299=1301,1300
<1301=1303,1302
<1304=1305
<1305=1312,1311,1306
<1306=1310,1307
<1307=1309,1308
<1313=1314
<1314=1326,1325,1315
<1315=1319,1316
<1316=1317
<1317=1318
<1319=1320
<1320=1322,1321
<1322=1324,1323
<1327=1328
<1328=1347,1346,1329
<1329=1340,1330
<1330=1331
<1331=1332
<1332=1338,1333
<1333=1336,1334
<1334=1335
<1336=1337
<1338=1339
<1340=1341
<1341=1343,1342
<1343=1345,1344
<1348=1349
<1349=1368,1367,1350
<1350=1361,1351
<1351=1352
<1352=1353
<1353=1359,1354
<1354=1357,1355
<1355=1356
<1357=1358
<1359=1360
<1361=1362
<1362=1364,1363
<1364=1366,1365
<1386=1395,1394,1387
<1387=1391,1388
<1388=1390,1389
<1391=1393,1392
<1395=1608,1599,1590,1398,1396
<1396=1397
<1398=1586,1577,1399
<1399=1400
<1400=1570,1556,1534,1522,1512,1508,1490,1479,1465,1458,1448,1429,1417,1401
<1401=1402
<1402=1415,1403
<1403=1413,1404
<1404=1405
<1405=1407,1406
<1407=1408
<1408=1410,1409
<1410=1412,1411
<1413=1414
<1415=1416
<1417=1418
<1418=1427,1419
<1419=1420
<1420=1421
<1421=1423,1422
<1423=1424
<1424=1426,1425
<1427=1428
<1429=1430
<1430=1446,1431
<1431=1432
<1432=1433
<1433=1440,1434
<1434=1436,1435
<1436=1437
<1437=1439,1438
<1440=1442,1441
<1442=1443
<1443=1445,1444
<1446=1447
<1448=1449
<1449=1457,1456,1450
<1450=1455,1451
<1451=1453,1452
<1453=1454
<1458=1459
<1459=1461,1460
<1461=1462
<1462=1464,1463
<1465=1466
<1466=1478,1477,1467
<1467=1471,1468
<1468=1469
<1469=1470
<1471=1472
<1472=1474,1473
<1474=1476,1475
<1479=1480
<1480=1484,1481
<1481=1482
<1482=1483
<1484=1485
<1485=1487,1486
<1487=1489,1488
<1490=1491
<1491=1502,1492
<1492=1495,1493
<1493=1494
<1495=1496
<1496=1500,1497
<1497=1498
<1498=1499
<1500=1501
<1502=1503
<1503=1505,1504
<1505=1507,1506
<1508=1509
<1509=1511,1510
<1512=1513
<1513=1521,1520,1514
<1514=1519,1515
<1515=1517,1516
<1517=1518
<1522=1523
<1523=1533,1532,1524
<1524=1526,1525
<1526=1530,1527
<1527=1528
<1528=1529
<1530=1531
<1534=1535
<1535=1555,1554,1536
<1536=1553,1537
<1537=1550,1538
<1538=1549,1539
<1539=1547,1540
<1540=1545,1541
<1541=1542
<1542=1544,1543
<1545=1546
<1547=1548
<1550=1552,1551
<1556=1557
<1557=1569,1568,1558
<1558=1567,1559
<1559=1565,1560
<1560=1561
<1561=1562
<1562=1564,1563
<1565=1566
<1570=1571
<1571=1575,1572
<1572=1573
<1573=1574
<1575=1576
<1577=1582,1578
<1578=1579
<1579=1581,1580
<1582=1583
<1583=1585,1584
<1586=1587
<1587=1589,1588
<1590=1591
<1591=1597,1592
<1592=1595,1593
<1593=1594
<1595=1596
<1597=1598
<1599=1600
<1600=1606,1601
<1601=1604,1602
<1602=1603
<1604=1605
<1606=1607
<1608=1609
<1609=1614,1613,1610
<1610=1612,1611
