>3	FunctionDef	StreamTimeParser 
>4	ParameterList	double start , double end
>5	Parameter	 
>6	Identifier	end
>7	ParameterType	double
>8	Parameter	 
>9	Identifier	start
>10	ParameterType	double
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	CallExpression	addTimeSet ( start , end )
>14	ArgumentList	start
>15	Argument	end
>16	Identifier	end
>17	Argument	start
>18	Identifier	start
>19	Callee	addTimeSet
>20	Identifier	addTimeSet
>21	ExpressionStatement	 
>22	CallExpression	setCurrentTime ( 0 )
>23	ArgumentList	0
>24	Argument	0
>25	PrimaryExpression	0
>26	Callee	setCurrentTime
>27	Identifier	setCurrentTime
>33	FunctionDef	StreamTimeParser 
>34	ParameterList	 
>35	CompoundStatement	 
>39	FunctionDef	StreamTimeParser 
>40	ParameterList	double start , double end
>41	Parameter	 
>42	Identifier	end
>43	ParameterType	double
>44	Parameter	 
>45	Identifier	start
>46	ParameterType	double
>47	ReturnType	bool
>48	CompoundStatement	 
>49	ReturnStatement	 
>50	Identifier	rval
>51	IfStatement	if ( end > start && end >= 0 && start >= 0 )
>52	CompoundStatement	 
>53	IfStatement	if ( ! duplicate )
>54	CompoundStatement	 
>55	ExpressionStatement	 
>56	AssignmentExpr	rval = true
>57	Identifier	true
>58	Identifier	rval
>59	ExpressionStatement	 
>60	CallExpression	mTimeSets . push_back ( make_pair ( start , end ) )
>61	ArgumentList	make_pair ( start , end )
>62	Argument	make_pair ( start , end )
>63	CallExpression	make_pair ( start , end )
>64	ArgumentList	start
>65	Argument	end
>66	Identifier	end
>67	Argument	start
>68	Identifier	start
>69	Callee	make_pair
>70	Identifier	make_pair
>71	Callee	mTimeSets . push_back
>72	MemberAccess	mTimeSets . push_back
>73	Identifier	push_back
>74	Identifier	mTimeSets
>75	Condition	 
>76	UnaryOp	! duplicate
>77	Identifier	duplicate
>78	UnaryOperator	!
>79	ForStatement	for ( TimeSetList 
>80	CompoundStatement	 
>81	ExpressionStatement	 
>82	AssignmentExpr	duplicate = ( i -> first == start && i -> second == end )
>83	AndExpression	i -> first == start && i -> second == end
>84	EqualityExpression	i -> second == end
>85	Identifier	end
>86	PtrMemberAccess	i -> second
>87	Identifier	second
>88	Identifier	i
>89	EqualityExpression	i -> first == start
>90	Identifier	start
>91	PtrMemberAccess	i -> first
>92	Identifier	first
>93	Identifier	i
>94	Identifier	duplicate
>95	UnaryExpression	 
>96	Identifier	i
>97	IncDec	++
>98	Condition	 
>99	AndExpression	! duplicate && i != mTimeSets . end ( )
>100	EqualityExpression	i != mTimeSets . end ( )
>101	CallExpression	mTimeSets . end ( )
>102	ArgumentList	 
>103	Callee	mTimeSets . end
>104	MemberAccess	mTimeSets . end
>105	Identifier	end
>106	Identifier	mTimeSets
>107	Identifier	i
>108	UnaryOp	! duplicate
>109	Identifier	duplicate
>110	UnaryOperator	!
>111	ForInit	 
>112	IdentifierDeclStatement	TimeSetList 
>113	IdentifierDecl	i = mTimeSets . begin ( )
>114	AssignmentExpr	i = mTimeSets . begin ( )
>115	CallExpression	mTimeSets . begin ( )
>116	ArgumentList	 
>117	Callee	mTimeSets . begin
>118	MemberAccess	mTimeSets . begin
>119	Identifier	begin
>120	Identifier	mTimeSets
>121	Identifier	i
>122	Identifier	i
>123	IdentifierDeclType	TimeSetList 
>124	IdentifierDeclStatement	 
>125	IdentifierDecl	duplicate = false
>126	AssignmentExpr	duplicate = false
>127	Identifier	false
>128	Identifier	false
>129	Identifier	duplicate
>130	IdentifierDeclType	bool
>131	Condition	 
>132	AndExpression	end > start && end >= 0 && start >= 0
>133	AndExpression	end >= 0 && start >= 0
>134	RelationalExpression	start >= 0
>135	PrimaryExpression	0
>136	Identifier	start
>137	RelationalExpression	end >= 0
>138	PrimaryExpression	0
>139	Identifier	end
>140	RelationalExpression	end > start
>141	Identifier	start
>142	Identifier	end
>143	IdentifierDeclStatement	 
>144	IdentifierDecl	rval = false
>145	AssignmentExpr	rval = false
>146	Identifier	false
>147	Identifier	false
>148	Identifier	rval
>149	IdentifierDeclType	bool
>167	FunctionDef	StreamTimeParser 
>168	ParameterList	double start , double end
>169	Parameter	 
>170	Identifier	end
>171	ParameterType	double
>172	Parameter	 
>173	Identifier	start
>174	ParameterType	double
>175	ReturnType	void
>176	CompoundStatement	 
>177	ForStatement	for ( TimeSetList 
>178	CompoundStatement	 
>179	ExpressionStatement	 
>180	CallExpression	mTimeSets . push_back ( make_pair ( i -> first , i -> second ) )
>181	ArgumentList	make_pair ( i -> first , i -> second )
>182	Argument	make_pair ( i -> first , i -> second )
>183	CallExpression	make_pair ( i -> first , i -> second )
>184	ArgumentList	i -> first
>185	Argument	i -> second
>186	PtrMemberAccess	i -> second
>187	Identifier	second
>188	Identifier	i
>189	Argument	i -> first
>190	PtrMemberAccess	i -> first
>191	Identifier	first
>192	Identifier	i
>193	Callee	make_pair
>194	Identifier	make_pair
>195	Callee	mTimeSets . push_back
>196	MemberAccess	mTimeSets . push_back
>197	Identifier	push_back
>198	Identifier	mTimeSets
>199	UnaryExpression	 
>200	Identifier	i
>201	IncDec	++
>202	Condition	 
>203	EqualityExpression	i != newTimeSets . end ( )
>204	CallExpression	newTimeSets . end ( )
>205	ArgumentList	 
>206	Callee	newTimeSets . end
>207	MemberAccess	newTimeSets . end
>208	Identifier	end
>209	Identifier	newTimeSets
>210	Identifier	i
>211	ForInit	 
>212	IdentifierDeclStatement	TimeSetList 
>213	IdentifierDecl	i = newTimeSets . begin ( )
>214	AssignmentExpr	i = newTimeSets . begin ( )
>215	CallExpression	newTimeSets . begin ( )
>216	ArgumentList	 
>217	Callee	newTimeSets . begin
>218	MemberAccess	newTimeSets . begin
>219	Identifier	begin
>220	Identifier	newTimeSets
>221	Identifier	i
>222	Identifier	i
>223	IdentifierDeclType	TimeSetList 
>224	ForStatement	for ( TimeSetList 
>225	CompoundStatement	 
>226	IfStatement	if ( start == i -> first )
>227	ElseStatement	else
>228	IfStatement	if ( start > i -> first )
>229	ElseStatement	else
>230	IfStatement	if ( end > i -> first )
>231	ElseStatement	else
>232	CompoundStatement	 
>233	ExpressionStatement	 
>234	UnaryExpression	++ i
>235	Identifier	i
>236	IncDec	++
>237	CompoundStatement	 
>238	IfStatement	if ( end >= i -> second )
>239	ElseStatement	else
>240	CompoundStatement	 
>241	ExpressionStatement	 
>242	UnaryExpression	++ i
>243	Identifier	i
>244	IncDec	++
>245	ExpressionStatement	 
>246	AssignmentExpr	i -> first = end
>247	Identifier	end
>248	PtrMemberAccess	i -> first
>249	Identifier	first
>250	Identifier	i
>251	CompoundStatement	 
>252	ExpressionStatement	 
>253	AssignmentExpr	i = mTimeSets . erase ( i )
>254	CallExpression	mTimeSets . erase ( i )
>255	ArgumentList	i
>256	Argument	i
>257	Identifier	i
>258	Callee	mTimeSets . erase
>259	MemberAccess	mTimeSets . erase
>260	Identifier	erase
>261	Identifier	mTimeSets
>262	Identifier	i
>263	Condition	 
>264	RelationalExpression	end >= i -> second
>265	PtrMemberAccess	i -> second
>266	Identifier	second
>267	Identifier	i
>268	Identifier	end
>269	Condition	 
>270	RelationalExpression	end > i -> first
>271	PtrMemberAccess	i -> first
>272	Identifier	first
>273	Identifier	i
>274	Identifier	end
>275	CompoundStatement	 
>276	ExpressionStatement	 
>277	UnaryExpression	++ i
>278	Identifier	i
>279	IncDec	++
>280	IfStatement	if ( end < oldEnd )
>281	CompoundStatement	 
>282	ExpressionStatement	 
>283	CallExpression	newTimeSets . push_back ( make_pair ( end , oldEnd ) )
>284	ArgumentList	make_pair ( end , oldEnd )
>285	Argument	make_pair ( end , oldEnd )
>286	CallExpression	make_pair ( end , oldEnd )
>287	ArgumentList	end
>288	Argument	oldEnd
>289	Identifier	oldEnd
>290	Argument	end
>291	Identifier	end
>292	Callee	make_pair
>293	Identifier	make_pair
>294	Callee	newTimeSets . push_back
>295	MemberAccess	newTimeSets . push_back
>296	Identifier	push_back
>297	Identifier	newTimeSets
>298	Condition	 
>299	RelationalExpression	end < oldEnd
>300	Identifier	oldEnd
>301	Identifier	end
>302	ExpressionStatement	 
>303	AssignmentExpr	i -> second = start
>304	Identifier	start
>305	PtrMemberAccess	i -> second
>306	Identifier	second
>307	Identifier	i
>308	IdentifierDeclStatement	 
>309	IdentifierDecl	oldEnd = i -> second
>310	AssignmentExpr	oldEnd = i -> second
>311	PtrMemberAccess	i -> second
>312	Identifier	second
>313	Identifier	i
>314	Identifier	oldEnd
>315	Identifier	oldEnd
>316	IdentifierDeclType	double
>317	Condition	 
>318	RelationalExpression	start > i -> first
>319	PtrMemberAccess	i -> first
>320	Identifier	first
>321	Identifier	i
>322	Identifier	start
>323	CompoundStatement	 
>324	IfStatement	if ( end >= i -> second )
>325	ElseStatement	else
>326	CompoundStatement	 
>327	ExpressionStatement	 
>328	UnaryExpression	++ i
>329	Identifier	i
>330	IncDec	++
>331	ExpressionStatement	 
>332	AssignmentExpr	i -> first = end
>333	Identifier	end
>334	PtrMemberAccess	i -> first
>335	Identifier	first
>336	Identifier	i
>337	CompoundStatement	 
>338	ExpressionStatement	 
>339	AssignmentExpr	i = mTimeSets . erase ( i )
>340	CallExpression	mTimeSets . erase ( i )
>341	ArgumentList	i
>342	Argument	i
>343	Identifier	i
>344	Callee	mTimeSets . erase
>345	MemberAccess	mTimeSets . erase
>346	Identifier	erase
>347	Identifier	mTimeSets
>348	Identifier	i
>349	Condition	 
>350	RelationalExpression	end >= i -> second
>351	PtrMemberAccess	i -> second
>352	Identifier	second
>353	Identifier	i
>354	Identifier	end
>355	Condition	 
>356	EqualityExpression	start == i -> first
>357	PtrMemberAccess	i -> first
>358	Identifier	first
>359	Identifier	i
>360	Identifier	start
>361	Condition	 
>362	EqualityExpression	i != mTimeSets . end ( )
>363	CallExpression	mTimeSets . end ( )
>364	ArgumentList	 
>365	Callee	mTimeSets . end
>366	MemberAccess	mTimeSets . end
>367	Identifier	end
>368	Identifier	mTimeSets
>369	Identifier	i
>370	ForInit	 
>371	IdentifierDeclStatement	TimeSetList 
>372	IdentifierDecl	i = mTimeSets . begin ( )
>373	AssignmentExpr	i = mTimeSets . begin ( )
>374	CallExpression	mTimeSets . begin ( )
>375	ArgumentList	 
>376	Callee	mTimeSets . begin
>377	MemberAccess	mTimeSets . begin
>378	Identifier	begin
>379	Identifier	mTimeSets
>380	Identifier	i
>381	Identifier	i
>382	IdentifierDeclType	TimeSetList 
>383	IdentifierDeclStatement	 
>384	IdentifierDecl	newTimeSets
>385	Identifier	newTimeSets
>386	IdentifierDeclType	TimeSetList
>405	FunctionDef	StreamTimeParser 
>406	ParameterList	double time
>407	Parameter	 
>408	Identifier	time
>409	ParameterType	double
>410	ReturnType	bool
>411	CompoundStatement	 
>412	ReturnStatement	 
>413	Identifier	rval
>414	ForStatement	for ( TimeSetList 
>415	CompoundStatement	 
>416	ExpressionStatement	 
>417	AssignmentExpr	rval = ( time >= i -> first && time <= i -> second )
>418	AndExpression	time >= i -> first && time <= i -> second
>419	RelationalExpression	time <= i -> second
>420	PtrMemberAccess	i -> second
>421	Identifier	second
>422	Identifier	i
>423	Identifier	time
>424	RelationalExpression	time >= i -> first
>425	PtrMemberAccess	i -> first
>426	Identifier	first
>427	Identifier	i
>428	Identifier	time
>429	Identifier	rval
>430	UnaryExpression	 
>431	Identifier	i
>432	IncDec	++
>433	Condition	 
>434	AndExpression	! rval && i != mTimeSets . end ( )
>435	EqualityExpression	i != mTimeSets . end ( )
>436	CallExpression	mTimeSets . end ( )
>437	ArgumentList	 
>438	Callee	mTimeSets . end
>439	MemberAccess	mTimeSets . end
>440	Identifier	end
>441	Identifier	mTimeSets
>442	Identifier	i
>443	UnaryOp	! rval
>444	Identifier	rval
>445	UnaryOperator	!
>446	ForInit	 
>447	IdentifierDeclStatement	TimeSetList 
>448	IdentifierDecl	i = mTimeSets . begin ( )
>449	AssignmentExpr	i = mTimeSets . begin ( )
>450	CallExpression	mTimeSets . begin ( )
>451	ArgumentList	 
>452	Callee	mTimeSets . begin
>453	MemberAccess	mTimeSets . begin
>454	Identifier	begin
>455	Identifier	mTimeSets
>456	Identifier	i
>457	Identifier	i
>458	IdentifierDeclType	TimeSetList 
>459	IdentifierDeclStatement	 
>460	IdentifierDecl	rval = false
>461	AssignmentExpr	rval = false
>462	Identifier	false
>463	Identifier	false
>464	Identifier	rval
>465	IdentifierDeclType	bool
>479	FunctionDef	StreamTimeParser 
>480	ParameterList	double time
>481	Parameter	 
>482	Identifier	time
>483	ParameterType	double
>484	ReturnType	void
>485	CompoundStatement	 
>486	ExpressionStatement	 
>487	AssignmentExpr	mTime = time
>488	Identifier	time
>489	Identifier	mTime
>495	FunctionDef	StreamTimeParser 
>496	ParameterList	 
>497	ReturnType	double
>498	CompoundStatement	 
>499	ReturnStatement	 
>500	Identifier	mTime
<3=11,4
<4=8,5
<5=7,6
<8=10,9
<11=21,12
<12=13
<13=19,14
<14=17,15
<15=16
<17=18
<19=20
<21=22
<22=26,23
<23=24
<24=25
<26=27
<33=35,34
<39=48,47,40
<40=44,41
<41=43,42
<44=46,45
<48=143,51,49
<49=50
<51=131,52
<52=124,79,53
<53=75,54
<54=59,55
<55=56
<56=58,57
<59=60
<60=71,61
<61=62
<62=63
<63=69,64
<64=67,65
<65=66
<67=68
<69=70
<71=72
<72=74,73
<75=76
<76=78,77
<79=111,98,95,80
<80=81
<81=82
<82=94,83
<83=89,84
<84=86,85
<86=88,87
<89=91,90
<91=93,92
<95=97,96
<98=99
<99=108,100
<100=107,101
<101=103,102
<103=104
<104=106,105
<108=110,109
<111=112
<112=113
<113=123,122,114
<114=121,115
<115=117,116
<117=118
<118=120,119
<124=125
<125=130,129,126
<126=128,127
<131=132
<132=140,133
<133=137,134
<134=136,135
<137=139,138
<140=142,141
<143=144
<144=149,148,145
<145=147,146
<167=176,175,168
<168=172,169
<169=171,170
<172=174,173
<176=383,224,177
<177=211,202,199,178
<178=179
<179=180
<180=195,181
<181=182
<182=183
<183=193,184
<184=189,185
<185=186
<186=188,187
<189=190
<190=192,191
<193=194
<195=196
<196=198,197
<199=201,200
<202=203
<203=210,204
<204=206,205
<206=207
<207=209,208
<211=212
<212=213
<213=223,222,214
<214=221,215
<215=217,216
<217=218
<218=220,219
<224=370,361,225
<225=226
<226=355,323,227
<227=228
<228=317,275,229
<229=230
<230=269,237,231
<231=232
<232=233
<233=234
<234=236,235
<237=238
<238=263,251,239
<239=240
<240=245,241
<241=242
<242=244,243
<245=246
<246=248,247
<248=250,249
<251=252
<252=253
<253=262,254
<254=258,255
<255=256
<256=257
<258=259
<259=261,260
<263=264
<264=268,265
<265=267,266
<269=270
<270=274,271
<271=273,272
<275=308,302,280,276
<276=277
<277=279,278
<280=298,281
<281=282
<282=283
<283=294,284
<284=285
<285=286
<286=292,287
<287=290,288
<288=289
<290=291
<292=293
<294=295
<295=297,296
<298=299
<299=301,300
<302=303
<303=305,304
<305=307,306
<308=309
<309=316,315,310
<310=314,311
<311=313,312
<317=318
<318=322,319
<319=321,320
<323=324
<324=349,337,325
<325=326
<326=331,327
<327=328
<328=330,329
<331=332
<332=334,333
<334=336,335
<337=338
<338=339
<339=348,340
<340=344,341
<341=342
<342=343
<344=345
<345=347,346
<349=350
<350=354,351
<351=353,352
<355=356
<356=360,357
<357=359,358
<361=362
<362=369,363
<363=365,364
<365=366
<366=368,367
<370=371
<371=372
<372=382,381,373
<373=380,374
<374=376,375
<376=377
<377=379,378
<383=384
<384=386,385
<405=411,410,406
<406=407
<407=409,408
<411=459,414,412
<412=413
<414=446,433,430,415
<415=416
<416=417
<417=429,418
<418=424,419
<419=423,420
<420=422,421
<424=428,425
<425=427,426
<430=432,431
<433=434
<434=443,435
<435=442,436
<436=438,437
<438=439
<439=441,440
<443=445,444
<446=447
<447=448
<448=458,457,449
<449=456,450
<450=452,451
<452=453
<453=455,454
<459=460
<460=465,464,461
<461=463,462
<479=485,484,480
<480=481
<481=483,482
<485=486
<486=487
<487=489,488
<495=498,497,496
<498=499
<499=500
