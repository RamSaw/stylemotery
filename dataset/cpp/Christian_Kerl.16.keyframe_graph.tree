>4	FunctionDef	FindEdgeById (int id)
>5	ParameterList	int id
>6	Parameter	 
>7	Identifier	id
>8	ParameterType	int
>9	CompoundStatement	 
>14	FunctionDef	operator ( ) (g2o 
>15	ParameterList	g2o 
>16	Parameter	 
>17	Identifier	e
>18	ParameterType	g2o 
>19	ReturnType	bool
>20	CompoundStatement	 
>21	ReturnStatement	 
>22	EqualityExpression	e -> id ( ) == id_
>23	Identifier	id_
>24	CallExpression	e -> id ( )
>25	ArgumentList	 
>26	Callee	e -> id
>27	PtrMemberAccess	e -> id
>28	Identifier	id
>29	Identifier	e
>39	FunctionDef	toIsometry (const Eigen 
>40	ParameterList	const Eigen 
>41	Parameter	 
>42	Identifier	pose
>43	ParameterType	const Eigen 
>44	ReturnType	static Eigen 
>45	CompoundStatement	 
>46	ReturnStatement	 
>47	Identifier	p
>48	ExpressionStatement	 
>49	AssignmentExpr	p . translation ( ) = pose . translation ( )
>50	CallExpression	pose . translation ( )
>51	ArgumentList	 
>52	Callee	pose . translation
>53	MemberAccess	pose . translation
>54	Identifier	translation
>55	Identifier	pose
>56	CallExpression	p . translation ( )
>57	ArgumentList	 
>58	Callee	p . translation
>59	MemberAccess	p . translation
>60	Identifier	translation
>61	Identifier	p
>62	IdentifierDeclStatement	 
>63	IdentifierDecl	p ( pose . rotation ( ) )
>64	CallExpression	pose . rotation ( )
>65	ArgumentList	 
>66	Callee	pose . rotation
>67	MemberAccess	pose . rotation
>68	Identifier	rotation
>69	Identifier	pose
>70	Identifier	p
>71	IdentifierDeclType	Eigen 
>79	FunctionDef	toAffine (const Eigen 
>80	ParameterList	const Eigen 
>81	Parameter	 
>82	Identifier	pose
>83	ParameterType	const Eigen 
>84	ReturnType	static Eigen 
>85	CompoundStatement	 
>86	ReturnStatement	 
>87	Identifier	p
>88	ExpressionStatement	 
>89	AssignmentExpr	p . translation ( ) = pose . translation ( )
>90	CallExpression	pose . translation ( )
>91	ArgumentList	 
>92	Callee	pose . translation
>93	MemberAccess	pose . translation
>94	Identifier	translation
>95	Identifier	pose
>96	CallExpression	p . translation ( )
>97	ArgumentList	 
>98	Callee	p . translation
>99	MemberAccess	p . translation
>100	Identifier	translation
>101	Identifier	p
>102	IdentifierDeclStatement	 
>103	IdentifierDecl	p ( pose . rotation ( ) )
>104	CallExpression	pose . rotation ( )
>105	ArgumentList	 
>106	Callee	pose . rotation
>107	MemberAccess	pose . rotation
>108	Identifier	rotation
>109	Identifier	pose
>110	Identifier	p
>111	IdentifierDeclType	Eigen 
>119	FunctionDef	combine (const short & left , const short & right)
>120	ParameterList	const short & left , const short & right
>121	Parameter	 
>122	Identifier	right
>123	ParameterType	const short &
>124	Parameter	 
>125	Identifier	left
>126	ParameterType	const short &
>127	ReturnType	static inline int
>128	CompoundStatement	 
>129	ReturnStatement	 
>130	InclusiveOrExpression	upper << 16 | lower
>131	Identifier	lower
>132	ShiftExpression	upper << 16
>133	PrimaryExpression	16
>134	Identifier	upper
>135	IfStatement	if ( left < right )
>136	ElseStatement	else
>137	CompoundStatement	 
>138	ExpressionStatement	 
>139	AssignmentExpr	upper = right
>140	Identifier	right
>141	Identifier	upper
>142	ExpressionStatement	 
>143	AssignmentExpr	lower = left
>144	Identifier	left
>145	Identifier	lower
>146	CompoundStatement	 
>147	ExpressionStatement	 
>148	AssignmentExpr	upper = left
>149	Identifier	left
>150	Identifier	upper
>151	ExpressionStatement	 
>152	AssignmentExpr	lower = right
>153	Identifier	right
>154	Identifier	lower
>155	Condition	 
>156	RelationalExpression	left < right
>157	Identifier	right
>158	Identifier	left
>159	IdentifierDeclStatement	 
>160	IdentifierDecl	upper
>161	Identifier	upper
>162	IdentifierDeclType	int
>163	IdentifierDecl	lower
>164	Identifier	lower
>165	IdentifierDeclType	int
>174	FunctionDef	KeyframeGraphImpl ()
>175	ParameterList	 
>176	CompoundStatement	 
>177	ExpressionStatement	 
>178	CallExpression	configure ( cfg_ )
>179	ArgumentList	cfg_
>180	Argument	cfg_
>181	Identifier	cfg_
>182	Callee	configure
>183	Identifier	configure
>184	ExpressionStatement	 
>185	CallExpression	keyframegraph_ . setVerbose ( false )
>186	ArgumentList	false
>187	Argument	false
>188	Identifier	false
>189	Callee	keyframegraph_ . setVerbose
>190	MemberAccess	keyframegraph_ . setVerbose
>191	Identifier	setVerbose
>192	Identifier	keyframegraph_
>193	ExpressionStatement	 
>194	CallExpression	keyframegraph_ . setAlgorithm ( new g2o 
>195	ArgumentList	new LinearSolver ( )
>196	Argument	new LinearSolver ( )
>197	UnaryExpression	new LinearSolver ( )
>198	Callee	keyframegraph_ . setAlgorithm
>199	MemberAccess	keyframegraph_ . setAlgorithm
>200	Identifier	setAlgorithm
>201	Identifier	keyframegraph_
>208	FunctionDef	~KeyframeGraphImpl ()
>209	ParameterList	 
>210	CompoundStatement	 
>211	ExpressionStatement	 
>212	CallExpression	optimization_thread_ . join ( )
>213	ArgumentList	 
>214	Callee	optimization_thread_ . join
>215	MemberAccess	optimization_thread_ . join
>216	Identifier	join
>217	Identifier	optimization_thread_
>218	ExpressionStatement	 
>219	CallExpression	new_keyframes_ . push ( LocalMap 
>220	ArgumentList	LocalMap 
>221	Argument	LocalMap 
>222	CallExpression	LocalMap 
>223	ArgumentList	 
>224	Callee	LocalMap 
>225	Identifier	LocalMap 
>226	Callee	new_keyframes_ . push
>227	MemberAccess	new_keyframes_ . push
>228	Identifier	push
>229	Identifier	new_keyframes_
>230	ExpressionStatement	 
>231	AssignmentExpr	optimization_thread_shutdown_ = true
>232	Identifier	true
>233	Identifier	optimization_thread_shutdown_
>242	FunctionDef	configure (const dvo_slam 
>243	ParameterList	const dvo_slam 
>244	Parameter	 
>245	Identifier	cfg
>246	ParameterType	const dvo_slam 
>247	ReturnType	void
>248	CompoundStatement	 
>249	ExpressionStatement	 
>250	CallExpression	constraint_search_ . reset ( new NearestNeighborConstraintSearch ( cfg_ . NewConstraintSearchRadius ) )
>251	ArgumentList	cfg_ . NewConstraintSearchRadius
>252	Argument	cfg_ . NewConstraintSearchRadius
>253	MemberAccess	cfg_ . NewConstraintSearchRadius
>254	Identifier	NewConstraintSearchRadius
>255	Identifier	cfg_
>256	Callee	constraint_search_ . reset
>257	MemberAccess	constraint_search_ . reset
>258	Identifier	reset
>259	Identifier	constraint_search_
>260	ExpressionStatement	 
>261	AssignmentExpr	cfg_ = cfg
>262	Identifier	cfg
>263	Identifier	cfg_
>271	FunctionDef	add (const LocalMap 
>272	ParameterList	const LocalMap 
>273	Parameter	 
>274	Identifier	keyframe
>275	ParameterType	const LocalMap 
>276	ReturnType	void
>277	CompoundStatement	 
>278	IfStatement	if ( cfg_ . UseMultiThreading )
>279	ElseStatement	else
>280	CompoundStatement	 
>281	ExpressionStatement	 
>282	CallExpression	newKeyframe ( keyframe )
>283	ArgumentList	keyframe
>284	Argument	keyframe
>285	Identifier	keyframe
>286	Callee	newKeyframe
>287	Identifier	newKeyframe
>288	IdentifierDeclStatement	 
>289	IdentifierDecl	l ( queue_empty_sync_ )
>290	Identifier	queue_empty_sync_
>291	Identifier	l
>292	IdentifierDeclType	tbb 
>293	CompoundStatement	 
>294	ExpressionStatement	 
>295	CallExpression	new_keyframes_ . push ( keyframe )
>296	ArgumentList	keyframe
>297	Argument	keyframe
>298	Identifier	keyframe
>299	Callee	new_keyframes_ . push
>300	MemberAccess	new_keyframes_ . push
>301	Identifier	push
>302	Identifier	new_keyframes_
>303	Condition	 
>304	MemberAccess	cfg_ . UseMultiThreading
>305	Identifier	UseMultiThreading
>306	Identifier	cfg_
>315	FunctionDef	findNextVertex (g2o 
>316	ParameterList	g2o 
>317	Parameter	 
>318	Identifier	v
>319	ParameterType	g2o 
>320	ReturnType	g2o 
>321	CompoundStatement	 
>322	ReturnStatement	 
>323	Identifier	closest
>324	ForStatement	for ( g2o 
>325	CompoundStatement	 
>326	IfStatement	if ( closest != 0 )
>327	ElseStatement	else
>328	CompoundStatement	 
>329	ExpressionStatement	 
>330	AssignmentExpr	closest = other
>331	Identifier	other
>332	Identifier	closest
>333	CompoundStatement	 
>334	CompoundStatement	 
>335	ExpressionStatement	 
>336	AssignmentExpr	closest = other
>337	Identifier	other
>338	Identifier	closest
>339	Statement	 
>340	Statement	 
>341	Statement	 
>342	Statement	 
>343	Statement	 
>344	Statement	 
>345	Statement	 
>346	Statement	 
>347	Statement	 
>348	Statement	 
>349	Statement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	Statement	 
>371	Condition	 
>372	EqualityExpression	closest != 0
>373	PrimaryExpression	0
>374	Identifier	closest
>375	ContinueStatement	 
>376	Statement	 
>377	Statement	 
>378	Statement	 
>379	Statement	 
>380	Statement	 
>381	Statement	 
>382	Statement	 
>383	Statement	 
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	ExpressionStatement	 
>396	ConditionalExpression	( * e_it ) -> vertex ( 0 ) != v ? ( * e_it ) -> vertex ( 0 ) 
>397	CallExpression	( * e_it ) -> vertex ( 1 )
>398	ArgumentList	1
>399	Argument	1
>400	PrimaryExpression	1
>401	Callee	( * e_it ) -> vertex
>402	PtrMemberAccess	( * e_it ) -> vertex
>403	Identifier	vertex
>404	UnaryOp	* e_it
>405	Identifier	e_it
>406	UnaryOperator	*
>407	CallExpression	( * e_it ) -> vertex ( 0 )
>408	ArgumentList	0
>409	Argument	0
>410	PrimaryExpression	0
>411	Callee	( * e_it ) -> vertex
>412	PtrMemberAccess	( * e_it ) -> vertex
>413	Identifier	vertex
>414	UnaryOp	* e_it
>415	Identifier	e_it
>416	UnaryOperator	*
>417	Condition	( * e_it ) -> vertex ( 0 ) != v
>418	EqualityExpression	( * e_it ) -> vertex ( 0 ) != v
>419	Identifier	v
>420	CallExpression	( * e_it ) -> vertex ( 0 )
>421	ArgumentList	0
>422	Argument	0
>423	PrimaryExpression	0
>424	Callee	( * e_it ) -> vertex
>425	PtrMemberAccess	( * e_it ) -> vertex
>426	Identifier	vertex
>427	UnaryOp	* e_it
>428	Identifier	e_it
>429	UnaryOperator	*
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	UnaryExpression	 
>442	Identifier	e_it
>443	IncDec	++
>444	Condition	 
>445	EqualityExpression	e_it != v -> edges ( ) . end ( )
>446	CallExpression	v -> edges ( ) . end ( )
>447	ArgumentList	 
>448	Callee	v -> edges ( ) . end
>449	MemberAccess	v -> edges ( ) . end
>450	Identifier	end
>451	CallExpression	v -> edges ( )
>452	ArgumentList	 
>453	Callee	v -> edges
>454	PtrMemberAccess	v -> edges
>455	Identifier	edges
>456	Identifier	v
>457	Identifier	e_it
>458	ForInit	 
>459	IdentifierDeclStatement	g2o 
>460	IdentifierDecl	e_it = v -> edges ( ) . begin ( )
>461	AssignmentExpr	e_it = v -> edges ( ) . begin ( )
>462	CallExpression	v -> edges ( ) . begin ( )
>463	ArgumentList	 
>464	Callee	v -> edges ( ) . begin
>465	MemberAccess	v -> edges ( ) . begin
>466	Identifier	begin
>467	CallExpression	v -> edges ( )
>468	ArgumentList	 
>469	Callee	v -> edges
>470	PtrMemberAccess	v -> edges
>471	Identifier	edges
>472	Identifier	v
>473	Identifier	e_it
>474	Identifier	e_it
>475	IdentifierDeclType	g2o 
>476	ExpressionStatement	 
>477	PtrMemberAccess	( v -> userData ( ) ) -> timestamp
>478	Identifier	timestamp
>479	CallExpression	v -> userData ( )
>480	ArgumentList	 
>481	Callee	v -> userData
>482	PtrMemberAccess	v -> userData
>483	Identifier	userData
>484	Identifier	v
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	IdentifierDeclStatement	 
>496	IdentifierDecl	* closest = 0
>497	AssignmentExpr	* closest = 0
>498	PrimaryExpression	0
>499	Identifier	closest
>500	Identifier	closest
>501	IdentifierDeclType	g2o 
>502	IdentifierDecl	* other = 0
>503	AssignmentExpr	* other = 0
>504	PrimaryExpression	0
>505	Identifier	other
>506	Identifier	other
>507	IdentifierDeclType	g2o 
>523	FunctionDef	hasEdge (g2o 
>524	ParameterList	g2o 
>525	Parameter	 
>526	Identifier	edge_id
>527	ParameterType	int
>528	Parameter	 
>529	Identifier	v
>530	ParameterType	g2o 
>531	ReturnType	bool
>532	CompoundStatement	 
>533	ReturnStatement	 
>534	Identifier	result
>535	ForStatement	for ( g2o 
>536	CompoundStatement	 
>537	ExpressionStatement	 
>538	AssignmentExpr	result = ( * e_it ) -> id ( ) == edge_id
>539	EqualityExpression	( * e_it ) -> id ( ) == edge_id
>540	Identifier	edge_id
>541	CallExpression	( * e_it ) -> id ( )
>542	ArgumentList	 
>543	Callee	( * e_it ) -> id
>544	PtrMemberAccess	( * e_it ) -> id
>545	Identifier	id
>546	UnaryOp	* e_it
>547	Identifier	e_it
>548	UnaryOperator	*
>549	Identifier	result
>550	UnaryExpression	 
>551	Identifier	e_it
>552	IncDec	++
>553	Condition	 
>554	AndExpression	e_it != v -> edges ( ) . end ( ) && ! result
>555	UnaryOp	! result
>556	Identifier	result
>557	UnaryOperator	!
>558	EqualityExpression	e_it != v -> edges ( ) . end ( )
>559	CallExpression	v -> edges ( ) . end ( )
>560	ArgumentList	 
>561	Callee	v -> edges ( ) . end
>562	MemberAccess	v -> edges ( ) . end
>563	Identifier	end
>564	CallExpression	v -> edges ( )
>565	ArgumentList	 
>566	Callee	v -> edges
>567	PtrMemberAccess	v -> edges
>568	Identifier	edges
>569	Identifier	v
>570	Identifier	e_it
>571	ForInit	 
>572	IdentifierDeclStatement	g2o 
>573	IdentifierDecl	e_it = v -> edges ( ) . begin ( )
>574	AssignmentExpr	e_it = v -> edges ( ) . begin ( )
>575	CallExpression	v -> edges ( ) . begin ( )
>576	ArgumentList	 
>577	Callee	v -> edges ( ) . begin
>578	MemberAccess	v -> edges ( ) . begin
>579	Identifier	begin
>580	CallExpression	v -> edges ( )
>581	ArgumentList	 
>582	Callee	v -> edges
>583	PtrMemberAccess	v -> edges
>584	Identifier	edges
>585	Identifier	v
>586	Identifier	e_it
>587	Identifier	e_it
>588	IdentifierDeclType	g2o 
>589	IdentifierDeclStatement	 
>590	IdentifierDecl	result = false
>591	AssignmentExpr	result = false
>592	Identifier	false
>593	Identifier	false
>594	Identifier	result
>595	IdentifierDeclType	bool
>611	FunctionDef	finalOptimization ()
>612	ParameterList	 
>613	ReturnType	void
>614	CompoundStatement	 
>615	ExpressionStatement	 
>616	ShiftExpression	std 
>617	ShiftExpression	keyframes_ . size ( ) << \" keyframes\" << std 
>618	ShiftExpression	\" keyframes\" << std 
>619	Identifier	std 
>620	PrimaryExpression	\" keyframes\"
>621	CallExpression	keyframes_ . size ( )
>622	ArgumentList	 
>623	Callee	keyframes_ . size
>624	MemberAccess	keyframes_ . size
>625	Identifier	size
>626	Identifier	keyframes_
>627	Identifier	std 
>628	ExpressionStatement	 
>629	CallExpression	ROS_WARN_STREAM ( \"created validation tracker instances
>630	ArgumentList	\"created validation tracker instances
>631	Argument	\"created validation tracker instances
>632	ShiftExpression	\"created validation tracker instances
>633	CallExpression	validator_pool_ . size ( )
>634	ArgumentList	 
>635	Callee	validator_pool_ . size
>636	MemberAccess	validator_pool_ . size
>637	Identifier	size
>638	Identifier	validator_pool_
>639	PrimaryExpression	\"created validation tracker instances
>640	Callee	ROS_WARN_STREAM
>641	Identifier	ROS_WARN_STREAM
>642	ExpressionStatement	 
>643	CallExpression	map_changed_ ( * me_ )
>644	ArgumentList	* me_
>645	Argument	* me_
>646	UnaryOp	* me_
>647	Identifier	me_
>648	UnaryOperator	*
>649	Callee	map_changed_
>650	Identifier	map_changed_
>651	ExpressionStatement	 
>652	CallExpression	updateKeyframePosesFromGraph ( )
>653	ArgumentList	 
>654	Callee	updateKeyframePosesFromGraph
>655	Identifier	updateKeyframePosesFromGraph
>656	ExpressionStatement	 
>657	ShiftExpression	std 
>658	ShiftExpression	\"done\" << std 
>659	Identifier	std 
>660	PrimaryExpression	\"done\"
>661	Identifier	std 
>662	ForStatement	for ( int idx = 0 ; idx < 10 && ( iterations != 0 || removed != 0 ) ; ++ idx )
>663	CompoundStatement	 
>664	IfStatement	if ( cfg_ . FinalOptimizationRemoveOutliers )
>665	CompoundStatement	 
>666	ExpressionStatement	 
>667	AssignmentExpr	removed = removeOutlierConstraints ( cfg_ . FinalOptimizationOutlierWeightThreshold )
>668	CallExpression	removeOutlierConstraints ( cfg_ . FinalOptimizationOutlierWeightThreshold )
>669	ArgumentList	cfg_ . FinalOptimizationOutlierWeightThreshold
>670	Argument	cfg_ . FinalOptimizationOutlierWeightThreshold
>671	MemberAccess	cfg_ . FinalOptimizationOutlierWeightThreshold
>672	Identifier	FinalOptimizationOutlierWeightThreshold
>673	Identifier	cfg_
>674	Callee	removeOutlierConstraints
>675	Identifier	removeOutlierConstraints
>676	Identifier	removed
>677	Condition	 
>678	MemberAccess	cfg_ . FinalOptimizationRemoveOutliers
>679	Identifier	FinalOptimizationRemoveOutliers
>680	Identifier	cfg_
>681	ExpressionStatement	 
>682	AssignmentExpr	iterations = keyframegraph_ . optimize ( cfg_ . FinalOptimizationIterations / 10 )
>683	CallExpression	keyframegraph_ . optimize ( cfg_ . FinalOptimizationIterations / 10 )
>684	ArgumentList	cfg_ . FinalOptimizationIterations / 10
>685	Argument	cfg_ . FinalOptimizationIterations / 10
>686	MultiplicativeExpression	cfg_ . FinalOptimizationIterations / 10
>687	PrimaryExpression	10
>688	MemberAccess	cfg_ . FinalOptimizationIterations
>689	Identifier	FinalOptimizationIterations
>690	Identifier	cfg_
>691	Callee	keyframegraph_ . optimize
>692	MemberAccess	keyframegraph_ . optimize
>693	Identifier	optimize
>694	Identifier	keyframegraph_
>695	Identifier	iterations
>696	ExpressionStatement	 
>697	CallExpression	keyframegraph_ . initializeOptimization ( 0 )
>698	ArgumentList	0
>699	Argument	0
>700	PrimaryExpression	0
>701	Callee	keyframegraph_ . initializeOptimization
>702	MemberAccess	keyframegraph_ . initializeOptimization
>703	Identifier	initializeOptimization
>704	Identifier	keyframegraph_
>705	UnaryExpression	 
>706	Identifier	idx
>707	IncDec	++
>708	Condition	 
>709	AndExpression	idx < 10 && ( iterations != 0 || removed != 0 )
>710	OrExpression	iterations != 0 || removed != 0
>711	EqualityExpression	removed != 0
>712	PrimaryExpression	0
>713	Identifier	removed
>714	EqualityExpression	iterations != 0
>715	PrimaryExpression	0
>716	Identifier	iterations
>717	RelationalExpression	idx < 10
>718	PrimaryExpression	10
>719	Identifier	idx
>720	ForInit	 
>721	IdentifierDeclStatement	int idx = 0 ;
>722	IdentifierDecl	idx = 0
>723	AssignmentExpr	idx = 0
>724	PrimaryExpression	0
>725	Identifier	idx
>726	Identifier	idx
>727	IdentifierDeclType	int
>728	IdentifierDeclStatement	 
>729	IdentifierDecl	iterations = - 1
>730	AssignmentExpr	iterations = - 1
>731	UnaryOp	- 1
>732	PrimaryExpression	1
>733	UnaryOperator	-
>734	Identifier	iterations
>735	Identifier	iterations
>736	IdentifierDeclType	int
>737	IdentifierDecl	removed = 0
>738	AssignmentExpr	removed = 0
>739	PrimaryExpression	0
>740	Identifier	removed
>741	Identifier	removed
>742	IdentifierDeclType	int
>743	ExpressionStatement	 
>744	CallExpression	keyframegraph_ . setVerbose ( true )
>745	ArgumentList	true
>746	Argument	true
>747	Identifier	true
>748	Callee	keyframegraph_ . setVerbose
>749	MemberAccess	keyframegraph_ . setVerbose
>750	Identifier	setVerbose
>751	Identifier	keyframegraph_
>752	ExpressionStatement	 
>753	ShiftExpression	std 
>754	ShiftExpression	\"optimizing...\" << std 
>755	Identifier	std 
>756	PrimaryExpression	\"optimizing...\"
>757	Identifier	std 
>758	IfStatement	if ( cfg_ . FinalOptimizationUseDenseGraph && ! cfg_ . OptimizationUseDenseGraph )
>759	CompoundStatement	 
>760	ForStatement	for ( g2o 
>761	CompoundStatement	 
>762	ExpressionStatement	 
>763	CallExpression	e -> setLevel ( 0 )
>764	ArgumentList	0
>765	Argument	0
>766	PrimaryExpression	0
>767	Callee	e -> setLevel
>768	PtrMemberAccess	e -> setLevel
>769	Identifier	setLevel
>770	Identifier	e
>771	IdentifierDeclStatement	 
>772	IdentifierDecl	* e = ( g2o 
>773	AssignmentExpr	* e = ( g2o 
>774	CastExpression	( g2o 
>775	UnaryOp	* e_it
>776	Identifier	e_it
>777	UnaryOperator	*
>778	CastTarget	g2o 
>779	Identifier	e
>780	Identifier	e
>781	IdentifierDeclType	g2o 
>782	UnaryExpression	 
>783	Identifier	e_it
>784	IncDec	++
>785	Condition	 
>786	EqualityExpression	e_it != keyframegraph_ . edges ( ) . end ( )
>787	CallExpression	keyframegraph_ . edges ( ) . end ( )
>788	ArgumentList	 
>789	Callee	keyframegraph_ . edges ( ) . end
>790	MemberAccess	keyframegraph_ . edges ( ) . end
>791	Identifier	end
>792	CallExpression	keyframegraph_ . edges ( )
>793	ArgumentList	 
>794	Callee	keyframegraph_ . edges
>795	MemberAccess	keyframegraph_ . edges
>796	Identifier	edges
>797	Identifier	keyframegraph_
>798	Identifier	e_it
>799	ForInit	 
>800	IdentifierDeclStatement	g2o 
>801	IdentifierDecl	e_it = keyframegraph_ . edges ( ) . begin ( )
>802	AssignmentExpr	e_it = keyframegraph_ . edges ( ) . begin ( )
>803	CallExpression	keyframegraph_ . edges ( ) . begin ( )
>804	ArgumentList	 
>805	Callee	keyframegraph_ . edges ( ) . begin
>806	MemberAccess	keyframegraph_ . edges ( ) . begin
>807	Identifier	begin
>808	CallExpression	keyframegraph_ . edges ( )
>809	ArgumentList	 
>810	Callee	keyframegraph_ . edges
>811	MemberAccess	keyframegraph_ . edges
>812	Identifier	edges
>813	Identifier	keyframegraph_
>814	Identifier	e_it
>815	Identifier	e_it
>816	IdentifierDeclType	g2o 
>817	Condition	 
>818	AndExpression	cfg_ . FinalOptimizationUseDenseGraph && ! cfg_ . OptimizationUseDenseGraph
>819	UnaryOp	! cfg_ . OptimizationUseDenseGraph
>820	MemberAccess	cfg_ . OptimizationUseDenseGraph
>821	Identifier	OptimizationUseDenseGraph
>822	Identifier	cfg_
>823	UnaryOperator	!
>824	MemberAccess	cfg_ . FinalOptimizationUseDenseGraph
>825	Identifier	FinalOptimizationUseDenseGraph
>826	Identifier	cfg_
>827	ForStatement	for ( KeyframeVector 
>828	CompoundStatement	 
>829	ExpressionStatement	 
>830	ShiftExpression	std 
>831	ShiftExpression	constraints . size ( ) << \" additional constraints\" << std 
>832	ShiftExpression	\" additional constraints\" << std 
>833	Identifier	std 
>834	PrimaryExpression	\" additional constraints\"
>835	CallExpression	constraints . size ( )
>836	ArgumentList	 
>837	Callee	constraints . size
>838	MemberAccess	constraints . size
>839	Identifier	size
>840	Identifier	constraints
>841	Identifier	std 
>842	ExpressionStatement	 
>843	CallExpression	insertNewKeyframeConstraints ( constraints )
>844	ArgumentList	constraints
>845	Argument	constraints
>846	Identifier	constraints
>847	Callee	insertNewKeyframeConstraints
>848	Identifier	insertNewKeyframeConstraints
>849	ExpressionStatement	 
>850	CallExpression	validateKeyframeConstraintsParallel ( filtered_constraint_candidates , * it , constraints )
>851	ArgumentList	filtered_constraint_candidates
>852	Argument	constraints
>853	Identifier	constraints
>854	Argument	* it
>855	UnaryOp	* it
>856	Identifier	it
>857	UnaryOperator	*
>858	Argument	filtered_constraint_candidates
>859	Identifier	filtered_constraint_candidates
>860	Callee	validateKeyframeConstraintsParallel
>861	Identifier	validateKeyframeConstraintsParallel
>862	ForStatement	for ( KeyframeVector 
>863	CompoundStatement	 
>864	IfStatement	if ( ! exists )
>865	CompoundStatement	 
>866	ExpressionStatement	 
>867	CallExpression	filtered_constraint_candidates . push_back ( * cc_it )
>868	ArgumentList	* cc_it
>869	Argument	* cc_it
>870	UnaryOp	* cc_it
>871	Identifier	cc_it
>872	UnaryOperator	*
>873	Callee	filtered_constraint_candidates . push_back
>874	MemberAccess	filtered_constraint_candidates . push_back
>875	Identifier	push_back
>876	Identifier	filtered_constraint_candidates
>877	Condition	 
>878	UnaryOp	! exists
>879	Identifier	exists
>880	UnaryOperator	!
>881	ExpressionStatement	 
>882	AssignmentExpr	exists = exists || hasEdge ( keyframegraph_ . vertex ( ( * it ) -> id ( ) ) , edge_id ) || hasEdge ( \
>883	OrExpression	exists || hasEdge ( keyframegraph_ . vertex ( ( * it ) -> id ( ) ) , edge_id ) || hasEdge ( keyframegraph_ \
>884	OrExpression	hasEdge ( keyframegraph_ . vertex ( ( * it ) -> id ( ) ) , edge_id ) || hasEdge ( keyframegraph_ . vertex ( ( * \
>885	CallExpression	hasEdge ( keyframegraph_ . vertex ( ( * cc_it ) -> id ( ) ) , edge_id )
>886	ArgumentList	keyframegraph_ . vertex ( ( * cc_it ) -> id ( ) )
>887	Argument	edge_id
>888	Identifier	edge_id
>889	Argument	keyframegraph_ . vertex ( ( * cc_it ) -> id ( ) )
>890	CallExpression	keyframegraph_ . vertex ( ( * cc_it ) -> id ( ) )
>891	ArgumentList	( * cc_it ) -> id ( )
>892	Argument	( * cc_it ) -> id ( )
>893	CallExpression	( * cc_it ) -> id ( )
>894	ArgumentList	 
>895	Callee	( * cc_it ) -> id
>896	PtrMemberAccess	( * cc_it ) -> id
>897	Identifier	id
>898	UnaryOp	* cc_it
>899	Identifier	cc_it
>900	UnaryOperator	*
>901	Callee	keyframegraph_ . vertex
>902	MemberAccess	keyframegraph_ . vertex
>903	Identifier	vertex
>904	Identifier	keyframegraph_
>905	Callee	hasEdge
>906	Identifier	hasEdge
>907	CallExpression	hasEdge ( keyframegraph_ . vertex ( ( * it ) -> id ( ) ) , edge_id )
>908	ArgumentList	keyframegraph_ . vertex ( ( * it ) -> id ( ) )
>909	Argument	edge_id
>910	Identifier	edge_id
>911	Argument	keyframegraph_ . vertex ( ( * it ) -> id ( ) )
>912	CallExpression	keyframegraph_ . vertex ( ( * it ) -> id ( ) )
>913	ArgumentList	( * it ) -> id ( )
>914	Argument	( * it ) -> id ( )
>915	CallExpression	( * it ) -> id ( )
>916	ArgumentList	 
>917	Callee	( * it ) -> id
>918	PtrMemberAccess	( * it ) -> id
>919	Identifier	id
>920	UnaryOp	* it
>921	Identifier	it
>922	UnaryOperator	*
>923	Callee	keyframegraph_ . vertex
>924	MemberAccess	keyframegraph_ . vertex
>925	Identifier	vertex
>926	Identifier	keyframegraph_
>927	Callee	hasEdge
>928	Identifier	hasEdge
>929	Identifier	exists
>930	Identifier	exists
>931	IdentifierDeclStatement	 
>932	IdentifierDecl	exists = std 
>933	AssignmentExpr	exists = std 
>934	RelationalExpression	std 
>935	PrimaryExpression	1
>936	CallExpression	std 
>937	ArgumentList	( * cc_it ) -> id ( ) - ( * it ) -> id ( )
>938	Argument	( * cc_it ) -> id ( ) - ( * it ) -> id ( )
>939	AdditiveExpression	( * cc_it ) -> id ( ) - ( * it ) -> id ( )
>940	CallExpression	( * it ) -> id ( )
>941	ArgumentList	 
>942	Callee	( * it ) -> id
>943	PtrMemberAccess	( * it ) -> id
>944	Identifier	id
>945	UnaryOp	* it
>946	Identifier	it
>947	UnaryOperator	*
>948	CallExpression	( * cc_it ) -> id ( )
>949	ArgumentList	 
>950	Callee	( * cc_it ) -> id
>951	PtrMemberAccess	( * cc_it ) -> id
>952	Identifier	id
>953	UnaryOp	* cc_it
>954	Identifier	cc_it
>955	UnaryOperator	*
>956	Callee	std 
>957	Identifier	std 
>958	Identifier	exists
>959	Identifier	exists
>960	IdentifierDeclType	bool
>961	IdentifierDeclStatement	 
>962	IdentifierDecl	edge_id = combine ( ( * cc_it ) -> id ( ) , ( * it ) -> id ( ) )
>963	AssignmentExpr	edge_id = combine ( ( * cc_it ) -> id ( ) , ( * it ) -> id ( ) )
>964	CallExpression	combine ( ( * cc_it ) -> id ( ) , ( * it ) -> id ( ) )
>965	ArgumentList	( * cc_it ) -> id ( )
>966	Argument	( * it ) -> id ( )
>967	CallExpression	( * it ) -> id ( )
>968	ArgumentList	 
>969	Callee	( * it ) -> id
>970	PtrMemberAccess	( * it ) -> id
>971	Identifier	id
>972	UnaryOp	* it
>973	Identifier	it
>974	UnaryOperator	*
>975	Argument	( * cc_it ) -> id ( )
>976	CallExpression	( * cc_it ) -> id ( )
>977	ArgumentList	 
>978	Callee	( * cc_it ) -> id
>979	PtrMemberAccess	( * cc_it ) -> id
>980	Identifier	id
>981	UnaryOp	* cc_it
>982	Identifier	cc_it
>983	UnaryOperator	*
>984	Callee	combine
>985	Identifier	combine
>986	Identifier	edge_id
>987	Identifier	edge_id
>988	IdentifierDeclType	int
>989	UnaryExpression	 
>990	Identifier	cc_it
>991	IncDec	++
>992	Condition	 
>993	EqualityExpression	cc_it != constraint_candidates . end ( )
>994	CallExpression	constraint_candidates . end ( )
>995	ArgumentList	 
>996	Callee	constraint_candidates . end
>997	MemberAccess	constraint_candidates . end
>998	Identifier	end
>999	Identifier	constraint_candidates
>1000	Identifier	cc_it
>1001	ForInit	 
>1002	IdentifierDeclStatement	KeyframeVector 
>1003	IdentifierDecl	cc_it = constraint_candidates . begin ( )
>1004	AssignmentExpr	cc_it = constraint_candidates . begin ( )
>1005	CallExpression	constraint_candidates . begin ( )
>1006	ArgumentList	 
>1007	Callee	constraint_candidates . begin
>1008	MemberAccess	constraint_candidates . begin
>1009	Identifier	begin
>1010	Identifier	constraint_candidates
>1011	Identifier	cc_it
>1012	Identifier	cc_it
>1013	IdentifierDeclType	KeyframeVector 
>1014	ExpressionStatement	 
>1015	CallExpression	constraint_search_ -> findPossibleConstraints ( keyframes_ , * it , constraint_candidates )
>1016	ArgumentList	keyframes_
>1017	Argument	constraint_candidates
>1018	Identifier	constraint_candidates
>1019	Argument	* it
>1020	UnaryOp	* it
>1021	Identifier	it
>1022	UnaryOperator	*
>1023	Argument	keyframes_
>1024	Identifier	keyframes_
>1025	Callee	constraint_search_ -> findPossibleConstraints
>1026	PtrMemberAccess	constraint_search_ -> findPossibleConstraints
>1027	Identifier	findPossibleConstraints
>1028	Identifier	constraint_search_
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	filtered_constraint_candidates
>1031	Identifier	filtered_constraint_candidates
>1032	IdentifierDeclType	KeyframeVector
>1033	IdentifierDecl	constraint_candidates
>1034	Identifier	constraint_candidates
>1035	IdentifierDeclType	KeyframeVector
>1036	IdentifierDeclStatement	 
>1037	IdentifierDecl	constraints
>1038	Identifier	constraints
>1039	IdentifierDeclType	ConstraintProposalVector
>1040	UnaryExpression	 
>1041	Identifier	it
>1042	IncDec	++
>1043	Condition	 
>1044	EqualityExpression	it != keyframes_ . end ( )
>1045	CallExpression	keyframes_ . end ( )
>1046	ArgumentList	 
>1047	Callee	keyframes_ . end
>1048	MemberAccess	keyframes_ . end
>1049	Identifier	end
>1050	Identifier	keyframes_
>1051	Identifier	it
>1052	ForInit	 
>1053	IdentifierDeclStatement	KeyframeVector 
>1054	IdentifierDecl	it = keyframes_ . begin ( )
>1055	AssignmentExpr	it = keyframes_ . begin ( )
>1056	CallExpression	keyframes_ . begin ( )
>1057	ArgumentList	 
>1058	Callee	keyframes_ . begin
>1059	MemberAccess	keyframes_ . begin
>1060	Identifier	begin
>1061	Identifier	keyframes_
>1062	Identifier	it
>1063	Identifier	it
>1064	IdentifierDeclType	KeyframeVector 
>1065	ExpressionStatement	 
>1066	ShiftExpression	std 
>1067	ShiftExpression	keyframes_ . size ( ) << \" keyframes\" << std 
>1068	ShiftExpression	\" keyframes\" << std 
>1069	Identifier	std 
>1070	PrimaryExpression	\" keyframes\"
>1071	CallExpression	keyframes_ . size ( )
>1072	ArgumentList	 
>1073	Callee	keyframes_ . size
>1074	MemberAccess	keyframes_ . size
>1075	Identifier	size
>1076	Identifier	keyframes_
>1077	Identifier	std 
>1078	ExpressionStatement	 
>1079	ShiftExpression	std 
>1080	Identifier	std 
>1081	Identifier	std 
>1082	WhileStatement	while ( ! l . try_acquire ( queue_empty_sync_ ) )
>1083	CompoundStatement	 
>1084	ExpressionStatement	 
>1085	CallExpression	tbb 
>1086	ArgumentList	tbb 
>1087	Argument	tbb 
>1088	CallExpression	tbb 
>1089	ArgumentList	0.1
>1090	Argument	0.1
>1091	PrimaryExpression	0.1
>1092	Callee	tbb 
>1093	Identifier	tbb 
>1094	Callee	tbb 
>1095	Identifier	tbb 
>1096	ExpressionStatement	 
>1097	ShiftExpression	std 
>1098	PrimaryExpression	\".\"
>1099	Identifier	std 
>1100	Condition	 
>1101	UnaryOp	! l . try_acquire ( queue_empty_sync_ )
>1102	CallExpression	l . try_acquire ( queue_empty_sync_ )
>1103	ArgumentList	queue_empty_sync_
>1104	Argument	queue_empty_sync_
>1105	Identifier	queue_empty_sync_
>1106	Callee	l . try_acquire
>1107	MemberAccess	l . try_acquire
>1108	Identifier	try_acquire
>1109	Identifier	l
>1110	UnaryOperator	!
>1111	ExpressionStatement	 
>1112	ShiftExpression	std 
>1113	PrimaryExpression	\"final optimization, waiting for all keyframes\"
>1114	Identifier	std 
>1115	IdentifierDeclStatement	 
>1116	IdentifierDecl	l
>1117	Identifier	l
>1118	IdentifierDeclType	tbb 
>1172	FunctionDef	optimizeInterKeyframePoses ()
>1173	ParameterList	 
>1174	ReturnType	void
>1175	CompoundStatement	 
>1176	ForStatement	for ( KeyframeVector 
>1177	CompoundStatement	 
>1178	ExpressionStatement	 
>1179	CallExpression	keyframegraph_ . optimize ( 20 )
>1180	ArgumentList	20
>1181	Argument	20
>1182	PrimaryExpression	20
>1183	Callee	keyframegraph_ . optimize
>1184	MemberAccess	keyframegraph_ . optimize
>1185	Identifier	optimize
>1186	Identifier	keyframegraph_
>1187	ExpressionStatement	 
>1188	CallExpression	keyframegraph_ . initializeOptimization ( inter_keyframe_vertices , 2 )
>1189	ArgumentList	inter_keyframe_vertices
>1190	Argument	2
>1191	PrimaryExpression	2
>1192	Argument	inter_keyframe_vertices
>1193	Identifier	inter_keyframe_vertices
>1194	Callee	keyframegraph_ . initializeOptimization
>1195	MemberAccess	keyframegraph_ . initializeOptimization
>1196	Identifier	initializeOptimization
>1197	Identifier	keyframegraph_
>1198	ExpressionStatement	 
>1199	CallExpression	keyframegraph_ . setVerbose ( false )
>1200	ArgumentList	false
>1201	Argument	false
>1202	Identifier	false
>1203	Callee	keyframegraph_ . setVerbose
>1204	MemberAccess	keyframegraph_ . setVerbose
>1205	Identifier	setVerbose
>1206	Identifier	keyframegraph_
>1207	ForStatement	for ( g2o 
>1208	CompoundStatement	 
>1209	IfStatement	if ( candidate != 0 && candidate -> id ( ) < 0 )
>1210	CompoundStatement	 
>1211	ExpressionStatement	 
>1212	CallExpression	inter_keyframe_vertices . insert ( candidate )
>1213	ArgumentList	candidate
>1214	Argument	candidate
>1215	Identifier	candidate
>1216	Callee	inter_keyframe_vertices . insert
>1217	MemberAccess	inter_keyframe_vertices . insert
>1218	Identifier	insert
>1219	Identifier	inter_keyframe_vertices
>1220	Condition	 
>1221	AndExpression	candidate != 0 && candidate -> id ( ) < 0
>1222	RelationalExpression	candidate -> id ( ) < 0
>1223	PrimaryExpression	0
>1224	CallExpression	candidate -> id ( )
>1225	ArgumentList	 
>1226	Callee	candidate -> id
>1227	PtrMemberAccess	candidate -> id
>1228	Identifier	id
>1229	Identifier	candidate
>1230	EqualityExpression	candidate != 0
>1231	PrimaryExpression	0
>1232	Identifier	candidate
>1233	IfStatement	if ( ( * edge_it ) -> vertex ( 1 ) -> id ( ) == v1 -> id ( ) )
>1234	CompoundStatement	 
>1235	ExpressionStatement	 
>1236	AssignmentExpr	candidate = ( * edge_it ) -> vertex ( 0 )
>1237	CallExpression	( * edge_it ) -> vertex ( 0 )
>1238	ArgumentList	0
>1239	Argument	0
>1240	PrimaryExpression	0
>1241	Callee	( * edge_it ) -> vertex
>1242	PtrMemberAccess	( * edge_it ) -> vertex
>1243	Identifier	vertex
>1244	UnaryOp	* edge_it
>1245	Identifier	edge_it
>1246	UnaryOperator	*
>1247	Identifier	candidate
>1248	Condition	 
>1249	EqualityExpression	( * edge_it ) -> vertex ( 1 ) -> id ( ) == v1 -> id ( )
>1250	CallExpression	v1 -> id ( )
>1251	ArgumentList	 
>1252	Callee	v1 -> id
>1253	PtrMemberAccess	v1 -> id
>1254	Identifier	id
>1255	Identifier	v1
>1256	CallExpression	( * edge_it ) -> vertex ( 1 ) -> id ( )
>1257	ArgumentList	 
>1258	Callee	( * edge_it ) -> vertex ( 1 ) -> id
>1259	PtrMemberAccess	( * edge_it ) -> vertex ( 1 ) -> id
>1260	Identifier	id
>1261	CallExpression	( * edge_it ) -> vertex ( 1 )
>1262	ArgumentList	1
>1263	Argument	1
>1264	PrimaryExpression	1
>1265	Callee	( * edge_it ) -> vertex
>1266	PtrMemberAccess	( * edge_it ) -> vertex
>1267	Identifier	vertex
>1268	UnaryOp	* edge_it
>1269	Identifier	edge_it
>1270	UnaryOperator	*
>1271	IfStatement	if ( ( * edge_it ) -> vertex ( 0 ) -> id ( ) == v1 -> id ( ) )
>1272	CompoundStatement	 
>1273	ExpressionStatement	 
>1274	AssignmentExpr	candidate = ( * edge_it ) -> vertex ( 1 )
>1275	CallExpression	( * edge_it ) -> vertex ( 1 )
>1276	ArgumentList	1
>1277	Argument	1
>1278	PrimaryExpression	1
>1279	Callee	( * edge_it ) -> vertex
>1280	PtrMemberAccess	( * edge_it ) -> vertex
>1281	Identifier	vertex
>1282	UnaryOp	* edge_it
>1283	Identifier	edge_it
>1284	UnaryOperator	*
>1285	Identifier	candidate
>1286	Condition	 
>1287	EqualityExpression	( * edge_it ) -> vertex ( 0 ) -> id ( ) == v1 -> id ( )
>1288	CallExpression	v1 -> id ( )
>1289	ArgumentList	 
>1290	Callee	v1 -> id
>1291	PtrMemberAccess	v1 -> id
>1292	Identifier	id
>1293	Identifier	v1
>1294	CallExpression	( * edge_it ) -> vertex ( 0 ) -> id ( )
>1295	ArgumentList	 
>1296	Callee	( * edge_it ) -> vertex ( 0 ) -> id
>1297	PtrMemberAccess	( * edge_it ) -> vertex ( 0 ) -> id
>1298	Identifier	id
>1299	CallExpression	( * edge_it ) -> vertex ( 0 )
>1300	ArgumentList	0
>1301	Argument	0
>1302	PrimaryExpression	0
>1303	Callee	( * edge_it ) -> vertex
>1304	PtrMemberAccess	( * edge_it ) -> vertex
>1305	Identifier	vertex
>1306	UnaryOp	* edge_it
>1307	Identifier	edge_it
>1308	UnaryOperator	*
>1309	IdentifierDeclStatement	 
>1310	IdentifierDecl	* candidate = 0
>1311	AssignmentExpr	* candidate = 0
>1312	PrimaryExpression	0
>1313	Identifier	candidate
>1314	Identifier	candidate
>1315	IdentifierDeclType	g2o 
>1316	UnaryExpression	 
>1317	Identifier	edge_it
>1318	IncDec	++
>1319	Condition	 
>1320	EqualityExpression	edge_it != v1 -> edges ( ) . end ( )
>1321	CallExpression	v1 -> edges ( ) . end ( )
>1322	ArgumentList	 
>1323	Callee	v1 -> edges ( ) . end
>1324	MemberAccess	v1 -> edges ( ) . end
>1325	Identifier	end
>1326	CallExpression	v1 -> edges ( )
>1327	ArgumentList	 
>1328	Callee	v1 -> edges
>1329	PtrMemberAccess	v1 -> edges
>1330	Identifier	edges
>1331	Identifier	v1
>1332	Identifier	edge_it
>1333	ForInit	 
>1334	IdentifierDeclStatement	g2o 
>1335	IdentifierDecl	edge_it = v1 -> edges ( ) . begin ( )
>1336	AssignmentExpr	edge_it = v1 -> edges ( ) . begin ( )
>1337	CallExpression	v1 -> edges ( ) . begin ( )
>1338	ArgumentList	 
>1339	Callee	v1 -> edges ( ) . begin
>1340	MemberAccess	v1 -> edges ( ) . begin
>1341	Identifier	begin
>1342	CallExpression	v1 -> edges ( )
>1343	ArgumentList	 
>1344	Callee	v1 -> edges
>1345	PtrMemberAccess	v1 -> edges
>1346	Identifier	edges
>1347	Identifier	v1
>1348	Identifier	edge_it
>1349	Identifier	edge_it
>1350	IdentifierDeclType	g2o 
>1351	ExpressionStatement	 
>1352	CallExpression	inter_keyframe_vertices . insert ( v2 )
>1353	ArgumentList	v2
>1354	Argument	v2
>1355	Identifier	v2
>1356	Callee	inter_keyframe_vertices . insert
>1357	MemberAccess	inter_keyframe_vertices . insert
>1358	Identifier	insert
>1359	Identifier	inter_keyframe_vertices
>1360	ExpressionStatement	 
>1361	CallExpression	inter_keyframe_vertices . insert ( v1 )
>1362	ArgumentList	v1
>1363	Argument	v1
>1364	Identifier	v1
>1365	Callee	inter_keyframe_vertices . insert
>1366	MemberAccess	inter_keyframe_vertices . insert
>1367	Identifier	insert
>1368	Identifier	inter_keyframe_vertices
>1369	ExpressionStatement	 
>1370	CallExpression	v2 -> setFixed ( true )
>1371	ArgumentList	true
>1372	Argument	true
>1373	Identifier	true
>1374	Callee	v2 -> setFixed
>1375	PtrMemberAccess	v2 -> setFixed
>1376	Identifier	setFixed
>1377	Identifier	v2
>1378	ExpressionStatement	 
>1379	CallExpression	v1 -> setFixed ( true )
>1380	ArgumentList	true
>1381	Argument	true
>1382	Identifier	true
>1383	Callee	v1 -> setFixed
>1384	PtrMemberAccess	v1 -> setFixed
>1385	Identifier	setFixed
>1386	Identifier	v1
>1387	IdentifierDeclStatement	 
>1388	IdentifierDecl	* v2 = keyframegraph_ . vertex ( ( * ( it + 1 ) ) -> id ( ) )
>1389	AssignmentExpr	* v2 = keyframegraph_ . vertex ( ( * ( it + 1 ) ) -> id ( ) )
>1390	CallExpression	keyframegraph_ . vertex ( ( * ( it + 1 ) ) -> id ( ) )
>1391	ArgumentList	( * ( it + 1 ) ) -> id ( )
>1392	Argument	( * ( it + 1 ) ) -> id ( )
>1393	CallExpression	( * ( it + 1 ) ) -> id ( )
>1394	ArgumentList	 
>1395	Callee	( * ( it + 1 ) ) -> id
>1396	PtrMemberAccess	( * ( it + 1 ) ) -> id
>1397	Identifier	id
>1398	UnaryOp	* ( it + 1 )
>1399	AdditiveExpression	it + 1
>1400	PrimaryExpression	1
>1401	Identifier	it
>1402	UnaryOperator	*
>1403	Callee	keyframegraph_ . vertex
>1404	MemberAccess	keyframegraph_ . vertex
>1405	Identifier	vertex
>1406	Identifier	keyframegraph_
>1407	Identifier	v2
>1408	Identifier	v2
>1409	IdentifierDeclType	g2o 
>1410	IdentifierDeclStatement	 
>1411	IdentifierDecl	* v1 = keyframegraph_ . vertex ( ( * it ) -> id ( ) )
>1412	AssignmentExpr	* v1 = keyframegraph_ . vertex ( ( * it ) -> id ( ) )
>1413	CallExpression	keyframegraph_ . vertex ( ( * it ) -> id ( ) )
>1414	ArgumentList	( * it ) -> id ( )
>1415	Argument	( * it ) -> id ( )
>1416	CallExpression	( * it ) -> id ( )
>1417	ArgumentList	 
>1418	Callee	( * it ) -> id
>1419	PtrMemberAccess	( * it ) -> id
>1420	Identifier	id
>1421	UnaryOp	* it
>1422	Identifier	it
>1423	UnaryOperator	*
>1424	Callee	keyframegraph_ . vertex
>1425	MemberAccess	keyframegraph_ . vertex
>1426	Identifier	vertex
>1427	Identifier	keyframegraph_
>1428	Identifier	v1
>1429	Identifier	v1
>1430	IdentifierDeclType	g2o 
>1431	IdentifierDeclStatement	 
>1432	IdentifierDecl	inter_keyframe_vertices
>1433	Identifier	inter_keyframe_vertices
>1434	IdentifierDeclType	g2o 
>1435	UnaryExpression	 
>1436	Identifier	it
>1437	IncDec	++
>1438	Condition	 
>1439	EqualityExpression	it != ( keyframes_ . end ( ) - 1 )
>1440	AdditiveExpression	keyframes_ . end ( ) - 1
>1441	PrimaryExpression	1
>1442	CallExpression	keyframes_ . end ( )
>1443	ArgumentList	 
>1444	Callee	keyframes_ . end
>1445	MemberAccess	keyframes_ . end
>1446	Identifier	end
>1447	Identifier	keyframes_
>1448	Identifier	it
>1449	ForInit	 
>1450	IdentifierDeclStatement	KeyframeVector 
>1451	IdentifierDecl	it = keyframes_ . begin ( )
>1452	AssignmentExpr	it = keyframes_ . begin ( )
>1453	CallExpression	keyframes_ . begin ( )
>1454	ArgumentList	 
>1455	Callee	keyframes_ . begin
>1456	MemberAccess	keyframes_ . begin
>1457	Identifier	begin
>1458	Identifier	keyframes_
>1459	Identifier	it
>1460	Identifier	it
>1461	IdentifierDeclType	KeyframeVector 
>1498	FunctionDef	computeIntensityErrorImage (int edge_id , bool use_measurement)
>1499	ParameterList	int edge_id , bool use_measurement
>1500	Parameter	 
>1501	Identifier	use_measurement
>1502	ParameterType	bool
>1503	Parameter	 
>1504	Identifier	edge_id
>1505	ParameterType	int
>1506	ReturnType	cv 
>1507	CompoundStatement	 
>1508	ReturnStatement	 
>1509	Identifier	result
>1510	IfStatement	if ( r != constraint_tracking_results_ . end ( ) )
>1511	CompoundStatement	 
>1512	ExpressionStatement	 
>1513	ShiftExpression	std 
>1514	ShiftExpression	\"kappa coarse
>1515	ShiftExpression	r -> second . Statistics . Levels . front ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber ( ) << \
>1516	Identifier	std 
>1517	CallExpression	r -> second . Statistics . Levels . front ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber ( )
>1518	ArgumentList	 
>1519	Callee	r -> second . Statistics . Levels . front ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber
>1520	MemberAccess	r -> second . Statistics . Levels . front ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber
>1521	Identifier	InformationConditionNumber
>1522	CallExpression	r -> second . Statistics . Levels . front ( ) . LastIterationWithIncrement ( )
>1523	ArgumentList	 
>1524	Callee	r -> second . Statistics . Levels . front ( ) . LastIterationWithIncrement
>1525	MemberAccess	r -> second . Statistics . Levels . front ( ) . LastIterationWithIncrement
>1526	Identifier	LastIterationWithIncrement
>1527	CallExpression	r -> second . Statistics . Levels . front ( )
>1528	ArgumentList	 
>1529	Callee	r -> second . Statistics . Levels . front
>1530	MemberAccess	r -> second . Statistics . Levels . front
>1531	Identifier	front
>1532	MemberAccess	r -> second . Statistics . Levels
>1533	Identifier	Levels
>1534	MemberAccess	r -> second . Statistics
>1535	Identifier	Statistics
>1536	PtrMemberAccess	r -> second
>1537	Identifier	second
>1538	Identifier	r
>1539	PrimaryExpression	\"kappa coarse
>1540	Identifier	std 
>1541	ExpressionStatement	 
>1542	ShiftExpression	std 
>1543	ShiftExpression	\"kappa fine
>1544	ShiftExpression	r -> second . Statistics . Levels . back ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber ( ) << \
>1545	Identifier	std 
>1546	CallExpression	r -> second . Statistics . Levels . back ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber ( )
>1547	ArgumentList	 
>1548	Callee	r -> second . Statistics . Levels . back ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber
>1549	MemberAccess	r -> second . Statistics . Levels . back ( ) . LastIterationWithIncrement ( ) . InformationConditionNumber
>1550	Identifier	InformationConditionNumber
>1551	CallExpression	r -> second . Statistics . Levels . back ( ) . LastIterationWithIncrement ( )
>1552	ArgumentList	 
>1553	Callee	r -> second . Statistics . Levels . back ( ) . LastIterationWithIncrement
>1554	MemberAccess	r -> second . Statistics . Levels . back ( ) . LastIterationWithIncrement
>1555	Identifier	LastIterationWithIncrement
>1556	CallExpression	r -> second . Statistics . Levels . back ( )
>1557	ArgumentList	 
>1558	Callee	r -> second . Statistics . Levels . back
>1559	MemberAccess	r -> second . Statistics . Levels . back
>1560	Identifier	back
>1561	MemberAccess	r -> second . Statistics . Levels
>1562	Identifier	Levels
>1563	MemberAccess	r -> second . Statistics
>1564	Identifier	Statistics
>1565	PtrMemberAccess	r -> second
>1566	Identifier	second
>1567	Identifier	r
>1568	PrimaryExpression	\"kappa fine
>1569	Identifier	std 
>1570	ExpressionStatement	 
>1571	ShiftExpression	std 
>1572	ShiftExpression	\"chi2
>1573	ShiftExpression	e -> chi2 ( ) << \" weight
>1574	ShiftExpression	\" weight
>1575	ShiftExpression	rho ( 1 ) << std 
>1576	Identifier	std 
>1577	CallExpression	rho ( 1 )
>1578	ArgumentList	1
>1579	Argument	1
>1580	PrimaryExpression	1
>1581	Callee	rho
>1582	Identifier	rho
>1583	PrimaryExpression	\" weight
>1584	CallExpression	e -> chi2 ( )
>1585	ArgumentList	 
>1586	Callee	e -> chi2
>1587	PtrMemberAccess	e -> chi2
>1588	Identifier	chi2
>1589	Identifier	e
>1590	PrimaryExpression	\"chi2
>1591	Identifier	std 
>1592	IfStatement	if ( e -> robustKernel ( ) != 0 )
>1593	ElseStatement	else
>1594	ExpressionStatement	 
>1595	CallExpression	rho . setOnes ( )
>1596	ArgumentList	 
>1597	Callee	rho . setOnes
>1598	MemberAccess	rho . setOnes
>1599	Identifier	setOnes
>1600	Identifier	rho
>1601	ExpressionStatement	 
>1602	CallExpression	e -> robustKernel ( ) -> robustify ( e -> chi2 ( ) , rho )
>1603	ArgumentList	e -> chi2 ( )
>1604	Argument	rho
>1605	Identifier	rho
>1606	Argument	e -> chi2 ( )
>1607	CallExpression	e -> chi2 ( )
>1608	ArgumentList	 
>1609	Callee	e -> chi2
>1610	PtrMemberAccess	e -> chi2
>1611	Identifier	chi2
>1612	Identifier	e
>1613	Callee	e -> robustKernel ( ) -> robustify
>1614	PtrMemberAccess	e -> robustKernel ( ) -> robustify
>1615	Identifier	robustify
>1616	CallExpression	e -> robustKernel ( )
>1617	ArgumentList	 
>1618	Callee	e -> robustKernel
>1619	PtrMemberAccess	e -> robustKernel
>1620	Identifier	robustKernel
>1621	Identifier	e
>1622	Condition	 
>1623	EqualityExpression	e -> robustKernel ( ) != 0
>1624	PrimaryExpression	0
>1625	CallExpression	e -> robustKernel ( )
>1626	ArgumentList	 
>1627	Callee	e -> robustKernel
>1628	PtrMemberAccess	e -> robustKernel
>1629	Identifier	robustKernel
>1630	Identifier	e
>1631	IdentifierDeclStatement	 
>1632	IdentifierDecl	rho
>1633	Identifier	rho
>1634	IdentifierDeclType	Eigen 
>1635	ExpressionStatement	 
>1636	ShiftExpression	std 
>1637	ShiftExpression	\"min_entropy_ratio_fine
>1638	ShiftExpression	std 
>1639	Identifier	std 
>1640	CallExpression	std 
>1641	ArgumentList	kf1 -> evaluation ( ) -> ratioWithAverage ( r -> second )
>1642	Argument	kf2 -> evaluation ( ) -> ratioWithAverage ( r -> second )
>1643	CallExpression	kf2 -> evaluation ( ) -> ratioWithAverage ( r -> second )
>1644	ArgumentList	r -> second
>1645	Argument	r -> second
>1646	PtrMemberAccess	r -> second
>1647	Identifier	second
>1648	Identifier	r
>1649	Callee	kf2 -> evaluation ( ) -> ratioWithAverage
>1650	PtrMemberAccess	kf2 -> evaluation ( ) -> ratioWithAverage
>1651	Identifier	ratioWithAverage
>1652	CallExpression	kf2 -> evaluation ( )
>1653	ArgumentList	 
>1654	Callee	kf2 -> evaluation
>1655	PtrMemberAccess	kf2 -> evaluation
>1656	Identifier	evaluation
>1657	Identifier	kf2
>1658	Argument	kf1 -> evaluation ( ) -> ratioWithAverage ( r -> second )
>1659	CallExpression	kf1 -> evaluation ( ) -> ratioWithAverage ( r -> second )
>1660	ArgumentList	r -> second
>1661	Argument	r -> second
>1662	PtrMemberAccess	r -> second
>1663	Identifier	second
>1664	Identifier	r
>1665	Callee	kf1 -> evaluation ( ) -> ratioWithAverage
>1666	PtrMemberAccess	kf1 -> evaluation ( ) -> ratioWithAverage
>1667	Identifier	ratioWithAverage
>1668	CallExpression	kf1 -> evaluation ( )
>1669	ArgumentList	 
>1670	Callee	kf1 -> evaluation
>1671	PtrMemberAccess	kf1 -> evaluation
>1672	Identifier	evaluation
>1673	Identifier	kf1
>1674	Callee	std 
>1675	Identifier	std 
>1676	PrimaryExpression	\"min_entropy_ratio_fine
>1677	Identifier	std 
>1678	ExpressionStatement	 
>1679	ShiftExpression	std 
>1680	ShiftExpression	r -> second . Statistics << std 
>1681	Identifier	std 
>1682	MemberAccess	r -> second . Statistics
>1683	Identifier	Statistics
>1684	PtrMemberAccess	r -> second
>1685	Identifier	second
>1686	Identifier	r
>1687	Identifier	std 
>1688	Condition	 
>1689	EqualityExpression	r != constraint_tracking_results_ . end ( )
>1690	CallExpression	constraint_tracking_results_ . end ( )
>1691	ArgumentList	 
>1692	Callee	constraint_tracking_results_ . end
>1693	MemberAccess	constraint_tracking_results_ . end
>1694	Identifier	end
>1695	Identifier	constraint_tracking_results_
>1696	Identifier	r
>1697	IdentifierDeclStatement	 
>1698	IdentifierDecl	r = constraint_tracking_results_ . find ( edge_id )
>1699	AssignmentExpr	r = constraint_tracking_results_ . find ( edge_id )
>1700	CallExpression	constraint_tracking_results_ . find ( edge_id )
>1701	ArgumentList	edge_id
>1702	Argument	edge_id
>1703	Identifier	edge_id
>1704	Callee	constraint_tracking_results_ . find
>1705	MemberAccess	constraint_tracking_results_ . find
>1706	Identifier	find
>1707	Identifier	constraint_tracking_results_
>1708	Identifier	r
>1709	Identifier	r
>1710	IdentifierDeclType	std 
>1711	ExpressionStatement	 
>1712	AssignmentExpr	result = tracker . computeIntensityErrorImage ( * kf2 -> image ( ) , * kf1 -> image ( ) , transform )
>1713	CallExpression	tracker . computeIntensityErrorImage ( * kf2 -> image ( ) , * kf1 -> image ( ) , transform )
>1714	ArgumentList	* kf2 -> image ( )
>1715	Argument	transform
>1716	Identifier	transform
>1717	Argument	* kf1 -> image ( )
>1718	UnaryOp	* kf1 -> image ( )
>1719	CallExpression	kf1 -> image ( )
>1720	ArgumentList	 
>1721	Callee	kf1 -> image
>1722	PtrMemberAccess	kf1 -> image
>1723	Identifier	image
>1724	Identifier	kf1
>1725	UnaryOperator	*
>1726	Argument	* kf2 -> image ( )
>1727	UnaryOp	* kf2 -> image ( )
>1728	CallExpression	kf2 -> image ( )
>1729	ArgumentList	 
>1730	Callee	kf2 -> image
>1731	PtrMemberAccess	kf2 -> image
>1732	Identifier	image
>1733	Identifier	kf2
>1734	UnaryOperator	*
>1735	Callee	tracker . computeIntensityErrorImage
>1736	MemberAccess	tracker . computeIntensityErrorImage
>1737	Identifier	computeIntensityErrorImage
>1738	Identifier	tracker
>1739	Identifier	result
>1740	ExpressionStatement	 
>1741	CallExpression	tracker . configure ( validation_tracker_cfg_ )
>1742	ArgumentList	validation_tracker_cfg_
>1743	Argument	validation_tracker_cfg_
>1744	Identifier	validation_tracker_cfg_
>1745	Callee	tracker . configure
>1746	MemberAccess	tracker . configure
>1747	Identifier	configure
>1748	Identifier	tracker
>1749	IdentifierDeclStatement	 
>1750	IdentifierDecl	tracker
>1751	Identifier	tracker
>1752	IdentifierDeclType	dvo 
>1753	ExpressionStatement	 
>1754	AssignmentExpr	transform = use_measurement ? toAffine ( e -> measurement ( ) ) 
>1755	ConditionalExpression	use_measurement ? toAffine ( e -> measurement ( ) ) 
>1756	MultiplicativeExpression	kf1 -> pose ( ) . inverse ( ) * kf2 -> pose ( )
>1757	CallExpression	kf2 -> pose ( )
>1758	ArgumentList	 
>1759	Callee	kf2 -> pose
>1760	PtrMemberAccess	kf2 -> pose
>1761	Identifier	pose
>1762	Identifier	kf2
>1763	CallExpression	kf1 -> pose ( ) . inverse ( )
>1764	ArgumentList	 
>1765	Callee	kf1 -> pose ( ) . inverse
>1766	MemberAccess	kf1 -> pose ( ) . inverse
>1767	Identifier	inverse
>1768	CallExpression	kf1 -> pose ( )
>1769	ArgumentList	 
>1770	Callee	kf1 -> pose
>1771	PtrMemberAccess	kf1 -> pose
>1772	Identifier	pose
>1773	Identifier	kf1
>1774	CallExpression	toAffine ( e -> measurement ( ) )
>1775	ArgumentList	e -> measurement ( )
>1776	Argument	e -> measurement ( )
>1777	CallExpression	e -> measurement ( )
>1778	ArgumentList	 
>1779	Callee	e -> measurement
>1780	PtrMemberAccess	e -> measurement
>1781	Identifier	measurement
>1782	Identifier	e
>1783	Callee	toAffine
>1784	Identifier	toAffine
>1785	Condition	use_measurement
>1786	Identifier	use_measurement
>1787	Identifier	transform
>1788	IdentifierDeclStatement	 
>1789	IdentifierDecl	transform
>1790	Identifier	transform
>1791	IdentifierDeclType	Eigen 
>1792	ExpressionStatement	 
>1793	CallExpression	assert ( kf2 -> id ( ) == ( * edge_it ) -> vertex ( 1 ) -> id ( ) )
>1794	ArgumentList	kf2 -> id ( ) == ( * edge_it ) -> vertex ( 1 ) -> id ( )
>1795	Argument	kf2 -> id ( ) == ( * edge_it ) -> vertex ( 1 ) -> id ( )
>1796	EqualityExpression	kf2 -> id ( ) == ( * edge_it ) -> vertex ( 1 ) -> id ( )
>1797	CallExpression	( * edge_it ) -> vertex ( 1 ) -> id ( )
>1798	ArgumentList	 
>1799	Callee	( * edge_it ) -> vertex ( 1 ) -> id
>1800	PtrMemberAccess	( * edge_it ) -> vertex ( 1 ) -> id
>1801	Identifier	id
>1802	CallExpression	( * edge_it ) -> vertex ( 1 )
>1803	ArgumentList	1
>1804	Argument	1
>1805	PrimaryExpression	1
>1806	Callee	( * edge_it ) -> vertex
>1807	PtrMemberAccess	( * edge_it ) -> vertex
>1808	Identifier	vertex
>1809	UnaryOp	* edge_it
>1810	Identifier	edge_it
>1811	UnaryOperator	*
>1812	CallExpression	kf2 -> id ( )
>1813	ArgumentList	 
>1814	Callee	kf2 -> id
>1815	PtrMemberAccess	kf2 -> id
>1816	Identifier	id
>1817	Identifier	kf2
>1818	Callee	assert
>1819	Identifier	assert
>1820	ExpressionStatement	 
>1821	CallExpression	assert ( kf1 -> id ( ) == ( * edge_it ) -> vertex ( 0 ) -> id ( ) )
>1822	ArgumentList	kf1 -> id ( ) == ( * edge_it ) -> vertex ( 0 ) -> id ( )
>1823	Argument	kf1 -> id ( ) == ( * edge_it ) -> vertex ( 0 ) -> id ( )
>1824	EqualityExpression	kf1 -> id ( ) == ( * edge_it ) -> vertex ( 0 ) -> id ( )
>1825	CallExpression	( * edge_it ) -> vertex ( 0 ) -> id ( )
>1826	ArgumentList	 
>1827	Callee	( * edge_it ) -> vertex ( 0 ) -> id
>1828	PtrMemberAccess	( * edge_it ) -> vertex ( 0 ) -> id
>1829	Identifier	id
>1830	CallExpression	( * edge_it ) -> vertex ( 0 )
>1831	ArgumentList	0
>1832	Argument	0
>1833	PrimaryExpression	0
>1834	Callee	( * edge_it ) -> vertex
>1835	PtrMemberAccess	( * edge_it ) -> vertex
>1836	Identifier	vertex
>1837	UnaryOp	* edge_it
>1838	Identifier	edge_it
>1839	UnaryOperator	*
>1840	CallExpression	kf1 -> id ( )
>1841	ArgumentList	 
>1842	Callee	kf1 -> id
>1843	PtrMemberAccess	kf1 -> id
>1844	Identifier	id
>1845	Identifier	kf1
>1846	Callee	assert
>1847	Identifier	assert
>1848	IdentifierDeclStatement	 
>1849	IdentifierDecl	& kf2 = keyframes_ [ ( * edge_it ) -> vertex ( 1 ) -> id ( ) - 1 ]
>1850	AssignmentExpr	& kf2 = keyframes_ [ ( * edge_it ) -> vertex ( 1 ) -> id ( ) - 1 ]
>1851	ArrayIndexing	keyframes_ [ ( * edge_it ) -> vertex ( 1 ) -> id ( ) - 1 ]
>1852	AdditiveExpression	( * edge_it ) -> vertex ( 1 ) -> id ( ) - 1
>1853	PrimaryExpression	1
>1854	CallExpression	( * edge_it ) -> vertex ( 1 ) -> id ( )
>1855	ArgumentList	 
>1856	Callee	( * edge_it ) -> vertex ( 1 ) -> id
>1857	PtrMemberAccess	( * edge_it ) -> vertex ( 1 ) -> id
>1858	Identifier	id
>1859	CallExpression	( * edge_it ) -> vertex ( 1 )
>1860	ArgumentList	1
>1861	Argument	1
>1862	PrimaryExpression	1
>1863	Callee	( * edge_it ) -> vertex
>1864	PtrMemberAccess	( * edge_it ) -> vertex
>1865	Identifier	vertex
>1866	UnaryOp	* edge_it
>1867	Identifier	edge_it
>1868	UnaryOperator	*
>1869	Identifier	keyframes_
>1870	Identifier	kf2
>1871	Identifier	kf2
>1872	IdentifierDeclType	KeyframePtr &
>1873	IdentifierDeclStatement	 
>1874	IdentifierDecl	& kf1 = keyframes_ [ ( * edge_it ) -> vertex ( 0 ) -> id ( ) - 1 ]
>1875	AssignmentExpr	& kf1 = keyframes_ [ ( * edge_it ) -> vertex ( 0 ) -> id ( ) - 1 ]
>1876	ArrayIndexing	keyframes_ [ ( * edge_it ) -> vertex ( 0 ) -> id ( ) - 1 ]
>1877	AdditiveExpression	( * edge_it ) -> vertex ( 0 ) -> id ( ) - 1
>1878	PrimaryExpression	1
>1879	CallExpression	( * edge_it ) -> vertex ( 0 ) -> id ( )
>1880	ArgumentList	 
>1881	Callee	( * edge_it ) -> vertex ( 0 ) -> id
>1882	PtrMemberAccess	( * edge_it ) -> vertex ( 0 ) -> id
>1883	Identifier	id
>1884	CallExpression	( * edge_it ) -> vertex ( 0 )
>1885	ArgumentList	0
>1886	Argument	0
>1887	PrimaryExpression	0
>1888	Callee	( * edge_it ) -> vertex
>1889	PtrMemberAccess	( * edge_it ) -> vertex
>1890	Identifier	vertex
>1891	UnaryOp	* edge_it
>1892	Identifier	edge_it
>1893	UnaryOperator	*
>1894	Identifier	keyframes_
>1895	Identifier	kf1
>1896	Identifier	kf1
>1897	IdentifierDeclType	KeyframePtr &
>1898	ExpressionStatement	 
>1899	UnaryOp	* edge_it
>1900	Identifier	edge_it
>1901	UnaryOperator	*
>1902	Statement	 
>1903	Statement	 
>1904	Statement	 
>1905	Statement	 
>1906	Statement	 
>1907	Statement	 
>1908	Statement	 
>1909	Statement	 
>1910	Statement	 
>1911	Statement	 
>1912	Statement	 
>1913	Statement	 
>1914	Statement	 
>1915	IfStatement	if ( edge_it == keyframegraph_ . edges ( ) . end ( ) )
>1916	ReturnStatement	 
>1917	Identifier	result
>1918	Condition	 
>1919	EqualityExpression	edge_it == keyframegraph_ . edges ( ) . end ( )
>1920	CallExpression	keyframegraph_ . edges ( ) . end ( )
>1921	ArgumentList	 
>1922	Callee	keyframegraph_ . edges ( ) . end
>1923	MemberAccess	keyframegraph_ . edges ( ) . end
>1924	Identifier	end
>1925	CallExpression	keyframegraph_ . edges ( )
>1926	ArgumentList	 
>1927	Callee	keyframegraph_ . edges
>1928	MemberAccess	keyframegraph_ . edges
>1929	Identifier	edges
>1930	Identifier	keyframegraph_
>1931	Identifier	edge_it
>1932	IdentifierDeclStatement	 
>1933	IdentifierDecl	edge_it = std 
>1934	AssignmentExpr	edge_it = std 
>1935	CallExpression	std 
>1936	ArgumentList	keyframegraph_ . edges ( ) . begin ( )
>1937	Argument	FindEdgeById ( edge_id )
>1938	CallExpression	FindEdgeById ( edge_id )
>1939	ArgumentList	edge_id
>1940	Argument	edge_id
>1941	Identifier	edge_id
>1942	Callee	FindEdgeById
>1943	Identifier	FindEdgeById
>1944	Argument	keyframegraph_ . edges ( ) . end ( )
>1945	CallExpression	keyframegraph_ . edges ( ) . end ( )
>1946	ArgumentList	 
>1947	Callee	keyframegraph_ . edges ( ) . end
>1948	MemberAccess	keyframegraph_ . edges ( ) . end
>1949	Identifier	end
>1950	CallExpression	keyframegraph_ . edges ( )
>1951	ArgumentList	 
>1952	Callee	keyframegraph_ . edges
>1953	MemberAccess	keyframegraph_ . edges
>1954	Identifier	edges
>1955	Identifier	keyframegraph_
>1956	Argument	keyframegraph_ . edges ( ) . begin ( )
>1957	CallExpression	keyframegraph_ . edges ( ) . begin ( )
>1958	ArgumentList	 
>1959	Callee	keyframegraph_ . edges ( ) . begin
>1960	MemberAccess	keyframegraph_ . edges ( ) . begin
>1961	Identifier	begin
>1962	CallExpression	keyframegraph_ . edges ( )
>1963	ArgumentList	 
>1964	Callee	keyframegraph_ . edges
>1965	MemberAccess	keyframegraph_ . edges
>1966	Identifier	edges
>1967	Identifier	keyframegraph_
>1968	Callee	std 
>1969	Identifier	std 
>1970	Identifier	edge_it
>1971	Identifier	edge_it
>1972	IdentifierDeclType	g2o 
>1973	IdentifierDeclStatement	 
>1974	IdentifierDecl	result
>1975	Identifier	result
>1976	IdentifierDeclType	cv 
>2049	FunctionDef	debugLoopClosureConstraint (int keyframe1 , int keyframe2)
>2050	ParameterList	int keyframe1 , int keyframe2
>2051	Parameter	 
>2052	Identifier	keyframe2
>2053	ParameterType	int
>2054	Parameter	 
>2055	Identifier	keyframe1
>2056	ParameterType	int
>2057	ReturnType	void
>2058	CompoundStatement	 
>2059	ExpressionStatement	 
>2060	CallExpression	validator -> validate ( initial_proposals , true )
>2061	ArgumentList	initial_proposals
>2062	Argument	true
>2063	Identifier	true
>2064	Argument	initial_proposals
>2065	Identifier	initial_proposals
>2066	Callee	validator -> validate
>2067	PtrMemberAccess	validator -> validate
>2068	Identifier	validate
>2069	Identifier	validator
>2070	IdentifierDeclStatement	 
>2071	IdentifierDecl	& validator = validator_pool_ . local ( )
>2072	AssignmentExpr	& validator = validator_pool_ . local ( )
>2073	CallExpression	validator_pool_ . local ( )
>2074	ArgumentList	 
>2075	Callee	validator_pool_ . local
>2076	MemberAccess	validator_pool_ . local
>2077	Identifier	local
>2078	Identifier	validator_pool_
>2079	Identifier	validator
>2080	Identifier	validator
>2081	IdentifierDeclType	ConstraintProposalValidatorPtr &
>2082	ExpressionStatement	 
>2083	CallExpression	initial_proposals . push_back ( ConstraintProposal 
>2084	ArgumentList	ConstraintProposal 
>2085	Argument	ConstraintProposal 
>2086	CallExpression	ConstraintProposal 
>2087	ArgumentList	kf1
>2088	Argument	kf2
>2089	Identifier	kf2
>2090	Argument	kf1
>2091	Identifier	kf1
>2092	Callee	ConstraintProposal 
>2093	Identifier	ConstraintProposal 
>2094	Callee	initial_proposals . push_back
>2095	MemberAccess	initial_proposals . push_back
>2096	Identifier	push_back
>2097	Identifier	initial_proposals
>2098	ExpressionStatement	 
>2099	CallExpression	initial_proposals . push_back ( ConstraintProposal 
>2100	ArgumentList	ConstraintProposal 
>2101	Argument	ConstraintProposal 
>2102	CallExpression	ConstraintProposal 
>2103	ArgumentList	kf1
>2104	Argument	kf2
>2105	Identifier	kf2
>2106	Argument	kf1
>2107	Identifier	kf1
>2108	Callee	ConstraintProposal 
>2109	Identifier	ConstraintProposal 
>2110	Callee	initial_proposals . push_back
>2111	MemberAccess	initial_proposals . push_back
>2112	Identifier	push_back
>2113	Identifier	initial_proposals
>2114	IdentifierDeclStatement	 
>2115	IdentifierDecl	initial_proposals
>2116	Identifier	initial_proposals
>2117	IdentifierDeclType	ConstraintProposalVector
>2118	IfStatement	if ( ! kf1 || ! kf2 )
>2119	ReturnStatement	 
>2120	Condition	 
>2121	OrExpression	! kf1 || ! kf2
>2122	UnaryOp	! kf2
>2123	Identifier	kf2
>2124	UnaryOperator	!
>2125	UnaryOp	! kf1
>2126	Identifier	kf1
>2127	UnaryOperator	!
>2128	IdentifierDeclStatement	 
>2129	IdentifierDecl	kf2 = keyframes_ [ keyframe2 - 1 ]
>2130	AssignmentExpr	kf2 = keyframes_ [ keyframe2 - 1 ]
>2131	ArrayIndexing	keyframes_ [ keyframe2 - 1 ]
>2132	AdditiveExpression	keyframe2 - 1
>2133	PrimaryExpression	1
>2134	Identifier	keyframe2
>2135	Identifier	keyframes_
>2136	Identifier	kf2
>2137	Identifier	kf2
>2138	IdentifierDeclType	KeyframePtr
>2139	IdentifierDeclStatement	 
>2140	IdentifierDecl	kf1 = keyframes_ [ keyframe1 - 1 ]
>2141	AssignmentExpr	kf1 = keyframes_ [ keyframe1 - 1 ]
>2142	ArrayIndexing	keyframes_ [ keyframe1 - 1 ]
>2143	AdditiveExpression	keyframe1 - 1
>2144	PrimaryExpression	1
>2145	Identifier	keyframe1
>2146	Identifier	keyframes_
>2147	Identifier	kf1
>2148	Identifier	kf1
>2149	IdentifierDeclType	KeyframePtr
>2150	ExpressionStatement	 
>2151	ShiftExpression	( constraint_search_ . get ( ) ) -> maxDistance ( ) << std 
>2152	Identifier	std 
>2153	CallExpression	( constraint_search_ . get ( ) ) -> maxDistance ( )
>2154	ArgumentList	 
>2155	Callee	( constraint_search_ . get ( ) ) -> maxDistance
>2156	PtrMemberAccess	( constraint_search_ . get ( ) ) -> maxDistance
>2157	Identifier	maxDistance
>2158	CallExpression	constraint_search_ . get ( )
>2159	ArgumentList	 
>2160	Callee	constraint_search_ . get
>2161	MemberAccess	constraint_search_ . get
>2162	Identifier	get
>2163	Identifier	constraint_search_
>2164	Statement	 
>2165	Statement	 
>2166	Statement	 
>2167	Statement	 
>2168	Statement	 
>2169	Statement	 
>2170	Statement	 
>2171	Statement	 
>2172	Statement	 
>2199	FunctionDef	execOptimization ()
>2200	ParameterList	 
>2201	ReturnType	void
>2202	CompoundStatement	 
>2203	WhileStatement	while ( ! optimization_thread_shutdown_ )
>2204	CompoundStatement	 
>2205	IfStatement	if ( new_keyframe )
>2206	CompoundStatement	 
>2207	IfStatement	if ( is_locked && new_keyframes_ . empty ( ) )
>2208	CompoundStatement	 
>2209	ExpressionStatement	 
>2210	AssignmentExpr	is_locked = false
>2211	Identifier	false
>2212	Identifier	is_locked
>2213	ExpressionStatement	 
>2214	CallExpression	queue_empty_sync_ . unlock ( )
>2215	ArgumentList	 
>2216	Callee	queue_empty_sync_ . unlock
>2217	MemberAccess	queue_empty_sync_ . unlock
>2218	Identifier	unlock
>2219	Identifier	queue_empty_sync_
>2220	Condition	 
>2221	AndExpression	is_locked && new_keyframes_ . empty ( )
>2222	CallExpression	new_keyframes_ . empty ( )
>2223	ArgumentList	 
>2224	Callee	new_keyframes_ . empty
>2225	MemberAccess	new_keyframes_ . empty
>2226	Identifier	empty
>2227	Identifier	new_keyframes_
>2228	Identifier	is_locked
>2229	ExpressionStatement	 
>2230	CallExpression	sw_nkf . stopAndPrint ( )
>2231	ArgumentList	 
>2232	Callee	sw_nkf . stopAndPrint
>2233	MemberAccess	sw_nkf . stopAndPrint
>2234	Identifier	stopAndPrint
>2235	Identifier	sw_nkf
>2236	ExpressionStatement	 
>2237	CallExpression	newKeyframe ( new_keyframe )
>2238	ArgumentList	new_keyframe
>2239	Argument	new_keyframe
>2240	Identifier	new_keyframe
>2241	Callee	newKeyframe
>2242	Identifier	newKeyframe
>2243	ExpressionStatement	 
>2244	CallExpression	sw_nkf . start ( )
>2245	ArgumentList	 
>2246	Callee	sw_nkf . start
>2247	MemberAccess	sw_nkf . start
>2248	Identifier	start
>2249	Identifier	sw_nkf
>2250	IfStatement	if ( ! is_locked )
>2251	CompoundStatement	 
>2252	ExpressionStatement	 
>2253	AssignmentExpr	is_locked = true
>2254	Identifier	true
>2255	Identifier	is_locked
>2256	ExpressionStatement	 
>2257	CallExpression	queue_empty_sync_ . lock ( )
>2258	ArgumentList	 
>2259	Callee	queue_empty_sync_ . lock
>2260	MemberAccess	queue_empty_sync_ . lock
>2261	Identifier	lock
>2262	Identifier	queue_empty_sync_
>2263	Condition	 
>2264	UnaryOp	! is_locked
>2265	Identifier	is_locked
>2266	UnaryOperator	!
>2267	Condition	 
>2268	Identifier	new_keyframe
>2269	ExpressionStatement	 
>2270	CallExpression	new_keyframes_ . pop ( new_keyframe )
>2271	ArgumentList	new_keyframe
>2272	Argument	new_keyframe
>2273	Identifier	new_keyframe
>2274	Callee	new_keyframes_ . pop
>2275	MemberAccess	new_keyframes_ . pop
>2276	Identifier	pop
>2277	Identifier	new_keyframes_
>2278	IdentifierDeclStatement	 
>2279	IdentifierDecl	new_keyframe
>2280	Identifier	new_keyframe
>2281	IdentifierDeclType	LocalMap 
>2282	Condition	 
>2283	UnaryOp	! optimization_thread_shutdown_
>2284	Identifier	optimization_thread_shutdown_
>2285	UnaryOperator	!
>2286	IdentifierDeclStatement	 
>2287	IdentifierDecl	is_locked = false
>2288	AssignmentExpr	is_locked = false
>2289	Identifier	false
>2290	Identifier	false
>2291	Identifier	is_locked
>2292	IdentifierDeclType	bool
>2293	IdentifierDeclStatement	 
>2294	IdentifierDecl	sw_nkf ( \"new_kf\" , 10 )
>2295	Expression	\"new_kf\" , 10
>2296	PrimaryExpression	10
>2297	PrimaryExpression	\"new_kf\"
>2298	Identifier	sw_nkf
>2299	IdentifierDeclType	dvo 
>2300	Statement	 
>2313	FunctionDef	newKeyframe (const LocalMap 
>2314	ParameterList	const LocalMap 
>2315	Parameter	 
>2316	Identifier	map
>2317	ParameterType	const LocalMap 
>2318	ReturnType	void
>2319	CompoundStatement	 
>2320	ExpressionStatement	 
>2321	CallExpression	map_changed_ ( * me_ )
>2322	ArgumentList	* me_
>2323	Argument	* me_
>2324	UnaryOp	* me_
>2325	Identifier	me_
>2326	UnaryOperator	*
>2327	Callee	map_changed_
>2328	Identifier	map_changed_
>2329	IfStatement	if ( max_distance >= cfg_ . MinConstraintDistance )
>2330	CompoundStatement	 
>2331	ExpressionStatement	 
>2332	CallExpression	sw_opt . stopAndPrint ( )
>2333	ArgumentList	 
>2334	Callee	sw_opt . stopAndPrint
>2335	MemberAccess	sw_opt . stopAndPrint
>2336	Identifier	stopAndPrint
>2337	Identifier	sw_opt
>2338	ExpressionStatement	 
>2339	CallExpression	updateKeyframePosesFromGraph ( )
>2340	ArgumentList	 
>2341	Callee	updateKeyframePosesFromGraph
>2342	Identifier	updateKeyframePosesFromGraph
>2343	ExpressionStatement	 
>2344	CallExpression	keyframegraph_ . optimize ( cfg_ . OptimizationIterations / 2 )
>2345	ArgumentList	cfg_ . OptimizationIterations / 2
>2346	Argument	cfg_ . OptimizationIterations / 2
>2347	MultiplicativeExpression	cfg_ . OptimizationIterations / 2
>2348	PrimaryExpression	2
>2349	MemberAccess	cfg_ . OptimizationIterations
>2350	Identifier	OptimizationIterations
>2351	Identifier	cfg_
>2352	Callee	keyframegraph_ . optimize
>2353	MemberAccess	keyframegraph_ . optimize
>2354	Identifier	optimize
>2355	Identifier	keyframegraph_
>2356	IfStatement	if ( cfg_ . OptimizationRemoveOutliers )
>2357	CompoundStatement	 
>2358	IfStatement	if ( removed > 0 )
>2359	CompoundStatement	 
>2360	ExpressionStatement	 
>2361	CallExpression	keyframegraph_ . initializeOptimization ( )
>2362	ArgumentList	 
>2363	Callee	keyframegraph_ . initializeOptimization
>2364	MemberAccess	keyframegraph_ . initializeOptimization
>2365	Identifier	initializeOptimization
>2366	Identifier	keyframegraph_
>2367	Condition	 
>2368	RelationalExpression	removed > 0
>2369	PrimaryExpression	0
>2370	Identifier	removed
>2371	IdentifierDeclStatement	 
>2372	IdentifierDecl	removed = removeOutlierConstraints ( cfg_ . OptimizationOutlierWeightThreshold )
>2373	AssignmentExpr	removed = removeOutlierConstraints ( cfg_ . OptimizationOutlierWeightThreshold )
>2374	CallExpression	removeOutlierConstraints ( cfg_ . OptimizationOutlierWeightThreshold )
>2375	ArgumentList	cfg_ . OptimizationOutlierWeightThreshold
>2376	Argument	cfg_ . OptimizationOutlierWeightThreshold
>2377	MemberAccess	cfg_ . OptimizationOutlierWeightThreshold
>2378	Identifier	OptimizationOutlierWeightThreshold
>2379	Identifier	cfg_
>2380	Callee	removeOutlierConstraints
>2381	Identifier	removeOutlierConstraints
>2382	Identifier	removed
>2383	Identifier	removed
>2384	IdentifierDeclType	int
>2385	Condition	 
>2386	MemberAccess	cfg_ . OptimizationRemoveOutliers
>2387	Identifier	OptimizationRemoveOutliers
>2388	Identifier	cfg_
>2389	ExpressionStatement	 
>2390	CallExpression	keyframegraph_ . optimize ( cfg_ . OptimizationIterations / 2 )
>2391	ArgumentList	cfg_ . OptimizationIterations / 2
>2392	Argument	cfg_ . OptimizationIterations / 2
>2393	MultiplicativeExpression	cfg_ . OptimizationIterations / 2
>2394	PrimaryExpression	2
>2395	MemberAccess	cfg_ . OptimizationIterations
>2396	Identifier	OptimizationIterations
>2397	Identifier	cfg_
>2398	Callee	keyframegraph_ . optimize
>2399	MemberAccess	keyframegraph_ . optimize
>2400	Identifier	optimize
>2401	Identifier	keyframegraph_
>2402	ExpressionStatement	 
>2403	CallExpression	keyframegraph_ . initializeOptimization ( )
>2404	ArgumentList	 
>2405	Callee	keyframegraph_ . initializeOptimization
>2406	MemberAccess	keyframegraph_ . initializeOptimization
>2407	Identifier	initializeOptimization
>2408	Identifier	keyframegraph_
>2409	ExpressionStatement	 
>2410	CallExpression	sw_opt . start ( )
>2411	ArgumentList	 
>2412	Callee	sw_opt . start
>2413	MemberAccess	sw_opt . start
>2414	Identifier	start
>2415	Identifier	sw_opt
>2416	Condition	 
>2417	RelationalExpression	max_distance >= cfg_ . MinConstraintDistance
>2418	MemberAccess	cfg_ . MinConstraintDistance
>2419	Identifier	MinConstraintDistance
>2420	Identifier	cfg_
>2421	Identifier	max_distance
>2422	ExpressionStatement	 
>2423	CallExpression	sw_insert . stopAndPrint ( )
>2424	ArgumentList	 
>2425	Callee	sw_insert . stopAndPrint
>2426	MemberAccess	sw_insert . stopAndPrint
>2427	Identifier	stopAndPrint
>2428	Identifier	sw_insert
>2429	IdentifierDeclStatement	 
>2430	IdentifierDecl	max_distance = static_cast < size_t > ( insertNewKeyframeConstraints ( constraints ) )
>2431	AssignmentExpr	max_distance = static_cast < size_t > ( insertNewKeyframeConstraints ( constraints ) )
>2432	RelationalExpression	static_cast < size_t > ( insertNewKeyframeConstraints ( constraints ) )
>2433	RelationalExpression	size_t > ( insertNewKeyframeConstraints ( constraints ) )
>2434	CallExpression	insertNewKeyframeConstraints ( constraints )
>2435	ArgumentList	constraints
>2436	Argument	constraints
>2437	Identifier	constraints
>2438	Callee	insertNewKeyframeConstraints
>2439	Identifier	insertNewKeyframeConstraints
>2440	Identifier	size_t
>2441	Identifier	static_cast
>2442	Identifier	max_distance
>2443	Identifier	max_distance
>2444	IdentifierDeclType	size_t
>2445	ExpressionStatement	 
>2446	CallExpression	sw_insert . start ( )
>2447	ArgumentList	 
>2448	Callee	sw_insert . start
>2449	MemberAccess	sw_insert . start
>2450	Identifier	start
>2451	Identifier	sw_insert
>2452	ExpressionStatement	 
>2453	CallExpression	sw_validation . stopAndPrint ( )
>2454	ArgumentList	 
>2455	Callee	sw_validation . stopAndPrint
>2456	MemberAccess	sw_validation . stopAndPrint
>2457	Identifier	stopAndPrint
>2458	Identifier	sw_validation
>2459	ExpressionStatement	 
>2460	CallExpression	ROS_WARN_STREAM ( \"adding \" << constraints . size ( ) << \" new constraints\" )
>2461	ArgumentList	\"adding \" << constraints . size ( ) << \" new constraints\"
>2462	Argument	\"adding \" << constraints . size ( ) << \" new constraints\"
>2463	ShiftExpression	\"adding \" << constraints . size ( ) << \" new constraints\"
>2464	ShiftExpression	constraints . size ( ) << \" new constraints\"
>2465	PrimaryExpression	\" new constraints\"
>2466	CallExpression	constraints . size ( )
>2467	ArgumentList	 
>2468	Callee	constraints . size
>2469	MemberAccess	constraints . size
>2470	Identifier	size
>2471	Identifier	constraints
>2472	PrimaryExpression	\"adding \"
>2473	Callee	ROS_WARN_STREAM
>2474	Identifier	ROS_WARN_STREAM
>2475	ExpressionStatement	 
>2476	CallExpression	validateKeyframeConstraintsParallel ( constraint_candidates , keyframe , constraints )
>2477	ArgumentList	constraint_candidates
>2478	Argument	constraints
>2479	Identifier	constraints
>2480	Argument	keyframe
>2481	Identifier	keyframe
>2482	Argument	constraint_candidates
>2483	Identifier	constraint_candidates
>2484	Callee	validateKeyframeConstraintsParallel
>2485	Identifier	validateKeyframeConstraintsParallel
>2486	ExpressionStatement	 
>2487	CallExpression	sw_validation . start ( )
>2488	ArgumentList	 
>2489	Callee	sw_validation . start
>2490	MemberAccess	sw_validation . start
>2491	Identifier	start
>2492	Identifier	sw_validation
>2493	ExpressionStatement	 
>2494	CallExpression	sw_constraint . stopAndPrint ( )
>2495	ArgumentList	 
>2496	Callee	sw_constraint . stopAndPrint
>2497	MemberAccess	sw_constraint . stopAndPrint
>2498	Identifier	stopAndPrint
>2499	Identifier	sw_constraint
>2500	ExpressionStatement	 
>2501	CallExpression	constraint_search_ -> findPossibleConstraints ( keyframes_ , keyframe , constraint_candidates )
>2502	ArgumentList	keyframes_
>2503	Argument	constraint_candidates
>2504	Identifier	constraint_candidates
>2505	Argument	keyframe
>2506	Identifier	keyframe
>2507	Argument	keyframes_
>2508	Identifier	keyframes_
>2509	Callee	constraint_search_ -> findPossibleConstraints
>2510	PtrMemberAccess	constraint_search_ -> findPossibleConstraints
>2511	Identifier	findPossibleConstraints
>2512	Identifier	constraint_search_
>2513	ExpressionStatement	 
>2514	CallExpression	sw_constraint . start ( )
>2515	ArgumentList	 
>2516	Callee	sw_constraint . start
>2517	MemberAccess	sw_constraint . start
>2518	Identifier	start
>2519	Identifier	sw_constraint
>2520	IfStatement	if ( keyframes_ . size ( ) == 1 )
>2521	ReturnStatement	 
>2522	Condition	 
>2523	EqualityExpression	keyframes_ . size ( ) == 1
>2524	PrimaryExpression	1
>2525	CallExpression	keyframes_ . size ( )
>2526	ArgumentList	 
>2527	Callee	keyframes_ . size
>2528	MemberAccess	keyframes_ . size
>2529	Identifier	size
>2530	Identifier	keyframes_
>2531	IdentifierDeclStatement	 
>2532	IdentifierDecl	keyframe = insertNewKeyframe ( map )
>2533	AssignmentExpr	keyframe = insertNewKeyframe ( map )
>2534	CallExpression	insertNewKeyframe ( map )
>2535	ArgumentList	map
>2536	Argument	map
>2537	Identifier	map
>2538	Callee	insertNewKeyframe
>2539	Identifier	insertNewKeyframe
>2540	Identifier	keyframe
>2541	Identifier	keyframe
>2542	IdentifierDeclType	KeyframePtr
>2543	IdentifierDeclStatement	 
>2544	IdentifierDecl	constraints
>2545	Identifier	constraints
>2546	IdentifierDeclType	ConstraintProposalVector
>2547	IdentifierDeclStatement	 
>2548	IdentifierDecl	constraint_candidates
>2549	Identifier	constraint_candidates
>2550	IdentifierDeclType	KeyframeVector
>2551	IdentifierDeclStatement	 
>2552	IdentifierDecl	sw_opt ( \"constraint_optimization\" , 50 )
>2553	Expression	\"constraint_optimization\" , 50
>2554	PrimaryExpression	50
>2555	PrimaryExpression	\"constraint_optimization\"
>2556	Identifier	sw_opt
>2557	IdentifierDeclType	dvo 
>2558	IdentifierDecl	sw_insert ( \"constraint_insert\" , 50 )
>2559	Expression	\"constraint_insert\" , 50
>2560	PrimaryExpression	50
>2561	PrimaryExpression	\"constraint_insert\"
>2562	Identifier	sw_insert
>2563	IdentifierDeclType	dvo 
>2564	IdentifierDecl	sw_validation ( \"constraint_validation\" , 50 )
>2565	Expression	\"constraint_validation\" , 50
>2566	PrimaryExpression	50
>2567	PrimaryExpression	\"constraint_validation\"
>2568	Identifier	sw_validation
>2569	IdentifierDeclType	dvo 
>2570	IdentifierDecl	sw_constraint ( \"constraint_search\" , 50 )
>2571	Expression	\"constraint_search\" , 50
>2572	PrimaryExpression	50
>2573	PrimaryExpression	\"constraint_search\"
>2574	Identifier	sw_constraint
>2575	IdentifierDeclType	dvo 
>2576	Statement	 
>2577	IdentifierDeclStatement	 
>2578	IdentifierDecl	l ( new_keyframe_sync_ )
>2579	Identifier	new_keyframe_sync_
>2580	Identifier	l
>2581	IdentifierDeclType	tbb 
>2613	FunctionDef	createConstraintProposalValidator ()
>2614	ParameterList	 
>2615	ReturnType	ConstraintProposalValidatorPtr
>2616	CompoundStatement	 
>2617	ReturnStatement	 
>2618	Identifier	r
>2619	ExpressionStatement	 
>2620	CallExpression	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter ( new NaNResultVoter ( ) ) \
>2621	ArgumentList	cfg_ . NewConstraintMinEntropyRatioFine
>2622	Argument	cfg_ . NewConstraintMinEntropyRatioFine
>2623	MemberAccess	cfg_ . NewConstraintMinEntropyRatioFine
>2624	Identifier	NewConstraintMinEntropyRatioFine
>2625	Identifier	cfg_
>2626	Callee	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter ( new NaNResultVoter ( ) ) \
>2627	MemberAccess	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter ( new NaNResultVoter ( ) ) \
>2628	Identifier	addVoter
>2629	CallExpression	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter ( new NaNResultVoter ( ) ) \
>2630	ArgumentList	cfg_ . MinEquationSystemConstraintRatio
>2631	Argument	cfg_ . MinEquationSystemConstraintRatio
>2632	MemberAccess	cfg_ . MinEquationSystemConstraintRatio
>2633	Identifier	MinEquationSystemConstraintRatio
>2634	Identifier	cfg_
>2635	Callee	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter ( new NaNResultVoter ( ) ) \
>2636	MemberAccess	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter ( new NaNResultVoter ( ) ) \
>2637	Identifier	addVoter
>2638	CallExpression	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter ( new NaNResultVoter ( ) )
>2639	ArgumentList	new NaNResultVoter ( )
>2640	Argument	new NaNResultVoter ( )
>2641	UnaryExpression	new NaNResultVoter ( )
>2642	Callee	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter
>2643	MemberAccess	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( ) . addVoter
>2644	Identifier	addVoter
>2645	CallExpression	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest ( )
>2646	ArgumentList	 
>2647	Callee	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest
>2648	MemberAccess	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ ) . keepBest
>2649	Identifier	keepBest
>2650	CallExpression	r -> createStage ( 2 ) . trackingConfig ( constraint_tracker_cfg_ )
>2651	ArgumentList	constraint_tracker_cfg_
>2652	Argument	constraint_tracker_cfg_
>2653	Identifier	constraint_tracker_cfg_
>2654	Callee	r -> createStage ( 2 ) . trackingConfig
>2655	MemberAccess	r -> createStage ( 2 ) . trackingConfig
>2656	Identifier	trackingConfig
>2657	CallExpression	r -> createStage ( 2 )
>2658	ArgumentList	2
>2659	Argument	2
>2660	PrimaryExpression	2
>2661	Callee	r -> createStage
>2662	PtrMemberAccess	r -> createStage
>2663	Identifier	createStage
>2664	Identifier	r
>2665	ExpressionStatement	 
>2666	CallExpression	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2667	ArgumentList	1.0
>2668	Argument	1.0
>2669	PrimaryExpression	1.0
>2670	Callee	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2671	MemberAccess	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2672	Identifier	addVoter
>2673	CallExpression	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2674	ArgumentList	cfg_ . NewConstraintMinEntropyRatioCoarse
>2675	Argument	cfg_ . NewConstraintMinEntropyRatioCoarse
>2676	MemberAccess	cfg_ . NewConstraintMinEntropyRatioCoarse
>2677	Identifier	NewConstraintMinEntropyRatioCoarse
>2678	Identifier	cfg_
>2679	Callee	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2680	MemberAccess	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2681	Identifier	addVoter
>2682	CallExpression	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2683	ArgumentList	cfg_ . MinEquationSystemConstraintRatio
>2684	Argument	cfg_ . MinEquationSystemConstraintRatio
>2685	MemberAccess	cfg_ . MinEquationSystemConstraintRatio
>2686	Identifier	MinEquationSystemConstraintRatio
>2687	Identifier	cfg_
>2688	Callee	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2689	MemberAccess	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2690	Identifier	addVoter
>2691	CallExpression	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2692	ArgumentList	new NaNResultVoter ( )
>2693	Argument	new NaNResultVoter ( )
>2694	UnaryExpression	new NaNResultVoter ( )
>2695	Callee	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2696	MemberAccess	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) ) \
>2697	Identifier	addVoter
>2698	CallExpression	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter ( new OdometryConstraintVoter ( ) )
>2699	ArgumentList	new OdometryConstraintVoter ( )
>2700	Argument	new OdometryConstraintVoter ( )
>2701	UnaryExpression	new OdometryConstraintVoter ( )
>2702	Callee	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter
>2703	MemberAccess	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( ) . addVoter
>2704	Identifier	addVoter
>2705	CallExpression	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll ( )
>2706	ArgumentList	 
>2707	Callee	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll
>2708	MemberAccess	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ ) . keepAll
>2709	Identifier	keepAll
>2710	CallExpression	r -> createStage ( 1 ) . trackingConfig ( validation_tracker_cfg_ )
>2711	ArgumentList	validation_tracker_cfg_
>2712	Argument	validation_tracker_cfg_
>2713	Identifier	validation_tracker_cfg_
>2714	Callee	r -> createStage ( 1 ) . trackingConfig
>2715	MemberAccess	r -> createStage ( 1 ) . trackingConfig
>2716	Identifier	trackingConfig
>2717	CallExpression	r -> createStage ( 1 )
>2718	ArgumentList	1
>2719	Argument	1
>2720	PrimaryExpression	1
>2721	Callee	r -> createStage
>2722	PtrMemberAccess	r -> createStage
>2723	Identifier	createStage
>2724	Identifier	r
>2725	ExpressionStatement	 
>2726	Statement	 
>2727	Statement	 
>2728	Statement	 
>2729	Statement	 
>2730	Statement	 
>2731	Statement	 
>2732	Statement	 
>2733	Statement	 
>2734	Statement	 
>2735	Statement	 
>2736	Statement	 
>2764	FunctionDef	validator ()
>2765	ParameterList	 
>2766	ReturnType	ConstraintProposalValidatorPtr &
>2767	CompoundStatement	 
>2768	ReturnStatement	 
>2769	CallExpression	validators_ . local ( )
>2770	ArgumentList	 
>2771	Callee	validators_ . local
>2772	MemberAccess	validators_ . local
>2773	Identifier	local
>2774	Identifier	validators_
>2780	FunctionDef	appendProposals (ConstraintProposalVector & pv)
>2781	ParameterList	ConstraintProposalVector & pv
>2782	Parameter	 
>2783	Identifier	pv
>2784	ParameterType	ConstraintProposalVector &
>2785	ReturnType	void
>2786	CompoundStatement	 
>2787	ExpressionStatement	 
>2788	CallExpression	proposals_ . insert ( proposals_ . end ( ) , pv . begin ( ) , pv . end ( ) )
>2789	ArgumentList	proposals_ . end ( )
>2790	Argument	pv . end ( )
>2791	CallExpression	pv . end ( )
>2792	ArgumentList	 
>2793	Callee	pv . end
>2794	MemberAccess	pv . end
>2795	Identifier	end
>2796	Identifier	pv
>2797	Argument	pv . begin ( )
>2798	CallExpression	pv . begin ( )
>2799	ArgumentList	 
>2800	Callee	pv . begin
>2801	MemberAccess	pv . begin
>2802	Identifier	begin
>2803	Identifier	pv
>2804	Argument	proposals_ . end ( )
>2805	CallExpression	proposals_ . end ( )
>2806	ArgumentList	 
>2807	Callee	proposals_ . end
>2808	MemberAccess	proposals_ . end
>2809	Identifier	end
>2810	Identifier	proposals_
>2811	Callee	proposals_ . insert
>2812	MemberAccess	proposals_ . insert
>2813	Identifier	insert
>2814	Identifier	proposals_
>2815	ExpressionStatement	 
>2816	CallExpression	proposals_ . reserve ( proposals_ . size ( ) + pv . size ( ) )
>2817	ArgumentList	proposals_ . size ( ) + pv . size ( )
>2818	Argument	proposals_ . size ( ) + pv . size ( )
>2819	AdditiveExpression	proposals_ . size ( ) + pv . size ( )
>2820	CallExpression	pv . size ( )
>2821	ArgumentList	 
>2822	Callee	pv . size
>2823	MemberAccess	pv . size
>2824	Identifier	size
>2825	Identifier	pv
>2826	CallExpression	proposals_ . size ( )
>2827	ArgumentList	 
>2828	Callee	proposals_ . size
>2829	MemberAccess	proposals_ . size
>2830	Identifier	size
>2831	Identifier	proposals_
>2832	Callee	proposals_ . reserve
>2833	MemberAccess	proposals_ . reserve
>2834	Identifier	reserve
>2835	Identifier	proposals_
>2848	FunctionDef	ValidateConstraintProposalReduction (ConstraintProposalValidatorPool & validators)
>2849	ParameterList	ConstraintProposalValidatorPool & validators
>2850	Parameter	 
>2851	Identifier	validators
>2852	ParameterType	ConstraintProposalValidatorPool &
>2853	CompoundStatement	 
>2858	FunctionDef	proposals ()
>2859	ParameterList	 
>2860	ReturnType	ConstraintProposalVector &
>2861	CompoundStatement	 
>2862	ReturnStatement	 
>2863	Identifier	proposals_
>2868	FunctionDef	operator ( ) (const ConstraintPoposalConstRange & r)
>2869	ParameterList	const ConstraintPoposalConstRange & r
>2870	Parameter	 
>2871	Identifier	r
>2872	ParameterType	const ConstraintPoposalConstRange &
>2873	ReturnType	void
>2874	CompoundStatement	 
>2875	ExpressionStatement	 
>2876	CallExpression	appendProposals ( proposals )
>2877	ArgumentList	proposals
>2878	Argument	proposals
>2879	Identifier	proposals
>2880	Callee	appendProposals
>2881	Identifier	appendProposals
>2882	ExpressionStatement	 
>2883	CallExpression	validator ( ) -> validate ( proposals )
>2884	ArgumentList	proposals
>2885	Argument	proposals
>2886	Identifier	proposals
>2887	Callee	validator ( ) -> validate
>2888	PtrMemberAccess	validator ( ) -> validate
>2889	Identifier	validate
>2890	CallExpression	validator ( )
>2891	ArgumentList	 
>2892	Callee	validator
>2893	Identifier	validator
>2894	ExpressionStatement	 
>2895	CallExpression	proposals . assign ( r . begin ( ) , r . end ( ) )
>2896	ArgumentList	r . begin ( )
>2897	Argument	r . end ( )
>2898	CallExpression	r . end ( )
>2899	ArgumentList	 
>2900	Callee	r . end
>2901	MemberAccess	r . end
>2902	Identifier	end
>2903	Identifier	r
>2904	Argument	r . begin ( )
>2905	CallExpression	r . begin ( )
>2906	ArgumentList	 
>2907	Callee	r . begin
>2908	MemberAccess	r . begin
>2909	Identifier	begin
>2910	Identifier	r
>2911	Callee	proposals . assign
>2912	MemberAccess	proposals . assign
>2913	Identifier	assign
>2914	Identifier	proposals
>2915	IdentifierDeclStatement	 
>2916	IdentifierDecl	proposals
>2917	Identifier	proposals
>2918	IdentifierDeclType	ConstraintProposalVector
>2927	FunctionDef	join (ValidateConstraintProposalReduction & other)
>2928	ParameterList	ValidateConstraintProposalReduction & other
>2929	Parameter	 
>2930	Identifier	other
>2931	ParameterType	ValidateConstraintProposalReduction &
>2932	ReturnType	void
>2933	CompoundStatement	 
>2934	ExpressionStatement	 
>2935	CallExpression	validator ( ) -> keepBest ( proposals_ )
>2936	ArgumentList	proposals_
>2937	Argument	proposals_
>2938	Identifier	proposals_
>2939	Callee	validator ( ) -> keepBest
>2940	PtrMemberAccess	validator ( ) -> keepBest
>2941	Identifier	keepBest
>2942	CallExpression	validator ( )
>2943	ArgumentList	 
>2944	Callee	validator
>2945	Identifier	validator
>2946	ExpressionStatement	 
>2947	CallExpression	appendProposals ( other . proposals_ )
>2948	ArgumentList	other . proposals_
>2949	Argument	other . proposals_
>2950	MemberAccess	other . proposals_
>2951	Identifier	proposals_
>2952	Identifier	other
>2953	Callee	appendProposals
>2954	Identifier	appendProposals
>2962	FunctionDef	validateKeyframeConstraintsParallel (const KeyframeVector & constraint_candidates , const KeyframePtr & keyframe , \
>2963	ParameterList	const KeyframeVector & constraint_candidates , const KeyframePtr & keyframe , ConstraintProposalVector & proposals
>2964	Parameter	 
>2965	Identifier	proposals
>2966	ParameterType	ConstraintProposalVector &
>2967	Parameter	 
>2968	Identifier	keyframe
>2969	ParameterType	const KeyframePtr &
>2970	Parameter	 
>2971	Identifier	constraint_candidates
>2972	ParameterType	const KeyframeVector &
>2973	ReturnType	void
>2974	CompoundStatement	 
>2975	ExpressionStatement	 
>2976	AssignmentExpr	proposals = body . proposals ( )
>2977	CallExpression	body . proposals ( )
>2978	ArgumentList	 
>2979	Callee	body . proposals
>2980	MemberAccess	body . proposals
>2981	Identifier	proposals
>2982	Identifier	body
>2983	Identifier	proposals
>2984	ExpressionStatement	 
>2985	CallExpression	tbb 
>2986	ArgumentList	ValidateConstraintProposalReduction 
>2987	Argument	body
>2988	Identifier	body
>2989	Argument	ValidateConstraintProposalReduction 
>2990	CallExpression	ValidateConstraintProposalReduction 
>2991	ArgumentList	initial_proposals . begin ( )
>2992	Argument	grain_size
>2993	Identifier	grain_size
>2994	Argument	initial_proposals . end ( )
>2995	CallExpression	initial_proposals . end ( )
>2996	ArgumentList	 
>2997	Callee	initial_proposals . end
>2998	MemberAccess	initial_proposals . end
>2999	Identifier	end
>3000	Identifier	initial_proposals
>3001	Argument	initial_proposals . begin ( )
>3002	CallExpression	initial_proposals . begin ( )
>3003	ArgumentList	 
>3004	Callee	initial_proposals . begin
>3005	MemberAccess	initial_proposals . begin
>3006	Identifier	begin
>3007	Identifier	initial_proposals
>3008	Callee	ValidateConstraintProposalReduction 
>3009	Identifier	ValidateConstraintProposalReduction 
>3010	Callee	tbb 
>3011	Identifier	tbb 
>3012	IdentifierDeclStatement	 
>3013	IdentifierDecl	grain_size = cfg_ . UseMultiThreading ? 1 
>3014	AssignmentExpr	grain_size = cfg_ . UseMultiThreading ? 1 
>3015	ConditionalExpression	cfg_ . UseMultiThreading ? 1 
>3016	CallExpression	initial_proposals . size ( )
>3017	ArgumentList	 
>3018	Callee	initial_proposals . size
>3019	MemberAccess	initial_proposals . size
>3020	Identifier	size
>3021	Identifier	initial_proposals
>3022	PrimaryExpression	1
>3023	Condition	cfg_ . UseMultiThreading
>3024	MemberAccess	cfg_ . UseMultiThreading
>3025	Identifier	UseMultiThreading
>3026	Identifier	cfg_
>3027	Identifier	grain_size
>3028	Identifier	grain_size
>3029	IdentifierDeclType	size_t
>3030	IdentifierDeclStatement	 
>3031	IdentifierDecl	body ( validator_pool_ )
>3032	Identifier	validator_pool_
>3033	Identifier	body
>3034	IdentifierDeclType	ValidateConstraintProposalReduction
>3035	ForStatement	for ( KeyframeVector 
>3036	CompoundStatement	 
>3037	ExpressionStatement	 
>3038	CallExpression	initial_proposals . push_back ( ConstraintProposal 
>3039	ArgumentList	ConstraintProposal 
>3040	Argument	ConstraintProposal 
>3041	CallExpression	ConstraintProposal 
>3042	ArgumentList	keyframe
>3043	Argument	* it
>3044	UnaryOp	* it
>3045	Identifier	it
>3046	UnaryOperator	*
>3047	Argument	keyframe
>3048	Identifier	keyframe
>3049	Callee	ConstraintProposal 
>3050	Identifier	ConstraintProposal 
>3051	Callee	initial_proposals . push_back
>3052	MemberAccess	initial_proposals . push_back
>3053	Identifier	push_back
>3054	Identifier	initial_proposals
>3055	ExpressionStatement	 
>3056	CallExpression	initial_proposals . push_back ( ConstraintProposal 
>3057	ArgumentList	ConstraintProposal 
>3058	Argument	ConstraintProposal 
>3059	CallExpression	ConstraintProposal 
>3060	ArgumentList	keyframe
>3061	Argument	* it
>3062	UnaryOp	* it
>3063	Identifier	it
>3064	UnaryOperator	*
>3065	Argument	keyframe
>3066	Identifier	keyframe
>3067	Callee	ConstraintProposal 
>3068	Identifier	ConstraintProposal 
>3069	Callee	initial_proposals . push_back
>3070	MemberAccess	initial_proposals . push_back
>3071	Identifier	push_back
>3072	Identifier	initial_proposals
>3073	UnaryExpression	 
>3074	Identifier	it
>3075	IncDec	++
>3076	Condition	 
>3077	EqualityExpression	it != constraint_candidates . end ( )
>3078	CallExpression	constraint_candidates . end ( )
>3079	ArgumentList	 
>3080	Callee	constraint_candidates . end
>3081	MemberAccess	constraint_candidates . end
>3082	Identifier	end
>3083	Identifier	constraint_candidates
>3084	Identifier	it
>3085	ForInit	 
>3086	IdentifierDeclStatement	KeyframeVector 
>3087	IdentifierDecl	it = constraint_candidates . begin ( )
>3088	AssignmentExpr	it = constraint_candidates . begin ( )
>3089	CallExpression	constraint_candidates . begin ( )
>3090	ArgumentList	 
>3091	Callee	constraint_candidates . begin
>3092	MemberAccess	constraint_candidates . begin
>3093	Identifier	begin
>3094	Identifier	constraint_candidates
>3095	Identifier	it
>3096	Identifier	it
>3097	IdentifierDeclType	KeyframeVector 
>3098	ExpressionStatement	 
>3099	CallExpression	initial_proposals . reserve ( constraint_candidates . size ( ) * 2 )
>3100	ArgumentList	constraint_candidates . size ( ) * 2
>3101	Argument	constraint_candidates . size ( ) * 2
>3102	MultiplicativeExpression	constraint_candidates . size ( ) * 2
>3103	PrimaryExpression	2
>3104	CallExpression	constraint_candidates . size ( )
>3105	ArgumentList	 
>3106	Callee	constraint_candidates . size
>3107	MemberAccess	constraint_candidates . size
>3108	Identifier	size
>3109	Identifier	constraint_candidates
>3110	Callee	initial_proposals . reserve
>3111	MemberAccess	initial_proposals . reserve
>3112	Identifier	reserve
>3113	Identifier	initial_proposals
>3114	IdentifierDeclStatement	 
>3115	IdentifierDecl	initial_proposals
>3116	Identifier	initial_proposals
>3117	IdentifierDeclType	ConstraintProposalVector
>3141	FunctionDef	insertNewKeyframeConstraints (const ConstraintProposalVector & proposals)
>3142	ParameterList	const ConstraintProposalVector & proposals
>3143	Parameter	 
>3144	Identifier	proposals
>3145	ParameterType	const ConstraintProposalVector &
>3146	ReturnType	int
>3147	CompoundStatement	 
>3148	ReturnStatement	 
>3149	Identifier	max_distance
>3150	ForStatement	for ( ConstraintProposalVector 
>3151	CompoundStatement	 
>3152	ExpressionStatement	 
>3153	AssignmentExpr	max_distance = std 
>3154	CallExpression	std 
>3155	ArgumentList	max_distance
>3156	Argument	distance
>3157	Identifier	distance
>3158	Argument	max_distance
>3159	Identifier	max_distance
>3160	Callee	std 
>3161	Identifier	std 
>3162	Identifier	max_distance
>3163	ExpressionStatement	 
>3164	CallExpression	insertConstraint ( p -> Reference , p -> Current , p -> TrackingResult )
>3165	ArgumentList	p -> Reference
>3166	Argument	p -> TrackingResult
>3167	PtrMemberAccess	p -> TrackingResult
>3168	Identifier	TrackingResult
>3169	Identifier	p
>3170	Argument	p -> Current
>3171	PtrMemberAccess	p -> Current
>3172	Identifier	Current
>3173	Identifier	p
>3174	Argument	p -> Reference
>3175	PtrMemberAccess	p -> Reference
>3176	Identifier	Reference
>3177	Identifier	p
>3178	Callee	insertConstraint
>3179	Identifier	insertConstraint
>3180	ExpressionStatement	 
>3181	IncDecOp	inserted ++
>3182	IncDec	++
>3183	Identifier	inserted
>3184	ExpressionStatement	 
>3185	CallExpression	assert ( ! odometry_constraint )
>3186	ArgumentList	! odometry_constraint
>3187	Argument	! odometry_constraint
>3188	UnaryOp	! odometry_constraint
>3189	Identifier	odometry_constraint
>3190	UnaryOperator	!
>3191	Callee	assert
>3192	Identifier	assert
>3193	IdentifierDeclStatement	 
>3194	IdentifierDecl	odometry_constraint = std 
>3195	AssignmentExpr	odometry_constraint = std 
>3196	EqualityExpression	std 
>3197	PrimaryExpression	1
>3198	CallExpression	std 
>3199	ArgumentList	distance
>3200	Argument	distance
>3201	Identifier	distance
>3202	Callee	std 
>3203	Identifier	std 
>3204	Identifier	odometry_constraint
>3205	Identifier	odometry_constraint
>3206	IdentifierDeclType	bool
>3207	IdentifierDeclStatement	 
>3208	IdentifierDecl	distance = std 
>3209	AssignmentExpr	distance = std 
>3210	CallExpression	std 
>3211	ArgumentList	p -> Reference -> id ( ) - p -> Current -> id ( )
>3212	Argument	p -> Reference -> id ( ) - p -> Current -> id ( )
>3213	AdditiveExpression	p -> Reference -> id ( ) - p -> Current -> id ( )
>3214	CallExpression	p -> Current -> id ( )
>3215	ArgumentList	 
>3216	Callee	p -> Current -> id
>3217	PtrMemberAccess	p -> Current -> id
>3218	Identifier	id
>3219	PtrMemberAccess	p -> Current
>3220	Identifier	Current
>3221	Identifier	p
>3222	CallExpression	p -> Reference -> id ( )
>3223	ArgumentList	 
>3224	Callee	p -> Reference -> id
>3225	PtrMemberAccess	p -> Reference -> id
>3226	Identifier	id
>3227	PtrMemberAccess	p -> Reference
>3228	Identifier	Reference
>3229	Identifier	p
>3230	Callee	std 
>3231	Identifier	std 
>3232	Identifier	distance
>3233	Identifier	distance
>3234	IdentifierDeclType	int
>3235	IdentifierDeclStatement	 
>3236	IdentifierDecl	& p = * it
>3237	AssignmentExpr	& p = * it
>3238	UnaryOp	* it
>3239	Identifier	it
>3240	UnaryOperator	*
>3241	Identifier	p
>3242	Identifier	p
>3243	IdentifierDeclType	const ConstraintProposalPtr &
>3244	UnaryExpression	 
>3245	Identifier	it
>3246	IncDec	++
>3247	Condition	 
>3248	EqualityExpression	it != proposals . end ( )
>3249	CallExpression	proposals . end ( )
>3250	ArgumentList	 
>3251	Callee	proposals . end
>3252	MemberAccess	proposals . end
>3253	Identifier	end
>3254	Identifier	proposals
>3255	Identifier	it
>3256	ForInit	 
>3257	IdentifierDeclStatement	ConstraintProposalVector 
>3258	IdentifierDecl	it = proposals . begin ( )
>3259	AssignmentExpr	it = proposals . begin ( )
>3260	CallExpression	proposals . begin ( )
>3261	ArgumentList	 
>3262	Callee	proposals . begin
>3263	MemberAccess	proposals . begin
>3264	Identifier	begin
>3265	Identifier	proposals
>3266	Identifier	it
>3267	Identifier	it
>3268	IdentifierDeclType	ConstraintProposalVector 
>3269	IdentifierDeclStatement	 
>3270	IdentifierDecl	max_distance = - 1
>3271	AssignmentExpr	max_distance = - 1
>3272	UnaryOp	- 1
>3273	PrimaryExpression	1
>3274	UnaryOperator	-
>3275	Identifier	max_distance
>3276	Identifier	max_distance
>3277	IdentifierDeclType	int
>3278	IdentifierDeclStatement	 
>3279	IdentifierDecl	inserted = 0
>3280	AssignmentExpr	inserted = 0
>3281	PrimaryExpression	0
>3282	Identifier	inserted
>3283	Identifier	inserted
>3284	IdentifierDeclType	int
>3311	FunctionDef	insertConstraint (const KeyframePtr & keyframe , const KeyframePtr & constraint , const LocalTracker 
>3312	ParameterList	const KeyframePtr & keyframe , const KeyframePtr & constraint , const LocalTracker 
>3313	Parameter	 
>3314	Identifier	result
>3315	ParameterType	const LocalTracker 
>3316	Parameter	 
>3317	Identifier	constraint
>3318	ParameterType	const KeyframePtr &
>3319	Parameter	 
>3320	Identifier	keyframe
>3321	ParameterType	const KeyframePtr &
>3322	ReturnType	void
>3323	CompoundStatement	 
>3324	ExpressionStatement	 
>3325	CallExpression	keyframegraph_ . addEdge ( e )
>3326	ArgumentList	e
>3327	Argument	e
>3328	Identifier	e
>3329	Callee	keyframegraph_ . addEdge
>3330	MemberAccess	keyframegraph_ . addEdge
>3331	Identifier	addEdge
>3332	Identifier	keyframegraph_
>3333	ExpressionStatement	 
>3334	AssignmentExpr	constraint_tracking_results_ [ edge_id ] = result
>3335	Identifier	result
>3336	ArrayIndexing	constraint_tracking_results_ [ edge_id ]
>3337	Identifier	edge_id
>3338	Identifier	constraint_tracking_results_
>3339	ExpressionStatement	 
>3340	CallExpression	e -> setVertex ( 1 , keyframegraph_ . vertex ( constraint -> id ( ) ) )
>3341	ArgumentList	1
>3342	Argument	keyframegraph_ . vertex ( constraint -> id ( ) )
>3343	CallExpression	keyframegraph_ . vertex ( constraint -> id ( ) )
>3344	ArgumentList	constraint -> id ( )
>3345	Argument	constraint -> id ( )
>3346	CallExpression	constraint -> id ( )
>3347	ArgumentList	 
>3348	Callee	constraint -> id
>3349	PtrMemberAccess	constraint -> id
>3350	Identifier	id
>3351	Identifier	constraint
>3352	Callee	keyframegraph_ . vertex
>3353	MemberAccess	keyframegraph_ . vertex
>3354	Identifier	vertex
>3355	Identifier	keyframegraph_
>3356	Argument	1
>3357	PrimaryExpression	1
>3358	Callee	e -> setVertex
>3359	PtrMemberAccess	e -> setVertex
>3360	Identifier	setVertex
>3361	Identifier	e
>3362	ExpressionStatement	 
>3363	CallExpression	e -> setVertex ( 0 , keyframegraph_ . vertex ( keyframe -> id ( ) ) )
>3364	ArgumentList	0
>3365	Argument	keyframegraph_ . vertex ( keyframe -> id ( ) )
>3366	CallExpression	keyframegraph_ . vertex ( keyframe -> id ( ) )
>3367	ArgumentList	keyframe -> id ( )
>3368	Argument	keyframe -> id ( )
>3369	CallExpression	keyframe -> id ( )
>3370	ArgumentList	 
>3371	Callee	keyframe -> id
>3372	PtrMemberAccess	keyframe -> id
>3373	Identifier	id
>3374	Identifier	keyframe
>3375	Callee	keyframegraph_ . vertex
>3376	MemberAccess	keyframegraph_ . vertex
>3377	Identifier	vertex
>3378	Identifier	keyframegraph_
>3379	Argument	0
>3380	PrimaryExpression	0
>3381	Callee	e -> setVertex
>3382	PtrMemberAccess	e -> setVertex
>3383	Identifier	setVertex
>3384	Identifier	e
>3385	ExpressionStatement	 
>3386	CallExpression	e -> resize ( 2 )
>3387	ArgumentList	2
>3388	Argument	2
>3389	PrimaryExpression	2
>3390	Callee	e -> resize
>3391	PtrMemberAccess	e -> resize
>3392	Identifier	resize
>3393	Identifier	e
>3394	ExpressionStatement	 
>3395	CallExpression	e -> setInformation ( result . Information )
>3396	ArgumentList	result . Information
>3397	Argument	result . Information
>3398	MemberAccess	result . Information
>3399	Identifier	Information
>3400	Identifier	result
>3401	Callee	e -> setInformation
>3402	PtrMemberAccess	e -> setInformation
>3403	Identifier	setInformation
>3404	Identifier	e
>3405	ExpressionStatement	 
>3406	CallExpression	e -> setRobustKernel ( createRobustKernel ( ) )
>3407	ArgumentList	createRobustKernel ( )
>3408	Argument	createRobustKernel ( )
>3409	CallExpression	createRobustKernel ( )
>3410	ArgumentList	 
>3411	Callee	createRobustKernel
>3412	Identifier	createRobustKernel
>3413	Callee	e -> setRobustKernel
>3414	PtrMemberAccess	e -> setRobustKernel
>3415	Identifier	setRobustKernel
>3416	Identifier	e
>3417	ExpressionStatement	 
>3418	CallExpression	e -> setMeasurement ( toIsometry ( result . Transformation ) )
>3419	ArgumentList	toIsometry ( result . Transformation )
>3420	Argument	toIsometry ( result . Transformation )
>3421	CallExpression	toIsometry ( result . Transformation )
>3422	ArgumentList	result . Transformation
>3423	Argument	result . Transformation
>3424	MemberAccess	result . Transformation
>3425	Identifier	Transformation
>3426	Identifier	result
>3427	Callee	toIsometry
>3428	Identifier	toIsometry
>3429	Callee	e -> setMeasurement
>3430	PtrMemberAccess	e -> setMeasurement
>3431	Identifier	setMeasurement
>3432	Identifier	e
>3433	ExpressionStatement	 
>3434	CallExpression	e -> setId ( edge_id )
>3435	ArgumentList	edge_id
>3436	Argument	edge_id
>3437	Identifier	edge_id
>3438	Callee	e -> setId
>3439	PtrMemberAccess	e -> setId
>3440	Identifier	setId
>3441	Identifier	e
>3442	IdentifierDeclStatement	 
>3443	IdentifierDecl	* e = new g2o 
>3444	AssignmentExpr	* e = new g2o 
>3445	UnaryExpression	new g2o 
>3446	Identifier	e
>3447	Identifier	e
>3448	IdentifierDeclType	g2o 
>3449	IdentifierDeclStatement	 
>3450	IdentifierDecl	edge_id = combine ( constraint -> id ( ) , keyframe -> id ( ) )
>3451	AssignmentExpr	edge_id = combine ( constraint -> id ( ) , keyframe -> id ( ) )
>3452	CallExpression	combine ( constraint -> id ( ) , keyframe -> id ( ) )
>3453	ArgumentList	constraint -> id ( )
>3454	Argument	keyframe -> id ( )
>3455	CallExpression	keyframe -> id ( )
>3456	ArgumentList	 
>3457	Callee	keyframe -> id
>3458	PtrMemberAccess	keyframe -> id
>3459	Identifier	id
>3460	Identifier	keyframe
>3461	Argument	constraint -> id ( )
>3462	CallExpression	constraint -> id ( )
>3463	ArgumentList	 
>3464	Callee	constraint -> id
>3465	PtrMemberAccess	constraint -> id
>3466	Identifier	id
>3467	Identifier	constraint
>3468	Callee	combine
>3469	Identifier	combine
>3470	Identifier	edge_id
>3471	Identifier	edge_id
>3472	IdentifierDeclType	int
>3495	FunctionDef	isOdometryConstraint (g2o 
>3496	ParameterList	g2o 
>3497	Parameter	 
>3498	Identifier	e
>3499	ParameterType	g2o 
>3500	ReturnType	bool
>3501	CompoundStatement	 
>3502	ReturnStatement	 
>3503	CallExpression	std 
>3504	ArgumentList	e -> vertex ( 0 ) -> id ( ) - e -> vertex ( 1 ) -> id ( )
>3505	Argument	e -> vertex ( 0 ) -> id ( ) - e -> vertex ( 1 ) -> id ( )
>3506	AdditiveExpression	e -> vertex ( 0 ) -> id ( ) - e -> vertex ( 1 ) -> id ( )
>3507	CallExpression	e -> vertex ( 1 ) -> id ( )
>3508	ArgumentList	 
>3509	Callee	e -> vertex ( 1 ) -> id
>3510	PtrMemberAccess	e -> vertex ( 1 ) -> id
>3511	Identifier	id
>3512	CallExpression	e -> vertex ( 1 )
>3513	ArgumentList	1
>3514	Argument	1
>3515	PrimaryExpression	1
>3516	Callee	e -> vertex
>3517	PtrMemberAccess	e -> vertex
>3518	Identifier	vertex
>3519	Identifier	e
>3520	CallExpression	e -> vertex ( 0 ) -> id ( )
>3521	ArgumentList	 
>3522	Callee	e -> vertex ( 0 ) -> id
>3523	PtrMemberAccess	e -> vertex ( 0 ) -> id
>3524	Identifier	id
>3525	CallExpression	e -> vertex ( 0 )
>3526	ArgumentList	0
>3527	Argument	0
>3528	PrimaryExpression	0
>3529	Callee	e -> vertex
>3530	PtrMemberAccess	e -> vertex
>3531	Identifier	vertex
>3532	Identifier	e
>3533	Callee	std 
>3534	Identifier	std 
>3558	FunctionDef	updateKeyframePosesFromGraph ()
>3559	ParameterList	 
>3560	ReturnType	void
>3561	CompoundStatement	 
>3562	ForStatement	for ( KeyframeVector 
>3563	CompoundStatement	 
>3564	ExpressionStatement	 
>3565	CallExpression	keyframe -> pose ( toAffine ( vertex -> estimate ( ) ) )
>3566	ArgumentList	toAffine ( vertex -> estimate ( ) )
>3567	Argument	toAffine ( vertex -> estimate ( ) )
>3568	CallExpression	toAffine ( vertex -> estimate ( ) )
>3569	ArgumentList	vertex -> estimate ( )
>3570	Argument	vertex -> estimate ( )
>3571	CallExpression	vertex -> estimate ( )
>3572	ArgumentList	 
>3573	Callee	vertex -> estimate
>3574	PtrMemberAccess	vertex -> estimate
>3575	Identifier	estimate
>3576	Identifier	vertex
>3577	Callee	toAffine
>3578	Identifier	toAffine
>3579	Callee	keyframe -> pose
>3580	PtrMemberAccess	keyframe -> pose
>3581	Identifier	pose
>3582	Identifier	keyframe
>3583	IdentifierDeclStatement	 
>3584	IdentifierDecl	* vertex = ( g2o 
>3585	AssignmentExpr	* vertex = ( g2o 
>3586	CastExpression	( g2o 
>3587	CallExpression	keyframegraph_ . vertex ( keyframe -> id ( ) )
>3588	ArgumentList	keyframe -> id ( )
>3589	Argument	keyframe -> id ( )
>3590	CallExpression	keyframe -> id ( )
>3591	ArgumentList	 
>3592	Callee	keyframe -> id
>3593	PtrMemberAccess	keyframe -> id
>3594	Identifier	id
>3595	Identifier	keyframe
>3596	Callee	keyframegraph_ . vertex
>3597	MemberAccess	keyframegraph_ . vertex
>3598	Identifier	vertex
>3599	Identifier	keyframegraph_
>3600	CastTarget	g2o 
>3601	Identifier	vertex
>3602	Identifier	vertex
>3603	IdentifierDeclType	g2o 
>3604	IdentifierDeclStatement	 
>3605	IdentifierDecl	& keyframe = * it
>3606	AssignmentExpr	& keyframe = * it
>3607	UnaryOp	* it
>3608	Identifier	it
>3609	UnaryOperator	*
>3610	Identifier	keyframe
>3611	Identifier	keyframe
>3612	IdentifierDeclType	const KeyframePtr &
>3613	UnaryExpression	 
>3614	Identifier	it
>3615	IncDec	++
>3616	Condition	 
>3617	EqualityExpression	it != keyframes_ . end ( )
>3618	CallExpression	keyframes_ . end ( )
>3619	ArgumentList	 
>3620	Callee	keyframes_ . end
>3621	MemberAccess	keyframes_ . end
>3622	Identifier	end
>3623	Identifier	keyframes_
>3624	Identifier	it
>3625	ForInit	 
>3626	IdentifierDeclStatement	KeyframeVector 
>3627	IdentifierDecl	it = keyframes_ . begin ( )
>3628	AssignmentExpr	it = keyframes_ . begin ( )
>3629	CallExpression	keyframes_ . begin ( )
>3630	ArgumentList	 
>3631	Callee	keyframes_ . begin
>3632	MemberAccess	keyframes_ . begin
>3633	Identifier	begin
>3634	Identifier	keyframes_
>3635	Identifier	it
>3636	Identifier	it
>3637	IdentifierDeclType	KeyframeVector 
>3659	FunctionDef	FindEdge (int id1 , int id2)
>3660	ParameterList	int id1 , int id2
>3661	Parameter	 
>3662	Identifier	id2
>3663	ParameterType	int
>3664	Parameter	 
>3665	Identifier	id1
>3666	ParameterType	int
>3667	CompoundStatement	 
>3673	FunctionDef	operator ( ) (const g2o 
>3674	ParameterList	const g2o 
>3675	Parameter	 
>3676	Identifier	e
>3677	ParameterType	const g2o 
>3678	ReturnType	bool
>3679	CompoundStatement	 
>3680	ReturnStatement	 
>3681	AndExpression	e -> vertices ( ) . size ( ) == 2 && ( ( e -> vertex ( 0 ) -> id ( ) == id1 && e -> vertex ( 1 ) -> \
>3682	OrExpression	( e -> vertex ( 0 ) -> id ( ) == id1 && e -> vertex ( 1 ) -> id ( ) == id2 ) || ( e -> vertex ( 1 ) \
>3683	AndExpression	e -> vertex ( 1 ) -> id ( ) == id1 && e -> vertex ( 0 ) -> id ( ) == id2
>3684	EqualityExpression	e -> vertex ( 0 ) -> id ( ) == id2
>3685	Identifier	id2
>3686	CallExpression	e -> vertex ( 0 ) -> id ( )
>3687	ArgumentList	 
>3688	Callee	e -> vertex ( 0 ) -> id
>3689	PtrMemberAccess	e -> vertex ( 0 ) -> id
>3690	Identifier	id
>3691	CallExpression	e -> vertex ( 0 )
>3692	ArgumentList	0
>3693	Argument	0
>3694	PrimaryExpression	0
>3695	Callee	e -> vertex
>3696	PtrMemberAccess	e -> vertex
>3697	Identifier	vertex
>3698	Identifier	e
>3699	EqualityExpression	e -> vertex ( 1 ) -> id ( ) == id1
>3700	Identifier	id1
>3701	CallExpression	e -> vertex ( 1 ) -> id ( )
>3702	ArgumentList	 
>3703	Callee	e -> vertex ( 1 ) -> id
>3704	PtrMemberAccess	e -> vertex ( 1 ) -> id
>3705	Identifier	id
>3706	CallExpression	e -> vertex ( 1 )
>3707	ArgumentList	1
>3708	Argument	1
>3709	PrimaryExpression	1
>3710	Callee	e -> vertex
>3711	PtrMemberAccess	e -> vertex
>3712	Identifier	vertex
>3713	Identifier	e
>3714	AndExpression	e -> vertex ( 0 ) -> id ( ) == id1 && e -> vertex ( 1 ) -> id ( ) == id2
>3715	EqualityExpression	e -> vertex ( 1 ) -> id ( ) == id2
>3716	Identifier	id2
>3717	CallExpression	e -> vertex ( 1 ) -> id ( )
>3718	ArgumentList	 
>3719	Callee	e -> vertex ( 1 ) -> id
>3720	PtrMemberAccess	e -> vertex ( 1 ) -> id
>3721	Identifier	id
>3722	CallExpression	e -> vertex ( 1 )
>3723	ArgumentList	1
>3724	Argument	1
>3725	PrimaryExpression	1
>3726	Callee	e -> vertex
>3727	PtrMemberAccess	e -> vertex
>3728	Identifier	vertex
>3729	Identifier	e
>3730	EqualityExpression	e -> vertex ( 0 ) -> id ( ) == id1
>3731	Identifier	id1
>3732	CallExpression	e -> vertex ( 0 ) -> id ( )
>3733	ArgumentList	 
>3734	Callee	e -> vertex ( 0 ) -> id
>3735	PtrMemberAccess	e -> vertex ( 0 ) -> id
>3736	Identifier	id
>3737	CallExpression	e -> vertex ( 0 )
>3738	ArgumentList	0
>3739	Argument	0
>3740	PrimaryExpression	0
>3741	Callee	e -> vertex
>3742	PtrMemberAccess	e -> vertex
>3743	Identifier	vertex
>3744	Identifier	e
>3745	EqualityExpression	e -> vertices ( ) . size ( ) == 2
>3746	PrimaryExpression	2
>3747	CallExpression	e -> vertices ( ) . size ( )
>3748	ArgumentList	 
>3749	Callee	e -> vertices ( ) . size
>3750	MemberAccess	e -> vertices ( ) . size
>3751	Identifier	size
>3752	CallExpression	e -> vertices ( )
>3753	ArgumentList	 
>3754	Callee	e -> vertices
>3755	PtrMemberAccess	e -> vertices
>3756	Identifier	vertices
>3757	Identifier	e
>3772	FunctionDef	addGraph (g2o 
>3773	ParameterList	g2o 
>3774	Parameter	 
>3775	Identifier	g
>3776	ParameterType	g2o 
>3777	ReturnType	void
>3778	CompoundStatement	 
>3779	ForStatement	for ( g2o 
>3780	CompoundStatement	 
>3781	ExpressionStatement	 
>3782	CallExpression	keyframegraph_ . addEdge ( en )
>3783	ArgumentList	en
>3784	Argument	en
>3785	Identifier	en
>3786	Callee	keyframegraph_ . addEdge
>3787	MemberAccess	keyframegraph_ . addEdge
>3788	Identifier	addEdge
>3789	Identifier	keyframegraph_
>3790	ForStatement	for ( std 
>3791	CompoundStatement	 
>3792	ExpressionStatement	 
>3793	CallExpression	en -> setVertex ( cnt ++ , v )
>3794	ArgumentList	cnt ++
>3795	Argument	v
>3796	Identifier	v
>3797	Argument	cnt ++
>3798	IncDecOp	cnt ++
>3799	IncDec	++
>3800	Identifier	cnt
>3801	Callee	en -> setVertex
>3802	PtrMemberAccess	en -> setVertex
>3803	Identifier	setVertex
>3804	Identifier	en
>3805	ExpressionStatement	 
>3806	CallExpression	assert ( v )
>3807	ArgumentList	v
>3808	Argument	v
>3809	Identifier	v
>3810	Callee	assert
>3811	Identifier	assert
>3812	IdentifierDeclStatement	 
>3813	IdentifierDecl	* v = ( g2o 
>3814	AssignmentExpr	* v = ( g2o 
>3815	CastExpression	( g2o 
>3816	CallExpression	keyframegraph_ . vertex ( ( * it ) -> id ( ) )
>3817	ArgumentList	( * it ) -> id ( )
>3818	Argument	( * it ) -> id ( )
>3819	CallExpression	( * it ) -> id ( )
>3820	ArgumentList	 
>3821	Callee	( * it ) -> id
>3822	PtrMemberAccess	( * it ) -> id
>3823	Identifier	id
>3824	UnaryOp	* it
>3825	Identifier	it
>3826	UnaryOperator	*
>3827	Callee	keyframegraph_ . vertex
>3828	MemberAccess	keyframegraph_ . vertex
>3829	Identifier	vertex
>3830	Identifier	keyframegraph_
>3831	CastTarget	g2o 
>3832	Identifier	v
>3833	Identifier	v
>3834	IdentifierDeclType	g2o 
>3835	UnaryExpression	 
>3836	Identifier	it
>3837	IncDec	++
>3838	Condition	 
>3839	EqualityExpression	it != e -> vertices ( ) . end ( )
>3840	CallExpression	e -> vertices ( ) . end ( )
>3841	ArgumentList	 
>3842	Callee	e -> vertices ( ) . end
>3843	MemberAccess	e -> vertices ( ) . end
>3844	Identifier	end
>3845	CallExpression	e -> vertices ( )
>3846	ArgumentList	 
>3847	Callee	e -> vertices
>3848	PtrMemberAccess	e -> vertices
>3849	Identifier	vertices
>3850	Identifier	e
>3851	Identifier	it
>3852	ForInit	 
>3853	IdentifierDeclStatement	std 
>3854	IdentifierDecl	it = e -> vertices ( ) . begin ( )
>3855	AssignmentExpr	it = e -> vertices ( ) . begin ( )
>3856	CallExpression	e -> vertices ( ) . begin ( )
>3857	ArgumentList	 
>3858	Callee	e -> vertices ( ) . begin
>3859	MemberAccess	e -> vertices ( ) . begin
>3860	Identifier	begin
>3861	CallExpression	e -> vertices ( )
>3862	ArgumentList	 
>3863	Callee	e -> vertices
>3864	PtrMemberAccess	e -> vertices
>3865	Identifier	vertices
>3866	Identifier	e
>3867	Identifier	it
>3868	Identifier	it
>3869	IdentifierDeclType	std 
>3870	IdentifierDeclStatement	 
>3871	IdentifierDecl	cnt = 0
>3872	AssignmentExpr	cnt = 0
>3873	PrimaryExpression	0
>3874	Identifier	cnt
>3875	Identifier	cnt
>3876	IdentifierDeclType	int
>3877	ExpressionStatement	 
>3878	CallExpression	en -> resize ( e -> vertices ( ) . size ( ) )
>3879	ArgumentList	e -> vertices ( ) . size ( )
>3880	Argument	e -> vertices ( ) . size ( )
>3881	CallExpression	e -> vertices ( ) . size ( )
>3882	ArgumentList	 
>3883	Callee	e -> vertices ( ) . size
>3884	MemberAccess	e -> vertices ( ) . size
>3885	Identifier	size
>3886	CallExpression	e -> vertices ( )
>3887	ArgumentList	 
>3888	Callee	e -> vertices
>3889	PtrMemberAccess	e -> vertices
>3890	Identifier	vertices
>3891	Identifier	e
>3892	Callee	en -> resize
>3893	PtrMemberAccess	en -> resize
>3894	Identifier	resize
>3895	Identifier	en
>3896	ExpressionStatement	 
>3897	CallExpression	en -> setInformation ( e -> information ( ) )
>3898	ArgumentList	e -> information ( )
>3899	Argument	e -> information ( )
>3900	CallExpression	e -> information ( )
>3901	ArgumentList	 
>3902	Callee	e -> information
>3903	PtrMemberAccess	e -> information
>3904	Identifier	information
>3905	Identifier	e
>3906	Callee	en -> setInformation
>3907	PtrMemberAccess	en -> setInformation
>3908	Identifier	setInformation
>3909	Identifier	en
>3910	ExpressionStatement	 
>3911	CallExpression	en -> setMeasurement ( e -> measurement ( ) )
>3912	ArgumentList	e -> measurement ( )
>3913	Argument	e -> measurement ( )
>3914	CallExpression	e -> measurement ( )
>3915	ArgumentList	 
>3916	Callee	e -> measurement
>3917	PtrMemberAccess	e -> measurement
>3918	Identifier	measurement
>3919	Identifier	e
>3920	Callee	en -> setMeasurement
>3921	PtrMemberAccess	en -> setMeasurement
>3922	Identifier	setMeasurement
>3923	Identifier	en
>3924	ExpressionStatement	 
>3925	CallExpression	en -> setLevel ( e -> level ( ) )
>3926	ArgumentList	e -> level ( )
>3927	Argument	e -> level ( )
>3928	CallExpression	e -> level ( )
>3929	ArgumentList	 
>3930	Callee	e -> level
>3931	PtrMemberAccess	e -> level
>3932	Identifier	level
>3933	Identifier	e
>3934	Callee	en -> setLevel
>3935	PtrMemberAccess	en -> setLevel
>3936	Identifier	setLevel
>3937	Identifier	en
>3938	ExpressionStatement	 
>3939	CallExpression	en -> setId ( e -> id ( ) )
>3940	ArgumentList	e -> id ( )
>3941	Argument	e -> id ( )
>3942	CallExpression	e -> id ( )
>3943	ArgumentList	 
>3944	Callee	e -> id
>3945	PtrMemberAccess	e -> id
>3946	Identifier	id
>3947	Identifier	e
>3948	Callee	en -> setId
>3949	PtrMemberAccess	en -> setId
>3950	Identifier	setId
>3951	Identifier	en
>3952	IdentifierDeclStatement	 
>3953	IdentifierDecl	* en = new g2o 
>3954	AssignmentExpr	* en = new g2o 
>3955	UnaryExpression	new g2o 
>3956	Identifier	en
>3957	Identifier	en
>3958	IdentifierDeclType	g2o 
>3959	IdentifierDeclStatement	 
>3960	IdentifierDecl	* e = ( g2o 
>3961	AssignmentExpr	* e = ( g2o 
>3962	CastExpression	( g2o 
>3963	UnaryOp	* it
>3964	Identifier	it
>3965	UnaryOperator	*
>3966	CastTarget	g2o 
>3967	Identifier	e
>3968	Identifier	e
>3969	IdentifierDeclType	g2o 
>3970	UnaryExpression	 
>3971	Identifier	it
>3972	IncDec	++
>3973	Condition	 
>3974	EqualityExpression	it != g -> edges ( ) . end ( )
>3975	CallExpression	g -> edges ( ) . end ( )
>3976	ArgumentList	 
>3977	Callee	g -> edges ( ) . end
>3978	MemberAccess	g -> edges ( ) . end
>3979	Identifier	end
>3980	CallExpression	g -> edges ( )
>3981	ArgumentList	 
>3982	Callee	g -> edges
>3983	PtrMemberAccess	g -> edges
>3984	Identifier	edges
>3985	Identifier	g
>3986	Identifier	it
>3987	ForInit	 
>3988	IdentifierDeclStatement	g2o 
>3989	IdentifierDecl	it = g -> edges ( ) . begin ( )
>3990	AssignmentExpr	it = g -> edges ( ) . begin ( )
>3991	CallExpression	g -> edges ( ) . begin ( )
>3992	ArgumentList	 
>3993	Callee	g -> edges ( ) . begin
>3994	MemberAccess	g -> edges ( ) . begin
>3995	Identifier	begin
>3996	CallExpression	g -> edges ( )
>3997	ArgumentList	 
>3998	Callee	g -> edges
>3999	PtrMemberAccess	g -> edges
>4000	Identifier	edges
>4001	Identifier	g
>4002	Identifier	it
>4003	Identifier	it
>4004	IdentifierDeclType	g2o 
>4005	ForStatement	for ( g2o 
>4006	CompoundStatement	 
>4007	ExpressionStatement	 
>4008	CallExpression	keyframegraph_ . addVertex ( v2 )
>4009	ArgumentList	v2
>4010	Argument	v2
>4011	Identifier	v2
>4012	Callee	keyframegraph_ . addVertex
>4013	MemberAccess	keyframegraph_ . addVertex
>4014	Identifier	addVertex
>4015	Identifier	keyframegraph_
>4016	ExpressionStatement	 
>4017	CallExpression	v2 -> setHessianIndex ( - 1 )
>4018	ArgumentList	- 1
>4019	Argument	- 1
>4020	UnaryOp	- 1
>4021	PrimaryExpression	1
>4022	UnaryOperator	-
>4023	Callee	v2 -> setHessianIndex
>4024	PtrMemberAccess	v2 -> setHessianIndex
>4025	Identifier	setHessianIndex
>4026	Identifier	v2
>4027	ExpressionStatement	 
>4028	CallExpression	v1 -> setUserData ( 0 )
>4029	ArgumentList	0
>4030	Argument	0
>4031	PrimaryExpression	0
>4032	Callee	v1 -> setUserData
>4033	PtrMemberAccess	v1 -> setUserData
>4034	Identifier	setUserData
>4035	Identifier	v1
>4036	ExpressionStatement	 
>4037	CallExpression	v2 -> setUserData ( v1 -> userData ( ) )
>4038	ArgumentList	v1 -> userData ( )
>4039	Argument	v1 -> userData ( )
>4040	CallExpression	v1 -> userData ( )
>4041	ArgumentList	 
>4042	Callee	v1 -> userData
>4043	PtrMemberAccess	v1 -> userData
>4044	Identifier	userData
>4045	Identifier	v1
>4046	Callee	v2 -> setUserData
>4047	PtrMemberAccess	v2 -> setUserData
>4048	Identifier	setUserData
>4049	Identifier	v2
>4050	ExpressionStatement	 
>4051	CallExpression	v2 -> setMarginalized ( v1 -> marginalized ( ) )
>4052	ArgumentList	v1 -> marginalized ( )
>4053	Argument	v1 -> marginalized ( )
>4054	CallExpression	v1 -> marginalized ( )
>4055	ArgumentList	 
>4056	Callee	v1 -> marginalized
>4057	PtrMemberAccess	v1 -> marginalized
>4058	Identifier	marginalized
>4059	Identifier	v1
>4060	Callee	v2 -> setMarginalized
>4061	PtrMemberAccess	v2 -> setMarginalized
>4062	Identifier	setMarginalized
>4063	Identifier	v2
>4064	ExpressionStatement	 
>4065	CallExpression	v2 -> setEstimate ( v1 -> estimate ( ) )
>4066	ArgumentList	v1 -> estimate ( )
>4067	Argument	v1 -> estimate ( )
>4068	CallExpression	v1 -> estimate ( )
>4069	ArgumentList	 
>4070	Callee	v1 -> estimate
>4071	PtrMemberAccess	v1 -> estimate
>4072	Identifier	estimate
>4073	Identifier	v1
>4074	Callee	v2 -> setEstimate
>4075	PtrMemberAccess	v2 -> setEstimate
>4076	Identifier	setEstimate
>4077	Identifier	v2
>4078	ExpressionStatement	 
>4079	CallExpression	v2 -> setId ( v1 -> id ( ) )
>4080	ArgumentList	v1 -> id ( )
>4081	Argument	v1 -> id ( )
>4082	CallExpression	v1 -> id ( )
>4083	ArgumentList	 
>4084	Callee	v1 -> id
>4085	PtrMemberAccess	v1 -> id
>4086	Identifier	id
>4087	Identifier	v1
>4088	Callee	v2 -> setId
>4089	PtrMemberAccess	v2 -> setId
>4090	Identifier	setId
>4091	Identifier	v2
>4092	IdentifierDeclStatement	 
>4093	IdentifierDecl	* v2 = new g2o 
>4094	AssignmentExpr	* v2 = new g2o 
>4095	UnaryExpression	new g2o 
>4096	Identifier	v2
>4097	Identifier	v2
>4098	IdentifierDeclType	g2o 
>4099	IdentifierDeclStatement	 
>4100	IdentifierDecl	* v1 = ( g2o 
>4101	AssignmentExpr	* v1 = ( g2o 
>4102	CastExpression	( g2o 
>4103	Identifier	v
>4104	CastTarget	g2o 
>4105	Identifier	v1
>4106	Identifier	v1
>4107	IdentifierDeclType	g2o 
>4108	IfStatement	if ( keyframegraph_ . vertex ( v -> id ( ) ) )
>4109	ContinueStatement	 
>4110	Condition	 
>4111	CallExpression	keyframegraph_ . vertex ( v -> id ( ) )
>4112	ArgumentList	v -> id ( )
>4113	Argument	v -> id ( )
>4114	CallExpression	v -> id ( )
>4115	ArgumentList	 
>4116	Callee	v -> id
>4117	PtrMemberAccess	v -> id
>4118	Identifier	id
>4119	Identifier	v
>4120	Callee	keyframegraph_ . vertex
>4121	MemberAccess	keyframegraph_ . vertex
>4122	Identifier	vertex
>4123	Identifier	keyframegraph_
>4124	IdentifierDeclStatement	 
>4125	IdentifierDecl	* v = ( g2o 
>4126	AssignmentExpr	* v = ( g2o 
>4127	CastExpression	( g2o 
>4128	PtrMemberAccess	it -> second
>4129	Identifier	second
>4130	Identifier	it
>4131	CastTarget	g2o 
>4132	Identifier	v
>4133	Identifier	v
>4134	IdentifierDeclType	g2o 
>4135	UnaryExpression	 
>4136	Identifier	it
>4137	IncDec	++
>4138	Condition	 
>4139	EqualityExpression	it != g -> vertices ( ) . end ( )
>4140	CallExpression	g -> vertices ( ) . end ( )
>4141	ArgumentList	 
>4142	Callee	g -> vertices ( ) . end
>4143	MemberAccess	g -> vertices ( ) . end
>4144	Identifier	end
>4145	CallExpression	g -> vertices ( )
>4146	ArgumentList	 
>4147	Callee	g -> vertices
>4148	PtrMemberAccess	g -> vertices
>4149	Identifier	vertices
>4150	Identifier	g
>4151	Identifier	it
>4152	ForInit	 
>4153	IdentifierDeclStatement	g2o 
>4154	IdentifierDecl	it = g -> vertices ( ) . begin ( )
>4155	AssignmentExpr	it = g -> vertices ( ) . begin ( )
>4156	CallExpression	g -> vertices ( ) . begin ( )
>4157	ArgumentList	 
>4158	Callee	g -> vertices ( ) . begin
>4159	MemberAccess	g -> vertices ( ) . begin
>4160	Identifier	begin
>4161	CallExpression	g -> vertices ( )
>4162	ArgumentList	 
>4163	Callee	g -> vertices
>4164	PtrMemberAccess	g -> vertices
>4165	Identifier	vertices
>4166	Identifier	g
>4167	Identifier	it
>4168	Identifier	it
>4169	IdentifierDeclType	g2o 
>4210	FunctionDef	insertNewKeyframe (const LocalMap 
>4211	ParameterList	const LocalMap 
>4212	Parameter	 
>4213	Identifier	m
>4214	ParameterType	const LocalMap 
>4215	ReturnType	KeyframePtr
>4216	CompoundStatement	 
>4217	ReturnStatement	 
>4218	Identifier	keyframe
>4219	ExpressionStatement	 
>4220	AssignmentExpr	next_keyframe_id_ += 1
>4221	PrimaryExpression	1
>4222	Identifier	next_keyframe_id_
>4223	ExpressionStatement	 
>4224	AssignmentExpr	next_odometry_vertex_id_ -= max_id - 1
>4225	AdditiveExpression	max_id - 1
>4226	PrimaryExpression	1
>4227	Identifier	max_id
>4228	Identifier	next_odometry_vertex_id_
>4229	ExpressionStatement	 
>4230	CallExpression	keyframes_ . push_back ( keyframe )
>4231	ArgumentList	keyframe
>4232	Argument	keyframe
>4233	Identifier	keyframe
>4234	Callee	keyframes_ . push_back
>4235	MemberAccess	keyframes_ . push_back
>4236	Identifier	push_back
>4237	Identifier	keyframes_
>4238	ExpressionStatement	 
>4239	CallExpression	kv -> setUserData ( new dvo_slam 
>4240	ArgumentList	keyframe -> timestamp ( )
>4241	Argument	keyframe -> timestamp ( )
>4242	CallExpression	keyframe -> timestamp ( )
>4243	ArgumentList	 
>4244	Callee	keyframe -> timestamp
>4245	PtrMemberAccess	keyframe -> timestamp
>4246	Identifier	timestamp
>4247	Identifier	keyframe
>4248	Callee	kv -> setUserData
>4249	PtrMemberAccess	kv -> setUserData
>4250	Identifier	setUserData
>4251	Identifier	kv
>4252	ExpressionStatement	 
>4253	CallExpression	keyframe -> id ( next_keyframe_id_ ) . image ( m -> getKeyframe ( ) ) . pose ( toAffine ( kv -> estimate ( ) ) ) \
>4254	ArgumentList	m -> getEvaluation ( )
>4255	Argument	m -> getEvaluation ( )
>4256	CallExpression	m -> getEvaluation ( )
>4257	ArgumentList	 
>4258	Callee	m -> getEvaluation
>4259	PtrMemberAccess	m -> getEvaluation
>4260	Identifier	getEvaluation
>4261	Identifier	m
>4262	Callee	keyframe -> id ( next_keyframe_id_ ) . image ( m -> getKeyframe ( ) ) . pose ( toAffine ( kv -> estimate ( ) ) ) \
>4263	MemberAccess	keyframe -> id ( next_keyframe_id_ ) . image ( m -> getKeyframe ( ) ) . pose ( toAffine ( kv -> estimate ( ) ) ) \
>4264	Identifier	evaluation
>4265	CallExpression	keyframe -> id ( next_keyframe_id_ ) . image ( m -> getKeyframe ( ) ) . pose ( toAffine ( kv -> estimate ( ) ) )
>4266	ArgumentList	toAffine ( kv -> estimate ( ) )
>4267	Argument	toAffine ( kv -> estimate ( ) )
>4268	CallExpression	toAffine ( kv -> estimate ( ) )
>4269	ArgumentList	kv -> estimate ( )
>4270	Argument	kv -> estimate ( )
>4271	CallExpression	kv -> estimate ( )
>4272	ArgumentList	 
>4273	Callee	kv -> estimate
>4274	PtrMemberAccess	kv -> estimate
>4275	Identifier	estimate
>4276	Identifier	kv
>4277	Callee	toAffine
>4278	Identifier	toAffine
>4279	Callee	keyframe -> id ( next_keyframe_id_ ) . image ( m -> getKeyframe ( ) ) . pose
>4280	MemberAccess	keyframe -> id ( next_keyframe_id_ ) . image ( m -> getKeyframe ( ) ) . pose
>4281	Identifier	pose
>4282	CallExpression	keyframe -> id ( next_keyframe_id_ ) . image ( m -> getKeyframe ( ) )
>4283	ArgumentList	m -> getKeyframe ( )
>4284	Argument	m -> getKeyframe ( )
>4285	CallExpression	m -> getKeyframe ( )
>4286	ArgumentList	 
>4287	Callee	m -> getKeyframe
>4288	PtrMemberAccess	m -> getKeyframe
>4289	Identifier	getKeyframe
>4290	Identifier	m
>4291	Callee	keyframe -> id ( next_keyframe_id_ ) . image
>4292	MemberAccess	keyframe -> id ( next_keyframe_id_ ) . image
>4293	Identifier	image
>4294	CallExpression	keyframe -> id ( next_keyframe_id_ )
>4295	ArgumentList	next_keyframe_id_
>4296	Argument	next_keyframe_id_
>4297	Identifier	next_keyframe_id_
>4298	Callee	keyframe -> id
>4299	PtrMemberAccess	keyframe -> id
>4300	Identifier	id
>4301	Identifier	keyframe
>4302	IdentifierDeclStatement	 
>4303	IdentifierDecl	keyframe ( new Keyframe ( ) )
>4304	UnaryExpression	new Keyframe ( )
>4305	Identifier	keyframe
>4306	IdentifierDeclType	KeyframePtr
>4307	IfStatement	if ( ! keyframes_ . empty ( ) )
>4308	ElseStatement	else
>4309	CompoundStatement	 
>4310	ExpressionStatement	 
>4311	CallExpression	kv -> setFixed ( true )
>4312	ArgumentList	true
>4313	Argument	true
>4314	Identifier	true
>4315	Callee	kv -> setFixed
>4316	PtrMemberAccess	kv -> setFixed
>4317	Identifier	setFixed
>4318	Identifier	kv
>4319	CompoundStatement	 
>4320	ExpressionStatement	 
>4321	CallExpression	e -> setLevel ( 0 )
>4322	ArgumentList	0
>4323	Argument	0
>4324	PrimaryExpression	0
>4325	Callee	e -> setLevel
>4326	PtrMemberAccess	e -> setLevel
>4327	Identifier	setLevel
>4328	Identifier	e
>4329	ExpressionStatement	 
>4330	CallExpression	e -> setId ( combine ( next_keyframe_id_ - 1 , next_keyframe_id_ ) )
>4331	ArgumentList	combine ( next_keyframe_id_ - 1 , next_keyframe_id_ )
>4332	Argument	combine ( next_keyframe_id_ - 1 , next_keyframe_id_ )
>4333	CallExpression	combine ( next_keyframe_id_ - 1 , next_keyframe_id_ )
>4334	ArgumentList	next_keyframe_id_ - 1
>4335	Argument	next_keyframe_id_
>4336	Identifier	next_keyframe_id_
>4337	Argument	next_keyframe_id_ - 1
>4338	AdditiveExpression	next_keyframe_id_ - 1
>4339	PrimaryExpression	1
>4340	Identifier	next_keyframe_id_
>4341	Callee	combine
>4342	Identifier	combine
>4343	Callee	e -> setId
>4344	PtrMemberAccess	e -> setId
>4345	Identifier	setId
>4346	Identifier	e
>4347	IdentifierDeclStatement	 
>4348	IdentifierDecl	* e = ( g2o 
>4349	AssignmentExpr	* e = ( g2o 
>4350	CastExpression	( g2o 
>4351	UnaryOp	* ke
>4352	Identifier	ke
>4353	UnaryOperator	*
>4354	CastTarget	g2o 
>4355	Identifier	e
>4356	Identifier	e
>4357	IdentifierDeclType	g2o 
>4358	ExpressionStatement	 
>4359	CallExpression	assert ( ke != kv -> edges ( ) . end ( ) )
>4360	ArgumentList	ke != kv -> edges ( ) . end ( )
>4361	Argument	ke != kv -> edges ( ) . end ( )
>4362	EqualityExpression	ke != kv -> edges ( ) . end ( )
>4363	CallExpression	kv -> edges ( ) . end ( )
>4364	ArgumentList	 
>4365	Callee	kv -> edges ( ) . end
>4366	MemberAccess	kv -> edges ( ) . end
>4367	Identifier	end
>4368	CallExpression	kv -> edges ( )
>4369	ArgumentList	 
>4370	Callee	kv -> edges
>4371	PtrMemberAccess	kv -> edges
>4372	Identifier	edges
>4373	Identifier	kv
>4374	Identifier	ke
>4375	Callee	assert
>4376	Identifier	assert
>4377	IdentifierDeclStatement	 
>4378	IdentifierDecl	ke = std 
>4379	AssignmentExpr	ke = std 
>4380	CallExpression	std 
>4381	ArgumentList	kv -> edges ( ) . begin ( )
>4382	Argument	FindEdge ( next_keyframe_id_ - 1 , next_keyframe_id_ )
>4383	CallExpression	FindEdge ( next_keyframe_id_ - 1 , next_keyframe_id_ )
>4384	ArgumentList	next_keyframe_id_ - 1
>4385	Argument	next_keyframe_id_
>4386	Identifier	next_keyframe_id_
>4387	Argument	next_keyframe_id_ - 1
>4388	AdditiveExpression	next_keyframe_id_ - 1
>4389	PrimaryExpression	1
>4390	Identifier	next_keyframe_id_
>4391	Callee	FindEdge
>4392	Identifier	FindEdge
>4393	Argument	kv -> edges ( ) . end ( )
>4394	CallExpression	kv -> edges ( ) . end ( )
>4395	ArgumentList	 
>4396	Callee	kv -> edges ( ) . end
>4397	MemberAccess	kv -> edges ( ) . end
>4398	Identifier	end
>4399	CallExpression	kv -> edges ( )
>4400	ArgumentList	 
>4401	Callee	kv -> edges
>4402	PtrMemberAccess	kv -> edges
>4403	Identifier	edges
>4404	Identifier	kv
>4405	Argument	kv -> edges ( ) . begin ( )
>4406	CallExpression	kv -> edges ( ) . begin ( )
>4407	ArgumentList	 
>4408	Callee	kv -> edges ( ) . begin
>4409	MemberAccess	kv -> edges ( ) . begin
>4410	Identifier	begin
>4411	CallExpression	kv -> edges ( )
>4412	ArgumentList	 
>4413	Callee	kv -> edges
>4414	PtrMemberAccess	kv -> edges
>4415	Identifier	edges
>4416	Identifier	kv
>4417	Callee	std 
>4418	Identifier	std 
>4419	Identifier	ke
>4420	Identifier	ke
>4421	IdentifierDeclType	g2o 
>4422	IdentifierDeclStatement	 
>4423	IdentifierDecl	* kv = ( g2o 
>4424	AssignmentExpr	* kv = ( g2o 
>4425	CastExpression	( g2o 
>4426	CallExpression	keyframegraph_ . vertex ( next_keyframe_id_ )
>4427	ArgumentList	next_keyframe_id_
>4428	Argument	next_keyframe_id_
>4429	Identifier	next_keyframe_id_
>4430	Callee	keyframegraph_ . vertex
>4431	MemberAccess	keyframegraph_ . vertex
>4432	Identifier	vertex
>4433	Identifier	keyframegraph_
>4434	CastTarget	g2o 
>4435	Identifier	kv
>4436	Identifier	kv
>4437	IdentifierDeclType	g2o 
>4438	Condition	 
>4439	UnaryOp	! keyframes_ . empty ( )
>4440	CallExpression	keyframes_ . empty ( )
>4441	ArgumentList	 
>4442	Callee	keyframes_ . empty
>4443	MemberAccess	keyframes_ . empty
>4444	Identifier	empty
>4445	Identifier	keyframes_
>4446	UnaryOperator	!
>4447	ExpressionStatement	 
>4448	CallExpression	assert ( keyframegraph_ . changeId ( kv , next_keyframe_id_ ) )
>4449	ArgumentList	keyframegraph_ . changeId ( kv , next_keyframe_id_ )
>4450	Argument	keyframegraph_ . changeId ( kv , next_keyframe_id_ )
>4451	CallExpression	keyframegraph_ . changeId ( kv , next_keyframe_id_ )
>4452	ArgumentList	kv
>4453	Argument	next_keyframe_id_
>4454	Identifier	next_keyframe_id_
>4455	Argument	kv
>4456	Identifier	kv
>4457	Callee	keyframegraph_ . changeId
>4458	MemberAccess	keyframegraph_ . changeId
>4459	Identifier	changeId
>4460	Identifier	keyframegraph_
>4461	Callee	assert
>4462	Identifier	assert
>4463	ExpressionStatement	 
>4464	CallExpression	assert ( kv != 0 )
>4465	ArgumentList	kv != 0
>4466	Argument	kv != 0
>4467	EqualityExpression	kv != 0
>4468	PrimaryExpression	0
>4469	Identifier	kv
>4470	Callee	assert
>4471	Identifier	assert
>4472	IdentifierDeclStatement	 
>4473	IdentifierDecl	* kv = ( g2o 
>4474	AssignmentExpr	* kv = ( g2o 
>4475	CastExpression	( g2o 
>4476	CallExpression	keyframegraph_ . vertex ( next_odometry_vertex_id_ )
>4477	ArgumentList	next_odometry_vertex_id_
>4478	Argument	next_odometry_vertex_id_
>4479	Identifier	next_odometry_vertex_id_
>4480	Callee	keyframegraph_ . vertex
>4481	MemberAccess	keyframegraph_ . vertex
>4482	Identifier	vertex
>4483	Identifier	keyframegraph_
>4484	CastTarget	g2o 
>4485	Identifier	kv
>4486	Identifier	kv
>4487	IdentifierDeclType	g2o 
>4488	ExpressionStatement	 
>4489	CallExpression	addGraph ( & g )
>4490	ArgumentList	& g
>4491	Argument	& g
>4492	UnaryOp	& g
>4493	Identifier	g
>4494	UnaryOperator	&
>4495	Callee	addGraph
>4496	Identifier	addGraph
>4497	ForStatement	for ( g2o 
>4498	CompoundStatement	 
>4499	ExpressionStatement	 
>4500	CallExpression	e -> setLevel ( cfg_ . OptimizationUseDenseGraph ? 0 
>4501	ArgumentList	cfg_ . OptimizationUseDenseGraph ? 0 
>4502	Argument	cfg_ . OptimizationUseDenseGraph ? 0 
>4503	ConditionalExpression	cfg_ . OptimizationUseDenseGraph ? 0 
>4504	PrimaryExpression	2
>4505	PrimaryExpression	0
>4506	Condition	cfg_ . OptimizationUseDenseGraph
>4507	MemberAccess	cfg_ . OptimizationUseDenseGraph
>4508	Identifier	OptimizationUseDenseGraph
>4509	Identifier	cfg_
>4510	Callee	e -> setLevel
>4511	PtrMemberAccess	e -> setLevel
>4512	Identifier	setLevel
>4513	Identifier	e
>4514	ExpressionStatement	 
>4515	CallExpression	e -> setId ( next_odometry_edge_id_ -- )
>4516	ArgumentList	next_odometry_edge_id_ --
>4517	Argument	next_odometry_edge_id_ --
>4518	IncDecOp	next_odometry_edge_id_ --
>4519	IncDec	--
>4520	Identifier	next_odometry_edge_id_
>4521	Callee	e -> setId
>4522	PtrMemberAccess	e -> setId
>4523	Identifier	setId
>4524	Identifier	e
>4525	IdentifierDeclStatement	 
>4526	IdentifierDecl	* e = ( g2o 
>4527	AssignmentExpr	* e = ( g2o 
>4528	CastExpression	( g2o 
>4529	UnaryOp	* e_it
>4530	Identifier	e_it
>4531	UnaryOperator	*
>4532	CastTarget	g2o 
>4533	Identifier	e
>4534	Identifier	e
>4535	IdentifierDeclType	g2o 
>4536	UnaryExpression	 
>4537	Identifier	e_it
>4538	IncDec	++
>4539	Condition	 
>4540	EqualityExpression	e_it != g . edges ( ) . end ( )
>4541	CallExpression	g . edges ( ) . end ( )
>4542	ArgumentList	 
>4543	Callee	g . edges ( ) . end
>4544	MemberAccess	g . edges ( ) . end
>4545	Identifier	end
>4546	CallExpression	g . edges ( )
>4547	ArgumentList	 
>4548	Callee	g . edges
>4549	MemberAccess	g . edges
>4550	Identifier	edges
>4551	Identifier	g
>4552	Identifier	e_it
>4553	ForInit	 
>4554	IdentifierDeclStatement	g2o 
>4555	IdentifierDecl	e_it = g . edges ( ) . begin ( )
>4556	AssignmentExpr	e_it = g . edges ( ) . begin ( )
>4557	CallExpression	g . edges ( ) . begin ( )
>4558	ArgumentList	 
>4559	Callee	g . edges ( ) . begin
>4560	MemberAccess	g . edges ( ) . begin
>4561	Identifier	begin
>4562	CallExpression	g . edges ( )
>4563	ArgumentList	 
>4564	Callee	g . edges
>4565	MemberAccess	g . edges
>4566	Identifier	edges
>4567	Identifier	g
>4568	Identifier	e_it
>4569	Identifier	e_it
>4570	IdentifierDeclType	g2o 
>4571	ForStatement	for ( g2o 
>4572	CompoundStatement	 
>4573	ExpressionStatement	 
>4574	CallExpression	g . changeId ( v_it -> second , next_odometry_vertex_id_ - ( v_it -> second -> id ( ) - 1 ) )
>4575	ArgumentList	v_it -> second
>4576	Argument	next_odometry_vertex_id_ - ( v_it -> second -> id ( ) - 1 )
>4577	AdditiveExpression	next_odometry_vertex_id_ - ( v_it -> second -> id ( ) - 1 )
>4578	AdditiveExpression	v_it -> second -> id ( ) - 1
>4579	PrimaryExpression	1
>4580	CallExpression	v_it -> second -> id ( )
>4581	ArgumentList	 
>4582	Callee	v_it -> second -> id
>4583	PtrMemberAccess	v_it -> second -> id
>4584	Identifier	id
>4585	PtrMemberAccess	v_it -> second
>4586	Identifier	second
>4587	Identifier	v_it
>4588	Identifier	next_odometry_vertex_id_
>4589	Argument	v_it -> second
>4590	PtrMemberAccess	v_it -> second
>4591	Identifier	second
>4592	Identifier	v_it
>4593	Callee	g . changeId
>4594	MemberAccess	g . changeId
>4595	Identifier	changeId
>4596	Identifier	g
>4597	UnaryExpression	 
>4598	Identifier	v_it
>4599	IncDec	++
>4600	Condition	 
>4601	EqualityExpression	v_it != vertices . end ( )
>4602	CallExpression	vertices . end ( )
>4603	ArgumentList	 
>4604	Callee	vertices . end
>4605	MemberAccess	vertices . end
>4606	Identifier	end
>4607	Identifier	vertices
>4608	Identifier	v_it
>4609	ForInit	 
>4610	IdentifierDeclStatement	g2o 
>4611	IdentifierDecl	v_it = vertices . begin ( )
>4612	AssignmentExpr	v_it = vertices . begin ( )
>4613	CallExpression	vertices . begin ( )
>4614	ArgumentList	 
>4615	Callee	vertices . begin
>4616	MemberAccess	vertices . begin
>4617	Identifier	begin
>4618	Identifier	vertices
>4619	Identifier	v_it
>4620	Identifier	v_it
>4621	IdentifierDeclType	g2o 
>4622	IdentifierDeclStatement	 
>4623	IdentifierDecl	vertices = g . vertices ( )
>4624	AssignmentExpr	vertices = g . vertices ( )
>4625	CallExpression	g . vertices ( )
>4626	ArgumentList	 
>4627	Callee	g . vertices
>4628	MemberAccess	g . vertices
>4629	Identifier	vertices
>4630	Identifier	g
>4631	Identifier	vertices
>4632	Identifier	vertices
>4633	IdentifierDeclType	g2o 
>4634	IdentifierDeclStatement	 
>4635	IdentifierDecl	max_id = g . vertices ( ) . size ( )
>4636	AssignmentExpr	max_id = g . vertices ( ) . size ( )
>4637	CallExpression	g . vertices ( ) . size ( )
>4638	ArgumentList	 
>4639	Callee	g . vertices ( ) . size
>4640	MemberAccess	g . vertices ( ) . size
>4641	Identifier	size
>4642	CallExpression	g . vertices ( )
>4643	ArgumentList	 
>4644	Callee	g . vertices
>4645	MemberAccess	g . vertices
>4646	Identifier	vertices
>4647	Identifier	g
>4648	Identifier	max_id
>4649	Identifier	max_id
>4650	IdentifierDeclType	int
>4651	IdentifierDeclStatement	 
>4652	IdentifierDecl	& g = m -> getGraph ( )
>4653	AssignmentExpr	& g = m -> getGraph ( )
>4654	CallExpression	m -> getGraph ( )
>4655	ArgumentList	 
>4656	Callee	m -> getGraph
>4657	PtrMemberAccess	m -> getGraph
>4658	Identifier	getGraph
>4659	Identifier	m
>4660	Identifier	g
>4661	Identifier	g
>4662	IdentifierDeclType	g2o 
>4663	ExpressionStatement	 
>4664	CallExpression	m -> optimize ( )
>4665	ArgumentList	 
>4666	Callee	m -> optimize
>4667	PtrMemberAccess	m -> optimize
>4668	Identifier	optimize
>4669	Identifier	m
>4670	IfStatement	if ( ! keyframes_ . empty ( ) )
>4671	CompoundStatement	 
>4672	ExpressionStatement	 
>4673	CallExpression	m -> setKeyframePose ( toAffine ( last_kv -> estimate ( ) * e_se3 -> measurement ( ) ) )
>4674	ArgumentList	toAffine ( last_kv -> estimate ( ) * e_se3 -> measurement ( ) )
>4675	Argument	toAffine ( last_kv -> estimate ( ) * e_se3 -> measurement ( ) )
>4676	CallExpression	toAffine ( last_kv -> estimate ( ) * e_se3 -> measurement ( ) )
>4677	ArgumentList	last_kv -> estimate ( ) * e_se3 -> measurement ( )
>4678	Argument	last_kv -> estimate ( ) * e_se3 -> measurement ( )
>4679	MultiplicativeExpression	last_kv -> estimate ( ) * e_se3 -> measurement ( )
>4680	CallExpression	e_se3 -> measurement ( )
>4681	ArgumentList	 
>4682	Callee	e_se3 -> measurement
>4683	PtrMemberAccess	e_se3 -> measurement
>4684	Identifier	measurement
>4685	Identifier	e_se3
>4686	CallExpression	last_kv -> estimate ( )
>4687	ArgumentList	 
>4688	Callee	last_kv -> estimate
>4689	PtrMemberAccess	last_kv -> estimate
>4690	Identifier	estimate
>4691	Identifier	last_kv
>4692	Callee	toAffine
>4693	Identifier	toAffine
>4694	Callee	m -> setKeyframePose
>4695	PtrMemberAccess	m -> setKeyframePose
>4696	Identifier	setKeyframePose
>4697	Identifier	m
>4698	IdentifierDeclStatement	 
>4699	IdentifierDecl	* e_se3 = ( g2o 
>4700	AssignmentExpr	* e_se3 = ( g2o 
>4701	CastExpression	( g2o 
>4702	UnaryOp	* e
>4703	Identifier	e
>4704	UnaryOperator	*
>4705	CastTarget	g2o 
>4706	Identifier	e_se3
>4707	Identifier	e_se3
>4708	IdentifierDeclType	g2o 
>4709	ExpressionStatement	 
>4710	CallExpression	assert ( e != last_kv -> edges ( ) . end ( ) )
>4711	ArgumentList	e != last_kv -> edges ( ) . end ( )
>4712	Argument	e != last_kv -> edges ( ) . end ( )
>4713	EqualityExpression	e != last_kv -> edges ( ) . end ( )
>4714	CallExpression	last_kv -> edges ( ) . end ( )
>4715	ArgumentList	 
>4716	Callee	last_kv -> edges ( ) . end
>4717	MemberAccess	last_kv -> edges ( ) . end
>4718	Identifier	end
>4719	CallExpression	last_kv -> edges ( )
>4720	ArgumentList	 
>4721	Callee	last_kv -> edges
>4722	PtrMemberAccess	last_kv -> edges
>4723	Identifier	edges
>4724	Identifier	last_kv
>4725	Identifier	e
>4726	Callee	assert
>4727	Identifier	assert
>4728	IdentifierDeclStatement	 
>4729	IdentifierDecl	e = std 
>4730	AssignmentExpr	e = std 
>4731	CallExpression	std 
>4732	ArgumentList	last_kv -> edges ( ) . begin ( )
>4733	Argument	FindEdge ( next_keyframe_id_ - 1 , next_odometry_vertex_id_ )
>4734	CallExpression	FindEdge ( next_keyframe_id_ - 1 , next_odometry_vertex_id_ )
>4735	ArgumentList	next_keyframe_id_ - 1
>4736	Argument	next_odometry_vertex_id_
>4737	Identifier	next_odometry_vertex_id_
>4738	Argument	next_keyframe_id_ - 1
>4739	AdditiveExpression	next_keyframe_id_ - 1
>4740	PrimaryExpression	1
>4741	Identifier	next_keyframe_id_
>4742	Callee	FindEdge
>4743	Identifier	FindEdge
>4744	Argument	last_kv -> edges ( ) . end ( )
>4745	CallExpression	last_kv -> edges ( ) . end ( )
>4746	ArgumentList	 
>4747	Callee	last_kv -> edges ( ) . end
>4748	MemberAccess	last_kv -> edges ( ) . end
>4749	Identifier	end
>4750	CallExpression	last_kv -> edges ( )
>4751	ArgumentList	 
>4752	Callee	last_kv -> edges
>4753	PtrMemberAccess	last_kv -> edges
>4754	Identifier	edges
>4755	Identifier	last_kv
>4756	Argument	last_kv -> edges ( ) . begin ( )
>4757	CallExpression	last_kv -> edges ( ) . begin ( )
>4758	ArgumentList	 
>4759	Callee	last_kv -> edges ( ) . begin
>4760	MemberAccess	last_kv -> edges ( ) . begin
>4761	Identifier	begin
>4762	CallExpression	last_kv -> edges ( )
>4763	ArgumentList	 
>4764	Callee	last_kv -> edges
>4765	PtrMemberAccess	last_kv -> edges
>4766	Identifier	edges
>4767	Identifier	last_kv
>4768	Callee	std 
>4769	Identifier	std 
>4770	Identifier	e
>4771	Identifier	e
>4772	IdentifierDeclType	g2o 
>4773	IdentifierDeclStatement	 
>4774	IdentifierDecl	* last_kv = ( g2o 
>4775	AssignmentExpr	* last_kv = ( g2o 
>4776	CastExpression	( g2o 
>4777	CallExpression	keyframegraph_ . vertex ( next_keyframe_id_ - 1 )
>4778	ArgumentList	next_keyframe_id_ - 1
>4779	Argument	next_keyframe_id_ - 1
>4780	AdditiveExpression	next_keyframe_id_ - 1
>4781	PrimaryExpression	1
>4782	Identifier	next_keyframe_id_
>4783	Callee	keyframegraph_ . vertex
>4784	MemberAccess	keyframegraph_ . vertex
>4785	Identifier	vertex
>4786	Identifier	keyframegraph_
>4787	CastTarget	g2o 
>4788	Identifier	last_kv
>4789	Identifier	last_kv
>4790	IdentifierDeclType	g2o 
>4791	Condition	 
>4792	UnaryOp	! keyframes_ . empty ( )
>4793	CallExpression	keyframes_ . empty ( )
>4794	ArgumentList	 
>4795	Callee	keyframes_ . empty
>4796	MemberAccess	keyframes_ . empty
>4797	Identifier	empty
>4798	Identifier	keyframes_
>4799	UnaryOperator	!
>4867	FunctionDef	configureValidationTracking (const dvo 
>4868	ParameterList	const dvo 
>4869	Parameter	 
>4870	Identifier	cfg
>4871	ParameterType	const dvo 
>4872	ReturnType	void
>4873	CompoundStatement	 
>4874	ExpressionStatement	 
>4875	AssignmentExpr	validation_tracker_cfg_ . DepthDerivativeThreshold = cfg . DepthDerivativeThreshold
>4876	MemberAccess	cfg . DepthDerivativeThreshold
>4877	Identifier	DepthDerivativeThreshold
>4878	Identifier	cfg
>4879	MemberAccess	validation_tracker_cfg_ . DepthDerivativeThreshold
>4880	Identifier	DepthDerivativeThreshold
>4881	Identifier	validation_tracker_cfg_
>4882	ExpressionStatement	 
>4883	AssignmentExpr	validation_tracker_cfg_ . IntensityDerivativeThreshold = cfg . IntensityDerivativeThreshold
>4884	MemberAccess	cfg . IntensityDerivativeThreshold
>4885	Identifier	IntensityDerivativeThreshold
>4886	Identifier	cfg
>4887	MemberAccess	validation_tracker_cfg_ . IntensityDerivativeThreshold
>4888	Identifier	IntensityDerivativeThreshold
>4889	Identifier	validation_tracker_cfg_
>4890	ExpressionStatement	 
>4891	AssignmentExpr	validation_tracker_cfg_ . Mu = cfg . Mu
>4892	MemberAccess	cfg . Mu
>4893	Identifier	Mu
>4894	Identifier	cfg
>4895	MemberAccess	validation_tracker_cfg_ . Mu
>4896	Identifier	Mu
>4897	Identifier	validation_tracker_cfg_
>4898	ExpressionStatement	 
>4899	AssignmentExpr	validation_tracker_cfg_ . UseInitialEstimate = true
>4900	Identifier	true
>4901	MemberAccess	validation_tracker_cfg_ . UseInitialEstimate
>4902	Identifier	UseInitialEstimate
>4903	Identifier	validation_tracker_cfg_
>4904	ExpressionStatement	 
>4905	AssignmentExpr	validation_tracker_cfg_ . Precision = cfg . Precision
>4906	MemberAccess	cfg . Precision
>4907	Identifier	Precision
>4908	Identifier	cfg
>4909	MemberAccess	validation_tracker_cfg_ . Precision
>4910	Identifier	Precision
>4911	Identifier	validation_tracker_cfg_
>4912	ExpressionStatement	 
>4913	AssignmentExpr	validation_tracker_cfg_ . LastLevel = 3
>4914	PrimaryExpression	3
>4915	MemberAccess	validation_tracker_cfg_ . LastLevel
>4916	Identifier	LastLevel
>4917	Identifier	validation_tracker_cfg_
>4918	ExpressionStatement	 
>4919	AssignmentExpr	validation_tracker_cfg_ . FirstLevel = 3
>4920	PrimaryExpression	3
>4921	MemberAccess	validation_tracker_cfg_ . FirstLevel
>4922	Identifier	FirstLevel
>4923	Identifier	validation_tracker_cfg_
>4924	ExpressionStatement	 
>4925	AssignmentExpr	validation_tracker_cfg_ = dvo 
>4926	CallExpression	dvo 
>4927	ArgumentList	 
>4928	Callee	dvo 
>4929	Identifier	dvo 
>4930	Identifier	validation_tracker_cfg_
>4931	ExpressionStatement	 
>4932	AssignmentExpr	constraint_tracker_cfg_ . DepthDerivativeThreshold = cfg . DepthDerivativeThreshold
>4933	MemberAccess	cfg . DepthDerivativeThreshold
>4934	Identifier	DepthDerivativeThreshold
>4935	Identifier	cfg
>4936	MemberAccess	constraint_tracker_cfg_ . DepthDerivativeThreshold
>4937	Identifier	DepthDerivativeThreshold
>4938	Identifier	constraint_tracker_cfg_
>4939	ExpressionStatement	 
>4940	AssignmentExpr	constraint_tracker_cfg_ . IntensityDerivativeThreshold = cfg . IntensityDerivativeThreshold
>4941	MemberAccess	cfg . IntensityDerivativeThreshold
>4942	Identifier	IntensityDerivativeThreshold
>4943	Identifier	cfg
>4944	MemberAccess	constraint_tracker_cfg_ . IntensityDerivativeThreshold
>4945	Identifier	IntensityDerivativeThreshold
>4946	Identifier	constraint_tracker_cfg_
>4947	ExpressionStatement	 
>4948	AssignmentExpr	constraint_tracker_cfg_ . Mu = cfg . Mu
>4949	MemberAccess	cfg . Mu
>4950	Identifier	Mu
>4951	Identifier	cfg
>4952	MemberAccess	constraint_tracker_cfg_ . Mu
>4953	Identifier	Mu
>4954	Identifier	constraint_tracker_cfg_
>4955	ExpressionStatement	 
>4956	AssignmentExpr	constraint_tracker_cfg_ . UseInitialEstimate = true
>4957	Identifier	true
>4958	MemberAccess	constraint_tracker_cfg_ . UseInitialEstimate
>4959	Identifier	UseInitialEstimate
>4960	Identifier	constraint_tracker_cfg_
>4961	ExpressionStatement	 
>4962	AssignmentExpr	constraint_tracker_cfg_ . Precision = cfg . Precision
>4963	MemberAccess	cfg . Precision
>4964	Identifier	Precision
>4965	Identifier	cfg
>4966	MemberAccess	constraint_tracker_cfg_ . Precision
>4967	Identifier	Precision
>4968	Identifier	constraint_tracker_cfg_
>4969	ExpressionStatement	 
>4970	AssignmentExpr	constraint_tracker_cfg_ . LastLevel = 1
>4971	PrimaryExpression	1
>4972	MemberAccess	constraint_tracker_cfg_ . LastLevel
>4973	Identifier	LastLevel
>4974	Identifier	constraint_tracker_cfg_
>4975	ExpressionStatement	 
>4976	AssignmentExpr	constraint_tracker_cfg_ . FirstLevel = 3
>4977	PrimaryExpression	3
>4978	MemberAccess	constraint_tracker_cfg_ . FirstLevel
>4979	Identifier	FirstLevel
>4980	Identifier	constraint_tracker_cfg_
>4981	ExpressionStatement	 
>4982	AssignmentExpr	constraint_tracker_cfg_ = dvo 
>4983	CallExpression	dvo 
>4984	ArgumentList	 
>4985	Callee	dvo 
>4986	Identifier	dvo 
>4987	Identifier	constraint_tracker_cfg_
>5014	FunctionDef	createRobustKernel ()
>5015	ParameterList	 
>5016	ReturnType	g2o 
>5017	CompoundStatement	 
>5018	IfStatement	if ( cfg_ . UseRobustKernel )
>5019	ElseStatement	else
>5020	CompoundStatement	 
>5021	ReturnStatement	 
>5022	PrimaryExpression	0
>5023	CompoundStatement	 
>5024	ReturnStatement	 
>5025	Identifier	k
>5026	ExpressionStatement	 
>5027	CallExpression	k -> setDelta ( 5 )
>5028	ArgumentList	5
>5029	Argument	5
>5030	PrimaryExpression	5
>5031	Callee	k -> setDelta
>5032	PtrMemberAccess	k -> setDelta
>5033	Identifier	setDelta
>5034	Identifier	k
>5035	IdentifierDeclStatement	 
>5036	IdentifierDecl	* k = new g2o 
>5037	AssignmentExpr	* k = new g2o 
>5038	UnaryExpression	new g2o 
>5039	Identifier	k
>5040	Identifier	k
>5041	IdentifierDeclType	g2o 
>5042	Condition	 
>5043	MemberAccess	cfg_ . UseRobustKernel
>5044	Identifier	UseRobustKernel
>5045	Identifier	cfg_
>5085	FunctionDef	KeyframeGraph 
>5086	ParameterList	 
>5087	CompoundStatement	 
>5088	ExpressionStatement	 
>5089	AssignmentExpr	impl_ -> me_ = this
>5090	Identifier	this
>5091	PtrMemberAccess	impl_ -> me_
>5092	Identifier	me_
>5093	Identifier	impl_
>5101	FunctionDef	KeyframeGraph 
>5102	ParameterList	 
>5103	CompoundStatement	 
>5107	FunctionDef	KeyframeGraph 
>5108	ParameterList	 
>5109	ReturnType	const dvo_slam 
>5110	CompoundStatement	 
>5111	ReturnStatement	 
>5112	PtrMemberAccess	impl_ -> cfg_
>5113	Identifier	cfg_
>5114	Identifier	impl_
>5121	FunctionDef	KeyframeGraph 
>5122	ParameterList	const KeyframeGraphConfig & config
>5123	Parameter	 
>5124	Identifier	config
>5125	ParameterType	const KeyframeGraphConfig &
>5126	ReturnType	void
>5127	CompoundStatement	 
>5128	ExpressionStatement	 
>5129	CallExpression	impl_ -> configure ( config )
>5130	ArgumentList	config
>5131	Argument	config
>5132	Identifier	config
>5133	Callee	impl_ -> configure
>5134	PtrMemberAccess	impl_ -> configure
>5135	Identifier	configure
>5136	Identifier	impl_
>5142	FunctionDef	KeyframeGraph 
>5143	ParameterList	const dvo 
>5144	Parameter	 
>5145	Identifier	cfg
>5146	ParameterType	const dvo 
>5147	ReturnType	void
>5148	CompoundStatement	 
>5149	ExpressionStatement	 
>5150	CallExpression	impl_ -> configureValidationTracking ( cfg )
>5151	ArgumentList	cfg
>5152	Argument	cfg
>5153	Identifier	cfg
>5154	Callee	impl_ -> configureValidationTracking
>5155	PtrMemberAccess	impl_ -> configureValidationTracking
>5156	Identifier	configureValidationTracking
>5157	Identifier	impl_
>5163	FunctionDef	KeyframeGraph 
>5164	ParameterList	const LocalMap 
>5165	Parameter	 
>5166	Identifier	keyframe
>5167	ParameterType	const LocalMap 
>5168	ReturnType	void
>5169	CompoundStatement	 
>5170	ExpressionStatement	 
>5171	CallExpression	impl_ -> add ( keyframe )
>5172	ArgumentList	keyframe
>5173	Argument	keyframe
>5174	Identifier	keyframe
>5175	Callee	impl_ -> add
>5176	PtrMemberAccess	impl_ -> add
>5177	Identifier	add
>5178	Identifier	impl_
>5184	FunctionDef	KeyframeGraph 
>5185	ParameterList	 
>5186	ReturnType	void
>5187	CompoundStatement	 
>5188	ExpressionStatement	 
>5189	CallExpression	impl_ -> finalOptimization ( )
>5190	ArgumentList	 
>5191	Callee	impl_ -> finalOptimization
>5192	PtrMemberAccess	impl_ -> finalOptimization
>5193	Identifier	finalOptimization
>5194	Identifier	impl_
>5199	FunctionDef	KeyframeGraph 
>5200	ParameterList	const KeyframeGraph 
>5201	Parameter	 
>5202	Identifier	callback
>5203	ParameterType	const KeyframeGraph 
>5204	ReturnType	void
>5205	CompoundStatement	 
>5206	ExpressionStatement	 
>5207	CallExpression	impl_ -> map_changed_ . connect ( callback )
>5208	ArgumentList	callback
>5209	Argument	callback
>5210	Identifier	callback
>5211	Callee	impl_ -> map_changed_ . connect
>5212	MemberAccess	impl_ -> map_changed_ . connect
>5213	Identifier	connect
>5214	PtrMemberAccess	impl_ -> map_changed_
>5215	Identifier	map_changed_
>5216	Identifier	impl_
>5224	FunctionDef	KeyframeGraph 
>5225	ParameterList	int edge_id , bool use_measurement
>5226	Parameter	 
>5227	Identifier	use_measurement
>5228	ParameterType	bool
>5229	Parameter	 
>5230	Identifier	edge_id
>5231	ParameterType	int
>5232	ReturnType	cv 
>5233	CompoundStatement	 
>5234	ReturnStatement	 
>5235	CallExpression	impl_ -> computeIntensityErrorImage ( edge_id , use_measurement )
>5236	ArgumentList	edge_id
>5237	Argument	use_measurement
>5238	Identifier	use_measurement
>5239	Argument	edge_id
>5240	Identifier	edge_id
>5241	Callee	impl_ -> computeIntensityErrorImage
>5242	PtrMemberAccess	impl_ -> computeIntensityErrorImage
>5243	Identifier	computeIntensityErrorImage
>5244	Identifier	impl_
>5253	FunctionDef	KeyframeGraph 
>5254	ParameterList	int keyframe1 , int keyframe2
>5255	Parameter	 
>5256	Identifier	keyframe2
>5257	ParameterType	int
>5258	Parameter	 
>5259	Identifier	keyframe1
>5260	ParameterType	int
>5261	ReturnType	void
>5262	CompoundStatement	 
>5263	ExpressionStatement	 
>5264	CallExpression	impl_ -> debugLoopClosureConstraint ( keyframe1 , keyframe2 )
>5265	ArgumentList	keyframe1
>5266	Argument	keyframe2
>5267	Identifier	keyframe2
>5268	Argument	keyframe1
>5269	Identifier	keyframe1
>5270	Callee	impl_ -> debugLoopClosureConstraint
>5271	PtrMemberAccess	impl_ -> debugLoopClosureConstraint
>5272	Identifier	debugLoopClosureConstraint
>5273	Identifier	impl_
>5280	FunctionDef	KeyframeGraph 
>5281	ParameterList	 
>5282	ReturnType	const g2o 
>5283	CompoundStatement	 
>5284	ReturnStatement	 
>5285	PtrMemberAccess	impl_ -> keyframegraph_
>5286	Identifier	keyframegraph_
>5287	Identifier	impl_
>5294	FunctionDef	KeyframeGraph 
>5295	ParameterList	 
>5296	ReturnType	const KeyframeVector &
>5297	CompoundStatement	 
>5298	ReturnStatement	 
>5299	PtrMemberAccess	impl_ -> keyframes_
>5300	Identifier	keyframes_
>5301	Identifier	impl_
<4=9,5
<5=6
<6=8,7
<14=20,19,15
<15=16
<16=18,17
<20=21
<21=22
<22=24,23
<24=26,25
<26=27
<27=29,28
<39=45,44,40
<40=41
<41=43,42
<45=62,48,46
<46=47
<48=49
<49=56,50
<50=52,51
<52=53
<53=55,54
<56=58,57
<58=59
<59=61,60
<62=63
<63=71,70,64
<64=66,65
<66=67
<67=69,68
<79=85,84,80
<80=81
<81=83,82
<85=102,88,86
<86=87
<88=89
<89=96,90
<90=92,91
<92=93
<93=95,94
<96=98,97
<98=99
<99=101,100
<102=103
<103=111,110,104
<104=106,105
<106=107
<107=109,108
<119=128,127,120
<120=124,121
<121=123,122
<124=126,125
<128=159,135,129
<129=130
<130=132,131
<132=134,133
<135=155,146,136
<136=137
<137=142,138
<138=139
<139=141,140
<142=143
<143=145,144
<146=151,147
<147=148
<148=150,149
<151=152
<152=154,153
<155=156
<156=158,157
<159=163,160
<160=162,161
<163=165,164
<174=176,175
<176=193,184,177
<177=178
<178=182,179
<179=180
<180=181
<182=183
<184=185
<185=189,186
<186=187
<187=188
<189=190
<190=192,191
<193=194
<194=198,195
<195=196
<196=197
<198=199
<199=201,200
<208=210,209
<210=230,218,211
<211=212
<212=214,213
<214=215
<215=217,216
<218=219
<219=226,220
<220=221
<221=222
<222=224,223
<224=225
<226=227
<227=229,228
<230=231
<231=233,232
<242=248,247,243
<243=244
<244=246,245
<248=260,249
<249=250
<250=256,251
<251=252
<252=253
<253=255,254
<256=257
<257=259,258
<260=261
<261=263,262
<271=277,276,272
<272=273
<273=275,274
<277=278
<278=303,293,279
<279=280
<280=288,281
<281=282
<282=286,283
<283=284
<284=285
<286=287
<288=289
<289=292,291,290
<293=294
<294=295
<295=299,296
<296=297
<297=298
<299=300
<300=302,301
<303=304
<304=306,305
<315=321,320,316
<316=317
<317=319,318
<321=495,494,493,492,491,490,489,488,487,486,485,476,324,322
<322=323
<324=458,444,441,325
<325=440,439,438,437,436,435,434,433,432,431,430,395,394,393,392,391,390,389,388,387,386,385,384,383,382,381,380,379,378,377,376,375,326
<326=371,333,327
<327=328
<328=329
<329=330
<330=332,331
<333=370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,347,346,345,344,343,342,341,340,339,334
<334=335
<335=336
<336=338,337
<371=372
<372=374,373
<395=396
<396=417,407,397
<397=401,398
<398=399
<399=400
<401=402
<402=404,403
<404=406,405
<407=411,408
<408=409
<409=410
<411=412
<412=414,413
<414=416,415
<417=418
<418=420,419
<420=424,421
<421=422
<422=423
<424=425
<425=427,426
<427=429,428
<441=443,442
<444=445
<445=457,446
<446=448,447
<448=449
<449=451,450
<451=453,452
<453=454
<454=456,455
<458=459
<459=460
<460=475,474,461
<461=473,462
<462=464,463
<464=465
<465=467,466
<467=469,468
<469=470
<470=472,471
<476=477
<477=479,478
<479=481,480
<481=482
<482=484,483
<495=502,496
<496=501,500,497
<497=499,498
<502=507,506,503
<503=505,504
<523=532,531,524
<524=528,525
<525=527,526
<528=530,529
<532=589,535,533
<533=534
<535=571,553,550,536
<536=537
<537=538
<538=549,539
<539=541,540
<541=543,542
<543=544
<544=546,545
<546=548,547
<550=552,551
<553=554
<554=558,555
<555=557,556
<558=570,559
<559=561,560
<561=562
<562=564,563
<564=566,565
<566=567
<567=569,568
<571=572
<572=573
<573=588,587,574
<574=586,575
<575=577,576
<577=578
<578=580,579
<580=582,581
<582=583
<583=585,584
<589=590
<590=595,594,591
<591=593,592
<611=614,613,612
<614=1115,1111,1082,1078,1065,827,758,752,743,728,662,656,651,642,628,615
<615=616
<616=627,617
<617=621,618
<618=620,619
<621=623,622
<623=624
<624=626,625
<628=629
<629=640,630
<630=631
<631=632
<632=639,633
<633=635,634
<635=636
<636=638,637
<640=641
<642=643
<643=649,644
<644=645
<645=646
<646=648,647
<649=650
<651=652
<652=654,653
<654=655
<656=657
<657=661,658
<658=660,659
<662=720,708,705,663
<663=696,681,664
<664=677,665
<665=666
<666=667
<667=676,668
<668=674,669
<669=670
<670=671
<671=673,672
<674=675
<677=678
<678=680,679
<681=682
<682=695,683
<683=691,684
<684=685
<685=686
<686=688,687
<688=690,689
<691=692
<692=694,693
<696=697
<697=701,698
<698=699
<699=700
<701=702
<702=704,703
<705=707,706
<708=709
<709=717,710
<710=714,711
<711=713,712
<714=716,715
<717=719,718
<720=721
<721=722
<722=727,726,723
<723=725,724
<728=737,729
<729=736,735,730
<730=734,731
<731=733,732
<737=742,741,738
<738=740,739
<743=744
<744=748,745
<745=746
<746=747
<748=749
<749=751,750
<752=753
<753=757,754
<754=756,755
<758=817,759
<759=760
<760=799,785,782,761
<761=771,762
<762=763
<763=767,764
<764=765
<765=766
<767=768
<768=770,769
<771=772
<772=781,780,773
<773=779,774
<774=778,775
<775=777,776
<782=784,783
<785=786
<786=798,787
<787=789,788
<789=790
<790=792,791
<792=794,793
<794=795
<795=797,796
<799=800
<800=801
<801=816,815,802
<802=814,803
<803=805,804
<805=806
<806=808,807
<808=810,809
<810=811
<811=813,812
<817=818
<818=824,819
<819=823,820
<820=822,821
<824=826,825
<827=1052,1043,1040,828
<828=1036,1029,1014,862,849,842,829
<829=830
<830=841,831
<831=835,832
<832=834,833
<835=837,836
<837=838
<838=840,839
<842=843
<843=847,844
<844=845
<845=846
<847=848
<849=850
<850=860,851
<851=858,854,852
<852=853
<854=855
<855=857,856
<858=859
<860=861
<862=1001,992,989,863
<863=961,931,881,864
<864=877,865
<865=866
<866=867
<867=873,868
<868=869
<869=870
<870=872,871
<873=874
<874=876,875
<877=878
<878=880,879
<881=882
<882=930,883
<883=929,884
<884=907,885
<885=905,886
<886=889,887
<887=888
<889=890
<890=901,891
<891=892
<892=893
<893=895,894
<895=896
<896=898,897
<898=900,899
<901=902
<902=904,903
<905=906
<907=927,908
<908=911,909
<909=910
<911=912
<912=923,913
<913=914
<914=915
<915=917,916
<917=918
<918=920,919
<920=922,921
<923=924
<924=926,925
<927=928
<931=932
<932=960,959,933
<933=958,934
<934=936,935
<936=956,937
<937=938
<938=939
<939=948,940
<940=942,941
<942=943
<943=945,944
<945=947,946
<948=950,949
<950=951
<951=953,952
<953=955,954
<956=957
<961=962
<962=988,987,963
<963=986,964
<964=984,965
<965=975,966
<966=967
<967=969,968
<969=970
<970=972,971
<972=974,973
<975=976
<976=978,977
<978=979
<979=981,980
<981=983,982
<984=985
<989=991,990
<992=993
<993=1000,994
<994=996,995
<996=997
<997=999,998
<1001=1002
<1002=1003
<1003=1013,1012,1004
<1004=1011,1005
<1005=1007,1006
<1007=1008
<1008=1010,1009
<1014=1015
<1015=1025,1016
<1016=1023,1019,1017
<1017=1018
<1019=1020
<1020=1022,1021
<1023=1024
<1025=1026
<1026=1028,1027
<1029=1033,1030
<1030=1032,1031
<1033=1035,1034
<1036=1037
<1037=1039,1038
<1040=1042,1041
<1043=1044
<1044=1051,1045
<1045=1047,1046
<1047=1048
<1048=1050,1049
<1052=1053
<1053=1054
<1054=1064,1063,1055
<1055=1062,1056
<1056=1058,1057
<1058=1059
<1059=1061,1060
<1065=1066
<1066=1077,1067
<1067=1071,1068
<1068=1070,1069
<1071=1073,1072
<1073=1074
<1074=1076,1075
<1078=1079
<1079=1081,1080
<1082=1100,1083
<1083=1096,1084
<1084=1085
<1085=1094,1086
<1086=1087
<1087=1088
<1088=1092,1089
<1089=1090
<1090=1091
<1092=1093
<1094=1095
<1096=1097
<1097=1099,1098
<1100=1101
<1101=1110,1102
<1102=1106,1103
<1103=1104
<1104=1105
<1106=1107
<1107=1109,1108
<1111=1112
<1112=1114,1113
<1115=1116
<1116=1118,1117
<1172=1175,1174,1173
<1175=1176
<1176=1449,1438,1435,1177
<1177=1431,1410,1387,1378,1369,1360,1351,1207,1198,1187,1178
<1178=1179
<1179=1183,1180
<1180=1181
<1181=1182
<1183=1184
<1184=1186,1185
<1187=1188
<1188=1194,1189
<1189=1192,1190
<1190=1191
<1192=1193
<1194=1195
<1195=1197,1196
<1198=1199
<1199=1203,1200
<1200=1201
<1201=1202
<1203=1204
<1204=1206,1205
<1207=1333,1319,1316,1208
<1208=1309,1271,1233,1209
<1209=1220,1210
<1210=1211
<1211=1212
<1212=1216,1213
<1213=1214
<1214=1215
<1216=1217
<1217=1219,1218
<1220=1221
<1221=1230,1222
<1222=1224,1223
<1224=1226,1225
<1226=1227
<1227=1229,1228
<1230=1232,1231
<1233=1248,1234
<1234=1235
<1235=1236
<1236=1247,1237
<1237=1241,1238
<1238=1239
<1239=1240
<1241=1242
<1242=1244,1243
<1244=1246,1245
<1248=1249
<1249=1256,1250
<1250=1252,1251
<1252=1253
<1253=1255,1254
<1256=1258,1257
<1258=1259
<1259=1261,1260
<1261=1265,1262
<1262=1263
<1263=1264
<1265=1266
<1266=1268,1267
<1268=1270,1269
<1271=1286,1272
<1272=1273
<1273=1274
<1274=1285,1275
<1275=1279,1276
<1276=1277
<1277=1278
<1279=1280
<1280=1282,1281
<1282=1284,1283
<1286=1287
<1287=1294,1288
<1288=1290,1289
<1290=1291
<1291=1293,1292
<1294=1296,1295
<1296=1297
<1297=1299,1298
<1299=1303,1300
<1300=1301
<1301=1302
<1303=1304
<1304=1306,1305
<1306=1308,1307
<1309=1310
<1310=1315,1314,1311
<1311=1313,1312
<1316=1318,1317
<1319=1320
<1320=1332,1321
<1321=1323,1322
<1323=1324
<1324=1326,1325
<1326=1328,1327
<1328=1329
<1329=1331,1330
<1333=1334
<1334=1335
<1335=1350,1349,1336
<1336=1348,1337
<1337=1339,1338
<1339=1340
<1340=1342,1341
<1342=1344,1343
<1344=1345
<1345=1347,1346
<1351=1352
<1352=1356,1353
<1353=1354
<1354=1355
<1356=1357
<1357=1359,1358
<1360=1361
<1361=1365,1362
<1362=1363
<1363=1364
<1365=1366
<1366=1368,1367
<1369=1370
<1370=1374,1371
<1371=1372
<1372=1373
<1374=1375
<1375=1377,1376
<1378=1379
<1379=1383,1380
<1380=1381
<1381=1382
<1383=1384
<1384=1386,1385
<1387=1388
<1388=1409,1408,1389
<1389=1407,1390
<1390=1403,1391
<1391=1392
<1392=1393
<1393=1395,1394
<1395=1396
<1396=1398,1397
<1398=1402,1399
<1399=1401,1400
<1403=1404
<1404=1406,1405
<1410=1411
<1411=1430,1429,1412
<1412=1428,1413
<1413=1424,1414
<1414=1415
<1415=1416
<1416=1418,1417
<1418=1419
<1419=1421,1420
<1421=1423,1422
<1424=1425
<1425=1427,1426
<1431=1432
<1432=1434,1433
<1435=1437,1436
<1438=1439
<1439=1448,1440
<1440=1442,1441
<1442=1444,1443
<1444=1445
<1445=1447,1446
<1449=1450
<1450=1451
<1451=1461,1460,1452
<1452=1459,1453
<1453=1455,1454
<1455=1456
<1456=1458,1457
<1498=1507,1506,1499
<1499=1503,1500
<1500=1502,1501
<1503=1505,1504
<1507=1973,1932,1915,1914,1913,1912,1911,1910,1909,1908,1907,1906,1905,1904,1903,1902,1898,1873,1848,1820,1792,1788,1753,1749,1740,1711,1697,1510,1508
<1508=1509
<1510=1688,1511
<1511=1678,1635,1631,1592,1570,1541,1512
<1512=1513
<1513=1540,1514
<1514=1539,1515
<1515=1517,1516
<1517=1519,1518
<1519=1520
<1520=1522,1521
<1522=1524,1523
<1524=1525
<1525=1527,1526
<1527=1529,1528
<1529=1530
<1530=1532,1531
<1532=1534,1533
<1534=1536,1535
<1536=1538,1537
<1541=1542
<1542=1569,1543
<1543=1568,1544
<1544=1546,1545
<1546=1548,1547
<1548=1549
<1549=1551,1550
<1551=1553,1552
<1553=1554
<1554=1556,1555
<1556=1558,1557
<1558=1559
<1559=1561,1560
<1561=1563,1562
<1563=1565,1564
<1565=1567,1566
<1570=1571
<1571=1591,1572
<1572=1590,1573
<1573=1584,1574
<1574=1583,1575
<1575=1577,1576
<1577=1581,1578
<1578=1579
<1579=1580
<1581=1582
<1584=1586,1585
<1586=1587
<1587=1589,1588
<1592=1622,1601,1593
<1593=1594
<1594=1595
<1595=1597,1596
<1597=1598
<1598=1600,1599
<1601=1602
<1602=1613,1603
<1603=1606,1604
<1604=1605
<1606=1607
<1607=1609,1608
<1609=1610
<1610=1612,1611
<1613=1614
<1614=1616,1615
<1616=1618,1617
<1618=1619
<1619=1621,1620
<1622=1623
<1623=1625,1624
<1625=1627,1626
<1627=1628
<1628=1630,1629
<1631=1632
<1632=1634,1633
<1635=1636
<1636=1677,1637
<1637=1676,1638
<1638=1640,1639
<1640=1674,1641
<1641=1658,1642
<1642=1643
<1643=1649,1644
<1644=1645
<1645=1646
<1646=1648,1647
<1649=1650
<1650=1652,1651
<1652=1654,1653
<1654=1655
<1655=1657,1656
<1658=1659
<1659=1665,1660
<1660=1661
<1661=1662
<1662=1664,1663
<1665=1666
<1666=1668,1667
<1668=1670,1669
<1670=1671
<1671=1673,1672
<1674=1675
<1678=1679
<1679=1687,1680
<1680=1682,1681
<1682=1684,1683
<1684=1686,1685
<1688=1689
<1689=1696,1690
<1690=1692,1691
<1692=1693
<1693=1695,1694
<1697=1698
<1698=1710,1709,1699
<1699=1708,1700
<1700=1704,1701
<1701=1702
<1702=1703
<1704=1705
<1705=1707,1706
<1711=1712
<1712=1739,1713
<1713=1735,1714
<1714=1726,1717,1715
<1715=1716
<1717=1718
<1718=1725,1719
<1719=1721,1720
<1721=1722
<1722=1724,1723
<1726=1727
<1727=1734,1728
<1728=1730,1729
<1730=1731
<1731=1733,1732
<1735=1736
<1736=1738,1737
<1740=1741
<1741=1745,1742
<1742=1743
<1743=1744
<1745=1746
<1746=1748,1747
<1749=1750
<1750=1752,1751
<1753=1754
<1754=1787,1755
<1755=1785,1774,1756
<1756=1763,1757
<1757=1759,1758
<1759=1760
<1760=1762,1761
<1763=1765,1764
<1765=1766
<1766=1768,1767
<1768=1770,1769
<1770=1771
<1771=1773,1772
<1774=1783,1775
<1775=1776
<1776=1777
<1777=1779,1778
<1779=1780
<1780=1782,1781
<1783=1784
<1785=1786
<1788=1789
<1789=1791,1790
<1792=1793
<1793=1818,1794
<1794=1795
<1795=1796
<1796=1812,1797
<1797=1799,1798
<1799=1800
<1800=1802,1801
<1802=1806,1803
<1803=1804
<1804=1805
<1806=1807
<1807=1809,1808
<1809=1811,1810
<1812=1814,1813
<1814=1815
<1815=1817,1816
<1818=1819
<1820=1821
<1821=1846,1822
<1822=1823
<1823=1824
<1824=1840,1825
<1825=1827,1826
<1827=1828
<1828=1830,1829
<1830=1834,1831
<1831=1832
<1832=1833
<1834=1835
<1835=1837,1836
<1837=1839,1838
<1840=1842,1841
<1842=1843
<1843=1845,1844
<1846=1847
<1848=1849
<1849=1872,1871,1850
<1850=1870,1851
<1851=1869,1852
<1852=1854,1853
<1854=1856,1855
<1856=1857
<1857=1859,1858
<1859=1863,1860
<1860=1861
<1861=1862
<1863=1864
<1864=1866,1865
<1866=1868,1867
<1873=1874
<1874=1897,1896,1875
<1875=1895,1876
<1876=1894,1877
<1877=1879,1878
<1879=1881,1880
<1881=1882
<1882=1884,1883
<1884=1888,1885
<1885=1886
<1886=1887
<1888=1889
<1889=1891,1890
<1891=1893,1892
<1898=1899
<1899=1901,1900
<1915=1918,1916
<1916=1917
<1918=1919
<1919=1931,1920
<1920=1922,1921
<1922=1923
<1923=1925,1924
<1925=1927,1926
<1927=1928
<1928=1930,1929
<1932=1933
<1933=1972,1971,1934
<1934=1970,1935
<1935=1968,1936
<1936=1956,1944,1937
<1937=1938
<1938=1942,1939
<1939=1940
<1940=1941
<1942=1943
<1944=1945
<1945=1947,1946
<1947=1948
<1948=1950,1949
<1950=1952,1951
<1952=1953
<1953=1955,1954
<1956=1957
<1957=1959,1958
<1959=1960
<1960=1962,1961
<1962=1964,1963
<1964=1965
<1965=1967,1966
<1968=1969
<1973=1974
<1974=1976,1975
<2049=2058,2057,2050
<2050=2054,2051
<2051=2053,2052
<2054=2056,2055
<2058=2172,2171,2170,2169,2168,2167,2166,2165,2164,2150,2139,2128,2118,2114,2098,2082,2070,2059
<2059=2060
<2060=2066,2061
<2061=2064,2062
<2062=2063
<2064=2065
<2066=2067
<2067=2069,2068
<2070=2071
<2071=2081,2080,2072
<2072=2079,2073
<2073=2075,2074
<2075=2076
<2076=2078,2077
<2082=2083
<2083=2094,2084
<2084=2085
<2085=2086
<2086=2092,2087
<2087=2090,2088
<2088=2089
<2090=2091
<2092=2093
<2094=2095
<2095=2097,2096
<2098=2099
<2099=2110,2100
<2100=2101
<2101=2102
<2102=2108,2103
<2103=2106,2104
<2104=2105
<2106=2107
<2108=2109
<2110=2111
<2111=2113,2112
<2114=2115
<2115=2117,2116
<2118=2120,2119
<2120=2121
<2121=2125,2122
<2122=2124,2123
<2125=2127,2126
<2128=2129
<2129=2138,2137,2130
<2130=2136,2131
<2131=2135,2132
<2132=2134,2133
<2139=2140
<2140=2149,2148,2141
<2141=2147,2142
<2142=2146,2143
<2143=2145,2144
<2150=2151
<2151=2153,2152
<2153=2155,2154
<2155=2156
<2156=2158,2157
<2158=2160,2159
<2160=2161
<2161=2163,2162
<2199=2202,2201,2200
<2202=2300,2293,2286,2203
<2203=2282,2204
<2204=2278,2269,2205
<2205=2267,2206
<2206=2250,2243,2236,2229,2207
<2207=2220,2208
<2208=2213,2209
<2209=2210
<2210=2212,2211
<2213=2214
<2214=2216,2215
<2216=2217
<2217=2219,2218
<2220=2221
<2221=2228,2222
<2222=2224,2223
<2224=2225
<2225=2227,2226
<2229=2230
<2230=2232,2231
<2232=2233
<2233=2235,2234
<2236=2237
<2237=2241,2238
<2238=2239
<2239=2240
<2241=2242
<2243=2244
<2244=2246,2245
<2246=2247
<2247=2249,2248
<2250=2263,2251
<2251=2256,2252
<2252=2253
<2253=2255,2254
<2256=2257
<2257=2259,2258
<2259=2260
<2260=2262,2261
<2263=2264
<2264=2266,2265
<2267=2268
<2269=2270
<2270=2274,2271
<2271=2272
<2272=2273
<2274=2275
<2275=2277,2276
<2278=2279
<2279=2281,2280
<2282=2283
<2283=2285,2284
<2286=2287
<2287=2292,2291,2288
<2288=2290,2289
<2293=2294
<2294=2299,2298,2295
<2295=2297,2296
<2313=2319,2318,2314
<2314=2315
<2315=2317,2316
<2319=2577,2576,2551,2547,2543,2531,2520,2513,2500,2493,2486,2475,2459,2452,2445,2429,2422,2329,2320
<2320=2321
<2321=2327,2322
<2322=2323
<2323=2324
<2324=2326,2325
<2327=2328
<2329=2416,2330
<2330=2409,2402,2389,2356,2343,2338,2331
<2331=2332
<2332=2334,2333
<2334=2335
<2335=2337,2336
<2338=2339
<2339=2341,2340
<2341=2342
<2343=2344
<2344=2352,2345
<2345=2346
<2346=2347
<2347=2349,2348
<2349=2351,2350
<2352=2353
<2353=2355,2354
<2356=2385,2357
<2357=2371,2358
<2358=2367,2359
<2359=2360
<2360=2361
<2361=2363,2362
<2363=2364
<2364=2366,2365
<2367=2368
<2368=2370,2369
<2371=2372
<2372=2384,2383,2373
<2373=2382,2374
<2374=2380,2375
<2375=2376
<2376=2377
<2377=2379,2378
<2380=2381
<2385=2386
<2386=2388,2387
<2389=2390
<2390=2398,2391
<2391=2392
<2392=2393
<2393=2395,2394
<2395=2397,2396
<2398=2399
<2399=2401,2400
<2402=2403
<2403=2405,2404
<2405=2406
<2406=2408,2407
<2409=2410
<2410=2412,2411
<2412=2413
<2413=2415,2414
<2416=2417
<2417=2421,2418
<2418=2420,2419
<2422=2423
<2423=2425,2424
<2425=2426
<2426=2428,2427
<2429=2430
<2430=2444,2443,2431
<2431=2442,2432
<2432=2441,2433
<2433=2440,2434
<2434=2438,2435
<2435=2436
<2436=2437
<2438=2439
<2445=2446
<2446=2448,2447
<2448=2449
<2449=2451,2450
<2452=2453
<2453=2455,2454
<2455=2456
<2456=2458,2457
<2459=2460
<2460=2473,2461
<2461=2462
<2462=2463
<2463=2472,2464
<2464=2466,2465
<2466=2468,2467
<2468=2469
<2469=2471,2470
<2473=2474
<2475=2476
<2476=2484,2477
<2477=2482,2480,2478
<2478=2479
<2480=2481
<2482=2483
<2484=2485
<2486=2487
<2487=2489,2488
<2489=2490
<2490=2492,2491
<2493=2494
<2494=2496,2495
<2496=2497
<2497=2499,2498
<2500=2501
<2501=2509,2502
<2502=2507,2505,2503
<2503=2504
<2505=2506
<2507=2508
<2509=2510
<2510=2512,2511
<2513=2514
<2514=2516,2515
<2516=2517
<2517=2519,2518
<2520=2522,2521
<2522=2523
<2523=2525,2524
<2525=2527,2526
<2527=2528
<2528=2530,2529
<2531=2532
<2532=2542,2541,2533
<2533=2540,2534
<2534=2538,2535
<2535=2536
<2536=2537
<2538=2539
<2543=2544
<2544=2546,2545
<2547=2548
<2548=2550,2549
<2551=2570,2564,2558,2552
<2552=2557,2556,2553
<2553=2555,2554
<2558=2563,2562,2559
<2559=2561,2560
<2564=2569,2568,2565
<2565=2567,2566
<2570=2575,2574,2571
<2571=2573,2572
<2577=2578
<2578=2581,2580,2579
<2613=2616,2615,2614
<2616=2736,2735,2734,2733,2732,2731,2730,2729,2728,2727,2726,2725,2665,2619,2617
<2617=2618
<2619=2620
<2620=2626,2621
<2621=2622
<2622=2623
<2623=2625,2624
<2626=2627
<2627=2629,2628
<2629=2635,2630
<2630=2631
<2631=2632
<2632=2634,2633
<2635=2636
<2636=2638,2637
<2638=2642,2639
<2639=2640
<2640=2641
<2642=2643
<2643=2645,2644
<2645=2647,2646
<2647=2648
<2648=2650,2649
<2650=2654,2651
<2651=2652
<2652=2653
<2654=2655
<2655=2657,2656
<2657=2661,2658
<2658=2659
<2659=2660
<2661=2662
<2662=2664,2663
<2665=2666
<2666=2670,2667
<2667=2668
<2668=2669
<2670=2671
<2671=2673,2672
<2673=2679,2674
<2674=2675
<2675=2676
<2676=2678,2677
<2679=2680
<2680=2682,2681
<2682=2688,2683
<2683=2684
<2684=2685
<2685=2687,2686
<2688=2689
<2689=2691,2690
<2691=2695,2692
<2692=2693
<2693=2694
<2695=2696
<2696=2698,2697
<2698=2702,2699
<2699=2700
<2700=2701
<2702=2703
<2703=2705,2704
<2705=2707,2706
<2707=2708
<2708=2710,2709
<2710=2714,2711
<2711=2712
<2712=2713
<2714=2715
<2715=2717,2716
<2717=2721,2718
<2718=2719
<2719=2720
<2721=2722
<2722=2724,2723
<2764=2767,2766,2765
<2767=2768
<2768=2769
<2769=2771,2770
<2771=2772
<2772=2774,2773
<2780=2786,2785,2781
<2781=2782
<2782=2784,2783
<2786=2815,2787
<2787=2788
<2788=2811,2789
<2789=2804,2797,2790
<2790=2791
<2791=2793,2792
<2793=2794
<2794=2796,2795
<2797=2798
<2798=2800,2799
<2800=2801
<2801=2803,2802
<2804=2805
<2805=2807,2806
<2807=2808
<2808=2810,2809
<2811=2812
<2812=2814,2813
<2815=2816
<2816=2832,2817
<2817=2818
<2818=2819
<2819=2826,2820
<2820=2822,2821
<2822=2823
<2823=2825,2824
<2826=2828,2827
<2828=2829
<2829=2831,2830
<2832=2833
<2833=2835,2834
<2848=2853,2849
<2849=2850
<2850=2852,2851
<2858=2861,2860,2859
<2861=2862
<2862=2863
<2868=2874,2873,2869
<2869=2870
<2870=2872,2871
<2874=2915,2894,2882,2875
<2875=2876
<2876=2880,2877
<2877=2878
<2878=2879
<2880=2881
<2882=2883
<2883=2887,2884
<2884=2885
<2885=2886
<2887=2888
<2888=2890,2889
<2890=2892,2891
<2892=2893
<2894=2895
<2895=2911,2896
<2896=2904,2897
<2897=2898
<2898=2900,2899
<2900=2901
<2901=2903,2902
<2904=2905
<2905=2907,2906
<2907=2908
<2908=2910,2909
<2911=2912
<2912=2914,2913
<2915=2916
<2916=2918,2917
<2927=2933,2932,2928
<2928=2929
<2929=2931,2930
<2933=2946,2934
<2934=2935
<2935=2939,2936
<2936=2937
<2937=2938
<2939=2940
<2940=2942,2941
<2942=2944,2943
<2944=2945
<2946=2947
<2947=2953,2948
<2948=2949
<2949=2950
<2950=2952,2951
<2953=2954
<2962=2974,2973,2963
<2963=2970,2967,2964
<2964=2966,2965
<2967=2969,2968
<2970=2972,2971
<2974=3114,3098,3035,3030,3012,2984,2975
<2975=2976
<2976=2983,2977
<2977=2979,2978
<2979=2980
<2980=2982,2981
<2984=2985
<2985=3010,2986
<2986=2989,2987
<2987=2988
<2989=2990
<2990=3008,2991
<2991=3001,2994,2992
<2992=2993
<2994=2995
<2995=2997,2996
<2997=2998
<2998=3000,2999
<3001=3002
<3002=3004,3003
<3004=3005
<3005=3007,3006
<3008=3009
<3010=3011
<3012=3013
<3013=3029,3028,3014
<3014=3027,3015
<3015=3023,3022,3016
<3016=3018,3017
<3018=3019
<3019=3021,3020
<3023=3024
<3024=3026,3025
<3030=3031
<3031=3034,3033,3032
<3035=3085,3076,3073,3036
<3036=3055,3037
<3037=3038
<3038=3051,3039
<3039=3040
<3040=3041
<3041=3049,3042
<3042=3047,3043
<3043=3044
<3044=3046,3045
<3047=3048
<3049=3050
<3051=3052
<3052=3054,3053
<3055=3056
<3056=3069,3057
<3057=3058
<3058=3059
<3059=3067,3060
<3060=3065,3061
<3061=3062
<3062=3064,3063
<3065=3066
<3067=3068
<3069=3070
<3070=3072,3071
<3073=3075,3074
<3076=3077
<3077=3084,3078
<3078=3080,3079
<3080=3081
<3081=3083,3082
<3085=3086
<3086=3087
<3087=3097,3096,3088
<3088=3095,3089
<3089=3091,3090
<3091=3092
<3092=3094,3093
<3098=3099
<3099=3110,3100
<3100=3101
<3101=3102
<3102=3104,3103
<3104=3106,3105
<3106=3107
<3107=3109,3108
<3110=3111
<3111=3113,3112
<3114=3115
<3115=3117,3116
<3141=3147,3146,3142
<3142=3143
<3143=3145,3144
<3147=3278,3269,3150,3148
<3148=3149
<3150=3256,3247,3244,3151
<3151=3235,3207,3193,3184,3180,3163,3152
<3152=3153
<3153=3162,3154
<3154=3160,3155
<3155=3158,3156
<3156=3157
<3158=3159
<3160=3161
<3163=3164
<3164=3178,3165
<3165=3174,3170,3166
<3166=3167
<3167=3169,3168
<3170=3171
<3171=3173,3172
<3174=3175
<3175=3177,3176
<3178=3179
<3180=3181
<3181=3183,3182
<3184=3185
<3185=3191,3186
<3186=3187
<3187=3188
<3188=3190,3189
<3191=3192
<3193=3194
<3194=3206,3205,3195
<3195=3204,3196
<3196=3198,3197
<3198=3202,3199
<3199=3200
<3200=3201
<3202=3203
<3207=3208
<3208=3234,3233,3209
<3209=3232,3210
<3210=3230,3211
<3211=3212
<3212=3213
<3213=3222,3214
<3214=3216,3215
<3216=3217
<3217=3219,3218
<3219=3221,3220
<3222=3224,3223
<3224=3225
<3225=3227,3226
<3227=3229,3228
<3230=3231
<3235=3236
<3236=3243,3242,3237
<3237=3241,3238
<3238=3240,3239
<3244=3246,3245
<3247=3248
<3248=3255,3249
<3249=3251,3250
<3251=3252
<3252=3254,3253
<3256=3257
<3257=3258
<3258=3268,3267,3259
<3259=3266,3260
<3260=3262,3261
<3262=3263
<3263=3265,3264
<3269=3270
<3270=3277,3276,3271
<3271=3275,3272
<3272=3274,3273
<3278=3279
<3279=3284,3283,3280
<3280=3282,3281
<3311=3323,3322,3312
<3312=3319,3316,3313
<3313=3315,3314
<3316=3318,3317
<3319=3321,3320
<3323=3449,3442,3433,3417,3405,3394,3385,3362,3339,3333,3324
<3324=3325
<3325=3329,3326
<3326=3327
<3327=3328
<3329=3330
<3330=3332,3331
<3333=3334
<3334=3336,3335
<3336=3338,3337
<3339=3340
<3340=3358,3341
<3341=3356,3342
<3342=3343
<3343=3352,3344
<3344=3345
<3345=3346
<3346=3348,3347
<3348=3349
<3349=3351,3350
<3352=3353
<3353=3355,3354
<3356=3357
<3358=3359
<3359=3361,3360
<3362=3363
<3363=3381,3364
<3364=3379,3365
<3365=3366
<3366=3375,3367
<3367=3368
<3368=3369
<3369=3371,3370
<3371=3372
<3372=3374,3373
<3375=3376
<3376=3378,3377
<3379=3380
<3381=3382
<3382=3384,3383
<3385=3386
<3386=3390,3387
<3387=3388
<3388=3389
<3390=3391
<3391=3393,3392
<3394=3395
<3395=3401,3396
<3396=3397
<3397=3398
<3398=3400,3399
<3401=3402
<3402=3404,3403
<3405=3406
<3406=3413,3407
<3407=3408
<3408=3409
<3409=3411,3410
<3411=3412
<3413=3414
<3414=3416,3415
<3417=3418
<3418=3429,3419
<3419=3420
<3420=3421
<3421=3427,3422
<3422=3423
<3423=3424
<3424=3426,3425
<3427=3428
<3429=3430
<3430=3432,3431
<3433=3434
<3434=3438,3435
<3435=3436
<3436=3437
<3438=3439
<3439=3441,3440
<3442=3443
<3443=3448,3447,3444
<3444=3446,3445
<3449=3450
<3450=3472,3471,3451
<3451=3470,3452
<3452=3468,3453
<3453=3461,3454
<3454=3455
<3455=3457,3456
<3457=3458
<3458=3460,3459
<3461=3462
<3462=3464,3463
<3464=3465
<3465=3467,3466
<3468=3469
<3495=3501,3500,3496
<3496=3497
<3497=3499,3498
<3501=3502
<3502=3503
<3503=3533,3504
<3504=3505
<3505=3506
<3506=3520,3507
<3507=3509,3508
<3509=3510
<3510=3512,3511
<3512=3516,3513
<3513=3514
<3514=3515
<3516=3517
<3517=3519,3518
<3520=3522,3521
<3522=3523
<3523=3525,3524
<3525=3529,3526
<3526=3527
<3527=3528
<3529=3530
<3530=3532,3531
<3533=3534
<3558=3561,3560,3559
<3561=3562
<3562=3625,3616,3613,3563
<3563=3604,3583,3564
<3564=3565
<3565=3579,3566
<3566=3567
<3567=3568
<3568=3577,3569
<3569=3570
<3570=3571
<3571=3573,3572
<3573=3574
<3574=3576,3575
<3577=3578
<3579=3580
<3580=3582,3581
<3583=3584
<3584=3603,3602,3585
<3585=3601,3586
<3586=3600,3587
<3587=3596,3588
<3588=3589
<3589=3590
<3590=3592,3591
<3592=3593
<3593=3595,3594
<3596=3597
<3597=3599,3598
<3604=3605
<3605=3612,3611,3606
<3606=3610,3607
<3607=3609,3608
<3613=3615,3614
<3616=3617
<3617=3624,3618
<3618=3620,3619
<3620=3621
<3621=3623,3622
<3625=3626
<3626=3627
<3627=3637,3636,3628
<3628=3635,3629
<3629=3631,3630
<3631=3632
<3632=3634,3633
<3659=3667,3660
<3660=3664,3661
<3661=3663,3662
<3664=3666,3665
<3673=3679,3678,3674
<3674=3675
<3675=3677,3676
<3679=3680
<3680=3681
<3681=3745,3682
<3682=3714,3683
<3683=3699,3684
<3684=3686,3685
<3686=3688,3687
<3688=3689
<3689=3691,3690
<3691=3695,3692
<3692=3693
<3693=3694
<3695=3696
<3696=3698,3697
<3699=3701,3700
<3701=3703,3702
<3703=3704
<3704=3706,3705
<3706=3710,3707
<3707=3708
<3708=3709
<3710=3711
<3711=3713,3712
<3714=3730,3715
<3715=3717,3716
<3717=3719,3718
<3719=3720
<3720=3722,3721
<3722=3726,3723
<3723=3724
<3724=3725
<3726=3727
<3727=3729,3728
<3730=3732,3731
<3732=3734,3733
<3734=3735
<3735=3737,3736
<3737=3741,3738
<3738=3739
<3739=3740
<3741=3742
<3742=3744,3743
<3745=3747,3746
<3747=3749,3748
<3749=3750
<3750=3752,3751
<3752=3754,3753
<3754=3755
<3755=3757,3756
<3772=3778,3777,3773
<3773=3774
<3774=3776,3775
<3778=4005,3779
<3779=3987,3973,3970,3780
<3780=3959,3952,3938,3924,3910,3896,3877,3870,3790,3781
<3781=3782
<3782=3786,3783
<3783=3784
<3784=3785
<3786=3787
<3787=3789,3788
<3790=3852,3838,3835,3791
<3791=3812,3805,3792
<3792=3793
<3793=3801,3794
<3794=3797,3795
<3795=3796
<3797=3798
<3798=3800,3799
<3801=3802
<3802=3804,3803
<3805=3806
<3806=3810,3807
<3807=3808
<3808=3809
<3810=3811
<3812=3813
<3813=3834,3833,3814
<3814=3832,3815
<3815=3831,3816
<3816=3827,3817
<3817=3818
<3818=3819
<3819=3821,3820
<3821=3822
<3822=3824,3823
<3824=3826,3825
<3827=3828
<3828=3830,3829
<3835=3837,3836
<3838=3839
<3839=3851,3840
<3840=3842,3841
<3842=3843
<3843=3845,3844
<3845=3847,3846
<3847=3848
<3848=3850,3849
<3852=3853
<3853=3854
<3854=3869,3868,3855
<3855=3867,3856
<3856=3858,3857
<3858=3859
<3859=3861,3860
<3861=3863,3862
<3863=3864
<3864=3866,3865
<3870=3871
<3871=3876,3875,3872
<3872=3874,3873
<3877=3878
<3878=3892,3879
<3879=3880
<3880=3881
<3881=3883,3882
<3883=3884
<3884=3886,3885
<3886=3888,3887
<3888=3889
<3889=3891,3890
<3892=3893
<3893=3895,3894
<3896=3897
<3897=3906,3898
<3898=3899
<3899=3900
<3900=3902,3901
<3902=3903
<3903=3905,3904
<3906=3907
<3907=3909,3908
<3910=3911
<3911=3920,3912
<3912=3913
<3913=3914
<3914=3916,3915
<3916=3917
<3917=3919,3918
<3920=3921
<3921=3923,3922
<3924=3925
<3925=3934,3926
<3926=3927
<3927=3928
<3928=3930,3929
<3930=3931
<3931=3933,3932
<3934=3935
<3935=3937,3936
<3938=3939
<3939=3948,3940
<3940=3941
<3941=3942
<3942=3944,3943
<3944=3945
<3945=3947,3946
<3948=3949
<3949=3951,3950
<3952=3953
<3953=3958,3957,3954
<3954=3956,3955
<3959=3960
<3960=3969,3968,3961
<3961=3967,3962
<3962=3966,3963
<3963=3965,3964
<3970=3972,3971
<3973=3974
<3974=3986,3975
<3975=3977,3976
<3977=3978
<3978=3980,3979
<3980=3982,3981
<3982=3983
<3983=3985,3984
<3987=3988
<3988=3989
<3989=4004,4003,3990
<3990=4002,3991
<3991=3993,3992
<3993=3994
<3994=3996,3995
<3996=3998,3997
<3998=3999
<3999=4001,4000
<4005=4152,4138,4135,4006
<4006=4124,4108,4099,4092,4078,4064,4050,4036,4027,4016,4007
<4007=4008
<4008=4012,4009
<4009=4010
<4010=4011
<4012=4013
<4013=4015,4014
<4016=4017
<4017=4023,4018
<4018=4019
<4019=4020
<4020=4022,4021
<4023=4024
<4024=4026,4025
<4027=4028
<4028=4032,4029
<4029=4030
<4030=4031
<4032=4033
<4033=4035,4034
<4036=4037
<4037=4046,4038
<4038=4039
<4039=4040
<4040=4042,4041
<4042=4043
<4043=4045,4044
<4046=4047
<4047=4049,4048
<4050=4051
<4051=4060,4052
<4052=4053
<4053=4054
<4054=4056,4055
<4056=4057
<4057=4059,4058
<4060=4061
<4061=4063,4062
<4064=4065
<4065=4074,4066
<4066=4067
<4067=4068
<4068=4070,4069
<4070=4071
<4071=4073,4072
<4074=4075
<4075=4077,4076
<4078=4079
<4079=4088,4080
<4080=4081
<4081=4082
<4082=4084,4083
<4084=4085
<4085=4087,4086
<4088=4089
<4089=4091,4090
<4092=4093
<4093=4098,4097,4094
<4094=4096,4095
<4099=4100
<4100=4107,4106,4101
<4101=4105,4102
<4102=4104,4103
<4108=4110,4109
<4110=4111
<4111=4120,4112
<4112=4113
<4113=4114
<4114=4116,4115
<4116=4117
<4117=4119,4118
<4120=4121
<4121=4123,4122
<4124=4125
<4125=4134,4133,4126
<4126=4132,4127
<4127=4131,4128
<4128=4130,4129
<4135=4137,4136
<4138=4139
<4139=4151,4140
<4140=4142,4141
<4142=4143
<4143=4145,4144
<4145=4147,4146
<4147=4148
<4148=4150,4149
<4152=4153
<4153=4154
<4154=4169,4168,4155
<4155=4167,4156
<4156=4158,4157
<4158=4159
<4159=4161,4160
<4161=4163,4162
<4163=4164
<4164=4166,4165
<4210=4216,4215,4211
<4211=4212
<4212=4214,4213
<4216=4670,4663,4651,4634,4622,4571,4497,4488,4472,4463,4447,4307,4302,4252,4238,4229,4223,4219,4217
<4217=4218
<4219=4220
<4220=4222,4221
<4223=4224
<4224=4228,4225
<4225=4227,4226
<4229=4230
<4230=4234,4231
<4231=4232
<4232=4233
<4234=4235
<4235=4237,4236
<4238=4239
<4239=4248,4240
<4240=4241
<4241=4242
<4242=4244,4243
<4244=4245
<4245=4247,4246
<4248=4249
<4249=4251,4250
<4252=4253
<4253=4262,4254
<4254=4255
<4255=4256
<4256=4258,4257
<4258=4259
<4259=4261,4260
<4262=4263
<4263=4265,4264
<4265=4279,4266
<4266=4267
<4267=4268
<4268=4277,4269
<4269=4270
<4270=4271
<4271=4273,4272
<4273=4274
<4274=4276,4275
<4277=4278
<4279=4280
<4280=4282,4281
<4282=4291,4283
<4283=4284
<4284=4285
<4285=4287,4286
<4287=4288
<4288=4290,4289
<4291=4292
<4292=4294,4293
<4294=4298,4295
<4295=4296
<4296=4297
<4298=4299
<4299=4301,4300
<4302=4303
<4303=4306,4305,4304
<4307=4438,4319,4308
<4308=4309
<4309=4310
<4310=4311
<4311=4315,4312
<4312=4313
<4313=4314
<4315=4316
<4316=4318,4317
<4319=4422,4377,4358,4347,4329,4320
<4320=4321
<4321=4325,4322
<4322=4323
<4323=4324
<4325=4326
<4326=4328,4327
<4329=4330
<4330=4343,4331
<4331=4332
<4332=4333
<4333=4341,4334
<4334=4337,4335
<4335=4336
<4337=4338
<4338=4340,4339
<4341=4342
<4343=4344
<4344=4346,4345
<4347=4348
<4348=4357,4356,4349
<4349=4355,4350
<4350=4354,4351
<4351=4353,4352
<4358=4359
<4359=4375,4360
<4360=4361
<4361=4362
<4362=4374,4363
<4363=4365,4364
<4365=4366
<4366=4368,4367
<4368=4370,4369
<4370=4371
<4371=4373,4372
<4375=4376
<4377=4378
<4378=4421,4420,4379
<4379=4419,4380
<4380=4417,4381
<4381=4405,4393,4382
<4382=4383
<4383=4391,4384
<4384=4387,4385
<4385=4386
<4387=4388
<4388=4390,4389
<4391=4392
<4393=4394
<4394=4396,4395
<4396=4397
<4397=4399,4398
<4399=4401,4400
<4401=4402
<4402=4404,4403
<4405=4406
<4406=4408,4407
<4408=4409
<4409=4411,4410
<4411=4413,4412
<4413=4414
<4414=4416,4415
<4417=4418
<4422=4423
<4423=4437,4436,4424
<4424=4435,4425
<4425=4434,4426
<4426=4430,4427
<4427=4428
<4428=4429
<4430=4431
<4431=4433,4432
<4438=4439
<4439=4446,4440
<4440=4442,4441
<4442=4443
<4443=4445,4444
<4447=4448
<4448=4461,4449
<4449=4450
<4450=4451
<4451=4457,4452
<4452=4455,4453
<4453=4454
<4455=4456
<4457=4458
<4458=4460,4459
<4461=4462
<4463=4464
<4464=4470,4465
<4465=4466
<4466=4467
<4467=4469,4468
<4470=4471
<4472=4473
<4473=4487,4486,4474
<4474=4485,4475
<4475=4484,4476
<4476=4480,4477
<4477=4478
<4478=4479
<4480=4481
<4481=4483,4482
<4488=4489
<4489=4495,4490
<4490=4491
<4491=4492
<4492=4494,4493
<4495=4496
<4497=4553,4539,4536,4498
<4498=4525,4514,4499
<4499=4500
<4500=4510,4501
<4501=4502
<4502=4503
<4503=4506,4505,4504
<4506=4507
<4507=4509,4508
<4510=4511
<4511=4513,4512
<4514=4515
<4515=4521,4516
<4516=4517
<4517=4518
<4518=4520,4519
<4521=4522
<4522=4524,4523
<4525=4526
<4526=4535,4534,4527
<4527=4533,4528
<4528=4532,4529
<4529=4531,4530
<4536=4538,4537
<4539=4540
<4540=4552,4541
<4541=4543,4542
<4543=4544
<4544=4546,4545
<4546=4548,4547
<4548=4549
<4549=4551,4550
<4553=4554
<4554=4555
<4555=4570,4569,4556
<4556=4568,4557
<4557=4559,4558
<4559=4560
<4560=4562,4561
<4562=4564,4563
<4564=4565
<4565=4567,4566
<4571=4609,4600,4597,4572
<4572=4573
<4573=4574
<4574=4593,4575
<4575=4589,4576
<4576=4577
<4577=4588,4578
<4578=4580,4579
<4580=4582,4581
<4582=4583
<4583=4585,4584
<4585=4587,4586
<4589=4590
<4590=4592,4591
<4593=4594
<4594=4596,4595
<4597=4599,4598
<4600=4601
<4601=4608,4602
<4602=4604,4603
<4604=4605
<4605=4607,4606
<4609=4610
<4610=4611
<4611=4621,4620,4612
<4612=4619,4613
<4613=4615,4614
<4615=4616
<4616=4618,4617
<4622=4623
<4623=4633,4632,4624
<4624=4631,4625
<4625=4627,4626
<4627=4628
<4628=4630,4629
<4634=4635
<4635=4650,4649,4636
<4636=4648,4637
<4637=4639,4638
<4639=4640
<4640=4642,4641
<4642=4644,4643
<4644=4645
<4645=4647,4646
<4651=4652
<4652=4662,4661,4653
<4653=4660,4654
<4654=4656,4655
<4656=4657
<4657=4659,4658
<4663=4664
<4664=4666,4665
<4666=4667
<4667=4669,4668
<4670=4791,4671
<4671=4773,4728,4709,4698,4672
<4672=4673
<4673=4694,4674
<4674=4675
<4675=4676
<4676=4692,4677
<4677=4678
<4678=4679
<4679=4686,4680
<4680=4682,4681
<4682=4683
<4683=4685,4684
<4686=4688,4687
<4688=4689
<4689=4691,4690
<4692=4693
<4694=4695
<4695=4697,4696
<4698=4699
<4699=4708,4707,4700
<4700=4706,4701
<4701=4705,4702
<4702=4704,4703
<4709=4710
<4710=4726,4711
<4711=4712
<4712=4713
<4713=4725,4714
<4714=4716,4715
<4716=4717
<4717=4719,4718
<4719=4721,4720
<4721=4722
<4722=4724,4723
<4726=4727
<4728=4729
<4729=4772,4771,4730
<4730=4770,4731
<4731=4768,4732
<4732=4756,4744,4733
<4733=4734
<4734=4742,4735
<4735=4738,4736
<4736=4737
<4738=4739
<4739=4741,4740
<4742=4743
<4744=4745
<4745=4747,4746
<4747=4748
<4748=4750,4749
<4750=4752,4751
<4752=4753
<4753=4755,4754
<4756=4757
<4757=4759,4758
<4759=4760
<4760=4762,4761
<4762=4764,4763
<4764=4765
<4765=4767,4766
<4768=4769
<4773=4774
<4774=4790,4789,4775
<4775=4788,4776
<4776=4787,4777
<4777=4783,4778
<4778=4779
<4779=4780
<4780=4782,4781
<4783=4784
<4784=4786,4785
<4791=4792
<4792=4799,4793
<4793=4795,4794
<4795=4796
<4796=4798,4797
<4867=4873,4872,4868
<4868=4869
<4869=4871,4870
<4873=4981,4975,4969,4961,4955,4947,4939,4931,4924,4918,4912,4904,4898,4890,4882,4874
<4874=4875
<4875=4879,4876
<4876=4878,4877
<4879=4881,4880
<4882=4883
<4883=4887,4884
<4884=4886,4885
<4887=4889,4888
<4890=4891
<4891=4895,4892
<4892=4894,4893
<4895=4897,4896
<4898=4899
<4899=4901,4900
<4901=4903,4902
<4904=4905
<4905=4909,4906
<4906=4908,4907
<4909=4911,4910
<4912=4913
<4913=4915,4914
<4915=4917,4916
<4918=4919
<4919=4921,4920
<4921=4923,4922
<4924=4925
<4925=4930,4926
<4926=4928,4927
<4928=4929
<4931=4932
<4932=4936,4933
<4933=4935,4934
<4936=4938,4937
<4939=4940
<4940=4944,4941
<4941=4943,4942
<4944=4946,4945
<4947=4948
<4948=4952,4949
<4949=4951,4950
<4952=4954,4953
<4955=4956
<4956=4958,4957
<4958=4960,4959
<4961=4962
<4962=4966,4963
<4963=4965,4964
<4966=4968,4967
<4969=4970
<4970=4972,4971
<4972=4974,4973
<4975=4976
<4976=4978,4977
<4978=4980,4979
<4981=4982
<4982=4987,4983
<4983=4985,4984
<4985=4986
<5014=5017,5016,5015
<5017=5018
<5018=5042,5023,5019
<5019=5020
<5020=5021
<5021=5022
<5023=5035,5026,5024
<5024=5025
<5026=5027
<5027=5031,5028
<5028=5029
<5029=5030
<5031=5032
<5032=5034,5033
<5035=5036
<5036=5041,5040,5037
<5037=5039,5038
<5042=5043
<5043=5045,5044
<5085=5087,5086
<5087=5088
<5088=5089
<5089=5091,5090
<5091=5093,5092
<5101=5103,5102
<5107=5110,5109,5108
<5110=5111
<5111=5112
<5112=5114,5113
<5121=5127,5126,5122
<5122=5123
<5123=5125,5124
<5127=5128
<5128=5129
<5129=5133,5130
<5130=5131
<5131=5132
<5133=5134
<5134=5136,5135
<5142=5148,5147,5143
<5143=5144
<5144=5146,5145
<5148=5149
<5149=5150
<5150=5154,5151
<5151=5152
<5152=5153
<5154=5155
<5155=5157,5156
<5163=5169,5168,5164
<5164=5165
<5165=5167,5166
<5169=5170
<5170=5171
<5171=5175,5172
<5172=5173
<5173=5174
<5175=5176
<5176=5178,5177
<5184=5187,5186,5185
<5187=5188
<5188=5189
<5189=5191,5190
<5191=5192
<5192=5194,5193
<5199=5205,5204,5200
<5200=5201
<5201=5203,5202
<5205=5206
<5206=5207
<5207=5211,5208
<5208=5209
<5209=5210
<5211=5212
<5212=5214,5213
<5214=5216,5215
<5224=5233,5232,5225
<5225=5229,5226
<5226=5228,5227
<5229=5231,5230
<5233=5234
<5234=5235
<5235=5241,5236
<5236=5239,5237
<5237=5238
<5239=5240
<5241=5242
<5242=5244,5243
<5253=5262,5261,5254
<5254=5258,5255
<5255=5257,5256
<5258=5260,5259
<5262=5263
<5263=5264
<5264=5270,5265
<5265=5268,5266
<5266=5267
<5268=5269
<5270=5271
<5271=5273,5272
<5280=5283,5282,5281
<5283=5284
<5284=5285
<5285=5287,5286
<5294=5297,5296,5295
<5297=5298
<5298=5299
<5299=5301,5300
