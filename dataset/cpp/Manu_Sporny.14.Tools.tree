>3	FunctionDef	Tools 
>4	ParameterList	UserId userId
>5	Parameter	 
>6	Identifier	userId
>7	ParameterType	UserId
>8	ReturnType	std 
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	tmp
>12	ExpressionStatement	 
>13	Statement	 
>14	Statement	 
>15	Statement	 
>16	Statement	 
>17	Statement	 
>18	Statement	 
>19	Statement	 
>20	Statement	 
>21	Statement	 
>22	Statement	 
>23	Statement	 
>24	IdentifierDeclStatement	 
>25	IdentifierDecl	tmp [ 30 ]
>26	PrimaryExpression	30
>27	Identifier	tmp
>28	IdentifierDeclType	char [ 30 ]
>34	FunctionDef	Tools 
>35	ParameterList	const char * amount , int round
>36	Parameter	 
>37	Identifier	round
>38	ParameterType	int
>39	Parameter	 
>40	Identifier	amount
>41	ParameterType	const char *
>42	ReturnType	string
>43	CompoundStatement	 
>44	ReturnStatement	 
>45	CallExpression	bd . toString ( true )
>46	ArgumentList	true
>47	Argument	true
>48	Identifier	true
>49	Callee	bd . toString
>50	MemberAccess	bd . toString
>51	Identifier	toString
>52	Identifier	bd
>53	ExpressionStatement	 
>54	CallExpression	bd . round ( )
>55	ArgumentList	 
>56	Callee	bd . round
>57	MemberAccess	bd . round
>58	Identifier	round
>59	Identifier	bd
>60	ExpressionStatement	 
>61	CallExpression	bd . setPrecision ( decPlaces , rm )
>62	ArgumentList	decPlaces
>63	Argument	rm
>64	Identifier	rm
>65	Argument	decPlaces
>66	Identifier	decPlaces
>67	Callee	bd . setPrecision
>68	MemberAccess	bd . setPrecision
>69	Identifier	setPrecision
>70	Identifier	bd
>71	IdentifierDeclStatement	 
>72	IdentifierDecl	rm = ( round == 1 ) ? Up 
>73	AssignmentExpr	rm = ( round == 1 ) ? Up 
>74	ConditionalExpression	( round == 1 ) ? Up 
>75	ConditionalExpression	( round == 0 ) ? HalfUp 
>76	Identifier	Down
>77	Identifier	HalfUp
>78	Condition	round == 0
>79	EqualityExpression	round == 0
>80	PrimaryExpression	0
>81	Identifier	round
>82	Identifier	Up
>83	Condition	round == 1
>84	EqualityExpression	round == 1
>85	PrimaryExpression	1
>86	Identifier	round
>87	Identifier	rm
>88	Identifier	rm
>89	IdentifierDeclType	RoundingMode
>90	IdentifierDeclStatement	 
>91	IdentifierDecl	bd = amount
>92	AssignmentExpr	bd = amount
>93	Identifier	amount
>94	Identifier	amount
>95	Identifier	bd
>96	IdentifierDeclType	BigDecimal
>97	IdentifierDeclStatement	 
>98	IdentifierDecl	decPlaces = 2
>99	AssignmentExpr	decPlaces = 2
>100	PrimaryExpression	2
>101	Identifier	decPlaces
>102	Identifier	decPlaces
>103	IdentifierDeclType	int
>117	FunctionDef	Tools 
>118	ParameterList	SymmetricKey * key , KeyInfo & ki
>119	Parameter	 
>120	Identifier	ki
>121	ParameterType	KeyInfo &
>122	Parameter	 
>123	Identifier	key
>124	ParameterType	SymmetricKey *
>125	ReturnType	void
>126	CompoundStatement	 
>127	ExpressionStatement	 
>128	CallExpression	key -> assignData ( keyData , keyLength , iv , ivLength , false )
>129	ArgumentList	keyData
>130	Argument	false
>131	Identifier	false
>132	Argument	ivLength
>133	Identifier	ivLength
>134	Argument	iv
>135	Identifier	iv
>136	Argument	keyLength
>137	Identifier	keyLength
>138	Argument	keyData
>139	Identifier	keyData
>140	Callee	key -> assignData
>141	PtrMemberAccess	key -> assignData
>142	Identifier	assignData
>143	Identifier	key
>144	IfStatement	if ( keyLength < length )
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	CallExpression	memcpy ( iv , data + keyLength , ivLength )
>148	ArgumentList	iv
>149	Argument	ivLength
>150	Identifier	ivLength
>151	Argument	data + keyLength
>152	AdditiveExpression	data + keyLength
>153	Identifier	keyLength
>154	Identifier	data
>155	Argument	iv
>156	Identifier	iv
>157	Callee	memcpy
>158	Identifier	memcpy
>159	ExpressionStatement	 
>160	AssignmentExpr	iv = ( char * ) malloc ( ivLength )
>161	CastExpression	( char * ) malloc ( ivLength )
>162	CallExpression	malloc ( ivLength )
>163	ArgumentList	ivLength
>164	Argument	ivLength
>165	Identifier	ivLength
>166	Callee	malloc
>167	Identifier	malloc
>168	CastTarget	char *
>169	Identifier	iv
>170	ExpressionStatement	 
>171	AssignmentExpr	ivLength = length - keyLength
>172	AdditiveExpression	length - keyLength
>173	Identifier	keyLength
>174	Identifier	length
>175	Identifier	ivLength
>176	Condition	 
>177	RelationalExpression	keyLength < length
>178	Identifier	length
>179	Identifier	keyLength
>180	IdentifierDeclStatement	 
>181	IdentifierDecl	* iv = NULL
>182	AssignmentExpr	* iv = NULL
>183	Identifier	NULL
>184	Identifier	NULL
>185	Identifier	iv
>186	IdentifierDeclType	char *
>187	IdentifierDeclStatement	 
>188	IdentifierDecl	ivLength = 0
>189	AssignmentExpr	ivLength = 0
>190	PrimaryExpression	0
>191	Identifier	ivLength
>192	Identifier	ivLength
>193	IdentifierDeclType	unsigned int
>194	ExpressionStatement	 
>195	CallExpression	memcpy ( keyData , data , keyLength )
>196	ArgumentList	keyData
>197	Argument	keyLength
>198	Identifier	keyLength
>199	Argument	data
>200	Identifier	data
>201	Argument	keyData
>202	Identifier	keyData
>203	Callee	memcpy
>204	Identifier	memcpy
>205	IdentifierDeclStatement	 
>206	IdentifierDecl	* keyData = ( char * ) malloc ( keyLength )
>207	AssignmentExpr	* keyData = ( char * ) malloc ( keyLength )
>208	CastExpression	( char * ) malloc ( keyLength )
>209	CallExpression	malloc ( keyLength )
>210	ArgumentList	keyLength
>211	Argument	keyLength
>212	Identifier	keyLength
>213	Callee	malloc
>214	Identifier	malloc
>215	CastTarget	char *
>216	Identifier	keyData
>217	Identifier	keyData
>218	IdentifierDeclType	char *
>219	IdentifierDeclStatement	 
>220	IdentifierDecl	keyLength = ki [ \"length\" ] -> getUInt32 ( )
>221	AssignmentExpr	keyLength = ki [ \"length\" ] -> getUInt32 ( )
>222	CallExpression	ki [ \"length\" ] -> getUInt32 ( )
>223	ArgumentList	 
>224	Callee	ki [ \"length\" ] -> getUInt32
>225	PtrMemberAccess	ki [ \"length\" ] -> getUInt32
>226	Identifier	getUInt32
>227	ArrayIndexing	ki [ \"length\" ]
>228	PrimaryExpression	\"length\"
>229	Identifier	ki
>230	Identifier	keyLength
>231	Identifier	keyLength
>232	IdentifierDeclType	unsigned int
>233	ExpressionStatement	 
>234	CallExpression	Convert 
>235	ArgumentList	ki [ \"data\" ] -> getString ( )
>236	Argument	length
>237	Identifier	length
>238	Argument	data
>239	Identifier	data
>240	Argument	length
>241	Identifier	length
>242	Argument	ki [ \"data\" ] -> getString ( )
>243	CallExpression	ki [ \"data\" ] -> getString ( )
>244	ArgumentList	 
>245	Callee	ki [ \"data\" ] -> getString
>246	PtrMemberAccess	ki [ \"data\" ] -> getString
>247	Identifier	getString
>248	ArrayIndexing	ki [ \"data\" ]
>249	PrimaryExpression	\"data\"
>250	Identifier	ki
>251	Callee	Convert 
>252	Identifier	Convert 
>253	IdentifierDeclStatement	 
>254	IdentifierDecl	data [ length ]
>255	Identifier	length
>256	Identifier	data
>257	IdentifierDeclType	char [ length ]
>258	IdentifierDeclStatement	 
>259	IdentifierDecl	length = ki [ \"data\" ] -> length ( )
>260	AssignmentExpr	length = ki [ \"data\" ] -> length ( )
>261	CallExpression	ki [ \"data\" ] -> length ( )
>262	ArgumentList	 
>263	Callee	ki [ \"data\" ] -> length
>264	PtrMemberAccess	ki [ \"data\" ] -> length
>265	Identifier	length
>266	ArrayIndexing	ki [ \"data\" ]
>267	PrimaryExpression	\"data\"
>268	Identifier	ki
>269	Identifier	length
>270	Identifier	length
>271	IdentifierDeclType	unsigned int
>272	ExpressionStatement	 
>273	CallExpression	key -> setAlgorithm ( ki [ \"algorithm\" ] -> getString ( ) )
>274	ArgumentList	ki [ \"algorithm\" ] -> getString ( )
>275	Argument	ki [ \"algorithm\" ] -> getString ( )
>276	CallExpression	ki [ \"algorithm\" ] -> getString ( )
>277	ArgumentList	 
>278	Callee	ki [ \"algorithm\" ] -> getString
>279	PtrMemberAccess	ki [ \"algorithm\" ] -> getString
>280	Identifier	getString
>281	ArrayIndexing	ki [ \"algorithm\" ]
>282	PrimaryExpression	\"algorithm\"
>283	Identifier	ki
>284	Callee	key -> setAlgorithm
>285	PtrMemberAccess	key -> setAlgorithm
>286	Identifier	setAlgorithm
>287	Identifier	key
>308	FunctionDef	Tools 
>309	ParameterList	KeyInfo & ki , SymmetricKey * key
>310	Parameter	 
>311	Identifier	key
>312	ParameterType	SymmetricKey *
>313	Parameter	 
>314	Identifier	ki
>315	ParameterType	KeyInfo &
>316	ReturnType	void
>317	CompoundStatement	 
>318	ExpressionStatement	 
>319	AssignmentExpr	ki [ \"data\" ] = encoded . c_str ( )
>320	CallExpression	encoded . c_str ( )
>321	ArgumentList	 
>322	Callee	encoded . c_str
>323	MemberAccess	encoded . c_str
>324	Identifier	c_str
>325	Identifier	encoded
>326	ArrayIndexing	ki [ \"data\" ]
>327	PrimaryExpression	\"data\"
>328	Identifier	ki
>329	IdentifierDeclStatement	 
>330	IdentifierDecl	encoded = Convert 
>331	AssignmentExpr	encoded = Convert 
>332	CallExpression	Convert 
>333	ArgumentList	temp
>334	Argument	key -> length ( ) + key -> ivLength ( )
>335	AdditiveExpression	key -> length ( ) + key -> ivLength ( )
>336	CallExpression	key -> ivLength ( )
>337	ArgumentList	 
>338	Callee	key -> ivLength
>339	PtrMemberAccess	key -> ivLength
>340	Identifier	ivLength
>341	Identifier	key
>342	CallExpression	key -> length ( )
>343	ArgumentList	 
>344	Callee	key -> length
>345	PtrMemberAccess	key -> length
>346	Identifier	length
>347	Identifier	key
>348	Argument	temp
>349	Identifier	temp
>350	Callee	Convert 
>351	Identifier	Convert 
>352	Identifier	encoded
>353	Identifier	encoded
>354	IdentifierDeclType	string
>355	IfStatement	if ( key -> ivLength ( ) > 0 )
>356	CompoundStatement	 
>357	ExpressionStatement	 
>358	CallExpression	memcpy ( temp + key -> length ( ) , key -> iv ( ) , key -> ivLength ( ) )
>359	ArgumentList	temp + key -> length ( )
>360	Argument	key -> ivLength ( )
>361	CallExpression	key -> ivLength ( )
>362	ArgumentList	 
>363	Callee	key -> ivLength
>364	PtrMemberAccess	key -> ivLength
>365	Identifier	ivLength
>366	Identifier	key
>367	Argument	key -> iv ( )
>368	CallExpression	key -> iv ( )
>369	ArgumentList	 
>370	Callee	key -> iv
>371	PtrMemberAccess	key -> iv
>372	Identifier	iv
>373	Identifier	key
>374	Argument	temp + key -> length ( )
>375	AdditiveExpression	temp + key -> length ( )
>376	CallExpression	key -> length ( )
>377	ArgumentList	 
>378	Callee	key -> length
>379	PtrMemberAccess	key -> length
>380	Identifier	length
>381	Identifier	key
>382	Identifier	temp
>383	Callee	memcpy
>384	Identifier	memcpy
>385	Condition	 
>386	RelationalExpression	key -> ivLength ( ) > 0
>387	PrimaryExpression	0
>388	CallExpression	key -> ivLength ( )
>389	ArgumentList	 
>390	Callee	key -> ivLength
>391	PtrMemberAccess	key -> ivLength
>392	Identifier	ivLength
>393	Identifier	key
>394	ExpressionStatement	 
>395	CallExpression	memcpy ( temp , key -> data ( ) , key -> length ( ) )
>396	ArgumentList	temp
>397	Argument	key -> length ( )
>398	CallExpression	key -> length ( )
>399	ArgumentList	 
>400	Callee	key -> length
>401	PtrMemberAccess	key -> length
>402	Identifier	length
>403	Identifier	key
>404	Argument	key -> data ( )
>405	CallExpression	key -> data ( )
>406	ArgumentList	 
>407	Callee	key -> data
>408	PtrMemberAccess	key -> data
>409	Identifier	data
>410	Identifier	key
>411	Argument	temp
>412	Identifier	temp
>413	Callee	memcpy
>414	Identifier	memcpy
>415	IdentifierDeclStatement	 
>416	IdentifierDecl	temp [ key -> length ( ) + key -> ivLength ( ) ]
>417	AdditiveExpression	key -> length ( ) + key -> ivLength ( )
>418	CallExpression	key -> ivLength ( )
>419	ArgumentList	 
>420	Callee	key -> ivLength
>421	PtrMemberAccess	key -> ivLength
>422	Identifier	ivLength
>423	Identifier	key
>424	CallExpression	key -> length ( )
>425	ArgumentList	 
>426	Callee	key -> length
>427	PtrMemberAccess	key -> length
>428	Identifier	length
>429	Identifier	key
>430	Identifier	temp
>431	IdentifierDeclType	char [ key -> length ( ) + key -> ivLength ( ) ]
>432	ExpressionStatement	 
>433	AssignmentExpr	ki [ \"length\" ] = key -> length ( )
>434	CallExpression	key -> length ( )
>435	ArgumentList	 
>436	Callee	key -> length
>437	PtrMemberAccess	key -> length
>438	Identifier	length
>439	Identifier	key
>440	ArrayIndexing	ki [ \"length\" ]
>441	PrimaryExpression	\"length\"
>442	Identifier	ki
>443	ExpressionStatement	 
>444	AssignmentExpr	ki [ \"algorithm\" ] = key -> getAlgorithm ( )
>445	CallExpression	key -> getAlgorithm ( )
>446	ArgumentList	 
>447	Callee	key -> getAlgorithm
>448	PtrMemberAccess	key -> getAlgorithm
>449	Identifier	getAlgorithm
>450	Identifier	key
>451	ArrayIndexing	ki [ \"algorithm\" ]
>452	PrimaryExpression	\"algorithm\"
>453	Identifier	ki
>470	FunctionDef	Tools 
>471	ParameterList	ContractSection & cs
>472	Parameter	 
>473	Identifier	cs
>474	ParameterType	ContractSection &
>475	ReturnType	string
>476	CompoundStatement	 
>477	ReturnStatement	 
>478	CallExpression	hash . getDigest ( )
>479	ArgumentList	 
>480	Callee	hash . getDigest
>481	MemberAccess	hash . getDigest
>482	Identifier	getDigest
>483	Identifier	hash
>484	ExpressionStatement	 
>485	CallExpression	hash . update ( str . c_str ( ) )
>486	ArgumentList	str . c_str ( )
>487	Argument	str . c_str ( )
>488	CallExpression	str . c_str ( )
>489	ArgumentList	 
>490	Callee	str . c_str
>491	MemberAccess	str . c_str
>492	Identifier	c_str
>493	Identifier	str
>494	Callee	hash . update
>495	MemberAccess	hash . update
>496	Identifier	update
>497	Identifier	hash
>498	ExpressionStatement	 
>499	CallExpression	hash . start ( \"SHA1\" )
>500	ArgumentList	\"SHA1\"
>501	Argument	\"SHA1\"
>502	PrimaryExpression	\"SHA1\"
>503	Callee	hash . start
>504	MemberAccess	hash . start
>505	Identifier	start
>506	Identifier	hash
>507	IdentifierDeclStatement	 
>508	IdentifierDecl	hash
>509	Identifier	hash
>510	IdentifierDeclType	MessageDigest
>511	ExpressionStatement	 
>512	CallExpression	Signer 
>513	ArgumentList	cs
>514	Argument	str
>515	Identifier	str
>516	Argument	cs
>517	Identifier	cs
>518	Callee	Signer 
>519	Identifier	Signer 
>520	IdentifierDeclStatement	 
>521	IdentifierDecl	str
>522	Identifier	str
>523	IdentifierDeclType	string
>532	FunctionDef	Tools 
>533	ParameterList	UserId sellerId , ServerId serverId
>534	Parameter	 
>535	Identifier	serverId
>536	ParameterType	ServerId
>537	Parameter	 
>538	Identifier	sellerId
>539	ParameterType	UserId
>540	ReturnType	string
>541	CompoundStatement	 
>542	ReturnStatement	 
>543	Identifier	rval
>544	IfStatement	if ( BM_USER_ID_VALID ( sellerId ) && BM_SERVER_ID_VALID ( serverId ) )
>545	CompoundStatement	 
>546	ExpressionStatement	 
>547	AssignmentExpr	rval = tmp
>548	Identifier	tmp
>549	Identifier	rval
>550	ExpressionStatement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	IdentifierDeclStatement	 
>566	IdentifierDecl	tmp [ 45 ]
>567	PrimaryExpression	45
>568	Identifier	tmp
>569	IdentifierDeclType	char [ 45 ]
>570	Condition	 
>571	AndExpression	BM_USER_ID_VALID ( sellerId ) && BM_SERVER_ID_VALID ( serverId )
>572	CallExpression	BM_SERVER_ID_VALID ( serverId )
>573	ArgumentList	serverId
>574	Argument	serverId
>575	Identifier	serverId
>576	Callee	BM_SERVER_ID_VALID
>577	Identifier	BM_SERVER_ID_VALID
>578	CallExpression	BM_USER_ID_VALID ( sellerId )
>579	ArgumentList	sellerId
>580	Argument	sellerId
>581	Identifier	sellerId
>582	Callee	BM_USER_ID_VALID
>583	Identifier	BM_USER_ID_VALID
>584	IdentifierDeclStatement	 
>585	IdentifierDecl	rval
>586	Identifier	rval
>587	IdentifierDeclType	string
>597	FunctionDef	Tools 
>598	ParameterList	Seller & seller
>599	Parameter	 
>600	Identifier	seller
>601	ParameterType	Seller &
>602	ReturnType	string
>603	CompoundStatement	 
>604	ReturnStatement	 
>605	CallExpression	createSellerServerKey ( BM_USER_ID ( seller [ \"userId\" ] ) , BM_SERVER_ID ( seller [ \"serverId\" ] ) )
>606	ArgumentList	BM_USER_ID ( seller [ \"userId\" ] )
>607	Argument	BM_SERVER_ID ( seller [ \"serverId\" ] )
>608	CallExpression	BM_SERVER_ID ( seller [ \"serverId\" ] )
>609	ArgumentList	seller [ \"serverId\" ]
>610	Argument	seller [ \"serverId\" ]
>611	ArrayIndexing	seller [ \"serverId\" ]
>612	PrimaryExpression	\"serverId\"
>613	Identifier	seller
>614	Callee	BM_SERVER_ID
>615	Identifier	BM_SERVER_ID
>616	Argument	BM_USER_ID ( seller [ \"userId\" ] )
>617	CallExpression	BM_USER_ID ( seller [ \"userId\" ] )
>618	ArgumentList	seller [ \"userId\" ]
>619	Argument	seller [ \"userId\" ]
>620	ArrayIndexing	seller [ \"userId\" ]
>621	PrimaryExpression	\"userId\"
>622	Identifier	seller
>623	Callee	BM_USER_ID
>624	Identifier	BM_USER_ID
>625	Callee	createSellerServerKey
>626	Identifier	createSellerServerKey
>635	FunctionDef	Tools 
>636	ParameterList	PayeeList & payees , BigDecimal * totalOut , BigDecimal * licenseIn
>637	Parameter	 
>638	Identifier	licenseIn
>639	ParameterType	BigDecimal *
>640	Parameter	 
>641	Identifier	totalOut
>642	ParameterType	BigDecimal *
>643	Parameter	 
>644	Identifier	payees
>645	ParameterType	PayeeList &
>646	ReturnType	void
>647	CompoundStatement	 
>648	IfStatement	if ( totalOut != NULL )
>649	CompoundStatement	 
>650	ExpressionStatement	 
>651	AssignmentExpr	* totalOut = total
>652	Identifier	total
>653	UnaryOp	* totalOut
>654	Identifier	totalOut
>655	UnaryOperator	*
>656	ExpressionStatement	 
>657	CallExpression	totalOut -> setPrecision ( 7 , Down )
>658	ArgumentList	7
>659	Argument	Down
>660	Identifier	Down
>661	Argument	7
>662	PrimaryExpression	7
>663	Callee	totalOut -> setPrecision
>664	PtrMemberAccess	totalOut -> setPrecision
>665	Identifier	setPrecision
>666	Identifier	totalOut
>667	Condition	 
>668	EqualityExpression	totalOut != NULL
>669	Identifier	NULL
>670	Identifier	totalOut
>671	ExpressionStatement	 
>672	CallExpression	total . round ( )
>673	ArgumentList	 
>674	Callee	total . round
>675	MemberAccess	total . round
>676	Identifier	round
>677	Identifier	total
>678	IfStatement	if ( taxPayees -> length ( ) > 0 )
>679	CompoundStatement	 
>680	WhileStatement	while ( i -> hasNext ( ) )
>681	CompoundStatement	 
>682	ExpressionStatement	 
>683	CallExpression	resolvePercentagePayee ( p , min , tmp , taxableTotal , total , NULL )
>684	ArgumentList	p
>685	Argument	NULL
>686	Identifier	NULL
>687	Argument	total
>688	Identifier	total
>689	Argument	taxableTotal
>690	Identifier	taxableTotal
>691	Argument	tmp
>692	Identifier	tmp
>693	Argument	min
>694	Identifier	min
>695	Argument	p
>696	Identifier	p
>697	Callee	resolvePercentagePayee
>698	Identifier	resolvePercentagePayee
>699	IdentifierDeclStatement	 
>700	IdentifierDecl	& p = i -> next ( )
>701	AssignmentExpr	& p = i -> next ( )
>702	CallExpression	i -> next ( )
>703	ArgumentList	 
>704	Callee	i -> next
>705	PtrMemberAccess	i -> next
>706	Identifier	next
>707	Identifier	i
>708	Identifier	p
>709	Identifier	p
>710	IdentifierDeclType	Payee &
>711	Condition	 
>712	CallExpression	i -> hasNext ( )
>713	ArgumentList	 
>714	Callee	i -> hasNext
>715	PtrMemberAccess	i -> hasNext
>716	Identifier	hasNext
>717	Identifier	i
>718	ExpressionStatement	 
>719	AssignmentExpr	i = taxPayees . getIterator ( )
>720	CallExpression	taxPayees . getIterator ( )
>721	ArgumentList	 
>722	Callee	taxPayees . getIterator
>723	MemberAccess	taxPayees . getIterator
>724	Identifier	getIterator
>725	Identifier	taxPayees
>726	Identifier	i
>727	Condition	 
>728	RelationalExpression	taxPayees -> length ( ) > 0
>729	PrimaryExpression	0
>730	CallExpression	taxPayees -> length ( )
>731	ArgumentList	 
>732	Callee	taxPayees -> length
>733	PtrMemberAccess	taxPayees -> length
>734	Identifier	length
>735	Identifier	taxPayees
>736	IfStatement	if ( potPayees -> length ( ) > 0 )
>737	CompoundStatement	 
>738	WhileStatement	while ( i -> hasNext ( ) )
>739	CompoundStatement	 
>740	ExpressionStatement	 
>741	CallExpression	resolvePercentagePayee ( p , min , tmp , tmpTotal , total , & taxableTotal )
>742	ArgumentList	p
>743	Argument	& taxableTotal
>744	UnaryOp	& taxableTotal
>745	Identifier	taxableTotal
>746	UnaryOperator	&
>747	Argument	total
>748	Identifier	total
>749	Argument	tmpTotal
>750	Identifier	tmpTotal
>751	Argument	tmp
>752	Identifier	tmp
>753	Argument	min
>754	Identifier	min
>755	Argument	p
>756	Identifier	p
>757	Callee	resolvePercentagePayee
>758	Identifier	resolvePercentagePayee
>759	IdentifierDeclStatement	 
>760	IdentifierDecl	& p = i -> next ( )
>761	AssignmentExpr	& p = i -> next ( )
>762	CallExpression	i -> next ( )
>763	ArgumentList	 
>764	Callee	i -> next
>765	PtrMemberAccess	i -> next
>766	Identifier	next
>767	Identifier	i
>768	Identifier	p
>769	Identifier	p
>770	IdentifierDeclType	Payee &
>771	Condition	 
>772	CallExpression	i -> hasNext ( )
>773	ArgumentList	 
>774	Callee	i -> hasNext
>775	PtrMemberAccess	i -> hasNext
>776	Identifier	hasNext
>777	Identifier	i
>778	ExpressionStatement	 
>779	AssignmentExpr	i = potPayees . getIterator ( )
>780	CallExpression	potPayees . getIterator ( )
>781	ArgumentList	 
>782	Callee	potPayees . getIterator
>783	MemberAccess	potPayees . getIterator
>784	Identifier	getIterator
>785	Identifier	potPayees
>786	Identifier	i
>787	ExpressionStatement	 
>788	AssignmentExpr	tmpTotal = total
>789	Identifier	total
>790	Identifier	tmpTotal
>791	ExpressionStatement	 
>792	CallExpression	tmpTotal . setPrecision ( 7 , Down )
>793	ArgumentList	7
>794	Argument	Down
>795	Identifier	Down
>796	Argument	7
>797	PrimaryExpression	7
>798	Callee	tmpTotal . setPrecision
>799	MemberAccess	tmpTotal . setPrecision
>800	Identifier	setPrecision
>801	Identifier	tmpTotal
>802	IdentifierDeclStatement	 
>803	IdentifierDecl	tmpTotal
>804	Identifier	tmpTotal
>805	IdentifierDeclType	BigDecimal
>806	Condition	 
>807	RelationalExpression	potPayees -> length ( ) > 0
>808	PrimaryExpression	0
>809	CallExpression	potPayees -> length ( )
>810	ArgumentList	 
>811	Callee	potPayees -> length
>812	PtrMemberAccess	potPayees -> length
>813	Identifier	length
>814	Identifier	potPayees
>815	WhileStatement	while ( i -> hasNext ( ) )
>816	CompoundStatement	 
>817	IfStatement	if ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_FLATFEE ) == 0 )
>818	ElseStatement	else
>819	CompoundStatement	 
>820	IfStatement	if ( ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_PTOTAL ) != 0 ) && ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_TAX ) != \
>821	CompoundStatement	 
>822	ExpressionStatement	 
>823	CallExpression	resolvePercentagePayee ( p , min , tmp , tmp , total , & taxableTotal )
>824	ArgumentList	p
>825	Argument	& taxableTotal
>826	UnaryOp	& taxableTotal
>827	Identifier	taxableTotal
>828	UnaryOperator	&
>829	Argument	total
>830	Identifier	total
>831	Argument	tmp
>832	Identifier	tmp
>833	Argument	tmp
>834	Identifier	tmp
>835	Argument	min
>836	Identifier	min
>837	Argument	p
>838	Identifier	p
>839	Callee	resolvePercentagePayee
>840	Identifier	resolvePercentagePayee
>841	Condition	 
>842	AndExpression	( strcmp ( amountType , PAYEE_AMOUNT_TYPE_PTOTAL ) != 0 ) && ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_\
>843	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_TAX ) != 0
>844	PrimaryExpression	0
>845	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_TAX )
>846	ArgumentList	amountType
>847	Argument	PAYEE_AMOUNT_TYPE_TAX
>848	Identifier	PAYEE_AMOUNT_TYPE_TAX
>849	Argument	amountType
>850	Identifier	amountType
>851	Callee	strcmp
>852	Identifier	strcmp
>853	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PTOTAL ) != 0
>854	PrimaryExpression	0
>855	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PTOTAL )
>856	ArgumentList	amountType
>857	Argument	PAYEE_AMOUNT_TYPE_PTOTAL
>858	Identifier	PAYEE_AMOUNT_TYPE_PTOTAL
>859	Argument	amountType
>860	Identifier	amountType
>861	Callee	strcmp
>862	Identifier	strcmp
>863	IfStatement	if ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_PLICENSE ) == 0 )
>864	ElseStatement	else
>865	IfStatement	if ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_PCUMULATIVE ) == 0 )
>866	ElseStatement	else
>867	IfStatement	if ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_PTOTAL ) == 0 )
>868	ElseStatement	else
>869	IfStatement	if ( strcmp ( amountType , PAYEE_AMOUNT_TYPE_TAX ) == 0 )
>870	CompoundStatement	 
>871	ExpressionStatement	 
>872	CallExpression	taxPayees -> append ( p )
>873	ArgumentList	p
>874	Argument	p
>875	Identifier	p
>876	Callee	taxPayees -> append
>877	PtrMemberAccess	taxPayees -> append
>878	Identifier	append
>879	Identifier	taxPayees
>880	Condition	 
>881	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_TAX ) == 0
>882	PrimaryExpression	0
>883	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_TAX )
>884	ArgumentList	amountType
>885	Argument	PAYEE_AMOUNT_TYPE_TAX
>886	Identifier	PAYEE_AMOUNT_TYPE_TAX
>887	Argument	amountType
>888	Identifier	amountType
>889	Callee	strcmp
>890	Identifier	strcmp
>891	CompoundStatement	 
>892	ExpressionStatement	 
>893	CallExpression	potPayees -> append ( p )
>894	ArgumentList	p
>895	Argument	p
>896	Identifier	p
>897	Callee	potPayees -> append
>898	PtrMemberAccess	potPayees -> append
>899	Identifier	append
>900	Identifier	potPayees
>901	Condition	 
>902	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PTOTAL ) == 0
>903	PrimaryExpression	0
>904	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PTOTAL )
>905	ArgumentList	amountType
>906	Argument	PAYEE_AMOUNT_TYPE_PTOTAL
>907	Identifier	PAYEE_AMOUNT_TYPE_PTOTAL
>908	Argument	amountType
>909	Identifier	amountType
>910	Callee	strcmp
>911	Identifier	strcmp
>912	CompoundStatement	 
>913	ExpressionStatement	 
>914	AssignmentExpr	tmp = total
>915	Identifier	total
>916	Identifier	tmp
>917	Condition	 
>918	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PCUMULATIVE ) == 0
>919	PrimaryExpression	0
>920	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PCUMULATIVE )
>921	ArgumentList	amountType
>922	Argument	PAYEE_AMOUNT_TYPE_PCUMULATIVE
>923	Identifier	PAYEE_AMOUNT_TYPE_PCUMULATIVE
>924	Argument	amountType
>925	Identifier	amountType
>926	Callee	strcmp
>927	Identifier	strcmp
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	AssignmentExpr	tmp = license
>931	Identifier	license
>932	Identifier	tmp
>933	Condition	 
>934	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PLICENSE ) == 0
>935	PrimaryExpression	0
>936	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_PLICENSE )
>937	ArgumentList	amountType
>938	Argument	PAYEE_AMOUNT_TYPE_PLICENSE
>939	Identifier	PAYEE_AMOUNT_TYPE_PLICENSE
>940	Argument	amountType
>941	Identifier	amountType
>942	Callee	strcmp
>943	Identifier	strcmp
>944	CompoundStatement	 
>945	ExpressionStatement	 
>946	AssignmentExpr	p [ \"amountResolved\" ] = true
>947	Identifier	true
>948	ArrayIndexing	p [ \"amountResolved\" ]
>949	PrimaryExpression	\"amountResolved\"
>950	Identifier	p
>951	IfStatement	if ( ! p [ \"taxExempt\" ] -> getBoolean ( ) )
>952	CompoundStatement	 
>953	ExpressionStatement	 
>954	AssignmentExpr	taxableTotal += p [ \"amount\" ] -> getString ( )
>955	CallExpression	p [ \"amount\" ] -> getString ( )
>956	ArgumentList	 
>957	Callee	p [ \"amount\" ] -> getString
>958	PtrMemberAccess	p [ \"amount\" ] -> getString
>959	Identifier	getString
>960	ArrayIndexing	p [ \"amount\" ]
>961	PrimaryExpression	\"amount\"
>962	Identifier	p
>963	Identifier	taxableTotal
>964	Condition	 
>965	UnaryOp	! p [ \"taxExempt\" ] -> getBoolean ( )
>966	CallExpression	p [ \"taxExempt\" ] -> getBoolean ( )
>967	ArgumentList	 
>968	Callee	p [ \"taxExempt\" ] -> getBoolean
>969	PtrMemberAccess	p [ \"taxExempt\" ] -> getBoolean
>970	Identifier	getBoolean
>971	ArrayIndexing	p [ \"taxExempt\" ]
>972	PrimaryExpression	\"taxExempt\"
>973	Identifier	p
>974	UnaryOperator	!
>975	ExpressionStatement	 
>976	AssignmentExpr	total += p [ \"amount\" ] -> getString ( )
>977	CallExpression	p [ \"amount\" ] -> getString ( )
>978	ArgumentList	 
>979	Callee	p [ \"amount\" ] -> getString
>980	PtrMemberAccess	p [ \"amount\" ] -> getString
>981	Identifier	getString
>982	ArrayIndexing	p [ \"amount\" ]
>983	PrimaryExpression	\"amount\"
>984	Identifier	p
>985	Identifier	total
>986	Condition	 
>987	EqualityExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_FLATFEE ) == 0
>988	PrimaryExpression	0
>989	CallExpression	strcmp ( amountType , PAYEE_AMOUNT_TYPE_FLATFEE )
>990	ArgumentList	amountType
>991	Argument	PAYEE_AMOUNT_TYPE_FLATFEE
>992	Identifier	PAYEE_AMOUNT_TYPE_FLATFEE
>993	Argument	amountType
>994	Identifier	amountType
>995	Callee	strcmp
>996	Identifier	strcmp
>997	IdentifierDeclStatement	 
>998	IdentifierDecl	amountType = p [ \"amountType\" ] -> getString ( )
>999	AssignmentExpr	amountType = p [ \"amountType\" ] -> getString ( )
>1000	CallExpression	p [ \"amountType\" ] -> getString ( )
>1001	ArgumentList	 
>1002	Callee	p [ \"amountType\" ] -> getString
>1003	PtrMemberAccess	p [ \"amountType\" ] -> getString
>1004	Identifier	getString
>1005	ArrayIndexing	p [ \"amountType\" ]
>1006	PrimaryExpression	\"amountType\"
>1007	Identifier	p
>1008	Identifier	amountType
>1009	Identifier	amountType
>1010	IdentifierDeclType	PayeeAmountType
>1011	ExpressionStatement	 
>1012	CallExpression	p [ \"taxExempt\" ] -> setType ( Boolean )
>1013	ArgumentList	Boolean
>1014	Argument	Boolean
>1015	Identifier	Boolean
>1016	Callee	p [ \"taxExempt\" ] -> setType
>1017	PtrMemberAccess	p [ \"taxExempt\" ] -> setType
>1018	Identifier	setType
>1019	ArrayIndexing	p [ \"taxExempt\" ]
>1020	PrimaryExpression	\"taxExempt\"
>1021	Identifier	p
>1022	ExpressionStatement	 
>1023	CallExpression	p [ \"amountResolved\" ] -> setType ( Boolean )
>1024	ArgumentList	Boolean
>1025	Argument	Boolean
>1026	Identifier	Boolean
>1027	Callee	p [ \"amountResolved\" ] -> setType
>1028	PtrMemberAccess	p [ \"amountResolved\" ] -> setType
>1029	Identifier	setType
>1030	ArrayIndexing	p [ \"amountResolved\" ]
>1031	PrimaryExpression	\"amountResolved\"
>1032	Identifier	p
>1033	IdentifierDeclStatement	 
>1034	IdentifierDecl	& p = i -> next ( )
>1035	AssignmentExpr	& p = i -> next ( )
>1036	CallExpression	i -> next ( )
>1037	ArgumentList	 
>1038	Callee	i -> next
>1039	PtrMemberAccess	i -> next
>1040	Identifier	next
>1041	Identifier	i
>1042	Identifier	p
>1043	Identifier	p
>1044	IdentifierDeclType	Payee &
>1045	Condition	 
>1046	CallExpression	i -> hasNext ( )
>1047	ArgumentList	 
>1048	Callee	i -> hasNext
>1049	PtrMemberAccess	i -> hasNext
>1050	Identifier	hasNext
>1051	Identifier	i
>1052	IdentifierDeclStatement	 
>1053	IdentifierDecl	i = payees . getIterator ( )
>1054	AssignmentExpr	i = payees . getIterator ( )
>1055	CallExpression	payees . getIterator ( )
>1056	ArgumentList	 
>1057	Callee	payees . getIterator
>1058	MemberAccess	payees . getIterator
>1059	Identifier	getIterator
>1060	Identifier	payees
>1061	Identifier	i
>1062	Identifier	i
>1063	IdentifierDeclType	PayeeIterator
>1064	ExpressionStatement	 
>1065	CallExpression	tmp . setPrecision ( 7 , Down )
>1066	ArgumentList	7
>1067	Argument	Down
>1068	Identifier	Down
>1069	Argument	7
>1070	PrimaryExpression	7
>1071	Callee	tmp . setPrecision
>1072	MemberAccess	tmp . setPrecision
>1073	Identifier	setPrecision
>1074	Identifier	tmp
>1075	ExpressionStatement	 
>1076	CallExpression	min . setPrecision ( 7 , Down )
>1077	ArgumentList	7
>1078	Argument	Down
>1079	Identifier	Down
>1080	Argument	7
>1081	PrimaryExpression	7
>1082	Callee	min . setPrecision
>1083	MemberAccess	min . setPrecision
>1084	Identifier	setPrecision
>1085	Identifier	min
>1086	IdentifierDeclStatement	 
>1087	IdentifierDecl	tmp ( 0 )
>1088	PrimaryExpression	0
>1089	Identifier	tmp
>1090	IdentifierDeclType	BigDecimal
>1091	IdentifierDeclStatement	 
>1092	IdentifierDecl	min ( 0 )
>1093	PrimaryExpression	0
>1094	Identifier	min
>1095	IdentifierDeclType	BigDecimal
>1096	ExpressionStatement	 
>1097	CallExpression	taxPayees -> setType ( Array )
>1098	ArgumentList	Array
>1099	Argument	Array
>1100	Identifier	Array
>1101	Callee	taxPayees -> setType
>1102	PtrMemberAccess	taxPayees -> setType
>1103	Identifier	setType
>1104	Identifier	taxPayees
>1105	IdentifierDeclStatement	 
>1106	IdentifierDecl	taxPayees
>1107	Identifier	taxPayees
>1108	IdentifierDeclType	PayeeList
>1109	ExpressionStatement	 
>1110	CallExpression	potPayees -> setType ( Array )
>1111	ArgumentList	Array
>1112	Argument	Array
>1113	Identifier	Array
>1114	Callee	potPayees -> setType
>1115	PtrMemberAccess	potPayees -> setType
>1116	Identifier	setType
>1117	Identifier	potPayees
>1118	IdentifierDeclStatement	 
>1119	IdentifierDecl	potPayees
>1120	Identifier	potPayees
>1121	IdentifierDeclType	PayeeList
>1122	ExpressionStatement	 
>1123	CallExpression	license . setPrecision ( 7 , Down )
>1124	ArgumentList	7
>1125	Argument	Down
>1126	Identifier	Down
>1127	Argument	7
>1128	PrimaryExpression	7
>1129	Callee	license . setPrecision
>1130	MemberAccess	license . setPrecision
>1131	Identifier	setPrecision
>1132	Identifier	license
>1133	ExpressionStatement	 
>1134	CallExpression	taxableTotal . setPrecision ( 7 , Down )
>1135	ArgumentList	7
>1136	Argument	Down
>1137	Identifier	Down
>1138	Argument	7
>1139	PrimaryExpression	7
>1140	Callee	taxableTotal . setPrecision
>1141	MemberAccess	taxableTotal . setPrecision
>1142	Identifier	setPrecision
>1143	Identifier	taxableTotal
>1144	ExpressionStatement	 
>1145	CallExpression	total . setPrecision ( 7 , Down )
>1146	ArgumentList	7
>1147	Argument	Down
>1148	Identifier	Down
>1149	Argument	7
>1150	PrimaryExpression	7
>1151	Callee	total . setPrecision
>1152	MemberAccess	total . setPrecision
>1153	Identifier	setPrecision
>1154	Identifier	total
>1155	IdentifierDeclStatement	 
>1156	IdentifierDecl	license = ( licenseIn != NULL ? * licenseIn 
>1157	AssignmentExpr	license = ( licenseIn != NULL ? * licenseIn 
>1158	ConditionalExpression	licenseIn != NULL ? * licenseIn 
>1159	PrimaryExpression	0
>1160	UnaryOp	* licenseIn
>1161	Identifier	licenseIn
>1162	UnaryOperator	*
>1163	Condition	licenseIn != NULL
>1164	EqualityExpression	licenseIn != NULL
>1165	Identifier	NULL
>1166	Identifier	licenseIn
>1167	Identifier	license
>1168	Identifier	license
>1169	IdentifierDeclType	BigDecimal
>1170	IdentifierDeclStatement	 
>1171	IdentifierDecl	taxableTotal ( 0 )
>1172	PrimaryExpression	0
>1173	Identifier	taxableTotal
>1174	IdentifierDeclType	BigDecimal
>1175	IdentifierDeclStatement	 
>1176	IdentifierDecl	total ( 0 )
>1177	PrimaryExpression	0
>1178	Identifier	total
>1179	IdentifierDeclType	BigDecimal
>1226	FunctionDef	Tools 
>1227	ParameterList	DynamicObject options
>1228	Parameter	 
>1229	Identifier	options
>1230	ParameterType	DynamicObject
>1231	ReturnType	DynamicObject
>1232	CompoundStatement	 
>1233	ReturnStatement	 
>1234	Identifier	rval
>1235	ExpressionStatement	 
>1236	AssignmentExpr	rval [ \"total\" ] = total . toString ( true ) . c_str ( )
>1237	CallExpression	total . toString ( true ) . c_str ( )
>1238	ArgumentList	 
>1239	Callee	total . toString ( true ) . c_str
>1240	MemberAccess	total . toString ( true ) . c_str
>1241	Identifier	c_str
>1242	CallExpression	total . toString ( true )
>1243	ArgumentList	true
>1244	Argument	true
>1245	Identifier	true
>1246	Callee	total . toString
>1247	MemberAccess	total . toString
>1248	Identifier	toString
>1249	Identifier	total
>1250	ArrayIndexing	rval [ \"total\" ]
>1251	PrimaryExpression	\"total\"
>1252	Identifier	rval
>1253	ExpressionStatement	 
>1254	AssignmentExpr	rval [ \"dataTotal\" ] = dataTotal . toString ( true ) . c_str ( )
>1255	CallExpression	dataTotal . toString ( true ) . c_str ( )
>1256	ArgumentList	 
>1257	Callee	dataTotal . toString ( true ) . c_str
>1258	MemberAccess	dataTotal . toString ( true ) . c_str
>1259	Identifier	c_str
>1260	CallExpression	dataTotal . toString ( true )
>1261	ArgumentList	true
>1262	Argument	true
>1263	Identifier	true
>1264	Callee	dataTotal . toString
>1265	MemberAccess	dataTotal . toString
>1266	Identifier	toString
>1267	Identifier	dataTotal
>1268	ArrayIndexing	rval [ \"dataTotal\" ]
>1269	PrimaryExpression	\"dataTotal\"
>1270	Identifier	rval
>1271	ExpressionStatement	 
>1272	AssignmentExpr	rval [ \"piecesCost\" ] = piecesCost . toString ( true ) . c_str ( )
>1273	CallExpression	piecesCost . toString ( true ) . c_str ( )
>1274	ArgumentList	 
>1275	Callee	piecesCost . toString ( true ) . c_str
>1276	MemberAccess	piecesCost . toString ( true ) . c_str
>1277	Identifier	c_str
>1278	CallExpression	piecesCost . toString ( true )
>1279	ArgumentList	true
>1280	Argument	true
>1281	Identifier	true
>1282	Callee	piecesCost . toString
>1283	MemberAccess	piecesCost . toString
>1284	Identifier	toString
>1285	Identifier	piecesCost
>1286	ArrayIndexing	rval [ \"piecesCost\" ]
>1287	PrimaryExpression	\"piecesCost\"
>1288	Identifier	rval
>1289	ExpressionStatement	 
>1290	AssignmentExpr	rval [ \"dataCost\" ] = dataCost . toString ( true ) . c_str ( )
>1291	CallExpression	dataCost . toString ( true ) . c_str ( )
>1292	ArgumentList	 
>1293	Callee	dataCost . toString ( true ) . c_str
>1294	MemberAccess	dataCost . toString ( true ) . c_str
>1295	Identifier	c_str
>1296	CallExpression	dataCost . toString ( true )
>1297	ArgumentList	true
>1298	Argument	true
>1299	Identifier	true
>1300	Callee	dataCost . toString
>1301	MemberAccess	dataCost . toString
>1302	Identifier	toString
>1303	Identifier	dataCost
>1304	ArrayIndexing	rval [ \"dataCost\" ]
>1305	PrimaryExpression	\"dataCost\"
>1306	Identifier	rval
>1307	ExpressionStatement	 
>1308	AssignmentExpr	rval [ \"licenseCost\" ] = licenseCost . toString ( true ) . c_str ( )
>1309	CallExpression	licenseCost . toString ( true ) . c_str ( )
>1310	ArgumentList	 
>1311	Callee	licenseCost . toString ( true ) . c_str
>1312	MemberAccess	licenseCost . toString ( true ) . c_str
>1313	Identifier	c_str
>1314	CallExpression	licenseCost . toString ( true )
>1315	ArgumentList	true
>1316	Argument	true
>1317	Identifier	true
>1318	Callee	licenseCost . toString
>1319	MemberAccess	licenseCost . toString
>1320	Identifier	toString
>1321	Identifier	licenseCost
>1322	ArrayIndexing	rval [ \"licenseCost\" ]
>1323	PrimaryExpression	\"licenseCost\"
>1324	Identifier	rval
>1325	ExpressionStatement	 
>1326	AssignmentExpr	rval = options . clone ( )
>1327	CallExpression	options . clone ( )
>1328	ArgumentList	 
>1329	Callee	options . clone
>1330	MemberAccess	options . clone
>1331	Identifier	clone
>1332	Identifier	options
>1333	Identifier	rval
>1334	ExpressionStatement	 
>1335	CallExpression	dataTotal . round ( )
>1336	ArgumentList	 
>1337	Callee	dataTotal . round
>1338	MemberAccess	dataTotal . round
>1339	Identifier	round
>1340	Identifier	dataTotal
>1341	ExpressionStatement	 
>1342	CallExpression	dataTotal . setPrecision ( 7 , Down )
>1343	ArgumentList	7
>1344	Argument	Down
>1345	Identifier	Down
>1346	Argument	7
>1347	PrimaryExpression	7
>1348	Callee	dataTotal . setPrecision
>1349	MemberAccess	dataTotal . setPrecision
>1350	Identifier	setPrecision
>1351	Identifier	dataTotal
>1352	IdentifierDeclStatement	 
>1353	IdentifierDecl	dataTotal = dataCost + piecesCost
>1354	AssignmentExpr	dataTotal = dataCost + piecesCost
>1355	AdditiveExpression	dataCost + piecesCost
>1356	Identifier	piecesCost
>1357	Identifier	dataCost
>1358	Identifier	dataTotal
>1359	Identifier	dataTotal
>1360	IdentifierDeclType	BigDecimal
>1361	ExpressionStatement	 
>1362	CallExpression	total . round ( )
>1363	ArgumentList	 
>1364	Callee	total . round
>1365	MemberAccess	total . round
>1366	Identifier	round
>1367	Identifier	total
>1368	ExpressionStatement	 
>1369	CallExpression	total . setPrecision ( 7 , Down )
>1370	ArgumentList	7
>1371	Argument	Down
>1372	Identifier	Down
>1373	Argument	7
>1374	PrimaryExpression	7
>1375	Callee	total . setPrecision
>1376	MemberAccess	total . setPrecision
>1377	Identifier	setPrecision
>1378	Identifier	total
>1379	IdentifierDeclStatement	 
>1380	IdentifierDecl	total = licenseCost + dataCost + piecesCost
>1381	AssignmentExpr	total = licenseCost + dataCost + piecesCost
>1382	AdditiveExpression	licenseCost + dataCost + piecesCost
>1383	AdditiveExpression	dataCost + piecesCost
>1384	Identifier	piecesCost
>1385	Identifier	dataCost
>1386	Identifier	licenseCost
>1387	Identifier	total
>1388	Identifier	total
>1389	IdentifierDeclType	BigDecimal
>1390	IfStatement	if ( options -> hasMember ( \"filePieceCount\" ) && options -> hasMember ( \"piecePayees\" ) )
>1391	CompoundStatement	 
>1392	IfStatement	if ( piecesCount > 0 )
>1393	CompoundStatement	 
>1394	WhileStatement	while ( i -> hasNext ( ) )
>1395	CompoundStatement	 
>1396	ExpressionStatement	 
>1397	AssignmentExpr	piecesCost += tmp
>1398	Identifier	tmp
>1399	Identifier	piecesCost
>1400	ExpressionStatement	 
>1401	AssignmentExpr	p [ \"amountResolved\" ] = true
>1402	Identifier	true
>1403	ArrayIndexing	p [ \"amountResolved\" ]
>1404	PrimaryExpression	\"amountResolved\"
>1405	Identifier	p
>1406	ExpressionStatement	 
>1407	AssignmentExpr	p [ \"amount\" ] = tmp . toString ( true ) . c_str ( )
>1408	CallExpression	tmp . toString ( true ) . c_str ( )
>1409	ArgumentList	 
>1410	Callee	tmp . toString ( true ) . c_str
>1411	MemberAccess	tmp . toString ( true ) . c_str
>1412	Identifier	c_str
>1413	CallExpression	tmp . toString ( true )
>1414	ArgumentList	true
>1415	Argument	true
>1416	Identifier	true
>1417	Callee	tmp . toString
>1418	MemberAccess	tmp . toString
>1419	Identifier	toString
>1420	Identifier	tmp
>1421	ArrayIndexing	p [ \"amount\" ]
>1422	PrimaryExpression	\"amount\"
>1423	Identifier	p
>1424	ExpressionStatement	 
>1425	CallExpression	tmp . round ( )
>1426	ArgumentList	 
>1427	Callee	tmp . round
>1428	MemberAccess	tmp . round
>1429	Identifier	round
>1430	Identifier	tmp
>1431	ExpressionStatement	 
>1432	AssignmentExpr	tmp *= piecesCount
>1433	Identifier	piecesCount
>1434	Identifier	tmp
>1435	ExpressionStatement	 
>1436	AssignmentExpr	tmp = p [ \"amount\" ] -> getString ( )
>1437	CallExpression	p [ \"amount\" ] -> getString ( )
>1438	ArgumentList	 
>1439	Callee	p [ \"amount\" ] -> getString
>1440	PtrMemberAccess	p [ \"amount\" ] -> getString
>1441	Identifier	getString
>1442	ArrayIndexing	p [ \"amount\" ]
>1443	PrimaryExpression	\"amount\"
>1444	Identifier	p
>1445	Identifier	tmp
>1446	IdentifierDeclStatement	 
>1447	IdentifierDecl	& p = i -> next ( )
>1448	AssignmentExpr	& p = i -> next ( )
>1449	CallExpression	i -> next ( )
>1450	ArgumentList	 
>1451	Callee	i -> next
>1452	PtrMemberAccess	i -> next
>1453	Identifier	next
>1454	Identifier	i
>1455	Identifier	p
>1456	Identifier	p
>1457	IdentifierDeclType	Payee &
>1458	Condition	 
>1459	CallExpression	i -> hasNext ( )
>1460	ArgumentList	 
>1461	Callee	i -> hasNext
>1462	PtrMemberAccess	i -> hasNext
>1463	Identifier	hasNext
>1464	Identifier	i
>1465	IdentifierDeclStatement	 
>1466	IdentifierDecl	i = payees . getIterator ( )
>1467	AssignmentExpr	i = payees . getIterator ( )
>1468	CallExpression	payees . getIterator ( )
>1469	ArgumentList	 
>1470	Callee	payees . getIterator
>1471	MemberAccess	payees . getIterator
>1472	Identifier	getIterator
>1473	Identifier	payees
>1474	Identifier	i
>1475	Identifier	i
>1476	IdentifierDeclType	PayeeIterator
>1477	IdentifierDeclStatement	 
>1478	IdentifierDecl	& payees = options [ \"piecePayees\" ]
>1479	AssignmentExpr	& payees = options [ \"piecePayees\" ]
>1480	ArrayIndexing	options [ \"piecePayees\" ]
>1481	PrimaryExpression	\"piecePayees\"
>1482	Identifier	options
>1483	Identifier	payees
>1484	Identifier	payees
>1485	IdentifierDeclType	PayeeList &
>1486	ExpressionStatement	 
>1487	CallExpression	options [ \"piecePayees\" ] -> setType ( Array )
>1488	ArgumentList	Array
>1489	Argument	Array
>1490	Identifier	Array
>1491	Callee	options [ \"piecePayees\" ] -> setType
>1492	PtrMemberAccess	options [ \"piecePayees\" ] -> setType
>1493	Identifier	setType
>1494	ArrayIndexing	options [ \"piecePayees\" ]
>1495	PrimaryExpression	\"piecePayees\"
>1496	Identifier	options
>1497	ExpressionStatement	 
>1498	CallExpression	tmp . setPrecision ( 7 , Down )
>1499	ArgumentList	7
>1500	Argument	Down
>1501	Identifier	Down
>1502	Argument	7
>1503	PrimaryExpression	7
>1504	Callee	tmp . setPrecision
>1505	MemberAccess	tmp . setPrecision
>1506	Identifier	setPrecision
>1507	Identifier	tmp
>1508	IdentifierDeclStatement	 
>1509	IdentifierDecl	tmp
>1510	Identifier	tmp
>1511	IdentifierDeclType	BigDecimal
>1512	Condition	 
>1513	RelationalExpression	piecesCount > 0
>1514	PrimaryExpression	0
>1515	Identifier	piecesCount
>1516	IdentifierDeclStatement	 
>1517	IdentifierDecl	piecesCount = options [ \"filePieceCount\" ] -> getUInt64 ( )
>1518	AssignmentExpr	piecesCount = options [ \"filePieceCount\" ] -> getUInt64 ( )
>1519	CallExpression	options [ \"filePieceCount\" ] -> getUInt64 ( )
>1520	ArgumentList	 
>1521	Callee	options [ \"filePieceCount\" ] -> getUInt64
>1522	PtrMemberAccess	options [ \"filePieceCount\" ] -> getUInt64
>1523	Identifier	getUInt64
>1524	ArrayIndexing	options [ \"filePieceCount\" ]
>1525	PrimaryExpression	\"filePieceCount\"
>1526	Identifier	options
>1527	Identifier	piecesCount
>1528	Identifier	piecesCount
>1529	IdentifierDeclType	uint64_t
>1530	Condition	 
>1531	AndExpression	options -> hasMember ( \"filePieceCount\" ) && options -> hasMember ( \"piecePayees\" )
>1532	CallExpression	options -> hasMember ( \"piecePayees\" )
>1533	ArgumentList	\"piecePayees\"
>1534	Argument	\"piecePayees\"
>1535	PrimaryExpression	\"piecePayees\"
>1536	Callee	options -> hasMember
>1537	PtrMemberAccess	options -> hasMember
>1538	Identifier	hasMember
>1539	Identifier	options
>1540	CallExpression	options -> hasMember ( \"filePieceCount\" )
>1541	ArgumentList	\"filePieceCount\"
>1542	Argument	\"filePieceCount\"
>1543	PrimaryExpression	\"filePieceCount\"
>1544	Callee	options -> hasMember
>1545	PtrMemberAccess	options -> hasMember
>1546	Identifier	hasMember
>1547	Identifier	options
>1548	IdentifierDeclStatement	 
>1549	IdentifierDecl	piecesCost
>1550	Identifier	piecesCost
>1551	IdentifierDeclType	BigDecimal
>1552	IfStatement	if ( options -> hasMember ( \"dataAmount\" ) )
>1553	ElseStatement	else
>1554	IfStatement	if ( options -> hasMember ( \"dataPayees\" ) )
>1555	CompoundStatement	 
>1556	ExpressionStatement	 
>1557	CallExpression	Tools 
>1558	ArgumentList	payees
>1559	Argument	& licenseCost
>1560	UnaryOp	& licenseCost
>1561	Identifier	licenseCost
>1562	UnaryOperator	&
>1563	Argument	& dataCost
>1564	UnaryOp	& dataCost
>1565	Identifier	dataCost
>1566	UnaryOperator	&
>1567	Argument	payees
>1568	Identifier	payees
>1569	Callee	Tools 
>1570	Identifier	Tools 
>1571	IdentifierDeclStatement	 
>1572	IdentifierDecl	& payees = options [ \"dataPayees\" ]
>1573	AssignmentExpr	& payees = options [ \"dataPayees\" ]
>1574	ArrayIndexing	options [ \"dataPayees\" ]
>1575	PrimaryExpression	\"dataPayees\"
>1576	Identifier	options
>1577	Identifier	payees
>1578	Identifier	payees
>1579	IdentifierDeclType	PayeeList &
>1580	ExpressionStatement	 
>1581	CallExpression	options [ \"dataPayees\" ] -> setType ( Array )
>1582	ArgumentList	Array
>1583	Argument	Array
>1584	Identifier	Array
>1585	Callee	options [ \"dataPayees\" ] -> setType
>1586	PtrMemberAccess	options [ \"dataPayees\" ] -> setType
>1587	Identifier	setType
>1588	ArrayIndexing	options [ \"dataPayees\" ]
>1589	PrimaryExpression	\"dataPayees\"
>1590	Identifier	options
>1591	Condition	 
>1592	CallExpression	options -> hasMember ( \"dataPayees\" )
>1593	ArgumentList	\"dataPayees\"
>1594	Argument	\"dataPayees\"
>1595	PrimaryExpression	\"dataPayees\"
>1596	Callee	options -> hasMember
>1597	PtrMemberAccess	options -> hasMember
>1598	Identifier	hasMember
>1599	Identifier	options
>1600	CompoundStatement	 
>1601	ExpressionStatement	 
>1602	AssignmentExpr	dataCost = options [ \"dataAmount\" ] -> getString ( )
>1603	CallExpression	options [ \"dataAmount\" ] -> getString ( )
>1604	ArgumentList	 
>1605	Callee	options [ \"dataAmount\" ] -> getString
>1606	PtrMemberAccess	options [ \"dataAmount\" ] -> getString
>1607	Identifier	getString
>1608	ArrayIndexing	options [ \"dataAmount\" ]
>1609	PrimaryExpression	\"dataAmount\"
>1610	Identifier	options
>1611	Identifier	dataCost
>1612	Condition	 
>1613	CallExpression	options -> hasMember ( \"dataAmount\" )
>1614	ArgumentList	\"dataAmount\"
>1615	Argument	\"dataAmount\"
>1616	PrimaryExpression	\"dataAmount\"
>1617	Callee	options -> hasMember
>1618	PtrMemberAccess	options -> hasMember
>1619	Identifier	hasMember
>1620	Identifier	options
>1621	IdentifierDeclStatement	 
>1622	IdentifierDecl	dataCost ( 0 )
>1623	PrimaryExpression	0
>1624	Identifier	dataCost
>1625	IdentifierDeclType	BigDecimal
>1626	IfStatement	if ( options -> hasMember ( \"licenseAmount\" ) )
>1627	ElseStatement	else
>1628	CompoundStatement	 
>1629	ExpressionStatement	 
>1630	CallExpression	Tools 
>1631	ArgumentList	payees
>1632	Argument	& licenseCost
>1633	UnaryOp	& licenseCost
>1634	Identifier	licenseCost
>1635	UnaryOperator	&
>1636	Argument	payees
>1637	Identifier	payees
>1638	Callee	Tools 
>1639	Identifier	Tools 
>1640	IdentifierDeclStatement	 
>1641	IdentifierDecl	& payees = options [ \"licensePayees\" ]
>1642	AssignmentExpr	& payees = options [ \"licensePayees\" ]
>1643	ArrayIndexing	options [ \"licensePayees\" ]
>1644	PrimaryExpression	\"licensePayees\"
>1645	Identifier	options
>1646	Identifier	payees
>1647	Identifier	payees
>1648	IdentifierDeclType	PayeeList &
>1649	ExpressionStatement	 
>1650	CallExpression	options [ \"licensePayees\" ] -> setType ( Array )
>1651	ArgumentList	Array
>1652	Argument	Array
>1653	Identifier	Array
>1654	Callee	options [ \"licensePayees\" ] -> setType
>1655	PtrMemberAccess	options [ \"licensePayees\" ] -> setType
>1656	Identifier	setType
>1657	ArrayIndexing	options [ \"licensePayees\" ]
>1658	PrimaryExpression	\"licensePayees\"
>1659	Identifier	options
>1660	CompoundStatement	 
>1661	ExpressionStatement	 
>1662	AssignmentExpr	licenseCost = options [ \"licenseAmount\" ] -> getString ( )
>1663	CallExpression	options [ \"licenseAmount\" ] -> getString ( )
>1664	ArgumentList	 
>1665	Callee	options [ \"licenseAmount\" ] -> getString
>1666	PtrMemberAccess	options [ \"licenseAmount\" ] -> getString
>1667	Identifier	getString
>1668	ArrayIndexing	options [ \"licenseAmount\" ]
>1669	PrimaryExpression	\"licenseAmount\"
>1670	Identifier	options
>1671	Identifier	licenseCost
>1672	Condition	 
>1673	CallExpression	options -> hasMember ( \"licenseAmount\" )
>1674	ArgumentList	\"licenseAmount\"
>1675	Argument	\"licenseAmount\"
>1676	PrimaryExpression	\"licenseAmount\"
>1677	Callee	options -> hasMember
>1678	PtrMemberAccess	options -> hasMember
>1679	Identifier	hasMember
>1680	Identifier	options
>1681	IdentifierDeclStatement	 
>1682	IdentifierDecl	licenseCost ( 0 )
>1683	PrimaryExpression	0
>1684	Identifier	licenseCost
>1685	IdentifierDeclType	BigDecimal
>1686	IdentifierDeclStatement	 
>1687	IdentifierDecl	rval ( NULL )
>1688	Identifier	NULL
>1689	Identifier	rval
>1690	IdentifierDeclType	DynamicObject
>1738	FunctionDef	Tools 
>1739	ParameterList	Media & media , MediaId mediaId , const char * extension
>1740	Parameter	 
>1741	Identifier	extension
>1742	ParameterType	const char *
>1743	Parameter	 
>1744	Identifier	mediaId
>1745	ParameterType	MediaId
>1746	Parameter	 
>1747	Identifier	media
>1748	ParameterType	Media &
>1749	ReturnType	string
>1750	CompoundStatement	 
>1751	ReturnStatement	 
>1752	Identifier	fullname
>1753	ExpressionStatement	 
>1754	CallExpression	fullname . append ( PathFormatter 
>1755	ArgumentList	PathFormatter 
>1756	Argument	PathFormatter 
>1757	CallExpression	PathFormatter 
>1758	ArgumentList	filename
>1759	Argument	filename
>1760	Identifier	filename
>1761	Callee	PathFormatter 
>1762	Identifier	PathFormatter 
>1763	Callee	fullname . append
>1764	MemberAccess	fullname . append
>1765	Identifier	append
>1766	Identifier	fullname
>1767	ExpressionStatement	 
>1768	CallExpression	filename . append ( extension )
>1769	ArgumentList	extension
>1770	Argument	extension
>1771	Identifier	extension
>1772	Callee	filename . append
>1773	MemberAccess	filename . append
>1774	Identifier	append
>1775	Identifier	filename
>1776	ExpressionStatement	 
>1777	CallExpression	filename . push_back ( '.' )
>1778	ArgumentList	'.'
>1779	Argument	'.'
>1780	PrimaryExpression	'.'
>1781	Callee	filename . push_back
>1782	MemberAccess	filename . push_back
>1783	Identifier	push_back
>1784	Identifier	filename
>1785	IfStatement	if ( strlen ( fileMedia [ \"title\" ] -> getString ( ) ) > 0 )
>1786	ElseStatement	else
>1787	CompoundStatement	 
>1788	ExpressionStatement	 
>1789	CallExpression	filename . append ( fileMedia [ \"id\" ] -> getString ( ) )
>1790	ArgumentList	fileMedia [ \"id\" ] -> getString ( )
>1791	Argument	fileMedia [ \"id\" ] -> getString ( )
>1792	CallExpression	fileMedia [ \"id\" ] -> getString ( )
>1793	ArgumentList	 
>1794	Callee	fileMedia [ \"id\" ] -> getString
>1795	PtrMemberAccess	fileMedia [ \"id\" ] -> getString
>1796	Identifier	getString
>1797	ArrayIndexing	fileMedia [ \"id\" ]
>1798	PrimaryExpression	\"id\"
>1799	Identifier	fileMedia
>1800	Callee	filename . append
>1801	MemberAccess	filename . append
>1802	Identifier	append
>1803	Identifier	filename
>1804	CompoundStatement	 
>1805	ExpressionStatement	 
>1806	CallExpression	filename . append ( fileMedia [ \"title\" ] -> getString ( ) )
>1807	ArgumentList	fileMedia [ \"title\" ] -> getString ( )
>1808	Argument	fileMedia [ \"title\" ] -> getString ( )
>1809	CallExpression	fileMedia [ \"title\" ] -> getString ( )
>1810	ArgumentList	 
>1811	Callee	fileMedia [ \"title\" ] -> getString
>1812	PtrMemberAccess	fileMedia [ \"title\" ] -> getString
>1813	Identifier	getString
>1814	ArrayIndexing	fileMedia [ \"title\" ]
>1815	PrimaryExpression	\"title\"
>1816	Identifier	fileMedia
>1817	Callee	filename . append
>1818	MemberAccess	filename . append
>1819	Identifier	append
>1820	Identifier	filename
>1821	Condition	 
>1822	RelationalExpression	strlen ( fileMedia [ \"title\" ] -> getString ( ) ) > 0
>1823	PrimaryExpression	0
>1824	CallExpression	strlen ( fileMedia [ \"title\" ] -> getString ( ) )
>1825	ArgumentList	fileMedia [ \"title\" ] -> getString ( )
>1826	Argument	fileMedia [ \"title\" ] -> getString ( )
>1827	CallExpression	fileMedia [ \"title\" ] -> getString ( )
>1828	ArgumentList	 
>1829	Callee	fileMedia [ \"title\" ] -> getString
>1830	PtrMemberAccess	fileMedia [ \"title\" ] -> getString
>1831	Identifier	getString
>1832	ArrayIndexing	fileMedia [ \"title\" ]
>1833	PrimaryExpression	\"title\"
>1834	Identifier	fileMedia
>1835	Callee	strlen
>1836	Identifier	strlen
>1837	IfStatement	if ( fileMedia [ \"contributors\" ] -> hasMember ( \"Performer\" ) )
>1838	ElseStatement	else
>1839	IfStatement	if ( fileMedia [ \"contributors\" ] -> hasMember ( \"Copyright Owner\" ) )
>1840	ElseStatement	else
>1841	IfStatement	if ( fileMedia [ \"contributors\" ] -> hasMember ( \"Publisher\" ) )
>1842	CompoundStatement	 
>1843	ExpressionStatement	 
>1844	CallExpression	filename . push_back ( '-' )
>1845	ArgumentList	'-'
>1846	Argument	'-'
>1847	PrimaryExpression	'-'
>1848	Callee	filename . push_back
>1849	MemberAccess	filename . push_back
>1850	Identifier	push_back
>1851	Identifier	filename
>1852	ExpressionStatement	 
>1853	CallExpression	filename . append ( fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ] [ \"name\" ] -> getString ( ) )
>1854	ArgumentList	fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1855	Argument	fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1856	CallExpression	fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1857	ArgumentList	 
>1858	Callee	fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ] [ \"name\" ] -> getString
>1859	PtrMemberAccess	fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ] [ \"name\" ] -> getString
>1860	Identifier	getString
>1861	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ] [ \"name\" ]
>1862	PrimaryExpression	\"name\"
>1863	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Publisher\" ] [ 0 ]
>1864	PrimaryExpression	0
>1865	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Publisher\" ]
>1866	PrimaryExpression	\"Publisher\"
>1867	ArrayIndexing	fileMedia [ \"contributors\" ]
>1868	PrimaryExpression	\"contributors\"
>1869	Identifier	fileMedia
>1870	Callee	filename . append
>1871	MemberAccess	filename . append
>1872	Identifier	append
>1873	Identifier	filename
>1874	Condition	 
>1875	CallExpression	fileMedia [ \"contributors\" ] -> hasMember ( \"Publisher\" )
>1876	ArgumentList	\"Publisher\"
>1877	Argument	\"Publisher\"
>1878	PrimaryExpression	\"Publisher\"
>1879	Callee	fileMedia [ \"contributors\" ] -> hasMember
>1880	PtrMemberAccess	fileMedia [ \"contributors\" ] -> hasMember
>1881	Identifier	hasMember
>1882	ArrayIndexing	fileMedia [ \"contributors\" ]
>1883	PrimaryExpression	\"contributors\"
>1884	Identifier	fileMedia
>1885	CompoundStatement	 
>1886	ExpressionStatement	 
>1887	CallExpression	filename . push_back ( '-' )
>1888	ArgumentList	'-'
>1889	Argument	'-'
>1890	PrimaryExpression	'-'
>1891	Callee	filename . push_back
>1892	MemberAccess	filename . push_back
>1893	Identifier	push_back
>1894	Identifier	filename
>1895	ExpressionStatement	 
>1896	CallExpression	filename . append ( fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ] [ \"name\" ] -> getString ( ) )
>1897	ArgumentList	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1898	Argument	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1899	CallExpression	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1900	ArgumentList	 
>1901	Callee	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ] [ \"name\" ] -> getString
>1902	PtrMemberAccess	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ] [ \"name\" ] -> getString
>1903	Identifier	getString
>1904	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ] [ \"name\" ]
>1905	PrimaryExpression	\"name\"
>1906	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ] [ 0 ]
>1907	PrimaryExpression	0
>1908	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Copyright Owner\" ]
>1909	PrimaryExpression	\"Copyright Owner\"
>1910	ArrayIndexing	fileMedia [ \"contributors\" ]
>1911	PrimaryExpression	\"contributors\"
>1912	Identifier	fileMedia
>1913	Callee	filename . append
>1914	MemberAccess	filename . append
>1915	Identifier	append
>1916	Identifier	filename
>1917	Condition	 
>1918	CallExpression	fileMedia [ \"contributors\" ] -> hasMember ( \"Copyright Owner\" )
>1919	ArgumentList	\"Copyright Owner\"
>1920	Argument	\"Copyright Owner\"
>1921	PrimaryExpression	\"Copyright Owner\"
>1922	Callee	fileMedia [ \"contributors\" ] -> hasMember
>1923	PtrMemberAccess	fileMedia [ \"contributors\" ] -> hasMember
>1924	Identifier	hasMember
>1925	ArrayIndexing	fileMedia [ \"contributors\" ]
>1926	PrimaryExpression	\"contributors\"
>1927	Identifier	fileMedia
>1928	CompoundStatement	 
>1929	ExpressionStatement	 
>1930	CallExpression	filename . push_back ( '-' )
>1931	ArgumentList	'-'
>1932	Argument	'-'
>1933	PrimaryExpression	'-'
>1934	Callee	filename . push_back
>1935	MemberAccess	filename . push_back
>1936	Identifier	push_back
>1937	Identifier	filename
>1938	ExpressionStatement	 
>1939	CallExpression	filename . append ( fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ] [ \"name\" ] -> getString ( ) )
>1940	ArgumentList	fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1941	Argument	fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1942	CallExpression	fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ] [ \"name\" ] -> getString ( )
>1943	ArgumentList	 
>1944	Callee	fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ] [ \"name\" ] -> getString
>1945	PtrMemberAccess	fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ] [ \"name\" ] -> getString
>1946	Identifier	getString
>1947	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ] [ \"name\" ]
>1948	PrimaryExpression	\"name\"
>1949	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Performer\" ] [ 0 ]
>1950	PrimaryExpression	0
>1951	ArrayIndexing	fileMedia [ \"contributors\" ] [ \"Performer\" ]
>1952	PrimaryExpression	\"Performer\"
>1953	ArrayIndexing	fileMedia [ \"contributors\" ]
>1954	PrimaryExpression	\"contributors\"
>1955	Identifier	fileMedia
>1956	Callee	filename . append
>1957	MemberAccess	filename . append
>1958	Identifier	append
>1959	Identifier	filename
>1960	Condition	 
>1961	CallExpression	fileMedia [ \"contributors\" ] -> hasMember ( \"Performer\" )
>1962	ArgumentList	\"Performer\"
>1963	Argument	\"Performer\"
>1964	PrimaryExpression	\"Performer\"
>1965	Callee	fileMedia [ \"contributors\" ] -> hasMember
>1966	PtrMemberAccess	fileMedia [ \"contributors\" ] -> hasMember
>1967	Identifier	hasMember
>1968	ArrayIndexing	fileMedia [ \"contributors\" ]
>1969	PrimaryExpression	\"contributors\"
>1970	Identifier	fileMedia
>1971	IfStatement	if ( position > 0 )
>1972	CompoundStatement	 
>1973	ExpressionStatement	 
>1974	CallExpression	filename . append ( \"-\" )
>1975	ArgumentList	\"-\"
>1976	Argument	\"-\"
>1977	PrimaryExpression	\"-\"
>1978	Callee	filename . append
>1979	MemberAccess	filename . append
>1980	Identifier	append
>1981	Identifier	filename
>1982	ExpressionStatement	 
>1983	CallExpression	filename . append ( positionString )
>1984	ArgumentList	positionString
>1985	Argument	positionString
>1986	Identifier	positionString
>1987	Callee	filename . append
>1988	MemberAccess	filename . append
>1989	Identifier	append
>1990	Identifier	filename
>1991	ExpressionStatement	 
>1992	CallExpression	snprintf ( positionString , 22 , maxPositionFormat , position )
>1993	ArgumentList	positionString
>1994	Argument	position
>1995	Identifier	position
>1996	Argument	maxPositionFormat
>1997	Identifier	maxPositionFormat
>1998	Argument	22
>1999	PrimaryExpression	22
>2000	Argument	positionString
>2001	Identifier	positionString
>2002	Callee	snprintf
>2003	Identifier	snprintf
>2004	ExpressionStatement	 
>2005	CallExpression	snprintf ( maxPositionFormat , 26 , \"%%0%uu\" , maxPositionLength )
>2006	ArgumentList	maxPositionFormat
>2007	Argument	maxPositionLength
>2008	Identifier	maxPositionLength
>2009	Argument	\"%%0%uu\"
>2010	PrimaryExpression	\"%%0%uu\"
>2011	Argument	26
>2012	PrimaryExpression	26
>2013	Argument	maxPositionFormat
>2014	Identifier	maxPositionFormat
>2015	Callee	snprintf
>2016	Identifier	snprintf
>2017	ExpressionStatement	 
>2018	AssignmentExpr	maxPositionLength = strlen ( maxPositionText )
>2019	CallExpression	strlen ( maxPositionText )
>2020	ArgumentList	maxPositionText
>2021	Argument	maxPositionText
>2022	Identifier	maxPositionText
>2023	Callee	strlen
>2024	Identifier	strlen
>2025	Identifier	maxPositionLength
>2026	ExpressionStatement	 
>2027	CallExpression	snprintf ( maxPositionText , 22 , \"%u\" , maxPosition )
>2028	ArgumentList	maxPositionText
>2029	Argument	maxPosition
>2030	Identifier	maxPosition
>2031	Argument	\"%u\"
>2032	PrimaryExpression	\"%u\"
>2033	Argument	22
>2034	PrimaryExpression	22
>2035	Argument	maxPositionText
>2036	Identifier	maxPositionText
>2037	Callee	snprintf
>2038	Identifier	snprintf
>2039	IdentifierDeclStatement	 
>2040	IdentifierDecl	maxPositionLength
>2041	Identifier	maxPositionLength
>2042	IdentifierDeclType	unsigned int
>2043	IdentifierDeclStatement	 
>2044	IdentifierDecl	maxPositionFormat [ 26 ]
>2045	PrimaryExpression	26
>2046	Identifier	maxPositionFormat
>2047	IdentifierDeclType	char [ 26 ]
>2048	IdentifierDeclStatement	 
>2049	IdentifierDecl	maxPositionText [ 22 ]
>2050	PrimaryExpression	22
>2051	Identifier	maxPositionText
>2052	IdentifierDeclType	char [ 22 ]
>2053	IdentifierDeclStatement	 
>2054	IdentifierDecl	positionString [ 22 ]
>2055	PrimaryExpression	22
>2056	Identifier	positionString
>2057	IdentifierDeclType	char [ 22 ]
>2058	Condition	 
>2059	RelationalExpression	position > 0
>2060	PrimaryExpression	0
>2061	Identifier	position
>2062	IdentifierDeclStatement	 
>2063	IdentifierDecl	filename
>2064	Identifier	filename
>2065	IdentifierDeclType	string
>2066	IfStatement	if ( ! BM_MEDIA_ID_EQUALS ( BM_MEDIA_ID ( media [ \"id\" ] ) , mediaId ) )
>2067	ElseStatement	else
>2068	CompoundStatement	 
>2069	ExpressionStatement	 
>2070	AssignmentExpr	fileMedia = media
>2071	Identifier	media
>2072	Identifier	fileMedia
>2073	CompoundStatement	 
>2074	WhileStatement	while ( gi -> hasNext ( ) )
>2075	CompoundStatement	 
>2076	WhileStatement	while ( mi -> hasNext ( ) )
>2077	CompoundStatement	 
>2078	IfStatement	if ( BM_MEDIA_ID_EQUALS ( BM_MEDIA_ID ( m [ \"id\" ] ) , mediaId ) )
>2079	CompoundStatement	 
>2080	ExpressionStatement	 
>2081	AssignmentExpr	position = maxPosition
>2082	Identifier	maxPosition
>2083	Identifier	position
>2084	ExpressionStatement	 
>2085	AssignmentExpr	fileMedia = m
>2086	Identifier	m
>2087	Identifier	fileMedia
>2088	Condition	 
>2089	CallExpression	BM_MEDIA_ID_EQUALS ( BM_MEDIA_ID ( m [ \"id\" ] ) , mediaId )
>2090	ArgumentList	BM_MEDIA_ID ( m [ \"id\" ] )
>2091	Argument	mediaId
>2092	Identifier	mediaId
>2093	Argument	BM_MEDIA_ID ( m [ \"id\" ] )
>2094	CallExpression	BM_MEDIA_ID ( m [ \"id\" ] )
>2095	ArgumentList	m [ \"id\" ]
>2096	Argument	m [ \"id\" ]
>2097	ArrayIndexing	m [ \"id\" ]
>2098	PrimaryExpression	\"id\"
>2099	Identifier	m
>2100	Callee	BM_MEDIA_ID
>2101	Identifier	BM_MEDIA_ID
>2102	Callee	BM_MEDIA_ID_EQUALS
>2103	Identifier	BM_MEDIA_ID_EQUALS
>2104	IdentifierDeclStatement	 
>2105	IdentifierDecl	& m = mi -> next ( )
>2106	AssignmentExpr	& m = mi -> next ( )
>2107	CallExpression	mi -> next ( )
>2108	ArgumentList	 
>2109	Callee	mi -> next
>2110	PtrMemberAccess	mi -> next
>2111	Identifier	next
>2112	Identifier	mi
>2113	Identifier	m
>2114	Identifier	m
>2115	IdentifierDeclType	Media &
>2116	ExpressionStatement	 
>2117	UnaryExpression	++ maxPosition
>2118	Identifier	maxPosition
>2119	IncDec	++
>2120	Condition	 
>2121	CallExpression	mi -> hasNext ( )
>2122	ArgumentList	 
>2123	Callee	mi -> hasNext
>2124	PtrMemberAccess	mi -> hasNext
>2125	Identifier	hasNext
>2126	Identifier	mi
>2127	IdentifierDeclStatement	 
>2128	IdentifierDecl	mi = group . getIterator ( )
>2129	AssignmentExpr	mi = group . getIterator ( )
>2130	CallExpression	group . getIterator ( )
>2131	ArgumentList	 
>2132	Callee	group . getIterator
>2133	MemberAccess	group . getIterator
>2134	Identifier	getIterator
>2135	Identifier	group
>2136	Identifier	mi
>2137	Identifier	mi
>2138	IdentifierDeclType	MediaIterator
>2139	IdentifierDeclStatement	 
>2140	IdentifierDecl	& group = gi -> next ( )
>2141	AssignmentExpr	& group = gi -> next ( )
>2142	CallExpression	gi -> next ( )
>2143	ArgumentList	 
>2144	Callee	gi -> next
>2145	PtrMemberAccess	gi -> next
>2146	Identifier	next
>2147	Identifier	gi
>2148	Identifier	group
>2149	Identifier	group
>2150	IdentifierDeclType	DynamicObject &
>2151	Condition	 
>2152	CallExpression	gi -> hasNext ( )
>2153	ArgumentList	 
>2154	Callee	gi -> hasNext
>2155	PtrMemberAccess	gi -> hasNext
>2156	Identifier	hasNext
>2157	Identifier	gi
>2158	IdentifierDeclStatement	 
>2159	IdentifierDecl	gi = media [ \"contents\" ] . getIterator ( )
>2160	AssignmentExpr	gi = media [ \"contents\" ] . getIterator ( )
>2161	CallExpression	media [ \"contents\" ] . getIterator ( )
>2162	ArgumentList	 
>2163	Callee	media [ \"contents\" ] . getIterator
>2164	MemberAccess	media [ \"contents\" ] . getIterator
>2165	Identifier	getIterator
>2166	ArrayIndexing	media [ \"contents\" ]
>2167	PrimaryExpression	\"contents\"
>2168	Identifier	media
>2169	Identifier	gi
>2170	Identifier	gi
>2171	IdentifierDeclType	DynamicObjectIterator
>2172	IfStatement	if ( media -> hasMember ( \"title\" ) )
>2173	CompoundStatement	 
>2174	ExpressionStatement	 
>2175	CallExpression	fullname . push_back ( '/' )
>2176	ArgumentList	'/'
>2177	Argument	'/'
>2178	PrimaryExpression	'/'
>2179	Callee	fullname . push_back
>2180	MemberAccess	fullname . push_back
>2181	Identifier	push_back
>2182	Identifier	fullname
>2183	ExpressionStatement	 
>2184	CallExpression	fullname . append ( PathFormatter 
>2185	ArgumentList	PathFormatter 
>2186	Argument	PathFormatter 
>2187	CallExpression	PathFormatter 
>2188	ArgumentList	title
>2189	Argument	title
>2190	Identifier	title
>2191	Callee	PathFormatter 
>2192	Identifier	PathFormatter 
>2193	Callee	fullname . append
>2194	MemberAccess	fullname . append
>2195	Identifier	append
>2196	Identifier	fullname
>2197	IdentifierDeclStatement	 
>2198	IdentifierDecl	title = media [ \"title\" ] -> getString ( )
>2199	AssignmentExpr	title = media [ \"title\" ] -> getString ( )
>2200	CallExpression	media [ \"title\" ] -> getString ( )
>2201	ArgumentList	 
>2202	Callee	media [ \"title\" ] -> getString
>2203	PtrMemberAccess	media [ \"title\" ] -> getString
>2204	Identifier	getString
>2205	ArrayIndexing	media [ \"title\" ]
>2206	PrimaryExpression	\"title\"
>2207	Identifier	media
>2208	Identifier	title
>2209	Identifier	title
>2210	IdentifierDeclType	string
>2211	Condition	 
>2212	CallExpression	media -> hasMember ( \"title\" )
>2213	ArgumentList	\"title\"
>2214	Argument	\"title\"
>2215	PrimaryExpression	\"title\"
>2216	Callee	media -> hasMember
>2217	PtrMemberAccess	media -> hasMember
>2218	Identifier	hasMember
>2219	Identifier	media
>2220	Condition	 
>2221	UnaryOp	! BM_MEDIA_ID_EQUALS ( BM_MEDIA_ID ( media [ \"id\" ] ) , mediaId )
>2222	CallExpression	BM_MEDIA_ID_EQUALS ( BM_MEDIA_ID ( media [ \"id\" ] ) , mediaId )
>2223	ArgumentList	BM_MEDIA_ID ( media [ \"id\" ] )
>2224	Argument	mediaId
>2225	Identifier	mediaId
>2226	Argument	BM_MEDIA_ID ( media [ \"id\" ] )
>2227	CallExpression	BM_MEDIA_ID ( media [ \"id\" ] )
>2228	ArgumentList	media [ \"id\" ]
>2229	Argument	media [ \"id\" ]
>2230	ArrayIndexing	media [ \"id\" ]
>2231	PrimaryExpression	\"id\"
>2232	Identifier	media
>2233	Callee	BM_MEDIA_ID
>2234	Identifier	BM_MEDIA_ID
>2235	Callee	BM_MEDIA_ID_EQUALS
>2236	Identifier	BM_MEDIA_ID_EQUALS
>2237	UnaryOperator	!
>2238	IdentifierDeclStatement	 
>2239	IdentifierDecl	fileMedia ( NULL )
>2240	Identifier	NULL
>2241	Identifier	fileMedia
>2242	IdentifierDeclType	Media
>2243	IdentifierDeclStatement	 
>2244	IdentifierDecl	maxPosition = 0
>2245	AssignmentExpr	maxPosition = 0
>2246	PrimaryExpression	0
>2247	Identifier	maxPosition
>2248	Identifier	maxPosition
>2249	IdentifierDeclType	unsigned int
>2250	IdentifierDeclStatement	 
>2251	IdentifierDecl	position = 0
>2252	AssignmentExpr	position = 0
>2253	PrimaryExpression	0
>2254	Identifier	position
>2255	Identifier	position
>2256	IdentifierDeclType	unsigned int
>2257	IdentifierDeclStatement	 
>2258	IdentifierDecl	fullname
>2259	Identifier	fullname
>2260	IdentifierDeclType	string
<3=9,8,4
<4=5
<5=7,6
<9=24,23,22,21,20,19,18,17,16,15,14,13,12,10
<10=11
<24=25
<25=28,27,26
<34=43,42,35
<35=39,36
<36=38,37
<39=41,40
<43=97,90,71,60,53,44
<44=45
<45=49,46
<46=47
<47=48
<49=50
<50=52,51
<53=54
<54=56,55
<56=57
<57=59,58
<60=61
<61=67,62
<62=65,63
<63=64
<65=66
<67=68
<68=70,69
<71=72
<72=89,88,73
<73=87,74
<74=83,82,75
<75=78,77,76
<78=79
<79=81,80
<83=84
<84=86,85
<90=91
<91=96,95,92
<92=94,93
<97=98
<98=103,102,99
<99=101,100
<117=126,125,118
<118=122,119
<119=121,120
<122=124,123
<126=272,258,253,233,219,205,194,187,180,144,127
<127=128
<128=140,129
<129=138,136,134,132,130
<130=131
<132=133
<134=135
<136=137
<138=139
<140=141
<141=143,142
<144=176,145
<145=170,159,146
<146=147
<147=157,148
<148=155,151,149
<149=150
<151=152
<152=154,153
<155=156
<157=158
<159=160
<160=169,161
<161=168,162
<162=166,163
<163=164
<164=165
<166=167
<170=171
<171=175,172
<172=174,173
<176=177
<177=179,178
<180=181
<181=186,185,182
<182=184,183
<187=188
<188=193,192,189
<189=191,190
<194=195
<195=203,196
<196=201,199,197
<197=198
<199=200
<201=202
<203=204
<205=206
<206=218,217,207
<207=216,208
<208=215,209
<209=213,210
<210=211
<211=212
<213=214
<219=220
<220=232,231,221
<221=230,222
<222=224,223
<224=225
<225=227,226
<227=229,228
<233=234
<234=251,235
<235=242,240,238,236
<236=237
<238=239
<240=241
<242=243
<243=245,244
<245=246
<246=248,247
<248=250,249
<251=252
<253=254
<254=257,256,255
<258=259
<259=271,270,260
<260=269,261
<261=263,262
<263=264
<264=266,265
<266=268,267
<272=273
<273=284,274
<274=275
<275=276
<276=278,277
<278=279
<279=281,280
<281=283,282
<284=285
<285=287,286
<308=317,316,309
<309=313,310
<310=312,311
<313=315,314
<317=443,432,415,394,355,329,318
<318=319
<319=326,320
<320=322,321
<322=323
<323=325,324
<326=328,327
<329=330
<330=354,353,331
<331=352,332
<332=350,333
<333=348,334
<334=335
<335=342,336
<336=338,337
<338=339
<339=341,340
<342=344,343
<344=345
<345=347,346
<348=349
<350=351
<355=385,356
<356=357
<357=358
<358=383,359
<359=374,367,360
<360=361
<361=363,362
<363=364
<364=366,365
<367=368
<368=370,369
<370=371
<371=373,372
<374=375
<375=382,376
<376=378,377
<378=379
<379=381,380
<383=384
<385=386
<386=388,387
<388=390,389
<390=391
<391=393,392
<394=395
<395=413,396
<396=411,404,397
<397=398
<398=400,399
<400=401
<401=403,402
<404=405
<405=407,406
<407=408
<408=410,409
<411=412
<413=414
<415=416
<416=431,430,417
<417=424,418
<418=420,419
<420=421
<421=423,422
<424=426,425
<426=427
<427=429,428
<432=433
<433=440,434
<434=436,435
<436=437
<437=439,438
<440=442,441
<443=444
<444=451,445
<445=447,446
<447=448
<448=450,449
<451=453,452
<470=476,475,471
<471=472
<472=474,473
<476=520,511,507,498,484,477
<477=478
<478=480,479
<480=481
<481=483,482
<484=485
<485=494,486
<486=487
<487=488
<488=490,489
<490=491
<491=493,492
<494=495
<495=497,496
<498=499
<499=503,500
<500=501
<501=502
<503=504
<504=506,505
<507=508
<508=510,509
<511=512
<512=518,513
<513=516,514
<514=515
<516=517
<518=519
<520=521
<521=523,522
<532=541,540,533
<533=537,534
<534=536,535
<537=539,538
<541=584,544,542
<542=543
<544=570,545
<545=565,564,563,562,561,560,559,558,557,556,555,554,553,552,551,550,546
<546=547
<547=549,548
<565=566
<566=569,568,567
<570=571
<571=578,572
<572=576,573
<573=574
<574=575
<576=577
<578=582,579
<579=580
<580=581
<582=583
<584=585
<585=587,586
<597=603,602,598
<598=599
<599=601,600
<603=604
<604=605
<605=625,606
<606=616,607
<607=608
<608=614,609
<609=610
<610=611
<611=613,612
<614=615
<616=617
<617=623,618
<618=619
<619=620
<620=622,621
<623=624
<625=626
<635=647,646,636
<636=643,640,637
<637=639,638
<640=642,641
<643=645,644
<647=1175,1170,1155,1144,1133,1122,1118,1109,1105,1096,1091,1086,1075,1064,1052,815,736,678,671,648
<648=667,649
<649=656,650
<650=651
<651=653,652
<653=655,654
<656=657
<657=663,658
<658=661,659
<659=660
<661=662
<663=664
<664=666,665
<667=668
<668=670,669
<671=672
<672=674,673
<674=675
<675=677,676
<678=727,679
<679=718,680
<680=711,681
<681=699,682
<682=683
<683=697,684
<684=695,693,691,689,687,685
<685=686
<687=688
<689=690
<691=692
<693=694
<695=696
<697=698
<699=700
<700=710,709,701
<701=708,702
<702=704,703
<704=705
<705=707,706
<711=712
<712=714,713
<714=715
<715=717,716
<718=719
<719=726,720
<720=722,721
<722=723
<723=725,724
<727=728
<728=730,729
<730=732,731
<732=733
<733=735,734
<736=806,737
<737=802,791,787,778,738
<738=771,739
<739=759,740
<740=741
<741=757,742
<742=755,753,751,749,747,743
<743=744
<744=746,745
<747=748
<749=750
<751=752
<753=754
<755=756
<757=758
<759=760
<760=770,769,761
<761=768,762
<762=764,763
<764=765
<765=767,766
<771=772
<772=774,773
<774=775
<775=777,776
<778=779
<779=786,780
<780=782,781
<782=783
<783=785,784
<787=788
<788=790,789
<791=792
<792=798,793
<793=796,794
<794=795
<796=797
<798=799
<799=801,800
<802=803
<803=805,804
<806=807
<807=809,808
<809=811,810
<811=812
<812=814,813
<815=1045,816
<816=1033,1022,1011,997,817
<817=986,944,818
<818=819
<819=863,820
<820=841,821
<821=822
<822=823
<823=839,824
<824=837,835,833,831,829,825
<825=826
<826=828,827
<829=830
<831=832
<833=834
<835=836
<837=838
<839=840
<841=842
<842=853,843
<843=845,844
<845=851,846
<846=849,847
<847=848
<849=850
<851=852
<853=855,854
<855=861,856
<856=859,857
<857=858
<859=860
<861=862
<863=933,928,864
<864=865
<865=917,912,866
<866=867
<867=901,891,868
<868=869
<869=880,870
<870=871
<871=872
<872=876,873
<873=874
<874=875
<876=877
<877=879,878
<880=881
<881=883,882
<883=889,884
<884=887,885
<885=886
<887=888
<889=890
<891=892
<892=893
<893=897,894
<894=895
<895=896
<897=898
<898=900,899
<901=902
<902=904,903
<904=910,905
<905=908,906
<906=907
<908=909
<910=911
<912=913
<913=914
<914=916,915
<917=918
<918=920,919
<920=926,921
<921=924,922
<922=923
<924=925
<926=927
<928=929
<929=930
<930=932,931
<933=934
<934=936,935
<936=942,937
<937=940,938
<938=939
<940=941
<942=943
<944=975,951,945
<945=946
<946=948,947
<948=950,949
<951=964,952
<952=953
<953=954
<954=963,955
<955=957,956
<957=958
<958=960,959
<960=962,961
<964=965
<965=974,966
<966=968,967
<968=969
<969=971,970
<971=973,972
<975=976
<976=985,977
<977=979,978
<979=980
<980=982,981
<982=984,983
<986=987
<987=989,988
<989=995,990
<990=993,991
<991=992
<993=994
<995=996
<997=998
<998=1010,1009,999
<999=1008,1000
<1000=1002,1001
<1002=1003
<1003=1005,1004
<1005=1007,1006
<1011=1012
<1012=1016,1013
<1013=1014
<1014=1015
<1016=1017
<1017=1019,1018
<1019=1021,1020
<1022=1023
<1023=1027,1024
<1024=1025
<1025=1026
<1027=1028
<1028=1030,1029
<1030=1032,1031
<1033=1034
<1034=1044,1043,1035
<1035=1042,1036
<1036=1038,1037
<1038=1039
<1039=1041,1040
<1045=1046
<1046=1048,1047
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1063,1062,1054
<1054=1061,1055
<1055=1057,1056
<1057=1058
<1058=1060,1059
<1064=1065
<1065=1071,1066
<1066=1069,1067
<1067=1068
<1069=1070
<1071=1072
<1072=1074,1073
<1075=1076
<1076=1082,1077
<1077=1080,1078
<1078=1079
<1080=1081
<1082=1083
<1083=1085,1084
<1086=1087
<1087=1090,1089,1088
<1091=1092
<1092=1095,1094,1093
<1096=1097
<1097=1101,1098
<1098=1099
<1099=1100
<1101=1102
<1102=1104,1103
<1105=1106
<1106=1108,1107
<1109=1110
<1110=1114,1111
<1111=1112
<1112=1113
<1114=1115
<1115=1117,1116
<1118=1119
<1119=1121,1120
<1122=1123
<1123=1129,1124
<1124=1127,1125
<1125=1126
<1127=1128
<1129=1130
<1130=1132,1131
<1133=1134
<1134=1140,1135
<1135=1138,1136
<1136=1137
<1138=1139
<1140=1141
<1141=1143,1142
<1144=1145
<1145=1151,1146
<1146=1149,1147
<1147=1148
<1149=1150
<1151=1152
<1152=1154,1153
<1155=1156
<1156=1169,1168,1157
<1157=1167,1158
<1158=1163,1160,1159
<1160=1162,1161
<1163=1164
<1164=1166,1165
<1170=1171
<1171=1174,1173,1172
<1175=1176
<1176=1179,1178,1177
<1226=1232,1231,1227
<1227=1228
<1228=1230,1229
<1232=1686,1681,1626,1621,1552,1548,1390,1379,1368,1361,1352,1341,1334,1325,1307,1289,1271,1253,1235,1233
<1233=1234
<1235=1236
<1236=1250,1237
<1237=1239,1238
<1239=1240
<1240=1242,1241
<1242=1246,1243
<1243=1244
<1244=1245
<1246=1247
<1247=1249,1248
<1250=1252,1251
<1253=1254
<1254=1268,1255
<1255=1257,1256
<1257=1258
<1258=1260,1259
<1260=1264,1261
<1261=1262
<1262=1263
<1264=1265
<1265=1267,1266
<1268=1270,1269
<1271=1272
<1272=1286,1273
<1273=1275,1274
<1275=1276
<1276=1278,1277
<1278=1282,1279
<1279=1280
<1280=1281
<1282=1283
<1283=1285,1284
<1286=1288,1287
<1289=1290
<1290=1304,1291
<1291=1293,1292
<1293=1294
<1294=1296,1295
<1296=1300,1297
<1297=1298
<1298=1299
<1300=1301
<1301=1303,1302
<1304=1306,1305
<1307=1308
<1308=1322,1309
<1309=1311,1310
<1311=1312
<1312=1314,1313
<1314=1318,1315
<1315=1316
<1316=1317
<1318=1319
<1319=1321,1320
<1322=1324,1323
<1325=1326
<1326=1333,1327
<1327=1329,1328
<1329=1330
<1330=1332,1331
<1334=1335
<1335=1337,1336
<1337=1338
<1338=1340,1339
<1341=1342
<1342=1348,1343
<1343=1346,1344
<1344=1345
<1346=1347
<1348=1349
<1349=1351,1350
<1352=1353
<1353=1360,1359,1354
<1354=1358,1355
<1355=1357,1356
<1361=1362
<1362=1364,1363
<1364=1365
<1365=1367,1366
<1368=1369
<1369=1375,1370
<1370=1373,1371
<1371=1372
<1373=1374
<1375=1376
<1376=1378,1377
<1379=1380
<1380=1389,1388,1381
<1381=1387,1382
<1382=1386,1383
<1383=1385,1384
<1390=1530,1391
<1391=1516,1392
<1392=1512,1393
<1393=1508,1497,1486,1477,1465,1394
<1394=1458,1395
<1395=1446,1435,1431,1424,1406,1400,1396
<1396=1397
<1397=1399,1398
<1400=1401
<1401=1403,1402
<1403=1405,1404
<1406=1407
<1407=1421,1408
<1408=1410,1409
<1410=1411
<1411=1413,1412
<1413=1417,1414
<1414=1415
<1415=1416
<1417=1418
<1418=1420,1419
<1421=1423,1422
<1424=1425
<1425=1427,1426
<1427=1428
<1428=1430,1429
<1431=1432
<1432=1434,1433
<1435=1436
<1436=1445,1437
<1437=1439,1438
<1439=1440
<1440=1442,1441
<1442=1444,1443
<1446=1447
<1447=1457,1456,1448
<1448=1455,1449
<1449=1451,1450
<1451=1452
<1452=1454,1453
<1458=1459
<1459=1461,1460
<1461=1462
<1462=1464,1463
<1465=1466
<1466=1476,1475,1467
<1467=1474,1468
<1468=1470,1469
<1470=1471
<1471=1473,1472
<1477=1478
<1478=1485,1484,1479
<1479=1483,1480
<1480=1482,1481
<1486=1487
<1487=1491,1488
<1488=1489
<1489=1490
<1491=1492
<1492=1494,1493
<1494=1496,1495
<1497=1498
<1498=1504,1499
<1499=1502,1500
<1500=1501
<1502=1503
<1504=1505
<1505=1507,1506
<1508=1509
<1509=1511,1510
<1512=1513
<1513=1515,1514
<1516=1517
<1517=1529,1528,1518
<1518=1527,1519
<1519=1521,1520
<1521=1522
<1522=1524,1523
<1524=1526,1525
<1530=1531
<1531=1540,1532
<1532=1536,1533
<1533=1534
<1534=1535
<1536=1537
<1537=1539,1538
<1540=1544,1541
<1541=1542
<1542=1543
<1544=1545
<1545=1547,1546
<1548=1549
<1549=1551,1550
<1552=1612,1600,1553
<1553=1554
<1554=1591,1555
<1555=1580,1571,1556
<1556=1557
<1557=1569,1558
<1558=1567,1563,1559
<1559=1560
<1560=1562,1561
<1563=1564
<1564=1566,1565
<1567=1568
<1569=1570
<1571=1572
<1572=1579,1578,1573
<1573=1577,1574
<1574=1576,1575
<1580=1581
<1581=1585,1582
<1582=1583
<1583=1584
<1585=1586
<1586=1588,1587
<1588=1590,1589
<1591=1592
<1592=1596,1593
<1593=1594
<1594=1595
<1596=1597
<1597=1599,1598
<1600=1601
<1601=1602
<1602=1611,1603
<1603=1605,1604
<1605=1606
<1606=1608,1607
<1608=1610,1609
<1612=1613
<1613=1617,1614
<1614=1615
<1615=1616
<1617=1618
<1618=1620,1619
<1621=1622
<1622=1625,1624,1623
<1626=1672,1660,1627
<1627=1628
<1628=1649,1640,1629
<1629=1630
<1630=1638,1631
<1631=1636,1632
<1632=1633
<1633=1635,1634
<1636=1637
<1638=1639
<1640=1641
<1641=1648,1647,1642
<1642=1646,1643
<1643=1645,1644
<1649=1650
<1650=1654,1651
<1651=1652
<1652=1653
<1654=1655
<1655=1657,1656
<1657=1659,1658
<1660=1661
<1661=1662
<1662=1671,1663
<1663=1665,1664
<1665=1666
<1666=1668,1667
<1668=1670,1669
<1672=1673
<1673=1677,1674
<1674=1675
<1675=1676
<1677=1678
<1678=1680,1679
<1681=1682
<1682=1685,1684,1683
<1686=1687
<1687=1690,1689,1688
<1738=1750,1749,1739
<1739=1746,1743,1740
<1740=1742,1741
<1743=1745,1744
<1746=1748,1747
<1750=2257,2250,2243,2238,2066,2062,1971,1837,1785,1776,1767,1753,1751
<1751=1752
<1753=1754
<1754=1763,1755
<1755=1756
<1756=1757
<1757=1761,1758
<1758=1759
<1759=1760
<1761=1762
<1763=1764
<1764=1766,1765
<1767=1768
<1768=1772,1769
<1769=1770
<1770=1771
<1772=1773
<1773=1775,1774
<1776=1777
<1777=1781,1778
<1778=1779
<1779=1780
<1781=1782
<1782=1784,1783
<1785=1821,1804,1786
<1786=1787
<1787=1788
<1788=1789
<1789=1800,1790
<1790=1791
<1791=1792
<1792=1794,1793
<1794=1795
<1795=1797,1796
<1797=1799,1798
<1800=1801
<1801=1803,1802
<1804=1805
<1805=1806
<1806=1817,1807
<1807=1808
<1808=1809
<1809=1811,1810
<1811=1812
<1812=1814,1813
<1814=1816,1815
<1817=1818
<1818=1820,1819
<1821=1822
<1822=1824,1823
<1824=1835,1825
<1825=1826
<1826=1827
<1827=1829,1828
<1829=1830
<1830=1832,1831
<1832=1834,1833
<1835=1836
<1837=1960,1928,1838
<1838=1839
<1839=1917,1885,1840
<1840=1841
<1841=1874,1842
<1842=1852,1843
<1843=1844
<1844=1848,1845
<1845=1846
<1846=1847
<1848=1849
<1849=1851,1850
<1852=1853
<1853=1870,1854
<1854=1855
<1855=1856
<1856=1858,1857
<1858=1859
<1859=1861,1860
<1861=1863,1862
<1863=1865,1864
<1865=1867,1866
<1867=1869,1868
<1870=1871
<1871=1873,1872
<1874=1875
<1875=1879,1876
<1876=1877
<1877=1878
<1879=1880
<1880=1882,1881
<1882=1884,1883
<1885=1895,1886
<1886=1887
<1887=1891,1888
<1888=1889
<1889=1890
<1891=1892
<1892=1894,1893
<1895=1896
<1896=1913,1897
<1897=1898
<1898=1899
<1899=1901,1900
<1901=1902
<1902=1904,1903
<1904=1906,1905
<1906=1908,1907
<1908=1910,1909
<1910=1912,1911
<1913=1914
<1914=1916,1915
<1917=1918
<1918=1922,1919
<1919=1920
<1920=1921
<1922=1923
<1923=1925,1924
<1925=1927,1926
<1928=1938,1929
<1929=1930
<1930=1934,1931
<1931=1932
<1932=1933
<1934=1935
<1935=1937,1936
<1938=1939
<1939=1956,1940
<1940=1941
<1941=1942
<1942=1944,1943
<1944=1945
<1945=1947,1946
<1947=1949,1948
<1949=1951,1950
<1951=1953,1952
<1953=1955,1954
<1956=1957
<1957=1959,1958
<1960=1961
<1961=1965,1962
<1962=1963
<1963=1964
<1965=1966
<1966=1968,1967
<1968=1970,1969
<1971=2058,1972
<1972=2053,2048,2043,2039,2026,2017,2004,1991,1982,1973
<1973=1974
<1974=1978,1975
<1975=1976
<1976=1977
<1978=1979
<1979=1981,1980
<1982=1983
<1983=1987,1984
<1984=1985
<1985=1986
<1987=1988
<1988=1990,1989
<1991=1992
<1992=2002,1993
<1993=2000,1998,1996,1994
<1994=1995
<1996=1997
<1998=1999
<2000=2001
<2002=2003
<2004=2005
<2005=2015,2006
<2006=2013,2011,2009,2007
<2007=2008
<2009=2010
<2011=2012
<2013=2014
<2015=2016
<2017=2018
<2018=2025,2019
<2019=2023,2020
<2020=2021
<2021=2022
<2023=2024
<2026=2027
<2027=2037,2028
<2028=2035,2033,2031,2029
<2029=2030
<2031=2032
<2033=2034
<2035=2036
<2037=2038
<2039=2040
<2040=2042,2041
<2043=2044
<2044=2047,2046,2045
<2048=2049
<2049=2052,2051,2050
<2053=2054
<2054=2057,2056,2055
<2058=2059
<2059=2061,2060
<2062=2063
<2063=2065,2064
<2066=2220,2073,2067
<2067=2068
<2068=2069
<2069=2070
<2070=2072,2071
<2073=2172,2158,2074
<2074=2151,2075
<2075=2139,2127,2076
<2076=2120,2077
<2077=2116,2104,2078
<2078=2088,2079
<2079=2084,2080
<2080=2081
<2081=2083,2082
<2084=2085
<2085=2087,2086
<2088=2089
<2089=2102,2090
<2090=2093,2091
<2091=2092
<2093=2094
<2094=2100,2095
<2095=2096
<2096=2097
<2097=2099,2098
<2100=2101
<2102=2103
<2104=2105
<2105=2115,2114,2106
<2106=2113,2107
<2107=2109,2108
<2109=2110
<2110=2112,2111
<2116=2117
<2117=2119,2118
<2120=2121
<2121=2123,2122
<2123=2124
<2124=2126,2125
<2127=2128
<2128=2138,2137,2129
<2129=2136,2130
<2130=2132,2131
<2132=2133
<2133=2135,2134
<2139=2140
<2140=2150,2149,2141
<2141=2148,2142
<2142=2144,2143
<2144=2145
<2145=2147,2146
<2151=2152
<2152=2154,2153
<2154=2155
<2155=2157,2156
<2158=2159
<2159=2171,2170,2160
<2160=2169,2161
<2161=2163,2162
<2163=2164
<2164=2166,2165
<2166=2168,2167
<2172=2211,2173
<2173=2197,2183,2174
<2174=2175
<2175=2179,2176
<2176=2177
<2177=2178
<2179=2180
<2180=2182,2181
<2183=2184
<2184=2193,2185
<2185=2186
<2186=2187
<2187=2191,2188
<2188=2189
<2189=2190
<2191=2192
<2193=2194
<2194=2196,2195
<2197=2198
<2198=2210,2209,2199
<2199=2208,2200
<2200=2202,2201
<2202=2203
<2203=2205,2204
<2205=2207,2206
<2211=2212
<2212=2216,2213
<2213=2214
<2214=2215
<2216=2217
<2217=2219,2218
<2220=2221
<2221=2237,2222
<2222=2235,2223
<2223=2226,2224
<2224=2225
<2226=2227
<2227=2233,2228
<2228=2229
<2229=2230
<2230=2232,2231
<2233=2234
<2235=2236
<2238=2239
<2239=2242,2241,2240
<2243=2244
<2244=2249,2248,2245
<2245=2247,2246
<2250=2251
<2251=2256,2255,2252
<2252=2254,2253
<2257=2258
<2258=2260,2259
