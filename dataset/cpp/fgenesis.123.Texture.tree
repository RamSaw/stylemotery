>9	FunctionDef	Texture 
>10	ParameterList	 
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	AssignmentExpr	ow = oh = - 1
>14	AssignmentExpr	oh = - 1
>15	UnaryOp	- 1
>16	PrimaryExpression	1
>17	UnaryOperator	-
>18	Identifier	oh
>19	Identifier	ow
>20	ExpressionStatement	 
>21	CallExpression	pngSetStandardOrientation ( 0 )
>22	ArgumentList	0
>23	Argument	0
>24	PrimaryExpression	0
>25	Callee	pngSetStandardOrientation
>26	Identifier	pngSetStandardOrientation
>27	ExpressionStatement	 
>28	AssignmentExpr	repeating = false
>29	Identifier	false
>30	Identifier	repeating
>31	ExpressionStatement	 
>32	AssignmentExpr	repeat = false
>33	Identifier	false
>34	Identifier	repeat
>35	ExpressionStatement	 
>36	AssignmentExpr	width = height = 0
>37	AssignmentExpr	height = 0
>38	PrimaryExpression	0
>39	Identifier	height
>40	Identifier	width
>41	ExpressionStatement	 
>42	AssignmentExpr	d3dTexture = 0
>43	PrimaryExpression	0
>44	Identifier	d3dTexture
>45	ExpressionStatement	 
>46	AssignmentExpr	textures [ 0 ] = 0
>47	PrimaryExpression	0
>48	ArrayIndexing	textures [ 0 ]
>49	PrimaryExpression	0
>50	Identifier	textures
>64	FunctionDef	Texture 
>65	ParameterList	 
>66	CompoundStatement	 
>67	ExpressionStatement	 
>68	CallExpression	destroy ( )
>69	ArgumentList	 
>70	Callee	destroy
>71	Identifier	destroy
>75	FunctionDef	Texture 
>76	ParameterList	int tx , int ty , int w , int h , unsigned char * pixels
>77	Parameter	 
>78	Identifier	pixels
>79	ParameterType	unsigned char *
>80	Parameter	 
>81	Identifier	h
>82	ParameterType	int
>83	Parameter	 
>84	Identifier	w
>85	ParameterType	int
>86	Parameter	 
>87	Identifier	ty
>88	ParameterType	int
>89	Parameter	 
>90	Identifier	tx
>91	ParameterType	int
>92	ReturnType	void
>93	CompoundStatement	 
>94	IfStatement	if ( tx == 0 && ty == 0 && w == this -> width && h == this -> height )
>95	ElseStatement	else
>96	CompoundStatement	 
>97	ExpressionStatement	 
>98	CallExpression	debugLog ( os . str ( ) )
>99	ArgumentList	os . str ( )
>100	Argument	os . str ( )
>101	CallExpression	os . str ( )
>102	ArgumentList	 
>103	Callee	os . str
>104	MemberAccess	os . str
>105	Identifier	str
>106	Identifier	os
>107	Callee	debugLog
>108	Identifier	debugLog
>109	ExpressionStatement	 
>110	ShiftExpression	os << \"Unable to read a texture subimage (size = \" << this -> width << \"x\" << this -> height << \", requested = \" << \
>111	ShiftExpression	\"Unable to read a texture subimage (size = \" << this -> width << \"x\" << this -> height << \", requested = \" << \
>112	ShiftExpression	this -> width << \"x\" << this -> height << \", requested = \" << tx << \",\" << ty << \"+\" << w << \"x\" << \
>113	ShiftExpression	\"x\" << this -> height << \", requested = \" << tx << \",\" << ty << \"+\" << w << \"x\" << h << \")\"
>114	ShiftExpression	this -> height << \", requested = \" << tx << \",\" << ty << \"+\" << w << \"x\" << h << \")\"
>115	ShiftExpression	\", requested = \" << tx << \",\" << ty << \"+\" << w << \"x\" << h << \")\"
>116	ShiftExpression	tx << \",\" << ty << \"+\" << w << \"x\" << h << \")\"
>117	ShiftExpression	\",\" << ty << \"+\" << w << \"x\" << h << \")\"
>118	ShiftExpression	ty << \"+\" << w << \"x\" << h << \")\"
>119	ShiftExpression	\"+\" << w << \"x\" << h << \")\"
>120	ShiftExpression	w << \"x\" << h << \")\"
>121	ShiftExpression	\"x\" << h << \")\"
>122	ShiftExpression	h << \")\"
>123	PrimaryExpression	\")\"
>124	Identifier	h
>125	PrimaryExpression	\"x\"
>126	Identifier	w
>127	PrimaryExpression	\"+\"
>128	Identifier	ty
>129	PrimaryExpression	\",\"
>130	Identifier	tx
>131	PrimaryExpression	\", requested = \"
>132	PtrMemberAccess	this -> height
>133	Identifier	height
>134	Identifier	this
>135	PrimaryExpression	\"x\"
>136	PtrMemberAccess	this -> width
>137	Identifier	width
>138	Identifier	this
>139	PrimaryExpression	\"Unable to read a texture subimage (size = \"
>140	Identifier	os
>141	IdentifierDeclStatement	 
>142	IdentifierDecl	os
>143	Identifier	os
>144	IdentifierDeclType	std 
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>148	ArgumentList	GL_TEXTURE_2D
>149	Argument	0
>150	PrimaryExpression	0
>151	Argument	GL_TEXTURE_2D
>152	Identifier	GL_TEXTURE_2D
>153	Callee	glBindTexture
>154	Identifier	glBindTexture
>155	ExpressionStatement	 
>156	CallExpression	glGetTexImage ( GL_TEXTURE_2D , 0 , GL_RGBA , GL_UNSIGNED_BYTE , pixels )
>157	ArgumentList	GL_TEXTURE_2D
>158	Argument	pixels
>159	Identifier	pixels
>160	Argument	GL_UNSIGNED_BYTE
>161	Identifier	GL_UNSIGNED_BYTE
>162	Argument	GL_RGBA
>163	Identifier	GL_RGBA
>164	Argument	0
>165	PrimaryExpression	0
>166	Argument	GL_TEXTURE_2D
>167	Identifier	GL_TEXTURE_2D
>168	Callee	glGetTexImage
>169	Identifier	glGetTexImage
>170	ExpressionStatement	 
>171	CallExpression	glBindTexture ( GL_TEXTURE_2D , textures [ 0 ] )
>172	ArgumentList	GL_TEXTURE_2D
>173	Argument	textures [ 0 ]
>174	ArrayIndexing	textures [ 0 ]
>175	PrimaryExpression	0
>176	Identifier	textures
>177	Argument	GL_TEXTURE_2D
>178	Identifier	GL_TEXTURE_2D
>179	Callee	glBindTexture
>180	Identifier	glBindTexture
>181	Condition	 
>182	AndExpression	tx == 0 && ty == 0 && w == this -> width && h == this -> height
>183	AndExpression	ty == 0 && w == this -> width && h == this -> height
>184	AndExpression	w == this -> width && h == this -> height
>185	EqualityExpression	h == this -> height
>186	PtrMemberAccess	this -> height
>187	Identifier	height
>188	Identifier	this
>189	Identifier	h
>190	EqualityExpression	w == this -> width
>191	PtrMemberAccess	this -> width
>192	Identifier	width
>193	Identifier	this
>194	Identifier	w
>195	EqualityExpression	ty == 0
>196	PrimaryExpression	0
>197	Identifier	ty
>198	EqualityExpression	tx == 0
>199	PrimaryExpression	0
>200	Identifier	tx
>220	FunctionDef	Texture 
>221	ParameterList	int tx , int ty , int w , int h , const unsigned char * pixels
>222	Parameter	 
>223	Identifier	pixels
>224	ParameterType	const unsigned char *
>225	Parameter	 
>226	Identifier	h
>227	ParameterType	int
>228	Parameter	 
>229	Identifier	w
>230	ParameterType	int
>231	Parameter	 
>232	Identifier	ty
>233	ParameterType	int
>234	Parameter	 
>235	Identifier	tx
>236	ParameterType	int
>237	ReturnType	void
>238	CompoundStatement	 
>239	ExpressionStatement	 
>240	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>241	ArgumentList	GL_TEXTURE_2D
>242	Argument	0
>243	PrimaryExpression	0
>244	Argument	GL_TEXTURE_2D
>245	Identifier	GL_TEXTURE_2D
>246	Callee	glBindTexture
>247	Identifier	glBindTexture
>248	ExpressionStatement	 
>249	CallExpression	glTexSubImage2D ( GL_TEXTURE_2D , 0 , tx , ty , w , h , GL_RGBA , GL_UNSIGNED_BYTE , pixels )
>250	ArgumentList	GL_TEXTURE_2D
>251	Argument	pixels
>252	Identifier	pixels
>253	Argument	GL_UNSIGNED_BYTE
>254	Identifier	GL_UNSIGNED_BYTE
>255	Argument	GL_RGBA
>256	Identifier	GL_RGBA
>257	Argument	h
>258	Identifier	h
>259	Argument	w
>260	Identifier	w
>261	Argument	ty
>262	Identifier	ty
>263	Argument	tx
>264	Identifier	tx
>265	Argument	0
>266	PrimaryExpression	0
>267	Argument	GL_TEXTURE_2D
>268	Identifier	GL_TEXTURE_2D
>269	Callee	glTexSubImage2D
>270	Identifier	glTexSubImage2D
>271	ExpressionStatement	 
>272	CallExpression	glBindTexture ( GL_TEXTURE_2D , textures [ 0 ] )
>273	ArgumentList	GL_TEXTURE_2D
>274	Argument	textures [ 0 ]
>275	ArrayIndexing	textures [ 0 ]
>276	PrimaryExpression	0
>277	Identifier	textures
>278	Argument	GL_TEXTURE_2D
>279	Identifier	GL_TEXTURE_2D
>280	Callee	glBindTexture
>281	Identifier	glBindTexture
>295	FunctionDef	Texture 
>296	ParameterList	 
>297	ReturnType	void
>298	CompoundStatement	 
>299	IfStatement	if ( textures [ 0 ] )
>300	CompoundStatement	 
>301	ExpressionStatement	 
>302	AssignmentExpr	textures [ 0 ] = 0
>303	PrimaryExpression	0
>304	ArrayIndexing	textures [ 0 ]
>305	PrimaryExpression	0
>306	Identifier	textures
>307	ExpressionStatement	 
>308	CallExpression	glDeleteTextures ( 1 , & textures [ 0 ] )
>309	ArgumentList	1
>310	Argument	& textures [ 0 ]
>311	UnaryOp	& textures [ 0 ]
>312	ArrayIndexing	textures [ 0 ]
>313	PrimaryExpression	0
>314	Identifier	textures
>315	UnaryOperator	&
>316	Argument	1
>317	PrimaryExpression	1
>318	Callee	glDeleteTextures
>319	Identifier	glDeleteTextures
>320	IfStatement	if ( core -> debugLogTextures )
>321	CompoundStatement	 
>322	ExpressionStatement	 
>323	CallExpression	debugLog ( \"UNLOADING TEXTURE
>324	ArgumentList	\"UNLOADING TEXTURE
>325	Argument	\"UNLOADING TEXTURE
>326	AdditiveExpression	\"UNLOADING TEXTURE
>327	Identifier	name
>328	PrimaryExpression	\"UNLOADING TEXTURE
>329	Callee	debugLog
>330	Identifier	debugLog
>331	Condition	 
>332	PtrMemberAccess	core -> debugLogTextures
>333	Identifier	debugLogTextures
>334	Identifier	core
>335	ExpressionStatement	 
>336	AssignmentExpr	oh = height
>337	Identifier	height
>338	Identifier	oh
>339	ExpressionStatement	 
>340	AssignmentExpr	ow = width
>341	Identifier	width
>342	Identifier	ow
>343	Condition	 
>344	ArrayIndexing	textures [ 0 ]
>345	PrimaryExpression	0
>346	Identifier	textures
>361	FunctionDef	Texture 
>362	ParameterList	 
>363	ReturnType	void
>364	CompoundStatement	 
>365	ExpressionStatement	 
>366	CallExpression	core -> removeTexture ( this )
>367	ArgumentList	this
>368	Argument	this
>369	Identifier	this
>370	Callee	core -> removeTexture
>371	PtrMemberAccess	core -> removeTexture
>372	Identifier	removeTexture
>373	Identifier	core
>374	IfStatement	if ( d3dTexture )
>375	CompoundStatement	 
>376	ExpressionStatement	 
>377	AssignmentExpr	d3dTexture = 0
>378	PrimaryExpression	0
>379	Identifier	d3dTexture
>380	ExpressionStatement	 
>381	CallExpression	d3dTexture -> Release ( )
>382	ArgumentList	 
>383	Callee	d3dTexture -> Release
>384	PtrMemberAccess	d3dTexture -> Release
>385	Identifier	Release
>386	Identifier	d3dTexture
>387	Condition	 
>388	Identifier	d3dTexture
>389	ExpressionStatement	 
>390	CallExpression	unload ( )
>391	ArgumentList	 
>392	Callee	unload
>393	Identifier	unload
>400	FunctionDef	Texture 
>401	ParameterList	 
>402	ReturnType	int
>403	CompoundStatement	 
>404	ReturnStatement	 
>405	AdditiveExpression	largestx - smallestx
>406	Identifier	smallestx
>407	Identifier	largestx
>408	ExpressionStatement	 
>409	CallExpression	free ( data )
>410	ArgumentList	data
>411	Argument	data
>412	Identifier	data
>413	Callee	free
>414	Identifier	free
>415	CompoundStatement	 
>416	CompoundStatement	 
>417	IfStatement	if ( p < size && data [ p ] >= 254 )
>418	CompoundStatement	 
>419	IfStatement	if ( largestx == - 1 || x > largestx )
>420	ExpressionStatement	 
>421	AssignmentExpr	largestx = x
>422	Identifier	x
>423	Identifier	largestx
>424	Condition	 
>425	OrExpression	largestx == - 1 || x > largestx
>426	RelationalExpression	x > largestx
>427	Identifier	largestx
>428	Identifier	x
>429	EqualityExpression	largestx == - 1
>430	UnaryOp	- 1
>431	PrimaryExpression	1
>432	UnaryOperator	-
>433	Identifier	largestx
>434	IfStatement	if ( smallestx == - 1 || x < smallestx )
>435	ExpressionStatement	 
>436	AssignmentExpr	smallestx = x
>437	Identifier	x
>438	Identifier	smallestx
>439	Condition	 
>440	OrExpression	smallestx == - 1 || x < smallestx
>441	RelationalExpression	x < smallestx
>442	Identifier	smallestx
>443	Identifier	x
>444	EqualityExpression	smallestx == - 1
>445	UnaryOp	- 1
>446	PrimaryExpression	1
>447	UnaryOperator	-
>448	Identifier	smallestx
>449	Condition	 
>450	AndExpression	p < size && data [ p ] >= 254
>451	RelationalExpression	data [ p ] >= 254
>452	PrimaryExpression	254
>453	ArrayIndexing	data [ p ]
>454	Identifier	p
>455	Identifier	data
>456	RelationalExpression	p < size
>457	Identifier	size
>458	Identifier	p
>459	ExpressionStatement	 
>460	AdditiveExpression	+ ( x * 4 ) + 3
>461	PrimaryExpression	3
>462	UnaryOp	+ ( x * 4 )
>463	MultiplicativeExpression	x * 4
>464	PrimaryExpression	4
>465	Identifier	x
>466	UnaryOperator	+
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	ExpressionStatement	 
>485	Identifier	h
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	y = 0
>491	AssignmentExpr	y = 0
>492	PrimaryExpression	0
>493	Identifier	y
>494	Identifier	y
>495	IdentifierDeclType	unsigned int
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	ExpressionStatement	 
>502	Identifier	w
>503	Statement	 
>504	Statement	 
>505	Statement	 
>506	IdentifierDeclStatement	 
>507	IdentifierDecl	x = 0
>508	AssignmentExpr	x = 0
>509	PrimaryExpression	0
>510	Identifier	x
>511	Identifier	x
>512	IdentifierDeclType	unsigned int
>513	Statement	 
>514	Statement	 
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	largestx = - 1
>517	AssignmentExpr	largestx = - 1
>518	UnaryOp	- 1
>519	PrimaryExpression	1
>520	UnaryOperator	-
>521	Identifier	largestx
>522	Identifier	largestx
>523	IdentifierDeclType	int
>524	IdentifierDecl	smallestx = - 1
>525	AssignmentExpr	smallestx = - 1
>526	UnaryOp	- 1
>527	PrimaryExpression	1
>528	UnaryOperator	-
>529	Identifier	smallestx
>530	Identifier	smallestx
>531	IdentifierDeclType	int
>532	IfStatement	if ( ! data )
>533	ReturnStatement	 
>534	PrimaryExpression	0
>535	Condition	 
>536	UnaryOp	! data
>537	Identifier	data
>538	UnaryOperator	!
>539	IdentifierDeclStatement	 
>540	IdentifierDecl	* data = getBufferAndSize ( & w , & h , & size )
>541	AssignmentExpr	* data = getBufferAndSize ( & w , & h , & size )
>542	CallExpression	getBufferAndSize ( & w , & h , & size )
>543	ArgumentList	& w
>544	Argument	& size
>545	UnaryOp	& size
>546	Identifier	size
>547	UnaryOperator	&
>548	Argument	& h
>549	UnaryOp	& h
>550	Identifier	h
>551	UnaryOperator	&
>552	Argument	& w
>553	UnaryOp	& w
>554	Identifier	w
>555	UnaryOperator	&
>556	Callee	getBufferAndSize
>557	Identifier	getBufferAndSize
>558	Identifier	data
>559	Identifier	data
>560	IdentifierDeclType	unsigned char *
>561	IdentifierDeclStatement	 
>562	IdentifierDecl	size = 0
>563	AssignmentExpr	size = 0
>564	PrimaryExpression	0
>565	Identifier	size
>566	Identifier	size
>567	IdentifierDeclType	unsigned int
>568	IdentifierDeclStatement	 
>569	IdentifierDecl	h = 0
>570	AssignmentExpr	h = 0
>571	PrimaryExpression	0
>572	Identifier	h
>573	Identifier	h
>574	IdentifierDeclType	int
>575	IdentifierDecl	w = 0
>576	AssignmentExpr	w = 0
>577	PrimaryExpression	0
>578	Identifier	w
>579	Identifier	w
>580	IdentifierDeclType	int
>599	FunctionDef	Texture 
>600	ParameterList	 
>601	ReturnType	int
>602	CompoundStatement	 
>603	ReturnStatement	 
>604	AdditiveExpression	largesty - smallesty
>605	Identifier	smallesty
>606	Identifier	largesty
>607	ExpressionStatement	 
>608	CallExpression	free ( data )
>609	ArgumentList	data
>610	Argument	data
>611	Identifier	data
>612	Callee	free
>613	Identifier	free
>614	CompoundStatement	 
>615	CompoundStatement	 
>616	IfStatement	if ( p < size && data [ p ] >= 254 )
>617	CompoundStatement	 
>618	IfStatement	if ( largesty == - 1 || y > largesty )
>619	ExpressionStatement	 
>620	AssignmentExpr	largesty = y
>621	Identifier	y
>622	Identifier	largesty
>623	Condition	 
>624	OrExpression	largesty == - 1 || y > largesty
>625	RelationalExpression	y > largesty
>626	Identifier	largesty
>627	Identifier	y
>628	EqualityExpression	largesty == - 1
>629	UnaryOp	- 1
>630	PrimaryExpression	1
>631	UnaryOperator	-
>632	Identifier	largesty
>633	IfStatement	if ( smallesty == - 1 || y < smallesty )
>634	ExpressionStatement	 
>635	AssignmentExpr	smallesty = y
>636	Identifier	y
>637	Identifier	smallesty
>638	Condition	 
>639	OrExpression	smallesty == - 1 || y < smallesty
>640	RelationalExpression	y < smallesty
>641	Identifier	smallesty
>642	Identifier	y
>643	EqualityExpression	smallesty == - 1
>644	UnaryOp	- 1
>645	PrimaryExpression	1
>646	UnaryOperator	-
>647	Identifier	smallesty
>648	Condition	 
>649	AndExpression	p < size && data [ p ] >= 254
>650	RelationalExpression	data [ p ] >= 254
>651	PrimaryExpression	254
>652	ArrayIndexing	data [ p ]
>653	Identifier	p
>654	Identifier	data
>655	RelationalExpression	p < size
>656	Identifier	size
>657	Identifier	p
>658	ExpressionStatement	 
>659	AdditiveExpression	+ ( x * 4 ) + 3
>660	PrimaryExpression	3
>661	UnaryOp	+ ( x * 4 )
>662	MultiplicativeExpression	x * 4
>663	PrimaryExpression	4
>664	Identifier	x
>665	UnaryOperator	+
>666	Statement	 
>667	Statement	 
>668	Statement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>676	Statement	 
>677	Statement	 
>678	Statement	 
>679	Statement	 
>680	Statement	 
>681	Statement	 
>682	ExpressionStatement	 
>683	Identifier	h
>684	Statement	 
>685	Statement	 
>686	Statement	 
>687	IdentifierDeclStatement	 
>688	IdentifierDecl	y = 0
>689	AssignmentExpr	y = 0
>690	PrimaryExpression	0
>691	Identifier	y
>692	Identifier	y
>693	IdentifierDeclType	unsigned int
>694	Statement	 
>695	Statement	 
>696	Statement	 
>697	Statement	 
>698	Statement	 
>699	ExpressionStatement	 
>700	Identifier	w
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	IdentifierDeclStatement	 
>705	IdentifierDecl	x = 0
>706	AssignmentExpr	x = 0
>707	PrimaryExpression	0
>708	Identifier	x
>709	Identifier	x
>710	IdentifierDeclType	unsigned int
>711	Statement	 
>712	Statement	 
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	largesty = - 1
>715	AssignmentExpr	largesty = - 1
>716	UnaryOp	- 1
>717	PrimaryExpression	1
>718	UnaryOperator	-
>719	Identifier	largesty
>720	Identifier	largesty
>721	IdentifierDeclType	int
>722	IdentifierDecl	smallesty = - 1
>723	AssignmentExpr	smallesty = - 1
>724	UnaryOp	- 1
>725	PrimaryExpression	1
>726	UnaryOperator	-
>727	Identifier	smallesty
>728	Identifier	smallesty
>729	IdentifierDeclType	int
>730	IfStatement	if ( ! data )
>731	ReturnStatement	 
>732	PrimaryExpression	0
>733	Condition	 
>734	UnaryOp	! data
>735	Identifier	data
>736	UnaryOperator	!
>737	IdentifierDeclStatement	 
>738	IdentifierDecl	* data = getBufferAndSize ( & w , & h , & size )
>739	AssignmentExpr	* data = getBufferAndSize ( & w , & h , & size )
>740	CallExpression	getBufferAndSize ( & w , & h , & size )
>741	ArgumentList	& w
>742	Argument	& size
>743	UnaryOp	& size
>744	Identifier	size
>745	UnaryOperator	&
>746	Argument	& h
>747	UnaryOp	& h
>748	Identifier	h
>749	UnaryOperator	&
>750	Argument	& w
>751	UnaryOp	& w
>752	Identifier	w
>753	UnaryOperator	&
>754	Callee	getBufferAndSize
>755	Identifier	getBufferAndSize
>756	Identifier	data
>757	Identifier	data
>758	IdentifierDeclType	unsigned char *
>759	IdentifierDeclStatement	 
>760	IdentifierDecl	size = 0
>761	AssignmentExpr	size = 0
>762	PrimaryExpression	0
>763	Identifier	size
>764	Identifier	size
>765	IdentifierDeclType	unsigned int
>766	IdentifierDeclStatement	 
>767	IdentifierDecl	h = 0
>768	AssignmentExpr	h = 0
>769	PrimaryExpression	0
>770	Identifier	h
>771	Identifier	h
>772	IdentifierDeclType	int
>773	IdentifierDecl	w = 0
>774	AssignmentExpr	w = 0
>775	PrimaryExpression	0
>776	Identifier	w
>777	Identifier	w
>778	IdentifierDeclType	int
>797	FunctionDef	Texture 
>798	ParameterList	 
>799	ReturnType	void
>800	CompoundStatement	 
>801	ExpressionStatement	 
>802	CallExpression	debugLog ( \"DONE\" )
>803	ArgumentList	\"DONE\"
>804	Argument	\"DONE\"
>805	PrimaryExpression	\"DONE\"
>806	Callee	debugLog
>807	Identifier	debugLog
>808	ExpressionStatement	 
>809	CallExpression	load ( loadName )
>810	ArgumentList	loadName
>811	Argument	loadName
>812	Identifier	loadName
>813	Callee	load
>814	Identifier	load
>815	ExpressionStatement	 
>816	CallExpression	unload ( )
>817	ArgumentList	 
>818	Callee	unload
>819	Identifier	unload
>820	ExpressionStatement	 
>821	CallExpression	debugLog ( \"RELOADING TEXTURE
>822	ArgumentList	\"RELOADING TEXTURE
>823	Argument	\"RELOADING TEXTURE
>824	AdditiveExpression	\"RELOADING TEXTURE
>825	AdditiveExpression	name + \" with loadName \" + loadName + \"...\"
>826	AdditiveExpression	\" with loadName \" + loadName + \"...\"
>827	AdditiveExpression	loadName + \"...\"
>828	PrimaryExpression	\"...\"
>829	Identifier	loadName
>830	PrimaryExpression	\" with loadName \"
>831	Identifier	name
>832	PrimaryExpression	\"RELOADING TEXTURE
>833	Callee	debugLog
>834	Identifier	debugLog
>840	FunctionDef	Texture 
>841	ParameterList	std 
>842	Parameter	 
>843	Identifier	file
>844	ParameterType	std 
>845	ReturnType	bool
>846	CompoundStatement	 
>847	ReturnStatement	 
>848	Identifier	false
>849	IfStatement	if ( found )
>850	ElseStatement	else
>851	CompoundStatement	 
>852	IfStatement	if ( core -> debugLogTextures )
>853	ExpressionStatement	 
>854	CallExpression	debugLog ( \"***Could not find texture
>855	ArgumentList	\"***Could not find texture
>856	Argument	\"***Could not find texture
>857	AdditiveExpression	\"***Could not find texture
>858	Identifier	file
>859	PrimaryExpression	\"***Could not find texture
>860	Callee	debugLog
>861	Identifier	debugLog
>862	Condition	 
>863	PtrMemberAccess	core -> debugLogTextures
>864	Identifier	debugLogTextures
>865	Identifier	core
>866	CompoundStatement	 
>867	IfStatement	if ( post == \"png\" )
>868	ElseStatement	else
>869	IfStatement	if ( post == \"zga\" )
>870	ElseStatement	else
>871	IfStatement	if ( post == \"tga\" )
>872	ElseStatement	else
>873	CompoundStatement	 
>874	ExpressionStatement	 
>875	CallExpression	debugLog ( \"unknown image file type
>876	ArgumentList	\"unknown image file type
>877	Argument	\"unknown image file type
>878	AdditiveExpression	\"unknown image file type
>879	Identifier	file
>880	PrimaryExpression	\"unknown image file type
>881	Callee	debugLog
>882	Identifier	debugLog
>883	CompoundStatement	 
>884	ReturnStatement	 
>885	CallExpression	loadTGA ( file )
>886	ArgumentList	file
>887	Argument	file
>888	Identifier	file
>889	Callee	loadTGA
>890	Identifier	loadTGA
>891	Condition	 
>892	EqualityExpression	post == \"tga\"
>893	PrimaryExpression	\"tga\"
>894	Identifier	post
>895	CompoundStatement	 
>896	ReturnStatement	 
>897	CallExpression	loadZGA ( file )
>898	ArgumentList	file
>899	Argument	file
>900	Identifier	file
>901	Callee	loadZGA
>902	Identifier	loadZGA
>903	Condition	 
>904	EqualityExpression	post == \"zga\"
>905	PrimaryExpression	\"zga\"
>906	Identifier	post
>907	CompoundStatement	 
>908	IfStatement	if ( ! d3dTexture )
>909	ElseStatement	else
>910	CompoundStatement	 
>911	ExpressionStatement	 
>912	AssignmentExpr	height = desc . Height
>913	MemberAccess	desc . Height
>914	Identifier	Height
>915	Identifier	desc
>916	Identifier	height
>917	ExpressionStatement	 
>918	AssignmentExpr	width = desc . Width
>919	MemberAccess	desc . Width
>920	Identifier	Width
>921	Identifier	desc
>922	Identifier	width
>923	ExpressionStatement	 
>924	CallExpression	this -> d3dTexture -> GetLevelDesc ( 0 , & desc )
>925	ArgumentList	0
>926	Argument	& desc
>927	UnaryOp	& desc
>928	Identifier	desc
>929	UnaryOperator	&
>930	Argument	0
>931	PrimaryExpression	0
>932	Callee	this -> d3dTexture -> GetLevelDesc
>933	PtrMemberAccess	this -> d3dTexture -> GetLevelDesc
>934	Identifier	GetLevelDesc
>935	PtrMemberAccess	this -> d3dTexture
>936	Identifier	d3dTexture
>937	Identifier	this
>938	IdentifierDeclStatement	 
>939	IdentifierDecl	desc
>940	Identifier	desc
>941	IdentifierDeclType	D3DSURFACE_DESC
>942	CompoundStatement	 
>943	ExpressionStatement	 
>944	CallExpression	errorLog ( \"failed to load texture\" )
>945	ArgumentList	\"failed to load texture\"
>946	Argument	\"failed to load texture\"
>947	PrimaryExpression	\"failed to load texture\"
>948	Callee	errorLog
>949	Identifier	errorLog
>950	Condition	 
>951	UnaryOp	! d3dTexture
>952	Identifier	d3dTexture
>953	UnaryOperator	!
>954	ExpressionStatement	 
>955	CallExpression	D3DXCreateTextureFromFile ( core -> getD3DDevice ( ) , file . c_str ( ) , & this -> d3dTexture )
>956	ArgumentList	core -> getD3DDevice ( )
>957	Argument	& this -> d3dTexture
>958	UnaryOp	& this -> d3dTexture
>959	PtrMemberAccess	this -> d3dTexture
>960	Identifier	d3dTexture
>961	Identifier	this
>962	UnaryOperator	&
>963	Argument	file . c_str ( )
>964	CallExpression	file . c_str ( )
>965	ArgumentList	 
>966	Callee	file . c_str
>967	MemberAccess	file . c_str
>968	Identifier	c_str
>969	Identifier	file
>970	Argument	core -> getD3DDevice ( )
>971	CallExpression	core -> getD3DDevice ( )
>972	ArgumentList	 
>973	Callee	core -> getD3DDevice
>974	PtrMemberAccess	core -> getD3DDevice
>975	Identifier	getD3DDevice
>976	Identifier	core
>977	Callee	D3DXCreateTextureFromFile
>978	Identifier	D3DXCreateTextureFromFile
>979	ReturnStatement	 
>980	CallExpression	loadPNG ( file )
>981	ArgumentList	file
>982	Argument	file
>983	Identifier	file
>984	Callee	loadPNG
>985	Identifier	loadPNG
>986	Condition	 
>987	EqualityExpression	post == \"png\"
>988	PrimaryExpression	\"png\"
>989	Identifier	post
>990	ExpressionStatement	 
>991	CallExpression	stringToLower ( post )
>992	ArgumentList	post
>993	Argument	post
>994	Identifier	post
>995	Callee	stringToLower
>996	Identifier	stringToLower
>997	IdentifierDeclStatement	 
>998	IdentifierDecl	post = file . substr ( file . size ( ) - 3 , 3 )
>999	AssignmentExpr	post = file . substr ( file . size ( ) - 3 , 3 )
>1000	CallExpression	file . substr ( file . size ( ) - 3 , 3 )
>1001	ArgumentList	file . size ( ) - 3
>1002	Argument	3
>1003	PrimaryExpression	3
>1004	Argument	file . size ( ) - 3
>1005	AdditiveExpression	file . size ( ) - 3
>1006	PrimaryExpression	3
>1007	CallExpression	file . size ( )
>1008	ArgumentList	 
>1009	Callee	file . size
>1010	MemberAccess	file . size
>1011	Identifier	size
>1012	Identifier	file
>1013	Callee	file . substr
>1014	MemberAccess	file . substr
>1015	Identifier	substr
>1016	Identifier	file
>1017	Identifier	post
>1018	Identifier	post
>1019	IdentifierDeclType	std 
>1020	ExpressionStatement	 
>1021	AssignmentExpr	file = core -> adjustFilenameCase ( file )
>1022	CallExpression	core -> adjustFilenameCase ( file )
>1023	ArgumentList	file
>1024	Argument	file
>1025	Identifier	file
>1026	Callee	core -> adjustFilenameCase
>1027	PtrMemberAccess	core -> adjustFilenameCase
>1028	Identifier	adjustFilenameCase
>1029	Identifier	core
>1030	Identifier	file
>1031	ExpressionStatement	 
>1032	AssignmentExpr	file = localisePathInternalModpath ( file )
>1033	CallExpression	localisePathInternalModpath ( file )
>1034	ArgumentList	file
>1035	Argument	file
>1036	Identifier	file
>1037	Callee	localisePathInternalModpath
>1038	Identifier	localisePathInternalModpath
>1039	Identifier	file
>1040	Condition	 
>1041	Identifier	found
>1042	IfStatement	if ( ! found && exists ( file + \".png\" ) )
>1043	CompoundStatement	 
>1044	ExpressionStatement	 
>1045	AssignmentExpr	file += \".png\"
>1046	PrimaryExpression	\".png\"
>1047	Identifier	file
>1048	ExpressionStatement	 
>1049	AssignmentExpr	found = true
>1050	Identifier	true
>1051	Identifier	found
>1052	Condition	 
>1053	AndExpression	! found && exists ( file + \".png\" )
>1054	CallExpression	exists ( file + \".png\" )
>1055	ArgumentList	file + \".png\"
>1056	Argument	file + \".png\"
>1057	AdditiveExpression	file + \".png\"
>1058	PrimaryExpression	\".png\"
>1059	Identifier	file
>1060	Callee	exists
>1061	Identifier	exists
>1062	UnaryOp	! found
>1063	Identifier	found
>1064	UnaryOperator	!
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	found = exists ( file )
>1067	AssignmentExpr	found = exists ( file )
>1068	CallExpression	exists ( file )
>1069	ArgumentList	file
>1070	Argument	file
>1071	Identifier	file
>1072	Callee	exists
>1073	Identifier	exists
>1074	Identifier	found
>1075	Identifier	found
>1076	IdentifierDeclType	bool
>1077	IfStatement	if ( ( pos != std 
>1078	CompoundStatement	 
>1079	IfStatement	if ( pos < len )
>1080	ExpressionStatement	 
>1081	AssignmentExpr	pos = std 
>1082	Identifier	std 
>1083	Identifier	pos
>1084	Condition	 
>1085	RelationalExpression	pos < len
>1086	Identifier	len
>1087	Identifier	pos
>1088	IdentifierDeclStatement	 
>1089	IdentifierDecl	len = userdata . length ( )
>1090	AssignmentExpr	len = userdata . length ( )
>1091	CallExpression	userdata . length ( )
>1092	ArgumentList	 
>1093	Callee	userdata . length
>1094	MemberAccess	userdata . length
>1095	Identifier	length
>1096	Identifier	userdata
>1097	Identifier	len
>1098	Identifier	len
>1099	IdentifierDeclType	const size_t
>1100	IdentifierDeclStatement	 
>1101	IdentifierDecl	userdata = core -> getUserDataFolder ( )
>1102	AssignmentExpr	userdata = core -> getUserDataFolder ( )
>1103	CallExpression	core -> getUserDataFolder ( )
>1104	ArgumentList	 
>1105	Callee	core -> getUserDataFolder
>1106	PtrMemberAccess	core -> getUserDataFolder
>1107	Identifier	getUserDataFolder
>1108	Identifier	core
>1109	Identifier	userdata
>1110	Identifier	userdata
>1111	IdentifierDeclType	const std 
>1112	Condition	 
>1113	AndExpression	( pos != std 
>1114	RelationalExpression	pos >= 0
>1115	PrimaryExpression	0
>1116	Identifier	pos
>1117	EqualityExpression	pos != std 
>1118	Identifier	std 
>1119	Identifier	pos
>1120	IdentifierDeclStatement	 
>1121	IdentifierDecl	pos = file . find_last_of ( '.' )
>1122	AssignmentExpr	pos = file . find_last_of ( '.' )
>1123	CallExpression	file . find_last_of ( '.' )
>1124	ArgumentList	'.'
>1125	Argument	'.'
>1126	PrimaryExpression	'.'
>1127	Callee	file . find_last_of
>1128	MemberAccess	file . find_last_of
>1129	Identifier	find_last_of
>1130	Identifier	file
>1131	Identifier	pos
>1132	Identifier	pos
>1133	IdentifierDeclType	size_t
>1134	ExpressionStatement	 
>1135	AssignmentExpr	repeating = false
>1136	Identifier	false
>1137	Identifier	repeating
>1138	ExpressionStatement	 
>1139	AssignmentExpr	loadName = file
>1140	Identifier	file
>1141	Identifier	loadName
>1142	ExpressionStatement	 
>1143	AssignmentExpr	file = core -> adjustFilenameCase ( file )
>1144	CallExpression	core -> adjustFilenameCase ( file )
>1145	ArgumentList	file
>1146	Argument	file
>1147	Identifier	file
>1148	Callee	core -> adjustFilenameCase
>1149	PtrMemberAccess	core -> adjustFilenameCase
>1150	Identifier	adjustFilenameCase
>1151	Identifier	core
>1152	Identifier	file
>1153	ExpressionStatement	 
>1154	CallExpression	stringToLowerUserData ( file )
>1155	ArgumentList	file
>1156	Argument	file
>1157	Identifier	file
>1158	Callee	stringToLowerUserData
>1159	Identifier	stringToLowerUserData
>1160	IfStatement	if ( file . size ( ) < 4 )
>1161	CompoundStatement	 
>1162	ReturnStatement	 
>1163	Identifier	false
>1164	ExpressionStatement	 
>1165	CallExpression	errorLog ( \"Texture Name is Empty or Too Short\" )
>1166	ArgumentList	\"Texture Name is Empty or Too Short\"
>1167	Argument	\"Texture Name is Empty or Too Short\"
>1168	PrimaryExpression	\"Texture Name is Empty or Too Short\"
>1169	Callee	errorLog
>1170	Identifier	errorLog
>1171	Condition	 
>1172	RelationalExpression	file . size ( ) < 4
>1173	PrimaryExpression	4
>1174	CallExpression	file . size ( )
>1175	ArgumentList	 
>1176	Callee	file . size
>1177	MemberAccess	file . size
>1178	Identifier	size
>1179	Identifier	file
>1222	FunctionDef	Texture 
>1223	ParameterList	bool repeatOverride
>1224	Parameter	 
>1225	Identifier	repeatOverride
>1226	ParameterType	bool
>1227	ReturnType	void
>1228	CompoundStatement	 
>1229	ExpressionStatement	 
>1230	CallExpression	core -> getD3DDevice ( ) -> SetTexture ( 0 , d3dTexture )
>1231	ArgumentList	0
>1232	Argument	d3dTexture
>1233	Identifier	d3dTexture
>1234	Argument	0
>1235	PrimaryExpression	0
>1236	Callee	core -> getD3DDevice ( ) -> SetTexture
>1237	PtrMemberAccess	core -> getD3DDevice ( ) -> SetTexture
>1238	Identifier	SetTexture
>1239	CallExpression	core -> getD3DDevice ( )
>1240	ArgumentList	 
>1241	Callee	core -> getD3DDevice
>1242	PtrMemberAccess	core -> getD3DDevice
>1243	Identifier	getD3DDevice
>1244	Identifier	core
>1245	IfStatement	if ( repeat || repeatOverride )
>1246	ElseStatement	else
>1247	CompoundStatement	 
>1248	IfStatement	if ( repeating )
>1249	CompoundStatement	 
>1250	ExpressionStatement	 
>1251	AssignmentExpr	repeating = false
>1252	Identifier	false
>1253	Identifier	repeating
>1254	ExpressionStatement	 
>1255	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_T , GL_CLAMP_TO_EDGE )
>1256	ArgumentList	GL_TEXTURE_2D
>1257	Argument	GL_CLAMP_TO_EDGE
>1258	Identifier	GL_CLAMP_TO_EDGE
>1259	Argument	GL_TEXTURE_WRAP_T
>1260	Identifier	GL_TEXTURE_WRAP_T
>1261	Argument	GL_TEXTURE_2D
>1262	Identifier	GL_TEXTURE_2D
>1263	Callee	glTexParameteri
>1264	Identifier	glTexParameteri
>1265	ExpressionStatement	 
>1266	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_S , GL_CLAMP_TO_EDGE )
>1267	ArgumentList	GL_TEXTURE_2D
>1268	Argument	GL_CLAMP_TO_EDGE
>1269	Identifier	GL_CLAMP_TO_EDGE
>1270	Argument	GL_TEXTURE_WRAP_S
>1271	Identifier	GL_TEXTURE_WRAP_S
>1272	Argument	GL_TEXTURE_2D
>1273	Identifier	GL_TEXTURE_2D
>1274	Callee	glTexParameteri
>1275	Identifier	glTexParameteri
>1276	Condition	 
>1277	Identifier	repeating
>1278	CompoundStatement	 
>1279	IfStatement	if ( ! repeating )
>1280	CompoundStatement	 
>1281	ExpressionStatement	 
>1282	AssignmentExpr	repeating = true
>1283	Identifier	true
>1284	Identifier	repeating
>1285	ExpressionStatement	 
>1286	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_T , GL_REPEAT )
>1287	ArgumentList	GL_TEXTURE_2D
>1288	Argument	GL_REPEAT
>1289	Identifier	GL_REPEAT
>1290	Argument	GL_TEXTURE_WRAP_T
>1291	Identifier	GL_TEXTURE_WRAP_T
>1292	Argument	GL_TEXTURE_2D
>1293	Identifier	GL_TEXTURE_2D
>1294	Callee	glTexParameteri
>1295	Identifier	glTexParameteri
>1296	ExpressionStatement	 
>1297	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_WRAP_S , GL_REPEAT )
>1298	ArgumentList	GL_TEXTURE_2D
>1299	Argument	GL_REPEAT
>1300	Identifier	GL_REPEAT
>1301	Argument	GL_TEXTURE_WRAP_S
>1302	Identifier	GL_TEXTURE_WRAP_S
>1303	Argument	GL_TEXTURE_2D
>1304	Identifier	GL_TEXTURE_2D
>1305	Callee	glTexParameteri
>1306	Identifier	glTexParameteri
>1307	Condition	 
>1308	UnaryOp	! repeating
>1309	Identifier	repeating
>1310	UnaryOperator	!
>1311	Condition	 
>1312	OrExpression	repeat || repeatOverride
>1313	Identifier	repeatOverride
>1314	Identifier	repeat
>1315	ExpressionStatement	 
>1316	CallExpression	glBindTexture ( GL_TEXTURE_2D , textures [ 0 ] )
>1317	ArgumentList	GL_TEXTURE_2D
>1318	Argument	textures [ 0 ]
>1319	ArrayIndexing	textures [ 0 ]
>1320	PrimaryExpression	0
>1321	Identifier	textures
>1322	Argument	GL_TEXTURE_2D
>1323	Identifier	GL_TEXTURE_2D
>1324	Callee	glBindTexture
>1325	Identifier	glBindTexture
>1345	FunctionDef	Texture 
>1346	ParameterList	 
>1347	ReturnType	void
>1348	CompoundStatement	 
>1352	FunctionDef	Texture 
>1353	ParameterList	const std 
>1354	Parameter	 
>1355	Identifier	file
>1356	ParameterType	const std 
>1357	ReturnType	bool
>1358	CompoundStatement	 
>1359	ReturnStatement	 
>1360	Identifier	good
>1361	ExpressionStatement	 
>1362	Identifier	memptr
>1363	Statement	 
>1364	Statement	 
>1365	IfStatement	if ( memptr )
>1366	Statement	 
>1367	Condition	 
>1368	Identifier	memptr
>1369	IfStatement	if ( textures [ 0 ] != 0 )
>1370	ElseStatement	else
>1371	CompoundStatement	 
>1372	ExpressionStatement	 
>1373	CallExpression	debugLog ( \"Can't load PNG file
>1374	ArgumentList	\"Can't load PNG file
>1375	Argument	\"Can't load PNG file
>1376	AdditiveExpression	\"Can't load PNG file
>1377	Identifier	file
>1378	PrimaryExpression	\"Can't load PNG file
>1379	Callee	debugLog
>1380	Identifier	debugLog
>1381	Label	 
>1382	Identifier	fail
>1383	CompoundStatement	 
>1384	ExpressionStatement	 
>1385	AssignmentExpr	good = true
>1386	Identifier	true
>1387	Identifier	good
>1388	ExpressionStatement	 
>1389	AssignmentExpr	height = info . Height
>1390	MemberAccess	info . Height
>1391	Identifier	Height
>1392	Identifier	info
>1393	Identifier	height
>1394	ExpressionStatement	 
>1395	AssignmentExpr	width = info . Width
>1396	MemberAccess	info . Width
>1397	Identifier	Width
>1398	Identifier	info
>1399	Identifier	width
>1400	Condition	 
>1401	EqualityExpression	textures [ 0 ] != 0
>1402	PrimaryExpression	0
>1403	ArrayIndexing	textures [ 0 ]
>1404	PrimaryExpression	0
>1405	Identifier	textures
>1406	IfStatement	if ( filter == GL_NEAREST )
>1407	ElseStatement	else
>1408	CompoundStatement	 
>1409	ExpressionStatement	 
>1410	AssignmentExpr	textures [ 0 ] = pngBindMem ( memptr , memsize , PNG_BUILDMIPMAPS , pngType , & info , GL_CLAMP_TO_EDGE , \
>1411	CallExpression	pngBindMem ( memptr , memsize , PNG_BUILDMIPMAPS , pngType , & info , GL_CLAMP_TO_EDGE , GL_LINEAR_MIPMAP_LINEAR , \
>1412	ArgumentList	memptr
>1413	Argument	filter
>1414	Identifier	filter
>1415	Argument	GL_LINEAR_MIPMAP_LINEAR
>1416	Identifier	GL_LINEAR_MIPMAP_LINEAR
>1417	Argument	GL_CLAMP_TO_EDGE
>1418	Identifier	GL_CLAMP_TO_EDGE
>1419	Argument	& info
>1420	UnaryOp	& info
>1421	Identifier	info
>1422	UnaryOperator	&
>1423	Argument	pngType
>1424	Identifier	pngType
>1425	Argument	PNG_BUILDMIPMAPS
>1426	Identifier	PNG_BUILDMIPMAPS
>1427	Argument	memsize
>1428	Identifier	memsize
>1429	Argument	memptr
>1430	Identifier	memptr
>1431	Callee	pngBindMem
>1432	Identifier	pngBindMem
>1433	ArrayIndexing	textures [ 0 ]
>1434	PrimaryExpression	0
>1435	Identifier	textures
>1436	CompoundStatement	 
>1437	ExpressionStatement	 
>1438	AssignmentExpr	textures [ 0 ] = pngBindMem ( memptr , memsize , PNG_NOMIPMAPS , pngType , & info , GL_CLAMP_TO_EDGE , \
>1439	CallExpression	pngBindMem ( memptr , memsize , PNG_NOMIPMAPS , pngType , & info , GL_CLAMP_TO_EDGE , filter , filter )
>1440	ArgumentList	memptr
>1441	Argument	filter
>1442	Identifier	filter
>1443	Argument	filter
>1444	Identifier	filter
>1445	Argument	GL_CLAMP_TO_EDGE
>1446	Identifier	GL_CLAMP_TO_EDGE
>1447	Argument	& info
>1448	UnaryOp	& info
>1449	Identifier	info
>1450	UnaryOperator	&
>1451	Argument	pngType
>1452	Identifier	pngType
>1453	Argument	PNG_NOMIPMAPS
>1454	Identifier	PNG_NOMIPMAPS
>1455	Argument	memsize
>1456	Identifier	memsize
>1457	Argument	memptr
>1458	Identifier	memptr
>1459	Callee	pngBindMem
>1460	Identifier	pngBindMem
>1461	ArrayIndexing	textures [ 0 ]
>1462	PrimaryExpression	0
>1463	Identifier	textures
>1464	Condition	 
>1465	EqualityExpression	filter == GL_NEAREST
>1466	Identifier	GL_NEAREST
>1467	Identifier	filter
>1468	IfStatement	if ( ! memptr || ! memsize )
>1469	GotoStatement	 
>1470	Identifier	fail
>1471	Condition	 
>1472	OrExpression	! memptr || ! memsize
>1473	UnaryOp	! memsize
>1474	Identifier	memsize
>1475	UnaryOperator	!
>1476	UnaryOp	! memptr
>1477	Identifier	memptr
>1478	UnaryOperator	!
>1479	IdentifierDeclStatement	 
>1480	IdentifierDecl	* memptr = readFile ( file , & memsize )
>1481	AssignmentExpr	* memptr = readFile ( file , & memsize )
>1482	CallExpression	readFile ( file , & memsize )
>1483	ArgumentList	file
>1484	Argument	& memsize
>1485	UnaryOp	& memsize
>1486	Identifier	memsize
>1487	UnaryOperator	&
>1488	Argument	file
>1489	Identifier	file
>1490	Callee	readFile
>1491	Identifier	readFile
>1492	Identifier	memptr
>1493	Identifier	memptr
>1494	IdentifierDeclType	const char *
>1495	IdentifierDeclStatement	 
>1496	IdentifierDecl	memsize = 0
>1497	AssignmentExpr	memsize = 0
>1498	PrimaryExpression	0
>1499	Identifier	memsize
>1500	Identifier	memsize
>1501	IdentifierDeclType	unsigned long
>1502	IfStatement	if ( format != 0 )
>1503	CompoundStatement	 
>1504	IfStatement	if ( format == GL_LUMINANCE_ALPHA )
>1505	ExpressionStatement	 
>1506	AssignmentExpr	pngType = PNG_LUMINANCEALPHA
>1507	Identifier	PNG_LUMINANCEALPHA
>1508	Identifier	pngType
>1509	Condition	 
>1510	EqualityExpression	format == GL_LUMINANCE_ALPHA
>1511	Identifier	GL_LUMINANCE_ALPHA
>1512	Identifier	format
>1513	Condition	 
>1514	EqualityExpression	format != 0
>1515	PrimaryExpression	0
>1516	Identifier	format
>1517	IdentifierDeclStatement	 
>1518	IdentifierDecl	pngType = PNG_ALPHA
>1519	AssignmentExpr	pngType = PNG_ALPHA
>1520	Identifier	PNG_ALPHA
>1521	Identifier	PNG_ALPHA
>1522	Identifier	pngType
>1523	IdentifierDeclType	int
>1524	IdentifierDeclStatement	 
>1525	IdentifierDecl	info
>1526	Identifier	info
>1527	IdentifierDeclType	pngInfo
>1528	IdentifierDeclStatement	 
>1529	IdentifierDecl	good = false
>1530	AssignmentExpr	good = false
>1531	Identifier	false
>1532	Identifier	false
>1533	Identifier	good
>1534	IdentifierDeclType	bool
>1535	IfStatement	if ( file . empty ( ) )
>1536	ReturnStatement	 
>1537	Identifier	false
>1538	Condition	 
>1539	CallExpression	file . empty ( )
>1540	ArgumentList	 
>1541	Callee	file . empty
>1542	MemberAccess	file . empty
>1543	Identifier	empty
>1544	Identifier	file
>1577	FunctionDef	Texture 
>1578	ParameterList	const std 
>1579	Parameter	 
>1580	Identifier	file
>1581	ParameterType	const std 
>1582	ReturnType	bool
>1583	CompoundStatement	 
>1584	ReturnStatement	 
>1585	CallExpression	loadTGA ( TGAload ( file . c_str ( ) ) )
>1586	ArgumentList	TGAload ( file . c_str ( ) )
>1587	Argument	TGAload ( file . c_str ( ) )
>1588	CallExpression	TGAload ( file . c_str ( ) )
>1589	ArgumentList	file . c_str ( )
>1590	Argument	file . c_str ( )
>1591	CallExpression	file . c_str ( )
>1592	ArgumentList	 
>1593	Callee	file . c_str
>1594	MemberAccess	file . c_str
>1595	Identifier	c_str
>1596	Identifier	file
>1597	Callee	TGAload
>1598	Identifier	TGAload
>1599	Callee	loadTGA
>1600	Identifier	loadTGA
>1608	FunctionDef	Texture 
>1609	ParameterList	const std 
>1610	Parameter	 
>1611	Identifier	file
>1612	ParameterType	const std 
>1613	ReturnType	bool
>1614	CompoundStatement	 
>1615	ReturnStatement	 
>1616	CallExpression	loadTGA ( tga )
>1617	ArgumentList	tga
>1618	Argument	tga
>1619	Identifier	tga
>1620	Callee	loadTGA
>1621	Identifier	loadTGA
>1622	IfStatement	if ( ! tga )
>1623	CompoundStatement	 
>1624	ReturnStatement	 
>1625	Identifier	false
>1626	ExpressionStatement	 
>1627	CallExpression	debugLog ( \"Can't load ZGA File
>1628	ArgumentList	\"Can't load ZGA File
>1629	Argument	\"Can't load ZGA File
>1630	AdditiveExpression	\"Can't load ZGA File
>1631	Identifier	file
>1632	PrimaryExpression	\"Can't load ZGA File
>1633	Callee	debugLog
>1634	Identifier	debugLog
>1635	Condition	 
>1636	UnaryOp	! tga
>1637	Identifier	tga
>1638	UnaryOperator	!
>1639	IdentifierDeclStatement	 
>1640	IdentifierDecl	* tga = TGAloadMem ( buf , size )
>1641	AssignmentExpr	* tga = TGAloadMem ( buf , size )
>1642	CallExpression	TGAloadMem ( buf , size )
>1643	ArgumentList	buf
>1644	Argument	size
>1645	Identifier	size
>1646	Argument	buf
>1647	Identifier	buf
>1648	Callee	TGAloadMem
>1649	Identifier	TGAloadMem
>1650	Identifier	tga
>1651	Identifier	tga
>1652	IdentifierDeclType	ImageTGA *
>1653	IdentifierDeclStatement	 
>1654	IdentifierDecl	* buf = readCompressedFile ( file , & size )
>1655	AssignmentExpr	* buf = readCompressedFile ( file , & size )
>1656	CallExpression	readCompressedFile ( file , & size )
>1657	ArgumentList	file
>1658	Argument	& size
>1659	UnaryOp	& size
>1660	Identifier	size
>1661	UnaryOperator	&
>1662	Argument	file
>1663	Identifier	file
>1664	Callee	readCompressedFile
>1665	Identifier	readCompressedFile
>1666	Identifier	buf
>1667	Identifier	buf
>1668	IdentifierDeclType	char *
>1669	IdentifierDeclStatement	 
>1670	IdentifierDecl	size = 0
>1671	AssignmentExpr	size = 0
>1672	PrimaryExpression	0
>1673	Identifier	size
>1674	Identifier	size
>1675	IdentifierDeclType	unsigned long
>1688	FunctionDef	Texture 
>1689	ParameterList	ImageTGA * imageTGA
>1690	Parameter	 
>1691	Identifier	imageTGA
>1692	ParameterType	ImageTGA *
>1693	ReturnType	bool
>1694	CompoundStatement	 
>1695	ReturnStatement	 
>1696	Identifier	true
>1697	ExpressionStatement	 
>1698	CallExpression	free ( imageTGA )
>1699	ArgumentList	imageTGA
>1700	Argument	imageTGA
>1701	Identifier	imageTGA
>1702	Callee	free
>1703	Identifier	free
>1704	ExpressionStatement	 
>1705	PtrMemberAccess	imageTGA -> data
>1706	Identifier	data
>1707	Identifier	imageTGA
>1708	Statement	 
>1709	Statement	 
>1710	IfStatement	if ( imageTGA -> data )
>1711	Statement	 
>1712	Condition	 
>1713	PtrMemberAccess	imageTGA -> data
>1714	Identifier	data
>1715	Identifier	imageTGA
>1716	ExpressionStatement	 
>1717	AssignmentExpr	height = imageTGA -> sizeY
>1718	PtrMemberAccess	imageTGA -> sizeY
>1719	Identifier	sizeY
>1720	Identifier	imageTGA
>1721	Identifier	height
>1722	ExpressionStatement	 
>1723	AssignmentExpr	width = imageTGA -> sizeX
>1724	PtrMemberAccess	imageTGA -> sizeX
>1725	Identifier	sizeX
>1726	Identifier	imageTGA
>1727	Identifier	width
>1728	IfStatement	if ( imageTGA -> channels == 3 )
>1729	ElseStatement	else
>1730	IfStatement	if ( imageTGA -> channels == 4 )
>1731	ExpressionStatement	 
>1732	CallExpression	glTexImage2D ( GL_TEXTURE_2D , 0 , 4 , imageTGA -> sizeX , imageTGA -> sizeY , 0 , GL_RGBA , GL_UNSIGNED_BYTE , \
>1733	ArgumentList	GL_TEXTURE_2D
>1734	Argument	imageTGA -> data
>1735	PtrMemberAccess	imageTGA -> data
>1736	Identifier	data
>1737	Identifier	imageTGA
>1738	Argument	GL_UNSIGNED_BYTE
>1739	Identifier	GL_UNSIGNED_BYTE
>1740	Argument	GL_RGBA
>1741	Identifier	GL_RGBA
>1742	Argument	0
>1743	PrimaryExpression	0
>1744	Argument	imageTGA -> sizeY
>1745	PtrMemberAccess	imageTGA -> sizeY
>1746	Identifier	sizeY
>1747	Identifier	imageTGA
>1748	Argument	imageTGA -> sizeX
>1749	PtrMemberAccess	imageTGA -> sizeX
>1750	Identifier	sizeX
>1751	Identifier	imageTGA
>1752	Argument	4
>1753	PrimaryExpression	4
>1754	Argument	0
>1755	PrimaryExpression	0
>1756	Argument	GL_TEXTURE_2D
>1757	Identifier	GL_TEXTURE_2D
>1758	Callee	glTexImage2D
>1759	Identifier	glTexImage2D
>1760	Condition	 
>1761	EqualityExpression	imageTGA -> channels == 4
>1762	PrimaryExpression	4
>1763	PtrMemberAccess	imageTGA -> channels
>1764	Identifier	channels
>1765	Identifier	imageTGA
>1766	ExpressionStatement	 
>1767	CallExpression	glTexImage2D ( GL_TEXTURE_2D , 0 , 3 , imageTGA -> sizeX , imageTGA -> sizeY , 0 , GL_RGB , GL_UNSIGNED_BYTE , imageTGA \
>1768	ArgumentList	GL_TEXTURE_2D
>1769	Argument	imageTGA -> data
>1770	PtrMemberAccess	imageTGA -> data
>1771	Identifier	data
>1772	Identifier	imageTGA
>1773	Argument	GL_UNSIGNED_BYTE
>1774	Identifier	GL_UNSIGNED_BYTE
>1775	Argument	GL_RGB
>1776	Identifier	GL_RGB
>1777	Argument	0
>1778	PrimaryExpression	0
>1779	Argument	imageTGA -> sizeY
>1780	PtrMemberAccess	imageTGA -> sizeY
>1781	Identifier	sizeY
>1782	Identifier	imageTGA
>1783	Argument	imageTGA -> sizeX
>1784	PtrMemberAccess	imageTGA -> sizeX
>1785	Identifier	sizeX
>1786	Identifier	imageTGA
>1787	Argument	3
>1788	PrimaryExpression	3
>1789	Argument	0
>1790	PrimaryExpression	0
>1791	Argument	GL_TEXTURE_2D
>1792	Identifier	GL_TEXTURE_2D
>1793	Callee	glTexImage2D
>1794	Identifier	glTexImage2D
>1795	Condition	 
>1796	EqualityExpression	imageTGA -> channels == 3
>1797	PrimaryExpression	3
>1798	PtrMemberAccess	imageTGA -> channels
>1799	Identifier	channels
>1800	Identifier	imageTGA
>1801	ExpressionStatement	 
>1802	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_MAG_FILTER , filter )
>1803	ArgumentList	GL_TEXTURE_2D
>1804	Argument	filter
>1805	Identifier	filter
>1806	Argument	GL_TEXTURE_MAG_FILTER
>1807	Identifier	GL_TEXTURE_MAG_FILTER
>1808	Argument	GL_TEXTURE_2D
>1809	Identifier	GL_TEXTURE_2D
>1810	Callee	glTexParameteri
>1811	Identifier	glTexParameteri
>1812	ExpressionStatement	 
>1813	CallExpression	glTexParameteri ( GL_TEXTURE_2D , GL_TEXTURE_MIN_FILTER , filter )
>1814	ArgumentList	GL_TEXTURE_2D
>1815	Argument	filter
>1816	Identifier	filter
>1817	Argument	GL_TEXTURE_MIN_FILTER
>1818	Identifier	GL_TEXTURE_MIN_FILTER
>1819	Argument	GL_TEXTURE_2D
>1820	Identifier	GL_TEXTURE_2D
>1821	Callee	glTexParameteri
>1822	Identifier	glTexParameteri
>1823	ExpressionStatement	 
>1824	CallExpression	glBindTexture ( GL_TEXTURE_2D , textures [ 0 ] )
>1825	ArgumentList	GL_TEXTURE_2D
>1826	Argument	textures [ 0 ]
>1827	ArrayIndexing	textures [ 0 ]
>1828	PrimaryExpression	0
>1829	Identifier	textures
>1830	Argument	GL_TEXTURE_2D
>1831	Identifier	GL_TEXTURE_2D
>1832	Callee	glBindTexture
>1833	Identifier	glBindTexture
>1834	ExpressionStatement	 
>1835	CallExpression	glGenTextures ( 1 , & textures [ 0 ] )
>1836	ArgumentList	1
>1837	Argument	& textures [ 0 ]
>1838	UnaryOp	& textures [ 0 ]
>1839	ArrayIndexing	textures [ 0 ]
>1840	PrimaryExpression	0
>1841	Identifier	textures
>1842	UnaryOperator	&
>1843	Argument	1
>1844	PrimaryExpression	1
>1845	Callee	glGenTextures
>1846	Identifier	glGenTextures
>1847	IfStatement	if ( ! imageTGA )
>1848	ReturnStatement	 
>1849	Identifier	false
>1850	Condition	 
>1851	UnaryOp	! imageTGA
>1852	Identifier	imageTGA
>1853	UnaryOperator	!
>1881	FunctionDef	Texture 
>1882	ParameterList	const char * filename
>1883	Parameter	 
>1884	Identifier	filename
>1885	ParameterType	const char *
>1886	ReturnType	ImageTGA *
>1887	CompoundStatement	 
>1888	ReturnStatement	 
>1889	Identifier	tga
>1890	IfStatement	if ( ! tga )
>1891	CompoundStatement	 
>1892	ReturnStatement	 
>1893	Identifier	NULL
>1894	ExpressionStatement	 
>1895	CallExpression	debugLog ( \"Can't load TGA File!\" )
>1896	ArgumentList	\"Can't load TGA File!\"
>1897	Argument	\"Can't load TGA File!\"
>1898	PrimaryExpression	\"Can't load TGA File!\"
>1899	Callee	debugLog
>1900	Identifier	debugLog
>1901	Condition	 
>1902	UnaryOp	! tga
>1903	Identifier	tga
>1904	UnaryOperator	!
>1905	ExpressionStatement	 
>1906	Identifier	rawbuf
>1907	Statement	 
>1908	Statement	 
>1909	IfStatement	if ( rawbuf )
>1910	Statement	 
>1911	Condition	 
>1912	Identifier	rawbuf
>1913	IdentifierDeclStatement	 
>1914	IdentifierDecl	* tga = TGAloadMem ( rawbuf , size )
>1915	AssignmentExpr	* tga = TGAloadMem ( rawbuf , size )
>1916	CallExpression	TGAloadMem ( rawbuf , size )
>1917	ArgumentList	rawbuf
>1918	Argument	size
>1919	Identifier	size
>1920	Argument	rawbuf
>1921	Identifier	rawbuf
>1922	Callee	TGAloadMem
>1923	Identifier	TGAloadMem
>1924	Identifier	tga
>1925	Identifier	tga
>1926	IdentifierDeclType	ImageTGA *
>1927	IdentifierDeclStatement	 
>1928	IdentifierDecl	* rawbuf = readFile ( filename , & size )
>1929	AssignmentExpr	* rawbuf = readFile ( filename , & size )
>1930	CallExpression	readFile ( filename , & size )
>1931	ArgumentList	filename
>1932	Argument	& size
>1933	UnaryOp	& size
>1934	Identifier	size
>1935	UnaryOperator	&
>1936	Argument	filename
>1937	Identifier	filename
>1938	Callee	readFile
>1939	Identifier	readFile
>1940	Identifier	rawbuf
>1941	Identifier	rawbuf
>1942	IdentifierDeclType	char *
>1943	IdentifierDeclStatement	 
>1944	IdentifierDecl	size = 0
>1945	AssignmentExpr	size = 0
>1946	PrimaryExpression	0
>1947	Identifier	size
>1948	Identifier	size
>1949	IdentifierDeclType	unsigned long
>1961	FunctionDef	Texture 
>1962	ParameterList	void * mem , int size
>1963	Parameter	 
>1964	Identifier	size
>1965	ParameterType	int
>1966	Parameter	 
>1967	Identifier	mem
>1968	ParameterType	void *
>1969	ReturnType	ImageTGA *
>1970	CompoundStatement	 
>1971	ReturnStatement	 
>1972	Identifier	pImageData
>1973	ExpressionStatement	 
>1974	AssignmentExpr	pImageData -> sizeY = height
>1975	Identifier	height
>1976	PtrMemberAccess	pImageData -> sizeY
>1977	Identifier	sizeY
>1978	Identifier	pImageData
>1979	ExpressionStatement	 
>1980	AssignmentExpr	pImageData -> sizeX = width
>1981	Identifier	width
>1982	PtrMemberAccess	pImageData -> sizeX
>1983	Identifier	sizeX
>1984	Identifier	pImageData
>1985	ExpressionStatement	 
>1986	AssignmentExpr	pImageData -> channels = channels
>1987	Identifier	channels
>1988	PtrMemberAccess	pImageData -> channels
>1989	Identifier	channels
>1990	Identifier	pImageData
>1991	IfStatement	if ( imageType != TGA_RLE )
>1992	ElseStatement	else
>1993	CompoundStatement	 
>1994	ExpressionStatement	 
>1995	Identifier	pColors
>1996	Statement	 
>1997	Statement	 
>1998	Statement	 
>1999	WhileStatement	while ( i < width * height )
>2000	CompoundStatement	 
>2001	IfStatement	if ( rleID < 128 )
>2002	ElseStatement	else
>2003	CompoundStatement	 
>2004	WhileStatement	while ( rleID )
>2005	CompoundStatement	 
>2006	ExpressionStatement	 
>2007	AssignmentExpr	colorsRead += channels
>2008	Identifier	channels
>2009	Identifier	colorsRead
>2010	ExpressionStatement	 
>2011	IncDecOp	rleID --
>2012	IncDec	--
>2013	Identifier	rleID
>2014	ExpressionStatement	 
>2015	IncDecOp	i ++
>2016	IncDec	++
>2017	Identifier	i
>2018	IfStatement	if ( bits == 32 )
>2019	ExpressionStatement	 
>2020	AssignmentExpr	pImageData -> data [ colorsRead + 3 ] = pColors [ 3 ]
>2021	ArrayIndexing	pColors [ 3 ]
>2022	PrimaryExpression	3
>2023	Identifier	pColors
>2024	ArrayIndexing	pImageData -> data [ colorsRead + 3 ]
>2025	AdditiveExpression	colorsRead + 3
>2026	PrimaryExpression	3
>2027	Identifier	colorsRead
>2028	PtrMemberAccess	pImageData -> data
>2029	Identifier	data
>2030	Identifier	pImageData
>2031	Condition	 
>2032	EqualityExpression	bits == 32
>2033	PrimaryExpression	32
>2034	Identifier	bits
>2035	ExpressionStatement	 
>2036	AssignmentExpr	pImageData -> data [ colorsRead + 2 ] = pColors [ 0 ]
>2037	ArrayIndexing	pColors [ 0 ]
>2038	PrimaryExpression	0
>2039	Identifier	pColors
>2040	ArrayIndexing	pImageData -> data [ colorsRead + 2 ]
>2041	AdditiveExpression	colorsRead + 2
>2042	PrimaryExpression	2
>2043	Identifier	colorsRead
>2044	PtrMemberAccess	pImageData -> data
>2045	Identifier	data
>2046	Identifier	pImageData
>2047	ExpressionStatement	 
>2048	AssignmentExpr	pImageData -> data [ colorsRead + 1 ] = pColors [ 1 ]
>2049	ArrayIndexing	pColors [ 1 ]
>2050	PrimaryExpression	1
>2051	Identifier	pColors
>2052	ArrayIndexing	pImageData -> data [ colorsRead + 1 ]
>2053	AdditiveExpression	colorsRead + 1
>2054	PrimaryExpression	1
>2055	Identifier	colorsRead
>2056	PtrMemberAccess	pImageData -> data
>2057	Identifier	data
>2058	Identifier	pImageData
>2059	ExpressionStatement	 
>2060	AssignmentExpr	pImageData -> data [ colorsRead + 0 ] = pColors [ 2 ]
>2061	ArrayIndexing	pColors [ 2 ]
>2062	PrimaryExpression	2
>2063	Identifier	pColors
>2064	ArrayIndexing	pImageData -> data [ colorsRead + 0 ]
>2065	AdditiveExpression	colorsRead + 0
>2066	PrimaryExpression	0
>2067	Identifier	colorsRead
>2068	PtrMemberAccess	pImageData -> data
>2069	Identifier	data
>2070	Identifier	pImageData
>2071	Condition	 
>2072	Identifier	rleID
>2073	ExpressionStatement	 
>2074	CallExpression	bb . read ( pColors , channels )
>2075	ArgumentList	pColors
>2076	Argument	channels
>2077	Identifier	channels
>2078	Argument	pColors
>2079	Identifier	pColors
>2080	Callee	bb . read
>2081	MemberAccess	bb . read
>2082	Identifier	read
>2083	Identifier	bb
>2084	IfStatement	if ( bb . readable ( ) < channels )
>2085	BreakStatement	 
>2086	Condition	 
>2087	RelationalExpression	bb . readable ( ) < channels
>2088	Identifier	channels
>2089	CallExpression	bb . readable ( )
>2090	ArgumentList	 
>2091	Callee	bb . readable
>2092	MemberAccess	bb . readable
>2093	Identifier	readable
>2094	Identifier	bb
>2095	ExpressionStatement	 
>2096	AssignmentExpr	rleID -= 127
>2097	PrimaryExpression	127
>2098	Identifier	rleID
>2099	CompoundStatement	 
>2100	WhileStatement	while ( rleID )
>2101	CompoundStatement	 
>2102	ExpressionStatement	 
>2103	AssignmentExpr	colorsRead += channels
>2104	Identifier	channels
>2105	Identifier	colorsRead
>2106	ExpressionStatement	 
>2107	IncDecOp	rleID --
>2108	IncDec	--
>2109	Identifier	rleID
>2110	ExpressionStatement	 
>2111	IncDecOp	i ++
>2112	IncDec	++
>2113	Identifier	i
>2114	IfStatement	if ( bits == 32 )
>2115	ExpressionStatement	 
>2116	AssignmentExpr	pImageData -> data [ colorsRead + 3 ] = pColors [ 3 ]
>2117	ArrayIndexing	pColors [ 3 ]
>2118	PrimaryExpression	3
>2119	Identifier	pColors
>2120	ArrayIndexing	pImageData -> data [ colorsRead + 3 ]
>2121	AdditiveExpression	colorsRead + 3
>2122	PrimaryExpression	3
>2123	Identifier	colorsRead
>2124	PtrMemberAccess	pImageData -> data
>2125	Identifier	data
>2126	Identifier	pImageData
>2127	Condition	 
>2128	EqualityExpression	bits == 32
>2129	PrimaryExpression	32
>2130	Identifier	bits
>2131	ExpressionStatement	 
>2132	AssignmentExpr	pImageData -> data [ colorsRead + 2 ] = pColors [ 0 ]
>2133	ArrayIndexing	pColors [ 0 ]
>2134	PrimaryExpression	0
>2135	Identifier	pColors
>2136	ArrayIndexing	pImageData -> data [ colorsRead + 2 ]
>2137	AdditiveExpression	colorsRead + 2
>2138	PrimaryExpression	2
>2139	Identifier	colorsRead
>2140	PtrMemberAccess	pImageData -> data
>2141	Identifier	data
>2142	Identifier	pImageData
>2143	ExpressionStatement	 
>2144	AssignmentExpr	pImageData -> data [ colorsRead + 1 ] = pColors [ 1 ]
>2145	ArrayIndexing	pColors [ 1 ]
>2146	PrimaryExpression	1
>2147	Identifier	pColors
>2148	ArrayIndexing	pImageData -> data [ colorsRead + 1 ]
>2149	AdditiveExpression	colorsRead + 1
>2150	PrimaryExpression	1
>2151	Identifier	colorsRead
>2152	PtrMemberAccess	pImageData -> data
>2153	Identifier	data
>2154	Identifier	pImageData
>2155	ExpressionStatement	 
>2156	AssignmentExpr	pImageData -> data [ colorsRead + 0 ] = pColors [ 2 ]
>2157	ArrayIndexing	pColors [ 2 ]
>2158	PrimaryExpression	2
>2159	Identifier	pColors
>2160	ArrayIndexing	pImageData -> data [ colorsRead + 0 ]
>2161	AdditiveExpression	colorsRead + 0
>2162	PrimaryExpression	0
>2163	Identifier	colorsRead
>2164	PtrMemberAccess	pImageData -> data
>2165	Identifier	data
>2166	Identifier	pImageData
>2167	ExpressionStatement	 
>2168	CallExpression	bb . read ( pColors , channels )
>2169	ArgumentList	pColors
>2170	Argument	channels
>2171	Identifier	channels
>2172	Argument	pColors
>2173	Identifier	pColors
>2174	Callee	bb . read
>2175	MemberAccess	bb . read
>2176	Identifier	read
>2177	Identifier	bb
>2178	IfStatement	if ( bb . readable ( ) < channels )
>2179	BreakStatement	 
>2180	Condition	 
>2181	RelationalExpression	bb . readable ( ) < channels
>2182	Identifier	channels
>2183	CallExpression	bb . readable ( )
>2184	ArgumentList	 
>2185	Callee	bb . readable
>2186	MemberAccess	bb . readable
>2187	Identifier	readable
>2188	Identifier	bb
>2189	Condition	 
>2190	Identifier	rleID
>2191	ExpressionStatement	 
>2192	IncDecOp	rleID ++
>2193	IncDec	++
>2194	Identifier	rleID
>2195	Condition	 
>2196	RelationalExpression	rleID < 128
>2197	PrimaryExpression	128
>2198	Identifier	rleID
>2199	ExpressionStatement	 
>2200	ShiftExpression	bb >> rleID
>2201	Identifier	rleID
>2202	Identifier	bb
>2203	Condition	 
>2204	RelationalExpression	i < width * height
>2205	MultiplicativeExpression	width * height
>2206	Identifier	height
>2207	Identifier	width
>2208	Identifier	i
>2209	IdentifierDeclStatement	 
>2210	IdentifierDecl	* pColors = new byte [ channels ]
>2211	AssignmentExpr	* pColors = new byte [ channels ]
>2212	Identifier	channels
>2213	Identifier	channels
>2214	Identifier	pColors
>2215	IdentifierDeclType	byte *
>2216	ExpressionStatement	 
>2217	AssignmentExpr	pImageData -> data = new unsigned char [ stride * height ]
>2218	MultiplicativeExpression	stride * height
>2219	Identifier	height
>2220	Identifier	stride
>2221	PtrMemberAccess	pImageData -> data
>2222	Identifier	data
>2223	Identifier	pImageData
>2224	ExpressionStatement	 
>2225	AssignmentExpr	stride = channels * width
>2226	MultiplicativeExpression	channels * width
>2227	Identifier	width
>2228	Identifier	channels
>2229	Identifier	stride
>2230	ExpressionStatement	 
>2231	AssignmentExpr	channels = bits / 8
>2232	MultiplicativeExpression	bits / 8
>2233	PrimaryExpression	8
>2234	Identifier	bits
>2235	Identifier	channels
>2236	IdentifierDeclStatement	 
>2237	IdentifierDecl	colorsRead = 0
>2238	AssignmentExpr	colorsRead = 0
>2239	PrimaryExpression	0
>2240	Identifier	colorsRead
>2241	Identifier	colorsRead
>2242	IdentifierDeclType	int
>2243	IdentifierDeclStatement	 
>2244	IdentifierDecl	rleID = 0
>2245	AssignmentExpr	rleID = 0
>2246	PrimaryExpression	0
>2247	Identifier	rleID
>2248	Identifier	rleID
>2249	IdentifierDeclType	byte
>2250	CompoundStatement	 
>2251	IfStatement	if ( bits == 24 || bits == 32 )
>2252	ElseStatement	else
>2253	IfStatement	if ( bits == 16 )
>2254	ElseStatement	else
>2255	ReturnStatement	 
>2256	Identifier	NULL
>2257	CompoundStatement	 
>2258	ForStatement	for ( int i = 0 ; i < width * height ; i ++ )
>2259	CompoundStatement	 
>2260	ExpressionStatement	 
>2261	AssignmentExpr	pImageData -> data [ i * 3 + 2 ] = b
>2262	Identifier	b
>2263	ArrayIndexing	pImageData -> data [ i * 3 + 2 ]
>2264	AdditiveExpression	i * 3 + 2
>2265	PrimaryExpression	2
>2266	MultiplicativeExpression	i * 3
>2267	PrimaryExpression	3
>2268	Identifier	i
>2269	PtrMemberAccess	pImageData -> data
>2270	Identifier	data
>2271	Identifier	pImageData
>2272	ExpressionStatement	 
>2273	AssignmentExpr	pImageData -> data [ i * 3 + 1 ] = g
>2274	Identifier	g
>2275	ArrayIndexing	pImageData -> data [ i * 3 + 1 ]
>2276	AdditiveExpression	i * 3 + 1
>2277	PrimaryExpression	1
>2278	MultiplicativeExpression	i * 3
>2279	PrimaryExpression	3
>2280	Identifier	i
>2281	PtrMemberAccess	pImageData -> data
>2282	Identifier	data
>2283	Identifier	pImageData
>2284	ExpressionStatement	 
>2285	AssignmentExpr	pImageData -> data [ i * 3 + 0 ] = r
>2286	Identifier	r
>2287	ArrayIndexing	pImageData -> data [ i * 3 + 0 ]
>2288	AdditiveExpression	i * 3 + 0
>2289	PrimaryExpression	0
>2290	MultiplicativeExpression	i * 3
>2291	PrimaryExpression	3
>2292	Identifier	i
>2293	PtrMemberAccess	pImageData -> data
>2294	Identifier	data
>2295	Identifier	pImageData
>2296	ExpressionStatement	 
>2297	AssignmentExpr	r = ( ( pixels >> 10 ) & 0x1f ) << 3
>2298	ShiftExpression	( ( pixels >> 10 ) & 0x1f ) << 3
>2299	PrimaryExpression	3
>2300	BitAndExpression	( pixels >> 10 ) & 0x1f
>2301	PrimaryExpression	0x1f
>2302	ShiftExpression	pixels >> 10
>2303	PrimaryExpression	10
>2304	Identifier	pixels
>2305	Identifier	r
>2306	ExpressionStatement	 
>2307	AssignmentExpr	g = ( ( pixels >> 5 ) & 0x1f ) << 3
>2308	ShiftExpression	( ( pixels >> 5 ) & 0x1f ) << 3
>2309	PrimaryExpression	3
>2310	BitAndExpression	( pixels >> 5 ) & 0x1f
>2311	PrimaryExpression	0x1f
>2312	ShiftExpression	pixels >> 5
>2313	PrimaryExpression	5
>2314	Identifier	pixels
>2315	Identifier	g
>2316	ExpressionStatement	 
>2317	AssignmentExpr	b = ( pixels & 0x1f ) << 3
>2318	ShiftExpression	( pixels & 0x1f ) << 3
>2319	PrimaryExpression	3
>2320	BitAndExpression	pixels & 0x1f
>2321	PrimaryExpression	0x1f
>2322	Identifier	pixels
>2323	Identifier	b
>2324	ExpressionStatement	 
>2325	ShiftExpression	bb >> pixels
>2326	Identifier	pixels
>2327	Identifier	bb
>2328	IfStatement	if ( bb . readable ( ) < sizeof ( unsigned char ) )
>2329	BreakStatement	 
>2330	Condition	 
>2331	RelationalExpression	bb . readable ( ) < sizeof ( unsigned char )
>2332	SizeofExpr	sizeof ( unsigned char )
>2333	SizeofOperand	unsigned char
>2334	Sizeof	sizeof
>2335	CallExpression	bb . readable ( )
>2336	ArgumentList	 
>2337	Callee	bb . readable
>2338	MemberAccess	bb . readable
>2339	Identifier	readable
>2340	Identifier	bb
>2341	IncDecOp	 
>2342	IncDec	++
>2343	Identifier	i
>2344	Condition	 
>2345	RelationalExpression	i < width * height
>2346	MultiplicativeExpression	width * height
>2347	Identifier	height
>2348	Identifier	width
>2349	Identifier	i
>2350	ForInit	 
>2351	IdentifierDeclStatement	int i = 0 ;
>2352	IdentifierDecl	i = 0
>2353	AssignmentExpr	i = 0
>2354	PrimaryExpression	0
>2355	Identifier	i
>2356	Identifier	i
>2357	IdentifierDeclType	int
>2358	ExpressionStatement	 
>2359	AssignmentExpr	pImageData -> data = new unsigned char [ stride * height ]
>2360	MultiplicativeExpression	stride * height
>2361	Identifier	height
>2362	Identifier	stride
>2363	PtrMemberAccess	pImageData -> data
>2364	Identifier	data
>2365	Identifier	pImageData
>2366	ExpressionStatement	 
>2367	AssignmentExpr	stride = channels * width
>2368	MultiplicativeExpression	channels * width
>2369	Identifier	width
>2370	Identifier	channels
>2371	Identifier	stride
>2372	ExpressionStatement	 
>2373	AssignmentExpr	channels = 3
>2374	PrimaryExpression	3
>2375	Identifier	channels
>2376	IdentifierDeclStatement	 
>2377	IdentifierDecl	b = 0
>2378	AssignmentExpr	b = 0
>2379	PrimaryExpression	0
>2380	Identifier	b
>2381	Identifier	b
>2382	IdentifierDeclType	int
>2383	IdentifierDecl	g = 0
>2384	AssignmentExpr	g = 0
>2385	PrimaryExpression	0
>2386	Identifier	g
>2387	Identifier	g
>2388	IdentifierDeclType	int
>2389	IdentifierDecl	r = 0
>2390	AssignmentExpr	r = 0
>2391	PrimaryExpression	0
>2392	Identifier	r
>2393	Identifier	r
>2394	IdentifierDeclType	int
>2395	IdentifierDeclStatement	 
>2396	IdentifierDecl	pixels = 0
>2397	AssignmentExpr	pixels = 0
>2398	PrimaryExpression	0
>2399	Identifier	pixels
>2400	Identifier	pixels
>2401	IdentifierDeclType	unsigned short
>2402	Condition	 
>2403	EqualityExpression	bits == 16
>2404	PrimaryExpression	16
>2405	Identifier	bits
>2406	CompoundStatement	 
>2407	ForStatement	for ( int y = 0 ; y < height ; y ++ )
>2408	CompoundStatement	 
>2409	ForStatement	for ( i = 0 ; i < stride ; i += channels )
>2410	CompoundStatement	 
>2411	ExpressionStatement	 
>2412	AssignmentExpr	pLine [ i + 2 ] = temp
>2413	Identifier	temp
>2414	ArrayIndexing	pLine [ i + 2 ]
>2415	AdditiveExpression	i + 2
>2416	PrimaryExpression	2
>2417	Identifier	i
>2418	Identifier	pLine
>2419	ExpressionStatement	 
>2420	AssignmentExpr	pLine [ i ] = pLine [ i + 2 ]
>2421	ArrayIndexing	pLine [ i + 2 ]
>2422	AdditiveExpression	i + 2
>2423	PrimaryExpression	2
>2424	Identifier	i
>2425	Identifier	pLine
>2426	ArrayIndexing	pLine [ i ]
>2427	Identifier	i
>2428	Identifier	pLine
>2429	IdentifierDeclStatement	 
>2430	IdentifierDecl	temp = pLine [ i ]
>2431	AssignmentExpr	temp = pLine [ i ]
>2432	ArrayIndexing	pLine [ i ]
>2433	Identifier	i
>2434	Identifier	pLine
>2435	Identifier	temp
>2436	Identifier	temp
>2437	IdentifierDeclType	int
>2438	AssignmentExpr	 
>2439	Identifier	channels
>2440	Identifier	i
>2441	Condition	 
>2442	RelationalExpression	i < stride
>2443	Identifier	stride
>2444	Identifier	i
>2445	ForInit	 
>2446	AssignmentExpr	i = 0
>2447	PrimaryExpression	0
>2448	Identifier	i
>2449	ExpressionStatement	 
>2450	CallExpression	bb . read ( pLine , stride )
>2451	ArgumentList	pLine
>2452	Argument	stride
>2453	Identifier	stride
>2454	Argument	pLine
>2455	Identifier	pLine
>2456	Callee	bb . read
>2457	MemberAccess	bb . read
>2458	Identifier	read
>2459	Identifier	bb
>2460	IfStatement	if ( bb . readable ( ) < stride )
>2461	BreakStatement	 
>2462	Condition	 
>2463	RelationalExpression	bb . readable ( ) < stride
>2464	Identifier	stride
>2465	CallExpression	bb . readable ( )
>2466	ArgumentList	 
>2467	Callee	bb . readable
>2468	MemberAccess	bb . readable
>2469	Identifier	readable
>2470	Identifier	bb
>2471	IdentifierDeclStatement	 
>2472	IdentifierDecl	* pLine = & ( pImageData -> data [ stride * y ] )
>2473	AssignmentExpr	* pLine = & ( pImageData -> data [ stride * y ] )
>2474	UnaryOp	& ( pImageData -> data [ stride * y ] )
>2475	ArrayIndexing	pImageData -> data [ stride * y ]
>2476	MultiplicativeExpression	stride * y
>2477	Identifier	y
>2478	Identifier	stride
>2479	PtrMemberAccess	pImageData -> data
>2480	Identifier	data
>2481	Identifier	pImageData
>2482	UnaryOperator	&
>2483	Identifier	pLine
>2484	Identifier	pLine
>2485	IdentifierDeclType	unsigned char *
>2486	IncDecOp	 
>2487	IncDec	++
>2488	Identifier	y
>2489	Condition	 
>2490	RelationalExpression	y < height
>2491	Identifier	height
>2492	Identifier	y
>2493	ForInit	 
>2494	IdentifierDeclStatement	int y = 0 ;
>2495	IdentifierDecl	y = 0
>2496	AssignmentExpr	y = 0
>2497	PrimaryExpression	0
>2498	Identifier	y
>2499	Identifier	y
>2500	IdentifierDeclType	int
>2501	ExpressionStatement	 
>2502	AssignmentExpr	pImageData -> data = new unsigned char [ stride * height ]
>2503	MultiplicativeExpression	stride * height
>2504	Identifier	height
>2505	Identifier	stride
>2506	PtrMemberAccess	pImageData -> data
>2507	Identifier	data
>2508	Identifier	pImageData
>2509	ExpressionStatement	 
>2510	AssignmentExpr	stride = channels * width
>2511	MultiplicativeExpression	channels * width
>2512	Identifier	width
>2513	Identifier	channels
>2514	Identifier	stride
>2515	ExpressionStatement	 
>2516	AssignmentExpr	channels = bits / 8
>2517	MultiplicativeExpression	bits / 8
>2518	PrimaryExpression	8
>2519	Identifier	bits
>2520	Identifier	channels
>2521	Condition	 
>2522	OrExpression	bits == 24 || bits == 32
>2523	EqualityExpression	bits == 32
>2524	PrimaryExpression	32
>2525	Identifier	bits
>2526	EqualityExpression	bits == 24
>2527	PrimaryExpression	24
>2528	Identifier	bits
>2529	Condition	 
>2530	EqualityExpression	imageType != TGA_RLE
>2531	Identifier	TGA_RLE
>2532	Identifier	imageType
>2533	ExpressionStatement	 
>2534	CallExpression	bb . skipRead ( length + 1 )
>2535	ArgumentList	length + 1
>2536	Argument	length + 1
>2537	AdditiveExpression	length + 1
>2538	PrimaryExpression	1
>2539	Identifier	length
>2540	Callee	bb . skipRead
>2541	MemberAccess	bb . skipRead
>2542	Identifier	skipRead
>2543	Identifier	bb
>2544	ExpressionStatement	 
>2545	ShiftExpression	bb >> width >> height >> bits
>2546	ShiftExpression	width >> height >> bits
>2547	ShiftExpression	height >> bits
>2548	Identifier	bits
>2549	Identifier	height
>2550	Identifier	width
>2551	Identifier	bb
>2552	ExpressionStatement	 
>2553	CallExpression	bb . skipRead ( 9 )
>2554	ArgumentList	9
>2555	Argument	9
>2556	PrimaryExpression	9
>2557	Callee	bb . skipRead
>2558	MemberAccess	bb . skipRead
>2559	Identifier	skipRead
>2560	Identifier	bb
>2561	ExpressionStatement	 
>2562	ShiftExpression	bb >> imageType
>2563	Identifier	imageType
>2564	Identifier	bb
>2565	ExpressionStatement	 
>2566	CallExpression	bb . skipRead ( 1 )
>2567	ArgumentList	1
>2568	Argument	1
>2569	PrimaryExpression	1
>2570	Callee	bb . skipRead
>2571	MemberAccess	bb . skipRead
>2572	Identifier	skipRead
>2573	Identifier	bb
>2574	ExpressionStatement	 
>2575	ShiftExpression	bb >> length
>2576	Identifier	length
>2577	Identifier	bb
>2578	ExpressionStatement	 
>2579	AssignmentExpr	pImageData = ( ImageTGA * ) malloc ( sizeof ( ImageTGA ) )
>2580	CastExpression	( ImageTGA * ) malloc ( sizeof ( ImageTGA ) )
>2581	CallExpression	malloc ( sizeof ( ImageTGA ) )
>2582	ArgumentList	sizeof ( ImageTGA )
>2583	Argument	sizeof ( ImageTGA )
>2584	SizeofExpr	sizeof ( ImageTGA )
>2585	SizeofOperand	ImageTGA
>2586	Sizeof	sizeof
>2587	Callee	malloc
>2588	Identifier	malloc
>2589	CastTarget	ImageTGA *
>2590	Identifier	pImageData
>2591	IdentifierDeclStatement	 
>2592	IdentifierDecl	i = 0
>2593	AssignmentExpr	i = 0
>2594	PrimaryExpression	0
>2595	Identifier	i
>2596	Identifier	i
>2597	IdentifierDeclType	int
>2598	IdentifierDeclStatement	 
>2599	IdentifierDecl	stride = 0
>2600	AssignmentExpr	stride = 0
>2601	PrimaryExpression	0
>2602	Identifier	stride
>2603	Identifier	stride
>2604	IdentifierDeclType	int
>2605	IdentifierDeclStatement	 
>2606	IdentifierDecl	channels = 0
>2607	AssignmentExpr	channels = 0
>2608	PrimaryExpression	0
>2609	Identifier	channels
>2610	Identifier	channels
>2611	IdentifierDeclType	int
>2612	IdentifierDeclStatement	 
>2613	IdentifierDecl	bits = 0
>2614	AssignmentExpr	bits = 0
>2615	PrimaryExpression	0
>2616	Identifier	bits
>2617	Identifier	bits
>2618	IdentifierDeclType	byte
>2619	IdentifierDeclStatement	 
>2620	IdentifierDecl	imageType = 0
>2621	AssignmentExpr	imageType = 0
>2622	PrimaryExpression	0
>2623	Identifier	imageType
>2624	Identifier	imageType
>2625	IdentifierDeclType	byte
>2626	IdentifierDeclStatement	 
>2627	IdentifierDecl	length = 0
>2628	AssignmentExpr	length = 0
>2629	PrimaryExpression	0
>2630	Identifier	length
>2631	Identifier	length
>2632	IdentifierDeclType	byte
>2633	IdentifierDeclStatement	 
>2634	IdentifierDecl	height = 0
>2635	AssignmentExpr	height = 0
>2636	PrimaryExpression	0
>2637	Identifier	height
>2638	Identifier	height
>2639	IdentifierDeclType	WORD
>2640	IdentifierDecl	width = 0
>2641	AssignmentExpr	width = 0
>2642	PrimaryExpression	0
>2643	Identifier	width
>2644	Identifier	width
>2645	IdentifierDeclType	WORD
>2646	IdentifierDeclStatement	 
>2647	IdentifierDecl	* pImageData = NULL
>2648	AssignmentExpr	* pImageData = NULL
>2649	Identifier	NULL
>2650	Identifier	NULL
>2651	Identifier	pImageData
>2652	IdentifierDeclType	ImageTGA *
>2653	IdentifierDeclStatement	 
>2654	IdentifierDecl	bb ( mem , size , ByteBuffer 
>2655	Expression	mem , size , ByteBuffer 
>2656	Expression	size , ByteBuffer 
>2657	Identifier	ByteBuffer 
>2658	Identifier	size
>2659	Identifier	mem
>2660	Identifier	bb
>2661	IdentifierDeclType	ByteBuffer
>2662	IfStatement	if ( ! mem || size < 20 )
>2663	ReturnStatement	 
>2664	Identifier	NULL
>2665	Condition	 
>2666	OrExpression	! mem || size < 20
>2667	RelationalExpression	size < 20
>2668	PrimaryExpression	20
>2669	Identifier	size
>2670	UnaryOp	! mem
>2671	Identifier	mem
>2672	UnaryOperator	!
>2717	FunctionDef	clp2 (unsigned int x)
>2718	ParameterList	unsigned int x
>2719	Parameter	 
>2720	Identifier	x
>2721	ParameterType	unsigned int
>2722	ReturnType	static unsigned int
>2723	CompoundStatement	 
>2724	ReturnStatement	 
>2725	AdditiveExpression	x + 1
>2726	PrimaryExpression	1
>2727	Identifier	x
>2728	ExpressionStatement	 
>2729	AssignmentExpr	x |= ( x >> 16 )
>2730	ShiftExpression	x >> 16
>2731	PrimaryExpression	16
>2732	Identifier	x
>2733	Identifier	x
>2734	ExpressionStatement	 
>2735	AssignmentExpr	x |= ( x >> 8 )
>2736	ShiftExpression	x >> 8
>2737	PrimaryExpression	8
>2738	Identifier	x
>2739	Identifier	x
>2740	ExpressionStatement	 
>2741	AssignmentExpr	x |= ( x >> 4 )
>2742	ShiftExpression	x >> 4
>2743	PrimaryExpression	4
>2744	Identifier	x
>2745	Identifier	x
>2746	ExpressionStatement	 
>2747	AssignmentExpr	x |= ( x >> 2 )
>2748	ShiftExpression	x >> 2
>2749	PrimaryExpression	2
>2750	Identifier	x
>2751	Identifier	x
>2752	ExpressionStatement	 
>2753	AssignmentExpr	x |= ( x >> 1 )
>2754	ShiftExpression	x >> 1
>2755	PrimaryExpression	1
>2756	Identifier	x
>2757	Identifier	x
>2758	ExpressionStatement	 
>2759	UnaryExpression	-- x
>2760	Identifier	x
>2761	IncDec	--
>2766	FunctionDef	Texture 
>2767	ParameterList	int * wparam , int * hparam , unsigned int * sizeparam
>2768	Parameter	 
>2769	Identifier	sizeparam
>2770	ParameterType	unsigned int *
>2771	Parameter	 
>2772	Identifier	hparam
>2773	ParameterType	int *
>2774	Parameter	 
>2775	Identifier	wparam
>2776	ParameterType	int *
>2777	ReturnType	unsigned char *
>2778	CompoundStatement	 
>2779	ReturnStatement	 
>2780	Identifier	NULL
>2781	ExpressionStatement	 
>2782	AssignmentExpr	* sizeparam = 0
>2783	PrimaryExpression	0
>2784	UnaryOp	* sizeparam
>2785	Identifier	sizeparam
>2786	UnaryOperator	*
>2787	ExpressionStatement	 
>2788	AssignmentExpr	* hparam = 0
>2789	PrimaryExpression	0
>2790	UnaryOp	* hparam
>2791	Identifier	hparam
>2792	UnaryOperator	*
>2793	ExpressionStatement	 
>2794	AssignmentExpr	* wparam = 0
>2795	PrimaryExpression	0
>2796	UnaryOp	* wparam
>2797	Identifier	wparam
>2798	UnaryOperator	*
>2799	Label	 
>2800	Identifier	fail
>2801	ReturnStatement	 
>2802	Identifier	data
>2803	ExpressionStatement	 
>2804	AssignmentExpr	* sizeparam = size
>2805	Identifier	size
>2806	UnaryOp	* sizeparam
>2807	Identifier	sizeparam
>2808	UnaryOperator	*
>2809	ExpressionStatement	 
>2810	AssignmentExpr	* hparam = h
>2811	Identifier	h
>2812	UnaryOp	* hparam
>2813	Identifier	hparam
>2814	UnaryOperator	*
>2815	ExpressionStatement	 
>2816	AssignmentExpr	* wparam = w
>2817	Identifier	w
>2818	UnaryOp	* wparam
>2819	Identifier	wparam
>2820	UnaryOperator	*
>2821	IfStatement	if ( memcmp ( data + size , \"SAFE\" , 5 ) )
>2822	CompoundStatement	 
>2823	GotoStatement	 
>2824	Identifier	fail
>2825	ExpressionStatement	 
>2826	CallExpression	free ( data )
>2827	ArgumentList	data
>2828	Argument	data
>2829	Identifier	data
>2830	Callee	free
>2831	Identifier	free
>2832	ExpressionStatement	 
>2833	CallExpression	errorLog ( \"Texture
>2834	ArgumentList	\"Texture
>2835	Argument	\"Texture
>2836	PrimaryExpression	\"Texture
>2837	Callee	errorLog
>2838	Identifier	errorLog
>2839	Condition	 
>2840	CallExpression	memcmp ( data + size , \"SAFE\" , 5 )
>2841	ArgumentList	data + size
>2842	Argument	5
>2843	PrimaryExpression	5
>2844	Argument	\"SAFE\"
>2845	PrimaryExpression	\"SAFE\"
>2846	Argument	data + size
>2847	AdditiveExpression	data + size
>2848	Identifier	size
>2849	Identifier	data
>2850	Callee	memcmp
>2851	Identifier	memcmp
>2852	ExpressionStatement	 
>2853	CallExpression	glBindTexture ( GL_TEXTURE_2D , 0 )
>2854	ArgumentList	GL_TEXTURE_2D
>2855	Argument	0
>2856	PrimaryExpression	0
>2857	Argument	GL_TEXTURE_2D
>2858	Identifier	GL_TEXTURE_2D
>2859	Callee	glBindTexture
>2860	Identifier	glBindTexture
>2861	ExpressionStatement	 
>2862	CallExpression	glGetTexImage ( GL_TEXTURE_2D , 0 , GL_RGBA , GL_UNSIGNED_BYTE , data )
>2863	ArgumentList	GL_TEXTURE_2D
>2864	Argument	data
>2865	Identifier	data
>2866	Argument	GL_UNSIGNED_BYTE
>2867	Identifier	GL_UNSIGNED_BYTE
>2868	Argument	GL_RGBA
>2869	Identifier	GL_RGBA
>2870	Argument	0
>2871	PrimaryExpression	0
>2872	Argument	GL_TEXTURE_2D
>2873	Identifier	GL_TEXTURE_2D
>2874	Callee	glGetTexImage
>2875	Identifier	glGetTexImage
>2876	ExpressionStatement	 
>2877	CallExpression	memcpy ( data + size , \"SAFE\" , 5 )
>2878	ArgumentList	data + size
>2879	Argument	5
>2880	PrimaryExpression	5
>2881	Argument	\"SAFE\"
>2882	PrimaryExpression	\"SAFE\"
>2883	Argument	data + size
>2884	AdditiveExpression	data + size
>2885	Identifier	size
>2886	Identifier	data
>2887	Callee	memcpy
>2888	Identifier	memcpy
>2889	IfStatement	if ( ! data )
>2890	CompoundStatement	 
>2891	GotoStatement	 
>2892	Identifier	fail
>2893	ExpressionStatement	 
>2894	CallExpression	errorLog ( os . str ( ) )
>2895	ArgumentList	os . str ( )
>2896	Argument	os . str ( )
>2897	CallExpression	os . str ( )
>2898	ArgumentList	 
>2899	Callee	os . str
>2900	MemberAccess	os . str
>2901	Identifier	str
>2902	Identifier	os
>2903	Callee	errorLog
>2904	Identifier	errorLog
>2905	ExpressionStatement	 
>2906	ShiftExpression	os << \"Game
>2907	ShiftExpression	\"Game
>2908	Identifier	size
>2909	PrimaryExpression	\"Game
>2910	Identifier	os
>2911	IdentifierDeclStatement	 
>2912	IdentifierDecl	os
>2913	Identifier	os
>2914	IdentifierDeclType	std 
>2915	Condition	 
>2916	UnaryOp	! data
>2917	Identifier	data
>2918	UnaryOperator	!
>2919	ExpressionStatement	 
>2920	AssignmentExpr	data = ( unsigned char * ) malloc ( size + 32 )
>2921	CastExpression	( unsigned char * ) malloc ( size + 32 )
>2922	CallExpression	malloc ( size + 32 )
>2923	ArgumentList	size + 32
>2924	Argument	size + 32
>2925	AdditiveExpression	size + 32
>2926	PrimaryExpression	32
>2927	Identifier	size
>2928	Callee	malloc
>2929	Identifier	malloc
>2930	CastTarget	unsigned char *
>2931	Identifier	data
>2932	IfStatement	if ( ! size )
>2933	GotoStatement	 
>2934	Identifier	fail
>2935	Condition	 
>2936	UnaryOp	! size
>2937	Identifier	size
>2938	UnaryOperator	!
>2939	ExpressionStatement	 
>2940	AssignmentExpr	size = w * h * 4
>2941	MultiplicativeExpression	w * h * 4
>2942	MultiplicativeExpression	h * 4
>2943	PrimaryExpression	4
>2944	Identifier	h
>2945	Identifier	w
>2946	Identifier	size
>2947	IfStatement	if ( w != tw || h != th )
>2948	CompoundStatement	 
>2949	ExpressionStatement	 
>2950	AssignmentExpr	h = h > th ? h 
>2951	ConditionalExpression	h > th ? h 
>2952	Identifier	th
>2953	Identifier	h
>2954	Condition	h > th
>2955	RelationalExpression	h > th
>2956	Identifier	th
>2957	Identifier	h
>2958	Identifier	h
>2959	ExpressionStatement	 
>2960	AssignmentExpr	w = w > tw ? w 
>2961	ConditionalExpression	w > tw ? w 
>2962	Identifier	tw
>2963	Identifier	w
>2964	Condition	w > tw
>2965	RelationalExpression	w > tw
>2966	Identifier	tw
>2967	Identifier	w
>2968	Identifier	w
>2969	ExpressionStatement	 
>2970	CallExpression	debugLog ( os . str ( ) )
>2971	ArgumentList	os . str ( )
>2972	Argument	os . str ( )
>2973	CallExpression	os . str ( )
>2974	ArgumentList	 
>2975	Callee	os . str
>2976	MemberAccess	os . str
>2977	Identifier	str
>2978	Identifier	os
>2979	Callee	debugLog
>2980	Identifier	debugLog
>2981	ExpressionStatement	 
>2982	ShiftExpression	os << \"Rounded to (\" << tw << \", \" << th << \")\"
>2983	ShiftExpression	\"Rounded to (\" << tw << \", \" << th << \")\"
>2984	ShiftExpression	tw << \", \" << th << \")\"
>2985	ShiftExpression	\", \" << th << \")\"
>2986	ShiftExpression	th << \")\"
>2987	PrimaryExpression	\")\"
>2988	Identifier	th
>2989	PrimaryExpression	\", \"
>2990	Identifier	tw
>2991	PrimaryExpression	\"Rounded to (\"
>2992	Identifier	os
>2993	ExpressionStatement	 
>2994	ShiftExpression	os << \"Texture says (\" << width << \", \" << height << \"); \"
>2995	ShiftExpression	\"Texture says (\" << width << \", \" << height << \"); \"
>2996	ShiftExpression	width << \", \" << height << \"); \"
>2997	ShiftExpression	\", \" << height << \"); \"
>2998	ShiftExpression	height << \"); \"
>2999	PrimaryExpression	\"); \"
>3000	Identifier	height
>3001	PrimaryExpression	\", \"
>3002	Identifier	width
>3003	PrimaryExpression	\"Texture says (\"
>3004	Identifier	os
>3005	ExpressionStatement	 
>3006	ShiftExpression	os << \"Driver says (\" << w << \", \" << h << \"); \"
>3007	ShiftExpression	\"Driver says (\" << w << \", \" << h << \"); \"
>3008	ShiftExpression	w << \", \" << h << \"); \"
>3009	ShiftExpression	\", \" << h << \"); \"
>3010	ShiftExpression	h << \"); \"
>3011	PrimaryExpression	\"); \"
>3012	Identifier	h
>3013	PrimaryExpression	\", \"
>3014	Identifier	w
>3015	PrimaryExpression	\"Driver says (\"
>3016	Identifier	os
>3017	ExpressionStatement	 
>3018	ShiftExpression	os << \"Texture
>3019	PrimaryExpression	\"Texture
>3020	Identifier	os
>3021	IdentifierDeclStatement	 
>3022	IdentifierDecl	os
>3023	Identifier	os
>3024	IdentifierDeclType	std 
>3025	Condition	 
>3026	OrExpression	w != tw || h != th
>3027	EqualityExpression	h != th
>3028	Identifier	th
>3029	Identifier	h
>3030	EqualityExpression	w != tw
>3031	Identifier	tw
>3032	Identifier	w
>3033	ExpressionStatement	 
>3034	AssignmentExpr	th = clp2 ( height )
>3035	CallExpression	clp2 ( height )
>3036	ArgumentList	height
>3037	Argument	height
>3038	Identifier	height
>3039	Callee	clp2
>3040	Identifier	clp2
>3041	Identifier	th
>3042	ExpressionStatement	 
>3043	AssignmentExpr	tw = clp2 ( width )
>3044	CallExpression	clp2 ( width )
>3045	ArgumentList	width
>3046	Argument	width
>3047	Identifier	width
>3048	Callee	clp2
>3049	Identifier	clp2
>3050	Identifier	tw
>3051	ExpressionStatement	 
>3052	CallExpression	glGetTexLevelParameteriv ( GL_TEXTURE_2D , 0 , GL_TEXTURE_HEIGHT , & h )
>3053	ArgumentList	GL_TEXTURE_2D
>3054	Argument	& h
>3055	UnaryOp	& h
>3056	Identifier	h
>3057	UnaryOperator	&
>3058	Argument	GL_TEXTURE_HEIGHT
>3059	Identifier	GL_TEXTURE_HEIGHT
>3060	Argument	0
>3061	PrimaryExpression	0
>3062	Argument	GL_TEXTURE_2D
>3063	Identifier	GL_TEXTURE_2D
>3064	Callee	glGetTexLevelParameteriv
>3065	Identifier	glGetTexLevelParameteriv
>3066	ExpressionStatement	 
>3067	CallExpression	glGetTexLevelParameteriv ( GL_TEXTURE_2D , 0 , GL_TEXTURE_WIDTH , & w )
>3068	ArgumentList	GL_TEXTURE_2D
>3069	Argument	& w
>3070	UnaryOp	& w
>3071	Identifier	w
>3072	UnaryOperator	&
>3073	Argument	GL_TEXTURE_WIDTH
>3074	Identifier	GL_TEXTURE_WIDTH
>3075	Argument	0
>3076	PrimaryExpression	0
>3077	Argument	GL_TEXTURE_2D
>3078	Identifier	GL_TEXTURE_2D
>3079	Callee	glGetTexLevelParameteriv
>3080	Identifier	glGetTexLevelParameteriv
>3081	ExpressionStatement	 
>3082	CallExpression	glBindTexture ( GL_TEXTURE_2D , textures [ 0 ] )
>3083	ArgumentList	GL_TEXTURE_2D
>3084	Argument	textures [ 0 ]
>3085	ArrayIndexing	textures [ 0 ]
>3086	PrimaryExpression	0
>3087	Identifier	textures
>3088	Argument	GL_TEXTURE_2D
>3089	Identifier	GL_TEXTURE_2D
>3090	Callee	glBindTexture
>3091	Identifier	glBindTexture
>3092	IfStatement	if ( width <= 0 || height <= 0 )
>3093	GotoStatement	 
>3094	Identifier	fail
>3095	Condition	 
>3096	OrExpression	width <= 0 || height <= 0
>3097	RelationalExpression	height <= 0
>3098	PrimaryExpression	0
>3099	Identifier	height
>3100	RelationalExpression	width <= 0
>3101	PrimaryExpression	0
>3102	Identifier	width
>3103	IdentifierDeclStatement	 
>3104	IdentifierDecl	h = 0
>3105	AssignmentExpr	h = 0
>3106	PrimaryExpression	0
>3107	Identifier	h
>3108	Identifier	h
>3109	IdentifierDeclType	int
>3110	IdentifierDecl	w = 0
>3111	AssignmentExpr	w = 0
>3112	PrimaryExpression	0
>3113	Identifier	w
>3114	Identifier	w
>3115	IdentifierDeclType	int
>3116	IdentifierDeclStatement	 
>3117	IdentifierDecl	th = 0
>3118	AssignmentExpr	th = 0
>3119	PrimaryExpression	0
>3120	Identifier	th
>3121	Identifier	th
>3122	IdentifierDeclType	int
>3123	IdentifierDecl	tw = 0
>3124	AssignmentExpr	tw = 0
>3125	PrimaryExpression	0
>3126	Identifier	tw
>3127	Identifier	tw
>3128	IdentifierDeclType	int
>3129	IdentifierDeclStatement	 
>3130	IdentifierDecl	size = 0
>3131	AssignmentExpr	size = 0
>3132	PrimaryExpression	0
>3133	Identifier	size
>3134	Identifier	size
>3135	IdentifierDeclType	unsigned int
>3136	IdentifierDeclStatement	 
>3137	IdentifierDecl	* data = NULL
>3138	AssignmentExpr	* data = NULL
>3139	Identifier	NULL
>3140	Identifier	NULL
>3141	Identifier	data
>3142	IdentifierDeclType	unsigned char *
<9=11,10
<11=45,41,35,31,27,20,12
<12=13
<13=19,14
<14=18,15
<15=17,16
<20=21
<21=25,22
<22=23
<23=24
<25=26
<27=28
<28=30,29
<31=32
<32=34,33
<35=36
<36=40,37
<37=39,38
<41=42
<42=44,43
<45=46
<46=48,47
<48=50,49
<64=66,65
<66=67
<67=68
<68=70,69
<70=71
<75=93,92,76
<76=89,86,83,80,77
<77=79,78
<80=82,81
<83=85,84
<86=88,87
<89=91,90
<93=94
<94=181,145,95
<95=96
<96=141,109,97
<97=98
<98=107,99
<99=100
<100=101
<101=103,102
<103=104
<104=106,105
<107=108
<109=110
<110=140,111
<111=139,112
<112=136,113
<113=135,114
<114=132,115
<115=131,116
<116=130,117
<117=129,118
<118=128,119
<119=127,120
<120=126,121
<121=125,122
<122=124,123
<132=134,133
<136=138,137
<141=142
<142=144,143
<145=170,155,146
<146=147
<147=153,148
<148=151,149
<149=150
<151=152
<153=154
<155=156
<156=168,157
<157=166,164,162,160,158
<158=159
<160=161
<162=163
<164=165
<166=167
<168=169
<170=171
<171=179,172
<172=177,173
<173=174
<174=176,175
<177=178
<179=180
<181=182
<182=198,183
<183=195,184
<184=190,185
<185=189,186
<186=188,187
<190=194,191
<191=193,192
<195=197,196
<198=200,199
<220=238,237,221
<221=234,231,228,225,222
<222=224,223
<225=227,226
<228=230,229
<231=233,232
<234=236,235
<238=271,248,239
<239=240
<240=246,241
<241=244,242
<242=243
<244=245
<246=247
<248=249
<249=269,250
<250=267,265,263,261,259,257,255,253,251
<251=252
<253=254
<255=256
<257=258
<259=260
<261=262
<263=264
<265=266
<267=268
<269=270
<271=272
<272=280,273
<273=278,274
<274=275
<275=277,276
<278=279
<280=281
<295=298,297,296
<298=299
<299=343,300
<300=339,335,320,307,301
<301=302
<302=304,303
<304=306,305
<307=308
<308=318,309
<309=316,310
<310=311
<311=315,312
<312=314,313
<316=317
<318=319
<320=331,321
<321=322
<322=323
<323=329,324
<324=325
<325=326
<326=328,327
<329=330
<331=332
<332=334,333
<335=336
<336=338,337
<339=340
<340=342,341
<343=344
<344=346,345
<361=364,363,362
<364=389,374,365
<365=366
<366=370,367
<367=368
<368=369
<370=371
<371=373,372
<374=387,375
<375=380,376
<376=377
<377=379,378
<380=381
<381=383,382
<383=384
<384=386,385
<387=388
<389=390
<390=392,391
<392=393
<400=403,402,401
<403=568,561,539,532,515,514,513,506,505,504,503,501,500,499,498,415,408,404
<404=405
<405=407,406
<408=409
<409=413,410
<410=411
<411=412
<413=414
<415=497,496,489,488,487,486,484,483,482,481,416
<416=480,479,478,477,476,475,474,473,472,471,470,469,468,467,459,417
<417=449,418
<418=434,419
<419=424,420
<420=421
<421=423,422
<424=425
<425=429,426
<426=428,427
<429=433,430
<430=432,431
<434=439,435
<435=436
<436=438,437
<439=440
<440=444,441
<441=443,442
<444=448,445
<445=447,446
<449=450
<450=456,451
<451=453,452
<453=455,454
<456=458,457
<459=460
<460=462,461
<462=466,463
<463=465,464
<484=485
<489=490
<490=495,494,491
<491=493,492
<501=502
<506=507
<507=512,511,508
<508=510,509
<515=524,516
<516=523,522,517
<517=521,518
<518=520,519
<524=531,530,525
<525=529,526
<526=528,527
<532=535,533
<533=534
<535=536
<536=538,537
<539=540
<540=560,559,541
<541=558,542
<542=556,543
<543=552,548,544
<544=545
<545=547,546
<548=549
<549=551,550
<552=553
<553=555,554
<556=557
<561=562
<562=567,566,563
<563=565,564
<568=575,569
<569=574,573,570
<570=572,571
<575=580,579,576
<576=578,577
<599=602,601,600
<602=766,759,737,730,713,712,711,704,703,702,701,699,698,697,696,614,607,603
<603=604
<604=606,605
<607=608
<608=612,609
<609=610
<610=611
<612=613
<614=695,694,687,686,685,684,682,681,680,679,615
<615=678,677,676,675,674,673,672,671,670,669,668,667,666,658,616
<616=648,617
<617=633,618
<618=623,619
<619=620
<620=622,621
<623=624
<624=628,625
<625=627,626
<628=632,629
<629=631,630
<633=638,634
<634=635
<635=637,636
<638=639
<639=643,640
<640=642,641
<643=647,644
<644=646,645
<648=649
<649=655,650
<650=652,651
<652=654,653
<655=657,656
<658=659
<659=661,660
<661=665,662
<662=664,663
<682=683
<687=688
<688=693,692,689
<689=691,690
<699=700
<704=705
<705=710,709,706
<706=708,707
<713=722,714
<714=721,720,715
<715=719,716
<716=718,717
<722=729,728,723
<723=727,724
<724=726,725
<730=733,731
<731=732
<733=734
<734=736,735
<737=738
<738=758,757,739
<739=756,740
<740=754,741
<741=750,746,742
<742=743
<743=745,744
<746=747
<747=749,748
<750=751
<751=753,752
<754=755
<759=760
<760=765,764,761
<761=763,762
<766=773,767
<767=772,771,768
<768=770,769
<773=778,777,774
<774=776,775
<797=800,799,798
<800=820,815,808,801
<801=802
<802=806,803
<803=804
<804=805
<806=807
<808=809
<809=813,810
<810=811
<811=812
<813=814
<815=816
<816=818,817
<818=819
<820=821
<821=833,822
<822=823
<823=824
<824=832,825
<825=831,826
<826=830,827
<827=829,828
<833=834
<840=846,845,841
<841=842
<842=844,843
<846=1160,1153,1142,1138,1134,1120,1077,1065,1042,849,847
<847=848
<849=1040,866,850
<850=851
<851=852
<852=862,853
<853=854
<854=860,855
<855=856
<856=857
<857=859,858
<860=861
<862=863
<863=865,864
<866=1031,1020,997,990,867
<867=986,907,868
<868=869
<869=903,895,870
<870=871
<871=891,883,872
<872=873
<873=874
<874=875
<875=881,876
<876=877
<877=878
<878=880,879
<881=882
<883=884
<884=885
<885=889,886
<886=887
<887=888
<889=890
<891=892
<892=894,893
<895=896
<896=897
<897=901,898
<898=899
<899=900
<901=902
<903=904
<904=906,905
<907=979,954,908
<908=950,942,909
<909=910
<910=938,923,917,911
<911=912
<912=916,913
<913=915,914
<917=918
<918=922,919
<919=921,920
<923=924
<924=932,925
<925=930,926
<926=927
<927=929,928
<930=931
<932=933
<933=935,934
<935=937,936
<938=939
<939=941,940
<942=943
<943=944
<944=948,945
<945=946
<946=947
<948=949
<950=951
<951=953,952
<954=955
<955=977,956
<956=970,963,957
<957=958
<958=962,959
<959=961,960
<963=964
<964=966,965
<966=967
<967=969,968
<970=971
<971=973,972
<973=974
<974=976,975
<977=978
<979=980
<980=984,981
<981=982
<982=983
<984=985
<986=987
<987=989,988
<990=991
<991=995,992
<992=993
<993=994
<995=996
<997=998
<998=1019,1018,999
<999=1017,1000
<1000=1013,1001
<1001=1004,1002
<1002=1003
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1009=1010
<1010=1012,1011
<1013=1014
<1014=1016,1015
<1020=1021
<1021=1030,1022
<1022=1026,1023
<1023=1024
<1024=1025
<1026=1027
<1027=1029,1028
<1031=1032
<1032=1039,1033
<1033=1037,1034
<1034=1035
<1035=1036
<1037=1038
<1040=1041
<1042=1052,1043
<1043=1048,1044
<1044=1045
<1045=1047,1046
<1048=1049
<1049=1051,1050
<1052=1053
<1053=1062,1054
<1054=1060,1055
<1055=1056
<1056=1057
<1057=1059,1058
<1060=1061
<1062=1064,1063
<1065=1066
<1066=1076,1075,1067
<1067=1074,1068
<1068=1072,1069
<1069=1070
<1070=1071
<1072=1073
<1077=1112,1078
<1078=1100,1088,1079
<1079=1084,1080
<1080=1081
<1081=1083,1082
<1084=1085
<1085=1087,1086
<1088=1089
<1089=1099,1098,1090
<1090=1097,1091
<1091=1093,1092
<1093=1094
<1094=1096,1095
<1100=1101
<1101=1111,1110,1102
<1102=1109,1103
<1103=1105,1104
<1105=1106
<1106=1108,1107
<1112=1113
<1113=1117,1114
<1114=1116,1115
<1117=1119,1118
<1120=1121
<1121=1133,1132,1122
<1122=1131,1123
<1123=1127,1124
<1124=1125
<1125=1126
<1127=1128
<1128=1130,1129
<1134=1135
<1135=1137,1136
<1138=1139
<1139=1141,1140
<1142=1143
<1143=1152,1144
<1144=1148,1145
<1145=1146
<1146=1147
<1148=1149
<1149=1151,1150
<1153=1154
<1154=1158,1155
<1155=1156
<1156=1157
<1158=1159
<1160=1171,1161
<1161=1164,1162
<1162=1163
<1164=1165
<1165=1169,1166
<1166=1167
<1167=1168
<1169=1170
<1171=1172
<1172=1174,1173
<1174=1176,1175
<1176=1177
<1177=1179,1178
<1222=1228,1227,1223
<1223=1224
<1224=1226,1225
<1228=1315,1245,1229
<1229=1230
<1230=1236,1231
<1231=1234,1232
<1232=1233
<1234=1235
<1236=1237
<1237=1239,1238
<1239=1241,1240
<1241=1242
<1242=1244,1243
<1245=1311,1278,1246
<1246=1247
<1247=1248
<1248=1276,1249
<1249=1265,1254,1250
<1250=1251
<1251=1253,1252
<1254=1255
<1255=1263,1256
<1256=1261,1259,1257
<1257=1258
<1259=1260
<1261=1262
<1263=1264
<1265=1266
<1266=1274,1267
<1267=1272,1270,1268
<1268=1269
<1270=1271
<1272=1273
<1274=1275
<1276=1277
<1278=1279
<1279=1307,1280
<1280=1296,1285,1281
<1281=1282
<1282=1284,1283
<1285=1286
<1286=1294,1287
<1287=1292,1290,1288
<1288=1289
<1290=1291
<1292=1293
<1294=1295
<1296=1297
<1297=1305,1298
<1298=1303,1301,1299
<1299=1300
<1301=1302
<1303=1304
<1305=1306
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1314,1313
<1315=1316
<1316=1324,1317
<1317=1322,1318
<1318=1319
<1319=1321,1320
<1322=1323
<1324=1325
<1345=1348,1347,1346
<1352=1358,1357,1353
<1353=1354
<1354=1356,1355
<1358=1535,1528,1524,1517,1502,1495,1479,1468,1406,1369,1365,1364,1363,1361,1359
<1359=1360
<1361=1362
<1365=1367,1366
<1367=1368
<1369=1400,1383,1370
<1370=1371
<1371=1381,1372
<1372=1373
<1373=1379,1374
<1374=1375
<1375=1376
<1376=1378,1377
<1379=1380
<1381=1382
<1383=1394,1388,1384
<1384=1385
<1385=1387,1386
<1388=1389
<1389=1393,1390
<1390=1392,1391
<1394=1395
<1395=1399,1396
<1396=1398,1397
<1400=1401
<1401=1403,1402
<1403=1405,1404
<1406=1464,1436,1407
<1407=1408
<1408=1409
<1409=1410
<1410=1433,1411
<1411=1431,1412
<1412=1429,1427,1425,1423,1419,1417,1415,1413
<1413=1414
<1415=1416
<1417=1418
<1419=1420
<1420=1422,1421
<1423=1424
<1425=1426
<1427=1428
<1429=1430
<1431=1432
<1433=1435,1434
<1436=1437
<1437=1438
<1438=1461,1439
<1439=1459,1440
<1440=1457,1455,1453,1451,1447,1445,1443,1441
<1441=1442
<1443=1444
<1445=1446
<1447=1448
<1448=1450,1449
<1451=1452
<1453=1454
<1455=1456
<1457=1458
<1459=1460
<1461=1463,1462
<1464=1465
<1465=1467,1466
<1468=1471,1469
<1469=1470
<1471=1472
<1472=1476,1473
<1473=1475,1474
<1476=1478,1477
<1479=1480
<1480=1494,1493,1481
<1481=1492,1482
<1482=1490,1483
<1483=1488,1484
<1484=1485
<1485=1487,1486
<1488=1489
<1490=1491
<1495=1496
<1496=1501,1500,1497
<1497=1499,1498
<1502=1513,1503
<1503=1504
<1504=1509,1505
<1505=1506
<1506=1508,1507
<1509=1510
<1510=1512,1511
<1513=1514
<1514=1516,1515
<1517=1518
<1518=1523,1522,1519
<1519=1521,1520
<1524=1525
<1525=1527,1526
<1528=1529
<1529=1534,1533,1530
<1530=1532,1531
<1535=1538,1536
<1536=1537
<1538=1539
<1539=1541,1540
<1541=1542
<1542=1544,1543
<1577=1583,1582,1578
<1578=1579
<1579=1581,1580
<1583=1584
<1584=1585
<1585=1599,1586
<1586=1587
<1587=1588
<1588=1597,1589
<1589=1590
<1590=1591
<1591=1593,1592
<1593=1594
<1594=1596,1595
<1597=1598
<1599=1600
<1608=1614,1613,1609
<1609=1610
<1610=1612,1611
<1614=1669,1653,1639,1622,1615
<1615=1616
<1616=1620,1617
<1617=1618
<1618=1619
<1620=1621
<1622=1635,1623
<1623=1626,1624
<1624=1625
<1626=1627
<1627=1633,1628
<1628=1629
<1629=1630
<1630=1632,1631
<1633=1634
<1635=1636
<1636=1638,1637
<1639=1640
<1640=1652,1651,1641
<1641=1650,1642
<1642=1648,1643
<1643=1646,1644
<1644=1645
<1646=1647
<1648=1649
<1653=1654
<1654=1668,1667,1655
<1655=1666,1656
<1656=1664,1657
<1657=1662,1658
<1658=1659
<1659=1661,1660
<1662=1663
<1664=1665
<1669=1670
<1670=1675,1674,1671
<1671=1673,1672
<1688=1694,1693,1689
<1689=1690
<1690=1692,1691
<1694=1847,1834,1823,1812,1801,1728,1722,1716,1710,1709,1708,1704,1697,1695
<1695=1696
<1697=1698
<1698=1702,1699
<1699=1700
<1700=1701
<1702=1703
<1704=1705
<1705=1707,1706
<1710=1712,1711
<1712=1713
<1713=1715,1714
<1716=1717
<1717=1721,1718
<1718=1720,1719
<1722=1723
<1723=1727,1724
<1724=1726,1725
<1728=1795,1766,1729
<1729=1730
<1730=1760,1731
<1731=1732
<1732=1758,1733
<1733=1756,1754,1752,1748,1744,1742,1740,1738,1734
<1734=1735
<1735=1737,1736
<1738=1739
<1740=1741
<1742=1743
<1744=1745
<1745=1747,1746
<1748=1749
<1749=1751,1750
<1752=1753
<1754=1755
<1756=1757
<1758=1759
<1760=1761
<1761=1763,1762
<1763=1765,1764
<1766=1767
<1767=1793,1768
<1768=1791,1789,1787,1783,1779,1777,1775,1773,1769
<1769=1770
<1770=1772,1771
<1773=1774
<1775=1776
<1777=1778
<1779=1780
<1780=1782,1781
<1783=1784
<1784=1786,1785
<1787=1788
<1789=1790
<1791=1792
<1793=1794
<1795=1796
<1796=1798,1797
<1798=1800,1799
<1801=1802
<1802=1810,1803
<1803=1808,1806,1804
<1804=1805
<1806=1807
<1808=1809
<1810=1811
<1812=1813
<1813=1821,1814
<1814=1819,1817,1815
<1815=1816
<1817=1818
<1819=1820
<1821=1822
<1823=1824
<1824=1832,1825
<1825=1830,1826
<1826=1827
<1827=1829,1828
<1830=1831
<1832=1833
<1834=1835
<1835=1845,1836
<1836=1843,1837
<1837=1838
<1838=1842,1839
<1839=1841,1840
<1843=1844
<1845=1846
<1847=1850,1848
<1848=1849
<1850=1851
<1851=1853,1852
<1881=1887,1886,1882
<1882=1883
<1883=1885,1884
<1887=1943,1927,1913,1909,1908,1907,1905,1890,1888
<1888=1889
<1890=1901,1891
<1891=1894,1892
<1892=1893
<1894=1895
<1895=1899,1896
<1896=1897
<1897=1898
<1899=1900
<1901=1902
<1902=1904,1903
<1905=1906
<1909=1911,1910
<1911=1912
<1913=1914
<1914=1926,1925,1915
<1915=1924,1916
<1916=1922,1917
<1917=1920,1918
<1918=1919
<1920=1921
<1922=1923
<1927=1928
<1928=1942,1941,1929
<1929=1940,1930
<1930=1938,1931
<1931=1936,1932
<1932=1933
<1933=1935,1934
<1936=1937
<1938=1939
<1943=1944
<1944=1949,1948,1945
<1945=1947,1946
<1961=1970,1969,1962
<1962=1966,1963
<1963=1965,1964
<1966=1968,1967
<1970=2662,2653,2646,2633,2626,2619,2612,2605,2598,2591,2578,2574,2565,2561,2552,2544,2533,1991,1985,1979,1973,1971
<1971=1972
<1973=1974
<1974=1976,1975
<1976=1978,1977
<1979=1980
<1980=1982,1981
<1982=1984,1983
<1985=1986
<1986=1988,1987
<1988=1990,1989
<1991=2529,2250,1992
<1992=1993
<1993=2243,2236,2230,2224,2216,2209,1999,1998,1997,1996,1994
<1994=1995
<1999=2203,2000
<2000=2199,2001
<2001=2195,2099,2002
<2002=2003
<2003=2095,2084,2073,2004
<2004=2071,2005
<2005=2059,2047,2035,2018,2014,2010,2006
<2006=2007
<2007=2009,2008
<2010=2011
<2011=2013,2012
<2014=2015
<2015=2017,2016
<2018=2031,2019
<2019=2020
<2020=2024,2021
<2021=2023,2022
<2024=2028,2025
<2025=2027,2026
<2028=2030,2029
<2031=2032
<2032=2034,2033
<2035=2036
<2036=2040,2037
<2037=2039,2038
<2040=2044,2041
<2041=2043,2042
<2044=2046,2045
<2047=2048
<2048=2052,2049
<2049=2051,2050
<2052=2056,2053
<2053=2055,2054
<2056=2058,2057
<2059=2060
<2060=2064,2061
<2061=2063,2062
<2064=2068,2065
<2065=2067,2066
<2068=2070,2069
<2071=2072
<2073=2074
<2074=2080,2075
<2075=2078,2076
<2076=2077
<2078=2079
<2080=2081
<2081=2083,2082
<2084=2086,2085
<2086=2087
<2087=2089,2088
<2089=2091,2090
<2091=2092
<2092=2094,2093
<2095=2096
<2096=2098,2097
<2099=2191,2100
<2100=2189,2101
<2101=2178,2167,2155,2143,2131,2114,2110,2106,2102
<2102=2103
<2103=2105,2104
<2106=2107
<2107=2109,2108
<2110=2111
<2111=2113,2112
<2114=2127,2115
<2115=2116
<2116=2120,2117
<2117=2119,2118
<2120=2124,2121
<2121=2123,2122
<2124=2126,2125
<2127=2128
<2128=2130,2129
<2131=2132
<2132=2136,2133
<2133=2135,2134
<2136=2140,2137
<2137=2139,2138
<2140=2142,2141
<2143=2144
<2144=2148,2145
<2145=2147,2146
<2148=2152,2149
<2149=2151,2150
<2152=2154,2153
<2155=2156
<2156=2160,2157
<2157=2159,2158
<2160=2164,2161
<2161=2163,2162
<2164=2166,2165
<2167=2168
<2168=2174,2169
<2169=2172,2170
<2170=2171
<2172=2173
<2174=2175
<2175=2177,2176
<2178=2180,2179
<2180=2181
<2181=2183,2182
<2183=2185,2184
<2185=2186
<2186=2188,2187
<2189=2190
<2191=2192
<2192=2194,2193
<2195=2196
<2196=2198,2197
<2199=2200
<2200=2202,2201
<2203=2204
<2204=2208,2205
<2205=2207,2206
<2209=2210
<2210=2215,2214,2211
<2211=2213,2212
<2216=2217
<2217=2221,2218
<2218=2220,2219
<2221=2223,2222
<2224=2225
<2225=2229,2226
<2226=2228,2227
<2230=2231
<2231=2235,2232
<2232=2234,2233
<2236=2237
<2237=2242,2241,2238
<2238=2240,2239
<2243=2244
<2244=2249,2248,2245
<2245=2247,2246
<2250=2251
<2251=2521,2406,2252
<2252=2253
<2253=2402,2257,2254
<2254=2255
<2255=2256
<2257=2395,2376,2372,2366,2358,2258
<2258=2350,2344,2341,2259
<2259=2328,2324,2316,2306,2296,2284,2272,2260
<2260=2261
<2261=2263,2262
<2263=2269,2264
<2264=2266,2265
<2266=2268,2267
<2269=2271,2270
<2272=2273
<2273=2275,2274
<2275=2281,2276
<2276=2278,2277
<2278=2280,2279
<2281=2283,2282
<2284=2285
<2285=2287,2286
<2287=2293,2288
<2288=2290,2289
<2290=2292,2291
<2293=2295,2294
<2296=2297
<2297=2305,2298
<2298=2300,2299
<2300=2302,2301
<2302=2304,2303
<2306=2307
<2307=2315,2308
<2308=2310,2309
<2310=2312,2311
<2312=2314,2313
<2316=2317
<2317=2323,2318
<2318=2320,2319
<2320=2322,2321
<2324=2325
<2325=2327,2326
<2328=2330,2329
<2330=2331
<2331=2335,2332
<2332=2334,2333
<2335=2337,2336
<2337=2338
<2338=2340,2339
<2341=2343,2342
<2344=2345
<2345=2349,2346
<2346=2348,2347
<2350=2351
<2351=2352
<2352=2357,2356,2353
<2353=2355,2354
<2358=2359
<2359=2363,2360
<2360=2362,2361
<2363=2365,2364
<2366=2367
<2367=2371,2368
<2368=2370,2369
<2372=2373
<2373=2375,2374
<2376=2389,2383,2377
<2377=2382,2381,2378
<2378=2380,2379
<2383=2388,2387,2384
<2384=2386,2385
<2389=2394,2393,2390
<2390=2392,2391
<2395=2396
<2396=2401,2400,2397
<2397=2399,2398
<2402=2403
<2403=2405,2404
<2406=2515,2509,2501,2407
<2407=2493,2489,2486,2408
<2408=2471,2460,2449,2409
<2409=2445,2441,2438,2410
<2410=2429,2419,2411
<2411=2412
<2412=2414,2413
<2414=2418,2415
<2415=2417,2416
<2419=2420
<2420=2426,2421
<2421=2425,2422
<2422=2424,2423
<2426=2428,2427
<2429=2430
<2430=2437,2436,2431
<2431=2435,2432
<2432=2434,2433
<2438=2440,2439
<2441=2442
<2442=2444,2443
<2445=2446
<2446=2448,2447
<2449=2450
<2450=2456,2451
<2451=2454,2452
<2452=2453
<2454=2455
<2456=2457
<2457=2459,2458
<2460=2462,2461
<2462=2463
<2463=2465,2464
<2465=2467,2466
<2467=2468
<2468=2470,2469
<2471=2472
<2472=2485,2484,2473
<2473=2483,2474
<2474=2482,2475
<2475=2479,2476
<2476=2478,2477
<2479=2481,2480
<2486=2488,2487
<2489=2490
<2490=2492,2491
<2493=2494
<2494=2495
<2495=2500,2499,2496
<2496=2498,2497
<2501=2502
<2502=2506,2503
<2503=2505,2504
<2506=2508,2507
<2509=2510
<2510=2514,2511
<2511=2513,2512
<2515=2516
<2516=2520,2517
<2517=2519,2518
<2521=2522
<2522=2526,2523
<2523=2525,2524
<2526=2528,2527
<2529=2530
<2530=2532,2531
<2533=2534
<2534=2540,2535
<2535=2536
<2536=2537
<2537=2539,2538
<2540=2541
<2541=2543,2542
<2544=2545
<2545=2551,2546
<2546=2550,2547
<2547=2549,2548
<2552=2553
<2553=2557,2554
<2554=2555
<2555=2556
<2557=2558
<2558=2560,2559
<2561=2562
<2562=2564,2563
<2565=2566
<2566=2570,2567
<2567=2568
<2568=2569
<2570=2571
<2571=2573,2572
<2574=2575
<2575=2577,2576
<2578=2579
<2579=2590,2580
<2580=2589,2581
<2581=2587,2582
<2582=2583
<2583=2584
<2584=2586,2585
<2587=2588
<2591=2592
<2592=2597,2596,2593
<2593=2595,2594
<2598=2599
<2599=2604,2603,2600
<2600=2602,2601
<2605=2606
<2606=2611,2610,2607
<2607=2609,2608
<2612=2613
<2613=2618,2617,2614
<2614=2616,2615
<2619=2620
<2620=2625,2624,2621
<2621=2623,2622
<2626=2627
<2627=2632,2631,2628
<2628=2630,2629
<2633=2640,2634
<2634=2639,2638,2635
<2635=2637,2636
<2640=2645,2644,2641
<2641=2643,2642
<2646=2647
<2647=2652,2651,2648
<2648=2650,2649
<2653=2654
<2654=2661,2660,2655
<2655=2659,2656
<2656=2658,2657
<2662=2665,2663
<2663=2664
<2665=2666
<2666=2670,2667
<2667=2669,2668
<2670=2672,2671
<2717=2723,2722,2718
<2718=2719
<2719=2721,2720
<2723=2758,2752,2746,2740,2734,2728,2724
<2724=2725
<2725=2727,2726
<2728=2729
<2729=2733,2730
<2730=2732,2731
<2734=2735
<2735=2739,2736
<2736=2738,2737
<2740=2741
<2741=2745,2742
<2742=2744,2743
<2746=2747
<2747=2751,2748
<2748=2750,2749
<2752=2753
<2753=2757,2754
<2754=2756,2755
<2758=2759
<2759=2761,2760
<2766=2778,2777,2767
<2767=2774,2771,2768
<2768=2770,2769
<2771=2773,2772
<2774=2776,2775
<2778=3136,3129,3116,3103,3092,3081,3066,3051,3042,3033,2947,2939,2932,2919,2889,2876,2861,2852,2821,2815,2809,2803,2801,2799,2793,2787,2781,2779
<2779=2780
<2781=2782
<2782=2784,2783
<2784=2786,2785
<2787=2788
<2788=2790,2789
<2790=2792,2791
<2793=2794
<2794=2796,2795
<2796=2798,2797
<2799=2800
<2801=2802
<2803=2804
<2804=2806,2805
<2806=2808,2807
<2809=2810
<2810=2812,2811
<2812=2814,2813
<2815=2816
<2816=2818,2817
<2818=2820,2819
<2821=2839,2822
<2822=2832,2825,2823
<2823=2824
<2825=2826
<2826=2830,2827
<2827=2828
<2828=2829
<2830=2831
<2832=2833
<2833=2837,2834
<2834=2835
<2835=2836
<2837=2838
<2839=2840
<2840=2850,2841
<2841=2846,2844,2842
<2842=2843
<2844=2845
<2846=2847
<2847=2849,2848
<2850=2851
<2852=2853
<2853=2859,2854
<2854=2857,2855
<2855=2856
<2857=2858
<2859=2860
<2861=2862
<2862=2874,2863
<2863=2872,2870,2868,2866,2864
<2864=2865
<2866=2867
<2868=2869
<2870=2871
<2872=2873
<2874=2875
<2876=2877
<2877=2887,2878
<2878=2883,2881,2879
<2879=2880
<2881=2882
<2883=2884
<2884=2886,2885
<2887=2888
<2889=2915,2890
<2890=2911,2905,2893,2891
<2891=2892
<2893=2894
<2894=2903,2895
<2895=2896
<2896=2897
<2897=2899,2898
<2899=2900
<2900=2902,2901
<2903=2904
<2905=2906
<2906=2910,2907
<2907=2909,2908
<2911=2912
<2912=2914,2913
<2915=2916
<2916=2918,2917
<2919=2920
<2920=2931,2921
<2921=2930,2922
<2922=2928,2923
<2923=2924
<2924=2925
<2925=2927,2926
<2928=2929
<2932=2935,2933
<2933=2934
<2935=2936
<2936=2938,2937
<2939=2940
<2940=2946,2941
<2941=2945,2942
<2942=2944,2943
<2947=3025,2948
<2948=3021,3017,3005,2993,2981,2969,2959,2949
<2949=2950
<2950=2958,2951
<2951=2954,2953,2952
<2954=2955
<2955=2957,2956
<2959=2960
<2960=2968,2961
<2961=2964,2963,2962
<2964=2965
<2965=2967,2966
<2969=2970
<2970=2979,2971
<2971=2972
<2972=2973
<2973=2975,2974
<2975=2976
<2976=2978,2977
<2979=2980
<2981=2982
<2982=2992,2983
<2983=2991,2984
<2984=2990,2985
<2985=2989,2986
<2986=2988,2987
<2993=2994
<2994=3004,2995
<2995=3003,2996
<2996=3002,2997
<2997=3001,2998
<2998=3000,2999
<3005=3006
<3006=3016,3007
<3007=3015,3008
<3008=3014,3009
<3009=3013,3010
<3010=3012,3011
<3017=3018
<3018=3020,3019
<3021=3022
<3022=3024,3023
<3025=3026
<3026=3030,3027
<3027=3029,3028
<3030=3032,3031
<3033=3034
<3034=3041,3035
<3035=3039,3036
<3036=3037
<3037=3038
<3039=3040
<3042=3043
<3043=3050,3044
<3044=3048,3045
<3045=3046
<3046=3047
<3048=3049
<3051=3052
<3052=3064,3053
<3053=3062,3060,3058,3054
<3054=3055
<3055=3057,3056
<3058=3059
<3060=3061
<3062=3063
<3064=3065
<3066=3067
<3067=3079,3068
<3068=3077,3075,3073,3069
<3069=3070
<3070=3072,3071
<3073=3074
<3075=3076
<3077=3078
<3079=3080
<3081=3082
<3082=3090,3083
<3083=3088,3084
<3084=3085
<3085=3087,3086
<3088=3089
<3090=3091
<3092=3095,3093
<3093=3094
<3095=3096
<3096=3100,3097
<3097=3099,3098
<3100=3102,3101
<3103=3110,3104
<3104=3109,3108,3105
<3105=3107,3106
<3110=3115,3114,3111
<3111=3113,3112
<3116=3123,3117
<3117=3122,3121,3118
<3118=3120,3119
<3123=3128,3127,3124
<3124=3126,3125
<3129=3130
<3130=3135,3134,3131
<3131=3133,3132
<3136=3137
<3137=3142,3141,3138
<3138=3140,3139
