>3	FunctionDef	usage ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	mexPrintf ( \"\n\" )
>9	ArgumentList	\"\n\"
>10	Argument	\"\n\"
>11	PrimaryExpression	\"\n\"
>12	Callee	mexPrintf
>13	Identifier	mexPrintf
>14	ExpressionStatement	 
>15	CallExpression	mexPrintf ( \"  whiten   
>16	ArgumentList	\"  whiten   
>17	Argument	\"  whiten   
>18	PrimaryExpression	\"  whiten   
>19	Callee	mexPrintf
>20	Identifier	mexPrintf
>21	ExpressionStatement	 
>22	CallExpression	mexPrintf ( \"  method   
>23	ArgumentList	\"  method   
>24	Argument	\"  method   
>25	PrimaryExpression	\"  method   
>26	Callee	mexPrintf
>27	Identifier	mexPrintf
>28	ExpressionStatement	 
>29	CallExpression	drwnMatlabUtils 
>30	ArgumentList	 
>31	Callee	drwnMatlabUtils 
>32	Identifier	drwnMatlabUtils 
>33	ExpressionStatement	 
>34	CallExpression	mexPrintf ( \"OPTIONS
>35	ArgumentList	\"OPTIONS
>36	Argument	\"OPTIONS
>37	PrimaryExpression	\"OPTIONS
>38	Callee	mexPrintf
>39	Identifier	mexPrintf
>40	ExpressionStatement	 
>41	CallExpression	mexPrintf ( \"  weights  
>42	ArgumentList	\"  weights  
>43	Argument	\"  weights  
>44	PrimaryExpression	\"  weights  
>45	Callee	mexPrintf
>46	Identifier	mexPrintf
>47	ExpressionStatement	 
>48	CallExpression	mexPrintf ( \"  labels   
>49	ArgumentList	\"  labels   
>50	Argument	\"  labels   
>51	PrimaryExpression	\"  labels   
>52	Callee	mexPrintf
>53	Identifier	mexPrintf
>54	ExpressionStatement	 
>55	CallExpression	mexPrintf ( \"  features 
>56	ArgumentList	\"  features 
>57	Argument	\"  features 
>58	PrimaryExpression	\"  features 
>59	Callee	mexPrintf
>60	Identifier	mexPrintf
>61	ExpressionStatement	 
>62	CallExpression	mexPrintf ( \"USAGE
>63	ArgumentList	\"USAGE
>64	Argument	\"USAGE
>65	PrimaryExpression	\"USAGE
>66	Callee	mexPrintf
>67	Identifier	mexPrintf
>68	ExpressionStatement	 
>69	CallExpression	mexPrintf ( \"\n\" )
>70	ArgumentList	\"\n\"
>71	Argument	\"\n\"
>72	PrimaryExpression	\"\n\"
>73	Callee	mexPrintf
>74	Identifier	mexPrintf
>75	ExpressionStatement	 
>76	CallExpression	mexPrintf ( DRWN_USAGE_HEADER )
>77	ArgumentList	DRWN_USAGE_HEADER
>78	Argument	DRWN_USAGE_HEADER
>79	Identifier	DRWN_USAGE_HEADER
>80	Callee	mexPrintf
>81	Identifier	mexPrintf
>86	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>87	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>88	Parameter	 
>89	Identifier	prhs
>90	ParameterType	const mxArray * [ ]
>91	Parameter	 
>92	Identifier	nrhs
>93	ParameterType	int
>94	Parameter	 
>95	Identifier	plhs
>96	ParameterType	mxArray * [ ]
>97	Parameter	 
>98	Identifier	nlhs
>99	ParameterType	int
>100	ReturnType	void
>101	CompoundStatement	 
>102	ExpressionStatement	 
>103	CallExpression	drwnCodeProfiler 
>104	ArgumentList	 
>105	Callee	drwnCodeProfiler 
>106	Identifier	drwnCodeProfiler 
>107	ExpressionStatement	 
>108	CallExpression	drwnCodeProfiler 
>109	ArgumentList	drwnCodeProfiler 
>110	Argument	drwnCodeProfiler 
>111	CallExpression	drwnCodeProfiler 
>112	ArgumentList	\"mex\"
>113	Argument	\"mex\"
>114	PrimaryExpression	\"mex\"
>115	Callee	drwnCodeProfiler 
>116	Identifier	drwnCodeProfiler 
>117	Callee	drwnCodeProfiler 
>118	Identifier	drwnCodeProfiler 
>119	ExpressionStatement	 
>120	Identifier	classifier
>121	Statement	 
>122	IfStatement	if ( nlhs == 1 )
>123	CompoundStatement	 
>124	ExpressionStatement	 
>125	AssignmentExpr	plhs [ 0 ] = mxCreateString ( buffer . c_str ( ) )
>126	CallExpression	mxCreateString ( buffer . c_str ( ) )
>127	ArgumentList	buffer . c_str ( )
>128	Argument	buffer . c_str ( )
>129	CallExpression	buffer . c_str ( )
>130	ArgumentList	 
>131	Callee	buffer . c_str
>132	MemberAccess	buffer . c_str
>133	Identifier	c_str
>134	Identifier	buffer
>135	Callee	mxCreateString
>136	Identifier	mxCreateString
>137	ArrayIndexing	plhs [ 0 ]
>138	PrimaryExpression	0
>139	Identifier	plhs
>140	Condition	 
>141	EqualityExpression	nlhs == 1
>142	PrimaryExpression	1
>143	Identifier	nlhs
>144	ExpressionStatement	 
>145	CallExpression	print ( std 
>146	ArgumentList	std 
>147	Argument	0
>148	PrimaryExpression	0
>149	Argument	xml
>150	Identifier	xml
>151	Argument	std 
>152	CallExpression	std 
>153	ArgumentList	buffer
>154	Argument	buffer
>155	Identifier	buffer
>156	Callee	std 
>157	Identifier	std 
>158	Callee	print
>159	Identifier	print
>160	IdentifierDeclStatement	 
>161	IdentifierDecl	buffer
>162	Identifier	buffer
>163	IdentifierDeclType	std 
>164	IfStatement	if ( atoi ( options [ string ( \"whiten\" ) ] . c_str ( ) ) != 0 )
>165	CompoundStatement	 
>166	ExpressionStatement	 
>167	CallExpression	whitener . save ( * node )
>168	ArgumentList	* node
>169	Argument	* node
>170	UnaryOp	* node
>171	Identifier	node
>172	UnaryOperator	*
>173	Callee	whitener . save
>174	MemberAccess	whitener . save
>175	Identifier	save
>176	Identifier	whitener
>177	ExpressionStatement	 
>178	CallExpression	xml . append_node ( node )
>179	ArgumentList	node
>180	Argument	node
>181	Identifier	node
>182	Callee	xml . append_node
>183	MemberAccess	xml . append_node
>184	Identifier	append_node
>185	Identifier	xml
>186	ExpressionStatement	 
>187	AssignmentExpr	node = xml . allocate_node ( rapidxml 
>188	CallExpression	xml . allocate_node ( rapidxml 
>189	ArgumentList	rapidxml 
>190	Argument	whitener . type ( )
>191	CallExpression	whitener . type ( )
>192	ArgumentList	 
>193	Callee	whitener . type
>194	MemberAccess	whitener . type
>195	Identifier	type
>196	Identifier	whitener
>197	Argument	rapidxml 
>198	Identifier	rapidxml 
>199	Callee	xml . allocate_node
>200	MemberAccess	xml . allocate_node
>201	Identifier	allocate_node
>202	Identifier	xml
>203	Identifier	node
>204	Condition	 
>205	EqualityExpression	atoi ( options [ string ( \"whiten\" ) ] . c_str ( ) ) != 0
>206	PrimaryExpression	0
>207	CallExpression	atoi ( options [ string ( \"whiten\" ) ] . c_str ( ) )
>208	ArgumentList	options [ string ( \"whiten\" ) ] . c_str ( )
>209	Argument	options [ string ( \"whiten\" ) ] . c_str ( )
>210	CallExpression	options [ string ( \"whiten\" ) ] . c_str ( )
>211	ArgumentList	 
>212	Callee	options [ string ( \"whiten\" ) ] . c_str
>213	MemberAccess	options [ string ( \"whiten\" ) ] . c_str
>214	Identifier	c_str
>215	ArrayIndexing	options [ string ( \"whiten\" ) ]
>216	CallExpression	string ( \"whiten\" )
>217	ArgumentList	\"whiten\"
>218	Argument	\"whiten\"
>219	PrimaryExpression	\"whiten\"
>220	Callee	string
>221	Identifier	string
>222	Identifier	options
>223	Callee	atoi
>224	Identifier	atoi
>225	ExpressionStatement	 
>226	CallExpression	drwnAddXMLAttribute ( * node , \"drwnVersion\" , DRWN_VERSION , false )
>227	ArgumentList	* node
>228	Argument	false
>229	Identifier	false
>230	Argument	DRWN_VERSION
>231	Identifier	DRWN_VERSION
>232	Argument	\"drwnVersion\"
>233	PrimaryExpression	\"drwnVersion\"
>234	Argument	* node
>235	UnaryOp	* node
>236	Identifier	node
>237	UnaryOperator	*
>238	Callee	drwnAddXMLAttribute
>239	Identifier	drwnAddXMLAttribute
>240	ExpressionStatement	 
>241	CallExpression	classifier -> save ( * node )
>242	ArgumentList	* node
>243	Argument	* node
>244	UnaryOp	* node
>245	Identifier	node
>246	UnaryOperator	*
>247	Callee	classifier -> save
>248	PtrMemberAccess	classifier -> save
>249	Identifier	save
>250	Identifier	classifier
>251	ExpressionStatement	 
>252	CallExpression	xml . append_node ( node )
>253	ArgumentList	node
>254	Argument	node
>255	Identifier	node
>256	Callee	xml . append_node
>257	MemberAccess	xml . append_node
>258	Identifier	append_node
>259	Identifier	xml
>260	IdentifierDeclStatement	 
>261	IdentifierDecl	* node = xml . allocate_node ( rapidxml 
>262	AssignmentExpr	* node = xml . allocate_node ( rapidxml 
>263	CallExpression	xml . allocate_node ( rapidxml 
>264	ArgumentList	rapidxml 
>265	Argument	xml . allocate_string ( classifier -> type ( ) )
>266	CallExpression	xml . allocate_string ( classifier -> type ( ) )
>267	ArgumentList	classifier -> type ( )
>268	Argument	classifier -> type ( )
>269	CallExpression	classifier -> type ( )
>270	ArgumentList	 
>271	Callee	classifier -> type
>272	PtrMemberAccess	classifier -> type
>273	Identifier	type
>274	Identifier	classifier
>275	Callee	xml . allocate_string
>276	MemberAccess	xml . allocate_string
>277	Identifier	allocate_string
>278	Identifier	xml
>279	Argument	rapidxml 
>280	Identifier	rapidxml 
>281	Callee	xml . allocate_node
>282	MemberAccess	xml . allocate_node
>283	Identifier	allocate_node
>284	Identifier	xml
>285	Identifier	node
>286	Identifier	node
>287	IdentifierDeclType	drwnXMLNode *
>288	ExpressionStatement	 
>289	CallExpression	xml . append_node ( decl )
>290	ArgumentList	decl
>291	Argument	decl
>292	Identifier	decl
>293	Callee	xml . append_node
>294	MemberAccess	xml . append_node
>295	Identifier	append_node
>296	Identifier	xml
>297	ExpressionStatement	 
>298	CallExpression	decl -> append_attribute ( xml . allocate_attribute ( \"encoding\" , \"utf-8\" ) )
>299	ArgumentList	xml . allocate_attribute ( \"encoding\" , \"utf-8\" )
>300	Argument	xml . allocate_attribute ( \"encoding\" , \"utf-8\" )
>301	CallExpression	xml . allocate_attribute ( \"encoding\" , \"utf-8\" )
>302	ArgumentList	\"encoding\"
>303	Argument	\"utf-8\"
>304	PrimaryExpression	\"utf-8\"
>305	Argument	\"encoding\"
>306	PrimaryExpression	\"encoding\"
>307	Callee	xml . allocate_attribute
>308	MemberAccess	xml . allocate_attribute
>309	Identifier	allocate_attribute
>310	Identifier	xml
>311	Callee	decl -> append_attribute
>312	PtrMemberAccess	decl -> append_attribute
>313	Identifier	append_attribute
>314	Identifier	decl
>315	ExpressionStatement	 
>316	CallExpression	decl -> append_attribute ( xml . allocate_attribute ( \"version\" , \"1.0\" ) )
>317	ArgumentList	xml . allocate_attribute ( \"version\" , \"1.0\" )
>318	Argument	xml . allocate_attribute ( \"version\" , \"1.0\" )
>319	CallExpression	xml . allocate_attribute ( \"version\" , \"1.0\" )
>320	ArgumentList	\"version\"
>321	Argument	\"1.0\"
>322	PrimaryExpression	\"1.0\"
>323	Argument	\"version\"
>324	PrimaryExpression	\"version\"
>325	Callee	xml . allocate_attribute
>326	MemberAccess	xml . allocate_attribute
>327	Identifier	allocate_attribute
>328	Identifier	xml
>329	Callee	decl -> append_attribute
>330	PtrMemberAccess	decl -> append_attribute
>331	Identifier	append_attribute
>332	Identifier	decl
>333	IdentifierDeclStatement	 
>334	IdentifierDecl	* decl = xml . allocate_node ( rapidxml 
>335	AssignmentExpr	* decl = xml . allocate_node ( rapidxml 
>336	CallExpression	xml . allocate_node ( rapidxml 
>337	ArgumentList	rapidxml 
>338	Argument	rapidxml 
>339	Identifier	rapidxml 
>340	Callee	xml . allocate_node
>341	MemberAccess	xml . allocate_node
>342	Identifier	allocate_node
>343	Identifier	xml
>344	Identifier	decl
>345	Identifier	decl
>346	IdentifierDeclType	drwnXMLNode *
>347	IdentifierDeclStatement	 
>348	IdentifierDecl	xml
>349	Identifier	xml
>350	IdentifierDeclType	drwnXMLDoc
>351	IfStatement	if ( drwnLogger 
>352	CompoundStatement	 
>353	ExpressionStatement	 
>354	CallExpression	confusion . printCounts ( cout , \"training confusion matrix\" )
>355	ArgumentList	cout
>356	Argument	\"training confusion matrix\"
>357	PrimaryExpression	\"training confusion matrix\"
>358	Argument	cout
>359	Identifier	cout
>360	Callee	confusion . printCounts
>361	MemberAccess	confusion . printCounts
>362	Identifier	printCounts
>363	Identifier	confusion
>364	ExpressionStatement	 
>365	CallExpression	confusion . accumulate ( data . targets , predictions )
>366	ArgumentList	data . targets
>367	Argument	predictions
>368	Identifier	predictions
>369	Argument	data . targets
>370	MemberAccess	data . targets
>371	Identifier	targets
>372	Identifier	data
>373	Callee	confusion . accumulate
>374	MemberAccess	confusion . accumulate
>375	Identifier	accumulate
>376	Identifier	confusion
>377	IdentifierDeclStatement	 
>378	IdentifierDecl	confusion ( classifier -> numClasses ( ) , classifier -> numClasses ( ) )
>379	Expression	classifier -> numClasses ( ) , classifier -> numClasses ( )
>380	CallExpression	classifier -> numClasses ( )
>381	ArgumentList	 
>382	Callee	classifier -> numClasses
>383	PtrMemberAccess	classifier -> numClasses
>384	Identifier	numClasses
>385	Identifier	classifier
>386	CallExpression	classifier -> numClasses ( )
>387	ArgumentList	 
>388	Callee	classifier -> numClasses
>389	PtrMemberAccess	classifier -> numClasses
>390	Identifier	numClasses
>391	Identifier	classifier
>392	Identifier	confusion
>393	IdentifierDeclType	drwnConfusionMatrix
>394	ExpressionStatement	 
>395	CallExpression	classifier -> getClassifications ( data . features , predictions )
>396	ArgumentList	data . features
>397	Argument	predictions
>398	Identifier	predictions
>399	Argument	data . features
>400	MemberAccess	data . features
>401	Identifier	features
>402	Identifier	data
>403	Callee	classifier -> getClassifications
>404	PtrMemberAccess	classifier -> getClassifications
>405	Identifier	getClassifications
>406	Identifier	classifier
>407	IdentifierDeclStatement	 
>408	IdentifierDecl	predictions
>409	Identifier	predictions
>410	IdentifierDeclType	vector < int >
>411	Condition	 
>412	RelationalExpression	drwnLogger 
>413	Identifier	DRWN_LL_VERBOSE
>414	CallExpression	drwnLogger 
>415	ArgumentList	 
>416	Callee	drwnLogger 
>417	Identifier	drwnLogger 
>418	ExpressionStatement	 
>419	CallExpression	classifier -> train ( data )
>420	ArgumentList	data
>421	Argument	data
>422	Identifier	data
>423	Callee	classifier -> train
>424	PtrMemberAccess	classifier -> train
>425	Identifier	train
>426	Identifier	classifier
>427	ExpressionStatement	 
>428	CallExpression	classifier -> initialize ( data . numFeatures ( ) , maxLabel + 1 )
>429	ArgumentList	data . numFeatures ( )
>430	Argument	maxLabel + 1
>431	AdditiveExpression	maxLabel + 1
>432	PrimaryExpression	1
>433	Identifier	maxLabel
>434	Argument	data . numFeatures ( )
>435	CallExpression	data . numFeatures ( )
>436	ArgumentList	 
>437	Callee	data . numFeatures
>438	MemberAccess	data . numFeatures
>439	Identifier	numFeatures
>440	Identifier	data
>441	Callee	classifier -> initialize
>442	PtrMemberAccess	classifier -> initialize
>443	Identifier	initialize
>444	Identifier	classifier
>445	ExpressionStatement	 
>446	CallExpression	DRWN_LOG_DEBUG ( \"learning a \" << ( maxLabel + 1 ) << \"-class classifier from \" << data . size ( ) << \" features \
>447	ArgumentList	\"learning a \" << ( maxLabel + 1 ) << \"-class classifier from \" << data . size ( ) << \" features of length \" << data \
>448	Argument	\"learning a \" << ( maxLabel + 1 ) << \"-class classifier from \" << data . size ( ) << \" features of length \" << data \
>449	ShiftExpression	\"learning a \" << ( maxLabel + 1 ) << \"-class classifier from \" << data . size ( ) << \" features of length \" << \
>450	ShiftExpression	( maxLabel + 1 ) << \"-class classifier from \" << data . size ( ) << \" features of length \" << data . \
>451	ShiftExpression	\"-class classifier from \" << data . size ( ) << \" features of length \" << data . numFeatures ( )
>452	ShiftExpression	data . size ( ) << \" features of length \" << data . numFeatures ( )
>453	ShiftExpression	\" features of length \" << data . numFeatures ( )
>454	CallExpression	data . numFeatures ( )
>455	ArgumentList	 
>456	Callee	data . numFeatures
>457	MemberAccess	data . numFeatures
>458	Identifier	numFeatures
>459	Identifier	data
>460	PrimaryExpression	\" features of length \"
>461	CallExpression	data . size ( )
>462	ArgumentList	 
>463	Callee	data . size
>464	MemberAccess	data . size
>465	Identifier	size
>466	Identifier	data
>467	PrimaryExpression	\"-class classifier from \"
>468	AdditiveExpression	maxLabel + 1
>469	PrimaryExpression	1
>470	Identifier	maxLabel
>471	PrimaryExpression	\"learning a \"
>472	Callee	DRWN_LOG_DEBUG
>473	Identifier	DRWN_LOG_DEBUG
>474	ExpressionStatement	 
>475	CallExpression	DRWN_ASSERT_MSG ( classifier != NULL , \"unknown classifier type \\"\" << options [ string ( \"method\" ) ] << \"\\"\" )
>476	ArgumentList	classifier != NULL
>477	Argument	\"unknown classifier type \\"\" << options [ string ( \"method\" ) ] << \"\\"\"
>478	ShiftExpression	\"unknown classifier type \\"\" << options [ string ( \"method\" ) ] << \"\\"\"
>479	ShiftExpression	options [ string ( \"method\" ) ] << \"\\"\"
>480	PrimaryExpression	\"\\"\"
>481	ArrayIndexing	options [ string ( \"method\" ) ]
>482	CallExpression	string ( \"method\" )
>483	ArgumentList	\"method\"
>484	Argument	\"method\"
>485	PrimaryExpression	\"method\"
>486	Callee	string
>487	Identifier	string
>488	Identifier	options
>489	PrimaryExpression	\"unknown classifier type \\"\"
>490	Argument	classifier != NULL
>491	EqualityExpression	classifier != NULL
>492	Identifier	NULL
>493	Identifier	classifier
>494	Callee	DRWN_ASSERT_MSG
>495	Identifier	DRWN_ASSERT_MSG
>496	IdentifierDeclStatement	 
>497	IdentifierDecl	* classifier = drwnClassifierFactory 
>498	AssignmentExpr	* classifier = drwnClassifierFactory 
>499	CallExpression	drwnClassifierFactory 
>500	ArgumentList	options [ string ( \"method\" ) ] . c_str ( )
>501	Argument	options [ string ( \"method\" ) ] . c_str ( )
>502	CallExpression	options [ string ( \"method\" ) ] . c_str ( )
>503	ArgumentList	 
>504	Callee	options [ string ( \"method\" ) ] . c_str
>505	MemberAccess	options [ string ( \"method\" ) ] . c_str
>506	Identifier	c_str
>507	ArrayIndexing	options [ string ( \"method\" ) ]
>508	CallExpression	string ( \"method\" )
>509	ArgumentList	\"method\"
>510	Argument	\"method\"
>511	PrimaryExpression	\"method\"
>512	Callee	string
>513	Identifier	string
>514	Identifier	options
>515	Callee	drwnClassifierFactory 
>516	MemberAccess	drwnClassifierFactory 
>517	Identifier	create
>518	CallExpression	drwnClassifierFactory 
>519	ArgumentList	 
>520	Callee	drwnClassifierFactory 
>521	Identifier	drwnClassifierFactory 
>522	Identifier	classifier
>523	Identifier	classifier
>524	IdentifierDeclType	drwnClassifier *
>525	IfStatement	if ( atoi ( options [ string ( \"whiten\" ) ] . c_str ( ) ) != 0 )
>526	CompoundStatement	 
>527	ExpressionStatement	 
>528	CallExpression	whitener . transform ( data . features )
>529	ArgumentList	data . features
>530	Argument	data . features
>531	MemberAccess	data . features
>532	Identifier	features
>533	Identifier	data
>534	Callee	whitener . transform
>535	MemberAccess	whitener . transform
>536	Identifier	transform
>537	Identifier	whitener
>538	ExpressionStatement	 
>539	CallExpression	whitener . train ( data . features )
>540	ArgumentList	data . features
>541	Argument	data . features
>542	MemberAccess	data . features
>543	Identifier	features
>544	Identifier	data
>545	Callee	whitener . train
>546	MemberAccess	whitener . train
>547	Identifier	train
>548	Identifier	whitener
>549	ExpressionStatement	 
>550	CallExpression	DRWN_LOG_DEBUG ( \"whitening \" << data . numFeatures ( ) << \" features\" )
>551	ArgumentList	\"whitening \" << data . numFeatures ( ) << \" features\"
>552	Argument	\"whitening \" << data . numFeatures ( ) << \" features\"
>553	ShiftExpression	\"whitening \" << data . numFeatures ( ) << \" features\"
>554	ShiftExpression	data . numFeatures ( ) << \" features\"
>555	PrimaryExpression	\" features\"
>556	CallExpression	data . numFeatures ( )
>557	ArgumentList	 
>558	Callee	data . numFeatures
>559	MemberAccess	data . numFeatures
>560	Identifier	numFeatures
>561	Identifier	data
>562	PrimaryExpression	\"whitening \"
>563	Callee	DRWN_LOG_DEBUG
>564	Identifier	DRWN_LOG_DEBUG
>565	Condition	 
>566	EqualityExpression	atoi ( options [ string ( \"whiten\" ) ] . c_str ( ) ) != 0
>567	PrimaryExpression	0
>568	CallExpression	atoi ( options [ string ( \"whiten\" ) ] . c_str ( ) )
>569	ArgumentList	options [ string ( \"whiten\" ) ] . c_str ( )
>570	Argument	options [ string ( \"whiten\" ) ] . c_str ( )
>571	CallExpression	options [ string ( \"whiten\" ) ] . c_str ( )
>572	ArgumentList	 
>573	Callee	options [ string ( \"whiten\" ) ] . c_str
>574	MemberAccess	options [ string ( \"whiten\" ) ] . c_str
>575	Identifier	c_str
>576	ArrayIndexing	options [ string ( \"whiten\" ) ]
>577	CallExpression	string ( \"whiten\" )
>578	ArgumentList	\"whiten\"
>579	Argument	\"whiten\"
>580	PrimaryExpression	\"whiten\"
>581	Callee	string
>582	Identifier	string
>583	Identifier	options
>584	Callee	atoi
>585	Identifier	atoi
>586	IdentifierDeclStatement	 
>587	IdentifierDecl	whitener
>588	Identifier	whitener
>589	IdentifierDeclType	drwnFeatureWhitener
>590	ForStatement	for ( unsigned i = 0 ; i < histogram . size ( ) ; i ++ )
>591	CompoundStatement	 
>592	IfStatement	if ( histogram [ i ] == 0 )
>593	CompoundStatement	 
>594	ExpressionStatement	 
>595	CallExpression	DRWN_LOG_FATAL ( \"class label \" << i << \" has no examples\" )
>596	ArgumentList	\"class label \" << i << \" has no examples\"
>597	Argument	\"class label \" << i << \" has no examples\"
>598	ShiftExpression	\"class label \" << i << \" has no examples\"
>599	ShiftExpression	i << \" has no examples\"
>600	PrimaryExpression	\" has no examples\"
>601	Identifier	i
>602	PrimaryExpression	\"class label \"
>603	Callee	DRWN_LOG_FATAL
>604	Identifier	DRWN_LOG_FATAL
>605	Condition	 
>606	EqualityExpression	histogram [ i ] == 0
>607	PrimaryExpression	0
>608	ArrayIndexing	histogram [ i ]
>609	Identifier	i
>610	Identifier	histogram
>611	IncDecOp	 
>612	IncDec	++
>613	Identifier	i
>614	Condition	 
>615	RelationalExpression	i < histogram . size ( )
>616	CallExpression	histogram . size ( )
>617	ArgumentList	 
>618	Callee	histogram . size
>619	MemberAccess	histogram . size
>620	Identifier	size
>621	Identifier	histogram
>622	Identifier	i
>623	ForInit	 
>624	IdentifierDeclStatement	unsigned i = 0 ;
>625	IdentifierDecl	i = 0
>626	AssignmentExpr	i = 0
>627	PrimaryExpression	0
>628	Identifier	i
>629	Identifier	i
>630	IdentifierDeclType	unsigned
>631	ForStatement	for ( unsigned i = 0 ; i < data . targets . size ( ) ; i ++ )
>632	CompoundStatement	 
>633	ExpressionStatement	 
>634	AssignmentExpr	histogram [ data . targets [ i ] ] += 1
>635	PrimaryExpression	1
>636	ArrayIndexing	histogram [ data . targets [ i ] ]
>637	ArrayIndexing	data . targets [ i ]
>638	Identifier	i
>639	MemberAccess	data . targets
>640	Identifier	targets
>641	Identifier	data
>642	Identifier	histogram
>643	IfStatement	if ( data . targets [ i ] < 0 )
>644	ContinueStatement	 
>645	Condition	 
>646	RelationalExpression	data . targets [ i ] < 0
>647	PrimaryExpression	0
>648	ArrayIndexing	data . targets [ i ]
>649	Identifier	i
>650	MemberAccess	data . targets
>651	Identifier	targets
>652	Identifier	data
>653	IncDecOp	 
>654	IncDec	++
>655	Identifier	i
>656	Condition	 
>657	RelationalExpression	i < data . targets . size ( )
>658	CallExpression	data . targets . size ( )
>659	ArgumentList	 
>660	Callee	data . targets . size
>661	MemberAccess	data . targets . size
>662	Identifier	size
>663	MemberAccess	data . targets
>664	Identifier	targets
>665	Identifier	data
>666	Identifier	i
>667	ForInit	 
>668	IdentifierDeclStatement	unsigned i = 0 ;
>669	IdentifierDecl	i = 0
>670	AssignmentExpr	i = 0
>671	PrimaryExpression	0
>672	Identifier	i
>673	Identifier	i
>674	IdentifierDeclType	unsigned
>675	IdentifierDeclStatement	 
>676	IdentifierDecl	histogram ( maxLabel + 1 , 0 )
>677	Expression	maxLabel + 1 , 0
>678	PrimaryExpression	0
>679	AdditiveExpression	maxLabel + 1
>680	PrimaryExpression	1
>681	Identifier	maxLabel
>682	Identifier	histogram
>683	IdentifierDeclType	vector < int >
>684	IfStatement	if ( ( nrhs > 2 ) && ( ! mxIsEmpty ( prhs [ 2 ] ) ) )
>685	CompoundStatement	 
>686	ForStatement	for ( unsigned i = 0 ; i < data . weights . size ( ) ; i ++ )
>687	CompoundStatement	 
>688	ExpressionStatement	 
>689	AssignmentExpr	data . weights [ i ] = p [ i ]
>690	ArrayIndexing	p [ i ]
>691	Identifier	i
>692	Identifier	p
>693	ArrayIndexing	data . weights [ i ]
>694	Identifier	i
>695	MemberAccess	data . weights
>696	Identifier	weights
>697	Identifier	data
>698	IncDecOp	 
>699	IncDec	++
>700	Identifier	i
>701	Condition	 
>702	RelationalExpression	i < data . weights . size ( )
>703	CallExpression	data . weights . size ( )
>704	ArgumentList	 
>705	Callee	data . weights . size
>706	MemberAccess	data . weights . size
>707	Identifier	size
>708	MemberAccess	data . weights
>709	Identifier	weights
>710	Identifier	data
>711	Identifier	i
>712	ForInit	 
>713	IdentifierDeclStatement	unsigned i = 0 ;
>714	IdentifierDecl	i = 0
>715	AssignmentExpr	i = 0
>716	PrimaryExpression	0
>717	Identifier	i
>718	Identifier	i
>719	IdentifierDeclType	unsigned
>720	IdentifierDeclStatement	 
>721	IdentifierDecl	* p = mxGetPr ( prhs [ 2 ] )
>722	AssignmentExpr	* p = mxGetPr ( prhs [ 2 ] )
>723	CallExpression	mxGetPr ( prhs [ 2 ] )
>724	ArgumentList	prhs [ 2 ]
>725	Argument	prhs [ 2 ]
>726	ArrayIndexing	prhs [ 2 ]
>727	PrimaryExpression	2
>728	Identifier	prhs
>729	Callee	mxGetPr
>730	Identifier	mxGetPr
>731	Identifier	p
>732	Identifier	p
>733	IdentifierDeclType	const double *
>734	ExpressionStatement	 
>735	CallExpression	data . weights . resize ( data . features . size ( ) )
>736	ArgumentList	data . features . size ( )
>737	Argument	data . features . size ( )
>738	CallExpression	data . features . size ( )
>739	ArgumentList	 
>740	Callee	data . features . size
>741	MemberAccess	data . features . size
>742	Identifier	size
>743	MemberAccess	data . features
>744	Identifier	features
>745	Identifier	data
>746	Callee	data . weights . resize
>747	MemberAccess	data . weights . resize
>748	Identifier	resize
>749	MemberAccess	data . weights
>750	Identifier	weights
>751	Identifier	data
>752	Condition	 
>753	AndExpression	( nrhs > 2 ) && ( ! mxIsEmpty ( prhs [ 2 ] ) )
>754	UnaryOp	! mxIsEmpty ( prhs [ 2 ] )
>755	CallExpression	mxIsEmpty ( prhs [ 2 ] )
>756	ArgumentList	prhs [ 2 ]
>757	Argument	prhs [ 2 ]
>758	ArrayIndexing	prhs [ 2 ]
>759	PrimaryExpression	2
>760	Identifier	prhs
>761	Callee	mxIsEmpty
>762	Identifier	mxIsEmpty
>763	UnaryOperator	!
>764	RelationalExpression	nrhs > 2
>765	PrimaryExpression	2
>766	Identifier	nrhs
>767	ExpressionStatement	 
>768	CallExpression	DRWN_ASSERT_MSG ( maxLabel > 0 , \"classifier needs at least two labels\" )
>769	ArgumentList	maxLabel > 0
>770	Argument	\"classifier needs at least two labels\"
>771	PrimaryExpression	\"classifier needs at least two labels\"
>772	Argument	maxLabel > 0
>773	RelationalExpression	maxLabel > 0
>774	PrimaryExpression	0
>775	Identifier	maxLabel
>776	Callee	DRWN_ASSERT_MSG
>777	Identifier	DRWN_ASSERT_MSG
>778	SwitchStatement	switch ( mxGetClassID ( prhs [ 1 ] ) )
>779	CompoundStatement	 
>780	ExpressionStatement	 
>781	CallExpression	DRWN_LOG_FATAL ( \"unrecognized datatype, try labels = double(labels);\" )
>782	ArgumentList	\"unrecognized datatype, try labels = double(labels);\"
>783	Argument	\"unrecognized datatype, try labels = double(labels);\"
>784	PrimaryExpression	\"unrecognized datatype, try labels = double(labels);\"
>785	Callee	DRWN_LOG_FATAL
>786	Identifier	DRWN_LOG_FATAL
>787	Label	 
>788	Identifier	default
>789	BreakStatement	 
>790	CompoundStatement	 
>791	ForStatement	for ( unsigned i = 0 ; i < data . targets . size ( ) ; i ++ )
>792	CompoundStatement	 
>793	ExpressionStatement	 
>794	AssignmentExpr	maxLabel = std 
>795	CallExpression	std 
>796	ArgumentList	maxLabel
>797	Argument	( int ) p [ i ]
>798	CastExpression	( int ) p [ i ]
>799	ArrayIndexing	p [ i ]
>800	Identifier	i
>801	Identifier	p
>802	CastTarget	int
>803	Argument	maxLabel
>804	Identifier	maxLabel
>805	Callee	std 
>806	Identifier	std 
>807	Identifier	maxLabel
>808	ExpressionStatement	 
>809	AssignmentExpr	data . targets [ i ] = ( int ) p [ i ]
>810	CastExpression	( int ) p [ i ]
>811	ArrayIndexing	p [ i ]
>812	Identifier	i
>813	Identifier	p
>814	CastTarget	int
>815	ArrayIndexing	data . targets [ i ]
>816	Identifier	i
>817	MemberAccess	data . targets
>818	Identifier	targets
>819	Identifier	data
>820	IncDecOp	 
>821	IncDec	++
>822	Identifier	i
>823	Condition	 
>824	RelationalExpression	i < data . targets . size ( )
>825	CallExpression	data . targets . size ( )
>826	ArgumentList	 
>827	Callee	data . targets . size
>828	MemberAccess	data . targets . size
>829	Identifier	size
>830	MemberAccess	data . targets
>831	Identifier	targets
>832	Identifier	data
>833	Identifier	i
>834	ForInit	 
>835	IdentifierDeclStatement	unsigned i = 0 ;
>836	IdentifierDecl	i = 0
>837	AssignmentExpr	i = 0
>838	PrimaryExpression	0
>839	Identifier	i
>840	Identifier	i
>841	IdentifierDeclType	unsigned
>842	IdentifierDeclStatement	 
>843	IdentifierDecl	* p = ( const mxLogical * ) mxGetData ( prhs [ 1 ] )
>844	AssignmentExpr	* p = ( const mxLogical * ) mxGetData ( prhs [ 1 ] )
>845	CastExpression	( const mxLogical * ) mxGetData ( prhs [ 1 ] )
>846	CallExpression	mxGetData ( prhs [ 1 ] )
>847	ArgumentList	prhs [ 1 ]
>848	Argument	prhs [ 1 ]
>849	ArrayIndexing	prhs [ 1 ]
>850	PrimaryExpression	1
>851	Identifier	prhs
>852	Callee	mxGetData
>853	Identifier	mxGetData
>854	CastTarget	const mxLogical *
>855	Identifier	p
>856	Identifier	p
>857	IdentifierDeclType	const mxLogical *
>858	Label	 
>859	Identifier	mxLOGICAL_CLASS
>860	BreakStatement	 
>861	CompoundStatement	 
>862	ForStatement	for ( unsigned i = 0 ; i < data . targets . size ( ) ; i ++ )
>863	CompoundStatement	 
>864	ExpressionStatement	 
>865	AssignmentExpr	maxLabel = std 
>866	CallExpression	std 
>867	ArgumentList	maxLabel
>868	Argument	( int ) p [ i ]
>869	CastExpression	( int ) p [ i ]
>870	ArrayIndexing	p [ i ]
>871	Identifier	i
>872	Identifier	p
>873	CastTarget	int
>874	Argument	maxLabel
>875	Identifier	maxLabel
>876	Callee	std 
>877	Identifier	std 
>878	Identifier	maxLabel
>879	ExpressionStatement	 
>880	AssignmentExpr	data . targets [ i ] = ( int ) p [ i ]
>881	CastExpression	( int ) p [ i ]
>882	ArrayIndexing	p [ i ]
>883	Identifier	i
>884	Identifier	p
>885	CastTarget	int
>886	ArrayIndexing	data . targets [ i ]
>887	Identifier	i
>888	MemberAccess	data . targets
>889	Identifier	targets
>890	Identifier	data
>891	IncDecOp	 
>892	IncDec	++
>893	Identifier	i
>894	Condition	 
>895	RelationalExpression	i < data . targets . size ( )
>896	CallExpression	data . targets . size ( )
>897	ArgumentList	 
>898	Callee	data . targets . size
>899	MemberAccess	data . targets . size
>900	Identifier	size
>901	MemberAccess	data . targets
>902	Identifier	targets
>903	Identifier	data
>904	Identifier	i
>905	ForInit	 
>906	IdentifierDeclStatement	unsigned i = 0 ;
>907	IdentifierDecl	i = 0
>908	AssignmentExpr	i = 0
>909	PrimaryExpression	0
>910	Identifier	i
>911	Identifier	i
>912	IdentifierDeclType	unsigned
>913	IdentifierDeclStatement	 
>914	IdentifierDecl	* p = ( const int32_T * ) mxGetData ( prhs [ 1 ] )
>915	AssignmentExpr	* p = ( const int32_T * ) mxGetData ( prhs [ 1 ] )
>916	CastExpression	( const int32_T * ) mxGetData ( prhs [ 1 ] )
>917	CallExpression	mxGetData ( prhs [ 1 ] )
>918	ArgumentList	prhs [ 1 ]
>919	Argument	prhs [ 1 ]
>920	ArrayIndexing	prhs [ 1 ]
>921	PrimaryExpression	1
>922	Identifier	prhs
>923	Callee	mxGetData
>924	Identifier	mxGetData
>925	CastTarget	const int32_T *
>926	Identifier	p
>927	Identifier	p
>928	IdentifierDeclType	const int32_t *
>929	Label	 
>930	Identifier	mxINT32_CLASS
>931	BreakStatement	 
>932	CompoundStatement	 
>933	ForStatement	for ( unsigned i = 0 ; i < data . targets . size ( ) ; i ++ )
>934	CompoundStatement	 
>935	ExpressionStatement	 
>936	AssignmentExpr	maxLabel = std 
>937	CallExpression	std 
>938	ArgumentList	maxLabel
>939	Argument	( int ) p [ i ]
>940	CastExpression	( int ) p [ i ]
>941	ArrayIndexing	p [ i ]
>942	Identifier	i
>943	Identifier	p
>944	CastTarget	int
>945	Argument	maxLabel
>946	Identifier	maxLabel
>947	Callee	std 
>948	Identifier	std 
>949	Identifier	maxLabel
>950	ExpressionStatement	 
>951	AssignmentExpr	data . targets [ i ] = ( int ) p [ i ]
>952	CastExpression	( int ) p [ i ]
>953	ArrayIndexing	p [ i ]
>954	Identifier	i
>955	Identifier	p
>956	CastTarget	int
>957	ArrayIndexing	data . targets [ i ]
>958	Identifier	i
>959	MemberAccess	data . targets
>960	Identifier	targets
>961	Identifier	data
>962	IncDecOp	 
>963	IncDec	++
>964	Identifier	i
>965	Condition	 
>966	RelationalExpression	i < data . targets . size ( )
>967	CallExpression	data . targets . size ( )
>968	ArgumentList	 
>969	Callee	data . targets . size
>970	MemberAccess	data . targets . size
>971	Identifier	size
>972	MemberAccess	data . targets
>973	Identifier	targets
>974	Identifier	data
>975	Identifier	i
>976	ForInit	 
>977	IdentifierDeclStatement	unsigned i = 0 ;
>978	IdentifierDecl	i = 0
>979	AssignmentExpr	i = 0
>980	PrimaryExpression	0
>981	Identifier	i
>982	Identifier	i
>983	IdentifierDeclType	unsigned
>984	IdentifierDeclStatement	 
>985	IdentifierDecl	* p = mxGetPr ( prhs [ 1 ] )
>986	AssignmentExpr	* p = mxGetPr ( prhs [ 1 ] )
>987	CallExpression	mxGetPr ( prhs [ 1 ] )
>988	ArgumentList	prhs [ 1 ]
>989	Argument	prhs [ 1 ]
>990	ArrayIndexing	prhs [ 1 ]
>991	PrimaryExpression	1
>992	Identifier	prhs
>993	Callee	mxGetPr
>994	Identifier	mxGetPr
>995	Identifier	p
>996	Identifier	p
>997	IdentifierDeclType	const double *
>998	Label	 
>999	Identifier	mxDOUBLE_CLASS
>1000	Condition	 
>1001	CallExpression	mxGetClassID ( prhs [ 1 ] )
>1002	ArgumentList	prhs [ 1 ]
>1003	Argument	prhs [ 1 ]
>1004	ArrayIndexing	prhs [ 1 ]
>1005	PrimaryExpression	1
>1006	Identifier	prhs
>1007	Callee	mxGetClassID
>1008	Identifier	mxGetClassID
>1009	IdentifierDeclStatement	 
>1010	IdentifierDecl	maxLabel = 0
>1011	AssignmentExpr	maxLabel = 0
>1012	PrimaryExpression	0
>1013	Identifier	maxLabel
>1014	Identifier	maxLabel
>1015	IdentifierDeclType	int
>1016	ExpressionStatement	 
>1017	CallExpression	data . targets . resize ( data . features . size ( ) )
>1018	ArgumentList	data . features . size ( )
>1019	Argument	data . features . size ( )
>1020	CallExpression	data . features . size ( )
>1021	ArgumentList	 
>1022	Callee	data . features . size
>1023	MemberAccess	data . features . size
>1024	Identifier	size
>1025	MemberAccess	data . features
>1026	Identifier	features
>1027	Identifier	data
>1028	Callee	data . targets . resize
>1029	MemberAccess	data . targets . resize
>1030	Identifier	resize
>1031	MemberAccess	data . targets
>1032	Identifier	targets
>1033	Identifier	data
>1034	ExpressionStatement	 
>1035	CallExpression	drwnMatlabUtils 
>1036	ArgumentList	prhs [ 0 ]
>1037	Argument	data . features
>1038	MemberAccess	data . features
>1039	Identifier	features
>1040	Identifier	data
>1041	Argument	prhs [ 0 ]
>1042	ArrayIndexing	prhs [ 0 ]
>1043	PrimaryExpression	0
>1044	Identifier	prhs
>1045	Callee	drwnMatlabUtils 
>1046	Identifier	drwnMatlabUtils 
>1047	IdentifierDeclStatement	 
>1048	IdentifierDecl	data
>1049	Identifier	data
>1050	IdentifierDeclType	drwnClassifierDataset
>1051	ExpressionStatement	 
>1052	CallExpression	drwnCodeProfiler 
>1053	ArgumentList	drwnCodeProfiler 
>1054	Argument	drwnCodeProfiler 
>1055	CallExpression	drwnCodeProfiler 
>1056	ArgumentList	\"mex\"
>1057	Argument	\"mex\"
>1058	PrimaryExpression	\"mex\"
>1059	Callee	drwnCodeProfiler 
>1060	Identifier	drwnCodeProfiler 
>1061	Callee	drwnCodeProfiler 
>1062	Identifier	drwnCodeProfiler 
>1063	ExpressionStatement	 
>1064	CallExpression	drwnMatlabUtils 
>1065	ArgumentList	options
>1066	Argument	options
>1067	Identifier	options
>1068	Callee	drwnMatlabUtils 
>1069	Identifier	drwnMatlabUtils 
>1070	IfStatement	if ( nrhs == 4 )
>1071	CompoundStatement	 
>1072	ExpressionStatement	 
>1073	CallExpression	drwnMatlabUtils 
>1074	ArgumentList	prhs [ nrhs - 1 ]
>1075	Argument	options
>1076	Identifier	options
>1077	Argument	prhs [ nrhs - 1 ]
>1078	ArrayIndexing	prhs [ nrhs - 1 ]
>1079	AdditiveExpression	nrhs - 1
>1080	PrimaryExpression	1
>1081	Identifier	nrhs
>1082	Identifier	prhs
>1083	Callee	drwnMatlabUtils 
>1084	Identifier	drwnMatlabUtils 
>1085	Condition	 
>1086	EqualityExpression	nrhs == 4
>1087	PrimaryExpression	4
>1088	Identifier	nrhs
>1089	ExpressionStatement	 
>1090	AssignmentExpr	options [ string ( \"whiten\" ) ] = string ( \"0\" )
>1091	CallExpression	string ( \"0\" )
>1092	ArgumentList	\"0\"
>1093	Argument	\"0\"
>1094	PrimaryExpression	\"0\"
>1095	Callee	string
>1096	Identifier	string
>1097	ArrayIndexing	options [ string ( \"whiten\" ) ]
>1098	CallExpression	string ( \"whiten\" )
>1099	ArgumentList	\"whiten\"
>1100	Argument	\"whiten\"
>1101	PrimaryExpression	\"whiten\"
>1102	Callee	string
>1103	Identifier	string
>1104	Identifier	options
>1105	ExpressionStatement	 
>1106	AssignmentExpr	options [ string ( \"method\" ) ] = string ( \"drwnMultiClassLogistic\" )
>1107	CallExpression	string ( \"drwnMultiClassLogistic\" )
>1108	ArgumentList	\"drwnMultiClassLogistic\"
>1109	Argument	\"drwnMultiClassLogistic\"
>1110	PrimaryExpression	\"drwnMultiClassLogistic\"
>1111	Callee	string
>1112	Identifier	string
>1113	ArrayIndexing	options [ string ( \"method\" ) ]
>1114	CallExpression	string ( \"method\" )
>1115	ArgumentList	\"method\"
>1116	Argument	\"method\"
>1117	PrimaryExpression	\"method\"
>1118	Callee	string
>1119	Identifier	string
>1120	Identifier	options
>1121	ExpressionStatement	 
>1122	CallExpression	drwnMatlabUtils 
>1123	ArgumentList	options
>1124	Argument	options
>1125	Identifier	options
>1126	Callee	drwnMatlabUtils 
>1127	Identifier	drwnMatlabUtils 
>1128	IdentifierDeclStatement	 
>1129	IdentifierDecl	options
>1130	Identifier	options
>1131	IdentifierDeclType	map < string , string >
>1132	ExpressionStatement	 
>1133	CallExpression	DRWN_ASSERT_MSG ( ( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 0 ] ) ) , \"\
>1134	ArgumentList	( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 0 ] ) )
>1135	Argument	\"mismatch between features and weights\"
>1136	PrimaryExpression	\"mismatch between features and weights\"
>1137	Argument	( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 0 ] ) )
>1138	OrExpression	( nrhs < 3 ) || ( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 0 ] ) )
>1139	OrExpression	( mxIsEmpty ( prhs [ 2 ] ) ) || ( mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 0 ] ) )
>1140	EqualityExpression	mxGetM ( prhs [ 2 ] ) == mxGetM ( prhs [ 0 ] )
>1141	CallExpression	mxGetM ( prhs [ 0 ] )
>1142	ArgumentList	prhs [ 0 ]
>1143	Argument	prhs [ 0 ]
>1144	ArrayIndexing	prhs [ 0 ]
>1145	PrimaryExpression	0
>1146	Identifier	prhs
>1147	Callee	mxGetM
>1148	Identifier	mxGetM
>1149	CallExpression	mxGetM ( prhs [ 2 ] )
>1150	ArgumentList	prhs [ 2 ]
>1151	Argument	prhs [ 2 ]
>1152	ArrayIndexing	prhs [ 2 ]
>1153	PrimaryExpression	2
>1154	Identifier	prhs
>1155	Callee	mxGetM
>1156	Identifier	mxGetM
>1157	CallExpression	mxIsEmpty ( prhs [ 2 ] )
>1158	ArgumentList	prhs [ 2 ]
>1159	Argument	prhs [ 2 ]
>1160	ArrayIndexing	prhs [ 2 ]
>1161	PrimaryExpression	2
>1162	Identifier	prhs
>1163	Callee	mxIsEmpty
>1164	Identifier	mxIsEmpty
>1165	RelationalExpression	nrhs < 3
>1166	PrimaryExpression	3
>1167	Identifier	nrhs
>1168	Callee	DRWN_ASSERT_MSG
>1169	Identifier	DRWN_ASSERT_MSG
>1170	ExpressionStatement	 
>1171	CallExpression	DRWN_ASSERT_MSG ( mxGetM ( prhs [ 1 ] ) == mxGetM ( prhs [ 0 ] ) , \"mismatch between features and labels\" )
>1172	ArgumentList	mxGetM ( prhs [ 1 ] ) == mxGetM ( prhs [ 0 ] )
>1173	Argument	\"mismatch between features and labels\"
>1174	PrimaryExpression	\"mismatch between features and labels\"
>1175	Argument	mxGetM ( prhs [ 1 ] ) == mxGetM ( prhs [ 0 ] )
>1176	EqualityExpression	mxGetM ( prhs [ 1 ] ) == mxGetM ( prhs [ 0 ] )
>1177	CallExpression	mxGetM ( prhs [ 0 ] )
>1178	ArgumentList	prhs [ 0 ]
>1179	Argument	prhs [ 0 ]
>1180	ArrayIndexing	prhs [ 0 ]
>1181	PrimaryExpression	0
>1182	Identifier	prhs
>1183	Callee	mxGetM
>1184	Identifier	mxGetM
>1185	CallExpression	mxGetM ( prhs [ 1 ] )
>1186	ArgumentList	prhs [ 1 ]
>1187	Argument	prhs [ 1 ]
>1188	ArrayIndexing	prhs [ 1 ]
>1189	PrimaryExpression	1
>1190	Identifier	prhs
>1191	Callee	mxGetM
>1192	Identifier	mxGetM
>1193	Callee	DRWN_ASSERT_MSG
>1194	Identifier	DRWN_ASSERT_MSG
>1195	IfStatement	if ( ( nrhs < 2 ) || ( nrhs > 4 ) )
>1196	CompoundStatement	 
>1197	ExpressionStatement	 
>1198	CallExpression	mexErrMsgTxt ( \"incorrect number of input arguments\" )
>1199	ArgumentList	\"incorrect number of input arguments\"
>1200	Argument	\"incorrect number of input arguments\"
>1201	PrimaryExpression	\"incorrect number of input arguments\"
>1202	Callee	mexErrMsgTxt
>1203	Identifier	mexErrMsgTxt
>1204	ExpressionStatement	 
>1205	CallExpression	usage ( )
>1206	ArgumentList	 
>1207	Callee	usage
>1208	Identifier	usage
>1209	Condition	 
>1210	OrExpression	( nrhs < 2 ) || ( nrhs > 4 )
>1211	RelationalExpression	nrhs > 4
>1212	PrimaryExpression	4
>1213	Identifier	nrhs
>1214	RelationalExpression	nrhs < 2
>1215	PrimaryExpression	2
>1216	Identifier	nrhs
>1217	IfStatement	if ( nrhs == 0 )
>1218	CompoundStatement	 
>1219	ReturnStatement	 
>1220	ExpressionStatement	 
>1221	CallExpression	usage ( )
>1222	ArgumentList	 
>1223	Callee	usage
>1224	Identifier	usage
>1225	Condition	 
>1226	EqualityExpression	nrhs == 0
>1227	PrimaryExpression	0
>1228	Identifier	nrhs
>1229	ExpressionStatement	 
>1230	CallExpression	drwnMatlabUtils 
>1231	ArgumentList	 
>1232	Callee	drwnMatlabUtils 
>1233	Identifier	drwnMatlabUtils 
<3=6,5,4
<6=75,68,61,54,47,40,33,28,21,14,7
<7=8
<8=12,9
<9=10
<10=11
<12=13
<14=15
<15=19,16
<16=17
<17=18
<19=20
<21=22
<22=26,23
<23=24
<24=25
<26=27
<28=29
<29=31,30
<31=32
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<41=45,42
<42=43
<43=44
<45=46
<47=48
<48=52,49
<49=50
<50=51
<52=53
<54=55
<55=59,56
<56=57
<57=58
<59=60
<61=62
<62=66,63
<63=64
<64=65
<66=67
<68=69
<69=73,70
<70=71
<71=72
<73=74
<75=76
<76=80,77
<77=78
<78=79
<80=81
<86=101,100,87
<87=97,94,91,88
<88=90,89
<91=93,92
<94=96,95
<97=99,98
<101=1229,1217,1195,1170,1132,1128,1121,1105,1089,1070,1063,1051,1047,1034,1016,1009,778,767,684,675,631,590,586,525,496,474,445,427,418,351,347,333,315,297,288,260,251,240,225,164,160,144,122,121,119,107,102
<102=103
<103=105,104
<105=106
<107=108
<108=117,109
<109=110
<110=111
<111=115,112
<112=113
<113=114
<115=116
<117=118
<119=120
<122=140,123
<123=124
<124=125
<125=137,126
<126=135,127
<127=128
<128=129
<129=131,130
<131=132
<132=134,133
<135=136
<137=139,138
<140=141
<141=143,142
<144=145
<145=158,146
<146=151,149,147
<147=148
<149=150
<151=152
<152=156,153
<153=154
<154=155
<156=157
<158=159
<160=161
<161=163,162
<164=204,165
<165=186,177,166
<166=167
<167=173,168
<168=169
<169=170
<170=172,171
<173=174
<174=176,175
<177=178
<178=182,179
<179=180
<180=181
<182=183
<183=185,184
<186=187
<187=203,188
<188=199,189
<189=197,190
<190=191
<191=193,192
<193=194
<194=196,195
<197=198
<199=200
<200=202,201
<204=205
<205=207,206
<207=223,208
<208=209
<209=210
<210=212,211
<212=213
<213=215,214
<215=222,216
<216=220,217
<217=218
<218=219
<220=221
<223=224
<225=226
<226=238,227
<227=234,232,230,228
<228=229
<230=231
<232=233
<234=235
<235=237,236
<238=239
<240=241
<241=247,242
<242=243
<243=244
<244=246,245
<247=248
<248=250,249
<251=252
<252=256,253
<253=254
<254=255
<256=257
<257=259,258
<260=261
<261=287,286,262
<262=285,263
<263=281,264
<264=279,265
<265=266
<266=275,267
<267=268
<268=269
<269=271,270
<271=272
<272=274,273
<275=276
<276=278,277
<279=280
<281=282
<282=284,283
<288=289
<289=293,290
<290=291
<291=292
<293=294
<294=296,295
<297=298
<298=311,299
<299=300
<300=301
<301=307,302
<302=305,303
<303=304
<305=306
<307=308
<308=310,309
<311=312
<312=314,313
<315=316
<316=329,317
<317=318
<318=319
<319=325,320
<320=323,321
<321=322
<323=324
<325=326
<326=328,327
<329=330
<330=332,331
<333=334
<334=346,345,335
<335=344,336
<336=340,337
<337=338
<338=339
<340=341
<341=343,342
<347=348
<348=350,349
<351=411,352
<352=407,394,377,364,353
<353=354
<354=360,355
<355=358,356
<356=357
<358=359
<360=361
<361=363,362
<364=365
<365=373,366
<366=369,367
<367=368
<369=370
<370=372,371
<373=374
<374=376,375
<377=378
<378=393,392,379
<379=386,380
<380=382,381
<382=383
<383=385,384
<386=388,387
<388=389
<389=391,390
<394=395
<395=403,396
<396=399,397
<397=398
<399=400
<400=402,401
<403=404
<404=406,405
<407=408
<408=410,409
<411=412
<412=414,413
<414=416,415
<416=417
<418=419
<419=423,420
<420=421
<421=422
<423=424
<424=426,425
<427=428
<428=441,429
<429=434,430
<430=431
<431=433,432
<434=435
<435=437,436
<437=438
<438=440,439
<441=442
<442=444,443
<445=446
<446=472,447
<447=448
<448=449
<449=471,450
<450=468,451
<451=467,452
<452=461,453
<453=460,454
<454=456,455
<456=457
<457=459,458
<461=463,462
<463=464
<464=466,465
<468=470,469
<472=473
<474=475
<475=494,476
<476=490,477
<477=478
<478=489,479
<479=481,480
<481=488,482
<482=486,483
<483=484
<484=485
<486=487
<490=491
<491=493,492
<494=495
<496=497
<497=524,523,498
<498=522,499
<499=515,500
<500=501
<501=502
<502=504,503
<504=505
<505=507,506
<507=514,508
<508=512,509
<509=510
<510=511
<512=513
<515=516
<516=518,517
<518=520,519
<520=521
<525=565,526
<526=549,538,527
<527=528
<528=534,529
<529=530
<530=531
<531=533,532
<534=535
<535=537,536
<538=539
<539=545,540
<540=541
<541=542
<542=544,543
<545=546
<546=548,547
<549=550
<550=563,551
<551=552
<552=553
<553=562,554
<554=556,555
<556=558,557
<558=559
<559=561,560
<563=564
<565=566
<566=568,567
<568=584,569
<569=570
<570=571
<571=573,572
<573=574
<574=576,575
<576=583,577
<577=581,578
<578=579
<579=580
<581=582
<584=585
<586=587
<587=589,588
<590=623,614,611,591
<591=592
<592=605,593
<593=594
<594=595
<595=603,596
<596=597
<597=598
<598=602,599
<599=601,600
<603=604
<605=606
<606=608,607
<608=610,609
<611=613,612
<614=615
<615=622,616
<616=618,617
<618=619
<619=621,620
<623=624
<624=625
<625=630,629,626
<626=628,627
<631=667,656,653,632
<632=643,633
<633=634
<634=636,635
<636=642,637
<637=639,638
<639=641,640
<643=645,644
<645=646
<646=648,647
<648=650,649
<650=652,651
<653=655,654
<656=657
<657=666,658
<658=660,659
<660=661
<661=663,662
<663=665,664
<667=668
<668=669
<669=674,673,670
<670=672,671
<675=676
<676=683,682,677
<677=679,678
<679=681,680
<684=752,685
<685=734,720,686
<686=712,701,698,687
<687=688
<688=689
<689=693,690
<690=692,691
<693=695,694
<695=697,696
<698=700,699
<701=702
<702=711,703
<703=705,704
<705=706
<706=708,707
<708=710,709
<712=713
<713=714
<714=719,718,715
<715=717,716
<720=721
<721=733,732,722
<722=731,723
<723=729,724
<724=725
<725=726
<726=728,727
<729=730
<734=735
<735=746,736
<736=737
<737=738
<738=740,739
<740=741
<741=743,742
<743=745,744
<746=747
<747=749,748
<749=751,750
<752=753
<753=764,754
<754=763,755
<755=761,756
<756=757
<757=758
<758=760,759
<761=762
<764=766,765
<767=768
<768=776,769
<769=772,770
<770=771
<772=773
<773=775,774
<776=777
<778=1000,779
<779=998,932,931,929,861,860,858,790,789,787,780
<780=781
<781=785,782
<782=783
<783=784
<785=786
<787=788
<790=842,791
<791=834,823,820,792
<792=808,793
<793=794
<794=807,795
<795=805,796
<796=803,797
<797=798
<798=802,799
<799=801,800
<803=804
<805=806
<808=809
<809=815,810
<810=814,811
<811=813,812
<815=817,816
<817=819,818
<820=822,821
<823=824
<824=833,825
<825=827,826
<827=828
<828=830,829
<830=832,831
<834=835
<835=836
<836=841,840,837
<837=839,838
<842=843
<843=857,856,844
<844=855,845
<845=854,846
<846=852,847
<847=848
<848=849
<849=851,850
<852=853
<858=859
<861=913,862
<862=905,894,891,863
<863=879,864
<864=865
<865=878,866
<866=876,867
<867=874,868
<868=869
<869=873,870
<870=872,871
<874=875
<876=877
<879=880
<880=886,881
<881=885,882
<882=884,883
<886=888,887
<888=890,889
<891=893,892
<894=895
<895=904,896
<896=898,897
<898=899
<899=901,900
<901=903,902
<905=906
<906=907
<907=912,911,908
<908=910,909
<913=914
<914=928,927,915
<915=926,916
<916=925,917
<917=923,918
<918=919
<919=920
<920=922,921
<923=924
<929=930
<932=984,933
<933=976,965,962,934
<934=950,935
<935=936
<936=949,937
<937=947,938
<938=945,939
<939=940
<940=944,941
<941=943,942
<945=946
<947=948
<950=951
<951=957,952
<952=956,953
<953=955,954
<957=959,958
<959=961,960
<962=964,963
<965=966
<966=975,967
<967=969,968
<969=970
<970=972,971
<972=974,973
<976=977
<977=978
<978=983,982,979
<979=981,980
<984=985
<985=997,996,986
<986=995,987
<987=993,988
<988=989
<989=990
<990=992,991
<993=994
<998=999
<1000=1001
<1001=1007,1002
<1002=1003
<1003=1004
<1004=1006,1005
<1007=1008
<1009=1010
<1010=1015,1014,1011
<1011=1013,1012
<1016=1017
<1017=1028,1018
<1018=1019
<1019=1020
<1020=1022,1021
<1022=1023
<1023=1025,1024
<1025=1027,1026
<1028=1029
<1029=1031,1030
<1031=1033,1032
<1034=1035
<1035=1045,1036
<1036=1041,1037
<1037=1038
<1038=1040,1039
<1041=1042
<1042=1044,1043
<1045=1046
<1047=1048
<1048=1050,1049
<1051=1052
<1052=1061,1053
<1053=1054
<1054=1055
<1055=1059,1056
<1056=1057
<1057=1058
<1059=1060
<1061=1062
<1063=1064
<1064=1068,1065
<1065=1066
<1066=1067
<1068=1069
<1070=1085,1071
<1071=1072
<1072=1073
<1073=1083,1074
<1074=1077,1075
<1075=1076
<1077=1078
<1078=1082,1079
<1079=1081,1080
<1083=1084
<1085=1086
<1086=1088,1087
<1089=1090
<1090=1097,1091
<1091=1095,1092
<1092=1093
<1093=1094
<1095=1096
<1097=1104,1098
<1098=1102,1099
<1099=1100
<1100=1101
<1102=1103
<1105=1106
<1106=1113,1107
<1107=1111,1108
<1108=1109
<1109=1110
<1111=1112
<1113=1120,1114
<1114=1118,1115
<1115=1116
<1116=1117
<1118=1119
<1121=1122
<1122=1126,1123
<1123=1124
<1124=1125
<1126=1127
<1128=1129
<1129=1131,1130
<1132=1133
<1133=1168,1134
<1134=1137,1135
<1135=1136
<1137=1138
<1138=1165,1139
<1139=1157,1140
<1140=1149,1141
<1141=1147,1142
<1142=1143
<1143=1144
<1144=1146,1145
<1147=1148
<1149=1155,1150
<1150=1151
<1151=1152
<1152=1154,1153
<1155=1156
<1157=1163,1158
<1158=1159
<1159=1160
<1160=1162,1161
<1163=1164
<1165=1167,1166
<1168=1169
<1170=1171
<1171=1193,1172
<1172=1175,1173
<1173=1174
<1175=1176
<1176=1185,1177
<1177=1183,1178
<1178=1179
<1179=1180
<1180=1182,1181
<1183=1184
<1185=1191,1186
<1186=1187
<1187=1188
<1188=1190,1189
<1191=1192
<1193=1194
<1195=1209,1196
<1196=1204,1197
<1197=1198
<1198=1202,1199
<1199=1200
<1200=1201
<1202=1203
<1204=1205
<1205=1207,1206
<1207=1208
<1209=1210
<1210=1214,1211
<1211=1213,1212
<1214=1216,1215
<1217=1225,1218
<1218=1220,1219
<1220=1221
<1221=1223,1222
<1223=1224
<1225=1226
<1226=1228,1227
<1229=1230
<1230=1232,1231
<1232=1233
