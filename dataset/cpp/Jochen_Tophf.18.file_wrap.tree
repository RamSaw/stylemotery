>5	FunctionDef	FileWrap 
>6	ParameterList	v8 
>7	Parameter	 
>8	Identifier	target
>9	ParameterType	v8 
>10	ReturnType	void
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	CallExpression	target -> Set ( symbol_File , constructor -> GetFunction ( ) )
>14	ArgumentList	symbol_File
>15	Argument	constructor -> GetFunction ( )
>16	CallExpression	constructor -> GetFunction ( )
>17	ArgumentList	 
>18	Callee	constructor -> GetFunction
>19	PtrMemberAccess	constructor -> GetFunction
>20	Identifier	GetFunction
>21	Identifier	constructor
>22	Argument	symbol_File
>23	Identifier	symbol_File
>24	Callee	target -> Set
>25	PtrMemberAccess	target -> Set
>26	Identifier	Set
>27	Identifier	target
>28	ExpressionStatement	 
>29	CallExpression	constructor -> SetClassName ( symbol_File )
>30	ArgumentList	symbol_File
>31	Argument	symbol_File
>32	Identifier	symbol_File
>33	Callee	constructor -> SetClassName
>34	PtrMemberAccess	constructor -> SetClassName
>35	Identifier	SetClassName
>36	Identifier	constructor
>37	ExpressionStatement	 
>38	CallExpression	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount ( 1 )
>39	ArgumentList	1
>40	Argument	1
>41	PrimaryExpression	1
>42	Callee	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount
>43	PtrMemberAccess	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount
>44	Identifier	SetInternalFieldCount
>45	CallExpression	constructor -> InstanceTemplate ( )
>46	ArgumentList	 
>47	Callee	constructor -> InstanceTemplate
>48	PtrMemberAccess	constructor -> InstanceTemplate
>49	Identifier	InstanceTemplate
>50	Identifier	constructor
>51	ExpressionStatement	 
>52	CallExpression	New ( v8 
>53	ArgumentList	v8 
>54	Argument	v8 
>55	CallExpression	v8 
>56	ArgumentList	FileWrap 
>57	Argument	FileWrap 
>58	Identifier	FileWrap 
>59	Callee	v8 
>60	Identifier	v8 
>61	Callee	New
>62	Identifier	New
>63	Statement	 
>64	Statement	 
>65	Statement	 
>66	Statement	 
>67	Statement	 
>68	Statement	 
>69	Statement	 
>70	Statement	 
>71	Statement	 
>72	Statement	 
>73	Statement	 
>74	IdentifierDeclStatement	 
>75	IdentifierDecl	scope
>76	Identifier	scope
>77	IdentifierDeclType	v8 
>90	FunctionDef	FileWrap 
>91	ParameterList	const v8 
>92	Parameter	 
>93	Identifier	args
>94	ParameterType	const v8 
>95	ReturnType	v8 
>96	CompoundStatement	 
>97	ReturnStatement	 
>98	CallExpression	scope . Close ( v8 
>99	ArgumentList	v8 
>100	Argument	v8 
>101	CallExpression	v8 
>102	ArgumentList	 
>103	Callee	v8 
>104	Identifier	v8 
>105	Callee	scope . Close
>106	MemberAccess	scope . Close
>107	Identifier	Close
>108	Identifier	scope
>109	BlockStarter	 
>110	CompoundStatement	 
>111	ReturnStatement	return ThrowException ( v8 
>112	CallExpression	ThrowException ( v8 
>113	ArgumentList	v8 
>114	Argument	v8 
>115	CallExpression	v8 
>116	ArgumentList	v8 
>117	Argument	v8 
>118	CallExpression	v8 
>119	ArgumentList	e . what ( )
>120	Argument	e . what ( )
>121	CallExpression	e . what ( )
>122	ArgumentList	 
>123	Callee	e . what
>124	MemberAccess	e . what
>125	Identifier	what
>126	Identifier	e
>127	Callee	v8 
>128	Identifier	v8 
>129	Callee	v8 
>130	Identifier	v8 
>131	Callee	ThrowException
>132	Identifier	ThrowException
>133	Identifier	e
>134	BlockStarter	 
>135	CompoundStatement	 
>136	ReturnStatement	return args . This ( ) ;
>137	CallExpression	args . This ( )
>138	ArgumentList	 
>139	Callee	args . This
>140	MemberAccess	args . This
>141	Identifier	This
>142	Identifier	args
>143	ExpressionStatement	file_wrap -> Wrap ( args . This ( ) )
>144	CallExpression	file_wrap -> Wrap ( args . This ( ) )
>145	ArgumentList	args . This ( )
>146	Argument	args . This ( )
>147	CallExpression	args . This ( )
>148	ArgumentList	 
>149	Callee	args . This
>150	MemberAccess	args . This
>151	Identifier	This
>152	Identifier	args
>153	Callee	file_wrap -> Wrap
>154	PtrMemberAccess	file_wrap -> Wrap
>155	Identifier	Wrap
>156	Identifier	file_wrap
>157	IdentifierDeclStatement	FileWrap * file_wrap = new FileWrap ( std 
>158	IdentifierDecl	* file_wrap = new FileWrap ( std 
>159	AssignmentExpr	* file_wrap = new FileWrap ( std 
>160	CallExpression	std 
>161	ArgumentList	file
>162	Argument	file
>163	Identifier	file
>164	Callee	std 
>165	Identifier	std 
>166	Identifier	file_wrap
>167	Identifier	file_wrap
>168	IdentifierDeclType	FileWrap *
>169	ExpressionStatement	file . check ( )
>170	CallExpression	file . check ( )
>171	ArgumentList	 
>172	Callee	file . check
>173	MemberAccess	file . check
>174	Identifier	check
>175	Identifier	file
>176	IfStatement	if ( args [ 0 ] -> IsString ( ) )
>177	ElseStatement	else
>178	IfStatement	if ( args [ 0 ] -> IsObject ( ) && node 
>179	ElseStatement	else
>180	CompoundStatement	 
>181	ReturnStatement	return ThrowException ( v8 
>182	CallExpression	ThrowException ( v8 
>183	ArgumentList	v8 
>184	Argument	v8 
>185	CallExpression	v8 
>186	ArgumentList	v8 
>187	Argument	v8 
>188	CallExpression	v8 
>189	ArgumentList	\"first argument to File constructor must be a string (filename) or node.Buffer\"
>190	Argument	\"first argument to File constructor must be a string (filename) or node.Buffer\"
>191	PrimaryExpression	\"first argument to File constructor must be a string (filename) or node.Buffer\"
>192	Callee	v8 
>193	Identifier	v8 
>194	Callee	v8 
>195	Identifier	v8 
>196	Callee	ThrowException
>197	Identifier	ThrowException
>198	CompoundStatement	 
>199	ExpressionStatement	file = osmium 
>200	AssignmentExpr	file = osmium 
>201	CallExpression	osmium 
>202	ArgumentList	node 
>203	Argument	format
>204	Identifier	format
>205	Argument	node 
>206	CallExpression	node 
>207	ArgumentList	source
>208	Argument	source
>209	Identifier	source
>210	Callee	node 
>211	Identifier	node 
>212	Argument	node 
>213	CallExpression	node 
>214	ArgumentList	source
>215	Argument	source
>216	Identifier	source
>217	Callee	node 
>218	Identifier	node 
>219	Callee	osmium 
>220	Identifier	osmium 
>221	Identifier	file
>222	ExpressionStatement	source = args [ 0 ] -> ToObject ( )
>223	AssignmentExpr	source = args [ 0 ] -> ToObject ( )
>224	CallExpression	args [ 0 ] -> ToObject ( )
>225	ArgumentList	 
>226	Callee	args [ 0 ] -> ToObject
>227	PtrMemberAccess	args [ 0 ] -> ToObject
>228	Identifier	ToObject
>229	ArrayIndexing	args [ 0 ]
>230	PrimaryExpression	0
>231	Identifier	args
>232	Identifier	source
>233	Statement	auto
>234	Condition	args [ 0 ] -> IsObject ( ) && node 
>235	AndExpression	args [ 0 ] -> IsObject ( ) && node 
>236	CallExpression	node 
>237	ArgumentList	args [ 0 ] -> ToObject ( )
>238	Argument	args [ 0 ] -> ToObject ( )
>239	CallExpression	args [ 0 ] -> ToObject ( )
>240	ArgumentList	 
>241	Callee	args [ 0 ] -> ToObject
>242	PtrMemberAccess	args [ 0 ] -> ToObject
>243	Identifier	ToObject
>244	ArrayIndexing	args [ 0 ]
>245	PrimaryExpression	0
>246	Identifier	args
>247	Callee	node 
>248	Identifier	node 
>249	CallExpression	args [ 0 ] -> IsObject ( )
>250	ArgumentList	 
>251	Callee	args [ 0 ] -> IsObject
>252	PtrMemberAccess	args [ 0 ] -> IsObject
>253	Identifier	IsObject
>254	ArrayIndexing	args [ 0 ]
>255	PrimaryExpression	0
>256	Identifier	args
>257	CompoundStatement	 
>258	ExpressionStatement	file = osmium 
>259	AssignmentExpr	file = osmium 
>260	CallExpression	osmium 
>261	ArgumentList	* filename
>262	Argument	format
>263	Identifier	format
>264	Argument	* filename
>265	UnaryOp	* filename
>266	Identifier	filename
>267	UnaryOperator	*
>268	Callee	osmium 
>269	Identifier	osmium 
>270	Identifier	file
>271	ExpressionStatement	 
>272	CompoundStatement	 
>273	Statement	]
>274	Statement	0
>275	Statement	[
>276	Statement	args
>277	Statement	filename
>278	Statement	Utf8Value
>279	Statement	 
>280	Statement	String
>281	Statement	 
>282	Statement	v8
>283	Condition	args [ 0 ] -> IsString ( )
>284	CallExpression	args [ 0 ] -> IsString ( )
>285	ArgumentList	 
>286	Callee	args [ 0 ] -> IsString
>287	PtrMemberAccess	args [ 0 ] -> IsString
>288	Identifier	IsString
>289	ArrayIndexing	args [ 0 ]
>290	PrimaryExpression	0
>291	Identifier	args
>292	IdentifierDeclStatement	osmium 
>293	IdentifierDecl	file
>294	Identifier	file
>295	IdentifierDeclType	osmium 
>296	IfStatement	if ( args . Length ( ) == 2 )
>297	CompoundStatement	 
>298	ExpressionStatement	 
>299	AssignmentExpr	format = * format_string
>300	UnaryOp	* format_string
>301	Identifier	format_string
>302	UnaryOperator	*
>303	Identifier	format
>304	ExpressionStatement	 
>305	CompoundStatement	 
>306	Statement	 
>307	Statement	 
>308	Statement	 
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	IfStatement	if ( ! args [ 1 ] -> IsString ( ) )
>317	CompoundStatement	 
>318	ReturnStatement	 
>319	CallExpression	ThrowException ( v8 
>320	ArgumentList	v8 
>321	Argument	v8 
>322	CallExpression	v8 
>323	ArgumentList	v8 
>324	Argument	v8 
>325	CallExpression	v8 
>326	ArgumentList	\"second argument to File constructor (format) must be a string\"
>327	Argument	\"second argument to File constructor (format) must be a string\"
>328	PrimaryExpression	\"second argument to File constructor (format) must be a string\"
>329	Callee	v8 
>330	Identifier	v8 
>331	Callee	v8 
>332	Identifier	v8 
>333	Callee	ThrowException
>334	Identifier	ThrowException
>335	Condition	 
>336	UnaryOp	! args [ 1 ] -> IsString ( )
>337	CallExpression	args [ 1 ] -> IsString ( )
>338	ArgumentList	 
>339	Callee	args [ 1 ] -> IsString
>340	PtrMemberAccess	args [ 1 ] -> IsString
>341	Identifier	IsString
>342	ArrayIndexing	args [ 1 ]
>343	PrimaryExpression	1
>344	Identifier	args
>345	UnaryOperator	!
>346	Condition	 
>347	EqualityExpression	args . Length ( ) == 2
>348	PrimaryExpression	2
>349	CallExpression	args . Length ( )
>350	ArgumentList	 
>351	Callee	args . Length
>352	MemberAccess	args . Length
>353	Identifier	Length
>354	Identifier	args
>355	IdentifierDeclStatement	 
>356	IdentifierDecl	format
>357	Identifier	format
>358	IdentifierDeclType	std 
>359	IfStatement	if ( args . Length ( ) == 0 || args . Length ( ) > 2 )
>360	CompoundStatement	 
>361	ReturnStatement	 
>362	CallExpression	ThrowException ( v8 
>363	ArgumentList	v8 
>364	Argument	v8 
>365	CallExpression	v8 
>366	ArgumentList	v8 
>367	Argument	v8 
>368	CallExpression	v8 
>369	ArgumentList	\"File is constructed with one or two arguments
>370	Argument	\"File is constructed with one or two arguments
>371	PrimaryExpression	\"File is constructed with one or two arguments
>372	Callee	v8 
>373	Identifier	v8 
>374	Callee	v8 
>375	Identifier	v8 
>376	Callee	ThrowException
>377	Identifier	ThrowException
>378	Condition	 
>379	OrExpression	args . Length ( ) == 0 || args . Length ( ) > 2
>380	RelationalExpression	args . Length ( ) > 2
>381	PrimaryExpression	2
>382	CallExpression	args . Length ( )
>383	ArgumentList	 
>384	Callee	args . Length
>385	MemberAccess	args . Length
>386	Identifier	Length
>387	Identifier	args
>388	EqualityExpression	args . Length ( ) == 0
>389	PrimaryExpression	0
>390	CallExpression	args . Length ( )
>391	ArgumentList	 
>392	Callee	args . Length
>393	MemberAccess	args . Length
>394	Identifier	Length
>395	Identifier	args
>396	IfStatement	if ( ! args . IsConstructCall ( ) )
>397	CompoundStatement	 
>398	ReturnStatement	 
>399	CallExpression	ThrowException ( v8 
>400	ArgumentList	v8 
>401	Argument	v8 
>402	CallExpression	v8 
>403	ArgumentList	v8 
>404	Argument	v8 
>405	CallExpression	v8 
>406	ArgumentList	\"Cannot call constructor as function, you need to use 'new' keyword\"
>407	Argument	\"Cannot call constructor as function, you need to use 'new' keyword\"
>408	PrimaryExpression	\"Cannot call constructor as function, you need to use 'new' keyword\"
>409	Callee	v8 
>410	Identifier	v8 
>411	Callee	v8 
>412	Identifier	v8 
>413	Callee	ThrowException
>414	Identifier	ThrowException
>415	Condition	 
>416	UnaryOp	! args . IsConstructCall ( )
>417	CallExpression	args . IsConstructCall ( )
>418	ArgumentList	 
>419	Callee	args . IsConstructCall
>420	MemberAccess	args . IsConstructCall
>421	Identifier	IsConstructCall
>422	Identifier	args
>423	UnaryOperator	!
>424	IdentifierDeclStatement	 
>425	IdentifierDecl	scope
>426	Identifier	scope
>427	IdentifierDeclType	v8 
<5=11,10,6
<6=7
<7=9,8
<11=74,73,72,71,70,69,68,67,66,65,64,63,51,37,28,12
<12=13
<13=24,14
<14=22,15
<15=16
<16=18,17
<18=19
<19=21,20
<22=23
<24=25
<25=27,26
<28=29
<29=33,30
<30=31
<31=32
<33=34
<34=36,35
<37=38
<38=42,39
<39=40
<40=41
<42=43
<43=45,44
<45=47,46
<47=48
<48=50,49
<51=52
<52=61,53
<53=54
<54=55
<55=59,56
<56=57
<57=58
<59=60
<61=62
<74=75
<75=77,76
<90=96,95,91
<91=92
<92=94,93
<96=424,396,359,355,296,134,109,97
<97=98
<98=105,99
<99=100
<100=101
<101=103,102
<103=104
<105=106
<106=108,107
<109=133,110
<110=111
<111=112
<112=131,113
<113=114
<114=115
<115=129,116
<116=117
<117=118
<118=127,119
<119=120
<120=121
<121=123,122
<123=124
<124=126,125
<127=128
<129=130
<131=132
<134=135
<135=292,176,169,157,143,136
<136=137
<137=139,138
<139=140
<140=142,141
<143=144
<144=153,145
<145=146
<146=147
<147=149,148
<149=150
<150=152,151
<153=154
<154=156,155
<157=158
<158=168,167,159
<159=166,160
<160=164,161
<161=162
<162=163
<164=165
<169=170
<170=172,171
<172=173
<173=175,174
<176=283,257,177
<177=178
<178=234,198,179
<179=180
<180=181
<181=182
<182=196,183
<183=184
<184=185
<185=194,186
<186=187
<187=188
<188=192,189
<189=190
<190=191
<192=193
<194=195
<196=197
<198=233,222,199
<199=200
<200=221,201
<201=219,202
<202=212,205,203
<203=204
<205=206
<206=210,207
<207=208
<208=209
<210=211
<212=213
<213=217,214
<214=215
<215=216
<217=218
<219=220
<222=223
<223=232,224
<224=226,225
<226=227
<227=229,228
<229=231,230
<234=235
<235=249,236
<236=247,237
<237=238
<238=239
<239=241,240
<241=242
<242=244,243
<244=246,245
<247=248
<249=251,250
<251=252
<252=254,253
<254=256,255
<257=282,281,280,279,278,277,272,271,258
<258=259
<259=270,260
<260=268,261
<261=264,262
<262=263
<264=265
<265=267,266
<268=269
<272=276,275,274,273
<283=284
<284=286,285
<286=287
<287=289,288
<289=291,290
<292=293
<293=295,294
<296=346,297
<297=316,315,314,313,312,311,310,305,304,298
<298=299
<299=303,300
<300=302,301
<305=309,308,307,306
<316=335,317
<317=318
<318=319
<319=333,320
<320=321
<321=322
<322=331,323
<323=324
<324=325
<325=329,326
<326=327
<327=328
<329=330
<331=332
<333=334
<335=336
<336=345,337
<337=339,338
<339=340
<340=342,341
<342=344,343
<346=347
<347=349,348
<349=351,350
<351=352
<352=354,353
<355=356
<356=358,357
<359=378,360
<360=361
<361=362
<362=376,363
<363=364
<364=365
<365=374,366
<366=367
<367=368
<368=372,369
<369=370
<370=371
<372=373
<374=375
<376=377
<378=379
<379=388,380
<380=382,381
<382=384,383
<384=385
<385=387,386
<388=390,389
<390=392,391
<392=393
<393=395,394
<396=415,397
<397=398
<398=399
<399=413,400
<400=401
<401=402
<402=411,403
<403=404
<404=405
<405=409,406
<406=407
<407=408
<409=410
<411=412
<413=414
<415=416
<416=423,417
<417=419,418
<419=420
<420=422,421
<424=425
<425=427,426
