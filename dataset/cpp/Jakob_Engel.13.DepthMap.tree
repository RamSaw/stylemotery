>3	FunctionDef	DepthMap 
>4	ParameterList	int w , int h , const Eigen 
>5	Parameter	 
>6	Identifier	K
>7	ParameterType	const Eigen 
>8	Parameter	 
>9	Identifier	h
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	w
>13	ParameterType	int
>14	CompoundStatement	 
>15	ExpressionStatement	 
>16	AssignmentExpr	nAvgObserve = nAvgRegularize = nAvgPropagate = nAvgFillHoles = nAvgSetDepth = 0
>17	AssignmentExpr	nAvgRegularize = nAvgPropagate = nAvgFillHoles = nAvgSetDepth = 0
>18	AssignmentExpr	nAvgPropagate = nAvgFillHoles = nAvgSetDepth = 0
>19	AssignmentExpr	nAvgFillHoles = nAvgSetDepth = 0
>20	AssignmentExpr	nAvgSetDepth = 0
>21	PrimaryExpression	0
>22	Identifier	nAvgSetDepth
>23	Identifier	nAvgFillHoles
>24	Identifier	nAvgPropagate
>25	Identifier	nAvgRegularize
>26	Identifier	nAvgObserve
>27	ExpressionStatement	 
>28	AssignmentExpr	nAvgUpdate = nAvgCreate = nAvgFinalize = 0
>29	AssignmentExpr	nAvgCreate = nAvgFinalize = 0
>30	AssignmentExpr	nAvgFinalize = 0
>31	PrimaryExpression	0
>32	Identifier	nAvgFinalize
>33	Identifier	nAvgCreate
>34	Identifier	nAvgUpdate
>35	ExpressionStatement	 
>36	AssignmentExpr	nObserve = nRegularize = nPropagate = nFillHoles = nSetDepth = 0
>37	AssignmentExpr	nRegularize = nPropagate = nFillHoles = nSetDepth = 0
>38	AssignmentExpr	nPropagate = nFillHoles = nSetDepth = 0
>39	AssignmentExpr	nFillHoles = nSetDepth = 0
>40	AssignmentExpr	nSetDepth = 0
>41	PrimaryExpression	0
>42	Identifier	nSetDepth
>43	Identifier	nFillHoles
>44	Identifier	nPropagate
>45	Identifier	nRegularize
>46	Identifier	nObserve
>47	ExpressionStatement	 
>48	AssignmentExpr	nUpdate = nCreate = nFinalize = 0
>49	AssignmentExpr	nCreate = nFinalize = 0
>50	AssignmentExpr	nFinalize = 0
>51	PrimaryExpression	0
>52	Identifier	nFinalize
>53	Identifier	nCreate
>54	Identifier	nUpdate
>55	ExpressionStatement	 
>56	CallExpression	gettimeofday ( & lastHzUpdate , NULL )
>57	ArgumentList	& lastHzUpdate
>58	Argument	NULL
>59	Identifier	NULL
>60	Argument	& lastHzUpdate
>61	UnaryOp	& lastHzUpdate
>62	Identifier	lastHzUpdate
>63	UnaryOperator	&
>64	Callee	gettimeofday
>65	Identifier	gettimeofday
>66	ExpressionStatement	 
>67	AssignmentExpr	msObserve = msRegularize = msPropagate = msFillHoles = msSetDepth = 0
>68	AssignmentExpr	msRegularize = msPropagate = msFillHoles = msSetDepth = 0
>69	AssignmentExpr	msPropagate = msFillHoles = msSetDepth = 0
>70	AssignmentExpr	msFillHoles = msSetDepth = 0
>71	AssignmentExpr	msSetDepth = 0
>72	PrimaryExpression	0
>73	Identifier	msSetDepth
>74	Identifier	msFillHoles
>75	Identifier	msPropagate
>76	Identifier	msRegularize
>77	Identifier	msObserve
>78	ExpressionStatement	 
>79	AssignmentExpr	msUpdate = msCreate = msFinalize = 0
>80	AssignmentExpr	msCreate = msFinalize = 0
>81	AssignmentExpr	msFinalize = 0
>82	PrimaryExpression	0
>83	Identifier	msFinalize
>84	Identifier	msCreate
>85	Identifier	msUpdate
>86	ExpressionStatement	 
>87	CallExpression	reset ( )
>88	ArgumentList	 
>89	Callee	reset
>90	Identifier	reset
>91	ExpressionStatement	 
>92	AssignmentExpr	cyi = KInv ( 1 , 2 )
>93	CallExpression	KInv ( 1 , 2 )
>94	ArgumentList	1
>95	Argument	2
>96	PrimaryExpression	2
>97	Argument	1
>98	PrimaryExpression	1
>99	Callee	KInv
>100	Identifier	KInv
>101	Identifier	cyi
>102	ExpressionStatement	 
>103	AssignmentExpr	cxi = KInv ( 0 , 2 )
>104	CallExpression	KInv ( 0 , 2 )
>105	ArgumentList	0
>106	Argument	2
>107	PrimaryExpression	2
>108	Argument	0
>109	PrimaryExpression	0
>110	Callee	KInv
>111	Identifier	KInv
>112	Identifier	cxi
>113	ExpressionStatement	 
>114	AssignmentExpr	fyi = KInv ( 1 , 1 )
>115	CallExpression	KInv ( 1 , 1 )
>116	ArgumentList	1
>117	Argument	1
>118	PrimaryExpression	1
>119	Argument	1
>120	PrimaryExpression	1
>121	Callee	KInv
>122	Identifier	KInv
>123	Identifier	fyi
>124	ExpressionStatement	 
>125	AssignmentExpr	fxi = KInv ( 0 , 0 )
>126	CallExpression	KInv ( 0 , 0 )
>127	ArgumentList	0
>128	Argument	0
>129	PrimaryExpression	0
>130	Argument	0
>131	PrimaryExpression	0
>132	Callee	KInv
>133	Identifier	KInv
>134	Identifier	fxi
>135	ExpressionStatement	 
>136	AssignmentExpr	KInv = K . inverse ( )
>137	CallExpression	K . inverse ( )
>138	ArgumentList	 
>139	Callee	K . inverse
>140	MemberAccess	K . inverse
>141	Identifier	inverse
>142	Identifier	K
>143	Identifier	KInv
>144	ExpressionStatement	 
>145	AssignmentExpr	cy = K ( 1 , 2 )
>146	CallExpression	K ( 1 , 2 )
>147	ArgumentList	1
>148	Argument	2
>149	PrimaryExpression	2
>150	Argument	1
>151	PrimaryExpression	1
>152	Callee	K
>153	Identifier	K
>154	Identifier	cy
>155	ExpressionStatement	 
>156	AssignmentExpr	cx = K ( 0 , 2 )
>157	CallExpression	K ( 0 , 2 )
>158	ArgumentList	0
>159	Argument	2
>160	PrimaryExpression	2
>161	Argument	0
>162	PrimaryExpression	0
>163	Callee	K
>164	Identifier	K
>165	Identifier	cx
>166	ExpressionStatement	 
>167	AssignmentExpr	fy = K ( 1 , 1 )
>168	CallExpression	K ( 1 , 1 )
>169	ArgumentList	1
>170	Argument	1
>171	PrimaryExpression	1
>172	Argument	1
>173	PrimaryExpression	1
>174	Callee	K
>175	Identifier	K
>176	Identifier	fy
>177	ExpressionStatement	 
>178	AssignmentExpr	fx = K ( 0 , 0 )
>179	CallExpression	K ( 0 , 0 )
>180	ArgumentList	0
>181	Argument	0
>182	PrimaryExpression	0
>183	Argument	0
>184	PrimaryExpression	0
>185	Callee	K
>186	Identifier	K
>187	Identifier	fx
>188	ExpressionStatement	 
>189	AssignmentExpr	this -> K = K
>190	Identifier	K
>191	PtrMemberAccess	this -> K
>192	Identifier	K
>193	Identifier	this
>194	ExpressionStatement	 
>195	AssignmentExpr	debugImageDepth = cv 
>196	CallExpression	cv 
>197	ArgumentList	h
>198	Argument	CV_8UC3
>199	Identifier	CV_8UC3
>200	Argument	w
>201	Identifier	w
>202	Argument	h
>203	Identifier	h
>204	Callee	cv 
>205	Identifier	cv 
>206	Identifier	debugImageDepth
>207	ExpressionStatement	 
>208	AssignmentExpr	debugImageStereoLines = cv 
>209	CallExpression	cv 
>210	ArgumentList	h
>211	Argument	CV_8UC3
>212	Identifier	CV_8UC3
>213	Argument	w
>214	Identifier	w
>215	Argument	h
>216	Identifier	h
>217	Callee	cv 
>218	Identifier	cv 
>219	Identifier	debugImageStereoLines
>220	ExpressionStatement	 
>221	AssignmentExpr	debugImageHypothesisPropagation = cv 
>222	CallExpression	cv 
>223	ArgumentList	h
>224	Argument	CV_8UC3
>225	Identifier	CV_8UC3
>226	Argument	w
>227	Identifier	w
>228	Argument	h
>229	Identifier	h
>230	Callee	cv 
>231	Identifier	cv 
>232	Identifier	debugImageHypothesisPropagation
>233	ExpressionStatement	 
>234	AssignmentExpr	debugImageHypothesisHandling = cv 
>235	CallExpression	cv 
>236	ArgumentList	h
>237	Argument	CV_8UC3
>238	Identifier	CV_8UC3
>239	Argument	w
>240	Identifier	w
>241	Argument	h
>242	Identifier	h
>243	Callee	cv 
>244	Identifier	cv 
>245	Identifier	debugImageHypothesisHandling
>246	ExpressionStatement	 
>247	AssignmentExpr	validityIntegralBuffer = ( int * ) Eigen 
>248	CastExpression	( int * ) Eigen 
>249	CallExpression	Eigen 
>250	ArgumentList	width * height * sizeof ( int )
>251	Argument	width * height * sizeof ( int )
>252	MultiplicativeExpression	width * height * sizeof ( int )
>253	MultiplicativeExpression	height * sizeof ( int )
>254	SizeofExpr	sizeof ( int )
>255	SizeofOperand	int
>256	Sizeof	sizeof
>257	Identifier	height
>258	Identifier	width
>259	Callee	Eigen 
>260	Identifier	Eigen 
>261	CastTarget	int *
>262	Identifier	validityIntegralBuffer
>263	ExpressionStatement	 
>264	AssignmentExpr	currentDepthMap = new DepthMapPixelHypothesis [ width * height ]
>265	MultiplicativeExpression	width * height
>266	Identifier	height
>267	Identifier	width
>268	Identifier	currentDepthMap
>269	ExpressionStatement	 
>270	AssignmentExpr	otherDepthMap = new DepthMapPixelHypothesis [ width * height ]
>271	MultiplicativeExpression	width * height
>272	Identifier	height
>273	Identifier	width
>274	Identifier	otherDepthMap
>275	ExpressionStatement	 
>276	AssignmentExpr	activeKeyFrameIsReactivated = false
>277	Identifier	false
>278	Identifier	activeKeyFrameIsReactivated
>279	ExpressionStatement	 
>280	AssignmentExpr	activeKeyFrame = 0
>281	PrimaryExpression	0
>282	Identifier	activeKeyFrame
>283	ExpressionStatement	 
>284	AssignmentExpr	height = h
>285	Identifier	h
>286	Identifier	height
>287	ExpressionStatement	 
>288	AssignmentExpr	width = w
>289	Identifier	w
>290	Identifier	width
>351	FunctionDef	DepthMap 
>352	ParameterList	 
>353	CompoundStatement	 
>354	ExpressionStatement	 
>355	CallExpression	Eigen 
>356	ArgumentList	( void * ) validityIntegralBuffer
>357	Argument	( void * ) validityIntegralBuffer
>358	CastExpression	( void * ) validityIntegralBuffer
>359	Identifier	validityIntegralBuffer
>360	CastTarget	void *
>361	Callee	Eigen 
>362	Identifier	Eigen 
>363	ExpressionStatement	 
>364	Identifier	currentDepthMap
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	ExpressionStatement	 
>369	Identifier	otherDepthMap
>370	Statement	 
>371	Statement	 
>372	Statement	 
>373	ExpressionStatement	 
>374	CallExpression	debugImageDepth . release ( )
>375	ArgumentList	 
>376	Callee	debugImageDepth . release
>377	MemberAccess	debugImageDepth . release
>378	Identifier	release
>379	Identifier	debugImageDepth
>380	ExpressionStatement	 
>381	CallExpression	debugImageStereoLines . release ( )
>382	ArgumentList	 
>383	Callee	debugImageStereoLines . release
>384	MemberAccess	debugImageStereoLines . release
>385	Identifier	release
>386	Identifier	debugImageStereoLines
>387	ExpressionStatement	 
>388	CallExpression	debugImageHypothesisPropagation . release ( )
>389	ArgumentList	 
>390	Callee	debugImageHypothesisPropagation . release
>391	MemberAccess	debugImageHypothesisPropagation . release
>392	Identifier	release
>393	Identifier	debugImageHypothesisPropagation
>394	ExpressionStatement	 
>395	CallExpression	debugImageHypothesisHandling . release ( )
>396	ArgumentList	 
>397	Callee	debugImageHypothesisHandling . release
>398	MemberAccess	debugImageHypothesisHandling . release
>399	Identifier	release
>400	Identifier	debugImageHypothesisHandling
>401	IfStatement	if ( activeKeyFrame != 0 )
>402	ExpressionStatement	 
>403	CallExpression	activeKeyFramelock . unlock ( )
>404	ArgumentList	 
>405	Callee	activeKeyFramelock . unlock
>406	MemberAccess	activeKeyFramelock . unlock
>407	Identifier	unlock
>408	Identifier	activeKeyFramelock
>409	Condition	 
>410	EqualityExpression	activeKeyFrame != 0
>411	PrimaryExpression	0
>412	Identifier	activeKeyFrame
>423	FunctionDef	DepthMap 
>424	ParameterList	 
>425	ReturnType	void
>426	CompoundStatement	 
>427	ForStatement	for ( DepthMapPixelHypothesis * pt = currentDepthMap + width * height - 1 ; pt >= currentDepthMap ; pt -- )
>428	ExpressionStatement	 
>429	AssignmentExpr	pt -> isValid = false
>430	Identifier	false
>431	PtrMemberAccess	pt -> isValid
>432	Identifier	isValid
>433	Identifier	pt
>434	IncDecOp	 
>435	IncDec	--
>436	Identifier	pt
>437	Condition	 
>438	RelationalExpression	pt >= currentDepthMap
>439	Identifier	currentDepthMap
>440	Identifier	pt
>441	ForInit	 
>442	IdentifierDeclStatement	DepthMapPixelHypothesis * pt = currentDepthMap + width * height - 1 ;
>443	IdentifierDecl	* pt = currentDepthMap + width * height - 1
>444	AssignmentExpr	* pt = currentDepthMap + width * height - 1
>445	AdditiveExpression	currentDepthMap + width * height - 1
>446	AdditiveExpression	width * height - 1
>447	PrimaryExpression	1
>448	MultiplicativeExpression	width * height
>449	Identifier	height
>450	Identifier	width
>451	Identifier	currentDepthMap
>452	Identifier	pt
>453	Identifier	pt
>454	IdentifierDeclType	DepthMapPixelHypothesis *
>455	ForStatement	for ( DepthMapPixelHypothesis * pt = otherDepthMap + width * height - 1 ; pt >= otherDepthMap ; pt -- )
>456	ExpressionStatement	 
>457	AssignmentExpr	pt -> isValid = false
>458	Identifier	false
>459	PtrMemberAccess	pt -> isValid
>460	Identifier	isValid
>461	Identifier	pt
>462	IncDecOp	 
>463	IncDec	--
>464	Identifier	pt
>465	Condition	 
>466	RelationalExpression	pt >= otherDepthMap
>467	Identifier	otherDepthMap
>468	Identifier	pt
>469	ForInit	 
>470	IdentifierDeclStatement	DepthMapPixelHypothesis * pt = otherDepthMap + width * height - 1 ;
>471	IdentifierDecl	* pt = otherDepthMap + width * height - 1
>472	AssignmentExpr	* pt = otherDepthMap + width * height - 1
>473	AdditiveExpression	otherDepthMap + width * height - 1
>474	AdditiveExpression	width * height - 1
>475	PrimaryExpression	1
>476	MultiplicativeExpression	width * height
>477	Identifier	height
>478	Identifier	width
>479	Identifier	otherDepthMap
>480	Identifier	pt
>481	Identifier	pt
>482	IdentifierDeclType	DepthMapPixelHypothesis *
>494	FunctionDef	DepthMap 
>495	ParameterList	int yMin , int yMax , RunningStats * stats
>496	Parameter	 
>497	Identifier	stats
>498	ParameterType	RunningStats *
>499	Parameter	 
>500	Identifier	yMax
>501	ParameterType	int
>502	Parameter	 
>503	Identifier	yMin
>504	ParameterType	int
>505	ReturnType	void
>506	CompoundStatement	 
>507	ForStatement	for ( int y = yMin ; y < yMax ; y ++ )
>508	ForStatement	for ( int x = 3 ; x < width - 3 ; x ++ )
>509	CompoundStatement	 
>510	IfStatement	if ( success )
>511	ExpressionStatement	 
>512	IncDecOp	successes ++
>513	IncDec	++
>514	Identifier	successes
>515	Condition	 
>516	Identifier	success
>517	IfStatement	if ( ! hasHypothesis )
>518	ElseStatement	else
>519	ExpressionStatement	 
>520	AssignmentExpr	success = observeDepthUpdate ( x , y , idx , keyFrameMaxGradBuf , stats )
>521	CallExpression	observeDepthUpdate ( x , y , idx , keyFrameMaxGradBuf , stats )
>522	ArgumentList	x
>523	Argument	stats
>524	Identifier	stats
>525	Argument	keyFrameMaxGradBuf
>526	Identifier	keyFrameMaxGradBuf
>527	Argument	idx
>528	Identifier	idx
>529	Argument	y
>530	Identifier	y
>531	Argument	x
>532	Identifier	x
>533	Callee	observeDepthUpdate
>534	Identifier	observeDepthUpdate
>535	Identifier	success
>536	ExpressionStatement	 
>537	AssignmentExpr	success = observeDepthCreate ( x , y , idx , stats )
>538	CallExpression	observeDepthCreate ( x , y , idx , stats )
>539	ArgumentList	x
>540	Argument	stats
>541	Identifier	stats
>542	Argument	idx
>543	Identifier	idx
>544	Argument	y
>545	Identifier	y
>546	Argument	x
>547	Identifier	x
>548	Callee	observeDepthCreate
>549	Identifier	observeDepthCreate
>550	Identifier	success
>551	Condition	 
>552	UnaryOp	! hasHypothesis
>553	Identifier	hasHypothesis
>554	UnaryOperator	!
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	success
>557	Identifier	success
>558	IdentifierDeclType	bool
>559	IfStatement	if ( keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_CREATE || target -> blacklisted < MIN_BLACKLIST )
>560	ContinueStatement	 
>561	Condition	 
>562	OrExpression	keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_CREATE || target -> blacklisted < MIN_BLACKLIST
>563	RelationalExpression	target -> blacklisted < MIN_BLACKLIST
>564	Identifier	MIN_BLACKLIST
>565	PtrMemberAccess	target -> blacklisted
>566	Identifier	blacklisted
>567	Identifier	target
>568	RelationalExpression	keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_CREATE
>569	Identifier	MIN_ABS_GRAD_CREATE
>570	ArrayIndexing	keyFrameMaxGradBuf [ idx ]
>571	Identifier	idx
>572	Identifier	keyFrameMaxGradBuf
>573	IfStatement	if ( hasHypothesis && keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_DECREASE )
>574	CompoundStatement	 
>575	ContinueStatement	 
>576	ExpressionStatement	 
>577	AssignmentExpr	target -> isValid = false
>578	Identifier	false
>579	PtrMemberAccess	target -> isValid
>580	Identifier	isValid
>581	Identifier	target
>582	Condition	 
>583	AndExpression	hasHypothesis && keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_DECREASE
>584	RelationalExpression	keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_DECREASE
>585	Identifier	MIN_ABS_GRAD_DECREASE
>586	ArrayIndexing	keyFrameMaxGradBuf [ idx ]
>587	Identifier	idx
>588	Identifier	keyFrameMaxGradBuf
>589	Identifier	hasHypothesis
>590	IdentifierDeclStatement	 
>591	IdentifierDecl	hasHypothesis = target -> isValid
>592	AssignmentExpr	hasHypothesis = target -> isValid
>593	PtrMemberAccess	target -> isValid
>594	Identifier	isValid
>595	Identifier	target
>596	Identifier	hasHypothesis
>597	Identifier	hasHypothesis
>598	IdentifierDeclType	bool
>599	IdentifierDeclStatement	 
>600	IdentifierDecl	* target = currentDepthMap + idx
>601	AssignmentExpr	* target = currentDepthMap + idx
>602	AdditiveExpression	currentDepthMap + idx
>603	Identifier	idx
>604	Identifier	currentDepthMap
>605	Identifier	target
>606	Identifier	target
>607	IdentifierDeclType	DepthMapPixelHypothesis *
>608	IdentifierDeclStatement	 
>609	IdentifierDecl	idx = x + y * width
>610	AssignmentExpr	idx = x + y * width
>611	AdditiveExpression	x + y * width
>612	MultiplicativeExpression	y * width
>613	Identifier	width
>614	Identifier	y
>615	Identifier	x
>616	Identifier	idx
>617	Identifier	idx
>618	IdentifierDeclType	int
>619	IncDecOp	 
>620	IncDec	++
>621	Identifier	x
>622	Condition	 
>623	RelationalExpression	x < width - 3
>624	AdditiveExpression	width - 3
>625	PrimaryExpression	3
>626	Identifier	width
>627	Identifier	x
>628	ForInit	 
>629	IdentifierDeclStatement	int x = 3 ;
>630	IdentifierDecl	x = 3
>631	AssignmentExpr	x = 3
>632	PrimaryExpression	3
>633	Identifier	x
>634	Identifier	x
>635	IdentifierDeclType	int
>636	IncDecOp	 
>637	IncDec	++
>638	Identifier	y
>639	Condition	 
>640	RelationalExpression	y < yMax
>641	Identifier	yMax
>642	Identifier	y
>643	ForInit	 
>644	IdentifierDeclStatement	int y = yMin ;
>645	IdentifierDecl	y = yMin
>646	AssignmentExpr	y = yMin
>647	Identifier	yMin
>648	Identifier	yMin
>649	Identifier	y
>650	IdentifierDeclType	int
>651	IdentifierDeclStatement	 
>652	IdentifierDecl	successes = 0
>653	AssignmentExpr	successes = 0
>654	PrimaryExpression	0
>655	Identifier	successes
>656	Identifier	successes
>657	IdentifierDeclType	int
>658	IdentifierDeclStatement	 
>659	IdentifierDecl	* keyFrameMaxGradBuf = activeKeyFrame -> maxGradients ( 0 )
>660	AssignmentExpr	* keyFrameMaxGradBuf = activeKeyFrame -> maxGradients ( 0 )
>661	CallExpression	activeKeyFrame -> maxGradients ( 0 )
>662	ArgumentList	0
>663	Argument	0
>664	PrimaryExpression	0
>665	Callee	activeKeyFrame -> maxGradients
>666	PtrMemberAccess	activeKeyFrame -> maxGradients
>667	Identifier	maxGradients
>668	Identifier	activeKeyFrame
>669	Identifier	keyFrameMaxGradBuf
>670	Identifier	keyFrameMaxGradBuf
>671	IdentifierDeclType	const float *
>702	FunctionDef	DepthMap 
>703	ParameterList	 
>704	ReturnType	void
>705	CompoundStatement	 
>706	IfStatement	if ( enablePrintDebugInfo && printObservePurgeStatistics )
>707	CompoundStatement	 
>708	ExpressionStatement	 
>709	CallExpression	printf ( \"OBS-PRG (%d)
>710	ArgumentList	\"OBS-PRG (%d)
>711	Argument	runningStats . num_observe_addSkip
>712	MemberAccess	runningStats . num_observe_addSkip
>713	Identifier	num_observe_addSkip
>714	Identifier	runningStats
>715	Argument	runningStats . num_observe_skip_fail
>716	MemberAccess	runningStats . num_observe_skip_fail
>717	Identifier	num_observe_skip_fail
>718	Identifier	runningStats
>719	Argument	runningStats . num_observe_skip_oob
>720	MemberAccess	runningStats . num_observe_skip_oob
>721	Identifier	num_observe_skip_oob
>722	Identifier	runningStats
>723	Argument	runningStats . num_observe_notfound
>724	MemberAccess	runningStats . num_observe_notfound
>725	Identifier	num_observe_notfound
>726	Identifier	runningStats
>727	Argument	runningStats . num_observe_inconsistent
>728	MemberAccess	runningStats . num_observe_inconsistent
>729	Identifier	num_observe_inconsistent
>730	Identifier	runningStats
>731	Argument	runningStats . num_observe_good
>732	MemberAccess	runningStats . num_observe_good
>733	Identifier	num_observe_good
>734	Identifier	runningStats
>735	Argument	activeKeyFrame -> id ( )
>736	CallExpression	activeKeyFrame -> id ( )
>737	ArgumentList	 
>738	Callee	activeKeyFrame -> id
>739	PtrMemberAccess	activeKeyFrame -> id
>740	Identifier	id
>741	Identifier	activeKeyFrame
>742	Argument	\"OBS-PRG (%d)
>743	PrimaryExpression	\"OBS-PRG (%d)
>744	Callee	printf
>745	Identifier	printf
>746	Condition	 
>747	AndExpression	enablePrintDebugInfo && printObservePurgeStatistics
>748	Identifier	printObservePurgeStatistics
>749	Identifier	enablePrintDebugInfo
>750	IfStatement	if ( enablePrintDebugInfo && printObserveStatistics )
>751	CompoundStatement	 
>752	ExpressionStatement	 
>753	CallExpression	printf ( \"OBSERVE (%d)
>754	ArgumentList	\"OBSERVE (%d)
>755	Argument	runningStats . num_observe_blacklisted
>756	MemberAccess	runningStats . num_observe_blacklisted
>757	Identifier	num_observe_blacklisted
>758	Identifier	runningStats
>759	Argument	runningStats . num_observe_skip_alreadyGood
>760	MemberAccess	runningStats . num_observe_skip_alreadyGood
>761	Identifier	num_observe_skip_alreadyGood
>762	Identifier	runningStats
>763	Argument	runningStats . num_observe_update_attempted
>764	MemberAccess	runningStats . num_observe_update_attempted
>765	Identifier	num_observe_update_attempted
>766	Identifier	runningStats
>767	Argument	runningStats . num_observe_updated
>768	MemberAccess	runningStats . num_observe_updated
>769	Identifier	num_observe_updated
>770	Identifier	runningStats
>771	Argument	runningStats . num_observe_create_attempted
>772	MemberAccess	runningStats . num_observe_create_attempted
>773	Identifier	num_observe_create_attempted
>774	Identifier	runningStats
>775	Argument	runningStats . num_observe_created
>776	MemberAccess	runningStats . num_observe_created
>777	Identifier	num_observe_created
>778	Identifier	runningStats
>779	Argument	activeKeyFrame -> id ( )
>780	CallExpression	activeKeyFrame -> id ( )
>781	ArgumentList	 
>782	Callee	activeKeyFrame -> id
>783	PtrMemberAccess	activeKeyFrame -> id
>784	Identifier	id
>785	Identifier	activeKeyFrame
>786	Argument	\"OBSERVE (%d)
>787	PrimaryExpression	\"OBSERVE (%d)
>788	Callee	printf
>789	Identifier	printf
>790	Condition	 
>791	AndExpression	enablePrintDebugInfo && printObserveStatistics
>792	Identifier	printObserveStatistics
>793	Identifier	enablePrintDebugInfo
>794	ExpressionStatement	 
>795	CallExpression	threadReducer . reduce ( boost 
>796	ArgumentList	boost 
>797	Argument	10
>798	PrimaryExpression	10
>799	Argument	height - 3
>800	AdditiveExpression	height - 3
>801	PrimaryExpression	3
>802	Identifier	height
>803	Argument	3
>804	PrimaryExpression	3
>805	Argument	boost 
>806	CallExpression	boost 
>807	ArgumentList	& DepthMap 
>808	Argument	_3
>809	Identifier	_3
>810	Argument	_2
>811	Identifier	_2
>812	Argument	_1
>813	Identifier	_1
>814	Argument	this
>815	Identifier	this
>816	Argument	& DepthMap 
>817	UnaryOp	& DepthMap 
>818	Identifier	DepthMap 
>819	UnaryOperator	&
>820	Callee	boost 
>821	Identifier	boost 
>822	Callee	threadReducer . reduce
>823	MemberAccess	threadReducer . reduce
>824	Identifier	reduce
>825	Identifier	threadReducer
>934	FunctionDef	DepthMap 
>935	ParameterList	Frame * new_keyframe
>936	Parameter	 
>937	Identifier	new_keyframe
>938	ParameterType	Frame *
>939	ReturnType	void
>940	CompoundStatement	 
>941	IfStatement	if ( enablePrintDebugInfo && printPropagationStatistics )
>942	CompoundStatement	 
>943	ExpressionStatement	 
>944	CallExpression	printf ( \"PROPAGATE
>945	ArgumentList	\"PROPAGATE
>946	Argument	runningStats . num_prop_grad_decreased
>947	MemberAccess	runningStats . num_prop_grad_decreased
>948	Identifier	num_prop_grad_decreased
>949	Identifier	runningStats
>950	Argument	runningStats . num_prop_color_decreased
>951	MemberAccess	runningStats . num_prop_color_decreased
>952	Identifier	num_prop_color_decreased
>953	Identifier	runningStats
>954	Argument	runningStats . num_prop_occluded
>955	MemberAccess	runningStats . num_prop_occluded
>956	Identifier	num_prop_occluded
>957	Identifier	runningStats
>958	Argument	runningStats . num_prop_merged
>959	MemberAccess	runningStats . num_prop_merged
>960	Identifier	num_prop_merged
>961	Identifier	runningStats
>962	Argument	runningStats . num_prop_created
>963	MemberAccess	runningStats . num_prop_created
>964	Identifier	num_prop_created
>965	Identifier	runningStats
>966	Argument	runningStats . num_prop_removed_colorDiff
>967	MemberAccess	runningStats . num_prop_removed_colorDiff
>968	Identifier	num_prop_removed_colorDiff
>969	Identifier	runningStats
>970	Argument	runningStats . num_prop_removed_out_of_bounds
>971	MemberAccess	runningStats . num_prop_removed_out_of_bounds
>972	Identifier	num_prop_removed_out_of_bounds
>973	Identifier	runningStats
>974	Argument	runningStats . num_prop_removed_validity + runningStats . num_prop_removed_out_of_bounds + runningStats . num_prop_\
>975	AdditiveExpression	runningStats . num_prop_removed_validity + runningStats . num_prop_removed_out_of_bounds + runningStats \
>976	AdditiveExpression	runningStats . num_prop_removed_out_of_bounds + runningStats . num_prop_removed_colorDiff
>977	MemberAccess	runningStats . num_prop_removed_colorDiff
>978	Identifier	num_prop_removed_colorDiff
>979	Identifier	runningStats
>980	MemberAccess	runningStats . num_prop_removed_out_of_bounds
>981	Identifier	num_prop_removed_out_of_bounds
>982	Identifier	runningStats
>983	MemberAccess	runningStats . num_prop_removed_validity
>984	Identifier	num_prop_removed_validity
>985	Identifier	runningStats
>986	Argument	runningStats . num_prop_attempts
>987	MemberAccess	runningStats . num_prop_attempts
>988	Identifier	num_prop_attempts
>989	Identifier	runningStats
>990	Argument	\"PROPAGATE
>991	PrimaryExpression	\"PROPAGATE
>992	Callee	printf
>993	Identifier	printf
>994	Condition	 
>995	AndExpression	enablePrintDebugInfo && printPropagationStatistics
>996	Identifier	printPropagationStatistics
>997	Identifier	enablePrintDebugInfo
>998	ExpressionStatement	 
>999	CallExpression	std 
>1000	ArgumentList	currentDepthMap
>1001	Argument	otherDepthMap
>1002	Identifier	otherDepthMap
>1003	Argument	currentDepthMap
>1004	Identifier	currentDepthMap
>1005	Callee	std 
>1006	Identifier	std 
>1007	ForStatement	for ( int y = 0 ; y < height ; y ++ )
>1008	ForStatement	for ( int x = 0 ; x < width ; x ++ )
>1009	CompoundStatement	 
>1010	IfStatement	if ( ! targetBest -> isValid )
>1011	ElseStatement	else
>1012	CompoundStatement	 
>1013	ExpressionStatement	 
>1014	AssignmentExpr	* targetBest = DepthMapPixelHypothesis ( merged_new_idepth , 1.0f / ( 1.0f / targetBest -> idepth_var + \
>1015	CallExpression	DepthMapPixelHypothesis ( merged_new_idepth , 1.0f / ( 1.0f / targetBest -> idepth_var + 1.0f / new_var ) , merged_\
>1016	ArgumentList	merged_new_idepth
>1017	Argument	merged_validity
>1018	Identifier	merged_validity
>1019	Argument	1.0f / ( 1.0f / targetBest -> idepth_var + 1.0f / new_var )
>1020	MultiplicativeExpression	1.0f / ( 1.0f / targetBest -> idepth_var + 1.0f / new_var )
>1021	AdditiveExpression	1.0f / targetBest -> idepth_var + 1.0f / new_var
>1022	MultiplicativeExpression	1.0f / new_var
>1023	Identifier	new_var
>1024	PrimaryExpression	1.0f
>1025	MultiplicativeExpression	1.0f / targetBest -> idepth_var
>1026	PtrMemberAccess	targetBest -> idepth_var
>1027	Identifier	idepth_var
>1028	Identifier	targetBest
>1029	PrimaryExpression	1.0f
>1030	PrimaryExpression	1.0f
>1031	Argument	merged_new_idepth
>1032	Identifier	merged_new_idepth
>1033	Callee	DepthMapPixelHypothesis
>1034	Identifier	DepthMapPixelHypothesis
>1035	UnaryOp	* targetBest
>1036	Identifier	targetBest
>1037	UnaryOperator	*
>1038	IfStatement	if ( merged_validity > VALIDITY_COUNTER_MAX + ( VALIDITY_COUNTER_MAX_VARIABLE ) )
>1039	ExpressionStatement	 
>1040	AssignmentExpr	merged_validity = VALIDITY_COUNTER_MAX + ( VALIDITY_COUNTER_MAX_VARIABLE )
>1041	AdditiveExpression	VALIDITY_COUNTER_MAX + ( VALIDITY_COUNTER_MAX_VARIABLE )
>1042	Identifier	VALIDITY_COUNTER_MAX_VARIABLE
>1043	Identifier	VALIDITY_COUNTER_MAX
>1044	Identifier	merged_validity
>1045	Condition	 
>1046	RelationalExpression	merged_validity > VALIDITY_COUNTER_MAX + ( VALIDITY_COUNTER_MAX_VARIABLE )
>1047	AdditiveExpression	VALIDITY_COUNTER_MAX + ( VALIDITY_COUNTER_MAX_VARIABLE )
>1048	Identifier	VALIDITY_COUNTER_MAX_VARIABLE
>1049	Identifier	VALIDITY_COUNTER_MAX
>1050	Identifier	merged_validity
>1051	IdentifierDeclStatement	 
>1052	IdentifierDecl	merged_validity = source -> validity_counter + targetBest -> validity_counter
>1053	AssignmentExpr	merged_validity = source -> validity_counter + targetBest -> validity_counter
>1054	AdditiveExpression	source -> validity_counter + targetBest -> validity_counter
>1055	PtrMemberAccess	targetBest -> validity_counter
>1056	Identifier	validity_counter
>1057	Identifier	targetBest
>1058	PtrMemberAccess	source -> validity_counter
>1059	Identifier	validity_counter
>1060	Identifier	source
>1061	Identifier	merged_validity
>1062	Identifier	merged_validity
>1063	IdentifierDeclType	int
>1064	IdentifierDeclStatement	 
>1065	IdentifierDecl	merged_new_idepth = w * targetBest -> idepth + ( 1.0f - w ) * new_idepth
>1066	AssignmentExpr	merged_new_idepth = w * targetBest -> idepth + ( 1.0f - w ) * new_idepth
>1067	AdditiveExpression	w * targetBest -> idepth + ( 1.0f - w ) * new_idepth
>1068	MultiplicativeExpression	( 1.0f - w ) * new_idepth
>1069	Identifier	new_idepth
>1070	AdditiveExpression	1.0f - w
>1071	Identifier	w
>1072	PrimaryExpression	1.0f
>1073	MultiplicativeExpression	w * targetBest -> idepth
>1074	PtrMemberAccess	targetBest -> idepth
>1075	Identifier	idepth
>1076	Identifier	targetBest
>1077	Identifier	w
>1078	Identifier	merged_new_idepth
>1079	Identifier	merged_new_idepth
>1080	IdentifierDeclType	float
>1081	IdentifierDeclStatement	 
>1082	IdentifierDecl	w = new_var / ( targetBest -> idepth_var + new_var )
>1083	AssignmentExpr	w = new_var / ( targetBest -> idepth_var + new_var )
>1084	MultiplicativeExpression	new_var / ( targetBest -> idepth_var + new_var )
>1085	AdditiveExpression	targetBest -> idepth_var + new_var
>1086	Identifier	new_var
>1087	PtrMemberAccess	targetBest -> idepth_var
>1088	Identifier	idepth_var
>1089	Identifier	targetBest
>1090	Identifier	new_var
>1091	Identifier	w
>1092	Identifier	w
>1093	IdentifierDeclType	float
>1094	IfStatement	if ( enablePrintDebugInfo )
>1095	ExpressionStatement	 
>1096	IncDecOp	runningStats . num_prop_merged ++
>1097	IncDec	++
>1098	MemberAccess	runningStats . num_prop_merged
>1099	Identifier	num_prop_merged
>1100	Identifier	runningStats
>1101	Condition	 
>1102	Identifier	enablePrintDebugInfo
>1103	CompoundStatement	 
>1104	ExpressionStatement	 
>1105	AssignmentExpr	* targetBest = DepthMapPixelHypothesis ( new_idepth , new_var , source -> validity_counter )
>1106	CallExpression	DepthMapPixelHypothesis ( new_idepth , new_var , source -> validity_counter )
>1107	ArgumentList	new_idepth
>1108	Argument	source -> validity_counter
>1109	PtrMemberAccess	source -> validity_counter
>1110	Identifier	validity_counter
>1111	Identifier	source
>1112	Argument	new_var
>1113	Identifier	new_var
>1114	Argument	new_idepth
>1115	Identifier	new_idepth
>1116	Callee	DepthMapPixelHypothesis
>1117	Identifier	DepthMapPixelHypothesis
>1118	UnaryOp	* targetBest
>1119	Identifier	targetBest
>1120	UnaryOperator	*
>1121	IfStatement	if ( enablePrintDebugInfo )
>1122	ExpressionStatement	 
>1123	IncDecOp	runningStats . num_prop_created ++
>1124	IncDec	++
>1125	MemberAccess	runningStats . num_prop_created
>1126	Identifier	num_prop_created
>1127	Identifier	runningStats
>1128	Condition	 
>1129	Identifier	enablePrintDebugInfo
>1130	Condition	 
>1131	UnaryOp	! targetBest -> isValid
>1132	PtrMemberAccess	targetBest -> isValid
>1133	Identifier	isValid
>1134	Identifier	targetBest
>1135	UnaryOperator	!
>1136	IfStatement	if ( targetBest -> isValid )
>1137	CompoundStatement	 
>1138	IfStatement	if ( DIFF_FAC_PROP_MERGE * diff * diff > new_var + targetBest -> idepth_var )
>1139	CompoundStatement	 
>1140	IfStatement	if ( new_idepth < targetBest -> idepth )
>1141	ElseStatement	else
>1142	CompoundStatement	 
>1143	ExpressionStatement	 
>1144	AssignmentExpr	targetBest -> isValid = false
>1145	Identifier	false
>1146	PtrMemberAccess	targetBest -> isValid
>1147	Identifier	isValid
>1148	Identifier	targetBest
>1149	IfStatement	if ( enablePrintDebugInfo )
>1150	ExpressionStatement	 
>1151	IncDecOp	runningStats . num_prop_occluded ++
>1152	IncDec	++
>1153	MemberAccess	runningStats . num_prop_occluded
>1154	Identifier	num_prop_occluded
>1155	Identifier	runningStats
>1156	Condition	 
>1157	Identifier	enablePrintDebugInfo
>1158	CompoundStatement	 
>1159	ContinueStatement	 
>1160	IfStatement	if ( enablePrintDebugInfo )
>1161	ExpressionStatement	 
>1162	IncDecOp	runningStats . num_prop_occluded ++
>1163	IncDec	++
>1164	MemberAccess	runningStats . num_prop_occluded
>1165	Identifier	num_prop_occluded
>1166	Identifier	runningStats
>1167	Condition	 
>1168	Identifier	enablePrintDebugInfo
>1169	Condition	 
>1170	RelationalExpression	new_idepth < targetBest -> idepth
>1171	PtrMemberAccess	targetBest -> idepth
>1172	Identifier	idepth
>1173	Identifier	targetBest
>1174	Identifier	new_idepth
>1175	Condition	 
>1176	RelationalExpression	DIFF_FAC_PROP_MERGE * diff * diff > new_var + targetBest -> idepth_var
>1177	AdditiveExpression	new_var + targetBest -> idepth_var
>1178	PtrMemberAccess	targetBest -> idepth_var
>1179	Identifier	idepth_var
>1180	Identifier	targetBest
>1181	Identifier	new_var
>1182	MultiplicativeExpression	DIFF_FAC_PROP_MERGE * diff * diff
>1183	MultiplicativeExpression	diff * diff
>1184	Identifier	diff
>1185	Identifier	diff
>1186	Identifier	DIFF_FAC_PROP_MERGE
>1187	IdentifierDeclStatement	 
>1188	IdentifierDecl	diff = targetBest -> idepth - new_idepth
>1189	AssignmentExpr	diff = targetBest -> idepth - new_idepth
>1190	AdditiveExpression	targetBest -> idepth - new_idepth
>1191	Identifier	new_idepth
>1192	PtrMemberAccess	targetBest -> idepth
>1193	Identifier	idepth
>1194	Identifier	targetBest
>1195	Identifier	diff
>1196	Identifier	diff
>1197	IdentifierDeclType	float
>1198	Condition	 
>1199	PtrMemberAccess	targetBest -> isValid
>1200	Identifier	isValid
>1201	Identifier	targetBest
>1202	IdentifierDeclStatement	 
>1203	IdentifierDecl	new_var = idepth_ratio_4 * source -> idepth_var
>1204	AssignmentExpr	new_var = idepth_ratio_4 * source -> idepth_var
>1205	MultiplicativeExpression	idepth_ratio_4 * source -> idepth_var
>1206	PtrMemberAccess	source -> idepth_var
>1207	Identifier	idepth_var
>1208	Identifier	source
>1209	Identifier	idepth_ratio_4
>1210	Identifier	new_var
>1211	Identifier	new_var
>1212	IdentifierDeclType	float
>1213	ExpressionStatement	 
>1214	AssignmentExpr	idepth_ratio_4 *= idepth_ratio_4
>1215	Identifier	idepth_ratio_4
>1216	Identifier	idepth_ratio_4
>1217	ExpressionStatement	 
>1218	AssignmentExpr	idepth_ratio_4 *= idepth_ratio_4
>1219	Identifier	idepth_ratio_4
>1220	Identifier	idepth_ratio_4
>1221	IdentifierDeclStatement	 
>1222	IdentifierDecl	idepth_ratio_4 = new_idepth / source -> idepth_smoothed
>1223	AssignmentExpr	idepth_ratio_4 = new_idepth / source -> idepth_smoothed
>1224	MultiplicativeExpression	new_idepth / source -> idepth_smoothed
>1225	PtrMemberAccess	source -> idepth_smoothed
>1226	Identifier	idepth_smoothed
>1227	Identifier	source
>1228	Identifier	new_idepth
>1229	Identifier	idepth_ratio_4
>1230	Identifier	idepth_ratio_4
>1231	IdentifierDeclType	float
>1232	IdentifierDeclStatement	 
>1233	IdentifierDecl	* targetBest = otherDepthMap + newIDX
>1234	AssignmentExpr	* targetBest = otherDepthMap + newIDX
>1235	AdditiveExpression	otherDepthMap + newIDX
>1236	Identifier	newIDX
>1237	Identifier	otherDepthMap
>1238	Identifier	targetBest
>1239	Identifier	targetBest
>1240	IdentifierDeclType	DepthMapPixelHypothesis *
>1241	IfStatement	if ( trackingWasGood != 0 )
>1242	ElseStatement	else
>1243	CompoundStatement	 
>1244	IfStatement	if ( residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * destAbsGrad * destAbsGrad ) > 1.0f || destAbsGrad < \
>1245	CompoundStatement	 
>1246	ContinueStatement	 
>1247	IfStatement	if ( enablePrintDebugInfo )
>1248	ExpressionStatement	 
>1249	IncDecOp	runningStats . num_prop_removed_colorDiff ++
>1250	IncDec	++
>1251	MemberAccess	runningStats . num_prop_removed_colorDiff
>1252	Identifier	num_prop_removed_colorDiff
>1253	Identifier	runningStats
>1254	Condition	 
>1255	Identifier	enablePrintDebugInfo
>1256	Condition	 
>1257	OrExpression	residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * destAbsGrad * destAbsGrad ) > 1.0f || \
>1258	RelationalExpression	destAbsGrad < MIN_ABS_GRAD_DECREASE
>1259	Identifier	MIN_ABS_GRAD_DECREASE
>1260	Identifier	destAbsGrad
>1261	RelationalExpression	residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * destAbsGrad * destAbsGrad ) > 1.0f
>1262	PrimaryExpression	1.0f
>1263	MultiplicativeExpression	residual * residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * destAbsGrad * destAbsGrad )
>1264	MultiplicativeExpression	residual / ( MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * destAbsGrad * destAbsGrad )
>1265	AdditiveExpression	MAX_DIFF_CONSTANT + MAX_DIFF_GRAD_MULT * destAbsGrad * destAbsGrad
>1266	MultiplicativeExpression	MAX_DIFF_GRAD_MULT * destAbsGrad * destAbsGrad
>1267	MultiplicativeExpression	destAbsGrad * destAbsGrad
>1268	Identifier	destAbsGrad
>1269	Identifier	destAbsGrad
>1270	Identifier	MAX_DIFF_GRAD_MULT
>1271	Identifier	MAX_DIFF_CONSTANT
>1272	Identifier	residual
>1273	Identifier	residual
>1274	IdentifierDeclStatement	 
>1275	IdentifierDecl	residual = destColor - sourceColor
>1276	AssignmentExpr	residual = destColor - sourceColor
>1277	AdditiveExpression	destColor - sourceColor
>1278	Identifier	sourceColor
>1279	Identifier	destColor
>1280	Identifier	residual
>1281	Identifier	residual
>1282	IdentifierDeclType	float
>1283	IdentifierDeclStatement	 
>1284	IdentifierDecl	destColor = getInterpolatedElement ( newKFImageData , u_new , v_new , width )
>1285	AssignmentExpr	destColor = getInterpolatedElement ( newKFImageData , u_new , v_new , width )
>1286	CallExpression	getInterpolatedElement ( newKFImageData , u_new , v_new , width )
>1287	ArgumentList	newKFImageData
>1288	Argument	width
>1289	Identifier	width
>1290	Argument	v_new
>1291	Identifier	v_new
>1292	Argument	u_new
>1293	Identifier	u_new
>1294	Argument	newKFImageData
>1295	Identifier	newKFImageData
>1296	Callee	getInterpolatedElement
>1297	Identifier	getInterpolatedElement
>1298	Identifier	destColor
>1299	Identifier	destColor
>1300	IdentifierDeclType	float
>1301	IdentifierDeclStatement	 
>1302	IdentifierDecl	sourceColor = activeKFImageData [ x + y * width ]
>1303	AssignmentExpr	sourceColor = activeKFImageData [ x + y * width ]
>1304	ArrayIndexing	activeKFImageData [ x + y * width ]
>1305	AdditiveExpression	x + y * width
>1306	MultiplicativeExpression	y * width
>1307	Identifier	width
>1308	Identifier	y
>1309	Identifier	x
>1310	Identifier	activeKFImageData
>1311	Identifier	sourceColor
>1312	Identifier	sourceColor
>1313	IdentifierDeclType	float
>1314	CompoundStatement	 
>1315	IfStatement	if ( ! trackingWasGood [ ( x >> SE3TRACKING_MIN_LEVEL ) + ( width >> SE3TRACKING_MIN_LEVEL ) * ( y >> SE3TRACKING_\
>1316	CompoundStatement	 
>1317	ContinueStatement	 
>1318	IfStatement	if ( enablePrintDebugInfo )
>1319	ExpressionStatement	 
>1320	IncDecOp	runningStats . num_prop_removed_colorDiff ++
>1321	IncDec	++
>1322	MemberAccess	runningStats . num_prop_removed_colorDiff
>1323	Identifier	num_prop_removed_colorDiff
>1324	Identifier	runningStats
>1325	Condition	 
>1326	Identifier	enablePrintDebugInfo
>1327	Condition	 
>1328	OrExpression	! trackingWasGood [ ( x >> SE3TRACKING_MIN_LEVEL ) + ( width >> SE3TRACKING_MIN_LEVEL ) * ( y >> SE3TRACKING_\
>1329	RelationalExpression	destAbsGrad < MIN_ABS_GRAD_DECREASE
>1330	Identifier	MIN_ABS_GRAD_DECREASE
>1331	Identifier	destAbsGrad
>1332	UnaryOp	! trackingWasGood [ ( x >> SE3TRACKING_MIN_LEVEL ) + ( width >> SE3TRACKING_MIN_LEVEL ) * ( y >> SE3TRACKING_MIN_\
>1333	ArrayIndexing	trackingWasGood [ ( x >> SE3TRACKING_MIN_LEVEL ) + ( width >> SE3TRACKING_MIN_LEVEL ) * ( y >> SE3TRACKING_MIN_LEVEL ) ]
>1334	AdditiveExpression	( x >> SE3TRACKING_MIN_LEVEL ) + ( width >> SE3TRACKING_MIN_LEVEL ) * ( y >> SE3TRACKING_MIN_LEVEL )
>1335	MultiplicativeExpression	( width >> SE3TRACKING_MIN_LEVEL ) * ( y >> SE3TRACKING_MIN_LEVEL )
>1336	ShiftExpression	y >> SE3TRACKING_MIN_LEVEL
>1337	Identifier	SE3TRACKING_MIN_LEVEL
>1338	Identifier	y
>1339	ShiftExpression	width >> SE3TRACKING_MIN_LEVEL
>1340	Identifier	SE3TRACKING_MIN_LEVEL
>1341	Identifier	width
>1342	ShiftExpression	x >> SE3TRACKING_MIN_LEVEL
>1343	Identifier	SE3TRACKING_MIN_LEVEL
>1344	Identifier	x
>1345	Identifier	trackingWasGood
>1346	UnaryOperator	!
>1347	Condition	 
>1348	EqualityExpression	trackingWasGood != 0
>1349	PrimaryExpression	0
>1350	Identifier	trackingWasGood
>1351	IdentifierDeclStatement	 
>1352	IdentifierDecl	destAbsGrad = newKFMaxGrad [ newIDX ]
>1353	AssignmentExpr	destAbsGrad = newKFMaxGrad [ newIDX ]
>1354	ArrayIndexing	newKFMaxGrad [ newIDX ]
>1355	Identifier	newIDX
>1356	Identifier	newKFMaxGrad
>1357	Identifier	destAbsGrad
>1358	Identifier	destAbsGrad
>1359	IdentifierDeclType	float
>1360	IdentifierDeclStatement	 
>1361	IdentifierDecl	newIDX = ( int ) ( u_new + 0.5f ) + ( ( int ) ( v_new + 0.5f ) ) * width
>1362	AssignmentExpr	newIDX = ( int ) ( u_new + 0.5f ) + ( ( int ) ( v_new + 0.5f ) ) * width
>1363	AdditiveExpression	( int ) ( u_new + 0.5f ) + ( ( int ) ( v_new + 0.5f ) ) * width
>1364	MultiplicativeExpression	( ( int ) ( v_new + 0.5f ) ) * width
>1365	Identifier	width
>1366	CastExpression	( int ) ( v_new + 0.5f )
>1367	AdditiveExpression	v_new + 0.5f
>1368	PrimaryExpression	0.5f
>1369	Identifier	v_new
>1370	CastTarget	int
>1371	CastExpression	( int ) ( u_new + 0.5f )
>1372	AdditiveExpression	u_new + 0.5f
>1373	PrimaryExpression	0.5f
>1374	Identifier	u_new
>1375	CastTarget	int
>1376	Identifier	newIDX
>1377	Identifier	newIDX
>1378	IdentifierDeclType	int
>1379	IfStatement	if ( ! ( u_new > 2.1f && v_new > 2.1f && u_new < width - 3.1f && v_new < height - 3.1f ) )
>1380	CompoundStatement	 
>1381	ContinueStatement	 
>1382	IfStatement	if ( enablePrintDebugInfo )
>1383	ExpressionStatement	 
>1384	IncDecOp	runningStats . num_prop_removed_out_of_bounds ++
>1385	IncDec	++
>1386	MemberAccess	runningStats . num_prop_removed_out_of_bounds
>1387	Identifier	num_prop_removed_out_of_bounds
>1388	Identifier	runningStats
>1389	Condition	 
>1390	Identifier	enablePrintDebugInfo
>1391	Condition	 
>1392	UnaryOp	! ( u_new > 2.1f && v_new > 2.1f && u_new < width - 3.1f && v_new < height - 3.1f )
>1393	AndExpression	u_new > 2.1f && v_new > 2.1f && u_new < width - 3.1f && v_new < height - 3.1f
>1394	AndExpression	v_new > 2.1f && u_new < width - 3.1f && v_new < height - 3.1f
>1395	AndExpression	u_new < width - 3.1f && v_new < height - 3.1f
>1396	RelationalExpression	v_new < height - 3.1f
>1397	AdditiveExpression	height - 3.1f
>1398	PrimaryExpression	3.1f
>1399	Identifier	height
>1400	Identifier	v_new
>1401	RelationalExpression	u_new < width - 3.1f
>1402	AdditiveExpression	width - 3.1f
>1403	PrimaryExpression	3.1f
>1404	Identifier	width
>1405	Identifier	u_new
>1406	RelationalExpression	v_new > 2.1f
>1407	PrimaryExpression	2.1f
>1408	Identifier	v_new
>1409	RelationalExpression	u_new > 2.1f
>1410	PrimaryExpression	2.1f
>1411	Identifier	u_new
>1412	UnaryOperator	!
>1413	IdentifierDeclStatement	 
>1414	IdentifierDecl	v_new = pn [ 1 ] * new_idepth * fy + cy
>1415	AssignmentExpr	v_new = pn [ 1 ] * new_idepth * fy + cy
>1416	AdditiveExpression	pn [ 1 ] * new_idepth * fy + cy
>1417	Identifier	cy
>1418	MultiplicativeExpression	pn [ 1 ] * new_idepth * fy
>1419	MultiplicativeExpression	new_idepth * fy
>1420	Identifier	fy
>1421	Identifier	new_idepth
>1422	ArrayIndexing	pn [ 1 ]
>1423	PrimaryExpression	1
>1424	Identifier	pn
>1425	Identifier	v_new
>1426	Identifier	v_new
>1427	IdentifierDeclType	float
>1428	IdentifierDeclStatement	 
>1429	IdentifierDecl	u_new = pn [ 0 ] * new_idepth * fx + cx
>1430	AssignmentExpr	u_new = pn [ 0 ] * new_idepth * fx + cx
>1431	AdditiveExpression	pn [ 0 ] * new_idepth * fx + cx
>1432	Identifier	cx
>1433	MultiplicativeExpression	pn [ 0 ] * new_idepth * fx
>1434	MultiplicativeExpression	new_idepth * fx
>1435	Identifier	fx
>1436	Identifier	new_idepth
>1437	ArrayIndexing	pn [ 0 ]
>1438	PrimaryExpression	0
>1439	Identifier	pn
>1440	Identifier	u_new
>1441	Identifier	u_new
>1442	IdentifierDeclType	float
>1443	IdentifierDeclStatement	 
>1444	IdentifierDecl	new_idepth = 1.0f / pn [ 2 ]
>1445	AssignmentExpr	new_idepth = 1.0f / pn [ 2 ]
>1446	MultiplicativeExpression	1.0f / pn [ 2 ]
>1447	ArrayIndexing	pn [ 2 ]
>1448	PrimaryExpression	2
>1449	Identifier	pn
>1450	PrimaryExpression	1.0f
>1451	Identifier	new_idepth
>1452	Identifier	new_idepth
>1453	IdentifierDeclType	float
>1454	IdentifierDeclStatement	 
>1455	IdentifierDecl	pn = ( trafoInv_R * Eigen 
>1456	AssignmentExpr	pn = ( trafoInv_R * Eigen 
>1457	AdditiveExpression	( trafoInv_R * Eigen 
>1458	Identifier	trafoInv_t
>1459	MultiplicativeExpression	( trafoInv_R * Eigen 
>1460	PtrMemberAccess	source -> idepth_smoothed
>1461	Identifier	idepth_smoothed
>1462	Identifier	source
>1463	MultiplicativeExpression	trafoInv_R * Eigen 
>1464	CallExpression	Eigen 
>1465	ArgumentList	x * fxi + cxi
>1466	Argument	1.0f
>1467	PrimaryExpression	1.0f
>1468	Argument	y * fyi + cyi
>1469	AdditiveExpression	y * fyi + cyi
>1470	Identifier	cyi
>1471	MultiplicativeExpression	y * fyi
>1472	Identifier	fyi
>1473	Identifier	y
>1474	Argument	x * fxi + cxi
>1475	AdditiveExpression	x * fxi + cxi
>1476	Identifier	cxi
>1477	MultiplicativeExpression	x * fxi
>1478	Identifier	fxi
>1479	Identifier	x
>1480	Callee	Eigen 
>1481	Identifier	Eigen 
>1482	Identifier	trafoInv_R
>1483	Identifier	pn
>1484	Identifier	pn
>1485	IdentifierDeclType	Eigen 
>1486	IfStatement	if ( enablePrintDebugInfo )
>1487	ExpressionStatement	 
>1488	IncDecOp	runningStats . num_prop_attempts ++
>1489	IncDec	++
>1490	MemberAccess	runningStats . num_prop_attempts
>1491	Identifier	num_prop_attempts
>1492	Identifier	runningStats
>1493	Condition	 
>1494	Identifier	enablePrintDebugInfo
>1495	IfStatement	if ( ! source -> isValid )
>1496	ContinueStatement	 
>1497	Condition	 
>1498	UnaryOp	! source -> isValid
>1499	PtrMemberAccess	source -> isValid
>1500	Identifier	isValid
>1501	Identifier	source
>1502	UnaryOperator	!
>1503	IdentifierDeclStatement	 
>1504	IdentifierDecl	* source = currentDepthMap + x + y * width
>1505	AssignmentExpr	* source = currentDepthMap + x + y * width
>1506	AdditiveExpression	currentDepthMap + x + y * width
>1507	AdditiveExpression	x + y * width
>1508	MultiplicativeExpression	y * width
>1509	Identifier	width
>1510	Identifier	y
>1511	Identifier	x
>1512	Identifier	currentDepthMap
>1513	Identifier	source
>1514	Identifier	source
>1515	IdentifierDeclType	DepthMapPixelHypothesis *
>1516	IncDecOp	 
>1517	IncDec	++
>1518	Identifier	x
>1519	Condition	 
>1520	RelationalExpression	x < width
>1521	Identifier	width
>1522	Identifier	x
>1523	ForInit	 
>1524	IdentifierDeclStatement	int x = 0 ;
>1525	IdentifierDecl	x = 0
>1526	AssignmentExpr	x = 0
>1527	PrimaryExpression	0
>1528	Identifier	x
>1529	Identifier	x
>1530	IdentifierDeclType	int
>1531	IncDecOp	 
>1532	IncDec	++
>1533	Identifier	y
>1534	Condition	 
>1535	RelationalExpression	y < height
>1536	Identifier	height
>1537	Identifier	y
>1538	ForInit	 
>1539	IdentifierDeclStatement	int y = 0 ;
>1540	IdentifierDecl	y = 0
>1541	AssignmentExpr	y = 0
>1542	PrimaryExpression	0
>1543	Identifier	y
>1544	Identifier	y
>1545	IdentifierDeclType	int
>1546	IdentifierDeclStatement	 
>1547	IdentifierDecl	* newKFImageData = new_keyframe -> image ( 0 )
>1548	AssignmentExpr	* newKFImageData = new_keyframe -> image ( 0 )
>1549	CallExpression	new_keyframe -> image ( 0 )
>1550	ArgumentList	0
>1551	Argument	0
>1552	PrimaryExpression	0
>1553	Callee	new_keyframe -> image
>1554	PtrMemberAccess	new_keyframe -> image
>1555	Identifier	image
>1556	Identifier	new_keyframe
>1557	Identifier	newKFImageData
>1558	Identifier	newKFImageData
>1559	IdentifierDeclType	const float *
>1560	IdentifierDeclStatement	 
>1561	IdentifierDecl	* newKFMaxGrad = new_keyframe -> maxGradients ( 0 )
>1562	AssignmentExpr	* newKFMaxGrad = new_keyframe -> maxGradients ( 0 )
>1563	CallExpression	new_keyframe -> maxGradients ( 0 )
>1564	ArgumentList	0
>1565	Argument	0
>1566	PrimaryExpression	0
>1567	Callee	new_keyframe -> maxGradients
>1568	PtrMemberAccess	new_keyframe -> maxGradients
>1569	Identifier	maxGradients
>1570	Identifier	new_keyframe
>1571	Identifier	newKFMaxGrad
>1572	Identifier	newKFMaxGrad
>1573	IdentifierDeclType	const float *
>1574	IdentifierDeclStatement	 
>1575	IdentifierDecl	* activeKFImageData = activeKeyFrame -> image ( 0 )
>1576	AssignmentExpr	* activeKFImageData = activeKeyFrame -> image ( 0 )
>1577	CallExpression	activeKeyFrame -> image ( 0 )
>1578	ArgumentList	0
>1579	Argument	0
>1580	PrimaryExpression	0
>1581	Callee	activeKeyFrame -> image
>1582	PtrMemberAccess	activeKeyFrame -> image
>1583	Identifier	image
>1584	Identifier	activeKeyFrame
>1585	Identifier	activeKFImageData
>1586	Identifier	activeKFImageData
>1587	IdentifierDeclType	const float *
>1588	IdentifierDeclStatement	 
>1589	IdentifierDecl	* trackingWasGood = new_keyframe -> getTrackingParent ( ) == activeKeyFrame ? new_keyframe -> refPixelWasGoodNoCreate ( ) 
>1590	AssignmentExpr	* trackingWasGood = new_keyframe -> getTrackingParent ( ) == activeKeyFrame ? new_keyframe -> refPixelWasGoodNoCreate ( ) 
>1591	ConditionalExpression	new_keyframe -> getTrackingParent ( ) == activeKeyFrame ? new_keyframe -> refPixelWasGoodNoCreate ( ) 
>1592	PrimaryExpression	0
>1593	CallExpression	new_keyframe -> refPixelWasGoodNoCreate ( )
>1594	ArgumentList	 
>1595	Callee	new_keyframe -> refPixelWasGoodNoCreate
>1596	PtrMemberAccess	new_keyframe -> refPixelWasGoodNoCreate
>1597	Identifier	refPixelWasGoodNoCreate
>1598	Identifier	new_keyframe
>1599	Condition	new_keyframe -> getTrackingParent ( ) == activeKeyFrame
>1600	EqualityExpression	new_keyframe -> getTrackingParent ( ) == activeKeyFrame
>1601	Identifier	activeKeyFrame
>1602	CallExpression	new_keyframe -> getTrackingParent ( )
>1603	ArgumentList	 
>1604	Callee	new_keyframe -> getTrackingParent
>1605	PtrMemberAccess	new_keyframe -> getTrackingParent
>1606	Identifier	getTrackingParent
>1607	Identifier	new_keyframe
>1608	Identifier	trackingWasGood
>1609	Identifier	trackingWasGood
>1610	IdentifierDeclType	const bool *
>1611	ExpressionStatement	 
>1612	Statement	 
>1613	Statement	 
>1614	Statement	 
>1615	Statement	 
>1616	Statement	 
>1617	Statement	 
>1618	Statement	 
>1619	Statement	 
>1620	Statement	 
>1621	Statement	 
>1622	Statement	 
>1623	Statement	 
>1624	Statement	 
>1625	Statement	 
>1626	Statement	 
>1627	Statement	 
>1628	Statement	 
>1629	Statement	 
>1630	Statement	 
>1631	Statement	 
>1632	Statement	 
>1633	ExpressionStatement	 
>1634	Statement	 
>1635	Statement	 
>1636	Statement	 
>1637	Statement	 
>1638	Statement	 
>1639	Statement	 
>1640	Statement	 
>1641	Statement	 
>1642	Statement	 
>1643	Statement	 
>1644	Statement	 
>1645	Statement	 
>1646	Statement	 
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	Statement	 
>1651	IdentifierDeclStatement	 
>1652	IdentifierDecl	oldToNew_SE3 = se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse ( )
>1653	AssignmentExpr	oldToNew_SE3 = se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse ( )
>1654	CallExpression	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse ( )
>1655	ArgumentList	 
>1656	Callee	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse
>1657	MemberAccess	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse
>1658	Identifier	inverse
>1659	CallExpression	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw )
>1660	ArgumentList	new_keyframe -> pose -> thisToParent_raw
>1661	Argument	new_keyframe -> pose -> thisToParent_raw
>1662	PtrMemberAccess	new_keyframe -> pose -> thisToParent_raw
>1663	Identifier	thisToParent_raw
>1664	PtrMemberAccess	new_keyframe -> pose
>1665	Identifier	pose
>1666	Identifier	new_keyframe
>1667	Callee	se3FromSim3
>1668	Identifier	se3FromSim3
>1669	Identifier	oldToNew_SE3
>1670	Identifier	oldToNew_SE3
>1671	IdentifierDeclType	SE3
>1672	ForStatement	for ( DepthMapPixelHypothesis * pt = otherDepthMap + width * height - 1 ; pt >= otherDepthMap ; pt -- )
>1673	CompoundStatement	 
>1674	ExpressionStatement	 
>1675	AssignmentExpr	pt -> blacklisted = 0
>1676	PrimaryExpression	0
>1677	PtrMemberAccess	pt -> blacklisted
>1678	Identifier	blacklisted
>1679	Identifier	pt
>1680	ExpressionStatement	 
>1681	AssignmentExpr	pt -> isValid = false
>1682	Identifier	false
>1683	PtrMemberAccess	pt -> isValid
>1684	Identifier	isValid
>1685	Identifier	pt
>1686	IncDecOp	 
>1687	IncDec	--
>1688	Identifier	pt
>1689	Condition	 
>1690	RelationalExpression	pt >= otherDepthMap
>1691	Identifier	otherDepthMap
>1692	Identifier	pt
>1693	ForInit	 
>1694	IdentifierDeclStatement	DepthMapPixelHypothesis * pt = otherDepthMap + width * height - 1 ;
>1695	IdentifierDecl	* pt = otherDepthMap + width * height - 1
>1696	AssignmentExpr	* pt = otherDepthMap + width * height - 1
>1697	AdditiveExpression	otherDepthMap + width * height - 1
>1698	AdditiveExpression	width * height - 1
>1699	PrimaryExpression	1
>1700	MultiplicativeExpression	width * height
>1701	Identifier	height
>1702	Identifier	width
>1703	Identifier	otherDepthMap
>1704	Identifier	pt
>1705	Identifier	pt
>1706	IdentifierDeclType	DepthMapPixelHypothesis *
>1707	IfStatement	if ( new_keyframe -> getTrackingParent ( ) != activeKeyFrame )
>1708	CompoundStatement	 
>1709	ExpressionStatement	 
>1710	CallExpression	printf ( \"WARNING
>1711	ArgumentList	\"WARNING
>1712	Argument	new_keyframe -> getTrackingParent ( ) -> id ( )
>1713	CallExpression	new_keyframe -> getTrackingParent ( ) -> id ( )
>1714	ArgumentList	 
>1715	Callee	new_keyframe -> getTrackingParent ( ) -> id
>1716	PtrMemberAccess	new_keyframe -> getTrackingParent ( ) -> id
>1717	Identifier	id
>1718	CallExpression	new_keyframe -> getTrackingParent ( )
>1719	ArgumentList	 
>1720	Callee	new_keyframe -> getTrackingParent
>1721	PtrMemberAccess	new_keyframe -> getTrackingParent
>1722	Identifier	getTrackingParent
>1723	Identifier	new_keyframe
>1724	Argument	new_keyframe -> id ( )
>1725	CallExpression	new_keyframe -> id ( )
>1726	ArgumentList	 
>1727	Callee	new_keyframe -> id
>1728	PtrMemberAccess	new_keyframe -> id
>1729	Identifier	id
>1730	Identifier	new_keyframe
>1731	Argument	activeKeyFrame -> id ( )
>1732	CallExpression	activeKeyFrame -> id ( )
>1733	ArgumentList	 
>1734	Callee	activeKeyFrame -> id
>1735	PtrMemberAccess	activeKeyFrame -> id
>1736	Identifier	id
>1737	Identifier	activeKeyFrame
>1738	Argument	\"WARNING
>1739	PrimaryExpression	\"WARNING
>1740	Callee	printf
>1741	Identifier	printf
>1742	Condition	 
>1743	EqualityExpression	new_keyframe -> getTrackingParent ( ) != activeKeyFrame
>1744	Identifier	activeKeyFrame
>1745	CallExpression	new_keyframe -> getTrackingParent ( )
>1746	ArgumentList	 
>1747	Callee	new_keyframe -> getTrackingParent
>1748	PtrMemberAccess	new_keyframe -> getTrackingParent
>1749	Identifier	getTrackingParent
>1750	Identifier	new_keyframe
>1751	ExpressionStatement	 
>1752	AssignmentExpr	runningStats . num_prop_merged = 0
>1753	PrimaryExpression	0
>1754	MemberAccess	runningStats . num_prop_merged
>1755	Identifier	num_prop_merged
>1756	Identifier	runningStats
>1757	ExpressionStatement	 
>1758	AssignmentExpr	runningStats . num_prop_created = 0
>1759	PrimaryExpression	0
>1760	MemberAccess	runningStats . num_prop_created
>1761	Identifier	num_prop_created
>1762	Identifier	runningStats
>1763	ExpressionStatement	 
>1764	AssignmentExpr	runningStats . num_prop_occluded = 0
>1765	PrimaryExpression	0
>1766	MemberAccess	runningStats . num_prop_occluded
>1767	Identifier	num_prop_occluded
>1768	Identifier	runningStats
>1769	ExpressionStatement	 
>1770	AssignmentExpr	runningStats . num_prop_attempts = 0
>1771	PrimaryExpression	0
>1772	MemberAccess	runningStats . num_prop_attempts
>1773	Identifier	num_prop_attempts
>1774	Identifier	runningStats
>1775	ExpressionStatement	 
>1776	AssignmentExpr	runningStats . num_prop_color_decreased = 0
>1777	PrimaryExpression	0
>1778	MemberAccess	runningStats . num_prop_color_decreased
>1779	Identifier	num_prop_color_decreased
>1780	Identifier	runningStats
>1781	ExpressionStatement	 
>1782	AssignmentExpr	runningStats . num_prop_grad_decreased = 0
>1783	PrimaryExpression	0
>1784	MemberAccess	runningStats . num_prop_grad_decreased
>1785	Identifier	num_prop_grad_decreased
>1786	Identifier	runningStats
>1787	ExpressionStatement	 
>1788	AssignmentExpr	runningStats . num_prop_removed_validity = 0
>1789	PrimaryExpression	0
>1790	MemberAccess	runningStats . num_prop_removed_validity
>1791	Identifier	num_prop_removed_validity
>1792	Identifier	runningStats
>1793	ExpressionStatement	 
>1794	AssignmentExpr	runningStats . num_prop_removed_colorDiff = 0
>1795	PrimaryExpression	0
>1796	MemberAccess	runningStats . num_prop_removed_colorDiff
>1797	Identifier	num_prop_removed_colorDiff
>1798	Identifier	runningStats
>1799	ExpressionStatement	 
>1800	AssignmentExpr	runningStats . num_prop_removed_out_of_bounds = 0
>1801	PrimaryExpression	0
>1802	MemberAccess	runningStats . num_prop_removed_out_of_bounds
>1803	Identifier	num_prop_removed_out_of_bounds
>1804	Identifier	runningStats
>1911	FunctionDef	DepthMap 
>1912	ParameterList	int yMin , int yMax , RunningStats * stats
>1913	Parameter	 
>1914	Identifier	stats
>1915	ParameterType	RunningStats *
>1916	Parameter	 
>1917	Identifier	yMax
>1918	ParameterType	int
>1919	Parameter	 
>1920	Identifier	yMin
>1921	ParameterType	int
>1922	ReturnType	void
>1923	CompoundStatement	 
>1924	ForStatement	for ( int y = yMin ; y < yMax ; y ++ )
>1925	CompoundStatement	 
>1926	ForStatement	for ( int x = 3 ; x < width - 2 ; x ++ )
>1927	CompoundStatement	 
>1928	IfStatement	if ( ( dest -> blacklisted >= MIN_BLACKLIST && val > VAL_SUM_MIN_FOR_CREATE ) || val > VAL_SUM_MIN_FOR_UNBLACKLIST )
>1929	CompoundStatement	 
>1930	IfStatement	if ( enablePrintDebugInfo )
>1931	ExpressionStatement	 
>1932	IncDecOp	stats -> num_reg_created ++
>1933	IncDec	++
>1934	PtrMemberAccess	stats -> num_reg_created
>1935	Identifier	num_reg_created
>1936	Identifier	stats
>1937	Condition	 
>1938	Identifier	enablePrintDebugInfo
>1939	ExpressionStatement	 
>1940	AssignmentExpr	currentDepthMap [ idx ] = DepthMapPixelHypothesis ( idepthObs , VAR_RANDOM_INIT_INITIAL , 0 )
>1941	CallExpression	DepthMapPixelHypothesis ( idepthObs , VAR_RANDOM_INIT_INITIAL , 0 )
>1942	ArgumentList	idepthObs
>1943	Argument	0
>1944	PrimaryExpression	0
>1945	Argument	VAR_RANDOM_INIT_INITIAL
>1946	Identifier	VAR_RANDOM_INIT_INITIAL
>1947	Argument	idepthObs
>1948	Identifier	idepthObs
>1949	Callee	DepthMapPixelHypothesis
>1950	Identifier	DepthMapPixelHypothesis
>1951	ArrayIndexing	currentDepthMap [ idx ]
>1952	Identifier	idx
>1953	Identifier	currentDepthMap
>1954	ExpressionStatement	 
>1955	AssignmentExpr	idepthObs = UNZERO ( idepthObs )
>1956	CallExpression	UNZERO ( idepthObs )
>1957	ArgumentList	idepthObs
>1958	Argument	idepthObs
>1959	Identifier	idepthObs
>1960	Callee	UNZERO
>1961	Identifier	UNZERO
>1962	Identifier	idepthObs
>1963	IdentifierDeclStatement	 
>1964	IdentifierDecl	idepthObs = sumIdepthObs / sumIVarObs
>1965	AssignmentExpr	idepthObs = sumIdepthObs / sumIVarObs
>1966	MultiplicativeExpression	sumIdepthObs / sumIVarObs
>1967	Identifier	sumIVarObs
>1968	Identifier	sumIdepthObs
>1969	Identifier	idepthObs
>1970	Identifier	idepthObs
>1971	IdentifierDeclType	float
>1972	ForStatement	for ( DepthMapPixelHypothesis * s1 = otherDepthMap + ( x - 2 ) + ( y - 2 ) * width ; s1 < s1max ; s1 += width )
>1973	ForStatement	for ( DepthMapPixelHypothesis * source = s1 ; source < s1 + 5 ; source ++ )
>1974	CompoundStatement	 
>1975	ExpressionStatement	 
>1976	IncDecOp	num ++
>1977	IncDec	++
>1978	Identifier	num
>1979	ExpressionStatement	 
>1980	AssignmentExpr	sumIVarObs += 1.0f / source -> idepth_var
>1981	MultiplicativeExpression	1.0f / source -> idepth_var
>1982	PtrMemberAccess	source -> idepth_var
>1983	Identifier	idepth_var
>1984	Identifier	source
>1985	PrimaryExpression	1.0f
>1986	Identifier	sumIVarObs
>1987	ExpressionStatement	 
>1988	AssignmentExpr	sumIdepthObs += source -> idepth / source -> idepth_var
>1989	MultiplicativeExpression	source -> idepth / source -> idepth_var
>1990	PtrMemberAccess	source -> idepth_var
>1991	Identifier	idepth_var
>1992	Identifier	source
>1993	PtrMemberAccess	source -> idepth
>1994	Identifier	idepth
>1995	Identifier	source
>1996	Identifier	sumIdepthObs
>1997	IfStatement	if ( ! source -> isValid )
>1998	ContinueStatement	 
>1999	Condition	 
>2000	UnaryOp	! source -> isValid
>2001	PtrMemberAccess	source -> isValid
>2002	Identifier	isValid
>2003	Identifier	source
>2004	UnaryOperator	!
>2005	IncDecOp	 
>2006	IncDec	++
>2007	Identifier	source
>2008	Condition	 
>2009	RelationalExpression	source < s1 + 5
>2010	AdditiveExpression	s1 + 5
>2011	PrimaryExpression	5
>2012	Identifier	s1
>2013	Identifier	source
>2014	ForInit	 
>2015	IdentifierDeclStatement	DepthMapPixelHypothesis * source = s1 ;
>2016	IdentifierDecl	* source = s1
>2017	AssignmentExpr	* source = s1
>2018	Identifier	s1
>2019	Identifier	s1
>2020	Identifier	source
>2021	IdentifierDeclType	DepthMapPixelHypothesis *
>2022	AssignmentExpr	 
>2023	Identifier	width
>2024	Identifier	s1
>2025	Condition	 
>2026	RelationalExpression	s1 < s1max
>2027	Identifier	s1max
>2028	Identifier	s1
>2029	ForInit	 
>2030	IdentifierDeclStatement	DepthMapPixelHypothesis * s1 = otherDepthMap + ( x - 2 ) + ( y - 2 ) * width ;
>2031	IdentifierDecl	* s1 = otherDepthMap + ( x - 2 ) + ( y - 2 ) * width
>2032	AssignmentExpr	* s1 = otherDepthMap + ( x - 2 ) + ( y - 2 ) * width
>2033	AdditiveExpression	otherDepthMap + ( x - 2 ) + ( y - 2 ) * width
>2034	AdditiveExpression	( x - 2 ) + ( y - 2 ) * width
>2035	MultiplicativeExpression	( y - 2 ) * width
>2036	Identifier	width
>2037	AdditiveExpression	y - 2
>2038	PrimaryExpression	2
>2039	Identifier	y
>2040	AdditiveExpression	x - 2
>2041	PrimaryExpression	2
>2042	Identifier	x
>2043	Identifier	otherDepthMap
>2044	Identifier	s1
>2045	Identifier	s1
>2046	IdentifierDeclType	DepthMapPixelHypothesis *
>2047	IdentifierDeclStatement	 
>2048	IdentifierDecl	* s1max = otherDepthMap + ( x - 2 ) + ( y + 3 ) * width
>2049	AssignmentExpr	* s1max = otherDepthMap + ( x - 2 ) + ( y + 3 ) * width
>2050	AdditiveExpression	otherDepthMap + ( x - 2 ) + ( y + 3 ) * width
>2051	AdditiveExpression	( x - 2 ) + ( y + 3 ) * width
>2052	MultiplicativeExpression	( y + 3 ) * width
>2053	Identifier	width
>2054	AdditiveExpression	y + 3
>2055	PrimaryExpression	3
>2056	Identifier	y
>2057	AdditiveExpression	x - 2
>2058	PrimaryExpression	2
>2059	Identifier	x
>2060	Identifier	otherDepthMap
>2061	Identifier	s1max
>2062	Identifier	s1max
>2063	IdentifierDeclType	DepthMapPixelHypothesis *
>2064	IdentifierDeclStatement	 
>2065	IdentifierDecl	num = 0
>2066	AssignmentExpr	num = 0
>2067	PrimaryExpression	0
>2068	Identifier	num
>2069	Identifier	num
>2070	IdentifierDeclType	int
>2071	IdentifierDeclStatement	 
>2072	IdentifierDecl	sumIVarObs = 0
>2073	AssignmentExpr	sumIVarObs = 0
>2074	PrimaryExpression	0
>2075	Identifier	sumIVarObs
>2076	Identifier	sumIVarObs
>2077	IdentifierDeclType	float
>2078	IdentifierDecl	sumIdepthObs = 0
>2079	AssignmentExpr	sumIdepthObs = 0
>2080	PrimaryExpression	0
>2081	Identifier	sumIdepthObs
>2082	Identifier	sumIdepthObs
>2083	IdentifierDeclType	float
>2084	Condition	 
>2085	OrExpression	( dest -> blacklisted >= MIN_BLACKLIST && val > VAL_SUM_MIN_FOR_CREATE ) || val > VAL_SUM_MIN_FOR_UNBLACKLIST
>2086	RelationalExpression	val > VAL_SUM_MIN_FOR_UNBLACKLIST
>2087	Identifier	VAL_SUM_MIN_FOR_UNBLACKLIST
>2088	Identifier	val
>2089	AndExpression	dest -> blacklisted >= MIN_BLACKLIST && val > VAL_SUM_MIN_FOR_CREATE
>2090	RelationalExpression	val > VAL_SUM_MIN_FOR_CREATE
>2091	Identifier	VAL_SUM_MIN_FOR_CREATE
>2092	Identifier	val
>2093	RelationalExpression	dest -> blacklisted >= MIN_BLACKLIST
>2094	Identifier	MIN_BLACKLIST
>2095	PtrMemberAccess	dest -> blacklisted
>2096	Identifier	blacklisted
>2097	Identifier	dest
>2098	IdentifierDeclStatement	 
>2099	IdentifierDecl	val = io [ 2 + 2 * width ] - io [ 2 - 3 * width ] - io [ - 3 + 2 * width ] + io [ - 3 - 3 * width ]
>2100	AssignmentExpr	val = io [ 2 + 2 * width ] - io [ 2 - 3 * width ] - io [ - 3 + 2 * width ] + io [ - 3 - 3 * width ]
>2101	AdditiveExpression	io [ 2 + 2 * width ] - io [ 2 - 3 * width ] - io [ - 3 + 2 * width ] + io [ - 3 - 3 * width ]
>2102	AdditiveExpression	io [ 2 - 3 * width ] - io [ - 3 + 2 * width ] + io [ - 3 - 3 * width ]
>2103	AdditiveExpression	io [ - 3 + 2 * width ] + io [ - 3 - 3 * width ]
>2104	ArrayIndexing	io [ - 3 - 3 * width ]
>2105	AdditiveExpression	- 3 - 3 * width
>2106	MultiplicativeExpression	3 * width
>2107	Identifier	width
>2108	PrimaryExpression	3
>2109	UnaryOp	- 3
>2110	PrimaryExpression	3
>2111	UnaryOperator	-
>2112	Identifier	io
>2113	ArrayIndexing	io [ - 3 + 2 * width ]
>2114	AdditiveExpression	- 3 + 2 * width
>2115	MultiplicativeExpression	2 * width
>2116	Identifier	width
>2117	PrimaryExpression	2
>2118	UnaryOp	- 3
>2119	PrimaryExpression	3
>2120	UnaryOperator	-
>2121	Identifier	io
>2122	ArrayIndexing	io [ 2 - 3 * width ]
>2123	AdditiveExpression	2 - 3 * width
>2124	MultiplicativeExpression	3 * width
>2125	Identifier	width
>2126	PrimaryExpression	3
>2127	PrimaryExpression	2
>2128	Identifier	io
>2129	ArrayIndexing	io [ 2 + 2 * width ]
>2130	AdditiveExpression	2 + 2 * width
>2131	MultiplicativeExpression	2 * width
>2132	Identifier	width
>2133	PrimaryExpression	2
>2134	PrimaryExpression	2
>2135	Identifier	io
>2136	Identifier	val
>2137	Identifier	val
>2138	IdentifierDeclType	int
>2139	IdentifierDeclStatement	 
>2140	IdentifierDecl	* io = validityIntegralBuffer + idx
>2141	AssignmentExpr	* io = validityIntegralBuffer + idx
>2142	AdditiveExpression	validityIntegralBuffer + idx
>2143	Identifier	idx
>2144	Identifier	validityIntegralBuffer
>2145	Identifier	io
>2146	Identifier	io
>2147	IdentifierDeclType	int *
>2148	IfStatement	if ( keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_DECREASE )
>2149	ContinueStatement	 
>2150	Condition	 
>2151	RelationalExpression	keyFrameMaxGradBuf [ idx ] < MIN_ABS_GRAD_DECREASE
>2152	Identifier	MIN_ABS_GRAD_DECREASE
>2153	ArrayIndexing	keyFrameMaxGradBuf [ idx ]
>2154	Identifier	idx
>2155	Identifier	keyFrameMaxGradBuf
>2156	IfStatement	if ( dest -> isValid )
>2157	ContinueStatement	 
>2158	Condition	 
>2159	PtrMemberAccess	dest -> isValid
>2160	Identifier	isValid
>2161	Identifier	dest
>2162	IdentifierDeclStatement	 
>2163	IdentifierDecl	* dest = otherDepthMap + idx
>2164	AssignmentExpr	* dest = otherDepthMap + idx
>2165	AdditiveExpression	otherDepthMap + idx
>2166	Identifier	idx
>2167	Identifier	otherDepthMap
>2168	Identifier	dest
>2169	Identifier	dest
>2170	IdentifierDeclType	DepthMapPixelHypothesis *
>2171	IdentifierDeclStatement	 
>2172	IdentifierDecl	idx = x + y * width
>2173	AssignmentExpr	idx = x + y * width
>2174	AdditiveExpression	x + y * width
>2175	MultiplicativeExpression	y * width
>2176	Identifier	width
>2177	Identifier	y
>2178	Identifier	x
>2179	Identifier	idx
>2180	Identifier	idx
>2181	IdentifierDeclType	int
>2182	IncDecOp	 
>2183	IncDec	++
>2184	Identifier	x
>2185	Condition	 
>2186	RelationalExpression	x < width - 2
>2187	AdditiveExpression	width - 2
>2188	PrimaryExpression	2
>2189	Identifier	width
>2190	Identifier	x
>2191	ForInit	 
>2192	IdentifierDeclStatement	int x = 3 ;
>2193	IdentifierDecl	x = 3
>2194	AssignmentExpr	x = 3
>2195	PrimaryExpression	3
>2196	Identifier	x
>2197	Identifier	x
>2198	IdentifierDeclType	int
>2199	IncDecOp	 
>2200	IncDec	++
>2201	Identifier	y
>2202	Condition	 
>2203	RelationalExpression	y < yMax
>2204	Identifier	yMax
>2205	Identifier	y
>2206	ForInit	 
>2207	IdentifierDeclStatement	int y = yMin ;
>2208	IdentifierDecl	y = yMin
>2209	AssignmentExpr	y = yMin
>2210	Identifier	yMin
>2211	Identifier	yMin
>2212	Identifier	y
>2213	IdentifierDeclType	int
>2214	IdentifierDeclStatement	 
>2215	IdentifierDecl	* keyFrameMaxGradBuf = activeKeyFrame -> maxGradients ( 0 )
>2216	AssignmentExpr	* keyFrameMaxGradBuf = activeKeyFrame -> maxGradients ( 0 )
>2217	CallExpression	activeKeyFrame -> maxGradients ( 0 )
>2218	ArgumentList	0
>2219	Argument	0
>2220	PrimaryExpression	0
>2221	Callee	activeKeyFrame -> maxGradients
>2222	PtrMemberAccess	activeKeyFrame -> maxGradients
>2223	Identifier	maxGradients
>2224	Identifier	activeKeyFrame
>2225	Identifier	keyFrameMaxGradBuf
>2226	Identifier	keyFrameMaxGradBuf
>2227	IdentifierDeclType	const float *
>2277	FunctionDef	DepthMap 
>2278	ParameterList	 
>2279	ReturnType	void
>2280	CompoundStatement	 
>2281	IfStatement	if ( enablePrintDebugInfo && printFillHolesStatistics )
>2282	ExpressionStatement	 
>2283	CallExpression	printf ( \"FillHoles (discreteDepth)
>2284	ArgumentList	\"FillHoles (discreteDepth)
>2285	Argument	runningStats . num_reg_created
>2286	MemberAccess	runningStats . num_reg_created
>2287	Identifier	num_reg_created
>2288	Identifier	runningStats
>2289	Argument	\"FillHoles (discreteDepth)
>2290	PrimaryExpression	\"FillHoles (discreteDepth)
>2291	Callee	printf
>2292	Identifier	printf
>2293	Condition	 
>2294	AndExpression	enablePrintDebugInfo && printFillHolesStatistics
>2295	Identifier	printFillHolesStatistics
>2296	Identifier	enablePrintDebugInfo
>2297	ExpressionStatement	 
>2298	CallExpression	threadReducer . reduce ( boost 
>2299	ArgumentList	boost 
>2300	Argument	10
>2301	PrimaryExpression	10
>2302	Argument	height - 2
>2303	AdditiveExpression	height - 2
>2304	PrimaryExpression	2
>2305	Identifier	height
>2306	Argument	3
>2307	PrimaryExpression	3
>2308	Argument	boost 
>2309	CallExpression	boost 
>2310	ArgumentList	& DepthMap 
>2311	Argument	_3
>2312	Identifier	_3
>2313	Argument	_2
>2314	Identifier	_2
>2315	Argument	_1
>2316	Identifier	_1
>2317	Argument	this
>2318	Identifier	this
>2319	Argument	& DepthMap 
>2320	UnaryOp	& DepthMap 
>2321	Identifier	DepthMap 
>2322	UnaryOperator	&
>2323	Callee	boost 
>2324	Identifier	boost 
>2325	Callee	threadReducer . reduce
>2326	MemberAccess	threadReducer . reduce
>2327	Identifier	reduce
>2328	Identifier	threadReducer
>2329	ExpressionStatement	 
>2330	CallExpression	memcpy ( otherDepthMap , currentDepthMap , width * height * sizeof ( DepthMapPixelHypothesis ) )
>2331	ArgumentList	otherDepthMap
>2332	Argument	width * height * sizeof ( DepthMapPixelHypothesis )
>2333	MultiplicativeExpression	width * height * sizeof ( DepthMapPixelHypothesis )
>2334	MultiplicativeExpression	height * sizeof ( DepthMapPixelHypothesis )
>2335	SizeofExpr	sizeof ( DepthMapPixelHypothesis )
>2336	SizeofOperand	DepthMapPixelHypothesis
>2337	Sizeof	sizeof
>2338	Identifier	height
>2339	Identifier	width
>2340	Argument	currentDepthMap
>2341	Identifier	currentDepthMap
>2342	Argument	otherDepthMap
>2343	Identifier	otherDepthMap
>2344	Callee	memcpy
>2345	Identifier	memcpy
>2346	ExpressionStatement	 
>2347	AssignmentExpr	runningStats . num_reg_created = 0
>2348	PrimaryExpression	0
>2349	MemberAccess	runningStats . num_reg_created
>2350	Identifier	num_reg_created
>2351	Identifier	runningStats
>2352	ExpressionStatement	 
>2353	CallExpression	buildRegIntegralBuffer ( )
>2354	ArgumentList	 
>2355	Callee	buildRegIntegralBuffer
>2356	Identifier	buildRegIntegralBuffer
>2375	FunctionDef	DepthMap 
>2376	ParameterList	int yMin , int yMax , RunningStats * stats
>2377	Parameter	 
>2378	Identifier	stats
>2379	ParameterType	RunningStats *
>2380	Parameter	 
>2381	Identifier	yMax
>2382	ParameterType	int
>2383	Parameter	 
>2384	Identifier	yMin
>2385	ParameterType	int
>2386	ReturnType	void
>2387	CompoundStatement	 
>2388	ForStatement	for ( int y = yMin ; y < yMax ; y ++ )
>2389	CompoundStatement	 
>2390	ForStatement	for ( int x = 0 ; x < width ; x ++ )
>2391	CompoundStatement	 
>2392	ExpressionStatement	 
>2393	IncDecOp	ptSrc ++
>2394	IncDec	++
>2395	Identifier	ptSrc
>2396	ExpressionStatement	 
>2397	AssignmentExpr	* ( validityIntegralBufferPT ++ ) = validityIntegralBufferSUM
>2398	Identifier	validityIntegralBufferSUM
>2399	UnaryOp	* ( validityIntegralBufferPT ++ )
>2400	IncDecOp	validityIntegralBufferPT ++
>2401	IncDec	++
>2402	Identifier	validityIntegralBufferPT
>2403	UnaryOperator	*
>2404	IfStatement	if ( ptSrc -> isValid )
>2405	ExpressionStatement	 
>2406	AssignmentExpr	validityIntegralBufferSUM += ptSrc -> validity_counter
>2407	PtrMemberAccess	ptSrc -> validity_counter
>2408	Identifier	validity_counter
>2409	Identifier	ptSrc
>2410	Identifier	validityIntegralBufferSUM
>2411	Condition	 
>2412	PtrMemberAccess	ptSrc -> isValid
>2413	Identifier	isValid
>2414	Identifier	ptSrc
>2415	IncDecOp	 
>2416	IncDec	++
>2417	Identifier	x
>2418	Condition	 
>2419	RelationalExpression	x < width
>2420	Identifier	width
>2421	Identifier	x
>2422	ForInit	 
>2423	IdentifierDeclStatement	int x = 0 ;
>2424	IdentifierDecl	x = 0
>2425	AssignmentExpr	x = 0
>2426	PrimaryExpression	0
>2427	Identifier	x
>2428	Identifier	x
>2429	IdentifierDeclType	int
>2430	IdentifierDeclStatement	 
>2431	IdentifierDecl	validityIntegralBufferSUM = 0
>2432	AssignmentExpr	validityIntegralBufferSUM = 0
>2433	PrimaryExpression	0
>2434	Identifier	validityIntegralBufferSUM
>2435	Identifier	validityIntegralBufferSUM
>2436	IdentifierDeclType	int
>2437	IncDecOp	 
>2438	IncDec	++
>2439	Identifier	y
>2440	Condition	 
>2441	RelationalExpression	y < yMax
>2442	Identifier	yMax
>2443	Identifier	y
>2444	ForInit	 
>2445	IdentifierDeclStatement	int y = yMin ;
>2446	IdentifierDecl	y = yMin
>2447	AssignmentExpr	y = yMin
>2448	Identifier	yMin
>2449	Identifier	yMin
>2450	Identifier	y
>2451	IdentifierDeclType	int
>2452	IdentifierDeclStatement	 
>2453	IdentifierDecl	* ptSrc = currentDepthMap + yMin * width
>2454	AssignmentExpr	* ptSrc = currentDepthMap + yMin * width
>2455	AdditiveExpression	currentDepthMap + yMin * width
>2456	MultiplicativeExpression	yMin * width
>2457	Identifier	width
>2458	Identifier	yMin
>2459	Identifier	currentDepthMap
>2460	Identifier	ptSrc
>2461	Identifier	ptSrc
>2462	IdentifierDeclType	DepthMapPixelHypothesis *
>2463	IdentifierDeclStatement	 
>2464	IdentifierDecl	* validityIntegralBufferPT = validityIntegralBuffer + yMin * width
>2465	AssignmentExpr	* validityIntegralBufferPT = validityIntegralBuffer + yMin * width
>2466	AdditiveExpression	validityIntegralBuffer + yMin * width
>2467	MultiplicativeExpression	yMin * width
>2468	Identifier	width
>2469	Identifier	yMin
>2470	Identifier	validityIntegralBuffer
>2471	Identifier	validityIntegralBufferPT
>2472	Identifier	validityIntegralBufferPT
>2473	IdentifierDeclType	int *
>2493	FunctionDef	DepthMap 
>2494	ParameterList	 
>2495	ReturnType	void
>2496	CompoundStatement	 
>2497	ForStatement	for ( int idx = width ; idx < wh ; idx ++ )
>2498	ExpressionStatement	 
>2499	AssignmentExpr	* ( validityIntegralBufferPT_T ++ ) += * ( validityIntegralBufferPT ++ )
>2500	UnaryOp	* ( validityIntegralBufferPT ++ )
>2501	IncDecOp	validityIntegralBufferPT ++
>2502	IncDec	++
>2503	Identifier	validityIntegralBufferPT
>2504	UnaryOperator	*
>2505	UnaryOp	* ( validityIntegralBufferPT_T ++ )
>2506	IncDecOp	validityIntegralBufferPT_T ++
>2507	IncDec	++
>2508	Identifier	validityIntegralBufferPT_T
>2509	UnaryOperator	*
>2510	IncDecOp	 
>2511	IncDec	++
>2512	Identifier	idx
>2513	Condition	 
>2514	RelationalExpression	idx < wh
>2515	Identifier	wh
>2516	Identifier	idx
>2517	ForInit	 
>2518	IdentifierDeclStatement	int idx = width ;
>2519	IdentifierDecl	idx = width
>2520	AssignmentExpr	idx = width
>2521	Identifier	width
>2522	Identifier	width
>2523	Identifier	idx
>2524	IdentifierDeclType	int
>2525	IdentifierDeclStatement	 
>2526	IdentifierDecl	wh = height * width
>2527	AssignmentExpr	wh = height * width
>2528	MultiplicativeExpression	height * width
>2529	Identifier	width
>2530	Identifier	height
>2531	Identifier	wh
>2532	Identifier	wh
>2533	IdentifierDeclType	int
>2534	IdentifierDeclStatement	 
>2535	IdentifierDecl	* validityIntegralBufferPT_T = validityIntegralBuffer + width
>2536	AssignmentExpr	* validityIntegralBufferPT_T = validityIntegralBuffer + width
>2537	AdditiveExpression	validityIntegralBuffer + width
>2538	Identifier	width
>2539	Identifier	validityIntegralBuffer
>2540	Identifier	validityIntegralBufferPT_T
>2541	Identifier	validityIntegralBufferPT_T
>2542	IdentifierDeclType	int *
>2543	IdentifierDeclStatement	 
>2544	IdentifierDecl	* validityIntegralBufferPT = validityIntegralBuffer
>2545	AssignmentExpr	* validityIntegralBufferPT = validityIntegralBuffer
>2546	Identifier	validityIntegralBuffer
>2547	Identifier	validityIntegralBuffer
>2548	Identifier	validityIntegralBufferPT
>2549	IdentifierDeclType	int *
>2550	ExpressionStatement	 
>2551	CallExpression	threadReducer . reduce ( boost 
>2552	ArgumentList	boost 
>2553	Argument	height
>2554	Identifier	height
>2555	Argument	0
>2556	PrimaryExpression	0
>2557	Argument	boost 
>2558	CallExpression	boost 
>2559	ArgumentList	& DepthMap 
>2560	Argument	_3
>2561	Identifier	_3
>2562	Argument	_2
>2563	Identifier	_2
>2564	Argument	_1
>2565	Identifier	_1
>2566	Argument	this
>2567	Identifier	this
>2568	Argument	& DepthMap 
>2569	UnaryOp	& DepthMap 
>2570	Identifier	DepthMap 
>2571	UnaryOperator	&
>2572	Callee	boost 
>2573	Identifier	boost 
>2574	Callee	threadReducer . reduce
>2575	MemberAccess	threadReducer . reduce
>2576	Identifier	reduce
>2577	Identifier	threadReducer
>2599	FunctionDef	DepthMap 
>2600	ParameterList	int validityTH , int yMin , int yMax , RunningStats * stats
>2601	Parameter	 
>2602	Identifier	stats
>2603	ParameterType	RunningStats *
>2604	Parameter	 
>2605	Identifier	yMax
>2606	ParameterType	int
>2607	Parameter	 
>2608	Identifier	yMin
>2609	ParameterType	int
>2610	Parameter	 
>2611	Identifier	validityTH
>2612	ParameterType	int
>2613	ReturnType	void
>2614	CompoundStatement	 
>2615	ForStatement	for ( int y = yMin ; y < yMax ; y ++ )
>2616	CompoundStatement	 
>2617	ForStatement	for ( int x = regularize_radius ; x < width - regularize_radius ; x ++ )
>2618	CompoundStatement	 
>2619	IfStatement	if ( enablePrintDebugInfo )
>2620	ExpressionStatement	 
>2621	IncDecOp	stats -> num_reg_smeared ++
>2622	IncDec	++
>2623	PtrMemberAccess	stats -> num_reg_smeared
>2624	Identifier	num_reg_smeared
>2625	Identifier	stats
>2626	Condition	 
>2627	Identifier	enablePrintDebugInfo
>2628	ExpressionStatement	 
>2629	AssignmentExpr	dest -> idepth_var_smoothed = 1.0f / sumIvar
>2630	MultiplicativeExpression	1.0f / sumIvar
>2631	Identifier	sumIvar
>2632	PrimaryExpression	1.0f
>2633	PtrMemberAccess	dest -> idepth_var_smoothed
>2634	Identifier	idepth_var_smoothed
>2635	Identifier	dest
>2636	ExpressionStatement	 
>2637	AssignmentExpr	dest -> idepth_smoothed = sum
>2638	Identifier	sum
>2639	PtrMemberAccess	dest -> idepth_smoothed
>2640	Identifier	idepth_smoothed
>2641	Identifier	dest
>2642	ExpressionStatement	 
>2643	AssignmentExpr	sum = UNZERO ( sum )
>2644	CallExpression	UNZERO ( sum )
>2645	ArgumentList	sum
>2646	Argument	sum
>2647	Identifier	sum
>2648	Callee	UNZERO
>2649	Identifier	UNZERO
>2650	Identifier	sum
>2651	ExpressionStatement	 
>2652	AssignmentExpr	sum = sum / sumIvar
>2653	MultiplicativeExpression	sum / sumIvar
>2654	Identifier	sumIvar
>2655	Identifier	sum
>2656	Identifier	sum
>2657	IfStatement	if ( removeOcclusions )
>2658	CompoundStatement	 
>2659	IfStatement	if ( numOccluding > numNotOccluding )
>2660	CompoundStatement	 
>2661	ContinueStatement	 
>2662	IfStatement	if ( enablePrintDebugInfo )
>2663	ExpressionStatement	 
>2664	IncDecOp	stats -> num_reg_deleted_occluded ++
>2665	IncDec	++
>2666	PtrMemberAccess	stats -> num_reg_deleted_occluded
>2667	Identifier	num_reg_deleted_occluded
>2668	Identifier	stats
>2669	Condition	 
>2670	Identifier	enablePrintDebugInfo
>2671	ExpressionStatement	 
>2672	AssignmentExpr	dest -> isValid = false
>2673	Identifier	false
>2674	PtrMemberAccess	dest -> isValid
>2675	Identifier	isValid
>2676	Identifier	dest
>2677	Condition	 
>2678	RelationalExpression	numOccluding > numNotOccluding
>2679	Identifier	numNotOccluding
>2680	Identifier	numOccluding
>2681	Condition	 
>2682	Identifier	removeOcclusions
>2683	IfStatement	if ( val_sum < validityTH )
>2684	CompoundStatement	 
>2685	ContinueStatement	 
>2686	IfStatement	if ( enablePrintDebugInfo )
>2687	ExpressionStatement	 
>2688	IncDecOp	stats -> num_reg_setBlacklisted ++
>2689	IncDec	++
>2690	PtrMemberAccess	stats -> num_reg_setBlacklisted
>2691	Identifier	num_reg_setBlacklisted
>2692	Identifier	stats
>2693	Condition	 
>2694	Identifier	enablePrintDebugInfo
>2695	ExpressionStatement	 
>2696	IncDecOp	dest -> blacklisted --
>2697	IncDec	--
>2698	PtrMemberAccess	dest -> blacklisted
>2699	Identifier	blacklisted
>2700	Identifier	dest
>2701	IfStatement	if ( enablePrintDebugInfo )
>2702	ExpressionStatement	 
>2703	IncDecOp	stats -> num_reg_deleted_secondary ++
>2704	IncDec	++
>2705	PtrMemberAccess	stats -> num_reg_deleted_secondary
>2706	Identifier	num_reg_deleted_secondary
>2707	Identifier	stats
>2708	Condition	 
>2709	Identifier	enablePrintDebugInfo
>2710	ExpressionStatement	 
>2711	AssignmentExpr	dest -> isValid = false
>2712	Identifier	false
>2713	PtrMemberAccess	dest -> isValid
>2714	Identifier	isValid
>2715	Identifier	dest
>2716	Condition	 
>2717	RelationalExpression	val_sum < validityTH
>2718	Identifier	validityTH
>2719	Identifier	val_sum
>2720	ForStatement	for ( int dx = - regularize_radius ; dx <= regularize_radius ; dx ++ )
>2721	ForStatement	for ( int dy = - regularize_radius ; dy <= regularize_radius ; dy ++ )
>2722	CompoundStatement	 
>2723	ExpressionStatement	 
>2724	AssignmentExpr	sumIvar += ivar
>2725	Identifier	ivar
>2726	Identifier	sumIvar
>2727	ExpressionStatement	 
>2728	AssignmentExpr	sum += source -> idepth * ivar
>2729	MultiplicativeExpression	source -> idepth * ivar
>2730	Identifier	ivar
>2731	PtrMemberAccess	source -> idepth
>2732	Identifier	idepth
>2733	Identifier	source
>2734	Identifier	sum
>2735	IdentifierDeclStatement	 
>2736	IdentifierDecl	ivar = 1.0f / ( source -> idepth_var + distFac )
>2737	AssignmentExpr	ivar = 1.0f / ( source -> idepth_var + distFac )
>2738	MultiplicativeExpression	1.0f / ( source -> idepth_var + distFac )
>2739	AdditiveExpression	source -> idepth_var + distFac
>2740	Identifier	distFac
>2741	PtrMemberAccess	source -> idepth_var
>2742	Identifier	idepth_var
>2743	Identifier	source
>2744	PrimaryExpression	1.0f
>2745	Identifier	ivar
>2746	Identifier	ivar
>2747	IdentifierDeclType	float
>2748	IdentifierDeclStatement	 
>2749	IdentifierDecl	distFac = ( float ) ( dx * dx + dy * dy ) * regDistVar
>2750	AssignmentExpr	distFac = ( float ) ( dx * dx + dy * dy ) * regDistVar
>2751	MultiplicativeExpression	( float ) ( dx * dx + dy * dy ) * regDistVar
>2752	Identifier	regDistVar
>2753	CastExpression	( float ) ( dx * dx + dy * dy )
>2754	AdditiveExpression	dx * dx + dy * dy
>2755	MultiplicativeExpression	dy * dy
>2756	Identifier	dy
>2757	Identifier	dy
>2758	MultiplicativeExpression	dx * dx
>2759	Identifier	dx
>2760	Identifier	dx
>2761	CastTarget	float
>2762	Identifier	distFac
>2763	Identifier	distFac
>2764	IdentifierDeclType	float
>2765	IfStatement	if ( removeOcclusions )
>2766	ExpressionStatement	 
>2767	IncDecOp	numNotOccluding ++
>2768	IncDec	++
>2769	Identifier	numNotOccluding
>2770	Condition	 
>2771	Identifier	removeOcclusions
>2772	ExpressionStatement	 
>2773	AssignmentExpr	val_sum += source -> validity_counter
>2774	PtrMemberAccess	source -> validity_counter
>2775	Identifier	validity_counter
>2776	Identifier	source
>2777	Identifier	val_sum
>2778	IfStatement	if ( DIFF_FAC_SMOOTHING * diff * diff > source -> idepth_var + destRead -> idepth_var )
>2779	CompoundStatement	 
>2780	ContinueStatement	 
>2781	IfStatement	if ( removeOcclusions )
>2782	CompoundStatement	 
>2783	IfStatement	if ( source -> idepth > destRead -> idepth )
>2784	ExpressionStatement	 
>2785	IncDecOp	numOccluding ++
>2786	IncDec	++
>2787	Identifier	numOccluding
>2788	Condition	 
>2789	RelationalExpression	source -> idepth > destRead -> idepth
>2790	PtrMemberAccess	destRead -> idepth
>2791	Identifier	idepth
>2792	Identifier	destRead
>2793	PtrMemberAccess	source -> idepth
>2794	Identifier	idepth
>2795	Identifier	source
>2796	Condition	 
>2797	Identifier	removeOcclusions
>2798	Condition	 
>2799	RelationalExpression	DIFF_FAC_SMOOTHING * diff * diff > source -> idepth_var + destRead -> idepth_var
>2800	AdditiveExpression	source -> idepth_var + destRead -> idepth_var
>2801	PtrMemberAccess	destRead -> idepth_var
>2802	Identifier	idepth_var
>2803	Identifier	destRead
>2804	PtrMemberAccess	source -> idepth_var
>2805	Identifier	idepth_var
>2806	Identifier	source
>2807	MultiplicativeExpression	DIFF_FAC_SMOOTHING * diff * diff
>2808	MultiplicativeExpression	diff * diff
>2809	Identifier	diff
>2810	Identifier	diff
>2811	Identifier	DIFF_FAC_SMOOTHING
>2812	IdentifierDeclStatement	 
>2813	IdentifierDecl	diff = source -> idepth - destRead -> idepth
>2814	AssignmentExpr	diff = source -> idepth - destRead -> idepth
>2815	AdditiveExpression	source -> idepth - destRead -> idepth
>2816	PtrMemberAccess	destRead -> idepth
>2817	Identifier	idepth
>2818	Identifier	destRead
>2819	PtrMemberAccess	source -> idepth
>2820	Identifier	idepth
>2821	Identifier	source
>2822	Identifier	diff
>2823	Identifier	diff
>2824	IdentifierDeclType	float
>2825	IfStatement	if ( ! source -> isValid )
>2826	ContinueStatement	 
>2827	Condition	 
>2828	UnaryOp	! source -> isValid
>2829	PtrMemberAccess	source -> isValid
>2830	Identifier	isValid
>2831	Identifier	source
>2832	UnaryOperator	!
>2833	IdentifierDeclStatement	 
>2834	IdentifierDecl	* source = destRead + dx + dy * width
>2835	AssignmentExpr	* source = destRead + dx + dy * width
>2836	AdditiveExpression	destRead + dx + dy * width
>2837	AdditiveExpression	dx + dy * width
>2838	MultiplicativeExpression	dy * width
>2839	Identifier	width
>2840	Identifier	dy
>2841	Identifier	dx
>2842	Identifier	destRead
>2843	Identifier	source
>2844	Identifier	source
>2845	IdentifierDeclType	DepthMapPixelHypothesis *
>2846	IncDecOp	 
>2847	IncDec	++
>2848	Identifier	dy
>2849	Condition	 
>2850	RelationalExpression	dy <= regularize_radius
>2851	Identifier	regularize_radius
>2852	Identifier	dy
>2853	ForInit	 
>2854	IdentifierDeclStatement	int dy = - regularize_radius ;
>2855	IdentifierDecl	dy = - regularize_radius
>2856	AssignmentExpr	dy = - regularize_radius
>2857	UnaryOp	- regularize_radius
>2858	Identifier	regularize_radius
>2859	UnaryOperator	-
>2860	Identifier	dy
>2861	Identifier	dy
>2862	IdentifierDeclType	int
>2863	IncDecOp	 
>2864	IncDec	++
>2865	Identifier	dx
>2866	Condition	 
>2867	RelationalExpression	dx <= regularize_radius
>2868	Identifier	regularize_radius
>2869	Identifier	dx
>2870	ForInit	 
>2871	IdentifierDeclStatement	int dx = - regularize_radius ;
>2872	IdentifierDecl	dx = - regularize_radius
>2873	AssignmentExpr	dx = - regularize_radius
>2874	UnaryOp	- regularize_radius
>2875	Identifier	regularize_radius
>2876	UnaryOperator	-
>2877	Identifier	dx
>2878	Identifier	dx
>2879	IdentifierDeclType	int
>2880	IdentifierDeclStatement	 
>2881	IdentifierDecl	numNotOccluding = 0
>2882	AssignmentExpr	numNotOccluding = 0
>2883	PrimaryExpression	0
>2884	Identifier	numNotOccluding
>2885	Identifier	numNotOccluding
>2886	IdentifierDeclType	int
>2887	IdentifierDecl	numOccluding = 0
>2888	AssignmentExpr	numOccluding = 0
>2889	PrimaryExpression	0
>2890	Identifier	numOccluding
>2891	Identifier	numOccluding
>2892	IdentifierDeclType	int
>2893	IdentifierDeclStatement	 
>2894	IdentifierDecl	sumIvar = 0
>2895	AssignmentExpr	sumIvar = 0
>2896	PrimaryExpression	0
>2897	Identifier	sumIvar
>2898	Identifier	sumIvar
>2899	IdentifierDeclType	float
>2900	IdentifierDecl	val_sum = 0
>2901	AssignmentExpr	val_sum = 0
>2902	PrimaryExpression	0
>2903	Identifier	val_sum
>2904	Identifier	val_sum
>2905	IdentifierDeclType	float
>2906	IdentifierDecl	sum = 0
>2907	AssignmentExpr	sum = 0
>2908	PrimaryExpression	0
>2909	Identifier	sum
>2910	Identifier	sum
>2911	IdentifierDeclType	float
>2912	IfStatement	if ( ! destRead -> isValid )
>2913	ContinueStatement	 
>2914	Condition	 
>2915	UnaryOp	! destRead -> isValid
>2916	PtrMemberAccess	destRead -> isValid
>2917	Identifier	isValid
>2918	Identifier	destRead
>2919	UnaryOperator	!
>2920	IfStatement	if ( enablePrintDebugInfo && destRead -> blacklisted < MIN_BLACKLIST )
>2921	ExpressionStatement	 
>2922	IncDecOp	stats -> num_reg_blacklisted ++
>2923	IncDec	++
>2924	PtrMemberAccess	stats -> num_reg_blacklisted
>2925	Identifier	num_reg_blacklisted
>2926	Identifier	stats
>2927	Condition	 
>2928	AndExpression	enablePrintDebugInfo && destRead -> blacklisted < MIN_BLACKLIST
>2929	RelationalExpression	destRead -> blacklisted < MIN_BLACKLIST
>2930	Identifier	MIN_BLACKLIST
>2931	PtrMemberAccess	destRead -> blacklisted
>2932	Identifier	blacklisted
>2933	Identifier	destRead
>2934	Identifier	enablePrintDebugInfo
>2935	IdentifierDeclStatement	 
>2936	IdentifierDecl	* destRead = otherDepthMap + x + y * width
>2937	AssignmentExpr	* destRead = otherDepthMap + x + y * width
>2938	AdditiveExpression	otherDepthMap + x + y * width
>2939	AdditiveExpression	x + y * width
>2940	MultiplicativeExpression	y * width
>2941	Identifier	width
>2942	Identifier	y
>2943	Identifier	x
>2944	Identifier	otherDepthMap
>2945	Identifier	destRead
>2946	Identifier	destRead
>2947	IdentifierDeclType	DepthMapPixelHypothesis *
>2948	IdentifierDeclStatement	 
>2949	IdentifierDecl	* dest = currentDepthMap + x + y * width
>2950	AssignmentExpr	* dest = currentDepthMap + x + y * width
>2951	AdditiveExpression	currentDepthMap + x + y * width
>2952	AdditiveExpression	x + y * width
>2953	MultiplicativeExpression	y * width
>2954	Identifier	width
>2955	Identifier	y
>2956	Identifier	x
>2957	Identifier	currentDepthMap
>2958	Identifier	dest
>2959	Identifier	dest
>2960	IdentifierDeclType	DepthMapPixelHypothesis *
>2961	IncDecOp	 
>2962	IncDec	++
>2963	Identifier	x
>2964	Condition	 
>2965	RelationalExpression	x < width - regularize_radius
>2966	AdditiveExpression	width - regularize_radius
>2967	Identifier	regularize_radius
>2968	Identifier	width
>2969	Identifier	x
>2970	ForInit	 
>2971	IdentifierDeclStatement	int x = regularize_radius ;
>2972	IdentifierDecl	x = regularize_radius
>2973	AssignmentExpr	x = regularize_radius
>2974	Identifier	regularize_radius
>2975	Identifier	regularize_radius
>2976	Identifier	x
>2977	IdentifierDeclType	int
>2978	IncDecOp	 
>2979	IncDec	++
>2980	Identifier	y
>2981	Condition	 
>2982	RelationalExpression	y < yMax
>2983	Identifier	yMax
>2984	Identifier	y
>2985	ForInit	 
>2986	IdentifierDeclStatement	int y = yMin ;
>2987	IdentifierDecl	y = yMin
>2988	AssignmentExpr	y = yMin
>2989	Identifier	yMin
>2990	Identifier	yMin
>2991	Identifier	y
>2992	IdentifierDeclType	int
>2993	IdentifierDeclStatement	 
>2994	IdentifierDecl	regDistVar = REG_DIST_VAR
>2995	AssignmentExpr	regDistVar = REG_DIST_VAR
>2996	Identifier	REG_DIST_VAR
>2997	Identifier	REG_DIST_VAR
>2998	Identifier	regDistVar
>2999	IdentifierDeclType	const float
>3000	IdentifierDeclStatement	 
>3001	IdentifierDecl	regularize_radius = 2
>3002	AssignmentExpr	regularize_radius = 2
>3003	PrimaryExpression	2
>3004	Identifier	regularize_radius
>3005	Identifier	regularize_radius
>3006	IdentifierDeclType	const int
>3062	FunctionDef	DepthMap 
>3063	ParameterList	bool removeOcclusions , int validityTH
>3064	Parameter	 
>3065	Identifier	validityTH
>3066	ParameterType	int
>3067	Parameter	 
>3068	Identifier	removeOcclusions
>3069	ParameterType	bool
>3070	ReturnType	void
>3071	CompoundStatement	 
>3072	IfStatement	if ( enablePrintDebugInfo && printRegularizeStatistics )
>3073	ExpressionStatement	 
>3074	CallExpression	printf ( \"REGULARIZE (%d)
>3075	ArgumentList	\"REGULARIZE (%d)
>3076	Argument	runningStats . num_reg_created
>3077	MemberAccess	runningStats . num_reg_created
>3078	Identifier	num_reg_created
>3079	Identifier	runningStats
>3080	Argument	runningStats . num_reg_deleted_occluded
>3081	MemberAccess	runningStats . num_reg_deleted_occluded
>3082	Identifier	num_reg_deleted_occluded
>3083	Identifier	runningStats
>3084	Argument	runningStats . num_reg_deleted_secondary
>3085	MemberAccess	runningStats . num_reg_deleted_secondary
>3086	Identifier	num_reg_deleted_secondary
>3087	Identifier	runningStats
>3088	Argument	runningStats . num_reg_setBlacklisted
>3089	MemberAccess	runningStats . num_reg_setBlacklisted
>3090	Identifier	num_reg_setBlacklisted
>3091	Identifier	runningStats
>3092	Argument	runningStats . num_reg_blacklisted
>3093	MemberAccess	runningStats . num_reg_blacklisted
>3094	Identifier	num_reg_blacklisted
>3095	Identifier	runningStats
>3096	Argument	runningStats . num_reg_smeared
>3097	MemberAccess	runningStats . num_reg_smeared
>3098	Identifier	num_reg_smeared
>3099	Identifier	runningStats
>3100	Argument	activeKeyFrame -> id ( )
>3101	CallExpression	activeKeyFrame -> id ( )
>3102	ArgumentList	 
>3103	Callee	activeKeyFrame -> id
>3104	PtrMemberAccess	activeKeyFrame -> id
>3105	Identifier	id
>3106	Identifier	activeKeyFrame
>3107	Argument	\"REGULARIZE (%d)
>3108	PrimaryExpression	\"REGULARIZE (%d)
>3109	Callee	printf
>3110	Identifier	printf
>3111	Condition	 
>3112	AndExpression	enablePrintDebugInfo && printRegularizeStatistics
>3113	Identifier	printRegularizeStatistics
>3114	Identifier	enablePrintDebugInfo
>3115	ExpressionStatement	 
>3116	Statement	 
>3117	Statement	 
>3118	Statement	 
>3119	Statement	 
>3120	Statement	 
>3121	Statement	 
>3122	Statement	 
>3123	Statement	 
>3124	Statement	 
>3125	Statement	 
>3126	Statement	 
>3127	Statement	 
>3128	Statement	 
>3129	Statement	 
>3130	Statement	 
>3131	Statement	 
>3132	Statement	 
>3133	Statement	 
>3134	Statement	 
>3135	Statement	 
>3136	Statement	 
>3137	Statement	 
>3138	Statement	 
>3139	Statement	 
>3140	Statement	 
>3141	Statement	 
>3142	Statement	 
>3143	Statement	 
>3144	Statement	 
>3145	Statement	 
>3146	Statement	 
>3147	Statement	 
>3148	Statement	 
>3149	Statement	 
>3150	ExpressionStatement	 
>3151	Statement	 
>3152	Statement	 
>3153	Statement	 
>3154	Statement	 
>3155	Statement	 
>3156	Statement	 
>3157	Statement	 
>3158	Statement	 
>3159	Statement	 
>3160	Statement	 
>3161	Statement	 
>3162	Statement	 
>3163	Statement	 
>3164	Statement	 
>3165	Statement	 
>3166	Statement	 
>3167	Statement	 
>3168	Statement	 
>3169	Statement	 
>3170	Statement	 
>3171	Statement	 
>3172	Statement	 
>3173	Statement	 
>3174	Statement	 
>3175	Statement	 
>3176	Statement	 
>3177	Statement	 
>3178	Statement	 
>3179	Statement	 
>3180	Statement	 
>3181	Statement	 
>3182	Statement	 
>3183	Statement	 
>3184	Statement	 
>3185	IfStatement	if ( removeOcclusions )
>3186	ElseStatement	else
>3187	Statement	 
>3188	Statement	 
>3189	Condition	 
>3190	Identifier	removeOcclusions
>3191	ExpressionStatement	 
>3192	CallExpression	memcpy ( otherDepthMap , currentDepthMap , width * height * sizeof ( DepthMapPixelHypothesis ) )
>3193	ArgumentList	otherDepthMap
>3194	Argument	width * height * sizeof ( DepthMapPixelHypothesis )
>3195	MultiplicativeExpression	width * height * sizeof ( DepthMapPixelHypothesis )
>3196	MultiplicativeExpression	height * sizeof ( DepthMapPixelHypothesis )
>3197	SizeofExpr	sizeof ( DepthMapPixelHypothesis )
>3198	SizeofOperand	DepthMapPixelHypothesis
>3199	Sizeof	sizeof
>3200	Identifier	height
>3201	Identifier	width
>3202	Argument	currentDepthMap
>3203	Identifier	currentDepthMap
>3204	Argument	otherDepthMap
>3205	Identifier	otherDepthMap
>3206	Callee	memcpy
>3207	Identifier	memcpy
>3208	ExpressionStatement	 
>3209	AssignmentExpr	runningStats . num_reg_setBlacklisted = 0
>3210	PrimaryExpression	0
>3211	MemberAccess	runningStats . num_reg_setBlacklisted
>3212	Identifier	num_reg_setBlacklisted
>3213	Identifier	runningStats
>3214	ExpressionStatement	 
>3215	AssignmentExpr	runningStats . num_reg_blacklisted = 0
>3216	PrimaryExpression	0
>3217	MemberAccess	runningStats . num_reg_blacklisted
>3218	Identifier	num_reg_blacklisted
>3219	Identifier	runningStats
>3220	ExpressionStatement	 
>3221	AssignmentExpr	runningStats . num_reg_deleted_occluded = 0
>3222	PrimaryExpression	0
>3223	MemberAccess	runningStats . num_reg_deleted_occluded
>3224	Identifier	num_reg_deleted_occluded
>3225	Identifier	runningStats
>3226	ExpressionStatement	 
>3227	AssignmentExpr	runningStats . num_reg_deleted_secondary = 0
>3228	PrimaryExpression	0
>3229	MemberAccess	runningStats . num_reg_deleted_secondary
>3230	Identifier	num_reg_deleted_secondary
>3231	Identifier	runningStats
>3232	ExpressionStatement	 
>3233	AssignmentExpr	runningStats . num_reg_total = 0
>3234	PrimaryExpression	0
>3235	MemberAccess	runningStats . num_reg_total
>3236	Identifier	num_reg_total
>3237	Identifier	runningStats
>3238	ExpressionStatement	 
>3239	AssignmentExpr	runningStats . num_reg_smeared = 0
>3240	PrimaryExpression	0
>3241	MemberAccess	runningStats . num_reg_smeared
>3242	Identifier	num_reg_smeared
>3243	Identifier	runningStats
>3266	FunctionDef	DepthMap 
>3267	ParameterList	Frame * new_frame
>3268	Parameter	 
>3269	Identifier	new_frame
>3270	ParameterType	Frame *
>3271	ReturnType	void
>3272	CompoundStatement	 
>3273	ExpressionStatement	 
>3274	CallExpression	activeKeyFrame -> setDepth ( currentDepthMap )
>3275	ArgumentList	currentDepthMap
>3276	Argument	currentDepthMap
>3277	Identifier	currentDepthMap
>3278	Callee	activeKeyFrame -> setDepth
>3279	PtrMemberAccess	activeKeyFrame -> setDepth
>3280	Identifier	setDepth
>3281	Identifier	activeKeyFrame
>3282	ForStatement	for ( int y = 1 ; y < height - 1 ; y ++ )
>3283	CompoundStatement	 
>3284	ForStatement	for ( int x = 1 ; x < width - 1 ; x ++ )
>3285	CompoundStatement	 
>3286	IfStatement	if ( maxGradients [ x + y * width ] > MIN_ABS_GRAD_CREATE )
>3287	ElseStatement	else
>3288	CompoundStatement	 
>3289	ExpressionStatement	 
>3290	AssignmentExpr	currentDepthMap [ x + y * width ] . blacklisted = 0
>3291	PrimaryExpression	0
>3292	MemberAccess	currentDepthMap [ x + y * width ] . blacklisted
>3293	Identifier	blacklisted
>3294	ArrayIndexing	currentDepthMap [ x + y * width ]
>3295	AdditiveExpression	x + y * width
>3296	MultiplicativeExpression	y * width
>3297	Identifier	width
>3298	Identifier	y
>3299	Identifier	x
>3300	Identifier	currentDepthMap
>3301	ExpressionStatement	 
>3302	AssignmentExpr	currentDepthMap [ x + y * width ] . isValid = false
>3303	Identifier	false
>3304	MemberAccess	currentDepthMap [ x + y * width ] . isValid
>3305	Identifier	isValid
>3306	ArrayIndexing	currentDepthMap [ x + y * width ]
>3307	AdditiveExpression	x + y * width
>3308	MultiplicativeExpression	y * width
>3309	Identifier	width
>3310	Identifier	y
>3311	Identifier	x
>3312	Identifier	currentDepthMap
>3313	CompoundStatement	 
>3314	ExpressionStatement	 
>3315	AssignmentExpr	currentDepthMap [ x + y * width ] = DepthMapPixelHypothesis ( idepth , idepth , VAR_RANDOM_INIT_INITIAL , \
>3316	CallExpression	DepthMapPixelHypothesis ( idepth , idepth , VAR_RANDOM_INIT_INITIAL , VAR_RANDOM_INIT_INITIAL , 20 )
>3317	ArgumentList	idepth
>3318	Argument	20
>3319	PrimaryExpression	20
>3320	Argument	VAR_RANDOM_INIT_INITIAL
>3321	Identifier	VAR_RANDOM_INIT_INITIAL
>3322	Argument	VAR_RANDOM_INIT_INITIAL
>3323	Identifier	VAR_RANDOM_INIT_INITIAL
>3324	Argument	idepth
>3325	Identifier	idepth
>3326	Argument	idepth
>3327	Identifier	idepth
>3328	Callee	DepthMapPixelHypothesis
>3329	Identifier	DepthMapPixelHypothesis
>3330	ArrayIndexing	currentDepthMap [ x + y * width ]
>3331	AdditiveExpression	x + y * width
>3332	MultiplicativeExpression	y * width
>3333	Identifier	width
>3334	Identifier	y
>3335	Identifier	x
>3336	Identifier	currentDepthMap
>3337	IdentifierDeclStatement	 
>3338	IdentifierDecl	idepth = 0.5f + 1.0f * ( ( rand ( ) % 100001 ) / 100000.0f )
>3339	AssignmentExpr	idepth = 0.5f + 1.0f * ( ( rand ( ) % 100001 ) / 100000.0f )
>3340	AdditiveExpression	0.5f + 1.0f * ( ( rand ( ) % 100001 ) / 100000.0f )
>3341	MultiplicativeExpression	1.0f * ( ( rand ( ) % 100001 ) / 100000.0f )
>3342	MultiplicativeExpression	( rand ( ) % 100001 ) / 100000.0f
>3343	PrimaryExpression	100000.0f
>3344	MultiplicativeExpression	rand ( ) % 100001
>3345	PrimaryExpression	100001
>3346	CallExpression	rand ( )
>3347	ArgumentList	 
>3348	Callee	rand
>3349	Identifier	rand
>3350	PrimaryExpression	1.0f
>3351	PrimaryExpression	0.5f
>3352	Identifier	idepth
>3353	Identifier	idepth
>3354	IdentifierDeclType	float
>3355	Condition	 
>3356	RelationalExpression	maxGradients [ x + y * width ] > MIN_ABS_GRAD_CREATE
>3357	Identifier	MIN_ABS_GRAD_CREATE
>3358	ArrayIndexing	maxGradients [ x + y * width ]
>3359	AdditiveExpression	x + y * width
>3360	MultiplicativeExpression	y * width
>3361	Identifier	width
>3362	Identifier	y
>3363	Identifier	x
>3364	Identifier	maxGradients
>3365	IncDecOp	 
>3366	IncDec	++
>3367	Identifier	x
>3368	Condition	 
>3369	RelationalExpression	x < width - 1
>3370	AdditiveExpression	width - 1
>3371	PrimaryExpression	1
>3372	Identifier	width
>3373	Identifier	x
>3374	ForInit	 
>3375	IdentifierDeclStatement	int x = 1 ;
>3376	IdentifierDecl	x = 1
>3377	AssignmentExpr	x = 1
>3378	PrimaryExpression	1
>3379	Identifier	x
>3380	Identifier	x
>3381	IdentifierDeclType	int
>3382	IncDecOp	 
>3383	IncDec	++
>3384	Identifier	y
>3385	Condition	 
>3386	RelationalExpression	y < height - 1
>3387	AdditiveExpression	height - 1
>3388	PrimaryExpression	1
>3389	Identifier	height
>3390	Identifier	y
>3391	ForInit	 
>3392	IdentifierDeclStatement	int y = 1 ;
>3393	IdentifierDecl	y = 1
>3394	AssignmentExpr	y = 1
>3395	PrimaryExpression	1
>3396	Identifier	y
>3397	Identifier	y
>3398	IdentifierDeclType	int
>3399	IdentifierDeclStatement	 
>3400	IdentifierDecl	* maxGradients = new_frame -> maxGradients ( )
>3401	AssignmentExpr	* maxGradients = new_frame -> maxGradients ( )
>3402	CallExpression	new_frame -> maxGradients ( )
>3403	ArgumentList	 
>3404	Callee	new_frame -> maxGradients
>3405	PtrMemberAccess	new_frame -> maxGradients
>3406	Identifier	maxGradients
>3407	Identifier	new_frame
>3408	Identifier	maxGradients
>3409	Identifier	maxGradients
>3410	IdentifierDeclType	const float *
>3411	ExpressionStatement	 
>3412	AssignmentExpr	activeKeyFrameIsReactivated = false
>3413	Identifier	false
>3414	Identifier	activeKeyFrameIsReactivated
>3415	ExpressionStatement	 
>3416	AssignmentExpr	activeKeyFrameImageData = activeKeyFrame -> image ( 0 )
>3417	CallExpression	activeKeyFrame -> image ( 0 )
>3418	ArgumentList	0
>3419	Argument	0
>3420	PrimaryExpression	0
>3421	Callee	activeKeyFrame -> image
>3422	PtrMemberAccess	activeKeyFrame -> image
>3423	Identifier	image
>3424	Identifier	activeKeyFrame
>3425	Identifier	activeKeyFrameImageData
>3426	ExpressionStatement	 
>3427	AssignmentExpr	activeKeyFrame = new_frame
>3428	Identifier	new_frame
>3429	Identifier	activeKeyFrame
>3430	ExpressionStatement	 
>3431	AssignmentExpr	activeKeyFramelock = new_frame -> getActiveLock ( )
>3432	CallExpression	new_frame -> getActiveLock ( )
>3433	ArgumentList	 
>3434	Callee	new_frame -> getActiveLock
>3435	PtrMemberAccess	new_frame -> getActiveLock
>3436	Identifier	getActiveLock
>3437	Identifier	new_frame
>3438	Identifier	activeKeyFramelock
>3471	FunctionDef	DepthMap 
>3472	ParameterList	Frame * kf
>3473	Parameter	 
>3474	Identifier	kf
>3475	ParameterType	Frame *
>3476	ReturnType	void
>3477	CompoundStatement	 
>3478	ExpressionStatement	 
>3479	CallExpression	regularizeDepthMap ( false , VAL_SUM_MIN_FOR_KEEP )
>3480	ArgumentList	false
>3481	Argument	VAL_SUM_MIN_FOR_KEEP
>3482	Identifier	VAL_SUM_MIN_FOR_KEEP
>3483	Argument	false
>3484	Identifier	false
>3485	Callee	regularizeDepthMap
>3486	Identifier	regularizeDepthMap
>3487	ForStatement	for ( int y = 0 ; y < height ; y ++ )
>3488	CompoundStatement	 
>3489	ForStatement	for ( int x = 0 ; x < width ; x ++ )
>3490	CompoundStatement	 
>3491	ExpressionStatement	 
>3492	IncDecOp	pt ++
>3493	IncDec	++
>3494	Identifier	pt
>3495	ExpressionStatement	 
>3496	IncDecOp	validity ++
>3497	IncDec	++
>3498	Identifier	validity
>3499	ExpressionStatement	 
>3500	IncDecOp	idepthVar ++
>3501	IncDec	++
>3502	Identifier	idepthVar
>3503	ExpressionStatement	 
>3504	IncDecOp	idepth ++
>3505	IncDec	++
>3506	Identifier	idepth
>3507	IfStatement	if ( * idepthVar > 0 )
>3508	ElseStatement	else
>3509	CompoundStatement	 
>3510	ExpressionStatement	 
>3511	AssignmentExpr	currentDepthMap [ x + y * width ] . blacklisted = ( * idepthVar == - 2 ) ? MIN_BLACKLIST - 1 
>3512	ConditionalExpression	( * idepthVar == - 2 ) ? MIN_BLACKLIST - 1 
>3513	PrimaryExpression	0
>3514	AdditiveExpression	MIN_BLACKLIST - 1
>3515	PrimaryExpression	1
>3516	Identifier	MIN_BLACKLIST
>3517	Condition	* idepthVar == - 2
>3518	EqualityExpression	* idepthVar == - 2
>3519	UnaryOp	- 2
>3520	PrimaryExpression	2
>3521	UnaryOperator	-
>3522	UnaryOp	* idepthVar
>3523	Identifier	idepthVar
>3524	UnaryOperator	*
>3525	MemberAccess	currentDepthMap [ x + y * width ] . blacklisted
>3526	Identifier	blacklisted
>3527	ArrayIndexing	currentDepthMap [ x + y * width ]
>3528	AdditiveExpression	x + y * width
>3529	MultiplicativeExpression	y * width
>3530	Identifier	width
>3531	Identifier	y
>3532	Identifier	x
>3533	Identifier	currentDepthMap
>3534	ExpressionStatement	 
>3535	AssignmentExpr	currentDepthMap [ x + y * width ] . isValid = false
>3536	Identifier	false
>3537	MemberAccess	currentDepthMap [ x + y * width ] . isValid
>3538	Identifier	isValid
>3539	ArrayIndexing	currentDepthMap [ x + y * width ]
>3540	AdditiveExpression	x + y * width
>3541	MultiplicativeExpression	y * width
>3542	Identifier	width
>3543	Identifier	y
>3544	Identifier	x
>3545	Identifier	currentDepthMap
>3546	CompoundStatement	 
>3547	ExpressionStatement	 
>3548	AssignmentExpr	* pt = DepthMapPixelHypothesis ( * idepth , * idepthVar , * validity )
>3549	CallExpression	DepthMapPixelHypothesis ( * idepth , * idepthVar , * validity )
>3550	ArgumentList	* idepth
>3551	Argument	* validity
>3552	UnaryOp	* validity
>3553	Identifier	validity
>3554	UnaryOperator	*
>3555	Argument	* idepthVar
>3556	UnaryOp	* idepthVar
>3557	Identifier	idepthVar
>3558	UnaryOperator	*
>3559	Argument	* idepth
>3560	UnaryOp	* idepth
>3561	Identifier	idepth
>3562	UnaryOperator	*
>3563	Callee	DepthMapPixelHypothesis
>3564	Identifier	DepthMapPixelHypothesis
>3565	UnaryOp	* pt
>3566	Identifier	pt
>3567	UnaryOperator	*
>3568	Condition	 
>3569	RelationalExpression	* idepthVar > 0
>3570	PrimaryExpression	0
>3571	UnaryOp	* idepthVar
>3572	Identifier	idepthVar
>3573	UnaryOperator	*
>3574	IncDecOp	 
>3575	IncDec	++
>3576	Identifier	x
>3577	Condition	 
>3578	RelationalExpression	x < width
>3579	Identifier	width
>3580	Identifier	x
>3581	ForInit	 
>3582	IdentifierDeclStatement	int x = 0 ;
>3583	IdentifierDecl	x = 0
>3584	AssignmentExpr	x = 0
>3585	PrimaryExpression	0
>3586	Identifier	x
>3587	Identifier	x
>3588	IdentifierDeclType	int
>3589	IncDecOp	 
>3590	IncDec	++
>3591	Identifier	y
>3592	Condition	 
>3593	RelationalExpression	y < height
>3594	Identifier	height
>3595	Identifier	y
>3596	ForInit	 
>3597	IdentifierDeclStatement	int y = 0 ;
>3598	IdentifierDecl	y = 0
>3599	AssignmentExpr	y = 0
>3600	PrimaryExpression	0
>3601	Identifier	y
>3602	Identifier	y
>3603	IdentifierDeclType	int
>3604	ExpressionStatement	 
>3605	AssignmentExpr	activeKeyFrameIsReactivated = true
>3606	Identifier	true
>3607	Identifier	activeKeyFrameIsReactivated
>3608	ExpressionStatement	 
>3609	AssignmentExpr	activeKeyFrameImageData = activeKeyFrame -> image ( 0 )
>3610	CallExpression	activeKeyFrame -> image ( 0 )
>3611	ArgumentList	0
>3612	Argument	0
>3613	PrimaryExpression	0
>3614	Callee	activeKeyFrame -> image
>3615	PtrMemberAccess	activeKeyFrame -> image
>3616	Identifier	image
>3617	Identifier	activeKeyFrame
>3618	Identifier	activeKeyFrameImageData
>3619	ExpressionStatement	 
>3620	AssignmentExpr	activeKeyFrame -> numFramesTrackedOnThis = 0
>3621	PrimaryExpression	0
>3622	PtrMemberAccess	activeKeyFrame -> numFramesTrackedOnThis
>3623	Identifier	numFramesTrackedOnThis
>3624	Identifier	activeKeyFrame
>3625	ExpressionStatement	 
>3626	AssignmentExpr	activeKeyFrame -> numMappedOnThis = 0
>3627	PrimaryExpression	0
>3628	PtrMemberAccess	activeKeyFrame -> numMappedOnThis
>3629	Identifier	numMappedOnThis
>3630	Identifier	activeKeyFrame
>3631	IdentifierDeclStatement	 
>3632	IdentifierDecl	* pt = currentDepthMap
>3633	AssignmentExpr	* pt = currentDepthMap
>3634	Identifier	currentDepthMap
>3635	Identifier	currentDepthMap
>3636	Identifier	pt
>3637	IdentifierDeclType	DepthMapPixelHypothesis *
>3638	IdentifierDeclStatement	 
>3639	IdentifierDecl	* validity = activeKeyFrame -> validity_reAct ( )
>3640	AssignmentExpr	* validity = activeKeyFrame -> validity_reAct ( )
>3641	CallExpression	activeKeyFrame -> validity_reAct ( )
>3642	ArgumentList	 
>3643	Callee	activeKeyFrame -> validity_reAct
>3644	PtrMemberAccess	activeKeyFrame -> validity_reAct
>3645	Identifier	validity_reAct
>3646	Identifier	activeKeyFrame
>3647	Identifier	validity
>3648	Identifier	validity
>3649	IdentifierDeclType	const unsigned char *
>3650	IdentifierDeclStatement	 
>3651	IdentifierDecl	* idepthVar = activeKeyFrame -> idepthVar_reAct ( )
>3652	AssignmentExpr	* idepthVar = activeKeyFrame -> idepthVar_reAct ( )
>3653	CallExpression	activeKeyFrame -> idepthVar_reAct ( )
>3654	ArgumentList	 
>3655	Callee	activeKeyFrame -> idepthVar_reAct
>3656	PtrMemberAccess	activeKeyFrame -> idepthVar_reAct
>3657	Identifier	idepthVar_reAct
>3658	Identifier	activeKeyFrame
>3659	Identifier	idepthVar
>3660	Identifier	idepthVar
>3661	IdentifierDeclType	const float *
>3662	IdentifierDeclStatement	 
>3663	IdentifierDecl	* idepth = activeKeyFrame -> idepth_reAct ( )
>3664	AssignmentExpr	* idepth = activeKeyFrame -> idepth_reAct ( )
>3665	CallExpression	activeKeyFrame -> idepth_reAct ( )
>3666	ArgumentList	 
>3667	Callee	activeKeyFrame -> idepth_reAct
>3668	PtrMemberAccess	activeKeyFrame -> idepth_reAct
>3669	Identifier	idepth_reAct
>3670	Identifier	activeKeyFrame
>3671	Identifier	idepth
>3672	Identifier	idepth
>3673	IdentifierDeclType	const float *
>3674	ExpressionStatement	 
>3675	AssignmentExpr	activeKeyFrame = kf
>3676	Identifier	kf
>3677	Identifier	activeKeyFrame
>3678	ExpressionStatement	 
>3679	AssignmentExpr	activeKeyFramelock = kf -> getActiveLock ( )
>3680	CallExpression	kf -> getActiveLock ( )
>3681	ArgumentList	 
>3682	Callee	kf -> getActiveLock
>3683	PtrMemberAccess	kf -> getActiveLock
>3684	Identifier	getActiveLock
>3685	Identifier	kf
>3686	Identifier	activeKeyFramelock
>3687	ExpressionStatement	 
>3688	CallExpression	assert ( kf -> hasIDepthBeenSet ( ) )
>3689	ArgumentList	kf -> hasIDepthBeenSet ( )
>3690	Argument	kf -> hasIDepthBeenSet ( )
>3691	CallExpression	kf -> hasIDepthBeenSet ( )
>3692	ArgumentList	 
>3693	Callee	kf -> hasIDepthBeenSet
>3694	PtrMemberAccess	kf -> hasIDepthBeenSet
>3695	Identifier	hasIDepthBeenSet
>3696	Identifier	kf
>3697	Callee	assert
>3698	Identifier	assert
>3741	FunctionDef	DepthMap 
>3742	ParameterList	Frame * new_frame
>3743	Parameter	 
>3744	Identifier	new_frame
>3745	ParameterType	Frame *
>3746	ReturnType	void
>3747	CompoundStatement	 
>3748	ExpressionStatement	 
>3749	CallExpression	activeKeyFrame -> setDepth ( currentDepthMap )
>3750	ArgumentList	currentDepthMap
>3751	Argument	currentDepthMap
>3752	Identifier	currentDepthMap
>3753	Callee	activeKeyFrame -> setDepth
>3754	PtrMemberAccess	activeKeyFrame -> setDepth
>3755	Identifier	setDepth
>3756	Identifier	activeKeyFrame
>3757	ForStatement	for ( int y = 0 ; y < height ; y ++ )
>3758	CompoundStatement	 
>3759	ForStatement	for ( int x = 0 ; x < width ; x ++ )
>3760	CompoundStatement	 
>3761	IfStatement	if ( ! isnanf ( idepthValue ) && idepthValue > 0 )
>3762	ElseStatement	else
>3763	CompoundStatement	 
>3764	ExpressionStatement	 
>3765	AssignmentExpr	currentDepthMap [ x + y * width ] . blacklisted = 0
>3766	PrimaryExpression	0
>3767	MemberAccess	currentDepthMap [ x + y * width ] . blacklisted
>3768	Identifier	blacklisted
>3769	ArrayIndexing	currentDepthMap [ x + y * width ]
>3770	AdditiveExpression	x + y * width
>3771	MultiplicativeExpression	y * width
>3772	Identifier	width
>3773	Identifier	y
>3774	Identifier	x
>3775	Identifier	currentDepthMap
>3776	ExpressionStatement	 
>3777	AssignmentExpr	currentDepthMap [ x + y * width ] . isValid = false
>3778	Identifier	false
>3779	MemberAccess	currentDepthMap [ x + y * width ] . isValid
>3780	Identifier	isValid
>3781	ArrayIndexing	currentDepthMap [ x + y * width ]
>3782	AdditiveExpression	x + y * width
>3783	MultiplicativeExpression	y * width
>3784	Identifier	width
>3785	Identifier	y
>3786	Identifier	x
>3787	Identifier	currentDepthMap
>3788	CompoundStatement	 
>3789	ExpressionStatement	 
>3790	AssignmentExpr	currentDepthMap [ x + y * width ] = DepthMapPixelHypothesis ( idepthValue , idepthValue , VAR_GT_INIT_\
>3791	CallExpression	DepthMapPixelHypothesis ( idepthValue , idepthValue , VAR_GT_INIT_INITIAL , VAR_GT_INIT_INITIAL , 20 )
>3792	ArgumentList	idepthValue
>3793	Argument	20
>3794	PrimaryExpression	20
>3795	Argument	VAR_GT_INIT_INITIAL
>3796	Identifier	VAR_GT_INIT_INITIAL
>3797	Argument	VAR_GT_INIT_INITIAL
>3798	Identifier	VAR_GT_INIT_INITIAL
>3799	Argument	idepthValue
>3800	Identifier	idepthValue
>3801	Argument	idepthValue
>3802	Identifier	idepthValue
>3803	Callee	DepthMapPixelHypothesis
>3804	Identifier	DepthMapPixelHypothesis
>3805	ArrayIndexing	currentDepthMap [ x + y * width ]
>3806	AdditiveExpression	x + y * width
>3807	MultiplicativeExpression	y * width
>3808	Identifier	width
>3809	Identifier	y
>3810	Identifier	x
>3811	Identifier	currentDepthMap
>3812	Condition	 
>3813	AndExpression	! isnanf ( idepthValue ) && idepthValue > 0
>3814	RelationalExpression	idepthValue > 0
>3815	PrimaryExpression	0
>3816	Identifier	idepthValue
>3817	UnaryOp	! isnanf ( idepthValue )
>3818	CallExpression	isnanf ( idepthValue )
>3819	ArgumentList	idepthValue
>3820	Argument	idepthValue
>3821	Identifier	idepthValue
>3822	Callee	isnanf
>3823	Identifier	isnanf
>3824	UnaryOperator	!
>3825	IdentifierDeclStatement	 
>3826	IdentifierDecl	idepthValue = idepth [ x + y * width ]
>3827	AssignmentExpr	idepthValue = idepth [ x + y * width ]
>3828	ArrayIndexing	idepth [ x + y * width ]
>3829	AdditiveExpression	x + y * width
>3830	MultiplicativeExpression	y * width
>3831	Identifier	width
>3832	Identifier	y
>3833	Identifier	x
>3834	Identifier	idepth
>3835	Identifier	idepthValue
>3836	Identifier	idepthValue
>3837	IdentifierDeclType	float
>3838	IncDecOp	 
>3839	IncDec	++
>3840	Identifier	x
>3841	Condition	 
>3842	RelationalExpression	x < width
>3843	Identifier	width
>3844	Identifier	x
>3845	ForInit	 
>3846	IdentifierDeclStatement	int x = 0 ;
>3847	IdentifierDecl	x = 0
>3848	AssignmentExpr	x = 0
>3849	PrimaryExpression	0
>3850	Identifier	x
>3851	Identifier	x
>3852	IdentifierDeclType	int
>3853	IncDecOp	 
>3854	IncDec	++
>3855	Identifier	y
>3856	Condition	 
>3857	RelationalExpression	y < height
>3858	Identifier	height
>3859	Identifier	y
>3860	ForInit	 
>3861	IdentifierDeclStatement	int y = 0 ;
>3862	IdentifierDecl	y = 0
>3863	AssignmentExpr	y = 0
>3864	PrimaryExpression	0
>3865	Identifier	y
>3866	Identifier	y
>3867	IdentifierDeclType	int
>3868	ForStatement	for ( int y = 0 ; y < height ; y ++ )
>3869	CompoundStatement	 
>3870	ForStatement	for ( int x = 0 ; x < width ; x ++ )
>3871	CompoundStatement	 
>3872	IfStatement	if ( ! isnanf ( idepthValue ) && idepthValue > 0 )
>3873	CompoundStatement	 
>3874	ExpressionStatement	 
>3875	IncDecOp	averageGTIDepthNum ++
>3876	IncDec	++
>3877	Identifier	averageGTIDepthNum
>3878	ExpressionStatement	 
>3879	AssignmentExpr	averageGTIDepthSum += idepthValue
>3880	Identifier	idepthValue
>3881	Identifier	averageGTIDepthSum
>3882	Condition	 
>3883	AndExpression	! isnanf ( idepthValue ) && idepthValue > 0
>3884	RelationalExpression	idepthValue > 0
>3885	PrimaryExpression	0
>3886	Identifier	idepthValue
>3887	UnaryOp	! isnanf ( idepthValue )
>3888	CallExpression	isnanf ( idepthValue )
>3889	ArgumentList	idepthValue
>3890	Argument	idepthValue
>3891	Identifier	idepthValue
>3892	Callee	isnanf
>3893	Identifier	isnanf
>3894	UnaryOperator	!
>3895	IdentifierDeclStatement	 
>3896	IdentifierDecl	idepthValue = idepth [ x + y * width ]
>3897	AssignmentExpr	idepthValue = idepth [ x + y * width ]
>3898	ArrayIndexing	idepth [ x + y * width ]
>3899	AdditiveExpression	x + y * width
>3900	MultiplicativeExpression	y * width
>3901	Identifier	width
>3902	Identifier	y
>3903	Identifier	x
>3904	Identifier	idepth
>3905	Identifier	idepthValue
>3906	Identifier	idepthValue
>3907	IdentifierDeclType	float
>3908	IncDecOp	 
>3909	IncDec	++
>3910	Identifier	x
>3911	Condition	 
>3912	RelationalExpression	x < width
>3913	Identifier	width
>3914	Identifier	x
>3915	ForInit	 
>3916	IdentifierDeclStatement	int x = 0 ;
>3917	IdentifierDecl	x = 0
>3918	AssignmentExpr	x = 0
>3919	PrimaryExpression	0
>3920	Identifier	x
>3921	Identifier	x
>3922	IdentifierDeclType	int
>3923	IncDecOp	 
>3924	IncDec	++
>3925	Identifier	y
>3926	Condition	 
>3927	RelationalExpression	y < height
>3928	Identifier	height
>3929	Identifier	y
>3930	ForInit	 
>3931	IdentifierDeclStatement	int y = 0 ;
>3932	IdentifierDecl	y = 0
>3933	AssignmentExpr	y = 0
>3934	PrimaryExpression	0
>3935	Identifier	y
>3936	Identifier	y
>3937	IdentifierDeclType	int
>3938	IdentifierDeclStatement	 
>3939	IdentifierDecl	averageGTIDepthNum = 0
>3940	AssignmentExpr	averageGTIDepthNum = 0
>3941	PrimaryExpression	0
>3942	Identifier	averageGTIDepthNum
>3943	Identifier	averageGTIDepthNum
>3944	IdentifierDeclType	int
>3945	IdentifierDeclStatement	 
>3946	IdentifierDecl	averageGTIDepthSum = 0
>3947	AssignmentExpr	averageGTIDepthSum = 0
>3948	PrimaryExpression	0
>3949	Identifier	averageGTIDepthSum
>3950	Identifier	averageGTIDepthSum
>3951	IdentifierDeclType	float
>3952	IdentifierDeclStatement	 
>3953	IdentifierDecl	* idepth = new_frame -> idepth ( )
>3954	AssignmentExpr	* idepth = new_frame -> idepth ( )
>3955	CallExpression	new_frame -> idepth ( )
>3956	ArgumentList	 
>3957	Callee	new_frame -> idepth
>3958	PtrMemberAccess	new_frame -> idepth
>3959	Identifier	idepth
>3960	Identifier	new_frame
>3961	Identifier	idepth
>3962	Identifier	idepth
>3963	IdentifierDeclType	const float *
>3964	ExpressionStatement	 
>3965	AssignmentExpr	activeKeyFrameIsReactivated = false
>3966	Identifier	false
>3967	Identifier	activeKeyFrameIsReactivated
>3968	ExpressionStatement	 
>3969	AssignmentExpr	activeKeyFrameImageData = activeKeyFrame -> image ( 0 )
>3970	CallExpression	activeKeyFrame -> image ( 0 )
>3971	ArgumentList	0
>3972	Argument	0
>3973	PrimaryExpression	0
>3974	Callee	activeKeyFrame -> image
>3975	PtrMemberAccess	activeKeyFrame -> image
>3976	Identifier	image
>3977	Identifier	activeKeyFrame
>3978	Identifier	activeKeyFrameImageData
>3979	ExpressionStatement	 
>3980	AssignmentExpr	activeKeyFrame = new_frame
>3981	Identifier	new_frame
>3982	Identifier	activeKeyFrame
>3983	ExpressionStatement	 
>3984	AssignmentExpr	activeKeyFramelock = new_frame -> getActiveLock ( )
>3985	CallExpression	new_frame -> getActiveLock ( )
>3986	ArgumentList	 
>3987	Callee	new_frame -> getActiveLock
>3988	PtrMemberAccess	new_frame -> getActiveLock
>3989	Identifier	getActiveLock
>3990	Identifier	new_frame
>3991	Identifier	activeKeyFramelock
>3992	ExpressionStatement	 
>3993	CallExpression	assert ( new_frame -> hasIDepthBeenSet ( ) )
>3994	ArgumentList	new_frame -> hasIDepthBeenSet ( )
>3995	Argument	new_frame -> hasIDepthBeenSet ( )
>3996	CallExpression	new_frame -> hasIDepthBeenSet ( )
>3997	ArgumentList	 
>3998	Callee	new_frame -> hasIDepthBeenSet
>3999	PtrMemberAccess	new_frame -> hasIDepthBeenSet
>4000	Identifier	hasIDepthBeenSet
>4001	Identifier	new_frame
>4002	Callee	assert
>4003	Identifier	assert
>4038	FunctionDef	DepthMap 
>4039	ParameterList	 
>4040	ReturnType	void
>4041	CompoundStatement	 
>4042	ExpressionStatement	 
>4043	AssignmentExpr	runningStats . num_observe_blacklisted = 0
>4044	PrimaryExpression	0
>4045	MemberAccess	runningStats . num_observe_blacklisted
>4046	Identifier	num_observe_blacklisted
>4047	Identifier	runningStats
>4048	ExpressionStatement	 
>4049	AssignmentExpr	runningStats . num_observe_addSkip = 0
>4050	PrimaryExpression	0
>4051	MemberAccess	runningStats . num_observe_addSkip
>4052	Identifier	num_observe_addSkip
>4053	Identifier	runningStats
>4054	ExpressionStatement	 
>4055	AssignmentExpr	runningStats . num_observe_skip_alreadyGood = 0
>4056	PrimaryExpression	0
>4057	MemberAccess	runningStats . num_observe_skip_alreadyGood
>4058	Identifier	num_observe_skip_alreadyGood
>4059	Identifier	runningStats
>4060	ExpressionStatement	 
>4061	AssignmentExpr	runningStats . num_observe_state_initializing = 0
>4062	PrimaryExpression	0
>4063	MemberAccess	runningStats . num_observe_state_initializing
>4064	Identifier	num_observe_state_initializing
>4065	Identifier	runningStats
>4066	ExpressionStatement	 
>4067	AssignmentExpr	runningStats . num_observe_state_finalizing = 0
>4068	PrimaryExpression	0
>4069	MemberAccess	runningStats . num_observe_state_finalizing
>4070	Identifier	num_observe_state_finalizing
>4071	Identifier	runningStats
>4072	ExpressionStatement	 
>4073	AssignmentExpr	runningStats . num_observe_good_finalizing = 0
>4074	PrimaryExpression	0
>4075	MemberAccess	runningStats . num_observe_good_finalizing
>4076	Identifier	num_observe_good_finalizing
>4077	Identifier	runningStats
>4078	ExpressionStatement	 
>4079	AssignmentExpr	runningStats . num_observe_good = 0
>4080	PrimaryExpression	0
>4081	MemberAccess	runningStats . num_observe_good
>4082	Identifier	num_observe_good
>4083	Identifier	runningStats
>4084	ExpressionStatement	 
>4085	AssignmentExpr	runningStats . num_observe_skip_oob = 0
>4086	PrimaryExpression	0
>4087	MemberAccess	runningStats . num_observe_skip_oob
>4088	Identifier	num_observe_skip_oob
>4089	Identifier	runningStats
>4090	ExpressionStatement	 
>4091	AssignmentExpr	runningStats . num_observe_skip_fail = 0
>4092	PrimaryExpression	0
>4093	MemberAccess	runningStats . num_observe_skip_fail
>4094	Identifier	num_observe_skip_fail
>4095	Identifier	runningStats
>4096	ExpressionStatement	 
>4097	AssignmentExpr	runningStats . num_observe_notfound = 0
>4098	PrimaryExpression	0
>4099	MemberAccess	runningStats . num_observe_notfound
>4100	Identifier	num_observe_notfound
>4101	Identifier	runningStats
>4102	ExpressionStatement	 
>4103	AssignmentExpr	runningStats . num_observe_notfound_finalizing = 0
>4104	PrimaryExpression	0
>4105	MemberAccess	runningStats . num_observe_notfound_finalizing
>4106	Identifier	num_observe_notfound_finalizing
>4107	Identifier	runningStats
>4108	ExpressionStatement	 
>4109	AssignmentExpr	runningStats . num_observe_notfound_finalizing2 = 0
>4110	PrimaryExpression	0
>4111	MemberAccess	runningStats . num_observe_notfound_finalizing2
>4112	Identifier	num_observe_notfound_finalizing2
>4113	Identifier	runningStats
>4114	ExpressionStatement	 
>4115	AssignmentExpr	runningStats . num_observe_inconsistent = 0
>4116	PrimaryExpression	0
>4117	MemberAccess	runningStats . num_observe_inconsistent
>4118	Identifier	num_observe_inconsistent
>4119	Identifier	runningStats
>4120	ExpressionStatement	 
>4121	AssignmentExpr	runningStats . num_observe_inconsistent_finalizing = 0
>4122	PrimaryExpression	0
>4123	MemberAccess	runningStats . num_observe_inconsistent_finalizing
>4124	Identifier	num_observe_inconsistent_finalizing
>4125	Identifier	runningStats
>4126	ExpressionStatement	 
>4127	AssignmentExpr	runningStats . num_observe_trans_idle_exhausted = 0
>4128	PrimaryExpression	0
>4129	MemberAccess	runningStats . num_observe_trans_idle_exhausted
>4130	Identifier	num_observe_trans_idle_exhausted
>4131	Identifier	runningStats
>4132	ExpressionStatement	 
>4133	AssignmentExpr	runningStats . num_observe_transit_idle_scale_angle = 0
>4134	PrimaryExpression	0
>4135	MemberAccess	runningStats . num_observe_transit_idle_scale_angle
>4136	Identifier	num_observe_transit_idle_scale_angle
>4137	Identifier	runningStats
>4138	ExpressionStatement	 
>4139	AssignmentExpr	runningStats . num_observe_transit_idle_oob = 0
>4140	PrimaryExpression	0
>4141	MemberAccess	runningStats . num_observe_transit_idle_oob
>4142	Identifier	num_observe_transit_idle_oob
>4143	Identifier	runningStats
>4144	ExpressionStatement	 
>4145	AssignmentExpr	runningStats . num_observe_transit_finalizing = 0
>4146	PrimaryExpression	0
>4147	MemberAccess	runningStats . num_observe_transit_finalizing
>4148	Identifier	num_observe_transit_finalizing
>4149	Identifier	runningStats
>4150	ExpressionStatement	 
>4151	AssignmentExpr	runningStats . num_observe_skipped_small_epl_angle = 0
>4152	PrimaryExpression	0
>4153	MemberAccess	runningStats . num_observe_skipped_small_epl_angle
>4154	Identifier	num_observe_skipped_small_epl_angle
>4155	Identifier	runningStats
>4156	ExpressionStatement	 
>4157	AssignmentExpr	runningStats . num_observe_skipped_small_epl_grad = 0
>4158	PrimaryExpression	0
>4159	MemberAccess	runningStats . num_observe_skipped_small_epl_grad
>4160	Identifier	num_observe_skipped_small_epl_grad
>4161	Identifier	runningStats
>4162	ExpressionStatement	 
>4163	AssignmentExpr	runningStats . num_observe_skipped_small_epl = 0
>4164	PrimaryExpression	0
>4165	MemberAccess	runningStats . num_observe_skipped_small_epl
>4166	Identifier	num_observe_skipped_small_epl
>4167	Identifier	runningStats
>4168	ExpressionStatement	 
>4169	AssignmentExpr	runningStats . num_observe_update_attempted = 0
>4170	PrimaryExpression	0
>4171	MemberAccess	runningStats . num_observe_update_attempted
>4172	Identifier	num_observe_update_attempted
>4173	Identifier	runningStats
>4174	ExpressionStatement	 
>4175	AssignmentExpr	runningStats . num_observe_updated = 0
>4176	PrimaryExpression	0
>4177	MemberAccess	runningStats . num_observe_updated
>4178	Identifier	num_observe_updated
>4179	Identifier	runningStats
>4180	ExpressionStatement	 
>4181	AssignmentExpr	runningStats . num_observe_create_attempted = 0
>4182	PrimaryExpression	0
>4183	MemberAccess	runningStats . num_observe_create_attempted
>4184	Identifier	num_observe_create_attempted
>4185	Identifier	runningStats
>4186	ExpressionStatement	 
>4187	AssignmentExpr	runningStats . num_observe_created = 0
>4188	PrimaryExpression	0
>4189	MemberAccess	runningStats . num_observe_created
>4190	Identifier	num_observe_created
>4191	Identifier	runningStats
>4192	ExpressionStatement	 
>4193	AssignmentExpr	runningStats . num_stereo_successfull = 0
>4194	PrimaryExpression	0
>4195	MemberAccess	runningStats . num_stereo_successfull
>4196	Identifier	num_stereo_successfull
>4197	Identifier	runningStats
>4198	ExpressionStatement	 
>4199	AssignmentExpr	runningStats . num_stereo_negative = 0
>4200	PrimaryExpression	0
>4201	MemberAccess	runningStats . num_stereo_negative
>4202	Identifier	num_stereo_negative
>4203	Identifier	runningStats
>4204	ExpressionStatement	 
>4205	AssignmentExpr	runningStats . num_stereo_interpNone = 0
>4206	PrimaryExpression	0
>4207	MemberAccess	runningStats . num_stereo_interpNone
>4208	Identifier	num_stereo_interpNone
>4209	Identifier	runningStats
>4210	ExpressionStatement	 
>4211	AssignmentExpr	runningStats . num_stereo_interpPost = 0
>4212	PrimaryExpression	0
>4213	MemberAccess	runningStats . num_stereo_interpPost
>4214	Identifier	num_stereo_interpPost
>4215	Identifier	runningStats
>4216	ExpressionStatement	 
>4217	AssignmentExpr	runningStats . num_stereo_interpPre = 0
>4218	PrimaryExpression	0
>4219	MemberAccess	runningStats . num_stereo_interpPre
>4220	Identifier	num_stereo_interpPre
>4221	Identifier	runningStats
>4222	ExpressionStatement	 
>4223	AssignmentExpr	runningStats . num_stereo_invalid_bigErr = 0
>4224	PrimaryExpression	0
>4225	MemberAccess	runningStats . num_stereo_invalid_bigErr
>4226	Identifier	num_stereo_invalid_bigErr
>4227	Identifier	runningStats
>4228	ExpressionStatement	 
>4229	AssignmentExpr	runningStats . num_stereo_invalid_noCrossing = 0
>4230	PrimaryExpression	0
>4231	MemberAccess	runningStats . num_stereo_invalid_noCrossing
>4232	Identifier	num_stereo_invalid_noCrossing
>4233	Identifier	runningStats
>4234	ExpressionStatement	 
>4235	AssignmentExpr	runningStats . num_stereo_invalid_twoCrossing = 0
>4236	PrimaryExpression	0
>4237	MemberAccess	runningStats . num_stereo_invalid_twoCrossing
>4238	Identifier	num_stereo_invalid_twoCrossing
>4239	Identifier	runningStats
>4240	ExpressionStatement	 
>4241	AssignmentExpr	runningStats . num_stereo_invalid_inexistantCrossing = 0
>4242	PrimaryExpression	0
>4243	MemberAccess	runningStats . num_stereo_invalid_inexistantCrossing
>4244	Identifier	num_stereo_invalid_inexistantCrossing
>4245	Identifier	runningStats
>4246	ExpressionStatement	 
>4247	AssignmentExpr	runningStats . num_stereo_invalid_atEnd = 0
>4248	PrimaryExpression	0
>4249	MemberAccess	runningStats . num_stereo_invalid_atEnd
>4250	Identifier	num_stereo_invalid_atEnd
>4251	Identifier	runningStats
>4252	ExpressionStatement	 
>4253	AssignmentExpr	runningStats . num_stereo_invalid_unclear_winner = 0
>4254	PrimaryExpression	0
>4255	MemberAccess	runningStats . num_stereo_invalid_unclear_winner
>4256	Identifier	num_stereo_invalid_unclear_winner
>4257	Identifier	runningStats
>4258	ExpressionStatement	 
>4259	AssignmentExpr	runningStats . num_stereo_near_oob = 0
>4260	PrimaryExpression	0
>4261	MemberAccess	runningStats . num_stereo_near_oob
>4262	Identifier	num_stereo_near_oob
>4263	Identifier	runningStats
>4264	ExpressionStatement	 
>4265	AssignmentExpr	runningStats . num_stereo_inf_oob = 0
>4266	PrimaryExpression	0
>4267	MemberAccess	runningStats . num_stereo_inf_oob
>4268	Identifier	num_stereo_inf_oob
>4269	Identifier	runningStats
>4270	ExpressionStatement	 
>4271	AssignmentExpr	runningStats . num_stereo_rescale_oob = 0
>4272	PrimaryExpression	0
>4273	MemberAccess	runningStats . num_stereo_rescale_oob
>4274	Identifier	num_stereo_rescale_oob
>4275	Identifier	runningStats
>4276	ExpressionStatement	 
>4277	AssignmentExpr	runningStats . num_stereo_calls = 0
>4278	PrimaryExpression	0
>4279	MemberAccess	runningStats . num_stereo_calls
>4280	Identifier	num_stereo_calls
>4281	Identifier	runningStats
>4282	ExpressionStatement	 
>4283	AssignmentExpr	runningStats . num_pixelInterpolations = 0
>4284	PrimaryExpression	0
>4285	MemberAccess	runningStats . num_pixelInterpolations
>4286	Identifier	num_pixelInterpolations
>4287	Identifier	runningStats
>4288	ExpressionStatement	 
>4289	AssignmentExpr	runningStats . num_stereo_comparisons = 0
>4290	PrimaryExpression	0
>4291	MemberAccess	runningStats . num_stereo_comparisons
>4292	Identifier	num_stereo_comparisons
>4293	Identifier	runningStats
>4340	FunctionDef	DepthMap 
>4341	ParameterList	std 
>4342	Parameter	 
>4343	Identifier	referenceFrames
>4344	ParameterType	std 
>4345	ReturnType	void
>4346	CompoundStatement	 
>4347	IfStatement	if ( enablePrintDebugInfo && printLineStereoFails )
>4348	CompoundStatement	 
>4349	ExpressionStatement	 
>4350	CallExpression	printf ( \"ST-ERR
>4351	ArgumentList	\"ST-ERR
>4352	Argument	runningStats . num_stereo_invalid_bigErr
>4353	MemberAccess	runningStats . num_stereo_invalid_bigErr
>4354	Identifier	num_stereo_invalid_bigErr
>4355	Identifier	runningStats
>4356	Argument	runningStats . num_stereo_invalid_twoCrossing
>4357	MemberAccess	runningStats . num_stereo_invalid_twoCrossing
>4358	Identifier	num_stereo_invalid_twoCrossing
>4359	Identifier	runningStats
>4360	Argument	runningStats . num_stereo_invalid_noCrossing
>4361	MemberAccess	runningStats . num_stereo_invalid_noCrossing
>4362	Identifier	num_stereo_invalid_noCrossing
>4363	Identifier	runningStats
>4364	Argument	runningStats . num_stereo_invalid_inexistantCrossing
>4365	MemberAccess	runningStats . num_stereo_invalid_inexistantCrossing
>4366	Identifier	num_stereo_invalid_inexistantCrossing
>4367	Identifier	runningStats
>4368	Argument	runningStats . num_stereo_invalid_atEnd
>4369	MemberAccess	runningStats . num_stereo_invalid_atEnd
>4370	Identifier	num_stereo_invalid_atEnd
>4371	Identifier	runningStats
>4372	Argument	runningStats . num_stereo_invalid_unclear_winner
>4373	MemberAccess	runningStats . num_stereo_invalid_unclear_winner
>4374	Identifier	num_stereo_invalid_unclear_winner
>4375	Identifier	runningStats
>4376	Argument	runningStats . num_stereo_invalid_unclear_winner + runningStats . num_stereo_invalid_atEnd + runningStats . num_\
>4377	AdditiveExpression	runningStats . num_stereo_invalid_unclear_winner + runningStats . num_stereo_invalid_atEnd + runningStats \
>4378	AdditiveExpression	runningStats . num_stereo_invalid_atEnd + runningStats . num_stereo_invalid_inexistantCrossing + runningStats \
>4379	AdditiveExpression	runningStats . num_stereo_invalid_inexistantCrossing + runningStats . num_stereo_invalid_noCrossing + \
>4380	AdditiveExpression	runningStats . num_stereo_invalid_noCrossing + runningStats . num_stereo_invalid_twoCrossing + runningStats \
>4381	AdditiveExpression	runningStats . num_stereo_invalid_twoCrossing + runningStats . num_stereo_invalid_bigErr
>4382	MemberAccess	runningStats . num_stereo_invalid_bigErr
>4383	Identifier	num_stereo_invalid_bigErr
>4384	Identifier	runningStats
>4385	MemberAccess	runningStats . num_stereo_invalid_twoCrossing
>4386	Identifier	num_stereo_invalid_twoCrossing
>4387	Identifier	runningStats
>4388	MemberAccess	runningStats . num_stereo_invalid_noCrossing
>4389	Identifier	num_stereo_invalid_noCrossing
>4390	Identifier	runningStats
>4391	MemberAccess	runningStats . num_stereo_invalid_inexistantCrossing
>4392	Identifier	num_stereo_invalid_inexistantCrossing
>4393	Identifier	runningStats
>4394	MemberAccess	runningStats . num_stereo_invalid_atEnd
>4395	Identifier	num_stereo_invalid_atEnd
>4396	Identifier	runningStats
>4397	MemberAccess	runningStats . num_stereo_invalid_unclear_winner
>4398	Identifier	num_stereo_invalid_unclear_winner
>4399	Identifier	runningStats
>4400	Argument	runningStats . num_stereo_near_oob
>4401	MemberAccess	runningStats . num_stereo_near_oob
>4402	Identifier	num_stereo_near_oob
>4403	Identifier	runningStats
>4404	Argument	runningStats . num_stereo_inf_oob
>4405	MemberAccess	runningStats . num_stereo_inf_oob
>4406	Identifier	num_stereo_inf_oob
>4407	Identifier	runningStats
>4408	Argument	runningStats . num_stereo_rescale_oob
>4409	MemberAccess	runningStats . num_stereo_rescale_oob
>4410	Identifier	num_stereo_rescale_oob
>4411	Identifier	runningStats
>4412	Argument	runningStats . num_stereo_rescale_oob + runningStats . num_stereo_inf_oob + runningStats . num_stereo_near_oob
>4413	AdditiveExpression	runningStats . num_stereo_rescale_oob + runningStats . num_stereo_inf_oob + runningStats . num_stereo_\
>4414	AdditiveExpression	runningStats . num_stereo_inf_oob + runningStats . num_stereo_near_oob
>4415	MemberAccess	runningStats . num_stereo_near_oob
>4416	Identifier	num_stereo_near_oob
>4417	Identifier	runningStats
>4418	MemberAccess	runningStats . num_stereo_inf_oob
>4419	Identifier	num_stereo_inf_oob
>4420	Identifier	runningStats
>4421	MemberAccess	runningStats . num_stereo_rescale_oob
>4422	Identifier	num_stereo_rescale_oob
>4423	Identifier	runningStats
>4424	Argument	\"ST-ERR
>4425	PrimaryExpression	\"ST-ERR
>4426	Callee	printf
>4427	Identifier	printf
>4428	Condition	 
>4429	AndExpression	enablePrintDebugInfo && printLineStereoFails
>4430	Identifier	printLineStereoFails
>4431	Identifier	enablePrintDebugInfo
>4432	IfStatement	if ( enablePrintDebugInfo && printLineStereoStatistics )
>4433	CompoundStatement	 
>4434	ExpressionStatement	 
>4435	CallExpression	printf ( \"ST
>4436	ArgumentList	\"ST
>4437	Argument	runningStats . num_stereo_interpPost
>4438	MemberAccess	runningStats . num_stereo_interpPost
>4439	Identifier	num_stereo_interpPost
>4440	Identifier	runningStats
>4441	Argument	runningStats . num_stereo_interpNone
>4442	MemberAccess	runningStats . num_stereo_interpNone
>4443	Identifier	num_stereo_interpNone
>4444	Identifier	runningStats
>4445	Argument	runningStats . num_stereo_interpPre
>4446	MemberAccess	runningStats . num_stereo_interpPre
>4447	Identifier	num_stereo_interpPre
>4448	Identifier	runningStats
>4449	Argument	100 * runningStats . num_stereo_negative / ( float ) runningStats . num_stereo_successfull
>4450	MultiplicativeExpression	100 * runningStats . num_stereo_negative / ( float ) runningStats . num_stereo_successfull
>4451	MultiplicativeExpression	runningStats . num_stereo_negative / ( float ) runningStats . num_stereo_successfull
>4452	CastExpression	( float ) runningStats . num_stereo_successfull
>4453	MemberAccess	runningStats . num_stereo_successfull
>4454	Identifier	num_stereo_successfull
>4455	Identifier	runningStats
>4456	CastTarget	float
>4457	MemberAccess	runningStats . num_stereo_negative
>4458	Identifier	num_stereo_negative
>4459	Identifier	runningStats
>4460	PrimaryExpression	100
>4461	Argument	runningStats . num_stereo_negative
>4462	MemberAccess	runningStats . num_stereo_negative
>4463	Identifier	num_stereo_negative
>4464	Identifier	runningStats
>4465	Argument	100 * runningStats . num_stereo_successfull / ( float ) runningStats . num_stereo_calls
>4466	MultiplicativeExpression	100 * runningStats . num_stereo_successfull / ( float ) runningStats . num_stereo_calls
>4467	MultiplicativeExpression	runningStats . num_stereo_successfull / ( float ) runningStats . num_stereo_calls
>4468	CastExpression	( float ) runningStats . num_stereo_calls
>4469	MemberAccess	runningStats . num_stereo_calls
>4470	Identifier	num_stereo_calls
>4471	Identifier	runningStats
>4472	CastTarget	float
>4473	MemberAccess	runningStats . num_stereo_successfull
>4474	Identifier	num_stereo_successfull
>4475	Identifier	runningStats
>4476	PrimaryExpression	100
>4477	Argument	runningStats . num_stereo_successfull
>4478	MemberAccess	runningStats . num_stereo_successfull
>4479	Identifier	num_stereo_successfull
>4480	Identifier	runningStats
>4481	Argument	runningStats . num_pixelInterpolations
>4482	MemberAccess	runningStats . num_pixelInterpolations
>4483	Identifier	num_pixelInterpolations
>4484	Identifier	runningStats
>4485	Argument	runningStats . num_stereo_comparisons
>4486	MemberAccess	runningStats . num_stereo_comparisons
>4487	Identifier	num_stereo_comparisons
>4488	Identifier	runningStats
>4489	Argument	runningStats . num_stereo_calls
>4490	MemberAccess	runningStats . num_stereo_calls
>4491	Identifier	num_stereo_calls
>4492	Identifier	runningStats
>4493	Argument	\"ST
>4494	PrimaryExpression	\"ST
>4495	Callee	printf
>4496	Identifier	printf
>4497	Condition	 
>4498	AndExpression	enablePrintDebugInfo && printLineStereoStatistics
>4499	Identifier	printLineStereoStatistics
>4500	Identifier	enablePrintDebugInfo
>4501	IfStatement	if ( plotStereoImages )
>4502	CompoundStatement	 
>4503	ExpressionStatement	 
>4504	CallExpression	Util 
>4505	ArgumentList	\"Stereo Reference Frame\"
>4506	Argument	false
>4507	Identifier	false
>4508	Argument	debugImageStereoLines
>4509	Identifier	debugImageStereoLines
>4510	Argument	\"Stereo Reference Frame\"
>4511	PrimaryExpression	\"Stereo Reference Frame\"
>4512	Callee	Util 
>4513	Identifier	Util 
>4514	ExpressionStatement	 
>4515	CallExpression	Util 
>4516	ArgumentList	\"Stereo Key Frame\"
>4517	Argument	false
>4518	Identifier	false
>4519	Argument	debugImageHypothesisHandling
>4520	Identifier	debugImageHypothesisHandling
>4521	Argument	\"Stereo Key Frame\"
>4522	PrimaryExpression	\"Stereo Key Frame\"
>4523	Callee	Util 
>4524	Identifier	Util 
>4525	Condition	 
>4526	Identifier	plotStereoImages
>4527	ExpressionStatement	 
>4528	IncDecOp	activeKeyFrame -> numMappedOnThisTotal ++
>4529	IncDec	++
>4530	PtrMemberAccess	activeKeyFrame -> numMappedOnThisTotal
>4531	Identifier	numMappedOnThisTotal
>4532	Identifier	activeKeyFrame
>4533	ExpressionStatement	 
>4534	IncDecOp	activeKeyFrame -> numMappedOnThis ++
>4535	IncDec	++
>4536	PtrMemberAccess	activeKeyFrame -> numMappedOnThis
>4537	Identifier	numMappedOnThis
>4538	Identifier	activeKeyFrame
>4539	ExpressionStatement	 
>4540	IncDecOp	nUpdate ++
>4541	IncDec	++
>4542	Identifier	nUpdate
>4543	ExpressionStatement	 
>4544	AssignmentExpr	msUpdate = 0.9 * msUpdate + 0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_\
>4545	AdditiveExpression	0.9 * msUpdate + 0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_\
>4546	MultiplicativeExpression	0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_usec - tv_start_\
>4547	AdditiveExpression	( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_usec - tv_start_all . tv_\
>4548	MultiplicativeExpression	( tv_end_all . tv_usec - tv_start_all . tv_usec ) / 1000.0f
>4549	PrimaryExpression	1000.0f
>4550	AdditiveExpression	tv_end_all . tv_usec - tv_start_all . tv_usec
>4551	MemberAccess	tv_start_all . tv_usec
>4552	Identifier	tv_usec
>4553	Identifier	tv_start_all
>4554	MemberAccess	tv_end_all . tv_usec
>4555	Identifier	tv_usec
>4556	Identifier	tv_end_all
>4557	MultiplicativeExpression	( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f
>4558	PrimaryExpression	1000.0f
>4559	AdditiveExpression	tv_end_all . tv_sec - tv_start_all . tv_sec
>4560	MemberAccess	tv_start_all . tv_sec
>4561	Identifier	tv_sec
>4562	Identifier	tv_start_all
>4563	MemberAccess	tv_end_all . tv_sec
>4564	Identifier	tv_sec
>4565	Identifier	tv_end_all
>4566	PrimaryExpression	0.1
>4567	MultiplicativeExpression	0.9 * msUpdate
>4568	Identifier	msUpdate
>4569	PrimaryExpression	0.9
>4570	Identifier	msUpdate
>4571	ExpressionStatement	 
>4572	CallExpression	gettimeofday ( & tv_end_all , NULL )
>4573	ArgumentList	& tv_end_all
>4574	Argument	NULL
>4575	Identifier	NULL
>4576	Argument	& tv_end_all
>4577	UnaryOp	& tv_end_all
>4578	Identifier	tv_end_all
>4579	UnaryOperator	&
>4580	Callee	gettimeofday
>4581	Identifier	gettimeofday
>4582	IfStatement	if ( ! activeKeyFrame -> depthHasBeenUpdatedFlag )
>4583	CompoundStatement	 
>4584	ExpressionStatement	 
>4585	IncDecOp	nSetDepth ++
>4586	IncDec	++
>4587	Identifier	nSetDepth
>4588	ExpressionStatement	 
>4589	AssignmentExpr	msSetDepth = 0.9 * msSetDepth + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>4590	AdditiveExpression	0.9 * msSetDepth + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_\
>4591	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>4592	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4593	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4594	PrimaryExpression	1000.0f
>4595	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>4596	MemberAccess	tv_start . tv_usec
>4597	Identifier	tv_usec
>4598	Identifier	tv_start
>4599	MemberAccess	tv_end . tv_usec
>4600	Identifier	tv_usec
>4601	Identifier	tv_end
>4602	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>4603	PrimaryExpression	1000.0f
>4604	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>4605	MemberAccess	tv_start . tv_sec
>4606	Identifier	tv_sec
>4607	Identifier	tv_start
>4608	MemberAccess	tv_end . tv_sec
>4609	Identifier	tv_sec
>4610	Identifier	tv_end
>4611	PrimaryExpression	0.1
>4612	MultiplicativeExpression	0.9 * msSetDepth
>4613	Identifier	msSetDepth
>4614	PrimaryExpression	0.9
>4615	Identifier	msSetDepth
>4616	ExpressionStatement	 
>4617	CallExpression	gettimeofday ( & tv_end , NULL )
>4618	ArgumentList	& tv_end
>4619	Argument	NULL
>4620	Identifier	NULL
>4621	Argument	& tv_end
>4622	UnaryOp	& tv_end
>4623	Identifier	tv_end
>4624	UnaryOperator	&
>4625	Callee	gettimeofday
>4626	Identifier	gettimeofday
>4627	ExpressionStatement	 
>4628	CallExpression	activeKeyFrame -> setDepth ( currentDepthMap )
>4629	ArgumentList	currentDepthMap
>4630	Argument	currentDepthMap
>4631	Identifier	currentDepthMap
>4632	Callee	activeKeyFrame -> setDepth
>4633	PtrMemberAccess	activeKeyFrame -> setDepth
>4634	Identifier	setDepth
>4635	Identifier	activeKeyFrame
>4636	ExpressionStatement	 
>4637	CallExpression	gettimeofday ( & tv_start , NULL )
>4638	ArgumentList	& tv_start
>4639	Argument	NULL
>4640	Identifier	NULL
>4641	Argument	& tv_start
>4642	UnaryOp	& tv_start
>4643	Identifier	tv_start
>4644	UnaryOperator	&
>4645	Callee	gettimeofday
>4646	Identifier	gettimeofday
>4647	Condition	 
>4648	UnaryOp	! activeKeyFrame -> depthHasBeenUpdatedFlag
>4649	PtrMemberAccess	activeKeyFrame -> depthHasBeenUpdatedFlag
>4650	Identifier	depthHasBeenUpdatedFlag
>4651	Identifier	activeKeyFrame
>4652	UnaryOperator	!
>4653	ExpressionStatement	 
>4654	IncDecOp	nRegularize ++
>4655	IncDec	++
>4656	Identifier	nRegularize
>4657	ExpressionStatement	 
>4658	AssignmentExpr	msRegularize = 0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_\
>4659	AdditiveExpression	0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>4660	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>4661	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4662	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4663	PrimaryExpression	1000.0f
>4664	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>4665	MemberAccess	tv_start . tv_usec
>4666	Identifier	tv_usec
>4667	Identifier	tv_start
>4668	MemberAccess	tv_end . tv_usec
>4669	Identifier	tv_usec
>4670	Identifier	tv_end
>4671	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>4672	PrimaryExpression	1000.0f
>4673	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>4674	MemberAccess	tv_start . tv_sec
>4675	Identifier	tv_sec
>4676	Identifier	tv_start
>4677	MemberAccess	tv_end . tv_sec
>4678	Identifier	tv_sec
>4679	Identifier	tv_end
>4680	PrimaryExpression	0.1
>4681	MultiplicativeExpression	0.9 * msRegularize
>4682	Identifier	msRegularize
>4683	PrimaryExpression	0.9
>4684	Identifier	msRegularize
>4685	ExpressionStatement	 
>4686	CallExpression	gettimeofday ( & tv_end , NULL )
>4687	ArgumentList	& tv_end
>4688	Argument	NULL
>4689	Identifier	NULL
>4690	Argument	& tv_end
>4691	UnaryOp	& tv_end
>4692	Identifier	tv_end
>4693	UnaryOperator	&
>4694	Callee	gettimeofday
>4695	Identifier	gettimeofday
>4696	ExpressionStatement	 
>4697	CallExpression	regularizeDepthMap ( false , VAL_SUM_MIN_FOR_KEEP )
>4698	ArgumentList	false
>4699	Argument	VAL_SUM_MIN_FOR_KEEP
>4700	Identifier	VAL_SUM_MIN_FOR_KEEP
>4701	Argument	false
>4702	Identifier	false
>4703	Callee	regularizeDepthMap
>4704	Identifier	regularizeDepthMap
>4705	ExpressionStatement	 
>4706	CallExpression	gettimeofday ( & tv_start , NULL )
>4707	ArgumentList	& tv_start
>4708	Argument	NULL
>4709	Identifier	NULL
>4710	Argument	& tv_start
>4711	UnaryOp	& tv_start
>4712	Identifier	tv_start
>4713	UnaryOperator	&
>4714	Callee	gettimeofday
>4715	Identifier	gettimeofday
>4716	CompoundStatement	 
>4717	ExpressionStatement	 
>4718	IncDecOp	nFillHoles ++
>4719	IncDec	++
>4720	Identifier	nFillHoles
>4721	ExpressionStatement	 
>4722	AssignmentExpr	msFillHoles = 0.9 * msFillHoles + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>4723	AdditiveExpression	0.9 * msFillHoles + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>4724	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>4725	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4726	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4727	PrimaryExpression	1000.0f
>4728	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>4729	MemberAccess	tv_start . tv_usec
>4730	Identifier	tv_usec
>4731	Identifier	tv_start
>4732	MemberAccess	tv_end . tv_usec
>4733	Identifier	tv_usec
>4734	Identifier	tv_end
>4735	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>4736	PrimaryExpression	1000.0f
>4737	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>4738	MemberAccess	tv_start . tv_sec
>4739	Identifier	tv_sec
>4740	Identifier	tv_start
>4741	MemberAccess	tv_end . tv_sec
>4742	Identifier	tv_sec
>4743	Identifier	tv_end
>4744	PrimaryExpression	0.1
>4745	MultiplicativeExpression	0.9 * msFillHoles
>4746	Identifier	msFillHoles
>4747	PrimaryExpression	0.9
>4748	Identifier	msFillHoles
>4749	ExpressionStatement	 
>4750	CallExpression	gettimeofday ( & tv_end , NULL )
>4751	ArgumentList	& tv_end
>4752	Argument	NULL
>4753	Identifier	NULL
>4754	Argument	& tv_end
>4755	UnaryOp	& tv_end
>4756	Identifier	tv_end
>4757	UnaryOperator	&
>4758	Callee	gettimeofday
>4759	Identifier	gettimeofday
>4760	ExpressionStatement	 
>4761	CallExpression	regularizeDepthMapFillHoles ( )
>4762	ArgumentList	 
>4763	Callee	regularizeDepthMapFillHoles
>4764	Identifier	regularizeDepthMapFillHoles
>4765	ExpressionStatement	 
>4766	CallExpression	gettimeofday ( & tv_start , NULL )
>4767	ArgumentList	& tv_start
>4768	Argument	NULL
>4769	Identifier	NULL
>4770	Argument	& tv_start
>4771	UnaryOp	& tv_start
>4772	Identifier	tv_start
>4773	UnaryOperator	&
>4774	Callee	gettimeofday
>4775	Identifier	gettimeofday
>4776	ExpressionStatement	 
>4777	IncDecOp	nObserve ++
>4778	IncDec	++
>4779	Identifier	nObserve
>4780	ExpressionStatement	 
>4781	AssignmentExpr	msObserve = 0.9 * msObserve + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . \
>4782	AdditiveExpression	0.9 * msObserve + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_\
>4783	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>4784	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4785	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>4786	PrimaryExpression	1000.0f
>4787	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>4788	MemberAccess	tv_start . tv_usec
>4789	Identifier	tv_usec
>4790	Identifier	tv_start
>4791	MemberAccess	tv_end . tv_usec
>4792	Identifier	tv_usec
>4793	Identifier	tv_end
>4794	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>4795	PrimaryExpression	1000.0f
>4796	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>4797	MemberAccess	tv_start . tv_sec
>4798	Identifier	tv_sec
>4799	Identifier	tv_start
>4800	MemberAccess	tv_end . tv_sec
>4801	Identifier	tv_sec
>4802	Identifier	tv_end
>4803	PrimaryExpression	0.1
>4804	MultiplicativeExpression	0.9 * msObserve
>4805	Identifier	msObserve
>4806	PrimaryExpression	0.9
>4807	Identifier	msObserve
>4808	ExpressionStatement	 
>4809	CallExpression	gettimeofday ( & tv_end , NULL )
>4810	ArgumentList	& tv_end
>4811	Argument	NULL
>4812	Identifier	NULL
>4813	Argument	& tv_end
>4814	UnaryOp	& tv_end
>4815	Identifier	tv_end
>4816	UnaryOperator	&
>4817	Callee	gettimeofday
>4818	Identifier	gettimeofday
>4819	ExpressionStatement	 
>4820	CallExpression	observeDepth ( )
>4821	ArgumentList	 
>4822	Callee	observeDepth
>4823	Identifier	observeDepth
>4824	ExpressionStatement	 
>4825	CallExpression	gettimeofday ( & tv_start , NULL )
>4826	ArgumentList	& tv_start
>4827	Argument	NULL
>4828	Identifier	NULL
>4829	Argument	& tv_start
>4830	UnaryOp	& tv_start
>4831	Identifier	tv_start
>4832	UnaryOperator	&
>4833	Callee	gettimeofday
>4834	Identifier	gettimeofday
>4835	IdentifierDeclStatement	 
>4836	IdentifierDecl	tv_end
>4837	Identifier	tv_end
>4838	IdentifierDeclType	struct timeval
>4839	IdentifierDecl	tv_start
>4840	Identifier	tv_start
>4841	IdentifierDeclType	struct timeval
>4842	IfStatement	if ( plotStereoImages )
>4843	CompoundStatement	 
>4844	ExpressionStatement	 
>4845	CallExpression	cv 
>4846	ArgumentList	debugImageStereoLines
>4847	Argument	CV_GRAY2RGB
>4848	Identifier	CV_GRAY2RGB
>4849	Argument	debugImageStereoLines
>4850	Identifier	debugImageStereoLines
>4851	Argument	debugImageStereoLines
>4852	Identifier	debugImageStereoLines
>4853	Callee	cv 
>4854	Identifier	cv 
>4855	ExpressionStatement	 
>4856	CallExpression	rfimg . convertTo ( debugImageStereoLines , CV_8UC1 )
>4857	ArgumentList	debugImageStereoLines
>4858	Argument	CV_8UC1
>4859	Identifier	CV_8UC1
>4860	Argument	debugImageStereoLines
>4861	Identifier	debugImageStereoLines
>4862	Callee	rfimg . convertTo
>4863	MemberAccess	rfimg . convertTo
>4864	Identifier	convertTo
>4865	Identifier	rfimg
>4866	IdentifierDeclStatement	 
>4867	IdentifierDecl	rfimg = 0.5f * oldest_refImage + 0.5f * newest_refImage
>4868	AssignmentExpr	rfimg = 0.5f * oldest_refImage + 0.5f * newest_refImage
>4869	AdditiveExpression	0.5f * oldest_refImage + 0.5f * newest_refImage
>4870	MultiplicativeExpression	0.5f * newest_refImage
>4871	Identifier	newest_refImage
>4872	PrimaryExpression	0.5f
>4873	MultiplicativeExpression	0.5f * oldest_refImage
>4874	Identifier	oldest_refImage
>4875	PrimaryExpression	0.5f
>4876	Identifier	rfimg
>4877	Identifier	rfimg
>4878	IdentifierDeclType	cv 
>4879	ExpressionStatement	 
>4880	Statement	 
>4881	Statement	 
>4882	Statement	 
>4883	Statement	 
>4884	Statement	 
>4885	Statement	 
>4886	Statement	 
>4887	Statement	 
>4888	Statement	 
>4889	Statement	 
>4890	Statement	 
>4891	Statement	 
>4892	Statement	 
>4893	Statement	 
>4894	Statement	 
>4895	Statement	 
>4896	Statement	 
>4897	Statement	 
>4898	Statement	 
>4899	Statement	 
>4900	Statement	 
>4901	Statement	 
>4902	Statement	 
>4903	Statement	 
>4904	Statement	 
>4905	Statement	 
>4906	Statement	 
>4907	Statement	 
>4908	Statement	 
>4909	Statement	 
>4910	Statement	 
>4911	Statement	 
>4912	Statement	 
>4913	ExpressionStatement	 
>4914	Statement	 
>4915	Statement	 
>4916	Statement	 
>4917	Statement	 
>4918	Statement	 
>4919	Statement	 
>4920	Statement	 
>4921	Statement	 
>4922	Statement	 
>4923	Statement	 
>4924	Statement	 
>4925	Statement	 
>4926	Statement	 
>4927	Statement	 
>4928	Statement	 
>4929	Statement	 
>4930	Statement	 
>4931	Statement	 
>4932	Statement	 
>4933	Statement	 
>4934	Statement	 
>4935	Statement	 
>4936	Statement	 
>4937	Statement	 
>4938	Statement	 
>4939	Statement	 
>4940	Statement	 
>4941	Statement	 
>4942	Statement	 
>4943	Statement	 
>4944	Statement	 
>4945	Statement	 
>4946	Statement	 
>4947	ExpressionStatement	 
>4948	CallExpression	cv 
>4949	ArgumentList	debugImageHypothesisHandling
>4950	Argument	CV_GRAY2RGB
>4951	Identifier	CV_GRAY2RGB
>4952	Argument	debugImageHypothesisHandling
>4953	Identifier	debugImageHypothesisHandling
>4954	Argument	debugImageHypothesisHandling
>4955	Identifier	debugImageHypothesisHandling
>4956	Callee	cv 
>4957	Identifier	cv 
>4958	ExpressionStatement	 
>4959	CallExpression	keyFrameImage . convertTo ( debugImageHypothesisHandling , CV_8UC1 )
>4960	ArgumentList	debugImageHypothesisHandling
>4961	Argument	CV_8UC1
>4962	Identifier	CV_8UC1
>4963	Argument	debugImageHypothesisHandling
>4964	Identifier	debugImageHypothesisHandling
>4965	Callee	keyFrameImage . convertTo
>4966	MemberAccess	keyFrameImage . convertTo
>4967	Identifier	convertTo
>4968	Identifier	keyFrameImage
>4969	ExpressionStatement	 
>4970	Statement	 
>4971	Statement	 
>4972	Statement	 
>4973	Statement	 
>4974	Statement	 
>4975	Statement	 
>4976	Statement	 
>4977	Statement	 
>4978	Statement	 
>4979	Statement	 
>4980	Statement	 
>4981	Statement	 
>4982	Statement	 
>4983	Statement	 
>4984	Statement	 
>4985	Statement	 
>4986	Statement	 
>4987	Statement	 
>4988	Statement	 
>4989	Statement	 
>4990	Statement	 
>4991	Statement	 
>4992	Statement	 
>4993	Statement	 
>4994	Statement	 
>4995	Statement	 
>4996	Statement	 
>4997	Statement	 
>4998	Condition	 
>4999	Identifier	plotStereoImages
>5000	ExpressionStatement	 
>5001	CallExpression	resetCounters ( )
>5002	ArgumentList	 
>5003	Callee	resetCounters
>5004	Identifier	resetCounters
>5005	CompoundStatement	 
>5006	WhileStatement	while ( ( int ) referenceFrameByID . size ( ) + referenceFrameByID_offset <= frame -> id ( ) )
>5007	ExpressionStatement	 
>5008	CallExpression	referenceFrameByID . push_back ( frame . get ( ) )
>5009	ArgumentList	frame . get ( )
>5010	Argument	frame . get ( )
>5011	CallExpression	frame . get ( )
>5012	ArgumentList	 
>5013	Callee	frame . get
>5014	MemberAccess	frame . get
>5015	Identifier	get
>5016	Identifier	frame
>5017	Callee	referenceFrameByID . push_back
>5018	MemberAccess	referenceFrameByID . push_back
>5019	Identifier	push_back
>5020	Identifier	referenceFrameByID
>5021	Condition	 
>5022	RelationalExpression	( int ) referenceFrameByID . size ( ) + referenceFrameByID_offset <= frame -> id ( )
>5023	CallExpression	frame -> id ( )
>5024	ArgumentList	 
>5025	Callee	frame -> id
>5026	PtrMemberAccess	frame -> id
>5027	Identifier	id
>5028	Identifier	frame
>5029	AdditiveExpression	( int ) referenceFrameByID . size ( ) + referenceFrameByID_offset
>5030	Identifier	referenceFrameByID_offset
>5031	CastExpression	( int ) referenceFrameByID . size ( )
>5032	CallExpression	referenceFrameByID . size ( )
>5033	ArgumentList	 
>5034	Callee	referenceFrameByID . size
>5035	MemberAccess	referenceFrameByID . size
>5036	Identifier	size
>5037	Identifier	referenceFrameByID
>5038	CastTarget	int
>5039	ExpressionStatement	 
>5040	CallExpression	frame -> prepareForStereoWith ( activeKeyFrame , refToKf , K , 0 )
>5041	ArgumentList	activeKeyFrame
>5042	Argument	0
>5043	PrimaryExpression	0
>5044	Argument	K
>5045	Identifier	K
>5046	Argument	refToKf
>5047	Identifier	refToKf
>5048	Argument	activeKeyFrame
>5049	Identifier	activeKeyFrame
>5050	Callee	frame -> prepareForStereoWith
>5051	PtrMemberAccess	frame -> prepareForStereoWith
>5052	Identifier	prepareForStereoWith
>5053	Identifier	frame
>5054	IfStatement	if ( frame -> pose -> trackingParent -> frameID == activeKeyFrame -> id ( ) )
>5055	ElseStatement	else
>5056	ExpressionStatement	 
>5057	AssignmentExpr	refToKf = activeKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( )
>5058	MultiplicativeExpression	activeKeyFrame -> getScaledCamToWorld ( ) . inverse ( ) * frame -> getScaledCamToWorld ( )
>5059	CallExpression	frame -> getScaledCamToWorld ( )
>5060	ArgumentList	 
>5061	Callee	frame -> getScaledCamToWorld
>5062	PtrMemberAccess	frame -> getScaledCamToWorld
>5063	Identifier	getScaledCamToWorld
>5064	Identifier	frame
>5065	CallExpression	activeKeyFrame -> getScaledCamToWorld ( ) . inverse ( )
>5066	ArgumentList	 
>5067	Callee	activeKeyFrame -> getScaledCamToWorld ( ) . inverse
>5068	MemberAccess	activeKeyFrame -> getScaledCamToWorld ( ) . inverse
>5069	Identifier	inverse
>5070	CallExpression	activeKeyFrame -> getScaledCamToWorld ( )
>5071	ArgumentList	 
>5072	Callee	activeKeyFrame -> getScaledCamToWorld
>5073	PtrMemberAccess	activeKeyFrame -> getScaledCamToWorld
>5074	Identifier	getScaledCamToWorld
>5075	Identifier	activeKeyFrame
>5076	Identifier	refToKf
>5077	ExpressionStatement	 
>5078	AssignmentExpr	refToKf = frame -> pose -> thisToParent_raw
>5079	PtrMemberAccess	frame -> pose -> thisToParent_raw
>5080	Identifier	thisToParent_raw
>5081	PtrMemberAccess	frame -> pose
>5082	Identifier	pose
>5083	Identifier	frame
>5084	Identifier	refToKf
>5085	Condition	 
>5086	EqualityExpression	frame -> pose -> trackingParent -> frameID == activeKeyFrame -> id ( )
>5087	CallExpression	activeKeyFrame -> id ( )
>5088	ArgumentList	 
>5089	Callee	activeKeyFrame -> id
>5090	PtrMemberAccess	activeKeyFrame -> id
>5091	Identifier	id
>5092	Identifier	activeKeyFrame
>5093	PtrMemberAccess	frame -> pose -> trackingParent -> frameID
>5094	Identifier	frameID
>5095	PtrMemberAccess	frame -> pose -> trackingParent
>5096	Identifier	trackingParent
>5097	PtrMemberAccess	frame -> pose
>5098	Identifier	pose
>5099	Identifier	frame
>5100	IdentifierDeclStatement	 
>5101	IdentifierDecl	refToKf
>5102	Identifier	refToKf
>5103	IdentifierDeclType	Sim3
>5104	IfStatement	if ( frame -> getTrackingParent ( ) != activeKeyFrame )
>5105	CompoundStatement	 
>5106	ExpressionStatement	 
>5107	CallExpression	printf ( \"WARNING
>5108	ArgumentList	\"WARNING
>5109	Argument	frame -> getTrackingParent ( ) -> id ( )
>5110	CallExpression	frame -> getTrackingParent ( ) -> id ( )
>5111	ArgumentList	 
>5112	Callee	frame -> getTrackingParent ( ) -> id
>5113	PtrMemberAccess	frame -> getTrackingParent ( ) -> id
>5114	Identifier	id
>5115	CallExpression	frame -> getTrackingParent ( )
>5116	ArgumentList	 
>5117	Callee	frame -> getTrackingParent
>5118	PtrMemberAccess	frame -> getTrackingParent
>5119	Identifier	getTrackingParent
>5120	Identifier	frame
>5121	Argument	frame -> id ( )
>5122	CallExpression	frame -> id ( )
>5123	ArgumentList	 
>5124	Callee	frame -> id
>5125	PtrMemberAccess	frame -> id
>5126	Identifier	id
>5127	Identifier	frame
>5128	Argument	activeKeyFrame -> id ( )
>5129	CallExpression	activeKeyFrame -> id ( )
>5130	ArgumentList	 
>5131	Callee	activeKeyFrame -> id
>5132	PtrMemberAccess	activeKeyFrame -> id
>5133	Identifier	id
>5134	Identifier	activeKeyFrame
>5135	Argument	\"WARNING
>5136	PrimaryExpression	\"WARNING
>5137	Callee	printf
>5138	Identifier	printf
>5139	Condition	 
>5140	EqualityExpression	frame -> getTrackingParent ( ) != activeKeyFrame
>5141	Identifier	activeKeyFrame
>5142	CallExpression	frame -> getTrackingParent ( )
>5143	ArgumentList	 
>5144	Callee	frame -> getTrackingParent
>5145	PtrMemberAccess	frame -> getTrackingParent
>5146	Identifier	getTrackingParent
>5147	Identifier	frame
>5148	ExpressionStatement	 
>5149	CallExpression	assert ( frame -> hasTrackingParent ( ) )
>5150	ArgumentList	frame -> hasTrackingParent ( )
>5151	Argument	frame -> hasTrackingParent ( )
>5152	CallExpression	frame -> hasTrackingParent ( )
>5153	ArgumentList	 
>5154	Callee	frame -> hasTrackingParent
>5155	PtrMemberAccess	frame -> hasTrackingParent
>5156	Identifier	hasTrackingParent
>5157	Identifier	frame
>5158	Callee	assert
>5159	Identifier	assert
>5160	Statement	 
>5161	Statement	 
>5162	Label	 
>5163	Identifier	frame
>5164	Statement	 
>5165	Statement	 
>5166	Statement	 
>5167	Statement	 
>5168	Statement	 
>5169	Statement	 
>5170	Statement	 
>5171	Statement	 
>5172	ExpressionStatement	 
>5173	AssignmentExpr	referenceFrameByID_offset = oldest_referenceFrame -> id ( )
>5174	CallExpression	oldest_referenceFrame -> id ( )
>5175	ArgumentList	 
>5176	Callee	oldest_referenceFrame -> id
>5177	PtrMemberAccess	oldest_referenceFrame -> id
>5178	Identifier	id
>5179	Identifier	oldest_referenceFrame
>5180	Identifier	referenceFrameByID_offset
>5181	ExpressionStatement	 
>5182	CallExpression	referenceFrameByID . clear ( )
>5183	ArgumentList	 
>5184	Callee	referenceFrameByID . clear
>5185	MemberAccess	referenceFrameByID . clear
>5186	Identifier	clear
>5187	Identifier	referenceFrameByID
>5188	ExpressionStatement	 
>5189	AssignmentExpr	newest_referenceFrame = referenceFrames . back ( ) . get ( )
>5190	CallExpression	referenceFrames . back ( ) . get ( )
>5191	ArgumentList	 
>5192	Callee	referenceFrames . back ( ) . get
>5193	MemberAccess	referenceFrames . back ( ) . get
>5194	Identifier	get
>5195	CallExpression	referenceFrames . back ( )
>5196	ArgumentList	 
>5197	Callee	referenceFrames . back
>5198	MemberAccess	referenceFrames . back
>5199	Identifier	back
>5200	Identifier	referenceFrames
>5201	Identifier	newest_referenceFrame
>5202	ExpressionStatement	 
>5203	AssignmentExpr	oldest_referenceFrame = referenceFrames . front ( ) . get ( )
>5204	CallExpression	referenceFrames . front ( ) . get ( )
>5205	ArgumentList	 
>5206	Callee	referenceFrames . front ( ) . get
>5207	MemberAccess	referenceFrames . front ( ) . get
>5208	Identifier	get
>5209	CallExpression	referenceFrames . front ( )
>5210	ArgumentList	 
>5211	Callee	referenceFrames . front
>5212	MemberAccess	referenceFrames . front
>5213	Identifier	front
>5214	Identifier	referenceFrames
>5215	Identifier	oldest_referenceFrame
>5216	ExpressionStatement	 
>5217	CallExpression	gettimeofday ( & tv_start_all , NULL )
>5218	ArgumentList	& tv_start_all
>5219	Argument	NULL
>5220	Identifier	NULL
>5221	Argument	& tv_start_all
>5222	UnaryOp	& tv_start_all
>5223	Identifier	tv_start_all
>5224	UnaryOperator	&
>5225	Callee	gettimeofday
>5226	Identifier	gettimeofday
>5227	IdentifierDeclStatement	 
>5228	IdentifierDecl	tv_end_all
>5229	Identifier	tv_end_all
>5230	IdentifierDeclType	struct timeval
>5231	IdentifierDecl	tv_start_all
>5232	Identifier	tv_start_all
>5233	IdentifierDeclType	struct timeval
>5234	ExpressionStatement	 
>5235	CallExpression	assert ( isValid ( ) )
>5236	ArgumentList	isValid ( )
>5237	Argument	isValid ( )
>5238	CallExpression	isValid ( )
>5239	ArgumentList	 
>5240	Callee	isValid
>5241	Identifier	isValid
>5242	Callee	assert
>5243	Identifier	assert
>5348	FunctionDef	DepthMap 
>5349	ParameterList	 
>5350	ReturnType	void
>5351	CompoundStatement	 
>5352	ExpressionStatement	 
>5353	CallExpression	activeKeyFramelock . unlock ( )
>5354	ArgumentList	 
>5355	Callee	activeKeyFramelock . unlock
>5356	MemberAccess	activeKeyFramelock . unlock
>5357	Identifier	unlock
>5358	Identifier	activeKeyFramelock
>5359	ExpressionStatement	 
>5360	AssignmentExpr	activeKeyFrame = 0
>5361	PrimaryExpression	0
>5362	Identifier	activeKeyFrame
>5363	IfStatement	if ( activeKeyFrame == 0 )
>5364	ReturnStatement	 
>5365	Condition	 
>5366	EqualityExpression	activeKeyFrame == 0
>5367	PrimaryExpression	0
>5368	Identifier	activeKeyFrame
>5374	FunctionDef	DepthMap 
>5375	ParameterList	Frame * new_keyframe
>5376	Parameter	 
>5377	Identifier	new_keyframe
>5378	ParameterType	Frame *
>5379	ReturnType	void
>5380	CompoundStatement	 
>5381	IfStatement	if ( plotStereoImages )
>5382	CompoundStatement	 
>5383	Condition	 
>5384	Identifier	plotStereoImages
>5385	ExpressionStatement	 
>5386	IncDecOp	nCreate ++
>5387	IncDec	++
>5388	Identifier	nCreate
>5389	ExpressionStatement	 
>5390	AssignmentExpr	msCreate = 0.9 * msCreate + 0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_\
>5391	AdditiveExpression	0.9 * msCreate + 0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_\
>5392	MultiplicativeExpression	0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_usec - tv_start_\
>5393	AdditiveExpression	( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_usec - tv_start_all . tv_\
>5394	MultiplicativeExpression	( tv_end_all . tv_usec - tv_start_all . tv_usec ) / 1000.0f
>5395	PrimaryExpression	1000.0f
>5396	AdditiveExpression	tv_end_all . tv_usec - tv_start_all . tv_usec
>5397	MemberAccess	tv_start_all . tv_usec
>5398	Identifier	tv_usec
>5399	Identifier	tv_start_all
>5400	MemberAccess	tv_end_all . tv_usec
>5401	Identifier	tv_usec
>5402	Identifier	tv_end_all
>5403	MultiplicativeExpression	( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f
>5404	PrimaryExpression	1000.0f
>5405	AdditiveExpression	tv_end_all . tv_sec - tv_start_all . tv_sec
>5406	MemberAccess	tv_start_all . tv_sec
>5407	Identifier	tv_sec
>5408	Identifier	tv_start_all
>5409	MemberAccess	tv_end_all . tv_sec
>5410	Identifier	tv_sec
>5411	Identifier	tv_end_all
>5412	PrimaryExpression	0.1
>5413	MultiplicativeExpression	0.9 * msCreate
>5414	Identifier	msCreate
>5415	PrimaryExpression	0.9
>5416	Identifier	msCreate
>5417	ExpressionStatement	 
>5418	CallExpression	gettimeofday ( & tv_end_all , NULL )
>5419	ArgumentList	& tv_end_all
>5420	Argument	NULL
>5421	Identifier	NULL
>5422	Argument	& tv_end_all
>5423	UnaryOp	& tv_end_all
>5424	Identifier	tv_end_all
>5425	UnaryOperator	&
>5426	Callee	gettimeofday
>5427	Identifier	gettimeofday
>5428	ExpressionStatement	 
>5429	IncDecOp	nSetDepth ++
>5430	IncDec	++
>5431	Identifier	nSetDepth
>5432	ExpressionStatement	 
>5433	AssignmentExpr	msSetDepth = 0.9 * msSetDepth + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>5434	AdditiveExpression	0.9 * msSetDepth + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_\
>5435	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>5436	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5437	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5438	PrimaryExpression	1000.0f
>5439	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>5440	MemberAccess	tv_start . tv_usec
>5441	Identifier	tv_usec
>5442	Identifier	tv_start
>5443	MemberAccess	tv_end . tv_usec
>5444	Identifier	tv_usec
>5445	Identifier	tv_end
>5446	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>5447	PrimaryExpression	1000.0f
>5448	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>5449	MemberAccess	tv_start . tv_sec
>5450	Identifier	tv_sec
>5451	Identifier	tv_start
>5452	MemberAccess	tv_end . tv_sec
>5453	Identifier	tv_sec
>5454	Identifier	tv_end
>5455	PrimaryExpression	0.1
>5456	MultiplicativeExpression	0.9 * msSetDepth
>5457	Identifier	msSetDepth
>5458	PrimaryExpression	0.9
>5459	Identifier	msSetDepth
>5460	ExpressionStatement	 
>5461	CallExpression	gettimeofday ( & tv_end , NULL )
>5462	ArgumentList	& tv_end
>5463	Argument	NULL
>5464	Identifier	NULL
>5465	Argument	& tv_end
>5466	UnaryOp	& tv_end
>5467	Identifier	tv_end
>5468	UnaryOperator	&
>5469	Callee	gettimeofday
>5470	Identifier	gettimeofday
>5471	ExpressionStatement	 
>5472	CallExpression	activeKeyFrame -> setDepth ( currentDepthMap )
>5473	ArgumentList	currentDepthMap
>5474	Argument	currentDepthMap
>5475	Identifier	currentDepthMap
>5476	Callee	activeKeyFrame -> setDepth
>5477	PtrMemberAccess	activeKeyFrame -> setDepth
>5478	Identifier	setDepth
>5479	Identifier	activeKeyFrame
>5480	ExpressionStatement	 
>5481	CallExpression	gettimeofday ( & tv_start , NULL )
>5482	ArgumentList	& tv_start
>5483	Argument	NULL
>5484	Identifier	NULL
>5485	Argument	& tv_start
>5486	UnaryOp	& tv_start
>5487	Identifier	tv_start
>5488	UnaryOperator	&
>5489	Callee	gettimeofday
>5490	Identifier	gettimeofday
>5491	ExpressionStatement	 
>5492	CallExpression	activeKeyFrame -> pose -> invalidateCache ( )
>5493	ArgumentList	 
>5494	Callee	activeKeyFrame -> pose -> invalidateCache
>5495	PtrMemberAccess	activeKeyFrame -> pose -> invalidateCache
>5496	Identifier	invalidateCache
>5497	PtrMemberAccess	activeKeyFrame -> pose
>5498	Identifier	pose
>5499	Identifier	activeKeyFrame
>5500	ExpressionStatement	 
>5501	AssignmentExpr	activeKeyFrame -> pose -> thisToParent_raw = sim3FromSE3 ( oldToNew_SE3 . inverse ( ) , rescaleFactor )
>5502	CallExpression	sim3FromSE3 ( oldToNew_SE3 . inverse ( ) , rescaleFactor )
>5503	ArgumentList	oldToNew_SE3 . inverse ( )
>5504	Argument	rescaleFactor
>5505	Identifier	rescaleFactor
>5506	Argument	oldToNew_SE3 . inverse ( )
>5507	CallExpression	oldToNew_SE3 . inverse ( )
>5508	ArgumentList	 
>5509	Callee	oldToNew_SE3 . inverse
>5510	MemberAccess	oldToNew_SE3 . inverse
>5511	Identifier	inverse
>5512	Identifier	oldToNew_SE3
>5513	Callee	sim3FromSE3
>5514	Identifier	sim3FromSE3
>5515	PtrMemberAccess	activeKeyFrame -> pose -> thisToParent_raw
>5516	Identifier	thisToParent_raw
>5517	PtrMemberAccess	activeKeyFrame -> pose
>5518	Identifier	pose
>5519	Identifier	activeKeyFrame
>5520	ForStatement	for ( DepthMapPixelHypothesis * source = currentDepthMap ; source < currentDepthMap + width * height ; source ++ )
>5521	CompoundStatement	 
>5522	ExpressionStatement	 
>5523	AssignmentExpr	source -> idepth_var_smoothed *= rescaleFactor2
>5524	Identifier	rescaleFactor2
>5525	PtrMemberAccess	source -> idepth_var_smoothed
>5526	Identifier	idepth_var_smoothed
>5527	Identifier	source
>5528	ExpressionStatement	 
>5529	AssignmentExpr	source -> idepth_var *= rescaleFactor2
>5530	Identifier	rescaleFactor2
>5531	PtrMemberAccess	source -> idepth_var
>5532	Identifier	idepth_var
>5533	Identifier	source
>5534	ExpressionStatement	 
>5535	AssignmentExpr	source -> idepth_smoothed *= rescaleFactor
>5536	Identifier	rescaleFactor
>5537	PtrMemberAccess	source -> idepth_smoothed
>5538	Identifier	idepth_smoothed
>5539	Identifier	source
>5540	ExpressionStatement	 
>5541	AssignmentExpr	source -> idepth *= rescaleFactor
>5542	Identifier	rescaleFactor
>5543	PtrMemberAccess	source -> idepth
>5544	Identifier	idepth
>5545	Identifier	source
>5546	IfStatement	if ( ! source -> isValid )
>5547	ContinueStatement	 
>5548	Condition	 
>5549	UnaryOp	! source -> isValid
>5550	PtrMemberAccess	source -> isValid
>5551	Identifier	isValid
>5552	Identifier	source
>5553	UnaryOperator	!
>5554	IncDecOp	 
>5555	IncDec	++
>5556	Identifier	source
>5557	Condition	 
>5558	RelationalExpression	source < currentDepthMap + width * height
>5559	AdditiveExpression	currentDepthMap + width * height
>5560	MultiplicativeExpression	width * height
>5561	Identifier	height
>5562	Identifier	width
>5563	Identifier	currentDepthMap
>5564	Identifier	source
>5565	ForInit	 
>5566	IdentifierDeclStatement	DepthMapPixelHypothesis * source = currentDepthMap ;
>5567	IdentifierDecl	* source = currentDepthMap
>5568	AssignmentExpr	* source = currentDepthMap
>5569	Identifier	currentDepthMap
>5570	Identifier	currentDepthMap
>5571	Identifier	source
>5572	IdentifierDeclType	DepthMapPixelHypothesis *
>5573	IdentifierDeclStatement	 
>5574	IdentifierDecl	rescaleFactor2 = rescaleFactor * rescaleFactor
>5575	AssignmentExpr	rescaleFactor2 = rescaleFactor * rescaleFactor
>5576	MultiplicativeExpression	rescaleFactor * rescaleFactor
>5577	Identifier	rescaleFactor
>5578	Identifier	rescaleFactor
>5579	Identifier	rescaleFactor2
>5580	Identifier	rescaleFactor2
>5581	IdentifierDeclType	float
>5582	IdentifierDeclStatement	 
>5583	IdentifierDecl	rescaleFactor = numIdepth / sumIdepth
>5584	AssignmentExpr	rescaleFactor = numIdepth / sumIdepth
>5585	MultiplicativeExpression	numIdepth / sumIdepth
>5586	Identifier	sumIdepth
>5587	Identifier	numIdepth
>5588	Identifier	rescaleFactor
>5589	Identifier	rescaleFactor
>5590	IdentifierDeclType	float
>5591	ForStatement	for ( DepthMapPixelHypothesis * source = currentDepthMap ; source < currentDepthMap + width * height ; source ++ )
>5592	CompoundStatement	 
>5593	ExpressionStatement	 
>5594	IncDecOp	numIdepth ++
>5595	IncDec	++
>5596	Identifier	numIdepth
>5597	ExpressionStatement	 
>5598	AssignmentExpr	sumIdepth += source -> idepth_smoothed
>5599	PtrMemberAccess	source -> idepth_smoothed
>5600	Identifier	idepth_smoothed
>5601	Identifier	source
>5602	Identifier	sumIdepth
>5603	IfStatement	if ( ! source -> isValid )
>5604	ContinueStatement	 
>5605	Condition	 
>5606	UnaryOp	! source -> isValid
>5607	PtrMemberAccess	source -> isValid
>5608	Identifier	isValid
>5609	Identifier	source
>5610	UnaryOperator	!
>5611	IncDecOp	 
>5612	IncDec	++
>5613	Identifier	source
>5614	Condition	 
>5615	RelationalExpression	source < currentDepthMap + width * height
>5616	AdditiveExpression	currentDepthMap + width * height
>5617	MultiplicativeExpression	width * height
>5618	Identifier	height
>5619	Identifier	width
>5620	Identifier	currentDepthMap
>5621	Identifier	source
>5622	ForInit	 
>5623	IdentifierDeclStatement	DepthMapPixelHypothesis * source = currentDepthMap ;
>5624	IdentifierDecl	* source = currentDepthMap
>5625	AssignmentExpr	* source = currentDepthMap
>5626	Identifier	currentDepthMap
>5627	Identifier	currentDepthMap
>5628	Identifier	source
>5629	IdentifierDeclType	DepthMapPixelHypothesis *
>5630	IdentifierDeclStatement	 
>5631	IdentifierDecl	numIdepth = 0
>5632	AssignmentExpr	numIdepth = 0
>5633	PrimaryExpression	0
>5634	Identifier	numIdepth
>5635	Identifier	numIdepth
>5636	IdentifierDeclType	float
>5637	IdentifierDecl	sumIdepth = 0
>5638	AssignmentExpr	sumIdepth = 0
>5639	PrimaryExpression	0
>5640	Identifier	sumIdepth
>5641	Identifier	sumIdepth
>5642	IdentifierDeclType	float
>5643	ExpressionStatement	 
>5644	IncDecOp	nRegularize ++
>5645	IncDec	++
>5646	Identifier	nRegularize
>5647	ExpressionStatement	 
>5648	AssignmentExpr	msRegularize = 0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_\
>5649	AdditiveExpression	0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>5650	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>5651	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5652	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5653	PrimaryExpression	1000.0f
>5654	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>5655	MemberAccess	tv_start . tv_usec
>5656	Identifier	tv_usec
>5657	Identifier	tv_start
>5658	MemberAccess	tv_end . tv_usec
>5659	Identifier	tv_usec
>5660	Identifier	tv_end
>5661	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>5662	PrimaryExpression	1000.0f
>5663	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>5664	MemberAccess	tv_start . tv_sec
>5665	Identifier	tv_sec
>5666	Identifier	tv_start
>5667	MemberAccess	tv_end . tv_sec
>5668	Identifier	tv_sec
>5669	Identifier	tv_end
>5670	PrimaryExpression	0.1
>5671	MultiplicativeExpression	0.9 * msRegularize
>5672	Identifier	msRegularize
>5673	PrimaryExpression	0.9
>5674	Identifier	msRegularize
>5675	ExpressionStatement	 
>5676	CallExpression	gettimeofday ( & tv_end , NULL )
>5677	ArgumentList	& tv_end
>5678	Argument	NULL
>5679	Identifier	NULL
>5680	Argument	& tv_end
>5681	UnaryOp	& tv_end
>5682	Identifier	tv_end
>5683	UnaryOperator	&
>5684	Callee	gettimeofday
>5685	Identifier	gettimeofday
>5686	ExpressionStatement	 
>5687	CallExpression	regularizeDepthMap ( false , VAL_SUM_MIN_FOR_KEEP )
>5688	ArgumentList	false
>5689	Argument	VAL_SUM_MIN_FOR_KEEP
>5690	Identifier	VAL_SUM_MIN_FOR_KEEP
>5691	Argument	false
>5692	Identifier	false
>5693	Callee	regularizeDepthMap
>5694	Identifier	regularizeDepthMap
>5695	ExpressionStatement	 
>5696	CallExpression	gettimeofday ( & tv_start , NULL )
>5697	ArgumentList	& tv_start
>5698	Argument	NULL
>5699	Identifier	NULL
>5700	Argument	& tv_start
>5701	UnaryOp	& tv_start
>5702	Identifier	tv_start
>5703	UnaryOperator	&
>5704	Callee	gettimeofday
>5705	Identifier	gettimeofday
>5706	ExpressionStatement	 
>5707	IncDecOp	nFillHoles ++
>5708	IncDec	++
>5709	Identifier	nFillHoles
>5710	ExpressionStatement	 
>5711	AssignmentExpr	msFillHoles = 0.9 * msFillHoles + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>5712	AdditiveExpression	0.9 * msFillHoles + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>5713	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>5714	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5715	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5716	PrimaryExpression	1000.0f
>5717	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>5718	MemberAccess	tv_start . tv_usec
>5719	Identifier	tv_usec
>5720	Identifier	tv_start
>5721	MemberAccess	tv_end . tv_usec
>5722	Identifier	tv_usec
>5723	Identifier	tv_end
>5724	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>5725	PrimaryExpression	1000.0f
>5726	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>5727	MemberAccess	tv_start . tv_sec
>5728	Identifier	tv_sec
>5729	Identifier	tv_start
>5730	MemberAccess	tv_end . tv_sec
>5731	Identifier	tv_sec
>5732	Identifier	tv_end
>5733	PrimaryExpression	0.1
>5734	MultiplicativeExpression	0.9 * msFillHoles
>5735	Identifier	msFillHoles
>5736	PrimaryExpression	0.9
>5737	Identifier	msFillHoles
>5738	ExpressionStatement	 
>5739	CallExpression	gettimeofday ( & tv_end , NULL )
>5740	ArgumentList	& tv_end
>5741	Argument	NULL
>5742	Identifier	NULL
>5743	Argument	& tv_end
>5744	UnaryOp	& tv_end
>5745	Identifier	tv_end
>5746	UnaryOperator	&
>5747	Callee	gettimeofday
>5748	Identifier	gettimeofday
>5749	ExpressionStatement	 
>5750	CallExpression	regularizeDepthMapFillHoles ( )
>5751	ArgumentList	 
>5752	Callee	regularizeDepthMapFillHoles
>5753	Identifier	regularizeDepthMapFillHoles
>5754	ExpressionStatement	 
>5755	CallExpression	gettimeofday ( & tv_start , NULL )
>5756	ArgumentList	& tv_start
>5757	Argument	NULL
>5758	Identifier	NULL
>5759	Argument	& tv_start
>5760	UnaryOp	& tv_start
>5761	Identifier	tv_start
>5762	UnaryOperator	&
>5763	Callee	gettimeofday
>5764	Identifier	gettimeofday
>5765	ExpressionStatement	 
>5766	IncDecOp	nRegularize ++
>5767	IncDec	++
>5768	Identifier	nRegularize
>5769	ExpressionStatement	 
>5770	AssignmentExpr	msRegularize = 0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_\
>5771	AdditiveExpression	0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>5772	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>5773	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5774	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5775	PrimaryExpression	1000.0f
>5776	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>5777	MemberAccess	tv_start . tv_usec
>5778	Identifier	tv_usec
>5779	Identifier	tv_start
>5780	MemberAccess	tv_end . tv_usec
>5781	Identifier	tv_usec
>5782	Identifier	tv_end
>5783	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>5784	PrimaryExpression	1000.0f
>5785	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>5786	MemberAccess	tv_start . tv_sec
>5787	Identifier	tv_sec
>5788	Identifier	tv_start
>5789	MemberAccess	tv_end . tv_sec
>5790	Identifier	tv_sec
>5791	Identifier	tv_end
>5792	PrimaryExpression	0.1
>5793	MultiplicativeExpression	0.9 * msRegularize
>5794	Identifier	msRegularize
>5795	PrimaryExpression	0.9
>5796	Identifier	msRegularize
>5797	ExpressionStatement	 
>5798	CallExpression	gettimeofday ( & tv_end , NULL )
>5799	ArgumentList	& tv_end
>5800	Argument	NULL
>5801	Identifier	NULL
>5802	Argument	& tv_end
>5803	UnaryOp	& tv_end
>5804	Identifier	tv_end
>5805	UnaryOperator	&
>5806	Callee	gettimeofday
>5807	Identifier	gettimeofday
>5808	ExpressionStatement	 
>5809	CallExpression	regularizeDepthMap ( true , VAL_SUM_MIN_FOR_KEEP )
>5810	ArgumentList	true
>5811	Argument	VAL_SUM_MIN_FOR_KEEP
>5812	Identifier	VAL_SUM_MIN_FOR_KEEP
>5813	Argument	true
>5814	Identifier	true
>5815	Callee	regularizeDepthMap
>5816	Identifier	regularizeDepthMap
>5817	ExpressionStatement	 
>5818	CallExpression	gettimeofday ( & tv_start , NULL )
>5819	ArgumentList	& tv_start
>5820	Argument	NULL
>5821	Identifier	NULL
>5822	Argument	& tv_start
>5823	UnaryOp	& tv_start
>5824	Identifier	tv_start
>5825	UnaryOperator	&
>5826	Callee	gettimeofday
>5827	Identifier	gettimeofday
>5828	ExpressionStatement	 
>5829	AssignmentExpr	activeKeyFrameIsReactivated = false
>5830	Identifier	false
>5831	Identifier	activeKeyFrameIsReactivated
>5832	ExpressionStatement	 
>5833	AssignmentExpr	activeKeyFrameImageData = new_keyframe -> image ( 0 )
>5834	CallExpression	new_keyframe -> image ( 0 )
>5835	ArgumentList	0
>5836	Argument	0
>5837	PrimaryExpression	0
>5838	Callee	new_keyframe -> image
>5839	PtrMemberAccess	new_keyframe -> image
>5840	Identifier	image
>5841	Identifier	new_keyframe
>5842	Identifier	activeKeyFrameImageData
>5843	ExpressionStatement	 
>5844	AssignmentExpr	activeKeyFramelock = activeKeyFrame -> getActiveLock ( )
>5845	CallExpression	activeKeyFrame -> getActiveLock ( )
>5846	ArgumentList	 
>5847	Callee	activeKeyFrame -> getActiveLock
>5848	PtrMemberAccess	activeKeyFrame -> getActiveLock
>5849	Identifier	getActiveLock
>5850	Identifier	activeKeyFrame
>5851	Identifier	activeKeyFramelock
>5852	ExpressionStatement	 
>5853	AssignmentExpr	activeKeyFrame = new_keyframe
>5854	Identifier	new_keyframe
>5855	Identifier	activeKeyFrame
>5856	ExpressionStatement	 
>5857	IncDecOp	nPropagate ++
>5858	IncDec	++
>5859	Identifier	nPropagate
>5860	ExpressionStatement	 
>5861	AssignmentExpr	msPropagate = 0.9 * msPropagate + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>5862	AdditiveExpression	0.9 * msPropagate + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>5863	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>5864	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5865	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>5866	PrimaryExpression	1000.0f
>5867	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>5868	MemberAccess	tv_start . tv_usec
>5869	Identifier	tv_usec
>5870	Identifier	tv_start
>5871	MemberAccess	tv_end . tv_usec
>5872	Identifier	tv_usec
>5873	Identifier	tv_end
>5874	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>5875	PrimaryExpression	1000.0f
>5876	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>5877	MemberAccess	tv_start . tv_sec
>5878	Identifier	tv_sec
>5879	Identifier	tv_start
>5880	MemberAccess	tv_end . tv_sec
>5881	Identifier	tv_sec
>5882	Identifier	tv_end
>5883	PrimaryExpression	0.1
>5884	MultiplicativeExpression	0.9 * msPropagate
>5885	Identifier	msPropagate
>5886	PrimaryExpression	0.9
>5887	Identifier	msPropagate
>5888	ExpressionStatement	 
>5889	CallExpression	gettimeofday ( & tv_end , NULL )
>5890	ArgumentList	& tv_end
>5891	Argument	NULL
>5892	Identifier	NULL
>5893	Argument	& tv_end
>5894	UnaryOp	& tv_end
>5895	Identifier	tv_end
>5896	UnaryOperator	&
>5897	Callee	gettimeofday
>5898	Identifier	gettimeofday
>5899	ExpressionStatement	 
>5900	CallExpression	propagateDepth ( new_keyframe )
>5901	ArgumentList	new_keyframe
>5902	Argument	new_keyframe
>5903	Identifier	new_keyframe
>5904	Callee	propagateDepth
>5905	Identifier	propagateDepth
>5906	ExpressionStatement	 
>5907	CallExpression	gettimeofday ( & tv_start , NULL )
>5908	ArgumentList	& tv_start
>5909	Argument	NULL
>5910	Identifier	NULL
>5911	Argument	& tv_start
>5912	UnaryOp	& tv_start
>5913	Identifier	tv_start
>5914	UnaryOperator	&
>5915	Callee	gettimeofday
>5916	Identifier	gettimeofday
>5917	IdentifierDeclStatement	 
>5918	IdentifierDecl	tv_end
>5919	Identifier	tv_end
>5920	IdentifierDeclType	struct timeval
>5921	IdentifierDecl	tv_start
>5922	Identifier	tv_start
>5923	IdentifierDeclType	struct timeval
>5924	IdentifierDeclStatement	 
>5925	IdentifierDecl	oldToNew_SE3 = se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse ( )
>5926	AssignmentExpr	oldToNew_SE3 = se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse ( )
>5927	CallExpression	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse ( )
>5928	ArgumentList	 
>5929	Callee	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse
>5930	MemberAccess	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw ) . inverse
>5931	Identifier	inverse
>5932	CallExpression	se3FromSim3 ( new_keyframe -> pose -> thisToParent_raw )
>5933	ArgumentList	new_keyframe -> pose -> thisToParent_raw
>5934	Argument	new_keyframe -> pose -> thisToParent_raw
>5935	PtrMemberAccess	new_keyframe -> pose -> thisToParent_raw
>5936	Identifier	thisToParent_raw
>5937	PtrMemberAccess	new_keyframe -> pose
>5938	Identifier	pose
>5939	Identifier	new_keyframe
>5940	Callee	se3FromSim3
>5941	Identifier	se3FromSim3
>5942	Identifier	oldToNew_SE3
>5943	Identifier	oldToNew_SE3
>5944	IdentifierDeclType	SE3
>5945	IfStatement	if ( plotStereoImages )
>5946	CompoundStatement	 
>5947	ExpressionStatement	 
>5948	CallExpression	cv 
>5949	ArgumentList	debugImageHypothesisPropagation
>5950	Argument	CV_GRAY2RGB
>5951	Identifier	CV_GRAY2RGB
>5952	Argument	debugImageHypothesisPropagation
>5953	Identifier	debugImageHypothesisPropagation
>5954	Argument	debugImageHypothesisPropagation
>5955	Identifier	debugImageHypothesisPropagation
>5956	Callee	cv 
>5957	Identifier	cv 
>5958	ExpressionStatement	 
>5959	CallExpression	keyFrameImage . convertTo ( debugImageHypothesisPropagation , CV_8UC1 )
>5960	ArgumentList	debugImageHypothesisPropagation
>5961	Argument	CV_8UC1
>5962	Identifier	CV_8UC1
>5963	Argument	debugImageHypothesisPropagation
>5964	Identifier	debugImageHypothesisPropagation
>5965	Callee	keyFrameImage . convertTo
>5966	MemberAccess	keyFrameImage . convertTo
>5967	Identifier	convertTo
>5968	Identifier	keyFrameImage
>5969	ExpressionStatement	 
>5970	Statement	 
>5971	Statement	 
>5972	Statement	 
>5973	Statement	 
>5974	Statement	 
>5975	Statement	 
>5976	Statement	 
>5977	Statement	 
>5978	Statement	 
>5979	Statement	 
>5980	Statement	 
>5981	Statement	 
>5982	Statement	 
>5983	Statement	 
>5984	Statement	 
>5985	Statement	 
>5986	Statement	 
>5987	Statement	 
>5988	Statement	 
>5989	Statement	 
>5990	Statement	 
>5991	Statement	 
>5992	Statement	 
>5993	Statement	 
>5994	Statement	 
>5995	Statement	 
>5996	Statement	 
>5997	Statement	 
>5998	Statement	 
>5999	Statement	 
>6000	Statement	 
>6001	Statement	 
>6002	Statement	 
>6003	Condition	 
>6004	Identifier	plotStereoImages
>6005	ExpressionStatement	 
>6006	CallExpression	resetCounters ( )
>6007	ArgumentList	 
>6008	Callee	resetCounters
>6009	Identifier	resetCounters
>6010	ExpressionStatement	 
>6011	CallExpression	gettimeofday ( & tv_start_all , NULL )
>6012	ArgumentList	& tv_start_all
>6013	Argument	NULL
>6014	Identifier	NULL
>6015	Argument	& tv_start_all
>6016	UnaryOp	& tv_start_all
>6017	Identifier	tv_start_all
>6018	UnaryOperator	&
>6019	Callee	gettimeofday
>6020	Identifier	gettimeofday
>6021	IdentifierDeclStatement	 
>6022	IdentifierDecl	tv_end_all
>6023	Identifier	tv_end_all
>6024	IdentifierDeclType	struct timeval
>6025	IdentifierDecl	tv_start_all
>6026	Identifier	tv_start_all
>6027	IdentifierDeclType	struct timeval
>6028	IdentifierDeclStatement	 
>6029	IdentifierDecl	lock2 = new_keyframe -> getActiveLock ( )
>6030	AssignmentExpr	lock2 = new_keyframe -> getActiveLock ( )
>6031	CallExpression	new_keyframe -> getActiveLock ( )
>6032	ArgumentList	 
>6033	Callee	new_keyframe -> getActiveLock
>6034	PtrMemberAccess	new_keyframe -> getActiveLock
>6035	Identifier	getActiveLock
>6036	Identifier	new_keyframe
>6037	Identifier	lock2
>6038	Identifier	lock2
>6039	IdentifierDeclType	boost 
>6040	ExpressionStatement	 
>6041	CallExpression	assert ( new_keyframe -> hasTrackingParent ( ) )
>6042	ArgumentList	new_keyframe -> hasTrackingParent ( )
>6043	Argument	new_keyframe -> hasTrackingParent ( )
>6044	CallExpression	new_keyframe -> hasTrackingParent ( )
>6045	ArgumentList	 
>6046	Callee	new_keyframe -> hasTrackingParent
>6047	PtrMemberAccess	new_keyframe -> hasTrackingParent
>6048	Identifier	hasTrackingParent
>6049	Identifier	new_keyframe
>6050	Callee	assert
>6051	Identifier	assert
>6052	ExpressionStatement	 
>6053	CallExpression	assert ( new_keyframe != nullptr )
>6054	ArgumentList	new_keyframe != nullptr
>6055	Argument	new_keyframe != nullptr
>6056	EqualityExpression	new_keyframe != nullptr
>6057	Identifier	nullptr
>6058	Identifier	new_keyframe
>6059	Callee	assert
>6060	Identifier	assert
>6061	ExpressionStatement	 
>6062	CallExpression	assert ( isValid ( ) )
>6063	ArgumentList	isValid ( )
>6064	Argument	isValid ( )
>6065	CallExpression	isValid ( )
>6066	ArgumentList	 
>6067	Callee	isValid
>6068	Identifier	isValid
>6069	Callee	assert
>6070	Identifier	assert
>6150	FunctionDef	DepthMap 
>6151	ParameterList	 
>6152	ReturnType	void
>6153	CompoundStatement	 
>6154	IfStatement	if ( sPassed > 1.0f )
>6155	CompoundStatement	 
>6156	IfStatement	if ( enablePrintDebugInfo && printMappingTiming )
>6157	CompoundStatement	 
>6158	ExpressionStatement	 
>6159	CallExpression	printf ( \"Upd %3.1fms (%.1fHz); Create %3.1fms (%.1fHz); Final %3.1fms (%.1fHz) // Obs %3.1fms (%.1fHz); Reg %3.1fms (%\
>6160	ArgumentList	\"Upd %3.1fms (%.1fHz); Create %3.1fms (%.1fHz); Final %3.1fms (%.1fHz) // Obs %3.1fms (%.1fHz); Reg %3.1fms (%.1fHz); \
>6161	Argument	nAvgSetDepth
>6162	Identifier	nAvgSetDepth
>6163	Argument	msSetDepth
>6164	Identifier	msSetDepth
>6165	Argument	nAvgFillHoles
>6166	Identifier	nAvgFillHoles
>6167	Argument	msFillHoles
>6168	Identifier	msFillHoles
>6169	Argument	nAvgPropagate
>6170	Identifier	nAvgPropagate
>6171	Argument	msPropagate
>6172	Identifier	msPropagate
>6173	Argument	nAvgRegularize
>6174	Identifier	nAvgRegularize
>6175	Argument	msRegularize
>6176	Identifier	msRegularize
>6177	Argument	nAvgObserve
>6178	Identifier	nAvgObserve
>6179	Argument	msObserve
>6180	Identifier	msObserve
>6181	Argument	nAvgFinalize
>6182	Identifier	nAvgFinalize
>6183	Argument	msFinalize
>6184	Identifier	msFinalize
>6185	Argument	nAvgCreate
>6186	Identifier	nAvgCreate
>6187	Argument	msCreate
>6188	Identifier	msCreate
>6189	Argument	nAvgUpdate
>6190	Identifier	nAvgUpdate
>6191	Argument	msUpdate
>6192	Identifier	msUpdate
>6193	Argument	\"Upd %3.1fms (%.1fHz); Create %3.1fms (%.1fHz); Final %3.1fms (%.1fHz) // Obs %3.1fms (%.1fHz); Reg %3.1fms (%.1fHz); \
>6194	PrimaryExpression	\"Upd %3.1fms (%.1fHz); Create %3.1fms (%.1fHz); Final %3.1fms (%.1fHz) // Obs %3.1fms (%.1fHz); Reg %3.1fms (%.1fHz); \
>6195	Callee	printf
>6196	Identifier	printf
>6197	Condition	 
>6198	AndExpression	enablePrintDebugInfo && printMappingTiming
>6199	Identifier	printMappingTiming
>6200	Identifier	enablePrintDebugInfo
>6201	ExpressionStatement	 
>6202	AssignmentExpr	lastHzUpdate = now
>6203	Identifier	now
>6204	Identifier	lastHzUpdate
>6205	ExpressionStatement	 
>6206	AssignmentExpr	nSetDepth = 0
>6207	PrimaryExpression	0
>6208	Identifier	nSetDepth
>6209	ExpressionStatement	 
>6210	AssignmentExpr	nAvgSetDepth = 0.8 * nAvgSetDepth + 0.2 * ( nSetDepth / sPassed )
>6211	AdditiveExpression	0.8 * nAvgSetDepth + 0.2 * ( nSetDepth / sPassed )
>6212	MultiplicativeExpression	0.2 * ( nSetDepth / sPassed )
>6213	MultiplicativeExpression	nSetDepth / sPassed
>6214	Identifier	sPassed
>6215	Identifier	nSetDepth
>6216	PrimaryExpression	0.2
>6217	MultiplicativeExpression	0.8 * nAvgSetDepth
>6218	Identifier	nAvgSetDepth
>6219	PrimaryExpression	0.8
>6220	Identifier	nAvgSetDepth
>6221	ExpressionStatement	 
>6222	AssignmentExpr	nFillHoles = 0
>6223	PrimaryExpression	0
>6224	Identifier	nFillHoles
>6225	ExpressionStatement	 
>6226	AssignmentExpr	nAvgFillHoles = 0.8 * nAvgFillHoles + 0.2 * ( nFillHoles / sPassed )
>6227	AdditiveExpression	0.8 * nAvgFillHoles + 0.2 * ( nFillHoles / sPassed )
>6228	MultiplicativeExpression	0.2 * ( nFillHoles / sPassed )
>6229	MultiplicativeExpression	nFillHoles / sPassed
>6230	Identifier	sPassed
>6231	Identifier	nFillHoles
>6232	PrimaryExpression	0.2
>6233	MultiplicativeExpression	0.8 * nAvgFillHoles
>6234	Identifier	nAvgFillHoles
>6235	PrimaryExpression	0.8
>6236	Identifier	nAvgFillHoles
>6237	ExpressionStatement	 
>6238	AssignmentExpr	nPropagate = 0
>6239	PrimaryExpression	0
>6240	Identifier	nPropagate
>6241	ExpressionStatement	 
>6242	AssignmentExpr	nAvgPropagate = 0.8 * nAvgPropagate + 0.2 * ( nPropagate / sPassed )
>6243	AdditiveExpression	0.8 * nAvgPropagate + 0.2 * ( nPropagate / sPassed )
>6244	MultiplicativeExpression	0.2 * ( nPropagate / sPassed )
>6245	MultiplicativeExpression	nPropagate / sPassed
>6246	Identifier	sPassed
>6247	Identifier	nPropagate
>6248	PrimaryExpression	0.2
>6249	MultiplicativeExpression	0.8 * nAvgPropagate
>6250	Identifier	nAvgPropagate
>6251	PrimaryExpression	0.8
>6252	Identifier	nAvgPropagate
>6253	ExpressionStatement	 
>6254	AssignmentExpr	nRegularize = 0
>6255	PrimaryExpression	0
>6256	Identifier	nRegularize
>6257	ExpressionStatement	 
>6258	AssignmentExpr	nAvgRegularize = 0.8 * nAvgRegularize + 0.2 * ( nRegularize / sPassed )
>6259	AdditiveExpression	0.8 * nAvgRegularize + 0.2 * ( nRegularize / sPassed )
>6260	MultiplicativeExpression	0.2 * ( nRegularize / sPassed )
>6261	MultiplicativeExpression	nRegularize / sPassed
>6262	Identifier	sPassed
>6263	Identifier	nRegularize
>6264	PrimaryExpression	0.2
>6265	MultiplicativeExpression	0.8 * nAvgRegularize
>6266	Identifier	nAvgRegularize
>6267	PrimaryExpression	0.8
>6268	Identifier	nAvgRegularize
>6269	ExpressionStatement	 
>6270	AssignmentExpr	nObserve = 0
>6271	PrimaryExpression	0
>6272	Identifier	nObserve
>6273	ExpressionStatement	 
>6274	AssignmentExpr	nAvgObserve = 0.8 * nAvgObserve + 0.2 * ( nObserve / sPassed )
>6275	AdditiveExpression	0.8 * nAvgObserve + 0.2 * ( nObserve / sPassed )
>6276	MultiplicativeExpression	0.2 * ( nObserve / sPassed )
>6277	MultiplicativeExpression	nObserve / sPassed
>6278	Identifier	sPassed
>6279	Identifier	nObserve
>6280	PrimaryExpression	0.2
>6281	MultiplicativeExpression	0.8 * nAvgObserve
>6282	Identifier	nAvgObserve
>6283	PrimaryExpression	0.8
>6284	Identifier	nAvgObserve
>6285	ExpressionStatement	 
>6286	AssignmentExpr	nFinalize = 0
>6287	PrimaryExpression	0
>6288	Identifier	nFinalize
>6289	ExpressionStatement	 
>6290	AssignmentExpr	nAvgFinalize = 0.8 * nAvgFinalize + 0.2 * ( nFinalize / sPassed )
>6291	AdditiveExpression	0.8 * nAvgFinalize + 0.2 * ( nFinalize / sPassed )
>6292	MultiplicativeExpression	0.2 * ( nFinalize / sPassed )
>6293	MultiplicativeExpression	nFinalize / sPassed
>6294	Identifier	sPassed
>6295	Identifier	nFinalize
>6296	PrimaryExpression	0.2
>6297	MultiplicativeExpression	0.8 * nAvgFinalize
>6298	Identifier	nAvgFinalize
>6299	PrimaryExpression	0.8
>6300	Identifier	nAvgFinalize
>6301	ExpressionStatement	 
>6302	AssignmentExpr	nCreate = 0
>6303	PrimaryExpression	0
>6304	Identifier	nCreate
>6305	ExpressionStatement	 
>6306	AssignmentExpr	nAvgCreate = 0.8 * nAvgCreate + 0.2 * ( nCreate / sPassed )
>6307	AdditiveExpression	0.8 * nAvgCreate + 0.2 * ( nCreate / sPassed )
>6308	MultiplicativeExpression	0.2 * ( nCreate / sPassed )
>6309	MultiplicativeExpression	nCreate / sPassed
>6310	Identifier	sPassed
>6311	Identifier	nCreate
>6312	PrimaryExpression	0.2
>6313	MultiplicativeExpression	0.8 * nAvgCreate
>6314	Identifier	nAvgCreate
>6315	PrimaryExpression	0.8
>6316	Identifier	nAvgCreate
>6317	ExpressionStatement	 
>6318	AssignmentExpr	nUpdate = 0
>6319	PrimaryExpression	0
>6320	Identifier	nUpdate
>6321	ExpressionStatement	 
>6322	AssignmentExpr	nAvgUpdate = 0.8 * nAvgUpdate + 0.2 * ( nUpdate / sPassed )
>6323	AdditiveExpression	0.8 * nAvgUpdate + 0.2 * ( nUpdate / sPassed )
>6324	MultiplicativeExpression	0.2 * ( nUpdate / sPassed )
>6325	MultiplicativeExpression	nUpdate / sPassed
>6326	Identifier	sPassed
>6327	Identifier	nUpdate
>6328	PrimaryExpression	0.2
>6329	MultiplicativeExpression	0.8 * nAvgUpdate
>6330	Identifier	nAvgUpdate
>6331	PrimaryExpression	0.8
>6332	Identifier	nAvgUpdate
>6333	Condition	 
>6334	RelationalExpression	sPassed > 1.0f
>6335	PrimaryExpression	1.0f
>6336	Identifier	sPassed
>6337	IdentifierDeclStatement	 
>6338	IdentifierDecl	sPassed = ( ( now . tv_sec - lastHzUpdate . tv_sec ) + ( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f )
>6339	AssignmentExpr	sPassed = ( ( now . tv_sec - lastHzUpdate . tv_sec ) + ( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f )
>6340	AdditiveExpression	( now . tv_sec - lastHzUpdate . tv_sec ) + ( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f
>6341	MultiplicativeExpression	( now . tv_usec - lastHzUpdate . tv_usec ) / 1000000.0f
>6342	PrimaryExpression	1000000.0f
>6343	AdditiveExpression	now . tv_usec - lastHzUpdate . tv_usec
>6344	MemberAccess	lastHzUpdate . tv_usec
>6345	Identifier	tv_usec
>6346	Identifier	lastHzUpdate
>6347	MemberAccess	now . tv_usec
>6348	Identifier	tv_usec
>6349	Identifier	now
>6350	AdditiveExpression	now . tv_sec - lastHzUpdate . tv_sec
>6351	MemberAccess	lastHzUpdate . tv_sec
>6352	Identifier	tv_sec
>6353	Identifier	lastHzUpdate
>6354	MemberAccess	now . tv_sec
>6355	Identifier	tv_sec
>6356	Identifier	now
>6357	Identifier	sPassed
>6358	Identifier	sPassed
>6359	IdentifierDeclType	float
>6360	ExpressionStatement	 
>6361	CallExpression	gettimeofday ( & now , NULL )
>6362	ArgumentList	& now
>6363	Argument	NULL
>6364	Identifier	NULL
>6365	Argument	& now
>6366	UnaryOp	& now
>6367	Identifier	now
>6368	UnaryOperator	&
>6369	Callee	gettimeofday
>6370	Identifier	gettimeofday
>6371	IdentifierDeclStatement	 
>6372	IdentifierDecl	now
>6373	Identifier	now
>6374	IdentifierDeclType	struct timeval
>6413	FunctionDef	DepthMap 
>6414	ParameterList	 
>6415	ReturnType	void
>6416	CompoundStatement	 
>6417	ExpressionStatement	 
>6418	IncDecOp	nFinalize ++
>6419	IncDec	++
>6420	Identifier	nFinalize
>6421	ExpressionStatement	 
>6422	AssignmentExpr	msFinalize = 0.9 * msFinalize + 0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( \
>6423	AdditiveExpression	0.9 * msFinalize + 0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . \
>6424	MultiplicativeExpression	0.1 * ( ( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_usec - tv_start_\
>6425	AdditiveExpression	( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f + ( tv_end_all . tv_usec - tv_start_all . tv_\
>6426	MultiplicativeExpression	( tv_end_all . tv_usec - tv_start_all . tv_usec ) / 1000.0f
>6427	PrimaryExpression	1000.0f
>6428	AdditiveExpression	tv_end_all . tv_usec - tv_start_all . tv_usec
>6429	MemberAccess	tv_start_all . tv_usec
>6430	Identifier	tv_usec
>6431	Identifier	tv_start_all
>6432	MemberAccess	tv_end_all . tv_usec
>6433	Identifier	tv_usec
>6434	Identifier	tv_end_all
>6435	MultiplicativeExpression	( tv_end_all . tv_sec - tv_start_all . tv_sec ) * 1000.0f
>6436	PrimaryExpression	1000.0f
>6437	AdditiveExpression	tv_end_all . tv_sec - tv_start_all . tv_sec
>6438	MemberAccess	tv_start_all . tv_sec
>6439	Identifier	tv_sec
>6440	Identifier	tv_start_all
>6441	MemberAccess	tv_end_all . tv_sec
>6442	Identifier	tv_sec
>6443	Identifier	tv_end_all
>6444	PrimaryExpression	0.1
>6445	MultiplicativeExpression	0.9 * msFinalize
>6446	Identifier	msFinalize
>6447	PrimaryExpression	0.9
>6448	Identifier	msFinalize
>6449	ExpressionStatement	 
>6450	CallExpression	gettimeofday ( & tv_end_all , NULL )
>6451	ArgumentList	& tv_end_all
>6452	Argument	NULL
>6453	Identifier	NULL
>6454	Argument	& tv_end_all
>6455	UnaryOp	& tv_end_all
>6456	Identifier	tv_end_all
>6457	UnaryOperator	&
>6458	Callee	gettimeofday
>6459	Identifier	gettimeofday
>6460	ExpressionStatement	 
>6461	IncDecOp	nSetDepth ++
>6462	IncDec	++
>6463	Identifier	nSetDepth
>6464	ExpressionStatement	 
>6465	AssignmentExpr	msSetDepth = 0.9 * msSetDepth + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>6466	AdditiveExpression	0.9 * msSetDepth + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_\
>6467	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>6468	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>6469	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>6470	PrimaryExpression	1000.0f
>6471	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>6472	MemberAccess	tv_start . tv_usec
>6473	Identifier	tv_usec
>6474	Identifier	tv_start
>6475	MemberAccess	tv_end . tv_usec
>6476	Identifier	tv_usec
>6477	Identifier	tv_end
>6478	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>6479	PrimaryExpression	1000.0f
>6480	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>6481	MemberAccess	tv_start . tv_sec
>6482	Identifier	tv_sec
>6483	Identifier	tv_start
>6484	MemberAccess	tv_end . tv_sec
>6485	Identifier	tv_sec
>6486	Identifier	tv_end
>6487	PrimaryExpression	0.1
>6488	MultiplicativeExpression	0.9 * msSetDepth
>6489	Identifier	msSetDepth
>6490	PrimaryExpression	0.9
>6491	Identifier	msSetDepth
>6492	ExpressionStatement	 
>6493	CallExpression	gettimeofday ( & tv_end , NULL )
>6494	ArgumentList	& tv_end
>6495	Argument	NULL
>6496	Identifier	NULL
>6497	Argument	& tv_end
>6498	UnaryOp	& tv_end
>6499	Identifier	tv_end
>6500	UnaryOperator	&
>6501	Callee	gettimeofday
>6502	Identifier	gettimeofday
>6503	ExpressionStatement	 
>6504	CallExpression	activeKeyFrame -> takeReActivationData ( currentDepthMap )
>6505	ArgumentList	currentDepthMap
>6506	Argument	currentDepthMap
>6507	Identifier	currentDepthMap
>6508	Callee	activeKeyFrame -> takeReActivationData
>6509	PtrMemberAccess	activeKeyFrame -> takeReActivationData
>6510	Identifier	takeReActivationData
>6511	Identifier	activeKeyFrame
>6512	ExpressionStatement	 
>6513	CallExpression	activeKeyFrame -> calculateMeanInformation ( )
>6514	ArgumentList	 
>6515	Callee	activeKeyFrame -> calculateMeanInformation
>6516	PtrMemberAccess	activeKeyFrame -> calculateMeanInformation
>6517	Identifier	calculateMeanInformation
>6518	Identifier	activeKeyFrame
>6519	ExpressionStatement	 
>6520	CallExpression	activeKeyFrame -> setDepth ( currentDepthMap )
>6521	ArgumentList	currentDepthMap
>6522	Argument	currentDepthMap
>6523	Identifier	currentDepthMap
>6524	Callee	activeKeyFrame -> setDepth
>6525	PtrMemberAccess	activeKeyFrame -> setDepth
>6526	Identifier	setDepth
>6527	Identifier	activeKeyFrame
>6528	ExpressionStatement	 
>6529	CallExpression	gettimeofday ( & tv_start , NULL )
>6530	ArgumentList	& tv_start
>6531	Argument	NULL
>6532	Identifier	NULL
>6533	Argument	& tv_start
>6534	UnaryOp	& tv_start
>6535	Identifier	tv_start
>6536	UnaryOperator	&
>6537	Callee	gettimeofday
>6538	Identifier	gettimeofday
>6539	ExpressionStatement	 
>6540	IncDecOp	nRegularize ++
>6541	IncDec	++
>6542	Identifier	nRegularize
>6543	ExpressionStatement	 
>6544	AssignmentExpr	msRegularize = 0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_\
>6545	AdditiveExpression	0.9 * msRegularize + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>6546	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>6547	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>6548	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>6549	PrimaryExpression	1000.0f
>6550	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>6551	MemberAccess	tv_start . tv_usec
>6552	Identifier	tv_usec
>6553	Identifier	tv_start
>6554	MemberAccess	tv_end . tv_usec
>6555	Identifier	tv_usec
>6556	Identifier	tv_end
>6557	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>6558	PrimaryExpression	1000.0f
>6559	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>6560	MemberAccess	tv_start . tv_sec
>6561	Identifier	tv_sec
>6562	Identifier	tv_start
>6563	MemberAccess	tv_end . tv_sec
>6564	Identifier	tv_sec
>6565	Identifier	tv_end
>6566	PrimaryExpression	0.1
>6567	MultiplicativeExpression	0.9 * msRegularize
>6568	Identifier	msRegularize
>6569	PrimaryExpression	0.9
>6570	Identifier	msRegularize
>6571	ExpressionStatement	 
>6572	CallExpression	gettimeofday ( & tv_end , NULL )
>6573	ArgumentList	& tv_end
>6574	Argument	NULL
>6575	Identifier	NULL
>6576	Argument	& tv_end
>6577	UnaryOp	& tv_end
>6578	Identifier	tv_end
>6579	UnaryOperator	&
>6580	Callee	gettimeofday
>6581	Identifier	gettimeofday
>6582	ExpressionStatement	 
>6583	CallExpression	regularizeDepthMap ( false , VAL_SUM_MIN_FOR_KEEP )
>6584	ArgumentList	false
>6585	Argument	VAL_SUM_MIN_FOR_KEEP
>6586	Identifier	VAL_SUM_MIN_FOR_KEEP
>6587	Argument	false
>6588	Identifier	false
>6589	Callee	regularizeDepthMap
>6590	Identifier	regularizeDepthMap
>6591	ExpressionStatement	 
>6592	CallExpression	gettimeofday ( & tv_start , NULL )
>6593	ArgumentList	& tv_start
>6594	Argument	NULL
>6595	Identifier	NULL
>6596	Argument	& tv_start
>6597	UnaryOp	& tv_start
>6598	Identifier	tv_start
>6599	UnaryOperator	&
>6600	Callee	gettimeofday
>6601	Identifier	gettimeofday
>6602	ExpressionStatement	 
>6603	IncDecOp	nFillHoles ++
>6604	IncDec	++
>6605	Identifier	nFillHoles
>6606	ExpressionStatement	 
>6607	AssignmentExpr	msFillHoles = 0.9 * msFillHoles + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end \
>6608	AdditiveExpression	0.9 * msFillHoles + 0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - \
>6609	MultiplicativeExpression	0.1 * ( ( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / \
>6610	AdditiveExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f + ( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>6611	MultiplicativeExpression	( tv_end . tv_usec - tv_start . tv_usec ) / 1000.0f
>6612	PrimaryExpression	1000.0f
>6613	AdditiveExpression	tv_end . tv_usec - tv_start . tv_usec
>6614	MemberAccess	tv_start . tv_usec
>6615	Identifier	tv_usec
>6616	Identifier	tv_start
>6617	MemberAccess	tv_end . tv_usec
>6618	Identifier	tv_usec
>6619	Identifier	tv_end
>6620	MultiplicativeExpression	( tv_end . tv_sec - tv_start . tv_sec ) * 1000.0f
>6621	PrimaryExpression	1000.0f
>6622	AdditiveExpression	tv_end . tv_sec - tv_start . tv_sec
>6623	MemberAccess	tv_start . tv_sec
>6624	Identifier	tv_sec
>6625	Identifier	tv_start
>6626	MemberAccess	tv_end . tv_sec
>6627	Identifier	tv_sec
>6628	Identifier	tv_end
>6629	PrimaryExpression	0.1
>6630	MultiplicativeExpression	0.9 * msFillHoles
>6631	Identifier	msFillHoles
>6632	PrimaryExpression	0.9
>6633	Identifier	msFillHoles
>6634	ExpressionStatement	 
>6635	CallExpression	gettimeofday ( & tv_end , NULL )
>6636	ArgumentList	& tv_end
>6637	Argument	NULL
>6638	Identifier	NULL
>6639	Argument	& tv_end
>6640	UnaryOp	& tv_end
>6641	Identifier	tv_end
>6642	UnaryOperator	&
>6643	Callee	gettimeofday
>6644	Identifier	gettimeofday
>6645	ExpressionStatement	 
>6646	CallExpression	regularizeDepthMapFillHoles ( )
>6647	ArgumentList	 
>6648	Callee	regularizeDepthMapFillHoles
>6649	Identifier	regularizeDepthMapFillHoles
>6650	ExpressionStatement	 
>6651	CallExpression	gettimeofday ( & tv_start , NULL )
>6652	ArgumentList	& tv_start
>6653	Argument	NULL
>6654	Identifier	NULL
>6655	Argument	& tv_start
>6656	UnaryOp	& tv_start
>6657	Identifier	tv_start
>6658	UnaryOperator	&
>6659	Callee	gettimeofday
>6660	Identifier	gettimeofday
>6661	IdentifierDeclStatement	 
>6662	IdentifierDecl	tv_end
>6663	Identifier	tv_end
>6664	IdentifierDeclType	struct timeval
>6665	IdentifierDecl	tv_start
>6666	Identifier	tv_start
>6667	IdentifierDeclType	struct timeval
>6668	ExpressionStatement	 
>6669	CallExpression	gettimeofday ( & tv_start_all , NULL )
>6670	ArgumentList	& tv_start_all
>6671	Argument	NULL
>6672	Identifier	NULL
>6673	Argument	& tv_start_all
>6674	UnaryOp	& tv_start_all
>6675	Identifier	tv_start_all
>6676	UnaryOperator	&
>6677	Callee	gettimeofday
>6678	Identifier	gettimeofday
>6679	IdentifierDeclStatement	 
>6680	IdentifierDecl	tv_end_all
>6681	Identifier	tv_end_all
>6682	IdentifierDeclType	struct timeval
>6683	IdentifierDecl	tv_start_all
>6684	Identifier	tv_start_all
>6685	IdentifierDeclType	struct timeval
>6686	ExpressionStatement	 
>6687	CallExpression	assert ( isValid ( ) )
>6688	ArgumentList	isValid ( )
>6689	Argument	isValid ( )
>6690	CallExpression	isValid ( )
>6691	ArgumentList	 
>6692	Callee	isValid
>6693	Identifier	isValid
>6694	Callee	assert
>6695	Identifier	assert
>6729	FunctionDef	DepthMap 
>6730	ParameterList	 
>6731	ReturnType	int
>6732	CompoundStatement	 
>6733	ReturnStatement	 
>6734	PrimaryExpression	1
>6735	ForStatement	for ( int y = 0 ; y < height ; y ++ )
>6736	ForStatement	for ( int x = 0 ; x < width ; x ++ )
>6737	CompoundStatement	 
>6738	ExpressionStatement	 
>6739	AssignmentExpr	debugImageDepth . at < cv 
>6740	Identifier	color
>6741	RelationalExpression	debugImageDepth . at < cv 
>6742	RelationalExpression	cv 
>6743	Expression	y , x
>6744	Identifier	x
>6745	Identifier	y
>6746	Identifier	cv 
>6747	MemberAccess	debugImageDepth . at
>6748	Identifier	at
>6749	Identifier	debugImageDepth
>6750	IdentifierDeclStatement	 
>6751	IdentifierDecl	color = currentDepthMap [ idx ] . getVisualizationColor ( refID )
>6752	AssignmentExpr	color = currentDepthMap [ idx ] . getVisualizationColor ( refID )
>6753	CallExpression	currentDepthMap [ idx ] . getVisualizationColor ( refID )
>6754	ArgumentList	refID
>6755	Argument	refID
>6756	Identifier	refID
>6757	Callee	currentDepthMap [ idx ] . getVisualizationColor
>6758	MemberAccess	currentDepthMap [ idx ] . getVisualizationColor
>6759	Identifier	getVisualizationColor
>6760	ArrayIndexing	currentDepthMap [ idx ]
>6761	Identifier	idx
>6762	Identifier	currentDepthMap
>6763	Identifier	color
>6764	Identifier	color
>6765	IdentifierDeclType	cv 
>6766	IfStatement	if ( ! currentDepthMap [ idx ] . isValid )
>6767	ContinueStatement	 
>6768	Condition	 
>6769	UnaryOp	! currentDepthMap [ idx ] . isValid
>6770	MemberAccess	currentDepthMap [ idx ] . isValid
>6771	Identifier	isValid
>6772	ArrayIndexing	currentDepthMap [ idx ]
>6773	Identifier	idx
>6774	Identifier	currentDepthMap
>6775	UnaryOperator	!
>6776	IfStatement	if ( currentDepthMap [ idx ] . blacklisted < MIN_BLACKLIST && debugDisplay == 2 )
>6777	ExpressionStatement	 
>6778	AssignmentExpr	debugImageDepth . at < cv 
>6779	CallExpression	cv 
>6780	ArgumentList	0
>6781	Argument	255
>6782	PrimaryExpression	255
>6783	Argument	0
>6784	PrimaryExpression	0
>6785	Argument	0
>6786	PrimaryExpression	0
>6787	Callee	cv 
>6788	Identifier	cv 
>6789	RelationalExpression	debugImageDepth . at < cv 
>6790	RelationalExpression	cv 
>6791	Expression	y , x
>6792	Identifier	x
>6793	Identifier	y
>6794	Identifier	cv 
>6795	MemberAccess	debugImageDepth . at
>6796	Identifier	at
>6797	Identifier	debugImageDepth
>6798	Condition	 
>6799	AndExpression	currentDepthMap [ idx ] . blacklisted < MIN_BLACKLIST && debugDisplay == 2
>6800	EqualityExpression	debugDisplay == 2
>6801	PrimaryExpression	2
>6802	Identifier	debugDisplay
>6803	RelationalExpression	currentDepthMap [ idx ] . blacklisted < MIN_BLACKLIST
>6804	Identifier	MIN_BLACKLIST
>6805	MemberAccess	currentDepthMap [ idx ] . blacklisted
>6806	Identifier	blacklisted
>6807	ArrayIndexing	currentDepthMap [ idx ]
>6808	Identifier	idx
>6809	Identifier	currentDepthMap
>6810	IdentifierDeclStatement	 
>6811	IdentifierDecl	idx = x + y * width
>6812	AssignmentExpr	idx = x + y * width
>6813	AdditiveExpression	x + y * width
>6814	MultiplicativeExpression	y * width
>6815	Identifier	width
>6816	Identifier	y
>6817	Identifier	x
>6818	Identifier	idx
>6819	Identifier	idx
>6820	IdentifierDeclType	int
>6821	IncDecOp	 
>6822	IncDec	++
>6823	Identifier	x
>6824	Condition	 
>6825	RelationalExpression	x < width
>6826	Identifier	width
>6827	Identifier	x
>6828	ForInit	 
>6829	IdentifierDeclStatement	int x = 0 ;
>6830	IdentifierDecl	x = 0
>6831	AssignmentExpr	x = 0
>6832	PrimaryExpression	0
>6833	Identifier	x
>6834	Identifier	x
>6835	IdentifierDeclType	int
>6836	IncDecOp	 
>6837	IncDec	++
>6838	Identifier	y
>6839	Condition	 
>6840	RelationalExpression	y < height
>6841	Identifier	height
>6842	Identifier	y
>6843	ForInit	 
>6844	IdentifierDeclStatement	int y = 0 ;
>6845	IdentifierDecl	y = 0
>6846	AssignmentExpr	y = 0
>6847	PrimaryExpression	0
>6848	Identifier	y
>6849	Identifier	y
>6850	IdentifierDeclType	int
>6851	IdentifierDeclStatement	 
>6852	IdentifierDecl	refID = referenceFrameByID_offset
>6853	AssignmentExpr	refID = referenceFrameByID_offset
>6854	Identifier	referenceFrameByID_offset
>6855	Identifier	referenceFrameByID_offset
>6856	Identifier	refID
>6857	IdentifierDeclType	int
>6858	ExpressionStatement	 
>6859	CallExpression	cv 
>6860	ArgumentList	debugImageDepth
>6861	Argument	CV_GRAY2RGB
>6862	Identifier	CV_GRAY2RGB
>6863	Argument	debugImageDepth
>6864	Identifier	debugImageDepth
>6865	Argument	debugImageDepth
>6866	Identifier	debugImageDepth
>6867	Callee	cv 
>6868	Identifier	cv 
>6869	ExpressionStatement	 
>6870	CallExpression	keyFrameImage . convertTo ( debugImageDepth , CV_8UC1 )
>6871	ArgumentList	debugImageDepth
>6872	Argument	CV_8UC1
>6873	Identifier	CV_8UC1
>6874	Argument	debugImageDepth
>6875	Identifier	debugImageDepth
>6876	Callee	keyFrameImage . convertTo
>6877	MemberAccess	keyFrameImage . convertTo
>6878	Identifier	convertTo
>6879	Identifier	keyFrameImage
>6880	ExpressionStatement	 
>6881	Statement	 
>6882	Statement	 
>6883	Statement	 
>6884	Statement	 
>6885	Statement	 
>6886	Statement	 
>6887	Statement	 
>6888	Statement	 
>6889	Statement	 
>6890	Statement	 
>6891	Statement	 
>6892	Statement	 
>6893	Statement	 
>6894	Statement	 
>6895	Statement	 
>6896	Statement	 
>6897	Statement	 
>6898	Statement	 
>6899	Statement	 
>6900	Statement	 
>6901	Statement	 
>6902	Statement	 
>6903	Statement	 
>6904	Statement	 
>6905	Statement	 
>6906	Statement	 
>6907	Statement	 
>6908	Statement	 
>6909	IfStatement	if ( activeKeyFrame == 0 )
>6910	ReturnStatement	 
>6911	PrimaryExpression	1
>6912	Condition	 
>6913	EqualityExpression	activeKeyFrame == 0
>6914	PrimaryExpression	0
>6915	Identifier	activeKeyFrame
<3=14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=287,283,279,275,269,263,246,233,220,207,194,188,177,166,155,144,135,124,113,102,91,86,78,66,55,47,35,27,15
<15=16
<16=26,17
<17=25,18
<18=24,19
<19=23,20
<20=22,21
<27=28
<28=34,29
<29=33,30
<30=32,31
<35=36
<36=46,37
<37=45,38
<38=44,39
<39=43,40
<40=42,41
<47=48
<48=54,49
<49=53,50
<50=52,51
<55=56
<56=64,57
<57=60,58
<58=59
<60=61
<61=63,62
<64=65
<66=67
<67=77,68
<68=76,69
<69=75,70
<70=74,71
<71=73,72
<78=79
<79=85,80
<80=84,81
<81=83,82
<86=87
<87=89,88
<89=90
<91=92
<92=101,93
<93=99,94
<94=97,95
<95=96
<97=98
<99=100
<102=103
<103=112,104
<104=110,105
<105=108,106
<106=107
<108=109
<110=111
<113=114
<114=123,115
<115=121,116
<116=119,117
<117=118
<119=120
<121=122
<124=125
<125=134,126
<126=132,127
<127=130,128
<128=129
<130=131
<132=133
<135=136
<136=143,137
<137=139,138
<139=140
<140=142,141
<144=145
<145=154,146
<146=152,147
<147=150,148
<148=149
<150=151
<152=153
<155=156
<156=165,157
<157=163,158
<158=161,159
<159=160
<161=162
<163=164
<166=167
<167=176,168
<168=174,169
<169=172,170
<170=171
<172=173
<174=175
<177=178
<178=187,179
<179=185,180
<180=183,181
<181=182
<183=184
<185=186
<188=189
<189=191,190
<191=193,192
<194=195
<195=206,196
<196=204,197
<197=202,200,198
<198=199
<200=201
<202=203
<204=205
<207=208
<208=219,209
<209=217,210
<210=215,213,211
<211=212
<213=214
<215=216
<217=218
<220=221
<221=232,222
<222=230,223
<223=228,226,224
<224=225
<226=227
<228=229
<230=231
<233=234
<234=245,235
<235=243,236
<236=241,239,237
<237=238
<239=240
<241=242
<243=244
<246=247
<247=262,248
<248=261,249
<249=259,250
<250=251
<251=252
<252=258,253
<253=257,254
<254=256,255
<259=260
<263=264
<264=268,265
<265=267,266
<269=270
<270=274,271
<271=273,272
<275=276
<276=278,277
<279=280
<280=282,281
<283=284
<284=286,285
<287=288
<288=290,289
<351=353,352
<353=401,394,387,380,373,372,371,370,368,367,366,365,363,354
<354=355
<355=361,356
<356=357
<357=358
<358=360,359
<361=362
<363=364
<368=369
<373=374
<374=376,375
<376=377
<377=379,378
<380=381
<381=383,382
<383=384
<384=386,385
<387=388
<388=390,389
<390=391
<391=393,392
<394=395
<395=397,396
<397=398
<398=400,399
<401=409,402
<402=403
<403=405,404
<405=406
<406=408,407
<409=410
<410=412,411
<423=426,425,424
<426=455,427
<427=441,437,434,428
<428=429
<429=431,430
<431=433,432
<434=436,435
<437=438
<438=440,439
<441=442
<442=443
<443=454,453,444
<444=452,445
<445=451,446
<446=448,447
<448=450,449
<455=469,465,462,456
<456=457
<457=459,458
<459=461,460
<462=464,463
<465=466
<466=468,467
<469=470
<470=471
<471=482,481,472
<472=480,473
<473=479,474
<474=476,475
<476=478,477
<494=506,505,495
<495=502,499,496
<496=498,497
<499=501,500
<502=504,503
<506=658,651,507
<507=643,639,636,508
<508=628,622,619,509
<509=608,599,590,573,559,555,517,510
<510=515,511
<511=512
<512=514,513
<515=516
<517=551,536,518
<518=519
<519=520
<520=535,521
<521=533,522
<522=531,529,527,525,523
<523=524
<525=526
<527=528
<529=530
<531=532
<533=534
<536=537
<537=550,538
<538=548,539
<539=546,544,542,540
<540=541
<542=543
<544=545
<546=547
<548=549
<551=552
<552=554,553
<555=556
<556=558,557
<559=561,560
<561=562
<562=568,563
<563=565,564
<565=567,566
<568=570,569
<570=572,571
<573=582,574
<574=576,575
<576=577
<577=579,578
<579=581,580
<582=583
<583=589,584
<584=586,585
<586=588,587
<590=591
<591=598,597,592
<592=596,593
<593=595,594
<599=600
<600=607,606,601
<601=605,602
<602=604,603
<608=609
<609=618,617,610
<610=616,611
<611=615,612
<612=614,613
<619=621,620
<622=623
<623=627,624
<624=626,625
<628=629
<629=630
<630=635,634,631
<631=633,632
<636=638,637
<639=640
<640=642,641
<643=644
<644=645
<645=650,649,646
<646=648,647
<651=652
<652=657,656,653
<653=655,654
<658=659
<659=671,670,660
<660=669,661
<661=665,662
<662=663
<663=664
<665=666
<666=668,667
<702=705,704,703
<705=794,750,706
<706=746,707
<707=708
<708=709
<709=744,710
<710=742,735,731,727,723,719,715,711
<711=712
<712=714,713
<715=716
<716=718,717
<719=720
<720=722,721
<723=724
<724=726,725
<727=728
<728=730,729
<731=732
<732=734,733
<735=736
<736=738,737
<738=739
<739=741,740
<742=743
<744=745
<746=747
<747=749,748
<750=790,751
<751=752
<752=753
<753=788,754
<754=786,779,775,771,767,763,759,755
<755=756
<756=758,757
<759=760
<760=762,761
<763=764
<764=766,765
<767=768
<768=770,769
<771=772
<772=774,773
<775=776
<776=778,777
<779=780
<780=782,781
<782=783
<783=785,784
<786=787
<788=789
<790=791
<791=793,792
<794=795
<795=822,796
<796=805,803,799,797
<797=798
<799=800
<800=802,801
<803=804
<805=806
<806=820,807
<807=816,814,812,810,808
<808=809
<810=811
<812=813
<814=815
<816=817
<817=819,818
<820=821
<822=823
<823=825,824
<934=940,939,935
<935=936
<936=938,937
<940=1799,1793,1787,1781,1775,1769,1763,1757,1751,941,998,1007,1546,1560,1574,1588,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1672,1707
<941=994,942
<942=943
<943=944
<944=992,945
<945=990,986,974,970,966,962,958,954,950,946
<946=947
<947=949,948
<950=951
<951=953,952
<954=955
<955=957,956
<958=959
<959=961,960
<962=963
<963=965,964
<966=967
<967=969,968
<970=971
<971=973,972
<974=975
<975=983,976
<976=980,977
<977=979,978
<980=982,981
<983=985,984
<986=987
<987=989,988
<990=991
<992=993
<994=995
<995=997,996
<998=999
<999=1005,1000
<1000=1003,1001
<1001=1002
<1003=1004
<1005=1006
<1007=1538,1534,1531,1008
<1008=1523,1519,1516,1009
<1009=1503,1495,1486,1454,1443,1428,1413,1379,1360,1351,1241,1232,1221,1217,1213,1202,1136,1010
<1010=1130,1103,1011
<1011=1012
<1012=1094,1081,1064,1051,1038,1013
<1013=1014
<1014=1035,1015
<1015=1033,1016
<1016=1031,1019,1017
<1017=1018
<1019=1020
<1020=1030,1021
<1021=1025,1022
<1022=1024,1023
<1025=1029,1026
<1026=1028,1027
<1031=1032
<1033=1034
<1035=1037,1036
<1038=1045,1039
<1039=1040
<1040=1044,1041
<1041=1043,1042
<1045=1046
<1046=1050,1047
<1047=1049,1048
<1051=1052
<1052=1063,1062,1053
<1053=1061,1054
<1054=1058,1055
<1055=1057,1056
<1058=1060,1059
<1064=1065
<1065=1080,1079,1066
<1066=1078,1067
<1067=1073,1068
<1068=1070,1069
<1070=1072,1071
<1073=1077,1074
<1074=1076,1075
<1081=1082
<1082=1093,1092,1083
<1083=1091,1084
<1084=1090,1085
<1085=1087,1086
<1087=1089,1088
<1094=1101,1095
<1095=1096
<1096=1098,1097
<1098=1100,1099
<1101=1102
<1103=1121,1104
<1104=1105
<1105=1118,1106
<1106=1116,1107
<1107=1114,1112,1108
<1108=1109
<1109=1111,1110
<1112=1113
<1114=1115
<1116=1117
<1118=1120,1119
<1121=1128,1122
<1122=1123
<1123=1125,1124
<1125=1127,1126
<1128=1129
<1130=1131
<1131=1135,1132
<1132=1134,1133
<1136=1198,1137
<1137=1187,1138
<1138=1175,1139
<1139=1140
<1140=1169,1158,1141
<1141=1142
<1142=1149,1143
<1143=1144
<1144=1146,1145
<1146=1148,1147
<1149=1156,1150
<1150=1151
<1151=1153,1152
<1153=1155,1154
<1156=1157
<1158=1160,1159
<1160=1167,1161
<1161=1162
<1162=1164,1163
<1164=1166,1165
<1167=1168
<1169=1170
<1170=1174,1171
<1171=1173,1172
<1175=1176
<1176=1182,1177
<1177=1181,1178
<1178=1180,1179
<1182=1186,1183
<1183=1185,1184
<1187=1188
<1188=1197,1196,1189
<1189=1195,1190
<1190=1192,1191
<1192=1194,1193
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1212,1211,1204
<1204=1210,1205
<1205=1209,1206
<1206=1208,1207
<1213=1214
<1214=1216,1215
<1217=1218
<1218=1220,1219
<1221=1222
<1222=1231,1230,1223
<1223=1229,1224
<1224=1228,1225
<1225=1227,1226
<1232=1233
<1233=1240,1239,1234
<1234=1238,1235
<1235=1237,1236
<1241=1347,1314,1242
<1242=1243
<1243=1301,1283,1274,1244
<1244=1256,1245
<1245=1247,1246
<1247=1254,1248
<1248=1249
<1249=1251,1250
<1251=1253,1252
<1254=1255
<1256=1257
<1257=1261,1258
<1258=1260,1259
<1261=1263,1262
<1263=1273,1264
<1264=1272,1265
<1265=1271,1266
<1266=1270,1267
<1267=1269,1268
<1274=1275
<1275=1282,1281,1276
<1276=1280,1277
<1277=1279,1278
<1283=1284
<1284=1300,1299,1285
<1285=1298,1286
<1286=1296,1287
<1287=1294,1292,1290,1288
<1288=1289
<1290=1291
<1292=1293
<1294=1295
<1296=1297
<1301=1302
<1302=1313,1312,1303
<1303=1311,1304
<1304=1310,1305
<1305=1309,1306
<1306=1308,1307
<1314=1315
<1315=1327,1316
<1316=1318,1317
<1318=1325,1319
<1319=1320
<1320=1322,1321
<1322=1324,1323
<1325=1326
<1327=1328
<1328=1332,1329
<1329=1331,1330
<1332=1346,1333
<1333=1345,1334
<1334=1342,1335
<1335=1339,1336
<1336=1338,1337
<1339=1341,1340
<1342=1344,1343
<1347=1348
<1348=1350,1349
<1351=1352
<1352=1359,1358,1353
<1353=1357,1354
<1354=1356,1355
<1360=1361
<1361=1378,1377,1362
<1362=1376,1363
<1363=1371,1364
<1364=1366,1365
<1366=1370,1367
<1367=1369,1368
<1371=1375,1372
<1372=1374,1373
<1379=1391,1380
<1380=1382,1381
<1382=1389,1383
<1383=1384
<1384=1386,1385
<1386=1388,1387
<1389=1390
<1391=1392
<1392=1412,1393
<1393=1409,1394
<1394=1406,1395
<1395=1401,1396
<1396=1400,1397
<1397=1399,1398
<1401=1405,1402
<1402=1404,1403
<1406=1408,1407
<1409=1411,1410
<1413=1414
<1414=1427,1426,1415
<1415=1425,1416
<1416=1418,1417
<1418=1422,1419
<1419=1421,1420
<1422=1424,1423
<1428=1429
<1429=1442,1441,1430
<1430=1440,1431
<1431=1433,1432
<1433=1437,1434
<1434=1436,1435
<1437=1439,1438
<1443=1444
<1444=1453,1452,1445
<1445=1451,1446
<1446=1450,1447
<1447=1449,1448
<1454=1455
<1455=1485,1484,1456
<1456=1483,1457
<1457=1459,1458
<1459=1463,1460
<1460=1462,1461
<1463=1482,1464
<1464=1480,1465
<1465=1474,1468,1466
<1466=1467
<1468=1469
<1469=1471,1470
<1471=1473,1472
<1474=1475
<1475=1477,1476
<1477=1479,1478
<1480=1481
<1486=1493,1487
<1487=1488
<1488=1490,1489
<1490=1492,1491
<1493=1494
<1495=1497,1496
<1497=1498
<1498=1502,1499
<1499=1501,1500
<1503=1504
<1504=1515,1514,1505
<1505=1513,1506
<1506=1512,1507
<1507=1511,1508
<1508=1510,1509
<1516=1518,1517
<1519=1520
<1520=1522,1521
<1523=1524
<1524=1525
<1525=1530,1529,1526
<1526=1528,1527
<1531=1533,1532
<1534=1535
<1535=1537,1536
<1538=1539
<1539=1540
<1540=1545,1544,1541
<1541=1543,1542
<1546=1547
<1547=1559,1558,1548
<1548=1557,1549
<1549=1553,1550
<1550=1551
<1551=1552
<1553=1554
<1554=1556,1555
<1560=1561
<1561=1573,1572,1562
<1562=1571,1563
<1563=1567,1564
<1564=1565
<1565=1566
<1567=1568
<1568=1570,1569
<1574=1575
<1575=1587,1586,1576
<1576=1585,1577
<1577=1581,1578
<1578=1579
<1579=1580
<1581=1582
<1582=1584,1583
<1588=1589
<1589=1610,1609,1590
<1590=1608,1591
<1591=1599,1593,1592
<1593=1595,1594
<1595=1596
<1596=1598,1597
<1599=1600
<1600=1602,1601
<1602=1604,1603
<1604=1605
<1605=1607,1606
<1651=1652
<1652=1671,1670,1653
<1653=1669,1654
<1654=1656,1655
<1656=1657
<1657=1659,1658
<1659=1667,1660
<1660=1661
<1661=1662
<1662=1664,1663
<1664=1666,1665
<1667=1668
<1672=1693,1689,1686,1673
<1673=1680,1674
<1674=1675
<1675=1677,1676
<1677=1679,1678
<1680=1681
<1681=1683,1682
<1683=1685,1684
<1686=1688,1687
<1689=1690
<1690=1692,1691
<1693=1694
<1694=1695
<1695=1706,1705,1696
<1696=1704,1697
<1697=1703,1698
<1698=1700,1699
<1700=1702,1701
<1707=1742,1708
<1708=1709
<1709=1710
<1710=1740,1711
<1711=1738,1731,1724,1712
<1712=1713
<1713=1715,1714
<1715=1716
<1716=1718,1717
<1718=1720,1719
<1720=1721
<1721=1723,1722
<1724=1725
<1725=1727,1726
<1727=1728
<1728=1730,1729
<1731=1732
<1732=1734,1733
<1734=1735
<1735=1737,1736
<1738=1739
<1740=1741
<1742=1743
<1743=1745,1744
<1745=1747,1746
<1747=1748
<1748=1750,1749
<1751=1752
<1752=1754,1753
<1754=1756,1755
<1757=1758
<1758=1760,1759
<1760=1762,1761
<1763=1764
<1764=1766,1765
<1766=1768,1767
<1769=1770
<1770=1772,1771
<1772=1774,1773
<1775=1776
<1776=1778,1777
<1778=1780,1779
<1781=1782
<1782=1784,1783
<1784=1786,1785
<1787=1788
<1788=1790,1789
<1790=1792,1791
<1793=1794
<1794=1796,1795
<1796=1798,1797
<1799=1800
<1800=1802,1801
<1802=1804,1803
<1911=1923,1922,1912
<1912=1919,1916,1913
<1913=1915,1914
<1916=1918,1917
<1919=1921,1920
<1923=2214,1924
<1924=2206,2202,2199,1925
<1925=1926
<1926=2191,2185,2182,1927
<1927=2171,2162,2156,2148,2139,2098,1928
<1928=2084,1929
<1929=2071,2064,2047,1972,1963,1954,1939,1930
<1930=1937,1931
<1931=1932
<1932=1934,1933
<1934=1936,1935
<1937=1938
<1939=1940
<1940=1951,1941
<1941=1949,1942
<1942=1947,1945,1943
<1943=1944
<1945=1946
<1947=1948
<1949=1950
<1951=1953,1952
<1954=1955
<1955=1962,1956
<1956=1960,1957
<1957=1958
<1958=1959
<1960=1961
<1963=1964
<1964=1971,1970,1965
<1965=1969,1966
<1966=1968,1967
<1972=2029,2025,2022,1973
<1973=2014,2008,2005,1974
<1974=1997,1987,1979,1975
<1975=1976
<1976=1978,1977
<1979=1980
<1980=1986,1981
<1981=1985,1982
<1982=1984,1983
<1987=1988
<1988=1996,1989
<1989=1993,1990
<1990=1992,1991
<1993=1995,1994
<1997=1999,1998
<1999=2000
<2000=2004,2001
<2001=2003,2002
<2005=2007,2006
<2008=2009
<2009=2013,2010
<2010=2012,2011
<2014=2015
<2015=2016
<2016=2021,2020,2017
<2017=2019,2018
<2022=2024,2023
<2025=2026
<2026=2028,2027
<2029=2030
<2030=2031
<2031=2046,2045,2032
<2032=2044,2033
<2033=2043,2034
<2034=2040,2035
<2035=2037,2036
<2037=2039,2038
<2040=2042,2041
<2047=2048
<2048=2063,2062,2049
<2049=2061,2050
<2050=2060,2051
<2051=2057,2052
<2052=2054,2053
<2054=2056,2055
<2057=2059,2058
<2064=2065
<2065=2070,2069,2066
<2066=2068,2067
<2071=2078,2072
<2072=2077,2076,2073
<2073=2075,2074
<2078=2083,2082,2079
<2079=2081,2080
<2084=2085
<2085=2089,2086
<2086=2088,2087
<2089=2093,2090
<2090=2092,2091
<2093=2095,2094
<2095=2097,2096
<2098=2099
<2099=2138,2137,2100
<2100=2136,2101
<2101=2129,2102
<2102=2122,2103
<2103=2113,2104
<2104=2112,2105
<2105=2109,2106
<2106=2108,2107
<2109=2111,2110
<2113=2121,2114
<2114=2118,2115
<2115=2117,2116
<2118=2120,2119
<2122=2128,2123
<2123=2127,2124
<2124=2126,2125
<2129=2135,2130
<2130=2134,2131
<2131=2133,2132
<2139=2140
<2140=2147,2146,2141
<2141=2145,2142
<2142=2144,2143
<2148=2150,2149
<2150=2151
<2151=2153,2152
<2153=2155,2154
<2156=2158,2157
<2158=2159
<2159=2161,2160
<2162=2163
<2163=2170,2169,2164
<2164=2168,2165
<2165=2167,2166
<2171=2172
<2172=2181,2180,2173
<2173=2179,2174
<2174=2178,2175
<2175=2177,2176
<2182=2184,2183
<2185=2186
<2186=2190,2187
<2187=2189,2188
<2191=2192
<2192=2193
<2193=2198,2197,2194
<2194=2196,2195
<2199=2201,2200
<2202=2203
<2203=2205,2204
<2206=2207
<2207=2208
<2208=2213,2212,2209
<2209=2211,2210
<2214=2215
<2215=2227,2226,2216
<2216=2225,2217
<2217=2221,2218
<2218=2219
<2219=2220
<2221=2222
<2222=2224,2223
<2277=2280,2279,2278
<2280=2352,2346,2329,2297,2281
<2281=2293,2282
<2282=2283
<2283=2291,2284
<2284=2289,2285
<2285=2286
<2286=2288,2287
<2289=2290
<2291=2292
<2293=2294
<2294=2296,2295
<2297=2298
<2298=2325,2299
<2299=2308,2306,2302,2300
<2300=2301
<2302=2303
<2303=2305,2304
<2306=2307
<2308=2309
<2309=2323,2310
<2310=2319,2317,2315,2313,2311
<2311=2312
<2313=2314
<2315=2316
<2317=2318
<2319=2320
<2320=2322,2321
<2323=2324
<2325=2326
<2326=2328,2327
<2329=2330
<2330=2344,2331
<2331=2342,2340,2332
<2332=2333
<2333=2339,2334
<2334=2338,2335
<2335=2337,2336
<2340=2341
<2342=2343
<2344=2345
<2346=2347
<2347=2349,2348
<2349=2351,2350
<2352=2353
<2353=2355,2354
<2355=2356
<2375=2387,2386,2376
<2376=2383,2380,2377
<2377=2379,2378
<2380=2382,2381
<2383=2385,2384
<2387=2463,2452,2388
<2388=2444,2440,2437,2389
<2389=2430,2390
<2390=2422,2418,2415,2391
<2391=2404,2396,2392
<2392=2393
<2393=2395,2394
<2396=2397
<2397=2399,2398
<2399=2403,2400
<2400=2402,2401
<2404=2411,2405
<2405=2406
<2406=2410,2407
<2407=2409,2408
<2411=2412
<2412=2414,2413
<2415=2417,2416
<2418=2419
<2419=2421,2420
<2422=2423
<2423=2424
<2424=2429,2428,2425
<2425=2427,2426
<2430=2431
<2431=2436,2435,2432
<2432=2434,2433
<2437=2439,2438
<2440=2441
<2441=2443,2442
<2444=2445
<2445=2446
<2446=2451,2450,2447
<2447=2449,2448
<2452=2453
<2453=2462,2461,2454
<2454=2460,2455
<2455=2459,2456
<2456=2458,2457
<2463=2464
<2464=2473,2472,2465
<2465=2471,2466
<2466=2470,2467
<2467=2469,2468
<2493=2496,2495,2494
<2496=2550,2543,2534,2525,2497
<2497=2517,2513,2510,2498
<2498=2499
<2499=2505,2500
<2500=2504,2501
<2501=2503,2502
<2505=2509,2506
<2506=2508,2507
<2510=2512,2511
<2513=2514
<2514=2516,2515
<2517=2518
<2518=2519
<2519=2524,2523,2520
<2520=2522,2521
<2525=2526
<2526=2533,2532,2527
<2527=2531,2528
<2528=2530,2529
<2534=2535
<2535=2542,2541,2536
<2536=2540,2537
<2537=2539,2538
<2543=2544
<2544=2549,2548,2545
<2545=2547,2546
<2550=2551
<2551=2574,2552
<2552=2557,2555,2553
<2553=2554
<2555=2556
<2557=2558
<2558=2572,2559
<2559=2568,2566,2564,2562,2560
<2560=2561
<2562=2563
<2564=2565
<2566=2567
<2568=2569
<2569=2571,2570
<2572=2573
<2574=2575
<2575=2577,2576
<2599=2614,2613,2600
<2600=2610,2607,2604,2601
<2601=2603,2602
<2604=2606,2605
<2607=2609,2608
<2610=2612,2611
<2614=3000,2993,2615
<2615=2985,2981,2978,2616
<2616=2617
<2617=2970,2964,2961,2618
<2618=2948,2935,2920,2912,2893,2880,2720,2683,2657,2651,2642,2636,2628,2619
<2619=2626,2620
<2620=2621
<2621=2623,2622
<2623=2625,2624
<2626=2627
<2628=2629
<2629=2633,2630
<2630=2632,2631
<2633=2635,2634
<2636=2637
<2637=2639,2638
<2639=2641,2640
<2642=2643
<2643=2650,2644
<2644=2648,2645
<2645=2646
<2646=2647
<2648=2649
<2651=2652
<2652=2656,2653
<2653=2655,2654
<2657=2681,2658
<2658=2659
<2659=2677,2660
<2660=2671,2662,2661
<2662=2669,2663
<2663=2664
<2664=2666,2665
<2666=2668,2667
<2669=2670
<2671=2672
<2672=2674,2673
<2674=2676,2675
<2677=2678
<2678=2680,2679
<2681=2682
<2683=2716,2684
<2684=2710,2701,2695,2686,2685
<2686=2693,2687
<2687=2688
<2688=2690,2689
<2690=2692,2691
<2693=2694
<2695=2696
<2696=2698,2697
<2698=2700,2699
<2701=2708,2702
<2702=2703
<2703=2705,2704
<2705=2707,2706
<2708=2709
<2710=2711
<2711=2713,2712
<2713=2715,2714
<2716=2717
<2717=2719,2718
<2720=2870,2866,2863,2721
<2721=2853,2849,2846,2722
<2722=2833,2825,2812,2778,2772,2765,2748,2735,2727,2723
<2723=2724
<2724=2726,2725
<2727=2728
<2728=2734,2729
<2729=2731,2730
<2731=2733,2732
<2735=2736
<2736=2747,2746,2737
<2737=2745,2738
<2738=2744,2739
<2739=2741,2740
<2741=2743,2742
<2748=2749
<2749=2764,2763,2750
<2750=2762,2751
<2751=2753,2752
<2753=2761,2754
<2754=2758,2755
<2755=2757,2756
<2758=2760,2759
<2765=2770,2766
<2766=2767
<2767=2769,2768
<2770=2771
<2772=2773
<2773=2777,2774
<2774=2776,2775
<2778=2798,2779
<2779=2781,2780
<2781=2796,2782
<2782=2783
<2783=2788,2784
<2784=2785
<2785=2787,2786
<2788=2789
<2789=2793,2790
<2790=2792,2791
<2793=2795,2794
<2796=2797
<2798=2799
<2799=2807,2800
<2800=2804,2801
<2801=2803,2802
<2804=2806,2805
<2807=2811,2808
<2808=2810,2809
<2812=2813
<2813=2824,2823,2814
<2814=2822,2815
<2815=2819,2816
<2816=2818,2817
<2819=2821,2820
<2825=2827,2826
<2827=2828
<2828=2832,2829
<2829=2831,2830
<2833=2834
<2834=2845,2844,2835
<2835=2843,2836
<2836=2842,2837
<2837=2841,2838
<2838=2840,2839
<2846=2848,2847
<2849=2850
<2850=2852,2851
<2853=2854
<2854=2855
<2855=2862,2861,2856
<2856=2860,2857
<2857=2859,2858
<2863=2865,2864
<2866=2867
<2867=2869,2868
<2870=2871
<2871=2872
<2872=2879,2878,2873
<2873=2877,2874
<2874=2876,2875
<2880=2887,2881
<2881=2886,2885,2882
<2882=2884,2883
<2887=2892,2891,2888
<2888=2890,2889
<2893=2906,2900,2894
<2894=2899,2898,2895
<2895=2897,2896
<2900=2905,2904,2901
<2901=2903,2902
<2906=2911,2910,2907
<2907=2909,2908
<2912=2914,2913
<2914=2915
<2915=2919,2916
<2916=2918,2917
<2920=2927,2921
<2921=2922
<2922=2924,2923
<2924=2926,2925
<2927=2928
<2928=2934,2929
<2929=2931,2930
<2931=2933,2932
<2935=2936
<2936=2947,2946,2937
<2937=2945,2938
<2938=2944,2939
<2939=2943,2940
<2940=2942,2941
<2948=2949
<2949=2960,2959,2950
<2950=2958,2951
<2951=2957,2952
<2952=2956,2953
<2953=2955,2954
<2961=2963,2962
<2964=2965
<2965=2969,2966
<2966=2968,2967
<2970=2971
<2971=2972
<2972=2977,2976,2973
<2973=2975,2974
<2978=2980,2979
<2981=2982
<2982=2984,2983
<2985=2986
<2986=2987
<2987=2992,2991,2988
<2988=2990,2989
<2993=2994
<2994=2999,2998,2995
<2995=2997,2996
<3000=3001
<3001=3006,3005,3002
<3002=3004,3003
<3062=3071,3070,3063
<3063=3067,3064
<3064=3066,3065
<3067=3069,3068
<3071=3238,3232,3226,3220,3214,3208,3191,3185,3184,3183,3182,3181,3180,3179,3178,3177,3176,3175,3174,3173,3172,3171,3170,3169,3168,3167,3166,3165,3164,3072,3115,3116,3117,3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,3131,3132,3133,3134,3135,3136,3137,3138,3139,3140,3141,3142,3143,3144,3145,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163
<3072=3111,3073
<3073=3074
<3074=3109,3075
<3075=3107,3100,3096,3092,3088,3084,3080,3076
<3076=3077
<3077=3079,3078
<3080=3081
<3081=3083,3082
<3084=3085
<3085=3087,3086
<3088=3089
<3089=3091,3090
<3092=3093
<3093=3095,3094
<3096=3097
<3097=3099,3098
<3100=3101
<3101=3103,3102
<3103=3104
<3104=3106,3105
<3107=3108
<3109=3110
<3111=3112
<3112=3114,3113
<3185=3189,3188,3186
<3186=3187
<3189=3190
<3191=3192
<3192=3206,3193
<3193=3204,3202,3194
<3194=3195
<3195=3201,3196
<3196=3200,3197
<3197=3199,3198
<3202=3203
<3204=3205
<3206=3207
<3208=3209
<3209=3211,3210
<3211=3213,3212
<3214=3215
<3215=3217,3216
<3217=3219,3218
<3220=3221
<3221=3223,3222
<3223=3225,3224
<3226=3227
<3227=3229,3228
<3229=3231,3230
<3232=3233
<3233=3235,3234
<3235=3237,3236
<3238=3239
<3239=3241,3240
<3241=3243,3242
<3266=3272,3271,3267
<3267=3268
<3268=3270,3269
<3272=3430,3426,3415,3411,3399,3282,3273
<3273=3274
<3274=3278,3275
<3275=3276
<3276=3277
<3278=3279
<3279=3281,3280
<3282=3391,3385,3382,3283
<3283=3284
<3284=3374,3368,3365,3285
<3285=3286
<3286=3355,3313,3287
<3287=3288
<3288=3301,3289
<3289=3290
<3290=3292,3291
<3292=3294,3293
<3294=3300,3295
<3295=3299,3296
<3296=3298,3297
<3301=3302
<3302=3304,3303
<3304=3306,3305
<3306=3312,3307
<3307=3311,3308
<3308=3310,3309
<3313=3337,3314
<3314=3315
<3315=3330,3316
<3316=3328,3317
<3317=3326,3324,3322,3320,3318
<3318=3319
<3320=3321
<3322=3323
<3324=3325
<3326=3327
<3328=3329
<3330=3336,3331
<3331=3335,3332
<3332=3334,3333
<3337=3338
<3338=3354,3353,3339
<3339=3352,3340
<3340=3351,3341
<3341=3350,3342
<3342=3344,3343
<3344=3346,3345
<3346=3348,3347
<3348=3349
<3355=3356
<3356=3358,3357
<3358=3364,3359
<3359=3363,3360
<3360=3362,3361
<3365=3367,3366
<3368=3369
<3369=3373,3370
<3370=3372,3371
<3374=3375
<3375=3376
<3376=3381,3380,3377
<3377=3379,3378
<3382=3384,3383
<3385=3386
<3386=3390,3387
<3387=3389,3388
<3391=3392
<3392=3393
<3393=3398,3397,3394
<3394=3396,3395
<3399=3400
<3400=3410,3409,3401
<3401=3408,3402
<3402=3404,3403
<3404=3405
<3405=3407,3406
<3411=3412
<3412=3414,3413
<3415=3416
<3416=3425,3417
<3417=3421,3418
<3418=3419
<3419=3420
<3421=3422
<3422=3424,3423
<3426=3427
<3427=3429,3428
<3430=3431
<3431=3438,3432
<3432=3434,3433
<3434=3435
<3435=3437,3436
<3471=3477,3476,3472
<3472=3473
<3473=3475,3474
<3477=3687,3678,3674,3662,3650,3638,3631,3625,3619,3608,3604,3487,3478
<3478=3479
<3479=3485,3480
<3480=3483,3481
<3481=3482
<3483=3484
<3485=3486
<3487=3596,3592,3589,3488
<3488=3489
<3489=3581,3577,3574,3490
<3490=3507,3503,3499,3495,3491
<3491=3492
<3492=3494,3493
<3495=3496
<3496=3498,3497
<3499=3500
<3500=3502,3501
<3503=3504
<3504=3506,3505
<3507=3568,3546,3508
<3508=3509
<3509=3534,3510
<3510=3511
<3511=3525,3512
<3512=3517,3514,3513
<3514=3516,3515
<3517=3518
<3518=3522,3519
<3519=3521,3520
<3522=3524,3523
<3525=3527,3526
<3527=3533,3528
<3528=3532,3529
<3529=3531,3530
<3534=3535
<3535=3537,3536
<3537=3539,3538
<3539=3545,3540
<3540=3544,3541
<3541=3543,3542
<3546=3547
<3547=3548
<3548=3565,3549
<3549=3563,3550
<3550=3559,3555,3551
<3551=3552
<3552=3554,3553
<3555=3556
<3556=3558,3557
<3559=3560
<3560=3562,3561
<3563=3564
<3565=3567,3566
<3568=3569
<3569=3571,3570
<3571=3573,3572
<3574=3576,3575
<3577=3578
<3578=3580,3579
<3581=3582
<3582=3583
<3583=3588,3587,3584
<3584=3586,3585
<3589=3591,3590
<3592=3593
<3593=3595,3594
<3596=3597
<3597=3598
<3598=3603,3602,3599
<3599=3601,3600
<3604=3605
<3605=3607,3606
<3608=3609
<3609=3618,3610
<3610=3614,3611
<3611=3612
<3612=3613
<3614=3615
<3615=3617,3616
<3619=3620
<3620=3622,3621
<3622=3624,3623
<3625=3626
<3626=3628,3627
<3628=3630,3629
<3631=3632
<3632=3637,3636,3633
<3633=3635,3634
<3638=3639
<3639=3649,3648,3640
<3640=3647,3641
<3641=3643,3642
<3643=3644
<3644=3646,3645
<3650=3651
<3651=3661,3660,3652
<3652=3659,3653
<3653=3655,3654
<3655=3656
<3656=3658,3657
<3662=3663
<3663=3673,3672,3664
<3664=3671,3665
<3665=3667,3666
<3667=3668
<3668=3670,3669
<3674=3675
<3675=3677,3676
<3678=3679
<3679=3686,3680
<3680=3682,3681
<3682=3683
<3683=3685,3684
<3687=3688
<3688=3697,3689
<3689=3690
<3690=3691
<3691=3693,3692
<3693=3694
<3694=3696,3695
<3697=3698
<3741=3747,3746,3742
<3742=3743
<3743=3745,3744
<3747=3992,3983,3979,3968,3964,3952,3945,3938,3868,3757,3748
<3748=3749
<3749=3753,3750
<3750=3751
<3751=3752
<3753=3754
<3754=3756,3755
<3757=3860,3856,3853,3758
<3758=3759
<3759=3845,3841,3838,3760
<3760=3825,3761
<3761=3812,3788,3762
<3762=3763
<3763=3776,3764
<3764=3765
<3765=3767,3766
<3767=3769,3768
<3769=3775,3770
<3770=3774,3771
<3771=3773,3772
<3776=3777
<3777=3779,3778
<3779=3781,3780
<3781=3787,3782
<3782=3786,3783
<3783=3785,3784
<3788=3789
<3789=3790
<3790=3805,3791
<3791=3803,3792
<3792=3801,3799,3797,3795,3793
<3793=3794
<3795=3796
<3797=3798
<3799=3800
<3801=3802
<3803=3804
<3805=3811,3806
<3806=3810,3807
<3807=3809,3808
<3812=3813
<3813=3817,3814
<3814=3816,3815
<3817=3824,3818
<3818=3822,3819
<3819=3820
<3820=3821
<3822=3823
<3825=3826
<3826=3837,3836,3827
<3827=3835,3828
<3828=3834,3829
<3829=3833,3830
<3830=3832,3831
<3838=3840,3839
<3841=3842
<3842=3844,3843
<3845=3846
<3846=3847
<3847=3852,3851,3848
<3848=3850,3849
<3853=3855,3854
<3856=3857
<3857=3859,3858
<3860=3861
<3861=3862
<3862=3867,3866,3863
<3863=3865,3864
<3868=3930,3926,3923,3869
<3869=3870
<3870=3915,3911,3908,3871
<3871=3895,3872
<3872=3882,3873
<3873=3878,3874
<3874=3875
<3875=3877,3876
<3878=3879
<3879=3881,3880
<3882=3883
<3883=3887,3884
<3884=3886,3885
<3887=3894,3888
<3888=3892,3889
<3889=3890
<3890=3891
<3892=3893
<3895=3896
<3896=3907,3906,3897
<3897=3905,3898
<3898=3904,3899
<3899=3903,3900
<3900=3902,3901
<3908=3910,3909
<3911=3912
<3912=3914,3913
<3915=3916
<3916=3917
<3917=3922,3921,3918
<3918=3920,3919
<3923=3925,3924
<3926=3927
<3927=3929,3928
<3930=3931
<3931=3932
<3932=3937,3936,3933
<3933=3935,3934
<3938=3939
<3939=3944,3943,3940
<3940=3942,3941
<3945=3946
<3946=3951,3950,3947
<3947=3949,3948
<3952=3953
<3953=3963,3962,3954
<3954=3961,3955
<3955=3957,3956
<3957=3958
<3958=3960,3959
<3964=3965
<3965=3967,3966
<3968=3969
<3969=3978,3970
<3970=3974,3971
<3971=3972
<3972=3973
<3974=3975
<3975=3977,3976
<3979=3980
<3980=3982,3981
<3983=3984
<3984=3991,3985
<3985=3987,3986
<3987=3988
<3988=3990,3989
<3992=3993
<3993=4002,3994
<3994=3995
<3995=3996
<3996=3998,3997
<3998=3999
<3999=4001,4000
<4002=4003
<4038=4041,4040,4039
<4041=4288,4282,4276,4270,4264,4258,4252,4246,4240,4234,4228,4222,4216,4210,4204,4198,4192,4186,4180,4174,4168,4162,4156,4150,4144,4138,4132,4126,4120,4114,4108,4102,4096,4090,4084,4078,4072,4066,4060,4054,4048,4042
<4042=4043
<4043=4045,4044
<4045=4047,4046
<4048=4049
<4049=4051,4050
<4051=4053,4052
<4054=4055
<4055=4057,4056
<4057=4059,4058
<4060=4061
<4061=4063,4062
<4063=4065,4064
<4066=4067
<4067=4069,4068
<4069=4071,4070
<4072=4073
<4073=4075,4074
<4075=4077,4076
<4078=4079
<4079=4081,4080
<4081=4083,4082
<4084=4085
<4085=4087,4086
<4087=4089,4088
<4090=4091
<4091=4093,4092
<4093=4095,4094
<4096=4097
<4097=4099,4098
<4099=4101,4100
<4102=4103
<4103=4105,4104
<4105=4107,4106
<4108=4109
<4109=4111,4110
<4111=4113,4112
<4114=4115
<4115=4117,4116
<4117=4119,4118
<4120=4121
<4121=4123,4122
<4123=4125,4124
<4126=4127
<4127=4129,4128
<4129=4131,4130
<4132=4133
<4133=4135,4134
<4135=4137,4136
<4138=4139
<4139=4141,4140
<4141=4143,4142
<4144=4145
<4145=4147,4146
<4147=4149,4148
<4150=4151
<4151=4153,4152
<4153=4155,4154
<4156=4157
<4157=4159,4158
<4159=4161,4160
<4162=4163
<4163=4165,4164
<4165=4167,4166
<4168=4169
<4169=4171,4170
<4171=4173,4172
<4174=4175
<4175=4177,4176
<4177=4179,4178
<4180=4181
<4181=4183,4182
<4183=4185,4184
<4186=4187
<4187=4189,4188
<4189=4191,4190
<4192=4193
<4193=4195,4194
<4195=4197,4196
<4198=4199
<4199=4201,4200
<4201=4203,4202
<4204=4205
<4205=4207,4206
<4207=4209,4208
<4210=4211
<4211=4213,4212
<4213=4215,4214
<4216=4217
<4217=4219,4218
<4219=4221,4220
<4222=4223
<4223=4225,4224
<4225=4227,4226
<4228=4229
<4229=4231,4230
<4231=4233,4232
<4234=4235
<4235=4237,4236
<4237=4239,4238
<4240=4241
<4241=4243,4242
<4243=4245,4244
<4246=4247
<4247=4249,4248
<4249=4251,4250
<4252=4253
<4253=4255,4254
<4255=4257,4256
<4258=4259
<4259=4261,4260
<4261=4263,4262
<4264=4265
<4265=4267,4266
<4267=4269,4268
<4270=4271
<4271=4273,4272
<4273=4275,4274
<4276=4277
<4277=4279,4278
<4279=4281,4280
<4282=4283
<4283=4285,4284
<4285=4287,4286
<4288=4289
<4289=4291,4290
<4291=4293,4292
<4340=4346,4345,4341
<4341=4342
<4342=4344,4343
<4346=5234,5227,5216,5202,5188,5181,5172,5171,5170,5169,5168,5167,5166,5165,5164,5162,5161,5160,5005,5000,4842,4835,4824,4819,4808,4780,4776,4716,4705,4696,4685,4657,4653,4582,4571,4543,4539,4533,4527,4501,4432,4347
<4347=4428,4348
<4348=4349
<4349=4350
<4350=4426,4351
<4351=4424,4412,4408,4404,4400,4376,4372,4368,4364,4360,4356,4352
<4352=4353
<4353=4355,4354
<4356=4357
<4357=4359,4358
<4360=4361
<4361=4363,4362
<4364=4365
<4365=4367,4366
<4368=4369
<4369=4371,4370
<4372=4373
<4373=4375,4374
<4376=4377
<4377=4397,4378
<4378=4394,4379
<4379=4391,4380
<4380=4388,4381
<4381=4385,4382
<4382=4384,4383
<4385=4387,4386
<4388=4390,4389
<4391=4393,4392
<4394=4396,4395
<4397=4399,4398
<4400=4401
<4401=4403,4402
<4404=4405
<4405=4407,4406
<4408=4409
<4409=4411,4410
<4412=4413
<4413=4421,4414
<4414=4418,4415
<4415=4417,4416
<4418=4420,4419
<4421=4423,4422
<4424=4425
<4426=4427
<4428=4429
<4429=4431,4430
<4432=4497,4433
<4433=4434
<4434=4435
<4435=4495,4436
<4436=4493,4489,4485,4481,4477,4465,4461,4449,4445,4441,4437
<4437=4438
<4438=4440,4439
<4441=4442
<4442=4444,4443
<4445=4446
<4446=4448,4447
<4449=4450
<4450=4460,4451
<4451=4457,4452
<4452=4456,4453
<4453=4455,4454
<4457=4459,4458
<4461=4462
<4462=4464,4463
<4465=4466
<4466=4476,4467
<4467=4473,4468
<4468=4472,4469
<4469=4471,4470
<4473=4475,4474
<4477=4478
<4478=4480,4479
<4481=4482
<4482=4484,4483
<4485=4486
<4486=4488,4487
<4489=4490
<4490=4492,4491
<4493=4494
<4495=4496
<4497=4498
<4498=4500,4499
<4501=4525,4502
<4502=4514,4503
<4503=4504
<4504=4512,4505
<4505=4510,4508,4506
<4506=4507
<4508=4509
<4510=4511
<4512=4513
<4514=4515
<4515=4523,4516
<4516=4521,4519,4517
<4517=4518
<4519=4520
<4521=4522
<4523=4524
<4525=4526
<4527=4528
<4528=4530,4529
<4530=4532,4531
<4533=4534
<4534=4536,4535
<4536=4538,4537
<4539=4540
<4540=4542,4541
<4543=4544
<4544=4570,4545
<4545=4567,4546
<4546=4566,4547
<4547=4557,4548
<4548=4550,4549
<4550=4554,4551
<4551=4553,4552
<4554=4556,4555
<4557=4559,4558
<4559=4563,4560
<4560=4562,4561
<4563=4565,4564
<4567=4569,4568
<4571=4572
<4572=4580,4573
<4573=4576,4574
<4574=4575
<4576=4577
<4577=4579,4578
<4580=4581
<4582=4647,4583
<4583=4636,4627,4616,4588,4584
<4584=4585
<4585=4587,4586
<4588=4589
<4589=4615,4590
<4590=4612,4591
<4591=4611,4592
<4592=4602,4593
<4593=4595,4594
<4595=4599,4596
<4596=4598,4597
<4599=4601,4600
<4602=4604,4603
<4604=4608,4605
<4605=4607,4606
<4608=4610,4609
<4612=4614,4613
<4616=4617
<4617=4625,4618
<4618=4621,4619
<4619=4620
<4621=4622
<4622=4624,4623
<4625=4626
<4627=4628
<4628=4632,4629
<4629=4630
<4630=4631
<4632=4633
<4633=4635,4634
<4636=4637
<4637=4645,4638
<4638=4641,4639
<4639=4640
<4641=4642
<4642=4644,4643
<4645=4646
<4647=4648
<4648=4652,4649
<4649=4651,4650
<4653=4654
<4654=4656,4655
<4657=4658
<4658=4684,4659
<4659=4681,4660
<4660=4680,4661
<4661=4671,4662
<4662=4664,4663
<4664=4668,4665
<4665=4667,4666
<4668=4670,4669
<4671=4673,4672
<4673=4677,4674
<4674=4676,4675
<4677=4679,4678
<4681=4683,4682
<4685=4686
<4686=4694,4687
<4687=4690,4688
<4688=4689
<4690=4691
<4691=4693,4692
<4694=4695
<4696=4697
<4697=4703,4698
<4698=4701,4699
<4699=4700
<4701=4702
<4703=4704
<4705=4706
<4706=4714,4707
<4707=4710,4708
<4708=4709
<4710=4711
<4711=4713,4712
<4714=4715
<4716=4765,4760,4749,4721,4717
<4717=4718
<4718=4720,4719
<4721=4722
<4722=4748,4723
<4723=4745,4724
<4724=4744,4725
<4725=4735,4726
<4726=4728,4727
<4728=4732,4729
<4729=4731,4730
<4732=4734,4733
<4735=4737,4736
<4737=4741,4738
<4738=4740,4739
<4741=4743,4742
<4745=4747,4746
<4749=4750
<4750=4758,4751
<4751=4754,4752
<4752=4753
<4754=4755
<4755=4757,4756
<4758=4759
<4760=4761
<4761=4763,4762
<4763=4764
<4765=4766
<4766=4774,4767
<4767=4770,4768
<4768=4769
<4770=4771
<4771=4773,4772
<4774=4775
<4776=4777
<4777=4779,4778
<4780=4781
<4781=4807,4782
<4782=4804,4783
<4783=4803,4784
<4784=4794,4785
<4785=4787,4786
<4787=4791,4788
<4788=4790,4789
<4791=4793,4792
<4794=4796,4795
<4796=4800,4797
<4797=4799,4798
<4800=4802,4801
<4804=4806,4805
<4808=4809
<4809=4817,4810
<4810=4813,4811
<4811=4812
<4813=4814
<4814=4816,4815
<4817=4818
<4819=4820
<4820=4822,4821
<4822=4823
<4824=4825
<4825=4833,4826
<4826=4829,4827
<4827=4828
<4829=4830
<4830=4832,4831
<4833=4834
<4835=4839,4836
<4836=4838,4837
<4839=4841,4840
<4842=4998,4843
<4843=4997,4996,4995,4994,4993,4992,4991,4990,4989,4988,4987,4986,4985,4984,4983,4982,4981,4980,4979,4978,4977,4976,4975,4974,4973,4972,4971,4970,4969,4958,4947,4946,4945,4944,4943,4942,4941,4940,4939,4938,4937,4936,4935,4934,4933,4932,4931,4930,4929,4928,4927,4926,4844,4855,4866,4879,4880,4881,4882,4883,4884,4885,4886,4887,4888,4889,4890,4891,4892,4893,4894,4895,4896,4897,4898,4899,4900,4901,4902,4903,4904,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4916,4917,4918,4919,4920,4921,4922,4923,4924,4925
<4844=4845
<4845=4853,4846
<4846=4851,4849,4847
<4847=4848
<4849=4850
<4851=4852
<4853=4854
<4855=4856
<4856=4862,4857
<4857=4860,4858
<4858=4859
<4860=4861
<4862=4863
<4863=4865,4864
<4866=4867
<4867=4878,4877,4868
<4868=4876,4869
<4869=4873,4870
<4870=4872,4871
<4873=4875,4874
<4947=4948
<4948=4956,4949
<4949=4954,4952,4950
<4950=4951
<4952=4953
<4954=4955
<4956=4957
<4958=4959
<4959=4965,4960
<4960=4963,4961
<4961=4962
<4963=4964
<4965=4966
<4966=4968,4967
<4998=4999
<5000=5001
<5001=5003,5002
<5003=5004
<5005=5148,5104,5100,5054,5039,5006
<5006=5021,5007
<5007=5008
<5008=5017,5009
<5009=5010
<5010=5011
<5011=5013,5012
<5013=5014
<5014=5016,5015
<5017=5018
<5018=5020,5019
<5021=5022
<5022=5029,5023
<5023=5025,5024
<5025=5026
<5026=5028,5027
<5029=5031,5030
<5031=5038,5032
<5032=5034,5033
<5034=5035
<5035=5037,5036
<5039=5040
<5040=5050,5041
<5041=5048,5046,5044,5042
<5042=5043
<5044=5045
<5046=5047
<5048=5049
<5050=5051
<5051=5053,5052
<5054=5085,5077,5055
<5055=5056
<5056=5057
<5057=5076,5058
<5058=5065,5059
<5059=5061,5060
<5061=5062
<5062=5064,5063
<5065=5067,5066
<5067=5068
<5068=5070,5069
<5070=5072,5071
<5072=5073
<5073=5075,5074
<5077=5078
<5078=5084,5079
<5079=5081,5080
<5081=5083,5082
<5085=5086
<5086=5093,5087
<5087=5089,5088
<5089=5090
<5090=5092,5091
<5093=5095,5094
<5095=5097,5096
<5097=5099,5098
<5100=5101
<5101=5103,5102
<5104=5139,5105
<5105=5106
<5106=5107
<5107=5137,5108
<5108=5135,5128,5121,5109
<5109=5110
<5110=5112,5111
<5112=5113
<5113=5115,5114
<5115=5117,5116
<5117=5118
<5118=5120,5119
<5121=5122
<5122=5124,5123
<5124=5125
<5125=5127,5126
<5128=5129
<5129=5131,5130
<5131=5132
<5132=5134,5133
<5135=5136
<5137=5138
<5139=5140
<5140=5142,5141
<5142=5144,5143
<5144=5145
<5145=5147,5146
<5148=5149
<5149=5158,5150
<5150=5151
<5151=5152
<5152=5154,5153
<5154=5155
<5155=5157,5156
<5158=5159
<5162=5163
<5172=5173
<5173=5180,5174
<5174=5176,5175
<5176=5177
<5177=5179,5178
<5181=5182
<5182=5184,5183
<5184=5185
<5185=5187,5186
<5188=5189
<5189=5201,5190
<5190=5192,5191
<5192=5193
<5193=5195,5194
<5195=5197,5196
<5197=5198
<5198=5200,5199
<5202=5203
<5203=5215,5204
<5204=5206,5205
<5206=5207
<5207=5209,5208
<5209=5211,5210
<5211=5212
<5212=5214,5213
<5216=5217
<5217=5225,5218
<5218=5221,5219
<5219=5220
<5221=5222
<5222=5224,5223
<5225=5226
<5227=5231,5228
<5228=5230,5229
<5231=5233,5232
<5234=5235
<5235=5242,5236
<5236=5237
<5237=5238
<5238=5240,5239
<5240=5241
<5242=5243
<5348=5351,5350,5349
<5351=5363,5359,5352
<5352=5353
<5353=5355,5354
<5355=5356
<5356=5358,5357
<5359=5360
<5360=5362,5361
<5363=5365,5364
<5365=5366
<5366=5368,5367
<5374=5380,5379,5375
<5375=5376
<5376=5378,5377
<5380=5381,5385,5389,5417,5428,5432,5460,5471,5480,5491,5500,5520,5573,5582,5591,5630,5643,5647,5675,5686,5695,5706,5710,5738,5749,5754,5765,5769,5797,5808,5817,5828,5832,5843,5852,5856,5860,5888,5899,5906,5917,5924,5945,6005,6010,6021,6028,6040,6052,6061
<5381=5383,5382
<5383=5384
<5385=5386
<5386=5388,5387
<5389=5390
<5390=5416,5391
<5391=5413,5392
<5392=5412,5393
<5393=5403,5394
<5394=5396,5395
<5396=5400,5397
<5397=5399,5398
<5400=5402,5401
<5403=5405,5404
<5405=5409,5406
<5406=5408,5407
<5409=5411,5410
<5413=5415,5414
<5417=5418
<5418=5426,5419
<5419=5422,5420
<5420=5421
<5422=5423
<5423=5425,5424
<5426=5427
<5428=5429
<5429=5431,5430
<5432=5433
<5433=5459,5434
<5434=5456,5435
<5435=5455,5436
<5436=5446,5437
<5437=5439,5438
<5439=5443,5440
<5440=5442,5441
<5443=5445,5444
<5446=5448,5447
<5448=5452,5449
<5449=5451,5450
<5452=5454,5453
<5456=5458,5457
<5460=5461
<5461=5469,5462
<5462=5465,5463
<5463=5464
<5465=5466
<5466=5468,5467
<5469=5470
<5471=5472
<5472=5476,5473
<5473=5474
<5474=5475
<5476=5477
<5477=5479,5478
<5480=5481
<5481=5489,5482
<5482=5485,5483
<5483=5484
<5485=5486
<5486=5488,5487
<5489=5490
<5491=5492
<5492=5494,5493
<5494=5495
<5495=5497,5496
<5497=5499,5498
<5500=5501
<5501=5515,5502
<5502=5513,5503
<5503=5506,5504
<5504=5505
<5506=5507
<5507=5509,5508
<5509=5510
<5510=5512,5511
<5513=5514
<5515=5517,5516
<5517=5519,5518
<5520=5565,5557,5554,5521
<5521=5546,5540,5534,5528,5522
<5522=5523
<5523=5525,5524
<5525=5527,5526
<5528=5529
<5529=5531,5530
<5531=5533,5532
<5534=5535
<5535=5537,5536
<5537=5539,5538
<5540=5541
<5541=5543,5542
<5543=5545,5544
<5546=5548,5547
<5548=5549
<5549=5553,5550
<5550=5552,5551
<5554=5556,5555
<5557=5558
<5558=5564,5559
<5559=5563,5560
<5560=5562,5561
<5565=5566
<5566=5567
<5567=5572,5571,5568
<5568=5570,5569
<5573=5574
<5574=5581,5580,5575
<5575=5579,5576
<5576=5578,5577
<5582=5583
<5583=5590,5589,5584
<5584=5588,5585
<5585=5587,5586
<5591=5622,5614,5611,5592
<5592=5603,5597,5593
<5593=5594
<5594=5596,5595
<5597=5598
<5598=5602,5599
<5599=5601,5600
<5603=5605,5604
<5605=5606
<5606=5610,5607
<5607=5609,5608
<5611=5613,5612
<5614=5615
<5615=5621,5616
<5616=5620,5617
<5617=5619,5618
<5622=5623
<5623=5624
<5624=5629,5628,5625
<5625=5627,5626
<5630=5637,5631
<5631=5636,5635,5632
<5632=5634,5633
<5637=5642,5641,5638
<5638=5640,5639
<5643=5644
<5644=5646,5645
<5647=5648
<5648=5674,5649
<5649=5671,5650
<5650=5670,5651
<5651=5661,5652
<5652=5654,5653
<5654=5658,5655
<5655=5657,5656
<5658=5660,5659
<5661=5663,5662
<5663=5667,5664
<5664=5666,5665
<5667=5669,5668
<5671=5673,5672
<5675=5676
<5676=5684,5677
<5677=5680,5678
<5678=5679
<5680=5681
<5681=5683,5682
<5684=5685
<5686=5687
<5687=5693,5688
<5688=5691,5689
<5689=5690
<5691=5692
<5693=5694
<5695=5696
<5696=5704,5697
<5697=5700,5698
<5698=5699
<5700=5701
<5701=5703,5702
<5704=5705
<5706=5707
<5707=5709,5708
<5710=5711
<5711=5737,5712
<5712=5734,5713
<5713=5733,5714
<5714=5724,5715
<5715=5717,5716
<5717=5721,5718
<5718=5720,5719
<5721=5723,5722
<5724=5726,5725
<5726=5730,5727
<5727=5729,5728
<5730=5732,5731
<5734=5736,5735
<5738=5739
<5739=5747,5740
<5740=5743,5741
<5741=5742
<5743=5744
<5744=5746,5745
<5747=5748
<5749=5750
<5750=5752,5751
<5752=5753
<5754=5755
<5755=5763,5756
<5756=5759,5757
<5757=5758
<5759=5760
<5760=5762,5761
<5763=5764
<5765=5766
<5766=5768,5767
<5769=5770
<5770=5796,5771
<5771=5793,5772
<5772=5792,5773
<5773=5783,5774
<5774=5776,5775
<5776=5780,5777
<5777=5779,5778
<5780=5782,5781
<5783=5785,5784
<5785=5789,5786
<5786=5788,5787
<5789=5791,5790
<5793=5795,5794
<5797=5798
<5798=5806,5799
<5799=5802,5800
<5800=5801
<5802=5803
<5803=5805,5804
<5806=5807
<5808=5809
<5809=5815,5810
<5810=5813,5811
<5811=5812
<5813=5814
<5815=5816
<5817=5818
<5818=5826,5819
<5819=5822,5820
<5820=5821
<5822=5823
<5823=5825,5824
<5826=5827
<5828=5829
<5829=5831,5830
<5832=5833
<5833=5842,5834
<5834=5838,5835
<5835=5836
<5836=5837
<5838=5839
<5839=5841,5840
<5843=5844
<5844=5851,5845
<5845=5847,5846
<5847=5848
<5848=5850,5849
<5852=5853
<5853=5855,5854
<5856=5857
<5857=5859,5858
<5860=5861
<5861=5887,5862
<5862=5884,5863
<5863=5883,5864
<5864=5874,5865
<5865=5867,5866
<5867=5871,5868
<5868=5870,5869
<5871=5873,5872
<5874=5876,5875
<5876=5880,5877
<5877=5879,5878
<5880=5882,5881
<5884=5886,5885
<5888=5889
<5889=5897,5890
<5890=5893,5891
<5891=5892
<5893=5894
<5894=5896,5895
<5897=5898
<5899=5900
<5900=5904,5901
<5901=5902
<5902=5903
<5904=5905
<5906=5907
<5907=5915,5908
<5908=5911,5909
<5909=5910
<5911=5912
<5912=5914,5913
<5915=5916
<5917=5921,5918
<5918=5920,5919
<5921=5923,5922
<5924=5925
<5925=5944,5943,5926
<5926=5942,5927
<5927=5929,5928
<5929=5930
<5930=5932,5931
<5932=5940,5933
<5933=5934
<5934=5935
<5935=5937,5936
<5937=5939,5938
<5940=5941
<5945=6003,5946
<5946=6002,6001,6000,5999,5998,5997,5996,5995,5994,5993,5992,5991,5990,5989,5988,5987,5986,5985,5984,5983,5982,5981,5980,5979,5978,5977,5976,5975,5974,5973,5972,5971,5970,5969,5958,5947
<5947=5948
<5948=5956,5949
<5949=5954,5952,5950
<5950=5951
<5952=5953
<5954=5955
<5956=5957
<5958=5959
<5959=5965,5960
<5960=5963,5961
<5961=5962
<5963=5964
<5965=5966
<5966=5968,5967
<6003=6004
<6005=6006
<6006=6008,6007
<6008=6009
<6010=6011
<6011=6019,6012
<6012=6015,6013
<6013=6014
<6015=6016
<6016=6018,6017
<6019=6020
<6021=6025,6022
<6022=6024,6023
<6025=6027,6026
<6028=6029
<6029=6039,6038,6030
<6030=6037,6031
<6031=6033,6032
<6033=6034
<6034=6036,6035
<6040=6041
<6041=6050,6042
<6042=6043
<6043=6044
<6044=6046,6045
<6046=6047
<6047=6049,6048
<6050=6051
<6052=6053
<6053=6059,6054
<6054=6055
<6055=6056
<6056=6058,6057
<6059=6060
<6061=6062
<6062=6069,6063
<6063=6064
<6064=6065
<6065=6067,6066
<6067=6068
<6069=6070
<6150=6153,6152,6151
<6153=6371,6360,6337,6154
<6154=6333,6155
<6155=6321,6317,6305,6301,6289,6285,6273,6269,6257,6253,6241,6237,6225,6221,6209,6205,6201,6156
<6156=6197,6157
<6157=6158
<6158=6159
<6159=6195,6160
<6160=6193,6191,6189,6187,6185,6183,6181,6179,6177,6175,6173,6171,6169,6167,6165,6163,6161
<6161=6162
<6163=6164
<6165=6166
<6167=6168
<6169=6170
<6171=6172
<6173=6174
<6175=6176
<6177=6178
<6179=6180
<6181=6182
<6183=6184
<6185=6186
<6187=6188
<6189=6190
<6191=6192
<6193=6194
<6195=6196
<6197=6198
<6198=6200,6199
<6201=6202
<6202=6204,6203
<6205=6206
<6206=6208,6207
<6209=6210
<6210=6220,6211
<6211=6217,6212
<6212=6216,6213
<6213=6215,6214
<6217=6219,6218
<6221=6222
<6222=6224,6223
<6225=6226
<6226=6236,6227
<6227=6233,6228
<6228=6232,6229
<6229=6231,6230
<6233=6235,6234
<6237=6238
<6238=6240,6239
<6241=6242
<6242=6252,6243
<6243=6249,6244
<6244=6248,6245
<6245=6247,6246
<6249=6251,6250
<6253=6254
<6254=6256,6255
<6257=6258
<6258=6268,6259
<6259=6265,6260
<6260=6264,6261
<6261=6263,6262
<6265=6267,6266
<6269=6270
<6270=6272,6271
<6273=6274
<6274=6284,6275
<6275=6281,6276
<6276=6280,6277
<6277=6279,6278
<6281=6283,6282
<6285=6286
<6286=6288,6287
<6289=6290
<6290=6300,6291
<6291=6297,6292
<6292=6296,6293
<6293=6295,6294
<6297=6299,6298
<6301=6302
<6302=6304,6303
<6305=6306
<6306=6316,6307
<6307=6313,6308
<6308=6312,6309
<6309=6311,6310
<6313=6315,6314
<6317=6318
<6318=6320,6319
<6321=6322
<6322=6332,6323
<6323=6329,6324
<6324=6328,6325
<6325=6327,6326
<6329=6331,6330
<6333=6334
<6334=6336,6335
<6337=6338
<6338=6359,6358,6339
<6339=6357,6340
<6340=6350,6341
<6341=6343,6342
<6343=6347,6344
<6344=6346,6345
<6347=6349,6348
<6350=6354,6351
<6351=6353,6352
<6354=6356,6355
<6360=6361
<6361=6369,6362
<6362=6365,6363
<6363=6364
<6365=6366
<6366=6368,6367
<6369=6370
<6371=6372
<6372=6374,6373
<6413=6416,6415,6414
<6416=6686,6679,6668,6661,6650,6645,6634,6606,6602,6591,6582,6571,6543,6539,6528,6519,6512,6503,6492,6464,6460,6449,6421,6417
<6417=6418
<6418=6420,6419
<6421=6422
<6422=6448,6423
<6423=6445,6424
<6424=6444,6425
<6425=6435,6426
<6426=6428,6427
<6428=6432,6429
<6429=6431,6430
<6432=6434,6433
<6435=6437,6436
<6437=6441,6438
<6438=6440,6439
<6441=6443,6442
<6445=6447,6446
<6449=6450
<6450=6458,6451
<6451=6454,6452
<6452=6453
<6454=6455
<6455=6457,6456
<6458=6459
<6460=6461
<6461=6463,6462
<6464=6465
<6465=6491,6466
<6466=6488,6467
<6467=6487,6468
<6468=6478,6469
<6469=6471,6470
<6471=6475,6472
<6472=6474,6473
<6475=6477,6476
<6478=6480,6479
<6480=6484,6481
<6481=6483,6482
<6484=6486,6485
<6488=6490,6489
<6492=6493
<6493=6501,6494
<6494=6497,6495
<6495=6496
<6497=6498
<6498=6500,6499
<6501=6502
<6503=6504
<6504=6508,6505
<6505=6506
<6506=6507
<6508=6509
<6509=6511,6510
<6512=6513
<6513=6515,6514
<6515=6516
<6516=6518,6517
<6519=6520
<6520=6524,6521
<6521=6522
<6522=6523
<6524=6525
<6525=6527,6526
<6528=6529
<6529=6537,6530
<6530=6533,6531
<6531=6532
<6533=6534
<6534=6536,6535
<6537=6538
<6539=6540
<6540=6542,6541
<6543=6544
<6544=6570,6545
<6545=6567,6546
<6546=6566,6547
<6547=6557,6548
<6548=6550,6549
<6550=6554,6551
<6551=6553,6552
<6554=6556,6555
<6557=6559,6558
<6559=6563,6560
<6560=6562,6561
<6563=6565,6564
<6567=6569,6568
<6571=6572
<6572=6580,6573
<6573=6576,6574
<6574=6575
<6576=6577
<6577=6579,6578
<6580=6581
<6582=6583
<6583=6589,6584
<6584=6587,6585
<6585=6586
<6587=6588
<6589=6590
<6591=6592
<6592=6600,6593
<6593=6596,6594
<6594=6595
<6596=6597
<6597=6599,6598
<6600=6601
<6602=6603
<6603=6605,6604
<6606=6607
<6607=6633,6608
<6608=6630,6609
<6609=6629,6610
<6610=6620,6611
<6611=6613,6612
<6613=6617,6614
<6614=6616,6615
<6617=6619,6618
<6620=6622,6621
<6622=6626,6623
<6623=6625,6624
<6626=6628,6627
<6630=6632,6631
<6634=6635
<6635=6643,6636
<6636=6639,6637
<6637=6638
<6639=6640
<6640=6642,6641
<6643=6644
<6645=6646
<6646=6648,6647
<6648=6649
<6650=6651
<6651=6659,6652
<6652=6655,6653
<6653=6654
<6655=6656
<6656=6658,6657
<6659=6660
<6661=6665,6662
<6662=6664,6663
<6665=6667,6666
<6668=6669
<6669=6677,6670
<6670=6673,6671
<6671=6672
<6673=6674
<6674=6676,6675
<6677=6678
<6679=6683,6680
<6680=6682,6681
<6683=6685,6684
<6686=6687
<6687=6694,6688
<6688=6689
<6689=6690
<6690=6692,6691
<6692=6693
<6694=6695
<6729=6732,6731,6730
<6732=6909,6908,6907,6906,6905,6904,6903,6902,6901,6900,6899,6898,6897,6896,6895,6894,6893,6892,6891,6890,6889,6888,6887,6886,6885,6884,6883,6882,6881,6880,6869,6858,6851,6735,6733
<6733=6734
<6735=6843,6839,6836,6736
<6736=6828,6824,6821,6737
<6737=6810,6776,6766,6750,6738
<6738=6739
<6739=6741,6740
<6741=6747,6742
<6742=6746,6743
<6743=6745,6744
<6747=6749,6748
<6750=6751
<6751=6765,6764,6752
<6752=6763,6753
<6753=6757,6754
<6754=6755
<6755=6756
<6757=6758
<6758=6760,6759
<6760=6762,6761
<6766=6768,6767
<6768=6769
<6769=6775,6770
<6770=6772,6771
<6772=6774,6773
<6776=6798,6777
<6777=6778
<6778=6789,6779
<6779=6787,6780
<6780=6785,6783,6781
<6781=6782
<6783=6784
<6785=6786
<6787=6788
<6789=6795,6790
<6790=6794,6791
<6791=6793,6792
<6795=6797,6796
<6798=6799
<6799=6803,6800
<6800=6802,6801
<6803=6805,6804
<6805=6807,6806
<6807=6809,6808
<6810=6811
<6811=6820,6819,6812
<6812=6818,6813
<6813=6817,6814
<6814=6816,6815
<6821=6823,6822
<6824=6825
<6825=6827,6826
<6828=6829
<6829=6830
<6830=6835,6834,6831
<6831=6833,6832
<6836=6838,6837
<6839=6840
<6840=6842,6841
<6843=6844
<6844=6845
<6845=6850,6849,6846
<6846=6848,6847
<6851=6852
<6852=6857,6856,6853
<6853=6855,6854
<6858=6859
<6859=6867,6860
<6860=6865,6863,6861
<6861=6862
<6863=6864
<6865=6866
<6867=6868
<6869=6870
<6870=6876,6871
<6871=6874,6872
<6872=6873
<6874=6875
<6876=6877
<6877=6879,6878
<6909=6912,6910
<6910=6911
<6912=6913
<6913=6915,6914
