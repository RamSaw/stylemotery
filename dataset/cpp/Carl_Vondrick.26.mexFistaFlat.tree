>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	IfStatement	if ( double_rows )
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	Identifier	D3
>20	Statement	 
>21	Condition	 
>22	Identifier	double_rows
>23	IfStatement	if ( shifts > 1 )
>24	CompoundStatement	 
>25	ExpressionStatement	 
>26	Identifier	D2
>27	Statement	 
>28	Condition	 
>29	RelationalExpression	shifts > 1
>30	PrimaryExpression	1
>31	Identifier	shifts
>32	ExpressionStatement	 
>33	Identifier	D
>34	Statement	 
>35	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>36	CompoundStatement	 
>37	ExpressionStatement	 
>38	RelationalExpression	deleteCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>39	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>40	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r
>41	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r
>42	Expression	D_pB2 , D_pE2 , D_v , D_r
>43	Expression	D_pE2 , D_v , D_r
>44	Expression	D_v , D_r
>45	Identifier	D_r
>46	Identifier	D_v
>47	Identifier	D_pE2
>48	Identifier	D_pB2
>49	Identifier	D_r2
>50	Identifier	D_v2
>51	Identifier	T
>52	Identifier	deleteCopySparse
>53	Condition	 
>54	CallExpression	mxIsSparse ( prhs [ 1 ] )
>55	ArgumentList	prhs [ 1 ]
>56	Argument	prhs [ 1 ]
>57	ArrayIndexing	prhs [ 1 ]
>58	PrimaryExpression	1
>59	Identifier	prhs
>60	Callee	mxIsSparse
>61	Identifier	mxIsSparse
>62	ExpressionStatement	 
>63	MemberAccess	param . logName
>64	Identifier	logName
>65	Identifier	param
>66	Statement	 
>67	Statement	 
>68	IfStatement	if ( param . logName )
>69	Statement	 
>70	Condition	 
>71	MemberAccess	param . logName
>72	Identifier	logName
>73	Identifier	param
>74	IfStatement	if ( nlhs == 2 )
>75	CompoundStatement	 
>76	ForStatement	for ( long i = 0 ; i < duality_gap . n ( ) * duality_gap . m ( ) ; ++ i )
>77	ExpressionStatement	 
>78	AssignmentExpr	pr_dualitygap [ i ] = duality_gap [ i ]
>79	ArrayIndexing	duality_gap [ i ]
>80	Identifier	i
>81	Identifier	duality_gap
>82	ArrayIndexing	pr_dualitygap [ i ]
>83	Identifier	i
>84	Identifier	pr_dualitygap
>85	UnaryExpression	 
>86	Identifier	i
>87	IncDec	++
>88	Condition	 
>89	RelationalExpression	i < duality_gap . n ( ) * duality_gap . m ( )
>90	MultiplicativeExpression	duality_gap . n ( ) * duality_gap . m ( )
>91	CallExpression	duality_gap . m ( )
>92	ArgumentList	 
>93	Callee	duality_gap . m
>94	MemberAccess	duality_gap . m
>95	Identifier	m
>96	Identifier	duality_gap
>97	CallExpression	duality_gap . n ( )
>98	ArgumentList	 
>99	Callee	duality_gap . n
>100	MemberAccess	duality_gap . n
>101	Identifier	n
>102	Identifier	duality_gap
>103	Identifier	i
>104	ForInit	 
>105	IdentifierDeclStatement	long i = 0 ;
>106	IdentifierDecl	i = 0
>107	AssignmentExpr	i = 0
>108	PrimaryExpression	0
>109	Identifier	i
>110	Identifier	i
>111	IdentifierDeclType	long
>112	ExpressionStatement	 
>113	CallExpression	mxGetPr ( plhs [ 1 ] )
>114	ArgumentList	plhs [ 1 ]
>115	Argument	plhs [ 1 ]
>116	ArrayIndexing	plhs [ 1 ]
>117	PrimaryExpression	1
>118	Identifier	plhs
>119	Callee	mxGetPr
>120	Identifier	mxGetPr
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	ExpressionStatement	 
>131	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>132	RelationalExpression	createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>133	RelationalExpression	T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>134	Expression	duality_gap . m ( ) , duality_gap . n ( )
>135	CallExpression	duality_gap . n ( )
>136	ArgumentList	 
>137	Callee	duality_gap . n
>138	MemberAccess	duality_gap . n
>139	Identifier	n
>140	Identifier	duality_gap
>141	CallExpression	duality_gap . m ( )
>142	ArgumentList	 
>143	Callee	duality_gap . m
>144	MemberAccess	duality_gap . m
>145	Identifier	m
>146	Identifier	duality_gap
>147	Identifier	T
>148	Identifier	createMatrix
>149	ArrayIndexing	plhs [ 1 ]
>150	PrimaryExpression	1
>151	Identifier	plhs
>152	Condition	 
>153	EqualityExpression	nlhs == 2
>154	PrimaryExpression	2
>155	Identifier	nlhs
>156	ExpressionStatement	 
>157	RelationalExpression	FISTA 
>158	RelationalExpression	T > ( X , * D , alpha0 , alpha , param , duality_gap )
>159	Expression	X , * D , alpha0 , alpha , param , duality_gap
>160	Expression	* D , alpha0 , alpha , param , duality_gap
>161	Expression	alpha0 , alpha , param , duality_gap
>162	Expression	alpha , param , duality_gap
>163	Expression	param , duality_gap
>164	Identifier	duality_gap
>165	Identifier	param
>166	Identifier	alpha
>167	Identifier	alpha0
>168	UnaryOp	* D
>169	Identifier	D
>170	UnaryOperator	*
>171	Identifier	X
>172	Identifier	T
>173	Identifier	FISTA 
>174	IdentifierDeclStatement	 
>175	IdentifierDecl	duality_gap
>176	Identifier	duality_gap
>177	IdentifierDeclType	Matrix < T >
>178	IfStatement	if ( param . regul == TREE_L0 || param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == TREE_\
>179	ExpressionStatement	 
>180	CallExpression	mexErrMsgTxt ( \"Error
>181	ArgumentList	\"Error
>182	Argument	\"Error
>183	PrimaryExpression	\"Error
>184	Callee	mexErrMsgTxt
>185	Identifier	mexErrMsgTxt
>186	Condition	 
>187	OrExpression	param . regul == TREE_L0 || param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == \
>188	OrExpression	param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == TREE_LINF
>189	OrExpression	param . regul == TREE_L2 || param . regul == TREE_LINF
>190	EqualityExpression	param . regul == TREE_LINF
>191	Identifier	TREE_LINF
>192	MemberAccess	param . regul
>193	Identifier	regul
>194	Identifier	param
>195	EqualityExpression	param . regul == TREE_L2
>196	Identifier	TREE_L2
>197	MemberAccess	param . regul
>198	Identifier	regul
>199	Identifier	param
>200	EqualityExpression	param . regul == TREEMULT
>201	Identifier	TREEMULT
>202	MemberAccess	param . regul
>203	Identifier	regul
>204	Identifier	param
>205	EqualityExpression	param . regul == TREE_L0
>206	Identifier	TREE_L0
>207	MemberAccess	param . regul
>208	Identifier	regul
>209	Identifier	param
>210	IfStatement	if ( param . regul == GRAPH || param . regul == GRAPHMULT )
>211	ExpressionStatement	 
>212	CallExpression	mexErrMsgTxt ( \"Error
>213	ArgumentList	\"Error
>214	Argument	\"Error
>215	PrimaryExpression	\"Error
>216	Callee	mexErrMsgTxt
>217	Identifier	mexErrMsgTxt
>218	Condition	 
>219	OrExpression	param . regul == GRAPH || param . regul == GRAPHMULT
>220	EqualityExpression	param . regul == GRAPHMULT
>221	Identifier	GRAPHMULT
>222	MemberAccess	param . regul
>223	Identifier	regul
>224	Identifier	param
>225	EqualityExpression	param . regul == GRAPH
>226	Identifier	GRAPH
>227	MemberAccess	param . regul
>228	Identifier	regul
>229	Identifier	param
>230	IfStatement	if ( param . regul == GRAPH_PATH_L0 || param . regul == GRAPH_PATH_CONV )
>231	ExpressionStatement	 
>232	CallExpression	mexErrMsgTxt ( \"Error
>233	ArgumentList	\"Error
>234	Argument	\"Error
>235	PrimaryExpression	\"Error
>236	Callee	mexErrMsgTxt
>237	Identifier	mexErrMsgTxt
>238	Condition	 
>239	OrExpression	param . regul == GRAPH_PATH_L0 || param . regul == GRAPH_PATH_CONV
>240	EqualityExpression	param . regul == GRAPH_PATH_CONV
>241	Identifier	GRAPH_PATH_CONV
>242	MemberAccess	param . regul
>243	Identifier	regul
>244	Identifier	param
>245	EqualityExpression	param . regul == GRAPH_PATH_L0
>246	Identifier	GRAPH_PATH_L0
>247	MemberAccess	param . regul
>248	Identifier	regul
>249	Identifier	param
>250	IfStatement	if ( param . num_threads == - 1 )
>251	CompoundStatement	 
>252	ExpressionStatement	 
>253	AssignmentExpr	param . num_threads = MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>254	CallExpression	MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>255	ArgumentList	MAX_THREADS
>256	Argument	omp_get_num_procs ( )
>257	CallExpression	omp_get_num_procs ( )
>258	ArgumentList	 
>259	Callee	omp_get_num_procs
>260	Identifier	omp_get_num_procs
>261	Argument	MAX_THREADS
>262	Identifier	MAX_THREADS
>263	Callee	MIN
>264	Identifier	MIN
>265	MemberAccess	param . num_threads
>266	Identifier	num_threads
>267	Identifier	param
>268	ExpressionStatement	 
>269	AssignmentExpr	param . num_threads = 1
>270	PrimaryExpression	1
>271	MemberAccess	param . num_threads
>272	Identifier	num_threads
>273	Identifier	param
>274	Condition	 
>275	EqualityExpression	param . num_threads == - 1
>276	UnaryOp	- 1
>277	PrimaryExpression	1
>278	UnaryOperator	-
>279	MemberAccess	param . num_threads
>280	Identifier	num_threads
>281	Identifier	param
>282	IfStatement	if ( ( ! double_rows && shifts == 1 && param . loss != CUR && param . loss != MULTILOG ) && ( pAlpha != p || nAlpha != \
>283	ElseStatement	else
>284	IfStatement	if ( param . loss == MULTILOG )
>285	ElseStatement	else
>286	IfStatement	if ( param . loss == CUR && ( pAlpha != D -> n ( ) || nAlpha != D -> m ( ) ) )
>287	CompoundStatement	 
>288	ExpressionStatement	 
>289	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>290	ArgumentList	\"Argument sizes are not consistent\"
>291	Argument	\"Argument sizes are not consistent\"
>292	PrimaryExpression	\"Argument sizes are not consistent\"
>293	Callee	mexErrMsgTxt
>294	Identifier	mexErrMsgTxt
>295	Condition	 
>296	AndExpression	param . loss == CUR && ( pAlpha != D -> n ( ) || nAlpha != D -> m ( ) )
>297	OrExpression	pAlpha != D -> n ( ) || nAlpha != D -> m ( )
>298	EqualityExpression	nAlpha != D -> m ( )
>299	CallExpression	D -> m ( )
>300	ArgumentList	 
>301	Callee	D -> m
>302	PtrMemberAccess	D -> m
>303	Identifier	m
>304	Identifier	D
>305	Identifier	nAlpha
>306	EqualityExpression	pAlpha != D -> n ( )
>307	CallExpression	D -> n ( )
>308	ArgumentList	 
>309	Callee	D -> n
>310	PtrMemberAccess	D -> n
>311	Identifier	n
>312	Identifier	D
>313	Identifier	pAlpha
>314	EqualityExpression	param . loss == CUR
>315	Identifier	CUR
>316	MemberAccess	param . loss
>317	Identifier	loss
>318	Identifier	param
>319	CompoundStatement	 
>320	IfStatement	if ( maxval * X . n ( ) > nAlpha || mD != m )
>321	CompoundStatement	 
>322	ExpressionStatement	 
>323	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>324	ArgumentList	\"Argument sizes are not consistent\"
>325	Argument	\"Argument sizes are not consistent\"
>326	PrimaryExpression	\"Argument sizes are not consistent\"
>327	Callee	mexErrMsgTxt
>328	Identifier	mexErrMsgTxt
>329	ExpressionStatement	 
>330	ShiftExpression	cerr << \"Number of classes
>331	ShiftExpression	\"Number of classes
>332	ShiftExpression	maxval << endl
>333	Identifier	endl
>334	Identifier	maxval
>335	PrimaryExpression	\"Number of classes
>336	Identifier	cerr
>337	Condition	 
>338	OrExpression	maxval * X . n ( ) > nAlpha || mD != m
>339	EqualityExpression	mD != m
>340	Identifier	m
>341	Identifier	mD
>342	RelationalExpression	maxval * X . n ( ) > nAlpha
>343	Identifier	nAlpha
>344	MultiplicativeExpression	maxval * X . n ( )
>345	CallExpression	X . n ( )
>346	ArgumentList	 
>347	Callee	X . n
>348	MemberAccess	X . n
>349	Identifier	n
>350	Identifier	X
>351	Identifier	maxval
>352	IfStatement	if ( minval != 0 )
>353	ExpressionStatement	 
>354	CallExpression	mexErrMsgTxt ( \"smallest class should be 0\" )
>355	ArgumentList	\"smallest class should be 0\"
>356	Argument	\"smallest class should be 0\"
>357	PrimaryExpression	\"smallest class should be 0\"
>358	Callee	mexErrMsgTxt
>359	Identifier	mexErrMsgTxt
>360	Condition	 
>361	EqualityExpression	minval != 0
>362	PrimaryExpression	0
>363	Identifier	minval
>364	ExpressionStatement	 
>365	CallExpression	Xv . minval ( )
>366	ArgumentList	 
>367	Callee	Xv . minval
>368	MemberAccess	Xv . minval
>369	Identifier	minval
>370	Identifier	Xv
>371	Statement	 
>372	Statement	 
>373	Statement	 
>374	Statement	 
>375	Statement	 
>376	Statement	 
>377	Statement	 
>378	ExpressionStatement	 
>379	CallExpression	Xv . maxval ( )
>380	ArgumentList	 
>381	Callee	Xv . maxval
>382	MemberAccess	Xv . maxval
>383	Identifier	maxval
>384	Identifier	Xv
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	ExpressionStatement	 
>393	CallExpression	X . toVect ( Xv )
>394	ArgumentList	Xv
>395	Argument	Xv
>396	Identifier	Xv
>397	Callee	X . toVect
>398	MemberAccess	X . toVect
>399	Identifier	toVect
>400	Identifier	X
>401	IdentifierDeclStatement	 
>402	IdentifierDecl	Xv
>403	Identifier	Xv
>404	IdentifierDeclType	Vector < T >
>405	Condition	 
>406	EqualityExpression	param . loss == MULTILOG
>407	Identifier	MULTILOG
>408	MemberAccess	param . loss
>409	Identifier	loss
>410	Identifier	param
>411	CompoundStatement	 
>412	ExpressionStatement	 
>413	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>414	ArgumentList	\"Argument sizes are not consistent\"
>415	Argument	\"Argument sizes are not consistent\"
>416	PrimaryExpression	\"Argument sizes are not consistent\"
>417	Callee	mexErrMsgTxt
>418	Identifier	mexErrMsgTxt
>419	Condition	 
>420	AndExpression	( ! double_rows && shifts == 1 && param . loss != CUR && param . loss != MULTILOG ) && ( pAlpha != p || \
>421	OrExpression	pAlpha != p || nAlpha != n || mD != m
>422	OrExpression	nAlpha != n || mD != m
>423	EqualityExpression	mD != m
>424	Identifier	m
>425	Identifier	mD
>426	EqualityExpression	nAlpha != n
>427	Identifier	n
>428	Identifier	nAlpha
>429	EqualityExpression	pAlpha != p
>430	Identifier	p
>431	Identifier	pAlpha
>432	AndExpression	! double_rows && shifts == 1 && param . loss != CUR && param . loss != MULTILOG
>433	AndExpression	shifts == 1 && param . loss != CUR && param . loss != MULTILOG
>434	AndExpression	param . loss != CUR && param . loss != MULTILOG
>435	EqualityExpression	param . loss != MULTILOG
>436	Identifier	MULTILOG
>437	MemberAccess	param . loss
>438	Identifier	loss
>439	Identifier	param
>440	EqualityExpression	param . loss != CUR
>441	Identifier	CUR
>442	MemberAccess	param . loss
>443	Identifier	loss
>444	Identifier	param
>445	EqualityExpression	shifts == 1
>446	PrimaryExpression	1
>447	Identifier	shifts
>448	UnaryOp	! double_rows
>449	Identifier	double_rows
>450	UnaryOperator	!
>451	IfStatement	if ( param . log )
>452	CompoundStatement	 
>453	ExpressionStatement	 
>454	CallExpression	mxGetString ( stringData , param . logName , stringLength )
>455	ArgumentList	stringData
>456	Argument	stringLength
>457	Identifier	stringLength
>458	Argument	param . logName
>459	MemberAccess	param . logName
>460	Identifier	logName
>461	Identifier	param
>462	Argument	stringData
>463	Identifier	stringData
>464	Callee	mxGetString
>465	Identifier	mxGetString
>466	ExpressionStatement	 
>467	AssignmentExpr	param . logName = new char [ stringLength ]
>468	Identifier	stringLength
>469	MemberAccess	param . logName
>470	Identifier	logName
>471	Identifier	param
>472	IdentifierDeclStatement	 
>473	IdentifierDecl	stringLength = mxGetN ( stringData ) + 1
>474	AssignmentExpr	stringLength = mxGetN ( stringData ) + 1
>475	AdditiveExpression	mxGetN ( stringData ) + 1
>476	PrimaryExpression	1
>477	CallExpression	mxGetN ( stringData )
>478	ArgumentList	stringData
>479	Argument	stringData
>480	Identifier	stringData
>481	Callee	mxGetN
>482	Identifier	mxGetN
>483	Identifier	stringLength
>484	Identifier	stringLength
>485	IdentifierDeclType	long
>486	IfStatement	if ( ! stringData )
>487	ExpressionStatement	 
>488	CallExpression	mexErrMsgTxt ( \"Missing field logName\" )
>489	ArgumentList	\"Missing field logName\"
>490	Argument	\"Missing field logName\"
>491	PrimaryExpression	\"Missing field logName\"
>492	Callee	mexErrMsgTxt
>493	Identifier	mexErrMsgTxt
>494	Condition	 
>495	UnaryOp	! stringData
>496	Identifier	stringData
>497	UnaryOperator	!
>498	IdentifierDeclStatement	 
>499	IdentifierDecl	* stringData = mxGetField ( prhs [ 3 ] , 0 , \"logName\" )
>500	AssignmentExpr	* stringData = mxGetField ( prhs [ 3 ] , 0 , \"logName\" )
>501	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"logName\" )
>502	ArgumentList	prhs [ 3 ]
>503	Argument	\"logName\"
>504	PrimaryExpression	\"logName\"
>505	Argument	0
>506	PrimaryExpression	0
>507	Argument	prhs [ 3 ]
>508	ArrayIndexing	prhs [ 3 ]
>509	PrimaryExpression	3
>510	Identifier	prhs
>511	Callee	mxGetField
>512	Identifier	mxGetField
>513	Identifier	stringData
>514	Identifier	stringData
>515	IdentifierDeclType	mxArray *
>516	Condition	 
>517	MemberAccess	param . log
>518	Identifier	log
>519	Identifier	param
>520	ExpressionStatement	 
>521	AssignmentExpr	param . b = getScalarStructDef < T > ( prhs [ 3 ] , \"b\" , 0 )
>522	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"b\" , 0 )
>523	RelationalExpression	T > ( prhs [ 3 ] , \"b\" , 0 )
>524	Expression	prhs [ 3 ] , \"b\" , 0
>525	Expression	\"b\" , 0
>526	PrimaryExpression	0
>527	PrimaryExpression	\"b\"
>528	ArrayIndexing	prhs [ 3 ]
>529	PrimaryExpression	3
>530	Identifier	prhs
>531	Identifier	T
>532	Identifier	getScalarStructDef
>533	MemberAccess	param . b
>534	Identifier	b
>535	Identifier	param
>536	ExpressionStatement	 
>537	AssignmentExpr	param . a = getScalarStructDef < T > ( prhs [ 3 ] , \"a\" , T ( 1.0 ) )
>538	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"a\" , T ( 1.0 ) )
>539	RelationalExpression	T > ( prhs [ 3 ] , \"a\" , T ( 1.0 ) )
>540	Expression	prhs [ 3 ] , \"a\" , T ( 1.0 )
>541	Expression	\"a\" , T ( 1.0 )
>542	CallExpression	T ( 1.0 )
>543	ArgumentList	1.0
>544	Argument	1.0
>545	PrimaryExpression	1.0
>546	Callee	T
>547	Identifier	T
>548	PrimaryExpression	\"a\"
>549	ArrayIndexing	prhs [ 3 ]
>550	PrimaryExpression	3
>551	Identifier	prhs
>552	Identifier	T
>553	Identifier	getScalarStructDef
>554	MemberAccess	param . a
>555	Identifier	a
>556	Identifier	param
>557	ExpressionStatement	 
>558	AssignmentExpr	param . log = getScalarStructDef < bool > ( prhs [ 3 ] , \"log\" , false )
>559	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"log\" , false )
>560	RelationalExpression	bool > ( prhs [ 3 ] , \"log\" , false )
>561	Expression	prhs [ 3 ] , \"log\" , false
>562	Expression	\"log\" , false
>563	Identifier	false
>564	PrimaryExpression	\"log\"
>565	ArrayIndexing	prhs [ 3 ]
>566	PrimaryExpression	3
>567	Identifier	prhs
>568	Identifier	bool
>569	Identifier	getScalarStructDef
>570	MemberAccess	param . log
>571	Identifier	log
>572	Identifier	param
>573	ExpressionStatement	 
>574	AssignmentExpr	param . subgrad = getScalarStructDef < bool > ( prhs [ 3 ] , \"subgrad\" , false )
>575	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"subgrad\" , false )
>576	RelationalExpression	bool > ( prhs [ 3 ] , \"subgrad\" , false )
>577	Expression	prhs [ 3 ] , \"subgrad\" , false
>578	Expression	\"subgrad\" , false
>579	Identifier	false
>580	PrimaryExpression	\"subgrad\"
>581	ArrayIndexing	prhs [ 3 ]
>582	PrimaryExpression	3
>583	Identifier	prhs
>584	Identifier	bool
>585	Identifier	getScalarStructDef
>586	MemberAccess	param . subgrad
>587	Identifier	subgrad
>588	Identifier	param
>589	ExpressionStatement	 
>590	AssignmentExpr	param . ista = getScalarStructDef < bool > ( prhs [ 3 ] , \"ista\" , false )
>591	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"ista\" , false )
>592	RelationalExpression	bool > ( prhs [ 3 ] , \"ista\" , false )
>593	Expression	prhs [ 3 ] , \"ista\" , false
>594	Expression	\"ista\" , false
>595	Identifier	false
>596	PrimaryExpression	\"ista\"
>597	ArrayIndexing	prhs [ 3 ]
>598	PrimaryExpression	3
>599	Identifier	prhs
>600	Identifier	bool
>601	Identifier	getScalarStructDef
>602	MemberAccess	param . ista
>603	Identifier	ista
>604	Identifier	param
>605	ExpressionStatement	 
>606	AssignmentExpr	param . clever = getScalarStructDef < bool > ( prhs [ 3 ] , \"clever\" , false )
>607	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"clever\" , false )
>608	RelationalExpression	bool > ( prhs [ 3 ] , \"clever\" , false )
>609	Expression	prhs [ 3 ] , \"clever\" , false
>610	Expression	\"clever\" , false
>611	Identifier	false
>612	PrimaryExpression	\"clever\"
>613	ArrayIndexing	prhs [ 3 ]
>614	PrimaryExpression	3
>615	Identifier	prhs
>616	Identifier	bool
>617	Identifier	getScalarStructDef
>618	MemberAccess	param . clever
>619	Identifier	clever
>620	Identifier	param
>621	ExpressionStatement	 
>622	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 3 ] , \"verbose\" , false )
>623	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"verbose\" , false )
>624	RelationalExpression	bool > ( prhs [ 3 ] , \"verbose\" , false )
>625	Expression	prhs [ 3 ] , \"verbose\" , false
>626	Expression	\"verbose\" , false
>627	Identifier	false
>628	PrimaryExpression	\"verbose\"
>629	ArrayIndexing	prhs [ 3 ]
>630	PrimaryExpression	3
>631	Identifier	prhs
>632	Identifier	bool
>633	Identifier	getScalarStructDef
>634	MemberAccess	param . verbose
>635	Identifier	verbose
>636	Identifier	param
>637	ExpressionStatement	 
>638	AssignmentExpr	param . resetflow = getScalarStructDef < bool > ( prhs [ 3 ] , \"resetflow\" , false )
>639	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"resetflow\" , false )
>640	RelationalExpression	bool > ( prhs [ 3 ] , \"resetflow\" , false )
>641	Expression	prhs [ 3 ] , \"resetflow\" , false
>642	Expression	\"resetflow\" , false
>643	Identifier	false
>644	PrimaryExpression	\"resetflow\"
>645	ArrayIndexing	prhs [ 3 ]
>646	PrimaryExpression	3
>647	Identifier	prhs
>648	Identifier	bool
>649	Identifier	getScalarStructDef
>650	MemberAccess	param . resetflow
>651	Identifier	resetflow
>652	Identifier	param
>653	ExpressionStatement	 
>654	AssignmentExpr	param . intercept = getScalarStructDef < bool > ( prhs [ 3 ] , \"intercept\" , false )
>655	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"intercept\" , false )
>656	RelationalExpression	bool > ( prhs [ 3 ] , \"intercept\" , false )
>657	Expression	prhs [ 3 ] , \"intercept\" , false
>658	Expression	\"intercept\" , false
>659	Identifier	false
>660	PrimaryExpression	\"intercept\"
>661	ArrayIndexing	prhs [ 3 ]
>662	PrimaryExpression	3
>663	Identifier	prhs
>664	Identifier	bool
>665	Identifier	getScalarStructDef
>666	MemberAccess	param . intercept
>667	Identifier	intercept
>668	Identifier	param
>669	IfStatement	if ( param . loss == INCORRECT_LOSS )
>670	ExpressionStatement	 
>671	CallExpression	mexErrMsgTxt ( \"Unknown loss\" )
>672	ArgumentList	\"Unknown loss\"
>673	Argument	\"Unknown loss\"
>674	PrimaryExpression	\"Unknown loss\"
>675	Callee	mexErrMsgTxt
>676	Identifier	mexErrMsgTxt
>677	Condition	 
>678	EqualityExpression	param . loss == INCORRECT_LOSS
>679	Identifier	INCORRECT_LOSS
>680	MemberAccess	param . loss
>681	Identifier	loss
>682	Identifier	param
>683	ExpressionStatement	 
>684	AssignmentExpr	param . loss = loss_from_string ( param . name_loss )
>685	CallExpression	loss_from_string ( param . name_loss )
>686	ArgumentList	param . name_loss
>687	Argument	param . name_loss
>688	MemberAccess	param . name_loss
>689	Identifier	name_loss
>690	Identifier	param
>691	Callee	loss_from_string
>692	Identifier	loss_from_string
>693	MemberAccess	param . loss
>694	Identifier	loss
>695	Identifier	param
>696	ExpressionStatement	 
>697	CallExpression	getStringStruct ( prhs [ 3 ] , \"loss\" , param . name_loss , param . length_names )
>698	ArgumentList	prhs [ 3 ]
>699	Argument	param . length_names
>700	MemberAccess	param . length_names
>701	Identifier	length_names
>702	Identifier	param
>703	Argument	param . name_loss
>704	MemberAccess	param . name_loss
>705	Identifier	name_loss
>706	Identifier	param
>707	Argument	\"loss\"
>708	PrimaryExpression	\"loss\"
>709	Argument	prhs [ 3 ]
>710	ArrayIndexing	prhs [ 3 ]
>711	PrimaryExpression	3
>712	Identifier	prhs
>713	Callee	getStringStruct
>714	Identifier	getStringStruct
>715	IfStatement	if ( param . regul == INCORRECT_REG )
>716	ExpressionStatement	 
>717	CallExpression	mexErrMsgTxt ( \"Unknown regularization\" )
>718	ArgumentList	\"Unknown regularization\"
>719	Argument	\"Unknown regularization\"
>720	PrimaryExpression	\"Unknown regularization\"
>721	Callee	mexErrMsgTxt
>722	Identifier	mexErrMsgTxt
>723	Condition	 
>724	EqualityExpression	param . regul == INCORRECT_REG
>725	Identifier	INCORRECT_REG
>726	MemberAccess	param . regul
>727	Identifier	regul
>728	Identifier	param
>729	ExpressionStatement	 
>730	AssignmentExpr	param . regul = regul_from_string ( param . name_regul )
>731	CallExpression	regul_from_string ( param . name_regul )
>732	ArgumentList	param . name_regul
>733	Argument	param . name_regul
>734	MemberAccess	param . name_regul
>735	Identifier	name_regul
>736	Identifier	param
>737	Callee	regul_from_string
>738	Identifier	regul_from_string
>739	MemberAccess	param . regul
>740	Identifier	regul
>741	Identifier	param
>742	ExpressionStatement	 
>743	CallExpression	getStringStruct ( prhs [ 3 ] , \"regul\" , param . name_regul , param . length_names )
>744	ArgumentList	prhs [ 3 ]
>745	Argument	param . length_names
>746	MemberAccess	param . length_names
>747	Identifier	length_names
>748	Identifier	param
>749	Argument	param . name_regul
>750	MemberAccess	param . name_regul
>751	Identifier	name_regul
>752	Identifier	param
>753	Argument	\"regul\"
>754	PrimaryExpression	\"regul\"
>755	Argument	prhs [ 3 ]
>756	ArrayIndexing	prhs [ 3 ]
>757	PrimaryExpression	3
>758	Identifier	prhs
>759	Callee	getStringStruct
>760	Identifier	getStringStruct
>761	IfStatement	if ( param . is_inner_weights )
>762	CompoundStatement	 
>763	ExpressionStatement	 
>764	CallExpression	mxGetPr ( ppr_inner_weights )
>765	ArgumentList	ppr_inner_weights
>766	Argument	ppr_inner_weights
>767	Identifier	ppr_inner_weights
>768	Callee	mxGetPr
>769	Identifier	mxGetPr
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	IfStatement	if ( ! mexCheckType < T > ( ppr_inner_weights ) )
>780	ExpressionStatement	 
>781	CallExpression	mexErrMsgTxt ( \"type of inner_weights is not correct\" )
>782	ArgumentList	\"type of inner_weights is not correct\"
>783	Argument	\"type of inner_weights is not correct\"
>784	PrimaryExpression	\"type of inner_weights is not correct\"
>785	Callee	mexErrMsgTxt
>786	Identifier	mexErrMsgTxt
>787	Condition	 
>788	RelationalExpression	! mexCheckType < T > ( ppr_inner_weights )
>789	RelationalExpression	T > ( ppr_inner_weights )
>790	Identifier	ppr_inner_weights
>791	Identifier	T
>792	UnaryOp	! mexCheckType
>793	Identifier	mexCheckType
>794	UnaryOperator	!
>795	IfStatement	if ( ! ppr_inner_weights )
>796	ExpressionStatement	 
>797	CallExpression	mexErrMsgTxt ( \"field inner_weights is not provided\" )
>798	ArgumentList	\"field inner_weights is not provided\"
>799	Argument	\"field inner_weights is not provided\"
>800	PrimaryExpression	\"field inner_weights is not provided\"
>801	Callee	mexErrMsgTxt
>802	Identifier	mexErrMsgTxt
>803	Condition	 
>804	UnaryOp	! ppr_inner_weights
>805	Identifier	ppr_inner_weights
>806	UnaryOperator	!
>807	IdentifierDeclStatement	 
>808	IdentifierDecl	* ppr_inner_weights = mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>809	AssignmentExpr	* ppr_inner_weights = mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>810	CallExpression	mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>811	ArgumentList	prhs [ 4 ]
>812	Argument	\"inner_weights\"
>813	PrimaryExpression	\"inner_weights\"
>814	Argument	0
>815	PrimaryExpression	0
>816	Argument	prhs [ 4 ]
>817	ArrayIndexing	prhs [ 4 ]
>818	PrimaryExpression	4
>819	Identifier	prhs
>820	Callee	mxGetField
>821	Identifier	mxGetField
>822	Identifier	ppr_inner_weights
>823	Identifier	ppr_inner_weights
>824	IdentifierDeclType	mxArray *
>825	Condition	 
>826	MemberAccess	param . is_inner_weights
>827	Identifier	is_inner_weights
>828	Identifier	param
>829	ExpressionStatement	 
>830	AssignmentExpr	param . transpose = getScalarStructDef < bool > ( prhs [ 3 ] , \"transpose\" , false )
>831	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"transpose\" , false )
>832	RelationalExpression	bool > ( prhs [ 3 ] , \"transpose\" , false )
>833	Expression	prhs [ 3 ] , \"transpose\" , false
>834	Expression	\"transpose\" , false
>835	Identifier	false
>836	PrimaryExpression	\"transpose\"
>837	ArrayIndexing	prhs [ 3 ]
>838	PrimaryExpression	3
>839	Identifier	prhs
>840	Identifier	bool
>841	Identifier	getScalarStructDef
>842	MemberAccess	param . transpose
>843	Identifier	transpose
>844	Identifier	param
>845	ExpressionStatement	 
>846	AssignmentExpr	param . is_inner_weights = getScalarStructDef < bool > ( prhs [ 3 ] , \"is_inner_weights\" , false )
>847	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"is_inner_weights\" , false )
>848	RelationalExpression	bool > ( prhs [ 3 ] , \"is_inner_weights\" , false )
>849	Expression	prhs [ 3 ] , \"is_inner_weights\" , false
>850	Expression	\"is_inner_weights\" , false
>851	Identifier	false
>852	PrimaryExpression	\"is_inner_weights\"
>853	ArrayIndexing	prhs [ 3 ]
>854	PrimaryExpression	3
>855	Identifier	prhs
>856	Identifier	bool
>857	Identifier	getScalarStructDef
>858	MemberAccess	param . is_inner_weights
>859	Identifier	is_inner_weights
>860	Identifier	param
>861	ExpressionStatement	 
>862	AssignmentExpr	param . sqrt_step = getScalarStructDef < bool > ( prhs [ 3 ] , \"sqrt_step\" , true )
>863	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"sqrt_step\" , true )
>864	RelationalExpression	bool > ( prhs [ 3 ] , \"sqrt_step\" , true )
>865	Expression	prhs [ 3 ] , \"sqrt_step\" , true
>866	Expression	\"sqrt_step\" , true
>867	Identifier	true
>868	PrimaryExpression	\"sqrt_step\"
>869	ArrayIndexing	prhs [ 3 ]
>870	PrimaryExpression	3
>871	Identifier	prhs
>872	Identifier	bool
>873	Identifier	getScalarStructDef
>874	MemberAccess	param . sqrt_step
>875	Identifier	sqrt_step
>876	Identifier	param
>877	ExpressionStatement	 
>878	AssignmentExpr	param . lin_admm = getScalarStructDef < bool > ( prhs [ 3 ] , \"lin_admm\" , false )
>879	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"lin_admm\" , false )
>880	RelationalExpression	bool > ( prhs [ 3 ] , \"lin_admm\" , false )
>881	Expression	prhs [ 3 ] , \"lin_admm\" , false
>882	Expression	\"lin_admm\" , false
>883	Identifier	false
>884	PrimaryExpression	\"lin_admm\"
>885	ArrayIndexing	prhs [ 3 ]
>886	PrimaryExpression	3
>887	Identifier	prhs
>888	Identifier	bool
>889	Identifier	getScalarStructDef
>890	MemberAccess	param . lin_admm
>891	Identifier	lin_admm
>892	Identifier	param
>893	ExpressionStatement	 
>894	AssignmentExpr	param . admm = getScalarStructDef < bool > ( prhs [ 3 ] , \"admm\" , false )
>895	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"admm\" , false )
>896	RelationalExpression	bool > ( prhs [ 3 ] , \"admm\" , false )
>897	Expression	prhs [ 3 ] , \"admm\" , false
>898	Expression	\"admm\" , false
>899	Identifier	false
>900	PrimaryExpression	\"admm\"
>901	ArrayIndexing	prhs [ 3 ]
>902	PrimaryExpression	3
>903	Identifier	prhs
>904	Identifier	bool
>905	Identifier	getScalarStructDef
>906	MemberAccess	param . admm
>907	Identifier	admm
>908	Identifier	param
>909	IfStatement	if ( ppr_groups )
>910	ElseStatement	else
>911	CompoundStatement	 
>912	ExpressionStatement	 
>913	Expression	prhs [ 3 ] , \"size_group\" , 1
>914	Expression	\"size_group\" , 1
>915	PrimaryExpression	1
>916	PrimaryExpression	\"size_group\"
>917	ArrayIndexing	prhs [ 3 ]
>918	PrimaryExpression	3
>919	Identifier	prhs
>920	Statement	 
>921	Statement	 
>922	Statement	 
>923	Statement	 
>924	Statement	 
>925	Statement	 
>926	Statement	 
>927	Statement	 
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	AssignmentExpr	param . groups = pr_groups
>931	Identifier	pr_groups
>932	MemberAccess	param . groups
>933	Identifier	groups
>934	Identifier	param
>935	ExpressionStatement	 
>936	AssignmentExpr	param . ngroups = num_groups
>937	Identifier	num_groups
>938	MemberAccess	param . ngroups
>939	Identifier	ngroups
>940	Identifier	param
>941	IfStatement	if ( num_groups != pAlpha )
>942	ExpressionStatement	 
>943	CallExpression	mexErrMsgTxt ( \"Wrong size of param.groups\" )
>944	ArgumentList	\"Wrong size of param.groups\"
>945	Argument	\"Wrong size of param.groups\"
>946	PrimaryExpression	\"Wrong size of param.groups\"
>947	Callee	mexErrMsgTxt
>948	Identifier	mexErrMsgTxt
>949	Condition	 
>950	EqualityExpression	num_groups != pAlpha
>951	Identifier	pAlpha
>952	Identifier	num_groups
>953	ExpressionStatement	 
>954	ArrayIndexing	dims_groups [ 1 ]
>955	PrimaryExpression	1
>956	Identifier	dims_groups
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	Statement	 
>970	Statement	 
>971	Statement	 
>972	Statement	 
>973	Statement	 
>974	Statement	 
>975	IdentifierDeclStatement	 
>976	IdentifierDecl	* dims_groups = mxGetDimensions ( ppr_groups )
>977	AssignmentExpr	* dims_groups = mxGetDimensions ( ppr_groups )
>978	CallExpression	mxGetDimensions ( ppr_groups )
>979	ArgumentList	ppr_groups
>980	Argument	ppr_groups
>981	Identifier	ppr_groups
>982	Callee	mxGetDimensions
>983	Identifier	mxGetDimensions
>984	Identifier	dims_groups
>985	Identifier	dims_groups
>986	IdentifierDeclType	const mwSize *
>987	ExpressionStatement	 
>988	CallExpression	mxGetPr ( ppr_groups )
>989	ArgumentList	ppr_groups
>990	Argument	ppr_groups
>991	Identifier	ppr_groups
>992	Callee	mxGetPr
>993	Identifier	mxGetPr
>994	Statement	 
>995	Statement	 
>996	Statement	 
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	ExpressionStatement	 
>1004	CallExpression	mexErrMsgTxt ( \"param.groups should be int32 (starting group is 1)\" )
>1005	ArgumentList	\"param.groups should be int32 (starting group is 1)\"
>1006	Argument	\"param.groups should be int32 (starting group is 1)\"
>1007	PrimaryExpression	\"param.groups should be int32 (starting group is 1)\"
>1008	Callee	mexErrMsgTxt
>1009	Identifier	mexErrMsgTxt
>1010	Statement	 
>1011	Statement	 
>1012	Statement	 
>1013	Statement	 
>1014	Statement	 
>1015	Statement	 
>1016	Statement	 
>1017	Statement	 
>1018	Statement	 
>1019	Statement	 
>1020	Statement	 
>1021	Condition	 
>1022	Identifier	ppr_groups
>1023	IdentifierDeclStatement	 
>1024	IdentifierDecl	* ppr_groups = mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1025	AssignmentExpr	* ppr_groups = mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1026	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1027	ArgumentList	prhs [ 3 ]
>1028	Argument	\"groups\"
>1029	PrimaryExpression	\"groups\"
>1030	Argument	0
>1031	PrimaryExpression	0
>1032	Argument	prhs [ 3 ]
>1033	ArrayIndexing	prhs [ 3 ]
>1034	PrimaryExpression	3
>1035	Identifier	prhs
>1036	Callee	mxGetField
>1037	Identifier	mxGetField
>1038	Identifier	ppr_groups
>1039	Identifier	ppr_groups
>1040	IdentifierDeclType	mxArray *
>1041	ExpressionStatement	 
>1042	AssignmentExpr	param . lambda3 = getScalarStructDef < T > ( prhs [ 3 ] , \"lambda3\" , 0.0 )
>1043	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"lambda3\" , 0.0 )
>1044	RelationalExpression	T > ( prhs [ 3 ] , \"lambda3\" , 0.0 )
>1045	Expression	prhs [ 3 ] , \"lambda3\" , 0.0
>1046	Expression	\"lambda3\" , 0.0
>1047	PrimaryExpression	0.0
>1048	PrimaryExpression	\"lambda3\"
>1049	ArrayIndexing	prhs [ 3 ]
>1050	PrimaryExpression	3
>1051	Identifier	prhs
>1052	Identifier	T
>1053	Identifier	getScalarStructDef
>1054	MemberAccess	param . lambda3
>1055	Identifier	lambda3
>1056	Identifier	param
>1057	ExpressionStatement	 
>1058	AssignmentExpr	param . lambda2 = getScalarStructDef < T > ( prhs [ 3 ] , \"lambda2\" , 0.0 )
>1059	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"lambda2\" , 0.0 )
>1060	RelationalExpression	T > ( prhs [ 3 ] , \"lambda2\" , 0.0 )
>1061	Expression	prhs [ 3 ] , \"lambda2\" , 0.0
>1062	Expression	\"lambda2\" , 0.0
>1063	PrimaryExpression	0.0
>1064	PrimaryExpression	\"lambda2\"
>1065	ArrayIndexing	prhs [ 3 ]
>1066	PrimaryExpression	3
>1067	Identifier	prhs
>1068	Identifier	T
>1069	Identifier	getScalarStructDef
>1070	MemberAccess	param . lambda2
>1071	Identifier	lambda2
>1072	Identifier	param
>1073	ExpressionStatement	 
>1074	AssignmentExpr	param . delta = getScalarStructDef < T > ( prhs [ 3 ] , \"delta\" , 1.0 )
>1075	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"delta\" , 1.0 )
>1076	RelationalExpression	T > ( prhs [ 3 ] , \"delta\" , 1.0 )
>1077	Expression	prhs [ 3 ] , \"delta\" , 1.0
>1078	Expression	\"delta\" , 1.0
>1079	PrimaryExpression	1.0
>1080	PrimaryExpression	\"delta\"
>1081	ArrayIndexing	prhs [ 3 ]
>1082	PrimaryExpression	3
>1083	Identifier	prhs
>1084	Identifier	T
>1085	Identifier	getScalarStructDef
>1086	MemberAccess	param . delta
>1087	Identifier	delta
>1088	Identifier	param
>1089	ExpressionStatement	 
>1090	AssignmentExpr	param . lambda = getScalarStructDef < T > ( prhs [ 3 ] , \"lambda\" , 1.0 )
>1091	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"lambda\" , 1.0 )
>1092	RelationalExpression	T > ( prhs [ 3 ] , \"lambda\" , 1.0 )
>1093	Expression	prhs [ 3 ] , \"lambda\" , 1.0
>1094	Expression	\"lambda\" , 1.0
>1095	PrimaryExpression	1.0
>1096	PrimaryExpression	\"lambda\"
>1097	ArrayIndexing	prhs [ 3 ]
>1098	PrimaryExpression	3
>1099	Identifier	prhs
>1100	Identifier	T
>1101	Identifier	getScalarStructDef
>1102	MemberAccess	param . lambda
>1103	Identifier	lambda
>1104	Identifier	param
>1105	ExpressionStatement	 
>1106	AssignmentExpr	param . c = getScalarStructDef < T > ( prhs [ 3 ] , \"c\" , 1.0 )
>1107	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"c\" , 1.0 )
>1108	RelationalExpression	T > ( prhs [ 3 ] , \"c\" , 1.0 )
>1109	Expression	prhs [ 3 ] , \"c\" , 1.0
>1110	Expression	\"c\" , 1.0
>1111	PrimaryExpression	1.0
>1112	PrimaryExpression	\"c\"
>1113	ArrayIndexing	prhs [ 3 ]
>1114	PrimaryExpression	3
>1115	Identifier	prhs
>1116	Identifier	T
>1117	Identifier	getScalarStructDef
>1118	MemberAccess	param . c
>1119	Identifier	c
>1120	Identifier	param
>1121	ExpressionStatement	 
>1122	AssignmentExpr	param . gamma = MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 3 ] , \"gamma\" , 1.5 ) )
>1123	CallExpression	MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 3 ] , \"gamma\" , 1.5 ) )
>1124	ArgumentList	1.01
>1125	Argument	getScalarStructDef < T > ( prhs [ 3 ] , \"gamma\" , 1.5 )
>1126	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"gamma\" , 1.5 )
>1127	RelationalExpression	T > ( prhs [ 3 ] , \"gamma\" , 1.5 )
>1128	Expression	prhs [ 3 ] , \"gamma\" , 1.5
>1129	Expression	\"gamma\" , 1.5
>1130	PrimaryExpression	1.5
>1131	PrimaryExpression	\"gamma\"
>1132	ArrayIndexing	prhs [ 3 ]
>1133	PrimaryExpression	3
>1134	Identifier	prhs
>1135	Identifier	T
>1136	Identifier	getScalarStructDef
>1137	Argument	1.01
>1138	PrimaryExpression	1.01
>1139	Callee	MAX
>1140	Identifier	MAX
>1141	MemberAccess	param . gamma
>1142	Identifier	gamma
>1143	Identifier	param
>1144	ExpressionStatement	 
>1145	AssignmentExpr	param . fixed_step = getScalarStructDef < T > ( prhs [ 3 ] , \"fixed_step\" , false )
>1146	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"fixed_step\" , false )
>1147	RelationalExpression	T > ( prhs [ 3 ] , \"fixed_step\" , false )
>1148	Expression	prhs [ 3 ] , \"fixed_step\" , false
>1149	Expression	\"fixed_step\" , false
>1150	Identifier	false
>1151	PrimaryExpression	\"fixed_step\"
>1152	ArrayIndexing	prhs [ 3 ]
>1153	PrimaryExpression	3
>1154	Identifier	prhs
>1155	Identifier	T
>1156	Identifier	getScalarStructDef
>1157	MemberAccess	param . fixed_step
>1158	Identifier	fixed_step
>1159	Identifier	param
>1160	ExpressionStatement	 
>1161	AssignmentExpr	param . L0 = getScalarStructDef < T > ( prhs [ 3 ] , \"L0\" , 1.0 )
>1162	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"L0\" , 1.0 )
>1163	RelationalExpression	T > ( prhs [ 3 ] , \"L0\" , 1.0 )
>1164	Expression	prhs [ 3 ] , \"L0\" , 1.0
>1165	Expression	\"L0\" , 1.0
>1166	PrimaryExpression	1.0
>1167	PrimaryExpression	\"L0\"
>1168	ArrayIndexing	prhs [ 3 ]
>1169	PrimaryExpression	3
>1170	Identifier	prhs
>1171	Identifier	T
>1172	Identifier	getScalarStructDef
>1173	MemberAccess	param . L0
>1174	Identifier	L0
>1175	Identifier	param
>1176	ExpressionStatement	 
>1177	Expression	prhs [ 3 ] , \"max_iter_backtracking\" , 1000
>1178	Expression	\"max_iter_backtracking\" , 1000
>1179	PrimaryExpression	1000
>1180	PrimaryExpression	\"max_iter_backtracking\"
>1181	ArrayIndexing	prhs [ 3 ]
>1182	PrimaryExpression	3
>1183	Identifier	prhs
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	Statement	 
>1188	Statement	 
>1189	Statement	 
>1190	Statement	 
>1191	Statement	 
>1192	ExpressionStatement	 
>1193	AssignmentExpr	param . compute_gram = getScalarStructDef < bool > ( prhs [ 3 ] , \"compute_gram\" , false )
>1194	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"compute_gram\" , false )
>1195	RelationalExpression	bool > ( prhs [ 3 ] , \"compute_gram\" , false )
>1196	Expression	prhs [ 3 ] , \"compute_gram\" , false
>1197	Expression	\"compute_gram\" , false
>1198	Identifier	false
>1199	PrimaryExpression	\"compute_gram\"
>1200	ArrayIndexing	prhs [ 3 ]
>1201	PrimaryExpression	3
>1202	Identifier	prhs
>1203	Identifier	bool
>1204	Identifier	getScalarStructDef
>1205	MemberAccess	param . compute_gram
>1206	Identifier	compute_gram
>1207	Identifier	param
>1208	ExpressionStatement	 
>1209	AssignmentExpr	param . pos = getScalarStructDef < bool > ( prhs [ 3 ] , \"pos\" , false )
>1210	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"pos\" , false )
>1211	RelationalExpression	bool > ( prhs [ 3 ] , \"pos\" , false )
>1212	Expression	prhs [ 3 ] , \"pos\" , false
>1213	Expression	\"pos\" , false
>1214	Identifier	false
>1215	PrimaryExpression	\"pos\"
>1216	ArrayIndexing	prhs [ 3 ]
>1217	PrimaryExpression	3
>1218	Identifier	prhs
>1219	Identifier	bool
>1220	Identifier	getScalarStructDef
>1221	MemberAccess	param . pos
>1222	Identifier	pos
>1223	Identifier	param
>1224	ExpressionStatement	 
>1225	Expression	prhs [ 3 ] , \"it0\" , 100
>1226	Expression	\"it0\" , 100
>1227	PrimaryExpression	100
>1228	PrimaryExpression	\"it0\"
>1229	ArrayIndexing	prhs [ 3 ]
>1230	PrimaryExpression	3
>1231	Identifier	prhs
>1232	Statement	 
>1233	Statement	 
>1234	Statement	 
>1235	Statement	 
>1236	Statement	 
>1237	Statement	 
>1238	Statement	 
>1239	Statement	 
>1240	ExpressionStatement	 
>1241	AssignmentExpr	param . tol = getScalarStructDef < T > ( prhs [ 3 ] , \"tol\" , 0.000001 )
>1242	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"tol\" , 0.000001 )
>1243	RelationalExpression	T > ( prhs [ 3 ] , \"tol\" , 0.000001 )
>1244	Expression	prhs [ 3 ] , \"tol\" , 0.000001
>1245	Expression	\"tol\" , 0.000001
>1246	PrimaryExpression	0.000001
>1247	PrimaryExpression	\"tol\"
>1248	ArrayIndexing	prhs [ 3 ]
>1249	PrimaryExpression	3
>1250	Identifier	prhs
>1251	Identifier	T
>1252	Identifier	getScalarStructDef
>1253	MemberAccess	param . tol
>1254	Identifier	tol
>1255	Identifier	param
>1256	ExpressionStatement	 
>1257	Expression	prhs [ 3 ] , \"max_it\" , 1000
>1258	Expression	\"max_it\" , 1000
>1259	PrimaryExpression	1000
>1260	PrimaryExpression	\"max_it\"
>1261	ArrayIndexing	prhs [ 3 ]
>1262	PrimaryExpression	3
>1263	Identifier	prhs
>1264	Statement	 
>1265	Statement	 
>1266	Statement	 
>1267	Statement	 
>1268	Statement	 
>1269	Statement	 
>1270	Statement	 
>1271	Statement	 
>1272	ExpressionStatement	 
>1273	Expression	prhs [ 3 ] , \"numThreads\" , - 1
>1274	Expression	\"numThreads\" , - 1
>1275	UnaryOp	- 1
>1276	PrimaryExpression	1
>1277	UnaryOperator	-
>1278	PrimaryExpression	\"numThreads\"
>1279	ArrayIndexing	prhs [ 3 ]
>1280	PrimaryExpression	3
>1281	Identifier	prhs
>1282	Statement	 
>1283	Statement	 
>1284	Statement	 
>1285	Statement	 
>1286	Statement	 
>1287	Statement	 
>1288	Statement	 
>1289	Statement	 
>1290	IdentifierDeclStatement	 
>1291	IdentifierDecl	param
>1292	Identifier	param
>1293	IdentifierDeclType	FISTA 
>1294	IdentifierDeclStatement	 
>1295	IdentifierDecl	alpha ( pr_alpha , pAlpha , nAlpha )
>1296	Expression	pr_alpha , pAlpha , nAlpha
>1297	Expression	pAlpha , nAlpha
>1298	Identifier	nAlpha
>1299	Identifier	pAlpha
>1300	Identifier	pr_alpha
>1301	Identifier	alpha
>1302	IdentifierDeclType	Matrix < T >
>1303	ExpressionStatement	 
>1304	CallExpression	mxGetPr ( plhs [ 0 ] )
>1305	ArgumentList	plhs [ 0 ]
>1306	Argument	plhs [ 0 ]
>1307	ArrayIndexing	plhs [ 0 ]
>1308	PrimaryExpression	0
>1309	Identifier	plhs
>1310	Callee	mxGetPr
>1311	Identifier	mxGetPr
>1312	Statement	 
>1313	Statement	 
>1314	Statement	 
>1315	Statement	 
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	Statement	 
>1320	Statement	 
>1321	ExpressionStatement	 
>1322	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( pAlpha , nAlpha )
>1323	RelationalExpression	createMatrix < T > ( pAlpha , nAlpha )
>1324	RelationalExpression	T > ( pAlpha , nAlpha )
>1325	Expression	pAlpha , nAlpha
>1326	Identifier	nAlpha
>1327	Identifier	pAlpha
>1328	Identifier	T
>1329	Identifier	createMatrix
>1330	ArrayIndexing	plhs [ 0 ]
>1331	PrimaryExpression	0
>1332	Identifier	plhs
>1333	IdentifierDeclStatement	 
>1334	IdentifierDecl	alpha0 ( pr_alpha0 , pAlpha , nAlpha )
>1335	Expression	pr_alpha0 , pAlpha , nAlpha
>1336	Expression	pAlpha , nAlpha
>1337	Identifier	nAlpha
>1338	Identifier	pAlpha
>1339	Identifier	pr_alpha0
>1340	Identifier	alpha0
>1341	IdentifierDeclType	Matrix < T >
>1342	ExpressionStatement	 
>1343	ArrayIndexing	dimsAlpha [ 1 ]
>1344	PrimaryExpression	1
>1345	Identifier	dimsAlpha
>1346	Statement	 
>1347	Statement	 
>1348	Statement	 
>1349	Statement	 
>1350	Statement	 
>1351	Statement	 
>1352	Statement	 
>1353	ExpressionStatement	 
>1354	ArrayIndexing	dimsAlpha [ 0 ]
>1355	PrimaryExpression	0
>1356	Identifier	dimsAlpha
>1357	Statement	 
>1358	Statement	 
>1359	Statement	 
>1360	Statement	 
>1361	Statement	 
>1362	Statement	 
>1363	Statement	 
>1364	IdentifierDeclStatement	 
>1365	IdentifierDecl	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1366	AssignmentExpr	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1367	CallExpression	mxGetDimensions ( prhs [ 2 ] )
>1368	ArgumentList	prhs [ 2 ]
>1369	Argument	prhs [ 2 ]
>1370	ArrayIndexing	prhs [ 2 ]
>1371	PrimaryExpression	2
>1372	Identifier	prhs
>1373	Callee	mxGetDimensions
>1374	Identifier	mxGetDimensions
>1375	Identifier	dimsAlpha
>1376	Identifier	dimsAlpha
>1377	IdentifierDeclType	const mwSize *
>1378	ExpressionStatement	 
>1379	CallExpression	mxGetPr ( prhs [ 2 ] )
>1380	ArgumentList	prhs [ 2 ]
>1381	Argument	prhs [ 2 ]
>1382	ArrayIndexing	prhs [ 2 ]
>1383	PrimaryExpression	2
>1384	Identifier	prhs
>1385	Callee	mxGetPr
>1386	Identifier	mxGetPr
>1387	Statement	 
>1388	Statement	 
>1389	Statement	 
>1390	Statement	 
>1391	Statement	 
>1392	Statement	 
>1393	Statement	 
>1394	Statement	 
>1395	Statement	 
>1396	IfStatement	if ( shifts > 1 )
>1397	CompoundStatement	 
>1398	ExpressionStatement	 
>1399	AssignmentExpr	D = new ShiftMatrix < T > ( * D , shifts , center_shifts )
>1400	Expression	* D , shifts , center_shifts
>1401	Expression	shifts , center_shifts
>1402	Identifier	center_shifts
>1403	Identifier	shifts
>1404	UnaryOp	* D
>1405	Identifier	D
>1406	UnaryOperator	*
>1407	Identifier	D
>1408	ExpressionStatement	 
>1409	AssignmentExpr	D3 = D
>1410	Identifier	D
>1411	Identifier	D3
>1412	IdentifierDeclStatement	 
>1413	IdentifierDecl	center_shifts = getScalarStructDef < bool > ( prhs [ 3 ] , \"center_shifts\" , false )
>1414	AssignmentExpr	center_shifts = getScalarStructDef < bool > ( prhs [ 3 ] , \"center_shifts\" , false )
>1415	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"center_shifts\" , false )
>1416	RelationalExpression	bool > ( prhs [ 3 ] , \"center_shifts\" , false )
>1417	Expression	prhs [ 3 ] , \"center_shifts\" , false
>1418	Expression	\"center_shifts\" , false
>1419	Identifier	false
>1420	PrimaryExpression	\"center_shifts\"
>1421	ArrayIndexing	prhs [ 3 ]
>1422	PrimaryExpression	3
>1423	Identifier	prhs
>1424	Identifier	bool
>1425	Identifier	getScalarStructDef
>1426	Identifier	center_shifts
>1427	Identifier	center_shifts
>1428	IdentifierDeclType	const bool
>1429	Condition	 
>1430	RelationalExpression	shifts > 1
>1431	PrimaryExpression	1
>1432	Identifier	shifts
>1433	IfStatement	if ( double_rows )
>1434	CompoundStatement	 
>1435	ExpressionStatement	 
>1436	AssignmentExpr	D = new DoubleRowMatrix < T > ( * D )
>1437	UnaryOp	* D
>1438	Identifier	D
>1439	UnaryOperator	*
>1440	Identifier	D
>1441	ExpressionStatement	 
>1442	AssignmentExpr	D2 = D
>1443	Identifier	D
>1444	Identifier	D2
>1445	Condition	 
>1446	Identifier	double_rows
>1447	IdentifierDeclStatement	 
>1448	IdentifierDecl	double_rows = getScalarStructDef < bool > ( prhs [ 3 ] , \"double_rows\" , false )
>1449	AssignmentExpr	double_rows = getScalarStructDef < bool > ( prhs [ 3 ] , \"double_rows\" , false )
>1450	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"double_rows\" , false )
>1451	RelationalExpression	bool > ( prhs [ 3 ] , \"double_rows\" , false )
>1452	Expression	prhs [ 3 ] , \"double_rows\" , false
>1453	Expression	\"double_rows\" , false
>1454	Identifier	false
>1455	PrimaryExpression	\"double_rows\"
>1456	ArrayIndexing	prhs [ 3 ]
>1457	PrimaryExpression	3
>1458	Identifier	prhs
>1459	Identifier	bool
>1460	Identifier	getScalarStructDef
>1461	Identifier	double_rows
>1462	Identifier	double_rows
>1463	IdentifierDeclType	const bool
>1464	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>1465	ElseStatement	else
>1466	CompoundStatement	 
>1467	ExpressionStatement	 
>1468	AssignmentExpr	D = new Matrix < T > ( prD , mD , p )
>1469	Expression	prD , mD , p
>1470	Expression	mD , p
>1471	Identifier	p
>1472	Identifier	mD
>1473	Identifier	prD
>1474	Identifier	D
>1475	ExpressionStatement	 
>1476	CallExpression	mxGetPr ( prhs [ 1 ] )
>1477	ArgumentList	prhs [ 1 ]
>1478	Argument	prhs [ 1 ]
>1479	ArrayIndexing	prhs [ 1 ]
>1480	PrimaryExpression	1
>1481	Identifier	prhs
>1482	Callee	mxGetPr
>1483	Identifier	mxGetPr
>1484	Statement	 
>1485	Statement	 
>1486	Statement	 
>1487	Statement	 
>1488	Statement	 
>1489	Statement	 
>1490	Statement	 
>1491	Statement	 
>1492	Statement	 
>1493	CompoundStatement	 
>1494	ExpressionStatement	 
>1495	AssignmentExpr	D = new SpMatrix < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ] )
>1496	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1497	Expression	D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1498	Expression	D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1499	Expression	D_pE2 , mD , p , D_pB2 [ p ]
>1500	Expression	mD , p , D_pB2 [ p ]
>1501	Expression	p , D_pB2 [ p ]
>1502	ArrayIndexing	D_pB2 [ p ]
>1503	Identifier	p
>1504	Identifier	D_pB2
>1505	Identifier	p
>1506	Identifier	mD
>1507	Identifier	D_pE2
>1508	Identifier	D_pB2
>1509	Identifier	D_r2
>1510	Identifier	D_v2
>1511	Identifier	D
>1512	ExpressionStatement	 
>1513	RelationalExpression	createCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1514	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1515	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1516	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1517	Expression	D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1518	Expression	D_pE2 , D_v , D_r , D_pB , D_pE , p
>1519	Expression	D_v , D_r , D_pB , D_pE , p
>1520	Expression	D_r , D_pB , D_pE , p
>1521	Expression	D_pB , D_pE , p
>1522	Expression	D_pE , p
>1523	Identifier	p
>1524	Identifier	D_pE
>1525	Identifier	D_pB
>1526	Identifier	D_r
>1527	Identifier	D_v
>1528	Identifier	D_pE2
>1529	Identifier	D_pB2
>1530	Identifier	D_r2
>1531	Identifier	D_v2
>1532	Identifier	T
>1533	Identifier	createCopySparse
>1534	ExpressionStatement	 
>1535	AssignmentExpr	D_pE = D_pB + 1
>1536	AdditiveExpression	D_pB + 1
>1537	PrimaryExpression	1
>1538	Identifier	D_pB
>1539	Identifier	D_pE
>1540	ExpressionStatement	 
>1541	AssignmentExpr	D_pB = mxGetJc ( prhs [ 1 ] )
>1542	CallExpression	mxGetJc ( prhs [ 1 ] )
>1543	ArgumentList	prhs [ 1 ]
>1544	Argument	prhs [ 1 ]
>1545	ArrayIndexing	prhs [ 1 ]
>1546	PrimaryExpression	1
>1547	Identifier	prhs
>1548	Callee	mxGetJc
>1549	Identifier	mxGetJc
>1550	Identifier	D_pB
>1551	ExpressionStatement	 
>1552	AssignmentExpr	D_r = mxGetIr ( prhs [ 1 ] )
>1553	CallExpression	mxGetIr ( prhs [ 1 ] )
>1554	ArgumentList	prhs [ 1 ]
>1555	Argument	prhs [ 1 ]
>1556	ArrayIndexing	prhs [ 1 ]
>1557	PrimaryExpression	1
>1558	Identifier	prhs
>1559	Callee	mxGetIr
>1560	Identifier	mxGetIr
>1561	Identifier	D_r
>1562	ExpressionStatement	 
>1563	CallExpression	mxGetPr ( prhs [ 1 ] )
>1564	ArgumentList	prhs [ 1 ]
>1565	Argument	prhs [ 1 ]
>1566	ArrayIndexing	prhs [ 1 ]
>1567	PrimaryExpression	1
>1568	Identifier	prhs
>1569	Callee	mxGetPr
>1570	Identifier	mxGetPr
>1571	Statement	 
>1572	Statement	 
>1573	Statement	 
>1574	Statement	 
>1575	Statement	 
>1576	Statement	 
>1577	Statement	 
>1578	Condition	 
>1579	CallExpression	mxIsSparse ( prhs [ 1 ] )
>1580	ArgumentList	prhs [ 1 ]
>1581	Argument	prhs [ 1 ]
>1582	ArrayIndexing	prhs [ 1 ]
>1583	PrimaryExpression	1
>1584	Identifier	prhs
>1585	Callee	mxIsSparse
>1586	Identifier	mxIsSparse
>1587	ExpressionStatement	 
>1588	Expression	prhs [ 3 ] , \"shifts\" , 1
>1589	Expression	\"shifts\" , 1
>1590	PrimaryExpression	1
>1591	PrimaryExpression	\"shifts\"
>1592	ArrayIndexing	prhs [ 3 ]
>1593	PrimaryExpression	3
>1594	Identifier	prhs
>1595	Statement	 
>1596	Statement	 
>1597	Statement	 
>1598	Statement	 
>1599	Statement	 
>1600	Statement	 
>1601	Statement	 
>1602	Statement	 
>1603	IdentifierDeclStatement	 
>1604	IdentifierDecl	* D_v2
>1605	Identifier	D_v2
>1606	IdentifierDeclType	T *
>1607	IdentifierDeclStatement	 
>1608	IdentifierDecl	* D_pE2
>1609	Identifier	D_pE2
>1610	IdentifierDeclType	long *
>1611	IdentifierDecl	* D_pB2
>1612	Identifier	D_pB2
>1613	IdentifierDeclType	long *
>1614	IdentifierDecl	* D_r2
>1615	Identifier	D_r2
>1616	IdentifierDeclType	long *
>1617	IdentifierDeclStatement	 
>1618	IdentifierDecl	* D_pE
>1619	Identifier	D_pE
>1620	IdentifierDeclType	mwSize *
>1621	IdentifierDecl	* D_pB
>1622	Identifier	D_pB
>1623	IdentifierDeclType	mwSize *
>1624	IdentifierDecl	* D_r
>1625	Identifier	D_r
>1626	IdentifierDeclType	mwSize *
>1627	IdentifierDeclStatement	 
>1628	IdentifierDecl	* D_v
>1629	Identifier	D_v
>1630	IdentifierDeclType	double *
>1631	IdentifierDeclStatement	 
>1632	IdentifierDecl	* D3 = NULL
>1633	AssignmentExpr	* D3 = NULL
>1634	Identifier	NULL
>1635	Identifier	NULL
>1636	Identifier	D3
>1637	IdentifierDeclType	AbstractMatrixB < T > *
>1638	IdentifierDeclStatement	 
>1639	IdentifierDecl	* D2 = NULL
>1640	AssignmentExpr	* D2 = NULL
>1641	Identifier	NULL
>1642	Identifier	NULL
>1643	Identifier	D2
>1644	IdentifierDeclType	AbstractMatrixB < T > *
>1645	IdentifierDeclStatement	 
>1646	IdentifierDecl	* D
>1647	Identifier	D
>1648	IdentifierDeclType	AbstractMatrixB < T > *
>1649	ExpressionStatement	 
>1650	ArrayIndexing	dimsD [ 1 ]
>1651	PrimaryExpression	1
>1652	Identifier	dimsD
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	Statement	 
>1659	Statement	 
>1660	ExpressionStatement	 
>1661	ArrayIndexing	dimsD [ 0 ]
>1662	PrimaryExpression	0
>1663	Identifier	dimsD
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	Statement	 
>1670	Statement	 
>1671	IdentifierDeclStatement	 
>1672	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1673	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1674	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>1675	ArgumentList	prhs [ 1 ]
>1676	Argument	prhs [ 1 ]
>1677	ArrayIndexing	prhs [ 1 ]
>1678	PrimaryExpression	1
>1679	Identifier	prhs
>1680	Callee	mxGetDimensions
>1681	Identifier	mxGetDimensions
>1682	Identifier	dimsD
>1683	Identifier	dimsD
>1684	IdentifierDeclType	const mwSize *
>1685	IdentifierDeclStatement	 
>1686	IdentifierDecl	X ( prX , m , n )
>1687	Expression	prX , m , n
>1688	Expression	m , n
>1689	Identifier	n
>1690	Identifier	m
>1691	Identifier	prX
>1692	Identifier	X
>1693	IdentifierDeclType	Matrix < T >
>1694	ExpressionStatement	 
>1695	ArrayIndexing	dimsX [ 1 ]
>1696	PrimaryExpression	1
>1697	Identifier	dimsX
>1698	Statement	 
>1699	Statement	 
>1700	Statement	 
>1701	Statement	 
>1702	Statement	 
>1703	Statement	 
>1704	Statement	 
>1705	ExpressionStatement	 
>1706	ArrayIndexing	dimsX [ 0 ]
>1707	PrimaryExpression	0
>1708	Identifier	dimsX
>1709	Statement	 
>1710	Statement	 
>1711	Statement	 
>1712	Statement	 
>1713	Statement	 
>1714	Statement	 
>1715	Statement	 
>1716	IdentifierDeclStatement	 
>1717	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1718	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1719	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>1720	ArgumentList	prhs [ 0 ]
>1721	Argument	prhs [ 0 ]
>1722	ArrayIndexing	prhs [ 0 ]
>1723	PrimaryExpression	0
>1724	Identifier	prhs
>1725	Callee	mxGetDimensions
>1726	Identifier	mxGetDimensions
>1727	Identifier	dimsX
>1728	Identifier	dimsX
>1729	IdentifierDeclType	const mwSize *
>1730	ExpressionStatement	 
>1731	CallExpression	mxGetPr ( prhs [ 0 ] )
>1732	ArgumentList	prhs [ 0 ]
>1733	Argument	prhs [ 0 ]
>1734	ArrayIndexing	prhs [ 0 ]
>1735	PrimaryExpression	0
>1736	Identifier	prhs
>1737	Callee	mxGetPr
>1738	Identifier	mxGetPr
>1739	Statement	 
>1740	Statement	 
>1741	Statement	 
>1742	Statement	 
>1743	Statement	 
>1744	Statement	 
>1745	Statement	 
>1746	Statement	 
>1747	Statement	 
>1748	IfStatement	if ( ! mxIsStruct ( prhs [ 3 ] ) )
>1749	ExpressionStatement	 
>1750	CallExpression	mexErrMsgTxt ( \"argument 4 should be a struct\" )
>1751	ArgumentList	\"argument 4 should be a struct\"
>1752	Argument	\"argument 4 should be a struct\"
>1753	PrimaryExpression	\"argument 4 should be a struct\"
>1754	Callee	mexErrMsgTxt
>1755	Identifier	mexErrMsgTxt
>1756	Condition	 
>1757	UnaryOp	! mxIsStruct ( prhs [ 3 ] )
>1758	CallExpression	mxIsStruct ( prhs [ 3 ] )
>1759	ArgumentList	prhs [ 3 ]
>1760	Argument	prhs [ 3 ]
>1761	ArrayIndexing	prhs [ 3 ]
>1762	PrimaryExpression	3
>1763	Identifier	prhs
>1764	Callee	mxIsStruct
>1765	Identifier	mxIsStruct
>1766	UnaryOperator	!
>1767	IfStatement	if ( mxIsSparse ( prhs [ 2 ] ) )
>1768	ExpressionStatement	 
>1769	CallExpression	mexErrMsgTxt ( \"argument 3 should not be sparse\" )
>1770	ArgumentList	\"argument 3 should not be sparse\"
>1771	Argument	\"argument 3 should not be sparse\"
>1772	PrimaryExpression	\"argument 3 should not be sparse\"
>1773	Callee	mexErrMsgTxt
>1774	Identifier	mexErrMsgTxt
>1775	Condition	 
>1776	CallExpression	mxIsSparse ( prhs [ 2 ] )
>1777	ArgumentList	prhs [ 2 ]
>1778	Argument	prhs [ 2 ]
>1779	ArrayIndexing	prhs [ 2 ]
>1780	PrimaryExpression	2
>1781	Identifier	prhs
>1782	Callee	mxIsSparse
>1783	Identifier	mxIsSparse
>1784	IfStatement	if ( ! mexCheckType < T > ( prhs [ 2 ] ) )
>1785	ExpressionStatement	 
>1786	CallExpression	mexErrMsgTxt ( \"type of argument 3 is not consistent\" )
>1787	ArgumentList	\"type of argument 3 is not consistent\"
>1788	Argument	\"type of argument 3 is not consistent\"
>1789	PrimaryExpression	\"type of argument 3 is not consistent\"
>1790	Callee	mexErrMsgTxt
>1791	Identifier	mexErrMsgTxt
>1792	Condition	 
>1793	RelationalExpression	! mexCheckType < T > ( prhs [ 2 ] )
>1794	RelationalExpression	T > ( prhs [ 2 ] )
>1795	ArrayIndexing	prhs [ 2 ]
>1796	PrimaryExpression	2
>1797	Identifier	prhs
>1798	Identifier	T
>1799	UnaryOp	! mexCheckType
>1800	Identifier	mexCheckType
>1801	UnaryOperator	!
>1802	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>1803	ExpressionStatement	 
>1804	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>1805	ArgumentList	\"type of argument 2 is not consistent\"
>1806	Argument	\"type of argument 2 is not consistent\"
>1807	PrimaryExpression	\"type of argument 2 is not consistent\"
>1808	Callee	mexErrMsgTxt
>1809	Identifier	mexErrMsgTxt
>1810	Condition	 
>1811	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>1812	RelationalExpression	T > ( prhs [ 1 ] )
>1813	ArrayIndexing	prhs [ 1 ]
>1814	PrimaryExpression	1
>1815	Identifier	prhs
>1816	Identifier	T
>1817	UnaryOp	! mexCheckType
>1818	Identifier	mexCheckType
>1819	UnaryOperator	!
>1820	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>1821	ExpressionStatement	 
>1822	CallExpression	mexErrMsgTxt ( \"argument 1 should not be sparse\" )
>1823	ArgumentList	\"argument 1 should not be sparse\"
>1824	Argument	\"argument 1 should not be sparse\"
>1825	PrimaryExpression	\"argument 1 should not be sparse\"
>1826	Callee	mexErrMsgTxt
>1827	Identifier	mexErrMsgTxt
>1828	Condition	 
>1829	CallExpression	mxIsSparse ( prhs [ 0 ] )
>1830	ArgumentList	prhs [ 0 ]
>1831	Argument	prhs [ 0 ]
>1832	ArrayIndexing	prhs [ 0 ]
>1833	PrimaryExpression	0
>1834	Identifier	prhs
>1835	Callee	mxIsSparse
>1836	Identifier	mxIsSparse
>1837	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>1838	ExpressionStatement	 
>1839	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>1840	ArgumentList	\"type of argument 1 is not consistent\"
>1841	Argument	\"type of argument 1 is not consistent\"
>1842	PrimaryExpression	\"type of argument 1 is not consistent\"
>1843	Callee	mexErrMsgTxt
>1844	Identifier	mexErrMsgTxt
>1845	Condition	 
>1846	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>1847	RelationalExpression	T > ( prhs [ 0 ] )
>1848	ArrayIndexing	prhs [ 0 ]
>1849	PrimaryExpression	0
>1850	Identifier	prhs
>1851	Identifier	T
>1852	UnaryOp	! mexCheckType
>1853	Identifier	mexCheckType
>1854	UnaryOperator	!
>1982	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>1983	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>1984	Parameter	 
>1985	Identifier	prhs
>1986	ParameterType	const mxArray * [ ]
>1987	Parameter	 
>1988	Identifier	nrhs
>1989	ParameterType	int
>1990	Parameter	 
>1991	Identifier	plhs
>1992	ParameterType	mxArray * [ ]
>1993	Parameter	 
>1994	Identifier	nlhs
>1995	ParameterType	int
>1996	ReturnType	void
>1997	CompoundStatement	 
>1998	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>1999	ElseStatement	else
>2000	CompoundStatement	 
>2001	ExpressionStatement	 
>2002	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>2003	RelationalExpression	float > ( plhs , prhs , nlhs )
>2004	Expression	plhs , prhs , nlhs
>2005	Expression	prhs , nlhs
>2006	Identifier	nlhs
>2007	Identifier	prhs
>2008	Identifier	plhs
>2009	Identifier	float
>2010	Identifier	callFunction
>2011	CompoundStatement	 
>2012	ExpressionStatement	 
>2013	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>2014	RelationalExpression	double > ( plhs , prhs , nlhs )
>2015	Expression	plhs , prhs , nlhs
>2016	Expression	prhs , nlhs
>2017	Identifier	nlhs
>2018	Identifier	prhs
>2019	Identifier	plhs
>2020	Identifier	double
>2021	Identifier	callFunction
>2022	Condition	 
>2023	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>2024	Identifier	mxDOUBLE_CLASS
>2025	CallExpression	mxGetClassID ( prhs [ 0 ] )
>2026	ArgumentList	prhs [ 0 ]
>2027	Argument	prhs [ 0 ]
>2028	ArrayIndexing	prhs [ 0 ]
>2029	PrimaryExpression	0
>2030	Identifier	prhs
>2031	Callee	mxGetClassID
>2032	Identifier	mxGetClassID
>2033	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>2034	ExpressionStatement	 
>2035	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>2036	ArgumentList	\"Bad number of output arguments\"
>2037	Argument	\"Bad number of output arguments\"
>2038	PrimaryExpression	\"Bad number of output arguments\"
>2039	Callee	mexErrMsgTxt
>2040	Identifier	mexErrMsgTxt
>2041	Condition	 
>2042	AndExpression	nlhs != 1 && nlhs != 2
>2043	EqualityExpression	nlhs != 2
>2044	PrimaryExpression	2
>2045	Identifier	nlhs
>2046	EqualityExpression	nlhs != 1
>2047	PrimaryExpression	1
>2048	Identifier	nlhs
>2049	IfStatement	if ( nrhs != 4 )
>2050	ExpressionStatement	 
>2051	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>2052	ArgumentList	\"Bad number of inputs arguments\"
>2053	Argument	\"Bad number of inputs arguments\"
>2054	PrimaryExpression	\"Bad number of inputs arguments\"
>2055	Callee	mexErrMsgTxt
>2056	Identifier	mexErrMsgTxt
>2057	Condition	 
>2058	EqualityExpression	nrhs != 4
>2059	PrimaryExpression	4
>2060	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=9,10
<11=13,12
<15=1837,1820,1802,1784,1767,1748,1747,1746,1745,1744,1743,1742,1741,1740,1739,1730,1716,1715,1714,1713,1712,1711,1710,1709,1705,1704,1703,1702,1701,1700,1699,1698,1694,1685,1671,1670,1669,1668,1667,1666,1665,1664,1660,1659,1658,1657,1656,1655,1654,1653,1649,1645,1638,1631,1627,1617,1607,1603,1602,1601,1600,1599,1598,1597,1596,1595,1587,1464,1447,1433,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1378,1364,1363,1362,1361,1360,1359,1358,1357,1353,1352,1351,1350,1349,1348,1347,1346,1342,1333,1321,1320,1319,1318,1317,1316,1315,1314,1313,1312,1303,1294,1290,1289,1288,1287,1286,1285,1284,1283,1282,1272,1271,1270,1269,1268,1267,1266,1265,1264,1256,1240,1239,1238,1237,1236,1235,1234,1233,1232,1224,1208,1192,1191,1190,1189,1188,1187,1186,1185,1184,16,23,32,34,35,62,66,67,68,74,156,174,178,210,230,250,282,451,520,536,557,573,589,605,621,637,653,669,683,696,715,729,742,761,829,845,861,877,893,909,1023,1041,1057,1073,1089,1105,1121,1144,1160,1176
<16=21,17
<17=20,18
<18=19
<21=22
<23=28,24
<24=27,25
<25=26
<28=29
<29=31,30
<32=33
<35=53,36
<36=37
<37=38
<38=52,39
<39=51,40
<40=50,41
<41=49,42
<42=48,43
<43=47,44
<44=46,45
<53=54
<54=60,55
<55=56
<56=57
<57=59,58
<60=61
<62=63
<63=65,64
<68=70,69
<70=71
<71=73,72
<74=152,75
<75=130,129,128,127,126,125,124,123,122,121,112,76
<76=104,88,85,77
<77=78
<78=82,79
<79=81,80
<82=84,83
<85=87,86
<88=89
<89=103,90
<90=97,91
<91=93,92
<93=94
<94=96,95
<97=99,98
<99=100
<100=102,101
<104=105
<105=106
<106=111,110,107
<107=109,108
<112=113
<113=119,114
<114=115
<115=116
<116=118,117
<119=120
<130=131
<131=149,132
<132=148,133
<133=147,134
<134=141,135
<135=137,136
<137=138
<138=140,139
<141=143,142
<143=144
<144=146,145
<149=151,150
<152=153
<153=155,154
<156=157
<157=173,158
<158=172,159
<159=171,160
<160=168,161
<161=167,162
<162=166,163
<163=165,164
<168=170,169
<174=175
<175=177,176
<178=186,179
<179=180
<180=184,181
<181=182
<182=183
<184=185
<186=187
<187=205,188
<188=200,189
<189=195,190
<190=192,191
<192=194,193
<195=197,196
<197=199,198
<200=202,201
<202=204,203
<205=207,206
<207=209,208
<210=218,211
<211=212
<212=216,213
<213=214
<214=215
<216=217
<218=219
<219=225,220
<220=222,221
<222=224,223
<225=227,226
<227=229,228
<230=238,231
<231=232
<232=236,233
<233=234
<234=235
<236=237
<238=239
<239=245,240
<240=242,241
<242=244,243
<245=247,246
<247=249,248
<250=274,251
<251=268,252
<252=253
<253=265,254
<254=263,255
<255=261,256
<256=257
<257=259,258
<259=260
<261=262
<263=264
<265=267,266
<268=269
<269=271,270
<271=273,272
<274=275
<275=279,276
<276=278,277
<279=281,280
<282=419,411,283
<283=284
<284=405,319,285
<285=286
<286=295,287
<287=288
<288=289
<289=293,290
<290=291
<291=292
<293=294
<295=296
<296=314,297
<297=306,298
<298=305,299
<299=301,300
<301=302
<302=304,303
<306=313,307
<307=309,308
<309=310
<310=312,311
<314=316,315
<316=318,317
<319=401,392,391,390,389,388,387,386,385,378,377,376,375,374,373,372,371,364,352,320
<320=337,321
<321=329,322
<322=323
<323=327,324
<324=325
<325=326
<327=328
<329=330
<330=336,331
<331=335,332
<332=334,333
<337=338
<338=342,339
<339=341,340
<342=344,343
<344=351,345
<345=347,346
<347=348
<348=350,349
<352=360,353
<353=354
<354=358,355
<355=356
<356=357
<358=359
<360=361
<361=363,362
<364=365
<365=367,366
<367=368
<368=370,369
<378=379
<379=381,380
<381=382
<382=384,383
<392=393
<393=397,394
<394=395
<395=396
<397=398
<398=400,399
<401=402
<402=404,403
<405=406
<406=408,407
<408=410,409
<411=412
<412=413
<413=417,414
<414=415
<415=416
<417=418
<419=420
<420=432,421
<421=429,422
<422=426,423
<423=425,424
<426=428,427
<429=431,430
<432=448,433
<433=445,434
<434=440,435
<435=437,436
<437=439,438
<440=442,441
<442=444,443
<445=447,446
<448=450,449
<451=516,452
<452=498,486,472,466,453
<453=454
<454=464,455
<455=462,458,456
<456=457
<458=459
<459=461,460
<462=463
<464=465
<466=467
<467=469,468
<469=471,470
<472=473
<473=485,484,474
<474=483,475
<475=477,476
<477=481,478
<478=479
<479=480
<481=482
<486=494,487
<487=488
<488=492,489
<489=490
<490=491
<492=493
<494=495
<495=497,496
<498=499
<499=515,514,500
<500=513,501
<501=511,502
<502=507,505,503
<503=504
<505=506
<507=508
<508=510,509
<511=512
<516=517
<517=519,518
<520=521
<521=533,522
<522=532,523
<523=531,524
<524=528,525
<525=527,526
<528=530,529
<533=535,534
<536=537
<537=554,538
<538=553,539
<539=552,540
<540=549,541
<541=548,542
<542=546,543
<543=544
<544=545
<546=547
<549=551,550
<554=556,555
<557=558
<558=570,559
<559=569,560
<560=568,561
<561=565,562
<562=564,563
<565=567,566
<570=572,571
<573=574
<574=586,575
<575=585,576
<576=584,577
<577=581,578
<578=580,579
<581=583,582
<586=588,587
<589=590
<590=602,591
<591=601,592
<592=600,593
<593=597,594
<594=596,595
<597=599,598
<602=604,603
<605=606
<606=618,607
<607=617,608
<608=616,609
<609=613,610
<610=612,611
<613=615,614
<618=620,619
<621=622
<622=634,623
<623=633,624
<624=632,625
<625=629,626
<626=628,627
<629=631,630
<634=636,635
<637=638
<638=650,639
<639=649,640
<640=648,641
<641=645,642
<642=644,643
<645=647,646
<650=652,651
<653=654
<654=666,655
<655=665,656
<656=664,657
<657=661,658
<658=660,659
<661=663,662
<666=668,667
<669=677,670
<670=671
<671=675,672
<672=673
<673=674
<675=676
<677=678
<678=680,679
<680=682,681
<683=684
<684=693,685
<685=691,686
<686=687
<687=688
<688=690,689
<691=692
<693=695,694
<696=697
<697=713,698
<698=709,707,703,699
<699=700
<700=702,701
<703=704
<704=706,705
<707=708
<709=710
<710=712,711
<713=714
<715=723,716
<716=717
<717=721,718
<718=719
<719=720
<721=722
<723=724
<724=726,725
<726=728,727
<729=730
<730=739,731
<731=737,732
<732=733
<733=734
<734=736,735
<737=738
<739=741,740
<742=743
<743=759,744
<744=755,753,749,745
<745=746
<746=748,747
<749=750
<750=752,751
<753=754
<755=756
<756=758,757
<759=760
<761=825,762
<762=807,795,779,778,777,776,775,774,773,772,771,770,763
<763=764
<764=768,765
<765=766
<766=767
<768=769
<779=787,780
<780=781
<781=785,782
<782=783
<783=784
<785=786
<787=788
<788=792,789
<789=791,790
<792=794,793
<795=803,796
<796=797
<797=801,798
<798=799
<799=800
<801=802
<803=804
<804=806,805
<807=808
<808=824,823,809
<809=822,810
<810=820,811
<811=816,814,812
<812=813
<814=815
<816=817
<817=819,818
<820=821
<825=826
<826=828,827
<829=830
<830=842,831
<831=841,832
<832=840,833
<833=837,834
<834=836,835
<837=839,838
<842=844,843
<845=846
<846=858,847
<847=857,848
<848=856,849
<849=853,850
<850=852,851
<853=855,854
<858=860,859
<861=862
<862=874,863
<863=873,864
<864=872,865
<865=869,866
<866=868,867
<869=871,870
<874=876,875
<877=878
<878=890,879
<879=889,880
<880=888,881
<881=885,882
<882=884,883
<885=887,886
<890=892,891
<893=894
<894=906,895
<895=905,896
<896=904,897
<897=901,898
<898=900,899
<901=903,902
<906=908,907
<909=1021,928,910
<910=911
<911=927,926,925,924,923,922,921,920,912
<912=913
<913=917,914
<914=916,915
<917=919,918
<928=1020,1019,1018,1017,1016,1015,1014,1013,1012,1011,1010,1003,1002,1001,1000,999,998,997,996,995,994,987,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,953,941,935,929
<929=930
<930=932,931
<932=934,933
<935=936
<936=938,937
<938=940,939
<941=949,942
<942=943
<943=947,944
<944=945
<945=946
<947=948
<949=950
<950=952,951
<953=954
<954=956,955
<975=976
<976=986,985,977
<977=984,978
<978=982,979
<979=980
<980=981
<982=983
<987=988
<988=992,989
<989=990
<990=991
<992=993
<1003=1004
<1004=1008,1005
<1005=1006
<1006=1007
<1008=1009
<1021=1022
<1023=1024
<1024=1040,1039,1025
<1025=1038,1026
<1026=1036,1027
<1027=1032,1030,1028
<1028=1029
<1030=1031
<1032=1033
<1033=1035,1034
<1036=1037
<1041=1042
<1042=1054,1043
<1043=1053,1044
<1044=1052,1045
<1045=1049,1046
<1046=1048,1047
<1049=1051,1050
<1054=1056,1055
<1057=1058
<1058=1070,1059
<1059=1069,1060
<1060=1068,1061
<1061=1065,1062
<1062=1064,1063
<1065=1067,1066
<1070=1072,1071
<1073=1074
<1074=1086,1075
<1075=1085,1076
<1076=1084,1077
<1077=1081,1078
<1078=1080,1079
<1081=1083,1082
<1086=1088,1087
<1089=1090
<1090=1102,1091
<1091=1101,1092
<1092=1100,1093
<1093=1097,1094
<1094=1096,1095
<1097=1099,1098
<1102=1104,1103
<1105=1106
<1106=1118,1107
<1107=1117,1108
<1108=1116,1109
<1109=1113,1110
<1110=1112,1111
<1113=1115,1114
<1118=1120,1119
<1121=1122
<1122=1141,1123
<1123=1139,1124
<1124=1137,1125
<1125=1126
<1126=1136,1127
<1127=1135,1128
<1128=1132,1129
<1129=1131,1130
<1132=1134,1133
<1137=1138
<1139=1140
<1141=1143,1142
<1144=1145
<1145=1157,1146
<1146=1156,1147
<1147=1155,1148
<1148=1152,1149
<1149=1151,1150
<1152=1154,1153
<1157=1159,1158
<1160=1161
<1161=1173,1162
<1162=1172,1163
<1163=1171,1164
<1164=1168,1165
<1165=1167,1166
<1168=1170,1169
<1173=1175,1174
<1176=1177
<1177=1181,1178
<1178=1180,1179
<1181=1183,1182
<1192=1193
<1193=1205,1194
<1194=1204,1195
<1195=1203,1196
<1196=1200,1197
<1197=1199,1198
<1200=1202,1201
<1205=1207,1206
<1208=1209
<1209=1221,1210
<1210=1220,1211
<1211=1219,1212
<1212=1216,1213
<1213=1215,1214
<1216=1218,1217
<1221=1223,1222
<1224=1225
<1225=1229,1226
<1226=1228,1227
<1229=1231,1230
<1240=1241
<1241=1253,1242
<1242=1252,1243
<1243=1251,1244
<1244=1248,1245
<1245=1247,1246
<1248=1250,1249
<1253=1255,1254
<1256=1257
<1257=1261,1258
<1258=1260,1259
<1261=1263,1262
<1272=1273
<1273=1279,1274
<1274=1278,1275
<1275=1277,1276
<1279=1281,1280
<1290=1291
<1291=1293,1292
<1294=1295
<1295=1302,1301,1296
<1296=1300,1297
<1297=1299,1298
<1303=1304
<1304=1310,1305
<1305=1306
<1306=1307
<1307=1309,1308
<1310=1311
<1321=1322
<1322=1330,1323
<1323=1329,1324
<1324=1328,1325
<1325=1327,1326
<1330=1332,1331
<1333=1334
<1334=1341,1340,1335
<1335=1339,1336
<1336=1338,1337
<1342=1343
<1343=1345,1344
<1353=1354
<1354=1356,1355
<1364=1365
<1365=1377,1376,1366
<1366=1375,1367
<1367=1373,1368
<1368=1369
<1369=1370
<1370=1372,1371
<1373=1374
<1378=1379
<1379=1385,1380
<1380=1381
<1381=1382
<1382=1384,1383
<1385=1386
<1396=1429,1397
<1397=1412,1408,1398
<1398=1399
<1399=1407,1400
<1400=1404,1401
<1401=1403,1402
<1404=1406,1405
<1408=1409
<1409=1411,1410
<1412=1413
<1413=1428,1427,1414
<1414=1426,1415
<1415=1425,1416
<1416=1424,1417
<1417=1421,1418
<1418=1420,1419
<1421=1423,1422
<1429=1430
<1430=1432,1431
<1433=1445,1434
<1434=1441,1435
<1435=1436
<1436=1440,1437
<1437=1439,1438
<1441=1442
<1442=1444,1443
<1445=1446
<1447=1448
<1448=1463,1462,1449
<1449=1461,1450
<1450=1460,1451
<1451=1459,1452
<1452=1456,1453
<1453=1455,1454
<1456=1458,1457
<1464=1578,1493,1465
<1465=1466
<1466=1492,1491,1490,1489,1488,1487,1486,1485,1484,1475,1467
<1467=1468
<1468=1474,1469
<1469=1473,1470
<1470=1472,1471
<1475=1476
<1476=1482,1477
<1477=1478
<1478=1479
<1479=1481,1480
<1482=1483
<1493=1577,1576,1575,1574,1573,1572,1571,1562,1551,1540,1534,1512,1494
<1494=1495
<1495=1511,1496
<1496=1510,1497
<1497=1509,1498
<1498=1508,1499
<1499=1507,1500
<1500=1506,1501
<1501=1505,1502
<1502=1504,1503
<1512=1513
<1513=1533,1514
<1514=1532,1515
<1515=1531,1516
<1516=1530,1517
<1517=1529,1518
<1518=1528,1519
<1519=1527,1520
<1520=1526,1521
<1521=1525,1522
<1522=1524,1523
<1534=1535
<1535=1539,1536
<1536=1538,1537
<1540=1541
<1541=1550,1542
<1542=1548,1543
<1543=1544
<1544=1545
<1545=1547,1546
<1548=1549
<1551=1552
<1552=1561,1553
<1553=1559,1554
<1554=1555
<1555=1556
<1556=1558,1557
<1559=1560
<1562=1563
<1563=1569,1564
<1564=1565
<1565=1566
<1566=1568,1567
<1569=1570
<1578=1579
<1579=1585,1580
<1580=1581
<1581=1582
<1582=1584,1583
<1585=1586
<1587=1588
<1588=1592,1589
<1589=1591,1590
<1592=1594,1593
<1603=1604
<1604=1606,1605
<1607=1614,1611,1608
<1608=1610,1609
<1611=1613,1612
<1614=1616,1615
<1617=1624,1621,1618
<1618=1620,1619
<1621=1623,1622
<1624=1626,1625
<1627=1628
<1628=1630,1629
<1631=1632
<1632=1637,1636,1633
<1633=1635,1634
<1638=1639
<1639=1644,1643,1640
<1640=1642,1641
<1645=1646
<1646=1648,1647
<1649=1650
<1650=1652,1651
<1660=1661
<1661=1663,1662
<1671=1672
<1672=1684,1683,1673
<1673=1682,1674
<1674=1680,1675
<1675=1676
<1676=1677
<1677=1679,1678
<1680=1681
<1685=1686
<1686=1693,1692,1687
<1687=1691,1688
<1688=1690,1689
<1694=1695
<1695=1697,1696
<1705=1706
<1706=1708,1707
<1716=1717
<1717=1729,1728,1718
<1718=1727,1719
<1719=1725,1720
<1720=1721
<1721=1722
<1722=1724,1723
<1725=1726
<1730=1731
<1731=1737,1732
<1732=1733
<1733=1734
<1734=1736,1735
<1737=1738
<1748=1756,1749
<1749=1750
<1750=1754,1751
<1751=1752
<1752=1753
<1754=1755
<1756=1757
<1757=1766,1758
<1758=1764,1759
<1759=1760
<1760=1761
<1761=1763,1762
<1764=1765
<1767=1775,1768
<1768=1769
<1769=1773,1770
<1770=1771
<1771=1772
<1773=1774
<1775=1776
<1776=1782,1777
<1777=1778
<1778=1779
<1779=1781,1780
<1782=1783
<1784=1792,1785
<1785=1786
<1786=1790,1787
<1787=1788
<1788=1789
<1790=1791
<1792=1793
<1793=1799,1794
<1794=1798,1795
<1795=1797,1796
<1799=1801,1800
<1802=1810,1803
<1803=1804
<1804=1808,1805
<1805=1806
<1806=1807
<1808=1809
<1810=1811
<1811=1817,1812
<1812=1816,1813
<1813=1815,1814
<1817=1819,1818
<1820=1828,1821
<1821=1822
<1822=1826,1823
<1823=1824
<1824=1825
<1826=1827
<1828=1829
<1829=1835,1830
<1830=1831
<1831=1832
<1832=1834,1833
<1835=1836
<1837=1845,1838
<1838=1839
<1839=1843,1840
<1840=1841
<1841=1842
<1843=1844
<1845=1846
<1846=1852,1847
<1847=1851,1848
<1848=1850,1849
<1852=1854,1853
<1982=1997,1996,1983
<1983=1993,1990,1987,1984
<1984=1986,1985
<1987=1989,1988
<1990=1992,1991
<1993=1995,1994
<1997=2049,2033,1998
<1998=2022,2011,1999
<1999=2000
<2000=2001
<2001=2002
<2002=2010,2003
<2003=2009,2004
<2004=2008,2005
<2005=2007,2006
<2011=2012
<2012=2013
<2013=2021,2014
<2014=2020,2015
<2015=2019,2016
<2016=2018,2017
<2022=2023
<2023=2025,2024
<2025=2031,2026
<2026=2027
<2027=2028
<2028=2030,2029
<2031=2032
<2033=2041,2034
<2034=2035
<2035=2039,2036
<2036=2037
<2037=2038
<2039=2040
<2041=2042
<2042=2046,2043
<2043=2045,2044
<2046=2048,2047
<2049=2057,2050
<2050=2051
<2051=2055,2052
<2052=2053
<2053=2054
<2055=2056
<2057=2058
<2058=2060,2059
