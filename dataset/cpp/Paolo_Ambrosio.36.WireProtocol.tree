>3	FunctionDef	SuccessResponse 
>4	ParameterList	WireResponseVisitor * visitor
>5	Parameter	 
>6	Identifier	visitor
>7	ParameterType	WireResponseVisitor *
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	visitor -> visit ( this )
>12	ArgumentList	this
>13	Argument	this
>14	Identifier	this
>15	Callee	visitor -> visit
>16	PtrMemberAccess	visitor -> visit
>17	Identifier	visit
>18	Identifier	visitor
>24	FunctionDef	FailureResponse 
>25	ParameterList	const std 
>26	Parameter	 
>27	Identifier	exceptionType
>28	ParameterType	const std 
>29	Parameter	 
>30	Identifier	message
>31	ParameterType	const std 
>32	CompoundStatement	 
>38	FunctionDef	FailureResponse 
>39	ParameterList	 
>40	ReturnType	const std 
>41	CompoundStatement	 
>42	ReturnStatement	 
>43	Identifier	message
>48	FunctionDef	FailureResponse 
>49	ParameterList	 
>50	ReturnType	const std 
>51	CompoundStatement	 
>52	ReturnStatement	 
>53	Identifier	exceptionType
>58	FunctionDef	FailureResponse 
>59	ParameterList	WireResponseVisitor * visitor
>60	Parameter	 
>61	Identifier	visitor
>62	ParameterType	WireResponseVisitor *
>63	ReturnType	void
>64	CompoundStatement	 
>65	ExpressionStatement	 
>66	CallExpression	visitor -> visit ( this )
>67	ArgumentList	this
>68	Argument	this
>69	Identifier	this
>70	Callee	visitor -> visit
>71	PtrMemberAccess	visitor -> visit
>72	Identifier	visit
>73	Identifier	visitor
>79	FunctionDef	PendingResponse 
>80	ParameterList	const std 
>81	Parameter	 
>82	Identifier	message
>83	ParameterType	const std 
>84	CompoundStatement	 
>89	FunctionDef	PendingResponse 
>90	ParameterList	 
>91	ReturnType	const std 
>92	CompoundStatement	 
>93	ReturnStatement	 
>94	Identifier	message
>99	FunctionDef	PendingResponse 
>100	ParameterList	WireResponseVisitor * visitor
>101	Parameter	 
>102	Identifier	visitor
>103	ParameterType	WireResponseVisitor *
>104	ReturnType	void
>105	CompoundStatement	 
>106	ExpressionStatement	 
>107	CallExpression	visitor -> visit ( this )
>108	ArgumentList	this
>109	Argument	this
>110	Identifier	this
>111	Callee	visitor -> visit
>112	PtrMemberAccess	visitor -> visit
>113	Identifier	visit
>114	Identifier	visitor
>120	FunctionDef	StepMatchesResponse 
>121	ParameterList	const std 
>122	Parameter	 
>123	Identifier	matchingSteps
>124	ParameterType	const std 
>125	CompoundStatement	 
>130	FunctionDef	StepMatchesResponse 
>131	ParameterList	 
>132	ReturnType	const std 
>133	CompoundStatement	 
>134	ReturnStatement	 
>135	Identifier	matchingSteps
>140	FunctionDef	StepMatchesResponse 
>141	ParameterList	WireResponseVisitor * visitor
>142	Parameter	 
>143	Identifier	visitor
>144	ParameterType	WireResponseVisitor *
>145	ReturnType	void
>146	CompoundStatement	 
>147	ExpressionStatement	 
>148	CallExpression	visitor -> visit ( this )
>149	ArgumentList	this
>150	Argument	this
>151	Identifier	this
>152	Callee	visitor -> visit
>153	PtrMemberAccess	visitor -> visit
>154	Identifier	visit
>155	Identifier	visitor
>161	FunctionDef	SnippetTextResponse 
>162	ParameterList	const std 
>163	Parameter	 
>164	Identifier	stepSnippet
>165	ParameterType	const std 
>166	CompoundStatement	 
>171	FunctionDef	SnippetTextResponse 
>172	ParameterList	 
>173	ReturnType	const std 
>174	CompoundStatement	 
>175	ReturnStatement	 
>176	Identifier	stepSnippet
>181	FunctionDef	SnippetTextResponse 
>182	ParameterList	WireResponseVisitor * visitor
>183	Parameter	 
>184	Identifier	visitor
>185	ParameterType	WireResponseVisitor *
>186	ReturnType	void
>187	CompoundStatement	 
>188	ExpressionStatement	 
>189	CallExpression	visitor -> visit ( this )
>190	ArgumentList	this
>191	Argument	this
>192	Identifier	this
>193	Callee	visitor -> visit
>194	PtrMemberAccess	visitor -> visit
>195	Identifier	visit
>196	Identifier	visitor
>204	FunctionDef	getTags (const mValue & jsonArgs)
>205	ParameterList	const mValue & jsonArgs
>206	Parameter	 
>207	Identifier	jsonArgs
>208	ParameterType	const mValue &
>209	ReturnType	CukeEngine 
>210	CompoundStatement	 
>211	ReturnStatement	 
>212	Identifier	tags
>213	IfStatement	if ( ! jsonArgs . is_null ( ) )
>214	CompoundStatement	 
>215	ForStatement	for ( mArray 
>216	CompoundStatement	 
>217	ExpressionStatement	 
>218	CallExpression	tags -> push_back ( i -> get_str ( ) )
>219	ArgumentList	i -> get_str ( )
>220	Argument	i -> get_str ( )
>221	CallExpression	i -> get_str ( )
>222	ArgumentList	 
>223	Callee	i -> get_str
>224	PtrMemberAccess	i -> get_str
>225	Identifier	get_str
>226	Identifier	i
>227	Callee	tags -> push_back
>228	PtrMemberAccess	tags -> push_back
>229	Identifier	push_back
>230	Identifier	tags
>231	UnaryExpression	 
>232	Identifier	i
>233	IncDec	++
>234	Condition	 
>235	EqualityExpression	i != jsonTags . end ( )
>236	CallExpression	jsonTags . end ( )
>237	ArgumentList	 
>238	Callee	jsonTags . end
>239	MemberAccess	jsonTags . end
>240	Identifier	end
>241	Identifier	jsonTags
>242	Identifier	i
>243	ForInit	 
>244	IdentifierDeclStatement	mArray 
>245	IdentifierDecl	i = jsonTags . begin ( )
>246	AssignmentExpr	i = jsonTags . begin ( )
>247	CallExpression	jsonTags . begin ( )
>248	ArgumentList	 
>249	Callee	jsonTags . begin
>250	MemberAccess	jsonTags . begin
>251	Identifier	begin
>252	Identifier	jsonTags
>253	Identifier	i
>254	Identifier	i
>255	IdentifierDeclType	mArray 
>256	IdentifierDeclStatement	 
>257	IdentifierDecl	& jsonTags = jsonArgs . get_obj ( ) . find ( \"tags\" ) -> second . get_array ( )
>258	AssignmentExpr	& jsonTags = jsonArgs . get_obj ( ) . find ( \"tags\" ) -> second . get_array ( )
>259	CallExpression	jsonArgs . get_obj ( ) . find ( \"tags\" ) -> second . get_array ( )
>260	ArgumentList	 
>261	Callee	jsonArgs . get_obj ( ) . find ( \"tags\" ) -> second . get_array
>262	MemberAccess	jsonArgs . get_obj ( ) . find ( \"tags\" ) -> second . get_array
>263	Identifier	get_array
>264	PtrMemberAccess	jsonArgs . get_obj ( ) . find ( \"tags\" ) -> second
>265	Identifier	second
>266	CallExpression	jsonArgs . get_obj ( ) . find ( \"tags\" )
>267	ArgumentList	\"tags\"
>268	Argument	\"tags\"
>269	PrimaryExpression	\"tags\"
>270	Callee	jsonArgs . get_obj ( ) . find
>271	MemberAccess	jsonArgs . get_obj ( ) . find
>272	Identifier	find
>273	CallExpression	jsonArgs . get_obj ( )
>274	ArgumentList	 
>275	Callee	jsonArgs . get_obj
>276	MemberAccess	jsonArgs . get_obj
>277	Identifier	get_obj
>278	Identifier	jsonArgs
>279	Identifier	jsonTags
>280	Identifier	jsonTags
>281	IdentifierDeclType	const mArray &
>282	Condition	 
>283	UnaryOp	! jsonArgs . is_null ( )
>284	CallExpression	jsonArgs . is_null ( )
>285	ArgumentList	 
>286	Callee	jsonArgs . is_null
>287	MemberAccess	jsonArgs . is_null
>288	Identifier	is_null
>289	Identifier	jsonArgs
>290	UnaryOperator	!
>291	ExpressionStatement	 
>292	Identifier	CukeEngine 
>293	Statement	 
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	Statement	 
>298	Statement	 
>299	Statement	 
>320	FunctionDef	decode (const mValue & jsonArgs)
>321	ParameterList	const mValue & jsonArgs
>322	Parameter	 
>323	Identifier	jsonArgs
>324	ParameterType	const mValue &
>325	ReturnType	WireCommand *
>326	CompoundStatement	 
>327	ReturnStatement	 
>328	CallExpression	getTags ( jsonArgs )
>329	ArgumentList	jsonArgs
>330	Argument	jsonArgs
>331	Identifier	jsonArgs
>332	Callee	getTags
>333	Identifier	getTags
>340	FunctionDef	decode (const mValue & jsonArgs)
>341	ParameterList	const mValue & jsonArgs
>342	Parameter	 
>343	Identifier	jsonArgs
>344	ParameterType	const mValue &
>345	ReturnType	WireCommand *
>346	CompoundStatement	 
>347	ReturnStatement	 
>348	CallExpression	getTags ( jsonArgs )
>349	ArgumentList	jsonArgs
>350	Argument	jsonArgs
>351	Identifier	jsonArgs
>352	Callee	getTags
>353	Identifier	getTags
>360	FunctionDef	decode (const mValue & jsonArgs)
>361	ParameterList	const mValue & jsonArgs
>362	Parameter	 
>363	Identifier	jsonArgs
>364	ParameterType	const mValue &
>365	ReturnType	WireCommand *
>366	CompoundStatement	 
>367	ReturnStatement	 
>368	Identifier	nameToMatch
>369	IdentifierDeclStatement	 
>370	IdentifierDecl	& nameToMatch ( stepMatchesArgs [ \"name_to_match\" ] . get_str ( ) )
>371	CallExpression	stepMatchesArgs [ \"name_to_match\" ] . get_str ( )
>372	ArgumentList	 
>373	Callee	stepMatchesArgs [ \"name_to_match\" ] . get_str
>374	MemberAccess	stepMatchesArgs [ \"name_to_match\" ] . get_str
>375	Identifier	get_str
>376	ArrayIndexing	stepMatchesArgs [ \"name_to_match\" ]
>377	PrimaryExpression	\"name_to_match\"
>378	Identifier	stepMatchesArgs
>379	Identifier	nameToMatch
>380	IdentifierDeclType	const std 
>381	IdentifierDeclStatement	 
>382	IdentifierDecl	stepMatchesArgs ( jsonArgs . get_obj ( ) )
>383	CallExpression	jsonArgs . get_obj ( )
>384	ArgumentList	 
>385	Callee	jsonArgs . get_obj
>386	MemberAccess	jsonArgs . get_obj
>387	Identifier	get_obj
>388	Identifier	jsonArgs
>389	Identifier	stepMatchesArgs
>390	IdentifierDeclType	mObject
>399	FunctionDef	decode (const mValue & jsonArgs)
>400	ParameterList	const mValue & jsonArgs
>401	Parameter	 
>402	Identifier	jsonArgs
>403	ParameterType	const mValue &
>404	ReturnType	WireCommand *
>405	CompoundStatement	 
>406	ReturnStatement	 
>407	Expression	id , args , tableArg
>408	Expression	args , tableArg
>409	Identifier	tableArg
>410	Identifier	args
>411	Identifier	id
>412	ExpressionStatement	 
>413	CallExpression	fillInvokeArgs ( invokeParams , * args , * tableArg )
>414	ArgumentList	invokeParams
>415	Argument	* tableArg
>416	UnaryOp	* tableArg
>417	Identifier	tableArg
>418	UnaryOperator	*
>419	Argument	* args
>420	UnaryOp	* args
>421	Identifier	args
>422	UnaryOperator	*
>423	Argument	invokeParams
>424	Identifier	invokeParams
>425	Callee	fillInvokeArgs
>426	Identifier	fillInvokeArgs
>427	IdentifierDeclStatement	 
>428	IdentifierDecl	& id ( invokeParams [ \"id\" ] . get_str ( ) )
>429	CallExpression	invokeParams [ \"id\" ] . get_str ( )
>430	ArgumentList	 
>431	Callee	invokeParams [ \"id\" ] . get_str
>432	MemberAccess	invokeParams [ \"id\" ] . get_str
>433	Identifier	get_str
>434	ArrayIndexing	invokeParams [ \"id\" ]
>435	PrimaryExpression	\"id\"
>436	Identifier	invokeParams
>437	Identifier	id
>438	IdentifierDeclType	const std 
>439	ExpressionStatement	 
>440	Identifier	CukeEngine 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	ExpressionStatement	 
>449	Identifier	CukeEngine 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	IdentifierDeclStatement	 
>458	IdentifierDecl	invokeParams ( jsonArgs . get_obj ( ) )
>459	CallExpression	jsonArgs . get_obj ( )
>460	ArgumentList	 
>461	Callee	jsonArgs . get_obj
>462	MemberAccess	jsonArgs . get_obj
>463	Identifier	get_obj
>464	Identifier	jsonArgs
>465	Identifier	invokeParams
>466	IdentifierDeclType	mObject
>478	FunctionDef	fillInvokeArgs (const mObject & invokeParams , CukeEngine 
>479	ParameterList	const mObject & invokeParams , CukeEngine 
>480	Parameter	 
>481	Identifier	tableArg
>482	ParameterType	CukeEngine 
>483	Parameter	 
>484	Identifier	args
>485	ParameterType	CukeEngine 
>486	Parameter	 
>487	Identifier	invokeParams
>488	ParameterType	const mObject &
>489	ReturnType	void
>490	CompoundStatement	 
>491	ForStatement	for ( mArray 
>492	CompoundStatement	 
>493	IfStatement	if ( i -> type ( ) == str_type )
>494	ElseStatement	else
>495	IfStatement	if ( i -> type ( ) == array_type )
>496	CompoundStatement	 
>497	ExpressionStatement	 
>498	CallExpression	fillTableArg ( i -> get_array ( ) , tableArg )
>499	ArgumentList	i -> get_array ( )
>500	Argument	tableArg
>501	Identifier	tableArg
>502	Argument	i -> get_array ( )
>503	CallExpression	i -> get_array ( )
>504	ArgumentList	 
>505	Callee	i -> get_array
>506	PtrMemberAccess	i -> get_array
>507	Identifier	get_array
>508	Identifier	i
>509	Callee	fillTableArg
>510	Identifier	fillTableArg
>511	Condition	 
>512	EqualityExpression	i -> type ( ) == array_type
>513	Identifier	array_type
>514	CallExpression	i -> type ( )
>515	ArgumentList	 
>516	Callee	i -> type
>517	PtrMemberAccess	i -> type
>518	Identifier	type
>519	Identifier	i
>520	CompoundStatement	 
>521	ExpressionStatement	 
>522	CallExpression	args . push_back ( i -> get_str ( ) )
>523	ArgumentList	i -> get_str ( )
>524	Argument	i -> get_str ( )
>525	CallExpression	i -> get_str ( )
>526	ArgumentList	 
>527	Callee	i -> get_str
>528	PtrMemberAccess	i -> get_str
>529	Identifier	get_str
>530	Identifier	i
>531	Callee	args . push_back
>532	MemberAccess	args . push_back
>533	Identifier	push_back
>534	Identifier	args
>535	Condition	 
>536	EqualityExpression	i -> type ( ) == str_type
>537	Identifier	str_type
>538	CallExpression	i -> type ( )
>539	ArgumentList	 
>540	Callee	i -> type
>541	PtrMemberAccess	i -> type
>542	Identifier	type
>543	Identifier	i
>544	UnaryExpression	 
>545	Identifier	i
>546	IncDec	++
>547	Condition	 
>548	EqualityExpression	i != jsonArgs . end ( )
>549	CallExpression	jsonArgs . end ( )
>550	ArgumentList	 
>551	Callee	jsonArgs . end
>552	MemberAccess	jsonArgs . end
>553	Identifier	end
>554	Identifier	jsonArgs
>555	Identifier	i
>556	ForInit	 
>557	IdentifierDeclStatement	mArray 
>558	IdentifierDecl	i = jsonArgs . begin ( )
>559	AssignmentExpr	i = jsonArgs . begin ( )
>560	CallExpression	jsonArgs . begin ( )
>561	ArgumentList	 
>562	Callee	jsonArgs . begin
>563	MemberAccess	jsonArgs . begin
>564	Identifier	begin
>565	Identifier	jsonArgs
>566	Identifier	i
>567	Identifier	i
>568	IdentifierDeclType	mArray 
>569	IdentifierDeclStatement	 
>570	IdentifierDecl	& jsonArgs ( invokeParams . find ( \"args\" ) -> second . get_array ( ) )
>571	CallExpression	invokeParams . find ( \"args\" ) -> second . get_array ( )
>572	ArgumentList	 
>573	Callee	invokeParams . find ( \"args\" ) -> second . get_array
>574	MemberAccess	invokeParams . find ( \"args\" ) -> second . get_array
>575	Identifier	get_array
>576	PtrMemberAccess	invokeParams . find ( \"args\" ) -> second
>577	Identifier	second
>578	CallExpression	invokeParams . find ( \"args\" )
>579	ArgumentList	\"args\"
>580	Argument	\"args\"
>581	PrimaryExpression	\"args\"
>582	Callee	invokeParams . find
>583	MemberAccess	invokeParams . find
>584	Identifier	find
>585	Identifier	invokeParams
>586	Identifier	jsonArgs
>587	IdentifierDeclType	const mArray &
>608	FunctionDef	fillTableArg (const mArray & jsonTableArg , CukeEngine 
>609	ParameterList	const mArray & jsonTableArg , CukeEngine 
>610	Parameter	 
>611	Identifier	tableArg
>612	ParameterType	CukeEngine 
>613	Parameter	 
>614	Identifier	jsonTableArg
>615	ParameterType	const mArray &
>616	ReturnType	void
>617	CompoundStatement	 
>618	IfStatement	if ( rows > 0 )
>619	ElseStatement	else
>620	CompoundStatement	 
>621	CompoundStatement	 
>622	ForStatement	for ( size_type i = 0 ; i < rows ; ++ i )
>623	CompoundStatement	 
>624	IfStatement	if ( jsonRow . size ( ) == columns )
>625	ElseStatement	else
>626	CompoundStatement	 
>627	CompoundStatement	 
>628	ForStatement	for ( size_type j = 0 ; j < columns ; ++ j )
>629	CompoundStatement	 
>630	ExpressionStatement	 
>631	AssignmentExpr	tableArg [ i ] [ j ] = jsonRow [ j ] . get_str ( )
>632	CallExpression	jsonRow [ j ] . get_str ( )
>633	ArgumentList	 
>634	Callee	jsonRow [ j ] . get_str
>635	MemberAccess	jsonRow [ j ] . get_str
>636	Identifier	get_str
>637	ArrayIndexing	jsonRow [ j ]
>638	Identifier	j
>639	Identifier	jsonRow
>640	ArrayIndexing	tableArg [ i ] [ j ]
>641	Identifier	j
>642	ArrayIndexing	tableArg [ i ]
>643	Identifier	i
>644	Identifier	tableArg
>645	UnaryExpression	 
>646	Identifier	j
>647	IncDec	++
>648	Condition	 
>649	RelationalExpression	j < columns
>650	Identifier	columns
>651	Identifier	j
>652	ForInit	 
>653	IdentifierDeclStatement	size_type j = 0 ;
>654	IdentifierDecl	j = 0
>655	AssignmentExpr	j = 0
>656	PrimaryExpression	0
>657	Identifier	j
>658	Identifier	j
>659	IdentifierDeclType	size_type
>660	Condition	 
>661	EqualityExpression	jsonRow . size ( ) == columns
>662	Identifier	columns
>663	CallExpression	jsonRow . size ( )
>664	ArgumentList	 
>665	Callee	jsonRow . size
>666	MemberAccess	jsonRow . size
>667	Identifier	size
>668	Identifier	jsonRow
>669	IdentifierDeclStatement	 
>670	IdentifierDecl	& jsonRow ( jsonTableArg [ i ] . get_array ( ) )
>671	CallExpression	jsonTableArg [ i ] . get_array ( )
>672	ArgumentList	 
>673	Callee	jsonTableArg [ i ] . get_array
>674	MemberAccess	jsonTableArg [ i ] . get_array
>675	Identifier	get_array
>676	ArrayIndexing	jsonTableArg [ i ]
>677	Identifier	i
>678	Identifier	jsonTableArg
>679	Identifier	jsonRow
>680	IdentifierDeclType	const mArray &
>681	UnaryExpression	 
>682	Identifier	i
>683	IncDec	++
>684	Condition	 
>685	RelationalExpression	i < rows
>686	Identifier	rows
>687	Identifier	i
>688	ForInit	 
>689	IdentifierDeclStatement	size_type i = 0 ;
>690	IdentifierDecl	i = 0
>691	AssignmentExpr	i = 0
>692	PrimaryExpression	0
>693	Identifier	i
>694	Identifier	i
>695	IdentifierDeclType	size_type
>696	ExpressionStatement	 
>697	CallExpression	tableArg . resize ( boost 
>698	ArgumentList	boost 
>699	Argument	boost 
>700	ArrayIndexing	boost 
>701	Identifier	columns
>702	ArrayIndexing	boost 
>703	Identifier	rows
>704	Identifier	boost 
>705	Callee	tableArg . resize
>706	MemberAccess	tableArg . resize
>707	Identifier	resize
>708	Identifier	tableArg
>709	IdentifierDeclStatement	 
>710	IdentifierDecl	columns = jsonTableArg [ 0 ] . get_array ( ) . size ( )
>711	AssignmentExpr	columns = jsonTableArg [ 0 ] . get_array ( ) . size ( )
>712	CallExpression	jsonTableArg [ 0 ] . get_array ( ) . size ( )
>713	ArgumentList	 
>714	Callee	jsonTableArg [ 0 ] . get_array ( ) . size
>715	MemberAccess	jsonTableArg [ 0 ] . get_array ( ) . size
>716	Identifier	size
>717	CallExpression	jsonTableArg [ 0 ] . get_array ( )
>718	ArgumentList	 
>719	Callee	jsonTableArg [ 0 ] . get_array
>720	MemberAccess	jsonTableArg [ 0 ] . get_array
>721	Identifier	get_array
>722	ArrayIndexing	jsonTableArg [ 0 ]
>723	PrimaryExpression	0
>724	Identifier	jsonTableArg
>725	Identifier	columns
>726	Identifier	columns
>727	IdentifierDeclType	size_type
>728	Condition	 
>729	RelationalExpression	rows > 0
>730	PrimaryExpression	0
>731	Identifier	rows
>732	IdentifierDeclStatement	 
>733	IdentifierDecl	rows = jsonTableArg . size ( )
>734	AssignmentExpr	rows = jsonTableArg . size ( )
>735	CallExpression	jsonTableArg . size ( )
>736	ArgumentList	 
>737	Callee	jsonTableArg . size
>738	MemberAccess	jsonTableArg . size
>739	Identifier	size
>740	Identifier	jsonTableArg
>741	Identifier	rows
>742	Identifier	rows
>743	IdentifierDeclType	size_type
>744	IdentifierDeclStatement	 
>745	IdentifierDecl	size_type
>746	Identifier	size_type
>747	IdentifierDeclType	mArray 
>778	FunctionDef	decode (const mValue & jsonArgs)
>779	ParameterList	const mValue & jsonArgs
>780	Parameter	 
>781	Identifier	jsonArgs
>782	ParameterType	const mValue &
>783	ReturnType	WireCommand *
>784	CompoundStatement	 
>785	ReturnStatement	 
>786	Expression	stepKeyword , stepName , multilineArgClass
>787	Expression	stepName , multilineArgClass
>788	Identifier	multilineArgClass
>789	Identifier	stepName
>790	Identifier	stepKeyword
>791	IdentifierDeclStatement	 
>792	IdentifierDecl	& multilineArgClass ( snippetTextArgs [ \"multiline_arg_class\" ] . get_str ( ) )
>793	CallExpression	snippetTextArgs [ \"multiline_arg_class\" ] . get_str ( )
>794	ArgumentList	 
>795	Callee	snippetTextArgs [ \"multiline_arg_class\" ] . get_str
>796	MemberAccess	snippetTextArgs [ \"multiline_arg_class\" ] . get_str
>797	Identifier	get_str
>798	ArrayIndexing	snippetTextArgs [ \"multiline_arg_class\" ]
>799	PrimaryExpression	\"multiline_arg_class\"
>800	Identifier	snippetTextArgs
>801	Identifier	multilineArgClass
>802	IdentifierDeclType	const std 
>803	IdentifierDeclStatement	 
>804	IdentifierDecl	& stepName ( snippetTextArgs [ \"step_name\" ] . get_str ( ) )
>805	CallExpression	snippetTextArgs [ \"step_name\" ] . get_str ( )
>806	ArgumentList	 
>807	Callee	snippetTextArgs [ \"step_name\" ] . get_str
>808	MemberAccess	snippetTextArgs [ \"step_name\" ] . get_str
>809	Identifier	get_str
>810	ArrayIndexing	snippetTextArgs [ \"step_name\" ]
>811	PrimaryExpression	\"step_name\"
>812	Identifier	snippetTextArgs
>813	Identifier	stepName
>814	IdentifierDeclType	const std 
>815	IdentifierDeclStatement	 
>816	IdentifierDecl	& stepKeyword ( snippetTextArgs [ \"step_keyword\" ] . get_str ( ) )
>817	CallExpression	snippetTextArgs [ \"step_keyword\" ] . get_str ( )
>818	ArgumentList	 
>819	Callee	snippetTextArgs [ \"step_keyword\" ] . get_str
>820	MemberAccess	snippetTextArgs [ \"step_keyword\" ] . get_str
>821	Identifier	get_str
>822	ArrayIndexing	snippetTextArgs [ \"step_keyword\" ]
>823	PrimaryExpression	\"step_keyword\"
>824	Identifier	snippetTextArgs
>825	Identifier	stepKeyword
>826	IdentifierDeclType	const std 
>827	IdentifierDeclStatement	 
>828	IdentifierDecl	snippetTextArgs ( jsonArgs . get_obj ( ) )
>829	CallExpression	jsonArgs . get_obj ( )
>830	ArgumentList	 
>831	Callee	jsonArgs . get_obj
>832	MemberAccess	jsonArgs . get_obj
>833	Identifier	get_obj
>834	Identifier	jsonArgs
>835	Identifier	snippetTextArgs
>836	IdentifierDeclType	mObject
>848	FunctionDef	JsonSpiritWireMessageCodec 
>849	ParameterList	 
>850	CompoundStatement	 
>854	FunctionDef	JsonSpiritWireMessageCodec 
>855	ParameterList	const std 
>856	Parameter	 
>857	Identifier	request
>858	ParameterType	const std 
>859	ReturnType	WireCommand *
>860	CompoundStatement	 
>861	ExpressionStatement	 
>862	Identifier	FailingCommand
>863	Statement	 
>864	Statement	 
>865	CompoundStatement	 
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	BlockStarter	 
>873	CompoundStatement	 
>874	IfStatement	if ( commandDecoder != NULL )
>875	CompoundStatement	 
>876	ReturnStatement	return commandDecoder -> decode ( jsonArgs ) ;
>877	CallExpression	commandDecoder -> decode ( jsonArgs )
>878	ArgumentList	jsonArgs
>879	Argument	jsonArgs
>880	Identifier	jsonArgs
>881	Callee	commandDecoder -> decode
>882	PtrMemberAccess	commandDecoder -> decode
>883	Identifier	decode
>884	Identifier	commandDecoder
>885	IfStatement	if ( jsonRequest . size ( ) > 1 )
>886	CompoundStatement	 
>887	ExpressionStatement	jsonArgs = jsonRequest [ 1 ]
>888	AssignmentExpr	jsonArgs = jsonRequest [ 1 ]
>889	ArrayIndexing	jsonRequest [ 1 ]
>890	PrimaryExpression	1
>891	Identifier	jsonRequest
>892	Identifier	jsonArgs
>893	Condition	jsonRequest . size ( ) > 1
>894	RelationalExpression	jsonRequest . size ( ) > 1
>895	PrimaryExpression	1
>896	CallExpression	jsonRequest . size ( )
>897	ArgumentList	 
>898	Callee	jsonRequest . size
>899	MemberAccess	jsonRequest . size
>900	Identifier	size
>901	Identifier	jsonRequest
>902	IdentifierDeclStatement	mValue jsonArgs ;
>903	IdentifierDecl	jsonArgs
>904	Identifier	jsonArgs
>905	IdentifierDeclType	mValue
>906	Condition	commandDecoder != NULL
>907	EqualityExpression	commandDecoder != NULL
>908	Identifier	NULL
>909	Identifier	commandDecoder
>910	IdentifierDeclStatement	CommandDecoder * commandDecoder = commandDecodersMap [ jsonCommand . get_str ( ) ] . get ( ) ;
>911	IdentifierDecl	* commandDecoder = commandDecodersMap [ jsonCommand . get_str ( ) ] . get ( )
>912	AssignmentExpr	* commandDecoder = commandDecodersMap [ jsonCommand . get_str ( ) ] . get ( )
>913	CallExpression	commandDecodersMap [ jsonCommand . get_str ( ) ] . get ( )
>914	ArgumentList	 
>915	Callee	commandDecodersMap [ jsonCommand . get_str ( ) ] . get
>916	MemberAccess	commandDecodersMap [ jsonCommand . get_str ( ) ] . get
>917	Identifier	get
>918	ArrayIndexing	commandDecodersMap [ jsonCommand . get_str ( ) ]
>919	CallExpression	jsonCommand . get_str ( )
>920	ArgumentList	 
>921	Callee	jsonCommand . get_str
>922	MemberAccess	jsonCommand . get_str
>923	Identifier	get_str
>924	Identifier	jsonCommand
>925	Identifier	commandDecodersMap
>926	Identifier	commandDecoder
>927	Identifier	commandDecoder
>928	IdentifierDeclType	CommandDecoder *
>929	IdentifierDeclStatement	mValue & jsonCommand = jsonRequest [ 0 ] ;
>930	IdentifierDecl	& jsonCommand = jsonRequest [ 0 ]
>931	AssignmentExpr	& jsonCommand = jsonRequest [ 0 ]
>932	ArrayIndexing	jsonRequest [ 0 ]
>933	PrimaryExpression	0
>934	Identifier	jsonRequest
>935	Identifier	jsonCommand
>936	Identifier	jsonCommand
>937	IdentifierDeclType	mValue &
>938	IdentifierDeclStatement	mArray & jsonRequest = json . get_array ( ) ;
>939	IdentifierDecl	& jsonRequest = json . get_array ( )
>940	AssignmentExpr	& jsonRequest = json . get_array ( )
>941	CallExpression	json . get_array ( )
>942	ArgumentList	 
>943	Callee	json . get_array
>944	MemberAccess	json . get_array
>945	Identifier	get_array
>946	Identifier	json
>947	Identifier	jsonRequest
>948	Identifier	jsonRequest
>949	IdentifierDeclType	mArray &
>950	ExpressionStatement	read_stream ( is , json )
>951	CallExpression	read_stream ( is , json )
>952	ArgumentList	is
>953	Argument	json
>954	Identifier	json
>955	Argument	is
>956	Identifier	is
>957	Callee	read_stream
>958	Identifier	read_stream
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	json
>961	Identifier	json
>962	IdentifierDeclType	mValue
>963	IdentifierDeclStatement	 
>964	IdentifierDecl	is ( request )
>965	Identifier	request
>966	Identifier	is
>967	IdentifierDeclType	std 
>993	FunctionDef	encode (const WireResponse * response)
>994	ParameterList	const WireResponse * response
>995	Parameter	 
>996	Identifier	response
>997	ParameterType	const WireResponse *
>998	ReturnType	std 
>999	CompoundStatement	 
>1000	ReturnStatement	 
>1001	CallExpression	write_string ( v , false )
>1002	ArgumentList	v
>1003	Argument	false
>1004	Identifier	false
>1005	Argument	v
>1006	Identifier	v
>1007	Callee	write_string
>1008	Identifier	write_string
>1009	IdentifierDeclStatement	 
>1010	IdentifierDecl	v ( jsonOutput )
>1011	Identifier	jsonOutput
>1012	Identifier	v
>1013	IdentifierDeclType	const mValue
>1014	ExpressionStatement	 
>1015	CallExpression	response -> accept ( this )
>1016	ArgumentList	this
>1017	Argument	this
>1018	Identifier	this
>1019	Callee	response -> accept
>1020	PtrMemberAccess	response -> accept
>1021	Identifier	accept
>1022	Identifier	response
>1023	ExpressionStatement	 
>1024	CallExpression	jsonOutput . clear ( )
>1025	ArgumentList	 
>1026	Callee	jsonOutput . clear
>1027	MemberAccess	jsonOutput . clear
>1028	Identifier	clear
>1029	Identifier	jsonOutput
>1039	FunctionDef	visit (const SuccessResponse * response)
>1040	ParameterList	const SuccessResponse * response
>1041	Parameter	 
>1042	Identifier	response
>1043	ParameterType	const SuccessResponse *
>1044	ReturnType	void
>1045	CompoundStatement	 
>1046	ExpressionStatement	 
>1047	CallExpression	success ( )
>1048	ArgumentList	 
>1049	Callee	success
>1050	Identifier	success
>1055	FunctionDef	visit (const FailureResponse * response)
>1056	ParameterList	const FailureResponse * response
>1057	Parameter	 
>1058	Identifier	response
>1059	ParameterType	const FailureResponse *
>1060	ReturnType	void
>1061	CompoundStatement	 
>1062	IfStatement	if ( detailObject . empty ( ) )
>1063	ElseStatement	else
>1064	CompoundStatement	 
>1065	ExpressionStatement	 
>1066	CallExpression	fail ( & detail )
>1067	ArgumentList	& detail
>1068	Argument	& detail
>1069	UnaryOp	& detail
>1070	Identifier	detail
>1071	UnaryOperator	&
>1072	Callee	fail
>1073	Identifier	fail
>1074	IdentifierDeclStatement	 
>1075	IdentifierDecl	detail ( detailObject )
>1076	Identifier	detailObject
>1077	Identifier	detail
>1078	IdentifierDeclType	const mValue
>1079	CompoundStatement	 
>1080	ExpressionStatement	 
>1081	CallExpression	fail ( )
>1082	ArgumentList	 
>1083	Callee	fail
>1084	Identifier	fail
>1085	Condition	 
>1086	CallExpression	detailObject . empty ( )
>1087	ArgumentList	 
>1088	Callee	detailObject . empty
>1089	MemberAccess	detailObject . empty
>1090	Identifier	empty
>1091	Identifier	detailObject
>1092	IfStatement	if ( ! response -> getExceptionType ( ) . empty ( ) )
>1093	CompoundStatement	 
>1094	ExpressionStatement	 
>1095	AssignmentExpr	detailObject [ \"exception\" ] = response -> getExceptionType ( )
>1096	CallExpression	response -> getExceptionType ( )
>1097	ArgumentList	 
>1098	Callee	response -> getExceptionType
>1099	PtrMemberAccess	response -> getExceptionType
>1100	Identifier	getExceptionType
>1101	Identifier	response
>1102	ArrayIndexing	detailObject [ \"exception\" ]
>1103	PrimaryExpression	\"exception\"
>1104	Identifier	detailObject
>1105	Condition	 
>1106	UnaryOp	! response -> getExceptionType ( ) . empty ( )
>1107	CallExpression	response -> getExceptionType ( ) . empty ( )
>1108	ArgumentList	 
>1109	Callee	response -> getExceptionType ( ) . empty
>1110	MemberAccess	response -> getExceptionType ( ) . empty
>1111	Identifier	empty
>1112	CallExpression	response -> getExceptionType ( )
>1113	ArgumentList	 
>1114	Callee	response -> getExceptionType
>1115	PtrMemberAccess	response -> getExceptionType
>1116	Identifier	getExceptionType
>1117	Identifier	response
>1118	UnaryOperator	!
>1119	IfStatement	if ( ! response -> getMessage ( ) . empty ( ) )
>1120	CompoundStatement	 
>1121	ExpressionStatement	 
>1122	AssignmentExpr	detailObject [ \"message\" ] = response -> getMessage ( )
>1123	CallExpression	response -> getMessage ( )
>1124	ArgumentList	 
>1125	Callee	response -> getMessage
>1126	PtrMemberAccess	response -> getMessage
>1127	Identifier	getMessage
>1128	Identifier	response
>1129	ArrayIndexing	detailObject [ \"message\" ]
>1130	PrimaryExpression	\"message\"
>1131	Identifier	detailObject
>1132	Condition	 
>1133	UnaryOp	! response -> getMessage ( ) . empty ( )
>1134	CallExpression	response -> getMessage ( ) . empty ( )
>1135	ArgumentList	 
>1136	Callee	response -> getMessage ( ) . empty
>1137	MemberAccess	response -> getMessage ( ) . empty
>1138	Identifier	empty
>1139	CallExpression	response -> getMessage ( )
>1140	ArgumentList	 
>1141	Callee	response -> getMessage
>1142	PtrMemberAccess	response -> getMessage
>1143	Identifier	getMessage
>1144	Identifier	response
>1145	UnaryOperator	!
>1146	IdentifierDeclStatement	 
>1147	IdentifierDecl	detailObject
>1148	Identifier	detailObject
>1149	IdentifierDeclType	mObject
>1164	FunctionDef	visit (const PendingResponse * response)
>1165	ParameterList	const PendingResponse * response
>1166	Parameter	 
>1167	Identifier	response
>1168	ParameterType	const PendingResponse *
>1169	ReturnType	void
>1170	CompoundStatement	 
>1171	ExpressionStatement	 
>1172	CallExpression	output ( \"pending\" , & jsonReponse )
>1173	ArgumentList	\"pending\"
>1174	Argument	& jsonReponse
>1175	UnaryOp	& jsonReponse
>1176	Identifier	jsonReponse
>1177	UnaryOperator	&
>1178	Argument	\"pending\"
>1179	PrimaryExpression	\"pending\"
>1180	Callee	output
>1181	Identifier	output
>1182	IdentifierDeclStatement	 
>1183	IdentifierDecl	jsonReponse ( response -> getMessage ( ) )
>1184	CallExpression	response -> getMessage ( )
>1185	ArgumentList	 
>1186	Callee	response -> getMessage
>1187	PtrMemberAccess	response -> getMessage
>1188	Identifier	getMessage
>1189	Identifier	response
>1190	Identifier	jsonReponse
>1191	IdentifierDeclType	mValue
>1198	FunctionDef	visit (const StepMatchesResponse * response)
>1199	ParameterList	const StepMatchesResponse * response
>1200	Parameter	 
>1201	Identifier	response
>1202	ParameterType	const StepMatchesResponse *
>1203	ReturnType	void
>1204	CompoundStatement	 
>1205	ExpressionStatement	 
>1206	CallExpression	output ( \"success\" , & jsonReponse )
>1207	ArgumentList	\"success\"
>1208	Argument	& jsonReponse
>1209	UnaryOp	& jsonReponse
>1210	Identifier	jsonReponse
>1211	UnaryOperator	&
>1212	Argument	\"success\"
>1213	PrimaryExpression	\"success\"
>1214	Callee	output
>1215	Identifier	output
>1216	IdentifierDeclStatement	 
>1217	IdentifierDecl	jsonReponse ( jsonMatches )
>1218	Identifier	jsonMatches
>1219	Identifier	jsonReponse
>1220	IdentifierDeclType	mValue
>1221	CompoundStatement	 
>1222	ExpressionStatement	 
>1223	CallExpression	jsonMatches . push_back ( jsonM )
>1224	ArgumentList	jsonM
>1225	Argument	jsonM
>1226	Identifier	jsonM
>1227	Callee	jsonMatches . push_back
>1228	MemberAccess	jsonMatches . push_back
>1229	Identifier	push_back
>1230	Identifier	jsonMatches
>1231	IfStatement	if ( ! m . regexp . empty ( ) )
>1232	CompoundStatement	 
>1233	ExpressionStatement	 
>1234	AssignmentExpr	jsonM [ \"regexp\" ] = m . regexp
>1235	MemberAccess	m . regexp
>1236	Identifier	regexp
>1237	Identifier	m
>1238	ArrayIndexing	jsonM [ \"regexp\" ]
>1239	PrimaryExpression	\"regexp\"
>1240	Identifier	jsonM
>1241	Condition	 
>1242	UnaryOp	! m . regexp . empty ( )
>1243	CallExpression	m . regexp . empty ( )
>1244	ArgumentList	 
>1245	Callee	m . regexp . empty
>1246	MemberAccess	m . regexp . empty
>1247	Identifier	empty
>1248	MemberAccess	m . regexp
>1249	Identifier	regexp
>1250	Identifier	m
>1251	UnaryOperator	!
>1252	IfStatement	if ( ! m . source . empty ( ) )
>1253	CompoundStatement	 
>1254	ExpressionStatement	 
>1255	ExpressionStatement	 
>1256	AssignmentExpr	jsonM [ \"source\" ] = m . source
>1257	MemberAccess	m . source
>1258	Identifier	source
>1259	Identifier	m
>1260	ArrayIndexing	jsonM [ \"source\" ]
>1261	PrimaryExpression	\"source\"
>1262	Identifier	jsonM
>1263	Condition	 
>1264	UnaryOp	! m . source . empty ( )
>1265	CallExpression	m . source . empty ( )
>1266	ArgumentList	 
>1267	Callee	m . source . empty
>1268	MemberAccess	m . source . empty
>1269	Identifier	empty
>1270	MemberAccess	m . source
>1271	Identifier	source
>1272	Identifier	m
>1273	UnaryOperator	!
>1274	ExpressionStatement	 
>1275	AssignmentExpr	jsonM [ \"args\" ] = jsonArgs
>1276	Identifier	jsonArgs
>1277	ArrayIndexing	jsonM [ \"args\" ]
>1278	PrimaryExpression	\"args\"
>1279	Identifier	jsonM
>1280	CompoundStatement	 
>1281	ExpressionStatement	 
>1282	CallExpression	jsonArgs . push_back ( jsonMa )
>1283	ArgumentList	jsonMa
>1284	Argument	jsonMa
>1285	Identifier	jsonMa
>1286	Callee	jsonArgs . push_back
>1287	MemberAccess	jsonArgs . push_back
>1288	Identifier	push_back
>1289	Identifier	jsonArgs
>1290	ExpressionStatement	 
>1291	AssignmentExpr	jsonMa [ \"pos\" ] = ma . position
>1292	MemberAccess	ma . position
>1293	Identifier	position
>1294	Identifier	ma
>1295	ArrayIndexing	jsonMa [ \"pos\" ]
>1296	PrimaryExpression	\"pos\"
>1297	Identifier	jsonMa
>1298	ExpressionStatement	 
>1299	AssignmentExpr	jsonMa [ \"val\" ] = ma . value
>1300	MemberAccess	ma . value
>1301	Identifier	value
>1302	Identifier	ma
>1303	ArrayIndexing	jsonMa [ \"val\" ]
>1304	PrimaryExpression	\"val\"
>1305	Identifier	jsonMa
>1306	IdentifierDeclStatement	 
>1307	IdentifierDecl	jsonMa
>1308	Identifier	jsonMa
>1309	IdentifierDeclType	mObject
>1310	Statement	 
>1311	Statement	 
>1312	Statement	 
>1313	Statement	 
>1314	Statement	 
>1315	Statement	 
>1316	Statement	 
>1317	Statement	 
>1318	Statement	 
>1319	IdentifierDeclStatement	 
>1320	IdentifierDecl	jsonArgs
>1321	Identifier	jsonArgs
>1322	IdentifierDeclType	mArray
>1323	ExpressionStatement	 
>1324	AssignmentExpr	jsonM [ \"id\" ] = m . id
>1325	MemberAccess	m . id
>1326	Identifier	id
>1327	Identifier	m
>1328	ArrayIndexing	jsonM [ \"id\" ]
>1329	PrimaryExpression	\"id\"
>1330	Identifier	jsonM
>1331	IdentifierDeclStatement	 
>1332	IdentifierDecl	jsonM
>1333	Identifier	jsonM
>1334	IdentifierDeclType	mObject
>1335	Statement	 
>1336	Statement	 
>1337	Statement	 
>1338	Statement	 
>1339	Statement	 
>1340	Statement	 
>1341	Statement	 
>1342	Statement	 
>1343	Statement	 
>1344	Statement	 
>1345	Statement	 
>1346	IdentifierDeclStatement	 
>1347	IdentifierDecl	jsonMatches
>1348	Identifier	jsonMatches
>1349	IdentifierDeclType	mArray
>1371	FunctionDef	visit (const SnippetTextResponse * response)
>1372	ParameterList	const SnippetTextResponse * response
>1373	Parameter	 
>1374	Identifier	response
>1375	ParameterType	const SnippetTextResponse *
>1376	ReturnType	void
>1377	CompoundStatement	 
>1378	ExpressionStatement	 
>1379	CallExpression	success ( & jsonReponse )
>1380	ArgumentList	& jsonReponse
>1381	Argument	& jsonReponse
>1382	UnaryOp	& jsonReponse
>1383	Identifier	jsonReponse
>1384	UnaryOperator	&
>1385	Callee	success
>1386	Identifier	success
>1387	IdentifierDeclStatement	 
>1388	IdentifierDecl	jsonReponse ( response -> getStepSnippet ( ) )
>1389	CallExpression	response -> getStepSnippet ( )
>1390	ArgumentList	 
>1391	Callee	response -> getStepSnippet
>1392	PtrMemberAccess	response -> getStepSnippet
>1393	Identifier	getStepSnippet
>1394	Identifier	response
>1395	Identifier	jsonReponse
>1396	IdentifierDeclType	mValue
>1403	FunctionDef	JsonSpiritWireMessageCodec 
>1404	ParameterList	const WireResponse * response
>1405	Parameter	 
>1406	Identifier	response
>1407	ParameterType	const WireResponse *
>1408	ReturnType	const std 
>1409	CompoundStatement	 
>1410	CompoundStatement	 
>1411	ExpressionStatement	 
>1412	CallExpression	WireMessageCodecException ( \"Error decoding wire protocol response\" )
>1413	ArgumentList	\"Error decoding wire protocol response\"
>1414	Argument	\"Error decoding wire protocol response\"
>1415	PrimaryExpression	\"Error decoding wire protocol response\"
>1416	Callee	WireMessageCodecException
>1417	Identifier	WireMessageCodecException
>1418	Statement	 
>1419	Statement	 
>1420	Statement	 
>1421	Statement	 
>1422	Statement	 
>1423	Statement	 
>1424	Statement	 
>1425	BlockStarter	 
>1426	CompoundStatement	 
>1427	ReturnStatement	return encoder . encode ( response ) ;
>1428	CallExpression	encoder . encode ( response )
>1429	ArgumentList	response
>1430	Argument	response
>1431	Identifier	response
>1432	Callee	encoder . encode
>1433	MemberAccess	encoder . encode
>1434	Identifier	encode
>1435	Identifier	encoder
>1436	IdentifierDeclStatement	WireResponseEncoder encoder ;
>1437	IdentifierDecl	encoder
>1438	Identifier	encoder
>1439	IdentifierDeclType	WireResponseEncoder
>1446	FunctionDef	WireProtocolHandler 
>1447	ParameterList	const WireMessageCodec * codec , CukeEngine * engine
>1448	Parameter	 
>1449	Identifier	engine
>1450	ParameterType	CukeEngine *
>1451	Parameter	 
>1452	Identifier	codec
>1453	ParameterType	const WireMessageCodec *
>1454	CompoundStatement	 
>1460	FunctionDef	WireProtocolHandler 
>1461	ParameterList	const std 
>1462	Parameter	 
>1463	Identifier	request
>1464	ParameterType	const std 
>1465	ReturnType	std 
>1466	CompoundStatement	 
>1467	ReturnStatement	 
>1468	Identifier	response
>1469	CompoundStatement	 
>1470	ExpressionStatement	 
>1471	AssignmentExpr	response = \"[\\"fail\\"]\"
>1472	PrimaryExpression	\"[\\"fail\\"]\"
>1473	Identifier	response
>1474	Statement	 
>1475	Statement	 
>1476	Statement	 
>1477	Statement	 
>1478	Statement	 
>1479	Statement	 
>1480	BlockStarter	 
>1481	CompoundStatement	 
>1482	ExpressionStatement	response = codec -> encode ( wireResponse )
>1483	AssignmentExpr	response = codec -> encode ( wireResponse )
>1484	CallExpression	codec -> encode ( wireResponse )
>1485	ArgumentList	wireResponse
>1486	Argument	wireResponse
>1487	Identifier	wireResponse
>1488	Callee	codec -> encode
>1489	PtrMemberAccess	codec -> encode
>1490	Identifier	encode
>1491	Identifier	codec
>1492	Identifier	response
>1493	IdentifierDeclStatement	const WireResponse * wireResponse = command -> run ( engine ) ;
>1494	IdentifierDecl	* wireResponse = command -> run ( engine )
>1495	AssignmentExpr	* wireResponse = command -> run ( engine )
>1496	CallExpression	command -> run ( engine )
>1497	ArgumentList	engine
>1498	Argument	engine
>1499	Identifier	engine
>1500	Callee	command -> run
>1501	PtrMemberAccess	command -> run
>1502	Identifier	run
>1503	Identifier	command
>1504	Identifier	wireResponse
>1505	Identifier	wireResponse
>1506	IdentifierDeclType	const WireResponse *
>1507	IdentifierDeclStatement	const WireCommand * command = codec -> decode ( request ) ;
>1508	IdentifierDecl	* command = codec -> decode ( request )
>1509	AssignmentExpr	* command = codec -> decode ( request )
>1510	CallExpression	codec -> decode ( request )
>1511	ArgumentList	request
>1512	Argument	request
>1513	Identifier	request
>1514	Callee	codec -> decode
>1515	PtrMemberAccess	codec -> decode
>1516	Identifier	decode
>1517	Identifier	codec
>1518	Identifier	command
>1519	Identifier	command
>1520	IdentifierDeclType	const WireCommand *
>1521	IdentifierDeclStatement	 
>1522	IdentifierDecl	response
>1523	Identifier	response
>1524	IdentifierDeclType	std 
<3=9,8,4
<4=5
<5=7,6
<9=10
<10=11
<11=15,12
<12=13
<13=14
<15=16
<16=18,17
<24=32,25
<25=29,26
<26=28,27
<29=31,30
<38=41,40,39
<41=42
<42=43
<48=51,50,49
<51=52
<52=53
<58=64,63,59
<59=60
<60=62,61
<64=65
<65=66
<66=70,67
<67=68
<68=69
<70=71
<71=73,72
<79=84,80
<80=81
<81=83,82
<89=92,91,90
<92=93
<93=94
<99=105,104,100
<100=101
<101=103,102
<105=106
<106=107
<107=111,108
<108=109
<109=110
<111=112
<112=114,113
<120=125,121
<121=122
<122=124,123
<130=133,132,131
<133=134
<134=135
<140=146,145,141
<141=142
<142=144,143
<146=147
<147=148
<148=152,149
<149=150
<150=151
<152=153
<153=155,154
<161=166,162
<162=163
<163=165,164
<171=174,173,172
<174=175
<175=176
<181=187,186,182
<182=183
<183=185,184
<187=188
<188=189
<189=193,190
<190=191
<191=192
<193=194
<194=196,195
<204=210,209,205
<205=206
<206=208,207
<210=299,298,297,296,295,294,293,291,213,211
<211=212
<213=282,214
<214=256,215
<215=243,234,231,216
<216=217
<217=218
<218=227,219
<219=220
<220=221
<221=223,222
<223=224
<224=226,225
<227=228
<228=230,229
<231=233,232
<234=235
<235=242,236
<236=238,237
<238=239
<239=241,240
<243=244
<244=245
<245=255,254,246
<246=253,247
<247=249,248
<249=250
<250=252,251
<256=257
<257=281,280,258
<258=279,259
<259=261,260
<261=262
<262=264,263
<264=266,265
<266=270,267
<267=268
<268=269
<270=271
<271=273,272
<273=275,274
<275=276
<276=278,277
<282=283
<283=290,284
<284=286,285
<286=287
<287=289,288
<291=292
<320=326,325,321
<321=322
<322=324,323
<326=327
<327=328
<328=332,329
<329=330
<330=331
<332=333
<340=346,345,341
<341=342
<342=344,343
<346=347
<347=348
<348=352,349
<349=350
<350=351
<352=353
<360=366,365,361
<361=362
<362=364,363
<366=381,369,367
<367=368
<369=370
<370=380,379,371
<371=373,372
<373=374
<374=376,375
<376=378,377
<381=382
<382=390,389,383
<383=385,384
<385=386
<386=388,387
<399=405,404,400
<400=401
<401=403,402
<405=457,456,455,454,453,452,451,450,448,447,446,445,444,443,442,441,439,427,412,406
<406=407
<407=411,408
<408=410,409
<412=413
<413=425,414
<414=423,419,415
<415=416
<416=418,417
<419=420
<420=422,421
<423=424
<425=426
<427=428
<428=438,437,429
<429=431,430
<431=432
<432=434,433
<434=436,435
<439=440
<448=449
<457=458
<458=466,465,459
<459=461,460
<461=462
<462=464,463
<478=490,489,479
<479=486,483,480
<480=482,481
<483=485,484
<486=488,487
<490=569,491
<491=556,547,544,492
<492=493
<493=535,520,494
<494=495
<495=511,496
<496=497
<497=498
<498=509,499
<499=502,500
<500=501
<502=503
<503=505,504
<505=506
<506=508,507
<509=510
<511=512
<512=514,513
<514=516,515
<516=517
<517=519,518
<520=521
<521=522
<522=531,523
<523=524
<524=525
<525=527,526
<527=528
<528=530,529
<531=532
<532=534,533
<535=536
<536=538,537
<538=540,539
<540=541
<541=543,542
<544=546,545
<547=548
<548=555,549
<549=551,550
<551=552
<552=554,553
<556=557
<557=558
<558=568,567,559
<559=566,560
<560=562,561
<562=563
<563=565,564
<569=570
<570=587,586,571
<571=573,572
<573=574
<574=576,575
<576=578,577
<578=582,579
<579=580
<580=581
<582=583
<583=585,584
<608=617,616,609
<609=613,610
<610=612,611
<613=615,614
<617=744,732,618
<618=728,621,619
<619=620
<621=709,696,622
<622=688,684,681,623
<623=669,624
<624=660,627,625
<625=626
<627=628
<628=652,648,645,629
<629=630
<630=631
<631=640,632
<632=634,633
<634=635
<635=637,636
<637=639,638
<640=642,641
<642=644,643
<645=647,646
<648=649
<649=651,650
<652=653
<653=654
<654=659,658,655
<655=657,656
<660=661
<661=663,662
<663=665,664
<665=666
<666=668,667
<669=670
<670=680,679,671
<671=673,672
<673=674
<674=676,675
<676=678,677
<681=683,682
<684=685
<685=687,686
<688=689
<689=690
<690=695,694,691
<691=693,692
<696=697
<697=705,698
<698=699
<699=700
<700=702,701
<702=704,703
<705=706
<706=708,707
<709=710
<710=727,726,711
<711=725,712
<712=714,713
<714=715
<715=717,716
<717=719,718
<719=720
<720=722,721
<722=724,723
<728=729
<729=731,730
<732=733
<733=743,742,734
<734=741,735
<735=737,736
<737=738
<738=740,739
<744=745
<745=747,746
<778=784,783,779
<779=780
<780=782,781
<784=827,815,803,791,785
<785=786
<786=790,787
<787=789,788
<791=792
<792=802,801,793
<793=795,794
<795=796
<796=798,797
<798=800,799
<803=804
<804=814,813,805
<805=807,806
<807=808
<808=810,809
<810=812,811
<815=816
<816=826,825,817
<817=819,818
<819=820
<820=822,821
<822=824,823
<827=828
<828=836,835,829
<829=831,830
<831=832
<832=834,833
<848=850,849
<854=860,859,855
<855=856
<856=858,857
<860=963,959,872,871,870,869,868,867,866,865,864,863,861
<861=862
<872=873
<873=950,938,929,910,874
<874=906,875
<875=902,885,876
<876=877
<877=881,878
<878=879
<879=880
<881=882
<882=884,883
<885=893,886
<886=887
<887=888
<888=892,889
<889=891,890
<893=894
<894=896,895
<896=898,897
<898=899
<899=901,900
<902=903
<903=905,904
<906=907
<907=909,908
<910=911
<911=928,927,912
<912=926,913
<913=915,914
<915=916
<916=918,917
<918=925,919
<919=921,920
<921=922
<922=924,923
<929=930
<930=937,936,931
<931=935,932
<932=934,933
<938=939
<939=949,948,940
<940=947,941
<941=943,942
<943=944
<944=946,945
<950=951
<951=957,952
<952=955,953
<953=954
<955=956
<957=958
<959=960
<960=962,961
<963=964
<964=967,966,965
<993=999,998,994
<994=995
<995=997,996
<999=1023,1014,1009,1000
<1000=1001
<1001=1007,1002
<1002=1005,1003
<1003=1004
<1005=1006
<1007=1008
<1009=1010
<1010=1013,1012,1011
<1014=1015
<1015=1019,1016
<1016=1017
<1017=1018
<1019=1020
<1020=1022,1021
<1023=1024
<1024=1026,1025
<1026=1027
<1027=1029,1028
<1039=1045,1044,1040
<1040=1041
<1041=1043,1042
<1045=1046
<1046=1047
<1047=1049,1048
<1049=1050
<1055=1061,1060,1056
<1056=1057
<1057=1059,1058
<1061=1146,1119,1092,1062
<1062=1085,1079,1063
<1063=1064
<1064=1074,1065
<1065=1066
<1066=1072,1067
<1067=1068
<1068=1069
<1069=1071,1070
<1072=1073
<1074=1075
<1075=1078,1077,1076
<1079=1080
<1080=1081
<1081=1083,1082
<1083=1084
<1085=1086
<1086=1088,1087
<1088=1089
<1089=1091,1090
<1092=1105,1093
<1093=1094
<1094=1095
<1095=1102,1096
<1096=1098,1097
<1098=1099
<1099=1101,1100
<1102=1104,1103
<1105=1106
<1106=1118,1107
<1107=1109,1108
<1109=1110
<1110=1112,1111
<1112=1114,1113
<1114=1115
<1115=1117,1116
<1119=1132,1120
<1120=1121
<1121=1122
<1122=1129,1123
<1123=1125,1124
<1125=1126
<1126=1128,1127
<1129=1131,1130
<1132=1133
<1133=1145,1134
<1134=1136,1135
<1136=1137
<1137=1139,1138
<1139=1141,1140
<1141=1142
<1142=1144,1143
<1146=1147
<1147=1149,1148
<1164=1170,1169,1165
<1165=1166
<1166=1168,1167
<1170=1182,1171
<1171=1172
<1172=1180,1173
<1173=1178,1174
<1174=1175
<1175=1177,1176
<1178=1179
<1180=1181
<1182=1183
<1183=1191,1190,1184
<1184=1186,1185
<1186=1187
<1187=1189,1188
<1198=1204,1203,1199
<1199=1200
<1200=1202,1201
<1204=1346,1345,1344,1343,1342,1341,1340,1339,1338,1337,1336,1335,1221,1216,1205
<1205=1206
<1206=1214,1207
<1207=1212,1208
<1208=1209
<1209=1211,1210
<1212=1213
<1214=1215
<1216=1217
<1217=1220,1219,1218
<1221=1331,1323,1319,1318,1317,1316,1315,1314,1313,1312,1311,1310,1280,1274,1252,1231,1222
<1222=1223
<1223=1227,1224
<1224=1225
<1225=1226
<1227=1228
<1228=1230,1229
<1231=1241,1232
<1232=1233
<1233=1234
<1234=1238,1235
<1235=1237,1236
<1238=1240,1239
<1241=1242
<1242=1251,1243
<1243=1245,1244
<1245=1246
<1246=1248,1247
<1248=1250,1249
<1252=1263,1253
<1253=1255,1254
<1255=1256
<1256=1260,1257
<1257=1259,1258
<1260=1262,1261
<1263=1264
<1264=1273,1265
<1265=1267,1266
<1267=1268
<1268=1270,1269
<1270=1272,1271
<1274=1275
<1275=1277,1276
<1277=1279,1278
<1280=1306,1298,1290,1281
<1281=1282
<1282=1286,1283
<1283=1284
<1284=1285
<1286=1287
<1287=1289,1288
<1290=1291
<1291=1295,1292
<1292=1294,1293
<1295=1297,1296
<1298=1299
<1299=1303,1300
<1300=1302,1301
<1303=1305,1304
<1306=1307
<1307=1309,1308
<1319=1320
<1320=1322,1321
<1323=1324
<1324=1328,1325
<1325=1327,1326
<1328=1330,1329
<1331=1332
<1332=1334,1333
<1346=1347
<1347=1349,1348
<1371=1377,1376,1372
<1372=1373
<1373=1375,1374
<1377=1387,1378
<1378=1379
<1379=1385,1380
<1380=1381
<1381=1382
<1382=1384,1383
<1385=1386
<1387=1388
<1388=1396,1395,1389
<1389=1391,1390
<1391=1392
<1392=1394,1393
<1403=1409,1408,1404
<1404=1405
<1405=1407,1406
<1409=1425,1424,1423,1422,1421,1420,1419,1410
<1410=1418,1411
<1411=1412
<1412=1416,1413
<1413=1414
<1414=1415
<1416=1417
<1425=1426
<1426=1436,1427
<1427=1428
<1428=1432,1429
<1429=1430
<1430=1431
<1432=1433
<1433=1435,1434
<1436=1437
<1437=1439,1438
<1446=1454,1447
<1447=1451,1448
<1448=1450,1449
<1451=1453,1452
<1460=1466,1465,1461
<1461=1462
<1462=1464,1463
<1466=1521,1480,1479,1478,1477,1476,1475,1474,1469,1467
<1467=1468
<1469=1470
<1470=1471
<1471=1473,1472
<1480=1481
<1481=1507,1493,1482
<1482=1483
<1483=1492,1484
<1484=1488,1485
<1485=1486
<1486=1487
<1488=1489
<1489=1491,1490
<1493=1494
<1494=1506,1505,1495
<1495=1504,1496
<1496=1500,1497
<1497=1498
<1498=1499
<1500=1501
<1501=1503,1502
<1507=1508
<1508=1520,1519,1509
<1509=1518,1510
<1510=1514,1511
<1511=1512
<1512=1513
<1514=1515
<1515=1517,1516
<1521=1522
<1522=1524,1523
