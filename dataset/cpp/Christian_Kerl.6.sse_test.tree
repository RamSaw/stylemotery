>9	FunctionDef	do_reduction (const JacobianWorkspace & j , const Eigen 
>10	ParameterList	const JacobianWorkspace & j , const Eigen 
>11	Parameter	 
>12	Identifier	A
>13	ParameterType	Hessian &
>14	Parameter	 
>15	Identifier	alpha
>16	ParameterType	const Eigen 
>17	Parameter	 
>18	Identifier	j
>19	ParameterType	const JacobianWorkspace &
>20	ReturnType	void
>21	CompoundStatement	 
>22	ForStatement	for ( int idx = 0 ; idx < j . rows ( ) ; idx += Dimension )
>23	CompoundStatement	 
>24	IfStatement	if ( Dimension == 1 )
>25	ElseStatement	else
>26	ExpressionStatement	 
>27	Expression	A += j . block < Dimension , 6 > ( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension , 6 > ( idx , 0 )
>28	Expression	6 > ( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension , 6 > ( idx , 0 )
>29	RelationalExpression	6 > ( idx , 0 )
>30	Expression	idx , 0
>31	PrimaryExpression	0
>32	Identifier	idx
>33	PrimaryExpression	6
>34	RelationalExpression	6 > ( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension
>35	RelationalExpression	( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension
>36	Identifier	Dimension
>37	MultiplicativeExpression	( idx , 0 ) . transpose ( ) * alpha * j . block
>38	MultiplicativeExpression	alpha * j . block
>39	MemberAccess	j . block
>40	Identifier	block
>41	Identifier	j
>42	Identifier	alpha
>43	CallExpression	( idx , 0 ) . transpose ( )
>44	ArgumentList	 
>45	Callee	( idx , 0 ) . transpose
>46	MemberAccess	( idx , 0 ) . transpose
>47	Identifier	transpose
>48	Expression	idx , 0
>49	PrimaryExpression	0
>50	Identifier	idx
>51	PrimaryExpression	6
>52	AssignmentExpr	A += j . block < Dimension
>53	RelationalExpression	j . block < Dimension
>54	Identifier	Dimension
>55	MemberAccess	j . block
>56	Identifier	block
>57	Identifier	j
>58	Identifier	A
>59	ExpressionStatement	 
>60	Expression	A += j . block < Dimension , 6 > ( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension , 6 > ( idx , 0 )
>61	Expression	6 > ( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension , 6 > ( idx , 0 )
>62	RelationalExpression	6 > ( idx , 0 )
>63	Expression	idx , 0
>64	PrimaryExpression	0
>65	Identifier	idx
>66	PrimaryExpression	6
>67	RelationalExpression	6 > ( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension
>68	RelationalExpression	( idx , 0 ) . transpose ( ) * alpha * j . block < Dimension
>69	Identifier	Dimension
>70	MultiplicativeExpression	( idx , 0 ) . transpose ( ) * alpha * j . block
>71	MultiplicativeExpression	alpha * j . block
>72	MemberAccess	j . block
>73	Identifier	block
>74	Identifier	j
>75	Identifier	alpha
>76	CallExpression	( idx , 0 ) . transpose ( )
>77	ArgumentList	 
>78	Callee	( idx , 0 ) . transpose
>79	MemberAccess	( idx , 0 ) . transpose
>80	Identifier	transpose
>81	Expression	idx , 0
>82	PrimaryExpression	0
>83	Identifier	idx
>84	PrimaryExpression	6
>85	AssignmentExpr	A += j . block < Dimension
>86	RelationalExpression	j . block < Dimension
>87	Identifier	Dimension
>88	MemberAccess	j . block
>89	Identifier	block
>90	Identifier	j
>91	Identifier	A
>92	Condition	 
>93	EqualityExpression	Dimension == 1
>94	PrimaryExpression	1
>95	Identifier	Dimension
>96	AssignmentExpr	 
>97	Identifier	Dimension
>98	Identifier	idx
>99	Condition	 
>100	RelationalExpression	idx < j . rows ( )
>101	CallExpression	j . rows ( )
>102	ArgumentList	 
>103	Callee	j . rows
>104	MemberAccess	j . rows
>105	Identifier	rows
>106	Identifier	j
>107	Identifier	idx
>108	ForInit	 
>109	IdentifierDeclStatement	int idx = 0 ;
>110	IdentifierDecl	idx = 0
>111	AssignmentExpr	idx = 0
>112	PrimaryExpression	0
>113	Identifier	idx
>114	Identifier	idx
>115	IdentifierDeclType	int
>116	ExpressionStatement	 
>117	CallExpression	A . setZero ( )
>118	ArgumentList	 
>119	Callee	A . setZero
>120	MemberAccess	A . setZero
>121	Identifier	setZero
>122	Identifier	A
>133	FunctionDef	do_optimized_reduction (const JacobianWorkspace & j , const Eigen 
>134	ParameterList	const JacobianWorkspace & j , const Eigen 
>135	Parameter	 
>136	Identifier	A
>137	ParameterType	Hessian &
>138	Parameter	 
>139	Identifier	alpha
>140	ParameterType	const Eigen 
>141	Parameter	 
>142	Identifier	j
>143	ParameterType	const JacobianWorkspace &
>144	ReturnType	void
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	CallExpression	A_opt . toEigen ( A )
>148	ArgumentList	A
>149	Argument	A
>150	Identifier	A
>151	Callee	A_opt . toEigen
>152	MemberAccess	A_opt . toEigen
>153	Identifier	toEigen
>154	Identifier	A_opt
>155	ForStatement	for ( int idx = 0 ; idx < j . rows ( ) ; idx += Dimension )
>156	CompoundStatement	 
>157	IfStatement	if ( Dimension == 1 )
>158	ElseStatement	else
>159	ExpressionStatement	 
>160	CallExpression	A_opt . rankUpdate ( j . block < 2 , 6 > ( idx , 0 ) , my_alpha )
>161	ArgumentList	j . block < 2
>162	Argument	my_alpha
>163	Identifier	my_alpha
>164	Argument	6 > ( idx , 0 )
>165	RelationalExpression	6 > ( idx , 0 )
>166	Expression	idx , 0
>167	PrimaryExpression	0
>168	Identifier	idx
>169	PrimaryExpression	6
>170	Argument	j . block < 2
>171	RelationalExpression	j . block < 2
>172	PrimaryExpression	2
>173	MemberAccess	j . block
>174	Identifier	block
>175	Identifier	j
>176	Callee	A_opt . rankUpdate
>177	MemberAccess	A_opt . rankUpdate
>178	Identifier	rankUpdate
>179	Identifier	A_opt
>180	ExpressionStatement	 
>181	CallExpression	A_opt . rankUpdate ( j . block < 1 , 6 > ( idx , 0 ) . transpose ( ) , my_alpha ( 0 , 0 ) )
>182	ArgumentList	j . block < 1
>183	Argument	my_alpha ( 0 , 0 )
>184	CallExpression	my_alpha ( 0 , 0 )
>185	ArgumentList	0
>186	Argument	0
>187	PrimaryExpression	0
>188	Argument	0
>189	PrimaryExpression	0
>190	Callee	my_alpha
>191	Identifier	my_alpha
>192	Argument	6 > ( idx , 0 ) . transpose ( )
>193	RelationalExpression	6 > ( idx , 0 ) . transpose ( )
>194	CallExpression	( idx , 0 ) . transpose ( )
>195	ArgumentList	 
>196	Callee	( idx , 0 ) . transpose
>197	MemberAccess	( idx , 0 ) . transpose
>198	Identifier	transpose
>199	Expression	idx , 0
>200	PrimaryExpression	0
>201	Identifier	idx
>202	PrimaryExpression	6
>203	Argument	j . block < 1
>204	RelationalExpression	j . block < 1
>205	PrimaryExpression	1
>206	MemberAccess	j . block
>207	Identifier	block
>208	Identifier	j
>209	Callee	A_opt . rankUpdate
>210	MemberAccess	A_opt . rankUpdate
>211	Identifier	rankUpdate
>212	Identifier	A_opt
>213	Condition	 
>214	EqualityExpression	Dimension == 1
>215	PrimaryExpression	1
>216	Identifier	Dimension
>217	AssignmentExpr	 
>218	Identifier	Dimension
>219	Identifier	idx
>220	Condition	 
>221	RelationalExpression	idx < j . rows ( )
>222	CallExpression	j . rows ( )
>223	ArgumentList	 
>224	Callee	j . rows
>225	MemberAccess	j . rows
>226	Identifier	rows
>227	Identifier	j
>228	Identifier	idx
>229	ForInit	 
>230	IdentifierDeclStatement	int idx = 0 ;
>231	IdentifierDecl	idx = 0
>232	AssignmentExpr	idx = 0
>233	PrimaryExpression	0
>234	Identifier	idx
>235	Identifier	idx
>236	IdentifierDeclType	int
>237	ExpressionStatement	 
>238	Expression	my_alpha . block < Dimension , Dimension > ( 0 , 0 ) = alpha
>239	AssignmentExpr	Dimension > ( 0 , 0 ) = alpha
>240	Identifier	alpha
>241	RelationalExpression	Dimension > ( 0 , 0 )
>242	Expression	0 , 0
>243	PrimaryExpression	0
>244	PrimaryExpression	0
>245	Identifier	Dimension
>246	RelationalExpression	my_alpha . block < Dimension
>247	Identifier	Dimension
>248	MemberAccess	my_alpha . block
>249	Identifier	block
>250	Identifier	my_alpha
>251	IdentifierDeclStatement	 
>252	IdentifierDecl	my_alpha
>253	Identifier	my_alpha
>254	IdentifierDeclType	Eigen 
>255	ExpressionStatement	 
>256	CallExpression	A_opt . setZero ( )
>257	ArgumentList	 
>258	Callee	A_opt . setZero
>259	MemberAccess	A_opt . setZero
>260	Identifier	setZero
>261	Identifier	A_opt
>262	IdentifierDeclStatement	 
>263	IdentifierDecl	A_opt
>264	Identifier	A_opt
>265	IdentifierDeclType	dvo 
>279	FunctionDef	main (int argc , char * * argv)
>280	ParameterList	int argc , char * * argv
>281	Parameter	 
>282	Identifier	argv
>283	ParameterType	char * *
>284	Parameter	 
>285	Identifier	argc
>286	ParameterType	int
>287	ReturnType	int
>288	CompoundStatement	 
>289	ForStatement	for ( int idx = 0 ; idx < 1e3 ; idx ++ )
>290	CompoundStatement	 
>291	ExpressionStatement	 
>292	CallExpression	w2 . stopAndPrint ( )
>293	ArgumentList	 
>294	Callee	w2 . stopAndPrint
>295	MemberAccess	w2 . stopAndPrint
>296	Identifier	stopAndPrint
>297	Identifier	w2
>298	ExpressionStatement	 
>299	CallExpression	do_optimized_reduction ( J , alpha , A2 )
>300	ArgumentList	J
>301	Argument	A2
>302	Identifier	A2
>303	Argument	alpha
>304	Identifier	alpha
>305	Argument	J
>306	Identifier	J
>307	Callee	do_optimized_reduction
>308	Identifier	do_optimized_reduction
>309	ExpressionStatement	 
>310	CallExpression	w2 . start ( )
>311	ArgumentList	 
>312	Callee	w2 . start
>313	MemberAccess	w2 . start
>314	Identifier	start
>315	Identifier	w2
>316	IncDecOp	 
>317	IncDec	++
>318	Identifier	idx
>319	Condition	 
>320	RelationalExpression	idx < 1e3
>321	PrimaryExpression	1e3
>322	Identifier	idx
>323	ForInit	 
>324	IdentifierDeclStatement	int idx = 0 ;
>325	IdentifierDecl	idx = 0
>326	AssignmentExpr	idx = 0
>327	PrimaryExpression	0
>328	Identifier	idx
>329	Identifier	idx
>330	IdentifierDeclType	int
>331	ForStatement	for ( int idx = 0 ; idx < 1e2 ; idx ++ )
>332	ExpressionStatement	 
>333	CallExpression	do_optimized_reduction ( J , alpha , A2 )
>334	ArgumentList	J
>335	Argument	A2
>336	Identifier	A2
>337	Argument	alpha
>338	Identifier	alpha
>339	Argument	J
>340	Identifier	J
>341	Callee	do_optimized_reduction
>342	Identifier	do_optimized_reduction
>343	IncDecOp	 
>344	IncDec	++
>345	Identifier	idx
>346	Condition	 
>347	RelationalExpression	idx < 1e2
>348	PrimaryExpression	1e2
>349	Identifier	idx
>350	ForInit	 
>351	IdentifierDeclStatement	int idx = 0 ;
>352	IdentifierDecl	idx = 0
>353	AssignmentExpr	idx = 0
>354	PrimaryExpression	0
>355	Identifier	idx
>356	Identifier	idx
>357	IdentifierDeclType	int
>358	ForStatement	for ( int idx = 0 ; idx < 1e3 ; idx ++ )
>359	CompoundStatement	 
>360	ExpressionStatement	 
>361	CallExpression	w1 . stopAndPrint ( )
>362	ArgumentList	 
>363	Callee	w1 . stopAndPrint
>364	MemberAccess	w1 . stopAndPrint
>365	Identifier	stopAndPrint
>366	Identifier	w1
>367	ExpressionStatement	 
>368	CallExpression	do_reduction ( J , alpha , A1 )
>369	ArgumentList	J
>370	Argument	A1
>371	Identifier	A1
>372	Argument	alpha
>373	Identifier	alpha
>374	Argument	J
>375	Identifier	J
>376	Callee	do_reduction
>377	Identifier	do_reduction
>378	ExpressionStatement	 
>379	CallExpression	w1 . start ( )
>380	ArgumentList	 
>381	Callee	w1 . start
>382	MemberAccess	w1 . start
>383	Identifier	start
>384	Identifier	w1
>385	IncDecOp	 
>386	IncDec	++
>387	Identifier	idx
>388	Condition	 
>389	RelationalExpression	idx < 1e3
>390	PrimaryExpression	1e3
>391	Identifier	idx
>392	ForInit	 
>393	IdentifierDeclStatement	int idx = 0 ;
>394	IdentifierDecl	idx = 0
>395	AssignmentExpr	idx = 0
>396	PrimaryExpression	0
>397	Identifier	idx
>398	Identifier	idx
>399	IdentifierDeclType	int
>400	ForStatement	for ( int idx = 0 ; idx < 1e2 ; idx ++ )
>401	ExpressionStatement	 
>402	CallExpression	do_reduction ( J , alpha , A1 )
>403	ArgumentList	J
>404	Argument	A1
>405	Identifier	A1
>406	Argument	alpha
>407	Identifier	alpha
>408	Argument	J
>409	Identifier	J
>410	Callee	do_reduction
>411	Identifier	do_reduction
>412	IncDecOp	 
>413	IncDec	++
>414	Identifier	idx
>415	Condition	 
>416	RelationalExpression	idx < 1e2
>417	PrimaryExpression	1e2
>418	Identifier	idx
>419	ForInit	 
>420	IdentifierDeclStatement	int idx = 0 ;
>421	IdentifierDecl	idx = 0
>422	AssignmentExpr	idx = 0
>423	PrimaryExpression	0
>424	Identifier	idx
>425	Identifier	idx
>426	IdentifierDeclType	int
>427	IdentifierDeclStatement	 
>428	IdentifierDecl	w2 ( \"optimized\" , int ( 1e3 * 0.5 ) )
>429	Expression	\"optimized\" , int ( 1e3 * 0.5 )
>430	CallExpression	int ( 1e3 * 0.5 )
>431	ArgumentList	1e3 * 0.5
>432	Argument	1e3 * 0.5
>433	MultiplicativeExpression	1e3 * 0.5
>434	PrimaryExpression	0.5
>435	PrimaryExpression	1e3
>436	Callee	int
>437	Identifier	int
>438	PrimaryExpression	\"optimized\"
>439	Identifier	w2
>440	IdentifierDeclType	dvo 
>441	IdentifierDecl	w1 ( \"unoptimized\" , int ( 1e3 * 0.5 ) )
>442	Expression	\"unoptimized\" , int ( 1e3 * 0.5 )
>443	CallExpression	int ( 1e3 * 0.5 )
>444	ArgumentList	1e3 * 0.5
>445	Argument	1e3 * 0.5
>446	MultiplicativeExpression	1e3 * 0.5
>447	PrimaryExpression	0.5
>448	PrimaryExpression	1e3
>449	Callee	int
>450	Identifier	int
>451	PrimaryExpression	\"unoptimized\"
>452	Identifier	w1
>453	IdentifierDeclType	dvo 
>454	ExpressionStatement	 
>455	CallExpression	J . setRandom ( )
>456	ArgumentList	 
>457	Callee	J . setRandom
>458	MemberAccess	J . setRandom
>459	Identifier	setRandom
>460	Identifier	J
>461	ExpressionStatement	 
>462	CallExpression	J . resize ( 640 * 480 * Dimension , Eigen 
>463	ArgumentList	640 * 480 * Dimension
>464	Argument	Eigen 
>465	Identifier	Eigen 
>466	Argument	640 * 480 * Dimension
>467	MultiplicativeExpression	640 * 480 * Dimension
>468	MultiplicativeExpression	480 * Dimension
>469	Identifier	Dimension
>470	PrimaryExpression	480
>471	PrimaryExpression	640
>472	Callee	J . resize
>473	MemberAccess	J . resize
>474	Identifier	resize
>475	Identifier	J
>476	IdentifierDeclStatement	 
>477	IdentifierDecl	J
>478	Identifier	J
>479	IdentifierDeclType	JacobianWorkspace
>480	IfStatement	if ( Dimension > 1 )
>481	ExpressionStatement	 
>482	AssignmentExpr	alpha ( 0 , 1 ) = alpha ( 1 , 0 )
>483	CallExpression	alpha ( 1 , 0 )
>484	ArgumentList	1
>485	Argument	0
>486	PrimaryExpression	0
>487	Argument	1
>488	PrimaryExpression	1
>489	Callee	alpha
>490	Identifier	alpha
>491	CallExpression	alpha ( 0 , 1 )
>492	ArgumentList	0
>493	Argument	1
>494	PrimaryExpression	1
>495	Argument	0
>496	PrimaryExpression	0
>497	Callee	alpha
>498	Identifier	alpha
>499	Condition	 
>500	RelationalExpression	Dimension > 1
>501	PrimaryExpression	1
>502	Identifier	Dimension
>503	ExpressionStatement	 
>504	CallExpression	alpha . setRandom ( )
>505	ArgumentList	 
>506	Callee	alpha . setRandom
>507	MemberAccess	alpha . setRandom
>508	Identifier	setRandom
>509	Identifier	alpha
>510	IdentifierDeclStatement	 
>511	IdentifierDecl	alpha
>512	Identifier	alpha
>513	IdentifierDeclType	Eigen 
>514	IdentifierDeclStatement	 
>515	IdentifierDecl	A2
>516	Identifier	A2
>517	IdentifierDeclType	Hessian
>518	IdentifierDecl	A1
>519	Identifier	A1
>520	IdentifierDeclType	Hessian
<9=21,20,10
<10=17,14,11
<11=13,12
<14=16,15
<17=19,18
<21=116,22
<22=108,99,96,23
<23=24
<24=92,59,25
<25=26
<26=27
<27=52,28
<28=34,29
<29=33,30
<30=32,31
<34=51,35
<35=37,36
<37=43,38
<38=42,39
<39=41,40
<43=45,44
<45=46
<46=48,47
<48=50,49
<52=58,53
<53=55,54
<55=57,56
<59=60
<60=85,61
<61=67,62
<62=66,63
<63=65,64
<67=84,68
<68=70,69
<70=76,71
<71=75,72
<72=74,73
<76=78,77
<78=79
<79=81,80
<81=83,82
<85=91,86
<86=88,87
<88=90,89
<92=93
<93=95,94
<96=98,97
<99=100
<100=107,101
<101=103,102
<103=104
<104=106,105
<108=109
<109=110
<110=115,114,111
<111=113,112
<116=117
<117=119,118
<119=120
<120=122,121
<133=145,144,134
<134=141,138,135
<135=137,136
<138=140,139
<141=143,142
<145=262,255,251,237,155,146
<146=147
<147=151,148
<148=149
<149=150
<151=152
<152=154,153
<155=229,220,217,156
<156=157
<157=213,180,158
<158=159
<159=160
<160=176,161
<161=170,164,162
<162=163
<164=165
<165=169,166
<166=168,167
<170=171
<171=173,172
<173=175,174
<176=177
<177=179,178
<180=181
<181=209,182
<182=203,192,183
<183=184
<184=190,185
<185=188,186
<186=187
<188=189
<190=191
<192=193
<193=202,194
<194=196,195
<196=197
<197=199,198
<199=201,200
<203=204
<204=206,205
<206=208,207
<209=210
<210=212,211
<213=214
<214=216,215
<217=219,218
<220=221
<221=228,222
<222=224,223
<224=225
<225=227,226
<229=230
<230=231
<231=236,235,232
<232=234,233
<237=238
<238=246,239
<239=241,240
<241=245,242
<242=244,243
<246=248,247
<248=250,249
<251=252
<252=254,253
<255=256
<256=258,257
<258=259
<259=261,260
<262=263
<263=265,264
<279=288,287,280
<280=284,281
<281=283,282
<284=286,285
<288=514,510,503,480,476,461,454,427,400,358,331,289
<289=323,319,316,290
<290=309,298,291
<291=292
<292=294,293
<294=295
<295=297,296
<298=299
<299=307,300
<300=305,303,301
<301=302
<303=304
<305=306
<307=308
<309=310
<310=312,311
<312=313
<313=315,314
<316=318,317
<319=320
<320=322,321
<323=324
<324=325
<325=330,329,326
<326=328,327
<331=350,346,343,332
<332=333
<333=341,334
<334=339,337,335
<335=336
<337=338
<339=340
<341=342
<343=345,344
<346=347
<347=349,348
<350=351
<351=352
<352=357,356,353
<353=355,354
<358=392,388,385,359
<359=378,367,360
<360=361
<361=363,362
<363=364
<364=366,365
<367=368
<368=376,369
<369=374,372,370
<370=371
<372=373
<374=375
<376=377
<378=379
<379=381,380
<381=382
<382=384,383
<385=387,386
<388=389
<389=391,390
<392=393
<393=394
<394=399,398,395
<395=397,396
<400=419,415,412,401
<401=402
<402=410,403
<403=408,406,404
<404=405
<406=407
<408=409
<410=411
<412=414,413
<415=416
<416=418,417
<419=420
<420=421
<421=426,425,422
<422=424,423
<427=441,428
<428=440,439,429
<429=438,430
<430=436,431
<431=432
<432=433
<433=435,434
<436=437
<441=453,452,442
<442=451,443
<443=449,444
<444=445
<445=446
<446=448,447
<449=450
<454=455
<455=457,456
<457=458
<458=460,459
<461=462
<462=472,463
<463=466,464
<464=465
<466=467
<467=471,468
<468=470,469
<472=473
<473=475,474
<476=477
<477=479,478
<480=499,481
<481=482
<482=491,483
<483=489,484
<484=487,485
<485=486
<487=488
<489=490
<491=497,492
<492=495,493
<493=494
<495=496
<497=498
<499=500
<500=502,501
<503=504
<504=506,505
<506=507
<507=509,508
<510=511
<511=513,512
<514=518,515
<515=517,516
<518=520,519
