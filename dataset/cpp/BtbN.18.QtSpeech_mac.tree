>8	FunctionDef	Private ()
>9	ParameterList	 
>10	CompoundStatement	 
>66	FunctionDef	QtSpeech 
>67	ParameterList	 
>68	CompoundStatement	 
>69	ExpressionStatement	 
>70	Identifier	d
>71	Statement	 
>72	ExpressionStatement	 
>73	CallExpression	d -> ptrs . removeAll ( this )
>74	ArgumentList	this
>75	Argument	this
>76	Identifier	this
>77	Callee	d -> ptrs . removeAll
>78	MemberAccess	d -> ptrs . removeAll
>79	Identifier	removeAll
>80	PtrMemberAccess	d -> ptrs
>81	Identifier	ptrs
>82	Identifier	d
>83	ExpressionStatement	 
>84	CallExpression	DisposeSpeechDoneUPP ( d -> doneCall )
>85	ArgumentList	d -> doneCall
>86	Argument	d -> doneCall
>87	PtrMemberAccess	d -> doneCall
>88	Identifier	doneCall
>89	Identifier	d
>90	Callee	DisposeSpeechDoneUPP
>91	Identifier	DisposeSpeechDoneUPP
>92	ExpressionStatement	 
>93	CallExpression	SysCall ( DisposeSpeechChannel ( d -> channel ) , CloseError )
>94	ArgumentList	DisposeSpeechChannel ( d -> channel )
>95	Argument	CloseError
>96	Identifier	CloseError
>97	Argument	DisposeSpeechChannel ( d -> channel )
>98	CallExpression	DisposeSpeechChannel ( d -> channel )
>99	ArgumentList	d -> channel
>100	Argument	d -> channel
>101	PtrMemberAccess	d -> channel
>102	Identifier	channel
>103	Identifier	d
>104	Callee	DisposeSpeechChannel
>105	Identifier	DisposeSpeechChannel
>106	Callee	SysCall
>107	Identifier	SysCall
>108	ExpressionStatement	 
>109	CallExpression	SysCall ( StopSpeech ( d -> channel ) , CloseError )
>110	ArgumentList	StopSpeech ( d -> channel )
>111	Argument	CloseError
>112	Identifier	CloseError
>113	Argument	StopSpeech ( d -> channel )
>114	CallExpression	StopSpeech ( d -> channel )
>115	ArgumentList	d -> channel
>116	Argument	d -> channel
>117	PtrMemberAccess	d -> channel
>118	Identifier	channel
>119	Identifier	d
>120	Callee	StopSpeech
>121	Identifier	StopSpeech
>122	Callee	SysCall
>123	Identifier	SysCall
>124	IfStatement	if ( ! d -> channel )
>125	CompoundStatement	 
>126	ExpressionStatement	 
>127	CallExpression	CloseError ( Where + \"No speech channel to close\" )
>128	ArgumentList	Where + \"No speech channel to close\"
>129	Argument	Where + \"No speech channel to close\"
>130	AdditiveExpression	Where + \"No speech channel to close\"
>131	PrimaryExpression	\"No speech channel to close\"
>132	Identifier	Where
>133	Callee	CloseError
>134	Identifier	CloseError
>135	Statement	 
>136	Condition	 
>137	UnaryOp	! d -> channel
>138	PtrMemberAccess	d -> channel
>139	Identifier	channel
>140	Identifier	d
>141	UnaryOperator	!
>155	FunctionDef	QtSpeech 
>156	ParameterList	 
>157	ReturnType	const QtSpeech 
>158	CompoundStatement	 
>159	ReturnStatement	 
>160	PtrMemberAccess	d -> name
>161	Identifier	name
>162	Identifier	d
>169	FunctionDef	QtSpeech 
>170	ParameterList	 
>171	ReturnType	QtSpeech 
>172	CompoundStatement	 
>173	ReturnStatement	 
>174	Identifier	vs
>175	ForStatement	for ( int i = 1 ; i <= count ; i ++ )
>176	CompoundStatement	 
>177	ExpressionStatement	 
>178	ShiftExpression	vs << vname
>179	Identifier	vname
>180	Identifier	vs
>181	IdentifierDeclStatement	 
>182	IdentifierDecl	vname = { Private 
>183	AssignmentExpr	vname = { Private 
>184	InitializerList	Private 
>185	Identifier	name
>186	CallExpression	Private 
>187	ArgumentList	voice . id
>188	Argument	voice . id
>189	MemberAccess	voice . id
>190	Identifier	id
>191	Identifier	voice
>192	Callee	Private 
>193	MemberAccess	Private 
>194	Identifier	arg
>195	Identifier	Private 
>196	Identifier	vname
>197	Identifier	vname
>198	IdentifierDeclType	VoiceName
>199	IdentifierDeclStatement	 
>200	IdentifierDecl	name = QString 
>201	AssignmentExpr	name = QString 
>202	CallExpression	QString 
>203	ArgumentList	( const char * ) ( info . name + 1 )
>204	Argument	int ( info . name [ 0 ] )
>205	CallExpression	int ( info . name [ 0 ] )
>206	ArgumentList	info . name [ 0 ]
>207	Argument	info . name [ 0 ]
>208	ArrayIndexing	info . name [ 0 ]
>209	PrimaryExpression	0
>210	MemberAccess	info . name
>211	Identifier	name
>212	Identifier	info
>213	Callee	int
>214	Identifier	int
>215	Argument	( const char * ) ( info . name + 1 )
>216	CastExpression	( const char * ) ( info . name + 1 )
>217	AdditiveExpression	info . name + 1
>218	PrimaryExpression	1
>219	MemberAccess	info . name
>220	Identifier	name
>221	Identifier	info
>222	CastTarget	const char *
>223	Callee	QString 
>224	Identifier	QString 
>225	Identifier	name
>226	Identifier	name
>227	IdentifierDeclType	QString
>228	ExpressionStatement	 
>229	CallExpression	SysCall ( GetVoiceDescription ( & voice , & info , sizeof ( VoiceDescription ) ) , LogicError )
>230	ArgumentList	GetVoiceDescription ( & voice , & info , sizeof ( VoiceDescription ) )
>231	Argument	LogicError
>232	Identifier	LogicError
>233	Argument	GetVoiceDescription ( & voice , & info , sizeof ( VoiceDescription ) )
>234	CallExpression	GetVoiceDescription ( & voice , & info , sizeof ( VoiceDescription ) )
>235	ArgumentList	& voice
>236	Argument	sizeof ( VoiceDescription )
>237	SizeofExpr	sizeof ( VoiceDescription )
>238	SizeofOperand	VoiceDescription
>239	Sizeof	sizeof
>240	Argument	& info
>241	UnaryOp	& info
>242	Identifier	info
>243	UnaryOperator	&
>244	Argument	& voice
>245	UnaryOp	& voice
>246	Identifier	voice
>247	UnaryOperator	&
>248	Callee	GetVoiceDescription
>249	Identifier	GetVoiceDescription
>250	Callee	SysCall
>251	Identifier	SysCall
>252	ExpressionStatement	 
>253	CallExpression	SysCall ( GetIndVoice ( i , & voice ) , LogicError )
>254	ArgumentList	GetIndVoice ( i , & voice )
>255	Argument	LogicError
>256	Identifier	LogicError
>257	Argument	GetIndVoice ( i , & voice )
>258	CallExpression	GetIndVoice ( i , & voice )
>259	ArgumentList	i
>260	Argument	& voice
>261	UnaryOp	& voice
>262	Identifier	voice
>263	UnaryOperator	&
>264	Argument	i
>265	Identifier	i
>266	Callee	GetIndVoice
>267	Identifier	GetIndVoice
>268	Callee	SysCall
>269	Identifier	SysCall
>270	IdentifierDeclStatement	 
>271	IdentifierDecl	info
>272	Identifier	info
>273	IdentifierDeclType	VoiceDescription
>274	IdentifierDeclStatement	 
>275	IdentifierDecl	voice
>276	Identifier	voice
>277	IdentifierDeclType	VoiceSpec
>278	IncDecOp	 
>279	IncDec	++
>280	Identifier	i
>281	Condition	 
>282	RelationalExpression	i <= count
>283	Identifier	count
>284	Identifier	i
>285	ForInit	 
>286	IdentifierDeclStatement	int i = 1 ;
>287	IdentifierDecl	i = 1
>288	AssignmentExpr	i = 1
>289	PrimaryExpression	1
>290	Identifier	i
>291	Identifier	i
>292	IdentifierDeclType	int
>293	ExpressionStatement	 
>294	CallExpression	SysCall ( GetVoiceDescription ( NULL , & desc , sizeof ( VoiceDescription ) ) , LogicError )
>295	ArgumentList	GetVoiceDescription ( NULL , & desc , sizeof ( VoiceDescription ) )
>296	Argument	LogicError
>297	Identifier	LogicError
>298	Argument	GetVoiceDescription ( NULL , & desc , sizeof ( VoiceDescription ) )
>299	CallExpression	GetVoiceDescription ( NULL , & desc , sizeof ( VoiceDescription ) )
>300	ArgumentList	NULL
>301	Argument	sizeof ( VoiceDescription )
>302	SizeofExpr	sizeof ( VoiceDescription )
>303	SizeofOperand	VoiceDescription
>304	Sizeof	sizeof
>305	Argument	& desc
>306	UnaryOp	& desc
>307	Identifier	desc
>308	UnaryOperator	&
>309	Argument	NULL
>310	Identifier	NULL
>311	Callee	GetVoiceDescription
>312	Identifier	GetVoiceDescription
>313	Callee	SysCall
>314	Identifier	SysCall
>315	ExpressionStatement	 
>316	CallExpression	SysCall ( CountVoices ( & count ) , LogicError )
>317	ArgumentList	CountVoices ( & count )
>318	Argument	LogicError
>319	Identifier	LogicError
>320	Argument	CountVoices ( & count )
>321	CallExpression	CountVoices ( & count )
>322	ArgumentList	& count
>323	Argument	& count
>324	UnaryOp	& count
>325	Identifier	count
>326	UnaryOperator	&
>327	Callee	CountVoices
>328	Identifier	CountVoices
>329	Callee	SysCall
>330	Identifier	SysCall
>331	IdentifierDeclStatement	 
>332	IdentifierDecl	desc
>333	Identifier	desc
>334	IdentifierDeclType	VoiceDescription
>335	IdentifierDeclStatement	 
>336	IdentifierDecl	vs
>337	Identifier	vs
>338	IdentifierDeclType	VoiceNames
>339	IdentifierDeclStatement	 
>340	IdentifierDecl	count
>341	Identifier	count
>342	IdentifierDeclType	SInt16
>371	FunctionDef	QtSpeech 
>372	ParameterList	QString text
>373	Parameter	 
>374	Identifier	text
>375	ParameterType	QString
>376	ReturnType	void
>377	CompoundStatement	 
>378	ExpressionStatement	 
>379	CallExpression	tell ( text , 0L , 0L )
>380	ArgumentList	text
>381	Argument	0L
>382	PrimaryExpression	0L
>383	Argument	0L
>384	PrimaryExpression	0L
>385	Argument	text
>386	Identifier	text
>387	Callee	tell
>388	Identifier	tell
>393	FunctionDef	QtSpeech 
>394	ParameterList	QString text , QObject * obj , const char * slot
>395	Parameter	 
>396	Identifier	slot
>397	ParameterType	const char *
>398	Parameter	 
>399	Identifier	obj
>400	ParameterType	QObject *
>401	Parameter	 
>402	Identifier	text
>403	ParameterType	QString
>404	ReturnType	void
>405	CompoundStatement	 
>406	IfStatement	if ( ok != noErr )
>407	CompoundStatement	 
>408	ExpressionStatement	 
>409	CallExpression	LogicError ( Where + \"SpeakCFString()\" )
>410	ArgumentList	Where + \"SpeakCFString()\"
>411	Argument	Where + \"SpeakCFString()\"
>412	AdditiveExpression	Where + \"SpeakCFString()\"
>413	PrimaryExpression	\"SpeakCFString()\"
>414	Identifier	Where
>415	Callee	LogicError
>416	Identifier	LogicError
>417	Statement	 
>418	Condition	 
>419	EqualityExpression	ok != noErr
>420	Identifier	noErr
>421	Identifier	ok
>422	ExpressionStatement	 
>423	CallExpression	CFRelease ( cf_text )
>424	ArgumentList	cf_text
>425	Argument	cf_text
>426	Identifier	cf_text
>427	Callee	CFRelease
>428	Identifier	CFRelease
>429	IdentifierDeclStatement	 
>430	IdentifierDecl	ok = SpeakCFString ( d -> channel , cf_text , NULL )
>431	AssignmentExpr	ok = SpeakCFString ( d -> channel , cf_text , NULL )
>432	CallExpression	SpeakCFString ( d -> channel , cf_text , NULL )
>433	ArgumentList	d -> channel
>434	Argument	NULL
>435	Identifier	NULL
>436	Argument	cf_text
>437	Identifier	cf_text
>438	Argument	d -> channel
>439	PtrMemberAccess	d -> channel
>440	Identifier	channel
>441	Identifier	d
>442	Callee	SpeakCFString
>443	Identifier	SpeakCFString
>444	Identifier	ok
>445	Identifier	ok
>446	IdentifierDeclType	OSErr
>447	ExpressionStatement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	IfStatement	if ( obj && slot )
>476	CompoundStatement	 
>477	ExpressionStatement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Condition	 
>501	AndExpression	obj && slot
>502	Identifier	slot
>503	Identifier	obj
>504	ExpressionStatement	 
>505	AssignmentExpr	d -> onFinishSlot = slot
>506	Identifier	slot
>507	PtrMemberAccess	d -> onFinishSlot
>508	Identifier	onFinishSlot
>509	Identifier	d
>510	ExpressionStatement	 
>511	AssignmentExpr	d -> onFinishObj = obj
>512	Identifier	obj
>513	PtrMemberAccess	d -> onFinishObj
>514	Identifier	onFinishObj
>515	Identifier	d
>533	FunctionDef	QtSpeech 
>534	ParameterList	QString text
>535	Parameter	 
>536	Identifier	text
>537	ParameterType	QString
>538	ReturnType	void
>539	CompoundStatement	 
>540	ExpressionStatement	 
>541	CallExpression	el . exec ( )
>542	ArgumentList	 
>543	Callee	el . exec
>544	MemberAccess	el . exec
>545	Identifier	exec
>546	Identifier	el
>547	ExpressionStatement	 
>548	AssignmentExpr	d -> waitEventLoop = & el
>549	UnaryOp	& el
>550	Identifier	el
>551	UnaryOperator	&
>552	PtrMemberAccess	d -> waitEventLoop
>553	Identifier	waitEventLoop
>554	Identifier	d
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	el
>557	Identifier	el
>558	IdentifierDeclType	QEventLoop
>559	ExpressionStatement	 
>560	CallExpression	tell ( text )
>561	ArgumentList	text
>562	Argument	text
>563	Identifier	text
>564	Callee	tell
>565	Identifier	tell
>566	ExpressionStatement	 
>567	AssignmentExpr	d -> isWaitingInLoop = true
>568	Identifier	true
>569	PtrMemberAccess	d -> isWaitingInLoop
>570	Identifier	isWaitingInLoop
>571	Identifier	d
>572	IfStatement	if ( d -> isWaitingInLoop )
>573	CompoundStatement	 
>574	ExpressionStatement	 
>575	CallExpression	LogicError ( Where + \"Already in process of saying something\" )
>576	ArgumentList	Where + \"Already in process of saying something\"
>577	Argument	Where + \"Already in process of saying something\"
>578	AdditiveExpression	Where + \"Already in process of saying something\"
>579	PrimaryExpression	\"Already in process of saying something\"
>580	Identifier	Where
>581	Callee	LogicError
>582	Identifier	LogicError
>583	Statement	 
>584	Condition	 
>585	PtrMemberAccess	d -> isWaitingInLoop
>586	Identifier	isWaitingInLoop
>587	Identifier	d
>600	FunctionDef	QtSpeech 
>601	ParameterList	SpeechChannel chan , SpeechDoneUPP_ARG2 refCon
>602	Parameter	 
>603	Identifier	refCon
>604	ParameterType	SpeechDoneUPP_ARG2
>605	Parameter	 
>606	Identifier	chan
>607	ParameterType	SpeechChannel
>608	ReturnType	void
>609	CompoundStatement	 
>610	CompoundStatement	 
>611	IfStatement	if ( c && c -> d -> channel == chan )
>612	CompoundStatement	 
>613	BreakStatement	 
>614	IfStatement	if ( c -> d -> isWaitingInLoop )
>615	CompoundStatement	 
>616	IfStatement	if ( c -> d -> waitEventLoop )
>617	CompoundStatement	 
>618	ExpressionStatement	 
>619	CallExpression	c -> d -> waitEventLoop -> quit ( )
>620	ArgumentList	 
>621	Callee	c -> d -> waitEventLoop -> quit
>622	PtrMemberAccess	c -> d -> waitEventLoop -> quit
>623	Identifier	quit
>624	PtrMemberAccess	c -> d -> waitEventLoop
>625	Identifier	waitEventLoop
>626	PtrMemberAccess	c -> d
>627	Identifier	d
>628	Identifier	c
>629	Condition	 
>630	PtrMemberAccess	c -> d -> waitEventLoop
>631	Identifier	waitEventLoop
>632	PtrMemberAccess	c -> d
>633	Identifier	d
>634	Identifier	c
>635	ExpressionStatement	 
>636	AssignmentExpr	c -> d -> isWaitingInLoop = false
>637	Identifier	false
>638	PtrMemberAccess	c -> d -> isWaitingInLoop
>639	Identifier	isWaitingInLoop
>640	PtrMemberAccess	c -> d
>641	Identifier	d
>642	Identifier	c
>643	Condition	 
>644	PtrMemberAccess	c -> d -> isWaitingInLoop
>645	Identifier	isWaitingInLoop
>646	PtrMemberAccess	c -> d
>647	Identifier	d
>648	Identifier	c
>649	IfStatement	if ( c -> d -> onFinishObj && c -> d -> onFinishSlot )
>650	CompoundStatement	 
>651	ExpressionStatement	 
>652	AssignmentExpr	c -> d -> onFinishObj = 0L
>653	PrimaryExpression	0L
>654	PtrMemberAccess	c -> d -> onFinishObj
>655	Identifier	onFinishObj
>656	PtrMemberAccess	c -> d
>657	Identifier	d
>658	Identifier	c
>659	ExpressionStatement	 
>660	AssignmentExpr	c -> d -> onFinishSlot = 0L
>661	PrimaryExpression	0L
>662	PtrMemberAccess	c -> d -> onFinishSlot
>663	Identifier	onFinishSlot
>664	PtrMemberAccess	c -> d
>665	Identifier	d
>666	Identifier	c
>667	ExpressionStatement	 
>668	CallExpression	disconnect ( c , SIGNAL ( finished ( ) ) , c -> d -> onFinishObj , c -> d -> onFinishSlot )
>669	ArgumentList	c
>670	Argument	c -> d -> onFinishSlot
>671	PtrMemberAccess	c -> d -> onFinishSlot
>672	Identifier	onFinishSlot
>673	PtrMemberAccess	c -> d
>674	Identifier	d
>675	Identifier	c
>676	Argument	c -> d -> onFinishObj
>677	PtrMemberAccess	c -> d -> onFinishObj
>678	Identifier	onFinishObj
>679	PtrMemberAccess	c -> d
>680	Identifier	d
>681	Identifier	c
>682	Argument	SIGNAL ( finished ( ) )
>683	CallExpression	SIGNAL ( finished ( ) )
>684	ArgumentList	finished ( )
>685	Argument	finished ( )
>686	CallExpression	finished ( )
>687	ArgumentList	 
>688	Callee	finished
>689	Identifier	finished
>690	Callee	SIGNAL
>691	Identifier	SIGNAL
>692	Argument	c
>693	Identifier	c
>694	Callee	disconnect
>695	Identifier	disconnect
>696	Condition	 
>697	AndExpression	c -> d -> onFinishObj && c -> d -> onFinishSlot
>698	PtrMemberAccess	c -> d -> onFinishSlot
>699	Identifier	onFinishSlot
>700	PtrMemberAccess	c -> d
>701	Identifier	d
>702	Identifier	c
>703	PtrMemberAccess	c -> d -> onFinishObj
>704	Identifier	onFinishObj
>705	PtrMemberAccess	c -> d
>706	Identifier	d
>707	Identifier	c
>708	ExpressionStatement	 
>709	CallExpression	c -> finished ( )
>710	ArgumentList	 
>711	Callee	c -> finished
>712	PtrMemberAccess	c -> finished
>713	Identifier	finished
>714	Identifier	c
>715	Condition	 
>716	AndExpression	c && c -> d -> channel == chan
>717	EqualityExpression	c -> d -> channel == chan
>718	Identifier	chan
>719	PtrMemberAccess	c -> d -> channel
>720	Identifier	channel
>721	PtrMemberAccess	c -> d
>722	Identifier	d
>723	Identifier	c
>724	Identifier	c
>725	Statement	 
>726	Statement	 
>727	Statement	 
>728	Statement	 
>729	Statement	 
>730	Statement	 
>731	Statement	 
>732	Statement	 
>733	ExpressionStatement	 
>734	CallExpression	Q_UNUSED ( refCon )
>735	ArgumentList	refCon
>736	Argument	refCon
>737	Identifier	refCon
>738	Callee	Q_UNUSED
>739	Identifier	Q_UNUSED
>759	FunctionDef	QtSpeech 
>760	ParameterList	QTimerEvent * te
>761	Parameter	 
>762	Identifier	te
>763	ParameterType	QTimerEvent *
>764	ReturnType	void
>765	CompoundStatement	 
>766	ExpressionStatement	 
>767	CallExpression	QObject 
>768	ArgumentList	te
>769	Argument	te
>770	Identifier	te
>771	Callee	QObject 
>772	Identifier	QObject 
<8=10,9
<66=68,67
<68=124,108,92,83,72,71,69
<69=70
<72=73
<73=77,74
<74=75
<75=76
<77=78
<78=80,79
<80=82,81
<83=84
<84=90,85
<85=86
<86=87
<87=89,88
<90=91
<92=93
<93=106,94
<94=97,95
<95=96
<97=98
<98=104,99
<99=100
<100=101
<101=103,102
<104=105
<106=107
<108=109
<109=122,110
<110=113,111
<111=112
<113=114
<114=120,115
<115=116
<116=117
<117=119,118
<120=121
<122=123
<124=136,125
<125=135,126
<126=127
<127=133,128
<128=129
<129=130
<130=132,131
<133=134
<136=137
<137=141,138
<138=140,139
<155=158,157,156
<158=159
<159=160
<160=162,161
<169=172,171,170
<172=339,335,331,315,293,175,173
<173=174
<175=285,281,278,176
<176=274,270,252,228,199,181,177
<177=178
<178=180,179
<181=182
<182=198,197,183
<183=196,184
<184=186,185
<186=192,187
<187=188
<188=189
<189=191,190
<192=193
<193=195,194
<199=200
<200=227,226,201
<201=225,202
<202=223,203
<203=215,204
<204=205
<205=213,206
<206=207
<207=208
<208=210,209
<210=212,211
<213=214
<215=216
<216=222,217
<217=219,218
<219=221,220
<223=224
<228=229
<229=250,230
<230=233,231
<231=232
<233=234
<234=248,235
<235=244,240,236
<236=237
<237=239,238
<240=241
<241=243,242
<244=245
<245=247,246
<248=249
<250=251
<252=253
<253=268,254
<254=257,255
<255=256
<257=258
<258=266,259
<259=264,260
<260=261
<261=263,262
<264=265
<266=267
<268=269
<270=271
<271=273,272
<274=275
<275=277,276
<278=280,279
<281=282
<282=284,283
<285=286
<286=287
<287=292,291,288
<288=290,289
<293=294
<294=313,295
<295=298,296
<296=297
<298=299
<299=311,300
<300=309,305,301
<301=302
<302=304,303
<305=306
<306=308,307
<309=310
<311=312
<313=314
<315=316
<316=329,317
<317=320,318
<318=319
<320=321
<321=327,322
<322=323
<323=324
<324=326,325
<327=328
<329=330
<331=332
<332=334,333
<335=336
<336=338,337
<339=340
<340=342,341
<371=377,376,372
<372=373
<373=375,374
<377=378
<378=379
<379=387,380
<380=385,383,381
<381=382
<383=384
<385=386
<387=388
<393=405,404,394
<394=401,398,395
<395=397,396
<398=400,399
<401=403,402
<405=510,504,475,474,473,472,471,470,469,468,467,466,465,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,429,422,406
<406=418,407
<407=417,408
<408=409
<409=415,410
<410=411
<411=412
<412=414,413
<415=416
<418=419
<419=421,420
<422=423
<423=427,424
<424=425
<425=426
<427=428
<429=430
<430=446,445,431
<431=444,432
<432=442,433
<433=438,436,434
<434=435
<436=437
<438=439
<439=441,440
<442=443
<475=500,476
<476=499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477
<500=501
<501=503,502
<504=505
<505=507,506
<507=509,508
<510=511
<511=513,512
<513=515,514
<533=539,538,534
<534=535
<535=537,536
<539=572,566,559,555,547,540
<540=541
<541=543,542
<543=544
<544=546,545
<547=548
<548=552,549
<549=551,550
<552=554,553
<555=556
<556=558,557
<559=560
<560=564,561
<561=562
<562=563
<564=565
<566=567
<567=569,568
<569=571,570
<572=584,573
<573=583,574
<574=575
<575=581,576
<576=577
<577=578
<578=580,579
<581=582
<584=585
<585=587,586
<600=609,608,601
<601=605,602
<602=604,603
<605=607,606
<609=733,732,731,730,729,728,727,726,725,610
<610=611
<611=715,612
<612=708,649,614,613
<614=643,615
<615=635,616
<616=629,617
<617=618
<618=619
<619=621,620
<621=622
<622=624,623
<624=626,625
<626=628,627
<629=630
<630=632,631
<632=634,633
<635=636
<636=638,637
<638=640,639
<640=642,641
<643=644
<644=646,645
<646=648,647
<649=696,650
<650=667,659,651
<651=652
<652=654,653
<654=656,655
<656=658,657
<659=660
<660=662,661
<662=664,663
<664=666,665
<667=668
<668=694,669
<669=692,682,676,670
<670=671
<671=673,672
<673=675,674
<676=677
<677=679,678
<679=681,680
<682=683
<683=690,684
<684=685
<685=686
<686=688,687
<688=689
<690=691
<692=693
<694=695
<696=697
<697=703,698
<698=700,699
<700=702,701
<703=705,704
<705=707,706
<708=709
<709=711,710
<711=712
<712=714,713
<715=716
<716=724,717
<717=719,718
<719=721,720
<721=723,722
<733=734
<734=738,735
<735=736
<736=737
<738=739
<759=765,764,760
<760=761
<761=763,762
<765=766
<766=767
<767=771,768
<768=769
<769=770
<771=772
