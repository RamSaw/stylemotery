>3	FunctionDef	CEncryption 
>4	ParameterList	const CString & String , const int Key , const long int C1 , const long int C2
>5	Parameter	 
>6	Identifier	C2
>7	ParameterType	const long int
>8	Parameter	 
>9	Identifier	C1
>10	ParameterType	const long int
>11	Parameter	 
>12	Identifier	Key
>13	ParameterType	const int
>14	Parameter	 
>15	Identifier	String
>16	ParameterType	const CString &
>17	ReturnType	CString
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	Result
>21	IfStatement	if ( String . GetLength ( ) )
>22	CompoundStatement	 
>23	ExpressionStatement	 
>24	Identifier	tStr
>25	Statement	 
>26	Statement	 
>27	Statement	 
>28	ExpressionStatement	 
>29	AssignmentExpr	Result = tStr
>30	Identifier	tStr
>31	Identifier	Result
>32	ExpressionStatement	 
>33	AssignmentExpr	tStr [ String . GetLength ( ) * 2 ] = 0
>34	PrimaryExpression	0
>35	ArrayIndexing	tStr [ String . GetLength ( ) * 2 ]
>36	MultiplicativeExpression	String . GetLength ( ) * 2
>37	PrimaryExpression	2
>38	CallExpression	String . GetLength ( )
>39	ArgumentList	 
>40	Callee	String . GetLength
>41	MemberAccess	String . GetLength
>42	Identifier	GetLength
>43	Identifier	String
>44	Identifier	tStr
>45	CompoundStatement	 
>46	ExpressionStatement	 
>47	AssignmentExpr	LKey = ( t + LKey ) * C1 + C2
>48	AdditiveExpression	( t + LKey ) * C1 + C2
>49	Identifier	C2
>50	MultiplicativeExpression	( t + LKey ) * C1
>51	Identifier	C1
>52	AdditiveExpression	t + LKey
>53	Identifier	LKey
>54	Identifier	t
>55	Identifier	LKey
>56	ExpressionStatement	 
>57	AssignmentExpr	tStr [ 2 * i + 1 ] = ( char ) ( ( ( t & 240 ) >> 4 ) + 64 )
>58	CastExpression	( char ) ( ( ( t & 240 ) >> 4 ) + 64 )
>59	AdditiveExpression	( ( t & 240 ) >> 4 ) + 64
>60	PrimaryExpression	64
>61	ShiftExpression	( t & 240 ) >> 4
>62	PrimaryExpression	4
>63	BitAndExpression	t & 240
>64	PrimaryExpression	240
>65	Identifier	t
>66	CastTarget	char
>67	ArrayIndexing	tStr [ 2 * i + 1 ]
>68	AdditiveExpression	2 * i + 1
>69	PrimaryExpression	1
>70	MultiplicativeExpression	2 * i
>71	Identifier	i
>72	PrimaryExpression	2
>73	Identifier	tStr
>74	ExpressionStatement	 
>75	AssignmentExpr	tStr [ 2 * i ] = ( char ) ( ( t & 15 ) + 64 )
>76	CastExpression	( char ) ( ( t & 15 ) + 64 )
>77	AdditiveExpression	( t & 15 ) + 64
>78	PrimaryExpression	64
>79	BitAndExpression	t & 15
>80	PrimaryExpression	15
>81	Identifier	t
>82	CastTarget	char
>83	ArrayIndexing	tStr [ 2 * i ]
>84	MultiplicativeExpression	2 * i
>85	Identifier	i
>86	PrimaryExpression	2
>87	Identifier	tStr
>88	ExpressionStatement	 
>89	AssignmentExpr	t = ( signed char ) ( ( ( signed char ) String [ i ] ) ^ ( LKey >> 8 ) )
>90	CastExpression	( signed char ) ( ( ( signed char ) String [ i ] ) ^ ( LKey >> 8 ) )
>91	ExclusiveOrExpression	( ( signed char ) String [ i ] ) ^ ( LKey >> 8 )
>92	ShiftExpression	LKey >> 8
>93	PrimaryExpression	8
>94	Identifier	LKey
>95	CastExpression	( signed char ) String [ i ]
>96	ArrayIndexing	String [ i ]
>97	Identifier	i
>98	Identifier	String
>99	CastTarget	signed char
>100	CastTarget	signed char
>101	Identifier	t
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	ExpressionStatement	 
>106	RelationalExpression	i < ( int ) String . GetLength ( )
>107	CastExpression	( int ) String . GetLength ( )
>108	CallExpression	String . GetLength ( )
>109	ArgumentList	 
>110	Callee	String . GetLength
>111	MemberAccess	String . GetLength
>112	Identifier	GetLength
>113	Identifier	String
>114	CastTarget	int
>115	Identifier	i
>116	IdentifierDeclStatement	 
>117	IdentifierDecl	i = 0
>118	AssignmentExpr	i = 0
>119	PrimaryExpression	0
>120	Identifier	i
>121	Identifier	i
>122	IdentifierDeclType	int
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	IdentifierDeclStatement	 
>127	IdentifierDecl	* tStr = new char [ String . GetLength ( ) * 2 + 1 ]
>128	AssignmentExpr	* tStr = new char [ String . GetLength ( ) * 2 + 1 ]
>129	AdditiveExpression	String . GetLength ( ) * 2 + 1
>130	PrimaryExpression	1
>131	MultiplicativeExpression	String . GetLength ( ) * 2
>132	PrimaryExpression	2
>133	CallExpression	String . GetLength ( )
>134	ArgumentList	 
>135	Callee	String . GetLength
>136	MemberAccess	String . GetLength
>137	Identifier	GetLength
>138	Identifier	String
>139	Identifier	tStr
>140	Identifier	tStr
>141	IdentifierDeclType	char *
>142	IdentifierDeclStatement	 
>143	IdentifierDecl	t
>144	Identifier	t
>145	IdentifierDeclType	signed char
>146	Condition	 
>147	CallExpression	String . GetLength ( )
>148	ArgumentList	 
>149	Callee	String . GetLength
>150	MemberAccess	String . GetLength
>151	Identifier	GetLength
>152	Identifier	String
>153	IdentifierDeclStatement	 
>154	IdentifierDecl	LKey = Key
>155	AssignmentExpr	LKey = Key
>156	Identifier	Key
>157	Identifier	Key
>158	Identifier	LKey
>159	IdentifierDeclType	int
>160	IdentifierDeclStatement	 
>161	IdentifierDecl	Result
>162	Identifier	Result
>163	IdentifierDeclType	CString
>181	FunctionDef	CEncryption 
>182	ParameterList	const CString & String , const int Key , const long int C1 , const long int C2
>183	Parameter	 
>184	Identifier	C2
>185	ParameterType	const long int
>186	Parameter	 
>187	Identifier	C1
>188	ParameterType	const long int
>189	Parameter	 
>190	Identifier	Key
>191	ParameterType	const int
>192	Parameter	 
>193	Identifier	String
>194	ParameterType	const CString &
>195	ReturnType	CString
>196	CompoundStatement	 
>197	ReturnStatement	 
>198	Identifier	Result
>199	IfStatement	if ( String . GetLength ( ) )
>200	CompoundStatement	 
>201	ExpressionStatement	 
>202	Identifier	tStr
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	ExpressionStatement	 
>207	AssignmentExpr	Result = tStr
>208	Identifier	tStr
>209	Identifier	Result
>210	ExpressionStatement	 
>211	AssignmentExpr	tStr [ Len ] = 0
>212	PrimaryExpression	0
>213	ArrayIndexing	tStr [ Len ]
>214	Identifier	Len
>215	Identifier	tStr
>216	CompoundStatement	 
>217	ExpressionStatement	 
>218	AssignmentExpr	LKey = ( t + LKey ) * C1 + C2
>219	AdditiveExpression	( t + LKey ) * C1 + C2
>220	Identifier	C2
>221	MultiplicativeExpression	( t + LKey ) * C1
>222	Identifier	C1
>223	AdditiveExpression	t + LKey
>224	Identifier	LKey
>225	Identifier	t
>226	Identifier	LKey
>227	IfStatement	if ( ! tStr [ i ] )
>228	CompoundStatement	 
>229	BreakStatement	 
>230	ExpressionStatement	 
>231	AssignmentExpr	Len = i
>232	Identifier	i
>233	Identifier	Len
>234	Condition	 
>235	UnaryOp	! tStr [ i ]
>236	ArrayIndexing	tStr [ i ]
>237	Identifier	i
>238	Identifier	tStr
>239	UnaryOperator	!
>240	ExpressionStatement	 
>241	AssignmentExpr	tStr [ i ] = ( char ) ( t ^ ( LKey >> 8 ) )
>242	CastExpression	( char ) ( t ^ ( LKey >> 8 ) )
>243	ExclusiveOrExpression	t ^ ( LKey >> 8 )
>244	ShiftExpression	LKey >> 8
>245	PrimaryExpression	8
>246	Identifier	LKey
>247	Identifier	t
>248	CastTarget	char
>249	ArrayIndexing	tStr [ i ]
>250	Identifier	i
>251	Identifier	tStr
>252	ExpressionStatement	 
>253	AssignmentExpr	t = ( signed char ) ( ( ( ( signed char ) String [ 2 * i ] ) - 64 ) + ( ( ( ( signed char ) String [ \
>254	CastExpression	( signed char ) ( ( ( ( signed char ) String [ 2 * i ] ) - 64 ) + ( ( ( ( signed char ) String [ 2 * i + 1 ] ) - \
>255	AdditiveExpression	( ( ( signed char ) String [ 2 * i ] ) - 64 ) + ( ( ( ( signed char ) String [ 2 * i + 1 ] ) - 64 ) << \
>256	ShiftExpression	( ( ( signed char ) String [ 2 * i + 1 ] ) - 64 ) << 4
>257	PrimaryExpression	4
>258	AdditiveExpression	( ( signed char ) String [ 2 * i + 1 ] ) - 64
>259	PrimaryExpression	64
>260	CastExpression	( signed char ) String [ 2 * i + 1 ]
>261	ArrayIndexing	String [ 2 * i + 1 ]
>262	AdditiveExpression	2 * i + 1
>263	PrimaryExpression	1
>264	MultiplicativeExpression	2 * i
>265	Identifier	i
>266	PrimaryExpression	2
>267	Identifier	String
>268	CastTarget	signed char
>269	AdditiveExpression	( ( signed char ) String [ 2 * i ] ) - 64
>270	PrimaryExpression	64
>271	CastExpression	( signed char ) String [ 2 * i ]
>272	ArrayIndexing	String [ 2 * i ]
>273	MultiplicativeExpression	2 * i
>274	Identifier	i
>275	PrimaryExpression	2
>276	Identifier	String
>277	CastTarget	signed char
>278	CastTarget	signed char
>279	Identifier	t
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	ExpressionStatement	 
>284	RelationalExpression	i < Len
>285	Identifier	Len
>286	Identifier	i
>287	IdentifierDeclStatement	 
>288	IdentifierDecl	i = 0
>289	AssignmentExpr	i = 0
>290	PrimaryExpression	0
>291	Identifier	i
>292	Identifier	i
>293	IdentifierDeclType	int
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	IdentifierDeclStatement	 
>298	IdentifierDecl	* tStr = new char [ Len + 1 ]
>299	AssignmentExpr	* tStr = new char [ Len + 1 ]
>300	AdditiveExpression	Len + 1
>301	PrimaryExpression	1
>302	Identifier	Len
>303	Identifier	tStr
>304	Identifier	tStr
>305	IdentifierDeclType	char *
>306	IdentifierDeclStatement	 
>307	IdentifierDecl	Len = String . GetLength ( ) / 2
>308	AssignmentExpr	Len = String . GetLength ( ) / 2
>309	MultiplicativeExpression	String . GetLength ( ) / 2
>310	PrimaryExpression	2
>311	CallExpression	String . GetLength ( )
>312	ArgumentList	 
>313	Callee	String . GetLength
>314	MemberAccess	String . GetLength
>315	Identifier	GetLength
>316	Identifier	String
>317	Identifier	Len
>318	Identifier	Len
>319	IdentifierDeclType	int
>320	IdentifierDeclStatement	 
>321	IdentifierDecl	LKey = Key
>322	AssignmentExpr	LKey = Key
>323	Identifier	Key
>324	Identifier	Key
>325	Identifier	LKey
>326	IdentifierDeclType	int
>327	IdentifierDeclStatement	 
>328	IdentifierDecl	t
>329	Identifier	t
>330	IdentifierDeclType	signed char
>331	Condition	 
>332	CallExpression	String . GetLength ( )
>333	ArgumentList	 
>334	Callee	String . GetLength
>335	MemberAccess	String . GetLength
>336	Identifier	GetLength
>337	Identifier	String
>338	IdentifierDeclStatement	 
>339	IdentifierDecl	Result
>340	Identifier	Result
>341	IdentifierDeclType	CString
>365	FunctionDef	CEncryption 
>366	ParameterList	const CString & ssString
>367	Parameter	 
>368	Identifier	ssString
>369	ParameterType	const CString &
>370	ReturnType	CString
>371	CompoundStatement	 
>372	ReturnStatement	 
>373	Identifier	ssResult
>374	IfStatement	if ( ssString . GetLength ( ) )
>375	CompoundStatement	 
>376	IfStatement	if ( dwSize )
>377	ExpressionStatement	 
>378	CallExpression	ssResult . SetLength ( dwSize - 1 )
>379	ArgumentList	dwSize - 1
>380	Argument	dwSize - 1
>381	AdditiveExpression	dwSize - 1
>382	PrimaryExpression	1
>383	Identifier	dwSize
>384	Callee	ssResult . SetLength
>385	MemberAccess	ssResult . SetLength
>386	Identifier	SetLength
>387	Identifier	ssResult
>388	Condition	 
>389	Identifier	dwSize
>390	ExpressionStatement	 
>391	CallExpression	CryptBase64Encode ( ( char * ) ssString . GetBuffer ( ) , ( char * ) ssResult . GetBuffer ( ) , & dwSize , ssString \
>392	ArgumentList	( char * ) ssString . GetBuffer ( )
>393	Argument	ssString . GetLength ( )
>394	CallExpression	ssString . GetLength ( )
>395	ArgumentList	 
>396	Callee	ssString . GetLength
>397	MemberAccess	ssString . GetLength
>398	Identifier	GetLength
>399	Identifier	ssString
>400	Argument	& dwSize
>401	UnaryOp	& dwSize
>402	Identifier	dwSize
>403	UnaryOperator	&
>404	Argument	( char * ) ssResult . GetBuffer ( )
>405	CastExpression	( char * ) ssResult . GetBuffer ( )
>406	CallExpression	ssResult . GetBuffer ( )
>407	ArgumentList	 
>408	Callee	ssResult . GetBuffer
>409	MemberAccess	ssResult . GetBuffer
>410	Identifier	GetBuffer
>411	Identifier	ssResult
>412	CastTarget	char *
>413	Argument	( char * ) ssString . GetBuffer ( )
>414	CastExpression	( char * ) ssString . GetBuffer ( )
>415	CallExpression	ssString . GetBuffer ( )
>416	ArgumentList	 
>417	Callee	ssString . GetBuffer
>418	MemberAccess	ssString . GetBuffer
>419	Identifier	GetBuffer
>420	Identifier	ssString
>421	CastTarget	char *
>422	Callee	CryptBase64Encode
>423	Identifier	CryptBase64Encode
>424	ExpressionStatement	 
>425	CallExpression	ssResult . SetLength ( dwSize - 1 )
>426	ArgumentList	dwSize - 1
>427	Argument	dwSize - 1
>428	AdditiveExpression	dwSize - 1
>429	PrimaryExpression	1
>430	Identifier	dwSize
>431	Callee	ssResult . SetLength
>432	MemberAccess	ssResult . SetLength
>433	Identifier	SetLength
>434	Identifier	ssResult
>435	IdentifierDeclStatement	 
>436	IdentifierDecl	dwSize = BASE64_ENCODE_REQSIZE ( ssString . GetLength ( ) + 1 )
>437	AssignmentExpr	dwSize = BASE64_ENCODE_REQSIZE ( ssString . GetLength ( ) + 1 )
>438	CallExpression	BASE64_ENCODE_REQSIZE ( ssString . GetLength ( ) + 1 )
>439	ArgumentList	ssString . GetLength ( ) + 1
>440	Argument	ssString . GetLength ( ) + 1
>441	AdditiveExpression	ssString . GetLength ( ) + 1
>442	PrimaryExpression	1
>443	CallExpression	ssString . GetLength ( )
>444	ArgumentList	 
>445	Callee	ssString . GetLength
>446	MemberAccess	ssString . GetLength
>447	Identifier	GetLength
>448	Identifier	ssString
>449	Callee	BASE64_ENCODE_REQSIZE
>450	Identifier	BASE64_ENCODE_REQSIZE
>451	Identifier	dwSize
>452	Identifier	dwSize
>453	IdentifierDeclType	int
>454	Condition	 
>455	CallExpression	ssString . GetLength ( )
>456	ArgumentList	 
>457	Callee	ssString . GetLength
>458	MemberAccess	ssString . GetLength
>459	Identifier	GetLength
>460	Identifier	ssString
>461	IdentifierDeclStatement	 
>462	IdentifierDecl	ssResult
>463	Identifier	ssResult
>464	IdentifierDeclType	CString
>476	FunctionDef	CEncryption 
>477	ParameterList	const CString & ssString
>478	Parameter	 
>479	Identifier	ssString
>480	ParameterType	const CString &
>481	ReturnType	CString
>482	CompoundStatement	 
>483	ReturnStatement	 
>484	Identifier	ssResult
>485	IfStatement	if ( ssString . GetLength ( ) )
>486	CompoundStatement	 
>487	IfStatement	if ( dwSize )
>488	ExpressionStatement	 
>489	CallExpression	ssResult . SetLength ( dwSize - 1 )
>490	ArgumentList	dwSize - 1
>491	Argument	dwSize - 1
>492	AdditiveExpression	dwSize - 1
>493	PrimaryExpression	1
>494	Identifier	dwSize
>495	Callee	ssResult . SetLength
>496	MemberAccess	ssResult . SetLength
>497	Identifier	SetLength
>498	Identifier	ssResult
>499	Condition	 
>500	Identifier	dwSize
>501	ExpressionStatement	 
>502	CallExpression	CryptBase64Decode ( ( char * ) ssString . GetBuffer ( ) , ( char * ) ssResult . GetBuffer ( ) , & dwSize , ssString \
>503	ArgumentList	( char * ) ssString . GetBuffer ( )
>504	Argument	ssString . GetLength ( )
>505	CallExpression	ssString . GetLength ( )
>506	ArgumentList	 
>507	Callee	ssString . GetLength
>508	MemberAccess	ssString . GetLength
>509	Identifier	GetLength
>510	Identifier	ssString
>511	Argument	& dwSize
>512	UnaryOp	& dwSize
>513	Identifier	dwSize
>514	UnaryOperator	&
>515	Argument	( char * ) ssResult . GetBuffer ( )
>516	CastExpression	( char * ) ssResult . GetBuffer ( )
>517	CallExpression	ssResult . GetBuffer ( )
>518	ArgumentList	 
>519	Callee	ssResult . GetBuffer
>520	MemberAccess	ssResult . GetBuffer
>521	Identifier	GetBuffer
>522	Identifier	ssResult
>523	CastTarget	char *
>524	Argument	( char * ) ssString . GetBuffer ( )
>525	CastExpression	( char * ) ssString . GetBuffer ( )
>526	CallExpression	ssString . GetBuffer ( )
>527	ArgumentList	 
>528	Callee	ssString . GetBuffer
>529	MemberAccess	ssString . GetBuffer
>530	Identifier	GetBuffer
>531	Identifier	ssString
>532	CastTarget	char *
>533	Callee	CryptBase64Decode
>534	Identifier	CryptBase64Decode
>535	ExpressionStatement	 
>536	CallExpression	ssResult . SetLength ( dwSize - 1 )
>537	ArgumentList	dwSize - 1
>538	Argument	dwSize - 1
>539	AdditiveExpression	dwSize - 1
>540	PrimaryExpression	1
>541	Identifier	dwSize
>542	Callee	ssResult . SetLength
>543	MemberAccess	ssResult . SetLength
>544	Identifier	SetLength
>545	Identifier	ssResult
>546	IdentifierDeclStatement	 
>547	IdentifierDecl	dwSize = BASE64_DECODE_REQSIZE ( ssString . GetLength ( ) + 1 )
>548	AssignmentExpr	dwSize = BASE64_DECODE_REQSIZE ( ssString . GetLength ( ) + 1 )
>549	CallExpression	BASE64_DECODE_REQSIZE ( ssString . GetLength ( ) + 1 )
>550	ArgumentList	ssString . GetLength ( ) + 1
>551	Argument	ssString . GetLength ( ) + 1
>552	AdditiveExpression	ssString . GetLength ( ) + 1
>553	PrimaryExpression	1
>554	CallExpression	ssString . GetLength ( )
>555	ArgumentList	 
>556	Callee	ssString . GetLength
>557	MemberAccess	ssString . GetLength
>558	Identifier	GetLength
>559	Identifier	ssString
>560	Callee	BASE64_DECODE_REQSIZE
>561	Identifier	BASE64_DECODE_REQSIZE
>562	Identifier	dwSize
>563	Identifier	dwSize
>564	IdentifierDeclType	int
>565	Condition	 
>566	CallExpression	ssString . GetLength ( )
>567	ArgumentList	 
>568	Callee	ssString . GetLength
>569	MemberAccess	ssString . GetLength
>570	Identifier	GetLength
>571	Identifier	ssString
>572	IdentifierDeclStatement	 
>573	IdentifierDecl	ssResult
>574	Identifier	ssResult
>575	IdentifierDeclType	CString
>587	FunctionDef	CEncryption 
>588	ParameterList	const char * lpszString , char * lpszBuffer , int * dwSize , int dwSourceSize
>589	Parameter	 
>590	Identifier	dwSourceSize
>591	ParameterType	int
>592	Parameter	 
>593	Identifier	dwSize
>594	ParameterType	int *
>595	Parameter	 
>596	Identifier	lpszBuffer
>597	ParameterType	char *
>598	Parameter	 
>599	Identifier	lpszString
>600	ParameterType	const char *
>601	ReturnType	bool
>602	CompoundStatement	 
>603	ReturnStatement	 
>604	Identifier	true
>605	ExpressionStatement	 
>606	AssignmentExpr	* dwSize = p - lpszBuffer + 1
>607	AdditiveExpression	p - lpszBuffer + 1
>608	AdditiveExpression	lpszBuffer + 1
>609	PrimaryExpression	1
>610	Identifier	lpszBuffer
>611	Identifier	p
>612	UnaryOp	* dwSize
>613	Identifier	dwSize
>614	UnaryOperator	*
>615	ExpressionStatement	 
>616	CallExpression	assert ( * dwSize >= ( p - lpszBuffer + 1 ) )
>617	ArgumentList	* dwSize >= ( p - lpszBuffer + 1 )
>618	Argument	* dwSize >= ( p - lpszBuffer + 1 )
>619	RelationalExpression	* dwSize >= ( p - lpszBuffer + 1 )
>620	AdditiveExpression	p - lpszBuffer + 1
>621	AdditiveExpression	lpszBuffer + 1
>622	PrimaryExpression	1
>623	Identifier	lpszBuffer
>624	Identifier	p
>625	UnaryOp	* dwSize
>626	Identifier	dwSize
>627	UnaryOperator	*
>628	Callee	assert
>629	Identifier	assert
>630	ExpressionStatement	 
>631	AssignmentExpr	* p = 0
>632	PrimaryExpression	0
>633	UnaryOp	* p
>634	Identifier	p
>635	UnaryOperator	*
>636	ForStatement	for ( int i = 0 ; i < dwSourceSize ; )
>637	CompoundStatement	 
>638	ExpressionStatement	 
>639	AssignmentExpr	p += 4
>640	PrimaryExpression	4
>641	Identifier	p
>642	IfStatement	if ( i > dwSourceSize + 1 )
>643	ExpressionStatement	 
>644	AssignmentExpr	p [ 2 ] = '='
>645	PrimaryExpression	'='
>646	ArrayIndexing	p [ 2 ]
>647	PrimaryExpression	2
>648	Identifier	p
>649	Condition	 
>650	RelationalExpression	i > dwSourceSize + 1
>651	AdditiveExpression	dwSourceSize + 1
>652	PrimaryExpression	1
>653	Identifier	dwSourceSize
>654	Identifier	i
>655	IfStatement	if ( i > dwSourceSize )
>656	ExpressionStatement	 
>657	AssignmentExpr	p [ 3 ] = '='
>658	PrimaryExpression	'='
>659	ArrayIndexing	p [ 3 ]
>660	PrimaryExpression	3
>661	Identifier	p
>662	Condition	 
>663	RelationalExpression	i > dwSourceSize
>664	Identifier	dwSourceSize
>665	Identifier	i
>666	ExpressionStatement	 
>667	AssignmentExpr	p [ 3 ] = __pBase64Alphabet [ ( c & 0x0000003f ) >> 0 ]
>668	ArrayIndexing	__pBase64Alphabet [ ( c & 0x0000003f ) >> 0 ]
>669	ShiftExpression	( c & 0x0000003f ) >> 0
>670	PrimaryExpression	0
>671	BitAndExpression	c & 0x0000003f
>672	PrimaryExpression	0x0000003f
>673	Identifier	c
>674	Identifier	__pBase64Alphabet
>675	ArrayIndexing	p [ 3 ]
>676	PrimaryExpression	3
>677	Identifier	p
>678	ExpressionStatement	 
>679	AssignmentExpr	p [ 2 ] = __pBase64Alphabet [ ( c & 0x00000fc0 ) >> 6 ]
>680	ArrayIndexing	__pBase64Alphabet [ ( c & 0x00000fc0 ) >> 6 ]
>681	ShiftExpression	( c & 0x00000fc0 ) >> 6
>682	PrimaryExpression	6
>683	BitAndExpression	c & 0x00000fc0
>684	PrimaryExpression	0x00000fc0
>685	Identifier	c
>686	Identifier	__pBase64Alphabet
>687	ArrayIndexing	p [ 2 ]
>688	PrimaryExpression	2
>689	Identifier	p
>690	ExpressionStatement	 
>691	AssignmentExpr	p [ 1 ] = __pBase64Alphabet [ ( c & 0x0003f000 ) >> 12 ]
>692	ArrayIndexing	__pBase64Alphabet [ ( c & 0x0003f000 ) >> 12 ]
>693	ShiftExpression	( c & 0x0003f000 ) >> 12
>694	PrimaryExpression	12
>695	BitAndExpression	c & 0x0003f000
>696	PrimaryExpression	0x0003f000
>697	Identifier	c
>698	Identifier	__pBase64Alphabet
>699	ArrayIndexing	p [ 1 ]
>700	PrimaryExpression	1
>701	Identifier	p
>702	ExpressionStatement	 
>703	AssignmentExpr	p [ 0 ] = __pBase64Alphabet [ ( c & 0x00fc0000 ) >> 18 ]
>704	ArrayIndexing	__pBase64Alphabet [ ( c & 0x00fc0000 ) >> 18 ]
>705	ShiftExpression	( c & 0x00fc0000 ) >> 18
>706	PrimaryExpression	18
>707	BitAndExpression	c & 0x00fc0000
>708	PrimaryExpression	0x00fc0000
>709	Identifier	c
>710	Identifier	__pBase64Alphabet
>711	ArrayIndexing	p [ 0 ]
>712	PrimaryExpression	0
>713	Identifier	p
>714	ExpressionStatement	 
>715	IncDecOp	i ++
>716	IncDec	++
>717	Identifier	i
>718	IfStatement	if ( i < dwSourceSize )
>719	ExpressionStatement	 
>720	AssignmentExpr	c += q [ i ]
>721	ArrayIndexing	q [ i ]
>722	Identifier	i
>723	Identifier	q
>724	Identifier	c
>725	Condition	 
>726	RelationalExpression	i < dwSourceSize
>727	Identifier	dwSourceSize
>728	Identifier	i
>729	ExpressionStatement	 
>730	AssignmentExpr	c *= 256
>731	PrimaryExpression	256
>732	Identifier	c
>733	ExpressionStatement	 
>734	IncDecOp	i ++
>735	IncDec	++
>736	Identifier	i
>737	IfStatement	if ( i < dwSourceSize )
>738	ExpressionStatement	 
>739	AssignmentExpr	c += q [ i ]
>740	ArrayIndexing	q [ i ]
>741	Identifier	i
>742	Identifier	q
>743	Identifier	c
>744	Condition	 
>745	RelationalExpression	i < dwSourceSize
>746	Identifier	dwSourceSize
>747	Identifier	i
>748	ExpressionStatement	 
>749	AssignmentExpr	c *= 256
>750	PrimaryExpression	256
>751	Identifier	c
>752	ExpressionStatement	 
>753	AssignmentExpr	c = q [ i ++ ]
>754	ArrayIndexing	q [ i ++ ]
>755	IncDecOp	i ++
>756	IncDec	++
>757	Identifier	i
>758	Identifier	q
>759	Identifier	c
>760	Condition	 
>761	RelationalExpression	i < dwSourceSize
>762	Identifier	dwSourceSize
>763	Identifier	i
>764	ForInit	 
>765	IdentifierDeclStatement	int i = 0 ;
>766	IdentifierDecl	i = 0
>767	AssignmentExpr	i = 0
>768	PrimaryExpression	0
>769	Identifier	i
>770	Identifier	i
>771	IdentifierDeclType	int
>772	IdentifierDeclStatement	 
>773	IdentifierDecl	* q = ( unsigned char * ) lpszString
>774	AssignmentExpr	* q = ( unsigned char * ) lpszString
>775	CastExpression	( unsigned char * ) lpszString
>776	Identifier	lpszString
>777	CastTarget	unsigned char *
>778	Identifier	q
>779	Identifier	q
>780	IdentifierDeclType	unsigned char *
>781	IdentifierDeclStatement	 
>782	IdentifierDecl	c
>783	Identifier	c
>784	IdentifierDeclType	int
>785	IdentifierDeclStatement	 
>786	IdentifierDecl	* p = lpszBuffer
>787	AssignmentExpr	* p = lpszBuffer
>788	Identifier	lpszBuffer
>789	Identifier	lpszBuffer
>790	Identifier	p
>791	IdentifierDeclType	char *
>792	IfStatement	if ( dwRequired > ( * dwSize ) )
>793	CompoundStatement	 
>794	ReturnStatement	 
>795	Identifier	false
>796	ExpressionStatement	 
>797	AssignmentExpr	* dwSize = dwRequired
>798	Identifier	dwRequired
>799	UnaryOp	* dwSize
>800	Identifier	dwSize
>801	UnaryOperator	*
>802	Condition	 
>803	RelationalExpression	dwRequired > ( * dwSize )
>804	UnaryOp	* dwSize
>805	Identifier	dwSize
>806	UnaryOperator	*
>807	Identifier	dwRequired
>808	ExpressionStatement	 
>809	AssignmentExpr	dwRequired = BASE64_ENCODE_REQSIZE ( dwString )
>810	CallExpression	BASE64_ENCODE_REQSIZE ( dwString )
>811	ArgumentList	dwString
>812	Argument	dwString
>813	Identifier	dwString
>814	Callee	BASE64_ENCODE_REQSIZE
>815	Identifier	BASE64_ENCODE_REQSIZE
>816	Identifier	dwRequired
>817	IfStatement	if ( dwSourceSize > 0 )
>818	ElseStatement	else
>819	CompoundStatement	 
>820	ExpressionStatement	 
>821	AssignmentExpr	dwString = base_strlen ( lpszString )
>822	CallExpression	base_strlen ( lpszString )
>823	ArgumentList	lpszString
>824	Argument	lpszString
>825	Identifier	lpszString
>826	Callee	base_strlen
>827	Identifier	base_strlen
>828	Identifier	dwString
>829	CompoundStatement	 
>830	ExpressionStatement	 
>831	AssignmentExpr	dwString = dwSourceSize
>832	Identifier	dwSourceSize
>833	Identifier	dwString
>834	Condition	 
>835	RelationalExpression	dwSourceSize > 0
>836	PrimaryExpression	0
>837	Identifier	dwSourceSize
>838	IfStatement	if ( lpszString == NULL )
>839	CompoundStatement	 
>840	ReturnStatement	 
>841	Identifier	false
>842	ExpressionStatement	 
>843	AssignmentExpr	* dwSize = 0
>844	PrimaryExpression	0
>845	UnaryOp	* dwSize
>846	Identifier	dwSize
>847	UnaryOperator	*
>848	Condition	 
>849	EqualityExpression	lpszString == NULL
>850	Identifier	NULL
>851	Identifier	lpszString
>852	IdentifierDeclStatement	 
>853	IdentifierDecl	dwRequired
>854	Identifier	dwRequired
>855	IdentifierDeclType	int
>856	IdentifierDecl	dwString
>857	Identifier	dwString
>858	IdentifierDeclType	int
>884	FunctionDef	CEncryption 
>885	ParameterList	const char * lpszString , char * lpszBuffer , int * pcbDecoded , int dwSourceSize
>886	Parameter	 
>887	Identifier	dwSourceSize
>888	ParameterType	int
>889	Parameter	 
>890	Identifier	pcbDecoded
>891	ParameterType	int *
>892	Parameter	 
>893	Identifier	lpszBuffer
>894	ParameterType	char *
>895	Parameter	 
>896	Identifier	lpszString
>897	ParameterType	const char *
>898	ReturnType	bool
>899	CompoundStatement	 
>900	ReturnStatement	 
>901	Identifier	true
>902	ExpressionStatement	 
>903	AssignmentExpr	* pcbDecoded = nBytesDecoded
>904	Identifier	nBytesDecoded
>905	UnaryOp	* pcbDecoded
>906	Identifier	pcbDecoded
>907	UnaryOperator	*
>908	ExpressionStatement	 
>909	AssignmentExpr	lpszBuffer [ nBytesDecoded ++ ] = '\0'
>910	PrimaryExpression	'\0'
>911	ArrayIndexing	lpszBuffer [ nBytesDecoded ++ ]
>912	IncDecOp	nBytesDecoded ++
>913	IncDec	++
>914	Identifier	nBytesDecoded
>915	Identifier	lpszBuffer
>916	IfStatement	if ( dwSourceSize & 03 )
>917	CompoundStatement	 
>918	IfStatement	if ( __pBase64Reverse [ pszInBuffer [ - 2 ] ] > 63 )
>919	ElseStatement	else
>920	CompoundStatement	 
>921	ExpressionStatement	 
>922	AssignmentExpr	nBytesDecoded -= 1
>923	PrimaryExpression	1
>924	Identifier	nBytesDecoded
>925	CompoundStatement	 
>926	ExpressionStatement	 
>927	AssignmentExpr	nBytesDecoded -= 2
>928	PrimaryExpression	2
>929	Identifier	nBytesDecoded
>930	Condition	 
>931	RelationalExpression	__pBase64Reverse [ pszInBuffer [ - 2 ] ] > 63
>932	PrimaryExpression	63
>933	ArrayIndexing	__pBase64Reverse [ pszInBuffer [ - 2 ] ]
>934	ArrayIndexing	pszInBuffer [ - 2 ]
>935	UnaryOp	- 2
>936	PrimaryExpression	2
>937	UnaryOperator	-
>938	Identifier	pszInBuffer
>939	Identifier	__pBase64Reverse
>940	Condition	 
>941	BitAndExpression	dwSourceSize & 03
>942	PrimaryExpression	03
>943	Identifier	dwSourceSize
>944	WhileStatement	while ( dwSourceSize > 0 )
>945	CompoundStatement	 
>946	IfStatement	if ( dwSourceSize >= 4 )
>947	ElseStatement	else
>948	CompoundStatement	 
>949	BreakStatement	 
>950	ExpressionStatement	 
>951	AssignmentExpr	dwSourceSize = 3
>952	PrimaryExpression	3
>953	Identifier	dwSourceSize
>954	CompoundStatement	 
>955	ExpressionStatement	 
>956	AssignmentExpr	dwSourceSize -= 4
>957	PrimaryExpression	4
>958	Identifier	dwSourceSize
>959	Condition	 
>960	RelationalExpression	dwSourceSize >= 4
>961	PrimaryExpression	4
>962	Identifier	dwSourceSize
>963	ExpressionStatement	 
>964	AssignmentExpr	pszInBuffer += 4
>965	PrimaryExpression	4
>966	Identifier	pszInBuffer
>967	ExpressionStatement	 
>968	AssignmentExpr	* ( pszOutBuffer ++ ) = ( unsigned char ) ( __pBase64Reverse [ pszInBuffer [ 2 ] ] << 6 | __pBase64Reverse [ \
>969	CastExpression	( unsigned char ) ( __pBase64Reverse [ pszInBuffer [ 2 ] ] << 6 | __pBase64Reverse [ pszInBuffer [ 3 ] ] )
>970	InclusiveOrExpression	__pBase64Reverse [ pszInBuffer [ 2 ] ] << 6 | __pBase64Reverse [ pszInBuffer [ 3 ] ]
>971	ArrayIndexing	__pBase64Reverse [ pszInBuffer [ 3 ] ]
>972	ArrayIndexing	pszInBuffer [ 3 ]
>973	PrimaryExpression	3
>974	Identifier	pszInBuffer
>975	Identifier	__pBase64Reverse
>976	ShiftExpression	__pBase64Reverse [ pszInBuffer [ 2 ] ] << 6
>977	PrimaryExpression	6
>978	ArrayIndexing	__pBase64Reverse [ pszInBuffer [ 2 ] ]
>979	ArrayIndexing	pszInBuffer [ 2 ]
>980	PrimaryExpression	2
>981	Identifier	pszInBuffer
>982	Identifier	__pBase64Reverse
>983	CastTarget	unsigned char
>984	UnaryOp	* ( pszOutBuffer ++ )
>985	IncDecOp	pszOutBuffer ++
>986	IncDec	++
>987	Identifier	pszOutBuffer
>988	UnaryOperator	*
>989	ExpressionStatement	 
>990	AssignmentExpr	* ( pszOutBuffer ++ ) = ( unsigned char ) ( __pBase64Reverse [ pszInBuffer [ 1 ] ] << 4 | __pBase64Reverse [ \
>991	CastExpression	( unsigned char ) ( __pBase64Reverse [ pszInBuffer [ 1 ] ] << 4 | __pBase64Reverse [ pszInBuffer [ 2 ] ] >> 2 )
>992	InclusiveOrExpression	__pBase64Reverse [ pszInBuffer [ 1 ] ] << 4 | __pBase64Reverse [ pszInBuffer [ 2 ] ] >> 2
>993	ShiftExpression	__pBase64Reverse [ pszInBuffer [ 2 ] ] >> 2
>994	PrimaryExpression	2
>995	ArrayIndexing	__pBase64Reverse [ pszInBuffer [ 2 ] ]
>996	ArrayIndexing	pszInBuffer [ 2 ]
>997	PrimaryExpression	2
>998	Identifier	pszInBuffer
>999	Identifier	__pBase64Reverse
>1000	ShiftExpression	__pBase64Reverse [ pszInBuffer [ 1 ] ] << 4
>1001	PrimaryExpression	4
>1002	ArrayIndexing	__pBase64Reverse [ pszInBuffer [ 1 ] ]
>1003	ArrayIndexing	pszInBuffer [ 1 ]
>1004	PrimaryExpression	1
>1005	Identifier	pszInBuffer
>1006	Identifier	__pBase64Reverse
>1007	CastTarget	unsigned char
>1008	UnaryOp	* ( pszOutBuffer ++ )
>1009	IncDecOp	pszOutBuffer ++
>1010	IncDec	++
>1011	Identifier	pszOutBuffer
>1012	UnaryOperator	*
>1013	ExpressionStatement	 
>1014	AssignmentExpr	* ( pszOutBuffer ++ ) = ( unsigned char ) ( __pBase64Reverse [ * pszInBuffer ] << 2 | __pBase64Reverse [ \
>1015	CastExpression	( unsigned char ) ( __pBase64Reverse [ * pszInBuffer ] << 2 | __pBase64Reverse [ pszInBuffer [ 1 ] ] >> 4 )
>1016	InclusiveOrExpression	__pBase64Reverse [ * pszInBuffer ] << 2 | __pBase64Reverse [ pszInBuffer [ 1 ] ] >> 4
>1017	ShiftExpression	__pBase64Reverse [ pszInBuffer [ 1 ] ] >> 4
>1018	PrimaryExpression	4
>1019	ArrayIndexing	__pBase64Reverse [ pszInBuffer [ 1 ] ]
>1020	ArrayIndexing	pszInBuffer [ 1 ]
>1021	PrimaryExpression	1
>1022	Identifier	pszInBuffer
>1023	Identifier	__pBase64Reverse
>1024	ShiftExpression	__pBase64Reverse [ * pszInBuffer ] << 2
>1025	PrimaryExpression	2
>1026	ArrayIndexing	__pBase64Reverse [ * pszInBuffer ]
>1027	UnaryOp	* pszInBuffer
>1028	Identifier	pszInBuffer
>1029	UnaryOperator	*
>1030	Identifier	__pBase64Reverse
>1031	CastTarget	unsigned char
>1032	UnaryOp	* ( pszOutBuffer ++ )
>1033	IncDecOp	pszOutBuffer ++
>1034	IncDec	++
>1035	Identifier	pszOutBuffer
>1036	UnaryOperator	*
>1037	Condition	 
>1038	RelationalExpression	dwSourceSize > 0
>1039	PrimaryExpression	0
>1040	Identifier	dwSourceSize
>1041	ExpressionStatement	 
>1042	AssignmentExpr	pszInBuffer = ( char * ) lpszString
>1043	CastExpression	( char * ) lpszString
>1044	Identifier	lpszString
>1045	CastTarget	char *
>1046	Identifier	pszInBuffer
>1047	ExpressionStatement	 
>1048	AssignmentExpr	pszOutBuffer = ( unsigned char * ) lpszBuffer
>1049	CastExpression	( unsigned char * ) lpszBuffer
>1050	Identifier	lpszBuffer
>1051	CastTarget	unsigned char *
>1052	Identifier	pszOutBuffer
>1053	IfStatement	if ( * pcbDecoded < nBytesDecoded )
>1054	CompoundStatement	 
>1055	ReturnStatement	 
>1056	Identifier	false
>1057	ExpressionStatement	 
>1058	AssignmentExpr	* pcbDecoded = nBytesDecoded
>1059	Identifier	nBytesDecoded
>1060	UnaryOp	* pcbDecoded
>1061	Identifier	pcbDecoded
>1062	UnaryOperator	*
>1063	Condition	 
>1064	RelationalExpression	* pcbDecoded < nBytesDecoded
>1065	Identifier	nBytesDecoded
>1066	UnaryOp	* pcbDecoded
>1067	Identifier	pcbDecoded
>1068	UnaryOperator	*
>1069	ExpressionStatement	 
>1070	AssignmentExpr	nBytesDecoded = BASE64_DECODE_REQSIZE ( dwSourceSize ) - 1
>1071	AdditiveExpression	BASE64_DECODE_REQSIZE ( dwSourceSize ) - 1
>1072	PrimaryExpression	1
>1073	CallExpression	BASE64_DECODE_REQSIZE ( dwSourceSize )
>1074	ArgumentList	dwSourceSize
>1075	Argument	dwSourceSize
>1076	Identifier	dwSourceSize
>1077	Callee	BASE64_DECODE_REQSIZE
>1078	Identifier	BASE64_DECODE_REQSIZE
>1079	Identifier	nBytesDecoded
>1080	ExpressionStatement	 
>1081	AssignmentExpr	dwSourceSize = ( int ) ( pszInBuffer - lpszString - 1 )
>1082	CastExpression	( int ) ( pszInBuffer - lpszString - 1 )
>1083	AdditiveExpression	pszInBuffer - lpszString - 1
>1084	AdditiveExpression	lpszString - 1
>1085	PrimaryExpression	1
>1086	Identifier	lpszString
>1087	Identifier	pszInBuffer
>1088	CastTarget	int
>1089	Identifier	dwSourceSize
>1090	WhileStatement	while ( __pBase64Reverse [ * ( pszInBuffer ++ ) ] <= 63 )
>1091	ExpressionStatement	 
>1092	Condition	 
>1093	RelationalExpression	__pBase64Reverse [ * ( pszInBuffer ++ ) ] <= 63
>1094	PrimaryExpression	63
>1095	ArrayIndexing	__pBase64Reverse [ * ( pszInBuffer ++ ) ]
>1096	UnaryOp	* ( pszInBuffer ++ )
>1097	IncDecOp	pszInBuffer ++
>1098	IncDec	++
>1099	Identifier	pszInBuffer
>1100	UnaryOperator	*
>1101	Identifier	__pBase64Reverse
>1102	ExpressionStatement	 
>1103	AssignmentExpr	pszInBuffer = ( char * ) lpszString
>1104	CastExpression	( char * ) lpszString
>1105	Identifier	lpszString
>1106	CastTarget	char *
>1107	Identifier	pszInBuffer
>1108	IdentifierDeclStatement	 
>1109	IdentifierDecl	* pszOutBuffer
>1110	Identifier	pszOutBuffer
>1111	IdentifierDeclType	unsigned char *
>1112	IdentifierDeclStatement	 
>1113	IdentifierDecl	* pszInBuffer = ( char * ) lpszString
>1114	AssignmentExpr	* pszInBuffer = ( char * ) lpszString
>1115	CastExpression	( char * ) lpszString
>1116	Identifier	lpszString
>1117	CastTarget	char *
>1118	Identifier	pszInBuffer
>1119	Identifier	pszInBuffer
>1120	IdentifierDeclType	char *
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	nBytesDecoded
>1123	Identifier	nBytesDecoded
>1124	IdentifierDeclType	int
<3=18,17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<18=160,153,21,19
<19=20
<21=146,22
<22=142,126,125,124,123,116,105,104,103,102,45,32,28,27,26,25,23
<23=24
<28=29
<29=31,30
<32=33
<33=35,34
<35=44,36
<36=38,37
<38=40,39
<40=41
<41=43,42
<45=88,74,56,46
<46=47
<47=55,48
<48=50,49
<50=52,51
<52=54,53
<56=57
<57=67,58
<58=66,59
<59=61,60
<61=63,62
<63=65,64
<67=73,68
<68=70,69
<70=72,71
<74=75
<75=83,76
<76=82,77
<77=79,78
<79=81,80
<83=87,84
<84=86,85
<88=89
<89=101,90
<90=100,91
<91=95,92
<92=94,93
<95=99,96
<96=98,97
<105=106
<106=115,107
<107=114,108
<108=110,109
<110=111
<111=113,112
<116=117
<117=122,121,118
<118=120,119
<126=127
<127=141,140,128
<128=139,129
<129=131,130
<131=133,132
<133=135,134
<135=136
<136=138,137
<142=143
<143=145,144
<146=147
<147=149,148
<149=150
<150=152,151
<153=154
<154=159,158,155
<155=157,156
<160=161
<161=163,162
<181=196,195,182
<182=192,189,186,183
<183=185,184
<186=188,187
<189=191,190
<192=194,193
<196=338,199,197
<197=198
<199=331,200
<200=327,320,306,297,296,295,294,287,283,282,281,280,216,210,206,205,204,203,201
<201=202
<206=207
<207=209,208
<210=211
<211=213,212
<213=215,214
<216=252,240,227,217
<217=218
<218=226,219
<219=221,220
<221=223,222
<223=225,224
<227=234,228
<228=230,229
<230=231
<231=233,232
<234=235
<235=239,236
<236=238,237
<240=241
<241=249,242
<242=248,243
<243=247,244
<244=246,245
<249=251,250
<252=253
<253=279,254
<254=278,255
<255=269,256
<256=258,257
<258=260,259
<260=268,261
<261=267,262
<262=264,263
<264=266,265
<269=271,270
<271=277,272
<272=276,273
<273=275,274
<283=284
<284=286,285
<287=288
<288=293,292,289
<289=291,290
<297=298
<298=305,304,299
<299=303,300
<300=302,301
<306=307
<307=319,318,308
<308=317,309
<309=311,310
<311=313,312
<313=314
<314=316,315
<320=321
<321=326,325,322
<322=324,323
<327=328
<328=330,329
<331=332
<332=334,333
<334=335
<335=337,336
<338=339
<339=341,340
<365=371,370,366
<366=367
<367=369,368
<371=461,374,372
<372=373
<374=454,375
<375=435,424,390,376
<376=388,377
<377=378
<378=384,379
<379=380
<380=381
<381=383,382
<384=385
<385=387,386
<388=389
<390=391
<391=422,392
<392=413,404,400,393
<393=394
<394=396,395
<396=397
<397=399,398
<400=401
<401=403,402
<404=405
<405=412,406
<406=408,407
<408=409
<409=411,410
<413=414
<414=421,415
<415=417,416
<417=418
<418=420,419
<422=423
<424=425
<425=431,426
<426=427
<427=428
<428=430,429
<431=432
<432=434,433
<435=436
<436=453,452,437
<437=451,438
<438=449,439
<439=440
<440=441
<441=443,442
<443=445,444
<445=446
<446=448,447
<449=450
<454=455
<455=457,456
<457=458
<458=460,459
<461=462
<462=464,463
<476=482,481,477
<477=478
<478=480,479
<482=572,485,483
<483=484
<485=565,486
<486=546,535,501,487
<487=499,488
<488=489
<489=495,490
<490=491
<491=492
<492=494,493
<495=496
<496=498,497
<499=500
<501=502
<502=533,503
<503=524,515,511,504
<504=505
<505=507,506
<507=508
<508=510,509
<511=512
<512=514,513
<515=516
<516=523,517
<517=519,518
<519=520
<520=522,521
<524=525
<525=532,526
<526=528,527
<528=529
<529=531,530
<533=534
<535=536
<536=542,537
<537=538
<538=539
<539=541,540
<542=543
<543=545,544
<546=547
<547=564,563,548
<548=562,549
<549=560,550
<550=551
<551=552
<552=554,553
<554=556,555
<556=557
<557=559,558
<560=561
<565=566
<566=568,567
<568=569
<569=571,570
<572=573
<573=575,574
<587=602,601,588
<588=598,595,592,589
<589=591,590
<592=594,593
<595=597,596
<598=600,599
<602=852,838,817,808,792,785,781,772,636,630,615,605,603
<603=604
<605=606
<606=612,607
<607=611,608
<608=610,609
<612=614,613
<615=616
<616=628,617
<617=618
<618=619
<619=625,620
<620=624,621
<621=623,622
<625=627,626
<628=629
<630=631
<631=633,632
<633=635,634
<636=764,760,637
<637=752,748,737,733,729,718,714,702,690,678,666,655,642,638
<638=639
<639=641,640
<642=649,643
<643=644
<644=646,645
<646=648,647
<649=650
<650=654,651
<651=653,652
<655=662,656
<656=657
<657=659,658
<659=661,660
<662=663
<663=665,664
<666=667
<667=675,668
<668=674,669
<669=671,670
<671=673,672
<675=677,676
<678=679
<679=687,680
<680=686,681
<681=683,682
<683=685,684
<687=689,688
<690=691
<691=699,692
<692=698,693
<693=695,694
<695=697,696
<699=701,700
<702=703
<703=711,704
<704=710,705
<705=707,706
<707=709,708
<711=713,712
<714=715
<715=717,716
<718=725,719
<719=720
<720=724,721
<721=723,722
<725=726
<726=728,727
<729=730
<730=732,731
<733=734
<734=736,735
<737=744,738
<738=739
<739=743,740
<740=742,741
<744=745
<745=747,746
<748=749
<749=751,750
<752=753
<753=759,754
<754=758,755
<755=757,756
<760=761
<761=763,762
<764=765
<765=766
<766=771,770,767
<767=769,768
<772=773
<773=780,779,774
<774=778,775
<775=777,776
<781=782
<782=784,783
<785=786
<786=791,790,787
<787=789,788
<792=802,793
<793=796,794
<794=795
<796=797
<797=799,798
<799=801,800
<802=803
<803=807,804
<804=806,805
<808=809
<809=816,810
<810=814,811
<811=812
<812=813
<814=815
<817=834,829,818
<818=819
<819=820
<820=821
<821=828,822
<822=826,823
<823=824
<824=825
<826=827
<829=830
<830=831
<831=833,832
<834=835
<835=837,836
<838=848,839
<839=842,840
<840=841
<842=843
<843=845,844
<845=847,846
<848=849
<849=851,850
<852=856,853
<853=855,854
<856=858,857
<884=899,898,885
<885=895,892,889,886
<886=888,887
<889=891,890
<892=894,893
<895=897,896
<899=1121,1112,1108,1102,1090,1080,1069,1053,1047,1041,944,916,908,902,900
<900=901
<902=903
<903=905,904
<905=907,906
<908=909
<909=911,910
<911=915,912
<912=914,913
<916=940,917
<917=918
<918=930,925,919
<919=920
<920=921
<921=922
<922=924,923
<925=926
<926=927
<927=929,928
<930=931
<931=933,932
<933=939,934
<934=938,935
<935=937,936
<940=941
<941=943,942
<944=1037,945
<945=1013,989,967,963,946
<946=959,954,947
<947=948
<948=950,949
<950=951
<951=953,952
<954=955
<955=956
<956=958,957
<959=960
<960=962,961
<963=964
<964=966,965
<967=968
<968=984,969
<969=983,970
<970=976,971
<971=975,972
<972=974,973
<976=978,977
<978=982,979
<979=981,980
<984=988,985
<985=987,986
<989=990
<990=1008,991
<991=1007,992
<992=1000,993
<993=995,994
<995=999,996
<996=998,997
<1000=1002,1001
<1002=1006,1003
<1003=1005,1004
<1008=1012,1009
<1009=1011,1010
<1013=1014
<1014=1032,1015
<1015=1031,1016
<1016=1024,1017
<1017=1019,1018
<1019=1023,1020
<1020=1022,1021
<1024=1026,1025
<1026=1030,1027
<1027=1029,1028
<1032=1036,1033
<1033=1035,1034
<1037=1038
<1038=1040,1039
<1041=1042
<1042=1046,1043
<1043=1045,1044
<1047=1048
<1048=1052,1049
<1049=1051,1050
<1053=1063,1054
<1054=1057,1055
<1055=1056
<1057=1058
<1058=1060,1059
<1060=1062,1061
<1063=1064
<1064=1066,1065
<1066=1068,1067
<1069=1070
<1070=1079,1071
<1071=1073,1072
<1073=1077,1074
<1074=1075
<1075=1076
<1077=1078
<1080=1081
<1081=1089,1082
<1082=1088,1083
<1083=1087,1084
<1084=1086,1085
<1090=1092,1091
<1092=1093
<1093=1095,1094
<1095=1101,1096
<1096=1100,1097
<1097=1099,1098
<1102=1103
<1103=1107,1104
<1104=1106,1105
<1108=1109
<1109=1111,1110
<1112=1113
<1113=1120,1119,1114
<1114=1118,1115
<1115=1117,1116
<1121=1122
<1122=1124,1123
