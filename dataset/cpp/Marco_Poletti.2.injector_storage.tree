>3	FunctionDef	multipleBindingsError (TypeId type)
>4	ParameterList	TypeId type
>5	Parameter	 
>6	Identifier	type
>7	ParameterType	TypeId
>8	ReturnType	std 
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	AdditiveExpression	\"Fatal injection error
>12	AdditiveExpression	type . type_info -> name ( ) + \" was provided more than once, with different bindings.\n\" + \"This was \
>13	AdditiveExpression	\" was provided more than once, with different bindings.\n\" + \"This was not caught at compile time because \
>14	AdditiveExpression	\"This was not caught at compile time because at least one of the involved components bound this type \
>15	AdditiveExpression	\"If the type has a default constructor or an Inject annotation, this problem may arise even if this type \
>16	PrimaryExpression	\"If the source of the problem is unclear, try exposing this type in all the component signatures where it's bound; \
>17	PrimaryExpression	\"If the type has a default constructor or an Inject annotation, this problem may arise even if this type is bound/\
>18	PrimaryExpression	\"This was not caught at compile time because at least one of the involved components bound this type but didn't \
>19	PrimaryExpression	\" was provided more than once, with different bindings.\n\"
>20	CallExpression	type . type_info -> name ( )
>21	ArgumentList	 
>22	Callee	type . type_info -> name
>23	PtrMemberAccess	type . type_info -> name
>24	Identifier	name
>25	MemberAccess	type . type_info
>26	Identifier	type_info
>27	Identifier	type
>28	PrimaryExpression	\"Fatal injection error
>37	FunctionDef	InjectorStorage 
>38	ParameterList	const std 
>39	Parameter	 
>40	Identifier	error
>41	ParameterType	const std 
>42	ReturnType	void
>43	CompoundStatement	 
>44	ExpressionStatement	 
>45	CallExpression	exit ( 1 )
>46	ArgumentList	1
>47	Argument	1
>48	PrimaryExpression	1
>49	Callee	exit
>50	Identifier	exit
>51	ExpressionStatement	 
>52	ShiftExpression	std 
>53	ShiftExpression	\"Fatal injection error
>54	ShiftExpression	error << std 
>55	Identifier	std 
>56	Identifier	error
>57	PrimaryExpression	\"Fatal injection error
>58	Identifier	std 
>88	FunctionDef	getId ()
>89	ParameterList	 
>90	ReturnType	Id
>91	CompoundStatement	 
>92	ReturnStatement	 
>93	CallExpression	Id ( )
>94	ArgumentList	 
>95	Callee	Id
>96	Identifier	Id
>101	FunctionDef	isTerminal ()
>102	ParameterList	 
>103	ReturnType	bool
>104	CompoundStatement	 
>105	ReturnStatement	 
>106	Identifier	false
>111	FunctionDef	getEdgesBegin ()
>112	ParameterList	 
>113	ReturnType	Id *
>114	CompoundStatement	 
>115	ReturnStatement	 
>116	Identifier	nullptr
>121	FunctionDef	getEdgesEnd ()
>122	ParameterList	 
>123	ReturnType	Id *
>124	CompoundStatement	 
>125	ReturnStatement	 
>126	Identifier	nullptr
>131	FunctionDef	getValue ()
>132	ParameterList	 
>133	ReturnType	Value
>134	CompoundStatement	 
>135	ReturnStatement	 
>136	CallExpression	Value ( )
>137	ArgumentList	 
>138	Callee	Value
>139	Identifier	Value
>152	FunctionDef	InjectorStorage 
>153	ParameterList	NormalizedMultibindingData & bindingDataForMultibinding
>154	Parameter	 
>155	Identifier	bindingDataForMultibinding
>156	ParameterType	NormalizedMultibindingData &
>157	ReturnType	void
>158	CompoundStatement	 
>159	CompoundStatement	 
>160	IfStatement	if ( elem . object == nullptr )
>161	CompoundStatement	 
>162	ExpressionStatement	 
>163	AssignmentExpr	elem . object = elem . create ( * this )
>164	CallExpression	elem . create ( * this )
>165	ArgumentList	* this
>166	Argument	* this
>167	UnaryOp	* this
>168	Identifier	this
>169	UnaryOperator	*
>170	Callee	elem . create
>171	MemberAccess	elem . create
>172	Identifier	create
>173	Identifier	elem
>174	MemberAccess	elem . object
>175	Identifier	object
>176	Identifier	elem
>177	Condition	 
>178	EqualityExpression	elem . object == nullptr
>179	Identifier	nullptr
>180	MemberAccess	elem . object
>181	Identifier	object
>182	Identifier	elem
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Label	 
>188	Identifier	elem
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>205	FunctionDef	InjectorStorage 
>206	ParameterList	TypeId typeInfo
>207	Parameter	 
>208	Identifier	typeInfo
>209	ParameterType	TypeId
>210	ReturnType	void *
>211	CompoundStatement	 
>212	ReturnStatement	 
>213	CallExpression	bindingDataVector -> get_multibindings_vector ( * this ) . get ( )
>214	ArgumentList	 
>215	Callee	bindingDataVector -> get_multibindings_vector ( * this ) . get
>216	MemberAccess	bindingDataVector -> get_multibindings_vector ( * this ) . get
>217	Identifier	get
>218	CallExpression	bindingDataVector -> get_multibindings_vector ( * this )
>219	ArgumentList	* this
>220	Argument	* this
>221	UnaryOp	* this
>222	Identifier	this
>223	UnaryOperator	*
>224	Callee	bindingDataVector -> get_multibindings_vector
>225	PtrMemberAccess	bindingDataVector -> get_multibindings_vector
>226	Identifier	get_multibindings_vector
>227	Identifier	bindingDataVector
>228	IfStatement	if ( bindingDataVector == nullptr )
>229	CompoundStatement	 
>230	ReturnStatement	 
>231	Identifier	nullptr
>232	Condition	 
>233	EqualityExpression	bindingDataVector == nullptr
>234	Identifier	nullptr
>235	Identifier	bindingDataVector
>236	IdentifierDeclStatement	 
>237	IdentifierDecl	* bindingDataVector = getNormalizedMultibindingData ( typeInfo )
>238	AssignmentExpr	* bindingDataVector = getNormalizedMultibindingData ( typeInfo )
>239	CallExpression	getNormalizedMultibindingData ( typeInfo )
>240	ArgumentList	typeInfo
>241	Argument	typeInfo
>242	Identifier	typeInfo
>243	Callee	getNormalizedMultibindingData
>244	Identifier	getNormalizedMultibindingData
>245	Identifier	bindingDataVector
>246	Identifier	bindingDataVector
>247	IdentifierDeclType	NormalizedMultibindingData *
>260	FunctionDef	InjectorStorage 
>261	ParameterList	 
>262	ReturnType	void
>263	CompoundStatement	 
>264	CompoundStatement	 
>265	ExpressionStatement	 
>266	CallExpression	typeInfoInfoPair . second . get_multibindings_vector ( * this )
>267	ArgumentList	* this
>268	Argument	* this
>269	UnaryOp	* this
>270	Identifier	this
>271	UnaryOperator	*
>272	Callee	typeInfoInfoPair . second . get_multibindings_vector
>273	MemberAccess	typeInfoInfoPair . second . get_multibindings_vector
>274	Identifier	get_multibindings_vector
>275	MemberAccess	typeInfoInfoPair . second
>276	Identifier	second
>277	Identifier	typeInfoInfoPair
>278	Statement	 
>279	Statement	 
>280	Label	 
>281	Identifier	typeInfoInfoPair
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
<3=9,8,4
<4=5
<5=7,6
<9=10
<10=11
<11=28,12
<12=20,13
<13=19,14
<14=18,15
<15=17,16
<20=22,21
<22=23
<23=25,24
<25=27,26
<37=43,42,38
<38=39
<39=41,40
<43=51,44
<44=45
<45=49,46
<46=47
<47=48
<49=50
<51=52
<52=58,53
<53=57,54
<54=56,55
<88=91,90,89
<91=92
<92=93
<93=95,94
<95=96
<101=104,103,102
<104=105
<105=106
<111=114,113,112
<114=115
<115=116
<121=124,123,122
<124=125
<125=126
<131=134,133,132
<134=135
<135=136
<136=138,137
<138=139
<152=158,157,153
<153=154
<154=156,155
<158=194,193,192,191,190,189,187,186,185,184,183,159
<159=160
<160=177,161
<161=162
<162=163
<163=174,164
<164=170,165
<165=166
<166=167
<167=169,168
<170=171
<171=173,172
<174=176,175
<177=178
<178=180,179
<180=182,181
<187=188
<205=211,210,206
<206=207
<207=209,208
<211=236,228,212
<212=213
<213=215,214
<215=216
<216=218,217
<218=224,219
<219=220
<220=221
<221=223,222
<224=225
<225=227,226
<228=232,229
<229=230
<230=231
<232=233
<233=235,234
<236=237
<237=247,246,238
<238=245,239
<239=243,240
<240=241
<241=242
<243=244
<260=263,262,261
<263=285,284,283,282,280,279,278,264
<264=265
<265=266
<266=272,267
<267=268
<268=269
<269=271,270
<272=273
<273=275,274
<275=277,276
<280=281
