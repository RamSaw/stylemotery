>10	FunctionDef	init (int a [ ] , int n)
>11	ParameterList	int a [ ] , int n
>12	Parameter	 
>13	Identifier	n
>14	ParameterType	int
>15	Parameter	 
>16	Identifier	a
>17	ParameterType	int [ ]
>18	ReturnType	node *
>19	CompoundStatement	 
>20	ReturnStatement	 
>21	Identifier	head
>22	ForStatement	for ( int i = 0 ; i < n ; ++ i )
>23	CompoundStatement	 
>24	ExpressionStatement	 
>25	AssignmentExpr	p = nd
>26	Identifier	nd
>27	Identifier	p
>28	ExpressionStatement	 
>29	AssignmentExpr	p -> next = nd
>30	Identifier	nd
>31	PtrMemberAccess	p -> next
>32	Identifier	next
>33	Identifier	p
>34	IfStatement	if ( i == 0 )
>35	CompoundStatement	 
>36	ContinueStatement	 
>37	ExpressionStatement	 
>38	AssignmentExpr	head = p = nd
>39	AssignmentExpr	p = nd
>40	Identifier	nd
>41	Identifier	p
>42	Identifier	head
>43	Condition	 
>44	EqualityExpression	i == 0
>45	PrimaryExpression	0
>46	Identifier	i
>47	ExpressionStatement	 
>48	AssignmentExpr	nd -> data = a [ i ]
>49	ArrayIndexing	a [ i ]
>50	Identifier	i
>51	Identifier	a
>52	PtrMemberAccess	nd -> data
>53	Identifier	data
>54	Identifier	nd
>55	IdentifierDeclStatement	 
>56	IdentifierDecl	* nd = new node ( )
>57	AssignmentExpr	* nd = new node ( )
>58	UnaryExpression	new node ( )
>59	Identifier	nd
>60	Identifier	nd
>61	IdentifierDeclType	node *
>62	UnaryExpression	 
>63	Identifier	i
>64	IncDec	++
>65	Condition	 
>66	RelationalExpression	i < n
>67	Identifier	n
>68	Identifier	i
>69	ForInit	 
>70	IdentifierDeclStatement	int i = 0 ;
>71	IdentifierDecl	i = 0
>72	AssignmentExpr	i = 0
>73	PrimaryExpression	0
>74	Identifier	i
>75	Identifier	i
>76	IdentifierDeclType	int
>77	IdentifierDeclStatement	 
>78	IdentifierDecl	* p
>79	Identifier	p
>80	IdentifierDeclType	node *
>81	IdentifierDecl	* head
>82	Identifier	head
>83	IdentifierDeclType	node *
>99	FunctionDef	remove (node * c)
>100	ParameterList	node * c
>101	Parameter	 
>102	Identifier	c
>103	ParameterType	node *
>104	ReturnType	bool
>105	CompoundStatement	 
>106	ReturnStatement	 
>107	Identifier	true
>108	ExpressionStatement	 
>109	Identifier	q
>110	Statement	 
>111	ExpressionStatement	 
>112	AssignmentExpr	c -> next = q -> next
>113	PtrMemberAccess	q -> next
>114	Identifier	next
>115	Identifier	q
>116	PtrMemberAccess	c -> next
>117	Identifier	next
>118	Identifier	c
>119	ExpressionStatement	 
>120	AssignmentExpr	c -> data = q -> data
>121	PtrMemberAccess	q -> data
>122	Identifier	data
>123	Identifier	q
>124	PtrMemberAccess	c -> data
>125	Identifier	data
>126	Identifier	c
>127	IdentifierDeclStatement	 
>128	IdentifierDecl	* q = c -> next
>129	AssignmentExpr	* q = c -> next
>130	PtrMemberAccess	c -> next
>131	Identifier	next
>132	Identifier	c
>133	Identifier	q
>134	Identifier	q
>135	IdentifierDeclType	node *
>136	IfStatement	if ( c == NULL || c -> next == NULL )
>137	ReturnStatement	 
>138	Identifier	false
>139	Condition	 
>140	OrExpression	c == NULL || c -> next == NULL
>141	EqualityExpression	c -> next == NULL
>142	Identifier	NULL
>143	PtrMemberAccess	c -> next
>144	Identifier	next
>145	Identifier	c
>146	EqualityExpression	c == NULL
>147	Identifier	NULL
>148	Identifier	c
>163	FunctionDef	print (node * head)
>164	ParameterList	node * head
>165	Parameter	 
>166	Identifier	head
>167	ParameterType	node *
>168	ReturnType	void
>169	CompoundStatement	 
>170	ExpressionStatement	 
>171	ShiftExpression	cout << endl
>172	Identifier	endl
>173	Identifier	cout
>174	WhileStatement	while ( head )
>175	CompoundStatement	 
>176	ExpressionStatement	 
>177	AssignmentExpr	head = head -> next
>178	PtrMemberAccess	head -> next
>179	Identifier	next
>180	Identifier	head
>181	Identifier	head
>182	ExpressionStatement	 
>183	ShiftExpression	cout << head -> data << \" \"
>184	ShiftExpression	head -> data << \" \"
>185	PrimaryExpression	\" \"
>186	PtrMemberAccess	head -> data
>187	Identifier	data
>188	Identifier	head
>189	Identifier	cout
>190	Condition	 
>191	Identifier	head
>198	FunctionDef	main ()
>199	ParameterList	 
>200	ReturnType	int
>201	CompoundStatement	 
>202	ReturnStatement	 
>203	PrimaryExpression	0
>204	IfStatement	if ( remove ( c ) )
>205	ElseStatement	else
>206	ExpressionStatement	 
>207	ShiftExpression	cout << \"failure\" << endl
>208	ShiftExpression	\"failure\" << endl
>209	Identifier	endl
>210	PrimaryExpression	\"failure\"
>211	Identifier	cout
>212	ExpressionStatement	 
>213	CallExpression	print ( head )
>214	ArgumentList	head
>215	Argument	head
>216	Identifier	head
>217	Callee	print
>218	Identifier	print
>219	Condition	 
>220	CallExpression	remove ( c )
>221	ArgumentList	c
>222	Argument	c
>223	Identifier	c
>224	Callee	remove
>225	Identifier	remove
>226	ExpressionStatement	 
>227	CallExpression	print ( head )
>228	ArgumentList	head
>229	Argument	head
>230	Identifier	head
>231	Callee	print
>232	Identifier	print
>233	ForStatement	for ( int i = 1 ; i < cc ; ++ i )
>234	ExpressionStatement	 
>235	AssignmentExpr	c = c -> next
>236	PtrMemberAccess	c -> next
>237	Identifier	next
>238	Identifier	c
>239	Identifier	c
>240	UnaryExpression	 
>241	Identifier	i
>242	IncDec	++
>243	Condition	 
>244	RelationalExpression	i < cc
>245	Identifier	cc
>246	Identifier	i
>247	ForInit	 
>248	IdentifierDeclStatement	int i = 1 ;
>249	IdentifierDecl	i = 1
>250	AssignmentExpr	i = 1
>251	PrimaryExpression	1
>252	Identifier	i
>253	Identifier	i
>254	IdentifierDeclType	int
>255	IdentifierDeclStatement	 
>256	IdentifierDecl	* c = head
>257	AssignmentExpr	* c = head
>258	Identifier	head
>259	Identifier	head
>260	Identifier	c
>261	IdentifierDeclType	node *
>262	IdentifierDeclStatement	 
>263	IdentifierDecl	cc = 3
>264	AssignmentExpr	cc = 3
>265	PrimaryExpression	3
>266	Identifier	cc
>267	Identifier	cc
>268	IdentifierDeclType	int
>269	IdentifierDeclStatement	 
>270	IdentifierDecl	* head = init ( a , n )
>271	AssignmentExpr	* head = init ( a , n )
>272	CallExpression	init ( a , n )
>273	ArgumentList	a
>274	Argument	n
>275	Identifier	n
>276	Argument	a
>277	Identifier	a
>278	Callee	init
>279	Identifier	init
>280	Identifier	head
>281	Identifier	head
>282	IdentifierDeclType	node *
>283	IdentifierDeclStatement	 
>284	IdentifierDecl	a [ ] = { 9 , 2 , 1 , 3 , 5 , 6 , 2 , 6 , 3 , 1 }
>285	AssignmentExpr	a [ ] = { 9 , 2 , 1 , 3 , 5 , 6 , 2 , 6 , 3 , 1 }
>286	InitializerList	9
>287	PrimaryExpression	1
>288	PrimaryExpression	3
>289	PrimaryExpression	6
>290	PrimaryExpression	2
>291	PrimaryExpression	6
>292	PrimaryExpression	5
>293	PrimaryExpression	3
>294	PrimaryExpression	1
>295	PrimaryExpression	2
>296	PrimaryExpression	9
>297	Identifier	a
>298	Identifier	a
>299	IdentifierDeclType	int [ ]
>300	IdentifierDeclStatement	 
>301	IdentifierDecl	n = 10
>302	AssignmentExpr	n = 10
>303	PrimaryExpression	10
>304	Identifier	n
>305	Identifier	n
>306	IdentifierDeclType	int
<10=19,18,11
<11=15,12
<12=14,13
<15=17,16
<19=77,22,20
<20=21
<22=69,65,62,23
<23=55,47,34,28,24
<24=25
<25=27,26
<28=29
<29=31,30
<31=33,32
<34=43,35
<35=37,36
<37=38
<38=42,39
<39=41,40
<43=44
<44=46,45
<47=48
<48=52,49
<49=51,50
<52=54,53
<55=56
<56=61,60,57
<57=59,58
<62=64,63
<65=66
<66=68,67
<69=70
<70=71
<71=76,75,72
<72=74,73
<77=81,78
<78=80,79
<81=83,82
<99=105,104,100
<100=101
<101=103,102
<105=136,127,119,111,110,108,106
<106=107
<108=109
<111=112
<112=116,113
<113=115,114
<116=118,117
<119=120
<120=124,121
<121=123,122
<124=126,125
<127=128
<128=135,134,129
<129=133,130
<130=132,131
<136=139,137
<137=138
<139=140
<140=146,141
<141=143,142
<143=145,144
<146=148,147
<163=169,168,164
<164=165
<165=167,166
<169=174,170
<170=171
<171=173,172
<174=190,175
<175=182,176
<176=177
<177=181,178
<178=180,179
<182=183
<183=189,184
<184=186,185
<186=188,187
<190=191
<198=201,200,199
<201=300,283,269,262,255,233,226,204,202
<202=203
<204=219,212,205
<205=206
<206=207
<207=211,208
<208=210,209
<212=213
<213=217,214
<214=215
<215=216
<217=218
<219=220
<220=224,221
<221=222
<222=223
<224=225
<226=227
<227=231,228
<228=229
<229=230
<231=232
<233=247,243,240,234
<234=235
<235=239,236
<236=238,237
<240=242,241
<243=244
<244=246,245
<247=248
<248=249
<249=254,253,250
<250=252,251
<255=256
<256=261,260,257
<257=259,258
<262=263
<263=268,267,264
<264=266,265
<269=270
<270=282,281,271
<271=280,272
<272=278,273
<273=276,274
<274=275
<276=277
<278=279
<283=284
<284=299,298,285
<285=297,286
<286=296,295,294,293,292,291,290,289,288,287
<300=301
<301=306,305,302
<302=304,303
