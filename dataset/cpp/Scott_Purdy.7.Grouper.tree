>3	FunctionDef	Grouper 
>4	ParameterList	size_type transitionMemory , size_type topNeighbors , size_type maxNGroups , size_type maxGroupSize , bool symmetricTam , \
>5	Parameter	 
>6	Identifier	rescaleTBI
>7	ParameterType	bool
>8	Parameter	 
>9	Identifier	segmentSize
>10	ParameterType	size_type
>11	Parameter	 
>12	Identifier	n_tbis
>13	ParameterType	size_type
>14	Parameter	 
>15	Identifier	hot_handleSelf
>16	ParameterType	bool
>17	Parameter	 
>18	Identifier	hot_maxCoincidenceSplitsPerRound
>19	ParameterType	size_type
>20	Parameter	 
>21	Identifier	hot_maxPerStage
>22	ParameterType	int
>23	Parameter	 
>24	Identifier	hot_iterPerStage
>25	ParameterType	size_type
>26	Parameter	 
>27	Identifier	hot_min_cnt2
>28	ParameterType	double
>29	Parameter	 
>30	Identifier	hot_markovOrder
>31	ParameterType	size_type
>32	Parameter	 
>33	Identifier	mode
>34	ParameterType	Mode
>35	Parameter	 
>36	Identifier	ahc_lgp
>37	ParameterType	value_type
>38	Parameter	 
>39	Identifier	overlappingGroups
>40	ParameterType	bool
>41	Parameter	 
>42	Identifier	symmetricTam
>43	ParameterType	bool
>44	Parameter	 
>45	Identifier	maxGroupSize
>46	ParameterType	size_type
>47	Parameter	 
>48	Identifier	maxNGroups
>49	ParameterType	size_type
>50	Parameter	 
>51	Identifier	topNeighbors
>52	ParameterType	size_type
>53	Parameter	 
>54	Identifier	transitionMemory
>55	ParameterType	size_type
>56	CompoundStatement	 
>57	ExpressionStatement	 
>58	ShiftExpression	NTA_CHECK ( n_tbis >= 0 ) << where << \"Invalid number of tbis
>59	ShiftExpression	where << \"Invalid number of tbis
>60	ShiftExpression	\"Invalid number of tbis
>61	ShiftExpression	n_tbis << \" - Should be >= 0\"
>62	PrimaryExpression	\" - Should be >= 0\"
>63	Identifier	n_tbis
>64	PrimaryExpression	\"Invalid number of tbis
>65	Identifier	where
>66	CallExpression	NTA_CHECK ( n_tbis >= 0 )
>67	ArgumentList	n_tbis >= 0
>68	Argument	n_tbis >= 0
>69	RelationalExpression	n_tbis >= 0
>70	PrimaryExpression	0
>71	Identifier	n_tbis
>72	Callee	NTA_CHECK
>73	Identifier	NTA_CHECK
>74	ExpressionStatement	 
>75	ShiftExpression	NTA_CHECK ( maxGroupSize > 0 ) << where << \"Invalid max group size
>76	ShiftExpression	where << \"Invalid max group size
>77	ShiftExpression	\"Invalid max group size
>78	ShiftExpression	maxGroupSize << \" - Max group size should be > 0\"
>79	PrimaryExpression	\" - Max group size should be > 0\"
>80	Identifier	maxGroupSize
>81	PrimaryExpression	\"Invalid max group size
>82	Identifier	where
>83	CallExpression	NTA_CHECK ( maxGroupSize > 0 )
>84	ArgumentList	maxGroupSize > 0
>85	Argument	maxGroupSize > 0
>86	RelationalExpression	maxGroupSize > 0
>87	PrimaryExpression	0
>88	Identifier	maxGroupSize
>89	Callee	NTA_CHECK
>90	Identifier	NTA_CHECK
>91	ExpressionStatement	 
>92	ShiftExpression	NTA_CHECK ( maxNGroups > 0 ) << where << \"Invalid max number of groups
>93	ShiftExpression	where << \"Invalid max number of groups
>94	ShiftExpression	\"Invalid max number of groups
>95	ShiftExpression	maxNGroups << \" - Max number of groups should be > 0\"
>96	PrimaryExpression	\" - Max number of groups should be > 0\"
>97	Identifier	maxNGroups
>98	PrimaryExpression	\"Invalid max number of groups
>99	Identifier	where
>100	CallExpression	NTA_CHECK ( maxNGroups > 0 )
>101	ArgumentList	maxNGroups > 0
>102	Argument	maxNGroups > 0
>103	RelationalExpression	maxNGroups > 0
>104	PrimaryExpression	0
>105	Identifier	maxNGroups
>106	Callee	NTA_CHECK
>107	Identifier	NTA_CHECK
>108	ExpressionStatement	 
>109	ShiftExpression	NTA_CHECK ( topNeighbors > 0 ) << where << \"Invalid top neighbors
>110	ShiftExpression	where << \"Invalid top neighbors
>111	ShiftExpression	\"Invalid top neighbors
>112	ShiftExpression	topNeighbors << \" - Top neighbors should be > 0\"
>113	PrimaryExpression	\" - Top neighbors should be > 0\"
>114	Identifier	topNeighbors
>115	PrimaryExpression	\"Invalid top neighbors
>116	Identifier	where
>117	CallExpression	NTA_CHECK ( topNeighbors > 0 )
>118	ArgumentList	topNeighbors > 0
>119	Argument	topNeighbors > 0
>120	RelationalExpression	topNeighbors > 0
>121	PrimaryExpression	0
>122	Identifier	topNeighbors
>123	Callee	NTA_CHECK
>124	Identifier	NTA_CHECK
>125	IdentifierDeclStatement	 
>126	IdentifierDecl	* where = \"Grouper
>127	AssignmentExpr	* where = \"Grouper
>128	PrimaryExpression	\"Grouper
>129	Identifier	where
>130	Identifier	where
>131	IdentifierDeclType	const char *
>153	FunctionDef	Grouper 
>154	ParameterList	std 
>155	Parameter	 
>156	Identifier	n_tbis
>157	ParameterType	size_type
>158	Parameter	 
>159	Identifier	inStream
>160	ParameterType	std 
>161	CompoundStatement	 
>162	ExpressionStatement	 
>163	CallExpression	readState ( inStream )
>164	ArgumentList	inStream
>165	Argument	inStream
>166	Identifier	inStream
>167	Callee	readState
>168	Identifier	readState
>174	FunctionDef	Grouper 
>175	ParameterList	 
>176	CompoundStatement	 
>180	FunctionDef	Grouper 
>181	ParameterList	 
>182	ReturnType	void
>183	CompoundStatement	 
>184	ExpressionStatement	 
>185	CallExpression	tbiBuffer_ . resize ( reqBufSize , ( value_type ) 0.0 )
>186	ArgumentList	reqBufSize
>187	Argument	( value_type ) 0.0
>188	CastExpression	( value_type ) 0.0
>189	PrimaryExpression	0.0
>190	CastTarget	value_type
>191	Argument	reqBufSize
>192	Identifier	reqBufSize
>193	Callee	tbiBuffer_ . resize
>194	MemberAccess	tbiBuffer_ . resize
>195	Identifier	resize
>196	Identifier	tbiBuffer_
>197	ForStatement	for ( g = groups_ . begin ( ) ; g != groups_ . end ( ) ; ++ g )
>198	ExpressionStatement	 
>199	AssignmentExpr	reqBufSize = std 
>200	CallExpression	std 
>201	ArgumentList	( size_type ) g -> size ( )
>202	Argument	reqBufSize
>203	Identifier	reqBufSize
>204	Argument	( size_type ) g -> size ( )
>205	CastExpression	( size_type ) g -> size ( )
>206	CallExpression	g -> size ( )
>207	ArgumentList	 
>208	Callee	g -> size
>209	PtrMemberAccess	g -> size
>210	Identifier	size
>211	Identifier	g
>212	CastTarget	size_type
>213	Callee	std 
>214	Identifier	std 
>215	Identifier	reqBufSize
>216	UnaryExpression	 
>217	Identifier	g
>218	IncDec	++
>219	Condition	 
>220	EqualityExpression	g != groups_ . end ( )
>221	CallExpression	groups_ . end ( )
>222	ArgumentList	 
>223	Callee	groups_ . end
>224	MemberAccess	groups_ . end
>225	Identifier	end
>226	Identifier	groups_
>227	Identifier	g
>228	ForInit	 
>229	AssignmentExpr	g = groups_ . begin ( )
>230	CallExpression	groups_ . begin ( )
>231	ArgumentList	 
>232	Callee	groups_ . begin
>233	MemberAccess	groups_ . begin
>234	Identifier	begin
>235	Identifier	groups_
>236	Identifier	g
>237	IdentifierDeclStatement	 
>238	IdentifierDecl	reqBufSize = ( size_type ) 0
>239	AssignmentExpr	reqBufSize = ( size_type ) 0
>240	CastExpression	( size_type ) 0
>241	PrimaryExpression	0
>242	CastTarget	size_type
>243	Identifier	reqBufSize
>244	Identifier	reqBufSize
>245	IdentifierDeclType	size_type
>246	ForStatement	for ( size_type i = 0 ; i != tbiCellOutputs_ . size ( ) ; ++ i )
>247	CompoundStatement	 
>248	ForStatement	for ( g = groups_ . begin ( ) ; g != groups_ . end ( ) ; ++ g , ++ j )
>249	ExpressionStatement	 
>250	CallExpression	tbiCellOutputs_ [ i ] [ j ] . resize ( g -> size ( ) , ( value_type ) 0.0 )
>251	ArgumentList	g -> size ( )
>252	Argument	( value_type ) 0.0
>253	CastExpression	( value_type ) 0.0
>254	PrimaryExpression	0.0
>255	CastTarget	value_type
>256	Argument	g -> size ( )
>257	CallExpression	g -> size ( )
>258	ArgumentList	 
>259	Callee	g -> size
>260	PtrMemberAccess	g -> size
>261	Identifier	size
>262	Identifier	g
>263	Callee	tbiCellOutputs_ [ i ] [ j ] . resize
>264	MemberAccess	tbiCellOutputs_ [ i ] [ j ] . resize
>265	Identifier	resize
>266	ArrayIndexing	tbiCellOutputs_ [ i ] [ j ]
>267	Identifier	j
>268	ArrayIndexing	tbiCellOutputs_ [ i ]
>269	Identifier	i
>270	Identifier	tbiCellOutputs_
>271	Expression	 
>272	UnaryExpression	++ j
>273	Identifier	j
>274	IncDec	++
>275	UnaryExpression	++ g
>276	Identifier	g
>277	IncDec	++
>278	Condition	 
>279	EqualityExpression	g != groups_ . end ( )
>280	CallExpression	groups_ . end ( )
>281	ArgumentList	 
>282	Callee	groups_ . end
>283	MemberAccess	groups_ . end
>284	Identifier	end
>285	Identifier	groups_
>286	Identifier	g
>287	ForInit	 
>288	AssignmentExpr	g = groups_ . begin ( )
>289	CallExpression	groups_ . begin ( )
>290	ArgumentList	 
>291	Callee	groups_ . begin
>292	MemberAccess	groups_ . begin
>293	Identifier	begin
>294	Identifier	groups_
>295	Identifier	g
>296	IdentifierDeclStatement	 
>297	IdentifierDecl	j = 0
>298	AssignmentExpr	j = 0
>299	PrimaryExpression	0
>300	Identifier	j
>301	Identifier	j
>302	IdentifierDeclType	size_type
>303	ExpressionStatement	 
>304	CallExpression	tbiCellOutputs_ [ i ] . resize ( groups_ . size ( ) )
>305	ArgumentList	groups_ . size ( )
>306	Argument	groups_ . size ( )
>307	CallExpression	groups_ . size ( )
>308	ArgumentList	 
>309	Callee	groups_ . size
>310	MemberAccess	groups_ . size
>311	Identifier	size
>312	Identifier	groups_
>313	Callee	tbiCellOutputs_ [ i ] . resize
>314	MemberAccess	tbiCellOutputs_ [ i ] . resize
>315	Identifier	resize
>316	ArrayIndexing	tbiCellOutputs_ [ i ]
>317	Identifier	i
>318	Identifier	tbiCellOutputs_
>319	UnaryExpression	 
>320	Identifier	i
>321	IncDec	++
>322	Condition	 
>323	EqualityExpression	i != tbiCellOutputs_ . size ( )
>324	CallExpression	tbiCellOutputs_ . size ( )
>325	ArgumentList	 
>326	Callee	tbiCellOutputs_ . size
>327	MemberAccess	tbiCellOutputs_ . size
>328	Identifier	size
>329	Identifier	tbiCellOutputs_
>330	Identifier	i
>331	ForInit	 
>332	IdentifierDeclStatement	size_type i = 0 ;
>333	IdentifierDecl	i = 0
>334	AssignmentExpr	i = 0
>335	PrimaryExpression	0
>336	Identifier	i
>337	Identifier	i
>338	IdentifierDeclType	size_type
>339	ExpressionStatement	 
>340	CallExpression	tbiCellOutputs_ . resize ( n_tbis_ )
>341	ArgumentList	n_tbis_
>342	Argument	n_tbis_
>343	Identifier	n_tbis_
>344	Callee	tbiCellOutputs_ . resize
>345	MemberAccess	tbiCellOutputs_ . resize
>346	Identifier	resize
>347	Identifier	tbiCellOutputs_
>348	ForStatement	for ( ; g != groups_ . end ( ) ; ++ g , ++ w )
>349	CompoundStatement	 
>350	ExpressionStatement	 
>351	CallExpression	w -> normalizeCols ( )
>352	ArgumentList	 
>353	Callee	w -> normalizeCols
>354	PtrMemberAccess	w -> normalizeCols
>355	Identifier	normalizeCols
>356	Identifier	w
>357	ExpressionStatement	 
>358	CallExpression	tam2 . getOuter ( * g , * g , * w )
>359	ArgumentList	* g
>360	Argument	* w
>361	UnaryOp	* w
>362	Identifier	w
>363	UnaryOperator	*
>364	Argument	* g
>365	UnaryOp	* g
>366	Identifier	g
>367	UnaryOperator	*
>368	Argument	* g
>369	UnaryOp	* g
>370	Identifier	g
>371	UnaryOperator	*
>372	Callee	tam2 . getOuter
>373	MemberAccess	tam2 . getOuter
>374	Identifier	getOuter
>375	Identifier	tam2
>376	Expression	 
>377	UnaryExpression	++ w
>378	Identifier	w
>379	IncDec	++
>380	UnaryExpression	++ g
>381	Identifier	g
>382	IncDec	++
>383	Condition	 
>384	EqualityExpression	g != groups_ . end ( )
>385	CallExpression	groups_ . end ( )
>386	ArgumentList	 
>387	Callee	groups_ . end
>388	MemberAccess	groups_ . end
>389	Identifier	end
>390	Identifier	groups_
>391	Identifier	g
>392	IdentifierDeclStatement	 
>393	IdentifierDecl	w = tbiCellWeights_ . begin ( )
>394	AssignmentExpr	w = tbiCellWeights_ . begin ( )
>395	CallExpression	tbiCellWeights_ . begin ( )
>396	ArgumentList	 
>397	Callee	tbiCellWeights_ . begin
>398	MemberAccess	tbiCellWeights_ . begin
>399	Identifier	begin
>400	Identifier	tbiCellWeights_
>401	Identifier	w
>402	Identifier	w
>403	IdentifierDeclType	TBICellWeightsVec 
>404	IdentifierDeclStatement	 
>405	IdentifierDecl	g = groups_ . begin ( )
>406	AssignmentExpr	g = groups_ . begin ( )
>407	CallExpression	groups_ . begin ( )
>408	ArgumentList	 
>409	Callee	groups_ . begin
>410	MemberAccess	groups_ . begin
>411	Identifier	begin
>412	Identifier	groups_
>413	Identifier	g
>414	Identifier	g
>415	IdentifierDeclType	Groups 
>416	ExpressionStatement	 
>417	CallExpression	tbiCellWeights_ . resize ( groups_ . size ( ) )
>418	ArgumentList	groups_ . size ( )
>419	Argument	groups_ . size ( )
>420	CallExpression	groups_ . size ( )
>421	ArgumentList	 
>422	Callee	groups_ . size
>423	MemberAccess	groups_ . size
>424	Identifier	size
>425	Identifier	groups_
>426	Callee	tbiCellWeights_ . resize
>427	MemberAccess	tbiCellWeights_ . resize
>428	Identifier	resize
>429	Identifier	tbiCellWeights_
>430	IfStatement	if ( symmetricTam_ )
>431	ExpressionStatement	 
>432	CallExpression	tam_ . addToTranspose ( tam2 )
>433	ArgumentList	tam2
>434	Argument	tam2
>435	Identifier	tam2
>436	Callee	tam_ . addToTranspose
>437	MemberAccess	tam_ . addToTranspose
>438	Identifier	addToTranspose
>439	Identifier	tam_
>440	Condition	 
>441	Identifier	symmetricTam_
>442	IdentifierDeclStatement	 
>443	IdentifierDecl	tam2 ( tam_ )
>444	Identifier	tam_
>445	Identifier	tam2
>446	IdentifierDeclType	IntegerTAM
>447	ExpressionStatement	 
>448	CallExpression	tbi_delete_ ( )
>449	ArgumentList	 
>450	Callee	tbi_delete_
>451	Identifier	tbi_delete_
>482	FunctionDef	Grouper 
>483	ParameterList	 
>484	ReturnType	void
>485	CompoundStatement	 
>486	ExpressionStatement	 
>487	CallExpression	tbiBuffer_ . clear ( )
>488	ArgumentList	 
>489	Callee	tbiBuffer_ . clear
>490	MemberAccess	tbiBuffer_ . clear
>491	Identifier	clear
>492	Identifier	tbiBuffer_
>493	ExpressionStatement	 
>494	CallExpression	tbiCellOutputs_ . clear ( )
>495	ArgumentList	 
>496	Callee	tbiCellOutputs_ . clear
>497	MemberAccess	tbiCellOutputs_ . clear
>498	Identifier	clear
>499	Identifier	tbiCellOutputs_
>500	ExpressionStatement	 
>501	CallExpression	tbiCellWeights_ . clear ( )
>502	ArgumentList	 
>503	Callee	tbiCellWeights_ . clear
>504	MemberAccess	tbiCellWeights_ . clear
>505	Identifier	clear
>506	Identifier	tbiCellWeights_
>513	FunctionDef	Grouper 
>514	ParameterList	 
>515	ReturnType	void
>516	CompoundStatement	 
>517	ForStatement	for ( size_type i = 0 ; i != tbiCellOutputs_ . size ( ) ; ++ i )
>518	CompoundStatement	 
>519	ForStatement	for ( size_type j = 0 ; j != tbiCellOutputs_ [ i ] . size ( ) ; ++ j )
>520	CompoundStatement	 
>521	ExpressionStatement	 
>522	CallExpression	std 
>523	ArgumentList	cells . begin ( )
>524	Argument	( value_type ) 0.0
>525	CastExpression	( value_type ) 0.0
>526	PrimaryExpression	0.0
>527	CastTarget	value_type
>528	Argument	cells . end ( )
>529	CallExpression	cells . end ( )
>530	ArgumentList	 
>531	Callee	cells . end
>532	MemberAccess	cells . end
>533	Identifier	end
>534	Identifier	cells
>535	Argument	cells . begin ( )
>536	CallExpression	cells . begin ( )
>537	ArgumentList	 
>538	Callee	cells . begin
>539	MemberAccess	cells . begin
>540	Identifier	begin
>541	Identifier	cells
>542	Callee	std 
>543	Identifier	std 
>544	IdentifierDeclStatement	 
>545	IdentifierDecl	& cells = tbiCellOutputs_ [ i ] [ j ]
>546	AssignmentExpr	& cells = tbiCellOutputs_ [ i ] [ j ]
>547	ArrayIndexing	tbiCellOutputs_ [ i ] [ j ]
>548	Identifier	j
>549	ArrayIndexing	tbiCellOutputs_ [ i ]
>550	Identifier	i
>551	Identifier	tbiCellOutputs_
>552	Identifier	cells
>553	Identifier	cells
>554	IdentifierDeclType	TBICellOutputs &
>555	UnaryExpression	 
>556	Identifier	j
>557	IncDec	++
>558	Condition	 
>559	EqualityExpression	j != tbiCellOutputs_ [ i ] . size ( )
>560	CallExpression	tbiCellOutputs_ [ i ] . size ( )
>561	ArgumentList	 
>562	Callee	tbiCellOutputs_ [ i ] . size
>563	MemberAccess	tbiCellOutputs_ [ i ] . size
>564	Identifier	size
>565	ArrayIndexing	tbiCellOutputs_ [ i ]
>566	Identifier	i
>567	Identifier	tbiCellOutputs_
>568	Identifier	j
>569	ForInit	 
>570	IdentifierDeclStatement	size_type j = 0 ;
>571	IdentifierDecl	j = 0
>572	AssignmentExpr	j = 0
>573	PrimaryExpression	0
>574	Identifier	j
>575	Identifier	j
>576	IdentifierDeclType	size_type
>577	UnaryExpression	 
>578	Identifier	i
>579	IncDec	++
>580	Condition	 
>581	EqualityExpression	i != tbiCellOutputs_ . size ( )
>582	CallExpression	tbiCellOutputs_ . size ( )
>583	ArgumentList	 
>584	Callee	tbiCellOutputs_ . size
>585	MemberAccess	tbiCellOutputs_ . size
>586	Identifier	size
>587	Identifier	tbiCellOutputs_
>588	Identifier	i
>589	ForInit	 
>590	IdentifierDeclStatement	size_type i = 0 ;
>591	IdentifierDecl	i = 0
>592	AssignmentExpr	i = 0
>593	PrimaryExpression	0
>594	Identifier	i
>595	Identifier	i
>596	IdentifierDeclType	size_type
>597	IfStatement	if ( tbiCellWeights_ . size ( ) == 0 )
>598	ReturnStatement	 
>599	Condition	 
>600	EqualityExpression	tbiCellWeights_ . size ( ) == 0
>601	PrimaryExpression	0
>602	CallExpression	tbiCellWeights_ . size ( )
>603	ArgumentList	 
>604	Callee	tbiCellWeights_ . size
>605	MemberAccess	tbiCellWeights_ . size
>606	Identifier	size
>607	Identifier	tbiCellWeights_
>626	FunctionDef	Grouper 
>627	ParameterList	 
>628	ReturnType	void
>629	CompoundStatement	 
>630	ExpressionStatement	 
>631	CallExpression	tbi_delete_ ( )
>632	ArgumentList	 
>633	Callee	tbi_delete_
>634	Identifier	tbi_delete_
>635	ExpressionStatement	 
>636	CallExpression	weights_ . resize ( 0 , 0 )
>637	ArgumentList	0
>638	Argument	0
>639	PrimaryExpression	0
>640	Argument	0
>641	PrimaryExpression	0
>642	Callee	weights_ . resize
>643	MemberAccess	weights_ . resize
>644	Identifier	resize
>645	Identifier	weights_
>646	ExpressionStatement	 
>647	CallExpression	groups_ . clear ( )
>648	ArgumentList	 
>649	Callee	groups_ . clear
>650	MemberAccess	groups_ . clear
>651	Identifier	clear
>652	Identifier	groups_
>653	ExpressionStatement	 
>654	CallExpression	resetHistory ( )
>655	ArgumentList	 
>656	Callee	resetHistory
>657	Identifier	resetHistory
>663	FunctionDef	Grouper 
>664	ParameterList	bool collapsed
>665	Parameter	 
>666	Identifier	collapsed
>667	ParameterType	bool
>668	ReturnType	Grouper 
>669	CompoundStatement	 
>670	ReturnStatement	 
>671	Identifier	slimGroups
>672	ForStatement	for ( size_type i = 0 ; i != groups_ . size ( ) ; ++ i )
>673	CompoundStatement	 
>674	ExpressionStatement	 
>675	CallExpression	slimGroups . push_back ( agroup )
>676	ArgumentList	agroup
>677	Argument	agroup
>678	Identifier	agroup
>679	Callee	slimGroups . push_back
>680	MemberAccess	slimGroups . push_back
>681	Identifier	push_back
>682	Identifier	slimGroups
>683	ForStatement	for ( it = groups_ [ i ] . begin ( ) ; it != groups_ [ i ] . end ( ) ; ++ it )
>684	ExpressionStatement	 
>685	CallExpression	agroup . insert ( tam_ . getHOTCoincidence ( * it ) )
>686	ArgumentList	tam_ . getHOTCoincidence ( * it )
>687	Argument	tam_ . getHOTCoincidence ( * it )
>688	CallExpression	tam_ . getHOTCoincidence ( * it )
>689	ArgumentList	* it
>690	Argument	* it
>691	UnaryOp	* it
>692	Identifier	it
>693	UnaryOperator	*
>694	Callee	tam_ . getHOTCoincidence
>695	MemberAccess	tam_ . getHOTCoincidence
>696	Identifier	getHOTCoincidence
>697	Identifier	tam_
>698	Callee	agroup . insert
>699	MemberAccess	agroup . insert
>700	Identifier	insert
>701	Identifier	agroup
>702	UnaryExpression	 
>703	Identifier	it
>704	IncDec	++
>705	Condition	 
>706	EqualityExpression	it != groups_ [ i ] . end ( )
>707	CallExpression	groups_ [ i ] . end ( )
>708	ArgumentList	 
>709	Callee	groups_ [ i ] . end
>710	MemberAccess	groups_ [ i ] . end
>711	Identifier	end
>712	ArrayIndexing	groups_ [ i ]
>713	Identifier	i
>714	Identifier	groups_
>715	Identifier	it
>716	ForInit	 
>717	AssignmentExpr	it = groups_ [ i ] . begin ( )
>718	CallExpression	groups_ [ i ] . begin ( )
>719	ArgumentList	 
>720	Callee	groups_ [ i ] . begin
>721	MemberAccess	groups_ [ i ] . begin
>722	Identifier	begin
>723	ArrayIndexing	groups_ [ i ]
>724	Identifier	i
>725	Identifier	groups_
>726	Identifier	it
>727	IdentifierDeclStatement	 
>728	IdentifierDecl	it
>729	Identifier	it
>730	IdentifierDeclType	Grouper 
>731	IdentifierDeclStatement	 
>732	IdentifierDecl	agroup
>733	Identifier	agroup
>734	IdentifierDeclType	AGroup
>735	UnaryExpression	 
>736	Identifier	i
>737	IncDec	++
>738	Condition	 
>739	EqualityExpression	i != groups_ . size ( )
>740	CallExpression	groups_ . size ( )
>741	ArgumentList	 
>742	Callee	groups_ . size
>743	MemberAccess	groups_ . size
>744	Identifier	size
>745	Identifier	groups_
>746	Identifier	i
>747	ForInit	 
>748	IdentifierDeclStatement	size_type i = 0 ;
>749	IdentifierDecl	i = 0
>750	AssignmentExpr	i = 0
>751	PrimaryExpression	0
>752	Identifier	i
>753	Identifier	i
>754	IdentifierDeclType	size_type
>755	IdentifierDeclStatement	 
>756	IdentifierDecl	slimGroups
>757	Identifier	slimGroups
>758	IdentifierDeclType	Grouper 
>759	IfStatement	if ( ! collapsed || ! tam_ . usesHOT ( ) )
>760	ReturnStatement	 
>761	Identifier	groups_
>762	Condition	 
>763	OrExpression	! collapsed || ! tam_ . usesHOT ( )
>764	UnaryOp	! tam_ . usesHOT ( )
>765	CallExpression	tam_ . usesHOT ( )
>766	ArgumentList	 
>767	Callee	tam_ . usesHOT
>768	MemberAccess	tam_ . usesHOT
>769	Identifier	usesHOT
>770	Identifier	tam_
>771	UnaryOperator	!
>772	UnaryOp	! collapsed
>773	Identifier	collapsed
>774	UnaryOperator	!
>793	FunctionDef	Grouper 
>794	ParameterList	std 
>795	Parameter	 
>796	Identifier	collapsed
>797	ParameterType	bool
>798	Parameter	 
>799	Identifier	buf
>800	ParameterType	std 
>801	ReturnType	void
>802	CompoundStatement	 
>803	ForStatement	for ( size_type i = 0 ; i != groups . size ( ) ; ++ i )
>804	CompoundStatement	 
>805	ExpressionStatement	 
>806	ShiftExpression	buf << endl
>807	Identifier	endl
>808	Identifier	buf
>809	ForStatement	for ( it = groups [ i ] . begin ( ) ; it != groups [ i ] . end ( ) ; ++ it )
>810	ExpressionStatement	 
>811	ShiftExpression	buf << * it << \" \"
>812	ShiftExpression	* it << \" \"
>813	PrimaryExpression	\" \"
>814	UnaryOp	* it
>815	Identifier	it
>816	UnaryOperator	*
>817	Identifier	buf
>818	UnaryExpression	 
>819	Identifier	it
>820	IncDec	++
>821	Condition	 
>822	EqualityExpression	it != groups [ i ] . end ( )
>823	CallExpression	groups [ i ] . end ( )
>824	ArgumentList	 
>825	Callee	groups [ i ] . end
>826	MemberAccess	groups [ i ] . end
>827	Identifier	end
>828	ArrayIndexing	groups [ i ]
>829	Identifier	i
>830	Identifier	groups
>831	Identifier	it
>832	ForInit	 
>833	AssignmentExpr	it = groups [ i ] . begin ( )
>834	CallExpression	groups [ i ] . begin ( )
>835	ArgumentList	 
>836	Callee	groups [ i ] . begin
>837	MemberAccess	groups [ i ] . begin
>838	Identifier	begin
>839	ArrayIndexing	groups [ i ]
>840	Identifier	i
>841	Identifier	groups
>842	Identifier	it
>843	IdentifierDeclStatement	 
>844	IdentifierDecl	it
>845	Identifier	it
>846	IdentifierDeclType	AGroup 
>847	ExpressionStatement	 
>848	ShiftExpression	buf << groups [ i ] . size ( ) << \" \"
>849	ShiftExpression	groups [ i ] . size ( ) << \" \"
>850	PrimaryExpression	\" \"
>851	CallExpression	groups [ i ] . size ( )
>852	ArgumentList	 
>853	Callee	groups [ i ] . size
>854	MemberAccess	groups [ i ] . size
>855	Identifier	size
>856	ArrayIndexing	groups [ i ]
>857	Identifier	i
>858	Identifier	groups
>859	Identifier	buf
>860	UnaryExpression	 
>861	Identifier	i
>862	IncDec	++
>863	Condition	 
>864	EqualityExpression	i != groups . size ( )
>865	CallExpression	groups . size ( )
>866	ArgumentList	 
>867	Callee	groups . size
>868	MemberAccess	groups . size
>869	Identifier	size
>870	Identifier	groups
>871	Identifier	i
>872	ForInit	 
>873	IdentifierDeclStatement	size_type i = 0 ;
>874	IdentifierDecl	i = 0
>875	AssignmentExpr	i = 0
>876	PrimaryExpression	0
>877	Identifier	i
>878	Identifier	i
>879	IdentifierDeclType	size_type
>880	ExpressionStatement	 
>881	ShiftExpression	buf << groups . size ( ) << endl
>882	ShiftExpression	groups . size ( ) << endl
>883	Identifier	endl
>884	CallExpression	groups . size ( )
>885	ArgumentList	 
>886	Callee	groups . size
>887	MemberAccess	groups . size
>888	Identifier	size
>889	Identifier	groups
>890	Identifier	buf
>891	IdentifierDeclStatement	 
>892	IdentifierDecl	groups = getGroups ( collapsed )
>893	AssignmentExpr	groups = getGroups ( collapsed )
>894	CallExpression	getGroups ( collapsed )
>895	ArgumentList	collapsed
>896	Argument	collapsed
>897	Identifier	collapsed
>898	Callee	getGroups
>899	Identifier	getGroups
>900	Identifier	groups
>901	Identifier	groups
>902	IdentifierDeclType	const Grouper 
>920	FunctionDef	NonZeroOrder (const vector < IdxVal > & counts)
>921	ParameterList	const vector < IdxVal > & counts
>922	Parameter	 
>923	Identifier	counts
>924	ParameterType	const vector < IdxVal > &
>925	CompoundStatement	 
>932	FunctionDef	operator ( ) (const IdxVal & p1 , const IdxVal & p2)
>933	ParameterList	const IdxVal & p1 , const IdxVal & p2
>934	Parameter	 
>935	Identifier	p2
>936	ParameterType	const IdxVal &
>937	Parameter	 
>938	Identifier	p1
>939	ParameterType	const IdxVal &
>940	ReturnType	inline bool
>941	CompoundStatement	 
>942	ReturnStatement	 
>943	RelationalExpression	val < 4
>944	PrimaryExpression	4
>945	Identifier	val
>946	IfStatement	if ( p1 . second > p2 . second )
>947	ElseStatement	else
>948	IfStatement	if ( p1 . second == p2 . second )
>949	CompoundStatement	 
>950	IfStatement	if ( counts_ [ p1 . first ] . second > counts_ [ p2 . first ] . second )
>951	ExpressionStatement	 
>952	AssignmentExpr	val = 2
>953	PrimaryExpression	2
>954	Identifier	val
>955	Condition	 
>956	RelationalExpression	counts_ [ p1 . first ] . second > counts_ [ p2 . first ] . second
>957	MemberAccess	counts_ [ p2 . first ] . second
>958	Identifier	second
>959	ArrayIndexing	counts_ [ p2 . first ]
>960	MemberAccess	p2 . first
>961	Identifier	first
>962	Identifier	p2
>963	Identifier	counts_
>964	MemberAccess	counts_ [ p1 . first ] . second
>965	Identifier	second
>966	ArrayIndexing	counts_ [ p1 . first ]
>967	MemberAccess	p1 . first
>968	Identifier	first
>969	Identifier	p1
>970	Identifier	counts_
>971	Condition	 
>972	EqualityExpression	p1 . second == p2 . second
>973	MemberAccess	p2 . second
>974	Identifier	second
>975	Identifier	p2
>976	MemberAccess	p1 . second
>977	Identifier	second
>978	Identifier	p1
>979	ExpressionStatement	 
>980	AssignmentExpr	val = 1
>981	PrimaryExpression	1
>982	Identifier	val
>983	Condition	 
>984	RelationalExpression	p1 . second > p2 . second
>985	MemberAccess	p2 . second
>986	Identifier	second
>987	Identifier	p2
>988	MemberAccess	p1 . second
>989	Identifier	second
>990	Identifier	p1
>991	IdentifierDeclStatement	 
>992	IdentifierDecl	val = 4
>993	AssignmentExpr	val = 4
>994	PrimaryExpression	4
>995	Identifier	val
>996	Identifier	val
>997	IdentifierDeclType	size_type
>1016	FunctionDef	operator ( ) (const Grouper 
>1017	ParameterList	const Grouper 
>1018	Parameter	 
>1019	Identifier	p2
>1020	ParameterType	const Grouper 
>1021	Parameter	 
>1022	Identifier	p1
>1023	ParameterType	const Grouper 
>1024	ReturnType	inline bool
>1025	CompoundStatement	 
>1026	ReturnStatement	 
>1027	Identifier	false
>1028	IfStatement	if ( p1 . second > p2 . second )
>1029	ElseStatement	else
>1030	IfStatement	if ( p1 . second == p2 . second )
>1031	ReturnStatement	 
>1032	RelationalExpression	p1 . first < p2 . first
>1033	MemberAccess	p2 . first
>1034	Identifier	first
>1035	Identifier	p2
>1036	MemberAccess	p1 . first
>1037	Identifier	first
>1038	Identifier	p1
>1039	Condition	 
>1040	EqualityExpression	p1 . second == p2 . second
>1041	MemberAccess	p2 . second
>1042	Identifier	second
>1043	Identifier	p2
>1044	MemberAccess	p1 . second
>1045	Identifier	second
>1046	Identifier	p1
>1047	ReturnStatement	 
>1048	Identifier	true
>1049	Condition	 
>1050	RelationalExpression	p1 . second > p2 . second
>1051	MemberAccess	p2 . second
>1052	Identifier	second
>1053	Identifier	p2
>1054	MemberAccess	p1 . second
>1055	Identifier	second
>1056	Identifier	p1
>1068	FunctionDef	Grouper 
>1069	ParameterList	const std 
>1070	Parameter	 
>1071	Identifier	toDelete
>1072	ParameterType	const std 
>1073	ReturnType	void
>1074	CompoundStatement	 
>1075	ExpressionStatement	 
>1076	CallExpression	resetHistory ( )
>1077	ArgumentList	 
>1078	Callee	resetHistory
>1079	Identifier	resetHistory
>1080	ExpressionStatement	 
>1081	CallExpression	tam_ . deleteCols ( toDelete . begin ( ) , toDelete . end ( ) )
>1082	ArgumentList	toDelete . begin ( )
>1083	Argument	toDelete . end ( )
>1084	CallExpression	toDelete . end ( )
>1085	ArgumentList	 
>1086	Callee	toDelete . end
>1087	MemberAccess	toDelete . end
>1088	Identifier	end
>1089	Identifier	toDelete
>1090	Argument	toDelete . begin ( )
>1091	CallExpression	toDelete . begin ( )
>1092	ArgumentList	 
>1093	Callee	toDelete . begin
>1094	MemberAccess	toDelete . begin
>1095	Identifier	begin
>1096	Identifier	toDelete
>1097	Callee	tam_ . deleteCols
>1098	MemberAccess	tam_ . deleteCols
>1099	Identifier	deleteCols
>1100	Identifier	tam_
>1101	ExpressionStatement	 
>1102	CallExpression	tam_ . deleteRows ( toDelete . begin ( ) , toDelete . end ( ) )
>1103	ArgumentList	toDelete . begin ( )
>1104	Argument	toDelete . end ( )
>1105	CallExpression	toDelete . end ( )
>1106	ArgumentList	 
>1107	Callee	toDelete . end
>1108	MemberAccess	toDelete . end
>1109	Identifier	end
>1110	Identifier	toDelete
>1111	Argument	toDelete . begin ( )
>1112	CallExpression	toDelete . begin ( )
>1113	ArgumentList	 
>1114	Callee	toDelete . begin
>1115	MemberAccess	toDelete . begin
>1116	Identifier	begin
>1117	Identifier	toDelete
>1118	Callee	tam_ . deleteRows
>1119	MemberAccess	tam_ . deleteRows
>1120	Identifier	deleteRows
>1121	Identifier	tam_
>1129	FunctionDef	Grouper 
>1130	ParameterList	size_type cur , const IntegerTAM & tam2 , const AGroup & alreadyGrouped , const vector < IdxVal > & sortedCounts , \
>1131	Parameter	 
>1132	Identifier	neighbors
>1133	ParameterType	std 
>1134	Parameter	 
>1135	Identifier	sortedCounts
>1136	ParameterType	const vector < IdxVal > &
>1137	Parameter	 
>1138	Identifier	alreadyGrouped
>1139	ParameterType	const AGroup &
>1140	Parameter	 
>1141	Identifier	tam2
>1142	ParameterType	const IntegerTAM &
>1143	Parameter	 
>1144	Identifier	cur
>1145	ParameterType	size_type
>1146	ReturnType	void
>1147	CompoundStatement	 
>1148	ExpressionStatement	 
>1149	Statement	 
>1150	Statement	 
>1151	Statement	 
>1152	Statement	 
>1153	Statement	 
>1154	Statement	 
>1155	Statement	 
>1156	Statement	 
>1157	Statement	 
>1158	Statement	 
>1159	Statement	 
>1160	Statement	 
>1161	Statement	 
>1162	Statement	 
>1163	Statement	 
>1164	Statement	 
>1165	Statement	 
>1166	Statement	 
>1167	Statement	 
>1168	Statement	 
>1169	Statement	 
>1170	Statement	 
>1171	Statement	 
>1172	Statement	 
>1173	Statement	 
>1174	Statement	 
>1175	ExpressionStatement	 
>1176	CallExpression	neighbors . clear ( )
>1177	ArgumentList	 
>1178	Callee	neighbors . clear
>1179	MemberAccess	neighbors . clear
>1180	Identifier	clear
>1181	Identifier	neighbors
>1182	ExpressionStatement	 
>1183	CallExpression	row . resize ( min ( size_type ( row . size ( ) ) , topNeighbors_ ) )
>1184	ArgumentList	min ( size_type ( row . size ( ) ) , topNeighbors_ )
>1185	Argument	min ( size_type ( row . size ( ) ) , topNeighbors_ )
>1186	CallExpression	min ( size_type ( row . size ( ) ) , topNeighbors_ )
>1187	ArgumentList	size_type ( row . size ( ) )
>1188	Argument	topNeighbors_
>1189	Identifier	topNeighbors_
>1190	Argument	size_type ( row . size ( ) )
>1191	CallExpression	size_type ( row . size ( ) )
>1192	ArgumentList	row . size ( )
>1193	Argument	row . size ( )
>1194	CallExpression	row . size ( )
>1195	ArgumentList	 
>1196	Callee	row . size
>1197	MemberAccess	row . size
>1198	Identifier	size
>1199	Identifier	row
>1200	Callee	size_type
>1201	Identifier	size_type
>1202	Callee	min
>1203	Identifier	min
>1204	Callee	row . resize
>1205	MemberAccess	row . resize
>1206	Identifier	resize
>1207	Identifier	row
>1208	ExpressionStatement	 
>1209	CallExpression	row . sort ( NonZeroOrder < IdxVal > ( sortedCounts ) )
>1210	ArgumentList	NonZeroOrder < IdxVal > ( sortedCounts )
>1211	Argument	NonZeroOrder < IdxVal > ( sortedCounts )
>1212	RelationalExpression	NonZeroOrder < IdxVal > ( sortedCounts )
>1213	RelationalExpression	IdxVal > ( sortedCounts )
>1214	Identifier	sortedCounts
>1215	Identifier	IdxVal
>1216	Identifier	NonZeroOrder
>1217	Callee	row . sort
>1218	MemberAccess	row . sort
>1219	Identifier	sort
>1220	Identifier	row
>1221	ExpressionStatement	 
>1222	Statement	 
>1223	Statement	 
>1224	Statement	 
>1225	Statement	 
>1226	Statement	 
>1227	Statement	 
>1228	Statement	 
>1229	Statement	 
>1230	Statement	 
>1231	Statement	 
>1232	Statement	 
>1233	Statement	 
>1234	Statement	 
>1235	Statement	 
>1236	Statement	 
>1237	Statement	 
>1238	IfStatement	if ( ! alreadyGrouped . empty ( ) )
>1239	Statement	 
>1240	Condition	 
>1241	UnaryOp	! alreadyGrouped . empty ( )
>1242	CallExpression	alreadyGrouped . empty ( )
>1243	ArgumentList	 
>1244	Callee	alreadyGrouped . empty
>1245	MemberAccess	alreadyGrouped . empty
>1246	Identifier	empty
>1247	Identifier	alreadyGrouped
>1248	UnaryOperator	!
>1249	ExpressionStatement	 
>1250	CallExpression	tam2 . getRowToSparse ( cur , back_inserter ( row ) )
>1251	ArgumentList	cur
>1252	Argument	back_inserter ( row )
>1253	CallExpression	back_inserter ( row )
>1254	ArgumentList	row
>1255	Argument	row
>1256	Identifier	row
>1257	Callee	back_inserter
>1258	Identifier	back_inserter
>1259	Argument	cur
>1260	Identifier	cur
>1261	Callee	tam2 . getRowToSparse
>1262	MemberAccess	tam2 . getRowToSparse
>1263	Identifier	getRowToSparse
>1264	Identifier	tam2
>1265	IdentifierDeclStatement	 
>1266	IdentifierDecl	row
>1267	Identifier	row
>1268	IdentifierDeclType	list < IdxVal >
>1286	FunctionDef	Grouper 
>1287	ParameterList	const vector < IdxVal > & counts
>1288	Parameter	 
>1289	Identifier	counts
>1290	ParameterType	const vector < IdxVal > &
>1291	ReturnType	void
>1292	CompoundStatement	 
>1293	ExpressionStatement	 
>1294	CallExpression	finish_grouping_ ( coincidence_counts )
>1295	ArgumentList	coincidence_counts
>1296	Argument	coincidence_counts
>1297	Identifier	coincidence_counts
>1298	Callee	finish_grouping_
>1299	Identifier	finish_grouping_
>1300	ForStatement	for ( size_type i = 0 ; i != counts . size ( ) ; ++ i )
>1301	ExpressionStatement	 
>1302	AssignmentExpr	coincidence_counts [ counts [ i ] . first ] = value_type ( counts [ i ] . second )
>1303	CallExpression	value_type ( counts [ i ] . second )
>1304	ArgumentList	counts [ i ] . second
>1305	Argument	counts [ i ] . second
>1306	MemberAccess	counts [ i ] . second
>1307	Identifier	second
>1308	ArrayIndexing	counts [ i ]
>1309	Identifier	i
>1310	Identifier	counts
>1311	Callee	value_type
>1312	Identifier	value_type
>1313	ArrayIndexing	coincidence_counts [ counts [ i ] . first ]
>1314	MemberAccess	counts [ i ] . first
>1315	Identifier	first
>1316	ArrayIndexing	counts [ i ]
>1317	Identifier	i
>1318	Identifier	counts
>1319	Identifier	coincidence_counts
>1320	UnaryExpression	 
>1321	Identifier	i
>1322	IncDec	++
>1323	Condition	 
>1324	EqualityExpression	i != counts . size ( )
>1325	CallExpression	counts . size ( )
>1326	ArgumentList	 
>1327	Callee	counts . size
>1328	MemberAccess	counts . size
>1329	Identifier	size
>1330	Identifier	counts
>1331	Identifier	i
>1332	ForInit	 
>1333	IdentifierDeclStatement	size_type i = 0 ;
>1334	IdentifierDecl	i = 0
>1335	AssignmentExpr	i = 0
>1336	PrimaryExpression	0
>1337	Identifier	i
>1338	Identifier	i
>1339	IdentifierDeclType	size_type
>1340	IdentifierDeclStatement	 
>1341	IdentifierDecl	coincidence_counts ( counts . size ( ) )
>1342	CallExpression	counts . size ( )
>1343	ArgumentList	 
>1344	Callee	counts . size
>1345	MemberAccess	counts . size
>1346	Identifier	size
>1347	Identifier	counts
>1348	Identifier	coincidence_counts
>1349	IdentifierDeclType	vector < value_type >
>1350	ExpressionStatement	 
>1351	ShiftExpression	NTA_CHECK ( groups_ . size ( ) <= maxNGroups_ ) << where << \"The current parameters generated \" << groups_ \
>1352	ShiftExpression	where << \"The current parameters generated \" << groups_ . size ( ) << \" groups, which exceeds the maximum \
>1353	ShiftExpression	\"The current parameters generated \" << groups_ . size ( ) << \" groups, which exceeds the maximum of \" << \
>1354	ShiftExpression	groups_ . size ( ) << \" groups, which exceeds the maximum of \" << maxNGroups_ << \" groups.\"
>1355	ShiftExpression	\" groups, which exceeds the maximum of \" << maxNGroups_ << \" groups.\"
>1356	ShiftExpression	maxNGroups_ << \" groups.\"
>1357	PrimaryExpression	\" groups.\"
>1358	Identifier	maxNGroups_
>1359	PrimaryExpression	\" groups, which exceeds the maximum of \"
>1360	CallExpression	groups_ . size ( )
>1361	ArgumentList	 
>1362	Callee	groups_ . size
>1363	MemberAccess	groups_ . size
>1364	Identifier	size
>1365	Identifier	groups_
>1366	PrimaryExpression	\"The current parameters generated \"
>1367	Identifier	where
>1368	CallExpression	NTA_CHECK ( groups_ . size ( ) <= maxNGroups_ )
>1369	ArgumentList	groups_ . size ( ) <= maxNGroups_
>1370	Argument	groups_ . size ( ) <= maxNGroups_
>1371	RelationalExpression	groups_ . size ( ) <= maxNGroups_
>1372	Identifier	maxNGroups_
>1373	CallExpression	groups_ . size ( )
>1374	ArgumentList	 
>1375	Callee	groups_ . size
>1376	MemberAccess	groups_ . size
>1377	Identifier	size
>1378	Identifier	groups_
>1379	Callee	NTA_CHECK
>1380	Identifier	NTA_CHECK
>1381	IfStatement	if ( overlappingGroups_ )
>1382	CompoundStatement	 
>1383	ForStatement	for ( git = groups_ . begin ( ) ; git != groups_ . end ( ) ; ++ git )
>1384	CompoundStatement	 
>1385	ForStatement	for ( AGroup 
>1386	ExpressionStatement	 
>1387	CallExpression	git -> insert ( * it )
>1388	ArgumentList	* it
>1389	Argument	* it
>1390	UnaryOp	* it
>1391	Identifier	it
>1392	UnaryOperator	*
>1393	Callee	git -> insert
>1394	PtrMemberAccess	git -> insert
>1395	Identifier	insert
>1396	Identifier	git
>1397	UnaryExpression	 
>1398	Identifier	it
>1399	IncDec	++
>1400	Condition	 
>1401	EqualityExpression	it != fringe . end ( )
>1402	CallExpression	fringe . end ( )
>1403	ArgumentList	 
>1404	Callee	fringe . end
>1405	MemberAccess	fringe . end
>1406	Identifier	end
>1407	Identifier	fringe
>1408	Identifier	it
>1409	ForInit	 
>1410	IdentifierDeclStatement	AGroup 
>1411	IdentifierDecl	it = fringe . begin ( )
>1412	AssignmentExpr	it = fringe . begin ( )
>1413	CallExpression	fringe . begin ( )
>1414	ArgumentList	 
>1415	Callee	fringe . begin
>1416	MemberAccess	fringe . begin
>1417	Identifier	begin
>1418	Identifier	fringe
>1419	Identifier	it
>1420	Identifier	it
>1421	IdentifierDeclType	AGroup 
>1422	ForStatement	for ( e = git -> begin ( ) ; e != git -> end ( ) ; ++ e )
>1423	CompoundStatement	 
>1424	ForStatement	for ( i = 0 ; i < neighbors . size ( ) ; ++ i )
>1425	ExpressionStatement	 
>1426	CallExpression	fringe . insert ( neighbors [ i ] )
>1427	ArgumentList	neighbors [ i ]
>1428	Argument	neighbors [ i ]
>1429	ArrayIndexing	neighbors [ i ]
>1430	Identifier	i
>1431	Identifier	neighbors
>1432	Callee	fringe . insert
>1433	MemberAccess	fringe . insert
>1434	Identifier	insert
>1435	Identifier	fringe
>1436	UnaryExpression	 
>1437	Identifier	i
>1438	IncDec	++
>1439	Condition	 
>1440	RelationalExpression	i < neighbors . size ( )
>1441	CallExpression	neighbors . size ( )
>1442	ArgumentList	 
>1443	Callee	neighbors . size
>1444	MemberAccess	neighbors . size
>1445	Identifier	size
>1446	Identifier	neighbors
>1447	Identifier	i
>1448	ForInit	 
>1449	AssignmentExpr	i = 0
>1450	PrimaryExpression	0
>1451	Identifier	i
>1452	ExpressionStatement	 
>1453	CallExpression	available_neighbors_ ( * e , tam2 , alreadyGrouped , sortedCounts , neighbors )
>1454	ArgumentList	* e
>1455	Argument	neighbors
>1456	Identifier	neighbors
>1457	Argument	sortedCounts
>1458	Identifier	sortedCounts
>1459	Argument	alreadyGrouped
>1460	Identifier	alreadyGrouped
>1461	Argument	tam2
>1462	Identifier	tam2
>1463	Argument	* e
>1464	UnaryOp	* e
>1465	Identifier	e
>1466	UnaryOperator	*
>1467	Callee	available_neighbors_
>1468	Identifier	available_neighbors_
>1469	UnaryExpression	 
>1470	Identifier	e
>1471	IncDec	++
>1472	Condition	 
>1473	EqualityExpression	e != git -> end ( )
>1474	CallExpression	git -> end ( )
>1475	ArgumentList	 
>1476	Callee	git -> end
>1477	PtrMemberAccess	git -> end
>1478	Identifier	end
>1479	Identifier	git
>1480	Identifier	e
>1481	ForInit	 
>1482	AssignmentExpr	e = git -> begin ( )
>1483	CallExpression	git -> begin ( )
>1484	ArgumentList	 
>1485	Callee	git -> begin
>1486	PtrMemberAccess	git -> begin
>1487	Identifier	begin
>1488	Identifier	git
>1489	Identifier	e
>1490	IdentifierDeclStatement	 
>1491	IdentifierDecl	fringe
>1492	Identifier	fringe
>1493	IdentifierDeclType	AGroup
>1494	UnaryExpression	 
>1495	Identifier	git
>1496	IncDec	++
>1497	Condition	 
>1498	EqualityExpression	git != groups_ . end ( )
>1499	CallExpression	groups_ . end ( )
>1500	ArgumentList	 
>1501	Callee	groups_ . end
>1502	MemberAccess	groups_ . end
>1503	Identifier	end
>1504	Identifier	groups_
>1505	Identifier	git
>1506	ForInit	 
>1507	AssignmentExpr	git = groups_ . begin ( )
>1508	CallExpression	groups_ . begin ( )
>1509	ArgumentList	 
>1510	Callee	groups_ . begin
>1511	MemberAccess	groups_ . begin
>1512	Identifier	begin
>1513	Identifier	groups_
>1514	Identifier	git
>1515	ExpressionStatement	 
>1516	CallExpression	alreadyGrouped . clear ( )
>1517	ArgumentList	 
>1518	Callee	alreadyGrouped . clear
>1519	MemberAccess	alreadyGrouped . clear
>1520	Identifier	clear
>1521	Identifier	alreadyGrouped
>1522	Condition	 
>1523	Identifier	overlappingGroups_
>1524	IdentifierDeclStatement	 
>1525	IdentifierDecl	e
>1526	Identifier	e
>1527	IdentifierDeclType	AGroup 
>1528	IdentifierDeclStatement	 
>1529	IdentifierDecl	git
>1530	Identifier	git
>1531	IdentifierDeclType	Groups 
>1532	ForStatement	for ( i = 0 ; i < nCoincidences ; ++ i )
>1533	CompoundStatement	 
>1534	ExpressionStatement	 
>1535	CallExpression	groups_ . push_back ( neighborSet )
>1536	ArgumentList	neighborSet
>1537	Argument	neighborSet
>1538	Identifier	neighborSet
>1539	Callee	groups_ . push_back
>1540	MemberAccess	groups_ . push_back
>1541	Identifier	push_back
>1542	Identifier	groups_
>1543	ExpressionStatement	 
>1544	CallExpression	alreadyGrouped . insert ( neighborSet . begin ( ) , neighborSet . end ( ) )
>1545	ArgumentList	neighborSet . begin ( )
>1546	Argument	neighborSet . end ( )
>1547	CallExpression	neighborSet . end ( )
>1548	ArgumentList	 
>1549	Callee	neighborSet . end
>1550	MemberAccess	neighborSet . end
>1551	Identifier	end
>1552	Identifier	neighborSet
>1553	Argument	neighborSet . begin ( )
>1554	CallExpression	neighborSet . begin ( )
>1555	ArgumentList	 
>1556	Callee	neighborSet . begin
>1557	MemberAccess	neighborSet . begin
>1558	Identifier	begin
>1559	Identifier	neighborSet
>1560	Callee	alreadyGrouped . insert
>1561	MemberAccess	alreadyGrouped . insert
>1562	Identifier	insert
>1563	Identifier	alreadyGrouped
>1564	WhileStatement	while ( ! nextFront . empty ( ) )
>1565	CompoundStatement	 
>1566	ExpressionStatement	 
>1567	CallExpression	neighborSet . insert ( nextFront . begin ( ) , nextFront . end ( ) )
>1568	ArgumentList	nextFront . begin ( )
>1569	Argument	nextFront . end ( )
>1570	CallExpression	nextFront . end ( )
>1571	ArgumentList	 
>1572	Callee	nextFront . end
>1573	MemberAccess	nextFront . end
>1574	Identifier	end
>1575	Identifier	nextFront
>1576	Argument	nextFront . begin ( )
>1577	CallExpression	nextFront . begin ( )
>1578	ArgumentList	 
>1579	Callee	nextFront . begin
>1580	MemberAccess	nextFront . begin
>1581	Identifier	begin
>1582	Identifier	nextFront
>1583	Callee	neighborSet . insert
>1584	MemberAccess	neighborSet . insert
>1585	Identifier	insert
>1586	Identifier	neighborSet
>1587	WhileStatement	while ( ! front . empty ( ) && nextFront . size ( ) < nmax )
>1588	CompoundStatement	 
>1589	ForStatement	for ( n = neighbors . begin ( ) ; n != neighbors . end ( ) && nextFront . size ( ) < nmax ; ++ n )
>1590	CompoundStatement	 
>1591	IfStatement	if ( neighborSet . find ( elt ) == neighborSet . end ( ) && find ( nextFront . begin ( ) , nextFront . end ( ) , \
>1592	CompoundStatement	 
>1593	ExpressionStatement	 
>1594	CallExpression	nextFront . push_back ( elt )
>1595	ArgumentList	elt
>1596	Argument	elt
>1597	Identifier	elt
>1598	Callee	nextFront . push_back
>1599	MemberAccess	nextFront . push_back
>1600	Identifier	push_back
>1601	Identifier	nextFront
>1602	Condition	 
>1603	AndExpression	neighborSet . find ( elt ) == neighborSet . end ( ) && find ( nextFront . begin ( ) , nextFront . end ( ) , \
>1604	EqualityExpression	find ( nextFront . begin ( ) , nextFront . end ( ) , elt ) == nextFront . end ( )
>1605	CallExpression	nextFront . end ( )
>1606	ArgumentList	 
>1607	Callee	nextFront . end
>1608	MemberAccess	nextFront . end
>1609	Identifier	end
>1610	Identifier	nextFront
>1611	CallExpression	find ( nextFront . begin ( ) , nextFront . end ( ) , elt )
>1612	ArgumentList	nextFront . begin ( )
>1613	Argument	elt
>1614	Identifier	elt
>1615	Argument	nextFront . end ( )
>1616	CallExpression	nextFront . end ( )
>1617	ArgumentList	 
>1618	Callee	nextFront . end
>1619	MemberAccess	nextFront . end
>1620	Identifier	end
>1621	Identifier	nextFront
>1622	Argument	nextFront . begin ( )
>1623	CallExpression	nextFront . begin ( )
>1624	ArgumentList	 
>1625	Callee	nextFront . begin
>1626	MemberAccess	nextFront . begin
>1627	Identifier	begin
>1628	Identifier	nextFront
>1629	Callee	find
>1630	Identifier	find
>1631	EqualityExpression	neighborSet . find ( elt ) == neighborSet . end ( )
>1632	CallExpression	neighborSet . end ( )
>1633	ArgumentList	 
>1634	Callee	neighborSet . end
>1635	MemberAccess	neighborSet . end
>1636	Identifier	end
>1637	Identifier	neighborSet
>1638	CallExpression	neighborSet . find ( elt )
>1639	ArgumentList	elt
>1640	Argument	elt
>1641	Identifier	elt
>1642	Callee	neighborSet . find
>1643	MemberAccess	neighborSet . find
>1644	Identifier	find
>1645	Identifier	neighborSet
>1646	IdentifierDeclStatement	 
>1647	IdentifierDecl	elt = * n
>1648	AssignmentExpr	elt = * n
>1649	UnaryOp	* n
>1650	Identifier	n
>1651	UnaryOperator	*
>1652	Identifier	elt
>1653	Identifier	elt
>1654	IdentifierDeclType	size_type
>1655	UnaryExpression	 
>1656	Identifier	n
>1657	IncDec	++
>1658	Condition	 
>1659	AndExpression	n != neighbors . end ( ) && nextFront . size ( ) < nmax
>1660	RelationalExpression	nextFront . size ( ) < nmax
>1661	Identifier	nmax
>1662	CallExpression	nextFront . size ( )
>1663	ArgumentList	 
>1664	Callee	nextFront . size
>1665	MemberAccess	nextFront . size
>1666	Identifier	size
>1667	Identifier	nextFront
>1668	EqualityExpression	n != neighbors . end ( )
>1669	CallExpression	neighbors . end ( )
>1670	ArgumentList	 
>1671	Callee	neighbors . end
>1672	MemberAccess	neighbors . end
>1673	Identifier	end
>1674	Identifier	neighbors
>1675	Identifier	n
>1676	ForInit	 
>1677	AssignmentExpr	n = neighbors . begin ( )
>1678	CallExpression	neighbors . begin ( )
>1679	ArgumentList	 
>1680	Callee	neighbors . begin
>1681	MemberAccess	neighbors . begin
>1682	Identifier	begin
>1683	Identifier	neighbors
>1684	Identifier	n
>1685	ExpressionStatement	 
>1686	CallExpression	available_neighbors_ ( cur , tam2 , alreadyGrouped , sortedCounts , neighbors )
>1687	ArgumentList	cur
>1688	Argument	neighbors
>1689	Identifier	neighbors
>1690	Argument	sortedCounts
>1691	Identifier	sortedCounts
>1692	Argument	alreadyGrouped
>1693	Identifier	alreadyGrouped
>1694	Argument	tam2
>1695	Identifier	tam2
>1696	Argument	cur
>1697	Identifier	cur
>1698	Callee	available_neighbors_
>1699	Identifier	available_neighbors_
>1700	ExpressionStatement	 
>1701	CallExpression	front . pop_front ( )
>1702	ArgumentList	 
>1703	Callee	front . pop_front
>1704	MemberAccess	front . pop_front
>1705	Identifier	pop_front
>1706	Identifier	front
>1707	ExpressionStatement	 
>1708	AssignmentExpr	cur = front . front ( )
>1709	CallExpression	front . front ( )
>1710	ArgumentList	 
>1711	Callee	front . front
>1712	MemberAccess	front . front
>1713	Identifier	front
>1714	Identifier	front
>1715	Identifier	cur
>1716	Condition	 
>1717	AndExpression	! front . empty ( ) && nextFront . size ( ) < nmax
>1718	RelationalExpression	nextFront . size ( ) < nmax
>1719	Identifier	nmax
>1720	CallExpression	nextFront . size ( )
>1721	ArgumentList	 
>1722	Callee	nextFront . size
>1723	MemberAccess	nextFront . size
>1724	Identifier	size
>1725	Identifier	nextFront
>1726	UnaryOp	! front . empty ( )
>1727	CallExpression	front . empty ( )
>1728	ArgumentList	 
>1729	Callee	front . empty
>1730	MemberAccess	front . empty
>1731	Identifier	empty
>1732	Identifier	front
>1733	UnaryOperator	!
>1734	ExpressionStatement	 
>1735	AssignmentExpr	nmax = std 
>1736	CallExpression	std 
>1737	ArgumentList	maxGroupSize_ - ( size_type ) neighborSet . size ( )
>1738	Argument	( size_type ) 0
>1739	CastExpression	( size_type ) 0
>1740	PrimaryExpression	0
>1741	CastTarget	size_type
>1742	Argument	maxGroupSize_ - ( size_type ) neighborSet . size ( )
>1743	AdditiveExpression	maxGroupSize_ - ( size_type ) neighborSet . size ( )
>1744	CastExpression	( size_type ) neighborSet . size ( )
>1745	CallExpression	neighborSet . size ( )
>1746	ArgumentList	 
>1747	Callee	neighborSet . size
>1748	MemberAccess	neighborSet . size
>1749	Identifier	size
>1750	Identifier	neighborSet
>1751	CastTarget	size_type
>1752	Identifier	maxGroupSize_
>1753	Callee	std 
>1754	Identifier	std 
>1755	Identifier	nmax
>1756	ExpressionStatement	 
>1757	CallExpression	nextFront . clear ( )
>1758	ArgumentList	 
>1759	Callee	nextFront . clear
>1760	MemberAccess	nextFront . clear
>1761	Identifier	clear
>1762	Identifier	nextFront
>1763	ExpressionStatement	 
>1764	CallExpression	front . swap ( nextFront )
>1765	ArgumentList	nextFront
>1766	Argument	nextFront
>1767	Identifier	nextFront
>1768	Callee	front . swap
>1769	MemberAccess	front . swap
>1770	Identifier	swap
>1771	Identifier	front
>1772	Condition	 
>1773	UnaryOp	! nextFront . empty ( )
>1774	CallExpression	nextFront . empty ( )
>1775	ArgumentList	 
>1776	Callee	nextFront . empty
>1777	MemberAccess	nextFront . empty
>1778	Identifier	empty
>1779	Identifier	nextFront
>1780	UnaryOperator	!
>1781	ExpressionStatement	 
>1782	CallExpression	nextFront . push_back ( seed )
>1783	ArgumentList	seed
>1784	Argument	seed
>1785	Identifier	seed
>1786	Callee	nextFront . push_back
>1787	MemberAccess	nextFront . push_back
>1788	Identifier	push_back
>1789	Identifier	nextFront
>1790	ExpressionStatement	 
>1791	CallExpression	neighborSet . insert ( seed )
>1792	ArgumentList	seed
>1793	Argument	seed
>1794	Identifier	seed
>1795	Callee	neighborSet . insert
>1796	MemberAccess	neighborSet . insert
>1797	Identifier	insert
>1798	Identifier	neighborSet
>1799	ExpressionStatement	 
>1800	CallExpression	neighborSet . clear ( )
>1801	ArgumentList	 
>1802	Callee	neighborSet . clear
>1803	MemberAccess	neighborSet . clear
>1804	Identifier	clear
>1805	Identifier	neighborSet
>1806	IfStatement	if ( alreadyGrouped . find ( seed ) != alreadyGrouped . end ( ) )
>1807	ContinueStatement	 
>1808	Condition	 
>1809	EqualityExpression	alreadyGrouped . find ( seed ) != alreadyGrouped . end ( )
>1810	CallExpression	alreadyGrouped . end ( )
>1811	ArgumentList	 
>1812	Callee	alreadyGrouped . end
>1813	MemberAccess	alreadyGrouped . end
>1814	Identifier	end
>1815	Identifier	alreadyGrouped
>1816	CallExpression	alreadyGrouped . find ( seed )
>1817	ArgumentList	seed
>1818	Argument	seed
>1819	Identifier	seed
>1820	Callee	alreadyGrouped . find
>1821	MemberAccess	alreadyGrouped . find
>1822	Identifier	find
>1823	Identifier	alreadyGrouped
>1824	ExpressionStatement	 
>1825	AssignmentExpr	seed = ranks [ i ] . first
>1826	MemberAccess	ranks [ i ] . first
>1827	Identifier	first
>1828	ArrayIndexing	ranks [ i ]
>1829	Identifier	i
>1830	Identifier	ranks
>1831	Identifier	seed
>1832	UnaryExpression	 
>1833	Identifier	i
>1834	IncDec	++
>1835	Condition	 
>1836	RelationalExpression	i < nCoincidences
>1837	Identifier	nCoincidences
>1838	Identifier	i
>1839	ForInit	 
>1840	AssignmentExpr	i = 0
>1841	PrimaryExpression	0
>1842	Identifier	i
>1843	IdentifierDeclStatement	 
>1844	IdentifierDecl	seed
>1845	Identifier	seed
>1846	IdentifierDeclType	size_type
>1847	IdentifierDecl	nmax
>1848	Identifier	nmax
>1849	IdentifierDeclType	size_type
>1850	IdentifierDecl	cur
>1851	Identifier	cur
>1852	IdentifierDeclType	size_type
>1853	IdentifierDecl	i
>1854	Identifier	i
>1855	IdentifierDeclType	size_type
>1856	IdentifierDeclStatement	 
>1857	IdentifierDecl	n
>1858	Identifier	n
>1859	IdentifierDeclType	vector < size_type > 
>1860	IdentifierDeclStatement	 
>1861	IdentifierDecl	neighbors
>1862	Identifier	neighbors
>1863	IdentifierDeclType	vector < size_type >
>1864	IdentifierDeclStatement	 
>1865	IdentifierDecl	neighborSet
>1866	Identifier	neighborSet
>1867	IdentifierDeclType	AGroup
>1868	IdentifierDecl	alreadyGrouped
>1869	Identifier	alreadyGrouped
>1870	IdentifierDeclType	AGroup
>1871	IdentifierDeclStatement	 
>1872	IdentifierDecl	nextFront
>1873	Identifier	nextFront
>1874	IdentifierDeclType	list < size_type >
>1875	IdentifierDecl	front
>1876	Identifier	front
>1877	IdentifierDeclType	list < size_type >
>1878	ForStatement	for ( size_type i = 0 ; i < counts . size ( ) ; ++ i )
>1879	ExpressionStatement	 
>1880	AssignmentExpr	sortedCounts [ counts [ i ] . first ] = counts [ i ]
>1881	ArrayIndexing	counts [ i ]
>1882	Identifier	i
>1883	Identifier	counts
>1884	ArrayIndexing	sortedCounts [ counts [ i ] . first ]
>1885	MemberAccess	counts [ i ] . first
>1886	Identifier	first
>1887	ArrayIndexing	counts [ i ]
>1888	Identifier	i
>1889	Identifier	counts
>1890	Identifier	sortedCounts
>1891	UnaryExpression	 
>1892	Identifier	i
>1893	IncDec	++
>1894	Condition	 
>1895	RelationalExpression	i < counts . size ( )
>1896	CallExpression	counts . size ( )
>1897	ArgumentList	 
>1898	Callee	counts . size
>1899	MemberAccess	counts . size
>1900	Identifier	size
>1901	Identifier	counts
>1902	Identifier	i
>1903	ForInit	 
>1904	IdentifierDeclStatement	size_type i = 0 ;
>1905	IdentifierDecl	i = 0
>1906	AssignmentExpr	i = 0
>1907	PrimaryExpression	0
>1908	Identifier	i
>1909	Identifier	i
>1910	IdentifierDeclType	size_type
>1911	IdentifierDeclStatement	 
>1912	IdentifierDecl	sortedCounts ( counts . size ( ) )
>1913	CallExpression	counts . size ( )
>1914	ArgumentList	 
>1915	Callee	counts . size
>1916	MemberAccess	counts . size
>1917	Identifier	size
>1918	Identifier	counts
>1919	Identifier	sortedCounts
>1920	IdentifierDeclType	vector < IdxVal >
>1921	ExpressionStatement	 
>1922	CallExpression	stable_sort ( ranks . begin ( ) , ranks . end ( ) , SeedsOrder ( ) )
>1923	ArgumentList	ranks . begin ( )
>1924	Argument	SeedsOrder ( )
>1925	CallExpression	SeedsOrder ( )
>1926	ArgumentList	 
>1927	Callee	SeedsOrder
>1928	Identifier	SeedsOrder
>1929	Argument	ranks . end ( )
>1930	CallExpression	ranks . end ( )
>1931	ArgumentList	 
>1932	Callee	ranks . end
>1933	MemberAccess	ranks . end
>1934	Identifier	end
>1935	Identifier	ranks
>1936	Argument	ranks . begin ( )
>1937	CallExpression	ranks . begin ( )
>1938	ArgumentList	 
>1939	Callee	ranks . begin
>1940	MemberAccess	ranks . begin
>1941	Identifier	begin
>1942	Identifier	ranks
>1943	Callee	stable_sort
>1944	Identifier	stable_sort
>1945	IdentifierDeclStatement	 
>1946	IdentifierDecl	ranks ( counts )
>1947	Identifier	counts
>1948	Identifier	ranks
>1949	IdentifierDeclType	vector < IdxVal >
>1950	ExpressionStatement	 
>1951	CallExpression	tbi_delete_ ( )
>1952	ArgumentList	 
>1953	Callee	tbi_delete_
>1954	Identifier	tbi_delete_
>1955	ExpressionStatement	 
>1956	CallExpression	groups_ . clear ( )
>1957	ArgumentList	 
>1958	Callee	groups_ . clear
>1959	MemberAccess	groups_ . clear
>1960	Identifier	clear
>1961	Identifier	groups_
>1962	IdentifierDeclStatement	 
>1963	IdentifierDecl	nCoincidences = ( size_type ) counts . size ( )
>1964	AssignmentExpr	nCoincidences = ( size_type ) counts . size ( )
>1965	CastExpression	( size_type ) counts . size ( )
>1966	CallExpression	counts . size ( )
>1967	ArgumentList	 
>1968	Callee	counts . size
>1969	MemberAccess	counts . size
>1970	Identifier	size
>1971	Identifier	counts
>1972	CastTarget	size_type
>1973	Identifier	nCoincidences
>1974	Identifier	nCoincidences
>1975	IdentifierDeclType	size_type
>1976	IfStatement	if ( symmetricTam_ )
>1977	ExpressionStatement	 
>1978	CallExpression	tam_ . addToTranspose ( tam2 )
>1979	ArgumentList	tam2
>1980	Argument	tam2
>1981	Identifier	tam2
>1982	Callee	tam_ . addToTranspose
>1983	MemberAccess	tam_ . addToTranspose
>1984	Identifier	addToTranspose
>1985	Identifier	tam_
>1986	Condition	 
>1987	Identifier	symmetricTam_
>1988	IdentifierDeclStatement	 
>1989	IdentifierDecl	tam2 ( tam_ )
>1990	Identifier	tam_
>1991	Identifier	tam2
>1992	IdentifierDeclType	IntegerTAM
>1993	IdentifierDeclStatement	 
>1994	IdentifierDecl	* where = \"Grouper
>1995	AssignmentExpr	* where = \"Grouper
>1996	PrimaryExpression	\"Grouper
>1997	Identifier	where
>1998	Identifier	where
>1999	IdentifierDeclType	const char *
>2076	FunctionDef	Grouper 
>2077	ParameterList	const vector < value_type > & counts
>2078	Parameter	 
>2079	Identifier	counts
>2080	ParameterType	const vector < value_type > &
>2081	ReturnType	void
>2082	CompoundStatement	 
>2083	ExpressionStatement	 
>2084	CallExpression	weights_ . normalizeRows ( )
>2085	ArgumentList	 
>2086	Callee	weights_ . normalizeRows
>2087	MemberAccess	weights_ . normalizeRows
>2088	Identifier	normalizeRows
>2089	Identifier	weights_
>2090	ForStatement	for ( size_type row_idx = 0 ; g != g_end ; ++ g , ++ row_idx )
>2091	CompoundStatement	 
>2092	ExpressionStatement	 
>2093	CallExpression	weights_ . setRowFromDense ( row_idx , row . begin ( ) )
>2094	ArgumentList	row_idx
>2095	Argument	row . begin ( )
>2096	CallExpression	row . begin ( )
>2097	ArgumentList	 
>2098	Callee	row . begin
>2099	MemberAccess	row . begin
>2100	Identifier	begin
>2101	Identifier	row
>2102	Argument	row_idx
>2103	Identifier	row_idx
>2104	Callee	weights_ . setRowFromDense
>2105	MemberAccess	weights_ . setRowFromDense
>2106	Identifier	setRowFromDense
>2107	Identifier	weights_
>2108	ForStatement	for ( ; e != e_end ; ++ e )
>2109	ExpressionStatement	 
>2110	AssignmentExpr	row [ * e ] = counts [ * e ]
>2111	ArrayIndexing	counts [ * e ]
>2112	UnaryOp	* e
>2113	Identifier	e
>2114	UnaryOperator	*
>2115	Identifier	counts
>2116	ArrayIndexing	row [ * e ]
>2117	UnaryOp	* e
>2118	Identifier	e
>2119	UnaryOperator	*
>2120	Identifier	row
>2121	UnaryExpression	 
>2122	Identifier	e
>2123	IncDec	++
>2124	Condition	 
>2125	EqualityExpression	e != e_end
>2126	Identifier	e_end
>2127	Identifier	e
>2128	IdentifierDeclStatement	 
>2129	IdentifierDecl	e_end = g -> end ( )
>2130	AssignmentExpr	e_end = g -> end ( )
>2131	CallExpression	g -> end ( )
>2132	ArgumentList	 
>2133	Callee	g -> end
>2134	PtrMemberAccess	g -> end
>2135	Identifier	end
>2136	Identifier	g
>2137	Identifier	e_end
>2138	Identifier	e_end
>2139	IdentifierDeclType	AGroup 
>2140	IdentifierDecl	e = g -> begin ( )
>2141	AssignmentExpr	e = g -> begin ( )
>2142	CallExpression	g -> begin ( )
>2143	ArgumentList	 
>2144	Callee	g -> begin
>2145	PtrMemberAccess	g -> begin
>2146	Identifier	begin
>2147	Identifier	g
>2148	Identifier	e
>2149	Identifier	e
>2150	IdentifierDeclType	AGroup 
>2151	ExpressionStatement	 
>2152	CallExpression	fill ( row , ( value_type ) 0 )
>2153	ArgumentList	row
>2154	Argument	( value_type ) 0
>2155	CastExpression	( value_type ) 0
>2156	PrimaryExpression	0
>2157	CastTarget	value_type
>2158	Argument	row
>2159	Identifier	row
>2160	Callee	fill
>2161	Identifier	fill
>2162	Expression	 
>2163	UnaryExpression	++ row_idx
>2164	Identifier	row_idx
>2165	IncDec	++
>2166	UnaryExpression	++ g
>2167	Identifier	g
>2168	IncDec	++
>2169	Condition	 
>2170	EqualityExpression	g != g_end
>2171	Identifier	g_end
>2172	Identifier	g
>2173	ForInit	 
>2174	IdentifierDeclStatement	size_type row_idx = 0 ;
>2175	IdentifierDecl	row_idx = 0
>2176	AssignmentExpr	row_idx = 0
>2177	PrimaryExpression	0
>2178	Identifier	row_idx
>2179	Identifier	row_idx
>2180	IdentifierDeclType	size_type
>2181	IdentifierDeclStatement	 
>2182	IdentifierDecl	g_end = groups_ . end ( )
>2183	AssignmentExpr	g_end = groups_ . end ( )
>2184	CallExpression	groups_ . end ( )
>2185	ArgumentList	 
>2186	Callee	groups_ . end
>2187	MemberAccess	groups_ . end
>2188	Identifier	end
>2189	Identifier	groups_
>2190	Identifier	g_end
>2191	Identifier	g_end
>2192	IdentifierDeclType	Groups 
>2193	IdentifierDecl	g = groups_ . begin ( )
>2194	AssignmentExpr	g = groups_ . begin ( )
>2195	CallExpression	groups_ . begin ( )
>2196	ArgumentList	 
>2197	Callee	groups_ . begin
>2198	MemberAccess	groups_ . begin
>2199	Identifier	begin
>2200	Identifier	groups_
>2201	Identifier	g
>2202	Identifier	g
>2203	IdentifierDeclType	Groups 
>2204	IdentifierDeclStatement	 
>2205	IdentifierDecl	row ( n_coincidences )
>2206	Identifier	n_coincidences
>2207	Identifier	row
>2208	IdentifierDeclType	vector < value_type >
>2209	ExpressionStatement	 
>2210	CallExpression	weights_ . resize ( groups_ . size ( ) , n_coincidences , true )
>2211	ArgumentList	groups_ . size ( )
>2212	Argument	true
>2213	Identifier	true
>2214	Argument	n_coincidences
>2215	Identifier	n_coincidences
>2216	Argument	groups_ . size ( )
>2217	CallExpression	groups_ . size ( )
>2218	ArgumentList	 
>2219	Callee	groups_ . size
>2220	MemberAccess	groups_ . size
>2221	Identifier	size
>2222	Identifier	groups_
>2223	Callee	weights_ . resize
>2224	MemberAccess	weights_ . resize
>2225	Identifier	resize
>2226	Identifier	weights_
>2227	IdentifierDeclStatement	 
>2228	IdentifierDecl	n_coincidences = tam_ . nRows ( )
>2229	AssignmentExpr	n_coincidences = tam_ . nRows ( )
>2230	CallExpression	tam_ . nRows ( )
>2231	ArgumentList	 
>2232	Callee	tam_ . nRows
>2233	MemberAccess	tam_ . nRows
>2234	Identifier	nRows
>2235	Identifier	tam_
>2236	Identifier	n_coincidences
>2237	Identifier	n_coincidences
>2238	IdentifierDeclType	const size_type
>2287	FunctionDef	Grouper 
>2288	ParameterList	size_type nGroups
>2289	Parameter	 
>2290	Identifier	nGroups
>2291	ParameterType	size_type
>2292	ReturnType	void
>2293	CompoundStatement	 
>2294	ExpressionStatement	 
>2295	CallExpression	groups_from_merges_ ( nGroups )
>2296	ArgumentList	nGroups
>2297	Argument	nGroups
>2298	Identifier	nGroups
>2299	Callee	groups_from_merges_
>2300	Identifier	groups_from_merges_
>2301	ForStatement	for ( size_type i = 0 ; i != nIter ; ++ i )
>2302	CompoundStatement	 
>2303	ExpressionStatement	 
>2304	CallExpression	ntam . setColToZero ( g2 )
>2305	ArgumentList	g2
>2306	Argument	g2
>2307	Identifier	g2
>2308	Callee	ntam . setColToZero
>2309	MemberAccess	ntam . setColToZero
>2310	Identifier	setColToZero
>2311	Identifier	ntam
>2312	ExpressionStatement	 
>2313	CallExpression	ntam . setRowToZero ( g2 )
>2314	ArgumentList	g2
>2315	Argument	g2
>2316	Identifier	g2
>2317	Callee	ntam . setRowToZero
>2318	MemberAccess	ntam . setRowToZero
>2319	Identifier	setRowToZero
>2320	Identifier	ntam
>2321	ExpressionStatement	 
>2322	CallExpression	ahc_update_ ( g1 , scale , groups , utam , ntam , row_sums )
>2323	ArgumentList	g1
>2324	Argument	row_sums
>2325	Identifier	row_sums
>2326	Argument	ntam
>2327	Identifier	ntam
>2328	Argument	utam
>2329	Identifier	utam
>2330	Argument	groups
>2331	Identifier	groups
>2332	Argument	scale
>2333	Identifier	scale
>2334	Argument	g1
>2335	Identifier	g1
>2336	Callee	ahc_update_
>2337	Identifier	ahc_update_
>2338	ExpressionStatement	 
>2339	AssignmentExpr	row_sums [ g2 ] = 0
>2340	PrimaryExpression	0
>2341	ArrayIndexing	row_sums [ g2 ]
>2342	Identifier	g2
>2343	Identifier	row_sums
>2344	ExpressionStatement	 
>2345	AssignmentExpr	row_sums [ g1 ] = utam . rowSum ( g1 )
>2346	CallExpression	utam . rowSum ( g1 )
>2347	ArgumentList	g1
>2348	Argument	g1
>2349	Identifier	g1
>2350	Callee	utam . rowSum
>2351	MemberAccess	utam . rowSum
>2352	Identifier	rowSum
>2353	Identifier	utam
>2354	ArrayIndexing	row_sums [ g1 ]
>2355	Identifier	g1
>2356	Identifier	row_sums
>2357	ExpressionStatement	 
>2358	CallExpression	utam . setColToZero ( g2 )
>2359	ArgumentList	g2
>2360	Argument	g2
>2361	Identifier	g2
>2362	Callee	utam . setColToZero
>2363	MemberAccess	utam . setColToZero
>2364	Identifier	setColToZero
>2365	Identifier	utam
>2366	ExpressionStatement	 
>2367	CallExpression	utam . setRowToZero ( g2 )
>2368	ArgumentList	g2
>2369	Argument	g2
>2370	Identifier	g2
>2371	Callee	utam . setRowToZero
>2372	MemberAccess	utam . setRowToZero
>2373	Identifier	setRowToZero
>2374	Identifier	utam
>2375	ExpressionStatement	 
>2376	CallExpression	utam . set ( g1 , g1 , utam . get ( g1 , g1 ) - utam . get ( g1 , g2 ) + utam . get ( g2 , g2 ) )
>2377	ArgumentList	g1
>2378	Argument	utam . get ( g1 , g1 ) - utam . get ( g1 , g2 ) + utam . get ( g2 , g2 )
>2379	AdditiveExpression	utam . get ( g1 , g1 ) - utam . get ( g1 , g2 ) + utam . get ( g2 , g2 )
>2380	AdditiveExpression	utam . get ( g1 , g2 ) + utam . get ( g2 , g2 )
>2381	CallExpression	utam . get ( g2 , g2 )
>2382	ArgumentList	g2
>2383	Argument	g2
>2384	Identifier	g2
>2385	Argument	g2
>2386	Identifier	g2
>2387	Callee	utam . get
>2388	MemberAccess	utam . get
>2389	Identifier	get
>2390	Identifier	utam
>2391	CallExpression	utam . get ( g1 , g2 )
>2392	ArgumentList	g1
>2393	Argument	g2
>2394	Identifier	g2
>2395	Argument	g1
>2396	Identifier	g1
>2397	Callee	utam . get
>2398	MemberAccess	utam . get
>2399	Identifier	get
>2400	Identifier	utam
>2401	CallExpression	utam . get ( g1 , g1 )
>2402	ArgumentList	g1
>2403	Argument	g1
>2404	Identifier	g1
>2405	Argument	g1
>2406	Identifier	g1
>2407	Callee	utam . get
>2408	MemberAccess	utam . get
>2409	Identifier	get
>2410	Identifier	utam
>2411	Argument	g1
>2412	Identifier	g1
>2413	Argument	g1
>2414	Identifier	g1
>2415	Callee	utam . set
>2416	MemberAccess	utam . set
>2417	Identifier	set
>2418	Identifier	utam
>2419	ExpressionStatement	 
>2420	CallExpression	utam . addTwoCols ( g2 , g1 )
>2421	ArgumentList	g2
>2422	Argument	g1
>2423	Identifier	g1
>2424	Argument	g2
>2425	Identifier	g2
>2426	Callee	utam . addTwoCols
>2427	MemberAccess	utam . addTwoCols
>2428	Identifier	addTwoCols
>2429	Identifier	utam
>2430	ExpressionStatement	 
>2431	CallExpression	utam . addTwoRows ( g2 , g1 )
>2432	ArgumentList	g2
>2433	Argument	g1
>2434	Identifier	g1
>2435	Argument	g2
>2436	Identifier	g2
>2437	Callee	utam . addTwoRows
>2438	MemberAccess	utam . addTwoRows
>2439	Identifier	addTwoRows
>2440	Identifier	utam
>2441	ExpressionStatement	 
>2442	Identifier	TRACE_AHC
>2443	ExpressionStatement	 
>2444	CallExpression	groups [ g2 ] . clear ( )
>2445	ArgumentList	 
>2446	Callee	groups [ g2 ] . clear
>2447	MemberAccess	groups [ g2 ] . clear
>2448	Identifier	clear
>2449	ArrayIndexing	groups [ g2 ]
>2450	Identifier	g2
>2451	Identifier	groups
>2452	ExpressionStatement	 
>2453	CallExpression	std 
>2454	ArgumentList	groups [ g2 ] . begin ( )
>2455	Argument	std 
>2456	CallExpression	std 
>2457	ArgumentList	groups [ g1 ]
>2458	Argument	groups [ g1 ]
>2459	ArrayIndexing	groups [ g1 ]
>2460	Identifier	g1
>2461	Identifier	groups
>2462	Callee	std 
>2463	Identifier	std 
>2464	Argument	groups [ g2 ] . end ( )
>2465	CallExpression	groups [ g2 ] . end ( )
>2466	ArgumentList	 
>2467	Callee	groups [ g2 ] . end
>2468	MemberAccess	groups [ g2 ] . end
>2469	Identifier	end
>2470	ArrayIndexing	groups [ g2 ]
>2471	Identifier	g2
>2472	Identifier	groups
>2473	Argument	groups [ g2 ] . begin ( )
>2474	CallExpression	groups [ g2 ] . begin ( )
>2475	ArgumentList	 
>2476	Callee	groups [ g2 ] . begin
>2477	MemberAccess	groups [ g2 ] . begin
>2478	Identifier	begin
>2479	ArrayIndexing	groups [ g2 ]
>2480	Identifier	g2
>2481	Identifier	groups
>2482	Callee	std 
>2483	Identifier	std 
>2484	ExpressionStatement	 
>2485	CallExpression	merges_ . push_back ( std 
>2486	ArgumentList	std 
>2487	Argument	std 
>2488	CallExpression	std 
>2489	ArgumentList	g1
>2490	Argument	g2
>2491	Identifier	g2
>2492	Argument	g1
>2493	Identifier	g1
>2494	Callee	std 
>2495	Identifier	std 
>2496	Callee	merges_ . push_back
>2497	MemberAccess	merges_ . push_back
>2498	Identifier	push_back
>2499	Identifier	merges_
>2500	IfStatement	if ( val == 0 )
>2501	CompoundStatement	 
>2502	ForStatement	for ( size_type j = 0 ; j != groups . size ( ) ; ++ j )
>2503	CompoundStatement	 
>2504	IfStatement	if ( group_size != 0 )
>2505	CompoundStatement	 
>2506	IfStatement	if ( g1 == 99999 )
>2507	ElseStatement	else
>2508	IfStatement	if ( group_size < groups [ g1 ] . size ( ) )
>2509	ElseStatement	else
>2510	IfStatement	if ( g2 == 99999 || group_size < groups [ g2 ] . size ( ) )
>2511	CompoundStatement	 
>2512	ExpressionStatement	 
>2513	AssignmentExpr	g2 = j
>2514	Identifier	j
>2515	Identifier	g2
>2516	Condition	 
>2517	OrExpression	g2 == 99999 || group_size < groups [ g2 ] . size ( )
>2518	RelationalExpression	group_size < groups [ g2 ] . size ( )
>2519	CallExpression	groups [ g2 ] . size ( )
>2520	ArgumentList	 
>2521	Callee	groups [ g2 ] . size
>2522	MemberAccess	groups [ g2 ] . size
>2523	Identifier	size
>2524	ArrayIndexing	groups [ g2 ]
>2525	Identifier	g2
>2526	Identifier	groups
>2527	Identifier	group_size
>2528	EqualityExpression	g2 == 99999
>2529	PrimaryExpression	99999
>2530	Identifier	g2
>2531	CompoundStatement	 
>2532	ExpressionStatement	 
>2533	AssignmentExpr	g1 = j
>2534	Identifier	j
>2535	Identifier	g1
>2536	ExpressionStatement	 
>2537	AssignmentExpr	g2 = g1
>2538	Identifier	g1
>2539	Identifier	g2
>2540	Condition	 
>2541	RelationalExpression	group_size < groups [ g1 ] . size ( )
>2542	CallExpression	groups [ g1 ] . size ( )
>2543	ArgumentList	 
>2544	Callee	groups [ g1 ] . size
>2545	MemberAccess	groups [ g1 ] . size
>2546	Identifier	size
>2547	ArrayIndexing	groups [ g1 ]
>2548	Identifier	g1
>2549	Identifier	groups
>2550	Identifier	group_size
>2551	CompoundStatement	 
>2552	ExpressionStatement	 
>2553	AssignmentExpr	g1 = j
>2554	Identifier	j
>2555	Identifier	g1
>2556	Condition	 
>2557	EqualityExpression	g1 == 99999
>2558	PrimaryExpression	99999
>2559	Identifier	g1
>2560	Condition	 
>2561	EqualityExpression	group_size != 0
>2562	PrimaryExpression	0
>2563	Identifier	group_size
>2564	IdentifierDeclStatement	 
>2565	IdentifierDecl	group_size = groups [ j ] . size ( )
>2566	AssignmentExpr	group_size = groups [ j ] . size ( )
>2567	CallExpression	groups [ j ] . size ( )
>2568	ArgumentList	 
>2569	Callee	groups [ j ] . size
>2570	MemberAccess	groups [ j ] . size
>2571	Identifier	size
>2572	ArrayIndexing	groups [ j ]
>2573	Identifier	j
>2574	Identifier	groups
>2575	Identifier	group_size
>2576	Identifier	group_size
>2577	IdentifierDeclType	size_type
>2578	UnaryExpression	 
>2579	Identifier	j
>2580	IncDec	++
>2581	Condition	 
>2582	EqualityExpression	j != groups . size ( )
>2583	CallExpression	groups . size ( )
>2584	ArgumentList	 
>2585	Callee	groups . size
>2586	MemberAccess	groups . size
>2587	Identifier	size
>2588	Identifier	groups
>2589	Identifier	j
>2590	ForInit	 
>2591	IdentifierDeclStatement	size_type j = 0 ;
>2592	IdentifierDecl	j = 0
>2593	AssignmentExpr	j = 0
>2594	PrimaryExpression	0
>2595	Identifier	j
>2596	Identifier	j
>2597	IdentifierDeclType	size_type
>2598	ExpressionStatement	 
>2599	AssignmentExpr	g1 = g2 = 99999
>2600	AssignmentExpr	g2 = 99999
>2601	PrimaryExpression	99999
>2602	Identifier	g2
>2603	Identifier	g1
>2604	Condition	 
>2605	EqualityExpression	val == 0
>2606	PrimaryExpression	0
>2607	Identifier	val
>2608	ExpressionStatement	 
>2609	CallExpression	ntam . max ( g1 , g2 , val )
>2610	ArgumentList	g1
>2611	Argument	val
>2612	Identifier	val
>2613	Argument	g2
>2614	Identifier	g2
>2615	Argument	g1
>2616	Identifier	g1
>2617	Callee	ntam . max
>2618	MemberAccess	ntam . max
>2619	Identifier	max
>2620	Identifier	ntam
>2621	UnaryExpression	 
>2622	Identifier	i
>2623	IncDec	++
>2624	Condition	 
>2625	EqualityExpression	i != nIter
>2626	Identifier	nIter
>2627	Identifier	i
>2628	ForInit	 
>2629	IdentifierDeclStatement	size_type i = 0 ;
>2630	IdentifierDecl	i = 0
>2631	AssignmentExpr	i = 0
>2632	PrimaryExpression	0
>2633	Identifier	i
>2634	Identifier	i
>2635	IdentifierDeclType	size_type
>2636	IdentifierDeclStatement	 
>2637	IdentifierDecl	val = 0
>2638	AssignmentExpr	val = 0
>2639	PrimaryExpression	0
>2640	Identifier	val
>2641	Identifier	val
>2642	IdentifierDeclType	value_type
>2643	IdentifierDeclStatement	 
>2644	IdentifierDecl	g2 = 0
>2645	AssignmentExpr	g2 = 0
>2646	PrimaryExpression	0
>2647	Identifier	g2
>2648	Identifier	g2
>2649	IdentifierDeclType	size_type
>2650	IdentifierDecl	g1 = 0
>2651	AssignmentExpr	g1 = 0
>2652	PrimaryExpression	0
>2653	Identifier	g1
>2654	Identifier	g1
>2655	IdentifierDeclType	size_type
>2656	IdentifierDeclStatement	 
>2657	IdentifierDecl	nCoincidences = utam . nNonZeroRows ( )
>2658	AssignmentExpr	nCoincidences = utam . nNonZeroRows ( )
>2659	CallExpression	utam . nNonZeroRows ( )
>2660	ArgumentList	 
>2661	Callee	utam . nNonZeroRows
>2662	MemberAccess	utam . nNonZeroRows
>2663	Identifier	nNonZeroRows
>2664	Identifier	utam
>2665	Identifier	nCoincidences
>2666	Identifier	nCoincidences
>2667	IdentifierDeclType	size_type
>2668	IdentifierDeclStatement	 
>2669	IdentifierDecl	nIter = utam . nNonZeroRows ( ) - 1
>2670	AssignmentExpr	nIter = utam . nNonZeroRows ( ) - 1
>2671	AdditiveExpression	utam . nNonZeroRows ( ) - 1
>2672	PrimaryExpression	1
>2673	CallExpression	utam . nNonZeroRows ( )
>2674	ArgumentList	 
>2675	Callee	utam . nNonZeroRows
>2676	MemberAccess	utam . nNonZeroRows
>2677	Identifier	nNonZeroRows
>2678	Identifier	utam
>2679	Identifier	nIter
>2680	Identifier	nIter
>2681	IdentifierDeclType	size_type
>2682	ForStatement	for ( size_type i = 0 ; i != tam_ . nRows ( ) ; ++ i )
>2683	IfStatement	if ( ! utam . isRowZero ( i ) )
>2684	ExpressionStatement	 
>2685	CallExpression	ahc_update_ ( i , scale , groups , utam , ntam , row_sums )
>2686	ArgumentList	i
>2687	Argument	row_sums
>2688	Identifier	row_sums
>2689	Argument	ntam
>2690	Identifier	ntam
>2691	Argument	utam
>2692	Identifier	utam
>2693	Argument	groups
>2694	Identifier	groups
>2695	Argument	scale
>2696	Identifier	scale
>2697	Argument	i
>2698	Identifier	i
>2699	Callee	ahc_update_
>2700	Identifier	ahc_update_
>2701	Condition	 
>2702	UnaryOp	! utam . isRowZero ( i )
>2703	CallExpression	utam . isRowZero ( i )
>2704	ArgumentList	i
>2705	Argument	i
>2706	Identifier	i
>2707	Callee	utam . isRowZero
>2708	MemberAccess	utam . isRowZero
>2709	Identifier	isRowZero
>2710	Identifier	utam
>2711	UnaryOperator	!
>2712	UnaryExpression	 
>2713	Identifier	i
>2714	IncDec	++
>2715	Condition	 
>2716	EqualityExpression	i != tam_ . nRows ( )
>2717	CallExpression	tam_ . nRows ( )
>2718	ArgumentList	 
>2719	Callee	tam_ . nRows
>2720	MemberAccess	tam_ . nRows
>2721	Identifier	nRows
>2722	Identifier	tam_
>2723	Identifier	i
>2724	ForInit	 
>2725	IdentifierDeclStatement	size_type i = 0 ;
>2726	IdentifierDecl	i = 0
>2727	AssignmentExpr	i = 0
>2728	PrimaryExpression	0
>2729	Identifier	i
>2730	Identifier	i
>2731	IdentifierDeclType	size_type
>2732	ForStatement	for ( size_type i = 0 ; i != tam_ . nRows ( ) ; ++ i )
>2733	CompoundStatement	 
>2734	IfStatement	if ( utam . isRowZero ( i ) )
>2735	ElseStatement	else
>2736	CompoundStatement	 
>2737	ExpressionStatement	 
>2738	UnaryExpression	++ nnzc
>2739	Identifier	nnzc
>2740	IncDec	++
>2741	ExpressionStatement	 
>2742	CallExpression	groups . push_back ( AHC_Group ( 1 , i ) )
>2743	ArgumentList	AHC_Group ( 1 , i )
>2744	Argument	AHC_Group ( 1 , i )
>2745	CallExpression	AHC_Group ( 1 , i )
>2746	ArgumentList	1
>2747	Argument	i
>2748	Identifier	i
>2749	Argument	1
>2750	PrimaryExpression	1
>2751	Callee	AHC_Group
>2752	Identifier	AHC_Group
>2753	Callee	groups . push_back
>2754	MemberAccess	groups . push_back
>2755	Identifier	push_back
>2756	Identifier	groups
>2757	ExpressionStatement	 
>2758	CallExpression	groups . push_back ( AHC_Group ( 0 ) )
>2759	ArgumentList	AHC_Group ( 0 )
>2760	Argument	AHC_Group ( 0 )
>2761	CallExpression	AHC_Group ( 0 )
>2762	ArgumentList	0
>2763	Argument	0
>2764	PrimaryExpression	0
>2765	Callee	AHC_Group
>2766	Identifier	AHC_Group
>2767	Callee	groups . push_back
>2768	MemberAccess	groups . push_back
>2769	Identifier	push_back
>2770	Identifier	groups
>2771	Condition	 
>2772	CallExpression	utam . isRowZero ( i )
>2773	ArgumentList	i
>2774	Argument	i
>2775	Identifier	i
>2776	Callee	utam . isRowZero
>2777	MemberAccess	utam . isRowZero
>2778	Identifier	isRowZero
>2779	Identifier	utam
>2780	UnaryExpression	 
>2781	Identifier	i
>2782	IncDec	++
>2783	Condition	 
>2784	EqualityExpression	i != tam_ . nRows ( )
>2785	CallExpression	tam_ . nRows ( )
>2786	ArgumentList	 
>2787	Callee	tam_ . nRows
>2788	MemberAccess	tam_ . nRows
>2789	Identifier	nRows
>2790	Identifier	tam_
>2791	Identifier	i
>2792	ForInit	 
>2793	IdentifierDeclStatement	size_type i = 0 ;
>2794	IdentifierDecl	i = 0
>2795	AssignmentExpr	i = 0
>2796	PrimaryExpression	0
>2797	Identifier	i
>2798	Identifier	i
>2799	IdentifierDeclType	size_type
>2800	IdentifierDeclStatement	 
>2801	IdentifierDecl	nnzc = 0
>2802	AssignmentExpr	nnzc = 0
>2803	PrimaryExpression	0
>2804	Identifier	nnzc
>2805	Identifier	nnzc
>2806	IdentifierDeclType	size_type
>2807	IdentifierDeclStatement	 
>2808	IdentifierDecl	groups
>2809	Identifier	groups
>2810	IdentifierDeclType	AHC_Groups
>2811	ExpressionStatement	 
>2812	CallExpression	merges_ . clear ( )
>2813	ArgumentList	 
>2814	Callee	merges_ . clear
>2815	MemberAccess	merges_ . clear
>2816	Identifier	clear
>2817	Identifier	merges_
>2818	ExpressionStatement	 
>2819	CallExpression	utam . rowSums ( row_sums . begin ( ) )
>2820	ArgumentList	row_sums . begin ( )
>2821	Argument	row_sums . begin ( )
>2822	CallExpression	row_sums . begin ( )
>2823	ArgumentList	 
>2824	Callee	row_sums . begin
>2825	MemberAccess	row_sums . begin
>2826	Identifier	begin
>2827	Identifier	row_sums
>2828	Callee	utam . rowSums
>2829	MemberAccess	utam . rowSums
>2830	Identifier	rowSums
>2831	Identifier	utam
>2832	IdentifierDeclStatement	 
>2833	IdentifierDecl	row_sums ( tam_ . nRows ( ) , ( value_type ) 0 )
>2834	Expression	tam_ . nRows ( ) , ( value_type ) 0
>2835	CastExpression	( value_type ) 0
>2836	PrimaryExpression	0
>2837	CastTarget	value_type
>2838	CallExpression	tam_ . nRows ( )
>2839	ArgumentList	 
>2840	Callee	tam_ . nRows
>2841	MemberAccess	tam_ . nRows
>2842	Identifier	nRows
>2843	Identifier	tam_
>2844	Identifier	row_sums
>2845	IdentifierDeclType	std 
>2846	ForStatement	for ( size_type i = 0 ; i != tam_ . nRows ( ) ; ++ i )
>2847	ExpressionStatement	 
>2848	CallExpression	ntam . setZero ( i , i )
>2849	ArgumentList	i
>2850	Argument	i
>2851	Identifier	i
>2852	Argument	i
>2853	Identifier	i
>2854	Callee	ntam . setZero
>2855	MemberAccess	ntam . setZero
>2856	Identifier	setZero
>2857	Identifier	ntam
>2858	UnaryExpression	 
>2859	Identifier	i
>2860	IncDec	++
>2861	Condition	 
>2862	EqualityExpression	i != tam_ . nRows ( )
>2863	CallExpression	tam_ . nRows ( )
>2864	ArgumentList	 
>2865	Callee	tam_ . nRows
>2866	MemberAccess	tam_ . nRows
>2867	Identifier	nRows
>2868	Identifier	tam_
>2869	Identifier	i
>2870	ForInit	 
>2871	IdentifierDeclStatement	size_type i = 0 ;
>2872	IdentifierDecl	i = 0
>2873	AssignmentExpr	i = 0
>2874	PrimaryExpression	0
>2875	Identifier	i
>2876	Identifier	i
>2877	IdentifierDeclType	size_type
>2878	ExpressionStatement	 
>2879	CallExpression	ntam . copy ( tam2 )
>2880	ArgumentList	tam2
>2881	Argument	tam2
>2882	Identifier	tam2
>2883	Callee	ntam . copy
>2884	MemberAccess	ntam . copy
>2885	Identifier	copy
>2886	Identifier	ntam
>2887	ExpressionStatement	 
>2888	CallExpression	utam . copy ( tam2 )
>2889	ArgumentList	tam2
>2890	Argument	tam2
>2891	Identifier	tam2
>2892	Callee	utam . copy
>2893	MemberAccess	utam . copy
>2894	Identifier	copy
>2895	Identifier	utam
>2896	IdentifierDeclStatement	 
>2897	IdentifierDecl	ntam
>2898	Identifier	ntam
>2899	IdentifierDeclType	FloatTAM
>2900	IdentifierDecl	utam
>2901	Identifier	utam
>2902	IdentifierDeclType	FloatTAM
>2903	ExpressionStatement	 
>2904	CallExpression	tbi_delete_ ( )
>2905	ArgumentList	 
>2906	Callee	tbi_delete_
>2907	Identifier	tbi_delete_
>2908	ExpressionStatement	 
>2909	CallExpression	groups_ . clear ( )
>2910	ArgumentList	 
>2911	Callee	groups_ . clear
>2912	MemberAccess	groups_ . clear
>2913	Identifier	clear
>2914	Identifier	groups_
>2915	ExpressionStatement	 
>2916	CallExpression	tam_ . addToTranspose ( tam2 )
>2917	ArgumentList	tam2
>2918	Argument	tam2
>2919	Identifier	tam2
>2920	Callee	tam_ . addToTranspose
>2921	MemberAccess	tam_ . addToTranspose
>2922	Identifier	addToTranspose
>2923	Identifier	tam_
>2924	IdentifierDeclStatement	 
>2925	IdentifierDecl	tam2 ( tam_ )
>2926	Identifier	tam_
>2927	Identifier	tam2
>2928	IdentifierDeclType	IntegerTAM
>2929	IdentifierDeclStatement	 
>2930	IdentifierDecl	scale = 1.0
>2931	AssignmentExpr	scale = 1.0
>2932	PrimaryExpression	1.0
>2933	Identifier	scale
>2934	Identifier	scale
>2935	IdentifierDeclType	value_type
>2936	IdentifierDeclStatement	 
>2937	IdentifierDecl	trace = 0
>2938	AssignmentExpr	trace = 0
>2939	PrimaryExpression	0
>2940	Identifier	trace
>2941	Identifier	trace
>2942	IdentifierDeclType	size_type
>2943	CompoundStatement	 
>2944	ExpressionStatement	 
>2945	ShiftExpression	NTA_CHECK ( tam_ . nNonZeroRows ( ) > 0 ) << \"Grouper
>2946	PrimaryExpression	\"Grouper
>2947	CallExpression	NTA_CHECK ( tam_ . nNonZeroRows ( ) > 0 )
>2948	ArgumentList	tam_ . nNonZeroRows ( ) > 0
>2949	Argument	tam_ . nNonZeroRows ( ) > 0
>2950	RelationalExpression	tam_ . nNonZeroRows ( ) > 0
>2951	PrimaryExpression	0
>2952	CallExpression	tam_ . nNonZeroRows ( )
>2953	ArgumentList	 
>2954	Callee	tam_ . nNonZeroRows
>2955	MemberAccess	tam_ . nNonZeroRows
>2956	Identifier	nNonZeroRows
>2957	Identifier	tam_
>2958	Callee	NTA_CHECK
>2959	Identifier	NTA_CHECK
>3004	FunctionDef	Grouper 
>3005	ParameterList	size_type g1 , value_type & scale , const AHC_Groups & groups , const FloatTAM & utam , FloatTAM & ntam , std 
>3006	Parameter	 
>3007	Identifier	row_sums
>3008	ParameterType	std 
>3009	Parameter	 
>3010	Identifier	ntam
>3011	ParameterType	FloatTAM &
>3012	Parameter	 
>3013	Identifier	utam
>3014	ParameterType	const FloatTAM &
>3015	Parameter	 
>3016	Identifier	groups
>3017	ParameterType	const AHC_Groups &
>3018	Parameter	 
>3019	Identifier	scale
>3020	ParameterType	value_type &
>3021	Parameter	 
>3022	Identifier	g1
>3023	ParameterType	size_type
>3024	ReturnType	void
>3025	CompoundStatement	 
>3026	ForStatement	for ( ; ind != ind_end ; ++ ind , ++ nz )
>3027	CompoundStatement	 
>3028	IfStatement	if ( g2 != g1 && row_sums [ g2 ] > 0 )
>3029	CompoundStatement	 
>3030	ExpressionStatement	 
>3031	CallExpression	ntam . set ( g2 , g1 , val )
>3032	ArgumentList	g2
>3033	Argument	val
>3034	Identifier	val
>3035	Argument	g1
>3036	Identifier	g1
>3037	Argument	g2
>3038	Identifier	g2
>3039	Callee	ntam . set
>3040	MemberAccess	ntam . set
>3041	Identifier	set
>3042	Identifier	ntam
>3043	ExpressionStatement	 
>3044	CallExpression	ntam . set ( g1 , g2 , val )
>3045	ArgumentList	g1
>3046	Argument	val
>3047	Identifier	val
>3048	Argument	g2
>3049	Identifier	g2
>3050	Argument	g1
>3051	Identifier	g1
>3052	Callee	ntam . set
>3053	MemberAccess	ntam . set
>3054	Identifier	set
>3055	Identifier	ntam
>3056	IfStatement	if ( val <= nta 
>3057	CompoundStatement	 
>3058	ExpressionStatement	 
>3059	AssignmentExpr	val *= scaleval
>3060	Identifier	scaleval
>3061	Identifier	val
>3062	ExpressionStatement	 
>3063	AssignmentExpr	scale *= scaleval
>3064	Identifier	scaleval
>3065	Identifier	scale
>3066	ExpressionStatement	 
>3067	CallExpression	ntam . multiply ( scaleval )
>3068	ArgumentList	scaleval
>3069	Argument	scaleval
>3070	Identifier	scaleval
>3071	Callee	ntam . multiply
>3072	MemberAccess	ntam . multiply
>3073	Identifier	multiply
>3074	Identifier	ntam
>3075	IdentifierDeclStatement	 
>3076	IdentifierDecl	scaleval = ceilf ( 1.0 / val )
>3077	AssignmentExpr	scaleval = ceilf ( 1.0 / val )
>3078	CallExpression	ceilf ( 1.0 / val )
>3079	ArgumentList	1.0 / val
>3080	Argument	1.0 / val
>3081	MultiplicativeExpression	1.0 / val
>3082	Identifier	val
>3083	PrimaryExpression	1.0
>3084	Callee	ceilf
>3085	Identifier	ceilf
>3086	Identifier	scaleval
>3087	Identifier	scaleval
>3088	IdentifierDeclType	value_type
>3089	Condition	 
>3090	RelationalExpression	val <= nta 
>3091	Identifier	nta 
>3092	Identifier	val
>3093	ExpressionStatement	 
>3094	AssignmentExpr	val *= scale
>3095	Identifier	scale
>3096	Identifier	val
>3097	ExpressionStatement	 
>3098	AssignmentExpr	val /= pow_f ( size_sum , ( value_type ) lgp_ )
>3099	CallExpression	pow_f ( size_sum , ( value_type ) lgp_ )
>3100	ArgumentList	size_sum
>3101	Argument	( value_type ) lgp_
>3102	CastExpression	( value_type ) lgp_
>3103	Identifier	lgp_
>3104	CastTarget	value_type
>3105	Argument	size_sum
>3106	Identifier	size_sum
>3107	Callee	pow_f
>3108	Identifier	pow_f
>3109	Identifier	val
>3110	IdentifierDeclStatement	 
>3111	IdentifierDecl	size_sum ( groups [ g1 ] . size ( ) + groups [ g2 ] . size ( ) )
>3112	AdditiveExpression	groups [ g1 ] . size ( ) + groups [ g2 ] . size ( )
>3113	CallExpression	groups [ g2 ] . size ( )
>3114	ArgumentList	 
>3115	Callee	groups [ g2 ] . size
>3116	MemberAccess	groups [ g2 ] . size
>3117	Identifier	size
>3118	ArrayIndexing	groups [ g2 ]
>3119	Identifier	g2
>3120	Identifier	groups
>3121	CallExpression	groups [ g1 ] . size ( )
>3122	ArgumentList	 
>3123	Callee	groups [ g1 ] . size
>3124	MemberAccess	groups [ g1 ] . size
>3125	Identifier	size
>3126	ArrayIndexing	groups [ g1 ]
>3127	Identifier	g1
>3128	Identifier	groups
>3129	Identifier	size_sum
>3130	IdentifierDeclType	value_type
>3131	IdentifierDeclStatement	 
>3132	IdentifierDecl	val = * nz / row_sum
>3133	AssignmentExpr	val = * nz / row_sum
>3134	MultiplicativeExpression	* nz / row_sum
>3135	Identifier	row_sum
>3136	UnaryOp	* nz
>3137	Identifier	nz
>3138	UnaryOperator	*
>3139	Identifier	val
>3140	Identifier	val
>3141	IdentifierDeclType	value_type
>3142	IdentifierDeclStatement	 
>3143	IdentifierDecl	row_sum = row_sums [ g1 ] + row_sums [ g2 ]
>3144	AssignmentExpr	row_sum = row_sums [ g1 ] + row_sums [ g2 ]
>3145	AdditiveExpression	row_sums [ g1 ] + row_sums [ g2 ]
>3146	ArrayIndexing	row_sums [ g2 ]
>3147	Identifier	g2
>3148	Identifier	row_sums
>3149	ArrayIndexing	row_sums [ g1 ]
>3150	Identifier	g1
>3151	Identifier	row_sums
>3152	Identifier	row_sum
>3153	Identifier	row_sum
>3154	IdentifierDeclType	value_type
>3155	Condition	 
>3156	AndExpression	g2 != g1 && row_sums [ g2 ] > 0
>3157	RelationalExpression	row_sums [ g2 ] > 0
>3158	PrimaryExpression	0
>3159	ArrayIndexing	row_sums [ g2 ]
>3160	Identifier	g2
>3161	Identifier	row_sums
>3162	EqualityExpression	g2 != g1
>3163	Identifier	g1
>3164	Identifier	g2
>3165	IdentifierDeclStatement	 
>3166	IdentifierDecl	g2 = * ind
>3167	AssignmentExpr	g2 = * ind
>3168	UnaryOp	* ind
>3169	Identifier	ind
>3170	UnaryOperator	*
>3171	Identifier	g2
>3172	Identifier	g2
>3173	IdentifierDeclType	size_type
>3174	Expression	 
>3175	UnaryExpression	++ nz
>3176	Identifier	nz
>3177	IncDec	++
>3178	UnaryExpression	++ ind
>3179	Identifier	ind
>3180	IncDec	++
>3181	Condition	 
>3182	EqualityExpression	ind != ind_end
>3183	Identifier	ind_end
>3184	Identifier	ind
>3185	ExpressionStatement	 
>3186	Identifier	TRACE_AHC_UPDATE
>3187	IdentifierDeclStatement	 
>3188	IdentifierDecl	pow_f
>3189	Identifier	pow_f
>3190	IdentifierDeclType	Pow < value_type >
>3191	IdentifierDeclStatement	 
>3192	IdentifierDecl	nz = utam . row_nz_value_begin ( g1 )
>3193	AssignmentExpr	nz = utam . row_nz_value_begin ( g1 )
>3194	CallExpression	utam . row_nz_value_begin ( g1 )
>3195	ArgumentList	g1
>3196	Argument	g1
>3197	Identifier	g1
>3198	Callee	utam . row_nz_value_begin
>3199	MemberAccess	utam . row_nz_value_begin
>3200	Identifier	row_nz_value_begin
>3201	Identifier	utam
>3202	Identifier	nz
>3203	Identifier	nz
>3204	IdentifierDeclType	FloatTAM 
>3205	IdentifierDeclStatement	 
>3206	IdentifierDecl	ind_end = utam . row_nz_index_end ( g1 )
>3207	AssignmentExpr	ind_end = utam . row_nz_index_end ( g1 )
>3208	CallExpression	utam . row_nz_index_end ( g1 )
>3209	ArgumentList	g1
>3210	Argument	g1
>3211	Identifier	g1
>3212	Callee	utam . row_nz_index_end
>3213	MemberAccess	utam . row_nz_index_end
>3214	Identifier	row_nz_index_end
>3215	Identifier	utam
>3216	Identifier	ind_end
>3217	Identifier	ind_end
>3218	IdentifierDeclType	FloatTAM 
>3219	IdentifierDeclStatement	 
>3220	IdentifierDecl	ind = utam . row_nz_index_begin ( g1 )
>3221	AssignmentExpr	ind = utam . row_nz_index_begin ( g1 )
>3222	CallExpression	utam . row_nz_index_begin ( g1 )
>3223	ArgumentList	g1
>3224	Argument	g1
>3225	Identifier	g1
>3226	Callee	utam . row_nz_index_begin
>3227	MemberAccess	utam . row_nz_index_begin
>3228	Identifier	row_nz_index_begin
>3229	Identifier	utam
>3230	Identifier	ind
>3231	Identifier	ind
>3232	IdentifierDeclType	FloatTAM 
>3233	IfStatement	if ( ! ( row_sums [ g1 ] > 0 ) )
>3234	CompoundStatement	 
>3235	ReturnStatement	 
>3236	IfStatement	if ( trace )
>3237	ExpressionStatement	 
>3238	ShiftExpression	cout << \"No update, row_sums[\" << g1 << \"]= 0\" << endl
>3239	ShiftExpression	\"No update, row_sums[\" << g1 << \"]= 0\" << endl
>3240	ShiftExpression	g1 << \"]= 0\" << endl
>3241	ShiftExpression	\"]= 0\" << endl
>3242	Identifier	endl
>3243	PrimaryExpression	\"]= 0\"
>3244	Identifier	g1
>3245	PrimaryExpression	\"No update, row_sums[\"
>3246	Identifier	cout
>3247	Condition	 
>3248	Identifier	trace
>3249	Condition	 
>3250	UnaryOp	! ( row_sums [ g1 ] > 0 )
>3251	RelationalExpression	row_sums [ g1 ] > 0
>3252	PrimaryExpression	0
>3253	ArrayIndexing	row_sums [ g1 ]
>3254	Identifier	g1
>3255	Identifier	row_sums
>3256	UnaryOperator	!
>3257	IdentifierDeclStatement	 
>3258	IdentifierDecl	trace = 0
>3259	AssignmentExpr	trace = 0
>3260	PrimaryExpression	0
>3261	Identifier	trace
>3262	Identifier	trace
>3263	IdentifierDeclType	size_type
>3301	FunctionDef	Grouper 
>3302	ParameterList	size_type nGroups
>3303	Parameter	 
>3304	Identifier	nGroups
>3305	ParameterType	size_type
>3306	ReturnType	void
>3307	CompoundStatement	 
>3308	ExpressionStatement	 
>3309	CallExpression	finish_grouping_ ( counts )
>3310	ArgumentList	counts
>3311	Argument	counts
>3312	Identifier	counts
>3313	Callee	finish_grouping_
>3314	Identifier	finish_grouping_
>3315	ExpressionStatement	 
>3316	CallExpression	tam_ . rowSums ( counts . begin ( ) )
>3317	ArgumentList	counts . begin ( )
>3318	Argument	counts . begin ( )
>3319	CallExpression	counts . begin ( )
>3320	ArgumentList	 
>3321	Callee	counts . begin
>3322	MemberAccess	counts . begin
>3323	Identifier	begin
>3324	Identifier	counts
>3325	Callee	tam_ . rowSums
>3326	MemberAccess	tam_ . rowSums
>3327	Identifier	rowSums
>3328	Identifier	tam_
>3329	IdentifierDeclStatement	 
>3330	IdentifierDecl	counts ( n_coincidences )
>3331	Identifier	n_coincidences
>3332	Identifier	counts
>3333	IdentifierDeclType	std 
>3334	ExpressionStatement	 
>3335	Identifier	TRACE_AHC_GROUPS_FROM_MERGES_3
>3336	WhileStatement	while ( it != groups_ . end ( ) )
>3337	IfStatement	if ( it -> empty ( ) )
>3338	ElseStatement	else
>3339	ExpressionStatement	 
>3340	UnaryExpression	++ it
>3341	Identifier	it
>3342	IncDec	++
>3343	ExpressionStatement	 
>3344	AssignmentExpr	it = groups_ . erase ( it )
>3345	CallExpression	groups_ . erase ( it )
>3346	ArgumentList	it
>3347	Argument	it
>3348	Identifier	it
>3349	Callee	groups_ . erase
>3350	MemberAccess	groups_ . erase
>3351	Identifier	erase
>3352	Identifier	groups_
>3353	Identifier	it
>3354	Condition	 
>3355	CallExpression	it -> empty ( )
>3356	ArgumentList	 
>3357	Callee	it -> empty
>3358	PtrMemberAccess	it -> empty
>3359	Identifier	empty
>3360	Identifier	it
>3361	Condition	 
>3362	EqualityExpression	it != groups_ . end ( )
>3363	CallExpression	groups_ . end ( )
>3364	ArgumentList	 
>3365	Callee	groups_ . end
>3366	MemberAccess	groups_ . end
>3367	Identifier	end
>3368	Identifier	groups_
>3369	Identifier	it
>3370	IdentifierDeclStatement	 
>3371	IdentifierDecl	it = groups_ . begin ( )
>3372	AssignmentExpr	it = groups_ . begin ( )
>3373	CallExpression	groups_ . begin ( )
>3374	ArgumentList	 
>3375	Callee	groups_ . begin
>3376	MemberAccess	groups_ . begin
>3377	Identifier	begin
>3378	Identifier	groups_
>3379	Identifier	it
>3380	Identifier	it
>3381	IdentifierDeclType	Groups 
>3382	ForStatement	for ( size_type i = 0 ; i != nIter ; ++ i )
>3383	CompoundStatement	 
>3384	ExpressionStatement	 
>3385	CallExpression	groups_ [ m . second ] . clear ( )
>3386	ArgumentList	 
>3387	Callee	groups_ [ m . second ] . clear
>3388	MemberAccess	groups_ [ m . second ] . clear
>3389	Identifier	clear
>3390	ArrayIndexing	groups_ [ m . second ]
>3391	MemberAccess	m . second
>3392	Identifier	second
>3393	Identifier	m
>3394	Identifier	groups_
>3395	ExpressionStatement	 
>3396	CallExpression	groups_ [ m . first ] . insert ( to_insert . begin ( ) , to_insert . end ( ) )
>3397	ArgumentList	to_insert . begin ( )
>3398	Argument	to_insert . end ( )
>3399	CallExpression	to_insert . end ( )
>3400	ArgumentList	 
>3401	Callee	to_insert . end
>3402	MemberAccess	to_insert . end
>3403	Identifier	end
>3404	Identifier	to_insert
>3405	Argument	to_insert . begin ( )
>3406	CallExpression	to_insert . begin ( )
>3407	ArgumentList	 
>3408	Callee	to_insert . begin
>3409	MemberAccess	to_insert . begin
>3410	Identifier	begin
>3411	Identifier	to_insert
>3412	Callee	groups_ [ m . first ] . insert
>3413	MemberAccess	groups_ [ m . first ] . insert
>3414	Identifier	insert
>3415	ArrayIndexing	groups_ [ m . first ]
>3416	MemberAccess	m . first
>3417	Identifier	first
>3418	Identifier	m
>3419	Identifier	groups_
>3420	IdentifierDeclStatement	 
>3421	IdentifierDecl	& to_insert = groups_ [ m . second ]
>3422	AssignmentExpr	& to_insert = groups_ [ m . second ]
>3423	ArrayIndexing	groups_ [ m . second ]
>3424	MemberAccess	m . second
>3425	Identifier	second
>3426	Identifier	m
>3427	Identifier	groups_
>3428	Identifier	to_insert
>3429	Identifier	to_insert
>3430	IdentifierDeclType	const set < size_type > &
>3431	ExpressionStatement	 
>3432	Identifier	TRACE_AHC_GROUPS_FROM_MERGES_2
>3433	IdentifierDeclStatement	 
>3434	IdentifierDecl	m = merges_ [ i ]
>3435	AssignmentExpr	m = merges_ [ i ]
>3436	ArrayIndexing	merges_ [ i ]
>3437	Identifier	i
>3438	Identifier	merges_
>3439	Identifier	m
>3440	Identifier	m
>3441	IdentifierDeclType	AMerge
>3442	UnaryExpression	 
>3443	Identifier	i
>3444	IncDec	++
>3445	Condition	 
>3446	EqualityExpression	i != nIter
>3447	Identifier	nIter
>3448	Identifier	i
>3449	ForInit	 
>3450	IdentifierDeclStatement	size_type i = 0 ;
>3451	IdentifierDecl	i = 0
>3452	AssignmentExpr	i = 0
>3453	PrimaryExpression	0
>3454	Identifier	i
>3455	Identifier	i
>3456	IdentifierDeclType	size_type
>3457	ForStatement	for ( size_type i = 0 ; i != n_coincidences ; ++ i )
>3458	CompoundStatement	 
>3459	IfStatement	if ( utam . isRowZero ( i ) )
>3460	ElseStatement	else
>3461	CompoundStatement	 
>3462	ExpressionStatement	 
>3463	CallExpression	groups_ . push_back ( a_group )
>3464	ArgumentList	a_group
>3465	Argument	a_group
>3466	Identifier	a_group
>3467	Callee	groups_ . push_back
>3468	MemberAccess	groups_ . push_back
>3469	Identifier	push_back
>3470	Identifier	groups_
>3471	ExpressionStatement	 
>3472	CallExpression	a_group . insert ( i )
>3473	ArgumentList	i
>3474	Argument	i
>3475	Identifier	i
>3476	Callee	a_group . insert
>3477	MemberAccess	a_group . insert
>3478	Identifier	insert
>3479	Identifier	a_group
>3480	IdentifierDeclStatement	 
>3481	IdentifierDecl	a_group
>3482	Identifier	a_group
>3483	IdentifierDeclType	set < size_type >
>3484	CompoundStatement	 
>3485	ExpressionStatement	 
>3486	CallExpression	groups_ . push_back ( empty_group )
>3487	ArgumentList	empty_group
>3488	Argument	empty_group
>3489	Identifier	empty_group
>3490	Callee	groups_ . push_back
>3491	MemberAccess	groups_ . push_back
>3492	Identifier	push_back
>3493	Identifier	groups_
>3494	Condition	 
>3495	CallExpression	utam . isRowZero ( i )
>3496	ArgumentList	i
>3497	Argument	i
>3498	Identifier	i
>3499	Callee	utam . isRowZero
>3500	MemberAccess	utam . isRowZero
>3501	Identifier	isRowZero
>3502	Identifier	utam
>3503	UnaryExpression	 
>3504	Identifier	i
>3505	IncDec	++
>3506	Condition	 
>3507	EqualityExpression	i != n_coincidences
>3508	Identifier	n_coincidences
>3509	Identifier	i
>3510	ForInit	 
>3511	IdentifierDeclStatement	size_type i = 0 ;
>3512	IdentifierDecl	i = 0
>3513	AssignmentExpr	i = 0
>3514	PrimaryExpression	0
>3515	Identifier	i
>3516	Identifier	i
>3517	IdentifierDeclType	size_type
>3518	ExpressionStatement	 
>3519	Identifier	TRACE_AHC_GROUPS_FROM_MERGES_1
>3520	IdentifierDeclStatement	 
>3521	IdentifierDecl	empty_group
>3522	Identifier	empty_group
>3523	IdentifierDeclType	set < size_type >
>3524	IdentifierDeclStatement	 
>3525	IdentifierDecl	nIter = merges_ . size ( ) - nGroups + 1
>3526	AssignmentExpr	nIter = merges_ . size ( ) - nGroups + 1
>3527	AdditiveExpression	merges_ . size ( ) - nGroups + 1
>3528	AdditiveExpression	nGroups + 1
>3529	PrimaryExpression	1
>3530	Identifier	nGroups
>3531	CallExpression	merges_ . size ( )
>3532	ArgumentList	 
>3533	Callee	merges_ . size
>3534	MemberAccess	merges_ . size
>3535	Identifier	size
>3536	Identifier	merges_
>3537	Identifier	nIter
>3538	Identifier	nIter
>3539	IdentifierDeclType	size_type
>3540	IdentifierDeclStatement	 
>3541	IdentifierDecl	n_coincidences = utam . nRows ( )
>3542	AssignmentExpr	n_coincidences = utam . nRows ( )
>3543	CallExpression	utam . nRows ( )
>3544	ArgumentList	 
>3545	Callee	utam . nRows
>3546	MemberAccess	utam . nRows
>3547	Identifier	nRows
>3548	Identifier	utam
>3549	Identifier	n_coincidences
>3550	Identifier	n_coincidences
>3551	IdentifierDeclType	size_type
>3552	ExpressionStatement	 
>3553	CallExpression	groups_ . clear ( )
>3554	ArgumentList	 
>3555	Callee	groups_ . clear
>3556	MemberAccess	groups_ . clear
>3557	Identifier	clear
>3558	Identifier	groups_
>3559	ExpressionStatement	 
>3560	CallExpression	utam . copy ( tam2 )
>3561	ArgumentList	tam2
>3562	Argument	tam2
>3563	Identifier	tam2
>3564	Callee	utam . copy
>3565	MemberAccess	utam . copy
>3566	Identifier	copy
>3567	Identifier	utam
>3568	IdentifierDeclStatement	 
>3569	IdentifierDecl	utam
>3570	Identifier	utam
>3571	IdentifierDeclType	FloatTAM
>3572	ExpressionStatement	 
>3573	CallExpression	tam_ . addToTranspose ( tam2 )
>3574	ArgumentList	tam2
>3575	Argument	tam2
>3576	Identifier	tam2
>3577	Callee	tam_ . addToTranspose
>3578	MemberAccess	tam_ . addToTranspose
>3579	Identifier	addToTranspose
>3580	Identifier	tam_
>3581	IdentifierDeclStatement	 
>3582	IdentifierDecl	tam2 ( tam_ )
>3583	Identifier	tam_
>3584	Identifier	tam2
>3585	IdentifierDeclType	IntegerTAM
>3586	IdentifierDeclStatement	 
>3587	IdentifierDecl	trace = 0
>3588	AssignmentExpr	trace = 0
>3589	PrimaryExpression	0
>3590	Identifier	trace
>3591	Identifier	trace
>3592	IdentifierDeclType	int
>3593	CompoundStatement	 
>3594	ExpressionStatement	 
>3595	ShiftExpression	NTA_CHECK ( nGroups <= merges_ . size ( ) + 1 ) << \"Grouper
>3596	ShiftExpression	\"Grouper
>3597	ShiftExpression	nGroups << \" - Should be less than number of coincidences learnt
>3598	ShiftExpression	\" - Should be less than number of coincidences learnt
>3599	CallExpression	tam_ . nNonZeroRows ( )
>3600	ArgumentList	 
>3601	Callee	tam_ . nNonZeroRows
>3602	MemberAccess	tam_ . nNonZeroRows
>3603	Identifier	nNonZeroRows
>3604	Identifier	tam_
>3605	PrimaryExpression	\" - Should be less than number of coincidences learnt
>3606	Identifier	nGroups
>3607	PrimaryExpression	\"Grouper
>3608	CallExpression	NTA_CHECK ( nGroups <= merges_ . size ( ) + 1 )
>3609	ArgumentList	nGroups <= merges_ . size ( ) + 1
>3610	Argument	nGroups <= merges_ . size ( ) + 1
>3611	RelationalExpression	nGroups <= merges_ . size ( ) + 1
>3612	AdditiveExpression	merges_ . size ( ) + 1
>3613	PrimaryExpression	1
>3614	CallExpression	merges_ . size ( )
>3615	ArgumentList	 
>3616	Callee	merges_ . size
>3617	MemberAccess	merges_ . size
>3618	Identifier	size
>3619	Identifier	merges_
>3620	Identifier	nGroups
>3621	Callee	NTA_CHECK
>3622	Identifier	NTA_CHECK
>3623	ExpressionStatement	 
>3624	ShiftExpression	NTA_CHECK ( nGroups >= 1 ) << \"Grouper
>3625	ShiftExpression	\"Grouper
>3626	ShiftExpression	nGroups << \" - Should be at least 1\"
>3627	PrimaryExpression	\" - Should be at least 1\"
>3628	Identifier	nGroups
>3629	PrimaryExpression	\"Grouper
>3630	CallExpression	NTA_CHECK ( nGroups >= 1 )
>3631	ArgumentList	nGroups >= 1
>3632	Argument	nGroups >= 1
>3633	RelationalExpression	nGroups >= 1
>3634	PrimaryExpression	1
>3635	Identifier	nGroups
>3636	Callee	NTA_CHECK
>3637	Identifier	NTA_CHECK
>3638	ExpressionStatement	 
>3639	ShiftExpression	NTA_CHECK ( tam_ . nNonZeroRows ( ) > 0 ) << \"Grouper
>3640	PrimaryExpression	\"Grouper
>3641	CallExpression	NTA_CHECK ( tam_ . nNonZeroRows ( ) > 0 )
>3642	ArgumentList	tam_ . nNonZeroRows ( ) > 0
>3643	Argument	tam_ . nNonZeroRows ( ) > 0
>3644	RelationalExpression	tam_ . nNonZeroRows ( ) > 0
>3645	PrimaryExpression	0
>3646	CallExpression	tam_ . nNonZeroRows ( )
>3647	ArgumentList	 
>3648	Callee	tam_ . nNonZeroRows
>3649	MemberAccess	tam_ . nNonZeroRows
>3650	Identifier	nNonZeroRows
>3651	Identifier	tam_
>3652	Callee	NTA_CHECK
>3653	Identifier	NTA_CHECK
>3693	FunctionDef	Grouper 
>3694	ParameterList	size_type grp_idx , SamplingMode mode , const std 
>3695	Parameter	 
>3696	Identifier	future
>3697	ParameterType	Sequences &
>3698	Parameter	 
>3699	Identifier	initial_dist
>3700	ParameterType	const std 
>3701	Parameter	 
>3702	Identifier	mode
>3703	ParameterType	SamplingMode
>3704	Parameter	 
>3705	Identifier	grp_idx
>3706	ParameterType	size_type
>3707	ReturnType	void
>3708	CompoundStatement	 
>3709	ForStatement	for ( size_type i = 0 ; i != n_steps ; ++ i )
>3710	CompoundStatement	 
>3711	ExpressionStatement	 
>3712	CallExpression	copy ( y , x )
>3713	ArgumentList	y
>3714	Argument	x
>3715	Identifier	x
>3716	Argument	y
>3717	Identifier	y
>3718	Callee	copy
>3719	Identifier	copy
>3720	IfStatement	if ( mode == distribution )
>3721	ElseStatement	else
>3722	CompoundStatement	 
>3723	ExpressionStatement	 
>3724	CallExpression	dirac ( s , y )
>3725	ArgumentList	s
>3726	Argument	y
>3727	Identifier	y
>3728	Argument	s
>3729	Identifier	s
>3730	Callee	dirac
>3731	Identifier	dirac
>3732	ExpressionStatement	 
>3733	AssignmentExpr	future [ i ] [ 0 ] = c
>3734	Identifier	c
>3735	ArrayIndexing	future [ i ] [ 0 ]
>3736	PrimaryExpression	0
>3737	ArrayIndexing	future [ i ]
>3738	Identifier	i
>3739	Identifier	future
>3740	ExpressionStatement	 
>3741	AssignmentExpr	c = tam_ . getHOTCoincidence ( s )
>3742	CallExpression	tam_ . getHOTCoincidence ( s )
>3743	ArgumentList	s
>3744	Argument	s
>3745	Identifier	s
>3746	Callee	tam_ . getHOTCoincidence
>3747	MemberAccess	tam_ . getHOTCoincidence
>3748	Identifier	getHOTCoincidence
>3749	Identifier	tam_
>3750	Identifier	c
>3751	ExpressionStatement	 
>3752	AssignmentExpr	s = mode == single_path_max ? max_element ( y ) 
>3753	ConditionalExpression	mode == single_path_max ? max_element ( y ) 
>3754	CallExpression	sample_one ( y )
>3755	ArgumentList	y
>3756	Argument	y
>3757	Identifier	y
>3758	Callee	sample_one
>3759	Identifier	sample_one
>3760	CallExpression	max_element ( y )
>3761	ArgumentList	y
>3762	Argument	y
>3763	Identifier	y
>3764	Callee	max_element
>3765	Identifier	max_element
>3766	Condition	mode == single_path_max
>3767	EqualityExpression	mode == single_path_max
>3768	Identifier	single_path_max
>3769	Identifier	mode
>3770	Identifier	s
>3771	CompoundStatement	 
>3772	ExpressionStatement	 
>3773	CallExpression	copy ( y , future [ i ] )
>3774	ArgumentList	y
>3775	Argument	future [ i ]
>3776	ArrayIndexing	future [ i ]
>3777	Identifier	i
>3778	Identifier	future
>3779	Argument	y
>3780	Identifier	y
>3781	Callee	copy
>3782	Identifier	copy
>3783	Condition	 
>3784	EqualityExpression	mode == distribution
>3785	Identifier	distribution
>3786	Identifier	mode
>3787	ExpressionStatement	 
>3788	CallExpression	m . rightVecProd ( x . begin ( ) , y . begin ( ) )
>3789	ArgumentList	x . begin ( )
>3790	Argument	y . begin ( )
>3791	CallExpression	y . begin ( )
>3792	ArgumentList	 
>3793	Callee	y . begin
>3794	MemberAccess	y . begin
>3795	Identifier	begin
>3796	Identifier	y
>3797	Argument	x . begin ( )
>3798	CallExpression	x . begin ( )
>3799	ArgumentList	 
>3800	Callee	x . begin
>3801	MemberAccess	x . begin
>3802	Identifier	begin
>3803	Identifier	x
>3804	Callee	m . rightVecProd
>3805	MemberAccess	m . rightVecProd
>3806	Identifier	rightVecProd
>3807	Identifier	m
>3808	UnaryExpression	 
>3809	Identifier	i
>3810	IncDec	++
>3811	Condition	 
>3812	EqualityExpression	i != n_steps
>3813	Identifier	n_steps
>3814	Identifier	i
>3815	ForInit	 
>3816	IdentifierDeclStatement	size_type i = 0 ;
>3817	IdentifierDecl	i = 0
>3818	AssignmentExpr	i = 0
>3819	PrimaryExpression	0
>3820	Identifier	i
>3821	Identifier	i
>3822	IdentifierDeclType	size_type
>3823	IfStatement	if ( initial_dist . empty ( ) )
>3824	ElseStatement	else
>3825	ExpressionStatement	 
>3826	CallExpression	copy ( initial_dist , x )
>3827	ArgumentList	initial_dist
>3828	Argument	x
>3829	Identifier	x
>3830	Argument	initial_dist
>3831	Identifier	initial_dist
>3832	Callee	copy
>3833	Identifier	copy
>3834	ExpressionStatement	 
>3835	CallExpression	uniform_range ( x )
>3836	ArgumentList	x
>3837	Argument	x
>3838	Identifier	x
>3839	Callee	uniform_range
>3840	Identifier	uniform_range
>3841	Condition	 
>3842	CallExpression	initial_dist . empty ( )
>3843	ArgumentList	 
>3844	Callee	initial_dist . empty
>3845	MemberAccess	initial_dist . empty
>3846	Identifier	empty
>3847	Identifier	initial_dist
>3848	IdentifierDeclStatement	 
>3849	IdentifierDecl	y ( size )
>3850	Identifier	size
>3851	Identifier	y
>3852	IdentifierDeclType	vector < value_type >
>3853	IdentifierDecl	x ( size )
>3854	Identifier	size
>3855	Identifier	x
>3856	IdentifierDeclType	vector < value_type >
>3857	IdentifierDeclStatement	 
>3858	IdentifierDecl	sequence
>3859	Identifier	sequence
>3860	IdentifierDeclType	vector < size_type >
>3861	IdentifierDeclStatement	 
>3862	IdentifierDecl	c = 0
>3863	AssignmentExpr	c = 0
>3864	PrimaryExpression	0
>3865	Identifier	c
>3866	Identifier	c
>3867	IdentifierDeclType	size_type
>3868	IdentifierDecl	s = 0
>3869	AssignmentExpr	s = 0
>3870	PrimaryExpression	0
>3871	Identifier	s
>3872	Identifier	s
>3873	IdentifierDeclType	size_type
>3874	ForStatement	for ( size_type i = 0 ; i != n_steps ; ++ i )
>3875	IfStatement	if ( mode == distribution )
>3876	ElseStatement	else
>3877	ExpressionStatement	 
>3878	CallExpression	future [ i ] . resize ( 1 )
>3879	ArgumentList	1
>3880	Argument	1
>3881	PrimaryExpression	1
>3882	Callee	future [ i ] . resize
>3883	MemberAccess	future [ i ] . resize
>3884	Identifier	resize
>3885	ArrayIndexing	future [ i ]
>3886	Identifier	i
>3887	Identifier	future
>3888	ExpressionStatement	 
>3889	CallExpression	future [ i ] . resize ( size )
>3890	ArgumentList	size
>3891	Argument	size
>3892	Identifier	size
>3893	Callee	future [ i ] . resize
>3894	MemberAccess	future [ i ] . resize
>3895	Identifier	resize
>3896	ArrayIndexing	future [ i ]
>3897	Identifier	i
>3898	Identifier	future
>3899	Condition	 
>3900	EqualityExpression	mode == distribution
>3901	Identifier	distribution
>3902	Identifier	mode
>3903	UnaryExpression	 
>3904	Identifier	i
>3905	IncDec	++
>3906	Condition	 
>3907	EqualityExpression	i != n_steps
>3908	Identifier	n_steps
>3909	Identifier	i
>3910	ForInit	 
>3911	IdentifierDeclStatement	size_type i = 0 ;
>3912	IdentifierDecl	i = 0
>3913	AssignmentExpr	i = 0
>3914	PrimaryExpression	0
>3915	Identifier	i
>3916	Identifier	i
>3917	IdentifierDeclType	size_type
>3918	IdentifierDeclStatement	 
>3919	IdentifierDecl	size = m . nCols ( )
>3920	AssignmentExpr	size = m . nCols ( )
>3921	CallExpression	m . nCols ( )
>3922	ArgumentList	 
>3923	Callee	m . nCols
>3924	MemberAccess	m . nCols
>3925	Identifier	nCols
>3926	Identifier	m
>3927	Identifier	size
>3928	Identifier	size
>3929	IdentifierDeclType	const size_type
>3930	IdentifierDeclStatement	 
>3931	IdentifierDecl	n_steps = future . size ( )
>3932	AssignmentExpr	n_steps = future . size ( )
>3933	CallExpression	future . size ( )
>3934	ArgumentList	 
>3935	Callee	future . size
>3936	MemberAccess	future . size
>3937	Identifier	size
>3938	Identifier	future
>3939	Identifier	n_steps
>3940	Identifier	n_steps
>3941	IdentifierDeclType	const size_type
>3942	ExpressionStatement	 
>3943	CallExpression	m . normalizeCols ( )
>3944	ArgumentList	 
>3945	Callee	m . normalizeCols
>3946	MemberAccess	m . normalizeCols
>3947	Identifier	normalizeCols
>3948	Identifier	m
>3949	ExpressionStatement	 
>3950	CallExpression	m . setDiagonalToZero ( )
>3951	ArgumentList	 
>3952	Callee	m . setDiagonalToZero
>3953	MemberAccess	m . setDiagonalToZero
>3954	Identifier	setDiagonalToZero
>3955	Identifier	m
>3956	IdentifierDeclStatement	 
>3957	IdentifierDecl	m ( tbiCellWeights_ [ grp_idx ] )
>3958	ArrayIndexing	tbiCellWeights_ [ grp_idx ]
>3959	Identifier	grp_idx
>3960	Identifier	tbiCellWeights_
>3961	Identifier	m
>3962	IdentifierDeclType	TBICellWeights
>3963	CompoundStatement	 
>3964	ExpressionStatement	 
>3965	ShiftExpression	NTA_ASSERT ( getMode ( ) == tbi ) << \"Grouper
>3966	PrimaryExpression	\"Grouper
>3967	CallExpression	NTA_ASSERT ( getMode ( ) == tbi )
>3968	ArgumentList	getMode ( ) == tbi
>3969	Argument	getMode ( ) == tbi
>3970	EqualityExpression	getMode ( ) == tbi
>3971	Identifier	tbi
>3972	CallExpression	getMode ( )
>3973	ArgumentList	 
>3974	Callee	getMode
>3975	Identifier	getMode
>3976	Callee	NTA_ASSERT
>3977	Identifier	NTA_ASSERT
>3978	ExpressionStatement	 
>3979	ShiftExpression	NTA_ASSERT ( initial_dist . empty ( ) || initial_dist . size ( ) == tbiCellWeights_ [ grp_idx ] . nCols ( ) ) << \"\
>3980	ShiftExpression	\"Grouper
>3981	ShiftExpression	initial_dist . size ( ) << \" - Should be empty (uniform) or of size
>3982	ShiftExpression	\" - Should be empty (uniform) or of size
>3983	ShiftExpression	tbiCellWeights_ [ grp_idx ] . nCols ( ) << \" for group
>3984	ShiftExpression	\" for group
>3985	Identifier	grp_idx
>3986	PrimaryExpression	\" for group
>3987	CallExpression	tbiCellWeights_ [ grp_idx ] . nCols ( )
>3988	ArgumentList	 
>3989	Callee	tbiCellWeights_ [ grp_idx ] . nCols
>3990	MemberAccess	tbiCellWeights_ [ grp_idx ] . nCols
>3991	Identifier	nCols
>3992	ArrayIndexing	tbiCellWeights_ [ grp_idx ]
>3993	Identifier	grp_idx
>3994	Identifier	tbiCellWeights_
>3995	PrimaryExpression	\" - Should be empty (uniform) or of size
>3996	CallExpression	initial_dist . size ( )
>3997	ArgumentList	 
>3998	Callee	initial_dist . size
>3999	MemberAccess	initial_dist . size
>4000	Identifier	size
>4001	Identifier	initial_dist
>4002	PrimaryExpression	\"Grouper
>4003	CallExpression	NTA_ASSERT ( initial_dist . empty ( ) || initial_dist . size ( ) == tbiCellWeights_ [ grp_idx ] . nCols ( ) )
>4004	ArgumentList	initial_dist . empty ( ) || initial_dist . size ( ) == tbiCellWeights_ [ grp_idx ] . nCols ( )
>4005	Argument	initial_dist . empty ( ) || initial_dist . size ( ) == tbiCellWeights_ [ grp_idx ] . nCols ( )
>4006	OrExpression	initial_dist . empty ( ) || initial_dist . size ( ) == tbiCellWeights_ [ grp_idx ] . nCols ( )
>4007	EqualityExpression	initial_dist . size ( ) == tbiCellWeights_ [ grp_idx ] . nCols ( )
>4008	CallExpression	tbiCellWeights_ [ grp_idx ] . nCols ( )
>4009	ArgumentList	 
>4010	Callee	tbiCellWeights_ [ grp_idx ] . nCols
>4011	MemberAccess	tbiCellWeights_ [ grp_idx ] . nCols
>4012	Identifier	nCols
>4013	ArrayIndexing	tbiCellWeights_ [ grp_idx ]
>4014	Identifier	grp_idx
>4015	Identifier	tbiCellWeights_
>4016	CallExpression	initial_dist . size ( )
>4017	ArgumentList	 
>4018	Callee	initial_dist . size
>4019	MemberAccess	initial_dist . size
>4020	Identifier	size
>4021	Identifier	initial_dist
>4022	CallExpression	initial_dist . empty ( )
>4023	ArgumentList	 
>4024	Callee	initial_dist . empty
>4025	MemberAccess	initial_dist . empty
>4026	Identifier	empty
>4027	Identifier	initial_dist
>4028	Callee	NTA_ASSERT
>4029	Identifier	NTA_ASSERT
>4030	ExpressionStatement	 
>4031	ShiftExpression	NTA_ASSERT ( grp_idx >= 0 && grp_idx < tbiCellWeights_ . size ( ) ) << \"Grouper
>4032	ShiftExpression	\"Grouper
>4033	ShiftExpression	grp_idx << \" - Should be between 0 and \" << tbiCellWeights_ . size ( )
>4034	ShiftExpression	\" - Should be between 0 and \" << tbiCellWeights_ . size ( )
>4035	CallExpression	tbiCellWeights_ . size ( )
>4036	ArgumentList	 
>4037	Callee	tbiCellWeights_ . size
>4038	MemberAccess	tbiCellWeights_ . size
>4039	Identifier	size
>4040	Identifier	tbiCellWeights_
>4041	PrimaryExpression	\" - Should be between 0 and \"
>4042	Identifier	grp_idx
>4043	PrimaryExpression	\"Grouper
>4044	CallExpression	NTA_ASSERT ( grp_idx >= 0 && grp_idx < tbiCellWeights_ . size ( ) )
>4045	ArgumentList	grp_idx >= 0 && grp_idx < tbiCellWeights_ . size ( )
>4046	Argument	grp_idx >= 0 && grp_idx < tbiCellWeights_ . size ( )
>4047	AndExpression	grp_idx >= 0 && grp_idx < tbiCellWeights_ . size ( )
>4048	RelationalExpression	grp_idx < tbiCellWeights_ . size ( )
>4049	CallExpression	tbiCellWeights_ . size ( )
>4050	ArgumentList	 
>4051	Callee	tbiCellWeights_ . size
>4052	MemberAccess	tbiCellWeights_ . size
>4053	Identifier	size
>4054	Identifier	tbiCellWeights_
>4055	Identifier	grp_idx
>4056	RelationalExpression	grp_idx >= 0
>4057	PrimaryExpression	0
>4058	Identifier	grp_idx
>4059	Callee	NTA_ASSERT
>4060	Identifier	NTA_ASSERT
>4061	ExpressionStatement	 
>4062	ShiftExpression	NTA_ASSERT ( getMode ( ) == tbi ) << \"Grouper
>4063	PrimaryExpression	\"Grouper
>4064	CallExpression	NTA_ASSERT ( getMode ( ) == tbi )
>4065	ArgumentList	getMode ( ) == tbi
>4066	Argument	getMode ( ) == tbi
>4067	EqualityExpression	getMode ( ) == tbi
>4068	Identifier	tbi
>4069	CallExpression	getMode ( )
>4070	ArgumentList	 
>4071	Callee	getMode
>4072	Identifier	getMode
>4073	Callee	NTA_ASSERT
>4074	Identifier	NTA_ASSERT
>4114	FunctionDef	Grouper 
>4115	ParameterList	size_type tbi_idx , PredictionMode mode , Sequences & future
>4116	Parameter	 
>4117	Identifier	future
>4118	ParameterType	Sequences &
>4119	Parameter	 
>4120	Identifier	mode
>4121	ParameterType	PredictionMode
>4122	Parameter	 
>4123	Identifier	tbi_idx
>4124	ParameterType	size_type
>4125	ReturnType	void
>4126	CompoundStatement	 
>4127	ForStatement	for ( size_type i = 0 ; i != n_steps ; ++ i )
>4128	CompoundStatement	 
>4129	IfStatement	if ( mode == groups )
>4130	ElseStatement	else
>4131	CompoundStatement	 
>4132	ForStatement	for ( size_type j = 0 ; j != tbiPredBuf_ . size ( ) ; ++ j )
>4133	CompoundStatement	 
>4134	ForStatement	for ( size_type k = 0 ; g != g_end ; ++ g , ++ k )
>4135	CompoundStatement	 
>4136	ExpressionStatement	 
>4137	AssignmentExpr	future [ i ] [ c ] = max ( future [ i ] [ c ] , tbiPredBuf_ [ j ] [ k ] )
>4138	CallExpression	max ( future [ i ] [ c ] , tbiPredBuf_ [ j ] [ k ] )
>4139	ArgumentList	future [ i ] [ c ]
>4140	Argument	tbiPredBuf_ [ j ] [ k ]
>4141	ArrayIndexing	tbiPredBuf_ [ j ] [ k ]
>4142	Identifier	k
>4143	ArrayIndexing	tbiPredBuf_ [ j ]
>4144	Identifier	j
>4145	Identifier	tbiPredBuf_
>4146	Argument	future [ i ] [ c ]
>4147	ArrayIndexing	future [ i ] [ c ]
>4148	Identifier	c
>4149	ArrayIndexing	future [ i ]
>4150	Identifier	i
>4151	Identifier	future
>4152	Callee	max
>4153	Identifier	max
>4154	ArrayIndexing	future [ i ] [ c ]
>4155	Identifier	c
>4156	ArrayIndexing	future [ i ]
>4157	Identifier	i
>4158	Identifier	future
>4159	IdentifierDeclStatement	 
>4160	IdentifierDecl	c = tam_ . getHOTCoincidence ( * g )
>4161	AssignmentExpr	c = tam_ . getHOTCoincidence ( * g )
>4162	CallExpression	tam_ . getHOTCoincidence ( * g )
>4163	ArgumentList	* g
>4164	Argument	* g
>4165	UnaryOp	* g
>4166	Identifier	g
>4167	UnaryOperator	*
>4168	Callee	tam_ . getHOTCoincidence
>4169	MemberAccess	tam_ . getHOTCoincidence
>4170	Identifier	getHOTCoincidence
>4171	Identifier	tam_
>4172	Identifier	c
>4173	Identifier	c
>4174	IdentifierDeclType	size_type
>4175	Expression	 
>4176	UnaryExpression	++ k
>4177	Identifier	k
>4178	IncDec	++
>4179	UnaryExpression	++ g
>4180	Identifier	g
>4181	IncDec	++
>4182	Condition	 
>4183	EqualityExpression	g != g_end
>4184	Identifier	g_end
>4185	Identifier	g
>4186	ForInit	 
>4187	IdentifierDeclStatement	size_type k = 0 ;
>4188	IdentifierDecl	k = 0
>4189	AssignmentExpr	k = 0
>4190	PrimaryExpression	0
>4191	Identifier	k
>4192	Identifier	k
>4193	IdentifierDeclType	size_type
>4194	IdentifierDeclStatement	 
>4195	IdentifierDecl	g_end = groups_ [ j ] . end ( )
>4196	AssignmentExpr	g_end = groups_ [ j ] . end ( )
>4197	CallExpression	groups_ [ j ] . end ( )
>4198	ArgumentList	 
>4199	Callee	groups_ [ j ] . end
>4200	MemberAccess	groups_ [ j ] . end
>4201	Identifier	end
>4202	ArrayIndexing	groups_ [ j ]
>4203	Identifier	j
>4204	Identifier	groups_
>4205	Identifier	g_end
>4206	Identifier	g_end
>4207	IdentifierDeclType	AGroup 
>4208	IdentifierDecl	g = groups_ [ j ] . begin ( )
>4209	AssignmentExpr	g = groups_ [ j ] . begin ( )
>4210	CallExpression	groups_ [ j ] . begin ( )
>4211	ArgumentList	 
>4212	Callee	groups_ [ j ] . begin
>4213	MemberAccess	groups_ [ j ] . begin
>4214	Identifier	begin
>4215	ArrayIndexing	groups_ [ j ]
>4216	Identifier	j
>4217	Identifier	groups_
>4218	Identifier	g
>4219	Identifier	g
>4220	IdentifierDeclType	AGroup 
>4221	UnaryExpression	 
>4222	Identifier	j
>4223	IncDec	++
>4224	Condition	 
>4225	EqualityExpression	j != tbiPredBuf_ . size ( )
>4226	CallExpression	tbiPredBuf_ . size ( )
>4227	ArgumentList	 
>4228	Callee	tbiPredBuf_ . size
>4229	MemberAccess	tbiPredBuf_ . size
>4230	Identifier	size
>4231	Identifier	tbiPredBuf_
>4232	Identifier	j
>4233	ForInit	 
>4234	IdentifierDeclStatement	size_type j = 0 ;
>4235	IdentifierDecl	j = 0
>4236	AssignmentExpr	j = 0
>4237	PrimaryExpression	0
>4238	Identifier	j
>4239	Identifier	j
>4240	IdentifierDeclType	size_type
>4241	ExpressionStatement	 
>4242	CallExpression	future [ i ] . resize ( tam_ . getNCoincidences ( ) , 0 )
>4243	ArgumentList	tam_ . getNCoincidences ( )
>4244	Argument	0
>4245	PrimaryExpression	0
>4246	Argument	tam_ . getNCoincidences ( )
>4247	CallExpression	tam_ . getNCoincidences ( )
>4248	ArgumentList	 
>4249	Callee	tam_ . getNCoincidences
>4250	MemberAccess	tam_ . getNCoincidences
>4251	Identifier	getNCoincidences
>4252	Identifier	tam_
>4253	Callee	future [ i ] . resize
>4254	MemberAccess	future [ i ] . resize
>4255	Identifier	resize
>4256	ArrayIndexing	future [ i ]
>4257	Identifier	i
>4258	Identifier	future
>4259	CompoundStatement	 
>4260	ForStatement	for ( size_type j = 0 ; j != tbiPredBuf_ . size ( ) ; ++ j )
>4261	ForStatement	for ( size_type k = 0 ; k != tbiPredBuf_ [ j ] . size ( ) ; ++ k )
>4262	ExpressionStatement	 
>4263	AssignmentExpr	future [ i ] [ j ] = max ( future [ i ] [ j ] , tbiPredBuf_ [ j ] [ k ] )
>4264	CallExpression	max ( future [ i ] [ j ] , tbiPredBuf_ [ j ] [ k ] )
>4265	ArgumentList	future [ i ] [ j ]
>4266	Argument	tbiPredBuf_ [ j ] [ k ]
>4267	ArrayIndexing	tbiPredBuf_ [ j ] [ k ]
>4268	Identifier	k
>4269	ArrayIndexing	tbiPredBuf_ [ j ]
>4270	Identifier	j
>4271	Identifier	tbiPredBuf_
>4272	Argument	future [ i ] [ j ]
>4273	ArrayIndexing	future [ i ] [ j ]
>4274	Identifier	j
>4275	ArrayIndexing	future [ i ]
>4276	Identifier	i
>4277	Identifier	future
>4278	Callee	max
>4279	Identifier	max
>4280	ArrayIndexing	future [ i ] [ j ]
>4281	Identifier	j
>4282	ArrayIndexing	future [ i ]
>4283	Identifier	i
>4284	Identifier	future
>4285	UnaryExpression	 
>4286	Identifier	k
>4287	IncDec	++
>4288	Condition	 
>4289	EqualityExpression	k != tbiPredBuf_ [ j ] . size ( )
>4290	CallExpression	tbiPredBuf_ [ j ] . size ( )
>4291	ArgumentList	 
>4292	Callee	tbiPredBuf_ [ j ] . size
>4293	MemberAccess	tbiPredBuf_ [ j ] . size
>4294	Identifier	size
>4295	ArrayIndexing	tbiPredBuf_ [ j ]
>4296	Identifier	j
>4297	Identifier	tbiPredBuf_
>4298	Identifier	k
>4299	ForInit	 
>4300	IdentifierDeclStatement	size_type k = 0 ;
>4301	IdentifierDecl	k = 0
>4302	AssignmentExpr	k = 0
>4303	PrimaryExpression	0
>4304	Identifier	k
>4305	Identifier	k
>4306	IdentifierDeclType	size_type
>4307	UnaryExpression	 
>4308	Identifier	j
>4309	IncDec	++
>4310	Condition	 
>4311	EqualityExpression	j != tbiPredBuf_ . size ( )
>4312	CallExpression	tbiPredBuf_ . size ( )
>4313	ArgumentList	 
>4314	Callee	tbiPredBuf_ . size
>4315	MemberAccess	tbiPredBuf_ . size
>4316	Identifier	size
>4317	Identifier	tbiPredBuf_
>4318	Identifier	j
>4319	ForInit	 
>4320	IdentifierDeclStatement	size_type j = 0 ;
>4321	IdentifierDecl	j = 0
>4322	AssignmentExpr	j = 0
>4323	PrimaryExpression	0
>4324	Identifier	j
>4325	Identifier	j
>4326	IdentifierDeclType	size_type
>4327	ExpressionStatement	 
>4328	CallExpression	future [ i ] . resize ( groups_ . size ( ) , 0 )
>4329	ArgumentList	groups_ . size ( )
>4330	Argument	0
>4331	PrimaryExpression	0
>4332	Argument	groups_ . size ( )
>4333	CallExpression	groups_ . size ( )
>4334	ArgumentList	 
>4335	Callee	groups_ . size
>4336	MemberAccess	groups_ . size
>4337	Identifier	size
>4338	Identifier	groups_
>4339	Callee	future [ i ] . resize
>4340	MemberAccess	future [ i ] . resize
>4341	Identifier	resize
>4342	ArrayIndexing	future [ i ]
>4343	Identifier	i
>4344	Identifier	future
>4345	Condition	 
>4346	EqualityExpression	mode == groups
>4347	Identifier	groups
>4348	Identifier	mode
>4349	ForStatement	for ( size_type j = 0 ; j != tbiPredBuf_ . size ( ) ; ++ j )
>4350	CompoundStatement	 
>4351	ExpressionStatement	 
>4352	CallExpression	add_val ( tbiPredBuf_ [ j ] , .1 )
>4353	ArgumentList	tbiPredBuf_ [ j ]
>4354	Argument	.1
>4355	PrimaryExpression	.1
>4356	Argument	tbiPredBuf_ [ j ]
>4357	ArrayIndexing	tbiPredBuf_ [ j ]
>4358	Identifier	j
>4359	Identifier	tbiPredBuf_
>4360	Callee	add_val
>4361	Identifier	add_val
>4362	ExpressionStatement	 
>4363	CallExpression	copy ( tbiBuffer_ . begin ( ) , tbiBuffer_ . begin ( ) + tbiPredBuf_ [ j ] . size ( ) , tbiPredBuf_ [ j ] . begin ( ) )
>4364	ArgumentList	tbiBuffer_ . begin ( )
>4365	Argument	tbiPredBuf_ [ j ] . begin ( )
>4366	CallExpression	tbiPredBuf_ [ j ] . begin ( )
>4367	ArgumentList	 
>4368	Callee	tbiPredBuf_ [ j ] . begin
>4369	MemberAccess	tbiPredBuf_ [ j ] . begin
>4370	Identifier	begin
>4371	ArrayIndexing	tbiPredBuf_ [ j ]
>4372	Identifier	j
>4373	Identifier	tbiPredBuf_
>4374	Argument	tbiBuffer_ . begin ( ) + tbiPredBuf_ [ j ] . size ( )
>4375	AdditiveExpression	tbiBuffer_ . begin ( ) + tbiPredBuf_ [ j ] . size ( )
>4376	CallExpression	tbiPredBuf_ [ j ] . size ( )
>4377	ArgumentList	 
>4378	Callee	tbiPredBuf_ [ j ] . size
>4379	MemberAccess	tbiPredBuf_ [ j ] . size
>4380	Identifier	size
>4381	ArrayIndexing	tbiPredBuf_ [ j ]
>4382	Identifier	j
>4383	Identifier	tbiPredBuf_
>4384	CallExpression	tbiBuffer_ . begin ( )
>4385	ArgumentList	 
>4386	Callee	tbiBuffer_ . begin
>4387	MemberAccess	tbiBuffer_ . begin
>4388	Identifier	begin
>4389	Identifier	tbiBuffer_
>4390	Argument	tbiBuffer_ . begin ( )
>4391	CallExpression	tbiBuffer_ . begin ( )
>4392	ArgumentList	 
>4393	Callee	tbiBuffer_ . begin
>4394	MemberAccess	tbiBuffer_ . begin
>4395	Identifier	begin
>4396	Identifier	tbiBuffer_
>4397	Callee	copy
>4398	Identifier	copy
>4399	ExpressionStatement	 
>4400	CallExpression	tbiCellWeights_ [ j ] . rightVecProd ( tbiPredBuf_ [ j ] , tbiBuffer_ )
>4401	ArgumentList	tbiPredBuf_ [ j ]
>4402	Argument	tbiBuffer_
>4403	Identifier	tbiBuffer_
>4404	Argument	tbiPredBuf_ [ j ]
>4405	ArrayIndexing	tbiPredBuf_ [ j ]
>4406	Identifier	j
>4407	Identifier	tbiPredBuf_
>4408	Callee	tbiCellWeights_ [ j ] . rightVecProd
>4409	MemberAccess	tbiCellWeights_ [ j ] . rightVecProd
>4410	Identifier	rightVecProd
>4411	ArrayIndexing	tbiCellWeights_ [ j ]
>4412	Identifier	j
>4413	Identifier	tbiCellWeights_
>4414	UnaryExpression	 
>4415	Identifier	j
>4416	IncDec	++
>4417	Condition	 
>4418	EqualityExpression	j != tbiPredBuf_ . size ( )
>4419	CallExpression	tbiPredBuf_ . size ( )
>4420	ArgumentList	 
>4421	Callee	tbiPredBuf_ . size
>4422	MemberAccess	tbiPredBuf_ . size
>4423	Identifier	size
>4424	Identifier	tbiPredBuf_
>4425	Identifier	j
>4426	ForInit	 
>4427	IdentifierDeclStatement	size_type j = 0 ;
>4428	IdentifierDecl	j = 0
>4429	AssignmentExpr	j = 0
>4430	PrimaryExpression	0
>4431	Identifier	j
>4432	Identifier	j
>4433	IdentifierDeclType	size_type
>4434	UnaryExpression	 
>4435	Identifier	i
>4436	IncDec	++
>4437	Condition	 
>4438	EqualityExpression	i != n_steps
>4439	Identifier	n_steps
>4440	Identifier	i
>4441	ForInit	 
>4442	IdentifierDeclStatement	size_type i = 0 ;
>4443	IdentifierDecl	i = 0
>4444	AssignmentExpr	i = 0
>4445	PrimaryExpression	0
>4446	Identifier	i
>4447	Identifier	i
>4448	IdentifierDeclType	size_type
>4449	IdentifierDeclStatement	 
>4450	IdentifierDecl	out ( groups_ . size ( ) )
>4451	CallExpression	groups_ . size ( )
>4452	ArgumentList	 
>4453	Callee	groups_ . size
>4454	MemberAccess	groups_ . size
>4455	Identifier	size
>4456	Identifier	groups_
>4457	Identifier	out
>4458	IdentifierDeclType	vector < value_type >
>4459	ForStatement	for ( size_type i = 0 ; i != cells . size ( ) ; ++ i )
>4460	ExpressionStatement	 
>4461	CallExpression	copy ( cells [ i ] , tbiPredBuf_ [ i ] )
>4462	ArgumentList	cells [ i ]
>4463	Argument	tbiPredBuf_ [ i ]
>4464	ArrayIndexing	tbiPredBuf_ [ i ]
>4465	Identifier	i
>4466	Identifier	tbiPredBuf_
>4467	Argument	cells [ i ]
>4468	ArrayIndexing	cells [ i ]
>4469	Identifier	i
>4470	Identifier	cells
>4471	Callee	copy
>4472	Identifier	copy
>4473	UnaryExpression	 
>4474	Identifier	i
>4475	IncDec	++
>4476	Condition	 
>4477	EqualityExpression	i != cells . size ( )
>4478	CallExpression	cells . size ( )
>4479	ArgumentList	 
>4480	Callee	cells . size
>4481	MemberAccess	cells . size
>4482	Identifier	size
>4483	Identifier	cells
>4484	Identifier	i
>4485	ForInit	 
>4486	IdentifierDeclStatement	size_type i = 0 ;
>4487	IdentifierDecl	i = 0
>4488	AssignmentExpr	i = 0
>4489	PrimaryExpression	0
>4490	Identifier	i
>4491	Identifier	i
>4492	IdentifierDeclType	size_type
>4493	IfStatement	if ( tbiPredBuf_ . empty ( ) )
>4494	CompoundStatement	 
>4495	ForStatement	for ( size_type i = 0 ; i != cells . size ( ) ; ++ i )
>4496	ExpressionStatement	 
>4497	CallExpression	tbiPredBuf_ [ i ] . resize ( cells [ i ] . size ( ) )
>4498	ArgumentList	cells [ i ] . size ( )
>4499	Argument	cells [ i ] . size ( )
>4500	CallExpression	cells [ i ] . size ( )
>4501	ArgumentList	 
>4502	Callee	cells [ i ] . size
>4503	MemberAccess	cells [ i ] . size
>4504	Identifier	size
>4505	ArrayIndexing	cells [ i ]
>4506	Identifier	i
>4507	Identifier	cells
>4508	Callee	tbiPredBuf_ [ i ] . resize
>4509	MemberAccess	tbiPredBuf_ [ i ] . resize
>4510	Identifier	resize
>4511	ArrayIndexing	tbiPredBuf_ [ i ]
>4512	Identifier	i
>4513	Identifier	tbiPredBuf_
>4514	UnaryExpression	 
>4515	Identifier	i
>4516	IncDec	++
>4517	Condition	 
>4518	EqualityExpression	i != cells . size ( )
>4519	CallExpression	cells . size ( )
>4520	ArgumentList	 
>4521	Callee	cells . size
>4522	MemberAccess	cells . size
>4523	Identifier	size
>4524	Identifier	cells
>4525	Identifier	i
>4526	ForInit	 
>4527	IdentifierDeclStatement	size_type i = 0 ;
>4528	IdentifierDecl	i = 0
>4529	AssignmentExpr	i = 0
>4530	PrimaryExpression	0
>4531	Identifier	i
>4532	Identifier	i
>4533	IdentifierDeclType	size_type
>4534	ExpressionStatement	 
>4535	CallExpression	tbiPredBuf_ . resize ( cells . size ( ) )
>4536	ArgumentList	cells . size ( )
>4537	Argument	cells . size ( )
>4538	CallExpression	cells . size ( )
>4539	ArgumentList	 
>4540	Callee	cells . size
>4541	MemberAccess	cells . size
>4542	Identifier	size
>4543	Identifier	cells
>4544	Callee	tbiPredBuf_ . resize
>4545	MemberAccess	tbiPredBuf_ . resize
>4546	Identifier	resize
>4547	Identifier	tbiPredBuf_
>4548	Condition	 
>4549	CallExpression	tbiPredBuf_ . empty ( )
>4550	ArgumentList	 
>4551	Callee	tbiPredBuf_ . empty
>4552	MemberAccess	tbiPredBuf_ . empty
>4553	Identifier	empty
>4554	Identifier	tbiPredBuf_
>4555	IdentifierDeclStatement	 
>4556	IdentifierDecl	& cells = tbiCellOutputs_ [ tbi_idx ]
>4557	AssignmentExpr	& cells = tbiCellOutputs_ [ tbi_idx ]
>4558	ArrayIndexing	tbiCellOutputs_ [ tbi_idx ]
>4559	Identifier	tbi_idx
>4560	Identifier	tbiCellOutputs_
>4561	Identifier	cells
>4562	Identifier	cells
>4563	IdentifierDeclType	const TBICellOutputsVec &
>4564	IdentifierDeclStatement	 
>4565	IdentifierDecl	n_steps = future . size ( )
>4566	AssignmentExpr	n_steps = future . size ( )
>4567	CallExpression	future . size ( )
>4568	ArgumentList	 
>4569	Callee	future . size
>4570	MemberAccess	future . size
>4571	Identifier	size
>4572	Identifier	future
>4573	Identifier	n_steps
>4574	Identifier	n_steps
>4575	IdentifierDeclType	const size_type
>4576	IfStatement	if ( tbiCellWeights_ . empty ( ) )
>4577	ExpressionStatement	 
>4578	CallExpression	tbi_create_ ( )
>4579	ArgumentList	 
>4580	Callee	tbi_create_
>4581	Identifier	tbi_create_
>4582	Condition	 
>4583	CallExpression	tbiCellWeights_ . empty ( )
>4584	ArgumentList	 
>4585	Callee	tbiCellWeights_ . empty
>4586	MemberAccess	tbiCellWeights_ . empty
>4587	Identifier	empty
>4588	Identifier	tbiCellWeights_
>4589	CompoundStatement	 
>4590	ExpressionStatement	 
>4591	ShiftExpression	NTA_ASSERT ( ! future . empty ( ) ) << \"Grouper
>4592	PrimaryExpression	\"Grouper
>4593	CallExpression	NTA_ASSERT ( ! future . empty ( ) )
>4594	ArgumentList	! future . empty ( )
>4595	Argument	! future . empty ( )
>4596	UnaryOp	! future . empty ( )
>4597	CallExpression	future . empty ( )
>4598	ArgumentList	 
>4599	Callee	future . empty
>4600	MemberAccess	future . empty
>4601	Identifier	empty
>4602	Identifier	future
>4603	UnaryOperator	!
>4604	Callee	NTA_ASSERT
>4605	Identifier	NTA_ASSERT
>4606	ExpressionStatement	 
>4607	ShiftExpression	NTA_ASSERT ( getMode ( ) == tbi ) << \"Grouper
>4608	PrimaryExpression	\"Grouper
>4609	CallExpression	NTA_ASSERT ( getMode ( ) == tbi )
>4610	ArgumentList	getMode ( ) == tbi
>4611	Argument	getMode ( ) == tbi
>4612	EqualityExpression	getMode ( ) == tbi
>4613	Identifier	tbi
>4614	CallExpression	getMode ( )
>4615	ArgumentList	 
>4616	Callee	getMode
>4617	Identifier	getMode
>4618	Callee	NTA_ASSERT
>4619	Identifier	NTA_ASSERT
>4620	ExpressionStatement	 
>4621	Identifier	std
>4622	Statement	 
>4623	Statement	 
>4680	FunctionDef	Grouper 
>4681	ParameterList	std 
>4682	Parameter	 
>4683	Identifier	outStream
>4684	ParameterType	std 
>4685	ReturnType	void
>4686	CompoundStatement	 
>4687	ExpressionStatement	 
>4688	ShiftExpression	outStream << ( size_type ) rescaleTBI_ << \" \"
>4689	ShiftExpression	( size_type ) rescaleTBI_ << \" \"
>4690	PrimaryExpression	\" \"
>4691	CastExpression	( size_type ) rescaleTBI_
>4692	Identifier	rescaleTBI_
>4693	CastTarget	size_type
>4694	Identifier	outStream
>4695	ExpressionStatement	 
>4696	ShiftExpression	outStream << segmentSize_ << \" \"
>4697	ShiftExpression	segmentSize_ << \" \"
>4698	PrimaryExpression	\" \"
>4699	Identifier	segmentSize_
>4700	Identifier	outStream
>4701	ForStatement	for ( size_type i = 0 ; i != merges_ . size ( ) ; ++ i )
>4702	CompoundStatement	 
>4703	ExpressionStatement	 
>4704	ShiftExpression	outStream << merges_ [ i ] . first << \" \" << merges_ [ i ] . second << \" \"
>4705	ShiftExpression	merges_ [ i ] . first << \" \" << merges_ [ i ] . second << \" \"
>4706	ShiftExpression	\" \" << merges_ [ i ] . second << \" \"
>4707	ShiftExpression	merges_ [ i ] . second << \" \"
>4708	PrimaryExpression	\" \"
>4709	MemberAccess	merges_ [ i ] . second
>4710	Identifier	second
>4711	ArrayIndexing	merges_ [ i ]
>4712	Identifier	i
>4713	Identifier	merges_
>4714	PrimaryExpression	\" \"
>4715	MemberAccess	merges_ [ i ] . first
>4716	Identifier	first
>4717	ArrayIndexing	merges_ [ i ]
>4718	Identifier	i
>4719	Identifier	merges_
>4720	Identifier	outStream
>4721	UnaryExpression	 
>4722	Identifier	i
>4723	IncDec	++
>4724	Condition	 
>4725	EqualityExpression	i != merges_ . size ( )
>4726	CallExpression	merges_ . size ( )
>4727	ArgumentList	 
>4728	Callee	merges_ . size
>4729	MemberAccess	merges_ . size
>4730	Identifier	size
>4731	Identifier	merges_
>4732	Identifier	i
>4733	ForInit	 
>4734	IdentifierDeclStatement	size_type i = 0 ;
>4735	IdentifierDecl	i = 0
>4736	AssignmentExpr	i = 0
>4737	PrimaryExpression	0
>4738	Identifier	i
>4739	Identifier	i
>4740	IdentifierDeclType	size_type
>4741	ExpressionStatement	 
>4742	ShiftExpression	outStream << merges_ . size ( ) << \" \"
>4743	ShiftExpression	merges_ . size ( ) << \" \"
>4744	PrimaryExpression	\" \"
>4745	CallExpression	merges_ . size ( )
>4746	ArgumentList	 
>4747	Callee	merges_ . size
>4748	MemberAccess	merges_ . size
>4749	Identifier	size
>4750	Identifier	merges_
>4751	Identifier	outStream
>4752	ExpressionStatement	 
>4753	ShiftExpression	outStream << \" \" << lgp_ << \" \"
>4754	ShiftExpression	\" \" << lgp_ << \" \"
>4755	ShiftExpression	lgp_ << \" \"
>4756	PrimaryExpression	\" \"
>4757	Identifier	lgp_
>4758	PrimaryExpression	\" \"
>4759	Identifier	outStream
>4760	ExpressionStatement	 
>4761	ShiftExpression	outStream << n_tbis_ << \" \"
>4762	ShiftExpression	n_tbis_ << \" \"
>4763	PrimaryExpression	\" \"
>4764	Identifier	n_tbis_
>4765	Identifier	outStream
>4766	IfStatement	if ( weights_ . nRows ( ) > 0 )
>4767	ElseStatement	else
>4768	CompoundStatement	 
>4769	ExpressionStatement	 
>4770	ShiftExpression	outStream << \"0 \"
>4771	PrimaryExpression	\"0 \"
>4772	Identifier	outStream
>4773	CompoundStatement	 
>4774	ExpressionStatement	 
>4775	CallExpression	weights_ . toCSR ( outStream )
>4776	ArgumentList	outStream
>4777	Argument	outStream
>4778	Identifier	outStream
>4779	Callee	weights_ . toCSR
>4780	MemberAccess	weights_ . toCSR
>4781	Identifier	toCSR
>4782	Identifier	weights_
>4783	ExpressionStatement	 
>4784	ShiftExpression	outStream << weights_ . nCols ( ) << \" \"
>4785	ShiftExpression	weights_ . nCols ( ) << \" \"
>4786	PrimaryExpression	\" \"
>4787	CallExpression	weights_ . nCols ( )
>4788	ArgumentList	 
>4789	Callee	weights_ . nCols
>4790	MemberAccess	weights_ . nCols
>4791	Identifier	nCols
>4792	Identifier	weights_
>4793	Identifier	outStream
>4794	Condition	 
>4795	RelationalExpression	weights_ . nRows ( ) > 0
>4796	PrimaryExpression	0
>4797	CallExpression	weights_ . nRows ( )
>4798	ArgumentList	 
>4799	Callee	weights_ . nRows
>4800	MemberAccess	weights_ . nRows
>4801	Identifier	nRows
>4802	Identifier	weights_
>4803	ForStatement	for ( ; it != groups_ . end ( ) ; ++ it )
>4804	CompoundStatement	 
>4805	ForStatement	for ( ; it2 != it -> end ( ) ; ++ it2 )
>4806	ExpressionStatement	 
>4807	ShiftExpression	outStream << * it2 << \" \"
>4808	ShiftExpression	* it2 << \" \"
>4809	PrimaryExpression	\" \"
>4810	UnaryOp	* it2
>4811	Identifier	it2
>4812	UnaryOperator	*
>4813	Identifier	outStream
>4814	UnaryExpression	 
>4815	Identifier	it2
>4816	IncDec	++
>4817	Condition	 
>4818	EqualityExpression	it2 != it -> end ( )
>4819	CallExpression	it -> end ( )
>4820	ArgumentList	 
>4821	Callee	it -> end
>4822	PtrMemberAccess	it -> end
>4823	Identifier	end
>4824	Identifier	it
>4825	Identifier	it2
>4826	IdentifierDeclStatement	 
>4827	IdentifierDecl	it2 = it -> begin ( )
>4828	AssignmentExpr	it2 = it -> begin ( )
>4829	CallExpression	it -> begin ( )
>4830	ArgumentList	 
>4831	Callee	it -> begin
>4832	PtrMemberAccess	it -> begin
>4833	Identifier	begin
>4834	Identifier	it
>4835	Identifier	it2
>4836	Identifier	it2
>4837	IdentifierDeclType	AGroup 
>4838	ExpressionStatement	 
>4839	ShiftExpression	outStream << it -> size ( ) << \" \"
>4840	ShiftExpression	it -> size ( ) << \" \"
>4841	PrimaryExpression	\" \"
>4842	CallExpression	it -> size ( )
>4843	ArgumentList	 
>4844	Callee	it -> size
>4845	PtrMemberAccess	it -> size
>4846	Identifier	size
>4847	Identifier	it
>4848	Identifier	outStream
>4849	UnaryExpression	 
>4850	Identifier	it
>4851	IncDec	++
>4852	Condition	 
>4853	EqualityExpression	it != groups_ . end ( )
>4854	CallExpression	groups_ . end ( )
>4855	ArgumentList	 
>4856	Callee	groups_ . end
>4857	MemberAccess	groups_ . end
>4858	Identifier	end
>4859	Identifier	groups_
>4860	Identifier	it
>4861	IdentifierDeclStatement	 
>4862	IdentifierDecl	it = groups_ . begin ( )
>4863	AssignmentExpr	it = groups_ . begin ( )
>4864	CallExpression	groups_ . begin ( )
>4865	ArgumentList	 
>4866	Callee	groups_ . begin
>4867	MemberAccess	groups_ . begin
>4868	Identifier	begin
>4869	Identifier	groups_
>4870	Identifier	it
>4871	Identifier	it
>4872	IdentifierDeclType	Groups 
>4873	ExpressionStatement	 
>4874	ShiftExpression	outStream << groups_ . size ( ) << \" \"
>4875	ShiftExpression	groups_ . size ( ) << \" \"
>4876	PrimaryExpression	\" \"
>4877	CallExpression	groups_ . size ( )
>4878	ArgumentList	 
>4879	Callee	groups_ . size
>4880	MemberAccess	groups_ . size
>4881	Identifier	size
>4882	Identifier	groups_
>4883	Identifier	outStream
>4884	ExpressionStatement	 
>4885	CallExpression	tam_ . saveState ( outStream )
>4886	ArgumentList	outStream
>4887	Argument	outStream
>4888	Identifier	outStream
>4889	Callee	tam_ . saveState
>4890	MemberAccess	tam_ . saveState
>4891	Identifier	saveState
>4892	Identifier	tam_
>4893	ExpressionStatement	 
>4894	ShiftExpression	outStream << mode_ << \" \" << ( symmetricTam_ ? \"1 \" 
>4895	ShiftExpression	mode_ << \" \" << ( symmetricTam_ ? \"1 \" 
>4896	ShiftExpression	\" \" << ( symmetricTam_ ? \"1 \" 
>4897	ShiftExpression	( symmetricTam_ ? \"1 \" 
>4898	ShiftExpression	topNeighbors_ << \" \" << maxNGroups_ << \" \" << maxGroupSize_ << \" \" << overlappingGroups_ << \" \"
>4899	ShiftExpression	\" \" << maxNGroups_ << \" \" << maxGroupSize_ << \" \" << overlappingGroups_ << \" \"
>4900	ShiftExpression	maxNGroups_ << \" \" << maxGroupSize_ << \" \" << overlappingGroups_ << \" \"
>4901	ShiftExpression	\" \" << maxGroupSize_ << \" \" << overlappingGroups_ << \" \"
>4902	ShiftExpression	maxGroupSize_ << \" \" << overlappingGroups_ << \" \"
>4903	ShiftExpression	\" \" << overlappingGroups_ << \" \"
>4904	ShiftExpression	overlappingGroups_ << \" \"
>4905	PrimaryExpression	\" \"
>4906	Identifier	overlappingGroups_
>4907	PrimaryExpression	\" \"
>4908	Identifier	maxGroupSize_
>4909	PrimaryExpression	\" \"
>4910	Identifier	maxNGroups_
>4911	PrimaryExpression	\" \"
>4912	Identifier	topNeighbors_
>4913	ConditionalExpression	symmetricTam_ ? \"1 \" 
>4914	PrimaryExpression	\"0 \"
>4915	PrimaryExpression	\"1 \"
>4916	Condition	symmetricTam_
>4917	Identifier	symmetricTam_
>4918	PrimaryExpression	\" \"
>4919	Identifier	mode_
>4920	Identifier	outStream
>4921	ExpressionStatement	 
>4922	ShiftExpression	outStream << \"Grouper19 \"
>4923	PrimaryExpression	\"Grouper19 \"
>4924	Identifier	outStream
>4925	CompoundStatement	 
>4926	ExpressionStatement	 
>4927	ShiftExpression	NTA_CHECK ( outStream . good ( ) ) << \"Grouper
>4928	ShiftExpression	\"Grouper
>4929	PrimaryExpression	\"- Bad stream\"
>4930	PrimaryExpression	\"Grouper
>4931	CallExpression	NTA_CHECK ( outStream . good ( ) )
>4932	ArgumentList	outStream . good ( )
>4933	Argument	outStream . good ( )
>4934	CallExpression	outStream . good ( )
>4935	ArgumentList	 
>4936	Callee	outStream . good
>4937	MemberAccess	outStream . good
>4938	Identifier	good
>4939	Identifier	outStream
>4940	Callee	NTA_CHECK
>4941	Identifier	NTA_CHECK
>4964	FunctionDef	Grouper 
>4965	ParameterList	std 
>4966	Parameter	 
>4967	Identifier	inStream
>4968	ParameterType	std 
>4969	ReturnType	void
>4970	CompoundStatement	 
>4971	IfStatement	if ( version >= 19 )
>4972	ExpressionStatement	 
>4973	ShiftExpression	inStream >> rescaleTBI_
>4974	Identifier	rescaleTBI_
>4975	Identifier	inStream
>4976	Condition	 
>4977	RelationalExpression	version >= 19
>4978	PrimaryExpression	19
>4979	Identifier	version
>4980	IfStatement	if ( version >= 18 )
>4981	ExpressionStatement	 
>4982	ShiftExpression	inStream >> segmentSize_
>4983	Identifier	segmentSize_
>4984	Identifier	inStream
>4985	Condition	 
>4986	RelationalExpression	version >= 18
>4987	PrimaryExpression	18
>4988	Identifier	version
>4989	IfStatement	if ( version >= 16 )
>4990	CompoundStatement	 
>4991	ForStatement	for ( size_type i = 0 ; i != n ; ++ i )
>4992	CompoundStatement	 
>4993	ExpressionStatement	 
>4994	CallExpression	merges_ . push_back ( amerge )
>4995	ArgumentList	amerge
>4996	Argument	amerge
>4997	Identifier	amerge
>4998	Callee	merges_ . push_back
>4999	MemberAccess	merges_ . push_back
>5000	Identifier	push_back
>5001	Identifier	merges_
>5002	ExpressionStatement	 
>5003	ShiftExpression	NTA_CHECK ( 0 <= amerge . second && amerge . second <= tam_ . nRows ( ) ) << where << \"Invalid merge \
>5004	ShiftExpression	where << \"Invalid merge index
>5005	ShiftExpression	\"Invalid merge index
>5006	ShiftExpression	amerge . second << \" - Should be >= 0 and < n coincidences
>5007	ShiftExpression	\" - Should be >= 0 and < n coincidences
>5008	CallExpression	tam_ . nRows ( )
>5009	ArgumentList	 
>5010	Callee	tam_ . nRows
>5011	MemberAccess	tam_ . nRows
>5012	Identifier	nRows
>5013	Identifier	tam_
>5014	PrimaryExpression	\" - Should be >= 0 and < n coincidences
>5015	MemberAccess	amerge . second
>5016	Identifier	second
>5017	Identifier	amerge
>5018	PrimaryExpression	\"Invalid merge index
>5019	Identifier	where
>5020	CallExpression	NTA_CHECK ( 0 <= amerge . second && amerge . second <= tam_ . nRows ( ) )
>5021	ArgumentList	0 <= amerge . second && amerge . second <= tam_ . nRows ( )
>5022	Argument	0 <= amerge . second && amerge . second <= tam_ . nRows ( )
>5023	AndExpression	0 <= amerge . second && amerge . second <= tam_ . nRows ( )
>5024	RelationalExpression	amerge . second <= tam_ . nRows ( )
>5025	CallExpression	tam_ . nRows ( )
>5026	ArgumentList	 
>5027	Callee	tam_ . nRows
>5028	MemberAccess	tam_ . nRows
>5029	Identifier	nRows
>5030	Identifier	tam_
>5031	MemberAccess	amerge . second
>5032	Identifier	second
>5033	Identifier	amerge
>5034	RelationalExpression	0 <= amerge . second
>5035	MemberAccess	amerge . second
>5036	Identifier	second
>5037	Identifier	amerge
>5038	PrimaryExpression	0
>5039	Callee	NTA_CHECK
>5040	Identifier	NTA_CHECK
>5041	ExpressionStatement	 
>5042	ShiftExpression	NTA_CHECK ( 0 <= amerge . first && amerge . first <= tam_ . nRows ( ) ) << where << \"Invalid merge index
>5043	ShiftExpression	where << \"Invalid merge index
>5044	ShiftExpression	\"Invalid merge index
>5045	ShiftExpression	amerge . first << \" - Should be >= 0 and < n coincidences
>5046	ShiftExpression	\" - Should be >= 0 and < n coincidences
>5047	CallExpression	tam_ . nRows ( )
>5048	ArgumentList	 
>5049	Callee	tam_ . nRows
>5050	MemberAccess	tam_ . nRows
>5051	Identifier	nRows
>5052	Identifier	tam_
>5053	PrimaryExpression	\" - Should be >= 0 and < n coincidences
>5054	MemberAccess	amerge . first
>5055	Identifier	first
>5056	Identifier	amerge
>5057	PrimaryExpression	\"Invalid merge index
>5058	Identifier	where
>5059	CallExpression	NTA_CHECK ( 0 <= amerge . first && amerge . first <= tam_ . nRows ( ) )
>5060	ArgumentList	0 <= amerge . first && amerge . first <= tam_ . nRows ( )
>5061	Argument	0 <= amerge . first && amerge . first <= tam_ . nRows ( )
>5062	AndExpression	0 <= amerge . first && amerge . first <= tam_ . nRows ( )
>5063	RelationalExpression	amerge . first <= tam_ . nRows ( )
>5064	CallExpression	tam_ . nRows ( )
>5065	ArgumentList	 
>5066	Callee	tam_ . nRows
>5067	MemberAccess	tam_ . nRows
>5068	Identifier	nRows
>5069	Identifier	tam_
>5070	MemberAccess	amerge . first
>5071	Identifier	first
>5072	Identifier	amerge
>5073	RelationalExpression	0 <= amerge . first
>5074	MemberAccess	amerge . first
>5075	Identifier	first
>5076	Identifier	amerge
>5077	PrimaryExpression	0
>5078	Callee	NTA_CHECK
>5079	Identifier	NTA_CHECK
>5080	ExpressionStatement	 
>5081	ShiftExpression	inStream >> amerge . first >> amerge . second
>5082	ShiftExpression	amerge . first >> amerge . second
>5083	MemberAccess	amerge . second
>5084	Identifier	second
>5085	Identifier	amerge
>5086	MemberAccess	amerge . first
>5087	Identifier	first
>5088	Identifier	amerge
>5089	Identifier	inStream
>5090	IdentifierDeclStatement	 
>5091	IdentifierDecl	amerge
>5092	Identifier	amerge
>5093	IdentifierDeclType	AMerge
>5094	UnaryExpression	 
>5095	Identifier	i
>5096	IncDec	++
>5097	Condition	 
>5098	EqualityExpression	i != n
>5099	Identifier	n
>5100	Identifier	i
>5101	ForInit	 
>5102	IdentifierDeclStatement	size_type i = 0 ;
>5103	IdentifierDecl	i = 0
>5104	AssignmentExpr	i = 0
>5105	PrimaryExpression	0
>5106	Identifier	i
>5107	Identifier	i
>5108	IdentifierDeclType	size_type
>5109	ExpressionStatement	 
>5110	ShiftExpression	NTA_CHECK ( n >= 0 ) << where << \"Invalid number of merges
>5111	ShiftExpression	where << \"Invalid number of merges
>5112	ShiftExpression	\"Invalid number of merges
>5113	ShiftExpression	n << \" - Should be >= 0\"
>5114	PrimaryExpression	\" - Should be >= 0\"
>5115	Identifier	n
>5116	PrimaryExpression	\"Invalid number of merges
>5117	Identifier	where
>5118	CallExpression	NTA_CHECK ( n >= 0 )
>5119	ArgumentList	n >= 0
>5120	Argument	n >= 0
>5121	RelationalExpression	n >= 0
>5122	PrimaryExpression	0
>5123	Identifier	n
>5124	Callee	NTA_CHECK
>5125	Identifier	NTA_CHECK
>5126	ExpressionStatement	 
>5127	ShiftExpression	inStream >> n
>5128	Identifier	n
>5129	Identifier	inStream
>5130	IdentifierDeclStatement	 
>5131	IdentifierDecl	n = 0
>5132	AssignmentExpr	n = 0
>5133	PrimaryExpression	0
>5134	Identifier	n
>5135	Identifier	n
>5136	IdentifierDeclType	size_type
>5137	ExpressionStatement	 
>5138	ShiftExpression	inStream >> lgp_
>5139	Identifier	lgp_
>5140	Identifier	inStream
>5141	Condition	 
>5142	RelationalExpression	version >= 16
>5143	PrimaryExpression	16
>5144	Identifier	version
>5145	IfStatement	if ( version >= 14 )
>5146	CompoundStatement	 
>5147	ExpressionStatement	 
>5148	AssignmentExpr	n_tbis_ = n_tbis
>5149	Identifier	n_tbis
>5150	Identifier	n_tbis_
>5151	IfStatement	if ( version >= 17 )
>5152	CompoundStatement	 
>5153	ExpressionStatement	 
>5154	ShiftExpression	NTA_CHECK ( n_tbis >= 0 ) << where << \"Invalid number of tbis
>5155	ShiftExpression	where << \"Invalid number of tbis
>5156	ShiftExpression	\"Invalid number of tbis
>5157	ShiftExpression	n_tbis << \" - should be >= 0\"
>5158	PrimaryExpression	\" - should be >= 0\"
>5159	Identifier	n_tbis
>5160	PrimaryExpression	\"Invalid number of tbis
>5161	Identifier	where
>5162	CallExpression	NTA_CHECK ( n_tbis >= 0 )
>5163	ArgumentList	n_tbis >= 0
>5164	Argument	n_tbis >= 0
>5165	RelationalExpression	n_tbis >= 0
>5166	PrimaryExpression	0
>5167	Identifier	n_tbis
>5168	Callee	NTA_CHECK
>5169	Identifier	NTA_CHECK
>5170	ExpressionStatement	 
>5171	ShiftExpression	inStream >> n_tbis
>5172	Identifier	n_tbis
>5173	Identifier	inStream
>5174	Condition	 
>5175	RelationalExpression	version >= 17
>5176	PrimaryExpression	17
>5177	Identifier	version
>5178	IdentifierDeclStatement	 
>5179	IdentifierDecl	n_tbis = 1
>5180	AssignmentExpr	n_tbis = 1
>5181	PrimaryExpression	1
>5182	Identifier	n_tbis
>5183	Identifier	n_tbis
>5184	IdentifierDeclType	size_type
>5185	ExpressionStatement	 
>5186	CallExpression	tbi_delete_ ( )
>5187	ArgumentList	 
>5188	Callee	tbi_delete_
>5189	Identifier	tbi_delete_
>5190	Condition	 
>5191	RelationalExpression	version >= 14
>5192	PrimaryExpression	14
>5193	Identifier	version
>5194	IfStatement	if ( nCols > 0 )
>5195	ExpressionStatement	 
>5196	CallExpression	weights_ . fromCSR ( inStream )
>5197	ArgumentList	inStream
>5198	Argument	inStream
>5199	Identifier	inStream
>5200	Callee	weights_ . fromCSR
>5201	MemberAccess	weights_ . fromCSR
>5202	Identifier	fromCSR
>5203	Identifier	weights_
>5204	Condition	 
>5205	RelationalExpression	nCols > 0
>5206	PrimaryExpression	0
>5207	Identifier	nCols
>5208	ExpressionStatement	 
>5209	ShiftExpression	inStream >> nCols
>5210	Identifier	nCols
>5211	Identifier	inStream
>5212	IdentifierDeclStatement	 
>5213	IdentifierDecl	nCols = 0
>5214	AssignmentExpr	nCols = 0
>5215	PrimaryExpression	0
>5216	Identifier	nCols
>5217	Identifier	nCols
>5218	IdentifierDeclType	size_type
>5219	ForStatement	for ( size_type i = 0 ; i < nGroups ; ++ i )
>5220	CompoundStatement	 
>5221	ExpressionStatement	 
>5222	CallExpression	groups_ . push_back ( agroup )
>5223	ArgumentList	agroup
>5224	Argument	agroup
>5225	Identifier	agroup
>5226	Callee	groups_ . push_back
>5227	MemberAccess	groups_ . push_back
>5228	Identifier	push_back
>5229	Identifier	groups_
>5230	ForStatement	for ( size_type j = 0 ; j < groupSize ; ++ j )
>5231	CompoundStatement	 
>5232	ExpressionStatement	 
>5233	CallExpression	agroup . insert ( e )
>5234	ArgumentList	e
>5235	Argument	e
>5236	Identifier	e
>5237	Callee	agroup . insert
>5238	MemberAccess	agroup . insert
>5239	Identifier	insert
>5240	Identifier	agroup
>5241	ExpressionStatement	 
>5242	ShiftExpression	NTA_CHECK ( e >= 0 && e < size_type ( tam_ . nCols ( ) ) ) << where << \"Invalid grouper member
>5243	ShiftExpression	where << \"Invalid grouper member
>5244	ShiftExpression	\"Invalid grouper member
>5245	ShiftExpression	e << \" - All group members should be >= 0 and < \" << tam_ . nCols ( )
>5246	ShiftExpression	\" - All group members should be >= 0 and < \" << tam_ . nCols ( )
>5247	CallExpression	tam_ . nCols ( )
>5248	ArgumentList	 
>5249	Callee	tam_ . nCols
>5250	MemberAccess	tam_ . nCols
>5251	Identifier	nCols
>5252	Identifier	tam_
>5253	PrimaryExpression	\" - All group members should be >= 0 and < \"
>5254	Identifier	e
>5255	PrimaryExpression	\"Invalid grouper member
>5256	Identifier	where
>5257	CallExpression	NTA_CHECK ( e >= 0 && e < size_type ( tam_ . nCols ( ) ) )
>5258	ArgumentList	e >= 0 && e < size_type ( tam_ . nCols ( ) )
>5259	Argument	e >= 0 && e < size_type ( tam_ . nCols ( ) )
>5260	AndExpression	e >= 0 && e < size_type ( tam_ . nCols ( ) )
>5261	RelationalExpression	e < size_type ( tam_ . nCols ( ) )
>5262	CallExpression	size_type ( tam_ . nCols ( ) )
>5263	ArgumentList	tam_ . nCols ( )
>5264	Argument	tam_ . nCols ( )
>5265	CallExpression	tam_ . nCols ( )
>5266	ArgumentList	 
>5267	Callee	tam_ . nCols
>5268	MemberAccess	tam_ . nCols
>5269	Identifier	nCols
>5270	Identifier	tam_
>5271	Callee	size_type
>5272	Identifier	size_type
>5273	Identifier	e
>5274	RelationalExpression	e >= 0
>5275	PrimaryExpression	0
>5276	Identifier	e
>5277	Callee	NTA_CHECK
>5278	Identifier	NTA_CHECK
>5279	ExpressionStatement	 
>5280	ShiftExpression	inStream >> e
>5281	Identifier	e
>5282	Identifier	inStream
>5283	UnaryExpression	 
>5284	Identifier	j
>5285	IncDec	++
>5286	Condition	 
>5287	RelationalExpression	j < groupSize
>5288	Identifier	groupSize
>5289	Identifier	j
>5290	ForInit	 
>5291	IdentifierDeclStatement	size_type j = 0 ;
>5292	IdentifierDecl	j = 0
>5293	AssignmentExpr	j = 0
>5294	PrimaryExpression	0
>5295	Identifier	j
>5296	Identifier	j
>5297	IdentifierDeclType	size_type
>5298	IdentifierDeclStatement	 
>5299	IdentifierDecl	agroup
>5300	Identifier	agroup
>5301	IdentifierDeclType	AGroup
>5302	ExpressionStatement	 
>5303	ShiftExpression	NTA_CHECK ( groupSize > 0 && groupSize < M ) << where << \"Invalid group size
>5304	ShiftExpression	where << \"Invalid group size
>5305	ShiftExpression	\"Invalid group size
>5306	ShiftExpression	groupSize << \" - Group size should be > 0 and < \" << M
>5307	ShiftExpression	\" - Group size should be > 0 and < \" << M
>5308	Identifier	M
>5309	PrimaryExpression	\" - Group size should be > 0 and < \"
>5310	Identifier	groupSize
>5311	PrimaryExpression	\"Invalid group size
>5312	Identifier	where
>5313	CallExpression	NTA_CHECK ( groupSize > 0 && groupSize < M )
>5314	ArgumentList	groupSize > 0 && groupSize < M
>5315	Argument	groupSize > 0 && groupSize < M
>5316	AndExpression	groupSize > 0 && groupSize < M
>5317	RelationalExpression	groupSize < M
>5318	Identifier	M
>5319	Identifier	groupSize
>5320	RelationalExpression	groupSize > 0
>5321	PrimaryExpression	0
>5322	Identifier	groupSize
>5323	Callee	NTA_CHECK
>5324	Identifier	NTA_CHECK
>5325	ExpressionStatement	 
>5326	ShiftExpression	inStream >> groupSize
>5327	Identifier	groupSize
>5328	Identifier	inStream
>5329	UnaryExpression	 
>5330	Identifier	i
>5331	IncDec	++
>5332	Condition	 
>5333	RelationalExpression	i < nGroups
>5334	Identifier	nGroups
>5335	Identifier	i
>5336	ForInit	 
>5337	IdentifierDeclStatement	size_type i = 0 ;
>5338	IdentifierDecl	i = 0
>5339	AssignmentExpr	i = 0
>5340	PrimaryExpression	0
>5341	Identifier	i
>5342	Identifier	i
>5343	IdentifierDeclType	size_type
>5344	ExpressionStatement	 
>5345	CallExpression	groups_ . clear ( )
>5346	ArgumentList	 
>5347	Callee	groups_ . clear
>5348	MemberAccess	groups_ . clear
>5349	Identifier	clear
>5350	Identifier	groups_
>5351	ExpressionStatement	 
>5352	ShiftExpression	NTA_CHECK ( nGroups >= 0 && nGroups < M ) << where << \"Invalid number of groups_
>5353	ShiftExpression	where << \"Invalid number of groups_
>5354	ShiftExpression	\"Invalid number of groups_
>5355	ShiftExpression	nGroups << \" - Number of groups_ should be > 0 and < \" << M
>5356	ShiftExpression	\" - Number of groups_ should be > 0 and < \" << M
>5357	Identifier	M
>5358	PrimaryExpression	\" - Number of groups_ should be > 0 and < \"
>5359	Identifier	nGroups
>5360	PrimaryExpression	\"Invalid number of groups_
>5361	Identifier	where
>5362	CallExpression	NTA_CHECK ( nGroups >= 0 && nGroups < M )
>5363	ArgumentList	nGroups >= 0 && nGroups < M
>5364	Argument	nGroups >= 0 && nGroups < M
>5365	AndExpression	nGroups >= 0 && nGroups < M
>5366	RelationalExpression	nGroups < M
>5367	Identifier	M
>5368	Identifier	nGroups
>5369	RelationalExpression	nGroups >= 0
>5370	PrimaryExpression	0
>5371	Identifier	nGroups
>5372	Callee	NTA_CHECK
>5373	Identifier	NTA_CHECK
>5374	ExpressionStatement	 
>5375	ShiftExpression	inStream >> nGroups
>5376	Identifier	nGroups
>5377	Identifier	inStream
>5378	IdentifierDeclStatement	 
>5379	IdentifierDecl	e = 0
>5380	AssignmentExpr	e = 0
>5381	PrimaryExpression	0
>5382	Identifier	e
>5383	Identifier	e
>5384	IdentifierDeclType	size_type
>5385	IdentifierDecl	groupSize = 0
>5386	AssignmentExpr	groupSize = 0
>5387	PrimaryExpression	0
>5388	Identifier	groupSize
>5389	Identifier	groupSize
>5390	IdentifierDeclType	size_type
>5391	IdentifierDecl	nGroups = 0
>5392	AssignmentExpr	nGroups = 0
>5393	PrimaryExpression	0
>5394	Identifier	nGroups
>5395	Identifier	nGroups
>5396	IdentifierDeclType	size_type
>5397	IfStatement	if ( version < 15 )
>5398	ElseStatement	else
>5399	CompoundStatement	 
>5400	ExpressionStatement	 
>5401	CallExpression	tam_ . readState ( inStream )
>5402	ArgumentList	inStream
>5403	Argument	inStream
>5404	Identifier	inStream
>5405	Callee	tam_ . readState
>5406	MemberAccess	tam_ . readState
>5407	Identifier	readState
>5408	Identifier	tam_
>5409	CompoundStatement	 
>5410	ExpressionStatement	 
>5411	CallExpression	tam_ . setHistory ( history )
>5412	ArgumentList	history
>5413	Argument	history
>5414	Identifier	history
>5415	Callee	tam_ . setHistory
>5416	MemberAccess	tam_ . setHistory
>5417	Identifier	setHistory
>5418	Identifier	tam_
>5419	ExpressionStatement	 
>5420	CallExpression	tam_ . fromCSR ( inStream )
>5421	ArgumentList	inStream
>5422	Argument	inStream
>5423	Identifier	inStream
>5424	Callee	tam_ . fromCSR
>5425	MemberAccess	tam_ . fromCSR
>5426	Identifier	fromCSR
>5427	Identifier	tam_
>5428	ForStatement	for ( size_type i = 0 ; i < hs ; ++ i )
>5429	ExpressionStatement	 
>5430	ShiftExpression	inStream >> history [ i ]
>5431	ArrayIndexing	history [ i ]
>5432	Identifier	i
>5433	Identifier	history
>5434	Identifier	inStream
>5435	UnaryExpression	 
>5436	Identifier	i
>5437	IncDec	++
>5438	Condition	 
>5439	RelationalExpression	i < hs
>5440	Identifier	hs
>5441	Identifier	i
>5442	ForInit	 
>5443	IdentifierDeclStatement	size_type i = 0 ;
>5444	IdentifierDecl	i = 0
>5445	AssignmentExpr	i = 0
>5446	PrimaryExpression	0
>5447	Identifier	i
>5448	Identifier	i
>5449	IdentifierDeclType	size_type
>5450	ExpressionStatement	 
>5451	CallExpression	history . resize ( hs )
>5452	ArgumentList	hs
>5453	Argument	hs
>5454	Identifier	hs
>5455	Callee	history . resize
>5456	MemberAccess	history . resize
>5457	Identifier	resize
>5458	Identifier	history
>5459	ExpressionStatement	 
>5460	ShiftExpression	NTA_CHECK ( hs >= 0 && hs < M ) << where << \"Invalid history size
>5461	ShiftExpression	where << \"Invalid history size
>5462	ShiftExpression	\"Invalid history size
>5463	ShiftExpression	hs << \" - History size should be > 0 and < \" << M
>5464	ShiftExpression	\" - History size should be > 0 and < \" << M
>5465	Identifier	M
>5466	PrimaryExpression	\" - History size should be > 0 and < \"
>5467	Identifier	hs
>5468	PrimaryExpression	\"Invalid history size
>5469	Identifier	where
>5470	CallExpression	NTA_CHECK ( hs >= 0 && hs < M )
>5471	ArgumentList	hs >= 0 && hs < M
>5472	Argument	hs >= 0 && hs < M
>5473	AndExpression	hs >= 0 && hs < M
>5474	RelationalExpression	hs < M
>5475	Identifier	M
>5476	Identifier	hs
>5477	RelationalExpression	hs >= 0
>5478	PrimaryExpression	0
>5479	Identifier	hs
>5480	Callee	NTA_CHECK
>5481	Identifier	NTA_CHECK
>5482	ExpressionStatement	 
>5483	ShiftExpression	inStream >> hs
>5484	Identifier	hs
>5485	Identifier	inStream
>5486	IdentifierDeclStatement	 
>5487	IdentifierDecl	history
>5488	Identifier	history
>5489	IdentifierDeclType	IntegerTAM 
>5490	IdentifierDeclStatement	 
>5491	IdentifierDecl	hs = 0
>5492	AssignmentExpr	hs = 0
>5493	PrimaryExpression	0
>5494	Identifier	hs
>5495	Identifier	hs
>5496	IdentifierDeclType	size_type
>5497	Condition	 
>5498	RelationalExpression	version < 15
>5499	PrimaryExpression	15
>5500	Identifier	version
>5501	ExpressionStatement	 
>5502	AssignmentExpr	overlappingGroups_ = og ? true 
>5503	ConditionalExpression	og ? true 
>5504	Identifier	false
>5505	Identifier	true
>5506	Condition	og
>5507	Identifier	og
>5508	Identifier	overlappingGroups_
>5509	ExpressionStatement	 
>5510	AssignmentExpr	maxGroupSize_ = size_type ( mgs )
>5511	CallExpression	size_type ( mgs )
>5512	ArgumentList	mgs
>5513	Argument	mgs
>5514	Identifier	mgs
>5515	Callee	size_type
>5516	Identifier	size_type
>5517	Identifier	maxGroupSize_
>5518	ExpressionStatement	 
>5519	AssignmentExpr	maxNGroups_ = size_type ( mng )
>5520	CallExpression	size_type ( mng )
>5521	ArgumentList	mng
>5522	Argument	mng
>5523	Identifier	mng
>5524	Callee	size_type
>5525	Identifier	size_type
>5526	Identifier	maxNGroups_
>5527	ExpressionStatement	 
>5528	AssignmentExpr	topNeighbors_ = size_type ( tn )
>5529	CallExpression	size_type ( tn )
>5530	ArgumentList	tn
>5531	Argument	tn
>5532	Identifier	tn
>5533	Callee	size_type
>5534	Identifier	size_type
>5535	Identifier	topNeighbors_
>5536	ExpressionStatement	 
>5537	ShiftExpression	NTA_CHECK ( mgs > 0 && mgs < M ) << where << \"Invalid max group size
>5538	ShiftExpression	where << \"Invalid max group size
>5539	ShiftExpression	\"Invalid max group size
>5540	ShiftExpression	mgs << \" - Max group size should be > 0 and < \" << M
>5541	ShiftExpression	\" - Max group size should be > 0 and < \" << M
>5542	Identifier	M
>5543	PrimaryExpression	\" - Max group size should be > 0 and < \"
>5544	Identifier	mgs
>5545	PrimaryExpression	\"Invalid max group size
>5546	Identifier	where
>5547	CallExpression	NTA_CHECK ( mgs > 0 && mgs < M )
>5548	ArgumentList	mgs > 0 && mgs < M
>5549	Argument	mgs > 0 && mgs < M
>5550	AndExpression	mgs > 0 && mgs < M
>5551	RelationalExpression	mgs < M
>5552	Identifier	M
>5553	Identifier	mgs
>5554	RelationalExpression	mgs > 0
>5555	PrimaryExpression	0
>5556	Identifier	mgs
>5557	Callee	NTA_CHECK
>5558	Identifier	NTA_CHECK
>5559	ExpressionStatement	 
>5560	ShiftExpression	NTA_CHECK ( mng > 0 && mng < M ) << where << \"Invalid max number of groups_
>5561	ShiftExpression	where << \"Invalid max number of groups_
>5562	ShiftExpression	\"Invalid max number of groups_
>5563	ShiftExpression	mgs << \" - Max number of groups_ should be > 0 and < \" << M
>5564	ShiftExpression	\" - Max number of groups_ should be > 0 and < \" << M
>5565	Identifier	M
>5566	PrimaryExpression	\" - Max number of groups_ should be > 0 and < \"
>5567	Identifier	mgs
>5568	PrimaryExpression	\"Invalid max number of groups_
>5569	Identifier	where
>5570	CallExpression	NTA_CHECK ( mng > 0 && mng < M )
>5571	ArgumentList	mng > 0 && mng < M
>5572	Argument	mng > 0 && mng < M
>5573	AndExpression	mng > 0 && mng < M
>5574	RelationalExpression	mng < M
>5575	Identifier	M
>5576	Identifier	mng
>5577	RelationalExpression	mng > 0
>5578	PrimaryExpression	0
>5579	Identifier	mng
>5580	Callee	NTA_CHECK
>5581	Identifier	NTA_CHECK
>5582	ExpressionStatement	 
>5583	ShiftExpression	NTA_CHECK ( tn > 0 && tn < M ) << where << \"Invalid top neighbors
>5584	ShiftExpression	where << \"Invalid top neighbors
>5585	ShiftExpression	\"Invalid top neighbors
>5586	ShiftExpression	tn << \" - Top neighbors should be > 0 and < \" << M
>5587	ShiftExpression	\" - Top neighbors should be > 0 and < \" << M
>5588	Identifier	M
>5589	PrimaryExpression	\" - Top neighbors should be > 0 and < \"
>5590	Identifier	tn
>5591	PrimaryExpression	\"Invalid top neighbors
>5592	Identifier	where
>5593	CallExpression	NTA_CHECK ( tn > 0 && tn < M )
>5594	ArgumentList	tn > 0 && tn < M
>5595	Argument	tn > 0 && tn < M
>5596	AndExpression	tn > 0 && tn < M
>5597	RelationalExpression	tn < M
>5598	Identifier	M
>5599	Identifier	tn
>5600	RelationalExpression	tn > 0
>5601	PrimaryExpression	0
>5602	Identifier	tn
>5603	Callee	NTA_CHECK
>5604	Identifier	NTA_CHECK
>5605	ExpressionStatement	 
>5606	AssignmentExpr	symmetricTam_ = ( st == 1 )
>5607	EqualityExpression	st == 1
>5608	PrimaryExpression	1
>5609	Identifier	st
>5610	Identifier	symmetricTam_
>5611	ExpressionStatement	 
>5612	AssignmentExpr	mode_ = ( Mode ) mode
>5613	CastExpression	( Mode ) mode
>5614	Identifier	mode
>5615	CastTarget	Mode
>5616	Identifier	mode_
>5617	IfStatement	if ( version >= 13 )
>5618	ExpressionStatement	 
>5619	ShiftExpression	inStream >> og
>5620	Identifier	og
>5621	Identifier	inStream
>5622	Condition	 
>5623	RelationalExpression	version >= 13
>5624	PrimaryExpression	13
>5625	Identifier	version
>5626	ExpressionStatement	 
>5627	AssignmentExpr	og = false
>5628	Identifier	false
>5629	Identifier	og
>5630	ExpressionStatement	 
>5631	ShiftExpression	inStream >> tn >> mng >> mgs
>5632	ShiftExpression	tn >> mng >> mgs
>5633	ShiftExpression	mng >> mgs
>5634	Identifier	mgs
>5635	Identifier	mng
>5636	Identifier	tn
>5637	Identifier	inStream
>5638	IfStatement	if ( version < 15 )
>5639	CompoundStatement	 
>5640	ExpressionStatement	 
>5641	CallExpression	tam_ . setTransitionMemory ( hms )
>5642	ArgumentList	hms
>5643	Argument	hms
>5644	Identifier	hms
>5645	Callee	tam_ . setTransitionMemory
>5646	MemberAccess	tam_ . setTransitionMemory
>5647	Identifier	setTransitionMemory
>5648	Identifier	tam_
>5649	ExpressionStatement	 
>5650	ShiftExpression	inStream >> hms
>5651	Identifier	hms
>5652	Identifier	inStream
>5653	Condition	 
>5654	RelationalExpression	version < 15
>5655	PrimaryExpression	15
>5656	Identifier	version
>5657	ExpressionStatement	 
>5658	ShiftExpression	inStream >> mode >> st
>5659	ShiftExpression	mode >> st
>5660	Identifier	st
>5661	Identifier	mode
>5662	Identifier	inStream
>5663	ExpressionStatement	 
>5664	CallExpression	max ( )
>5665	ArgumentList	 
>5666	Callee	max
>5667	Identifier	max
>5668	Statement	 
>5669	Statement	 
>5670	Statement	 
>5671	Statement	 
>5672	Statement	 
>5673	Statement	 
>5674	Statement	 
>5675	Statement	 
>5676	Statement	 
>5677	Statement	 
>5678	Statement	 
>5679	ExpressionStatement	 
>5680	AssignmentExpr	hms = tn = mng = mgs = h = st = 0
>5681	AssignmentExpr	tn = mng = mgs = h = st = 0
>5682	AssignmentExpr	mng = mgs = h = st = 0
>5683	AssignmentExpr	mgs = h = st = 0
>5684	AssignmentExpr	h = st = 0
>5685	AssignmentExpr	st = 0
>5686	PrimaryExpression	0
>5687	Identifier	st
>5688	Identifier	h
>5689	Identifier	mgs
>5690	Identifier	mng
>5691	Identifier	tn
>5692	Identifier	hms
>5693	IdentifierDeclStatement	 
>5694	IdentifierDecl	og
>5695	Identifier	og
>5696	IdentifierDeclType	size_type
>5697	IdentifierDecl	st
>5698	Identifier	st
>5699	IdentifierDeclType	size_type
>5700	IdentifierDecl	h
>5701	Identifier	h
>5702	IdentifierDeclType	size_type
>5703	IdentifierDecl	mgs
>5704	Identifier	mgs
>5705	IdentifierDeclType	size_type
>5706	IdentifierDecl	mng
>5707	Identifier	mng
>5708	IdentifierDeclType	size_type
>5709	IdentifierDecl	tn
>5710	Identifier	tn
>5711	IdentifierDeclType	size_type
>5712	IdentifierDecl	hms
>5713	Identifier	hms
>5714	IdentifierDeclType	size_type
>5715	IdentifierDeclStatement	 
>5716	IdentifierDecl	mode = 0
>5717	AssignmentExpr	mode = 0
>5718	PrimaryExpression	0
>5719	Identifier	mode
>5720	Identifier	mode
>5721	IdentifierDeclType	unsigned int
>5722	IfStatement	if ( str == \"Grouper\" )
>5723	ElseStatement	else
>5724	IfStatement	if ( str == \"Grouper13\" )
>5725	ElseStatement	else
>5726	IfStatement	if ( str == \"Grouper14\" )
>5727	ElseStatement	else
>5728	IfStatement	if ( str == \"Grouper15\" )
>5729	ElseStatement	else
>5730	IfStatement	if ( str == \"Grouper16\" )
>5731	ElseStatement	else
>5732	IfStatement	if ( str == \"Grouper17\" )
>5733	ElseStatement	else
>5734	IfStatement	if ( str == \"Grouper18\" )
>5735	ElseStatement	else
>5736	IfStatement	if ( str == \"Grouper19\" )
>5737	ElseStatement	else
>5738	CompoundStatement	 
>5739	ExpressionStatement	 
>5740	ShiftExpression	NTA_THROW << where << \"- Wrong class data format, expected data for Grouper\"
>5741	ShiftExpression	where << \"- Wrong class data format, expected data for Grouper\"
>5742	PrimaryExpression	\"- Wrong class data format, expected data for Grouper\"
>5743	Identifier	where
>5744	Identifier	NTA_THROW
>5745	ExpressionStatement	 
>5746	AssignmentExpr	version = 19
>5747	PrimaryExpression	19
>5748	Identifier	version
>5749	Condition	 
>5750	EqualityExpression	str == \"Grouper19\"
>5751	PrimaryExpression	\"Grouper19\"
>5752	Identifier	str
>5753	ExpressionStatement	 
>5754	AssignmentExpr	version = 18
>5755	PrimaryExpression	18
>5756	Identifier	version
>5757	Condition	 
>5758	EqualityExpression	str == \"Grouper18\"
>5759	PrimaryExpression	\"Grouper18\"
>5760	Identifier	str
>5761	ExpressionStatement	 
>5762	AssignmentExpr	version = 17
>5763	PrimaryExpression	17
>5764	Identifier	version
>5765	Condition	 
>5766	EqualityExpression	str == \"Grouper17\"
>5767	PrimaryExpression	\"Grouper17\"
>5768	Identifier	str
>5769	ExpressionStatement	 
>5770	AssignmentExpr	version = 16
>5771	PrimaryExpression	16
>5772	Identifier	version
>5773	Condition	 
>5774	EqualityExpression	str == \"Grouper16\"
>5775	PrimaryExpression	\"Grouper16\"
>5776	Identifier	str
>5777	ExpressionStatement	 
>5778	AssignmentExpr	version = 15
>5779	PrimaryExpression	15
>5780	Identifier	version
>5781	Condition	 
>5782	EqualityExpression	str == \"Grouper15\"
>5783	PrimaryExpression	\"Grouper15\"
>5784	Identifier	str
>5785	ExpressionStatement	 
>5786	AssignmentExpr	version = 14
>5787	PrimaryExpression	14
>5788	Identifier	version
>5789	Condition	 
>5790	EqualityExpression	str == \"Grouper14\"
>5791	PrimaryExpression	\"Grouper14\"
>5792	Identifier	str
>5793	ExpressionStatement	 
>5794	AssignmentExpr	version = 13
>5795	PrimaryExpression	13
>5796	Identifier	version
>5797	Condition	 
>5798	EqualityExpression	str == \"Grouper13\"
>5799	PrimaryExpression	\"Grouper13\"
>5800	Identifier	str
>5801	ExpressionStatement	 
>5802	AssignmentExpr	version = 10
>5803	PrimaryExpression	10
>5804	Identifier	version
>5805	Condition	 
>5806	EqualityExpression	str == \"Grouper\"
>5807	PrimaryExpression	\"Grouper\"
>5808	Identifier	str
>5809	IdentifierDeclStatement	 
>5810	IdentifierDecl	version = 10
>5811	AssignmentExpr	version = 10
>5812	PrimaryExpression	10
>5813	Identifier	version
>5814	Identifier	version
>5815	IdentifierDeclType	size_type
>5816	ExpressionStatement	 
>5817	ShiftExpression	inStream >> str
>5818	Identifier	str
>5819	Identifier	inStream
>5820	IdentifierDeclStatement	 
>5821	IdentifierDecl	str
>5822	Identifier	str
>5823	IdentifierDeclType	string
>5824	CompoundStatement	 
>5825	ExpressionStatement	 
>5826	ShiftExpression	NTA_CHECK ( inStream . good ( ) ) << where << \"- Bad stream\"
>5827	ShiftExpression	where << \"- Bad stream\"
>5828	PrimaryExpression	\"- Bad stream\"
>5829	Identifier	where
>5830	CallExpression	NTA_CHECK ( inStream . good ( ) )
>5831	ArgumentList	inStream . good ( )
>5832	Argument	inStream . good ( )
>5833	CallExpression	inStream . good ( )
>5834	ArgumentList	 
>5835	Callee	inStream . good
>5836	MemberAccess	inStream . good
>5837	Identifier	good
>5838	Identifier	inStream
>5839	Callee	NTA_CHECK
>5840	Identifier	NTA_CHECK
>5841	IdentifierDeclStatement	 
>5842	IdentifierDecl	* where = \"Grouper
>5843	AssignmentExpr	* where = \"Grouper
>5844	PrimaryExpression	\"Grouper
>5845	Identifier	where
>5846	Identifier	where
>5847	IdentifierDeclType	const char *
<3=56,4
<4=53,50,47,44,41,38,35,32,29,26,23,20,17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<20=22,21
<23=25,24
<26=28,27
<29=31,30
<32=34,33
<35=37,36
<38=40,39
<41=43,42
<44=46,45
<47=49,48
<50=52,51
<53=55,54
<56=125,108,91,74,57
<57=58
<58=66,59
<59=65,60
<60=64,61
<61=63,62
<66=72,67
<67=68
<68=69
<69=71,70
<72=73
<74=75
<75=83,76
<76=82,77
<77=81,78
<78=80,79
<83=89,84
<84=85
<85=86
<86=88,87
<89=90
<91=92
<92=100,93
<93=99,94
<94=98,95
<95=97,96
<100=106,101
<101=102
<102=103
<103=105,104
<106=107
<108=109
<109=117,110
<110=116,111
<111=115,112
<112=114,113
<117=123,118
<118=119
<119=120
<120=122,121
<123=124
<125=126
<126=131,130,127
<127=129,128
<153=161,154
<154=158,155
<155=157,156
<158=160,159
<161=162
<162=163
<163=167,164
<164=165
<165=166
<167=168
<174=176,175
<180=183,182,181
<183=447,442,430,416,404,392,348,339,246,237,197,184
<184=185
<185=193,186
<186=191,187
<187=188
<188=190,189
<191=192
<193=194
<194=196,195
<197=228,219,216,198
<198=199
<199=215,200
<200=213,201
<201=204,202
<202=203
<204=205
<205=212,206
<206=208,207
<208=209
<209=211,210
<213=214
<216=218,217
<219=220
<220=227,221
<221=223,222
<223=224
<224=226,225
<228=229
<229=236,230
<230=232,231
<232=233
<233=235,234
<237=238
<238=245,244,239
<239=243,240
<240=242,241
<246=331,322,319,247
<247=303,296,248
<248=287,278,271,249
<249=250
<250=263,251
<251=256,252
<252=253
<253=255,254
<256=257
<257=259,258
<259=260
<260=262,261
<263=264
<264=266,265
<266=268,267
<268=270,269
<271=275,272
<272=274,273
<275=277,276
<278=279
<279=286,280
<280=282,281
<282=283
<283=285,284
<287=288
<288=295,289
<289=291,290
<291=292
<292=294,293
<296=297
<297=302,301,298
<298=300,299
<303=304
<304=313,305
<305=306
<306=307
<307=309,308
<309=310
<310=312,311
<313=314
<314=316,315
<316=318,317
<319=321,320
<322=323
<323=330,324
<324=326,325
<326=327
<327=329,328
<331=332
<332=333
<333=338,337,334
<334=336,335
<339=340
<340=344,341
<341=342
<342=343
<344=345
<345=347,346
<348=383,376,349
<349=357,350
<350=351
<351=353,352
<353=354
<354=356,355
<357=358
<358=372,359
<359=368,364,360
<360=361
<361=363,362
<364=365
<365=367,366
<368=369
<369=371,370
<372=373
<373=375,374
<376=380,377
<377=379,378
<380=382,381
<383=384
<384=391,385
<385=387,386
<387=388
<388=390,389
<392=393
<393=403,402,394
<394=401,395
<395=397,396
<397=398
<398=400,399
<404=405
<405=415,414,406
<406=413,407
<407=409,408
<409=410
<410=412,411
<416=417
<417=426,418
<418=419
<419=420
<420=422,421
<422=423
<423=425,424
<426=427
<427=429,428
<430=440,431
<431=432
<432=436,433
<433=434
<434=435
<436=437
<437=439,438
<440=441
<442=443
<443=446,445,444
<447=448
<448=450,449
<450=451
<482=485,484,483
<485=500,493,486
<486=487
<487=489,488
<489=490
<490=492,491
<493=494
<494=496,495
<496=497
<497=499,498
<500=501
<501=503,502
<503=504
<504=506,505
<513=516,515,514
<516=597,517
<517=589,580,577,518
<518=519
<519=569,558,555,520
<520=544,521
<521=522
<522=542,523
<523=535,528,524
<524=525
<525=527,526
<528=529
<529=531,530
<531=532
<532=534,533
<535=536
<536=538,537
<538=539
<539=541,540
<542=543
<544=545
<545=554,553,546
<546=552,547
<547=549,548
<549=551,550
<555=557,556
<558=559
<559=568,560
<560=562,561
<562=563
<563=565,564
<565=567,566
<569=570
<570=571
<571=576,575,572
<572=574,573
<577=579,578
<580=581
<581=588,582
<582=584,583
<584=585
<585=587,586
<589=590
<590=591
<591=596,595,592
<592=594,593
<597=599,598
<599=600
<600=602,601
<602=604,603
<604=605
<605=607,606
<626=629,628,627
<629=653,646,635,630
<630=631
<631=633,632
<633=634
<635=636
<636=642,637
<637=640,638
<638=639
<640=641
<642=643
<643=645,644
<646=647
<647=649,648
<649=650
<650=652,651
<653=654
<654=656,655
<656=657
<663=669,668,664
<664=665
<665=667,666
<669=759,755,672,670
<670=671
<672=747,738,735,673
<673=731,727,683,674
<674=675
<675=679,676
<676=677
<677=678
<679=680
<680=682,681
<683=716,705,702,684
<684=685
<685=698,686
<686=687
<687=688
<688=694,689
<689=690
<690=691
<691=693,692
<694=695
<695=697,696
<698=699
<699=701,700
<702=704,703
<705=706
<706=715,707
<707=709,708
<709=710
<710=712,711
<712=714,713
<716=717
<717=726,718
<718=720,719
<720=721
<721=723,722
<723=725,724
<727=728
<728=730,729
<731=732
<732=734,733
<735=737,736
<738=739
<739=746,740
<740=742,741
<742=743
<743=745,744
<747=748
<748=749
<749=754,753,750
<750=752,751
<755=756
<756=758,757
<759=762,760
<760=761
<762=763
<763=772,764
<764=771,765
<765=767,766
<767=768
<768=770,769
<772=774,773
<793=802,801,794
<794=798,795
<795=797,796
<798=800,799
<802=891,880,803
<803=872,863,860,804
<804=847,843,809,805
<805=806
<806=808,807
<809=832,821,818,810
<810=811
<811=817,812
<812=814,813
<814=816,815
<818=820,819
<821=822
<822=831,823
<823=825,824
<825=826
<826=828,827
<828=830,829
<832=833
<833=842,834
<834=836,835
<836=837
<837=839,838
<839=841,840
<843=844
<844=846,845
<847=848
<848=859,849
<849=851,850
<851=853,852
<853=854
<854=856,855
<856=858,857
<860=862,861
<863=864
<864=871,865
<865=867,866
<867=868
<868=870,869
<872=873
<873=874
<874=879,878,875
<875=877,876
<880=881
<881=890,882
<882=884,883
<884=886,885
<886=887
<887=889,888
<891=892
<892=902,901,893
<893=900,894
<894=898,895
<895=896
<896=897
<898=899
<920=925,921
<921=922
<922=924,923
<932=941,940,933
<933=937,934
<934=936,935
<937=939,938
<941=991,946,942
<942=943
<943=945,944
<946=983,979,947
<947=948
<948=971,949
<949=950
<950=955,951
<951=952
<952=954,953
<955=956
<956=964,957
<957=959,958
<959=963,960
<960=962,961
<964=966,965
<966=970,967
<967=969,968
<971=972
<972=976,973
<973=975,974
<976=978,977
<979=980
<980=982,981
<983=984
<984=988,985
<985=987,986
<988=990,989
<991=992
<992=997,996,993
<993=995,994
<1016=1025,1024,1017
<1017=1021,1018
<1018=1020,1019
<1021=1023,1022
<1025=1028,1026
<1026=1027
<1028=1049,1047,1029
<1029=1030
<1030=1039,1031
<1031=1032
<1032=1036,1033
<1033=1035,1034
<1036=1038,1037
<1039=1040
<1040=1044,1041
<1041=1043,1042
<1044=1046,1045
<1047=1048
<1049=1050
<1050=1054,1051
<1051=1053,1052
<1054=1056,1055
<1068=1074,1073,1069
<1069=1070
<1070=1072,1071
<1074=1101,1080,1075
<1075=1076
<1076=1078,1077
<1078=1079
<1080=1081
<1081=1097,1082
<1082=1090,1083
<1083=1084
<1084=1086,1085
<1086=1087
<1087=1089,1088
<1090=1091
<1091=1093,1092
<1093=1094
<1094=1096,1095
<1097=1098
<1098=1100,1099
<1101=1102
<1102=1118,1103
<1103=1111,1104
<1104=1105
<1105=1107,1106
<1107=1108
<1108=1110,1109
<1111=1112
<1112=1114,1113
<1114=1115
<1115=1117,1116
<1118=1119
<1119=1121,1120
<1129=1147,1146,1130
<1130=1143,1140,1137,1134,1131
<1131=1133,1132
<1134=1136,1135
<1137=1139,1138
<1140=1142,1141
<1143=1145,1144
<1147=1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1182,1208,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1249,1265
<1175=1176
<1176=1178,1177
<1178=1179
<1179=1181,1180
<1182=1183
<1183=1204,1184
<1184=1185
<1185=1186
<1186=1202,1187
<1187=1190,1188
<1188=1189
<1190=1191
<1191=1200,1192
<1192=1193
<1193=1194
<1194=1196,1195
<1196=1197
<1197=1199,1198
<1200=1201
<1202=1203
<1204=1205
<1205=1207,1206
<1208=1209
<1209=1217,1210
<1210=1211
<1211=1212
<1212=1216,1213
<1213=1215,1214
<1217=1218
<1218=1220,1219
<1238=1240,1239
<1240=1241
<1241=1248,1242
<1242=1244,1243
<1244=1245
<1245=1247,1246
<1249=1250
<1250=1261,1251
<1251=1259,1252
<1252=1253
<1253=1257,1254
<1254=1255
<1255=1256
<1257=1258
<1259=1260
<1261=1262
<1262=1264,1263
<1265=1266
<1266=1268,1267
<1286=1292,1291,1287
<1287=1288
<1288=1290,1289
<1292=1993,1988,1976,1962,1955,1950,1945,1921,1911,1878,1871,1864,1860,1856,1843,1532,1528,1524,1381,1350,1340,1300,1293
<1293=1294
<1294=1298,1295
<1295=1296
<1296=1297
<1298=1299
<1300=1332,1323,1320,1301
<1301=1302
<1302=1313,1303
<1303=1311,1304
<1304=1305
<1305=1306
<1306=1308,1307
<1308=1310,1309
<1311=1312
<1313=1319,1314
<1314=1316,1315
<1316=1318,1317
<1320=1322,1321
<1323=1324
<1324=1331,1325
<1325=1327,1326
<1327=1328
<1328=1330,1329
<1332=1333
<1333=1334
<1334=1339,1338,1335
<1335=1337,1336
<1340=1341
<1341=1349,1348,1342
<1342=1344,1343
<1344=1345
<1345=1347,1346
<1350=1351
<1351=1368,1352
<1352=1367,1353
<1353=1366,1354
<1354=1360,1355
<1355=1359,1356
<1356=1358,1357
<1360=1362,1361
<1362=1363
<1363=1365,1364
<1368=1379,1369
<1369=1370
<1370=1371
<1371=1373,1372
<1373=1375,1374
<1375=1376
<1376=1378,1377
<1379=1380
<1381=1522,1382
<1382=1515,1383
<1383=1506,1497,1494,1384
<1384=1490,1422,1385
<1385=1409,1400,1397,1386
<1386=1387
<1387=1393,1388
<1388=1389
<1389=1390
<1390=1392,1391
<1393=1394
<1394=1396,1395
<1397=1399,1398
<1400=1401
<1401=1408,1402
<1402=1404,1403
<1404=1405
<1405=1407,1406
<1409=1410
<1410=1411
<1411=1421,1420,1412
<1412=1419,1413
<1413=1415,1414
<1415=1416
<1416=1418,1417
<1422=1481,1472,1469,1423
<1423=1452,1424
<1424=1448,1439,1436,1425
<1425=1426
<1426=1432,1427
<1427=1428
<1428=1429
<1429=1431,1430
<1432=1433
<1433=1435,1434
<1436=1438,1437
<1439=1440
<1440=1447,1441
<1441=1443,1442
<1443=1444
<1444=1446,1445
<1448=1449
<1449=1451,1450
<1452=1453
<1453=1467,1454
<1454=1463,1461,1459,1457,1455
<1455=1456
<1457=1458
<1459=1460
<1461=1462
<1463=1464
<1464=1466,1465
<1467=1468
<1469=1471,1470
<1472=1473
<1473=1480,1474
<1474=1476,1475
<1476=1477
<1477=1479,1478
<1481=1482
<1482=1489,1483
<1483=1485,1484
<1485=1486
<1486=1488,1487
<1490=1491
<1491=1493,1492
<1494=1496,1495
<1497=1498
<1498=1505,1499
<1499=1501,1500
<1501=1502
<1502=1504,1503
<1506=1507
<1507=1514,1508
<1508=1510,1509
<1510=1511
<1511=1513,1512
<1515=1516
<1516=1518,1517
<1518=1519
<1519=1521,1520
<1522=1523
<1524=1525
<1525=1527,1526
<1528=1529
<1529=1531,1530
<1532=1839,1835,1832,1533
<1533=1824,1806,1799,1790,1781,1564,1543,1534
<1534=1535
<1535=1539,1536
<1536=1537
<1537=1538
<1539=1540
<1540=1542,1541
<1543=1544
<1544=1560,1545
<1545=1553,1546
<1546=1547
<1547=1549,1548
<1549=1550
<1550=1552,1551
<1553=1554
<1554=1556,1555
<1556=1557
<1557=1559,1558
<1560=1561
<1561=1563,1562
<1564=1772,1565
<1565=1763,1756,1734,1587,1566
<1566=1567
<1567=1583,1568
<1568=1576,1569
<1569=1570
<1570=1572,1571
<1572=1573
<1573=1575,1574
<1576=1577
<1577=1579,1578
<1579=1580
<1580=1582,1581
<1583=1584
<1584=1586,1585
<1587=1716,1588
<1588=1707,1700,1685,1589
<1589=1676,1658,1655,1590
<1590=1646,1591
<1591=1602,1592
<1592=1593
<1593=1594
<1594=1598,1595
<1595=1596
<1596=1597
<1598=1599
<1599=1601,1600
<1602=1603
<1603=1631,1604
<1604=1611,1605
<1605=1607,1606
<1607=1608
<1608=1610,1609
<1611=1629,1612
<1612=1622,1615,1613
<1613=1614
<1615=1616
<1616=1618,1617
<1618=1619
<1619=1621,1620
<1622=1623
<1623=1625,1624
<1625=1626
<1626=1628,1627
<1629=1630
<1631=1638,1632
<1632=1634,1633
<1634=1635
<1635=1637,1636
<1638=1642,1639
<1639=1640
<1640=1641
<1642=1643
<1643=1645,1644
<1646=1647
<1647=1654,1653,1648
<1648=1652,1649
<1649=1651,1650
<1655=1657,1656
<1658=1659
<1659=1668,1660
<1660=1662,1661
<1662=1664,1663
<1664=1665
<1665=1667,1666
<1668=1675,1669
<1669=1671,1670
<1671=1672
<1672=1674,1673
<1676=1677
<1677=1684,1678
<1678=1680,1679
<1680=1681
<1681=1683,1682
<1685=1686
<1686=1698,1687
<1687=1696,1694,1692,1690,1688
<1688=1689
<1690=1691
<1692=1693
<1694=1695
<1696=1697
<1698=1699
<1700=1701
<1701=1703,1702
<1703=1704
<1704=1706,1705
<1707=1708
<1708=1715,1709
<1709=1711,1710
<1711=1712
<1712=1714,1713
<1716=1717
<1717=1726,1718
<1718=1720,1719
<1720=1722,1721
<1722=1723
<1723=1725,1724
<1726=1733,1727
<1727=1729,1728
<1729=1730
<1730=1732,1731
<1734=1735
<1735=1755,1736
<1736=1753,1737
<1737=1742,1738
<1738=1739
<1739=1741,1740
<1742=1743
<1743=1752,1744
<1744=1751,1745
<1745=1747,1746
<1747=1748
<1748=1750,1749
<1753=1754
<1756=1757
<1757=1759,1758
<1759=1760
<1760=1762,1761
<1763=1764
<1764=1768,1765
<1765=1766
<1766=1767
<1768=1769
<1769=1771,1770
<1772=1773
<1773=1780,1774
<1774=1776,1775
<1776=1777
<1777=1779,1778
<1781=1782
<1782=1786,1783
<1783=1784
<1784=1785
<1786=1787
<1787=1789,1788
<1790=1791
<1791=1795,1792
<1792=1793
<1793=1794
<1795=1796
<1796=1798,1797
<1799=1800
<1800=1802,1801
<1802=1803
<1803=1805,1804
<1806=1808,1807
<1808=1809
<1809=1816,1810
<1810=1812,1811
<1812=1813
<1813=1815,1814
<1816=1820,1817
<1817=1818
<1818=1819
<1820=1821
<1821=1823,1822
<1824=1825
<1825=1831,1826
<1826=1828,1827
<1828=1830,1829
<1832=1834,1833
<1835=1836
<1836=1838,1837
<1839=1840
<1840=1842,1841
<1843=1853,1850,1847,1844
<1844=1846,1845
<1847=1849,1848
<1850=1852,1851
<1853=1855,1854
<1856=1857
<1857=1859,1858
<1860=1861
<1861=1863,1862
<1864=1868,1865
<1865=1867,1866
<1868=1870,1869
<1871=1875,1872
<1872=1874,1873
<1875=1877,1876
<1878=1903,1894,1891,1879
<1879=1880
<1880=1884,1881
<1881=1883,1882
<1884=1890,1885
<1885=1887,1886
<1887=1889,1888
<1891=1893,1892
<1894=1895
<1895=1902,1896
<1896=1898,1897
<1898=1899
<1899=1901,1900
<1903=1904
<1904=1905
<1905=1910,1909,1906
<1906=1908,1907
<1911=1912
<1912=1920,1919,1913
<1913=1915,1914
<1915=1916
<1916=1918,1917
<1921=1922
<1922=1943,1923
<1923=1936,1929,1924
<1924=1925
<1925=1927,1926
<1927=1928
<1929=1930
<1930=1932,1931
<1932=1933
<1933=1935,1934
<1936=1937
<1937=1939,1938
<1939=1940
<1940=1942,1941
<1943=1944
<1945=1946
<1946=1949,1948,1947
<1950=1951
<1951=1953,1952
<1953=1954
<1955=1956
<1956=1958,1957
<1958=1959
<1959=1961,1960
<1962=1963
<1963=1975,1974,1964
<1964=1973,1965
<1965=1972,1966
<1966=1968,1967
<1968=1969
<1969=1971,1970
<1976=1986,1977
<1977=1978
<1978=1982,1979
<1979=1980
<1980=1981
<1982=1983
<1983=1985,1984
<1986=1987
<1988=1989
<1989=1992,1991,1990
<1993=1994
<1994=1999,1998,1995
<1995=1997,1996
<2076=2082,2081,2077
<2077=2078
<2078=2080,2079
<2082=2227,2209,2204,2181,2090,2083
<2083=2084
<2084=2086,2085
<2086=2087
<2087=2089,2088
<2090=2173,2169,2162,2091
<2091=2151,2128,2108,2092
<2092=2093
<2093=2104,2094
<2094=2102,2095
<2095=2096
<2096=2098,2097
<2098=2099
<2099=2101,2100
<2102=2103
<2104=2105
<2105=2107,2106
<2108=2124,2121,2109
<2109=2110
<2110=2116,2111
<2111=2115,2112
<2112=2114,2113
<2116=2120,2117
<2117=2119,2118
<2121=2123,2122
<2124=2125
<2125=2127,2126
<2128=2140,2129
<2129=2139,2138,2130
<2130=2137,2131
<2131=2133,2132
<2133=2134
<2134=2136,2135
<2140=2150,2149,2141
<2141=2148,2142
<2142=2144,2143
<2144=2145
<2145=2147,2146
<2151=2152
<2152=2160,2153
<2153=2158,2154
<2154=2155
<2155=2157,2156
<2158=2159
<2160=2161
<2162=2166,2163
<2163=2165,2164
<2166=2168,2167
<2169=2170
<2170=2172,2171
<2173=2174
<2174=2175
<2175=2180,2179,2176
<2176=2178,2177
<2181=2193,2182
<2182=2192,2191,2183
<2183=2190,2184
<2184=2186,2185
<2186=2187
<2187=2189,2188
<2193=2203,2202,2194
<2194=2201,2195
<2195=2197,2196
<2197=2198
<2198=2200,2199
<2204=2205
<2205=2208,2207,2206
<2209=2210
<2210=2223,2211
<2211=2216,2214,2212
<2212=2213
<2214=2215
<2216=2217
<2217=2219,2218
<2219=2220
<2220=2222,2221
<2223=2224
<2224=2226,2225
<2227=2228
<2228=2238,2237,2229
<2229=2236,2230
<2230=2232,2231
<2232=2233
<2233=2235,2234
<2287=2293,2292,2288
<2288=2289
<2289=2291,2290
<2293=2943,2936,2929,2924,2915,2908,2903,2896,2887,2878,2846,2832,2818,2811,2807,2800,2732,2682,2668,2656,2643,2636,2301,2294
<2294=2295
<2295=2299,2296
<2296=2297
<2297=2298
<2299=2300
<2301=2628,2624,2621,2302
<2302=2608,2500,2484,2452,2443,2441,2430,2419,2375,2366,2357,2344,2338,2321,2312,2303
<2303=2304
<2304=2308,2305
<2305=2306
<2306=2307
<2308=2309
<2309=2311,2310
<2312=2313
<2313=2317,2314
<2314=2315
<2315=2316
<2317=2318
<2318=2320,2319
<2321=2322
<2322=2336,2323
<2323=2334,2332,2330,2328,2326,2324
<2324=2325
<2326=2327
<2328=2329
<2330=2331
<2332=2333
<2334=2335
<2336=2337
<2338=2339
<2339=2341,2340
<2341=2343,2342
<2344=2345
<2345=2354,2346
<2346=2350,2347
<2347=2348
<2348=2349
<2350=2351
<2351=2353,2352
<2354=2356,2355
<2357=2358
<2358=2362,2359
<2359=2360
<2360=2361
<2362=2363
<2363=2365,2364
<2366=2367
<2367=2371,2368
<2368=2369
<2369=2370
<2371=2372
<2372=2374,2373
<2375=2376
<2376=2415,2377
<2377=2413,2411,2378
<2378=2379
<2379=2401,2380
<2380=2391,2381
<2381=2387,2382
<2382=2385,2383
<2383=2384
<2385=2386
<2387=2388
<2388=2390,2389
<2391=2397,2392
<2392=2395,2393
<2393=2394
<2395=2396
<2397=2398
<2398=2400,2399
<2401=2407,2402
<2402=2405,2403
<2403=2404
<2405=2406
<2407=2408
<2408=2410,2409
<2411=2412
<2413=2414
<2415=2416
<2416=2418,2417
<2419=2420
<2420=2426,2421
<2421=2424,2422
<2422=2423
<2424=2425
<2426=2427
<2427=2429,2428
<2430=2431
<2431=2437,2432
<2432=2435,2433
<2433=2434
<2435=2436
<2437=2438
<2438=2440,2439
<2441=2442
<2443=2444
<2444=2446,2445
<2446=2447
<2447=2449,2448
<2449=2451,2450
<2452=2453
<2453=2482,2454
<2454=2473,2464,2455
<2455=2456
<2456=2462,2457
<2457=2458
<2458=2459
<2459=2461,2460
<2462=2463
<2464=2465
<2465=2467,2466
<2467=2468
<2468=2470,2469
<2470=2472,2471
<2473=2474
<2474=2476,2475
<2476=2477
<2477=2479,2478
<2479=2481,2480
<2482=2483
<2484=2485
<2485=2496,2486
<2486=2487
<2487=2488
<2488=2494,2489
<2489=2492,2490
<2490=2491
<2492=2493
<2494=2495
<2496=2497
<2497=2499,2498
<2500=2604,2501
<2501=2598,2502
<2502=2590,2581,2578,2503
<2503=2564,2504
<2504=2560,2505
<2505=2506
<2506=2556,2551,2507
<2507=2508
<2508=2540,2531,2509
<2509=2510
<2510=2516,2511
<2511=2512
<2512=2513
<2513=2515,2514
<2516=2517
<2517=2528,2518
<2518=2527,2519
<2519=2521,2520
<2521=2522
<2522=2524,2523
<2524=2526,2525
<2528=2530,2529
<2531=2536,2532
<2532=2533
<2533=2535,2534
<2536=2537
<2537=2539,2538
<2540=2541
<2541=2550,2542
<2542=2544,2543
<2544=2545
<2545=2547,2546
<2547=2549,2548
<2551=2552
<2552=2553
<2553=2555,2554
<2556=2557
<2557=2559,2558
<2560=2561
<2561=2563,2562
<2564=2565
<2565=2577,2576,2566
<2566=2575,2567
<2567=2569,2568
<2569=2570
<2570=2572,2571
<2572=2574,2573
<2578=2580,2579
<2581=2582
<2582=2589,2583
<2583=2585,2584
<2585=2586
<2586=2588,2587
<2590=2591
<2591=2592
<2592=2597,2596,2593
<2593=2595,2594
<2598=2599
<2599=2603,2600
<2600=2602,2601
<2604=2605
<2605=2607,2606
<2608=2609
<2609=2617,2610
<2610=2615,2613,2611
<2611=2612
<2613=2614
<2615=2616
<2617=2618
<2618=2620,2619
<2621=2623,2622
<2624=2625
<2625=2627,2626
<2628=2629
<2629=2630
<2630=2635,2634,2631
<2631=2633,2632
<2636=2637
<2637=2642,2641,2638
<2638=2640,2639
<2643=2650,2644
<2644=2649,2648,2645
<2645=2647,2646
<2650=2655,2654,2651
<2651=2653,2652
<2656=2657
<2657=2667,2666,2658
<2658=2665,2659
<2659=2661,2660
<2661=2662
<2662=2664,2663
<2668=2669
<2669=2681,2680,2670
<2670=2679,2671
<2671=2673,2672
<2673=2675,2674
<2675=2676
<2676=2678,2677
<2682=2724,2715,2712,2683
<2683=2701,2684
<2684=2685
<2685=2699,2686
<2686=2697,2695,2693,2691,2689,2687
<2687=2688
<2689=2690
<2691=2692
<2693=2694
<2695=2696
<2697=2698
<2699=2700
<2701=2702
<2702=2711,2703
<2703=2707,2704
<2704=2705
<2705=2706
<2707=2708
<2708=2710,2709
<2712=2714,2713
<2715=2716
<2716=2723,2717
<2717=2719,2718
<2719=2720
<2720=2722,2721
<2724=2725
<2725=2726
<2726=2731,2730,2727
<2727=2729,2728
<2732=2792,2783,2780,2733
<2733=2734
<2734=2771,2757,2735
<2735=2736
<2736=2741,2737
<2737=2738
<2738=2740,2739
<2741=2742
<2742=2753,2743
<2743=2744
<2744=2745
<2745=2751,2746
<2746=2749,2747
<2747=2748
<2749=2750
<2751=2752
<2753=2754
<2754=2756,2755
<2757=2758
<2758=2767,2759
<2759=2760
<2760=2761
<2761=2765,2762
<2762=2763
<2763=2764
<2765=2766
<2767=2768
<2768=2770,2769
<2771=2772
<2772=2776,2773
<2773=2774
<2774=2775
<2776=2777
<2777=2779,2778
<2780=2782,2781
<2783=2784
<2784=2791,2785
<2785=2787,2786
<2787=2788
<2788=2790,2789
<2792=2793
<2793=2794
<2794=2799,2798,2795
<2795=2797,2796
<2800=2801
<2801=2806,2805,2802
<2802=2804,2803
<2807=2808
<2808=2810,2809
<2811=2812
<2812=2814,2813
<2814=2815
<2815=2817,2816
<2818=2819
<2819=2828,2820
<2820=2821
<2821=2822
<2822=2824,2823
<2824=2825
<2825=2827,2826
<2828=2829
<2829=2831,2830
<2832=2833
<2833=2845,2844,2834
<2834=2838,2835
<2835=2837,2836
<2838=2840,2839
<2840=2841
<2841=2843,2842
<2846=2870,2861,2858,2847
<2847=2848
<2848=2854,2849
<2849=2852,2850
<2850=2851
<2852=2853
<2854=2855
<2855=2857,2856
<2858=2860,2859
<2861=2862
<2862=2869,2863
<2863=2865,2864
<2865=2866
<2866=2868,2867
<2870=2871
<2871=2872
<2872=2877,2876,2873
<2873=2875,2874
<2878=2879
<2879=2883,2880
<2880=2881
<2881=2882
<2883=2884
<2884=2886,2885
<2887=2888
<2888=2892,2889
<2889=2890
<2890=2891
<2892=2893
<2893=2895,2894
<2896=2900,2897
<2897=2899,2898
<2900=2902,2901
<2903=2904
<2904=2906,2905
<2906=2907
<2908=2909
<2909=2911,2910
<2911=2912
<2912=2914,2913
<2915=2916
<2916=2920,2917
<2917=2918
<2918=2919
<2920=2921
<2921=2923,2922
<2924=2925
<2925=2928,2927,2926
<2929=2930
<2930=2935,2934,2931
<2931=2933,2932
<2936=2937
<2937=2942,2941,2938
<2938=2940,2939
<2943=2944
<2944=2945
<2945=2947,2946
<2947=2958,2948
<2948=2949
<2949=2950
<2950=2952,2951
<2952=2954,2953
<2954=2955
<2955=2957,2956
<2958=2959
<3004=3025,3024,3005
<3005=3021,3018,3015,3012,3009,3006
<3006=3008,3007
<3009=3011,3010
<3012=3014,3013
<3015=3017,3016
<3018=3020,3019
<3021=3023,3022
<3025=3257,3233,3219,3205,3191,3187,3185,3026
<3026=3181,3174,3027
<3027=3165,3028
<3028=3155,3029
<3029=3142,3131,3110,3097,3093,3056,3043,3030
<3030=3031
<3031=3039,3032
<3032=3037,3035,3033
<3033=3034
<3035=3036
<3037=3038
<3039=3040
<3040=3042,3041
<3043=3044
<3044=3052,3045
<3045=3050,3048,3046
<3046=3047
<3048=3049
<3050=3051
<3052=3053
<3053=3055,3054
<3056=3089,3057
<3057=3075,3066,3062,3058
<3058=3059
<3059=3061,3060
<3062=3063
<3063=3065,3064
<3066=3067
<3067=3071,3068
<3068=3069
<3069=3070
<3071=3072
<3072=3074,3073
<3075=3076
<3076=3088,3087,3077
<3077=3086,3078
<3078=3084,3079
<3079=3080
<3080=3081
<3081=3083,3082
<3084=3085
<3089=3090
<3090=3092,3091
<3093=3094
<3094=3096,3095
<3097=3098
<3098=3109,3099
<3099=3107,3100
<3100=3105,3101
<3101=3102
<3102=3104,3103
<3105=3106
<3107=3108
<3110=3111
<3111=3130,3129,3112
<3112=3121,3113
<3113=3115,3114
<3115=3116
<3116=3118,3117
<3118=3120,3119
<3121=3123,3122
<3123=3124
<3124=3126,3125
<3126=3128,3127
<3131=3132
<3132=3141,3140,3133
<3133=3139,3134
<3134=3136,3135
<3136=3138,3137
<3142=3143
<3143=3154,3153,3144
<3144=3152,3145
<3145=3149,3146
<3146=3148,3147
<3149=3151,3150
<3155=3156
<3156=3162,3157
<3157=3159,3158
<3159=3161,3160
<3162=3164,3163
<3165=3166
<3166=3173,3172,3167
<3167=3171,3168
<3168=3170,3169
<3174=3178,3175
<3175=3177,3176
<3178=3180,3179
<3181=3182
<3182=3184,3183
<3185=3186
<3187=3188
<3188=3190,3189
<3191=3192
<3192=3204,3203,3193
<3193=3202,3194
<3194=3198,3195
<3195=3196
<3196=3197
<3198=3199
<3199=3201,3200
<3205=3206
<3206=3218,3217,3207
<3207=3216,3208
<3208=3212,3209
<3209=3210
<3210=3211
<3212=3213
<3213=3215,3214
<3219=3220
<3220=3232,3231,3221
<3221=3230,3222
<3222=3226,3223
<3223=3224
<3224=3225
<3226=3227
<3227=3229,3228
<3233=3249,3234
<3234=3236,3235
<3236=3247,3237
<3237=3238
<3238=3246,3239
<3239=3245,3240
<3240=3244,3241
<3241=3243,3242
<3247=3248
<3249=3250
<3250=3256,3251
<3251=3253,3252
<3253=3255,3254
<3257=3258
<3258=3263,3262,3259
<3259=3261,3260
<3301=3307,3306,3302
<3302=3303
<3303=3305,3304
<3307=3593,3586,3581,3572,3568,3559,3552,3540,3524,3520,3518,3457,3382,3370,3336,3334,3329,3315,3308
<3308=3309
<3309=3313,3310
<3310=3311
<3311=3312
<3313=3314
<3315=3316
<3316=3325,3317
<3317=3318
<3318=3319
<3319=3321,3320
<3321=3322
<3322=3324,3323
<3325=3326
<3326=3328,3327
<3329=3330
<3330=3333,3332,3331
<3334=3335
<3336=3361,3337
<3337=3354,3343,3338
<3338=3339
<3339=3340
<3340=3342,3341
<3343=3344
<3344=3353,3345
<3345=3349,3346
<3346=3347
<3347=3348
<3349=3350
<3350=3352,3351
<3354=3355
<3355=3357,3356
<3357=3358
<3358=3360,3359
<3361=3362
<3362=3369,3363
<3363=3365,3364
<3365=3366
<3366=3368,3367
<3370=3371
<3371=3381,3380,3372
<3372=3379,3373
<3373=3375,3374
<3375=3376
<3376=3378,3377
<3382=3449,3445,3442,3383
<3383=3433,3431,3420,3395,3384
<3384=3385
<3385=3387,3386
<3387=3388
<3388=3390,3389
<3390=3394,3391
<3391=3393,3392
<3395=3396
<3396=3412,3397
<3397=3405,3398
<3398=3399
<3399=3401,3400
<3401=3402
<3402=3404,3403
<3405=3406
<3406=3408,3407
<3408=3409
<3409=3411,3410
<3412=3413
<3413=3415,3414
<3415=3419,3416
<3416=3418,3417
<3420=3421
<3421=3430,3429,3422
<3422=3428,3423
<3423=3427,3424
<3424=3426,3425
<3431=3432
<3433=3434
<3434=3441,3440,3435
<3435=3439,3436
<3436=3438,3437
<3442=3444,3443
<3445=3446
<3446=3448,3447
<3449=3450
<3450=3451
<3451=3456,3455,3452
<3452=3454,3453
<3457=3510,3506,3503,3458
<3458=3459
<3459=3494,3484,3460
<3460=3461
<3461=3480,3471,3462
<3462=3463
<3463=3467,3464
<3464=3465
<3465=3466
<3467=3468
<3468=3470,3469
<3471=3472
<3472=3476,3473
<3473=3474
<3474=3475
<3476=3477
<3477=3479,3478
<3480=3481
<3481=3483,3482
<3484=3485
<3485=3486
<3486=3490,3487
<3487=3488
<3488=3489
<3490=3491
<3491=3493,3492
<3494=3495
<3495=3499,3496
<3496=3497
<3497=3498
<3499=3500
<3500=3502,3501
<3503=3505,3504
<3506=3507
<3507=3509,3508
<3510=3511
<3511=3512
<3512=3517,3516,3513
<3513=3515,3514
<3518=3519
<3520=3521
<3521=3523,3522
<3524=3525
<3525=3539,3538,3526
<3526=3537,3527
<3527=3531,3528
<3528=3530,3529
<3531=3533,3532
<3533=3534
<3534=3536,3535
<3540=3541
<3541=3551,3550,3542
<3542=3549,3543
<3543=3545,3544
<3545=3546
<3546=3548,3547
<3552=3553
<3553=3555,3554
<3555=3556
<3556=3558,3557
<3559=3560
<3560=3564,3561
<3561=3562
<3562=3563
<3564=3565
<3565=3567,3566
<3568=3569
<3569=3571,3570
<3572=3573
<3573=3577,3574
<3574=3575
<3575=3576
<3577=3578
<3578=3580,3579
<3581=3582
<3582=3585,3584,3583
<3586=3587
<3587=3592,3591,3588
<3588=3590,3589
<3593=3638,3623,3594
<3594=3595
<3595=3608,3596
<3596=3607,3597
<3597=3606,3598
<3598=3605,3599
<3599=3601,3600
<3601=3602
<3602=3604,3603
<3608=3621,3609
<3609=3610
<3610=3611
<3611=3620,3612
<3612=3614,3613
<3614=3616,3615
<3616=3617
<3617=3619,3618
<3621=3622
<3623=3624
<3624=3630,3625
<3625=3629,3626
<3626=3628,3627
<3630=3636,3631
<3631=3632
<3632=3633
<3633=3635,3634
<3636=3637
<3638=3639
<3639=3641,3640
<3641=3652,3642
<3642=3643
<3643=3644
<3644=3646,3645
<3646=3648,3647
<3648=3649
<3649=3651,3650
<3652=3653
<3693=3708,3707,3694
<3694=3704,3701,3698,3695
<3695=3697,3696
<3698=3700,3699
<3701=3703,3702
<3704=3706,3705
<3708=3963,3956,3949,3942,3930,3918,3874,3861,3857,3848,3823,3709
<3709=3815,3811,3808,3710
<3710=3787,3720,3711
<3711=3712
<3712=3718,3713
<3713=3716,3714
<3714=3715
<3716=3717
<3718=3719
<3720=3783,3771,3721
<3721=3722
<3722=3751,3740,3732,3723
<3723=3724
<3724=3730,3725
<3725=3728,3726
<3726=3727
<3728=3729
<3730=3731
<3732=3733
<3733=3735,3734
<3735=3737,3736
<3737=3739,3738
<3740=3741
<3741=3750,3742
<3742=3746,3743
<3743=3744
<3744=3745
<3746=3747
<3747=3749,3748
<3751=3752
<3752=3770,3753
<3753=3766,3760,3754
<3754=3758,3755
<3755=3756
<3756=3757
<3758=3759
<3760=3764,3761
<3761=3762
<3762=3763
<3764=3765
<3766=3767
<3767=3769,3768
<3771=3772
<3772=3773
<3773=3781,3774
<3774=3779,3775
<3775=3776
<3776=3778,3777
<3779=3780
<3781=3782
<3783=3784
<3784=3786,3785
<3787=3788
<3788=3804,3789
<3789=3797,3790
<3790=3791
<3791=3793,3792
<3793=3794
<3794=3796,3795
<3797=3798
<3798=3800,3799
<3800=3801
<3801=3803,3802
<3804=3805
<3805=3807,3806
<3808=3810,3809
<3811=3812
<3812=3814,3813
<3815=3816
<3816=3817
<3817=3822,3821,3818
<3818=3820,3819
<3823=3841,3834,3824
<3824=3825
<3825=3826
<3826=3832,3827
<3827=3830,3828
<3828=3829
<3830=3831
<3832=3833
<3834=3835
<3835=3839,3836
<3836=3837
<3837=3838
<3839=3840
<3841=3842
<3842=3844,3843
<3844=3845
<3845=3847,3846
<3848=3853,3849
<3849=3852,3851,3850
<3853=3856,3855,3854
<3857=3858
<3858=3860,3859
<3861=3868,3862
<3862=3867,3866,3863
<3863=3865,3864
<3868=3873,3872,3869
<3869=3871,3870
<3874=3910,3906,3903,3875
<3875=3899,3888,3876
<3876=3877
<3877=3878
<3878=3882,3879
<3879=3880
<3880=3881
<3882=3883
<3883=3885,3884
<3885=3887,3886
<3888=3889
<3889=3893,3890
<3890=3891
<3891=3892
<3893=3894
<3894=3896,3895
<3896=3898,3897
<3899=3900
<3900=3902,3901
<3903=3905,3904
<3906=3907
<3907=3909,3908
<3910=3911
<3911=3912
<3912=3917,3916,3913
<3913=3915,3914
<3918=3919
<3919=3929,3928,3920
<3920=3927,3921
<3921=3923,3922
<3923=3924
<3924=3926,3925
<3930=3931
<3931=3941,3940,3932
<3932=3939,3933
<3933=3935,3934
<3935=3936
<3936=3938,3937
<3942=3943
<3943=3945,3944
<3945=3946
<3946=3948,3947
<3949=3950
<3950=3952,3951
<3952=3953
<3953=3955,3954
<3956=3957
<3957=3962,3961,3958
<3958=3960,3959
<3963=4061,4030,3978,3964
<3964=3965
<3965=3967,3966
<3967=3976,3968
<3968=3969
<3969=3970
<3970=3972,3971
<3972=3974,3973
<3974=3975
<3976=3977
<3978=3979
<3979=4003,3980
<3980=4002,3981
<3981=3996,3982
<3982=3995,3983
<3983=3987,3984
<3984=3986,3985
<3987=3989,3988
<3989=3990
<3990=3992,3991
<3992=3994,3993
<3996=3998,3997
<3998=3999
<3999=4001,4000
<4003=4028,4004
<4004=4005
<4005=4006
<4006=4022,4007
<4007=4016,4008
<4008=4010,4009
<4010=4011
<4011=4013,4012
<4013=4015,4014
<4016=4018,4017
<4018=4019
<4019=4021,4020
<4022=4024,4023
<4024=4025
<4025=4027,4026
<4028=4029
<4030=4031
<4031=4044,4032
<4032=4043,4033
<4033=4042,4034
<4034=4041,4035
<4035=4037,4036
<4037=4038
<4038=4040,4039
<4044=4059,4045
<4045=4046
<4046=4047
<4047=4056,4048
<4048=4055,4049
<4049=4051,4050
<4051=4052
<4052=4054,4053
<4056=4058,4057
<4059=4060
<4061=4062
<4062=4064,4063
<4064=4073,4065
<4065=4066
<4066=4067
<4067=4069,4068
<4069=4071,4070
<4071=4072
<4073=4074
<4114=4126,4125,4115
<4115=4122,4119,4116
<4116=4118,4117
<4119=4121,4120
<4122=4124,4123
<4126=4623,4622,4620,4589,4576,4564,4555,4493,4459,4449,4127
<4127=4441,4437,4434,4128
<4128=4349,4129
<4129=4345,4259,4130
<4130=4131
<4131=4241,4132
<4132=4233,4224,4221,4133
<4133=4194,4134
<4134=4186,4182,4175,4135
<4135=4159,4136
<4136=4137
<4137=4154,4138
<4138=4152,4139
<4139=4146,4140
<4140=4141
<4141=4143,4142
<4143=4145,4144
<4146=4147
<4147=4149,4148
<4149=4151,4150
<4152=4153
<4154=4156,4155
<4156=4158,4157
<4159=4160
<4160=4174,4173,4161
<4161=4172,4162
<4162=4168,4163
<4163=4164
<4164=4165
<4165=4167,4166
<4168=4169
<4169=4171,4170
<4175=4179,4176
<4176=4178,4177
<4179=4181,4180
<4182=4183
<4183=4185,4184
<4186=4187
<4187=4188
<4188=4193,4192,4189
<4189=4191,4190
<4194=4208,4195
<4195=4207,4206,4196
<4196=4205,4197
<4197=4199,4198
<4199=4200
<4200=4202,4201
<4202=4204,4203
<4208=4220,4219,4209
<4209=4218,4210
<4210=4212,4211
<4212=4213
<4213=4215,4214
<4215=4217,4216
<4221=4223,4222
<4224=4225
<4225=4232,4226
<4226=4228,4227
<4228=4229
<4229=4231,4230
<4233=4234
<4234=4235
<4235=4240,4239,4236
<4236=4238,4237
<4241=4242
<4242=4253,4243
<4243=4246,4244
<4244=4245
<4246=4247
<4247=4249,4248
<4249=4250
<4250=4252,4251
<4253=4254
<4254=4256,4255
<4256=4258,4257
<4259=4327,4260
<4260=4319,4310,4307,4261
<4261=4299,4288,4285,4262
<4262=4263
<4263=4280,4264
<4264=4278,4265
<4265=4272,4266
<4266=4267
<4267=4269,4268
<4269=4271,4270
<4272=4273
<4273=4275,4274
<4275=4277,4276
<4278=4279
<4280=4282,4281
<4282=4284,4283
<4285=4287,4286
<4288=4289
<4289=4298,4290
<4290=4292,4291
<4292=4293
<4293=4295,4294
<4295=4297,4296
<4299=4300
<4300=4301
<4301=4306,4305,4302
<4302=4304,4303
<4307=4309,4308
<4310=4311
<4311=4318,4312
<4312=4314,4313
<4314=4315
<4315=4317,4316
<4319=4320
<4320=4321
<4321=4326,4325,4322
<4322=4324,4323
<4327=4328
<4328=4339,4329
<4329=4332,4330
<4330=4331
<4332=4333
<4333=4335,4334
<4335=4336
<4336=4338,4337
<4339=4340
<4340=4342,4341
<4342=4344,4343
<4345=4346
<4346=4348,4347
<4349=4426,4417,4414,4350
<4350=4399,4362,4351
<4351=4352
<4352=4360,4353
<4353=4356,4354
<4354=4355
<4356=4357
<4357=4359,4358
<4360=4361
<4362=4363
<4363=4397,4364
<4364=4390,4374,4365
<4365=4366
<4366=4368,4367
<4368=4369
<4369=4371,4370
<4371=4373,4372
<4374=4375
<4375=4384,4376
<4376=4378,4377
<4378=4379
<4379=4381,4380
<4381=4383,4382
<4384=4386,4385
<4386=4387
<4387=4389,4388
<4390=4391
<4391=4393,4392
<4393=4394
<4394=4396,4395
<4397=4398
<4399=4400
<4400=4408,4401
<4401=4404,4402
<4402=4403
<4404=4405
<4405=4407,4406
<4408=4409
<4409=4411,4410
<4411=4413,4412
<4414=4416,4415
<4417=4418
<4418=4425,4419
<4419=4421,4420
<4421=4422
<4422=4424,4423
<4426=4427
<4427=4428
<4428=4433,4432,4429
<4429=4431,4430
<4434=4436,4435
<4437=4438
<4438=4440,4439
<4441=4442
<4442=4443
<4443=4448,4447,4444
<4444=4446,4445
<4449=4450
<4450=4458,4457,4451
<4451=4453,4452
<4453=4454
<4454=4456,4455
<4459=4485,4476,4473,4460
<4460=4461
<4461=4471,4462
<4462=4467,4463
<4463=4464
<4464=4466,4465
<4467=4468
<4468=4470,4469
<4471=4472
<4473=4475,4474
<4476=4477
<4477=4484,4478
<4478=4480,4479
<4480=4481
<4481=4483,4482
<4485=4486
<4486=4487
<4487=4492,4491,4488
<4488=4490,4489
<4493=4548,4494
<4494=4534,4495
<4495=4526,4517,4514,4496
<4496=4497
<4497=4508,4498
<4498=4499
<4499=4500
<4500=4502,4501
<4502=4503
<4503=4505,4504
<4505=4507,4506
<4508=4509
<4509=4511,4510
<4511=4513,4512
<4514=4516,4515
<4517=4518
<4518=4525,4519
<4519=4521,4520
<4521=4522
<4522=4524,4523
<4526=4527
<4527=4528
<4528=4533,4532,4529
<4529=4531,4530
<4534=4535
<4535=4544,4536
<4536=4537
<4537=4538
<4538=4540,4539
<4540=4541
<4541=4543,4542
<4544=4545
<4545=4547,4546
<4548=4549
<4549=4551,4550
<4551=4552
<4552=4554,4553
<4555=4556
<4556=4563,4562,4557
<4557=4561,4558
<4558=4560,4559
<4564=4565
<4565=4575,4574,4566
<4566=4573,4567
<4567=4569,4568
<4569=4570
<4570=4572,4571
<4576=4582,4577
<4577=4578
<4578=4580,4579
<4580=4581
<4582=4583
<4583=4585,4584
<4585=4586
<4586=4588,4587
<4589=4606,4590
<4590=4591
<4591=4593,4592
<4593=4604,4594
<4594=4595
<4595=4596
<4596=4603,4597
<4597=4599,4598
<4599=4600
<4600=4602,4601
<4604=4605
<4606=4607
<4607=4609,4608
<4609=4618,4610
<4610=4611
<4611=4612
<4612=4614,4613
<4614=4616,4615
<4616=4617
<4618=4619
<4620=4621
<4680=4686,4685,4681
<4681=4682
<4682=4684,4683
<4686=4925,4921,4893,4884,4873,4861,4803,4766,4760,4752,4741,4701,4695,4687
<4687=4688
<4688=4694,4689
<4689=4691,4690
<4691=4693,4692
<4695=4696
<4696=4700,4697
<4697=4699,4698
<4701=4733,4724,4721,4702
<4702=4703
<4703=4704
<4704=4720,4705
<4705=4715,4706
<4706=4714,4707
<4707=4709,4708
<4709=4711,4710
<4711=4713,4712
<4715=4717,4716
<4717=4719,4718
<4721=4723,4722
<4724=4725
<4725=4732,4726
<4726=4728,4727
<4728=4729
<4729=4731,4730
<4733=4734
<4734=4735
<4735=4740,4739,4736
<4736=4738,4737
<4741=4742
<4742=4751,4743
<4743=4745,4744
<4745=4747,4746
<4747=4748
<4748=4750,4749
<4752=4753
<4753=4759,4754
<4754=4758,4755
<4755=4757,4756
<4760=4761
<4761=4765,4762
<4762=4764,4763
<4766=4794,4773,4767
<4767=4768
<4768=4769
<4769=4770
<4770=4772,4771
<4773=4783,4774
<4774=4775
<4775=4779,4776
<4776=4777
<4777=4778
<4779=4780
<4780=4782,4781
<4783=4784
<4784=4793,4785
<4785=4787,4786
<4787=4789,4788
<4789=4790
<4790=4792,4791
<4794=4795
<4795=4797,4796
<4797=4799,4798
<4799=4800
<4800=4802,4801
<4803=4852,4849,4804
<4804=4838,4826,4805
<4805=4817,4814,4806
<4806=4807
<4807=4813,4808
<4808=4810,4809
<4810=4812,4811
<4814=4816,4815
<4817=4818
<4818=4825,4819
<4819=4821,4820
<4821=4822
<4822=4824,4823
<4826=4827
<4827=4837,4836,4828
<4828=4835,4829
<4829=4831,4830
<4831=4832
<4832=4834,4833
<4838=4839
<4839=4848,4840
<4840=4842,4841
<4842=4844,4843
<4844=4845
<4845=4847,4846
<4849=4851,4850
<4852=4853
<4853=4860,4854
<4854=4856,4855
<4856=4857
<4857=4859,4858
<4861=4862
<4862=4872,4871,4863
<4863=4870,4864
<4864=4866,4865
<4866=4867
<4867=4869,4868
<4873=4874
<4874=4883,4875
<4875=4877,4876
<4877=4879,4878
<4879=4880
<4880=4882,4881
<4884=4885
<4885=4889,4886
<4886=4887
<4887=4888
<4889=4890
<4890=4892,4891
<4893=4894
<4894=4920,4895
<4895=4919,4896
<4896=4918,4897
<4897=4913,4898
<4898=4912,4899
<4899=4911,4900
<4900=4910,4901
<4901=4909,4902
<4902=4908,4903
<4903=4907,4904
<4904=4906,4905
<4913=4916,4915,4914
<4916=4917
<4921=4922
<4922=4924,4923
<4925=4926
<4926=4927
<4927=4931,4928
<4928=4930,4929
<4931=4940,4932
<4932=4933
<4933=4934
<4934=4936,4935
<4936=4937
<4937=4939,4938
<4940=4941
<4964=4970,4969,4965
<4965=4966
<4966=4968,4967
<4970=5841,5824,5820,5816,5809,5722,5715,5693,5679,5678,5677,5676,5675,5674,5673,5672,5671,5670,5669,5668,5663,5657,5638,5630,5626,5617,5611,5605,5582,5559,5536,5527,5518,5509,5501,5397,5378,5374,5351,5344,5219,5212,5208,5194,5145,4989,4980,4971
<4971=4976,4972
<4972=4973
<4973=4975,4974
<4976=4977
<4977=4979,4978
<4980=4985,4981
<4981=4982
<4982=4984,4983
<4985=4986
<4986=4988,4987
<4989=5141,4990
<4990=5137,5130,5126,5109,4991
<4991=5101,5097,5094,4992
<4992=5090,5080,5041,5002,4993
<4993=4994
<4994=4998,4995
<4995=4996
<4996=4997
<4998=4999
<4999=5001,5000
<5002=5003
<5003=5020,5004
<5004=5019,5005
<5005=5018,5006
<5006=5015,5007
<5007=5014,5008
<5008=5010,5009
<5010=5011
<5011=5013,5012
<5015=5017,5016
<5020=5039,5021
<5021=5022
<5022=5023
<5023=5034,5024
<5024=5031,5025
<5025=5027,5026
<5027=5028
<5028=5030,5029
<5031=5033,5032
<5034=5038,5035
<5035=5037,5036
<5039=5040
<5041=5042
<5042=5059,5043
<5043=5058,5044
<5044=5057,5045
<5045=5054,5046
<5046=5053,5047
<5047=5049,5048
<5049=5050
<5050=5052,5051
<5054=5056,5055
<5059=5078,5060
<5060=5061
<5061=5062
<5062=5073,5063
<5063=5070,5064
<5064=5066,5065
<5066=5067
<5067=5069,5068
<5070=5072,5071
<5073=5077,5074
<5074=5076,5075
<5078=5079
<5080=5081
<5081=5089,5082
<5082=5086,5083
<5083=5085,5084
<5086=5088,5087
<5090=5091
<5091=5093,5092
<5094=5096,5095
<5097=5098
<5098=5100,5099
<5101=5102
<5102=5103
<5103=5108,5107,5104
<5104=5106,5105
<5109=5110
<5110=5118,5111
<5111=5117,5112
<5112=5116,5113
<5113=5115,5114
<5118=5124,5119
<5119=5120
<5120=5121
<5121=5123,5122
<5124=5125
<5126=5127
<5127=5129,5128
<5130=5131
<5131=5136,5135,5132
<5132=5134,5133
<5137=5138
<5138=5140,5139
<5141=5142
<5142=5144,5143
<5145=5190,5146
<5146=5185,5178,5151,5147
<5147=5148
<5148=5150,5149
<5151=5174,5152
<5152=5170,5153
<5153=5154
<5154=5162,5155
<5155=5161,5156
<5156=5160,5157
<5157=5159,5158
<5162=5168,5163
<5163=5164
<5164=5165
<5165=5167,5166
<5168=5169
<5170=5171
<5171=5173,5172
<5174=5175
<5175=5177,5176
<5178=5179
<5179=5184,5183,5180
<5180=5182,5181
<5185=5186
<5186=5188,5187
<5188=5189
<5190=5191
<5191=5193,5192
<5194=5204,5195
<5195=5196
<5196=5200,5197
<5197=5198
<5198=5199
<5200=5201
<5201=5203,5202
<5204=5205
<5205=5207,5206
<5208=5209
<5209=5211,5210
<5212=5213
<5213=5218,5217,5214
<5214=5216,5215
<5219=5336,5332,5329,5220
<5220=5325,5302,5298,5230,5221
<5221=5222
<5222=5226,5223
<5223=5224
<5224=5225
<5226=5227
<5227=5229,5228
<5230=5290,5286,5283,5231
<5231=5279,5241,5232
<5232=5233
<5233=5237,5234
<5234=5235
<5235=5236
<5237=5238
<5238=5240,5239
<5241=5242
<5242=5257,5243
<5243=5256,5244
<5244=5255,5245
<5245=5254,5246
<5246=5253,5247
<5247=5249,5248
<5249=5250
<5250=5252,5251
<5257=5277,5258
<5258=5259
<5259=5260
<5260=5274,5261
<5261=5273,5262
<5262=5271,5263
<5263=5264
<5264=5265
<5265=5267,5266
<5267=5268
<5268=5270,5269
<5271=5272
<5274=5276,5275
<5277=5278
<5279=5280
<5280=5282,5281
<5283=5285,5284
<5286=5287
<5287=5289,5288
<5290=5291
<5291=5292
<5292=5297,5296,5293
<5293=5295,5294
<5298=5299
<5299=5301,5300
<5302=5303
<5303=5313,5304
<5304=5312,5305
<5305=5311,5306
<5306=5310,5307
<5307=5309,5308
<5313=5323,5314
<5314=5315
<5315=5316
<5316=5320,5317
<5317=5319,5318
<5320=5322,5321
<5323=5324
<5325=5326
<5326=5328,5327
<5329=5331,5330
<5332=5333
<5333=5335,5334
<5336=5337
<5337=5338
<5338=5343,5342,5339
<5339=5341,5340
<5344=5345
<5345=5347,5346
<5347=5348
<5348=5350,5349
<5351=5352
<5352=5362,5353
<5353=5361,5354
<5354=5360,5355
<5355=5359,5356
<5356=5358,5357
<5362=5372,5363
<5363=5364
<5364=5365
<5365=5369,5366
<5366=5368,5367
<5369=5371,5370
<5372=5373
<5374=5375
<5375=5377,5376
<5378=5391,5385,5379
<5379=5384,5383,5380
<5380=5382,5381
<5385=5390,5389,5386
<5386=5388,5387
<5391=5396,5395,5392
<5392=5394,5393
<5397=5497,5409,5398
<5398=5399
<5399=5400
<5400=5401
<5401=5405,5402
<5402=5403
<5403=5404
<5405=5406
<5406=5408,5407
<5409=5490,5486,5482,5459,5450,5428,5419,5410
<5410=5411
<5411=5415,5412
<5412=5413
<5413=5414
<5415=5416
<5416=5418,5417
<5419=5420
<5420=5424,5421
<5421=5422
<5422=5423
<5424=5425
<5425=5427,5426
<5428=5442,5438,5435,5429
<5429=5430
<5430=5434,5431
<5431=5433,5432
<5435=5437,5436
<5438=5439
<5439=5441,5440
<5442=5443
<5443=5444
<5444=5449,5448,5445
<5445=5447,5446
<5450=5451
<5451=5455,5452
<5452=5453
<5453=5454
<5455=5456
<5456=5458,5457
<5459=5460
<5460=5470,5461
<5461=5469,5462
<5462=5468,5463
<5463=5467,5464
<5464=5466,5465
<5470=5480,5471
<5471=5472
<5472=5473
<5473=5477,5474
<5474=5476,5475
<5477=5479,5478
<5480=5481
<5482=5483
<5483=5485,5484
<5486=5487
<5487=5489,5488
<5490=5491
<5491=5496,5495,5492
<5492=5494,5493
<5497=5498
<5498=5500,5499
<5501=5502
<5502=5508,5503
<5503=5506,5505,5504
<5506=5507
<5509=5510
<5510=5517,5511
<5511=5515,5512
<5512=5513
<5513=5514
<5515=5516
<5518=5519
<5519=5526,5520
<5520=5524,5521
<5521=5522
<5522=5523
<5524=5525
<5527=5528
<5528=5535,5529
<5529=5533,5530
<5530=5531
<5531=5532
<5533=5534
<5536=5537
<5537=5547,5538
<5538=5546,5539
<5539=5545,5540
<5540=5544,5541
<5541=5543,5542
<5547=5557,5548
<5548=5549
<5549=5550
<5550=5554,5551
<5551=5553,5552
<5554=5556,5555
<5557=5558
<5559=5560
<5560=5570,5561
<5561=5569,5562
<5562=5568,5563
<5563=5567,5564
<5564=5566,5565
<5570=5580,5571
<5571=5572
<5572=5573
<5573=5577,5574
<5574=5576,5575
<5577=5579,5578
<5580=5581
<5582=5583
<5583=5593,5584
<5584=5592,5585
<5585=5591,5586
<5586=5590,5587
<5587=5589,5588
<5593=5603,5594
<5594=5595
<5595=5596
<5596=5600,5597
<5597=5599,5598
<5600=5602,5601
<5603=5604
<5605=5606
<5606=5610,5607
<5607=5609,5608
<5611=5612
<5612=5616,5613
<5613=5615,5614
<5617=5622,5618
<5618=5619
<5619=5621,5620
<5622=5623
<5623=5625,5624
<5626=5627
<5627=5629,5628
<5630=5631
<5631=5637,5632
<5632=5636,5633
<5633=5635,5634
<5638=5653,5639
<5639=5649,5640
<5640=5641
<5641=5645,5642
<5642=5643
<5643=5644
<5645=5646
<5646=5648,5647
<5649=5650
<5650=5652,5651
<5653=5654
<5654=5656,5655
<5657=5658
<5658=5662,5659
<5659=5661,5660
<5663=5664
<5664=5666,5665
<5666=5667
<5679=5680
<5680=5692,5681
<5681=5691,5682
<5682=5690,5683
<5683=5689,5684
<5684=5688,5685
<5685=5687,5686
<5693=5712,5709,5706,5703,5700,5697,5694
<5694=5696,5695
<5697=5699,5698
<5700=5702,5701
<5703=5705,5704
<5706=5708,5707
<5709=5711,5710
<5712=5714,5713
<5715=5716
<5716=5721,5720,5717
<5717=5719,5718
<5722=5805,5801,5723
<5723=5724
<5724=5797,5793,5725
<5725=5726
<5726=5789,5785,5727
<5727=5728
<5728=5781,5777,5729
<5729=5730
<5730=5773,5769,5731
<5731=5732
<5732=5765,5761,5733
<5733=5734
<5734=5757,5753,5735
<5735=5736
<5736=5749,5745,5737
<5737=5738
<5738=5739
<5739=5740
<5740=5744,5741
<5741=5743,5742
<5745=5746
<5746=5748,5747
<5749=5750
<5750=5752,5751
<5753=5754
<5754=5756,5755
<5757=5758
<5758=5760,5759
<5761=5762
<5762=5764,5763
<5765=5766
<5766=5768,5767
<5769=5770
<5770=5772,5771
<5773=5774
<5774=5776,5775
<5777=5778
<5778=5780,5779
<5781=5782
<5782=5784,5783
<5785=5786
<5786=5788,5787
<5789=5790
<5790=5792,5791
<5793=5794
<5794=5796,5795
<5797=5798
<5798=5800,5799
<5801=5802
<5802=5804,5803
<5805=5806
<5806=5808,5807
<5809=5810
<5810=5815,5814,5811
<5811=5813,5812
<5816=5817
<5817=5819,5818
<5820=5821
<5821=5823,5822
<5824=5825
<5825=5826
<5826=5830,5827
<5827=5829,5828
<5830=5839,5831
<5831=5832
<5832=5833
<5833=5835,5834
<5835=5836
<5836=5838,5837
<5839=5840
<5841=5842
<5842=5847,5846,5843
<5843=5845,5844
