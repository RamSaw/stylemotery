>3	FunctionDef	PublicKeyCache 
>4	ParameterList	unsigned int capacity
>5	Parameter	 
>6	Identifier	capacity
>7	ParameterType	unsigned int
>8	CompoundStatement	 
>9	ExpressionStatement	 
>10	AssignmentExpr	mKeySource = NULL
>11	Identifier	NULL
>12	Identifier	mKeySource
>13	ExpressionStatement	 
>14	AssignmentExpr	mCapacity = capacity
>15	Identifier	capacity
>16	Identifier	mCapacity
>24	FunctionDef	PublicKeyCache 
>25	ParameterList	 
>26	CompoundStatement	 
>30	FunctionDef	PublicKeyCache 
>31	ParameterList	UserId uid , ProfileId pid , PublicKeyRef & key , bool isDelegate
>32	Parameter	 
>33	Identifier	isDelegate
>34	ParameterType	bool
>35	Parameter	 
>36	Identifier	key
>37	ParameterType	PublicKeyRef &
>38	Parameter	 
>39	Identifier	pid
>40	ParameterType	ProfileId
>41	Parameter	 
>42	Identifier	uid
>43	ParameterType	UserId
>44	ReturnType	void
>45	CompoundStatement	 
>46	ExpressionStatement	 
>47	CallExpression	mCacheLock . unlock ( )
>48	ArgumentList	 
>49	Callee	mCacheLock . unlock
>50	MemberAccess	mCacheLock . unlock
>51	Identifier	unlock
>52	Identifier	mCacheLock
>53	CompoundStatement	 
>54	IfStatement	if ( mIdList . size ( ) > mCapacity )
>55	CompoundStatement	 
>56	ExpressionStatement	 
>57	CallExpression	mKeyMap . erase ( p )
>58	ArgumentList	p
>59	Argument	p
>60	Identifier	p
>61	Callee	mKeyMap . erase
>62	MemberAccess	mKeyMap . erase
>63	Identifier	erase
>64	Identifier	mKeyMap
>65	ExpressionStatement	 
>66	CallExpression	mIdList . pop_back ( )
>67	ArgumentList	 
>68	Callee	mIdList . pop_back
>69	MemberAccess	mIdList . pop_back
>70	Identifier	pop_back
>71	Identifier	mIdList
>72	ExpressionStatement	 
>73	AssignmentExpr	p = mIdList . back ( )
>74	CallExpression	mIdList . back ( )
>75	ArgumentList	 
>76	Callee	mIdList . back
>77	MemberAccess	mIdList . back
>78	Identifier	back
>79	Identifier	mIdList
>80	Identifier	p
>81	Condition	 
>82	RelationalExpression	mIdList . size ( ) > mCapacity
>83	Identifier	mCapacity
>84	CallExpression	mIdList . size ( )
>85	ArgumentList	 
>86	Callee	mIdList . size
>87	MemberAccess	mIdList . size
>88	Identifier	size
>89	Identifier	mIdList
>90	ExpressionStatement	 
>91	CallExpression	mIdList . push_front ( p )
>92	ArgumentList	p
>93	Argument	p
>94	Identifier	p
>95	Callee	mIdList . push_front
>96	MemberAccess	mIdList . push_front
>97	Identifier	push_front
>98	Identifier	mIdList
>99	ExpressionStatement	 
>100	AssignmentExpr	mKeyMap [ p ] = make_pair ( key , isDelegate )
>101	CallExpression	make_pair ( key , isDelegate )
>102	ArgumentList	key
>103	Argument	isDelegate
>104	Identifier	isDelegate
>105	Argument	key
>106	Identifier	key
>107	Callee	make_pair
>108	Identifier	make_pair
>109	ArrayIndexing	mKeyMap [ p ]
>110	Identifier	p
>111	Identifier	mKeyMap
>112	ExpressionStatement	 
>113	CallExpression	mIdList . remove ( p )
>114	ArgumentList	p
>115	Argument	p
>116	Identifier	p
>117	Callee	mIdList . remove
>118	MemberAccess	mIdList . remove
>119	Identifier	remove
>120	Identifier	mIdList
>121	ExpressionStatement	 
>122	CallExpression	mKeyMap . erase ( p )
>123	ArgumentList	p
>124	Argument	p
>125	Identifier	p
>126	Callee	mKeyMap . erase
>127	MemberAccess	mKeyMap . erase
>128	Identifier	erase
>129	Identifier	mKeyMap
>130	IdentifierDeclStatement	 
>131	IdentifierDecl	p = make_pair ( uid , pid )
>132	AssignmentExpr	p = make_pair ( uid , pid )
>133	CallExpression	make_pair ( uid , pid )
>134	ArgumentList	uid
>135	Argument	pid
>136	Identifier	pid
>137	Argument	uid
>138	Identifier	uid
>139	Callee	make_pair
>140	Identifier	make_pair
>141	Identifier	p
>142	Identifier	p
>143	IdentifierDeclType	IdPair
>144	ExpressionStatement	 
>145	CallExpression	mCacheLock . lock ( )
>146	ArgumentList	 
>147	Callee	mCacheLock . lock
>148	MemberAccess	mCacheLock . lock
>149	Identifier	lock
>150	Identifier	mCacheLock
>168	FunctionDef	PublicKeyCache 
>169	ParameterList	UserId uid , ProfileId pid , bool * isDelegate
>170	Parameter	 
>171	Identifier	isDelegate
>172	ParameterType	bool *
>173	Parameter	 
>174	Identifier	pid
>175	ParameterType	ProfileId
>176	Parameter	 
>177	Identifier	uid
>178	ParameterType	UserId
>179	ReturnType	PublicKeyRef
>180	CompoundStatement	 
>181	ReturnStatement	 
>182	Identifier	rval
>183	IfStatement	if ( isDelegate != NULL )
>184	CompoundStatement	 
>185	ExpressionStatement	 
>186	AssignmentExpr	* isDelegate = delegate
>187	Identifier	delegate
>188	UnaryOp	* isDelegate
>189	Identifier	isDelegate
>190	UnaryOperator	*
>191	Condition	 
>192	EqualityExpression	isDelegate != NULL
>193	Identifier	NULL
>194	Identifier	isDelegate
>195	ExpressionStatement	 
>196	CallExpression	mCacheLock . unlock ( )
>197	ArgumentList	 
>198	Callee	mCacheLock . unlock
>199	MemberAccess	mCacheLock . unlock
>200	Identifier	unlock
>201	Identifier	mCacheLock
>202	CompoundStatement	 
>203	IfStatement	if ( i != mKeyMap . end ( ) )
>204	ElseStatement	else
>205	IfStatement	if ( mKeySource != NULL )
>206	CompoundStatement	 
>207	IfStatement	if ( ! rval . isNull ( ) )
>208	CompoundStatement	 
>209	ExpressionStatement	 
>210	CallExpression	addPublicKey ( uid , pid , rval , delegate )
>211	ArgumentList	uid
>212	Argument	delegate
>213	Identifier	delegate
>214	Argument	rval
>215	Identifier	rval
>216	Argument	pid
>217	Identifier	pid
>218	Argument	uid
>219	Identifier	uid
>220	Callee	addPublicKey
>221	Identifier	addPublicKey
>222	Condition	 
>223	UnaryOp	! rval . isNull ( )
>224	CallExpression	rval . isNull ( )
>225	ArgumentList	 
>226	Callee	rval . isNull
>227	MemberAccess	rval . isNull
>228	Identifier	isNull
>229	Identifier	rval
>230	UnaryOperator	!
>231	ExpressionStatement	 
>232	CallExpression	mCacheLock . lock ( )
>233	ArgumentList	 
>234	Callee	mCacheLock . lock
>235	MemberAccess	mCacheLock . lock
>236	Identifier	lock
>237	Identifier	mCacheLock
>238	ExpressionStatement	 
>239	AssignmentExpr	rval = mKeySource -> getPublicKey ( uid , pid , & delegate )
>240	CallExpression	mKeySource -> getPublicKey ( uid , pid , & delegate )
>241	ArgumentList	uid
>242	Argument	& delegate
>243	UnaryOp	& delegate
>244	Identifier	delegate
>245	UnaryOperator	&
>246	Argument	pid
>247	Identifier	pid
>248	Argument	uid
>249	Identifier	uid
>250	Callee	mKeySource -> getPublicKey
>251	PtrMemberAccess	mKeySource -> getPublicKey
>252	Identifier	getPublicKey
>253	Identifier	mKeySource
>254	Identifier	rval
>255	ExpressionStatement	 
>256	CallExpression	mCacheLock . unlock ( )
>257	ArgumentList	 
>258	Callee	mCacheLock . unlock
>259	MemberAccess	mCacheLock . unlock
>260	Identifier	unlock
>261	Identifier	mCacheLock
>262	Condition	 
>263	EqualityExpression	mKeySource != NULL
>264	Identifier	NULL
>265	Identifier	mKeySource
>266	CompoundStatement	 
>267	ExpressionStatement	 
>268	AssignmentExpr	delegate = i -> second . second
>269	MemberAccess	i -> second . second
>270	Identifier	second
>271	PtrMemberAccess	i -> second
>272	Identifier	second
>273	Identifier	i
>274	Identifier	delegate
>275	ExpressionStatement	 
>276	AssignmentExpr	rval = i -> second . first
>277	MemberAccess	i -> second . first
>278	Identifier	first
>279	PtrMemberAccess	i -> second
>280	Identifier	second
>281	Identifier	i
>282	Identifier	rval
>283	Condition	 
>284	EqualityExpression	i != mKeyMap . end ( )
>285	CallExpression	mKeyMap . end ( )
>286	ArgumentList	 
>287	Callee	mKeyMap . end
>288	MemberAccess	mKeyMap . end
>289	Identifier	end
>290	Identifier	mKeyMap
>291	Identifier	i
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	i = mKeyMap . find ( p )
>294	AssignmentExpr	i = mKeyMap . find ( p )
>295	CallExpression	mKeyMap . find ( p )
>296	ArgumentList	p
>297	Argument	p
>298	Identifier	p
>299	Callee	mKeyMap . find
>300	MemberAccess	mKeyMap . find
>301	Identifier	find
>302	Identifier	mKeyMap
>303	Identifier	i
>304	Identifier	i
>305	IdentifierDeclType	KeyMap 
>306	IdentifierDeclStatement	 
>307	IdentifierDecl	p = make_pair ( uid , pid )
>308	AssignmentExpr	p = make_pair ( uid , pid )
>309	CallExpression	make_pair ( uid , pid )
>310	ArgumentList	uid
>311	Argument	pid
>312	Identifier	pid
>313	Argument	uid
>314	Identifier	uid
>315	Callee	make_pair
>316	Identifier	make_pair
>317	Identifier	p
>318	Identifier	p
>319	IdentifierDeclType	IdPair
>320	ExpressionStatement	 
>321	CallExpression	mCacheLock . lock ( )
>322	ArgumentList	 
>323	Callee	mCacheLock . lock
>324	MemberAccess	mCacheLock . lock
>325	Identifier	lock
>326	Identifier	mCacheLock
>327	IdentifierDeclStatement	 
>328	IdentifierDecl	delegate = false
>329	AssignmentExpr	delegate = false
>330	Identifier	false
>331	Identifier	false
>332	Identifier	delegate
>333	IdentifierDeclType	bool
>334	IdentifierDeclStatement	 
>335	IdentifierDecl	rval ( NULL )
>336	Identifier	NULL
>337	Identifier	rval
>338	IdentifierDeclType	PublicKeyRef
>366	FunctionDef	PublicKeyCache 
>367	ParameterList	unsigned int capacity
>368	Parameter	 
>369	Identifier	capacity
>370	ParameterType	unsigned int
>371	ReturnType	void
>372	CompoundStatement	 
>373	ExpressionStatement	 
>374	CallExpression	mCacheLock . unlock ( )
>375	ArgumentList	 
>376	Callee	mCacheLock . unlock
>377	MemberAccess	mCacheLock . unlock
>378	Identifier	unlock
>379	Identifier	mCacheLock
>380	CompoundStatement	 
>381	ExpressionStatement	 
>382	AssignmentExpr	mCapacity = capacity
>383	Identifier	capacity
>384	Identifier	mCapacity
>385	ExpressionStatement	 
>386	CallExpression	mCacheLock . lock ( )
>387	ArgumentList	 
>388	Callee	mCacheLock . lock
>389	MemberAccess	mCacheLock . lock
>390	Identifier	lock
>391	Identifier	mCacheLock
>398	FunctionDef	PublicKeyCache 
>399	ParameterList	PublicKeySource * source
>400	Parameter	 
>401	Identifier	source
>402	ParameterType	PublicKeySource *
>403	ReturnType	void
>404	CompoundStatement	 
>405	ExpressionStatement	 
>406	CallExpression	mCacheLock . unlock ( )
>407	ArgumentList	 
>408	Callee	mCacheLock . unlock
>409	MemberAccess	mCacheLock . unlock
>410	Identifier	unlock
>411	Identifier	mCacheLock
>412	CompoundStatement	 
>413	ExpressionStatement	 
>414	AssignmentExpr	mKeySource = source
>415	Identifier	source
>416	Identifier	mKeySource
>417	ExpressionStatement	 
>418	CallExpression	mCacheLock . lock ( )
>419	ArgumentList	 
>420	Callee	mCacheLock . lock
>421	MemberAccess	mCacheLock . lock
>422	Identifier	lock
>423	Identifier	mCacheLock
>430	FunctionDef	PublicKeyCache 
>431	ParameterList	 
>432	ReturnType	void
>433	CompoundStatement	 
>434	ExpressionStatement	 
>435	CallExpression	mCacheLock . unlock ( )
>436	ArgumentList	 
>437	Callee	mCacheLock . unlock
>438	MemberAccess	mCacheLock . unlock
>439	Identifier	unlock
>440	Identifier	mCacheLock
>441	CompoundStatement	 
>442	ExpressionStatement	 
>443	CallExpression	mKeyMap . clear ( )
>444	ArgumentList	 
>445	Callee	mKeyMap . clear
>446	MemberAccess	mKeyMap . clear
>447	Identifier	clear
>448	Identifier	mKeyMap
>449	ExpressionStatement	 
>450	CallExpression	mCacheLock . lock ( )
>451	ArgumentList	 
>452	Callee	mCacheLock . lock
>453	MemberAccess	mCacheLock . lock
>454	Identifier	lock
>455	Identifier	mCacheLock
<3=8,4
<4=5
<5=7,6
<8=13,9
<9=10
<10=12,11
<13=14
<14=16,15
<24=26,25
<30=45,44,31
<31=41,38,35,32
<32=34,33
<35=37,36
<38=40,39
<41=43,42
<45=144,53,46
<46=47
<47=49,48
<49=50
<50=52,51
<53=130,121,112,99,90,54
<54=81,55
<55=72,65,56
<56=57
<57=61,58
<58=59
<59=60
<61=62
<62=64,63
<65=66
<66=68,67
<68=69
<69=71,70
<72=73
<73=80,74
<74=76,75
<76=77
<77=79,78
<81=82
<82=84,83
<84=86,85
<86=87
<87=89,88
<90=91
<91=95,92
<92=93
<93=94
<95=96
<96=98,97
<99=100
<100=109,101
<101=107,102
<102=105,103
<103=104
<105=106
<107=108
<109=111,110
<112=113
<113=117,114
<114=115
<115=116
<117=118
<118=120,119
<121=122
<122=126,123
<123=124
<124=125
<126=127
<127=129,128
<130=131
<131=143,142,132
<132=141,133
<133=139,134
<134=137,135
<135=136
<137=138
<139=140
<144=145
<145=147,146
<147=148
<148=150,149
<168=180,179,169
<169=176,173,170
<170=172,171
<173=175,174
<176=178,177
<180=334,327,320,202,195,183,181
<181=182
<183=191,184
<184=185
<185=186
<186=188,187
<188=190,189
<191=192
<192=194,193
<195=196
<196=198,197
<198=199
<199=201,200
<202=306,292,203
<203=283,266,204
<204=205
<205=262,206
<206=255,238,231,207
<207=222,208
<208=209
<209=210
<210=220,211
<211=218,216,214,212
<212=213
<214=215
<216=217
<218=219
<220=221
<222=223
<223=230,224
<224=226,225
<226=227
<227=229,228
<231=232
<232=234,233
<234=235
<235=237,236
<238=239
<239=254,240
<240=250,241
<241=248,246,242
<242=243
<243=245,244
<246=247
<248=249
<250=251
<251=253,252
<255=256
<256=258,257
<258=259
<259=261,260
<262=263
<263=265,264
<266=275,267
<267=268
<268=274,269
<269=271,270
<271=273,272
<275=276
<276=282,277
<277=279,278
<279=281,280
<283=284
<284=291,285
<285=287,286
<287=288
<288=290,289
<292=293
<293=305,304,294
<294=303,295
<295=299,296
<296=297
<297=298
<299=300
<300=302,301
<306=307
<307=319,318,308
<308=317,309
<309=315,310
<310=313,311
<311=312
<313=314
<315=316
<320=321
<321=323,322
<323=324
<324=326,325
<327=328
<328=333,332,329
<329=331,330
<334=335
<335=338,337,336
<366=372,371,367
<367=368
<368=370,369
<372=385,380,373
<373=374
<374=376,375
<376=377
<377=379,378
<380=381
<381=382
<382=384,383
<385=386
<386=388,387
<388=389
<389=391,390
<398=404,403,399
<399=400
<400=402,401
<404=417,412,405
<405=406
<406=408,407
<408=409
<409=411,410
<412=413
<413=414
<414=416,415
<417=418
<418=420,419
<420=421
<421=423,422
<430=433,432,431
<433=449,441,434
<434=435
<435=437,436
<437=438
<438=440,439
<441=442
<442=443
<443=445,444
<445=446
<446=448,447
<449=450
<450=452,451
<452=453
<453=455,454
