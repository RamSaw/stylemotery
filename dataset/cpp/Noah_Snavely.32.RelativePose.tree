>3	FunctionDef	BundlerApp 
>4	ParameterList	int i1 , int i2 , camera_params_t & camera1 , camera_params_t & camera2
>5	Parameter	 
>6	Identifier	camera2
>7	ParameterType	camera_params_t &
>8	Parameter	 
>9	Identifier	camera1
>10	ParameterType	camera_params_t &
>11	Parameter	 
>12	Identifier	i2
>13	ParameterType	int
>14	Parameter	 
>15	Identifier	i1
>16	ParameterType	int
>17	ReturnType	bool
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	true
>21	IfStatement	if ( ! initialized )
>22	CompoundStatement	 
>23	ExpressionStatement	 
>24	CallExpression	matrix_scale ( 3 , 1 , camera2 . t , - 1.0 , camera2 . t )
>25	ArgumentList	3
>26	Argument	camera2 . t
>27	MemberAccess	camera2 . t
>28	Identifier	t
>29	Identifier	camera2
>30	Argument	- 1.0
>31	UnaryOp	- 1.0
>32	PrimaryExpression	1.0
>33	UnaryOperator	-
>34	Argument	camera2 . t
>35	MemberAccess	camera2 . t
>36	Identifier	t
>37	Identifier	camera2
>38	Argument	1
>39	PrimaryExpression	1
>40	Argument	3
>41	PrimaryExpression	3
>42	Callee	matrix_scale
>43	Identifier	matrix_scale
>44	ExpressionStatement	 
>45	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R , t , camera2 . t )
>46	ArgumentList	3
>47	Argument	camera2 . t
>48	MemberAccess	camera2 . t
>49	Identifier	t
>50	Identifier	camera2
>51	Argument	t
>52	Identifier	t
>53	Argument	R
>54	Identifier	R
>55	Argument	1
>56	PrimaryExpression	1
>57	Argument	3
>58	PrimaryExpression	3
>59	Argument	3
>60	PrimaryExpression	3
>61	Argument	3
>62	PrimaryExpression	3
>63	Callee	matrix_transpose_product
>64	Identifier	matrix_transpose_product
>65	ExpressionStatement	 
>66	CallExpression	memcpy ( camera2 . R , R , sizeof ( double ) * 9 )
>67	ArgumentList	camera2 . R
>68	Argument	sizeof ( double ) * 9
>69	MultiplicativeExpression	sizeof ( double ) * 9
>70	PrimaryExpression	9
>71	SizeofExpr	sizeof ( double )
>72	SizeofOperand	double
>73	Sizeof	sizeof
>74	Argument	R
>75	Identifier	R
>76	Argument	camera2 . R
>77	MemberAccess	camera2 . R
>78	Identifier	R
>79	Identifier	camera2
>80	Callee	memcpy
>81	Identifier	memcpy
>82	IfStatement	if ( ! success )
>83	CompoundStatement	 
>84	ReturnStatement	 
>85	Identifier	false
>86	Condition	 
>87	UnaryOp	! success
>88	Identifier	success
>89	UnaryOperator	!
>90	IdentifierDeclStatement	 
>91	IdentifierDecl	success = find_extrinsics_essential ( E , p1 , p2 , R , t )
>92	AssignmentExpr	success = find_extrinsics_essential ( E , p1 , p2 , R , t )
>93	CallExpression	find_extrinsics_essential ( E , p1 , p2 , R , t )
>94	ArgumentList	E
>95	Argument	t
>96	Identifier	t
>97	Argument	R
>98	Identifier	R
>99	Argument	p2
>100	Identifier	p2
>101	Argument	p1
>102	Identifier	p1
>103	Argument	E
>104	Identifier	E
>105	Callee	find_extrinsics_essential
>106	Identifier	find_extrinsics_essential
>107	Identifier	success
>108	Identifier	success
>109	IdentifierDeclType	int
>110	IdentifierDeclStatement	 
>111	IdentifierDecl	t [ 3 ]
>112	PrimaryExpression	3
>113	Identifier	t
>114	IdentifierDeclType	double [ 3 ]
>115	IdentifierDecl	R [ 9 ]
>116	PrimaryExpression	9
>117	Identifier	R
>118	IdentifierDeclType	double [ 9 ]
>119	IdentifierDeclStatement	 
>120	IdentifierDecl	p2 = v2_new ( m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_x / f2 , m_image_data [ i2 ] . m_keys [ match \
>121	AssignmentExpr	p2 = v2_new ( m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_x / f2 , m_image_data [ i2 ] . m_keys [ \
>122	CallExpression	v2_new ( m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_x / f2 , m_image_data [ i2 ] . m_keys [ match . m_idx2 ] \
>123	ArgumentList	m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_x / f2
>124	Argument	m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_y / f2
>125	MultiplicativeExpression	m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_y / f2
>126	Identifier	f2
>127	MemberAccess	m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_y
>128	Identifier	m_y
>129	ArrayIndexing	m_image_data [ i2 ] . m_keys [ match . m_idx2 ]
>130	MemberAccess	match . m_idx2
>131	Identifier	m_idx2
>132	Identifier	match
>133	MemberAccess	m_image_data [ i2 ] . m_keys
>134	Identifier	m_keys
>135	ArrayIndexing	m_image_data [ i2 ]
>136	Identifier	i2
>137	Identifier	m_image_data
>138	Argument	m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_x / f2
>139	MultiplicativeExpression	m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_x / f2
>140	Identifier	f2
>141	MemberAccess	m_image_data [ i2 ] . m_keys [ match . m_idx2 ] . m_x
>142	Identifier	m_x
>143	ArrayIndexing	m_image_data [ i2 ] . m_keys [ match . m_idx2 ]
>144	MemberAccess	match . m_idx2
>145	Identifier	m_idx2
>146	Identifier	match
>147	MemberAccess	m_image_data [ i2 ] . m_keys
>148	Identifier	m_keys
>149	ArrayIndexing	m_image_data [ i2 ]
>150	Identifier	i2
>151	Identifier	m_image_data
>152	Callee	v2_new
>153	Identifier	v2_new
>154	Identifier	p2
>155	Identifier	p2
>156	IdentifierDeclType	v2_t
>157	IdentifierDeclStatement	 
>158	IdentifierDecl	p1 = v2_new ( m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_x / f1 , m_image_data [ i1 ] . m_keys [ match \
>159	AssignmentExpr	p1 = v2_new ( m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_x / f1 , m_image_data [ i1 ] . m_keys [ \
>160	CallExpression	v2_new ( m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_x / f1 , m_image_data [ i1 ] . m_keys [ match . m_idx1 ] \
>161	ArgumentList	m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_x / f1
>162	Argument	m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_y / f1
>163	MultiplicativeExpression	m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_y / f1
>164	Identifier	f1
>165	MemberAccess	m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_y
>166	Identifier	m_y
>167	ArrayIndexing	m_image_data [ i1 ] . m_keys [ match . m_idx1 ]
>168	MemberAccess	match . m_idx1
>169	Identifier	m_idx1
>170	Identifier	match
>171	MemberAccess	m_image_data [ i1 ] . m_keys
>172	Identifier	m_keys
>173	ArrayIndexing	m_image_data [ i1 ]
>174	Identifier	i1
>175	Identifier	m_image_data
>176	Argument	m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_x / f1
>177	MultiplicativeExpression	m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_x / f1
>178	Identifier	f1
>179	MemberAccess	m_image_data [ i1 ] . m_keys [ match . m_idx1 ] . m_x
>180	Identifier	m_x
>181	ArrayIndexing	m_image_data [ i1 ] . m_keys [ match . m_idx1 ]
>182	MemberAccess	match . m_idx1
>183	Identifier	m_idx1
>184	Identifier	match
>185	MemberAccess	m_image_data [ i1 ] . m_keys
>186	Identifier	m_keys
>187	ArrayIndexing	m_image_data [ i1 ]
>188	Identifier	i1
>189	Identifier	m_image_data
>190	Callee	v2_new
>191	Identifier	v2_new
>192	Identifier	p1
>193	Identifier	p1
>194	IdentifierDeclType	v2_t
>195	IdentifierDeclStatement	 
>196	IdentifierDecl	& match = matches [ inliers [ 0 ] ]
>197	AssignmentExpr	& match = matches [ inliers [ 0 ] ]
>198	ArrayIndexing	matches [ inliers [ 0 ] ]
>199	ArrayIndexing	inliers [ 0 ]
>200	PrimaryExpression	0
>201	Identifier	inliers
>202	Identifier	matches
>203	Identifier	match
>204	Identifier	match
>205	IdentifierDeclType	KeypointMatch &
>206	Condition	 
>207	UnaryOp	! initialized
>208	Identifier	initialized
>209	UnaryOperator	!
>210	IfStatement	if ( ( int ) Hinliers . size ( ) > 0 )
>211	CompoundStatement	 
>212	IfStatement	if ( ( double ) Hinliers . size ( ) / num_inliers >= 0.75 )
>213	CompoundStatement	 
>214	IfStatement	if ( success )
>215	CompoundStatement	 
>216	ExpressionStatement	 
>217	CallExpression	matrix_scale ( 3 , 1 , camera2 . t , - 1.0 , camera2 . t )
>218	ArgumentList	3
>219	Argument	camera2 . t
>220	MemberAccess	camera2 . t
>221	Identifier	t
>222	Identifier	camera2
>223	Argument	- 1.0
>224	UnaryOp	- 1.0
>225	PrimaryExpression	1.0
>226	UnaryOperator	-
>227	Argument	camera2 . t
>228	MemberAccess	camera2 . t
>229	Identifier	t
>230	Identifier	camera2
>231	Argument	1
>232	PrimaryExpression	1
>233	Argument	3
>234	PrimaryExpression	3
>235	Callee	matrix_scale
>236	Identifier	matrix_scale
>237	ExpressionStatement	 
>238	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R , t , camera2 . t )
>239	ArgumentList	3
>240	Argument	camera2 . t
>241	MemberAccess	camera2 . t
>242	Identifier	t
>243	Identifier	camera2
>244	Argument	t
>245	Identifier	t
>246	Argument	R
>247	Identifier	R
>248	Argument	1
>249	PrimaryExpression	1
>250	Argument	3
>251	PrimaryExpression	3
>252	Argument	3
>253	PrimaryExpression	3
>254	Argument	3
>255	PrimaryExpression	3
>256	Callee	matrix_transpose_product
>257	Identifier	matrix_transpose_product
>258	ExpressionStatement	 
>259	CallExpression	memcpy ( camera2 . R , R , sizeof ( double ) * 9 )
>260	ArgumentList	camera2 . R
>261	Argument	sizeof ( double ) * 9
>262	MultiplicativeExpression	sizeof ( double ) * 9
>263	PrimaryExpression	9
>264	SizeofExpr	sizeof ( double )
>265	SizeofOperand	double
>266	Sizeof	sizeof
>267	Argument	R
>268	Identifier	R
>269	Argument	camera2 . R
>270	MemberAccess	camera2 . R
>271	Identifier	R
>272	Identifier	camera2
>273	Callee	memcpy
>274	Identifier	memcpy
>275	IfStatement	if ( num_inliers1 > num_inliers2 )
>276	ElseStatement	else
>277	CompoundStatement	 
>278	ExpressionStatement	 
>279	AssignmentExpr	t = t2
>280	Identifier	t2
>281	Identifier	t
>282	ExpressionStatement	 
>283	AssignmentExpr	R = R2
>284	Identifier	R2
>285	Identifier	R
>286	CompoundStatement	 
>287	ExpressionStatement	 
>288	AssignmentExpr	t = t1
>289	Identifier	t1
>290	Identifier	t
>291	ExpressionStatement	 
>292	AssignmentExpr	R = R1
>293	Identifier	R1
>294	Identifier	R
>295	Condition	 
>296	RelationalExpression	num_inliers1 > num_inliers2
>297	Identifier	num_inliers2
>298	Identifier	num_inliers1
>299	ExpressionStatement	 
>300	CallExpression	printf ( \"  H1
>301	ArgumentList	\"  H1
>302	Argument	num_inliers2
>303	Identifier	num_inliers2
>304	Argument	num_inliers1
>305	Identifier	num_inliers1
>306	Argument	\"  H1
>307	PrimaryExpression	\"  H1
>308	Callee	printf
>309	Identifier	printf
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	* t
>312	Identifier	t
>313	IdentifierDeclType	double *
>314	IdentifierDecl	* R
>315	Identifier	R
>316	IdentifierDeclType	double *
>317	ExpressionStatement	 
>318	AssignmentExpr	initialized = true
>319	Identifier	true
>320	Identifier	initialized
>321	ForStatement	for ( int i = 0 ; i < num_match_inliers ; i ++ )
>322	CompoundStatement	 
>323	IfStatement	if ( r2a < m_fmatrix_threshold && r2b < m_fmatrix_threshold )
>324	ExpressionStatement	 
>325	IncDecOp	num_inliers2 ++
>326	IncDec	++
>327	Identifier	num_inliers2
>328	Condition	 
>329	AndExpression	r2a < m_fmatrix_threshold && r2b < m_fmatrix_threshold
>330	RelationalExpression	r2b < m_fmatrix_threshold
>331	Identifier	m_fmatrix_threshold
>332	Identifier	r2b
>333	RelationalExpression	r2a < m_fmatrix_threshold
>334	Identifier	m_fmatrix_threshold
>335	Identifier	r2a
>336	IfStatement	if ( r1a < m_fmatrix_threshold && r1b < m_fmatrix_threshold )
>337	ExpressionStatement	 
>338	IncDecOp	num_inliers1 ++
>339	IncDec	++
>340	Identifier	num_inliers1
>341	Condition	 
>342	AndExpression	r1a < m_fmatrix_threshold && r1b < m_fmatrix_threshold
>343	RelationalExpression	r1b < m_fmatrix_threshold
>344	Identifier	m_fmatrix_threshold
>345	Identifier	r1b
>346	RelationalExpression	r1a < m_fmatrix_threshold
>347	Identifier	m_fmatrix_threshold
>348	Identifier	r1a
>349	IdentifierDeclStatement	 
>350	IdentifierDecl	r2b = fmatrix_compute_residual ( F2hT , rt , lft )
>351	AssignmentExpr	r2b = fmatrix_compute_residual ( F2hT , rt , lft )
>352	CallExpression	fmatrix_compute_residual ( F2hT , rt , lft )
>353	ArgumentList	F2hT
>354	Argument	lft
>355	Identifier	lft
>356	Argument	rt
>357	Identifier	rt
>358	Argument	F2hT
>359	Identifier	F2hT
>360	Callee	fmatrix_compute_residual
>361	Identifier	fmatrix_compute_residual
>362	Identifier	r2b
>363	Identifier	r2b
>364	IdentifierDeclType	double
>365	IdentifierDeclStatement	 
>366	IdentifierDecl	r2a = fmatrix_compute_residual ( F2h , lft , rt )
>367	AssignmentExpr	r2a = fmatrix_compute_residual ( F2h , lft , rt )
>368	CallExpression	fmatrix_compute_residual ( F2h , lft , rt )
>369	ArgumentList	F2h
>370	Argument	rt
>371	Identifier	rt
>372	Argument	lft
>373	Identifier	lft
>374	Argument	F2h
>375	Identifier	F2h
>376	Callee	fmatrix_compute_residual
>377	Identifier	fmatrix_compute_residual
>378	Identifier	r2a
>379	Identifier	r2a
>380	IdentifierDeclType	double
>381	IdentifierDeclStatement	 
>382	IdentifierDecl	r1b = fmatrix_compute_residual ( F1hT , rt , lft )
>383	AssignmentExpr	r1b = fmatrix_compute_residual ( F1hT , rt , lft )
>384	CallExpression	fmatrix_compute_residual ( F1hT , rt , lft )
>385	ArgumentList	F1hT
>386	Argument	lft
>387	Identifier	lft
>388	Argument	rt
>389	Identifier	rt
>390	Argument	F1hT
>391	Identifier	F1hT
>392	Callee	fmatrix_compute_residual
>393	Identifier	fmatrix_compute_residual
>394	Identifier	r1b
>395	Identifier	r1b
>396	IdentifierDeclType	double
>397	IdentifierDeclStatement	 
>398	IdentifierDecl	r1a = fmatrix_compute_residual ( F1h , lft , rt )
>399	AssignmentExpr	r1a = fmatrix_compute_residual ( F1h , lft , rt )
>400	CallExpression	fmatrix_compute_residual ( F1h , lft , rt )
>401	ArgumentList	F1h
>402	Argument	rt
>403	Identifier	rt
>404	Argument	lft
>405	Identifier	lft
>406	Argument	F1h
>407	Identifier	F1h
>408	Callee	fmatrix_compute_residual
>409	Identifier	fmatrix_compute_residual
>410	Identifier	r1a
>411	Identifier	r1a
>412	IdentifierDeclType	double
>413	IdentifierDeclStatement	 
>414	IdentifierDecl	lft = v3_new ( k2 . m_x , k2 . m_y , 1.0 )
>415	AssignmentExpr	lft = v3_new ( k2 . m_x , k2 . m_y , 1.0 )
>416	CallExpression	v3_new ( k2 . m_x , k2 . m_y , 1.0 )
>417	ArgumentList	k2 . m_x
>418	Argument	1.0
>419	PrimaryExpression	1.0
>420	Argument	k2 . m_y
>421	MemberAccess	k2 . m_y
>422	Identifier	m_y
>423	Identifier	k2
>424	Argument	k2 . m_x
>425	MemberAccess	k2 . m_x
>426	Identifier	m_x
>427	Identifier	k2
>428	Callee	v3_new
>429	Identifier	v3_new
>430	Identifier	lft
>431	Identifier	lft
>432	IdentifierDeclType	v3_t
>433	IdentifierDeclStatement	 
>434	IdentifierDecl	rt = v3_new ( k1 . m_x , k1 . m_y , 1.0 )
>435	AssignmentExpr	rt = v3_new ( k1 . m_x , k1 . m_y , 1.0 )
>436	CallExpression	v3_new ( k1 . m_x , k1 . m_y , 1.0 )
>437	ArgumentList	k1 . m_x
>438	Argument	1.0
>439	PrimaryExpression	1.0
>440	Argument	k1 . m_y
>441	MemberAccess	k1 . m_y
>442	Identifier	m_y
>443	Identifier	k1
>444	Argument	k1 . m_x
>445	MemberAccess	k1 . m_x
>446	Identifier	m_x
>447	Identifier	k1
>448	Callee	v3_new
>449	Identifier	v3_new
>450	Identifier	rt
>451	Identifier	rt
>452	IdentifierDeclType	v3_t
>453	IdentifierDeclStatement	 
>454	IdentifierDecl	& k2 = m_image_data [ i2 ] . m_keys [ match . m_idx2 ]
>455	AssignmentExpr	& k2 = m_image_data [ i2 ] . m_keys [ match . m_idx2 ]
>456	ArrayIndexing	m_image_data [ i2 ] . m_keys [ match . m_idx2 ]
>457	MemberAccess	match . m_idx2
>458	Identifier	m_idx2
>459	Identifier	match
>460	MemberAccess	m_image_data [ i2 ] . m_keys
>461	Identifier	m_keys
>462	ArrayIndexing	m_image_data [ i2 ]
>463	Identifier	i2
>464	Identifier	m_image_data
>465	Identifier	k2
>466	Identifier	k2
>467	IdentifierDeclType	const Keypoint &
>468	IdentifierDeclStatement	 
>469	IdentifierDecl	& k1 = m_image_data [ i1 ] . m_keys [ match . m_idx1 ]
>470	AssignmentExpr	& k1 = m_image_data [ i1 ] . m_keys [ match . m_idx1 ]
>471	ArrayIndexing	m_image_data [ i1 ] . m_keys [ match . m_idx1 ]
>472	MemberAccess	match . m_idx1
>473	Identifier	m_idx1
>474	Identifier	match
>475	MemberAccess	m_image_data [ i1 ] . m_keys
>476	Identifier	m_keys
>477	ArrayIndexing	m_image_data [ i1 ]
>478	Identifier	i1
>479	Identifier	m_image_data
>480	Identifier	k1
>481	Identifier	k1
>482	IdentifierDeclType	const Keypoint &
>483	IdentifierDeclStatement	 
>484	IdentifierDecl	& match = match_inliers [ i ]
>485	AssignmentExpr	& match = match_inliers [ i ]
>486	ArrayIndexing	match_inliers [ i ]
>487	Identifier	i
>488	Identifier	match_inliers
>489	Identifier	match
>490	Identifier	match
>491	IdentifierDeclType	const KeypointMatch &
>492	IncDecOp	 
>493	IncDec	++
>494	Identifier	i
>495	Condition	 
>496	RelationalExpression	i < num_match_inliers
>497	Identifier	num_match_inliers
>498	Identifier	i
>499	ForInit	 
>500	IdentifierDeclStatement	int i = 0 ;
>501	IdentifierDecl	i = 0
>502	AssignmentExpr	i = 0
>503	PrimaryExpression	0
>504	Identifier	i
>505	Identifier	i
>506	IdentifierDeclType	int
>507	IdentifierDeclStatement	 
>508	IdentifierDecl	num_inliers2 = 0
>509	AssignmentExpr	num_inliers2 = 0
>510	PrimaryExpression	0
>511	Identifier	num_inliers2
>512	Identifier	num_inliers2
>513	IdentifierDeclType	int
>514	IdentifierDecl	num_inliers1 = 0
>515	AssignmentExpr	num_inliers1 = 0
>516	PrimaryExpression	0
>517	Identifier	num_inliers1
>518	Identifier	num_inliers1
>519	IdentifierDeclType	int
>520	ExpressionStatement	 
>521	CallExpression	matrix_transpose ( 3 , 3 , F2h , F2hT )
>522	ArgumentList	3
>523	Argument	F2hT
>524	Identifier	F2hT
>525	Argument	F2h
>526	Identifier	F2h
>527	Argument	3
>528	PrimaryExpression	3
>529	Argument	3
>530	PrimaryExpression	3
>531	Callee	matrix_transpose
>532	Identifier	matrix_transpose
>533	ExpressionStatement	 
>534	CallExpression	matrix_transpose ( 3 , 3 , F1h , F1hT )
>535	ArgumentList	3
>536	Argument	F1hT
>537	Identifier	F1hT
>538	Argument	F1h
>539	Identifier	F1h
>540	Argument	3
>541	PrimaryExpression	3
>542	Argument	3
>543	PrimaryExpression	3
>544	Callee	matrix_transpose
>545	Identifier	matrix_transpose
>546	IdentifierDeclStatement	 
>547	IdentifierDecl	F2hT [ 9 ]
>548	PrimaryExpression	9
>549	Identifier	F2hT
>550	IdentifierDeclType	double [ 9 ]
>551	IdentifierDecl	F1hT [ 9 ]
>552	PrimaryExpression	9
>553	Identifier	F1hT
>554	IdentifierDeclType	double [ 9 ]
>555	ExpressionStatement	 
>556	CallExpression	ComputeFundamentalMatrix ( f1 , f2 , R2 , t2 , F2h )
>557	ArgumentList	f1
>558	Argument	F2h
>559	Identifier	F2h
>560	Argument	t2
>561	Identifier	t2
>562	Argument	R2
>563	Identifier	R2
>564	Argument	f2
>565	Identifier	f2
>566	Argument	f1
>567	Identifier	f1
>568	Callee	ComputeFundamentalMatrix
>569	Identifier	ComputeFundamentalMatrix
>570	ExpressionStatement	 
>571	CallExpression	ComputeFundamentalMatrix ( f1 , f2 , R1 , t1 , F1h )
>572	ArgumentList	f1
>573	Argument	F1h
>574	Identifier	F1h
>575	Argument	t1
>576	Identifier	t1
>577	Argument	R1
>578	Identifier	R1
>579	Argument	f2
>580	Identifier	f2
>581	Argument	f1
>582	Identifier	f1
>583	Callee	ComputeFundamentalMatrix
>584	Identifier	ComputeFundamentalMatrix
>585	IdentifierDeclStatement	 
>586	IdentifierDecl	F2h [ 9 ]
>587	PrimaryExpression	9
>588	Identifier	F2h
>589	IdentifierDeclType	double [ 9 ]
>590	IdentifierDecl	F1h [ 9 ]
>591	PrimaryExpression	9
>592	Identifier	F1h
>593	IdentifierDeclType	double [ 9 ]
>594	ExpressionStatement	 
>595	Statement	 
>596	Statement	 
>597	Statement	 
>598	Statement	 
>599	Statement	 
>600	Condition	 
>601	Identifier	success
>602	IdentifierDeclStatement	 
>603	IdentifierDecl	success = DecomposeHomography ( H , f1 , f2 , R1 , t1 , R2 , t2 , p10 , p20 )
>604	AssignmentExpr	success = DecomposeHomography ( H , f1 , f2 , R1 , t1 , R2 , t2 , p10 , p20 )
>605	CallExpression	DecomposeHomography ( H , f1 , f2 , R1 , t1 , R2 , t2 , p10 , p20 )
>606	ArgumentList	H
>607	Argument	p20
>608	Identifier	p20
>609	Argument	p10
>610	Identifier	p10
>611	Argument	t2
>612	Identifier	t2
>613	Argument	R2
>614	Identifier	R2
>615	Argument	t1
>616	Identifier	t1
>617	Argument	R1
>618	Identifier	R1
>619	Argument	f2
>620	Identifier	f2
>621	Argument	f1
>622	Identifier	f1
>623	Argument	H
>624	Identifier	H
>625	Callee	DecomposeHomography
>626	Identifier	DecomposeHomography
>627	Identifier	success
>628	Identifier	success
>629	IdentifierDeclType	bool
>630	IdentifierDeclStatement	 
>631	IdentifierDecl	t2 [ 3 ]
>632	PrimaryExpression	3
>633	Identifier	t2
>634	IdentifierDeclType	double [ 3 ]
>635	IdentifierDecl	R2 [ 9 ]
>636	PrimaryExpression	9
>637	Identifier	R2
>638	IdentifierDeclType	double [ 9 ]
>639	IdentifierDecl	t1 [ 3 ]
>640	PrimaryExpression	3
>641	Identifier	t1
>642	IdentifierDeclType	double [ 3 ]
>643	IdentifierDecl	R1 [ 9 ]
>644	PrimaryExpression	9
>645	Identifier	R1
>646	IdentifierDeclType	double [ 9 ]
>647	IdentifierDeclStatement	 
>648	IdentifierDecl	p20 = v2_new ( m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_x , m_image_data [ i2 ] . m_keys [ match0 . \
>649	AssignmentExpr	p20 = v2_new ( m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_x , m_image_data [ i2 ] . m_keys [ \
>650	CallExpression	v2_new ( m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_x , m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] \
>651	ArgumentList	m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_x
>652	Argument	m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_y
>653	MemberAccess	m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_y
>654	Identifier	m_y
>655	ArrayIndexing	m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ]
>656	MemberAccess	match0 . m_idx2
>657	Identifier	m_idx2
>658	Identifier	match0
>659	MemberAccess	m_image_data [ i2 ] . m_keys
>660	Identifier	m_keys
>661	ArrayIndexing	m_image_data [ i2 ]
>662	Identifier	i2
>663	Identifier	m_image_data
>664	Argument	m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_x
>665	MemberAccess	m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ] . m_x
>666	Identifier	m_x
>667	ArrayIndexing	m_image_data [ i2 ] . m_keys [ match0 . m_idx2 ]
>668	MemberAccess	match0 . m_idx2
>669	Identifier	m_idx2
>670	Identifier	match0
>671	MemberAccess	m_image_data [ i2 ] . m_keys
>672	Identifier	m_keys
>673	ArrayIndexing	m_image_data [ i2 ]
>674	Identifier	i2
>675	Identifier	m_image_data
>676	Callee	v2_new
>677	Identifier	v2_new
>678	Identifier	p20
>679	Identifier	p20
>680	IdentifierDeclType	v2_t
>681	IdentifierDeclStatement	 
>682	IdentifierDecl	p10 = v2_new ( m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_x , m_image_data [ i1 ] . m_keys [ match0 . \
>683	AssignmentExpr	p10 = v2_new ( m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_x , m_image_data [ i1 ] . m_keys [ \
>684	CallExpression	v2_new ( m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_x , m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] \
>685	ArgumentList	m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_x
>686	Argument	m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_y
>687	MemberAccess	m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_y
>688	Identifier	m_y
>689	ArrayIndexing	m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ]
>690	MemberAccess	match0 . m_idx1
>691	Identifier	m_idx1
>692	Identifier	match0
>693	MemberAccess	m_image_data [ i1 ] . m_keys
>694	Identifier	m_keys
>695	ArrayIndexing	m_image_data [ i1 ]
>696	Identifier	i1
>697	Identifier	m_image_data
>698	Argument	m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_x
>699	MemberAccess	m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ] . m_x
>700	Identifier	m_x
>701	ArrayIndexing	m_image_data [ i1 ] . m_keys [ match0 . m_idx1 ]
>702	MemberAccess	match0 . m_idx1
>703	Identifier	m_idx1
>704	Identifier	match0
>705	MemberAccess	m_image_data [ i1 ] . m_keys
>706	Identifier	m_keys
>707	ArrayIndexing	m_image_data [ i1 ]
>708	Identifier	i1
>709	Identifier	m_image_data
>710	Callee	v2_new
>711	Identifier	v2_new
>712	Identifier	p10
>713	Identifier	p10
>714	IdentifierDeclType	v2_t
>715	IdentifierDeclStatement	 
>716	IdentifierDecl	& match0 = matches [ Hinliers [ 0 ] ]
>717	AssignmentExpr	& match0 = matches [ Hinliers [ 0 ] ]
>718	ArrayIndexing	matches [ Hinliers [ 0 ] ]
>719	ArrayIndexing	Hinliers [ 0 ]
>720	PrimaryExpression	0
>721	Identifier	Hinliers
>722	Identifier	matches
>723	Identifier	match0
>724	Identifier	match0
>725	IdentifierDeclType	KeypointMatch &
>726	Condition	 
>727	RelationalExpression	( double ) Hinliers . size ( ) / num_inliers >= 0.75
>728	PrimaryExpression	0.75
>729	MultiplicativeExpression	( double ) Hinliers . size ( ) / num_inliers
>730	Identifier	num_inliers
>731	CastExpression	( double ) Hinliers . size ( )
>732	CallExpression	Hinliers . size ( )
>733	ArgumentList	 
>734	Callee	Hinliers . size
>735	MemberAccess	Hinliers . size
>736	Identifier	size
>737	Identifier	Hinliers
>738	CastTarget	double
>739	ExpressionStatement	 
>740	CallExpression	printf ( \"\n\" )
>741	ArgumentList	\"\n\"
>742	Argument	\"\n\"
>743	PrimaryExpression	\"\n\"
>744	Callee	printf
>745	Identifier	printf
>746	ExpressionStatement	 
>747	CallExpression	matrix_print ( 3 , 3 , H )
>748	ArgumentList	3
>749	Argument	H
>750	Identifier	H
>751	Argument	3
>752	PrimaryExpression	3
>753	Argument	3
>754	PrimaryExpression	3
>755	Callee	matrix_print
>756	Identifier	matrix_print
>757	Condition	 
>758	RelationalExpression	( int ) Hinliers . size ( ) > 0
>759	PrimaryExpression	0
>760	CastExpression	( int ) Hinliers . size ( )
>761	CallExpression	Hinliers . size ( )
>762	ArgumentList	 
>763	Callee	Hinliers . size
>764	MemberAccess	Hinliers . size
>765	Identifier	size
>766	Identifier	Hinliers
>767	CastTarget	int
>768	IdentifierDeclStatement	 
>769	IdentifierDecl	initialized = false
>770	AssignmentExpr	initialized = false
>771	Identifier	false
>772	Identifier	false
>773	Identifier	initialized
>774	IdentifierDeclType	bool
>775	ExpressionStatement	 
>776	CallExpression	printf ( \"  Found %d / %d homography inliers (%0.3f%%)\n\" , ( int ) Hinliers . size ( ) , num_inliers , 100.0 * \
>777	ArgumentList	\"  Found %d / %d homography inliers (%0.3f%%)\n\"
>778	Argument	100.0 * Hinliers . size ( ) / num_inliers
>779	MultiplicativeExpression	100.0 * Hinliers . size ( ) / num_inliers
>780	MultiplicativeExpression	Hinliers . size ( ) / num_inliers
>781	Identifier	num_inliers
>782	CallExpression	Hinliers . size ( )
>783	ArgumentList	 
>784	Callee	Hinliers . size
>785	MemberAccess	Hinliers . size
>786	Identifier	size
>787	Identifier	Hinliers
>788	PrimaryExpression	100.0
>789	Argument	num_inliers
>790	Identifier	num_inliers
>791	Argument	( int ) Hinliers . size ( )
>792	CastExpression	( int ) Hinliers . size ( )
>793	CallExpression	Hinliers . size ( )
>794	ArgumentList	 
>795	Callee	Hinliers . size
>796	MemberAccess	Hinliers . size
>797	Identifier	size
>798	Identifier	Hinliers
>799	CastTarget	int
>800	Argument	\"  Found %d / %d homography inliers (%0.3f%%)\n\"
>801	PrimaryExpression	\"  Found %d / %d homography inliers (%0.3f%%)\n\"
>802	Callee	printf
>803	Identifier	printf
>804	IdentifierDeclStatement	 
>805	IdentifierDecl	Hinliers = EstimateTransform ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , match_inliers , MotionHomography , \
>806	AssignmentExpr	Hinliers = EstimateTransform ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , match_inliers , \
>807	CallExpression	EstimateTransform ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , match_inliers , MotionHomography , \
>808	ArgumentList	m_image_data [ i1 ] . m_keys
>809	Argument	H
>810	Identifier	H
>811	Argument	6.0
>812	PrimaryExpression	6.0
>813	Argument	128
>814	PrimaryExpression	128
>815	Argument	MotionHomography
>816	Identifier	MotionHomography
>817	Argument	match_inliers
>818	Identifier	match_inliers
>819	Argument	m_image_data [ i2 ] . m_keys
>820	MemberAccess	m_image_data [ i2 ] . m_keys
>821	Identifier	m_keys
>822	ArrayIndexing	m_image_data [ i2 ]
>823	Identifier	i2
>824	Identifier	m_image_data
>825	Argument	m_image_data [ i1 ] . m_keys
>826	MemberAccess	m_image_data [ i1 ] . m_keys
>827	Identifier	m_keys
>828	ArrayIndexing	m_image_data [ i1 ]
>829	Identifier	i1
>830	Identifier	m_image_data
>831	Callee	EstimateTransform
>832	Identifier	EstimateTransform
>833	Identifier	Hinliers
>834	Identifier	Hinliers
>835	IdentifierDeclType	std 
>836	IdentifierDeclStatement	 
>837	IdentifierDecl	H [ 9 ]
>838	PrimaryExpression	9
>839	Identifier	H
>840	IdentifierDeclType	double [ 9 ]
>841	IdentifierDeclStatement	 
>842	IdentifierDecl	num_match_inliers = ( int ) match_inliers . size ( )
>843	AssignmentExpr	num_match_inliers = ( int ) match_inliers . size ( )
>844	CastExpression	( int ) match_inliers . size ( )
>845	CallExpression	match_inliers . size ( )
>846	ArgumentList	 
>847	Callee	match_inliers . size
>848	MemberAccess	match_inliers . size
>849	Identifier	size
>850	Identifier	match_inliers
>851	CastTarget	int
>852	Identifier	num_match_inliers
>853	Identifier	num_match_inliers
>854	IdentifierDeclType	int
>855	ForStatement	for ( int i = 0 ; i < num_inliers ; i ++ )
>856	CompoundStatement	 
>857	ExpressionStatement	 
>858	CallExpression	match_inliers . push_back ( matches [ inliers [ i ] ] )
>859	ArgumentList	matches [ inliers [ i ] ]
>860	Argument	matches [ inliers [ i ] ]
>861	ArrayIndexing	matches [ inliers [ i ] ]
>862	ArrayIndexing	inliers [ i ]
>863	Identifier	i
>864	Identifier	inliers
>865	Identifier	matches
>866	Callee	match_inliers . push_back
>867	MemberAccess	match_inliers . push_back
>868	Identifier	push_back
>869	Identifier	match_inliers
>870	IncDecOp	 
>871	IncDec	++
>872	Identifier	i
>873	Condition	 
>874	RelationalExpression	i < num_inliers
>875	Identifier	num_inliers
>876	Identifier	i
>877	ForInit	 
>878	IdentifierDeclStatement	int i = 0 ;
>879	IdentifierDecl	i = 0
>880	AssignmentExpr	i = 0
>881	PrimaryExpression	0
>882	Identifier	i
>883	Identifier	i
>884	IdentifierDeclType	int
>885	IdentifierDeclStatement	 
>886	IdentifierDecl	match_inliers
>887	Identifier	match_inliers
>888	IdentifierDeclType	std 
>889	ExpressionStatement	 
>890	CallExpression	printf ( \"  Found %d / %d inliers (%0.3f%%)\n\" , num_inliers , num_matches , 100.0 * num_inliers / num_matches )
>891	ArgumentList	\"  Found %d / %d inliers (%0.3f%%)\n\"
>892	Argument	100.0 * num_inliers / num_matches
>893	MultiplicativeExpression	100.0 * num_inliers / num_matches
>894	MultiplicativeExpression	num_inliers / num_matches
>895	Identifier	num_matches
>896	Identifier	num_inliers
>897	PrimaryExpression	100.0
>898	Argument	num_matches
>899	Identifier	num_matches
>900	Argument	num_inliers
>901	Identifier	num_inliers
>902	Argument	\"  Found %d / %d inliers (%0.3f%%)\n\"
>903	PrimaryExpression	\"  Found %d / %d inliers (%0.3f%%)\n\"
>904	Callee	printf
>905	Identifier	printf
>906	IdentifierDeclStatement	 
>907	IdentifierDecl	num_inliers = ( int ) inliers . size ( )
>908	AssignmentExpr	num_inliers = ( int ) inliers . size ( )
>909	CastExpression	( int ) inliers . size ( )
>910	CallExpression	inliers . size ( )
>911	ArgumentList	 
>912	Callee	inliers . size
>913	MemberAccess	inliers . size
>914	Identifier	size
>915	Identifier	inliers
>916	CastTarget	int
>917	Identifier	num_inliers
>918	Identifier	num_inliers
>919	IdentifierDeclType	int
>920	IfStatement	if ( ( int ) inliers . size ( ) == 0 )
>921	ReturnStatement	 
>922	Identifier	false
>923	Condition	 
>924	EqualityExpression	( int ) inliers . size ( ) == 0
>925	PrimaryExpression	0
>926	CastExpression	( int ) inliers . size ( )
>927	CallExpression	inliers . size ( )
>928	ArgumentList	 
>929	Callee	inliers . size
>930	MemberAccess	inliers . size
>931	Identifier	size
>932	Identifier	inliers
>933	CastTarget	int
>934	IfStatement	if ( ! m_optimize_for_fisheye )
>935	ElseStatement	else
>936	CompoundStatement	 
>937	ExpressionStatement	 
>938	AssignmentExpr	inliers = EstimateEMatrix ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , matches , 4 * \
>939	CallExpression	EstimateEMatrix ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , matches , 4 * m_fmatrix_rounds , \
>940	ArgumentList	m_image_data [ i1 ] . m_keys
>941	Argument	F
>942	Identifier	F
>943	Argument	E
>944	Identifier	E
>945	Argument	f2
>946	Identifier	f2
>947	Argument	f1
>948	Identifier	f1
>949	Argument	m_fmatrix_threshold * m_fmatrix_threshold
>950	MultiplicativeExpression	m_fmatrix_threshold * m_fmatrix_threshold
>951	Identifier	m_fmatrix_threshold
>952	Identifier	m_fmatrix_threshold
>953	Argument	4 * m_fmatrix_rounds
>954	MultiplicativeExpression	4 * m_fmatrix_rounds
>955	Identifier	m_fmatrix_rounds
>956	PrimaryExpression	4
>957	Argument	matches
>958	Identifier	matches
>959	Argument	m_image_data [ i2 ] . m_keys
>960	MemberAccess	m_image_data [ i2 ] . m_keys
>961	Identifier	m_keys
>962	ArrayIndexing	m_image_data [ i2 ]
>963	Identifier	i2
>964	Identifier	m_image_data
>965	Argument	m_image_data [ i1 ] . m_keys
>966	MemberAccess	m_image_data [ i1 ] . m_keys
>967	Identifier	m_keys
>968	ArrayIndexing	m_image_data [ i1 ]
>969	Identifier	i1
>970	Identifier	m_image_data
>971	Callee	EstimateEMatrix
>972	Identifier	EstimateEMatrix
>973	Identifier	inliers
>974	CompoundStatement	 
>975	ExpressionStatement	 
>976	AssignmentExpr	inliers = EstimateEMatrix ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , matches , 4 * \
>977	CallExpression	EstimateEMatrix ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , matches , 4 * m_fmatrix_rounds , \
>978	ArgumentList	m_image_data [ i1 ] . m_keys
>979	Argument	F
>980	Identifier	F
>981	Argument	E
>982	Identifier	E
>983	Argument	f2
>984	Identifier	f2
>985	Argument	f1
>986	Identifier	f1
>987	Argument	m_fmatrix_threshold * m_fmatrix_threshold
>988	MultiplicativeExpression	m_fmatrix_threshold * m_fmatrix_threshold
>989	Identifier	m_fmatrix_threshold
>990	Identifier	m_fmatrix_threshold
>991	Argument	4 * m_fmatrix_rounds
>992	MultiplicativeExpression	4 * m_fmatrix_rounds
>993	Identifier	m_fmatrix_rounds
>994	PrimaryExpression	4
>995	Argument	matches
>996	Identifier	matches
>997	Argument	m_image_data [ i2 ] . m_keys
>998	MemberAccess	m_image_data [ i2 ] . m_keys
>999	Identifier	m_keys
>1000	ArrayIndexing	m_image_data [ i2 ]
>1001	Identifier	i2
>1002	Identifier	m_image_data
>1003	Argument	m_image_data [ i1 ] . m_keys
>1004	MemberAccess	m_image_data [ i1 ] . m_keys
>1005	Identifier	m_keys
>1006	ArrayIndexing	m_image_data [ i1 ]
>1007	Identifier	i1
>1008	Identifier	m_image_data
>1009	Callee	EstimateEMatrix
>1010	Identifier	EstimateEMatrix
>1011	Identifier	inliers
>1012	Condition	 
>1013	UnaryOp	! m_optimize_for_fisheye
>1014	Identifier	m_optimize_for_fisheye
>1015	UnaryOperator	!
>1016	IdentifierDeclStatement	 
>1017	IdentifierDecl	inliers
>1018	Identifier	inliers
>1019	IdentifierDeclType	std 
>1020	IdentifierDeclStatement	 
>1021	IdentifierDecl	F [ 9 ]
>1022	PrimaryExpression	9
>1023	Identifier	F
>1024	IdentifierDeclType	double [ 9 ]
>1025	IdentifierDecl	E [ 9 ]
>1026	PrimaryExpression	9
>1027	Identifier	E
>1028	IdentifierDeclType	double [ 9 ]
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	f2 = m_image_data [ i2 ] . m_init_focal
>1031	AssignmentExpr	f2 = m_image_data [ i2 ] . m_init_focal
>1032	MemberAccess	m_image_data [ i2 ] . m_init_focal
>1033	Identifier	m_init_focal
>1034	ArrayIndexing	m_image_data [ i2 ]
>1035	Identifier	i2
>1036	Identifier	m_image_data
>1037	Identifier	f2
>1038	Identifier	f2
>1039	IdentifierDeclType	double
>1040	IdentifierDeclStatement	 
>1041	IdentifierDecl	f1 = m_image_data [ i1 ] . m_init_focal
>1042	AssignmentExpr	f1 = m_image_data [ i1 ] . m_init_focal
>1043	MemberAccess	m_image_data [ i1 ] . m_init_focal
>1044	Identifier	m_init_focal
>1045	ArrayIndexing	m_image_data [ i1 ]
>1046	Identifier	i1
>1047	Identifier	m_image_data
>1048	Identifier	f1
>1049	Identifier	f1
>1050	IdentifierDeclType	double
>1051	IdentifierDeclStatement	 
>1052	IdentifierDecl	num_matches = ( int ) matches . size ( )
>1053	AssignmentExpr	num_matches = ( int ) matches . size ( )
>1054	CastExpression	( int ) matches . size ( )
>1055	CallExpression	matches . size ( )
>1056	ArgumentList	 
>1057	Callee	matches . size
>1058	MemberAccess	matches . size
>1059	Identifier	size
>1060	Identifier	matches
>1061	CastTarget	int
>1062	Identifier	num_matches
>1063	Identifier	num_matches
>1064	IdentifierDeclType	int
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	& matches = m_matches . GetMatchList ( list_idx )
>1067	AssignmentExpr	& matches = m_matches . GetMatchList ( list_idx )
>1068	CallExpression	m_matches . GetMatchList ( list_idx )
>1069	ArgumentList	list_idx
>1070	Argument	list_idx
>1071	Identifier	list_idx
>1072	Callee	m_matches . GetMatchList
>1073	MemberAccess	m_matches . GetMatchList
>1074	Identifier	GetMatchList
>1075	Identifier	m_matches
>1076	Identifier	matches
>1077	Identifier	matches
>1078	IdentifierDeclType	std 
>1079	IfStatement	if ( i1 < i2 )
>1080	ElseStatement	else
>1081	ExpressionStatement	 
>1082	AssignmentExpr	list_idx = GetMatchIndex ( i2 , i1 )
>1083	CallExpression	GetMatchIndex ( i2 , i1 )
>1084	ArgumentList	i2
>1085	Argument	i1
>1086	Identifier	i1
>1087	Argument	i2
>1088	Identifier	i2
>1089	Callee	GetMatchIndex
>1090	Identifier	GetMatchIndex
>1091	Identifier	list_idx
>1092	ExpressionStatement	 
>1093	AssignmentExpr	list_idx = GetMatchIndex ( i1 , i2 )
>1094	CallExpression	GetMatchIndex ( i1 , i2 )
>1095	ArgumentList	i1
>1096	Argument	i2
>1097	Identifier	i2
>1098	Argument	i1
>1099	Identifier	i1
>1100	Callee	GetMatchIndex
>1101	Identifier	GetMatchIndex
>1102	Identifier	list_idx
>1103	Condition	 
>1104	RelationalExpression	i1 < i2
>1105	Identifier	i2
>1106	Identifier	i1
>1107	IdentifierDeclStatement	 
>1108	IdentifierDecl	list_idx
>1109	Identifier	list_idx
>1110	IdentifierDeclType	MatchIndex
>1225	FunctionDef	BundlerApp 
>1226	ParameterList	int i1 , int i2 , camera_params_t & camera1 , camera_params_t & camera2
>1227	Parameter	 
>1228	Identifier	camera2
>1229	ParameterType	camera_params_t &
>1230	Parameter	 
>1231	Identifier	camera1
>1232	ParameterType	camera_params_t &
>1233	Parameter	 
>1234	Identifier	i2
>1235	ParameterType	int
>1236	Parameter	 
>1237	Identifier	i1
>1238	ParameterType	int
>1239	ReturnType	bool
>1240	CompoundStatement	 
>1241	ReturnStatement	 
>1242	Identifier	true
>1243	IfStatement	if ( ! initialized )
>1244	CompoundStatement	 
>1245	ExpressionStatement	 
>1246	CallExpression	matrix_scale ( 3 , 1 , camera2 . t , - 1.0 , camera2 . t )
>1247	ArgumentList	3
>1248	Argument	camera2 . t
>1249	MemberAccess	camera2 . t
>1250	Identifier	t
>1251	Identifier	camera2
>1252	Argument	- 1.0
>1253	UnaryOp	- 1.0
>1254	PrimaryExpression	1.0
>1255	UnaryOperator	-
>1256	Argument	camera2 . t
>1257	MemberAccess	camera2 . t
>1258	Identifier	t
>1259	Identifier	camera2
>1260	Argument	1
>1261	PrimaryExpression	1
>1262	Argument	3
>1263	PrimaryExpression	3
>1264	Callee	matrix_scale
>1265	Identifier	matrix_scale
>1266	ExpressionStatement	 
>1267	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R0 , t0 , camera2 . t )
>1268	ArgumentList	3
>1269	Argument	camera2 . t
>1270	MemberAccess	camera2 . t
>1271	Identifier	t
>1272	Identifier	camera2
>1273	Argument	t0
>1274	Identifier	t0
>1275	Argument	R0
>1276	Identifier	R0
>1277	Argument	1
>1278	PrimaryExpression	1
>1279	Argument	3
>1280	PrimaryExpression	3
>1281	Argument	3
>1282	PrimaryExpression	3
>1283	Argument	3
>1284	PrimaryExpression	3
>1285	Callee	matrix_transpose_product
>1286	Identifier	matrix_transpose_product
>1287	ExpressionStatement	 
>1288	CallExpression	memcpy ( camera2 . R , R0 , sizeof ( double ) * 9 )
>1289	ArgumentList	camera2 . R
>1290	Argument	sizeof ( double ) * 9
>1291	MultiplicativeExpression	sizeof ( double ) * 9
>1292	PrimaryExpression	9
>1293	SizeofExpr	sizeof ( double )
>1294	SizeofOperand	double
>1295	Sizeof	sizeof
>1296	Argument	R0
>1297	Identifier	R0
>1298	Argument	camera2 . R
>1299	MemberAccess	camera2 . R
>1300	Identifier	R
>1301	Identifier	camera2
>1302	Callee	memcpy
>1303	Identifier	memcpy
>1304	Condition	 
>1305	UnaryOp	! initialized
>1306	Identifier	initialized
>1307	UnaryOperator	!
>1308	IdentifierDeclStatement	 
>1309	IdentifierDecl	initialized = false
>1310	AssignmentExpr	initialized = false
>1311	Identifier	false
>1312	Identifier	false
>1313	Identifier	initialized
>1314	IdentifierDeclType	bool
>1315	ExpressionStatement	 
>1316	CallExpression	printf ( \"  Found %d / %d inliers (%0.3f%%)\n\" , num_inliers , num_matches , 100.0 * num_inliers / num_matches )
>1317	ArgumentList	\"  Found %d / %d inliers (%0.3f%%)\n\"
>1318	Argument	100.0 * num_inliers / num_matches
>1319	MultiplicativeExpression	100.0 * num_inliers / num_matches
>1320	MultiplicativeExpression	num_inliers / num_matches
>1321	Identifier	num_matches
>1322	Identifier	num_inliers
>1323	PrimaryExpression	100.0
>1324	Argument	num_matches
>1325	Identifier	num_matches
>1326	Argument	num_inliers
>1327	Identifier	num_inliers
>1328	Argument	\"  Found %d / %d inliers (%0.3f%%)\n\"
>1329	PrimaryExpression	\"  Found %d / %d inliers (%0.3f%%)\n\"
>1330	Callee	printf
>1331	Identifier	printf
>1332	IfStatement	if ( num_inliers == 0 )
>1333	ReturnStatement	 
>1334	Identifier	false
>1335	Condition	 
>1336	EqualityExpression	num_inliers == 0
>1337	PrimaryExpression	0
>1338	Identifier	num_inliers
>1339	IfStatement	if ( ! m_optimize_for_fisheye )
>1340	ElseStatement	else
>1341	CompoundStatement	 
>1342	ExpressionStatement	 
>1343	AssignmentExpr	num_inliers = EstimatePose5Point ( k1 , k2 , matches , 1024 , 0.25 * m_fmatrix_threshold , K1 , K2 , \
>1344	CallExpression	EstimatePose5Point ( k1 , k2 , matches , 1024 , 0.25 * m_fmatrix_threshold , K1 , K2 , R0 , t0 )
>1345	ArgumentList	k1
>1346	Argument	t0
>1347	Identifier	t0
>1348	Argument	R0
>1349	Identifier	R0
>1350	Argument	K2
>1351	Identifier	K2
>1352	Argument	K1
>1353	Identifier	K1
>1354	Argument	0.25 * m_fmatrix_threshold
>1355	MultiplicativeExpression	0.25 * m_fmatrix_threshold
>1356	Identifier	m_fmatrix_threshold
>1357	PrimaryExpression	0.25
>1358	Argument	1024
>1359	PrimaryExpression	1024
>1360	Argument	matches
>1361	Identifier	matches
>1362	Argument	k2
>1363	Identifier	k2
>1364	Argument	k1
>1365	Identifier	k1
>1366	Callee	EstimatePose5Point
>1367	Identifier	EstimatePose5Point
>1368	Identifier	num_inliers
>1369	IdentifierDeclStatement	 
>1370	IdentifierDecl	k2 = m_image_data [ i2 ] . UndistortKeysCopy ( )
>1371	AssignmentExpr	k2 = m_image_data [ i2 ] . UndistortKeysCopy ( )
>1372	CallExpression	m_image_data [ i2 ] . UndistortKeysCopy ( )
>1373	ArgumentList	 
>1374	Callee	m_image_data [ i2 ] . UndistortKeysCopy
>1375	MemberAccess	m_image_data [ i2 ] . UndistortKeysCopy
>1376	Identifier	UndistortKeysCopy
>1377	ArrayIndexing	m_image_data [ i2 ]
>1378	Identifier	i2
>1379	Identifier	m_image_data
>1380	Identifier	k2
>1381	Identifier	k2
>1382	IdentifierDeclType	std 
>1383	IdentifierDeclStatement	 
>1384	IdentifierDecl	k1 = m_image_data [ i1 ] . UndistortKeysCopy ( )
>1385	AssignmentExpr	k1 = m_image_data [ i1 ] . UndistortKeysCopy ( )
>1386	CallExpression	m_image_data [ i1 ] . UndistortKeysCopy ( )
>1387	ArgumentList	 
>1388	Callee	m_image_data [ i1 ] . UndistortKeysCopy
>1389	MemberAccess	m_image_data [ i1 ] . UndistortKeysCopy
>1390	Identifier	UndistortKeysCopy
>1391	ArrayIndexing	m_image_data [ i1 ]
>1392	Identifier	i1
>1393	Identifier	m_image_data
>1394	Identifier	k1
>1395	Identifier	k1
>1396	IdentifierDeclType	std 
>1397	CompoundStatement	 
>1398	ExpressionStatement	 
>1399	CallExpression	matrix_print ( 1 , 3 , t0 )
>1400	ArgumentList	1
>1401	Argument	t0
>1402	Identifier	t0
>1403	Argument	3
>1404	PrimaryExpression	3
>1405	Argument	1
>1406	PrimaryExpression	1
>1407	Callee	matrix_print
>1408	Identifier	matrix_print
>1409	ExpressionStatement	 
>1410	CallExpression	matrix_print ( 3 , 3 , R0 )
>1411	ArgumentList	3
>1412	Argument	R0
>1413	Identifier	R0
>1414	Argument	3
>1415	PrimaryExpression	3
>1416	Argument	3
>1417	PrimaryExpression	3
>1418	Callee	matrix_print
>1419	Identifier	matrix_print
>1420	ExpressionStatement	 
>1421	CallExpression	printf ( \"R,t\n\" )
>1422	ArgumentList	\"R,t\n\"
>1423	Argument	\"R,t\n\"
>1424	PrimaryExpression	\"R,t\n\"
>1425	Callee	printf
>1426	Identifier	printf
>1427	ExpressionStatement	 
>1428	AssignmentExpr	num_inliers = EstimatePose5Point ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , matches , \
>1429	CallExpression	EstimatePose5Point ( m_image_data [ i1 ] . m_keys , m_image_data [ i2 ] . m_keys , matches , 512 , 0.25 * m_fmatrix_\
>1430	ArgumentList	m_image_data [ i1 ] . m_keys
>1431	Argument	t0
>1432	Identifier	t0
>1433	Argument	R0
>1434	Identifier	R0
>1435	Argument	K2
>1436	Identifier	K2
>1437	Argument	K1
>1438	Identifier	K1
>1439	Argument	0.25 * m_fmatrix_threshold
>1440	MultiplicativeExpression	0.25 * m_fmatrix_threshold
>1441	Identifier	m_fmatrix_threshold
>1442	PrimaryExpression	0.25
>1443	Argument	512
>1444	PrimaryExpression	512
>1445	Argument	matches
>1446	Identifier	matches
>1447	Argument	m_image_data [ i2 ] . m_keys
>1448	MemberAccess	m_image_data [ i2 ] . m_keys
>1449	Identifier	m_keys
>1450	ArrayIndexing	m_image_data [ i2 ]
>1451	Identifier	i2
>1452	Identifier	m_image_data
>1453	Argument	m_image_data [ i1 ] . m_keys
>1454	MemberAccess	m_image_data [ i1 ] . m_keys
>1455	Identifier	m_keys
>1456	ArrayIndexing	m_image_data [ i1 ]
>1457	Identifier	i1
>1458	Identifier	m_image_data
>1459	Callee	EstimatePose5Point
>1460	Identifier	EstimatePose5Point
>1461	Identifier	num_inliers
>1462	Condition	 
>1463	UnaryOp	! m_optimize_for_fisheye
>1464	Identifier	m_optimize_for_fisheye
>1465	UnaryOperator	!
>1466	IdentifierDeclStatement	 
>1467	IdentifierDecl	num_inliers = 0
>1468	AssignmentExpr	num_inliers = 0
>1469	PrimaryExpression	0
>1470	Identifier	num_inliers
>1471	Identifier	num_inliers
>1472	IdentifierDeclType	int
>1473	IdentifierDeclStatement	 
>1474	IdentifierDecl	t0 [ 3 ]
>1475	PrimaryExpression	3
>1476	Identifier	t0
>1477	IdentifierDeclType	double [ 3 ]
>1478	IdentifierDecl	R0 [ 9 ]
>1479	PrimaryExpression	9
>1480	Identifier	R0
>1481	IdentifierDeclType	double [ 9 ]
>1482	ExpressionStatement	 
>1483	CallExpression	GetIntrinsics ( camera2 , K2 )
>1484	ArgumentList	camera2
>1485	Argument	K2
>1486	Identifier	K2
>1487	Argument	camera2
>1488	Identifier	camera2
>1489	Callee	GetIntrinsics
>1490	Identifier	GetIntrinsics
>1491	ExpressionStatement	 
>1492	CallExpression	GetIntrinsics ( camera1 , K1 )
>1493	ArgumentList	camera1
>1494	Argument	K1
>1495	Identifier	K1
>1496	Argument	camera1
>1497	Identifier	camera1
>1498	Callee	GetIntrinsics
>1499	Identifier	GetIntrinsics
>1500	IdentifierDeclStatement	 
>1501	IdentifierDecl	K2 [ 9 ]
>1502	PrimaryExpression	9
>1503	Identifier	K2
>1504	IdentifierDeclType	double [ 9 ]
>1505	IdentifierDecl	K1 [ 9 ]
>1506	PrimaryExpression	9
>1507	Identifier	K1
>1508	IdentifierDeclType	double [ 9 ]
>1509	IdentifierDeclStatement	 
>1510	IdentifierDecl	num_matches = ( int ) matches . size ( )
>1511	AssignmentExpr	num_matches = ( int ) matches . size ( )
>1512	CastExpression	( int ) matches . size ( )
>1513	CallExpression	matches . size ( )
>1514	ArgumentList	 
>1515	Callee	matches . size
>1516	MemberAccess	matches . size
>1517	Identifier	size
>1518	Identifier	matches
>1519	CastTarget	int
>1520	Identifier	num_matches
>1521	Identifier	num_matches
>1522	IdentifierDeclType	int
>1523	IdentifierDeclStatement	 
>1524	IdentifierDecl	& matches = m_matches . GetMatchList ( list_idx )
>1525	AssignmentExpr	& matches = m_matches . GetMatchList ( list_idx )
>1526	CallExpression	m_matches . GetMatchList ( list_idx )
>1527	ArgumentList	list_idx
>1528	Argument	list_idx
>1529	Identifier	list_idx
>1530	Callee	m_matches . GetMatchList
>1531	MemberAccess	m_matches . GetMatchList
>1532	Identifier	GetMatchList
>1533	Identifier	m_matches
>1534	Identifier	matches
>1535	Identifier	matches
>1536	IdentifierDeclType	std 
>1537	IfStatement	if ( i1 < i2 )
>1538	ElseStatement	else
>1539	ExpressionStatement	 
>1540	AssignmentExpr	list_idx = GetMatchIndex ( i2 , i1 )
>1541	CallExpression	GetMatchIndex ( i2 , i1 )
>1542	ArgumentList	i2
>1543	Argument	i1
>1544	Identifier	i1
>1545	Argument	i2
>1546	Identifier	i2
>1547	Callee	GetMatchIndex
>1548	Identifier	GetMatchIndex
>1549	Identifier	list_idx
>1550	ExpressionStatement	 
>1551	AssignmentExpr	list_idx = GetMatchIndex ( i1 , i2 )
>1552	CallExpression	GetMatchIndex ( i1 , i2 )
>1553	ArgumentList	i1
>1554	Argument	i2
>1555	Identifier	i2
>1556	Argument	i1
>1557	Identifier	i1
>1558	Callee	GetMatchIndex
>1559	Identifier	GetMatchIndex
>1560	Identifier	list_idx
>1561	Condition	 
>1562	RelationalExpression	i1 < i2
>1563	Identifier	i2
>1564	Identifier	i1
>1565	IdentifierDeclStatement	 
>1566	IdentifierDecl	list_idx
>1567	Identifier	list_idx
>1568	IdentifierDeclType	MatchIndex
<3=18,17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<18=1107,1079,1065,1051,1040,1029,1020,1016,934,920,906,889,885,855,841,836,804,775,768,210,21,19
<19=20
<21=206,22
<22=195,157,119,110,90,82,65,44,23
<23=24
<24=42,25
<25=40,38,34,30,26
<26=27
<27=29,28
<30=31
<31=33,32
<34=35
<35=37,36
<38=39
<40=41
<42=43
<44=45
<45=63,46
<46=61,59,57,55,53,51,47
<47=48
<48=50,49
<51=52
<53=54
<55=56
<57=58
<59=60
<61=62
<63=64
<65=66
<66=80,67
<67=76,74,68
<68=69
<69=71,70
<71=73,72
<74=75
<76=77
<77=79,78
<80=81
<82=86,83
<83=84
<84=85
<86=87
<87=89,88
<90=91
<91=109,108,92
<92=107,93
<93=105,94
<94=103,101,99,97,95
<95=96
<97=98
<99=100
<101=102
<103=104
<105=106
<110=115,111
<111=114,113,112
<115=118,117,116
<119=120
<120=156,155,121
<121=154,122
<122=152,123
<123=138,124
<124=125
<125=127,126
<127=129,128
<129=133,130
<130=132,131
<133=135,134
<135=137,136
<138=139
<139=141,140
<141=143,142
<143=147,144
<144=146,145
<147=149,148
<149=151,150
<152=153
<157=158
<158=194,193,159
<159=192,160
<160=190,161
<161=176,162
<162=163
<163=165,164
<165=167,166
<167=171,168
<168=170,169
<171=173,172
<173=175,174
<176=177
<177=179,178
<179=181,180
<181=185,182
<182=184,183
<185=187,186
<187=189,188
<190=191
<195=196
<196=205,204,197
<197=203,198
<198=202,199
<199=201,200
<206=207
<207=209,208
<210=757,211
<211=746,739,212
<212=726,213
<213=715,681,647,630,602,214
<214=600,215
<215=599,598,597,596,595,594,585,570,555,546,533,520,507,321,317,310,299,275,258,237,216
<216=217
<217=235,218
<218=233,231,227,223,219
<219=220
<220=222,221
<223=224
<224=226,225
<227=228
<228=230,229
<231=232
<233=234
<235=236
<237=238
<238=256,239
<239=254,252,250,248,246,244,240
<240=241
<241=243,242
<244=245
<246=247
<248=249
<250=251
<252=253
<254=255
<256=257
<258=259
<259=273,260
<260=269,267,261
<261=262
<262=264,263
<264=266,265
<267=268
<269=270
<270=272,271
<273=274
<275=295,286,276
<276=277
<277=282,278
<278=279
<279=281,280
<282=283
<283=285,284
<286=291,287
<287=288
<288=290,289
<291=292
<292=294,293
<295=296
<296=298,297
<299=300
<300=308,301
<301=306,304,302
<302=303
<304=305
<306=307
<308=309
<310=314,311
<311=313,312
<314=316,315
<317=318
<318=320,319
<321=499,495,492,322
<322=483,468,453,433,413,397,381,365,349,336,323
<323=328,324
<324=325
<325=327,326
<328=329
<329=333,330
<330=332,331
<333=335,334
<336=341,337
<337=338
<338=340,339
<341=342
<342=346,343
<343=345,344
<346=348,347
<349=350
<350=364,363,351
<351=362,352
<352=360,353
<353=358,356,354
<354=355
<356=357
<358=359
<360=361
<365=366
<366=380,379,367
<367=378,368
<368=376,369
<369=374,372,370
<370=371
<372=373
<374=375
<376=377
<381=382
<382=396,395,383
<383=394,384
<384=392,385
<385=390,388,386
<386=387
<388=389
<390=391
<392=393
<397=398
<398=412,411,399
<399=410,400
<400=408,401
<401=406,404,402
<402=403
<404=405
<406=407
<408=409
<413=414
<414=432,431,415
<415=430,416
<416=428,417
<417=424,420,418
<418=419
<420=421
<421=423,422
<424=425
<425=427,426
<428=429
<433=434
<434=452,451,435
<435=450,436
<436=448,437
<437=444,440,438
<438=439
<440=441
<441=443,442
<444=445
<445=447,446
<448=449
<453=454
<454=467,466,455
<455=465,456
<456=460,457
<457=459,458
<460=462,461
<462=464,463
<468=469
<469=482,481,470
<470=480,471
<471=475,472
<472=474,473
<475=477,476
<477=479,478
<483=484
<484=491,490,485
<485=489,486
<486=488,487
<492=494,493
<495=496
<496=498,497
<499=500
<500=501
<501=506,505,502
<502=504,503
<507=514,508
<508=513,512,509
<509=511,510
<514=519,518,515
<515=517,516
<520=521
<521=531,522
<522=529,527,525,523
<523=524
<525=526
<527=528
<529=530
<531=532
<533=534
<534=544,535
<535=542,540,538,536
<536=537
<538=539
<540=541
<542=543
<544=545
<546=551,547
<547=550,549,548
<551=554,553,552
<555=556
<556=568,557
<557=566,564,562,560,558
<558=559
<560=561
<562=563
<564=565
<566=567
<568=569
<570=571
<571=583,572
<572=581,579,577,575,573
<573=574
<575=576
<577=578
<579=580
<581=582
<583=584
<585=590,586
<586=589,588,587
<590=593,592,591
<600=601
<602=603
<603=629,628,604
<604=627,605
<605=625,606
<606=623,621,619,617,615,613,611,609,607
<607=608
<609=610
<611=612
<613=614
<615=616
<617=618
<619=620
<621=622
<623=624
<625=626
<630=643,639,635,631
<631=634,633,632
<635=638,637,636
<639=642,641,640
<643=646,645,644
<647=648
<648=680,679,649
<649=678,650
<650=676,651
<651=664,652
<652=653
<653=655,654
<655=659,656
<656=658,657
<659=661,660
<661=663,662
<664=665
<665=667,666
<667=671,668
<668=670,669
<671=673,672
<673=675,674
<676=677
<681=682
<682=714,713,683
<683=712,684
<684=710,685
<685=698,686
<686=687
<687=689,688
<689=693,690
<690=692,691
<693=695,694
<695=697,696
<698=699
<699=701,700
<701=705,702
<702=704,703
<705=707,706
<707=709,708
<710=711
<715=716
<716=725,724,717
<717=723,718
<718=722,719
<719=721,720
<726=727
<727=729,728
<729=731,730
<731=738,732
<732=734,733
<734=735
<735=737,736
<739=740
<740=744,741
<741=742
<742=743
<744=745
<746=747
<747=755,748
<748=753,751,749
<749=750
<751=752
<753=754
<755=756
<757=758
<758=760,759
<760=767,761
<761=763,762
<763=764
<764=766,765
<768=769
<769=774,773,770
<770=772,771
<775=776
<776=802,777
<777=800,791,789,778
<778=779
<779=788,780
<780=782,781
<782=784,783
<784=785
<785=787,786
<789=790
<791=792
<792=799,793
<793=795,794
<795=796
<796=798,797
<800=801
<802=803
<804=805
<805=835,834,806
<806=833,807
<807=831,808
<808=825,819,817,815,813,811,809
<809=810
<811=812
<813=814
<815=816
<817=818
<819=820
<820=822,821
<822=824,823
<825=826
<826=828,827
<828=830,829
<831=832
<836=837
<837=840,839,838
<841=842
<842=854,853,843
<843=852,844
<844=851,845
<845=847,846
<847=848
<848=850,849
<855=877,873,870,856
<856=857
<857=858
<858=866,859
<859=860
<860=861
<861=865,862
<862=864,863
<866=867
<867=869,868
<870=872,871
<873=874
<874=876,875
<877=878
<878=879
<879=884,883,880
<880=882,881
<885=886
<886=888,887
<889=890
<890=904,891
<891=902,900,898,892
<892=893
<893=897,894
<894=896,895
<898=899
<900=901
<902=903
<904=905
<906=907
<907=919,918,908
<908=917,909
<909=916,910
<910=912,911
<912=913
<913=915,914
<920=923,921
<921=922
<923=924
<924=926,925
<926=933,927
<927=929,928
<929=930
<930=932,931
<934=1012,974,935
<935=936
<936=937
<937=938
<938=973,939
<939=971,940
<940=965,959,957,953,949,947,945,943,941
<941=942
<943=944
<945=946
<947=948
<949=950
<950=952,951
<953=954
<954=956,955
<957=958
<959=960
<960=962,961
<962=964,963
<965=966
<966=968,967
<968=970,969
<971=972
<974=975
<975=976
<976=1011,977
<977=1009,978
<978=1003,997,995,991,987,985,983,981,979
<979=980
<981=982
<983=984
<985=986
<987=988
<988=990,989
<991=992
<992=994,993
<995=996
<997=998
<998=1000,999
<1000=1002,1001
<1003=1004
<1004=1006,1005
<1006=1008,1007
<1009=1010
<1012=1013
<1013=1015,1014
<1016=1017
<1017=1019,1018
<1020=1025,1021
<1021=1024,1023,1022
<1025=1028,1027,1026
<1029=1030
<1030=1039,1038,1031
<1031=1037,1032
<1032=1034,1033
<1034=1036,1035
<1040=1041
<1041=1050,1049,1042
<1042=1048,1043
<1043=1045,1044
<1045=1047,1046
<1051=1052
<1052=1064,1063,1053
<1053=1062,1054
<1054=1061,1055
<1055=1057,1056
<1057=1058
<1058=1060,1059
<1065=1066
<1066=1078,1077,1067
<1067=1076,1068
<1068=1072,1069
<1069=1070
<1070=1071
<1072=1073
<1073=1075,1074
<1079=1103,1092,1080
<1080=1081
<1081=1082
<1082=1091,1083
<1083=1089,1084
<1084=1087,1085
<1085=1086
<1087=1088
<1089=1090
<1092=1093
<1093=1102,1094
<1094=1100,1095
<1095=1098,1096
<1096=1097
<1098=1099
<1100=1101
<1103=1104
<1104=1106,1105
<1107=1108
<1108=1110,1109
<1225=1240,1239,1226
<1226=1236,1233,1230,1227
<1227=1229,1228
<1230=1232,1231
<1233=1235,1234
<1236=1238,1237
<1240=1565,1537,1523,1509,1500,1491,1482,1473,1466,1339,1332,1315,1308,1243,1241
<1241=1242
<1243=1304,1244
<1244=1287,1266,1245
<1245=1246
<1246=1264,1247
<1247=1262,1260,1256,1252,1248
<1248=1249
<1249=1251,1250
<1252=1253
<1253=1255,1254
<1256=1257
<1257=1259,1258
<1260=1261
<1262=1263
<1264=1265
<1266=1267
<1267=1285,1268
<1268=1283,1281,1279,1277,1275,1273,1269
<1269=1270
<1270=1272,1271
<1273=1274
<1275=1276
<1277=1278
<1279=1280
<1281=1282
<1283=1284
<1285=1286
<1287=1288
<1288=1302,1289
<1289=1298,1296,1290
<1290=1291
<1291=1293,1292
<1293=1295,1294
<1296=1297
<1298=1299
<1299=1301,1300
<1302=1303
<1304=1305
<1305=1307,1306
<1308=1309
<1309=1314,1313,1310
<1310=1312,1311
<1315=1316
<1316=1330,1317
<1317=1328,1326,1324,1318
<1318=1319
<1319=1323,1320
<1320=1322,1321
<1324=1325
<1326=1327
<1328=1329
<1330=1331
<1332=1335,1333
<1333=1334
<1335=1336
<1336=1338,1337
<1339=1462,1397,1340
<1340=1341
<1341=1383,1369,1342
<1342=1343
<1343=1368,1344
<1344=1366,1345
<1345=1364,1362,1360,1358,1354,1352,1350,1348,1346
<1346=1347
<1348=1349
<1350=1351
<1352=1353
<1354=1355
<1355=1357,1356
<1358=1359
<1360=1361
<1362=1363
<1364=1365
<1366=1367
<1369=1370
<1370=1382,1381,1371
<1371=1380,1372
<1372=1374,1373
<1374=1375
<1375=1377,1376
<1377=1379,1378
<1383=1384
<1384=1396,1395,1385
<1385=1394,1386
<1386=1388,1387
<1388=1389
<1389=1391,1390
<1391=1393,1392
<1397=1427,1420,1409,1398
<1398=1399
<1399=1407,1400
<1400=1405,1403,1401
<1401=1402
<1403=1404
<1405=1406
<1407=1408
<1409=1410
<1410=1418,1411
<1411=1416,1414,1412
<1412=1413
<1414=1415
<1416=1417
<1418=1419
<1420=1421
<1421=1425,1422
<1422=1423
<1423=1424
<1425=1426
<1427=1428
<1428=1461,1429
<1429=1459,1430
<1430=1453,1447,1445,1443,1439,1437,1435,1433,1431
<1431=1432
<1433=1434
<1435=1436
<1437=1438
<1439=1440
<1440=1442,1441
<1443=1444
<1445=1446
<1447=1448
<1448=1450,1449
<1450=1452,1451
<1453=1454
<1454=1456,1455
<1456=1458,1457
<1459=1460
<1462=1463
<1463=1465,1464
<1466=1467
<1467=1472,1471,1468
<1468=1470,1469
<1473=1478,1474
<1474=1477,1476,1475
<1478=1481,1480,1479
<1482=1483
<1483=1489,1484
<1484=1487,1485
<1485=1486
<1487=1488
<1489=1490
<1491=1492
<1492=1498,1493
<1493=1496,1494
<1494=1495
<1496=1497
<1498=1499
<1500=1505,1501
<1501=1504,1503,1502
<1505=1508,1507,1506
<1509=1510
<1510=1522,1521,1511
<1511=1520,1512
<1512=1519,1513
<1513=1515,1514
<1515=1516
<1516=1518,1517
<1523=1524
<1524=1536,1535,1525
<1525=1534,1526
<1526=1530,1527
<1527=1528
<1528=1529
<1530=1531
<1531=1533,1532
<1537=1561,1550,1538
<1538=1539
<1539=1540
<1540=1549,1541
<1541=1547,1542
<1542=1545,1543
<1543=1544
<1545=1546
<1547=1548
<1550=1551
<1551=1560,1552
<1552=1558,1553
<1553=1556,1554
<1554=1555
<1556=1557
<1558=1559
<1561=1562
<1562=1564,1563
<1565=1566
<1566=1568,1567
