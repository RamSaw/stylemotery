>5	FunctionDef	LocationHandlerWrap 
>6	ParameterList	v8 
>7	Parameter	 
>8	Identifier	target
>9	ParameterType	v8 
>10	ReturnType	void
>11	CompoundStatement	 
>12	ExpressionStatement	 
>13	CallExpression	target -> Set ( symbol_LocationHandler , constructor -> GetFunction ( ) )
>14	ArgumentList	symbol_LocationHandler
>15	Argument	constructor -> GetFunction ( )
>16	CallExpression	constructor -> GetFunction ( )
>17	ArgumentList	 
>18	Callee	constructor -> GetFunction
>19	PtrMemberAccess	constructor -> GetFunction
>20	Identifier	GetFunction
>21	Identifier	constructor
>22	Argument	symbol_LocationHandler
>23	Identifier	symbol_LocationHandler
>24	Callee	target -> Set
>25	PtrMemberAccess	target -> Set
>26	Identifier	Set
>27	Identifier	target
>28	ExpressionStatement	 
>29	CallExpression	node 
>30	ArgumentList	constructor
>31	Argument	ignoreErrors
>32	Identifier	ignoreErrors
>33	Argument	\"ignoreErrors\"
>34	PrimaryExpression	\"ignoreErrors\"
>35	Argument	constructor
>36	Identifier	constructor
>37	Callee	node 
>38	Identifier	node 
>39	ExpressionStatement	 
>40	CallExpression	node 
>41	ArgumentList	constructor
>42	Argument	clear
>43	Identifier	clear
>44	Argument	\"clear\"
>45	PrimaryExpression	\"clear\"
>46	Argument	constructor
>47	Identifier	constructor
>48	Callee	node 
>49	Identifier	node 
>50	ExpressionStatement	 
>51	CallExpression	constructor -> SetClassName ( symbol_LocationHandler )
>52	ArgumentList	symbol_LocationHandler
>53	Argument	symbol_LocationHandler
>54	Identifier	symbol_LocationHandler
>55	Callee	constructor -> SetClassName
>56	PtrMemberAccess	constructor -> SetClassName
>57	Identifier	SetClassName
>58	Identifier	constructor
>59	ExpressionStatement	 
>60	CallExpression	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount ( 1 )
>61	ArgumentList	1
>62	Argument	1
>63	PrimaryExpression	1
>64	Callee	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount
>65	PtrMemberAccess	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount
>66	Identifier	SetInternalFieldCount
>67	CallExpression	constructor -> InstanceTemplate ( )
>68	ArgumentList	 
>69	Callee	constructor -> InstanceTemplate
>70	PtrMemberAccess	constructor -> InstanceTemplate
>71	Identifier	InstanceTemplate
>72	Identifier	constructor
>73	ExpressionStatement	 
>74	CallExpression	New ( v8 
>75	ArgumentList	v8 
>76	Argument	v8 
>77	CallExpression	v8 
>78	ArgumentList	LocationHandlerWrap 
>79	Argument	LocationHandlerWrap 
>80	Identifier	LocationHandlerWrap 
>81	Callee	v8 
>82	Identifier	v8 
>83	Callee	New
>84	Identifier	New
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	IdentifierDeclStatement	 
>97	IdentifierDecl	scope
>98	Identifier	scope
>99	IdentifierDeclType	v8 
>114	FunctionDef	LocationHandlerWrap 
>115	ParameterList	const v8 
>116	Parameter	 
>117	Identifier	args
>118	ParameterType	const v8 
>119	ReturnType	v8 
>120	CompoundStatement	 
>121	BlockStarter	 
>122	CompoundStatement	 
>123	ReturnStatement	return ThrowException ( v8 
>124	CallExpression	ThrowException ( v8 
>125	ArgumentList	v8 
>126	Argument	v8 
>127	CallExpression	v8 
>128	ArgumentList	v8 
>129	Argument	v8 
>130	CallExpression	v8 
>131	ArgumentList	ex . what ( )
>132	Argument	ex . what ( )
>133	CallExpression	ex . what ( )
>134	ArgumentList	 
>135	Callee	ex . what
>136	MemberAccess	ex . what
>137	Identifier	what
>138	Identifier	ex
>139	Callee	v8 
>140	Identifier	v8 
>141	Callee	v8 
>142	Identifier	v8 
>143	Callee	ThrowException
>144	Identifier	ThrowException
>145	Identifier	ex
>146	BlockStarter	 
>147	CompoundStatement	 
>148	ReturnStatement	return args . This ( ) ;
>149	CallExpression	args . This ( )
>150	ArgumentList	 
>151	Callee	args . This
>152	MemberAccess	args . This
>153	Identifier	This
>154	Identifier	args
>155	ExpressionStatement	location_handler_wrap -> Wrap ( args . This ( ) )
>156	CallExpression	location_handler_wrap -> Wrap ( args . This ( ) )
>157	ArgumentList	args . This ( )
>158	Argument	args . This ( )
>159	CallExpression	args . This ( )
>160	ArgumentList	 
>161	Callee	args . This
>162	MemberAccess	args . This
>163	Identifier	This
>164	Identifier	args
>165	Callee	location_handler_wrap -> Wrap
>166	PtrMemberAccess	location_handler_wrap -> Wrap
>167	Identifier	Wrap
>168	Identifier	location_handler_wrap
>169	IfStatement	if ( args . Length ( ) == 0 )
>170	ElseStatement	else
>171	CompoundStatement	 
>172	ExpressionStatement	location_handler_wrap = new LocationHandlerWrap ( * index_map_type )
>173	AssignmentExpr	location_handler_wrap = new LocationHandlerWrap ( * index_map_type )
>174	UnaryOp	* index_map_type
>175	Identifier	index_map_type
>176	UnaryOperator	*
>177	Identifier	location_handler_wrap
>178	ExpressionStatement	 
>179	CompoundStatement	 
>180	Statement	]
>181	Statement	0
>182	Statement	[
>183	Statement	args
>184	Statement	index_map_type
>185	Statement	Utf8Value
>186	Statement	 
>187	Statement	String
>188	Statement	 
>189	Statement	v8
>190	IfStatement	if ( ! args [ 0 ] -> IsString ( ) )
>191	CompoundStatement	 
>192	ReturnStatement	return ThrowException ( v8 
>193	CallExpression	ThrowException ( v8 
>194	ArgumentList	v8 
>195	Argument	v8 
>196	CallExpression	v8 
>197	ArgumentList	v8 
>198	Argument	v8 
>199	CallExpression	v8 
>200	ArgumentList	\"please provide a node cache type as string when creating a LocationHandler\"
>201	Argument	\"please provide a node cache type as string when creating a LocationHandler\"
>202	PrimaryExpression	\"please provide a node cache type as string when creating a LocationHandler\"
>203	Callee	v8 
>204	Identifier	v8 
>205	Callee	v8 
>206	Identifier	v8 
>207	Callee	ThrowException
>208	Identifier	ThrowException
>209	Condition	! args [ 0 ] -> IsString ( )
>210	UnaryOp	! args [ 0 ] -> IsString ( )
>211	CallExpression	args [ 0 ] -> IsString ( )
>212	ArgumentList	 
>213	Callee	args [ 0 ] -> IsString
>214	PtrMemberAccess	args [ 0 ] -> IsString
>215	Identifier	IsString
>216	ArrayIndexing	args [ 0 ]
>217	PrimaryExpression	0
>218	Identifier	args
>219	UnaryOperator	!
>220	IfStatement	if ( args . Length ( ) != 1 )
>221	CompoundStatement	 
>222	ReturnStatement	return ThrowException ( v8 
>223	CallExpression	ThrowException ( v8 
>224	ArgumentList	v8 
>225	Argument	v8 
>226	CallExpression	v8 
>227	ArgumentList	v8 
>228	Argument	v8 
>229	CallExpression	v8 
>230	ArgumentList	\"please provide a node cache type as string when creating a LocationHandler\"
>231	Argument	\"please provide a node cache type as string when creating a LocationHandler\"
>232	PrimaryExpression	\"please provide a node cache type as string when creating a LocationHandler\"
>233	Callee	v8 
>234	Identifier	v8 
>235	Callee	v8 
>236	Identifier	v8 
>237	Callee	ThrowException
>238	Identifier	ThrowException
>239	Condition	args . Length ( ) != 1
>240	EqualityExpression	args . Length ( ) != 1
>241	PrimaryExpression	1
>242	CallExpression	args . Length ( )
>243	ArgumentList	 
>244	Callee	args . Length
>245	MemberAccess	args . Length
>246	Identifier	Length
>247	Identifier	args
>248	CompoundStatement	 
>249	ExpressionStatement	location_handler_wrap = new LocationHandlerWrap ( \"sparse_mem_array\" )
>250	AssignmentExpr	location_handler_wrap = new LocationHandlerWrap ( \"sparse_mem_array\" )
>251	PrimaryExpression	\"sparse_mem_array\"
>252	Identifier	location_handler_wrap
>253	Condition	args . Length ( ) == 0
>254	EqualityExpression	args . Length ( ) == 0
>255	PrimaryExpression	0
>256	CallExpression	args . Length ( )
>257	ArgumentList	 
>258	Callee	args . Length
>259	MemberAccess	args . Length
>260	Identifier	Length
>261	Identifier	args
>262	IdentifierDeclStatement	LocationHandlerWrap * location_handler_wrap ;
>263	IdentifierDecl	* location_handler_wrap
>264	Identifier	location_handler_wrap
>265	IdentifierDeclType	LocationHandlerWrap *
>266	IfStatement	if ( ! args . IsConstructCall ( ) )
>267	CompoundStatement	 
>268	ReturnStatement	 
>269	CallExpression	ThrowException ( v8 
>270	ArgumentList	v8 
>271	Argument	v8 
>272	CallExpression	v8 
>273	ArgumentList	v8 
>274	Argument	v8 
>275	CallExpression	v8 
>276	ArgumentList	\"Cannot call constructor as function, you need to use 'new' keyword\"
>277	Argument	\"Cannot call constructor as function, you need to use 'new' keyword\"
>278	PrimaryExpression	\"Cannot call constructor as function, you need to use 'new' keyword\"
>279	Callee	v8 
>280	Identifier	v8 
>281	Callee	v8 
>282	Identifier	v8 
>283	Callee	ThrowException
>284	Identifier	ThrowException
>285	Condition	 
>286	UnaryOp	! args . IsConstructCall ( )
>287	CallExpression	args . IsConstructCall ( )
>288	ArgumentList	 
>289	Callee	args . IsConstructCall
>290	MemberAccess	args . IsConstructCall
>291	Identifier	IsConstructCall
>292	Identifier	args
>293	UnaryOperator	!
>294	IdentifierDeclStatement	 
>295	IdentifierDecl	scope
>296	Identifier	scope
>297	IdentifierDeclType	v8 
>318	FunctionDef	LocationHandlerWrap 
>319	ParameterList	const v8 
>320	Parameter	 
>321	Identifier	args
>322	ParameterType	const v8 
>323	ReturnType	v8 
>324	CompoundStatement	 
>325	ReturnStatement	 
>326	CallExpression	scope . Close ( v8 
>327	ArgumentList	v8 
>328	Argument	v8 
>329	CallExpression	v8 
>330	ArgumentList	 
>331	Callee	v8 
>332	Identifier	v8 
>333	Callee	scope . Close
>334	MemberAccess	scope . Close
>335	Identifier	Close
>336	Identifier	scope
>337	ExpressionStatement	 
>338	RelationalExpression	unwrap < LocationHandlerWrap > ( args . This ( ) ) . ignore_errors ( )
>339	RelationalExpression	LocationHandlerWrap > ( args . This ( ) ) . ignore_errors ( )
>340	CallExpression	( args . This ( ) ) . ignore_errors ( )
>341	ArgumentList	 
>342	Callee	( args . This ( ) ) . ignore_errors
>343	MemberAccess	( args . This ( ) ) . ignore_errors
>344	Identifier	ignore_errors
>345	CallExpression	args . This ( )
>346	ArgumentList	 
>347	Callee	args . This
>348	MemberAccess	args . This
>349	Identifier	This
>350	Identifier	args
>351	Identifier	LocationHandlerWrap
>352	Identifier	unwrap
>353	IdentifierDeclStatement	 
>354	IdentifierDecl	scope
>355	Identifier	scope
>356	IdentifierDeclType	v8 
>357	ExpressionStatement	 
>358	CallExpression	INSTANCE_CHECK ( LocationHandlerWrap , \"location_handler\" , \"ignoreErrors\" )
>359	ArgumentList	LocationHandlerWrap
>360	Argument	\"ignoreErrors\"
>361	PrimaryExpression	\"ignoreErrors\"
>362	Argument	\"location_handler\"
>363	PrimaryExpression	\"location_handler\"
>364	Argument	LocationHandlerWrap
>365	Identifier	LocationHandlerWrap
>366	Callee	INSTANCE_CHECK
>367	Identifier	INSTANCE_CHECK
>377	FunctionDef	LocationHandlerWrap 
>378	ParameterList	const v8 
>379	Parameter	 
>380	Identifier	args
>381	ParameterType	const v8 
>382	ReturnType	v8 
>383	CompoundStatement	 
>384	ReturnStatement	 
>385	CallExpression	scope . Close ( v8 
>386	ArgumentList	v8 
>387	Argument	v8 
>388	CallExpression	v8 
>389	ArgumentList	 
>390	Callee	v8 
>391	Identifier	v8 
>392	Callee	scope . Close
>393	MemberAccess	scope . Close
>394	Identifier	Close
>395	Identifier	scope
>396	ExpressionStatement	 
>397	RelationalExpression	unwrap < LocationHandlerWrap > ( args . This ( ) ) . clear ( )
>398	RelationalExpression	LocationHandlerWrap > ( args . This ( ) ) . clear ( )
>399	CallExpression	( args . This ( ) ) . clear ( )
>400	ArgumentList	 
>401	Callee	( args . This ( ) ) . clear
>402	MemberAccess	( args . This ( ) ) . clear
>403	Identifier	clear
>404	CallExpression	args . This ( )
>405	ArgumentList	 
>406	Callee	args . This
>407	MemberAccess	args . This
>408	Identifier	This
>409	Identifier	args
>410	Identifier	LocationHandlerWrap
>411	Identifier	unwrap
>412	IdentifierDeclStatement	 
>413	IdentifierDecl	scope
>414	Identifier	scope
>415	IdentifierDeclType	v8 
>416	ExpressionStatement	 
>417	CallExpression	INSTANCE_CHECK ( LocationHandlerWrap , \"clear\" , \"clear\" )
>418	ArgumentList	LocationHandlerWrap
>419	Argument	\"clear\"
>420	PrimaryExpression	\"clear\"
>421	Argument	\"clear\"
>422	PrimaryExpression	\"clear\"
>423	Argument	LocationHandlerWrap
>424	Identifier	LocationHandlerWrap
>425	Callee	INSTANCE_CHECK
>426	Identifier	INSTANCE_CHECK
<5=11,10,6
<6=7
<7=9,8
<11=96,95,94,93,92,91,90,89,88,87,86,85,73,59,50,39,28,12
<12=13
<13=24,14
<14=22,15
<15=16
<16=18,17
<18=19
<19=21,20
<22=23
<24=25
<25=27,26
<28=29
<29=37,30
<30=35,33,31
<31=32
<33=34
<35=36
<37=38
<39=40
<40=48,41
<41=46,44,42
<42=43
<44=45
<46=47
<48=49
<50=51
<51=55,52
<52=53
<53=54
<55=56
<56=58,57
<59=60
<60=64,61
<61=62
<62=63
<64=65
<65=67,66
<67=69,68
<69=70
<70=72,71
<73=74
<74=83,75
<75=76
<76=77
<77=81,78
<78=79
<79=80
<81=82
<83=84
<96=97
<97=99,98
<114=120,119,115
<115=116
<116=118,117
<120=294,266,146,121
<121=145,122
<122=123
<123=124
<124=143,125
<125=126
<126=127
<127=141,128
<128=129
<129=130
<130=139,131
<131=132
<132=133
<133=135,134
<135=136
<136=138,137
<139=140
<141=142
<143=144
<146=147
<147=262,169,155,148
<148=149
<149=151,150
<151=152
<152=154,153
<155=156
<156=165,157
<157=158
<158=159
<159=161,160
<161=162
<162=164,163
<165=166
<166=168,167
<169=253,248,170
<170=171
<171=220,190,189,188,187,186,185,184,179,178,172
<172=173
<173=177,174
<174=176,175
<179=183,182,181,180
<190=209,191
<191=192
<192=193
<193=207,194
<194=195
<195=196
<196=205,197
<197=198
<198=199
<199=203,200
<200=201
<201=202
<203=204
<205=206
<207=208
<209=210
<210=219,211
<211=213,212
<213=214
<214=216,215
<216=218,217
<220=239,221
<221=222
<222=223
<223=237,224
<224=225
<225=226
<226=235,227
<227=228
<228=229
<229=233,230
<230=231
<231=232
<233=234
<235=236
<237=238
<239=240
<240=242,241
<242=244,243
<244=245
<245=247,246
<248=249
<249=250
<250=252,251
<253=254
<254=256,255
<256=258,257
<258=259
<259=261,260
<262=263
<263=265,264
<266=285,267
<267=268
<268=269
<269=283,270
<270=271
<271=272
<272=281,273
<273=274
<274=275
<275=279,276
<276=277
<277=278
<279=280
<281=282
<283=284
<285=286
<286=293,287
<287=289,288
<289=290
<290=292,291
<294=295
<295=297,296
<318=324,323,319
<319=320
<320=322,321
<324=357,353,337,325
<325=326
<326=333,327
<327=328
<328=329
<329=331,330
<331=332
<333=334
<334=336,335
<337=338
<338=352,339
<339=351,340
<340=342,341
<342=343
<343=345,344
<345=347,346
<347=348
<348=350,349
<353=354
<354=356,355
<357=358
<358=366,359
<359=364,362,360
<360=361
<362=363
<364=365
<366=367
<377=383,382,378
<378=379
<379=381,380
<383=416,412,396,384
<384=385
<385=392,386
<386=387
<387=388
<388=390,389
<390=391
<392=393
<393=395,394
<396=397
<397=411,398
<398=410,399
<399=401,400
<401=402
<402=404,403
<404=406,405
<406=407
<407=409,408
<412=413
<413=415,414
<416=417
<417=425,418
<418=423,421,419
<419=420
<421=422
<423=424
<425=426
