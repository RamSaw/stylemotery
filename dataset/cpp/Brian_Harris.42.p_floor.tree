>3	FunctionDef	T_MovePlane (sector_t * sector , fixed_t speed , fixed_t dest , qboolean crush , int floorOrCeiling , int direction)
>4	ParameterList	sector_t * sector , fixed_t speed , fixed_t dest , qboolean crush , int floorOrCeiling , int direction
>5	Parameter	 
>6	Identifier	direction
>7	ParameterType	int
>8	Parameter	 
>9	Identifier	floorOrCeiling
>10	ParameterType	int
>11	Parameter	 
>12	Identifier	crush
>13	ParameterType	qboolean
>14	Parameter	 
>15	Identifier	dest
>16	ParameterType	fixed_t
>17	Parameter	 
>18	Identifier	speed
>19	ParameterType	fixed_t
>20	Parameter	 
>21	Identifier	sector
>22	ParameterType	sector_t *
>23	ReturnType	result_e
>24	CompoundStatement	 
>25	ReturnStatement	 
>26	Identifier	ok
>27	SwitchStatement	switch ( floorOrCeiling )
>28	CompoundStatement	 
>29	BreakStatement	 
>30	SwitchStatement	switch ( direction )
>31	CompoundStatement	 
>32	BreakStatement	 
>33	IfStatement	if ( sector -> ceilingheight + speed > dest )
>34	ElseStatement	else
>35	CompoundStatement	 
>36	IfStatement	if ( flag == true )
>37	CompoundStatement	 
>38	ReturnStatement	 
>39	Identifier	crushed
>40	ExpressionStatement	 
>41	CallExpression	P_ChangeSector ( sector , crush )
>42	ArgumentList	sector
>43	Argument	crush
>44	Identifier	crush
>45	Argument	sector
>46	Identifier	sector
>47	Callee	P_ChangeSector
>48	Identifier	P_ChangeSector
>49	ExpressionStatement	 
>50	AssignmentExpr	sector -> ceilingheight = lastpos
>51	Identifier	lastpos
>52	PtrMemberAccess	sector -> ceilingheight
>53	Identifier	ceilingheight
>54	Identifier	sector
>55	Condition	 
>56	EqualityExpression	flag == true
>57	Identifier	true
>58	Identifier	flag
>59	ExpressionStatement	 
>60	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>61	CallExpression	P_ChangeSector ( sector , crush )
>62	ArgumentList	sector
>63	Argument	crush
>64	Identifier	crush
>65	Argument	sector
>66	Identifier	sector
>67	Callee	P_ChangeSector
>68	Identifier	P_ChangeSector
>69	Identifier	flag
>70	ExpressionStatement	 
>71	AssignmentExpr	sector -> ceilingheight += speed
>72	Identifier	speed
>73	PtrMemberAccess	sector -> ceilingheight
>74	Identifier	ceilingheight
>75	Identifier	sector
>76	ExpressionStatement	 
>77	AssignmentExpr	lastpos = sector -> ceilingheight
>78	PtrMemberAccess	sector -> ceilingheight
>79	Identifier	ceilingheight
>80	Identifier	sector
>81	Identifier	lastpos
>82	CompoundStatement	 
>83	ReturnStatement	 
>84	Identifier	pastdest
>85	IfStatement	if ( flag == true )
>86	CompoundStatement	 
>87	ExpressionStatement	 
>88	CallExpression	P_ChangeSector ( sector , crush )
>89	ArgumentList	sector
>90	Argument	crush
>91	Identifier	crush
>92	Argument	sector
>93	Identifier	sector
>94	Callee	P_ChangeSector
>95	Identifier	P_ChangeSector
>96	ExpressionStatement	 
>97	AssignmentExpr	sector -> ceilingheight = lastpos
>98	Identifier	lastpos
>99	PtrMemberAccess	sector -> ceilingheight
>100	Identifier	ceilingheight
>101	Identifier	sector
>102	Condition	 
>103	EqualityExpression	flag == true
>104	Identifier	true
>105	Identifier	flag
>106	ExpressionStatement	 
>107	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>108	CallExpression	P_ChangeSector ( sector , crush )
>109	ArgumentList	sector
>110	Argument	crush
>111	Identifier	crush
>112	Argument	sector
>113	Identifier	sector
>114	Callee	P_ChangeSector
>115	Identifier	P_ChangeSector
>116	Identifier	flag
>117	ExpressionStatement	 
>118	AssignmentExpr	sector -> ceilingheight = dest
>119	Identifier	dest
>120	PtrMemberAccess	sector -> ceilingheight
>121	Identifier	ceilingheight
>122	Identifier	sector
>123	ExpressionStatement	 
>124	AssignmentExpr	lastpos = sector -> ceilingheight
>125	PtrMemberAccess	sector -> ceilingheight
>126	Identifier	ceilingheight
>127	Identifier	sector
>128	Identifier	lastpos
>129	Condition	 
>130	RelationalExpression	sector -> ceilingheight + speed > dest
>131	Identifier	dest
>132	AdditiveExpression	sector -> ceilingheight + speed
>133	Identifier	speed
>134	PtrMemberAccess	sector -> ceilingheight
>135	Identifier	ceilingheight
>136	Identifier	sector
>137	Label	 
>138	BreakStatement	 
>139	IfStatement	if ( sector -> ceilingheight - speed < dest )
>140	ElseStatement	else
>141	CompoundStatement	 
>142	IfStatement	if ( flag == true )
>143	CompoundStatement	 
>144	ReturnStatement	 
>145	Identifier	crushed
>146	ExpressionStatement	 
>147	CallExpression	P_ChangeSector ( sector , crush )
>148	ArgumentList	sector
>149	Argument	crush
>150	Identifier	crush
>151	Argument	sector
>152	Identifier	sector
>153	Callee	P_ChangeSector
>154	Identifier	P_ChangeSector
>155	ExpressionStatement	 
>156	AssignmentExpr	sector -> ceilingheight = lastpos
>157	Identifier	lastpos
>158	PtrMemberAccess	sector -> ceilingheight
>159	Identifier	ceilingheight
>160	Identifier	sector
>161	IfStatement	if ( crush == true )
>162	ReturnStatement	 
>163	Identifier	crushed
>164	Condition	 
>165	EqualityExpression	crush == true
>166	Identifier	true
>167	Identifier	crush
>168	Condition	 
>169	EqualityExpression	flag == true
>170	Identifier	true
>171	Identifier	flag
>172	ExpressionStatement	 
>173	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>174	CallExpression	P_ChangeSector ( sector , crush )
>175	ArgumentList	sector
>176	Argument	crush
>177	Identifier	crush
>178	Argument	sector
>179	Identifier	sector
>180	Callee	P_ChangeSector
>181	Identifier	P_ChangeSector
>182	Identifier	flag
>183	ExpressionStatement	 
>184	AssignmentExpr	sector -> ceilingheight -= speed
>185	Identifier	speed
>186	PtrMemberAccess	sector -> ceilingheight
>187	Identifier	ceilingheight
>188	Identifier	sector
>189	ExpressionStatement	 
>190	AssignmentExpr	lastpos = sector -> ceilingheight
>191	PtrMemberAccess	sector -> ceilingheight
>192	Identifier	ceilingheight
>193	Identifier	sector
>194	Identifier	lastpos
>195	CompoundStatement	 
>196	ReturnStatement	 
>197	Identifier	pastdest
>198	IfStatement	if ( flag == true )
>199	CompoundStatement	 
>200	ExpressionStatement	 
>201	CallExpression	P_ChangeSector ( sector , crush )
>202	ArgumentList	sector
>203	Argument	crush
>204	Identifier	crush
>205	Argument	sector
>206	Identifier	sector
>207	Callee	P_ChangeSector
>208	Identifier	P_ChangeSector
>209	ExpressionStatement	 
>210	AssignmentExpr	sector -> ceilingheight = lastpos
>211	Identifier	lastpos
>212	PtrMemberAccess	sector -> ceilingheight
>213	Identifier	ceilingheight
>214	Identifier	sector
>215	Condition	 
>216	EqualityExpression	flag == true
>217	Identifier	true
>218	Identifier	flag
>219	ExpressionStatement	 
>220	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>221	CallExpression	P_ChangeSector ( sector , crush )
>222	ArgumentList	sector
>223	Argument	crush
>224	Identifier	crush
>225	Argument	sector
>226	Identifier	sector
>227	Callee	P_ChangeSector
>228	Identifier	P_ChangeSector
>229	Identifier	flag
>230	ExpressionStatement	 
>231	AssignmentExpr	sector -> ceilingheight = dest
>232	Identifier	dest
>233	PtrMemberAccess	sector -> ceilingheight
>234	Identifier	ceilingheight
>235	Identifier	sector
>236	ExpressionStatement	 
>237	AssignmentExpr	lastpos = sector -> ceilingheight
>238	PtrMemberAccess	sector -> ceilingheight
>239	Identifier	ceilingheight
>240	Identifier	sector
>241	Identifier	lastpos
>242	Condition	 
>243	RelationalExpression	sector -> ceilingheight - speed < dest
>244	Identifier	dest
>245	AdditiveExpression	sector -> ceilingheight - speed
>246	Identifier	speed
>247	PtrMemberAccess	sector -> ceilingheight
>248	Identifier	ceilingheight
>249	Identifier	sector
>250	Label	 
>251	Statement	 
>252	Statement	 
>253	Condition	 
>254	Identifier	direction
>255	Label	 
>256	BreakStatement	 
>257	SwitchStatement	switch ( direction )
>258	CompoundStatement	 
>259	BreakStatement	 
>260	IfStatement	if ( sector -> floorheight + speed > dest )
>261	ElseStatement	else
>262	CompoundStatement	 
>263	IfStatement	if ( flag == true )
>264	CompoundStatement	 
>265	ReturnStatement	 
>266	Identifier	crushed
>267	ExpressionStatement	 
>268	CallExpression	P_ChangeSector ( sector , crush )
>269	ArgumentList	sector
>270	Argument	crush
>271	Identifier	crush
>272	Argument	sector
>273	Identifier	sector
>274	Callee	P_ChangeSector
>275	Identifier	P_ChangeSector
>276	ExpressionStatement	 
>277	AssignmentExpr	sector -> floorheight = lastpos
>278	Identifier	lastpos
>279	PtrMemberAccess	sector -> floorheight
>280	Identifier	floorheight
>281	Identifier	sector
>282	IfStatement	if ( crush == true )
>283	ReturnStatement	 
>284	Identifier	crushed
>285	Condition	 
>286	EqualityExpression	crush == true
>287	Identifier	true
>288	Identifier	crush
>289	Condition	 
>290	EqualityExpression	flag == true
>291	Identifier	true
>292	Identifier	flag
>293	ExpressionStatement	 
>294	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>295	CallExpression	P_ChangeSector ( sector , crush )
>296	ArgumentList	sector
>297	Argument	crush
>298	Identifier	crush
>299	Argument	sector
>300	Identifier	sector
>301	Callee	P_ChangeSector
>302	Identifier	P_ChangeSector
>303	Identifier	flag
>304	ExpressionStatement	 
>305	AssignmentExpr	sector -> floorheight += speed
>306	Identifier	speed
>307	PtrMemberAccess	sector -> floorheight
>308	Identifier	floorheight
>309	Identifier	sector
>310	ExpressionStatement	 
>311	AssignmentExpr	lastpos = sector -> floorheight
>312	PtrMemberAccess	sector -> floorheight
>313	Identifier	floorheight
>314	Identifier	sector
>315	Identifier	lastpos
>316	CompoundStatement	 
>317	ReturnStatement	 
>318	Identifier	pastdest
>319	IfStatement	if ( flag == true )
>320	CompoundStatement	 
>321	ExpressionStatement	 
>322	CallExpression	P_ChangeSector ( sector , crush )
>323	ArgumentList	sector
>324	Argument	crush
>325	Identifier	crush
>326	Argument	sector
>327	Identifier	sector
>328	Callee	P_ChangeSector
>329	Identifier	P_ChangeSector
>330	ExpressionStatement	 
>331	AssignmentExpr	sector -> floorheight = lastpos
>332	Identifier	lastpos
>333	PtrMemberAccess	sector -> floorheight
>334	Identifier	floorheight
>335	Identifier	sector
>336	Condition	 
>337	EqualityExpression	flag == true
>338	Identifier	true
>339	Identifier	flag
>340	ExpressionStatement	 
>341	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>342	CallExpression	P_ChangeSector ( sector , crush )
>343	ArgumentList	sector
>344	Argument	crush
>345	Identifier	crush
>346	Argument	sector
>347	Identifier	sector
>348	Callee	P_ChangeSector
>349	Identifier	P_ChangeSector
>350	Identifier	flag
>351	ExpressionStatement	 
>352	AssignmentExpr	sector -> floorheight = dest
>353	Identifier	dest
>354	PtrMemberAccess	sector -> floorheight
>355	Identifier	floorheight
>356	Identifier	sector
>357	ExpressionStatement	 
>358	AssignmentExpr	lastpos = sector -> floorheight
>359	PtrMemberAccess	sector -> floorheight
>360	Identifier	floorheight
>361	Identifier	sector
>362	Identifier	lastpos
>363	Condition	 
>364	RelationalExpression	sector -> floorheight + speed > dest
>365	Identifier	dest
>366	AdditiveExpression	sector -> floorheight + speed
>367	Identifier	speed
>368	PtrMemberAccess	sector -> floorheight
>369	Identifier	floorheight
>370	Identifier	sector
>371	Label	 
>372	BreakStatement	 
>373	IfStatement	if ( sector -> floorheight - speed < dest )
>374	ElseStatement	else
>375	CompoundStatement	 
>376	IfStatement	if ( flag == true )
>377	CompoundStatement	 
>378	ReturnStatement	 
>379	Identifier	crushed
>380	ExpressionStatement	 
>381	CallExpression	P_ChangeSector ( sector , crush )
>382	ArgumentList	sector
>383	Argument	crush
>384	Identifier	crush
>385	Argument	sector
>386	Identifier	sector
>387	Callee	P_ChangeSector
>388	Identifier	P_ChangeSector
>389	ExpressionStatement	 
>390	AssignmentExpr	sector -> floorheight = lastpos
>391	Identifier	lastpos
>392	PtrMemberAccess	sector -> floorheight
>393	Identifier	floorheight
>394	Identifier	sector
>395	Condition	 
>396	EqualityExpression	flag == true
>397	Identifier	true
>398	Identifier	flag
>399	ExpressionStatement	 
>400	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>401	CallExpression	P_ChangeSector ( sector , crush )
>402	ArgumentList	sector
>403	Argument	crush
>404	Identifier	crush
>405	Argument	sector
>406	Identifier	sector
>407	Callee	P_ChangeSector
>408	Identifier	P_ChangeSector
>409	Identifier	flag
>410	ExpressionStatement	 
>411	AssignmentExpr	sector -> floorheight -= speed
>412	Identifier	speed
>413	PtrMemberAccess	sector -> floorheight
>414	Identifier	floorheight
>415	Identifier	sector
>416	ExpressionStatement	 
>417	AssignmentExpr	lastpos = sector -> floorheight
>418	PtrMemberAccess	sector -> floorheight
>419	Identifier	floorheight
>420	Identifier	sector
>421	Identifier	lastpos
>422	CompoundStatement	 
>423	ReturnStatement	 
>424	Identifier	pastdest
>425	IfStatement	if ( flag == true )
>426	CompoundStatement	 
>427	ExpressionStatement	 
>428	CallExpression	P_ChangeSector ( sector , crush )
>429	ArgumentList	sector
>430	Argument	crush
>431	Identifier	crush
>432	Argument	sector
>433	Identifier	sector
>434	Callee	P_ChangeSector
>435	Identifier	P_ChangeSector
>436	ExpressionStatement	 
>437	AssignmentExpr	sector -> floorheight = lastpos
>438	Identifier	lastpos
>439	PtrMemberAccess	sector -> floorheight
>440	Identifier	floorheight
>441	Identifier	sector
>442	Condition	 
>443	EqualityExpression	flag == true
>444	Identifier	true
>445	Identifier	flag
>446	ExpressionStatement	 
>447	AssignmentExpr	flag = P_ChangeSector ( sector , crush )
>448	CallExpression	P_ChangeSector ( sector , crush )
>449	ArgumentList	sector
>450	Argument	crush
>451	Identifier	crush
>452	Argument	sector
>453	Identifier	sector
>454	Callee	P_ChangeSector
>455	Identifier	P_ChangeSector
>456	Identifier	flag
>457	ExpressionStatement	 
>458	AssignmentExpr	sector -> floorheight = dest
>459	Identifier	dest
>460	PtrMemberAccess	sector -> floorheight
>461	Identifier	floorheight
>462	Identifier	sector
>463	ExpressionStatement	 
>464	AssignmentExpr	lastpos = sector -> floorheight
>465	PtrMemberAccess	sector -> floorheight
>466	Identifier	floorheight
>467	Identifier	sector
>468	Identifier	lastpos
>469	Condition	 
>470	RelationalExpression	sector -> floorheight - speed < dest
>471	Identifier	dest
>472	AdditiveExpression	sector -> floorheight - speed
>473	Identifier	speed
>474	PtrMemberAccess	sector -> floorheight
>475	Identifier	floorheight
>476	Identifier	sector
>477	Label	 
>478	Statement	 
>479	Statement	 
>480	Condition	 
>481	Identifier	direction
>482	Label	 
>483	Condition	 
>484	Identifier	floorOrCeiling
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	lastpos
>487	Identifier	lastpos
>488	IdentifierDeclType	fixed_t
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	flag
>491	Identifier	flag
>492	IdentifierDeclType	qboolean
>512	FunctionDef	T_MoveFloor (floormove_t * floor)
>513	ParameterList	floormove_t * floor
>514	Parameter	 
>515	Identifier	floor
>516	ParameterType	floormove_t *
>517	ReturnType	void
>518	CompoundStatement	 
>519	IfStatement	if ( res == pastdest )
>520	CompoundStatement	 
>521	ExpressionStatement	 
>522	CallExpression	S_StartSound ( & floor -> sector -> soundorg , sfx_pstop )
>523	ArgumentList	& floor -> sector -> soundorg
>524	Argument	sfx_pstop
>525	Identifier	sfx_pstop
>526	Argument	& floor -> sector -> soundorg
>527	UnaryOp	& floor -> sector -> soundorg
>528	PtrMemberAccess	floor -> sector -> soundorg
>529	Identifier	soundorg
>530	PtrMemberAccess	floor -> sector
>531	Identifier	sector
>532	Identifier	floor
>533	UnaryOperator	&
>534	Callee	S_StartSound
>535	Identifier	S_StartSound
>536	ExpressionStatement	 
>537	CallExpression	P_RemoveThinker ( & floor -> thinker )
>538	ArgumentList	& floor -> thinker
>539	Argument	& floor -> thinker
>540	UnaryOp	& floor -> thinker
>541	PtrMemberAccess	floor -> thinker
>542	Identifier	thinker
>543	Identifier	floor
>544	UnaryOperator	&
>545	Callee	P_RemoveThinker
>546	Identifier	P_RemoveThinker
>547	IfStatement	if ( floor -> direction == 1 )
>548	ElseStatement	else
>549	IfStatement	if ( floor -> direction == - 1 )
>550	CompoundStatement	 
>551	SwitchStatement	switch ( floor -> type )
>552	CompoundStatement	 
>553	BreakStatement	 
>554	Label	 
>555	Identifier	default
>556	ExpressionStatement	 
>557	AssignmentExpr	floor -> sector -> floorpic = floor -> texture
>558	PtrMemberAccess	floor -> texture
>559	Identifier	texture
>560	Identifier	floor
>561	PtrMemberAccess	floor -> sector -> floorpic
>562	Identifier	floorpic
>563	PtrMemberAccess	floor -> sector
>564	Identifier	sector
>565	Identifier	floor
>566	ExpressionStatement	 
>567	AssignmentExpr	floor -> sector -> special = floor -> newspecial
>568	PtrMemberAccess	floor -> newspecial
>569	Identifier	newspecial
>570	Identifier	floor
>571	PtrMemberAccess	floor -> sector -> special
>572	Identifier	special
>573	PtrMemberAccess	floor -> sector
>574	Identifier	sector
>575	Identifier	floor
>576	Label	 
>577	Identifier	lowerAndChange
>578	Condition	 
>579	PtrMemberAccess	floor -> type
>580	Identifier	type
>581	Identifier	floor
>582	Condition	 
>583	EqualityExpression	floor -> direction == - 1
>584	UnaryOp	- 1
>585	PrimaryExpression	1
>586	UnaryOperator	-
>587	PtrMemberAccess	floor -> direction
>588	Identifier	direction
>589	Identifier	floor
>590	CompoundStatement	 
>591	SwitchStatement	switch ( floor -> type )
>592	CompoundStatement	 
>593	BreakStatement	 
>594	Label	 
>595	Identifier	default
>596	ExpressionStatement	 
>597	AssignmentExpr	floor -> sector -> floorpic = floor -> texture
>598	PtrMemberAccess	floor -> texture
>599	Identifier	texture
>600	Identifier	floor
>601	PtrMemberAccess	floor -> sector -> floorpic
>602	Identifier	floorpic
>603	PtrMemberAccess	floor -> sector
>604	Identifier	sector
>605	Identifier	floor
>606	ExpressionStatement	 
>607	AssignmentExpr	floor -> sector -> special = floor -> newspecial
>608	PtrMemberAccess	floor -> newspecial
>609	Identifier	newspecial
>610	Identifier	floor
>611	PtrMemberAccess	floor -> sector -> special
>612	Identifier	special
>613	PtrMemberAccess	floor -> sector
>614	Identifier	sector
>615	Identifier	floor
>616	Label	 
>617	Identifier	donutRaise
>618	Condition	 
>619	PtrMemberAccess	floor -> type
>620	Identifier	type
>621	Identifier	floor
>622	Condition	 
>623	EqualityExpression	floor -> direction == 1
>624	PrimaryExpression	1
>625	PtrMemberAccess	floor -> direction
>626	Identifier	direction
>627	Identifier	floor
>628	ExpressionStatement	 
>629	AssignmentExpr	floor -> sector -> specialdata = NULL
>630	Identifier	NULL
>631	PtrMemberAccess	floor -> sector -> specialdata
>632	Identifier	specialdata
>633	PtrMemberAccess	floor -> sector
>634	Identifier	sector
>635	Identifier	floor
>636	Condition	 
>637	EqualityExpression	res == pastdest
>638	Identifier	pastdest
>639	Identifier	res
>640	ExpressionStatement	 
>641	CallExpression	S_StartSound ( & floor -> sector -> soundorg , sfx_stnmov )
>642	ArgumentList	& floor -> sector -> soundorg
>643	Argument	sfx_stnmov
>644	Identifier	sfx_stnmov
>645	Argument	& floor -> sector -> soundorg
>646	UnaryOp	& floor -> sector -> soundorg
>647	PtrMemberAccess	floor -> sector -> soundorg
>648	Identifier	soundorg
>649	PtrMemberAccess	floor -> sector
>650	Identifier	sector
>651	Identifier	floor
>652	UnaryOperator	&
>653	Callee	S_StartSound
>654	Identifier	S_StartSound
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	Statement	 
>659	Statement	 
>660	Statement	 
>661	Statement	 
>662	Statement	 
>663	Statement	 
>664	Statement	 
>665	Statement	 
>666	Statement	 
>667	ExpressionStatement	 
>668	AssignmentExpr	res = T_MovePlane ( floor -> sector , floor -> speed , floor -> floordestheight , floor -> crush , 0 , \
>669	CallExpression	T_MovePlane ( floor -> sector , floor -> speed , floor -> floordestheight , floor -> crush , 0 , floor -> direction )
>670	ArgumentList	floor -> sector
>671	Argument	floor -> direction
>672	PtrMemberAccess	floor -> direction
>673	Identifier	direction
>674	Identifier	floor
>675	Argument	0
>676	PrimaryExpression	0
>677	Argument	floor -> crush
>678	PtrMemberAccess	floor -> crush
>679	Identifier	crush
>680	Identifier	floor
>681	Argument	floor -> floordestheight
>682	PtrMemberAccess	floor -> floordestheight
>683	Identifier	floordestheight
>684	Identifier	floor
>685	Argument	floor -> speed
>686	PtrMemberAccess	floor -> speed
>687	Identifier	speed
>688	Identifier	floor
>689	Argument	floor -> sector
>690	PtrMemberAccess	floor -> sector
>691	Identifier	sector
>692	Identifier	floor
>693	Callee	T_MovePlane
>694	Identifier	T_MovePlane
>695	Identifier	res
>696	IdentifierDeclStatement	 
>697	IdentifierDecl	res
>698	Identifier	res
>699	IdentifierDeclType	result_e
>729	FunctionDef	EV_DoFloor (line_t * line , floor_e floortype)
>730	ParameterList	line_t * line , floor_e floortype
>731	Parameter	 
>732	Identifier	floortype
>733	ParameterType	floor_e
>734	Parameter	 
>735	Identifier	line
>736	ParameterType	line_t *
>737	ReturnType	int
>738	CompoundStatement	 
>739	ReturnStatement	 
>740	Identifier	rtn
>741	WhileStatement	while ( ( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0 )
>742	CompoundStatement	 
>743	SwitchStatement	switch ( floortype )
>744	CompoundStatement	 
>745	BreakStatement	 
>746	Label	 
>747	Identifier	default
>748	ForStatement	for ( i = 0 ; i < sec -> linecount ; i ++ )
>749	CompoundStatement	 
>750	IfStatement	if ( twoSided ( secnum , i ) )
>751	ElseStatement	else
>752	CompoundStatement	 
>753	IfStatement	if ( sec -> floorheight == floor -> floordestheight )
>754	CompoundStatement	 
>755	BreakStatement	 
>756	ExpressionStatement	 
>757	AssignmentExpr	floor -> newspecial = sec -> special
>758	PtrMemberAccess	sec -> special
>759	Identifier	special
>760	Identifier	sec
>761	PtrMemberAccess	floor -> newspecial
>762	Identifier	newspecial
>763	Identifier	floor
>764	ExpressionStatement	 
>765	AssignmentExpr	floor -> texture = sec -> floorpic
>766	PtrMemberAccess	sec -> floorpic
>767	Identifier	floorpic
>768	Identifier	sec
>769	PtrMemberAccess	floor -> texture
>770	Identifier	texture
>771	Identifier	floor
>772	Condition	 
>773	EqualityExpression	sec -> floorheight == floor -> floordestheight
>774	PtrMemberAccess	floor -> floordestheight
>775	Identifier	floordestheight
>776	Identifier	floor
>777	PtrMemberAccess	sec -> floorheight
>778	Identifier	floorheight
>779	Identifier	sec
>780	ExpressionStatement	 
>781	AssignmentExpr	sec = getSector ( secnum , i , 0 )
>782	CallExpression	getSector ( secnum , i , 0 )
>783	ArgumentList	secnum
>784	Argument	0
>785	PrimaryExpression	0
>786	Argument	i
>787	Identifier	i
>788	Argument	secnum
>789	Identifier	secnum
>790	Callee	getSector
>791	Identifier	getSector
>792	Identifier	sec
>793	CompoundStatement	 
>794	CompoundStatement	 
>795	IfStatement	if ( sec -> floorheight == floor -> floordestheight )
>796	CompoundStatement	 
>797	BreakStatement	 
>798	ExpressionStatement	 
>799	AssignmentExpr	floor -> newspecial = sec -> special
>800	PtrMemberAccess	sec -> special
>801	Identifier	special
>802	Identifier	sec
>803	PtrMemberAccess	floor -> newspecial
>804	Identifier	newspecial
>805	Identifier	floor
>806	ExpressionStatement	 
>807	AssignmentExpr	floor -> texture = sec -> floorpic
>808	PtrMemberAccess	sec -> floorpic
>809	Identifier	floorpic
>810	Identifier	sec
>811	PtrMemberAccess	floor -> texture
>812	Identifier	texture
>813	Identifier	floor
>814	Condition	 
>815	EqualityExpression	sec -> floorheight == floor -> floordestheight
>816	PtrMemberAccess	floor -> floordestheight
>817	Identifier	floordestheight
>818	Identifier	floor
>819	PtrMemberAccess	sec -> floorheight
>820	Identifier	floorheight
>821	Identifier	sec
>822	ExpressionStatement	 
>823	AssignmentExpr	sec = getSector ( secnum , i , 1 )
>824	CallExpression	getSector ( secnum , i , 1 )
>825	ArgumentList	secnum
>826	Argument	1
>827	PrimaryExpression	1
>828	Argument	i
>829	Identifier	i
>830	Argument	secnum
>831	Identifier	secnum
>832	Callee	getSector
>833	Identifier	getSector
>834	Identifier	sec
>835	Statement	 
>836	Statement	 
>837	Statement	 
>838	Statement	 
>839	Statement	 
>840	Statement	 
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	Statement	 
>846	Statement	 
>847	Statement	 
>848	Statement	 
>849	Statement	 
>850	Statement	 
>851	Statement	 
>852	Statement	 
>853	Statement	 
>854	Statement	 
>855	Condition	 
>856	CallExpression	twoSided ( secnum , i )
>857	ArgumentList	secnum
>858	Argument	i
>859	Identifier	i
>860	Argument	secnum
>861	Identifier	secnum
>862	Callee	twoSided
>863	Identifier	twoSided
>864	IncDecOp	 
>865	IncDec	++
>866	Identifier	i
>867	Condition	 
>868	RelationalExpression	i < sec -> linecount
>869	PtrMemberAccess	sec -> linecount
>870	Identifier	linecount
>871	Identifier	sec
>872	Identifier	i
>873	ForInit	 
>874	AssignmentExpr	i = 0
>875	PrimaryExpression	0
>876	Identifier	i
>877	ExpressionStatement	 
>878	AssignmentExpr	floor -> texture = sec -> floorpic
>879	PtrMemberAccess	sec -> floorpic
>880	Identifier	floorpic
>881	Identifier	sec
>882	PtrMemberAccess	floor -> texture
>883	Identifier	texture
>884	Identifier	floor
>885	ExpressionStatement	 
>886	AssignmentExpr	floor -> floordestheight = P_FindLowestFloorSurrounding ( sec )
>887	CallExpression	P_FindLowestFloorSurrounding ( sec )
>888	ArgumentList	sec
>889	Argument	sec
>890	Identifier	sec
>891	Callee	P_FindLowestFloorSurrounding
>892	Identifier	P_FindLowestFloorSurrounding
>893	PtrMemberAccess	floor -> floordestheight
>894	Identifier	floordestheight
>895	Identifier	floor
>896	ExpressionStatement	 
>897	AssignmentExpr	floor -> speed = FLOORSPEED
>898	Identifier	FLOORSPEED
>899	PtrMemberAccess	floor -> speed
>900	Identifier	speed
>901	Identifier	floor
>902	ExpressionStatement	 
>903	AssignmentExpr	floor -> sector = sec
>904	Identifier	sec
>905	PtrMemberAccess	floor -> sector
>906	Identifier	sector
>907	Identifier	floor
>908	ExpressionStatement	 
>909	AssignmentExpr	floor -> direction = - 1
>910	UnaryOp	- 1
>911	PrimaryExpression	1
>912	UnaryOperator	-
>913	PtrMemberAccess	floor -> direction
>914	Identifier	direction
>915	Identifier	floor
>916	Label	 
>917	Identifier	lowerAndChange
>918	BreakStatement	 
>919	CompoundStatement	 
>920	ExpressionStatement	 
>921	AssignmentExpr	floor -> floordestheight = floor -> sector -> floorheight + minsize
>922	AdditiveExpression	floor -> sector -> floorheight + minsize
>923	Identifier	minsize
>924	PtrMemberAccess	floor -> sector -> floorheight
>925	Identifier	floorheight
>926	PtrMemberAccess	floor -> sector
>927	Identifier	sector
>928	Identifier	floor
>929	PtrMemberAccess	floor -> floordestheight
>930	Identifier	floordestheight
>931	Identifier	floor
>932	ForStatement	for ( i = 0 ; i < sec -> linecount ; i ++ )
>933	CompoundStatement	 
>934	IfStatement	if ( twoSided ( secnum , i ) )
>935	CompoundStatement	 
>936	ExpressionStatement	 
>937	ArrayIndexing	g -> s_textureheight [ side -> bottomtexture ]
>938	PtrMemberAccess	side -> bottomtexture
>939	Identifier	bottomtexture
>940	Identifier	side
>941	PtrMemberAccess	g -> s_textureheight
>942	Identifier	s_textureheight
>943	Identifier	g
>944	Statement	 
>945	Statement	 
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	Statement	 
>955	Statement	 
>956	Statement	 
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	IfStatement	if ( side -> bottomtexture >= 0 )
>961	Statement	 
>962	Condition	 
>963	RelationalExpression	side -> bottomtexture >= 0
>964	PrimaryExpression	0
>965	PtrMemberAccess	side -> bottomtexture
>966	Identifier	bottomtexture
>967	Identifier	side
>968	ExpressionStatement	 
>969	AssignmentExpr	side = getSide ( secnum , i , 1 )
>970	CallExpression	getSide ( secnum , i , 1 )
>971	ArgumentList	secnum
>972	Argument	1
>973	PrimaryExpression	1
>974	Argument	i
>975	Identifier	i
>976	Argument	secnum
>977	Identifier	secnum
>978	Callee	getSide
>979	Identifier	getSide
>980	Identifier	side
>981	ExpressionStatement	 
>982	ArrayIndexing	g -> s_textureheight [ side -> bottomtexture ]
>983	PtrMemberAccess	side -> bottomtexture
>984	Identifier	bottomtexture
>985	Identifier	side
>986	PtrMemberAccess	g -> s_textureheight
>987	Identifier	s_textureheight
>988	Identifier	g
>989	Statement	 
>990	Statement	 
>991	Statement	 
>992	Statement	 
>993	Statement	 
>994	Statement	 
>995	Statement	 
>996	Statement	 
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	IfStatement	if ( side -> bottomtexture >= 0 )
>1006	Statement	 
>1007	Condition	 
>1008	RelationalExpression	side -> bottomtexture >= 0
>1009	PrimaryExpression	0
>1010	PtrMemberAccess	side -> bottomtexture
>1011	Identifier	bottomtexture
>1012	Identifier	side
>1013	ExpressionStatement	 
>1014	AssignmentExpr	side = getSide ( secnum , i , 0 )
>1015	CallExpression	getSide ( secnum , i , 0 )
>1016	ArgumentList	secnum
>1017	Argument	0
>1018	PrimaryExpression	0
>1019	Argument	i
>1020	Identifier	i
>1021	Argument	secnum
>1022	Identifier	secnum
>1023	Callee	getSide
>1024	Identifier	getSide
>1025	Identifier	side
>1026	Condition	 
>1027	CallExpression	twoSided ( secnum , i )
>1028	ArgumentList	secnum
>1029	Argument	i
>1030	Identifier	i
>1031	Argument	secnum
>1032	Identifier	secnum
>1033	Callee	twoSided
>1034	Identifier	twoSided
>1035	IncDecOp	 
>1036	IncDec	++
>1037	Identifier	i
>1038	Condition	 
>1039	RelationalExpression	i < sec -> linecount
>1040	PtrMemberAccess	sec -> linecount
>1041	Identifier	linecount
>1042	Identifier	sec
>1043	Identifier	i
>1044	ForInit	 
>1045	AssignmentExpr	i = 0
>1046	PrimaryExpression	0
>1047	Identifier	i
>1048	ExpressionStatement	 
>1049	AssignmentExpr	floor -> speed = FLOORSPEED
>1050	Identifier	FLOORSPEED
>1051	PtrMemberAccess	floor -> speed
>1052	Identifier	speed
>1053	Identifier	floor
>1054	ExpressionStatement	 
>1055	AssignmentExpr	floor -> sector = sec
>1056	Identifier	sec
>1057	PtrMemberAccess	floor -> sector
>1058	Identifier	sector
>1059	Identifier	floor
>1060	ExpressionStatement	 
>1061	AssignmentExpr	floor -> direction = 1
>1062	PrimaryExpression	1
>1063	PtrMemberAccess	floor -> direction
>1064	Identifier	direction
>1065	Identifier	floor
>1066	IdentifierDeclStatement	 
>1067	IdentifierDecl	* side
>1068	Identifier	side
>1069	IdentifierDeclType	side_t *
>1070	IdentifierDeclStatement	 
>1071	IdentifierDecl	minsize = MAXINT
>1072	AssignmentExpr	minsize = MAXINT
>1073	Identifier	MAXINT
>1074	Identifier	MAXINT
>1075	Identifier	minsize
>1076	IdentifierDeclType	int
>1077	Label	 
>1078	Identifier	raiseToTexture
>1079	BreakStatement	 
>1080	ExpressionStatement	 
>1081	AssignmentExpr	sec -> special = line -> frontsector -> special
>1082	PtrMemberAccess	line -> frontsector -> special
>1083	Identifier	special
>1084	PtrMemberAccess	line -> frontsector
>1085	Identifier	frontsector
>1086	Identifier	line
>1087	PtrMemberAccess	sec -> special
>1088	Identifier	special
>1089	Identifier	sec
>1090	ExpressionStatement	 
>1091	AssignmentExpr	sec -> floorpic = line -> frontsector -> floorpic
>1092	PtrMemberAccess	line -> frontsector -> floorpic
>1093	Identifier	floorpic
>1094	PtrMemberAccess	line -> frontsector
>1095	Identifier	frontsector
>1096	Identifier	line
>1097	PtrMemberAccess	sec -> floorpic
>1098	Identifier	floorpic
>1099	Identifier	sec
>1100	ExpressionStatement	 
>1101	AssignmentExpr	floor -> floordestheight = floor -> sector -> floorheight + 24 * FRACUNIT
>1102	AdditiveExpression	floor -> sector -> floorheight + 24 * FRACUNIT
>1103	MultiplicativeExpression	24 * FRACUNIT
>1104	Identifier	FRACUNIT
>1105	PrimaryExpression	24
>1106	PtrMemberAccess	floor -> sector -> floorheight
>1107	Identifier	floorheight
>1108	PtrMemberAccess	floor -> sector
>1109	Identifier	sector
>1110	Identifier	floor
>1111	PtrMemberAccess	floor -> floordestheight
>1112	Identifier	floordestheight
>1113	Identifier	floor
>1114	ExpressionStatement	 
>1115	AssignmentExpr	floor -> speed = FLOORSPEED
>1116	Identifier	FLOORSPEED
>1117	PtrMemberAccess	floor -> speed
>1118	Identifier	speed
>1119	Identifier	floor
>1120	ExpressionStatement	 
>1121	AssignmentExpr	floor -> sector = sec
>1122	Identifier	sec
>1123	PtrMemberAccess	floor -> sector
>1124	Identifier	sector
>1125	Identifier	floor
>1126	ExpressionStatement	 
>1127	AssignmentExpr	floor -> direction = 1
>1128	PrimaryExpression	1
>1129	PtrMemberAccess	floor -> direction
>1130	Identifier	direction
>1131	Identifier	floor
>1132	Label	 
>1133	Identifier	raiseFloor24AndChange
>1134	BreakStatement	 
>1135	ExpressionStatement	 
>1136	AssignmentExpr	floor -> floordestheight = floor -> sector -> floorheight + 512 * FRACUNIT
>1137	AdditiveExpression	floor -> sector -> floorheight + 512 * FRACUNIT
>1138	MultiplicativeExpression	512 * FRACUNIT
>1139	Identifier	FRACUNIT
>1140	PrimaryExpression	512
>1141	PtrMemberAccess	floor -> sector -> floorheight
>1142	Identifier	floorheight
>1143	PtrMemberAccess	floor -> sector
>1144	Identifier	sector
>1145	Identifier	floor
>1146	PtrMemberAccess	floor -> floordestheight
>1147	Identifier	floordestheight
>1148	Identifier	floor
>1149	ExpressionStatement	 
>1150	AssignmentExpr	floor -> speed = FLOORSPEED
>1151	Identifier	FLOORSPEED
>1152	PtrMemberAccess	floor -> speed
>1153	Identifier	speed
>1154	Identifier	floor
>1155	ExpressionStatement	 
>1156	AssignmentExpr	floor -> sector = sec
>1157	Identifier	sec
>1158	PtrMemberAccess	floor -> sector
>1159	Identifier	sector
>1160	Identifier	floor
>1161	ExpressionStatement	 
>1162	AssignmentExpr	floor -> direction = 1
>1163	PrimaryExpression	1
>1164	PtrMemberAccess	floor -> direction
>1165	Identifier	direction
>1166	Identifier	floor
>1167	Label	 
>1168	Identifier	raiseFloor512
>1169	BreakStatement	 
>1170	ExpressionStatement	 
>1171	AssignmentExpr	floor -> floordestheight = floor -> sector -> floorheight + 24 * FRACUNIT
>1172	AdditiveExpression	floor -> sector -> floorheight + 24 * FRACUNIT
>1173	MultiplicativeExpression	24 * FRACUNIT
>1174	Identifier	FRACUNIT
>1175	PrimaryExpression	24
>1176	PtrMemberAccess	floor -> sector -> floorheight
>1177	Identifier	floorheight
>1178	PtrMemberAccess	floor -> sector
>1179	Identifier	sector
>1180	Identifier	floor
>1181	PtrMemberAccess	floor -> floordestheight
>1182	Identifier	floordestheight
>1183	Identifier	floor
>1184	ExpressionStatement	 
>1185	AssignmentExpr	floor -> speed = FLOORSPEED
>1186	Identifier	FLOORSPEED
>1187	PtrMemberAccess	floor -> speed
>1188	Identifier	speed
>1189	Identifier	floor
>1190	ExpressionStatement	 
>1191	AssignmentExpr	floor -> sector = sec
>1192	Identifier	sec
>1193	PtrMemberAccess	floor -> sector
>1194	Identifier	sector
>1195	Identifier	floor
>1196	ExpressionStatement	 
>1197	AssignmentExpr	floor -> direction = 1
>1198	PrimaryExpression	1
>1199	PtrMemberAccess	floor -> direction
>1200	Identifier	direction
>1201	Identifier	floor
>1202	Label	 
>1203	Identifier	raiseFloor24
>1204	BreakStatement	 
>1205	ExpressionStatement	 
>1206	AssignmentExpr	floor -> floordestheight = P_FindNextHighestFloor ( sec , sec -> floorheight )
>1207	CallExpression	P_FindNextHighestFloor ( sec , sec -> floorheight )
>1208	ArgumentList	sec
>1209	Argument	sec -> floorheight
>1210	PtrMemberAccess	sec -> floorheight
>1211	Identifier	floorheight
>1212	Identifier	sec
>1213	Argument	sec
>1214	Identifier	sec
>1215	Callee	P_FindNextHighestFloor
>1216	Identifier	P_FindNextHighestFloor
>1217	PtrMemberAccess	floor -> floordestheight
>1218	Identifier	floordestheight
>1219	Identifier	floor
>1220	ExpressionStatement	 
>1221	AssignmentExpr	floor -> speed = FLOORSPEED
>1222	Identifier	FLOORSPEED
>1223	PtrMemberAccess	floor -> speed
>1224	Identifier	speed
>1225	Identifier	floor
>1226	ExpressionStatement	 
>1227	AssignmentExpr	floor -> sector = sec
>1228	Identifier	sec
>1229	PtrMemberAccess	floor -> sector
>1230	Identifier	sector
>1231	Identifier	floor
>1232	ExpressionStatement	 
>1233	AssignmentExpr	floor -> direction = 1
>1234	PrimaryExpression	1
>1235	PtrMemberAccess	floor -> direction
>1236	Identifier	direction
>1237	Identifier	floor
>1238	Label	 
>1239	Identifier	raiseFloorToNearest
>1240	BreakStatement	 
>1241	ExpressionStatement	 
>1242	AssignmentExpr	floor -> floordestheight = P_FindNextHighestFloor ( sec , sec -> floorheight )
>1243	CallExpression	P_FindNextHighestFloor ( sec , sec -> floorheight )
>1244	ArgumentList	sec
>1245	Argument	sec -> floorheight
>1246	PtrMemberAccess	sec -> floorheight
>1247	Identifier	floorheight
>1248	Identifier	sec
>1249	Argument	sec
>1250	Identifier	sec
>1251	Callee	P_FindNextHighestFloor
>1252	Identifier	P_FindNextHighestFloor
>1253	PtrMemberAccess	floor -> floordestheight
>1254	Identifier	floordestheight
>1255	Identifier	floor
>1256	ExpressionStatement	 
>1257	AssignmentExpr	floor -> speed = FLOORSPEED * 4
>1258	MultiplicativeExpression	FLOORSPEED * 4
>1259	PrimaryExpression	4
>1260	Identifier	FLOORSPEED
>1261	PtrMemberAccess	floor -> speed
>1262	Identifier	speed
>1263	Identifier	floor
>1264	ExpressionStatement	 
>1265	AssignmentExpr	floor -> sector = sec
>1266	Identifier	sec
>1267	PtrMemberAccess	floor -> sector
>1268	Identifier	sector
>1269	Identifier	floor
>1270	ExpressionStatement	 
>1271	AssignmentExpr	floor -> direction = 1
>1272	PrimaryExpression	1
>1273	PtrMemberAccess	floor -> direction
>1274	Identifier	direction
>1275	Identifier	floor
>1276	Label	 
>1277	Identifier	raiseFloorTurbo
>1278	BreakStatement	 
>1279	ExpressionStatement	 
>1280	AssignmentExpr	floor -> floordestheight -= ( 8 * FRACUNIT ) * ( floortype == raiseFloorCrush )
>1281	MultiplicativeExpression	( 8 * FRACUNIT ) * ( floortype == raiseFloorCrush )
>1282	EqualityExpression	floortype == raiseFloorCrush
>1283	Identifier	raiseFloorCrush
>1284	Identifier	floortype
>1285	MultiplicativeExpression	8 * FRACUNIT
>1286	Identifier	FRACUNIT
>1287	PrimaryExpression	8
>1288	PtrMemberAccess	floor -> floordestheight
>1289	Identifier	floordestheight
>1290	Identifier	floor
>1291	IfStatement	if ( floor -> floordestheight > sec -> ceilingheight )
>1292	ExpressionStatement	 
>1293	AssignmentExpr	floor -> floordestheight = sec -> ceilingheight
>1294	PtrMemberAccess	sec -> ceilingheight
>1295	Identifier	ceilingheight
>1296	Identifier	sec
>1297	PtrMemberAccess	floor -> floordestheight
>1298	Identifier	floordestheight
>1299	Identifier	floor
>1300	Condition	 
>1301	RelationalExpression	floor -> floordestheight > sec -> ceilingheight
>1302	PtrMemberAccess	sec -> ceilingheight
>1303	Identifier	ceilingheight
>1304	Identifier	sec
>1305	PtrMemberAccess	floor -> floordestheight
>1306	Identifier	floordestheight
>1307	Identifier	floor
>1308	ExpressionStatement	 
>1309	AssignmentExpr	floor -> floordestheight = P_FindLowestCeilingSurrounding ( sec )
>1310	CallExpression	P_FindLowestCeilingSurrounding ( sec )
>1311	ArgumentList	sec
>1312	Argument	sec
>1313	Identifier	sec
>1314	Callee	P_FindLowestCeilingSurrounding
>1315	Identifier	P_FindLowestCeilingSurrounding
>1316	PtrMemberAccess	floor -> floordestheight
>1317	Identifier	floordestheight
>1318	Identifier	floor
>1319	ExpressionStatement	 
>1320	AssignmentExpr	floor -> speed = FLOORSPEED
>1321	Identifier	FLOORSPEED
>1322	PtrMemberAccess	floor -> speed
>1323	Identifier	speed
>1324	Identifier	floor
>1325	ExpressionStatement	 
>1326	AssignmentExpr	floor -> sector = sec
>1327	Identifier	sec
>1328	PtrMemberAccess	floor -> sector
>1329	Identifier	sector
>1330	Identifier	floor
>1331	ExpressionStatement	 
>1332	AssignmentExpr	floor -> direction = 1
>1333	PrimaryExpression	1
>1334	PtrMemberAccess	floor -> direction
>1335	Identifier	direction
>1336	Identifier	floor
>1337	Label	 
>1338	Identifier	raiseFloor
>1339	ExpressionStatement	 
>1340	AssignmentExpr	floor -> crush = true
>1341	Identifier	true
>1342	PtrMemberAccess	floor -> crush
>1343	Identifier	crush
>1344	Identifier	floor
>1345	Label	 
>1346	Identifier	raiseFloorCrush
>1347	BreakStatement	 
>1348	IfStatement	if ( floor -> floordestheight != sec -> floorheight )
>1349	ExpressionStatement	 
>1350	AssignmentExpr	floor -> floordestheight += 8 * FRACUNIT
>1351	MultiplicativeExpression	8 * FRACUNIT
>1352	Identifier	FRACUNIT
>1353	PrimaryExpression	8
>1354	PtrMemberAccess	floor -> floordestheight
>1355	Identifier	floordestheight
>1356	Identifier	floor
>1357	Condition	 
>1358	EqualityExpression	floor -> floordestheight != sec -> floorheight
>1359	PtrMemberAccess	sec -> floorheight
>1360	Identifier	floorheight
>1361	Identifier	sec
>1362	PtrMemberAccess	floor -> floordestheight
>1363	Identifier	floordestheight
>1364	Identifier	floor
>1365	ExpressionStatement	 
>1366	AssignmentExpr	floor -> floordestheight = P_FindHighestFloorSurrounding ( sec )
>1367	CallExpression	P_FindHighestFloorSurrounding ( sec )
>1368	ArgumentList	sec
>1369	Argument	sec
>1370	Identifier	sec
>1371	Callee	P_FindHighestFloorSurrounding
>1372	Identifier	P_FindHighestFloorSurrounding
>1373	PtrMemberAccess	floor -> floordestheight
>1374	Identifier	floordestheight
>1375	Identifier	floor
>1376	ExpressionStatement	 
>1377	AssignmentExpr	floor -> speed = FLOORSPEED * 4
>1378	MultiplicativeExpression	FLOORSPEED * 4
>1379	PrimaryExpression	4
>1380	Identifier	FLOORSPEED
>1381	PtrMemberAccess	floor -> speed
>1382	Identifier	speed
>1383	Identifier	floor
>1384	ExpressionStatement	 
>1385	AssignmentExpr	floor -> sector = sec
>1386	Identifier	sec
>1387	PtrMemberAccess	floor -> sector
>1388	Identifier	sector
>1389	Identifier	floor
>1390	ExpressionStatement	 
>1391	AssignmentExpr	floor -> direction = - 1
>1392	UnaryOp	- 1
>1393	PrimaryExpression	1
>1394	UnaryOperator	-
>1395	PtrMemberAccess	floor -> direction
>1396	Identifier	direction
>1397	Identifier	floor
>1398	Label	 
>1399	Identifier	turboLower
>1400	BreakStatement	 
>1401	ExpressionStatement	 
>1402	AssignmentExpr	floor -> floordestheight = P_FindLowestFloorSurrounding ( sec )
>1403	CallExpression	P_FindLowestFloorSurrounding ( sec )
>1404	ArgumentList	sec
>1405	Argument	sec
>1406	Identifier	sec
>1407	Callee	P_FindLowestFloorSurrounding
>1408	Identifier	P_FindLowestFloorSurrounding
>1409	PtrMemberAccess	floor -> floordestheight
>1410	Identifier	floordestheight
>1411	Identifier	floor
>1412	ExpressionStatement	 
>1413	AssignmentExpr	floor -> speed = FLOORSPEED
>1414	Identifier	FLOORSPEED
>1415	PtrMemberAccess	floor -> speed
>1416	Identifier	speed
>1417	Identifier	floor
>1418	ExpressionStatement	 
>1419	AssignmentExpr	floor -> sector = sec
>1420	Identifier	sec
>1421	PtrMemberAccess	floor -> sector
>1422	Identifier	sector
>1423	Identifier	floor
>1424	ExpressionStatement	 
>1425	AssignmentExpr	floor -> direction = - 1
>1426	UnaryOp	- 1
>1427	PrimaryExpression	1
>1428	UnaryOperator	-
>1429	PtrMemberAccess	floor -> direction
>1430	Identifier	direction
>1431	Identifier	floor
>1432	Label	 
>1433	Identifier	lowerFloorToLowest
>1434	BreakStatement	 
>1435	ExpressionStatement	 
>1436	AssignmentExpr	floor -> floordestheight = P_FindHighestFloorSurrounding ( sec )
>1437	CallExpression	P_FindHighestFloorSurrounding ( sec )
>1438	ArgumentList	sec
>1439	Argument	sec
>1440	Identifier	sec
>1441	Callee	P_FindHighestFloorSurrounding
>1442	Identifier	P_FindHighestFloorSurrounding
>1443	PtrMemberAccess	floor -> floordestheight
>1444	Identifier	floordestheight
>1445	Identifier	floor
>1446	ExpressionStatement	 
>1447	AssignmentExpr	floor -> speed = FLOORSPEED
>1448	Identifier	FLOORSPEED
>1449	PtrMemberAccess	floor -> speed
>1450	Identifier	speed
>1451	Identifier	floor
>1452	ExpressionStatement	 
>1453	AssignmentExpr	floor -> sector = sec
>1454	Identifier	sec
>1455	PtrMemberAccess	floor -> sector
>1456	Identifier	sector
>1457	Identifier	floor
>1458	ExpressionStatement	 
>1459	AssignmentExpr	floor -> direction = - 1
>1460	UnaryOp	- 1
>1461	PrimaryExpression	1
>1462	UnaryOperator	-
>1463	PtrMemberAccess	floor -> direction
>1464	Identifier	direction
>1465	Identifier	floor
>1466	Label	 
>1467	Identifier	lowerFloor
>1468	Condition	 
>1469	Identifier	floortype
>1470	ExpressionStatement	 
>1471	AssignmentExpr	floor -> crush = false
>1472	Identifier	false
>1473	PtrMemberAccess	floor -> crush
>1474	Identifier	crush
>1475	Identifier	floor
>1476	ExpressionStatement	 
>1477	AssignmentExpr	floor -> type = floortype
>1478	Identifier	floortype
>1479	PtrMemberAccess	floor -> type
>1480	Identifier	type
>1481	Identifier	floor
>1482	ExpressionStatement	 
>1483	AssignmentExpr	floor -> thinker . function . acp1 = ( actionf_p1 ) T_MoveFloor
>1484	CastExpression	( actionf_p1 ) T_MoveFloor
>1485	Identifier	T_MoveFloor
>1486	CastTarget	actionf_p1
>1487	MemberAccess	floor -> thinker . function . acp1
>1488	Identifier	acp1
>1489	MemberAccess	floor -> thinker . function
>1490	Identifier	function
>1491	PtrMemberAccess	floor -> thinker
>1492	Identifier	thinker
>1493	Identifier	floor
>1494	ExpressionStatement	 
>1495	AssignmentExpr	sec -> specialdata = floor
>1496	Identifier	floor
>1497	PtrMemberAccess	sec -> specialdata
>1498	Identifier	specialdata
>1499	Identifier	sec
>1500	ExpressionStatement	 
>1501	CallExpression	P_AddThinker ( & floor -> thinker )
>1502	ArgumentList	& floor -> thinker
>1503	Argument	& floor -> thinker
>1504	UnaryOp	& floor -> thinker
>1505	PtrMemberAccess	floor -> thinker
>1506	Identifier	thinker
>1507	Identifier	floor
>1508	UnaryOperator	&
>1509	Callee	P_AddThinker
>1510	Identifier	P_AddThinker
>1511	ExpressionStatement	 
>1512	AssignmentExpr	floor = ( floormove_t * ) DoomLib 
>1513	CastExpression	( floormove_t * ) DoomLib 
>1514	CallExpression	DoomLib 
>1515	ArgumentList	sizeof ( * floor )
>1516	Argument	0
>1517	PrimaryExpression	0
>1518	Argument	PU_LEVEL
>1519	Identifier	PU_LEVEL
>1520	Argument	sizeof ( * floor )
>1521	SizeofExpr	sizeof ( * floor )
>1522	UnaryOp	* floor
>1523	Identifier	floor
>1524	UnaryOperator	*
>1525	Sizeof	sizeof
>1526	Callee	DoomLib 
>1527	Identifier	DoomLib 
>1528	CastTarget	floormove_t *
>1529	Identifier	floor
>1530	ExpressionStatement	 
>1531	AssignmentExpr	rtn = 1
>1532	PrimaryExpression	1
>1533	Identifier	rtn
>1534	IfStatement	if ( sec -> specialdata )
>1535	ContinueStatement	 
>1536	Condition	 
>1537	PtrMemberAccess	sec -> specialdata
>1538	Identifier	specialdata
>1539	Identifier	sec
>1540	ExpressionStatement	 
>1541	ArrayIndexing	g -> sectors [ secnum ]
>1542	Identifier	secnum
>1543	PtrMemberAccess	g -> sectors
>1544	Identifier	sectors
>1545	Identifier	g
>1546	Statement	 
>1547	Statement	 
>1548	Statement	 
>1549	Statement	 
>1550	Condition	 
>1551	RelationalExpression	( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0
>1552	PrimaryExpression	0
>1553	AssignmentExpr	secnum = P_FindSectorFromLineTag ( line , secnum )
>1554	CallExpression	P_FindSectorFromLineTag ( line , secnum )
>1555	ArgumentList	line
>1556	Argument	secnum
>1557	Identifier	secnum
>1558	Argument	line
>1559	Identifier	line
>1560	Callee	P_FindSectorFromLineTag
>1561	Identifier	P_FindSectorFromLineTag
>1562	Identifier	secnum
>1563	ExpressionStatement	 
>1564	AssignmentExpr	rtn = 0
>1565	PrimaryExpression	0
>1566	Identifier	rtn
>1567	ExpressionStatement	 
>1568	AssignmentExpr	secnum = - 1
>1569	UnaryOp	- 1
>1570	PrimaryExpression	1
>1571	UnaryOperator	-
>1572	Identifier	secnum
>1573	IdentifierDeclStatement	 
>1574	IdentifierDecl	* floor
>1575	Identifier	floor
>1576	IdentifierDeclType	floormove_t *
>1577	IdentifierDeclStatement	 
>1578	IdentifierDecl	* sec
>1579	Identifier	sec
>1580	IdentifierDeclType	sector_t *
>1581	IdentifierDeclStatement	 
>1582	IdentifierDecl	i
>1583	Identifier	i
>1584	IdentifierDeclType	int
>1585	IdentifierDeclStatement	 
>1586	IdentifierDecl	rtn
>1587	Identifier	rtn
>1588	IdentifierDeclType	int
>1589	IdentifierDeclStatement	 
>1590	IdentifierDecl	secnum
>1591	Identifier	secnum
>1592	IdentifierDeclType	int
>1658	FunctionDef	EV_BuildStairs (line_t * line , stair_e type)
>1659	ParameterList	line_t * line , stair_e type
>1660	Parameter	 
>1661	Identifier	type
>1662	ParameterType	stair_e
>1663	Parameter	 
>1664	Identifier	line
>1665	ParameterType	line_t *
>1666	ReturnType	int
>1667	CompoundStatement	 
>1668	ReturnStatement	 
>1669	Identifier	rtn
>1670	WhileStatement	while ( ( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0 )
>1671	CompoundStatement	 
>1672	DoStatement	do
>1673	Condition	 
>1674	Identifier	ok
>1675	CompoundStatement	 
>1676	ForStatement	for ( i = 0 ; i < sec -> linecount ; i ++ )
>1677	CompoundStatement	 
>1678	BreakStatement	 
>1679	ExpressionStatement	 
>1680	AssignmentExpr	ok = 1
>1681	PrimaryExpression	1
>1682	Identifier	ok
>1683	ExpressionStatement	 
>1684	AssignmentExpr	floor -> floordestheight = height
>1685	Identifier	height
>1686	PtrMemberAccess	floor -> floordestheight
>1687	Identifier	floordestheight
>1688	Identifier	floor
>1689	ExpressionStatement	 
>1690	AssignmentExpr	floor -> speed = speed
>1691	Identifier	speed
>1692	PtrMemberAccess	floor -> speed
>1693	Identifier	speed
>1694	Identifier	floor
>1695	ExpressionStatement	 
>1696	AssignmentExpr	floor -> sector = sec
>1697	Identifier	sec
>1698	PtrMemberAccess	floor -> sector
>1699	Identifier	sector
>1700	Identifier	floor
>1701	ExpressionStatement	 
>1702	AssignmentExpr	floor -> direction = 1
>1703	PrimaryExpression	1
>1704	PtrMemberAccess	floor -> direction
>1705	Identifier	direction
>1706	Identifier	floor
>1707	ExpressionStatement	 
>1708	AssignmentExpr	floor -> thinker . function . acp1 = ( actionf_p1 ) T_MoveFloor
>1709	CastExpression	( actionf_p1 ) T_MoveFloor
>1710	Identifier	T_MoveFloor
>1711	CastTarget	actionf_p1
>1712	MemberAccess	floor -> thinker . function . acp1
>1713	Identifier	acp1
>1714	MemberAccess	floor -> thinker . function
>1715	Identifier	function
>1716	PtrMemberAccess	floor -> thinker
>1717	Identifier	thinker
>1718	Identifier	floor
>1719	ExpressionStatement	 
>1720	AssignmentExpr	sec -> specialdata = floor
>1721	Identifier	floor
>1722	PtrMemberAccess	sec -> specialdata
>1723	Identifier	specialdata
>1724	Identifier	sec
>1725	ExpressionStatement	 
>1726	CallExpression	P_AddThinker ( & floor -> thinker )
>1727	ArgumentList	& floor -> thinker
>1728	Argument	& floor -> thinker
>1729	UnaryOp	& floor -> thinker
>1730	PtrMemberAccess	floor -> thinker
>1731	Identifier	thinker
>1732	Identifier	floor
>1733	UnaryOperator	&
>1734	Callee	P_AddThinker
>1735	Identifier	P_AddThinker
>1736	ExpressionStatement	 
>1737	AssignmentExpr	floor = ( floormove_t * ) DoomLib 
>1738	CastExpression	( floormove_t * ) DoomLib 
>1739	CallExpression	DoomLib 
>1740	ArgumentList	sizeof ( * floor )
>1741	Argument	0
>1742	PrimaryExpression	0
>1743	Argument	PU_LEVEL
>1744	Identifier	PU_LEVEL
>1745	Argument	sizeof ( * floor )
>1746	SizeofExpr	sizeof ( * floor )
>1747	UnaryOp	* floor
>1748	Identifier	floor
>1749	UnaryOperator	*
>1750	Sizeof	sizeof
>1751	Callee	DoomLib 
>1752	Identifier	DoomLib 
>1753	CastTarget	floormove_t *
>1754	Identifier	floor
>1755	ExpressionStatement	 
>1756	AssignmentExpr	secnum = newsecnum
>1757	Identifier	newsecnum
>1758	Identifier	secnum
>1759	ExpressionStatement	 
>1760	AssignmentExpr	sec = tsec
>1761	Identifier	tsec
>1762	Identifier	sec
>1763	IfStatement	if ( tsec -> specialdata )
>1764	ContinueStatement	 
>1765	Condition	 
>1766	PtrMemberAccess	tsec -> specialdata
>1767	Identifier	specialdata
>1768	Identifier	tsec
>1769	ExpressionStatement	 
>1770	AssignmentExpr	height += stairsize
>1771	Identifier	stairsize
>1772	Identifier	height
>1773	IfStatement	if ( tsec -> floorpic != texture )
>1774	ContinueStatement	 
>1775	Condition	 
>1776	EqualityExpression	tsec -> floorpic != texture
>1777	Identifier	texture
>1778	PtrMemberAccess	tsec -> floorpic
>1779	Identifier	floorpic
>1780	Identifier	tsec
>1781	ExpressionStatement	 
>1782	PtrMemberAccess	g -> sectors
>1783	Identifier	sectors
>1784	Identifier	g
>1785	Statement	 
>1786	Statement	 
>1787	Statement	 
>1788	Statement	 
>1789	Statement	 
>1790	ExpressionStatement	 
>1791	AssignmentExpr	tsec = ( sec -> lines [ i ] ) -> backsector
>1792	PtrMemberAccess	( sec -> lines [ i ] ) -> backsector
>1793	Identifier	backsector
>1794	ArrayIndexing	sec -> lines [ i ]
>1795	Identifier	i
>1796	PtrMemberAccess	sec -> lines
>1797	Identifier	lines
>1798	Identifier	sec
>1799	Identifier	tsec
>1800	IfStatement	if ( secnum != newsecnum )
>1801	ContinueStatement	 
>1802	Condition	 
>1803	EqualityExpression	secnum != newsecnum
>1804	Identifier	newsecnum
>1805	Identifier	secnum
>1806	ExpressionStatement	 
>1807	PtrMemberAccess	g -> sectors
>1808	Identifier	sectors
>1809	Identifier	g
>1810	Statement	 
>1811	Statement	 
>1812	Statement	 
>1813	Statement	 
>1814	Statement	 
>1815	ExpressionStatement	 
>1816	AssignmentExpr	tsec = ( sec -> lines [ i ] ) -> frontsector
>1817	PtrMemberAccess	( sec -> lines [ i ] ) -> frontsector
>1818	Identifier	frontsector
>1819	ArrayIndexing	sec -> lines [ i ]
>1820	Identifier	i
>1821	PtrMemberAccess	sec -> lines
>1822	Identifier	lines
>1823	Identifier	sec
>1824	Identifier	tsec
>1825	IfStatement	if ( ! ( ( sec -> lines [ i ] ) -> flags & ML_TWOSIDED ) )
>1826	ContinueStatement	 
>1827	Condition	 
>1828	UnaryOp	! ( ( sec -> lines [ i ] ) -> flags & ML_TWOSIDED )
>1829	BitAndExpression	( sec -> lines [ i ] ) -> flags & ML_TWOSIDED
>1830	Identifier	ML_TWOSIDED
>1831	PtrMemberAccess	( sec -> lines [ i ] ) -> flags
>1832	Identifier	flags
>1833	ArrayIndexing	sec -> lines [ i ]
>1834	Identifier	i
>1835	PtrMemberAccess	sec -> lines
>1836	Identifier	lines
>1837	Identifier	sec
>1838	UnaryOperator	!
>1839	IncDecOp	 
>1840	IncDec	++
>1841	Identifier	i
>1842	Condition	 
>1843	RelationalExpression	i < sec -> linecount
>1844	PtrMemberAccess	sec -> linecount
>1845	Identifier	linecount
>1846	Identifier	sec
>1847	Identifier	i
>1848	ForInit	 
>1849	AssignmentExpr	i = 0
>1850	PrimaryExpression	0
>1851	Identifier	i
>1852	ExpressionStatement	 
>1853	AssignmentExpr	ok = 0
>1854	PrimaryExpression	0
>1855	Identifier	ok
>1856	ExpressionStatement	 
>1857	AssignmentExpr	texture = sec -> floorpic
>1858	PtrMemberAccess	sec -> floorpic
>1859	Identifier	floorpic
>1860	Identifier	sec
>1861	Identifier	texture
>1862	ExpressionStatement	 
>1863	AssignmentExpr	floor -> floordestheight = height
>1864	Identifier	height
>1865	PtrMemberAccess	floor -> floordestheight
>1866	Identifier	floordestheight
>1867	Identifier	floor
>1868	ExpressionStatement	 
>1869	AssignmentExpr	height = sec -> floorheight + stairsize
>1870	AdditiveExpression	sec -> floorheight + stairsize
>1871	Identifier	stairsize
>1872	PtrMemberAccess	sec -> floorheight
>1873	Identifier	floorheight
>1874	Identifier	sec
>1875	Identifier	height
>1876	ExpressionStatement	 
>1877	AssignmentExpr	floor -> speed = speed
>1878	Identifier	speed
>1879	PtrMemberAccess	floor -> speed
>1880	Identifier	speed
>1881	Identifier	floor
>1882	SwitchStatement	switch ( type )
>1883	CompoundStatement	 
>1884	BreakStatement	 
>1885	ExpressionStatement	 
>1886	AssignmentExpr	stairsize = 16 * FRACUNIT
>1887	MultiplicativeExpression	16 * FRACUNIT
>1888	Identifier	FRACUNIT
>1889	PrimaryExpression	16
>1890	Identifier	stairsize
>1891	ExpressionStatement	 
>1892	AssignmentExpr	speed = FLOORSPEED * 4
>1893	MultiplicativeExpression	FLOORSPEED * 4
>1894	PrimaryExpression	4
>1895	Identifier	FLOORSPEED
>1896	Identifier	speed
>1897	Label	 
>1898	Identifier	turbo16
>1899	BreakStatement	 
>1900	ExpressionStatement	 
>1901	AssignmentExpr	stairsize = 8 * FRACUNIT
>1902	MultiplicativeExpression	8 * FRACUNIT
>1903	Identifier	FRACUNIT
>1904	PrimaryExpression	8
>1905	Identifier	stairsize
>1906	ExpressionStatement	 
>1907	AssignmentExpr	speed = FLOORSPEED / 4
>1908	MultiplicativeExpression	FLOORSPEED / 4
>1909	PrimaryExpression	4
>1910	Identifier	FLOORSPEED
>1911	Identifier	speed
>1912	Label	 
>1913	Identifier	build8
>1914	Condition	 
>1915	Identifier	type
>1916	ExpressionStatement	 
>1917	AssignmentExpr	floor -> sector = sec
>1918	Identifier	sec
>1919	PtrMemberAccess	floor -> sector
>1920	Identifier	sector
>1921	Identifier	floor
>1922	ExpressionStatement	 
>1923	AssignmentExpr	floor -> direction = 1
>1924	PrimaryExpression	1
>1925	PtrMemberAccess	floor -> direction
>1926	Identifier	direction
>1927	Identifier	floor
>1928	ExpressionStatement	 
>1929	AssignmentExpr	floor -> thinker . function . acp1 = ( actionf_p1 ) T_MoveFloor
>1930	CastExpression	( actionf_p1 ) T_MoveFloor
>1931	Identifier	T_MoveFloor
>1932	CastTarget	actionf_p1
>1933	MemberAccess	floor -> thinker . function . acp1
>1934	Identifier	acp1
>1935	MemberAccess	floor -> thinker . function
>1936	Identifier	function
>1937	PtrMemberAccess	floor -> thinker
>1938	Identifier	thinker
>1939	Identifier	floor
>1940	ExpressionStatement	 
>1941	AssignmentExpr	sec -> specialdata = floor
>1942	Identifier	floor
>1943	PtrMemberAccess	sec -> specialdata
>1944	Identifier	specialdata
>1945	Identifier	sec
>1946	ExpressionStatement	 
>1947	CallExpression	P_AddThinker ( & floor -> thinker )
>1948	ArgumentList	& floor -> thinker
>1949	Argument	& floor -> thinker
>1950	UnaryOp	& floor -> thinker
>1951	PtrMemberAccess	floor -> thinker
>1952	Identifier	thinker
>1953	Identifier	floor
>1954	UnaryOperator	&
>1955	Callee	P_AddThinker
>1956	Identifier	P_AddThinker
>1957	ExpressionStatement	 
>1958	AssignmentExpr	floor = ( floormove_t * ) DoomLib 
>1959	CastExpression	( floormove_t * ) DoomLib 
>1960	CallExpression	DoomLib 
>1961	ArgumentList	sizeof ( * floor )
>1962	Argument	0
>1963	PrimaryExpression	0
>1964	Argument	PU_LEVEL
>1965	Identifier	PU_LEVEL
>1966	Argument	sizeof ( * floor )
>1967	SizeofExpr	sizeof ( * floor )
>1968	UnaryOp	* floor
>1969	Identifier	floor
>1970	UnaryOperator	*
>1971	Sizeof	sizeof
>1972	Callee	DoomLib 
>1973	Identifier	DoomLib 
>1974	CastTarget	floormove_t *
>1975	Identifier	floor
>1976	ExpressionStatement	 
>1977	AssignmentExpr	rtn = 1
>1978	PrimaryExpression	1
>1979	Identifier	rtn
>1980	IfStatement	if ( sec -> specialdata )
>1981	ContinueStatement	 
>1982	Condition	 
>1983	PtrMemberAccess	sec -> specialdata
>1984	Identifier	specialdata
>1985	Identifier	sec
>1986	ExpressionStatement	 
>1987	ArrayIndexing	g -> sectors [ secnum ]
>1988	Identifier	secnum
>1989	PtrMemberAccess	g -> sectors
>1990	Identifier	sectors
>1991	Identifier	g
>1992	Statement	 
>1993	Statement	 
>1994	Statement	 
>1995	Statement	 
>1996	Condition	 
>1997	RelationalExpression	( secnum = P_FindSectorFromLineTag ( line , secnum ) ) >= 0
>1998	PrimaryExpression	0
>1999	AssignmentExpr	secnum = P_FindSectorFromLineTag ( line , secnum )
>2000	CallExpression	P_FindSectorFromLineTag ( line , secnum )
>2001	ArgumentList	line
>2002	Argument	secnum
>2003	Identifier	secnum
>2004	Argument	line
>2005	Identifier	line
>2006	Callee	P_FindSectorFromLineTag
>2007	Identifier	P_FindSectorFromLineTag
>2008	Identifier	secnum
>2009	ExpressionStatement	 
>2010	AssignmentExpr	rtn = 0
>2011	PrimaryExpression	0
>2012	Identifier	rtn
>2013	ExpressionStatement	 
>2014	AssignmentExpr	secnum = - 1
>2015	UnaryOp	- 1
>2016	PrimaryExpression	1
>2017	UnaryOperator	-
>2018	Identifier	secnum
>2019	IdentifierDeclStatement	 
>2020	IdentifierDecl	speed = 0
>2021	AssignmentExpr	speed = 0
>2022	PrimaryExpression	0
>2023	Identifier	speed
>2024	Identifier	speed
>2025	IdentifierDeclType	fixed_t
>2026	IdentifierDeclStatement	 
>2027	IdentifierDecl	stairsize = 0
>2028	AssignmentExpr	stairsize = 0
>2029	PrimaryExpression	0
>2030	Identifier	stairsize
>2031	Identifier	stairsize
>2032	IdentifierDeclType	fixed_t
>2033	IdentifierDeclStatement	 
>2034	IdentifierDecl	* floor
>2035	Identifier	floor
>2036	IdentifierDeclType	floormove_t *
>2037	IdentifierDeclStatement	 
>2038	IdentifierDecl	* tsec
>2039	Identifier	tsec
>2040	IdentifierDeclType	sector_t *
>2041	IdentifierDeclStatement	 
>2042	IdentifierDecl	* sec
>2043	Identifier	sec
>2044	IdentifierDeclType	sector_t *
>2045	IdentifierDeclStatement	 
>2046	IdentifierDecl	rtn
>2047	Identifier	rtn
>2048	IdentifierDeclType	int
>2049	IdentifierDeclStatement	 
>2050	IdentifierDecl	ok
>2051	Identifier	ok
>2052	IdentifierDeclType	int
>2053	IdentifierDeclStatement	 
>2054	IdentifierDecl	texture
>2055	Identifier	texture
>2056	IdentifierDeclType	int
>2057	IdentifierDeclStatement	 
>2058	IdentifierDecl	newsecnum
>2059	Identifier	newsecnum
>2060	IdentifierDeclType	int
>2061	IdentifierDeclStatement	 
>2062	IdentifierDecl	i
>2063	Identifier	i
>2064	IdentifierDeclType	int
>2065	IdentifierDeclStatement	 
>2066	IdentifierDecl	height
>2067	Identifier	height
>2068	IdentifierDeclType	int
>2069	IdentifierDeclStatement	 
>2070	IdentifierDecl	secnum
>2071	Identifier	secnum
>2072	IdentifierDeclType	int
<3=24,23,4
<4=20,17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<20=21,22
<24=489,485,27,25
<25=26
<27=483,28
<28=482,257,256,255,30,29
<30=253,31
<31=252,251,250,139,138,137,33,32
<33=129,82,34
<34=35
<35=76,70,59,36
<36=55,37
<37=49,40,38
<38=39
<40=41
<41=47,42
<42=45,43
<43=44
<45=46
<47=48
<49=50
<50=52,51
<52=54,53
<55=56
<56=58,57
<59=60
<60=69,61
<61=67,62
<62=65,63
<63=64
<65=66
<67=68
<70=71
<71=73,72
<73=75,74
<76=77
<77=81,78
<78=80,79
<82=123,117,106,85,83
<83=84
<85=102,86
<86=96,87
<87=88
<88=94,89
<89=92,90
<90=91
<92=93
<94=95
<96=97
<97=99,98
<99=101,100
<102=103
<103=105,104
<106=107
<107=116,108
<108=114,109
<109=112,110
<110=111
<112=113
<114=115
<117=118
<118=120,119
<120=122,121
<123=124
<124=128,125
<125=127,126
<129=130
<130=132,131
<132=134,133
<134=136,135
<139=242,195,140
<140=141
<141=189,183,172,142
<142=168,143
<143=161,155,146,144
<144=145
<146=147
<147=153,148
<148=151,149
<149=150
<151=152
<153=154
<155=156
<156=158,157
<158=160,159
<161=164,162
<162=163
<164=165
<165=167,166
<168=169
<169=171,170
<172=173
<173=182,174
<174=180,175
<175=178,176
<176=177
<178=179
<180=181
<183=184
<184=186,185
<186=188,187
<189=190
<190=194,191
<191=193,192
<195=236,230,219,198,196
<196=197
<198=215,199
<199=209,200
<200=201
<201=207,202
<202=205,203
<203=204
<205=206
<207=208
<209=210
<210=212,211
<212=214,213
<215=216
<216=218,217
<219=220
<220=229,221
<221=227,222
<222=225,223
<223=224
<225=226
<227=228
<230=231
<231=233,232
<233=235,234
<236=237
<237=241,238
<238=240,239
<242=243
<243=245,244
<245=247,246
<247=249,248
<253=254
<257=480,258
<258=479,478,477,373,372,371,260,259
<260=363,316,261
<261=262
<262=310,304,293,263
<263=289,264
<264=282,276,267,265
<265=266
<267=268
<268=274,269
<269=272,270
<270=271
<272=273
<274=275
<276=277
<277=279,278
<279=281,280
<282=285,283
<283=284
<285=286
<286=288,287
<289=290
<290=292,291
<293=294
<294=303,295
<295=301,296
<296=299,297
<297=298
<299=300
<301=302
<304=305
<305=307,306
<307=309,308
<310=311
<311=315,312
<312=314,313
<316=357,351,340,319,317
<317=318
<319=336,320
<320=330,321
<321=322
<322=328,323
<323=326,324
<324=325
<326=327
<328=329
<330=331
<331=333,332
<333=335,334
<336=337
<337=339,338
<340=341
<341=350,342
<342=348,343
<343=346,344
<344=345
<346=347
<348=349
<351=352
<352=354,353
<354=356,355
<357=358
<358=362,359
<359=361,360
<363=364
<364=366,365
<366=368,367
<368=370,369
<373=469,422,374
<374=375
<375=416,410,399,376
<376=395,377
<377=389,380,378
<378=379
<380=381
<381=387,382
<382=385,383
<383=384
<385=386
<387=388
<389=390
<390=392,391
<392=394,393
<395=396
<396=398,397
<399=400
<400=409,401
<401=407,402
<402=405,403
<403=404
<405=406
<407=408
<410=411
<411=413,412
<413=415,414
<416=417
<417=421,418
<418=420,419
<422=463,457,446,425,423
<423=424
<425=442,426
<426=436,427
<427=428
<428=434,429
<429=432,430
<430=431
<432=433
<434=435
<436=437
<437=439,438
<439=441,440
<442=443
<443=445,444
<446=447
<447=456,448
<448=454,449
<449=452,450
<450=451
<452=453
<454=455
<457=458
<458=460,459
<460=462,461
<463=464
<464=468,465
<465=467,466
<469=470
<470=472,471
<472=474,473
<474=476,475
<480=481
<483=484
<485=486
<486=488,487
<489=490
<490=492,491
<512=518,517,513
<513=514
<514=516,515
<518=696,667,666,665,664,663,662,661,660,659,658,657,656,655,640,519
<519=636,520
<520=628,547,536,521
<521=522
<522=534,523
<523=526,524
<524=525
<526=527
<527=533,528
<528=530,529
<530=532,531
<534=535
<536=537
<537=545,538
<538=539
<539=540
<540=544,541
<541=543,542
<545=546
<547=622,590,548
<548=549
<549=582,550
<550=551
<551=578,552
<552=576,566,556,554,553
<554=555
<556=557
<557=561,558
<558=560,559
<561=563,562
<563=565,564
<566=567
<567=571,568
<568=570,569
<571=573,572
<573=575,574
<576=577
<578=579
<579=581,580
<582=583
<583=587,584
<584=586,585
<587=589,588
<590=591
<591=618,592
<592=616,606,596,594,593
<594=595
<596=597
<597=601,598
<598=600,599
<601=603,602
<603=605,604
<606=607
<607=611,608
<608=610,609
<611=613,612
<613=615,614
<616=617
<618=619
<619=621,620
<622=623
<623=625,624
<625=627,626
<628=629
<629=631,630
<631=633,632
<633=635,634
<636=637
<637=639,638
<640=641
<641=653,642
<642=645,643
<643=644
<645=646
<646=652,647
<647=649,648
<649=651,650
<653=654
<667=668
<668=695,669
<669=693,670
<670=689,685,681,677,675,671
<671=672
<672=674,673
<675=676
<677=678
<678=680,679
<681=682
<682=684,683
<685=686
<686=688,687
<689=690
<690=692,691
<693=694
<696=697
<697=699,698
<729=738,737,730
<730=734,731
<731=733,732
<734=736,735
<738=1589,1585,1581,1577,1573,1567,1563,741,739
<739=740
<741=1550,742
<742=1549,1548,1547,1546,1540,1534,1530,1511,1500,1494,1482,1476,1470,743
<743=1468,744
<744=1466,1458,1452,1446,1435,1434,1432,1424,1418,1412,1401,1400,1398,1390,1384,1376,1365,1348,1347,1345,1339,1337,1331,745,746,748,877,885,896,902,908,916,918,919,1077,1079,1080,1090,1100,1114,1120,1126,1132,1134,1135,1149,1155,1161,1167,1169,1170,1184,1190,1196,1202,1204,1205,1220,1226,1232,1238,1240,1241,1256,1264,1270,1276,1278,1279,1291,1308,1319,1325
<746=747
<748=873,867,864,749
<749=750
<750=855,793,751
<751=752
<752=780,753
<753=772,754
<754=764,756,755
<756=757
<757=761,758
<758=760,759
<761=763,762
<764=765
<765=769,766
<766=768,767
<769=771,770
<772=773
<773=777,774
<774=776,775
<777=779,778
<780=781
<781=792,782
<782=790,783
<783=788,786,784
<784=785
<786=787
<788=789
<790=791
<793=854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,794
<794=822,795
<795=814,796
<796=806,798,797
<798=799
<799=803,800
<800=802,801
<803=805,804
<806=807
<807=811,808
<808=810,809
<811=813,812
<814=815
<815=819,816
<816=818,817
<819=821,820
<822=823
<823=834,824
<824=832,825
<825=830,828,826
<826=827
<828=829
<830=831
<832=833
<855=856
<856=862,857
<857=860,858
<858=859
<860=861
<862=863
<864=866,865
<867=868
<868=872,869
<869=871,870
<873=874
<874=876,875
<877=878
<878=882,879
<879=881,880
<882=884,883
<885=886
<886=893,887
<887=891,888
<888=889
<889=890
<891=892
<893=895,894
<896=897
<897=899,898
<899=901,900
<902=903
<903=905,904
<905=907,906
<908=909
<909=913,910
<910=912,911
<913=915,914
<916=917
<919=1070,1066,1060,1054,1048,932,920
<920=921
<921=929,922
<922=924,923
<924=926,925
<926=928,927
<929=931,930
<932=1044,1038,1035,933
<933=934
<934=1026,935
<935=1013,1005,1004,1003,1002,1001,1000,999,998,997,996,995,994,993,992,991,990,989,981,968,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,936
<936=937
<937=941,938
<938=940,939
<941=943,942
<960=962,961
<962=963
<963=965,964
<965=967,966
<968=969
<969=980,970
<970=978,971
<971=976,974,972
<972=973
<974=975
<976=977
<978=979
<981=982
<982=986,983
<983=985,984
<986=988,987
<1005=1007,1006
<1007=1008
<1008=1010,1009
<1010=1012,1011
<1013=1014
<1014=1025,1015
<1015=1023,1016
<1016=1021,1019,1017
<1017=1018
<1019=1020
<1021=1022
<1023=1024
<1026=1027
<1027=1033,1028
<1028=1031,1029
<1029=1030
<1031=1032
<1033=1034
<1035=1037,1036
<1038=1039
<1039=1043,1040
<1040=1042,1041
<1044=1045
<1045=1047,1046
<1048=1049
<1049=1051,1050
<1051=1053,1052
<1054=1055
<1055=1057,1056
<1057=1059,1058
<1060=1061
<1061=1063,1062
<1063=1065,1064
<1066=1067
<1067=1069,1068
<1070=1071
<1071=1076,1075,1072
<1072=1074,1073
<1077=1078
<1080=1081
<1081=1087,1082
<1082=1084,1083
<1084=1086,1085
<1087=1089,1088
<1090=1091
<1091=1097,1092
<1092=1094,1093
<1094=1096,1095
<1097=1099,1098
<1100=1101
<1101=1111,1102
<1102=1106,1103
<1103=1105,1104
<1106=1108,1107
<1108=1110,1109
<1111=1113,1112
<1114=1115
<1115=1117,1116
<1117=1119,1118
<1120=1121
<1121=1123,1122
<1123=1125,1124
<1126=1127
<1127=1129,1128
<1129=1131,1130
<1132=1133
<1135=1136
<1136=1146,1137
<1137=1141,1138
<1138=1140,1139
<1141=1143,1142
<1143=1145,1144
<1146=1148,1147
<1149=1150
<1150=1152,1151
<1152=1154,1153
<1155=1156
<1156=1158,1157
<1158=1160,1159
<1161=1162
<1162=1164,1163
<1164=1166,1165
<1167=1168
<1170=1171
<1171=1181,1172
<1172=1176,1173
<1173=1175,1174
<1176=1178,1177
<1178=1180,1179
<1181=1183,1182
<1184=1185
<1185=1187,1186
<1187=1189,1188
<1190=1191
<1191=1193,1192
<1193=1195,1194
<1196=1197
<1197=1199,1198
<1199=1201,1200
<1202=1203
<1205=1206
<1206=1217,1207
<1207=1215,1208
<1208=1213,1209
<1209=1210
<1210=1212,1211
<1213=1214
<1215=1216
<1217=1219,1218
<1220=1221
<1221=1223,1222
<1223=1225,1224
<1226=1227
<1227=1229,1228
<1229=1231,1230
<1232=1233
<1233=1235,1234
<1235=1237,1236
<1238=1239
<1241=1242
<1242=1253,1243
<1243=1251,1244
<1244=1249,1245
<1245=1246
<1246=1248,1247
<1249=1250
<1251=1252
<1253=1255,1254
<1256=1257
<1257=1261,1258
<1258=1260,1259
<1261=1263,1262
<1264=1265
<1265=1267,1266
<1267=1269,1268
<1270=1271
<1271=1273,1272
<1273=1275,1274
<1276=1277
<1279=1280
<1280=1288,1281
<1281=1285,1282
<1282=1284,1283
<1285=1287,1286
<1288=1290,1289
<1291=1300,1292
<1292=1293
<1293=1297,1294
<1294=1296,1295
<1297=1299,1298
<1300=1301
<1301=1305,1302
<1302=1304,1303
<1305=1307,1306
<1308=1309
<1309=1316,1310
<1310=1314,1311
<1311=1312
<1312=1313
<1314=1315
<1316=1318,1317
<1319=1320
<1320=1322,1321
<1322=1324,1323
<1325=1326
<1326=1328,1327
<1328=1330,1329
<1331=1332
<1332=1334,1333
<1334=1336,1335
<1337=1338
<1339=1340
<1340=1342,1341
<1342=1344,1343
<1345=1346
<1348=1357,1349
<1349=1350
<1350=1354,1351
<1351=1353,1352
<1354=1356,1355
<1357=1358
<1358=1362,1359
<1359=1361,1360
<1362=1364,1363
<1365=1366
<1366=1373,1367
<1367=1371,1368
<1368=1369
<1369=1370
<1371=1372
<1373=1375,1374
<1376=1377
<1377=1381,1378
<1378=1380,1379
<1381=1383,1382
<1384=1385
<1385=1387,1386
<1387=1389,1388
<1390=1391
<1391=1395,1392
<1392=1394,1393
<1395=1397,1396
<1398=1399
<1401=1402
<1402=1409,1403
<1403=1407,1404
<1404=1405
<1405=1406
<1407=1408
<1409=1411,1410
<1412=1413
<1413=1415,1414
<1415=1417,1416
<1418=1419
<1419=1421,1420
<1421=1423,1422
<1424=1425
<1425=1429,1426
<1426=1428,1427
<1429=1431,1430
<1432=1433
<1435=1436
<1436=1443,1437
<1437=1441,1438
<1438=1439
<1439=1440
<1441=1442
<1443=1445,1444
<1446=1447
<1447=1449,1448
<1449=1451,1450
<1452=1453
<1453=1455,1454
<1455=1457,1456
<1458=1459
<1459=1463,1460
<1460=1462,1461
<1463=1465,1464
<1466=1467
<1468=1469
<1470=1471
<1471=1473,1472
<1473=1475,1474
<1476=1477
<1477=1479,1478
<1479=1481,1480
<1482=1483
<1483=1487,1484
<1484=1486,1485
<1487=1489,1488
<1489=1491,1490
<1491=1493,1492
<1494=1495
<1495=1497,1496
<1497=1499,1498
<1500=1501
<1501=1509,1502
<1502=1503
<1503=1504
<1504=1508,1505
<1505=1507,1506
<1509=1510
<1511=1512
<1512=1529,1513
<1513=1528,1514
<1514=1526,1515
<1515=1520,1518,1516
<1516=1517
<1518=1519
<1520=1521
<1521=1525,1522
<1522=1524,1523
<1526=1527
<1530=1531
<1531=1533,1532
<1534=1536,1535
<1536=1537
<1537=1539,1538
<1540=1541
<1541=1543,1542
<1543=1545,1544
<1550=1551
<1551=1553,1552
<1553=1562,1554
<1554=1560,1555
<1555=1558,1556
<1556=1557
<1558=1559
<1560=1561
<1563=1564
<1564=1566,1565
<1567=1568
<1568=1572,1569
<1569=1571,1570
<1573=1574
<1574=1576,1575
<1577=1578
<1578=1580,1579
<1581=1582
<1582=1584,1583
<1585=1586
<1586=1588,1587
<1589=1590
<1590=1592,1591
<1658=1667,1666,1659
<1659=1663,1660
<1660=1662,1661
<1663=1665,1664
<1667=2069,2065,2061,2057,2053,2049,2045,2041,2037,2033,2026,2019,2013,2009,1670,1668
<1668=1669
<1670=1996,1671
<1671=1995,1994,1993,1992,1986,1980,1976,1957,1946,1940,1928,1922,1916,1882,1876,1868,1862,1856,1672
<1672=1675,1673
<1673=1674
<1675=1852,1676
<1676=1848,1842,1839,1677
<1677=1825,1815,1814,1813,1812,1811,1810,1806,1800,1790,1789,1788,1787,1786,1785,1781,1773,1769,1763,1759,1755,1736,1725,1719,1707,1701,1695,1689,1683,1679,1678
<1679=1680
<1680=1682,1681
<1683=1684
<1684=1686,1685
<1686=1688,1687
<1689=1690
<1690=1692,1691
<1692=1694,1693
<1695=1696
<1696=1698,1697
<1698=1700,1699
<1701=1702
<1702=1704,1703
<1704=1706,1705
<1707=1708
<1708=1712,1709
<1709=1711,1710
<1712=1714,1713
<1714=1716,1715
<1716=1718,1717
<1719=1720
<1720=1722,1721
<1722=1724,1723
<1725=1726
<1726=1734,1727
<1727=1728
<1728=1729
<1729=1733,1730
<1730=1732,1731
<1734=1735
<1736=1737
<1737=1754,1738
<1738=1753,1739
<1739=1751,1740
<1740=1745,1743,1741
<1741=1742
<1743=1744
<1745=1746
<1746=1750,1747
<1747=1749,1748
<1751=1752
<1755=1756
<1756=1758,1757
<1759=1760
<1760=1762,1761
<1763=1765,1764
<1765=1766
<1766=1768,1767
<1769=1770
<1770=1772,1771
<1773=1775,1774
<1775=1776
<1776=1778,1777
<1778=1780,1779
<1781=1782
<1782=1784,1783
<1790=1791
<1791=1799,1792
<1792=1794,1793
<1794=1796,1795
<1796=1798,1797
<1800=1802,1801
<1802=1803
<1803=1805,1804
<1806=1807
<1807=1809,1808
<1815=1816
<1816=1824,1817
<1817=1819,1818
<1819=1821,1820
<1821=1823,1822
<1825=1827,1826
<1827=1828
<1828=1838,1829
<1829=1831,1830
<1831=1833,1832
<1833=1835,1834
<1835=1837,1836
<1839=1841,1840
<1842=1843
<1843=1847,1844
<1844=1846,1845
<1848=1849
<1849=1851,1850
<1852=1853
<1853=1855,1854
<1856=1857
<1857=1861,1858
<1858=1860,1859
<1862=1863
<1863=1865,1864
<1865=1867,1866
<1868=1869
<1869=1875,1870
<1870=1872,1871
<1872=1874,1873
<1876=1877
<1877=1879,1878
<1879=1881,1880
<1882=1914,1883
<1883=1912,1906,1900,1899,1897,1891,1885,1884
<1885=1886
<1886=1890,1887
<1887=1889,1888
<1891=1892
<1892=1896,1893
<1893=1895,1894
<1897=1898
<1900=1901
<1901=1905,1902
<1902=1904,1903
<1906=1907
<1907=1911,1908
<1908=1910,1909
<1912=1913
<1914=1915
<1916=1917
<1917=1919,1918
<1919=1921,1920
<1922=1923
<1923=1925,1924
<1925=1927,1926
<1928=1929
<1929=1933,1930
<1930=1932,1931
<1933=1935,1934
<1935=1937,1936
<1937=1939,1938
<1940=1941
<1941=1943,1942
<1943=1945,1944
<1946=1947
<1947=1955,1948
<1948=1949
<1949=1950
<1950=1954,1951
<1951=1953,1952
<1955=1956
<1957=1958
<1958=1975,1959
<1959=1974,1960
<1960=1972,1961
<1961=1966,1964,1962
<1962=1963
<1964=1965
<1966=1967
<1967=1971,1968
<1968=1970,1969
<1972=1973
<1976=1977
<1977=1979,1978
<1980=1982,1981
<1982=1983
<1983=1985,1984
<1986=1987
<1987=1989,1988
<1989=1991,1990
<1996=1997
<1997=1999,1998
<1999=2008,2000
<2000=2006,2001
<2001=2004,2002
<2002=2003
<2004=2005
<2006=2007
<2009=2010
<2010=2012,2011
<2013=2014
<2014=2018,2015
<2015=2017,2016
<2019=2020
<2020=2025,2024,2021
<2021=2023,2022
<2026=2027
<2027=2032,2031,2028
<2028=2030,2029
<2033=2034
<2034=2036,2035
<2037=2038
<2038=2040,2039
<2041=2042
<2042=2044,2043
<2045=2046
<2046=2048,2047
<2049=2050
<2050=2052,2051
<2053=2054
<2054=2056,2055
<2057=2058
<2058=2060,2059
<2061=2062
<2062=2064,2063
<2065=2066
<2066=2068,2067
<2069=2070
<2070=2072,2071
