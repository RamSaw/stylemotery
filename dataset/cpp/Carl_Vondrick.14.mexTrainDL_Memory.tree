>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ])
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ]
>5	Parameter	 
>6	Identifier	prhs
>7	ParameterType	const mxArray * [ ]
>8	Parameter	 
>9	Identifier	plhs
>10	ParameterType	mxArray * [ ]
>11	ReturnType	inline void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	Identifier	trainer
>15	Statement	 
>16	ExpressionStatement	 
>17	CallExpression	D2 . copy ( D )
>18	ArgumentList	D
>19	Argument	D
>20	Identifier	D
>21	Callee	D2 . copy
>22	MemberAccess	D2 . copy
>23	Identifier	copy
>24	Identifier	D2
>25	IdentifierDeclStatement	 
>26	IdentifierDecl	D2 ( prD2 , n , K )
>27	Expression	prD2 , n , K
>28	Expression	n , K
>29	Identifier	K
>30	Identifier	n
>31	Identifier	prD2
>32	Identifier	D2
>33	IdentifierDeclType	Matrix < T >
>34	ExpressionStatement	 
>35	CallExpression	mxGetPr ( plhs [ 0 ] )
>36	ArgumentList	plhs [ 0 ]
>37	Argument	plhs [ 0 ]
>38	ArrayIndexing	plhs [ 0 ]
>39	PrimaryExpression	0
>40	Identifier	plhs
>41	Callee	mxGetPr
>42	Identifier	mxGetPr
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	ExpressionStatement	 
>53	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( n , K )
>54	RelationalExpression	createMatrix < T > ( n , K )
>55	RelationalExpression	T > ( n , K )
>56	Expression	n , K
>57	Identifier	K
>58	Identifier	n
>59	Identifier	T
>60	Identifier	createMatrix
>61	ArrayIndexing	plhs [ 0 ]
>62	PrimaryExpression	0
>63	Identifier	plhs
>64	IdentifierDeclStatement	 
>65	IdentifierDecl	K = D . n ( )
>66	AssignmentExpr	K = D . n ( )
>67	CallExpression	D . n ( )
>68	ArgumentList	 
>69	Callee	D . n
>70	MemberAccess	D . n
>71	Identifier	n
>72	Identifier	D
>73	Identifier	K
>74	Identifier	K
>75	IdentifierDeclType	long
>76	ExpressionStatement	 
>77	CallExpression	trainer -> getD ( D )
>78	ArgumentList	D
>79	Argument	D
>80	Identifier	D
>81	Callee	trainer -> getD
>82	PtrMemberAccess	trainer -> getD
>83	Identifier	getD
>84	Identifier	trainer
>85	IdentifierDeclStatement	 
>86	IdentifierDecl	D
>87	Identifier	D
>88	IdentifierDeclType	Matrix < T >
>89	ExpressionStatement	 
>90	CallExpression	trainer -> trainOffline ( X , param )
>91	ArgumentList	X
>92	Argument	param
>93	Identifier	param
>94	Argument	X
>95	Identifier	X
>96	Callee	trainer -> trainOffline
>97	PtrMemberAccess	trainer -> trainOffline
>98	Identifier	trainOffline
>99	Identifier	trainer
>100	ExpressionStatement	 
>101	Expression	prhs [ 1 ] , \"iter_udpateD\" , 1
>102	Expression	\"iter_udpateD\" , 1
>103	PrimaryExpression	1
>104	PrimaryExpression	\"iter_udpateD\"
>105	ArrayIndexing	prhs [ 1 ]
>106	PrimaryExpression	1
>107	Identifier	prhs
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	ExpressionStatement	 
>117	AssignmentExpr	param . rho = getScalarStructDef < T > ( prhs [ 1 ] , \"rho\" , T ( 1.0 ) )
>118	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"rho\" , T ( 1.0 ) )
>119	RelationalExpression	T > ( prhs [ 1 ] , \"rho\" , T ( 1.0 ) )
>120	Expression	prhs [ 1 ] , \"rho\" , T ( 1.0 )
>121	Expression	\"rho\" , T ( 1.0 )
>122	CallExpression	T ( 1.0 )
>123	ArgumentList	1.0
>124	Argument	1.0
>125	PrimaryExpression	1.0
>126	Callee	T
>127	Identifier	T
>128	PrimaryExpression	\"rho\"
>129	ArrayIndexing	prhs [ 1 ]
>130	PrimaryExpression	1
>131	Identifier	prhs
>132	Identifier	T
>133	Identifier	getScalarStructDef
>134	MemberAccess	param . rho
>135	Identifier	rho
>136	Identifier	param
>137	ExpressionStatement	 
>138	AssignmentExpr	param . gamma2 = getScalarStructDef < T > ( prhs [ 1 ] , \"gamma2\" , 0 )
>139	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"gamma2\" , 0 )
>140	RelationalExpression	T > ( prhs [ 1 ] , \"gamma2\" , 0 )
>141	Expression	prhs [ 1 ] , \"gamma2\" , 0
>142	Expression	\"gamma2\" , 0
>143	PrimaryExpression	0
>144	PrimaryExpression	\"gamma2\"
>145	ArrayIndexing	prhs [ 1 ]
>146	PrimaryExpression	1
>147	Identifier	prhs
>148	Identifier	T
>149	Identifier	getScalarStructDef
>150	MemberAccess	param . gamma2
>151	Identifier	gamma2
>152	Identifier	param
>153	ExpressionStatement	 
>154	AssignmentExpr	param . gamma1 = getScalarStructDef < T > ( prhs [ 1 ] , \"gamma1\" , 0 )
>155	RelationalExpression	getScalarStructDef < T > ( prhs [ 1 ] , \"gamma1\" , 0 )
>156	RelationalExpression	T > ( prhs [ 1 ] , \"gamma1\" , 0 )
>157	Expression	prhs [ 1 ] , \"gamma1\" , 0
>158	Expression	\"gamma1\" , 0
>159	PrimaryExpression	0
>160	PrimaryExpression	\"gamma1\"
>161	ArrayIndexing	prhs [ 1 ]
>162	PrimaryExpression	1
>163	Identifier	prhs
>164	Identifier	T
>165	Identifier	getScalarStructDef
>166	MemberAccess	param . gamma1
>167	Identifier	gamma1
>168	Identifier	param
>169	ExpressionStatement	 
>170	AssignmentExpr	param . clean = getScalarStructDef < bool > ( prhs [ 1 ] , \"clean\" , true )
>171	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"clean\" , true )
>172	RelationalExpression	bool > ( prhs [ 1 ] , \"clean\" , true )
>173	Expression	prhs [ 1 ] , \"clean\" , true
>174	Expression	\"clean\" , true
>175	Identifier	true
>176	PrimaryExpression	\"clean\"
>177	ArrayIndexing	prhs [ 1 ]
>178	PrimaryExpression	1
>179	Identifier	prhs
>180	Identifier	bool
>181	Identifier	getScalarStructDef
>182	MemberAccess	param . clean
>183	Identifier	clean
>184	Identifier	param
>185	ExpressionStatement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	ExpressionStatement	 
>211	AssignmentExpr	param . whiten = getScalarStructDef < bool > ( prhs [ 1 ] , \"whiten\" , false )
>212	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"whiten\" , false )
>213	RelationalExpression	bool > ( prhs [ 1 ] , \"whiten\" , false )
>214	Expression	prhs [ 1 ] , \"whiten\" , false
>215	Expression	\"whiten\" , false
>216	Identifier	false
>217	PrimaryExpression	\"whiten\"
>218	ArrayIndexing	prhs [ 1 ]
>219	PrimaryExpression	1
>220	Identifier	prhs
>221	Identifier	bool
>222	Identifier	getScalarStructDef
>223	MemberAccess	param . whiten
>224	Identifier	whiten
>225	Identifier	param
>226	ExpressionStatement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	Statement	 
>233	Statement	 
>234	Statement	 
>235	Statement	 
>236	Statement	 
>237	Statement	 
>238	Statement	 
>239	Statement	 
>240	Statement	 
>241	Statement	 
>242	Statement	 
>243	Statement	 
>244	Statement	 
>245	Statement	 
>246	Statement	 
>247	Statement	 
>248	Statement	 
>249	Statement	 
>250	ExpressionStatement	 
>251	AssignmentExpr	param . posD = getScalarStructDef < bool > ( prhs [ 1 ] , \"posD\" , false )
>252	RelationalExpression	getScalarStructDef < bool > ( prhs [ 1 ] , \"posD\" , false )
>253	RelationalExpression	bool > ( prhs [ 1 ] , \"posD\" , false )
>254	Expression	prhs [ 1 ] , \"posD\" , false
>255	Expression	\"posD\" , false
>256	Identifier	false
>257	PrimaryExpression	\"posD\"
>258	ArrayIndexing	prhs [ 1 ]
>259	PrimaryExpression	1
>260	Identifier	prhs
>261	Identifier	bool
>262	Identifier	getScalarStructDef
>263	MemberAccess	param . posD
>264	Identifier	posD
>265	Identifier	param
>266	IfStatement	if ( param . mode != PENALTY && param . mode != L2ERROR )
>267	ExpressionStatement	 
>268	CallExpression	mexErrMsgTxt ( \"param.mode is not compatible with the offline setting\" )
>269	ArgumentList	\"param.mode is not compatible with the offline setting\"
>270	Argument	\"param.mode is not compatible with the offline setting\"
>271	PrimaryExpression	\"param.mode is not compatible with the offline setting\"
>272	Callee	mexErrMsgTxt
>273	Identifier	mexErrMsgTxt
>274	Condition	 
>275	AndExpression	param . mode != PENALTY && param . mode != L2ERROR
>276	EqualityExpression	param . mode != L2ERROR
>277	Identifier	L2ERROR
>278	MemberAccess	param . mode
>279	Identifier	mode
>280	Identifier	param
>281	EqualityExpression	param . mode != PENALTY
>282	Identifier	PENALTY
>283	MemberAccess	param . mode
>284	Identifier	mode
>285	Identifier	param
>286	ExpressionStatement	 
>287	Expression	prhs [ 1 ] , \"mode\" , PENALTY
>288	Expression	\"mode\" , PENALTY
>289	Identifier	PENALTY
>290	PrimaryExpression	\"mode\"
>291	ArrayIndexing	prhs [ 1 ]
>292	PrimaryExpression	1
>293	Identifier	prhs
>294	Statement	 
>295	Statement	 
>296	Statement	 
>297	Statement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	ExpressionStatement	 
>306	Expression	prhs [ 1 ] , \"iter\"
>307	PrimaryExpression	\"iter\"
>308	ArrayIndexing	prhs [ 1 ]
>309	PrimaryExpression	1
>310	Identifier	prhs
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	ExpressionStatement	 
>320	AssignmentExpr	param . lambda = getScalarStruct < T > ( prhs [ 1 ] , \"lambda\" )
>321	RelationalExpression	getScalarStruct < T > ( prhs [ 1 ] , \"lambda\" )
>322	RelationalExpression	T > ( prhs [ 1 ] , \"lambda\" )
>323	Expression	prhs [ 1 ] , \"lambda\"
>324	PrimaryExpression	\"lambda\"
>325	ArrayIndexing	prhs [ 1 ]
>326	PrimaryExpression	1
>327	Identifier	prhs
>328	Identifier	T
>329	Identifier	getScalarStruct
>330	MemberAccess	param . lambda
>331	Identifier	lambda
>332	Identifier	param
>333	IdentifierDeclStatement	 
>334	IdentifierDecl	param
>335	Identifier	param
>336	IdentifierDeclType	ParamDictLearn < T >
>337	IfStatement	if ( ! pr_D )
>338	ElseStatement	else
>339	CompoundStatement	 
>340	ExpressionStatement	 
>341	AssignmentExpr	trainer = new Trainer < T > ( D1 , batch_size , NUM_THREADS )
>342	Expression	D1 , batch_size , NUM_THREADS
>343	Expression	batch_size , NUM_THREADS
>344	Identifier	NUM_THREADS
>345	Identifier	batch_size
>346	Identifier	D1
>347	Identifier	trainer
>348	IdentifierDeclStatement	 
>349	IdentifierDecl	D1 ( prD , n , K )
>350	Expression	prD , n , K
>351	Expression	n , K
>352	Identifier	K
>353	Identifier	n
>354	Identifier	prD
>355	Identifier	D1
>356	IdentifierDeclType	Matrix < T >
>357	IfStatement	if ( n != nD )
>358	ExpressionStatement	 
>359	CallExpression	mexErrMsgTxt ( \"sizes of D are not consistent\" )
>360	ArgumentList	\"sizes of D are not consistent\"
>361	Argument	\"sizes of D are not consistent\"
>362	PrimaryExpression	\"sizes of D are not consistent\"
>363	Callee	mexErrMsgTxt
>364	Identifier	mexErrMsgTxt
>365	Condition	 
>366	EqualityExpression	n != nD
>367	Identifier	nD
>368	Identifier	n
>369	ExpressionStatement	 
>370	ArrayIndexing	dimsD [ 1 ]
>371	PrimaryExpression	1
>372	Identifier	dimsD
>373	Statement	 
>374	Statement	 
>375	Statement	 
>376	Statement	 
>377	Statement	 
>378	Statement	 
>379	Statement	 
>380	ExpressionStatement	 
>381	ArrayIndexing	dimsD [ 0 ]
>382	PrimaryExpression	0
>383	Identifier	dimsD
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	IdentifierDeclStatement	 
>392	IdentifierDecl	* dimsD = mxGetDimensions ( pr_D )
>393	AssignmentExpr	* dimsD = mxGetDimensions ( pr_D )
>394	CallExpression	mxGetDimensions ( pr_D )
>395	ArgumentList	pr_D
>396	Argument	pr_D
>397	Identifier	pr_D
>398	Callee	mxGetDimensions
>399	Identifier	mxGetDimensions
>400	Identifier	dimsD
>401	Identifier	dimsD
>402	IdentifierDeclType	const mwSize *
>403	ExpressionStatement	 
>404	CallExpression	mxGetPr ( pr_D )
>405	ArgumentList	pr_D
>406	Argument	pr_D
>407	Identifier	pr_D
>408	Callee	mxGetPr
>409	Identifier	mxGetPr
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	Statement	 
>414	Statement	 
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	CompoundStatement	 
>420	ExpressionStatement	 
>421	AssignmentExpr	trainer = new Trainer < T > ( K , batch_size , NUM_THREADS )
>422	Expression	K , batch_size , NUM_THREADS
>423	Expression	batch_size , NUM_THREADS
>424	Identifier	NUM_THREADS
>425	Identifier	batch_size
>426	Identifier	K
>427	Identifier	trainer
>428	ExpressionStatement	 
>429	Expression	prhs [ 1 ] , \"K\"
>430	PrimaryExpression	\"K\"
>431	ArrayIndexing	prhs [ 1 ]
>432	PrimaryExpression	1
>433	Identifier	prhs
>434	Statement	 
>435	Statement	 
>436	Statement	 
>437	Statement	 
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	Condition	 
>442	UnaryOp	! pr_D
>443	Identifier	pr_D
>444	UnaryOperator	!
>445	IdentifierDeclStatement	 
>446	IdentifierDecl	* trainer
>447	Identifier	trainer
>448	IdentifierDeclType	Trainer < T > *
>449	IdentifierDeclStatement	 
>450	IdentifierDecl	* pr_D = mxGetField ( prhs [ 1 ] , 0 , \"D\" )
>451	AssignmentExpr	* pr_D = mxGetField ( prhs [ 1 ] , 0 , \"D\" )
>452	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"D\" )
>453	ArgumentList	prhs [ 1 ]
>454	Argument	\"D\"
>455	PrimaryExpression	\"D\"
>456	Argument	0
>457	PrimaryExpression	0
>458	Argument	prhs [ 1 ]
>459	ArrayIndexing	prhs [ 1 ]
>460	PrimaryExpression	1
>461	Identifier	prhs
>462	Callee	mxGetField
>463	Identifier	mxGetField
>464	Identifier	pr_D
>465	Identifier	pr_D
>466	IdentifierDeclType	mxArray *
>467	ExpressionStatement	 
>468	Expression	prhs [ 1 ] , \"batchsize\" , 256 * ( NUM_THREADS + 1 )
>469	Expression	\"batchsize\" , 256 * ( NUM_THREADS + 1 )
>470	MultiplicativeExpression	256 * ( NUM_THREADS + 1 )
>471	AdditiveExpression	NUM_THREADS + 1
>472	PrimaryExpression	1
>473	Identifier	NUM_THREADS
>474	PrimaryExpression	256
>475	PrimaryExpression	\"batchsize\"
>476	ArrayIndexing	prhs [ 1 ]
>477	PrimaryExpression	1
>478	Identifier	prhs
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	ExpressionStatement	 
>487	AssignmentExpr	NUM_THREADS = NUM_THREADS == - 1 ? omp_get_num_procs ( ) 
>488	ConditionalExpression	NUM_THREADS == - 1 ? omp_get_num_procs ( ) 
>489	Identifier	NUM_THREADS
>490	CallExpression	omp_get_num_procs ( )
>491	ArgumentList	 
>492	Callee	omp_get_num_procs
>493	Identifier	omp_get_num_procs
>494	Condition	NUM_THREADS == - 1
>495	EqualityExpression	NUM_THREADS == - 1
>496	UnaryOp	- 1
>497	PrimaryExpression	1
>498	UnaryOperator	-
>499	Identifier	NUM_THREADS
>500	Identifier	NUM_THREADS
>501	ExpressionStatement	 
>502	Expression	prhs [ 1 ] , \"numThreads\" , - 1
>503	Expression	\"numThreads\" , - 1
>504	UnaryOp	- 1
>505	PrimaryExpression	1
>506	UnaryOperator	-
>507	PrimaryExpression	\"numThreads\"
>508	ArrayIndexing	prhs [ 1 ]
>509	PrimaryExpression	1
>510	Identifier	prhs
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Statement	 
>518	IdentifierDeclStatement	 
>519	IdentifierDecl	X ( prX , n , M )
>520	Expression	prX , n , M
>521	Expression	n , M
>522	Identifier	M
>523	Identifier	n
>524	Identifier	prX
>525	Identifier	X
>526	IdentifierDeclType	Matrix < T >
>527	ExpressionStatement	 
>528	ArrayIndexing	dimsX [ 1 ]
>529	PrimaryExpression	1
>530	Identifier	dimsX
>531	Statement	 
>532	Statement	 
>533	Statement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	Statement	 
>538	ExpressionStatement	 
>539	ArrayIndexing	dimsX [ 0 ]
>540	PrimaryExpression	0
>541	Identifier	dimsX
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	IdentifierDeclStatement	 
>550	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>551	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>552	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>553	ArgumentList	prhs [ 0 ]
>554	Argument	prhs [ 0 ]
>555	ArrayIndexing	prhs [ 0 ]
>556	PrimaryExpression	0
>557	Identifier	prhs
>558	Callee	mxGetDimensions
>559	Identifier	mxGetDimensions
>560	Identifier	dimsX
>561	Identifier	dimsX
>562	IdentifierDeclType	const mwSize *
>563	ExpressionStatement	 
>564	CallExpression	mxGetPr ( prhs [ 0 ] )
>565	ArgumentList	prhs [ 0 ]
>566	Argument	prhs [ 0 ]
>567	ArrayIndexing	prhs [ 0 ]
>568	PrimaryExpression	0
>569	Identifier	prhs
>570	Callee	mxGetPr
>571	Identifier	mxGetPr
>572	Statement	 
>573	Statement	 
>574	Statement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	IfStatement	if ( ! mxIsStruct ( prhs [ 1 ] ) )
>582	ExpressionStatement	 
>583	CallExpression	mexErrMsgTxt ( \"argument 2 should be struct\" )
>584	ArgumentList	\"argument 2 should be struct\"
>585	Argument	\"argument 2 should be struct\"
>586	PrimaryExpression	\"argument 2 should be struct\"
>587	Callee	mexErrMsgTxt
>588	Identifier	mexErrMsgTxt
>589	Condition	 
>590	UnaryOp	! mxIsStruct ( prhs [ 1 ] )
>591	CallExpression	mxIsStruct ( prhs [ 1 ] )
>592	ArgumentList	prhs [ 1 ]
>593	Argument	prhs [ 1 ]
>594	ArrayIndexing	prhs [ 1 ]
>595	PrimaryExpression	1
>596	Identifier	prhs
>597	Callee	mxIsStruct
>598	Identifier	mxIsStruct
>599	UnaryOperator	!
>600	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>601	ExpressionStatement	 
>602	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>603	ArgumentList	\"argument 1 should be full\"
>604	Argument	\"argument 1 should be full\"
>605	PrimaryExpression	\"argument 1 should be full\"
>606	Callee	mexErrMsgTxt
>607	Identifier	mexErrMsgTxt
>608	Condition	 
>609	CallExpression	mxIsSparse ( prhs [ 0 ] )
>610	ArgumentList	prhs [ 0 ]
>611	Argument	prhs [ 0 ]
>612	ArrayIndexing	prhs [ 0 ]
>613	PrimaryExpression	0
>614	Identifier	prhs
>615	Callee	mxIsSparse
>616	Identifier	mxIsSparse
>617	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>618	ExpressionStatement	 
>619	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>620	ArgumentList	\"type of argument 1 is not consistent\"
>621	Argument	\"type of argument 1 is not consistent\"
>622	PrimaryExpression	\"type of argument 1 is not consistent\"
>623	Callee	mexErrMsgTxt
>624	Identifier	mexErrMsgTxt
>625	Condition	 
>626	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>627	RelationalExpression	T > ( prhs [ 0 ] )
>628	ArrayIndexing	prhs [ 0 ]
>629	PrimaryExpression	0
>630	Identifier	prhs
>631	Identifier	T
>632	UnaryOp	! mexCheckType
>633	Identifier	mexCheckType
>634	UnaryOperator	!
>680	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>681	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>682	Parameter	 
>683	Identifier	prhs
>684	ParameterType	const mxArray * [ ]
>685	Parameter	 
>686	Identifier	nrhs
>687	ParameterType	int
>688	Parameter	 
>689	Identifier	plhs
>690	ParameterType	mxArray * [ ]
>691	Parameter	 
>692	Identifier	nlhs
>693	ParameterType	int
>694	ReturnType	void
>695	CompoundStatement	 
>696	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>697	ElseStatement	else
>698	CompoundStatement	 
>699	ExpressionStatement	 
>700	RelationalExpression	callFunction < float > ( plhs , prhs )
>701	RelationalExpression	float > ( plhs , prhs )
>702	Expression	plhs , prhs
>703	Identifier	prhs
>704	Identifier	plhs
>705	Identifier	float
>706	Identifier	callFunction
>707	CompoundStatement	 
>708	ExpressionStatement	 
>709	RelationalExpression	callFunction < double > ( plhs , prhs )
>710	RelationalExpression	double > ( plhs , prhs )
>711	Expression	plhs , prhs
>712	Identifier	prhs
>713	Identifier	plhs
>714	Identifier	double
>715	Identifier	callFunction
>716	Condition	 
>717	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>718	Identifier	mxDOUBLE_CLASS
>719	CallExpression	mxGetClassID ( prhs [ 0 ] )
>720	ArgumentList	prhs [ 0 ]
>721	Argument	prhs [ 0 ]
>722	ArrayIndexing	prhs [ 0 ]
>723	PrimaryExpression	0
>724	Identifier	prhs
>725	Callee	mxGetClassID
>726	Identifier	mxGetClassID
>727	IfStatement	if ( nlhs != 1 )
>728	ExpressionStatement	 
>729	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>730	ArgumentList	\"Bad number of output arguments\"
>731	Argument	\"Bad number of output arguments\"
>732	PrimaryExpression	\"Bad number of output arguments\"
>733	Callee	mexErrMsgTxt
>734	Identifier	mexErrMsgTxt
>735	Condition	 
>736	EqualityExpression	nlhs != 1
>737	PrimaryExpression	1
>738	Identifier	nlhs
>739	IfStatement	if ( nrhs != 2 )
>740	ExpressionStatement	 
>741	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>742	ArgumentList	\"Bad number of inputs arguments\"
>743	Argument	\"Bad number of inputs arguments\"
>744	PrimaryExpression	\"Bad number of inputs arguments\"
>745	Callee	mexErrMsgTxt
>746	Identifier	mexErrMsgTxt
>747	Condition	 
>748	EqualityExpression	nrhs != 2
>749	PrimaryExpression	2
>750	Identifier	nrhs
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=617,600,581,580,579,578,577,576,575,574,573,572,563,549,548,547,546,545,544,543,542,538,537,536,535,534,533,532,531,527,518,517,516,515,514,513,512,511,501,486,485,484,483,482,481,480,479,467,449,445,337,333,319,318,317,316,315,314,313,312,311,305,304,303,302,301,300,299,298,297,296,295,294,286,266,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,210,209,208,207,206,205,204,203,13,15,16,25,34,43,44,45,46,47,48,49,50,51,52,64,76,85,89,100,108,109,110,111,112,113,114,115,116,137,153,169,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202
<13=14
<16=17
<17=21,18
<18=19
<19=20
<21=22
<22=24,23
<25=26
<26=33,32,27
<27=31,28
<28=30,29
<34=35
<35=41,36
<36=37
<37=38
<38=40,39
<41=42
<52=53
<53=61,54
<54=60,55
<55=59,56
<56=58,57
<61=63,62
<64=65
<65=75,74,66
<66=73,67
<67=69,68
<69=70
<70=72,71
<76=77
<77=81,78
<78=79
<79=80
<81=82
<82=84,83
<85=86
<86=88,87
<89=90
<90=96,91
<91=94,92
<92=93
<94=95
<96=97
<97=99,98
<100=101
<101=105,102
<102=104,103
<105=107,106
<116=117
<117=134,118
<118=133,119
<119=132,120
<120=129,121
<121=128,122
<122=126,123
<123=124
<124=125
<126=127
<129=131,130
<134=136,135
<137=138
<138=150,139
<139=149,140
<140=148,141
<141=145,142
<142=144,143
<145=147,146
<150=152,151
<153=154
<154=166,155
<155=165,156
<156=164,157
<157=161,158
<158=160,159
<161=163,162
<166=168,167
<169=170
<170=182,171
<171=181,172
<172=180,173
<173=177,174
<174=176,175
<177=179,178
<182=184,183
<210=211
<211=223,212
<212=222,213
<213=221,214
<214=218,215
<215=217,216
<218=220,219
<223=225,224
<250=251
<251=263,252
<252=262,253
<253=261,254
<254=258,255
<255=257,256
<258=260,259
<263=265,264
<266=274,267
<267=268
<268=272,269
<269=270
<270=271
<272=273
<274=275
<275=281,276
<276=278,277
<278=280,279
<281=283,282
<283=285,284
<286=287
<287=291,288
<288=290,289
<291=293,292
<305=306
<306=308,307
<308=310,309
<319=320
<320=330,321
<321=329,322
<322=328,323
<323=325,324
<325=327,326
<330=332,331
<333=334
<334=336,335
<337=441,419,338
<338=339
<339=418,417,416,415,414,413,412,411,410,403,391,390,389,388,387,386,385,384,380,379,378,377,376,375,374,373,369,357,348,340
<340=341
<341=347,342
<342=346,343
<343=345,344
<348=349
<349=356,355,350
<350=354,351
<351=353,352
<357=365,358
<358=359
<359=363,360
<360=361
<361=362
<363=364
<365=366
<366=368,367
<369=370
<370=372,371
<380=381
<381=383,382
<391=392
<392=402,401,393
<393=400,394
<394=398,395
<395=396
<396=397
<398=399
<403=404
<404=408,405
<405=406
<406=407
<408=409
<419=440,439,438,437,436,435,434,428,420
<420=421
<421=427,422
<422=426,423
<423=425,424
<428=429
<429=431,430
<431=433,432
<441=442
<442=444,443
<445=446
<446=448,447
<449=450
<450=466,465,451
<451=464,452
<452=462,453
<453=458,456,454
<454=455
<456=457
<458=459
<459=461,460
<462=463
<467=468
<468=476,469
<469=475,470
<470=474,471
<471=473,472
<476=478,477
<486=487
<487=500,488
<488=494,490,489
<490=492,491
<492=493
<494=495
<495=499,496
<496=498,497
<501=502
<502=508,503
<503=507,504
<504=506,505
<508=510,509
<518=519
<519=526,525,520
<520=524,521
<521=523,522
<527=528
<528=530,529
<538=539
<539=541,540
<549=550
<550=562,561,551
<551=560,552
<552=558,553
<553=554
<554=555
<555=557,556
<558=559
<563=564
<564=570,565
<565=566
<566=567
<567=569,568
<570=571
<581=589,582
<582=583
<583=587,584
<584=585
<585=586
<587=588
<589=590
<590=599,591
<591=597,592
<592=593
<593=594
<594=596,595
<597=598
<600=608,601
<601=602
<602=606,603
<603=604
<604=605
<606=607
<608=609
<609=615,610
<610=611
<611=612
<612=614,613
<615=616
<617=625,618
<618=619
<619=623,620
<620=621
<621=622
<623=624
<625=626
<626=632,627
<627=631,628
<628=630,629
<632=634,633
<680=695,694,681
<681=691,688,685,682
<682=684,683
<685=687,686
<688=690,689
<691=693,692
<695=739,727,696
<696=716,707,697
<697=698
<698=699
<699=700
<700=706,701
<701=705,702
<702=704,703
<707=708
<708=709
<709=715,710
<710=714,711
<711=713,712
<716=717
<717=719,718
<719=725,720
<720=721
<721=722
<722=724,723
<725=726
<727=735,728
<728=729
<729=733,730
<730=731
<731=732
<733=734
<735=736
<736=738,737
<739=747,740
<740=741
<741=745,742
<742=743
<743=744
<745=746
<747=748
<748=750,749
