>3	FunctionDef	computeResiduals (const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & current , \
>4	ParameterList	const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & current , const IntrinsicMatrix & \
>5	Parameter	 
>6	Identifier	result
>7	ParameterType	ComputeResidualsResult &
>8	Parameter	 
>9	Identifier	current_weight
>10	ParameterType	const Vector8f &
>11	Parameter	 
>12	Identifier	reference_weight
>13	ParameterType	const Vector8f &
>14	Parameter	 
>15	Identifier	transform
>16	ParameterType	const Eigen 
>17	Parameter	 
>18	Identifier	intrinsics
>19	ParameterType	const IntrinsicMatrix &
>20	Parameter	 
>21	Identifier	current
>22	ParameterType	const RgbdImage &
>23	Parameter	 
>24	Identifier	last_point
>25	ParameterType	const PointIterator &
>26	Parameter	 
>27	Identifier	first_point
>28	ParameterType	const PointIterator &
>29	ReturnType	void
>30	CompoundStatement	 
>31	ForStatement	for ( PointIterator p_it = first_point ; p_it != last_point ; ++ p_it )
>32	CompoundStatement	 
>33	ExpressionStatement	 
>34	UnaryExpression	++ result . last_residual
>35	MemberAccess	result . last_residual
>36	Identifier	last_residual
>37	Identifier	result
>38	IncDec	++
>39	ExpressionStatement	 
>40	UnaryExpression	++ result . last_point_error
>41	MemberAccess	result . last_point_error
>42	Identifier	last_point_error
>43	Identifier	result
>44	IncDec	++
>45	ExpressionStatement	 
>46	AssignmentExpr	* result . last_residual = result . last_point_error -> getIntensityAndDepthVec2f ( )
>47	CallExpression	result . last_point_error -> getIntensityAndDepthVec2f ( )
>48	ArgumentList	 
>49	Callee	result . last_point_error -> getIntensityAndDepthVec2f
>50	PtrMemberAccess	result . last_point_error -> getIntensityAndDepthVec2f
>51	Identifier	getIntensityAndDepthVec2f
>52	MemberAccess	result . last_point_error
>53	Identifier	last_point_error
>54	Identifier	result
>55	UnaryOp	* result . last_residual
>56	MemberAccess	result . last_residual
>57	Identifier	last_residual
>58	Identifier	result
>59	UnaryOperator	*
>60	ExpressionStatement	 
>61	AssignmentExpr	result . last_point_error -> getIntensityAndDepthWithDerivativesVec8f ( ) = current_weight . cwiseProduct ( \
>62	AdditiveExpression	current_weight . cwiseProduct ( interpolated ) + reference_weight . cwiseProduct ( reference )
>63	CallExpression	reference_weight . cwiseProduct ( reference )
>64	ArgumentList	reference
>65	Argument	reference
>66	Identifier	reference
>67	Callee	reference_weight . cwiseProduct
>68	MemberAccess	reference_weight . cwiseProduct
>69	Identifier	cwiseProduct
>70	Identifier	reference_weight
>71	CallExpression	current_weight . cwiseProduct ( interpolated )
>72	ArgumentList	interpolated
>73	Argument	interpolated
>74	Identifier	interpolated
>75	Callee	current_weight . cwiseProduct
>76	MemberAccess	current_weight . cwiseProduct
>77	Identifier	cwiseProduct
>78	Identifier	current_weight
>79	CallExpression	result . last_point_error -> getIntensityAndDepthWithDerivativesVec8f ( )
>80	ArgumentList	 
>81	Callee	result . last_point_error -> getIntensityAndDepthWithDerivativesVec8f
>82	PtrMemberAccess	result . last_point_error -> getIntensityAndDepthWithDerivativesVec8f
>83	Identifier	getIntensityAndDepthWithDerivativesVec8f
>84	MemberAccess	result . last_point_error
>85	Identifier	last_point_error
>86	Identifier	result
>87	ExpressionStatement	 
>88	AssignmentExpr	reference ( 1 ) = transformed_point ( 2 )
>89	CallExpression	transformed_point ( 2 )
>90	ArgumentList	2
>91	Argument	2
>92	PrimaryExpression	2
>93	Callee	transformed_point
>94	Identifier	transformed_point
>95	CallExpression	reference ( 1 )
>96	ArgumentList	1
>97	Argument	1
>98	PrimaryExpression	1
>99	Callee	reference
>100	Identifier	reference
>101	IdentifierDeclStatement	 
>102	IdentifierDecl	reference = p_it -> getIntensityAndDepthWithDerivativesVec8f ( )
>103	AssignmentExpr	reference = p_it -> getIntensityAndDepthWithDerivativesVec8f ( )
>104	CallExpression	p_it -> getIntensityAndDepthWithDerivativesVec8f ( )
>105	ArgumentList	 
>106	Callee	p_it -> getIntensityAndDepthWithDerivativesVec8f
>107	PtrMemberAccess	p_it -> getIntensityAndDepthWithDerivativesVec8f
>108	Identifier	getIntensityAndDepthWithDerivativesVec8f
>109	Identifier	p_it
>110	Identifier	reference
>111	Identifier	reference
>112	IdentifierDeclType	Vector8f
>113	ExpressionStatement	 
>114	AssignmentExpr	result . last_point_error -> getPointVec4f ( ) = p_it -> getPointVec4f ( )
>115	CallExpression	p_it -> getPointVec4f ( )
>116	ArgumentList	 
>117	Callee	p_it -> getPointVec4f
>118	PtrMemberAccess	p_it -> getPointVec4f
>119	Identifier	getPointVec4f
>120	Identifier	p_it
>121	CallExpression	result . last_point_error -> getPointVec4f ( )
>122	ArgumentList	 
>123	Callee	result . last_point_error -> getPointVec4f
>124	PtrMemberAccess	result . last_point_error -> getPointVec4f
>125	Identifier	getPointVec4f
>126	MemberAccess	result . last_point_error
>127	Identifier	last_point_error
>128	Identifier	result
>129	IfStatement	if ( ! std 
>130	ContinueStatement	 
>131	Condition	 
>132	OrExpression	! std 
>133	OrExpression	! std 
>134	UnaryOp	! std 
>135	CallExpression	std 
>136	ArgumentList	interpolated ( 5 )
>137	Argument	interpolated ( 5 )
>138	CallExpression	interpolated ( 5 )
>139	ArgumentList	5
>140	Argument	5
>141	PrimaryExpression	5
>142	Callee	interpolated
>143	Identifier	interpolated
>144	Callee	std 
>145	Identifier	std 
>146	UnaryOperator	!
>147	UnaryOp	! std 
>148	CallExpression	std 
>149	ArgumentList	interpolated ( 4 )
>150	Argument	interpolated ( 4 )
>151	CallExpression	interpolated ( 4 )
>152	ArgumentList	4
>153	Argument	4
>154	PrimaryExpression	4
>155	Callee	interpolated
>156	Identifier	interpolated
>157	Callee	std 
>158	Identifier	std 
>159	UnaryOperator	!
>160	UnaryOp	! std 
>161	CallExpression	std 
>162	ArgumentList	interpolated ( 1 )
>163	Argument	interpolated ( 1 )
>164	CallExpression	interpolated ( 1 )
>165	ArgumentList	1
>166	Argument	1
>167	PrimaryExpression	1
>168	Callee	interpolated
>169	Identifier	interpolated
>170	Callee	std 
>171	Identifier	std 
>172	UnaryOperator	!
>173	IdentifierDeclStatement	 
>174	IdentifierDecl	interpolated = ( x0y0 * x0w + x1y0 * x1w ) * y0w + ( x0y1 * x0w + x1y1 * x1w ) * y1w
>175	AssignmentExpr	interpolated = ( x0y0 * x0w + x1y0 * x1w ) * y0w + ( x0y1 * x0w + x1y1 * x1w ) * y1w
>176	AdditiveExpression	( x0y0 * x0w + x1y0 * x1w ) * y0w + ( x0y1 * x0w + x1y1 * x1w ) * y1w
>177	MultiplicativeExpression	( x0y1 * x0w + x1y1 * x1w ) * y1w
>178	Identifier	y1w
>179	AdditiveExpression	x0y1 * x0w + x1y1 * x1w
>180	MultiplicativeExpression	x1y1 * x1w
>181	Identifier	x1w
>182	Identifier	x1y1
>183	MultiplicativeExpression	x0y1 * x0w
>184	Identifier	x0w
>185	Identifier	x0y1
>186	MultiplicativeExpression	( x0y0 * x0w + x1y0 * x1w ) * y0w
>187	Identifier	y0w
>188	AdditiveExpression	x0y0 * x0w + x1y0 * x1w
>189	MultiplicativeExpression	x1y0 * x1w
>190	Identifier	x1w
>191	Identifier	x1y0
>192	MultiplicativeExpression	x0y0 * x0w
>193	Identifier	x0w
>194	Identifier	x0y0
>195	Identifier	interpolated
>196	Identifier	interpolated
>197	IdentifierDeclType	Vector8f
>198	IdentifierDeclStatement	 
>199	IdentifierDecl	x1y1 ( x0y1_ptr + 8 )
>200	AdditiveExpression	x0y1_ptr + 8
>201	PrimaryExpression	8
>202	Identifier	x0y1_ptr
>203	Identifier	x1y1
>204	IdentifierDeclType	Vector8f 
>205	IdentifierDeclStatement	 
>206	IdentifierDecl	x0y1 ( x0y1_ptr )
>207	Identifier	x0y1_ptr
>208	Identifier	x0y1
>209	IdentifierDeclType	Vector8f 
>210	IdentifierDeclStatement	 
>211	IdentifierDecl	x1y0 ( x0y0_ptr + 8 )
>212	AdditiveExpression	x0y0_ptr + 8
>213	PrimaryExpression	8
>214	Identifier	x0y0_ptr
>215	Identifier	x1y0
>216	IdentifierDeclType	Vector8f 
>217	IdentifierDeclStatement	 
>218	IdentifierDecl	x0y0 ( x0y0_ptr )
>219	Identifier	x0y0_ptr
>220	Identifier	x0y0
>221	IdentifierDeclType	Vector8f 
>222	IdentifierDeclStatement	 
>223	IdentifierDecl	* x0y1_ptr = current . acceleration . ptr < float > ( int ( y0 + 1 ) , int ( x0 ) )
>224	AssignmentExpr	* x0y1_ptr = current . acceleration . ptr < float > ( int ( y0 + 1 ) , int ( x0 ) )
>225	RelationalExpression	current . acceleration . ptr < float > ( int ( y0 + 1 ) , int ( x0 ) )
>226	RelationalExpression	float > ( int ( y0 + 1 ) , int ( x0 ) )
>227	Expression	int ( y0 + 1 ) , int ( x0 )
>228	CallExpression	int ( x0 )
>229	ArgumentList	x0
>230	Argument	x0
>231	Identifier	x0
>232	Callee	int
>233	Identifier	int
>234	CallExpression	int ( y0 + 1 )
>235	ArgumentList	y0 + 1
>236	Argument	y0 + 1
>237	AdditiveExpression	y0 + 1
>238	PrimaryExpression	1
>239	Identifier	y0
>240	Callee	int
>241	Identifier	int
>242	Identifier	float
>243	MemberAccess	current . acceleration . ptr
>244	Identifier	ptr
>245	MemberAccess	current . acceleration
>246	Identifier	acceleration
>247	Identifier	current
>248	Identifier	x0y1_ptr
>249	Identifier	x0y1_ptr
>250	IdentifierDeclType	const float *
>251	IdentifierDeclStatement	 
>252	IdentifierDecl	* x0y0_ptr = current . acceleration . ptr < float > ( int ( y0 ) , int ( x0 ) )
>253	AssignmentExpr	* x0y0_ptr = current . acceleration . ptr < float > ( int ( y0 ) , int ( x0 ) )
>254	RelationalExpression	current . acceleration . ptr < float > ( int ( y0 ) , int ( x0 ) )
>255	RelationalExpression	float > ( int ( y0 ) , int ( x0 ) )
>256	Expression	int ( y0 ) , int ( x0 )
>257	CallExpression	int ( x0 )
>258	ArgumentList	x0
>259	Argument	x0
>260	Identifier	x0
>261	Callee	int
>262	Identifier	int
>263	CallExpression	int ( y0 )
>264	ArgumentList	y0
>265	Argument	y0
>266	Identifier	y0
>267	Callee	int
>268	Identifier	int
>269	Identifier	float
>270	MemberAccess	current . acceleration . ptr
>271	Identifier	ptr
>272	MemberAccess	current . acceleration
>273	Identifier	acceleration
>274	Identifier	current
>275	Identifier	x0y0_ptr
>276	Identifier	x0y0_ptr
>277	IdentifierDeclType	const float *
>278	ExpressionStatement	 
>279	AssignmentExpr	y0w = 1.0f - y1w
>280	AdditiveExpression	1.0f - y1w
>281	Identifier	y1w
>282	PrimaryExpression	1.0f
>283	Identifier	y0w
>284	ExpressionStatement	 
>285	AssignmentExpr	y1w = projected_y - y0
>286	AdditiveExpression	projected_y - y0
>287	Identifier	y0
>288	Identifier	projected_y
>289	Identifier	y1w
>290	ExpressionStatement	 
>291	AssignmentExpr	x0w = 1.0f - x1w
>292	AdditiveExpression	1.0f - x1w
>293	Identifier	x1w
>294	PrimaryExpression	1.0f
>295	Identifier	x0w
>296	ExpressionStatement	 
>297	AssignmentExpr	x1w = projected_x - x0
>298	AdditiveExpression	projected_x - x0
>299	Identifier	x0
>300	Identifier	projected_x
>301	Identifier	x1w
>302	IdentifierDeclStatement	 
>303	IdentifierDecl	y1w
>304	Identifier	y1w
>305	IdentifierDeclType	float
>306	IdentifierDecl	y0w
>307	Identifier	y0w
>308	IdentifierDeclType	float
>309	IdentifierDecl	x1w
>310	Identifier	x1w
>311	IdentifierDeclType	float
>312	IdentifierDecl	x0w
>313	Identifier	x0w
>314	IdentifierDeclType	float
>315	IdentifierDeclStatement	 
>316	IdentifierDecl	y0 = std 
>317	AssignmentExpr	y0 = std 
>318	CallExpression	std 
>319	ArgumentList	projected_y
>320	Argument	projected_y
>321	Identifier	projected_y
>322	Callee	std 
>323	Identifier	std 
>324	Identifier	y0
>325	Identifier	y0
>326	IdentifierDeclType	float
>327	IdentifierDeclStatement	 
>328	IdentifierDecl	x0 = std 
>329	AssignmentExpr	x0 = std 
>330	CallExpression	std 
>331	ArgumentList	projected_x
>332	Argument	projected_x
>333	Identifier	projected_x
>334	Callee	std 
>335	Identifier	std 
>336	Identifier	x0
>337	Identifier	x0
>338	IdentifierDeclType	float
>339	IfStatement	if ( ! current . inImage ( projected_x , projected_y ) || ! current . inImage ( projected_x + 1 , projected_y + \
>340	ContinueStatement	 
>341	Condition	 
>342	OrExpression	! current . inImage ( projected_x , projected_y ) || ! current . inImage ( projected_x + 1 , projected_\
>343	UnaryOp	! current . inImage ( projected_x + 1 , projected_y + 1 )
>344	CallExpression	current . inImage ( projected_x + 1 , projected_y + 1 )
>345	ArgumentList	projected_x + 1
>346	Argument	projected_y + 1
>347	AdditiveExpression	projected_y + 1
>348	PrimaryExpression	1
>349	Identifier	projected_y
>350	Argument	projected_x + 1
>351	AdditiveExpression	projected_x + 1
>352	PrimaryExpression	1
>353	Identifier	projected_x
>354	Callee	current . inImage
>355	MemberAccess	current . inImage
>356	Identifier	inImage
>357	Identifier	current
>358	UnaryOperator	!
>359	UnaryOp	! current . inImage ( projected_x , projected_y )
>360	CallExpression	current . inImage ( projected_x , projected_y )
>361	ArgumentList	projected_x
>362	Argument	projected_y
>363	Identifier	projected_y
>364	Argument	projected_x
>365	Identifier	projected_x
>366	Callee	current . inImage
>367	MemberAccess	current . inImage
>368	Identifier	inImage
>369	Identifier	current
>370	UnaryOperator	!
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	projected_y = transformed_point ( 1 ) / transformed_point ( 2 )
>373	AssignmentExpr	projected_y = transformed_point ( 1 ) / transformed_point ( 2 )
>374	MultiplicativeExpression	transformed_point ( 1 ) / transformed_point ( 2 )
>375	CallExpression	transformed_point ( 2 )
>376	ArgumentList	2
>377	Argument	2
>378	PrimaryExpression	2
>379	Callee	transformed_point
>380	Identifier	transformed_point
>381	CallExpression	transformed_point ( 1 )
>382	ArgumentList	1
>383	Argument	1
>384	PrimaryExpression	1
>385	Callee	transformed_point
>386	Identifier	transformed_point
>387	Identifier	projected_y
>388	Identifier	projected_y
>389	IdentifierDeclType	float
>390	IdentifierDeclStatement	 
>391	IdentifierDecl	projected_x = transformed_point ( 0 ) / transformed_point ( 2 )
>392	AssignmentExpr	projected_x = transformed_point ( 0 ) / transformed_point ( 2 )
>393	MultiplicativeExpression	transformed_point ( 0 ) / transformed_point ( 2 )
>394	CallExpression	transformed_point ( 2 )
>395	ArgumentList	2
>396	Argument	2
>397	PrimaryExpression	2
>398	Callee	transformed_point
>399	Identifier	transformed_point
>400	CallExpression	transformed_point ( 0 )
>401	ArgumentList	0
>402	Argument	0
>403	PrimaryExpression	0
>404	Callee	transformed_point
>405	Identifier	transformed_point
>406	Identifier	projected_x
>407	Identifier	projected_x
>408	IdentifierDeclType	float
>409	ExpressionStatement	 
>410	MultiplicativeExpression	KT * p_it -> getPointVec4f ( )
>411	CallExpression	p_it -> getPointVec4f ( )
>412	ArgumentList	 
>413	Callee	p_it -> getPointVec4f
>414	PtrMemberAccess	p_it -> getPointVec4f
>415	Identifier	getPointVec4f
>416	Identifier	p_it
>417	Identifier	KT
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	Statement	 
>427	UnaryExpression	 
>428	Identifier	p_it
>429	IncDec	++
>430	Condition	 
>431	EqualityExpression	p_it != last_point
>432	Identifier	last_point
>433	Identifier	p_it
>434	ForInit	 
>435	IdentifierDeclStatement	PointIterator p_it = first_point ;
>436	IdentifierDecl	p_it = first_point
>437	AssignmentExpr	p_it = first_point
>438	Identifier	first_point
>439	Identifier	first_point
>440	Identifier	p_it
>441	IdentifierDeclType	PointIterator
>442	ExpressionStatement	 
>443	CallExpression	quiet_NaN ( )
>444	ArgumentList	 
>445	Callee	quiet_NaN
>446	Identifier	quiet_NaN
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	ExpressionStatement	 
>458	CallExpression	transformed_point . setConstant ( 1 )
>459	ArgumentList	1
>460	Argument	1
>461	PrimaryExpression	1
>462	Callee	transformed_point . setConstant
>463	MemberAccess	transformed_point . setConstant
>464	Identifier	setConstant
>465	Identifier	transformed_point
>466	IdentifierDeclStatement	 
>467	IdentifierDecl	transformed_point
>468	Identifier	transformed_point
>469	IdentifierDeclType	Eigen 
>470	ExpressionStatement	 
>471	Expression	Eigen 
>472	Expression	3 , 4 > KT = K * transform . matrix ( ) . block < 3 , 4 > ( 0 , 0 )
>473	Expression	4 > KT = K * transform . matrix ( ) . block < 3 , 4 > ( 0 , 0 )
>474	RelationalExpression	4 > ( 0 , 0 )
>475	Expression	0 , 0
>476	PrimaryExpression	0
>477	PrimaryExpression	0
>478	PrimaryExpression	4
>479	AssignmentExpr	4 > KT = K * transform . matrix ( ) . block < 3
>480	RelationalExpression	K * transform . matrix ( ) . block < 3
>481	PrimaryExpression	3
>482	MultiplicativeExpression	K * transform . matrix ( ) . block
>483	MemberAccess	transform . matrix ( ) . block
>484	Identifier	block
>485	CallExpression	transform . matrix ( )
>486	ArgumentList	 
>487	Callee	transform . matrix
>488	MemberAccess	transform . matrix
>489	Identifier	matrix
>490	Identifier	transform
>491	Identifier	K
>492	RelationalExpression	4 > KT
>493	Identifier	KT
>494	PrimaryExpression	4
>495	PrimaryExpression	3
>496	RelationalExpression	Eigen 
>497	Identifier	float
>498	Identifier	Eigen 
>499	ExpressionStatement	 
>500	Expression	K << intrinsics . fx ( ) , 0 , intrinsics . ox ( ) , 0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>501	Expression	0 , intrinsics . ox ( ) , 0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>502	Expression	intrinsics . ox ( ) , 0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>503	Expression	0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>504	Expression	intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>505	Expression	intrinsics . oy ( ) , 0 , 0 , 1
>506	Expression	0 , 0 , 1
>507	Expression	0 , 1
>508	PrimaryExpression	1
>509	PrimaryExpression	0
>510	PrimaryExpression	0
>511	CallExpression	intrinsics . oy ( )
>512	ArgumentList	 
>513	Callee	intrinsics . oy
>514	MemberAccess	intrinsics . oy
>515	Identifier	oy
>516	Identifier	intrinsics
>517	CallExpression	intrinsics . fy ( )
>518	ArgumentList	 
>519	Callee	intrinsics . fy
>520	MemberAccess	intrinsics . fy
>521	Identifier	fy
>522	Identifier	intrinsics
>523	PrimaryExpression	0
>524	CallExpression	intrinsics . ox ( )
>525	ArgumentList	 
>526	Callee	intrinsics . ox
>527	MemberAccess	intrinsics . ox
>528	Identifier	ox
>529	Identifier	intrinsics
>530	PrimaryExpression	0
>531	ShiftExpression	K << intrinsics . fx ( )
>532	CallExpression	intrinsics . fx ( )
>533	ArgumentList	 
>534	Callee	intrinsics . fx
>535	MemberAccess	intrinsics . fx
>536	Identifier	fx
>537	Identifier	intrinsics
>538	Identifier	K
>539	IdentifierDeclStatement	 
>540	IdentifierDecl	K
>541	Identifier	K
>542	IdentifierDeclType	Eigen 
>543	ExpressionStatement	 
>544	AssignmentExpr	result . last_residual = result . first_residual
>545	MemberAccess	result . first_residual
>546	Identifier	first_residual
>547	Identifier	result
>548	MemberAccess	result . last_residual
>549	Identifier	last_residual
>550	Identifier	result
>551	ExpressionStatement	 
>552	AssignmentExpr	result . last_point_error = result . first_point_error
>553	MemberAccess	result . first_point_error
>554	Identifier	first_point_error
>555	Identifier	result
>556	MemberAccess	result . last_point_error
>557	Identifier	last_point_error
>558	Identifier	result
>614	FunctionDef	depthStdDevZ (float depth)
>615	ParameterList	float depth
>616	Parameter	 
>617	Identifier	depth
>618	ParameterType	float
>619	ReturnType	static inline float
>620	CompoundStatement	 
>621	ReturnStatement	 
>622	Identifier	sigma_z
>623	ExpressionStatement	 
>624	AssignmentExpr	sigma_z = 0.0012f + 0.0019f * sigma_z * sigma_z
>625	AdditiveExpression	0.0012f + 0.0019f * sigma_z * sigma_z
>626	MultiplicativeExpression	0.0019f * sigma_z * sigma_z
>627	MultiplicativeExpression	sigma_z * sigma_z
>628	Identifier	sigma_z
>629	Identifier	sigma_z
>630	PrimaryExpression	0.0019f
>631	PrimaryExpression	0.0012f
>632	Identifier	sigma_z
>633	IdentifierDeclStatement	 
>634	IdentifierDecl	sigma_z = depth - 0.4f
>635	AssignmentExpr	sigma_z = depth - 0.4f
>636	AdditiveExpression	depth - 0.4f
>637	PrimaryExpression	0.4f
>638	Identifier	depth
>639	Identifier	sigma_z
>640	Identifier	sigma_z
>641	IdentifierDeclType	float
>651	FunctionDef	computeResidualsSse (const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & current , \
>652	ParameterList	const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & current , const IntrinsicMatrix & \
>653	Parameter	 
>654	Identifier	result
>655	ParameterType	ComputeResidualsResult &
>656	Parameter	 
>657	Identifier	current_weight
>658	ParameterType	const Vector8f &
>659	Parameter	 
>660	Identifier	reference_weight
>661	ParameterType	const Vector8f &
>662	Parameter	 
>663	Identifier	transform
>664	ParameterType	const Eigen 
>665	Parameter	 
>666	Identifier	intrinsics
>667	ParameterType	const IntrinsicMatrix &
>668	Parameter	 
>669	Identifier	current
>670	ParameterType	const RgbdImage &
>671	Parameter	 
>672	Identifier	last_point
>673	ParameterType	const PointIterator &
>674	Parameter	 
>675	Identifier	first_point
>676	ParameterType	const PointIterator &
>677	ReturnType	void
>678	CompoundStatement	 
>679	IfStatement	if ( rnd_mode != _MM_ROUND_TOWARD_ZERO )
>680	ExpressionStatement	 
>681	CallExpression	_MM_SET_ROUNDING_MODE ( rnd_mode )
>682	ArgumentList	rnd_mode
>683	Argument	rnd_mode
>684	Identifier	rnd_mode
>685	Callee	_MM_SET_ROUNDING_MODE
>686	Identifier	_MM_SET_ROUNDING_MODE
>687	Condition	 
>688	EqualityExpression	rnd_mode != _MM_ROUND_TOWARD_ZERO
>689	Identifier	_MM_ROUND_TOWARD_ZERO
>690	Identifier	rnd_mode
>691	ForStatement	for ( PointIterator p_it = first_point ; p_it != lp ; p_it += 2 )
>692	CompoundStatement	 
>693	IfStatement	if ( Debug )
>694	ExpressionStatement	 
>695	UnaryExpression	++ result . last_valid_flag
>696	MemberAccess	result . last_valid_flag
>697	Identifier	last_valid_flag
>698	Identifier	result
>699	IncDec	++
>700	Condition	 
>701	Identifier	Debug
>702	IfStatement	if ( ( bounds_mask & 12 ) == 12 )
>703	CompoundStatement	 
>704	IfStatement	if ( Debug )
>705	ExpressionStatement	 
>706	AssignmentExpr	* result . last_valid_flag = uint8_t ( nans_mask == 0 )
>707	CallExpression	uint8_t ( nans_mask == 0 )
>708	ArgumentList	nans_mask == 0
>709	Argument	nans_mask == 0
>710	EqualityExpression	nans_mask == 0
>711	PrimaryExpression	0
>712	Identifier	nans_mask
>713	Callee	uint8_t
>714	Identifier	uint8_t
>715	UnaryOp	* result . last_valid_flag
>716	MemberAccess	result . last_valid_flag
>717	Identifier	last_valid_flag
>718	Identifier	result
>719	UnaryOperator	*
>720	Condition	 
>721	Identifier	Debug
>722	IfStatement	if ( nans_mask == 0 )
>723	CompoundStatement	 
>724	IfStatement	if ( result . last_point_error -> intensity_and_depth . z > - 20.0f * depthStdDevZ ( ( p_it + 1 ) -> intensity_and_\
>725	ElseStatement	else
>726	CompoundStatement	 
>727	ExpressionStatement	 
>728	AssignmentExpr	nans_mask = 1
>729	PrimaryExpression	1
>730	Identifier	nans_mask
>731	CompoundStatement	 
>732	ExpressionStatement	 
>733	UnaryExpression	++ result . last_residual
>734	MemberAccess	result . last_residual
>735	Identifier	last_residual
>736	Identifier	result
>737	IncDec	++
>738	ExpressionStatement	 
>739	UnaryExpression	++ result . last_point_error
>740	MemberAccess	result . last_point_error
>741	Identifier	last_point_error
>742	Identifier	result
>743	IncDec	++
>744	ExpressionStatement	 
>745	CallExpression	_mm_store_ps ( result . last_point_error -> intensity_and_depth . data + 4 , residual_b )
>746	ArgumentList	result . last_point_error -> intensity_and_depth . data + 4
>747	Argument	residual_b
>748	Identifier	residual_b
>749	Argument	result . last_point_error -> intensity_and_depth . data + 4
>750	AdditiveExpression	result . last_point_error -> intensity_and_depth . data + 4
>751	PrimaryExpression	4
>752	MemberAccess	result . last_point_error -> intensity_and_depth . data
>753	Identifier	data
>754	PtrMemberAccess	result . last_point_error -> intensity_and_depth
>755	Identifier	intensity_and_depth
>756	MemberAccess	result . last_point_error
>757	Identifier	last_point_error
>758	Identifier	result
>759	Callee	_mm_store_ps
>760	Identifier	_mm_store_ps
>761	IdentifierDeclStatement	 
>762	IdentifierDecl	residual_b = _mm_add_ps ( _mm_mul_ps ( current_weight_b , b ) , _mm_mul_ps ( reference_weight_b , reference_b ) )
>763	AssignmentExpr	residual_b = _mm_add_ps ( _mm_mul_ps ( current_weight_b , b ) , _mm_mul_ps ( reference_weight_b , reference_\
>764	CallExpression	_mm_add_ps ( _mm_mul_ps ( current_weight_b , b ) , _mm_mul_ps ( reference_weight_b , reference_b ) )
>765	ArgumentList	_mm_mul_ps ( current_weight_b , b )
>766	Argument	_mm_mul_ps ( reference_weight_b , reference_b )
>767	CallExpression	_mm_mul_ps ( reference_weight_b , reference_b )
>768	ArgumentList	reference_weight_b
>769	Argument	reference_b
>770	Identifier	reference_b
>771	Argument	reference_weight_b
>772	Identifier	reference_weight_b
>773	Callee	_mm_mul_ps
>774	Identifier	_mm_mul_ps
>775	Argument	_mm_mul_ps ( current_weight_b , b )
>776	CallExpression	_mm_mul_ps ( current_weight_b , b )
>777	ArgumentList	current_weight_b
>778	Argument	b
>779	Identifier	b
>780	Argument	current_weight_b
>781	Identifier	current_weight_b
>782	Callee	_mm_mul_ps
>783	Identifier	_mm_mul_ps
>784	Callee	_mm_add_ps
>785	Identifier	_mm_add_ps
>786	Identifier	residual_b
>787	Identifier	residual_b
>788	IdentifierDeclType	__m128
>789	IdentifierDeclStatement	 
>790	IdentifierDecl	reference_b = _mm_load_ps ( ( p_it + 1 ) -> intensity_and_depth . data + 4 )
>791	AssignmentExpr	reference_b = _mm_load_ps ( ( p_it + 1 ) -> intensity_and_depth . data + 4 )
>792	CallExpression	_mm_load_ps ( ( p_it + 1 ) -> intensity_and_depth . data + 4 )
>793	ArgumentList	( p_it + 1 ) -> intensity_and_depth . data + 4
>794	Argument	( p_it + 1 ) -> intensity_and_depth . data + 4
>795	AdditiveExpression	( p_it + 1 ) -> intensity_and_depth . data + 4
>796	PrimaryExpression	4
>797	MemberAccess	( p_it + 1 ) -> intensity_and_depth . data
>798	Identifier	data
>799	PtrMemberAccess	( p_it + 1 ) -> intensity_and_depth
>800	Identifier	intensity_and_depth
>801	AdditiveExpression	p_it + 1
>802	PrimaryExpression	1
>803	Identifier	p_it
>804	Callee	_mm_load_ps
>805	Identifier	_mm_load_ps
>806	Identifier	reference_b
>807	Identifier	reference_b
>808	IdentifierDeclType	__m128
>809	ExpressionStatement	 
>810	CallExpression	_mm_storel_pi ( ( __m64 * ) result . last_residual -> data ( ) , residual_a )
>811	ArgumentList	( __m64 * ) result . last_residual -> data ( )
>812	Argument	residual_a
>813	Identifier	residual_a
>814	Argument	( __m64 * ) result . last_residual -> data ( )
>815	CastExpression	( __m64 * ) result . last_residual -> data ( )
>816	CallExpression	result . last_residual -> data ( )
>817	ArgumentList	 
>818	Callee	result . last_residual -> data
>819	PtrMemberAccess	result . last_residual -> data
>820	Identifier	data
>821	MemberAccess	result . last_residual
>822	Identifier	last_residual
>823	Identifier	result
>824	CastTarget	__m64 *
>825	Callee	_mm_storel_pi
>826	Identifier	_mm_storel_pi
>827	Condition	 
>828	RelationalExpression	result . last_point_error -> intensity_and_depth . z > - 20.0f * depthStdDevZ ( ( p_it + 1 ) -> intensity_\
>829	MultiplicativeExpression	- 20.0f * depthStdDevZ ( ( p_it + 1 ) -> intensity_and_depth . z )
>830	CallExpression	depthStdDevZ ( ( p_it + 1 ) -> intensity_and_depth . z )
>831	ArgumentList	( p_it + 1 ) -> intensity_and_depth . z
>832	Argument	( p_it + 1 ) -> intensity_and_depth . z
>833	MemberAccess	( p_it + 1 ) -> intensity_and_depth . z
>834	Identifier	z
>835	PtrMemberAccess	( p_it + 1 ) -> intensity_and_depth
>836	Identifier	intensity_and_depth
>837	AdditiveExpression	p_it + 1
>838	PrimaryExpression	1
>839	Identifier	p_it
>840	Callee	depthStdDevZ
>841	Identifier	depthStdDevZ
>842	UnaryOp	- 20.0f
>843	PrimaryExpression	20.0f
>844	UnaryOperator	-
>845	MemberAccess	result . last_point_error -> intensity_and_depth . z
>846	Identifier	z
>847	PtrMemberAccess	result . last_point_error -> intensity_and_depth
>848	Identifier	intensity_and_depth
>849	MemberAccess	result . last_point_error
>850	Identifier	last_point_error
>851	Identifier	result
>852	ExpressionStatement	 
>853	CallExpression	_mm_store_ps ( result . last_point_error -> intensity_and_depth . data + 0 , residual_a )
>854	ArgumentList	result . last_point_error -> intensity_and_depth . data + 0
>855	Argument	residual_a
>856	Identifier	residual_a
>857	Argument	result . last_point_error -> intensity_and_depth . data + 0
>858	AdditiveExpression	result . last_point_error -> intensity_and_depth . data + 0
>859	PrimaryExpression	0
>860	MemberAccess	result . last_point_error -> intensity_and_depth . data
>861	Identifier	data
>862	PtrMemberAccess	result . last_point_error -> intensity_and_depth
>863	Identifier	intensity_and_depth
>864	MemberAccess	result . last_point_error
>865	Identifier	last_point_error
>866	Identifier	result
>867	Callee	_mm_store_ps
>868	Identifier	_mm_store_ps
>869	IdentifierDeclStatement	 
>870	IdentifierDecl	residual_a = _mm_add_ps ( _mm_mul_ps ( current_weight_a , a ) , _mm_mul_ps ( reference_weight_a , reference_a ) )
>871	AssignmentExpr	residual_a = _mm_add_ps ( _mm_mul_ps ( current_weight_a , a ) , _mm_mul_ps ( reference_weight_a , reference_\
>872	CallExpression	_mm_add_ps ( _mm_mul_ps ( current_weight_a , a ) , _mm_mul_ps ( reference_weight_a , reference_a ) )
>873	ArgumentList	_mm_mul_ps ( current_weight_a , a )
>874	Argument	_mm_mul_ps ( reference_weight_a , reference_a )
>875	CallExpression	_mm_mul_ps ( reference_weight_a , reference_a )
>876	ArgumentList	reference_weight_a
>877	Argument	reference_a
>878	Identifier	reference_a
>879	Argument	reference_weight_a
>880	Identifier	reference_weight_a
>881	Callee	_mm_mul_ps
>882	Identifier	_mm_mul_ps
>883	Argument	_mm_mul_ps ( current_weight_a , a )
>884	CallExpression	_mm_mul_ps ( current_weight_a , a )
>885	ArgumentList	current_weight_a
>886	Argument	a
>887	Identifier	a
>888	Argument	current_weight_a
>889	Identifier	current_weight_a
>890	Callee	_mm_mul_ps
>891	Identifier	_mm_mul_ps
>892	Callee	_mm_add_ps
>893	Identifier	_mm_add_ps
>894	Identifier	residual_a
>895	Identifier	residual_a
>896	IdentifierDeclType	__m128
>897	ExpressionStatement	 
>898	AssignmentExpr	reference_a = _mm_or_ps ( _mm_and_ps ( BLEND_MASK , _mm_unpackhi_ps ( pt1_zz_pt2_zz , pt1_zz_pt2_zz ) ) , _\
>899	CallExpression	_mm_or_ps ( _mm_and_ps ( BLEND_MASK , _mm_unpackhi_ps ( pt1_zz_pt2_zz , pt1_zz_pt2_zz ) ) , _mm_andnot_ps ( BLEND_\
>900	ArgumentList	_mm_and_ps ( BLEND_MASK , _mm_unpackhi_ps ( pt1_zz_pt2_zz , pt1_zz_pt2_zz ) )
>901	Argument	_mm_andnot_ps ( BLEND_MASK , reference_a )
>902	CallExpression	_mm_andnot_ps ( BLEND_MASK , reference_a )
>903	ArgumentList	BLEND_MASK
>904	Argument	reference_a
>905	Identifier	reference_a
>906	Argument	BLEND_MASK
>907	Identifier	BLEND_MASK
>908	Callee	_mm_andnot_ps
>909	Identifier	_mm_andnot_ps
>910	Argument	_mm_and_ps ( BLEND_MASK , _mm_unpackhi_ps ( pt1_zz_pt2_zz , pt1_zz_pt2_zz ) )
>911	CallExpression	_mm_and_ps ( BLEND_MASK , _mm_unpackhi_ps ( pt1_zz_pt2_zz , pt1_zz_pt2_zz ) )
>912	ArgumentList	BLEND_MASK
>913	Argument	_mm_unpackhi_ps ( pt1_zz_pt2_zz , pt1_zz_pt2_zz )
>914	CallExpression	_mm_unpackhi_ps ( pt1_zz_pt2_zz , pt1_zz_pt2_zz )
>915	ArgumentList	pt1_zz_pt2_zz
>916	Argument	pt1_zz_pt2_zz
>917	Identifier	pt1_zz_pt2_zz
>918	Argument	pt1_zz_pt2_zz
>919	Identifier	pt1_zz_pt2_zz
>920	Callee	_mm_unpackhi_ps
>921	Identifier	_mm_unpackhi_ps
>922	Argument	BLEND_MASK
>923	Identifier	BLEND_MASK
>924	Callee	_mm_and_ps
>925	Identifier	_mm_and_ps
>926	Callee	_mm_or_ps
>927	Identifier	_mm_or_ps
>928	Identifier	reference_a
>929	IdentifierDeclStatement	 
>930	IdentifierDecl	reference_a = _mm_load_ps ( ( p_it + 1 ) -> intensity_and_depth . data )
>931	AssignmentExpr	reference_a = _mm_load_ps ( ( p_it + 1 ) -> intensity_and_depth . data )
>932	CallExpression	_mm_load_ps ( ( p_it + 1 ) -> intensity_and_depth . data )
>933	ArgumentList	( p_it + 1 ) -> intensity_and_depth . data
>934	Argument	( p_it + 1 ) -> intensity_and_depth . data
>935	MemberAccess	( p_it + 1 ) -> intensity_and_depth . data
>936	Identifier	data
>937	PtrMemberAccess	( p_it + 1 ) -> intensity_and_depth
>938	Identifier	intensity_and_depth
>939	AdditiveExpression	p_it + 1
>940	PrimaryExpression	1
>941	Identifier	p_it
>942	Callee	_mm_load_ps
>943	Identifier	_mm_load_ps
>944	Identifier	reference_a
>945	Identifier	reference_a
>946	IdentifierDeclType	__m128
>947	ExpressionStatement	 
>948	CallExpression	_mm_store_ps ( result . last_point_error -> point . data , p2 )
>949	ArgumentList	result . last_point_error -> point . data
>950	Argument	p2
>951	Identifier	p2
>952	Argument	result . last_point_error -> point . data
>953	MemberAccess	result . last_point_error -> point . data
>954	Identifier	data
>955	PtrMemberAccess	result . last_point_error -> point
>956	Identifier	point
>957	MemberAccess	result . last_point_error
>958	Identifier	last_point_error
>959	Identifier	result
>960	Callee	_mm_store_ps
>961	Identifier	_mm_store_ps
>962	Condition	 
>963	EqualityExpression	nans_mask == 0
>964	PrimaryExpression	0
>965	Identifier	nans_mask
>966	IdentifierDeclStatement	 
>967	IdentifierDecl	nans_mask = _mm_movemask_ps ( _mm_cmpunord_ps ( a , b ) )
>968	AssignmentExpr	nans_mask = _mm_movemask_ps ( _mm_cmpunord_ps ( a , b ) )
>969	CallExpression	_mm_movemask_ps ( _mm_cmpunord_ps ( a , b ) )
>970	ArgumentList	_mm_cmpunord_ps ( a , b )
>971	Argument	_mm_cmpunord_ps ( a , b )
>972	CallExpression	_mm_cmpunord_ps ( a , b )
>973	ArgumentList	a
>974	Argument	b
>975	Identifier	b
>976	Argument	a
>977	Identifier	a
>978	Callee	_mm_cmpunord_ps
>979	Identifier	_mm_cmpunord_ps
>980	Callee	_mm_movemask_ps
>981	Identifier	_mm_movemask_ps
>982	Identifier	nans_mask
>983	Identifier	nans_mask
>984	IdentifierDeclType	int
>985	IdentifierDeclStatement	 
>986	IdentifierDecl	b = _mm_add_ps ( b1 , b2 )
>987	AssignmentExpr	b = _mm_add_ps ( b1 , b2 )
>988	CallExpression	_mm_add_ps ( b1 , b2 )
>989	ArgumentList	b1
>990	Argument	b2
>991	Identifier	b2
>992	Argument	b1
>993	Identifier	b1
>994	Callee	_mm_add_ps
>995	Identifier	_mm_add_ps
>996	Identifier	b
>997	Identifier	b
>998	IdentifierDeclType	__m128
>999	IdentifierDeclStatement	 
>1000	IdentifierDecl	a = _mm_add_ps ( a1 , a2 )
>1001	AssignmentExpr	a = _mm_add_ps ( a1 , a2 )
>1002	CallExpression	_mm_add_ps ( a1 , a2 )
>1003	ArgumentList	a1
>1004	Argument	a2
>1005	Identifier	a2
>1006	Argument	a1
>1007	Identifier	a1
>1008	Callee	_mm_add_ps
>1009	Identifier	_mm_add_ps
>1010	Identifier	a
>1011	Identifier	a
>1012	IdentifierDeclType	__m128
>1013	IdentifierDeclStatement	 
>1014	IdentifierDecl	b2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_\
>1015	AssignmentExpr	b2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_\
>1016	CallExpression	_mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1017	ArgumentList	w1_vvvv
>1018	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1019	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1020	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) )
>1021	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 12 ) )
>1022	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 12 ) )
>1023	ArgumentList	w1_uuuu
>1024	Argument	_mm_load_ps ( x0y1_ptr + 12 )
>1025	CallExpression	_mm_load_ps ( x0y1_ptr + 12 )
>1026	ArgumentList	x0y1_ptr + 12
>1027	Argument	x0y1_ptr + 12
>1028	AdditiveExpression	x0y1_ptr + 12
>1029	PrimaryExpression	12
>1030	Identifier	x0y1_ptr
>1031	Callee	_mm_load_ps
>1032	Identifier	_mm_load_ps
>1033	Argument	w1_uuuu
>1034	Identifier	w1_uuuu
>1035	Callee	_mm_mul_ps
>1036	Identifier	_mm_mul_ps
>1037	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) )
>1038	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) )
>1039	ArgumentList	w0_uuuu
>1040	Argument	_mm_load_ps ( x0y1_ptr + 4 )
>1041	CallExpression	_mm_load_ps ( x0y1_ptr + 4 )
>1042	ArgumentList	x0y1_ptr + 4
>1043	Argument	x0y1_ptr + 4
>1044	AdditiveExpression	x0y1_ptr + 4
>1045	PrimaryExpression	4
>1046	Identifier	x0y1_ptr
>1047	Callee	_mm_load_ps
>1048	Identifier	_mm_load_ps
>1049	Argument	w0_uuuu
>1050	Identifier	w0_uuuu
>1051	Callee	_mm_mul_ps
>1052	Identifier	_mm_mul_ps
>1053	Callee	_mm_add_ps
>1054	Identifier	_mm_add_ps
>1055	Argument	w1_vvvv
>1056	Identifier	w1_vvvv
>1057	Callee	_mm_mul_ps
>1058	Identifier	_mm_mul_ps
>1059	Identifier	b2
>1060	Identifier	b2
>1061	IdentifierDeclType	__m128
>1062	IdentifierDeclStatement	 
>1063	IdentifierDecl	a2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_\
>1064	AssignmentExpr	a2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_\
>1065	CallExpression	_mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1066	ArgumentList	w1_vvvv
>1067	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1068	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1069	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) )
>1070	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 8 ) )
>1071	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 8 ) )
>1072	ArgumentList	w1_uuuu
>1073	Argument	_mm_load_ps ( x0y1_ptr + 8 )
>1074	CallExpression	_mm_load_ps ( x0y1_ptr + 8 )
>1075	ArgumentList	x0y1_ptr + 8
>1076	Argument	x0y1_ptr + 8
>1077	AdditiveExpression	x0y1_ptr + 8
>1078	PrimaryExpression	8
>1079	Identifier	x0y1_ptr
>1080	Callee	_mm_load_ps
>1081	Identifier	_mm_load_ps
>1082	Argument	w1_uuuu
>1083	Identifier	w1_uuuu
>1084	Callee	_mm_mul_ps
>1085	Identifier	_mm_mul_ps
>1086	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) )
>1087	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) )
>1088	ArgumentList	w0_uuuu
>1089	Argument	_mm_load_ps ( x0y1_ptr + 0 )
>1090	CallExpression	_mm_load_ps ( x0y1_ptr + 0 )
>1091	ArgumentList	x0y1_ptr + 0
>1092	Argument	x0y1_ptr + 0
>1093	AdditiveExpression	x0y1_ptr + 0
>1094	PrimaryExpression	0
>1095	Identifier	x0y1_ptr
>1096	Callee	_mm_load_ps
>1097	Identifier	_mm_load_ps
>1098	Argument	w0_uuuu
>1099	Identifier	w0_uuuu
>1100	Callee	_mm_mul_ps
>1101	Identifier	_mm_mul_ps
>1102	Callee	_mm_add_ps
>1103	Identifier	_mm_add_ps
>1104	Argument	w1_vvvv
>1105	Identifier	w1_vvvv
>1106	Callee	_mm_mul_ps
>1107	Identifier	_mm_mul_ps
>1108	Identifier	a2
>1109	Identifier	a2
>1110	IdentifierDeclType	__m128
>1111	IdentifierDeclStatement	 
>1112	IdentifierDecl	b1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_\
>1113	AssignmentExpr	b1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_\
>1114	CallExpression	_mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1115	ArgumentList	w0_vvvv
>1116	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1117	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1118	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) )
>1119	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 12 ) )
>1120	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 12 ) )
>1121	ArgumentList	w1_uuuu
>1122	Argument	_mm_load_ps ( x0y0_ptr + 12 )
>1123	CallExpression	_mm_load_ps ( x0y0_ptr + 12 )
>1124	ArgumentList	x0y0_ptr + 12
>1125	Argument	x0y0_ptr + 12
>1126	AdditiveExpression	x0y0_ptr + 12
>1127	PrimaryExpression	12
>1128	Identifier	x0y0_ptr
>1129	Callee	_mm_load_ps
>1130	Identifier	_mm_load_ps
>1131	Argument	w1_uuuu
>1132	Identifier	w1_uuuu
>1133	Callee	_mm_mul_ps
>1134	Identifier	_mm_mul_ps
>1135	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) )
>1136	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) )
>1137	ArgumentList	w0_uuuu
>1138	Argument	_mm_load_ps ( x0y0_ptr + 4 )
>1139	CallExpression	_mm_load_ps ( x0y0_ptr + 4 )
>1140	ArgumentList	x0y0_ptr + 4
>1141	Argument	x0y0_ptr + 4
>1142	AdditiveExpression	x0y0_ptr + 4
>1143	PrimaryExpression	4
>1144	Identifier	x0y0_ptr
>1145	Callee	_mm_load_ps
>1146	Identifier	_mm_load_ps
>1147	Argument	w0_uuuu
>1148	Identifier	w0_uuuu
>1149	Callee	_mm_mul_ps
>1150	Identifier	_mm_mul_ps
>1151	Callee	_mm_add_ps
>1152	Identifier	_mm_add_ps
>1153	Argument	w0_vvvv
>1154	Identifier	w0_vvvv
>1155	Callee	_mm_mul_ps
>1156	Identifier	_mm_mul_ps
>1157	Identifier	b1
>1158	Identifier	b1
>1159	IdentifierDeclType	__m128
>1160	IdentifierDeclStatement	 
>1161	IdentifierDecl	a1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_\
>1162	AssignmentExpr	a1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_\
>1163	CallExpression	_mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1164	ArgumentList	w0_vvvv
>1165	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1166	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1167	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) )
>1168	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 8 ) )
>1169	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 8 ) )
>1170	ArgumentList	w1_uuuu
>1171	Argument	_mm_load_ps ( x0y0_ptr + 8 )
>1172	CallExpression	_mm_load_ps ( x0y0_ptr + 8 )
>1173	ArgumentList	x0y0_ptr + 8
>1174	Argument	x0y0_ptr + 8
>1175	AdditiveExpression	x0y0_ptr + 8
>1176	PrimaryExpression	8
>1177	Identifier	x0y0_ptr
>1178	Callee	_mm_load_ps
>1179	Identifier	_mm_load_ps
>1180	Argument	w1_uuuu
>1181	Identifier	w1_uuuu
>1182	Callee	_mm_mul_ps
>1183	Identifier	_mm_mul_ps
>1184	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) )
>1185	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) )
>1186	ArgumentList	w0_uuuu
>1187	Argument	_mm_load_ps ( x0y0_ptr + 0 )
>1188	CallExpression	_mm_load_ps ( x0y0_ptr + 0 )
>1189	ArgumentList	x0y0_ptr + 0
>1190	Argument	x0y0_ptr + 0
>1191	AdditiveExpression	x0y0_ptr + 0
>1192	PrimaryExpression	0
>1193	Identifier	x0y0_ptr
>1194	Callee	_mm_load_ps
>1195	Identifier	_mm_load_ps
>1196	Argument	w0_uuuu
>1197	Identifier	w0_uuuu
>1198	Callee	_mm_mul_ps
>1199	Identifier	_mm_mul_ps
>1200	Callee	_mm_add_ps
>1201	Identifier	_mm_add_ps
>1202	Argument	w0_vvvv
>1203	Identifier	w0_vvvv
>1204	Callee	_mm_mul_ps
>1205	Identifier	_mm_mul_ps
>1206	Identifier	a1
>1207	Identifier	a1
>1208	IdentifierDeclType	__m128
>1209	IdentifierDeclStatement	 
>1210	IdentifierDecl	w1_vvvv = _mm_unpackhi_ps ( w1_uuvv , w1_uuvv )
>1211	AssignmentExpr	w1_vvvv = _mm_unpackhi_ps ( w1_uuvv , w1_uuvv )
>1212	CallExpression	_mm_unpackhi_ps ( w1_uuvv , w1_uuvv )
>1213	ArgumentList	w1_uuvv
>1214	Argument	w1_uuvv
>1215	Identifier	w1_uuvv
>1216	Argument	w1_uuvv
>1217	Identifier	w1_uuvv
>1218	Callee	_mm_unpackhi_ps
>1219	Identifier	_mm_unpackhi_ps
>1220	Identifier	w1_vvvv
>1221	Identifier	w1_vvvv
>1222	IdentifierDeclType	__m128
>1223	IdentifierDeclStatement	 
>1224	IdentifierDecl	w1_uuuu = _mm_unpacklo_ps ( w1_uuvv , w1_uuvv )
>1225	AssignmentExpr	w1_uuuu = _mm_unpacklo_ps ( w1_uuvv , w1_uuvv )
>1226	CallExpression	_mm_unpacklo_ps ( w1_uuvv , w1_uuvv )
>1227	ArgumentList	w1_uuvv
>1228	Argument	w1_uuvv
>1229	Identifier	w1_uuvv
>1230	Argument	w1_uuvv
>1231	Identifier	w1_uuvv
>1232	Callee	_mm_unpacklo_ps
>1233	Identifier	_mm_unpacklo_ps
>1234	Identifier	w1_uuuu
>1235	Identifier	w1_uuuu
>1236	IdentifierDeclType	__m128
>1237	IdentifierDeclStatement	 
>1238	IdentifierDecl	w1_uuvv = _mm_unpackhi_ps ( pt1w1_uv_pt2w1_uv , pt1w1_uv_pt2w1_uv )
>1239	AssignmentExpr	w1_uuvv = _mm_unpackhi_ps ( pt1w1_uv_pt2w1_uv , pt1w1_uv_pt2w1_uv )
>1240	CallExpression	_mm_unpackhi_ps ( pt1w1_uv_pt2w1_uv , pt1w1_uv_pt2w1_uv )
>1241	ArgumentList	pt1w1_uv_pt2w1_uv
>1242	Argument	pt1w1_uv_pt2w1_uv
>1243	Identifier	pt1w1_uv_pt2w1_uv
>1244	Argument	pt1w1_uv_pt2w1_uv
>1245	Identifier	pt1w1_uv_pt2w1_uv
>1246	Callee	_mm_unpackhi_ps
>1247	Identifier	_mm_unpackhi_ps
>1248	Identifier	w1_uuvv
>1249	Identifier	w1_uuvv
>1250	IdentifierDeclType	__m128
>1251	IdentifierDeclStatement	 
>1252	IdentifierDecl	w0_vvvv = _mm_unpackhi_ps ( w0_uuvv , w0_uuvv )
>1253	AssignmentExpr	w0_vvvv = _mm_unpackhi_ps ( w0_uuvv , w0_uuvv )
>1254	CallExpression	_mm_unpackhi_ps ( w0_uuvv , w0_uuvv )
>1255	ArgumentList	w0_uuvv
>1256	Argument	w0_uuvv
>1257	Identifier	w0_uuvv
>1258	Argument	w0_uuvv
>1259	Identifier	w0_uuvv
>1260	Callee	_mm_unpackhi_ps
>1261	Identifier	_mm_unpackhi_ps
>1262	Identifier	w0_vvvv
>1263	Identifier	w0_vvvv
>1264	IdentifierDeclType	__m128
>1265	IdentifierDeclStatement	 
>1266	IdentifierDecl	w0_uuuu = _mm_unpacklo_ps ( w0_uuvv , w0_uuvv )
>1267	AssignmentExpr	w0_uuuu = _mm_unpacklo_ps ( w0_uuvv , w0_uuvv )
>1268	CallExpression	_mm_unpacklo_ps ( w0_uuvv , w0_uuvv )
>1269	ArgumentList	w0_uuvv
>1270	Argument	w0_uuvv
>1271	Identifier	w0_uuvv
>1272	Argument	w0_uuvv
>1273	Identifier	w0_uuvv
>1274	Callee	_mm_unpacklo_ps
>1275	Identifier	_mm_unpacklo_ps
>1276	Identifier	w0_uuuu
>1277	Identifier	w0_uuuu
>1278	IdentifierDeclType	__m128
>1279	IdentifierDeclStatement	 
>1280	IdentifierDecl	w0_uuvv = _mm_unpackhi_ps ( pt1w0_uv_pt2w0_uv , pt1w0_uv_pt2w0_uv )
>1281	AssignmentExpr	w0_uuvv = _mm_unpackhi_ps ( pt1w0_uv_pt2w0_uv , pt1w0_uv_pt2w0_uv )
>1282	CallExpression	_mm_unpackhi_ps ( pt1w0_uv_pt2w0_uv , pt1w0_uv_pt2w0_uv )
>1283	ArgumentList	pt1w0_uv_pt2w0_uv
>1284	Argument	pt1w0_uv_pt2w0_uv
>1285	Identifier	pt1w0_uv_pt2w0_uv
>1286	Argument	pt1w0_uv_pt2w0_uv
>1287	Identifier	pt1w0_uv_pt2w0_uv
>1288	Callee	_mm_unpackhi_ps
>1289	Identifier	_mm_unpackhi_ps
>1290	Identifier	w0_uuvv
>1291	Identifier	w0_uuvv
>1292	IdentifierDeclType	__m128
>1293	ExpressionStatement	 
>1294	CallExpression	_mm_prefetch ( x0y1_ptr , _MM_HINT_NTA )
>1295	ArgumentList	x0y1_ptr
>1296	Argument	_MM_HINT_NTA
>1297	Identifier	_MM_HINT_NTA
>1298	Argument	x0y1_ptr
>1299	Identifier	x0y1_ptr
>1300	Callee	_mm_prefetch
>1301	Identifier	_mm_prefetch
>1302	IdentifierDeclStatement	 
>1303	IdentifierDecl	* x0y1_ptr = current . acceleration . ptr < float > ( address [ 3 ] + 1 , address [ 2 ] )
>1304	AssignmentExpr	* x0y1_ptr = current . acceleration . ptr < float > ( address [ 3 ] + 1 , address [ 2 ] )
>1305	RelationalExpression	current . acceleration . ptr < float > ( address [ 3 ] + 1 , address [ 2 ] )
>1306	RelationalExpression	float > ( address [ 3 ] + 1 , address [ 2 ] )
>1307	Expression	address [ 3 ] + 1 , address [ 2 ]
>1308	ArrayIndexing	address [ 2 ]
>1309	PrimaryExpression	2
>1310	Identifier	address
>1311	AdditiveExpression	address [ 3 ] + 1
>1312	PrimaryExpression	1
>1313	ArrayIndexing	address [ 3 ]
>1314	PrimaryExpression	3
>1315	Identifier	address
>1316	Identifier	float
>1317	MemberAccess	current . acceleration . ptr
>1318	Identifier	ptr
>1319	MemberAccess	current . acceleration
>1320	Identifier	acceleration
>1321	Identifier	current
>1322	Identifier	x0y1_ptr
>1323	Identifier	x0y1_ptr
>1324	IdentifierDeclType	const float *
>1325	IdentifierDeclStatement	 
>1326	IdentifierDecl	* x0y0_ptr = current . acceleration . ptr < float > ( address [ 3 ] , address [ 2 ] )
>1327	AssignmentExpr	* x0y0_ptr = current . acceleration . ptr < float > ( address [ 3 ] , address [ 2 ] )
>1328	RelationalExpression	current . acceleration . ptr < float > ( address [ 3 ] , address [ 2 ] )
>1329	RelationalExpression	float > ( address [ 3 ] , address [ 2 ] )
>1330	Expression	address [ 3 ] , address [ 2 ]
>1331	ArrayIndexing	address [ 2 ]
>1332	PrimaryExpression	2
>1333	Identifier	address
>1334	ArrayIndexing	address [ 3 ]
>1335	PrimaryExpression	3
>1336	Identifier	address
>1337	Identifier	float
>1338	MemberAccess	current . acceleration . ptr
>1339	Identifier	ptr
>1340	MemberAccess	current . acceleration
>1341	Identifier	acceleration
>1342	Identifier	current
>1343	Identifier	x0y0_ptr
>1344	Identifier	x0y0_ptr
>1345	IdentifierDeclType	const float *
>1346	Condition	 
>1347	EqualityExpression	( bounds_mask & 12 ) == 12
>1348	PrimaryExpression	12
>1349	BitAndExpression	bounds_mask & 12
>1350	PrimaryExpression	12
>1351	Identifier	bounds_mask
>1352	IfStatement	if ( Debug )
>1353	ExpressionStatement	 
>1354	AssignmentExpr	* result . last_valid_flag = uint8_t ( ( bounds_mask & 12 ) == 12 )
>1355	CallExpression	uint8_t ( ( bounds_mask & 12 ) == 12 )
>1356	ArgumentList	( bounds_mask & 12 ) == 12
>1357	Argument	( bounds_mask & 12 ) == 12
>1358	EqualityExpression	( bounds_mask & 12 ) == 12
>1359	PrimaryExpression	12
>1360	BitAndExpression	bounds_mask & 12
>1361	PrimaryExpression	12
>1362	Identifier	bounds_mask
>1363	Callee	uint8_t
>1364	Identifier	uint8_t
>1365	UnaryOp	* result . last_valid_flag
>1366	MemberAccess	result . last_valid_flag
>1367	Identifier	last_valid_flag
>1368	Identifier	result
>1369	UnaryOperator	*
>1370	Condition	 
>1371	Identifier	Debug
>1372	IfStatement	if ( Debug )
>1373	ExpressionStatement	 
>1374	UnaryExpression	++ result . last_valid_flag
>1375	MemberAccess	result . last_valid_flag
>1376	Identifier	last_valid_flag
>1377	Identifier	result
>1378	IncDec	++
>1379	Condition	 
>1380	Identifier	Debug
>1381	IfStatement	if ( ( bounds_mask & 3 ) == 3 )
>1382	CompoundStatement	 
>1383	IfStatement	if ( Debug )
>1384	ExpressionStatement	 
>1385	AssignmentExpr	* result . last_valid_flag = uint8_t ( nans_mask == 0 )
>1386	CallExpression	uint8_t ( nans_mask == 0 )
>1387	ArgumentList	nans_mask == 0
>1388	Argument	nans_mask == 0
>1389	EqualityExpression	nans_mask == 0
>1390	PrimaryExpression	0
>1391	Identifier	nans_mask
>1392	Callee	uint8_t
>1393	Identifier	uint8_t
>1394	UnaryOp	* result . last_valid_flag
>1395	MemberAccess	result . last_valid_flag
>1396	Identifier	last_valid_flag
>1397	Identifier	result
>1398	UnaryOperator	*
>1399	Condition	 
>1400	Identifier	Debug
>1401	IfStatement	if ( nans_mask == 0 )
>1402	CompoundStatement	 
>1403	IfStatement	if ( result . last_point_error -> intensity_and_depth . z > - 20.0f * depthStdDevZ ( ( p_it + 0 ) -> intensity_and_\
>1404	ElseStatement	else
>1405	CompoundStatement	 
>1406	ExpressionStatement	 
>1407	AssignmentExpr	nans_mask = 1
>1408	PrimaryExpression	1
>1409	Identifier	nans_mask
>1410	CompoundStatement	 
>1411	ExpressionStatement	 
>1412	UnaryExpression	++ result . last_residual
>1413	MemberAccess	result . last_residual
>1414	Identifier	last_residual
>1415	Identifier	result
>1416	IncDec	++
>1417	ExpressionStatement	 
>1418	UnaryExpression	++ result . last_point_error
>1419	MemberAccess	result . last_point_error
>1420	Identifier	last_point_error
>1421	Identifier	result
>1422	IncDec	++
>1423	ExpressionStatement	 
>1424	CallExpression	_mm_store_ps ( result . last_point_error -> intensity_and_depth . data + 4 , residual_b )
>1425	ArgumentList	result . last_point_error -> intensity_and_depth . data + 4
>1426	Argument	residual_b
>1427	Identifier	residual_b
>1428	Argument	result . last_point_error -> intensity_and_depth . data + 4
>1429	AdditiveExpression	result . last_point_error -> intensity_and_depth . data + 4
>1430	PrimaryExpression	4
>1431	MemberAccess	result . last_point_error -> intensity_and_depth . data
>1432	Identifier	data
>1433	PtrMemberAccess	result . last_point_error -> intensity_and_depth
>1434	Identifier	intensity_and_depth
>1435	MemberAccess	result . last_point_error
>1436	Identifier	last_point_error
>1437	Identifier	result
>1438	Callee	_mm_store_ps
>1439	Identifier	_mm_store_ps
>1440	IdentifierDeclStatement	 
>1441	IdentifierDecl	residual_b = _mm_add_ps ( _mm_mul_ps ( current_weight_b , b ) , _mm_mul_ps ( reference_weight_b , reference_b ) )
>1442	AssignmentExpr	residual_b = _mm_add_ps ( _mm_mul_ps ( current_weight_b , b ) , _mm_mul_ps ( reference_weight_b , reference_\
>1443	CallExpression	_mm_add_ps ( _mm_mul_ps ( current_weight_b , b ) , _mm_mul_ps ( reference_weight_b , reference_b ) )
>1444	ArgumentList	_mm_mul_ps ( current_weight_b , b )
>1445	Argument	_mm_mul_ps ( reference_weight_b , reference_b )
>1446	CallExpression	_mm_mul_ps ( reference_weight_b , reference_b )
>1447	ArgumentList	reference_weight_b
>1448	Argument	reference_b
>1449	Identifier	reference_b
>1450	Argument	reference_weight_b
>1451	Identifier	reference_weight_b
>1452	Callee	_mm_mul_ps
>1453	Identifier	_mm_mul_ps
>1454	Argument	_mm_mul_ps ( current_weight_b , b )
>1455	CallExpression	_mm_mul_ps ( current_weight_b , b )
>1456	ArgumentList	current_weight_b
>1457	Argument	b
>1458	Identifier	b
>1459	Argument	current_weight_b
>1460	Identifier	current_weight_b
>1461	Callee	_mm_mul_ps
>1462	Identifier	_mm_mul_ps
>1463	Callee	_mm_add_ps
>1464	Identifier	_mm_add_ps
>1465	Identifier	residual_b
>1466	Identifier	residual_b
>1467	IdentifierDeclType	__m128
>1468	IdentifierDeclStatement	 
>1469	IdentifierDecl	reference_b = _mm_load_ps ( ( p_it + 0 ) -> intensity_and_depth . data + 4 )
>1470	AssignmentExpr	reference_b = _mm_load_ps ( ( p_it + 0 ) -> intensity_and_depth . data + 4 )
>1471	CallExpression	_mm_load_ps ( ( p_it + 0 ) -> intensity_and_depth . data + 4 )
>1472	ArgumentList	( p_it + 0 ) -> intensity_and_depth . data + 4
>1473	Argument	( p_it + 0 ) -> intensity_and_depth . data + 4
>1474	AdditiveExpression	( p_it + 0 ) -> intensity_and_depth . data + 4
>1475	PrimaryExpression	4
>1476	MemberAccess	( p_it + 0 ) -> intensity_and_depth . data
>1477	Identifier	data
>1478	PtrMemberAccess	( p_it + 0 ) -> intensity_and_depth
>1479	Identifier	intensity_and_depth
>1480	AdditiveExpression	p_it + 0
>1481	PrimaryExpression	0
>1482	Identifier	p_it
>1483	Callee	_mm_load_ps
>1484	Identifier	_mm_load_ps
>1485	Identifier	reference_b
>1486	Identifier	reference_b
>1487	IdentifierDeclType	__m128
>1488	ExpressionStatement	 
>1489	CallExpression	_mm_storel_pi ( ( __m64 * ) result . last_residual -> data ( ) , residual_a )
>1490	ArgumentList	( __m64 * ) result . last_residual -> data ( )
>1491	Argument	residual_a
>1492	Identifier	residual_a
>1493	Argument	( __m64 * ) result . last_residual -> data ( )
>1494	CastExpression	( __m64 * ) result . last_residual -> data ( )
>1495	CallExpression	result . last_residual -> data ( )
>1496	ArgumentList	 
>1497	Callee	result . last_residual -> data
>1498	PtrMemberAccess	result . last_residual -> data
>1499	Identifier	data
>1500	MemberAccess	result . last_residual
>1501	Identifier	last_residual
>1502	Identifier	result
>1503	CastTarget	__m64 *
>1504	Callee	_mm_storel_pi
>1505	Identifier	_mm_storel_pi
>1506	Condition	 
>1507	RelationalExpression	result . last_point_error -> intensity_and_depth . z > - 20.0f * depthStdDevZ ( ( p_it + 0 ) -> intensity_\
>1508	MultiplicativeExpression	- 20.0f * depthStdDevZ ( ( p_it + 0 ) -> intensity_and_depth . z )
>1509	CallExpression	depthStdDevZ ( ( p_it + 0 ) -> intensity_and_depth . z )
>1510	ArgumentList	( p_it + 0 ) -> intensity_and_depth . z
>1511	Argument	( p_it + 0 ) -> intensity_and_depth . z
>1512	MemberAccess	( p_it + 0 ) -> intensity_and_depth . z
>1513	Identifier	z
>1514	PtrMemberAccess	( p_it + 0 ) -> intensity_and_depth
>1515	Identifier	intensity_and_depth
>1516	AdditiveExpression	p_it + 0
>1517	PrimaryExpression	0
>1518	Identifier	p_it
>1519	Callee	depthStdDevZ
>1520	Identifier	depthStdDevZ
>1521	UnaryOp	- 20.0f
>1522	PrimaryExpression	20.0f
>1523	UnaryOperator	-
>1524	MemberAccess	result . last_point_error -> intensity_and_depth . z
>1525	Identifier	z
>1526	PtrMemberAccess	result . last_point_error -> intensity_and_depth
>1527	Identifier	intensity_and_depth
>1528	MemberAccess	result . last_point_error
>1529	Identifier	last_point_error
>1530	Identifier	result
>1531	ExpressionStatement	 
>1532	CallExpression	_mm_store_ps ( result . last_point_error -> intensity_and_depth . data + 0 , residual_a )
>1533	ArgumentList	result . last_point_error -> intensity_and_depth . data + 0
>1534	Argument	residual_a
>1535	Identifier	residual_a
>1536	Argument	result . last_point_error -> intensity_and_depth . data + 0
>1537	AdditiveExpression	result . last_point_error -> intensity_and_depth . data + 0
>1538	PrimaryExpression	0
>1539	MemberAccess	result . last_point_error -> intensity_and_depth . data
>1540	Identifier	data
>1541	PtrMemberAccess	result . last_point_error -> intensity_and_depth
>1542	Identifier	intensity_and_depth
>1543	MemberAccess	result . last_point_error
>1544	Identifier	last_point_error
>1545	Identifier	result
>1546	Callee	_mm_store_ps
>1547	Identifier	_mm_store_ps
>1548	IdentifierDeclStatement	 
>1549	IdentifierDecl	residual_a = _mm_add_ps ( _mm_mul_ps ( current_weight_a , a ) , _mm_mul_ps ( reference_weight_a , reference_a ) )
>1550	AssignmentExpr	residual_a = _mm_add_ps ( _mm_mul_ps ( current_weight_a , a ) , _mm_mul_ps ( reference_weight_a , reference_\
>1551	CallExpression	_mm_add_ps ( _mm_mul_ps ( current_weight_a , a ) , _mm_mul_ps ( reference_weight_a , reference_a ) )
>1552	ArgumentList	_mm_mul_ps ( current_weight_a , a )
>1553	Argument	_mm_mul_ps ( reference_weight_a , reference_a )
>1554	CallExpression	_mm_mul_ps ( reference_weight_a , reference_a )
>1555	ArgumentList	reference_weight_a
>1556	Argument	reference_a
>1557	Identifier	reference_a
>1558	Argument	reference_weight_a
>1559	Identifier	reference_weight_a
>1560	Callee	_mm_mul_ps
>1561	Identifier	_mm_mul_ps
>1562	Argument	_mm_mul_ps ( current_weight_a , a )
>1563	CallExpression	_mm_mul_ps ( current_weight_a , a )
>1564	ArgumentList	current_weight_a
>1565	Argument	a
>1566	Identifier	a
>1567	Argument	current_weight_a
>1568	Identifier	current_weight_a
>1569	Callee	_mm_mul_ps
>1570	Identifier	_mm_mul_ps
>1571	Callee	_mm_add_ps
>1572	Identifier	_mm_add_ps
>1573	Identifier	residual_a
>1574	Identifier	residual_a
>1575	IdentifierDeclType	__m128
>1576	ExpressionStatement	 
>1577	AssignmentExpr	reference_a = _mm_or_ps ( _mm_and_ps ( BLEND_MASK , pt1_zz_pt2_zz ) , _mm_andnot_ps ( BLEND_MASK , reference_\
>1578	CallExpression	_mm_or_ps ( _mm_and_ps ( BLEND_MASK , pt1_zz_pt2_zz ) , _mm_andnot_ps ( BLEND_MASK , reference_a ) )
>1579	ArgumentList	_mm_and_ps ( BLEND_MASK , pt1_zz_pt2_zz )
>1580	Argument	_mm_andnot_ps ( BLEND_MASK , reference_a )
>1581	CallExpression	_mm_andnot_ps ( BLEND_MASK , reference_a )
>1582	ArgumentList	BLEND_MASK
>1583	Argument	reference_a
>1584	Identifier	reference_a
>1585	Argument	BLEND_MASK
>1586	Identifier	BLEND_MASK
>1587	Callee	_mm_andnot_ps
>1588	Identifier	_mm_andnot_ps
>1589	Argument	_mm_and_ps ( BLEND_MASK , pt1_zz_pt2_zz )
>1590	CallExpression	_mm_and_ps ( BLEND_MASK , pt1_zz_pt2_zz )
>1591	ArgumentList	BLEND_MASK
>1592	Argument	pt1_zz_pt2_zz
>1593	Identifier	pt1_zz_pt2_zz
>1594	Argument	BLEND_MASK
>1595	Identifier	BLEND_MASK
>1596	Callee	_mm_and_ps
>1597	Identifier	_mm_and_ps
>1598	Callee	_mm_or_ps
>1599	Identifier	_mm_or_ps
>1600	Identifier	reference_a
>1601	IdentifierDeclStatement	 
>1602	IdentifierDecl	reference_a = _mm_load_ps ( ( p_it + 0 ) -> intensity_and_depth . data )
>1603	AssignmentExpr	reference_a = _mm_load_ps ( ( p_it + 0 ) -> intensity_and_depth . data )
>1604	CallExpression	_mm_load_ps ( ( p_it + 0 ) -> intensity_and_depth . data )
>1605	ArgumentList	( p_it + 0 ) -> intensity_and_depth . data
>1606	Argument	( p_it + 0 ) -> intensity_and_depth . data
>1607	MemberAccess	( p_it + 0 ) -> intensity_and_depth . data
>1608	Identifier	data
>1609	PtrMemberAccess	( p_it + 0 ) -> intensity_and_depth
>1610	Identifier	intensity_and_depth
>1611	AdditiveExpression	p_it + 0
>1612	PrimaryExpression	0
>1613	Identifier	p_it
>1614	Callee	_mm_load_ps
>1615	Identifier	_mm_load_ps
>1616	Identifier	reference_a
>1617	Identifier	reference_a
>1618	IdentifierDeclType	__m128
>1619	ExpressionStatement	 
>1620	CallExpression	_mm_store_ps ( result . last_point_error -> point . data , p1 )
>1621	ArgumentList	result . last_point_error -> point . data
>1622	Argument	p1
>1623	Identifier	p1
>1624	Argument	result . last_point_error -> point . data
>1625	MemberAccess	result . last_point_error -> point . data
>1626	Identifier	data
>1627	PtrMemberAccess	result . last_point_error -> point
>1628	Identifier	point
>1629	MemberAccess	result . last_point_error
>1630	Identifier	last_point_error
>1631	Identifier	result
>1632	Callee	_mm_store_ps
>1633	Identifier	_mm_store_ps
>1634	Condition	 
>1635	EqualityExpression	nans_mask == 0
>1636	PrimaryExpression	0
>1637	Identifier	nans_mask
>1638	IdentifierDeclStatement	 
>1639	IdentifierDecl	nans_mask = _mm_movemask_ps ( _mm_cmpunord_ps ( a , b ) )
>1640	AssignmentExpr	nans_mask = _mm_movemask_ps ( _mm_cmpunord_ps ( a , b ) )
>1641	CallExpression	_mm_movemask_ps ( _mm_cmpunord_ps ( a , b ) )
>1642	ArgumentList	_mm_cmpunord_ps ( a , b )
>1643	Argument	_mm_cmpunord_ps ( a , b )
>1644	CallExpression	_mm_cmpunord_ps ( a , b )
>1645	ArgumentList	a
>1646	Argument	b
>1647	Identifier	b
>1648	Argument	a
>1649	Identifier	a
>1650	Callee	_mm_cmpunord_ps
>1651	Identifier	_mm_cmpunord_ps
>1652	Callee	_mm_movemask_ps
>1653	Identifier	_mm_movemask_ps
>1654	Identifier	nans_mask
>1655	Identifier	nans_mask
>1656	IdentifierDeclType	int
>1657	IdentifierDeclStatement	 
>1658	IdentifierDecl	b = _mm_add_ps ( b1 , b2 )
>1659	AssignmentExpr	b = _mm_add_ps ( b1 , b2 )
>1660	CallExpression	_mm_add_ps ( b1 , b2 )
>1661	ArgumentList	b1
>1662	Argument	b2
>1663	Identifier	b2
>1664	Argument	b1
>1665	Identifier	b1
>1666	Callee	_mm_add_ps
>1667	Identifier	_mm_add_ps
>1668	Identifier	b
>1669	Identifier	b
>1670	IdentifierDeclType	__m128
>1671	IdentifierDeclStatement	 
>1672	IdentifierDecl	a = _mm_add_ps ( a1 , a2 )
>1673	AssignmentExpr	a = _mm_add_ps ( a1 , a2 )
>1674	CallExpression	_mm_add_ps ( a1 , a2 )
>1675	ArgumentList	a1
>1676	Argument	a2
>1677	Identifier	a2
>1678	Argument	a1
>1679	Identifier	a1
>1680	Callee	_mm_add_ps
>1681	Identifier	_mm_add_ps
>1682	Identifier	a
>1683	Identifier	a
>1684	IdentifierDeclType	__m128
>1685	IdentifierDeclStatement	 
>1686	IdentifierDecl	b2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_\
>1687	AssignmentExpr	b2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_\
>1688	CallExpression	_mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1689	ArgumentList	w1_vvvv
>1690	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1691	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1692	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) )
>1693	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 12 ) )
>1694	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 12 ) )
>1695	ArgumentList	w1_uuuu
>1696	Argument	_mm_load_ps ( x0y1_ptr + 12 )
>1697	CallExpression	_mm_load_ps ( x0y1_ptr + 12 )
>1698	ArgumentList	x0y1_ptr + 12
>1699	Argument	x0y1_ptr + 12
>1700	AdditiveExpression	x0y1_ptr + 12
>1701	PrimaryExpression	12
>1702	Identifier	x0y1_ptr
>1703	Callee	_mm_load_ps
>1704	Identifier	_mm_load_ps
>1705	Argument	w1_uuuu
>1706	Identifier	w1_uuuu
>1707	Callee	_mm_mul_ps
>1708	Identifier	_mm_mul_ps
>1709	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) )
>1710	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 4 ) )
>1711	ArgumentList	w0_uuuu
>1712	Argument	_mm_load_ps ( x0y1_ptr + 4 )
>1713	CallExpression	_mm_load_ps ( x0y1_ptr + 4 )
>1714	ArgumentList	x0y1_ptr + 4
>1715	Argument	x0y1_ptr + 4
>1716	AdditiveExpression	x0y1_ptr + 4
>1717	PrimaryExpression	4
>1718	Identifier	x0y1_ptr
>1719	Callee	_mm_load_ps
>1720	Identifier	_mm_load_ps
>1721	Argument	w0_uuuu
>1722	Identifier	w0_uuuu
>1723	Callee	_mm_mul_ps
>1724	Identifier	_mm_mul_ps
>1725	Callee	_mm_add_ps
>1726	Identifier	_mm_add_ps
>1727	Argument	w1_vvvv
>1728	Identifier	w1_vvvv
>1729	Callee	_mm_mul_ps
>1730	Identifier	_mm_mul_ps
>1731	Identifier	b2
>1732	Identifier	b2
>1733	IdentifierDeclType	__m128
>1734	IdentifierDeclStatement	 
>1735	IdentifierDecl	a2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_\
>1736	AssignmentExpr	a2 = _mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_\
>1737	CallExpression	_mm_mul_ps ( w1_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1738	ArgumentList	w1_vvvv
>1739	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1740	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + \
>1741	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) )
>1742	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 8 ) )
>1743	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y1_ptr + 8 ) )
>1744	ArgumentList	w1_uuuu
>1745	Argument	_mm_load_ps ( x0y1_ptr + 8 )
>1746	CallExpression	_mm_load_ps ( x0y1_ptr + 8 )
>1747	ArgumentList	x0y1_ptr + 8
>1748	Argument	x0y1_ptr + 8
>1749	AdditiveExpression	x0y1_ptr + 8
>1750	PrimaryExpression	8
>1751	Identifier	x0y1_ptr
>1752	Callee	_mm_load_ps
>1753	Identifier	_mm_load_ps
>1754	Argument	w1_uuuu
>1755	Identifier	w1_uuuu
>1756	Callee	_mm_mul_ps
>1757	Identifier	_mm_mul_ps
>1758	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) )
>1759	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y1_ptr + 0 ) )
>1760	ArgumentList	w0_uuuu
>1761	Argument	_mm_load_ps ( x0y1_ptr + 0 )
>1762	CallExpression	_mm_load_ps ( x0y1_ptr + 0 )
>1763	ArgumentList	x0y1_ptr + 0
>1764	Argument	x0y1_ptr + 0
>1765	AdditiveExpression	x0y1_ptr + 0
>1766	PrimaryExpression	0
>1767	Identifier	x0y1_ptr
>1768	Callee	_mm_load_ps
>1769	Identifier	_mm_load_ps
>1770	Argument	w0_uuuu
>1771	Identifier	w0_uuuu
>1772	Callee	_mm_mul_ps
>1773	Identifier	_mm_mul_ps
>1774	Callee	_mm_add_ps
>1775	Identifier	_mm_add_ps
>1776	Argument	w1_vvvv
>1777	Identifier	w1_vvvv
>1778	Callee	_mm_mul_ps
>1779	Identifier	_mm_mul_ps
>1780	Identifier	a2
>1781	Identifier	a2
>1782	IdentifierDeclType	__m128
>1783	IdentifierDeclStatement	 
>1784	IdentifierDecl	b1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_\
>1785	AssignmentExpr	b1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_\
>1786	CallExpression	_mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1787	ArgumentList	w0_vvvv
>1788	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1789	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1790	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) )
>1791	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 12 ) )
>1792	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 12 ) )
>1793	ArgumentList	w1_uuuu
>1794	Argument	_mm_load_ps ( x0y0_ptr + 12 )
>1795	CallExpression	_mm_load_ps ( x0y0_ptr + 12 )
>1796	ArgumentList	x0y0_ptr + 12
>1797	Argument	x0y0_ptr + 12
>1798	AdditiveExpression	x0y0_ptr + 12
>1799	PrimaryExpression	12
>1800	Identifier	x0y0_ptr
>1801	Callee	_mm_load_ps
>1802	Identifier	_mm_load_ps
>1803	Argument	w1_uuuu
>1804	Identifier	w1_uuuu
>1805	Callee	_mm_mul_ps
>1806	Identifier	_mm_mul_ps
>1807	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) )
>1808	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 4 ) )
>1809	ArgumentList	w0_uuuu
>1810	Argument	_mm_load_ps ( x0y0_ptr + 4 )
>1811	CallExpression	_mm_load_ps ( x0y0_ptr + 4 )
>1812	ArgumentList	x0y0_ptr + 4
>1813	Argument	x0y0_ptr + 4
>1814	AdditiveExpression	x0y0_ptr + 4
>1815	PrimaryExpression	4
>1816	Identifier	x0y0_ptr
>1817	Callee	_mm_load_ps
>1818	Identifier	_mm_load_ps
>1819	Argument	w0_uuuu
>1820	Identifier	w0_uuuu
>1821	Callee	_mm_mul_ps
>1822	Identifier	_mm_mul_ps
>1823	Callee	_mm_add_ps
>1824	Identifier	_mm_add_ps
>1825	Argument	w0_vvvv
>1826	Identifier	w0_vvvv
>1827	Callee	_mm_mul_ps
>1828	Identifier	_mm_mul_ps
>1829	Identifier	b1
>1830	Identifier	b1
>1831	IdentifierDeclType	__m128
>1832	IdentifierDeclStatement	 
>1833	IdentifierDecl	a1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_\
>1834	AssignmentExpr	a1 = _mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_\
>1835	CallExpression	_mm_mul_ps ( w0_vvvv , _mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _\
>1836	ArgumentList	w0_vvvv
>1837	Argument	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1838	CallExpression	_mm_add_ps ( _mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) ) , _mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + \
>1839	ArgumentList	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) )
>1840	Argument	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 8 ) )
>1841	CallExpression	_mm_mul_ps ( w1_uuuu , _mm_load_ps ( x0y0_ptr + 8 ) )
>1842	ArgumentList	w1_uuuu
>1843	Argument	_mm_load_ps ( x0y0_ptr + 8 )
>1844	CallExpression	_mm_load_ps ( x0y0_ptr + 8 )
>1845	ArgumentList	x0y0_ptr + 8
>1846	Argument	x0y0_ptr + 8
>1847	AdditiveExpression	x0y0_ptr + 8
>1848	PrimaryExpression	8
>1849	Identifier	x0y0_ptr
>1850	Callee	_mm_load_ps
>1851	Identifier	_mm_load_ps
>1852	Argument	w1_uuuu
>1853	Identifier	w1_uuuu
>1854	Callee	_mm_mul_ps
>1855	Identifier	_mm_mul_ps
>1856	Argument	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) )
>1857	CallExpression	_mm_mul_ps ( w0_uuuu , _mm_load_ps ( x0y0_ptr + 0 ) )
>1858	ArgumentList	w0_uuuu
>1859	Argument	_mm_load_ps ( x0y0_ptr + 0 )
>1860	CallExpression	_mm_load_ps ( x0y0_ptr + 0 )
>1861	ArgumentList	x0y0_ptr + 0
>1862	Argument	x0y0_ptr + 0
>1863	AdditiveExpression	x0y0_ptr + 0
>1864	PrimaryExpression	0
>1865	Identifier	x0y0_ptr
>1866	Callee	_mm_load_ps
>1867	Identifier	_mm_load_ps
>1868	Argument	w0_uuuu
>1869	Identifier	w0_uuuu
>1870	Callee	_mm_mul_ps
>1871	Identifier	_mm_mul_ps
>1872	Callee	_mm_add_ps
>1873	Identifier	_mm_add_ps
>1874	Argument	w0_vvvv
>1875	Identifier	w0_vvvv
>1876	Callee	_mm_mul_ps
>1877	Identifier	_mm_mul_ps
>1878	Identifier	a1
>1879	Identifier	a1
>1880	IdentifierDeclType	__m128
>1881	IdentifierDeclStatement	 
>1882	IdentifierDecl	w1_vvvv = _mm_unpackhi_ps ( w1_uuvv , w1_uuvv )
>1883	AssignmentExpr	w1_vvvv = _mm_unpackhi_ps ( w1_uuvv , w1_uuvv )
>1884	CallExpression	_mm_unpackhi_ps ( w1_uuvv , w1_uuvv )
>1885	ArgumentList	w1_uuvv
>1886	Argument	w1_uuvv
>1887	Identifier	w1_uuvv
>1888	Argument	w1_uuvv
>1889	Identifier	w1_uuvv
>1890	Callee	_mm_unpackhi_ps
>1891	Identifier	_mm_unpackhi_ps
>1892	Identifier	w1_vvvv
>1893	Identifier	w1_vvvv
>1894	IdentifierDeclType	__m128
>1895	IdentifierDeclStatement	 
>1896	IdentifierDecl	w1_uuuu = _mm_unpacklo_ps ( w1_uuvv , w1_uuvv )
>1897	AssignmentExpr	w1_uuuu = _mm_unpacklo_ps ( w1_uuvv , w1_uuvv )
>1898	CallExpression	_mm_unpacklo_ps ( w1_uuvv , w1_uuvv )
>1899	ArgumentList	w1_uuvv
>1900	Argument	w1_uuvv
>1901	Identifier	w1_uuvv
>1902	Argument	w1_uuvv
>1903	Identifier	w1_uuvv
>1904	Callee	_mm_unpacklo_ps
>1905	Identifier	_mm_unpacklo_ps
>1906	Identifier	w1_uuuu
>1907	Identifier	w1_uuuu
>1908	IdentifierDeclType	__m128
>1909	IdentifierDeclStatement	 
>1910	IdentifierDecl	w1_uuvv = _mm_unpacklo_ps ( pt1w1_uv_pt2w1_uv , pt1w1_uv_pt2w1_uv )
>1911	AssignmentExpr	w1_uuvv = _mm_unpacklo_ps ( pt1w1_uv_pt2w1_uv , pt1w1_uv_pt2w1_uv )
>1912	CallExpression	_mm_unpacklo_ps ( pt1w1_uv_pt2w1_uv , pt1w1_uv_pt2w1_uv )
>1913	ArgumentList	pt1w1_uv_pt2w1_uv
>1914	Argument	pt1w1_uv_pt2w1_uv
>1915	Identifier	pt1w1_uv_pt2w1_uv
>1916	Argument	pt1w1_uv_pt2w1_uv
>1917	Identifier	pt1w1_uv_pt2w1_uv
>1918	Callee	_mm_unpacklo_ps
>1919	Identifier	_mm_unpacklo_ps
>1920	Identifier	w1_uuvv
>1921	Identifier	w1_uuvv
>1922	IdentifierDeclType	__m128
>1923	IdentifierDeclStatement	 
>1924	IdentifierDecl	w0_vvvv = _mm_unpackhi_ps ( w0_uuvv , w0_uuvv )
>1925	AssignmentExpr	w0_vvvv = _mm_unpackhi_ps ( w0_uuvv , w0_uuvv )
>1926	CallExpression	_mm_unpackhi_ps ( w0_uuvv , w0_uuvv )
>1927	ArgumentList	w0_uuvv
>1928	Argument	w0_uuvv
>1929	Identifier	w0_uuvv
>1930	Argument	w0_uuvv
>1931	Identifier	w0_uuvv
>1932	Callee	_mm_unpackhi_ps
>1933	Identifier	_mm_unpackhi_ps
>1934	Identifier	w0_vvvv
>1935	Identifier	w0_vvvv
>1936	IdentifierDeclType	__m128
>1937	IdentifierDeclStatement	 
>1938	IdentifierDecl	w0_uuuu = _mm_unpacklo_ps ( w0_uuvv , w0_uuvv )
>1939	AssignmentExpr	w0_uuuu = _mm_unpacklo_ps ( w0_uuvv , w0_uuvv )
>1940	CallExpression	_mm_unpacklo_ps ( w0_uuvv , w0_uuvv )
>1941	ArgumentList	w0_uuvv
>1942	Argument	w0_uuvv
>1943	Identifier	w0_uuvv
>1944	Argument	w0_uuvv
>1945	Identifier	w0_uuvv
>1946	Callee	_mm_unpacklo_ps
>1947	Identifier	_mm_unpacklo_ps
>1948	Identifier	w0_uuuu
>1949	Identifier	w0_uuuu
>1950	IdentifierDeclType	__m128
>1951	IdentifierDeclStatement	 
>1952	IdentifierDecl	w0_uuvv = _mm_unpacklo_ps ( pt1w0_uv_pt2w0_uv , pt1w0_uv_pt2w0_uv )
>1953	AssignmentExpr	w0_uuvv = _mm_unpacklo_ps ( pt1w0_uv_pt2w0_uv , pt1w0_uv_pt2w0_uv )
>1954	CallExpression	_mm_unpacklo_ps ( pt1w0_uv_pt2w0_uv , pt1w0_uv_pt2w0_uv )
>1955	ArgumentList	pt1w0_uv_pt2w0_uv
>1956	Argument	pt1w0_uv_pt2w0_uv
>1957	Identifier	pt1w0_uv_pt2w0_uv
>1958	Argument	pt1w0_uv_pt2w0_uv
>1959	Identifier	pt1w0_uv_pt2w0_uv
>1960	Callee	_mm_unpacklo_ps
>1961	Identifier	_mm_unpacklo_ps
>1962	Identifier	w0_uuvv
>1963	Identifier	w0_uuvv
>1964	IdentifierDeclType	__m128
>1965	ExpressionStatement	 
>1966	CallExpression	_mm_prefetch ( x0y1_ptr , _MM_HINT_NTA )
>1967	ArgumentList	x0y1_ptr
>1968	Argument	_MM_HINT_NTA
>1969	Identifier	_MM_HINT_NTA
>1970	Argument	x0y1_ptr
>1971	Identifier	x0y1_ptr
>1972	Callee	_mm_prefetch
>1973	Identifier	_mm_prefetch
>1974	IdentifierDeclStatement	 
>1975	IdentifierDecl	* x0y1_ptr = current . acceleration . ptr < float > ( address [ 1 ] + 1 , address [ 0 ] )
>1976	AssignmentExpr	* x0y1_ptr = current . acceleration . ptr < float > ( address [ 1 ] + 1 , address [ 0 ] )
>1977	RelationalExpression	current . acceleration . ptr < float > ( address [ 1 ] + 1 , address [ 0 ] )
>1978	RelationalExpression	float > ( address [ 1 ] + 1 , address [ 0 ] )
>1979	Expression	address [ 1 ] + 1 , address [ 0 ]
>1980	ArrayIndexing	address [ 0 ]
>1981	PrimaryExpression	0
>1982	Identifier	address
>1983	AdditiveExpression	address [ 1 ] + 1
>1984	PrimaryExpression	1
>1985	ArrayIndexing	address [ 1 ]
>1986	PrimaryExpression	1
>1987	Identifier	address
>1988	Identifier	float
>1989	MemberAccess	current . acceleration . ptr
>1990	Identifier	ptr
>1991	MemberAccess	current . acceleration
>1992	Identifier	acceleration
>1993	Identifier	current
>1994	Identifier	x0y1_ptr
>1995	Identifier	x0y1_ptr
>1996	IdentifierDeclType	const float *
>1997	IdentifierDeclStatement	 
>1998	IdentifierDecl	* x0y0_ptr = current . acceleration . ptr < float > ( address [ 1 ] , address [ 0 ] )
>1999	AssignmentExpr	* x0y0_ptr = current . acceleration . ptr < float > ( address [ 1 ] , address [ 0 ] )
>2000	RelationalExpression	current . acceleration . ptr < float > ( address [ 1 ] , address [ 0 ] )
>2001	RelationalExpression	float > ( address [ 1 ] , address [ 0 ] )
>2002	Expression	address [ 1 ] , address [ 0 ]
>2003	ArrayIndexing	address [ 0 ]
>2004	PrimaryExpression	0
>2005	Identifier	address
>2006	ArrayIndexing	address [ 1 ]
>2007	PrimaryExpression	1
>2008	Identifier	address
>2009	Identifier	float
>2010	MemberAccess	current . acceleration . ptr
>2011	Identifier	ptr
>2012	MemberAccess	current . acceleration
>2013	Identifier	acceleration
>2014	Identifier	current
>2015	Identifier	x0y0_ptr
>2016	Identifier	x0y0_ptr
>2017	IdentifierDeclType	const float *
>2018	Condition	 
>2019	EqualityExpression	( bounds_mask & 3 ) == 3
>2020	PrimaryExpression	3
>2021	BitAndExpression	bounds_mask & 3
>2022	PrimaryExpression	3
>2023	Identifier	bounds_mask
>2024	IfStatement	if ( Debug )
>2025	ExpressionStatement	 
>2026	AssignmentExpr	* result . last_valid_flag = uint8_t ( ( bounds_mask & 3 ) == 3 )
>2027	CallExpression	uint8_t ( ( bounds_mask & 3 ) == 3 )
>2028	ArgumentList	( bounds_mask & 3 ) == 3
>2029	Argument	( bounds_mask & 3 ) == 3
>2030	EqualityExpression	( bounds_mask & 3 ) == 3
>2031	PrimaryExpression	3
>2032	BitAndExpression	bounds_mask & 3
>2033	PrimaryExpression	3
>2034	Identifier	bounds_mask
>2035	Callee	uint8_t
>2036	Identifier	uint8_t
>2037	UnaryOp	* result . last_valid_flag
>2038	MemberAccess	result . last_valid_flag
>2039	Identifier	last_valid_flag
>2040	Identifier	result
>2041	UnaryOperator	*
>2042	Condition	 
>2043	Identifier	Debug
>2044	ExpressionStatement	 
>2045	CallExpression	_mm_store_si128 ( ( __m128i * ) address , pt1_uv_pt2_uv_int )
>2046	ArgumentList	( __m128i * ) address
>2047	Argument	pt1_uv_pt2_uv_int
>2048	Identifier	pt1_uv_pt2_uv_int
>2049	Argument	( __m128i * ) address
>2050	CastExpression	( __m128i * ) address
>2051	Identifier	address
>2052	CastTarget	__m128i *
>2053	Callee	_mm_store_si128
>2054	Identifier	_mm_store_si128
>2055	IdentifierDeclStatement	 
>2056	IdentifierDecl	bounds_mask = _mm_movemask_ps ( _mm_and_ps ( _mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound ) , _mm_cmple_ps ( pt1_uv_\
>2057	AssignmentExpr	bounds_mask = _mm_movemask_ps ( _mm_and_ps ( _mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound ) , _mm_cmple_\
>2058	CallExpression	_mm_movemask_ps ( _mm_and_ps ( _mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound ) , _mm_cmple_ps ( pt1_uv_pt2_uv , upper_\
>2059	ArgumentList	_mm_and_ps ( _mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound ) , _mm_cmple_ps ( pt1_uv_pt2_uv , upper_bound ) )
>2060	Argument	_mm_and_ps ( _mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound ) , _mm_cmple_ps ( pt1_uv_pt2_uv , upper_bound ) )
>2061	CallExpression	_mm_and_ps ( _mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound ) , _mm_cmple_ps ( pt1_uv_pt2_uv , upper_bound ) )
>2062	ArgumentList	_mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound )
>2063	Argument	_mm_cmple_ps ( pt1_uv_pt2_uv , upper_bound )
>2064	CallExpression	_mm_cmple_ps ( pt1_uv_pt2_uv , upper_bound )
>2065	ArgumentList	pt1_uv_pt2_uv
>2066	Argument	upper_bound
>2067	Identifier	upper_bound
>2068	Argument	pt1_uv_pt2_uv
>2069	Identifier	pt1_uv_pt2_uv
>2070	Callee	_mm_cmple_ps
>2071	Identifier	_mm_cmple_ps
>2072	Argument	_mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound )
>2073	CallExpression	_mm_cmpge_ps ( pt1_uv_pt2_uv , lower_bound )
>2074	ArgumentList	pt1_uv_pt2_uv
>2075	Argument	lower_bound
>2076	Identifier	lower_bound
>2077	Argument	pt1_uv_pt2_uv
>2078	Identifier	pt1_uv_pt2_uv
>2079	Callee	_mm_cmpge_ps
>2080	Identifier	_mm_cmpge_ps
>2081	Callee	_mm_and_ps
>2082	Identifier	_mm_and_ps
>2083	Callee	_mm_movemask_ps
>2084	Identifier	_mm_movemask_ps
>2085	Identifier	bounds_mask
>2086	Identifier	bounds_mask
>2087	IdentifierDeclType	int
>2088	IdentifierDeclStatement	 
>2089	IdentifierDecl	pt1w0_uv_pt2w0_uv = _mm_sub_ps ( ONES , pt1w1_uv_pt2w1_uv )
>2090	AssignmentExpr	pt1w0_uv_pt2w0_uv = _mm_sub_ps ( ONES , pt1w1_uv_pt2w1_uv )
>2091	CallExpression	_mm_sub_ps ( ONES , pt1w1_uv_pt2w1_uv )
>2092	ArgumentList	ONES
>2093	Argument	pt1w1_uv_pt2w1_uv
>2094	Identifier	pt1w1_uv_pt2w1_uv
>2095	Argument	ONES
>2096	Identifier	ONES
>2097	Callee	_mm_sub_ps
>2098	Identifier	_mm_sub_ps
>2099	Identifier	pt1w0_uv_pt2w0_uv
>2100	Identifier	pt1w0_uv_pt2w0_uv
>2101	IdentifierDeclType	__m128
>2102	IdentifierDeclStatement	 
>2103	IdentifierDecl	pt1w1_uv_pt2w1_uv = _mm_sub_ps ( pt1_uv_pt2_uv , pt1_u0v0_pt2_u0v0 )
>2104	AssignmentExpr	pt1w1_uv_pt2w1_uv = _mm_sub_ps ( pt1_uv_pt2_uv , pt1_u0v0_pt2_u0v0 )
>2105	CallExpression	_mm_sub_ps ( pt1_uv_pt2_uv , pt1_u0v0_pt2_u0v0 )
>2106	ArgumentList	pt1_uv_pt2_uv
>2107	Argument	pt1_u0v0_pt2_u0v0
>2108	Identifier	pt1_u0v0_pt2_u0v0
>2109	Argument	pt1_uv_pt2_uv
>2110	Identifier	pt1_uv_pt2_uv
>2111	Callee	_mm_sub_ps
>2112	Identifier	_mm_sub_ps
>2113	Identifier	pt1w1_uv_pt2w1_uv
>2114	Identifier	pt1w1_uv_pt2w1_uv
>2115	IdentifierDeclType	__m128
>2116	IdentifierDeclStatement	 
>2117	IdentifierDecl	pt1_u0v0_pt2_u0v0 = _mm_cvtepi32_ps ( pt1_uv_pt2_uv_int )
>2118	AssignmentExpr	pt1_u0v0_pt2_u0v0 = _mm_cvtepi32_ps ( pt1_uv_pt2_uv_int )
>2119	CallExpression	_mm_cvtepi32_ps ( pt1_uv_pt2_uv_int )
>2120	ArgumentList	pt1_uv_pt2_uv_int
>2121	Argument	pt1_uv_pt2_uv_int
>2122	Identifier	pt1_uv_pt2_uv_int
>2123	Callee	_mm_cvtepi32_ps
>2124	Identifier	_mm_cvtepi32_ps
>2125	Identifier	pt1_u0v0_pt2_u0v0
>2126	Identifier	pt1_u0v0_pt2_u0v0
>2127	IdentifierDeclType	__m128
>2128	IdentifierDeclStatement	 
>2129	IdentifierDecl	pt1_uv_pt2_uv_int = _mm_cvtps_epi32 ( pt1_uv_pt2_uv )
>2130	AssignmentExpr	pt1_uv_pt2_uv_int = _mm_cvtps_epi32 ( pt1_uv_pt2_uv )
>2131	CallExpression	_mm_cvtps_epi32 ( pt1_uv_pt2_uv )
>2132	ArgumentList	pt1_uv_pt2_uv
>2133	Argument	pt1_uv_pt2_uv
>2134	Identifier	pt1_uv_pt2_uv
>2135	Callee	_mm_cvtps_epi32
>2136	Identifier	_mm_cvtps_epi32
>2137	Identifier	pt1_uv_pt2_uv_int
>2138	Identifier	pt1_uv_pt2_uv_int
>2139	IdentifierDeclType	__m128i
>2140	IdentifierDeclStatement	 
>2141	IdentifierDecl	pt1_uv_pt2_uv = _mm_mul_ps ( pt1_xy_pt2_xy , _mm_rcp_ps ( pt1_zz_pt2_zz ) )
>2142	AssignmentExpr	pt1_uv_pt2_uv = _mm_mul_ps ( pt1_xy_pt2_xy , _mm_rcp_ps ( pt1_zz_pt2_zz ) )
>2143	CallExpression	_mm_mul_ps ( pt1_xy_pt2_xy , _mm_rcp_ps ( pt1_zz_pt2_zz ) )
>2144	ArgumentList	pt1_xy_pt2_xy
>2145	Argument	_mm_rcp_ps ( pt1_zz_pt2_zz )
>2146	CallExpression	_mm_rcp_ps ( pt1_zz_pt2_zz )
>2147	ArgumentList	pt1_zz_pt2_zz
>2148	Argument	pt1_zz_pt2_zz
>2149	Identifier	pt1_zz_pt2_zz
>2150	Callee	_mm_rcp_ps
>2151	Identifier	_mm_rcp_ps
>2152	Argument	pt1_xy_pt2_xy
>2153	Identifier	pt1_xy_pt2_xy
>2154	Callee	_mm_mul_ps
>2155	Identifier	_mm_mul_ps
>2156	Identifier	pt1_uv_pt2_uv
>2157	Identifier	pt1_uv_pt2_uv
>2158	IdentifierDeclType	__m128
>2159	IdentifierDeclStatement	 
>2160	IdentifierDecl	pt1_zz_pt2_zz = _mm_hadd_ps ( _mm_hadd_ps ( pt1_z , pt1_z ) , _mm_hadd_ps ( pt2_z , pt2_z ) )
>2161	AssignmentExpr	pt1_zz_pt2_zz = _mm_hadd_ps ( _mm_hadd_ps ( pt1_z , pt1_z ) , _mm_hadd_ps ( pt2_z , pt2_z ) )
>2162	CallExpression	_mm_hadd_ps ( _mm_hadd_ps ( pt1_z , pt1_z ) , _mm_hadd_ps ( pt2_z , pt2_z ) )
>2163	ArgumentList	_mm_hadd_ps ( pt1_z , pt1_z )
>2164	Argument	_mm_hadd_ps ( pt2_z , pt2_z )
>2165	CallExpression	_mm_hadd_ps ( pt2_z , pt2_z )
>2166	ArgumentList	pt2_z
>2167	Argument	pt2_z
>2168	Identifier	pt2_z
>2169	Argument	pt2_z
>2170	Identifier	pt2_z
>2171	Callee	_mm_hadd_ps
>2172	Identifier	_mm_hadd_ps
>2173	Argument	_mm_hadd_ps ( pt1_z , pt1_z )
>2174	CallExpression	_mm_hadd_ps ( pt1_z , pt1_z )
>2175	ArgumentList	pt1_z
>2176	Argument	pt1_z
>2177	Identifier	pt1_z
>2178	Argument	pt1_z
>2179	Identifier	pt1_z
>2180	Callee	_mm_hadd_ps
>2181	Identifier	_mm_hadd_ps
>2182	Callee	_mm_hadd_ps
>2183	Identifier	_mm_hadd_ps
>2184	Identifier	pt1_zz_pt2_zz
>2185	Identifier	pt1_zz_pt2_zz
>2186	IdentifierDeclType	__m128
>2187	IdentifierDeclStatement	 
>2188	IdentifierDecl	pt1_xy_pt2_xy = _mm_hadd_ps ( _mm_hadd_ps ( pt1_x , pt1_y ) , _mm_hadd_ps ( pt2_x , pt2_y ) )
>2189	AssignmentExpr	pt1_xy_pt2_xy = _mm_hadd_ps ( _mm_hadd_ps ( pt1_x , pt1_y ) , _mm_hadd_ps ( pt2_x , pt2_y ) )
>2190	CallExpression	_mm_hadd_ps ( _mm_hadd_ps ( pt1_x , pt1_y ) , _mm_hadd_ps ( pt2_x , pt2_y ) )
>2191	ArgumentList	_mm_hadd_ps ( pt1_x , pt1_y )
>2192	Argument	_mm_hadd_ps ( pt2_x , pt2_y )
>2193	CallExpression	_mm_hadd_ps ( pt2_x , pt2_y )
>2194	ArgumentList	pt2_x
>2195	Argument	pt2_y
>2196	Identifier	pt2_y
>2197	Argument	pt2_x
>2198	Identifier	pt2_x
>2199	Callee	_mm_hadd_ps
>2200	Identifier	_mm_hadd_ps
>2201	Argument	_mm_hadd_ps ( pt1_x , pt1_y )
>2202	CallExpression	_mm_hadd_ps ( pt1_x , pt1_y )
>2203	ArgumentList	pt1_x
>2204	Argument	pt1_y
>2205	Identifier	pt1_y
>2206	Argument	pt1_x
>2207	Identifier	pt1_x
>2208	Callee	_mm_hadd_ps
>2209	Identifier	_mm_hadd_ps
>2210	Callee	_mm_hadd_ps
>2211	Identifier	_mm_hadd_ps
>2212	Identifier	pt1_xy_pt2_xy
>2213	Identifier	pt1_xy_pt2_xy
>2214	IdentifierDeclType	__m128
>2215	IdentifierDeclStatement	 
>2216	IdentifierDecl	pt2_z = _mm_mul_ps ( kt_r3 , p2 )
>2217	AssignmentExpr	pt2_z = _mm_mul_ps ( kt_r3 , p2 )
>2218	CallExpression	_mm_mul_ps ( kt_r3 , p2 )
>2219	ArgumentList	kt_r3
>2220	Argument	p2
>2221	Identifier	p2
>2222	Argument	kt_r3
>2223	Identifier	kt_r3
>2224	Callee	_mm_mul_ps
>2225	Identifier	_mm_mul_ps
>2226	Identifier	pt2_z
>2227	Identifier	pt2_z
>2228	IdentifierDeclType	__m128
>2229	IdentifierDeclStatement	 
>2230	IdentifierDecl	pt1_z = _mm_mul_ps ( kt_r3 , p1 )
>2231	AssignmentExpr	pt1_z = _mm_mul_ps ( kt_r3 , p1 )
>2232	CallExpression	_mm_mul_ps ( kt_r3 , p1 )
>2233	ArgumentList	kt_r3
>2234	Argument	p1
>2235	Identifier	p1
>2236	Argument	kt_r3
>2237	Identifier	kt_r3
>2238	Callee	_mm_mul_ps
>2239	Identifier	_mm_mul_ps
>2240	Identifier	pt1_z
>2241	Identifier	pt1_z
>2242	IdentifierDeclType	__m128
>2243	IdentifierDeclStatement	 
>2244	IdentifierDecl	pt2_y = _mm_mul_ps ( kt_r2 , p2 )
>2245	AssignmentExpr	pt2_y = _mm_mul_ps ( kt_r2 , p2 )
>2246	CallExpression	_mm_mul_ps ( kt_r2 , p2 )
>2247	ArgumentList	kt_r2
>2248	Argument	p2
>2249	Identifier	p2
>2250	Argument	kt_r2
>2251	Identifier	kt_r2
>2252	Callee	_mm_mul_ps
>2253	Identifier	_mm_mul_ps
>2254	Identifier	pt2_y
>2255	Identifier	pt2_y
>2256	IdentifierDeclType	__m128
>2257	IdentifierDeclStatement	 
>2258	IdentifierDecl	pt1_y = _mm_mul_ps ( kt_r2 , p1 )
>2259	AssignmentExpr	pt1_y = _mm_mul_ps ( kt_r2 , p1 )
>2260	CallExpression	_mm_mul_ps ( kt_r2 , p1 )
>2261	ArgumentList	kt_r2
>2262	Argument	p1
>2263	Identifier	p1
>2264	Argument	kt_r2
>2265	Identifier	kt_r2
>2266	Callee	_mm_mul_ps
>2267	Identifier	_mm_mul_ps
>2268	Identifier	pt1_y
>2269	Identifier	pt1_y
>2270	IdentifierDeclType	__m128
>2271	IdentifierDeclStatement	 
>2272	IdentifierDecl	pt2_x = _mm_mul_ps ( kt_r1 , p2 )
>2273	AssignmentExpr	pt2_x = _mm_mul_ps ( kt_r1 , p2 )
>2274	CallExpression	_mm_mul_ps ( kt_r1 , p2 )
>2275	ArgumentList	kt_r1
>2276	Argument	p2
>2277	Identifier	p2
>2278	Argument	kt_r1
>2279	Identifier	kt_r1
>2280	Callee	_mm_mul_ps
>2281	Identifier	_mm_mul_ps
>2282	Identifier	pt2_x
>2283	Identifier	pt2_x
>2284	IdentifierDeclType	__m128
>2285	IdentifierDeclStatement	 
>2286	IdentifierDecl	pt1_x = _mm_mul_ps ( kt_r1 , p1 )
>2287	AssignmentExpr	pt1_x = _mm_mul_ps ( kt_r1 , p1 )
>2288	CallExpression	_mm_mul_ps ( kt_r1 , p1 )
>2289	ArgumentList	kt_r1
>2290	Argument	p1
>2291	Identifier	p1
>2292	Argument	kt_r1
>2293	Identifier	kt_r1
>2294	Callee	_mm_mul_ps
>2295	Identifier	_mm_mul_ps
>2296	Identifier	pt1_x
>2297	Identifier	pt1_x
>2298	IdentifierDeclType	__m128
>2299	IdentifierDeclStatement	 
>2300	IdentifierDecl	p2 = _mm_load_ps ( ( p_it + 1 ) -> point . data )
>2301	AssignmentExpr	p2 = _mm_load_ps ( ( p_it + 1 ) -> point . data )
>2302	CallExpression	_mm_load_ps ( ( p_it + 1 ) -> point . data )
>2303	ArgumentList	( p_it + 1 ) -> point . data
>2304	Argument	( p_it + 1 ) -> point . data
>2305	MemberAccess	( p_it + 1 ) -> point . data
>2306	Identifier	data
>2307	PtrMemberAccess	( p_it + 1 ) -> point
>2308	Identifier	point
>2309	AdditiveExpression	p_it + 1
>2310	PrimaryExpression	1
>2311	Identifier	p_it
>2312	Callee	_mm_load_ps
>2313	Identifier	_mm_load_ps
>2314	Identifier	p2
>2315	Identifier	p2
>2316	IdentifierDeclType	__m128
>2317	IdentifierDeclStatement	 
>2318	IdentifierDecl	p1 = _mm_load_ps ( ( p_it + 0 ) -> point . data )
>2319	AssignmentExpr	p1 = _mm_load_ps ( ( p_it + 0 ) -> point . data )
>2320	CallExpression	_mm_load_ps ( ( p_it + 0 ) -> point . data )
>2321	ArgumentList	( p_it + 0 ) -> point . data
>2322	Argument	( p_it + 0 ) -> point . data
>2323	MemberAccess	( p_it + 0 ) -> point . data
>2324	Identifier	data
>2325	PtrMemberAccess	( p_it + 0 ) -> point
>2326	Identifier	point
>2327	AdditiveExpression	p_it + 0
>2328	PrimaryExpression	0
>2329	Identifier	p_it
>2330	Callee	_mm_load_ps
>2331	Identifier	_mm_load_ps
>2332	Identifier	p1
>2333	Identifier	p1
>2334	IdentifierDeclType	__m128
>2335	AssignmentExpr	 
>2336	PrimaryExpression	2
>2337	Identifier	p_it
>2338	Condition	 
>2339	EqualityExpression	p_it != lp
>2340	Identifier	lp
>2341	Identifier	p_it
>2342	ForInit	 
>2343	IdentifierDeclStatement	PointIterator p_it = first_point ;
>2344	IdentifierDecl	p_it = first_point
>2345	AssignmentExpr	p_it = first_point
>2346	Identifier	first_point
>2347	Identifier	first_point
>2348	Identifier	p_it
>2349	IdentifierDeclType	PointIterator
>2350	IdentifierDeclStatement	 
>2351	IdentifierDecl	lp = ( ( last_point - first_point ) % 2 ) != 0 ? last_point - 1 
>2352	AssignmentExpr	lp = ( ( last_point - first_point ) % 2 ) != 0 ? last_point - 1 
>2353	ConditionalExpression	( ( last_point - first_point ) % 2 ) != 0 ? last_point - 1 
>2354	Identifier	last_point
>2355	AdditiveExpression	last_point - 1
>2356	PrimaryExpression	1
>2357	Identifier	last_point
>2358	Condition	( ( last_point - first_point ) % 2 ) != 0
>2359	EqualityExpression	( ( last_point - first_point ) % 2 ) != 0
>2360	PrimaryExpression	0
>2361	MultiplicativeExpression	( last_point - first_point ) % 2
>2362	PrimaryExpression	2
>2363	AdditiveExpression	last_point - first_point
>2364	Identifier	first_point
>2365	Identifier	last_point
>2366	Identifier	lp
>2367	Identifier	lp
>2368	IdentifierDeclType	const PointIterator
>2369	IfStatement	if ( rnd_mode != _MM_ROUND_TOWARD_ZERO )
>2370	ExpressionStatement	 
>2371	CallExpression	_MM_SET_ROUNDING_MODE ( _MM_ROUND_TOWARD_ZERO )
>2372	ArgumentList	_MM_ROUND_TOWARD_ZERO
>2373	Argument	_MM_ROUND_TOWARD_ZERO
>2374	Identifier	_MM_ROUND_TOWARD_ZERO
>2375	Callee	_MM_SET_ROUNDING_MODE
>2376	Identifier	_MM_SET_ROUNDING_MODE
>2377	Condition	 
>2378	EqualityExpression	rnd_mode != _MM_ROUND_TOWARD_ZERO
>2379	Identifier	_MM_ROUND_TOWARD_ZERO
>2380	Identifier	rnd_mode
>2381	IdentifierDeclStatement	 
>2382	IdentifierDecl	rnd_mode = _MM_GET_ROUNDING_MODE ( )
>2383	AssignmentExpr	rnd_mode = _MM_GET_ROUNDING_MODE ( )
>2384	CallExpression	_MM_GET_ROUNDING_MODE ( )
>2385	ArgumentList	 
>2386	Callee	_MM_GET_ROUNDING_MODE
>2387	Identifier	_MM_GET_ROUNDING_MODE
>2388	Identifier	rnd_mode
>2389	Identifier	rnd_mode
>2390	IdentifierDeclType	unsigned int
>2391	IdentifierDeclStatement	 
>2392	IdentifierDecl	address [ 4 ]
>2393	PrimaryExpression	4
>2394	Identifier	address
>2395	IdentifierDeclType	EIGEN_ALIGN16 int [ 4 ]
>2396	IdentifierDeclStatement	 
>2397	IdentifierDecl	upper_bound = _mm_setr_ps ( current . width - 2 , current . height - 2 , current . width - 2 , current . height \
>2398	AssignmentExpr	upper_bound = _mm_setr_ps ( current . width - 2 , current . height - 2 , current . width - 2 , current \
>2399	CallExpression	_mm_setr_ps ( current . width - 2 , current . height - 2 , current . width - 2 , current . height - 2 )
>2400	ArgumentList	current . width - 2
>2401	Argument	current . height - 2
>2402	AdditiveExpression	current . height - 2
>2403	PrimaryExpression	2
>2404	MemberAccess	current . height
>2405	Identifier	height
>2406	Identifier	current
>2407	Argument	current . width - 2
>2408	AdditiveExpression	current . width - 2
>2409	PrimaryExpression	2
>2410	MemberAccess	current . width
>2411	Identifier	width
>2412	Identifier	current
>2413	Argument	current . height - 2
>2414	AdditiveExpression	current . height - 2
>2415	PrimaryExpression	2
>2416	MemberAccess	current . height
>2417	Identifier	height
>2418	Identifier	current
>2419	Argument	current . width - 2
>2420	AdditiveExpression	current . width - 2
>2421	PrimaryExpression	2
>2422	MemberAccess	current . width
>2423	Identifier	width
>2424	Identifier	current
>2425	Callee	_mm_setr_ps
>2426	Identifier	_mm_setr_ps
>2427	Identifier	upper_bound
>2428	Identifier	upper_bound
>2429	IdentifierDeclType	__m128
>2430	IdentifierDeclStatement	 
>2431	IdentifierDecl	lower_bound = _mm_set1_ps ( 0.0f )
>2432	AssignmentExpr	lower_bound = _mm_set1_ps ( 0.0f )
>2433	CallExpression	_mm_set1_ps ( 0.0f )
>2434	ArgumentList	0.0f
>2435	Argument	0.0f
>2436	PrimaryExpression	0.0f
>2437	Callee	_mm_set1_ps
>2438	Identifier	_mm_set1_ps
>2439	Identifier	lower_bound
>2440	Identifier	lower_bound
>2441	IdentifierDeclType	__m128
>2442	IdentifierDeclStatement	 
>2443	IdentifierDecl	reference_weight_b = _mm_load_ps ( reference_weight . data ( ) + 4 )
>2444	AssignmentExpr	reference_weight_b = _mm_load_ps ( reference_weight . data ( ) + 4 )
>2445	CallExpression	_mm_load_ps ( reference_weight . data ( ) + 4 )
>2446	ArgumentList	reference_weight . data ( ) + 4
>2447	Argument	reference_weight . data ( ) + 4
>2448	AdditiveExpression	reference_weight . data ( ) + 4
>2449	PrimaryExpression	4
>2450	CallExpression	reference_weight . data ( )
>2451	ArgumentList	 
>2452	Callee	reference_weight . data
>2453	MemberAccess	reference_weight . data
>2454	Identifier	data
>2455	Identifier	reference_weight
>2456	Callee	_mm_load_ps
>2457	Identifier	_mm_load_ps
>2458	Identifier	reference_weight_b
>2459	Identifier	reference_weight_b
>2460	IdentifierDeclType	__m128
>2461	IdentifierDeclStatement	 
>2462	IdentifierDecl	reference_weight_a = _mm_load_ps ( reference_weight . data ( ) )
>2463	AssignmentExpr	reference_weight_a = _mm_load_ps ( reference_weight . data ( ) )
>2464	CallExpression	_mm_load_ps ( reference_weight . data ( ) )
>2465	ArgumentList	reference_weight . data ( )
>2466	Argument	reference_weight . data ( )
>2467	CallExpression	reference_weight . data ( )
>2468	ArgumentList	 
>2469	Callee	reference_weight . data
>2470	MemberAccess	reference_weight . data
>2471	Identifier	data
>2472	Identifier	reference_weight
>2473	Callee	_mm_load_ps
>2474	Identifier	_mm_load_ps
>2475	Identifier	reference_weight_a
>2476	Identifier	reference_weight_a
>2477	IdentifierDeclType	__m128
>2478	IdentifierDeclStatement	 
>2479	IdentifierDecl	current_weight_b = _mm_load_ps ( current_weight . data ( ) + 4 )
>2480	AssignmentExpr	current_weight_b = _mm_load_ps ( current_weight . data ( ) + 4 )
>2481	CallExpression	_mm_load_ps ( current_weight . data ( ) + 4 )
>2482	ArgumentList	current_weight . data ( ) + 4
>2483	Argument	current_weight . data ( ) + 4
>2484	AdditiveExpression	current_weight . data ( ) + 4
>2485	PrimaryExpression	4
>2486	CallExpression	current_weight . data ( )
>2487	ArgumentList	 
>2488	Callee	current_weight . data
>2489	MemberAccess	current_weight . data
>2490	Identifier	data
>2491	Identifier	current_weight
>2492	Callee	_mm_load_ps
>2493	Identifier	_mm_load_ps
>2494	Identifier	current_weight_b
>2495	Identifier	current_weight_b
>2496	IdentifierDeclType	__m128
>2497	IdentifierDeclStatement	 
>2498	IdentifierDecl	current_weight_a = _mm_load_ps ( current_weight . data ( ) )
>2499	AssignmentExpr	current_weight_a = _mm_load_ps ( current_weight . data ( ) )
>2500	CallExpression	_mm_load_ps ( current_weight . data ( ) )
>2501	ArgumentList	current_weight . data ( )
>2502	Argument	current_weight . data ( )
>2503	CallExpression	current_weight . data ( )
>2504	ArgumentList	 
>2505	Callee	current_weight . data
>2506	MemberAccess	current_weight . data
>2507	Identifier	data
>2508	Identifier	current_weight
>2509	Callee	_mm_load_ps
>2510	Identifier	_mm_load_ps
>2511	Identifier	current_weight_a
>2512	Identifier	current_weight_a
>2513	IdentifierDeclType	__m128
>2514	IdentifierDeclStatement	 
>2515	IdentifierDecl	kt_r3 = _mm_setr_ps ( KT ( 2 , 0 ) , KT ( 2 , 1 ) , KT ( 2 , 2 ) , KT ( 2 , 3 ) )
>2516	AssignmentExpr	kt_r3 = _mm_setr_ps ( KT ( 2 , 0 ) , KT ( 2 , 1 ) , KT ( 2 , 2 ) , KT ( 2 , 3 ) )
>2517	CallExpression	_mm_setr_ps ( KT ( 2 , 0 ) , KT ( 2 , 1 ) , KT ( 2 , 2 ) , KT ( 2 , 3 ) )
>2518	ArgumentList	KT ( 2 , 0 )
>2519	Argument	KT ( 2 , 3 )
>2520	CallExpression	KT ( 2 , 3 )
>2521	ArgumentList	2
>2522	Argument	3
>2523	PrimaryExpression	3
>2524	Argument	2
>2525	PrimaryExpression	2
>2526	Callee	KT
>2527	Identifier	KT
>2528	Argument	KT ( 2 , 2 )
>2529	CallExpression	KT ( 2 , 2 )
>2530	ArgumentList	2
>2531	Argument	2
>2532	PrimaryExpression	2
>2533	Argument	2
>2534	PrimaryExpression	2
>2535	Callee	KT
>2536	Identifier	KT
>2537	Argument	KT ( 2 , 1 )
>2538	CallExpression	KT ( 2 , 1 )
>2539	ArgumentList	2
>2540	Argument	1
>2541	PrimaryExpression	1
>2542	Argument	2
>2543	PrimaryExpression	2
>2544	Callee	KT
>2545	Identifier	KT
>2546	Argument	KT ( 2 , 0 )
>2547	CallExpression	KT ( 2 , 0 )
>2548	ArgumentList	2
>2549	Argument	0
>2550	PrimaryExpression	0
>2551	Argument	2
>2552	PrimaryExpression	2
>2553	Callee	KT
>2554	Identifier	KT
>2555	Callee	_mm_setr_ps
>2556	Identifier	_mm_setr_ps
>2557	Identifier	kt_r3
>2558	Identifier	kt_r3
>2559	IdentifierDeclType	__m128
>2560	IdentifierDeclStatement	 
>2561	IdentifierDecl	kt_r2 = _mm_setr_ps ( KT ( 1 , 0 ) , KT ( 1 , 1 ) , KT ( 1 , 2 ) , KT ( 1 , 3 ) )
>2562	AssignmentExpr	kt_r2 = _mm_setr_ps ( KT ( 1 , 0 ) , KT ( 1 , 1 ) , KT ( 1 , 2 ) , KT ( 1 , 3 ) )
>2563	CallExpression	_mm_setr_ps ( KT ( 1 , 0 ) , KT ( 1 , 1 ) , KT ( 1 , 2 ) , KT ( 1 , 3 ) )
>2564	ArgumentList	KT ( 1 , 0 )
>2565	Argument	KT ( 1 , 3 )
>2566	CallExpression	KT ( 1 , 3 )
>2567	ArgumentList	1
>2568	Argument	3
>2569	PrimaryExpression	3
>2570	Argument	1
>2571	PrimaryExpression	1
>2572	Callee	KT
>2573	Identifier	KT
>2574	Argument	KT ( 1 , 2 )
>2575	CallExpression	KT ( 1 , 2 )
>2576	ArgumentList	1
>2577	Argument	2
>2578	PrimaryExpression	2
>2579	Argument	1
>2580	PrimaryExpression	1
>2581	Callee	KT
>2582	Identifier	KT
>2583	Argument	KT ( 1 , 1 )
>2584	CallExpression	KT ( 1 , 1 )
>2585	ArgumentList	1
>2586	Argument	1
>2587	PrimaryExpression	1
>2588	Argument	1
>2589	PrimaryExpression	1
>2590	Callee	KT
>2591	Identifier	KT
>2592	Argument	KT ( 1 , 0 )
>2593	CallExpression	KT ( 1 , 0 )
>2594	ArgumentList	1
>2595	Argument	0
>2596	PrimaryExpression	0
>2597	Argument	1
>2598	PrimaryExpression	1
>2599	Callee	KT
>2600	Identifier	KT
>2601	Callee	_mm_setr_ps
>2602	Identifier	_mm_setr_ps
>2603	Identifier	kt_r2
>2604	Identifier	kt_r2
>2605	IdentifierDeclType	__m128
>2606	IdentifierDeclStatement	 
>2607	IdentifierDecl	kt_r1 = _mm_setr_ps ( KT ( 0 , 0 ) , KT ( 0 , 1 ) , KT ( 0 , 2 ) , KT ( 0 , 3 ) )
>2608	AssignmentExpr	kt_r1 = _mm_setr_ps ( KT ( 0 , 0 ) , KT ( 0 , 1 ) , KT ( 0 , 2 ) , KT ( 0 , 3 ) )
>2609	CallExpression	_mm_setr_ps ( KT ( 0 , 0 ) , KT ( 0 , 1 ) , KT ( 0 , 2 ) , KT ( 0 , 3 ) )
>2610	ArgumentList	KT ( 0 , 0 )
>2611	Argument	KT ( 0 , 3 )
>2612	CallExpression	KT ( 0 , 3 )
>2613	ArgumentList	0
>2614	Argument	3
>2615	PrimaryExpression	3
>2616	Argument	0
>2617	PrimaryExpression	0
>2618	Callee	KT
>2619	Identifier	KT
>2620	Argument	KT ( 0 , 2 )
>2621	CallExpression	KT ( 0 , 2 )
>2622	ArgumentList	0
>2623	Argument	2
>2624	PrimaryExpression	2
>2625	Argument	0
>2626	PrimaryExpression	0
>2627	Callee	KT
>2628	Identifier	KT
>2629	Argument	KT ( 0 , 1 )
>2630	CallExpression	KT ( 0 , 1 )
>2631	ArgumentList	0
>2632	Argument	1
>2633	PrimaryExpression	1
>2634	Argument	0
>2635	PrimaryExpression	0
>2636	Callee	KT
>2637	Identifier	KT
>2638	Argument	KT ( 0 , 0 )
>2639	CallExpression	KT ( 0 , 0 )
>2640	ArgumentList	0
>2641	Argument	0
>2642	PrimaryExpression	0
>2643	Argument	0
>2644	PrimaryExpression	0
>2645	Callee	KT
>2646	Identifier	KT
>2647	Callee	_mm_setr_ps
>2648	Identifier	_mm_setr_ps
>2649	Identifier	kt_r1
>2650	Identifier	kt_r1
>2651	IdentifierDeclType	__m128
>2652	ExpressionStatement	 
>2653	Expression	Eigen 
>2654	Expression	3 , 4 > KT = K * transform . matrix ( ) . block < 3 , 4 > ( 0 , 0 )
>2655	Expression	4 > KT = K * transform . matrix ( ) . block < 3 , 4 > ( 0 , 0 )
>2656	RelationalExpression	4 > ( 0 , 0 )
>2657	Expression	0 , 0
>2658	PrimaryExpression	0
>2659	PrimaryExpression	0
>2660	PrimaryExpression	4
>2661	AssignmentExpr	4 > KT = K * transform . matrix ( ) . block < 3
>2662	RelationalExpression	K * transform . matrix ( ) . block < 3
>2663	PrimaryExpression	3
>2664	MultiplicativeExpression	K * transform . matrix ( ) . block
>2665	MemberAccess	transform . matrix ( ) . block
>2666	Identifier	block
>2667	CallExpression	transform . matrix ( )
>2668	ArgumentList	 
>2669	Callee	transform . matrix
>2670	MemberAccess	transform . matrix
>2671	Identifier	matrix
>2672	Identifier	transform
>2673	Identifier	K
>2674	RelationalExpression	4 > KT
>2675	Identifier	KT
>2676	PrimaryExpression	4
>2677	PrimaryExpression	3
>2678	RelationalExpression	Eigen 
>2679	Identifier	float
>2680	Identifier	Eigen 
>2681	ExpressionStatement	 
>2682	Expression	K << intrinsics . fx ( ) , 0 , intrinsics . ox ( ) , 0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>2683	Expression	0 , intrinsics . ox ( ) , 0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>2684	Expression	intrinsics . ox ( ) , 0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>2685	Expression	0 , intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>2686	Expression	intrinsics . fy ( ) , intrinsics . oy ( ) , 0 , 0 , 1
>2687	Expression	intrinsics . oy ( ) , 0 , 0 , 1
>2688	Expression	0 , 0 , 1
>2689	Expression	0 , 1
>2690	PrimaryExpression	1
>2691	PrimaryExpression	0
>2692	PrimaryExpression	0
>2693	CallExpression	intrinsics . oy ( )
>2694	ArgumentList	 
>2695	Callee	intrinsics . oy
>2696	MemberAccess	intrinsics . oy
>2697	Identifier	oy
>2698	Identifier	intrinsics
>2699	CallExpression	intrinsics . fy ( )
>2700	ArgumentList	 
>2701	Callee	intrinsics . fy
>2702	MemberAccess	intrinsics . fy
>2703	Identifier	fy
>2704	Identifier	intrinsics
>2705	PrimaryExpression	0
>2706	CallExpression	intrinsics . ox ( )
>2707	ArgumentList	 
>2708	Callee	intrinsics . ox
>2709	MemberAccess	intrinsics . ox
>2710	Identifier	ox
>2711	Identifier	intrinsics
>2712	PrimaryExpression	0
>2713	ShiftExpression	K << intrinsics . fx ( )
>2714	CallExpression	intrinsics . fx ( )
>2715	ArgumentList	 
>2716	Callee	intrinsics . fx
>2717	MemberAccess	intrinsics . fx
>2718	Identifier	fx
>2719	Identifier	intrinsics
>2720	Identifier	K
>2721	IdentifierDeclStatement	 
>2722	IdentifierDecl	K
>2723	Identifier	K
>2724	IdentifierDeclType	Eigen 
>2725	IfStatement	if ( Debug )
>2726	ExpressionStatement	 
>2727	AssignmentExpr	result . last_valid_flag = result . first_valid_flag
>2728	MemberAccess	result . first_valid_flag
>2729	Identifier	first_valid_flag
>2730	Identifier	result
>2731	MemberAccess	result . last_valid_flag
>2732	Identifier	last_valid_flag
>2733	Identifier	result
>2734	Condition	 
>2735	Identifier	Debug
>2736	ExpressionStatement	 
>2737	AssignmentExpr	result . last_residual = result . first_residual
>2738	MemberAccess	result . first_residual
>2739	Identifier	first_residual
>2740	Identifier	result
>2741	MemberAccess	result . last_residual
>2742	Identifier	last_residual
>2743	Identifier	result
>2744	ExpressionStatement	 
>2745	AssignmentExpr	result . last_point_error = result . first_point_error
>2746	MemberAccess	result . first_point_error
>2747	Identifier	first_point_error
>2748	Identifier	result
>2749	MemberAccess	result . last_point_error
>2750	Identifier	last_point_error
>2751	Identifier	result
>2877	FunctionDef	computeResidualsSse (const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & current , \
>2878	ParameterList	const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & current , const IntrinsicMatrix & \
>2879	Parameter	 
>2880	Identifier	result
>2881	ParameterType	ComputeResidualsResult &
>2882	Parameter	 
>2883	Identifier	current_weight
>2884	ParameterType	const Vector8f &
>2885	Parameter	 
>2886	Identifier	reference_weight
>2887	ParameterType	const Vector8f &
>2888	Parameter	 
>2889	Identifier	transform
>2890	ParameterType	const Eigen 
>2891	Parameter	 
>2892	Identifier	intrinsics
>2893	ParameterType	const IntrinsicMatrix &
>2894	Parameter	 
>2895	Identifier	current
>2896	ParameterType	const RgbdImage &
>2897	Parameter	 
>2898	Identifier	last_point
>2899	ParameterType	const PointIterator &
>2900	Parameter	 
>2901	Identifier	first_point
>2902	ParameterType	const PointIterator &
>2903	ReturnType	void
>2904	CompoundStatement	 
>2905	ExpressionStatement	 
>2906	RelationalExpression	computeResidualsSse < false > ( first_point , last_point , current , intrinsics , transform , reference_\
>2907	RelationalExpression	false > ( first_point , last_point , current , intrinsics , transform , reference_weight , current_weight , \
>2908	Expression	first_point , last_point , current , intrinsics , transform , reference_weight , current_weight , result
>2909	Expression	last_point , current , intrinsics , transform , reference_weight , current_weight , result
>2910	Expression	current , intrinsics , transform , reference_weight , current_weight , result
>2911	Expression	intrinsics , transform , reference_weight , current_weight , result
>2912	Expression	transform , reference_weight , current_weight , result
>2913	Expression	reference_weight , current_weight , result
>2914	Expression	current_weight , result
>2915	Identifier	result
>2916	Identifier	current_weight
>2917	Identifier	reference_weight
>2918	Identifier	transform
>2919	Identifier	intrinsics
>2920	Identifier	current
>2921	Identifier	last_point
>2922	Identifier	first_point
>2923	Identifier	false
>2924	Identifier	computeResidualsSse
>2936	FunctionDef	computeResidualsAndValidFlagsSse (const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & \
>2937	ParameterList	const PointIterator & first_point , const PointIterator & last_point , const RgbdImage & current , const IntrinsicMatrix & \
>2938	Parameter	 
>2939	Identifier	result
>2940	ParameterType	ComputeResidualsResult &
>2941	Parameter	 
>2942	Identifier	current_weight
>2943	ParameterType	const Vector8f &
>2944	Parameter	 
>2945	Identifier	reference_weight
>2946	ParameterType	const Vector8f &
>2947	Parameter	 
>2948	Identifier	transform
>2949	ParameterType	const Eigen 
>2950	Parameter	 
>2951	Identifier	intrinsics
>2952	ParameterType	const IntrinsicMatrix &
>2953	Parameter	 
>2954	Identifier	current
>2955	ParameterType	const RgbdImage &
>2956	Parameter	 
>2957	Identifier	last_point
>2958	ParameterType	const PointIterator &
>2959	Parameter	 
>2960	Identifier	first_point
>2961	ParameterType	const PointIterator &
>2962	ReturnType	void
>2963	CompoundStatement	 
>2964	ExpressionStatement	 
>2965	RelationalExpression	computeResidualsSse < true > ( first_point , last_point , current , intrinsics , transform , reference_\
>2966	RelationalExpression	true > ( first_point , last_point , current , intrinsics , transform , reference_weight , current_weight , \
>2967	Expression	first_point , last_point , current , intrinsics , transform , reference_weight , current_weight , result
>2968	Expression	last_point , current , intrinsics , transform , reference_weight , current_weight , result
>2969	Expression	current , intrinsics , transform , reference_weight , current_weight , result
>2970	Expression	intrinsics , transform , reference_weight , current_weight , result
>2971	Expression	transform , reference_weight , current_weight , result
>2972	Expression	reference_weight , current_weight , result
>2973	Expression	current_weight , result
>2974	Identifier	result
>2975	Identifier	current_weight
>2976	Identifier	reference_weight
>2977	Identifier	transform
>2978	Identifier	intrinsics
>2979	Identifier	current
>2980	Identifier	last_point
>2981	Identifier	first_point
>2982	Identifier	true
>2983	Identifier	computeResidualsSse
>2995	FunctionDef	computeCompleteDataLogLikelihood (const ResidualIterator & first_residual , const ResidualIterator & last_residual , \
>2996	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>2997	Parameter	 
>2998	Identifier	precision
>2999	ParameterType	const Eigen 
>3000	Parameter	 
>3001	Identifier	mean
>3002	ParameterType	const Eigen 
>3003	Parameter	 
>3004	Identifier	first_weight
>3005	ParameterType	const WeightIterator &
>3006	Parameter	 
>3007	Identifier	last_residual
>3008	ParameterType	const ResidualIterator &
>3009	Parameter	 
>3010	Identifier	first_residual
>3011	ParameterType	const ResidualIterator &
>3012	ReturnType	float
>3013	CompoundStatement	 
>3014	ReturnStatement	 
>3015	AdditiveExpression	0.5 * n * std 
>3016	MultiplicativeExpression	0.5 * ( 5.0 + 2.0 ) * error_sum
>3017	MultiplicativeExpression	( 5.0 + 2.0 ) * error_sum
>3018	Identifier	error_sum
>3019	AdditiveExpression	5.0 + 2.0
>3020	PrimaryExpression	2.0
>3021	PrimaryExpression	5.0
>3022	PrimaryExpression	0.5
>3023	MultiplicativeExpression	0.5 * n * std 
>3024	MultiplicativeExpression	n * std 
>3025	CallExpression	std 
>3026	ArgumentList	precision . determinant ( )
>3027	Argument	precision . determinant ( )
>3028	CallExpression	precision . determinant ( )
>3029	ArgumentList	 
>3030	Callee	precision . determinant
>3031	MemberAccess	precision . determinant
>3032	Identifier	determinant
>3033	Identifier	precision
>3034	Callee	std 
>3035	Identifier	std 
>3036	Identifier	n
>3037	PrimaryExpression	0.5
>3038	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != last_residual ; ++ err_it , ++ c )
>3039	CompoundStatement	 
>3040	IfStatement	if ( ( c % 50 ) == 0 )
>3041	CompoundStatement	 
>3042	ExpressionStatement	 
>3043	AssignmentExpr	error_acc = 1.0
>3044	PrimaryExpression	1.0
>3045	Identifier	error_acc
>3046	ExpressionStatement	 
>3047	AssignmentExpr	error_sum += std 
>3048	CallExpression	std 
>3049	ArgumentList	error_acc
>3050	Argument	error_acc
>3051	Identifier	error_acc
>3052	Callee	std 
>3053	Identifier	std 
>3054	Identifier	error_sum
>3055	Condition	 
>3056	EqualityExpression	( c % 50 ) == 0
>3057	PrimaryExpression	0
>3058	MultiplicativeExpression	c % 50
>3059	PrimaryExpression	50
>3060	Identifier	c
>3061	ExpressionStatement	 
>3062	AssignmentExpr	error_acc *= ( 1.0 + 0.2 * ( ( * err_it ) . transpose ( ) * precision * ( * err_it ) ) ( 0 , 0 ) )
>3063	AdditiveExpression	1.0 + 0.2 * ( ( * err_it ) . transpose ( ) * precision * ( * err_it ) ) ( 0 , 0 )
>3064	MultiplicativeExpression	0.2 * ( ( * err_it ) . transpose ( ) * precision * ( * err_it ) ) ( 0 , 0 )
>3065	CallExpression	( ( * err_it ) . transpose ( ) * precision * ( * err_it ) ) ( 0 , 0 )
>3066	ArgumentList	0
>3067	Argument	0
>3068	PrimaryExpression	0
>3069	Argument	0
>3070	PrimaryExpression	0
>3071	Callee	( * err_it ) . transpose ( ) * precision * ( * err_it )
>3072	MultiplicativeExpression	( * err_it ) . transpose ( ) * precision * ( * err_it )
>3073	MultiplicativeExpression	precision * ( * err_it )
>3074	UnaryOp	* err_it
>3075	Identifier	err_it
>3076	UnaryOperator	*
>3077	Identifier	precision
>3078	CallExpression	( * err_it ) . transpose ( )
>3079	ArgumentList	 
>3080	Callee	( * err_it ) . transpose
>3081	MemberAccess	( * err_it ) . transpose
>3082	Identifier	transpose
>3083	UnaryOp	* err_it
>3084	Identifier	err_it
>3085	UnaryOperator	*
>3086	PrimaryExpression	0.2
>3087	PrimaryExpression	1.0
>3088	Identifier	error_acc
>3089	Expression	 
>3090	UnaryExpression	++ c
>3091	Identifier	c
>3092	IncDec	++
>3093	UnaryExpression	++ err_it
>3094	Identifier	err_it
>3095	IncDec	++
>3096	Condition	 
>3097	EqualityExpression	err_it != last_residual
>3098	Identifier	last_residual
>3099	Identifier	err_it
>3100	ForInit	 
>3101	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>3102	IdentifierDecl	err_it = first_residual
>3103	AssignmentExpr	err_it = first_residual
>3104	Identifier	first_residual
>3105	Identifier	first_residual
>3106	Identifier	err_it
>3107	IdentifierDeclType	ResidualIterator
>3108	IdentifierDeclStatement	 
>3109	IdentifierDecl	error_acc = 1.0
>3110	AssignmentExpr	error_acc = 1.0
>3111	PrimaryExpression	1.0
>3112	Identifier	error_acc
>3113	Identifier	error_acc
>3114	IdentifierDeclType	double
>3115	IdentifierDeclStatement	 
>3116	IdentifierDecl	error_sum = 0.0
>3117	AssignmentExpr	error_sum = 0.0
>3118	PrimaryExpression	0.0
>3119	Identifier	error_sum
>3120	Identifier	error_sum
>3121	IdentifierDeclType	double
>3122	IdentifierDeclStatement	 
>3123	IdentifierDecl	c = 1
>3124	AssignmentExpr	c = 1
>3125	PrimaryExpression	1
>3126	Identifier	c
>3127	Identifier	c
>3128	IdentifierDeclType	size_t
>3129	IdentifierDeclStatement	 
>3130	IdentifierDecl	n = ( last_residual - first_residual )
>3131	AssignmentExpr	n = ( last_residual - first_residual )
>3132	AdditiveExpression	last_residual - first_residual
>3133	Identifier	first_residual
>3134	Identifier	last_residual
>3135	Identifier	n
>3136	Identifier	n
>3137	IdentifierDeclType	size_t
>3155	FunctionDef	computeWeightedErrorPart (const float & weight , const Eigen 
>3156	ParameterList	const float & weight , const Eigen 
>3157	Parameter	 
>3158	Identifier	precision
>3159	ParameterType	const Eigen 
>3160	Parameter	 
>3161	Identifier	r
>3162	ParameterType	const Eigen 
>3163	Parameter	 
>3164	Identifier	weight
>3165	ParameterType	const float &
>3166	ReturnType	static inline float
>3167	CompoundStatement	 
>3168	ReturnStatement	 
>3169	MultiplicativeExpression	weight * r . transpose ( ) * precision * r
>3170	MultiplicativeExpression	r . transpose ( ) * precision * r
>3171	MultiplicativeExpression	precision * r
>3172	Identifier	r
>3173	Identifier	precision
>3174	CallExpression	r . transpose ( )
>3175	ArgumentList	 
>3176	Callee	r . transpose
>3177	MemberAccess	r . transpose
>3178	Identifier	transpose
>3179	Identifier	r
>3180	Identifier	weight
>3188	FunctionDef	computeWeightedError (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & \
>3189	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>3190	Parameter	 
>3191	Identifier	precision
>3192	ParameterType	const Eigen 
>3193	Parameter	 
>3194	Identifier	first_weight
>3195	ParameterType	const WeightIterator &
>3196	Parameter	 
>3197	Identifier	last_residual
>3198	ParameterType	const ResidualIterator &
>3199	Parameter	 
>3200	Identifier	first_residual
>3201	ParameterType	const ResidualIterator &
>3202	ReturnType	float
>3203	CompoundStatement	 
>3204	ReturnStatement	 
>3205	CallExpression	float ( weighted_error / n )
>3206	ArgumentList	weighted_error / n
>3207	Argument	weighted_error / n
>3208	MultiplicativeExpression	weighted_error / n
>3209	Identifier	n
>3210	Identifier	weighted_error
>3211	Callee	float
>3212	Identifier	float
>3213	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != last_residual ; ++ err_it , ++ w_it )
>3214	CompoundStatement	 
>3215	ExpressionStatement	 
>3216	AssignmentExpr	weighted_error += computeWeightedErrorPart ( * w_it , * err_it , precision )
>3217	CallExpression	computeWeightedErrorPart ( * w_it , * err_it , precision )
>3218	ArgumentList	* w_it
>3219	Argument	precision
>3220	Identifier	precision
>3221	Argument	* err_it
>3222	UnaryOp	* err_it
>3223	Identifier	err_it
>3224	UnaryOperator	*
>3225	Argument	* w_it
>3226	UnaryOp	* w_it
>3227	Identifier	w_it
>3228	UnaryOperator	*
>3229	Callee	computeWeightedErrorPart
>3230	Identifier	computeWeightedErrorPart
>3231	Identifier	weighted_error
>3232	Expression	 
>3233	UnaryExpression	++ w_it
>3234	Identifier	w_it
>3235	IncDec	++
>3236	UnaryExpression	++ err_it
>3237	Identifier	err_it
>3238	IncDec	++
>3239	Condition	 
>3240	EqualityExpression	err_it != last_residual
>3241	Identifier	last_residual
>3242	Identifier	err_it
>3243	ForInit	 
>3244	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>3245	IdentifierDecl	err_it = first_residual
>3246	AssignmentExpr	err_it = first_residual
>3247	Identifier	first_residual
>3248	Identifier	first_residual
>3249	Identifier	err_it
>3250	IdentifierDeclType	ResidualIterator
>3251	IdentifierDeclStatement	 
>3252	IdentifierDecl	n = ( last_residual - first_residual )
>3253	AssignmentExpr	n = ( last_residual - first_residual )
>3254	AdditiveExpression	last_residual - first_residual
>3255	Identifier	first_residual
>3256	Identifier	last_residual
>3257	Identifier	n
>3258	Identifier	n
>3259	IdentifierDeclType	size_t
>3260	IdentifierDeclStatement	 
>3261	IdentifierDecl	w_it = first_weight
>3262	AssignmentExpr	w_it = first_weight
>3263	Identifier	first_weight
>3264	Identifier	first_weight
>3265	Identifier	w_it
>3266	IdentifierDeclType	WeightIterator
>3267	IdentifierDeclStatement	 
>3268	IdentifierDecl	weighted_error = 0.0f
>3269	AssignmentExpr	weighted_error = 0.0f
>3270	PrimaryExpression	0.0f
>3271	Identifier	weighted_error
>3272	Identifier	weighted_error
>3273	IdentifierDeclType	double
>3289	FunctionDef	computeWeightedErrorSse (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const \
>3290	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>3291	Parameter	 
>3292	Identifier	precision
>3293	ParameterType	const Eigen 
>3294	Parameter	 
>3295	Identifier	first_weight
>3296	ParameterType	const WeightIterator &
>3297	Parameter	 
>3298	Identifier	last_residual
>3299	ParameterType	const ResidualIterator &
>3300	Parameter	 
>3301	Identifier	first_residual
>3302	ParameterType	const ResidualIterator &
>3303	ReturnType	float
>3304	CompoundStatement	 
>3305	ReturnStatement	 
>3306	CallExpression	float ( weighted_error / n )
>3307	ArgumentList	weighted_error / n
>3308	Argument	weighted_error / n
>3309	MultiplicativeExpression	weighted_error / n
>3310	Identifier	n
>3311	Identifier	weighted_error
>3312	Callee	float
>3313	Identifier	float
>3314	IdentifierDeclStatement	 
>3315	IdentifierDecl	n = ( last_residual - first_residual )
>3316	AssignmentExpr	n = ( last_residual - first_residual )
>3317	AdditiveExpression	last_residual - first_residual
>3318	Identifier	first_residual
>3319	Identifier	last_residual
>3320	Identifier	n
>3321	Identifier	n
>3322	IdentifierDeclType	size_t
>3323	ForStatement	for ( ResidualIterator err_it = lr ; err_it != last_residual ; ++ err_it , ++ w_it )
>3324	CompoundStatement	 
>3325	ExpressionStatement	 
>3326	AssignmentExpr	weighted_error += computeWeightedErrorPart ( * w_it , * err_it , precision )
>3327	CallExpression	computeWeightedErrorPart ( * w_it , * err_it , precision )
>3328	ArgumentList	* w_it
>3329	Argument	precision
>3330	Identifier	precision
>3331	Argument	* err_it
>3332	UnaryOp	* err_it
>3333	Identifier	err_it
>3334	UnaryOperator	*
>3335	Argument	* w_it
>3336	UnaryOp	* w_it
>3337	Identifier	w_it
>3338	UnaryOperator	*
>3339	Callee	computeWeightedErrorPart
>3340	Identifier	computeWeightedErrorPart
>3341	Identifier	weighted_error
>3342	Expression	 
>3343	UnaryExpression	++ w_it
>3344	Identifier	w_it
>3345	IncDec	++
>3346	UnaryExpression	++ err_it
>3347	Identifier	err_it
>3348	IncDec	++
>3349	Condition	 
>3350	EqualityExpression	err_it != last_residual
>3351	Identifier	last_residual
>3352	Identifier	err_it
>3353	ForInit	 
>3354	IdentifierDeclStatement	ResidualIterator err_it = lr ;
>3355	IdentifierDecl	err_it = lr
>3356	AssignmentExpr	err_it = lr
>3357	Identifier	lr
>3358	Identifier	lr
>3359	Identifier	err_it
>3360	IdentifierDeclType	ResidualIterator
>3361	IdentifierDeclStatement	 
>3362	IdentifierDecl	weighted_error = ( tmp [ 0 ] + tmp [ 1 ] ) + ( tmp [ 2 ] + tmp [ 3 ] )
>3363	AssignmentExpr	weighted_error = ( tmp [ 0 ] + tmp [ 1 ] ) + ( tmp [ 2 ] + tmp [ 3 ] )
>3364	AdditiveExpression	( tmp [ 0 ] + tmp [ 1 ] ) + ( tmp [ 2 ] + tmp [ 3 ] )
>3365	AdditiveExpression	tmp [ 2 ] + tmp [ 3 ]
>3366	ArrayIndexing	tmp [ 3 ]
>3367	PrimaryExpression	3
>3368	Identifier	tmp
>3369	ArrayIndexing	tmp [ 2 ]
>3370	PrimaryExpression	2
>3371	Identifier	tmp
>3372	AdditiveExpression	tmp [ 0 ] + tmp [ 1 ]
>3373	ArrayIndexing	tmp [ 1 ]
>3374	PrimaryExpression	1
>3375	Identifier	tmp
>3376	ArrayIndexing	tmp [ 0 ]
>3377	PrimaryExpression	0
>3378	Identifier	tmp
>3379	Identifier	weighted_error
>3380	Identifier	weighted_error
>3381	IdentifierDeclType	double
>3382	ExpressionStatement	 
>3383	CallExpression	_mm_store_ps ( tmp , error_acc )
>3384	ArgumentList	tmp
>3385	Argument	error_acc
>3386	Identifier	error_acc
>3387	Argument	tmp
>3388	Identifier	tmp
>3389	Callee	_mm_store_ps
>3390	Identifier	_mm_store_ps
>3391	IdentifierDeclStatement	 
>3392	IdentifierDecl	tmp [ 4 ]
>3393	PrimaryExpression	4
>3394	Identifier	tmp
>3395	IdentifierDeclType	EIGEN_ALIGN16 float [ 4 ]
>3396	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != lr ; err_it += 4 , w_it += 4 )
>3397	CompoundStatement	 
>3398	ExpressionStatement	 
>3399	AssignmentExpr	error_acc = _mm_add_ps ( error_acc , _mm_mul_ps ( weights1234 , dist_r1r2r3r4 ) )
>3400	CallExpression	_mm_add_ps ( error_acc , _mm_mul_ps ( weights1234 , dist_r1r2r3r4 ) )
>3401	ArgumentList	error_acc
>3402	Argument	_mm_mul_ps ( weights1234 , dist_r1r2r3r4 )
>3403	CallExpression	_mm_mul_ps ( weights1234 , dist_r1r2r3r4 )
>3404	ArgumentList	weights1234
>3405	Argument	dist_r1r2r3r4
>3406	Identifier	dist_r1r2r3r4
>3407	Argument	weights1234
>3408	Identifier	weights1234
>3409	Callee	_mm_mul_ps
>3410	Identifier	_mm_mul_ps
>3411	Argument	error_acc
>3412	Identifier	error_acc
>3413	Callee	_mm_add_ps
>3414	Identifier	_mm_add_ps
>3415	Identifier	error_acc
>3416	IdentifierDeclStatement	 
>3417	IdentifierDecl	weights1234 = _mm_load_ps ( & ( * w_it ) )
>3418	AssignmentExpr	weights1234 = _mm_load_ps ( & ( * w_it ) )
>3419	CallExpression	_mm_load_ps ( & ( * w_it ) )
>3420	ArgumentList	& ( * w_it )
>3421	Argument	& ( * w_it )
>3422	UnaryOp	& ( * w_it )
>3423	UnaryOp	* w_it
>3424	Identifier	w_it
>3425	UnaryOperator	*
>3426	UnaryOperator	&
>3427	Callee	_mm_load_ps
>3428	Identifier	_mm_load_ps
>3429	Identifier	weights1234
>3430	Identifier	weights1234
>3431	IdentifierDeclType	__m128
>3432	IdentifierDeclStatement	 
>3433	IdentifierDecl	dist_r1r2r3r4 = _mm_hadd_ps ( dist_r1r2 , dist_r3r4 )
>3434	AssignmentExpr	dist_r1r2r3r4 = _mm_hadd_ps ( dist_r1r2 , dist_r3r4 )
>3435	CallExpression	_mm_hadd_ps ( dist_r1r2 , dist_r3r4 )
>3436	ArgumentList	dist_r1r2
>3437	Argument	dist_r3r4
>3438	Identifier	dist_r3r4
>3439	Argument	dist_r1r2
>3440	Identifier	dist_r1r2
>3441	Callee	_mm_hadd_ps
>3442	Identifier	_mm_hadd_ps
>3443	Identifier	dist_r1r2r3r4
>3444	Identifier	dist_r1r2r3r4
>3445	IdentifierDeclType	__m128
>3446	IdentifierDeclStatement	 
>3447	IdentifierDecl	dist_r3r4 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) ) , diff_\
>3448	AssignmentExpr	dist_r3r4 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) ) , \
>3449	CallExpression	_mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) ) , diff_r3r4 )
>3450	ArgumentList	_mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) )
>3451	Argument	diff_r3r4
>3452	Identifier	diff_r3r4
>3453	Argument	_mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) )
>3454	CallExpression	_mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) )
>3455	ArgumentList	_mm_mul_ps ( diff_r3r3 , prec )
>3456	Argument	_mm_mul_ps ( diff_r4r4 , prec )
>3457	CallExpression	_mm_mul_ps ( diff_r4r4 , prec )
>3458	ArgumentList	diff_r4r4
>3459	Argument	prec
>3460	Identifier	prec
>3461	Argument	diff_r4r4
>3462	Identifier	diff_r4r4
>3463	Callee	_mm_mul_ps
>3464	Identifier	_mm_mul_ps
>3465	Argument	_mm_mul_ps ( diff_r3r3 , prec )
>3466	CallExpression	_mm_mul_ps ( diff_r3r3 , prec )
>3467	ArgumentList	diff_r3r3
>3468	Argument	prec
>3469	Identifier	prec
>3470	Argument	diff_r3r3
>3471	Identifier	diff_r3r3
>3472	Callee	_mm_mul_ps
>3473	Identifier	_mm_mul_ps
>3474	Callee	_mm_hadd_ps
>3475	Identifier	_mm_hadd_ps
>3476	Callee	_mm_mul_ps
>3477	Identifier	_mm_mul_ps
>3478	Identifier	dist_r3r4
>3479	Identifier	dist_r3r4
>3480	IdentifierDeclType	__m128
>3481	IdentifierDeclStatement	 
>3482	IdentifierDecl	diff_r4r4 = _mm_movehl_ps ( diff_r3r4 , diff_r3r4 )
>3483	AssignmentExpr	diff_r4r4 = _mm_movehl_ps ( diff_r3r4 , diff_r3r4 )
>3484	CallExpression	_mm_movehl_ps ( diff_r3r4 , diff_r3r4 )
>3485	ArgumentList	diff_r3r4
>3486	Argument	diff_r3r4
>3487	Identifier	diff_r3r4
>3488	Argument	diff_r3r4
>3489	Identifier	diff_r3r4
>3490	Callee	_mm_movehl_ps
>3491	Identifier	_mm_movehl_ps
>3492	Identifier	diff_r4r4
>3493	Identifier	diff_r4r4
>3494	IdentifierDeclType	__m128
>3495	IdentifierDeclStatement	 
>3496	IdentifierDecl	diff_r3r3 = _mm_movelh_ps ( diff_r3r4 , diff_r3r4 )
>3497	AssignmentExpr	diff_r3r3 = _mm_movelh_ps ( diff_r3r4 , diff_r3r4 )
>3498	CallExpression	_mm_movelh_ps ( diff_r3r4 , diff_r3r4 )
>3499	ArgumentList	diff_r3r4
>3500	Argument	diff_r3r4
>3501	Identifier	diff_r3r4
>3502	Argument	diff_r3r4
>3503	Identifier	diff_r3r4
>3504	Callee	_mm_movelh_ps
>3505	Identifier	_mm_movelh_ps
>3506	Identifier	diff_r3r3
>3507	Identifier	diff_r3r3
>3508	IdentifierDeclType	__m128
>3509	IdentifierDeclStatement	 
>3510	IdentifierDecl	diff_r3r4 = r3r4
>3511	AssignmentExpr	diff_r3r4 = r3r4
>3512	Identifier	r3r4
>3513	Identifier	r3r4
>3514	Identifier	diff_r3r4
>3515	IdentifierDeclType	__m128
>3516	IdentifierDeclStatement	 
>3517	IdentifierDecl	r3r4 = _mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>3518	AssignmentExpr	r3r4 = _mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>3519	CallExpression	_mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>3520	ArgumentList	( err_it + 2 ) -> data ( )
>3521	Argument	( err_it + 2 ) -> data ( )
>3522	CallExpression	( err_it + 2 ) -> data ( )
>3523	ArgumentList	 
>3524	Callee	( err_it + 2 ) -> data
>3525	PtrMemberAccess	( err_it + 2 ) -> data
>3526	Identifier	data
>3527	AdditiveExpression	err_it + 2
>3528	PrimaryExpression	2
>3529	Identifier	err_it
>3530	Callee	_mm_load_ps
>3531	Identifier	_mm_load_ps
>3532	Identifier	r3r4
>3533	Identifier	r3r4
>3534	IdentifierDeclType	__m128
>3535	IdentifierDeclStatement	 
>3536	IdentifierDecl	dist_r1r2 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) ) , diff_\
>3537	AssignmentExpr	dist_r1r2 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) ) , \
>3538	CallExpression	_mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) ) , diff_r1r2 )
>3539	ArgumentList	_mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) )
>3540	Argument	diff_r1r2
>3541	Identifier	diff_r1r2
>3542	Argument	_mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) )
>3543	CallExpression	_mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) )
>3544	ArgumentList	_mm_mul_ps ( diff_r1r1 , prec )
>3545	Argument	_mm_mul_ps ( diff_r2r2 , prec )
>3546	CallExpression	_mm_mul_ps ( diff_r2r2 , prec )
>3547	ArgumentList	diff_r2r2
>3548	Argument	prec
>3549	Identifier	prec
>3550	Argument	diff_r2r2
>3551	Identifier	diff_r2r2
>3552	Callee	_mm_mul_ps
>3553	Identifier	_mm_mul_ps
>3554	Argument	_mm_mul_ps ( diff_r1r1 , prec )
>3555	CallExpression	_mm_mul_ps ( diff_r1r1 , prec )
>3556	ArgumentList	diff_r1r1
>3557	Argument	prec
>3558	Identifier	prec
>3559	Argument	diff_r1r1
>3560	Identifier	diff_r1r1
>3561	Callee	_mm_mul_ps
>3562	Identifier	_mm_mul_ps
>3563	Callee	_mm_hadd_ps
>3564	Identifier	_mm_hadd_ps
>3565	Callee	_mm_mul_ps
>3566	Identifier	_mm_mul_ps
>3567	Identifier	dist_r1r2
>3568	Identifier	dist_r1r2
>3569	IdentifierDeclType	__m128
>3570	IdentifierDeclStatement	 
>3571	IdentifierDecl	diff_r2r2 = _mm_movehl_ps ( diff_r1r2 , diff_r1r2 )
>3572	AssignmentExpr	diff_r2r2 = _mm_movehl_ps ( diff_r1r2 , diff_r1r2 )
>3573	CallExpression	_mm_movehl_ps ( diff_r1r2 , diff_r1r2 )
>3574	ArgumentList	diff_r1r2
>3575	Argument	diff_r1r2
>3576	Identifier	diff_r1r2
>3577	Argument	diff_r1r2
>3578	Identifier	diff_r1r2
>3579	Callee	_mm_movehl_ps
>3580	Identifier	_mm_movehl_ps
>3581	Identifier	diff_r2r2
>3582	Identifier	diff_r2r2
>3583	IdentifierDeclType	__m128
>3584	IdentifierDeclStatement	 
>3585	IdentifierDecl	diff_r1r1 = _mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>3586	AssignmentExpr	diff_r1r1 = _mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>3587	CallExpression	_mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>3588	ArgumentList	diff_r1r2
>3589	Argument	diff_r1r2
>3590	Identifier	diff_r1r2
>3591	Argument	diff_r1r2
>3592	Identifier	diff_r1r2
>3593	Callee	_mm_movelh_ps
>3594	Identifier	_mm_movelh_ps
>3595	Identifier	diff_r1r1
>3596	Identifier	diff_r1r1
>3597	IdentifierDeclType	__m128
>3598	IdentifierDeclStatement	 
>3599	IdentifierDecl	diff_r1r2 = r1r2
>3600	AssignmentExpr	diff_r1r2 = r1r2
>3601	Identifier	r1r2
>3602	Identifier	r1r2
>3603	Identifier	diff_r1r2
>3604	IdentifierDeclType	__m128
>3605	IdentifierDeclStatement	 
>3606	IdentifierDecl	r1r2 = _mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>3607	AssignmentExpr	r1r2 = _mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>3608	CallExpression	_mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>3609	ArgumentList	( err_it + 0 ) -> data ( )
>3610	Argument	( err_it + 0 ) -> data ( )
>3611	CallExpression	( err_it + 0 ) -> data ( )
>3612	ArgumentList	 
>3613	Callee	( err_it + 0 ) -> data
>3614	PtrMemberAccess	( err_it + 0 ) -> data
>3615	Identifier	data
>3616	AdditiveExpression	err_it + 0
>3617	PrimaryExpression	0
>3618	Identifier	err_it
>3619	Callee	_mm_load_ps
>3620	Identifier	_mm_load_ps
>3621	Identifier	r1r2
>3622	Identifier	r1r2
>3623	IdentifierDeclType	__m128
>3624	Expression	 
>3625	AssignmentExpr	w_it += 4
>3626	PrimaryExpression	4
>3627	Identifier	w_it
>3628	AssignmentExpr	err_it += 4
>3629	PrimaryExpression	4
>3630	Identifier	err_it
>3631	Condition	 
>3632	EqualityExpression	err_it != lr
>3633	Identifier	lr
>3634	Identifier	err_it
>3635	ForInit	 
>3636	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>3637	IdentifierDecl	err_it = first_residual
>3638	AssignmentExpr	err_it = first_residual
>3639	Identifier	first_residual
>3640	Identifier	first_residual
>3641	Identifier	err_it
>3642	IdentifierDeclType	ResidualIterator
>3643	IdentifierDeclStatement	 
>3644	IdentifierDecl	prec = _mm_load_ps ( precision . data ( ) )
>3645	AssignmentExpr	prec = _mm_load_ps ( precision . data ( ) )
>3646	CallExpression	_mm_load_ps ( precision . data ( ) )
>3647	ArgumentList	precision . data ( )
>3648	Argument	precision . data ( )
>3649	CallExpression	precision . data ( )
>3650	ArgumentList	 
>3651	Callee	precision . data
>3652	MemberAccess	precision . data
>3653	Identifier	data
>3654	Identifier	precision
>3655	Callee	_mm_load_ps
>3656	Identifier	_mm_load_ps
>3657	Identifier	prec
>3658	Identifier	prec
>3659	IdentifierDeclType	__m128
>3660	IdentifierDeclStatement	 
>3661	IdentifierDecl	error_acc = _mm_setzero_ps ( )
>3662	AssignmentExpr	error_acc = _mm_setzero_ps ( )
>3663	CallExpression	_mm_setzero_ps ( )
>3664	ArgumentList	 
>3665	Callee	_mm_setzero_ps
>3666	Identifier	_mm_setzero_ps
>3667	Identifier	error_acc
>3668	Identifier	error_acc
>3669	IdentifierDeclType	__m128
>3670	IdentifierDeclStatement	 
>3671	IdentifierDecl	w_it = first_weight
>3672	AssignmentExpr	w_it = first_weight
>3673	Identifier	first_weight
>3674	Identifier	first_weight
>3675	Identifier	w_it
>3676	IdentifierDeclType	WeightIterator
>3677	IdentifierDeclStatement	 
>3678	IdentifierDecl	lr = last_residual - ( ( last_residual - first_residual ) % 4 )
>3679	AssignmentExpr	lr = last_residual - ( ( last_residual - first_residual ) % 4 )
>3680	AdditiveExpression	last_residual - ( ( last_residual - first_residual ) % 4 )
>3681	MultiplicativeExpression	( last_residual - first_residual ) % 4
>3682	PrimaryExpression	4
>3683	AdditiveExpression	last_residual - first_residual
>3684	Identifier	first_residual
>3685	Identifier	last_residual
>3686	Identifier	last_residual
>3687	Identifier	lr
>3688	Identifier	lr
>3689	IdentifierDeclType	const ResidualIterator
>3733	FunctionDef	computeMean (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & \
>3734	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>3735	Parameter	 
>3736	Identifier	first_weight
>3737	ParameterType	const WeightIterator &
>3738	Parameter	 
>3739	Identifier	last_residual
>3740	ParameterType	const ResidualIterator &
>3741	Parameter	 
>3742	Identifier	first_residual
>3743	ParameterType	const ResidualIterator &
>3744	ReturnType	Eigen 
>3745	CompoundStatement	 
>3746	ExpressionStatement	 
>3747	Statement	 
>3748	Statement	 
>3749	Statement	 
>3750	Statement	 
>3751	Statement	 
>3752	Statement	 
>3753	Statement	 
>3754	Statement	 
>3755	Statement	 
>3756	Statement	 
>3757	Statement	 
>3758	Statement	 
>3759	Statement	 
>3760	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != last_residual ; ++ err_it , ++ w_it )
>3761	CompoundStatement	 
>3762	ExpressionStatement	 
>3763	AssignmentExpr	weight_sum += w
>3764	Identifier	w
>3765	Identifier	weight_sum
>3766	ExpressionStatement	 
>3767	Statement	 
>3768	Statement	 
>3769	Statement	 
>3770	Statement	 
>3771	Statement	 
>3772	Statement	 
>3773	Statement	 
>3774	Statement	 
>3775	Statement	 
>3776	Statement	 
>3777	Statement	 
>3778	Statement	 
>3779	IdentifierDeclStatement	 
>3780	IdentifierDecl	w = ( * w_it )
>3781	AssignmentExpr	w = ( * w_it )
>3782	UnaryOp	* w_it
>3783	Identifier	w_it
>3784	UnaryOperator	*
>3785	Identifier	w
>3786	Identifier	w
>3787	IdentifierDeclType	double
>3788	Expression	 
>3789	UnaryExpression	++ w_it
>3790	Identifier	w_it
>3791	IncDec	++
>3792	UnaryExpression	++ err_it
>3793	Identifier	err_it
>3794	IncDec	++
>3795	Condition	 
>3796	EqualityExpression	err_it != last_residual
>3797	Identifier	last_residual
>3798	Identifier	err_it
>3799	ForInit	 
>3800	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>3801	IdentifierDecl	err_it = first_residual
>3802	AssignmentExpr	err_it = first_residual
>3803	Identifier	first_residual
>3804	Identifier	first_residual
>3805	Identifier	err_it
>3806	IdentifierDeclType	ResidualIterator
>3807	IdentifierDeclStatement	 
>3808	IdentifierDecl	weight_sum = 0.0f
>3809	AssignmentExpr	weight_sum = 0.0f
>3810	PrimaryExpression	0.0f
>3811	Identifier	weight_sum
>3812	Identifier	weight_sum
>3813	IdentifierDeclType	double
>3814	ExpressionStatement	 
>3815	CallExpression	weighted_residual_sum . setZero ( )
>3816	ArgumentList	 
>3817	Callee	weighted_residual_sum . setZero
>3818	MemberAccess	weighted_residual_sum . setZero
>3819	Identifier	setZero
>3820	Identifier	weighted_residual_sum
>3821	IdentifierDeclStatement	 
>3822	IdentifierDecl	weighted_residual_sum
>3823	Identifier	weighted_residual_sum
>3824	IdentifierDeclType	Eigen 
>3825	IdentifierDeclStatement	 
>3826	IdentifierDecl	w_it = first_weight
>3827	AssignmentExpr	w_it = first_weight
>3828	Identifier	first_weight
>3829	Identifier	first_weight
>3830	Identifier	w_it
>3831	IdentifierDeclType	WeightIterator
>3844	FunctionDef	computeMeanSse (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & \
>3845	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>3846	Parameter	 
>3847	Identifier	first_weight
>3848	ParameterType	const WeightIterator &
>3849	Parameter	 
>3850	Identifier	last_residual
>3851	ParameterType	const ResidualIterator &
>3852	Parameter	 
>3853	Identifier	first_residual
>3854	ParameterType	const ResidualIterator &
>3855	ReturnType	Eigen 
>3856	CompoundStatement	 
>3857	ReturnStatement	 
>3858	MultiplicativeExpression	weighted_residual_sum / weights
>3859	Identifier	weights
>3860	Identifier	weighted_residual_sum
>3861	ForStatement	for ( ResidualIterator err_it = lr ; err_it != last_residual ; ++ err_it , ++ weights_ptr )
>3862	CompoundStatement	 
>3863	ExpressionStatement	 
>3864	AssignmentExpr	weights += ( * weights_ptr )
>3865	UnaryOp	* weights_ptr
>3866	Identifier	weights_ptr
>3867	UnaryOperator	*
>3868	Identifier	weights
>3869	ExpressionStatement	 
>3870	AssignmentExpr	weighted_residual_sum += ( * weights_ptr ) * ( * err_it )
>3871	MultiplicativeExpression	( * weights_ptr ) * ( * err_it )
>3872	UnaryOp	* err_it
>3873	Identifier	err_it
>3874	UnaryOperator	*
>3875	UnaryOp	* weights_ptr
>3876	Identifier	weights_ptr
>3877	UnaryOperator	*
>3878	Identifier	weighted_residual_sum
>3879	Expression	 
>3880	UnaryExpression	++ weights_ptr
>3881	Identifier	weights_ptr
>3882	IncDec	++
>3883	UnaryExpression	++ err_it
>3884	Identifier	err_it
>3885	IncDec	++
>3886	Condition	 
>3887	EqualityExpression	err_it != last_residual
>3888	Identifier	last_residual
>3889	Identifier	err_it
>3890	ForInit	 
>3891	IdentifierDeclStatement	ResidualIterator err_it = lr ;
>3892	IdentifierDecl	err_it = lr
>3893	AssignmentExpr	err_it = lr
>3894	Identifier	lr
>3895	Identifier	lr
>3896	Identifier	err_it
>3897	IdentifierDeclType	ResidualIterator
>3898	IdentifierDeclStatement	 
>3899	IdentifierDecl	weights = tmp [ 0 ] + tmp [ 1 ] + tmp [ 2 ] + tmp [ 3 ]
>3900	AssignmentExpr	weights = tmp [ 0 ] + tmp [ 1 ] + tmp [ 2 ] + tmp [ 3 ]
>3901	AdditiveExpression	tmp [ 0 ] + tmp [ 1 ] + tmp [ 2 ] + tmp [ 3 ]
>3902	AdditiveExpression	tmp [ 1 ] + tmp [ 2 ] + tmp [ 3 ]
>3903	AdditiveExpression	tmp [ 2 ] + tmp [ 3 ]
>3904	ArrayIndexing	tmp [ 3 ]
>3905	PrimaryExpression	3
>3906	Identifier	tmp
>3907	ArrayIndexing	tmp [ 2 ]
>3908	PrimaryExpression	2
>3909	Identifier	tmp
>3910	ArrayIndexing	tmp [ 1 ]
>3911	PrimaryExpression	1
>3912	Identifier	tmp
>3913	ArrayIndexing	tmp [ 0 ]
>3914	PrimaryExpression	0
>3915	Identifier	tmp
>3916	Identifier	weights
>3917	Identifier	weights
>3918	IdentifierDeclType	float
>3919	ExpressionStatement	 
>3920	CallExpression	_mm_store_ps ( tmp , weight_acc )
>3921	ArgumentList	tmp
>3922	Argument	weight_acc
>3923	Identifier	weight_acc
>3924	Argument	tmp
>3925	Identifier	tmp
>3926	Callee	_mm_store_ps
>3927	Identifier	_mm_store_ps
>3928	ExpressionStatement	 
>3929	AssignmentExpr	weighted_residual_sum ( 1 ) = tmp [ 1 ] + tmp [ 3 ]
>3930	AdditiveExpression	tmp [ 1 ] + tmp [ 3 ]
>3931	ArrayIndexing	tmp [ 3 ]
>3932	PrimaryExpression	3
>3933	Identifier	tmp
>3934	ArrayIndexing	tmp [ 1 ]
>3935	PrimaryExpression	1
>3936	Identifier	tmp
>3937	CallExpression	weighted_residual_sum ( 1 )
>3938	ArgumentList	1
>3939	Argument	1
>3940	PrimaryExpression	1
>3941	Callee	weighted_residual_sum
>3942	Identifier	weighted_residual_sum
>3943	ExpressionStatement	 
>3944	AssignmentExpr	weighted_residual_sum ( 0 ) = tmp [ 0 ] + tmp [ 2 ]
>3945	AdditiveExpression	tmp [ 0 ] + tmp [ 2 ]
>3946	ArrayIndexing	tmp [ 2 ]
>3947	PrimaryExpression	2
>3948	Identifier	tmp
>3949	ArrayIndexing	tmp [ 0 ]
>3950	PrimaryExpression	0
>3951	Identifier	tmp
>3952	CallExpression	weighted_residual_sum ( 0 )
>3953	ArgumentList	0
>3954	Argument	0
>3955	PrimaryExpression	0
>3956	Callee	weighted_residual_sum
>3957	Identifier	weighted_residual_sum
>3958	IdentifierDeclStatement	 
>3959	IdentifierDecl	weighted_residual_sum
>3960	Identifier	weighted_residual_sum
>3961	IdentifierDeclType	Eigen 
>3962	ExpressionStatement	 
>3963	CallExpression	_mm_store_ps ( tmp , residual_acc )
>3964	ArgumentList	tmp
>3965	Argument	residual_acc
>3966	Identifier	residual_acc
>3967	Argument	tmp
>3968	Identifier	tmp
>3969	Callee	_mm_store_ps
>3970	Identifier	_mm_store_ps
>3971	IdentifierDeclStatement	 
>3972	IdentifierDecl	tmp [ 4 ]
>3973	PrimaryExpression	4
>3974	Identifier	tmp
>3975	IdentifierDeclType	EIGEN_ALIGN16 float [ 4 ]
>3976	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != lr ; err_it += 4 , weights_ptr += 4 )
>3977	CompoundStatement	 
>3978	ExpressionStatement	 
>3979	AssignmentExpr	residual_acc = _mm_add_ps ( residual_acc , _mm_add_ps ( _mm_mul_ps ( _mm_unpacklo_ps ( w1234 , w1234 ) , \
>3980	CallExpression	_mm_add_ps ( residual_acc , _mm_add_ps ( _mm_mul_ps ( _mm_unpacklo_ps ( w1234 , w1234 ) , r12 ) , _mm_mul_ps ( _\
>3981	ArgumentList	residual_acc
>3982	Argument	_mm_add_ps ( _mm_mul_ps ( _mm_unpacklo_ps ( w1234 , w1234 ) , r12 ) , _mm_mul_ps ( _mm_unpackhi_ps ( w1234 , w1234 ) , \
>3983	CallExpression	_mm_add_ps ( _mm_mul_ps ( _mm_unpacklo_ps ( w1234 , w1234 ) , r12 ) , _mm_mul_ps ( _mm_unpackhi_ps ( w1234 , w1234 ) , \
>3984	ArgumentList	_mm_mul_ps ( _mm_unpacklo_ps ( w1234 , w1234 ) , r12 )
>3985	Argument	_mm_mul_ps ( _mm_unpackhi_ps ( w1234 , w1234 ) , r34 )
>3986	CallExpression	_mm_mul_ps ( _mm_unpackhi_ps ( w1234 , w1234 ) , r34 )
>3987	ArgumentList	_mm_unpackhi_ps ( w1234 , w1234 )
>3988	Argument	r34
>3989	Identifier	r34
>3990	Argument	_mm_unpackhi_ps ( w1234 , w1234 )
>3991	CallExpression	_mm_unpackhi_ps ( w1234 , w1234 )
>3992	ArgumentList	w1234
>3993	Argument	w1234
>3994	Identifier	w1234
>3995	Argument	w1234
>3996	Identifier	w1234
>3997	Callee	_mm_unpackhi_ps
>3998	Identifier	_mm_unpackhi_ps
>3999	Callee	_mm_mul_ps
>4000	Identifier	_mm_mul_ps
>4001	Argument	_mm_mul_ps ( _mm_unpacklo_ps ( w1234 , w1234 ) , r12 )
>4002	CallExpression	_mm_mul_ps ( _mm_unpacklo_ps ( w1234 , w1234 ) , r12 )
>4003	ArgumentList	_mm_unpacklo_ps ( w1234 , w1234 )
>4004	Argument	r12
>4005	Identifier	r12
>4006	Argument	_mm_unpacklo_ps ( w1234 , w1234 )
>4007	CallExpression	_mm_unpacklo_ps ( w1234 , w1234 )
>4008	ArgumentList	w1234
>4009	Argument	w1234
>4010	Identifier	w1234
>4011	Argument	w1234
>4012	Identifier	w1234
>4013	Callee	_mm_unpacklo_ps
>4014	Identifier	_mm_unpacklo_ps
>4015	Callee	_mm_mul_ps
>4016	Identifier	_mm_mul_ps
>4017	Callee	_mm_add_ps
>4018	Identifier	_mm_add_ps
>4019	Argument	residual_acc
>4020	Identifier	residual_acc
>4021	Callee	_mm_add_ps
>4022	Identifier	_mm_add_ps
>4023	Identifier	residual_acc
>4024	IdentifierDeclStatement	 
>4025	IdentifierDecl	r34 = _mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>4026	AssignmentExpr	r34 = _mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>4027	CallExpression	_mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>4028	ArgumentList	( err_it + 2 ) -> data ( )
>4029	Argument	( err_it + 2 ) -> data ( )
>4030	CallExpression	( err_it + 2 ) -> data ( )
>4031	ArgumentList	 
>4032	Callee	( err_it + 2 ) -> data
>4033	PtrMemberAccess	( err_it + 2 ) -> data
>4034	Identifier	data
>4035	AdditiveExpression	err_it + 2
>4036	PrimaryExpression	2
>4037	Identifier	err_it
>4038	Callee	_mm_load_ps
>4039	Identifier	_mm_load_ps
>4040	Identifier	r34
>4041	Identifier	r34
>4042	IdentifierDeclType	__m128
>4043	IdentifierDeclStatement	 
>4044	IdentifierDecl	r12 = _mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>4045	AssignmentExpr	r12 = _mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>4046	CallExpression	_mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>4047	ArgumentList	( err_it + 0 ) -> data ( )
>4048	Argument	( err_it + 0 ) -> data ( )
>4049	CallExpression	( err_it + 0 ) -> data ( )
>4050	ArgumentList	 
>4051	Callee	( err_it + 0 ) -> data
>4052	PtrMemberAccess	( err_it + 0 ) -> data
>4053	Identifier	data
>4054	AdditiveExpression	err_it + 0
>4055	PrimaryExpression	0
>4056	Identifier	err_it
>4057	Callee	_mm_load_ps
>4058	Identifier	_mm_load_ps
>4059	Identifier	r12
>4060	Identifier	r12
>4061	IdentifierDeclType	__m128
>4062	ExpressionStatement	 
>4063	AssignmentExpr	weight_acc = _mm_add_ps ( weight_acc , w1234 )
>4064	CallExpression	_mm_add_ps ( weight_acc , w1234 )
>4065	ArgumentList	weight_acc
>4066	Argument	w1234
>4067	Identifier	w1234
>4068	Argument	weight_acc
>4069	Identifier	weight_acc
>4070	Callee	_mm_add_ps
>4071	Identifier	_mm_add_ps
>4072	Identifier	weight_acc
>4073	IdentifierDeclStatement	 
>4074	IdentifierDecl	w1234 = _mm_load_ps ( weights_ptr )
>4075	AssignmentExpr	w1234 = _mm_load_ps ( weights_ptr )
>4076	CallExpression	_mm_load_ps ( weights_ptr )
>4077	ArgumentList	weights_ptr
>4078	Argument	weights_ptr
>4079	Identifier	weights_ptr
>4080	Callee	_mm_load_ps
>4081	Identifier	_mm_load_ps
>4082	Identifier	w1234
>4083	Identifier	w1234
>4084	IdentifierDeclType	__m128
>4085	Expression	 
>4086	AssignmentExpr	weights_ptr += 4
>4087	PrimaryExpression	4
>4088	Identifier	weights_ptr
>4089	AssignmentExpr	err_it += 4
>4090	PrimaryExpression	4
>4091	Identifier	err_it
>4092	Condition	 
>4093	EqualityExpression	err_it != lr
>4094	Identifier	lr
>4095	Identifier	err_it
>4096	ForInit	 
>4097	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>4098	IdentifierDecl	err_it = first_residual
>4099	AssignmentExpr	err_it = first_residual
>4100	Identifier	first_residual
>4101	Identifier	first_residual
>4102	Identifier	err_it
>4103	IdentifierDeclType	ResidualIterator
>4104	IdentifierDeclStatement	 
>4105	IdentifierDecl	lr = last_residual - ( ( last_residual - first_residual ) % 4 )
>4106	AssignmentExpr	lr = last_residual - ( ( last_residual - first_residual ) % 4 )
>4107	AdditiveExpression	last_residual - ( ( last_residual - first_residual ) % 4 )
>4108	MultiplicativeExpression	( last_residual - first_residual ) % 4
>4109	PrimaryExpression	4
>4110	AdditiveExpression	last_residual - first_residual
>4111	Identifier	first_residual
>4112	Identifier	last_residual
>4113	Identifier	last_residual
>4114	Identifier	lr
>4115	Identifier	lr
>4116	IdentifierDeclType	const ResidualIterator
>4117	IdentifierDeclStatement	 
>4118	IdentifierDecl	weight_acc = _mm_setzero_ps ( )
>4119	AssignmentExpr	weight_acc = _mm_setzero_ps ( )
>4120	CallExpression	_mm_setzero_ps ( )
>4121	ArgumentList	 
>4122	Callee	_mm_setzero_ps
>4123	Identifier	_mm_setzero_ps
>4124	Identifier	weight_acc
>4125	Identifier	weight_acc
>4126	IdentifierDeclType	__m128
>4127	IdentifierDeclStatement	 
>4128	IdentifierDecl	residual_acc = _mm_setzero_ps ( )
>4129	AssignmentExpr	residual_acc = _mm_setzero_ps ( )
>4130	CallExpression	_mm_setzero_ps ( )
>4131	ArgumentList	 
>4132	Callee	_mm_setzero_ps
>4133	Identifier	_mm_setzero_ps
>4134	Identifier	residual_acc
>4135	Identifier	residual_acc
>4136	IdentifierDeclType	__m128
>4137	IdentifierDeclStatement	 
>4138	IdentifierDecl	* weights_ptr = & ( * first_weight )
>4139	AssignmentExpr	* weights_ptr = & ( * first_weight )
>4140	UnaryOp	& ( * first_weight )
>4141	UnaryOp	* first_weight
>4142	Identifier	first_weight
>4143	UnaryOperator	*
>4144	UnaryOperator	&
>4145	Identifier	weights_ptr
>4146	Identifier	weights_ptr
>4147	IdentifierDeclType	const float *
>4177	FunctionDef	computeScalePart (const float & weight , const Eigen 
>4178	ParameterList	const float & weight , const Eigen 
>4179	Parameter	 
>4180	Identifier	mean
>4181	ParameterType	const Eigen 
>4182	Parameter	 
>4183	Identifier	r
>4184	ParameterType	const Eigen 
>4185	Parameter	 
>4186	Identifier	weight
>4187	ParameterType	const float &
>4188	ReturnType	static inline Eigen 
>4189	CompoundStatement	 
>4190	ReturnStatement	 
>4191	MultiplicativeExpression	weight * diff * diff . transpose ( )
>4192	MultiplicativeExpression	diff * diff . transpose ( )
>4193	CallExpression	diff . transpose ( )
>4194	ArgumentList	 
>4195	Callee	diff . transpose
>4196	MemberAccess	diff . transpose
>4197	Identifier	transpose
>4198	Identifier	diff
>4199	Identifier	diff
>4200	Identifier	weight
>4201	ExpressionStatement	 
>4202	AssignmentExpr	diff = r - mean
>4203	AdditiveExpression	r - mean
>4204	Identifier	mean
>4205	Identifier	r
>4206	Identifier	diff
>4207	IdentifierDeclStatement	 
>4208	IdentifierDecl	diff
>4209	Identifier	diff
>4210	IdentifierDeclType	Eigen 
>4219	FunctionDef	computeScale (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & \
>4220	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>4221	Parameter	 
>4222	Identifier	mean
>4223	ParameterType	const Eigen 
>4224	Parameter	 
>4225	Identifier	first_weight
>4226	ParameterType	const WeightIterator &
>4227	Parameter	 
>4228	Identifier	last_residual
>4229	ParameterType	const ResidualIterator &
>4230	Parameter	 
>4231	Identifier	first_residual
>4232	ParameterType	const ResidualIterator &
>4233	ReturnType	Eigen 
>4234	CompoundStatement	 
>4235	ReturnStatement	 
>4236	Identifier	covariance
>4237	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != last_residual ; ++ err_it , ++ w_it )
>4238	CompoundStatement	 
>4239	ExpressionStatement	 
>4240	AssignmentExpr	covariance += scale * computeScalePart ( * w_it , * err_it , mean )
>4241	MultiplicativeExpression	scale * computeScalePart ( * w_it , * err_it , mean )
>4242	CallExpression	computeScalePart ( * w_it , * err_it , mean )
>4243	ArgumentList	* w_it
>4244	Argument	mean
>4245	Identifier	mean
>4246	Argument	* err_it
>4247	UnaryOp	* err_it
>4248	Identifier	err_it
>4249	UnaryOperator	*
>4250	Argument	* w_it
>4251	UnaryOp	* w_it
>4252	Identifier	w_it
>4253	UnaryOperator	*
>4254	Callee	computeScalePart
>4255	Identifier	computeScalePart
>4256	Identifier	scale
>4257	Identifier	covariance
>4258	Expression	 
>4259	UnaryExpression	++ w_it
>4260	Identifier	w_it
>4261	IncDec	++
>4262	UnaryExpression	++ err_it
>4263	Identifier	err_it
>4264	IncDec	++
>4265	Condition	 
>4266	EqualityExpression	err_it != last_residual
>4267	Identifier	last_residual
>4268	Identifier	err_it
>4269	ForInit	 
>4270	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>4271	IdentifierDecl	err_it = first_residual
>4272	AssignmentExpr	err_it = first_residual
>4273	Identifier	first_residual
>4274	Identifier	first_residual
>4275	Identifier	err_it
>4276	IdentifierDeclType	ResidualIterator
>4277	IdentifierDeclStatement	 
>4278	IdentifierDecl	scale = 1.0f / ( n - 2 - 1 )
>4279	AssignmentExpr	scale = 1.0f / ( n - 2 - 1 )
>4280	MultiplicativeExpression	1.0f / ( n - 2 - 1 )
>4281	AdditiveExpression	n - 2 - 1
>4282	AdditiveExpression	2 - 1
>4283	PrimaryExpression	1
>4284	PrimaryExpression	2
>4285	Identifier	n
>4286	PrimaryExpression	1.0f
>4287	Identifier	scale
>4288	Identifier	scale
>4289	IdentifierDeclType	float
>4290	IdentifierDeclStatement	 
>4291	IdentifierDecl	n = ( last_residual - first_residual )
>4292	AssignmentExpr	n = ( last_residual - first_residual )
>4293	AdditiveExpression	last_residual - first_residual
>4294	Identifier	first_residual
>4295	Identifier	last_residual
>4296	Identifier	n
>4297	Identifier	n
>4298	IdentifierDeclType	size_t
>4299	IdentifierDeclStatement	 
>4300	IdentifierDecl	w_it = first_weight
>4301	AssignmentExpr	w_it = first_weight
>4302	Identifier	first_weight
>4303	Identifier	first_weight
>4304	Identifier	w_it
>4305	IdentifierDeclType	WeightIterator
>4306	ExpressionStatement	 
>4307	CallExpression	covariance . setZero ( )
>4308	ArgumentList	 
>4309	Callee	covariance . setZero
>4310	MemberAccess	covariance . setZero
>4311	Identifier	setZero
>4312	Identifier	covariance
>4313	IdentifierDeclStatement	 
>4314	IdentifierDecl	covariance
>4315	Identifier	covariance
>4316	IdentifierDeclType	Eigen 
>4332	FunctionDef	computeScaleSse (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & \
>4333	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>4334	Parameter	 
>4335	Identifier	mean
>4336	ParameterType	const Eigen 
>4337	Parameter	 
>4338	Identifier	first_weight
>4339	ParameterType	const WeightIterator &
>4340	Parameter	 
>4341	Identifier	last_residual
>4342	ParameterType	const ResidualIterator &
>4343	Parameter	 
>4344	Identifier	first_residual
>4345	ParameterType	const ResidualIterator &
>4346	ReturnType	Eigen 
>4347	CompoundStatement	 
>4348	ReturnStatement	 
>4349	Identifier	covariance
>4350	ForStatement	for ( ResidualIterator err_it = lr ; err_it != last_residual ; ++ err_it , ++ w_it )
>4351	CompoundStatement	 
>4352	ExpressionStatement	 
>4353	AssignmentExpr	covariance += scale * computeScalePart ( * w_it , * err_it , mean )
>4354	MultiplicativeExpression	scale * computeScalePart ( * w_it , * err_it , mean )
>4355	CallExpression	computeScalePart ( * w_it , * err_it , mean )
>4356	ArgumentList	* w_it
>4357	Argument	mean
>4358	Identifier	mean
>4359	Argument	* err_it
>4360	UnaryOp	* err_it
>4361	Identifier	err_it
>4362	UnaryOperator	*
>4363	Argument	* w_it
>4364	UnaryOp	* w_it
>4365	Identifier	w_it
>4366	UnaryOperator	*
>4367	Callee	computeScalePart
>4368	Identifier	computeScalePart
>4369	Identifier	scale
>4370	Identifier	covariance
>4371	Expression	 
>4372	UnaryExpression	++ w_it
>4373	Identifier	w_it
>4374	IncDec	++
>4375	UnaryExpression	++ err_it
>4376	Identifier	err_it
>4377	IncDec	++
>4378	Condition	 
>4379	EqualityExpression	err_it != last_residual
>4380	Identifier	last_residual
>4381	Identifier	err_it
>4382	ForInit	 
>4383	IdentifierDeclStatement	ResidualIterator err_it = lr ;
>4384	IdentifierDecl	err_it = lr
>4385	AssignmentExpr	err_it = lr
>4386	Identifier	lr
>4387	Identifier	lr
>4388	Identifier	err_it
>4389	IdentifierDeclType	ResidualIterator
>4390	ExpressionStatement	 
>4391	AssignmentExpr	covariance ( 1 , 1 ) = tmp [ 3 ]
>4392	ArrayIndexing	tmp [ 3 ]
>4393	PrimaryExpression	3
>4394	Identifier	tmp
>4395	CallExpression	covariance ( 1 , 1 )
>4396	ArgumentList	1
>4397	Argument	1
>4398	PrimaryExpression	1
>4399	Argument	1
>4400	PrimaryExpression	1
>4401	Callee	covariance
>4402	Identifier	covariance
>4403	ExpressionStatement	 
>4404	AssignmentExpr	covariance ( 1 , 0 ) = tmp [ 1 ]
>4405	ArrayIndexing	tmp [ 1 ]
>4406	PrimaryExpression	1
>4407	Identifier	tmp
>4408	CallExpression	covariance ( 1 , 0 )
>4409	ArgumentList	1
>4410	Argument	0
>4411	PrimaryExpression	0
>4412	Argument	1
>4413	PrimaryExpression	1
>4414	Callee	covariance
>4415	Identifier	covariance
>4416	ExpressionStatement	 
>4417	AssignmentExpr	covariance ( 0 , 1 ) = tmp [ 1 ]
>4418	ArrayIndexing	tmp [ 1 ]
>4419	PrimaryExpression	1
>4420	Identifier	tmp
>4421	CallExpression	covariance ( 0 , 1 )
>4422	ArgumentList	0
>4423	Argument	1
>4424	PrimaryExpression	1
>4425	Argument	0
>4426	PrimaryExpression	0
>4427	Callee	covariance
>4428	Identifier	covariance
>4429	ExpressionStatement	 
>4430	AssignmentExpr	covariance ( 0 , 0 ) = tmp [ 0 ]
>4431	ArrayIndexing	tmp [ 0 ]
>4432	PrimaryExpression	0
>4433	Identifier	tmp
>4434	CallExpression	covariance ( 0 , 0 )
>4435	ArgumentList	0
>4436	Argument	0
>4437	PrimaryExpression	0
>4438	Argument	0
>4439	PrimaryExpression	0
>4440	Callee	covariance
>4441	Identifier	covariance
>4442	IdentifierDeclStatement	 
>4443	IdentifierDecl	covariance
>4444	Identifier	covariance
>4445	IdentifierDeclType	Eigen 
>4446	ExpressionStatement	 
>4447	CallExpression	_mm_store_ps ( tmp , cov_acc )
>4448	ArgumentList	tmp
>4449	Argument	cov_acc
>4450	Identifier	cov_acc
>4451	Argument	tmp
>4452	Identifier	tmp
>4453	Callee	_mm_store_ps
>4454	Identifier	_mm_store_ps
>4455	IdentifierDeclStatement	 
>4456	IdentifierDecl	tmp [ 4 ]
>4457	PrimaryExpression	4
>4458	Identifier	tmp
>4459	IdentifierDeclType	EIGEN_ALIGN16 float [ 4 ]
>4460	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != lr ; err_it += 2 , w_it += 2 )
>4461	CompoundStatement	 
>4462	ExpressionStatement	 
>4463	AssignmentExpr	cov_acc = _mm_add_ps ( cov_acc , _mm_add_ps ( p1 , p2 ) )
>4464	CallExpression	_mm_add_ps ( cov_acc , _mm_add_ps ( p1 , p2 ) )
>4465	ArgumentList	cov_acc
>4466	Argument	_mm_add_ps ( p1 , p2 )
>4467	CallExpression	_mm_add_ps ( p1 , p2 )
>4468	ArgumentList	p1
>4469	Argument	p2
>4470	Identifier	p2
>4471	Argument	p1
>4472	Identifier	p1
>4473	Callee	_mm_add_ps
>4474	Identifier	_mm_add_ps
>4475	Argument	cov_acc
>4476	Identifier	cov_acc
>4477	Callee	_mm_add_ps
>4478	Identifier	_mm_add_ps
>4479	Identifier	cov_acc
>4480	IdentifierDeclStatement	 
>4481	IdentifierDecl	p2 = _mm_mul_ps ( s , _mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) ) )
>4482	AssignmentExpr	p2 = _mm_mul_ps ( s , _mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) ) )
>4483	CallExpression	_mm_mul_ps ( s , _mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) ) )
>4484	ArgumentList	s
>4485	Argument	_mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) )
>4486	CallExpression	_mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) )
>4487	ArgumentList	w
>4488	Argument	_mm_mul_ps ( fac1 , fac2 )
>4489	CallExpression	_mm_mul_ps ( fac1 , fac2 )
>4490	ArgumentList	fac1
>4491	Argument	fac2
>4492	Identifier	fac2
>4493	Argument	fac1
>4494	Identifier	fac1
>4495	Callee	_mm_mul_ps
>4496	Identifier	_mm_mul_ps
>4497	Argument	w
>4498	Identifier	w
>4499	Callee	_mm_mul_ps
>4500	Identifier	_mm_mul_ps
>4501	Argument	s
>4502	Identifier	s
>4503	Callee	_mm_mul_ps
>4504	Identifier	_mm_mul_ps
>4505	Identifier	p2
>4506	Identifier	p2
>4507	IdentifierDeclType	__m128
>4508	ExpressionStatement	 
>4509	AssignmentExpr	w = _mm_set1_ps ( * ( w_it + 1 ) )
>4510	CallExpression	_mm_set1_ps ( * ( w_it + 1 ) )
>4511	ArgumentList	* ( w_it + 1 )
>4512	Argument	* ( w_it + 1 )
>4513	UnaryOp	* ( w_it + 1 )
>4514	AdditiveExpression	w_it + 1
>4515	PrimaryExpression	1
>4516	Identifier	w_it
>4517	UnaryOperator	*
>4518	Callee	_mm_set1_ps
>4519	Identifier	_mm_set1_ps
>4520	Identifier	w
>4521	ExpressionStatement	 
>4522	AssignmentExpr	fac2 = _mm_unpacklo_ps ( diff_r1r2 , diff_r1r2 )
>4523	CallExpression	_mm_unpacklo_ps ( diff_r1r2 , diff_r1r2 )
>4524	ArgumentList	diff_r1r2
>4525	Argument	diff_r1r2
>4526	Identifier	diff_r1r2
>4527	Argument	diff_r1r2
>4528	Identifier	diff_r1r2
>4529	Callee	_mm_unpacklo_ps
>4530	Identifier	_mm_unpacklo_ps
>4531	Identifier	fac2
>4532	ExpressionStatement	 
>4533	AssignmentExpr	fac1 = _mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>4534	CallExpression	_mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>4535	ArgumentList	diff_r1r2
>4536	Argument	diff_r1r2
>4537	Identifier	diff_r1r2
>4538	Argument	diff_r1r2
>4539	Identifier	diff_r1r2
>4540	Callee	_mm_movelh_ps
>4541	Identifier	_mm_movelh_ps
>4542	Identifier	fac1
>4543	IdentifierDeclStatement	 
>4544	IdentifierDecl	p1 = _mm_mul_ps ( s , _mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) ) )
>4545	AssignmentExpr	p1 = _mm_mul_ps ( s , _mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) ) )
>4546	CallExpression	_mm_mul_ps ( s , _mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) ) )
>4547	ArgumentList	s
>4548	Argument	_mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) )
>4549	CallExpression	_mm_mul_ps ( w , _mm_mul_ps ( fac1 , fac2 ) )
>4550	ArgumentList	w
>4551	Argument	_mm_mul_ps ( fac1 , fac2 )
>4552	CallExpression	_mm_mul_ps ( fac1 , fac2 )
>4553	ArgumentList	fac1
>4554	Argument	fac2
>4555	Identifier	fac2
>4556	Argument	fac1
>4557	Identifier	fac1
>4558	Callee	_mm_mul_ps
>4559	Identifier	_mm_mul_ps
>4560	Argument	w
>4561	Identifier	w
>4562	Callee	_mm_mul_ps
>4563	Identifier	_mm_mul_ps
>4564	Argument	s
>4565	Identifier	s
>4566	Callee	_mm_mul_ps
>4567	Identifier	_mm_mul_ps
>4568	Identifier	p1
>4569	Identifier	p1
>4570	IdentifierDeclType	__m128
>4571	ExpressionStatement	 
>4572	AssignmentExpr	w = _mm_set1_ps ( * ( w_it + 0 ) )
>4573	CallExpression	_mm_set1_ps ( * ( w_it + 0 ) )
>4574	ArgumentList	* ( w_it + 0 )
>4575	Argument	* ( w_it + 0 )
>4576	UnaryOp	* ( w_it + 0 )
>4577	AdditiveExpression	w_it + 0
>4578	PrimaryExpression	0
>4579	Identifier	w_it
>4580	UnaryOperator	*
>4581	Callee	_mm_set1_ps
>4582	Identifier	_mm_set1_ps
>4583	Identifier	w
>4584	ExpressionStatement	 
>4585	AssignmentExpr	fac2 = _mm_unpacklo_ps ( diff_r1r2 , diff_r1r2 )
>4586	CallExpression	_mm_unpacklo_ps ( diff_r1r2 , diff_r1r2 )
>4587	ArgumentList	diff_r1r2
>4588	Argument	diff_r1r2
>4589	Identifier	diff_r1r2
>4590	Argument	diff_r1r2
>4591	Identifier	diff_r1r2
>4592	Callee	_mm_unpacklo_ps
>4593	Identifier	_mm_unpacklo_ps
>4594	Identifier	fac2
>4595	ExpressionStatement	 
>4596	AssignmentExpr	fac1 = _mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>4597	CallExpression	_mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>4598	ArgumentList	diff_r1r2
>4599	Argument	diff_r1r2
>4600	Identifier	diff_r1r2
>4601	Argument	diff_r1r2
>4602	Identifier	diff_r1r2
>4603	Callee	_mm_movelh_ps
>4604	Identifier	_mm_movelh_ps
>4605	Identifier	fac1
>4606	IdentifierDeclStatement	 
>4607	IdentifierDecl	diff_r1r2 = _mm_sub_ps ( r1r2 , mean2 )
>4608	AssignmentExpr	diff_r1r2 = _mm_sub_ps ( r1r2 , mean2 )
>4609	CallExpression	_mm_sub_ps ( r1r2 , mean2 )
>4610	ArgumentList	r1r2
>4611	Argument	mean2
>4612	Identifier	mean2
>4613	Argument	r1r2
>4614	Identifier	r1r2
>4615	Callee	_mm_sub_ps
>4616	Identifier	_mm_sub_ps
>4617	Identifier	diff_r1r2
>4618	Identifier	diff_r1r2
>4619	IdentifierDeclType	__m128
>4620	IdentifierDeclStatement	 
>4621	IdentifierDecl	r1r2 = _mm_load_ps ( err_it -> data ( ) )
>4622	AssignmentExpr	r1r2 = _mm_load_ps ( err_it -> data ( ) )
>4623	CallExpression	_mm_load_ps ( err_it -> data ( ) )
>4624	ArgumentList	err_it -> data ( )
>4625	Argument	err_it -> data ( )
>4626	CallExpression	err_it -> data ( )
>4627	ArgumentList	 
>4628	Callee	err_it -> data
>4629	PtrMemberAccess	err_it -> data
>4630	Identifier	data
>4631	Identifier	err_it
>4632	Callee	_mm_load_ps
>4633	Identifier	_mm_load_ps
>4634	Identifier	r1r2
>4635	Identifier	r1r2
>4636	IdentifierDeclType	__m128
>4637	Expression	 
>4638	AssignmentExpr	w_it += 2
>4639	PrimaryExpression	2
>4640	Identifier	w_it
>4641	AssignmentExpr	err_it += 2
>4642	PrimaryExpression	2
>4643	Identifier	err_it
>4644	Condition	 
>4645	EqualityExpression	err_it != lr
>4646	Identifier	lr
>4647	Identifier	err_it
>4648	ForInit	 
>4649	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>4650	IdentifierDecl	err_it = first_residual
>4651	AssignmentExpr	err_it = first_residual
>4652	Identifier	first_residual
>4653	Identifier	first_residual
>4654	Identifier	err_it
>4655	IdentifierDeclType	ResidualIterator
>4656	IdentifierDeclStatement	 
>4657	IdentifierDecl	w
>4658	Identifier	w
>4659	IdentifierDeclType	__m128
>4660	IdentifierDecl	fac2
>4661	Identifier	fac2
>4662	IdentifierDeclType	__m128
>4663	IdentifierDecl	fac1
>4664	Identifier	fac1
>4665	IdentifierDeclType	__m128
>4666	IdentifierDeclStatement	 
>4667	IdentifierDecl	mean2 = _mm_setr_ps ( mean ( 0 ) , mean ( 1 ) , mean ( 0 ) , mean ( 1 ) )
>4668	AssignmentExpr	mean2 = _mm_setr_ps ( mean ( 0 ) , mean ( 1 ) , mean ( 0 ) , mean ( 1 ) )
>4669	CallExpression	_mm_setr_ps ( mean ( 0 ) , mean ( 1 ) , mean ( 0 ) , mean ( 1 ) )
>4670	ArgumentList	mean ( 0 )
>4671	Argument	mean ( 1 )
>4672	CallExpression	mean ( 1 )
>4673	ArgumentList	1
>4674	Argument	1
>4675	PrimaryExpression	1
>4676	Callee	mean
>4677	Identifier	mean
>4678	Argument	mean ( 0 )
>4679	CallExpression	mean ( 0 )
>4680	ArgumentList	0
>4681	Argument	0
>4682	PrimaryExpression	0
>4683	Callee	mean
>4684	Identifier	mean
>4685	Argument	mean ( 1 )
>4686	CallExpression	mean ( 1 )
>4687	ArgumentList	1
>4688	Argument	1
>4689	PrimaryExpression	1
>4690	Callee	mean
>4691	Identifier	mean
>4692	Argument	mean ( 0 )
>4693	CallExpression	mean ( 0 )
>4694	ArgumentList	0
>4695	Argument	0
>4696	PrimaryExpression	0
>4697	Callee	mean
>4698	Identifier	mean
>4699	Callee	_mm_setr_ps
>4700	Identifier	_mm_setr_ps
>4701	Identifier	mean2
>4702	Identifier	mean2
>4703	IdentifierDeclType	__m128
>4704	IdentifierDeclStatement	 
>4705	IdentifierDecl	s = _mm_set1_ps ( scale )
>4706	AssignmentExpr	s = _mm_set1_ps ( scale )
>4707	CallExpression	_mm_set1_ps ( scale )
>4708	ArgumentList	scale
>4709	Argument	scale
>4710	Identifier	scale
>4711	Callee	_mm_set1_ps
>4712	Identifier	_mm_set1_ps
>4713	Identifier	s
>4714	Identifier	s
>4715	IdentifierDeclType	__m128
>4716	IdentifierDeclStatement	 
>4717	IdentifierDecl	cov_acc = _mm_setzero_ps ( )
>4718	AssignmentExpr	cov_acc = _mm_setzero_ps ( )
>4719	CallExpression	_mm_setzero_ps ( )
>4720	ArgumentList	 
>4721	Callee	_mm_setzero_ps
>4722	Identifier	_mm_setzero_ps
>4723	Identifier	cov_acc
>4724	Identifier	cov_acc
>4725	IdentifierDeclType	__m128
>4726	IdentifierDeclStatement	 
>4727	IdentifierDecl	scale = 1.0f / ( n - 2 - 1 )
>4728	AssignmentExpr	scale = 1.0f / ( n - 2 - 1 )
>4729	MultiplicativeExpression	1.0f / ( n - 2 - 1 )
>4730	AdditiveExpression	n - 2 - 1
>4731	AdditiveExpression	2 - 1
>4732	PrimaryExpression	1
>4733	PrimaryExpression	2
>4734	Identifier	n
>4735	PrimaryExpression	1.0f
>4736	Identifier	scale
>4737	Identifier	scale
>4738	IdentifierDeclType	float
>4739	IdentifierDeclStatement	 
>4740	IdentifierDecl	n = ( last_residual - first_residual )
>4741	AssignmentExpr	n = ( last_residual - first_residual )
>4742	AdditiveExpression	last_residual - first_residual
>4743	Identifier	first_residual
>4744	Identifier	last_residual
>4745	Identifier	n
>4746	Identifier	n
>4747	IdentifierDeclType	size_t
>4748	IdentifierDeclStatement	 
>4749	IdentifierDecl	w_it = first_weight
>4750	AssignmentExpr	w_it = first_weight
>4751	Identifier	first_weight
>4752	Identifier	first_weight
>4753	Identifier	w_it
>4754	IdentifierDeclType	WeightIterator
>4755	IdentifierDeclStatement	 
>4756	IdentifierDecl	lr = last_residual - ( ( last_residual - first_residual ) % 2 )
>4757	AssignmentExpr	lr = last_residual - ( ( last_residual - first_residual ) % 2 )
>4758	AdditiveExpression	last_residual - ( ( last_residual - first_residual ) % 2 )
>4759	MultiplicativeExpression	( last_residual - first_residual ) % 2
>4760	PrimaryExpression	2
>4761	AdditiveExpression	last_residual - first_residual
>4762	Identifier	first_residual
>4763	Identifier	last_residual
>4764	Identifier	last_residual
>4765	Identifier	lr
>4766	Identifier	lr
>4767	IdentifierDeclType	const ResidualIterator
>4808	FunctionDef	computeWeight (const Eigen 
>4809	ParameterList	const Eigen 
>4810	Parameter	 
>4811	Identifier	precision
>4812	ParameterType	const Eigen 
>4813	Parameter	 
>4814	Identifier	mean
>4815	ParameterType	const Eigen 
>4816	Parameter	 
>4817	Identifier	r
>4818	ParameterType	const Eigen 
>4819	ReturnType	static inline float
>4820	CompoundStatement	 
>4821	ReturnStatement	 
>4822	MultiplicativeExpression	( 2.0 + 5.0f ) / ( 5.0f + diff . transpose ( ) * precision * diff )
>4823	AdditiveExpression	5.0f + diff . transpose ( ) * precision * diff
>4824	MultiplicativeExpression	diff . transpose ( ) * precision * diff
>4825	MultiplicativeExpression	precision * diff
>4826	Identifier	diff
>4827	Identifier	precision
>4828	CallExpression	diff . transpose ( )
>4829	ArgumentList	 
>4830	Callee	diff . transpose
>4831	MemberAccess	diff . transpose
>4832	Identifier	transpose
>4833	Identifier	diff
>4834	PrimaryExpression	5.0f
>4835	AdditiveExpression	2.0 + 5.0f
>4836	PrimaryExpression	5.0f
>4837	PrimaryExpression	2.0
>4838	IdentifierDeclStatement	 
>4839	IdentifierDecl	diff = r - mean
>4840	AssignmentExpr	diff = r - mean
>4841	AdditiveExpression	r - mean
>4842	Identifier	mean
>4843	Identifier	r
>4844	Identifier	diff
>4845	Identifier	diff
>4846	IdentifierDeclType	Eigen 
>4855	FunctionDef	computeWeights (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & \
>4856	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>4857	Parameter	 
>4858	Identifier	precision
>4859	ParameterType	const Eigen 
>4860	Parameter	 
>4861	Identifier	mean
>4862	ParameterType	const Eigen 
>4863	Parameter	 
>4864	Identifier	first_weight
>4865	ParameterType	const WeightIterator &
>4866	Parameter	 
>4867	Identifier	last_residual
>4868	ParameterType	const ResidualIterator &
>4869	Parameter	 
>4870	Identifier	first_residual
>4871	ParameterType	const ResidualIterator &
>4872	ReturnType	void
>4873	CompoundStatement	 
>4874	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != last_residual ; ++ err_it , ++ w_it )
>4875	CompoundStatement	 
>4876	ExpressionStatement	 
>4877	AssignmentExpr	* w_it = computeWeight ( * err_it , mean , precision )
>4878	CallExpression	computeWeight ( * err_it , mean , precision )
>4879	ArgumentList	* err_it
>4880	Argument	precision
>4881	Identifier	precision
>4882	Argument	mean
>4883	Identifier	mean
>4884	Argument	* err_it
>4885	UnaryOp	* err_it
>4886	Identifier	err_it
>4887	UnaryOperator	*
>4888	Callee	computeWeight
>4889	Identifier	computeWeight
>4890	UnaryOp	* w_it
>4891	Identifier	w_it
>4892	UnaryOperator	*
>4893	Expression	 
>4894	UnaryExpression	++ w_it
>4895	Identifier	w_it
>4896	IncDec	++
>4897	UnaryExpression	++ err_it
>4898	Identifier	err_it
>4899	IncDec	++
>4900	Condition	 
>4901	EqualityExpression	err_it != last_residual
>4902	Identifier	last_residual
>4903	Identifier	err_it
>4904	ForInit	 
>4905	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>4906	IdentifierDecl	err_it = first_residual
>4907	AssignmentExpr	err_it = first_residual
>4908	Identifier	first_residual
>4909	Identifier	first_residual
>4910	Identifier	err_it
>4911	IdentifierDeclType	ResidualIterator
>4912	IdentifierDeclStatement	 
>4913	IdentifierDecl	w_it = first_weight
>4914	AssignmentExpr	w_it = first_weight
>4915	Identifier	first_weight
>4916	Identifier	first_weight
>4917	Identifier	w_it
>4918	IdentifierDeclType	WeightIterator
>4919	IdentifierDeclStatement	 
>4920	IdentifierDecl	diff
>4921	Identifier	diff
>4922	IdentifierDeclType	Eigen 
>4937	FunctionDef	computeWeightsSse (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & \
>4938	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>4939	Parameter	 
>4940	Identifier	precision
>4941	ParameterType	const Eigen 
>4942	Parameter	 
>4943	Identifier	mean
>4944	ParameterType	const Eigen 
>4945	Parameter	 
>4946	Identifier	first_weight
>4947	ParameterType	const WeightIterator &
>4948	Parameter	 
>4949	Identifier	last_residual
>4950	ParameterType	const ResidualIterator &
>4951	Parameter	 
>4952	Identifier	first_residual
>4953	ParameterType	const ResidualIterator &
>4954	ReturnType	void
>4955	CompoundStatement	 
>4956	ForStatement	for ( ResidualIterator err_it = lr ; err_it != last_residual ; ++ err_it , ++ w_ptr )
>4957	CompoundStatement	 
>4958	ExpressionStatement	 
>4959	AssignmentExpr	* w_ptr = computeWeight ( * err_it , mean , precision )
>4960	CallExpression	computeWeight ( * err_it , mean , precision )
>4961	ArgumentList	* err_it
>4962	Argument	precision
>4963	Identifier	precision
>4964	Argument	mean
>4965	Identifier	mean
>4966	Argument	* err_it
>4967	UnaryOp	* err_it
>4968	Identifier	err_it
>4969	UnaryOperator	*
>4970	Callee	computeWeight
>4971	Identifier	computeWeight
>4972	UnaryOp	* w_ptr
>4973	Identifier	w_ptr
>4974	UnaryOperator	*
>4975	Expression	 
>4976	UnaryExpression	++ w_ptr
>4977	Identifier	w_ptr
>4978	IncDec	++
>4979	UnaryExpression	++ err_it
>4980	Identifier	err_it
>4981	IncDec	++
>4982	Condition	 
>4983	EqualityExpression	err_it != last_residual
>4984	Identifier	last_residual
>4985	Identifier	err_it
>4986	ForInit	 
>4987	IdentifierDeclStatement	ResidualIterator err_it = lr ;
>4988	IdentifierDecl	err_it = lr
>4989	AssignmentExpr	err_it = lr
>4990	Identifier	lr
>4991	Identifier	lr
>4992	Identifier	err_it
>4993	IdentifierDeclType	ResidualIterator
>4994	ForStatement	for ( ResidualIterator err_it = first_residual ; err_it != lr ; err_it += 4 , w_ptr += 4 )
>4995	CompoundStatement	 
>4996	ExpressionStatement	 
>4997	CallExpression	_mm_store_ps ( w_ptr , _mm_mul_ps ( six , _mm_rcp_ps ( _mm_add_ps ( five , dist_r1r2r3r4 ) ) ) )
>4998	ArgumentList	w_ptr
>4999	Argument	_mm_mul_ps ( six , _mm_rcp_ps ( _mm_add_ps ( five , dist_r1r2r3r4 ) ) )
>5000	CallExpression	_mm_mul_ps ( six , _mm_rcp_ps ( _mm_add_ps ( five , dist_r1r2r3r4 ) ) )
>5001	ArgumentList	six
>5002	Argument	_mm_rcp_ps ( _mm_add_ps ( five , dist_r1r2r3r4 ) )
>5003	CallExpression	_mm_rcp_ps ( _mm_add_ps ( five , dist_r1r2r3r4 ) )
>5004	ArgumentList	_mm_add_ps ( five , dist_r1r2r3r4 )
>5005	Argument	_mm_add_ps ( five , dist_r1r2r3r4 )
>5006	CallExpression	_mm_add_ps ( five , dist_r1r2r3r4 )
>5007	ArgumentList	five
>5008	Argument	dist_r1r2r3r4
>5009	Identifier	dist_r1r2r3r4
>5010	Argument	five
>5011	Identifier	five
>5012	Callee	_mm_add_ps
>5013	Identifier	_mm_add_ps
>5014	Callee	_mm_rcp_ps
>5015	Identifier	_mm_rcp_ps
>5016	Argument	six
>5017	Identifier	six
>5018	Callee	_mm_mul_ps
>5019	Identifier	_mm_mul_ps
>5020	Argument	w_ptr
>5021	Identifier	w_ptr
>5022	Callee	_mm_store_ps
>5023	Identifier	_mm_store_ps
>5024	IdentifierDeclStatement	 
>5025	IdentifierDecl	dist_r1r2r3r4 = _mm_hadd_ps ( dist_r1r2 , dist_r3r4 )
>5026	AssignmentExpr	dist_r1r2r3r4 = _mm_hadd_ps ( dist_r1r2 , dist_r3r4 )
>5027	CallExpression	_mm_hadd_ps ( dist_r1r2 , dist_r3r4 )
>5028	ArgumentList	dist_r1r2
>5029	Argument	dist_r3r4
>5030	Identifier	dist_r3r4
>5031	Argument	dist_r1r2
>5032	Identifier	dist_r1r2
>5033	Callee	_mm_hadd_ps
>5034	Identifier	_mm_hadd_ps
>5035	Identifier	dist_r1r2r3r4
>5036	Identifier	dist_r1r2r3r4
>5037	IdentifierDeclType	__m128
>5038	IdentifierDeclStatement	 
>5039	IdentifierDecl	dist_r3r4 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) ) , diff_\
>5040	AssignmentExpr	dist_r3r4 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) ) , \
>5041	CallExpression	_mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) ) , diff_r3r4 )
>5042	ArgumentList	_mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) )
>5043	Argument	diff_r3r4
>5044	Identifier	diff_r3r4
>5045	Argument	_mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) )
>5046	CallExpression	_mm_hadd_ps ( _mm_mul_ps ( diff_r3r3 , prec ) , _mm_mul_ps ( diff_r4r4 , prec ) )
>5047	ArgumentList	_mm_mul_ps ( diff_r3r3 , prec )
>5048	Argument	_mm_mul_ps ( diff_r4r4 , prec )
>5049	CallExpression	_mm_mul_ps ( diff_r4r4 , prec )
>5050	ArgumentList	diff_r4r4
>5051	Argument	prec
>5052	Identifier	prec
>5053	Argument	diff_r4r4
>5054	Identifier	diff_r4r4
>5055	Callee	_mm_mul_ps
>5056	Identifier	_mm_mul_ps
>5057	Argument	_mm_mul_ps ( diff_r3r3 , prec )
>5058	CallExpression	_mm_mul_ps ( diff_r3r3 , prec )
>5059	ArgumentList	diff_r3r3
>5060	Argument	prec
>5061	Identifier	prec
>5062	Argument	diff_r3r3
>5063	Identifier	diff_r3r3
>5064	Callee	_mm_mul_ps
>5065	Identifier	_mm_mul_ps
>5066	Callee	_mm_hadd_ps
>5067	Identifier	_mm_hadd_ps
>5068	Callee	_mm_mul_ps
>5069	Identifier	_mm_mul_ps
>5070	Identifier	dist_r3r4
>5071	Identifier	dist_r3r4
>5072	IdentifierDeclType	__m128
>5073	IdentifierDeclStatement	 
>5074	IdentifierDecl	diff_r4r4 = _mm_movehl_ps ( diff_r3r4 , diff_r3r4 )
>5075	AssignmentExpr	diff_r4r4 = _mm_movehl_ps ( diff_r3r4 , diff_r3r4 )
>5076	CallExpression	_mm_movehl_ps ( diff_r3r4 , diff_r3r4 )
>5077	ArgumentList	diff_r3r4
>5078	Argument	diff_r3r4
>5079	Identifier	diff_r3r4
>5080	Argument	diff_r3r4
>5081	Identifier	diff_r3r4
>5082	Callee	_mm_movehl_ps
>5083	Identifier	_mm_movehl_ps
>5084	Identifier	diff_r4r4
>5085	Identifier	diff_r4r4
>5086	IdentifierDeclType	__m128
>5087	IdentifierDeclStatement	 
>5088	IdentifierDecl	diff_r3r3 = _mm_movelh_ps ( diff_r3r4 , diff_r3r4 )
>5089	AssignmentExpr	diff_r3r3 = _mm_movelh_ps ( diff_r3r4 , diff_r3r4 )
>5090	CallExpression	_mm_movelh_ps ( diff_r3r4 , diff_r3r4 )
>5091	ArgumentList	diff_r3r4
>5092	Argument	diff_r3r4
>5093	Identifier	diff_r3r4
>5094	Argument	diff_r3r4
>5095	Identifier	diff_r3r4
>5096	Callee	_mm_movelh_ps
>5097	Identifier	_mm_movelh_ps
>5098	Identifier	diff_r3r3
>5099	Identifier	diff_r3r3
>5100	IdentifierDeclType	__m128
>5101	IdentifierDeclStatement	 
>5102	IdentifierDecl	diff_r3r4 = _mm_sub_ps ( r3r4 , mean2 )
>5103	AssignmentExpr	diff_r3r4 = _mm_sub_ps ( r3r4 , mean2 )
>5104	CallExpression	_mm_sub_ps ( r3r4 , mean2 )
>5105	ArgumentList	r3r4
>5106	Argument	mean2
>5107	Identifier	mean2
>5108	Argument	r3r4
>5109	Identifier	r3r4
>5110	Callee	_mm_sub_ps
>5111	Identifier	_mm_sub_ps
>5112	Identifier	diff_r3r4
>5113	Identifier	diff_r3r4
>5114	IdentifierDeclType	__m128
>5115	IdentifierDeclStatement	 
>5116	IdentifierDecl	r3r4 = _mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>5117	AssignmentExpr	r3r4 = _mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>5118	CallExpression	_mm_load_ps ( ( err_it + 2 ) -> data ( ) )
>5119	ArgumentList	( err_it + 2 ) -> data ( )
>5120	Argument	( err_it + 2 ) -> data ( )
>5121	CallExpression	( err_it + 2 ) -> data ( )
>5122	ArgumentList	 
>5123	Callee	( err_it + 2 ) -> data
>5124	PtrMemberAccess	( err_it + 2 ) -> data
>5125	Identifier	data
>5126	AdditiveExpression	err_it + 2
>5127	PrimaryExpression	2
>5128	Identifier	err_it
>5129	Callee	_mm_load_ps
>5130	Identifier	_mm_load_ps
>5131	Identifier	r3r4
>5132	Identifier	r3r4
>5133	IdentifierDeclType	__m128
>5134	IdentifierDeclStatement	 
>5135	IdentifierDecl	dist_r1r2 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) ) , diff_\
>5136	AssignmentExpr	dist_r1r2 = _mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) ) , \
>5137	CallExpression	_mm_mul_ps ( _mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) ) , diff_r1r2 )
>5138	ArgumentList	_mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) )
>5139	Argument	diff_r1r2
>5140	Identifier	diff_r1r2
>5141	Argument	_mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) )
>5142	CallExpression	_mm_hadd_ps ( _mm_mul_ps ( diff_r1r1 , prec ) , _mm_mul_ps ( diff_r2r2 , prec ) )
>5143	ArgumentList	_mm_mul_ps ( diff_r1r1 , prec )
>5144	Argument	_mm_mul_ps ( diff_r2r2 , prec )
>5145	CallExpression	_mm_mul_ps ( diff_r2r2 , prec )
>5146	ArgumentList	diff_r2r2
>5147	Argument	prec
>5148	Identifier	prec
>5149	Argument	diff_r2r2
>5150	Identifier	diff_r2r2
>5151	Callee	_mm_mul_ps
>5152	Identifier	_mm_mul_ps
>5153	Argument	_mm_mul_ps ( diff_r1r1 , prec )
>5154	CallExpression	_mm_mul_ps ( diff_r1r1 , prec )
>5155	ArgumentList	diff_r1r1
>5156	Argument	prec
>5157	Identifier	prec
>5158	Argument	diff_r1r1
>5159	Identifier	diff_r1r1
>5160	Callee	_mm_mul_ps
>5161	Identifier	_mm_mul_ps
>5162	Callee	_mm_hadd_ps
>5163	Identifier	_mm_hadd_ps
>5164	Callee	_mm_mul_ps
>5165	Identifier	_mm_mul_ps
>5166	Identifier	dist_r1r2
>5167	Identifier	dist_r1r2
>5168	IdentifierDeclType	__m128
>5169	IdentifierDeclStatement	 
>5170	IdentifierDecl	diff_r2r2 = _mm_movehl_ps ( diff_r1r2 , diff_r1r2 )
>5171	AssignmentExpr	diff_r2r2 = _mm_movehl_ps ( diff_r1r2 , diff_r1r2 )
>5172	CallExpression	_mm_movehl_ps ( diff_r1r2 , diff_r1r2 )
>5173	ArgumentList	diff_r1r2
>5174	Argument	diff_r1r2
>5175	Identifier	diff_r1r2
>5176	Argument	diff_r1r2
>5177	Identifier	diff_r1r2
>5178	Callee	_mm_movehl_ps
>5179	Identifier	_mm_movehl_ps
>5180	Identifier	diff_r2r2
>5181	Identifier	diff_r2r2
>5182	IdentifierDeclType	__m128
>5183	IdentifierDeclStatement	 
>5184	IdentifierDecl	diff_r1r1 = _mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>5185	AssignmentExpr	diff_r1r1 = _mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>5186	CallExpression	_mm_movelh_ps ( diff_r1r2 , diff_r1r2 )
>5187	ArgumentList	diff_r1r2
>5188	Argument	diff_r1r2
>5189	Identifier	diff_r1r2
>5190	Argument	diff_r1r2
>5191	Identifier	diff_r1r2
>5192	Callee	_mm_movelh_ps
>5193	Identifier	_mm_movelh_ps
>5194	Identifier	diff_r1r1
>5195	Identifier	diff_r1r1
>5196	IdentifierDeclType	__m128
>5197	IdentifierDeclStatement	 
>5198	IdentifierDecl	diff_r1r2 = _mm_sub_ps ( r1r2 , mean2 )
>5199	AssignmentExpr	diff_r1r2 = _mm_sub_ps ( r1r2 , mean2 )
>5200	CallExpression	_mm_sub_ps ( r1r2 , mean2 )
>5201	ArgumentList	r1r2
>5202	Argument	mean2
>5203	Identifier	mean2
>5204	Argument	r1r2
>5205	Identifier	r1r2
>5206	Callee	_mm_sub_ps
>5207	Identifier	_mm_sub_ps
>5208	Identifier	diff_r1r2
>5209	Identifier	diff_r1r2
>5210	IdentifierDeclType	__m128
>5211	IdentifierDeclStatement	 
>5212	IdentifierDecl	r1r2 = _mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>5213	AssignmentExpr	r1r2 = _mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>5214	CallExpression	_mm_load_ps ( ( err_it + 0 ) -> data ( ) )
>5215	ArgumentList	( err_it + 0 ) -> data ( )
>5216	Argument	( err_it + 0 ) -> data ( )
>5217	CallExpression	( err_it + 0 ) -> data ( )
>5218	ArgumentList	 
>5219	Callee	( err_it + 0 ) -> data
>5220	PtrMemberAccess	( err_it + 0 ) -> data
>5221	Identifier	data
>5222	AdditiveExpression	err_it + 0
>5223	PrimaryExpression	0
>5224	Identifier	err_it
>5225	Callee	_mm_load_ps
>5226	Identifier	_mm_load_ps
>5227	Identifier	r1r2
>5228	Identifier	r1r2
>5229	IdentifierDeclType	__m128
>5230	Expression	 
>5231	AssignmentExpr	w_ptr += 4
>5232	PrimaryExpression	4
>5233	Identifier	w_ptr
>5234	AssignmentExpr	err_it += 4
>5235	PrimaryExpression	4
>5236	Identifier	err_it
>5237	Condition	 
>5238	EqualityExpression	err_it != lr
>5239	Identifier	lr
>5240	Identifier	err_it
>5241	ForInit	 
>5242	IdentifierDeclStatement	ResidualIterator err_it = first_residual ;
>5243	IdentifierDecl	err_it = first_residual
>5244	AssignmentExpr	err_it = first_residual
>5245	Identifier	first_residual
>5246	Identifier	first_residual
>5247	Identifier	err_it
>5248	IdentifierDeclType	ResidualIterator
>5249	IdentifierDeclStatement	 
>5250	IdentifierDecl	six = _mm_set1_ps ( 7.0f )
>5251	AssignmentExpr	six = _mm_set1_ps ( 7.0f )
>5252	CallExpression	_mm_set1_ps ( 7.0f )
>5253	ArgumentList	7.0f
>5254	Argument	7.0f
>5255	PrimaryExpression	7.0f
>5256	Callee	_mm_set1_ps
>5257	Identifier	_mm_set1_ps
>5258	Identifier	six
>5259	Identifier	six
>5260	IdentifierDeclType	__m128
>5261	IdentifierDeclStatement	 
>5262	IdentifierDecl	five = _mm_set1_ps ( 5.0f )
>5263	AssignmentExpr	five = _mm_set1_ps ( 5.0f )
>5264	CallExpression	_mm_set1_ps ( 5.0f )
>5265	ArgumentList	5.0f
>5266	Argument	5.0f
>5267	PrimaryExpression	5.0f
>5268	Callee	_mm_set1_ps
>5269	Identifier	_mm_set1_ps
>5270	Identifier	five
>5271	Identifier	five
>5272	IdentifierDeclType	__m128
>5273	IdentifierDeclStatement	 
>5274	IdentifierDecl	mean2 = _mm_setr_ps ( mean ( 0 ) , mean ( 1 ) , mean ( 0 ) , mean ( 1 ) )
>5275	AssignmentExpr	mean2 = _mm_setr_ps ( mean ( 0 ) , mean ( 1 ) , mean ( 0 ) , mean ( 1 ) )
>5276	CallExpression	_mm_setr_ps ( mean ( 0 ) , mean ( 1 ) , mean ( 0 ) , mean ( 1 ) )
>5277	ArgumentList	mean ( 0 )
>5278	Argument	mean ( 1 )
>5279	CallExpression	mean ( 1 )
>5280	ArgumentList	1
>5281	Argument	1
>5282	PrimaryExpression	1
>5283	Callee	mean
>5284	Identifier	mean
>5285	Argument	mean ( 0 )
>5286	CallExpression	mean ( 0 )
>5287	ArgumentList	0
>5288	Argument	0
>5289	PrimaryExpression	0
>5290	Callee	mean
>5291	Identifier	mean
>5292	Argument	mean ( 1 )
>5293	CallExpression	mean ( 1 )
>5294	ArgumentList	1
>5295	Argument	1
>5296	PrimaryExpression	1
>5297	Callee	mean
>5298	Identifier	mean
>5299	Argument	mean ( 0 )
>5300	CallExpression	mean ( 0 )
>5301	ArgumentList	0
>5302	Argument	0
>5303	PrimaryExpression	0
>5304	Callee	mean
>5305	Identifier	mean
>5306	Callee	_mm_setr_ps
>5307	Identifier	_mm_setr_ps
>5308	Identifier	mean2
>5309	Identifier	mean2
>5310	IdentifierDeclType	__m128
>5311	IdentifierDeclStatement	 
>5312	IdentifierDecl	prec = _mm_load_ps ( precision . data ( ) )
>5313	AssignmentExpr	prec = _mm_load_ps ( precision . data ( ) )
>5314	CallExpression	_mm_load_ps ( precision . data ( ) )
>5315	ArgumentList	precision . data ( )
>5316	Argument	precision . data ( )
>5317	CallExpression	precision . data ( )
>5318	ArgumentList	 
>5319	Callee	precision . data
>5320	MemberAccess	precision . data
>5321	Identifier	data
>5322	Identifier	precision
>5323	Callee	_mm_load_ps
>5324	Identifier	_mm_load_ps
>5325	Identifier	prec
>5326	Identifier	prec
>5327	IdentifierDeclType	__m128
>5328	IdentifierDeclStatement	 
>5329	IdentifierDecl	lr = last_residual - ( ( last_residual - first_residual ) % 4 )
>5330	AssignmentExpr	lr = last_residual - ( ( last_residual - first_residual ) % 4 )
>5331	AdditiveExpression	last_residual - ( ( last_residual - first_residual ) % 4 )
>5332	MultiplicativeExpression	( last_residual - first_residual ) % 4
>5333	PrimaryExpression	4
>5334	AdditiveExpression	last_residual - first_residual
>5335	Identifier	first_residual
>5336	Identifier	last_residual
>5337	Identifier	last_residual
>5338	Identifier	lr
>5339	Identifier	lr
>5340	IdentifierDeclType	const ResidualIterator
>5341	IdentifierDeclStatement	 
>5342	IdentifierDecl	* w_ptr = & ( * first_weight )
>5343	AssignmentExpr	* w_ptr = & ( * first_weight )
>5344	UnaryOp	& ( * first_weight )
>5345	UnaryOp	* first_weight
>5346	Identifier	first_weight
>5347	UnaryOperator	*
>5348	UnaryOperator	&
>5349	Identifier	w_ptr
>5350	Identifier	w_ptr
>5351	IdentifierDeclType	float *
>5395	FunctionDef	computeMeanScaleAndWeights (const ResidualIterator & first_residual , const ResidualIterator & last_residual , const \
>5396	ParameterList	const ResidualIterator & first_residual , const ResidualIterator & last_residual , const WeightIterator & first_\
>5397	Parameter	 
>5398	Identifier	precision
>5399	ParameterType	Eigen 
>5400	Parameter	 
>5401	Identifier	mean
>5402	ParameterType	Eigen 
>5403	Parameter	 
>5404	Identifier	first_weight
>5405	ParameterType	const WeightIterator &
>5406	Parameter	 
>5407	Identifier	last_residual
>5408	ParameterType	const ResidualIterator &
>5409	Parameter	 
>5410	Identifier	first_residual
>5411	ParameterType	const ResidualIterator &
>5412	ReturnType	void
>5413	CompoundStatement	 
>5414	DoStatement	do
>5415	Condition	 
>5416	AndExpression	convergence_criterion >= 1e-3 && iterations < 50
>5417	RelationalExpression	iterations < 50
>5418	PrimaryExpression	50
>5419	Identifier	iterations
>5420	RelationalExpression	convergence_criterion >= 1e-3
>5421	PrimaryExpression	1e-3
>5422	Identifier	convergence_criterion
>5423	CompoundStatement	 
>5424	ExpressionStatement	 
>5425	AssignmentExpr	iterations += 1
>5426	PrimaryExpression	1
>5427	Identifier	iterations
>5428	ExpressionStatement	 
>5429	Statement	 
>5430	Statement	 
>5431	Statement	 
>5432	Statement	 
>5433	Statement	 
>5434	Statement	 
>5435	Statement	 
>5436	Statement	 
>5437	Statement	 
>5438	Statement	 
>5439	Statement	 
>5440	Statement	 
>5441	Statement	 
>5442	Statement	 
>5443	Statement	 
>5444	Statement	 
>5445	ExpressionStatement	 
>5446	CallExpression	computeWeightsSse ( first_residual , last_residual , first_weight , mean , precision )
>5447	ArgumentList	first_residual
>5448	Argument	precision
>5449	Identifier	precision
>5450	Argument	mean
>5451	Identifier	mean
>5452	Argument	first_weight
>5453	Identifier	first_weight
>5454	Argument	last_residual
>5455	Identifier	last_residual
>5456	Argument	first_residual
>5457	Identifier	first_residual
>5458	Callee	computeWeightsSse
>5459	Identifier	computeWeightsSse
>5460	ExpressionStatement	 
>5461	AssignmentExpr	precision = S2 . inverse ( )
>5462	CallExpression	S2 . inverse ( )
>5463	ArgumentList	 
>5464	Callee	S2 . inverse
>5465	MemberAccess	S2 . inverse
>5466	Identifier	inverse
>5467	Identifier	S2
>5468	Identifier	precision
>5469	IdentifierDeclStatement	 
>5470	IdentifierDecl	S2 = computeScaleSse ( first_residual , last_residual , first_weight , mean )
>5471	AssignmentExpr	S2 = computeScaleSse ( first_residual , last_residual , first_weight , mean )
>5472	CallExpression	computeScaleSse ( first_residual , last_residual , first_weight , mean )
>5473	ArgumentList	first_residual
>5474	Argument	mean
>5475	Identifier	mean
>5476	Argument	first_weight
>5477	Identifier	first_weight
>5478	Argument	last_residual
>5479	Identifier	last_residual
>5480	Argument	first_residual
>5481	Identifier	first_residual
>5482	Callee	computeScaleSse
>5483	Identifier	computeScaleSse
>5484	Identifier	S2
>5485	Identifier	S2
>5486	IdentifierDeclType	Eigen 
>5487	ExpressionStatement	 
>5488	AssignmentExpr	last_precision = precision
>5489	Identifier	precision
>5490	Identifier	last_precision
>5491	IdentifierDeclStatement	 
>5492	IdentifierDecl	convergence_criterion = 1.0f
>5493	AssignmentExpr	convergence_criterion = 1.0f
>5494	PrimaryExpression	1.0f
>5495	Identifier	convergence_criterion
>5496	Identifier	convergence_criterion
>5497	IdentifierDeclType	float
>5498	IdentifierDeclStatement	 
>5499	IdentifierDecl	iterations = 0
>5500	AssignmentExpr	iterations = 0
>5501	PrimaryExpression	0
>5502	Identifier	iterations
>5503	Identifier	iterations
>5504	IdentifierDeclType	int
>5505	ExpressionStatement	 
>5506	CallExpression	std 
>5507	ArgumentList	first_weight
>5508	Argument	1.0f
>5509	PrimaryExpression	1.0f
>5510	Argument	first_weight + n
>5511	AdditiveExpression	first_weight + n
>5512	Identifier	n
>5513	Identifier	first_weight
>5514	Argument	first_weight
>5515	Identifier	first_weight
>5516	Callee	std 
>5517	Identifier	std 
>5518	IdentifierDeclStatement	 
>5519	IdentifierDecl	n = ( last_residual - first_residual )
>5520	AssignmentExpr	n = ( last_residual - first_residual )
>5521	AdditiveExpression	last_residual - first_residual
>5522	Identifier	first_residual
>5523	Identifier	last_residual
>5524	Identifier	n
>5525	Identifier	n
>5526	IdentifierDeclType	size_t
>5527	IdentifierDeclStatement	 
>5528	IdentifierDecl	last_precision
>5529	Identifier	last_precision
>5530	IdentifierDeclType	Eigen 
>5531	IdentifierDeclStatement	 
>5532	IdentifierDecl	converged = false
>5533	AssignmentExpr	converged = false
>5534	Identifier	false
>5535	Identifier	false
>5536	Identifier	converged
>5537	IdentifierDeclType	bool
<3=30,29,4
<4=26,23,20,17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<20=22,21
<23=25,24
<26=28,27
<30=551,543,539,499,470,466,457,456,455,454,453,452,451,450,449,448,447,442,31
<31=434,430,427,32
<32=426,425,424,423,422,421,420,419,418,409,390,371,339,327,315,302,296,290,284,278,251,222,217,210,205,198,173,129,113,101,87,60,45,39,33
<33=34
<34=38,35
<35=37,36
<39=40
<40=44,41
<41=43,42
<45=46
<46=55,47
<47=49,48
<49=50
<50=52,51
<52=54,53
<55=59,56
<56=58,57
<60=61
<61=79,62
<62=71,63
<63=67,64
<64=65
<65=66
<67=68
<68=70,69
<71=75,72
<72=73
<73=74
<75=76
<76=78,77
<79=81,80
<81=82
<82=84,83
<84=86,85
<87=88
<88=95,89
<89=93,90
<90=91
<91=92
<93=94
<95=99,96
<96=97
<97=98
<99=100
<101=102
<102=112,111,103
<103=110,104
<104=106,105
<106=107
<107=109,108
<113=114
<114=121,115
<115=117,116
<117=118
<118=120,119
<121=123,122
<123=124
<124=126,125
<126=128,127
<129=131,130
<131=132
<132=160,133
<133=147,134
<134=146,135
<135=144,136
<136=137
<137=138
<138=142,139
<139=140
<140=141
<142=143
<144=145
<147=159,148
<148=157,149
<149=150
<150=151
<151=155,152
<152=153
<153=154
<155=156
<157=158
<160=172,161
<161=170,162
<162=163
<163=164
<164=168,165
<165=166
<166=167
<168=169
<170=171
<173=174
<174=197,196,175
<175=195,176
<176=186,177
<177=179,178
<179=183,180
<180=182,181
<183=185,184
<186=188,187
<188=192,189
<189=191,190
<192=194,193
<198=199
<199=204,203,200
<200=202,201
<205=206
<206=209,208,207
<210=211
<211=216,215,212
<212=214,213
<217=218
<218=221,220,219
<222=223
<223=250,249,224
<224=248,225
<225=243,226
<226=242,227
<227=234,228
<228=232,229
<229=230
<230=231
<232=233
<234=240,235
<235=236
<236=237
<237=239,238
<240=241
<243=245,244
<245=247,246
<251=252
<252=277,276,253
<253=275,254
<254=270,255
<255=269,256
<256=263,257
<257=261,258
<258=259
<259=260
<261=262
<263=267,264
<264=265
<265=266
<267=268
<270=272,271
<272=274,273
<278=279
<279=283,280
<280=282,281
<284=285
<285=289,286
<286=288,287
<290=291
<291=295,292
<292=294,293
<296=297
<297=301,298
<298=300,299
<302=312,309,306,303
<303=305,304
<306=308,307
<309=311,310
<312=314,313
<315=316
<316=326,325,317
<317=324,318
<318=322,319
<319=320
<320=321
<322=323
<327=328
<328=338,337,329
<329=336,330
<330=334,331
<331=332
<332=333
<334=335
<339=341,340
<341=342
<342=359,343
<343=358,344
<344=354,345
<345=350,346
<346=347
<347=349,348
<350=351
<351=353,352
<354=355
<355=357,356
<359=370,360
<360=366,361
<361=364,362
<362=363
<364=365
<366=367
<367=369,368
<371=372
<372=389,388,373
<373=387,374
<374=381,375
<375=379,376
<376=377
<377=378
<379=380
<381=385,382
<382=383
<383=384
<385=386
<390=391
<391=408,407,392
<392=406,393
<393=400,394
<394=398,395
<395=396
<396=397
<398=399
<400=404,401
<401=402
<402=403
<404=405
<409=410
<410=417,411
<411=413,412
<413=414
<414=416,415
<427=429,428
<430=431
<431=433,432
<434=435
<435=436
<436=441,440,437
<437=439,438
<442=443
<443=445,444
<445=446
<457=458
<458=462,459
<459=460
<460=461
<462=463
<463=465,464
<466=467
<467=469,468
<470=471
<471=496,472
<472=495,473
<473=479,474
<474=478,475
<475=477,476
<479=492,480
<480=482,481
<482=491,483
<483=485,484
<485=487,486
<487=488
<488=490,489
<492=494,493
<496=498,497
<499=500
<500=531,501
<501=530,502
<502=524,503
<503=523,504
<504=517,505
<505=511,506
<506=510,507
<507=509,508
<511=513,512
<513=514
<514=516,515
<517=519,518
<519=520
<520=522,521
<524=526,525
<526=527
<527=529,528
<531=538,532
<532=534,533
<534=535
<535=537,536
<539=540
<540=542,541
<543=544
<544=548,545
<545=547,546
<548=550,549
<551=552
<552=556,553
<553=555,554
<556=558,557
<614=620,619,615
<615=616
<616=618,617
<620=633,623,621
<621=622
<623=624
<624=632,625
<625=631,626
<626=630,627
<627=629,628
<633=634
<634=641,640,635
<635=639,636
<636=638,637
<651=678,677,652
<652=674,671,668,665,662,659,656,653
<653=655,654
<656=658,657
<659=661,660
<662=664,663
<665=667,666
<668=670,669
<671=673,672
<674=676,675
<678=2744,2736,2725,2721,2681,2652,2606,2560,2514,2497,2478,2461,2442,2430,2396,2391,2381,2369,2350,691,679
<679=687,680
<680=681
<681=685,682
<682=683
<683=684
<685=686
<687=688
<688=690,689
<691=2342,2338,2335,692
<692=2317,2299,2285,2271,2257,2243,2229,2215,2187,2159,2140,2128,2116,2102,2088,2055,2044,2024,1381,1372,1352,702,693
<693=700,694
<694=695
<695=699,696
<696=698,697
<700=701
<702=1346,703
<703=1325,1302,1293,1279,1265,1251,1237,1223,1209,1160,1111,1062,1013,999,985,966,722,704
<704=720,705
<705=706
<706=715,707
<707=713,708
<708=709
<709=710
<710=712,711
<713=714
<715=719,716
<716=718,717
<720=721
<722=962,723
<723=947,929,897,869,852,724
<724=827,731,725
<725=726
<726=727
<727=728
<728=730,729
<731=809,789,761,744,738,732
<732=733
<733=737,734
<734=736,735
<738=739
<739=743,740
<740=742,741
<744=745
<745=759,746
<746=749,747
<747=748
<749=750
<750=752,751
<752=754,753
<754=756,755
<756=758,757
<759=760
<761=762
<762=788,787,763
<763=786,764
<764=784,765
<765=775,766
<766=767
<767=773,768
<768=771,769
<769=770
<771=772
<773=774
<775=776
<776=782,777
<777=780,778
<778=779
<780=781
<782=783
<784=785
<789=790
<790=808,807,791
<791=806,792
<792=804,793
<793=794
<794=795
<795=797,796
<797=799,798
<799=801,800
<801=803,802
<804=805
<809=810
<810=825,811
<811=814,812
<812=813
<814=815
<815=824,816
<816=818,817
<818=819
<819=821,820
<821=823,822
<825=826
<827=828
<828=845,829
<829=842,830
<830=840,831
<831=832
<832=833
<833=835,834
<835=837,836
<837=839,838
<840=841
<842=844,843
<845=847,846
<847=849,848
<849=851,850
<852=853
<853=867,854
<854=857,855
<855=856
<857=858
<858=860,859
<860=862,861
<862=864,863
<864=866,865
<867=868
<869=870
<870=896,895,871
<871=894,872
<872=892,873
<873=883,874
<874=875
<875=881,876
<876=879,877
<877=878
<879=880
<881=882
<883=884
<884=890,885
<885=888,886
<886=887
<888=889
<890=891
<892=893
<897=898
<898=928,899
<899=926,900
<900=910,901
<901=902
<902=908,903
<903=906,904
<904=905
<906=907
<908=909
<910=911
<911=924,912
<912=922,913
<913=914
<914=920,915
<915=918,916
<916=917
<918=919
<920=921
<922=923
<924=925
<926=927
<929=930
<930=946,945,931
<931=944,932
<932=942,933
<933=934
<934=935
<935=937,936
<937=939,938
<939=941,940
<942=943
<947=948
<948=960,949
<949=952,950
<950=951
<952=953
<953=955,954
<955=957,956
<957=959,958
<960=961
<962=963
<963=965,964
<966=967
<967=984,983,968
<968=982,969
<969=980,970
<970=971
<971=972
<972=978,973
<973=976,974
<974=975
<976=977
<978=979
<980=981
<985=986
<986=998,997,987
<987=996,988
<988=994,989
<989=992,990
<990=991
<992=993
<994=995
<999=1000
<1000=1012,1011,1001
<1001=1010,1002
<1002=1008,1003
<1003=1006,1004
<1004=1005
<1006=1007
<1008=1009
<1013=1014
<1014=1061,1060,1015
<1015=1059,1016
<1016=1057,1017
<1017=1055,1018
<1018=1019
<1019=1053,1020
<1020=1037,1021
<1021=1022
<1022=1035,1023
<1023=1033,1024
<1024=1025
<1025=1031,1026
<1026=1027
<1027=1028
<1028=1030,1029
<1031=1032
<1033=1034
<1035=1036
<1037=1038
<1038=1051,1039
<1039=1049,1040
<1040=1041
<1041=1047,1042
<1042=1043
<1043=1044
<1044=1046,1045
<1047=1048
<1049=1050
<1051=1052
<1053=1054
<1055=1056
<1057=1058
<1062=1063
<1063=1110,1109,1064
<1064=1108,1065
<1065=1106,1066
<1066=1104,1067
<1067=1068
<1068=1102,1069
<1069=1086,1070
<1070=1071
<1071=1084,1072
<1072=1082,1073
<1073=1074
<1074=1080,1075
<1075=1076
<1076=1077
<1077=1079,1078
<1080=1081
<1082=1083
<1084=1085
<1086=1087
<1087=1100,1088
<1088=1098,1089
<1089=1090
<1090=1096,1091
<1091=1092
<1092=1093
<1093=1095,1094
<1096=1097
<1098=1099
<1100=1101
<1102=1103
<1104=1105
<1106=1107
<1111=1112
<1112=1159,1158,1113
<1113=1157,1114
<1114=1155,1115
<1115=1153,1116
<1116=1117
<1117=1151,1118
<1118=1135,1119
<1119=1120
<1120=1133,1121
<1121=1131,1122
<1122=1123
<1123=1129,1124
<1124=1125
<1125=1126
<1126=1128,1127
<1129=1130
<1131=1132
<1133=1134
<1135=1136
<1136=1149,1137
<1137=1147,1138
<1138=1139
<1139=1145,1140
<1140=1141
<1141=1142
<1142=1144,1143
<1145=1146
<1147=1148
<1149=1150
<1151=1152
<1153=1154
<1155=1156
<1160=1161
<1161=1208,1207,1162
<1162=1206,1163
<1163=1204,1164
<1164=1202,1165
<1165=1166
<1166=1200,1167
<1167=1184,1168
<1168=1169
<1169=1182,1170
<1170=1180,1171
<1171=1172
<1172=1178,1173
<1173=1174
<1174=1175
<1175=1177,1176
<1178=1179
<1180=1181
<1182=1183
<1184=1185
<1185=1198,1186
<1186=1196,1187
<1187=1188
<1188=1194,1189
<1189=1190
<1190=1191
<1191=1193,1192
<1194=1195
<1196=1197
<1198=1199
<1200=1201
<1202=1203
<1204=1205
<1209=1210
<1210=1222,1221,1211
<1211=1220,1212
<1212=1218,1213
<1213=1216,1214
<1214=1215
<1216=1217
<1218=1219
<1223=1224
<1224=1236,1235,1225
<1225=1234,1226
<1226=1232,1227
<1227=1230,1228
<1228=1229
<1230=1231
<1232=1233
<1237=1238
<1238=1250,1249,1239
<1239=1248,1240
<1240=1246,1241
<1241=1244,1242
<1242=1243
<1244=1245
<1246=1247
<1251=1252
<1252=1264,1263,1253
<1253=1262,1254
<1254=1260,1255
<1255=1258,1256
<1256=1257
<1258=1259
<1260=1261
<1265=1266
<1266=1278,1277,1267
<1267=1276,1268
<1268=1274,1269
<1269=1272,1270
<1270=1271
<1272=1273
<1274=1275
<1279=1280
<1280=1292,1291,1281
<1281=1290,1282
<1282=1288,1283
<1283=1286,1284
<1284=1285
<1286=1287
<1288=1289
<1293=1294
<1294=1300,1295
<1295=1298,1296
<1296=1297
<1298=1299
<1300=1301
<1302=1303
<1303=1324,1323,1304
<1304=1322,1305
<1305=1317,1306
<1306=1316,1307
<1307=1311,1308
<1308=1310,1309
<1311=1313,1312
<1313=1315,1314
<1317=1319,1318
<1319=1321,1320
<1325=1326
<1326=1345,1344,1327
<1327=1343,1328
<1328=1338,1329
<1329=1337,1330
<1330=1334,1331
<1331=1333,1332
<1334=1336,1335
<1338=1340,1339
<1340=1342,1341
<1346=1347
<1347=1349,1348
<1349=1351,1350
<1352=1370,1353
<1353=1354
<1354=1365,1355
<1355=1363,1356
<1356=1357
<1357=1358
<1358=1360,1359
<1360=1362,1361
<1363=1364
<1365=1369,1366
<1366=1368,1367
<1370=1371
<1372=1379,1373
<1373=1374
<1374=1378,1375
<1375=1377,1376
<1379=1380
<1381=2018,1382
<1382=1997,1974,1965,1951,1937,1923,1909,1895,1881,1832,1783,1734,1685,1671,1657,1638,1401,1383
<1383=1399,1384
<1384=1385
<1385=1394,1386
<1386=1392,1387
<1387=1388
<1388=1389
<1389=1391,1390
<1392=1393
<1394=1398,1395
<1395=1397,1396
<1399=1400
<1401=1634,1402
<1402=1619,1601,1576,1548,1531,1403
<1403=1506,1410,1404
<1404=1405
<1405=1406
<1406=1407
<1407=1409,1408
<1410=1488,1468,1440,1423,1417,1411
<1411=1412
<1412=1416,1413
<1413=1415,1414
<1417=1418
<1418=1422,1419
<1419=1421,1420
<1423=1424
<1424=1438,1425
<1425=1428,1426
<1426=1427
<1428=1429
<1429=1431,1430
<1431=1433,1432
<1433=1435,1434
<1435=1437,1436
<1438=1439
<1440=1441
<1441=1467,1466,1442
<1442=1465,1443
<1443=1463,1444
<1444=1454,1445
<1445=1446
<1446=1452,1447
<1447=1450,1448
<1448=1449
<1450=1451
<1452=1453
<1454=1455
<1455=1461,1456
<1456=1459,1457
<1457=1458
<1459=1460
<1461=1462
<1463=1464
<1468=1469
<1469=1487,1486,1470
<1470=1485,1471
<1471=1483,1472
<1472=1473
<1473=1474
<1474=1476,1475
<1476=1478,1477
<1478=1480,1479
<1480=1482,1481
<1483=1484
<1488=1489
<1489=1504,1490
<1490=1493,1491
<1491=1492
<1493=1494
<1494=1503,1495
<1495=1497,1496
<1497=1498
<1498=1500,1499
<1500=1502,1501
<1504=1505
<1506=1507
<1507=1524,1508
<1508=1521,1509
<1509=1519,1510
<1510=1511
<1511=1512
<1512=1514,1513
<1514=1516,1515
<1516=1518,1517
<1519=1520
<1521=1523,1522
<1524=1526,1525
<1526=1528,1527
<1528=1530,1529
<1531=1532
<1532=1546,1533
<1533=1536,1534
<1534=1535
<1536=1537
<1537=1539,1538
<1539=1541,1540
<1541=1543,1542
<1543=1545,1544
<1546=1547
<1548=1549
<1549=1575,1574,1550
<1550=1573,1551
<1551=1571,1552
<1552=1562,1553
<1553=1554
<1554=1560,1555
<1555=1558,1556
<1556=1557
<1558=1559
<1560=1561
<1562=1563
<1563=1569,1564
<1564=1567,1565
<1565=1566
<1567=1568
<1569=1570
<1571=1572
<1576=1577
<1577=1600,1578
<1578=1598,1579
<1579=1589,1580
<1580=1581
<1581=1587,1582
<1582=1585,1583
<1583=1584
<1585=1586
<1587=1588
<1589=1590
<1590=1596,1591
<1591=1594,1592
<1592=1593
<1594=1595
<1596=1597
<1598=1599
<1601=1602
<1602=1618,1617,1603
<1603=1616,1604
<1604=1614,1605
<1605=1606
<1606=1607
<1607=1609,1608
<1609=1611,1610
<1611=1613,1612
<1614=1615
<1619=1620
<1620=1632,1621
<1621=1624,1622
<1622=1623
<1624=1625
<1625=1627,1626
<1627=1629,1628
<1629=1631,1630
<1632=1633
<1634=1635
<1635=1637,1636
<1638=1639
<1639=1656,1655,1640
<1640=1654,1641
<1641=1652,1642
<1642=1643
<1643=1644
<1644=1650,1645
<1645=1648,1646
<1646=1647
<1648=1649
<1650=1651
<1652=1653
<1657=1658
<1658=1670,1669,1659
<1659=1668,1660
<1660=1666,1661
<1661=1664,1662
<1662=1663
<1664=1665
<1666=1667
<1671=1672
<1672=1684,1683,1673
<1673=1682,1674
<1674=1680,1675
<1675=1678,1676
<1676=1677
<1678=1679
<1680=1681
<1685=1686
<1686=1733,1732,1687
<1687=1731,1688
<1688=1729,1689
<1689=1727,1690
<1690=1691
<1691=1725,1692
<1692=1709,1693
<1693=1694
<1694=1707,1695
<1695=1705,1696
<1696=1697
<1697=1703,1698
<1698=1699
<1699=1700
<1700=1702,1701
<1703=1704
<1705=1706
<1707=1708
<1709=1710
<1710=1723,1711
<1711=1721,1712
<1712=1713
<1713=1719,1714
<1714=1715
<1715=1716
<1716=1718,1717
<1719=1720
<1721=1722
<1723=1724
<1725=1726
<1727=1728
<1729=1730
<1734=1735
<1735=1782,1781,1736
<1736=1780,1737
<1737=1778,1738
<1738=1776,1739
<1739=1740
<1740=1774,1741
<1741=1758,1742
<1742=1743
<1743=1756,1744
<1744=1754,1745
<1745=1746
<1746=1752,1747
<1747=1748
<1748=1749
<1749=1751,1750
<1752=1753
<1754=1755
<1756=1757
<1758=1759
<1759=1772,1760
<1760=1770,1761
<1761=1762
<1762=1768,1763
<1763=1764
<1764=1765
<1765=1767,1766
<1768=1769
<1770=1771
<1772=1773
<1774=1775
<1776=1777
<1778=1779
<1783=1784
<1784=1831,1830,1785
<1785=1829,1786
<1786=1827,1787
<1787=1825,1788
<1788=1789
<1789=1823,1790
<1790=1807,1791
<1791=1792
<1792=1805,1793
<1793=1803,1794
<1794=1795
<1795=1801,1796
<1796=1797
<1797=1798
<1798=1800,1799
<1801=1802
<1803=1804
<1805=1806
<1807=1808
<1808=1821,1809
<1809=1819,1810
<1810=1811
<1811=1817,1812
<1812=1813
<1813=1814
<1814=1816,1815
<1817=1818
<1819=1820
<1821=1822
<1823=1824
<1825=1826
<1827=1828
<1832=1833
<1833=1880,1879,1834
<1834=1878,1835
<1835=1876,1836
<1836=1874,1837
<1837=1838
<1838=1872,1839
<1839=1856,1840
<1840=1841
<1841=1854,1842
<1842=1852,1843
<1843=1844
<1844=1850,1845
<1845=1846
<1846=1847
<1847=1849,1848
<1850=1851
<1852=1853
<1854=1855
<1856=1857
<1857=1870,1858
<1858=1868,1859
<1859=1860
<1860=1866,1861
<1861=1862
<1862=1863
<1863=1865,1864
<1866=1867
<1868=1869
<1870=1871
<1872=1873
<1874=1875
<1876=1877
<1881=1882
<1882=1894,1893,1883
<1883=1892,1884
<1884=1890,1885
<1885=1888,1886
<1886=1887
<1888=1889
<1890=1891
<1895=1896
<1896=1908,1907,1897
<1897=1906,1898
<1898=1904,1899
<1899=1902,1900
<1900=1901
<1902=1903
<1904=1905
<1909=1910
<1910=1922,1921,1911
<1911=1920,1912
<1912=1918,1913
<1913=1916,1914
<1914=1915
<1916=1917
<1918=1919
<1923=1924
<1924=1936,1935,1925
<1925=1934,1926
<1926=1932,1927
<1927=1930,1928
<1928=1929
<1930=1931
<1932=1933
<1937=1938
<1938=1950,1949,1939
<1939=1948,1940
<1940=1946,1941
<1941=1944,1942
<1942=1943
<1944=1945
<1946=1947
<1951=1952
<1952=1964,1963,1953
<1953=1962,1954
<1954=1960,1955
<1955=1958,1956
<1956=1957
<1958=1959
<1960=1961
<1965=1966
<1966=1972,1967
<1967=1970,1968
<1968=1969
<1970=1971
<1972=1973
<1974=1975
<1975=1996,1995,1976
<1976=1994,1977
<1977=1989,1978
<1978=1988,1979
<1979=1983,1980
<1980=1982,1981
<1983=1985,1984
<1985=1987,1986
<1989=1991,1990
<1991=1993,1992
<1997=1998
<1998=2017,2016,1999
<1999=2015,2000
<2000=2010,2001
<2001=2009,2002
<2002=2006,2003
<2003=2005,2004
<2006=2008,2007
<2010=2012,2011
<2012=2014,2013
<2018=2019
<2019=2021,2020
<2021=2023,2022
<2024=2042,2025
<2025=2026
<2026=2037,2027
<2027=2035,2028
<2028=2029
<2029=2030
<2030=2032,2031
<2032=2034,2033
<2035=2036
<2037=2041,2038
<2038=2040,2039
<2042=2043
<2044=2045
<2045=2053,2046
<2046=2049,2047
<2047=2048
<2049=2050
<2050=2052,2051
<2053=2054
<2055=2056
<2056=2087,2086,2057
<2057=2085,2058
<2058=2083,2059
<2059=2060
<2060=2061
<2061=2081,2062
<2062=2072,2063
<2063=2064
<2064=2070,2065
<2065=2068,2066
<2066=2067
<2068=2069
<2070=2071
<2072=2073
<2073=2079,2074
<2074=2077,2075
<2075=2076
<2077=2078
<2079=2080
<2081=2082
<2083=2084
<2088=2089
<2089=2101,2100,2090
<2090=2099,2091
<2091=2097,2092
<2092=2095,2093
<2093=2094
<2095=2096
<2097=2098
<2102=2103
<2103=2115,2114,2104
<2104=2113,2105
<2105=2111,2106
<2106=2109,2107
<2107=2108
<2109=2110
<2111=2112
<2116=2117
<2117=2127,2126,2118
<2118=2125,2119
<2119=2123,2120
<2120=2121
<2121=2122
<2123=2124
<2128=2129
<2129=2139,2138,2130
<2130=2137,2131
<2131=2135,2132
<2132=2133
<2133=2134
<2135=2136
<2140=2141
<2141=2158,2157,2142
<2142=2156,2143
<2143=2154,2144
<2144=2152,2145
<2145=2146
<2146=2150,2147
<2147=2148
<2148=2149
<2150=2151
<2152=2153
<2154=2155
<2159=2160
<2160=2186,2185,2161
<2161=2184,2162
<2162=2182,2163
<2163=2173,2164
<2164=2165
<2165=2171,2166
<2166=2169,2167
<2167=2168
<2169=2170
<2171=2172
<2173=2174
<2174=2180,2175
<2175=2178,2176
<2176=2177
<2178=2179
<2180=2181
<2182=2183
<2187=2188
<2188=2214,2213,2189
<2189=2212,2190
<2190=2210,2191
<2191=2201,2192
<2192=2193
<2193=2199,2194
<2194=2197,2195
<2195=2196
<2197=2198
<2199=2200
<2201=2202
<2202=2208,2203
<2203=2206,2204
<2204=2205
<2206=2207
<2208=2209
<2210=2211
<2215=2216
<2216=2228,2227,2217
<2217=2226,2218
<2218=2224,2219
<2219=2222,2220
<2220=2221
<2222=2223
<2224=2225
<2229=2230
<2230=2242,2241,2231
<2231=2240,2232
<2232=2238,2233
<2233=2236,2234
<2234=2235
<2236=2237
<2238=2239
<2243=2244
<2244=2256,2255,2245
<2245=2254,2246
<2246=2252,2247
<2247=2250,2248
<2248=2249
<2250=2251
<2252=2253
<2257=2258
<2258=2270,2269,2259
<2259=2268,2260
<2260=2266,2261
<2261=2264,2262
<2262=2263
<2264=2265
<2266=2267
<2271=2272
<2272=2284,2283,2273
<2273=2282,2274
<2274=2280,2275
<2275=2278,2276
<2276=2277
<2278=2279
<2280=2281
<2285=2286
<2286=2298,2297,2287
<2287=2296,2288
<2288=2294,2289
<2289=2292,2290
<2290=2291
<2292=2293
<2294=2295
<2299=2300
<2300=2316,2315,2301
<2301=2314,2302
<2302=2312,2303
<2303=2304
<2304=2305
<2305=2307,2306
<2307=2309,2308
<2309=2311,2310
<2312=2313
<2317=2318
<2318=2334,2333,2319
<2319=2332,2320
<2320=2330,2321
<2321=2322
<2322=2323
<2323=2325,2324
<2325=2327,2326
<2327=2329,2328
<2330=2331
<2335=2337,2336
<2338=2339
<2339=2341,2340
<2342=2343
<2343=2344
<2344=2349,2348,2345
<2345=2347,2346
<2350=2351
<2351=2368,2367,2352
<2352=2366,2353
<2353=2358,2355,2354
<2355=2357,2356
<2358=2359
<2359=2361,2360
<2361=2363,2362
<2363=2365,2364
<2369=2377,2370
<2370=2371
<2371=2375,2372
<2372=2373
<2373=2374
<2375=2376
<2377=2378
<2378=2380,2379
<2381=2382
<2382=2390,2389,2383
<2383=2388,2384
<2384=2386,2385
<2386=2387
<2391=2392
<2392=2395,2394,2393
<2396=2397
<2397=2429,2428,2398
<2398=2427,2399
<2399=2425,2400
<2400=2419,2413,2407,2401
<2401=2402
<2402=2404,2403
<2404=2406,2405
<2407=2408
<2408=2410,2409
<2410=2412,2411
<2413=2414
<2414=2416,2415
<2416=2418,2417
<2419=2420
<2420=2422,2421
<2422=2424,2423
<2425=2426
<2430=2431
<2431=2441,2440,2432
<2432=2439,2433
<2433=2437,2434
<2434=2435
<2435=2436
<2437=2438
<2442=2443
<2443=2460,2459,2444
<2444=2458,2445
<2445=2456,2446
<2446=2447
<2447=2448
<2448=2450,2449
<2450=2452,2451
<2452=2453
<2453=2455,2454
<2456=2457
<2461=2462
<2462=2477,2476,2463
<2463=2475,2464
<2464=2473,2465
<2465=2466
<2466=2467
<2467=2469,2468
<2469=2470
<2470=2472,2471
<2473=2474
<2478=2479
<2479=2496,2495,2480
<2480=2494,2481
<2481=2492,2482
<2482=2483
<2483=2484
<2484=2486,2485
<2486=2488,2487
<2488=2489
<2489=2491,2490
<2492=2493
<2497=2498
<2498=2513,2512,2499
<2499=2511,2500
<2500=2509,2501
<2501=2502
<2502=2503
<2503=2505,2504
<2505=2506
<2506=2508,2507
<2509=2510
<2514=2515
<2515=2559,2558,2516
<2516=2557,2517
<2517=2555,2518
<2518=2546,2537,2528,2519
<2519=2520
<2520=2526,2521
<2521=2524,2522
<2522=2523
<2524=2525
<2526=2527
<2528=2529
<2529=2535,2530
<2530=2533,2531
<2531=2532
<2533=2534
<2535=2536
<2537=2538
<2538=2544,2539
<2539=2542,2540
<2540=2541
<2542=2543
<2544=2545
<2546=2547
<2547=2553,2548
<2548=2551,2549
<2549=2550
<2551=2552
<2553=2554
<2555=2556
<2560=2561
<2561=2605,2604,2562
<2562=2603,2563
<2563=2601,2564
<2564=2592,2583,2574,2565
<2565=2566
<2566=2572,2567
<2567=2570,2568
<2568=2569
<2570=2571
<2572=2573
<2574=2575
<2575=2581,2576
<2576=2579,2577
<2577=2578
<2579=2580
<2581=2582
<2583=2584
<2584=2590,2585
<2585=2588,2586
<2586=2587
<2588=2589
<2590=2591
<2592=2593
<2593=2599,2594
<2594=2597,2595
<2595=2596
<2597=2598
<2599=2600
<2601=2602
<2606=2607
<2607=2651,2650,2608
<2608=2649,2609
<2609=2647,2610
<2610=2638,2629,2620,2611
<2611=2612
<2612=2618,2613
<2613=2616,2614
<2614=2615
<2616=2617
<2618=2619
<2620=2621
<2621=2627,2622
<2622=2625,2623
<2623=2624
<2625=2626
<2627=2628
<2629=2630
<2630=2636,2631
<2631=2634,2632
<2632=2633
<2634=2635
<2636=2637
<2638=2639
<2639=2645,2640
<2640=2643,2641
<2641=2642
<2643=2644
<2645=2646
<2647=2648
<2652=2653
<2653=2678,2654
<2654=2677,2655
<2655=2661,2656
<2656=2660,2657
<2657=2659,2658
<2661=2674,2662
<2662=2664,2663
<2664=2673,2665
<2665=2667,2666
<2667=2669,2668
<2669=2670
<2670=2672,2671
<2674=2676,2675
<2678=2680,2679
<2681=2682
<2682=2713,2683
<2683=2712,2684
<2684=2706,2685
<2685=2705,2686
<2686=2699,2687
<2687=2693,2688
<2688=2692,2689
<2689=2691,2690
<2693=2695,2694
<2695=2696
<2696=2698,2697
<2699=2701,2700
<2701=2702
<2702=2704,2703
<2706=2708,2707
<2708=2709
<2709=2711,2710
<2713=2720,2714
<2714=2716,2715
<2716=2717
<2717=2719,2718
<2721=2722
<2722=2724,2723
<2725=2734,2726
<2726=2727
<2727=2731,2728
<2728=2730,2729
<2731=2733,2732
<2734=2735
<2736=2737
<2737=2741,2738
<2738=2740,2739
<2741=2743,2742
<2744=2745
<2745=2749,2746
<2746=2748,2747
<2749=2751,2750
<2877=2904,2903,2878
<2878=2900,2897,2894,2891,2888,2885,2882,2879
<2879=2881,2880
<2882=2884,2883
<2885=2887,2886
<2888=2890,2889
<2891=2893,2892
<2894=2896,2895
<2897=2899,2898
<2900=2902,2901
<2904=2905
<2905=2906
<2906=2924,2907
<2907=2923,2908
<2908=2922,2909
<2909=2921,2910
<2910=2920,2911
<2911=2919,2912
<2912=2918,2913
<2913=2917,2914
<2914=2916,2915
<2936=2963,2962,2937
<2937=2959,2956,2953,2950,2947,2944,2941,2938
<2938=2940,2939
<2941=2943,2942
<2944=2946,2945
<2947=2949,2948
<2950=2952,2951
<2953=2955,2954
<2956=2958,2957
<2959=2961,2960
<2963=2964
<2964=2965
<2965=2983,2966
<2966=2982,2967
<2967=2981,2968
<2968=2980,2969
<2969=2979,2970
<2970=2978,2971
<2971=2977,2972
<2972=2976,2973
<2973=2975,2974
<2995=3013,3012,2996
<2996=3009,3006,3003,3000,2997
<2997=2999,2998
<3000=3002,3001
<3003=3005,3004
<3006=3008,3007
<3009=3011,3010
<3013=3129,3122,3115,3108,3038,3014
<3014=3015
<3015=3023,3016
<3016=3022,3017
<3017=3019,3018
<3019=3021,3020
<3023=3037,3024
<3024=3036,3025
<3025=3034,3026
<3026=3027
<3027=3028
<3028=3030,3029
<3030=3031
<3031=3033,3032
<3034=3035
<3038=3100,3096,3089,3039
<3039=3061,3040
<3040=3055,3041
<3041=3046,3042
<3042=3043
<3043=3045,3044
<3046=3047
<3047=3054,3048
<3048=3052,3049
<3049=3050
<3050=3051
<3052=3053
<3055=3056
<3056=3058,3057
<3058=3060,3059
<3061=3062
<3062=3088,3063
<3063=3087,3064
<3064=3086,3065
<3065=3071,3066
<3066=3069,3067
<3067=3068
<3069=3070
<3071=3072
<3072=3078,3073
<3073=3077,3074
<3074=3076,3075
<3078=3080,3079
<3080=3081
<3081=3083,3082
<3083=3085,3084
<3089=3093,3090
<3090=3092,3091
<3093=3095,3094
<3096=3097
<3097=3099,3098
<3100=3101
<3101=3102
<3102=3107,3106,3103
<3103=3105,3104
<3108=3109
<3109=3114,3113,3110
<3110=3112,3111
<3115=3116
<3116=3121,3120,3117
<3117=3119,3118
<3122=3123
<3123=3128,3127,3124
<3124=3126,3125
<3129=3130
<3130=3137,3136,3131
<3131=3135,3132
<3132=3134,3133
<3155=3167,3166,3156
<3156=3163,3160,3157
<3157=3159,3158
<3160=3162,3161
<3163=3165,3164
<3167=3168
<3168=3169
<3169=3180,3170
<3170=3174,3171
<3171=3173,3172
<3174=3176,3175
<3176=3177
<3177=3179,3178
<3188=3203,3202,3189
<3189=3199,3196,3193,3190
<3190=3192,3191
<3193=3195,3194
<3196=3198,3197
<3199=3201,3200
<3203=3267,3260,3251,3213,3204
<3204=3205
<3205=3211,3206
<3206=3207
<3207=3208
<3208=3210,3209
<3211=3212
<3213=3243,3239,3232,3214
<3214=3215
<3215=3216
<3216=3231,3217
<3217=3229,3218
<3218=3225,3221,3219
<3219=3220
<3221=3222
<3222=3224,3223
<3225=3226
<3226=3228,3227
<3229=3230
<3232=3236,3233
<3233=3235,3234
<3236=3238,3237
<3239=3240
<3240=3242,3241
<3243=3244
<3244=3245
<3245=3250,3249,3246
<3246=3248,3247
<3251=3252
<3252=3259,3258,3253
<3253=3257,3254
<3254=3256,3255
<3260=3261
<3261=3266,3265,3262
<3262=3264,3263
<3267=3268
<3268=3273,3272,3269
<3269=3271,3270
<3289=3304,3303,3290
<3290=3300,3297,3294,3291
<3291=3293,3292
<3294=3296,3295
<3297=3299,3298
<3300=3302,3301
<3304=3677,3670,3660,3643,3396,3391,3382,3361,3323,3314,3305
<3305=3306
<3306=3312,3307
<3307=3308
<3308=3309
<3309=3311,3310
<3312=3313
<3314=3315
<3315=3322,3321,3316
<3316=3320,3317
<3317=3319,3318
<3323=3353,3349,3342,3324
<3324=3325
<3325=3326
<3326=3341,3327
<3327=3339,3328
<3328=3335,3331,3329
<3329=3330
<3331=3332
<3332=3334,3333
<3335=3336
<3336=3338,3337
<3339=3340
<3342=3346,3343
<3343=3345,3344
<3346=3348,3347
<3349=3350
<3350=3352,3351
<3353=3354
<3354=3355
<3355=3360,3359,3356
<3356=3358,3357
<3361=3362
<3362=3381,3380,3363
<3363=3379,3364
<3364=3372,3365
<3365=3369,3366
<3366=3368,3367
<3369=3371,3370
<3372=3376,3373
<3373=3375,3374
<3376=3378,3377
<3382=3383
<3383=3389,3384
<3384=3387,3385
<3385=3386
<3387=3388
<3389=3390
<3391=3392
<3392=3395,3394,3393
<3396=3635,3631,3624,3397
<3397=3605,3598,3584,3570,3535,3516,3509,3495,3481,3446,3432,3416,3398
<3398=3399
<3399=3415,3400
<3400=3413,3401
<3401=3411,3402
<3402=3403
<3403=3409,3404
<3404=3407,3405
<3405=3406
<3407=3408
<3409=3410
<3411=3412
<3413=3414
<3416=3417
<3417=3431,3430,3418
<3418=3429,3419
<3419=3427,3420
<3420=3421
<3421=3422
<3422=3426,3423
<3423=3425,3424
<3427=3428
<3432=3433
<3433=3445,3444,3434
<3434=3443,3435
<3435=3441,3436
<3436=3439,3437
<3437=3438
<3439=3440
<3441=3442
<3446=3447
<3447=3480,3479,3448
<3448=3478,3449
<3449=3476,3450
<3450=3453,3451
<3451=3452
<3453=3454
<3454=3474,3455
<3455=3465,3456
<3456=3457
<3457=3463,3458
<3458=3461,3459
<3459=3460
<3461=3462
<3463=3464
<3465=3466
<3466=3472,3467
<3467=3470,3468
<3468=3469
<3470=3471
<3472=3473
<3474=3475
<3476=3477
<3481=3482
<3482=3494,3493,3483
<3483=3492,3484
<3484=3490,3485
<3485=3488,3486
<3486=3487
<3488=3489
<3490=3491
<3495=3496
<3496=3508,3507,3497
<3497=3506,3498
<3498=3504,3499
<3499=3502,3500
<3500=3501
<3502=3503
<3504=3505
<3509=3510
<3510=3515,3514,3511
<3511=3513,3512
<3516=3517
<3517=3534,3533,3518
<3518=3532,3519
<3519=3530,3520
<3520=3521
<3521=3522
<3522=3524,3523
<3524=3525
<3525=3527,3526
<3527=3529,3528
<3530=3531
<3535=3536
<3536=3569,3568,3537
<3537=3567,3538
<3538=3565,3539
<3539=3542,3540
<3540=3541
<3542=3543
<3543=3563,3544
<3544=3554,3545
<3545=3546
<3546=3552,3547
<3547=3550,3548
<3548=3549
<3550=3551
<3552=3553
<3554=3555
<3555=3561,3556
<3556=3559,3557
<3557=3558
<3559=3560
<3561=3562
<3563=3564
<3565=3566
<3570=3571
<3571=3583,3582,3572
<3572=3581,3573
<3573=3579,3574
<3574=3577,3575
<3575=3576
<3577=3578
<3579=3580
<3584=3585
<3585=3597,3596,3586
<3586=3595,3587
<3587=3593,3588
<3588=3591,3589
<3589=3590
<3591=3592
<3593=3594
<3598=3599
<3599=3604,3603,3600
<3600=3602,3601
<3605=3606
<3606=3623,3622,3607
<3607=3621,3608
<3608=3619,3609
<3609=3610
<3610=3611
<3611=3613,3612
<3613=3614
<3614=3616,3615
<3616=3618,3617
<3619=3620
<3624=3628,3625
<3625=3627,3626
<3628=3630,3629
<3631=3632
<3632=3634,3633
<3635=3636
<3636=3637
<3637=3642,3641,3638
<3638=3640,3639
<3643=3644
<3644=3659,3658,3645
<3645=3657,3646
<3646=3655,3647
<3647=3648
<3648=3649
<3649=3651,3650
<3651=3652
<3652=3654,3653
<3655=3656
<3660=3661
<3661=3669,3668,3662
<3662=3667,3663
<3663=3665,3664
<3665=3666
<3670=3671
<3671=3676,3675,3672
<3672=3674,3673
<3677=3678
<3678=3689,3688,3679
<3679=3687,3680
<3680=3686,3681
<3681=3683,3682
<3683=3685,3684
<3733=3745,3744,3734
<3734=3741,3738,3735
<3735=3737,3736
<3738=3740,3739
<3741=3743,3742
<3745=3825,3821,3814,3807,3760,3759,3758,3757,3756,3755,3754,3753,3752,3751,3750,3749,3748,3747,3746
<3760=3799,3795,3788,3761
<3761=3779,3778,3777,3776,3775,3774,3773,3772,3771,3770,3769,3768,3767,3766,3762
<3762=3763
<3763=3765,3764
<3779=3780
<3780=3787,3786,3781
<3781=3785,3782
<3782=3784,3783
<3788=3792,3789
<3789=3791,3790
<3792=3794,3793
<3795=3796
<3796=3798,3797
<3799=3800
<3800=3801
<3801=3806,3805,3802
<3802=3804,3803
<3807=3808
<3808=3813,3812,3809
<3809=3811,3810
<3814=3815
<3815=3817,3816
<3817=3818
<3818=3820,3819
<3821=3822
<3822=3824,3823
<3825=3826
<3826=3831,3830,3827
<3827=3829,3828
<3844=3856,3855,3845
<3845=3852,3849,3846
<3846=3848,3847
<3849=3851,3850
<3852=3854,3853
<3856=4137,4127,4117,4104,3976,3971,3962,3958,3943,3928,3919,3898,3861,3857
<3857=3858
<3858=3860,3859
<3861=3890,3886,3879,3862
<3862=3869,3863
<3863=3864
<3864=3868,3865
<3865=3867,3866
<3869=3870
<3870=3878,3871
<3871=3875,3872
<3872=3874,3873
<3875=3877,3876
<3879=3883,3880
<3880=3882,3881
<3883=3885,3884
<3886=3887
<3887=3889,3888
<3890=3891
<3891=3892
<3892=3897,3896,3893
<3893=3895,3894
<3898=3899
<3899=3918,3917,3900
<3900=3916,3901
<3901=3913,3902
<3902=3910,3903
<3903=3907,3904
<3904=3906,3905
<3907=3909,3908
<3910=3912,3911
<3913=3915,3914
<3919=3920
<3920=3926,3921
<3921=3924,3922
<3922=3923
<3924=3925
<3926=3927
<3928=3929
<3929=3937,3930
<3930=3934,3931
<3931=3933,3932
<3934=3936,3935
<3937=3941,3938
<3938=3939
<3939=3940
<3941=3942
<3943=3944
<3944=3952,3945
<3945=3949,3946
<3946=3948,3947
<3949=3951,3950
<3952=3956,3953
<3953=3954
<3954=3955
<3956=3957
<3958=3959
<3959=3961,3960
<3962=3963
<3963=3969,3964
<3964=3967,3965
<3965=3966
<3967=3968
<3969=3970
<3971=3972
<3972=3975,3974,3973
<3976=4096,4092,4085,3977
<3977=4073,4062,4043,4024,3978
<3978=3979
<3979=4023,3980
<3980=4021,3981
<3981=4019,3982
<3982=3983
<3983=4017,3984
<3984=4001,3985
<3985=3986
<3986=3999,3987
<3987=3990,3988
<3988=3989
<3990=3991
<3991=3997,3992
<3992=3995,3993
<3993=3994
<3995=3996
<3997=3998
<3999=4000
<4001=4002
<4002=4015,4003
<4003=4006,4004
<4004=4005
<4006=4007
<4007=4013,4008
<4008=4011,4009
<4009=4010
<4011=4012
<4013=4014
<4015=4016
<4017=4018
<4019=4020
<4021=4022
<4024=4025
<4025=4042,4041,4026
<4026=4040,4027
<4027=4038,4028
<4028=4029
<4029=4030
<4030=4032,4031
<4032=4033
<4033=4035,4034
<4035=4037,4036
<4038=4039
<4043=4044
<4044=4061,4060,4045
<4045=4059,4046
<4046=4057,4047
<4047=4048
<4048=4049
<4049=4051,4050
<4051=4052
<4052=4054,4053
<4054=4056,4055
<4057=4058
<4062=4063
<4063=4072,4064
<4064=4070,4065
<4065=4068,4066
<4066=4067
<4068=4069
<4070=4071
<4073=4074
<4074=4084,4083,4075
<4075=4082,4076
<4076=4080,4077
<4077=4078
<4078=4079
<4080=4081
<4085=4089,4086
<4086=4088,4087
<4089=4091,4090
<4092=4093
<4093=4095,4094
<4096=4097
<4097=4098
<4098=4103,4102,4099
<4099=4101,4100
<4104=4105
<4105=4116,4115,4106
<4106=4114,4107
<4107=4113,4108
<4108=4110,4109
<4110=4112,4111
<4117=4118
<4118=4126,4125,4119
<4119=4124,4120
<4120=4122,4121
<4122=4123
<4127=4128
<4128=4136,4135,4129
<4129=4134,4130
<4130=4132,4131
<4132=4133
<4137=4138
<4138=4147,4146,4139
<4139=4145,4140
<4140=4144,4141
<4141=4143,4142
<4177=4189,4188,4178
<4178=4185,4182,4179
<4179=4181,4180
<4182=4184,4183
<4185=4187,4186
<4189=4207,4201,4190
<4190=4191
<4191=4200,4192
<4192=4199,4193
<4193=4195,4194
<4195=4196
<4196=4198,4197
<4201=4202
<4202=4206,4203
<4203=4205,4204
<4207=4208
<4208=4210,4209
<4219=4234,4233,4220
<4220=4230,4227,4224,4221
<4221=4223,4222
<4224=4226,4225
<4227=4229,4228
<4230=4232,4231
<4234=4313,4306,4299,4290,4277,4237,4235
<4235=4236
<4237=4269,4265,4258,4238
<4238=4239
<4239=4240
<4240=4257,4241
<4241=4256,4242
<4242=4254,4243
<4243=4250,4246,4244
<4244=4245
<4246=4247
<4247=4249,4248
<4250=4251
<4251=4253,4252
<4254=4255
<4258=4262,4259
<4259=4261,4260
<4262=4264,4263
<4265=4266
<4266=4268,4267
<4269=4270
<4270=4271
<4271=4276,4275,4272
<4272=4274,4273
<4277=4278
<4278=4289,4288,4279
<4279=4287,4280
<4280=4286,4281
<4281=4285,4282
<4282=4284,4283
<4290=4291
<4291=4298,4297,4292
<4292=4296,4293
<4293=4295,4294
<4299=4300
<4300=4305,4304,4301
<4301=4303,4302
<4306=4307
<4307=4309,4308
<4309=4310
<4310=4312,4311
<4313=4314
<4314=4316,4315
<4332=4347,4346,4333
<4333=4343,4340,4337,4334
<4334=4336,4335
<4337=4339,4338
<4340=4342,4341
<4343=4345,4344
<4347=4755,4748,4739,4726,4716,4704,4666,4656,4460,4455,4446,4442,4429,4416,4403,4390,4350,4348
<4348=4349
<4350=4382,4378,4371,4351
<4351=4352
<4352=4353
<4353=4370,4354
<4354=4369,4355
<4355=4367,4356
<4356=4363,4359,4357
<4357=4358
<4359=4360
<4360=4362,4361
<4363=4364
<4364=4366,4365
<4367=4368
<4371=4375,4372
<4372=4374,4373
<4375=4377,4376
<4378=4379
<4379=4381,4380
<4382=4383
<4383=4384
<4384=4389,4388,4385
<4385=4387,4386
<4390=4391
<4391=4395,4392
<4392=4394,4393
<4395=4401,4396
<4396=4399,4397
<4397=4398
<4399=4400
<4401=4402
<4403=4404
<4404=4408,4405
<4405=4407,4406
<4408=4414,4409
<4409=4412,4410
<4410=4411
<4412=4413
<4414=4415
<4416=4417
<4417=4421,4418
<4418=4420,4419
<4421=4427,4422
<4422=4425,4423
<4423=4424
<4425=4426
<4427=4428
<4429=4430
<4430=4434,4431
<4431=4433,4432
<4434=4440,4435
<4435=4438,4436
<4436=4437
<4438=4439
<4440=4441
<4442=4443
<4443=4445,4444
<4446=4447
<4447=4453,4448
<4448=4451,4449
<4449=4450
<4451=4452
<4453=4454
<4455=4456
<4456=4459,4458,4457
<4460=4648,4644,4637,4461
<4461=4620,4606,4595,4584,4571,4543,4532,4521,4508,4480,4462
<4462=4463
<4463=4479,4464
<4464=4477,4465
<4465=4475,4466
<4466=4467
<4467=4473,4468
<4468=4471,4469
<4469=4470
<4471=4472
<4473=4474
<4475=4476
<4477=4478
<4480=4481
<4481=4507,4506,4482
<4482=4505,4483
<4483=4503,4484
<4484=4501,4485
<4485=4486
<4486=4499,4487
<4487=4497,4488
<4488=4489
<4489=4495,4490
<4490=4493,4491
<4491=4492
<4493=4494
<4495=4496
<4497=4498
<4499=4500
<4501=4502
<4503=4504
<4508=4509
<4509=4520,4510
<4510=4518,4511
<4511=4512
<4512=4513
<4513=4517,4514
<4514=4516,4515
<4518=4519
<4521=4522
<4522=4531,4523
<4523=4529,4524
<4524=4527,4525
<4525=4526
<4527=4528
<4529=4530
<4532=4533
<4533=4542,4534
<4534=4540,4535
<4535=4538,4536
<4536=4537
<4538=4539
<4540=4541
<4543=4544
<4544=4570,4569,4545
<4545=4568,4546
<4546=4566,4547
<4547=4564,4548
<4548=4549
<4549=4562,4550
<4550=4560,4551
<4551=4552
<4552=4558,4553
<4553=4556,4554
<4554=4555
<4556=4557
<4558=4559
<4560=4561
<4562=4563
<4564=4565
<4566=4567
<4571=4572
<4572=4583,4573
<4573=4581,4574
<4574=4575
<4575=4576
<4576=4580,4577
<4577=4579,4578
<4581=4582
<4584=4585
<4585=4594,4586
<4586=4592,4587
<4587=4590,4588
<4588=4589
<4590=4591
<4592=4593
<4595=4596
<4596=4605,4597
<4597=4603,4598
<4598=4601,4599
<4599=4600
<4601=4602
<4603=4604
<4606=4607
<4607=4619,4618,4608
<4608=4617,4609
<4609=4615,4610
<4610=4613,4611
<4611=4612
<4613=4614
<4615=4616
<4620=4621
<4621=4636,4635,4622
<4622=4634,4623
<4623=4632,4624
<4624=4625
<4625=4626
<4626=4628,4627
<4628=4629
<4629=4631,4630
<4632=4633
<4637=4641,4638
<4638=4640,4639
<4641=4643,4642
<4644=4645
<4645=4647,4646
<4648=4649
<4649=4650
<4650=4655,4654,4651
<4651=4653,4652
<4656=4663,4660,4657
<4657=4659,4658
<4660=4662,4661
<4663=4665,4664
<4666=4667
<4667=4703,4702,4668
<4668=4701,4669
<4669=4699,4670
<4670=4692,4685,4678,4671
<4671=4672
<4672=4676,4673
<4673=4674
<4674=4675
<4676=4677
<4678=4679
<4679=4683,4680
<4680=4681
<4681=4682
<4683=4684
<4685=4686
<4686=4690,4687
<4687=4688
<4688=4689
<4690=4691
<4692=4693
<4693=4697,4694
<4694=4695
<4695=4696
<4697=4698
<4699=4700
<4704=4705
<4705=4715,4714,4706
<4706=4713,4707
<4707=4711,4708
<4708=4709
<4709=4710
<4711=4712
<4716=4717
<4717=4725,4724,4718
<4718=4723,4719
<4719=4721,4720
<4721=4722
<4726=4727
<4727=4738,4737,4728
<4728=4736,4729
<4729=4735,4730
<4730=4734,4731
<4731=4733,4732
<4739=4740
<4740=4747,4746,4741
<4741=4745,4742
<4742=4744,4743
<4748=4749
<4749=4754,4753,4750
<4750=4752,4751
<4755=4756
<4756=4767,4766,4757
<4757=4765,4758
<4758=4764,4759
<4759=4761,4760
<4761=4763,4762
<4808=4820,4819,4809
<4809=4816,4813,4810
<4810=4812,4811
<4813=4815,4814
<4816=4818,4817
<4820=4838,4821
<4821=4822
<4822=4835,4823
<4823=4834,4824
<4824=4828,4825
<4825=4827,4826
<4828=4830,4829
<4830=4831
<4831=4833,4832
<4835=4837,4836
<4838=4839
<4839=4846,4845,4840
<4840=4844,4841
<4841=4843,4842
<4855=4873,4872,4856
<4856=4869,4866,4863,4860,4857
<4857=4859,4858
<4860=4862,4861
<4863=4865,4864
<4866=4868,4867
<4869=4871,4870
<4873=4919,4912,4874
<4874=4904,4900,4893,4875
<4875=4876
<4876=4877
<4877=4890,4878
<4878=4888,4879
<4879=4884,4882,4880
<4880=4881
<4882=4883
<4884=4885
<4885=4887,4886
<4888=4889
<4890=4892,4891
<4893=4897,4894
<4894=4896,4895
<4897=4899,4898
<4900=4901
<4901=4903,4902
<4904=4905
<4905=4906
<4906=4911,4910,4907
<4907=4909,4908
<4912=4913
<4913=4918,4917,4914
<4914=4916,4915
<4919=4920
<4920=4922,4921
<4937=4955,4954,4938
<4938=4951,4948,4945,4942,4939
<4939=4941,4940
<4942=4944,4943
<4945=4947,4946
<4948=4950,4949
<4951=4953,4952
<4955=5341,5328,5311,5273,5261,5249,4994,4956
<4956=4986,4982,4975,4957
<4957=4958
<4958=4959
<4959=4972,4960
<4960=4970,4961
<4961=4966,4964,4962
<4962=4963
<4964=4965
<4966=4967
<4967=4969,4968
<4970=4971
<4972=4974,4973
<4975=4979,4976
<4976=4978,4977
<4979=4981,4980
<4982=4983
<4983=4985,4984
<4986=4987
<4987=4988
<4988=4993,4992,4989
<4989=4991,4990
<4994=5241,5237,5230,4995
<4995=5211,5197,5183,5169,5134,5115,5101,5087,5073,5038,5024,4996
<4996=4997
<4997=5022,4998
<4998=5020,4999
<4999=5000
<5000=5018,5001
<5001=5016,5002
<5002=5003
<5003=5014,5004
<5004=5005
<5005=5006
<5006=5012,5007
<5007=5010,5008
<5008=5009
<5010=5011
<5012=5013
<5014=5015
<5016=5017
<5018=5019
<5020=5021
<5022=5023
<5024=5025
<5025=5037,5036,5026
<5026=5035,5027
<5027=5033,5028
<5028=5031,5029
<5029=5030
<5031=5032
<5033=5034
<5038=5039
<5039=5072,5071,5040
<5040=5070,5041
<5041=5068,5042
<5042=5045,5043
<5043=5044
<5045=5046
<5046=5066,5047
<5047=5057,5048
<5048=5049
<5049=5055,5050
<5050=5053,5051
<5051=5052
<5053=5054
<5055=5056
<5057=5058
<5058=5064,5059
<5059=5062,5060
<5060=5061
<5062=5063
<5064=5065
<5066=5067
<5068=5069
<5073=5074
<5074=5086,5085,5075
<5075=5084,5076
<5076=5082,5077
<5077=5080,5078
<5078=5079
<5080=5081
<5082=5083
<5087=5088
<5088=5100,5099,5089
<5089=5098,5090
<5090=5096,5091
<5091=5094,5092
<5092=5093
<5094=5095
<5096=5097
<5101=5102
<5102=5114,5113,5103
<5103=5112,5104
<5104=5110,5105
<5105=5108,5106
<5106=5107
<5108=5109
<5110=5111
<5115=5116
<5116=5133,5132,5117
<5117=5131,5118
<5118=5129,5119
<5119=5120
<5120=5121
<5121=5123,5122
<5123=5124
<5124=5126,5125
<5126=5128,5127
<5129=5130
<5134=5135
<5135=5168,5167,5136
<5136=5166,5137
<5137=5164,5138
<5138=5141,5139
<5139=5140
<5141=5142
<5142=5162,5143
<5143=5153,5144
<5144=5145
<5145=5151,5146
<5146=5149,5147
<5147=5148
<5149=5150
<5151=5152
<5153=5154
<5154=5160,5155
<5155=5158,5156
<5156=5157
<5158=5159
<5160=5161
<5162=5163
<5164=5165
<5169=5170
<5170=5182,5181,5171
<5171=5180,5172
<5172=5178,5173
<5173=5176,5174
<5174=5175
<5176=5177
<5178=5179
<5183=5184
<5184=5196,5195,5185
<5185=5194,5186
<5186=5192,5187
<5187=5190,5188
<5188=5189
<5190=5191
<5192=5193
<5197=5198
<5198=5210,5209,5199
<5199=5208,5200
<5200=5206,5201
<5201=5204,5202
<5202=5203
<5204=5205
<5206=5207
<5211=5212
<5212=5229,5228,5213
<5213=5227,5214
<5214=5225,5215
<5215=5216
<5216=5217
<5217=5219,5218
<5219=5220
<5220=5222,5221
<5222=5224,5223
<5225=5226
<5230=5234,5231
<5231=5233,5232
<5234=5236,5235
<5237=5238
<5238=5240,5239
<5241=5242
<5242=5243
<5243=5248,5247,5244
<5244=5246,5245
<5249=5250
<5250=5260,5259,5251
<5251=5258,5252
<5252=5256,5253
<5253=5254
<5254=5255
<5256=5257
<5261=5262
<5262=5272,5271,5263
<5263=5270,5264
<5264=5268,5265
<5265=5266
<5266=5267
<5268=5269
<5273=5274
<5274=5310,5309,5275
<5275=5308,5276
<5276=5306,5277
<5277=5299,5292,5285,5278
<5278=5279
<5279=5283,5280
<5280=5281
<5281=5282
<5283=5284
<5285=5286
<5286=5290,5287
<5287=5288
<5288=5289
<5290=5291
<5292=5293
<5293=5297,5294
<5294=5295
<5295=5296
<5297=5298
<5299=5300
<5300=5304,5301
<5301=5302
<5302=5303
<5304=5305
<5306=5307
<5311=5312
<5312=5327,5326,5313
<5313=5325,5314
<5314=5323,5315
<5315=5316
<5316=5317
<5317=5319,5318
<5319=5320
<5320=5322,5321
<5323=5324
<5328=5329
<5329=5340,5339,5330
<5330=5338,5331
<5331=5337,5332
<5332=5334,5333
<5334=5336,5335
<5341=5342
<5342=5351,5350,5343
<5343=5349,5344
<5344=5348,5345
<5345=5347,5346
<5395=5413,5412,5396
<5396=5409,5406,5403,5400,5397
<5397=5399,5398
<5400=5402,5401
<5403=5405,5404
<5406=5408,5407
<5409=5411,5410
<5413=5531,5527,5518,5505,5498,5491,5414
<5414=5423,5415
<5415=5416
<5416=5420,5417
<5417=5419,5418
<5420=5422,5421
<5423=5487,5469,5460,5445,5444,5443,5442,5441,5440,5439,5438,5437,5436,5435,5434,5433,5432,5431,5430,5429,5428,5424
<5424=5425
<5425=5427,5426
<5445=5446
<5446=5458,5447
<5447=5456,5454,5452,5450,5448
<5448=5449
<5450=5451
<5452=5453
<5454=5455
<5456=5457
<5458=5459
<5460=5461
<5461=5468,5462
<5462=5464,5463
<5464=5465
<5465=5467,5466
<5469=5470
<5470=5486,5485,5471
<5471=5484,5472
<5472=5482,5473
<5473=5480,5478,5476,5474
<5474=5475
<5476=5477
<5478=5479
<5480=5481
<5482=5483
<5487=5488
<5488=5490,5489
<5491=5492
<5492=5497,5496,5493
<5493=5495,5494
<5498=5499
<5499=5504,5503,5500
<5500=5502,5501
<5505=5506
<5506=5516,5507
<5507=5514,5510,5508
<5508=5509
<5510=5511
<5511=5513,5512
<5514=5515
<5516=5517
<5518=5519
<5519=5526,5525,5520
<5520=5524,5521
<5521=5523,5522
<5527=5528
<5528=5530,5529
<5531=5532
<5532=5537,5536,5533
<5533=5535,5534
