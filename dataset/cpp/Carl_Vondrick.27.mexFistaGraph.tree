>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	Identifier	D
>18	Statement	 
>19	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>20	CompoundStatement	 
>21	ExpressionStatement	 
>22	RelationalExpression	deleteCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>23	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r )
>24	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r
>25	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r
>26	Expression	D_pB2 , D_pE2 , D_v , D_r
>27	Expression	D_pE2 , D_v , D_r
>28	Expression	D_v , D_r
>29	Identifier	D_r
>30	Identifier	D_v
>31	Identifier	D_pE2
>32	Identifier	D_pB2
>33	Identifier	D_r2
>34	Identifier	D_v2
>35	Identifier	T
>36	Identifier	deleteCopySparse
>37	Condition	 
>38	CallExpression	mxIsSparse ( prhs [ 1 ] )
>39	ArgumentList	prhs [ 1 ]
>40	Argument	prhs [ 1 ]
>41	ArrayIndexing	prhs [ 1 ]
>42	PrimaryExpression	1
>43	Identifier	prhs
>44	Callee	mxIsSparse
>45	Identifier	mxIsSparse
>46	ExpressionStatement	 
>47	MemberAccess	param . logName
>48	Identifier	logName
>49	Identifier	param
>50	Statement	 
>51	Statement	 
>52	IfStatement	if ( param . logName )
>53	Statement	 
>54	Condition	 
>55	MemberAccess	param . logName
>56	Identifier	logName
>57	Identifier	param
>58	IfStatement	if ( nlhs == 2 )
>59	CompoundStatement	 
>60	ForStatement	for ( long i = 0 ; i < duality_gap . n ( ) * duality_gap . m ( ) ; ++ i )
>61	ExpressionStatement	 
>62	AssignmentExpr	pr_dualitygap [ i ] = duality_gap [ i ]
>63	ArrayIndexing	duality_gap [ i ]
>64	Identifier	i
>65	Identifier	duality_gap
>66	ArrayIndexing	pr_dualitygap [ i ]
>67	Identifier	i
>68	Identifier	pr_dualitygap
>69	UnaryExpression	 
>70	Identifier	i
>71	IncDec	++
>72	Condition	 
>73	RelationalExpression	i < duality_gap . n ( ) * duality_gap . m ( )
>74	MultiplicativeExpression	duality_gap . n ( ) * duality_gap . m ( )
>75	CallExpression	duality_gap . m ( )
>76	ArgumentList	 
>77	Callee	duality_gap . m
>78	MemberAccess	duality_gap . m
>79	Identifier	m
>80	Identifier	duality_gap
>81	CallExpression	duality_gap . n ( )
>82	ArgumentList	 
>83	Callee	duality_gap . n
>84	MemberAccess	duality_gap . n
>85	Identifier	n
>86	Identifier	duality_gap
>87	Identifier	i
>88	ForInit	 
>89	IdentifierDeclStatement	long i = 0 ;
>90	IdentifierDecl	i = 0
>91	AssignmentExpr	i = 0
>92	PrimaryExpression	0
>93	Identifier	i
>94	Identifier	i
>95	IdentifierDeclType	long
>96	ExpressionStatement	 
>97	CallExpression	mxGetPr ( plhs [ 1 ] )
>98	ArgumentList	plhs [ 1 ]
>99	Argument	plhs [ 1 ]
>100	ArrayIndexing	plhs [ 1 ]
>101	PrimaryExpression	1
>102	Identifier	plhs
>103	Callee	mxGetPr
>104	Identifier	mxGetPr
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	ExpressionStatement	 
>115	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>116	RelationalExpression	createMatrix < T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>117	RelationalExpression	T > ( duality_gap . m ( ) , duality_gap . n ( ) )
>118	Expression	duality_gap . m ( ) , duality_gap . n ( )
>119	CallExpression	duality_gap . n ( )
>120	ArgumentList	 
>121	Callee	duality_gap . n
>122	MemberAccess	duality_gap . n
>123	Identifier	n
>124	Identifier	duality_gap
>125	CallExpression	duality_gap . m ( )
>126	ArgumentList	 
>127	Callee	duality_gap . m
>128	MemberAccess	duality_gap . m
>129	Identifier	m
>130	Identifier	duality_gap
>131	Identifier	T
>132	Identifier	createMatrix
>133	ArrayIndexing	plhs [ 1 ]
>134	PrimaryExpression	1
>135	Identifier	plhs
>136	Condition	 
>137	EqualityExpression	nlhs == 2
>138	PrimaryExpression	2
>139	Identifier	nlhs
>140	ExpressionStatement	 
>141	RelationalExpression	FISTA 
>142	RelationalExpression	T > ( X , * D , alpha0 , alpha , param , duality_gap , & graph )
>143	Expression	X , * D , alpha0 , alpha , param , duality_gap , & graph
>144	Expression	* D , alpha0 , alpha , param , duality_gap , & graph
>145	Expression	alpha0 , alpha , param , duality_gap , & graph
>146	Expression	alpha , param , duality_gap , & graph
>147	Expression	param , duality_gap , & graph
>148	Expression	duality_gap , & graph
>149	UnaryOp	& graph
>150	Identifier	graph
>151	UnaryOperator	&
>152	Identifier	duality_gap
>153	Identifier	param
>154	Identifier	alpha
>155	Identifier	alpha0
>156	UnaryOp	* D
>157	Identifier	D
>158	UnaryOperator	*
>159	Identifier	X
>160	Identifier	T
>161	Identifier	FISTA 
>162	IdentifierDeclStatement	 
>163	IdentifierDecl	duality_gap
>164	Identifier	duality_gap
>165	IdentifierDeclType	Matrix < T >
>166	ExpressionStatement	 
>167	AssignmentExpr	graph . gv_jc = GV_pB
>168	Identifier	GV_pB
>169	MemberAccess	graph . gv_jc
>170	Identifier	gv_jc
>171	Identifier	graph
>172	ExpressionStatement	 
>173	AssignmentExpr	graph . gv_ir = GV_r
>174	Identifier	GV_r
>175	MemberAccess	graph . gv_ir
>176	Identifier	gv_ir
>177	Identifier	graph
>178	ExpressionStatement	 
>179	AssignmentExpr	graph . gg_jc = GG_pB
>180	Identifier	GG_pB
>181	MemberAccess	graph . gg_jc
>182	Identifier	gg_jc
>183	Identifier	graph
>184	ExpressionStatement	 
>185	AssignmentExpr	graph . gg_ir = GG_r
>186	Identifier	GG_r
>187	MemberAccess	graph . gg_ir
>188	Identifier	gg_ir
>189	Identifier	graph
>190	ExpressionStatement	 
>191	AssignmentExpr	graph . weights = pr_weights
>192	Identifier	pr_weights
>193	MemberAccess	graph . weights
>194	Identifier	weights
>195	Identifier	graph
>196	ExpressionStatement	 
>197	AssignmentExpr	graph . Ng = nG
>198	Identifier	nG
>199	MemberAccess	graph . Ng
>200	Identifier	Ng
>201	Identifier	graph
>202	ExpressionStatement	 
>203	AssignmentExpr	graph . Nv = nV
>204	Identifier	nV
>205	MemberAccess	graph . Nv
>206	Identifier	Nv
>207	Identifier	graph
>208	IdentifierDeclStatement	 
>209	IdentifierDecl	graph
>210	Identifier	graph
>211	IdentifierDeclType	GraphStruct < T >
>212	IfStatement	if ( param . regul == TREE_L0 || param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == TREE_\
>213	ExpressionStatement	 
>214	CallExpression	mexErrMsgTxt ( \"Error
>215	ArgumentList	\"Error
>216	Argument	\"Error
>217	PrimaryExpression	\"Error
>218	Callee	mexErrMsgTxt
>219	Identifier	mexErrMsgTxt
>220	Condition	 
>221	OrExpression	param . regul == TREE_L0 || param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == \
>222	OrExpression	param . regul == TREEMULT || param . regul == TREE_L2 || param . regul == TREE_LINF
>223	OrExpression	param . regul == TREE_L2 || param . regul == TREE_LINF
>224	EqualityExpression	param . regul == TREE_LINF
>225	Identifier	TREE_LINF
>226	MemberAccess	param . regul
>227	Identifier	regul
>228	Identifier	param
>229	EqualityExpression	param . regul == TREE_L2
>230	Identifier	TREE_L2
>231	MemberAccess	param . regul
>232	Identifier	regul
>233	Identifier	param
>234	EqualityExpression	param . regul == TREEMULT
>235	Identifier	TREEMULT
>236	MemberAccess	param . regul
>237	Identifier	regul
>238	Identifier	param
>239	EqualityExpression	param . regul == TREE_L0
>240	Identifier	TREE_L0
>241	MemberAccess	param . regul
>242	Identifier	regul
>243	Identifier	param
>244	IfStatement	if ( param . num_threads == - 1 )
>245	CompoundStatement	 
>246	ExpressionStatement	 
>247	AssignmentExpr	param . num_threads = MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>248	CallExpression	MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>249	ArgumentList	MAX_THREADS
>250	Argument	omp_get_num_procs ( )
>251	CallExpression	omp_get_num_procs ( )
>252	ArgumentList	 
>253	Callee	omp_get_num_procs
>254	Identifier	omp_get_num_procs
>255	Argument	MAX_THREADS
>256	Identifier	MAX_THREADS
>257	Callee	MIN
>258	Identifier	MIN
>259	MemberAccess	param . num_threads
>260	Identifier	num_threads
>261	Identifier	param
>262	ExpressionStatement	 
>263	AssignmentExpr	param . num_threads = 1
>264	PrimaryExpression	1
>265	MemberAccess	param . num_threads
>266	Identifier	num_threads
>267	Identifier	param
>268	Condition	 
>269	EqualityExpression	param . num_threads == - 1
>270	UnaryOp	- 1
>271	PrimaryExpression	1
>272	UnaryOperator	-
>273	MemberAccess	param . num_threads
>274	Identifier	num_threads
>275	Identifier	param
>276	IfStatement	if ( param . regul == GRAPHMULT && abs < T > ( param . lambda2 - 0 ) < 1e-20 )
>277	CompoundStatement	 
>278	ExpressionStatement	 
>279	CallExpression	mexErrMsgTxt ( \"Error
>280	ArgumentList	\"Error
>281	Argument	\"Error
>282	PrimaryExpression	\"Error
>283	Callee	mexErrMsgTxt
>284	Identifier	mexErrMsgTxt
>285	Condition	 
>286	AndExpression	param . regul == GRAPHMULT && abs < T > ( param . lambda2 - 0 ) < 1e-20
>287	RelationalExpression	abs < T > ( param . lambda2 - 0 ) < 1e-20
>288	RelationalExpression	T > ( param . lambda2 - 0 ) < 1e-20
>289	RelationalExpression	( param . lambda2 - 0 ) < 1e-20
>290	PrimaryExpression	1e-20
>291	AdditiveExpression	param . lambda2 - 0
>292	PrimaryExpression	0
>293	MemberAccess	param . lambda2
>294	Identifier	lambda2
>295	Identifier	param
>296	Identifier	T
>297	Identifier	abs
>298	EqualityExpression	param . regul == GRAPHMULT
>299	Identifier	GRAPHMULT
>300	MemberAccess	param . regul
>301	Identifier	regul
>302	Identifier	param
>303	IfStatement	if ( ( param . loss != CUR && param . loss != MULTILOG ) && ( pAlpha != p || nAlpha != n || mD != m ) )
>304	ElseStatement	else
>305	IfStatement	if ( param . loss == MULTILOG )
>306	ElseStatement	else
>307	IfStatement	if ( param . loss == CUR && ( pAlpha != D -> n ( ) || nAlpha != D -> m ( ) ) )
>308	CompoundStatement	 
>309	ExpressionStatement	 
>310	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>311	ArgumentList	\"Argument sizes are not consistent\"
>312	Argument	\"Argument sizes are not consistent\"
>313	PrimaryExpression	\"Argument sizes are not consistent\"
>314	Callee	mexErrMsgTxt
>315	Identifier	mexErrMsgTxt
>316	Condition	 
>317	AndExpression	param . loss == CUR && ( pAlpha != D -> n ( ) || nAlpha != D -> m ( ) )
>318	OrExpression	pAlpha != D -> n ( ) || nAlpha != D -> m ( )
>319	EqualityExpression	nAlpha != D -> m ( )
>320	CallExpression	D -> m ( )
>321	ArgumentList	 
>322	Callee	D -> m
>323	PtrMemberAccess	D -> m
>324	Identifier	m
>325	Identifier	D
>326	Identifier	nAlpha
>327	EqualityExpression	pAlpha != D -> n ( )
>328	CallExpression	D -> n ( )
>329	ArgumentList	 
>330	Callee	D -> n
>331	PtrMemberAccess	D -> n
>332	Identifier	n
>333	Identifier	D
>334	Identifier	pAlpha
>335	EqualityExpression	param . loss == CUR
>336	Identifier	CUR
>337	MemberAccess	param . loss
>338	Identifier	loss
>339	Identifier	param
>340	CompoundStatement	 
>341	IfStatement	if ( maxval * X . n ( ) > nAlpha || mD != m )
>342	CompoundStatement	 
>343	ExpressionStatement	 
>344	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>345	ArgumentList	\"Argument sizes are not consistent\"
>346	Argument	\"Argument sizes are not consistent\"
>347	PrimaryExpression	\"Argument sizes are not consistent\"
>348	Callee	mexErrMsgTxt
>349	Identifier	mexErrMsgTxt
>350	ExpressionStatement	 
>351	ShiftExpression	cerr << \"Number of classes
>352	ShiftExpression	\"Number of classes
>353	ShiftExpression	maxval << endl
>354	Identifier	endl
>355	Identifier	maxval
>356	PrimaryExpression	\"Number of classes
>357	Identifier	cerr
>358	Condition	 
>359	OrExpression	maxval * X . n ( ) > nAlpha || mD != m
>360	EqualityExpression	mD != m
>361	Identifier	m
>362	Identifier	mD
>363	RelationalExpression	maxval * X . n ( ) > nAlpha
>364	Identifier	nAlpha
>365	MultiplicativeExpression	maxval * X . n ( )
>366	CallExpression	X . n ( )
>367	ArgumentList	 
>368	Callee	X . n
>369	MemberAccess	X . n
>370	Identifier	n
>371	Identifier	X
>372	Identifier	maxval
>373	IfStatement	if ( minval != 0 )
>374	ExpressionStatement	 
>375	CallExpression	mexErrMsgTxt ( \"smallest class should be 0\" )
>376	ArgumentList	\"smallest class should be 0\"
>377	Argument	\"smallest class should be 0\"
>378	PrimaryExpression	\"smallest class should be 0\"
>379	Callee	mexErrMsgTxt
>380	Identifier	mexErrMsgTxt
>381	Condition	 
>382	EqualityExpression	minval != 0
>383	PrimaryExpression	0
>384	Identifier	minval
>385	ExpressionStatement	 
>386	CallExpression	Xv . minval ( )
>387	ArgumentList	 
>388	Callee	Xv . minval
>389	MemberAccess	Xv . minval
>390	Identifier	minval
>391	Identifier	Xv
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	ExpressionStatement	 
>400	CallExpression	Xv . maxval ( )
>401	ArgumentList	 
>402	Callee	Xv . maxval
>403	MemberAccess	Xv . maxval
>404	Identifier	maxval
>405	Identifier	Xv
>406	Statement	 
>407	Statement	 
>408	Statement	 
>409	Statement	 
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	ExpressionStatement	 
>414	CallExpression	X . toVect ( Xv )
>415	ArgumentList	Xv
>416	Argument	Xv
>417	Identifier	Xv
>418	Callee	X . toVect
>419	MemberAccess	X . toVect
>420	Identifier	toVect
>421	Identifier	X
>422	IdentifierDeclStatement	 
>423	IdentifierDecl	Xv
>424	Identifier	Xv
>425	IdentifierDeclType	Vector < T >
>426	Condition	 
>427	EqualityExpression	param . loss == MULTILOG
>428	Identifier	MULTILOG
>429	MemberAccess	param . loss
>430	Identifier	loss
>431	Identifier	param
>432	CompoundStatement	 
>433	ExpressionStatement	 
>434	CallExpression	mexErrMsgTxt ( \"Argument sizes are not consistent\" )
>435	ArgumentList	\"Argument sizes are not consistent\"
>436	Argument	\"Argument sizes are not consistent\"
>437	PrimaryExpression	\"Argument sizes are not consistent\"
>438	Callee	mexErrMsgTxt
>439	Identifier	mexErrMsgTxt
>440	Condition	 
>441	AndExpression	( param . loss != CUR && param . loss != MULTILOG ) && ( pAlpha != p || nAlpha != n || mD != m )
>442	OrExpression	pAlpha != p || nAlpha != n || mD != m
>443	OrExpression	nAlpha != n || mD != m
>444	EqualityExpression	mD != m
>445	Identifier	m
>446	Identifier	mD
>447	EqualityExpression	nAlpha != n
>448	Identifier	n
>449	Identifier	nAlpha
>450	EqualityExpression	pAlpha != p
>451	Identifier	p
>452	Identifier	pAlpha
>453	AndExpression	param . loss != CUR && param . loss != MULTILOG
>454	EqualityExpression	param . loss != MULTILOG
>455	Identifier	MULTILOG
>456	MemberAccess	param . loss
>457	Identifier	loss
>458	Identifier	param
>459	EqualityExpression	param . loss != CUR
>460	Identifier	CUR
>461	MemberAccess	param . loss
>462	Identifier	loss
>463	Identifier	param
>464	IfStatement	if ( param . log )
>465	CompoundStatement	 
>466	ExpressionStatement	 
>467	CallExpression	mxGetString ( stringData , param . logName , stringLength )
>468	ArgumentList	stringData
>469	Argument	stringLength
>470	Identifier	stringLength
>471	Argument	param . logName
>472	MemberAccess	param . logName
>473	Identifier	logName
>474	Identifier	param
>475	Argument	stringData
>476	Identifier	stringData
>477	Callee	mxGetString
>478	Identifier	mxGetString
>479	ExpressionStatement	 
>480	AssignmentExpr	param . logName = new char [ stringLength ]
>481	Identifier	stringLength
>482	MemberAccess	param . logName
>483	Identifier	logName
>484	Identifier	param
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	stringLength = mxGetN ( stringData ) + 1
>487	AssignmentExpr	stringLength = mxGetN ( stringData ) + 1
>488	AdditiveExpression	mxGetN ( stringData ) + 1
>489	PrimaryExpression	1
>490	CallExpression	mxGetN ( stringData )
>491	ArgumentList	stringData
>492	Argument	stringData
>493	Identifier	stringData
>494	Callee	mxGetN
>495	Identifier	mxGetN
>496	Identifier	stringLength
>497	Identifier	stringLength
>498	IdentifierDeclType	long
>499	IfStatement	if ( ! stringData )
>500	ExpressionStatement	 
>501	CallExpression	mexErrMsgTxt ( \"Missing field logName\" )
>502	ArgumentList	\"Missing field logName\"
>503	Argument	\"Missing field logName\"
>504	PrimaryExpression	\"Missing field logName\"
>505	Callee	mexErrMsgTxt
>506	Identifier	mexErrMsgTxt
>507	Condition	 
>508	UnaryOp	! stringData
>509	Identifier	stringData
>510	UnaryOperator	!
>511	IdentifierDeclStatement	 
>512	IdentifierDecl	* stringData = mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>513	AssignmentExpr	* stringData = mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>514	CallExpression	mxGetField ( prhs [ 4 ] , 0 , \"logName\" )
>515	ArgumentList	prhs [ 4 ]
>516	Argument	\"logName\"
>517	PrimaryExpression	\"logName\"
>518	Argument	0
>519	PrimaryExpression	0
>520	Argument	prhs [ 4 ]
>521	ArrayIndexing	prhs [ 4 ]
>522	PrimaryExpression	4
>523	Identifier	prhs
>524	Callee	mxGetField
>525	Identifier	mxGetField
>526	Identifier	stringData
>527	Identifier	stringData
>528	IdentifierDeclType	mxArray *
>529	Condition	 
>530	MemberAccess	param . log
>531	Identifier	log
>532	Identifier	param
>533	ExpressionStatement	 
>534	AssignmentExpr	param . b = getScalarStructDef < T > ( prhs [ 4 ] , \"b\" , 0 )
>535	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"b\" , 0 )
>536	RelationalExpression	T > ( prhs [ 4 ] , \"b\" , 0 )
>537	Expression	prhs [ 4 ] , \"b\" , 0
>538	Expression	\"b\" , 0
>539	PrimaryExpression	0
>540	PrimaryExpression	\"b\"
>541	ArrayIndexing	prhs [ 4 ]
>542	PrimaryExpression	4
>543	Identifier	prhs
>544	Identifier	T
>545	Identifier	getScalarStructDef
>546	MemberAccess	param . b
>547	Identifier	b
>548	Identifier	param
>549	ExpressionStatement	 
>550	AssignmentExpr	param . a = getScalarStructDef < T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>551	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>552	RelationalExpression	T > ( prhs [ 4 ] , \"a\" , T ( 1.0 ) )
>553	Expression	prhs [ 4 ] , \"a\" , T ( 1.0 )
>554	Expression	\"a\" , T ( 1.0 )
>555	CallExpression	T ( 1.0 )
>556	ArgumentList	1.0
>557	Argument	1.0
>558	PrimaryExpression	1.0
>559	Callee	T
>560	Identifier	T
>561	PrimaryExpression	\"a\"
>562	ArrayIndexing	prhs [ 4 ]
>563	PrimaryExpression	4
>564	Identifier	prhs
>565	Identifier	T
>566	Identifier	getScalarStructDef
>567	MemberAccess	param . a
>568	Identifier	a
>569	Identifier	param
>570	ExpressionStatement	 
>571	AssignmentExpr	param . log = getScalarStructDef < bool > ( prhs [ 4 ] , \"log\" , false )
>572	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"log\" , false )
>573	RelationalExpression	bool > ( prhs [ 4 ] , \"log\" , false )
>574	Expression	prhs [ 4 ] , \"log\" , false
>575	Expression	\"log\" , false
>576	Identifier	false
>577	PrimaryExpression	\"log\"
>578	ArrayIndexing	prhs [ 4 ]
>579	PrimaryExpression	4
>580	Identifier	prhs
>581	Identifier	bool
>582	Identifier	getScalarStructDef
>583	MemberAccess	param . log
>584	Identifier	log
>585	Identifier	param
>586	ExpressionStatement	 
>587	AssignmentExpr	param . subgrad = getScalarStructDef < bool > ( prhs [ 4 ] , \"subgrad\" , false )
>588	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"subgrad\" , false )
>589	RelationalExpression	bool > ( prhs [ 4 ] , \"subgrad\" , false )
>590	Expression	prhs [ 4 ] , \"subgrad\" , false
>591	Expression	\"subgrad\" , false
>592	Identifier	false
>593	PrimaryExpression	\"subgrad\"
>594	ArrayIndexing	prhs [ 4 ]
>595	PrimaryExpression	4
>596	Identifier	prhs
>597	Identifier	bool
>598	Identifier	getScalarStructDef
>599	MemberAccess	param . subgrad
>600	Identifier	subgrad
>601	Identifier	param
>602	ExpressionStatement	 
>603	AssignmentExpr	param . ista = getScalarStructDef < bool > ( prhs [ 4 ] , \"ista\" , false )
>604	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"ista\" , false )
>605	RelationalExpression	bool > ( prhs [ 4 ] , \"ista\" , false )
>606	Expression	prhs [ 4 ] , \"ista\" , false
>607	Expression	\"ista\" , false
>608	Identifier	false
>609	PrimaryExpression	\"ista\"
>610	ArrayIndexing	prhs [ 4 ]
>611	PrimaryExpression	4
>612	Identifier	prhs
>613	Identifier	bool
>614	Identifier	getScalarStructDef
>615	MemberAccess	param . ista
>616	Identifier	ista
>617	Identifier	param
>618	ExpressionStatement	 
>619	AssignmentExpr	param . clever = getScalarStructDef < bool > ( prhs [ 4 ] , \"clever\" , false )
>620	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"clever\" , false )
>621	RelationalExpression	bool > ( prhs [ 4 ] , \"clever\" , false )
>622	Expression	prhs [ 4 ] , \"clever\" , false
>623	Expression	\"clever\" , false
>624	Identifier	false
>625	PrimaryExpression	\"clever\"
>626	ArrayIndexing	prhs [ 4 ]
>627	PrimaryExpression	4
>628	Identifier	prhs
>629	Identifier	bool
>630	Identifier	getScalarStructDef
>631	MemberAccess	param . clever
>632	Identifier	clever
>633	Identifier	param
>634	ExpressionStatement	 
>635	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>636	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"verbose\" , false )
>637	RelationalExpression	bool > ( prhs [ 4 ] , \"verbose\" , false )
>638	Expression	prhs [ 4 ] , \"verbose\" , false
>639	Expression	\"verbose\" , false
>640	Identifier	false
>641	PrimaryExpression	\"verbose\"
>642	ArrayIndexing	prhs [ 4 ]
>643	PrimaryExpression	4
>644	Identifier	prhs
>645	Identifier	bool
>646	Identifier	getScalarStructDef
>647	MemberAccess	param . verbose
>648	Identifier	verbose
>649	Identifier	param
>650	ExpressionStatement	 
>651	AssignmentExpr	param . resetflow = getScalarStructDef < bool > ( prhs [ 4 ] , \"resetflow\" , false )
>652	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"resetflow\" , false )
>653	RelationalExpression	bool > ( prhs [ 4 ] , \"resetflow\" , false )
>654	Expression	prhs [ 4 ] , \"resetflow\" , false
>655	Expression	\"resetflow\" , false
>656	Identifier	false
>657	PrimaryExpression	\"resetflow\"
>658	ArrayIndexing	prhs [ 4 ]
>659	PrimaryExpression	4
>660	Identifier	prhs
>661	Identifier	bool
>662	Identifier	getScalarStructDef
>663	MemberAccess	param . resetflow
>664	Identifier	resetflow
>665	Identifier	param
>666	ExpressionStatement	 
>667	AssignmentExpr	param . intercept = getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>668	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"intercept\" , false )
>669	RelationalExpression	bool > ( prhs [ 4 ] , \"intercept\" , false )
>670	Expression	prhs [ 4 ] , \"intercept\" , false
>671	Expression	\"intercept\" , false
>672	Identifier	false
>673	PrimaryExpression	\"intercept\"
>674	ArrayIndexing	prhs [ 4 ]
>675	PrimaryExpression	4
>676	Identifier	prhs
>677	Identifier	bool
>678	Identifier	getScalarStructDef
>679	MemberAccess	param . intercept
>680	Identifier	intercept
>681	Identifier	param
>682	IfStatement	if ( param . loss == INCORRECT_LOSS )
>683	ExpressionStatement	 
>684	CallExpression	mexErrMsgTxt ( \"Unknown loss\" )
>685	ArgumentList	\"Unknown loss\"
>686	Argument	\"Unknown loss\"
>687	PrimaryExpression	\"Unknown loss\"
>688	Callee	mexErrMsgTxt
>689	Identifier	mexErrMsgTxt
>690	Condition	 
>691	EqualityExpression	param . loss == INCORRECT_LOSS
>692	Identifier	INCORRECT_LOSS
>693	MemberAccess	param . loss
>694	Identifier	loss
>695	Identifier	param
>696	ExpressionStatement	 
>697	AssignmentExpr	param . loss = loss_from_string ( param . name_loss )
>698	CallExpression	loss_from_string ( param . name_loss )
>699	ArgumentList	param . name_loss
>700	Argument	param . name_loss
>701	MemberAccess	param . name_loss
>702	Identifier	name_loss
>703	Identifier	param
>704	Callee	loss_from_string
>705	Identifier	loss_from_string
>706	MemberAccess	param . loss
>707	Identifier	loss
>708	Identifier	param
>709	ExpressionStatement	 
>710	CallExpression	getStringStruct ( prhs [ 4 ] , \"loss\" , param . name_loss , param . length_names )
>711	ArgumentList	prhs [ 4 ]
>712	Argument	param . length_names
>713	MemberAccess	param . length_names
>714	Identifier	length_names
>715	Identifier	param
>716	Argument	param . name_loss
>717	MemberAccess	param . name_loss
>718	Identifier	name_loss
>719	Identifier	param
>720	Argument	\"loss\"
>721	PrimaryExpression	\"loss\"
>722	Argument	prhs [ 4 ]
>723	ArrayIndexing	prhs [ 4 ]
>724	PrimaryExpression	4
>725	Identifier	prhs
>726	Callee	getStringStruct
>727	Identifier	getStringStruct
>728	IfStatement	if ( param . regul == INCORRECT_REG )
>729	ExpressionStatement	 
>730	CallExpression	mexErrMsgTxt ( \"Unknown regularization\" )
>731	ArgumentList	\"Unknown regularization\"
>732	Argument	\"Unknown regularization\"
>733	PrimaryExpression	\"Unknown regularization\"
>734	Callee	mexErrMsgTxt
>735	Identifier	mexErrMsgTxt
>736	Condition	 
>737	EqualityExpression	param . regul == INCORRECT_REG
>738	Identifier	INCORRECT_REG
>739	MemberAccess	param . regul
>740	Identifier	regul
>741	Identifier	param
>742	ExpressionStatement	 
>743	AssignmentExpr	param . regul = regul_from_string ( param . name_regul )
>744	CallExpression	regul_from_string ( param . name_regul )
>745	ArgumentList	param . name_regul
>746	Argument	param . name_regul
>747	MemberAccess	param . name_regul
>748	Identifier	name_regul
>749	Identifier	param
>750	Callee	regul_from_string
>751	Identifier	regul_from_string
>752	MemberAccess	param . regul
>753	Identifier	regul
>754	Identifier	param
>755	IfStatement	if ( param . is_inner_weights )
>756	CompoundStatement	 
>757	ExpressionStatement	 
>758	CallExpression	mxGetPr ( ppr_inner_weights )
>759	ArgumentList	ppr_inner_weights
>760	Argument	ppr_inner_weights
>761	Identifier	ppr_inner_weights
>762	Callee	mxGetPr
>763	Identifier	mxGetPr
>764	Statement	 
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	IfStatement	if ( ! mexCheckType < T > ( ppr_inner_weights ) )
>774	ExpressionStatement	 
>775	CallExpression	mexErrMsgTxt ( \"type of inner_weights is not correct\" )
>776	ArgumentList	\"type of inner_weights is not correct\"
>777	Argument	\"type of inner_weights is not correct\"
>778	PrimaryExpression	\"type of inner_weights is not correct\"
>779	Callee	mexErrMsgTxt
>780	Identifier	mexErrMsgTxt
>781	Condition	 
>782	RelationalExpression	! mexCheckType < T > ( ppr_inner_weights )
>783	RelationalExpression	T > ( ppr_inner_weights )
>784	Identifier	ppr_inner_weights
>785	Identifier	T
>786	UnaryOp	! mexCheckType
>787	Identifier	mexCheckType
>788	UnaryOperator	!
>789	IfStatement	if ( ! ppr_inner_weights )
>790	ExpressionStatement	 
>791	CallExpression	mexErrMsgTxt ( \"field inner_weights is not provided\" )
>792	ArgumentList	\"field inner_weights is not provided\"
>793	Argument	\"field inner_weights is not provided\"
>794	PrimaryExpression	\"field inner_weights is not provided\"
>795	Callee	mexErrMsgTxt
>796	Identifier	mexErrMsgTxt
>797	Condition	 
>798	UnaryOp	! ppr_inner_weights
>799	Identifier	ppr_inner_weights
>800	UnaryOperator	!
>801	IdentifierDeclStatement	 
>802	IdentifierDecl	* ppr_inner_weights = mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>803	AssignmentExpr	* ppr_inner_weights = mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>804	CallExpression	mxGetField ( prhs [ 4 ] , 0 , \"inner_weights\" )
>805	ArgumentList	prhs [ 4 ]
>806	Argument	\"inner_weights\"
>807	PrimaryExpression	\"inner_weights\"
>808	Argument	0
>809	PrimaryExpression	0
>810	Argument	prhs [ 4 ]
>811	ArrayIndexing	prhs [ 4 ]
>812	PrimaryExpression	4
>813	Identifier	prhs
>814	Callee	mxGetField
>815	Identifier	mxGetField
>816	Identifier	ppr_inner_weights
>817	Identifier	ppr_inner_weights
>818	IdentifierDeclType	mxArray *
>819	Condition	 
>820	MemberAccess	param . is_inner_weights
>821	Identifier	is_inner_weights
>822	Identifier	param
>823	ExpressionStatement	 
>824	CallExpression	getStringStruct ( prhs [ 4 ] , \"regul\" , param . name_regul , param . length_names )
>825	ArgumentList	prhs [ 4 ]
>826	Argument	param . length_names
>827	MemberAccess	param . length_names
>828	Identifier	length_names
>829	Identifier	param
>830	Argument	param . name_regul
>831	MemberAccess	param . name_regul
>832	Identifier	name_regul
>833	Identifier	param
>834	Argument	\"regul\"
>835	PrimaryExpression	\"regul\"
>836	Argument	prhs [ 4 ]
>837	ArrayIndexing	prhs [ 4 ]
>838	PrimaryExpression	4
>839	Identifier	prhs
>840	Callee	getStringStruct
>841	Identifier	getStringStruct
>842	ExpressionStatement	 
>843	AssignmentExpr	param . transpose = getScalarStructDef < bool > ( prhs [ 4 ] , \"transpose\" , false )
>844	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"transpose\" , false )
>845	RelationalExpression	bool > ( prhs [ 4 ] , \"transpose\" , false )
>846	Expression	prhs [ 4 ] , \"transpose\" , false
>847	Expression	\"transpose\" , false
>848	Identifier	false
>849	PrimaryExpression	\"transpose\"
>850	ArrayIndexing	prhs [ 4 ]
>851	PrimaryExpression	4
>852	Identifier	prhs
>853	Identifier	bool
>854	Identifier	getScalarStructDef
>855	MemberAccess	param . transpose
>856	Identifier	transpose
>857	Identifier	param
>858	ExpressionStatement	 
>859	AssignmentExpr	param . is_inner_weights = getScalarStructDef < bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>860	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>861	RelationalExpression	bool > ( prhs [ 4 ] , \"is_inner_weights\" , false )
>862	Expression	prhs [ 4 ] , \"is_inner_weights\" , false
>863	Expression	\"is_inner_weights\" , false
>864	Identifier	false
>865	PrimaryExpression	\"is_inner_weights\"
>866	ArrayIndexing	prhs [ 4 ]
>867	PrimaryExpression	4
>868	Identifier	prhs
>869	Identifier	bool
>870	Identifier	getScalarStructDef
>871	MemberAccess	param . is_inner_weights
>872	Identifier	is_inner_weights
>873	Identifier	param
>874	ExpressionStatement	 
>875	AssignmentExpr	param . sqrt_step = getScalarStructDef < bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>876	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>877	RelationalExpression	bool > ( prhs [ 4 ] , \"sqrt_step\" , true )
>878	Expression	prhs [ 4 ] , \"sqrt_step\" , true
>879	Expression	\"sqrt_step\" , true
>880	Identifier	true
>881	PrimaryExpression	\"sqrt_step\"
>882	ArrayIndexing	prhs [ 4 ]
>883	PrimaryExpression	4
>884	Identifier	prhs
>885	Identifier	bool
>886	Identifier	getScalarStructDef
>887	MemberAccess	param . sqrt_step
>888	Identifier	sqrt_step
>889	Identifier	param
>890	ExpressionStatement	 
>891	AssignmentExpr	param . lin_admm = getScalarStructDef < bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>892	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>893	RelationalExpression	bool > ( prhs [ 4 ] , \"lin_admm\" , false )
>894	Expression	prhs [ 4 ] , \"lin_admm\" , false
>895	Expression	\"lin_admm\" , false
>896	Identifier	false
>897	PrimaryExpression	\"lin_admm\"
>898	ArrayIndexing	prhs [ 4 ]
>899	PrimaryExpression	4
>900	Identifier	prhs
>901	Identifier	bool
>902	Identifier	getScalarStructDef
>903	MemberAccess	param . lin_admm
>904	Identifier	lin_admm
>905	Identifier	param
>906	ExpressionStatement	 
>907	AssignmentExpr	param . admm = getScalarStructDef < bool > ( prhs [ 4 ] , \"admm\" , false )
>908	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"admm\" , false )
>909	RelationalExpression	bool > ( prhs [ 4 ] , \"admm\" , false )
>910	Expression	prhs [ 4 ] , \"admm\" , false
>911	Expression	\"admm\" , false
>912	Identifier	false
>913	PrimaryExpression	\"admm\"
>914	ArrayIndexing	prhs [ 4 ]
>915	PrimaryExpression	4
>916	Identifier	prhs
>917	Identifier	bool
>918	Identifier	getScalarStructDef
>919	MemberAccess	param . admm
>920	Identifier	admm
>921	Identifier	param
>922	ExpressionStatement	 
>923	Expression	prhs [ 4 ] , \"size_group\" , 1
>924	Expression	\"size_group\" , 1
>925	PrimaryExpression	1
>926	PrimaryExpression	\"size_group\"
>927	ArrayIndexing	prhs [ 4 ]
>928	PrimaryExpression	4
>929	Identifier	prhs
>930	Statement	 
>931	Statement	 
>932	Statement	 
>933	Statement	 
>934	Statement	 
>935	Statement	 
>936	Statement	 
>937	Statement	 
>938	ExpressionStatement	 
>939	AssignmentExpr	param . lambda3 = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>940	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>941	RelationalExpression	T > ( prhs [ 4 ] , \"lambda3\" , 0.0 )
>942	Expression	prhs [ 4 ] , \"lambda3\" , 0.0
>943	Expression	\"lambda3\" , 0.0
>944	PrimaryExpression	0.0
>945	PrimaryExpression	\"lambda3\"
>946	ArrayIndexing	prhs [ 4 ]
>947	PrimaryExpression	4
>948	Identifier	prhs
>949	Identifier	T
>950	Identifier	getScalarStructDef
>951	MemberAccess	param . lambda3
>952	Identifier	lambda3
>953	Identifier	param
>954	ExpressionStatement	 
>955	AssignmentExpr	param . lambda2 = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>956	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>957	RelationalExpression	T > ( prhs [ 4 ] , \"lambda2\" , 0.0 )
>958	Expression	prhs [ 4 ] , \"lambda2\" , 0.0
>959	Expression	\"lambda2\" , 0.0
>960	PrimaryExpression	0.0
>961	PrimaryExpression	\"lambda2\"
>962	ArrayIndexing	prhs [ 4 ]
>963	PrimaryExpression	4
>964	Identifier	prhs
>965	Identifier	T
>966	Identifier	getScalarStructDef
>967	MemberAccess	param . lambda2
>968	Identifier	lambda2
>969	Identifier	param
>970	ExpressionStatement	 
>971	AssignmentExpr	param . delta = getScalarStructDef < T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>972	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>973	RelationalExpression	T > ( prhs [ 4 ] , \"delta\" , 1.0 )
>974	Expression	prhs [ 4 ] , \"delta\" , 1.0
>975	Expression	\"delta\" , 1.0
>976	PrimaryExpression	1.0
>977	PrimaryExpression	\"delta\"
>978	ArrayIndexing	prhs [ 4 ]
>979	PrimaryExpression	4
>980	Identifier	prhs
>981	Identifier	T
>982	Identifier	getScalarStructDef
>983	MemberAccess	param . delta
>984	Identifier	delta
>985	Identifier	param
>986	ExpressionStatement	 
>987	AssignmentExpr	param . lambda = getScalarStructDef < T > ( prhs [ 4 ] , \"lambda\" , 1.0 )
>988	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"lambda\" , 1.0 )
>989	RelationalExpression	T > ( prhs [ 4 ] , \"lambda\" , 1.0 )
>990	Expression	prhs [ 4 ] , \"lambda\" , 1.0
>991	Expression	\"lambda\" , 1.0
>992	PrimaryExpression	1.0
>993	PrimaryExpression	\"lambda\"
>994	ArrayIndexing	prhs [ 4 ]
>995	PrimaryExpression	4
>996	Identifier	prhs
>997	Identifier	T
>998	Identifier	getScalarStructDef
>999	MemberAccess	param . lambda
>1000	Identifier	lambda
>1001	Identifier	param
>1002	ExpressionStatement	 
>1003	AssignmentExpr	param . c = getScalarStructDef < T > ( prhs [ 4 ] , \"c\" , 1.0 )
>1004	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"c\" , 1.0 )
>1005	RelationalExpression	T > ( prhs [ 4 ] , \"c\" , 1.0 )
>1006	Expression	prhs [ 4 ] , \"c\" , 1.0
>1007	Expression	\"c\" , 1.0
>1008	PrimaryExpression	1.0
>1009	PrimaryExpression	\"c\"
>1010	ArrayIndexing	prhs [ 4 ]
>1011	PrimaryExpression	4
>1012	Identifier	prhs
>1013	Identifier	T
>1014	Identifier	getScalarStructDef
>1015	MemberAccess	param . c
>1016	Identifier	c
>1017	Identifier	param
>1018	ExpressionStatement	 
>1019	AssignmentExpr	param . gamma = MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 ) )
>1020	CallExpression	MAX ( 1.01 , getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 ) )
>1021	ArgumentList	1.01
>1022	Argument	getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>1023	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>1024	RelationalExpression	T > ( prhs [ 4 ] , \"gamma\" , 1.5 )
>1025	Expression	prhs [ 4 ] , \"gamma\" , 1.5
>1026	Expression	\"gamma\" , 1.5
>1027	PrimaryExpression	1.5
>1028	PrimaryExpression	\"gamma\"
>1029	ArrayIndexing	prhs [ 4 ]
>1030	PrimaryExpression	4
>1031	Identifier	prhs
>1032	Identifier	T
>1033	Identifier	getScalarStructDef
>1034	Argument	1.01
>1035	PrimaryExpression	1.01
>1036	Callee	MAX
>1037	Identifier	MAX
>1038	MemberAccess	param . gamma
>1039	Identifier	gamma
>1040	Identifier	param
>1041	ExpressionStatement	 
>1042	AssignmentExpr	param . fixed_step = getScalarStructDef < T > ( prhs [ 4 ] , \"fixed_step\" , false )
>1043	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"fixed_step\" , false )
>1044	RelationalExpression	T > ( prhs [ 4 ] , \"fixed_step\" , false )
>1045	Expression	prhs [ 4 ] , \"fixed_step\" , false
>1046	Expression	\"fixed_step\" , false
>1047	Identifier	false
>1048	PrimaryExpression	\"fixed_step\"
>1049	ArrayIndexing	prhs [ 4 ]
>1050	PrimaryExpression	4
>1051	Identifier	prhs
>1052	Identifier	T
>1053	Identifier	getScalarStructDef
>1054	MemberAccess	param . fixed_step
>1055	Identifier	fixed_step
>1056	Identifier	param
>1057	ExpressionStatement	 
>1058	AssignmentExpr	param . L0 = getScalarStructDef < T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>1059	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>1060	RelationalExpression	T > ( prhs [ 4 ] , \"L0\" , 1.0 )
>1061	Expression	prhs [ 4 ] , \"L0\" , 1.0
>1062	Expression	\"L0\" , 1.0
>1063	PrimaryExpression	1.0
>1064	PrimaryExpression	\"L0\"
>1065	ArrayIndexing	prhs [ 4 ]
>1066	PrimaryExpression	4
>1067	Identifier	prhs
>1068	Identifier	T
>1069	Identifier	getScalarStructDef
>1070	MemberAccess	param . L0
>1071	Identifier	L0
>1072	Identifier	param
>1073	ExpressionStatement	 
>1074	Expression	prhs [ 4 ] , \"max_iter_backtracking\" , 1000
>1075	Expression	\"max_iter_backtracking\" , 1000
>1076	PrimaryExpression	1000
>1077	PrimaryExpression	\"max_iter_backtracking\"
>1078	ArrayIndexing	prhs [ 4 ]
>1079	PrimaryExpression	4
>1080	Identifier	prhs
>1081	Statement	 
>1082	Statement	 
>1083	Statement	 
>1084	Statement	 
>1085	Statement	 
>1086	Statement	 
>1087	Statement	 
>1088	Statement	 
>1089	ExpressionStatement	 
>1090	AssignmentExpr	param . compute_gram = getScalarStructDef < bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1091	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1092	RelationalExpression	bool > ( prhs [ 4 ] , \"compute_gram\" , false )
>1093	Expression	prhs [ 4 ] , \"compute_gram\" , false
>1094	Expression	\"compute_gram\" , false
>1095	Identifier	false
>1096	PrimaryExpression	\"compute_gram\"
>1097	ArrayIndexing	prhs [ 4 ]
>1098	PrimaryExpression	4
>1099	Identifier	prhs
>1100	Identifier	bool
>1101	Identifier	getScalarStructDef
>1102	MemberAccess	param . compute_gram
>1103	Identifier	compute_gram
>1104	Identifier	param
>1105	ExpressionStatement	 
>1106	AssignmentExpr	param . pos = getScalarStructDef < bool > ( prhs [ 4 ] , \"pos\" , false )
>1107	RelationalExpression	getScalarStructDef < bool > ( prhs [ 4 ] , \"pos\" , false )
>1108	RelationalExpression	bool > ( prhs [ 4 ] , \"pos\" , false )
>1109	Expression	prhs [ 4 ] , \"pos\" , false
>1110	Expression	\"pos\" , false
>1111	Identifier	false
>1112	PrimaryExpression	\"pos\"
>1113	ArrayIndexing	prhs [ 4 ]
>1114	PrimaryExpression	4
>1115	Identifier	prhs
>1116	Identifier	bool
>1117	Identifier	getScalarStructDef
>1118	MemberAccess	param . pos
>1119	Identifier	pos
>1120	Identifier	param
>1121	ExpressionStatement	 
>1122	Expression	prhs [ 4 ] , \"it0\" , 100
>1123	Expression	\"it0\" , 100
>1124	PrimaryExpression	100
>1125	PrimaryExpression	\"it0\"
>1126	ArrayIndexing	prhs [ 4 ]
>1127	PrimaryExpression	4
>1128	Identifier	prhs
>1129	Statement	 
>1130	Statement	 
>1131	Statement	 
>1132	Statement	 
>1133	Statement	 
>1134	Statement	 
>1135	Statement	 
>1136	Statement	 
>1137	ExpressionStatement	 
>1138	AssignmentExpr	param . tol = getScalarStructDef < T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1139	RelationalExpression	getScalarStructDef < T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1140	RelationalExpression	T > ( prhs [ 4 ] , \"tol\" , 0.000001 )
>1141	Expression	prhs [ 4 ] , \"tol\" , 0.000001
>1142	Expression	\"tol\" , 0.000001
>1143	PrimaryExpression	0.000001
>1144	PrimaryExpression	\"tol\"
>1145	ArrayIndexing	prhs [ 4 ]
>1146	PrimaryExpression	4
>1147	Identifier	prhs
>1148	Identifier	T
>1149	Identifier	getScalarStructDef
>1150	MemberAccess	param . tol
>1151	Identifier	tol
>1152	Identifier	param
>1153	ExpressionStatement	 
>1154	Expression	prhs [ 4 ] , \"max_it\" , 1000
>1155	Expression	\"max_it\" , 1000
>1156	PrimaryExpression	1000
>1157	PrimaryExpression	\"max_it\"
>1158	ArrayIndexing	prhs [ 4 ]
>1159	PrimaryExpression	4
>1160	Identifier	prhs
>1161	Statement	 
>1162	Statement	 
>1163	Statement	 
>1164	Statement	 
>1165	Statement	 
>1166	Statement	 
>1167	Statement	 
>1168	Statement	 
>1169	ExpressionStatement	 
>1170	Expression	prhs [ 4 ] , \"numThreads\" , - 1
>1171	Expression	\"numThreads\" , - 1
>1172	UnaryOp	- 1
>1173	PrimaryExpression	1
>1174	UnaryOperator	-
>1175	PrimaryExpression	\"numThreads\"
>1176	ArrayIndexing	prhs [ 4 ]
>1177	PrimaryExpression	4
>1178	Identifier	prhs
>1179	Statement	 
>1180	Statement	 
>1181	Statement	 
>1182	Statement	 
>1183	Statement	 
>1184	Statement	 
>1185	Statement	 
>1186	Statement	 
>1187	IdentifierDeclStatement	 
>1188	IdentifierDecl	param
>1189	Identifier	param
>1190	IdentifierDeclType	FISTA 
>1191	IdentifierDeclStatement	 
>1192	IdentifierDecl	alpha ( pr_alpha , pAlpha , nAlpha )
>1193	Expression	pr_alpha , pAlpha , nAlpha
>1194	Expression	pAlpha , nAlpha
>1195	Identifier	nAlpha
>1196	Identifier	pAlpha
>1197	Identifier	pr_alpha
>1198	Identifier	alpha
>1199	IdentifierDeclType	Matrix < T >
>1200	ExpressionStatement	 
>1201	CallExpression	mxGetPr ( plhs [ 0 ] )
>1202	ArgumentList	plhs [ 0 ]
>1203	Argument	plhs [ 0 ]
>1204	ArrayIndexing	plhs [ 0 ]
>1205	PrimaryExpression	0
>1206	Identifier	plhs
>1207	Callee	mxGetPr
>1208	Identifier	mxGetPr
>1209	Statement	 
>1210	Statement	 
>1211	Statement	 
>1212	Statement	 
>1213	Statement	 
>1214	Statement	 
>1215	Statement	 
>1216	Statement	 
>1217	Statement	 
>1218	ExpressionStatement	 
>1219	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( pAlpha , nAlpha )
>1220	RelationalExpression	createMatrix < T > ( pAlpha , nAlpha )
>1221	RelationalExpression	T > ( pAlpha , nAlpha )
>1222	Expression	pAlpha , nAlpha
>1223	Identifier	nAlpha
>1224	Identifier	pAlpha
>1225	Identifier	T
>1226	Identifier	createMatrix
>1227	ArrayIndexing	plhs [ 0 ]
>1228	PrimaryExpression	0
>1229	Identifier	plhs
>1230	IfStatement	if ( mm1 != 1 || nnG != nG )
>1231	ExpressionStatement	 
>1232	CallExpression	mexErrMsgTxt ( \"size of field eta_g is not consistent\" )
>1233	ArgumentList	\"size of field eta_g is not consistent\"
>1234	Argument	\"size of field eta_g is not consistent\"
>1235	PrimaryExpression	\"size of field eta_g is not consistent\"
>1236	Callee	mexErrMsgTxt
>1237	Identifier	mexErrMsgTxt
>1238	Condition	 
>1239	OrExpression	mm1 != 1 || nnG != nG
>1240	EqualityExpression	nnG != nG
>1241	Identifier	nG
>1242	Identifier	nnG
>1243	EqualityExpression	mm1 != 1
>1244	PrimaryExpression	1
>1245	Identifier	mm1
>1246	ExpressionStatement	 
>1247	ArrayIndexing	dims_weights [ 1 ]
>1248	PrimaryExpression	1
>1249	Identifier	dims_weights
>1250	Statement	 
>1251	Statement	 
>1252	Statement	 
>1253	Statement	 
>1254	Statement	 
>1255	Statement	 
>1256	Statement	 
>1257	ExpressionStatement	 
>1258	ArrayIndexing	dims_weights [ 0 ]
>1259	PrimaryExpression	0
>1260	Identifier	dims_weights
>1261	Statement	 
>1262	Statement	 
>1263	Statement	 
>1264	Statement	 
>1265	Statement	 
>1266	Statement	 
>1267	Statement	 
>1268	IdentifierDeclStatement	 
>1269	IdentifierDecl	* dims_weights = mxGetDimensions ( ppr_weights )
>1270	AssignmentExpr	* dims_weights = mxGetDimensions ( ppr_weights )
>1271	CallExpression	mxGetDimensions ( ppr_weights )
>1272	ArgumentList	ppr_weights
>1273	Argument	ppr_weights
>1274	Identifier	ppr_weights
>1275	Callee	mxGetDimensions
>1276	Identifier	mxGetDimensions
>1277	Identifier	dims_weights
>1278	Identifier	dims_weights
>1279	IdentifierDeclType	const mwSize *
>1280	ExpressionStatement	 
>1281	CallExpression	mxGetPr ( ppr_weights )
>1282	ArgumentList	ppr_weights
>1283	Argument	ppr_weights
>1284	Identifier	ppr_weights
>1285	Callee	mxGetPr
>1286	Identifier	mxGetPr
>1287	Statement	 
>1288	Statement	 
>1289	Statement	 
>1290	Statement	 
>1291	Statement	 
>1292	Statement	 
>1293	Statement	 
>1294	Statement	 
>1295	Statement	 
>1296	IfStatement	if ( mxIsSparse ( ppr_weights ) )
>1297	ExpressionStatement	 
>1298	CallExpression	mexErrMsgTxt ( \"field eta_g should not be sparse\" )
>1299	ArgumentList	\"field eta_g should not be sparse\"
>1300	Argument	\"field eta_g should not be sparse\"
>1301	PrimaryExpression	\"field eta_g should not be sparse\"
>1302	Callee	mexErrMsgTxt
>1303	Identifier	mexErrMsgTxt
>1304	Condition	 
>1305	CallExpression	mxIsSparse ( ppr_weights )
>1306	ArgumentList	ppr_weights
>1307	Argument	ppr_weights
>1308	Identifier	ppr_weights
>1309	Callee	mxIsSparse
>1310	Identifier	mxIsSparse
>1311	IdentifierDeclStatement	 
>1312	IdentifierDecl	* ppr_weights = mxGetField ( prhs [ 3 ] , 0 , \"eta_g\" )
>1313	AssignmentExpr	* ppr_weights = mxGetField ( prhs [ 3 ] , 0 , \"eta_g\" )
>1314	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"eta_g\" )
>1315	ArgumentList	prhs [ 3 ]
>1316	Argument	\"eta_g\"
>1317	PrimaryExpression	\"eta_g\"
>1318	Argument	0
>1319	PrimaryExpression	0
>1320	Argument	prhs [ 3 ]
>1321	ArrayIndexing	prhs [ 3 ]
>1322	PrimaryExpression	3
>1323	Identifier	prhs
>1324	Callee	mxGetField
>1325	Identifier	mxGetField
>1326	Identifier	ppr_weights
>1327	Identifier	ppr_weights
>1328	IdentifierDeclType	mxArray *
>1329	IfStatement	if ( nV <= 0 || nG != GGn )
>1330	ExpressionStatement	 
>1331	CallExpression	mexErrMsgTxt ( \"size of field groups-var is not consistent\" )
>1332	ArgumentList	\"size of field groups-var is not consistent\"
>1333	Argument	\"size of field groups-var is not consistent\"
>1334	PrimaryExpression	\"size of field groups-var is not consistent\"
>1335	Callee	mexErrMsgTxt
>1336	Identifier	mexErrMsgTxt
>1337	Condition	 
>1338	OrExpression	nV <= 0 || nG != GGn
>1339	EqualityExpression	nG != GGn
>1340	Identifier	GGn
>1341	Identifier	nG
>1342	RelationalExpression	nV <= 0
>1343	PrimaryExpression	0
>1344	Identifier	nV
>1345	ExpressionStatement	 
>1346	ArrayIndexing	dims_GV [ 1 ]
>1347	PrimaryExpression	1
>1348	Identifier	dims_GV
>1349	Statement	 
>1350	Statement	 
>1351	Statement	 
>1352	Statement	 
>1353	Statement	 
>1354	Statement	 
>1355	Statement	 
>1356	ExpressionStatement	 
>1357	ArrayIndexing	dims_GV [ 0 ]
>1358	PrimaryExpression	0
>1359	Identifier	dims_GV
>1360	Statement	 
>1361	Statement	 
>1362	Statement	 
>1363	Statement	 
>1364	Statement	 
>1365	Statement	 
>1366	Statement	 
>1367	IdentifierDeclStatement	 
>1368	IdentifierDecl	* dims_GV = mxGetDimensions ( ppr_GV )
>1369	AssignmentExpr	* dims_GV = mxGetDimensions ( ppr_GV )
>1370	CallExpression	mxGetDimensions ( ppr_GV )
>1371	ArgumentList	ppr_GV
>1372	Argument	ppr_GV
>1373	Identifier	ppr_GV
>1374	Callee	mxGetDimensions
>1375	Identifier	mxGetDimensions
>1376	Identifier	dims_GV
>1377	Identifier	dims_GV
>1378	IdentifierDeclType	const mwSize *
>1379	IdentifierDeclStatement	 
>1380	IdentifierDecl	* GV_pB = mxGetJc ( ppr_GV )
>1381	AssignmentExpr	* GV_pB = mxGetJc ( ppr_GV )
>1382	CallExpression	mxGetJc ( ppr_GV )
>1383	ArgumentList	ppr_GV
>1384	Argument	ppr_GV
>1385	Identifier	ppr_GV
>1386	Callee	mxGetJc
>1387	Identifier	mxGetJc
>1388	Identifier	GV_pB
>1389	Identifier	GV_pB
>1390	IdentifierDeclType	mwSize *
>1391	IdentifierDeclStatement	 
>1392	IdentifierDecl	* GV_r = mxGetIr ( ppr_GV )
>1393	AssignmentExpr	* GV_r = mxGetIr ( ppr_GV )
>1394	CallExpression	mxGetIr ( ppr_GV )
>1395	ArgumentList	ppr_GV
>1396	Argument	ppr_GV
>1397	Identifier	ppr_GV
>1398	Callee	mxGetIr
>1399	Identifier	mxGetIr
>1400	Identifier	GV_r
>1401	Identifier	GV_r
>1402	IdentifierDeclType	mwSize *
>1403	IfStatement	if ( ! mxIsSparse ( ppr_GV ) )
>1404	ExpressionStatement	 
>1405	CallExpression	mexErrMsgTxt ( \"field groups_var should be sparse\" )
>1406	ArgumentList	\"field groups_var should be sparse\"
>1407	Argument	\"field groups_var should be sparse\"
>1408	PrimaryExpression	\"field groups_var should be sparse\"
>1409	Callee	mexErrMsgTxt
>1410	Identifier	mexErrMsgTxt
>1411	Condition	 
>1412	UnaryOp	! mxIsSparse ( ppr_GV )
>1413	CallExpression	mxIsSparse ( ppr_GV )
>1414	ArgumentList	ppr_GV
>1415	Argument	ppr_GV
>1416	Identifier	ppr_GV
>1417	Callee	mxIsSparse
>1418	Identifier	mxIsSparse
>1419	UnaryOperator	!
>1420	IdentifierDeclStatement	 
>1421	IdentifierDecl	* ppr_GV = mxGetField ( prhs [ 3 ] , 0 , \"groups_var\" )
>1422	AssignmentExpr	* ppr_GV = mxGetField ( prhs [ 3 ] , 0 , \"groups_var\" )
>1423	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"groups_var\" )
>1424	ArgumentList	prhs [ 3 ]
>1425	Argument	\"groups_var\"
>1426	PrimaryExpression	\"groups_var\"
>1427	Argument	0
>1428	PrimaryExpression	0
>1429	Argument	prhs [ 3 ]
>1430	ArrayIndexing	prhs [ 3 ]
>1431	PrimaryExpression	3
>1432	Identifier	prhs
>1433	Callee	mxGetField
>1434	Identifier	mxGetField
>1435	Identifier	ppr_GV
>1436	Identifier	ppr_GV
>1437	IdentifierDeclType	mxArray *
>1438	IfStatement	if ( GGm != GGn )
>1439	ExpressionStatement	 
>1440	CallExpression	mexErrMsgTxt ( \"size of field groups is not consistent\" )
>1441	ArgumentList	\"size of field groups is not consistent\"
>1442	Argument	\"size of field groups is not consistent\"
>1443	PrimaryExpression	\"size of field groups is not consistent\"
>1444	Callee	mexErrMsgTxt
>1445	Identifier	mexErrMsgTxt
>1446	Condition	 
>1447	EqualityExpression	GGm != GGn
>1448	Identifier	GGn
>1449	Identifier	GGm
>1450	ExpressionStatement	 
>1451	ArrayIndexing	dims_GG [ 1 ]
>1452	PrimaryExpression	1
>1453	Identifier	dims_GG
>1454	Statement	 
>1455	Statement	 
>1456	Statement	 
>1457	Statement	 
>1458	Statement	 
>1459	Statement	 
>1460	Statement	 
>1461	ExpressionStatement	 
>1462	ArrayIndexing	dims_GG [ 0 ]
>1463	PrimaryExpression	0
>1464	Identifier	dims_GG
>1465	Statement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	Statement	 
>1472	IdentifierDeclStatement	 
>1473	IdentifierDecl	* dims_GG = mxGetDimensions ( ppr_GG )
>1474	AssignmentExpr	* dims_GG = mxGetDimensions ( ppr_GG )
>1475	CallExpression	mxGetDimensions ( ppr_GG )
>1476	ArgumentList	ppr_GG
>1477	Argument	ppr_GG
>1478	Identifier	ppr_GG
>1479	Callee	mxGetDimensions
>1480	Identifier	mxGetDimensions
>1481	Identifier	dims_GG
>1482	Identifier	dims_GG
>1483	IdentifierDeclType	const mwSize *
>1484	IdentifierDeclStatement	 
>1485	IdentifierDecl	* GG_pB = mxGetJc ( ppr_GG )
>1486	AssignmentExpr	* GG_pB = mxGetJc ( ppr_GG )
>1487	CallExpression	mxGetJc ( ppr_GG )
>1488	ArgumentList	ppr_GG
>1489	Argument	ppr_GG
>1490	Identifier	ppr_GG
>1491	Callee	mxGetJc
>1492	Identifier	mxGetJc
>1493	Identifier	GG_pB
>1494	Identifier	GG_pB
>1495	IdentifierDeclType	mwSize *
>1496	IdentifierDeclStatement	 
>1497	IdentifierDecl	* GG_r = mxGetIr ( ppr_GG )
>1498	AssignmentExpr	* GG_r = mxGetIr ( ppr_GG )
>1499	CallExpression	mxGetIr ( ppr_GG )
>1500	ArgumentList	ppr_GG
>1501	Argument	ppr_GG
>1502	Identifier	ppr_GG
>1503	Callee	mxGetIr
>1504	Identifier	mxGetIr
>1505	Identifier	GG_r
>1506	Identifier	GG_r
>1507	IdentifierDeclType	mwSize *
>1508	IfStatement	if ( ! mxIsSparse ( ppr_GG ) )
>1509	ExpressionStatement	 
>1510	CallExpression	mexErrMsgTxt ( \"field groups should be sparse\" )
>1511	ArgumentList	\"field groups should be sparse\"
>1512	Argument	\"field groups should be sparse\"
>1513	PrimaryExpression	\"field groups should be sparse\"
>1514	Callee	mexErrMsgTxt
>1515	Identifier	mexErrMsgTxt
>1516	Condition	 
>1517	UnaryOp	! mxIsSparse ( ppr_GG )
>1518	CallExpression	mxIsSparse ( ppr_GG )
>1519	ArgumentList	ppr_GG
>1520	Argument	ppr_GG
>1521	Identifier	ppr_GG
>1522	Callee	mxIsSparse
>1523	Identifier	mxIsSparse
>1524	UnaryOperator	!
>1525	IdentifierDeclStatement	 
>1526	IdentifierDecl	* ppr_GG = mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1527	AssignmentExpr	* ppr_GG = mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1528	CallExpression	mxGetField ( prhs [ 3 ] , 0 , \"groups\" )
>1529	ArgumentList	prhs [ 3 ]
>1530	Argument	\"groups\"
>1531	PrimaryExpression	\"groups\"
>1532	Argument	0
>1533	PrimaryExpression	0
>1534	Argument	prhs [ 3 ]
>1535	ArrayIndexing	prhs [ 3 ]
>1536	PrimaryExpression	3
>1537	Identifier	prhs
>1538	Callee	mxGetField
>1539	Identifier	mxGetField
>1540	Identifier	ppr_GG
>1541	Identifier	ppr_GG
>1542	IdentifierDeclType	mxArray *
>1543	IdentifierDeclStatement	 
>1544	IdentifierDecl	alpha0 ( pr_alpha0 , pAlpha , nAlpha )
>1545	Expression	pr_alpha0 , pAlpha , nAlpha
>1546	Expression	pAlpha , nAlpha
>1547	Identifier	nAlpha
>1548	Identifier	pAlpha
>1549	Identifier	pr_alpha0
>1550	Identifier	alpha0
>1551	IdentifierDeclType	Matrix < T >
>1552	ExpressionStatement	 
>1553	ArrayIndexing	dimsAlpha [ 1 ]
>1554	PrimaryExpression	1
>1555	Identifier	dimsAlpha
>1556	Statement	 
>1557	Statement	 
>1558	Statement	 
>1559	Statement	 
>1560	Statement	 
>1561	Statement	 
>1562	Statement	 
>1563	ExpressionStatement	 
>1564	ArrayIndexing	dimsAlpha [ 0 ]
>1565	PrimaryExpression	0
>1566	Identifier	dimsAlpha
>1567	Statement	 
>1568	Statement	 
>1569	Statement	 
>1570	Statement	 
>1571	Statement	 
>1572	Statement	 
>1573	Statement	 
>1574	IdentifierDeclStatement	 
>1575	IdentifierDecl	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1576	AssignmentExpr	* dimsAlpha = mxGetDimensions ( prhs [ 2 ] )
>1577	CallExpression	mxGetDimensions ( prhs [ 2 ] )
>1578	ArgumentList	prhs [ 2 ]
>1579	Argument	prhs [ 2 ]
>1580	ArrayIndexing	prhs [ 2 ]
>1581	PrimaryExpression	2
>1582	Identifier	prhs
>1583	Callee	mxGetDimensions
>1584	Identifier	mxGetDimensions
>1585	Identifier	dimsAlpha
>1586	Identifier	dimsAlpha
>1587	IdentifierDeclType	const mwSize *
>1588	ExpressionStatement	 
>1589	CallExpression	mxGetPr ( prhs [ 2 ] )
>1590	ArgumentList	prhs [ 2 ]
>1591	Argument	prhs [ 2 ]
>1592	ArrayIndexing	prhs [ 2 ]
>1593	PrimaryExpression	2
>1594	Identifier	prhs
>1595	Callee	mxGetPr
>1596	Identifier	mxGetPr
>1597	Statement	 
>1598	Statement	 
>1599	Statement	 
>1600	Statement	 
>1601	Statement	 
>1602	Statement	 
>1603	Statement	 
>1604	Statement	 
>1605	Statement	 
>1606	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>1607	ElseStatement	else
>1608	CompoundStatement	 
>1609	ExpressionStatement	 
>1610	AssignmentExpr	D = new Matrix < T > ( prD , m , p )
>1611	Expression	prD , m , p
>1612	Expression	m , p
>1613	Identifier	p
>1614	Identifier	m
>1615	Identifier	prD
>1616	Identifier	D
>1617	ExpressionStatement	 
>1618	CallExpression	mxGetPr ( prhs [ 1 ] )
>1619	ArgumentList	prhs [ 1 ]
>1620	Argument	prhs [ 1 ]
>1621	ArrayIndexing	prhs [ 1 ]
>1622	PrimaryExpression	1
>1623	Identifier	prhs
>1624	Callee	mxGetPr
>1625	Identifier	mxGetPr
>1626	Statement	 
>1627	Statement	 
>1628	Statement	 
>1629	Statement	 
>1630	Statement	 
>1631	Statement	 
>1632	Statement	 
>1633	Statement	 
>1634	Statement	 
>1635	CompoundStatement	 
>1636	ExpressionStatement	 
>1637	AssignmentExpr	D = new SpMatrix < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ] )
>1638	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1639	Expression	D_r2 , D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1640	Expression	D_pB2 , D_pE2 , mD , p , D_pB2 [ p ]
>1641	Expression	D_pE2 , mD , p , D_pB2 [ p ]
>1642	Expression	mD , p , D_pB2 [ p ]
>1643	Expression	p , D_pB2 [ p ]
>1644	ArrayIndexing	D_pB2 [ p ]
>1645	Identifier	p
>1646	Identifier	D_pB2
>1647	Identifier	p
>1648	Identifier	mD
>1649	Identifier	D_pE2
>1650	Identifier	D_pB2
>1651	Identifier	D_r2
>1652	Identifier	D_v2
>1653	Identifier	D
>1654	ExpressionStatement	 
>1655	RelationalExpression	createCopySparse < T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1656	RelationalExpression	T > ( D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p )
>1657	Expression	D_v2 , D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1658	Expression	D_r2 , D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1659	Expression	D_pB2 , D_pE2 , D_v , D_r , D_pB , D_pE , p
>1660	Expression	D_pE2 , D_v , D_r , D_pB , D_pE , p
>1661	Expression	D_v , D_r , D_pB , D_pE , p
>1662	Expression	D_r , D_pB , D_pE , p
>1663	Expression	D_pB , D_pE , p
>1664	Expression	D_pE , p
>1665	Identifier	p
>1666	Identifier	D_pE
>1667	Identifier	D_pB
>1668	Identifier	D_r
>1669	Identifier	D_v
>1670	Identifier	D_pE2
>1671	Identifier	D_pB2
>1672	Identifier	D_r2
>1673	Identifier	D_v2
>1674	Identifier	T
>1675	Identifier	createCopySparse
>1676	ExpressionStatement	 
>1677	AssignmentExpr	D_pE = D_pB + 1
>1678	AdditiveExpression	D_pB + 1
>1679	PrimaryExpression	1
>1680	Identifier	D_pB
>1681	Identifier	D_pE
>1682	ExpressionStatement	 
>1683	AssignmentExpr	D_pB = mxGetJc ( prhs [ 1 ] )
>1684	CallExpression	mxGetJc ( prhs [ 1 ] )
>1685	ArgumentList	prhs [ 1 ]
>1686	Argument	prhs [ 1 ]
>1687	ArrayIndexing	prhs [ 1 ]
>1688	PrimaryExpression	1
>1689	Identifier	prhs
>1690	Callee	mxGetJc
>1691	Identifier	mxGetJc
>1692	Identifier	D_pB
>1693	ExpressionStatement	 
>1694	AssignmentExpr	D_r = mxGetIr ( prhs [ 1 ] )
>1695	CallExpression	mxGetIr ( prhs [ 1 ] )
>1696	ArgumentList	prhs [ 1 ]
>1697	Argument	prhs [ 1 ]
>1698	ArrayIndexing	prhs [ 1 ]
>1699	PrimaryExpression	1
>1700	Identifier	prhs
>1701	Callee	mxGetIr
>1702	Identifier	mxGetIr
>1703	Identifier	D_r
>1704	ExpressionStatement	 
>1705	CallExpression	mxGetPr ( prhs [ 1 ] )
>1706	ArgumentList	prhs [ 1 ]
>1707	Argument	prhs [ 1 ]
>1708	ArrayIndexing	prhs [ 1 ]
>1709	PrimaryExpression	1
>1710	Identifier	prhs
>1711	Callee	mxGetPr
>1712	Identifier	mxGetPr
>1713	Statement	 
>1714	Statement	 
>1715	Statement	 
>1716	Statement	 
>1717	Statement	 
>1718	Statement	 
>1719	Statement	 
>1720	Condition	 
>1721	CallExpression	mxIsSparse ( prhs [ 1 ] )
>1722	ArgumentList	prhs [ 1 ]
>1723	Argument	prhs [ 1 ]
>1724	ArrayIndexing	prhs [ 1 ]
>1725	PrimaryExpression	1
>1726	Identifier	prhs
>1727	Callee	mxIsSparse
>1728	Identifier	mxIsSparse
>1729	IdentifierDeclStatement	 
>1730	IdentifierDecl	* D_v2
>1731	Identifier	D_v2
>1732	IdentifierDeclType	T *
>1733	IdentifierDeclStatement	 
>1734	IdentifierDecl	* D_pE2
>1735	Identifier	D_pE2
>1736	IdentifierDeclType	long *
>1737	IdentifierDecl	* D_pB2
>1738	Identifier	D_pB2
>1739	IdentifierDeclType	long *
>1740	IdentifierDecl	* D_r2
>1741	Identifier	D_r2
>1742	IdentifierDeclType	long *
>1743	IdentifierDeclStatement	 
>1744	IdentifierDecl	* D_pE
>1745	Identifier	D_pE
>1746	IdentifierDeclType	mwSize *
>1747	IdentifierDecl	* D_pB
>1748	Identifier	D_pB
>1749	IdentifierDeclType	mwSize *
>1750	IdentifierDecl	* D_r
>1751	Identifier	D_r
>1752	IdentifierDeclType	mwSize *
>1753	IdentifierDeclStatement	 
>1754	IdentifierDecl	* D_v
>1755	Identifier	D_v
>1756	IdentifierDeclType	double *
>1757	IdentifierDeclStatement	 
>1758	IdentifierDecl	* D
>1759	Identifier	D
>1760	IdentifierDeclType	AbstractMatrixB < T > *
>1761	ExpressionStatement	 
>1762	ArrayIndexing	dimsD [ 1 ]
>1763	PrimaryExpression	1
>1764	Identifier	dimsD
>1765	Statement	 
>1766	Statement	 
>1767	Statement	 
>1768	Statement	 
>1769	Statement	 
>1770	Statement	 
>1771	Statement	 
>1772	ExpressionStatement	 
>1773	ArrayIndexing	dimsD [ 0 ]
>1774	PrimaryExpression	0
>1775	Identifier	dimsD
>1776	Statement	 
>1777	Statement	 
>1778	Statement	 
>1779	Statement	 
>1780	Statement	 
>1781	Statement	 
>1782	Statement	 
>1783	IdentifierDeclStatement	 
>1784	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1785	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1786	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>1787	ArgumentList	prhs [ 1 ]
>1788	Argument	prhs [ 1 ]
>1789	ArrayIndexing	prhs [ 1 ]
>1790	PrimaryExpression	1
>1791	Identifier	prhs
>1792	Callee	mxGetDimensions
>1793	Identifier	mxGetDimensions
>1794	Identifier	dimsD
>1795	Identifier	dimsD
>1796	IdentifierDeclType	const mwSize *
>1797	IdentifierDeclStatement	 
>1798	IdentifierDecl	X ( prX , m , n )
>1799	Expression	prX , m , n
>1800	Expression	m , n
>1801	Identifier	n
>1802	Identifier	m
>1803	Identifier	prX
>1804	Identifier	X
>1805	IdentifierDeclType	Matrix < T >
>1806	ExpressionStatement	 
>1807	ArrayIndexing	dimsX [ 1 ]
>1808	PrimaryExpression	1
>1809	Identifier	dimsX
>1810	Statement	 
>1811	Statement	 
>1812	Statement	 
>1813	Statement	 
>1814	Statement	 
>1815	Statement	 
>1816	Statement	 
>1817	ExpressionStatement	 
>1818	ArrayIndexing	dimsX [ 0 ]
>1819	PrimaryExpression	0
>1820	Identifier	dimsX
>1821	Statement	 
>1822	Statement	 
>1823	Statement	 
>1824	Statement	 
>1825	Statement	 
>1826	Statement	 
>1827	Statement	 
>1828	IdentifierDeclStatement	 
>1829	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1830	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1831	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>1832	ArgumentList	prhs [ 0 ]
>1833	Argument	prhs [ 0 ]
>1834	ArrayIndexing	prhs [ 0 ]
>1835	PrimaryExpression	0
>1836	Identifier	prhs
>1837	Callee	mxGetDimensions
>1838	Identifier	mxGetDimensions
>1839	Identifier	dimsX
>1840	Identifier	dimsX
>1841	IdentifierDeclType	const mwSize *
>1842	ExpressionStatement	 
>1843	CallExpression	mxGetPr ( prhs [ 0 ] )
>1844	ArgumentList	prhs [ 0 ]
>1845	Argument	prhs [ 0 ]
>1846	ArrayIndexing	prhs [ 0 ]
>1847	PrimaryExpression	0
>1848	Identifier	prhs
>1849	Callee	mxGetPr
>1850	Identifier	mxGetPr
>1851	Statement	 
>1852	Statement	 
>1853	Statement	 
>1854	Statement	 
>1855	Statement	 
>1856	Statement	 
>1857	Statement	 
>1858	Statement	 
>1859	Statement	 
>1860	IfStatement	if ( ! mxIsStruct ( prhs [ 4 ] ) )
>1861	ExpressionStatement	 
>1862	CallExpression	mexErrMsgTxt ( \"argument 5 should be struct\" )
>1863	ArgumentList	\"argument 5 should be struct\"
>1864	Argument	\"argument 5 should be struct\"
>1865	PrimaryExpression	\"argument 5 should be struct\"
>1866	Callee	mexErrMsgTxt
>1867	Identifier	mexErrMsgTxt
>1868	Condition	 
>1869	UnaryOp	! mxIsStruct ( prhs [ 4 ] )
>1870	CallExpression	mxIsStruct ( prhs [ 4 ] )
>1871	ArgumentList	prhs [ 4 ]
>1872	Argument	prhs [ 4 ]
>1873	ArrayIndexing	prhs [ 4 ]
>1874	PrimaryExpression	4
>1875	Identifier	prhs
>1876	Callee	mxIsStruct
>1877	Identifier	mxIsStruct
>1878	UnaryOperator	!
>1879	IfStatement	if ( ! mxIsStruct ( prhs [ 3 ] ) )
>1880	ExpressionStatement	 
>1881	CallExpression	mexErrMsgTxt ( \"argument 4 should be struct\" )
>1882	ArgumentList	\"argument 4 should be struct\"
>1883	Argument	\"argument 4 should be struct\"
>1884	PrimaryExpression	\"argument 4 should be struct\"
>1885	Callee	mexErrMsgTxt
>1886	Identifier	mexErrMsgTxt
>1887	Condition	 
>1888	UnaryOp	! mxIsStruct ( prhs [ 3 ] )
>1889	CallExpression	mxIsStruct ( prhs [ 3 ] )
>1890	ArgumentList	prhs [ 3 ]
>1891	Argument	prhs [ 3 ]
>1892	ArrayIndexing	prhs [ 3 ]
>1893	PrimaryExpression	3
>1894	Identifier	prhs
>1895	Callee	mxIsStruct
>1896	Identifier	mxIsStruct
>1897	UnaryOperator	!
>1898	IfStatement	if ( mxIsSparse ( prhs [ 2 ] ) )
>1899	ExpressionStatement	 
>1900	CallExpression	mexErrMsgTxt ( \"argument 3 should not be sparse\" )
>1901	ArgumentList	\"argument 3 should not be sparse\"
>1902	Argument	\"argument 3 should not be sparse\"
>1903	PrimaryExpression	\"argument 3 should not be sparse\"
>1904	Callee	mexErrMsgTxt
>1905	Identifier	mexErrMsgTxt
>1906	Condition	 
>1907	CallExpression	mxIsSparse ( prhs [ 2 ] )
>1908	ArgumentList	prhs [ 2 ]
>1909	Argument	prhs [ 2 ]
>1910	ArrayIndexing	prhs [ 2 ]
>1911	PrimaryExpression	2
>1912	Identifier	prhs
>1913	Callee	mxIsSparse
>1914	Identifier	mxIsSparse
>1915	IfStatement	if ( ! mexCheckType < T > ( prhs [ 2 ] ) )
>1916	ExpressionStatement	 
>1917	CallExpression	mexErrMsgTxt ( \"type of argument 3 is not consistent\" )
>1918	ArgumentList	\"type of argument 3 is not consistent\"
>1919	Argument	\"type of argument 3 is not consistent\"
>1920	PrimaryExpression	\"type of argument 3 is not consistent\"
>1921	Callee	mexErrMsgTxt
>1922	Identifier	mexErrMsgTxt
>1923	Condition	 
>1924	RelationalExpression	! mexCheckType < T > ( prhs [ 2 ] )
>1925	RelationalExpression	T > ( prhs [ 2 ] )
>1926	ArrayIndexing	prhs [ 2 ]
>1927	PrimaryExpression	2
>1928	Identifier	prhs
>1929	Identifier	T
>1930	UnaryOp	! mexCheckType
>1931	Identifier	mexCheckType
>1932	UnaryOperator	!
>1933	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>1934	ExpressionStatement	 
>1935	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>1936	ArgumentList	\"type of argument 2 is not consistent\"
>1937	Argument	\"type of argument 2 is not consistent\"
>1938	PrimaryExpression	\"type of argument 2 is not consistent\"
>1939	Callee	mexErrMsgTxt
>1940	Identifier	mexErrMsgTxt
>1941	Condition	 
>1942	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>1943	RelationalExpression	T > ( prhs [ 1 ] )
>1944	ArrayIndexing	prhs [ 1 ]
>1945	PrimaryExpression	1
>1946	Identifier	prhs
>1947	Identifier	T
>1948	UnaryOp	! mexCheckType
>1949	Identifier	mexCheckType
>1950	UnaryOperator	!
>1951	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>1952	ExpressionStatement	 
>1953	CallExpression	mexErrMsgTxt ( \"argument 1 should not be sparse\" )
>1954	ArgumentList	\"argument 1 should not be sparse\"
>1955	Argument	\"argument 1 should not be sparse\"
>1956	PrimaryExpression	\"argument 1 should not be sparse\"
>1957	Callee	mexErrMsgTxt
>1958	Identifier	mexErrMsgTxt
>1959	Condition	 
>1960	CallExpression	mxIsSparse ( prhs [ 0 ] )
>1961	ArgumentList	prhs [ 0 ]
>1962	Argument	prhs [ 0 ]
>1963	ArrayIndexing	prhs [ 0 ]
>1964	PrimaryExpression	0
>1965	Identifier	prhs
>1966	Callee	mxIsSparse
>1967	Identifier	mxIsSparse
>1968	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>1969	ExpressionStatement	 
>1970	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>1971	ArgumentList	\"type of argument 1 is not consistent\"
>1972	Argument	\"type of argument 1 is not consistent\"
>1973	PrimaryExpression	\"type of argument 1 is not consistent\"
>1974	Callee	mexErrMsgTxt
>1975	Identifier	mexErrMsgTxt
>1976	Condition	 
>1977	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>1978	RelationalExpression	T > ( prhs [ 0 ] )
>1979	ArrayIndexing	prhs [ 0 ]
>1980	PrimaryExpression	0
>1981	Identifier	prhs
>1982	Identifier	T
>1983	UnaryOp	! mexCheckType
>1984	Identifier	mexCheckType
>1985	UnaryOperator	!
>2124	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>2125	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>2126	Parameter	 
>2127	Identifier	prhs
>2128	ParameterType	const mxArray * [ ]
>2129	Parameter	 
>2130	Identifier	nrhs
>2131	ParameterType	int
>2132	Parameter	 
>2133	Identifier	plhs
>2134	ParameterType	mxArray * [ ]
>2135	Parameter	 
>2136	Identifier	nlhs
>2137	ParameterType	int
>2138	ReturnType	void
>2139	CompoundStatement	 
>2140	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>2141	ElseStatement	else
>2142	CompoundStatement	 
>2143	ExpressionStatement	 
>2144	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>2145	RelationalExpression	float > ( plhs , prhs , nlhs )
>2146	Expression	plhs , prhs , nlhs
>2147	Expression	prhs , nlhs
>2148	Identifier	nlhs
>2149	Identifier	prhs
>2150	Identifier	plhs
>2151	Identifier	float
>2152	Identifier	callFunction
>2153	CompoundStatement	 
>2154	ExpressionStatement	 
>2155	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>2156	RelationalExpression	double > ( plhs , prhs , nlhs )
>2157	Expression	plhs , prhs , nlhs
>2158	Expression	prhs , nlhs
>2159	Identifier	nlhs
>2160	Identifier	prhs
>2161	Identifier	plhs
>2162	Identifier	double
>2163	Identifier	callFunction
>2164	Condition	 
>2165	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>2166	Identifier	mxDOUBLE_CLASS
>2167	CallExpression	mxGetClassID ( prhs [ 0 ] )
>2168	ArgumentList	prhs [ 0 ]
>2169	Argument	prhs [ 0 ]
>2170	ArrayIndexing	prhs [ 0 ]
>2171	PrimaryExpression	0
>2172	Identifier	prhs
>2173	Callee	mxGetClassID
>2174	Identifier	mxGetClassID
>2175	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>2176	ExpressionStatement	 
>2177	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>2178	ArgumentList	\"Bad number of output arguments\"
>2179	Argument	\"Bad number of output arguments\"
>2180	PrimaryExpression	\"Bad number of output arguments\"
>2181	Callee	mexErrMsgTxt
>2182	Identifier	mexErrMsgTxt
>2183	Condition	 
>2184	AndExpression	nlhs != 1 && nlhs != 2
>2185	EqualityExpression	nlhs != 2
>2186	PrimaryExpression	2
>2187	Identifier	nlhs
>2188	EqualityExpression	nlhs != 1
>2189	PrimaryExpression	1
>2190	Identifier	nlhs
>2191	IfStatement	if ( nrhs != 5 )
>2192	ExpressionStatement	 
>2193	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>2194	ArgumentList	\"Bad number of inputs arguments\"
>2195	Argument	\"Bad number of inputs arguments\"
>2196	PrimaryExpression	\"Bad number of inputs arguments\"
>2197	Callee	mexErrMsgTxt
>2198	Identifier	mexErrMsgTxt
>2199	Condition	 
>2200	EqualityExpression	nrhs != 5
>2201	PrimaryExpression	5
>2202	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=9,10
<11=13,12
<15=1968,1951,1933,1915,1898,1879,1860,1859,1858,1857,1856,1855,1854,1853,1852,1851,1842,1828,1827,1826,1825,1824,1823,1822,1821,1817,1816,1815,1814,1813,1812,1811,1810,1806,1797,1783,1782,1781,1780,1779,1778,1777,1776,1772,1771,1770,1769,1768,1767,1766,1765,1761,1757,1753,1743,1733,1729,1606,1605,1604,1603,1602,1601,1600,1599,1598,1597,1588,1574,1573,1572,1571,1570,1569,1568,1567,1563,1562,1561,1560,1559,1558,1557,1556,1552,1543,1525,1508,1496,1484,1472,1471,1470,1469,1468,1467,1466,1465,1461,1460,1459,1458,1457,1456,1455,1454,1450,1438,1420,1403,1391,1379,1367,1366,1365,1364,1363,1362,1361,1360,1356,1355,1354,1353,1352,1351,1350,1349,1345,1329,1311,1296,1295,1294,1293,1292,1291,1290,1289,1288,1287,1280,1268,1267,1266,1265,1264,1263,1262,1261,1257,1256,1255,1254,1253,1252,1251,1250,1246,1230,1218,1217,1216,1215,1214,1213,1212,1211,1210,1209,1200,1191,1187,1186,1185,1184,1183,1182,1181,1180,1179,1169,1168,1167,1166,1165,1164,1163,1162,1161,1153,1137,1136,1135,1134,1133,1132,1131,1130,1129,1121,1105,1089,1088,1087,1086,1085,1084,1083,1082,1081,1073,1057,1041,1018,1002,986,970,954,938,937,936,935,16,18,19,46,50,51,52,58,140,162,166,172,178,184,190,196,202,208,212,244,276,303,464,533,549,570,586,602,618,634,650,666,682,696,709,728,742,755,823,842,858,874,890,906,922,930,931,932,933,934
<16=17
<19=37,20
<20=21
<21=22
<22=36,23
<23=35,24
<24=34,25
<25=33,26
<26=32,27
<27=31,28
<28=30,29
<37=38
<38=44,39
<39=40
<40=41
<41=43,42
<44=45
<46=47
<47=49,48
<52=54,53
<54=55
<55=57,56
<58=136,59
<59=114,113,112,111,110,109,108,107,106,105,96,60
<60=88,72,69,61
<61=62
<62=66,63
<63=65,64
<66=68,67
<69=71,70
<72=73
<73=87,74
<74=81,75
<75=77,76
<77=78
<78=80,79
<81=83,82
<83=84
<84=86,85
<88=89
<89=90
<90=95,94,91
<91=93,92
<96=97
<97=103,98
<98=99
<99=100
<100=102,101
<103=104
<114=115
<115=133,116
<116=132,117
<117=131,118
<118=125,119
<119=121,120
<121=122
<122=124,123
<125=127,126
<127=128
<128=130,129
<133=135,134
<136=137
<137=139,138
<140=141
<141=161,142
<142=160,143
<143=159,144
<144=156,145
<145=155,146
<146=154,147
<147=153,148
<148=152,149
<149=151,150
<156=158,157
<162=163
<163=165,164
<166=167
<167=169,168
<169=171,170
<172=173
<173=175,174
<175=177,176
<178=179
<179=181,180
<181=183,182
<184=185
<185=187,186
<187=189,188
<190=191
<191=193,192
<193=195,194
<196=197
<197=199,198
<199=201,200
<202=203
<203=205,204
<205=207,206
<208=209
<209=211,210
<212=220,213
<213=214
<214=218,215
<215=216
<216=217
<218=219
<220=221
<221=239,222
<222=234,223
<223=229,224
<224=226,225
<226=228,227
<229=231,230
<231=233,232
<234=236,235
<236=238,237
<239=241,240
<241=243,242
<244=268,245
<245=262,246
<246=247
<247=259,248
<248=257,249
<249=255,250
<250=251
<251=253,252
<253=254
<255=256
<257=258
<259=261,260
<262=263
<263=265,264
<265=267,266
<268=269
<269=273,270
<270=272,271
<273=275,274
<276=285,277
<277=278
<278=279
<279=283,280
<280=281
<281=282
<283=284
<285=286
<286=298,287
<287=297,288
<288=296,289
<289=291,290
<291=293,292
<293=295,294
<298=300,299
<300=302,301
<303=440,432,304
<304=305
<305=426,340,306
<306=307
<307=316,308
<308=309
<309=310
<310=314,311
<311=312
<312=313
<314=315
<316=317
<317=335,318
<318=327,319
<319=326,320
<320=322,321
<322=323
<323=325,324
<327=334,328
<328=330,329
<330=331
<331=333,332
<335=337,336
<337=339,338
<340=422,413,412,411,410,409,408,407,406,399,398,397,396,395,394,393,392,385,373,341
<341=358,342
<342=350,343
<343=344
<344=348,345
<345=346
<346=347
<348=349
<350=351
<351=357,352
<352=356,353
<353=355,354
<358=359
<359=363,360
<360=362,361
<363=365,364
<365=372,366
<366=368,367
<368=369
<369=371,370
<373=381,374
<374=375
<375=379,376
<376=377
<377=378
<379=380
<381=382
<382=384,383
<385=386
<386=388,387
<388=389
<389=391,390
<399=400
<400=402,401
<402=403
<403=405,404
<413=414
<414=418,415
<415=416
<416=417
<418=419
<419=421,420
<422=423
<423=425,424
<426=427
<427=429,428
<429=431,430
<432=433
<433=434
<434=438,435
<435=436
<436=437
<438=439
<440=441
<441=453,442
<442=450,443
<443=447,444
<444=446,445
<447=449,448
<450=452,451
<453=459,454
<454=456,455
<456=458,457
<459=461,460
<461=463,462
<464=529,465
<465=511,499,485,479,466
<466=467
<467=477,468
<468=475,471,469
<469=470
<471=472
<472=474,473
<475=476
<477=478
<479=480
<480=482,481
<482=484,483
<485=486
<486=498,497,487
<487=496,488
<488=490,489
<490=494,491
<491=492
<492=493
<494=495
<499=507,500
<500=501
<501=505,502
<502=503
<503=504
<505=506
<507=508
<508=510,509
<511=512
<512=528,527,513
<513=526,514
<514=524,515
<515=520,518,516
<516=517
<518=519
<520=521
<521=523,522
<524=525
<529=530
<530=532,531
<533=534
<534=546,535
<535=545,536
<536=544,537
<537=541,538
<538=540,539
<541=543,542
<546=548,547
<549=550
<550=567,551
<551=566,552
<552=565,553
<553=562,554
<554=561,555
<555=559,556
<556=557
<557=558
<559=560
<562=564,563
<567=569,568
<570=571
<571=583,572
<572=582,573
<573=581,574
<574=578,575
<575=577,576
<578=580,579
<583=585,584
<586=587
<587=599,588
<588=598,589
<589=597,590
<590=594,591
<591=593,592
<594=596,595
<599=601,600
<602=603
<603=615,604
<604=614,605
<605=613,606
<606=610,607
<607=609,608
<610=612,611
<615=617,616
<618=619
<619=631,620
<620=630,621
<621=629,622
<622=626,623
<623=625,624
<626=628,627
<631=633,632
<634=635
<635=647,636
<636=646,637
<637=645,638
<638=642,639
<639=641,640
<642=644,643
<647=649,648
<650=651
<651=663,652
<652=662,653
<653=661,654
<654=658,655
<655=657,656
<658=660,659
<663=665,664
<666=667
<667=679,668
<668=678,669
<669=677,670
<670=674,671
<671=673,672
<674=676,675
<679=681,680
<682=690,683
<683=684
<684=688,685
<685=686
<686=687
<688=689
<690=691
<691=693,692
<693=695,694
<696=697
<697=706,698
<698=704,699
<699=700
<700=701
<701=703,702
<704=705
<706=708,707
<709=710
<710=726,711
<711=722,720,716,712
<712=713
<713=715,714
<716=717
<717=719,718
<720=721
<722=723
<723=725,724
<726=727
<728=736,729
<729=730
<730=734,731
<731=732
<732=733
<734=735
<736=737
<737=739,738
<739=741,740
<742=743
<743=752,744
<744=750,745
<745=746
<746=747
<747=749,748
<750=751
<752=754,753
<755=819,756
<756=801,789,773,772,771,770,769,768,767,766,765,764,757
<757=758
<758=762,759
<759=760
<760=761
<762=763
<773=781,774
<774=775
<775=779,776
<776=777
<777=778
<779=780
<781=782
<782=786,783
<783=785,784
<786=788,787
<789=797,790
<790=791
<791=795,792
<792=793
<793=794
<795=796
<797=798
<798=800,799
<801=802
<802=818,817,803
<803=816,804
<804=814,805
<805=810,808,806
<806=807
<808=809
<810=811
<811=813,812
<814=815
<819=820
<820=822,821
<823=824
<824=840,825
<825=836,834,830,826
<826=827
<827=829,828
<830=831
<831=833,832
<834=835
<836=837
<837=839,838
<840=841
<842=843
<843=855,844
<844=854,845
<845=853,846
<846=850,847
<847=849,848
<850=852,851
<855=857,856
<858=859
<859=871,860
<860=870,861
<861=869,862
<862=866,863
<863=865,864
<866=868,867
<871=873,872
<874=875
<875=887,876
<876=886,877
<877=885,878
<878=882,879
<879=881,880
<882=884,883
<887=889,888
<890=891
<891=903,892
<892=902,893
<893=901,894
<894=898,895
<895=897,896
<898=900,899
<903=905,904
<906=907
<907=919,908
<908=918,909
<909=917,910
<910=914,911
<911=913,912
<914=916,915
<919=921,920
<922=923
<923=927,924
<924=926,925
<927=929,928
<938=939
<939=951,940
<940=950,941
<941=949,942
<942=946,943
<943=945,944
<946=948,947
<951=953,952
<954=955
<955=967,956
<956=966,957
<957=965,958
<958=962,959
<959=961,960
<962=964,963
<967=969,968
<970=971
<971=983,972
<972=982,973
<973=981,974
<974=978,975
<975=977,976
<978=980,979
<983=985,984
<986=987
<987=999,988
<988=998,989
<989=997,990
<990=994,991
<991=993,992
<994=996,995
<999=1001,1000
<1002=1003
<1003=1015,1004
<1004=1014,1005
<1005=1013,1006
<1006=1010,1007
<1007=1009,1008
<1010=1012,1011
<1015=1017,1016
<1018=1019
<1019=1038,1020
<1020=1036,1021
<1021=1034,1022
<1022=1023
<1023=1033,1024
<1024=1032,1025
<1025=1029,1026
<1026=1028,1027
<1029=1031,1030
<1034=1035
<1036=1037
<1038=1040,1039
<1041=1042
<1042=1054,1043
<1043=1053,1044
<1044=1052,1045
<1045=1049,1046
<1046=1048,1047
<1049=1051,1050
<1054=1056,1055
<1057=1058
<1058=1070,1059
<1059=1069,1060
<1060=1068,1061
<1061=1065,1062
<1062=1064,1063
<1065=1067,1066
<1070=1072,1071
<1073=1074
<1074=1078,1075
<1075=1077,1076
<1078=1080,1079
<1089=1090
<1090=1102,1091
<1091=1101,1092
<1092=1100,1093
<1093=1097,1094
<1094=1096,1095
<1097=1099,1098
<1102=1104,1103
<1105=1106
<1106=1118,1107
<1107=1117,1108
<1108=1116,1109
<1109=1113,1110
<1110=1112,1111
<1113=1115,1114
<1118=1120,1119
<1121=1122
<1122=1126,1123
<1123=1125,1124
<1126=1128,1127
<1137=1138
<1138=1150,1139
<1139=1149,1140
<1140=1148,1141
<1141=1145,1142
<1142=1144,1143
<1145=1147,1146
<1150=1152,1151
<1153=1154
<1154=1158,1155
<1155=1157,1156
<1158=1160,1159
<1169=1170
<1170=1176,1171
<1171=1175,1172
<1172=1174,1173
<1176=1178,1177
<1187=1188
<1188=1190,1189
<1191=1192
<1192=1199,1198,1193
<1193=1197,1194
<1194=1196,1195
<1200=1201
<1201=1207,1202
<1202=1203
<1203=1204
<1204=1206,1205
<1207=1208
<1218=1219
<1219=1227,1220
<1220=1226,1221
<1221=1225,1222
<1222=1224,1223
<1227=1229,1228
<1230=1238,1231
<1231=1232
<1232=1236,1233
<1233=1234
<1234=1235
<1236=1237
<1238=1239
<1239=1243,1240
<1240=1242,1241
<1243=1245,1244
<1246=1247
<1247=1249,1248
<1257=1258
<1258=1260,1259
<1268=1269
<1269=1279,1278,1270
<1270=1277,1271
<1271=1275,1272
<1272=1273
<1273=1274
<1275=1276
<1280=1281
<1281=1285,1282
<1282=1283
<1283=1284
<1285=1286
<1296=1304,1297
<1297=1298
<1298=1302,1299
<1299=1300
<1300=1301
<1302=1303
<1304=1305
<1305=1309,1306
<1306=1307
<1307=1308
<1309=1310
<1311=1312
<1312=1328,1327,1313
<1313=1326,1314
<1314=1324,1315
<1315=1320,1318,1316
<1316=1317
<1318=1319
<1320=1321
<1321=1323,1322
<1324=1325
<1329=1337,1330
<1330=1331
<1331=1335,1332
<1332=1333
<1333=1334
<1335=1336
<1337=1338
<1338=1342,1339
<1339=1341,1340
<1342=1344,1343
<1345=1346
<1346=1348,1347
<1356=1357
<1357=1359,1358
<1367=1368
<1368=1378,1377,1369
<1369=1376,1370
<1370=1374,1371
<1371=1372
<1372=1373
<1374=1375
<1379=1380
<1380=1390,1389,1381
<1381=1388,1382
<1382=1386,1383
<1383=1384
<1384=1385
<1386=1387
<1391=1392
<1392=1402,1401,1393
<1393=1400,1394
<1394=1398,1395
<1395=1396
<1396=1397
<1398=1399
<1403=1411,1404
<1404=1405
<1405=1409,1406
<1406=1407
<1407=1408
<1409=1410
<1411=1412
<1412=1419,1413
<1413=1417,1414
<1414=1415
<1415=1416
<1417=1418
<1420=1421
<1421=1437,1436,1422
<1422=1435,1423
<1423=1433,1424
<1424=1429,1427,1425
<1425=1426
<1427=1428
<1429=1430
<1430=1432,1431
<1433=1434
<1438=1446,1439
<1439=1440
<1440=1444,1441
<1441=1442
<1442=1443
<1444=1445
<1446=1447
<1447=1449,1448
<1450=1451
<1451=1453,1452
<1461=1462
<1462=1464,1463
<1472=1473
<1473=1483,1482,1474
<1474=1481,1475
<1475=1479,1476
<1476=1477
<1477=1478
<1479=1480
<1484=1485
<1485=1495,1494,1486
<1486=1493,1487
<1487=1491,1488
<1488=1489
<1489=1490
<1491=1492
<1496=1497
<1497=1507,1506,1498
<1498=1505,1499
<1499=1503,1500
<1500=1501
<1501=1502
<1503=1504
<1508=1516,1509
<1509=1510
<1510=1514,1511
<1511=1512
<1512=1513
<1514=1515
<1516=1517
<1517=1524,1518
<1518=1522,1519
<1519=1520
<1520=1521
<1522=1523
<1525=1526
<1526=1542,1541,1527
<1527=1540,1528
<1528=1538,1529
<1529=1534,1532,1530
<1530=1531
<1532=1533
<1534=1535
<1535=1537,1536
<1538=1539
<1543=1544
<1544=1551,1550,1545
<1545=1549,1546
<1546=1548,1547
<1552=1553
<1553=1555,1554
<1563=1564
<1564=1566,1565
<1574=1575
<1575=1587,1586,1576
<1576=1585,1577
<1577=1583,1578
<1578=1579
<1579=1580
<1580=1582,1581
<1583=1584
<1588=1589
<1589=1595,1590
<1590=1591
<1591=1592
<1592=1594,1593
<1595=1596
<1606=1720,1635,1607
<1607=1608
<1608=1634,1633,1632,1631,1630,1629,1628,1627,1626,1617,1609
<1609=1610
<1610=1616,1611
<1611=1615,1612
<1612=1614,1613
<1617=1618
<1618=1624,1619
<1619=1620
<1620=1621
<1621=1623,1622
<1624=1625
<1635=1719,1718,1717,1716,1715,1714,1713,1704,1693,1682,1676,1654,1636
<1636=1637
<1637=1653,1638
<1638=1652,1639
<1639=1651,1640
<1640=1650,1641
<1641=1649,1642
<1642=1648,1643
<1643=1647,1644
<1644=1646,1645
<1654=1655
<1655=1675,1656
<1656=1674,1657
<1657=1673,1658
<1658=1672,1659
<1659=1671,1660
<1660=1670,1661
<1661=1669,1662
<1662=1668,1663
<1663=1667,1664
<1664=1666,1665
<1676=1677
<1677=1681,1678
<1678=1680,1679
<1682=1683
<1683=1692,1684
<1684=1690,1685
<1685=1686
<1686=1687
<1687=1689,1688
<1690=1691
<1693=1694
<1694=1703,1695
<1695=1701,1696
<1696=1697
<1697=1698
<1698=1700,1699
<1701=1702
<1704=1705
<1705=1711,1706
<1706=1707
<1707=1708
<1708=1710,1709
<1711=1712
<1720=1721
<1721=1727,1722
<1722=1723
<1723=1724
<1724=1726,1725
<1727=1728
<1729=1730
<1730=1732,1731
<1733=1740,1737,1734
<1734=1736,1735
<1737=1739,1738
<1740=1742,1741
<1743=1750,1747,1744
<1744=1746,1745
<1747=1749,1748
<1750=1752,1751
<1753=1754
<1754=1756,1755
<1757=1758
<1758=1760,1759
<1761=1762
<1762=1764,1763
<1772=1773
<1773=1775,1774
<1783=1784
<1784=1796,1795,1785
<1785=1794,1786
<1786=1792,1787
<1787=1788
<1788=1789
<1789=1791,1790
<1792=1793
<1797=1798
<1798=1805,1804,1799
<1799=1803,1800
<1800=1802,1801
<1806=1807
<1807=1809,1808
<1817=1818
<1818=1820,1819
<1828=1829
<1829=1841,1840,1830
<1830=1839,1831
<1831=1837,1832
<1832=1833
<1833=1834
<1834=1836,1835
<1837=1838
<1842=1843
<1843=1849,1844
<1844=1845
<1845=1846
<1846=1848,1847
<1849=1850
<1860=1868,1861
<1861=1862
<1862=1866,1863
<1863=1864
<1864=1865
<1866=1867
<1868=1869
<1869=1878,1870
<1870=1876,1871
<1871=1872
<1872=1873
<1873=1875,1874
<1876=1877
<1879=1887,1880
<1880=1881
<1881=1885,1882
<1882=1883
<1883=1884
<1885=1886
<1887=1888
<1888=1897,1889
<1889=1895,1890
<1890=1891
<1891=1892
<1892=1894,1893
<1895=1896
<1898=1906,1899
<1899=1900
<1900=1904,1901
<1901=1902
<1902=1903
<1904=1905
<1906=1907
<1907=1913,1908
<1908=1909
<1909=1910
<1910=1912,1911
<1913=1914
<1915=1923,1916
<1916=1917
<1917=1921,1918
<1918=1919
<1919=1920
<1921=1922
<1923=1924
<1924=1930,1925
<1925=1929,1926
<1926=1928,1927
<1930=1932,1931
<1933=1941,1934
<1934=1935
<1935=1939,1936
<1936=1937
<1937=1938
<1939=1940
<1941=1942
<1942=1948,1943
<1943=1947,1944
<1944=1946,1945
<1948=1950,1949
<1951=1959,1952
<1952=1953
<1953=1957,1954
<1954=1955
<1955=1956
<1957=1958
<1959=1960
<1960=1966,1961
<1961=1962
<1962=1963
<1963=1965,1964
<1966=1967
<1968=1976,1969
<1969=1970
<1970=1974,1971
<1971=1972
<1972=1973
<1974=1975
<1976=1977
<1977=1983,1978
<1978=1982,1979
<1979=1981,1980
<1983=1985,1984
<2124=2139,2138,2125
<2125=2135,2132,2129,2126
<2126=2128,2127
<2129=2131,2130
<2132=2134,2133
<2135=2137,2136
<2139=2191,2175,2140
<2140=2164,2153,2141
<2141=2142
<2142=2143
<2143=2144
<2144=2152,2145
<2145=2151,2146
<2146=2150,2147
<2147=2149,2148
<2153=2154
<2154=2155
<2155=2163,2156
<2156=2162,2157
<2157=2161,2158
<2158=2160,2159
<2164=2165
<2165=2167,2166
<2167=2173,2168
<2168=2169
<2169=2170
<2170=2172,2171
<2173=2174
<2175=2183,2176
<2176=2177
<2177=2181,2178
<2178=2179
<2179=2180
<2181=2182
<2183=2184
<2184=2188,2185
<2185=2187,2186
<2188=2190,2189
<2191=2199,2192
<2192=2193
<2193=2197,2194
<2194=2195
<2195=2196
<2197=2198
<2199=2200
<2200=2202,2201
