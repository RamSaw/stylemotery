>21	FunctionDef	Profile 
>22	ParameterList	 
>23	CompoundStatement	 
>24	ExpressionStatement	 
>25	AssignmentExpr	name = \"save\"
>26	PrimaryExpression	\"save\"
>27	Identifier	name
>32	FunctionDef	Continuity 
>33	ParameterList	 
>34	CompoundStatement	 
>35	ExpressionStatement	 
>36	AssignmentExpr	statsAndAchievements = 0
>37	PrimaryExpression	0
>38	Identifier	statsAndAchievements
>39	ExpressionStatement	 
>40	AssignmentExpr	poisonBitTimeAvatar = 2
>41	PrimaryExpression	2
>42	Identifier	poisonBitTimeAvatar
>43	ExpressionStatement	 
>44	AssignmentExpr	poisonBitTime = 1
>45	PrimaryExpression	1
>46	Identifier	poisonBitTime
>47	ExpressionStatement	 
>48	AssignmentExpr	toggleMoveMode = false
>49	Identifier	false
>50	Identifier	toggleMoveMode
>59	FunctionDef	Continuity 
>60	ParameterList	IngredientData * data
>61	Parameter	 
>62	Identifier	data
>63	ParameterType	IngredientData *
>64	ReturnType	bool
>65	CompoundStatement	 
>66	ReturnStatement	 
>67	Identifier	false
>68	ForStatement	for ( int i = 0 ; i < ingredients . size ( ) ; i ++ )
>69	CompoundStatement	 
>70	IfStatement	if ( nocasecmp ( ingredients [ i ] -> name , data -> name ) == 0 )
>71	CompoundStatement	 
>72	IfStatement	if ( ingredients [ i ] -> amount >= ingredients [ i ] -> maxAmount )
>73	ElseStatement	else
>74	ReturnStatement	 
>75	Identifier	false
>76	ReturnStatement	 
>77	Identifier	true
>78	Condition	 
>79	RelationalExpression	ingredients [ i ] -> amount >= ingredients [ i ] -> maxAmount
>80	PtrMemberAccess	ingredients [ i ] -> maxAmount
>81	Identifier	maxAmount
>82	ArrayIndexing	ingredients [ i ]
>83	Identifier	i
>84	Identifier	ingredients
>85	PtrMemberAccess	ingredients [ i ] -> amount
>86	Identifier	amount
>87	ArrayIndexing	ingredients [ i ]
>88	Identifier	i
>89	Identifier	ingredients
>90	Condition	 
>91	EqualityExpression	nocasecmp ( ingredients [ i ] -> name , data -> name ) == 0
>92	PrimaryExpression	0
>93	CallExpression	nocasecmp ( ingredients [ i ] -> name , data -> name )
>94	ArgumentList	ingredients [ i ] -> name
>95	Argument	data -> name
>96	PtrMemberAccess	data -> name
>97	Identifier	name
>98	Identifier	data
>99	Argument	ingredients [ i ] -> name
>100	PtrMemberAccess	ingredients [ i ] -> name
>101	Identifier	name
>102	ArrayIndexing	ingredients [ i ]
>103	Identifier	i
>104	Identifier	ingredients
>105	Callee	nocasecmp
>106	Identifier	nocasecmp
>107	IncDecOp	 
>108	IncDec	++
>109	Identifier	i
>110	Condition	 
>111	RelationalExpression	i < ingredients . size ( )
>112	CallExpression	ingredients . size ( )
>113	ArgumentList	 
>114	Callee	ingredients . size
>115	MemberAccess	ingredients . size
>116	Identifier	size
>117	Identifier	ingredients
>118	Identifier	i
>119	ForInit	 
>120	IdentifierDeclStatement	int i = 0 ;
>121	IdentifierDecl	i = 0
>122	AssignmentExpr	i = 0
>123	PrimaryExpression	0
>124	Identifier	i
>125	Identifier	i
>126	IdentifierDeclType	int
>146	FunctionDef	Continuity 
>147	ParameterList	IngredientData * d , int amount , bool effects , bool learn
>148	Parameter	 
>149	Identifier	learn
>150	ParameterType	bool
>151	Parameter	 
>152	Identifier	effects
>153	ParameterType	bool
>154	Parameter	 
>155	Identifier	amount
>156	ParameterType	int
>157	Parameter	 
>158	Identifier	d
>159	ParameterType	IngredientData *
>160	ReturnType	void
>161	CompoundStatement	 
>162	IfStatement	if ( d -> amount < d -> maxAmount - amount )
>163	ElseStatement	else
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	AssignmentExpr	d -> amount = d -> maxAmount
>167	PtrMemberAccess	d -> maxAmount
>168	Identifier	maxAmount
>169	Identifier	d
>170	PtrMemberAccess	d -> amount
>171	Identifier	amount
>172	Identifier	d
>173	CompoundStatement	 
>174	ExpressionStatement	 
>175	AssignmentExpr	d -> amount += amount
>176	Identifier	amount
>177	PtrMemberAccess	d -> amount
>178	Identifier	amount
>179	Identifier	d
>180	Condition	 
>181	RelationalExpression	d -> amount < d -> maxAmount - amount
>182	AdditiveExpression	d -> maxAmount - amount
>183	Identifier	amount
>184	PtrMemberAccess	d -> maxAmount
>185	Identifier	maxAmount
>186	Identifier	d
>187	PtrMemberAccess	d -> amount
>188	Identifier	amount
>189	Identifier	d
>190	IfStatement	if ( ! getIngredientHeldByName ( d -> name ) )
>191	CompoundStatement	 
>192	ExpressionStatement	 
>193	CallExpression	ingredients . push_back ( d )
>194	ArgumentList	d
>195	Argument	d
>196	Identifier	d
>197	Callee	ingredients . push_back
>198	MemberAccess	ingredients . push_back
>199	Identifier	push_back
>200	Identifier	ingredients
>201	Condition	 
>202	UnaryOp	! getIngredientHeldByName ( d -> name )
>203	CallExpression	getIngredientHeldByName ( d -> name )
>204	ArgumentList	d -> name
>205	Argument	d -> name
>206	PtrMemberAccess	d -> name
>207	Identifier	name
>208	Identifier	d
>209	Callee	getIngredientHeldByName
>210	Identifier	getIngredientHeldByName
>211	UnaryOperator	!
>212	IfStatement	if ( learn )
>213	ExpressionStatement	 
>214	CallExpression	learnRecipe ( d -> name , effects )
>215	ArgumentList	d -> name
>216	Argument	effects
>217	Identifier	effects
>218	Argument	d -> name
>219	PtrMemberAccess	d -> name
>220	Identifier	name
>221	Identifier	d
>222	Callee	learnRecipe
>223	Identifier	learnRecipe
>224	Condition	 
>225	Identifier	learn
>239	FunctionDef	Continuity 
>240	ParameterList	const IngredientData * data
>241	Parameter	 
>242	Identifier	data
>243	ParameterType	const IngredientData *
>244	ReturnType	int
>245	CompoundStatement	 
>246	ReturnStatement	 
>247	UnaryOp	- 1
>248	PrimaryExpression	1
>249	UnaryOperator	-
>250	ForStatement	for ( int i = 0 ; i < ingredientData . size ( ) ; i ++ )
>251	CompoundStatement	 
>252	IfStatement	if ( ingredientData [ i ] -> name == data -> name )
>253	CompoundStatement	 
>254	ReturnStatement	 
>255	Identifier	i
>256	Condition	 
>257	EqualityExpression	ingredientData [ i ] -> name == data -> name
>258	PtrMemberAccess	data -> name
>259	Identifier	name
>260	Identifier	data
>261	PtrMemberAccess	ingredientData [ i ] -> name
>262	Identifier	name
>263	ArrayIndexing	ingredientData [ i ]
>264	Identifier	i
>265	Identifier	ingredientData
>266	IncDecOp	 
>267	IncDec	++
>268	Identifier	i
>269	Condition	 
>270	RelationalExpression	i < ingredientData . size ( )
>271	CallExpression	ingredientData . size ( )
>272	ArgumentList	 
>273	Callee	ingredientData . size
>274	MemberAccess	ingredientData . size
>275	Identifier	size
>276	Identifier	ingredientData
>277	Identifier	i
>278	ForInit	 
>279	IdentifierDeclStatement	int i = 0 ;
>280	IdentifierDecl	i = 0
>281	AssignmentExpr	i = 0
>282	PrimaryExpression	0
>283	Identifier	i
>284	Identifier	i
>285	IdentifierDeclType	int
>302	FunctionDef	Continuity 
>303	ParameterList	const std 
>304	Parameter	 
>305	Identifier	name
>306	ParameterType	const std 
>307	ReturnType	IngredientData *
>308	CompoundStatement	 
>309	ReturnStatement	 
>310	PrimaryExpression	0
>311	CompoundStatement	 
>312	IfStatement	if ( nocasecmp ( ingredientData [ i ] -> name , name ) == 0 )
>313	ReturnStatement	 
>314	ArrayIndexing	ingredientData [ i ]
>315	Identifier	i
>316	Identifier	ingredientData
>317	Condition	 
>318	EqualityExpression	nocasecmp ( ingredientData [ i ] -> name , name ) == 0
>319	PrimaryExpression	0
>320	CallExpression	nocasecmp ( ingredientData [ i ] -> name , name )
>321	ArgumentList	ingredientData [ i ] -> name
>322	Argument	name
>323	Identifier	name
>324	Argument	ingredientData [ i ] -> name
>325	PtrMemberAccess	ingredientData [ i ] -> name
>326	Identifier	name
>327	ArrayIndexing	ingredientData [ i ]
>328	Identifier	i
>329	Identifier	ingredientData
>330	Callee	nocasecmp
>331	Identifier	nocasecmp
>332	Statement	 
>333	Statement	 
>334	Statement	 
>335	Statement	 
>348	FunctionDef	Continuity 
>349	ParameterList	const std 
>350	Parameter	 
>351	Identifier	name
>352	ParameterType	const std 
>353	ReturnType	IngredientData *
>354	CompoundStatement	 
>355	ReturnStatement	 
>356	PrimaryExpression	0
>357	ForStatement	for ( int i = 0 ; i < ingredients . size ( ) ; i ++ )
>358	CompoundStatement	 
>359	IfStatement	if ( nocasecmp ( ingredients [ i ] -> name , name ) == 0 )
>360	ReturnStatement	 
>361	ArrayIndexing	ingredients [ i ]
>362	Identifier	i
>363	Identifier	ingredients
>364	Condition	 
>365	EqualityExpression	nocasecmp ( ingredients [ i ] -> name , name ) == 0
>366	PrimaryExpression	0
>367	CallExpression	nocasecmp ( ingredients [ i ] -> name , name )
>368	ArgumentList	ingredients [ i ] -> name
>369	Argument	name
>370	Identifier	name
>371	Argument	ingredients [ i ] -> name
>372	PtrMemberAccess	ingredients [ i ] -> name
>373	Identifier	name
>374	ArrayIndexing	ingredients [ i ]
>375	Identifier	i
>376	Identifier	ingredients
>377	Callee	nocasecmp
>378	Identifier	nocasecmp
>379	IncDecOp	 
>380	IncDec	++
>381	Identifier	i
>382	Condition	 
>383	RelationalExpression	i < ingredients . size ( )
>384	CallExpression	ingredients . size ( )
>385	ArgumentList	 
>386	Callee	ingredients . size
>387	MemberAccess	ingredients . size
>388	Identifier	size
>389	Identifier	ingredients
>390	Identifier	i
>391	ForInit	 
>392	IdentifierDeclStatement	int i = 0 ;
>393	IdentifierDecl	i = 0
>394	AssignmentExpr	i = 0
>395	PrimaryExpression	0
>396	Identifier	i
>397	Identifier	i
>398	IdentifierDeclType	int
>412	FunctionDef	Continuity 
>413	ParameterList	const std 
>414	Parameter	 
>415	Identifier	name
>416	ParameterType	const std 
>417	ReturnType	IngredientType
>418	CompoundStatement	 
>419	ReturnStatement	 
>420	Identifier	IT_NONE
>421	IfStatement	if ( name == \"Meat\" )
>422	ElseStatement	else
>423	IfStatement	if ( name == \"Oil\" )
>424	ElseStatement	else
>425	IfStatement	if ( name == \"Egg\" )
>426	ElseStatement	else
>427	IfStatement	if ( name == \"Part\" )
>428	ElseStatement	else
>429	IfStatement	if ( name == \"Bone\" )
>430	ElseStatement	else
>431	IfStatement	if ( name == \"Shell\" )
>432	ElseStatement	else
>433	IfStatement	if ( name == \"Tentacle\" )
>434	ElseStatement	else
>435	IfStatement	if ( name == \"Berry\" )
>436	ElseStatement	else
>437	IfStatement	if ( name == \"Leaf\" )
>438	ElseStatement	else
>439	IfStatement	if ( name == \"Poultice\" )
>440	ElseStatement	else
>441	IfStatement	if ( name == \"IceChunk\" )
>442	ElseStatement	else
>443	IfStatement	if ( name == \"Bulb\" )
>444	ElseStatement	else
>445	IfStatement	if ( name == \"Roll\" )
>446	ElseStatement	else
>447	IfStatement	if ( name == \"Soup\" )
>448	ElseStatement	else
>449	IfStatement	if ( name == \"Cake\" )
>450	ElseStatement	else
>451	IfStatement	if ( name == \"IceCream\" )
>452	ElseStatement	else
>453	IfStatement	if ( name == \"Loaf\" )
>454	ElseStatement	else
>455	IfStatement	if ( name == \"PerogiType\" )
>456	ElseStatement	else
>457	IfStatement	if ( name == \"Mushroom\" )
>458	ElseStatement	else
>459	IfStatement	if ( name == \"Anything\" )
>460	ElseStatement	else
>461	IfStatement	if ( name . length ( ) && isdigit ( name [ 0 ] ) )
>462	ReturnStatement	 
>463	CastExpression	( IngredientType ) atoi ( name . c_str ( ) )
>464	CallExpression	atoi ( name . c_str ( ) )
>465	ArgumentList	name . c_str ( )
>466	Argument	name . c_str ( )
>467	CallExpression	name . c_str ( )
>468	ArgumentList	 
>469	Callee	name . c_str
>470	MemberAccess	name . c_str
>471	Identifier	c_str
>472	Identifier	name
>473	Callee	atoi
>474	Identifier	atoi
>475	CastTarget	IngredientType
>476	Condition	 
>477	AndExpression	name . length ( ) && isdigit ( name [ 0 ] )
>478	CallExpression	isdigit ( name [ 0 ] )
>479	ArgumentList	name [ 0 ]
>480	Argument	name [ 0 ]
>481	ArrayIndexing	name [ 0 ]
>482	PrimaryExpression	0
>483	Identifier	name
>484	Callee	isdigit
>485	Identifier	isdigit
>486	CallExpression	name . length ( )
>487	ArgumentList	 
>488	Callee	name . length
>489	MemberAccess	name . length
>490	Identifier	length
>491	Identifier	name
>492	ReturnStatement	 
>493	Identifier	IT_ANYTHING
>494	Condition	 
>495	EqualityExpression	name == \"Anything\"
>496	PrimaryExpression	\"Anything\"
>497	Identifier	name
>498	ReturnStatement	 
>499	Identifier	IT_MUSHROOM
>500	Condition	 
>501	EqualityExpression	name == \"Mushroom\"
>502	PrimaryExpression	\"Mushroom\"
>503	Identifier	name
>504	ReturnStatement	 
>505	Identifier	IT_PEROGI
>506	Condition	 
>507	EqualityExpression	name == \"PerogiType\"
>508	PrimaryExpression	\"PerogiType\"
>509	Identifier	name
>510	ReturnStatement	 
>511	Identifier	IT_LOAF
>512	Condition	 
>513	EqualityExpression	name == \"Loaf\"
>514	PrimaryExpression	\"Loaf\"
>515	Identifier	name
>516	ReturnStatement	 
>517	Identifier	IT_ICECREAM
>518	Condition	 
>519	EqualityExpression	name == \"IceCream\"
>520	PrimaryExpression	\"IceCream\"
>521	Identifier	name
>522	ReturnStatement	 
>523	Identifier	IT_CAKE
>524	Condition	 
>525	EqualityExpression	name == \"Cake\"
>526	PrimaryExpression	\"Cake\"
>527	Identifier	name
>528	ReturnStatement	 
>529	Identifier	IT_SOUP
>530	Condition	 
>531	EqualityExpression	name == \"Soup\"
>532	PrimaryExpression	\"Soup\"
>533	Identifier	name
>534	ReturnStatement	 
>535	Identifier	IT_ROLL
>536	Condition	 
>537	EqualityExpression	name == \"Roll\"
>538	PrimaryExpression	\"Roll\"
>539	Identifier	name
>540	ReturnStatement	 
>541	Identifier	IT_BULB
>542	Condition	 
>543	EqualityExpression	name == \"Bulb\"
>544	PrimaryExpression	\"Bulb\"
>545	Identifier	name
>546	ReturnStatement	 
>547	Identifier	IT_ICECHUNK
>548	Condition	 
>549	EqualityExpression	name == \"IceChunk\"
>550	PrimaryExpression	\"IceChunk\"
>551	Identifier	name
>552	ReturnStatement	 
>553	Identifier	IT_POULTICE
>554	Condition	 
>555	EqualityExpression	name == \"Poultice\"
>556	PrimaryExpression	\"Poultice\"
>557	Identifier	name
>558	ReturnStatement	 
>559	Identifier	IT_LEAF
>560	Condition	 
>561	EqualityExpression	name == \"Leaf\"
>562	PrimaryExpression	\"Leaf\"
>563	Identifier	name
>564	ReturnStatement	 
>565	Identifier	IT_BERRY
>566	Condition	 
>567	EqualityExpression	name == \"Berry\"
>568	PrimaryExpression	\"Berry\"
>569	Identifier	name
>570	ReturnStatement	 
>571	Identifier	IT_TENTACLE
>572	Condition	 
>573	EqualityExpression	name == \"Tentacle\"
>574	PrimaryExpression	\"Tentacle\"
>575	Identifier	name
>576	ReturnStatement	 
>577	Identifier	IT_SHELL
>578	Condition	 
>579	EqualityExpression	name == \"Shell\"
>580	PrimaryExpression	\"Shell\"
>581	Identifier	name
>582	ReturnStatement	 
>583	Identifier	IT_BONE
>584	Condition	 
>585	EqualityExpression	name == \"Bone\"
>586	PrimaryExpression	\"Bone\"
>587	Identifier	name
>588	ReturnStatement	 
>589	Identifier	IT_PART
>590	Condition	 
>591	EqualityExpression	name == \"Part\"
>592	PrimaryExpression	\"Part\"
>593	Identifier	name
>594	ReturnStatement	 
>595	Identifier	IT_EGG
>596	Condition	 
>597	EqualityExpression	name == \"Egg\"
>598	PrimaryExpression	\"Egg\"
>599	Identifier	name
>600	ReturnStatement	 
>601	Identifier	IT_OIL
>602	Condition	 
>603	EqualityExpression	name == \"Oil\"
>604	PrimaryExpression	\"Oil\"
>605	Identifier	name
>606	ReturnStatement	 
>607	Identifier	IT_MEAT
>608	Condition	 
>609	EqualityExpression	name == \"Meat\"
>610	PrimaryExpression	\"Meat\"
>611	Identifier	name
>642	FunctionDef	Continuity 
>643	ParameterList	const std 
>644	Parameter	 
>645	Identifier	name
>646	ParameterType	const std 
>647	ReturnType	std 
>648	CompoundStatement	 
>649	ReturnStatement	 
>650	CallExpression	splitCamelCase ( name )
>651	ArgumentList	name
>652	Argument	name
>653	Identifier	name
>654	Callee	splitCamelCase
>655	Identifier	splitCamelCase
>656	IfStatement	if ( it != ingredientDisplayNames . end ( ) )
>657	ReturnStatement	 
>658	PtrMemberAccess	it -> second
>659	Identifier	second
>660	Identifier	it
>661	Condition	 
>662	EqualityExpression	it != ingredientDisplayNames . end ( )
>663	CallExpression	ingredientDisplayNames . end ( )
>664	ArgumentList	 
>665	Callee	ingredientDisplayNames . end
>666	MemberAccess	ingredientDisplayNames . end
>667	Identifier	end
>668	Identifier	ingredientDisplayNames
>669	Identifier	it
>670	IdentifierDeclStatement	 
>671	IdentifierDecl	it = ingredientDisplayNames . find ( name )
>672	AssignmentExpr	it = ingredientDisplayNames . find ( name )
>673	CallExpression	ingredientDisplayNames . find ( name )
>674	ArgumentList	name
>675	Argument	name
>676	Identifier	name
>677	Callee	ingredientDisplayNames . find
>678	MemberAccess	ingredientDisplayNames . find
>679	Identifier	find
>680	Identifier	ingredientDisplayNames
>681	Identifier	it
>682	Identifier	it
>683	IdentifierDeclType	IngredientNameMap 
>695	FunctionDef	Continuity 
>696	ParameterList	int idx
>697	Parameter	 
>698	Identifier	idx
>699	ParameterType	int
>700	ReturnType	IngredientData *
>701	CompoundStatement	 
>702	ReturnStatement	 
>703	ArrayIndexing	ingredients [ idx ]
>704	Identifier	idx
>705	Identifier	ingredients
>706	IfStatement	if ( idx < 0 || idx >= ingredients . size ( ) )
>707	ReturnStatement	 
>708	PrimaryExpression	0
>709	Condition	 
>710	OrExpression	idx < 0 || idx >= ingredients . size ( )
>711	RelationalExpression	idx >= ingredients . size ( )
>712	CallExpression	ingredients . size ( )
>713	ArgumentList	 
>714	Callee	ingredients . size
>715	MemberAccess	ingredients . size
>716	Identifier	size
>717	Identifier	ingredients
>718	Identifier	idx
>719	RelationalExpression	idx < 0
>720	PrimaryExpression	0
>721	Identifier	idx
>730	FunctionDef	Continuity 
>731	ParameterList	int idx
>732	Parameter	 
>733	Identifier	idx
>734	ParameterType	int
>735	ReturnType	IngredientData *
>736	CompoundStatement	 
>737	ReturnStatement	 
>738	ArrayIndexing	ingredientData [ idx ]
>739	Identifier	idx
>740	Identifier	ingredientData
>741	IfStatement	if ( idx < 0 || idx >= ingredientData . size ( ) )
>742	ReturnStatement	 
>743	PrimaryExpression	0
>744	Condition	 
>745	OrExpression	idx < 0 || idx >= ingredientData . size ( )
>746	RelationalExpression	idx >= ingredientData . size ( )
>747	CallExpression	ingredientData . size ( )
>748	ArgumentList	 
>749	Callee	ingredientData . size
>750	MemberAccess	ingredientData . size
>751	Identifier	size
>752	Identifier	ingredientData
>753	Identifier	idx
>754	RelationalExpression	idx < 0
>755	PrimaryExpression	0
>756	Identifier	idx
>765	FunctionDef	Continuity 
>766	ParameterList	 
>767	ReturnType	int
>768	CompoundStatement	 
>769	ReturnStatement	 
>770	CastExpression	( int ) ingredientData . size ( )
>771	CallExpression	ingredientData . size ( )
>772	ArgumentList	 
>773	Callee	ingredientData . size
>774	MemberAccess	ingredientData . size
>775	Identifier	size
>776	Identifier	ingredientData
>777	CastTarget	int
>783	FunctionDef	Continuity 
>784	ParameterList	 
>785	ReturnType	int
>786	CompoundStatement	 
>787	ReturnStatement	 
>788	CastExpression	( int ) ingredients . size ( )
>789	CallExpression	ingredients . size ( )
>790	ArgumentList	 
>791	Callee	ingredients . size
>792	MemberAccess	ingredients . size
>793	Identifier	size
>794	Identifier	ingredients
>795	CastTarget	int
>801	FunctionDef	Recipe 
>802	ParameterList	 
>803	CompoundStatement	 
>804	ExpressionStatement	 
>805	AssignmentExpr	index = - 1
>806	UnaryOp	- 1
>807	PrimaryExpression	1
>808	UnaryOperator	-
>809	Identifier	index
>810	ExpressionStatement	 
>811	AssignmentExpr	known = false
>812	Identifier	false
>813	Identifier	known
>820	FunctionDef	Recipe 
>821	ParameterList	 
>822	ReturnType	void
>823	CompoundStatement	 
>824	ExpressionStatement	 
>825	AssignmentExpr	known = false
>826	Identifier	false
>827	Identifier	known
>828	ExpressionStatement	 
>829	AssignmentExpr	resultDisplayName = \"\"
>830	PrimaryExpression	\"\"
>831	Identifier	resultDisplayName
>832	ExpressionStatement	 
>833	AssignmentExpr	result = \"\"
>834	PrimaryExpression	\"\"
>835	Identifier	result
>836	ExpressionStatement	 
>837	CallExpression	names . clear ( )
>838	ArgumentList	 
>839	Callee	names . clear
>840	MemberAccess	names . clear
>841	Identifier	clear
>842	Identifier	names
>843	ExpressionStatement	 
>844	CallExpression	types . clear ( )
>845	ArgumentList	 
>846	Callee	types . clear
>847	MemberAccess	types . clear
>848	Identifier	clear
>849	Identifier	types
>859	FunctionDef	Recipe 
>860	ParameterList	 
>861	ReturnType	void
>862	CompoundStatement	 
>863	ExpressionStatement	 
>864	AssignmentExpr	known = true
>865	Identifier	true
>866	Identifier	known
>872	FunctionDef	Recipe 
>873	ParameterList	const std 
>874	Parameter	 
>875	Identifier	name
>876	ParameterType	const std 
>877	ReturnType	void
>878	CompoundStatement	 
>879	IfStatement	if ( i == names . size ( ) )
>880	ExpressionStatement	 
>881	CallExpression	names . push_back ( RecipeName ( name ) )
>882	ArgumentList	RecipeName ( name )
>883	Argument	RecipeName ( name )
>884	CallExpression	RecipeName ( name )
>885	ArgumentList	name
>886	Argument	name
>887	Identifier	name
>888	Callee	RecipeName
>889	Identifier	RecipeName
>890	Callee	names . push_back
>891	MemberAccess	names . push_back
>892	Identifier	push_back
>893	Identifier	names
>894	Condition	 
>895	EqualityExpression	i == names . size ( )
>896	CallExpression	names . size ( )
>897	ArgumentList	 
>898	Callee	names . size
>899	MemberAccess	names . size
>900	Identifier	size
>901	Identifier	names
>902	Identifier	i
>903	ForStatement	for ( ; i < names . size ( ) ; i ++ )
>904	CompoundStatement	 
>905	IfStatement	if ( names [ i ] . name == name )
>906	CompoundStatement	 
>907	BreakStatement	 
>908	ExpressionStatement	 
>909	IncDecOp	names [ i ] . amount ++
>910	IncDec	++
>911	MemberAccess	names [ i ] . amount
>912	Identifier	amount
>913	ArrayIndexing	names [ i ]
>914	Identifier	i
>915	Identifier	names
>916	Condition	 
>917	EqualityExpression	names [ i ] . name == name
>918	Identifier	name
>919	MemberAccess	names [ i ] . name
>920	Identifier	name
>921	ArrayIndexing	names [ i ]
>922	Identifier	i
>923	Identifier	names
>924	IncDecOp	 
>925	IncDec	++
>926	Identifier	i
>927	Condition	 
>928	RelationalExpression	i < names . size ( )
>929	CallExpression	names . size ( )
>930	ArgumentList	 
>931	Callee	names . size
>932	MemberAccess	names . size
>933	Identifier	size
>934	Identifier	names
>935	Identifier	i
>936	IdentifierDeclStatement	 
>937	IdentifierDecl	i = 0
>938	AssignmentExpr	i = 0
>939	PrimaryExpression	0
>940	Identifier	i
>941	Identifier	i
>942	IdentifierDeclType	int
>955	FunctionDef	Recipe 
>956	ParameterList	IngredientType type , const std 
>957	Parameter	 
>958	Identifier	typeName
>959	ParameterType	const std 
>960	Parameter	 
>961	Identifier	type
>962	ParameterType	IngredientType
>963	ReturnType	void
>964	CompoundStatement	 
>965	IfStatement	if ( i == types . size ( ) )
>966	ExpressionStatement	 
>967	CallExpression	types . push_back ( RecipeType ( type , typeName ) )
>968	ArgumentList	RecipeType ( type , typeName )
>969	Argument	RecipeType ( type , typeName )
>970	CallExpression	RecipeType ( type , typeName )
>971	ArgumentList	type
>972	Argument	typeName
>973	Identifier	typeName
>974	Argument	type
>975	Identifier	type
>976	Callee	RecipeType
>977	Identifier	RecipeType
>978	Callee	types . push_back
>979	MemberAccess	types . push_back
>980	Identifier	push_back
>981	Identifier	types
>982	Condition	 
>983	EqualityExpression	i == types . size ( )
>984	CallExpression	types . size ( )
>985	ArgumentList	 
>986	Callee	types . size
>987	MemberAccess	types . size
>988	Identifier	size
>989	Identifier	types
>990	Identifier	i
>991	ForStatement	for ( ; i < types . size ( ) ; i ++ )
>992	CompoundStatement	 
>993	IfStatement	if ( types [ i ] . type == type )
>994	CompoundStatement	 
>995	BreakStatement	 
>996	ExpressionStatement	 
>997	IncDecOp	types [ i ] . amount ++
>998	IncDec	++
>999	MemberAccess	types [ i ] . amount
>1000	Identifier	amount
>1001	ArrayIndexing	types [ i ]
>1002	Identifier	i
>1003	Identifier	types
>1004	Condition	 
>1005	EqualityExpression	types [ i ] . type == type
>1006	Identifier	type
>1007	MemberAccess	types [ i ] . type
>1008	Identifier	type
>1009	ArrayIndexing	types [ i ]
>1010	Identifier	i
>1011	Identifier	types
>1012	IncDecOp	 
>1013	IncDec	++
>1014	Identifier	i
>1015	Condition	 
>1016	RelationalExpression	i < types . size ( )
>1017	CallExpression	types . size ( )
>1018	ArgumentList	 
>1019	Callee	types . size
>1020	MemberAccess	types . size
>1021	Identifier	size
>1022	Identifier	types
>1023	Identifier	i
>1024	IdentifierDeclStatement	 
>1025	IdentifierDecl	i = 0
>1026	AssignmentExpr	i = 0
>1027	PrimaryExpression	0
>1028	Identifier	i
>1029	Identifier	i
>1030	IdentifierDeclType	int
>1044	FunctionDef	Continuity 
>1045	ParameterList	 
>1046	ReturnType	void
>1047	CompoundStatement	 
>1048	ForStatement	for ( int i = 0 ; i < IT_INGREDIENTSEND ; i ++ )
>1049	CompoundStatement	 
>1050	ExpressionStatement	 
>1051	CallExpression	sortByIngredients . push_back ( FoodSortOrder ( ( IngredientType ) i ) )
>1052	ArgumentList	FoodSortOrder ( ( IngredientType ) i )
>1053	Argument	FoodSortOrder ( ( IngredientType ) i )
>1054	CallExpression	FoodSortOrder ( ( IngredientType ) i )
>1055	ArgumentList	( IngredientType ) i
>1056	Argument	( IngredientType ) i
>1057	CastExpression	( IngredientType ) i
>1058	Identifier	i
>1059	CastTarget	IngredientType
>1060	Callee	FoodSortOrder
>1061	Identifier	FoodSortOrder
>1062	Callee	sortByIngredients . push_back
>1063	MemberAccess	sortByIngredients . push_back
>1064	Identifier	push_back
>1065	Identifier	sortByIngredients
>1066	IncDecOp	 
>1067	IncDec	++
>1068	Identifier	i
>1069	Condition	 
>1070	RelationalExpression	i < IT_INGREDIENTSEND
>1071	Identifier	IT_INGREDIENTSEND
>1072	Identifier	i
>1073	ForInit	 
>1074	IdentifierDeclStatement	int i = 0 ;
>1075	IdentifierDecl	i = 0
>1076	AssignmentExpr	i = 0
>1077	PrimaryExpression	0
>1078	Identifier	i
>1079	Identifier	i
>1080	IdentifierDeclType	int
>1081	ExpressionStatement	 
>1082	CallExpression	sortByIngredients . clear ( )
>1083	ArgumentList	 
>1084	Callee	sortByIngredients . clear
>1085	MemberAccess	sortByIngredients . clear
>1086	Identifier	clear
>1087	Identifier	sortByIngredients
>1088	ExpressionStatement	 
>1089	CallExpression	sortByHeal . push_back ( FoodSortOrder ( IT_NONE , IET_SPEED ) )
>1090	ArgumentList	FoodSortOrder ( IT_NONE , IET_SPEED )
>1091	Argument	FoodSortOrder ( IT_NONE , IET_SPEED )
>1092	CallExpression	FoodSortOrder ( IT_NONE , IET_SPEED )
>1093	ArgumentList	IT_NONE
>1094	Argument	IET_SPEED
>1095	Identifier	IET_SPEED
>1096	Argument	IT_NONE
>1097	Identifier	IT_NONE
>1098	Callee	FoodSortOrder
>1099	Identifier	FoodSortOrder
>1100	Callee	sortByHeal . push_back
>1101	MemberAccess	sortByHeal . push_back
>1102	Identifier	push_back
>1103	Identifier	sortByHeal
>1104	ExpressionStatement	 
>1105	CallExpression	sortByHeal . push_back ( FoodSortOrder ( IT_NONE , IET_DEFENSE ) )
>1106	ArgumentList	FoodSortOrder ( IT_NONE , IET_DEFENSE )
>1107	Argument	FoodSortOrder ( IT_NONE , IET_DEFENSE )
>1108	CallExpression	FoodSortOrder ( IT_NONE , IET_DEFENSE )
>1109	ArgumentList	IT_NONE
>1110	Argument	IET_DEFENSE
>1111	Identifier	IET_DEFENSE
>1112	Argument	IT_NONE
>1113	Identifier	IT_NONE
>1114	Callee	FoodSortOrder
>1115	Identifier	FoodSortOrder
>1116	Callee	sortByHeal . push_back
>1117	MemberAccess	sortByHeal . push_back
>1118	Identifier	push_back
>1119	Identifier	sortByHeal
>1120	ForStatement	for ( int i = 10 ; i >= - 10 ; i -- )
>1121	CompoundStatement	 
>1122	IfStatement	if ( i != 0 )
>1123	ExpressionStatement	 
>1124	CallExpression	sortByHeal . push_back ( FoodSortOrder ( IT_NONE , IET_HP , \"\" , i ) )
>1125	ArgumentList	FoodSortOrder ( IT_NONE , IET_HP , \"\" , i )
>1126	Argument	FoodSortOrder ( IT_NONE , IET_HP , \"\" , i )
>1127	CallExpression	FoodSortOrder ( IT_NONE , IET_HP , \"\" , i )
>1128	ArgumentList	IT_NONE
>1129	Argument	i
>1130	Identifier	i
>1131	Argument	\"\"
>1132	PrimaryExpression	\"\"
>1133	Argument	IET_HP
>1134	Identifier	IET_HP
>1135	Argument	IT_NONE
>1136	Identifier	IT_NONE
>1137	Callee	FoodSortOrder
>1138	Identifier	FoodSortOrder
>1139	Callee	sortByHeal . push_back
>1140	MemberAccess	sortByHeal . push_back
>1141	Identifier	push_back
>1142	Identifier	sortByHeal
>1143	Condition	 
>1144	EqualityExpression	i != 0
>1145	PrimaryExpression	0
>1146	Identifier	i
>1147	IncDecOp	 
>1148	IncDec	--
>1149	Identifier	i
>1150	Condition	 
>1151	RelationalExpression	i >= - 10
>1152	UnaryOp	- 10
>1153	PrimaryExpression	10
>1154	UnaryOperator	-
>1155	Identifier	i
>1156	ForInit	 
>1157	IdentifierDeclStatement	int i = 10 ;
>1158	IdentifierDecl	i = 10
>1159	AssignmentExpr	i = 10
>1160	PrimaryExpression	10
>1161	Identifier	i
>1162	Identifier	i
>1163	IdentifierDeclType	int
>1164	ExpressionStatement	 
>1165	CallExpression	sortByHeal . push_back ( FoodSortOrder ( IT_NONE , IET_MAXHP ) )
>1166	ArgumentList	FoodSortOrder ( IT_NONE , IET_MAXHP )
>1167	Argument	FoodSortOrder ( IT_NONE , IET_MAXHP )
>1168	CallExpression	FoodSortOrder ( IT_NONE , IET_MAXHP )
>1169	ArgumentList	IT_NONE
>1170	Argument	IET_MAXHP
>1171	Identifier	IET_MAXHP
>1172	Argument	IT_NONE
>1173	Identifier	IT_NONE
>1174	Callee	FoodSortOrder
>1175	Identifier	FoodSortOrder
>1176	Callee	sortByHeal . push_back
>1177	MemberAccess	sortByHeal . push_back
>1178	Identifier	push_back
>1179	Identifier	sortByHeal
>1180	ExpressionStatement	 
>1181	CallExpression	sortByHeal . clear ( )
>1182	ArgumentList	 
>1183	Callee	sortByHeal . clear
>1184	MemberAccess	sortByHeal . clear
>1185	Identifier	clear
>1186	Identifier	sortByHeal
>1187	ExpressionStatement	 
>1188	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_FOOD ) )
>1189	ArgumentList	FoodSortOrder ( IT_FOOD )
>1190	Argument	FoodSortOrder ( IT_FOOD )
>1191	CallExpression	FoodSortOrder ( IT_FOOD )
>1192	ArgumentList	IT_FOOD
>1193	Argument	IT_FOOD
>1194	Identifier	IT_FOOD
>1195	Callee	FoodSortOrder
>1196	Identifier	FoodSortOrder
>1197	Callee	sortByType . push_back
>1198	MemberAccess	sortByType . push_back
>1199	Identifier	push_back
>1200	Identifier	sortByType
>1201	ExpressionStatement	 
>1202	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_BONE ) )
>1203	ArgumentList	FoodSortOrder ( IT_BONE )
>1204	Argument	FoodSortOrder ( IT_BONE )
>1205	CallExpression	FoodSortOrder ( IT_BONE )
>1206	ArgumentList	IT_BONE
>1207	Argument	IT_BONE
>1208	Identifier	IT_BONE
>1209	Callee	FoodSortOrder
>1210	Identifier	FoodSortOrder
>1211	Callee	sortByType . push_back
>1212	MemberAccess	sortByType . push_back
>1213	Identifier	push_back
>1214	Identifier	sortByType
>1215	ExpressionStatement	 
>1216	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_ICECHUNK ) )
>1217	ArgumentList	FoodSortOrder ( IT_ICECHUNK )
>1218	Argument	FoodSortOrder ( IT_ICECHUNK )
>1219	CallExpression	FoodSortOrder ( IT_ICECHUNK )
>1220	ArgumentList	IT_ICECHUNK
>1221	Argument	IT_ICECHUNK
>1222	Identifier	IT_ICECHUNK
>1223	Callee	FoodSortOrder
>1224	Identifier	FoodSortOrder
>1225	Callee	sortByType . push_back
>1226	MemberAccess	sortByType . push_back
>1227	Identifier	push_back
>1228	Identifier	sortByType
>1229	ExpressionStatement	 
>1230	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_TENTACLE ) )
>1231	ArgumentList	FoodSortOrder ( IT_TENTACLE )
>1232	Argument	FoodSortOrder ( IT_TENTACLE )
>1233	CallExpression	FoodSortOrder ( IT_TENTACLE )
>1234	ArgumentList	IT_TENTACLE
>1235	Argument	IT_TENTACLE
>1236	Identifier	IT_TENTACLE
>1237	Callee	FoodSortOrder
>1238	Identifier	FoodSortOrder
>1239	Callee	sortByType . push_back
>1240	MemberAccess	sortByType . push_back
>1241	Identifier	push_back
>1242	Identifier	sortByType
>1243	ExpressionStatement	 
>1244	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_PART ) )
>1245	ArgumentList	FoodSortOrder ( IT_PART )
>1246	Argument	FoodSortOrder ( IT_PART )
>1247	CallExpression	FoodSortOrder ( IT_PART )
>1248	ArgumentList	IT_PART
>1249	Argument	IT_PART
>1250	Identifier	IT_PART
>1251	Callee	FoodSortOrder
>1252	Identifier	FoodSortOrder
>1253	Callee	sortByType . push_back
>1254	MemberAccess	sortByType . push_back
>1255	Identifier	push_back
>1256	Identifier	sortByType
>1257	ExpressionStatement	 
>1258	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_SHELL ) )
>1259	ArgumentList	FoodSortOrder ( IT_SHELL )
>1260	Argument	FoodSortOrder ( IT_SHELL )
>1261	CallExpression	FoodSortOrder ( IT_SHELL )
>1262	ArgumentList	IT_SHELL
>1263	Argument	IT_SHELL
>1264	Identifier	IT_SHELL
>1265	Callee	FoodSortOrder
>1266	Identifier	FoodSortOrder
>1267	Callee	sortByType . push_back
>1268	MemberAccess	sortByType . push_back
>1269	Identifier	push_back
>1270	Identifier	sortByType
>1271	ExpressionStatement	 
>1272	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_EGG ) )
>1273	ArgumentList	FoodSortOrder ( IT_EGG )
>1274	Argument	FoodSortOrder ( IT_EGG )
>1275	CallExpression	FoodSortOrder ( IT_EGG )
>1276	ArgumentList	IT_EGG
>1277	Argument	IT_EGG
>1278	Identifier	IT_EGG
>1279	Callee	FoodSortOrder
>1280	Identifier	FoodSortOrder
>1281	Callee	sortByType . push_back
>1282	MemberAccess	sortByType . push_back
>1283	Identifier	push_back
>1284	Identifier	sortByType
>1285	ExpressionStatement	 
>1286	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_BULB ) )
>1287	ArgumentList	FoodSortOrder ( IT_BULB )
>1288	Argument	FoodSortOrder ( IT_BULB )
>1289	CallExpression	FoodSortOrder ( IT_BULB )
>1290	ArgumentList	IT_BULB
>1291	Argument	IT_BULB
>1292	Identifier	IT_BULB
>1293	Callee	FoodSortOrder
>1294	Identifier	FoodSortOrder
>1295	Callee	sortByType . push_back
>1296	MemberAccess	sortByType . push_back
>1297	Identifier	push_back
>1298	Identifier	sortByType
>1299	ExpressionStatement	 
>1300	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_MUSHROOM ) )
>1301	ArgumentList	FoodSortOrder ( IT_MUSHROOM )
>1302	Argument	FoodSortOrder ( IT_MUSHROOM )
>1303	CallExpression	FoodSortOrder ( IT_MUSHROOM )
>1304	ArgumentList	IT_MUSHROOM
>1305	Argument	IT_MUSHROOM
>1306	Identifier	IT_MUSHROOM
>1307	Callee	FoodSortOrder
>1308	Identifier	FoodSortOrder
>1309	Callee	sortByType . push_back
>1310	MemberAccess	sortByType . push_back
>1311	Identifier	push_back
>1312	Identifier	sortByType
>1313	ExpressionStatement	 
>1314	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_BERRY ) )
>1315	ArgumentList	FoodSortOrder ( IT_BERRY )
>1316	Argument	FoodSortOrder ( IT_BERRY )
>1317	CallExpression	FoodSortOrder ( IT_BERRY )
>1318	ArgumentList	IT_BERRY
>1319	Argument	IT_BERRY
>1320	Identifier	IT_BERRY
>1321	Callee	FoodSortOrder
>1322	Identifier	FoodSortOrder
>1323	Callee	sortByType . push_back
>1324	MemberAccess	sortByType . push_back
>1325	Identifier	push_back
>1326	Identifier	sortByType
>1327	ExpressionStatement	 
>1328	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_ICECREAM ) )
>1329	ArgumentList	FoodSortOrder ( IT_ICECREAM )
>1330	Argument	FoodSortOrder ( IT_ICECREAM )
>1331	CallExpression	FoodSortOrder ( IT_ICECREAM )
>1332	ArgumentList	IT_ICECREAM
>1333	Argument	IT_ICECREAM
>1334	Identifier	IT_ICECREAM
>1335	Callee	FoodSortOrder
>1336	Identifier	FoodSortOrder
>1337	Callee	sortByType . push_back
>1338	MemberAccess	sortByType . push_back
>1339	Identifier	push_back
>1340	Identifier	sortByType
>1341	ExpressionStatement	 
>1342	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_OIL ) )
>1343	ArgumentList	FoodSortOrder ( IT_OIL )
>1344	Argument	FoodSortOrder ( IT_OIL )
>1345	CallExpression	FoodSortOrder ( IT_OIL )
>1346	ArgumentList	IT_OIL
>1347	Argument	IT_OIL
>1348	Identifier	IT_OIL
>1349	Callee	FoodSortOrder
>1350	Identifier	FoodSortOrder
>1351	Callee	sortByType . push_back
>1352	MemberAccess	sortByType . push_back
>1353	Identifier	push_back
>1354	Identifier	sortByType
>1355	ExpressionStatement	 
>1356	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_MEAT ) )
>1357	ArgumentList	FoodSortOrder ( IT_MEAT )
>1358	Argument	FoodSortOrder ( IT_MEAT )
>1359	CallExpression	FoodSortOrder ( IT_MEAT )
>1360	ArgumentList	IT_MEAT
>1361	Argument	IT_MEAT
>1362	Identifier	IT_MEAT
>1363	Callee	FoodSortOrder
>1364	Identifier	FoodSortOrder
>1365	Callee	sortByType . push_back
>1366	MemberAccess	sortByType . push_back
>1367	Identifier	push_back
>1368	Identifier	sortByType
>1369	ExpressionStatement	 
>1370	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_LEAF ) )
>1371	ArgumentList	FoodSortOrder ( IT_LEAF )
>1372	Argument	FoodSortOrder ( IT_LEAF )
>1373	CallExpression	FoodSortOrder ( IT_LEAF )
>1374	ArgumentList	IT_LEAF
>1375	Argument	IT_LEAF
>1376	Identifier	IT_LEAF
>1377	Callee	FoodSortOrder
>1378	Identifier	FoodSortOrder
>1379	Callee	sortByType . push_back
>1380	MemberAccess	sortByType . push_back
>1381	Identifier	push_back
>1382	Identifier	sortByType
>1383	ExpressionStatement	 
>1384	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_PEROGI ) )
>1385	ArgumentList	FoodSortOrder ( IT_PEROGI )
>1386	Argument	FoodSortOrder ( IT_PEROGI )
>1387	CallExpression	FoodSortOrder ( IT_PEROGI )
>1388	ArgumentList	IT_PEROGI
>1389	Argument	IT_PEROGI
>1390	Identifier	IT_PEROGI
>1391	Callee	FoodSortOrder
>1392	Identifier	FoodSortOrder
>1393	Callee	sortByType . push_back
>1394	MemberAccess	sortByType . push_back
>1395	Identifier	push_back
>1396	Identifier	sortByType
>1397	ExpressionStatement	 
>1398	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_LOAF ) )
>1399	ArgumentList	FoodSortOrder ( IT_LOAF )
>1400	Argument	FoodSortOrder ( IT_LOAF )
>1401	CallExpression	FoodSortOrder ( IT_LOAF )
>1402	ArgumentList	IT_LOAF
>1403	Argument	IT_LOAF
>1404	Identifier	IT_LOAF
>1405	Callee	FoodSortOrder
>1406	Identifier	FoodSortOrder
>1407	Callee	sortByType . push_back
>1408	MemberAccess	sortByType . push_back
>1409	Identifier	push_back
>1410	Identifier	sortByType
>1411	ExpressionStatement	 
>1412	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_SOUP ) )
>1413	ArgumentList	FoodSortOrder ( IT_SOUP )
>1414	Argument	FoodSortOrder ( IT_SOUP )
>1415	CallExpression	FoodSortOrder ( IT_SOUP )
>1416	ArgumentList	IT_SOUP
>1417	Argument	IT_SOUP
>1418	Identifier	IT_SOUP
>1419	Callee	FoodSortOrder
>1420	Identifier	FoodSortOrder
>1421	Callee	sortByType . push_back
>1422	MemberAccess	sortByType . push_back
>1423	Identifier	push_back
>1424	Identifier	sortByType
>1425	ExpressionStatement	 
>1426	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_CAKE ) )
>1427	ArgumentList	FoodSortOrder ( IT_CAKE )
>1428	Argument	FoodSortOrder ( IT_CAKE )
>1429	CallExpression	FoodSortOrder ( IT_CAKE )
>1430	ArgumentList	IT_CAKE
>1431	Argument	IT_CAKE
>1432	Identifier	IT_CAKE
>1433	Callee	FoodSortOrder
>1434	Identifier	FoodSortOrder
>1435	Callee	sortByType . push_back
>1436	MemberAccess	sortByType . push_back
>1437	Identifier	push_back
>1438	Identifier	sortByType
>1439	ExpressionStatement	 
>1440	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_ROLL ) )
>1441	ArgumentList	FoodSortOrder ( IT_ROLL )
>1442	Argument	FoodSortOrder ( IT_ROLL )
>1443	CallExpression	FoodSortOrder ( IT_ROLL )
>1444	ArgumentList	IT_ROLL
>1445	Argument	IT_ROLL
>1446	Identifier	IT_ROLL
>1447	Callee	FoodSortOrder
>1448	Identifier	FoodSortOrder
>1449	Callee	sortByType . push_back
>1450	MemberAccess	sortByType . push_back
>1451	Identifier	push_back
>1452	Identifier	sortByType
>1453	ExpressionStatement	 
>1454	CallExpression	sortByType . push_back ( FoodSortOrder ( IT_POULTICE ) )
>1455	ArgumentList	FoodSortOrder ( IT_POULTICE )
>1456	Argument	FoodSortOrder ( IT_POULTICE )
>1457	CallExpression	FoodSortOrder ( IT_POULTICE )
>1458	ArgumentList	IT_POULTICE
>1459	Argument	IT_POULTICE
>1460	Identifier	IT_POULTICE
>1461	Callee	FoodSortOrder
>1462	Identifier	FoodSortOrder
>1463	Callee	sortByType . push_back
>1464	MemberAccess	sortByType . push_back
>1465	Identifier	push_back
>1466	Identifier	sortByType
>1467	ExpressionStatement	 
>1468	CallExpression	sortByType . clear ( )
>1469	ArgumentList	 
>1470	Callee	sortByType . clear
>1471	MemberAccess	sortByType . clear
>1472	Identifier	clear
>1473	Identifier	sortByType
>1508	FunctionDef	Continuity 
>1509	ParameterList	 
>1510	ReturnType	void
>1511	CompoundStatement	 
>1512	IfStatement	if ( doSort )
>1513	CompoundStatement	 
>1514	ExpressionStatement	 
>1515	CallExpression	sort . clear ( )
>1516	ArgumentList	 
>1517	Callee	sort . clear
>1518	MemberAccess	sort . clear
>1519	Identifier	clear
>1520	Identifier	sort
>1521	ForStatement	for ( int i = 0 ; i < sort . size ( ) ; i ++ )
>1522	CompoundStatement	 
>1523	ExpressionStatement	 
>1524	CallExpression	ingredients . push_back ( sort [ i ] )
>1525	ArgumentList	sort [ i ]
>1526	Argument	sort [ i ]
>1527	ArrayIndexing	sort [ i ]
>1528	Identifier	i
>1529	Identifier	sort
>1530	Callee	ingredients . push_back
>1531	MemberAccess	ingredients . push_back
>1532	Identifier	push_back
>1533	Identifier	ingredients
>1534	IncDecOp	 
>1535	IncDec	++
>1536	Identifier	i
>1537	Condition	 
>1538	RelationalExpression	i < sort . size ( )
>1539	CallExpression	sort . size ( )
>1540	ArgumentList	 
>1541	Callee	sort . size
>1542	MemberAccess	sort . size
>1543	Identifier	size
>1544	Identifier	sort
>1545	Identifier	i
>1546	ForInit	 
>1547	IdentifierDeclStatement	int i = 0 ;
>1548	IdentifierDecl	i = 0
>1549	AssignmentExpr	i = 0
>1550	PrimaryExpression	0
>1551	Identifier	i
>1552	Identifier	i
>1553	IdentifierDeclType	int
>1554	ExpressionStatement	 
>1555	CallExpression	ingredients . clear ( )
>1556	ArgumentList	 
>1557	Callee	ingredients . clear
>1558	MemberAccess	ingredients . clear
>1559	Identifier	clear
>1560	Identifier	ingredients
>1561	ForStatement	for ( int i = 0 ; i < dsq -> continuity . ingredients . size ( ) ; i ++ )
>1562	CompoundStatement	 
>1563	IfStatement	if ( ! data -> sorted )
>1564	CompoundStatement	 
>1565	ExpressionStatement	 
>1566	CallExpression	sort . push_back ( data )
>1567	ArgumentList	data
>1568	Argument	data
>1569	Identifier	data
>1570	Callee	sort . push_back
>1571	MemberAccess	sort . push_back
>1572	Identifier	push_back
>1573	Identifier	sort
>1574	ExpressionStatement	 
>1575	AssignmentExpr	data -> sorted = true
>1576	Identifier	true
>1577	PtrMemberAccess	data -> sorted
>1578	Identifier	sorted
>1579	Identifier	data
>1580	Condition	 
>1581	UnaryOp	! data -> sorted
>1582	PtrMemberAccess	data -> sorted
>1583	Identifier	sorted
>1584	Identifier	data
>1585	UnaryOperator	!
>1586	IdentifierDeclStatement	 
>1587	IdentifierDecl	* data = dsq -> continuity . ingredients [ i ]
>1588	AssignmentExpr	* data = dsq -> continuity . ingredients [ i ]
>1589	ArrayIndexing	dsq -> continuity . ingredients [ i ]
>1590	Identifier	i
>1591	MemberAccess	dsq -> continuity . ingredients
>1592	Identifier	ingredients
>1593	PtrMemberAccess	dsq -> continuity
>1594	Identifier	continuity
>1595	Identifier	dsq
>1596	Identifier	data
>1597	Identifier	data
>1598	IdentifierDeclType	IngredientData *
>1599	IncDecOp	 
>1600	IncDec	++
>1601	Identifier	i
>1602	Condition	 
>1603	RelationalExpression	i < dsq -> continuity . ingredients . size ( )
>1604	CallExpression	dsq -> continuity . ingredients . size ( )
>1605	ArgumentList	 
>1606	Callee	dsq -> continuity . ingredients . size
>1607	MemberAccess	dsq -> continuity . ingredients . size
>1608	Identifier	size
>1609	MemberAccess	dsq -> continuity . ingredients
>1610	Identifier	ingredients
>1611	PtrMemberAccess	dsq -> continuity
>1612	Identifier	continuity
>1613	Identifier	dsq
>1614	Identifier	i
>1615	ForInit	 
>1616	IdentifierDeclStatement	int i = 0 ;
>1617	IdentifierDecl	i = 0
>1618	AssignmentExpr	i = 0
>1619	PrimaryExpression	0
>1620	Identifier	i
>1621	Identifier	i
>1622	IdentifierDeclType	int
>1623	ForStatement	for ( int j = 0 ; j < sortOrder . size ( ) ; j ++ )
>1624	CompoundStatement	 
>1625	ForStatement	for ( int i = 0 ; i < dsq -> continuity . ingredients . size ( ) ; i ++ )
>1626	CompoundStatement	 
>1627	IfStatement	if ( ! data -> sorted )
>1628	CompoundStatement	 
>1629	IfStatement	if ( sortOrder [ j ] . type == IT_NONE || sortOrder [ j ] . type == data -> type )
>1630	CompoundStatement	 
>1631	IfStatement	if ( ! sortOrder [ j ] . name . empty ( ) )
>1632	ElseStatement	else
>1633	IfStatement	if ( sortOrder [ j ] . effectType != IET_NONE )
>1634	ElseStatement	else
>1635	CompoundStatement	 
>1636	ExpressionStatement	 
>1637	CallExpression	sort . push_back ( data )
>1638	ArgumentList	data
>1639	Argument	data
>1640	Identifier	data
>1641	Callee	sort . push_back
>1642	MemberAccess	sort . push_back
>1643	Identifier	push_back
>1644	Identifier	sort
>1645	ExpressionStatement	 
>1646	AssignmentExpr	data -> sorted = true
>1647	Identifier	true
>1648	PtrMemberAccess	data -> sorted
>1649	Identifier	sorted
>1650	Identifier	data
>1651	CompoundStatement	 
>1652	ForStatement	for ( int c = 0 ; c < data -> effects . size ( ) ; c ++ )
>1653	CompoundStatement	 
>1654	IfStatement	if ( data -> effects [ c ] . type == sortOrder [ j ] . effectType )
>1655	CompoundStatement	 
>1656	IfStatement	if ( sortOrder [ j ] . effectAmount == 0 || data -> effects [ c ] . magnitude == sortOrder [ j ] . effectAmount )
>1657	CompoundStatement	 
>1658	ExpressionStatement	 
>1659	CallExpression	sort . push_back ( data )
>1660	ArgumentList	data
>1661	Argument	data
>1662	Identifier	data
>1663	Callee	sort . push_back
>1664	MemberAccess	sort . push_back
>1665	Identifier	push_back
>1666	Identifier	sort
>1667	ExpressionStatement	 
>1668	AssignmentExpr	data -> sorted = true
>1669	Identifier	true
>1670	PtrMemberAccess	data -> sorted
>1671	Identifier	sorted
>1672	Identifier	data
>1673	Condition	 
>1674	OrExpression	sortOrder [ j ] . effectAmount == 0 || data -> effects [ c ] . magnitude == sortOrder [ j ] . effectAmount
>1675	EqualityExpression	data -> effects [ c ] . magnitude == sortOrder [ j ] . effectAmount
>1676	MemberAccess	sortOrder [ j ] . effectAmount
>1677	Identifier	effectAmount
>1678	ArrayIndexing	sortOrder [ j ]
>1679	Identifier	j
>1680	Identifier	sortOrder
>1681	MemberAccess	data -> effects [ c ] . magnitude
>1682	Identifier	magnitude
>1683	ArrayIndexing	data -> effects [ c ]
>1684	Identifier	c
>1685	PtrMemberAccess	data -> effects
>1686	Identifier	effects
>1687	Identifier	data
>1688	EqualityExpression	sortOrder [ j ] . effectAmount == 0
>1689	PrimaryExpression	0
>1690	MemberAccess	sortOrder [ j ] . effectAmount
>1691	Identifier	effectAmount
>1692	ArrayIndexing	sortOrder [ j ]
>1693	Identifier	j
>1694	Identifier	sortOrder
>1695	Condition	 
>1696	EqualityExpression	data -> effects [ c ] . type == sortOrder [ j ] . effectType
>1697	MemberAccess	sortOrder [ j ] . effectType
>1698	Identifier	effectType
>1699	ArrayIndexing	sortOrder [ j ]
>1700	Identifier	j
>1701	Identifier	sortOrder
>1702	MemberAccess	data -> effects [ c ] . type
>1703	Identifier	type
>1704	ArrayIndexing	data -> effects [ c ]
>1705	Identifier	c
>1706	PtrMemberAccess	data -> effects
>1707	Identifier	effects
>1708	Identifier	data
>1709	IncDecOp	 
>1710	IncDec	++
>1711	Identifier	c
>1712	Condition	 
>1713	RelationalExpression	c < data -> effects . size ( )
>1714	CallExpression	data -> effects . size ( )
>1715	ArgumentList	 
>1716	Callee	data -> effects . size
>1717	MemberAccess	data -> effects . size
>1718	Identifier	size
>1719	PtrMemberAccess	data -> effects
>1720	Identifier	effects
>1721	Identifier	data
>1722	Identifier	c
>1723	ForInit	 
>1724	IdentifierDeclStatement	int c = 0 ;
>1725	IdentifierDecl	c = 0
>1726	AssignmentExpr	c = 0
>1727	PrimaryExpression	0
>1728	Identifier	c
>1729	Identifier	c
>1730	IdentifierDeclType	int
>1731	Condition	 
>1732	EqualityExpression	sortOrder [ j ] . effectType != IET_NONE
>1733	Identifier	IET_NONE
>1734	MemberAccess	sortOrder [ j ] . effectType
>1735	Identifier	effectType
>1736	ArrayIndexing	sortOrder [ j ]
>1737	Identifier	j
>1738	Identifier	sortOrder
>1739	CompoundStatement	 
>1740	IfStatement	if ( sortOrder [ j ] . name == data -> name )
>1741	CompoundStatement	 
>1742	ExpressionStatement	 
>1743	CallExpression	sort . push_back ( data )
>1744	ArgumentList	data
>1745	Argument	data
>1746	Identifier	data
>1747	Callee	sort . push_back
>1748	MemberAccess	sort . push_back
>1749	Identifier	push_back
>1750	Identifier	sort
>1751	ExpressionStatement	 
>1752	AssignmentExpr	data -> sorted = true
>1753	Identifier	true
>1754	PtrMemberAccess	data -> sorted
>1755	Identifier	sorted
>1756	Identifier	data
>1757	Condition	 
>1758	EqualityExpression	sortOrder [ j ] . name == data -> name
>1759	PtrMemberAccess	data -> name
>1760	Identifier	name
>1761	Identifier	data
>1762	MemberAccess	sortOrder [ j ] . name
>1763	Identifier	name
>1764	ArrayIndexing	sortOrder [ j ]
>1765	Identifier	j
>1766	Identifier	sortOrder
>1767	Condition	 
>1768	UnaryOp	! sortOrder [ j ] . name . empty ( )
>1769	CallExpression	sortOrder [ j ] . name . empty ( )
>1770	ArgumentList	 
>1771	Callee	sortOrder [ j ] . name . empty
>1772	MemberAccess	sortOrder [ j ] . name . empty
>1773	Identifier	empty
>1774	MemberAccess	sortOrder [ j ] . name
>1775	Identifier	name
>1776	ArrayIndexing	sortOrder [ j ]
>1777	Identifier	j
>1778	Identifier	sortOrder
>1779	UnaryOperator	!
>1780	Condition	 
>1781	OrExpression	sortOrder [ j ] . type == IT_NONE || sortOrder [ j ] . type == data -> type
>1782	EqualityExpression	sortOrder [ j ] . type == data -> type
>1783	PtrMemberAccess	data -> type
>1784	Identifier	type
>1785	Identifier	data
>1786	MemberAccess	sortOrder [ j ] . type
>1787	Identifier	type
>1788	ArrayIndexing	sortOrder [ j ]
>1789	Identifier	j
>1790	Identifier	sortOrder
>1791	EqualityExpression	sortOrder [ j ] . type == IT_NONE
>1792	Identifier	IT_NONE
>1793	MemberAccess	sortOrder [ j ] . type
>1794	Identifier	type
>1795	ArrayIndexing	sortOrder [ j ]
>1796	Identifier	j
>1797	Identifier	sortOrder
>1798	Condition	 
>1799	UnaryOp	! data -> sorted
>1800	PtrMemberAccess	data -> sorted
>1801	Identifier	sorted
>1802	Identifier	data
>1803	UnaryOperator	!
>1804	IdentifierDeclStatement	 
>1805	IdentifierDecl	* data = dsq -> continuity . ingredients [ i ]
>1806	AssignmentExpr	* data = dsq -> continuity . ingredients [ i ]
>1807	ArrayIndexing	dsq -> continuity . ingredients [ i ]
>1808	Identifier	i
>1809	MemberAccess	dsq -> continuity . ingredients
>1810	Identifier	ingredients
>1811	PtrMemberAccess	dsq -> continuity
>1812	Identifier	continuity
>1813	Identifier	dsq
>1814	Identifier	data
>1815	Identifier	data
>1816	IdentifierDeclType	IngredientData *
>1817	IncDecOp	 
>1818	IncDec	++
>1819	Identifier	i
>1820	Condition	 
>1821	RelationalExpression	i < dsq -> continuity . ingredients . size ( )
>1822	CallExpression	dsq -> continuity . ingredients . size ( )
>1823	ArgumentList	 
>1824	Callee	dsq -> continuity . ingredients . size
>1825	MemberAccess	dsq -> continuity . ingredients . size
>1826	Identifier	size
>1827	MemberAccess	dsq -> continuity . ingredients
>1828	Identifier	ingredients
>1829	PtrMemberAccess	dsq -> continuity
>1830	Identifier	continuity
>1831	Identifier	dsq
>1832	Identifier	i
>1833	ForInit	 
>1834	IdentifierDeclStatement	int i = 0 ;
>1835	IdentifierDecl	i = 0
>1836	AssignmentExpr	i = 0
>1837	PrimaryExpression	0
>1838	Identifier	i
>1839	Identifier	i
>1840	IdentifierDeclType	int
>1841	IncDecOp	 
>1842	IncDec	++
>1843	Identifier	j
>1844	Condition	 
>1845	RelationalExpression	j < sortOrder . size ( )
>1846	CallExpression	sortOrder . size ( )
>1847	ArgumentList	 
>1848	Callee	sortOrder . size
>1849	MemberAccess	sortOrder . size
>1850	Identifier	size
>1851	Identifier	sortOrder
>1852	Identifier	j
>1853	ForInit	 
>1854	IdentifierDeclStatement	int j = 0 ;
>1855	IdentifierDecl	j = 0
>1856	AssignmentExpr	j = 0
>1857	PrimaryExpression	0
>1858	Identifier	j
>1859	Identifier	j
>1860	IdentifierDeclType	int
>1861	ForStatement	for ( int i = 0 ; i < dsq -> continuity . ingredients . size ( ) ; i ++ )
>1862	CompoundStatement	 
>1863	ExpressionStatement	 
>1864	AssignmentExpr	dsq -> continuity . ingredients [ i ] -> sorted = false
>1865	Identifier	false
>1866	PtrMemberAccess	dsq -> continuity . ingredients [ i ] -> sorted
>1867	Identifier	sorted
>1868	ArrayIndexing	dsq -> continuity . ingredients [ i ]
>1869	Identifier	i
>1870	MemberAccess	dsq -> continuity . ingredients
>1871	Identifier	ingredients
>1872	PtrMemberAccess	dsq -> continuity
>1873	Identifier	continuity
>1874	Identifier	dsq
>1875	IncDecOp	 
>1876	IncDec	++
>1877	Identifier	i
>1878	Condition	 
>1879	RelationalExpression	i < dsq -> continuity . ingredients . size ( )
>1880	CallExpression	dsq -> continuity . ingredients . size ( )
>1881	ArgumentList	 
>1882	Callee	dsq -> continuity . ingredients . size
>1883	MemberAccess	dsq -> continuity . ingredients . size
>1884	Identifier	size
>1885	MemberAccess	dsq -> continuity . ingredients
>1886	Identifier	ingredients
>1887	PtrMemberAccess	dsq -> continuity
>1888	Identifier	continuity
>1889	Identifier	dsq
>1890	Identifier	i
>1891	ForInit	 
>1892	IdentifierDeclStatement	int i = 0 ;
>1893	IdentifierDecl	i = 0
>1894	AssignmentExpr	i = 0
>1895	PrimaryExpression	0
>1896	Identifier	i
>1897	Identifier	i
>1898	IdentifierDeclType	int
>1899	IdentifierDeclStatement	 
>1900	IdentifierDecl	sort
>1901	Identifier	sort
>1902	IdentifierDeclType	std 
>1903	Condition	 
>1904	Identifier	doSort
>1905	SwitchStatement	switch ( dsq -> continuity . foodSortType )
>1906	CompoundStatement	 
>1907	BreakStatement	 
>1908	ExpressionStatement	 
>1909	AssignmentExpr	sortOrder = sortByIngredients
>1910	Identifier	sortByIngredients
>1911	Identifier	sortOrder
>1912	Label	 
>1913	Identifier	FOODSORT_BYINGREDIENT
>1914	BreakStatement	 
>1915	ExpressionStatement	 
>1916	AssignmentExpr	sortOrder = sortByHeal
>1917	Identifier	sortByHeal
>1918	Identifier	sortOrder
>1919	Label	 
>1920	Identifier	FOODSORT_BYHEAL
>1921	BreakStatement	 
>1922	ExpressionStatement	 
>1923	AssignmentExpr	sortOrder = sortByType
>1924	Identifier	sortByType
>1925	Identifier	sortOrder
>1926	Label	 
>1927	Identifier	FOODSORT_BYTYPE
>1928	Condition	 
>1929	MemberAccess	dsq -> continuity . foodSortType
>1930	Identifier	foodSortType
>1931	PtrMemberAccess	dsq -> continuity
>1932	Identifier	continuity
>1933	Identifier	dsq
>1934	IdentifierDeclStatement	 
>1935	IdentifierDecl	doSort = true
>1936	AssignmentExpr	doSort = true
>1937	Identifier	true
>1938	Identifier	true
>1939	Identifier	doSort
>1940	IdentifierDeclType	bool
>1941	IdentifierDeclStatement	 
>1942	IdentifierDecl	sortOrder
>1943	Identifier	sortOrder
>1944	IdentifierDeclType	std 
>1999	FunctionDef	Continuity 
>2000	ParameterList	float t
>2001	Parameter	 
>2002	Identifier	t
>2003	ParameterType	float
>2004	ReturnType	void
>2005	CompoundStatement	 
>2006	ExpressionStatement	 
>2007	CallExpression	regenTimer . start ( t )
>2008	ArgumentList	t
>2009	Argument	t
>2010	Identifier	t
>2011	Callee	regenTimer . start
>2012	MemberAccess	regenTimer . start
>2013	Identifier	start
>2014	Identifier	regenTimer
>2020	FunctionDef	Continuity 
>2021	ParameterList	float t
>2022	Parameter	 
>2023	Identifier	t
>2024	ParameterType	float
>2025	ReturnType	void
>2026	CompoundStatement	 
>2027	ExpressionStatement	 
>2028	CallExpression	dsq -> game -> avatar -> applyTripEffects ( )
>2029	ArgumentList	 
>2030	Callee	dsq -> game -> avatar -> applyTripEffects
>2031	PtrMemberAccess	dsq -> game -> avatar -> applyTripEffects
>2032	Identifier	applyTripEffects
>2033	PtrMemberAccess	dsq -> game -> avatar
>2034	Identifier	avatar
>2035	PtrMemberAccess	dsq -> game
>2036	Identifier	game
>2037	Identifier	dsq
>2038	ExpressionStatement	 
>2039	CallExpression	tripTimer . start ( t )
>2040	ArgumentList	t
>2041	Argument	t
>2042	Identifier	t
>2043	Callee	tripTimer . start
>2044	MemberAccess	tripTimer . start
>2045	Identifier	start
>2046	Identifier	tripTimer
>2058	FunctionDef	Continuity 
>2059	ParameterList	float t
>2060	Parameter	 
>2061	Identifier	t
>2062	ParameterType	float
>2063	ReturnType	void
>2064	CompoundStatement	 
>2065	ExpressionStatement	 
>2066	CallExpression	invincibleTimer . start ( t )
>2067	ArgumentList	t
>2068	Argument	t
>2069	Identifier	t
>2070	Callee	invincibleTimer . start
>2071	MemberAccess	invincibleTimer . start
>2072	Identifier	start
>2073	Identifier	invincibleTimer
>2079	FunctionDef	Continuity 
>2080	ParameterList	float s , float t
>2081	Parameter	 
>2082	Identifier	t
>2083	ParameterType	float
>2084	Parameter	 
>2085	Identifier	s
>2086	ParameterType	float
>2087	ReturnType	void
>2088	CompoundStatement	 
>2089	ExpressionStatement	 
>2090	AssignmentExpr	speedMult = s
>2091	Identifier	s
>2092	Identifier	speedMult
>2093	ExpressionStatement	 
>2094	CallExpression	speedMultTimer . start ( t )
>2095	ArgumentList	t
>2096	Argument	t
>2097	Identifier	t
>2098	Callee	speedMultTimer . start
>2099	MemberAccess	speedMultTimer . start
>2100	Identifier	start
>2101	Identifier	speedMultTimer
>2109	FunctionDef	Continuity 
>2110	ParameterList	float m , float t
>2111	Parameter	 
>2112	Identifier	t
>2113	ParameterType	float
>2114	Parameter	 
>2115	Identifier	m
>2116	ParameterType	float
>2117	ReturnType	void
>2118	CompoundStatement	 
>2119	ExpressionStatement	 
>2120	AssignmentExpr	energyMult = m
>2121	Identifier	m
>2122	Identifier	energyMult
>2123	ExpressionStatement	 
>2124	CallExpression	energyTimer . start ( t )
>2125	ArgumentList	t
>2126	Argument	t
>2127	Identifier	t
>2128	Callee	energyTimer . start
>2129	MemberAccess	energyTimer . start
>2130	Identifier	start
>2131	Identifier	energyTimer
>2139	FunctionDef	Continuity 
>2140	ParameterList	float m , float t
>2141	Parameter	 
>2142	Identifier	t
>2143	ParameterType	float
>2144	Parameter	 
>2145	Identifier	m
>2146	ParameterType	float
>2147	ReturnType	void
>2148	CompoundStatement	 
>2149	ExpressionStatement	 
>2150	AssignmentExpr	liPower = m
>2151	Identifier	m
>2152	Identifier	liPower
>2153	ExpressionStatement	 
>2154	CallExpression	liPowerTimer . start ( t )
>2155	ArgumentList	t
>2156	Argument	t
>2157	Identifier	t
>2158	Callee	liPowerTimer . start
>2159	MemberAccess	liPowerTimer . start
>2160	Identifier	start
>2161	Identifier	liPowerTimer
>2169	FunctionDef	Continuity 
>2170	ParameterList	float m , float t
>2171	Parameter	 
>2172	Identifier	t
>2173	ParameterType	float
>2174	Parameter	 
>2175	Identifier	m
>2176	ParameterType	float
>2177	ReturnType	void
>2178	CompoundStatement	 
>2179	ExpressionStatement	 
>2180	CallExpression	petPowerTimer . start ( t )
>2181	ArgumentList	t
>2182	Argument	t
>2183	Identifier	t
>2184	Callee	petPowerTimer . start
>2185	MemberAccess	petPowerTimer . start
>2186	Identifier	start
>2187	Identifier	petPowerTimer
>2188	ExpressionStatement	 
>2189	AssignmentExpr	petPower = m
>2190	Identifier	m
>2191	Identifier	petPower
>2199	FunctionDef	Continuity 
>2200	ParameterList	float m , float t
>2201	Parameter	 
>2202	Identifier	t
>2203	ParameterType	float
>2204	Parameter	 
>2205	Identifier	m
>2206	ParameterType	float
>2207	ReturnType	void
>2208	CompoundStatement	 
>2209	ExpressionStatement	 
>2210	CallExpression	lightTimer . start ( t )
>2211	ArgumentList	t
>2212	Argument	t
>2213	Identifier	t
>2214	Callee	lightTimer . start
>2215	MemberAccess	lightTimer . start
>2216	Identifier	start
>2217	Identifier	lightTimer
>2218	ExpressionStatement	 
>2219	AssignmentExpr	light = m
>2220	Identifier	m
>2221	Identifier	light
>2229	FunctionDef	Continuity 
>2230	ParameterList	float t
>2231	Parameter	 
>2232	Identifier	t
>2233	ParameterType	float
>2234	ReturnType	void
>2235	CompoundStatement	 
>2236	IfStatement	if ( dsq -> game -> avatar )
>2237	CompoundStatement	 
>2238	IfStatement	if ( ! dsq -> game -> avatar -> web )
>2239	CompoundStatement	 
>2240	ExpressionStatement	 
>2241	CallExpression	dsq -> game -> avatar -> createWeb ( )
>2242	ArgumentList	 
>2243	Callee	dsq -> game -> avatar -> createWeb
>2244	PtrMemberAccess	dsq -> game -> avatar -> createWeb
>2245	Identifier	createWeb
>2246	PtrMemberAccess	dsq -> game -> avatar
>2247	Identifier	avatar
>2248	PtrMemberAccess	dsq -> game
>2249	Identifier	game
>2250	Identifier	dsq
>2251	Condition	 
>2252	UnaryOp	! dsq -> game -> avatar -> web
>2253	PtrMemberAccess	dsq -> game -> avatar -> web
>2254	Identifier	web
>2255	PtrMemberAccess	dsq -> game -> avatar
>2256	Identifier	avatar
>2257	PtrMemberAccess	dsq -> game
>2258	Identifier	game
>2259	Identifier	dsq
>2260	UnaryOperator	!
>2261	Condition	 
>2262	PtrMemberAccess	dsq -> game -> avatar
>2263	Identifier	avatar
>2264	PtrMemberAccess	dsq -> game
>2265	Identifier	game
>2266	Identifier	dsq
>2267	ExpressionStatement	 
>2268	CallExpression	webBitTimer . start ( webBitTime )
>2269	ArgumentList	webBitTime
>2270	Argument	webBitTime
>2271	Identifier	webBitTime
>2272	Callee	webBitTimer . start
>2273	MemberAccess	webBitTimer . start
>2274	Identifier	start
>2275	Identifier	webBitTimer
>2276	ExpressionStatement	 
>2277	CallExpression	webTimer . start ( t )
>2278	ArgumentList	t
>2279	Argument	t
>2280	Identifier	t
>2281	Callee	webTimer . start
>2282	MemberAccess	webTimer . start
>2283	Identifier	start
>2284	Identifier	webTimer
>2302	FunctionDef	Continuity 
>2303	ParameterList	float m , float t
>2304	Parameter	 
>2305	Identifier	t
>2306	ParameterType	float
>2307	Parameter	 
>2308	Identifier	m
>2309	ParameterType	float
>2310	ReturnType	void
>2311	CompoundStatement	 
>2312	IfStatement	if ( poison )
>2313	CompoundStatement	 
>2314	ExpressionStatement	 
>2315	CallExpression	poisonBitTimer . start ( poisonBitTime )
>2316	ArgumentList	poisonBitTime
>2317	Argument	poisonBitTime
>2318	Identifier	poisonBitTime
>2319	Callee	poisonBitTimer . start
>2320	MemberAccess	poisonBitTimer . start
>2321	Identifier	start
>2322	Identifier	poisonBitTimer
>2323	Condition	 
>2324	Identifier	poison
>2325	ExpressionStatement	 
>2326	AssignmentExpr	poison = m
>2327	Identifier	m
>2328	Identifier	poison
>2329	ExpressionStatement	 
>2330	CallExpression	poisonTimer . start ( t )
>2331	ArgumentList	t
>2332	Argument	t
>2333	Identifier	t
>2334	Callee	poisonTimer . start
>2335	MemberAccess	poisonTimer . start
>2336	Identifier	start
>2337	Identifier	poisonTimer
>2347	FunctionDef	Continuity 
>2348	ParameterList	 
>2349	ReturnType	void
>2350	CompoundStatement	 
>2351	IfStatement	if ( dsq -> game -> avatar )
>2352	CompoundStatement	 
>2353	ExpressionStatement	 
>2354	CallExpression	dsq -> game -> avatar -> setBlind ( 0 )
>2355	ArgumentList	0
>2356	Argument	0
>2357	PrimaryExpression	0
>2358	Callee	dsq -> game -> avatar -> setBlind
>2359	PtrMemberAccess	dsq -> game -> avatar -> setBlind
>2360	Identifier	setBlind
>2361	PtrMemberAccess	dsq -> game -> avatar
>2362	Identifier	avatar
>2363	PtrMemberAccess	dsq -> game
>2364	Identifier	game
>2365	Identifier	dsq
>2366	Condition	 
>2367	PtrMemberAccess	dsq -> game -> avatar
>2368	Identifier	avatar
>2369	PtrMemberAccess	dsq -> game
>2370	Identifier	game
>2371	Identifier	dsq
>2372	ExpressionStatement	 
>2373	CallExpression	setPoison ( 0 , 0 )
>2374	ArgumentList	0
>2375	Argument	0
>2376	PrimaryExpression	0
>2377	Argument	0
>2378	PrimaryExpression	0
>2379	Callee	setPoison
>2380	Identifier	setPoison
>2390	FunctionDef	Continuity 
>2391	ParameterList	float s , float t
>2392	Parameter	 
>2393	Identifier	t
>2394	ParameterType	float
>2395	Parameter	 
>2396	Identifier	s
>2397	ParameterType	float
>2398	ReturnType	void
>2399	CompoundStatement	 
>2400	ExpressionStatement	 
>2401	AssignmentExpr	defenseMult = s
>2402	Identifier	s
>2403	Identifier	defenseMult
>2404	ExpressionStatement	 
>2405	CallExpression	defenseMultTimer . start ( t )
>2406	ArgumentList	t
>2407	Argument	t
>2408	Identifier	t
>2409	Callee	defenseMultTimer . start
>2410	MemberAccess	defenseMultTimer . start
>2411	Identifier	start
>2412	Identifier	defenseMultTimer
>2420	FunctionDef	Continuity 
>2421	ParameterList	float m , float t
>2422	Parameter	 
>2423	Identifier	t
>2424	ParameterType	float
>2425	Parameter	 
>2426	Identifier	m
>2427	ParameterType	float
>2428	ReturnType	void
>2429	CompoundStatement	 
>2430	ExpressionStatement	 
>2431	AssignmentExpr	biteMult = m
>2432	Identifier	m
>2433	Identifier	biteMult
>2434	ExpressionStatement	 
>2435	CallExpression	biteMultTimer . start ( t )
>2436	ArgumentList	t
>2437	Argument	t
>2438	Identifier	t
>2439	Callee	biteMultTimer . start
>2440	MemberAccess	biteMultTimer . start
>2441	Identifier	start
>2442	Identifier	biteMultTimer
>2450	FunctionDef	Continuity 
>2451	ParameterList	float m , float t
>2452	Parameter	 
>2453	Identifier	t
>2454	ParameterType	float
>2455	Parameter	 
>2456	Identifier	m
>2457	ParameterType	float
>2458	ReturnType	void
>2459	CompoundStatement	 
>2460	ExpressionStatement	 
>2461	AssignmentExpr	fishPoison = m
>2462	Identifier	m
>2463	Identifier	fishPoison
>2464	ExpressionStatement	 
>2465	CallExpression	fishPoisonTimer . start ( t )
>2466	ArgumentList	t
>2467	Argument	t
>2468	Identifier	t
>2469	Callee	fishPoisonTimer . start
>2470	MemberAccess	fishPoisonTimer . start
>2471	Identifier	start
>2472	Identifier	fishPoisonTimer
>2480	FunctionDef	Continuity 
>2481	ParameterList	IngredientData * data , int i
>2482	Parameter	 
>2483	Identifier	i
>2484	ParameterType	int
>2485	Parameter	 
>2486	Identifier	data
>2487	ParameterType	IngredientData *
>2488	ReturnType	std 
>2489	CompoundStatement	 
>2490	ReturnStatement	 
>2491	PrimaryExpression	\"\"
>2492	SwitchStatement	switch ( useType )
>2493	CompoundStatement	 
>2494	BreakStatement	 
>2495	IfStatement	if ( dsq -> game -> cookingScript )
>2496	CompoundStatement	 
>2497	ReturnStatement	 
>2498	Identifier	ret
>2499	ExpressionStatement	 
>2500	CallExpression	dsq -> game -> cookingScript -> call ( \"getIngredientEffectString\" , data -> name . c_str ( ) , & ret )
>2501	ArgumentList	\"getIngredientEffectString\"
>2502	Argument	& ret
>2503	UnaryOp	& ret
>2504	Identifier	ret
>2505	UnaryOperator	&
>2506	Argument	data -> name . c_str ( )
>2507	CallExpression	data -> name . c_str ( )
>2508	ArgumentList	 
>2509	Callee	data -> name . c_str
>2510	MemberAccess	data -> name . c_str
>2511	Identifier	c_str
>2512	PtrMemberAccess	data -> name
>2513	Identifier	name
>2514	Identifier	data
>2515	Argument	\"getIngredientEffectString\"
>2516	PrimaryExpression	\"getIngredientEffectString\"
>2517	Callee	dsq -> game -> cookingScript -> call
>2518	PtrMemberAccess	dsq -> game -> cookingScript -> call
>2519	Identifier	call
>2520	PtrMemberAccess	dsq -> game -> cookingScript
>2521	Identifier	cookingScript
>2522	PtrMemberAccess	dsq -> game
>2523	Identifier	game
>2524	Identifier	dsq
>2525	IdentifierDeclStatement	 
>2526	IdentifierDecl	ret = \"\"
>2527	AssignmentExpr	ret = \"\"
>2528	PrimaryExpression	\"\"
>2529	Identifier	ret
>2530	Identifier	ret
>2531	IdentifierDeclType	std 
>2532	Condition	 
>2533	PtrMemberAccess	dsq -> game -> cookingScript
>2534	Identifier	cookingScript
>2535	PtrMemberAccess	dsq -> game
>2536	Identifier	game
>2537	Identifier	dsq
>2538	Label	 
>2539	Identifier	IET_SCRIPT
>2540	BreakStatement	 
>2541	ReturnStatement	 
>2542	CallExpression	dsq -> continuity . stringBank . get ( 227 )
>2543	ArgumentList	227
>2544	Argument	227
>2545	PrimaryExpression	227
>2546	Callee	dsq -> continuity . stringBank . get
>2547	MemberAccess	dsq -> continuity . stringBank . get
>2548	Identifier	get
>2549	MemberAccess	dsq -> continuity . stringBank
>2550	Identifier	stringBank
>2551	PtrMemberAccess	dsq -> continuity
>2552	Identifier	continuity
>2553	Identifier	dsq
>2554	Label	 
>2555	Identifier	IET_LI
>2556	BreakStatement	 
>2557	ReturnStatement	 
>2558	CallExpression	os . str ( )
>2559	ArgumentList	 
>2560	Callee	os . str
>2561	MemberAccess	os . str
>2562	Identifier	str
>2563	Identifier	os
>2564	ExpressionStatement	 
>2565	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << lightTime << \" \" << dsq -> continuity \
>2566	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << lightTime << \" \" << dsq -> continuity \
>2567	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << lightTime << \" \" << dsq -> continuity . stringBank \
>2568	ShiftExpression	\" \" << lightTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2569	ShiftExpression	lightTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2570	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>2571	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>2572	ArgumentList	203
>2573	Argument	203
>2574	PrimaryExpression	203
>2575	Callee	dsq -> continuity . stringBank . get
>2576	MemberAccess	dsq -> continuity . stringBank . get
>2577	Identifier	get
>2578	MemberAccess	dsq -> continuity . stringBank
>2579	Identifier	stringBank
>2580	PtrMemberAccess	dsq -> continuity
>2581	Identifier	continuity
>2582	Identifier	dsq
>2583	PrimaryExpression	\" \"
>2584	Identifier	lightTime
>2585	PrimaryExpression	\" \"
>2586	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>2587	ArgumentList	205
>2588	Argument	205
>2589	PrimaryExpression	205
>2590	Callee	dsq -> continuity . stringBank . get
>2591	MemberAccess	dsq -> continuity . stringBank . get
>2592	Identifier	get
>2593	MemberAccess	dsq -> continuity . stringBank
>2594	Identifier	stringBank
>2595	PtrMemberAccess	dsq -> continuity
>2596	Identifier	continuity
>2597	Identifier	dsq
>2598	PrimaryExpression	\" \"
>2599	Identifier	os
>2600	ExpressionStatement	 
>2601	ShiftExpression	os << dsq -> continuity . stringBank . get ( 220 )
>2602	CallExpression	dsq -> continuity . stringBank . get ( 220 )
>2603	ArgumentList	220
>2604	Argument	220
>2605	PrimaryExpression	220
>2606	Callee	dsq -> continuity . stringBank . get
>2607	MemberAccess	dsq -> continuity . stringBank . get
>2608	Identifier	get
>2609	MemberAccess	dsq -> continuity . stringBank
>2610	Identifier	stringBank
>2611	PtrMemberAccess	dsq -> continuity
>2612	Identifier	continuity
>2613	Identifier	dsq
>2614	Identifier	os
>2615	Label	 
>2616	Identifier	IET_LIGHT
>2617	BreakStatement	 
>2618	ReturnStatement	 
>2619	CallExpression	os . str ( )
>2620	ArgumentList	 
>2621	Callee	os . str
>2622	MemberAccess	os . str
>2623	Identifier	str
>2624	Identifier	os
>2625	ExpressionStatement	 
>2626	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << petPowerTime << \" \" << dsq -> continuity \
>2627	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << petPowerTime << \" \" << dsq -> continuity \
>2628	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << petPowerTime << \" \" << dsq -> continuity . stringBank \
>2629	ShiftExpression	\" \" << petPowerTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2630	ShiftExpression	petPowerTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2631	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>2632	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>2633	ArgumentList	203
>2634	Argument	203
>2635	PrimaryExpression	203
>2636	Callee	dsq -> continuity . stringBank . get
>2637	MemberAccess	dsq -> continuity . stringBank . get
>2638	Identifier	get
>2639	MemberAccess	dsq -> continuity . stringBank
>2640	Identifier	stringBank
>2641	PtrMemberAccess	dsq -> continuity
>2642	Identifier	continuity
>2643	Identifier	dsq
>2644	PrimaryExpression	\" \"
>2645	Identifier	petPowerTime
>2646	PrimaryExpression	\" \"
>2647	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>2648	ArgumentList	205
>2649	Argument	205
>2650	PrimaryExpression	205
>2651	Callee	dsq -> continuity . stringBank . get
>2652	MemberAccess	dsq -> continuity . stringBank . get
>2653	Identifier	get
>2654	MemberAccess	dsq -> continuity . stringBank
>2655	Identifier	stringBank
>2656	PtrMemberAccess	dsq -> continuity
>2657	Identifier	continuity
>2658	Identifier	dsq
>2659	PrimaryExpression	\" \"
>2660	Identifier	os
>2661	ExpressionStatement	 
>2662	ShiftExpression	os << dsq -> continuity . stringBank . get ( 216 )
>2663	CallExpression	dsq -> continuity . stringBank . get ( 216 )
>2664	ArgumentList	216
>2665	Argument	216
>2666	PrimaryExpression	216
>2667	Callee	dsq -> continuity . stringBank . get
>2668	MemberAccess	dsq -> continuity . stringBank . get
>2669	Identifier	get
>2670	MemberAccess	dsq -> continuity . stringBank
>2671	Identifier	stringBank
>2672	PtrMemberAccess	dsq -> continuity
>2673	Identifier	continuity
>2674	Identifier	dsq
>2675	Identifier	os
>2676	Label	 
>2677	Identifier	IET_PETPOWER
>2678	BreakStatement	 
>2679	ReturnStatement	 
>2680	CallExpression	dsq -> continuity . stringBank . get ( 218 )
>2681	ArgumentList	218
>2682	Argument	218
>2683	PrimaryExpression	218
>2684	Callee	dsq -> continuity . stringBank . get
>2685	MemberAccess	dsq -> continuity . stringBank . get
>2686	Identifier	get
>2687	MemberAccess	dsq -> continuity . stringBank
>2688	Identifier	stringBank
>2689	PtrMemberAccess	dsq -> continuity
>2690	Identifier	continuity
>2691	Identifier	dsq
>2692	Label	 
>2693	Identifier	IET_ALLSTATUS
>2694	BreakStatement	 
>2695	ReturnStatement	 
>2696	CallExpression	os . str ( )
>2697	ArgumentList	 
>2698	Callee	os . str
>2699	MemberAccess	os . str
>2700	Identifier	str
>2701	Identifier	os
>2702	ExpressionStatement	 
>2703	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << webTime << \" \" << dsq -> continuity \
>2704	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << webTime << \" \" << dsq -> continuity . \
>2705	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << webTime << \" \" << dsq -> continuity . stringBank \
>2706	ShiftExpression	\" \" << webTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2707	ShiftExpression	webTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2708	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>2709	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>2710	ArgumentList	203
>2711	Argument	203
>2712	PrimaryExpression	203
>2713	Callee	dsq -> continuity . stringBank . get
>2714	MemberAccess	dsq -> continuity . stringBank . get
>2715	Identifier	get
>2716	MemberAccess	dsq -> continuity . stringBank
>2717	Identifier	stringBank
>2718	PtrMemberAccess	dsq -> continuity
>2719	Identifier	continuity
>2720	Identifier	dsq
>2721	PrimaryExpression	\" \"
>2722	Identifier	webTime
>2723	PrimaryExpression	\" \"
>2724	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>2725	ArgumentList	205
>2726	Argument	205
>2727	PrimaryExpression	205
>2728	Callee	dsq -> continuity . stringBank . get
>2729	MemberAccess	dsq -> continuity . stringBank . get
>2730	Identifier	get
>2731	MemberAccess	dsq -> continuity . stringBank
>2732	Identifier	stringBank
>2733	PtrMemberAccess	dsq -> continuity
>2734	Identifier	continuity
>2735	Identifier	dsq
>2736	PrimaryExpression	\" \"
>2737	Identifier	os
>2738	ExpressionStatement	 
>2739	ShiftExpression	os << dsq -> continuity . stringBank . get ( 219 )
>2740	CallExpression	dsq -> continuity . stringBank . get ( 219 )
>2741	ArgumentList	219
>2742	Argument	219
>2743	PrimaryExpression	219
>2744	Callee	dsq -> continuity . stringBank . get
>2745	MemberAccess	dsq -> continuity . stringBank . get
>2746	Identifier	get
>2747	MemberAccess	dsq -> continuity . stringBank
>2748	Identifier	stringBank
>2749	PtrMemberAccess	dsq -> continuity
>2750	Identifier	continuity
>2751	Identifier	dsq
>2752	Identifier	os
>2753	Label	 
>2754	Identifier	IET_WEB
>2755	BreakStatement	 
>2756	ReturnStatement	 
>2757	CallExpression	dsq -> continuity . stringBank . get ( 215 )
>2758	ArgumentList	215
>2759	Argument	215
>2760	PrimaryExpression	215
>2761	Callee	dsq -> continuity . stringBank . get
>2762	MemberAccess	dsq -> continuity . stringBank . get
>2763	Identifier	get
>2764	MemberAccess	dsq -> continuity . stringBank
>2765	Identifier	stringBank
>2766	PtrMemberAccess	dsq -> continuity
>2767	Identifier	continuity
>2768	Identifier	dsq
>2769	Label	 
>2770	Identifier	IET_YUM
>2771	BreakStatement	 
>2772	IfStatement	if ( fx . magnitude < 0 )
>2773	ElseStatement	else
>2774	ReturnStatement	 
>2775	CallExpression	dsq -> continuity . stringBank . get ( 214 )
>2776	ArgumentList	214
>2777	Argument	214
>2778	PrimaryExpression	214
>2779	Callee	dsq -> continuity . stringBank . get
>2780	MemberAccess	dsq -> continuity . stringBank . get
>2781	Identifier	get
>2782	MemberAccess	dsq -> continuity . stringBank
>2783	Identifier	stringBank
>2784	PtrMemberAccess	dsq -> continuity
>2785	Identifier	continuity
>2786	Identifier	dsq
>2787	ReturnStatement	 
>2788	CallExpression	dsq -> continuity . stringBank . get ( 213 )
>2789	ArgumentList	213
>2790	Argument	213
>2791	PrimaryExpression	213
>2792	Callee	dsq -> continuity . stringBank . get
>2793	MemberAccess	dsq -> continuity . stringBank . get
>2794	Identifier	get
>2795	MemberAccess	dsq -> continuity . stringBank
>2796	Identifier	stringBank
>2797	PtrMemberAccess	dsq -> continuity
>2798	Identifier	continuity
>2799	Identifier	dsq
>2800	Condition	 
>2801	RelationalExpression	fx . magnitude < 0
>2802	PrimaryExpression	0
>2803	MemberAccess	fx . magnitude
>2804	Identifier	magnitude
>2805	Identifier	fx
>2806	Label	 
>2807	Identifier	IET_POISON
>2808	BreakStatement	 
>2809	ReturnStatement	 
>2810	CallExpression	dsq -> continuity . stringBank . get ( 212 )
>2811	ArgumentList	212
>2812	Argument	212
>2813	PrimaryExpression	212
>2814	Callee	dsq -> continuity . stringBank . get
>2815	MemberAccess	dsq -> continuity . stringBank . get
>2816	Identifier	get
>2817	MemberAccess	dsq -> continuity . stringBank
>2818	Identifier	stringBank
>2819	PtrMemberAccess	dsq -> continuity
>2820	Identifier	continuity
>2821	Identifier	dsq
>2822	Label	 
>2823	Identifier	IET_BLIND
>2824	BreakStatement	 
>2825	ReturnStatement	 
>2826	CallExpression	os . str ( )
>2827	ArgumentList	 
>2828	Callee	os . str
>2829	MemberAccess	os . str
>2830	Identifier	str
>2831	Identifier	os
>2832	ExpressionStatement	 
>2833	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << energyTime << \" \" << dsq -> continuity \
>2834	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << energyTime << \" \" << dsq -> continuity \
>2835	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << energyTime << \" \" << dsq -> continuity . stringBank \
>2836	ShiftExpression	\" \" << energyTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2837	ShiftExpression	energyTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2838	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>2839	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>2840	ArgumentList	203
>2841	Argument	203
>2842	PrimaryExpression	203
>2843	Callee	dsq -> continuity . stringBank . get
>2844	MemberAccess	dsq -> continuity . stringBank . get
>2845	Identifier	get
>2846	MemberAccess	dsq -> continuity . stringBank
>2847	Identifier	stringBank
>2848	PtrMemberAccess	dsq -> continuity
>2849	Identifier	continuity
>2850	Identifier	dsq
>2851	PrimaryExpression	\" \"
>2852	Identifier	energyTime
>2853	PrimaryExpression	\" \"
>2854	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>2855	ArgumentList	205
>2856	Argument	205
>2857	PrimaryExpression	205
>2858	Callee	dsq -> continuity . stringBank . get
>2859	MemberAccess	dsq -> continuity . stringBank . get
>2860	Identifier	get
>2861	MemberAccess	dsq -> continuity . stringBank
>2862	Identifier	stringBank
>2863	PtrMemberAccess	dsq -> continuity
>2864	Identifier	continuity
>2865	Identifier	dsq
>2866	PrimaryExpression	\" \"
>2867	Identifier	os
>2868	ExpressionStatement	 
>2869	ShiftExpression	os << dsq -> continuity . stringBank . get ( 211 ) << \" \" << fx . magnitude
>2870	ShiftExpression	dsq -> continuity . stringBank . get ( 211 ) << \" \" << fx . magnitude
>2871	ShiftExpression	\" \" << fx . magnitude
>2872	MemberAccess	fx . magnitude
>2873	Identifier	magnitude
>2874	Identifier	fx
>2875	PrimaryExpression	\" \"
>2876	CallExpression	dsq -> continuity . stringBank . get ( 211 )
>2877	ArgumentList	211
>2878	Argument	211
>2879	PrimaryExpression	211
>2880	Callee	dsq -> continuity . stringBank . get
>2881	MemberAccess	dsq -> continuity . stringBank . get
>2882	Identifier	get
>2883	MemberAccess	dsq -> continuity . stringBank
>2884	Identifier	stringBank
>2885	PtrMemberAccess	dsq -> continuity
>2886	Identifier	continuity
>2887	Identifier	dsq
>2888	Identifier	os
>2889	Label	 
>2890	Identifier	IET_ENERGY
>2891	BreakStatement	 
>2892	ReturnStatement	 
>2893	CallExpression	os . str ( )
>2894	ArgumentList	 
>2895	Callee	os . str
>2896	MemberAccess	os . str
>2897	Identifier	str
>2898	Identifier	os
>2899	ExpressionStatement	 
>2900	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << ( fx . magnitude * 5 ) << \" \" << \
>2901	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << ( fx . magnitude * 5 ) << \" \" << dsq -> \
>2902	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << ( fx . magnitude * 5 ) << \" \" << dsq -> continuity \
>2903	ShiftExpression	\" \" << ( fx . magnitude * 5 ) << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2904	ShiftExpression	( fx . magnitude * 5 ) << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2905	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>2906	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>2907	ArgumentList	203
>2908	Argument	203
>2909	PrimaryExpression	203
>2910	Callee	dsq -> continuity . stringBank . get
>2911	MemberAccess	dsq -> continuity . stringBank . get
>2912	Identifier	get
>2913	MemberAccess	dsq -> continuity . stringBank
>2914	Identifier	stringBank
>2915	PtrMemberAccess	dsq -> continuity
>2916	Identifier	continuity
>2917	Identifier	dsq
>2918	PrimaryExpression	\" \"
>2919	MultiplicativeExpression	fx . magnitude * 5
>2920	PrimaryExpression	5
>2921	MemberAccess	fx . magnitude
>2922	Identifier	magnitude
>2923	Identifier	fx
>2924	PrimaryExpression	\" \"
>2925	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>2926	ArgumentList	205
>2927	Argument	205
>2928	PrimaryExpression	205
>2929	Callee	dsq -> continuity . stringBank . get
>2930	MemberAccess	dsq -> continuity . stringBank . get
>2931	Identifier	get
>2932	MemberAccess	dsq -> continuity . stringBank
>2933	Identifier	stringBank
>2934	PtrMemberAccess	dsq -> continuity
>2935	Identifier	continuity
>2936	Identifier	dsq
>2937	PrimaryExpression	\" \"
>2938	Identifier	os
>2939	ExpressionStatement	 
>2940	ShiftExpression	os << dsq -> continuity . stringBank . get ( 210 )
>2941	CallExpression	dsq -> continuity . stringBank . get ( 210 )
>2942	ArgumentList	210
>2943	Argument	210
>2944	PrimaryExpression	210
>2945	Callee	dsq -> continuity . stringBank . get
>2946	MemberAccess	dsq -> continuity . stringBank . get
>2947	Identifier	get
>2948	MemberAccess	dsq -> continuity . stringBank
>2949	Identifier	stringBank
>2950	PtrMemberAccess	dsq -> continuity
>2951	Identifier	continuity
>2952	Identifier	dsq
>2953	Identifier	os
>2954	Label	 
>2955	Identifier	IET_INVINCIBLE
>2956	BreakStatement	 
>2957	ReturnStatement	 
>2958	CallExpression	os . str ( )
>2959	ArgumentList	 
>2960	Callee	os . str
>2961	MemberAccess	os . str
>2962	Identifier	str
>2963	Identifier	os
>2964	ExpressionStatement	 
>2965	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << fishPoisonTime << \" \" << dsq -> \
>2966	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << fishPoisonTime << \" \" << dsq -> continuity \
>2967	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << fishPoisonTime << \" \" << dsq -> continuity . \
>2968	ShiftExpression	\" \" << fishPoisonTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2969	ShiftExpression	fishPoisonTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>2970	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>2971	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>2972	ArgumentList	203
>2973	Argument	203
>2974	PrimaryExpression	203
>2975	Callee	dsq -> continuity . stringBank . get
>2976	MemberAccess	dsq -> continuity . stringBank . get
>2977	Identifier	get
>2978	MemberAccess	dsq -> continuity . stringBank
>2979	Identifier	stringBank
>2980	PtrMemberAccess	dsq -> continuity
>2981	Identifier	continuity
>2982	Identifier	dsq
>2983	PrimaryExpression	\" \"
>2984	Identifier	fishPoisonTime
>2985	PrimaryExpression	\" \"
>2986	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>2987	ArgumentList	205
>2988	Argument	205
>2989	PrimaryExpression	205
>2990	Callee	dsq -> continuity . stringBank . get
>2991	MemberAccess	dsq -> continuity . stringBank . get
>2992	Identifier	get
>2993	MemberAccess	dsq -> continuity . stringBank
>2994	Identifier	stringBank
>2995	PtrMemberAccess	dsq -> continuity
>2996	Identifier	continuity
>2997	Identifier	dsq
>2998	PrimaryExpression	\" \"
>2999	Identifier	os
>3000	ExpressionStatement	 
>3001	ShiftExpression	os << dsq -> continuity . stringBank . get ( 217 )
>3002	CallExpression	dsq -> continuity . stringBank . get ( 217 )
>3003	ArgumentList	217
>3004	Argument	217
>3005	PrimaryExpression	217
>3006	Callee	dsq -> continuity . stringBank . get
>3007	MemberAccess	dsq -> continuity . stringBank . get
>3008	Identifier	get
>3009	MemberAccess	dsq -> continuity . stringBank
>3010	Identifier	stringBank
>3011	PtrMemberAccess	dsq -> continuity
>3012	Identifier	continuity
>3013	Identifier	dsq
>3014	Identifier	os
>3015	Label	 
>3016	Identifier	IET_FISHPOISON
>3017	BreakStatement	 
>3018	ReturnStatement	 
>3019	CallExpression	os . str ( )
>3020	ArgumentList	 
>3021	Callee	os . str
>3022	MemberAccess	os . str
>3023	Identifier	str
>3024	Identifier	os
>3025	ExpressionStatement	 
>3026	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << biteTime << \" \" << dsq -> continuity \
>3027	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << biteTime << \" \" << dsq -> continuity . \
>3028	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << biteTime << \" \" << dsq -> continuity . stringBank \
>3029	ShiftExpression	\" \" << biteTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>3030	ShiftExpression	biteTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>3031	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>3032	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>3033	ArgumentList	203
>3034	Argument	203
>3035	PrimaryExpression	203
>3036	Callee	dsq -> continuity . stringBank . get
>3037	MemberAccess	dsq -> continuity . stringBank . get
>3038	Identifier	get
>3039	MemberAccess	dsq -> continuity . stringBank
>3040	Identifier	stringBank
>3041	PtrMemberAccess	dsq -> continuity
>3042	Identifier	continuity
>3043	Identifier	dsq
>3044	PrimaryExpression	\" \"
>3045	Identifier	biteTime
>3046	PrimaryExpression	\" \"
>3047	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>3048	ArgumentList	205
>3049	Argument	205
>3050	PrimaryExpression	205
>3051	Callee	dsq -> continuity . stringBank . get
>3052	MemberAccess	dsq -> continuity . stringBank . get
>3053	Identifier	get
>3054	MemberAccess	dsq -> continuity . stringBank
>3055	Identifier	stringBank
>3056	PtrMemberAccess	dsq -> continuity
>3057	Identifier	continuity
>3058	Identifier	dsq
>3059	PrimaryExpression	\" \"
>3060	Identifier	os
>3061	ExpressionStatement	 
>3062	ShiftExpression	os << dsq -> continuity . stringBank . get ( 209 )
>3063	CallExpression	dsq -> continuity . stringBank . get ( 209 )
>3064	ArgumentList	209
>3065	Argument	209
>3066	PrimaryExpression	209
>3067	Callee	dsq -> continuity . stringBank . get
>3068	MemberAccess	dsq -> continuity . stringBank . get
>3069	Identifier	get
>3070	MemberAccess	dsq -> continuity . stringBank
>3071	Identifier	stringBank
>3072	PtrMemberAccess	dsq -> continuity
>3073	Identifier	continuity
>3074	Identifier	dsq
>3075	Identifier	os
>3076	Label	 
>3077	Identifier	IET_BITE
>3078	BreakStatement	 
>3079	ReturnStatement	 
>3080	CallExpression	dsq -> continuity . stringBank . get ( 208 )
>3081	ArgumentList	208
>3082	Argument	208
>3083	PrimaryExpression	208
>3084	Callee	dsq -> continuity . stringBank . get
>3085	MemberAccess	dsq -> continuity . stringBank . get
>3086	Identifier	get
>3087	MemberAccess	dsq -> continuity . stringBank
>3088	Identifier	stringBank
>3089	PtrMemberAccess	dsq -> continuity
>3090	Identifier	continuity
>3091	Identifier	dsq
>3092	Label	 
>3093	Identifier	IET_EAT
>3094	BreakStatement	 
>3095	ReturnStatement	 
>3096	CallExpression	dsq -> continuity . stringBank . get ( 207 )
>3097	ArgumentList	207
>3098	Argument	207
>3099	PrimaryExpression	207
>3100	Callee	dsq -> continuity . stringBank . get
>3101	MemberAccess	dsq -> continuity . stringBank . get
>3102	Identifier	get
>3103	MemberAccess	dsq -> continuity . stringBank
>3104	Identifier	stringBank
>3105	PtrMemberAccess	dsq -> continuity
>3106	Identifier	continuity
>3107	Identifier	dsq
>3108	Label	 
>3109	Identifier	IET_TRIP
>3110	BreakStatement	 
>3111	ReturnStatement	 
>3112	CallExpression	os . str ( )
>3113	ArgumentList	 
>3114	Callee	os . str
>3115	MemberAccess	os . str
>3116	Identifier	str
>3117	Identifier	os
>3118	ExpressionStatement	 
>3119	ShiftExpression	os << dsq -> continuity . stringBank . get ( 206 ) << \" \" << fx . magnitude
>3120	ShiftExpression	dsq -> continuity . stringBank . get ( 206 ) << \" \" << fx . magnitude
>3121	ShiftExpression	\" \" << fx . magnitude
>3122	MemberAccess	fx . magnitude
>3123	Identifier	magnitude
>3124	Identifier	fx
>3125	PrimaryExpression	\" \"
>3126	CallExpression	dsq -> continuity . stringBank . get ( 206 )
>3127	ArgumentList	206
>3128	Argument	206
>3129	PrimaryExpression	206
>3130	Callee	dsq -> continuity . stringBank . get
>3131	MemberAccess	dsq -> continuity . stringBank . get
>3132	Identifier	get
>3133	MemberAccess	dsq -> continuity . stringBank
>3134	Identifier	stringBank
>3135	PtrMemberAccess	dsq -> continuity
>3136	Identifier	continuity
>3137	Identifier	dsq
>3138	Identifier	os
>3139	Label	 
>3140	Identifier	IET_REGEN
>3141	BreakStatement	 
>3142	ReturnStatement	 
>3143	CallExpression	os . str ( )
>3144	ArgumentList	 
>3145	Callee	os . str
>3146	MemberAccess	os . str
>3147	Identifier	str
>3148	Identifier	os
>3149	ExpressionStatement	 
>3150	ShiftExpression	os << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << speedTime << \" \" << dsq -> continuity \
>3151	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << speedTime << \" \" << dsq -> continuity \
>3152	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << speedTime << \" \" << dsq -> continuity . stringBank \
>3153	ShiftExpression	\" \" << speedTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>3154	ShiftExpression	speedTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>3155	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>3156	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>3157	ArgumentList	203
>3158	Argument	203
>3159	PrimaryExpression	203
>3160	Callee	dsq -> continuity . stringBank . get
>3161	MemberAccess	dsq -> continuity . stringBank . get
>3162	Identifier	get
>3163	MemberAccess	dsq -> continuity . stringBank
>3164	Identifier	stringBank
>3165	PtrMemberAccess	dsq -> continuity
>3166	Identifier	continuity
>3167	Identifier	dsq
>3168	PrimaryExpression	\" \"
>3169	Identifier	speedTime
>3170	PrimaryExpression	\" \"
>3171	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>3172	ArgumentList	205
>3173	Argument	205
>3174	PrimaryExpression	205
>3175	Callee	dsq -> continuity . stringBank . get
>3176	MemberAccess	dsq -> continuity . stringBank . get
>3177	Identifier	get
>3178	MemberAccess	dsq -> continuity . stringBank
>3179	Identifier	stringBank
>3180	PtrMemberAccess	dsq -> continuity
>3181	Identifier	continuity
>3182	Identifier	dsq
>3183	PrimaryExpression	\" \"
>3184	Identifier	os
>3185	ExpressionStatement	 
>3186	ShiftExpression	os << dsq -> continuity . stringBank . get ( 204 ) << \" \" << fx . magnitude
>3187	ShiftExpression	dsq -> continuity . stringBank . get ( 204 ) << \" \" << fx . magnitude
>3188	ShiftExpression	\" \" << fx . magnitude
>3189	MemberAccess	fx . magnitude
>3190	Identifier	magnitude
>3191	Identifier	fx
>3192	PrimaryExpression	\" \"
>3193	CallExpression	dsq -> continuity . stringBank . get ( 204 )
>3194	ArgumentList	204
>3195	Argument	204
>3196	PrimaryExpression	204
>3197	Callee	dsq -> continuity . stringBank . get
>3198	MemberAccess	dsq -> continuity . stringBank . get
>3199	Identifier	get
>3200	MemberAccess	dsq -> continuity . stringBank
>3201	Identifier	stringBank
>3202	PtrMemberAccess	dsq -> continuity
>3203	Identifier	continuity
>3204	Identifier	dsq
>3205	Identifier	os
>3206	Label	 
>3207	Identifier	IET_SPEED
>3208	BreakStatement	 
>3209	ReturnStatement	 
>3210	CallExpression	os . str ( )
>3211	ArgumentList	 
>3212	Callee	os . str
>3213	MemberAccess	os . str
>3214	Identifier	str
>3215	Identifier	os
>3216	ExpressionStatement	 
>3217	ShiftExpression	os << \" \" << fx . magnitude << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << defenseTime << \" \" << \
>3218	ShiftExpression	\" \" << fx . magnitude << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << defenseTime << \" \" << \
>3219	ShiftExpression	fx . magnitude << \" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << defenseTime << \" \" << \
>3220	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 205 ) << \" \" << defenseTime << \" \" << dsq -> continuity \
>3221	ShiftExpression	dsq -> continuity . stringBank . get ( 205 ) << \" \" << defenseTime << \" \" << dsq -> continuity . stringBank \
>3222	ShiftExpression	\" \" << defenseTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>3223	ShiftExpression	defenseTime << \" \" << dsq -> continuity . stringBank . get ( 203 )
>3224	ShiftExpression	\" \" << dsq -> continuity . stringBank . get ( 203 )
>3225	CallExpression	dsq -> continuity . stringBank . get ( 203 )
>3226	ArgumentList	203
>3227	Argument	203
>3228	PrimaryExpression	203
>3229	Callee	dsq -> continuity . stringBank . get
>3230	MemberAccess	dsq -> continuity . stringBank . get
>3231	Identifier	get
>3232	MemberAccess	dsq -> continuity . stringBank
>3233	Identifier	stringBank
>3234	PtrMemberAccess	dsq -> continuity
>3235	Identifier	continuity
>3236	Identifier	dsq
>3237	PrimaryExpression	\" \"
>3238	Identifier	defenseTime
>3239	PrimaryExpression	\" \"
>3240	CallExpression	dsq -> continuity . stringBank . get ( 205 )
>3241	ArgumentList	205
>3242	Argument	205
>3243	PrimaryExpression	205
>3244	Callee	dsq -> continuity . stringBank . get
>3245	MemberAccess	dsq -> continuity . stringBank . get
>3246	Identifier	get
>3247	MemberAccess	dsq -> continuity . stringBank
>3248	Identifier	stringBank
>3249	PtrMemberAccess	dsq -> continuity
>3250	Identifier	continuity
>3251	Identifier	dsq
>3252	PrimaryExpression	\" \"
>3253	MemberAccess	fx . magnitude
>3254	Identifier	magnitude
>3255	Identifier	fx
>3256	PrimaryExpression	\" \"
>3257	Identifier	os
>3258	ExpressionStatement	 
>3259	ShiftExpression	os << dsq -> continuity . stringBank . get ( 202 )
>3260	CallExpression	dsq -> continuity . stringBank . get ( 202 )
>3261	ArgumentList	202
>3262	Argument	202
>3263	PrimaryExpression	202
>3264	Callee	dsq -> continuity . stringBank . get
>3265	MemberAccess	dsq -> continuity . stringBank . get
>3266	Identifier	get
>3267	MemberAccess	dsq -> continuity . stringBank
>3268	Identifier	stringBank
>3269	PtrMemberAccess	dsq -> continuity
>3270	Identifier	continuity
>3271	Identifier	dsq
>3272	Identifier	os
>3273	Label	 
>3274	Identifier	IET_DEFENSE
>3275	BreakStatement	 
>3276	ReturnStatement	 
>3277	CallExpression	dsq -> continuity . stringBank . get ( 201 )
>3278	ArgumentList	201
>3279	Argument	201
>3280	PrimaryExpression	201
>3281	Callee	dsq -> continuity . stringBank . get
>3282	MemberAccess	dsq -> continuity . stringBank . get
>3283	Identifier	get
>3284	MemberAccess	dsq -> continuity . stringBank
>3285	Identifier	stringBank
>3286	PtrMemberAccess	dsq -> continuity
>3287	Identifier	continuity
>3288	Identifier	dsq
>3289	Label	 
>3290	Identifier	IET_MAXHP
>3291	BreakStatement	 
>3292	IfStatement	if ( fx . magnitude > 0 )
>3293	ElseStatement	else
>3294	CompoundStatement	 
>3295	ReturnStatement	 
>3296	CallExpression	os . str ( )
>3297	ArgumentList	 
>3298	Callee	os . str
>3299	MemberAccess	os . str
>3300	Identifier	str
>3301	Identifier	os
>3302	ExpressionStatement	 
>3303	ShiftExpression	os << fabsf ( fx . magnitude )
>3304	CallExpression	fabsf ( fx . magnitude )
>3305	ArgumentList	fx . magnitude
>3306	Argument	fx . magnitude
>3307	MemberAccess	fx . magnitude
>3308	Identifier	magnitude
>3309	Identifier	fx
>3310	Callee	fabsf
>3311	Identifier	fabsf
>3312	Identifier	os
>3313	ExpressionStatement	 
>3314	ShiftExpression	os << dsq -> continuity . stringBank . get ( 101 ) << \" \"
>3315	ShiftExpression	dsq -> continuity . stringBank . get ( 101 ) << \" \"
>3316	PrimaryExpression	\" \"
>3317	CallExpression	dsq -> continuity . stringBank . get ( 101 )
>3318	ArgumentList	101
>3319	Argument	101
>3320	PrimaryExpression	101
>3321	Callee	dsq -> continuity . stringBank . get
>3322	MemberAccess	dsq -> continuity . stringBank . get
>3323	Identifier	get
>3324	MemberAccess	dsq -> continuity . stringBank
>3325	Identifier	stringBank
>3326	PtrMemberAccess	dsq -> continuity
>3327	Identifier	continuity
>3328	Identifier	dsq
>3329	Identifier	os
>3330	ExpressionStatement	 
>3331	ShiftExpression	os << dsq -> continuity . stringBank . get ( 200 ) << \" \"
>3332	ShiftExpression	dsq -> continuity . stringBank . get ( 200 ) << \" \"
>3333	PrimaryExpression	\" \"
>3334	CallExpression	dsq -> continuity . stringBank . get ( 200 )
>3335	ArgumentList	200
>3336	Argument	200
>3337	PrimaryExpression	200
>3338	Callee	dsq -> continuity . stringBank . get
>3339	MemberAccess	dsq -> continuity . stringBank . get
>3340	Identifier	get
>3341	MemberAccess	dsq -> continuity . stringBank
>3342	Identifier	stringBank
>3343	PtrMemberAccess	dsq -> continuity
>3344	Identifier	continuity
>3345	Identifier	dsq
>3346	Identifier	os
>3347	IdentifierDeclStatement	 
>3348	IdentifierDecl	os
>3349	Identifier	os
>3350	IdentifierDeclType	std 
>3351	CompoundStatement	 
>3352	ReturnStatement	 
>3353	CallExpression	os . str ( )
>3354	ArgumentList	 
>3355	Callee	os . str
>3356	MemberAccess	os . str
>3357	Identifier	str
>3358	Identifier	os
>3359	ExpressionStatement	 
>3360	ShiftExpression	os << fx . magnitude
>3361	MemberAccess	fx . magnitude
>3362	Identifier	magnitude
>3363	Identifier	fx
>3364	Identifier	os
>3365	ExpressionStatement	 
>3366	ShiftExpression	os << dsq -> continuity . stringBank . get ( 100 ) << \" \"
>3367	ShiftExpression	dsq -> continuity . stringBank . get ( 100 ) << \" \"
>3368	PrimaryExpression	\" \"
>3369	CallExpression	dsq -> continuity . stringBank . get ( 100 )
>3370	ArgumentList	100
>3371	Argument	100
>3372	PrimaryExpression	100
>3373	Callee	dsq -> continuity . stringBank . get
>3374	MemberAccess	dsq -> continuity . stringBank . get
>3375	Identifier	get
>3376	MemberAccess	dsq -> continuity . stringBank
>3377	Identifier	stringBank
>3378	PtrMemberAccess	dsq -> continuity
>3379	Identifier	continuity
>3380	Identifier	dsq
>3381	Identifier	os
>3382	ExpressionStatement	 
>3383	ShiftExpression	os << dsq -> continuity . stringBank . get ( 200 ) << \" \"
>3384	ShiftExpression	dsq -> continuity . stringBank . get ( 200 ) << \" \"
>3385	PrimaryExpression	\" \"
>3386	CallExpression	dsq -> continuity . stringBank . get ( 200 )
>3387	ArgumentList	200
>3388	Argument	200
>3389	PrimaryExpression	200
>3390	Callee	dsq -> continuity . stringBank . get
>3391	MemberAccess	dsq -> continuity . stringBank . get
>3392	Identifier	get
>3393	MemberAccess	dsq -> continuity . stringBank
>3394	Identifier	stringBank
>3395	PtrMemberAccess	dsq -> continuity
>3396	Identifier	continuity
>3397	Identifier	dsq
>3398	Identifier	os
>3399	IdentifierDeclStatement	 
>3400	IdentifierDecl	os
>3401	Identifier	os
>3402	IdentifierDeclType	std 
>3403	Condition	 
>3404	RelationalExpression	fx . magnitude > 0
>3405	PrimaryExpression	0
>3406	MemberAccess	fx . magnitude
>3407	Identifier	magnitude
>3408	Identifier	fx
>3409	Label	 
>3410	Identifier	IET_HP
>3411	Condition	 
>3412	Identifier	useType
>3413	IdentifierDeclStatement	 
>3414	IdentifierDecl	os
>3415	Identifier	os
>3416	IdentifierDeclType	std 
>3417	IdentifierDeclStatement	 
>3418	IdentifierDecl	useType = fx . type
>3419	AssignmentExpr	useType = fx . type
>3420	MemberAccess	fx . type
>3421	Identifier	type
>3422	Identifier	fx
>3423	Identifier	useType
>3424	Identifier	useType
>3425	IdentifierDeclType	IngredientEffectType
>3426	IdentifierDeclStatement	 
>3427	IdentifierDecl	fx = data -> effects [ i ]
>3428	AssignmentExpr	fx = data -> effects [ i ]
>3429	ArrayIndexing	data -> effects [ i ]
>3430	Identifier	i
>3431	PtrMemberAccess	data -> effects
>3432	Identifier	effects
>3433	Identifier	data
>3434	Identifier	fx
>3435	Identifier	fx
>3436	IdentifierDeclType	IngredientEffect
>3437	IfStatement	if ( i < 0 || i >= data -> effects . size ( ) )
>3438	ReturnStatement	 
>3439	PrimaryExpression	\"\"
>3440	Condition	 
>3441	OrExpression	i < 0 || i >= data -> effects . size ( )
>3442	RelationalExpression	i >= data -> effects . size ( )
>3443	CallExpression	data -> effects . size ( )
>3444	ArgumentList	 
>3445	Callee	data -> effects . size
>3446	MemberAccess	data -> effects . size
>3447	Identifier	size
>3448	PtrMemberAccess	data -> effects
>3449	Identifier	effects
>3450	Identifier	data
>3451	Identifier	i
>3452	RelationalExpression	i < 0
>3453	PrimaryExpression	0
>3454	Identifier	i
>3485	FunctionDef	Continuity 
>3486	ParameterList	IngredientData * data
>3487	Parameter	 
>3488	Identifier	data
>3489	ParameterType	IngredientData *
>3490	ReturnType	std 
>3491	CompoundStatement	 
>3492	ReturnStatement	 
>3493	CallExpression	os . str ( )
>3494	ArgumentList	 
>3495	Callee	os . str
>3496	MemberAccess	os . str
>3497	Identifier	str
>3498	Identifier	os
>3499	ForStatement	for ( int i = 0 ; i < data -> effects . size ( ) ; i ++ )
>3500	CompoundStatement	 
>3501	ExpressionStatement	 
>3502	ShiftExpression	os << getIEString ( data , i ) << \"\n\"
>3503	ShiftExpression	getIEString ( data , i ) << \"\n\"
>3504	PrimaryExpression	\"\n\"
>3505	CallExpression	getIEString ( data , i )
>3506	ArgumentList	data
>3507	Argument	i
>3508	Identifier	i
>3509	Argument	data
>3510	Identifier	data
>3511	Callee	getIEString
>3512	Identifier	getIEString
>3513	Identifier	os
>3514	IncDecOp	 
>3515	IncDec	++
>3516	Identifier	i
>3517	Condition	 
>3518	RelationalExpression	i < data -> effects . size ( )
>3519	CallExpression	data -> effects . size ( )
>3520	ArgumentList	 
>3521	Callee	data -> effects . size
>3522	MemberAccess	data -> effects . size
>3523	Identifier	size
>3524	PtrMemberAccess	data -> effects
>3525	Identifier	effects
>3526	Identifier	data
>3527	Identifier	i
>3528	ForInit	 
>3529	IdentifierDeclStatement	int i = 0 ;
>3530	IdentifierDecl	i = 0
>3531	AssignmentExpr	i = 0
>3532	PrimaryExpression	0
>3533	Identifier	i
>3534	Identifier	i
>3535	IdentifierDeclType	int
>3536	IdentifierDeclStatement	 
>3537	IdentifierDecl	os
>3538	Identifier	os
>3539	IdentifierDeclType	std 
>3550	FunctionDef	Continuity 
>3551	ParameterList	IngredientData * data
>3552	Parameter	 
>3553	Identifier	data
>3554	ParameterType	IngredientData *
>3555	ReturnType	bool
>3556	CompoundStatement	 
>3557	ReturnStatement	 
>3558	Identifier	eaten
>3559	ForStatement	for ( int i = 0 ; i < data -> effects . size ( ) ; i ++ )
>3560	CompoundStatement	 
>3561	SwitchStatement	switch ( useType )
>3562	CompoundStatement	 
>3563	BreakStatement	 
>3564	CompoundStatement	 
>3565	ExpressionStatement	 
>3566	AssignmentExpr	eaten = false
>3567	Identifier	false
>3568	Identifier	eaten
>3569	ExpressionStatement	 
>3570	CallExpression	errorLog ( str )
>3571	ArgumentList	str
>3572	Argument	str
>3573	Identifier	str
>3574	Callee	errorLog
>3575	Identifier	errorLog
>3576	ExpressionStatement	 
>3577	CallExpression	sprintf ( ( char * ) & str , \"ingredient effect not defined, index[%d]\" , int ( useType ) )
>3578	ArgumentList	( char * ) & str
>3579	Argument	int ( useType )
>3580	CallExpression	int ( useType )
>3581	ArgumentList	useType
>3582	Argument	useType
>3583	Identifier	useType
>3584	Callee	int
>3585	Identifier	int
>3586	Argument	\"ingredient effect not defined, index[%d]\"
>3587	PrimaryExpression	\"ingredient effect not defined, index[%d]\"
>3588	Argument	( char * ) & str
>3589	CastExpression	( char * ) & str
>3590	UnaryOp	& str
>3591	Identifier	str
>3592	UnaryOperator	&
>3593	CastTarget	char *
>3594	Callee	sprintf
>3595	Identifier	sprintf
>3596	IdentifierDeclStatement	 
>3597	IdentifierDecl	str [ 256 ]
>3598	PrimaryExpression	256
>3599	Identifier	str
>3600	IdentifierDeclType	char [ 256 ]
>3601	Label	 
>3602	Identifier	default
>3603	BreakStatement	 
>3604	CompoundStatement	 
>3605	IfStatement	if ( dsq -> game -> cookingScript )
>3606	ExpressionStatement	 
>3607	CallExpression	dsq -> game -> cookingScript -> call ( \"useIngredient\" , data -> name . c_str ( ) , & eaten )
>3608	ArgumentList	\"useIngredient\"
>3609	Argument	& eaten
>3610	UnaryOp	& eaten
>3611	Identifier	eaten
>3612	UnaryOperator	&
>3613	Argument	data -> name . c_str ( )
>3614	CallExpression	data -> name . c_str ( )
>3615	ArgumentList	 
>3616	Callee	data -> name . c_str
>3617	MemberAccess	data -> name . c_str
>3618	Identifier	c_str
>3619	PtrMemberAccess	data -> name
>3620	Identifier	name
>3621	Identifier	data
>3622	Argument	\"useIngredient\"
>3623	PrimaryExpression	\"useIngredient\"
>3624	Callee	dsq -> game -> cookingScript -> call
>3625	PtrMemberAccess	dsq -> game -> cookingScript -> call
>3626	Identifier	call
>3627	PtrMemberAccess	dsq -> game -> cookingScript
>3628	Identifier	cookingScript
>3629	PtrMemberAccess	dsq -> game
>3630	Identifier	game
>3631	Identifier	dsq
>3632	Condition	 
>3633	PtrMemberAccess	dsq -> game -> cookingScript
>3634	Identifier	cookingScript
>3635	PtrMemberAccess	dsq -> game
>3636	Identifier	game
>3637	Identifier	dsq
>3638	Label	 
>3639	Identifier	IET_SCRIPT
>3640	BreakStatement	 
>3641	CompoundStatement	 
>3642	Label	 
>3643	Identifier	IET_LI
>3644	BreakStatement	 
>3645	CompoundStatement	 
>3646	ExpressionStatement	 
>3647	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>3648	ArgumentList	getIEString ( data , i )
>3649	Argument	y
>3650	Identifier	y
>3651	Argument	getIEString ( data , i )
>3652	CallExpression	getIEString ( data , i )
>3653	ArgumentList	data
>3654	Argument	i
>3655	Identifier	i
>3656	Argument	data
>3657	Identifier	data
>3658	Callee	getIEString
>3659	Identifier	getIEString
>3660	Callee	dsq -> centerMessage
>3661	PtrMemberAccess	dsq -> centerMessage
>3662	Identifier	centerMessage
>3663	Identifier	dsq
>3664	ExpressionStatement	 
>3665	CallExpression	dsq -> continuity . setLight ( fx . magnitude , lightTime )
>3666	ArgumentList	fx . magnitude
>3667	Argument	lightTime
>3668	Identifier	lightTime
>3669	Argument	fx . magnitude
>3670	MemberAccess	fx . magnitude
>3671	Identifier	magnitude
>3672	Identifier	fx
>3673	Callee	dsq -> continuity . setLight
>3674	MemberAccess	dsq -> continuity . setLight
>3675	Identifier	setLight
>3676	PtrMemberAccess	dsq -> continuity
>3677	Identifier	continuity
>3678	Identifier	dsq
>3679	ExpressionStatement	 
>3680	CallExpression	dsq -> sound -> playSfx ( \"sunform\" )
>3681	ArgumentList	\"sunform\"
>3682	Argument	\"sunform\"
>3683	PrimaryExpression	\"sunform\"
>3684	Callee	dsq -> sound -> playSfx
>3685	PtrMemberAccess	dsq -> sound -> playSfx
>3686	Identifier	playSfx
>3687	PtrMemberAccess	dsq -> sound
>3688	Identifier	sound
>3689	Identifier	dsq
>3690	Label	 
>3691	Identifier	IET_LIGHT
>3692	BreakStatement	 
>3693	CompoundStatement	 
>3694	ExpressionStatement	 
>3695	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>3696	ArgumentList	getIEString ( data , i )
>3697	Argument	y
>3698	Identifier	y
>3699	Argument	getIEString ( data , i )
>3700	CallExpression	getIEString ( data , i )
>3701	ArgumentList	data
>3702	Argument	i
>3703	Identifier	i
>3704	Argument	data
>3705	Identifier	data
>3706	Callee	getIEString
>3707	Identifier	getIEString
>3708	Callee	dsq -> centerMessage
>3709	PtrMemberAccess	dsq -> centerMessage
>3710	Identifier	centerMessage
>3711	Identifier	dsq
>3712	ExpressionStatement	 
>3713	CallExpression	dsq -> continuity . setPetPower ( fx . magnitude , petPowerTime )
>3714	ArgumentList	fx . magnitude
>3715	Argument	petPowerTime
>3716	Identifier	petPowerTime
>3717	Argument	fx . magnitude
>3718	MemberAccess	fx . magnitude
>3719	Identifier	magnitude
>3720	Identifier	fx
>3721	Callee	dsq -> continuity . setPetPower
>3722	MemberAccess	dsq -> continuity . setPetPower
>3723	Identifier	setPetPower
>3724	PtrMemberAccess	dsq -> continuity
>3725	Identifier	continuity
>3726	Identifier	dsq
>3727	ExpressionStatement	 
>3728	CallExpression	dsq -> sound -> playSfx ( \"nautilus\" )
>3729	ArgumentList	\"nautilus\"
>3730	Argument	\"nautilus\"
>3731	PrimaryExpression	\"nautilus\"
>3732	Callee	dsq -> sound -> playSfx
>3733	PtrMemberAccess	dsq -> sound -> playSfx
>3734	Identifier	playSfx
>3735	PtrMemberAccess	dsq -> sound
>3736	Identifier	sound
>3737	Identifier	dsq
>3738	Label	 
>3739	Identifier	IET_PETPOWER
>3740	BreakStatement	 
>3741	CompoundStatement	 
>3742	ExpressionStatement	 
>3743	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>3744	ArgumentList	getIEString ( data , i )
>3745	Argument	y
>3746	Identifier	y
>3747	Argument	getIEString ( data , i )
>3748	CallExpression	getIEString ( data , i )
>3749	ArgumentList	data
>3750	Argument	i
>3751	Identifier	i
>3752	Argument	data
>3753	Identifier	data
>3754	Callee	getIEString
>3755	Identifier	getIEString
>3756	Callee	dsq -> centerMessage
>3757	PtrMemberAccess	dsq -> centerMessage
>3758	Identifier	centerMessage
>3759	Identifier	dsq
>3760	ExpressionStatement	 
>3761	CallExpression	dsq -> continuity . cureAllStatus ( )
>3762	ArgumentList	 
>3763	Callee	dsq -> continuity . cureAllStatus
>3764	MemberAccess	dsq -> continuity . cureAllStatus
>3765	Identifier	cureAllStatus
>3766	PtrMemberAccess	dsq -> continuity
>3767	Identifier	continuity
>3768	Identifier	dsq
>3769	ExpressionStatement	 
>3770	CallExpression	dsq -> sound -> playSfx ( \"regen\" )
>3771	ArgumentList	\"regen\"
>3772	Argument	\"regen\"
>3773	PrimaryExpression	\"regen\"
>3774	Callee	dsq -> sound -> playSfx
>3775	PtrMemberAccess	dsq -> sound -> playSfx
>3776	Identifier	playSfx
>3777	PtrMemberAccess	dsq -> sound
>3778	Identifier	sound
>3779	Identifier	dsq
>3780	Label	 
>3781	Identifier	IET_ALLSTATUS
>3782	BreakStatement	 
>3783	CompoundStatement	 
>3784	ExpressionStatement	 
>3785	CallExpression	dsq -> continuity . setWeb ( webTime )
>3786	ArgumentList	webTime
>3787	Argument	webTime
>3788	Identifier	webTime
>3789	Callee	dsq -> continuity . setWeb
>3790	MemberAccess	dsq -> continuity . setWeb
>3791	Identifier	setWeb
>3792	PtrMemberAccess	dsq -> continuity
>3793	Identifier	continuity
>3794	Identifier	dsq
>3795	ExpressionStatement	 
>3796	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>3797	ArgumentList	getIEString ( data , i )
>3798	Argument	y
>3799	Identifier	y
>3800	Argument	getIEString ( data , i )
>3801	CallExpression	getIEString ( data , i )
>3802	ArgumentList	data
>3803	Argument	i
>3804	Identifier	i
>3805	Argument	data
>3806	Identifier	data
>3807	Callee	getIEString
>3808	Identifier	getIEString
>3809	Callee	dsq -> centerMessage
>3810	PtrMemberAccess	dsq -> centerMessage
>3811	Identifier	centerMessage
>3812	Identifier	dsq
>3813	ExpressionStatement	 
>3814	CallExpression	dsq -> sound -> playSfx ( \"spiderweb\" )
>3815	ArgumentList	\"spiderweb\"
>3816	Argument	\"spiderweb\"
>3817	PrimaryExpression	\"spiderweb\"
>3818	Callee	dsq -> sound -> playSfx
>3819	PtrMemberAccess	dsq -> sound -> playSfx
>3820	Identifier	playSfx
>3821	PtrMemberAccess	dsq -> sound
>3822	Identifier	sound
>3823	Identifier	dsq
>3824	Label	 
>3825	Identifier	IET_WEB
>3826	BreakStatement	 
>3827	CompoundStatement	 
>3828	ExpressionStatement	 
>3829	CallExpression	dsq -> sound -> playSfx ( \"naijayum\" )
>3830	ArgumentList	\"naijayum\"
>3831	Argument	\"naijayum\"
>3832	PrimaryExpression	\"naijayum\"
>3833	Callee	dsq -> sound -> playSfx
>3834	PtrMemberAccess	dsq -> sound -> playSfx
>3835	Identifier	playSfx
>3836	PtrMemberAccess	dsq -> sound
>3837	Identifier	sound
>3838	Identifier	dsq
>3839	ExpressionStatement	 
>3840	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>3841	ArgumentList	getIEString ( data , i )
>3842	Argument	y
>3843	Identifier	y
>3844	Argument	getIEString ( data , i )
>3845	CallExpression	getIEString ( data , i )
>3846	ArgumentList	data
>3847	Argument	i
>3848	Identifier	i
>3849	Argument	data
>3850	Identifier	data
>3851	Callee	getIEString
>3852	Identifier	getIEString
>3853	Callee	dsq -> centerMessage
>3854	PtrMemberAccess	dsq -> centerMessage
>3855	Identifier	centerMessage
>3856	Identifier	dsq
>3857	Label	 
>3858	Identifier	IET_YUM
>3859	BreakStatement	 
>3860	CompoundStatement	 
>3861	IfStatement	if ( fx . magnitude < 0 )
>3862	ElseStatement	else
>3863	CompoundStatement	 
>3864	ExpressionStatement	 
>3865	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y , 1 )
>3866	ArgumentList	getIEString ( data , i )
>3867	Argument	1
>3868	PrimaryExpression	1
>3869	Argument	y
>3870	Identifier	y
>3871	Argument	getIEString ( data , i )
>3872	CallExpression	getIEString ( data , i )
>3873	ArgumentList	data
>3874	Argument	i
>3875	Identifier	i
>3876	Argument	data
>3877	Identifier	data
>3878	Callee	getIEString
>3879	Identifier	getIEString
>3880	Callee	dsq -> centerMessage
>3881	PtrMemberAccess	dsq -> centerMessage
>3882	Identifier	centerMessage
>3883	Identifier	dsq
>3884	ExpressionStatement	 
>3885	CallExpression	dsq -> continuity . setPoison ( fx . magnitude , t )
>3886	ArgumentList	fx . magnitude
>3887	Argument	t
>3888	Identifier	t
>3889	Argument	fx . magnitude
>3890	MemberAccess	fx . magnitude
>3891	Identifier	magnitude
>3892	Identifier	fx
>3893	Callee	dsq -> continuity . setPoison
>3894	MemberAccess	dsq -> continuity . setPoison
>3895	Identifier	setPoison
>3896	PtrMemberAccess	dsq -> continuity
>3897	Identifier	continuity
>3898	Identifier	dsq
>3899	IdentifierDeclStatement	 
>3900	IdentifierDecl	t = 30
>3901	AssignmentExpr	t = 30
>3902	PrimaryExpression	30
>3903	Identifier	t
>3904	Identifier	t
>3905	IdentifierDeclType	float
>3906	ExpressionStatement	 
>3907	CallExpression	dsq -> sound -> playSfx ( \"poison\" )
>3908	ArgumentList	\"poison\"
>3909	Argument	\"poison\"
>3910	PrimaryExpression	\"poison\"
>3911	Callee	dsq -> sound -> playSfx
>3912	PtrMemberAccess	dsq -> sound -> playSfx
>3913	Identifier	playSfx
>3914	PtrMemberAccess	dsq -> sound
>3915	Identifier	sound
>3916	Identifier	dsq
>3917	CompoundStatement	 
>3918	ExpressionStatement	 
>3919	CallExpression	dsq -> sound -> playSfx ( \"regen\" )
>3920	ArgumentList	\"regen\"
>3921	Argument	\"regen\"
>3922	PrimaryExpression	\"regen\"
>3923	Callee	dsq -> sound -> playSfx
>3924	PtrMemberAccess	dsq -> sound -> playSfx
>3925	Identifier	playSfx
>3926	PtrMemberAccess	dsq -> sound
>3927	Identifier	sound
>3928	Identifier	dsq
>3929	ExpressionStatement	 
>3930	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>3931	ArgumentList	getIEString ( data , i )
>3932	Argument	y
>3933	Identifier	y
>3934	Argument	getIEString ( data , i )
>3935	CallExpression	getIEString ( data , i )
>3936	ArgumentList	data
>3937	Argument	i
>3938	Identifier	i
>3939	Argument	data
>3940	Identifier	data
>3941	Callee	getIEString
>3942	Identifier	getIEString
>3943	Callee	dsq -> centerMessage
>3944	PtrMemberAccess	dsq -> centerMessage
>3945	Identifier	centerMessage
>3946	Identifier	dsq
>3947	ExpressionStatement	 
>3948	CallExpression	dsq -> continuity . setPoison ( 0 , 0 )
>3949	ArgumentList	0
>3950	Argument	0
>3951	PrimaryExpression	0
>3952	Argument	0
>3953	PrimaryExpression	0
>3954	Callee	dsq -> continuity . setPoison
>3955	MemberAccess	dsq -> continuity . setPoison
>3956	Identifier	setPoison
>3957	PtrMemberAccess	dsq -> continuity
>3958	Identifier	continuity
>3959	Identifier	dsq
>3960	Condition	 
>3961	RelationalExpression	fx . magnitude < 0
>3962	PrimaryExpression	0
>3963	MemberAccess	fx . magnitude
>3964	Identifier	magnitude
>3965	Identifier	fx
>3966	Label	 
>3967	Identifier	IET_POISON
>3968	BreakStatement	 
>3969	CompoundStatement	 
>3970	IfStatement	if ( fx . magnitude < 0 )
>3971	CompoundStatement	 
>3972	ExpressionStatement	 
>3973	CallExpression	dsq -> sound -> playSfx ( \"regen\" )
>3974	ArgumentList	\"regen\"
>3975	Argument	\"regen\"
>3976	PrimaryExpression	\"regen\"
>3977	Callee	dsq -> sound -> playSfx
>3978	PtrMemberAccess	dsq -> sound -> playSfx
>3979	Identifier	playSfx
>3980	PtrMemberAccess	dsq -> sound
>3981	Identifier	sound
>3982	Identifier	dsq
>3983	ExpressionStatement	 
>3984	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>3985	ArgumentList	getIEString ( data , i )
>3986	Argument	y
>3987	Identifier	y
>3988	Argument	getIEString ( data , i )
>3989	CallExpression	getIEString ( data , i )
>3990	ArgumentList	data
>3991	Argument	i
>3992	Identifier	i
>3993	Argument	data
>3994	Identifier	data
>3995	Callee	getIEString
>3996	Identifier	getIEString
>3997	Callee	dsq -> centerMessage
>3998	PtrMemberAccess	dsq -> centerMessage
>3999	Identifier	centerMessage
>4000	Identifier	dsq
>4001	ExpressionStatement	 
>4002	CallExpression	dsq -> game -> avatar -> setBlind ( 0 )
>4003	ArgumentList	0
>4004	Argument	0
>4005	PrimaryExpression	0
>4006	Callee	dsq -> game -> avatar -> setBlind
>4007	PtrMemberAccess	dsq -> game -> avatar -> setBlind
>4008	Identifier	setBlind
>4009	PtrMemberAccess	dsq -> game -> avatar
>4010	Identifier	avatar
>4011	PtrMemberAccess	dsq -> game
>4012	Identifier	game
>4013	Identifier	dsq
>4014	Condition	 
>4015	RelationalExpression	fx . magnitude < 0
>4016	PrimaryExpression	0
>4017	MemberAccess	fx . magnitude
>4018	Identifier	magnitude
>4019	Identifier	fx
>4020	Label	 
>4021	Identifier	IET_BLIND
>4022	BreakStatement	 
>4023	CompoundStatement	 
>4024	ExpressionStatement	 
>4025	CallExpression	dsq -> sound -> playSfx ( \"energy\" )
>4026	ArgumentList	\"energy\"
>4027	Argument	\"energy\"
>4028	PrimaryExpression	\"energy\"
>4029	Callee	dsq -> sound -> playSfx
>4030	PtrMemberAccess	dsq -> sound -> playSfx
>4031	Identifier	playSfx
>4032	PtrMemberAccess	dsq -> sound
>4033	Identifier	sound
>4034	Identifier	dsq
>4035	ExpressionStatement	 
>4036	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4037	ArgumentList	getIEString ( data , i )
>4038	Argument	y
>4039	Identifier	y
>4040	Argument	getIEString ( data , i )
>4041	CallExpression	getIEString ( data , i )
>4042	ArgumentList	data
>4043	Argument	i
>4044	Identifier	i
>4045	Argument	data
>4046	Identifier	data
>4047	Callee	getIEString
>4048	Identifier	getIEString
>4049	Callee	dsq -> centerMessage
>4050	PtrMemberAccess	dsq -> centerMessage
>4051	Identifier	centerMessage
>4052	Identifier	dsq
>4053	ExpressionStatement	 
>4054	CallExpression	dsq -> continuity . setEnergy ( fx . magnitude , energyTime )
>4055	ArgumentList	fx . magnitude
>4056	Argument	energyTime
>4057	Identifier	energyTime
>4058	Argument	fx . magnitude
>4059	MemberAccess	fx . magnitude
>4060	Identifier	magnitude
>4061	Identifier	fx
>4062	Callee	dsq -> continuity . setEnergy
>4063	MemberAccess	dsq -> continuity . setEnergy
>4064	Identifier	setEnergy
>4065	PtrMemberAccess	dsq -> continuity
>4066	Identifier	continuity
>4067	Identifier	dsq
>4068	Label	 
>4069	Identifier	IET_ENERGY
>4070	BreakStatement	 
>4071	CompoundStatement	 
>4072	ExpressionStatement	 
>4073	CallExpression	dsq -> sound -> playSfx ( \"invincible\" )
>4074	ArgumentList	\"invincible\"
>4075	Argument	\"invincible\"
>4076	PrimaryExpression	\"invincible\"
>4077	Callee	dsq -> sound -> playSfx
>4078	PtrMemberAccess	dsq -> sound -> playSfx
>4079	Identifier	playSfx
>4080	PtrMemberAccess	dsq -> sound
>4081	Identifier	sound
>4082	Identifier	dsq
>4083	ExpressionStatement	 
>4084	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4085	ArgumentList	getIEString ( data , i )
>4086	Argument	y
>4087	Identifier	y
>4088	Argument	getIEString ( data , i )
>4089	CallExpression	getIEString ( data , i )
>4090	ArgumentList	data
>4091	Argument	i
>4092	Identifier	i
>4093	Argument	data
>4094	Identifier	data
>4095	Callee	getIEString
>4096	Identifier	getIEString
>4097	Callee	dsq -> centerMessage
>4098	PtrMemberAccess	dsq -> centerMessage
>4099	Identifier	centerMessage
>4100	Identifier	dsq
>4101	ExpressionStatement	 
>4102	CallExpression	dsq -> continuity . setInvincible ( fx . magnitude * 5 )
>4103	ArgumentList	fx . magnitude * 5
>4104	Argument	fx . magnitude * 5
>4105	MultiplicativeExpression	fx . magnitude * 5
>4106	PrimaryExpression	5
>4107	MemberAccess	fx . magnitude
>4108	Identifier	magnitude
>4109	Identifier	fx
>4110	Callee	dsq -> continuity . setInvincible
>4111	MemberAccess	dsq -> continuity . setInvincible
>4112	Identifier	setInvincible
>4113	PtrMemberAccess	dsq -> continuity
>4114	Identifier	continuity
>4115	Identifier	dsq
>4116	Label	 
>4117	Identifier	IET_INVINCIBLE
>4118	BreakStatement	 
>4119	CompoundStatement	 
>4120	ExpressionStatement	 
>4121	CallExpression	dsq -> sound -> playSfx ( \"poison\" )
>4122	ArgumentList	\"poison\"
>4123	Argument	\"poison\"
>4124	PrimaryExpression	\"poison\"
>4125	Callee	dsq -> sound -> playSfx
>4126	PtrMemberAccess	dsq -> sound -> playSfx
>4127	Identifier	playSfx
>4128	PtrMemberAccess	dsq -> sound
>4129	Identifier	sound
>4130	Identifier	dsq
>4131	ExpressionStatement	 
>4132	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4133	ArgumentList	getIEString ( data , i )
>4134	Argument	y
>4135	Identifier	y
>4136	Argument	getIEString ( data , i )
>4137	CallExpression	getIEString ( data , i )
>4138	ArgumentList	data
>4139	Argument	i
>4140	Identifier	i
>4141	Argument	data
>4142	Identifier	data
>4143	Callee	getIEString
>4144	Identifier	getIEString
>4145	Callee	dsq -> centerMessage
>4146	PtrMemberAccess	dsq -> centerMessage
>4147	Identifier	centerMessage
>4148	Identifier	dsq
>4149	ExpressionStatement	 
>4150	CallExpression	debugLog ( \"ingredient effect
>4151	ArgumentList	\"ingredient effect
>4152	Argument	\"ingredient effect
>4153	PrimaryExpression	\"ingredient effect
>4154	Callee	debugLog
>4155	Identifier	debugLog
>4156	ExpressionStatement	 
>4157	CallExpression	dsq -> continuity . setFishPoison ( 1.0f * fx . magnitude , fishPoisonTime )
>4158	ArgumentList	1.0f * fx . magnitude
>4159	Argument	fishPoisonTime
>4160	Identifier	fishPoisonTime
>4161	Argument	1.0f * fx . magnitude
>4162	MultiplicativeExpression	1.0f * fx . magnitude
>4163	MemberAccess	fx . magnitude
>4164	Identifier	magnitude
>4165	Identifier	fx
>4166	PrimaryExpression	1.0f
>4167	Callee	dsq -> continuity . setFishPoison
>4168	MemberAccess	dsq -> continuity . setFishPoison
>4169	Identifier	setFishPoison
>4170	PtrMemberAccess	dsq -> continuity
>4171	Identifier	continuity
>4172	Identifier	dsq
>4173	Label	 
>4174	Identifier	IET_FISHPOISON
>4175	BreakStatement	 
>4176	CompoundStatement	 
>4177	ExpressionStatement	 
>4178	CallExpression	dsq -> sound -> playSfx ( \"bite\" )
>4179	ArgumentList	\"bite\"
>4180	Argument	\"bite\"
>4181	PrimaryExpression	\"bite\"
>4182	Callee	dsq -> sound -> playSfx
>4183	PtrMemberAccess	dsq -> sound -> playSfx
>4184	Identifier	playSfx
>4185	PtrMemberAccess	dsq -> sound
>4186	Identifier	sound
>4187	Identifier	dsq
>4188	ExpressionStatement	 
>4189	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4190	ArgumentList	getIEString ( data , i )
>4191	Argument	y
>4192	Identifier	y
>4193	Argument	getIEString ( data , i )
>4194	CallExpression	getIEString ( data , i )
>4195	ArgumentList	data
>4196	Argument	i
>4197	Identifier	i
>4198	Argument	data
>4199	Identifier	data
>4200	Callee	getIEString
>4201	Identifier	getIEString
>4202	Callee	dsq -> centerMessage
>4203	PtrMemberAccess	dsq -> centerMessage
>4204	Identifier	centerMessage
>4205	Identifier	dsq
>4206	ExpressionStatement	 
>4207	CallExpression	debugLog ( \"ingredient effect
>4208	ArgumentList	\"ingredient effect
>4209	Argument	\"ingredient effect
>4210	PrimaryExpression	\"ingredient effect
>4211	Callee	debugLog
>4212	Identifier	debugLog
>4213	ExpressionStatement	 
>4214	CallExpression	dsq -> continuity . setBiteMultiplier ( 1.0f + fx . magnitude , biteTime )
>4215	ArgumentList	1.0f + fx . magnitude
>4216	Argument	biteTime
>4217	Identifier	biteTime
>4218	Argument	1.0f + fx . magnitude
>4219	AdditiveExpression	1.0f + fx . magnitude
>4220	MemberAccess	fx . magnitude
>4221	Identifier	magnitude
>4222	Identifier	fx
>4223	PrimaryExpression	1.0f
>4224	Callee	dsq -> continuity . setBiteMultiplier
>4225	MemberAccess	dsq -> continuity . setBiteMultiplier
>4226	Identifier	setBiteMultiplier
>4227	PtrMemberAccess	dsq -> continuity
>4228	Identifier	continuity
>4229	Identifier	dsq
>4230	Label	 
>4231	Identifier	IET_BITE
>4232	BreakStatement	 
>4233	CompoundStatement	 
>4234	ExpressionStatement	 
>4235	CallExpression	dsq -> sound -> playSfx ( \"gulp\" )
>4236	ArgumentList	\"gulp\"
>4237	Argument	\"gulp\"
>4238	PrimaryExpression	\"gulp\"
>4239	Callee	dsq -> sound -> playSfx
>4240	PtrMemberAccess	dsq -> sound -> playSfx
>4241	Identifier	playSfx
>4242	PtrMemberAccess	dsq -> sound
>4243	Identifier	sound
>4244	Identifier	dsq
>4245	ExpressionStatement	 
>4246	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4247	ArgumentList	getIEString ( data , i )
>4248	Argument	y
>4249	Identifier	y
>4250	Argument	getIEString ( data , i )
>4251	CallExpression	getIEString ( data , i )
>4252	ArgumentList	data
>4253	Argument	i
>4254	Identifier	i
>4255	Argument	data
>4256	Identifier	data
>4257	Callee	getIEString
>4258	Identifier	getIEString
>4259	Callee	dsq -> centerMessage
>4260	PtrMemberAccess	dsq -> centerMessage
>4261	Identifier	centerMessage
>4262	Identifier	dsq
>4263	ExpressionStatement	 
>4264	CallExpression	debugLog ( \"ingredient effect
>4265	ArgumentList	\"ingredient effect
>4266	Argument	\"ingredient effect
>4267	PrimaryExpression	\"ingredient effect
>4268	Callee	debugLog
>4269	Identifier	debugLog
>4270	IfStatement	if ( getter )
>4271	CompoundStatement	 
>4272	ExpressionStatement	 
>4273	CallExpression	debugLog ( \"ate
>4274	ArgumentList	\"ate
>4275	Argument	\"ate
>4276	AdditiveExpression	\"ate
>4277	MemberAccess	setter . name
>4278	Identifier	name
>4279	Identifier	setter
>4280	PrimaryExpression	\"ate
>4281	Callee	debugLog
>4282	Identifier	debugLog
>4283	ExpressionStatement	 
>4284	CallExpression	dsq -> continuity . eatBeast ( setter )
>4285	ArgumentList	setter
>4286	Argument	setter
>4287	Identifier	setter
>4288	Callee	dsq -> continuity . eatBeast
>4289	MemberAccess	dsq -> continuity . eatBeast
>4290	Identifier	eatBeast
>4291	PtrMemberAccess	dsq -> continuity
>4292	Identifier	continuity
>4293	Identifier	dsq
>4294	IdentifierDeclStatement	 
>4295	IdentifierDecl	setter = * getter
>4296	AssignmentExpr	setter = * getter
>4297	UnaryOp	* getter
>4298	Identifier	getter
>4299	UnaryOperator	*
>4300	Identifier	setter
>4301	Identifier	setter
>4302	IdentifierDeclType	EatData
>4303	Condition	 
>4304	Identifier	getter
>4305	IdentifierDeclStatement	 
>4306	IdentifierDecl	* getter = dsq -> continuity . getEatData ( fx . string )
>4307	AssignmentExpr	* getter = dsq -> continuity . getEatData ( fx . string )
>4308	CallExpression	dsq -> continuity . getEatData ( fx . string )
>4309	ArgumentList	fx . string
>4310	Argument	fx . string
>4311	MemberAccess	fx . string
>4312	Identifier	string
>4313	Identifier	fx
>4314	Callee	dsq -> continuity . getEatData
>4315	MemberAccess	dsq -> continuity . getEatData
>4316	Identifier	getEatData
>4317	PtrMemberAccess	dsq -> continuity
>4318	Identifier	continuity
>4319	Identifier	dsq
>4320	Identifier	getter
>4321	Identifier	getter
>4322	IdentifierDeclType	EatData *
>4323	Label	 
>4324	Identifier	IET_EAT
>4325	BreakStatement	 
>4326	CompoundStatement	 
>4327	ExpressionStatement	 
>4328	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4329	ArgumentList	getIEString ( data , i )
>4330	Argument	y
>4331	Identifier	y
>4332	Argument	getIEString ( data , i )
>4333	CallExpression	getIEString ( data , i )
>4334	ArgumentList	data
>4335	Argument	i
>4336	Identifier	i
>4337	Argument	data
>4338	Identifier	data
>4339	Callee	getIEString
>4340	Identifier	getIEString
>4341	Callee	dsq -> centerMessage
>4342	PtrMemberAccess	dsq -> centerMessage
>4343	Identifier	centerMessage
>4344	Identifier	dsq
>4345	ExpressionStatement	 
>4346	CallExpression	debugLog ( \"ingredient effect
>4347	ArgumentList	\"ingredient effect
>4348	Argument	\"ingredient effect
>4349	PrimaryExpression	\"ingredient effect
>4350	Callee	debugLog
>4351	Identifier	debugLog
>4352	ExpressionStatement	 
>4353	CallExpression	dsq -> continuity . setTrip ( fx . magnitude * 30 )
>4354	ArgumentList	fx . magnitude * 30
>4355	Argument	fx . magnitude * 30
>4356	MultiplicativeExpression	fx . magnitude * 30
>4357	PrimaryExpression	30
>4358	MemberAccess	fx . magnitude
>4359	Identifier	magnitude
>4360	Identifier	fx
>4361	Callee	dsq -> continuity . setTrip
>4362	MemberAccess	dsq -> continuity . setTrip
>4363	Identifier	setTrip
>4364	PtrMemberAccess	dsq -> continuity
>4365	Identifier	continuity
>4366	Identifier	dsq
>4367	Label	 
>4368	Identifier	IET_TRIP
>4369	BreakStatement	 
>4370	CompoundStatement	 
>4371	ExpressionStatement	 
>4372	CallExpression	dsq -> sound -> playSfx ( \"regen\" )
>4373	ArgumentList	\"regen\"
>4374	Argument	\"regen\"
>4375	PrimaryExpression	\"regen\"
>4376	Callee	dsq -> sound -> playSfx
>4377	PtrMemberAccess	dsq -> sound -> playSfx
>4378	Identifier	playSfx
>4379	PtrMemberAccess	dsq -> sound
>4380	Identifier	sound
>4381	Identifier	dsq
>4382	ExpressionStatement	 
>4383	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4384	ArgumentList	getIEString ( data , i )
>4385	Argument	y
>4386	Identifier	y
>4387	Argument	getIEString ( data , i )
>4388	CallExpression	getIEString ( data , i )
>4389	ArgumentList	data
>4390	Argument	i
>4391	Identifier	i
>4392	Argument	data
>4393	Identifier	data
>4394	Callee	getIEString
>4395	Identifier	getIEString
>4396	Callee	dsq -> centerMessage
>4397	PtrMemberAccess	dsq -> centerMessage
>4398	Identifier	centerMessage
>4399	Identifier	dsq
>4400	ExpressionStatement	 
>4401	CallExpression	debugLog ( \"ingredient effect
>4402	ArgumentList	\"ingredient effect
>4403	Argument	\"ingredient effect
>4404	PrimaryExpression	\"ingredient effect
>4405	Callee	debugLog
>4406	Identifier	debugLog
>4407	ExpressionStatement	 
>4408	CallExpression	dsq -> continuity . setRegen ( fx . magnitude * 5 )
>4409	ArgumentList	fx . magnitude * 5
>4410	Argument	fx . magnitude * 5
>4411	MultiplicativeExpression	fx . magnitude * 5
>4412	PrimaryExpression	5
>4413	MemberAccess	fx . magnitude
>4414	Identifier	magnitude
>4415	Identifier	fx
>4416	Callee	dsq -> continuity . setRegen
>4417	MemberAccess	dsq -> continuity . setRegen
>4418	Identifier	setRegen
>4419	PtrMemberAccess	dsq -> continuity
>4420	Identifier	continuity
>4421	Identifier	dsq
>4422	Label	 
>4423	Identifier	IET_REGEN
>4424	BreakStatement	 
>4425	CompoundStatement	 
>4426	ExpressionStatement	 
>4427	CallExpression	dsq -> sound -> playSfx ( \"speedup\" )
>4428	ArgumentList	\"speedup\"
>4429	Argument	\"speedup\"
>4430	PrimaryExpression	\"speedup\"
>4431	Callee	dsq -> sound -> playSfx
>4432	PtrMemberAccess	dsq -> sound -> playSfx
>4433	Identifier	playSfx
>4434	PtrMemberAccess	dsq -> sound
>4435	Identifier	sound
>4436	Identifier	dsq
>4437	ExpressionStatement	 
>4438	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4439	ArgumentList	getIEString ( data , i )
>4440	Argument	y
>4441	Identifier	y
>4442	Argument	getIEString ( data , i )
>4443	CallExpression	getIEString ( data , i )
>4444	ArgumentList	data
>4445	Argument	i
>4446	Identifier	i
>4447	Argument	data
>4448	Identifier	data
>4449	Callee	getIEString
>4450	Identifier	getIEString
>4451	Callee	dsq -> centerMessage
>4452	PtrMemberAccess	dsq -> centerMessage
>4453	Identifier	centerMessage
>4454	Identifier	dsq
>4455	ExpressionStatement	 
>4456	CallExpression	debugLog ( \"ingredient effect
>4457	ArgumentList	\"ingredient effect
>4458	Argument	\"ingredient effect
>4459	PrimaryExpression	\"ingredient effect
>4460	Callee	debugLog
>4461	Identifier	debugLog
>4462	ExpressionStatement	 
>4463	CallExpression	dsq -> continuity . setSpeedMultiplier ( 1.0f + fx . magnitude * 0.5f , speedTime )
>4464	ArgumentList	1.0f + fx . magnitude * 0.5f
>4465	Argument	speedTime
>4466	Identifier	speedTime
>4467	Argument	1.0f + fx . magnitude * 0.5f
>4468	AdditiveExpression	1.0f + fx . magnitude * 0.5f
>4469	MultiplicativeExpression	fx . magnitude * 0.5f
>4470	PrimaryExpression	0.5f
>4471	MemberAccess	fx . magnitude
>4472	Identifier	magnitude
>4473	Identifier	fx
>4474	PrimaryExpression	1.0f
>4475	Callee	dsq -> continuity . setSpeedMultiplier
>4476	MemberAccess	dsq -> continuity . setSpeedMultiplier
>4477	Identifier	setSpeedMultiplier
>4478	PtrMemberAccess	dsq -> continuity
>4479	Identifier	continuity
>4480	Identifier	dsq
>4481	Label	 
>4482	Identifier	IET_SPEED
>4483	BreakStatement	 
>4484	CompoundStatement	 
>4485	ExpressionStatement	 
>4486	CallExpression	dsq -> sound -> playSfx ( \"defense\" )
>4487	ArgumentList	\"defense\"
>4488	Argument	\"defense\"
>4489	PrimaryExpression	\"defense\"
>4490	Callee	dsq -> sound -> playSfx
>4491	PtrMemberAccess	dsq -> sound -> playSfx
>4492	Identifier	playSfx
>4493	PtrMemberAccess	dsq -> sound
>4494	Identifier	sound
>4495	Identifier	dsq
>4496	ExpressionStatement	 
>4497	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4498	ArgumentList	getIEString ( data , i )
>4499	Argument	y
>4500	Identifier	y
>4501	Argument	getIEString ( data , i )
>4502	CallExpression	getIEString ( data , i )
>4503	ArgumentList	data
>4504	Argument	i
>4505	Identifier	i
>4506	Argument	data
>4507	Identifier	data
>4508	Callee	getIEString
>4509	Identifier	getIEString
>4510	Callee	dsq -> centerMessage
>4511	PtrMemberAccess	dsq -> centerMessage
>4512	Identifier	centerMessage
>4513	Identifier	dsq
>4514	IfStatement	if ( fx . magnitude <= 1 )
>4515	ElseStatement	else
>4516	IfStatement	if ( fx . magnitude == 2 )
>4517	ElseStatement	else
>4518	IfStatement	if ( fx . magnitude == 3 )
>4519	ElseStatement	else
>4520	ExpressionStatement	 
>4521	CallExpression	debugLog ( \"unsupported magnitude for defense\" )
>4522	ArgumentList	\"unsupported magnitude for defense\"
>4523	Argument	\"unsupported magnitude for defense\"
>4524	PrimaryExpression	\"unsupported magnitude for defense\"
>4525	Callee	debugLog
>4526	Identifier	debugLog
>4527	ExpressionStatement	 
>4528	CallExpression	dsq -> continuity . setDefenseMultiplier ( 0.3 , defenseTime )
>4529	ArgumentList	0.3
>4530	Argument	defenseTime
>4531	Identifier	defenseTime
>4532	Argument	0.3
>4533	PrimaryExpression	0.3
>4534	Callee	dsq -> continuity . setDefenseMultiplier
>4535	MemberAccess	dsq -> continuity . setDefenseMultiplier
>4536	Identifier	setDefenseMultiplier
>4537	PtrMemberAccess	dsq -> continuity
>4538	Identifier	continuity
>4539	Identifier	dsq
>4540	Condition	 
>4541	EqualityExpression	fx . magnitude == 3
>4542	PrimaryExpression	3
>4543	MemberAccess	fx . magnitude
>4544	Identifier	magnitude
>4545	Identifier	fx
>4546	ExpressionStatement	 
>4547	CallExpression	dsq -> continuity . setDefenseMultiplier ( 0.5 , defenseTime )
>4548	ArgumentList	0.5
>4549	Argument	defenseTime
>4550	Identifier	defenseTime
>4551	Argument	0.5
>4552	PrimaryExpression	0.5
>4553	Callee	dsq -> continuity . setDefenseMultiplier
>4554	MemberAccess	dsq -> continuity . setDefenseMultiplier
>4555	Identifier	setDefenseMultiplier
>4556	PtrMemberAccess	dsq -> continuity
>4557	Identifier	continuity
>4558	Identifier	dsq
>4559	Condition	 
>4560	EqualityExpression	fx . magnitude == 2
>4561	PrimaryExpression	2
>4562	MemberAccess	fx . magnitude
>4563	Identifier	magnitude
>4564	Identifier	fx
>4565	ExpressionStatement	 
>4566	CallExpression	dsq -> continuity . setDefenseMultiplier ( 0.75 , defenseTime )
>4567	ArgumentList	0.75
>4568	Argument	defenseTime
>4569	Identifier	defenseTime
>4570	Argument	0.75
>4571	PrimaryExpression	0.75
>4572	Callee	dsq -> continuity . setDefenseMultiplier
>4573	MemberAccess	dsq -> continuity . setDefenseMultiplier
>4574	Identifier	setDefenseMultiplier
>4575	PtrMemberAccess	dsq -> continuity
>4576	Identifier	continuity
>4577	Identifier	dsq
>4578	Condition	 
>4579	RelationalExpression	fx . magnitude <= 1
>4580	PrimaryExpression	1
>4581	MemberAccess	fx . magnitude
>4582	Identifier	magnitude
>4583	Identifier	fx
>4584	ExpressionStatement	 
>4585	CallExpression	debugLog ( \"ingredient effect
>4586	ArgumentList	\"ingredient effect
>4587	Argument	\"ingredient effect
>4588	PrimaryExpression	\"ingredient effect
>4589	Callee	debugLog
>4590	Identifier	debugLog
>4591	Label	 
>4592	Identifier	IET_DEFENSE
>4593	BreakStatement	 
>4594	CompoundStatement	 
>4595	ExpressionStatement	 
>4596	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4597	ArgumentList	getIEString ( data , i )
>4598	Argument	y
>4599	Identifier	y
>4600	Argument	getIEString ( data , i )
>4601	CallExpression	getIEString ( data , i )
>4602	ArgumentList	data
>4603	Argument	i
>4604	Identifier	i
>4605	Argument	data
>4606	Identifier	data
>4607	Callee	getIEString
>4608	Identifier	getIEString
>4609	Callee	dsq -> centerMessage
>4610	PtrMemberAccess	dsq -> centerMessage
>4611	Identifier	centerMessage
>4612	Identifier	dsq
>4613	ExpressionStatement	 
>4614	CallExpression	dsq -> overlay2 -> alpha . startPath ( 2 )
>4615	ArgumentList	2
>4616	Argument	2
>4617	PrimaryExpression	2
>4618	Callee	dsq -> overlay2 -> alpha . startPath
>4619	MemberAccess	dsq -> overlay2 -> alpha . startPath
>4620	Identifier	startPath
>4621	PtrMemberAccess	dsq -> overlay2 -> alpha
>4622	Identifier	alpha
>4623	PtrMemberAccess	dsq -> overlay2
>4624	Identifier	overlay2
>4625	Identifier	dsq
>4626	ExpressionStatement	 
>4627	CallExpression	dsq -> overlay2 -> alpha . data -> path . addPathNode ( 0 , 1 )
>4628	ArgumentList	0
>4629	Argument	1
>4630	PrimaryExpression	1
>4631	Argument	0
>4632	PrimaryExpression	0
>4633	Callee	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4634	MemberAccess	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4635	Identifier	addPathNode
>4636	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4637	Identifier	path
>4638	MemberAccess	dsq -> overlay2 -> alpha . data
>4639	Identifier	data
>4640	PtrMemberAccess	dsq -> overlay2 -> alpha
>4641	Identifier	alpha
>4642	PtrMemberAccess	dsq -> overlay2
>4643	Identifier	overlay2
>4644	Identifier	dsq
>4645	ExpressionStatement	 
>4646	CallExpression	dsq -> overlay2 -> alpha . data -> path . addPathNode ( 0.5 , 0.5 )
>4647	ArgumentList	0.5
>4648	Argument	0.5
>4649	PrimaryExpression	0.5
>4650	Argument	0.5
>4651	PrimaryExpression	0.5
>4652	Callee	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4653	MemberAccess	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4654	Identifier	addPathNode
>4655	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4656	Identifier	path
>4657	MemberAccess	dsq -> overlay2 -> alpha . data
>4658	Identifier	data
>4659	PtrMemberAccess	dsq -> overlay2 -> alpha
>4660	Identifier	alpha
>4661	PtrMemberAccess	dsq -> overlay2
>4662	Identifier	overlay2
>4663	Identifier	dsq
>4664	ExpressionStatement	 
>4665	CallExpression	dsq -> overlay2 -> alpha . data -> path . addPathNode ( 0 , 0 )
>4666	ArgumentList	0
>4667	Argument	0
>4668	PrimaryExpression	0
>4669	Argument	0
>4670	PrimaryExpression	0
>4671	Callee	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4672	MemberAccess	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4673	Identifier	addPathNode
>4674	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4675	Identifier	path
>4676	MemberAccess	dsq -> overlay2 -> alpha . data
>4677	Identifier	data
>4678	PtrMemberAccess	dsq -> overlay2 -> alpha
>4679	Identifier	alpha
>4680	PtrMemberAccess	dsq -> overlay2
>4681	Identifier	overlay2
>4682	Identifier	dsq
>4683	ExpressionStatement	 
>4684	CallExpression	dsq -> overlay2 -> alpha . data -> path . clear ( )
>4685	ArgumentList	 
>4686	Callee	dsq -> overlay2 -> alpha . data -> path . clear
>4687	MemberAccess	dsq -> overlay2 -> alpha . data -> path . clear
>4688	Identifier	clear
>4689	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4690	Identifier	path
>4691	MemberAccess	dsq -> overlay2 -> alpha . data
>4692	Identifier	data
>4693	PtrMemberAccess	dsq -> overlay2 -> alpha
>4694	Identifier	alpha
>4695	PtrMemberAccess	dsq -> overlay2
>4696	Identifier	overlay2
>4697	Identifier	dsq
>4698	ExpressionStatement	 
>4699	CallExpression	dsq -> overlay2 -> alpha . ensureData ( )
>4700	ArgumentList	 
>4701	Callee	dsq -> overlay2 -> alpha . ensureData
>4702	MemberAccess	dsq -> overlay2 -> alpha . ensureData
>4703	Identifier	ensureData
>4704	PtrMemberAccess	dsq -> overlay2 -> alpha
>4705	Identifier	alpha
>4706	PtrMemberAccess	dsq -> overlay2
>4707	Identifier	overlay2
>4708	Identifier	dsq
>4709	ExpressionStatement	 
>4710	AssignmentExpr	dsq -> overlay2 -> color = Vector ( 0.5 , 0.5 , 1 )
>4711	CallExpression	Vector ( 0.5 , 0.5 , 1 )
>4712	ArgumentList	0.5
>4713	Argument	1
>4714	PrimaryExpression	1
>4715	Argument	0.5
>4716	PrimaryExpression	0.5
>4717	Argument	0.5
>4718	PrimaryExpression	0.5
>4719	Callee	Vector
>4720	Identifier	Vector
>4721	PtrMemberAccess	dsq -> overlay2 -> color
>4722	Identifier	color
>4723	PtrMemberAccess	dsq -> overlay2
>4724	Identifier	overlay2
>4725	Identifier	dsq
>4726	ExpressionStatement	 
>4727	CallExpression	core -> sound -> playSfx ( \"CollectMana\" )
>4728	ArgumentList	\"CollectMana\"
>4729	Argument	\"CollectMana\"
>4730	PrimaryExpression	\"CollectMana\"
>4731	Callee	core -> sound -> playSfx
>4732	PtrMemberAccess	core -> sound -> playSfx
>4733	Identifier	playSfx
>4734	PtrMemberAccess	core -> sound
>4735	Identifier	sound
>4736	Identifier	core
>4737	ExpressionStatement	 
>4738	CallExpression	debugLog ( \"ingredient effect
>4739	ArgumentList	\"ingredient effect
>4740	Argument	\"ingredient effect
>4741	PrimaryExpression	\"ingredient effect
>4742	Callee	debugLog
>4743	Identifier	debugLog
>4744	ExpressionStatement	 
>4745	CallExpression	dsq -> game -> avatar -> heal ( dsq -> game -> avatar -> maxHealth )
>4746	ArgumentList	dsq -> game -> avatar -> maxHealth
>4747	Argument	dsq -> game -> avatar -> maxHealth
>4748	PtrMemberAccess	dsq -> game -> avatar -> maxHealth
>4749	Identifier	maxHealth
>4750	PtrMemberAccess	dsq -> game -> avatar
>4751	Identifier	avatar
>4752	PtrMemberAccess	dsq -> game
>4753	Identifier	game
>4754	Identifier	dsq
>4755	Callee	dsq -> game -> avatar -> heal
>4756	PtrMemberAccess	dsq -> game -> avatar -> heal
>4757	Identifier	heal
>4758	PtrMemberAccess	dsq -> game -> avatar
>4759	Identifier	avatar
>4760	PtrMemberAccess	dsq -> game
>4761	Identifier	game
>4762	Identifier	dsq
>4763	Label	 
>4764	Identifier	IET_MAXHP
>4765	BreakStatement	 
>4766	CompoundStatement	 
>4767	IfStatement	if ( fx . magnitude > 0 )
>4768	ElseStatement	else
>4769	CompoundStatement	 
>4770	ExpressionStatement	 
>4771	CallExpression	dsq -> game -> avatar -> playHitSound ( )
>4772	ArgumentList	 
>4773	Callee	dsq -> game -> avatar -> playHitSound
>4774	PtrMemberAccess	dsq -> game -> avatar -> playHitSound
>4775	Identifier	playHitSound
>4776	PtrMemberAccess	dsq -> game -> avatar
>4777	Identifier	avatar
>4778	PtrMemberAccess	dsq -> game
>4779	Identifier	game
>4780	Identifier	dsq
>4781	ExpressionStatement	 
>4782	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y , 1 )
>4783	ArgumentList	getIEString ( data , i )
>4784	Argument	1
>4785	PrimaryExpression	1
>4786	Argument	y
>4787	Identifier	y
>4788	Argument	getIEString ( data , i )
>4789	CallExpression	getIEString ( data , i )
>4790	ArgumentList	data
>4791	Argument	i
>4792	Identifier	i
>4793	Argument	data
>4794	Identifier	data
>4795	Callee	getIEString
>4796	Identifier	getIEString
>4797	Callee	dsq -> centerMessage
>4798	PtrMemberAccess	dsq -> centerMessage
>4799	Identifier	centerMessage
>4800	Identifier	dsq
>4801	CompoundStatement	 
>4802	ExpressionStatement	 
>4803	CallExpression	dsq -> overlay2 -> alpha . startPath ( 1 )
>4804	ArgumentList	1
>4805	Argument	1
>4806	PrimaryExpression	1
>4807	Callee	dsq -> overlay2 -> alpha . startPath
>4808	MemberAccess	dsq -> overlay2 -> alpha . startPath
>4809	Identifier	startPath
>4810	PtrMemberAccess	dsq -> overlay2 -> alpha
>4811	Identifier	alpha
>4812	PtrMemberAccess	dsq -> overlay2
>4813	Identifier	overlay2
>4814	Identifier	dsq
>4815	ExpressionStatement	 
>4816	CallExpression	dsq -> overlay2 -> alpha . data -> path . addPathNode ( 0 , 1 )
>4817	ArgumentList	0
>4818	Argument	1
>4819	PrimaryExpression	1
>4820	Argument	0
>4821	PrimaryExpression	0
>4822	Callee	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4823	MemberAccess	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4824	Identifier	addPathNode
>4825	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4826	Identifier	path
>4827	MemberAccess	dsq -> overlay2 -> alpha . data
>4828	Identifier	data
>4829	PtrMemberAccess	dsq -> overlay2 -> alpha
>4830	Identifier	alpha
>4831	PtrMemberAccess	dsq -> overlay2
>4832	Identifier	overlay2
>4833	Identifier	dsq
>4834	ExpressionStatement	 
>4835	CallExpression	dsq -> overlay2 -> alpha . data -> path . addPathNode ( 0.5 , 0.5 )
>4836	ArgumentList	0.5
>4837	Argument	0.5
>4838	PrimaryExpression	0.5
>4839	Argument	0.5
>4840	PrimaryExpression	0.5
>4841	Callee	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4842	MemberAccess	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4843	Identifier	addPathNode
>4844	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4845	Identifier	path
>4846	MemberAccess	dsq -> overlay2 -> alpha . data
>4847	Identifier	data
>4848	PtrMemberAccess	dsq -> overlay2 -> alpha
>4849	Identifier	alpha
>4850	PtrMemberAccess	dsq -> overlay2
>4851	Identifier	overlay2
>4852	Identifier	dsq
>4853	ExpressionStatement	 
>4854	CallExpression	dsq -> overlay2 -> alpha . data -> path . addPathNode ( 0 , 0 )
>4855	ArgumentList	0
>4856	Argument	0
>4857	PrimaryExpression	0
>4858	Argument	0
>4859	PrimaryExpression	0
>4860	Callee	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4861	MemberAccess	dsq -> overlay2 -> alpha . data -> path . addPathNode
>4862	Identifier	addPathNode
>4863	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4864	Identifier	path
>4865	MemberAccess	dsq -> overlay2 -> alpha . data
>4866	Identifier	data
>4867	PtrMemberAccess	dsq -> overlay2 -> alpha
>4868	Identifier	alpha
>4869	PtrMemberAccess	dsq -> overlay2
>4870	Identifier	overlay2
>4871	Identifier	dsq
>4872	ExpressionStatement	 
>4873	CallExpression	dsq -> overlay2 -> alpha . data -> path . clear ( )
>4874	ArgumentList	 
>4875	Callee	dsq -> overlay2 -> alpha . data -> path . clear
>4876	MemberAccess	dsq -> overlay2 -> alpha . data -> path . clear
>4877	Identifier	clear
>4878	PtrMemberAccess	dsq -> overlay2 -> alpha . data -> path
>4879	Identifier	path
>4880	MemberAccess	dsq -> overlay2 -> alpha . data
>4881	Identifier	data
>4882	PtrMemberAccess	dsq -> overlay2 -> alpha
>4883	Identifier	alpha
>4884	PtrMemberAccess	dsq -> overlay2
>4885	Identifier	overlay2
>4886	Identifier	dsq
>4887	ExpressionStatement	 
>4888	CallExpression	dsq -> overlay2 -> alpha . ensureData ( )
>4889	ArgumentList	 
>4890	Callee	dsq -> overlay2 -> alpha . ensureData
>4891	MemberAccess	dsq -> overlay2 -> alpha . ensureData
>4892	Identifier	ensureData
>4893	PtrMemberAccess	dsq -> overlay2 -> alpha
>4894	Identifier	alpha
>4895	PtrMemberAccess	dsq -> overlay2
>4896	Identifier	overlay2
>4897	Identifier	dsq
>4898	ExpressionStatement	 
>4899	AssignmentExpr	dsq -> overlay2 -> color = Vector ( 0.5 , 0.5 , 1 )
>4900	CallExpression	Vector ( 0.5 , 0.5 , 1 )
>4901	ArgumentList	0.5
>4902	Argument	1
>4903	PrimaryExpression	1
>4904	Argument	0.5
>4905	PrimaryExpression	0.5
>4906	Argument	0.5
>4907	PrimaryExpression	0.5
>4908	Callee	Vector
>4909	Identifier	Vector
>4910	PtrMemberAccess	dsq -> overlay2 -> color
>4911	Identifier	color
>4912	PtrMemberAccess	dsq -> overlay2
>4913	Identifier	overlay2
>4914	Identifier	dsq
>4915	ExpressionStatement	 
>4916	CallExpression	core -> sound -> playSfx ( \"CollectMana\" )
>4917	ArgumentList	\"CollectMana\"
>4918	Argument	\"CollectMana\"
>4919	PrimaryExpression	\"CollectMana\"
>4920	Callee	core -> sound -> playSfx
>4921	PtrMemberAccess	core -> sound -> playSfx
>4922	Identifier	playSfx
>4923	PtrMemberAccess	core -> sound
>4924	Identifier	sound
>4925	Identifier	core
>4926	ExpressionStatement	 
>4927	CallExpression	dsq -> centerMessage ( getIEString ( data , i ) , y )
>4928	ArgumentList	getIEString ( data , i )
>4929	Argument	y
>4930	Identifier	y
>4931	Argument	getIEString ( data , i )
>4932	CallExpression	getIEString ( data , i )
>4933	ArgumentList	data
>4934	Argument	i
>4935	Identifier	i
>4936	Argument	data
>4937	Identifier	data
>4938	Callee	getIEString
>4939	Identifier	getIEString
>4940	Callee	dsq -> centerMessage
>4941	PtrMemberAccess	dsq -> centerMessage
>4942	Identifier	centerMessage
>4943	Identifier	dsq
>4944	Condition	 
>4945	RelationalExpression	fx . magnitude > 0
>4946	PrimaryExpression	0
>4947	MemberAccess	fx . magnitude
>4948	Identifier	magnitude
>4949	Identifier	fx
>4950	ExpressionStatement	 
>4951	CallExpression	debugLog ( \"ingredient effect
>4952	ArgumentList	\"ingredient effect
>4953	Argument	\"ingredient effect
>4954	PrimaryExpression	\"ingredient effect
>4955	Callee	debugLog
>4956	Identifier	debugLog
>4957	ExpressionStatement	 
>4958	CallExpression	dsq -> game -> avatar -> heal ( fx . magnitude )
>4959	ArgumentList	fx . magnitude
>4960	Argument	fx . magnitude
>4961	MemberAccess	fx . magnitude
>4962	Identifier	magnitude
>4963	Identifier	fx
>4964	Callee	dsq -> game -> avatar -> heal
>4965	PtrMemberAccess	dsq -> game -> avatar -> heal
>4966	Identifier	heal
>4967	PtrMemberAccess	dsq -> game -> avatar
>4968	Identifier	avatar
>4969	PtrMemberAccess	dsq -> game
>4970	Identifier	game
>4971	Identifier	dsq
>4972	Label	 
>4973	Identifier	IET_HP
>4974	Condition	 
>4975	Identifier	useType
>4976	IfStatement	if ( fx . type == IET_RANDOM )
>4977	CompoundStatement	 
>4978	Condition	 
>4979	EqualityExpression	fx . type == IET_RANDOM
>4980	Identifier	IET_RANDOM
>4981	MemberAccess	fx . type
>4982	Identifier	type
>4983	Identifier	fx
>4984	IdentifierDeclStatement	 
>4985	IdentifierDecl	useType = fx . type
>4986	AssignmentExpr	useType = fx . type
>4987	MemberAccess	fx . type
>4988	Identifier	type
>4989	Identifier	fx
>4990	Identifier	useType
>4991	Identifier	useType
>4992	IdentifierDeclType	IngredientEffectType
>4993	IdentifierDeclStatement	 
>4994	IdentifierDecl	fx = data -> effects [ i ]
>4995	AssignmentExpr	fx = data -> effects [ i ]
>4996	ArrayIndexing	data -> effects [ i ]
>4997	Identifier	i
>4998	PtrMemberAccess	data -> effects
>4999	Identifier	effects
>5000	Identifier	data
>5001	Identifier	fx
>5002	Identifier	fx
>5003	IdentifierDeclType	IngredientEffect
>5004	ExpressionStatement	 
>5005	AssignmentExpr	y = 300 + i * 40
>5006	AdditiveExpression	300 + i * 40
>5007	MultiplicativeExpression	i * 40
>5008	PrimaryExpression	40
>5009	Identifier	i
>5010	PrimaryExpression	300
>5011	Identifier	y
>5012	IncDecOp	 
>5013	IncDec	++
>5014	Identifier	i
>5015	Condition	 
>5016	RelationalExpression	i < data -> effects . size ( )
>5017	CallExpression	data -> effects . size ( )
>5018	ArgumentList	 
>5019	Callee	data -> effects . size
>5020	MemberAccess	data -> effects . size
>5021	Identifier	size
>5022	PtrMemberAccess	data -> effects
>5023	Identifier	effects
>5024	Identifier	data
>5025	Identifier	i
>5026	ForInit	 
>5027	IdentifierDeclStatement	int i = 0 ;
>5028	IdentifierDecl	i = 0
>5029	AssignmentExpr	i = 0
>5030	PrimaryExpression	0
>5031	Identifier	i
>5032	Identifier	i
>5033	IdentifierDeclType	int
>5034	IdentifierDeclStatement	 
>5035	IdentifierDecl	y = 0
>5036	AssignmentExpr	y = 0
>5037	PrimaryExpression	0
>5038	Identifier	y
>5039	Identifier	y
>5040	IdentifierDeclType	float
>5041	IdentifierDeclStatement	 
>5042	IdentifierDecl	eaten = true
>5043	AssignmentExpr	eaten = true
>5044	Identifier	true
>5045	Identifier	true
>5046	Identifier	eaten
>5047	IdentifierDeclType	bool
>5116	FunctionDef	Continuity 
>5117	ParameterList	IngredientData * data
>5118	Parameter	 
>5119	Identifier	data
>5120	ParameterType	IngredientData *
>5121	ReturnType	std 
>5122	CompoundStatement	 
>5123	ReturnStatement	 
>5124	CallExpression	getAllIEString ( data )
>5125	ArgumentList	data
>5126	Argument	data
>5127	Identifier	data
>5128	Callee	getAllIEString
>5129	Identifier	getAllIEString
>5135	FunctionDef	Continuity 
>5136	ParameterList	 
>5137	ReturnType	void
>5138	CompoundStatement	 
>5139	ExpressionStatement	 
>5140	CallExpression	in2 . close ( )
>5141	ArgumentList	 
>5142	Callee	in2 . close
>5143	MemberAccess	in2 . close
>5144	Identifier	close
>5145	Identifier	in2
>5146	WhileStatement	while ( std 
>5147	CompoundStatement	 
>5148	ExpressionStatement	 
>5149	AssignmentExpr	treasureData [ num ] = d
>5150	Identifier	d
>5151	ArrayIndexing	treasureData [ num ]
>5152	Identifier	num
>5153	Identifier	treasureData
>5154	ExpressionStatement	 
>5155	AssignmentExpr	d . use = use
>5156	Identifier	use
>5157	MemberAccess	d . use
>5158	Identifier	use
>5159	Identifier	d
>5160	ExpressionStatement	 
>5161	AssignmentExpr	d . sz = sz
>5162	Identifier	sz
>5163	MemberAccess	d . sz
>5164	Identifier	sz
>5165	Identifier	d
>5166	ExpressionStatement	 
>5167	AssignmentExpr	d . gfx = gfx
>5168	Identifier	gfx
>5169	MemberAccess	d . gfx
>5170	Identifier	gfx
>5171	Identifier	d
>5172	IdentifierDeclStatement	 
>5173	IdentifierDecl	d
>5174	Identifier	d
>5175	IdentifierDeclType	TreasureDataEntry
>5176	IfStatement	if ( sz == 0 )
>5177	ExpressionStatement	 
>5178	AssignmentExpr	sz = 1
>5179	PrimaryExpression	1
>5180	Identifier	sz
>5181	Condition	 
>5182	EqualityExpression	sz == 0
>5183	PrimaryExpression	0
>5184	Identifier	sz
>5185	ExpressionStatement	 
>5186	ShiftExpression	is >> num >> gfx >> sz >> use
>5187	ShiftExpression	num >> gfx >> sz >> use
>5188	ShiftExpression	gfx >> sz >> use
>5189	ShiftExpression	sz >> use
>5190	Identifier	use
>5191	Identifier	sz
>5192	Identifier	gfx
>5193	Identifier	num
>5194	Identifier	is
>5195	IdentifierDeclStatement	 
>5196	IdentifierDecl	is ( line )
>5197	Identifier	line
>5198	Identifier	is
>5199	IdentifierDeclType	std 
>5200	Condition	 
>5201	CallExpression	std 
>5202	ArgumentList	in2
>5203	Argument	line
>5204	Identifier	line
>5205	Argument	in2
>5206	Identifier	in2
>5207	Callee	std 
>5208	Identifier	std 
>5209	IdentifierDeclStatement	 
>5210	IdentifierDecl	in2 ( file . c_str ( ) )
>5211	CallExpression	file . c_str ( )
>5212	ArgumentList	 
>5213	Callee	file . c_str
>5214	MemberAccess	file . c_str
>5215	Identifier	c_str
>5216	Identifier	file
>5217	Identifier	in2
>5218	IdentifierDeclType	InStream
>5219	IfStatement	if ( ! found )
>5220	ExpressionStatement	 
>5221	AssignmentExpr	file = \"data/treasures.txt\"
>5222	PrimaryExpression	\"data/treasures.txt\"
>5223	Identifier	file
>5224	Condition	 
>5225	UnaryOp	! found
>5226	Identifier	found
>5227	UnaryOperator	!
>5228	IfStatement	if ( dsq -> mod . isActive ( ) )
>5229	CompoundStatement	 
>5230	IfStatement	if ( exists ( file ) )
>5231	ExpressionStatement	 
>5232	AssignmentExpr	found = true
>5233	Identifier	true
>5234	Identifier	found
>5235	Condition	 
>5236	CallExpression	exists ( file )
>5237	ArgumentList	file
>5238	Argument	file
>5239	Identifier	file
>5240	Callee	exists
>5241	Identifier	exists
>5242	ExpressionStatement	 
>5243	AssignmentExpr	file = dsq -> mod . getPath ( ) + \"treasures.txt\"
>5244	AdditiveExpression	dsq -> mod . getPath ( ) + \"treasures.txt\"
>5245	PrimaryExpression	\"treasures.txt\"
>5246	CallExpression	dsq -> mod . getPath ( )
>5247	ArgumentList	 
>5248	Callee	dsq -> mod . getPath
>5249	MemberAccess	dsq -> mod . getPath
>5250	Identifier	getPath
>5251	PtrMemberAccess	dsq -> mod
>5252	Identifier	mod
>5253	Identifier	dsq
>5254	Identifier	file
>5255	Condition	 
>5256	CallExpression	dsq -> mod . isActive ( )
>5257	ArgumentList	 
>5258	Callee	dsq -> mod . isActive
>5259	MemberAccess	dsq -> mod . isActive
>5260	Identifier	isActive
>5261	PtrMemberAccess	dsq -> mod
>5262	Identifier	mod
>5263	Identifier	dsq
>5264	IdentifierDeclStatement	 
>5265	IdentifierDecl	found = false
>5266	AssignmentExpr	found = false
>5267	Identifier	false
>5268	Identifier	false
>5269	Identifier	found
>5270	IdentifierDeclType	bool
>5271	IdentifierDeclStatement	 
>5272	IdentifierDecl	sz
>5273	Identifier	sz
>5274	IdentifierDeclType	float
>5275	IdentifierDeclStatement	 
>5276	IdentifierDecl	use
>5277	Identifier	use
>5278	IdentifierDeclType	int
>5279	IdentifierDecl	num
>5280	Identifier	num
>5281	IdentifierDeclType	int
>5282	IdentifierDeclStatement	 
>5283	IdentifierDecl	file
>5284	Identifier	file
>5285	IdentifierDeclType	std 
>5286	IdentifierDecl	gfx
>5287	Identifier	gfx
>5288	IdentifierDeclType	std 
>5289	IdentifierDecl	line
>5290	Identifier	line
>5291	IdentifierDeclType	std 
>5292	ExpressionStatement	 
>5293	CallExpression	treasureData . clear ( )
>5294	ArgumentList	 
>5295	Callee	treasureData . clear
>5296	MemberAccess	treasureData . clear
>5297	Identifier	clear
>5298	Identifier	treasureData
>5327	FunctionDef	Continuity 
>5328	ParameterList	 
>5329	ReturnType	void
>5330	CompoundStatement	 
>5331	ExpressionStatement	 
>5332	CallExpression	ingredientData . clear ( )
>5333	ArgumentList	 
>5334	Callee	ingredientData . clear
>5335	MemberAccess	ingredientData . clear
>5336	Identifier	clear
>5337	Identifier	ingredientData
>5338	ForStatement	for ( IngredientDatas 
>5339	CompoundStatement	 
>5340	ExpressionStatement	 
>5341	UnaryOp	* i
>5342	Identifier	i
>5343	UnaryOperator	*
>5344	Statement	 
>5345	UnaryExpression	 
>5346	Identifier	i
>5347	IncDec	++
>5348	Condition	 
>5349	EqualityExpression	i != ingredientData . end ( )
>5350	CallExpression	ingredientData . end ( )
>5351	ArgumentList	 
>5352	Callee	ingredientData . end
>5353	MemberAccess	ingredientData . end
>5354	Identifier	end
>5355	Identifier	ingredientData
>5356	Identifier	i
>5357	ForInit	 
>5358	IdentifierDeclStatement	IngredientDatas 
>5359	IdentifierDecl	i = ingredientData . begin ( )
>5360	AssignmentExpr	i = ingredientData . begin ( )
>5361	CallExpression	ingredientData . begin ( )
>5362	ArgumentList	 
>5363	Callee	ingredientData . begin
>5364	MemberAccess	ingredientData . begin
>5365	Identifier	begin
>5366	Identifier	ingredientData
>5367	Identifier	i
>5368	Identifier	i
>5369	IdentifierDeclType	IngredientDatas 
>5377	FunctionDef	Continuity 
>5378	ParameterList	 
>5379	ReturnType	void
>5380	CompoundStatement	 
>5381	IfStatement	if ( ingredientData . empty ( ) && recipes . empty ( ) )
>5382	CompoundStatement	 
>5383	ExpressionStatement	 
>5384	CallExpression	loadIngredientData ( \"data/ingredients.txt\" )
>5385	ArgumentList	\"data/ingredients.txt\"
>5386	Argument	\"data/ingredients.txt\"
>5387	PrimaryExpression	\"data/ingredients.txt\"
>5388	Callee	loadIngredientData
>5389	Identifier	loadIngredientData
>5390	Condition	 
>5391	AndExpression	ingredientData . empty ( ) && recipes . empty ( )
>5392	CallExpression	recipes . empty ( )
>5393	ArgumentList	 
>5394	Callee	recipes . empty
>5395	MemberAccess	recipes . empty
>5396	Identifier	empty
>5397	Identifier	recipes
>5398	CallExpression	ingredientData . empty ( )
>5399	ArgumentList	 
>5400	Callee	ingredientData . empty
>5401	MemberAccess	ingredientData . empty
>5402	Identifier	empty
>5403	Identifier	ingredientData
>5404	IfStatement	if ( dsq -> mod . isActive ( ) )
>5405	CompoundStatement	 
>5406	ExpressionStatement	 
>5407	CallExpression	loadIngredientData ( dsq -> mod . getPath ( ) + \"ingredients.txt\" )
>5408	ArgumentList	dsq -> mod . getPath ( ) + \"ingredients.txt\"
>5409	Argument	dsq -> mod . getPath ( ) + \"ingredients.txt\"
>5410	AdditiveExpression	dsq -> mod . getPath ( ) + \"ingredients.txt\"
>5411	PrimaryExpression	\"ingredients.txt\"
>5412	CallExpression	dsq -> mod . getPath ( )
>5413	ArgumentList	 
>5414	Callee	dsq -> mod . getPath
>5415	MemberAccess	dsq -> mod . getPath
>5416	Identifier	getPath
>5417	PtrMemberAccess	dsq -> mod
>5418	Identifier	mod
>5419	Identifier	dsq
>5420	Callee	loadIngredientData
>5421	Identifier	loadIngredientData
>5422	Condition	 
>5423	CallExpression	dsq -> mod . isActive ( )
>5424	ArgumentList	 
>5425	Callee	dsq -> mod . isActive
>5426	MemberAccess	dsq -> mod . isActive
>5427	Identifier	isActive
>5428	PtrMemberAccess	dsq -> mod
>5429	Identifier	mod
>5430	Identifier	dsq
>5431	IfStatement	if ( dsq -> mod . isActive ( ) )
>5432	CompoundStatement	 
>5433	ExpressionStatement	 
>5434	CallExpression	loadIngredientDisplayNames ( fname )
>5435	ArgumentList	fname
>5436	Argument	fname
>5437	Identifier	fname
>5438	Callee	loadIngredientDisplayNames
>5439	Identifier	loadIngredientDisplayNames
>5440	ExpressionStatement	 
>5441	AssignmentExpr	fname = localisePath ( dsq -> mod . getPath ( ) + \"ingredientnames.txt\" , dsq -> mod . getPath ( ) )
>5442	CallExpression	localisePath ( dsq -> mod . getPath ( ) + \"ingredientnames.txt\" , dsq -> mod . getPath ( ) )
>5443	ArgumentList	dsq -> mod . getPath ( ) + \"ingredientnames.txt\"
>5444	Argument	dsq -> mod . getPath ( )
>5445	CallExpression	dsq -> mod . getPath ( )
>5446	ArgumentList	 
>5447	Callee	dsq -> mod . getPath
>5448	MemberAccess	dsq -> mod . getPath
>5449	Identifier	getPath
>5450	PtrMemberAccess	dsq -> mod
>5451	Identifier	mod
>5452	Identifier	dsq
>5453	Argument	dsq -> mod . getPath ( ) + \"ingredientnames.txt\"
>5454	AdditiveExpression	dsq -> mod . getPath ( ) + \"ingredientnames.txt\"
>5455	PrimaryExpression	\"ingredientnames.txt\"
>5456	CallExpression	dsq -> mod . getPath ( )
>5457	ArgumentList	 
>5458	Callee	dsq -> mod . getPath
>5459	MemberAccess	dsq -> mod . getPath
>5460	Identifier	getPath
>5461	PtrMemberAccess	dsq -> mod
>5462	Identifier	mod
>5463	Identifier	dsq
>5464	Callee	localisePath
>5465	Identifier	localisePath
>5466	Identifier	fname
>5467	Condition	 
>5468	CallExpression	dsq -> mod . isActive ( )
>5469	ArgumentList	 
>5470	Callee	dsq -> mod . isActive
>5471	MemberAccess	dsq -> mod . isActive
>5472	Identifier	isActive
>5473	PtrMemberAccess	dsq -> mod
>5474	Identifier	mod
>5475	Identifier	dsq
>5476	ExpressionStatement	 
>5477	CallExpression	loadIngredientDisplayNames ( fname )
>5478	ArgumentList	fname
>5479	Argument	fname
>5480	Identifier	fname
>5481	Callee	loadIngredientDisplayNames
>5482	Identifier	loadIngredientDisplayNames
>5483	IdentifierDeclStatement	 
>5484	IdentifierDecl	fname = localisePath ( \"data/ingredientnames.txt\" )
>5485	AssignmentExpr	fname = localisePath ( \"data/ingredientnames.txt\" )
>5486	CallExpression	localisePath ( \"data/ingredientnames.txt\" )
>5487	ArgumentList	\"data/ingredientnames.txt\"
>5488	Argument	\"data/ingredientnames.txt\"
>5489	PrimaryExpression	\"data/ingredientnames.txt\"
>5490	Callee	localisePath
>5491	Identifier	localisePath
>5492	Identifier	fname
>5493	Identifier	fname
>5494	IdentifierDeclType	std 
>5495	ExpressionStatement	 
>5496	CallExpression	loadIngredientDisplayNames ( \"data/ingredientnames.txt\" )
>5497	ArgumentList	\"data/ingredientnames.txt\"
>5498	Argument	\"data/ingredientnames.txt\"
>5499	PrimaryExpression	\"data/ingredientnames.txt\"
>5500	Callee	loadIngredientDisplayNames
>5501	Identifier	loadIngredientDisplayNames
>5502	ExpressionStatement	 
>5503	CallExpression	recipes . clear ( )
>5504	ArgumentList	 
>5505	Callee	recipes . clear
>5506	MemberAccess	recipes . clear
>5507	Identifier	clear
>5508	Identifier	recipes
>5509	ExpressionStatement	 
>5510	CallExpression	ingredientDisplayNames . clear ( )
>5511	ArgumentList	 
>5512	Callee	ingredientDisplayNames . clear
>5513	MemberAccess	ingredientDisplayNames . clear
>5514	Identifier	clear
>5515	Identifier	ingredientDisplayNames
>5516	ExpressionStatement	 
>5517	CallExpression	ingredientDescriptions . clear ( )
>5518	ArgumentList	 
>5519	Callee	ingredientDescriptions . clear
>5520	MemberAccess	ingredientDescriptions . clear
>5521	Identifier	clear
>5522	Identifier	ingredientDescriptions
>5523	ExpressionStatement	 
>5524	CallExpression	clearIngredientData ( )
>5525	ArgumentList	 
>5526	Callee	clearIngredientData
>5527	Identifier	clearIngredientData
>5528	IfStatement	if ( ingredients . size ( ) )
>5529	CompoundStatement	 
>5530	ReturnStatement	 
>5531	ExpressionStatement	 
>5532	CallExpression	debugLog ( \"Can't reload ingredient data, inventory is not empty\" )
>5533	ArgumentList	\"Can't reload ingredient data, inventory is not empty\"
>5534	Argument	\"Can't reload ingredient data, inventory is not empty\"
>5535	PrimaryExpression	\"Can't reload ingredient data, inventory is not empty\"
>5536	Callee	debugLog
>5537	Identifier	debugLog
>5538	Condition	 
>5539	CallExpression	ingredients . size ( )
>5540	ArgumentList	 
>5541	Callee	ingredients . size
>5542	MemberAccess	ingredients . size
>5543	Identifier	size
>5544	Identifier	ingredients
>5563	FunctionDef	Continuity 
>5564	ParameterList	const std 
>5565	Parameter	 
>5566	Identifier	file
>5567	ParameterType	const std 
>5568	ReturnType	void
>5569	CompoundStatement	 
>5570	ExpressionStatement	 
>5571	CallExpression	in . close ( )
>5572	ArgumentList	 
>5573	Callee	in . close
>5574	MemberAccess	in . close
>5575	Identifier	close
>5576	Identifier	in
>5577	IfStatement	if ( recipes )
>5578	CompoundStatement	 
>5579	WhileStatement	while ( in >> name )
>5580	CompoundStatement	 
>5581	IfStatement	if ( quitNext )
>5582	CompoundStatement	 
>5583	ExpressionStatement	 
>5584	IncDecOp	index ++
>5585	IncDec	++
>5586	Identifier	index
>5587	ExpressionStatement	 
>5588	AssignmentExpr	quitNext = false
>5589	Identifier	false
>5590	Identifier	quitNext
>5591	ExpressionStatement	 
>5592	CallExpression	r . clear ( )
>5593	ArgumentList	 
>5594	Callee	r . clear
>5595	MemberAccess	r . clear
>5596	Identifier	clear
>5597	Identifier	r
>5598	ExpressionStatement	 
>5599	CallExpression	this -> recipes . push_back ( r )
>5600	ArgumentList	r
>5601	Argument	r
>5602	Identifier	r
>5603	Callee	this -> recipes . push_back
>5604	MemberAccess	this -> recipes . push_back
>5605	Identifier	push_back
>5606	PtrMemberAccess	this -> recipes
>5607	Identifier	recipes
>5608	Identifier	this
>5609	ExpressionStatement	 
>5610	AssignmentExpr	r . index = index
>5611	Identifier	index
>5612	MemberAccess	r . index
>5613	Identifier	index
>5614	Identifier	r
>5615	Condition	 
>5616	Identifier	quitNext
>5617	IfStatement	if ( name == \"+\" )
>5618	ElseStatement	else
>5619	IfStatement	if ( name == \"=\" )
>5620	ElseStatement	else
>5621	CompoundStatement	 
>5622	IfStatement	if ( quitNext )
>5623	ElseStatement	else
>5624	CompoundStatement	 
>5625	IfStatement	if ( it == IT_NONE )
>5626	ElseStatement	else
>5627	CompoundStatement	 
>5628	ExpressionStatement	 
>5629	CallExpression	r . addType ( it , name )
>5630	ArgumentList	it
>5631	Argument	name
>5632	Identifier	name
>5633	Argument	it
>5634	Identifier	it
>5635	Callee	r . addType
>5636	MemberAccess	r . addType
>5637	Identifier	addType
>5638	Identifier	r
>5639	CompoundStatement	 
>5640	ExpressionStatement	 
>5641	CallExpression	r . addName ( name )
>5642	ArgumentList	name
>5643	Argument	name
>5644	Identifier	name
>5645	Callee	r . addName
>5646	MemberAccess	r . addName
>5647	Identifier	addName
>5648	Identifier	r
>5649	Condition	 
>5650	EqualityExpression	it == IT_NONE
>5651	Identifier	IT_NONE
>5652	Identifier	it
>5653	IdentifierDeclStatement	 
>5654	IdentifierDecl	it = getIngredientTypeFromName ( name )
>5655	AssignmentExpr	it = getIngredientTypeFromName ( name )
>5656	CallExpression	getIngredientTypeFromName ( name )
>5657	ArgumentList	name
>5658	Argument	name
>5659	Identifier	name
>5660	Callee	getIngredientTypeFromName
>5661	Identifier	getIngredientTypeFromName
>5662	Identifier	it
>5663	Identifier	it
>5664	IdentifierDeclType	IngredientType
>5665	CompoundStatement	 
>5666	ExpressionStatement	 
>5667	AssignmentExpr	r . resultDisplayName = getIngredientDisplayName ( name )
>5668	CallExpression	getIngredientDisplayName ( name )
>5669	ArgumentList	name
>5670	Argument	name
>5671	Identifier	name
>5672	Callee	getIngredientDisplayName
>5673	Identifier	getIngredientDisplayName
>5674	MemberAccess	r . resultDisplayName
>5675	Identifier	resultDisplayName
>5676	Identifier	r
>5677	ExpressionStatement	 
>5678	AssignmentExpr	r . result = name
>5679	Identifier	name
>5680	MemberAccess	r . result
>5681	Identifier	result
>5682	Identifier	r
>5683	Condition	 
>5684	Identifier	quitNext
>5685	CompoundStatement	 
>5686	ContinueStatement	 
>5687	ExpressionStatement	 
>5688	AssignmentExpr	quitNext = true
>5689	Identifier	true
>5690	Identifier	quitNext
>5691	Condition	 
>5692	EqualityExpression	name == \"=\"
>5693	PrimaryExpression	\"=\"
>5694	Identifier	name
>5695	CompoundStatement	 
>5696	ContinueStatement	 
>5697	Condition	 
>5698	EqualityExpression	name == \"+\"
>5699	PrimaryExpression	\"+\"
>5700	Identifier	name
>5701	Condition	 
>5702	ShiftExpression	in >> name
>5703	Identifier	name
>5704	Identifier	in
>5705	IdentifierDeclStatement	 
>5706	IdentifierDecl	r
>5707	Identifier	r
>5708	IdentifierDeclType	Recipe
>5709	IdentifierDeclStatement	 
>5710	IdentifierDecl	index = 0
>5711	AssignmentExpr	index = 0
>5712	PrimaryExpression	0
>5713	Identifier	index
>5714	Identifier	index
>5715	IdentifierDeclType	int
>5716	IdentifierDeclStatement	 
>5717	IdentifierDecl	quitNext = false
>5718	AssignmentExpr	quitNext = false
>5719	Identifier	false
>5720	Identifier	false
>5721	Identifier	quitNext
>5722	IdentifierDeclType	bool
>5723	Condition	 
>5724	Identifier	recipes
>5725	IfStatement	if ( extradata )
>5726	CompoundStatement	 
>5727	WhileStatement	while ( std 
>5728	CompoundStatement	 
>5729	ExpressionStatement	 
>5730	AssignmentExpr	data -> rotKind = rotKind
>5731	Identifier	rotKind
>5732	PtrMemberAccess	data -> rotKind
>5733	Identifier	rotKind
>5734	Identifier	data
>5735	ExpressionStatement	 
>5736	AssignmentExpr	data -> maxAmount = maxAmount
>5737	Identifier	maxAmount
>5738	PtrMemberAccess	data -> maxAmount
>5739	Identifier	maxAmount
>5740	Identifier	data
>5741	IfStatement	if ( ! data )
>5742	CompoundStatement	 
>5743	ContinueStatement	 
>5744	ExpressionStatement	 
>5745	CallExpression	errorLog ( \"Specifying data for undefined ingredient
>5746	ArgumentList	\"Specifying data for undefined ingredient
>5747	Argument	\"Specifying data for undefined ingredient
>5748	AdditiveExpression	\"Specifying data for undefined ingredient
>5749	Identifier	name
>5750	PrimaryExpression	\"Specifying data for undefined ingredient
>5751	Callee	errorLog
>5752	Identifier	errorLog
>5753	Condition	 
>5754	UnaryOp	! data
>5755	Identifier	data
>5756	UnaryOperator	!
>5757	IdentifierDeclStatement	 
>5758	IdentifierDecl	* data = getIngredientDataByName ( name )
>5759	AssignmentExpr	* data = getIngredientDataByName ( name )
>5760	CallExpression	getIngredientDataByName ( name )
>5761	ArgumentList	name
>5762	Argument	name
>5763	Identifier	name
>5764	Callee	getIngredientDataByName
>5765	Identifier	getIngredientDataByName
>5766	Identifier	data
>5767	Identifier	data
>5768	IdentifierDeclType	IngredientData *
>5769	IfStatement	if ( name == \"==Recipes==\" )
>5770	CompoundStatement	 
>5771	BreakStatement	 
>5772	ExpressionStatement	 
>5773	AssignmentExpr	recipes = true
>5774	Identifier	true
>5775	Identifier	recipes
>5776	Condition	 
>5777	EqualityExpression	name == \"==Recipes==\"
>5778	PrimaryExpression	\"==Recipes==\"
>5779	Identifier	name
>5780	ExpressionStatement	 
>5781	ShiftExpression	inLine >> name >> maxAmount >> rotKind
>5782	ShiftExpression	name >> maxAmount >> rotKind
>5783	ShiftExpression	maxAmount >> rotKind
>5784	Identifier	rotKind
>5785	Identifier	maxAmount
>5786	Identifier	name
>5787	Identifier	inLine
>5788	IdentifierDeclStatement	 
>5789	IdentifierDecl	rotKind = 1
>5790	AssignmentExpr	rotKind = 1
>5791	PrimaryExpression	1
>5792	Identifier	rotKind
>5793	Identifier	rotKind
>5794	IdentifierDeclType	int
>5795	IdentifierDeclStatement	 
>5796	IdentifierDecl	maxAmount = MAX_INGREDIENT_AMOUNT
>5797	AssignmentExpr	maxAmount = MAX_INGREDIENT_AMOUNT
>5798	Identifier	MAX_INGREDIENT_AMOUNT
>5799	Identifier	MAX_INGREDIENT_AMOUNT
>5800	Identifier	maxAmount
>5801	IdentifierDeclType	int
>5802	IdentifierDeclStatement	 
>5803	IdentifierDecl	inLine ( line . c_str ( ) , SimpleIStringStream 
>5804	Expression	line . c_str ( ) , SimpleIStringStream 
>5805	Identifier	SimpleIStringStream 
>5806	CallExpression	line . c_str ( )
>5807	ArgumentList	 
>5808	Callee	line . c_str
>5809	MemberAccess	line . c_str
>5810	Identifier	c_str
>5811	Identifier	line
>5812	Identifier	inLine
>5813	IdentifierDeclType	SimpleIStringStream
>5814	Condition	 
>5815	CallExpression	std 
>5816	ArgumentList	in
>5817	Argument	line
>5818	Identifier	line
>5819	Argument	in
>5820	Identifier	in
>5821	Callee	std 
>5822	Identifier	std 
>5823	Condition	 
>5824	Identifier	extradata
>5825	WhileStatement	while ( std 
>5826	CompoundStatement	 
>5827	ExpressionStatement	 
>5828	CallExpression	ingredientData . push_back ( data )
>5829	ArgumentList	data
>5830	Argument	data
>5831	Identifier	data
>5832	Callee	ingredientData . push_back
>5833	MemberAccess	ingredientData . push_back
>5834	Identifier	push_back
>5835	Identifier	ingredientData
>5836	IfStatement	if ( ! effects . empty ( ) )
>5837	CompoundStatement	 
>5838	IfStatement	if ( p1 != std 
>5839	CompoundStatement	 
>5840	WhileStatement	while ( fxLine >> bit )
>5841	CompoundStatement	 
>5842	ExpressionStatement	 
>5843	CallExpression	data -> effects . push_back ( fx )
>5844	ArgumentList	fx
>5845	Argument	fx
>5846	Identifier	fx
>5847	Callee	data -> effects . push_back
>5848	MemberAccess	data -> effects . push_back
>5849	Identifier	push_back
>5850	PtrMemberAccess	data -> effects
>5851	Identifier	effects
>5852	Identifier	data
>5853	WhileStatement	while ( c < bit . size ( ) )
>5854	CompoundStatement	 
>5855	ExpressionStatement	 
>5856	IncDecOp	c ++
>5857	IncDec	++
>5858	Identifier	c
>5859	IfStatement	if ( bit [ c ] == '+' )
>5860	ElseStatement	else
>5861	IfStatement	if ( bit [ c ] == '-' )
>5862	ElseStatement	else
>5863	IfStatement	if ( bit [ c ] == '~' )
>5864	ExpressionStatement	 
>5865	AssignmentExpr	fx . magnitude += 0.1f
>5866	PrimaryExpression	0.1f
>5867	MemberAccess	fx . magnitude
>5868	Identifier	magnitude
>5869	Identifier	fx
>5870	Condition	 
>5871	EqualityExpression	bit [ c ] == '~'
>5872	PrimaryExpression	'~'
>5873	ArrayIndexing	bit [ c ]
>5874	Identifier	c
>5875	Identifier	bit
>5876	ExpressionStatement	 
>5877	AssignmentExpr	fx . magnitude -= 1
>5878	PrimaryExpression	1
>5879	MemberAccess	fx . magnitude
>5880	Identifier	magnitude
>5881	Identifier	fx
>5882	Condition	 
>5883	EqualityExpression	bit [ c ] == '-'
>5884	PrimaryExpression	'-'
>5885	ArrayIndexing	bit [ c ]
>5886	Identifier	c
>5887	Identifier	bit
>5888	ExpressionStatement	 
>5889	AssignmentExpr	fx . magnitude += 1
>5890	PrimaryExpression	1
>5891	MemberAccess	fx . magnitude
>5892	Identifier	magnitude
>5893	Identifier	fx
>5894	Condition	 
>5895	EqualityExpression	bit [ c ] == '+'
>5896	PrimaryExpression	'+'
>5897	ArrayIndexing	bit [ c ]
>5898	Identifier	c
>5899	Identifier	bit
>5900	Condition	 
>5901	RelationalExpression	c < bit . size ( )
>5902	CallExpression	bit . size ( )
>5903	ArgumentList	 
>5904	Callee	bit . size
>5905	MemberAccess	bit . size
>5906	Identifier	size
>5907	Identifier	bit
>5908	Identifier	c
>5909	IdentifierDeclStatement	 
>5910	IdentifierDecl	c = 0
>5911	AssignmentExpr	c = 0
>5912	PrimaryExpression	0
>5913	Identifier	c
>5914	Identifier	c
>5915	IdentifierDeclType	int
>5916	IfStatement	if ( bit . find ( \"eat
>5917	ElseStatement	else
>5918	IfStatement	if ( bit . find ( \"yum\" ) != std 
>5919	ElseStatement	else
>5920	IfStatement	if ( bit . find ( \"petpower\" ) != std 
>5921	ElseStatement	else
>5922	IfStatement	if ( bit . find ( \"web\" ) != std 
>5923	ElseStatement	else
>5924	IfStatement	if ( bit . find ( \"energy\" ) != std 
>5925	ElseStatement	else
>5926	IfStatement	if ( bit . find ( \"poison\" ) != std 
>5927	ElseStatement	else
>5928	IfStatement	if ( bit . find ( \"blind\" ) != std 
>5929	ElseStatement	else
>5930	IfStatement	if ( bit . find ( \"allstatus\" ) != std 
>5931	ElseStatement	else
>5932	IfStatement	if ( bit . find ( \"maxhp\" ) != std 
>5933	ElseStatement	else
>5934	IfStatement	if ( bit . find ( \"invincible\" ) != std 
>5935	ElseStatement	else
>5936	IfStatement	if ( bit . find ( \"trip\" ) != std 
>5937	ElseStatement	else
>5938	IfStatement	if ( bit . find ( \"defense\" ) != std 
>5939	ElseStatement	else
>5940	IfStatement	if ( bit . find ( \"speed\" ) != std 
>5941	ElseStatement	else
>5942	IfStatement	if ( bit . find ( \"random\" ) != std 
>5943	ElseStatement	else
>5944	IfStatement	if ( bit . find ( \"bite\" ) != std 
>5945	ElseStatement	else
>5946	IfStatement	if ( bit . find ( \"fishPoison\" ) != std 
>5947	ElseStatement	else
>5948	IfStatement	if ( bit . find ( \"regen\" ) != std 
>5949	ElseStatement	else
>5950	IfStatement	if ( bit . find ( \"light\" ) != std 
>5951	ElseStatement	else
>5952	IfStatement	if ( bit . find ( \"hp\" ) != std 
>5953	ElseStatement	else
>5954	IfStatement	if ( bit . find ( \"li\" ) != std 
>5955	ElseStatement	else
>5956	IfStatement	if ( bit . find ( \"script\" ) != std 
>5957	CompoundStatement	 
>5958	ExpressionStatement	 
>5959	AssignmentExpr	fx . type = IET_SCRIPT
>5960	Identifier	IET_SCRIPT
>5961	MemberAccess	fx . type
>5962	Identifier	type
>5963	Identifier	fx
>5964	Condition	 
>5965	EqualityExpression	bit . find ( \"script\" ) != std 
>5966	Identifier	std 
>5967	CallExpression	bit . find ( \"script\" )
>5968	ArgumentList	\"script\"
>5969	Argument	\"script\"
>5970	PrimaryExpression	\"script\"
>5971	Callee	bit . find
>5972	MemberAccess	bit . find
>5973	Identifier	find
>5974	Identifier	bit
>5975	CompoundStatement	 
>5976	ExpressionStatement	 
>5977	AssignmentExpr	fx . type = IET_LI
>5978	Identifier	IET_LI
>5979	MemberAccess	fx . type
>5980	Identifier	type
>5981	Identifier	fx
>5982	Condition	 
>5983	EqualityExpression	bit . find ( \"li\" ) != std 
>5984	Identifier	std 
>5985	CallExpression	bit . find ( \"li\" )
>5986	ArgumentList	\"li\"
>5987	Argument	\"li\"
>5988	PrimaryExpression	\"li\"
>5989	Callee	bit . find
>5990	MemberAccess	bit . find
>5991	Identifier	find
>5992	Identifier	bit
>5993	CompoundStatement	 
>5994	ExpressionStatement	 
>5995	AssignmentExpr	fx . type = IET_HP
>5996	Identifier	IET_HP
>5997	MemberAccess	fx . type
>5998	Identifier	type
>5999	Identifier	fx
>6000	Condition	 
>6001	EqualityExpression	bit . find ( \"hp\" ) != std 
>6002	Identifier	std 
>6003	CallExpression	bit . find ( \"hp\" )
>6004	ArgumentList	\"hp\"
>6005	Argument	\"hp\"
>6006	PrimaryExpression	\"hp\"
>6007	Callee	bit . find
>6008	MemberAccess	bit . find
>6009	Identifier	find
>6010	Identifier	bit
>6011	CompoundStatement	 
>6012	ExpressionStatement	 
>6013	AssignmentExpr	fx . type = IET_LIGHT
>6014	Identifier	IET_LIGHT
>6015	MemberAccess	fx . type
>6016	Identifier	type
>6017	Identifier	fx
>6018	Condition	 
>6019	EqualityExpression	bit . find ( \"light\" ) != std 
>6020	Identifier	std 
>6021	CallExpression	bit . find ( \"light\" )
>6022	ArgumentList	\"light\"
>6023	Argument	\"light\"
>6024	PrimaryExpression	\"light\"
>6025	Callee	bit . find
>6026	MemberAccess	bit . find
>6027	Identifier	find
>6028	Identifier	bit
>6029	CompoundStatement	 
>6030	ExpressionStatement	 
>6031	AssignmentExpr	fx . type = IET_REGEN
>6032	Identifier	IET_REGEN
>6033	MemberAccess	fx . type
>6034	Identifier	type
>6035	Identifier	fx
>6036	Condition	 
>6037	EqualityExpression	bit . find ( \"regen\" ) != std 
>6038	Identifier	std 
>6039	CallExpression	bit . find ( \"regen\" )
>6040	ArgumentList	\"regen\"
>6041	Argument	\"regen\"
>6042	PrimaryExpression	\"regen\"
>6043	Callee	bit . find
>6044	MemberAccess	bit . find
>6045	Identifier	find
>6046	Identifier	bit
>6047	CompoundStatement	 
>6048	ExpressionStatement	 
>6049	AssignmentExpr	fx . type = IET_FISHPOISON
>6050	Identifier	IET_FISHPOISON
>6051	MemberAccess	fx . type
>6052	Identifier	type
>6053	Identifier	fx
>6054	Condition	 
>6055	EqualityExpression	bit . find ( \"fishPoison\" ) != std 
>6056	Identifier	std 
>6057	CallExpression	bit . find ( \"fishPoison\" )
>6058	ArgumentList	\"fishPoison\"
>6059	Argument	\"fishPoison\"
>6060	PrimaryExpression	\"fishPoison\"
>6061	Callee	bit . find
>6062	MemberAccess	bit . find
>6063	Identifier	find
>6064	Identifier	bit
>6065	CompoundStatement	 
>6066	ExpressionStatement	 
>6067	AssignmentExpr	fx . type = IET_BITE
>6068	Identifier	IET_BITE
>6069	MemberAccess	fx . type
>6070	Identifier	type
>6071	Identifier	fx
>6072	Condition	 
>6073	EqualityExpression	bit . find ( \"bite\" ) != std 
>6074	Identifier	std 
>6075	CallExpression	bit . find ( \"bite\" )
>6076	ArgumentList	\"bite\"
>6077	Argument	\"bite\"
>6078	PrimaryExpression	\"bite\"
>6079	Callee	bit . find
>6080	MemberAccess	bit . find
>6081	Identifier	find
>6082	Identifier	bit
>6083	CompoundStatement	 
>6084	ExpressionStatement	 
>6085	AssignmentExpr	fx . type = IET_RANDOM
>6086	Identifier	IET_RANDOM
>6087	MemberAccess	fx . type
>6088	Identifier	type
>6089	Identifier	fx
>6090	Condition	 
>6091	EqualityExpression	bit . find ( \"random\" ) != std 
>6092	Identifier	std 
>6093	CallExpression	bit . find ( \"random\" )
>6094	ArgumentList	\"random\"
>6095	Argument	\"random\"
>6096	PrimaryExpression	\"random\"
>6097	Callee	bit . find
>6098	MemberAccess	bit . find
>6099	Identifier	find
>6100	Identifier	bit
>6101	CompoundStatement	 
>6102	ExpressionStatement	 
>6103	AssignmentExpr	fx . type = IET_SPEED
>6104	Identifier	IET_SPEED
>6105	MemberAccess	fx . type
>6106	Identifier	type
>6107	Identifier	fx
>6108	Condition	 
>6109	EqualityExpression	bit . find ( \"speed\" ) != std 
>6110	Identifier	std 
>6111	CallExpression	bit . find ( \"speed\" )
>6112	ArgumentList	\"speed\"
>6113	Argument	\"speed\"
>6114	PrimaryExpression	\"speed\"
>6115	Callee	bit . find
>6116	MemberAccess	bit . find
>6117	Identifier	find
>6118	Identifier	bit
>6119	CompoundStatement	 
>6120	ExpressionStatement	 
>6121	AssignmentExpr	fx . type = IET_DEFENSE
>6122	Identifier	IET_DEFENSE
>6123	MemberAccess	fx . type
>6124	Identifier	type
>6125	Identifier	fx
>6126	Condition	 
>6127	EqualityExpression	bit . find ( \"defense\" ) != std 
>6128	Identifier	std 
>6129	CallExpression	bit . find ( \"defense\" )
>6130	ArgumentList	\"defense\"
>6131	Argument	\"defense\"
>6132	PrimaryExpression	\"defense\"
>6133	Callee	bit . find
>6134	MemberAccess	bit . find
>6135	Identifier	find
>6136	Identifier	bit
>6137	CompoundStatement	 
>6138	ExpressionStatement	 
>6139	AssignmentExpr	fx . type = IET_TRIP
>6140	Identifier	IET_TRIP
>6141	MemberAccess	fx . type
>6142	Identifier	type
>6143	Identifier	fx
>6144	Condition	 
>6145	EqualityExpression	bit . find ( \"trip\" ) != std 
>6146	Identifier	std 
>6147	CallExpression	bit . find ( \"trip\" )
>6148	ArgumentList	\"trip\"
>6149	Argument	\"trip\"
>6150	PrimaryExpression	\"trip\"
>6151	Callee	bit . find
>6152	MemberAccess	bit . find
>6153	Identifier	find
>6154	Identifier	bit
>6155	CompoundStatement	 
>6156	ExpressionStatement	 
>6157	AssignmentExpr	fx . type = IET_INVINCIBLE
>6158	Identifier	IET_INVINCIBLE
>6159	MemberAccess	fx . type
>6160	Identifier	type
>6161	Identifier	fx
>6162	Condition	 
>6163	EqualityExpression	bit . find ( \"invincible\" ) != std 
>6164	Identifier	std 
>6165	CallExpression	bit . find ( \"invincible\" )
>6166	ArgumentList	\"invincible\"
>6167	Argument	\"invincible\"
>6168	PrimaryExpression	\"invincible\"
>6169	Callee	bit . find
>6170	MemberAccess	bit . find
>6171	Identifier	find
>6172	Identifier	bit
>6173	CompoundStatement	 
>6174	ExpressionStatement	 
>6175	AssignmentExpr	fx . type = IET_MAXHP
>6176	Identifier	IET_MAXHP
>6177	MemberAccess	fx . type
>6178	Identifier	type
>6179	Identifier	fx
>6180	Condition	 
>6181	EqualityExpression	bit . find ( \"maxhp\" ) != std 
>6182	Identifier	std 
>6183	CallExpression	bit . find ( \"maxhp\" )
>6184	ArgumentList	\"maxhp\"
>6185	Argument	\"maxhp\"
>6186	PrimaryExpression	\"maxhp\"
>6187	Callee	bit . find
>6188	MemberAccess	bit . find
>6189	Identifier	find
>6190	Identifier	bit
>6191	CompoundStatement	 
>6192	ExpressionStatement	 
>6193	AssignmentExpr	fx . type = IET_ALLSTATUS
>6194	Identifier	IET_ALLSTATUS
>6195	MemberAccess	fx . type
>6196	Identifier	type
>6197	Identifier	fx
>6198	Condition	 
>6199	EqualityExpression	bit . find ( \"allstatus\" ) != std 
>6200	Identifier	std 
>6201	CallExpression	bit . find ( \"allstatus\" )
>6202	ArgumentList	\"allstatus\"
>6203	Argument	\"allstatus\"
>6204	PrimaryExpression	\"allstatus\"
>6205	Callee	bit . find
>6206	MemberAccess	bit . find
>6207	Identifier	find
>6208	Identifier	bit
>6209	CompoundStatement	 
>6210	ExpressionStatement	 
>6211	AssignmentExpr	fx . type = IET_BLIND
>6212	Identifier	IET_BLIND
>6213	MemberAccess	fx . type
>6214	Identifier	type
>6215	Identifier	fx
>6216	Condition	 
>6217	EqualityExpression	bit . find ( \"blind\" ) != std 
>6218	Identifier	std 
>6219	CallExpression	bit . find ( \"blind\" )
>6220	ArgumentList	\"blind\"
>6221	Argument	\"blind\"
>6222	PrimaryExpression	\"blind\"
>6223	Callee	bit . find
>6224	MemberAccess	bit . find
>6225	Identifier	find
>6226	Identifier	bit
>6227	CompoundStatement	 
>6228	ExpressionStatement	 
>6229	AssignmentExpr	fx . type = IET_POISON
>6230	Identifier	IET_POISON
>6231	MemberAccess	fx . type
>6232	Identifier	type
>6233	Identifier	fx
>6234	Condition	 
>6235	EqualityExpression	bit . find ( \"poison\" ) != std 
>6236	Identifier	std 
>6237	CallExpression	bit . find ( \"poison\" )
>6238	ArgumentList	\"poison\"
>6239	Argument	\"poison\"
>6240	PrimaryExpression	\"poison\"
>6241	Callee	bit . find
>6242	MemberAccess	bit . find
>6243	Identifier	find
>6244	Identifier	bit
>6245	CompoundStatement	 
>6246	ExpressionStatement	 
>6247	AssignmentExpr	fx . type = IET_ENERGY
>6248	Identifier	IET_ENERGY
>6249	MemberAccess	fx . type
>6250	Identifier	type
>6251	Identifier	fx
>6252	Condition	 
>6253	EqualityExpression	bit . find ( \"energy\" ) != std 
>6254	Identifier	std 
>6255	CallExpression	bit . find ( \"energy\" )
>6256	ArgumentList	\"energy\"
>6257	Argument	\"energy\"
>6258	PrimaryExpression	\"energy\"
>6259	Callee	bit . find
>6260	MemberAccess	bit . find
>6261	Identifier	find
>6262	Identifier	bit
>6263	CompoundStatement	 
>6264	ExpressionStatement	 
>6265	AssignmentExpr	fx . type = IET_WEB
>6266	Identifier	IET_WEB
>6267	MemberAccess	fx . type
>6268	Identifier	type
>6269	Identifier	fx
>6270	Condition	 
>6271	EqualityExpression	bit . find ( \"web\" ) != std 
>6272	Identifier	std 
>6273	CallExpression	bit . find ( \"web\" )
>6274	ArgumentList	\"web\"
>6275	Argument	\"web\"
>6276	PrimaryExpression	\"web\"
>6277	Callee	bit . find
>6278	MemberAccess	bit . find
>6279	Identifier	find
>6280	Identifier	bit
>6281	CompoundStatement	 
>6282	ExpressionStatement	 
>6283	AssignmentExpr	fx . type = IET_PETPOWER
>6284	Identifier	IET_PETPOWER
>6285	MemberAccess	fx . type
>6286	Identifier	type
>6287	Identifier	fx
>6288	Condition	 
>6289	EqualityExpression	bit . find ( \"petpower\" ) != std 
>6290	Identifier	std 
>6291	CallExpression	bit . find ( \"petpower\" )
>6292	ArgumentList	\"petpower\"
>6293	Argument	\"petpower\"
>6294	PrimaryExpression	\"petpower\"
>6295	Callee	bit . find
>6296	MemberAccess	bit . find
>6297	Identifier	find
>6298	Identifier	bit
>6299	CompoundStatement	 
>6300	ExpressionStatement	 
>6301	AssignmentExpr	fx . type = IET_YUM
>6302	Identifier	IET_YUM
>6303	MemberAccess	fx . type
>6304	Identifier	type
>6305	Identifier	fx
>6306	Condition	 
>6307	EqualityExpression	bit . find ( \"yum\" ) != std 
>6308	Identifier	std 
>6309	CallExpression	bit . find ( \"yum\" )
>6310	ArgumentList	\"yum\"
>6311	Argument	\"yum\"
>6312	PrimaryExpression	\"yum\"
>6313	Callee	bit . find
>6314	MemberAccess	bit . find
>6315	Identifier	find
>6316	Identifier	bit
>6317	CompoundStatement	 
>6318	ExpressionStatement	 
>6319	AssignmentExpr	fx . type = IET_EAT
>6320	Identifier	IET_EAT
>6321	MemberAccess	fx . type
>6322	Identifier	type
>6323	Identifier	fx
>6324	ExpressionStatement	 
>6325	AssignmentExpr	fx . string = bit . substr ( pos , bit . size ( ) - pos )
>6326	CallExpression	bit . substr ( pos , bit . size ( ) - pos )
>6327	ArgumentList	pos
>6328	Argument	bit . size ( ) - pos
>6329	AdditiveExpression	bit . size ( ) - pos
>6330	Identifier	pos
>6331	CallExpression	bit . size ( )
>6332	ArgumentList	 
>6333	Callee	bit . size
>6334	MemberAccess	bit . size
>6335	Identifier	size
>6336	Identifier	bit
>6337	Argument	pos
>6338	Identifier	pos
>6339	Callee	bit . substr
>6340	MemberAccess	bit . substr
>6341	Identifier	substr
>6342	Identifier	bit
>6343	MemberAccess	fx . string
>6344	Identifier	string
>6345	Identifier	fx
>6346	IdentifierDeclStatement	 
>6347	IdentifierDecl	pos = bit . find ( '
>6348	AssignmentExpr	pos = bit . find ( '
>6349	AdditiveExpression	bit . find ( '
>6350	PrimaryExpression	1
>6351	CallExpression	bit . find ( '
>6352	ArgumentList	'
>6353	Argument	'
>6354	PrimaryExpression	'
>6355	Callee	bit . find
>6356	MemberAccess	bit . find
>6357	Identifier	find
>6358	Identifier	bit
>6359	Identifier	pos
>6360	Identifier	pos
>6361	IdentifierDeclType	int
>6362	Condition	 
>6363	EqualityExpression	bit . find ( \"eat
>6364	Identifier	std 
>6365	CallExpression	bit . find ( \"eat
>6366	ArgumentList	\"eat
>6367	Argument	\"eat
>6368	PrimaryExpression	\"eat
>6369	Callee	bit . find
>6370	MemberAccess	bit . find
>6371	Identifier	find
>6372	Identifier	bit
>6373	IdentifierDeclStatement	 
>6374	IdentifierDecl	fx
>6375	Identifier	fx
>6376	IdentifierDeclType	IngredientEffect
>6377	Condition	 
>6378	ShiftExpression	fxLine >> bit
>6379	Identifier	bit
>6380	Identifier	fxLine
>6381	IdentifierDeclStatement	 
>6382	IdentifierDecl	bit
>6383	Identifier	bit
>6384	IdentifierDeclType	std 
>6385	IdentifierDeclStatement	 
>6386	IdentifierDecl	fxLine ( effects )
>6387	Identifier	effects
>6388	Identifier	fxLine
>6389	IdentifierDeclType	std 
>6390	ExpressionStatement	 
>6391	AssignmentExpr	effects = effects . substr ( p1 + 1 , p2 - ( p1 + 1 ) )
>6392	CallExpression	effects . substr ( p1 + 1 , p2 - ( p1 + 1 ) )
>6393	ArgumentList	p1 + 1
>6394	Argument	p2 - ( p1 + 1 )
>6395	AdditiveExpression	p2 - ( p1 + 1 )
>6396	AdditiveExpression	p1 + 1
>6397	PrimaryExpression	1
>6398	Identifier	p1
>6399	Identifier	p2
>6400	Argument	p1 + 1
>6401	AdditiveExpression	p1 + 1
>6402	PrimaryExpression	1
>6403	Identifier	p1
>6404	Callee	effects . substr
>6405	MemberAccess	effects . substr
>6406	Identifier	substr
>6407	Identifier	effects
>6408	Identifier	effects
>6409	Condition	 
>6410	AndExpression	p1 != std 
>6411	EqualityExpression	p2 != std 
>6412	Identifier	std 
>6413	Identifier	p2
>6414	EqualityExpression	p1 != std 
>6415	Identifier	std 
>6416	Identifier	p1
>6417	IdentifierDeclStatement	 
>6418	IdentifierDecl	p2 = effects . find ( \")\" )
>6419	AssignmentExpr	p2 = effects . find ( \")\" )
>6420	CallExpression	effects . find ( \")\" )
>6421	ArgumentList	\")\"
>6422	Argument	\")\"
>6423	PrimaryExpression	\")\"
>6424	Callee	effects . find
>6425	MemberAccess	effects . find
>6426	Identifier	find
>6427	Identifier	effects
>6428	Identifier	p2
>6429	Identifier	p2
>6430	IdentifierDeclType	int
>6431	IdentifierDeclStatement	 
>6432	IdentifierDecl	p1 = effects . find ( \"(\" )
>6433	AssignmentExpr	p1 = effects . find ( \"(\" )
>6434	CallExpression	effects . find ( \"(\" )
>6435	ArgumentList	\"(\"
>6436	Argument	\"(\"
>6437	PrimaryExpression	\"(\"
>6438	Callee	effects . find
>6439	MemberAccess	effects . find
>6440	Identifier	find
>6441	Identifier	effects
>6442	Identifier	p1
>6443	Identifier	p1
>6444	IdentifierDeclType	int
>6445	Condition	 
>6446	UnaryOp	! effects . empty ( )
>6447	CallExpression	effects . empty ( )
>6448	ArgumentList	 
>6449	Callee	effects . empty
>6450	MemberAccess	effects . empty
>6451	Identifier	empty
>6452	Identifier	effects
>6453	UnaryOperator	!
>6454	IdentifierDeclStatement	 
>6455	IdentifierDecl	* data = new IngredientData ( name , gfx , getIngredientTypeFromName ( type ) )
>6456	AssignmentExpr	* data = new IngredientData ( name , gfx , getIngredientTypeFromName ( type ) )
>6457	Expression	name , gfx , getIngredientTypeFromName ( type )
>6458	Expression	gfx , getIngredientTypeFromName ( type )
>6459	CallExpression	getIngredientTypeFromName ( type )
>6460	ArgumentList	type
>6461	Argument	type
>6462	Identifier	type
>6463	Callee	getIngredientTypeFromName
>6464	Identifier	getIngredientTypeFromName
>6465	Identifier	gfx
>6466	Identifier	name
>6467	Identifier	data
>6468	Identifier	data
>6469	IdentifierDeclType	IngredientData *
>6470	ExpressionStatement	 
>6471	CallExpression	std 
>6472	ArgumentList	inLine
>6473	Argument	effects
>6474	Identifier	effects
>6475	Argument	inLine
>6476	Identifier	inLine
>6477	Callee	std 
>6478	Identifier	std 
>6479	ExpressionStatement	 
>6480	ShiftExpression	inLine >> gfx >> type
>6481	ShiftExpression	gfx >> type
>6482	Identifier	type
>6483	Identifier	gfx
>6484	Identifier	inLine
>6485	IfStatement	if ( name == \"==Recipes==\" )
>6486	ElseStatement	else
>6487	IfStatement	if ( name == \"==Extra==\" )
>6488	CompoundStatement	 
>6489	BreakStatement	 
>6490	ExpressionStatement	 
>6491	AssignmentExpr	extradata = true
>6492	Identifier	true
>6493	Identifier	extradata
>6494	Condition	 
>6495	EqualityExpression	name == \"==Extra==\"
>6496	PrimaryExpression	\"==Extra==\"
>6497	Identifier	name
>6498	CompoundStatement	 
>6499	BreakStatement	 
>6500	ExpressionStatement	 
>6501	AssignmentExpr	recipes = true
>6502	Identifier	true
>6503	Identifier	recipes
>6504	Condition	 
>6505	EqualityExpression	name == \"==Recipes==\"
>6506	PrimaryExpression	\"==Recipes==\"
>6507	Identifier	name
>6508	ExpressionStatement	 
>6509	ShiftExpression	inLine >> name
>6510	Identifier	name
>6511	Identifier	inLine
>6512	IdentifierDeclStatement	 
>6513	IdentifierDecl	inLine ( line )
>6514	Identifier	line
>6515	Identifier	inLine
>6516	IdentifierDeclType	std 
>6517	Condition	 
>6518	CallExpression	std 
>6519	ArgumentList	in
>6520	Argument	line
>6521	Identifier	line
>6522	Argument	in
>6523	Identifier	in
>6524	Callee	std 
>6525	Identifier	std 
>6526	IdentifierDeclStatement	 
>6527	IdentifierDecl	extradata = false
>6528	AssignmentExpr	extradata = false
>6529	Identifier	false
>6530	Identifier	false
>6531	Identifier	extradata
>6532	IdentifierDeclType	bool
>6533	IdentifierDeclStatement	 
>6534	IdentifierDecl	recipes = false
>6535	AssignmentExpr	recipes = false
>6536	Identifier	false
>6537	Identifier	false
>6538	Identifier	recipes
>6539	IdentifierDeclType	bool
>6540	IdentifierDeclStatement	 
>6541	IdentifierDecl	in ( file . c_str ( ) )
>6542	CallExpression	file . c_str ( )
>6543	ArgumentList	 
>6544	Callee	file . c_str
>6545	MemberAccess	file . c_str
>6546	Identifier	c_str
>6547	Identifier	file
>6548	Identifier	in
>6549	IdentifierDeclType	InStream
>6550	ExpressionStatement	 
>6551	CallExpression	recipes . clear ( )
>6552	ArgumentList	 
>6553	Callee	recipes . clear
>6554	MemberAccess	recipes . clear
>6555	Identifier	clear
>6556	Identifier	recipes
>6557	ExpressionStatement	 
>6558	CallExpression	clearIngredientData ( )
>6559	ArgumentList	 
>6560	Callee	clearIngredientData
>6561	Identifier	clearIngredientData
>6562	IdentifierDeclStatement	 
>6563	IdentifierDecl	effects
>6564	Identifier	effects
>6565	IdentifierDeclType	std 
>6566	IdentifierDecl	type
>6567	Identifier	type
>6568	IdentifierDeclType	std 
>6569	IdentifierDecl	gfx
>6570	Identifier	gfx
>6571	IdentifierDeclType	std 
>6572	IdentifierDecl	name
>6573	Identifier	name
>6574	IdentifierDeclType	std 
>6575	IdentifierDecl	line
>6576	Identifier	line
>6577	IdentifierDeclType	std 
>6657	FunctionDef	Continuity 
>6658	ParameterList	const std 
>6659	Parameter	 
>6660	Identifier	file
>6661	ParameterType	const std 
>6662	ReturnType	void
>6663	CompoundStatement	 
>6664	WhileStatement	while ( std 
>6665	CompoundStatement	 
>6666	ExpressionStatement	 
>6667	AssignmentExpr	ingredientDisplayNames [ name ] = text
>6668	Identifier	text
>6669	ArrayIndexing	ingredientDisplayNames [ name ]
>6670	Identifier	name
>6671	Identifier	ingredientDisplayNames
>6672	ExpressionStatement	 
>6673	AssignmentExpr	text = line . substr ( pos + 1 )
>6674	CallExpression	line . substr ( pos + 1 )
>6675	ArgumentList	pos + 1
>6676	Argument	pos + 1
>6677	AdditiveExpression	pos + 1
>6678	PrimaryExpression	1
>6679	Identifier	pos
>6680	Callee	line . substr
>6681	MemberAccess	line . substr
>6682	Identifier	substr
>6683	Identifier	line
>6684	Identifier	text
>6685	ExpressionStatement	 
>6686	AssignmentExpr	name = line . substr ( 0 , pos )
>6687	CallExpression	line . substr ( 0 , pos )
>6688	ArgumentList	0
>6689	Argument	pos
>6690	Identifier	pos
>6691	Argument	0
>6692	PrimaryExpression	0
>6693	Callee	line . substr
>6694	MemberAccess	line . substr
>6695	Identifier	substr
>6696	Identifier	line
>6697	Identifier	name
>6698	IfStatement	if ( pos == std 
>6699	ContinueStatement	 
>6700	Condition	 
>6701	EqualityExpression	pos == std 
>6702	Identifier	std 
>6703	Identifier	pos
>6704	IdentifierDeclStatement	 
>6705	IdentifierDecl	pos = line . find ( ' ' )
>6706	AssignmentExpr	pos = line . find ( ' ' )
>6707	CallExpression	line . find ( ' ' )
>6708	ArgumentList	' '
>6709	Argument	' '
>6710	PrimaryExpression	' '
>6711	Callee	line . find
>6712	MemberAccess	line . find
>6713	Identifier	find
>6714	Identifier	line
>6715	Identifier	pos
>6716	Identifier	pos
>6717	IdentifierDeclType	size_t
>6718	Condition	 
>6719	CallExpression	std 
>6720	ArgumentList	in
>6721	Argument	line
>6722	Identifier	line
>6723	Argument	in
>6724	Identifier	in
>6725	Callee	std 
>6726	Identifier	std 
>6727	IdentifierDeclStatement	 
>6728	IdentifierDecl	text
>6729	Identifier	text
>6730	IdentifierDeclType	std 
>6731	IdentifierDecl	name
>6732	Identifier	name
>6733	IdentifierDeclType	std 
>6734	IdentifierDecl	line
>6735	Identifier	line
>6736	IdentifierDeclType	std 
>6737	IfStatement	if ( ! in )
>6738	ReturnStatement	 
>6739	Condition	 
>6740	UnaryOp	! in
>6741	Identifier	in
>6742	UnaryOperator	!
>6743	IdentifierDeclStatement	 
>6744	IdentifierDecl	in ( file )
>6745	Identifier	file
>6746	Identifier	in
>6747	IdentifierDeclType	InStream
>6764	FunctionDef	Continuity 
>6765	ParameterList	FormUpgradeType form
>6766	Parameter	 
>6767	Identifier	form
>6768	ParameterType	FormUpgradeType
>6769	ReturnType	void
>6770	CompoundStatement	 
>6771	ExpressionStatement	 
>6772	AssignmentExpr	formUpgrades [ form ] = true
>6773	Identifier	true
>6774	ArrayIndexing	formUpgrades [ form ]
>6775	Identifier	form
>6776	Identifier	formUpgrades
>6785	FunctionDef	Continuity 
>6786	ParameterList	FormUpgradeType form
>6787	Parameter	 
>6788	Identifier	form
>6789	ParameterType	FormUpgradeType
>6790	ReturnType	bool
>6791	CompoundStatement	 
>6792	ReturnStatement	 
>6793	ArrayIndexing	formUpgrades [ form ]
>6794	Identifier	form
>6795	Identifier	formUpgrades
>6803	FunctionDef	Continuity 
>6804	ParameterList	 
>6805	ReturnType	std 
>6806	CompoundStatement	 
>6807	ReturnStatement	 
>6808	PrimaryExpression	\"\"
>6809	SwitchStatement	switch ( form )
>6810	CompoundStatement	 
>6811	ReturnStatement	 
>6812	PrimaryExpression	\"dual\"
>6813	Label	 
>6814	Identifier	FORM_DUAL
>6815	ReturnStatement	 
>6816	PrimaryExpression	\"sun\"
>6817	Label	 
>6818	Identifier	FORM_SUN
>6819	ReturnStatement	 
>6820	PrimaryExpression	\"spirit\"
>6821	Label	 
>6822	Identifier	FORM_SPIRIT
>6823	ReturnStatement	 
>6824	PrimaryExpression	\"fish\"
>6825	Label	 
>6826	Identifier	FORM_FISH
>6827	ReturnStatement	 
>6828	PrimaryExpression	\"beast\"
>6829	Label	 
>6830	Identifier	FORM_BEAST
>6831	ReturnStatement	 
>6832	PrimaryExpression	\"nature\"
>6833	Label	 
>6834	Identifier	FORM_NATURE
>6835	ReturnStatement	 
>6836	PrimaryExpression	\"energy\"
>6837	Label	 
>6838	Identifier	FORM_ENERGY
>6839	ReturnStatement	 
>6840	PrimaryExpression	\"normal\"
>6841	Label	 
>6842	Identifier	FORM_NORMAL
>6843	Condition	 
>6844	Identifier	form
>6849	FunctionDef	Continuity 
>6850	ParameterList	const std 
>6851	Parameter	 
>6852	Identifier	file
>6853	ParameterType	const std 
>6854	ReturnType	void
>6855	CompoundStatement	 
>6856	WhileStatement	while ( song )
>6857	CompoundStatement	 
>6858	ExpressionStatement	 
>6859	AssignmentExpr	song = song -> NextSiblingElement ( \"Song\" )
>6860	CallExpression	song -> NextSiblingElement ( \"Song\" )
>6861	ArgumentList	\"Song\"
>6862	Argument	\"Song\"
>6863	PrimaryExpression	\"Song\"
>6864	Callee	song -> NextSiblingElement
>6865	PtrMemberAccess	song -> NextSiblingElement
>6866	Identifier	NextSiblingElement
>6867	Identifier	song
>6868	Identifier	song
>6869	IfStatement	if ( song -> Attribute ( \"name\" ) )
>6870	CompoundStatement	 
>6871	ExpressionStatement	 
>6872	AssignmentExpr	songSlotNames [ slot ] = song -> Attribute ( \"name\" )
>6873	CallExpression	song -> Attribute ( \"name\" )
>6874	ArgumentList	\"name\"
>6875	Argument	\"name\"
>6876	PrimaryExpression	\"name\"
>6877	Callee	song -> Attribute
>6878	PtrMemberAccess	song -> Attribute
>6879	Identifier	Attribute
>6880	Identifier	song
>6881	ArrayIndexing	songSlotNames [ slot ]
>6882	Identifier	slot
>6883	Identifier	songSlotNames
>6884	Condition	 
>6885	CallExpression	song -> Attribute ( \"name\" )
>6886	ArgumentList	\"name\"
>6887	Argument	\"name\"
>6888	PrimaryExpression	\"name\"
>6889	Callee	song -> Attribute
>6890	PtrMemberAccess	song -> Attribute
>6891	Identifier	Attribute
>6892	Identifier	song
>6893	IfStatement	if ( slot != - 1 )
>6894	CompoundStatement	 
>6895	ExpressionStatement	 
>6896	AssignmentExpr	songTypesToSlot [ idx ] = slot
>6897	Identifier	slot
>6898	ArrayIndexing	songTypesToSlot [ idx ]
>6899	Identifier	idx
>6900	Identifier	songTypesToSlot
>6901	ExpressionStatement	 
>6902	AssignmentExpr	songSlotsToType [ slot ] = idx
>6903	Identifier	idx
>6904	ArrayIndexing	songSlotsToType [ slot ]
>6905	Identifier	slot
>6906	Identifier	songSlotsToType
>6907	Condition	 
>6908	EqualityExpression	slot != - 1
>6909	UnaryOp	- 1
>6910	PrimaryExpression	1
>6911	UnaryOperator	-
>6912	Identifier	slot
>6913	ExpressionStatement	 
>6914	AssignmentExpr	songBank [ idx ] = s
>6915	Identifier	s
>6916	ArrayIndexing	songBank [ idx ]
>6917	Identifier	idx
>6918	Identifier	songBank
>6919	IdentifierDeclStatement	 
>6920	IdentifierDecl	idx = atoi ( song -> Attribute ( \"idx\" ) )
>6921	AssignmentExpr	idx = atoi ( song -> Attribute ( \"idx\" ) )
>6922	CallExpression	atoi ( song -> Attribute ( \"idx\" ) )
>6923	ArgumentList	song -> Attribute ( \"idx\" )
>6924	Argument	song -> Attribute ( \"idx\" )
>6925	CallExpression	song -> Attribute ( \"idx\" )
>6926	ArgumentList	\"idx\"
>6927	Argument	\"idx\"
>6928	PrimaryExpression	\"idx\"
>6929	Callee	song -> Attribute
>6930	PtrMemberAccess	song -> Attribute
>6931	Identifier	Attribute
>6932	Identifier	song
>6933	Callee	atoi
>6934	Identifier	atoi
>6935	Identifier	idx
>6936	Identifier	idx
>6937	IdentifierDeclType	int
>6938	IfStatement	if ( song -> Attribute ( \"slot\" ) )
>6939	CompoundStatement	 
>6940	IfStatement	if ( slot != - 1 )
>6941	CompoundStatement	 
>6942	IfStatement	if ( song -> Attribute ( \"vox\" ) )
>6943	CompoundStatement	 
>6944	ExpressionStatement	 
>6945	AssignmentExpr	songSlotVox [ slot ] = song -> Attribute ( \"vox\" )
>6946	CallExpression	song -> Attribute ( \"vox\" )
>6947	ArgumentList	\"vox\"
>6948	Argument	\"vox\"
>6949	PrimaryExpression	\"vox\"
>6950	Callee	song -> Attribute
>6951	PtrMemberAccess	song -> Attribute
>6952	Identifier	Attribute
>6953	Identifier	song
>6954	ArrayIndexing	songSlotVox [ slot ]
>6955	Identifier	slot
>6956	Identifier	songSlotVox
>6957	Condition	 
>6958	CallExpression	song -> Attribute ( \"vox\" )
>6959	ArgumentList	\"vox\"
>6960	Argument	\"vox\"
>6961	PrimaryExpression	\"vox\"
>6962	Callee	song -> Attribute
>6963	PtrMemberAccess	song -> Attribute
>6964	Identifier	Attribute
>6965	Identifier	song
>6966	IfStatement	if ( song -> Attribute ( \"description\" ) )
>6967	CompoundStatement	 
>6968	ExpressionStatement	 
>6969	AssignmentExpr	songSlotDescriptions [ slot ] = song -> Attribute ( \"description\" )
>6970	CallExpression	song -> Attribute ( \"description\" )
>6971	ArgumentList	\"description\"
>6972	Argument	\"description\"
>6973	PrimaryExpression	\"description\"
>6974	Callee	song -> Attribute
>6975	PtrMemberAccess	song -> Attribute
>6976	Identifier	Attribute
>6977	Identifier	song
>6978	ArrayIndexing	songSlotDescriptions [ slot ]
>6979	Identifier	slot
>6980	Identifier	songSlotDescriptions
>6981	Condition	 
>6982	CallExpression	song -> Attribute ( \"description\" )
>6983	ArgumentList	\"description\"
>6984	Argument	\"description\"
>6985	PrimaryExpression	\"description\"
>6986	Callee	song -> Attribute
>6987	PtrMemberAccess	song -> Attribute
>6988	Identifier	Attribute
>6989	Identifier	song
>6990	Condition	 
>6991	EqualityExpression	slot != - 1
>6992	UnaryOp	- 1
>6993	PrimaryExpression	1
>6994	UnaryOperator	-
>6995	Identifier	slot
>6996	ExpressionStatement	 
>6997	AssignmentExpr	slot = atoi ( song -> Attribute ( \"slot\" ) )
>6998	CallExpression	atoi ( song -> Attribute ( \"slot\" ) )
>6999	ArgumentList	song -> Attribute ( \"slot\" )
>7000	Argument	song -> Attribute ( \"slot\" )
>7001	CallExpression	song -> Attribute ( \"slot\" )
>7002	ArgumentList	\"slot\"
>7003	Argument	\"slot\"
>7004	PrimaryExpression	\"slot\"
>7005	Callee	song -> Attribute
>7006	PtrMemberAccess	song -> Attribute
>7007	Identifier	Attribute
>7008	Identifier	song
>7009	Callee	atoi
>7010	Identifier	atoi
>7011	Identifier	slot
>7012	Condition	 
>7013	CallExpression	song -> Attribute ( \"slot\" )
>7014	ArgumentList	\"slot\"
>7015	Argument	\"slot\"
>7016	PrimaryExpression	\"slot\"
>7017	Callee	song -> Attribute
>7018	PtrMemberAccess	song -> Attribute
>7019	Identifier	Attribute
>7020	Identifier	song
>7021	IdentifierDeclStatement	 
>7022	IdentifierDecl	slot = - 1
>7023	AssignmentExpr	slot = - 1
>7024	UnaryOp	- 1
>7025	PrimaryExpression	1
>7026	UnaryOperator	-
>7027	Identifier	slot
>7028	Identifier	slot
>7029	IdentifierDeclType	int
>7030	IfStatement	if ( song -> Attribute ( \"script\" ) )
>7031	CompoundStatement	 
>7032	ExpressionStatement	 
>7033	AssignmentExpr	s . script = atoi ( song -> Attribute ( \"script\" ) )
>7034	CallExpression	atoi ( song -> Attribute ( \"script\" ) )
>7035	ArgumentList	song -> Attribute ( \"script\" )
>7036	Argument	song -> Attribute ( \"script\" )
>7037	CallExpression	song -> Attribute ( \"script\" )
>7038	ArgumentList	\"script\"
>7039	Argument	\"script\"
>7040	PrimaryExpression	\"script\"
>7041	Callee	song -> Attribute
>7042	PtrMemberAccess	song -> Attribute
>7043	Identifier	Attribute
>7044	Identifier	song
>7045	Callee	atoi
>7046	Identifier	atoi
>7047	MemberAccess	s . script
>7048	Identifier	script
>7049	Identifier	s
>7050	Condition	 
>7051	CallExpression	song -> Attribute ( \"script\" )
>7052	ArgumentList	\"script\"
>7053	Argument	\"script\"
>7054	PrimaryExpression	\"script\"
>7055	Callee	song -> Attribute
>7056	PtrMemberAccess	song -> Attribute
>7057	Identifier	Attribute
>7058	Identifier	song
>7059	IfStatement	if ( song -> Attribute ( \"notes\" ) )
>7060	CompoundStatement	 
>7061	WhileStatement	while ( is >> note )
>7062	CompoundStatement	 
>7063	ExpressionStatement	 
>7064	CallExpression	s . notes . push_back ( note )
>7065	ArgumentList	note
>7066	Argument	note
>7067	Identifier	note
>7068	Callee	s . notes . push_back
>7069	MemberAccess	s . notes . push_back
>7070	Identifier	push_back
>7071	MemberAccess	s . notes
>7072	Identifier	notes
>7073	Identifier	s
>7074	Condition	 
>7075	ShiftExpression	is >> note
>7076	Identifier	note
>7077	Identifier	is
>7078	IdentifierDeclStatement	 
>7079	IdentifierDecl	note = 0
>7080	AssignmentExpr	note = 0
>7081	PrimaryExpression	0
>7082	Identifier	note
>7083	Identifier	note
>7084	IdentifierDeclType	int
>7085	IdentifierDeclStatement	 
>7086	IdentifierDecl	is ( strng )
>7087	Identifier	strng
>7088	Identifier	is
>7089	IdentifierDeclType	std 
>7090	IdentifierDeclStatement	 
>7091	IdentifierDecl	strng = song -> Attribute ( \"notes\" )
>7092	AssignmentExpr	strng = song -> Attribute ( \"notes\" )
>7093	CallExpression	song -> Attribute ( \"notes\" )
>7094	ArgumentList	\"notes\"
>7095	Argument	\"notes\"
>7096	PrimaryExpression	\"notes\"
>7097	Callee	song -> Attribute
>7098	PtrMemberAccess	song -> Attribute
>7099	Identifier	Attribute
>7100	Identifier	song
>7101	Identifier	strng
>7102	Identifier	strng
>7103	IdentifierDeclType	std 
>7104	Condition	 
>7105	CallExpression	song -> Attribute ( \"notes\" )
>7106	ArgumentList	\"notes\"
>7107	Argument	\"notes\"
>7108	PrimaryExpression	\"notes\"
>7109	Callee	song -> Attribute
>7110	PtrMemberAccess	song -> Attribute
>7111	Identifier	Attribute
>7112	Identifier	song
>7113	IdentifierDeclStatement	 
>7114	IdentifierDecl	s
>7115	Identifier	s
>7116	IdentifierDeclType	Song
>7117	Condition	 
>7118	Identifier	song
>7119	IdentifierDeclStatement	 
>7120	IdentifierDecl	* song = doc . FirstChildElement ( \"Song\" )
>7121	AssignmentExpr	* song = doc . FirstChildElement ( \"Song\" )
>7122	CallExpression	doc . FirstChildElement ( \"Song\" )
>7123	ArgumentList	\"Song\"
>7124	Argument	\"Song\"
>7125	PrimaryExpression	\"Song\"
>7126	Callee	doc . FirstChildElement
>7127	MemberAccess	doc . FirstChildElement
>7128	Identifier	FirstChildElement
>7129	Identifier	doc
>7130	Identifier	song
>7131	Identifier	song
>7132	IdentifierDeclType	XMLElement *
>7133	IfStatement	if ( err != XML_SUCCESS )
>7134	CompoundStatement	 
>7135	ReturnStatement	 
>7136	ExpressionStatement	 
>7137	CallExpression	errorLog ( \"Failed to load song bank
>7138	ArgumentList	\"Failed to load song bank
>7139	Argument	\"Failed to load song bank
>7140	PrimaryExpression	\"Failed to load song bank
>7141	Callee	errorLog
>7142	Identifier	errorLog
>7143	Condition	 
>7144	EqualityExpression	err != XML_SUCCESS
>7145	Identifier	XML_SUCCESS
>7146	Identifier	err
>7147	IfStatement	if ( err == XML_ERROR_EMPTY_DOCUMENT )
>7148	ReturnStatement	 
>7149	Condition	 
>7150	EqualityExpression	err == XML_ERROR_EMPTY_DOCUMENT
>7151	Identifier	XML_ERROR_EMPTY_DOCUMENT
>7152	Identifier	err
>7153	IdentifierDeclStatement	 
>7154	IdentifierDecl	err = readXML ( file , doc )
>7155	AssignmentExpr	err = readXML ( file , doc )
>7156	CallExpression	readXML ( file , doc )
>7157	ArgumentList	file
>7158	Argument	doc
>7159	Identifier	doc
>7160	Argument	file
>7161	Identifier	file
>7162	Callee	readXML
>7163	Identifier	readXML
>7164	Identifier	err
>7165	Identifier	err
>7166	IdentifierDeclType	XMLError
>7167	IdentifierDeclStatement	 
>7168	IdentifierDecl	doc
>7169	Identifier	doc
>7170	IdentifierDeclType	XMLDocument
>7171	IfStatement	if ( ! exists ( file ) )
>7172	ReturnStatement	 
>7173	Condition	 
>7174	UnaryOp	! exists ( file )
>7175	CallExpression	exists ( file )
>7176	ArgumentList	file
>7177	Argument	file
>7178	Identifier	file
>7179	Callee	exists
>7180	Identifier	exists
>7181	UnaryOperator	!
>7220	FunctionDef	Continuity 
>7221	ParameterList	 
>7222	ReturnType	void
>7223	CompoundStatement	 
>7224	IfStatement	if ( dsq -> mod . isActive ( ) )
>7225	CompoundStatement	 
>7226	ExpressionStatement	 
>7227	CallExpression	loadIntoSongBank ( localisePath ( dsq -> mod . getPath ( ) + \"scripts/songs.xml\" , dsq -> mod . getPath ( ) ) )
>7228	ArgumentList	localisePath ( dsq -> mod . getPath ( ) + \"scripts/songs.xml\" , dsq -> mod . getPath ( ) )
>7229	Argument	localisePath ( dsq -> mod . getPath ( ) + \"scripts/songs.xml\" , dsq -> mod . getPath ( ) )
>7230	CallExpression	localisePath ( dsq -> mod . getPath ( ) + \"scripts/songs.xml\" , dsq -> mod . getPath ( ) )
>7231	ArgumentList	dsq -> mod . getPath ( ) + \"scripts/songs.xml\"
>7232	Argument	dsq -> mod . getPath ( )
>7233	CallExpression	dsq -> mod . getPath ( )
>7234	ArgumentList	 
>7235	Callee	dsq -> mod . getPath
>7236	MemberAccess	dsq -> mod . getPath
>7237	Identifier	getPath
>7238	PtrMemberAccess	dsq -> mod
>7239	Identifier	mod
>7240	Identifier	dsq
>7241	Argument	dsq -> mod . getPath ( ) + \"scripts/songs.xml\"
>7242	AdditiveExpression	dsq -> mod . getPath ( ) + \"scripts/songs.xml\"
>7243	PrimaryExpression	\"scripts/songs.xml\"
>7244	CallExpression	dsq -> mod . getPath ( )
>7245	ArgumentList	 
>7246	Callee	dsq -> mod . getPath
>7247	MemberAccess	dsq -> mod . getPath
>7248	Identifier	getPath
>7249	PtrMemberAccess	dsq -> mod
>7250	Identifier	mod
>7251	Identifier	dsq
>7252	Callee	localisePath
>7253	Identifier	localisePath
>7254	Callee	loadIntoSongBank
>7255	Identifier	loadIntoSongBank
>7256	Condition	 
>7257	CallExpression	dsq -> mod . isActive ( )
>7258	ArgumentList	 
>7259	Callee	dsq -> mod . isActive
>7260	MemberAccess	dsq -> mod . isActive
>7261	Identifier	isActive
>7262	PtrMemberAccess	dsq -> mod
>7263	Identifier	mod
>7264	Identifier	dsq
>7265	ExpressionStatement	 
>7266	CallExpression	loadIntoSongBank ( localisePath ( \"data/songs.xml\" ) )
>7267	ArgumentList	localisePath ( \"data/songs.xml\" )
>7268	Argument	localisePath ( \"data/songs.xml\" )
>7269	CallExpression	localisePath ( \"data/songs.xml\" )
>7270	ArgumentList	\"data/songs.xml\"
>7271	Argument	\"data/songs.xml\"
>7272	PrimaryExpression	\"data/songs.xml\"
>7273	Callee	localisePath
>7274	Identifier	localisePath
>7275	Callee	loadIntoSongBank
>7276	Identifier	loadIntoSongBank
>7277	ExpressionStatement	 
>7278	CallExpression	songBank . clear ( )
>7279	ArgumentList	 
>7280	Callee	songBank . clear
>7281	MemberAccess	songBank . clear
>7282	Identifier	clear
>7283	Identifier	songBank
>7284	ExpressionStatement	 
>7285	CallExpression	songSlotNames . clear ( )
>7286	ArgumentList	 
>7287	Callee	songSlotNames . clear
>7288	MemberAccess	songSlotNames . clear
>7289	Identifier	clear
>7290	Identifier	songSlotNames
>7291	ExpressionStatement	 
>7292	CallExpression	songTypesToSlot . clear ( )
>7293	ArgumentList	 
>7294	Callee	songTypesToSlot . clear
>7295	MemberAccess	songTypesToSlot . clear
>7296	Identifier	clear
>7297	Identifier	songTypesToSlot
>7298	ExpressionStatement	 
>7299	CallExpression	songSlotsToType . clear ( )
>7300	ArgumentList	 
>7301	Callee	songSlotsToType . clear
>7302	MemberAccess	songSlotsToType . clear
>7303	Identifier	clear
>7304	Identifier	songSlotsToType
>7305	ExpressionStatement	 
>7306	CallExpression	songSlotVox . clear ( )
>7307	ArgumentList	 
>7308	Callee	songSlotVox . clear
>7309	MemberAccess	songSlotVox . clear
>7310	Identifier	clear
>7311	Identifier	songSlotVox
>7312	ExpressionStatement	 
>7313	CallExpression	songSlotDescriptions . clear ( )
>7314	ArgumentList	 
>7315	Callee	songSlotDescriptions . clear
>7316	MemberAccess	songSlotDescriptions . clear
>7317	Identifier	clear
>7318	Identifier	songSlotDescriptions
>7334	FunctionDef	Continuity 
>7335	ParameterList	int slot
>7336	Parameter	 
>7337	Identifier	slot
>7338	ParameterType	int
>7339	ReturnType	int
>7340	CompoundStatement	 
>7341	ReturnStatement	 
>7342	ArrayIndexing	songSlotsToType [ slot ]
>7343	Identifier	slot
>7344	Identifier	songSlotsToType
>7352	FunctionDef	Continuity 
>7353	ParameterList	int type
>7354	Parameter	 
>7355	Identifier	type
>7356	ParameterType	int
>7357	ReturnType	int
>7358	CompoundStatement	 
>7359	ReturnStatement	 
>7360	ArrayIndexing	songTypesToSlot [ type ]
>7361	Identifier	type
>7362	Identifier	songTypesToSlot
>7370	FunctionDef	Continuity 
>7371	ParameterList	int songSlot
>7372	Parameter	 
>7373	Identifier	songSlot
>7374	ParameterType	int
>7375	ReturnType	std 
>7376	CompoundStatement	 
>7377	ReturnStatement	 
>7378	ArrayIndexing	songSlotDescriptions [ songSlot ]
>7379	Identifier	songSlot
>7380	Identifier	songSlotDescriptions
>7388	FunctionDef	Continuity 
>7389	ParameterList	int songSlot
>7390	Parameter	 
>7391	Identifier	songSlot
>7392	ParameterType	int
>7393	ReturnType	std 
>7394	CompoundStatement	 
>7395	ReturnStatement	 
>7396	ArrayIndexing	songSlotVox [ songSlot ]
>7397	Identifier	songSlot
>7398	Identifier	songSlotVox
>7406	FunctionDef	Continuity 
>7407	ParameterList	const std 
>7408	Parameter	 
>7409	Identifier	name
>7410	ParameterType	const std 
>7411	ReturnType	EatData *
>7412	CompoundStatement	 
>7413	ReturnStatement	 
>7414	PrimaryExpression	0
>7415	ForStatement	for ( int i = 0 ; i < eats . size ( ) ; i ++ )
>7416	CompoundStatement	 
>7417	IfStatement	if ( eats [ i ] . name == name )
>7418	ReturnStatement	 
>7419	UnaryOp	& eats [ i ]
>7420	ArrayIndexing	eats [ i ]
>7421	Identifier	i
>7422	Identifier	eats
>7423	UnaryOperator	&
>7424	Condition	 
>7425	EqualityExpression	eats [ i ] . name == name
>7426	Identifier	name
>7427	MemberAccess	eats [ i ] . name
>7428	Identifier	name
>7429	ArrayIndexing	eats [ i ]
>7430	Identifier	i
>7431	Identifier	eats
>7432	IncDecOp	 
>7433	IncDec	++
>7434	Identifier	i
>7435	Condition	 
>7436	RelationalExpression	i < eats . size ( )
>7437	CallExpression	eats . size ( )
>7438	ArgumentList	 
>7439	Callee	eats . size
>7440	MemberAccess	eats . size
>7441	Identifier	size
>7442	Identifier	eats
>7443	Identifier	i
>7444	ForInit	 
>7445	IdentifierDeclStatement	int i = 0 ;
>7446	IdentifierDecl	i = 0
>7447	AssignmentExpr	i = 0
>7448	PrimaryExpression	0
>7449	Identifier	i
>7450	Identifier	i
>7451	IdentifierDeclType	int
>7464	FunctionDef	Continuity 
>7465	ParameterList	 
>7466	ReturnType	void
>7467	CompoundStatement	 
>7468	ExpressionStatement	 
>7469	CallExpression	inf . close ( )
>7470	ArgumentList	 
>7471	Callee	inf . close
>7472	MemberAccess	inf . close
>7473	Identifier	close
>7474	Identifier	inf
>7475	WhileStatement	while ( inf >> read )
>7476	CompoundStatement	 
>7477	IfStatement	if ( read . find ( '
>7478	ElseStatement	else
>7479	CompoundStatement	 
>7480	IfStatement	if ( ! read . empty ( ) )
>7481	CompoundStatement	 
>7482	IfStatement	if ( read == \"Shot\" )
>7483	ElseStatement	else
>7484	IfStatement	if ( read == \"AmmoUnitSize\" )
>7485	ElseStatement	else
>7486	IfStatement	if ( read == \"GetUnits\" )
>7487	ElseStatement	else
>7488	IfStatement	if ( read == \"Health\" )
>7489	CompoundStatement	 
>7490	ExpressionStatement	 
>7491	ShiftExpression	is >> curData . health
>7492	MemberAccess	curData . health
>7493	Identifier	health
>7494	Identifier	curData
>7495	Identifier	is
>7496	Condition	 
>7497	EqualityExpression	read == \"Health\"
>7498	PrimaryExpression	\"Health\"
>7499	Identifier	read
>7500	CompoundStatement	 
>7501	ExpressionStatement	 
>7502	ShiftExpression	is >> curData . getUnits
>7503	MemberAccess	curData . getUnits
>7504	Identifier	getUnits
>7505	Identifier	curData
>7506	Identifier	is
>7507	Condition	 
>7508	EqualityExpression	read == \"GetUnits\"
>7509	PrimaryExpression	\"GetUnits\"
>7510	Identifier	read
>7511	CompoundStatement	 
>7512	ExpressionStatement	 
>7513	AssignmentExpr	curData . ammo = curData . ammoUnitSize
>7514	MemberAccess	curData . ammoUnitSize
>7515	Identifier	ammoUnitSize
>7516	Identifier	curData
>7517	MemberAccess	curData . ammo
>7518	Identifier	ammo
>7519	Identifier	curData
>7520	ExpressionStatement	 
>7521	ShiftExpression	is >> curData . ammoUnitSize
>7522	MemberAccess	curData . ammoUnitSize
>7523	Identifier	ammoUnitSize
>7524	Identifier	curData
>7525	Identifier	is
>7526	Condition	 
>7527	EqualityExpression	read == \"AmmoUnitSize\"
>7528	PrimaryExpression	\"AmmoUnitSize\"
>7529	Identifier	read
>7530	CompoundStatement	 
>7531	ExpressionStatement	 
>7532	ShiftExpression	is >> curData . shot
>7533	MemberAccess	curData . shot
>7534	Identifier	shot
>7535	Identifier	curData
>7536	Identifier	is
>7537	Condition	 
>7538	EqualityExpression	read == \"Shot\"
>7539	PrimaryExpression	\"Shot\"
>7540	Identifier	read
>7541	IdentifierDeclStatement	 
>7542	IdentifierDecl	is ( data )
>7543	Identifier	data
>7544	Identifier	is
>7545	IdentifierDeclType	std 
>7546	ExpressionStatement	 
>7547	CallExpression	std 
>7548	ArgumentList	inf
>7549	Argument	data
>7550	Identifier	data
>7551	Argument	inf
>7552	Identifier	inf
>7553	Callee	std 
>7554	Identifier	std 
>7555	ExpressionStatement	 
>7556	ShiftExpression	inf >> eq
>7557	Identifier	eq
>7558	Identifier	inf
>7559	IdentifierDeclStatement	 
>7560	IdentifierDecl	data
>7561	Identifier	data
>7562	IdentifierDeclType	std 
>7563	IdentifierDecl	eq
>7564	Identifier	eq
>7565	IdentifierDeclType	std 
>7566	Condition	 
>7567	UnaryOp	! read . empty ( )
>7568	CallExpression	read . empty ( )
>7569	ArgumentList	 
>7570	Callee	read . empty
>7571	MemberAccess	read . empty
>7572	Identifier	empty
>7573	Identifier	read
>7574	UnaryOperator	!
>7575	CompoundStatement	 
>7576	ExpressionStatement	 
>7577	AssignmentExpr	curData . name = name
>7578	Identifier	name
>7579	MemberAccess	curData . name
>7580	Identifier	name
>7581	Identifier	curData
>7582	ExpressionStatement	 
>7583	AssignmentExpr	curData = e
>7584	Identifier	e
>7585	Identifier	curData
>7586	IdentifierDeclStatement	 
>7587	IdentifierDecl	e
>7588	Identifier	e
>7589	IdentifierDeclType	EatData
>7590	IdentifierDeclStatement	 
>7591	IdentifierDecl	name = read . substr ( 1 , read . length ( ) )
>7592	AssignmentExpr	name = read . substr ( 1 , read . length ( ) )
>7593	CallExpression	read . substr ( 1 , read . length ( ) )
>7594	ArgumentList	1
>7595	Argument	read . length ( )
>7596	CallExpression	read . length ( )
>7597	ArgumentList	 
>7598	Callee	read . length
>7599	MemberAccess	read . length
>7600	Identifier	length
>7601	Identifier	read
>7602	Argument	1
>7603	PrimaryExpression	1
>7604	Callee	read . substr
>7605	MemberAccess	read . substr
>7606	Identifier	substr
>7607	Identifier	read
>7608	Identifier	name
>7609	Identifier	name
>7610	IdentifierDeclType	std 
>7611	IfStatement	if ( ! curData . name . empty ( ) )
>7612	CompoundStatement	 
>7613	ExpressionStatement	 
>7614	CallExpression	debugLog ( \"added eats
>7615	ArgumentList	\"added eats
>7616	Argument	\"added eats
>7617	AdditiveExpression	\"added eats
>7618	MemberAccess	curData . name
>7619	Identifier	name
>7620	Identifier	curData
>7621	PrimaryExpression	\"added eats
>7622	Callee	debugLog
>7623	Identifier	debugLog
>7624	ExpressionStatement	 
>7625	CallExpression	eats . push_back ( curData )
>7626	ArgumentList	curData
>7627	Argument	curData
>7628	Identifier	curData
>7629	Callee	eats . push_back
>7630	MemberAccess	eats . push_back
>7631	Identifier	push_back
>7632	Identifier	eats
>7633	Condition	 
>7634	UnaryOp	! curData . name . empty ( )
>7635	CallExpression	curData . name . empty ( )
>7636	ArgumentList	 
>7637	Callee	curData . name . empty
>7638	MemberAccess	curData . name . empty
>7639	Identifier	empty
>7640	MemberAccess	curData . name
>7641	Identifier	name
>7642	Identifier	curData
>7643	UnaryOperator	!
>7644	Condition	 
>7645	EqualityExpression	read . find ( '
>7646	Identifier	std 
>7647	CallExpression	read . find ( '
>7648	ArgumentList	'
>7649	Argument	'
>7650	PrimaryExpression	'
>7651	Callee	read . find
>7652	MemberAccess	read . find
>7653	Identifier	find
>7654	Identifier	read
>7655	Condition	 
>7656	ShiftExpression	inf >> read
>7657	Identifier	read
>7658	Identifier	inf
>7659	IdentifierDeclStatement	 
>7660	IdentifierDecl	read
>7661	Identifier	read
>7662	IdentifierDeclType	std 
>7663	IdentifierDeclStatement	 
>7664	IdentifierDecl	curData
>7665	Identifier	curData
>7666	IdentifierDeclType	EatData
>7667	IdentifierDeclStatement	 
>7668	IdentifierDecl	inf ( file . c_str ( ) )
>7669	CallExpression	file . c_str ( )
>7670	ArgumentList	 
>7671	Callee	file . c_str
>7672	MemberAccess	file . c_str
>7673	Identifier	c_str
>7674	Identifier	file
>7675	Identifier	inf
>7676	IdentifierDeclType	InStream
>7677	IfStatement	if ( ! found )
>7678	ExpressionStatement	 
>7679	AssignmentExpr	file = \"data/eats.txt\"
>7680	PrimaryExpression	\"data/eats.txt\"
>7681	Identifier	file
>7682	Condition	 
>7683	UnaryOp	! found
>7684	Identifier	found
>7685	UnaryOperator	!
>7686	IfStatement	if ( dsq -> mod . isActive ( ) )
>7687	CompoundStatement	 
>7688	IfStatement	if ( exists ( file ) )
>7689	ExpressionStatement	 
>7690	AssignmentExpr	found = true
>7691	Identifier	true
>7692	Identifier	found
>7693	Condition	 
>7694	CallExpression	exists ( file )
>7695	ArgumentList	file
>7696	Argument	file
>7697	Identifier	file
>7698	Callee	exists
>7699	Identifier	exists
>7700	ExpressionStatement	 
>7701	AssignmentExpr	file = dsq -> mod . getPath ( ) + \"eats.txt\"
>7702	AdditiveExpression	dsq -> mod . getPath ( ) + \"eats.txt\"
>7703	PrimaryExpression	\"eats.txt\"
>7704	CallExpression	dsq -> mod . getPath ( )
>7705	ArgumentList	 
>7706	Callee	dsq -> mod . getPath
>7707	MemberAccess	dsq -> mod . getPath
>7708	Identifier	getPath
>7709	PtrMemberAccess	dsq -> mod
>7710	Identifier	mod
>7711	Identifier	dsq
>7712	Identifier	file
>7713	Condition	 
>7714	CallExpression	dsq -> mod . isActive ( )
>7715	ArgumentList	 
>7716	Callee	dsq -> mod . isActive
>7717	MemberAccess	dsq -> mod . isActive
>7718	Identifier	isActive
>7719	PtrMemberAccess	dsq -> mod
>7720	Identifier	mod
>7721	Identifier	dsq
>7722	IdentifierDeclStatement	 
>7723	IdentifierDecl	found = false
>7724	AssignmentExpr	found = false
>7725	Identifier	false
>7726	Identifier	false
>7727	Identifier	found
>7728	IdentifierDeclType	bool
>7729	IdentifierDeclStatement	 
>7730	IdentifierDecl	file
>7731	Identifier	file
>7732	IdentifierDeclType	std 
>7733	ExpressionStatement	 
>7734	CallExpression	eats . clear ( )
>7735	ArgumentList	 
>7736	Callee	eats . clear
>7737	MemberAccess	eats . clear
>7738	Identifier	clear
>7739	Identifier	eats
>7771	FunctionDef	Continuity 
>7772	ParameterList	 
>7773	ReturnType	bool
>7774	CompoundStatement	 
>7775	ReturnStatement	 
>7776	EqualityExpression	getFlag ( FLAG_LI ) == 100
>7777	PrimaryExpression	100
>7778	CallExpression	getFlag ( FLAG_LI )
>7779	ArgumentList	FLAG_LI
>7780	Argument	FLAG_LI
>7781	Identifier	FLAG_LI
>7782	Callee	getFlag
>7783	Identifier	getFlag
>7789	FunctionDef	Continuity 
>7790	ParameterList	int slot
>7791	Parameter	 
>7792	Identifier	slot
>7793	ParameterType	int
>7794	ReturnType	std 
>7795	CompoundStatement	 
>7796	ReturnStatement	 
>7797	ArrayIndexing	songSlotNames [ slot ]
>7798	Identifier	slot
>7799	Identifier	songSlotNames
>7807	FunctionDef	Continuity 
>7808	ParameterList	bool t
>7809	Parameter	 
>7810	Identifier	t
>7811	ParameterType	bool
>7812	ReturnType	void
>7813	CompoundStatement	 
>7814	IfStatement	if ( hasLi ( ) )
>7815	CompoundStatement	 
>7816	IfStatement	if ( dsq -> game -> li )
>7817	CompoundStatement	 
>7818	ExpressionStatement	 
>7819	CallExpression	dsq -> game -> li -> message ( \"c\" , 0 )
>7820	ArgumentList	\"c\"
>7821	Argument	0
>7822	PrimaryExpression	0
>7823	Argument	\"c\"
>7824	PrimaryExpression	\"c\"
>7825	Callee	dsq -> game -> li -> message
>7826	PtrMemberAccess	dsq -> game -> li -> message
>7827	Identifier	message
>7828	PtrMemberAccess	dsq -> game -> li
>7829	Identifier	li
>7830	PtrMemberAccess	dsq -> game
>7831	Identifier	game
>7832	Identifier	dsq
>7833	Condition	 
>7834	PtrMemberAccess	dsq -> game -> li
>7835	Identifier	li
>7836	PtrMemberAccess	dsq -> game
>7837	Identifier	game
>7838	Identifier	dsq
>7839	ExpressionStatement	 
>7840	CallExpression	setFlag ( FLAG_LICOMBAT , ( int ) t )
>7841	ArgumentList	FLAG_LICOMBAT
>7842	Argument	( int ) t
>7843	CastExpression	( int ) t
>7844	Identifier	t
>7845	CastTarget	int
>7846	Argument	FLAG_LICOMBAT
>7847	Identifier	FLAG_LICOMBAT
>7848	Callee	setFlag
>7849	Identifier	setFlag
>7850	Condition	 
>7851	CallExpression	hasLi ( )
>7852	ArgumentList	 
>7853	Callee	hasLi
>7854	Identifier	hasLi
>7867	FunctionDef	Continuity 
>7868	ParameterList	 
>7869	ReturnType	void
>7870	CompoundStatement	 
>7871	IfStatement	if ( hasLi ( ) )
>7872	CompoundStatement	 
>7873	IfStatement	if ( dsq -> game && dsq -> game -> li && dsq -> game -> avatar )
>7874	ExpressionStatement	 
>7875	AssignmentExpr	dsq -> game -> li -> position = dsq -> game -> avatar -> position - Vector ( 0 , - 1 )
>7876	AdditiveExpression	dsq -> game -> avatar -> position - Vector ( 0 , - 1 )
>7877	CallExpression	Vector ( 0 , - 1 )
>7878	ArgumentList	0
>7879	Argument	- 1
>7880	UnaryOp	- 1
>7881	PrimaryExpression	1
>7882	UnaryOperator	-
>7883	Argument	0
>7884	PrimaryExpression	0
>7885	Callee	Vector
>7886	Identifier	Vector
>7887	PtrMemberAccess	dsq -> game -> avatar -> position
>7888	Identifier	position
>7889	PtrMemberAccess	dsq -> game -> avatar
>7890	Identifier	avatar
>7891	PtrMemberAccess	dsq -> game
>7892	Identifier	game
>7893	Identifier	dsq
>7894	PtrMemberAccess	dsq -> game -> li -> position
>7895	Identifier	position
>7896	PtrMemberAccess	dsq -> game -> li
>7897	Identifier	li
>7898	PtrMemberAccess	dsq -> game
>7899	Identifier	game
>7900	Identifier	dsq
>7901	Condition	 
>7902	AndExpression	dsq -> game && dsq -> game -> li && dsq -> game -> avatar
>7903	AndExpression	dsq -> game -> li && dsq -> game -> avatar
>7904	PtrMemberAccess	dsq -> game -> avatar
>7905	Identifier	avatar
>7906	PtrMemberAccess	dsq -> game
>7907	Identifier	game
>7908	Identifier	dsq
>7909	PtrMemberAccess	dsq -> game -> li
>7910	Identifier	li
>7911	PtrMemberAccess	dsq -> game
>7912	Identifier	game
>7913	Identifier	dsq
>7914	PtrMemberAccess	dsq -> game
>7915	Identifier	game
>7916	Identifier	dsq
>7917	Condition	 
>7918	CallExpression	hasLi ( )
>7919	ArgumentList	 
>7920	Callee	hasLi
>7921	Identifier	hasLi
>7940	FunctionDef	Continuity 
>7941	ParameterList	int idx
>7942	Parameter	 
>7943	Identifier	idx
>7944	ParameterType	int
>7945	ReturnType	Song *
>7946	CompoundStatement	 
>7947	ReturnStatement	 
>7948	UnaryOp	& songBank [ idx ]
>7949	ArrayIndexing	songBank [ idx ]
>7950	Identifier	idx
>7951	Identifier	songBank
>7952	UnaryOperator	&
>7960	FunctionDef	Continuity 
>7961	ParameterList	int num
>7962	Parameter	 
>7963	Identifier	num
>7964	ParameterType	int
>7965	ReturnType	void
>7966	CompoundStatement	 
>7967	ForStatement	for ( int i = 0 ; i < dsq -> game -> getNumPaths ( ) ; i ++ )
>7968	CompoundStatement	 
>7969	IfStatement	if ( p && ! p -> nodes . empty ( ) )
>7970	CompoundStatement	 
>7971	IfStatement	if ( ( n -> position - dsq -> game -> avatar -> position ) . isLength2DIn ( 1000 ) )
>7972	CompoundStatement	 
>7973	ExpressionStatement	 
>7974	CallExpression	p -> song ( ( SongType ) num )
>7975	ArgumentList	( SongType ) num
>7976	Argument	( SongType ) num
>7977	CastExpression	( SongType ) num
>7978	Identifier	num
>7979	CastTarget	SongType
>7980	Callee	p -> song
>7981	PtrMemberAccess	p -> song
>7982	Identifier	song
>7983	Identifier	p
>7984	Condition	 
>7985	CallExpression	( n -> position - dsq -> game -> avatar -> position ) . isLength2DIn ( 1000 )
>7986	ArgumentList	1000
>7987	Argument	1000
>7988	PrimaryExpression	1000
>7989	Callee	( n -> position - dsq -> game -> avatar -> position ) . isLength2DIn
>7990	MemberAccess	( n -> position - dsq -> game -> avatar -> position ) . isLength2DIn
>7991	Identifier	isLength2DIn
>7992	AdditiveExpression	n -> position - dsq -> game -> avatar -> position
>7993	PtrMemberAccess	dsq -> game -> avatar -> position
>7994	Identifier	position
>7995	PtrMemberAccess	dsq -> game -> avatar
>7996	Identifier	avatar
>7997	PtrMemberAccess	dsq -> game
>7998	Identifier	game
>7999	Identifier	dsq
>8000	PtrMemberAccess	n -> position
>8001	Identifier	position
>8002	Identifier	n
>8003	IdentifierDeclStatement	 
>8004	IdentifierDecl	* n = & p -> nodes [ 0 ]
>8005	AssignmentExpr	* n = & p -> nodes [ 0 ]
>8006	UnaryOp	& p -> nodes [ 0 ]
>8007	ArrayIndexing	p -> nodes [ 0 ]
>8008	PrimaryExpression	0
>8009	PtrMemberAccess	p -> nodes
>8010	Identifier	nodes
>8011	Identifier	p
>8012	UnaryOperator	&
>8013	Identifier	n
>8014	Identifier	n
>8015	IdentifierDeclType	PathNode *
>8016	Condition	 
>8017	AndExpression	p && ! p -> nodes . empty ( )
>8018	UnaryOp	! p -> nodes . empty ( )
>8019	CallExpression	p -> nodes . empty ( )
>8020	ArgumentList	 
>8021	Callee	p -> nodes . empty
>8022	MemberAccess	p -> nodes . empty
>8023	Identifier	empty
>8024	PtrMemberAccess	p -> nodes
>8025	Identifier	nodes
>8026	Identifier	p
>8027	UnaryOperator	!
>8028	Identifier	p
>8029	IdentifierDeclStatement	 
>8030	IdentifierDecl	* p = dsq -> game -> getPath ( i )
>8031	AssignmentExpr	* p = dsq -> game -> getPath ( i )
>8032	CallExpression	dsq -> game -> getPath ( i )
>8033	ArgumentList	i
>8034	Argument	i
>8035	Identifier	i
>8036	Callee	dsq -> game -> getPath
>8037	PtrMemberAccess	dsq -> game -> getPath
>8038	Identifier	getPath
>8039	PtrMemberAccess	dsq -> game
>8040	Identifier	game
>8041	Identifier	dsq
>8042	Identifier	p
>8043	Identifier	p
>8044	IdentifierDeclType	Path *
>8045	IncDecOp	 
>8046	IncDec	++
>8047	Identifier	i
>8048	Condition	 
>8049	RelationalExpression	i < dsq -> game -> getNumPaths ( )
>8050	CallExpression	dsq -> game -> getNumPaths ( )
>8051	ArgumentList	 
>8052	Callee	dsq -> game -> getNumPaths
>8053	PtrMemberAccess	dsq -> game -> getNumPaths
>8054	Identifier	getNumPaths
>8055	PtrMemberAccess	dsq -> game
>8056	Identifier	game
>8057	Identifier	dsq
>8058	Identifier	i
>8059	ForInit	 
>8060	IdentifierDeclStatement	int i = 0 ;
>8061	IdentifierDecl	i = 0
>8062	AssignmentExpr	i = 0
>8063	PrimaryExpression	0
>8064	Identifier	i
>8065	Identifier	i
>8066	IdentifierDeclType	int
>8067	CompoundStatement	 
>8068	IfStatement	if ( ( e -> position - dsq -> game -> avatar -> position ) . getSquaredLength2D ( ) < sqr ( 1000 ) )
>8069	CompoundStatement	 
>8070	ExpressionStatement	 
>8071	CallExpression	e -> song ( ( SongType ) num )
>8072	ArgumentList	( SongType ) num
>8073	Argument	( SongType ) num
>8074	CastExpression	( SongType ) num
>8075	Identifier	num
>8076	CastTarget	SongType
>8077	Callee	e -> song
>8078	PtrMemberAccess	e -> song
>8079	Identifier	song
>8080	Identifier	e
>8081	Condition	 
>8082	RelationalExpression	( e -> position - dsq -> game -> avatar -> position ) . getSquaredLength2D ( ) < sqr ( 1000 )
>8083	CallExpression	sqr ( 1000 )
>8084	ArgumentList	1000
>8085	Argument	1000
>8086	PrimaryExpression	1000
>8087	Callee	sqr
>8088	Identifier	sqr
>8089	CallExpression	( e -> position - dsq -> game -> avatar -> position ) . getSquaredLength2D ( )
>8090	ArgumentList	 
>8091	Callee	( e -> position - dsq -> game -> avatar -> position ) . getSquaredLength2D
>8092	MemberAccess	( e -> position - dsq -> game -> avatar -> position ) . getSquaredLength2D
>8093	Identifier	getSquaredLength2D
>8094	AdditiveExpression	e -> position - dsq -> game -> avatar -> position
>8095	PtrMemberAccess	dsq -> game -> avatar -> position
>8096	Identifier	position
>8097	PtrMemberAccess	dsq -> game -> avatar
>8098	Identifier	avatar
>8099	PtrMemberAccess	dsq -> game
>8100	Identifier	game
>8101	Identifier	dsq
>8102	PtrMemberAccess	e -> position
>8103	Identifier	position
>8104	Identifier	e
>8105	IdentifierDeclStatement	 
>8106	IdentifierDecl	* e = * i
>8107	AssignmentExpr	* e = * i
>8108	UnaryOp	* i
>8109	Identifier	i
>8110	UnaryOperator	*
>8111	Identifier	e
>8112	Identifier	e
>8113	IdentifierDeclType	Entity *
>8114	Statement	 
>8115	Statement	 
>8116	Statement	 
>8117	Statement	 
>8118	IfStatement	if ( song -> script != 1 )
>8119	CompoundStatement	 
>8120	SwitchStatement	switch ( ( SongType ) num )
>8121	CompoundStatement	 
>8122	BreakStatement	 
>8123	Label	 
>8124	Identifier	SONG_SONGDOOR1
>8125	BreakStatement	 
>8126	ExpressionStatement	 
>8127	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_FISH )
>8128	ArgumentList	FORM_FISH
>8129	Argument	FORM_FISH
>8130	Identifier	FORM_FISH
>8131	Callee	dsq -> game -> avatar -> changeForm
>8132	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>8133	Identifier	changeForm
>8134	PtrMemberAccess	dsq -> game -> avatar
>8135	Identifier	avatar
>8136	PtrMemberAccess	dsq -> game
>8137	Identifier	game
>8138	Identifier	dsq
>8139	Label	 
>8140	Identifier	SONG_FISHFORM
>8141	BreakStatement	 
>8142	ExpressionStatement	 
>8143	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_SUN )
>8144	ArgumentList	FORM_SUN
>8145	Argument	FORM_SUN
>8146	Identifier	FORM_SUN
>8147	Callee	dsq -> game -> avatar -> changeForm
>8148	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>8149	Identifier	changeForm
>8150	PtrMemberAccess	dsq -> game -> avatar
>8151	Identifier	avatar
>8152	PtrMemberAccess	dsq -> game
>8153	Identifier	game
>8154	Identifier	dsq
>8155	Label	 
>8156	Identifier	SONG_SUNFORM
>8157	BreakStatement	 
>8158	ExpressionStatement	 
>8159	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_DUAL )
>8160	ArgumentList	FORM_DUAL
>8161	Argument	FORM_DUAL
>8162	Identifier	FORM_DUAL
>8163	Callee	dsq -> game -> avatar -> changeForm
>8164	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>8165	Identifier	changeForm
>8166	PtrMemberAccess	dsq -> game -> avatar
>8167	Identifier	avatar
>8168	PtrMemberAccess	dsq -> game
>8169	Identifier	game
>8170	Identifier	dsq
>8171	Label	 
>8172	Identifier	SONG_DUALFORM
>8173	BreakStatement	 
>8174	ExpressionStatement	 
>8175	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_BEAST )
>8176	ArgumentList	FORM_BEAST
>8177	Argument	FORM_BEAST
>8178	Identifier	FORM_BEAST
>8179	Callee	dsq -> game -> avatar -> changeForm
>8180	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>8181	Identifier	changeForm
>8182	PtrMemberAccess	dsq -> game -> avatar
>8183	Identifier	avatar
>8184	PtrMemberAccess	dsq -> game
>8185	Identifier	game
>8186	Identifier	dsq
>8187	Label	 
>8188	Identifier	SONG_BEASTFORM
>8189	BreakStatement	 
>8190	ExpressionStatement	 
>8191	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_NATURE )
>8192	ArgumentList	FORM_NATURE
>8193	Argument	FORM_NATURE
>8194	Identifier	FORM_NATURE
>8195	Callee	dsq -> game -> avatar -> changeForm
>8196	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>8197	Identifier	changeForm
>8198	PtrMemberAccess	dsq -> game -> avatar
>8199	Identifier	avatar
>8200	PtrMemberAccess	dsq -> game
>8201	Identifier	game
>8202	Identifier	dsq
>8203	Label	 
>8204	Identifier	SONG_NATUREFORM
>8205	BreakStatement	 
>8206	IfStatement	if ( dsq -> game -> avatar -> isUnderWater ( ) )
>8207	ElseStatement	else
>8208	CompoundStatement	 
>8209	ExpressionStatement	 
>8210	CallExpression	core -> sound -> playSfx ( \"SongFail\" )
>8211	ArgumentList	\"SongFail\"
>8212	Argument	\"SongFail\"
>8213	PrimaryExpression	\"SongFail\"
>8214	Callee	core -> sound -> playSfx
>8215	PtrMemberAccess	core -> sound -> playSfx
>8216	Identifier	playSfx
>8217	PtrMemberAccess	core -> sound
>8218	Identifier	sound
>8219	Identifier	core
>8220	CompoundStatement	 
>8221	IfStatement	if ( inWarp )
>8222	ElseStatement	else
>8223	ExpressionStatement	 
>8224	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_SPIRIT )
>8225	ArgumentList	FORM_SPIRIT
>8226	Argument	FORM_SPIRIT
>8227	Identifier	FORM_SPIRIT
>8228	Callee	dsq -> game -> avatar -> changeForm
>8229	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>8230	Identifier	changeForm
>8231	PtrMemberAccess	dsq -> game -> avatar
>8232	Identifier	avatar
>8233	PtrMemberAccess	dsq -> game
>8234	Identifier	game
>8235	Identifier	dsq
>8236	ExpressionStatement	 
>8237	CallExpression	core -> sound -> playSfx ( \"SongFail\" )
>8238	ArgumentList	\"SongFail\"
>8239	Argument	\"SongFail\"
>8240	PrimaryExpression	\"SongFail\"
>8241	Callee	core -> sound -> playSfx
>8242	PtrMemberAccess	core -> sound -> playSfx
>8243	Identifier	playSfx
>8244	PtrMemberAccess	core -> sound
>8245	Identifier	sound
>8246	Identifier	core
>8247	Condition	 
>8248	Identifier	inWarp
>8249	ForStatement	for ( Path * p = dsq -> game -> getFirstPathOfType ( PATH_WARP ) ; p ; p = p -> nextOfType )
>8250	CompoundStatement	 
>8251	IfStatement	if ( p -> isCoordinateInside ( avatarPosition ) )
>8252	CompoundStatement	 
>8253	BreakStatement	 
>8254	ExpressionStatement	 
>8255	AssignmentExpr	inWarp = true
>8256	Identifier	true
>8257	Identifier	inWarp
>8258	Condition	 
>8259	CallExpression	p -> isCoordinateInside ( avatarPosition )
>8260	ArgumentList	avatarPosition
>8261	Argument	avatarPosition
>8262	Identifier	avatarPosition
>8263	Callee	p -> isCoordinateInside
>8264	PtrMemberAccess	p -> isCoordinateInside
>8265	Identifier	isCoordinateInside
>8266	Identifier	p
>8267	AssignmentExpr	 
>8268	PtrMemberAccess	p -> nextOfType
>8269	Identifier	nextOfType
>8270	Identifier	p
>8271	Identifier	p
>8272	Condition	 
>8273	Identifier	p
>8274	ForInit	 
>8275	IdentifierDeclStatement	Path * p = dsq -> game -> getFirstPathOfType ( PATH_WARP ) ;
>8276	IdentifierDecl	* p = dsq -> game -> getFirstPathOfType ( PATH_WARP )
>8277	AssignmentExpr	* p = dsq -> game -> getFirstPathOfType ( PATH_WARP )
>8278	CallExpression	dsq -> game -> getFirstPathOfType ( PATH_WARP )
>8279	ArgumentList	PATH_WARP
>8280	Argument	PATH_WARP
>8281	Identifier	PATH_WARP
>8282	Callee	dsq -> game -> getFirstPathOfType
>8283	PtrMemberAccess	dsq -> game -> getFirstPathOfType
>8284	Identifier	getFirstPathOfType
>8285	PtrMemberAccess	dsq -> game
>8286	Identifier	game
>8287	Identifier	dsq
>8288	Identifier	p
>8289	Identifier	p
>8290	IdentifierDeclType	Path *
>8291	IdentifierDeclStatement	 
>8292	IdentifierDecl	avatarPosition ( dsq -> game -> avatar -> position )
>8293	PtrMemberAccess	dsq -> game -> avatar -> position
>8294	Identifier	position
>8295	PtrMemberAccess	dsq -> game -> avatar
>8296	Identifier	avatar
>8297	PtrMemberAccess	dsq -> game
>8298	Identifier	game
>8299	Identifier	dsq
>8300	Identifier	avatarPosition
>8301	IdentifierDeclType	const Vector
>8302	IdentifierDeclStatement	 
>8303	IdentifierDecl	inWarp = false
>8304	AssignmentExpr	inWarp = false
>8305	Identifier	false
>8306	Identifier	false
>8307	Identifier	inWarp
>8308	IdentifierDeclType	bool
>8309	Condition	 
>8310	CallExpression	dsq -> game -> avatar -> isUnderWater ( )
>8311	ArgumentList	 
>8312	Callee	dsq -> game -> avatar -> isUnderWater
>8313	PtrMemberAccess	dsq -> game -> avatar -> isUnderWater
>8314	Identifier	isUnderWater
>8315	PtrMemberAccess	dsq -> game -> avatar
>8316	Identifier	avatar
>8317	PtrMemberAccess	dsq -> game
>8318	Identifier	game
>8319	Identifier	dsq
>8320	Label	 
>8321	Identifier	SONG_SPIRITFORM
>8322	BreakStatement	 
>8323	IfStatement	if ( dsq -> game -> li && dsq -> game -> avatar -> isUnderWater ( ) && dsq -> continuity . hasLi ( ) )
>8324	ElseStatement	else
>8325	CompoundStatement	 
>8326	ExpressionStatement	 
>8327	CallExpression	core -> sound -> playSfx ( \"Denied\" )
>8328	ArgumentList	\"Denied\"
>8329	Argument	\"Denied\"
>8330	PrimaryExpression	\"Denied\"
>8331	Callee	core -> sound -> playSfx
>8332	PtrMemberAccess	core -> sound -> playSfx
>8333	Identifier	playSfx
>8334	PtrMemberAccess	core -> sound
>8335	Identifier	sound
>8336	Identifier	core
>8337	CompoundStatement	 
>8338	IfStatement	if ( ! dsq -> game -> avatar -> isNearObstruction ( 2 ) && ! dsq -> game -> avatar -> state . lockedToWall && ! ( \
>8339	ElseStatement	else
>8340	IfStatement	if ( ( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn ( 500 ) )
>8341	ElseStatement	else
>8342	CompoundStatement	 
>8343	ExpressionStatement	 
>8344	CallExpression	core -> sound -> playSfx ( \"Denied\" )
>8345	ArgumentList	\"Denied\"
>8346	Argument	\"Denied\"
>8347	PrimaryExpression	\"Denied\"
>8348	Callee	core -> sound -> playSfx
>8349	PtrMemberAccess	core -> sound -> playSfx
>8350	Identifier	playSfx
>8351	PtrMemberAccess	core -> sound
>8352	Identifier	sound
>8353	Identifier	core
>8354	CompoundStatement	 
>8355	ExpressionStatement	 
>8356	CallExpression	dsq -> game -> li -> message ( \"c\" , 0 )
>8357	ArgumentList	\"c\"
>8358	Argument	0
>8359	PrimaryExpression	0
>8360	Argument	\"c\"
>8361	PrimaryExpression	\"c\"
>8362	Callee	dsq -> game -> li -> message
>8363	PtrMemberAccess	dsq -> game -> li -> message
>8364	Identifier	message
>8365	PtrMemberAccess	dsq -> game -> li
>8366	Identifier	li
>8367	PtrMemberAccess	dsq -> game
>8368	Identifier	game
>8369	Identifier	dsq
>8370	IfStatement	if ( dsq -> continuity . getFlag ( FLAG_LICOMBAT ) == 1 )
>8371	ElseStatement	else
>8372	ExpressionStatement	 
>8373	CallExpression	dsq -> continuity . setFlag ( FLAG_LICOMBAT , 1 )
>8374	ArgumentList	FLAG_LICOMBAT
>8375	Argument	1
>8376	PrimaryExpression	1
>8377	Argument	FLAG_LICOMBAT
>8378	Identifier	FLAG_LICOMBAT
>8379	Callee	dsq -> continuity . setFlag
>8380	MemberAccess	dsq -> continuity . setFlag
>8381	Identifier	setFlag
>8382	PtrMemberAccess	dsq -> continuity
>8383	Identifier	continuity
>8384	Identifier	dsq
>8385	ExpressionStatement	 
>8386	CallExpression	dsq -> continuity . setFlag ( FLAG_LICOMBAT , 0 )
>8387	ArgumentList	FLAG_LICOMBAT
>8388	Argument	0
>8389	PrimaryExpression	0
>8390	Argument	FLAG_LICOMBAT
>8391	Identifier	FLAG_LICOMBAT
>8392	Callee	dsq -> continuity . setFlag
>8393	MemberAccess	dsq -> continuity . setFlag
>8394	Identifier	setFlag
>8395	PtrMemberAccess	dsq -> continuity
>8396	Identifier	continuity
>8397	Identifier	dsq
>8398	Condition	 
>8399	EqualityExpression	dsq -> continuity . getFlag ( FLAG_LICOMBAT ) == 1
>8400	PrimaryExpression	1
>8401	CallExpression	dsq -> continuity . getFlag ( FLAG_LICOMBAT )
>8402	ArgumentList	FLAG_LICOMBAT
>8403	Argument	FLAG_LICOMBAT
>8404	Identifier	FLAG_LICOMBAT
>8405	Callee	dsq -> continuity . getFlag
>8406	MemberAccess	dsq -> continuity . getFlag
>8407	Identifier	getFlag
>8408	PtrMemberAccess	dsq -> continuity
>8409	Identifier	continuity
>8410	Identifier	dsq
>8411	Condition	 
>8412	CallExpression	( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn ( 500 )
>8413	ArgumentList	500
>8414	Argument	500
>8415	PrimaryExpression	500
>8416	Callee	( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn
>8417	MemberAccess	( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn
>8418	Identifier	isLength2DIn
>8419	AdditiveExpression	dsq -> game -> li -> position - dsq -> game -> avatar -> position
>8420	PtrMemberAccess	dsq -> game -> avatar -> position
>8421	Identifier	position
>8422	PtrMemberAccess	dsq -> game -> avatar
>8423	Identifier	avatar
>8424	PtrMemberAccess	dsq -> game
>8425	Identifier	game
>8426	Identifier	dsq
>8427	PtrMemberAccess	dsq -> game -> li -> position
>8428	Identifier	position
>8429	PtrMemberAccess	dsq -> game -> li
>8430	Identifier	li
>8431	PtrMemberAccess	dsq -> game
>8432	Identifier	game
>8433	Identifier	dsq
>8434	CompoundStatement	 
>8435	ExpressionStatement	 
>8436	AssignmentExpr	dsq -> overlay -> color = 0
>8437	PrimaryExpression	0
>8438	PtrMemberAccess	dsq -> overlay -> color
>8439	Identifier	color
>8440	PtrMemberAccess	dsq -> overlay
>8441	Identifier	overlay
>8442	Identifier	dsq
>8443	ExpressionStatement	 
>8444	CallExpression	dsq -> main ( 0.3 )
>8445	ArgumentList	0.3
>8446	Argument	0.3
>8447	PrimaryExpression	0.3
>8448	Callee	dsq -> main
>8449	PtrMemberAccess	dsq -> main
>8450	Identifier	main
>8451	Identifier	dsq
>8452	ExpressionStatement	 
>8453	CallExpression	dsq -> fade ( 0 , 0.3 )
>8454	ArgumentList	0
>8455	Argument	0.3
>8456	PrimaryExpression	0.3
>8457	Argument	0
>8458	PrimaryExpression	0
>8459	Callee	dsq -> fade
>8460	PtrMemberAccess	dsq -> fade
>8461	Identifier	fade
>8462	Identifier	dsq
>8463	ExpressionStatement	 
>8464	CallExpression	warpLiToAvatar ( )
>8465	ArgumentList	 
>8466	Callee	warpLiToAvatar
>8467	Identifier	warpLiToAvatar
>8468	ExpressionStatement	 
>8469	CallExpression	dsq -> main ( 0.3 )
>8470	ArgumentList	0.3
>8471	Argument	0.3
>8472	PrimaryExpression	0.3
>8473	Callee	dsq -> main
>8474	PtrMemberAccess	dsq -> main
>8475	Identifier	main
>8476	Identifier	dsq
>8477	ExpressionStatement	 
>8478	CallExpression	dsq -> fade ( 1 , 0.3 )
>8479	ArgumentList	1
>8480	Argument	0.3
>8481	PrimaryExpression	0.3
>8482	Argument	1
>8483	PrimaryExpression	1
>8484	Callee	dsq -> fade
>8485	PtrMemberAccess	dsq -> fade
>8486	Identifier	fade
>8487	Identifier	dsq
>8488	ExpressionStatement	 
>8489	AssignmentExpr	dsq -> overlay -> color = Vector ( 1 , 1 , 1 )
>8490	CallExpression	Vector ( 1 , 1 , 1 )
>8491	ArgumentList	1
>8492	Argument	1
>8493	PrimaryExpression	1
>8494	Argument	1
>8495	PrimaryExpression	1
>8496	Argument	1
>8497	PrimaryExpression	1
>8498	Callee	Vector
>8499	Identifier	Vector
>8500	PtrMemberAccess	dsq -> overlay -> color
>8501	Identifier	color
>8502	PtrMemberAccess	dsq -> overlay
>8503	Identifier	overlay
>8504	Identifier	dsq
>8505	Condition	 
>8506	AndExpression	! dsq -> game -> avatar -> isNearObstruction ( 2 ) && ! dsq -> game -> avatar -> state . lockedToWall && ! ( \
>8507	AndExpression	! dsq -> game -> avatar -> state . lockedToWall && ! ( dsq -> game -> li -> position - dsq -> game -> \
>8508	UnaryOp	! ( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn ( 400 )
>8509	CallExpression	( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn ( 400 )
>8510	ArgumentList	400
>8511	Argument	400
>8512	PrimaryExpression	400
>8513	Callee	( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn
>8514	MemberAccess	( dsq -> game -> li -> position - dsq -> game -> avatar -> position ) . isLength2DIn
>8515	Identifier	isLength2DIn
>8516	AdditiveExpression	dsq -> game -> li -> position - dsq -> game -> avatar -> position
>8517	PtrMemberAccess	dsq -> game -> avatar -> position
>8518	Identifier	position
>8519	PtrMemberAccess	dsq -> game -> avatar
>8520	Identifier	avatar
>8521	PtrMemberAccess	dsq -> game
>8522	Identifier	game
>8523	Identifier	dsq
>8524	PtrMemberAccess	dsq -> game -> li -> position
>8525	Identifier	position
>8526	PtrMemberAccess	dsq -> game -> li
>8527	Identifier	li
>8528	PtrMemberAccess	dsq -> game
>8529	Identifier	game
>8530	Identifier	dsq
>8531	UnaryOperator	!
>8532	UnaryOp	! dsq -> game -> avatar -> state . lockedToWall
>8533	MemberAccess	dsq -> game -> avatar -> state . lockedToWall
>8534	Identifier	lockedToWall
>8535	PtrMemberAccess	dsq -> game -> avatar -> state
>8536	Identifier	state
>8537	PtrMemberAccess	dsq -> game -> avatar
>8538	Identifier	avatar
>8539	PtrMemberAccess	dsq -> game
>8540	Identifier	game
>8541	Identifier	dsq
>8542	UnaryOperator	!
>8543	UnaryOp	! dsq -> game -> avatar -> isNearObstruction ( 2 )
>8544	CallExpression	dsq -> game -> avatar -> isNearObstruction ( 2 )
>8545	ArgumentList	2
>8546	Argument	2
>8547	PrimaryExpression	2
>8548	Callee	dsq -> game -> avatar -> isNearObstruction
>8549	PtrMemberAccess	dsq -> game -> avatar -> isNearObstruction
>8550	Identifier	isNearObstruction
>8551	PtrMemberAccess	dsq -> game -> avatar
>8552	Identifier	avatar
>8553	PtrMemberAccess	dsq -> game
>8554	Identifier	game
>8555	Identifier	dsq
>8556	UnaryOperator	!
>8557	Condition	 
>8558	AndExpression	dsq -> game -> li && dsq -> game -> avatar -> isUnderWater ( ) && dsq -> continuity . hasLi ( )
>8559	AndExpression	dsq -> game -> avatar -> isUnderWater ( ) && dsq -> continuity . hasLi ( )
>8560	CallExpression	dsq -> continuity . hasLi ( )
>8561	ArgumentList	 
>8562	Callee	dsq -> continuity . hasLi
>8563	MemberAccess	dsq -> continuity . hasLi
>8564	Identifier	hasLi
>8565	PtrMemberAccess	dsq -> continuity
>8566	Identifier	continuity
>8567	Identifier	dsq
>8568	CallExpression	dsq -> game -> avatar -> isUnderWater ( )
>8569	ArgumentList	 
>8570	Callee	dsq -> game -> avatar -> isUnderWater
>8571	PtrMemberAccess	dsq -> game -> avatar -> isUnderWater
>8572	Identifier	isUnderWater
>8573	PtrMemberAccess	dsq -> game -> avatar
>8574	Identifier	avatar
>8575	PtrMemberAccess	dsq -> game
>8576	Identifier	game
>8577	Identifier	dsq
>8578	PtrMemberAccess	dsq -> game -> li
>8579	Identifier	li
>8580	PtrMemberAccess	dsq -> game
>8581	Identifier	game
>8582	Identifier	dsq
>8583	IfStatement	if ( ! dsq -> continuity . hasLi ( ) && dsq -> continuity . getFlag ( FLAG_LI ) > 100 )
>8584	CompoundStatement	 
>8585	ExpressionStatement	 
>8586	CallExpression	dsq -> emote . playSfx ( EMOTE_NAIJASADSIGH )
>8587	ArgumentList	EMOTE_NAIJASADSIGH
>8588	Argument	EMOTE_NAIJASADSIGH
>8589	Identifier	EMOTE_NAIJASADSIGH
>8590	Callee	dsq -> emote . playSfx
>8591	MemberAccess	dsq -> emote . playSfx
>8592	Identifier	playSfx
>8593	PtrMemberAccess	dsq -> emote
>8594	Identifier	emote
>8595	Identifier	dsq
>8596	Condition	 
>8597	AndExpression	! dsq -> continuity . hasLi ( ) && dsq -> continuity . getFlag ( FLAG_LI ) > 100
>8598	RelationalExpression	dsq -> continuity . getFlag ( FLAG_LI ) > 100
>8599	PrimaryExpression	100
>8600	CallExpression	dsq -> continuity . getFlag ( FLAG_LI )
>8601	ArgumentList	FLAG_LI
>8602	Argument	FLAG_LI
>8603	Identifier	FLAG_LI
>8604	Callee	dsq -> continuity . getFlag
>8605	MemberAccess	dsq -> continuity . getFlag
>8606	Identifier	getFlag
>8607	PtrMemberAccess	dsq -> continuity
>8608	Identifier	continuity
>8609	Identifier	dsq
>8610	UnaryOp	! dsq -> continuity . hasLi ( )
>8611	CallExpression	dsq -> continuity . hasLi ( )
>8612	ArgumentList	 
>8613	Callee	dsq -> continuity . hasLi
>8614	MemberAccess	dsq -> continuity . hasLi
>8615	Identifier	hasLi
>8616	PtrMemberAccess	dsq -> continuity
>8617	Identifier	continuity
>8618	Identifier	dsq
>8619	UnaryOperator	!
>8620	Label	 
>8621	Identifier	SONG_LI
>8622	BreakStatement	 
>8623	CompoundStatement	 
>8624	IfStatement	if ( e )
>8625	CompoundStatement	 
>8626	ExpressionStatement	 
>8627	CallExpression	e -> attachLance ( )
>8628	ArgumentList	 
>8629	Callee	e -> attachLance
>8630	PtrMemberAccess	e -> attachLance
>8631	Identifier	attachLance
>8632	Identifier	e
>8633	Condition	 
>8634	Identifier	e
>8635	IdentifierDeclStatement	 
>8636	IdentifierDecl	* e = dsq -> game -> getNearestEntity ( dsq -> game -> avatar -> position , 256 , dsq -> game -> avatar , ET_ENEMY , \
>8637	AssignmentExpr	* e = dsq -> game -> getNearestEntity ( dsq -> game -> avatar -> position , 256 , dsq -> game -> avatar , \
>8638	CallExpression	dsq -> game -> getNearestEntity ( dsq -> game -> avatar -> position , 256 , dsq -> game -> avatar , ET_ENEMY , DT_\
>8639	ArgumentList	dsq -> game -> avatar -> position
>8640	Argument	DT_AVATAR_LANCEATTACH
>8641	Identifier	DT_AVATAR_LANCEATTACH
>8642	Argument	ET_ENEMY
>8643	Identifier	ET_ENEMY
>8644	Argument	dsq -> game -> avatar
>8645	PtrMemberAccess	dsq -> game -> avatar
>8646	Identifier	avatar
>8647	PtrMemberAccess	dsq -> game
>8648	Identifier	game
>8649	Identifier	dsq
>8650	Argument	256
>8651	PrimaryExpression	256
>8652	Argument	dsq -> game -> avatar -> position
>8653	PtrMemberAccess	dsq -> game -> avatar -> position
>8654	Identifier	position
>8655	PtrMemberAccess	dsq -> game -> avatar
>8656	Identifier	avatar
>8657	PtrMemberAccess	dsq -> game
>8658	Identifier	game
>8659	Identifier	dsq
>8660	Callee	dsq -> game -> getNearestEntity
>8661	PtrMemberAccess	dsq -> game -> getNearestEntity
>8662	Identifier	getNearestEntity
>8663	PtrMemberAccess	dsq -> game
>8664	Identifier	game
>8665	Identifier	dsq
>8666	Identifier	e
>8667	Identifier	e
>8668	IdentifierDeclType	Entity *
>8669	Label	 
>8670	Identifier	SONG_LANCE
>8671	BreakStatement	 
>8672	CompoundStatement	 
>8673	ExpressionStatement	 
>8674	CallExpression	dsq -> gameSpeed . startPath ( 10 )
>8675	ArgumentList	10
>8676	Argument	10
>8677	PrimaryExpression	10
>8678	Callee	dsq -> gameSpeed . startPath
>8679	MemberAccess	dsq -> gameSpeed . startPath
>8680	Identifier	startPath
>8681	PtrMemberAccess	dsq -> gameSpeed
>8682	Identifier	gameSpeed
>8683	Identifier	dsq
>8684	ExpressionStatement	 
>8685	CallExpression	dsq -> gameSpeed . data -> path . addPathNode ( 1 , 1.0 )
>8686	ArgumentList	1
>8687	Argument	1.0
>8688	PrimaryExpression	1.0
>8689	Argument	1
>8690	PrimaryExpression	1
>8691	Callee	dsq -> gameSpeed . data -> path . addPathNode
>8692	MemberAccess	dsq -> gameSpeed . data -> path . addPathNode
>8693	Identifier	addPathNode
>8694	PtrMemberAccess	dsq -> gameSpeed . data -> path
>8695	Identifier	path
>8696	MemberAccess	dsq -> gameSpeed . data
>8697	Identifier	data
>8698	PtrMemberAccess	dsq -> gameSpeed
>8699	Identifier	gameSpeed
>8700	Identifier	dsq
>8701	ExpressionStatement	 
>8702	CallExpression	dsq -> gameSpeed . data -> path . addPathNode ( v , 0.95 )
>8703	ArgumentList	v
>8704	Argument	0.95
>8705	PrimaryExpression	0.95
>8706	Argument	v
>8707	Identifier	v
>8708	Callee	dsq -> gameSpeed . data -> path . addPathNode
>8709	MemberAccess	dsq -> gameSpeed . data -> path . addPathNode
>8710	Identifier	addPathNode
>8711	PtrMemberAccess	dsq -> gameSpeed . data -> path
>8712	Identifier	path
>8713	MemberAccess	dsq -> gameSpeed . data
>8714	Identifier	data
>8715	PtrMemberAccess	dsq -> gameSpeed
>8716	Identifier	gameSpeed
>8717	Identifier	dsq
>8718	ExpressionStatement	 
>8719	CallExpression	dsq -> gameSpeed . data -> path . addPathNode ( v , 0.05 )
>8720	ArgumentList	v
>8721	Argument	0.05
>8722	PrimaryExpression	0.05
>8723	Argument	v
>8724	Identifier	v
>8725	Callee	dsq -> gameSpeed . data -> path . addPathNode
>8726	MemberAccess	dsq -> gameSpeed . data -> path . addPathNode
>8727	Identifier	addPathNode
>8728	PtrMemberAccess	dsq -> gameSpeed . data -> path
>8729	Identifier	path
>8730	MemberAccess	dsq -> gameSpeed . data
>8731	Identifier	data
>8732	PtrMemberAccess	dsq -> gameSpeed
>8733	Identifier	gameSpeed
>8734	Identifier	dsq
>8735	ExpressionStatement	 
>8736	CallExpression	dsq -> gameSpeed . data -> path . addPathNode ( 0 , 0 )
>8737	ArgumentList	0
>8738	Argument	0
>8739	PrimaryExpression	0
>8740	Argument	0
>8741	PrimaryExpression	0
>8742	Callee	dsq -> gameSpeed . data -> path . addPathNode
>8743	MemberAccess	dsq -> gameSpeed . data -> path . addPathNode
>8744	Identifier	addPathNode
>8745	PtrMemberAccess	dsq -> gameSpeed . data -> path
>8746	Identifier	path
>8747	MemberAccess	dsq -> gameSpeed . data
>8748	Identifier	data
>8749	PtrMemberAccess	dsq -> gameSpeed
>8750	Identifier	gameSpeed
>8751	Identifier	dsq
>8752	ExpressionStatement	 
>8753	CallExpression	dsq -> gameSpeed . data -> path . clear ( )
>8754	ArgumentList	 
>8755	Callee	dsq -> gameSpeed . data -> path . clear
>8756	MemberAccess	dsq -> gameSpeed . data -> path . clear
>8757	Identifier	clear
>8758	PtrMemberAccess	dsq -> gameSpeed . data -> path
>8759	Identifier	path
>8760	MemberAccess	dsq -> gameSpeed . data
>8761	Identifier	data
>8762	PtrMemberAccess	dsq -> gameSpeed
>8763	Identifier	gameSpeed
>8764	Identifier	dsq
>8765	ExpressionStatement	 
>8766	CallExpression	dsq -> gameSpeed . ensureData ( )
>8767	ArgumentList	 
>8768	Callee	dsq -> gameSpeed . ensureData
>8769	MemberAccess	dsq -> gameSpeed . ensureData
>8770	Identifier	ensureData
>8771	PtrMemberAccess	dsq -> gameSpeed
>8772	Identifier	gameSpeed
>8773	Identifier	dsq
>8774	IdentifierDeclStatement	 
>8775	IdentifierDecl	v = 0.3
>8776	AssignmentExpr	v = 0.3
>8777	PrimaryExpression	0.3
>8778	Identifier	v
>8779	Identifier	v
>8780	IdentifierDeclType	float
>8781	Label	 
>8782	Identifier	SONG_TIME
>8783	BreakStatement	 
>8784	ExpressionStatement	 
>8785	CallExpression	selected -> skeletalSprite . animate ( \"healSelf\" , 0 , 1 )
>8786	ArgumentList	\"healSelf\"
>8787	Argument	1
>8788	PrimaryExpression	1
>8789	Argument	0
>8790	PrimaryExpression	0
>8791	Argument	\"healSelf\"
>8792	PrimaryExpression	\"healSelf\"
>8793	Callee	selected -> skeletalSprite . animate
>8794	MemberAccess	selected -> skeletalSprite . animate
>8795	Identifier	animate
>8796	PtrMemberAccess	selected -> skeletalSprite
>8797	Identifier	skeletalSprite
>8798	Identifier	selected
>8799	ExpressionStatement	 
>8800	CallExpression	selected -> heal ( 2 )
>8801	ArgumentList	2
>8802	Argument	2
>8803	PrimaryExpression	2
>8804	Callee	selected -> heal
>8805	PtrMemberAccess	selected -> heal
>8806	Identifier	heal
>8807	Identifier	selected
>8808	ExpressionStatement	 
>8809	CallExpression	sound -> playSfx ( \"Heal\" )
>8810	ArgumentList	\"Heal\"
>8811	Argument	\"Heal\"
>8812	PrimaryExpression	\"Heal\"
>8813	Callee	sound -> playSfx
>8814	PtrMemberAccess	sound -> playSfx
>8815	Identifier	playSfx
>8816	Identifier	sound
>8817	Label	 
>8818	Identifier	SONG_HEAL
>8819	BreakStatement	 
>8820	IfStatement	if ( dsq -> game -> autoMap )
>8821	ExpressionStatement	 
>8822	CallExpression	dsq -> game -> autoMap -> toggle ( true )
>8823	ArgumentList	true
>8824	Argument	true
>8825	Identifier	true
>8826	Callee	dsq -> game -> autoMap -> toggle
>8827	PtrMemberAccess	dsq -> game -> autoMap -> toggle
>8828	Identifier	toggle
>8829	PtrMemberAccess	dsq -> game -> autoMap
>8830	Identifier	autoMap
>8831	PtrMemberAccess	dsq -> game
>8832	Identifier	game
>8833	Identifier	dsq
>8834	Condition	 
>8835	PtrMemberAccess	dsq -> game -> autoMap
>8836	Identifier	autoMap
>8837	PtrMemberAccess	dsq -> game
>8838	Identifier	game
>8839	Identifier	dsq
>8840	Label	 
>8841	Identifier	SONG_MAP
>8842	BreakStatement	 
>8843	ExpressionStatement	 
>8844	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_ENERGY )
>8845	ArgumentList	FORM_ENERGY
>8846	Argument	FORM_ENERGY
>8847	Identifier	FORM_ENERGY
>8848	Callee	dsq -> game -> avatar -> changeForm
>8849	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>8850	Identifier	changeForm
>8851	PtrMemberAccess	dsq -> game -> avatar
>8852	Identifier	avatar
>8853	PtrMemberAccess	dsq -> game
>8854	Identifier	game
>8855	Identifier	dsq
>8856	Label	 
>8857	Identifier	SONG_ENERGYFORM
>8858	BreakStatement	 
>8859	ExpressionStatement	 
>8860	CallExpression	dsq -> game -> avatar -> doBindSong ( )
>8861	ArgumentList	 
>8862	Callee	dsq -> game -> avatar -> doBindSong
>8863	PtrMemberAccess	dsq -> game -> avatar -> doBindSong
>8864	Identifier	doBindSong
>8865	PtrMemberAccess	dsq -> game -> avatar
>8866	Identifier	avatar
>8867	PtrMemberAccess	dsq -> game
>8868	Identifier	game
>8869	Identifier	dsq
>8870	Label	 
>8871	Identifier	SONG_BIND
>8872	BreakStatement	 
>8873	ExpressionStatement	 
>8874	CallExpression	dsq -> game -> avatar -> doShieldSong ( )
>8875	ArgumentList	 
>8876	Callee	dsq -> game -> avatar -> doShieldSong
>8877	PtrMemberAccess	dsq -> game -> avatar -> doShieldSong
>8878	Identifier	doShieldSong
>8879	PtrMemberAccess	dsq -> game -> avatar
>8880	Identifier	avatar
>8881	PtrMemberAccess	dsq -> game
>8882	Identifier	game
>8883	Identifier	dsq
>8884	Label	 
>8885	Identifier	SONG_SHIELDAURA
>8886	Condition	 
>8887	CastExpression	( SongType ) num
>8888	Identifier	num
>8889	CastTarget	SongType
>8890	Condition	 
>8891	EqualityExpression	song -> script != 1
>8892	PrimaryExpression	1
>8893	PtrMemberAccess	song -> script
>8894	Identifier	script
>8895	Identifier	song
>8896	IfStatement	if ( song -> script )
>8897	CompoundStatement	 
>8898	IfStatement	if ( dsq -> mod . isActive ( ) )
>8899	ElseStatement	else
>8900	ExpressionStatement	 
>8901	CallExpression	dsq -> runScriptNum ( \"songs.lua\" , \"castSong\" , num )
>8902	ArgumentList	\"songs.lua\"
>8903	Argument	num
>8904	Identifier	num
>8905	Argument	\"castSong\"
>8906	PrimaryExpression	\"castSong\"
>8907	Argument	\"songs.lua\"
>8908	PrimaryExpression	\"songs.lua\"
>8909	Callee	dsq -> runScriptNum
>8910	PtrMemberAccess	dsq -> runScriptNum
>8911	Identifier	runScriptNum
>8912	Identifier	dsq
>8913	ExpressionStatement	 
>8914	CallExpression	dsq -> runScriptNum ( dsq -> mod . getPath ( ) + \"scripts/songs.lua\" , \"castSong\" , num )
>8915	ArgumentList	dsq -> mod . getPath ( ) + \"scripts/songs.lua\"
>8916	Argument	num
>8917	Identifier	num
>8918	Argument	\"castSong\"
>8919	PrimaryExpression	\"castSong\"
>8920	Argument	dsq -> mod . getPath ( ) + \"scripts/songs.lua\"
>8921	AdditiveExpression	dsq -> mod . getPath ( ) + \"scripts/songs.lua\"
>8922	PrimaryExpression	\"scripts/songs.lua\"
>8923	CallExpression	dsq -> mod . getPath ( )
>8924	ArgumentList	 
>8925	Callee	dsq -> mod . getPath
>8926	MemberAccess	dsq -> mod . getPath
>8927	Identifier	getPath
>8928	PtrMemberAccess	dsq -> mod
>8929	Identifier	mod
>8930	Identifier	dsq
>8931	Callee	dsq -> runScriptNum
>8932	PtrMemberAccess	dsq -> runScriptNum
>8933	Identifier	runScriptNum
>8934	Identifier	dsq
>8935	Condition	 
>8936	CallExpression	dsq -> mod . isActive ( )
>8937	ArgumentList	 
>8938	Callee	dsq -> mod . isActive
>8939	MemberAccess	dsq -> mod . isActive
>8940	Identifier	isActive
>8941	PtrMemberAccess	dsq -> mod
>8942	Identifier	mod
>8943	Identifier	dsq
>8944	Condition	 
>8945	PtrMemberAccess	song -> script
>8946	Identifier	script
>8947	Identifier	song
>8948	ExpressionStatement	 
>8949	CallExpression	dsq -> game -> addRenderObject ( effect , LR_PARTICLES )
>8950	ArgumentList	effect
>8951	Argument	LR_PARTICLES
>8952	Identifier	LR_PARTICLES
>8953	Argument	effect
>8954	Identifier	effect
>8955	Callee	dsq -> game -> addRenderObject
>8956	PtrMemberAccess	dsq -> game -> addRenderObject
>8957	Identifier	addRenderObject
>8958	PtrMemberAccess	dsq -> game
>8959	Identifier	game
>8960	Identifier	dsq
>8961	ExpressionStatement	 
>8962	CallExpression	effect -> setPositionSnapTo ( & dsq -> game -> avatar -> position )
>8963	ArgumentList	& dsq -> game -> avatar -> position
>8964	Argument	& dsq -> game -> avatar -> position
>8965	UnaryOp	& dsq -> game -> avatar -> position
>8966	PtrMemberAccess	dsq -> game -> avatar -> position
>8967	Identifier	position
>8968	PtrMemberAccess	dsq -> game -> avatar
>8969	Identifier	avatar
>8970	PtrMemberAccess	dsq -> game
>8971	Identifier	game
>8972	Identifier	dsq
>8973	UnaryOperator	&
>8974	Callee	effect -> setPositionSnapTo
>8975	PtrMemberAccess	effect -> setPositionSnapTo
>8976	Identifier	setPositionSnapTo
>8977	Identifier	effect
>8978	ExpressionStatement	 
>8979	CallExpression	effect -> setDecayRate ( 1 )
>8980	ArgumentList	1
>8981	Argument	1
>8982	PrimaryExpression	1
>8983	Callee	effect -> setDecayRate
>8984	PtrMemberAccess	effect -> setDecayRate
>8985	Identifier	setDecayRate
>8986	Identifier	effect
>8987	ExpressionStatement	 
>8988	CallExpression	effect -> setLife ( et + 0.1f )
>8989	ArgumentList	et + 0.1f
>8990	Argument	et + 0.1f
>8991	AdditiveExpression	et + 0.1f
>8992	PrimaryExpression	0.1f
>8993	Identifier	et
>8994	Callee	effect -> setLife
>8995	PtrMemberAccess	effect -> setLife
>8996	Identifier	setLife
>8997	Identifier	effect
>8998	ExpressionStatement	 
>8999	CallExpression	effect -> alpha . startPath ( et )
>9000	ArgumentList	et
>9001	Argument	et
>9002	Identifier	et
>9003	Callee	effect -> alpha . startPath
>9004	MemberAccess	effect -> alpha . startPath
>9005	Identifier	startPath
>9006	PtrMemberAccess	effect -> alpha
>9007	Identifier	alpha
>9008	Identifier	effect
>9009	ExpressionStatement	 
>9010	CallExpression	effect -> alpha . data -> path . addPathNode ( 0 , 1 )
>9011	ArgumentList	0
>9012	Argument	1
>9013	PrimaryExpression	1
>9014	Argument	0
>9015	PrimaryExpression	0
>9016	Callee	effect -> alpha . data -> path . addPathNode
>9017	MemberAccess	effect -> alpha . data -> path . addPathNode
>9018	Identifier	addPathNode
>9019	PtrMemberAccess	effect -> alpha . data -> path
>9020	Identifier	path
>9021	MemberAccess	effect -> alpha . data
>9022	Identifier	data
>9023	PtrMemberAccess	effect -> alpha
>9024	Identifier	alpha
>9025	Identifier	effect
>9026	ExpressionStatement	 
>9027	CallExpression	effect -> alpha . data -> path . addPathNode ( 0 , 0.9 )
>9028	ArgumentList	0
>9029	Argument	0.9
>9030	PrimaryExpression	0.9
>9031	Argument	0
>9032	PrimaryExpression	0
>9033	Callee	effect -> alpha . data -> path . addPathNode
>9034	MemberAccess	effect -> alpha . data -> path . addPathNode
>9035	Identifier	addPathNode
>9036	PtrMemberAccess	effect -> alpha . data -> path
>9037	Identifier	path
>9038	MemberAccess	effect -> alpha . data
>9039	Identifier	data
>9040	PtrMemberAccess	effect -> alpha
>9041	Identifier	alpha
>9042	Identifier	effect
>9043	ExpressionStatement	 
>9044	CallExpression	effect -> alpha . data -> path . addPathNode ( 1 , 0.5 )
>9045	ArgumentList	1
>9046	Argument	0.5
>9047	PrimaryExpression	0.5
>9048	Argument	1
>9049	PrimaryExpression	1
>9050	Callee	effect -> alpha . data -> path . addPathNode
>9051	MemberAccess	effect -> alpha . data -> path . addPathNode
>9052	Identifier	addPathNode
>9053	PtrMemberAccess	effect -> alpha . data -> path
>9054	Identifier	path
>9055	MemberAccess	effect -> alpha . data
>9056	Identifier	data
>9057	PtrMemberAccess	effect -> alpha
>9058	Identifier	alpha
>9059	Identifier	effect
>9060	ExpressionStatement	 
>9061	CallExpression	effect -> alpha . data -> path . addPathNode ( 0.5 , 0.1 )
>9062	ArgumentList	0.5
>9063	Argument	0.1
>9064	PrimaryExpression	0.1
>9065	Argument	0.5
>9066	PrimaryExpression	0.5
>9067	Callee	effect -> alpha . data -> path . addPathNode
>9068	MemberAccess	effect -> alpha . data -> path . addPathNode
>9069	Identifier	addPathNode
>9070	PtrMemberAccess	effect -> alpha . data -> path
>9071	Identifier	path
>9072	MemberAccess	effect -> alpha . data
>9073	Identifier	data
>9074	PtrMemberAccess	effect -> alpha
>9075	Identifier	alpha
>9076	Identifier	effect
>9077	ExpressionStatement	 
>9078	CallExpression	effect -> alpha . data -> path . addPathNode ( 0 , 0 )
>9079	ArgumentList	0
>9080	Argument	0
>9081	PrimaryExpression	0
>9082	Argument	0
>9083	PrimaryExpression	0
>9084	Callee	effect -> alpha . data -> path . addPathNode
>9085	MemberAccess	effect -> alpha . data -> path . addPathNode
>9086	Identifier	addPathNode
>9087	PtrMemberAccess	effect -> alpha . data -> path
>9088	Identifier	path
>9089	MemberAccess	effect -> alpha . data
>9090	Identifier	data
>9091	PtrMemberAccess	effect -> alpha
>9092	Identifier	alpha
>9093	Identifier	effect
>9094	ExpressionStatement	 
>9095	CallExpression	effect -> alpha . ensureData ( )
>9096	ArgumentList	 
>9097	Callee	effect -> alpha . ensureData
>9098	MemberAccess	effect -> alpha . ensureData
>9099	Identifier	ensureData
>9100	PtrMemberAccess	effect -> alpha
>9101	Identifier	alpha
>9102	Identifier	effect
>9103	ExpressionStatement	 
>9104	CallExpression	effect -> scale . interpolateTo ( Vector ( 3 , 3 ) , et )
>9105	ArgumentList	Vector ( 3 , 3 )
>9106	Argument	et
>9107	Identifier	et
>9108	Argument	Vector ( 3 , 3 )
>9109	CallExpression	Vector ( 3 , 3 )
>9110	ArgumentList	3
>9111	Argument	3
>9112	PrimaryExpression	3
>9113	Argument	3
>9114	PrimaryExpression	3
>9115	Callee	Vector
>9116	Identifier	Vector
>9117	Callee	effect -> scale . interpolateTo
>9118	MemberAccess	effect -> scale . interpolateTo
>9119	Identifier	interpolateTo
>9120	PtrMemberAccess	effect -> scale
>9121	Identifier	scale
>9122	Identifier	effect
>9123	ExpressionStatement	 
>9124	AssignmentExpr	effect -> position = selected -> position + selected -> offset
>9125	AdditiveExpression	selected -> position + selected -> offset
>9126	PtrMemberAccess	selected -> offset
>9127	Identifier	offset
>9128	Identifier	selected
>9129	PtrMemberAccess	selected -> position
>9130	Identifier	position
>9131	Identifier	selected
>9132	PtrMemberAccess	effect -> position
>9133	Identifier	position
>9134	Identifier	effect
>9135	ExpressionStatement	 
>9136	CallExpression	effect -> setTexture ( os . str ( ) )
>9137	ArgumentList	os . str ( )
>9138	Argument	os . str ( )
>9139	CallExpression	os . str ( )
>9140	ArgumentList	 
>9141	Callee	os . str
>9142	MemberAccess	os . str
>9143	Identifier	str
>9144	Identifier	os
>9145	Callee	effect -> setTexture
>9146	PtrMemberAccess	effect -> setTexture
>9147	Identifier	setTexture
>9148	Identifier	effect
>9149	ExpressionStatement	 
>9150	AssignmentExpr	effect -> pauseLevel = 1
>9151	PrimaryExpression	1
>9152	PtrMemberAccess	effect -> pauseLevel
>9153	Identifier	pauseLevel
>9154	Identifier	effect
>9155	IdentifierDeclStatement	 
>9156	IdentifierDecl	* effect = new PauseQuad ( )
>9157	AssignmentExpr	* effect = new PauseQuad ( )
>9158	UnaryExpression	new PauseQuad ( )
>9159	Identifier	effect
>9160	Identifier	effect
>9161	IdentifierDeclType	PauseQuad *
>9162	ExpressionStatement	 
>9163	ShiftExpression	os << \"Song/SongSlot-\" << dsq -> continuity . getSongSlotByType ( num )
>9164	ShiftExpression	\"Song/SongSlot-\" << dsq -> continuity . getSongSlotByType ( num )
>9165	CallExpression	dsq -> continuity . getSongSlotByType ( num )
>9166	ArgumentList	num
>9167	Argument	num
>9168	Identifier	num
>9169	Callee	dsq -> continuity . getSongSlotByType
>9170	MemberAccess	dsq -> continuity . getSongSlotByType
>9171	Identifier	getSongSlotByType
>9172	PtrMemberAccess	dsq -> continuity
>9173	Identifier	continuity
>9174	Identifier	dsq
>9175	PrimaryExpression	\"Song/SongSlot-\"
>9176	Identifier	os
>9177	IdentifierDeclStatement	 
>9178	IdentifierDecl	os
>9179	Identifier	os
>9180	IdentifierDeclType	std 
>9181	IdentifierDeclStatement	 
>9182	IdentifierDecl	et = 0.5
>9183	AssignmentExpr	et = 0.5
>9184	PrimaryExpression	0.5
>9185	Identifier	et
>9186	Identifier	et
>9187	IdentifierDeclType	float
>9188	IfStatement	if ( ! song )
>9189	CompoundStatement	 
>9190	ExpressionStatement	 
>9191	CallExpression	debugLog ( os . str ( ) )
>9192	ArgumentList	os . str ( )
>9193	Argument	os . str ( )
>9194	CallExpression	os . str ( )
>9195	ArgumentList	 
>9196	Callee	os . str
>9197	MemberAccess	os . str
>9198	Identifier	str
>9199	Identifier	os
>9200	Callee	debugLog
>9201	Identifier	debugLog
>9202	ExpressionStatement	 
>9203	ShiftExpression	os << \"Could not find song with index [\" << num << \"]\"
>9204	ShiftExpression	\"Could not find song with index [\" << num << \"]\"
>9205	ShiftExpression	num << \"]\"
>9206	PrimaryExpression	\"]\"
>9207	Identifier	num
>9208	PrimaryExpression	\"Could not find song with index [\"
>9209	Identifier	os
>9210	IdentifierDeclStatement	 
>9211	IdentifierDecl	os
>9212	Identifier	os
>9213	IdentifierDeclType	std 
>9214	Condition	 
>9215	UnaryOp	! song
>9216	Identifier	song
>9217	UnaryOperator	!
>9218	IdentifierDeclStatement	 
>9219	IdentifierDecl	* song = getSongByIndex ( num )
>9220	AssignmentExpr	* song = getSongByIndex ( num )
>9221	CallExpression	getSongByIndex ( num )
>9222	ArgumentList	num
>9223	Argument	num
>9224	Identifier	num
>9225	Callee	getSongByIndex
>9226	Identifier	getSongByIndex
>9227	Identifier	song
>9228	Identifier	song
>9229	IdentifierDeclType	Song *
>9230	IdentifierDeclStatement	 
>9231	IdentifierDecl	* selected = dsq -> game -> avatar
>9232	AssignmentExpr	* selected = dsq -> game -> avatar
>9233	PtrMemberAccess	dsq -> game -> avatar
>9234	Identifier	avatar
>9235	PtrMemberAccess	dsq -> game
>9236	Identifier	game
>9237	Identifier	dsq
>9238	Identifier	selected
>9239	Identifier	selected
>9240	IdentifierDeclType	Entity *
>9241	IfStatement	if ( ! dsq -> continuity . hasSong ( ( SongType ) num ) )
>9242	ReturnStatement	 
>9243	Condition	 
>9244	UnaryOp	! dsq -> continuity . hasSong ( ( SongType ) num )
>9245	CallExpression	dsq -> continuity . hasSong ( ( SongType ) num )
>9246	ArgumentList	( SongType ) num
>9247	Argument	( SongType ) num
>9248	CastExpression	( SongType ) num
>9249	Identifier	num
>9250	CastTarget	SongType
>9251	Callee	dsq -> continuity . hasSong
>9252	MemberAccess	dsq -> continuity . hasSong
>9253	Identifier	hasSong
>9254	PtrMemberAccess	dsq -> continuity
>9255	Identifier	continuity
>9256	Identifier	dsq
>9257	UnaryOperator	!
>9371	FunctionDef	Continuity 
>9372	ParameterList	const std 
>9373	Parameter	 
>9374	Identifier	c
>9375	ParameterType	const std 
>9376	ReturnType	void
>9377	CompoundStatement	 
>9378	ExpressionStatement	 
>9379	CallExpression	dsq -> game -> avatar -> changeForm ( FORM_NORMAL , false )
>9380	ArgumentList	FORM_NORMAL
>9381	Argument	false
>9382	Identifier	false
>9383	Argument	FORM_NORMAL
>9384	Identifier	FORM_NORMAL
>9385	Callee	dsq -> game -> avatar -> changeForm
>9386	PtrMemberAccess	dsq -> game -> avatar -> changeForm
>9387	Identifier	changeForm
>9388	PtrMemberAccess	dsq -> game -> avatar
>9389	Identifier	avatar
>9390	PtrMemberAccess	dsq -> game
>9391	Identifier	game
>9392	Identifier	dsq
>9393	ExpressionStatement	 
>9394	AssignmentExpr	costume = c
>9395	Identifier	c
>9396	Identifier	costume
>9410	FunctionDef	Continuity 
>9411	ParameterList	int song
>9412	Parameter	 
>9413	Identifier	song
>9414	ParameterType	int
>9415	ReturnType	void
>9416	CompoundStatement	 
>9417	ExpressionStatement	 
>9418	AssignmentExpr	knowsSong [ song ] = true
>9419	Identifier	true
>9420	ArrayIndexing	knowsSong [ song ]
>9421	Identifier	song
>9422	Identifier	knowsSong
>9431	FunctionDef	Continuity 
>9432	ParameterList	int song
>9433	Parameter	 
>9434	Identifier	song
>9435	ParameterType	int
>9436	ReturnType	void
>9437	CompoundStatement	 
>9438	ExpressionStatement	 
>9439	AssignmentExpr	knowsSong [ song ] = false
>9440	Identifier	false
>9441	ArrayIndexing	knowsSong [ song ]
>9442	Identifier	song
>9443	Identifier	knowsSong
>9452	FunctionDef	Continuity 
>9453	ParameterList	SongType s
>9454	Parameter	 
>9455	Identifier	s
>9456	ParameterType	SongType
>9457	ReturnType	bool
>9458	CompoundStatement	 
>9459	ReturnStatement	 
>9460	OrExpression	s == SONG_ENERGYFORM || s == SONG_BEASTFORM || s == SONG_NATUREFORM || s == SONG_SUNFORM || s == SONG_\
>9461	OrExpression	s == SONG_BEASTFORM || s == SONG_NATUREFORM || s == SONG_SUNFORM || s == SONG_SPIRITFORM || s == SONG_\
>9462	OrExpression	s == SONG_NATUREFORM || s == SONG_SUNFORM || s == SONG_SPIRITFORM || s == SONG_FISHFORM || s == SONG_\
>9463	OrExpression	s == SONG_SUNFORM || s == SONG_SPIRITFORM || s == SONG_FISHFORM || s == SONG_DUALFORM
>9464	OrExpression	s == SONG_SPIRITFORM || s == SONG_FISHFORM || s == SONG_DUALFORM
>9465	OrExpression	s == SONG_FISHFORM || s == SONG_DUALFORM
>9466	EqualityExpression	s == SONG_DUALFORM
>9467	Identifier	SONG_DUALFORM
>9468	Identifier	s
>9469	EqualityExpression	s == SONG_FISHFORM
>9470	Identifier	SONG_FISHFORM
>9471	Identifier	s
>9472	EqualityExpression	s == SONG_SPIRITFORM
>9473	Identifier	SONG_SPIRITFORM
>9474	Identifier	s
>9475	EqualityExpression	s == SONG_SUNFORM
>9476	Identifier	SONG_SUNFORM
>9477	Identifier	s
>9478	EqualityExpression	s == SONG_NATUREFORM
>9479	Identifier	SONG_NATUREFORM
>9480	Identifier	s
>9481	EqualityExpression	s == SONG_BEASTFORM
>9482	Identifier	SONG_BEASTFORM
>9483	Identifier	s
>9484	EqualityExpression	s == SONG_ENERGYFORM
>9485	Identifier	SONG_ENERGYFORM
>9486	Identifier	s
>9498	FunctionDef	Continuity 
>9499	ParameterList	Song & song , int size
>9500	Parameter	 
>9501	Identifier	size
>9502	ParameterType	int
>9503	Parameter	 
>9504	Identifier	song
>9505	ParameterType	Song &
>9506	ReturnType	void
>9507	CompoundStatement	 
>9508	IfStatement	if ( song . notes . size ( ) > size )
>9509	CompoundStatement	 
>9510	ForStatement	for ( int i = copy . notes . size ( ) - size ; i < copy . notes . size ( ) ; i ++ )
>9511	CompoundStatement	 
>9512	ExpressionStatement	 
>9513	CallExpression	song . notes . push_back ( copy . notes [ i ] )
>9514	ArgumentList	copy . notes [ i ]
>9515	Argument	copy . notes [ i ]
>9516	ArrayIndexing	copy . notes [ i ]
>9517	Identifier	i
>9518	MemberAccess	copy . notes
>9519	Identifier	notes
>9520	Identifier	copy
>9521	Callee	song . notes . push_back
>9522	MemberAccess	song . notes . push_back
>9523	Identifier	push_back
>9524	MemberAccess	song . notes
>9525	Identifier	notes
>9526	Identifier	song
>9527	IncDecOp	 
>9528	IncDec	++
>9529	Identifier	i
>9530	Condition	 
>9531	RelationalExpression	i < copy . notes . size ( )
>9532	CallExpression	copy . notes . size ( )
>9533	ArgumentList	 
>9534	Callee	copy . notes . size
>9535	MemberAccess	copy . notes . size
>9536	Identifier	size
>9537	MemberAccess	copy . notes
>9538	Identifier	notes
>9539	Identifier	copy
>9540	Identifier	i
>9541	ForInit	 
>9542	IdentifierDeclStatement	int i = copy . notes . size ( ) - size ;
>9543	IdentifierDecl	i = copy . notes . size ( ) - size
>9544	AssignmentExpr	i = copy . notes . size ( ) - size
>9545	AdditiveExpression	copy . notes . size ( ) - size
>9546	Identifier	size
>9547	CallExpression	copy . notes . size ( )
>9548	ArgumentList	 
>9549	Callee	copy . notes . size
>9550	MemberAccess	copy . notes . size
>9551	Identifier	size
>9552	MemberAccess	copy . notes
>9553	Identifier	notes
>9554	Identifier	copy
>9555	Identifier	i
>9556	Identifier	i
>9557	IdentifierDeclType	int
>9558	ExpressionStatement	 
>9559	CallExpression	song . notes . clear ( )
>9560	ArgumentList	 
>9561	Callee	song . notes . clear
>9562	MemberAccess	song . notes . clear
>9563	Identifier	clear
>9564	MemberAccess	song . notes
>9565	Identifier	notes
>9566	Identifier	song
>9567	IdentifierDeclStatement	 
>9568	IdentifierDecl	copy = song
>9569	AssignmentExpr	copy = song
>9570	Identifier	song
>9571	Identifier	song
>9572	Identifier	copy
>9573	IdentifierDeclType	Song
>9574	Condition	 
>9575	RelationalExpression	song . notes . size ( ) > size
>9576	Identifier	size
>9577	CallExpression	song . notes . size ( )
>9578	ArgumentList	 
>9579	Callee	song . notes . size
>9580	MemberAccess	song . notes . size
>9581	Identifier	size
>9582	MemberAccess	song . notes
>9583	Identifier	notes
>9584	Identifier	song
>9600	FunctionDef	SongCheck (int idx , Song * s)
>9601	ParameterList	int idx , Song * s
>9602	Parameter	 
>9603	Identifier	s
>9604	ParameterType	Song *
>9605	Parameter	 
>9606	Identifier	idx
>9607	ParameterType	int
>9608	CompoundStatement	 
>9609	ExpressionStatement	 
>9610	AssignmentExpr	songIdx = idx
>9611	Identifier	idx
>9612	Identifier	songIdx
>9613	ExpressionStatement	 
>9614	AssignmentExpr	this -> song = s
>9615	Identifier	s
>9616	PtrMemberAccess	this -> song
>9617	Identifier	song
>9618	Identifier	this
>9619	ExpressionStatement	 
>9620	AssignmentExpr	pass = false
>9621	Identifier	false
>9622	Identifier	pass
>9623	ExpressionStatement	 
>9624	AssignmentExpr	rank = 0
>9625	PrimaryExpression	0
>9626	Identifier	rank
>9649	FunctionDef	Continuity 
>9650	ParameterList	const Song & s
>9651	Parameter	 
>9652	Identifier	s
>9653	ParameterType	const Song &
>9654	ReturnType	int
>9655	CompoundStatement	 
>9656	ReturnStatement	 
>9657	Identifier	songIdx
>9658	ForStatement	for ( int i = 0 ; i < songChecks . size ( ) ; i ++ )
>9659	CompoundStatement	 
>9660	IfStatement	if ( songChecks [ i ] . pass )
>9661	CompoundStatement	 
>9662	IfStatement	if ( lowestRank == - 1 || checkRank < lowestRank )
>9663	CompoundStatement	 
>9664	ExpressionStatement	 
>9665	AssignmentExpr	songIdx = songChecks [ i ] . songIdx
>9666	MemberAccess	songChecks [ i ] . songIdx
>9667	Identifier	songIdx
>9668	ArrayIndexing	songChecks [ i ]
>9669	Identifier	i
>9670	Identifier	songChecks
>9671	Identifier	songIdx
>9672	ExpressionStatement	 
>9673	AssignmentExpr	lowestRank = songChecks [ i ] . rank
>9674	MemberAccess	songChecks [ i ] . rank
>9675	Identifier	rank
>9676	ArrayIndexing	songChecks [ i ]
>9677	Identifier	i
>9678	Identifier	songChecks
>9679	Identifier	lowestRank
>9680	Condition	 
>9681	OrExpression	lowestRank == - 1 || checkRank < lowestRank
>9682	RelationalExpression	checkRank < lowestRank
>9683	Identifier	lowestRank
>9684	Identifier	checkRank
>9685	EqualityExpression	lowestRank == - 1
>9686	UnaryOp	- 1
>9687	PrimaryExpression	1
>9688	UnaryOperator	-
>9689	Identifier	lowestRank
>9690	IdentifierDeclStatement	 
>9691	IdentifierDecl	checkRank = songChecks [ i ] . rank
>9692	AssignmentExpr	checkRank = songChecks [ i ] . rank
>9693	MemberAccess	songChecks [ i ] . rank
>9694	Identifier	rank
>9695	ArrayIndexing	songChecks [ i ]
>9696	Identifier	i
>9697	Identifier	songChecks
>9698	Identifier	checkRank
>9699	Identifier	checkRank
>9700	IdentifierDeclType	int
>9701	Condition	 
>9702	MemberAccess	songChecks [ i ] . pass
>9703	Identifier	pass
>9704	ArrayIndexing	songChecks [ i ]
>9705	Identifier	i
>9706	Identifier	songChecks
>9707	IncDecOp	 
>9708	IncDec	++
>9709	Identifier	i
>9710	Condition	 
>9711	RelationalExpression	i < songChecks . size ( )
>9712	CallExpression	songChecks . size ( )
>9713	ArgumentList	 
>9714	Callee	songChecks . size
>9715	MemberAccess	songChecks . size
>9716	Identifier	size
>9717	Identifier	songChecks
>9718	Identifier	i
>9719	ForInit	 
>9720	IdentifierDeclStatement	int i = 0 ;
>9721	IdentifierDecl	i = 0
>9722	AssignmentExpr	i = 0
>9723	PrimaryExpression	0
>9724	Identifier	i
>9725	Identifier	i
>9726	IdentifierDeclType	int
>9727	IdentifierDeclStatement	 
>9728	IdentifierDecl	lowestRank = - 1
>9729	AssignmentExpr	lowestRank = - 1
>9730	UnaryOp	- 1
>9731	PrimaryExpression	1
>9732	UnaryOperator	-
>9733	Identifier	lowestRank
>9734	Identifier	lowestRank
>9735	IdentifierDeclType	int
>9736	IdentifierDecl	songIdx = SONG_NONE
>9737	AssignmentExpr	songIdx = SONG_NONE
>9738	Identifier	SONG_NONE
>9739	Identifier	SONG_NONE
>9740	Identifier	songIdx
>9741	IdentifierDeclType	int
>9742	ForStatement	for ( int i = 0 ; i < songChecks . size ( ) ; i ++ )
>9743	CompoundStatement	 
>9744	IfStatement	if ( j < song . notes . size ( ) )
>9745	GotoStatement	 
>9746	Identifier	loop
>9747	Condition	 
>9748	RelationalExpression	j < song . notes . size ( )
>9749	CallExpression	song . notes . size ( )
>9750	ArgumentList	 
>9751	Callee	song . notes . size
>9752	MemberAccess	song . notes . size
>9753	Identifier	size
>9754	MemberAccess	song . notes
>9755	Identifier	notes
>9756	Identifier	song
>9757	Identifier	j
>9758	IfStatement	if ( m == ms )
>9759	CompoundStatement	 
>9760	IfStatement	if ( song . notes . size ( ) - last < 2 )
>9761	CompoundStatement	 
>9762	ExpressionStatement	 
>9763	AssignmentExpr	songChecks [ i ] . rank = rank
>9764	Identifier	rank
>9765	MemberAccess	songChecks [ i ] . rank
>9766	Identifier	rank
>9767	ArrayIndexing	songChecks [ i ]
>9768	Identifier	i
>9769	Identifier	songChecks
>9770	ExpressionStatement	 
>9771	AssignmentExpr	songChecks [ i ] . pass = true
>9772	Identifier	true
>9773	MemberAccess	songChecks [ i ] . pass
>9774	Identifier	pass
>9775	ArrayIndexing	songChecks [ i ]
>9776	Identifier	i
>9777	Identifier	songChecks
>9778	Condition	 
>9779	RelationalExpression	song . notes . size ( ) - last < 2
>9780	PrimaryExpression	2
>9781	AdditiveExpression	song . notes . size ( ) - last
>9782	Identifier	last
>9783	CallExpression	song . notes . size ( )
>9784	ArgumentList	 
>9785	Callee	song . notes . size
>9786	MemberAccess	song . notes . size
>9787	Identifier	size
>9788	MemberAccess	song . notes
>9789	Identifier	notes
>9790	Identifier	song
>9791	Condition	 
>9792	EqualityExpression	m == ms
>9793	Identifier	ms
>9794	Identifier	m
>9795	ForStatement	for ( c = 0 ; c < ms ; c ++ )
>9796	CompoundStatement	 
>9797	IfStatement	if ( j < song . notes . size ( ) )
>9798	ElseStatement	else
>9799	CompoundStatement	 
>9800	BreakStatement	 
>9801	CompoundStatement	 
>9802	ExpressionStatement	 
>9803	AssignmentExpr	last = j
>9804	Identifier	j
>9805	Identifier	last
>9806	ExpressionStatement	 
>9807	AssignmentExpr	rank += diff
>9808	Identifier	diff
>9809	Identifier	rank
>9810	ExpressionStatement	 
>9811	IncDecOp	m ++
>9812	IncDec	++
>9813	Identifier	m
>9814	IfStatement	if ( diff >= songTolerance )
>9815	BreakStatement	 
>9816	Condition	 
>9817	RelationalExpression	diff >= songTolerance
>9818	Identifier	songTolerance
>9819	Identifier	diff
>9820	IfStatement	if ( diff < 0 )
>9821	ExpressionStatement	 
>9822	AssignmentExpr	diff = 1
>9823	PrimaryExpression	1
>9824	Identifier	diff
>9825	Condition	 
>9826	RelationalExpression	diff < 0
>9827	PrimaryExpression	0
>9828	Identifier	diff
>9829	IdentifierDeclStatement	 
>9830	IdentifierDecl	diff = j - last
>9831	AssignmentExpr	diff = j - last
>9832	AdditiveExpression	j - last
>9833	Identifier	last
>9834	Identifier	j
>9835	Identifier	diff
>9836	Identifier	diff
>9837	IdentifierDeclType	int
>9838	IfStatement	if ( m == 0 )
>9839	ExpressionStatement	 
>9840	AssignmentExpr	last = j - 1
>9841	AdditiveExpression	j - 1
>9842	PrimaryExpression	1
>9843	Identifier	j
>9844	Identifier	last
>9845	Condition	 
>9846	EqualityExpression	m == 0
>9847	PrimaryExpression	0
>9848	Identifier	m
>9849	Condition	 
>9850	RelationalExpression	j < song . notes . size ( )
>9851	CallExpression	song . notes . size ( )
>9852	ArgumentList	 
>9853	Callee	song . notes . size
>9854	MemberAccess	song . notes . size
>9855	Identifier	size
>9856	MemberAccess	song . notes
>9857	Identifier	notes
>9858	Identifier	song
>9859	Identifier	j
>9860	WhileStatement	while ( j < song . notes . size ( ) && ( * songChecks [ i ] . song ) . notes [ c ] != song . notes [ j ] )
>9861	CompoundStatement	 
>9862	IfStatement	if ( j >= song . notes . size ( ) )
>9863	BreakStatement	 
>9864	Condition	 
>9865	RelationalExpression	j >= song . notes . size ( )
>9866	CallExpression	song . notes . size ( )
>9867	ArgumentList	 
>9868	Callee	song . notes . size
>9869	MemberAccess	song . notes . size
>9870	Identifier	size
>9871	MemberAccess	song . notes
>9872	Identifier	notes
>9873	Identifier	song
>9874	Identifier	j
>9875	ExpressionStatement	 
>9876	IncDecOp	j ++
>9877	IncDec	++
>9878	Identifier	j
>9879	Condition	 
>9880	AndExpression	j < song . notes . size ( ) && ( * songChecks [ i ] . song ) . notes [ c ] != song . notes [ j ]
>9881	EqualityExpression	( * songChecks [ i ] . song ) . notes [ c ] != song . notes [ j ]
>9882	ArrayIndexing	song . notes [ j ]
>9883	Identifier	j
>9884	MemberAccess	song . notes
>9885	Identifier	notes
>9886	Identifier	song
>9887	ArrayIndexing	( * songChecks [ i ] . song ) . notes [ c ]
>9888	Identifier	c
>9889	MemberAccess	( * songChecks [ i ] . song ) . notes
>9890	Identifier	notes
>9891	UnaryOp	* songChecks [ i ] . song
>9892	MemberAccess	songChecks [ i ] . song
>9893	Identifier	song
>9894	ArrayIndexing	songChecks [ i ]
>9895	Identifier	i
>9896	Identifier	songChecks
>9897	UnaryOperator	*
>9898	RelationalExpression	j < song . notes . size ( )
>9899	CallExpression	song . notes . size ( )
>9900	ArgumentList	 
>9901	Callee	song . notes . size
>9902	MemberAccess	song . notes . size
>9903	Identifier	size
>9904	MemberAccess	song . notes
>9905	Identifier	notes
>9906	Identifier	song
>9907	Identifier	j
>9908	IncDecOp	 
>9909	IncDec	++
>9910	Identifier	c
>9911	Condition	 
>9912	RelationalExpression	c < ms
>9913	Identifier	ms
>9914	Identifier	c
>9915	ForInit	 
>9916	AssignmentExpr	c = 0
>9917	PrimaryExpression	0
>9918	Identifier	c
>9919	ExpressionStatement	 
>9920	AssignmentExpr	m = 0
>9921	PrimaryExpression	0
>9922	Identifier	m
>9923	ExpressionStatement	 
>9924	AssignmentExpr	last = j
>9925	Identifier	j
>9926	Identifier	last
>9927	ExpressionStatement	 
>9928	AssignmentExpr	rank = 0
>9929	PrimaryExpression	0
>9930	Identifier	rank
>9931	Label	 
>9932	Identifier	loop
>9933	ExpressionStatement	 
>9934	AssignmentExpr	j = 0
>9935	PrimaryExpression	0
>9936	Identifier	j
>9937	IdentifierDeclStatement	 
>9938	IdentifierDecl	ms = songChecks [ i ] . song -> notes . size ( )
>9939	AssignmentExpr	ms = songChecks [ i ] . song -> notes . size ( )
>9940	CallExpression	songChecks [ i ] . song -> notes . size ( )
>9941	ArgumentList	 
>9942	Callee	songChecks [ i ] . song -> notes . size
>9943	MemberAccess	songChecks [ i ] . song -> notes . size
>9944	Identifier	size
>9945	PtrMemberAccess	songChecks [ i ] . song -> notes
>9946	Identifier	notes
>9947	MemberAccess	songChecks [ i ] . song
>9948	Identifier	song
>9949	ArrayIndexing	songChecks [ i ]
>9950	Identifier	i
>9951	Identifier	songChecks
>9952	Identifier	ms
>9953	Identifier	ms
>9954	IdentifierDeclType	int
>9955	IdentifierDeclStatement	 
>9956	IdentifierDecl	rank = 0
>9957	AssignmentExpr	rank = 0
>9958	PrimaryExpression	0
>9959	Identifier	rank
>9960	Identifier	rank
>9961	IdentifierDeclType	int
>9962	IdentifierDecl	last = 0
>9963	AssignmentExpr	last = 0
>9964	PrimaryExpression	0
>9965	Identifier	last
>9966	Identifier	last
>9967	IdentifierDeclType	int
>9968	IdentifierDecl	m = 0
>9969	AssignmentExpr	m = 0
>9970	PrimaryExpression	0
>9971	Identifier	m
>9972	Identifier	m
>9973	IdentifierDeclType	int
>9974	IdentifierDecl	c = 0
>9975	AssignmentExpr	c = 0
>9976	PrimaryExpression	0
>9977	Identifier	c
>9978	Identifier	c
>9979	IdentifierDeclType	int
>9980	IdentifierDecl	j = 0
>9981	AssignmentExpr	j = 0
>9982	PrimaryExpression	0
>9983	Identifier	j
>9984	Identifier	j
>9985	IdentifierDeclType	int
>9986	IncDecOp	 
>9987	IncDec	++
>9988	Identifier	i
>9989	Condition	 
>9990	RelationalExpression	i < songChecks . size ( )
>9991	CallExpression	songChecks . size ( )
>9992	ArgumentList	 
>9993	Callee	songChecks . size
>9994	MemberAccess	songChecks . size
>9995	Identifier	size
>9996	Identifier	songChecks
>9997	Identifier	i
>9998	ForInit	 
>9999	IdentifierDeclStatement	int i = 0 ;
>10000	IdentifierDecl	i = 0
>10001	AssignmentExpr	i = 0
>10002	PrimaryExpression	0
>10003	Identifier	i
>10004	Identifier	i
>10005	IdentifierDeclType	int
>10006	ForStatement	for ( int c = 0 ; c < songBank . size ( ) ; c ++ )
>10007	CompoundStatement	 
>10008	IfStatement	if ( knowsSong [ i ] )
>10009	CompoundStatement	 
>10010	ExpressionStatement	 
>10011	CallExpression	songChecks . push_back ( SongCheck ( i , s ) )
>10012	ArgumentList	SongCheck ( i , s )
>10013	Argument	SongCheck ( i , s )
>10014	CallExpression	SongCheck ( i , s )
>10015	ArgumentList	i
>10016	Argument	s
>10017	Identifier	s
>10018	Argument	i
>10019	Identifier	i
>10020	Callee	SongCheck
>10021	Identifier	SongCheck
>10022	Callee	songChecks . push_back
>10023	MemberAccess	songChecks . push_back
>10024	Identifier	push_back
>10025	Identifier	songChecks
>10026	IdentifierDeclStatement	 
>10027	IdentifierDecl	* s = & songBank [ i ]
>10028	AssignmentExpr	* s = & songBank [ i ]
>10029	UnaryOp	& songBank [ i ]
>10030	ArrayIndexing	songBank [ i ]
>10031	Identifier	i
>10032	Identifier	songBank
>10033	UnaryOperator	&
>10034	Identifier	s
>10035	Identifier	s
>10036	IdentifierDeclType	Song *
>10037	Condition	 
>10038	ArrayIndexing	knowsSong [ i ]
>10039	Identifier	i
>10040	Identifier	knowsSong
>10041	IdentifierDeclStatement	 
>10042	IdentifierDecl	i = songSlotsToType [ c ]
>10043	AssignmentExpr	i = songSlotsToType [ c ]
>10044	ArrayIndexing	songSlotsToType [ c ]
>10045	Identifier	c
>10046	Identifier	songSlotsToType
>10047	Identifier	i
>10048	Identifier	i
>10049	IdentifierDeclType	int
>10050	IncDecOp	 
>10051	IncDec	++
>10052	Identifier	c
>10053	Condition	 
>10054	RelationalExpression	c < songBank . size ( )
>10055	CallExpression	songBank . size ( )
>10056	ArgumentList	 
>10057	Callee	songBank . size
>10058	MemberAccess	songBank . size
>10059	Identifier	size
>10060	Identifier	songBank
>10061	Identifier	c
>10062	ForInit	 
>10063	IdentifierDeclStatement	int c = 0 ;
>10064	IdentifierDecl	c = 0
>10065	AssignmentExpr	c = 0
>10066	PrimaryExpression	0
>10067	Identifier	c
>10068	Identifier	c
>10069	IdentifierDeclType	int
>10070	IdentifierDeclStatement	 
>10071	IdentifierDecl	songChecks
>10072	Identifier	songChecks
>10073	IdentifierDeclType	std 
>10074	ExpressionStatement	 
>10075	CallExpression	shortenSong ( song , 64 )
>10076	ArgumentList	song
>10077	Argument	64
>10078	PrimaryExpression	64
>10079	Argument	song
>10080	Identifier	song
>10081	Callee	shortenSong
>10082	Identifier	shortenSong
>10083	IdentifierDeclStatement	 
>10084	IdentifierDecl	song = s
>10085	AssignmentExpr	song = s
>10086	Identifier	s
>10087	Identifier	s
>10088	Identifier	song
>10089	IdentifierDeclType	Song
>10142	FunctionDef	Continuity 
>10143	ParameterList	const Song & song
>10144	Parameter	 
>10145	Identifier	song
>10146	ParameterType	const Song &
>10147	ReturnType	int
>10148	CompoundStatement	 
>10149	ReturnStatement	 
>10150	UnaryOp	- 1
>10151	PrimaryExpression	1
>10152	UnaryOperator	-
>10153	ForStatement	for ( int c = 0 ; c < songBank . size ( ) ; c ++ )
>10154	CompoundStatement	 
>10155	IfStatement	if ( ( knowAllSongs || knowsSong [ i ] ) )
>10156	CompoundStatement	 
>10157	CompoundStatement	 
>10158	IfStatement	if ( foundSong )
>10159	CompoundStatement	 
>10160	ReturnStatement	 
>10161	Identifier	i
>10162	Condition	 
>10163	Identifier	foundSong
>10164	IfStatement	if ( j != song . notes . size ( ) - 1 )
>10165	ExpressionStatement	 
>10166	AssignmentExpr	foundSong = false
>10167	Identifier	false
>10168	Identifier	foundSong
>10169	Condition	 
>10170	EqualityExpression	j != song . notes . size ( ) - 1
>10171	AdditiveExpression	song . notes . size ( ) - 1
>10172	PrimaryExpression	1
>10173	CallExpression	song . notes . size ( )
>10174	ArgumentList	 
>10175	Callee	song . notes . size
>10176	MemberAccess	song . notes . size
>10177	Identifier	size
>10178	MemberAccess	song . notes
>10179	Identifier	notes
>10180	Identifier	song
>10181	Identifier	j
>10182	ForStatement	for ( j = 0 ; j < song . notes . size ( ) ; j ++ )
>10183	CompoundStatement	 
>10184	IfStatement	if ( currentNote >= 0 && currentNote < ( * s ) . notes . size ( ) )
>10185	CompoundStatement	 
>10186	IfStatement	if ( currentNote == s -> notes . size ( ) )
>10187	CompoundStatement	 
>10188	IfStatement	if ( j == song . notes . size ( ) - 1 )
>10189	ElseStatement	else
>10190	CompoundStatement	 
>10191	ExpressionStatement	 
>10192	AssignmentExpr	currentNote = 0
>10193	PrimaryExpression	0
>10194	Identifier	currentNote
>10195	CompoundStatement	 
>10196	BreakStatement	 
>10197	ExpressionStatement	 
>10198	AssignmentExpr	foundSong = true
>10199	Identifier	true
>10200	Identifier	foundSong
>10201	Condition	 
>10202	EqualityExpression	j == song . notes . size ( ) - 1
>10203	AdditiveExpression	song . notes . size ( ) - 1
>10204	PrimaryExpression	1
>10205	CallExpression	song . notes . size ( )
>10206	ArgumentList	 
>10207	Callee	song . notes . size
>10208	MemberAccess	song . notes . size
>10209	Identifier	size
>10210	MemberAccess	song . notes
>10211	Identifier	notes
>10212	Identifier	song
>10213	Identifier	j
>10214	Condition	 
>10215	EqualityExpression	currentNote == s -> notes . size ( )
>10216	CallExpression	s -> notes . size ( )
>10217	ArgumentList	 
>10218	Callee	s -> notes . size
>10219	MemberAccess	s -> notes . size
>10220	Identifier	size
>10221	PtrMemberAccess	s -> notes
>10222	Identifier	notes
>10223	Identifier	s
>10224	Identifier	currentNote
>10225	IfStatement	if ( bankNote == songNote )
>10226	ElseStatement	else
>10227	ExpressionStatement	 
>10228	AssignmentExpr	currentNote = 0
>10229	PrimaryExpression	0
>10230	Identifier	currentNote
>10231	CompoundStatement	 
>10232	ExpressionStatement	 
>10233	IncDecOp	currentNote ++
>10234	IncDec	++
>10235	Identifier	currentNote
>10236	Condition	 
>10237	EqualityExpression	bankNote == songNote
>10238	Identifier	songNote
>10239	Identifier	bankNote
>10240	IdentifierDeclStatement	 
>10241	IdentifierDecl	songNote = song . notes [ j ]
>10242	AssignmentExpr	songNote = song . notes [ j ]
>10243	ArrayIndexing	song . notes [ j ]
>10244	Identifier	j
>10245	MemberAccess	song . notes
>10246	Identifier	notes
>10247	Identifier	song
>10248	Identifier	songNote
>10249	Identifier	songNote
>10250	IdentifierDeclType	int
>10251	IdentifierDeclStatement	 
>10252	IdentifierDecl	bankNote = ( * s ) . notes [ currentNote ]
>10253	AssignmentExpr	bankNote = ( * s ) . notes [ currentNote ]
>10254	ArrayIndexing	( * s ) . notes [ currentNote ]
>10255	Identifier	currentNote
>10256	MemberAccess	( * s ) . notes
>10257	Identifier	notes
>10258	UnaryOp	* s
>10259	Identifier	s
>10260	UnaryOperator	*
>10261	Identifier	bankNote
>10262	Identifier	bankNote
>10263	IdentifierDeclType	int
>10264	Condition	 
>10265	AndExpression	currentNote >= 0 && currentNote < ( * s ) . notes . size ( )
>10266	RelationalExpression	currentNote < ( * s ) . notes . size ( )
>10267	CallExpression	( * s ) . notes . size ( )
>10268	ArgumentList	 
>10269	Callee	( * s ) . notes . size
>10270	MemberAccess	( * s ) . notes . size
>10271	Identifier	size
>10272	MemberAccess	( * s ) . notes
>10273	Identifier	notes
>10274	UnaryOp	* s
>10275	Identifier	s
>10276	UnaryOperator	*
>10277	Identifier	currentNote
>10278	RelationalExpression	currentNote >= 0
>10279	PrimaryExpression	0
>10280	Identifier	currentNote
>10281	IncDecOp	 
>10282	IncDec	++
>10283	Identifier	j
>10284	Condition	 
>10285	RelationalExpression	j < song . notes . size ( )
>10286	CallExpression	song . notes . size ( )
>10287	ArgumentList	 
>10288	Callee	song . notes . size
>10289	MemberAccess	song . notes . size
>10290	Identifier	size
>10291	MemberAccess	song . notes
>10292	Identifier	notes
>10293	Identifier	song
>10294	Identifier	j
>10295	ForInit	 
>10296	AssignmentExpr	j = 0
>10297	PrimaryExpression	0
>10298	Identifier	j
>10299	IdentifierDeclStatement	 
>10300	IdentifierDecl	currentNote = 0
>10301	AssignmentExpr	currentNote = 0
>10302	PrimaryExpression	0
>10303	Identifier	currentNote
>10304	Identifier	currentNote
>10305	IdentifierDeclType	int
>10306	IdentifierDeclStatement	 
>10307	IdentifierDecl	foundSong = false
>10308	AssignmentExpr	foundSong = false
>10309	Identifier	false
>10310	Identifier	false
>10311	Identifier	foundSong
>10312	IdentifierDeclType	bool
>10313	IdentifierDeclStatement	 
>10314	IdentifierDecl	j = 0
>10315	AssignmentExpr	j = 0
>10316	PrimaryExpression	0
>10317	Identifier	j
>10318	Identifier	j
>10319	IdentifierDeclType	int
>10320	IfStatement	if ( s -> notes . empty ( ) )
>10321	ContinueStatement	 
>10322	Condition	 
>10323	CallExpression	s -> notes . empty ( )
>10324	ArgumentList	 
>10325	Callee	s -> notes . empty
>10326	MemberAccess	s -> notes . empty
>10327	Identifier	empty
>10328	PtrMemberAccess	s -> notes
>10329	Identifier	notes
>10330	Identifier	s
>10331	IdentifierDeclStatement	 
>10332	IdentifierDecl	* s = & songBank [ i ]
>10333	AssignmentExpr	* s = & songBank [ i ]
>10334	UnaryOp	& songBank [ i ]
>10335	ArrayIndexing	songBank [ i ]
>10336	Identifier	i
>10337	Identifier	songBank
>10338	UnaryOperator	&
>10339	Identifier	s
>10340	Identifier	s
>10341	IdentifierDeclType	Song *
>10342	Condition	 
>10343	OrExpression	knowAllSongs || knowsSong [ i ]
>10344	ArrayIndexing	knowsSong [ i ]
>10345	Identifier	i
>10346	Identifier	knowsSong
>10347	Identifier	knowAllSongs
>10348	IdentifierDeclStatement	 
>10349	IdentifierDecl	i = songSlotsToType [ c ]
>10350	AssignmentExpr	i = songSlotsToType [ c ]
>10351	ArrayIndexing	songSlotsToType [ c ]
>10352	Identifier	c
>10353	Identifier	songSlotsToType
>10354	Identifier	i
>10355	Identifier	i
>10356	IdentifierDeclType	int
>10357	IncDecOp	 
>10358	IncDec	++
>10359	Identifier	c
>10360	Condition	 
>10361	RelationalExpression	c < songBank . size ( )
>10362	CallExpression	songBank . size ( )
>10363	ArgumentList	 
>10364	Callee	songBank . size
>10365	MemberAccess	songBank . size
>10366	Identifier	size
>10367	Identifier	songBank
>10368	Identifier	c
>10369	ForInit	 
>10370	IdentifierDeclStatement	int c = 0 ;
>10371	IdentifierDecl	c = 0
>10372	AssignmentExpr	c = 0
>10373	PrimaryExpression	0
>10374	Identifier	c
>10375	Identifier	c
>10376	IdentifierDeclType	int
>10377	IfStatement	if ( song . notes . size ( ) > 64 )
>10378	ReturnStatement	 
>10379	Identifier	SONG_NONE
>10380	Condition	 
>10381	RelationalExpression	song . notes . size ( ) > 64
>10382	PrimaryExpression	64
>10383	CallExpression	song . notes . size ( )
>10384	ArgumentList	 
>10385	Callee	song . notes . size
>10386	MemberAccess	song . notes . size
>10387	Identifier	size
>10388	MemberAccess	song . notes
>10389	Identifier	notes
>10390	Identifier	song
>10391	IdentifierDeclStatement	 
>10392	IdentifierDecl	knowAllSongs = false
>10393	AssignmentExpr	knowAllSongs = false
>10394	Identifier	false
>10395	Identifier	false
>10396	Identifier	knowAllSongs
>10397	IdentifierDeclType	bool
>10438	FunctionDef	Continuity 
>10439	ParameterList	int * hours , int * minutes , int * seconds
>10440	Parameter	 
>10441	Identifier	seconds
>10442	ParameterType	int *
>10443	Parameter	 
>10444	Identifier	minutes
>10445	ParameterType	int *
>10446	Parameter	 
>10447	Identifier	hours
>10448	ParameterType	int *
>10449	ReturnType	void
>10450	CompoundStatement	 
>10451	ExpressionStatement	 
>10452	AssignmentExpr	( * seconds ) = this -> seconds - ( * minutes ) * 60 - ( * hours ) * 60 * 60
>10453	AdditiveExpression	this -> seconds - ( * minutes ) * 60 - ( * hours ) * 60 * 60
>10454	AdditiveExpression	( * minutes ) * 60 - ( * hours ) * 60 * 60
>10455	MultiplicativeExpression	( * hours ) * 60 * 60
>10456	MultiplicativeExpression	60 * 60
>10457	PrimaryExpression	60
>10458	PrimaryExpression	60
>10459	UnaryOp	* hours
>10460	Identifier	hours
>10461	UnaryOperator	*
>10462	MultiplicativeExpression	( * minutes ) * 60
>10463	PrimaryExpression	60
>10464	UnaryOp	* minutes
>10465	Identifier	minutes
>10466	UnaryOperator	*
>10467	PtrMemberAccess	this -> seconds
>10468	Identifier	seconds
>10469	Identifier	this
>10470	UnaryOp	* seconds
>10471	Identifier	seconds
>10472	UnaryOperator	*
>10473	ExpressionStatement	 
>10474	AssignmentExpr	( * minutes ) = int ( ( this -> seconds / 60 ) - ( ( * hours ) * 60 ) )
>10475	CallExpression	int ( ( this -> seconds / 60 ) - ( ( * hours ) * 60 ) )
>10476	ArgumentList	( this -> seconds / 60 ) - ( ( * hours ) * 60 )
>10477	Argument	( this -> seconds / 60 ) - ( ( * hours ) * 60 )
>10478	AdditiveExpression	( this -> seconds / 60 ) - ( ( * hours ) * 60 )
>10479	MultiplicativeExpression	( * hours ) * 60
>10480	PrimaryExpression	60
>10481	UnaryOp	* hours
>10482	Identifier	hours
>10483	UnaryOperator	*
>10484	MultiplicativeExpression	this -> seconds / 60
>10485	PrimaryExpression	60
>10486	PtrMemberAccess	this -> seconds
>10487	Identifier	seconds
>10488	Identifier	this
>10489	Callee	int
>10490	Identifier	int
>10491	UnaryOp	* minutes
>10492	Identifier	minutes
>10493	UnaryOperator	*
>10494	ExpressionStatement	 
>10495	AssignmentExpr	( * hours ) = int ( this -> seconds / ( 60 * 60 ) )
>10496	CallExpression	int ( this -> seconds / ( 60 * 60 ) )
>10497	ArgumentList	this -> seconds / ( 60 * 60 )
>10498	Argument	this -> seconds / ( 60 * 60 )
>10499	MultiplicativeExpression	this -> seconds / ( 60 * 60 )
>10500	MultiplicativeExpression	60 * 60
>10501	PrimaryExpression	60
>10502	PrimaryExpression	60
>10503	PtrMemberAccess	this -> seconds
>10504	Identifier	seconds
>10505	Identifier	this
>10506	Callee	int
>10507	Identifier	int
>10508	UnaryOp	* hours
>10509	Identifier	hours
>10510	UnaryOperator	*
>10524	FunctionDef	Continuity 
>10525	ParameterList	int song
>10526	Parameter	 
>10527	Identifier	song
>10528	ParameterType	int
>10529	ReturnType	bool
>10530	CompoundStatement	 
>10531	ReturnStatement	 
>10532	ArrayIndexing	knowsSong [ song ]
>10533	Identifier	song
>10534	Identifier	knowsSong
>10542	FunctionDef	Continuity 
>10543	ParameterList	const std 
>10544	Parameter	 
>10545	Identifier	name
>10546	ParameterType	const std 
>10547	ReturnType	std 
>10548	CompoundStatement	 
>10549	ReturnStatement	 
>10550	PrimaryExpression	\"\"
>10551	IfStatement	if ( i )
>10552	CompoundStatement	 
>10553	ReturnStatement	 
>10554	PtrMemberAccess	i -> gfx
>10555	Identifier	gfx
>10556	Identifier	i
>10557	Condition	 
>10558	Identifier	i
>10559	IdentifierDeclStatement	 
>10560	IdentifierDecl	* i = getIngredientDataByName ( name )
>10561	AssignmentExpr	* i = getIngredientDataByName ( name )
>10562	CallExpression	getIngredientDataByName ( name )
>10563	ArgumentList	name
>10564	Argument	name
>10565	Identifier	name
>10566	Callee	getIngredientDataByName
>10567	Identifier	getIngredientDataByName
>10568	Identifier	i
>10569	Identifier	i
>10570	IdentifierDeclType	IngredientData *
>10579	FunctionDef	Continuity 
>10580	ParameterList	float dt
>10581	Parameter	 
>10582	Identifier	dt
>10583	ParameterType	float
>10584	ReturnType	void
>10585	CompoundStatement	 
>10586	IfStatement	if ( dsq -> game -> isActive ( ) && ! dsq -> game -> isPaused ( ) )
>10587	CompoundStatement	 
>10588	IfStatement	if ( regenTimer . isActive ( ) )
>10589	CompoundStatement	 
>10590	CompoundStatement	 
>10591	IfStatement	if ( a )
>10592	CompoundStatement	 
>10593	ExpressionStatement	 
>10594	CallExpression	a -> heal ( dt * 0.5f )
>10595	ArgumentList	dt * 0.5f
>10596	Argument	dt * 0.5f
>10597	MultiplicativeExpression	dt * 0.5f
>10598	PrimaryExpression	0.5f
>10599	Identifier	dt
>10600	Callee	a -> heal
>10601	PtrMemberAccess	a -> heal
>10602	Identifier	heal
>10603	Identifier	a
>10604	Condition	 
>10605	Identifier	a
>10606	IdentifierDeclStatement	 
>10607	IdentifierDecl	* a = dsq -> game -> avatar
>10608	AssignmentExpr	* a = dsq -> game -> avatar
>10609	PtrMemberAccess	dsq -> game -> avatar
>10610	Identifier	avatar
>10611	PtrMemberAccess	dsq -> game
>10612	Identifier	game
>10613	Identifier	dsq
>10614	Identifier	a
>10615	Identifier	a
>10616	IdentifierDeclType	Avatar *
>10617	Condition	 
>10618	CallExpression	regenTimer . isActive ( )
>10619	ArgumentList	 
>10620	Callee	regenTimer . isActive
>10621	MemberAccess	regenTimer . isActive
>10622	Identifier	isActive
>10623	Identifier	regenTimer
>10624	IfStatement	if ( invincibleTimer . updateCheck ( dt ) )
>10625	CompoundStatement	 
>10626	Condition	 
>10627	CallExpression	invincibleTimer . updateCheck ( dt )
>10628	ArgumentList	dt
>10629	Argument	dt
>10630	Identifier	dt
>10631	Callee	invincibleTimer . updateCheck
>10632	MemberAccess	invincibleTimer . updateCheck
>10633	Identifier	updateCheck
>10634	Identifier	invincibleTimer
>10635	IfStatement	if ( regenTimer . updateCheck ( dt ) )
>10636	CompoundStatement	 
>10637	Condition	 
>10638	CallExpression	regenTimer . updateCheck ( dt )
>10639	ArgumentList	dt
>10640	Argument	dt
>10641	Identifier	dt
>10642	Callee	regenTimer . updateCheck
>10643	MemberAccess	regenTimer . updateCheck
>10644	Identifier	updateCheck
>10645	Identifier	regenTimer
>10646	IfStatement	if ( tripTimer . updateCheck ( dt ) )
>10647	CompoundStatement	 
>10648	ExpressionStatement	 
>10649	CallExpression	dsq -> game -> avatar -> removeTripEffects ( )
>10650	ArgumentList	 
>10651	Callee	dsq -> game -> avatar -> removeTripEffects
>10652	PtrMemberAccess	dsq -> game -> avatar -> removeTripEffects
>10653	Identifier	removeTripEffects
>10654	PtrMemberAccess	dsq -> game -> avatar
>10655	Identifier	avatar
>10656	PtrMemberAccess	dsq -> game
>10657	Identifier	game
>10658	Identifier	dsq
>10659	Condition	 
>10660	CallExpression	tripTimer . updateCheck ( dt )
>10661	ArgumentList	dt
>10662	Argument	dt
>10663	Identifier	dt
>10664	Callee	tripTimer . updateCheck
>10665	MemberAccess	tripTimer . updateCheck
>10666	Identifier	updateCheck
>10667	Identifier	tripTimer
>10668	IfStatement	if ( fishPoisonTimer . updateCheck ( dt ) )
>10669	CompoundStatement	 
>10670	ExpressionStatement	 
>10671	AssignmentExpr	fishPoison = 1
>10672	PrimaryExpression	1
>10673	Identifier	fishPoison
>10674	Condition	 
>10675	CallExpression	fishPoisonTimer . updateCheck ( dt )
>10676	ArgumentList	dt
>10677	Argument	dt
>10678	Identifier	dt
>10679	Callee	fishPoisonTimer . updateCheck
>10680	MemberAccess	fishPoisonTimer . updateCheck
>10681	Identifier	updateCheck
>10682	Identifier	fishPoisonTimer
>10683	IfStatement	if ( biteMultTimer . updateCheck ( dt ) )
>10684	CompoundStatement	 
>10685	ExpressionStatement	 
>10686	AssignmentExpr	biteMult = 1
>10687	PrimaryExpression	1
>10688	Identifier	biteMult
>10689	Condition	 
>10690	CallExpression	biteMultTimer . updateCheck ( dt )
>10691	ArgumentList	dt
>10692	Argument	dt
>10693	Identifier	dt
>10694	Callee	biteMultTimer . updateCheck
>10695	MemberAccess	biteMultTimer . updateCheck
>10696	Identifier	updateCheck
>10697	Identifier	biteMultTimer
>10698	IfStatement	if ( defenseMultTimer . updateCheck ( dt ) )
>10699	CompoundStatement	 
>10700	ExpressionStatement	 
>10701	AssignmentExpr	defenseMult = 1
>10702	PrimaryExpression	1
>10703	Identifier	defenseMult
>10704	Condition	 
>10705	CallExpression	defenseMultTimer . updateCheck ( dt )
>10706	ArgumentList	dt
>10707	Argument	dt
>10708	Identifier	dt
>10709	Callee	defenseMultTimer . updateCheck
>10710	MemberAccess	defenseMultTimer . updateCheck
>10711	Identifier	updateCheck
>10712	Identifier	defenseMultTimer
>10713	IfStatement	if ( energyTimer . updateCheck ( dt ) )
>10714	CompoundStatement	 
>10715	ExpressionStatement	 
>10716	AssignmentExpr	energyMult = 0
>10717	PrimaryExpression	0
>10718	Identifier	energyMult
>10719	Condition	 
>10720	CallExpression	energyTimer . updateCheck ( dt )
>10721	ArgumentList	dt
>10722	Argument	dt
>10723	Identifier	dt
>10724	Callee	energyTimer . updateCheck
>10725	MemberAccess	energyTimer . updateCheck
>10726	Identifier	updateCheck
>10727	Identifier	energyTimer
>10728	IfStatement	if ( dsq -> game -> avatar && dsq -> game -> avatar -> isInputEnabled ( ) )
>10729	CompoundStatement	 
>10730	IfStatement	if ( dsq -> game -> avatar -> web )
>10731	CompoundStatement	 
>10732	IfStatement	if ( webBitTimer . updateCheck ( dt ) )
>10733	CompoundStatement	 
>10734	ExpressionStatement	 
>10735	CallExpression	dsq -> game -> avatar -> web -> addPoint ( dsq -> game -> avatar -> position )
>10736	ArgumentList	dsq -> game -> avatar -> position
>10737	Argument	dsq -> game -> avatar -> position
>10738	PtrMemberAccess	dsq -> game -> avatar -> position
>10739	Identifier	position
>10740	PtrMemberAccess	dsq -> game -> avatar
>10741	Identifier	avatar
>10742	PtrMemberAccess	dsq -> game
>10743	Identifier	game
>10744	Identifier	dsq
>10745	Callee	dsq -> game -> avatar -> web -> addPoint
>10746	PtrMemberAccess	dsq -> game -> avatar -> web -> addPoint
>10747	Identifier	addPoint
>10748	PtrMemberAccess	dsq -> game -> avatar -> web
>10749	Identifier	web
>10750	PtrMemberAccess	dsq -> game -> avatar
>10751	Identifier	avatar
>10752	PtrMemberAccess	dsq -> game
>10753	Identifier	game
>10754	Identifier	dsq
>10755	ExpressionStatement	 
>10756	CallExpression	webBitTimer . start ( webBitTime )
>10757	ArgumentList	webBitTime
>10758	Argument	webBitTime
>10759	Identifier	webBitTime
>10760	Callee	webBitTimer . start
>10761	MemberAccess	webBitTimer . start
>10762	Identifier	start
>10763	Identifier	webBitTimer
>10764	Condition	 
>10765	CallExpression	webBitTimer . updateCheck ( dt )
>10766	ArgumentList	dt
>10767	Argument	dt
>10768	Identifier	dt
>10769	Callee	webBitTimer . updateCheck
>10770	MemberAccess	webBitTimer . updateCheck
>10771	Identifier	updateCheck
>10772	Identifier	webBitTimer
>10773	Condition	 
>10774	PtrMemberAccess	dsq -> game -> avatar -> web
>10775	Identifier	web
>10776	PtrMemberAccess	dsq -> game -> avatar
>10777	Identifier	avatar
>10778	PtrMemberAccess	dsq -> game
>10779	Identifier	game
>10780	Identifier	dsq
>10781	IfStatement	if ( webTimer . updateCheck ( dt ) )
>10782	CompoundStatement	 
>10783	ExpressionStatement	 
>10784	CallExpression	dsq -> game -> avatar -> clearWeb ( )
>10785	ArgumentList	 
>10786	Callee	dsq -> game -> avatar -> clearWeb
>10787	PtrMemberAccess	dsq -> game -> avatar -> clearWeb
>10788	Identifier	clearWeb
>10789	PtrMemberAccess	dsq -> game -> avatar
>10790	Identifier	avatar
>10791	PtrMemberAccess	dsq -> game
>10792	Identifier	game
>10793	Identifier	dsq
>10794	Condition	 
>10795	CallExpression	webTimer . updateCheck ( dt )
>10796	ArgumentList	dt
>10797	Argument	dt
>10798	Identifier	dt
>10799	Callee	webTimer . updateCheck
>10800	MemberAccess	webTimer . updateCheck
>10801	Identifier	updateCheck
>10802	Identifier	webTimer
>10803	IfStatement	if ( poison )
>10804	CompoundStatement	 
>10805	IfStatement	if ( poisonBitTimer . updateCheck ( dt ) )
>10806	CompoundStatement	 
>10807	IfStatement	if ( dsq -> game -> avatar )
>10808	CompoundStatement	 
>10809	ExpressionStatement	 
>10810	CallExpression	dsq -> spawnParticleEffect ( \"PoisonBubbles\" , dsq -> game -> avatar -> position )
>10811	ArgumentList	\"PoisonBubbles\"
>10812	Argument	dsq -> game -> avatar -> position
>10813	PtrMemberAccess	dsq -> game -> avatar -> position
>10814	Identifier	position
>10815	PtrMemberAccess	dsq -> game -> avatar
>10816	Identifier	avatar
>10817	PtrMemberAccess	dsq -> game
>10818	Identifier	game
>10819	Identifier	dsq
>10820	Argument	\"PoisonBubbles\"
>10821	PrimaryExpression	\"PoisonBubbles\"
>10822	Callee	dsq -> spawnParticleEffect
>10823	PtrMemberAccess	dsq -> spawnParticleEffect
>10824	Identifier	spawnParticleEffect
>10825	Identifier	dsq
>10826	ExpressionStatement	 
>10827	CallExpression	dsq -> game -> avatar -> damage ( d )
>10828	ArgumentList	d
>10829	Argument	d
>10830	Identifier	d
>10831	Callee	dsq -> game -> avatar -> damage
>10832	PtrMemberAccess	dsq -> game -> avatar -> damage
>10833	Identifier	damage
>10834	PtrMemberAccess	dsq -> game -> avatar
>10835	Identifier	avatar
>10836	PtrMemberAccess	dsq -> game
>10837	Identifier	game
>10838	Identifier	dsq
>10839	ExpressionStatement	 
>10840	AssignmentExpr	d . damageType = DT_ENEMY_ACTIVEPOISON
>10841	Identifier	DT_ENEMY_ACTIVEPOISON
>10842	MemberAccess	d . damageType
>10843	Identifier	damageType
>10844	Identifier	d
>10845	ExpressionStatement	 
>10846	AssignmentExpr	d . useTimer = 0
>10847	PrimaryExpression	0
>10848	MemberAccess	d . useTimer
>10849	Identifier	useTimer
>10850	Identifier	d
>10851	ExpressionStatement	 
>10852	AssignmentExpr	d . damage = poison * 0.2f
>10853	MultiplicativeExpression	poison * 0.2f
>10854	PrimaryExpression	0.2f
>10855	Identifier	poison
>10856	MemberAccess	d . damage
>10857	Identifier	damage
>10858	Identifier	d
>10859	IdentifierDeclStatement	 
>10860	IdentifierDecl	d
>10861	Identifier	d
>10862	IdentifierDeclType	DamageData
>10863	ExpressionStatement	 
>10864	CallExpression	core -> sound -> playSfx ( \"poison\" )
>10865	ArgumentList	\"poison\"
>10866	Argument	\"poison\"
>10867	PrimaryExpression	\"poison\"
>10868	Callee	core -> sound -> playSfx
>10869	PtrMemberAccess	core -> sound -> playSfx
>10870	Identifier	playSfx
>10871	PtrMemberAccess	core -> sound
>10872	Identifier	sound
>10873	Identifier	core
>10874	Condition	 
>10875	PtrMemberAccess	dsq -> game -> avatar
>10876	Identifier	avatar
>10877	PtrMemberAccess	dsq -> game
>10878	Identifier	game
>10879	Identifier	dsq
>10880	ExpressionStatement	 
>10881	CallExpression	poisonBitTimer . start ( poisonBitTimeAvatar )
>10882	ArgumentList	poisonBitTimeAvatar
>10883	Argument	poisonBitTimeAvatar
>10884	Identifier	poisonBitTimeAvatar
>10885	Callee	poisonBitTimer . start
>10886	MemberAccess	poisonBitTimer . start
>10887	Identifier	start
>10888	Identifier	poisonBitTimer
>10889	Condition	 
>10890	CallExpression	poisonBitTimer . updateCheck ( dt )
>10891	ArgumentList	dt
>10892	Argument	dt
>10893	Identifier	dt
>10894	Callee	poisonBitTimer . updateCheck
>10895	MemberAccess	poisonBitTimer . updateCheck
>10896	Identifier	updateCheck
>10897	Identifier	poisonBitTimer
>10898	Condition	 
>10899	Identifier	poison
>10900	IfStatement	if ( poisonTimer . updateCheck ( dt ) )
>10901	CompoundStatement	 
>10902	ExpressionStatement	 
>10903	AssignmentExpr	poison = 0
>10904	PrimaryExpression	0
>10905	Identifier	poison
>10906	Condition	 
>10907	CallExpression	poisonTimer . updateCheck ( dt )
>10908	ArgumentList	dt
>10909	Argument	dt
>10910	Identifier	dt
>10911	Callee	poisonTimer . updateCheck
>10912	MemberAccess	poisonTimer . updateCheck
>10913	Identifier	updateCheck
>10914	Identifier	poisonTimer
>10915	Condition	 
>10916	AndExpression	dsq -> game -> avatar && dsq -> game -> avatar -> isInputEnabled ( )
>10917	CallExpression	dsq -> game -> avatar -> isInputEnabled ( )
>10918	ArgumentList	 
>10919	Callee	dsq -> game -> avatar -> isInputEnabled
>10920	PtrMemberAccess	dsq -> game -> avatar -> isInputEnabled
>10921	Identifier	isInputEnabled
>10922	PtrMemberAccess	dsq -> game -> avatar
>10923	Identifier	avatar
>10924	PtrMemberAccess	dsq -> game
>10925	Identifier	game
>10926	Identifier	dsq
>10927	PtrMemberAccess	dsq -> game -> avatar
>10928	Identifier	avatar
>10929	PtrMemberAccess	dsq -> game
>10930	Identifier	game
>10931	Identifier	dsq
>10932	IfStatement	if ( petPowerTimer . updateCheck ( dt ) )
>10933	CompoundStatement	 
>10934	ExpressionStatement	 
>10935	AssignmentExpr	petPower = 0
>10936	PrimaryExpression	0
>10937	Identifier	petPower
>10938	Condition	 
>10939	CallExpression	petPowerTimer . updateCheck ( dt )
>10940	ArgumentList	dt
>10941	Argument	dt
>10942	Identifier	dt
>10943	Callee	petPowerTimer . updateCheck
>10944	MemberAccess	petPowerTimer . updateCheck
>10945	Identifier	updateCheck
>10946	Identifier	petPowerTimer
>10947	IfStatement	if ( lightTimer . updateCheck ( dt ) )
>10948	CompoundStatement	 
>10949	ExpressionStatement	 
>10950	AssignmentExpr	light = 0
>10951	PrimaryExpression	0
>10952	Identifier	light
>10953	Condition	 
>10954	CallExpression	lightTimer . updateCheck ( dt )
>10955	ArgumentList	dt
>10956	Argument	dt
>10957	Identifier	dt
>10958	Callee	lightTimer . updateCheck
>10959	MemberAccess	lightTimer . updateCheck
>10960	Identifier	updateCheck
>10961	Identifier	lightTimer
>10962	IfStatement	if ( speedMultTimer . updateCheck ( dt ) )
>10963	CompoundStatement	 
>10964	ExpressionStatement	 
>10965	AssignmentExpr	speedMult = 1
>10966	PrimaryExpression	1
>10967	Identifier	speedMult
>10968	Condition	 
>10969	CallExpression	speedMultTimer . updateCheck ( dt )
>10970	ArgumentList	dt
>10971	Argument	dt
>10972	Identifier	dt
>10973	Callee	speedMultTimer . updateCheck
>10974	MemberAccess	speedMultTimer . updateCheck
>10975	Identifier	updateCheck
>10976	Identifier	speedMultTimer
>10977	IfStatement	if ( liPowerTimer . updateCheck ( dt ) )
>10978	CompoundStatement	 
>10979	ExpressionStatement	 
>10980	AssignmentExpr	liPower = 0
>10981	PrimaryExpression	0
>10982	Identifier	liPower
>10983	Condition	 
>10984	CallExpression	liPowerTimer . updateCheck ( dt )
>10985	ArgumentList	dt
>10986	Argument	dt
>10987	Identifier	dt
>10988	Callee	liPowerTimer . updateCheck
>10989	MemberAccess	liPowerTimer . updateCheck
>10990	Identifier	updateCheck
>10991	Identifier	liPowerTimer
>10992	Condition	 
>10993	AndExpression	dsq -> game -> isActive ( ) && ! dsq -> game -> isPaused ( )
>10994	UnaryOp	! dsq -> game -> isPaused ( )
>10995	CallExpression	dsq -> game -> isPaused ( )
>10996	ArgumentList	 
>10997	Callee	dsq -> game -> isPaused
>10998	PtrMemberAccess	dsq -> game -> isPaused
>10999	Identifier	isPaused
>11000	PtrMemberAccess	dsq -> game
>11001	Identifier	game
>11002	Identifier	dsq
>11003	UnaryOperator	!
>11004	CallExpression	dsq -> game -> isActive ( )
>11005	ArgumentList	 
>11006	Callee	dsq -> game -> isActive
>11007	PtrMemberAccess	dsq -> game -> isActive
>11008	Identifier	isActive
>11009	PtrMemberAccess	dsq -> game
>11010	Identifier	game
>11011	Identifier	dsq
>11012	IfStatement	if ( statsAndAchievements )
>11013	CompoundStatement	 
>11014	ExpressionStatement	 
>11015	CallExpression	statsAndAchievements -> RunFrame ( )
>11016	ArgumentList	 
>11017	Callee	statsAndAchievements -> RunFrame
>11018	PtrMemberAccess	statsAndAchievements -> RunFrame
>11019	Identifier	RunFrame
>11020	Identifier	statsAndAchievements
>11021	ExpressionStatement	 
>11022	CallExpression	statsAndAchievements -> update ( dt )
>11023	ArgumentList	dt
>11024	Argument	dt
>11025	Identifier	dt
>11026	Callee	statsAndAchievements -> update
>11027	PtrMemberAccess	statsAndAchievements -> update
>11028	Identifier	update
>11029	Identifier	statsAndAchievements
>11030	Condition	 
>11031	Identifier	statsAndAchievements
>11032	IfStatement	if ( dsq -> game -> isActive ( ) )
>11033	ExpressionStatement	 
>11034	AssignmentExpr	seconds += dt
>11035	Identifier	dt
>11036	Identifier	seconds
>11037	Condition	 
>11038	CallExpression	dsq -> game -> isActive ( )
>11039	ArgumentList	 
>11040	Callee	dsq -> game -> isActive
>11041	PtrMemberAccess	dsq -> game -> isActive
>11042	Identifier	isActive
>11043	PtrMemberAccess	dsq -> game
>11044	Identifier	game
>11045	Identifier	dsq
>11117	FunctionDef	Continuity 
>11118	ParameterList	 
>11119	ReturnType	void
>11120	CompoundStatement	 
>11121	IfStatement	if ( worldType == WT_SPIRIT )
>11122	ElseStatement	else
>11123	IfStatement	if ( worldType == WT_NORMAL )
>11124	ExpressionStatement	 
>11125	CallExpression	core -> sound -> playSfx ( \"Spirit-Return\" )
>11126	ArgumentList	\"Spirit-Return\"
>11127	Argument	\"Spirit-Return\"
>11128	PrimaryExpression	\"Spirit-Return\"
>11129	Callee	core -> sound -> playSfx
>11130	PtrMemberAccess	core -> sound -> playSfx
>11131	Identifier	playSfx
>11132	PtrMemberAccess	core -> sound
>11133	Identifier	sound
>11134	Identifier	core
>11135	Condition	 
>11136	EqualityExpression	worldType == WT_NORMAL
>11137	Identifier	WT_NORMAL
>11138	Identifier	worldType
>11139	ExpressionStatement	 
>11140	CallExpression	core -> sound -> playSfx ( \"Spirit-Enter\" )
>11141	ArgumentList	\"Spirit-Enter\"
>11142	Argument	\"Spirit-Enter\"
>11143	PrimaryExpression	\"Spirit-Enter\"
>11144	Callee	core -> sound -> playSfx
>11145	PtrMemberAccess	core -> sound -> playSfx
>11146	Identifier	playSfx
>11147	PtrMemberAccess	core -> sound
>11148	Identifier	sound
>11149	Identifier	core
>11150	Condition	 
>11151	EqualityExpression	worldType == WT_SPIRIT
>11152	Identifier	WT_SPIRIT
>11153	Identifier	worldType
>11154	ExpressionStatement	 
>11155	CallExpression	applyWorldEffects ( worldType , 1 , 1 )
>11156	ArgumentList	worldType
>11157	Argument	1
>11158	PrimaryExpression	1
>11159	Argument	1
>11160	PrimaryExpression	1
>11161	Argument	worldType
>11162	Identifier	worldType
>11163	Callee	applyWorldEffects
>11164	Identifier	applyWorldEffects
>11165	CompoundStatement	 
>11166	ExpressionStatement	 
>11167	CallExpression	e -> shiftWorlds ( lastWorld , worldType )
>11168	ArgumentList	lastWorld
>11169	Argument	worldType
>11170	Identifier	worldType
>11171	Argument	lastWorld
>11172	Identifier	lastWorld
>11173	Callee	e -> shiftWorlds
>11174	PtrMemberAccess	e -> shiftWorlds
>11175	Identifier	shiftWorlds
>11176	Identifier	e
>11177	IdentifierDeclStatement	 
>11178	IdentifierDecl	* e = * i
>11179	AssignmentExpr	* e = * i
>11180	UnaryOp	* i
>11181	Identifier	i
>11182	UnaryOperator	*
>11183	Identifier	e
>11184	Identifier	e
>11185	IdentifierDeclType	Entity *
>11186	Statement	 
>11187	Statement	 
>11188	Statement	 
>11189	Statement	 
>11190	IfStatement	if ( worldType == WT_NORMAL )
>11191	ElseStatement	else
>11192	IfStatement	if ( worldType == WT_SPIRIT )
>11193	CompoundStatement	 
>11194	ExpressionStatement	 
>11195	CallExpression	dsq -> game -> setWorldPaused ( false )
>11196	ArgumentList	false
>11197	Argument	false
>11198	Identifier	false
>11199	Callee	dsq -> game -> setWorldPaused
>11200	PtrMemberAccess	dsq -> game -> setWorldPaused
>11201	Identifier	setWorldPaused
>11202	PtrMemberAccess	dsq -> game
>11203	Identifier	game
>11204	Identifier	dsq
>11205	ExpressionStatement	 
>11206	AssignmentExpr	worldType = WT_NORMAL
>11207	Identifier	WT_NORMAL
>11208	Identifier	worldType
>11209	Condition	 
>11210	EqualityExpression	worldType == WT_SPIRIT
>11211	Identifier	WT_SPIRIT
>11212	Identifier	worldType
>11213	CompoundStatement	 
>11214	ExpressionStatement	 
>11215	CallExpression	dsq -> game -> setWorldPaused ( true )
>11216	ArgumentList	true
>11217	Argument	true
>11218	Identifier	true
>11219	Callee	dsq -> game -> setWorldPaused
>11220	PtrMemberAccess	dsq -> game -> setWorldPaused
>11221	Identifier	setWorldPaused
>11222	PtrMemberAccess	dsq -> game
>11223	Identifier	game
>11224	Identifier	dsq
>11225	ExpressionStatement	 
>11226	AssignmentExpr	worldType = WT_SPIRIT
>11227	Identifier	WT_SPIRIT
>11228	Identifier	worldType
>11229	Condition	 
>11230	EqualityExpression	worldType == WT_NORMAL
>11231	Identifier	WT_NORMAL
>11232	Identifier	worldType
>11233	IdentifierDeclStatement	 
>11234	IdentifierDecl	lastWorld = worldType
>11235	AssignmentExpr	lastWorld = worldType
>11236	Identifier	worldType
>11237	Identifier	worldType
>11238	Identifier	lastWorld
>11239	IdentifierDeclType	WorldType
>11258	FunctionDef	Continuity 
>11259	ParameterList	int index
>11260	Parameter	 
>11261	Identifier	index
>11262	ParameterType	int
>11263	ReturnType	BeaconData *
>11264	CompoundStatement	 
>11265	ReturnStatement	 
>11266	PrimaryExpression	0
>11267	ForStatement	for ( Beacons 
>11268	CompoundStatement	 
>11269	IfStatement	if ( ( * i ) . index == index )
>11270	CompoundStatement	 
>11271	ReturnStatement	 
>11272	UnaryOp	& ( * i )
>11273	UnaryOp	* i
>11274	Identifier	i
>11275	UnaryOperator	*
>11276	UnaryOperator	&
>11277	Condition	 
>11278	EqualityExpression	( * i ) . index == index
>11279	Identifier	index
>11280	MemberAccess	( * i ) . index
>11281	Identifier	index
>11282	UnaryOp	* i
>11283	Identifier	i
>11284	UnaryOperator	*
>11285	IncDecOp	 
>11286	IncDec	++
>11287	Identifier	i
>11288	Condition	 
>11289	EqualityExpression	i != beacons . end ( )
>11290	CallExpression	beacons . end ( )
>11291	ArgumentList	 
>11292	Callee	beacons . end
>11293	MemberAccess	beacons . end
>11294	Identifier	end
>11295	Identifier	beacons
>11296	Identifier	i
>11297	ForInit	 
>11298	IdentifierDeclStatement	Beacons 
>11299	IdentifierDecl	i = beacons . begin ( )
>11300	AssignmentExpr	i = beacons . begin ( )
>11301	CallExpression	beacons . begin ( )
>11302	ArgumentList	 
>11303	Callee	beacons . begin
>11304	MemberAccess	beacons . begin
>11305	Identifier	begin
>11306	Identifier	beacons
>11307	Identifier	i
>11308	Identifier	i
>11309	IdentifierDeclType	Beacons 
>11321	FunctionDef	Continuity 
>11322	ParameterList	int index , bool on , Vector pos , Vector color
>11323	Parameter	 
>11324	Identifier	color
>11325	ParameterType	Vector
>11326	Parameter	 
>11327	Identifier	pos
>11328	ParameterType	Vector
>11329	Parameter	 
>11330	Identifier	on
>11331	ParameterType	bool
>11332	Parameter	 
>11333	Identifier	index
>11334	ParameterType	int
>11335	ReturnType	void
>11336	CompoundStatement	 
>11337	IfStatement	if ( on )
>11338	ElseStatement	else
>11339	CompoundStatement	 
>11340	IfStatement	if ( b )
>11341	CompoundStatement	 
>11342	ExpressionStatement	 
>11343	AssignmentExpr	b -> on = false
>11344	Identifier	false
>11345	PtrMemberAccess	b -> on
>11346	Identifier	on
>11347	Identifier	b
>11348	Condition	 
>11349	Identifier	b
>11350	IdentifierDeclStatement	 
>11351	IdentifierDecl	* b = getBeaconByIndex ( index )
>11352	AssignmentExpr	* b = getBeaconByIndex ( index )
>11353	CallExpression	getBeaconByIndex ( index )
>11354	ArgumentList	index
>11355	Argument	index
>11356	Identifier	index
>11357	Callee	getBeaconByIndex
>11358	Identifier	getBeaconByIndex
>11359	Identifier	b
>11360	Identifier	b
>11361	IdentifierDeclType	BeaconData *
>11362	CompoundStatement	 
>11363	ExpressionStatement	 
>11364	AssignmentExpr	b -> color = color
>11365	Identifier	color
>11366	PtrMemberAccess	b -> color
>11367	Identifier	color
>11368	Identifier	b
>11369	ExpressionStatement	 
>11370	AssignmentExpr	b -> pos = pos
>11371	Identifier	pos
>11372	PtrMemberAccess	b -> pos
>11373	Identifier	pos
>11374	Identifier	b
>11375	ExpressionStatement	 
>11376	AssignmentExpr	b -> on = true
>11377	Identifier	true
>11378	PtrMemberAccess	b -> on
>11379	Identifier	on
>11380	Identifier	b
>11381	IfStatement	if ( ! b )
>11382	CompoundStatement	 
>11383	ExpressionStatement	 
>11384	AssignmentExpr	b = getBeaconByIndex ( index )
>11385	CallExpression	getBeaconByIndex ( index )
>11386	ArgumentList	index
>11387	Argument	index
>11388	Identifier	index
>11389	Callee	getBeaconByIndex
>11390	Identifier	getBeaconByIndex
>11391	Identifier	b
>11392	ExpressionStatement	 
>11393	CallExpression	beacons . push_back ( newb )
>11394	ArgumentList	newb
>11395	Argument	newb
>11396	Identifier	newb
>11397	Callee	beacons . push_back
>11398	MemberAccess	beacons . push_back
>11399	Identifier	push_back
>11400	Identifier	beacons
>11401	ExpressionStatement	 
>11402	AssignmentExpr	newb . index = index
>11403	Identifier	index
>11404	MemberAccess	newb . index
>11405	Identifier	index
>11406	Identifier	newb
>11407	IdentifierDeclStatement	 
>11408	IdentifierDecl	newb
>11409	Identifier	newb
>11410	IdentifierDeclType	BeaconData
>11411	Condition	 
>11412	UnaryOp	! b
>11413	Identifier	b
>11414	UnaryOperator	!
>11415	IdentifierDeclStatement	 
>11416	IdentifierDecl	* b = getBeaconByIndex ( index )
>11417	AssignmentExpr	* b = getBeaconByIndex ( index )
>11418	CallExpression	getBeaconByIndex ( index )
>11419	ArgumentList	index
>11420	Argument	index
>11421	Identifier	index
>11422	Callee	getBeaconByIndex
>11423	Identifier	getBeaconByIndex
>11424	Identifier	b
>11425	Identifier	b
>11426	IdentifierDeclType	BeaconData *
>11427	Condition	 
>11428	Identifier	on
>11447	FunctionDef	Continuity 
>11448	ParameterList	WorldType type , bool transition , bool affectMusic
>11449	Parameter	 
>11450	Identifier	affectMusic
>11451	ParameterType	bool
>11452	Parameter	 
>11453	Identifier	transition
>11454	ParameterType	bool
>11455	Parameter	 
>11456	Identifier	type
>11457	ParameterType	WorldType
>11458	ReturnType	void
>11459	CompoundStatement	 
>11460	ExpressionStatement	 
>11461	AssignmentExpr	worldType = type
>11462	Identifier	type
>11463	Identifier	worldType
>11464	IfStatement	if ( time > 0 )
>11465	CompoundStatement	 
>11466	Condition	 
>11467	RelationalExpression	time > 0
>11468	PrimaryExpression	0
>11469	Identifier	time
>11470	IfStatement	if ( type == WT_SPIRIT )
>11471	ElseStatement	else
>11472	CompoundStatement	 
>11473	ExpressionStatement	 
>11474	CallExpression	dsq -> game -> avatar -> applyWorldEffects ( type )
>11475	ArgumentList	type
>11476	Argument	type
>11477	Identifier	type
>11478	Callee	dsq -> game -> avatar -> applyWorldEffects
>11479	PtrMemberAccess	dsq -> game -> avatar -> applyWorldEffects
>11480	Identifier	applyWorldEffects
>11481	PtrMemberAccess	dsq -> game -> avatar
>11482	Identifier	avatar
>11483	PtrMemberAccess	dsq -> game
>11484	Identifier	game
>11485	Identifier	dsq
>11486	ExpressionStatement	 
>11487	CallExpression	dsq -> game -> sceneColor . interpolateTo ( Vector ( 1 , 1 , 1 ) , time )
>11488	ArgumentList	Vector ( 1 , 1 , 1 )
>11489	Argument	time
>11490	Identifier	time
>11491	Argument	Vector ( 1 , 1 , 1 )
>11492	CallExpression	Vector ( 1 , 1 , 1 )
>11493	ArgumentList	1
>11494	Argument	1
>11495	PrimaryExpression	1
>11496	Argument	1
>11497	PrimaryExpression	1
>11498	Argument	1
>11499	PrimaryExpression	1
>11500	Callee	Vector
>11501	Identifier	Vector
>11502	Callee	dsq -> game -> sceneColor . interpolateTo
>11503	MemberAccess	dsq -> game -> sceneColor . interpolateTo
>11504	Identifier	interpolateTo
>11505	PtrMemberAccess	dsq -> game -> sceneColor
>11506	Identifier	sceneColor
>11507	PtrMemberAccess	dsq -> game
>11508	Identifier	game
>11509	Identifier	dsq
>11510	ExpressionStatement	 
>11511	CallExpression	core -> postProcessingFx . disable ( FXT_RADIALBLUR )
>11512	ArgumentList	FXT_RADIALBLUR
>11513	Argument	FXT_RADIALBLUR
>11514	Identifier	FXT_RADIALBLUR
>11515	Callee	core -> postProcessingFx . disable
>11516	MemberAccess	core -> postProcessingFx . disable
>11517	Identifier	disable
>11518	PtrMemberAccess	core -> postProcessingFx
>11519	Identifier	postProcessingFx
>11520	Identifier	core
>11521	ExpressionStatement	 
>11522	AssignmentExpr	dsq -> game -> avatar -> canWarp = true
>11523	Identifier	true
>11524	PtrMemberAccess	dsq -> game -> avatar -> canWarp
>11525	Identifier	canWarp
>11526	PtrMemberAccess	dsq -> game -> avatar
>11527	Identifier	avatar
>11528	PtrMemberAccess	dsq -> game
>11529	Identifier	game
>11530	Identifier	dsq
>11531	CompoundStatement	 
>11532	ExpressionStatement	 
>11533	CallExpression	dsq -> game -> avatar -> applyWorldEffects ( type )
>11534	ArgumentList	type
>11535	Argument	type
>11536	Identifier	type
>11537	Callee	dsq -> game -> avatar -> applyWorldEffects
>11538	PtrMemberAccess	dsq -> game -> avatar -> applyWorldEffects
>11539	Identifier	applyWorldEffects
>11540	PtrMemberAccess	dsq -> game -> avatar
>11541	Identifier	avatar
>11542	PtrMemberAccess	dsq -> game
>11543	Identifier	game
>11544	Identifier	dsq
>11545	ExpressionStatement	 
>11546	CallExpression	dsq -> game -> sceneColor . interpolateTo ( Vector ( 0.4 , 0.8 , 0.9 ) , time )
>11547	ArgumentList	Vector ( 0.4 , 0.8 , 0.9 )
>11548	Argument	time
>11549	Identifier	time
>11550	Argument	Vector ( 0.4 , 0.8 , 0.9 )
>11551	CallExpression	Vector ( 0.4 , 0.8 , 0.9 )
>11552	ArgumentList	0.4
>11553	Argument	0.9
>11554	PrimaryExpression	0.9
>11555	Argument	0.8
>11556	PrimaryExpression	0.8
>11557	Argument	0.4
>11558	PrimaryExpression	0.4
>11559	Callee	Vector
>11560	Identifier	Vector
>11561	Callee	dsq -> game -> sceneColor . interpolateTo
>11562	MemberAccess	dsq -> game -> sceneColor . interpolateTo
>11563	Identifier	interpolateTo
>11564	PtrMemberAccess	dsq -> game -> sceneColor
>11565	Identifier	sceneColor
>11566	PtrMemberAccess	dsq -> game
>11567	Identifier	game
>11568	Identifier	dsq
>11569	ExpressionStatement	 
>11570	AssignmentExpr	dsq -> game -> backupSceneColor = dsq -> game -> sceneColor
>11571	PtrMemberAccess	dsq -> game -> sceneColor
>11572	Identifier	sceneColor
>11573	PtrMemberAccess	dsq -> game
>11574	Identifier	game
>11575	Identifier	dsq
>11576	PtrMemberAccess	dsq -> game -> backupSceneColor
>11577	Identifier	backupSceneColor
>11578	PtrMemberAccess	dsq -> game
>11579	Identifier	game
>11580	Identifier	dsq
>11581	ExpressionStatement	 
>11582	AssignmentExpr	dsq -> game -> avatar -> canWarp = false
>11583	Identifier	false
>11584	PtrMemberAccess	dsq -> game -> avatar -> canWarp
>11585	Identifier	canWarp
>11586	PtrMemberAccess	dsq -> game -> avatar
>11587	Identifier	avatar
>11588	PtrMemberAccess	dsq -> game
>11589	Identifier	game
>11590	Identifier	dsq
>11591	IfStatement	if ( dsq -> user . video . blur )
>11592	CompoundStatement	 
>11593	ExpressionStatement	 
>11594	CallExpression	core -> postProcessingFx . enable ( FXT_RADIALBLUR )
>11595	ArgumentList	FXT_RADIALBLUR
>11596	Argument	FXT_RADIALBLUR
>11597	Identifier	FXT_RADIALBLUR
>11598	Callee	core -> postProcessingFx . enable
>11599	MemberAccess	core -> postProcessingFx . enable
>11600	Identifier	enable
>11601	PtrMemberAccess	core -> postProcessingFx
>11602	Identifier	postProcessingFx
>11603	Identifier	core
>11604	ExpressionStatement	 
>11605	AssignmentExpr	core -> postProcessingFx . renderLayer = LR_AFTER_EFFECTS
>11606	Identifier	LR_AFTER_EFFECTS
>11607	MemberAccess	core -> postProcessingFx . renderLayer
>11608	Identifier	renderLayer
>11609	PtrMemberAccess	core -> postProcessingFx
>11610	Identifier	postProcessingFx
>11611	Identifier	core
>11612	ExpressionStatement	 
>11613	AssignmentExpr	core -> postProcessingFx . layer = LR_AFTER_EFFECTS
>11614	Identifier	LR_AFTER_EFFECTS
>11615	MemberAccess	core -> postProcessingFx . layer
>11616	Identifier	layer
>11617	PtrMemberAccess	core -> postProcessingFx
>11618	Identifier	postProcessingFx
>11619	Identifier	core
>11620	ExpressionStatement	 
>11621	AssignmentExpr	core -> postProcessingFx . intensity = 0.2f
>11622	PrimaryExpression	0.2f
>11623	MemberAccess	core -> postProcessingFx . intensity
>11624	Identifier	intensity
>11625	PtrMemberAccess	core -> postProcessingFx
>11626	Identifier	postProcessingFx
>11627	Identifier	core
>11628	ExpressionStatement	 
>11629	AssignmentExpr	core -> postProcessingFx . blendType = 1
>11630	PrimaryExpression	1
>11631	MemberAccess	core -> postProcessingFx . blendType
>11632	Identifier	blendType
>11633	PtrMemberAccess	core -> postProcessingFx
>11634	Identifier	postProcessingFx
>11635	Identifier	core
>11636	Condition	 
>11637	MemberAccess	dsq -> user . video . blur
>11638	Identifier	blur
>11639	MemberAccess	dsq -> user . video
>11640	Identifier	video
>11641	PtrMemberAccess	dsq -> user
>11642	Identifier	user
>11643	Identifier	dsq
>11644	Condition	 
>11645	EqualityExpression	type == WT_SPIRIT
>11646	Identifier	WT_SPIRIT
>11647	Identifier	type
>11648	IfStatement	if ( ! transition )
>11649	ExpressionStatement	 
>11650	AssignmentExpr	time = 0
>11651	PrimaryExpression	0
>11652	Identifier	time
>11653	Condition	 
>11654	UnaryOp	! transition
>11655	Identifier	transition
>11656	UnaryOperator	!
>11657	IdentifierDeclStatement	 
>11658	IdentifierDecl	time = 1
>11659	AssignmentExpr	time = 1
>11660	PrimaryExpression	1
>11661	Identifier	time
>11662	Identifier	time
>11663	IdentifierDeclType	float
>11700	FunctionDef	Continuity 
>11701	ParameterList	const EatData & eatData
>11702	Parameter	 
>11703	Identifier	eatData
>11704	ParameterType	const EatData &
>11705	ReturnType	void
>11706	CompoundStatement	 
>11707	IfStatement	if ( ! eatData . name . empty ( ) )
>11708	CompoundStatement	 
>11709	IfStatement	if ( eatData . health > 0 )
>11710	CompoundStatement	 
>11711	ExpressionStatement	 
>11712	CallExpression	dsq -> game -> avatar -> heal ( eatData . health )
>11713	ArgumentList	eatData . health
>11714	Argument	eatData . health
>11715	MemberAccess	eatData . health
>11716	Identifier	health
>11717	Identifier	eatData
>11718	Callee	dsq -> game -> avatar -> heal
>11719	PtrMemberAccess	dsq -> game -> avatar -> heal
>11720	Identifier	heal
>11721	PtrMemberAccess	dsq -> game -> avatar
>11722	Identifier	avatar
>11723	PtrMemberAccess	dsq -> game
>11724	Identifier	game
>11725	Identifier	dsq
>11726	Condition	 
>11727	RelationalExpression	eatData . health > 0
>11728	PrimaryExpression	0
>11729	MemberAccess	eatData . health
>11730	Identifier	health
>11731	Identifier	eatData
>11732	ForStatement	for ( int i = 0 ; i < eatData . getUnits ; i ++ )
>11733	CompoundStatement	 
>11734	IfStatement	if ( naijaEats . size ( ) < MAX_EATS )
>11735	CompoundStatement	 
>11736	IfStatement	if ( ! eatData . shot . empty ( ) )
>11737	ExpressionStatement	 
>11738	CallExpression	naijaEats . push_back ( eatData )
>11739	ArgumentList	eatData
>11740	Argument	eatData
>11741	Identifier	eatData
>11742	Callee	naijaEats . push_back
>11743	MemberAccess	naijaEats . push_back
>11744	Identifier	push_back
>11745	Identifier	naijaEats
>11746	Condition	 
>11747	UnaryOp	! eatData . shot . empty ( )
>11748	CallExpression	eatData . shot . empty ( )
>11749	ArgumentList	 
>11750	Callee	eatData . shot . empty
>11751	MemberAccess	eatData . shot . empty
>11752	Identifier	empty
>11753	MemberAccess	eatData . shot
>11754	Identifier	shot
>11755	Identifier	eatData
>11756	UnaryOperator	!
>11757	Condition	 
>11758	RelationalExpression	naijaEats . size ( ) < MAX_EATS
>11759	Identifier	MAX_EATS
>11760	CallExpression	naijaEats . size ( )
>11761	ArgumentList	 
>11762	Callee	naijaEats . size
>11763	MemberAccess	naijaEats . size
>11764	Identifier	size
>11765	Identifier	naijaEats
>11766	IncDecOp	 
>11767	IncDec	++
>11768	Identifier	i
>11769	Condition	 
>11770	RelationalExpression	i < eatData . getUnits
>11771	MemberAccess	eatData . getUnits
>11772	Identifier	getUnits
>11773	Identifier	eatData
>11774	Identifier	i
>11775	ForInit	 
>11776	IdentifierDeclStatement	int i = 0 ;
>11777	IdentifierDecl	i = 0
>11778	AssignmentExpr	i = 0
>11779	PrimaryExpression	0
>11780	Identifier	i
>11781	Identifier	i
>11782	IdentifierDeclType	int
>11783	Condition	 
>11784	UnaryOp	! eatData . name . empty ( )
>11785	CallExpression	eatData . name . empty ( )
>11786	ArgumentList	 
>11787	Callee	eatData . name . empty
>11788	MemberAccess	eatData . name . empty
>11789	Identifier	empty
>11790	MemberAccess	eatData . name
>11791	Identifier	name
>11792	Identifier	eatData
>11793	UnaryOperator	!
>11814	FunctionDef	Continuity 
>11815	ParameterList	int idx
>11816	Parameter	 
>11817	Identifier	idx
>11818	ParameterType	int
>11819	ReturnType	void
>11820	CompoundStatement	 
>11821	ForStatement	for ( int i = 0 ; i < copy . size ( ) ; i ++ )
>11822	CompoundStatement	 
>11823	IfStatement	if ( i != idx )
>11824	ExpressionStatement	 
>11825	CallExpression	naijaEats . push_back ( copy [ i ] )
>11826	ArgumentList	copy [ i ]
>11827	Argument	copy [ i ]
>11828	ArrayIndexing	copy [ i ]
>11829	Identifier	i
>11830	Identifier	copy
>11831	Callee	naijaEats . push_back
>11832	MemberAccess	naijaEats . push_back
>11833	Identifier	push_back
>11834	Identifier	naijaEats
>11835	Condition	 
>11836	EqualityExpression	i != idx
>11837	Identifier	idx
>11838	Identifier	i
>11839	IncDecOp	 
>11840	IncDec	++
>11841	Identifier	i
>11842	Condition	 
>11843	RelationalExpression	i < copy . size ( )
>11844	CallExpression	copy . size ( )
>11845	ArgumentList	 
>11846	Callee	copy . size
>11847	MemberAccess	copy . size
>11848	Identifier	size
>11849	Identifier	copy
>11850	Identifier	i
>11851	ForInit	 
>11852	IdentifierDeclStatement	int i = 0 ;
>11853	IdentifierDecl	i = 0
>11854	AssignmentExpr	i = 0
>11855	PrimaryExpression	0
>11856	Identifier	i
>11857	Identifier	i
>11858	IdentifierDeclType	int
>11859	ExpressionStatement	 
>11860	CallExpression	naijaEats . clear ( )
>11861	ArgumentList	 
>11862	Callee	naijaEats . clear
>11863	MemberAccess	naijaEats . clear
>11864	Identifier	clear
>11865	Identifier	naijaEats
>11866	IdentifierDeclStatement	 
>11867	IdentifierDecl	copy = naijaEats
>11868	AssignmentExpr	copy = naijaEats
>11869	Identifier	naijaEats
>11870	Identifier	naijaEats
>11871	Identifier	copy
>11872	IdentifierDeclType	std 
>11883	FunctionDef	Continuity 
>11884	ParameterList	 
>11885	ReturnType	void
>11886	CompoundStatement	 
>11887	ExpressionStatement	 
>11888	CallExpression	removeNaijaEat ( naijaEats . size ( ) - 1 )
>11889	ArgumentList	naijaEats . size ( ) - 1
>11890	Argument	naijaEats . size ( ) - 1
>11891	AdditiveExpression	naijaEats . size ( ) - 1
>11892	PrimaryExpression	1
>11893	CallExpression	naijaEats . size ( )
>11894	ArgumentList	 
>11895	Callee	naijaEats . size
>11896	MemberAccess	naijaEats . size
>11897	Identifier	size
>11898	Identifier	naijaEats
>11899	Callee	removeNaijaEat
>11900	Identifier	removeNaijaEat
>11906	FunctionDef	Continuity 
>11907	ParameterList	 
>11908	ReturnType	EatData *
>11909	CompoundStatement	 
>11910	ReturnStatement	 
>11911	UnaryOp	& naijaEats [ naijaEats . size ( ) - 1 ]
>11912	ArrayIndexing	naijaEats [ naijaEats . size ( ) - 1 ]
>11913	AdditiveExpression	naijaEats . size ( ) - 1
>11914	PrimaryExpression	1
>11915	CallExpression	naijaEats . size ( )
>11916	ArgumentList	 
>11917	Callee	naijaEats . size
>11918	MemberAccess	naijaEats . size
>11919	Identifier	size
>11920	Identifier	naijaEats
>11921	Identifier	naijaEats
>11922	UnaryOperator	&
>11923	IfStatement	if ( naijaEats . empty ( ) )
>11924	ReturnStatement	 
>11925	PrimaryExpression	0
>11926	Condition	 
>11927	CallExpression	naijaEats . empty ( )
>11928	ArgumentList	 
>11929	Callee	naijaEats . empty
>11930	MemberAccess	naijaEats . empty
>11931	Identifier	empty
>11932	Identifier	naijaEats
>11941	FunctionDef	Continuity 
>11942	ParameterList	 
>11943	ReturnType	bool
>11944	CompoundStatement	 
>11945	ReturnStatement	 
>11946	CallExpression	naijaEats . empty ( )
>11947	ArgumentList	 
>11948	Callee	naijaEats . empty
>11949	MemberAccess	naijaEats . empty
>11950	Identifier	empty
>11951	Identifier	naijaEats
>11957	FunctionDef	Continuity 
>11958	ParameterList	 
>11959	ReturnType	void
>11960	CompoundStatement	 
>11961	ExpressionStatement	 
>11962	Identifier	StatsAndAchievements
>11963	Statement	 
>11964	Statement	 
>11965	Statement	 
>11969	FunctionDef	Continuity 
>11970	ParameterList	 
>11971	ReturnType	void
>11972	CompoundStatement	 
>11973	IfStatement	if ( statsAndAchievements )
>11974	CompoundStatement	 
>11975	ExpressionStatement	 
>11976	AssignmentExpr	statsAndAchievements = 0
>11977	PrimaryExpression	0
>11978	Identifier	statsAndAchievements
>11979	ExpressionStatement	 
>11980	Identifier	statsAndAchievements
>11981	Statement	 
>11982	Condition	 
>11983	Identifier	statsAndAchievements
>11988	FunctionDef	Continuity 
>11989	ParameterList	Avatar * a
>11990	Parameter	 
>11991	Identifier	a
>11992	ParameterType	Avatar *
>11993	ReturnType	void
>11994	CompoundStatement	 
>11995	ExpressionStatement	 
>11996	CallExpression	a -> skeletalSprite . animate ( a -> getIdleAnimName ( ) , - 1 , 0 )
>11997	ArgumentList	a -> getIdleAnimName ( )
>11998	Argument	0
>11999	PrimaryExpression	0
>12000	Argument	- 1
>12001	UnaryOp	- 1
>12002	PrimaryExpression	1
>12003	UnaryOperator	-
>12004	Argument	a -> getIdleAnimName ( )
>12005	CallExpression	a -> getIdleAnimName ( )
>12006	ArgumentList	 
>12007	Callee	a -> getIdleAnimName
>12008	PtrMemberAccess	a -> getIdleAnimName
>12009	Identifier	getIdleAnimName
>12010	Identifier	a
>12011	Callee	a -> skeletalSprite . animate
>12012	MemberAccess	a -> skeletalSprite . animate
>12013	Identifier	animate
>12014	PtrMemberAccess	a -> skeletalSprite
>12015	Identifier	skeletalSprite
>12016	Identifier	a
>12017	ExpressionStatement	 
>12018	CallExpression	a -> skeletalSprite . stopAllAnimations ( )
>12019	ArgumentList	 
>12020	Callee	a -> skeletalSprite . stopAllAnimations
>12021	MemberAccess	a -> skeletalSprite . stopAllAnimations
>12022	Identifier	stopAllAnimations
>12023	PtrMemberAccess	a -> skeletalSprite
>12024	Identifier	skeletalSprite
>12025	Identifier	a
>12026	ExpressionStatement	 
>12027	CallExpression	debugLog ( \"done initAvatar\" )
>12028	ArgumentList	\"done initAvatar\"
>12029	Argument	\"done initAvatar\"
>12030	PrimaryExpression	\"done initAvatar\"
>12031	Callee	debugLog
>12032	Identifier	debugLog
>12033	IfStatement	if ( webTimer . isActive ( ) )
>12034	CompoundStatement	 
>12035	ExpressionStatement	 
>12036	CallExpression	setWeb ( webTimer . getValue ( ) )
>12037	ArgumentList	webTimer . getValue ( )
>12038	Argument	webTimer . getValue ( )
>12039	CallExpression	webTimer . getValue ( )
>12040	ArgumentList	 
>12041	Callee	webTimer . getValue
>12042	MemberAccess	webTimer . getValue
>12043	Identifier	getValue
>12044	Identifier	webTimer
>12045	Callee	setWeb
>12046	Identifier	setWeb
>12047	Condition	 
>12048	CallExpression	webTimer . isActive ( )
>12049	ArgumentList	 
>12050	Callee	webTimer . isActive
>12051	MemberAccess	webTimer . isActive
>12052	Identifier	isActive
>12053	Identifier	webTimer
>12054	ExpressionStatement	 
>12055	CallExpression	debugLog ( \"web\" )
>12056	ArgumentList	\"web\"
>12057	Argument	\"web\"
>12058	PrimaryExpression	\"web\"
>12059	Callee	debugLog
>12060	Identifier	debugLog
>12061	IfStatement	if ( tripTimer . isActive ( ) )
>12062	CompoundStatement	 
>12063	ExpressionStatement	 
>12064	CallExpression	a -> applyTripEffects ( )
>12065	ArgumentList	 
>12066	Callee	a -> applyTripEffects
>12067	PtrMemberAccess	a -> applyTripEffects
>12068	Identifier	applyTripEffects
>12069	Identifier	a
>12070	Condition	 
>12071	CallExpression	tripTimer . isActive ( )
>12072	ArgumentList	 
>12073	Callee	tripTimer . isActive
>12074	MemberAccess	tripTimer . isActive
>12075	Identifier	isActive
>12076	Identifier	tripTimer
>12077	ExpressionStatement	 
>12078	CallExpression	debugLog ( \"trip\" )
>12079	ArgumentList	\"trip\"
>12080	Argument	\"trip\"
>12081	PrimaryExpression	\"trip\"
>12082	Callee	debugLog
>12083	Identifier	debugLog
>12084	IfStatement	if ( auraType != AURA_NONE && auraTimer > 0 )
>12085	CompoundStatement	 
>12086	ExpressionStatement	 
>12087	AssignmentExpr	a -> auraTimer = auraTimer
>12088	Identifier	auraTimer
>12089	PtrMemberAccess	a -> auraTimer
>12090	Identifier	auraTimer
>12091	Identifier	a
>12092	ExpressionStatement	 
>12093	CallExpression	a -> activateAura ( auraType )
>12094	ArgumentList	auraType
>12095	Argument	auraType
>12096	Identifier	auraType
>12097	Callee	a -> activateAura
>12098	PtrMemberAccess	a -> activateAura
>12099	Identifier	activateAura
>12100	Identifier	a
>12101	Condition	 
>12102	AndExpression	auraType != AURA_NONE && auraTimer > 0
>12103	RelationalExpression	auraTimer > 0
>12104	PrimaryExpression	0
>12105	Identifier	auraTimer
>12106	EqualityExpression	auraType != AURA_NONE
>12107	Identifier	AURA_NONE
>12108	Identifier	auraType
>12109	ExpressionStatement	 
>12110	CallExpression	debugLog ( \"auraType...\" )
>12111	ArgumentList	\"auraType...\"
>12112	Argument	\"auraType...\"
>12113	PrimaryExpression	\"auraType...\"
>12114	Callee	debugLog
>12115	Identifier	debugLog
>12116	ExpressionStatement	 
>12117	CallExpression	debugLog ( \"done\" )
>12118	ArgumentList	\"done\"
>12119	Argument	\"done\"
>12120	PrimaryExpression	\"done\"
>12121	Callee	debugLog
>12122	Identifier	debugLog
>12123	ExpressionStatement	 
>12124	CallExpression	a -> changeForm ( form , false , true , FORM_NORMAL )
>12125	ArgumentList	form
>12126	Argument	FORM_NORMAL
>12127	Identifier	FORM_NORMAL
>12128	Argument	true
>12129	Identifier	true
>12130	Argument	false
>12131	Identifier	false
>12132	Argument	form
>12133	Identifier	form
>12134	Callee	a -> changeForm
>12135	PtrMemberAccess	a -> changeForm
>12136	Identifier	changeForm
>12137	Identifier	a
>12138	ExpressionStatement	 
>12139	CallExpression	debugLog ( \"changeForm...\" )
>12140	ArgumentList	\"changeForm...\"
>12141	Argument	\"changeForm...\"
>12142	PrimaryExpression	\"changeForm...\"
>12143	Callee	debugLog
>12144	Identifier	debugLog
>12145	IfStatement	if ( form == FORM_SPIRIT )
>12146	ExpressionStatement	 
>12147	AssignmentExpr	form = FORM_NORMAL
>12148	Identifier	FORM_NORMAL
>12149	Identifier	form
>12150	Condition	 
>12151	EqualityExpression	form == FORM_SPIRIT
>12152	Identifier	FORM_SPIRIT
>12153	Identifier	form
>12154	ExpressionStatement	 
>12155	CallExpression	a -> heal ( health )
>12156	ArgumentList	health
>12157	Argument	health
>12158	Identifier	health
>12159	Callee	a -> heal
>12160	PtrMemberAccess	a -> heal
>12161	Identifier	heal
>12162	Identifier	a
>12163	ExpressionStatement	 
>12164	AssignmentExpr	a -> health = 0
>12165	PrimaryExpression	0
>12166	PtrMemberAccess	a -> health
>12167	Identifier	health
>12168	Identifier	a
>12169	ExpressionStatement	 
>12170	AssignmentExpr	a -> maxHealth = maxHealth
>12171	Identifier	maxHealth
>12172	PtrMemberAccess	a -> maxHealth
>12173	Identifier	maxHealth
>12174	Identifier	a
>12175	ExpressionStatement	 
>12176	CallExpression	debugLog ( \"in initAvatar\" )
>12177	ArgumentList	\"in initAvatar\"
>12178	Argument	\"in initAvatar\"
>12179	PrimaryExpression	\"in initAvatar\"
>12180	Callee	debugLog
>12181	Identifier	debugLog
>12207	FunctionDef	Continuity 
>12208	ParameterList	const Vector & position
>12209	Parameter	 
>12210	Identifier	position
>12211	ParameterType	const Vector &
>12212	ReturnType	void
>12213	CompoundStatement	 
>12214	ForStatement	for ( int i = 0 ; i < ingredientData . size ( ) ; i ++ )
>12215	CompoundStatement	 
>12216	ExpressionStatement	 
>12217	CallExpression	dsq -> game -> spawnIngredient ( ingredientData [ i ] -> name , position , 4 , 0 )
>12218	ArgumentList	ingredientData [ i ] -> name
>12219	Argument	0
>12220	PrimaryExpression	0
>12221	Argument	4
>12222	PrimaryExpression	4
>12223	Argument	position
>12224	Identifier	position
>12225	Argument	ingredientData [ i ] -> name
>12226	PtrMemberAccess	ingredientData [ i ] -> name
>12227	Identifier	name
>12228	ArrayIndexing	ingredientData [ i ]
>12229	Identifier	i
>12230	Identifier	ingredientData
>12231	Callee	dsq -> game -> spawnIngredient
>12232	PtrMemberAccess	dsq -> game -> spawnIngredient
>12233	Identifier	spawnIngredient
>12234	PtrMemberAccess	dsq -> game
>12235	Identifier	game
>12236	Identifier	dsq
>12237	IncDecOp	 
>12238	IncDec	++
>12239	Identifier	i
>12240	Condition	 
>12241	RelationalExpression	i < ingredientData . size ( )
>12242	CallExpression	ingredientData . size ( )
>12243	ArgumentList	 
>12244	Callee	ingredientData . size
>12245	MemberAccess	ingredientData . size
>12246	Identifier	size
>12247	Identifier	ingredientData
>12248	Identifier	i
>12249	ForInit	 
>12250	IdentifierDeclStatement	int i = 0 ;
>12251	IdentifierDecl	i = 0
>12252	AssignmentExpr	i = 0
>12253	PrimaryExpression	0
>12254	Identifier	i
>12255	Identifier	i
>12256	IdentifierDeclType	int
>12272	FunctionDef	Continuity 
>12273	ParameterList	 
>12274	ReturnType	void
>12275	CompoundStatement	 
>12276	ForStatement	for ( IngredientDatas 
>12277	CompoundStatement	 
>12278	IfStatement	if ( data -> amount == 0 && data -> held <= 0 )
>12279	ElseStatement	else
>12280	CompoundStatement	 
>12281	ExpressionStatement	 
>12282	UnaryExpression	++ i
>12283	Identifier	i
>12284	IncDec	++
>12285	CompoundStatement	 
>12286	ExpressionStatement	 
>12287	AssignmentExpr	i = ingredients . erase ( i )
>12288	CallExpression	ingredients . erase ( i )
>12289	ArgumentList	i
>12290	Argument	i
>12291	Identifier	i
>12292	Callee	ingredients . erase
>12293	MemberAccess	ingredients . erase
>12294	Identifier	erase
>12295	Identifier	ingredients
>12296	Identifier	i
>12297	Condition	 
>12298	AndExpression	data -> amount == 0 && data -> held <= 0
>12299	RelationalExpression	data -> held <= 0
>12300	PrimaryExpression	0
>12301	PtrMemberAccess	data -> held
>12302	Identifier	held
>12303	Identifier	data
>12304	EqualityExpression	data -> amount == 0
>12305	PrimaryExpression	0
>12306	PtrMemberAccess	data -> amount
>12307	Identifier	amount
>12308	Identifier	data
>12309	IdentifierDeclStatement	 
>12310	IdentifierDecl	* data = * i
>12311	AssignmentExpr	* data = * i
>12312	UnaryOp	* i
>12313	Identifier	i
>12314	UnaryOperator	*
>12315	Identifier	data
>12316	Identifier	data
>12317	IdentifierDeclType	IngredientData *
>12318	Condition	 
>12319	EqualityExpression	i != ingredients . end ( )
>12320	CallExpression	ingredients . end ( )
>12321	ArgumentList	 
>12322	Callee	ingredients . end
>12323	MemberAccess	ingredients . end
>12324	Identifier	end
>12325	Identifier	ingredients
>12326	Identifier	i
>12327	ForInit	 
>12328	IdentifierDeclStatement	IngredientDatas 
>12329	IdentifierDecl	i = ingredients . begin ( )
>12330	AssignmentExpr	i = ingredients . begin ( )
>12331	CallExpression	ingredients . begin ( )
>12332	ArgumentList	 
>12333	Callee	ingredients . begin
>12334	MemberAccess	ingredients . begin
>12335	Identifier	begin
>12336	Identifier	ingredients
>12337	Identifier	i
>12338	Identifier	i
>12339	IdentifierDeclType	IngredientDatas 
>12353	FunctionDef	Continuity 
>12354	ParameterList	Avatar * a
>12355	Parameter	 
>12356	Identifier	a
>12357	ParameterType	Avatar *
>12358	ReturnType	void
>12359	CompoundStatement	 
>12360	ExpressionStatement	 
>12361	AssignmentExpr	auraTimer = a -> auraTimer
>12362	PtrMemberAccess	a -> auraTimer
>12363	Identifier	auraTimer
>12364	Identifier	a
>12365	Identifier	auraTimer
>12366	ExpressionStatement	 
>12367	AssignmentExpr	auraType = a -> activeAura
>12368	PtrMemberAccess	a -> activeAura
>12369	Identifier	activeAura
>12370	Identifier	a
>12371	Identifier	auraType
>12372	ExpressionStatement	 
>12373	AssignmentExpr	health = a -> health
>12374	PtrMemberAccess	a -> health
>12375	Identifier	health
>12376	Identifier	a
>12377	Identifier	health
>12378	ExpressionStatement	 
>12379	AssignmentExpr	maxHealth = a -> maxHealth
>12380	PtrMemberAccess	a -> maxHealth
>12381	Identifier	maxHealth
>12382	Identifier	a
>12383	Identifier	maxHealth
>12397	FunctionDef	Continuity 
>12398	ParameterList	std 
>12399	Parameter	 
>12400	Identifier	flag
>12401	ParameterType	std 
>12402	ReturnType	int
>12403	CompoundStatement	 
>12404	ReturnStatement	 
>12405	ArrayIndexing	flags [ flag ]
>12406	Identifier	flag
>12407	Identifier	flags
>12408	IfStatement	if ( flag == \"story\" )
>12409	ExpressionStatement	 
>12410	CallExpression	errorLog ( \"Hey! Use the new fancy story functions!\" )
>12411	ArgumentList	\"Hey! Use the new fancy story functions!\"
>12412	Argument	\"Hey! Use the new fancy story functions!\"
>12413	PrimaryExpression	\"Hey! Use the new fancy story functions!\"
>12414	Callee	errorLog
>12415	Identifier	errorLog
>12416	Condition	 
>12417	EqualityExpression	flag == \"story\"
>12418	PrimaryExpression	\"story\"
>12419	Identifier	flag
>12427	FunctionDef	Continuity 
>12428	ParameterList	std 
>12429	Parameter	 
>12430	Identifier	v
>12431	ParameterType	int
>12432	Parameter	 
>12433	Identifier	flag
>12434	ParameterType	std 
>12435	ReturnType	void
>12436	CompoundStatement	 
>12437	ExpressionStatement	 
>12438	AssignmentExpr	flags [ flag ] = v
>12439	Identifier	v
>12440	ArrayIndexing	flags [ flag ]
>12441	Identifier	flag
>12442	Identifier	flags
>12451	FunctionDef	Continuity 
>12452	ParameterList	 
>12453	ReturnType	void
>12454	CompoundStatement	 
>12455	ExpressionStatement	 
>12456	CallExpression	in . close ( )
>12457	ArgumentList	 
>12458	Callee	in . close
>12459	MemberAccess	in . close
>12460	Identifier	close
>12461	Identifier	in
>12462	WhileStatement	while ( std 
>12463	CompoundStatement	 
>12464	ExpressionStatement	 
>12465	CallExpression	petData . push_back ( p )
>12466	ArgumentList	p
>12467	Argument	p
>12468	Identifier	p
>12469	Callee	petData . push_back
>12470	MemberAccess	petData . push_back
>12471	Identifier	push_back
>12472	Identifier	petData
>12473	ExpressionStatement	 
>12474	ShiftExpression	is >> num >> p . namePart
>12475	ShiftExpression	num >> p . namePart
>12476	MemberAccess	p . namePart
>12477	Identifier	namePart
>12478	Identifier	p
>12479	Identifier	num
>12480	Identifier	is
>12481	IdentifierDeclStatement	 
>12482	IdentifierDecl	is ( read )
>12483	Identifier	read
>12484	Identifier	is
>12485	IdentifierDeclType	std 
>12486	IdentifierDeclStatement	 
>12487	IdentifierDecl	p
>12488	Identifier	p
>12489	IdentifierDeclType	PetData
>12490	IdentifierDeclStatement	 
>12491	IdentifierDecl	num = 0
>12492	AssignmentExpr	num = 0
>12493	PrimaryExpression	0
>12494	Identifier	num
>12495	Identifier	num
>12496	IdentifierDeclType	int
>12497	Condition	 
>12498	CallExpression	std 
>12499	ArgumentList	in
>12500	Argument	read
>12501	Identifier	read
>12502	Argument	in
>12503	Identifier	in
>12504	Callee	std 
>12505	Identifier	std 
>12506	IdentifierDeclStatement	 
>12507	IdentifierDecl	read
>12508	Identifier	read
>12509	IdentifierDeclType	std 
>12510	IdentifierDeclStatement	 
>12511	IdentifierDecl	in ( \"data/pets.txt\" )
>12512	PrimaryExpression	\"data/pets.txt\"
>12513	Identifier	in
>12514	IdentifierDeclType	InStream
>12515	ExpressionStatement	 
>12516	CallExpression	petData . clear ( )
>12517	ArgumentList	 
>12518	Callee	petData . clear
>12519	MemberAccess	petData . clear
>12520	Identifier	clear
>12521	Identifier	petData
>12532	FunctionDef	Continuity 
>12533	ParameterList	int idx
>12534	Parameter	 
>12535	Identifier	idx
>12536	ParameterType	int
>12537	ReturnType	PetData *
>12538	CompoundStatement	 
>12539	ReturnStatement	 
>12540	UnaryOp	& petData [ idx ]
>12541	ArrayIndexing	petData [ idx ]
>12542	Identifier	idx
>12543	Identifier	petData
>12544	UnaryOperator	&
>12545	IfStatement	if ( idx < 0 || idx >= petData . size ( ) )
>12546	CompoundStatement	 
>12547	ReturnStatement	 
>12548	PrimaryExpression	0
>12549	ExpressionStatement	 
>12550	CallExpression	debugLog ( os . str ( ) )
>12551	ArgumentList	os . str ( )
>12552	Argument	os . str ( )
>12553	CallExpression	os . str ( )
>12554	ArgumentList	 
>12555	Callee	os . str
>12556	MemberAccess	os . str
>12557	Identifier	str
>12558	Identifier	os
>12559	Callee	debugLog
>12560	Identifier	debugLog
>12561	ExpressionStatement	 
>12562	ShiftExpression	os << \"getPetData(\" << idx << \") index out of range\"
>12563	ShiftExpression	\"getPetData(\" << idx << \") index out of range\"
>12564	ShiftExpression	idx << \") index out of range\"
>12565	PrimaryExpression	\") index out of range\"
>12566	Identifier	idx
>12567	PrimaryExpression	\"getPetData(\"
>12568	Identifier	os
>12569	IdentifierDeclStatement	 
>12570	IdentifierDecl	os
>12571	Identifier	os
>12572	IdentifierDeclType	std 
>12573	Condition	 
>12574	OrExpression	idx < 0 || idx >= petData . size ( )
>12575	RelationalExpression	idx >= petData . size ( )
>12576	CallExpression	petData . size ( )
>12577	ArgumentList	 
>12578	Callee	petData . size
>12579	MemberAccess	petData . size
>12580	Identifier	size
>12581	Identifier	petData
>12582	Identifier	idx
>12583	RelationalExpression	idx < 0
>12584	PrimaryExpression	0
>12585	Identifier	idx
>12596	FunctionDef	Continuity 
>12597	ParameterList	float v
>12598	Parameter	 
>12599	Identifier	v
>12600	ParameterType	float
>12601	ReturnType	bool
>12602	CompoundStatement	 
>12603	ReturnStatement	 
>12604	EqualityExpression	story == v
>12605	Identifier	v
>12606	Identifier	story
>12612	FunctionDef	Continuity 
>12613	ParameterList	 
>12614	ReturnType	float
>12615	CompoundStatement	 
>12616	ReturnStatement	 
>12617	Identifier	story
>12622	FunctionDef	Continuity 
>12623	ParameterList	float v
>12624	Parameter	 
>12625	Identifier	v
>12626	ParameterType	float
>12627	ReturnType	void
>12628	CompoundStatement	 
>12629	ExpressionStatement	 
>12630	AssignmentExpr	story = v
>12631	Identifier	v
>12632	Identifier	story
>12638	FunctionDef	Continuity 
>12639	ParameterList	std 
>12640	Parameter	 
>12641	Identifier	flag
>12642	ParameterType	std 
>12643	ReturnType	std 
>12644	CompoundStatement	 
>12645	ReturnStatement	 
>12646	ArrayIndexing	stringFlags [ flag ]
>12647	Identifier	flag
>12648	Identifier	stringFlags
>12656	FunctionDef	Continuity 
>12657	ParameterList	std 
>12658	Parameter	 
>12659	Identifier	v
>12660	ParameterType	std 
>12661	Parameter	 
>12662	Identifier	flag
>12663	ParameterType	std 
>12664	ReturnType	void
>12665	CompoundStatement	 
>12666	ExpressionStatement	 
>12667	AssignmentExpr	stringFlags [ flag ] = v
>12668	Identifier	v
>12669	ArrayIndexing	stringFlags [ flag ]
>12670	Identifier	flag
>12671	Identifier	stringFlags
>12680	FunctionDef	Continuity 
>12681	ParameterList	 
>12682	ReturnType	void
>12683	CompoundStatement	 
>12684	ForStatement	for ( Flags 
>12685	CompoundStatement	 
>12686	IfStatement	if ( ( * i ) . first . find ( \"CHOICE_\" ) != std 
>12687	CompoundStatement	 
>12688	ExpressionStatement	 
>12689	AssignmentExpr	( * i ) . second = 0
>12690	PrimaryExpression	0
>12691	MemberAccess	( * i ) . second
>12692	Identifier	second
>12693	UnaryOp	* i
>12694	Identifier	i
>12695	UnaryOperator	*
>12696	Condition	 
>12697	EqualityExpression	( * i ) . first . find ( \"CHOICE_\" ) != std 
>12698	Identifier	std 
>12699	CallExpression	( * i ) . first . find ( \"CHOICE_\" )
>12700	ArgumentList	\"CHOICE_\"
>12701	Argument	\"CHOICE_\"
>12702	PrimaryExpression	\"CHOICE_\"
>12703	Callee	( * i ) . first . find
>12704	MemberAccess	( * i ) . first . find
>12705	Identifier	find
>12706	MemberAccess	( * i ) . first
>12707	Identifier	first
>12708	UnaryOp	* i
>12709	Identifier	i
>12710	UnaryOperator	*
>12711	IncDecOp	 
>12712	IncDec	++
>12713	Identifier	i
>12714	Condition	 
>12715	EqualityExpression	i != flags . end ( )
>12716	CallExpression	flags . end ( )
>12717	ArgumentList	 
>12718	Callee	flags . end
>12719	MemberAccess	flags . end
>12720	Identifier	end
>12721	Identifier	flags
>12722	Identifier	i
>12723	ForInit	 
>12724	IdentifierDeclStatement	Flags 
>12725	IdentifierDecl	i = flags . begin ( )
>12726	AssignmentExpr	i = flags . begin ( )
>12727	CallExpression	flags . begin ( )
>12728	ArgumentList	 
>12729	Callee	flags . begin
>12730	MemberAccess	flags . begin
>12731	Identifier	begin
>12732	Identifier	flags
>12733	Identifier	i
>12734	Identifier	i
>12735	IdentifierDeclType	Flags 
>12748	FunctionDef	Continuity 
>12749	ParameterList	 
>12750	ReturnType	void
>12751	CompoundStatement	 
>12752	ExpressionStatement	 
>12753	CallExpression	a -> heal ( maxHealth - a -> health )
>12754	ArgumentList	maxHealth - a -> health
>12755	Argument	maxHealth - a -> health
>12756	AdditiveExpression	maxHealth - a -> health
>12757	PtrMemberAccess	a -> health
>12758	Identifier	health
>12759	Identifier	a
>12760	Identifier	maxHealth
>12761	Callee	a -> heal
>12762	PtrMemberAccess	a -> heal
>12763	Identifier	heal
>12764	Identifier	a
>12765	ExpressionStatement	 
>12766	AssignmentExpr	a -> maxHealth = maxHealth
>12767	Identifier	maxHealth
>12768	PtrMemberAccess	a -> maxHealth
>12769	Identifier	maxHealth
>12770	Identifier	a
>12771	ExpressionStatement	 
>12772	AssignmentExpr	maxHealth = a -> maxHealth + 1
>12773	AdditiveExpression	a -> maxHealth + 1
>12774	PrimaryExpression	1
>12775	PtrMemberAccess	a -> maxHealth
>12776	Identifier	maxHealth
>12777	Identifier	a
>12778	Identifier	maxHealth
>12779	IdentifierDeclStatement	 
>12780	IdentifierDecl	* a = dsq -> game -> avatar
>12781	AssignmentExpr	* a = dsq -> game -> avatar
>12782	PtrMemberAccess	dsq -> game -> avatar
>12783	Identifier	avatar
>12784	PtrMemberAccess	dsq -> game
>12785	Identifier	game
>12786	Identifier	dsq
>12787	Identifier	a
>12788	Identifier	a
>12789	IdentifierDeclType	Avatar *
>12804	FunctionDef	Continuity 
>12805	ParameterList	int slot , Vector position , unsigned char * scrShotData , int scrShotWidth , int scrShotHeight
>12806	Parameter	 
>12807	Identifier	scrShotHeight
>12808	ParameterType	int
>12809	Parameter	 
>12810	Identifier	scrShotWidth
>12811	ParameterType	int
>12812	Parameter	 
>12813	Identifier	scrShotData
>12814	ParameterType	unsigned char *
>12815	Parameter	 
>12816	Identifier	position
>12817	ParameterType	Vector
>12818	Parameter	 
>12819	Identifier	slot
>12820	ParameterType	int
>12821	ReturnType	void
>12822	CompoundStatement	 
>12823	ExpressionStatement	 
>12824	CallExpression	fclose ( fh )
>12825	ArgumentList	fh
>12826	Argument	fh
>12827	Identifier	fh
>12828	Callee	fclose
>12829	Identifier	fclose
>12830	IfStatement	if ( written != z . size ( ) )
>12831	CompoundStatement	 
>12832	ExpressionStatement	 
>12833	CallExpression	debugLog ( \"FAILED TO WRITE SAVE FILE COMPLETELY\" )
>12834	ArgumentList	\"FAILED TO WRITE SAVE FILE COMPLETELY\"
>12835	Argument	\"FAILED TO WRITE SAVE FILE COMPLETELY\"
>12836	PrimaryExpression	\"FAILED TO WRITE SAVE FILE COMPLETELY\"
>12837	Callee	debugLog
>12838	Identifier	debugLog
>12839	Condition	 
>12840	EqualityExpression	written != z . size ( )
>12841	CallExpression	z . size ( )
>12842	ArgumentList	 
>12843	Callee	z . size
>12844	MemberAccess	z . size
>12845	Identifier	size
>12846	Identifier	z
>12847	Identifier	written
>12848	IdentifierDeclStatement	 
>12849	IdentifierDecl	written = fwrite ( z . contents ( ) , 1 , z . size ( ) , fh )
>12850	AssignmentExpr	written = fwrite ( z . contents ( ) , 1 , z . size ( ) , fh )
>12851	CallExpression	fwrite ( z . contents ( ) , 1 , z . size ( ) , fh )
>12852	ArgumentList	z . contents ( )
>12853	Argument	fh
>12854	Identifier	fh
>12855	Argument	z . size ( )
>12856	CallExpression	z . size ( )
>12857	ArgumentList	 
>12858	Callee	z . size
>12859	MemberAccess	z . size
>12860	Identifier	size
>12861	Identifier	z
>12862	Argument	1
>12863	PrimaryExpression	1
>12864	Argument	z . contents ( )
>12865	CallExpression	z . contents ( )
>12866	ArgumentList	 
>12867	Callee	z . contents
>12868	MemberAccess	z . contents
>12869	Identifier	contents
>12870	Identifier	z
>12871	Callee	fwrite
>12872	Identifier	fwrite
>12873	Identifier	written
>12874	Identifier	written
>12875	IdentifierDeclType	size_t
>12876	ExpressionStatement	 
>12877	CallExpression	debugLog ( os . str ( ) )
>12878	ArgumentList	os . str ( )
>12879	Argument	os . str ( )
>12880	CallExpression	os . str ( )
>12881	ArgumentList	 
>12882	Callee	os . str
>12883	MemberAccess	os . str
>12884	Identifier	str
>12885	Identifier	os
>12886	Callee	debugLog
>12887	Identifier	debugLog
>12888	ExpressionStatement	 
>12889	ShiftExpression	os << \"Writing \" << z . size ( ) << \" bytes to save file \" << fn
>12890	ShiftExpression	\"Writing \" << z . size ( ) << \" bytes to save file \" << fn
>12891	ShiftExpression	z . size ( ) << \" bytes to save file \" << fn
>12892	ShiftExpression	\" bytes to save file \" << fn
>12893	Identifier	fn
>12894	PrimaryExpression	\" bytes to save file \"
>12895	CallExpression	z . size ( )
>12896	ArgumentList	 
>12897	Callee	z . size
>12898	MemberAccess	z . size
>12899	Identifier	size
>12900	Identifier	z
>12901	PrimaryExpression	\"Writing \"
>12902	Identifier	os
>12903	IdentifierDeclStatement	 
>12904	IdentifierDecl	os
>12905	Identifier	os
>12906	IdentifierDeclType	std 
>12907	ExpressionStatement	 
>12908	CallExpression	z . Compress ( 3 )
>12909	ArgumentList	3
>12910	Argument	3
>12911	PrimaryExpression	3
>12912	Callee	z . Compress
>12913	MemberAccess	z . Compress
>12914	Identifier	Compress
>12915	Identifier	z
>12916	ExpressionStatement	 
>12917	CallExpression	z . SetForceCompression ( true )
>12918	ArgumentList	true
>12919	Argument	true
>12920	Identifier	true
>12921	Callee	z . SetForceCompression
>12922	MemberAccess	z . SetForceCompression
>12923	Identifier	SetForceCompression
>12924	Identifier	z
>12925	ExpressionStatement	 
>12926	CallExpression	z . init ( ( void * ) xmlstr , printer . CStrSize ( ) , ZlibCompressor 
>12927	ArgumentList	( void * ) xmlstr
>12928	Argument	ZlibCompressor 
>12929	Identifier	ZlibCompressor 
>12930	Argument	printer . CStrSize ( )
>12931	CallExpression	printer . CStrSize ( )
>12932	ArgumentList	 
>12933	Callee	printer . CStrSize
>12934	MemberAccess	printer . CStrSize
>12935	Identifier	CStrSize
>12936	Identifier	printer
>12937	Argument	( void * ) xmlstr
>12938	CastExpression	( void * ) xmlstr
>12939	Identifier	xmlstr
>12940	CastTarget	void *
>12941	Callee	z . init
>12942	MemberAccess	z . init
>12943	Identifier	init
>12944	Identifier	z
>12945	IdentifierDeclStatement	 
>12946	IdentifierDecl	z
>12947	Identifier	z
>12948	IdentifierDeclType	ZlibCompressor
>12949	IdentifierDeclStatement	 
>12950	IdentifierDecl	* xmlstr = printer . CStr ( )
>12951	AssignmentExpr	* xmlstr = printer . CStr ( )
>12952	CallExpression	printer . CStr ( )
>12953	ArgumentList	 
>12954	Callee	printer . CStr
>12955	MemberAccess	printer . CStr
>12956	Identifier	CStr
>12957	Identifier	printer
>12958	Identifier	xmlstr
>12959	Identifier	xmlstr
>12960	IdentifierDeclType	const char *
>12961	ExpressionStatement	 
>12962	CallExpression	doc . Accept ( & printer )
>12963	ArgumentList	& printer
>12964	Argument	& printer
>12965	UnaryOp	& printer
>12966	Identifier	printer
>12967	UnaryOperator	&
>12968	Callee	doc . Accept
>12969	MemberAccess	doc . Accept
>12970	Identifier	Accept
>12971	Identifier	doc
>12972	IdentifierDeclStatement	 
>12973	IdentifierDecl	printer
>12974	Identifier	printer
>12975	IdentifierDeclType	XMLPrinter
>12976	IfStatement	if ( ! fh )
>12977	CompoundStatement	 
>12978	ReturnStatement	 
>12979	ExpressionStatement	 
>12980	CallExpression	debugLog ( \"FAILED TO SAVE GAME\" )
>12981	ArgumentList	\"FAILED TO SAVE GAME\"
>12982	Argument	\"FAILED TO SAVE GAME\"
>12983	PrimaryExpression	\"FAILED TO SAVE GAME\"
>12984	Callee	debugLog
>12985	Identifier	debugLog
>12986	Condition	 
>12987	UnaryOp	! fh
>12988	Identifier	fh
>12989	UnaryOperator	!
>12990	IdentifierDeclStatement	 
>12991	IdentifierDecl	* fh = fopen ( fn . c_str ( ) , \"wb\" )
>12992	AssignmentExpr	* fh = fopen ( fn . c_str ( ) , \"wb\" )
>12993	CallExpression	fopen ( fn . c_str ( ) , \"wb\" )
>12994	ArgumentList	fn . c_str ( )
>12995	Argument	\"wb\"
>12996	PrimaryExpression	\"wb\"
>12997	Argument	fn . c_str ( )
>12998	CallExpression	fn . c_str ( )
>12999	ArgumentList	 
>13000	Callee	fn . c_str
>13001	MemberAccess	fn . c_str
>13002	Identifier	c_str
>13003	Identifier	fn
>13004	Callee	fopen
>13005	Identifier	fopen
>13006	Identifier	fh
>13007	Identifier	fh
>13008	IdentifierDeclType	FILE *
>13009	IdentifierDeclStatement	 
>13010	IdentifierDecl	fn = core -> adjustFilenameCase ( getSaveFileName ( slot , \"aqs\" ) )
>13011	AssignmentExpr	fn = core -> adjustFilenameCase ( getSaveFileName ( slot , \"aqs\" ) )
>13012	CallExpression	core -> adjustFilenameCase ( getSaveFileName ( slot , \"aqs\" ) )
>13013	ArgumentList	getSaveFileName ( slot , \"aqs\" )
>13014	Argument	getSaveFileName ( slot , \"aqs\" )
>13015	CallExpression	getSaveFileName ( slot , \"aqs\" )
>13016	ArgumentList	slot
>13017	Argument	\"aqs\"
>13018	PrimaryExpression	\"aqs\"
>13019	Argument	slot
>13020	Identifier	slot
>13021	Callee	getSaveFileName
>13022	Identifier	getSaveFileName
>13023	Callee	core -> adjustFilenameCase
>13024	PtrMemberAccess	core -> adjustFilenameCase
>13025	Identifier	adjustFilenameCase
>13026	Identifier	core
>13027	Identifier	fn
>13028	Identifier	fn
>13029	IdentifierDeclType	std 
>13030	ExpressionStatement	 
>13031	CallExpression	doc . InsertEndChild ( startData )
>13032	ArgumentList	startData
>13033	Argument	startData
>13034	Identifier	startData
>13035	Callee	doc . InsertEndChild
>13036	MemberAccess	doc . InsertEndChild
>13037	Identifier	InsertEndChild
>13038	Identifier	doc
>13039	IfStatement	if ( webTimer . isActive ( ) && dsq -> game -> avatar -> web )
>13040	CompoundStatement	 
>13041	ExpressionStatement	 
>13042	CallExpression	startData -> SetAttribute ( \"web\" , osw . str ( ) . c_str ( ) )
>13043	ArgumentList	\"web\"
>13044	Argument	osw . str ( ) . c_str ( )
>13045	CallExpression	osw . str ( ) . c_str ( )
>13046	ArgumentList	 
>13047	Callee	osw . str ( ) . c_str
>13048	MemberAccess	osw . str ( ) . c_str
>13049	Identifier	c_str
>13050	CallExpression	osw . str ( )
>13051	ArgumentList	 
>13052	Callee	osw . str
>13053	MemberAccess	osw . str
>13054	Identifier	str
>13055	Identifier	osw
>13056	Argument	\"web\"
>13057	PrimaryExpression	\"web\"
>13058	Callee	startData -> SetAttribute
>13059	PtrMemberAccess	startData -> SetAttribute
>13060	Identifier	SetAttribute
>13061	Identifier	startData
>13062	ForStatement	for ( int i = 0 ; i < nump ; ++ i )
>13063	CompoundStatement	 
>13064	ExpressionStatement	 
>13065	ShiftExpression	osw << v . x << \" \" << v . y << \" \"
>13066	ShiftExpression	v . x << \" \" << v . y << \" \"
>13067	ShiftExpression	\" \" << v . y << \" \"
>13068	ShiftExpression	v . y << \" \"
>13069	PrimaryExpression	\" \"
>13070	MemberAccess	v . y
>13071	Identifier	y
>13072	Identifier	v
>13073	PrimaryExpression	\" \"
>13074	MemberAccess	v . x
>13075	Identifier	x
>13076	Identifier	v
>13077	Identifier	osw
>13078	IdentifierDeclStatement	 
>13079	IdentifierDecl	v = w -> getPoint ( i )
>13080	AssignmentExpr	v = w -> getPoint ( i )
>13081	CallExpression	w -> getPoint ( i )
>13082	ArgumentList	i
>13083	Argument	i
>13084	Identifier	i
>13085	Callee	w -> getPoint
>13086	PtrMemberAccess	w -> getPoint
>13087	Identifier	getPoint
>13088	Identifier	w
>13089	Identifier	v
>13090	Identifier	v
>13091	IdentifierDeclType	Vector
>13092	UnaryExpression	 
>13093	Identifier	i
>13094	IncDec	++
>13095	Condition	 
>13096	RelationalExpression	i < nump
>13097	Identifier	nump
>13098	Identifier	i
>13099	ForInit	 
>13100	IdentifierDeclStatement	int i = 0 ;
>13101	IdentifierDecl	i = 0
>13102	AssignmentExpr	i = 0
>13103	PrimaryExpression	0
>13104	Identifier	i
>13105	Identifier	i
>13106	IdentifierDeclType	int
>13107	ExpressionStatement	 
>13108	ShiftExpression	osw << webBitTimer . getValue ( ) << \" \" << nump << \" \"
>13109	ShiftExpression	webBitTimer . getValue ( ) << \" \" << nump << \" \"
>13110	ShiftExpression	\" \" << nump << \" \"
>13111	ShiftExpression	nump << \" \"
>13112	PrimaryExpression	\" \"
>13113	Identifier	nump
>13114	PrimaryExpression	\" \"
>13115	CallExpression	webBitTimer . getValue ( )
>13116	ArgumentList	 
>13117	Callee	webBitTimer . getValue
>13118	MemberAccess	webBitTimer . getValue
>13119	Identifier	getValue
>13120	Identifier	webBitTimer
>13121	Identifier	osw
>13122	IdentifierDeclStatement	 
>13123	IdentifierDecl	osw
>13124	Identifier	osw
>13125	IdentifierDeclType	std 
>13126	IdentifierDeclStatement	 
>13127	IdentifierDecl	nump = w -> getNumPoints ( )
>13128	AssignmentExpr	nump = w -> getNumPoints ( )
>13129	CallExpression	w -> getNumPoints ( )
>13130	ArgumentList	 
>13131	Callee	w -> getNumPoints
>13132	PtrMemberAccess	w -> getNumPoints
>13133	Identifier	getNumPoints
>13134	Identifier	w
>13135	Identifier	nump
>13136	Identifier	nump
>13137	IdentifierDeclType	const int
>13138	IdentifierDeclStatement	 
>13139	IdentifierDecl	* w = dsq -> game -> avatar -> web
>13140	AssignmentExpr	* w = dsq -> game -> avatar -> web
>13141	PtrMemberAccess	dsq -> game -> avatar -> web
>13142	Identifier	web
>13143	PtrMemberAccess	dsq -> game -> avatar
>13144	Identifier	avatar
>13145	PtrMemberAccess	dsq -> game
>13146	Identifier	game
>13147	Identifier	dsq
>13148	Identifier	w
>13149	Identifier	w
>13150	IdentifierDeclType	Web *
>13151	Condition	 
>13152	AndExpression	webTimer . isActive ( ) && dsq -> game -> avatar -> web
>13153	PtrMemberAccess	dsq -> game -> avatar -> web
>13154	Identifier	web
>13155	PtrMemberAccess	dsq -> game -> avatar
>13156	Identifier	avatar
>13157	PtrMemberAccess	dsq -> game
>13158	Identifier	game
>13159	Identifier	dsq
>13160	CallExpression	webTimer . isActive ( )
>13161	ArgumentList	 
>13162	Callee	webTimer . isActive
>13163	MemberAccess	webTimer . isActive
>13164	Identifier	isActive
>13165	Identifier	webTimer
>13166	IfStatement	if ( dsq -> game -> avatar -> activeAura != AURA_NONE )
>13167	CompoundStatement	 
>13168	ExpressionStatement	 
>13169	CallExpression	startData -> SetAttribute ( \"aura\" , osa . str ( ) . c_str ( ) )
>13170	ArgumentList	\"aura\"
>13171	Argument	osa . str ( ) . c_str ( )
>13172	CallExpression	osa . str ( ) . c_str ( )
>13173	ArgumentList	 
>13174	Callee	osa . str ( ) . c_str
>13175	MemberAccess	osa . str ( ) . c_str
>13176	Identifier	c_str
>13177	CallExpression	osa . str ( )
>13178	ArgumentList	 
>13179	Callee	osa . str
>13180	MemberAccess	osa . str
>13181	Identifier	str
>13182	Identifier	osa
>13183	Argument	\"aura\"
>13184	PrimaryExpression	\"aura\"
>13185	Callee	startData -> SetAttribute
>13186	PtrMemberAccess	startData -> SetAttribute
>13187	Identifier	SetAttribute
>13188	Identifier	startData
>13189	ExpressionStatement	 
>13190	ShiftExpression	osa << dsq -> game -> avatar -> activeAura << \" \" << dsq -> game -> avatar -> auraTimer
>13191	ShiftExpression	dsq -> game -> avatar -> activeAura << \" \" << dsq -> game -> avatar -> auraTimer
>13192	ShiftExpression	\" \" << dsq -> game -> avatar -> auraTimer
>13193	PtrMemberAccess	dsq -> game -> avatar -> auraTimer
>13194	Identifier	auraTimer
>13195	PtrMemberAccess	dsq -> game -> avatar
>13196	Identifier	avatar
>13197	PtrMemberAccess	dsq -> game
>13198	Identifier	game
>13199	Identifier	dsq
>13200	PrimaryExpression	\" \"
>13201	PtrMemberAccess	dsq -> game -> avatar -> activeAura
>13202	Identifier	activeAura
>13203	PtrMemberAccess	dsq -> game -> avatar
>13204	Identifier	avatar
>13205	PtrMemberAccess	dsq -> game
>13206	Identifier	game
>13207	Identifier	dsq
>13208	Identifier	osa
>13209	IdentifierDeclStatement	 
>13210	IdentifierDecl	osa
>13211	Identifier	osa
>13212	IdentifierDeclType	std 
>13213	Condition	 
>13214	EqualityExpression	dsq -> game -> avatar -> activeAura != AURA_NONE
>13215	Identifier	AURA_NONE
>13216	PtrMemberAccess	dsq -> game -> avatar -> activeAura
>13217	Identifier	activeAura
>13218	PtrMemberAccess	dsq -> game -> avatar
>13219	Identifier	avatar
>13220	PtrMemberAccess	dsq -> game
>13221	Identifier	game
>13222	Identifier	dsq
>13223	IfStatement	if ( poisonTimer . isActive ( ) )
>13224	CompoundStatement	 
>13225	ExpressionStatement	 
>13226	CallExpression	startData -> SetAttribute ( \"poison\" , osp . str ( ) . c_str ( ) )
>13227	ArgumentList	\"poison\"
>13228	Argument	osp . str ( ) . c_str ( )
>13229	CallExpression	osp . str ( ) . c_str ( )
>13230	ArgumentList	 
>13231	Callee	osp . str ( ) . c_str
>13232	MemberAccess	osp . str ( ) . c_str
>13233	Identifier	c_str
>13234	CallExpression	osp . str ( )
>13235	ArgumentList	 
>13236	Callee	osp . str
>13237	MemberAccess	osp . str
>13238	Identifier	str
>13239	Identifier	osp
>13240	Argument	\"poison\"
>13241	PrimaryExpression	\"poison\"
>13242	Callee	startData -> SetAttribute
>13243	PtrMemberAccess	startData -> SetAttribute
>13244	Identifier	SetAttribute
>13245	Identifier	startData
>13246	ExpressionStatement	 
>13247	ShiftExpression	osp << poison << \" \" << poisonTimer . getValue ( ) << \" \" << poisonBitTimer . getValue ( )
>13248	ShiftExpression	poison << \" \" << poisonTimer . getValue ( ) << \" \" << poisonBitTimer . getValue ( )
>13249	ShiftExpression	\" \" << poisonTimer . getValue ( ) << \" \" << poisonBitTimer . getValue ( )
>13250	ShiftExpression	poisonTimer . getValue ( ) << \" \" << poisonBitTimer . getValue ( )
>13251	ShiftExpression	\" \" << poisonBitTimer . getValue ( )
>13252	CallExpression	poisonBitTimer . getValue ( )
>13253	ArgumentList	 
>13254	Callee	poisonBitTimer . getValue
>13255	MemberAccess	poisonBitTimer . getValue
>13256	Identifier	getValue
>13257	Identifier	poisonBitTimer
>13258	PrimaryExpression	\" \"
>13259	CallExpression	poisonTimer . getValue ( )
>13260	ArgumentList	 
>13261	Callee	poisonTimer . getValue
>13262	MemberAccess	poisonTimer . getValue
>13263	Identifier	getValue
>13264	Identifier	poisonTimer
>13265	PrimaryExpression	\" \"
>13266	Identifier	poison
>13267	Identifier	osp
>13268	IdentifierDeclStatement	 
>13269	IdentifierDecl	osp
>13270	Identifier	osp
>13271	IdentifierDeclType	std 
>13272	Condition	 
>13273	CallExpression	poisonTimer . isActive ( )
>13274	ArgumentList	 
>13275	Callee	poisonTimer . isActive
>13276	MemberAccess	poisonTimer . isActive
>13277	Identifier	isActive
>13278	Identifier	poisonTimer
>13279	Statement	 
>13280	Statement	 
>13281	ExpressionStatement	 
>13282	CallExpression	TIMER_AND_VALUE_ATTR ( \"light\" , lightTimer , light )
>13283	ArgumentList	\"light\"
>13284	Argument	light
>13285	Identifier	light
>13286	Argument	lightTimer
>13287	Identifier	lightTimer
>13288	Argument	\"light\"
>13289	PrimaryExpression	\"light\"
>13290	Callee	TIMER_AND_VALUE_ATTR
>13291	Identifier	TIMER_AND_VALUE_ATTR
>13292	ExpressionStatement	 
>13293	CallExpression	TIMER_AND_VALUE_ATTR ( \"liPower\" , liPowerTimer , liPower )
>13294	ArgumentList	\"liPower\"
>13295	Argument	liPower
>13296	Identifier	liPower
>13297	Argument	liPowerTimer
>13298	Identifier	liPowerTimer
>13299	Argument	\"liPower\"
>13300	PrimaryExpression	\"liPower\"
>13301	Callee	TIMER_AND_VALUE_ATTR
>13302	Identifier	TIMER_AND_VALUE_ATTR
>13303	ExpressionStatement	 
>13304	CallExpression	TIMER_AND_VALUE_ATTR ( \"petPower\" , petPowerTimer , petPower )
>13305	ArgumentList	\"petPower\"
>13306	Argument	petPower
>13307	Identifier	petPower
>13308	Argument	petPowerTimer
>13309	Identifier	petPowerTimer
>13310	Argument	\"petPower\"
>13311	PrimaryExpression	\"petPower\"
>13312	Callee	TIMER_AND_VALUE_ATTR
>13313	Identifier	TIMER_AND_VALUE_ATTR
>13314	ExpressionStatement	 
>13315	CallExpression	TIMER_AND_VALUE_ATTR ( \"energyMult\" , energyTimer , energyMult )
>13316	ArgumentList	\"energyMult\"
>13317	Argument	energyMult
>13318	Identifier	energyMult
>13319	Argument	energyTimer
>13320	Identifier	energyTimer
>13321	Argument	\"energyMult\"
>13322	PrimaryExpression	\"energyMult\"
>13323	Callee	TIMER_AND_VALUE_ATTR
>13324	Identifier	TIMER_AND_VALUE_ATTR
>13325	ExpressionStatement	 
>13326	CallExpression	TIMER_AND_VALUE_ATTR ( \"defenseMult\" , defenseMultTimer , defenseMult )
>13327	ArgumentList	\"defenseMult\"
>13328	Argument	defenseMult
>13329	Identifier	defenseMult
>13330	Argument	defenseMultTimer
>13331	Identifier	defenseMultTimer
>13332	Argument	\"defenseMult\"
>13333	PrimaryExpression	\"defenseMult\"
>13334	Callee	TIMER_AND_VALUE_ATTR
>13335	Identifier	TIMER_AND_VALUE_ATTR
>13336	ExpressionStatement	 
>13337	CallExpression	TIMER_AND_VALUE_ATTR ( \"speedMult\" , speedMultTimer , speedMult )
>13338	ArgumentList	\"speedMult\"
>13339	Argument	speedMult
>13340	Identifier	speedMult
>13341	Argument	speedMultTimer
>13342	Identifier	speedMultTimer
>13343	Argument	\"speedMult\"
>13344	PrimaryExpression	\"speedMult\"
>13345	Callee	TIMER_AND_VALUE_ATTR
>13346	Identifier	TIMER_AND_VALUE_ATTR
>13347	DoStatement	do
>13348	Condition	 
>13349	PrimaryExpression	0
>13350	CompoundStatement	 
>13351	IfStatement	if ( ( ( timer ) . isActive ( ) ) && ( val ) )
>13352	CompoundStatement	 
>13353	ExpressionStatement	 
>13354	CallExpression	startData -> SetAttribute ( ( name ) , osf . str ( ) . c_str ( ) )
>13355	ArgumentList	name
>13356	Argument	osf . str ( ) . c_str ( )
>13357	CallExpression	osf . str ( ) . c_str ( )
>13358	ArgumentList	 
>13359	Callee	osf . str ( ) . c_str
>13360	MemberAccess	osf . str ( ) . c_str
>13361	Identifier	c_str
>13362	CallExpression	osf . str ( )
>13363	ArgumentList	 
>13364	Callee	osf . str
>13365	MemberAccess	osf . str
>13366	Identifier	str
>13367	Identifier	osf
>13368	Argument	name
>13369	Identifier	name
>13370	Callee	startData -> SetAttribute
>13371	PtrMemberAccess	startData -> SetAttribute
>13372	Identifier	SetAttribute
>13373	Identifier	startData
>13374	ExpressionStatement	 
>13375	ShiftExpression	osf << ( val ) << \" \" << ( ( timer ) . getValue ( ) )
>13376	ShiftExpression	( val ) << \" \" << ( ( timer ) . getValue ( ) )
>13377	ShiftExpression	\" \" << ( ( timer ) . getValue ( ) )
>13378	CallExpression	( timer ) . getValue ( )
>13379	ArgumentList	 
>13380	Callee	( timer ) . getValue
>13381	MemberAccess	( timer ) . getValue
>13382	Identifier	getValue
>13383	Identifier	timer
>13384	PrimaryExpression	\" \"
>13385	Identifier	val
>13386	Identifier	osf
>13387	IdentifierDeclStatement	 
>13388	IdentifierDecl	osf
>13389	Identifier	osf
>13390	IdentifierDeclType	std 
>13391	Condition	 
>13392	AndExpression	( ( timer ) . isActive ( ) ) && ( val )
>13393	Identifier	val
>13394	CallExpression	( timer ) . isActive ( )
>13395	ArgumentList	 
>13396	Callee	( timer ) . isActive
>13397	MemberAccess	( timer ) . isActive
>13398	Identifier	isActive
>13399	Identifier	timer
>13400	Statement	 
>13401	Statement	 
>13402	Statement	 
>13403	Statement	 
>13404	Statement	 
>13405	Statement	 
>13406	Statement	 
>13407	Statement	 
>13408	Statement	 
>13409	Statement	 
>13410	Statement	 
>13411	ExpressionStatement	 
>13412	CallExpression	SINGLE_FLOAT_ATTR ( \"webTimer\" , webTimer . isActive ( ) , webTimer . getValue ( ) )
>13413	ArgumentList	\"webTimer\"
>13414	Argument	webTimer . getValue ( )
>13415	CallExpression	webTimer . getValue ( )
>13416	ArgumentList	 
>13417	Callee	webTimer . getValue
>13418	MemberAccess	webTimer . getValue
>13419	Identifier	getValue
>13420	Identifier	webTimer
>13421	Argument	webTimer . isActive ( )
>13422	CallExpression	webTimer . isActive ( )
>13423	ArgumentList	 
>13424	Callee	webTimer . isActive
>13425	MemberAccess	webTimer . isActive
>13426	Identifier	isActive
>13427	Identifier	webTimer
>13428	Argument	\"webTimer\"
>13429	PrimaryExpression	\"webTimer\"
>13430	Callee	SINGLE_FLOAT_ATTR
>13431	Identifier	SINGLE_FLOAT_ATTR
>13432	ExpressionStatement	 
>13433	CallExpression	SINGLE_FLOAT_ATTR ( \"shieldPoints\" , true , dsq -> game -> avatar -> shieldPoints )
>13434	ArgumentList	\"shieldPoints\"
>13435	Argument	dsq -> game -> avatar -> shieldPoints
>13436	PtrMemberAccess	dsq -> game -> avatar -> shieldPoints
>13437	Identifier	shieldPoints
>13438	PtrMemberAccess	dsq -> game -> avatar
>13439	Identifier	avatar
>13440	PtrMemberAccess	dsq -> game
>13441	Identifier	game
>13442	Identifier	dsq
>13443	Argument	true
>13444	Identifier	true
>13445	Argument	\"shieldPoints\"
>13446	PrimaryExpression	\"shieldPoints\"
>13447	Callee	SINGLE_FLOAT_ATTR
>13448	Identifier	SINGLE_FLOAT_ATTR
>13449	ExpressionStatement	 
>13450	CallExpression	SINGLE_FLOAT_ATTR ( \"trip\" , tripTimer . isActive ( ) , tripTimer . getValue ( ) )
>13451	ArgumentList	\"trip\"
>13452	Argument	tripTimer . getValue ( )
>13453	CallExpression	tripTimer . getValue ( )
>13454	ArgumentList	 
>13455	Callee	tripTimer . getValue
>13456	MemberAccess	tripTimer . getValue
>13457	Identifier	getValue
>13458	Identifier	tripTimer
>13459	Argument	tripTimer . isActive ( )
>13460	CallExpression	tripTimer . isActive ( )
>13461	ArgumentList	 
>13462	Callee	tripTimer . isActive
>13463	MemberAccess	tripTimer . isActive
>13464	Identifier	isActive
>13465	Identifier	tripTimer
>13466	Argument	\"trip\"
>13467	PrimaryExpression	\"trip\"
>13468	Callee	SINGLE_FLOAT_ATTR
>13469	Identifier	SINGLE_FLOAT_ATTR
>13470	ExpressionStatement	 
>13471	CallExpression	SINGLE_FLOAT_ATTR ( \"regen\" , regenTimer . isActive ( ) , regenTimer . getValue ( ) )
>13472	ArgumentList	\"regen\"
>13473	Argument	regenTimer . getValue ( )
>13474	CallExpression	regenTimer . getValue ( )
>13475	ArgumentList	 
>13476	Callee	regenTimer . getValue
>13477	MemberAccess	regenTimer . getValue
>13478	Identifier	getValue
>13479	Identifier	regenTimer
>13480	Argument	regenTimer . isActive ( )
>13481	CallExpression	regenTimer . isActive ( )
>13482	ArgumentList	 
>13483	Callee	regenTimer . isActive
>13484	MemberAccess	regenTimer . isActive
>13485	Identifier	isActive
>13486	Identifier	regenTimer
>13487	Argument	\"regen\"
>13488	PrimaryExpression	\"regen\"
>13489	Callee	SINGLE_FLOAT_ATTR
>13490	Identifier	SINGLE_FLOAT_ATTR
>13491	ExpressionStatement	 
>13492	CallExpression	SINGLE_FLOAT_ATTR ( \"invincible\" , invincibleTimer . isActive ( ) , invincibleTimer . getValue ( ) )
>13493	ArgumentList	\"invincible\"
>13494	Argument	invincibleTimer . getValue ( )
>13495	CallExpression	invincibleTimer . getValue ( )
>13496	ArgumentList	 
>13497	Callee	invincibleTimer . getValue
>13498	MemberAccess	invincibleTimer . getValue
>13499	Identifier	getValue
>13500	Identifier	invincibleTimer
>13501	Argument	invincibleTimer . isActive ( )
>13502	CallExpression	invincibleTimer . isActive ( )
>13503	ArgumentList	 
>13504	Callee	invincibleTimer . isActive
>13505	MemberAccess	invincibleTimer . isActive
>13506	Identifier	isActive
>13507	Identifier	invincibleTimer
>13508	Argument	\"invincible\"
>13509	PrimaryExpression	\"invincible\"
>13510	Callee	SINGLE_FLOAT_ATTR
>13511	Identifier	SINGLE_FLOAT_ATTR
>13512	DoStatement	do
>13513	Condition	 
>13514	PrimaryExpression	0
>13515	CompoundStatement	 
>13516	IfStatement	if ( ( cond ) && ( val ) )
>13517	CompoundStatement	 
>13518	ExpressionStatement	 
>13519	CallExpression	startData -> SetAttribute ( name , osf . str ( ) . c_str ( ) )
>13520	ArgumentList	name
>13521	Argument	osf . str ( ) . c_str ( )
>13522	CallExpression	osf . str ( ) . c_str ( )
>13523	ArgumentList	 
>13524	Callee	osf . str ( ) . c_str
>13525	MemberAccess	osf . str ( ) . c_str
>13526	Identifier	c_str
>13527	CallExpression	osf . str ( )
>13528	ArgumentList	 
>13529	Callee	osf . str
>13530	MemberAccess	osf . str
>13531	Identifier	str
>13532	Identifier	osf
>13533	Argument	name
>13534	Identifier	name
>13535	Callee	startData -> SetAttribute
>13536	PtrMemberAccess	startData -> SetAttribute
>13537	Identifier	SetAttribute
>13538	Identifier	startData
>13539	ExpressionStatement	 
>13540	ShiftExpression	osf << ( val )
>13541	Identifier	val
>13542	Identifier	osf
>13543	IdentifierDeclStatement	 
>13544	IdentifierDecl	osf
>13545	Identifier	osf
>13546	IdentifierDeclType	std 
>13547	Condition	 
>13548	AndExpression	( cond ) && ( val )
>13549	Identifier	val
>13550	Identifier	cond
>13551	Statement	 
>13552	Statement	 
>13553	Statement	 
>13554	Statement	 
>13555	Statement	 
>13556	Statement	 
>13557	Statement	 
>13558	Statement	 
>13559	Statement	 
>13560	ExpressionStatement	 
>13561	CallExpression	startData -> SetAttribute ( \"intFlags\" , fos . str ( ) . c_str ( ) )
>13562	ArgumentList	\"intFlags\"
>13563	Argument	fos . str ( ) . c_str ( )
>13564	CallExpression	fos . str ( ) . c_str ( )
>13565	ArgumentList	 
>13566	Callee	fos . str ( ) . c_str
>13567	MemberAccess	fos . str ( ) . c_str
>13568	Identifier	c_str
>13569	CallExpression	fos . str ( )
>13570	ArgumentList	 
>13571	Callee	fos . str
>13572	MemberAccess	fos . str
>13573	Identifier	str
>13574	Identifier	fos
>13575	Argument	\"intFlags\"
>13576	PrimaryExpression	\"intFlags\"
>13577	Callee	startData -> SetAttribute
>13578	PtrMemberAccess	startData -> SetAttribute
>13579	Identifier	SetAttribute
>13580	Identifier	startData
>13581	ForStatement	for ( int i = 0 ; i < MAX_FLAGS ; i ++ )
>13582	CompoundStatement	 
>13583	ExpressionStatement	 
>13584	ShiftExpression	fos << intFlags [ i ] << \" \"
>13585	ShiftExpression	intFlags [ i ] << \" \"
>13586	PrimaryExpression	\" \"
>13587	ArrayIndexing	intFlags [ i ]
>13588	Identifier	i
>13589	Identifier	intFlags
>13590	Identifier	fos
>13591	IncDecOp	 
>13592	IncDec	++
>13593	Identifier	i
>13594	Condition	 
>13595	RelationalExpression	i < MAX_FLAGS
>13596	Identifier	MAX_FLAGS
>13597	Identifier	i
>13598	ForInit	 
>13599	IdentifierDeclStatement	int i = 0 ;
>13600	IdentifierDecl	i = 0
>13601	AssignmentExpr	i = 0
>13602	PrimaryExpression	0
>13603	Identifier	i
>13604	Identifier	i
>13605	IdentifierDeclType	int
>13606	ExpressionStatement	 
>13607	ShiftExpression	fos << MAX_FLAGS << \" \"
>13608	ShiftExpression	MAX_FLAGS << \" \"
>13609	PrimaryExpression	\" \"
>13610	Identifier	MAX_FLAGS
>13611	Identifier	fos
>13612	IdentifierDeclStatement	 
>13613	IdentifierDecl	fos
>13614	Identifier	fos
>13615	IdentifierDeclType	std 
>13616	ExpressionStatement	 
>13617	CallExpression	startData -> SetAttribute ( \"formUpgrades\" , os3 . str ( ) . c_str ( ) )
>13618	ArgumentList	\"formUpgrades\"
>13619	Argument	os3 . str ( ) . c_str ( )
>13620	CallExpression	os3 . str ( ) . c_str ( )
>13621	ArgumentList	 
>13622	Callee	os3 . str ( ) . c_str
>13623	MemberAccess	os3 . str ( ) . c_str
>13624	Identifier	c_str
>13625	CallExpression	os3 . str ( )
>13626	ArgumentList	 
>13627	Callee	os3 . str
>13628	MemberAccess	os3 . str
>13629	Identifier	str
>13630	Identifier	os3
>13631	Argument	\"formUpgrades\"
>13632	PrimaryExpression	\"formUpgrades\"
>13633	Callee	startData -> SetAttribute
>13634	PtrMemberAccess	startData -> SetAttribute
>13635	Identifier	SetAttribute
>13636	Identifier	startData
>13637	ForStatement	for ( int i = 0 ; i < FORMUPGRADE_MAX ; i ++ )
>13638	CompoundStatement	 
>13639	IfStatement	if ( hasFormUpgrade ( ( FormUpgradeType ) i ) )
>13640	CompoundStatement	 
>13641	ExpressionStatement	 
>13642	ShiftExpression	os3 << i << \" \"
>13643	ShiftExpression	i << \" \"
>13644	PrimaryExpression	\" \"
>13645	Identifier	i
>13646	Identifier	os3
>13647	Condition	 
>13648	CallExpression	hasFormUpgrade ( ( FormUpgradeType ) i )
>13649	ArgumentList	( FormUpgradeType ) i
>13650	Argument	( FormUpgradeType ) i
>13651	CastExpression	( FormUpgradeType ) i
>13652	Identifier	i
>13653	CastTarget	FormUpgradeType
>13654	Callee	hasFormUpgrade
>13655	Identifier	hasFormUpgrade
>13656	IncDecOp	 
>13657	IncDec	++
>13658	Identifier	i
>13659	Condition	 
>13660	RelationalExpression	i < FORMUPGRADE_MAX
>13661	Identifier	FORMUPGRADE_MAX
>13662	Identifier	i
>13663	ForInit	 
>13664	IdentifierDeclStatement	int i = 0 ;
>13665	IdentifierDecl	i = 0
>13666	AssignmentExpr	i = 0
>13667	PrimaryExpression	0
>13668	Identifier	i
>13669	Identifier	i
>13670	IdentifierDeclType	int
>13671	IdentifierDeclStatement	 
>13672	IdentifierDecl	os3
>13673	Identifier	os3
>13674	IdentifierDeclType	std 
>13675	ExpressionStatement	 
>13676	CallExpression	startData -> SetAttribute ( \"rec\" , recOs . str ( ) . c_str ( ) )
>13677	ArgumentList	\"rec\"
>13678	Argument	recOs . str ( ) . c_str ( )
>13679	CallExpression	recOs . str ( ) . c_str ( )
>13680	ArgumentList	 
>13681	Callee	recOs . str ( ) . c_str
>13682	MemberAccess	recOs . str ( ) . c_str
>13683	Identifier	c_str
>13684	CallExpression	recOs . str ( )
>13685	ArgumentList	 
>13686	Callee	recOs . str
>13687	MemberAccess	recOs . str
>13688	Identifier	str
>13689	Identifier	recOs
>13690	Argument	\"rec\"
>13691	PrimaryExpression	\"rec\"
>13692	Callee	startData -> SetAttribute
>13693	PtrMemberAccess	startData -> SetAttribute
>13694	Identifier	SetAttribute
>13695	Identifier	startData
>13696	ForStatement	for ( int i = 0 ; i < recipes . size ( ) ; i ++ )
>13697	CompoundStatement	 
>13698	ExpressionStatement	 
>13699	ShiftExpression	recOs << recipes [ i ] . isKnown ( ) << \" \"
>13700	ShiftExpression	recipes [ i ] . isKnown ( ) << \" \"
>13701	PrimaryExpression	\" \"
>13702	CallExpression	recipes [ i ] . isKnown ( )
>13703	ArgumentList	 
>13704	Callee	recipes [ i ] . isKnown
>13705	MemberAccess	recipes [ i ] . isKnown
>13706	Identifier	isKnown
>13707	ArrayIndexing	recipes [ i ]
>13708	Identifier	i
>13709	Identifier	recipes
>13710	Identifier	recOs
>13711	IncDecOp	 
>13712	IncDec	++
>13713	Identifier	i
>13714	Condition	 
>13715	RelationalExpression	i < recipes . size ( )
>13716	CallExpression	recipes . size ( )
>13717	ArgumentList	 
>13718	Callee	recipes . size
>13719	MemberAccess	recipes . size
>13720	Identifier	size
>13721	Identifier	recipes
>13722	Identifier	i
>13723	ForInit	 
>13724	IdentifierDeclStatement	int i = 0 ;
>13725	IdentifierDecl	i = 0
>13726	AssignmentExpr	i = 0
>13727	PrimaryExpression	0
>13728	Identifier	i
>13729	Identifier	i
>13730	IdentifierDeclType	int
>13731	IdentifierDeclStatement	 
>13732	IdentifierDecl	recOs
>13733	Identifier	recOs
>13734	IdentifierDeclType	std 
>13735	ExpressionStatement	 
>13736	CallExpression	startData -> SetAttribute ( \"ingr\" , ingrOs . str ( ) . c_str ( ) )
>13737	ArgumentList	\"ingr\"
>13738	Argument	ingrOs . str ( ) . c_str ( )
>13739	CallExpression	ingrOs . str ( ) . c_str ( )
>13740	ArgumentList	 
>13741	Callee	ingrOs . str ( ) . c_str
>13742	MemberAccess	ingrOs . str ( ) . c_str
>13743	Identifier	c_str
>13744	CallExpression	ingrOs . str ( )
>13745	ArgumentList	 
>13746	Callee	ingrOs . str
>13747	MemberAccess	ingrOs . str
>13748	Identifier	str
>13749	Identifier	ingrOs
>13750	Argument	\"ingr\"
>13751	PrimaryExpression	\"ingr\"
>13752	Callee	startData -> SetAttribute
>13753	PtrMemberAccess	startData -> SetAttribute
>13754	Identifier	SetAttribute
>13755	Identifier	startData
>13756	ForStatement	for ( int i = 0 ; i < ingredients . size ( ) ; i ++ )
>13757	CompoundStatement	 
>13758	ExpressionStatement	 
>13759	ShiftExpression	ingrOs << data -> getIndex ( ) << \" \" << data -> amount << \" \"
>13760	ShiftExpression	data -> getIndex ( ) << \" \" << data -> amount << \" \"
>13761	ShiftExpression	\" \" << data -> amount << \" \"
>13762	ShiftExpression	data -> amount << \" \"
>13763	PrimaryExpression	\" \"
>13764	PtrMemberAccess	data -> amount
>13765	Identifier	amount
>13766	Identifier	data
>13767	PrimaryExpression	\" \"
>13768	CallExpression	data -> getIndex ( )
>13769	ArgumentList	 
>13770	Callee	data -> getIndex
>13771	PtrMemberAccess	data -> getIndex
>13772	Identifier	getIndex
>13773	Identifier	data
>13774	Identifier	ingrOs
>13775	IdentifierDeclStatement	 
>13776	IdentifierDecl	* data = ingredients [ i ]
>13777	AssignmentExpr	* data = ingredients [ i ]
>13778	ArrayIndexing	ingredients [ i ]
>13779	Identifier	i
>13780	Identifier	ingredients
>13781	Identifier	data
>13782	Identifier	data
>13783	IdentifierDeclType	IngredientData *
>13784	IncDecOp	 
>13785	IncDec	++
>13786	Identifier	i
>13787	Condition	 
>13788	RelationalExpression	i < ingredients . size ( )
>13789	CallExpression	ingredients . size ( )
>13790	ArgumentList	 
>13791	Callee	ingredients . size
>13792	MemberAccess	ingredients . size
>13793	Identifier	size
>13794	Identifier	ingredients
>13795	Identifier	i
>13796	ForInit	 
>13797	IdentifierDeclStatement	int i = 0 ;
>13798	IdentifierDecl	i = 0
>13799	AssignmentExpr	i = 0
>13800	PrimaryExpression	0
>13801	Identifier	i
>13802	Identifier	i
>13803	IdentifierDeclType	int
>13804	IdentifierDeclStatement	 
>13805	IdentifierDecl	ingrOs
>13806	Identifier	ingrOs
>13807	IdentifierDeclType	std 
>13808	ExpressionStatement	 
>13809	CallExpression	startData -> SetAttribute ( \"ingrNames\" , ingrNames . str ( ) . c_str ( ) )
>13810	ArgumentList	\"ingrNames\"
>13811	Argument	ingrNames . str ( ) . c_str ( )
>13812	CallExpression	ingrNames . str ( ) . c_str ( )
>13813	ArgumentList	 
>13814	Callee	ingrNames . str ( ) . c_str
>13815	MemberAccess	ingrNames . str ( ) . c_str
>13816	Identifier	c_str
>13817	CallExpression	ingrNames . str ( )
>13818	ArgumentList	 
>13819	Callee	ingrNames . str
>13820	MemberAccess	ingrNames . str
>13821	Identifier	str
>13822	Identifier	ingrNames
>13823	Argument	\"ingrNames\"
>13824	PrimaryExpression	\"ingrNames\"
>13825	Callee	startData -> SetAttribute
>13826	PtrMemberAccess	startData -> SetAttribute
>13827	Identifier	SetAttribute
>13828	Identifier	startData
>13829	ForStatement	for ( int i = 0 ; i < ingredients . size ( ) ; i ++ )
>13830	CompoundStatement	 
>13831	ExpressionStatement	 
>13832	ShiftExpression	ingrNames << data -> name << \" \" << data -> amount << \" \"
>13833	ShiftExpression	data -> name << \" \" << data -> amount << \" \"
>13834	ShiftExpression	\" \" << data -> amount << \" \"
>13835	ShiftExpression	data -> amount << \" \"
>13836	PrimaryExpression	\" \"
>13837	PtrMemberAccess	data -> amount
>13838	Identifier	amount
>13839	Identifier	data
>13840	PrimaryExpression	\" \"
>13841	PtrMemberAccess	data -> name
>13842	Identifier	name
>13843	Identifier	data
>13844	Identifier	ingrNames
>13845	IdentifierDeclStatement	 
>13846	IdentifierDecl	* data = ingredients [ i ]
>13847	AssignmentExpr	* data = ingredients [ i ]
>13848	ArrayIndexing	ingredients [ i ]
>13849	Identifier	i
>13850	Identifier	ingredients
>13851	Identifier	data
>13852	Identifier	data
>13853	IdentifierDeclType	IngredientData *
>13854	IncDecOp	 
>13855	IncDec	++
>13856	Identifier	i
>13857	Condition	 
>13858	RelationalExpression	i < ingredients . size ( )
>13859	CallExpression	ingredients . size ( )
>13860	ArgumentList	 
>13861	Callee	ingredients . size
>13862	MemberAccess	ingredients . size
>13863	Identifier	size
>13864	Identifier	ingredients
>13865	Identifier	i
>13866	ForInit	 
>13867	IdentifierDeclStatement	int i = 0 ;
>13868	IdentifierDecl	i = 0
>13869	AssignmentExpr	i = 0
>13870	PrimaryExpression	0
>13871	Identifier	i
>13872	Identifier	i
>13873	IdentifierDeclType	int
>13874	IdentifierDeclStatement	 
>13875	IdentifierDecl	ingrNames
>13876	Identifier	ingrNames
>13877	IdentifierDeclType	std 
>13878	ExpressionStatement	 
>13879	CallExpression	startData -> SetAttribute ( \"songs\" , os2 . str ( ) . c_str ( ) )
>13880	ArgumentList	\"songs\"
>13881	Argument	os2 . str ( ) . c_str ( )
>13882	CallExpression	os2 . str ( ) . c_str ( )
>13883	ArgumentList	 
>13884	Callee	os2 . str ( ) . c_str
>13885	MemberAccess	os2 . str ( ) . c_str
>13886	Identifier	c_str
>13887	CallExpression	os2 . str ( )
>13888	ArgumentList	 
>13889	Callee	os2 . str
>13890	MemberAccess	os2 . str
>13891	Identifier	str
>13892	Identifier	os2
>13893	Argument	\"songs\"
>13894	PrimaryExpression	\"songs\"
>13895	Callee	startData -> SetAttribute
>13896	PtrMemberAccess	startData -> SetAttribute
>13897	Identifier	SetAttribute
>13898	Identifier	startData
>13899	ForStatement	for ( int i = 0 ; i < SONG_MAX ; i ++ )
>13900	CompoundStatement	 
>13901	IfStatement	if ( knowsSong [ i ] )
>13902	CompoundStatement	 
>13903	ExpressionStatement	 
>13904	ShiftExpression	os2 << i << \" \"
>13905	ShiftExpression	i << \" \"
>13906	PrimaryExpression	\" \"
>13907	Identifier	i
>13908	Identifier	os2
>13909	Condition	 
>13910	ArrayIndexing	knowsSong [ i ]
>13911	Identifier	i
>13912	Identifier	knowsSong
>13913	IncDecOp	 
>13914	IncDec	++
>13915	Identifier	i
>13916	Condition	 
>13917	RelationalExpression	i < SONG_MAX
>13918	Identifier	SONG_MAX
>13919	Identifier	i
>13920	ForInit	 
>13921	IdentifierDeclStatement	int i = 0 ;
>13922	IdentifierDecl	i = 0
>13923	AssignmentExpr	i = 0
>13924	PrimaryExpression	0
>13925	Identifier	i
>13926	Identifier	i
>13927	IdentifierDeclType	int
>13928	IdentifierDeclStatement	 
>13929	IdentifierDecl	os2
>13930	Identifier	os2
>13931	IdentifierDeclType	std 
>13932	ExpressionStatement	 
>13933	CallExpression	startData -> SetAttribute ( \"seconds\" , secondsOS . str ( ) . c_str ( ) )
>13934	ArgumentList	\"seconds\"
>13935	Argument	secondsOS . str ( ) . c_str ( )
>13936	CallExpression	secondsOS . str ( ) . c_str ( )
>13937	ArgumentList	 
>13938	Callee	secondsOS . str ( ) . c_str
>13939	MemberAccess	secondsOS . str ( ) . c_str
>13940	Identifier	c_str
>13941	CallExpression	secondsOS . str ( )
>13942	ArgumentList	 
>13943	Callee	secondsOS . str
>13944	MemberAccess	secondsOS . str
>13945	Identifier	str
>13946	Identifier	secondsOS
>13947	Argument	\"seconds\"
>13948	PrimaryExpression	\"seconds\"
>13949	Callee	startData -> SetAttribute
>13950	PtrMemberAccess	startData -> SetAttribute
>13951	Identifier	SetAttribute
>13952	Identifier	startData
>13953	ExpressionStatement	 
>13954	ShiftExpression	secondsOS << dsq -> continuity . seconds
>13955	MemberAccess	dsq -> continuity . seconds
>13956	Identifier	seconds
>13957	PtrMemberAccess	dsq -> continuity
>13958	Identifier	continuity
>13959	Identifier	dsq
>13960	Identifier	secondsOS
>13961	IdentifierDeclStatement	 
>13962	IdentifierDecl	secondsOS
>13963	Identifier	secondsOS
>13964	IdentifierDeclType	std 
>13965	IfStatement	if ( dsq -> mod . isActive ( ) )
>13966	ExpressionStatement	 
>13967	CallExpression	startData -> SetAttribute ( \"mod\" , dsq -> mod . getName ( ) . c_str ( ) )
>13968	ArgumentList	\"mod\"
>13969	Argument	dsq -> mod . getName ( ) . c_str ( )
>13970	CallExpression	dsq -> mod . getName ( ) . c_str ( )
>13971	ArgumentList	 
>13972	Callee	dsq -> mod . getName ( ) . c_str
>13973	MemberAccess	dsq -> mod . getName ( ) . c_str
>13974	Identifier	c_str
>13975	CallExpression	dsq -> mod . getName ( )
>13976	ArgumentList	 
>13977	Callee	dsq -> mod . getName
>13978	MemberAccess	dsq -> mod . getName
>13979	Identifier	getName
>13980	PtrMemberAccess	dsq -> mod
>13981	Identifier	mod
>13982	Identifier	dsq
>13983	Argument	\"mod\"
>13984	PrimaryExpression	\"mod\"
>13985	Callee	startData -> SetAttribute
>13986	PtrMemberAccess	startData -> SetAttribute
>13987	Identifier	SetAttribute
>13988	Identifier	startData
>13989	Condition	 
>13990	CallExpression	dsq -> mod . isActive ( )
>13991	ArgumentList	 
>13992	Callee	dsq -> mod . isActive
>13993	MemberAccess	dsq -> mod . isActive
>13994	Identifier	isActive
>13995	PtrMemberAccess	dsq -> mod
>13996	Identifier	mod
>13997	Identifier	dsq
>13998	ExpressionStatement	 
>13999	CallExpression	startData -> SetAttribute ( \"form\" , dsq -> continuity . form )
>14000	ArgumentList	\"form\"
>14001	Argument	dsq -> continuity . form
>14002	MemberAccess	dsq -> continuity . form
>14003	Identifier	form
>14004	PtrMemberAccess	dsq -> continuity
>14005	Identifier	continuity
>14006	Identifier	dsq
>14007	Argument	\"form\"
>14008	PrimaryExpression	\"form\"
>14009	Callee	startData -> SetAttribute
>14010	PtrMemberAccess	startData -> SetAttribute
>14011	Identifier	SetAttribute
>14012	Identifier	startData
>14013	ExpressionStatement	 
>14014	CallExpression	startData -> SetAttribute ( \"costume\" , dsq -> continuity . costume . c_str ( ) )
>14015	ArgumentList	\"costume\"
>14016	Argument	dsq -> continuity . costume . c_str ( )
>14017	CallExpression	dsq -> continuity . costume . c_str ( )
>14018	ArgumentList	 
>14019	Callee	dsq -> continuity . costume . c_str
>14020	MemberAccess	dsq -> continuity . costume . c_str
>14021	Identifier	c_str
>14022	MemberAccess	dsq -> continuity . costume
>14023	Identifier	costume
>14024	PtrMemberAccess	dsq -> continuity
>14025	Identifier	continuity
>14026	Identifier	dsq
>14027	Argument	\"costume\"
>14028	PrimaryExpression	\"costume\"
>14029	Callee	startData -> SetAttribute
>14030	PtrMemberAccess	startData -> SetAttribute
>14031	Identifier	SetAttribute
>14032	Identifier	startData
>14033	ExpressionStatement	 
>14034	CallExpression	startData -> SetAttribute ( \"naijaModel\" , dsq -> continuity . naijaModel . c_str ( ) )
>14035	ArgumentList	\"naijaModel\"
>14036	Argument	dsq -> continuity . naijaModel . c_str ( )
>14037	CallExpression	dsq -> continuity . naijaModel . c_str ( )
>14038	ArgumentList	 
>14039	Callee	dsq -> continuity . naijaModel . c_str
>14040	MemberAccess	dsq -> continuity . naijaModel . c_str
>14041	Identifier	c_str
>14042	MemberAccess	dsq -> continuity . naijaModel
>14043	Identifier	naijaModel
>14044	PtrMemberAccess	dsq -> continuity
>14045	Identifier	continuity
>14046	Identifier	dsq
>14047	Argument	\"naijaModel\"
>14048	PrimaryExpression	\"naijaModel\"
>14049	Callee	startData -> SetAttribute
>14050	PtrMemberAccess	startData -> SetAttribute
>14051	Identifier	SetAttribute
>14052	Identifier	startData
>14053	ExpressionStatement	 
>14054	CallExpression	startData -> SetAttribute ( \"ch\" , dsq -> continuity . health )
>14055	ArgumentList	\"ch\"
>14056	Argument	dsq -> continuity . health
>14057	MemberAccess	dsq -> continuity . health
>14058	Identifier	health
>14059	PtrMemberAccess	dsq -> continuity
>14060	Identifier	continuity
>14061	Identifier	dsq
>14062	Argument	\"ch\"
>14063	PrimaryExpression	\"ch\"
>14064	Callee	startData -> SetAttribute
>14065	PtrMemberAccess	startData -> SetAttribute
>14066	Identifier	SetAttribute
>14067	Identifier	startData
>14068	ExpressionStatement	 
>14069	CallExpression	startData -> SetAttribute ( \"h\" , dsq -> continuity . maxHealth )
>14070	ArgumentList	\"h\"
>14071	Argument	dsq -> continuity . maxHealth
>14072	MemberAccess	dsq -> continuity . maxHealth
>14073	Identifier	maxHealth
>14074	PtrMemberAccess	dsq -> continuity
>14075	Identifier	continuity
>14076	Identifier	dsq
>14077	Argument	\"h\"
>14078	PrimaryExpression	\"h\"
>14079	Callee	startData -> SetAttribute
>14080	PtrMemberAccess	startData -> SetAttribute
>14081	Identifier	SetAttribute
>14082	Identifier	startData
>14083	ExpressionStatement	 
>14084	CallExpression	startData -> SetAttribute ( \"exp\" , dsq -> continuity . exp )
>14085	ArgumentList	\"exp\"
>14086	Argument	dsq -> continuity . exp
>14087	MemberAccess	dsq -> continuity . exp
>14088	Identifier	exp
>14089	PtrMemberAccess	dsq -> continuity
>14090	Identifier	continuity
>14091	Identifier	dsq
>14092	Argument	\"exp\"
>14093	PrimaryExpression	\"exp\"
>14094	Callee	startData -> SetAttribute
>14095	PtrMemberAccess	startData -> SetAttribute
>14096	Identifier	SetAttribute
>14097	Identifier	startData
>14098	ExpressionStatement	 
>14099	CallExpression	startData -> SetAttribute ( \"scene\" , dsq -> game -> sceneName . c_str ( ) )
>14100	ArgumentList	\"scene\"
>14101	Argument	dsq -> game -> sceneName . c_str ( )
>14102	CallExpression	dsq -> game -> sceneName . c_str ( )
>14103	ArgumentList	 
>14104	Callee	dsq -> game -> sceneName . c_str
>14105	MemberAccess	dsq -> game -> sceneName . c_str
>14106	Identifier	c_str
>14107	PtrMemberAccess	dsq -> game -> sceneName
>14108	Identifier	sceneName
>14109	PtrMemberAccess	dsq -> game
>14110	Identifier	game
>14111	Identifier	dsq
>14112	Argument	\"scene\"
>14113	PrimaryExpression	\"scene\"
>14114	Callee	startData -> SetAttribute
>14115	PtrMemberAccess	startData -> SetAttribute
>14116	Identifier	SetAttribute
>14117	Identifier	startData
>14118	ExpressionStatement	 
>14119	CallExpression	startData -> SetAttribute ( \"y\" , int ( position . y ) )
>14120	ArgumentList	\"y\"
>14121	Argument	int ( position . y )
>14122	CallExpression	int ( position . y )
>14123	ArgumentList	position . y
>14124	Argument	position . y
>14125	MemberAccess	position . y
>14126	Identifier	y
>14127	Identifier	position
>14128	Callee	int
>14129	Identifier	int
>14130	Argument	\"y\"
>14131	PrimaryExpression	\"y\"
>14132	Callee	startData -> SetAttribute
>14133	PtrMemberAccess	startData -> SetAttribute
>14134	Identifier	SetAttribute
>14135	Identifier	startData
>14136	ExpressionStatement	 
>14137	CallExpression	startData -> SetAttribute ( \"x\" , int ( position . x ) )
>14138	ArgumentList	\"x\"
>14139	Argument	int ( position . x )
>14140	CallExpression	int ( position . x )
>14141	ArgumentList	position . x
>14142	Argument	position . x
>14143	MemberAccess	position . x
>14144	Identifier	x
>14145	Identifier	position
>14146	Callee	int
>14147	Identifier	int
>14148	Argument	\"x\"
>14149	PrimaryExpression	\"x\"
>14150	Callee	startData -> SetAttribute
>14151	PtrMemberAccess	startData -> SetAttribute
>14152	Identifier	SetAttribute
>14153	Identifier	startData
>14154	IdentifierDeclStatement	 
>14155	IdentifierDecl	* startData = doc . NewElement ( \"StartData\" )
>14156	AssignmentExpr	* startData = doc . NewElement ( \"StartData\" )
>14157	CallExpression	doc . NewElement ( \"StartData\" )
>14158	ArgumentList	\"StartData\"
>14159	Argument	\"StartData\"
>14160	PrimaryExpression	\"StartData\"
>14161	Callee	doc . NewElement
>14162	MemberAccess	doc . NewElement
>14163	Identifier	NewElement
>14164	Identifier	doc
>14165	Identifier	startData
>14166	Identifier	startData
>14167	IdentifierDeclType	XMLElement *
>14168	ForStatement	for ( StringFlags 
>14169	CompoundStatement	 
>14170	ExpressionStatement	 
>14171	CallExpression	doc . InsertEndChild ( stringFlag )
>14172	ArgumentList	stringFlag
>14173	Argument	stringFlag
>14174	Identifier	stringFlag
>14175	Callee	doc . InsertEndChild
>14176	MemberAccess	doc . InsertEndChild
>14177	Identifier	InsertEndChild
>14178	Identifier	doc
>14179	ExpressionStatement	 
>14180	CallExpression	stringFlag -> SetAttribute ( \"value\" , ( * i ) . second . c_str ( ) )
>14181	ArgumentList	\"value\"
>14182	Argument	( * i ) . second . c_str ( )
>14183	CallExpression	( * i ) . second . c_str ( )
>14184	ArgumentList	 
>14185	Callee	( * i ) . second . c_str
>14186	MemberAccess	( * i ) . second . c_str
>14187	Identifier	c_str
>14188	MemberAccess	( * i ) . second
>14189	Identifier	second
>14190	UnaryOp	* i
>14191	Identifier	i
>14192	UnaryOperator	*
>14193	Argument	\"value\"
>14194	PrimaryExpression	\"value\"
>14195	Callee	stringFlag -> SetAttribute
>14196	PtrMemberAccess	stringFlag -> SetAttribute
>14197	Identifier	SetAttribute
>14198	Identifier	stringFlag
>14199	ExpressionStatement	 
>14200	CallExpression	stringFlag -> SetAttribute ( \"name\" , ( * i ) . first . c_str ( ) )
>14201	ArgumentList	\"name\"
>14202	Argument	( * i ) . first . c_str ( )
>14203	CallExpression	( * i ) . first . c_str ( )
>14204	ArgumentList	 
>14205	Callee	( * i ) . first . c_str
>14206	MemberAccess	( * i ) . first . c_str
>14207	Identifier	c_str
>14208	MemberAccess	( * i ) . first
>14209	Identifier	first
>14210	UnaryOp	* i
>14211	Identifier	i
>14212	UnaryOperator	*
>14213	Argument	\"name\"
>14214	PrimaryExpression	\"name\"
>14215	Callee	stringFlag -> SetAttribute
>14216	PtrMemberAccess	stringFlag -> SetAttribute
>14217	Identifier	SetAttribute
>14218	Identifier	stringFlag
>14219	IdentifierDeclStatement	 
>14220	IdentifierDecl	* stringFlag = doc . NewElement ( \"StringFlag\" )
>14221	AssignmentExpr	* stringFlag = doc . NewElement ( \"StringFlag\" )
>14222	CallExpression	doc . NewElement ( \"StringFlag\" )
>14223	ArgumentList	\"StringFlag\"
>14224	Argument	\"StringFlag\"
>14225	PrimaryExpression	\"StringFlag\"
>14226	Callee	doc . NewElement
>14227	MemberAccess	doc . NewElement
>14228	Identifier	NewElement
>14229	Identifier	doc
>14230	Identifier	stringFlag
>14231	Identifier	stringFlag
>14232	IdentifierDeclType	XMLElement *
>14233	IfStatement	if ( ( * i ) . first . find ( \"TEMP_\" ) != std 
>14234	ContinueStatement	 
>14235	Condition	 
>14236	EqualityExpression	( * i ) . first . find ( \"TEMP_\" ) != std 
>14237	Identifier	std 
>14238	CallExpression	( * i ) . first . find ( \"TEMP_\" )
>14239	ArgumentList	\"TEMP_\"
>14240	Argument	\"TEMP_\"
>14241	PrimaryExpression	\"TEMP_\"
>14242	Callee	( * i ) . first . find
>14243	MemberAccess	( * i ) . first . find
>14244	Identifier	find
>14245	MemberAccess	( * i ) . first
>14246	Identifier	first
>14247	UnaryOp	* i
>14248	Identifier	i
>14249	UnaryOperator	*
>14250	IncDecOp	 
>14251	IncDec	++
>14252	Identifier	i
>14253	Condition	 
>14254	EqualityExpression	i != stringFlags . end ( )
>14255	CallExpression	stringFlags . end ( )
>14256	ArgumentList	 
>14257	Callee	stringFlags . end
>14258	MemberAccess	stringFlags . end
>14259	Identifier	end
>14260	Identifier	stringFlags
>14261	Identifier	i
>14262	ForInit	 
>14263	IdentifierDeclStatement	StringFlags 
>14264	IdentifierDecl	i = stringFlags . begin ( )
>14265	AssignmentExpr	i = stringFlags . begin ( )
>14266	CallExpression	stringFlags . begin ( )
>14267	ArgumentList	 
>14268	Callee	stringFlags . begin
>14269	MemberAccess	stringFlags . begin
>14270	Identifier	begin
>14271	Identifier	stringFlags
>14272	Identifier	i
>14273	Identifier	i
>14274	IdentifierDeclType	StringFlags 
>14275	CompoundStatement	 
>14276	ExpressionStatement	 
>14277	CallExpression	doc . InsertEndChild ( s )
>14278	ArgumentList	s
>14279	Argument	s
>14280	Identifier	s
>14281	Callee	doc . InsertEndChild
>14282	MemberAccess	doc . InsertEndChild
>14283	Identifier	InsertEndChild
>14284	Identifier	doc
>14285	ExpressionStatement	 
>14286	CallExpression	s -> SetAttribute ( \"v\" , os . str ( ) . c_str ( ) )
>14287	ArgumentList	\"v\"
>14288	Argument	os . str ( ) . c_str ( )
>14289	CallExpression	os . str ( ) . c_str ( )
>14290	ArgumentList	 
>14291	Callee	os . str ( ) . c_str
>14292	MemberAccess	os . str ( ) . c_str
>14293	Identifier	c_str
>14294	CallExpression	os . str ( )
>14295	ArgumentList	 
>14296	Callee	os . str
>14297	MemberAccess	os . str
>14298	Identifier	str
>14299	Identifier	os
>14300	Argument	\"v\"
>14301	PrimaryExpression	\"v\"
>14302	Callee	s -> SetAttribute
>14303	PtrMemberAccess	s -> SetAttribute
>14304	Identifier	SetAttribute
>14305	Identifier	s
>14306	ExpressionStatement	 
>14307	ShiftExpression	os << story
>14308	Identifier	story
>14309	Identifier	os
>14310	IdentifierDeclStatement	 
>14311	IdentifierDecl	os
>14312	Identifier	os
>14313	IdentifierDeclType	std 
>14314	IdentifierDeclStatement	 
>14315	IdentifierDecl	* s = doc . NewElement ( \"Story\" )
>14316	AssignmentExpr	* s = doc . NewElement ( \"Story\" )
>14317	CallExpression	doc . NewElement ( \"Story\" )
>14318	ArgumentList	\"Story\"
>14319	Argument	\"Story\"
>14320	PrimaryExpression	\"Story\"
>14321	Callee	doc . NewElement
>14322	MemberAccess	doc . NewElement
>14323	Identifier	NewElement
>14324	Identifier	doc
>14325	Identifier	s
>14326	Identifier	s
>14327	IdentifierDeclType	XMLElement *
>14328	ExpressionStatement	 
>14329	CallExpression	doc . InsertEndChild ( bcn )
>14330	ArgumentList	bcn
>14331	Argument	bcn
>14332	Identifier	bcn
>14333	Callee	doc . InsertEndChild
>14334	MemberAccess	doc . InsertEndChild
>14335	Identifier	InsertEndChild
>14336	Identifier	doc
>14337	CompoundStatement	 
>14338	ExpressionStatement	 
>14339	CallExpression	bcn -> SetAttribute ( \"a\" , os . str ( ) . c_str ( ) )
>14340	ArgumentList	\"a\"
>14341	Argument	os . str ( ) . c_str ( )
>14342	CallExpression	os . str ( ) . c_str ( )
>14343	ArgumentList	 
>14344	Callee	os . str ( ) . c_str
>14345	MemberAccess	os . str ( ) . c_str
>14346	Identifier	c_str
>14347	CallExpression	os . str ( )
>14348	ArgumentList	 
>14349	Callee	os . str
>14350	MemberAccess	os . str
>14351	Identifier	str
>14352	Identifier	os
>14353	Argument	\"a\"
>14354	PrimaryExpression	\"a\"
>14355	Callee	bcn -> SetAttribute
>14356	PtrMemberAccess	bcn -> SetAttribute
>14357	Identifier	SetAttribute
>14358	Identifier	bcn
>14359	ForStatement	for ( Beacons 
>14360	CompoundStatement	 
>14361	ExpressionStatement	 
>14362	ShiftExpression	os << data -> pos . x << \" \" << data -> pos . y << \" \" << data -> pos . z << \" \"
>14363	ShiftExpression	data -> pos . x << \" \" << data -> pos . y << \" \" << data -> pos . z << \" \"
>14364	ShiftExpression	\" \" << data -> pos . y << \" \" << data -> pos . z << \" \"
>14365	ShiftExpression	data -> pos . y << \" \" << data -> pos . z << \" \"
>14366	ShiftExpression	\" \" << data -> pos . z << \" \"
>14367	ShiftExpression	data -> pos . z << \" \"
>14368	PrimaryExpression	\" \"
>14369	MemberAccess	data -> pos . z
>14370	Identifier	z
>14371	PtrMemberAccess	data -> pos
>14372	Identifier	pos
>14373	Identifier	data
>14374	PrimaryExpression	\" \"
>14375	MemberAccess	data -> pos . y
>14376	Identifier	y
>14377	PtrMemberAccess	data -> pos
>14378	Identifier	pos
>14379	Identifier	data
>14380	PrimaryExpression	\" \"
>14381	MemberAccess	data -> pos . x
>14382	Identifier	x
>14383	PtrMemberAccess	data -> pos
>14384	Identifier	pos
>14385	Identifier	data
>14386	Identifier	os
>14387	ExpressionStatement	 
>14388	ShiftExpression	os << data -> color . x << \" \" << data -> color . y << \" \" << data -> color . z << \" \"
>14389	ShiftExpression	data -> color . x << \" \" << data -> color . y << \" \" << data -> color . z << \" \"
>14390	ShiftExpression	\" \" << data -> color . y << \" \" << data -> color . z << \" \"
>14391	ShiftExpression	data -> color . y << \" \" << data -> color . z << \" \"
>14392	ShiftExpression	\" \" << data -> color . z << \" \"
>14393	ShiftExpression	data -> color . z << \" \"
>14394	PrimaryExpression	\" \"
>14395	MemberAccess	data -> color . z
>14396	Identifier	z
>14397	PtrMemberAccess	data -> color
>14398	Identifier	color
>14399	Identifier	data
>14400	PrimaryExpression	\" \"
>14401	MemberAccess	data -> color . y
>14402	Identifier	y
>14403	PtrMemberAccess	data -> color
>14404	Identifier	color
>14405	Identifier	data
>14406	PrimaryExpression	\" \"
>14407	MemberAccess	data -> color . x
>14408	Identifier	x
>14409	PtrMemberAccess	data -> color
>14410	Identifier	color
>14411	Identifier	data
>14412	Identifier	os
>14413	ExpressionStatement	 
>14414	ShiftExpression	os << data -> index << \" \" << data -> on << \" \"
>14415	ShiftExpression	data -> index << \" \" << data -> on << \" \"
>14416	ShiftExpression	\" \" << data -> on << \" \"
>14417	ShiftExpression	data -> on << \" \"
>14418	PrimaryExpression	\" \"
>14419	PtrMemberAccess	data -> on
>14420	Identifier	on
>14421	Identifier	data
>14422	PrimaryExpression	\" \"
>14423	PtrMemberAccess	data -> index
>14424	Identifier	index
>14425	Identifier	data
>14426	Identifier	os
>14427	IdentifierDeclStatement	 
>14428	IdentifierDecl	* data = & ( * i )
>14429	AssignmentExpr	* data = & ( * i )
>14430	UnaryOp	& ( * i )
>14431	UnaryOp	* i
>14432	Identifier	i
>14433	UnaryOperator	*
>14434	UnaryOperator	&
>14435	Identifier	data
>14436	Identifier	data
>14437	IdentifierDeclType	BeaconData *
>14438	IncDecOp	 
>14439	IncDec	++
>14440	Identifier	i
>14441	Condition	 
>14442	EqualityExpression	i != beacons . end ( )
>14443	CallExpression	beacons . end ( )
>14444	ArgumentList	 
>14445	Callee	beacons . end
>14446	MemberAccess	beacons . end
>14447	Identifier	end
>14448	Identifier	beacons
>14449	Identifier	i
>14450	ForInit	 
>14451	IdentifierDeclStatement	Beacons 
>14452	IdentifierDecl	i = beacons . begin ( )
>14453	AssignmentExpr	i = beacons . begin ( )
>14454	CallExpression	beacons . begin ( )
>14455	ArgumentList	 
>14456	Callee	beacons . begin
>14457	MemberAccess	beacons . begin
>14458	Identifier	begin
>14459	Identifier	beacons
>14460	Identifier	i
>14461	Identifier	i
>14462	IdentifierDeclType	Beacons 
>14463	IdentifierDeclStatement	 
>14464	IdentifierDecl	os
>14465	Identifier	os
>14466	IdentifierDeclType	std 
>14467	IdentifierDeclStatement	 
>14468	IdentifierDecl	* bcn = doc . NewElement ( \"bcn\" )
>14469	AssignmentExpr	* bcn = doc . NewElement ( \"bcn\" )
>14470	CallExpression	doc . NewElement ( \"bcn\" )
>14471	ArgumentList	\"bcn\"
>14472	Argument	\"bcn\"
>14473	PrimaryExpression	\"bcn\"
>14474	Callee	doc . NewElement
>14475	MemberAccess	doc . NewElement
>14476	Identifier	NewElement
>14477	Identifier	doc
>14478	Identifier	bcn
>14479	Identifier	bcn
>14480	IdentifierDeclType	XMLElement *
>14481	ExpressionStatement	 
>14482	CallExpression	doc . InsertEndChild ( eats )
>14483	ArgumentList	eats
>14484	Argument	eats
>14485	Identifier	eats
>14486	Callee	doc . InsertEndChild
>14487	MemberAccess	doc . InsertEndChild
>14488	Identifier	InsertEndChild
>14489	Identifier	doc
>14490	CompoundStatement	 
>14491	ExpressionStatement	 
>14492	CallExpression	eats -> SetAttribute ( \"a\" , os . str ( ) . c_str ( ) )
>14493	ArgumentList	\"a\"
>14494	Argument	os . str ( ) . c_str ( )
>14495	CallExpression	os . str ( ) . c_str ( )
>14496	ArgumentList	 
>14497	Callee	os . str ( ) . c_str
>14498	MemberAccess	os . str ( ) . c_str
>14499	Identifier	c_str
>14500	CallExpression	os . str ( )
>14501	ArgumentList	 
>14502	Callee	os . str
>14503	MemberAccess	os . str
>14504	Identifier	str
>14505	Identifier	os
>14506	Argument	\"a\"
>14507	PrimaryExpression	\"a\"
>14508	Callee	eats -> SetAttribute
>14509	PtrMemberAccess	eats -> SetAttribute
>14510	Identifier	SetAttribute
>14511	Identifier	eats
>14512	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>14513	CompoundStatement	 
>14514	ExpressionStatement	 
>14515	ShiftExpression	os << eat -> name << \" \" << eat -> shot << \" \" << eat -> ammo << \" \" << eat -> ammoUnitSize << \" \"
>14516	ShiftExpression	eat -> name << \" \" << eat -> shot << \" \" << eat -> ammo << \" \" << eat -> ammoUnitSize << \" \"
>14517	ShiftExpression	\" \" << eat -> shot << \" \" << eat -> ammo << \" \" << eat -> ammoUnitSize << \" \"
>14518	ShiftExpression	eat -> shot << \" \" << eat -> ammo << \" \" << eat -> ammoUnitSize << \" \"
>14519	ShiftExpression	\" \" << eat -> ammo << \" \" << eat -> ammoUnitSize << \" \"
>14520	ShiftExpression	eat -> ammo << \" \" << eat -> ammoUnitSize << \" \"
>14521	ShiftExpression	\" \" << eat -> ammoUnitSize << \" \"
>14522	ShiftExpression	eat -> ammoUnitSize << \" \"
>14523	PrimaryExpression	\" \"
>14524	PtrMemberAccess	eat -> ammoUnitSize
>14525	Identifier	ammoUnitSize
>14526	Identifier	eat
>14527	PrimaryExpression	\" \"
>14528	PtrMemberAccess	eat -> ammo
>14529	Identifier	ammo
>14530	Identifier	eat
>14531	PrimaryExpression	\" \"
>14532	PtrMemberAccess	eat -> shot
>14533	Identifier	shot
>14534	Identifier	eat
>14535	PrimaryExpression	\" \"
>14536	PtrMemberAccess	eat -> name
>14537	Identifier	name
>14538	Identifier	eat
>14539	Identifier	os
>14540	IdentifierDeclStatement	 
>14541	IdentifierDecl	* eat = & naijaEats [ i ]
>14542	AssignmentExpr	* eat = & naijaEats [ i ]
>14543	UnaryOp	& naijaEats [ i ]
>14544	ArrayIndexing	naijaEats [ i ]
>14545	Identifier	i
>14546	Identifier	naijaEats
>14547	UnaryOperator	&
>14548	Identifier	eat
>14549	Identifier	eat
>14550	IdentifierDeclType	EatData *
>14551	IncDecOp	 
>14552	IncDec	++
>14553	Identifier	i
>14554	Condition	 
>14555	RelationalExpression	i < num
>14556	Identifier	num
>14557	Identifier	i
>14558	ForInit	 
>14559	IdentifierDeclStatement	int i = 0 ;
>14560	IdentifierDecl	i = 0
>14561	AssignmentExpr	i = 0
>14562	PrimaryExpression	0
>14563	Identifier	i
>14564	Identifier	i
>14565	IdentifierDeclType	int
>14566	ExpressionStatement	 
>14567	ShiftExpression	os << num << \" \"
>14568	ShiftExpression	num << \" \"
>14569	PrimaryExpression	\" \"
>14570	Identifier	num
>14571	Identifier	os
>14572	IdentifierDeclStatement	 
>14573	IdentifierDecl	num = naijaEats . size ( )
>14574	AssignmentExpr	num = naijaEats . size ( )
>14575	CallExpression	naijaEats . size ( )
>14576	ArgumentList	 
>14577	Callee	naijaEats . size
>14578	MemberAccess	naijaEats . size
>14579	Identifier	size
>14580	Identifier	naijaEats
>14581	Identifier	num
>14582	Identifier	num
>14583	IdentifierDeclType	int
>14584	IdentifierDeclStatement	 
>14585	IdentifierDecl	os
>14586	Identifier	os
>14587	IdentifierDeclType	std 
>14588	IdentifierDeclStatement	 
>14589	IdentifierDecl	* eats = doc . NewElement ( \"eats\" )
>14590	AssignmentExpr	* eats = doc . NewElement ( \"eats\" )
>14591	CallExpression	doc . NewElement ( \"eats\" )
>14592	ArgumentList	\"eats\"
>14593	Argument	\"eats\"
>14594	PrimaryExpression	\"eats\"
>14595	Callee	doc . NewElement
>14596	MemberAccess	doc . NewElement
>14597	Identifier	NewElement
>14598	Identifier	doc
>14599	Identifier	eats
>14600	Identifier	eats
>14601	IdentifierDeclType	XMLElement *
>14602	ExpressionStatement	 
>14603	CallExpression	doc . InsertEndChild ( vox )
>14604	ArgumentList	vox
>14605	Argument	vox
>14606	Identifier	vox
>14607	Callee	doc . InsertEndChild
>14608	MemberAccess	doc . InsertEndChild
>14609	Identifier	InsertEndChild
>14610	Identifier	doc
>14611	CompoundStatement	 
>14612	ExpressionStatement	 
>14613	CallExpression	vox -> SetAttribute ( \"v\" , os . str ( ) . c_str ( ) )
>14614	ArgumentList	\"v\"
>14615	Argument	os . str ( ) . c_str ( )
>14616	CallExpression	os . str ( ) . c_str ( )
>14617	ArgumentList	 
>14618	Callee	os . str ( ) . c_str
>14619	MemberAccess	os . str ( ) . c_str
>14620	Identifier	c_str
>14621	CallExpression	os . str ( )
>14622	ArgumentList	 
>14623	Callee	os . str
>14624	MemberAccess	os . str
>14625	Identifier	str
>14626	Identifier	os
>14627	Argument	\"v\"
>14628	PrimaryExpression	\"v\"
>14629	Callee	vox -> SetAttribute
>14630	PtrMemberAccess	vox -> SetAttribute
>14631	Identifier	SetAttribute
>14632	Identifier	vox
>14633	ForStatement	for ( int i = 0 ; i < dsq -> continuity . voiceOversPlayed . size ( ) ; i ++ )
>14634	CompoundStatement	 
>14635	ExpressionStatement	 
>14636	ShiftExpression	os << dsq -> continuity . voiceOversPlayed [ i ] << \" \"
>14637	ShiftExpression	dsq -> continuity . voiceOversPlayed [ i ] << \" \"
>14638	PrimaryExpression	\" \"
>14639	ArrayIndexing	dsq -> continuity . voiceOversPlayed [ i ]
>14640	Identifier	i
>14641	MemberAccess	dsq -> continuity . voiceOversPlayed
>14642	Identifier	voiceOversPlayed
>14643	PtrMemberAccess	dsq -> continuity
>14644	Identifier	continuity
>14645	Identifier	dsq
>14646	Identifier	os
>14647	IncDecOp	 
>14648	IncDec	++
>14649	Identifier	i
>14650	Condition	 
>14651	RelationalExpression	i < dsq -> continuity . voiceOversPlayed . size ( )
>14652	CallExpression	dsq -> continuity . voiceOversPlayed . size ( )
>14653	ArgumentList	 
>14654	Callee	dsq -> continuity . voiceOversPlayed . size
>14655	MemberAccess	dsq -> continuity . voiceOversPlayed . size
>14656	Identifier	size
>14657	MemberAccess	dsq -> continuity . voiceOversPlayed
>14658	Identifier	voiceOversPlayed
>14659	PtrMemberAccess	dsq -> continuity
>14660	Identifier	continuity
>14661	Identifier	dsq
>14662	Identifier	i
>14663	ForInit	 
>14664	IdentifierDeclStatement	int i = 0 ;
>14665	IdentifierDecl	i = 0
>14666	AssignmentExpr	i = 0
>14667	PrimaryExpression	0
>14668	Identifier	i
>14669	Identifier	i
>14670	IdentifierDeclType	int
>14671	IdentifierDeclStatement	 
>14672	IdentifierDecl	os
>14673	Identifier	os
>14674	IdentifierDeclType	std 
>14675	IdentifierDeclStatement	 
>14676	IdentifierDecl	* vox = doc . NewElement ( \"VO\" )
>14677	AssignmentExpr	* vox = doc . NewElement ( \"VO\" )
>14678	CallExpression	doc . NewElement ( \"VO\" )
>14679	ArgumentList	\"VO\"
>14680	Argument	\"VO\"
>14681	PrimaryExpression	\"VO\"
>14682	Callee	doc . NewElement
>14683	MemberAccess	doc . NewElement
>14684	Identifier	NewElement
>14685	Identifier	doc
>14686	Identifier	vox
>14687	Identifier	vox
>14688	IdentifierDeclType	XMLElement *
>14689	ExpressionStatement	 
>14690	CallExpression	doc . InsertEndChild ( worldMap )
>14691	ArgumentList	worldMap
>14692	Argument	worldMap
>14693	Identifier	worldMap
>14694	Callee	doc . InsertEndChild
>14695	MemberAccess	doc . InsertEndChild
>14696	Identifier	InsertEndChild
>14697	Identifier	doc
>14698	CompoundStatement	 
>14699	IfStatement	if ( dsq -> game -> worldMapRender )
>14700	CompoundStatement	 
>14701	ExpressionStatement	 
>14702	CallExpression	worldMap -> SetAttribute ( \"va\" , os . str ( ) . c_str ( ) )
>14703	ArgumentList	\"va\"
>14704	Argument	os . str ( ) . c_str ( )
>14705	CallExpression	os . str ( ) . c_str ( )
>14706	ArgumentList	 
>14707	Callee	os . str ( ) . c_str
>14708	MemberAccess	os . str ( ) . c_str
>14709	Identifier	c_str
>14710	CallExpression	os . str ( )
>14711	ArgumentList	 
>14712	Callee	os . str
>14713	MemberAccess	os . str
>14714	Identifier	str
>14715	Identifier	os
>14716	Argument	\"va\"
>14717	PrimaryExpression	\"va\"
>14718	Callee	worldMap -> SetAttribute
>14719	PtrMemberAccess	worldMap -> SetAttribute
>14720	Identifier	SetAttribute
>14721	Identifier	worldMap
>14722	ForStatement	for ( int i = 0 ; i < dsq -> continuity . worldMap . getNumWorldMapTiles ( ) ; i ++ )
>14723	CompoundStatement	 
>14724	ExpressionStatement	 
>14725	ShiftExpression	os << \" \"
>14726	PrimaryExpression	\" \"
>14727	Identifier	os
>14728	ExpressionStatement	 
>14729	CallExpression	tile -> dataToString ( os )
>14730	ArgumentList	os
>14731	Argument	os
>14732	Identifier	os
>14733	Callee	tile -> dataToString
>14734	PtrMemberAccess	tile -> dataToString
>14735	Identifier	dataToString
>14736	Identifier	tile
>14737	ExpressionStatement	 
>14738	ShiftExpression	os << tile -> index << \" \"
>14739	ShiftExpression	tile -> index << \" \"
>14740	PrimaryExpression	\" \"
>14741	PtrMemberAccess	tile -> index
>14742	Identifier	index
>14743	Identifier	tile
>14744	Identifier	os
>14745	IdentifierDeclStatement	 
>14746	IdentifierDecl	* tile = dsq -> continuity . worldMap . getWorldMapTile ( i )
>14747	AssignmentExpr	* tile = dsq -> continuity . worldMap . getWorldMapTile ( i )
>14748	CallExpression	dsq -> continuity . worldMap . getWorldMapTile ( i )
>14749	ArgumentList	i
>14750	Argument	i
>14751	Identifier	i
>14752	Callee	dsq -> continuity . worldMap . getWorldMapTile
>14753	MemberAccess	dsq -> continuity . worldMap . getWorldMapTile
>14754	Identifier	getWorldMapTile
>14755	MemberAccess	dsq -> continuity . worldMap
>14756	Identifier	worldMap
>14757	PtrMemberAccess	dsq -> continuity
>14758	Identifier	continuity
>14759	Identifier	dsq
>14760	Identifier	tile
>14761	Identifier	tile
>14762	IdentifierDeclType	WorldMapTile *
>14763	IncDecOp	 
>14764	IncDec	++
>14765	Identifier	i
>14766	Condition	 
>14767	RelationalExpression	i < dsq -> continuity . worldMap . getNumWorldMapTiles ( )
>14768	CallExpression	dsq -> continuity . worldMap . getNumWorldMapTiles ( )
>14769	ArgumentList	 
>14770	Callee	dsq -> continuity . worldMap . getNumWorldMapTiles
>14771	MemberAccess	dsq -> continuity . worldMap . getNumWorldMapTiles
>14772	Identifier	getNumWorldMapTiles
>14773	MemberAccess	dsq -> continuity . worldMap
>14774	Identifier	worldMap
>14775	PtrMemberAccess	dsq -> continuity
>14776	Identifier	continuity
>14777	Identifier	dsq
>14778	Identifier	i
>14779	ForInit	 
>14780	IdentifierDeclStatement	int i = 0 ;
>14781	IdentifierDecl	i = 0
>14782	AssignmentExpr	i = 0
>14783	PrimaryExpression	0
>14784	Identifier	i
>14785	Identifier	i
>14786	IdentifierDeclType	int
>14787	IdentifierDeclStatement	 
>14788	IdentifierDecl	os
>14789	Identifier	os
>14790	IdentifierDeclType	std 
>14791	Condition	 
>14792	PtrMemberAccess	dsq -> game -> worldMapRender
>14793	Identifier	worldMapRender
>14794	PtrMemberAccess	dsq -> game
>14795	Identifier	game
>14796	Identifier	dsq
>14797	ExpressionStatement	 
>14798	CallExpression	worldMap -> SetAttribute ( \"b\" , os . str ( ) . c_str ( ) )
>14799	ArgumentList	\"b\"
>14800	Argument	os . str ( ) . c_str ( )
>14801	CallExpression	os . str ( ) . c_str ( )
>14802	ArgumentList	 
>14803	Callee	os . str ( ) . c_str
>14804	MemberAccess	os . str ( ) . c_str
>14805	Identifier	c_str
>14806	CallExpression	os . str ( )
>14807	ArgumentList	 
>14808	Callee	os . str
>14809	MemberAccess	os . str
>14810	Identifier	str
>14811	Identifier	os
>14812	Argument	\"b\"
>14813	PrimaryExpression	\"b\"
>14814	Callee	worldMap -> SetAttribute
>14815	PtrMemberAccess	worldMap -> SetAttribute
>14816	Identifier	SetAttribute
>14817	Identifier	worldMap
>14818	ForStatement	for ( int i = 0 ; i < dsq -> continuity . worldMap . getNumWorldMapTiles ( ) ; i ++ )
>14819	CompoundStatement	 
>14820	IfStatement	if ( tile -> revealed )
>14821	CompoundStatement	 
>14822	ExpressionStatement	 
>14823	ShiftExpression	os << tile -> index << \" \"
>14824	ShiftExpression	tile -> index << \" \"
>14825	PrimaryExpression	\" \"
>14826	PtrMemberAccess	tile -> index
>14827	Identifier	index
>14828	Identifier	tile
>14829	Identifier	os
>14830	Condition	 
>14831	PtrMemberAccess	tile -> revealed
>14832	Identifier	revealed
>14833	Identifier	tile
>14834	IdentifierDeclStatement	 
>14835	IdentifierDecl	* tile = dsq -> continuity . worldMap . getWorldMapTile ( i )
>14836	AssignmentExpr	* tile = dsq -> continuity . worldMap . getWorldMapTile ( i )
>14837	CallExpression	dsq -> continuity . worldMap . getWorldMapTile ( i )
>14838	ArgumentList	i
>14839	Argument	i
>14840	Identifier	i
>14841	Callee	dsq -> continuity . worldMap . getWorldMapTile
>14842	MemberAccess	dsq -> continuity . worldMap . getWorldMapTile
>14843	Identifier	getWorldMapTile
>14844	MemberAccess	dsq -> continuity . worldMap
>14845	Identifier	worldMap
>14846	PtrMemberAccess	dsq -> continuity
>14847	Identifier	continuity
>14848	Identifier	dsq
>14849	Identifier	tile
>14850	Identifier	tile
>14851	IdentifierDeclType	WorldMapTile *
>14852	IncDecOp	 
>14853	IncDec	++
>14854	Identifier	i
>14855	Condition	 
>14856	RelationalExpression	i < dsq -> continuity . worldMap . getNumWorldMapTiles ( )
>14857	CallExpression	dsq -> continuity . worldMap . getNumWorldMapTiles ( )
>14858	ArgumentList	 
>14859	Callee	dsq -> continuity . worldMap . getNumWorldMapTiles
>14860	MemberAccess	dsq -> continuity . worldMap . getNumWorldMapTiles
>14861	Identifier	getNumWorldMapTiles
>14862	MemberAccess	dsq -> continuity . worldMap
>14863	Identifier	worldMap
>14864	PtrMemberAccess	dsq -> continuity
>14865	Identifier	continuity
>14866	Identifier	dsq
>14867	Identifier	i
>14868	ForInit	 
>14869	IdentifierDeclStatement	int i = 0 ;
>14870	IdentifierDecl	i = 0
>14871	AssignmentExpr	i = 0
>14872	PrimaryExpression	0
>14873	Identifier	i
>14874	Identifier	i
>14875	IdentifierDeclType	int
>14876	IdentifierDeclStatement	 
>14877	IdentifierDecl	os
>14878	Identifier	os
>14879	IdentifierDeclType	std 
>14880	IdentifierDeclStatement	 
>14881	IdentifierDecl	* worldMap = doc . NewElement ( \"WorldMap\" )
>14882	AssignmentExpr	* worldMap = doc . NewElement ( \"WorldMap\" )
>14883	CallExpression	doc . NewElement ( \"WorldMap\" )
>14884	ArgumentList	\"WorldMap\"
>14885	Argument	\"WorldMap\"
>14886	PrimaryExpression	\"WorldMap\"
>14887	Callee	doc . NewElement
>14888	MemberAccess	doc . NewElement
>14889	Identifier	NewElement
>14890	Identifier	doc
>14891	Identifier	worldMap
>14892	Identifier	worldMap
>14893	IdentifierDeclType	XMLElement *
>14894	ExpressionStatement	 
>14895	CallExpression	doc . InsertEndChild ( gems )
>14896	ArgumentList	gems
>14897	Argument	gems
>14898	Identifier	gems
>14899	Callee	doc . InsertEndChild
>14900	MemberAccess	doc . InsertEndChild
>14901	Identifier	InsertEndChild
>14902	Identifier	doc
>14903	CompoundStatement	 
>14904	ExpressionStatement	 
>14905	CallExpression	gems -> SetAttribute ( \"c\" , os . str ( ) . c_str ( ) )
>14906	ArgumentList	\"c\"
>14907	Argument	os . str ( ) . c_str ( )
>14908	CallExpression	os . str ( ) . c_str ( )
>14909	ArgumentList	 
>14910	Callee	os . str ( ) . c_str
>14911	MemberAccess	os . str ( ) . c_str
>14912	Identifier	c_str
>14913	CallExpression	os . str ( )
>14914	ArgumentList	 
>14915	Callee	os . str
>14916	MemberAccess	os . str
>14917	Identifier	str
>14918	Identifier	os
>14919	Argument	\"c\"
>14920	PrimaryExpression	\"c\"
>14921	Callee	gems -> SetAttribute
>14922	PtrMemberAccess	gems -> SetAttribute
>14923	Identifier	SetAttribute
>14924	Identifier	gems
>14925	ForStatement	for ( Gems 
>14926	CompoundStatement	 
>14927	IfStatement	if ( hasUserString )
>14928	ExpressionStatement	 
>14929	ShiftExpression	os << spacesToUnderscores ( ( * i ) . userString ) << \" \"
>14930	ShiftExpression	spacesToUnderscores ( ( * i ) . userString ) << \" \"
>14931	PrimaryExpression	\" \"
>14932	CallExpression	spacesToUnderscores ( ( * i ) . userString )
>14933	ArgumentList	( * i ) . userString
>14934	Argument	( * i ) . userString
>14935	MemberAccess	( * i ) . userString
>14936	Identifier	userString
>14937	UnaryOp	* i
>14938	Identifier	i
>14939	UnaryOperator	*
>14940	Callee	spacesToUnderscores
>14941	Identifier	spacesToUnderscores
>14942	Identifier	os
>14943	Condition	 
>14944	Identifier	hasUserString
>14945	ExpressionStatement	 
>14946	ShiftExpression	os << hasUserString << \" \"
>14947	ShiftExpression	hasUserString << \" \"
>14948	PrimaryExpression	\" \"
>14949	Identifier	hasUserString
>14950	Identifier	os
>14951	ExpressionStatement	 
>14952	AssignmentExpr	hasUserString = ! ( * i ) . userString . empty ( )
>14953	UnaryOp	! ( * i ) . userString . empty ( )
>14954	CallExpression	( * i ) . userString . empty ( )
>14955	ArgumentList	 
>14956	Callee	( * i ) . userString . empty
>14957	MemberAccess	( * i ) . userString . empty
>14958	Identifier	empty
>14959	MemberAccess	( * i ) . userString
>14960	Identifier	userString
>14961	UnaryOp	* i
>14962	Identifier	i
>14963	UnaryOperator	*
>14964	UnaryOperator	!
>14965	Identifier	hasUserString
>14966	ExpressionStatement	 
>14967	ShiftExpression	os << ( * i ) . canMove << \" \"
>14968	ShiftExpression	( * i ) . canMove << \" \"
>14969	PrimaryExpression	\" \"
>14970	MemberAccess	( * i ) . canMove
>14971	Identifier	canMove
>14972	UnaryOp	* i
>14973	Identifier	i
>14974	UnaryOperator	*
>14975	Identifier	os
>14976	ExpressionStatement	 
>14977	ShiftExpression	os << ( * i ) . name << \" \" << ( * i ) . pos . x << \" \" << ( * i ) . pos . y << \" \"
>14978	ShiftExpression	( * i ) . name << \" \" << ( * i ) . pos . x << \" \" << ( * i ) . pos . y << \" \"
>14979	ShiftExpression	\" \" << ( * i ) . pos . x << \" \" << ( * i ) . pos . y << \" \"
>14980	ShiftExpression	( * i ) . pos . x << \" \" << ( * i ) . pos . y << \" \"
>14981	ShiftExpression	\" \" << ( * i ) . pos . y << \" \"
>14982	ShiftExpression	( * i ) . pos . y << \" \"
>14983	PrimaryExpression	\" \"
>14984	MemberAccess	( * i ) . pos . y
>14985	Identifier	y
>14986	MemberAccess	( * i ) . pos
>14987	Identifier	pos
>14988	UnaryOp	* i
>14989	Identifier	i
>14990	UnaryOperator	*
>14991	PrimaryExpression	\" \"
>14992	MemberAccess	( * i ) . pos . x
>14993	Identifier	x
>14994	MemberAccess	( * i ) . pos
>14995	Identifier	pos
>14996	UnaryOp	* i
>14997	Identifier	i
>14998	UnaryOperator	*
>14999	PrimaryExpression	\" \"
>15000	MemberAccess	( * i ) . name
>15001	Identifier	name
>15002	UnaryOp	* i
>15003	Identifier	i
>15004	UnaryOperator	*
>15005	Identifier	os
>15006	IncDecOp	 
>15007	IncDec	++
>15008	Identifier	i
>15009	Condition	 
>15010	EqualityExpression	i != this -> gems . end ( )
>15011	CallExpression	this -> gems . end ( )
>15012	ArgumentList	 
>15013	Callee	this -> gems . end
>15014	MemberAccess	this -> gems . end
>15015	Identifier	end
>15016	PtrMemberAccess	this -> gems
>15017	Identifier	gems
>15018	Identifier	this
>15019	Identifier	i
>15020	ForInit	 
>15021	IdentifierDeclStatement	Gems 
>15022	IdentifierDecl	i = this -> gems . begin ( )
>15023	AssignmentExpr	i = this -> gems . begin ( )
>15024	CallExpression	this -> gems . begin ( )
>15025	ArgumentList	 
>15026	Callee	this -> gems . begin
>15027	MemberAccess	this -> gems . begin
>15028	Identifier	begin
>15029	PtrMemberAccess	this -> gems
>15030	Identifier	gems
>15031	Identifier	this
>15032	Identifier	i
>15033	Identifier	i
>15034	IdentifierDeclType	Gems 
>15035	ExpressionStatement	 
>15036	ShiftExpression	os << this -> gems . size ( ) << \" \"
>15037	ShiftExpression	this -> gems . size ( ) << \" \"
>15038	PrimaryExpression	\" \"
>15039	CallExpression	this -> gems . size ( )
>15040	ArgumentList	 
>15041	Callee	this -> gems . size
>15042	MemberAccess	this -> gems . size
>15043	Identifier	size
>15044	PtrMemberAccess	this -> gems
>15045	Identifier	gems
>15046	Identifier	this
>15047	Identifier	os
>15048	IdentifierDeclStatement	 
>15049	IdentifierDecl	hasUserString = false
>15050	AssignmentExpr	hasUserString = false
>15051	Identifier	false
>15052	Identifier	false
>15053	Identifier	hasUserString
>15054	IdentifierDeclType	bool
>15055	IdentifierDeclStatement	 
>15056	IdentifierDecl	os
>15057	Identifier	os
>15058	IdentifierDeclType	std 
>15059	IdentifierDeclStatement	 
>15060	IdentifierDecl	* gems = doc . NewElement ( \"Gems\" )
>15061	AssignmentExpr	* gems = doc . NewElement ( \"Gems\" )
>15062	CallExpression	doc . NewElement ( \"Gems\" )
>15063	ArgumentList	\"Gems\"
>15064	Argument	\"Gems\"
>15065	PrimaryExpression	\"Gems\"
>15066	Callee	doc . NewElement
>15067	MemberAccess	doc . NewElement
>15068	Identifier	NewElement
>15069	Identifier	doc
>15070	Identifier	gems
>15071	Identifier	gems
>15072	IdentifierDeclType	XMLElement *
>15073	ExpressionStatement	 
>15074	CallExpression	doc . InsertEndChild ( efx )
>15075	ArgumentList	efx
>15076	Argument	efx
>15077	Identifier	efx
>15078	Callee	doc . InsertEndChild
>15079	MemberAccess	doc . InsertEndChild
>15080	Identifier	InsertEndChild
>15081	Identifier	doc
>15082	CompoundStatement	 
>15083	ExpressionStatement	 
>15084	CallExpression	efx -> SetAttribute ( \"a\" , os . str ( ) . c_str ( ) )
>15085	ArgumentList	\"a\"
>15086	Argument	os . str ( ) . c_str ( )
>15087	CallExpression	os . str ( ) . c_str ( )
>15088	ArgumentList	 
>15089	Callee	os . str ( ) . c_str
>15090	MemberAccess	os . str ( ) . c_str
>15091	Identifier	c_str
>15092	CallExpression	os . str ( )
>15093	ArgumentList	 
>15094	Callee	os . str
>15095	MemberAccess	os . str
>15096	Identifier	str
>15097	Identifier	os
>15098	Argument	\"a\"
>15099	PrimaryExpression	\"a\"
>15100	Callee	efx -> SetAttribute
>15101	PtrMemberAccess	efx -> SetAttribute
>15102	Identifier	SetAttribute
>15103	Identifier	efx
>15104	ForStatement	for ( EntityFlags 
>15105	CompoundStatement	 
>15106	ExpressionStatement	 
>15107	ShiftExpression	os << ( * i ) . first << \" \" << ( * i ) . second << \" \"
>15108	ShiftExpression	( * i ) . first << \" \" << ( * i ) . second << \" \"
>15109	ShiftExpression	\" \" << ( * i ) . second << \" \"
>15110	ShiftExpression	( * i ) . second << \" \"
>15111	PrimaryExpression	\" \"
>15112	MemberAccess	( * i ) . second
>15113	Identifier	second
>15114	UnaryOp	* i
>15115	Identifier	i
>15116	UnaryOperator	*
>15117	PrimaryExpression	\" \"
>15118	MemberAccess	( * i ) . first
>15119	Identifier	first
>15120	UnaryOp	* i
>15121	Identifier	i
>15122	UnaryOperator	*
>15123	Identifier	os
>15124	IncDecOp	 
>15125	IncDec	++
>15126	Identifier	i
>15127	Condition	 
>15128	EqualityExpression	i != entityFlags . end ( )
>15129	CallExpression	entityFlags . end ( )
>15130	ArgumentList	 
>15131	Callee	entityFlags . end
>15132	MemberAccess	entityFlags . end
>15133	Identifier	end
>15134	Identifier	entityFlags
>15135	Identifier	i
>15136	ForInit	 
>15137	IdentifierDeclStatement	EntityFlags 
>15138	IdentifierDecl	i = entityFlags . begin ( )
>15139	AssignmentExpr	i = entityFlags . begin ( )
>15140	CallExpression	entityFlags . begin ( )
>15141	ArgumentList	 
>15142	Callee	entityFlags . begin
>15143	MemberAccess	entityFlags . begin
>15144	Identifier	begin
>15145	Identifier	entityFlags
>15146	Identifier	i
>15147	Identifier	i
>15148	IdentifierDeclType	EntityFlags 
>15149	IdentifierDeclStatement	 
>15150	IdentifierDecl	os
>15151	Identifier	os
>15152	IdentifierDeclType	std 
>15153	IdentifierDeclStatement	 
>15154	IdentifierDecl	* efx = doc . NewElement ( \"EFX\" )
>15155	AssignmentExpr	* efx = doc . NewElement ( \"EFX\" )
>15156	CallExpression	doc . NewElement ( \"EFX\" )
>15157	ArgumentList	\"EFX\"
>15158	Argument	\"EFX\"
>15159	PrimaryExpression	\"EFX\"
>15160	Callee	doc . NewElement
>15161	MemberAccess	doc . NewElement
>15162	Identifier	NewElement
>15163	Identifier	doc
>15164	Identifier	efx
>15165	Identifier	efx
>15166	IdentifierDeclType	XMLElement *
>15167	ForStatement	for ( Flags 
>15168	CompoundStatement	 
>15169	ExpressionStatement	 
>15170	CallExpression	doc . InsertEndChild ( flag )
>15171	ArgumentList	flag
>15172	Argument	flag
>15173	Identifier	flag
>15174	Callee	doc . InsertEndChild
>15175	MemberAccess	doc . InsertEndChild
>15176	Identifier	InsertEndChild
>15177	Identifier	doc
>15178	ExpressionStatement	 
>15179	CallExpression	flag -> SetAttribute ( \"value\" , ( * i ) . second )
>15180	ArgumentList	\"value\"
>15181	Argument	( * i ) . second
>15182	MemberAccess	( * i ) . second
>15183	Identifier	second
>15184	UnaryOp	* i
>15185	Identifier	i
>15186	UnaryOperator	*
>15187	Argument	\"value\"
>15188	PrimaryExpression	\"value\"
>15189	Callee	flag -> SetAttribute
>15190	PtrMemberAccess	flag -> SetAttribute
>15191	Identifier	SetAttribute
>15192	Identifier	flag
>15193	ExpressionStatement	 
>15194	CallExpression	flag -> SetAttribute ( \"name\" , ( * i ) . first . c_str ( ) )
>15195	ArgumentList	\"name\"
>15196	Argument	( * i ) . first . c_str ( )
>15197	CallExpression	( * i ) . first . c_str ( )
>15198	ArgumentList	 
>15199	Callee	( * i ) . first . c_str
>15200	MemberAccess	( * i ) . first . c_str
>15201	Identifier	c_str
>15202	MemberAccess	( * i ) . first
>15203	Identifier	first
>15204	UnaryOp	* i
>15205	Identifier	i
>15206	UnaryOperator	*
>15207	Argument	\"name\"
>15208	PrimaryExpression	\"name\"
>15209	Callee	flag -> SetAttribute
>15210	PtrMemberAccess	flag -> SetAttribute
>15211	Identifier	SetAttribute
>15212	Identifier	flag
>15213	IdentifierDeclStatement	 
>15214	IdentifierDecl	* flag = doc . NewElement ( \"Flag\" )
>15215	AssignmentExpr	* flag = doc . NewElement ( \"Flag\" )
>15216	CallExpression	doc . NewElement ( \"Flag\" )
>15217	ArgumentList	\"Flag\"
>15218	Argument	\"Flag\"
>15219	PrimaryExpression	\"Flag\"
>15220	Callee	doc . NewElement
>15221	MemberAccess	doc . NewElement
>15222	Identifier	NewElement
>15223	Identifier	doc
>15224	Identifier	flag
>15225	Identifier	flag
>15226	IdentifierDeclType	XMLElement *
>15227	IfStatement	if ( ( * i ) . first . find ( \"TEMP_\" ) != std 
>15228	ContinueStatement	 
>15229	Condition	 
>15230	EqualityExpression	( * i ) . first . find ( \"TEMP_\" ) != std 
>15231	Identifier	std 
>15232	CallExpression	( * i ) . first . find ( \"TEMP_\" )
>15233	ArgumentList	\"TEMP_\"
>15234	Argument	\"TEMP_\"
>15235	PrimaryExpression	\"TEMP_\"
>15236	Callee	( * i ) . first . find
>15237	MemberAccess	( * i ) . first . find
>15238	Identifier	find
>15239	MemberAccess	( * i ) . first
>15240	Identifier	first
>15241	UnaryOp	* i
>15242	Identifier	i
>15243	UnaryOperator	*
>15244	IfStatement	if ( ( * i ) . first . find ( \"CHOICE_\" ) != std 
>15245	ContinueStatement	 
>15246	Condition	 
>15247	EqualityExpression	( * i ) . first . find ( \"CHOICE_\" ) != std 
>15248	Identifier	std 
>15249	CallExpression	( * i ) . first . find ( \"CHOICE_\" )
>15250	ArgumentList	\"CHOICE_\"
>15251	Argument	\"CHOICE_\"
>15252	PrimaryExpression	\"CHOICE_\"
>15253	Callee	( * i ) . first . find
>15254	MemberAccess	( * i ) . first . find
>15255	Identifier	find
>15256	MemberAccess	( * i ) . first
>15257	Identifier	first
>15258	UnaryOp	* i
>15259	Identifier	i
>15260	UnaryOperator	*
>15261	IncDecOp	 
>15262	IncDec	++
>15263	Identifier	i
>15264	Condition	 
>15265	EqualityExpression	i != flags . end ( )
>15266	CallExpression	flags . end ( )
>15267	ArgumentList	 
>15268	Callee	flags . end
>15269	MemberAccess	flags . end
>15270	Identifier	end
>15271	Identifier	flags
>15272	Identifier	i
>15273	ForInit	 
>15274	IdentifierDeclStatement	Flags 
>15275	IdentifierDecl	i = flags . begin ( )
>15276	AssignmentExpr	i = flags . begin ( )
>15277	CallExpression	flags . begin ( )
>15278	ArgumentList	 
>15279	Callee	flags . begin
>15280	MemberAccess	flags . begin
>15281	Identifier	begin
>15282	Identifier	flags
>15283	Identifier	i
>15284	Identifier	i
>15285	IdentifierDeclType	Flags 
>15286	ExpressionStatement	 
>15287	CallExpression	doc . InsertEndChild ( version )
>15288	ArgumentList	version
>15289	Argument	version
>15290	Identifier	version
>15291	Callee	doc . InsertEndChild
>15292	MemberAccess	doc . InsertEndChild
>15293	Identifier	InsertEndChild
>15294	Identifier	doc
>15295	CompoundStatement	 
>15296	ExpressionStatement	 
>15297	CallExpression	version -> SetAttribute ( \"revision\" , VERSION_REVISION )
>15298	ArgumentList	\"revision\"
>15299	Argument	VERSION_REVISION
>15300	Identifier	VERSION_REVISION
>15301	Argument	\"revision\"
>15302	PrimaryExpression	\"revision\"
>15303	Callee	version -> SetAttribute
>15304	PtrMemberAccess	version -> SetAttribute
>15305	Identifier	SetAttribute
>15306	Identifier	version
>15307	ExpressionStatement	 
>15308	CallExpression	version -> SetAttribute ( \"minor\" , VERSION_MINOR )
>15309	ArgumentList	\"minor\"
>15310	Argument	VERSION_MINOR
>15311	Identifier	VERSION_MINOR
>15312	Argument	\"minor\"
>15313	PrimaryExpression	\"minor\"
>15314	Callee	version -> SetAttribute
>15315	PtrMemberAccess	version -> SetAttribute
>15316	Identifier	SetAttribute
>15317	Identifier	version
>15318	ExpressionStatement	 
>15319	CallExpression	version -> SetAttribute ( \"major\" , VERSION_MAJOR )
>15320	ArgumentList	\"major\"
>15321	Argument	VERSION_MAJOR
>15322	Identifier	VERSION_MAJOR
>15323	Argument	\"major\"
>15324	PrimaryExpression	\"major\"
>15325	Callee	version -> SetAttribute
>15326	PtrMemberAccess	version -> SetAttribute
>15327	Identifier	SetAttribute
>15328	Identifier	version
>15329	IdentifierDeclStatement	 
>15330	IdentifierDecl	* version = doc . NewElement ( \"Version\" )
>15331	AssignmentExpr	* version = doc . NewElement ( \"Version\" )
>15332	CallExpression	doc . NewElement ( \"Version\" )
>15333	ArgumentList	\"Version\"
>15334	Argument	\"Version\"
>15335	PrimaryExpression	\"Version\"
>15336	Callee	doc . NewElement
>15337	MemberAccess	doc . NewElement
>15338	Identifier	NewElement
>15339	Identifier	doc
>15340	Identifier	version
>15341	Identifier	version
>15342	IdentifierDeclType	XMLElement *
>15343	IdentifierDeclStatement	 
>15344	IdentifierDecl	doc
>15345	Identifier	doc
>15346	IdentifierDeclType	XMLDocument
>15347	ExpressionStatement	 
>15348	CallExpression	dsq -> user . save ( )
>15349	ArgumentList	 
>15350	Callee	dsq -> user . save
>15351	MemberAccess	dsq -> user . save
>15352	Identifier	save
>15353	PtrMemberAccess	dsq -> user
>15354	Identifier	user
>15355	Identifier	dsq
>15356	IfStatement	if ( position . isZero ( ) )
>15357	CompoundStatement	 
>15358	ExpressionStatement	 
>15359	AssignmentExpr	position = dsq -> game -> avatar -> position
>15360	PtrMemberAccess	dsq -> game -> avatar -> position
>15361	Identifier	position
>15362	PtrMemberAccess	dsq -> game -> avatar
>15363	Identifier	avatar
>15364	PtrMemberAccess	dsq -> game
>15365	Identifier	game
>15366	Identifier	dsq
>15367	Identifier	position
>15368	Condition	 
>15369	CallExpression	position . isZero ( )
>15370	ArgumentList	 
>15371	Callee	position . isZero
>15372	MemberAccess	position . isZero
>15373	Identifier	isZero
>15374	Identifier	position
>15375	ExpressionStatement	 
>15376	CallExpression	refreshAvatarData ( dsq -> game -> avatar )
>15377	ArgumentList	dsq -> game -> avatar
>15378	Argument	dsq -> game -> avatar
>15379	PtrMemberAccess	dsq -> game -> avatar
>15380	Identifier	avatar
>15381	PtrMemberAccess	dsq -> game
>15382	Identifier	game
>15383	Identifier	dsq
>15384	Callee	refreshAvatarData
>15385	Identifier	refreshAvatarData
>15601	FunctionDef	Continuity 
>15602	ParameterList	int slot , const std 
>15603	Parameter	 
>15604	Identifier	pfix
>15605	ParameterType	const std 
>15606	Parameter	 
>15607	Identifier	slot
>15608	ParameterType	int
>15609	ReturnType	std 
>15610	CompoundStatement	 
>15611	ReturnStatement	 
>15612	CallExpression	os . str ( )
>15613	ArgumentList	 
>15614	Callee	os . str
>15615	MemberAccess	os . str
>15616	Identifier	str
>15617	Identifier	os
>15618	ExpressionStatement	 
>15619	ShiftExpression	os << dsq -> getSaveDirectory ( ) << \"/\" << dsq -> currentProfile . name << \"-\" << numToZeroString ( \
>15620	ShiftExpression	dsq -> getSaveDirectory ( ) << \"/\" << dsq -> currentProfile . name << \"-\" << numToZeroString ( slot , \
>15621	ShiftExpression	\"/\" << dsq -> currentProfile . name << \"-\" << numToZeroString ( slot , 4 ) << \".\" << pfix
>15622	ShiftExpression	dsq -> currentProfile . name << \"-\" << numToZeroString ( slot , 4 ) << \".\" << pfix
>15623	ShiftExpression	\"-\" << numToZeroString ( slot , 4 ) << \".\" << pfix
>15624	ShiftExpression	numToZeroString ( slot , 4 ) << \".\" << pfix
>15625	ShiftExpression	\".\" << pfix
>15626	Identifier	pfix
>15627	PrimaryExpression	\".\"
>15628	CallExpression	numToZeroString ( slot , 4 )
>15629	ArgumentList	slot
>15630	Argument	4
>15631	PrimaryExpression	4
>15632	Argument	slot
>15633	Identifier	slot
>15634	Callee	numToZeroString
>15635	Identifier	numToZeroString
>15636	PrimaryExpression	\"-\"
>15637	MemberAccess	dsq -> currentProfile . name
>15638	Identifier	name
>15639	PtrMemberAccess	dsq -> currentProfile
>15640	Identifier	currentProfile
>15641	Identifier	dsq
>15642	PrimaryExpression	\"/\"
>15643	CallExpression	dsq -> getSaveDirectory ( )
>15644	ArgumentList	 
>15645	Callee	dsq -> getSaveDirectory
>15646	PtrMemberAccess	dsq -> getSaveDirectory
>15647	Identifier	getSaveDirectory
>15648	Identifier	dsq
>15649	Identifier	os
>15650	IdentifierDeclStatement	 
>15651	IdentifierDecl	os
>15652	Identifier	os
>15653	IdentifierDeclType	std 
>15664	FunctionDef	Continuity 
>15665	ParameterList	int slot , XMLDocument & doc
>15666	Parameter	 
>15667	Identifier	doc
>15668	ParameterType	XMLDocument &
>15669	Parameter	 
>15670	Identifier	slot
>15671	ParameterType	int
>15672	ReturnType	void
>15673	CompoundStatement	 
>15674	IfStatement	if ( exists ( teh_file ) )
>15675	CompoundStatement	 
>15676	IfStatement	if ( readXML ( teh_file , doc ) != XML_SUCCESS )
>15677	ExpressionStatement	 
>15678	CallExpression	errorLog ( \"Failed to load save data
>15679	ArgumentList	\"Failed to load save data
>15680	Argument	\"Failed to load save data
>15681	AdditiveExpression	\"Failed to load save data
>15682	Identifier	teh_file
>15683	PrimaryExpression	\"Failed to load save data
>15684	Callee	errorLog
>15685	Identifier	errorLog
>15686	Condition	 
>15687	EqualityExpression	readXML ( teh_file , doc ) != XML_SUCCESS
>15688	Identifier	XML_SUCCESS
>15689	CallExpression	readXML ( teh_file , doc )
>15690	ArgumentList	teh_file
>15691	Argument	doc
>15692	Identifier	doc
>15693	Argument	teh_file
>15694	Identifier	teh_file
>15695	Callee	readXML
>15696	Identifier	readXML
>15697	Condition	 
>15698	CallExpression	exists ( teh_file )
>15699	ArgumentList	teh_file
>15700	Argument	teh_file
>15701	Identifier	teh_file
>15702	Callee	exists
>15703	Identifier	exists
>15704	ExpressionStatement	 
>15705	AssignmentExpr	teh_file = dsq -> continuity . getSaveFileName ( slot , \"xml\" )
>15706	CallExpression	dsq -> continuity . getSaveFileName ( slot , \"xml\" )
>15707	ArgumentList	slot
>15708	Argument	\"xml\"
>15709	PrimaryExpression	\"xml\"
>15710	Argument	slot
>15711	Identifier	slot
>15712	Callee	dsq -> continuity . getSaveFileName
>15713	MemberAccess	dsq -> continuity . getSaveFileName
>15714	Identifier	getSaveFileName
>15715	PtrMemberAccess	dsq -> continuity
>15716	Identifier	continuity
>15717	Identifier	dsq
>15718	Identifier	teh_file
>15719	IfStatement	if ( exists ( teh_file ) )
>15720	CompoundStatement	 
>15721	IfStatement	if ( doc . Parse ( buf , size ) != XML_SUCCESS )
>15722	CompoundStatement	 
>15723	ReturnStatement	 
>15724	ExpressionStatement	 
>15725	CallExpression	errorLog ( \"Failed to load save data
>15726	ArgumentList	\"Failed to load save data
>15727	Argument	\"Failed to load save data
>15728	AdditiveExpression	\"Failed to load save data
>15729	AdditiveExpression	teh_file + \" -- Error
>15730	AdditiveExpression	\" -- Error
>15731	CallExpression	doc . GetErrorStr1 ( )
>15732	ArgumentList	 
>15733	Callee	doc . GetErrorStr1
>15734	MemberAccess	doc . GetErrorStr1
>15735	Identifier	GetErrorStr1
>15736	Identifier	doc
>15737	PrimaryExpression	\" -- Error
>15738	Identifier	teh_file
>15739	PrimaryExpression	\"Failed to load save data
>15740	Callee	errorLog
>15741	Identifier	errorLog
>15742	Condition	 
>15743	EqualityExpression	doc . Parse ( buf , size ) != XML_SUCCESS
>15744	Identifier	XML_SUCCESS
>15745	CallExpression	doc . Parse ( buf , size )
>15746	ArgumentList	buf
>15747	Argument	size
>15748	Identifier	size
>15749	Argument	buf
>15750	Identifier	buf
>15751	Callee	doc . Parse
>15752	MemberAccess	doc . Parse
>15753	Identifier	Parse
>15754	Identifier	doc
>15755	IfStatement	if ( ! buf )
>15756	CompoundStatement	 
>15757	ReturnStatement	 
>15758	ExpressionStatement	 
>15759	CallExpression	errorLog ( \"Failed to decompress save file
>15760	ArgumentList	\"Failed to decompress save file
>15761	Argument	\"Failed to decompress save file
>15762	AdditiveExpression	\"Failed to decompress save file
>15763	Identifier	teh_file
>15764	PrimaryExpression	\"Failed to decompress save file
>15765	Callee	errorLog
>15766	Identifier	errorLog
>15767	Condition	 
>15768	UnaryOp	! buf
>15769	Identifier	buf
>15770	UnaryOperator	!
>15771	IdentifierDeclStatement	 
>15772	IdentifierDecl	* buf = readCompressedFile ( teh_file , & size )
>15773	AssignmentExpr	* buf = readCompressedFile ( teh_file , & size )
>15774	CallExpression	readCompressedFile ( teh_file , & size )
>15775	ArgumentList	teh_file
>15776	Argument	& size
>15777	UnaryOp	& size
>15778	Identifier	size
>15779	UnaryOperator	&
>15780	Argument	teh_file
>15781	Identifier	teh_file
>15782	Callee	readCompressedFile
>15783	Identifier	readCompressedFile
>15784	Identifier	buf
>15785	Identifier	buf
>15786	IdentifierDeclType	char *
>15787	IdentifierDeclStatement	 
>15788	IdentifierDecl	size = 0
>15789	AssignmentExpr	size = 0
>15790	PrimaryExpression	0
>15791	Identifier	size
>15792	Identifier	size
>15793	IdentifierDeclType	unsigned long
>15794	Condition	 
>15795	CallExpression	exists ( teh_file )
>15796	ArgumentList	teh_file
>15797	Argument	teh_file
>15798	Identifier	teh_file
>15799	Callee	exists
>15800	Identifier	exists
>15801	IfStatement	if ( ! exists ( teh_file ) )
>15802	ExpressionStatement	 
>15803	AssignmentExpr	teh_file = dsq -> continuity . getSaveFileName ( slot , \"bin\" )
>15804	CallExpression	dsq -> continuity . getSaveFileName ( slot , \"bin\" )
>15805	ArgumentList	slot
>15806	Argument	\"bin\"
>15807	PrimaryExpression	\"bin\"
>15808	Argument	slot
>15809	Identifier	slot
>15810	Callee	dsq -> continuity . getSaveFileName
>15811	MemberAccess	dsq -> continuity . getSaveFileName
>15812	Identifier	getSaveFileName
>15813	PtrMemberAccess	dsq -> continuity
>15814	Identifier	continuity
>15815	Identifier	dsq
>15816	Identifier	teh_file
>15817	Condition	 
>15818	UnaryOp	! exists ( teh_file )
>15819	CallExpression	exists ( teh_file )
>15820	ArgumentList	teh_file
>15821	Argument	teh_file
>15822	Identifier	teh_file
>15823	Callee	exists
>15824	Identifier	exists
>15825	UnaryOperator	!
>15826	IdentifierDeclStatement	 
>15827	IdentifierDecl	teh_file = dsq -> continuity . getSaveFileName ( slot , \"aqs\" )
>15828	AssignmentExpr	teh_file = dsq -> continuity . getSaveFileName ( slot , \"aqs\" )
>15829	CallExpression	dsq -> continuity . getSaveFileName ( slot , \"aqs\" )
>15830	ArgumentList	slot
>15831	Argument	\"aqs\"
>15832	PrimaryExpression	\"aqs\"
>15833	Argument	slot
>15834	Identifier	slot
>15835	Callee	dsq -> continuity . getSaveFileName
>15836	MemberAccess	dsq -> continuity . getSaveFileName
>15837	Identifier	getSaveFileName
>15838	PtrMemberAccess	dsq -> continuity
>15839	Identifier	continuity
>15840	Identifier	dsq
>15841	Identifier	teh_file
>15842	Identifier	teh_file
>15843	IdentifierDeclType	std 
>15863	FunctionDef	Continuity 
>15864	ParameterList	int slot
>15865	Parameter	 
>15866	Identifier	slot
>15867	ParameterType	int
>15868	ReturnType	void
>15869	CompoundStatement	 
>15870	IfStatement	if ( startData )
>15871	CompoundStatement	 
>15872	IfStatement	if ( startData -> Attribute ( \"webTimer\" ) )
>15873	CompoundStatement	 
>15874	ExpressionStatement	 
>15875	CallExpression	webTimer . start ( timer )
>15876	ArgumentList	timer
>15877	Argument	timer
>15878	Identifier	timer
>15879	Callee	webTimer . start
>15880	MemberAccess	webTimer . start
>15881	Identifier	start
>15882	Identifier	webTimer
>15883	IdentifierDeclStatement	 
>15884	IdentifierDecl	timer = strtof ( startData -> Attribute ( \"webTimer\" ) , NULL )
>15885	AssignmentExpr	timer = strtof ( startData -> Attribute ( \"webTimer\" ) , NULL )
>15886	CallExpression	strtof ( startData -> Attribute ( \"webTimer\" ) , NULL )
>15887	ArgumentList	startData -> Attribute ( \"webTimer\" )
>15888	Argument	NULL
>15889	Identifier	NULL
>15890	Argument	startData -> Attribute ( \"webTimer\" )
>15891	CallExpression	startData -> Attribute ( \"webTimer\" )
>15892	ArgumentList	\"webTimer\"
>15893	Argument	\"webTimer\"
>15894	PrimaryExpression	\"webTimer\"
>15895	Callee	startData -> Attribute
>15896	PtrMemberAccess	startData -> Attribute
>15897	Identifier	Attribute
>15898	Identifier	startData
>15899	Callee	strtof
>15900	Identifier	strtof
>15901	Identifier	timer
>15902	Identifier	timer
>15903	IdentifierDeclType	float
>15904	Condition	 
>15905	CallExpression	startData -> Attribute ( \"webTimer\" )
>15906	ArgumentList	\"webTimer\"
>15907	Argument	\"webTimer\"
>15908	PrimaryExpression	\"webTimer\"
>15909	Callee	startData -> Attribute
>15910	PtrMemberAccess	startData -> Attribute
>15911	Identifier	Attribute
>15912	Identifier	startData
>15913	IfStatement	if ( startData -> Attribute ( \"web\" ) )
>15914	CompoundStatement	 
>15915	IfStatement	if ( nump > 1 && remainTime > 0 && dsq -> game -> avatar )
>15916	CompoundStatement	 
>15917	ExpressionStatement	 
>15918	CallExpression	webTimer . start ( remainTime )
>15919	ArgumentList	remainTime
>15920	Argument	remainTime
>15921	Identifier	remainTime
>15922	Callee	webTimer . start
>15923	MemberAccess	webTimer . start
>15924	Identifier	start
>15925	Identifier	webTimer
>15926	ExpressionStatement	 
>15927	CallExpression	webBitTimer . start ( wbit )
>15928	ArgumentList	wbit
>15929	Argument	wbit
>15930	Identifier	wbit
>15931	Callee	webBitTimer . start
>15932	MemberAccess	webBitTimer . start
>15933	Identifier	start
>15934	Identifier	webBitTimer
>15935	ForStatement	for ( int i = 0 ; i < nump ; ++ i )
>15936	CompoundStatement	 
>15937	IfStatement	if ( i < w -> getNumPoints ( ) )
>15938	ElseStatement	else
>15939	ExpressionStatement	 
>15940	CallExpression	w -> addPoint ( v )
>15941	ArgumentList	v
>15942	Argument	v
>15943	Identifier	v
>15944	Callee	w -> addPoint
>15945	PtrMemberAccess	w -> addPoint
>15946	Identifier	addPoint
>15947	Identifier	w
>15948	ExpressionStatement	 
>15949	CallExpression	w -> setPoint ( i , v )
>15950	ArgumentList	i
>15951	Argument	v
>15952	Identifier	v
>15953	Argument	i
>15954	Identifier	i
>15955	Callee	w -> setPoint
>15956	PtrMemberAccess	w -> setPoint
>15957	Identifier	setPoint
>15958	Identifier	w
>15959	Condition	 
>15960	RelationalExpression	i < w -> getNumPoints ( )
>15961	CallExpression	w -> getNumPoints ( )
>15962	ArgumentList	 
>15963	Callee	w -> getNumPoints
>15964	PtrMemberAccess	w -> getNumPoints
>15965	Identifier	getNumPoints
>15966	Identifier	w
>15967	Identifier	i
>15968	ExpressionStatement	 
>15969	ShiftExpression	is >> v . x >> v . y
>15970	ShiftExpression	v . x >> v . y
>15971	MemberAccess	v . y
>15972	Identifier	y
>15973	Identifier	v
>15974	MemberAccess	v . x
>15975	Identifier	x
>15976	Identifier	v
>15977	Identifier	is
>15978	IdentifierDeclStatement	 
>15979	IdentifierDecl	v
>15980	Identifier	v
>15981	IdentifierDeclType	Vector
>15982	UnaryExpression	 
>15983	Identifier	i
>15984	IncDec	++
>15985	Condition	 
>15986	RelationalExpression	i < nump
>15987	Identifier	nump
>15988	Identifier	i
>15989	ForInit	 
>15990	IdentifierDeclStatement	int i = 0 ;
>15991	IdentifierDecl	i = 0
>15992	AssignmentExpr	i = 0
>15993	PrimaryExpression	0
>15994	Identifier	i
>15995	Identifier	i
>15996	IdentifierDeclType	int
>15997	IdentifierDeclStatement	 
>15998	IdentifierDecl	* w = dsq -> game -> avatar -> web
>15999	AssignmentExpr	* w = dsq -> game -> avatar -> web
>16000	PtrMemberAccess	dsq -> game -> avatar -> web
>16001	Identifier	web
>16002	PtrMemberAccess	dsq -> game -> avatar
>16003	Identifier	avatar
>16004	PtrMemberAccess	dsq -> game
>16005	Identifier	game
>16006	Identifier	dsq
>16007	Identifier	w
>16008	Identifier	w
>16009	IdentifierDeclType	Web *
>16010	IfStatement	if ( ! dsq -> game -> avatar -> web )
>16011	ExpressionStatement	 
>16012	CallExpression	dsq -> game -> avatar -> createWeb ( )
>16013	ArgumentList	 
>16014	Callee	dsq -> game -> avatar -> createWeb
>16015	PtrMemberAccess	dsq -> game -> avatar -> createWeb
>16016	Identifier	createWeb
>16017	PtrMemberAccess	dsq -> game -> avatar
>16018	Identifier	avatar
>16019	PtrMemberAccess	dsq -> game
>16020	Identifier	game
>16021	Identifier	dsq
>16022	Condition	 
>16023	UnaryOp	! dsq -> game -> avatar -> web
>16024	PtrMemberAccess	dsq -> game -> avatar -> web
>16025	Identifier	web
>16026	PtrMemberAccess	dsq -> game -> avatar
>16027	Identifier	avatar
>16028	PtrMemberAccess	dsq -> game
>16029	Identifier	game
>16030	Identifier	dsq
>16031	UnaryOperator	!
>16032	Condition	 
>16033	AndExpression	nump > 1 && remainTime > 0 && dsq -> game -> avatar
>16034	AndExpression	remainTime > 0 && dsq -> game -> avatar
>16035	PtrMemberAccess	dsq -> game -> avatar
>16036	Identifier	avatar
>16037	PtrMemberAccess	dsq -> game
>16038	Identifier	game
>16039	Identifier	dsq
>16040	RelationalExpression	remainTime > 0
>16041	PrimaryExpression	0
>16042	Identifier	remainTime
>16043	RelationalExpression	nump > 1
>16044	PrimaryExpression	1
>16045	Identifier	nump
>16046	IdentifierDeclStatement	 
>16047	IdentifierDecl	remainTime = webTime - ( 0.5 * ( nump - 2 ) )
>16048	AssignmentExpr	remainTime = webTime - ( 0.5 * ( nump - 2 ) )
>16049	AdditiveExpression	webTime - ( 0.5 * ( nump - 2 ) )
>16050	MultiplicativeExpression	0.5 * ( nump - 2 )
>16051	AdditiveExpression	nump - 2
>16052	PrimaryExpression	2
>16053	Identifier	nump
>16054	PrimaryExpression	0.5
>16055	Identifier	webTime
>16056	Identifier	remainTime
>16057	Identifier	remainTime
>16058	IdentifierDeclType	float
>16059	ExpressionStatement	 
>16060	ShiftExpression	is >> wbit >> nump
>16061	ShiftExpression	wbit >> nump
>16062	Identifier	nump
>16063	Identifier	wbit
>16064	Identifier	is
>16065	IdentifierDeclStatement	 
>16066	IdentifierDecl	nump = 0
>16067	AssignmentExpr	nump = 0
>16068	PrimaryExpression	0
>16069	Identifier	nump
>16070	Identifier	nump
>16071	IdentifierDeclType	int
>16072	IdentifierDeclStatement	 
>16073	IdentifierDecl	wbit = 0.0f
>16074	AssignmentExpr	wbit = 0.0f
>16075	PrimaryExpression	0.0f
>16076	Identifier	wbit
>16077	Identifier	wbit
>16078	IdentifierDeclType	float
>16079	IdentifierDeclStatement	 
>16080	IdentifierDecl	is ( startData -> Attribute ( \"web\" ) )
>16081	CallExpression	startData -> Attribute ( \"web\" )
>16082	ArgumentList	\"web\"
>16083	Argument	\"web\"
>16084	PrimaryExpression	\"web\"
>16085	Callee	startData -> Attribute
>16086	PtrMemberAccess	startData -> Attribute
>16087	Identifier	Attribute
>16088	Identifier	startData
>16089	Identifier	is
>16090	IdentifierDeclType	std 
>16091	Condition	 
>16092	CallExpression	startData -> Attribute ( \"web\" )
>16093	ArgumentList	\"web\"
>16094	Argument	\"web\"
>16095	PrimaryExpression	\"web\"
>16096	Callee	startData -> Attribute
>16097	PtrMemberAccess	startData -> Attribute
>16098	Identifier	Attribute
>16099	Identifier	startData
>16100	IfStatement	if ( startData -> Attribute ( \"poison\" ) )
>16101	CompoundStatement	 
>16102	ExpressionStatement	 
>16103	CallExpression	poisonBitTimer . start ( pbit )
>16104	ArgumentList	pbit
>16105	Argument	pbit
>16106	Identifier	pbit
>16107	Callee	poisonBitTimer . start
>16108	MemberAccess	poisonBitTimer . start
>16109	Identifier	start
>16110	Identifier	poisonBitTimer
>16111	ExpressionStatement	 
>16112	CallExpression	setPoison ( p , pt )
>16113	ArgumentList	p
>16114	Argument	pt
>16115	Identifier	pt
>16116	Argument	p
>16117	Identifier	p
>16118	Callee	setPoison
>16119	Identifier	setPoison
>16120	ExpressionStatement	 
>16121	ShiftExpression	is >> p >> pt >> pbit
>16122	ShiftExpression	p >> pt >> pbit
>16123	ShiftExpression	pt >> pbit
>16124	Identifier	pbit
>16125	Identifier	pt
>16126	Identifier	p
>16127	Identifier	is
>16128	IdentifierDeclStatement	 
>16129	IdentifierDecl	pbit = 0.0f
>16130	AssignmentExpr	pbit = 0.0f
>16131	PrimaryExpression	0.0f
>16132	Identifier	pbit
>16133	Identifier	pbit
>16134	IdentifierDeclType	float
>16135	IdentifierDecl	pt = 0.0f
>16136	AssignmentExpr	pt = 0.0f
>16137	PrimaryExpression	0.0f
>16138	Identifier	pt
>16139	Identifier	pt
>16140	IdentifierDeclType	float
>16141	IdentifierDecl	p = 0.0f
>16142	AssignmentExpr	p = 0.0f
>16143	PrimaryExpression	0.0f
>16144	Identifier	p
>16145	Identifier	p
>16146	IdentifierDeclType	float
>16147	IdentifierDeclStatement	 
>16148	IdentifierDecl	is ( startData -> Attribute ( \"poison\" ) )
>16149	CallExpression	startData -> Attribute ( \"poison\" )
>16150	ArgumentList	\"poison\"
>16151	Argument	\"poison\"
>16152	PrimaryExpression	\"poison\"
>16153	Callee	startData -> Attribute
>16154	PtrMemberAccess	startData -> Attribute
>16155	Identifier	Attribute
>16156	Identifier	startData
>16157	Identifier	is
>16158	IdentifierDeclType	std 
>16159	Condition	 
>16160	CallExpression	startData -> Attribute ( \"poison\" )
>16161	ArgumentList	\"poison\"
>16162	Argument	\"poison\"
>16163	PrimaryExpression	\"poison\"
>16164	Callee	startData -> Attribute
>16165	PtrMemberAccess	startData -> Attribute
>16166	Identifier	Attribute
>16167	Identifier	startData
>16168	Statement	 
>16169	Statement	 
>16170	ExpressionStatement	 
>16171	CallExpression	LOAD_MULTI_SIMPLE ( \"light\" , setLight )
>16172	ArgumentList	\"light\"
>16173	Argument	setLight
>16174	Identifier	setLight
>16175	Argument	\"light\"
>16176	PrimaryExpression	\"light\"
>16177	Callee	LOAD_MULTI_SIMPLE
>16178	Identifier	LOAD_MULTI_SIMPLE
>16179	ExpressionStatement	 
>16180	CallExpression	LOAD_MULTI_SIMPLE ( \"liPower\" , setLiPower )
>16181	ArgumentList	\"liPower\"
>16182	Argument	setLiPower
>16183	Identifier	setLiPower
>16184	Argument	\"liPower\"
>16185	PrimaryExpression	\"liPower\"
>16186	Callee	LOAD_MULTI_SIMPLE
>16187	Identifier	LOAD_MULTI_SIMPLE
>16188	ExpressionStatement	 
>16189	CallExpression	LOAD_MULTI_SIMPLE ( \"petPower\" , setPetPower )
>16190	ArgumentList	\"petPower\"
>16191	Argument	setPetPower
>16192	Identifier	setPetPower
>16193	Argument	\"petPower\"
>16194	PrimaryExpression	\"petPower\"
>16195	Callee	LOAD_MULTI_SIMPLE
>16196	Identifier	LOAD_MULTI_SIMPLE
>16197	ExpressionStatement	 
>16198	CallExpression	LOAD_MULTI_SIMPLE ( \"energyMult\" , setEnergy )
>16199	ArgumentList	\"energyMult\"
>16200	Argument	setEnergy
>16201	Identifier	setEnergy
>16202	Argument	\"energyMult\"
>16203	PrimaryExpression	\"energyMult\"
>16204	Callee	LOAD_MULTI_SIMPLE
>16205	Identifier	LOAD_MULTI_SIMPLE
>16206	ExpressionStatement	 
>16207	CallExpression	LOAD_MULTI_SIMPLE ( \"defenseMult\" , setDefenseMultiplier )
>16208	ArgumentList	\"defenseMult\"
>16209	Argument	setDefenseMultiplier
>16210	Identifier	setDefenseMultiplier
>16211	Argument	\"defenseMult\"
>16212	PrimaryExpression	\"defenseMult\"
>16213	Callee	LOAD_MULTI_SIMPLE
>16214	Identifier	LOAD_MULTI_SIMPLE
>16215	ExpressionStatement	 
>16216	CallExpression	LOAD_MULTI_SIMPLE ( \"speedMult\" , setSpeedMultiplier )
>16217	ArgumentList	\"speedMult\"
>16218	Argument	setSpeedMultiplier
>16219	Identifier	setSpeedMultiplier
>16220	Argument	\"speedMult\"
>16221	PrimaryExpression	\"speedMult\"
>16222	Callee	LOAD_MULTI_SIMPLE
>16223	Identifier	LOAD_MULTI_SIMPLE
>16224	DoStatement	do
>16225	Condition	 
>16226	PrimaryExpression	0
>16227	CompoundStatement	 
>16228	IfStatement	if ( startData -> Attribute ( attr ) )
>16229	CompoundStatement	 
>16230	ExpressionStatement	 
>16231	CallExpression	this -> mth ( value , timer )
>16232	ArgumentList	value
>16233	Argument	timer
>16234	Identifier	timer
>16235	Argument	value
>16236	Identifier	value
>16237	Callee	this -> mth
>16238	PtrMemberAccess	this -> mth
>16239	Identifier	mth
>16240	Identifier	this
>16241	ExpressionStatement	 
>16242	ShiftExpression	is >> value >> timer
>16243	ShiftExpression	value >> timer
>16244	Identifier	timer
>16245	Identifier	value
>16246	Identifier	is
>16247	IdentifierDeclStatement	 
>16248	IdentifierDecl	timer = 0.0f
>16249	AssignmentExpr	timer = 0.0f
>16250	PrimaryExpression	0.0f
>16251	Identifier	timer
>16252	Identifier	timer
>16253	IdentifierDeclType	float
>16254	IdentifierDecl	value = 0.0f
>16255	AssignmentExpr	value = 0.0f
>16256	PrimaryExpression	0.0f
>16257	Identifier	value
>16258	Identifier	value
>16259	IdentifierDeclType	float
>16260	IdentifierDeclStatement	 
>16261	IdentifierDecl	is ( startData -> Attribute ( attr ) )
>16262	CallExpression	startData -> Attribute ( attr )
>16263	ArgumentList	attr
>16264	Argument	attr
>16265	Identifier	attr
>16266	Callee	startData -> Attribute
>16267	PtrMemberAccess	startData -> Attribute
>16268	Identifier	Attribute
>16269	Identifier	startData
>16270	Identifier	is
>16271	IdentifierDeclType	std 
>16272	Condition	 
>16273	CallExpression	startData -> Attribute ( attr )
>16274	ArgumentList	attr
>16275	Argument	attr
>16276	Identifier	attr
>16277	Callee	startData -> Attribute
>16278	PtrMemberAccess	startData -> Attribute
>16279	Identifier	Attribute
>16280	Identifier	startData
>16281	Statement	 
>16282	Statement	 
>16283	Statement	 
>16284	Statement	 
>16285	Statement	 
>16286	Statement	 
>16287	Statement	 
>16288	IfStatement	if ( startData -> Attribute ( \"shieldPoints\" ) )
>16289	CompoundStatement	 
>16290	IfStatement	if ( dsq -> game -> avatar )
>16291	ExpressionStatement	 
>16292	AssignmentExpr	dsq -> game -> avatar -> shieldPoints = sp
>16293	Identifier	sp
>16294	PtrMemberAccess	dsq -> game -> avatar -> shieldPoints
>16295	Identifier	shieldPoints
>16296	PtrMemberAccess	dsq -> game -> avatar
>16297	Identifier	avatar
>16298	PtrMemberAccess	dsq -> game
>16299	Identifier	game
>16300	Identifier	dsq
>16301	Condition	 
>16302	PtrMemberAccess	dsq -> game -> avatar
>16303	Identifier	avatar
>16304	PtrMemberAccess	dsq -> game
>16305	Identifier	game
>16306	Identifier	dsq
>16307	IdentifierDeclStatement	 
>16308	IdentifierDecl	sp = strtof ( startData -> Attribute ( \"shieldPoints\" ) , NULL )
>16309	AssignmentExpr	sp = strtof ( startData -> Attribute ( \"shieldPoints\" ) , NULL )
>16310	CallExpression	strtof ( startData -> Attribute ( \"shieldPoints\" ) , NULL )
>16311	ArgumentList	startData -> Attribute ( \"shieldPoints\" )
>16312	Argument	NULL
>16313	Identifier	NULL
>16314	Argument	startData -> Attribute ( \"shieldPoints\" )
>16315	CallExpression	startData -> Attribute ( \"shieldPoints\" )
>16316	ArgumentList	\"shieldPoints\"
>16317	Argument	\"shieldPoints\"
>16318	PrimaryExpression	\"shieldPoints\"
>16319	Callee	startData -> Attribute
>16320	PtrMemberAccess	startData -> Attribute
>16321	Identifier	Attribute
>16322	Identifier	startData
>16323	Callee	strtof
>16324	Identifier	strtof
>16325	Identifier	sp
>16326	Identifier	sp
>16327	IdentifierDeclType	float
>16328	Condition	 
>16329	CallExpression	startData -> Attribute ( \"shieldPoints\" )
>16330	ArgumentList	\"shieldPoints\"
>16331	Argument	\"shieldPoints\"
>16332	PrimaryExpression	\"shieldPoints\"
>16333	Callee	startData -> Attribute
>16334	PtrMemberAccess	startData -> Attribute
>16335	Identifier	Attribute
>16336	Identifier	startData
>16337	IfStatement	if ( startData -> Attribute ( \"aura\" ) )
>16338	CompoundStatement	 
>16339	IfStatement	if ( dsq -> game -> avatar )
>16340	CompoundStatement	 
>16341	ExpressionStatement	 
>16342	AssignmentExpr	dsq -> game -> avatar -> auraTimer = timer
>16343	Identifier	timer
>16344	PtrMemberAccess	dsq -> game -> avatar -> auraTimer
>16345	Identifier	auraTimer
>16346	PtrMemberAccess	dsq -> game -> avatar
>16347	Identifier	avatar
>16348	PtrMemberAccess	dsq -> game
>16349	Identifier	game
>16350	Identifier	dsq
>16351	ExpressionStatement	 
>16352	CallExpression	dsq -> game -> avatar -> activateAura ( ( AuraType ) type )
>16353	ArgumentList	( AuraType ) type
>16354	Argument	( AuraType ) type
>16355	CastExpression	( AuraType ) type
>16356	Identifier	type
>16357	CastTarget	AuraType
>16358	Callee	dsq -> game -> avatar -> activateAura
>16359	PtrMemberAccess	dsq -> game -> avatar -> activateAura
>16360	Identifier	activateAura
>16361	PtrMemberAccess	dsq -> game -> avatar
>16362	Identifier	avatar
>16363	PtrMemberAccess	dsq -> game
>16364	Identifier	game
>16365	Identifier	dsq
>16366	Condition	 
>16367	PtrMemberAccess	dsq -> game -> avatar
>16368	Identifier	avatar
>16369	PtrMemberAccess	dsq -> game
>16370	Identifier	game
>16371	Identifier	dsq
>16372	ExpressionStatement	 
>16373	AssignmentExpr	auraType = ( AuraType ) type
>16374	CastExpression	( AuraType ) type
>16375	Identifier	type
>16376	CastTarget	AuraType
>16377	Identifier	auraType
>16378	ExpressionStatement	 
>16379	AssignmentExpr	auraTimer = timer
>16380	Identifier	timer
>16381	Identifier	auraTimer
>16382	ExpressionStatement	 
>16383	ShiftExpression	is >> type >> timer
>16384	ShiftExpression	type >> timer
>16385	Identifier	timer
>16386	Identifier	type
>16387	Identifier	is
>16388	IdentifierDeclStatement	 
>16389	IdentifierDecl	timer = 0.0f
>16390	AssignmentExpr	timer = 0.0f
>16391	PrimaryExpression	0.0f
>16392	Identifier	timer
>16393	Identifier	timer
>16394	IdentifierDeclType	float
>16395	IdentifierDeclStatement	 
>16396	IdentifierDecl	type = AURA_NONE
>16397	AssignmentExpr	type = AURA_NONE
>16398	Identifier	AURA_NONE
>16399	Identifier	AURA_NONE
>16400	Identifier	type
>16401	IdentifierDeclType	int
>16402	IdentifierDeclStatement	 
>16403	IdentifierDecl	is ( startData -> Attribute ( \"aura\" ) )
>16404	CallExpression	startData -> Attribute ( \"aura\" )
>16405	ArgumentList	\"aura\"
>16406	Argument	\"aura\"
>16407	PrimaryExpression	\"aura\"
>16408	Callee	startData -> Attribute
>16409	PtrMemberAccess	startData -> Attribute
>16410	Identifier	Attribute
>16411	Identifier	startData
>16412	Identifier	is
>16413	IdentifierDeclType	std 
>16414	Condition	 
>16415	CallExpression	startData -> Attribute ( \"aura\" )
>16416	ArgumentList	\"aura\"
>16417	Argument	\"aura\"
>16418	PrimaryExpression	\"aura\"
>16419	Callee	startData -> Attribute
>16420	PtrMemberAccess	startData -> Attribute
>16421	Identifier	Attribute
>16422	Identifier	startData
>16423	IfStatement	if ( startData -> Attribute ( \"trip\" ) )
>16424	CompoundStatement	 
>16425	ExpressionStatement	 
>16426	CallExpression	setTrip ( timer )
>16427	ArgumentList	timer
>16428	Argument	timer
>16429	Identifier	timer
>16430	Callee	setTrip
>16431	Identifier	setTrip
>16432	IdentifierDeclStatement	 
>16433	IdentifierDecl	timer = strtof ( startData -> Attribute ( \"trip\" ) , NULL )
>16434	AssignmentExpr	timer = strtof ( startData -> Attribute ( \"trip\" ) , NULL )
>16435	CallExpression	strtof ( startData -> Attribute ( \"trip\" ) , NULL )
>16436	ArgumentList	startData -> Attribute ( \"trip\" )
>16437	Argument	NULL
>16438	Identifier	NULL
>16439	Argument	startData -> Attribute ( \"trip\" )
>16440	CallExpression	startData -> Attribute ( \"trip\" )
>16441	ArgumentList	\"trip\"
>16442	Argument	\"trip\"
>16443	PrimaryExpression	\"trip\"
>16444	Callee	startData -> Attribute
>16445	PtrMemberAccess	startData -> Attribute
>16446	Identifier	Attribute
>16447	Identifier	startData
>16448	Callee	strtof
>16449	Identifier	strtof
>16450	Identifier	timer
>16451	Identifier	timer
>16452	IdentifierDeclType	float
>16453	Condition	 
>16454	CallExpression	startData -> Attribute ( \"trip\" )
>16455	ArgumentList	\"trip\"
>16456	Argument	\"trip\"
>16457	PrimaryExpression	\"trip\"
>16458	Callee	startData -> Attribute
>16459	PtrMemberAccess	startData -> Attribute
>16460	Identifier	Attribute
>16461	Identifier	startData
>16462	IfStatement	if ( startData -> Attribute ( \"regen\" ) )
>16463	CompoundStatement	 
>16464	ExpressionStatement	 
>16465	CallExpression	setRegen ( timer )
>16466	ArgumentList	timer
>16467	Argument	timer
>16468	Identifier	timer
>16469	Callee	setRegen
>16470	Identifier	setRegen
>16471	IdentifierDeclStatement	 
>16472	IdentifierDecl	timer = strtof ( startData -> Attribute ( \"regen\" ) , NULL )
>16473	AssignmentExpr	timer = strtof ( startData -> Attribute ( \"regen\" ) , NULL )
>16474	CallExpression	strtof ( startData -> Attribute ( \"regen\" ) , NULL )
>16475	ArgumentList	startData -> Attribute ( \"regen\" )
>16476	Argument	NULL
>16477	Identifier	NULL
>16478	Argument	startData -> Attribute ( \"regen\" )
>16479	CallExpression	startData -> Attribute ( \"regen\" )
>16480	ArgumentList	\"regen\"
>16481	Argument	\"regen\"
>16482	PrimaryExpression	\"regen\"
>16483	Callee	startData -> Attribute
>16484	PtrMemberAccess	startData -> Attribute
>16485	Identifier	Attribute
>16486	Identifier	startData
>16487	Callee	strtof
>16488	Identifier	strtof
>16489	Identifier	timer
>16490	Identifier	timer
>16491	IdentifierDeclType	float
>16492	Condition	 
>16493	CallExpression	startData -> Attribute ( \"regen\" )
>16494	ArgumentList	\"regen\"
>16495	Argument	\"regen\"
>16496	PrimaryExpression	\"regen\"
>16497	Callee	startData -> Attribute
>16498	PtrMemberAccess	startData -> Attribute
>16499	Identifier	Attribute
>16500	Identifier	startData
>16501	IfStatement	if ( startData -> Attribute ( \"invincible\" ) )
>16502	CompoundStatement	 
>16503	ExpressionStatement	 
>16504	CallExpression	setInvincible ( timer )
>16505	ArgumentList	timer
>16506	Argument	timer
>16507	Identifier	timer
>16508	Callee	setInvincible
>16509	Identifier	setInvincible
>16510	IdentifierDeclStatement	 
>16511	IdentifierDecl	timer = strtof ( startData -> Attribute ( \"invincible\" ) , NULL )
>16512	AssignmentExpr	timer = strtof ( startData -> Attribute ( \"invincible\" ) , NULL )
>16513	CallExpression	strtof ( startData -> Attribute ( \"invincible\" ) , NULL )
>16514	ArgumentList	startData -> Attribute ( \"invincible\" )
>16515	Argument	NULL
>16516	Identifier	NULL
>16517	Argument	startData -> Attribute ( \"invincible\" )
>16518	CallExpression	startData -> Attribute ( \"invincible\" )
>16519	ArgumentList	\"invincible\"
>16520	Argument	\"invincible\"
>16521	PrimaryExpression	\"invincible\"
>16522	Callee	startData -> Attribute
>16523	PtrMemberAccess	startData -> Attribute
>16524	Identifier	Attribute
>16525	Identifier	startData
>16526	Callee	strtof
>16527	Identifier	strtof
>16528	Identifier	timer
>16529	Identifier	timer
>16530	IdentifierDeclType	float
>16531	Condition	 
>16532	CallExpression	startData -> Attribute ( \"invincible\" )
>16533	ArgumentList	\"invincible\"
>16534	Argument	\"invincible\"
>16535	PrimaryExpression	\"invincible\"
>16536	Callee	startData -> Attribute
>16537	PtrMemberAccess	startData -> Attribute
>16538	Identifier	Attribute
>16539	Identifier	startData
>16540	IfStatement	if ( startData -> Attribute ( \"blind\" ) )
>16541	CompoundStatement	 
>16542	IfStatement	if ( dsq -> game -> avatar )
>16543	ExpressionStatement	 
>16544	CallExpression	dsq -> game -> avatar -> setBlind ( timer )
>16545	ArgumentList	timer
>16546	Argument	timer
>16547	Identifier	timer
>16548	Callee	dsq -> game -> avatar -> setBlind
>16549	PtrMemberAccess	dsq -> game -> avatar -> setBlind
>16550	Identifier	setBlind
>16551	PtrMemberAccess	dsq -> game -> avatar
>16552	Identifier	avatar
>16553	PtrMemberAccess	dsq -> game
>16554	Identifier	game
>16555	Identifier	dsq
>16556	Condition	 
>16557	PtrMemberAccess	dsq -> game -> avatar
>16558	Identifier	avatar
>16559	PtrMemberAccess	dsq -> game
>16560	Identifier	game
>16561	Identifier	dsq
>16562	IdentifierDeclStatement	 
>16563	IdentifierDecl	timer = strtof ( startData -> Attribute ( \"blind\" ) , NULL )
>16564	AssignmentExpr	timer = strtof ( startData -> Attribute ( \"blind\" ) , NULL )
>16565	CallExpression	strtof ( startData -> Attribute ( \"blind\" ) , NULL )
>16566	ArgumentList	startData -> Attribute ( \"blind\" )
>16567	Argument	NULL
>16568	Identifier	NULL
>16569	Argument	startData -> Attribute ( \"blind\" )
>16570	CallExpression	startData -> Attribute ( \"blind\" )
>16571	ArgumentList	\"blind\"
>16572	Argument	\"blind\"
>16573	PrimaryExpression	\"blind\"
>16574	Callee	startData -> Attribute
>16575	PtrMemberAccess	startData -> Attribute
>16576	Identifier	Attribute
>16577	Identifier	startData
>16578	Callee	strtof
>16579	Identifier	strtof
>16580	Identifier	timer
>16581	Identifier	timer
>16582	IdentifierDeclType	float
>16583	Condition	 
>16584	CallExpression	startData -> Attribute ( \"blind\" )
>16585	ArgumentList	\"blind\"
>16586	Argument	\"blind\"
>16587	PrimaryExpression	\"blind\"
>16588	Callee	startData -> Attribute
>16589	PtrMemberAccess	startData -> Attribute
>16590	Identifier	Attribute
>16591	Identifier	startData
>16592	ExpressionStatement	 
>16593	AssignmentExpr	dsq -> game -> sceneToLoad = startData -> Attribute ( \"scene\" )
>16594	CallExpression	startData -> Attribute ( \"scene\" )
>16595	ArgumentList	\"scene\"
>16596	Argument	\"scene\"
>16597	PrimaryExpression	\"scene\"
>16598	Callee	startData -> Attribute
>16599	PtrMemberAccess	startData -> Attribute
>16600	Identifier	Attribute
>16601	Identifier	startData
>16602	PtrMemberAccess	dsq -> game -> sceneToLoad
>16603	Identifier	sceneToLoad
>16604	PtrMemberAccess	dsq -> game
>16605	Identifier	game
>16606	Identifier	dsq
>16607	IfStatement	if ( startData -> Attribute ( \"costume\" ) )
>16608	CompoundStatement	 
>16609	ExpressionStatement	 
>16610	AssignmentExpr	dsq -> continuity . costume = startData -> Attribute ( \"costume\" )
>16611	CallExpression	startData -> Attribute ( \"costume\" )
>16612	ArgumentList	\"costume\"
>16613	Argument	\"costume\"
>16614	PrimaryExpression	\"costume\"
>16615	Callee	startData -> Attribute
>16616	PtrMemberAccess	startData -> Attribute
>16617	Identifier	Attribute
>16618	Identifier	startData
>16619	MemberAccess	dsq -> continuity . costume
>16620	Identifier	costume
>16621	PtrMemberAccess	dsq -> continuity
>16622	Identifier	continuity
>16623	Identifier	dsq
>16624	Condition	 
>16625	CallExpression	startData -> Attribute ( \"costume\" )
>16626	ArgumentList	\"costume\"
>16627	Argument	\"costume\"
>16628	PrimaryExpression	\"costume\"
>16629	Callee	startData -> Attribute
>16630	PtrMemberAccess	startData -> Attribute
>16631	Identifier	Attribute
>16632	Identifier	startData
>16633	IfStatement	if ( startData -> Attribute ( \"seconds\" ) )
>16634	CompoundStatement	 
>16635	ExpressionStatement	 
>16636	ShiftExpression	is >> dsq -> continuity . seconds
>16637	MemberAccess	dsq -> continuity . seconds
>16638	Identifier	seconds
>16639	PtrMemberAccess	dsq -> continuity
>16640	Identifier	continuity
>16641	Identifier	dsq
>16642	Identifier	is
>16643	IdentifierDeclStatement	 
>16644	IdentifierDecl	is ( startData -> Attribute ( \"seconds\" ) )
>16645	CallExpression	startData -> Attribute ( \"seconds\" )
>16646	ArgumentList	\"seconds\"
>16647	Argument	\"seconds\"
>16648	PrimaryExpression	\"seconds\"
>16649	Callee	startData -> Attribute
>16650	PtrMemberAccess	startData -> Attribute
>16651	Identifier	Attribute
>16652	Identifier	startData
>16653	Identifier	is
>16654	IdentifierDeclType	std 
>16655	Condition	 
>16656	CallExpression	startData -> Attribute ( \"seconds\" )
>16657	ArgumentList	\"seconds\"
>16658	Argument	\"seconds\"
>16659	PrimaryExpression	\"seconds\"
>16660	Callee	startData -> Attribute
>16661	PtrMemberAccess	startData -> Attribute
>16662	Identifier	Attribute
>16663	Identifier	startData
>16664	IfStatement	if ( startData -> Attribute ( \"ch\" ) )
>16665	CompoundStatement	 
>16666	IfStatement	if ( dsq -> game -> avatar )
>16667	CompoundStatement	 
>16668	ExpressionStatement	 
>16669	AssignmentExpr	dsq -> game -> avatar -> health = h
>16670	Identifier	h
>16671	PtrMemberAccess	dsq -> game -> avatar -> health
>16672	Identifier	health
>16673	PtrMemberAccess	dsq -> game -> avatar
>16674	Identifier	avatar
>16675	PtrMemberAccess	dsq -> game
>16676	Identifier	game
>16677	Identifier	dsq
>16678	Condition	 
>16679	PtrMemberAccess	dsq -> game -> avatar
>16680	Identifier	avatar
>16681	PtrMemberAccess	dsq -> game
>16682	Identifier	game
>16683	Identifier	dsq
>16684	ExpressionStatement	 
>16685	CallExpression	debugLog ( os . str ( ) )
>16686	ArgumentList	os . str ( )
>16687	Argument	os . str ( )
>16688	CallExpression	os . str ( )
>16689	ArgumentList	 
>16690	Callee	os . str
>16691	MemberAccess	os . str
>16692	Identifier	str
>16693	Identifier	os
>16694	Callee	debugLog
>16695	Identifier	debugLog
>16696	ExpressionStatement	 
>16697	ShiftExpression	os << \"CurHealth read as
>16698	ShiftExpression	\"CurHealth read as
>16699	Identifier	health
>16700	PrimaryExpression	\"CurHealth read as
>16701	Identifier	os
>16702	IdentifierDeclStatement	 
>16703	IdentifierDecl	os
>16704	Identifier	os
>16705	IdentifierDeclType	std 
>16706	ExpressionStatement	 
>16707	AssignmentExpr	health = h
>16708	Identifier	h
>16709	Identifier	health
>16710	IdentifierDeclStatement	 
>16711	IdentifierDecl	h = strtof ( startData -> Attribute ( \"ch\" ) , NULL )
>16712	AssignmentExpr	h = strtof ( startData -> Attribute ( \"ch\" ) , NULL )
>16713	CallExpression	strtof ( startData -> Attribute ( \"ch\" ) , NULL )
>16714	ArgumentList	startData -> Attribute ( \"ch\" )
>16715	Argument	NULL
>16716	Identifier	NULL
>16717	Argument	startData -> Attribute ( \"ch\" )
>16718	CallExpression	startData -> Attribute ( \"ch\" )
>16719	ArgumentList	\"ch\"
>16720	Argument	\"ch\"
>16721	PrimaryExpression	\"ch\"
>16722	Callee	startData -> Attribute
>16723	PtrMemberAccess	startData -> Attribute
>16724	Identifier	Attribute
>16725	Identifier	startData
>16726	Callee	strtof
>16727	Identifier	strtof
>16728	Identifier	h
>16729	Identifier	h
>16730	IdentifierDeclType	float
>16731	Condition	 
>16732	CallExpression	startData -> Attribute ( \"ch\" )
>16733	ArgumentList	\"ch\"
>16734	Argument	\"ch\"
>16735	PrimaryExpression	\"ch\"
>16736	Callee	startData -> Attribute
>16737	PtrMemberAccess	startData -> Attribute
>16738	Identifier	Attribute
>16739	Identifier	startData
>16740	IfStatement	if ( startData -> Attribute ( \"h\" ) )
>16741	CompoundStatement	 
>16742	IfStatement	if ( dsq -> game -> avatar )
>16743	CompoundStatement	 
>16744	ExpressionStatement	 
>16745	AssignmentExpr	dsq -> game -> avatar -> health = maxHealth
>16746	Identifier	maxHealth
>16747	PtrMemberAccess	dsq -> game -> avatar -> health
>16748	Identifier	health
>16749	PtrMemberAccess	dsq -> game -> avatar
>16750	Identifier	avatar
>16751	PtrMemberAccess	dsq -> game
>16752	Identifier	game
>16753	Identifier	dsq
>16754	ExpressionStatement	 
>16755	AssignmentExpr	dsq -> game -> avatar -> maxHealth = maxHealth
>16756	Identifier	maxHealth
>16757	PtrMemberAccess	dsq -> game -> avatar -> maxHealth
>16758	Identifier	maxHealth
>16759	PtrMemberAccess	dsq -> game -> avatar
>16760	Identifier	avatar
>16761	PtrMemberAccess	dsq -> game
>16762	Identifier	game
>16763	Identifier	dsq
>16764	Condition	 
>16765	PtrMemberAccess	dsq -> game -> avatar
>16766	Identifier	avatar
>16767	PtrMemberAccess	dsq -> game
>16768	Identifier	game
>16769	Identifier	dsq
>16770	ExpressionStatement	 
>16771	CallExpression	debugLog ( os . str ( ) )
>16772	ArgumentList	os . str ( )
>16773	Argument	os . str ( )
>16774	CallExpression	os . str ( )
>16775	ArgumentList	 
>16776	Callee	os . str
>16777	MemberAccess	os . str
>16778	Identifier	str
>16779	Identifier	os
>16780	Callee	debugLog
>16781	Identifier	debugLog
>16782	ExpressionStatement	 
>16783	ShiftExpression	os << \"MaxHealth read as
>16784	ShiftExpression	\"MaxHealth read as
>16785	Identifier	maxHealth
>16786	PrimaryExpression	\"MaxHealth read as
>16787	Identifier	os
>16788	IdentifierDeclStatement	 
>16789	IdentifierDecl	os
>16790	Identifier	os
>16791	IdentifierDeclType	std 
>16792	ExpressionStatement	 
>16793	AssignmentExpr	health = read
>16794	Identifier	read
>16795	Identifier	health
>16796	ExpressionStatement	 
>16797	AssignmentExpr	maxHealth = read
>16798	Identifier	read
>16799	Identifier	maxHealth
>16800	IdentifierDeclStatement	 
>16801	IdentifierDecl	read = strtof ( startData -> Attribute ( \"h\" ) , NULL )
>16802	AssignmentExpr	read = strtof ( startData -> Attribute ( \"h\" ) , NULL )
>16803	CallExpression	strtof ( startData -> Attribute ( \"h\" ) , NULL )
>16804	ArgumentList	startData -> Attribute ( \"h\" )
>16805	Argument	NULL
>16806	Identifier	NULL
>16807	Argument	startData -> Attribute ( \"h\" )
>16808	CallExpression	startData -> Attribute ( \"h\" )
>16809	ArgumentList	\"h\"
>16810	Argument	\"h\"
>16811	PrimaryExpression	\"h\"
>16812	Callee	startData -> Attribute
>16813	PtrMemberAccess	startData -> Attribute
>16814	Identifier	Attribute
>16815	Identifier	startData
>16816	Callee	strtof
>16817	Identifier	strtof
>16818	Identifier	read
>16819	Identifier	read
>16820	IdentifierDeclType	float
>16821	Condition	 
>16822	CallExpression	startData -> Attribute ( \"h\" )
>16823	ArgumentList	\"h\"
>16824	Argument	\"h\"
>16825	PrimaryExpression	\"h\"
>16826	Callee	startData -> Attribute
>16827	PtrMemberAccess	startData -> Attribute
>16828	Identifier	Attribute
>16829	Identifier	startData
>16830	IfStatement	if ( startData -> Attribute ( \"intFlags\" ) )
>16831	CompoundStatement	 
>16832	ForStatement	for ( int i = 0 ; i < numFlags ; i ++ )
>16833	CompoundStatement	 
>16834	ExpressionStatement	 
>16835	ShiftExpression	is >> intFlags [ i ]
>16836	ArrayIndexing	intFlags [ i ]
>16837	Identifier	i
>16838	Identifier	intFlags
>16839	Identifier	is
>16840	IncDecOp	 
>16841	IncDec	++
>16842	Identifier	i
>16843	Condition	 
>16844	RelationalExpression	i < numFlags
>16845	Identifier	numFlags
>16846	Identifier	i
>16847	ForInit	 
>16848	IdentifierDeclStatement	int i = 0 ;
>16849	IdentifierDecl	i = 0
>16850	AssignmentExpr	i = 0
>16851	PrimaryExpression	0
>16852	Identifier	i
>16853	Identifier	i
>16854	IdentifierDeclType	int
>16855	IfStatement	if ( numFlags > MAX_FLAGS )
>16856	ExpressionStatement	 
>16857	AssignmentExpr	numFlags = MAX_FLAGS
>16858	Identifier	MAX_FLAGS
>16859	Identifier	numFlags
>16860	Condition	 
>16861	RelationalExpression	numFlags > MAX_FLAGS
>16862	Identifier	MAX_FLAGS
>16863	Identifier	numFlags
>16864	ExpressionStatement	 
>16865	ShiftExpression	is >> numFlags
>16866	Identifier	numFlags
>16867	Identifier	is
>16868	IdentifierDeclStatement	 
>16869	IdentifierDecl	numFlags
>16870	Identifier	numFlags
>16871	IdentifierDeclType	int
>16872	IdentifierDeclStatement	 
>16873	IdentifierDecl	is ( std 
>16874	CallExpression	std 
>16875	ArgumentList	startData -> Attribute ( \"intFlags\" )
>16876	Argument	startData -> Attribute ( \"intFlags\" )
>16877	CallExpression	startData -> Attribute ( \"intFlags\" )
>16878	ArgumentList	\"intFlags\"
>16879	Argument	\"intFlags\"
>16880	PrimaryExpression	\"intFlags\"
>16881	Callee	startData -> Attribute
>16882	PtrMemberAccess	startData -> Attribute
>16883	Identifier	Attribute
>16884	Identifier	startData
>16885	Callee	std 
>16886	Identifier	std 
>16887	Identifier	is
>16888	IdentifierDeclType	std 
>16889	Condition	 
>16890	CallExpression	startData -> Attribute ( \"intFlags\" )
>16891	ArgumentList	\"intFlags\"
>16892	Argument	\"intFlags\"
>16893	PrimaryExpression	\"intFlags\"
>16894	Callee	startData -> Attribute
>16895	PtrMemberAccess	startData -> Attribute
>16896	Identifier	Attribute
>16897	Identifier	startData
>16898	IfStatement	if ( startData -> Attribute ( \"formUpgrades\" ) )
>16899	CompoundStatement	 
>16900	WhileStatement	while ( is >> v )
>16901	CompoundStatement	 
>16902	ExpressionStatement	 
>16903	CallExpression	learnFormUpgrade ( FormUpgradeType ( v ) )
>16904	ArgumentList	FormUpgradeType ( v )
>16905	Argument	FormUpgradeType ( v )
>16906	CallExpression	FormUpgradeType ( v )
>16907	ArgumentList	v
>16908	Argument	v
>16909	Identifier	v
>16910	Callee	FormUpgradeType
>16911	Identifier	FormUpgradeType
>16912	Callee	learnFormUpgrade
>16913	Identifier	learnFormUpgrade
>16914	Condition	 
>16915	ShiftExpression	is >> v
>16916	Identifier	v
>16917	Identifier	is
>16918	IdentifierDeclStatement	 
>16919	IdentifierDecl	v = 0
>16920	AssignmentExpr	v = 0
>16921	PrimaryExpression	0
>16922	Identifier	v
>16923	Identifier	v
>16924	IdentifierDeclType	int
>16925	IdentifierDeclStatement	 
>16926	IdentifierDecl	is ( std 
>16927	CallExpression	std 
>16928	ArgumentList	startData -> Attribute ( \"formUpgrades\" )
>16929	Argument	startData -> Attribute ( \"formUpgrades\" )
>16930	CallExpression	startData -> Attribute ( \"formUpgrades\" )
>16931	ArgumentList	\"formUpgrades\"
>16932	Argument	\"formUpgrades\"
>16933	PrimaryExpression	\"formUpgrades\"
>16934	Callee	startData -> Attribute
>16935	PtrMemberAccess	startData -> Attribute
>16936	Identifier	Attribute
>16937	Identifier	startData
>16938	Callee	std 
>16939	Identifier	std 
>16940	Identifier	is
>16941	IdentifierDeclType	std 
>16942	Condition	 
>16943	CallExpression	startData -> Attribute ( \"formUpgrades\" )
>16944	ArgumentList	\"formUpgrades\"
>16945	Argument	\"formUpgrades\"
>16946	PrimaryExpression	\"formUpgrades\"
>16947	Callee	startData -> Attribute
>16948	PtrMemberAccess	startData -> Attribute
>16949	Identifier	Attribute
>16950	Identifier	startData
>16951	IfStatement	if ( startData -> Attribute ( \"songs\" ) )
>16952	CompoundStatement	 
>16953	WhileStatement	while ( is >> v )
>16954	CompoundStatement	 
>16955	ExpressionStatement	 
>16956	AssignmentExpr	knowsSong [ v ] = true
>16957	Identifier	true
>16958	ArrayIndexing	knowsSong [ v ]
>16959	Identifier	v
>16960	Identifier	knowsSong
>16961	Condition	 
>16962	ShiftExpression	is >> v
>16963	Identifier	v
>16964	Identifier	is
>16965	IdentifierDeclStatement	 
>16966	IdentifierDecl	v = 0
>16967	AssignmentExpr	v = 0
>16968	PrimaryExpression	0
>16969	Identifier	v
>16970	Identifier	v
>16971	IdentifierDeclType	int
>16972	IdentifierDeclStatement	 
>16973	IdentifierDecl	is ( std 
>16974	CallExpression	std 
>16975	ArgumentList	startData -> Attribute ( \"songs\" )
>16976	Argument	startData -> Attribute ( \"songs\" )
>16977	CallExpression	startData -> Attribute ( \"songs\" )
>16978	ArgumentList	\"songs\"
>16979	Argument	\"songs\"
>16980	PrimaryExpression	\"songs\"
>16981	Callee	startData -> Attribute
>16982	PtrMemberAccess	startData -> Attribute
>16983	Identifier	Attribute
>16984	Identifier	startData
>16985	Callee	std 
>16986	Identifier	std 
>16987	Identifier	is
>16988	IdentifierDeclType	std 
>16989	Condition	 
>16990	CallExpression	startData -> Attribute ( \"songs\" )
>16991	ArgumentList	\"songs\"
>16992	Argument	\"songs\"
>16993	PrimaryExpression	\"songs\"
>16994	Callee	startData -> Attribute
>16995	PtrMemberAccess	startData -> Attribute
>16996	Identifier	Attribute
>16997	Identifier	startData
>16998	IfStatement	if ( startData -> Attribute ( \"rec\" ) )
>16999	CompoundStatement	 
>17000	ForStatement	for ( int i = 0 ; i < recipes . size ( ) ; i ++ )
>17001	CompoundStatement	 
>17002	IfStatement	if ( known )
>17003	ExpressionStatement	 
>17004	CallExpression	recipes [ i ] . learn ( )
>17005	ArgumentList	 
>17006	Callee	recipes [ i ] . learn
>17007	MemberAccess	recipes [ i ] . learn
>17008	Identifier	learn
>17009	ArrayIndexing	recipes [ i ]
>17010	Identifier	i
>17011	Identifier	recipes
>17012	Condition	 
>17013	Identifier	known
>17014	ExpressionStatement	 
>17015	ShiftExpression	is >> known
>17016	Identifier	known
>17017	Identifier	is
>17018	IdentifierDeclStatement	 
>17019	IdentifierDecl	known = false
>17020	AssignmentExpr	known = false
>17021	Identifier	false
>17022	Identifier	false
>17023	Identifier	known
>17024	IdentifierDeclType	bool
>17025	IncDecOp	 
>17026	IncDec	++
>17027	Identifier	i
>17028	Condition	 
>17029	RelationalExpression	i < recipes . size ( )
>17030	CallExpression	recipes . size ( )
>17031	ArgumentList	 
>17032	Callee	recipes . size
>17033	MemberAccess	recipes . size
>17034	Identifier	size
>17035	Identifier	recipes
>17036	Identifier	i
>17037	ForInit	 
>17038	IdentifierDeclStatement	int i = 0 ;
>17039	IdentifierDecl	i = 0
>17040	AssignmentExpr	i = 0
>17041	PrimaryExpression	0
>17042	Identifier	i
>17043	Identifier	i
>17044	IdentifierDeclType	int
>17045	IdentifierDeclStatement	 
>17046	IdentifierDecl	is ( startData -> Attribute ( \"rec\" ) )
>17047	CallExpression	startData -> Attribute ( \"rec\" )
>17048	ArgumentList	\"rec\"
>17049	Argument	\"rec\"
>17050	PrimaryExpression	\"rec\"
>17051	Callee	startData -> Attribute
>17052	PtrMemberAccess	startData -> Attribute
>17053	Identifier	Attribute
>17054	Identifier	startData
>17055	Identifier	is
>17056	IdentifierDeclType	std 
>17057	Condition	 
>17058	CallExpression	startData -> Attribute ( \"rec\" )
>17059	ArgumentList	\"rec\"
>17060	Argument	\"rec\"
>17061	PrimaryExpression	\"rec\"
>17062	Callee	startData -> Attribute
>17063	PtrMemberAccess	startData -> Attribute
>17064	Identifier	Attribute
>17065	Identifier	startData
>17066	IfStatement	if ( startData -> Attribute ( \"ingrNames\" ) )
>17067	ElseStatement	else
>17068	IfStatement	if ( startData -> Attribute ( \"ingr\" ) )
>17069	CompoundStatement	 
>17070	WhileStatement	while ( is >> idx )
>17071	CompoundStatement	 
>17072	IfStatement	if ( data )
>17073	CompoundStatement	 
>17074	ExpressionStatement	 
>17075	CallExpression	pickupIngredient ( data , amount , false )
>17076	ArgumentList	data
>17077	Argument	false
>17078	Identifier	false
>17079	Argument	amount
>17080	Identifier	amount
>17081	Argument	data
>17082	Identifier	data
>17083	Callee	pickupIngredient
>17084	Identifier	pickupIngredient
>17085	ExpressionStatement	 
>17086	AssignmentExpr	data -> amount = 0
>17087	PrimaryExpression	0
>17088	PtrMemberAccess	data -> amount
>17089	Identifier	amount
>17090	Identifier	data
>17091	Condition	 
>17092	Identifier	data
>17093	IdentifierDeclStatement	 
>17094	IdentifierDecl	* data = getIngredientDataByIndex ( idx )
>17095	AssignmentExpr	* data = getIngredientDataByIndex ( idx )
>17096	CallExpression	getIngredientDataByIndex ( idx )
>17097	ArgumentList	idx
>17098	Argument	idx
>17099	Identifier	idx
>17100	Callee	getIngredientDataByIndex
>17101	Identifier	getIngredientDataByIndex
>17102	Identifier	data
>17103	Identifier	data
>17104	IdentifierDeclType	IngredientData *
>17105	ExpressionStatement	 
>17106	ShiftExpression	is >> amount
>17107	Identifier	amount
>17108	Identifier	is
>17109	IdentifierDeclStatement	 
>17110	IdentifierDecl	amount = 0
>17111	AssignmentExpr	amount = 0
>17112	PrimaryExpression	0
>17113	Identifier	amount
>17114	Identifier	amount
>17115	IdentifierDeclType	int
>17116	Condition	 
>17117	ShiftExpression	is >> idx
>17118	Identifier	idx
>17119	Identifier	is
>17120	IdentifierDeclStatement	 
>17121	IdentifierDecl	idx
>17122	Identifier	idx
>17123	IdentifierDeclType	int
>17124	IdentifierDeclStatement	 
>17125	IdentifierDecl	is ( startData -> Attribute ( \"ingr\" ) )
>17126	CallExpression	startData -> Attribute ( \"ingr\" )
>17127	ArgumentList	\"ingr\"
>17128	Argument	\"ingr\"
>17129	PrimaryExpression	\"ingr\"
>17130	Callee	startData -> Attribute
>17131	PtrMemberAccess	startData -> Attribute
>17132	Identifier	Attribute
>17133	Identifier	startData
>17134	Identifier	is
>17135	IdentifierDeclType	std 
>17136	Condition	 
>17137	CallExpression	startData -> Attribute ( \"ingr\" )
>17138	ArgumentList	\"ingr\"
>17139	Argument	\"ingr\"
>17140	PrimaryExpression	\"ingr\"
>17141	Callee	startData -> Attribute
>17142	PtrMemberAccess	startData -> Attribute
>17143	Identifier	Attribute
>17144	Identifier	startData
>17145	CompoundStatement	 
>17146	WhileStatement	while ( is >> name )
>17147	CompoundStatement	 
>17148	IfStatement	if ( data )
>17149	CompoundStatement	 
>17150	ExpressionStatement	 
>17151	CallExpression	pickupIngredient ( data , amount , false )
>17152	ArgumentList	data
>17153	Argument	false
>17154	Identifier	false
>17155	Argument	amount
>17156	Identifier	amount
>17157	Argument	data
>17158	Identifier	data
>17159	Callee	pickupIngredient
>17160	Identifier	pickupIngredient
>17161	ExpressionStatement	 
>17162	AssignmentExpr	data -> amount = 0
>17163	PrimaryExpression	0
>17164	PtrMemberAccess	data -> amount
>17165	Identifier	amount
>17166	Identifier	data
>17167	Condition	 
>17168	Identifier	data
>17169	IdentifierDeclStatement	 
>17170	IdentifierDecl	* data = getIngredientDataByName ( name )
>17171	AssignmentExpr	* data = getIngredientDataByName ( name )
>17172	CallExpression	getIngredientDataByName ( name )
>17173	ArgumentList	name
>17174	Argument	name
>17175	Identifier	name
>17176	Callee	getIngredientDataByName
>17177	Identifier	getIngredientDataByName
>17178	Identifier	data
>17179	Identifier	data
>17180	IdentifierDeclType	IngredientData *
>17181	ExpressionStatement	 
>17182	ShiftExpression	is >> amount
>17183	Identifier	amount
>17184	Identifier	is
>17185	IdentifierDeclStatement	 
>17186	IdentifierDecl	amount = 0
>17187	AssignmentExpr	amount = 0
>17188	PrimaryExpression	0
>17189	Identifier	amount
>17190	Identifier	amount
>17191	IdentifierDeclType	int
>17192	Condition	 
>17193	ShiftExpression	is >> name
>17194	Identifier	name
>17195	Identifier	is
>17196	IdentifierDeclStatement	 
>17197	IdentifierDecl	name
>17198	Identifier	name
>17199	IdentifierDeclType	std 
>17200	IdentifierDeclStatement	 
>17201	IdentifierDecl	is ( startData -> Attribute ( \"ingrNames\" ) )
>17202	CallExpression	startData -> Attribute ( \"ingrNames\" )
>17203	ArgumentList	\"ingrNames\"
>17204	Argument	\"ingrNames\"
>17205	PrimaryExpression	\"ingrNames\"
>17206	Callee	startData -> Attribute
>17207	PtrMemberAccess	startData -> Attribute
>17208	Identifier	Attribute
>17209	Identifier	startData
>17210	Identifier	is
>17211	IdentifierDeclType	std 
>17212	Condition	 
>17213	CallExpression	startData -> Attribute ( \"ingrNames\" )
>17214	ArgumentList	\"ingrNames\"
>17215	Argument	\"ingrNames\"
>17216	PrimaryExpression	\"ingrNames\"
>17217	Callee	startData -> Attribute
>17218	PtrMemberAccess	startData -> Attribute
>17219	Identifier	Attribute
>17220	Identifier	startData
>17221	IfStatement	if ( startData -> Attribute ( \"form\" ) )
>17222	CompoundStatement	 
>17223	ExpressionStatement	 
>17224	AssignmentExpr	dsq -> continuity . form = FormType ( atoi ( startData -> Attribute ( \"form\" ) ) )
>17225	CallExpression	FormType ( atoi ( startData -> Attribute ( \"form\" ) ) )
>17226	ArgumentList	atoi ( startData -> Attribute ( \"form\" ) )
>17227	Argument	atoi ( startData -> Attribute ( \"form\" ) )
>17228	CallExpression	atoi ( startData -> Attribute ( \"form\" ) )
>17229	ArgumentList	startData -> Attribute ( \"form\" )
>17230	Argument	startData -> Attribute ( \"form\" )
>17231	CallExpression	startData -> Attribute ( \"form\" )
>17232	ArgumentList	\"form\"
>17233	Argument	\"form\"
>17234	PrimaryExpression	\"form\"
>17235	Callee	startData -> Attribute
>17236	PtrMemberAccess	startData -> Attribute
>17237	Identifier	Attribute
>17238	Identifier	startData
>17239	Callee	atoi
>17240	Identifier	atoi
>17241	Callee	FormType
>17242	Identifier	FormType
>17243	MemberAccess	dsq -> continuity . form
>17244	Identifier	form
>17245	PtrMemberAccess	dsq -> continuity
>17246	Identifier	continuity
>17247	Identifier	dsq
>17248	Condition	 
>17249	CallExpression	startData -> Attribute ( \"form\" )
>17250	ArgumentList	\"form\"
>17251	Argument	\"form\"
>17252	PrimaryExpression	\"form\"
>17253	Callee	startData -> Attribute
>17254	PtrMemberAccess	startData -> Attribute
>17255	Identifier	Attribute
>17256	Identifier	startData
>17257	IfStatement	if ( startData -> Attribute ( \"naijaModel\" ) )
>17258	CompoundStatement	 
>17259	Condition	 
>17260	CallExpression	startData -> Attribute ( \"naijaModel\" )
>17261	ArgumentList	\"naijaModel\"
>17262	Argument	\"naijaModel\"
>17263	PrimaryExpression	\"naijaModel\"
>17264	Callee	startData -> Attribute
>17265	PtrMemberAccess	startData -> Attribute
>17266	Identifier	Attribute
>17267	Identifier	startData
>17268	IfStatement	if ( startData -> Attribute ( \"exp\" ) )
>17269	ExpressionStatement	 
>17270	AssignmentExpr	exp = atoi ( startData -> Attribute ( \"exp\" ) )
>17271	CallExpression	atoi ( startData -> Attribute ( \"exp\" ) )
>17272	ArgumentList	startData -> Attribute ( \"exp\" )
>17273	Argument	startData -> Attribute ( \"exp\" )
>17274	CallExpression	startData -> Attribute ( \"exp\" )
>17275	ArgumentList	\"exp\"
>17276	Argument	\"exp\"
>17277	PrimaryExpression	\"exp\"
>17278	Callee	startData -> Attribute
>17279	PtrMemberAccess	startData -> Attribute
>17280	Identifier	Attribute
>17281	Identifier	startData
>17282	Callee	atoi
>17283	Identifier	atoi
>17284	Identifier	exp
>17285	Condition	 
>17286	CallExpression	startData -> Attribute ( \"exp\" )
>17287	ArgumentList	\"exp\"
>17288	Argument	\"exp\"
>17289	PrimaryExpression	\"exp\"
>17290	Callee	startData -> Attribute
>17291	PtrMemberAccess	startData -> Attribute
>17292	Identifier	Attribute
>17293	Identifier	startData
>17294	ExpressionStatement	 
>17295	AssignmentExpr	dsq -> game -> positionToAvatar = Vector ( x , y )
>17296	CallExpression	Vector ( x , y )
>17297	ArgumentList	x
>17298	Argument	y
>17299	Identifier	y
>17300	Argument	x
>17301	Identifier	x
>17302	Callee	Vector
>17303	Identifier	Vector
>17304	PtrMemberAccess	dsq -> game -> positionToAvatar
>17305	Identifier	positionToAvatar
>17306	PtrMemberAccess	dsq -> game
>17307	Identifier	game
>17308	Identifier	dsq
>17309	IdentifierDeclStatement	 
>17310	IdentifierDecl	y = atoi ( startData -> Attribute ( \"y\" ) )
>17311	AssignmentExpr	y = atoi ( startData -> Attribute ( \"y\" ) )
>17312	CallExpression	atoi ( startData -> Attribute ( \"y\" ) )
>17313	ArgumentList	startData -> Attribute ( \"y\" )
>17314	Argument	startData -> Attribute ( \"y\" )
>17315	CallExpression	startData -> Attribute ( \"y\" )
>17316	ArgumentList	\"y\"
>17317	Argument	\"y\"
>17318	PrimaryExpression	\"y\"
>17319	Callee	startData -> Attribute
>17320	PtrMemberAccess	startData -> Attribute
>17321	Identifier	Attribute
>17322	Identifier	startData
>17323	Callee	atoi
>17324	Identifier	atoi
>17325	Identifier	y
>17326	Identifier	y
>17327	IdentifierDeclType	int
>17328	IdentifierDeclStatement	 
>17329	IdentifierDecl	x = atoi ( startData -> Attribute ( \"x\" ) )
>17330	AssignmentExpr	x = atoi ( startData -> Attribute ( \"x\" ) )
>17331	CallExpression	atoi ( startData -> Attribute ( \"x\" ) )
>17332	ArgumentList	startData -> Attribute ( \"x\" )
>17333	Argument	startData -> Attribute ( \"x\" )
>17334	CallExpression	startData -> Attribute ( \"x\" )
>17335	ArgumentList	\"x\"
>17336	Argument	\"x\"
>17337	PrimaryExpression	\"x\"
>17338	Callee	startData -> Attribute
>17339	PtrMemberAccess	startData -> Attribute
>17340	Identifier	Attribute
>17341	Identifier	startData
>17342	Callee	atoi
>17343	Identifier	atoi
>17344	Identifier	x
>17345	Identifier	x
>17346	IdentifierDeclType	int
>17347	Condition	 
>17348	Identifier	startData
>17349	WhileStatement	while ( e2 )
>17350	CompoundStatement	 
>17351	ExpressionStatement	 
>17352	AssignmentExpr	e2 = e2 -> NextSiblingElement ( \"StringFlag\" )
>17353	CallExpression	e2 -> NextSiblingElement ( \"StringFlag\" )
>17354	ArgumentList	\"StringFlag\"
>17355	Argument	\"StringFlag\"
>17356	PrimaryExpression	\"StringFlag\"
>17357	Callee	e2 -> NextSiblingElement
>17358	PtrMemberAccess	e2 -> NextSiblingElement
>17359	Identifier	NextSiblingElement
>17360	Identifier	e2
>17361	Identifier	e2
>17362	ExpressionStatement	 
>17363	CallExpression	dsq -> continuity . setStringFlag ( e2 -> Attribute ( \"name\" ) , e2 -> Attribute ( \"value\" ) )
>17364	ArgumentList	e2 -> Attribute ( \"name\" )
>17365	Argument	e2 -> Attribute ( \"value\" )
>17366	CallExpression	e2 -> Attribute ( \"value\" )
>17367	ArgumentList	\"value\"
>17368	Argument	\"value\"
>17369	PrimaryExpression	\"value\"
>17370	Callee	e2 -> Attribute
>17371	PtrMemberAccess	e2 -> Attribute
>17372	Identifier	Attribute
>17373	Identifier	e2
>17374	Argument	e2 -> Attribute ( \"name\" )
>17375	CallExpression	e2 -> Attribute ( \"name\" )
>17376	ArgumentList	\"name\"
>17377	Argument	\"name\"
>17378	PrimaryExpression	\"name\"
>17379	Callee	e2 -> Attribute
>17380	PtrMemberAccess	e2 -> Attribute
>17381	Identifier	Attribute
>17382	Identifier	e2
>17383	Callee	dsq -> continuity . setStringFlag
>17384	MemberAccess	dsq -> continuity . setStringFlag
>17385	Identifier	setStringFlag
>17386	PtrMemberAccess	dsq -> continuity
>17387	Identifier	continuity
>17388	Identifier	dsq
>17389	Condition	 
>17390	Identifier	e2
>17391	IdentifierDeclStatement	 
>17392	IdentifierDecl	* e2 = doc . FirstChildElement ( \"StringFlag\" )
>17393	AssignmentExpr	* e2 = doc . FirstChildElement ( \"StringFlag\" )
>17394	CallExpression	doc . FirstChildElement ( \"StringFlag\" )
>17395	ArgumentList	\"StringFlag\"
>17396	Argument	\"StringFlag\"
>17397	PrimaryExpression	\"StringFlag\"
>17398	Callee	doc . FirstChildElement
>17399	MemberAccess	doc . FirstChildElement
>17400	Identifier	FirstChildElement
>17401	Identifier	doc
>17402	Identifier	e2
>17403	Identifier	e2
>17404	IdentifierDeclType	XMLElement *
>17405	IfStatement	if ( s )
>17406	CompoundStatement	 
>17407	ExpressionStatement	 
>17408	ShiftExpression	is >> story
>17409	Identifier	story
>17410	Identifier	is
>17411	IdentifierDeclStatement	 
>17412	IdentifierDecl	is ( s -> Attribute ( \"v\" ) )
>17413	CallExpression	s -> Attribute ( \"v\" )
>17414	ArgumentList	\"v\"
>17415	Argument	\"v\"
>17416	PrimaryExpression	\"v\"
>17417	Callee	s -> Attribute
>17418	PtrMemberAccess	s -> Attribute
>17419	Identifier	Attribute
>17420	Identifier	s
>17421	Identifier	is
>17422	IdentifierDeclType	std 
>17423	Condition	 
>17424	Identifier	s
>17425	IdentifierDeclStatement	 
>17426	IdentifierDecl	* s = doc . FirstChildElement ( \"Story\" )
>17427	AssignmentExpr	* s = doc . FirstChildElement ( \"Story\" )
>17428	CallExpression	doc . FirstChildElement ( \"Story\" )
>17429	ArgumentList	\"Story\"
>17430	Argument	\"Story\"
>17431	PrimaryExpression	\"Story\"
>17432	Callee	doc . FirstChildElement
>17433	MemberAccess	doc . FirstChildElement
>17434	Identifier	FirstChildElement
>17435	Identifier	doc
>17436	Identifier	s
>17437	Identifier	s
>17438	IdentifierDeclType	XMLElement *
>17439	IfStatement	if ( worldMap )
>17440	CompoundStatement	 
>17441	IfStatement	if ( worldMap -> Attribute ( \"va\" ) && dsq -> continuity . worldMap . getNumWorldMapTiles ( ) )
>17442	CompoundStatement	 
>17443	WhileStatement	while ( is >> idx )
>17444	CompoundStatement	 
>17445	ExpressionStatement	 
>17446	CallExpression	tile -> stringToData ( is )
>17447	ArgumentList	is
>17448	Argument	is
>17449	Identifier	is
>17450	Callee	tile -> stringToData
>17451	PtrMemberAccess	tile -> stringToData
>17452	Identifier	stringToData
>17453	Identifier	tile
>17454	IfStatement	if ( ! tile )
>17455	CompoundStatement	 
>17456	ExpressionStatement	 
>17457	AssignmentExpr	tile = & dummy
>17458	UnaryOp	& dummy
>17459	Identifier	dummy
>17460	UnaryOperator	&
>17461	Identifier	tile
>17462	ExpressionStatement	 
>17463	CallExpression	debugLog ( os . str ( ) )
>17464	ArgumentList	os . str ( )
>17465	Argument	os . str ( )
>17466	CallExpression	os . str ( )
>17467	ArgumentList	 
>17468	Callee	os . str
>17469	MemberAccess	os . str
>17470	Identifier	str
>17471	Identifier	os
>17472	Callee	debugLog
>17473	Identifier	debugLog
>17474	ExpressionStatement	 
>17475	ShiftExpression	os << \"tile dummy
>17476	ShiftExpression	\"tile dummy
>17477	Identifier	idx
>17478	PrimaryExpression	\"tile dummy
>17479	Identifier	os
>17480	IdentifierDeclStatement	 
>17481	IdentifierDecl	os
>17482	Identifier	os
>17483	IdentifierDeclType	std 
>17484	Condition	 
>17485	UnaryOp	! tile
>17486	Identifier	tile
>17487	UnaryOperator	!
>17488	IdentifierDeclStatement	 
>17489	IdentifierDecl	* tile = dsq -> continuity . worldMap . getWorldMapTile ( idx )
>17490	AssignmentExpr	* tile = dsq -> continuity . worldMap . getWorldMapTile ( idx )
>17491	CallExpression	dsq -> continuity . worldMap . getWorldMapTile ( idx )
>17492	ArgumentList	idx
>17493	Argument	idx
>17494	Identifier	idx
>17495	Callee	dsq -> continuity . worldMap . getWorldMapTile
>17496	MemberAccess	dsq -> continuity . worldMap . getWorldMapTile
>17497	Identifier	getWorldMapTile
>17498	MemberAccess	dsq -> continuity . worldMap
>17499	Identifier	worldMap
>17500	PtrMemberAccess	dsq -> continuity
>17501	Identifier	continuity
>17502	Identifier	dsq
>17503	Identifier	tile
>17504	Identifier	tile
>17505	IdentifierDeclType	WorldMapTile *
>17506	Condition	 
>17507	ShiftExpression	is >> idx
>17508	Identifier	idx
>17509	Identifier	is
>17510	IdentifierDeclStatement	 
>17511	IdentifierDecl	idx
>17512	Identifier	idx
>17513	IdentifierDeclType	int
>17514	IdentifierDeclStatement	 
>17515	IdentifierDecl	dummy
>17516	Identifier	dummy
>17517	IdentifierDeclType	WorldMapTile
>17518	IdentifierDeclStatement	 
>17519	IdentifierDecl	is ( worldMap -> Attribute ( \"va\" ) )
>17520	CallExpression	worldMap -> Attribute ( \"va\" )
>17521	ArgumentList	\"va\"
>17522	Argument	\"va\"
>17523	PrimaryExpression	\"va\"
>17524	Callee	worldMap -> Attribute
>17525	PtrMemberAccess	worldMap -> Attribute
>17526	Identifier	Attribute
>17527	Identifier	worldMap
>17528	Identifier	is
>17529	IdentifierDeclType	std 
>17530	Condition	 
>17531	AndExpression	worldMap -> Attribute ( \"va\" ) && dsq -> continuity . worldMap . getNumWorldMapTiles ( )
>17532	CallExpression	dsq -> continuity . worldMap . getNumWorldMapTiles ( )
>17533	ArgumentList	 
>17534	Callee	dsq -> continuity . worldMap . getNumWorldMapTiles
>17535	MemberAccess	dsq -> continuity . worldMap . getNumWorldMapTiles
>17536	Identifier	getNumWorldMapTiles
>17537	MemberAccess	dsq -> continuity . worldMap
>17538	Identifier	worldMap
>17539	PtrMemberAccess	dsq -> continuity
>17540	Identifier	continuity
>17541	Identifier	dsq
>17542	CallExpression	worldMap -> Attribute ( \"va\" )
>17543	ArgumentList	\"va\"
>17544	Argument	\"va\"
>17545	PrimaryExpression	\"va\"
>17546	Callee	worldMap -> Attribute
>17547	PtrMemberAccess	worldMap -> Attribute
>17548	Identifier	Attribute
>17549	Identifier	worldMap
>17550	IfStatement	if ( worldMap -> Attribute ( \"b\" ) )
>17551	CompoundStatement	 
>17552	WhileStatement	while ( is >> idx )
>17553	CompoundStatement	 
>17554	ExpressionStatement	 
>17555	CallExpression	dsq -> continuity . worldMap . revealMapIndex ( idx )
>17556	ArgumentList	idx
>17557	Argument	idx
>17558	Identifier	idx
>17559	Callee	dsq -> continuity . worldMap . revealMapIndex
>17560	MemberAccess	dsq -> continuity . worldMap . revealMapIndex
>17561	Identifier	revealMapIndex
>17562	MemberAccess	dsq -> continuity . worldMap
>17563	Identifier	worldMap
>17564	PtrMemberAccess	dsq -> continuity
>17565	Identifier	continuity
>17566	Identifier	dsq
>17567	Condition	 
>17568	ShiftExpression	is >> idx
>17569	Identifier	idx
>17570	Identifier	is
>17571	IdentifierDeclStatement	 
>17572	IdentifierDecl	idx
>17573	Identifier	idx
>17574	IdentifierDeclType	int
>17575	IdentifierDeclStatement	 
>17576	IdentifierDecl	is ( s )
>17577	Identifier	s
>17578	Identifier	is
>17579	IdentifierDeclType	std 
>17580	IdentifierDeclStatement	 
>17581	IdentifierDecl	s = worldMap -> Attribute ( \"b\" )
>17582	AssignmentExpr	s = worldMap -> Attribute ( \"b\" )
>17583	CallExpression	worldMap -> Attribute ( \"b\" )
>17584	ArgumentList	\"b\"
>17585	Argument	\"b\"
>17586	PrimaryExpression	\"b\"
>17587	Callee	worldMap -> Attribute
>17588	PtrMemberAccess	worldMap -> Attribute
>17589	Identifier	Attribute
>17590	Identifier	worldMap
>17591	Identifier	s
>17592	Identifier	s
>17593	IdentifierDeclType	std 
>17594	Condition	 
>17595	CallExpression	worldMap -> Attribute ( \"b\" )
>17596	ArgumentList	\"b\"
>17597	Argument	\"b\"
>17598	PrimaryExpression	\"b\"
>17599	Callee	worldMap -> Attribute
>17600	PtrMemberAccess	worldMap -> Attribute
>17601	Identifier	Attribute
>17602	Identifier	worldMap
>17603	Condition	 
>17604	Identifier	worldMap
>17605	IdentifierDeclStatement	 
>17606	IdentifierDecl	* worldMap = doc . FirstChildElement ( \"WorldMap\" )
>17607	AssignmentExpr	* worldMap = doc . FirstChildElement ( \"WorldMap\" )
>17608	CallExpression	doc . FirstChildElement ( \"WorldMap\" )
>17609	ArgumentList	\"WorldMap\"
>17610	Argument	\"WorldMap\"
>17611	PrimaryExpression	\"WorldMap\"
>17612	Callee	doc . FirstChildElement
>17613	MemberAccess	doc . FirstChildElement
>17614	Identifier	FirstChildElement
>17615	Identifier	doc
>17616	Identifier	worldMap
>17617	Identifier	worldMap
>17618	IdentifierDeclType	XMLElement *
>17619	IfStatement	if ( gems )
>17620	CompoundStatement	 
>17621	IfStatement	if ( gems -> Attribute ( \"a\" ) )
>17622	ElseStatement	else
>17623	IfStatement	if ( gems -> Attribute ( \"b\" ) )
>17624	ElseStatement	else
>17625	IfStatement	if ( gems -> Attribute ( \"c\" ) )
>17626	ElseStatement	else
>17627	IfStatement	if ( gems -> Attribute ( \"d\" ) )
>17628	CompoundStatement	 
>17629	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>17630	CompoundStatement	 
>17631	ExpressionStatement	 
>17632	CallExpression	debugLog ( os . str ( ) )
>17633	ArgumentList	os . str ( )
>17634	Argument	os . str ( )
>17635	CallExpression	os . str ( )
>17636	ArgumentList	 
>17637	Callee	os . str
>17638	MemberAccess	os . str
>17639	Identifier	str
>17640	Identifier	os
>17641	Callee	debugLog
>17642	Identifier	debugLog
>17643	ExpressionStatement	 
>17644	ShiftExpression	os << \"Loading a Gem called [\" << g . name << \"] with userString [\" << g . userString << \"] pos (\" << \
>17645	ShiftExpression	\"Loading a Gem called [\" << g . name << \"] with userString [\" << g . userString << \"] pos (\" << g . \
>17646	ShiftExpression	g . name << \"] with userString [\" << g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . \
>17647		\"] with userString [\" << g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"type
>17648	ShiftExpression	g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"
>17649	ShiftExpression	\"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"
>17650	ShiftExpression	g . pos . x << \", \" << g . pos . y << \")\n\"
>17651	ShiftExpression	\", \" << g . pos . y << \")\n\"
>17652	ShiftExpression	g . pos . y << \")\n\"
>17653	PrimaryExpression	\")\n\"
>17654	MemberAccess	g . pos . y
>17655	Identifier	y
>17656	MemberAccess	g . pos
>17657	Identifier	pos
>17658	Identifier	g
>17659	PrimaryExpression	\", \"
>17660	MemberAccess	g . pos . x
>17661	Identifier	x
>17662	MemberAccess	g . pos
>17663	Identifier	pos
>17664	Identifier	g
>17665	PrimaryExpression	\"] pos (\"
>17666	MemberAccess	g . userString
>17667	Identifier	userString
>17668	Identifier	g
>17669	PrimaryExpression	\"] with userString [\"
>17670	MemberAccess	g . name
>17671	Identifier	name
>17672	Identifier	g
>17673	PrimaryExpression	\"Loading a Gem called [\"
>17674	Identifier	os
>17675	IdentifierDeclStatement	 
>17676	IdentifierDecl	os
>17677	Identifier	os
>17678	IdentifierDeclType	std 
>17679	ExpressionStatement	 
>17680	CallExpression	this -> gems . push_back ( g )
>17681	ArgumentList	g
>17682	Argument	g
>17683	Identifier	g
>17684	Callee	this -> gems . push_back
>17685	MemberAccess	this -> gems . push_back
>17686	Identifier	push_back
>17687	PtrMemberAccess	this -> gems
>17688	Identifier	gems
>17689	Identifier	this
>17690	ExpressionStatement	 
>17691	AssignmentExpr	g . userString = underscoresToSpaces ( g . userString )
>17692	CallExpression	underscoresToSpaces ( g . userString )
>17693	ArgumentList	g . userString
>17694	Argument	g . userString
>17695	MemberAccess	g . userString
>17696	Identifier	userString
>17697	Identifier	g
>17698	Callee	underscoresToSpaces
>17699	Identifier	underscoresToSpaces
>17700	MemberAccess	g . userString
>17701	Identifier	userString
>17702	Identifier	g
>17703	IfStatement	if ( hasUserString )
>17704	ExpressionStatement	 
>17705	ShiftExpression	is >> g . userString
>17706	MemberAccess	g . userString
>17707	Identifier	userString
>17708	Identifier	g
>17709	Identifier	is
>17710	Condition	 
>17711	Identifier	hasUserString
>17712	ExpressionStatement	 
>17713	ShiftExpression	is >> hasUserString
>17714	Identifier	hasUserString
>17715	Identifier	is
>17716	ExpressionStatement	 
>17717	ShiftExpression	is >> g . canMove
>17718	MemberAccess	g . canMove
>17719	Identifier	canMove
>17720	Identifier	g
>17721	Identifier	is
>17722	ExpressionStatement	 
>17723	ShiftExpression	is >> g . pos . x >> g . pos . y
>17724	ShiftExpression	g . pos . x >> g . pos . y
>17725	MemberAccess	g . pos . y
>17726	Identifier	y
>17727	MemberAccess	g . pos
>17728	Identifier	pos
>17729	Identifier	g
>17730	MemberAccess	g . pos . x
>17731	Identifier	x
>17732	MemberAccess	g . pos
>17733	Identifier	pos
>17734	Identifier	g
>17735	Identifier	is
>17736	IfStatement	if ( hasMapName )
>17737	ExpressionStatement	 
>17738	ShiftExpression	is >> g . mapName
>17739	MemberAccess	g . mapName
>17740	Identifier	mapName
>17741	Identifier	g
>17742	Identifier	is
>17743	Condition	 
>17744	Identifier	hasMapName
>17745	ExpressionStatement	 
>17746	ShiftExpression	is >> hasMapName
>17747	Identifier	hasMapName
>17748	Identifier	is
>17749	ExpressionStatement	 
>17750	ShiftExpression	is >> g . name
>17751	MemberAccess	g . name
>17752	Identifier	name
>17753	Identifier	g
>17754	Identifier	is
>17755	ExpressionStatement	 
>17756	AssignmentExpr	hasMapName = false
>17757	Identifier	false
>17758	Identifier	hasMapName
>17759	ExpressionStatement	 
>17760	AssignmentExpr	hasUserString = false
>17761	Identifier	false
>17762	Identifier	hasUserString
>17763	ExpressionStatement	 
>17764	AssignmentExpr	g . mapName = \"\"
>17765	PrimaryExpression	\"\"
>17766	MemberAccess	g . mapName
>17767	Identifier	mapName
>17768	Identifier	g
>17769	ExpressionStatement	 
>17770	AssignmentExpr	g . userString = \"\"
>17771	PrimaryExpression	\"\"
>17772	MemberAccess	g . userString
>17773	Identifier	userString
>17774	Identifier	g
>17775	ExpressionStatement	 
>17776	AssignmentExpr	g . canMove = false
>17777	Identifier	false
>17778	MemberAccess	g . canMove
>17779	Identifier	canMove
>17780	Identifier	g
>17781	ExpressionStatement	 
>17782	AssignmentExpr	g . pos = Vector ( 0 , 0 , 0 )
>17783	CallExpression	Vector ( 0 , 0 , 0 )
>17784	ArgumentList	0
>17785	Argument	0
>17786	PrimaryExpression	0
>17787	Argument	0
>17788	PrimaryExpression	0
>17789	Argument	0
>17790	PrimaryExpression	0
>17791	Callee	Vector
>17792	Identifier	Vector
>17793	MemberAccess	g . pos
>17794	Identifier	pos
>17795	Identifier	g
>17796	IncDecOp	 
>17797	IncDec	++
>17798	Identifier	i
>17799	Condition	 
>17800	RelationalExpression	i < num
>17801	Identifier	num
>17802	Identifier	i
>17803	ForInit	 
>17804	IdentifierDeclStatement	int i = 0 ;
>17805	IdentifierDecl	i = 0
>17806	AssignmentExpr	i = 0
>17807	PrimaryExpression	0
>17808	Identifier	i
>17809	Identifier	i
>17810	IdentifierDeclType	int
>17811	ExpressionStatement	 
>17812	CallExpression	debugLog ( os . str ( ) )
>17813	ArgumentList	os . str ( )
>17814	Argument	os . str ( )
>17815	CallExpression	os . str ( )
>17816	ArgumentList	 
>17817	Callee	os . str
>17818	MemberAccess	os . str
>17819	Identifier	str
>17820	Identifier	os
>17821	Callee	debugLog
>17822	Identifier	debugLog
>17823	ExpressionStatement	 
>17824	ShiftExpression	os << \"data
>17825	ShiftExpression	\"data
>17826	ShiftExpression	s << \"]\" << std 
>17827	ShiftExpression	\"]\" << std 
>17828	Identifier	std 
>17829	PrimaryExpression	\"]\"
>17830	Identifier	s
>17831	PrimaryExpression	\"data
>17832	Identifier	os
>17833	ExpressionStatement	 
>17834	ShiftExpression	os << \"continuity num
>17835	ShiftExpression	\"continuity num
>17836	ShiftExpression	num << \"]\" << std 
>17837	ShiftExpression	\"]\" << std 
>17838	Identifier	std 
>17839	PrimaryExpression	\"]\"
>17840	Identifier	num
>17841	PrimaryExpression	\"continuity num
>17842	Identifier	os
>17843	IdentifierDeclStatement	 
>17844	IdentifierDecl	os
>17845	Identifier	os
>17846	IdentifierDeclType	std 
>17847	IdentifierDeclStatement	 
>17848	IdentifierDecl	g
>17849	Identifier	g
>17850	IdentifierDeclType	GemData
>17851	IdentifierDeclStatement	 
>17852	IdentifierDecl	hasMapName = false
>17853	AssignmentExpr	hasMapName = false
>17854	Identifier	false
>17855	Identifier	false
>17856	Identifier	hasMapName
>17857	IdentifierDeclType	bool
>17858	IdentifierDeclStatement	 
>17859	IdentifierDecl	hasUserString = false
>17860	AssignmentExpr	hasUserString = false
>17861	Identifier	false
>17862	Identifier	false
>17863	Identifier	hasUserString
>17864	IdentifierDeclType	bool
>17865	ExpressionStatement	 
>17866	ShiftExpression	is >> num
>17867	Identifier	num
>17868	Identifier	is
>17869	IdentifierDeclStatement	 
>17870	IdentifierDecl	num = 0
>17871	AssignmentExpr	num = 0
>17872	PrimaryExpression	0
>17873	Identifier	num
>17874	Identifier	num
>17875	IdentifierDeclType	int
>17876	IdentifierDeclStatement	 
>17877	IdentifierDecl	is ( s )
>17878	Identifier	s
>17879	Identifier	is
>17880	IdentifierDeclType	std 
>17881	IdentifierDeclStatement	 
>17882	IdentifierDecl	s = gems -> Attribute ( \"d\" )
>17883	AssignmentExpr	s = gems -> Attribute ( \"d\" )
>17884	CallExpression	gems -> Attribute ( \"d\" )
>17885	ArgumentList	\"d\"
>17886	Argument	\"d\"
>17887	PrimaryExpression	\"d\"
>17888	Callee	gems -> Attribute
>17889	PtrMemberAccess	gems -> Attribute
>17890	Identifier	Attribute
>17891	Identifier	gems
>17892	Identifier	s
>17893	Identifier	s
>17894	IdentifierDeclType	std 
>17895	Condition	 
>17896	CallExpression	gems -> Attribute ( \"d\" )
>17897	ArgumentList	\"d\"
>17898	Argument	\"d\"
>17899	PrimaryExpression	\"d\"
>17900	Callee	gems -> Attribute
>17901	PtrMemberAccess	gems -> Attribute
>17902	Identifier	Attribute
>17903	Identifier	gems
>17904	CompoundStatement	 
>17905	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>17906	CompoundStatement	 
>17907	ExpressionStatement	 
>17908	CallExpression	debugLog ( os . str ( ) )
>17909	ArgumentList	os . str ( )
>17910	Argument	os . str ( )
>17911	CallExpression	os . str ( )
>17912	ArgumentList	 
>17913	Callee	os . str
>17914	MemberAccess	os . str
>17915	Identifier	str
>17916	Identifier	os
>17917	Callee	debugLog
>17918	Identifier	debugLog
>17919	ExpressionStatement	 
>17920	ShiftExpression	os << \"Loading a Gem called [\" << g . name << \"] with userString [\" << g . userString << \"] pos (\" << \
>17921	ShiftExpression	\"Loading a Gem called [\" << g . name << \"] with userString [\" << g . userString << \"] pos (\" << g . \
>17922	ShiftExpression	g . name << \"] with userString [\" << g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . \
>17923		\"] with userString [\" << g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"type
>17924	ShiftExpression	g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"
>17925	ShiftExpression	\"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"
>17926	ShiftExpression	g . pos . x << \", \" << g . pos . y << \")\n\"
>17927	ShiftExpression	\", \" << g . pos . y << \")\n\"
>17928	ShiftExpression	g . pos . y << \")\n\"
>17929	PrimaryExpression	\")\n\"
>17930	MemberAccess	g . pos . y
>17931	Identifier	y
>17932	MemberAccess	g . pos
>17933	Identifier	pos
>17934	Identifier	g
>17935	PrimaryExpression	\", \"
>17936	MemberAccess	g . pos . x
>17937	Identifier	x
>17938	MemberAccess	g . pos
>17939	Identifier	pos
>17940	Identifier	g
>17941	PrimaryExpression	\"] pos (\"
>17942	MemberAccess	g . userString
>17943	Identifier	userString
>17944	Identifier	g
>17945	PrimaryExpression	\"] with userString [\"
>17946	MemberAccess	g . name
>17947	Identifier	name
>17948	Identifier	g
>17949	PrimaryExpression	\"Loading a Gem called [\"
>17950	Identifier	os
>17951	IdentifierDeclStatement	 
>17952	IdentifierDecl	os
>17953	Identifier	os
>17954	IdentifierDeclType	std 
>17955	ExpressionStatement	 
>17956	CallExpression	this -> gems . push_back ( g )
>17957	ArgumentList	g
>17958	Argument	g
>17959	Identifier	g
>17960	Callee	this -> gems . push_back
>17961	MemberAccess	this -> gems . push_back
>17962	Identifier	push_back
>17963	PtrMemberAccess	this -> gems
>17964	Identifier	gems
>17965	Identifier	this
>17966	ExpressionStatement	 
>17967	AssignmentExpr	g . userString = underscoresToSpaces ( g . userString )
>17968	CallExpression	underscoresToSpaces ( g . userString )
>17969	ArgumentList	g . userString
>17970	Argument	g . userString
>17971	MemberAccess	g . userString
>17972	Identifier	userString
>17973	Identifier	g
>17974	Callee	underscoresToSpaces
>17975	Identifier	underscoresToSpaces
>17976	MemberAccess	g . userString
>17977	Identifier	userString
>17978	Identifier	g
>17979	IfStatement	if ( hasUserString )
>17980	ElseStatement	else
>17981	ExpressionStatement	 
>17982	AssignmentExpr	g . userString = \"\"
>17983	PrimaryExpression	\"\"
>17984	MemberAccess	g . userString
>17985	Identifier	userString
>17986	Identifier	g
>17987	ExpressionStatement	 
>17988	ShiftExpression	is >> g . userString
>17989	MemberAccess	g . userString
>17990	Identifier	userString
>17991	Identifier	g
>17992	Identifier	is
>17993	Condition	 
>17994	Identifier	hasUserString
>17995	ExpressionStatement	 
>17996	ShiftExpression	is >> hasUserString
>17997	Identifier	hasUserString
>17998	Identifier	is
>17999	ExpressionStatement	 
>18000	ShiftExpression	is >> g . canMove
>18001	MemberAccess	g . canMove
>18002	Identifier	canMove
>18003	Identifier	g
>18004	Identifier	is
>18005	ExpressionStatement	 
>18006	ShiftExpression	is >> g . pos . x >> g . pos . y
>18007	ShiftExpression	g . pos . x >> g . pos . y
>18008	MemberAccess	g . pos . y
>18009	Identifier	y
>18010	MemberAccess	g . pos
>18011	Identifier	pos
>18012	Identifier	g
>18013	MemberAccess	g . pos . x
>18014	Identifier	x
>18015	MemberAccess	g . pos
>18016	Identifier	pos
>18017	Identifier	g
>18018	Identifier	is
>18019	ExpressionStatement	 
>18020	ShiftExpression	is >> g . name
>18021	MemberAccess	g . name
>18022	Identifier	name
>18023	Identifier	g
>18024	Identifier	is
>18025	ExpressionStatement	 
>18026	AssignmentExpr	hasUserString = false
>18027	Identifier	false
>18028	Identifier	hasUserString
>18029	ExpressionStatement	 
>18030	AssignmentExpr	g . userString = \"\"
>18031	PrimaryExpression	\"\"
>18032	MemberAccess	g . userString
>18033	Identifier	userString
>18034	Identifier	g
>18035	ExpressionStatement	 
>18036	AssignmentExpr	g . canMove = false
>18037	Identifier	false
>18038	MemberAccess	g . canMove
>18039	Identifier	canMove
>18040	Identifier	g
>18041	ExpressionStatement	 
>18042	AssignmentExpr	g . pos = Vector ( 0 , 0 , 0 )
>18043	CallExpression	Vector ( 0 , 0 , 0 )
>18044	ArgumentList	0
>18045	Argument	0
>18046	PrimaryExpression	0
>18047	Argument	0
>18048	PrimaryExpression	0
>18049	Argument	0
>18050	PrimaryExpression	0
>18051	Callee	Vector
>18052	Identifier	Vector
>18053	MemberAccess	g . pos
>18054	Identifier	pos
>18055	Identifier	g
>18056	IncDecOp	 
>18057	IncDec	++
>18058	Identifier	i
>18059	Condition	 
>18060	RelationalExpression	i < num
>18061	Identifier	num
>18062	Identifier	i
>18063	ForInit	 
>18064	IdentifierDeclStatement	int i = 0 ;
>18065	IdentifierDecl	i = 0
>18066	AssignmentExpr	i = 0
>18067	PrimaryExpression	0
>18068	Identifier	i
>18069	Identifier	i
>18070	IdentifierDeclType	int
>18071	ExpressionStatement	 
>18072	CallExpression	debugLog ( os . str ( ) )
>18073	ArgumentList	os . str ( )
>18074	Argument	os . str ( )
>18075	CallExpression	os . str ( )
>18076	ArgumentList	 
>18077	Callee	os . str
>18078	MemberAccess	os . str
>18079	Identifier	str
>18080	Identifier	os
>18081	Callee	debugLog
>18082	Identifier	debugLog
>18083	ExpressionStatement	 
>18084	ShiftExpression	os << \"data
>18085	ShiftExpression	\"data
>18086	ShiftExpression	s << \"]\" << std 
>18087	ShiftExpression	\"]\" << std 
>18088	Identifier	std 
>18089	PrimaryExpression	\"]\"
>18090	Identifier	s
>18091	PrimaryExpression	\"data
>18092	Identifier	os
>18093	ExpressionStatement	 
>18094	ShiftExpression	os << \"continuity num
>18095	ShiftExpression	\"continuity num
>18096	ShiftExpression	num << \"]\" << std 
>18097	ShiftExpression	\"]\" << std 
>18098	Identifier	std 
>18099	PrimaryExpression	\"]\"
>18100	Identifier	num
>18101	PrimaryExpression	\"continuity num
>18102	Identifier	os
>18103	IdentifierDeclStatement	 
>18104	IdentifierDecl	os
>18105	Identifier	os
>18106	IdentifierDeclType	std 
>18107	IdentifierDeclStatement	 
>18108	IdentifierDecl	g
>18109	Identifier	g
>18110	IdentifierDeclType	GemData
>18111	IdentifierDeclStatement	 
>18112	IdentifierDecl	hasUserString = false
>18113	AssignmentExpr	hasUserString = false
>18114	Identifier	false
>18115	Identifier	false
>18116	Identifier	hasUserString
>18117	IdentifierDeclType	bool
>18118	ExpressionStatement	 
>18119	ShiftExpression	is >> num
>18120	Identifier	num
>18121	Identifier	is
>18122	IdentifierDeclStatement	 
>18123	IdentifierDecl	num = 0
>18124	AssignmentExpr	num = 0
>18125	PrimaryExpression	0
>18126	Identifier	num
>18127	Identifier	num
>18128	IdentifierDeclType	int
>18129	IdentifierDeclStatement	 
>18130	IdentifierDecl	is ( s )
>18131	Identifier	s
>18132	Identifier	is
>18133	IdentifierDeclType	std 
>18134	IdentifierDeclStatement	 
>18135	IdentifierDecl	s = gems -> Attribute ( \"c\" )
>18136	AssignmentExpr	s = gems -> Attribute ( \"c\" )
>18137	CallExpression	gems -> Attribute ( \"c\" )
>18138	ArgumentList	\"c\"
>18139	Argument	\"c\"
>18140	PrimaryExpression	\"c\"
>18141	Callee	gems -> Attribute
>18142	PtrMemberAccess	gems -> Attribute
>18143	Identifier	Attribute
>18144	Identifier	gems
>18145	Identifier	s
>18146	Identifier	s
>18147	IdentifierDeclType	std 
>18148	Condition	 
>18149	CallExpression	gems -> Attribute ( \"c\" )
>18150	ArgumentList	\"c\"
>18151	Argument	\"c\"
>18152	PrimaryExpression	\"c\"
>18153	Callee	gems -> Attribute
>18154	PtrMemberAccess	gems -> Attribute
>18155	Identifier	Attribute
>18156	Identifier	gems
>18157	CompoundStatement	 
>18158	WhileStatement	while ( is >> g . name )
>18159	CompoundStatement	 
>18160	ExpressionStatement	 
>18161	CallExpression	this -> gems . push_back ( g )
>18162	ArgumentList	g
>18163	Argument	g
>18164	Identifier	g
>18165	Callee	this -> gems . push_back
>18166	MemberAccess	this -> gems . push_back
>18167	Identifier	push_back
>18168	PtrMemberAccess	this -> gems
>18169	Identifier	gems
>18170	Identifier	this
>18171	ExpressionStatement	 
>18172	AssignmentExpr	g . userString = underscoresToSpaces ( g . userString )
>18173	CallExpression	underscoresToSpaces ( g . userString )
>18174	ArgumentList	g . userString
>18175	Argument	g . userString
>18176	MemberAccess	g . userString
>18177	Identifier	userString
>18178	Identifier	g
>18179	Callee	underscoresToSpaces
>18180	Identifier	underscoresToSpaces
>18181	MemberAccess	g . userString
>18182	Identifier	userString
>18183	Identifier	g
>18184	ExpressionStatement	 
>18185	CallExpression	debugLog ( os . str ( ) )
>18186	ArgumentList	os . str ( )
>18187	Argument	os . str ( )
>18188	CallExpression	os . str ( )
>18189	ArgumentList	 
>18190	Callee	os . str
>18191	MemberAccess	os . str
>18192	Identifier	str
>18193	Identifier	os
>18194	Callee	debugLog
>18195	Identifier	debugLog
>18196	ExpressionStatement	 
>18197	ShiftExpression	os << \"Loading a Gem called [\" << g . name << \"] with userString [\" << g . userString << \"] pos (\" << \
>18198	ShiftExpression	\"Loading a Gem called [\" << g . name << \"] with userString [\" << g . userString << \"] pos (\" << g . \
>18199	ShiftExpression	g . name << \"] with userString [\" << g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . \
>18200		\"] with userString [\" << g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"type
>18201	ShiftExpression	g . userString << \"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"
>18202	ShiftExpression	\"] pos (\" << g . pos . x << \", \" << g . pos . y << \")\n\"
>18203	ShiftExpression	g . pos . x << \", \" << g . pos . y << \")\n\"
>18204	ShiftExpression	\", \" << g . pos . y << \")\n\"
>18205	ShiftExpression	g . pos . y << \")\n\"
>18206	PrimaryExpression	\")\n\"
>18207	MemberAccess	g . pos . y
>18208	Identifier	y
>18209	MemberAccess	g . pos
>18210	Identifier	pos
>18211	Identifier	g
>18212	PrimaryExpression	\", \"
>18213	MemberAccess	g . pos . x
>18214	Identifier	x
>18215	MemberAccess	g . pos
>18216	Identifier	pos
>18217	Identifier	g
>18218	PrimaryExpression	\"] pos (\"
>18219	MemberAccess	g . userString
>18220	Identifier	userString
>18221	Identifier	g
>18222	PrimaryExpression	\"] with userString [\"
>18223	MemberAccess	g . name
>18224	Identifier	name
>18225	Identifier	g
>18226	PrimaryExpression	\"Loading a Gem called [\"
>18227	Identifier	os
>18228	IdentifierDeclStatement	 
>18229	IdentifierDecl	os
>18230	Identifier	os
>18231	IdentifierDeclType	std 
>18232	IfStatement	if ( hasUserString )
>18233	ExpressionStatement	 
>18234	ShiftExpression	is >> g . userString
>18235	MemberAccess	g . userString
>18236	Identifier	userString
>18237	Identifier	g
>18238	Identifier	is
>18239	Condition	 
>18240	Identifier	hasUserString
>18241	ExpressionStatement	 
>18242	ShiftExpression	is >> hasUserString
>18243	Identifier	hasUserString
>18244	Identifier	is
>18245	ExpressionStatement	 
>18246	ShiftExpression	is >> g . canMove
>18247	MemberAccess	g . canMove
>18248	Identifier	canMove
>18249	Identifier	g
>18250	Identifier	is
>18251	ExpressionStatement	 
>18252	ShiftExpression	is >> g . pos . x >> g . pos . y
>18253	ShiftExpression	g . pos . x >> g . pos . y
>18254	MemberAccess	g . pos . y
>18255	Identifier	y
>18256	MemberAccess	g . pos
>18257	Identifier	pos
>18258	Identifier	g
>18259	MemberAccess	g . pos . x
>18260	Identifier	x
>18261	MemberAccess	g . pos
>18262	Identifier	pos
>18263	Identifier	g
>18264	Identifier	is
>18265	ExpressionStatement	 
>18266	AssignmentExpr	hasUserString = false
>18267	Identifier	false
>18268	Identifier	hasUserString
>18269	Condition	 
>18270	ShiftExpression	is >> g . name
>18271	MemberAccess	g . name
>18272	Identifier	name
>18273	Identifier	g
>18274	Identifier	is
>18275	IdentifierDeclStatement	 
>18276	IdentifierDecl	hasUserString = false
>18277	AssignmentExpr	hasUserString = false
>18278	Identifier	false
>18279	Identifier	false
>18280	Identifier	hasUserString
>18281	IdentifierDeclType	bool
>18282	IdentifierDeclStatement	 
>18283	IdentifierDecl	g
>18284	Identifier	g
>18285	IdentifierDeclType	GemData
>18286	IdentifierDeclStatement	 
>18287	IdentifierDecl	is ( s )
>18288	Identifier	s
>18289	Identifier	is
>18290	IdentifierDeclType	std 
>18291	IdentifierDeclStatement	 
>18292	IdentifierDecl	s = gems -> Attribute ( \"b\" )
>18293	AssignmentExpr	s = gems -> Attribute ( \"b\" )
>18294	CallExpression	gems -> Attribute ( \"b\" )
>18295	ArgumentList	\"b\"
>18296	Argument	\"b\"
>18297	PrimaryExpression	\"b\"
>18298	Callee	gems -> Attribute
>18299	PtrMemberAccess	gems -> Attribute
>18300	Identifier	Attribute
>18301	Identifier	gems
>18302	Identifier	s
>18303	Identifier	s
>18304	IdentifierDeclType	std 
>18305	Condition	 
>18306	CallExpression	gems -> Attribute ( \"b\" )
>18307	ArgumentList	\"b\"
>18308	Argument	\"b\"
>18309	PrimaryExpression	\"b\"
>18310	Callee	gems -> Attribute
>18311	PtrMemberAccess	gems -> Attribute
>18312	Identifier	Attribute
>18313	Identifier	gems
>18314	CompoundStatement	 
>18315	WhileStatement	while ( is >> g . name )
>18316	CompoundStatement	 
>18317	ExpressionStatement	 
>18318	CallExpression	this -> gems . push_back ( g )
>18319	ArgumentList	g
>18320	Argument	g
>18321	Identifier	g
>18322	Callee	this -> gems . push_back
>18323	MemberAccess	this -> gems . push_back
>18324	Identifier	push_back
>18325	PtrMemberAccess	this -> gems
>18326	Identifier	gems
>18327	Identifier	this
>18328	ExpressionStatement	 
>18329	ShiftExpression	is >> g . pos . x >> g . pos . y
>18330	ShiftExpression	g . pos . x >> g . pos . y
>18331	MemberAccess	g . pos . y
>18332	Identifier	y
>18333	MemberAccess	g . pos
>18334	Identifier	pos
>18335	Identifier	g
>18336	MemberAccess	g . pos . x
>18337	Identifier	x
>18338	MemberAccess	g . pos
>18339	Identifier	pos
>18340	Identifier	g
>18341	Identifier	is
>18342	Condition	 
>18343	ShiftExpression	is >> g . name
>18344	MemberAccess	g . name
>18345	Identifier	name
>18346	Identifier	g
>18347	Identifier	is
>18348	IdentifierDeclStatement	 
>18349	IdentifierDecl	g
>18350	Identifier	g
>18351	IdentifierDeclType	GemData
>18352	IdentifierDeclStatement	 
>18353	IdentifierDecl	is ( s )
>18354	Identifier	s
>18355	Identifier	is
>18356	IdentifierDeclType	std 
>18357	IdentifierDeclStatement	 
>18358	IdentifierDecl	s = gems -> Attribute ( \"a\" )
>18359	AssignmentExpr	s = gems -> Attribute ( \"a\" )
>18360	CallExpression	gems -> Attribute ( \"a\" )
>18361	ArgumentList	\"a\"
>18362	Argument	\"a\"
>18363	PrimaryExpression	\"a\"
>18364	Callee	gems -> Attribute
>18365	PtrMemberAccess	gems -> Attribute
>18366	Identifier	Attribute
>18367	Identifier	gems
>18368	Identifier	s
>18369	Identifier	s
>18370	IdentifierDeclType	std 
>18371	Condition	 
>18372	CallExpression	gems -> Attribute ( \"a\" )
>18373	ArgumentList	\"a\"
>18374	Argument	\"a\"
>18375	PrimaryExpression	\"a\"
>18376	Callee	gems -> Attribute
>18377	PtrMemberAccess	gems -> Attribute
>18378	Identifier	Attribute
>18379	Identifier	gems
>18380	Condition	 
>18381	Identifier	gems
>18382	IdentifierDeclStatement	 
>18383	IdentifierDecl	* gems = doc . FirstChildElement ( \"Gems\" )
>18384	AssignmentExpr	* gems = doc . FirstChildElement ( \"Gems\" )
>18385	CallExpression	doc . FirstChildElement ( \"Gems\" )
>18386	ArgumentList	\"Gems\"
>18387	Argument	\"Gems\"
>18388	PrimaryExpression	\"Gems\"
>18389	Callee	doc . FirstChildElement
>18390	MemberAccess	doc . FirstChildElement
>18391	Identifier	FirstChildElement
>18392	Identifier	doc
>18393	Identifier	gems
>18394	Identifier	gems
>18395	IdentifierDeclType	XMLElement *
>18396	IfStatement	if ( vox )
>18397	CompoundStatement	 
>18398	WhileStatement	while ( is >> v )
>18399	CompoundStatement	 
>18400	ExpressionStatement	 
>18401	CallExpression	dsq -> continuity . voiceOversPlayed . push_back ( v )
>18402	ArgumentList	v
>18403	Argument	v
>18404	Identifier	v
>18405	Callee	dsq -> continuity . voiceOversPlayed . push_back
>18406	MemberAccess	dsq -> continuity . voiceOversPlayed . push_back
>18407	Identifier	push_back
>18408	MemberAccess	dsq -> continuity . voiceOversPlayed
>18409	Identifier	voiceOversPlayed
>18410	PtrMemberAccess	dsq -> continuity
>18411	Identifier	continuity
>18412	Identifier	dsq
>18413	Condition	 
>18414	ShiftExpression	is >> v
>18415	Identifier	v
>18416	Identifier	is
>18417	IdentifierDeclStatement	 
>18418	IdentifierDecl	v
>18419	Identifier	v
>18420	IdentifierDeclType	std 
>18421	IdentifierDeclStatement	 
>18422	IdentifierDecl	is ( s )
>18423	Identifier	s
>18424	Identifier	is
>18425	IdentifierDeclType	std 
>18426	IdentifierDeclStatement	 
>18427	IdentifierDecl	s = vox -> Attribute ( \"v\" )
>18428	AssignmentExpr	s = vox -> Attribute ( \"v\" )
>18429	CallExpression	vox -> Attribute ( \"v\" )
>18430	ArgumentList	\"v\"
>18431	Argument	\"v\"
>18432	PrimaryExpression	\"v\"
>18433	Callee	vox -> Attribute
>18434	PtrMemberAccess	vox -> Attribute
>18435	Identifier	Attribute
>18436	Identifier	vox
>18437	Identifier	s
>18438	Identifier	s
>18439	IdentifierDeclType	std 
>18440	Condition	 
>18441	Identifier	vox
>18442	IdentifierDeclStatement	 
>18443	IdentifierDecl	* vox = doc . FirstChildElement ( \"VO\" )
>18444	AssignmentExpr	* vox = doc . FirstChildElement ( \"VO\" )
>18445	CallExpression	doc . FirstChildElement ( \"VO\" )
>18446	ArgumentList	\"VO\"
>18447	Argument	\"VO\"
>18448	PrimaryExpression	\"VO\"
>18449	Callee	doc . FirstChildElement
>18450	MemberAccess	doc . FirstChildElement
>18451	Identifier	FirstChildElement
>18452	Identifier	doc
>18453	Identifier	vox
>18454	Identifier	vox
>18455	IdentifierDeclType	XMLElement *
>18456	IfStatement	if ( bcn )
>18457	CompoundStatement	 
>18458	IfStatement	if ( bcn -> Attribute ( \"a\" ) )
>18459	CompoundStatement	 
>18460	WhileStatement	while ( is >> idx )
>18461	CompoundStatement	 
>18462	ExpressionStatement	 
>18463	CallExpression	beacons . push_back ( data )
>18464	ArgumentList	data
>18465	Argument	data
>18466	Identifier	data
>18467	Callee	beacons . push_back
>18468	MemberAccess	beacons . push_back
>18469	Identifier	push_back
>18470	Identifier	beacons
>18471	ExpressionStatement	 
>18472	ShiftExpression	is >> data . pos . x >> data . pos . y >> data . pos . z
>18473	ShiftExpression	data . pos . x >> data . pos . y >> data . pos . z
>18474	ShiftExpression	data . pos . y >> data . pos . z
>18475	MemberAccess	data . pos . z
>18476	Identifier	z
>18477	MemberAccess	data . pos
>18478	Identifier	pos
>18479	Identifier	data
>18480	MemberAccess	data . pos . y
>18481	Identifier	y
>18482	MemberAccess	data . pos
>18483	Identifier	pos
>18484	Identifier	data
>18485	MemberAccess	data . pos . x
>18486	Identifier	x
>18487	MemberAccess	data . pos
>18488	Identifier	pos
>18489	Identifier	data
>18490	Identifier	is
>18491	ExpressionStatement	 
>18492	ShiftExpression	is >> data . color . x >> data . color . y >> data . color . z
>18493	ShiftExpression	data . color . x >> data . color . y >> data . color . z
>18494	ShiftExpression	data . color . y >> data . color . z
>18495	MemberAccess	data . color . z
>18496	Identifier	z
>18497	MemberAccess	data . color
>18498	Identifier	color
>18499	Identifier	data
>18500	MemberAccess	data . color . y
>18501	Identifier	y
>18502	MemberAccess	data . color
>18503	Identifier	color
>18504	Identifier	data
>18505	MemberAccess	data . color . x
>18506	Identifier	x
>18507	MemberAccess	data . color
>18508	Identifier	color
>18509	Identifier	data
>18510	Identifier	is
>18511	ExpressionStatement	 
>18512	ShiftExpression	is >> data . on
>18513	MemberAccess	data . on
>18514	Identifier	on
>18515	Identifier	data
>18516	Identifier	is
>18517	ExpressionStatement	 
>18518	AssignmentExpr	data . index = idx
>18519	Identifier	idx
>18520	MemberAccess	data . index
>18521	Identifier	index
>18522	Identifier	data
>18523	IdentifierDeclStatement	 
>18524	IdentifierDecl	data
>18525	Identifier	data
>18526	IdentifierDeclType	BeaconData
>18527	Condition	 
>18528	ShiftExpression	is >> idx
>18529	Identifier	idx
>18530	Identifier	is
>18531	IdentifierDeclStatement	 
>18532	IdentifierDecl	idx = 0
>18533	AssignmentExpr	idx = 0
>18534	PrimaryExpression	0
>18535	Identifier	idx
>18536	Identifier	idx
>18537	IdentifierDeclType	int
>18538	IdentifierDeclStatement	 
>18539	IdentifierDecl	is ( bcn -> Attribute ( \"a\" ) )
>18540	CallExpression	bcn -> Attribute ( \"a\" )
>18541	ArgumentList	\"a\"
>18542	Argument	\"a\"
>18543	PrimaryExpression	\"a\"
>18544	Callee	bcn -> Attribute
>18545	PtrMemberAccess	bcn -> Attribute
>18546	Identifier	Attribute
>18547	Identifier	bcn
>18548	Identifier	is
>18549	IdentifierDeclType	std 
>18550	ExpressionStatement	 
>18551	CallExpression	beacons . clear ( )
>18552	ArgumentList	 
>18553	Callee	beacons . clear
>18554	MemberAccess	beacons . clear
>18555	Identifier	clear
>18556	Identifier	beacons
>18557	Condition	 
>18558	CallExpression	bcn -> Attribute ( \"a\" )
>18559	ArgumentList	\"a\"
>18560	Argument	\"a\"
>18561	PrimaryExpression	\"a\"
>18562	Callee	bcn -> Attribute
>18563	PtrMemberAccess	bcn -> Attribute
>18564	Identifier	Attribute
>18565	Identifier	bcn
>18566	Condition	 
>18567	Identifier	bcn
>18568	IdentifierDeclStatement	 
>18569	IdentifierDecl	* bcn = doc . FirstChildElement ( \"bcn\" )
>18570	AssignmentExpr	* bcn = doc . FirstChildElement ( \"bcn\" )
>18571	CallExpression	doc . FirstChildElement ( \"bcn\" )
>18572	ArgumentList	\"bcn\"
>18573	Argument	\"bcn\"
>18574	PrimaryExpression	\"bcn\"
>18575	Callee	doc . FirstChildElement
>18576	MemberAccess	doc . FirstChildElement
>18577	Identifier	FirstChildElement
>18578	Identifier	doc
>18579	Identifier	bcn
>18580	Identifier	bcn
>18581	IdentifierDeclType	XMLElement *
>18582	IfStatement	if ( eats )
>18583	CompoundStatement	 
>18584	IfStatement	if ( eats -> Attribute ( \"a\" ) )
>18585	CompoundStatement	 
>18586	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>18587	CompoundStatement	 
>18588	ExpressionStatement	 
>18589	CallExpression	naijaEats . push_back ( eat )
>18590	ArgumentList	eat
>18591	Argument	eat
>18592	Identifier	eat
>18593	Callee	naijaEats . push_back
>18594	MemberAccess	naijaEats . push_back
>18595	Identifier	push_back
>18596	Identifier	naijaEats
>18597	ExpressionStatement	 
>18598	ShiftExpression	is >> eat . name >> eat . shot >> eat . ammo >> eat . ammoUnitSize
>18599	ShiftExpression	eat . name >> eat . shot >> eat . ammo >> eat . ammoUnitSize
>18600	ShiftExpression	eat . shot >> eat . ammo >> eat . ammoUnitSize
>18601	ShiftExpression	eat . ammo >> eat . ammoUnitSize
>18602	MemberAccess	eat . ammoUnitSize
>18603	Identifier	ammoUnitSize
>18604	Identifier	eat
>18605	MemberAccess	eat . ammo
>18606	Identifier	ammo
>18607	Identifier	eat
>18608	MemberAccess	eat . shot
>18609	Identifier	shot
>18610	Identifier	eat
>18611	MemberAccess	eat . name
>18612	Identifier	name
>18613	Identifier	eat
>18614	Identifier	is
>18615	IdentifierDeclStatement	 
>18616	IdentifierDecl	eat
>18617	Identifier	eat
>18618	IdentifierDeclType	EatData
>18619	IncDecOp	 
>18620	IncDec	++
>18621	Identifier	i
>18622	Condition	 
>18623	RelationalExpression	i < num
>18624	Identifier	num
>18625	Identifier	i
>18626	ForInit	 
>18627	IdentifierDeclStatement	int i = 0 ;
>18628	IdentifierDecl	i = 0
>18629	AssignmentExpr	i = 0
>18630	PrimaryExpression	0
>18631	Identifier	i
>18632	Identifier	i
>18633	IdentifierDeclType	int
>18634	ExpressionStatement	 
>18635	ShiftExpression	is >> num
>18636	Identifier	num
>18637	Identifier	is
>18638	ExpressionStatement	 
>18639	CallExpression	naijaEats . clear ( )
>18640	ArgumentList	 
>18641	Callee	naijaEats . clear
>18642	MemberAccess	naijaEats . clear
>18643	Identifier	clear
>18644	Identifier	naijaEats
>18645	IdentifierDeclStatement	 
>18646	IdentifierDecl	num = 0
>18647	AssignmentExpr	num = 0
>18648	PrimaryExpression	0
>18649	Identifier	num
>18650	Identifier	num
>18651	IdentifierDeclType	int
>18652	IdentifierDeclStatement	 
>18653	IdentifierDecl	is ( eats -> Attribute ( \"a\" ) )
>18654	CallExpression	eats -> Attribute ( \"a\" )
>18655	ArgumentList	\"a\"
>18656	Argument	\"a\"
>18657	PrimaryExpression	\"a\"
>18658	Callee	eats -> Attribute
>18659	PtrMemberAccess	eats -> Attribute
>18660	Identifier	Attribute
>18661	Identifier	eats
>18662	Identifier	is
>18663	IdentifierDeclType	std 
>18664	Condition	 
>18665	CallExpression	eats -> Attribute ( \"a\" )
>18666	ArgumentList	\"a\"
>18667	Argument	\"a\"
>18668	PrimaryExpression	\"a\"
>18669	Callee	eats -> Attribute
>18670	PtrMemberAccess	eats -> Attribute
>18671	Identifier	Attribute
>18672	Identifier	eats
>18673	Condition	 
>18674	Identifier	eats
>18675	IdentifierDeclStatement	 
>18676	IdentifierDecl	* eats = doc . FirstChildElement ( \"eats\" )
>18677	AssignmentExpr	* eats = doc . FirstChildElement ( \"eats\" )
>18678	CallExpression	doc . FirstChildElement ( \"eats\" )
>18679	ArgumentList	\"eats\"
>18680	Argument	\"eats\"
>18681	PrimaryExpression	\"eats\"
>18682	Callee	doc . FirstChildElement
>18683	MemberAccess	doc . FirstChildElement
>18684	Identifier	FirstChildElement
>18685	Identifier	doc
>18686	Identifier	eats
>18687	Identifier	eats
>18688	IdentifierDeclType	XMLElement *
>18689	IfStatement	if ( efx )
>18690	CompoundStatement	 
>18691	IfStatement	if ( efx -> Attribute ( \"a\" ) )
>18692	CompoundStatement	 
>18693	WhileStatement	while ( is >> name )
>18694	CompoundStatement	 
>18695	ExpressionStatement	 
>18696	ShiftExpression	is >> entityFlags [ name ]
>18697	ArrayIndexing	entityFlags [ name ]
>18698	Identifier	name
>18699	Identifier	entityFlags
>18700	Identifier	is
>18701	Condition	 
>18702	ShiftExpression	is >> name
>18703	Identifier	name
>18704	Identifier	is
>18705	IdentifierDeclStatement	 
>18706	IdentifierDecl	name
>18707	Identifier	name
>18708	IdentifierDeclType	std 
>18709	IdentifierDeclStatement	 
>18710	IdentifierDecl	is ( efx -> Attribute ( \"a\" ) )
>18711	CallExpression	efx -> Attribute ( \"a\" )
>18712	ArgumentList	\"a\"
>18713	Argument	\"a\"
>18714	PrimaryExpression	\"a\"
>18715	Callee	efx -> Attribute
>18716	PtrMemberAccess	efx -> Attribute
>18717	Identifier	Attribute
>18718	Identifier	efx
>18719	Identifier	is
>18720	IdentifierDeclType	std 
>18721	Condition	 
>18722	CallExpression	efx -> Attribute ( \"a\" )
>18723	ArgumentList	\"a\"
>18724	Argument	\"a\"
>18725	PrimaryExpression	\"a\"
>18726	Callee	efx -> Attribute
>18727	PtrMemberAccess	efx -> Attribute
>18728	Identifier	Attribute
>18729	Identifier	efx
>18730	Condition	 
>18731	Identifier	efx
>18732	IdentifierDeclStatement	 
>18733	IdentifierDecl	* efx = doc . FirstChildElement ( \"EFX\" )
>18734	AssignmentExpr	* efx = doc . FirstChildElement ( \"EFX\" )
>18735	CallExpression	doc . FirstChildElement ( \"EFX\" )
>18736	ArgumentList	\"EFX\"
>18737	Argument	\"EFX\"
>18738	PrimaryExpression	\"EFX\"
>18739	Callee	doc . FirstChildElement
>18740	MemberAccess	doc . FirstChildElement
>18741	Identifier	FirstChildElement
>18742	Identifier	doc
>18743	Identifier	efx
>18744	Identifier	efx
>18745	IdentifierDeclType	XMLElement *
>18746	WhileStatement	while ( e )
>18747	CompoundStatement	 
>18748	ExpressionStatement	 
>18749	AssignmentExpr	e = e -> NextSiblingElement ( \"Flag\" )
>18750	CallExpression	e -> NextSiblingElement ( \"Flag\" )
>18751	ArgumentList	\"Flag\"
>18752	Argument	\"Flag\"
>18753	PrimaryExpression	\"Flag\"
>18754	Callee	e -> NextSiblingElement
>18755	PtrMemberAccess	e -> NextSiblingElement
>18756	Identifier	NextSiblingElement
>18757	Identifier	e
>18758	Identifier	e
>18759	ExpressionStatement	 
>18760	CallExpression	dsq -> continuity . setFlag ( e -> Attribute ( \"name\" ) , atoi ( e -> Attribute ( \"value\" ) ) )
>18761	ArgumentList	e -> Attribute ( \"name\" )
>18762	Argument	atoi ( e -> Attribute ( \"value\" ) )
>18763	CallExpression	atoi ( e -> Attribute ( \"value\" ) )
>18764	ArgumentList	e -> Attribute ( \"value\" )
>18765	Argument	e -> Attribute ( \"value\" )
>18766	CallExpression	e -> Attribute ( \"value\" )
>18767	ArgumentList	\"value\"
>18768	Argument	\"value\"
>18769	PrimaryExpression	\"value\"
>18770	Callee	e -> Attribute
>18771	PtrMemberAccess	e -> Attribute
>18772	Identifier	Attribute
>18773	Identifier	e
>18774	Callee	atoi
>18775	Identifier	atoi
>18776	Argument	e -> Attribute ( \"name\" )
>18777	CallExpression	e -> Attribute ( \"name\" )
>18778	ArgumentList	\"name\"
>18779	Argument	\"name\"
>18780	PrimaryExpression	\"name\"
>18781	Callee	e -> Attribute
>18782	PtrMemberAccess	e -> Attribute
>18783	Identifier	Attribute
>18784	Identifier	e
>18785	Callee	dsq -> continuity . setFlag
>18786	MemberAccess	dsq -> continuity . setFlag
>18787	Identifier	setFlag
>18788	PtrMemberAccess	dsq -> continuity
>18789	Identifier	continuity
>18790	Identifier	dsq
>18791	Condition	 
>18792	Identifier	e
>18793	IdentifierDeclStatement	 
>18794	IdentifierDecl	* e = doc . FirstChildElement ( \"Flag\" )
>18795	AssignmentExpr	* e = doc . FirstChildElement ( \"Flag\" )
>18796	CallExpression	doc . FirstChildElement ( \"Flag\" )
>18797	ArgumentList	\"Flag\"
>18798	Argument	\"Flag\"
>18799	PrimaryExpression	\"Flag\"
>18800	Callee	doc . FirstChildElement
>18801	MemberAccess	doc . FirstChildElement
>18802	Identifier	FirstChildElement
>18803	Identifier	doc
>18804	Identifier	e
>18805	Identifier	e
>18806	IdentifierDeclType	XMLElement *
>18807	IfStatement	if ( xmlVersion )
>18808	CompoundStatement	 
>18809	ExpressionStatement	 
>18810	AssignmentExpr	versionRevision = atoi ( xmlVersion -> Attribute ( \"revision\" ) )
>18811	CallExpression	atoi ( xmlVersion -> Attribute ( \"revision\" ) )
>18812	ArgumentList	xmlVersion -> Attribute ( \"revision\" )
>18813	Argument	xmlVersion -> Attribute ( \"revision\" )
>18814	CallExpression	xmlVersion -> Attribute ( \"revision\" )
>18815	ArgumentList	\"revision\"
>18816	Argument	\"revision\"
>18817	PrimaryExpression	\"revision\"
>18818	Callee	xmlVersion -> Attribute
>18819	PtrMemberAccess	xmlVersion -> Attribute
>18820	Identifier	Attribute
>18821	Identifier	xmlVersion
>18822	Callee	atoi
>18823	Identifier	atoi
>18824	Identifier	versionRevision
>18825	ExpressionStatement	 
>18826	AssignmentExpr	versionMinor = atoi ( xmlVersion -> Attribute ( \"minor\" ) )
>18827	CallExpression	atoi ( xmlVersion -> Attribute ( \"minor\" ) )
>18828	ArgumentList	xmlVersion -> Attribute ( \"minor\" )
>18829	Argument	xmlVersion -> Attribute ( \"minor\" )
>18830	CallExpression	xmlVersion -> Attribute ( \"minor\" )
>18831	ArgumentList	\"minor\"
>18832	Argument	\"minor\"
>18833	PrimaryExpression	\"minor\"
>18834	Callee	xmlVersion -> Attribute
>18835	PtrMemberAccess	xmlVersion -> Attribute
>18836	Identifier	Attribute
>18837	Identifier	xmlVersion
>18838	Callee	atoi
>18839	Identifier	atoi
>18840	Identifier	versionMinor
>18841	ExpressionStatement	 
>18842	AssignmentExpr	versionMajor = atoi ( xmlVersion -> Attribute ( \"major\" ) )
>18843	CallExpression	atoi ( xmlVersion -> Attribute ( \"major\" ) )
>18844	ArgumentList	xmlVersion -> Attribute ( \"major\" )
>18845	Argument	xmlVersion -> Attribute ( \"major\" )
>18846	CallExpression	xmlVersion -> Attribute ( \"major\" )
>18847	ArgumentList	\"major\"
>18848	Argument	\"major\"
>18849	PrimaryExpression	\"major\"
>18850	Callee	xmlVersion -> Attribute
>18851	PtrMemberAccess	xmlVersion -> Attribute
>18852	Identifier	Attribute
>18853	Identifier	xmlVersion
>18854	Callee	atoi
>18855	Identifier	atoi
>18856	Identifier	versionMajor
>18857	Condition	 
>18858	Identifier	xmlVersion
>18859	IdentifierDeclStatement	 
>18860	IdentifierDecl	* xmlVersion = doc . FirstChildElement ( \"Version\" )
>18861	AssignmentExpr	* xmlVersion = doc . FirstChildElement ( \"Version\" )
>18862	CallExpression	doc . FirstChildElement ( \"Version\" )
>18863	ArgumentList	\"Version\"
>18864	Argument	\"Version\"
>18865	PrimaryExpression	\"Version\"
>18866	Callee	doc . FirstChildElement
>18867	MemberAccess	doc . FirstChildElement
>18868	Identifier	FirstChildElement
>18869	Identifier	doc
>18870	Identifier	xmlVersion
>18871	Identifier	xmlVersion
>18872	IdentifierDeclType	XMLElement *
>18873	IdentifierDeclStatement	 
>18874	IdentifierDecl	versionRevision = - 1
>18875	AssignmentExpr	versionRevision = - 1
>18876	UnaryOp	- 1
>18877	PrimaryExpression	1
>18878	UnaryOperator	-
>18879	Identifier	versionRevision
>18880	Identifier	versionRevision
>18881	IdentifierDeclType	int
>18882	IdentifierDecl	versionMinor = - 1
>18883	AssignmentExpr	versionMinor = - 1
>18884	UnaryOp	- 1
>18885	PrimaryExpression	1
>18886	UnaryOperator	-
>18887	Identifier	versionMinor
>18888	Identifier	versionMinor
>18889	IdentifierDeclType	int
>18890	IdentifierDecl	versionMajor = - 1
>18891	AssignmentExpr	versionMajor = - 1
>18892	UnaryOp	- 1
>18893	PrimaryExpression	1
>18894	UnaryOperator	-
>18895	Identifier	versionMajor
>18896	Identifier	versionMajor
>18897	IdentifierDeclType	int
>18898	ExpressionStatement	 
>18899	CallExpression	this -> reset ( )
>18900	ArgumentList	 
>18901	Callee	this -> reset
>18902	PtrMemberAccess	this -> reset
>18903	Identifier	reset
>18904	Identifier	this
>18905	IfStatement	if ( startData )
>18906	CompoundStatement	 
>18907	IfStatement	if ( startData -> Attribute ( \"mod\" ) )
>18908	CompoundStatement	 
>18909	ExpressionStatement	 
>18910	CallExpression	exit_error ( \"The demo version does not support loading savegames from mods, sorry.\" )
>18911	ArgumentList	\"The demo version does not support loading savegames from mods, sorry.\"
>18912	Argument	\"The demo version does not support loading savegames from mods, sorry.\"
>18913	PrimaryExpression	\"The demo version does not support loading savegames from mods, sorry.\"
>18914	Callee	exit_error
>18915	Identifier	exit_error
>18916	Condition	 
>18917	CallExpression	startData -> Attribute ( \"mod\" )
>18918	ArgumentList	\"mod\"
>18919	Argument	\"mod\"
>18920	PrimaryExpression	\"mod\"
>18921	Callee	startData -> Attribute
>18922	PtrMemberAccess	startData -> Attribute
>18923	Identifier	Attribute
>18924	Identifier	startData
>18925	Condition	 
>18926	Identifier	startData
>18927	IdentifierDeclStatement	 
>18928	IdentifierDecl	* startData = doc . FirstChildElement ( \"StartData\" )
>18929	AssignmentExpr	* startData = doc . FirstChildElement ( \"StartData\" )
>18930	CallExpression	doc . FirstChildElement ( \"StartData\" )
>18931	ArgumentList	\"StartData\"
>18932	Argument	\"StartData\"
>18933	PrimaryExpression	\"StartData\"
>18934	Callee	doc . FirstChildElement
>18935	MemberAccess	doc . FirstChildElement
>18936	Identifier	FirstChildElement
>18937	Identifier	doc
>18938	Identifier	startData
>18939	Identifier	startData
>18940	IdentifierDeclType	XMLElement *
>18941	ExpressionStatement	 
>18942	CallExpression	loadFileData ( slot , doc )
>18943	ArgumentList	slot
>18944	Argument	doc
>18945	Identifier	doc
>18946	Argument	slot
>18947	Identifier	slot
>18948	Callee	loadFileData
>18949	Identifier	loadFileData
>18950	IdentifierDeclStatement	 
>18951	IdentifierDecl	doc
>18952	Identifier	doc
>18953	IdentifierDeclType	XMLDocument
>18954	ExpressionStatement	 
>18955	CallExpression	dsq -> user . save ( )
>18956	ArgumentList	 
>18957	Callee	dsq -> user . save
>18958	MemberAccess	dsq -> user . save
>18959	Identifier	save
>18960	PtrMemberAccess	dsq -> user
>18961	Identifier	user
>18962	Identifier	dsq
>19118	FunctionDef	Continuity 
>19119	ParameterList	std 
>19120	Parameter	 
>19121	Identifier	model
>19122	ParameterType	std 
>19123	ReturnType	void
>19124	CompoundStatement	 
>19129	FunctionDef	Continuity 
>19130	ParameterList	int flag
>19131	Parameter	 
>19132	Identifier	flag
>19133	ParameterType	int
>19134	ReturnType	int
>19135	CompoundStatement	 
>19136	ReturnStatement	 
>19137	ArrayIndexing	intFlags [ flag ]
>19138	Identifier	flag
>19139	Identifier	intFlags
>19140	IfStatement	if ( flag == 0 )
>19141	CompoundStatement	 
>19142	ExpressionStatement	 
>19143	CallExpression	errorLog ( \"Flag 0 not allowed\" )
>19144	ArgumentList	\"Flag 0 not allowed\"
>19145	Argument	\"Flag 0 not allowed\"
>19146	PrimaryExpression	\"Flag 0 not allowed\"
>19147	Callee	errorLog
>19148	Identifier	errorLog
>19149	Condition	 
>19150	EqualityExpression	flag == 0
>19151	PrimaryExpression	0
>19152	Identifier	flag
>19160	FunctionDef	Continuity 
>19161	ParameterList	int flag , int v
>19162	Parameter	 
>19163	Identifier	v
>19164	ParameterType	int
>19165	Parameter	 
>19166	Identifier	flag
>19167	ParameterType	int
>19168	ReturnType	void
>19169	CompoundStatement	 
>19170	ExpressionStatement	 
>19171	AssignmentExpr	intFlags [ flag ] = v
>19172	Identifier	v
>19173	ArrayIndexing	intFlags [ flag ]
>19174	Identifier	flag
>19175	Identifier	intFlags
>19176	ExpressionStatement	 
>19177	CallExpression	debugLog ( os . str ( ) )
>19178	ArgumentList	os . str ( )
>19179	Argument	os . str ( )
>19180	CallExpression	os . str ( )
>19181	ArgumentList	 
>19182	Callee	os . str
>19183	MemberAccess	os . str
>19184	Identifier	str
>19185	Identifier	os
>19186	Callee	debugLog
>19187	Identifier	debugLog
>19188	ExpressionStatement	 
>19189	ShiftExpression	os << \"setting flag [\" << flag << \"] to \" << v
>19190	ShiftExpression	\"setting flag [\" << flag << \"] to \" << v
>19191	ShiftExpression	flag << \"] to \" << v
>19192	ShiftExpression	\"] to \" << v
>19193	Identifier	v
>19194	PrimaryExpression	\"] to \"
>19195	Identifier	flag
>19196	PrimaryExpression	\"setting flag [\"
>19197	Identifier	os
>19198	IdentifierDeclStatement	 
>19199	IdentifierDecl	os
>19200	Identifier	os
>19201	IdentifierDeclType	std 
>19202	IfStatement	if ( flag == 0 )
>19203	CompoundStatement	 
>19204	ExpressionStatement	 
>19205	CallExpression	errorLog ( \"Flag 0 not allowed\" )
>19206	ArgumentList	\"Flag 0 not allowed\"
>19207	Argument	\"Flag 0 not allowed\"
>19208	PrimaryExpression	\"Flag 0 not allowed\"
>19209	Callee	errorLog
>19210	Identifier	errorLog
>19211	Condition	 
>19212	EqualityExpression	flag == 0
>19213	PrimaryExpression	0
>19214	Identifier	flag
>19225	FunctionDef	Continuity 
>19226	ParameterList	const std 
>19227	Parameter	 
>19228	Identifier	id
>19229	ParameterType	int
>19230	Parameter	 
>19231	Identifier	sceneName
>19232	ParameterType	const std 
>19233	ReturnType	int
>19234	CompoundStatement	 
>19235	ReturnStatement	 
>19236	ArrayIndexing	entityFlags [ os2 . str ( ) ]
>19237	CallExpression	os2 . str ( )
>19238	ArgumentList	 
>19239	Callee	os2 . str
>19240	MemberAccess	os2 . str
>19241	Identifier	str
>19242	Identifier	os2
>19243	Identifier	entityFlags
>19244	ExpressionStatement	 
>19245	ShiftExpression	os2 << hash ( os . str ( ) )
>19246	CallExpression	hash ( os . str ( ) )
>19247	ArgumentList	os . str ( )
>19248	Argument	os . str ( )
>19249	CallExpression	os . str ( )
>19250	ArgumentList	 
>19251	Callee	os . str
>19252	MemberAccess	os . str
>19253	Identifier	str
>19254	Identifier	os
>19255	Callee	hash
>19256	Identifier	hash
>19257	Identifier	os2
>19258	IdentifierDeclStatement	 
>19259	IdentifierDecl	os2
>19260	Identifier	os2
>19261	IdentifierDeclType	std 
>19262	ExpressionStatement	 
>19263	ShiftExpression	os << sceneName << \"
>19264	ShiftExpression	sceneName << \"
>19265	ShiftExpression	\"
>19266	Identifier	id
>19267	PrimaryExpression	\"
>19268	Identifier	sceneName
>19269	Identifier	os
>19270	IdentifierDeclStatement	 
>19271	IdentifierDecl	os
>19272	Identifier	os
>19273	IdentifierDeclType	std 
>19287	FunctionDef	Continuity 
>19288	ParameterList	const std 
>19289	Parameter	 
>19290	Identifier	v
>19291	ParameterType	int
>19292	Parameter	 
>19293	Identifier	id
>19294	ParameterType	int
>19295	Parameter	 
>19296	Identifier	sceneName
>19297	ParameterType	const std 
>19298	ReturnType	void
>19299	CompoundStatement	 
>19300	ExpressionStatement	 
>19301	AssignmentExpr	entityFlags [ os2 . str ( ) ] = v
>19302	Identifier	v
>19303	ArrayIndexing	entityFlags [ os2 . str ( ) ]
>19304	CallExpression	os2 . str ( )
>19305	ArgumentList	 
>19306	Callee	os2 . str
>19307	MemberAccess	os2 . str
>19308	Identifier	str
>19309	Identifier	os2
>19310	Identifier	entityFlags
>19311	ExpressionStatement	 
>19312	ShiftExpression	os2 << hash ( os . str ( ) )
>19313	CallExpression	hash ( os . str ( ) )
>19314	ArgumentList	os . str ( )
>19315	Argument	os . str ( )
>19316	CallExpression	os . str ( )
>19317	ArgumentList	 
>19318	Callee	os . str
>19319	MemberAccess	os . str
>19320	Identifier	str
>19321	Identifier	os
>19322	Callee	hash
>19323	Identifier	hash
>19324	Identifier	os2
>19325	IdentifierDeclStatement	 
>19326	IdentifierDecl	os2
>19327	Identifier	os2
>19328	IdentifierDeclType	std 
>19329	ExpressionStatement	 
>19330	ShiftExpression	os << sceneName << \"
>19331	ShiftExpression	sceneName << \"
>19332	ShiftExpression	\"
>19333	Identifier	id
>19334	PrimaryExpression	\"
>19335	Identifier	sceneName
>19336	Identifier	os
>19337	IdentifierDeclStatement	 
>19338	IdentifierDecl	os
>19339	Identifier	os
>19340	IdentifierDeclType	std 
>19355	FunctionDef	Continuity 
>19356	ParameterList	Path * p , int v
>19357	Parameter	 
>19358	Identifier	v
>19359	ParameterType	int
>19360	Parameter	 
>19361	Identifier	p
>19362	ParameterType	Path *
>19363	ReturnType	void
>19364	CompoundStatement	 
>19365	ExpressionStatement	 
>19366	AssignmentExpr	entityFlags [ os2 . str ( ) ] = v
>19367	Identifier	v
>19368	ArrayIndexing	entityFlags [ os2 . str ( ) ]
>19369	CallExpression	os2 . str ( )
>19370	ArgumentList	 
>19371	Callee	os2 . str
>19372	MemberAccess	os2 . str
>19373	Identifier	str
>19374	Identifier	os2
>19375	Identifier	entityFlags
>19376	ExpressionStatement	 
>19377	ShiftExpression	os2 << hash ( os . str ( ) )
>19378	CallExpression	hash ( os . str ( ) )
>19379	ArgumentList	os . str ( )
>19380	Argument	os . str ( )
>19381	CallExpression	os . str ( )
>19382	ArgumentList	 
>19383	Callee	os . str
>19384	MemberAccess	os . str
>19385	Identifier	str
>19386	Identifier	os
>19387	Callee	hash
>19388	Identifier	hash
>19389	Identifier	os2
>19390	IdentifierDeclStatement	 
>19391	IdentifierDecl	os2
>19392	Identifier	os2
>19393	IdentifierDeclType	std 
>19394	ExpressionStatement	 
>19395	ShiftExpression	os << \"p
>19396	ShiftExpression	\"p
>19397	ShiftExpression	dsq -> game -> sceneName << \"
>19398	ShiftExpression	\"
>19399	ShiftExpression	p -> nodes [ 0 ] . position . x << \"
>19400	ShiftExpression	\"
>19401	ShiftExpression	p -> nodes [ 0 ] . position . y << \"
>19402	ShiftExpression	\"
>19403	CallExpression	removeSpaces ( p -> name )
>19404	ArgumentList	p -> name
>19405	Argument	p -> name
>19406	PtrMemberAccess	p -> name
>19407	Identifier	name
>19408	Identifier	p
>19409	Callee	removeSpaces
>19410	Identifier	removeSpaces
>19411	PrimaryExpression	\"
>19412	MemberAccess	p -> nodes [ 0 ] . position . y
>19413	Identifier	y
>19414	MemberAccess	p -> nodes [ 0 ] . position
>19415	Identifier	position
>19416	ArrayIndexing	p -> nodes [ 0 ]
>19417	PrimaryExpression	0
>19418	PtrMemberAccess	p -> nodes
>19419	Identifier	nodes
>19420	Identifier	p
>19421	PrimaryExpression	\"
>19422	MemberAccess	p -> nodes [ 0 ] . position . x
>19423	Identifier	x
>19424	MemberAccess	p -> nodes [ 0 ] . position
>19425	Identifier	position
>19426	ArrayIndexing	p -> nodes [ 0 ]
>19427	PrimaryExpression	0
>19428	PtrMemberAccess	p -> nodes
>19429	Identifier	nodes
>19430	Identifier	p
>19431	PrimaryExpression	\"
>19432	PtrMemberAccess	dsq -> game -> sceneName
>19433	Identifier	sceneName
>19434	PtrMemberAccess	dsq -> game
>19435	Identifier	game
>19436	Identifier	dsq
>19437	PrimaryExpression	\"p
>19438	Identifier	os
>19439	IdentifierDeclStatement	 
>19440	IdentifierDecl	os
>19441	Identifier	os
>19442	IdentifierDeclType	std 
>19465	FunctionDef	Continuity 
>19466	ParameterList	Path * p
>19467	Parameter	 
>19468	Identifier	p
>19469	ParameterType	Path *
>19470	ReturnType	int
>19471	CompoundStatement	 
>19472	ReturnStatement	 
>19473	ArrayIndexing	entityFlags [ os2 . str ( ) ]
>19474	CallExpression	os2 . str ( )
>19475	ArgumentList	 
>19476	Callee	os2 . str
>19477	MemberAccess	os2 . str
>19478	Identifier	str
>19479	Identifier	os2
>19480	Identifier	entityFlags
>19481	ExpressionStatement	 
>19482	ShiftExpression	os2 << hash ( os . str ( ) )
>19483	CallExpression	hash ( os . str ( ) )
>19484	ArgumentList	os . str ( )
>19485	Argument	os . str ( )
>19486	CallExpression	os . str ( )
>19487	ArgumentList	 
>19488	Callee	os . str
>19489	MemberAccess	os . str
>19490	Identifier	str
>19491	Identifier	os
>19492	Callee	hash
>19493	Identifier	hash
>19494	Identifier	os2
>19495	IdentifierDeclStatement	 
>19496	IdentifierDecl	os2
>19497	Identifier	os2
>19498	IdentifierDeclType	std 
>19499	ExpressionStatement	 
>19500	ShiftExpression	os << \"p
>19501	ShiftExpression	\"p
>19502	ShiftExpression	dsq -> game -> sceneName << \"
>19503	ShiftExpression	\"
>19504	ShiftExpression	p -> nodes [ 0 ] . position . x << \"
>19505	ShiftExpression	\"
>19506	ShiftExpression	p -> nodes [ 0 ] . position . y << \"
>19507	ShiftExpression	\"
>19508	CallExpression	removeSpaces ( p -> name )
>19509	ArgumentList	p -> name
>19510	Argument	p -> name
>19511	PtrMemberAccess	p -> name
>19512	Identifier	name
>19513	Identifier	p
>19514	Callee	removeSpaces
>19515	Identifier	removeSpaces
>19516	PrimaryExpression	\"
>19517	MemberAccess	p -> nodes [ 0 ] . position . y
>19518	Identifier	y
>19519	MemberAccess	p -> nodes [ 0 ] . position
>19520	Identifier	position
>19521	ArrayIndexing	p -> nodes [ 0 ]
>19522	PrimaryExpression	0
>19523	PtrMemberAccess	p -> nodes
>19524	Identifier	nodes
>19525	Identifier	p
>19526	PrimaryExpression	\"
>19527	MemberAccess	p -> nodes [ 0 ] . position . x
>19528	Identifier	x
>19529	MemberAccess	p -> nodes [ 0 ] . position
>19530	Identifier	position
>19531	ArrayIndexing	p -> nodes [ 0 ]
>19532	PrimaryExpression	0
>19533	PtrMemberAccess	p -> nodes
>19534	Identifier	nodes
>19535	Identifier	p
>19536	PrimaryExpression	\"
>19537	PtrMemberAccess	dsq -> game -> sceneName
>19538	Identifier	sceneName
>19539	PtrMemberAccess	dsq -> game
>19540	Identifier	game
>19541	Identifier	dsq
>19542	PrimaryExpression	\"p
>19543	Identifier	os
>19544	IdentifierDeclStatement	 
>19545	IdentifierDecl	os
>19546	Identifier	os
>19547	IdentifierDeclType	std 
>19570	FunctionDef	GemGet (const std 
>19571	ParameterList	const std 
>19572	Parameter	 
>19573	Identifier	gem
>19574	ParameterType	const std 
>19575	CompoundStatement	 
>19576	ExpressionStatement	 
>19577	CallExpression	setDecayRate ( 1 )
>19578	ArgumentList	1
>19579	Argument	1
>19580	PrimaryExpression	1
>19581	Callee	setDecayRate
>19582	Identifier	setDecayRate
>19583	ExpressionStatement	 
>19584	CallExpression	setLife ( timeScale + 0.1f )
>19585	ArgumentList	timeScale + 0.1f
>19586	Argument	timeScale + 0.1f
>19587	AdditiveExpression	timeScale + 0.1f
>19588	PrimaryExpression	0.1f
>19589	Identifier	timeScale
>19590	Callee	setLife
>19591	Identifier	setLife
>19592	ExpressionStatement	 
>19593	AssignmentExpr	position = Vector ( 400 , 400 )
>19594	CallExpression	Vector ( 400 , 400 )
>19595	ArgumentList	400
>19596	Argument	400
>19597	PrimaryExpression	400
>19598	Argument	400
>19599	PrimaryExpression	400
>19600	Callee	Vector
>19601	Identifier	Vector
>19602	Identifier	position
>19603	ExpressionStatement	 
>19604	CallExpression	scale . startPath ( timeScale )
>19605	ArgumentList	timeScale
>19606	Argument	timeScale
>19607	Identifier	timeScale
>19608	Callee	scale . startPath
>19609	MemberAccess	scale . startPath
>19610	Identifier	startPath
>19611	Identifier	scale
>19612	ExpressionStatement	 
>19613	CallExpression	scale . data -> path . addPathNode ( Vector ( 0.1 , 0.1 ) , 1 )
>19614	ArgumentList	Vector ( 0.1 , 0.1 )
>19615	Argument	1
>19616	PrimaryExpression	1
>19617	Argument	Vector ( 0.1 , 0.1 )
>19618	CallExpression	Vector ( 0.1 , 0.1 )
>19619	ArgumentList	0.1
>19620	Argument	0.1
>19621	PrimaryExpression	0.1
>19622	Argument	0.1
>19623	PrimaryExpression	0.1
>19624	Callee	Vector
>19625	Identifier	Vector
>19626	Callee	scale . data -> path . addPathNode
>19627	MemberAccess	scale . data -> path . addPathNode
>19628	Identifier	addPathNode
>19629	PtrMemberAccess	scale . data -> path
>19630	Identifier	path
>19631	MemberAccess	scale . data
>19632	Identifier	data
>19633	Identifier	scale
>19634	ExpressionStatement	 
>19635	CallExpression	scale . data -> path . addPathNode ( Vector ( 0.5 , 0.5 ) , 0.9 )
>19636	ArgumentList	Vector ( 0.5 , 0.5 )
>19637	Argument	0.9
>19638	PrimaryExpression	0.9
>19639	Argument	Vector ( 0.5 , 0.5 )
>19640	CallExpression	Vector ( 0.5 , 0.5 )
>19641	ArgumentList	0.5
>19642	Argument	0.5
>19643	PrimaryExpression	0.5
>19644	Argument	0.5
>19645	PrimaryExpression	0.5
>19646	Callee	Vector
>19647	Identifier	Vector
>19648	Callee	scale . data -> path . addPathNode
>19649	MemberAccess	scale . data -> path . addPathNode
>19650	Identifier	addPathNode
>19651	PtrMemberAccess	scale . data -> path
>19652	Identifier	path
>19653	MemberAccess	scale . data
>19654	Identifier	data
>19655	Identifier	scale
>19656	ExpressionStatement	 
>19657	CallExpression	scale . data -> path . addPathNode ( Vector ( 1 , 1 ) , 0.6 )
>19658	ArgumentList	Vector ( 1 , 1 )
>19659	Argument	0.6
>19660	PrimaryExpression	0.6
>19661	Argument	Vector ( 1 , 1 )
>19662	CallExpression	Vector ( 1 , 1 )
>19663	ArgumentList	1
>19664	Argument	1
>19665	PrimaryExpression	1
>19666	Argument	1
>19667	PrimaryExpression	1
>19668	Callee	Vector
>19669	Identifier	Vector
>19670	Callee	scale . data -> path . addPathNode
>19671	MemberAccess	scale . data -> path . addPathNode
>19672	Identifier	addPathNode
>19673	PtrMemberAccess	scale . data -> path
>19674	Identifier	path
>19675	MemberAccess	scale . data
>19676	Identifier	data
>19677	Identifier	scale
>19678	ExpressionStatement	 
>19679	CallExpression	scale . data -> path . addPathNode ( Vector ( 1 , 1 ) , 0.3 )
>19680	ArgumentList	Vector ( 1 , 1 )
>19681	Argument	0.3
>19682	PrimaryExpression	0.3
>19683	Argument	Vector ( 1 , 1 )
>19684	CallExpression	Vector ( 1 , 1 )
>19685	ArgumentList	1
>19686	Argument	1
>19687	PrimaryExpression	1
>19688	Argument	1
>19689	PrimaryExpression	1
>19690	Callee	Vector
>19691	Identifier	Vector
>19692	Callee	scale . data -> path . addPathNode
>19693	MemberAccess	scale . data -> path . addPathNode
>19694	Identifier	addPathNode
>19695	PtrMemberAccess	scale . data -> path
>19696	Identifier	path
>19697	MemberAccess	scale . data
>19698	Identifier	data
>19699	Identifier	scale
>19700	ExpressionStatement	 
>19701	CallExpression	scale . data -> path . addPathNode ( Vector ( 0 , 0 ) , 0 )
>19702	ArgumentList	Vector ( 0 , 0 )
>19703	Argument	0
>19704	PrimaryExpression	0
>19705	Argument	Vector ( 0 , 0 )
>19706	CallExpression	Vector ( 0 , 0 )
>19707	ArgumentList	0
>19708	Argument	0
>19709	PrimaryExpression	0
>19710	Argument	0
>19711	PrimaryExpression	0
>19712	Callee	Vector
>19713	Identifier	Vector
>19714	Callee	scale . data -> path . addPathNode
>19715	MemberAccess	scale . data -> path . addPathNode
>19716	Identifier	addPathNode
>19717	PtrMemberAccess	scale . data -> path
>19718	Identifier	path
>19719	MemberAccess	scale . data
>19720	Identifier	data
>19721	Identifier	scale
>19722	ExpressionStatement	 
>19723	CallExpression	scale . ensureData ( )
>19724	ArgumentList	 
>19725	Callee	scale . ensureData
>19726	MemberAccess	scale . ensureData
>19727	Identifier	ensureData
>19728	Identifier	scale
>19729	ExpressionStatement	 
>19730	AssignmentExpr	scale = Vector ( 0 , 0 )
>19731	CallExpression	Vector ( 0 , 0 )
>19732	ArgumentList	0
>19733	Argument	0
>19734	PrimaryExpression	0
>19735	Argument	0
>19736	PrimaryExpression	0
>19737	Callee	Vector
>19738	Identifier	Vector
>19739	Identifier	scale
>19740	ExpressionStatement	 
>19741	AssignmentExpr	followCamera = 1
>19742	PrimaryExpression	1
>19743	Identifier	followCamera
>19744	ExpressionStatement	 
>19745	CallExpression	setTexture ( \"Gems/\" + gem )
>19746	ArgumentList	\"Gems/\" + gem
>19747	Argument	\"Gems/\" + gem
>19748	AdditiveExpression	\"Gems/\" + gem
>19749	Identifier	gem
>19750	PrimaryExpression	\"Gems/\"
>19751	Callee	setTexture
>19752	Identifier	setTexture
>19753	ExpressionStatement	 
>19754	AssignmentExpr	timer = 0
>19755	PrimaryExpression	0
>19756	Identifier	timer
>19757	ExpressionStatement	 
>19758	AssignmentExpr	timeScale = 3
>19759	PrimaryExpression	3
>19760	Identifier	timeScale
>19781	FunctionDef	onUpdate (float dt)
>19782	ParameterList	float dt
>19783	Parameter	 
>19784	Identifier	dt
>19785	ParameterType	float
>19786	ReturnType	void
>19787	CompoundStatement	 
>19788	IfStatement	if ( timer > 0.6f * timeScale )
>19789	CompoundStatement	 
>19790	IfStatement	if ( startPos . isZero ( ) )
>19791	ElseStatement	else
>19792	CompoundStatement	 
>19793	ExpressionStatement	 
>19794	AssignmentExpr	position = ( ( dsq -> game -> miniMapRender -> position + dsq -> game -> miniMapRender -> offset ) - \
>19795	AdditiveExpression	( ( dsq -> game -> miniMapRender -> position + dsq -> game -> miniMapRender -> offset ) - startPos ) * \
>19796	Identifier	startPos
>19797	MultiplicativeExpression	( ( dsq -> game -> miniMapRender -> position + dsq -> game -> miniMapRender -> offset ) - startPos ) * \
>19798	Identifier	p
>19799	AdditiveExpression	( dsq -> game -> miniMapRender -> position + dsq -> game -> miniMapRender -> offset ) - startPos
>19800	Identifier	startPos
>19801	AdditiveExpression	dsq -> game -> miniMapRender -> position + dsq -> game -> miniMapRender -> offset
>19802	PtrMemberAccess	dsq -> game -> miniMapRender -> offset
>19803	Identifier	offset
>19804	PtrMemberAccess	dsq -> game -> miniMapRender
>19805	Identifier	miniMapRender
>19806	PtrMemberAccess	dsq -> game
>19807	Identifier	game
>19808	Identifier	dsq
>19809	PtrMemberAccess	dsq -> game -> miniMapRender -> position
>19810	Identifier	position
>19811	PtrMemberAccess	dsq -> game -> miniMapRender
>19812	Identifier	miniMapRender
>19813	PtrMemberAccess	dsq -> game
>19814	Identifier	game
>19815	Identifier	dsq
>19816	Identifier	position
>19817	IdentifierDeclStatement	 
>19818	IdentifierDecl	p = ( timer - ( 0.6f * timeScale ) ) / ( 0.4f * timeScale )
>19819	AssignmentExpr	p = ( timer - ( 0.6f * timeScale ) ) / ( 0.4f * timeScale )
>19820	MultiplicativeExpression	( timer - ( 0.6f * timeScale ) ) / ( 0.4f * timeScale )
>19821	MultiplicativeExpression	0.4f * timeScale
>19822	Identifier	timeScale
>19823	PrimaryExpression	0.4f
>19824	AdditiveExpression	timer - ( 0.6f * timeScale )
>19825	MultiplicativeExpression	0.6f * timeScale
>19826	Identifier	timeScale
>19827	PrimaryExpression	0.6f
>19828	Identifier	timer
>19829	Identifier	p
>19830	Identifier	p
>19831	IdentifierDeclType	float
>19832	CompoundStatement	 
>19833	ExpressionStatement	 
>19834	AssignmentExpr	startPos = position
>19835	Identifier	position
>19836	Identifier	startPos
>19837	Condition	 
>19838	CallExpression	startPos . isZero ( )
>19839	ArgumentList	 
>19840	Callee	startPos . isZero
>19841	MemberAccess	startPos . isZero
>19842	Identifier	isZero
>19843	Identifier	startPos
>19844	Condition	 
>19845	RelationalExpression	timer > 0.6f * timeScale
>19846	MultiplicativeExpression	0.6f * timeScale
>19847	Identifier	timeScale
>19848	PrimaryExpression	0.6f
>19849	Identifier	timer
>19850	ExpressionStatement	 
>19851	AssignmentExpr	timer += dt
>19852	Identifier	dt
>19853	Identifier	timer
>19854	ExpressionStatement	 
>19855	CallExpression	Quad 
>19856	ArgumentList	dt
>19857	Argument	dt
>19858	Identifier	dt
>19859	Callee	Quad 
>19860	Identifier	Quad 
>19882	FunctionDef	Continuity 
>19883	ParameterList	GemData * gemData
>19884	Parameter	 
>19885	Identifier	gemData
>19886	ParameterType	GemData *
>19887	ReturnType	void
>19888	CompoundStatement	 
>19889	ForStatement	for ( Gems 
>19890	CompoundStatement	 
>19891	IfStatement	if ( & ( * i ) == gemData )
>19892	CompoundStatement	 
>19893	ReturnStatement	 
>19894	ExpressionStatement	 
>19895	CallExpression	gems . erase ( i )
>19896	ArgumentList	i
>19897	Argument	i
>19898	Identifier	i
>19899	Callee	gems . erase
>19900	MemberAccess	gems . erase
>19901	Identifier	erase
>19902	Identifier	gems
>19903	Condition	 
>19904	EqualityExpression	& ( * i ) == gemData
>19905	Identifier	gemData
>19906	UnaryOp	& ( * i )
>19907	UnaryOp	* i
>19908	Identifier	i
>19909	UnaryOperator	*
>19910	UnaryOperator	&
>19911	IncDecOp	 
>19912	IncDec	++
>19913	Identifier	i
>19914	Condition	 
>19915	EqualityExpression	i != gems . end ( )
>19916	CallExpression	gems . end ( )
>19917	ArgumentList	 
>19918	Callee	gems . end
>19919	MemberAccess	gems . end
>19920	Identifier	end
>19921	Identifier	gems
>19922	Identifier	i
>19923	ForInit	 
>19924	IdentifierDeclStatement	Gems 
>19925	IdentifierDecl	i = gems . begin ( )
>19926	AssignmentExpr	i = gems . begin ( )
>19927	CallExpression	gems . begin ( )
>19928	ArgumentList	 
>19929	Callee	gems . begin
>19930	MemberAccess	gems . begin
>19931	Identifier	begin
>19932	Identifier	gems
>19933	Identifier	i
>19934	Identifier	i
>19935	IdentifierDeclType	Gems 
>19945	FunctionDef	Continuity 
>19946	ParameterList	std 
>19947	Parameter	 
>19948	Identifier	effects
>19949	ParameterType	bool
>19950	Parameter	 
>19951	Identifier	name
>19952	ParameterType	std 
>19953	ReturnType	GemData *
>19954	CompoundStatement	 
>19955	ReturnStatement	 
>19956	UnaryOp	& gems . back ( )
>19957	CallExpression	gems . back ( )
>19958	ArgumentList	 
>19959	Callee	gems . back
>19960	MemberAccess	gems . back
>19961	Identifier	back
>19962	Identifier	gems
>19963	UnaryOperator	&
>19964	IfStatement	if ( effects && dsq -> game -> isActive ( ) )
>19965	CompoundStatement	 
>19966	IfStatement	if ( ! getFlag ( \"tokenHint\" ) )
>19967	CompoundStatement	 
>19968	ExpressionStatement	 
>19969	CallExpression	dsq -> game -> setControlHint ( dsq -> continuity . stringBank . get ( 4 ) , false , false , false , 8 )
>19970	ArgumentList	dsq -> continuity . stringBank . get ( 4 )
>19971	Argument	8
>19972	PrimaryExpression	8
>19973	Argument	false
>19974	Identifier	false
>19975	Argument	false
>19976	Identifier	false
>19977	Argument	false
>19978	Identifier	false
>19979	Argument	dsq -> continuity . stringBank . get ( 4 )
>19980	CallExpression	dsq -> continuity . stringBank . get ( 4 )
>19981	ArgumentList	4
>19982	Argument	4
>19983	PrimaryExpression	4
>19984	Callee	dsq -> continuity . stringBank . get
>19985	MemberAccess	dsq -> continuity . stringBank . get
>19986	Identifier	get
>19987	MemberAccess	dsq -> continuity . stringBank
>19988	Identifier	stringBank
>19989	PtrMemberAccess	dsq -> continuity
>19990	Identifier	continuity
>19991	Identifier	dsq
>19992	Callee	dsq -> game -> setControlHint
>19993	PtrMemberAccess	dsq -> game -> setControlHint
>19994	Identifier	setControlHint
>19995	PtrMemberAccess	dsq -> game
>19996	Identifier	game
>19997	Identifier	dsq
>19998	ExpressionStatement	 
>19999	CallExpression	setFlag ( \"tokenHint\" , 1 )
>20000	ArgumentList	\"tokenHint\"
>20001	Argument	1
>20002	PrimaryExpression	1
>20003	Argument	\"tokenHint\"
>20004	PrimaryExpression	\"tokenHint\"
>20005	Callee	setFlag
>20006	Identifier	setFlag
>20007	Condition	 
>20008	UnaryOp	! getFlag ( \"tokenHint\" )
>20009	CallExpression	getFlag ( \"tokenHint\" )
>20010	ArgumentList	\"tokenHint\"
>20011	Argument	\"tokenHint\"
>20012	PrimaryExpression	\"tokenHint\"
>20013	Callee	getFlag
>20014	Identifier	getFlag
>20015	UnaryOperator	!
>20016	ExpressionStatement	 
>20017	CallExpression	dsq -> game -> addRenderObject ( gg , LR_MINIMAP )
>20018	ArgumentList	gg
>20019	Argument	LR_MINIMAP
>20020	Identifier	LR_MINIMAP
>20021	Argument	gg
>20022	Identifier	gg
>20023	Callee	dsq -> game -> addRenderObject
>20024	PtrMemberAccess	dsq -> game -> addRenderObject
>20025	Identifier	addRenderObject
>20026	PtrMemberAccess	dsq -> game
>20027	Identifier	game
>20028	Identifier	dsq
>20029	IdentifierDeclStatement	 
>20030	IdentifierDecl	* gg = new GemGet ( g . name )
>20031	AssignmentExpr	* gg = new GemGet ( g . name )
>20032	MemberAccess	g . name
>20033	Identifier	name
>20034	Identifier	g
>20035	Identifier	gg
>20036	Identifier	gg
>20037	IdentifierDeclType	GemGet *
>20038	ExpressionStatement	 
>20039	CallExpression	core -> sound -> playSfx ( \"Gem-Collect\" )
>20040	ArgumentList	\"Gem-Collect\"
>20041	Argument	\"Gem-Collect\"
>20042	PrimaryExpression	\"Gem-Collect\"
>20043	Callee	core -> sound -> playSfx
>20044	PtrMemberAccess	core -> sound -> playSfx
>20045	Identifier	playSfx
>20046	PtrMemberAccess	core -> sound
>20047	Identifier	sound
>20048	Identifier	core
>20049	Condition	 
>20050	AndExpression	effects && dsq -> game -> isActive ( )
>20051	CallExpression	dsq -> game -> isActive ( )
>20052	ArgumentList	 
>20053	Callee	dsq -> game -> isActive
>20054	PtrMemberAccess	dsq -> game -> isActive
>20055	Identifier	isActive
>20056	PtrMemberAccess	dsq -> game
>20057	Identifier	game
>20058	Identifier	dsq
>20059	Identifier	effects
>20060	ExpressionStatement	 
>20061	CallExpression	gems . push_back ( g )
>20062	ArgumentList	g
>20063	Argument	g
>20064	Identifier	g
>20065	Callee	gems . push_back
>20066	MemberAccess	gems . push_back
>20067	Identifier	push_back
>20068	Identifier	gems
>20069	IfStatement	if ( ! effects )
>20070	ElseStatement	else
>20071	CompoundStatement	 
>20072	IfStatement	if ( ! gems . empty ( ) )
>20073	ElseStatement	else
>20074	ExpressionStatement	 
>20075	AssignmentExpr	g . pos = Vector ( 0 , 0 )
>20076	CallExpression	Vector ( 0 , 0 )
>20077	ArgumentList	0
>20078	Argument	0
>20079	PrimaryExpression	0
>20080	Argument	0
>20081	PrimaryExpression	0
>20082	Callee	Vector
>20083	Identifier	Vector
>20084	MemberAccess	g . pos
>20085	Identifier	pos
>20086	Identifier	g
>20087	ExpressionStatement	 
>20088	AssignmentExpr	g . pos = dsq -> game -> worldMapRender -> getAvatarWorldMapPosition ( )
>20089	CallExpression	dsq -> game -> worldMapRender -> getAvatarWorldMapPosition ( )
>20090	ArgumentList	 
>20091	Callee	dsq -> game -> worldMapRender -> getAvatarWorldMapPosition
>20092	PtrMemberAccess	dsq -> game -> worldMapRender -> getAvatarWorldMapPosition
>20093	Identifier	getAvatarWorldMapPosition
>20094	PtrMemberAccess	dsq -> game -> worldMapRender
>20095	Identifier	worldMapRender
>20096	PtrMemberAccess	dsq -> game
>20097	Identifier	game
>20098	Identifier	dsq
>20099	MemberAccess	g . pos
>20100	Identifier	pos
>20101	Identifier	g
>20102	Condition	 
>20103	UnaryOp	! gems . empty ( )
>20104	CallExpression	gems . empty ( )
>20105	ArgumentList	 
>20106	Callee	gems . empty
>20107	MemberAccess	gems . empty
>20108	Identifier	empty
>20109	Identifier	gems
>20110	UnaryOperator	!
>20111	CompoundStatement	 
>20112	ExpressionStatement	 
>20113	AssignmentExpr	g . pos = dsq -> game -> worldMapRender -> getAvatarWorldMapPosition ( ) + Vector ( sz * 16 - 64 , - \
>20114	AdditiveExpression	dsq -> game -> worldMapRender -> getAvatarWorldMapPosition ( ) + Vector ( sz * 16 - 64 , - 64 )
>20115	CallExpression	Vector ( sz * 16 - 64 , - 64 )
>20116	ArgumentList	sz * 16 - 64
>20117	Argument	- 64
>20118	UnaryOp	- 64
>20119	PrimaryExpression	64
>20120	UnaryOperator	-
>20121	Argument	sz * 16 - 64
>20122	AdditiveExpression	sz * 16 - 64
>20123	PrimaryExpression	64
>20124	MultiplicativeExpression	sz * 16
>20125	PrimaryExpression	16
>20126	Identifier	sz
>20127	Callee	Vector
>20128	Identifier	Vector
>20129	CallExpression	dsq -> game -> worldMapRender -> getAvatarWorldMapPosition ( )
>20130	ArgumentList	 
>20131	Callee	dsq -> game -> worldMapRender -> getAvatarWorldMapPosition
>20132	PtrMemberAccess	dsq -> game -> worldMapRender -> getAvatarWorldMapPosition
>20133	Identifier	getAvatarWorldMapPosition
>20134	PtrMemberAccess	dsq -> game -> worldMapRender
>20135	Identifier	worldMapRender
>20136	PtrMemberAccess	dsq -> game
>20137	Identifier	game
>20138	Identifier	dsq
>20139	MemberAccess	g . pos
>20140	Identifier	pos
>20141	Identifier	g
>20142	Condition	 
>20143	UnaryOp	! effects
>20144	Identifier	effects
>20145	UnaryOperator	!
>20146	IdentifierDeclStatement	 
>20147	IdentifierDecl	sz = gems . size ( )
>20148	AssignmentExpr	sz = gems . size ( )
>20149	CallExpression	gems . size ( )
>20150	ArgumentList	 
>20151	Callee	gems . size
>20152	MemberAccess	gems . size
>20153	Identifier	size
>20154	Identifier	gems
>20155	Identifier	sz
>20156	Identifier	sz
>20157	IdentifierDeclType	int
>20158	ExpressionStatement	 
>20159	AssignmentExpr	g . mapName = dsq -> game -> sceneName
>20160	PtrMemberAccess	dsq -> game -> sceneName
>20161	Identifier	sceneName
>20162	PtrMemberAccess	dsq -> game
>20163	Identifier	game
>20164	Identifier	dsq
>20165	MemberAccess	g . mapName
>20166	Identifier	mapName
>20167	Identifier	g
>20168	ExpressionStatement	 
>20169	AssignmentExpr	g . name = name
>20170	Identifier	name
>20171	MemberAccess	g . name
>20172	Identifier	name
>20173	Identifier	g
>20174	IdentifierDeclStatement	 
>20175	IdentifierDecl	g
>20176	Identifier	g
>20177	IdentifierDeclType	GemData
>20216	FunctionDef	Continuity 
>20217	ParameterList	Entity * eDead
>20218	Parameter	 
>20219	Identifier	eDead
>20220	ParameterType	Entity *
>20221	ReturnType	void
>20222	CompoundStatement	 
>20223	IfStatement	if ( statsAndAchievements )
>20224	CompoundStatement	 
>20225	ExpressionStatement	 
>20226	CallExpression	statsAndAchievements -> entityDied ( eDead )
>20227	ArgumentList	eDead
>20228	Argument	eDead
>20229	Identifier	eDead
>20230	Callee	statsAndAchievements -> entityDied
>20231	PtrMemberAccess	statsAndAchievements -> entityDied
>20232	Identifier	entityDied
>20233	Identifier	statsAndAchievements
>20234	Condition	 
>20235	Identifier	statsAndAchievements
>20241	FunctionDef	Continuity 
>20242	ParameterList	Recipe * r , bool effects
>20243	Parameter	 
>20244	Identifier	effects
>20245	ParameterType	bool
>20246	Parameter	 
>20247	Identifier	r
>20248	ParameterType	Recipe *
>20249	ReturnType	void
>20250	CompoundStatement	 
>20251	IfStatement	if ( ! k )
>20252	ExpressionStatement	 
>20253	CallExpression	dsq -> game -> learnedRecipe ( r , effects )
>20254	ArgumentList	r
>20255	Argument	effects
>20256	Identifier	effects
>20257	Argument	r
>20258	Identifier	r
>20259	Callee	dsq -> game -> learnedRecipe
>20260	PtrMemberAccess	dsq -> game -> learnedRecipe
>20261	Identifier	learnedRecipe
>20262	PtrMemberAccess	dsq -> game
>20263	Identifier	game
>20264	Identifier	dsq
>20265	Condition	 
>20266	UnaryOp	! k
>20267	Identifier	k
>20268	UnaryOperator	!
>20269	ExpressionStatement	 
>20270	CallExpression	debugLog ( os . str ( ) )
>20271	ArgumentList	os . str ( )
>20272	Argument	os . str ( )
>20273	CallExpression	os . str ( )
>20274	ArgumentList	 
>20275	Callee	os . str
>20276	MemberAccess	os . str
>20277	Identifier	str
>20278	Identifier	os
>20279	Callee	debugLog
>20280	Identifier	debugLog
>20281	ExpressionStatement	 
>20282	ShiftExpression	os << \"learned recipe
>20283	ShiftExpression	\"learned recipe
>20284	ShiftExpression	r -> result << \" @ idx
>20285	ShiftExpression	\" @ idx
>20286	PtrMemberAccess	r -> index
>20287	Identifier	index
>20288	Identifier	r
>20289	PrimaryExpression	\" @ idx
>20290	PtrMemberAccess	r -> result
>20291	Identifier	result
>20292	Identifier	r
>20293	PrimaryExpression	\"learned recipe
>20294	Identifier	os
>20295	IdentifierDeclStatement	 
>20296	IdentifierDecl	os
>20297	Identifier	os
>20298	IdentifierDeclType	std 
>20299	ExpressionStatement	 
>20300	CallExpression	r -> learn ( )
>20301	ArgumentList	 
>20302	Callee	r -> learn
>20303	PtrMemberAccess	r -> learn
>20304	Identifier	learn
>20305	Identifier	r
>20306	IdentifierDeclStatement	 
>20307	IdentifierDecl	k = r -> isKnown ( )
>20308	AssignmentExpr	k = r -> isKnown ( )
>20309	CallExpression	r -> isKnown ( )
>20310	ArgumentList	 
>20311	Callee	r -> isKnown
>20312	PtrMemberAccess	r -> isKnown
>20313	Identifier	isKnown
>20314	Identifier	r
>20315	Identifier	k
>20316	Identifier	k
>20317	IdentifierDeclType	bool
>20331	FunctionDef	Continuity 
>20332	ParameterList	const std 
>20333	Parameter	 
>20334	Identifier	effects
>20335	ParameterType	bool
>20336	Parameter	 
>20337	Identifier	result
>20338	ParameterType	const std 
>20339	ReturnType	void
>20340	CompoundStatement	 
>20341	ForStatement	for ( int i = 0 ; i < recipes . size ( ) ; i ++ )
>20342	CompoundStatement	 
>20343	IfStatement	if ( nocasecmp ( recipes [ i ] . result , result ) == 0 )
>20344	CompoundStatement	 
>20345	ReturnStatement	 
>20346	ExpressionStatement	 
>20347	CallExpression	learnRecipe ( & recipes [ i ] , effects )
>20348	ArgumentList	& recipes [ i ]
>20349	Argument	effects
>20350	Identifier	effects
>20351	Argument	& recipes [ i ]
>20352	UnaryOp	& recipes [ i ]
>20353	ArrayIndexing	recipes [ i ]
>20354	Identifier	i
>20355	Identifier	recipes
>20356	UnaryOperator	&
>20357	Callee	learnRecipe
>20358	Identifier	learnRecipe
>20359	Condition	 
>20360	EqualityExpression	nocasecmp ( recipes [ i ] . result , result ) == 0
>20361	PrimaryExpression	0
>20362	CallExpression	nocasecmp ( recipes [ i ] . result , result )
>20363	ArgumentList	recipes [ i ] . result
>20364	Argument	result
>20365	Identifier	result
>20366	Argument	recipes [ i ] . result
>20367	MemberAccess	recipes [ i ] . result
>20368	Identifier	result
>20369	ArrayIndexing	recipes [ i ]
>20370	Identifier	i
>20371	Identifier	recipes
>20372	Callee	nocasecmp
>20373	Identifier	nocasecmp
>20374	IncDecOp	 
>20375	IncDec	++
>20376	Identifier	i
>20377	Condition	 
>20378	RelationalExpression	i < recipes . size ( )
>20379	CallExpression	recipes . size ( )
>20380	ArgumentList	 
>20381	Callee	recipes . size
>20382	MemberAccess	recipes . size
>20383	Identifier	size
>20384	Identifier	recipes
>20385	Identifier	i
>20386	ForInit	 
>20387	IdentifierDeclStatement	int i = 0 ;
>20388	IdentifierDecl	i = 0
>20389	AssignmentExpr	i = 0
>20390	PrimaryExpression	0
>20391	Identifier	i
>20392	Identifier	i
>20393	IdentifierDeclType	int
>20408	FunctionDef	Continuity 
>20409	ParameterList	 
>20410	ReturnType	void
>20411	CompoundStatement	 
>20412	ExpressionStatement	 
>20413	CallExpression	core -> resetTimer ( )
>20414	ArgumentList	 
>20415	Callee	core -> resetTimer
>20416	PtrMemberAccess	core -> resetTimer
>20417	Identifier	resetTimer
>20418	Identifier	core
>20419	ExpressionStatement	 
>20420	CallExpression	initFoodSort ( )
>20421	ArgumentList	 
>20422	Callee	initFoodSort
>20423	Identifier	initFoodSort
>20424	IfStatement	if ( ! dsq -> mod . isActive ( ) )
>20425	CompoundStatement	 
>20426	ExpressionStatement	 
>20427	CallExpression	learnSong ( SONG_SHIELDAURA )
>20428	ArgumentList	SONG_SHIELDAURA
>20429	Argument	SONG_SHIELDAURA
>20430	Identifier	SONG_SHIELDAURA
>20431	Callee	learnSong
>20432	Identifier	learnSong
>20433	Condition	 
>20434	UnaryOp	! dsq -> mod . isActive ( )
>20435	CallExpression	dsq -> mod . isActive ( )
>20436	ArgumentList	 
>20437	Callee	dsq -> mod . isActive
>20438	MemberAccess	dsq -> mod . isActive
>20439	Identifier	isActive
>20440	PtrMemberAccess	dsq -> mod
>20441	Identifier	mod
>20442	Identifier	dsq
>20443	UnaryOperator	!
>20444	WhileStatement	while ( inFile >> n )
>20445	CompoundStatement	 
>20446	ExpressionStatement	 
>20447	CallExpression	speedTypes . push_back ( spd )
>20448	ArgumentList	spd
>20449	Argument	spd
>20450	Identifier	spd
>20451	Callee	speedTypes . push_back
>20452	MemberAccess	speedTypes . push_back
>20453	Identifier	push_back
>20454	Identifier	speedTypes
>20455	ExpressionStatement	 
>20456	ShiftExpression	inFile >> spd
>20457	Identifier	spd
>20458	Identifier	inFile
>20459	Condition	 
>20460	ShiftExpression	inFile >> n
>20461	Identifier	n
>20462	Identifier	inFile
>20463	IdentifierDeclStatement	 
>20464	IdentifierDecl	spd
>20465	Identifier	spd
>20466	IdentifierDeclType	float
>20467	IdentifierDeclStatement	 
>20468	IdentifierDecl	n
>20469	Identifier	n
>20470	IdentifierDeclType	int
>20471	IdentifierDeclStatement	 
>20472	IdentifierDecl	inFile ( \"data/speedtypes.txt\" )
>20473	PrimaryExpression	\"data/speedtypes.txt\"
>20474	Identifier	inFile
>20475	IdentifierDeclType	InStream
>20476	ExpressionStatement	 
>20477	CallExpression	speedTypes . clear ( )
>20478	ArgumentList	 
>20479	Callee	speedTypes . clear
>20480	MemberAccess	speedTypes . clear
>20481	Identifier	clear
>20482	Identifier	speedTypes
>20483	ExpressionStatement	 
>20484	AssignmentExpr	health = maxHealth
>20485	Identifier	maxHealth
>20486	Identifier	health
>20487	ExpressionStatement	 
>20488	AssignmentExpr	maxHealth = 5
>20489	PrimaryExpression	5
>20490	Identifier	maxHealth
>20491	ExpressionStatement	 
>20492	AssignmentExpr	story = 0
>20493	PrimaryExpression	0
>20494	Identifier	story
>20495	ExpressionStatement	 
>20496	CallExpression	stringFlags . clear ( )
>20497	ArgumentList	 
>20498	Callee	stringFlags . clear
>20499	MemberAccess	stringFlags . clear
>20500	Identifier	clear
>20501	Identifier	stringFlags
>20502	ExpressionStatement	 
>20503	CallExpression	flags . clear ( )
>20504	ArgumentList	 
>20505	Callee	flags . clear
>20506	MemberAccess	flags . clear
>20507	Identifier	clear
>20508	Identifier	flags
>20509	ExpressionStatement	 
>20510	AssignmentExpr	hudVisible = true
>20511	Identifier	true
>20512	Identifier	hudVisible
>20513	ExpressionStatement	 
>20514	AssignmentExpr	exp = 0
>20515	PrimaryExpression	0
>20516	Identifier	exp
>20517	ExpressionStatement	 
>20518	AssignmentExpr	seconds = 0
>20519	PrimaryExpression	0
>20520	Identifier	seconds
>20521	ExpressionStatement	 
>20522	CallExpression	itemSlots . clear ( )
>20523	ArgumentList	 
>20524	Callee	itemSlots . clear
>20525	MemberAccess	itemSlots . clear
>20526	Identifier	clear
>20527	Identifier	itemSlots
>20528	ExpressionStatement	 
>20529	AssignmentExpr	zoom = Vector ( 1 , 1 , 0 )
>20530	CallExpression	Vector ( 1 , 1 , 0 )
>20531	ArgumentList	1
>20532	Argument	0
>20533	PrimaryExpression	0
>20534	Argument	1
>20535	PrimaryExpression	1
>20536	Argument	1
>20537	PrimaryExpression	1
>20538	Callee	Vector
>20539	Identifier	Vector
>20540	Identifier	zoom
>20541	ExpressionStatement	 
>20542	AssignmentExpr	worldType = WT_NORMAL
>20543	Identifier	WT_NORMAL
>20544	Identifier	worldType
>20545	ExpressionStatement	 
>20546	CallExpression	dsq -> emote . load ( \"data/naijaemote.txt\" )
>20547	ArgumentList	\"data/naijaemote.txt\"
>20548	Argument	\"data/naijaemote.txt\"
>20549	PrimaryExpression	\"data/naijaemote.txt\"
>20550	Callee	dsq -> emote . load
>20551	MemberAccess	dsq -> emote . load
>20552	Identifier	load
>20553	PtrMemberAccess	dsq -> emote
>20554	Identifier	emote
>20555	Identifier	dsq
>20556	ExpressionStatement	 
>20557	AssignmentExpr	costume = \"\"
>20558	PrimaryExpression	\"\"
>20559	Identifier	costume
>20560	ExpressionStatement	 
>20561	AssignmentExpr	naijaModel = \"Naija\"
>20562	PrimaryExpression	\"Naija\"
>20563	Identifier	naijaModel
>20564	ExpressionStatement	 
>20565	AssignmentExpr	form = FORM_NORMAL
>20566	Identifier	FORM_NORMAL
>20567	Identifier	form
>20568	ExpressionStatement	 
>20569	CallExpression	dsq -> loadElementEffects ( )
>20570	ArgumentList	 
>20571	Callee	dsq -> loadElementEffects
>20572	PtrMemberAccess	dsq -> loadElementEffects
>20573	Identifier	loadElementEffects
>20574	Identifier	dsq
>20575	ExpressionStatement	 
>20576	CallExpression	loadEatBank ( )
>20577	ArgumentList	 
>20578	Callee	loadEatBank
>20579	Identifier	loadEatBank
>20580	ExpressionStatement	 
>20581	CallExpression	loadSongBank ( )
>20582	ArgumentList	 
>20583	Callee	loadSongBank
>20584	Identifier	loadSongBank
>20585	ExpressionStatement	 
>20586	CallExpression	knowsSong . clear ( )
>20587	ArgumentList	 
>20588	Callee	knowsSong . clear
>20589	MemberAccess	knowsSong . clear
>20590	Identifier	clear
>20591	Identifier	knowsSong
>20592	ExpressionStatement	 
>20593	CallExpression	entityFlags . clear ( )
>20594	ArgumentList	 
>20595	Callee	entityFlags . clear
>20596	MemberAccess	entityFlags . clear
>20597	Identifier	clear
>20598	Identifier	entityFlags
>20599	ExpressionStatement	 
>20600	CallExpression	voiceOversPlayed . clear ( )
>20601	ArgumentList	 
>20602	Callee	voiceOversPlayed . clear
>20603	MemberAccess	voiceOversPlayed . clear
>20604	Identifier	clear
>20605	Identifier	voiceOversPlayed
>20606	ForStatement	for ( int i = 0 ; i < MAX_FLAGS ; i ++ )
>20607	CompoundStatement	 
>20608	ExpressionStatement	 
>20609	AssignmentExpr	intFlags [ i ] = 0
>20610	PrimaryExpression	0
>20611	ArrayIndexing	intFlags [ i ]
>20612	Identifier	i
>20613	Identifier	intFlags
>20614	IncDecOp	 
>20615	IncDec	++
>20616	Identifier	i
>20617	Condition	 
>20618	RelationalExpression	i < MAX_FLAGS
>20619	Identifier	MAX_FLAGS
>20620	Identifier	i
>20621	ForInit	 
>20622	IdentifierDeclStatement	int i = 0 ;
>20623	IdentifierDecl	i = 0
>20624	AssignmentExpr	i = 0
>20625	PrimaryExpression	0
>20626	Identifier	i
>20627	Identifier	i
>20628	IdentifierDeclType	int
>20629	ExpressionStatement	 
>20630	AssignmentExpr	auraType = AURA_NONE
>20631	Identifier	AURA_NONE
>20632	Identifier	auraType
>20633	ExpressionStatement	 
>20634	CallExpression	formUpgrades . clear ( )
>20635	ArgumentList	 
>20636	Callee	formUpgrades . clear
>20637	MemberAccess	formUpgrades . clear
>20638	Identifier	clear
>20639	Identifier	formUpgrades
>20640	ExpressionStatement	 
>20641	CallExpression	loadPetData ( )
>20642	ArgumentList	 
>20643	Callee	loadPetData
>20644	Identifier	loadPetData
>20645	ExpressionStatement	 
>20646	CallExpression	loadIngredientData ( )
>20647	ArgumentList	 
>20648	Callee	loadIngredientData
>20649	Identifier	loadIngredientData
>20650	ExpressionStatement	 
>20651	CallExpression	ingredients . clear ( )
>20652	ArgumentList	 
>20653	Callee	ingredients . clear
>20654	MemberAccess	ingredients . clear
>20655	Identifier	clear
>20656	Identifier	ingredients
>20657	ExpressionStatement	 
>20658	AssignmentExpr	foodSortType = 0
>20659	PrimaryExpression	0
>20660	Identifier	foodSortType
>20661	ExpressionStatement	 
>20662	CallExpression	naijaEats . clear ( )
>20663	ArgumentList	 
>20664	Callee	naijaEats . clear
>20665	MemberAccess	naijaEats . clear
>20666	Identifier	clear
>20667	Identifier	naijaEats
>20668	ExpressionStatement	 
>20669	CallExpression	worldMap . load ( )
>20670	ArgumentList	 
>20671	Callee	worldMap . load
>20672	MemberAccess	worldMap . load
>20673	Identifier	load
>20674	Identifier	worldMap
>20675	ExpressionStatement	 
>20676	CallExpression	beacons . clear ( )
>20677	ArgumentList	 
>20678	Callee	beacons . clear
>20679	MemberAccess	beacons . clear
>20680	Identifier	clear
>20681	Identifier	beacons
>20682	ExpressionStatement	 
>20683	CallExpression	gems . clear ( )
>20684	ArgumentList	 
>20685	Callee	gems . clear
>20686	MemberAccess	gems . clear
>20687	Identifier	clear
>20688	Identifier	gems
>20689	ExpressionStatement	 
>20690	CallExpression	stringBank . load ( )
>20691	ArgumentList	 
>20692	Callee	stringBank . load
>20693	MemberAccess	stringBank . load
>20694	Identifier	load
>20695	Identifier	stringBank
>20696	ExpressionStatement	 
>20697	CallExpression	loadTreasureData ( )
>20698	ArgumentList	 
>20699	Callee	loadTreasureData
>20700	Identifier	loadTreasureData
>20701	ExpressionStatement	 
>20702	CallExpression	petPowerTimer . stop ( )
>20703	ArgumentList	 
>20704	Callee	petPowerTimer . stop
>20705	MemberAccess	petPowerTimer . stop
>20706	Identifier	stop
>20707	Identifier	petPowerTimer
>20708	ExpressionStatement	 
>20709	CallExpression	lightTimer . stop ( )
>20710	ArgumentList	 
>20711	Callee	lightTimer . stop
>20712	MemberAccess	lightTimer . stop
>20713	Identifier	stop
>20714	Identifier	lightTimer
>20715	ExpressionStatement	 
>20716	CallExpression	webBitTimer . stop ( )
>20717	ArgumentList	 
>20718	Callee	webBitTimer . stop
>20719	MemberAccess	webBitTimer . stop
>20720	Identifier	stop
>20721	Identifier	webBitTimer
>20722	ExpressionStatement	 
>20723	CallExpression	webTimer . stop ( )
>20724	ArgumentList	 
>20725	Callee	webTimer . stop
>20726	MemberAccess	webTimer . stop
>20727	Identifier	stop
>20728	Identifier	webTimer
>20729	ExpressionStatement	 
>20730	CallExpression	poisonBitTimer . stop ( )
>20731	ArgumentList	 
>20732	Callee	poisonBitTimer . stop
>20733	MemberAccess	poisonBitTimer . stop
>20734	Identifier	stop
>20735	Identifier	poisonBitTimer
>20736	ExpressionStatement	 
>20737	CallExpression	poisonTimer . stop ( )
>20738	ArgumentList	 
>20739	Callee	poisonTimer . stop
>20740	MemberAccess	poisonTimer . stop
>20741	Identifier	stop
>20742	Identifier	poisonTimer
>20743	ExpressionStatement	 
>20744	CallExpression	energyTimer . stop ( )
>20745	ArgumentList	 
>20746	Callee	energyTimer . stop
>20747	MemberAccess	energyTimer . stop
>20748	Identifier	stop
>20749	Identifier	energyTimer
>20750	ExpressionStatement	 
>20751	CallExpression	tripTimer . stop ( )
>20752	ArgumentList	 
>20753	Callee	tripTimer . stop
>20754	MemberAccess	tripTimer . stop
>20755	Identifier	stop
>20756	Identifier	tripTimer
>20757	ExpressionStatement	 
>20758	CallExpression	regenTimer . stop ( )
>20759	ArgumentList	 
>20760	Callee	regenTimer . stop
>20761	MemberAccess	regenTimer . stop
>20762	Identifier	stop
>20763	Identifier	regenTimer
>20764	ExpressionStatement	 
>20765	CallExpression	invincibleTimer . stop ( )
>20766	ArgumentList	 
>20767	Callee	invincibleTimer . stop
>20768	MemberAccess	invincibleTimer . stop
>20769	Identifier	stop
>20770	Identifier	invincibleTimer
>20771	ExpressionStatement	 
>20772	CallExpression	defenseMultTimer . stop ( )
>20773	ArgumentList	 
>20774	Callee	defenseMultTimer . stop
>20775	MemberAccess	defenseMultTimer . stop
>20776	Identifier	stop
>20777	Identifier	defenseMultTimer
>20778	ExpressionStatement	 
>20779	CallExpression	fishPoisonTimer . stop ( )
>20780	ArgumentList	 
>20781	Callee	fishPoisonTimer . stop
>20782	MemberAccess	fishPoisonTimer . stop
>20783	Identifier	stop
>20784	Identifier	fishPoisonTimer
>20785	ExpressionStatement	 
>20786	CallExpression	biteMultTimer . stop ( )
>20787	ArgumentList	 
>20788	Callee	biteMultTimer . stop
>20789	MemberAccess	biteMultTimer . stop
>20790	Identifier	stop
>20791	Identifier	biteMultTimer
>20792	ExpressionStatement	 
>20793	CallExpression	speedMultTimer . stop ( )
>20794	ArgumentList	 
>20795	Callee	speedMultTimer . stop
>20796	MemberAccess	speedMultTimer . stop
>20797	Identifier	stop
>20798	Identifier	speedMultTimer
>20799	ExpressionStatement	 
>20800	AssignmentExpr	liPower = 0
>20801	PrimaryExpression	0
>20802	Identifier	liPower
>20803	ExpressionStatement	 
>20804	AssignmentExpr	light = petPower = 0
>20805	AssignmentExpr	petPower = 0
>20806	PrimaryExpression	0
>20807	Identifier	petPower
>20808	Identifier	light
>20809	ExpressionStatement	 
>20810	AssignmentExpr	energyMult = 0
>20811	PrimaryExpression	0
>20812	Identifier	energyMult
>20813	ExpressionStatement	 
>20814	AssignmentExpr	poison = 0
>20815	PrimaryExpression	0
>20816	Identifier	poison
>20817	ExpressionStatement	 
>20818	AssignmentExpr	speedMult2 = 1
>20819	PrimaryExpression	1
>20820	Identifier	speedMult2
>20821	ExpressionStatement	 
>20822	AssignmentExpr	speedMult = biteMult = fishPoison = defenseMult = 1
>20823	AssignmentExpr	biteMult = fishPoison = defenseMult = 1
>20824	AssignmentExpr	fishPoison = defenseMult = 1
>20825	AssignmentExpr	defenseMult = 1
>20826	PrimaryExpression	1
>20827	Identifier	defenseMult
>20828	Identifier	fishPoison
>20829	Identifier	biteMult
>20830	Identifier	speedMult
>20831	IfStatement	if ( dsq -> game )
>20832	CompoundStatement	 
>20833	ExpressionStatement	 
>20834	AssignmentExpr	dsq -> game -> recipeMenu . currentPage = 0
>20835	PrimaryExpression	0
>20836	MemberAccess	dsq -> game -> recipeMenu . currentPage
>20837	Identifier	currentPage
>20838	PtrMemberAccess	dsq -> game -> recipeMenu
>20839	Identifier	recipeMenu
>20840	PtrMemberAccess	dsq -> game
>20841	Identifier	game
>20842	Identifier	dsq
>20843	ExpressionStatement	 
>20844	AssignmentExpr	dsq -> game -> currentTreasurePage = 0
>20845	PrimaryExpression	0
>20846	PtrMemberAccess	dsq -> game -> currentTreasurePage
>20847	Identifier	currentTreasurePage
>20848	PtrMemberAccess	dsq -> game
>20849	Identifier	game
>20850	Identifier	dsq
>20851	ExpressionStatement	 
>20852	AssignmentExpr	dsq -> game -> currentFoodPage = 0
>20853	PrimaryExpression	0
>20854	PtrMemberAccess	dsq -> game -> currentFoodPage
>20855	Identifier	currentFoodPage
>20856	PtrMemberAccess	dsq -> game
>20857	Identifier	game
>20858	Identifier	dsq
>20859	ExpressionStatement	 
>20860	AssignmentExpr	dsq -> game -> currentMenuPage = MENUPAGE_NONE
>20861	Identifier	MENUPAGE_NONE
>20862	PtrMemberAccess	dsq -> game -> currentMenuPage
>20863	Identifier	currentMenuPage
>20864	PtrMemberAccess	dsq -> game
>20865	Identifier	game
>20866	Identifier	dsq
>20867	Condition	 
>20868	PtrMemberAccess	dsq -> game
>20869	Identifier	game
>20870	Identifier	dsq
>20871	ExpressionStatement	 
>20872	AssignmentExpr	lastOptionsMenuPage = MENUPAGE_NONE
>20873	Identifier	MENUPAGE_NONE
>20874	Identifier	lastOptionsMenuPage
>20875	ExpressionStatement	 
>20876	AssignmentExpr	lastMenuPage = MENUPAGE_NONE
>20877	Identifier	MENUPAGE_NONE
>20878	Identifier	lastMenuPage
>20879	ExpressionStatement	 
>20880	AssignmentExpr	dualFormCharge = 0
>20881	PrimaryExpression	0
>20882	Identifier	dualFormCharge
>20883	ExpressionStatement	 
>20884	AssignmentExpr	dualFormMode = DUALFORM_LI
>20885	Identifier	DUALFORM_LI
>20886	Identifier	dualFormMode
>20975	FunctionDef	Continuity 
>20976	ParameterList	int speedType
>20977	Parameter	 
>20978	Identifier	speedType
>20979	ParameterType	int
>20980	ReturnType	float
>20981	CompoundStatement	 
>20982	ReturnStatement	 
>20983	ArrayIndexing	speedTypes [ speedType ]
>20984	Identifier	speedType
>20985	Identifier	speedTypes
>20986	IfStatement	if ( speedType >= speedTypes . size ( ) || speedType < 0 )
>20987	CompoundStatement	 
>20988	ReturnStatement	 
>20989	PrimaryExpression	0
>20990	ExpressionStatement	 
>20991	CallExpression	debugLog ( os . str ( ) )
>20992	ArgumentList	os . str ( )
>20993	Argument	os . str ( )
>20994	CallExpression	os . str ( )
>20995	ArgumentList	 
>20996	Callee	os . str
>20997	MemberAccess	os . str
>20998	Identifier	str
>20999	Identifier	os
>21000	Callee	debugLog
>21001	Identifier	debugLog
>21002	ExpressionStatement	 
>21003	ShiftExpression	os << \"speedType
>21004	ShiftExpression	\"speedType
>21005	ShiftExpression	speedType << \" out of range\"
>21006	PrimaryExpression	\" out of range\"
>21007	Identifier	speedType
>21008	PrimaryExpression	\"speedType
>21009	Identifier	os
>21010	IdentifierDeclStatement	 
>21011	IdentifierDecl	os
>21012	Identifier	os
>21013	IdentifierDeclType	std 
>21014	Condition	 
>21015	OrExpression	speedType >= speedTypes . size ( ) || speedType < 0
>21016	RelationalExpression	speedType < 0
>21017	PrimaryExpression	0
>21018	Identifier	speedType
>21019	RelationalExpression	speedType >= speedTypes . size ( )
>21020	CallExpression	speedTypes . size ( )
>21021	ArgumentList	 
>21022	Callee	speedTypes . size
>21023	MemberAccess	speedTypes . size
>21024	Identifier	size
>21025	Identifier	speedTypes
>21026	Identifier	speedType
>21037	FunctionDef	Continuity 
>21038	ParameterList	const std 
>21039	Parameter	 
>21040	Identifier	achievement
>21041	ParameterType	const std 
>21042	ReturnType	void
>21043	CompoundStatement	 
>21048	FunctionDef	Continuity 
>21049	ParameterList	Entity * e
>21050	Parameter	 
>21051	Identifier	e
>21052	ParameterType	Entity *
>21053	ReturnType	void
>21054	CompoundStatement	 
>21055	ExpressionStatement	 
>21056	CallExpression	statsAndAchievements -> flingMonkey ( e )
>21057	ArgumentList	e
>21058	Argument	e
>21059	Identifier	e
>21060	Callee	statsAndAchievements -> flingMonkey
>21061	PtrMemberAccess	statsAndAchievements -> flingMonkey
>21062	Identifier	flingMonkey
>21063	Identifier	statsAndAchievements
<21=23,22
<23=24
<24=25
<25=27,26
<32=34,33
<34=47,43,39,35
<35=36
<36=38,37
<39=40
<40=42,41
<43=44
<44=46,45
<47=48
<48=50,49
<59=65,64,60
<60=61
<61=63,62
<65=68,66
<66=67
<68=119,110,107,69
<69=70
<70=90,71
<71=72
<72=78,76,73
<73=74
<74=75
<76=77
<78=79
<79=85,80
<80=82,81
<82=84,83
<85=87,86
<87=89,88
<90=91
<91=93,92
<93=105,94
<94=99,95
<95=96
<96=98,97
<99=100
<100=102,101
<102=104,103
<105=106
<107=109,108
<110=111
<111=118,112
<112=114,113
<114=115
<115=117,116
<119=120
<120=121
<121=126,125,122
<122=124,123
<146=161,160,147
<147=157,154,151,148
<148=150,149
<151=153,152
<154=156,155
<157=159,158
<161=212,190,162
<162=180,173,163
<163=164
<164=165
<165=166
<166=170,167
<167=169,168
<170=172,171
<173=174
<174=175
<175=177,176
<177=179,178
<180=181
<181=187,182
<182=184,183
<184=186,185
<187=189,188
<190=201,191
<191=192
<192=193
<193=197,194
<194=195
<195=196
<197=198
<198=200,199
<201=202
<202=211,203
<203=209,204
<204=205
<205=206
<206=208,207
<209=210
<212=224,213
<213=214
<214=222,215
<215=218,216
<216=217
<218=219
<219=221,220
<222=223
<224=225
<239=245,244,240
<240=241
<241=243,242
<245=250,246
<246=247
<247=249,248
<250=278,269,266,251
<251=252
<252=256,253
<253=254
<254=255
<256=257
<257=261,258
<258=260,259
<261=263,262
<263=265,264
<266=268,267
<269=270
<270=277,271
<271=273,272
<273=274
<274=276,275
<278=279
<279=280
<280=285,284,281
<281=283,282
<302=308,307,303
<303=304
<304=306,305
<308=335,334,333,332,311,309
<309=310
<311=312
<312=317,313
<313=314
<314=316,315
<317=318
<318=320,319
<320=330,321
<321=324,322
<322=323
<324=325
<325=327,326
<327=329,328
<330=331
<348=354,353,349
<349=350
<350=352,351
<354=357,355
<355=356
<357=391,382,379,358
<358=359
<359=364,360
<360=361
<361=363,362
<364=365
<365=367,366
<367=377,368
<368=371,369
<369=370
<371=372
<372=374,373
<374=376,375
<377=378
<379=381,380
<382=383
<383=390,384
<384=386,385
<386=387
<387=389,388
<391=392
<392=393
<393=398,397,394
<394=396,395
<412=418,417,413
<413=414
<414=416,415
<418=421,419
<419=420
<421=608,606,422
<422=423
<423=602,600,424
<424=425
<425=596,594,426
<426=427
<427=590,588,428
<428=429
<429=584,582,430
<430=431
<431=578,576,432
<432=433
<433=572,570,434
<434=435
<435=566,564,436
<436=437
<437=560,558,438
<438=439
<439=554,552,440
<440=441
<441=548,546,442
<442=443
<443=542,540,444
<444=445
<445=536,534,446
<446=447
<447=530,528,448
<448=449
<449=524,522,450
<450=451
<451=518,516,452
<452=453
<453=512,510,454
<454=455
<455=506,504,456
<456=457
<457=500,498,458
<458=459
<459=494,492,460
<460=461
<461=476,462
<462=463
<463=475,464
<464=473,465
<465=466
<466=467
<467=469,468
<469=470
<470=472,471
<473=474
<476=477
<477=486,478
<478=484,479
<479=480
<480=481
<481=483,482
<484=485
<486=488,487
<488=489
<489=491,490
<492=493
<494=495
<495=497,496
<498=499
<500=501
<501=503,502
<504=505
<506=507
<507=509,508
<510=511
<512=513
<513=515,514
<516=517
<518=519
<519=521,520
<522=523
<524=525
<525=527,526
<528=529
<530=531
<531=533,532
<534=535
<536=537
<537=539,538
<540=541
<542=543
<543=545,544
<546=547
<548=549
<549=551,550
<552=553
<554=555
<555=557,556
<558=559
<560=561
<561=563,562
<564=565
<566=567
<567=569,568
<570=571
<572=573
<573=575,574
<576=577
<578=579
<579=581,580
<582=583
<584=585
<585=587,586
<588=589
<590=591
<591=593,592
<594=595
<596=597
<597=599,598
<600=601
<602=603
<603=605,604
<606=607
<608=609
<609=611,610
<642=648,647,643
<643=644
<644=646,645
<648=670,656,649
<649=650
<650=654,651
<651=652
<652=653
<654=655
<656=661,657
<657=658
<658=660,659
<661=662
<662=669,663
<663=665,664
<665=666
<666=668,667
<670=671
<671=683,682,672
<672=681,673
<673=677,674
<674=675
<675=676
<677=678
<678=680,679
<695=701,700,696
<696=697
<697=699,698
<701=706,702
<702=703
<703=705,704
<706=709,707
<707=708
<709=710
<710=719,711
<711=718,712
<712=714,713
<714=715
<715=717,716
<719=721,720
<730=736,735,731
<731=732
<732=734,733
<736=741,737
<737=738
<738=740,739
<741=744,742
<742=743
<744=745
<745=754,746
<746=753,747
<747=749,748
<749=750
<750=752,751
<754=756,755
<765=768,767,766
<768=769
<769=770
<770=777,771
<771=773,772
<773=774
<774=776,775
<783=786,785,784
<786=787
<787=788
<788=795,789
<789=791,790
<791=792
<792=794,793
<801=803,802
<803=810,804
<804=805
<805=809,806
<806=808,807
<810=811
<811=813,812
<820=823,822,821
<823=843,836,832,828,824
<824=825
<825=827,826
<828=829
<829=831,830
<832=833
<833=835,834
<836=837
<837=839,838
<839=840
<840=842,841
<843=844
<844=846,845
<846=847
<847=849,848
<859=862,861,860
<862=863
<863=864
<864=866,865
<872=878,877,873
<873=874
<874=876,875
<878=936,903,879
<879=894,880
<880=881
<881=890,882
<882=883
<883=884
<884=888,885
<885=886
<886=887
<888=889
<890=891
<891=893,892
<894=895
<895=902,896
<896=898,897
<898=899
<899=901,900
<903=927,924,904
<904=905
<905=916,906
<906=908,907
<908=909
<909=911,910
<911=913,912
<913=915,914
<916=917
<917=919,918
<919=921,920
<921=923,922
<924=926,925
<927=928
<928=935,929
<929=931,930
<931=932
<932=934,933
<936=937
<937=942,941,938
<938=940,939
<955=964,963,956
<956=960,957
<957=959,958
<960=962,961
<964=1024,991,965
<965=982,966
<966=967
<967=978,968
<968=969
<969=970
<970=976,971
<971=974,972
<972=973
<974=975
<976=977
<978=979
<979=981,980
<982=983
<983=990,984
<984=986,985
<986=987
<987=989,988
<991=1015,1012,992
<992=993
<993=1004,994
<994=996,995
<996=997
<997=999,998
<999=1001,1000
<1001=1003,1002
<1004=1005
<1005=1007,1006
<1007=1009,1008
<1009=1011,1010
<1012=1014,1013
<1015=1016
<1016=1023,1017
<1017=1019,1018
<1019=1020
<1020=1022,1021
<1024=1025
<1025=1030,1029,1026
<1026=1028,1027
<1044=1047,1046,1045
<1047=1467,1453,1439,1425,1411,1397,1383,1369,1355,1341,1327,1313,1299,1285,1271,1257,1243,1229,1215,1201,1187,1180,1164,1120,1104,1088,1081,1048
<1048=1073,1069,1066,1049
<1049=1050
<1050=1051
<1051=1062,1052
<1052=1053
<1053=1054
<1054=1060,1055
<1055=1056
<1056=1057
<1057=1059,1058
<1060=1061
<1062=1063
<1063=1065,1064
<1066=1068,1067
<1069=1070
<1070=1072,1071
<1073=1074
<1074=1075
<1075=1080,1079,1076
<1076=1078,1077
<1081=1082
<1082=1084,1083
<1084=1085
<1085=1087,1086
<1088=1089
<1089=1100,1090
<1090=1091
<1091=1092
<1092=1098,1093
<1093=1096,1094
<1094=1095
<1096=1097
<1098=1099
<1100=1101
<1101=1103,1102
<1104=1105
<1105=1116,1106
<1106=1107
<1107=1108
<1108=1114,1109
<1109=1112,1110
<1110=1111
<1112=1113
<1114=1115
<1116=1117
<1117=1119,1118
<1120=1156,1150,1147,1121
<1121=1122
<1122=1143,1123
<1123=1124
<1124=1139,1125
<1125=1126
<1126=1127
<1127=1137,1128
<1128=1135,1133,1131,1129
<1129=1130
<1131=1132
<1133=1134
<1135=1136
<1137=1138
<1139=1140
<1140=1142,1141
<1143=1144
<1144=1146,1145
<1147=1149,1148
<1150=1151
<1151=1155,1152
<1152=1154,1153
<1156=1157
<1157=1158
<1158=1163,1162,1159
<1159=1161,1160
<1164=1165
<1165=1176,1166
<1166=1167
<1167=1168
<1168=1174,1169
<1169=1172,1170
<1170=1171
<1172=1173
<1174=1175
<1176=1177
<1177=1179,1178
<1180=1181
<1181=1183,1182
<1183=1184
<1184=1186,1185
<1187=1188
<1188=1197,1189
<1189=1190
<1190=1191
<1191=1195,1192
<1192=1193
<1193=1194
<1195=1196
<1197=1198
<1198=1200,1199
<1201=1202
<1202=1211,1203
<1203=1204
<1204=1205
<1205=1209,1206
<1206=1207
<1207=1208
<1209=1210
<1211=1212
<1212=1214,1213
<1215=1216
<1216=1225,1217
<1217=1218
<1218=1219
<1219=1223,1220
<1220=1221
<1221=1222
<1223=1224
<1225=1226
<1226=1228,1227
<1229=1230
<1230=1239,1231
<1231=1232
<1232=1233
<1233=1237,1234
<1234=1235
<1235=1236
<1237=1238
<1239=1240
<1240=1242,1241
<1243=1244
<1244=1253,1245
<1245=1246
<1246=1247
<1247=1251,1248
<1248=1249
<1249=1250
<1251=1252
<1253=1254
<1254=1256,1255
<1257=1258
<1258=1267,1259
<1259=1260
<1260=1261
<1261=1265,1262
<1262=1263
<1263=1264
<1265=1266
<1267=1268
<1268=1270,1269
<1271=1272
<1272=1281,1273
<1273=1274
<1274=1275
<1275=1279,1276
<1276=1277
<1277=1278
<1279=1280
<1281=1282
<1282=1284,1283
<1285=1286
<1286=1295,1287
<1287=1288
<1288=1289
<1289=1293,1290
<1290=1291
<1291=1292
<1293=1294
<1295=1296
<1296=1298,1297
<1299=1300
<1300=1309,1301
<1301=1302
<1302=1303
<1303=1307,1304
<1304=1305
<1305=1306
<1307=1308
<1309=1310
<1310=1312,1311
<1313=1314
<1314=1323,1315
<1315=1316
<1316=1317
<1317=1321,1318
<1318=1319
<1319=1320
<1321=1322
<1323=1324
<1324=1326,1325
<1327=1328
<1328=1337,1329
<1329=1330
<1330=1331
<1331=1335,1332
<1332=1333
<1333=1334
<1335=1336
<1337=1338
<1338=1340,1339
<1341=1342
<1342=1351,1343
<1343=1344
<1344=1345
<1345=1349,1346
<1346=1347
<1347=1348
<1349=1350
<1351=1352
<1352=1354,1353
<1355=1356
<1356=1365,1357
<1357=1358
<1358=1359
<1359=1363,1360
<1360=1361
<1361=1362
<1363=1364
<1365=1366
<1366=1368,1367
<1369=1370
<1370=1379,1371
<1371=1372
<1372=1373
<1373=1377,1374
<1374=1375
<1375=1376
<1377=1378
<1379=1380
<1380=1382,1381
<1383=1384
<1384=1393,1385
<1385=1386
<1386=1387
<1387=1391,1388
<1388=1389
<1389=1390
<1391=1392
<1393=1394
<1394=1396,1395
<1397=1398
<1398=1407,1399
<1399=1400
<1400=1401
<1401=1405,1402
<1402=1403
<1403=1404
<1405=1406
<1407=1408
<1408=1410,1409
<1411=1412
<1412=1421,1413
<1413=1414
<1414=1415
<1415=1419,1416
<1416=1417
<1417=1418
<1419=1420
<1421=1422
<1422=1424,1423
<1425=1426
<1426=1435,1427
<1427=1428
<1428=1429
<1429=1433,1430
<1430=1431
<1431=1432
<1433=1434
<1435=1436
<1436=1438,1437
<1439=1440
<1440=1449,1441
<1441=1442
<1442=1443
<1443=1447,1444
<1444=1445
<1445=1446
<1447=1448
<1449=1450
<1450=1452,1451
<1453=1454
<1454=1463,1455
<1455=1456
<1456=1457
<1457=1461,1458
<1458=1459
<1459=1460
<1461=1462
<1463=1464
<1464=1466,1465
<1467=1468
<1468=1470,1469
<1470=1471
<1471=1473,1472
<1508=1511,1510,1509
<1511=1941,1934,1905,1512
<1512=1903,1513
<1513=1899,1861,1623,1561,1554,1521,1514
<1514=1515
<1515=1517,1516
<1517=1518
<1518=1520,1519
<1521=1546,1537,1534,1522
<1522=1523
<1523=1524
<1524=1530,1525
<1525=1526
<1526=1527
<1527=1529,1528
<1530=1531
<1531=1533,1532
<1534=1536,1535
<1537=1538
<1538=1545,1539
<1539=1541,1540
<1541=1542
<1542=1544,1543
<1546=1547
<1547=1548
<1548=1553,1552,1549
<1549=1551,1550
<1554=1555
<1555=1557,1556
<1557=1558
<1558=1560,1559
<1561=1615,1602,1599,1562
<1562=1586,1563
<1563=1580,1564
<1564=1574,1565
<1565=1566
<1566=1570,1567
<1567=1568
<1568=1569
<1570=1571
<1571=1573,1572
<1574=1575
<1575=1577,1576
<1577=1579,1578
<1580=1581
<1581=1585,1582
<1582=1584,1583
<1586=1587
<1587=1598,1597,1588
<1588=1596,1589
<1589=1591,1590
<1591=1593,1592
<1593=1595,1594
<1599=1601,1600
<1602=1603
<1603=1614,1604
<1604=1606,1605
<1606=1607
<1607=1609,1608
<1609=1611,1610
<1611=1613,1612
<1615=1616
<1616=1617
<1617=1622,1621,1618
<1618=1620,1619
<1623=1853,1844,1841,1624
<1624=1625
<1625=1833,1820,1817,1626
<1626=1804,1627
<1627=1798,1628
<1628=1629
<1629=1780,1630
<1630=1631
<1631=1767,1739,1632
<1632=1633
<1633=1731,1651,1634
<1634=1635
<1635=1645,1636
<1636=1637
<1637=1641,1638
<1638=1639
<1639=1640
<1641=1642
<1642=1644,1643
<1645=1646
<1646=1648,1647
<1648=1650,1649
<1651=1652
<1652=1723,1712,1709,1653
<1653=1654
<1654=1695,1655
<1655=1656
<1656=1673,1657
<1657=1667,1658
<1658=1659
<1659=1663,1660
<1660=1661
<1661=1662
<1663=1664
<1664=1666,1665
<1667=1668
<1668=1670,1669
<1670=1672,1671
<1673=1674
<1674=1688,1675
<1675=1681,1676
<1676=1678,1677
<1678=1680,1679
<1681=1683,1682
<1683=1685,1684
<1685=1687,1686
<1688=1690,1689
<1690=1692,1691
<1692=1694,1693
<1695=1696
<1696=1702,1697
<1697=1699,1698
<1699=1701,1700
<1702=1704,1703
<1704=1706,1705
<1706=1708,1707
<1709=1711,1710
<1712=1713
<1713=1722,1714
<1714=1716,1715
<1716=1717
<1717=1719,1718
<1719=1721,1720
<1723=1724
<1724=1725
<1725=1730,1729,1726
<1726=1728,1727
<1731=1732
<1732=1734,1733
<1734=1736,1735
<1736=1738,1737
<1739=1740
<1740=1757,1741
<1741=1751,1742
<1742=1743
<1743=1747,1744
<1744=1745
<1745=1746
<1747=1748
<1748=1750,1749
<1751=1752
<1752=1754,1753
<1754=1756,1755
<1757=1758
<1758=1762,1759
<1759=1761,1760
<1762=1764,1763
<1764=1766,1765
<1767=1768
<1768=1779,1769
<1769=1771,1770
<1771=1772
<1772=1774,1773
<1774=1776,1775
<1776=1778,1777
<1780=1781
<1781=1791,1782
<1782=1786,1783
<1783=1785,1784
<1786=1788,1787
<1788=1790,1789
<1791=1793,1792
<1793=1795,1794
<1795=1797,1796
<1798=1799
<1799=1803,1800
<1800=1802,1801
<1804=1805
<1805=1816,1815,1806
<1806=1814,1807
<1807=1809,1808
<1809=1811,1810
<1811=1813,1812
<1817=1819,1818
<1820=1821
<1821=1832,1822
<1822=1824,1823
<1824=1825
<1825=1827,1826
<1827=1829,1828
<1829=1831,1830
<1833=1834
<1834=1835
<1835=1840,1839,1836
<1836=1838,1837
<1841=1843,1842
<1844=1845
<1845=1852,1846
<1846=1848,1847
<1848=1849
<1849=1851,1850
<1853=1854
<1854=1855
<1855=1860,1859,1856
<1856=1858,1857
<1861=1891,1878,1875,1862
<1862=1863
<1863=1864
<1864=1866,1865
<1866=1868,1867
<1868=1870,1869
<1870=1872,1871
<1872=1874,1873
<1875=1877,1876
<1878=1879
<1879=1890,1880
<1880=1882,1881
<1882=1883
<1883=1885,1884
<1885=1887,1886
<1887=1889,1888
<1891=1892
<1892=1893
<1893=1898,1897,1894
<1894=1896,1895
<1899=1900
<1900=1902,1901
<1903=1904
<1905=1928,1906
<1906=1926,1922,1921,1919,1915,1914,1912,1908,1907
<1908=1909
<1909=1911,1910
<1912=1913
<1915=1916
<1916=1918,1917
<1919=1920
<1922=1923
<1923=1925,1924
<1926=1927
<1928=1929
<1929=1931,1930
<1931=1933,1932
<1934=1935
<1935=1940,1939,1936
<1936=1938,1937
<1941=1942
<1942=1944,1943
<1999=2005,2004,2000
<2000=2001
<2001=2003,2002
<2005=2006
<2006=2007
<2007=2011,2008
<2008=2009
<2009=2010
<2011=2012
<2012=2014,2013
<2020=2026,2025,2021
<2021=2022
<2022=2024,2023
<2026=2038,2027
<2027=2028
<2028=2030,2029
<2030=2031
<2031=2033,2032
<2033=2035,2034
<2035=2037,2036
<2038=2039
<2039=2043,2040
<2040=2041
<2041=2042
<2043=2044
<2044=2046,2045
<2058=2064,2063,2059
<2059=2060
<2060=2062,2061
<2064=2065
<2065=2066
<2066=2070,2067
<2067=2068
<2068=2069
<2070=2071
<2071=2073,2072
<2079=2088,2087,2080
<2080=2084,2081
<2081=2083,2082
<2084=2086,2085
<2088=2093,2089
<2089=2090
<2090=2092,2091
<2093=2094
<2094=2098,2095
<2095=2096
<2096=2097
<2098=2099
<2099=2101,2100
<2109=2118,2117,2110
<2110=2114,2111
<2111=2113,2112
<2114=2116,2115
<2118=2123,2119
<2119=2120
<2120=2122,2121
<2123=2124
<2124=2128,2125
<2125=2126
<2126=2127
<2128=2129
<2129=2131,2130
<2139=2148,2147,2140
<2140=2144,2141
<2141=2143,2142
<2144=2146,2145
<2148=2153,2149
<2149=2150
<2150=2152,2151
<2153=2154
<2154=2158,2155
<2155=2156
<2156=2157
<2158=2159
<2159=2161,2160
<2169=2178,2177,2170
<2170=2174,2171
<2171=2173,2172
<2174=2176,2175
<2178=2188,2179
<2179=2180
<2180=2184,2181
<2181=2182
<2182=2183
<2184=2185
<2185=2187,2186
<2188=2189
<2189=2191,2190
<2199=2208,2207,2200
<2200=2204,2201
<2201=2203,2202
<2204=2206,2205
<2208=2218,2209
<2209=2210
<2210=2214,2211
<2211=2212
<2212=2213
<2214=2215
<2215=2217,2216
<2218=2219
<2219=2221,2220
<2229=2235,2234,2230
<2230=2231
<2231=2233,2232
<2235=2276,2267,2236
<2236=2261,2237
<2237=2238
<2238=2251,2239
<2239=2240
<2240=2241
<2241=2243,2242
<2243=2244
<2244=2246,2245
<2246=2248,2247
<2248=2250,2249
<2251=2252
<2252=2260,2253
<2253=2255,2254
<2255=2257,2256
<2257=2259,2258
<2261=2262
<2262=2264,2263
<2264=2266,2265
<2267=2268
<2268=2272,2269
<2269=2270
<2270=2271
<2272=2273
<2273=2275,2274
<2276=2277
<2277=2281,2278
<2278=2279
<2279=2280
<2281=2282
<2282=2284,2283
<2302=2311,2310,2303
<2303=2307,2304
<2304=2306,2305
<2307=2309,2308
<2311=2329,2325,2312
<2312=2323,2313
<2313=2314
<2314=2315
<2315=2319,2316
<2316=2317
<2317=2318
<2319=2320
<2320=2322,2321
<2323=2324
<2325=2326
<2326=2328,2327
<2329=2330
<2330=2334,2331
<2331=2332
<2332=2333
<2334=2335
<2335=2337,2336
<2347=2350,2349,2348
<2350=2372,2351
<2351=2366,2352
<2352=2353
<2353=2354
<2354=2358,2355
<2355=2356
<2356=2357
<2358=2359
<2359=2361,2360
<2361=2363,2362
<2363=2365,2364
<2366=2367
<2367=2369,2368
<2369=2371,2370
<2372=2373
<2373=2379,2374
<2374=2377,2375
<2375=2376
<2377=2378
<2379=2380
<2390=2399,2398,2391
<2391=2395,2392
<2392=2394,2393
<2395=2397,2396
<2399=2404,2400
<2400=2401
<2401=2403,2402
<2404=2405
<2405=2409,2406
<2406=2407
<2407=2408
<2409=2410
<2410=2412,2411
<2420=2429,2428,2421
<2421=2425,2422
<2422=2424,2423
<2425=2427,2426
<2429=2434,2430
<2430=2431
<2431=2433,2432
<2434=2435
<2435=2439,2436
<2436=2437
<2437=2438
<2439=2440
<2440=2442,2441
<2450=2459,2458,2451
<2451=2455,2452
<2452=2454,2453
<2455=2457,2456
<2459=2464,2460
<2460=2461
<2461=2463,2462
<2464=2465
<2465=2469,2466
<2466=2467
<2467=2468
<2469=2470
<2470=2472,2471
<2480=2489,2488,2481
<2481=2485,2482
<2482=2484,2483
<2485=2487,2486
<2489=3437,3426,3417,3413,2492,2490
<2490=2491
<2492=3411,2493
<2493=3409,3292,3291,3289,3276,3275,3273,3258,3216,3209,3208,3206,3185,3149,3142,3141,3139,3118,3111,3110,3108,3095,3094,3092,3079,3078,3076,3061,3025,2494,2495,2538,2540,2541,2554,2556,2557,2564,2600,2615,2617,2618,2625,2661,2676,2678,2679,2692,2694,2695,2702,2738,2753,2755,2756,2769,2771,2772,2806,2808,2809,2822,2824,2825,2832,2868,2889,2891,2892,2899,2939,2954,2956,2957,2964,3000,3015,3017,3018
<2495=2532,2496
<2496=2525,2499,2497
<2497=2498
<2499=2500
<2500=2517,2501
<2501=2515,2506,2502
<2502=2503
<2503=2505,2504
<2506=2507
<2507=2509,2508
<2509=2510
<2510=2512,2511
<2512=2514,2513
<2515=2516
<2517=2518
<2518=2520,2519
<2520=2522,2521
<2522=2524,2523
<2525=2526
<2526=2531,2530,2527
<2527=2529,2528
<2532=2533
<2533=2535,2534
<2535=2537,2536
<2538=2539
<2541=2542
<2542=2546,2543
<2543=2544
<2544=2545
<2546=2547
<2547=2549,2548
<2549=2551,2550
<2551=2553,2552
<2554=2555
<2557=2558
<2558=2560,2559
<2560=2561
<2561=2563,2562
<2564=2565
<2565=2599,2566
<2566=2598,2567
<2567=2586,2568
<2568=2585,2569
<2569=2584,2570
<2570=2583,2571
<2571=2575,2572
<2572=2573
<2573=2574
<2575=2576
<2576=2578,2577
<2578=2580,2579
<2580=2582,2581
<2586=2590,2587
<2587=2588
<2588=2589
<2590=2591
<2591=2593,2592
<2593=2595,2594
<2595=2597,2596
<2600=2601
<2601=2614,2602
<2602=2606,2603
<2603=2604
<2604=2605
<2606=2607
<2607=2609,2608
<2609=2611,2610
<2611=2613,2612
<2615=2616
<2618=2619
<2619=2621,2620
<2621=2622
<2622=2624,2623
<2625=2626
<2626=2660,2627
<2627=2659,2628
<2628=2647,2629
<2629=2646,2630
<2630=2645,2631
<2631=2644,2632
<2632=2636,2633
<2633=2634
<2634=2635
<2636=2637
<2637=2639,2638
<2639=2641,2640
<2641=2643,2642
<2647=2651,2648
<2648=2649
<2649=2650
<2651=2652
<2652=2654,2653
<2654=2656,2655
<2656=2658,2657
<2661=2662
<2662=2675,2663
<2663=2667,2664
<2664=2665
<2665=2666
<2667=2668
<2668=2670,2669
<2670=2672,2671
<2672=2674,2673
<2676=2677
<2679=2680
<2680=2684,2681
<2681=2682
<2682=2683
<2684=2685
<2685=2687,2686
<2687=2689,2688
<2689=2691,2690
<2692=2693
<2695=2696
<2696=2698,2697
<2698=2699
<2699=2701,2700
<2702=2703
<2703=2737,2704
<2704=2736,2705
<2705=2724,2706
<2706=2723,2707
<2707=2722,2708
<2708=2721,2709
<2709=2713,2710
<2710=2711
<2711=2712
<2713=2714
<2714=2716,2715
<2716=2718,2717
<2718=2720,2719
<2724=2728,2725
<2725=2726
<2726=2727
<2728=2729
<2729=2731,2730
<2731=2733,2732
<2733=2735,2734
<2738=2739
<2739=2752,2740
<2740=2744,2741
<2741=2742
<2742=2743
<2744=2745
<2745=2747,2746
<2747=2749,2748
<2749=2751,2750
<2753=2754
<2756=2757
<2757=2761,2758
<2758=2759
<2759=2760
<2761=2762
<2762=2764,2763
<2764=2766,2765
<2766=2768,2767
<2769=2770
<2772=2800,2787,2773
<2773=2774
<2774=2775
<2775=2779,2776
<2776=2777
<2777=2778
<2779=2780
<2780=2782,2781
<2782=2784,2783
<2784=2786,2785
<2787=2788
<2788=2792,2789
<2789=2790
<2790=2791
<2792=2793
<2793=2795,2794
<2795=2797,2796
<2797=2799,2798
<2800=2801
<2801=2803,2802
<2803=2805,2804
<2806=2807
<2809=2810
<2810=2814,2811
<2811=2812
<2812=2813
<2814=2815
<2815=2817,2816
<2817=2819,2818
<2819=2821,2820
<2822=2823
<2825=2826
<2826=2828,2827
<2828=2829
<2829=2831,2830
<2832=2833
<2833=2867,2834
<2834=2866,2835
<2835=2854,2836
<2836=2853,2837
<2837=2852,2838
<2838=2851,2839
<2839=2843,2840
<2840=2841
<2841=2842
<2843=2844
<2844=2846,2845
<2846=2848,2847
<2848=2850,2849
<2854=2858,2855
<2855=2856
<2856=2857
<2858=2859
<2859=2861,2860
<2861=2863,2862
<2863=2865,2864
<2868=2869
<2869=2888,2870
<2870=2876,2871
<2871=2875,2872
<2872=2874,2873
<2876=2880,2877
<2877=2878
<2878=2879
<2880=2881
<2881=2883,2882
<2883=2885,2884
<2885=2887,2886
<2889=2890
<2892=2893
<2893=2895,2894
<2895=2896
<2896=2898,2897
<2899=2900
<2900=2938,2901
<2901=2937,2902
<2902=2925,2903
<2903=2924,2904
<2904=2919,2905
<2905=2918,2906
<2906=2910,2907
<2907=2908
<2908=2909
<2910=2911
<2911=2913,2912
<2913=2915,2914
<2915=2917,2916
<2919=2921,2920
<2921=2923,2922
<2925=2929,2926
<2926=2927
<2927=2928
<2929=2930
<2930=2932,2931
<2932=2934,2933
<2934=2936,2935
<2939=2940
<2940=2953,2941
<2941=2945,2942
<2942=2943
<2943=2944
<2945=2946
<2946=2948,2947
<2948=2950,2949
<2950=2952,2951
<2954=2955
<2957=2958
<2958=2960,2959
<2960=2961
<2961=2963,2962
<2964=2965
<2965=2999,2966
<2966=2998,2967
<2967=2986,2968
<2968=2985,2969
<2969=2984,2970
<2970=2983,2971
<2971=2975,2972
<2972=2973
<2973=2974
<2975=2976
<2976=2978,2977
<2978=2980,2979
<2980=2982,2981
<2986=2990,2987
<2987=2988
<2988=2989
<2990=2991
<2991=2993,2992
<2993=2995,2994
<2995=2997,2996
<3000=3001
<3001=3014,3002
<3002=3006,3003
<3003=3004
<3004=3005
<3006=3007
<3007=3009,3008
<3009=3011,3010
<3011=3013,3012
<3015=3016
<3018=3019
<3019=3021,3020
<3021=3022
<3022=3024,3023
<3025=3026
<3026=3060,3027
<3027=3059,3028
<3028=3047,3029
<3029=3046,3030
<3030=3045,3031
<3031=3044,3032
<3032=3036,3033
<3033=3034
<3034=3035
<3036=3037
<3037=3039,3038
<3039=3041,3040
<3041=3043,3042
<3047=3051,3048
<3048=3049
<3049=3050
<3051=3052
<3052=3054,3053
<3054=3056,3055
<3056=3058,3057
<3061=3062
<3062=3075,3063
<3063=3067,3064
<3064=3065
<3065=3066
<3067=3068
<3068=3070,3069
<3070=3072,3071
<3072=3074,3073
<3076=3077
<3079=3080
<3080=3084,3081
<3081=3082
<3082=3083
<3084=3085
<3085=3087,3086
<3087=3089,3088
<3089=3091,3090
<3092=3093
<3095=3096
<3096=3100,3097
<3097=3098
<3098=3099
<3100=3101
<3101=3103,3102
<3103=3105,3104
<3105=3107,3106
<3108=3109
<3111=3112
<3112=3114,3113
<3114=3115
<3115=3117,3116
<3118=3119
<3119=3138,3120
<3120=3126,3121
<3121=3125,3122
<3122=3124,3123
<3126=3130,3127
<3127=3128
<3128=3129
<3130=3131
<3131=3133,3132
<3133=3135,3134
<3135=3137,3136
<3139=3140
<3142=3143
<3143=3145,3144
<3145=3146
<3146=3148,3147
<3149=3150
<3150=3184,3151
<3151=3183,3152
<3152=3171,3153
<3153=3170,3154
<3154=3169,3155
<3155=3168,3156
<3156=3160,3157
<3157=3158
<3158=3159
<3160=3161
<3161=3163,3162
<3163=3165,3164
<3165=3167,3166
<3171=3175,3172
<3172=3173
<3173=3174
<3175=3176
<3176=3178,3177
<3178=3180,3179
<3180=3182,3181
<3185=3186
<3186=3205,3187
<3187=3193,3188
<3188=3192,3189
<3189=3191,3190
<3193=3197,3194
<3194=3195
<3195=3196
<3197=3198
<3198=3200,3199
<3200=3202,3201
<3202=3204,3203
<3206=3207
<3209=3210
<3210=3212,3211
<3212=3213
<3213=3215,3214
<3216=3217
<3217=3257,3218
<3218=3256,3219
<3219=3253,3220
<3220=3252,3221
<3221=3240,3222
<3222=3239,3223
<3223=3238,3224
<3224=3237,3225
<3225=3229,3226
<3226=3227
<3227=3228
<3229=3230
<3230=3232,3231
<3232=3234,3233
<3234=3236,3235
<3240=3244,3241
<3241=3242
<3242=3243
<3244=3245
<3245=3247,3246
<3247=3249,3248
<3249=3251,3250
<3253=3255,3254
<3258=3259
<3259=3272,3260
<3260=3264,3261
<3261=3262
<3262=3263
<3264=3265
<3265=3267,3266
<3267=3269,3268
<3269=3271,3270
<3273=3274
<3276=3277
<3277=3281,3278
<3278=3279
<3279=3280
<3281=3282
<3282=3284,3283
<3284=3286,3285
<3286=3288,3287
<3289=3290
<3292=3403,3351,3293
<3293=3294
<3294=3347,3330,3313,3302,3295
<3295=3296
<3296=3298,3297
<3298=3299
<3299=3301,3300
<3302=3303
<3303=3312,3304
<3304=3310,3305
<3305=3306
<3306=3307
<3307=3309,3308
<3310=3311
<3313=3314
<3314=3329,3315
<3315=3317,3316
<3317=3321,3318
<3318=3319
<3319=3320
<3321=3322
<3322=3324,3323
<3324=3326,3325
<3326=3328,3327
<3330=3331
<3331=3346,3332
<3332=3334,3333
<3334=3338,3335
<3335=3336
<3336=3337
<3338=3339
<3339=3341,3340
<3341=3343,3342
<3343=3345,3344
<3347=3348
<3348=3350,3349
<3351=3399,3382,3365,3359,3352
<3352=3353
<3353=3355,3354
<3355=3356
<3356=3358,3357
<3359=3360
<3360=3364,3361
<3361=3363,3362
<3365=3366
<3366=3381,3367
<3367=3369,3368
<3369=3373,3370
<3370=3371
<3371=3372
<3373=3374
<3374=3376,3375
<3376=3378,3377
<3378=3380,3379
<3382=3383
<3383=3398,3384
<3384=3386,3385
<3386=3390,3387
<3387=3388
<3388=3389
<3390=3391
<3391=3393,3392
<3393=3395,3394
<3395=3397,3396
<3399=3400
<3400=3402,3401
<3403=3404
<3404=3406,3405
<3406=3408,3407
<3409=3410
<3411=3412
<3413=3414
<3414=3416,3415
<3417=3418
<3418=3425,3424,3419
<3419=3423,3420
<3420=3422,3421
<3426=3427
<3427=3436,3435,3428
<3428=3434,3429
<3429=3431,3430
<3431=3433,3432
<3437=3440,3438
<3438=3439
<3440=3441
<3441=3452,3442
<3442=3451,3443
<3443=3445,3444
<3445=3446
<3446=3448,3447
<3448=3450,3449
<3452=3454,3453
<3485=3491,3490,3486
<3486=3487
<3487=3489,3488
<3491=3536,3499,3492
<3492=3493
<3493=3495,3494
<3495=3496
<3496=3498,3497
<3499=3528,3517,3514,3500
<3500=3501
<3501=3502
<3502=3513,3503
<3503=3505,3504
<3505=3511,3506
<3506=3509,3507
<3507=3508
<3509=3510
<3511=3512
<3514=3516,3515
<3517=3518
<3518=3527,3519
<3519=3521,3520
<3521=3522
<3522=3524,3523
<3524=3526,3525
<3528=3529
<3529=3530
<3530=3535,3534,3531
<3531=3533,3532
<3536=3537
<3537=3539,3538
<3550=3556,3555,3551
<3551=3552
<3552=3554,3553
<3556=5041,5034,3559,3557
<3557=3558
<3559=5026,5015,5012,3560
<3560=5004,4993,4984,4976,3561
<3561=4974,3562
<3562=4972,4766,4765,4763,4594,4593,4591,4484,4483,4481,4425,4424,4422,3563,3564,3601,3603,3604,3638,3640,3641,3642,3644,3645,3690,3692,3693,3738,3740,3741,3780,3782,3783,3824,3826,3827,3857,3859,3860,3966,3968,3969,4020,4022,4023,4068,4070,4071,4116,4118,4119,4173,4175,4176,4230,4232,4233,4323,4325,4326,4367,4369,4370
<3564=3596,3576,3569,3565
<3565=3566
<3566=3568,3567
<3569=3570
<3570=3574,3571
<3571=3572
<3572=3573
<3574=3575
<3576=3577
<3577=3594,3578
<3578=3588,3586,3579
<3579=3580
<3580=3584,3581
<3581=3582
<3582=3583
<3584=3585
<3586=3587
<3588=3589
<3589=3593,3590
<3590=3592,3591
<3594=3595
<3596=3597
<3597=3600,3599,3598
<3601=3602
<3604=3605
<3605=3632,3606
<3606=3607
<3607=3624,3608
<3608=3622,3613,3609
<3609=3610
<3610=3612,3611
<3613=3614
<3614=3616,3615
<3616=3617
<3617=3619,3618
<3619=3621,3620
<3622=3623
<3624=3625
<3625=3627,3626
<3627=3629,3628
<3629=3631,3630
<3632=3633
<3633=3635,3634
<3635=3637,3636
<3638=3639
<3642=3643
<3645=3679,3664,3646
<3646=3647
<3647=3660,3648
<3648=3651,3649
<3649=3650
<3651=3652
<3652=3658,3653
<3653=3656,3654
<3654=3655
<3656=3657
<3658=3659
<3660=3661
<3661=3663,3662
<3664=3665
<3665=3673,3666
<3666=3669,3667
<3667=3668
<3669=3670
<3670=3672,3671
<3673=3674
<3674=3676,3675
<3676=3678,3677
<3679=3680
<3680=3684,3681
<3681=3682
<3682=3683
<3684=3685
<3685=3687,3686
<3687=3689,3688
<3690=3691
<3693=3727,3712,3694
<3694=3695
<3695=3708,3696
<3696=3699,3697
<3697=3698
<3699=3700
<3700=3706,3701
<3701=3704,3702
<3702=3703
<3704=3705
<3706=3707
<3708=3709
<3709=3711,3710
<3712=3713
<3713=3721,3714
<3714=3717,3715
<3715=3716
<3717=3718
<3718=3720,3719
<3721=3722
<3722=3724,3723
<3724=3726,3725
<3727=3728
<3728=3732,3729
<3729=3730
<3730=3731
<3732=3733
<3733=3735,3734
<3735=3737,3736
<3738=3739
<3741=3769,3760,3742
<3742=3743
<3743=3756,3744
<3744=3747,3745
<3745=3746
<3747=3748
<3748=3754,3749
<3749=3752,3750
<3750=3751
<3752=3753
<3754=3755
<3756=3757
<3757=3759,3758
<3760=3761
<3761=3763,3762
<3763=3764
<3764=3766,3765
<3766=3768,3767
<3769=3770
<3770=3774,3771
<3771=3772
<3772=3773
<3774=3775
<3775=3777,3776
<3777=3779,3778
<3780=3781
<3783=3813,3795,3784
<3784=3785
<3785=3789,3786
<3786=3787
<3787=3788
<3789=3790
<3790=3792,3791
<3792=3794,3793
<3795=3796
<3796=3809,3797
<3797=3800,3798
<3798=3799
<3800=3801
<3801=3807,3802
<3802=3805,3803
<3803=3804
<3805=3806
<3807=3808
<3809=3810
<3810=3812,3811
<3813=3814
<3814=3818,3815
<3815=3816
<3816=3817
<3818=3819
<3819=3821,3820
<3821=3823,3822
<3824=3825
<3827=3839,3828
<3828=3829
<3829=3833,3830
<3830=3831
<3831=3832
<3833=3834
<3834=3836,3835
<3836=3838,3837
<3839=3840
<3840=3853,3841
<3841=3844,3842
<3842=3843
<3844=3845
<3845=3851,3846
<3846=3849,3847
<3847=3848
<3849=3850
<3851=3852
<3853=3854
<3854=3856,3855
<3857=3858
<3860=3861
<3861=3960,3917,3862
<3862=3863
<3863=3906,3899,3884,3864
<3864=3865
<3865=3880,3866
<3866=3871,3869,3867
<3867=3868
<3869=3870
<3871=3872
<3872=3878,3873
<3873=3876,3874
<3874=3875
<3876=3877
<3878=3879
<3880=3881
<3881=3883,3882
<3884=3885
<3885=3893,3886
<3886=3889,3887
<3887=3888
<3889=3890
<3890=3892,3891
<3893=3894
<3894=3896,3895
<3896=3898,3897
<3899=3900
<3900=3905,3904,3901
<3901=3903,3902
<3906=3907
<3907=3911,3908
<3908=3909
<3909=3910
<3911=3912
<3912=3914,3913
<3914=3916,3915
<3917=3947,3929,3918
<3918=3919
<3919=3923,3920
<3920=3921
<3921=3922
<3923=3924
<3924=3926,3925
<3926=3928,3927
<3929=3930
<3930=3943,3931
<3931=3934,3932
<3932=3933
<3934=3935
<3935=3941,3936
<3936=3939,3937
<3937=3938
<3939=3940
<3941=3942
<3943=3944
<3944=3946,3945
<3947=3948
<3948=3954,3949
<3949=3952,3950
<3950=3951
<3952=3953
<3954=3955
<3955=3957,3956
<3957=3959,3958
<3960=3961
<3961=3963,3962
<3963=3965,3964
<3966=3967
<3969=3970
<3970=4014,3971
<3971=4001,3983,3972
<3972=3973
<3973=3977,3974
<3974=3975
<3975=3976
<3977=3978
<3978=3980,3979
<3980=3982,3981
<3983=3984
<3984=3997,3985
<3985=3988,3986
<3986=3987
<3988=3989
<3989=3995,3990
<3990=3993,3991
<3991=3992
<3993=3994
<3995=3996
<3997=3998
<3998=4000,3999
<4001=4002
<4002=4006,4003
<4003=4004
<4004=4005
<4006=4007
<4007=4009,4008
<4009=4011,4010
<4011=4013,4012
<4014=4015
<4015=4017,4016
<4017=4019,4018
<4020=4021
<4023=4053,4035,4024
<4024=4025
<4025=4029,4026
<4026=4027
<4027=4028
<4029=4030
<4030=4032,4031
<4032=4034,4033
<4035=4036
<4036=4049,4037
<4037=4040,4038
<4038=4039
<4040=4041
<4041=4047,4042
<4042=4045,4043
<4043=4044
<4045=4046
<4047=4048
<4049=4050
<4050=4052,4051
<4053=4054
<4054=4062,4055
<4055=4058,4056
<4056=4057
<4058=4059
<4059=4061,4060
<4062=4063
<4063=4065,4064
<4065=4067,4066
<4068=4069
<4071=4101,4083,4072
<4072=4073
<4073=4077,4074
<4074=4075
<4075=4076
<4077=4078
<4078=4080,4079
<4080=4082,4081
<4083=4084
<4084=4097,4085
<4085=4088,4086
<4086=4087
<4088=4089
<4089=4095,4090
<4090=4093,4091
<4091=4092
<4093=4094
<4095=4096
<4097=4098
<4098=4100,4099
<4101=4102
<4102=4110,4103
<4103=4104
<4104=4105
<4105=4107,4106
<4107=4109,4108
<4110=4111
<4111=4113,4112
<4113=4115,4114
<4116=4117
<4119=4156,4149,4131,4120
<4120=4121
<4121=4125,4122
<4122=4123
<4123=4124
<4125=4126
<4126=4128,4127
<4128=4130,4129
<4131=4132
<4132=4145,4133
<4133=4136,4134
<4134=4135
<4136=4137
<4137=4143,4138
<4138=4141,4139
<4139=4140
<4141=4142
<4143=4144
<4145=4146
<4146=4148,4147
<4149=4150
<4150=4154,4151
<4151=4152
<4152=4153
<4154=4155
<4156=4157
<4157=4167,4158
<4158=4161,4159
<4159=4160
<4161=4162
<4162=4166,4163
<4163=4165,4164
<4167=4168
<4168=4170,4169
<4170=4172,4171
<4173=4174
<4176=4213,4206,4188,4177
<4177=4178
<4178=4182,4179
<4179=4180
<4180=4181
<4182=4183
<4183=4185,4184
<4185=4187,4186
<4188=4189
<4189=4202,4190
<4190=4193,4191
<4191=4192
<4193=4194
<4194=4200,4195
<4195=4198,4196
<4196=4197
<4198=4199
<4200=4201
<4202=4203
<4203=4205,4204
<4206=4207
<4207=4211,4208
<4208=4209
<4209=4210
<4211=4212
<4213=4214
<4214=4224,4215
<4215=4218,4216
<4216=4217
<4218=4219
<4219=4223,4220
<4220=4222,4221
<4224=4225
<4225=4227,4226
<4227=4229,4228
<4230=4231
<4233=4305,4270,4263,4245,4234
<4234=4235
<4235=4239,4236
<4236=4237
<4237=4238
<4239=4240
<4240=4242,4241
<4242=4244,4243
<4245=4246
<4246=4259,4247
<4247=4250,4248
<4248=4249
<4250=4251
<4251=4257,4252
<4252=4255,4253
<4253=4254
<4255=4256
<4257=4258
<4259=4260
<4260=4262,4261
<4263=4264
<4264=4268,4265
<4265=4266
<4266=4267
<4268=4269
<4270=4303,4271
<4271=4294,4283,4272
<4272=4273
<4273=4281,4274
<4274=4275
<4275=4276
<4276=4280,4277
<4277=4279,4278
<4281=4282
<4283=4284
<4284=4288,4285
<4285=4286
<4286=4287
<4288=4289
<4289=4291,4290
<4291=4293,4292
<4294=4295
<4295=4302,4301,4296
<4296=4300,4297
<4297=4299,4298
<4303=4304
<4305=4306
<4306=4322,4321,4307
<4307=4320,4308
<4308=4314,4309
<4309=4310
<4310=4311
<4311=4313,4312
<4314=4315
<4315=4317,4316
<4317=4319,4318
<4323=4324
<4326=4352,4345,4327
<4327=4328
<4328=4341,4329
<4329=4332,4330
<4330=4331
<4332=4333
<4333=4339,4334
<4334=4337,4335
<4335=4336
<4337=4338
<4339=4340
<4341=4342
<4342=4344,4343
<4345=4346
<4346=4350,4347
<4347=4348
<4348=4349
<4350=4351
<4352=4353
<4353=4361,4354
<4354=4355
<4355=4356
<4356=4358,4357
<4358=4360,4359
<4361=4362
<4362=4364,4363
<4364=4366,4365
<4367=4368
<4370=4407,4400,4382,4371
<4371=4372
<4372=4376,4373
<4373=4374
<4374=4375
<4376=4377
<4377=4379,4378
<4379=4381,4380
<4382=4383
<4383=4396,4384
<4384=4387,4385
<4385=4386
<4387=4388
<4388=4394,4389
<4389=4392,4390
<4390=4391
<4392=4393
<4394=4395
<4396=4397
<4397=4399,4398
<4400=4401
<4401=4405,4402
<4402=4403
<4403=4404
<4405=4406
<4407=4408
<4408=4416,4409
<4409=4410
<4410=4411
<4411=4413,4412
<4413=4415,4414
<4416=4417
<4417=4419,4418
<4419=4421,4420
<4422=4423
<4425=4462,4455,4437,4426
<4426=4427
<4427=4431,4428
<4428=4429
<4429=4430
<4431=4432
<4432=4434,4433
<4434=4436,4435
<4437=4438
<4438=4451,4439
<4439=4442,4440
<4440=4441
<4442=4443
<4443=4449,4444
<4444=4447,4445
<4445=4446
<4447=4448
<4449=4450
<4451=4452
<4452=4454,4453
<4455=4456
<4456=4460,4457
<4457=4458
<4458=4459
<4460=4461
<4462=4463
<4463=4475,4464
<4464=4467,4465
<4465=4466
<4467=4468
<4468=4474,4469
<4469=4471,4470
<4471=4473,4472
<4475=4476
<4476=4478,4477
<4478=4480,4479
<4481=4482
<4484=4584,4514,4496,4485
<4485=4486
<4486=4490,4487
<4487=4488
<4488=4489
<4490=4491
<4491=4493,4492
<4493=4495,4494
<4496=4497
<4497=4510,4498
<4498=4501,4499
<4499=4500
<4501=4502
<4502=4508,4503
<4503=4506,4504
<4504=4505
<4506=4507
<4508=4509
<4510=4511
<4511=4513,4512
<4514=4578,4565,4515
<4515=4516
<4516=4559,4546,4517
<4517=4518
<4518=4540,4527,4519
<4519=4520
<4520=4521
<4521=4525,4522
<4522=4523
<4523=4524
<4525=4526
<4527=4528
<4528=4534,4529
<4529=4532,4530
<4530=4531
<4532=4533
<4534=4535
<4535=4537,4536
<4537=4539,4538
<4540=4541
<4541=4543,4542
<4543=4545,4544
<4546=4547
<4547=4553,4548
<4548=4551,4549
<4549=4550
<4551=4552
<4553=4554
<4554=4556,4555
<4556=4558,4557
<4559=4560
<4560=4562,4561
<4562=4564,4563
<4565=4566
<4566=4572,4567
<4567=4570,4568
<4568=4569
<4570=4571
<4572=4573
<4573=4575,4574
<4575=4577,4576
<4578=4579
<4579=4581,4580
<4581=4583,4582
<4584=4585
<4585=4589,4586
<4586=4587
<4587=4588
<4589=4590
<4591=4592
<4594=4744,4737,4726,4709,4698,4683,4664,4645,4626,4613,4595
<4595=4596
<4596=4609,4597
<4597=4600,4598
<4598=4599
<4600=4601
<4601=4607,4602
<4602=4605,4603
<4603=4604
<4605=4606
<4607=4608
<4609=4610
<4610=4612,4611
<4613=4614
<4614=4618,4615
<4615=4616
<4616=4617
<4618=4619
<4619=4621,4620
<4621=4623,4622
<4623=4625,4624
<4626=4627
<4627=4633,4628
<4628=4631,4629
<4629=4630
<4631=4632
<4633=4634
<4634=4636,4635
<4636=4638,4637
<4638=4640,4639
<4640=4642,4641
<4642=4644,4643
<4645=4646
<4646=4652,4647
<4647=4650,4648
<4648=4649
<4650=4651
<4652=4653
<4653=4655,4654
<4655=4657,4656
<4657=4659,4658
<4659=4661,4660
<4661=4663,4662
<4664=4665
<4665=4671,4666
<4666=4669,4667
<4667=4668
<4669=4670
<4671=4672
<4672=4674,4673
<4674=4676,4675
<4676=4678,4677
<4678=4680,4679
<4680=4682,4681
<4683=4684
<4684=4686,4685
<4686=4687
<4687=4689,4688
<4689=4691,4690
<4691=4693,4692
<4693=4695,4694
<4695=4697,4696
<4698=4699
<4699=4701,4700
<4701=4702
<4702=4704,4703
<4704=4706,4705
<4706=4708,4707
<4709=4710
<4710=4721,4711
<4711=4719,4712
<4712=4717,4715,4713
<4713=4714
<4715=4716
<4717=4718
<4719=4720
<4721=4723,4722
<4723=4725,4724
<4726=4727
<4727=4731,4728
<4728=4729
<4729=4730
<4731=4732
<4732=4734,4733
<4734=4736,4735
<4737=4738
<4738=4742,4739
<4739=4740
<4740=4741
<4742=4743
<4744=4745
<4745=4755,4746
<4746=4747
<4747=4748
<4748=4750,4749
<4750=4752,4751
<4752=4754,4753
<4755=4756
<4756=4758,4757
<4758=4760,4759
<4760=4762,4761
<4763=4764
<4766=4957,4950,4767
<4767=4944,4801,4768
<4768=4769
<4769=4781,4770
<4770=4771
<4771=4773,4772
<4773=4774
<4774=4776,4775
<4776=4778,4777
<4778=4780,4779
<4781=4782
<4782=4797,4783
<4783=4788,4786,4784
<4784=4785
<4786=4787
<4788=4789
<4789=4795,4790
<4790=4793,4791
<4791=4792
<4793=4794
<4795=4796
<4797=4798
<4798=4800,4799
<4801=4926,4915,4898,4887,4872,4853,4834,4815,4802
<4802=4803
<4803=4807,4804
<4804=4805
<4805=4806
<4807=4808
<4808=4810,4809
<4810=4812,4811
<4812=4814,4813
<4815=4816
<4816=4822,4817
<4817=4820,4818
<4818=4819
<4820=4821
<4822=4823
<4823=4825,4824
<4825=4827,4826
<4827=4829,4828
<4829=4831,4830
<4831=4833,4832
<4834=4835
<4835=4841,4836
<4836=4839,4837
<4837=4838
<4839=4840
<4841=4842
<4842=4844,4843
<4844=4846,4845
<4846=4848,4847
<4848=4850,4849
<4850=4852,4851
<4853=4854
<4854=4860,4855
<4855=4858,4856
<4856=4857
<4858=4859
<4860=4861
<4861=4863,4862
<4863=4865,4864
<4865=4867,4866
<4867=4869,4868
<4869=4871,4870
<4872=4873
<4873=4875,4874
<4875=4876
<4876=4878,4877
<4878=4880,4879
<4880=4882,4881
<4882=4884,4883
<4884=4886,4885
<4887=4888
<4888=4890,4889
<4890=4891
<4891=4893,4892
<4893=4895,4894
<4895=4897,4896
<4898=4899
<4899=4910,4900
<4900=4908,4901
<4901=4906,4904,4902
<4902=4903
<4904=4905
<4906=4907
<4908=4909
<4910=4912,4911
<4912=4914,4913
<4915=4916
<4916=4920,4917
<4917=4918
<4918=4919
<4920=4921
<4921=4923,4922
<4923=4925,4924
<4926=4927
<4927=4940,4928
<4928=4931,4929
<4929=4930
<4931=4932
<4932=4938,4933
<4933=4936,4934
<4934=4935
<4936=4937
<4938=4939
<4940=4941
<4941=4943,4942
<4944=4945
<4945=4947,4946
<4947=4949,4948
<4950=4951
<4951=4955,4952
<4952=4953
<4953=4954
<4955=4956
<4957=4958
<4958=4964,4959
<4959=4960
<4960=4961
<4961=4963,4962
<4964=4965
<4965=4967,4966
<4967=4969,4968
<4969=4971,4970
<4972=4973
<4974=4975
<4976=4978,4977
<4978=4979
<4979=4981,4980
<4981=4983,4982
<4984=4985
<4985=4992,4991,4986
<4986=4990,4987
<4987=4989,4988
<4993=4994
<4994=5003,5002,4995
<4995=5001,4996
<4996=4998,4997
<4998=5000,4999
<5004=5005
<5005=5011,5006
<5006=5010,5007
<5007=5009,5008
<5012=5013,5014
<5015=5016
<5016=5025,5017
<5017=5019,5018
<5019=5020
<5020=5022,5021
<5022=5024,5023
<5026=5027
<5027=5028
<5028=5033,5032,5029
<5029=5031,5030
<5034=5035
<5035=5040,5039,5036
<5036=5038,5037
<5041=5042
<5042=5047,5046,5043
<5043=5045,5044
<5116=5122,5121,5117
<5117=5118
<5118=5120,5119
<5122=5123
<5123=5124
<5124=5128,5125
<5125=5126
<5126=5127
<5128=5129
<5135=5138,5137,5136
<5138=5292,5282,5275,5271,5264,5228,5219,5209,5146,5139
<5139=5140
<5140=5142,5141
<5142=5143
<5143=5145,5144
<5146=5200,5147
<5147=5195,5185,5176,5172,5166,5160,5154,5148
<5148=5149
<5149=5151,5150
<5151=5153,5152
<5154=5155
<5155=5157,5156
<5157=5159,5158
<5160=5161
<5161=5163,5162
<5163=5165,5164
<5166=5167
<5167=5169,5168
<5169=5171,5170
<5172=5173
<5173=5175,5174
<5176=5181,5177
<5177=5178
<5178=5180,5179
<5181=5182
<5182=5184,5183
<5185=5186
<5186=5194,5187
<5187=5193,5188
<5188=5192,5189
<5189=5191,5190
<5195=5196
<5196=5199,5198,5197
<5200=5201
<5201=5207,5202
<5202=5205,5203
<5203=5204
<5205=5206
<5207=5208
<5209=5210
<5210=5218,5217,5211
<5211=5213,5212
<5213=5214
<5214=5216,5215
<5219=5224,5220
<5220=5221
<5221=5223,5222
<5224=5225
<5225=5227,5226
<5228=5255,5229
<5229=5242,5230
<5230=5235,5231
<5231=5232
<5232=5234,5233
<5235=5236
<5236=5240,5237
<5237=5238
<5238=5239
<5240=5241
<5242=5243
<5243=5254,5244
<5244=5246,5245
<5246=5248,5247
<5248=5249
<5249=5251,5250
<5251=5253,5252
<5255=5256
<5256=5258,5257
<5258=5259
<5259=5261,5260
<5261=5263,5262
<5264=5265
<5265=5270,5269,5266
<5266=5268,5267
<5271=5272
<5272=5274,5273
<5275=5279,5276
<5276=5278,5277
<5279=5281,5280
<5282=5289,5286,5283
<5283=5285,5284
<5286=5288,5287
<5289=5291,5290
<5292=5293
<5293=5295,5294
<5295=5296
<5296=5298,5297
<5327=5330,5329,5328
<5330=5338,5331
<5331=5332
<5332=5334,5333
<5334=5335
<5335=5337,5336
<5338=5357,5348,5345,5339
<5339=5344,5340
<5340=5341
<5341=5343,5342
<5345=5347,5346
<5348=5349
<5349=5356,5350
<5350=5352,5351
<5352=5353
<5353=5355,5354
<5357=5358
<5358=5359
<5359=5369,5368,5360
<5360=5367,5361
<5361=5363,5362
<5363=5364
<5364=5366,5365
<5377=5380,5379,5378
<5380=5528,5523,5516,5509,5502,5495,5483,5476,5431,5404,5381
<5381=5390,5382
<5382=5383
<5383=5384
<5384=5388,5385
<5385=5386
<5386=5387
<5388=5389
<5390=5391
<5391=5398,5392
<5392=5394,5393
<5394=5395
<5395=5397,5396
<5398=5400,5399
<5400=5401
<5401=5403,5402
<5404=5422,5405
<5405=5406
<5406=5407
<5407=5420,5408
<5408=5409
<5409=5410
<5410=5412,5411
<5412=5414,5413
<5414=5415
<5415=5417,5416
<5417=5419,5418
<5420=5421
<5422=5423
<5423=5425,5424
<5425=5426
<5426=5428,5427
<5428=5430,5429
<5431=5467,5432
<5432=5440,5433
<5433=5434
<5434=5438,5435
<5435=5436
<5436=5437
<5438=5439
<5440=5441
<5441=5466,5442
<5442=5464,5443
<5443=5453,5444
<5444=5445
<5445=5447,5446
<5447=5448
<5448=5450,5449
<5450=5452,5451
<5453=5454
<5454=5456,5455
<5456=5458,5457
<5458=5459
<5459=5461,5460
<5461=5463,5462
<5464=5465
<5467=5468
<5468=5470,5469
<5470=5471
<5471=5473,5472
<5473=5475,5474
<5476=5477
<5477=5481,5478
<5478=5479
<5479=5480
<5481=5482
<5483=5484
<5484=5494,5493,5485
<5485=5492,5486
<5486=5490,5487
<5487=5488
<5488=5489
<5490=5491
<5495=5496
<5496=5500,5497
<5497=5498
<5498=5499
<5500=5501
<5502=5503
<5503=5505,5504
<5505=5506
<5506=5508,5507
<5509=5510
<5510=5512,5511
<5512=5513
<5513=5515,5514
<5516=5517
<5517=5519,5518
<5519=5520
<5520=5522,5521
<5523=5524
<5524=5526,5525
<5526=5527
<5528=5538,5529
<5529=5531,5530
<5531=5532
<5532=5536,5533
<5533=5534
<5534=5535
<5536=5537
<5538=5539
<5539=5541,5540
<5541=5542
<5542=5544,5543
<5563=5569,5568,5564
<5564=5565
<5565=5567,5566
<5569=6562,6557,6550,6540,6533,6526,5825,5725,5577,5570
<5570=5571
<5571=5573,5572
<5573=5574
<5574=5576,5575
<5577=5723,5578
<5578=5716,5709,5705,5579
<5579=5701,5580
<5580=5617,5581
<5581=5615,5582
<5582=5609,5598,5591,5587,5583
<5583=5584
<5584=5586,5585
<5587=5588
<5588=5590,5589
<5591=5592
<5592=5594,5593
<5594=5595
<5595=5597,5596
<5598=5599
<5599=5603,5600
<5600=5601
<5601=5602
<5603=5604
<5604=5606,5605
<5606=5608,5607
<5609=5610
<5610=5612,5611
<5612=5614,5613
<5615=5616
<5617=5697,5695,5618
<5618=5619
<5619=5691,5685,5620
<5620=5621
<5621=5622
<5622=5683,5665,5623
<5623=5624
<5624=5653,5625
<5625=5649,5639,5626
<5626=5627
<5627=5628
<5628=5629
<5629=5635,5630
<5630=5633,5631
<5631=5632
<5633=5634
<5635=5636
<5636=5638,5637
<5639=5640
<5640=5641
<5641=5645,5642
<5642=5643
<5643=5644
<5645=5646
<5646=5648,5647
<5649=5650
<5650=5652,5651
<5653=5654
<5654=5664,5663,5655
<5655=5662,5656
<5656=5660,5657
<5657=5658
<5658=5659
<5660=5661
<5665=5677,5666
<5666=5667
<5667=5674,5668
<5668=5672,5669
<5669=5670
<5670=5671
<5672=5673
<5674=5676,5675
<5677=5678
<5678=5680,5679
<5680=5682,5681
<5683=5684
<5685=5687,5686
<5687=5688
<5688=5690,5689
<5691=5692
<5692=5694,5693
<5695=5696
<5697=5698
<5698=5700,5699
<5701=5702
<5702=5704,5703
<5705=5706
<5706=5708,5707
<5709=5710
<5710=5715,5714,5711
<5711=5713,5712
<5716=5717
<5717=5722,5721,5718
<5718=5720,5719
<5723=5724
<5725=5823,5726
<5726=5727
<5727=5814,5728
<5728=5802,5795,5788,5780,5769,5757,5741,5735,5729
<5729=5730
<5730=5732,5731
<5732=5734,5733
<5735=5736
<5736=5738,5737
<5738=5740,5739
<5741=5753,5742
<5742=5744,5743
<5744=5745
<5745=5751,5746
<5746=5747
<5747=5748
<5748=5750,5749
<5751=5752
<5753=5754
<5754=5756,5755
<5757=5758
<5758=5768,5767,5759
<5759=5766,5760
<5760=5764,5761
<5761=5762
<5762=5763
<5764=5765
<5769=5776,5770
<5770=5772,5771
<5772=5773
<5773=5775,5774
<5776=5777
<5777=5779,5778
<5780=5781
<5781=5787,5782
<5782=5786,5783
<5783=5785,5784
<5788=5789
<5789=5794,5793,5790
<5790=5792,5791
<5795=5796
<5796=5801,5800,5797
<5797=5799,5798
<5802=5803
<5803=5813,5812,5804
<5804=5806,5805
<5806=5808,5807
<5808=5809
<5809=5811,5810
<5814=5815
<5815=5821,5816
<5816=5819,5817
<5817=5818
<5819=5820
<5821=5822
<5823=5824
<5825=6517,5826
<5826=6512,6508,6485,6479,6470,6454,5836,5827
<5827=5828
<5828=5832,5829
<5829=5830
<5830=5831
<5832=5833
<5833=5835,5834
<5836=6445,5837
<5837=6431,6417,5838
<5838=6409,5839
<5839=6390,6385,6381,5840
<5840=6377,5841
<5841=6373,5916,5909,5853,5842
<5842=5843
<5843=5847,5844
<5844=5845
<5845=5846
<5847=5848
<5848=5850,5849
<5850=5852,5851
<5853=5900,5854
<5854=5859,5855
<5855=5856
<5856=5858,5857
<5859=5894,5888,5860
<5860=5861
<5861=5882,5876,5862
<5862=5863
<5863=5870,5864
<5864=5865
<5865=5867,5866
<5867=5869,5868
<5870=5871
<5871=5873,5872
<5873=5875,5874
<5876=5877
<5877=5879,5878
<5879=5881,5880
<5882=5883
<5883=5885,5884
<5885=5887,5886
<5888=5889
<5889=5891,5890
<5891=5893,5892
<5894=5895
<5895=5897,5896
<5897=5899,5898
<5900=5901
<5901=5908,5902
<5902=5904,5903
<5904=5905
<5905=5907,5906
<5909=5910
<5910=5915,5914,5911
<5911=5913,5912
<5916=6362,6317,5917
<5917=5918
<5918=6306,6299,5919
<5919=5920
<5920=6288,6281,5921
<5921=5922
<5922=6270,6263,5923
<5923=5924
<5924=6252,6245,5925
<5925=5926
<5926=6234,6227,5927
<5927=5928
<5928=6216,6209,5929
<5929=5930
<5930=6198,6191,5931
<5931=5932
<5932=6180,6173,5933
<5933=5934
<5934=6162,6155,5935
<5935=5936
<5936=6144,6137,5937
<5937=5938
<5938=6126,6119,5939
<5939=5940
<5940=6108,6101,5941
<5941=5942
<5942=6090,6083,5943
<5943=5944
<5944=6072,6065,5945
<5945=5946
<5946=6054,6047,5947
<5947=5948
<5948=6036,6029,5949
<5949=5950
<5950=6018,6011,5951
<5951=5952
<5952=6000,5993,5953
<5953=5954
<5954=5982,5975,5955
<5955=5956
<5956=5964,5957
<5957=5958
<5958=5959
<5959=5961,5960
<5961=5963,5962
<5964=5965
<5965=5967,5966
<5967=5971,5968
<5968=5969
<5969=5970
<5971=5972
<5972=5974,5973
<5975=5976
<5976=5977
<5977=5979,5978
<5979=5981,5980
<5982=5983
<5983=5985,5984
<5985=5989,5986
<5986=5987
<5987=5988
<5989=5990
<5990=5992,5991
<5993=5994
<5994=5995
<5995=5997,5996
<5997=5999,5998
<6000=6001
<6001=6003,6002
<6003=6007,6004
<6004=6005
<6005=6006
<6007=6008
<6008=6010,6009
<6011=6012
<6012=6013
<6013=6015,6014
<6015=6017,6016
<6018=6019
<6019=6021,6020
<6021=6025,6022
<6022=6023
<6023=6024
<6025=6026
<6026=6028,6027
<6029=6030
<6030=6031
<6031=6033,6032
<6033=6035,6034
<6036=6037
<6037=6039,6038
<6039=6043,6040
<6040=6041
<6041=6042
<6043=6044
<6044=6046,6045
<6047=6048
<6048=6049
<6049=6051,6050
<6051=6053,6052
<6054=6055
<6055=6057,6056
<6057=6061,6058
<6058=6059
<6059=6060
<6061=6062
<6062=6064,6063
<6065=6066
<6066=6067
<6067=6069,6068
<6069=6071,6070
<6072=6073
<6073=6075,6074
<6075=6079,6076
<6076=6077
<6077=6078
<6079=6080
<6080=6082,6081
<6083=6084
<6084=6085
<6085=6087,6086
<6087=6089,6088
<6090=6091
<6091=6093,6092
<6093=6097,6094
<6094=6095
<6095=6096
<6097=6098
<6098=6100,6099
<6101=6102
<6102=6103
<6103=6105,6104
<6105=6107,6106
<6108=6109
<6109=6111,6110
<6111=6115,6112
<6112=6113
<6113=6114
<6115=6116
<6116=6118,6117
<6119=6120
<6120=6121
<6121=6123,6122
<6123=6125,6124
<6126=6127
<6127=6129,6128
<6129=6133,6130
<6130=6131
<6131=6132
<6133=6134
<6134=6136,6135
<6137=6138
<6138=6139
<6139=6141,6140
<6141=6143,6142
<6144=6145
<6145=6147,6146
<6147=6151,6148
<6148=6149
<6149=6150
<6151=6152
<6152=6154,6153
<6155=6156
<6156=6157
<6157=6159,6158
<6159=6161,6160
<6162=6163
<6163=6165,6164
<6165=6169,6166
<6166=6167
<6167=6168
<6169=6170
<6170=6172,6171
<6173=6174
<6174=6175
<6175=6177,6176
<6177=6179,6178
<6180=6181
<6181=6183,6182
<6183=6187,6184
<6184=6185
<6185=6186
<6187=6188
<6188=6190,6189
<6191=6192
<6192=6193
<6193=6195,6194
<6195=6197,6196
<6198=6199
<6199=6201,6200
<6201=6205,6202
<6202=6203
<6203=6204
<6205=6206
<6206=6208,6207
<6209=6210
<6210=6211
<6211=6213,6212
<6213=6215,6214
<6216=6217
<6217=6219,6218
<6219=6223,6220
<6220=6221
<6221=6222
<6223=6224
<6224=6226,6225
<6227=6228
<6228=6229
<6229=6231,6230
<6231=6233,6232
<6234=6235
<6235=6237,6236
<6237=6241,6238
<6238=6239
<6239=6240
<6241=6242
<6242=6244,6243
<6245=6246
<6246=6247
<6247=6249,6248
<6249=6251,6250
<6252=6253
<6253=6255,6254
<6255=6259,6256
<6256=6257
<6257=6258
<6259=6260
<6260=6262,6261
<6263=6264
<6264=6265
<6265=6267,6266
<6267=6269,6268
<6270=6271
<6271=6273,6272
<6273=6277,6274
<6274=6275
<6275=6276
<6277=6278
<6278=6280,6279
<6281=6282
<6282=6283
<6283=6285,6284
<6285=6287,6286
<6288=6289
<6289=6291,6290
<6291=6295,6292
<6292=6293
<6293=6294
<6295=6296
<6296=6298,6297
<6299=6300
<6300=6301
<6301=6303,6302
<6303=6305,6304
<6306=6307
<6307=6309,6308
<6309=6313,6310
<6310=6311
<6311=6312
<6313=6314
<6314=6316,6315
<6317=6346,6324,6318
<6318=6319
<6319=6321,6320
<6321=6323,6322
<6324=6325
<6325=6343,6326
<6326=6339,6327
<6327=6337,6328
<6328=6329
<6329=6331,6330
<6331=6333,6332
<6333=6334
<6334=6336,6335
<6337=6338
<6339=6340
<6340=6342,6341
<6343=6345,6344
<6346=6347
<6347=6361,6360,6348
<6348=6359,6349
<6349=6351,6350
<6351=6355,6352
<6352=6353
<6353=6354
<6355=6356
<6356=6358,6357
<6362=6363
<6363=6365,6364
<6365=6369,6366
<6366=6367
<6367=6368
<6369=6370
<6370=6372,6371
<6373=6374
<6374=6376,6375
<6377=6378
<6378=6380,6379
<6381=6382
<6382=6384,6383
<6385=6386
<6386=6389,6388,6387
<6390=6391
<6391=6408,6392
<6392=6404,6393
<6393=6400,6394
<6394=6395
<6395=6399,6396
<6396=6398,6397
<6400=6401
<6401=6403,6402
<6404=6405
<6405=6407,6406
<6409=6410
<6410=6414,6411
<6411=6413,6412
<6414=6416,6415
<6417=6418
<6418=6430,6429,6419
<6419=6428,6420
<6420=6424,6421
<6421=6422
<6422=6423
<6424=6425
<6425=6427,6426
<6431=6432
<6432=6444,6443,6433
<6433=6442,6434
<6434=6438,6435
<6435=6436
<6436=6437
<6438=6439
<6439=6441,6440
<6445=6446
<6446=6453,6447
<6447=6449,6448
<6449=6450
<6450=6452,6451
<6454=6455
<6455=6469,6468,6456
<6456=6467,6457
<6457=6466,6458
<6458=6465,6459
<6459=6463,6460
<6460=6461
<6461=6462
<6463=6464
<6470=6471
<6471=6477,6472
<6472=6475,6473
<6473=6474
<6475=6476
<6477=6478
<6479=6480
<6480=6484,6481
<6481=6483,6482
<6485=6504,6498,6486
<6486=6487
<6487=6494,6488
<6488=6490,6489
<6490=6491
<6491=6493,6492
<6494=6495
<6495=6497,6496
<6498=6500,6499
<6500=6501
<6501=6503,6502
<6504=6505
<6505=6507,6506
<6508=6509
<6509=6511,6510
<6512=6513
<6513=6516,6515,6514
<6517=6518
<6518=6524,6519
<6519=6522,6520
<6520=6521
<6522=6523
<6524=6525
<6526=6527
<6527=6532,6531,6528
<6528=6530,6529
<6533=6534
<6534=6539,6538,6535
<6535=6537,6536
<6540=6541
<6541=6549,6548,6542
<6542=6544,6543
<6544=6545
<6545=6547,6546
<6550=6551
<6551=6553,6552
<6553=6554
<6554=6556,6555
<6557=6558
<6558=6560,6559
<6560=6561
<6562=6575,6572,6569,6566,6563
<6563=6565,6564
<6566=6568,6567
<6569=6571,6570
<6572=6574,6573
<6575=6577,6576
<6657=6663,6662,6658
<6658=6659
<6659=6661,6660
<6663=6743,6737,6727,6664
<6664=6718,6665
<6665=6704,6698,6685,6672,6666
<6666=6667
<6667=6669,6668
<6669=6671,6670
<6672=6673
<6673=6684,6674
<6674=6680,6675
<6675=6676
<6676=6677
<6677=6679,6678
<6680=6681
<6681=6683,6682
<6685=6686
<6686=6697,6687
<6687=6693,6688
<6688=6691,6689
<6689=6690
<6691=6692
<6693=6694
<6694=6696,6695
<6698=6700,6699
<6700=6701
<6701=6703,6702
<6704=6705
<6705=6717,6716,6706
<6706=6715,6707
<6707=6711,6708
<6708=6709
<6709=6710
<6711=6712
<6712=6714,6713
<6718=6719
<6719=6725,6720
<6720=6723,6721
<6721=6722
<6723=6724
<6725=6726
<6727=6734,6731,6728
<6728=6730,6729
<6731=6733,6732
<6734=6736,6735
<6737=6739,6738
<6739=6740
<6740=6742,6741
<6743=6744
<6744=6747,6746,6745
<6764=6770,6769,6765
<6765=6766
<6766=6768,6767
<6770=6771
<6771=6772
<6772=6774,6773
<6774=6776,6775
<6785=6791,6790,6786
<6786=6787
<6787=6789,6788
<6791=6792
<6792=6793
<6793=6795,6794
<6803=6806,6805,6804
<6806=6809,6807
<6807=6808
<6809=6843,6810
<6810=6841,6839,6837,6835,6833,6831,6829,6827,6825,6823,6821,6819,6817,6815,6813,6811
<6811=6812
<6813=6814
<6815=6816
<6817=6818
<6819=6820
<6821=6822
<6823=6824
<6825=6826
<6827=6828
<6829=6830
<6831=6832
<6833=6834
<6835=6836
<6837=6838
<6839=6840
<6841=6842
<6843=6844
<6849=6855,6854,6850
<6850=6851
<6851=6853,6852
<6855=7171,7167,7153,7147,7133,7119,6856
<6856=7117,6857
<6857=7113,7059,7030,7021,6938,6919,6913,6893,6869,6858
<6858=6859
<6859=6868,6860
<6860=6864,6861
<6861=6862
<6862=6863
<6864=6865
<6865=6867,6866
<6869=6884,6870
<6870=6871
<6871=6872
<6872=6881,6873
<6873=6877,6874
<6874=6875
<6875=6876
<6877=6878
<6878=6880,6879
<6881=6883,6882
<6884=6885
<6885=6889,6886
<6886=6887
<6887=6888
<6889=6890
<6890=6892,6891
<6893=6907,6894
<6894=6901,6895
<6895=6896
<6896=6898,6897
<6898=6900,6899
<6901=6902
<6902=6904,6903
<6904=6906,6905
<6907=6908
<6908=6912,6909
<6909=6911,6910
<6913=6914
<6914=6916,6915
<6916=6918,6917
<6919=6920
<6920=6937,6936,6921
<6921=6935,6922
<6922=6933,6923
<6923=6924
<6924=6925
<6925=6929,6926
<6926=6927
<6927=6928
<6929=6930
<6930=6932,6931
<6933=6934
<6938=7012,6939
<6939=6996,6940
<6940=6990,6941
<6941=6966,6942
<6942=6957,6943
<6943=6944
<6944=6945
<6945=6954,6946
<6946=6950,6947
<6947=6948
<6948=6949
<6950=6951
<6951=6953,6952
<6954=6956,6955
<6957=6958
<6958=6962,6959
<6959=6960
<6960=6961
<6962=6963
<6963=6965,6964
<6966=6981,6967
<6967=6968
<6968=6969
<6969=6978,6970
<6970=6974,6971
<6971=6972
<6972=6973
<6974=6975
<6975=6977,6976
<6978=6980,6979
<6981=6982
<6982=6986,6983
<6983=6984
<6984=6985
<6986=6987
<6987=6989,6988
<6990=6991
<6991=6995,6992
<6992=6994,6993
<6996=6997
<6997=7011,6998
<6998=7009,6999
<6999=7000
<7000=7001
<7001=7005,7002
<7002=7003
<7003=7004
<7005=7006
<7006=7008,7007
<7009=7010
<7012=7013
<7013=7017,7014
<7014=7015
<7015=7016
<7017=7018
<7018=7020,7019
<7021=7022
<7022=7029,7028,7023
<7023=7027,7024
<7024=7026,7025
<7030=7050,7031
<7031=7032
<7032=7033
<7033=7047,7034
<7034=7045,7035
<7035=7036
<7036=7037
<7037=7041,7038
<7038=7039
<7039=7040
<7041=7042
<7042=7044,7043
<7045=7046
<7047=7049,7048
<7050=7051
<7051=7055,7052
<7052=7053
<7053=7054
<7055=7056
<7056=7058,7057
<7059=7104,7060
<7060=7090,7085,7078,7061
<7061=7074,7062
<7062=7063
<7063=7064
<7064=7068,7065
<7065=7066
<7066=7067
<7068=7069
<7069=7071,7070
<7071=7073,7072
<7074=7075
<7075=7077,7076
<7078=7079
<7079=7084,7083,7080
<7080=7082,7081
<7085=7086
<7086=7089,7088,7087
<7090=7091
<7091=7103,7102,7092
<7092=7101,7093
<7093=7097,7094
<7094=7095
<7095=7096
<7097=7098
<7098=7100,7099
<7104=7105
<7105=7109,7106
<7106=7107
<7107=7108
<7109=7110
<7110=7112,7111
<7113=7114
<7114=7116,7115
<7117=7118
<7119=7120
<7120=7132,7131,7121
<7121=7130,7122
<7122=7126,7123
<7123=7124
<7124=7125
<7126=7127
<7127=7129,7128
<7133=7143,7134
<7134=7136,7135
<7136=7137
<7137=7141,7138
<7138=7139
<7139=7140
<7141=7142
<7143=7144
<7144=7146,7145
<7147=7149,7148
<7149=7150
<7150=7152,7151
<7153=7154
<7154=7166,7165,7155
<7155=7164,7156
<7156=7162,7157
<7157=7160,7158
<7158=7159
<7160=7161
<7162=7163
<7167=7168
<7168=7170,7169
<7171=7173,7172
<7173=7174
<7174=7181,7175
<7175=7179,7176
<7176=7177
<7177=7178
<7179=7180
<7220=7223,7222,7221
<7223=7312,7305,7298,7291,7284,7277,7265,7224
<7224=7256,7225
<7225=7226
<7226=7227
<7227=7254,7228
<7228=7229
<7229=7230
<7230=7252,7231
<7231=7241,7232
<7232=7233
<7233=7235,7234
<7235=7236
<7236=7238,7237
<7238=7240,7239
<7241=7242
<7242=7244,7243
<7244=7246,7245
<7246=7247
<7247=7249,7248
<7249=7251,7250
<7252=7253
<7254=7255
<7256=7257
<7257=7259,7258
<7259=7260
<7260=7262,7261
<7262=7264,7263
<7265=7266
<7266=7275,7267
<7267=7268
<7268=7269
<7269=7273,7270
<7270=7271
<7271=7272
<7273=7274
<7275=7276
<7277=7278
<7278=7280,7279
<7280=7281
<7281=7283,7282
<7284=7285
<7285=7287,7286
<7287=7288
<7288=7290,7289
<7291=7292
<7292=7294,7293
<7294=7295
<7295=7297,7296
<7298=7299
<7299=7301,7300
<7301=7302
<7302=7304,7303
<7305=7306
<7306=7308,7307
<7308=7309
<7309=7311,7310
<7312=7313
<7313=7315,7314
<7315=7316
<7316=7318,7317
<7334=7340,7339,7335
<7335=7336
<7336=7338,7337
<7340=7341
<7341=7342
<7342=7344,7343
<7352=7358,7357,7353
<7353=7354
<7354=7356,7355
<7358=7359
<7359=7360
<7360=7362,7361
<7370=7376,7375,7371
<7371=7372
<7372=7374,7373
<7376=7377
<7377=7378
<7378=7380,7379
<7388=7394,7393,7389
<7389=7390
<7390=7392,7391
<7394=7395
<7395=7396
<7396=7398,7397
<7406=7412,7411,7407
<7407=7408
<7408=7410,7409
<7412=7415,7413
<7413=7414
<7415=7444,7435,7432,7416
<7416=7417
<7417=7424,7418
<7418=7419
<7419=7423,7420
<7420=7422,7421
<7424=7425
<7425=7427,7426
<7427=7429,7428
<7429=7431,7430
<7432=7434,7433
<7435=7436
<7436=7443,7437
<7437=7439,7438
<7439=7440
<7440=7442,7441
<7444=7445
<7445=7446
<7446=7451,7450,7447
<7447=7449,7448
<7464=7467,7466,7465
<7467=7733,7729,7722,7686,7677,7667,7663,7659,7475,7468
<7468=7469
<7469=7471,7470
<7471=7472
<7472=7474,7473
<7475=7655,7476
<7476=7477
<7477=7644,7575,7478
<7478=7479
<7479=7480
<7480=7566,7481
<7481=7559,7555,7546,7541,7482
<7482=7537,7530,7483
<7483=7484
<7484=7526,7511,7485
<7485=7486
<7486=7507,7500,7487
<7487=7488
<7488=7496,7489
<7489=7490
<7490=7491
<7491=7495,7492
<7492=7494,7493
<7496=7497
<7497=7499,7498
<7500=7501
<7501=7502
<7502=7506,7503
<7503=7505,7504
<7507=7508
<7508=7510,7509
<7511=7520,7512
<7512=7513
<7513=7517,7514
<7514=7516,7515
<7517=7519,7518
<7520=7521
<7521=7525,7522
<7522=7524,7523
<7526=7527
<7527=7529,7528
<7530=7531
<7531=7532
<7532=7536,7533
<7533=7535,7534
<7537=7538
<7538=7540,7539
<7541=7542
<7542=7545,7544,7543
<7546=7547
<7547=7553,7548
<7548=7551,7549
<7549=7550
<7551=7552
<7553=7554
<7555=7556
<7556=7558,7557
<7559=7563,7560
<7560=7562,7561
<7563=7565,7564
<7566=7567
<7567=7574,7568
<7568=7570,7569
<7570=7571
<7571=7573,7572
<7575=7611,7590,7586,7582,7576
<7576=7577
<7577=7579,7578
<7579=7581,7580
<7582=7583
<7583=7585,7584
<7586=7587
<7587=7589,7588
<7590=7591
<7591=7610,7609,7592
<7592=7608,7593
<7593=7604,7594
<7594=7602,7595
<7595=7596
<7596=7598,7597
<7598=7599
<7599=7601,7600
<7602=7603
<7604=7605
<7605=7607,7606
<7611=7633,7612
<7612=7624,7613
<7613=7614
<7614=7622,7615
<7615=7616
<7616=7617
<7617=7621,7618
<7618=7620,7619
<7622=7623
<7624=7625
<7625=7629,7626
<7626=7627
<7627=7628
<7629=7630
<7630=7632,7631
<7633=7634
<7634=7643,7635
<7635=7637,7636
<7637=7638
<7638=7640,7639
<7640=7642,7641
<7644=7645
<7645=7647,7646
<7647=7651,7648
<7648=7649
<7649=7650
<7651=7652
<7652=7654,7653
<7655=7656
<7656=7658,7657
<7659=7660
<7660=7662,7661
<7663=7664
<7664=7666,7665
<7667=7668
<7668=7676,7675,7669
<7669=7671,7670
<7671=7672
<7672=7674,7673
<7677=7682,7678
<7678=7679
<7679=7681,7680
<7682=7683
<7683=7685,7684
<7686=7713,7687
<7687=7700,7688
<7688=7693,7689
<7689=7690
<7690=7692,7691
<7693=7694
<7694=7698,7695
<7695=7696
<7696=7697
<7698=7699
<7700=7701
<7701=7712,7702
<7702=7704,7703
<7704=7706,7705
<7706=7707
<7707=7709,7708
<7709=7711,7710
<7713=7714
<7714=7716,7715
<7716=7717
<7717=7719,7718
<7719=7721,7720
<7722=7723
<7723=7728,7727,7724
<7724=7726,7725
<7729=7730
<7730=7732,7731
<7733=7734
<7734=7736,7735
<7736=7737
<7737=7739,7738
<7771=7774,7773,7772
<7774=7775
<7775=7776
<7776=7778,7777
<7778=7782,7779
<7779=7780
<7780=7781
<7782=7783
<7789=7795,7794,7790
<7790=7791
<7791=7793,7792
<7795=7796
<7796=7797
<7797=7799,7798
<7807=7813,7812,7808
<7808=7809
<7809=7811,7810
<7813=7814
<7814=7850,7815
<7815=7839,7816
<7816=7833,7817
<7817=7818
<7818=7819
<7819=7825,7820
<7820=7823,7821
<7821=7822
<7823=7824
<7825=7826
<7826=7828,7827
<7828=7830,7829
<7830=7832,7831
<7833=7834
<7834=7836,7835
<7836=7838,7837
<7839=7840
<7840=7848,7841
<7841=7846,7842
<7842=7843
<7843=7845,7844
<7846=7847
<7848=7849
<7850=7851
<7851=7853,7852
<7853=7854
<7867=7870,7869,7868
<7870=7871
<7871=7917,7872
<7872=7873
<7873=7901,7874
<7874=7875
<7875=7894,7876
<7876=7887,7877
<7877=7885,7878
<7878=7883,7879
<7879=7880
<7880=7882,7881
<7883=7884
<7885=7886
<7887=7889,7888
<7889=7891,7890
<7891=7893,7892
<7894=7896,7895
<7896=7898,7897
<7898=7900,7899
<7901=7902
<7902=7914,7903
<7903=7909,7904
<7904=7906,7905
<7906=7908,7907
<7909=7911,7910
<7911=7913,7912
<7914=7916,7915
<7917=7918
<7918=7920,7919
<7920=7921
<7940=7946,7945,7941
<7941=7942
<7942=7944,7943
<7946=7947
<7947=7948
<7948=7952,7949
<7949=7951,7950
<7960=7966,7965,7961
<7961=7962
<7962=7964,7963
<7966=9241,9230,9218,9188,9181,9177,9162,9155,9149,9135,9123,9103,9094,9077,9060,9043,9026,9009,8998,8987,8978,8961,8948,8896,8118,8117,8116,8115,8114,8067,7967
<7967=8059,8048,8045,7968
<7968=8029,7969
<7969=8016,7970
<7970=8003,7971
<7971=7984,7972
<7972=7973
<7973=7974
<7974=7980,7975
<7975=7976
<7976=7977
<7977=7979,7978
<7980=7981
<7981=7983,7982
<7984=7985
<7985=7989,7986
<7986=7987
<7987=7988
<7989=7990
<7990=7992,7991
<7992=8000,7993
<7993=7995,7994
<7995=7997,7996
<7997=7999,7998
<8000=8002,8001
<8003=8004
<8004=8015,8014,8005
<8005=8013,8006
<8006=8012,8007
<8007=8009,8008
<8009=8011,8010
<8016=8017
<8017=8028,8018
<8018=8027,8019
<8019=8021,8020
<8021=8022
<8022=8024,8023
<8024=8026,8025
<8029=8030
<8030=8044,8043,8031
<8031=8042,8032
<8032=8036,8033
<8033=8034
<8034=8035
<8036=8037
<8037=8039,8038
<8039=8041,8040
<8045=8047,8046
<8048=8049
<8049=8058,8050
<8050=8052,8051
<8052=8053
<8053=8055,8054
<8055=8057,8056
<8059=8060
<8060=8061
<8061=8066,8065,8062
<8062=8064,8063
<8067=8105,8068
<8068=8081,8069
<8069=8070
<8070=8071
<8071=8077,8072
<8072=8073
<8073=8074
<8074=8076,8075
<8077=8078
<8078=8080,8079
<8081=8082
<8082=8089,8083
<8083=8087,8084
<8084=8085
<8085=8086
<8087=8088
<8089=8091,8090
<8091=8092
<8092=8094,8093
<8094=8102,8095
<8095=8097,8096
<8097=8099,8098
<8099=8101,8100
<8102=8104,8103
<8105=8106
<8106=8113,8112,8107
<8107=8111,8108
<8108=8110,8109
<8118=8890,8119
<8119=8120
<8120=8886,8121
<8121=8884,8873,8872,8870,8859,8858,8856,8843,8842,8840,8820,8819,8817,8808,8799,8784,8783,8781,8672,8671,8669,8623,8622,8620,8583,8323,8322,8320,8206,8205,8203,8190,8189,8187,8174,8173,8171,8158,8157,8155,8142,8141,8139,8126,8125,8123,8122
<8123=8124
<8126=8127
<8127=8131,8128
<8128=8129
<8129=8130
<8131=8132
<8132=8134,8133
<8134=8136,8135
<8136=8138,8137
<8139=8140
<8142=8143
<8143=8147,8144
<8144=8145
<8145=8146
<8147=8148
<8148=8150,8149
<8150=8152,8151
<8152=8154,8153
<8155=8156
<8158=8159
<8159=8163,8160
<8160=8161
<8161=8162
<8163=8164
<8164=8166,8165
<8166=8168,8167
<8168=8170,8169
<8171=8172
<8174=8175
<8175=8179,8176
<8176=8177
<8177=8178
<8179=8180
<8180=8182,8181
<8182=8184,8183
<8184=8186,8185
<8187=8188
<8190=8191
<8191=8195,8192
<8192=8193
<8193=8194
<8195=8196
<8196=8198,8197
<8198=8200,8199
<8200=8202,8201
<8203=8204
<8206=8309,8220,8207
<8207=8208
<8208=8209
<8209=8210
<8210=8214,8211
<8211=8212
<8212=8213
<8214=8215
<8215=8217,8216
<8217=8219,8218
<8220=8302,8291,8249,8221
<8221=8247,8236,8222
<8222=8223
<8223=8224
<8224=8228,8225
<8225=8226
<8226=8227
<8228=8229
<8229=8231,8230
<8231=8233,8232
<8233=8235,8234
<8236=8237
<8237=8241,8238
<8238=8239
<8239=8240
<8241=8242
<8242=8244,8243
<8244=8246,8245
<8247=8248
<8249=8274,8272,8267,8250
<8250=8251
<8251=8258,8252
<8252=8254,8253
<8254=8255
<8255=8257,8256
<8258=8259
<8259=8263,8260
<8260=8261
<8261=8262
<8263=8264
<8264=8266,8265
<8267=8271,8268
<8268=8270,8269
<8272=8273
<8274=8275
<8275=8276
<8276=8290,8289,8277
<8277=8288,8278
<8278=8282,8279
<8279=8280
<8280=8281
<8282=8283
<8283=8285,8284
<8285=8287,8286
<8291=8292
<8292=8301,8300,8293
<8293=8295,8294
<8295=8297,8296
<8297=8299,8298
<8302=8303
<8303=8308,8307,8304
<8304=8306,8305
<8309=8310
<8310=8312,8311
<8312=8313
<8313=8315,8314
<8315=8317,8316
<8317=8319,8318
<8320=8321
<8323=8557,8337,8324
<8324=8325
<8325=8326
<8326=8327
<8327=8331,8328
<8328=8329
<8329=8330
<8331=8332
<8332=8334,8333
<8334=8336,8335
<8337=8338
<8338=8505,8434,8339
<8339=8340
<8340=8411,8354,8341
<8341=8342
<8342=8343
<8343=8344
<8344=8348,8345
<8345=8346
<8346=8347
<8348=8349
<8349=8351,8350
<8351=8353,8352
<8354=8370,8355
<8355=8356
<8356=8362,8357
<8357=8360,8358
<8358=8359
<8360=8361
<8362=8363
<8363=8365,8364
<8365=8367,8366
<8367=8369,8368
<8370=8398,8385,8371
<8371=8372
<8372=8373
<8373=8379,8374
<8374=8377,8375
<8375=8376
<8377=8378
<8379=8380
<8380=8382,8381
<8382=8384,8383
<8385=8386
<8386=8392,8387
<8387=8390,8388
<8388=8389
<8390=8391
<8392=8393
<8393=8395,8394
<8395=8397,8396
<8398=8399
<8399=8401,8400
<8401=8405,8402
<8402=8403
<8403=8404
<8405=8406
<8406=8408,8407
<8408=8410,8409
<8411=8412
<8412=8416,8413
<8413=8414
<8414=8415
<8416=8417
<8417=8419,8418
<8419=8427,8420
<8420=8422,8421
<8422=8424,8423
<8424=8426,8425
<8427=8429,8428
<8429=8431,8430
<8431=8433,8432
<8434=8488,8477,8468,8463,8452,8443,8435
<8435=8436
<8436=8438,8437
<8438=8440,8439
<8440=8442,8441
<8443=8444
<8444=8448,8445
<8445=8446
<8446=8447
<8448=8449
<8449=8451,8450
<8452=8453
<8453=8459,8454
<8454=8457,8455
<8455=8456
<8457=8458
<8459=8460
<8460=8462,8461
<8463=8464
<8464=8466,8465
<8466=8467
<8468=8469
<8469=8473,8470
<8470=8471
<8471=8472
<8473=8474
<8474=8476,8475
<8477=8478
<8478=8484,8479
<8479=8482,8480
<8480=8481
<8482=8483
<8484=8485
<8485=8487,8486
<8488=8489
<8489=8500,8490
<8490=8498,8491
<8491=8496,8494,8492
<8492=8493
<8494=8495
<8496=8497
<8498=8499
<8500=8502,8501
<8502=8504,8503
<8505=8506
<8506=8543,8507
<8507=8532,8508
<8508=8531,8509
<8509=8513,8510
<8510=8511
<8511=8512
<8513=8514
<8514=8516,8515
<8516=8524,8517
<8517=8519,8518
<8519=8521,8520
<8521=8523,8522
<8524=8526,8525
<8526=8528,8527
<8528=8530,8529
<8532=8542,8533
<8533=8535,8534
<8535=8537,8536
<8537=8539,8538
<8539=8541,8540
<8543=8556,8544
<8544=8548,8545
<8545=8546
<8546=8547
<8548=8549
<8549=8551,8550
<8551=8553,8552
<8553=8555,8554
<8557=8558
<8558=8578,8559
<8559=8568,8560
<8560=8562,8561
<8562=8563
<8563=8565,8564
<8565=8567,8566
<8568=8570,8569
<8570=8571
<8571=8573,8572
<8573=8575,8574
<8575=8577,8576
<8578=8580,8579
<8580=8582,8581
<8583=8596,8584
<8584=8585
<8585=8586
<8586=8590,8587
<8587=8588
<8588=8589
<8590=8591
<8591=8593,8592
<8593=8595,8594
<8596=8597
<8597=8610,8598
<8598=8600,8599
<8600=8604,8601
<8601=8602
<8602=8603
<8604=8605
<8605=8607,8606
<8607=8609,8608
<8610=8619,8611
<8611=8613,8612
<8613=8614
<8614=8616,8615
<8616=8618,8617
<8620=8621
<8623=8635,8624
<8624=8633,8625
<8625=8626
<8626=8627
<8627=8629,8628
<8629=8630
<8630=8632,8631
<8633=8634
<8635=8636
<8636=8668,8667,8637
<8637=8666,8638
<8638=8660,8639
<8639=8652,8650,8644,8642,8640
<8640=8641
<8642=8643
<8644=8645
<8645=8647,8646
<8647=8649,8648
<8650=8651
<8652=8653
<8653=8655,8654
<8655=8657,8656
<8657=8659,8658
<8660=8661
<8661=8663,8662
<8663=8665,8664
<8669=8670
<8672=8774,8765,8752,8735,8718,8701,8684,8673
<8673=8674
<8674=8678,8675
<8675=8676
<8676=8677
<8678=8679
<8679=8681,8680
<8681=8683,8682
<8684=8685
<8685=8691,8686
<8686=8689,8687
<8687=8688
<8689=8690
<8691=8692
<8692=8694,8693
<8694=8696,8695
<8696=8698,8697
<8698=8700,8699
<8701=8702
<8702=8708,8703
<8703=8706,8704
<8704=8705
<8706=8707
<8708=8709
<8709=8711,8710
<8711=8713,8712
<8713=8715,8714
<8715=8717,8716
<8718=8719
<8719=8725,8720
<8720=8723,8721
<8721=8722
<8723=8724
<8725=8726
<8726=8728,8727
<8728=8730,8729
<8730=8732,8731
<8732=8734,8733
<8735=8736
<8736=8742,8737
<8737=8740,8738
<8738=8739
<8740=8741
<8742=8743
<8743=8745,8744
<8745=8747,8746
<8747=8749,8748
<8749=8751,8750
<8752=8753
<8753=8755,8754
<8755=8756
<8756=8758,8757
<8758=8760,8759
<8760=8762,8761
<8762=8764,8763
<8765=8766
<8766=8768,8767
<8768=8769
<8769=8771,8770
<8771=8773,8772
<8774=8775
<8775=8780,8779,8776
<8776=8778,8777
<8781=8782
<8784=8785
<8785=8793,8786
<8786=8791,8789,8787
<8787=8788
<8789=8790
<8791=8792
<8793=8794
<8794=8796,8795
<8796=8798,8797
<8799=8800
<8800=8804,8801
<8801=8802
<8802=8803
<8804=8805
<8805=8807,8806
<8808=8809
<8809=8813,8810
<8810=8811
<8811=8812
<8813=8814
<8814=8816,8815
<8817=8818
<8820=8834,8821
<8821=8822
<8822=8826,8823
<8823=8824
<8824=8825
<8826=8827
<8827=8829,8828
<8829=8831,8830
<8831=8833,8832
<8834=8835
<8835=8837,8836
<8837=8839,8838
<8840=8841
<8843=8844
<8844=8848,8845
<8845=8846
<8846=8847
<8848=8849
<8849=8851,8850
<8851=8853,8852
<8853=8855,8854
<8856=8857
<8859=8860
<8860=8862,8861
<8862=8863
<8863=8865,8864
<8865=8867,8866
<8867=8869,8868
<8870=8871
<8873=8874
<8874=8876,8875
<8876=8877
<8877=8879,8878
<8879=8881,8880
<8881=8883,8882
<8884=8885
<8886=8887
<8887=8889,8888
<8890=8891
<8891=8893,8892
<8893=8895,8894
<8896=8944,8897
<8897=8898
<8898=8935,8913,8899
<8899=8900
<8900=8901
<8901=8909,8902
<8902=8907,8905,8903
<8903=8904
<8905=8906
<8907=8908
<8909=8910
<8910=8912,8911
<8913=8914
<8914=8931,8915
<8915=8920,8918,8916
<8916=8917
<8918=8919
<8920=8921
<8921=8923,8922
<8923=8925,8924
<8925=8926
<8926=8928,8927
<8928=8930,8929
<8931=8932
<8932=8934,8933
<8935=8936
<8936=8938,8937
<8938=8939
<8939=8941,8940
<8941=8943,8942
<8944=8945
<8945=8947,8946
<8948=8949
<8949=8955,8950
<8950=8953,8951
<8951=8952
<8953=8954
<8955=8956
<8956=8958,8957
<8958=8960,8959
<8961=8962
<8962=8974,8963
<8963=8964
<8964=8965
<8965=8973,8966
<8966=8968,8967
<8968=8970,8969
<8970=8972,8971
<8974=8975
<8975=8977,8976
<8978=8979
<8979=8983,8980
<8980=8981
<8981=8982
<8983=8984
<8984=8986,8985
<8987=8988
<8988=8994,8989
<8989=8990
<8990=8991
<8991=8993,8992
<8994=8995
<8995=8997,8996
<8998=8999
<8999=9003,9000
<9000=9001
<9001=9002
<9003=9004
<9004=9006,9005
<9006=9008,9007
<9009=9010
<9010=9016,9011
<9011=9014,9012
<9012=9013
<9014=9015
<9016=9017
<9017=9019,9018
<9019=9021,9020
<9021=9023,9022
<9023=9025,9024
<9026=9027
<9027=9033,9028
<9028=9031,9029
<9029=9030
<9031=9032
<9033=9034
<9034=9036,9035
<9036=9038,9037
<9038=9040,9039
<9040=9042,9041
<9043=9044
<9044=9050,9045
<9045=9048,9046
<9046=9047
<9048=9049
<9050=9051
<9051=9053,9052
<9053=9055,9054
<9055=9057,9056
<9057=9059,9058
<9060=9061
<9061=9067,9062
<9062=9065,9063
<9063=9064
<9065=9066
<9067=9068
<9068=9070,9069
<9070=9072,9071
<9072=9074,9073
<9074=9076,9075
<9077=9078
<9078=9084,9079
<9079=9082,9080
<9080=9081
<9082=9083
<9084=9085
<9085=9087,9086
<9087=9089,9088
<9089=9091,9090
<9091=9093,9092
<9094=9095
<9095=9097,9096
<9097=9098
<9098=9100,9099
<9100=9102,9101
<9103=9104
<9104=9117,9105
<9105=9108,9106
<9106=9107
<9108=9109
<9109=9115,9110
<9110=9113,9111
<9111=9112
<9113=9114
<9115=9116
<9117=9118
<9118=9120,9119
<9120=9122,9121
<9123=9124
<9124=9132,9125
<9125=9129,9126
<9126=9128,9127
<9129=9131,9130
<9132=9134,9133
<9135=9136
<9136=9145,9137
<9137=9138
<9138=9139
<9139=9141,9140
<9141=9142
<9142=9144,9143
<9145=9146
<9146=9148,9147
<9149=9150
<9150=9152,9151
<9152=9154,9153
<9155=9156
<9156=9161,9160,9157
<9157=9159,9158
<9162=9163
<9163=9176,9164
<9164=9175,9165
<9165=9169,9166
<9166=9167
<9167=9168
<9169=9170
<9170=9172,9171
<9172=9174,9173
<9177=9178
<9178=9180,9179
<9181=9182
<9182=9187,9186,9183
<9183=9185,9184
<9188=9214,9189
<9189=9210,9202,9190
<9190=9191
<9191=9200,9192
<9192=9193
<9193=9194
<9194=9196,9195
<9196=9197
<9197=9199,9198
<9200=9201
<9202=9203
<9203=9209,9204
<9204=9208,9205
<9205=9207,9206
<9210=9211
<9211=9213,9212
<9214=9215
<9215=9217,9216
<9218=9219
<9219=9229,9228,9220
<9220=9227,9221
<9221=9225,9222
<9222=9223
<9223=9224
<9225=9226
<9230=9231
<9231=9240,9239,9232
<9232=9238,9233
<9233=9235,9234
<9235=9237,9236
<9241=9243,9242
<9243=9244
<9244=9257,9245
<9245=9251,9246
<9246=9247
<9247=9248
<9248=9250,9249
<9251=9252
<9252=9254,9253
<9254=9256,9255
<9371=9377,9376,9372
<9372=9373
<9373=9375,9374
<9377=9393,9378
<9378=9379
<9379=9385,9380
<9380=9383,9381
<9381=9382
<9383=9384
<9385=9386
<9386=9388,9387
<9388=9390,9389
<9390=9392,9391
<9393=9394
<9394=9396,9395
<9410=9416,9415,9411
<9411=9412
<9412=9414,9413
<9416=9417
<9417=9418
<9418=9420,9419
<9420=9422,9421
<9431=9437,9436,9432
<9432=9433
<9433=9435,9434
<9437=9438
<9438=9439
<9439=9441,9440
<9441=9443,9442
<9452=9458,9457,9453
<9453=9454
<9454=9456,9455
<9458=9459
<9459=9460
<9460=9484,9461
<9461=9481,9462
<9462=9478,9463
<9463=9475,9464
<9464=9472,9465
<9465=9469,9466
<9466=9468,9467
<9469=9471,9470
<9472=9474,9473
<9475=9477,9476
<9478=9480,9479
<9481=9483,9482
<9484=9486,9485
<9498=9507,9506,9499
<9499=9503,9500
<9500=9502,9501
<9503=9505,9504
<9507=9508
<9508=9574,9509
<9509=9567,9558,9510
<9510=9541,9530,9527,9511
<9511=9512
<9512=9513
<9513=9521,9514
<9514=9515
<9515=9516
<9516=9518,9517
<9518=9520,9519
<9521=9522
<9522=9524,9523
<9524=9526,9525
<9527=9529,9528
<9530=9531
<9531=9540,9532
<9532=9534,9533
<9534=9535
<9535=9537,9536
<9537=9539,9538
<9541=9542
<9542=9543
<9543=9557,9556,9544
<9544=9555,9545
<9545=9547,9546
<9547=9549,9548
<9549=9550
<9550=9552,9551
<9552=9554,9553
<9558=9559
<9559=9561,9560
<9561=9562
<9562=9564,9563
<9564=9566,9565
<9567=9568
<9568=9573,9572,9569
<9569=9571,9570
<9574=9575
<9575=9577,9576
<9577=9579,9578
<9579=9580
<9580=9582,9581
<9582=9584,9583
<9600=9608,9601
<9601=9605,9602
<9602=9604,9603
<9605=9607,9606
<9608=9623,9619,9613,9609
<9609=9610
<9610=9612,9611
<9613=9614
<9614=9616,9615
<9616=9618,9617
<9619=9620
<9620=9622,9621
<9623=9624
<9624=9626,9625
<9649=9655,9654,9650
<9650=9651
<9651=9653,9652
<9655=10083,10074,10070,10006,9742,9727,9658,9656
<9656=9657
<9658=9719,9710,9707,9659
<9659=9660
<9660=9701,9661
<9661=9690,9662
<9662=9680,9663
<9663=9672,9664
<9664=9665
<9665=9671,9666
<9666=9668,9667
<9668=9670,9669
<9672=9673
<9673=9679,9674
<9674=9676,9675
<9676=9678,9677
<9680=9681
<9681=9685,9682
<9682=9684,9683
<9685=9689,9686
<9686=9688,9687
<9690=9691
<9691=9700,9699,9692
<9692=9698,9693
<9693=9695,9694
<9695=9697,9696
<9701=9702
<9702=9704,9703
<9704=9706,9705
<9707=9709,9708
<9710=9711
<9711=9718,9712
<9712=9714,9713
<9714=9715
<9715=9717,9716
<9719=9720
<9720=9721
<9721=9726,9725,9722
<9722=9724,9723
<9727=9736,9728
<9728=9735,9734,9729
<9729=9733,9730
<9730=9732,9731
<9736=9741,9740,9737
<9737=9739,9738
<9742=9998,9989,9986,9743
<9743=9955,9937,9933,9931,9927,9923,9919,9795,9758,9744
<9744=9747,9745
<9745=9746
<9747=9748
<9748=9757,9749
<9749=9751,9750
<9751=9752
<9752=9754,9753
<9754=9756,9755
<9758=9791,9759
<9759=9760
<9760=9778,9761
<9761=9770,9762
<9762=9763
<9763=9765,9764
<9765=9767,9766
<9767=9769,9768
<9770=9771
<9771=9773,9772
<9773=9775,9774
<9775=9777,9776
<9778=9779
<9779=9781,9780
<9781=9783,9782
<9783=9785,9784
<9785=9786
<9786=9788,9787
<9788=9790,9789
<9791=9792
<9792=9794,9793
<9795=9915,9911,9908,9796
<9796=9860,9797
<9797=9849,9801,9798
<9798=9799
<9799=9800
<9801=9838,9829,9820,9814,9810,9806,9802
<9802=9803
<9803=9805,9804
<9806=9807
<9807=9809,9808
<9810=9811
<9811=9813,9812
<9814=9816,9815
<9816=9817
<9817=9819,9818
<9820=9825,9821
<9821=9822
<9822=9824,9823
<9825=9826
<9826=9828,9827
<9829=9830
<9830=9837,9836,9831
<9831=9835,9832
<9832=9834,9833
<9838=9845,9839
<9839=9840
<9840=9844,9841
<9841=9843,9842
<9845=9846
<9846=9848,9847
<9849=9850
<9850=9859,9851
<9851=9853,9852
<9853=9854
<9854=9856,9855
<9856=9858,9857
<9860=9879,9861
<9861=9875,9862
<9862=9864,9863
<9864=9865
<9865=9874,9866
<9866=9868,9867
<9868=9869
<9869=9871,9870
<9871=9873,9872
<9875=9876
<9876=9878,9877
<9879=9880
<9880=9898,9881
<9881=9887,9882
<9882=9884,9883
<9884=9886,9885
<9887=9889,9888
<9889=9891,9890
<9891=9897,9892
<9892=9894,9893
<9894=9896,9895
<9898=9907,9899
<9899=9901,9900
<9901=9902
<9902=9904,9903
<9904=9906,9905
<9908=9910,9909
<9911=9912
<9912=9914,9913
<9915=9916
<9916=9918,9917
<9919=9920
<9920=9922,9921
<9923=9924
<9924=9926,9925
<9927=9928
<9928=9930,9929
<9931=9932
<9933=9934
<9934=9936,9935
<9937=9938
<9938=9954,9953,9939
<9939=9952,9940
<9940=9942,9941
<9942=9943
<9943=9945,9944
<9945=9947,9946
<9947=9949,9948
<9949=9951,9950
<9955=9980,9974,9968,9962,9956
<9956=9961,9960,9957
<9957=9959,9958
<9962=9967,9966,9963
<9963=9965,9964
<9968=9973,9972,9969
<9969=9971,9970
<9974=9979,9978,9975
<9975=9977,9976
<9980=9985,9984,9981
<9981=9983,9982
<9986=9988,9987
<9989=9990
<9990=9997,9991
<9991=9993,9992
<9993=9994
<9994=9996,9995
<9998=9999
<9999=10000
<10000=10005,10004,10001
<10001=10003,10002
<10006=10062,10053,10050,10007
<10007=10041,10008
<10008=10037,10009
<10009=10026,10010
<10010=10011
<10011=10022,10012
<10012=10013
<10013=10014
<10014=10020,10015
<10015=10018,10016
<10016=10017
<10018=10019
<10020=10021
<10022=10023
<10023=10025,10024
<10026=10027
<10027=10036,10035,10028
<10028=10034,10029
<10029=10033,10030
<10030=10032,10031
<10037=10038
<10038=10040,10039
<10041=10042
<10042=10049,10048,10043
<10043=10047,10044
<10044=10046,10045
<10050=10052,10051
<10053=10054
<10054=10061,10055
<10055=10057,10056
<10057=10058
<10058=10060,10059
<10062=10063
<10063=10064
<10064=10069,10068,10065
<10065=10067,10066
<10070=10071
<10071=10073,10072
<10074=10075
<10075=10081,10076
<10076=10079,10077
<10077=10078
<10079=10080
<10081=10082
<10083=10084
<10084=10089,10088,10085
<10085=10087,10086
<10142=10148,10147,10143
<10143=10144
<10144=10146,10145
<10148=10391,10377,10153,10149
<10149=10150
<10150=10152,10151
<10153=10369,10360,10357,10154
<10154=10348,10155
<10155=10342,10156
<10156=10331,10320,10313,10157
<10157=10306,10299,10182,10164,10158
<10158=10162,10159
<10159=10160
<10160=10161
<10162=10163
<10164=10169,10165
<10165=10166
<10166=10168,10167
<10169=10170
<10170=10181,10171
<10171=10173,10172
<10173=10175,10174
<10175=10176
<10176=10178,10177
<10178=10180,10179
<10182=10295,10284,10281,10183
<10183=10184
<10184=10264,10185
<10185=10251,10240,10225,10186
<10186=10214,10187
<10187=10188
<10188=10201,10195,10189
<10189=10190
<10190=10191
<10191=10192
<10192=10194,10193
<10195=10197,10196
<10197=10198
<10198=10200,10199
<10201=10202
<10202=10213,10203
<10203=10205,10204
<10205=10207,10206
<10207=10208
<10208=10210,10209
<10210=10212,10211
<10214=10215
<10215=10224,10216
<10216=10218,10217
<10218=10219
<10219=10221,10220
<10221=10223,10222
<10225=10236,10231,10226
<10226=10227
<10227=10228
<10228=10230,10229
<10231=10232
<10232=10233
<10233=10235,10234
<10236=10237
<10237=10239,10238
<10240=10241
<10241=10250,10249,10242
<10242=10248,10243
<10243=10245,10244
<10245=10247,10246
<10251=10252
<10252=10263,10262,10253
<10253=10261,10254
<10254=10256,10255
<10256=10258,10257
<10258=10260,10259
<10264=10265
<10265=10278,10266
<10266=10277,10267
<10267=10269,10268
<10269=10270
<10270=10272,10271
<10272=10274,10273
<10274=10276,10275
<10278=10280,10279
<10281=10283,10282
<10284=10285
<10285=10294,10286
<10286=10288,10287
<10288=10289
<10289=10291,10290
<10291=10293,10292
<10295=10296
<10296=10298,10297
<10299=10300
<10300=10305,10304,10301
<10301=10303,10302
<10306=10307
<10307=10312,10311,10308
<10308=10310,10309
<10313=10314
<10314=10319,10318,10315
<10315=10317,10316
<10320=10322,10321
<10322=10323
<10323=10325,10324
<10325=10326
<10326=10328,10327
<10328=10330,10329
<10331=10332
<10332=10341,10340,10333
<10333=10339,10334
<10334=10338,10335
<10335=10337,10336
<10342=10343
<10343=10347,10344
<10344=10346,10345
<10348=10349
<10349=10356,10355,10350
<10350=10354,10351
<10351=10353,10352
<10357=10359,10358
<10360=10361
<10361=10368,10362
<10362=10364,10363
<10364=10365
<10365=10367,10366
<10369=10370
<10370=10371
<10371=10376,10375,10372
<10372=10374,10373
<10377=10380,10378
<10378=10379
<10380=10381
<10381=10383,10382
<10383=10385,10384
<10385=10386
<10386=10388,10387
<10388=10390,10389
<10391=10392
<10392=10397,10396,10393
<10393=10395,10394
<10438=10450,10449,10439
<10439=10446,10443,10440
<10440=10442,10441
<10443=10445,10444
<10446=10448,10447
<10450=10494,10473,10451
<10451=10452
<10452=10470,10453
<10453=10467,10454
<10454=10462,10455
<10455=10459,10456
<10456=10458,10457
<10459=10461,10460
<10462=10464,10463
<10464=10466,10465
<10467=10469,10468
<10470=10472,10471
<10473=10474
<10474=10491,10475
<10475=10489,10476
<10476=10477
<10477=10478
<10478=10484,10479
<10479=10481,10480
<10481=10483,10482
<10484=10486,10485
<10486=10488,10487
<10489=10490
<10491=10493,10492
<10494=10495
<10495=10508,10496
<10496=10506,10497
<10497=10498
<10498=10499
<10499=10503,10500
<10500=10502,10501
<10503=10505,10504
<10506=10507
<10508=10510,10509
<10524=10530,10529,10525
<10525=10526
<10526=10528,10527
<10530=10531
<10531=10532
<10532=10534,10533
<10542=10548,10547,10543
<10543=10544
<10544=10546,10545
<10548=10559,10551,10549
<10549=10550
<10551=10557,10552
<10552=10553
<10553=10554
<10554=10556,10555
<10557=10558
<10559=10560
<10560=10570,10569,10561
<10561=10568,10562
<10562=10566,10563
<10563=10564
<10564=10565
<10566=10567
<10579=10585,10584,10580
<10580=10581
<10581=10583,10582
<10585=11032,11012,10586
<10586=10992,10587
<10587=10977,10962,10947,10932,10728,10713,10698,10683,10668,10646,10635,10624,10588
<10588=10617,10589
<10589=10590
<10590=10606,10591
<10591=10604,10592
<10592=10593
<10593=10594
<10594=10600,10595
<10595=10596
<10596=10597
<10597=10599,10598
<10600=10601
<10601=10603,10602
<10604=10605
<10606=10607
<10607=10616,10615,10608
<10608=10614,10609
<10609=10611,10610
<10611=10613,10612
<10617=10618
<10618=10620,10619
<10620=10621
<10621=10623,10622
<10624=10626,10625
<10626=10627
<10627=10631,10628
<10628=10629
<10629=10630
<10631=10632
<10632=10634,10633
<10635=10637,10636
<10637=10638
<10638=10642,10639
<10639=10640
<10640=10641
<10642=10643
<10643=10645,10644
<10646=10659,10647
<10647=10648
<10648=10649
<10649=10651,10650
<10651=10652
<10652=10654,10653
<10654=10656,10655
<10656=10658,10657
<10659=10660
<10660=10664,10661
<10661=10662
<10662=10663
<10664=10665
<10665=10667,10666
<10668=10674,10669
<10669=10670
<10670=10671
<10671=10673,10672
<10674=10675
<10675=10679,10676
<10676=10677
<10677=10678
<10679=10680
<10680=10682,10681
<10683=10689,10684
<10684=10685
<10685=10686
<10686=10688,10687
<10689=10690
<10690=10694,10691
<10691=10692
<10692=10693
<10694=10695
<10695=10697,10696
<10698=10704,10699
<10699=10700
<10700=10701
<10701=10703,10702
<10704=10705
<10705=10709,10706
<10706=10707
<10707=10708
<10709=10710
<10710=10712,10711
<10713=10719,10714
<10714=10715
<10715=10716
<10716=10718,10717
<10719=10720
<10720=10724,10721
<10721=10722
<10722=10723
<10724=10725
<10725=10727,10726
<10728=10915,10729
<10729=10900,10803,10781,10730
<10730=10773,10731
<10731=10732
<10732=10764,10733
<10733=10755,10734
<10734=10735
<10735=10745,10736
<10736=10737
<10737=10738
<10738=10740,10739
<10740=10742,10741
<10742=10744,10743
<10745=10746
<10746=10748,10747
<10748=10750,10749
<10750=10752,10751
<10752=10754,10753
<10755=10756
<10756=10760,10757
<10757=10758
<10758=10759
<10760=10761
<10761=10763,10762
<10764=10765
<10765=10769,10766
<10766=10767
<10767=10768
<10769=10770
<10770=10772,10771
<10773=10774
<10774=10776,10775
<10776=10778,10777
<10778=10780,10779
<10781=10794,10782
<10782=10783
<10783=10784
<10784=10786,10785
<10786=10787
<10787=10789,10788
<10789=10791,10790
<10791=10793,10792
<10794=10795
<10795=10799,10796
<10796=10797
<10797=10798
<10799=10800
<10800=10802,10801
<10803=10898,10804
<10804=10805
<10805=10889,10806
<10806=10880,10807
<10807=10874,10808
<10808=10863,10859,10851,10845,10839,10826,10809
<10809=10810
<10810=10822,10811
<10811=10820,10812
<10812=10813
<10813=10815,10814
<10815=10817,10816
<10817=10819,10818
<10820=10821
<10822=10823
<10823=10825,10824
<10826=10827
<10827=10831,10828
<10828=10829
<10829=10830
<10831=10832
<10832=10834,10833
<10834=10836,10835
<10836=10838,10837
<10839=10840
<10840=10842,10841
<10842=10844,10843
<10845=10846
<10846=10848,10847
<10848=10850,10849
<10851=10852
<10852=10856,10853
<10853=10855,10854
<10856=10858,10857
<10859=10860
<10860=10862,10861
<10863=10864
<10864=10868,10865
<10865=10866
<10866=10867
<10868=10869
<10869=10871,10870
<10871=10873,10872
<10874=10875
<10875=10877,10876
<10877=10879,10878
<10880=10881
<10881=10885,10882
<10882=10883
<10883=10884
<10885=10886
<10886=10888,10887
<10889=10890
<10890=10894,10891
<10891=10892
<10892=10893
<10894=10895
<10895=10897,10896
<10898=10899
<10900=10906,10901
<10901=10902
<10902=10903
<10903=10905,10904
<10906=10907
<10907=10911,10908
<10908=10909
<10909=10910
<10911=10912
<10912=10914,10913
<10915=10916
<10916=10927,10917
<10917=10919,10918
<10919=10920
<10920=10922,10921
<10922=10924,10923
<10924=10926,10925
<10927=10929,10928
<10929=10931,10930
<10932=10938,10933
<10933=10934
<10934=10935
<10935=10937,10936
<10938=10939
<10939=10943,10940
<10940=10941
<10941=10942
<10943=10944
<10944=10946,10945
<10947=10953,10948
<10948=10949
<10949=10950
<10950=10952,10951
<10953=10954
<10954=10958,10955
<10955=10956
<10956=10957
<10958=10959
<10959=10961,10960
<10962=10968,10963
<10963=10964
<10964=10965
<10965=10967,10966
<10968=10969
<10969=10973,10970
<10970=10971
<10971=10972
<10973=10974
<10974=10976,10975
<10977=10983,10978
<10978=10979
<10979=10980
<10980=10982,10981
<10983=10984
<10984=10988,10985
<10985=10986
<10986=10987
<10988=10989
<10989=10991,10990
<10992=10993
<10993=11004,10994
<10994=11003,10995
<10995=10997,10996
<10997=10998
<10998=11000,10999
<11000=11002,11001
<11004=11006,11005
<11006=11007
<11007=11009,11008
<11009=11011,11010
<11012=11030,11013
<11013=11021,11014
<11014=11015
<11015=11017,11016
<11017=11018
<11018=11020,11019
<11021=11022
<11022=11026,11023
<11023=11024
<11024=11025
<11026=11027
<11027=11029,11028
<11030=11031
<11032=11037,11033
<11033=11034
<11034=11036,11035
<11037=11038
<11038=11040,11039
<11040=11041
<11041=11043,11042
<11043=11045,11044
<11117=11120,11119,11118
<11120=11233,11190,11189,11188,11187,11186,11165,11154,11121
<11121=11150,11139,11122
<11122=11123
<11123=11135,11124
<11124=11125
<11125=11129,11126
<11126=11127
<11127=11128
<11129=11130
<11130=11132,11131
<11132=11134,11133
<11135=11136
<11136=11138,11137
<11139=11140
<11140=11144,11141
<11141=11142
<11142=11143
<11144=11145
<11145=11147,11146
<11147=11149,11148
<11150=11151
<11151=11153,11152
<11154=11155
<11155=11163,11156
<11156=11161,11159,11157
<11157=11158
<11159=11160
<11161=11162
<11163=11164
<11165=11177,11166
<11166=11167
<11167=11173,11168
<11168=11171,11169
<11169=11170
<11171=11172
<11173=11174
<11174=11176,11175
<11177=11178
<11178=11185,11184,11179
<11179=11183,11180
<11180=11182,11181
<11190=11229,11213,11191
<11191=11192
<11192=11209,11193
<11193=11205,11194
<11194=11195
<11195=11199,11196
<11196=11197
<11197=11198
<11199=11200
<11200=11202,11201
<11202=11204,11203
<11205=11206
<11206=11208,11207
<11209=11210
<11210=11212,11211
<11213=11225,11214
<11214=11215
<11215=11219,11216
<11216=11217
<11217=11218
<11219=11220
<11220=11222,11221
<11222=11224,11223
<11225=11226
<11226=11228,11227
<11229=11230
<11230=11232,11231
<11233=11234
<11234=11239,11238,11235
<11235=11237,11236
<11258=11264,11263,11259
<11259=11260
<11260=11262,11261
<11264=11267,11265
<11265=11266
<11267=11297,11288,11285,11268
<11268=11269
<11269=11277,11270
<11270=11271
<11271=11272
<11272=11276,11273
<11273=11275,11274
<11277=11278
<11278=11280,11279
<11280=11282,11281
<11282=11284,11283
<11285=11287,11286
<11288=11289
<11289=11296,11290
<11290=11292,11291
<11292=11293
<11293=11295,11294
<11297=11298
<11298=11299
<11299=11309,11308,11300
<11300=11307,11301
<11301=11303,11302
<11303=11304
<11304=11306,11305
<11321=11336,11335,11322
<11322=11332,11329,11326,11323
<11323=11325,11324
<11326=11328,11327
<11329=11331,11330
<11332=11334,11333
<11336=11337
<11337=11427,11362,11338
<11338=11339
<11339=11350,11340
<11340=11348,11341
<11341=11342
<11342=11343
<11343=11345,11344
<11345=11347,11346
<11348=11349
<11350=11351
<11351=11361,11360,11352
<11352=11359,11353
<11353=11357,11354
<11354=11355
<11355=11356
<11357=11358
<11362=11415,11381,11375,11369,11363
<11363=11364
<11364=11366,11365
<11366=11368,11367
<11369=11370
<11370=11372,11371
<11372=11374,11373
<11375=11376
<11376=11378,11377
<11378=11380,11379
<11381=11411,11382
<11382=11407,11401,11392,11383
<11383=11384
<11384=11391,11385
<11385=11389,11386
<11386=11387
<11387=11388
<11389=11390
<11392=11393
<11393=11397,11394
<11394=11395
<11395=11396
<11397=11398
<11398=11400,11399
<11401=11402
<11402=11404,11403
<11404=11406,11405
<11407=11408
<11408=11410,11409
<11411=11412
<11412=11414,11413
<11415=11416
<11416=11426,11425,11417
<11417=11424,11418
<11418=11422,11419
<11419=11420
<11420=11421
<11422=11423
<11427=11428
<11447=11459,11458,11448
<11448=11455,11452,11449
<11449=11451,11450
<11452=11454,11453
<11455=11457,11456
<11459=11657,11648,11470,11464,11460
<11460=11461
<11461=11463,11462
<11464=11466,11465
<11466=11467
<11467=11469,11468
<11470=11644,11531,11471
<11471=11472
<11472=11521,11510,11486,11473
<11473=11474
<11474=11478,11475
<11475=11476
<11476=11477
<11478=11479
<11479=11481,11480
<11481=11483,11482
<11483=11485,11484
<11486=11487
<11487=11502,11488
<11488=11491,11489
<11489=11490
<11491=11492
<11492=11500,11493
<11493=11498,11496,11494
<11494=11495
<11496=11497
<11498=11499
<11500=11501
<11502=11503
<11503=11505,11504
<11505=11507,11506
<11507=11509,11508
<11510=11511
<11511=11515,11512
<11512=11513
<11513=11514
<11515=11516
<11516=11518,11517
<11518=11520,11519
<11521=11522
<11522=11524,11523
<11524=11526,11525
<11526=11528,11527
<11528=11530,11529
<11531=11591,11581,11569,11545,11532
<11532=11533
<11533=11537,11534
<11534=11535
<11535=11536
<11537=11538
<11538=11540,11539
<11540=11542,11541
<11542=11544,11543
<11545=11546
<11546=11561,11547
<11547=11550,11548
<11548=11549
<11550=11551
<11551=11559,11552
<11552=11557,11555,11553
<11553=11554
<11555=11556
<11557=11558
<11559=11560
<11561=11562
<11562=11564,11563
<11564=11566,11565
<11566=11568,11567
<11569=11570
<11570=11576,11571
<11571=11573,11572
<11573=11575,11574
<11576=11578,11577
<11578=11580,11579
<11581=11582
<11582=11584,11583
<11584=11586,11585
<11586=11588,11587
<11588=11590,11589
<11591=11636,11592
<11592=11628,11620,11612,11604,11593
<11593=11594
<11594=11598,11595
<11595=11596
<11596=11597
<11598=11599
<11599=11601,11600
<11601=11603,11602
<11604=11605
<11605=11607,11606
<11607=11609,11608
<11609=11611,11610
<11612=11613
<11613=11615,11614
<11615=11617,11616
<11617=11619,11618
<11620=11621
<11621=11623,11622
<11623=11625,11624
<11625=11627,11626
<11628=11629
<11629=11631,11630
<11631=11633,11632
<11633=11635,11634
<11636=11637
<11637=11639,11638
<11639=11641,11640
<11641=11643,11642
<11644=11645
<11645=11647,11646
<11648=11653,11649
<11649=11650
<11650=11652,11651
<11653=11654
<11654=11656,11655
<11657=11658
<11658=11663,11662,11659
<11659=11661,11660
<11700=11706,11705,11701
<11701=11702
<11702=11704,11703
<11706=11707
<11707=11783,11708
<11708=11732,11709
<11709=11726,11710
<11710=11711
<11711=11712
<11712=11718,11713
<11713=11714
<11714=11715
<11715=11717,11716
<11718=11719
<11719=11721,11720
<11721=11723,11722
<11723=11725,11724
<11726=11727
<11727=11729,11728
<11729=11731,11730
<11732=11775,11769,11766,11733
<11733=11734
<11734=11757,11735
<11735=11736
<11736=11746,11737
<11737=11738
<11738=11742,11739
<11739=11740
<11740=11741
<11742=11743
<11743=11745,11744
<11746=11747
<11747=11756,11748
<11748=11750,11749
<11750=11751
<11751=11753,11752
<11753=11755,11754
<11757=11758
<11758=11760,11759
<11760=11762,11761
<11762=11763
<11763=11765,11764
<11766=11768,11767
<11769=11770
<11770=11774,11771
<11771=11773,11772
<11775=11776
<11776=11777
<11777=11782,11781,11778
<11778=11780,11779
<11783=11784
<11784=11793,11785
<11785=11787,11786
<11787=11788
<11788=11790,11789
<11790=11792,11791
<11814=11820,11819,11815
<11815=11816
<11816=11818,11817
<11820=11866,11859,11821
<11821=11851,11842,11839,11822
<11822=11823
<11823=11835,11824
<11824=11825
<11825=11831,11826
<11826=11827
<11827=11828
<11828=11830,11829
<11831=11832
<11832=11834,11833
<11835=11836
<11836=11838,11837
<11839=11841,11840
<11842=11843
<11843=11850,11844
<11844=11846,11845
<11846=11847
<11847=11849,11848
<11851=11852
<11852=11853
<11853=11858,11857,11854
<11854=11856,11855
<11859=11860
<11860=11862,11861
<11862=11863
<11863=11865,11864
<11866=11867
<11867=11872,11871,11868
<11868=11870,11869
<11883=11886,11885,11884
<11886=11887
<11887=11888
<11888=11899,11889
<11889=11890
<11890=11891
<11891=11893,11892
<11893=11895,11894
<11895=11896
<11896=11898,11897
<11899=11900
<11906=11909,11908,11907
<11909=11923,11910
<11910=11911
<11911=11922,11912
<11912=11921,11913
<11913=11915,11914
<11915=11917,11916
<11917=11918
<11918=11920,11919
<11923=11926,11924
<11924=11925
<11926=11927
<11927=11929,11928
<11929=11930
<11930=11932,11931
<11941=11944,11943,11942
<11944=11945
<11945=11946
<11946=11948,11947
<11948=11949
<11949=11951,11950
<11957=11960,11959,11958
<11960=11965,11964,11963,11961
<11961=11962
<11969=11972,11971,11970
<11972=11973
<11973=11982,11974
<11974=11981,11979,11975
<11975=11976
<11976=11978,11977
<11979=11980
<11982=11983
<11988=11994,11993,11989
<11989=11990
<11990=11992,11991
<11994=12175,12169,12163,12154,12145,12138,12123,12116,12109,12084,12077,12061,12054,12033,12026,12017,11995
<11995=11996
<11996=12011,11997
<11997=12004,12000,11998
<11998=11999
<12000=12001
<12001=12003,12002
<12004=12005
<12005=12007,12006
<12007=12008
<12008=12010,12009
<12011=12012
<12012=12014,12013
<12014=12016,12015
<12017=12018
<12018=12020,12019
<12020=12021
<12021=12023,12022
<12023=12025,12024
<12026=12027
<12027=12031,12028
<12028=12029
<12029=12030
<12031=12032
<12033=12047,12034
<12034=12035
<12035=12036
<12036=12045,12037
<12037=12038
<12038=12039
<12039=12041,12040
<12041=12042
<12042=12044,12043
<12045=12046
<12047=12048
<12048=12050,12049
<12050=12051
<12051=12053,12052
<12054=12055
<12055=12059,12056
<12056=12057
<12057=12058
<12059=12060
<12061=12070,12062
<12062=12063
<12063=12064
<12064=12066,12065
<12066=12067
<12067=12069,12068
<12070=12071
<12071=12073,12072
<12073=12074
<12074=12076,12075
<12077=12078
<12078=12082,12079
<12079=12080
<12080=12081
<12082=12083
<12084=12101,12085
<12085=12092,12086
<12086=12087
<12087=12089,12088
<12089=12091,12090
<12092=12093
<12093=12097,12094
<12094=12095
<12095=12096
<12097=12098
<12098=12100,12099
<12101=12102
<12102=12106,12103
<12103=12105,12104
<12106=12108,12107
<12109=12110
<12110=12114,12111
<12111=12112
<12112=12113
<12114=12115
<12116=12117
<12117=12121,12118
<12118=12119
<12119=12120
<12121=12122
<12123=12124
<12124=12134,12125
<12125=12132,12130,12128,12126
<12126=12127
<12128=12129
<12130=12131
<12132=12133
<12134=12135
<12135=12137,12136
<12138=12139
<12139=12143,12140
<12140=12141
<12141=12142
<12143=12144
<12145=12150,12146
<12146=12147
<12147=12149,12148
<12150=12151
<12151=12153,12152
<12154=12155
<12155=12159,12156
<12156=12157
<12157=12158
<12159=12160
<12160=12162,12161
<12163=12164
<12164=12166,12165
<12166=12168,12167
<12169=12170
<12170=12172,12171
<12172=12174,12173
<12175=12176
<12176=12180,12177
<12177=12178
<12178=12179
<12180=12181
<12207=12213,12212,12208
<12208=12209
<12209=12211,12210
<12213=12214
<12214=12249,12240,12237,12215
<12215=12216
<12216=12217
<12217=12231,12218
<12218=12225,12223,12221,12219
<12219=12220
<12221=12222
<12223=12224
<12225=12226
<12226=12228,12227
<12228=12230,12229
<12231=12232
<12232=12234,12233
<12234=12236,12235
<12237=12239,12238
<12240=12241
<12241=12248,12242
<12242=12244,12243
<12244=12245
<12245=12247,12246
<12249=12250
<12250=12251
<12251=12256,12255,12252
<12252=12254,12253
<12272=12275,12274,12273
<12275=12276
<12276=12327,12318,12277
<12277=12309,12278
<12278=12297,12285,12279
<12279=12280
<12280=12281
<12281=12282
<12282=12284,12283
<12285=12286
<12286=12287
<12287=12296,12288
<12288=12292,12289
<12289=12290
<12290=12291
<12292=12293
<12293=12295,12294
<12297=12298
<12298=12304,12299
<12299=12301,12300
<12301=12303,12302
<12304=12306,12305
<12306=12308,12307
<12309=12310
<12310=12317,12316,12311
<12311=12315,12312
<12312=12314,12313
<12318=12319
<12319=12326,12320
<12320=12322,12321
<12322=12323
<12323=12325,12324
<12327=12328
<12328=12329
<12329=12339,12338,12330
<12330=12337,12331
<12331=12333,12332
<12333=12334
<12334=12336,12335
<12353=12359,12358,12354
<12354=12355
<12355=12357,12356
<12359=12378,12372,12366,12360
<12360=12361
<12361=12365,12362
<12362=12364,12363
<12366=12367
<12367=12371,12368
<12368=12370,12369
<12372=12373
<12373=12377,12374
<12374=12376,12375
<12378=12379
<12379=12383,12380
<12380=12382,12381
<12397=12403,12402,12398
<12398=12399
<12399=12401,12400
<12403=12408,12404
<12404=12405
<12405=12407,12406
<12408=12416,12409
<12409=12410
<12410=12414,12411
<12411=12412
<12412=12413
<12414=12415
<12416=12417
<12417=12419,12418
<12427=12436,12435,12428
<12428=12432,12429
<12429=12431,12430
<12432=12434,12433
<12436=12437
<12437=12438
<12438=12440,12439
<12440=12442,12441
<12451=12454,12453,12452
<12454=12515,12510,12506,12462,12455
<12455=12456
<12456=12458,12457
<12458=12459
<12459=12461,12460
<12462=12497,12463
<12463=12490,12486,12481,12473,12464
<12464=12465
<12465=12469,12466
<12466=12467
<12467=12468
<12469=12470
<12470=12472,12471
<12473=12474
<12474=12480,12475
<12475=12479,12476
<12476=12478,12477
<12481=12482
<12482=12485,12484,12483
<12486=12487
<12487=12489,12488
<12490=12491
<12491=12496,12495,12492
<12492=12494,12493
<12497=12498
<12498=12504,12499
<12499=12502,12500
<12500=12501
<12502=12503
<12504=12505
<12506=12507
<12507=12509,12508
<12510=12511
<12511=12514,12513,12512
<12515=12516
<12516=12518,12517
<12518=12519
<12519=12521,12520
<12532=12538,12537,12533
<12533=12534
<12534=12536,12535
<12538=12545,12539
<12539=12540
<12540=12544,12541
<12541=12543,12542
<12545=12573,12546
<12546=12569,12561,12549,12547
<12547=12548
<12549=12550
<12550=12559,12551
<12551=12552
<12552=12553
<12553=12555,12554
<12555=12556
<12556=12558,12557
<12559=12560
<12561=12562
<12562=12568,12563
<12563=12567,12564
<12564=12566,12565
<12569=12570
<12570=12572,12571
<12573=12574
<12574=12583,12575
<12575=12582,12576
<12576=12578,12577
<12578=12579
<12579=12581,12580
<12583=12585,12584
<12596=12602,12601,12597
<12597=12598
<12598=12600,12599
<12602=12603
<12603=12604
<12604=12606,12605
<12612=12615,12614,12613
<12615=12616
<12616=12617
<12622=12628,12627,12623
<12623=12624
<12624=12626,12625
<12628=12629
<12629=12630
<12630=12632,12631
<12638=12644,12643,12639
<12639=12640
<12640=12642,12641
<12644=12645
<12645=12646
<12646=12648,12647
<12656=12665,12664,12657
<12657=12661,12658
<12658=12660,12659
<12661=12663,12662
<12665=12666
<12666=12667
<12667=12669,12668
<12669=12671,12670
<12680=12683,12682,12681
<12683=12684
<12684=12723,12714,12711,12685
<12685=12686
<12686=12696,12687
<12687=12688
<12688=12689
<12689=12691,12690
<12691=12693,12692
<12693=12695,12694
<12696=12697
<12697=12699,12698
<12699=12703,12700
<12700=12701
<12701=12702
<12703=12704
<12704=12706,12705
<12706=12708,12707
<12708=12710,12709
<12711=12713,12712
<12714=12715
<12715=12722,12716
<12716=12718,12717
<12718=12719
<12719=12721,12720
<12723=12724
<12724=12725
<12725=12735,12734,12726
<12726=12733,12727
<12727=12729,12728
<12729=12730
<12730=12732,12731
<12748=12751,12750,12749
<12751=12779,12771,12765,12752
<12752=12753
<12753=12761,12754
<12754=12755
<12755=12756
<12756=12760,12757
<12757=12759,12758
<12761=12762
<12762=12764,12763
<12765=12766
<12766=12768,12767
<12768=12770,12769
<12771=12772
<12772=12778,12773
<12773=12775,12774
<12775=12777,12776
<12779=12780
<12780=12789,12788,12781
<12781=12787,12782
<12782=12784,12783
<12784=12786,12785
<12804=12822,12821,12805
<12805=12818,12815,12812,12809,12806
<12806=12808,12807
<12809=12811,12810
<12812=12814,12813
<12815=12817,12816
<12818=12820,12819
<12822=15375,15356,15347,15343,15329,15295,15286,15167,15153,15082,15073,15059,14903,14894,14880,14698,14689,14675,14611,14602,14588,14490,14481,14467,14337,14328,14314,14275,14168,14154,14136,14118,14098,14083,14068,14053,14033,14013,13998,13965,13961,13953,13932,13928,13899,13878,13874,13829,13808,13804,13756,13735,13731,13696,13675,13671,13637,13616,13612,13606,13581,13560,13559,13558,13557,13556,13555,12823,12830,12848,12876,12888,12903,12907,12916,12925,12945,12949,12961,12972,12976,12990,13009,13030,13039,13166,13223,13279,13280,13281,13292,13303,13314,13325,13336,13347,13400,13401,13402,13403,13404,13405,13406,13407,13408,13409,13410,13411,13432,13449,13470,13491,13512,13551,13552,13553,13554
<12823=12824
<12824=12828,12825
<12825=12826
<12826=12827
<12828=12829
<12830=12839,12831
<12831=12832
<12832=12833
<12833=12837,12834
<12834=12835
<12835=12836
<12837=12838
<12839=12840
<12840=12847,12841
<12841=12843,12842
<12843=12844
<12844=12846,12845
<12848=12849
<12849=12875,12874,12850
<12850=12873,12851
<12851=12871,12852
<12852=12864,12862,12855,12853
<12853=12854
<12855=12856
<12856=12858,12857
<12858=12859
<12859=12861,12860
<12862=12863
<12864=12865
<12865=12867,12866
<12867=12868
<12868=12870,12869
<12871=12872
<12876=12877
<12877=12886,12878
<12878=12879
<12879=12880
<12880=12882,12881
<12882=12883
<12883=12885,12884
<12886=12887
<12888=12889
<12889=12902,12890
<12890=12901,12891
<12891=12895,12892
<12892=12894,12893
<12895=12897,12896
<12897=12898
<12898=12900,12899
<12903=12904
<12904=12906,12905
<12907=12908
<12908=12912,12909
<12909=12910
<12910=12911
<12912=12913
<12913=12915,12914
<12916=12917
<12917=12921,12918
<12918=12919
<12919=12920
<12921=12922
<12922=12924,12923
<12925=12926
<12926=12941,12927
<12927=12937,12930,12928
<12928=12929
<12930=12931
<12931=12933,12932
<12933=12934
<12934=12936,12935
<12937=12938
<12938=12940,12939
<12941=12942
<12942=12944,12943
<12945=12946
<12946=12948,12947
<12949=12950
<12950=12960,12959,12951
<12951=12958,12952
<12952=12954,12953
<12954=12955
<12955=12957,12956
<12961=12962
<12962=12968,12963
<12963=12964
<12964=12965
<12965=12967,12966
<12968=12969
<12969=12971,12970
<12972=12973
<12973=12975,12974
<12976=12986,12977
<12977=12979,12978
<12979=12980
<12980=12984,12981
<12981=12982
<12982=12983
<12984=12985
<12986=12987
<12987=12989,12988
<12990=12991
<12991=13008,13007,12992
<12992=13006,12993
<12993=13004,12994
<12994=12997,12995
<12995=12996
<12997=12998
<12998=13000,12999
<13000=13001
<13001=13003,13002
<13004=13005
<13009=13010
<13010=13029,13028,13011
<13011=13027,13012
<13012=13023,13013
<13013=13014
<13014=13015
<13015=13021,13016
<13016=13019,13017
<13017=13018
<13019=13020
<13021=13022
<13023=13024
<13024=13026,13025
<13030=13031
<13031=13035,13032
<13032=13033
<13033=13034
<13035=13036
<13036=13038,13037
<13039=13151,13040
<13040=13138,13126,13122,13107,13062,13041
<13041=13042
<13042=13058,13043
<13043=13056,13044
<13044=13045
<13045=13047,13046
<13047=13048
<13048=13050,13049
<13050=13052,13051
<13052=13053
<13053=13055,13054
<13056=13057
<13058=13059
<13059=13061,13060
<13062=13099,13095,13092,13063
<13063=13078,13064
<13064=13065
<13065=13077,13066
<13066=13074,13067
<13067=13073,13068
<13068=13070,13069
<13070=13072,13071
<13074=13076,13075
<13078=13079
<13079=13091,13090,13080
<13080=13089,13081
<13081=13085,13082
<13082=13083
<13083=13084
<13085=13086
<13086=13088,13087
<13092=13094,13093
<13095=13096
<13096=13098,13097
<13099=13100
<13100=13101
<13101=13106,13105,13102
<13102=13104,13103
<13107=13108
<13108=13121,13109
<13109=13115,13110
<13110=13114,13111
<13111=13113,13112
<13115=13117,13116
<13117=13118
<13118=13120,13119
<13122=13123
<13123=13125,13124
<13126=13127
<13127=13137,13136,13128
<13128=13135,13129
<13129=13131,13130
<13131=13132
<13132=13134,13133
<13138=13139
<13139=13150,13149,13140
<13140=13148,13141
<13141=13143,13142
<13143=13145,13144
<13145=13147,13146
<13151=13152
<13152=13160,13153
<13153=13155,13154
<13155=13157,13156
<13157=13159,13158
<13160=13162,13161
<13162=13163
<13163=13165,13164
<13166=13213,13167
<13167=13209,13189,13168
<13168=13169
<13169=13185,13170
<13170=13183,13171
<13171=13172
<13172=13174,13173
<13174=13175
<13175=13177,13176
<13177=13179,13178
<13179=13180
<13180=13182,13181
<13183=13184
<13185=13186
<13186=13188,13187
<13189=13190
<13190=13208,13191
<13191=13201,13192
<13192=13200,13193
<13193=13195,13194
<13195=13197,13196
<13197=13199,13198
<13201=13203,13202
<13203=13205,13204
<13205=13207,13206
<13209=13210
<13210=13212,13211
<13213=13214
<13214=13216,13215
<13216=13218,13217
<13218=13220,13219
<13220=13222,13221
<13223=13272,13224
<13224=13268,13246,13225
<13225=13226
<13226=13242,13227
<13227=13240,13228
<13228=13229
<13229=13231,13230
<13231=13232
<13232=13234,13233
<13234=13236,13235
<13236=13237
<13237=13239,13238
<13240=13241
<13242=13243
<13243=13245,13244
<13246=13247
<13247=13267,13248
<13248=13266,13249
<13249=13265,13250
<13250=13259,13251
<13251=13258,13252
<13252=13254,13253
<13254=13255
<13255=13257,13256
<13259=13261,13260
<13261=13262
<13262=13264,13263
<13268=13269
<13269=13271,13270
<13272=13273
<13273=13275,13274
<13275=13276
<13276=13278,13277
<13281=13282
<13282=13290,13283
<13283=13288,13286,13284
<13284=13285
<13286=13287
<13288=13289
<13290=13291
<13292=13293
<13293=13301,13294
<13294=13299,13297,13295
<13295=13296
<13297=13298
<13299=13300
<13301=13302
<13303=13304
<13304=13312,13305
<13305=13310,13308,13306
<13306=13307
<13308=13309
<13310=13311
<13312=13313
<13314=13315
<13315=13323,13316
<13316=13321,13319,13317
<13317=13318
<13319=13320
<13321=13322
<13323=13324
<13325=13326
<13326=13334,13327
<13327=13332,13330,13328
<13328=13329
<13330=13331
<13332=13333
<13334=13335
<13336=13337
<13337=13345,13338
<13338=13343,13341,13339
<13339=13340
<13341=13342
<13343=13344
<13345=13346
<13347=13350,13348
<13348=13349
<13350=13351
<13351=13391,13352
<13352=13387,13374,13353
<13353=13354
<13354=13370,13355
<13355=13368,13356
<13356=13357
<13357=13359,13358
<13359=13360
<13360=13362,13361
<13362=13364,13363
<13364=13365
<13365=13367,13366
<13368=13369
<13370=13371
<13371=13373,13372
<13374=13375
<13375=13386,13376
<13376=13385,13377
<13377=13384,13378
<13378=13380,13379
<13380=13381
<13381=13383,13382
<13387=13388
<13388=13390,13389
<13391=13392
<13392=13394,13393
<13394=13396,13395
<13396=13397
<13397=13399,13398
<13411=13412
<13412=13430,13413
<13413=13428,13421,13414
<13414=13415
<13415=13417,13416
<13417=13418
<13418=13420,13419
<13421=13422
<13422=13424,13423
<13424=13425
<13425=13427,13426
<13428=13429
<13430=13431
<13432=13433
<13433=13447,13434
<13434=13445,13443,13435
<13435=13436
<13436=13438,13437
<13438=13440,13439
<13440=13442,13441
<13443=13444
<13445=13446
<13447=13448
<13449=13450
<13450=13468,13451
<13451=13466,13459,13452
<13452=13453
<13453=13455,13454
<13455=13456
<13456=13458,13457
<13459=13460
<13460=13462,13461
<13462=13463
<13463=13465,13464
<13466=13467
<13468=13469
<13470=13471
<13471=13489,13472
<13472=13487,13480,13473
<13473=13474
<13474=13476,13475
<13476=13477
<13477=13479,13478
<13480=13481
<13481=13483,13482
<13483=13484
<13484=13486,13485
<13487=13488
<13489=13490
<13491=13492
<13492=13510,13493
<13493=13508,13501,13494
<13494=13495
<13495=13497,13496
<13497=13498
<13498=13500,13499
<13501=13502
<13502=13504,13503
<13504=13505
<13505=13507,13506
<13508=13509
<13510=13511
<13512=13515,13513
<13513=13514
<13515=13516
<13516=13547,13517
<13517=13543,13539,13518
<13518=13519
<13519=13535,13520
<13520=13533,13521
<13521=13522
<13522=13524,13523
<13524=13525
<13525=13527,13526
<13527=13529,13528
<13529=13530
<13530=13532,13531
<13533=13534
<13535=13536
<13536=13538,13537
<13539=13540
<13540=13542,13541
<13543=13544
<13544=13546,13545
<13547=13548
<13548=13550,13549
<13560=13561
<13561=13577,13562
<13562=13575,13563
<13563=13564
<13564=13566,13565
<13566=13567
<13567=13569,13568
<13569=13571,13570
<13571=13572
<13572=13574,13573
<13575=13576
<13577=13578
<13578=13580,13579
<13581=13598,13594,13591,13582
<13582=13583
<13583=13584
<13584=13590,13585
<13585=13587,13586
<13587=13589,13588
<13591=13593,13592
<13594=13595
<13595=13597,13596
<13598=13599
<13599=13600
<13600=13605,13604,13601
<13601=13603,13602
<13606=13607
<13607=13611,13608
<13608=13610,13609
<13612=13613
<13613=13615,13614
<13616=13617
<13617=13633,13618
<13618=13631,13619
<13619=13620
<13620=13622,13621
<13622=13623
<13623=13625,13624
<13625=13627,13626
<13627=13628
<13628=13630,13629
<13631=13632
<13633=13634
<13634=13636,13635
<13637=13663,13659,13656,13638
<13638=13639
<13639=13647,13640
<13640=13641
<13641=13642
<13642=13646,13643
<13643=13645,13644
<13647=13648
<13648=13654,13649
<13649=13650
<13650=13651
<13651=13653,13652
<13654=13655
<13656=13658,13657
<13659=13660
<13660=13662,13661
<13663=13664
<13664=13665
<13665=13670,13669,13666
<13666=13668,13667
<13671=13672
<13672=13674,13673
<13675=13676
<13676=13692,13677
<13677=13690,13678
<13678=13679
<13679=13681,13680
<13681=13682
<13682=13684,13683
<13684=13686,13685
<13686=13687
<13687=13689,13688
<13690=13691
<13692=13693
<13693=13695,13694
<13696=13723,13714,13711,13697
<13697=13698
<13698=13699
<13699=13710,13700
<13700=13702,13701
<13702=13704,13703
<13704=13705
<13705=13707,13706
<13707=13709,13708
<13711=13713,13712
<13714=13715
<13715=13722,13716
<13716=13718,13717
<13718=13719
<13719=13721,13720
<13723=13724
<13724=13725
<13725=13730,13729,13726
<13726=13728,13727
<13731=13732
<13732=13734,13733
<13735=13736
<13736=13752,13737
<13737=13750,13738
<13738=13739
<13739=13741,13740
<13741=13742
<13742=13744,13743
<13744=13746,13745
<13746=13747
<13747=13749,13748
<13750=13751
<13752=13753
<13753=13755,13754
<13756=13796,13787,13784,13757
<13757=13775,13758
<13758=13759
<13759=13774,13760
<13760=13768,13761
<13761=13767,13762
<13762=13764,13763
<13764=13766,13765
<13768=13770,13769
<13770=13771
<13771=13773,13772
<13775=13776
<13776=13783,13782,13777
<13777=13781,13778
<13778=13780,13779
<13784=13786,13785
<13787=13788
<13788=13795,13789
<13789=13791,13790
<13791=13792
<13792=13794,13793
<13796=13797
<13797=13798
<13798=13803,13802,13799
<13799=13801,13800
<13804=13805
<13805=13807,13806
<13808=13809
<13809=13825,13810
<13810=13823,13811
<13811=13812
<13812=13814,13813
<13814=13815
<13815=13817,13816
<13817=13819,13818
<13819=13820
<13820=13822,13821
<13823=13824
<13825=13826
<13826=13828,13827
<13829=13866,13857,13854,13830
<13830=13845,13831
<13831=13832
<13832=13844,13833
<13833=13841,13834
<13834=13840,13835
<13835=13837,13836
<13837=13839,13838
<13841=13843,13842
<13845=13846
<13846=13853,13852,13847
<13847=13851,13848
<13848=13850,13849
<13854=13856,13855
<13857=13858
<13858=13865,13859
<13859=13861,13860
<13861=13862
<13862=13864,13863
<13866=13867
<13867=13868
<13868=13873,13872,13869
<13869=13871,13870
<13874=13875
<13875=13877,13876
<13878=13879
<13879=13895,13880
<13880=13893,13881
<13881=13882
<13882=13884,13883
<13884=13885
<13885=13887,13886
<13887=13889,13888
<13889=13890
<13890=13892,13891
<13893=13894
<13895=13896
<13896=13898,13897
<13899=13920,13916,13913,13900
<13900=13901
<13901=13909,13902
<13902=13903
<13903=13904
<13904=13908,13905
<13905=13907,13906
<13909=13910
<13910=13912,13911
<13913=13915,13914
<13916=13917
<13917=13919,13918
<13920=13921
<13921=13922
<13922=13927,13926,13923
<13923=13925,13924
<13928=13929
<13929=13931,13930
<13932=13933
<13933=13949,13934
<13934=13947,13935
<13935=13936
<13936=13938,13937
<13938=13939
<13939=13941,13940
<13941=13943,13942
<13943=13944
<13944=13946,13945
<13947=13948
<13949=13950
<13950=13952,13951
<13953=13954
<13954=13960,13955
<13955=13957,13956
<13957=13959,13958
<13961=13962
<13962=13964,13963
<13965=13989,13966
<13966=13967
<13967=13985,13968
<13968=13983,13969
<13969=13970
<13970=13972,13971
<13972=13973
<13973=13975,13974
<13975=13977,13976
<13977=13978
<13978=13980,13979
<13980=13982,13981
<13983=13984
<13985=13986
<13986=13988,13987
<13989=13990
<13990=13992,13991
<13992=13993
<13993=13995,13994
<13995=13997,13996
<13998=13999
<13999=14009,14000
<14000=14007,14001
<14001=14002
<14002=14004,14003
<14004=14006,14005
<14007=14008
<14009=14010
<14010=14012,14011
<14013=14014
<14014=14029,14015
<14015=14027,14016
<14016=14017
<14017=14019,14018
<14019=14020
<14020=14022,14021
<14022=14024,14023
<14024=14026,14025
<14027=14028
<14029=14030
<14030=14032,14031
<14033=14034
<14034=14049,14035
<14035=14047,14036
<14036=14037
<14037=14039,14038
<14039=14040
<14040=14042,14041
<14042=14044,14043
<14044=14046,14045
<14047=14048
<14049=14050
<14050=14052,14051
<14053=14054
<14054=14064,14055
<14055=14062,14056
<14056=14057
<14057=14059,14058
<14059=14061,14060
<14062=14063
<14064=14065
<14065=14067,14066
<14068=14069
<14069=14079,14070
<14070=14077,14071
<14071=14072
<14072=14074,14073
<14074=14076,14075
<14077=14078
<14079=14080
<14080=14082,14081
<14083=14084
<14084=14094,14085
<14085=14092,14086
<14086=14087
<14087=14089,14088
<14089=14091,14090
<14092=14093
<14094=14095
<14095=14097,14096
<14098=14099
<14099=14114,14100
<14100=14112,14101
<14101=14102
<14102=14104,14103
<14104=14105
<14105=14107,14106
<14107=14109,14108
<14109=14111,14110
<14112=14113
<14114=14115
<14115=14117,14116
<14118=14119
<14119=14132,14120
<14120=14130,14121
<14121=14122
<14122=14128,14123
<14123=14124
<14124=14125
<14125=14127,14126
<14128=14129
<14130=14131
<14132=14133
<14133=14135,14134
<14136=14137
<14137=14150,14138
<14138=14148,14139
<14139=14140
<14140=14146,14141
<14141=14142
<14142=14143
<14143=14145,14144
<14146=14147
<14148=14149
<14150=14151
<14151=14153,14152
<14154=14155
<14155=14167,14166,14156
<14156=14165,14157
<14157=14161,14158
<14158=14159
<14159=14160
<14161=14162
<14162=14164,14163
<14168=14262,14253,14250,14169
<14169=14233,14219,14199,14179,14170
<14170=14171
<14171=14175,14172
<14172=14173
<14173=14174
<14175=14176
<14176=14178,14177
<14179=14180
<14180=14195,14181
<14181=14193,14182
<14182=14183
<14183=14185,14184
<14185=14186
<14186=14188,14187
<14188=14190,14189
<14190=14192,14191
<14193=14194
<14195=14196
<14196=14198,14197
<14199=14200
<14200=14215,14201
<14201=14213,14202
<14202=14203
<14203=14205,14204
<14205=14206
<14206=14208,14207
<14208=14210,14209
<14210=14212,14211
<14213=14214
<14215=14216
<14216=14218,14217
<14219=14220
<14220=14232,14231,14221
<14221=14230,14222
<14222=14226,14223
<14223=14224
<14224=14225
<14226=14227
<14227=14229,14228
<14233=14235,14234
<14235=14236
<14236=14238,14237
<14238=14242,14239
<14239=14240
<14240=14241
<14242=14243
<14243=14245,14244
<14245=14247,14246
<14247=14249,14248
<14250=14252,14251
<14253=14254
<14254=14261,14255
<14255=14257,14256
<14257=14258
<14258=14260,14259
<14262=14263
<14263=14264
<14264=14274,14273,14265
<14265=14272,14266
<14266=14268,14267
<14268=14269
<14269=14271,14270
<14275=14310,14306,14285,14276
<14276=14277
<14277=14281,14278
<14278=14279
<14279=14280
<14281=14282
<14282=14284,14283
<14285=14286
<14286=14302,14287
<14287=14300,14288
<14288=14289
<14289=14291,14290
<14291=14292
<14292=14294,14293
<14294=14296,14295
<14296=14297
<14297=14299,14298
<14300=14301
<14302=14303
<14303=14305,14304
<14306=14307
<14307=14309,14308
<14310=14311
<14311=14313,14312
<14314=14315
<14315=14327,14326,14316
<14316=14325,14317
<14317=14321,14318
<14318=14319
<14319=14320
<14321=14322
<14322=14324,14323
<14328=14329
<14329=14333,14330
<14330=14331
<14331=14332
<14333=14334
<14334=14336,14335
<14337=14463,14359,14338
<14338=14339
<14339=14355,14340
<14340=14353,14341
<14341=14342
<14342=14344,14343
<14344=14345
<14345=14347,14346
<14347=14349,14348
<14349=14350
<14350=14352,14351
<14353=14354
<14355=14356
<14356=14358,14357
<14359=14450,14441,14438,14360
<14360=14427,14413,14387,14361
<14361=14362
<14362=14386,14363
<14363=14381,14364
<14364=14380,14365
<14365=14375,14366
<14366=14374,14367
<14367=14369,14368
<14369=14371,14370
<14371=14373,14372
<14375=14377,14376
<14377=14379,14378
<14381=14383,14382
<14383=14385,14384
<14387=14388
<14388=14412,14389
<14389=14407,14390
<14390=14406,14391
<14391=14401,14392
<14392=14400,14393
<14393=14395,14394
<14395=14397,14396
<14397=14399,14398
<14401=14403,14402
<14403=14405,14404
<14407=14409,14408
<14409=14411,14410
<14413=14414
<14414=14426,14415
<14415=14423,14416
<14416=14422,14417
<14417=14419,14418
<14419=14421,14420
<14423=14425,14424
<14427=14428
<14428=14437,14436,14429
<14429=14435,14430
<14430=14434,14431
<14431=14433,14432
<14438=14440,14439
<14441=14442
<14442=14449,14443
<14443=14445,14444
<14445=14446
<14446=14448,14447
<14450=14451
<14451=14452
<14452=14462,14461,14453
<14453=14460,14454
<14454=14456,14455
<14456=14457
<14457=14459,14458
<14463=14464
<14464=14466,14465
<14467=14468
<14468=14480,14479,14469
<14469=14478,14470
<14470=14474,14471
<14471=14472
<14472=14473
<14474=14475
<14475=14477,14476
<14481=14482
<14482=14486,14483
<14483=14484
<14484=14485
<14486=14487
<14487=14489,14488
<14490=14584,14572,14566,14512,14491
<14491=14492
<14492=14508,14493
<14493=14506,14494
<14494=14495
<14495=14497,14496
<14497=14498
<14498=14500,14499
<14500=14502,14501
<14502=14503
<14503=14505,14504
<14506=14507
<14508=14509
<14509=14511,14510
<14512=14558,14554,14551,14513
<14513=14540,14514
<14514=14515
<14515=14539,14516
<14516=14536,14517
<14517=14535,14518
<14518=14532,14519
<14519=14531,14520
<14520=14528,14521
<14521=14527,14522
<14522=14524,14523
<14524=14526,14525
<14528=14530,14529
<14532=14534,14533
<14536=14538,14537
<14540=14541
<14541=14550,14549,14542
<14542=14548,14543
<14543=14547,14544
<14544=14546,14545
<14551=14553,14552
<14554=14555
<14555=14557,14556
<14558=14559
<14559=14560
<14560=14565,14564,14561
<14561=14563,14562
<14566=14567
<14567=14571,14568
<14568=14570,14569
<14572=14573
<14573=14583,14582,14574
<14574=14581,14575
<14575=14577,14576
<14577=14578
<14578=14580,14579
<14584=14585
<14585=14587,14586
<14588=14589
<14589=14601,14600,14590
<14590=14599,14591
<14591=14595,14592
<14592=14593
<14593=14594
<14595=14596
<14596=14598,14597
<14602=14603
<14603=14607,14604
<14604=14605
<14605=14606
<14607=14608
<14608=14610,14609
<14611=14671,14633,14612
<14612=14613
<14613=14629,14614
<14614=14627,14615
<14615=14616
<14616=14618,14617
<14618=14619
<14619=14621,14620
<14621=14623,14622
<14623=14624
<14624=14626,14625
<14627=14628
<14629=14630
<14630=14632,14631
<14633=14663,14650,14647,14634
<14634=14635
<14635=14636
<14636=14646,14637
<14637=14639,14638
<14639=14641,14640
<14641=14643,14642
<14643=14645,14644
<14647=14649,14648
<14650=14651
<14651=14662,14652
<14652=14654,14653
<14654=14655
<14655=14657,14656
<14657=14659,14658
<14659=14661,14660
<14663=14664
<14664=14665
<14665=14670,14669,14666
<14666=14668,14667
<14671=14672
<14672=14674,14673
<14675=14676
<14676=14688,14687,14677
<14677=14686,14678
<14678=14682,14679
<14679=14680
<14680=14681
<14682=14683
<14683=14685,14684
<14689=14690
<14690=14694,14691
<14691=14692
<14692=14693
<14694=14695
<14695=14697,14696
<14698=14876,14818,14797,14699
<14699=14791,14700
<14700=14787,14722,14701
<14701=14702
<14702=14718,14703
<14703=14716,14704
<14704=14705
<14705=14707,14706
<14707=14708
<14708=14710,14709
<14710=14712,14711
<14712=14713
<14713=14715,14714
<14716=14717
<14718=14719
<14719=14721,14720
<14722=14779,14766,14763,14723
<14723=14745,14737,14728,14724
<14724=14725
<14725=14727,14726
<14728=14729
<14729=14733,14730
<14730=14731
<14731=14732
<14733=14734
<14734=14736,14735
<14737=14738
<14738=14744,14739
<14739=14741,14740
<14741=14743,14742
<14745=14746
<14746=14762,14761,14747
<14747=14760,14748
<14748=14752,14749
<14749=14750
<14750=14751
<14752=14753
<14753=14755,14754
<14755=14757,14756
<14757=14759,14758
<14763=14765,14764
<14766=14767
<14767=14778,14768
<14768=14770,14769
<14770=14771
<14771=14773,14772
<14773=14775,14774
<14775=14777,14776
<14779=14780
<14780=14781
<14781=14786,14785,14782
<14782=14784,14783
<14787=14788
<14788=14790,14789
<14791=14792
<14792=14794,14793
<14794=14796,14795
<14797=14798
<14798=14814,14799
<14799=14812,14800
<14800=14801
<14801=14803,14802
<14803=14804
<14804=14806,14805
<14806=14808,14807
<14808=14809
<14809=14811,14810
<14812=14813
<14814=14815
<14815=14817,14816
<14818=14868,14855,14852,14819
<14819=14834,14820
<14820=14830,14821
<14821=14822
<14822=14823
<14823=14829,14824
<14824=14826,14825
<14826=14828,14827
<14830=14831
<14831=14833,14832
<14834=14835
<14835=14851,14850,14836
<14836=14849,14837
<14837=14841,14838
<14838=14839
<14839=14840
<14841=14842
<14842=14844,14843
<14844=14846,14845
<14846=14848,14847
<14852=14854,14853
<14855=14856
<14856=14867,14857
<14857=14859,14858
<14859=14860
<14860=14862,14861
<14862=14864,14863
<14864=14866,14865
<14868=14869
<14869=14870
<14870=14875,14874,14871
<14871=14873,14872
<14876=14877
<14877=14879,14878
<14880=14881
<14881=14893,14892,14882
<14882=14891,14883
<14883=14887,14884
<14884=14885
<14885=14886
<14887=14888
<14888=14890,14889
<14894=14895
<14895=14899,14896
<14896=14897
<14897=14898
<14899=14900
<14900=14902,14901
<14903=15055,15048,15035,14925,14904
<14904=14905
<14905=14921,14906
<14906=14919,14907
<14907=14908
<14908=14910,14909
<14910=14911
<14911=14913,14912
<14913=14915,14914
<14915=14916
<14916=14918,14917
<14919=14920
<14921=14922
<14922=14924,14923
<14925=15020,15009,15006,14926
<14926=14976,14966,14951,14945,14927
<14927=14943,14928
<14928=14929
<14929=14942,14930
<14930=14932,14931
<14932=14940,14933
<14933=14934
<14934=14935
<14935=14937,14936
<14937=14939,14938
<14940=14941
<14943=14944
<14945=14946
<14946=14950,14947
<14947=14949,14948
<14951=14952
<14952=14965,14953
<14953=14964,14954
<14954=14956,14955
<14956=14957
<14957=14959,14958
<14959=14961,14960
<14961=14963,14962
<14966=14967
<14967=14975,14968
<14968=14970,14969
<14970=14972,14971
<14972=14974,14973
<14976=14977
<14977=15005,14978
<14978=15000,14979
<14979=14999,14980
<14980=14992,14981
<14981=14991,14982
<14982=14984,14983
<14984=14986,14985
<14986=14988,14987
<14988=14990,14989
<14992=14994,14993
<14994=14996,14995
<14996=14998,14997
<15000=15002,15001
<15002=15004,15003
<15006=15008,15007
<15009=15010
<15010=15019,15011
<15011=15013,15012
<15013=15014
<15014=15016,15015
<15016=15018,15017
<15020=15021
<15021=15022
<15022=15034,15033,15023
<15023=15032,15024
<15024=15026,15025
<15026=15027
<15027=15029,15028
<15029=15031,15030
<15035=15036
<15036=15047,15037
<15037=15039,15038
<15039=15041,15040
<15041=15042
<15042=15044,15043
<15044=15046,15045
<15048=15049
<15049=15054,15053,15050
<15050=15052,15051
<15055=15056
<15056=15058,15057
<15059=15060
<15060=15072,15071,15061
<15061=15070,15062
<15062=15066,15063
<15063=15064
<15064=15065
<15066=15067
<15067=15069,15068
<15073=15074
<15074=15078,15075
<15075=15076
<15076=15077
<15078=15079
<15079=15081,15080
<15082=15149,15104,15083
<15083=15084
<15084=15100,15085
<15085=15098,15086
<15086=15087
<15087=15089,15088
<15089=15090
<15090=15092,15091
<15092=15094,15093
<15094=15095
<15095=15097,15096
<15098=15099
<15100=15101
<15101=15103,15102
<15104=15136,15127,15124,15105
<15105=15106
<15106=15107
<15107=15123,15108
<15108=15118,15109
<15109=15117,15110
<15110=15112,15111
<15112=15114,15113
<15114=15116,15115
<15118=15120,15119
<15120=15122,15121
<15124=15126,15125
<15127=15128
<15128=15135,15129
<15129=15131,15130
<15131=15132
<15132=15134,15133
<15136=15137
<15137=15138
<15138=15148,15147,15139
<15139=15146,15140
<15140=15142,15141
<15142=15143
<15143=15145,15144
<15149=15150
<15150=15152,15151
<15153=15154
<15154=15166,15165,15155
<15155=15164,15156
<15156=15160,15157
<15157=15158
<15158=15159
<15160=15161
<15161=15163,15162
<15167=15273,15264,15261,15168
<15168=15244,15227,15213,15193,15178,15169
<15169=15170
<15170=15174,15171
<15171=15172
<15172=15173
<15174=15175
<15175=15177,15176
<15178=15179
<15179=15189,15180
<15180=15187,15181
<15181=15182
<15182=15184,15183
<15184=15186,15185
<15187=15188
<15189=15190
<15190=15192,15191
<15193=15194
<15194=15209,15195
<15195=15207,15196
<15196=15197
<15197=15199,15198
<15199=15200
<15200=15202,15201
<15202=15204,15203
<15204=15206,15205
<15207=15208
<15209=15210
<15210=15212,15211
<15213=15214
<15214=15226,15225,15215
<15215=15224,15216
<15216=15220,15217
<15217=15218
<15218=15219
<15220=15221
<15221=15223,15222
<15227=15229,15228
<15229=15230
<15230=15232,15231
<15232=15236,15233
<15233=15234
<15234=15235
<15236=15237
<15237=15239,15238
<15239=15241,15240
<15241=15243,15242
<15244=15246,15245
<15246=15247
<15247=15249,15248
<15249=15253,15250
<15250=15251
<15251=15252
<15253=15254
<15254=15256,15255
<15256=15258,15257
<15258=15260,15259
<15261=15263,15262
<15264=15265
<15265=15272,15266
<15266=15268,15267
<15268=15269
<15269=15271,15270
<15273=15274
<15274=15275
<15275=15285,15284,15276
<15276=15283,15277
<15277=15279,15278
<15279=15280
<15280=15282,15281
<15286=15287
<15287=15291,15288
<15288=15289
<15289=15290
<15291=15292
<15292=15294,15293
<15295=15318,15307,15296
<15296=15297
<15297=15303,15298
<15298=15301,15299
<15299=15300
<15301=15302
<15303=15304
<15304=15306,15305
<15307=15308
<15308=15314,15309
<15309=15312,15310
<15310=15311
<15312=15313
<15314=15315
<15315=15317,15316
<15318=15319
<15319=15325,15320
<15320=15323,15321
<15321=15322
<15323=15324
<15325=15326
<15326=15328,15327
<15329=15330
<15330=15342,15341,15331
<15331=15340,15332
<15332=15336,15333
<15333=15334
<15334=15335
<15336=15337
<15337=15339,15338
<15343=15344
<15344=15346,15345
<15347=15348
<15348=15350,15349
<15350=15351
<15351=15353,15352
<15353=15355,15354
<15356=15368,15357
<15357=15358
<15358=15359
<15359=15367,15360
<15360=15362,15361
<15362=15364,15363
<15364=15366,15365
<15368=15369
<15369=15371,15370
<15371=15372
<15372=15374,15373
<15375=15376
<15376=15384,15377
<15377=15378
<15378=15379
<15379=15381,15380
<15381=15383,15382
<15384=15385
<15601=15610,15609,15602
<15602=15606,15603
<15603=15605,15604
<15606=15608,15607
<15610=15650,15618,15611
<15611=15612
<15612=15614,15613
<15614=15615
<15615=15617,15616
<15618=15619
<15619=15649,15620
<15620=15643,15621
<15621=15642,15622
<15622=15637,15623
<15623=15636,15624
<15624=15628,15625
<15625=15627,15626
<15628=15634,15629
<15629=15632,15630
<15630=15631
<15632=15633
<15634=15635
<15637=15639,15638
<15639=15641,15640
<15643=15645,15644
<15645=15646
<15646=15648,15647
<15650=15651
<15651=15653,15652
<15664=15673,15672,15665
<15665=15669,15666
<15666=15668,15667
<15669=15671,15670
<15673=15826,15801,15719,15704,15674
<15674=15697,15675
<15675=15676
<15676=15686,15677
<15677=15678
<15678=15684,15679
<15679=15680
<15680=15681
<15681=15683,15682
<15684=15685
<15686=15687
<15687=15689,15688
<15689=15695,15690
<15690=15693,15691
<15691=15692
<15693=15694
<15695=15696
<15697=15698
<15698=15702,15699
<15699=15700
<15700=15701
<15702=15703
<15704=15705
<15705=15718,15706
<15706=15712,15707
<15707=15710,15708
<15708=15709
<15710=15711
<15712=15713
<15713=15715,15714
<15715=15717,15716
<15719=15794,15720
<15720=15787,15771,15755,15721
<15721=15742,15722
<15722=15724,15723
<15724=15725
<15725=15740,15726
<15726=15727
<15727=15728
<15728=15739,15729
<15729=15738,15730
<15730=15737,15731
<15731=15733,15732
<15733=15734
<15734=15736,15735
<15740=15741
<15742=15743
<15743=15745,15744
<15745=15751,15746
<15746=15749,15747
<15747=15748
<15749=15750
<15751=15752
<15752=15754,15753
<15755=15767,15756
<15756=15758,15757
<15758=15759
<15759=15765,15760
<15760=15761
<15761=15762
<15762=15764,15763
<15765=15766
<15767=15768
<15768=15770,15769
<15771=15772
<15772=15786,15785,15773
<15773=15784,15774
<15774=15782,15775
<15775=15780,15776
<15776=15777
<15777=15779,15778
<15780=15781
<15782=15783
<15787=15788
<15788=15793,15792,15789
<15789=15791,15790
<15794=15795
<15795=15799,15796
<15796=15797
<15797=15798
<15799=15800
<15801=15817,15802
<15802=15803
<15803=15816,15804
<15804=15810,15805
<15805=15808,15806
<15806=15807
<15808=15809
<15810=15811
<15811=15813,15812
<15813=15815,15814
<15817=15818
<15818=15825,15819
<15819=15823,15820
<15820=15821
<15821=15822
<15823=15824
<15826=15827
<15827=15843,15842,15828
<15828=15841,15829
<15829=15835,15830
<15830=15833,15831
<15831=15832
<15833=15834
<15835=15836
<15836=15838,15837
<15838=15840,15839
<15863=15869,15868,15864
<15864=15865
<15865=15867,15866
<15869=18954,18950,18941,18927,18905,18898,18873,18859,18807,18793,18746,18732,18689,18675,18582,18568,18456,18442,18396,18382,17619,17605,17439,17425,17405,17391,17349,15870
<15870=17347,15871
<15871=17328,17309,17294,17268,17257,17221,17066,16998,16951,16898,16830,16740,16664,16633,16607,16592,16540,16501,16462,16423,16337,16288,16287,16286,16285,16284,16283,16282,16281,16224,16215,16206,16197,16188,16179,16170,16169,16168,16100,15913,15872
<15872=15904,15873
<15873=15883,15874
<15874=15875
<15875=15879,15876
<15876=15877
<15877=15878
<15879=15880
<15880=15882,15881
<15883=15884
<15884=15903,15902,15885
<15885=15901,15886
<15886=15899,15887
<15887=15890,15888
<15888=15889
<15890=15891
<15891=15895,15892
<15892=15893
<15893=15894
<15895=15896
<15896=15898,15897
<15899=15900
<15904=15905
<15905=15909,15906
<15906=15907
<15907=15908
<15909=15910
<15910=15912,15911
<15913=16091,15914
<15914=16079,16072,16065,16059,16046,15915
<15915=16032,15916
<15916=16010,15997,15935,15926,15917
<15917=15918
<15918=15922,15919
<15919=15920
<15920=15921
<15922=15923
<15923=15925,15924
<15926=15927
<15927=15931,15928
<15928=15929
<15929=15930
<15931=15932
<15932=15934,15933
<15935=15989,15985,15982,15936
<15936=15978,15968,15937
<15937=15959,15948,15938
<15938=15939
<15939=15940
<15940=15944,15941
<15941=15942
<15942=15943
<15944=15945
<15945=15947,15946
<15948=15949
<15949=15955,15950
<15950=15953,15951
<15951=15952
<15953=15954
<15955=15956
<15956=15958,15957
<15959=15960
<15960=15967,15961
<15961=15963,15962
<15963=15964
<15964=15966,15965
<15968=15969
<15969=15977,15970
<15970=15974,15971
<15971=15973,15972
<15974=15976,15975
<15978=15979
<15979=15981,15980
<15982=15984,15983
<15985=15986
<15986=15988,15987
<15989=15990
<15990=15991
<15991=15996,15995,15992
<15992=15994,15993
<15997=15998
<15998=16009,16008,15999
<15999=16007,16000
<16000=16002,16001
<16002=16004,16003
<16004=16006,16005
<16010=16022,16011
<16011=16012
<16012=16014,16013
<16014=16015
<16015=16017,16016
<16017=16019,16018
<16019=16021,16020
<16022=16023
<16023=16031,16024
<16024=16026,16025
<16026=16028,16027
<16028=16030,16029
<16032=16033
<16033=16043,16034
<16034=16040,16035
<16035=16037,16036
<16037=16039,16038
<16040=16042,16041
<16043=16045,16044
<16046=16047
<16047=16058,16057,16048
<16048=16056,16049
<16049=16055,16050
<16050=16054,16051
<16051=16053,16052
<16059=16060
<16060=16064,16061
<16061=16063,16062
<16065=16066
<16066=16071,16070,16067
<16067=16069,16068
<16072=16073
<16073=16078,16077,16074
<16074=16076,16075
<16079=16080
<16080=16090,16089,16081
<16081=16085,16082
<16082=16083
<16083=16084
<16085=16086
<16086=16088,16087
<16091=16092
<16092=16096,16093
<16093=16094
<16094=16095
<16096=16097
<16097=16099,16098
<16100=16159,16101
<16101=16147,16128,16120,16111,16102
<16102=16103
<16103=16107,16104
<16104=16105
<16105=16106
<16107=16108
<16108=16110,16109
<16111=16112
<16112=16118,16113
<16113=16116,16114
<16114=16115
<16116=16117
<16118=16119
<16120=16121
<16121=16127,16122
<16122=16126,16123
<16123=16125,16124
<16128=16141,16135,16129
<16129=16134,16133,16130
<16130=16132,16131
<16135=16140,16139,16136
<16136=16138,16137
<16141=16146,16145,16142
<16142=16144,16143
<16147=16148
<16148=16158,16157,16149
<16149=16153,16150
<16150=16151
<16151=16152
<16153=16154
<16154=16156,16155
<16159=16160
<16160=16164,16161
<16161=16162
<16162=16163
<16164=16165
<16165=16167,16166
<16170=16171
<16171=16177,16172
<16172=16175,16173
<16173=16174
<16175=16176
<16177=16178
<16179=16180
<16180=16186,16181
<16181=16184,16182
<16182=16183
<16184=16185
<16186=16187
<16188=16189
<16189=16195,16190
<16190=16193,16191
<16191=16192
<16193=16194
<16195=16196
<16197=16198
<16198=16204,16199
<16199=16202,16200
<16200=16201
<16202=16203
<16204=16205
<16206=16207
<16207=16213,16208
<16208=16211,16209
<16209=16210
<16211=16212
<16213=16214
<16215=16216
<16216=16222,16217
<16217=16220,16218
<16218=16219
<16220=16221
<16222=16223
<16224=16227,16225
<16225=16226
<16227=16228
<16228=16272,16229
<16229=16260,16247,16241,16230
<16230=16231
<16231=16237,16232
<16232=16235,16233
<16233=16234
<16235=16236
<16237=16238
<16238=16240,16239
<16241=16242
<16242=16246,16243
<16243=16245,16244
<16247=16254,16248
<16248=16253,16252,16249
<16249=16251,16250
<16254=16259,16258,16255
<16255=16257,16256
<16260=16261
<16261=16271,16270,16262
<16262=16266,16263
<16263=16264
<16264=16265
<16266=16267
<16267=16269,16268
<16272=16273
<16273=16277,16274
<16274=16275
<16275=16276
<16277=16278
<16278=16280,16279
<16288=16328,16289
<16289=16307,16290
<16290=16301,16291
<16291=16292
<16292=16294,16293
<16294=16296,16295
<16296=16298,16297
<16298=16300,16299
<16301=16302
<16302=16304,16303
<16304=16306,16305
<16307=16308
<16308=16327,16326,16309
<16309=16325,16310
<16310=16323,16311
<16311=16314,16312
<16312=16313
<16314=16315
<16315=16319,16316
<16316=16317
<16317=16318
<16319=16320
<16320=16322,16321
<16323=16324
<16328=16329
<16329=16333,16330
<16330=16331
<16331=16332
<16333=16334
<16334=16336,16335
<16337=16414,16338
<16338=16402,16395,16388,16382,16378,16372,16339
<16339=16366,16340
<16340=16351,16341
<16341=16342
<16342=16344,16343
<16344=16346,16345
<16346=16348,16347
<16348=16350,16349
<16351=16352
<16352=16358,16353
<16353=16354
<16354=16355
<16355=16357,16356
<16358=16359
<16359=16361,16360
<16361=16363,16362
<16363=16365,16364
<16366=16367
<16367=16369,16368
<16369=16371,16370
<16372=16373
<16373=16377,16374
<16374=16376,16375
<16378=16379
<16379=16381,16380
<16382=16383
<16383=16387,16384
<16384=16386,16385
<16388=16389
<16389=16394,16393,16390
<16390=16392,16391
<16395=16396
<16396=16401,16400,16397
<16397=16399,16398
<16402=16403
<16403=16413,16412,16404
<16404=16408,16405
<16405=16406
<16406=16407
<16408=16409
<16409=16411,16410
<16414=16415
<16415=16419,16416
<16416=16417
<16417=16418
<16419=16420
<16420=16422,16421
<16423=16453,16424
<16424=16432,16425
<16425=16426
<16426=16430,16427
<16427=16428
<16428=16429
<16430=16431
<16432=16433
<16433=16452,16451,16434
<16434=16450,16435
<16435=16448,16436
<16436=16439,16437
<16437=16438
<16439=16440
<16440=16444,16441
<16441=16442
<16442=16443
<16444=16445
<16445=16447,16446
<16448=16449
<16453=16454
<16454=16458,16455
<16455=16456
<16456=16457
<16458=16459
<16459=16461,16460
<16462=16492,16463
<16463=16471,16464
<16464=16465
<16465=16469,16466
<16466=16467
<16467=16468
<16469=16470
<16471=16472
<16472=16491,16490,16473
<16473=16489,16474
<16474=16487,16475
<16475=16478,16476
<16476=16477
<16478=16479
<16479=16483,16480
<16480=16481
<16481=16482
<16483=16484
<16484=16486,16485
<16487=16488
<16492=16493
<16493=16497,16494
<16494=16495
<16495=16496
<16497=16498
<16498=16500,16499
<16501=16531,16502
<16502=16510,16503
<16503=16504
<16504=16508,16505
<16505=16506
<16506=16507
<16508=16509
<16510=16511
<16511=16530,16529,16512
<16512=16528,16513
<16513=16526,16514
<16514=16517,16515
<16515=16516
<16517=16518
<16518=16522,16519
<16519=16520
<16520=16521
<16522=16523
<16523=16525,16524
<16526=16527
<16531=16532
<16532=16536,16533
<16533=16534
<16534=16535
<16536=16537
<16537=16539,16538
<16540=16583,16541
<16541=16562,16542
<16542=16556,16543
<16543=16544
<16544=16548,16545
<16545=16546
<16546=16547
<16548=16549
<16549=16551,16550
<16551=16553,16552
<16553=16555,16554
<16556=16557
<16557=16559,16558
<16559=16561,16560
<16562=16563
<16563=16582,16581,16564
<16564=16580,16565
<16565=16578,16566
<16566=16569,16567
<16567=16568
<16569=16570
<16570=16574,16571
<16571=16572
<16572=16573
<16574=16575
<16575=16577,16576
<16578=16579
<16583=16584
<16584=16588,16585
<16585=16586
<16586=16587
<16588=16589
<16589=16591,16590
<16592=16593
<16593=16602,16594
<16594=16598,16595
<16595=16596
<16596=16597
<16598=16599
<16599=16601,16600
<16602=16604,16603
<16604=16606,16605
<16607=16624,16608
<16608=16609
<16609=16610
<16610=16619,16611
<16611=16615,16612
<16612=16613
<16613=16614
<16615=16616
<16616=16618,16617
<16619=16621,16620
<16621=16623,16622
<16624=16625
<16625=16629,16626
<16626=16627
<16627=16628
<16629=16630
<16630=16632,16631
<16633=16655,16634
<16634=16643,16635
<16635=16636
<16636=16642,16637
<16637=16639,16638
<16639=16641,16640
<16643=16644
<16644=16654,16653,16645
<16645=16649,16646
<16646=16647
<16647=16648
<16649=16650
<16650=16652,16651
<16655=16656
<16656=16660,16657
<16657=16658
<16658=16659
<16660=16661
<16661=16663,16662
<16664=16731,16665
<16665=16710,16706,16702,16696,16684,16666
<16666=16678,16667
<16667=16668
<16668=16669
<16669=16671,16670
<16671=16673,16672
<16673=16675,16674
<16675=16677,16676
<16678=16679
<16679=16681,16680
<16681=16683,16682
<16684=16685
<16685=16694,16686
<16686=16687
<16687=16688
<16688=16690,16689
<16690=16691
<16691=16693,16692
<16694=16695
<16696=16697
<16697=16701,16698
<16698=16700,16699
<16702=16703
<16703=16705,16704
<16706=16707
<16707=16709,16708
<16710=16711
<16711=16730,16729,16712
<16712=16728,16713
<16713=16726,16714
<16714=16717,16715
<16715=16716
<16717=16718
<16718=16722,16719
<16719=16720
<16720=16721
<16722=16723
<16723=16725,16724
<16726=16727
<16731=16732
<16732=16736,16733
<16733=16734
<16734=16735
<16736=16737
<16737=16739,16738
<16740=16821,16741
<16741=16800,16796,16792,16788,16782,16770,16742
<16742=16764,16743
<16743=16754,16744
<16744=16745
<16745=16747,16746
<16747=16749,16748
<16749=16751,16750
<16751=16753,16752
<16754=16755
<16755=16757,16756
<16757=16759,16758
<16759=16761,16760
<16761=16763,16762
<16764=16765
<16765=16767,16766
<16767=16769,16768
<16770=16771
<16771=16780,16772
<16772=16773
<16773=16774
<16774=16776,16775
<16776=16777
<16777=16779,16778
<16780=16781
<16782=16783
<16783=16787,16784
<16784=16786,16785
<16788=16789
<16789=16791,16790
<16792=16793
<16793=16795,16794
<16796=16797
<16797=16799,16798
<16800=16801
<16801=16820,16819,16802
<16802=16818,16803
<16803=16816,16804
<16804=16807,16805
<16805=16806
<16807=16808
<16808=16812,16809
<16809=16810
<16810=16811
<16812=16813
<16813=16815,16814
<16816=16817
<16821=16822
<16822=16826,16823
<16823=16824
<16824=16825
<16826=16827
<16827=16829,16828
<16830=16889,16831
<16831=16872,16868,16864,16855,16832
<16832=16847,16843,16840,16833
<16833=16834
<16834=16835
<16835=16839,16836
<16836=16838,16837
<16840=16842,16841
<16843=16844
<16844=16846,16845
<16847=16848
<16848=16849
<16849=16854,16853,16850
<16850=16852,16851
<16855=16860,16856
<16856=16857
<16857=16859,16858
<16860=16861
<16861=16863,16862
<16864=16865
<16865=16867,16866
<16868=16869
<16869=16871,16870
<16872=16873
<16873=16888,16887,16874
<16874=16885,16875
<16875=16876
<16876=16877
<16877=16881,16878
<16878=16879
<16879=16880
<16881=16882
<16882=16884,16883
<16885=16886
<16889=16890
<16890=16894,16891
<16891=16892
<16892=16893
<16894=16895
<16895=16897,16896
<16898=16942,16899
<16899=16925,16918,16900
<16900=16914,16901
<16901=16902
<16902=16903
<16903=16912,16904
<16904=16905
<16905=16906
<16906=16910,16907
<16907=16908
<16908=16909
<16910=16911
<16912=16913
<16914=16915
<16915=16917,16916
<16918=16919
<16919=16924,16923,16920
<16920=16922,16921
<16925=16926
<16926=16941,16940,16927
<16927=16938,16928
<16928=16929
<16929=16930
<16930=16934,16931
<16931=16932
<16932=16933
<16934=16935
<16935=16937,16936
<16938=16939
<16942=16943
<16943=16947,16944
<16944=16945
<16945=16946
<16947=16948
<16948=16950,16949
<16951=16989,16952
<16952=16972,16965,16953
<16953=16961,16954
<16954=16955
<16955=16956
<16956=16958,16957
<16958=16960,16959
<16961=16962
<16962=16964,16963
<16965=16966
<16966=16971,16970,16967
<16967=16969,16968
<16972=16973
<16973=16988,16987,16974
<16974=16985,16975
<16975=16976
<16976=16977
<16977=16981,16978
<16978=16979
<16979=16980
<16981=16982
<16982=16984,16983
<16985=16986
<16989=16990
<16990=16994,16991
<16991=16992
<16992=16993
<16994=16995
<16995=16997,16996
<16998=17057,16999
<16999=17045,17000
<17000=17037,17028,17025,17001
<17001=17018,17014,17002
<17002=17012,17003
<17003=17004
<17004=17006,17005
<17006=17007
<17007=17009,17008
<17009=17011,17010
<17012=17013
<17014=17015
<17015=17017,17016
<17018=17019
<17019=17024,17023,17020
<17020=17022,17021
<17025=17027,17026
<17028=17029
<17029=17036,17030
<17030=17032,17031
<17032=17033
<17033=17035,17034
<17037=17038
<17038=17039
<17039=17044,17043,17040
<17040=17042,17041
<17045=17046
<17046=17056,17055,17047
<17047=17051,17048
<17048=17049
<17049=17050
<17051=17052
<17052=17054,17053
<17057=17058
<17058=17062,17059
<17059=17060
<17060=17061
<17062=17063
<17063=17065,17064
<17066=17212,17145,17067
<17067=17068
<17068=17136,17069
<17069=17124,17120,17070
<17070=17116,17071
<17071=17109,17105,17093,17072
<17072=17091,17073
<17073=17085,17074
<17074=17075
<17075=17083,17076
<17076=17081,17079,17077
<17077=17078
<17079=17080
<17081=17082
<17083=17084
<17085=17086
<17086=17088,17087
<17088=17090,17089
<17091=17092
<17093=17094
<17094=17104,17103,17095
<17095=17102,17096
<17096=17100,17097
<17097=17098
<17098=17099
<17100=17101
<17105=17106
<17106=17108,17107
<17109=17110
<17110=17115,17114,17111
<17111=17113,17112
<17116=17117
<17117=17119,17118
<17120=17121
<17121=17123,17122
<17124=17125
<17125=17135,17134,17126
<17126=17130,17127
<17127=17128
<17128=17129
<17130=17131
<17131=17133,17132
<17136=17137
<17137=17141,17138
<17138=17139
<17139=17140
<17141=17142
<17142=17144,17143
<17145=17200,17196,17146
<17146=17192,17147
<17147=17185,17181,17169,17148
<17148=17167,17149
<17149=17161,17150
<17150=17151
<17151=17159,17152
<17152=17157,17155,17153
<17153=17154
<17155=17156
<17157=17158
<17159=17160
<17161=17162
<17162=17164,17163
<17164=17166,17165
<17167=17168
<17169=17170
<17170=17180,17179,17171
<17171=17178,17172
<17172=17176,17173
<17173=17174
<17174=17175
<17176=17177
<17181=17182
<17182=17184,17183
<17185=17186
<17186=17191,17190,17187
<17187=17189,17188
<17192=17193
<17193=17195,17194
<17196=17197
<17197=17199,17198
<17200=17201
<17201=17211,17210,17202
<17202=17206,17203
<17203=17204
<17204=17205
<17206=17207
<17207=17209,17208
<17212=17213
<17213=17217,17214
<17214=17215
<17215=17216
<17217=17218
<17218=17220,17219
<17221=17248,17222
<17222=17223
<17223=17224
<17224=17243,17225
<17225=17241,17226
<17226=17227
<17227=17228
<17228=17239,17229
<17229=17230
<17230=17231
<17231=17235,17232
<17232=17233
<17233=17234
<17235=17236
<17236=17238,17237
<17239=17240
<17241=17242
<17243=17245,17244
<17245=17247,17246
<17248=17249
<17249=17253,17250
<17250=17251
<17251=17252
<17253=17254
<17254=17256,17255
<17257=17259,17258
<17259=17260
<17260=17264,17261
<17261=17262
<17262=17263
<17264=17265
<17265=17267,17266
<17268=17285,17269
<17269=17270
<17270=17284,17271
<17271=17282,17272
<17272=17273
<17273=17274
<17274=17278,17275
<17275=17276
<17276=17277
<17278=17279
<17279=17281,17280
<17282=17283
<17285=17286
<17286=17290,17287
<17287=17288
<17288=17289
<17290=17291
<17291=17293,17292
<17294=17295
<17295=17304,17296
<17296=17302,17297
<17297=17300,17298
<17298=17299
<17300=17301
<17302=17303
<17304=17306,17305
<17306=17308,17307
<17309=17310
<17310=17327,17326,17311
<17311=17325,17312
<17312=17323,17313
<17313=17314
<17314=17315
<17315=17319,17316
<17316=17317
<17317=17318
<17319=17320
<17320=17322,17321
<17323=17324
<17328=17329
<17329=17346,17345,17330
<17330=17344,17331
<17331=17342,17332
<17332=17333
<17333=17334
<17334=17338,17335
<17335=17336
<17336=17337
<17338=17339
<17339=17341,17340
<17342=17343
<17347=17348
<17349=17389,17350
<17350=17362,17351
<17351=17352
<17352=17361,17353
<17353=17357,17354
<17354=17355
<17355=17356
<17357=17358
<17358=17360,17359
<17362=17363
<17363=17383,17364
<17364=17374,17365
<17365=17366
<17366=17370,17367
<17367=17368
<17368=17369
<17370=17371
<17371=17373,17372
<17374=17375
<17375=17379,17376
<17376=17377
<17377=17378
<17379=17380
<17380=17382,17381
<17383=17384
<17384=17386,17385
<17386=17388,17387
<17389=17390
<17391=17392
<17392=17404,17403,17393
<17393=17402,17394
<17394=17398,17395
<17395=17396
<17396=17397
<17398=17399
<17399=17401,17400
<17405=17423,17406
<17406=17411,17407
<17407=17408
<17408=17410,17409
<17411=17412
<17412=17422,17421,17413
<17413=17417,17414
<17414=17415
<17415=17416
<17417=17418
<17418=17420,17419
<17423=17424
<17425=17426
<17426=17438,17437,17427
<17427=17436,17428
<17428=17432,17429
<17429=17430
<17430=17431
<17432=17433
<17433=17435,17434
<17439=17603,17440
<17440=17550,17441
<17441=17530,17442
<17442=17518,17514,17510,17443
<17443=17506,17444
<17444=17488,17454,17445
<17445=17446
<17446=17450,17447
<17447=17448
<17448=17449
<17450=17451
<17451=17453,17452
<17454=17484,17455
<17455=17480,17474,17462,17456
<17456=17457
<17457=17461,17458
<17458=17460,17459
<17462=17463
<17463=17472,17464
<17464=17465
<17465=17466
<17466=17468,17467
<17468=17469
<17469=17471,17470
<17472=17473
<17474=17475
<17475=17479,17476
<17476=17478,17477
<17480=17481
<17481=17483,17482
<17484=17485
<17485=17487,17486
<17488=17489
<17489=17505,17504,17490
<17490=17503,17491
<17491=17495,17492
<17492=17493
<17493=17494
<17495=17496
<17496=17498,17497
<17498=17500,17499
<17500=17502,17501
<17506=17507
<17507=17509,17508
<17510=17511
<17511=17513,17512
<17514=17515
<17515=17517,17516
<17518=17519
<17519=17529,17528,17520
<17520=17524,17521
<17521=17522
<17522=17523
<17524=17525
<17525=17527,17526
<17530=17531
<17531=17542,17532
<17532=17534,17533
<17534=17535
<17535=17537,17536
<17537=17539,17538
<17539=17541,17540
<17542=17546,17543
<17543=17544
<17544=17545
<17546=17547
<17547=17549,17548
<17550=17594,17551
<17551=17580,17575,17571,17552
<17552=17567,17553
<17553=17554
<17554=17555
<17555=17559,17556
<17556=17557
<17557=17558
<17559=17560
<17560=17562,17561
<17562=17564,17563
<17564=17566,17565
<17567=17568
<17568=17570,17569
<17571=17572
<17572=17574,17573
<17575=17576
<17576=17579,17578,17577
<17580=17581
<17581=17593,17592,17582
<17582=17591,17583
<17583=17587,17584
<17584=17585
<17585=17586
<17587=17588
<17588=17590,17589
<17594=17595
<17595=17599,17596
<17596=17597
<17597=17598
<17599=17600
<17600=17602,17601
<17603=17604
<17605=17606
<17606=17618,17617,17607
<17607=17616,17608
<17608=17612,17609
<17609=17610
<17610=17611
<17612=17613
<17613=17615,17614
<17619=18380,17620
<17620=17621
<17621=18371,18314,17622
<17622=17623
<17623=18305,18157,17624
<17624=17625
<17625=18148,17904,17626
<17626=17627
<17627=17895,17628
<17628=17881,17876,17869,17865,17858,17851,17847,17843,17833,17823,17811,17629
<17629=17803,17799,17796,17630
<17630=17781,17775,17769,17763,17759,17755,17749,17745,17736,17722,17716,17712,17703,17690,17679,17675,17643,17631
<17631=17632
<17632=17641,17633
<17633=17634
<17634=17635
<17635=17637,17636
<17637=17638
<17638=17640,17639
<17641=17642
<17643=17644
<17644=17674,17645
<17645=17673,17646
<17646=17670,17647
<17647=17669,17648
<17648=17666,17649
<17649=17665,17650
<17650=17660,17651
<17651=17659,17652
<17652=17654,17653
<17654=17656,17655
<17656=17658,17657
<17660=17662,17661
<17662=17664,17663
<17666=17668,17667
<17670=17672,17671
<17675=17676
<17676=17678,17677
<17679=17680
<17680=17684,17681
<17681=17682
<17682=17683
<17684=17685
<17685=17687,17686
<17687=17689,17688
<17690=17691
<17691=17700,17692
<17692=17698,17693
<17693=17694
<17694=17695
<17695=17697,17696
<17698=17699
<17700=17702,17701
<17703=17710,17704
<17704=17705
<17705=17709,17706
<17706=17708,17707
<17710=17711
<17712=17713
<17713=17715,17714
<17716=17717
<17717=17721,17718
<17718=17720,17719
<17722=17723
<17723=17735,17724
<17724=17730,17725
<17725=17727,17726
<17727=17729,17728
<17730=17732,17731
<17732=17734,17733
<17736=17743,17737
<17737=17738
<17738=17742,17739
<17739=17741,17740
<17743=17744
<17745=17746
<17746=17748,17747
<17749=17750
<17750=17754,17751
<17751=17753,17752
<17755=17756
<17756=17758,17757
<17759=17760
<17760=17762,17761
<17763=17764
<17764=17766,17765
<17766=17768,17767
<17769=17770
<17770=17772,17771
<17772=17774,17773
<17775=17776
<17776=17778,17777
<17778=17780,17779
<17781=17782
<17782=17793,17783
<17783=17791,17784
<17784=17789,17787,17785
<17785=17786
<17787=17788
<17789=17790
<17791=17792
<17793=17795,17794
<17796=17798,17797
<17799=17800
<17800=17802,17801
<17803=17804
<17804=17805
<17805=17810,17809,17806
<17806=17808,17807
<17811=17812
<17812=17821,17813
<17813=17814
<17814=17815
<17815=17817,17816
<17817=17818
<17818=17820,17819
<17821=17822
<17823=17824
<17824=17832,17825
<17825=17831,17826
<17826=17830,17827
<17827=17829,17828
<17833=17834
<17834=17842,17835
<17835=17841,17836
<17836=17840,17837
<17837=17839,17838
<17843=17844
<17844=17846,17845
<17847=17848
<17848=17850,17849
<17851=17852
<17852=17857,17856,17853
<17853=17855,17854
<17858=17859
<17859=17864,17863,17860
<17860=17862,17861
<17865=17866
<17866=17868,17867
<17869=17870
<17870=17875,17874,17871
<17871=17873,17872
<17876=17877
<17877=17880,17879,17878
<17881=17882
<17882=17894,17893,17883
<17883=17892,17884
<17884=17888,17885
<17885=17886
<17886=17887
<17888=17889
<17889=17891,17890
<17895=17896
<17896=17900,17897
<17897=17898
<17898=17899
<17900=17901
<17901=17903,17902
<17904=18134,18129,18122,18118,18111,18107,18103,18093,18083,18071,17905
<17905=18063,18059,18056,17906
<17906=18041,18035,18029,18025,18019,18005,17999,17995,17979,17966,17955,17951,17919,17907
<17907=17908
<17908=17917,17909
<17909=17910
<17910=17911
<17911=17913,17912
<17913=17914
<17914=17916,17915
<17917=17918
<17919=17920
<17920=17950,17921
<17921=17949,17922
<17922=17946,17923
<17923=17945,17924
<17924=17942,17925
<17925=17941,17926
<17926=17936,17927
<17927=17935,17928
<17928=17930,17929
<17930=17932,17931
<17932=17934,17933
<17936=17938,17937
<17938=17940,17939
<17942=17944,17943
<17946=17948,17947
<17951=17952
<17952=17954,17953
<17955=17956
<17956=17960,17957
<17957=17958
<17958=17959
<17960=17961
<17961=17963,17962
<17963=17965,17964
<17966=17967
<17967=17976,17968
<17968=17974,17969
<17969=17970
<17970=17971
<17971=17973,17972
<17974=17975
<17976=17978,17977
<17979=17993,17987,17980
<17980=17981
<17981=17982
<17982=17984,17983
<17984=17986,17985
<17987=17988
<17988=17992,17989
<17989=17991,17990
<17993=17994
<17995=17996
<17996=17998,17997
<17999=18000
<18000=18004,18001
<18001=18003,18002
<18005=18006
<18006=18018,18007
<18007=18013,18008
<18008=18010,18009
<18010=18012,18011
<18013=18015,18014
<18015=18017,18016
<18019=18020
<18020=18024,18021
<18021=18023,18022
<18025=18026
<18026=18028,18027
<18029=18030
<18030=18032,18031
<18032=18034,18033
<18035=18036
<18036=18038,18037
<18038=18040,18039
<18041=18042
<18042=18053,18043
<18043=18051,18044
<18044=18049,18047,18045
<18045=18046
<18047=18048
<18049=18050
<18051=18052
<18053=18055,18054
<18056=18058,18057
<18059=18060
<18060=18062,18061
<18063=18064
<18064=18065
<18065=18070,18069,18066
<18066=18068,18067
<18071=18072
<18072=18081,18073
<18073=18074
<18074=18075
<18075=18077,18076
<18077=18078
<18078=18080,18079
<18081=18082
<18083=18084
<18084=18092,18085
<18085=18091,18086
<18086=18090,18087
<18087=18089,18088
<18093=18094
<18094=18102,18095
<18095=18101,18096
<18096=18100,18097
<18097=18099,18098
<18103=18104
<18104=18106,18105
<18107=18108
<18108=18110,18109
<18111=18112
<18112=18117,18116,18113
<18113=18115,18114
<18118=18119
<18119=18121,18120
<18122=18123
<18123=18128,18127,18124
<18124=18126,18125
<18129=18130
<18130=18133,18132,18131
<18134=18135
<18135=18147,18146,18136
<18136=18145,18137
<18137=18141,18138
<18138=18139
<18139=18140
<18141=18142
<18142=18144,18143
<18148=18149
<18149=18153,18150
<18150=18151
<18151=18152
<18153=18154
<18154=18156,18155
<18157=18291,18286,18282,18275,18158
<18158=18269,18159
<18159=18265,18251,18245,18241,18232,18228,18196,18184,18171,18160
<18160=18161
<18161=18165,18162
<18162=18163
<18163=18164
<18165=18166
<18166=18168,18167
<18168=18170,18169
<18171=18172
<18172=18181,18173
<18173=18179,18174
<18174=18175
<18175=18176
<18176=18178,18177
<18179=18180
<18181=18183,18182
<18184=18185
<18185=18194,18186
<18186=18187
<18187=18188
<18188=18190,18189
<18190=18191
<18191=18193,18192
<18194=18195
<18196=18197
<18197=18227,18198
<18198=18226,18199
<18199=18223,18200
<18200=18222,18201
<18201=18219,18202
<18202=18218,18203
<18203=18213,18204
<18204=18212,18205
<18205=18207,18206
<18207=18209,18208
<18209=18211,18210
<18213=18215,18214
<18215=18217,18216
<18219=18221,18220
<18223=18225,18224
<18228=18229
<18229=18231,18230
<18232=18239,18233
<18233=18234
<18234=18238,18235
<18235=18237,18236
<18239=18240
<18241=18242
<18242=18244,18243
<18245=18246
<18246=18250,18247
<18247=18249,18248
<18251=18252
<18252=18264,18253
<18253=18259,18254
<18254=18256,18255
<18256=18258,18257
<18259=18261,18260
<18261=18263,18262
<18265=18266
<18266=18268,18267
<18269=18270
<18270=18274,18271
<18271=18273,18272
<18275=18276
<18276=18281,18280,18277
<18277=18279,18278
<18282=18283
<18283=18285,18284
<18286=18287
<18287=18290,18289,18288
<18291=18292
<18292=18304,18303,18293
<18293=18302,18294
<18294=18298,18295
<18295=18296
<18296=18297
<18298=18299
<18299=18301,18300
<18305=18306
<18306=18310,18307
<18307=18308
<18308=18309
<18310=18311
<18311=18313,18312
<18314=18357,18352,18348,18315
<18315=18342,18316
<18316=18328,18317
<18317=18318
<18318=18322,18319
<18319=18320
<18320=18321
<18322=18323
<18323=18325,18324
<18325=18327,18326
<18328=18329
<18329=18341,18330
<18330=18336,18331
<18331=18333,18332
<18333=18335,18334
<18336=18338,18337
<18338=18340,18339
<18342=18343
<18343=18347,18344
<18344=18346,18345
<18348=18349
<18349=18351,18350
<18352=18353
<18353=18356,18355,18354
<18357=18358
<18358=18370,18369,18359
<18359=18368,18360
<18360=18364,18361
<18361=18362
<18362=18363
<18364=18365
<18365=18367,18366
<18371=18372
<18372=18376,18373
<18373=18374
<18374=18375
<18376=18377
<18377=18379,18378
<18380=18381
<18382=18383
<18383=18395,18394,18384
<18384=18393,18385
<18385=18389,18386
<18386=18387
<18387=18388
<18389=18390
<18390=18392,18391
<18396=18440,18397
<18397=18426,18421,18417,18398
<18398=18413,18399
<18399=18400
<18400=18401
<18401=18405,18402
<18402=18403
<18403=18404
<18405=18406
<18406=18408,18407
<18408=18410,18409
<18410=18412,18411
<18413=18414
<18414=18416,18415
<18417=18418
<18418=18420,18419
<18421=18422
<18422=18425,18424,18423
<18426=18427
<18427=18439,18438,18428
<18428=18437,18429
<18429=18433,18430
<18430=18431
<18431=18432
<18433=18434
<18434=18436,18435
<18440=18441
<18442=18443
<18443=18455,18454,18444
<18444=18453,18445
<18445=18449,18446
<18446=18447
<18447=18448
<18449=18450
<18450=18452,18451
<18456=18566,18457
<18457=18458
<18458=18557,18459
<18459=18550,18538,18531,18460
<18460=18527,18461
<18461=18523,18517,18511,18491,18471,18462
<18462=18463
<18463=18467,18464
<18464=18465
<18465=18466
<18467=18468
<18468=18470,18469
<18471=18472
<18472=18490,18473
<18473=18485,18474
<18474=18480,18475
<18475=18477,18476
<18477=18479,18478
<18480=18482,18481
<18482=18484,18483
<18485=18487,18486
<18487=18489,18488
<18491=18492
<18492=18510,18493
<18493=18505,18494
<18494=18500,18495
<18495=18497,18496
<18497=18499,18498
<18500=18502,18501
<18502=18504,18503
<18505=18507,18506
<18507=18509,18508
<18511=18512
<18512=18516,18513
<18513=18515,18514
<18517=18518
<18518=18520,18519
<18520=18522,18521
<18523=18524
<18524=18526,18525
<18527=18528
<18528=18530,18529
<18531=18532
<18532=18537,18536,18533
<18533=18535,18534
<18538=18539
<18539=18549,18548,18540
<18540=18544,18541
<18541=18542
<18542=18543
<18544=18545
<18545=18547,18546
<18550=18551
<18551=18553,18552
<18553=18554
<18554=18556,18555
<18557=18558
<18558=18562,18559
<18559=18560
<18560=18561
<18562=18563
<18563=18565,18564
<18566=18567
<18568=18569
<18569=18581,18580,18570
<18570=18579,18571
<18571=18575,18572
<18572=18573
<18573=18574
<18575=18576
<18576=18578,18577
<18582=18673,18583
<18583=18584
<18584=18664,18585
<18585=18652,18645,18638,18634,18586
<18586=18626,18622,18619,18587
<18587=18615,18597,18588
<18588=18589
<18589=18593,18590
<18590=18591
<18591=18592
<18593=18594
<18594=18596,18595
<18597=18598
<18598=18614,18599
<18599=18611,18600
<18600=18608,18601
<18601=18605,18602
<18602=18604,18603
<18605=18607,18606
<18608=18610,18609
<18611=18613,18612
<18615=18616
<18616=18618,18617
<18619=18621,18620
<18622=18623
<18623=18625,18624
<18626=18627
<18627=18628
<18628=18633,18632,18629
<18629=18631,18630
<18634=18635
<18635=18637,18636
<18638=18639
<18639=18641,18640
<18641=18642
<18642=18644,18643
<18645=18646
<18646=18651,18650,18647
<18647=18649,18648
<18652=18653
<18653=18663,18662,18654
<18654=18658,18655
<18655=18656
<18656=18657
<18658=18659
<18659=18661,18660
<18664=18665
<18665=18669,18666
<18666=18667
<18667=18668
<18669=18670
<18670=18672,18671
<18673=18674
<18675=18676
<18676=18688,18687,18677
<18677=18686,18678
<18678=18682,18679
<18679=18680
<18680=18681
<18682=18683
<18683=18685,18684
<18689=18730,18690
<18690=18691
<18691=18721,18692
<18692=18709,18705,18693
<18693=18701,18694
<18694=18695
<18695=18696
<18696=18700,18697
<18697=18699,18698
<18701=18702
<18702=18704,18703
<18705=18706
<18706=18708,18707
<18709=18710
<18710=18720,18719,18711
<18711=18715,18712
<18712=18713
<18713=18714
<18715=18716
<18716=18718,18717
<18721=18722
<18722=18726,18723
<18723=18724
<18724=18725
<18726=18727
<18727=18729,18728
<18730=18731
<18732=18733
<18733=18745,18744,18734
<18734=18743,18735
<18735=18739,18736
<18736=18737
<18737=18738
<18739=18740
<18740=18742,18741
<18746=18791,18747
<18747=18759,18748
<18748=18749
<18749=18758,18750
<18750=18754,18751
<18751=18752
<18752=18753
<18754=18755
<18755=18757,18756
<18759=18760
<18760=18785,18761
<18761=18776,18762
<18762=18763
<18763=18774,18764
<18764=18765
<18765=18766
<18766=18770,18767
<18767=18768
<18768=18769
<18770=18771
<18771=18773,18772
<18774=18775
<18776=18777
<18777=18781,18778
<18778=18779
<18779=18780
<18781=18782
<18782=18784,18783
<18785=18786
<18786=18788,18787
<18788=18790,18789
<18791=18792
<18793=18794
<18794=18806,18805,18795
<18795=18804,18796
<18796=18800,18797
<18797=18798
<18798=18799
<18800=18801
<18801=18803,18802
<18807=18857,18808
<18808=18841,18825,18809
<18809=18810
<18810=18824,18811
<18811=18822,18812
<18812=18813
<18813=18814
<18814=18818,18815
<18815=18816
<18816=18817
<18818=18819
<18819=18821,18820
<18822=18823
<18825=18826
<18826=18840,18827
<18827=18838,18828
<18828=18829
<18829=18830
<18830=18834,18831
<18831=18832
<18832=18833
<18834=18835
<18835=18837,18836
<18838=18839
<18841=18842
<18842=18856,18843
<18843=18854,18844
<18844=18845
<18845=18846
<18846=18850,18847
<18847=18848
<18848=18849
<18850=18851
<18851=18853,18852
<18854=18855
<18857=18858
<18859=18860
<18860=18872,18871,18861
<18861=18870,18862
<18862=18866,18863
<18863=18864
<18864=18865
<18866=18867
<18867=18869,18868
<18873=18890,18882,18874
<18874=18881,18880,18875
<18875=18879,18876
<18876=18878,18877
<18882=18889,18888,18883
<18883=18887,18884
<18884=18886,18885
<18890=18897,18896,18891
<18891=18895,18892
<18892=18894,18893
<18898=18899
<18899=18901,18900
<18901=18902
<18902=18904,18903
<18905=18925,18906
<18906=18907
<18907=18916,18908
<18908=18909
<18909=18910
<18910=18914,18911
<18911=18912
<18912=18913
<18914=18915
<18916=18917
<18917=18921,18918
<18918=18919
<18919=18920
<18921=18922
<18922=18924,18923
<18925=18926
<18927=18928
<18928=18940,18939,18929
<18929=18938,18930
<18930=18934,18931
<18931=18932
<18932=18933
<18934=18935
<18935=18937,18936
<18941=18942
<18942=18948,18943
<18943=18946,18944
<18944=18945
<18946=18947
<18948=18949
<18950=18951
<18951=18953,18952
<18954=18955
<18955=18957,18956
<18957=18958
<18958=18960,18959
<18960=18962,18961
<19118=19124,19123,19119
<19119=19120
<19120=19122,19121
<19129=19135,19134,19130
<19130=19131
<19131=19133,19132
<19135=19140,19136
<19136=19137
<19137=19139,19138
<19140=19149,19141
<19141=19142
<19142=19143
<19143=19147,19144
<19144=19145
<19145=19146
<19147=19148
<19149=19150
<19150=19152,19151
<19160=19169,19168,19161
<19161=19165,19162
<19162=19164,19163
<19165=19167,19166
<19169=19202,19198,19188,19176,19170
<19170=19171
<19171=19173,19172
<19173=19175,19174
<19176=19177
<19177=19186,19178
<19178=19179
<19179=19180
<19180=19182,19181
<19182=19183
<19183=19185,19184
<19186=19187
<19188=19189
<19189=19197,19190
<19190=19196,19191
<19191=19195,19192
<19192=19194,19193
<19198=19199
<19199=19201,19200
<19202=19211,19203
<19203=19204
<19204=19205
<19205=19209,19206
<19206=19207
<19207=19208
<19209=19210
<19211=19212
<19212=19214,19213
<19225=19234,19233,19226
<19226=19230,19227
<19227=19229,19228
<19230=19232,19231
<19234=19270,19262,19258,19244,19235
<19235=19236
<19236=19243,19237
<19237=19239,19238
<19239=19240
<19240=19242,19241
<19244=19245
<19245=19257,19246
<19246=19255,19247
<19247=19248
<19248=19249
<19249=19251,19250
<19251=19252
<19252=19254,19253
<19255=19256
<19258=19259
<19259=19261,19260
<19262=19263
<19263=19269,19264
<19264=19268,19265
<19265=19267,19266
<19270=19271
<19271=19273,19272
<19287=19299,19298,19288
<19288=19295,19292,19289
<19289=19291,19290
<19292=19294,19293
<19295=19297,19296
<19299=19337,19329,19325,19311,19300
<19300=19301
<19301=19303,19302
<19303=19310,19304
<19304=19306,19305
<19306=19307
<19307=19309,19308
<19311=19312
<19312=19324,19313
<19313=19322,19314
<19314=19315
<19315=19316
<19316=19318,19317
<19318=19319
<19319=19321,19320
<19322=19323
<19325=19326
<19326=19328,19327
<19329=19330
<19330=19336,19331
<19331=19335,19332
<19332=19334,19333
<19337=19338
<19338=19340,19339
<19355=19364,19363,19356
<19356=19360,19357
<19357=19359,19358
<19360=19362,19361
<19364=19439,19394,19390,19376,19365
<19365=19366
<19366=19368,19367
<19368=19375,19369
<19369=19371,19370
<19371=19372
<19372=19374,19373
<19376=19377
<19377=19389,19378
<19378=19387,19379
<19379=19380
<19380=19381
<19381=19383,19382
<19383=19384
<19384=19386,19385
<19387=19388
<19390=19391
<19391=19393,19392
<19394=19395
<19395=19438,19396
<19396=19437,19397
<19397=19432,19398
<19398=19431,19399
<19399=19422,19400
<19400=19421,19401
<19401=19412,19402
<19402=19411,19403
<19403=19409,19404
<19404=19405
<19405=19406
<19406=19408,19407
<19409=19410
<19412=19414,19413
<19414=19416,19415
<19416=19418,19417
<19418=19420,19419
<19422=19424,19423
<19424=19426,19425
<19426=19428,19427
<19428=19430,19429
<19432=19434,19433
<19434=19436,19435
<19439=19440
<19440=19442,19441
<19465=19471,19470,19466
<19466=19467
<19467=19469,19468
<19471=19544,19499,19495,19481,19472
<19472=19473
<19473=19480,19474
<19474=19476,19475
<19476=19477
<19477=19479,19478
<19481=19482
<19482=19494,19483
<19483=19492,19484
<19484=19485
<19485=19486
<19486=19488,19487
<19488=19489
<19489=19491,19490
<19492=19493
<19495=19496
<19496=19498,19497
<19499=19500
<19500=19543,19501
<19501=19542,19502
<19502=19537,19503
<19503=19536,19504
<19504=19527,19505
<19505=19526,19506
<19506=19517,19507
<19507=19516,19508
<19508=19514,19509
<19509=19510
<19510=19511
<19511=19513,19512
<19514=19515
<19517=19519,19518
<19519=19521,19520
<19521=19523,19522
<19523=19525,19524
<19527=19529,19528
<19529=19531,19530
<19531=19533,19532
<19533=19535,19534
<19537=19539,19538
<19539=19541,19540
<19544=19545
<19545=19547,19546
<19570=19575,19571
<19571=19572
<19572=19574,19573
<19575=19757,19753,19744,19740,19729,19722,19700,19678,19656,19634,19612,19603,19592,19583,19576
<19576=19577
<19577=19581,19578
<19578=19579
<19579=19580
<19581=19582
<19583=19584
<19584=19590,19585
<19585=19586
<19586=19587
<19587=19589,19588
<19590=19591
<19592=19593
<19593=19602,19594
<19594=19600,19595
<19595=19598,19596
<19596=19597
<19598=19599
<19600=19601
<19603=19604
<19604=19608,19605
<19605=19606
<19606=19607
<19608=19609
<19609=19611,19610
<19612=19613
<19613=19626,19614
<19614=19617,19615
<19615=19616
<19617=19618
<19618=19624,19619
<19619=19622,19620
<19620=19621
<19622=19623
<19624=19625
<19626=19627
<19627=19629,19628
<19629=19631,19630
<19631=19633,19632
<19634=19635
<19635=19648,19636
<19636=19639,19637
<19637=19638
<19639=19640
<19640=19646,19641
<19641=19644,19642
<19642=19643
<19644=19645
<19646=19647
<19648=19649
<19649=19651,19650
<19651=19653,19652
<19653=19655,19654
<19656=19657
<19657=19670,19658
<19658=19661,19659
<19659=19660
<19661=19662
<19662=19668,19663
<19663=19666,19664
<19664=19665
<19666=19667
<19668=19669
<19670=19671
<19671=19673,19672
<19673=19675,19674
<19675=19677,19676
<19678=19679
<19679=19692,19680
<19680=19683,19681
<19681=19682
<19683=19684
<19684=19690,19685
<19685=19688,19686
<19686=19687
<19688=19689
<19690=19691
<19692=19693
<19693=19695,19694
<19695=19697,19696
<19697=19699,19698
<19700=19701
<19701=19714,19702
<19702=19705,19703
<19703=19704
<19705=19706
<19706=19712,19707
<19707=19710,19708
<19708=19709
<19710=19711
<19712=19713
<19714=19715
<19715=19717,19716
<19717=19719,19718
<19719=19721,19720
<19722=19723
<19723=19725,19724
<19725=19726
<19726=19728,19727
<19729=19730
<19730=19739,19731
<19731=19737,19732
<19732=19735,19733
<19733=19734
<19735=19736
<19737=19738
<19740=19741
<19741=19743,19742
<19744=19745
<19745=19751,19746
<19746=19747
<19747=19748
<19748=19750,19749
<19751=19752
<19753=19754
<19754=19756,19755
<19757=19758
<19758=19760,19759
<19781=19787,19786,19782
<19782=19783
<19783=19785,19784
<19787=19854,19850,19788
<19788=19844,19789
<19789=19790
<19790=19837,19832,19791
<19791=19792
<19792=19817,19793
<19793=19794
<19794=19816,19795
<19795=19797,19796
<19797=19799,19798
<19799=19801,19800
<19801=19809,19802
<19802=19804,19803
<19804=19806,19805
<19806=19808,19807
<19809=19811,19810
<19811=19813,19812
<19813=19815,19814
<19817=19818
<19818=19831,19830,19819
<19819=19829,19820
<19820=19824,19821
<19821=19823,19822
<19824=19828,19825
<19825=19827,19826
<19832=19833
<19833=19834
<19834=19836,19835
<19837=19838
<19838=19840,19839
<19840=19841
<19841=19843,19842
<19844=19845
<19845=19849,19846
<19846=19848,19847
<19850=19851
<19851=19853,19852
<19854=19855
<19855=19859,19856
<19856=19857
<19857=19858
<19859=19860
<19882=19888,19887,19883
<19883=19884
<19884=19886,19885
<19888=19889
<19889=19923,19914,19911,19890
<19890=19891
<19891=19903,19892
<19892=19894,19893
<19894=19895
<19895=19899,19896
<19896=19897
<19897=19898
<19899=19900
<19900=19902,19901
<19903=19904
<19904=19906,19905
<19906=19910,19907
<19907=19909,19908
<19911=19913,19912
<19914=19915
<19915=19922,19916
<19916=19918,19917
<19918=19919
<19919=19921,19920
<19923=19924
<19924=19925
<19925=19935,19934,19926
<19926=19933,19927
<19927=19929,19928
<19929=19930
<19930=19932,19931
<19945=19954,19953,19946
<19946=19950,19947
<19947=19949,19948
<19950=19952,19951
<19954=20174,20168,20158,20146,20069,20060,19964,19955
<19955=19956
<19956=19963,19957
<19957=19959,19958
<19959=19960
<19960=19962,19961
<19964=20049,19965
<19965=20038,20029,20016,19966
<19966=20007,19967
<19967=19998,19968
<19968=19969
<19969=19992,19970
<19970=19979,19977,19975,19973,19971
<19971=19972
<19973=19974
<19975=19976
<19977=19978
<19979=19980
<19980=19984,19981
<19981=19982
<19982=19983
<19984=19985
<19985=19987,19986
<19987=19989,19988
<19989=19991,19990
<19992=19993
<19993=19995,19994
<19995=19997,19996
<19998=19999
<19999=20005,20000
<20000=20003,20001
<20001=20002
<20003=20004
<20005=20006
<20007=20008
<20008=20015,20009
<20009=20013,20010
<20010=20011
<20011=20012
<20013=20014
<20016=20017
<20017=20023,20018
<20018=20021,20019
<20019=20020
<20021=20022
<20023=20024
<20024=20026,20025
<20026=20028,20027
<20029=20030
<20030=20037,20036,20031
<20031=20035,20032
<20032=20034,20033
<20038=20039
<20039=20043,20040
<20040=20041
<20041=20042
<20043=20044
<20044=20046,20045
<20046=20048,20047
<20049=20050
<20050=20059,20051
<20051=20053,20052
<20053=20054
<20054=20056,20055
<20056=20058,20057
<20060=20061
<20061=20065,20062
<20062=20063
<20063=20064
<20065=20066
<20066=20068,20067
<20069=20142,20111,20070
<20070=20071
<20071=20072
<20072=20102,20087,20073
<20073=20074
<20074=20075
<20075=20084,20076
<20076=20082,20077
<20077=20080,20078
<20078=20079
<20080=20081
<20082=20083
<20084=20086,20085
<20087=20088
<20088=20099,20089
<20089=20091,20090
<20091=20092
<20092=20094,20093
<20094=20096,20095
<20096=20098,20097
<20099=20101,20100
<20102=20103
<20103=20110,20104
<20104=20106,20105
<20106=20107
<20107=20109,20108
<20111=20112
<20112=20113
<20113=20139,20114
<20114=20129,20115
<20115=20127,20116
<20116=20121,20117
<20117=20118
<20118=20120,20119
<20121=20122
<20122=20124,20123
<20124=20126,20125
<20127=20128
<20129=20131,20130
<20131=20132
<20132=20134,20133
<20134=20136,20135
<20136=20138,20137
<20139=20141,20140
<20142=20143
<20143=20145,20144
<20146=20147
<20147=20157,20156,20148
<20148=20155,20149
<20149=20151,20150
<20151=20152
<20152=20154,20153
<20158=20159
<20159=20165,20160
<20160=20162,20161
<20162=20164,20163
<20165=20167,20166
<20168=20169
<20169=20171,20170
<20171=20173,20172
<20174=20175
<20175=20177,20176
<20216=20222,20221,20217
<20217=20218
<20218=20220,20219
<20222=20223
<20223=20234,20224
<20224=20225
<20225=20226
<20226=20230,20227
<20227=20228
<20228=20229
<20230=20231
<20231=20233,20232
<20234=20235
<20241=20250,20249,20242
<20242=20246,20243
<20243=20245,20244
<20246=20248,20247
<20250=20306,20299,20295,20281,20269,20251
<20251=20265,20252
<20252=20253
<20253=20259,20254
<20254=20257,20255
<20255=20256
<20257=20258
<20259=20260
<20260=20262,20261
<20262=20264,20263
<20265=20266
<20266=20268,20267
<20269=20270
<20270=20279,20271
<20271=20272
<20272=20273
<20273=20275,20274
<20275=20276
<20276=20278,20277
<20279=20280
<20281=20282
<20282=20294,20283
<20283=20293,20284
<20284=20290,20285
<20285=20289,20286
<20286=20288,20287
<20290=20292,20291
<20295=20296
<20296=20298,20297
<20299=20300
<20300=20302,20301
<20302=20303
<20303=20305,20304
<20306=20307
<20307=20317,20316,20308
<20308=20315,20309
<20309=20311,20310
<20311=20312
<20312=20314,20313
<20331=20340,20339,20332
<20332=20336,20333
<20333=20335,20334
<20336=20338,20337
<20340=20341
<20341=20386,20377,20374,20342
<20342=20343
<20343=20359,20344
<20344=20346,20345
<20346=20347
<20347=20357,20348
<20348=20351,20349
<20349=20350
<20351=20352
<20352=20356,20353
<20353=20355,20354
<20357=20358
<20359=20360
<20360=20362,20361
<20362=20372,20363
<20363=20366,20364
<20364=20365
<20366=20367
<20367=20369,20368
<20369=20371,20370
<20372=20373
<20374=20376,20375
<20377=20378
<20378=20385,20379
<20379=20381,20380
<20381=20382
<20382=20384,20383
<20386=20387
<20387=20388
<20388=20393,20392,20389
<20389=20391,20390
<20408=20411,20410,20409
<20411=20883,20879,20875,20871,20831,20821,20817,20813,20809,20803,20799,20792,20785,20778,20771,20764,20757,20412,20419,20424,20444,20463,20467,20471,20476,20483,20487,20491,20495,20502,20509,20513,20517,20521,20528,20541,20545,20556,20560,20564,20568,20575,20580,20585,20592,20599,20606,20629,20633,20640,20645,20650,20657,20661,20668,20675,20682,20689,20696,20701,20708,20715,20722,20729,20736,20743,20750
<20412=20413
<20413=20415,20414
<20415=20416
<20416=20418,20417
<20419=20420
<20420=20422,20421
<20422=20423
<20424=20433,20425
<20425=20426
<20426=20427
<20427=20431,20428
<20428=20429
<20429=20430
<20431=20432
<20433=20434
<20434=20443,20435
<20435=20437,20436
<20437=20438
<20438=20440,20439
<20440=20442,20441
<20444=20459,20445
<20445=20455,20446
<20446=20447
<20447=20451,20448
<20448=20449
<20449=20450
<20451=20452
<20452=20454,20453
<20455=20456
<20456=20458,20457
<20459=20460
<20460=20462,20461
<20463=20464
<20464=20466,20465
<20467=20468
<20468=20470,20469
<20471=20472
<20472=20475,20474,20473
<20476=20477
<20477=20479,20478
<20479=20480
<20480=20482,20481
<20483=20484
<20484=20486,20485
<20487=20488
<20488=20490,20489
<20491=20492
<20492=20494,20493
<20495=20496
<20496=20498,20497
<20498=20499
<20499=20501,20500
<20502=20503
<20503=20505,20504
<20505=20506
<20506=20508,20507
<20509=20510
<20510=20512,20511
<20513=20514
<20514=20516,20515
<20517=20518
<20518=20520,20519
<20521=20522
<20522=20524,20523
<20524=20525
<20525=20527,20526
<20528=20529
<20529=20540,20530
<20530=20538,20531
<20531=20536,20534,20532
<20532=20533
<20534=20535
<20536=20537
<20538=20539
<20541=20542
<20542=20544,20543
<20545=20546
<20546=20550,20547
<20547=20548
<20548=20549
<20550=20551
<20551=20553,20552
<20553=20555,20554
<20556=20557
<20557=20559,20558
<20560=20561
<20561=20563,20562
<20564=20565
<20565=20567,20566
<20568=20569
<20569=20571,20570
<20571=20572
<20572=20574,20573
<20575=20576
<20576=20578,20577
<20578=20579
<20580=20581
<20581=20583,20582
<20583=20584
<20585=20586
<20586=20588,20587
<20588=20589
<20589=20591,20590
<20592=20593
<20593=20595,20594
<20595=20596
<20596=20598,20597
<20599=20600
<20600=20602,20601
<20602=20603
<20603=20605,20604
<20606=20621,20617,20614,20607
<20607=20608
<20608=20609
<20609=20611,20610
<20611=20613,20612
<20614=20616,20615
<20617=20618
<20618=20620,20619
<20621=20622
<20622=20623
<20623=20628,20627,20624
<20624=20626,20625
<20629=20630
<20630=20632,20631
<20633=20634
<20634=20636,20635
<20636=20637
<20637=20639,20638
<20640=20641
<20641=20643,20642
<20643=20644
<20645=20646
<20646=20648,20647
<20648=20649
<20650=20651
<20651=20653,20652
<20653=20654
<20654=20656,20655
<20657=20658
<20658=20660,20659
<20661=20662
<20662=20664,20663
<20664=20665
<20665=20667,20666
<20668=20669
<20669=20671,20670
<20671=20672
<20672=20674,20673
<20675=20676
<20676=20678,20677
<20678=20679
<20679=20681,20680
<20682=20683
<20683=20685,20684
<20685=20686
<20686=20688,20687
<20689=20690
<20690=20692,20691
<20692=20693
<20693=20695,20694
<20696=20697
<20697=20699,20698
<20699=20700
<20701=20702
<20702=20704,20703
<20704=20705
<20705=20707,20706
<20708=20709
<20709=20711,20710
<20711=20712
<20712=20714,20713
<20715=20716
<20716=20718,20717
<20718=20719
<20719=20721,20720
<20722=20723
<20723=20725,20724
<20725=20726
<20726=20728,20727
<20729=20730
<20730=20732,20731
<20732=20733
<20733=20735,20734
<20736=20737
<20737=20739,20738
<20739=20740
<20740=20742,20741
<20743=20744
<20744=20746,20745
<20746=20747
<20747=20749,20748
<20750=20751
<20751=20753,20752
<20753=20754
<20754=20756,20755
<20757=20758
<20758=20760,20759
<20760=20761
<20761=20763,20762
<20764=20765
<20765=20767,20766
<20767=20768
<20768=20770,20769
<20771=20772
<20772=20774,20773
<20774=20775
<20775=20777,20776
<20778=20779
<20779=20781,20780
<20781=20782
<20782=20784,20783
<20785=20786
<20786=20788,20787
<20788=20789
<20789=20791,20790
<20792=20793
<20793=20795,20794
<20795=20796
<20796=20798,20797
<20799=20800
<20800=20802,20801
<20803=20804
<20804=20808,20805
<20805=20807,20806
<20809=20810
<20810=20812,20811
<20813=20814
<20814=20816,20815
<20817=20818
<20818=20820,20819
<20821=20822
<20822=20830,20823
<20823=20829,20824
<20824=20828,20825
<20825=20827,20826
<20831=20867,20832
<20832=20859,20851,20843,20833
<20833=20834
<20834=20836,20835
<20836=20838,20837
<20838=20840,20839
<20840=20842,20841
<20843=20844
<20844=20846,20845
<20846=20848,20847
<20848=20850,20849
<20851=20852
<20852=20854,20853
<20854=20856,20855
<20856=20858,20857
<20859=20860
<20860=20862,20861
<20862=20864,20863
<20864=20866,20865
<20867=20868
<20868=20870,20869
<20871=20872
<20872=20874,20873
<20875=20876
<20876=20878,20877
<20879=20880
<20880=20882,20881
<20883=20884
<20884=20886,20885
<20975=20981,20980,20976
<20976=20977
<20977=20979,20978
<20981=20986,20982
<20982=20983
<20983=20985,20984
<20986=21014,20987
<20987=21010,21002,20990,20988
<20988=20989
<20990=20991
<20991=21000,20992
<20992=20993
<20993=20994
<20994=20996,20995
<20996=20997
<20997=20999,20998
<21000=21001
<21002=21003
<21003=21009,21004
<21004=21008,21005
<21005=21007,21006
<21010=21011
<21011=21013,21012
<21014=21015
<21015=21019,21016
<21016=21018,21017
<21019=21026,21020
<21020=21022,21021
<21022=21023
<21023=21025,21024
<21037=21043,21042,21038
<21038=21039
<21039=21041,21040
<21048=21054,21053,21049
<21049=21050
<21050=21052,21051
<21054=21055
<21055=21056
<21056=21060,21057
<21057=21058
<21058=21059
<21060=21061
<21061=21063,21062
