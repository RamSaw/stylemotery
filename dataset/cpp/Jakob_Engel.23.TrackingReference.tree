>3	FunctionDef	TrackingReference 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ForStatement	for ( int level = 0 ; level < PYRAMID_LEVELS ; ++ level )
>7	CompoundStatement	 
>8	ExpressionStatement	 
>9	AssignmentExpr	numData [ level ] = 0
>10	PrimaryExpression	0
>11	ArrayIndexing	numData [ level ]
>12	Identifier	level
>13	Identifier	numData
>14	ExpressionStatement	 
>15	AssignmentExpr	pointPosInXYGrid [ level ] = nullptr
>16	Identifier	nullptr
>17	ArrayIndexing	pointPosInXYGrid [ level ]
>18	Identifier	level
>19	Identifier	pointPosInXYGrid
>20	ExpressionStatement	 
>21	AssignmentExpr	colorAndVarData [ level ] = nullptr
>22	Identifier	nullptr
>23	ArrayIndexing	colorAndVarData [ level ]
>24	Identifier	level
>25	Identifier	colorAndVarData
>26	ExpressionStatement	 
>27	AssignmentExpr	gradData [ level ] = nullptr
>28	Identifier	nullptr
>29	ArrayIndexing	gradData [ level ]
>30	Identifier	level
>31	Identifier	gradData
>32	ExpressionStatement	 
>33	AssignmentExpr	posData [ level ] = nullptr
>34	Identifier	nullptr
>35	ArrayIndexing	posData [ level ]
>36	Identifier	level
>37	Identifier	posData
>38	UnaryExpression	 
>39	Identifier	level
>40	IncDec	++
>41	Condition	 
>42	RelationalExpression	level < PYRAMID_LEVELS
>43	Identifier	PYRAMID_LEVELS
>44	Identifier	level
>45	ForInit	 
>46	IdentifierDeclStatement	int level = 0 ;
>47	IdentifierDecl	level = 0
>48	AssignmentExpr	level = 0
>49	PrimaryExpression	0
>50	Identifier	level
>51	Identifier	level
>52	IdentifierDeclType	int
>53	ExpressionStatement	 
>54	AssignmentExpr	wh_allocated = 0
>55	PrimaryExpression	0
>56	Identifier	wh_allocated
>57	ExpressionStatement	 
>58	AssignmentExpr	keyframe = 0
>59	PrimaryExpression	0
>60	Identifier	keyframe
>61	ExpressionStatement	 
>62	AssignmentExpr	frameID = - 1
>63	UnaryOp	- 1
>64	PrimaryExpression	1
>65	UnaryOperator	-
>66	Identifier	frameID
>87	FunctionDef	TrackingReference 
>88	ParameterList	 
>89	ReturnType	void
>90	CompoundStatement	 
>91	ExpressionStatement	 
>92	AssignmentExpr	wh_allocated = 0
>93	PrimaryExpression	0
>94	Identifier	wh_allocated
>95	ForStatement	for ( int level = 0 ; level < PYRAMID_LEVELS ; ++ level )
>96	CompoundStatement	 
>97	ExpressionStatement	 
>98	AssignmentExpr	numData [ level ] = 0
>99	PrimaryExpression	0
>100	ArrayIndexing	numData [ level ]
>101	Identifier	level
>102	Identifier	numData
>103	IfStatement	if ( pointPosInXYGrid [ level ] != nullptr )
>104	ExpressionStatement	 
>105	CallExpression	Eigen 
>106	ArgumentList	( void * ) pointPosInXYGrid [ level ]
>107	Argument	( void * ) pointPosInXYGrid [ level ]
>108	CastExpression	( void * ) pointPosInXYGrid [ level ]
>109	ArrayIndexing	pointPosInXYGrid [ level ]
>110	Identifier	level
>111	Identifier	pointPosInXYGrid
>112	CastTarget	void *
>113	Callee	Eigen 
>114	Identifier	Eigen 
>115	Condition	 
>116	EqualityExpression	pointPosInXYGrid [ level ] != nullptr
>117	Identifier	nullptr
>118	ArrayIndexing	pointPosInXYGrid [ level ]
>119	Identifier	level
>120	Identifier	pointPosInXYGrid
>121	ExpressionStatement	 
>122	ArrayIndexing	colorAndVarData [ level ]
>123	Identifier	level
>124	Identifier	colorAndVarData
>125	Statement	 
>126	Statement	 
>127	IfStatement	if ( colorAndVarData [ level ] != nullptr )
>128	Statement	 
>129	Condition	 
>130	EqualityExpression	colorAndVarData [ level ] != nullptr
>131	Identifier	nullptr
>132	ArrayIndexing	colorAndVarData [ level ]
>133	Identifier	level
>134	Identifier	colorAndVarData
>135	ExpressionStatement	 
>136	ArrayIndexing	gradData [ level ]
>137	Identifier	level
>138	Identifier	gradData
>139	Statement	 
>140	Statement	 
>141	IfStatement	if ( gradData [ level ] != nullptr )
>142	Statement	 
>143	Condition	 
>144	EqualityExpression	gradData [ level ] != nullptr
>145	Identifier	nullptr
>146	ArrayIndexing	gradData [ level ]
>147	Identifier	level
>148	Identifier	gradData
>149	ExpressionStatement	 
>150	ArrayIndexing	posData [ level ]
>151	Identifier	level
>152	Identifier	posData
>153	Statement	 
>154	Statement	 
>155	IfStatement	if ( posData [ level ] != nullptr )
>156	Statement	 
>157	Condition	 
>158	EqualityExpression	posData [ level ] != nullptr
>159	Identifier	nullptr
>160	ArrayIndexing	posData [ level ]
>161	Identifier	level
>162	Identifier	posData
>163	UnaryExpression	 
>164	Identifier	level
>165	IncDec	++
>166	Condition	 
>167	RelationalExpression	level < PYRAMID_LEVELS
>168	Identifier	PYRAMID_LEVELS
>169	Identifier	level
>170	ForInit	 
>171	IdentifierDeclStatement	int level = 0 ;
>172	IdentifierDecl	level = 0
>173	AssignmentExpr	level = 0
>174	PrimaryExpression	0
>175	Identifier	level
>176	Identifier	level
>177	IdentifierDeclType	int
>196	FunctionDef	TrackingReference 
>197	ParameterList	 
>198	ReturnType	void
>199	CompoundStatement	 
>200	ForStatement	for ( int level = 0 ; level < PYRAMID_LEVELS ; ++ level )
>201	ExpressionStatement	 
>202	AssignmentExpr	numData [ level ] = 0
>203	PrimaryExpression	0
>204	ArrayIndexing	numData [ level ]
>205	Identifier	level
>206	Identifier	numData
>207	UnaryExpression	 
>208	Identifier	level
>209	IncDec	++
>210	Condition	 
>211	RelationalExpression	level < PYRAMID_LEVELS
>212	Identifier	PYRAMID_LEVELS
>213	Identifier	level
>214	ForInit	 
>215	IdentifierDeclStatement	int level = 0 ;
>216	IdentifierDecl	level = 0
>217	AssignmentExpr	level = 0
>218	PrimaryExpression	0
>219	Identifier	level
>220	Identifier	level
>221	IdentifierDeclType	int
>230	FunctionDef	TrackingReference 
>231	ParameterList	 
>232	CompoundStatement	 
>233	ExpressionStatement	 
>234	CallExpression	releaseAll ( )
>235	ArgumentList	 
>236	Callee	releaseAll
>237	Identifier	releaseAll
>238	ExpressionStatement	 
>239	CallExpression	invalidate ( )
>240	ArgumentList	 
>241	Callee	invalidate
>242	Identifier	invalidate
>243	IdentifierDeclStatement	 
>244	IdentifierDecl	lock ( accessMutex )
>245	Identifier	accessMutex
>246	Identifier	lock
>247	IdentifierDeclType	boost 
>252	FunctionDef	TrackingReference 
>253	ParameterList	Frame * sourceKF
>254	Parameter	 
>255	Identifier	sourceKF
>256	ParameterType	Frame *
>257	ReturnType	void
>258	CompoundStatement	 
>259	ExpressionStatement	 
>260	CallExpression	lock . unlock ( )
>261	ArgumentList	 
>262	Callee	lock . unlock
>263	MemberAccess	lock . unlock
>264	Identifier	unlock
>265	Identifier	lock
>266	ExpressionStatement	 
>267	CallExpression	clearAll ( )
>268	ArgumentList	 
>269	Callee	clearAll
>270	Identifier	clearAll
>271	IfStatement	if ( sourceKF -> width ( 0 ) * sourceKF -> height ( 0 ) != wh_allocated )
>272	CompoundStatement	 
>273	ExpressionStatement	 
>274	AssignmentExpr	wh_allocated = sourceKF -> width ( 0 ) * sourceKF -> height ( 0 )
>275	MultiplicativeExpression	sourceKF -> width ( 0 ) * sourceKF -> height ( 0 )
>276	CallExpression	sourceKF -> height ( 0 )
>277	ArgumentList	0
>278	Argument	0
>279	PrimaryExpression	0
>280	Callee	sourceKF -> height
>281	PtrMemberAccess	sourceKF -> height
>282	Identifier	height
>283	Identifier	sourceKF
>284	CallExpression	sourceKF -> width ( 0 )
>285	ArgumentList	0
>286	Argument	0
>287	PrimaryExpression	0
>288	Callee	sourceKF -> width
>289	PtrMemberAccess	sourceKF -> width
>290	Identifier	width
>291	Identifier	sourceKF
>292	Identifier	wh_allocated
>293	ExpressionStatement	 
>294	CallExpression	releaseAll ( )
>295	ArgumentList	 
>296	Callee	releaseAll
>297	Identifier	releaseAll
>298	Condition	 
>299	EqualityExpression	sourceKF -> width ( 0 ) * sourceKF -> height ( 0 ) != wh_allocated
>300	Identifier	wh_allocated
>301	MultiplicativeExpression	sourceKF -> width ( 0 ) * sourceKF -> height ( 0 )
>302	CallExpression	sourceKF -> height ( 0 )
>303	ArgumentList	0
>304	Argument	0
>305	PrimaryExpression	0
>306	Callee	sourceKF -> height
>307	PtrMemberAccess	sourceKF -> height
>308	Identifier	height
>309	Identifier	sourceKF
>310	CallExpression	sourceKF -> width ( 0 )
>311	ArgumentList	0
>312	Argument	0
>313	PrimaryExpression	0
>314	Callee	sourceKF -> width
>315	PtrMemberAccess	sourceKF -> width
>316	Identifier	width
>317	Identifier	sourceKF
>318	ExpressionStatement	 
>319	AssignmentExpr	frameID = keyframe -> id ( )
>320	CallExpression	keyframe -> id ( )
>321	ArgumentList	 
>322	Callee	keyframe -> id
>323	PtrMemberAccess	keyframe -> id
>324	Identifier	id
>325	Identifier	keyframe
>326	Identifier	frameID
>327	ExpressionStatement	 
>328	AssignmentExpr	keyframe = sourceKF
>329	Identifier	sourceKF
>330	Identifier	keyframe
>331	ExpressionStatement	 
>332	AssignmentExpr	keyframeLock = sourceKF -> getActiveLock ( )
>333	CallExpression	sourceKF -> getActiveLock ( )
>334	ArgumentList	 
>335	Callee	sourceKF -> getActiveLock
>336	PtrMemberAccess	sourceKF -> getActiveLock
>337	Identifier	getActiveLock
>338	Identifier	sourceKF
>339	Identifier	keyframeLock
>340	IdentifierDeclStatement	 
>341	IdentifierDecl	lock ( accessMutex )
>342	Identifier	accessMutex
>343	Identifier	lock
>344	IdentifierDeclType	boost 
>360	FunctionDef	TrackingReference 
>361	ParameterList	 
>362	ReturnType	void
>363	CompoundStatement	 
>364	ExpressionStatement	 
>365	AssignmentExpr	keyframe = 0
>366	PrimaryExpression	0
>367	Identifier	keyframe
>368	IfStatement	if ( keyframe != 0 )
>369	ExpressionStatement	 
>370	CallExpression	keyframeLock . unlock ( )
>371	ArgumentList	 
>372	Callee	keyframeLock . unlock
>373	MemberAccess	keyframeLock . unlock
>374	Identifier	unlock
>375	Identifier	keyframeLock
>376	Condition	 
>377	EqualityExpression	keyframe != 0
>378	PrimaryExpression	0
>379	Identifier	keyframe
>385	FunctionDef	TrackingReference 
>386	ParameterList	int level
>387	Parameter	 
>388	Identifier	level
>389	ParameterType	int
>390	ReturnType	void
>391	CompoundStatement	 
>392	ExpressionStatement	 
>393	AssignmentExpr	numData [ level ] = posDataPT - posData [ level ]
>394	AdditiveExpression	posDataPT - posData [ level ]
>395	ArrayIndexing	posData [ level ]
>396	Identifier	level
>397	Identifier	posData
>398	Identifier	posDataPT
>399	ArrayIndexing	numData [ level ]
>400	Identifier	level
>401	Identifier	numData
>402	ForStatement	for ( int x = 1 ; x < w - 1 ; x ++ )
>403	ForStatement	for ( int y = 1 ; y < h - 1 ; y ++ )
>404	CompoundStatement	 
>405	ExpressionStatement	 
>406	IncDecOp	idxPT ++
>407	IncDec	++
>408	Identifier	idxPT
>409	ExpressionStatement	 
>410	IncDecOp	colorAndVarDataPT ++
>411	IncDec	++
>412	Identifier	colorAndVarDataPT
>413	ExpressionStatement	 
>414	IncDecOp	gradDataPT ++
>415	IncDec	++
>416	Identifier	gradDataPT
>417	ExpressionStatement	 
>418	IncDecOp	posDataPT ++
>419	IncDec	++
>420	Identifier	posDataPT
>421	ExpressionStatement	 
>422	AssignmentExpr	* idxPT = idx
>423	Identifier	idx
>424	UnaryOp	* idxPT
>425	Identifier	idxPT
>426	UnaryOperator	*
>427	ExpressionStatement	 
>428	AssignmentExpr	* colorAndVarDataPT = Eigen 
>429	CallExpression	Eigen 
>430	ArgumentList	pyrColorSource [ idx ]
>431	Argument	pyrIdepthVarSource [ idx ]
>432	ArrayIndexing	pyrIdepthVarSource [ idx ]
>433	Identifier	idx
>434	Identifier	pyrIdepthVarSource
>435	Argument	pyrColorSource [ idx ]
>436	ArrayIndexing	pyrColorSource [ idx ]
>437	Identifier	idx
>438	Identifier	pyrColorSource
>439	Callee	Eigen 
>440	Identifier	Eigen 
>441	UnaryOp	* colorAndVarDataPT
>442	Identifier	colorAndVarDataPT
>443	UnaryOperator	*
>444	ExpressionStatement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	ExpressionStatement	 
>460	AssignmentExpr	* posDataPT = ( 1.0f / pyrIdepthSource [ idx ] ) * Eigen 
>461	MultiplicativeExpression	( 1.0f / pyrIdepthSource [ idx ] ) * Eigen 
>462	CallExpression	Eigen 
>463	ArgumentList	fxInvLevel * x + cxInvLevel
>464	Argument	1
>465	PrimaryExpression	1
>466	Argument	fyInvLevel * y + cyInvLevel
>467	AdditiveExpression	fyInvLevel * y + cyInvLevel
>468	Identifier	cyInvLevel
>469	MultiplicativeExpression	fyInvLevel * y
>470	Identifier	y
>471	Identifier	fyInvLevel
>472	Argument	fxInvLevel * x + cxInvLevel
>473	AdditiveExpression	fxInvLevel * x + cxInvLevel
>474	Identifier	cxInvLevel
>475	MultiplicativeExpression	fxInvLevel * x
>476	Identifier	x
>477	Identifier	fxInvLevel
>478	Callee	Eigen 
>479	Identifier	Eigen 
>480	MultiplicativeExpression	1.0f / pyrIdepthSource [ idx ]
>481	ArrayIndexing	pyrIdepthSource [ idx ]
>482	Identifier	idx
>483	Identifier	pyrIdepthSource
>484	PrimaryExpression	1.0f
>485	UnaryOp	* posDataPT
>486	Identifier	posDataPT
>487	UnaryOperator	*
>488	IfStatement	if ( pyrIdepthVarSource [ idx ] <= 0 || pyrIdepthSource [ idx ] == 0 )
>489	ContinueStatement	 
>490	Condition	 
>491	OrExpression	pyrIdepthVarSource [ idx ] <= 0 || pyrIdepthSource [ idx ] == 0
>492	EqualityExpression	pyrIdepthSource [ idx ] == 0
>493	PrimaryExpression	0
>494	ArrayIndexing	pyrIdepthSource [ idx ]
>495	Identifier	idx
>496	Identifier	pyrIdepthSource
>497	RelationalExpression	pyrIdepthVarSource [ idx ] <= 0
>498	PrimaryExpression	0
>499	ArrayIndexing	pyrIdepthVarSource [ idx ]
>500	Identifier	idx
>501	Identifier	pyrIdepthVarSource
>502	IdentifierDeclStatement	 
>503	IdentifierDecl	idx = x + y * w
>504	AssignmentExpr	idx = x + y * w
>505	AdditiveExpression	x + y * w
>506	MultiplicativeExpression	y * w
>507	Identifier	w
>508	Identifier	y
>509	Identifier	x
>510	Identifier	idx
>511	Identifier	idx
>512	IdentifierDeclType	int
>513	IncDecOp	 
>514	IncDec	++
>515	Identifier	y
>516	Condition	 
>517	RelationalExpression	y < h - 1
>518	AdditiveExpression	h - 1
>519	PrimaryExpression	1
>520	Identifier	h
>521	Identifier	y
>522	ForInit	 
>523	IdentifierDeclStatement	int y = 1 ;
>524	IdentifierDecl	y = 1
>525	AssignmentExpr	y = 1
>526	PrimaryExpression	1
>527	Identifier	y
>528	Identifier	y
>529	IdentifierDeclType	int
>530	IncDecOp	 
>531	IncDec	++
>532	Identifier	x
>533	Condition	 
>534	RelationalExpression	x < w - 1
>535	AdditiveExpression	w - 1
>536	PrimaryExpression	1
>537	Identifier	w
>538	Identifier	x
>539	ForInit	 
>540	IdentifierDeclStatement	int x = 1 ;
>541	IdentifierDecl	x = 1
>542	AssignmentExpr	x = 1
>543	PrimaryExpression	1
>544	Identifier	x
>545	Identifier	x
>546	IdentifierDeclType	int
>547	IdentifierDeclStatement	 
>548	IdentifierDecl	* colorAndVarDataPT = colorAndVarData [ level ]
>549	AssignmentExpr	* colorAndVarDataPT = colorAndVarData [ level ]
>550	ArrayIndexing	colorAndVarData [ level ]
>551	Identifier	level
>552	Identifier	colorAndVarData
>553	Identifier	colorAndVarDataPT
>554	Identifier	colorAndVarDataPT
>555	IdentifierDeclType	Eigen 
>556	IdentifierDeclStatement	 
>557	IdentifierDecl	* gradDataPT = gradData [ level ]
>558	AssignmentExpr	* gradDataPT = gradData [ level ]
>559	ArrayIndexing	gradData [ level ]
>560	Identifier	level
>561	Identifier	gradData
>562	Identifier	gradDataPT
>563	Identifier	gradDataPT
>564	IdentifierDeclType	Eigen 
>565	IdentifierDeclStatement	 
>566	IdentifierDecl	* idxPT = pointPosInXYGrid [ level ]
>567	AssignmentExpr	* idxPT = pointPosInXYGrid [ level ]
>568	ArrayIndexing	pointPosInXYGrid [ level ]
>569	Identifier	level
>570	Identifier	pointPosInXYGrid
>571	Identifier	idxPT
>572	Identifier	idxPT
>573	IdentifierDeclType	int *
>574	IdentifierDeclStatement	 
>575	IdentifierDecl	* posDataPT = posData [ level ]
>576	AssignmentExpr	* posDataPT = posData [ level ]
>577	ArrayIndexing	posData [ level ]
>578	Identifier	level
>579	Identifier	posData
>580	Identifier	posDataPT
>581	Identifier	posDataPT
>582	IdentifierDeclType	Eigen 
>583	IfStatement	if ( colorAndVarData [ level ] == nullptr )
>584	ExpressionStatement	 
>585	AssignmentExpr	colorAndVarData [ level ] = new Eigen 
>586	MultiplicativeExpression	w * h
>587	Identifier	h
>588	Identifier	w
>589	ArrayIndexing	colorAndVarData [ level ]
>590	Identifier	level
>591	Identifier	colorAndVarData
>592	Condition	 
>593	EqualityExpression	colorAndVarData [ level ] == nullptr
>594	Identifier	nullptr
>595	ArrayIndexing	colorAndVarData [ level ]
>596	Identifier	level
>597	Identifier	colorAndVarData
>598	IfStatement	if ( gradData [ level ] == nullptr )
>599	ExpressionStatement	 
>600	AssignmentExpr	gradData [ level ] = new Eigen 
>601	MultiplicativeExpression	w * h
>602	Identifier	h
>603	Identifier	w
>604	ArrayIndexing	gradData [ level ]
>605	Identifier	level
>606	Identifier	gradData
>607	Condition	 
>608	EqualityExpression	gradData [ level ] == nullptr
>609	Identifier	nullptr
>610	ArrayIndexing	gradData [ level ]
>611	Identifier	level
>612	Identifier	gradData
>613	ExpressionStatement	 
>614	IfStatement	if ( pointPosInXYGrid [ level ] == nullptr )
>615	ExpressionStatement	 
>616	AssignmentExpr	pointPosInXYGrid [ level ] = ( int * ) Eigen 
>617	CastExpression	( int * ) Eigen 
>618	CallExpression	Eigen 
>619	ArgumentList	w * h * sizeof ( int )
>620	Argument	w * h * sizeof ( int )
>621	MultiplicativeExpression	w * h * sizeof ( int )
>622	MultiplicativeExpression	h * sizeof ( int )
>623	SizeofExpr	sizeof ( int )
>624	SizeofOperand	int
>625	Sizeof	sizeof
>626	Identifier	h
>627	Identifier	w
>628	Callee	Eigen 
>629	Identifier	Eigen 
>630	CastTarget	int *
>631	ArrayIndexing	pointPosInXYGrid [ level ]
>632	Identifier	level
>633	Identifier	pointPosInXYGrid
>634	Condition	 
>635	EqualityExpression	pointPosInXYGrid [ level ] == nullptr
>636	Identifier	nullptr
>637	ArrayIndexing	pointPosInXYGrid [ level ]
>638	Identifier	level
>639	Identifier	pointPosInXYGrid
>640	IfStatement	if ( posData [ level ] == nullptr )
>641	ExpressionStatement	 
>642	AssignmentExpr	posData [ level ] = new Eigen 
>643	MultiplicativeExpression	w * h
>644	Identifier	h
>645	Identifier	w
>646	ArrayIndexing	posData [ level ]
>647	Identifier	level
>648	Identifier	posData
>649	Condition	 
>650	EqualityExpression	posData [ level ] == nullptr
>651	Identifier	nullptr
>652	ArrayIndexing	posData [ level ]
>653	Identifier	level
>654	Identifier	posData
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	* pyrGradSource = keyframe -> gradients ( level )
>657	AssignmentExpr	* pyrGradSource = keyframe -> gradients ( level )
>658	CallExpression	keyframe -> gradients ( level )
>659	ArgumentList	level
>660	Argument	level
>661	Identifier	level
>662	Callee	keyframe -> gradients
>663	PtrMemberAccess	keyframe -> gradients
>664	Identifier	gradients
>665	Identifier	keyframe
>666	Identifier	pyrGradSource
>667	Identifier	pyrGradSource
>668	IdentifierDeclType	const Eigen 
>669	IdentifierDeclStatement	 
>670	IdentifierDecl	* pyrColorSource = keyframe -> image ( level )
>671	AssignmentExpr	* pyrColorSource = keyframe -> image ( level )
>672	CallExpression	keyframe -> image ( level )
>673	ArgumentList	level
>674	Argument	level
>675	Identifier	level
>676	Callee	keyframe -> image
>677	PtrMemberAccess	keyframe -> image
>678	Identifier	image
>679	Identifier	keyframe
>680	Identifier	pyrColorSource
>681	Identifier	pyrColorSource
>682	IdentifierDeclType	const float *
>683	IdentifierDeclStatement	 
>684	IdentifierDecl	* pyrIdepthVarSource = keyframe -> idepthVar ( level )
>685	AssignmentExpr	* pyrIdepthVarSource = keyframe -> idepthVar ( level )
>686	CallExpression	keyframe -> idepthVar ( level )
>687	ArgumentList	level
>688	Argument	level
>689	Identifier	level
>690	Callee	keyframe -> idepthVar
>691	PtrMemberAccess	keyframe -> idepthVar
>692	Identifier	idepthVar
>693	Identifier	keyframe
>694	Identifier	pyrIdepthVarSource
>695	Identifier	pyrIdepthVarSource
>696	IdentifierDeclType	const float *
>697	IdentifierDeclStatement	 
>698	IdentifierDecl	* pyrIdepthSource = keyframe -> idepth ( level )
>699	AssignmentExpr	* pyrIdepthSource = keyframe -> idepth ( level )
>700	CallExpression	keyframe -> idepth ( level )
>701	ArgumentList	level
>702	Argument	level
>703	Identifier	level
>704	Callee	keyframe -> idepth
>705	PtrMemberAccess	keyframe -> idepth
>706	Identifier	idepth
>707	Identifier	keyframe
>708	Identifier	pyrIdepthSource
>709	Identifier	pyrIdepthSource
>710	IdentifierDeclType	const float *
>711	IdentifierDeclStatement	 
>712	IdentifierDecl	cyInvLevel = keyframe -> cyInv ( level )
>713	AssignmentExpr	cyInvLevel = keyframe -> cyInv ( level )
>714	CallExpression	keyframe -> cyInv ( level )
>715	ArgumentList	level
>716	Argument	level
>717	Identifier	level
>718	Callee	keyframe -> cyInv
>719	PtrMemberAccess	keyframe -> cyInv
>720	Identifier	cyInv
>721	Identifier	keyframe
>722	Identifier	cyInvLevel
>723	Identifier	cyInvLevel
>724	IdentifierDeclType	float
>725	IdentifierDeclStatement	 
>726	IdentifierDecl	cxInvLevel = keyframe -> cxInv ( level )
>727	AssignmentExpr	cxInvLevel = keyframe -> cxInv ( level )
>728	CallExpression	keyframe -> cxInv ( level )
>729	ArgumentList	level
>730	Argument	level
>731	Identifier	level
>732	Callee	keyframe -> cxInv
>733	PtrMemberAccess	keyframe -> cxInv
>734	Identifier	cxInv
>735	Identifier	keyframe
>736	Identifier	cxInvLevel
>737	Identifier	cxInvLevel
>738	IdentifierDeclType	float
>739	IdentifierDeclStatement	 
>740	IdentifierDecl	fyInvLevel = keyframe -> fyInv ( level )
>741	AssignmentExpr	fyInvLevel = keyframe -> fyInv ( level )
>742	CallExpression	keyframe -> fyInv ( level )
>743	ArgumentList	level
>744	Argument	level
>745	Identifier	level
>746	Callee	keyframe -> fyInv
>747	PtrMemberAccess	keyframe -> fyInv
>748	Identifier	fyInv
>749	Identifier	keyframe
>750	Identifier	fyInvLevel
>751	Identifier	fyInvLevel
>752	IdentifierDeclType	float
>753	IdentifierDeclStatement	 
>754	IdentifierDecl	fxInvLevel = keyframe -> fxInv ( level )
>755	AssignmentExpr	fxInvLevel = keyframe -> fxInv ( level )
>756	CallExpression	keyframe -> fxInv ( level )
>757	ArgumentList	level
>758	Argument	level
>759	Identifier	level
>760	Callee	keyframe -> fxInv
>761	PtrMemberAccess	keyframe -> fxInv
>762	Identifier	fxInv
>763	Identifier	keyframe
>764	Identifier	fxInvLevel
>765	Identifier	fxInvLevel
>766	IdentifierDeclType	float
>767	IdentifierDeclStatement	 
>768	IdentifierDecl	h = keyframe -> height ( level )
>769	AssignmentExpr	h = keyframe -> height ( level )
>770	CallExpression	keyframe -> height ( level )
>771	ArgumentList	level
>772	Argument	level
>773	Identifier	level
>774	Callee	keyframe -> height
>775	PtrMemberAccess	keyframe -> height
>776	Identifier	height
>777	Identifier	keyframe
>778	Identifier	h
>779	Identifier	h
>780	IdentifierDeclType	int
>781	IdentifierDeclStatement	 
>782	IdentifierDecl	w = keyframe -> width ( level )
>783	AssignmentExpr	w = keyframe -> width ( level )
>784	CallExpression	keyframe -> width ( level )
>785	ArgumentList	level
>786	Argument	level
>787	Identifier	level
>788	Callee	keyframe -> width
>789	PtrMemberAccess	keyframe -> width
>790	Identifier	width
>791	Identifier	keyframe
>792	Identifier	w
>793	Identifier	w
>794	IdentifierDeclType	int
>795	IfStatement	if ( numData [ level ] > 0 )
>796	ReturnStatement	 
>797	Condition	 
>798	RelationalExpression	numData [ level ] > 0
>799	PrimaryExpression	0
>800	ArrayIndexing	numData [ level ]
>801	Identifier	level
>802	Identifier	numData
>803	IdentifierDeclStatement	 
>804	IdentifierDecl	lock ( accessMutex )
>805	Identifier	accessMutex
>806	Identifier	lock
>807	IdentifierDeclType	boost 
>808	ExpressionStatement	 
>809	CallExpression	assert ( keyframe != 0 )
>810	ArgumentList	keyframe != 0
>811	Argument	keyframe != 0
>812	EqualityExpression	keyframe != 0
>813	PrimaryExpression	0
>814	Identifier	keyframe
>815	Callee	assert
>816	Identifier	assert
<3=5,4
<5=61,57,53,6
<6=45,41,38,7
<7=32,26,20,14,8
<8=9
<9=11,10
<11=13,12
<14=15
<15=17,16
<17=19,18
<20=21
<21=23,22
<23=25,24
<26=27
<27=29,28
<29=31,30
<32=33
<33=35,34
<35=37,36
<38=40,39
<41=42
<42=44,43
<45=46
<46=47
<47=52,51,48
<48=50,49
<53=54
<54=56,55
<57=58
<58=60,59
<61=62
<62=66,63
<63=65,64
<87=90,89,88
<90=95,91
<91=92
<92=94,93
<95=170,166,163,96
<96=155,154,153,149,141,140,139,135,127,126,125,121,103,97
<97=98
<98=100,99
<100=102,101
<103=115,104
<104=105
<105=113,106
<106=107
<107=108
<108=112,109
<109=111,110
<113=114
<115=116
<116=118,117
<118=120,119
<121=122
<122=124,123
<127=129,128
<129=130
<130=132,131
<132=134,133
<135=136
<136=138,137
<141=143,142
<143=144
<144=146,145
<146=148,147
<149=150
<150=152,151
<155=157,156
<157=158
<158=160,159
<160=162,161
<163=165,164
<166=167
<167=169,168
<170=171
<171=172
<172=177,176,173
<173=175,174
<196=199,198,197
<199=200
<200=214,210,207,201
<201=202
<202=204,203
<204=206,205
<207=209,208
<210=211
<211=213,212
<214=215
<215=216
<216=221,220,217
<217=219,218
<230=232,231
<232=243,238,233
<233=234
<234=236,235
<236=237
<238=239
<239=241,240
<241=242
<243=244
<244=247,246,245
<252=258,257,253
<253=254
<254=256,255
<258=340,331,327,318,271,266,259
<259=260
<260=262,261
<262=263
<263=265,264
<266=267
<267=269,268
<269=270
<271=298,272
<272=293,273
<273=274
<274=292,275
<275=284,276
<276=280,277
<277=278
<278=279
<280=281
<281=283,282
<284=288,285
<285=286
<286=287
<288=289
<289=291,290
<293=294
<294=296,295
<296=297
<298=299
<299=301,300
<301=310,302
<302=306,303
<303=304
<304=305
<306=307
<307=309,308
<310=314,311
<311=312
<312=313
<314=315
<315=317,316
<318=319
<319=326,320
<320=322,321
<322=323
<323=325,324
<327=328
<328=330,329
<331=332
<332=339,333
<333=335,334
<335=336
<336=338,337
<340=341
<341=344,343,342
<360=363,362,361
<363=368,364
<364=365
<365=367,366
<368=376,369
<369=370
<370=372,371
<372=373
<373=375,374
<376=377
<377=379,378
<385=391,390,386
<386=387
<387=389,388
<391=808,803,795,781,767,753,739,725,711,697,683,669,655,640,614,613,598,583,574,565,556,547,402,392
<392=393
<393=399,394
<394=398,395
<395=397,396
<399=401,400
<402=539,533,530,403
<403=522,516,513,404
<404=502,488,459,458,457,456,455,454,453,452,451,450,449,448,447,446,445,444,427,421,417,413,409,405
<405=406
<406=408,407
<409=410
<410=412,411
<413=414
<414=416,415
<417=418
<418=420,419
<421=422
<422=424,423
<424=426,425
<427=428
<428=441,429
<429=439,430
<430=435,431
<431=432
<432=434,433
<435=436
<436=438,437
<439=440
<441=443,442
<459=460
<460=485,461
<461=480,462
<462=478,463
<463=472,466,464
<464=465
<466=467
<467=469,468
<469=471,470
<472=473
<473=475,474
<475=477,476
<478=479
<480=484,481
<481=483,482
<485=487,486
<488=490,489
<490=491
<491=497,492
<492=494,493
<494=496,495
<497=499,498
<499=501,500
<502=503
<503=512,511,504
<504=510,505
<505=509,506
<506=508,507
<513=515,514
<516=517
<517=521,518
<518=520,519
<522=523
<523=524
<524=529,528,525
<525=527,526
<530=532,531
<533=534
<534=538,535
<535=537,536
<539=540
<540=541
<541=546,545,542
<542=544,543
<547=548
<548=555,554,549
<549=553,550
<550=552,551
<556=557
<557=564,563,558
<558=562,559
<559=561,560
<565=566
<566=573,572,567
<567=571,568
<568=570,569
<574=575
<575=582,581,576
<576=580,577
<577=579,578
<583=592,584
<584=585
<585=589,586
<586=588,587
<589=591,590
<592=593
<593=595,594
<595=597,596
<598=607,599
<599=600
<600=604,601
<601=603,602
<604=606,605
<607=608
<608=610,609
<610=612,611
<614=634,615
<615=616
<616=631,617
<617=630,618
<618=628,619
<619=620
<620=621
<621=627,622
<622=626,623
<623=625,624
<628=629
<631=633,632
<634=635
<635=637,636
<637=639,638
<640=649,641
<641=642
<642=646,643
<643=645,644
<646=648,647
<649=650
<650=652,651
<652=654,653
<655=656
<656=668,667,657
<657=666,658
<658=662,659
<659=660
<660=661
<662=663
<663=665,664
<669=670
<670=682,681,671
<671=680,672
<672=676,673
<673=674
<674=675
<676=677
<677=679,678
<683=684
<684=696,695,685
<685=694,686
<686=690,687
<687=688
<688=689
<690=691
<691=693,692
<697=698
<698=710,709,699
<699=708,700
<700=704,701
<701=702
<702=703
<704=705
<705=707,706
<711=712
<712=724,723,713
<713=722,714
<714=718,715
<715=716
<716=717
<718=719
<719=721,720
<725=726
<726=738,737,727
<727=736,728
<728=732,729
<729=730
<730=731
<732=733
<733=735,734
<739=740
<740=752,751,741
<741=750,742
<742=746,743
<743=744
<744=745
<746=747
<747=749,748
<753=754
<754=766,765,755
<755=764,756
<756=760,757
<757=758
<758=759
<760=761
<761=763,762
<767=768
<768=780,779,769
<769=778,770
<770=774,771
<771=772
<772=773
<774=775
<775=777,776
<781=782
<782=794,793,783
<783=792,784
<784=788,785
<785=786
<786=787
<788=789
<789=791,790
<795=797,796
<797=798
<798=800,799
<800=802,801
<803=804
<804=807,806,805
<808=809
<809=815,810
<810=811
<811=812
<812=814,813
<815=816
