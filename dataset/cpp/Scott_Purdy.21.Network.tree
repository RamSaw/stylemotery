>3	FunctionDef	Network 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	CallExpression	NuPIC 
>8	ArgumentList	this
>9	Argument	this
>10	Identifier	this
>11	Callee	NuPIC 
>12	Identifier	NuPIC 
>13	ExpressionStatement	 
>14	CallExpression	commonInit ( )
>15	ArgumentList	 
>16	Callee	commonInit
>17	Identifier	commonInit
>22	FunctionDef	Network 
>23	ParameterList	const std 
>24	Parameter	 
>25	Identifier	path
>26	ParameterType	const std 
>27	CompoundStatement	 
>28	ExpressionStatement	 
>29	CallExpression	NuPIC 
>30	ArgumentList	this
>31	Argument	this
>32	Identifier	this
>33	Callee	NuPIC 
>34	Identifier	NuPIC 
>35	ExpressionStatement	 
>36	CallExpression	load ( path )
>37	ArgumentList	path
>38	Argument	path
>39	Identifier	path
>40	Callee	load
>41	Identifier	load
>42	ExpressionStatement	 
>43	CallExpression	commonInit ( )
>44	ArgumentList	 
>45	Callee	commonInit
>46	Identifier	commonInit
>52	FunctionDef	Network 
>53	ParameterList	 
>54	ReturnType	void
>55	CompoundStatement	 
>56	ExpressionStatement	 
>57	CallExpression	NuPIC 
>58	ArgumentList	 
>59	Callee	NuPIC 
>60	Identifier	NuPIC 
>61	ExpressionStatement	 
>62	AssignmentExpr	maxEnabledPhase_ = 0
>63	PrimaryExpression	0
>64	Identifier	maxEnabledPhase_
>65	ExpressionStatement	 
>66	AssignmentExpr	minEnabledPhase_ = 0
>67	PrimaryExpression	0
>68	Identifier	minEnabledPhase_
>69	ExpressionStatement	 
>70	AssignmentExpr	iteration_ = 0
>71	PrimaryExpression	0
>72	Identifier	iteration_
>73	ExpressionStatement	 
>74	AssignmentExpr	initialized_ = false
>75	Identifier	false
>76	Identifier	initialized_
>85	FunctionDef	Network 
>86	ParameterList	 
>87	CompoundStatement	 
>88	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>89	CompoundStatement	 
>90	ExpressionStatement	 
>91	AssignmentExpr	item . second = NULL
>92	Identifier	NULL
>93	MemberAccess	item . second
>94	Identifier	second
>95	Identifier	item
>96	ExpressionStatement	 
>97	MemberAccess	item . second
>98	Identifier	second
>99	Identifier	item
>100	Statement	 
>101	IdentifierDeclStatement	 
>102	IdentifierDecl	& item = regions_ . getByIndex ( i )
>103	AssignmentExpr	& item = regions_ . getByIndex ( i )
>104	CallExpression	regions_ . getByIndex ( i )
>105	ArgumentList	i
>106	Argument	i
>107	Identifier	i
>108	Callee	regions_ . getByIndex
>109	MemberAccess	regions_ . getByIndex
>110	Identifier	getByIndex
>111	Identifier	regions_
>112	Identifier	item
>113	Identifier	item
>114	IdentifierDeclType	std 
>115	IncDecOp	 
>116	IncDec	++
>117	Identifier	i
>118	Condition	 
>119	RelationalExpression	i < regions_ . getCount ( )
>120	CallExpression	regions_ . getCount ( )
>121	ArgumentList	 
>122	Callee	regions_ . getCount
>123	MemberAccess	regions_ . getCount
>124	Identifier	getCount
>125	Identifier	regions_
>126	Identifier	i
>127	ForInit	 
>128	IdentifierDeclStatement	size_t i = 0 ;
>129	IdentifierDecl	i = 0
>130	AssignmentExpr	i = 0
>131	PrimaryExpression	0
>132	Identifier	i
>133	Identifier	i
>134	IdentifierDeclType	size_t
>135	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>136	CompoundStatement	 
>137	ExpressionStatement	 
>138	CallExpression	r -> removeAllIncomingLinks ( )
>139	ArgumentList	 
>140	Callee	r -> removeAllIncomingLinks
>141	PtrMemberAccess	r -> removeAllIncomingLinks
>142	Identifier	removeAllIncomingLinks
>143	Identifier	r
>144	IdentifierDeclStatement	 
>145	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>146	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>147	MemberAccess	regions_ . getByIndex ( i ) . second
>148	Identifier	second
>149	CallExpression	regions_ . getByIndex ( i )
>150	ArgumentList	i
>151	Argument	i
>152	Identifier	i
>153	Callee	regions_ . getByIndex
>154	MemberAccess	regions_ . getByIndex
>155	Identifier	getByIndex
>156	Identifier	regions_
>157	Identifier	r
>158	Identifier	r
>159	IdentifierDeclType	Region *
>160	IncDecOp	 
>161	IncDec	++
>162	Identifier	i
>163	Condition	 
>164	RelationalExpression	i < regions_ . getCount ( )
>165	CallExpression	regions_ . getCount ( )
>166	ArgumentList	 
>167	Callee	regions_ . getCount
>168	MemberAccess	regions_ . getCount
>169	Identifier	getCount
>170	Identifier	regions_
>171	Identifier	i
>172	ForInit	 
>173	IdentifierDeclStatement	size_t i = 0 ;
>174	IdentifierDecl	i = 0
>175	AssignmentExpr	i = 0
>176	PrimaryExpression	0
>177	Identifier	i
>178	Identifier	i
>179	IdentifierDeclType	size_t
>180	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>181	CompoundStatement	 
>182	ExpressionStatement	 
>183	CallExpression	r -> uninitialize ( )
>184	ArgumentList	 
>185	Callee	r -> uninitialize
>186	PtrMemberAccess	r -> uninitialize
>187	Identifier	uninitialize
>188	Identifier	r
>189	IdentifierDeclStatement	 
>190	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>191	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>192	MemberAccess	regions_ . getByIndex ( i ) . second
>193	Identifier	second
>194	CallExpression	regions_ . getByIndex ( i )
>195	ArgumentList	i
>196	Argument	i
>197	Identifier	i
>198	Callee	regions_ . getByIndex
>199	MemberAccess	regions_ . getByIndex
>200	Identifier	getByIndex
>201	Identifier	regions_
>202	Identifier	r
>203	Identifier	r
>204	IdentifierDeclType	Region *
>205	IncDecOp	 
>206	IncDec	++
>207	Identifier	i
>208	Condition	 
>209	RelationalExpression	i < regions_ . getCount ( )
>210	CallExpression	regions_ . getCount ( )
>211	ArgumentList	 
>212	Callee	regions_ . getCount
>213	MemberAccess	regions_ . getCount
>214	Identifier	getCount
>215	Identifier	regions_
>216	Identifier	i
>217	ForInit	 
>218	IdentifierDeclStatement	size_t i = 0 ;
>219	IdentifierDecl	i = 0
>220	AssignmentExpr	i = 0
>221	PrimaryExpression	0
>222	Identifier	i
>223	Identifier	i
>224	IdentifierDeclType	size_t
>225	ExpressionStatement	 
>226	CallExpression	NuPIC 
>227	ArgumentList	this
>228	Argument	this
>229	Identifier	this
>230	Callee	NuPIC 
>231	Identifier	NuPIC 
>245	FunctionDef	Network 
>246	ParameterList	const std 
>247	Parameter	 
>248	Identifier	nodeParams
>249	ParameterType	const std 
>250	Parameter	 
>251	Identifier	nodeType
>252	ParameterType	const std 
>253	Parameter	 
>254	Identifier	name
>255	ParameterType	const std 
>256	ReturnType	Region *
>257	CompoundStatement	 
>258	ReturnStatement	 
>259	Identifier	r
>260	ExpressionStatement	 
>261	CallExpression	setDefaultPhase_ ( r )
>262	ArgumentList	r
>263	Argument	r
>264	Identifier	r
>265	Callee	setDefaultPhase_
>266	Identifier	setDefaultPhase_
>267	ExpressionStatement	 
>268	AssignmentExpr	initialized_ = false
>269	Identifier	false
>270	Identifier	initialized_
>271	ExpressionStatement	 
>272	CallExpression	regions_ . add ( name , r )
>273	ArgumentList	name
>274	Argument	r
>275	Identifier	r
>276	Argument	name
>277	Identifier	name
>278	Callee	regions_ . add
>279	MemberAccess	regions_ . add
>280	Identifier	add
>281	Identifier	regions_
>282	IdentifierDeclStatement	 
>283	IdentifierDecl	* r = new Region ( name , nodeType , nodeParams , this )
>284	AssignmentExpr	* r = new Region ( name , nodeType , nodeParams , this )
>285	Expression	name , nodeType , nodeParams , this
>286	Expression	nodeType , nodeParams , this
>287	Expression	nodeParams , this
>288	Identifier	this
>289	Identifier	nodeParams
>290	Identifier	nodeType
>291	Identifier	name
>292	Identifier	r
>293	Identifier	r
>294	IdentifierDeclType	Region *
>295	IfStatement	if ( regions_ . contains ( name ) )
>296	ExpressionStatement	 
>297	ShiftExpression	NTA_THROW << \"Region with name '\" << name << \"' already exists in network\"
>298	ShiftExpression	\"Region with name '\" << name << \"' already exists in network\"
>299	ShiftExpression	name << \"' already exists in network\"
>300	PrimaryExpression	\"' already exists in network\"
>301	Identifier	name
>302	PrimaryExpression	\"Region with name '\"
>303	Identifier	NTA_THROW
>304	Condition	 
>305	CallExpression	regions_ . contains ( name )
>306	ArgumentList	name
>307	Argument	name
>308	Identifier	name
>309	Callee	regions_ . contains
>310	MemberAccess	regions_ . contains
>311	Identifier	contains
>312	Identifier	regions_
>325	FunctionDef	Network 
>326	ParameterList	Region * region
>327	Parameter	 
>328	Identifier	region
>329	ParameterType	Region *
>330	ReturnType	void
>331	CompoundStatement	 
>332	ExpressionStatement	 
>333	CallExpression	setPhases_ ( region , phases )
>334	ArgumentList	region
>335	Argument	phases
>336	Identifier	phases
>337	Argument	region
>338	Identifier	region
>339	Callee	setPhases_
>340	Identifier	setPhases_
>341	ExpressionStatement	 
>342	CallExpression	phases . insert ( newphase )
>343	ArgumentList	newphase
>344	Argument	newphase
>345	Identifier	newphase
>346	Callee	phases . insert
>347	MemberAccess	phases . insert
>348	Identifier	insert
>349	Identifier	phases
>350	IdentifierDeclStatement	 
>351	IdentifierDecl	phases
>352	Identifier	phases
>353	IdentifierDeclType	std 
>354	IdentifierDeclStatement	 
>355	IdentifierDecl	newphase = phaseInfo_ . size ( )
>356	AssignmentExpr	newphase = phaseInfo_ . size ( )
>357	CallExpression	phaseInfo_ . size ( )
>358	ArgumentList	 
>359	Callee	phaseInfo_ . size
>360	MemberAccess	phaseInfo_ . size
>361	Identifier	size
>362	Identifier	phaseInfo_
>363	Identifier	newphase
>364	Identifier	newphase
>365	IdentifierDeclType	UInt32
>374	FunctionDef	Network 
>375	ParameterList	const std 
>376	Parameter	 
>377	Identifier	label
>378	ParameterType	const std 
>379	Parameter	 
>380	Identifier	bundlePath
>381	ParameterType	const std 
>382	Parameter	 
>383	Identifier	dimensions
>384	ParameterType	const Dimensions &
>385	Parameter	 
>386	Identifier	nodeType
>387	ParameterType	const std 
>388	Parameter	 
>389	Identifier	name
>390	ParameterType	const std 
>391	ReturnType	Region *
>392	CompoundStatement	 
>393	ReturnStatement	 
>394	Identifier	r
>395	ExpressionStatement	 
>396	CallExpression	setDefaultPhase_ ( r )
>397	ArgumentList	r
>398	Argument	r
>399	Identifier	r
>400	Callee	setDefaultPhase_
>401	Identifier	setDefaultPhase_
>402	ExpressionStatement	 
>403	AssignmentExpr	initialized_ = false
>404	Identifier	false
>405	Identifier	initialized_
>406	ExpressionStatement	 
>407	CallExpression	regions_ . add ( name , r )
>408	ArgumentList	name
>409	Argument	r
>410	Identifier	r
>411	Argument	name
>412	Identifier	name
>413	Callee	regions_ . add
>414	MemberAccess	regions_ . add
>415	Identifier	add
>416	Identifier	regions_
>417	IdentifierDeclStatement	 
>418	IdentifierDecl	* r = new Region ( name , nodeType , dimensions , bundle , this )
>419	AssignmentExpr	* r = new Region ( name , nodeType , dimensions , bundle , this )
>420	Expression	name , nodeType , dimensions , bundle , this
>421	Expression	nodeType , dimensions , bundle , this
>422	Expression	dimensions , bundle , this
>423	Expression	bundle , this
>424	Identifier	this
>425	Identifier	bundle
>426	Identifier	dimensions
>427	Identifier	nodeType
>428	Identifier	name
>429	Identifier	r
>430	Identifier	r
>431	IdentifierDeclType	Region *
>432	IdentifierDeclStatement	 
>433	IdentifierDecl	bundle ( bundlePath , label , name , true )
>434	Expression	bundlePath , label , name , true
>435	Expression	label , name , true
>436	Expression	name , true
>437	Identifier	true
>438	Identifier	name
>439	Identifier	label
>440	Identifier	bundlePath
>441	Identifier	bundle
>442	IdentifierDeclType	BundleIO
>443	IfStatement	if ( ! Path 
>444	ExpressionStatement	 
>445	ShiftExpression	NTA_THROW << \"addRegionFromBundle -- bundle '\" << bundlePath << \" does not exist\"
>446	ShiftExpression	\"addRegionFromBundle -- bundle '\" << bundlePath << \" does not exist\"
>447	ShiftExpression	bundlePath << \" does not exist\"
>448	PrimaryExpression	\" does not exist\"
>449	Identifier	bundlePath
>450	PrimaryExpression	\"addRegionFromBundle -- bundle '\"
>451	Identifier	NTA_THROW
>452	Condition	 
>453	UnaryOp	! Path 
>454	CallExpression	Path 
>455	ArgumentList	bundlePath
>456	Argument	bundlePath
>457	Identifier	bundlePath
>458	Callee	Path 
>459	Identifier	Path 
>460	UnaryOperator	!
>461	IfStatement	if ( regions_ . contains ( name ) )
>462	ExpressionStatement	 
>463	ShiftExpression	NTA_THROW << \"Invalid saved network
>464	ShiftExpression	\"Invalid saved network
>465	ShiftExpression	name << \"'\"
>466	PrimaryExpression	\"'\"
>467	Identifier	name
>468	PrimaryExpression	\"Invalid saved network
>469	Identifier	NTA_THROW
>470	Condition	 
>471	CallExpression	regions_ . contains ( name )
>472	ArgumentList	name
>473	Argument	name
>474	Identifier	name
>475	Callee	regions_ . contains
>476	MemberAccess	regions_ . contains
>477	Identifier	contains
>478	Identifier	regions_
>495	FunctionDef	Network 
>496	ParameterList	Region * r , std 
>497	Parameter	 
>498	Identifier	phases
>499	ParameterType	std 
>500	Parameter	 
>501	Identifier	r
>502	ParameterType	Region *
>503	ReturnType	void
>504	CompoundStatement	 
>505	ExpressionStatement	 
>506	CallExpression	resetEnabledPhases_ ( )
>507	ArgumentList	 
>508	Callee	resetEnabledPhases_
>509	Identifier	resetEnabledPhases_
>510	ExpressionStatement	 
>511	CallExpression	r -> setPhases ( phases )
>512	ArgumentList	phases
>513	Argument	phases
>514	Identifier	phases
>515	Callee	r -> setPhases
>516	PtrMemberAccess	r -> setPhases
>517	Identifier	setPhases
>518	Identifier	r
>519	ForStatement	for ( UInt i = 0 ; i < phaseInfo_ . size ( ) ; i ++ )
>520	CompoundStatement	 
>521	IfStatement	if ( item != phaseInfo_ [ i ] . end ( ) && ! insertPhase )
>522	ElseStatement	else
>523	IfStatement	if ( insertPhase )
>524	CompoundStatement	 
>525	ExpressionStatement	 
>526	CallExpression	phaseInfo_ [ i ] . insert ( r )
>527	ArgumentList	r
>528	Argument	r
>529	Identifier	r
>530	Callee	phaseInfo_ [ i ] . insert
>531	MemberAccess	phaseInfo_ [ i ] . insert
>532	Identifier	insert
>533	ArrayIndexing	phaseInfo_ [ i ]
>534	Identifier	i
>535	Identifier	phaseInfo_
>536	Condition	 
>537	Identifier	insertPhase
>538	CompoundStatement	 
>539	ExpressionStatement	 
>540	CallExpression	phaseInfo_ [ i ] . erase ( item )
>541	ArgumentList	item
>542	Argument	item
>543	Identifier	item
>544	Callee	phaseInfo_ [ i ] . erase
>545	MemberAccess	phaseInfo_ [ i ] . erase
>546	Identifier	erase
>547	ArrayIndexing	phaseInfo_ [ i ]
>548	Identifier	i
>549	Identifier	phaseInfo_
>550	Condition	 
>551	AndExpression	item != phaseInfo_ [ i ] . end ( ) && ! insertPhase
>552	UnaryOp	! insertPhase
>553	Identifier	insertPhase
>554	UnaryOperator	!
>555	EqualityExpression	item != phaseInfo_ [ i ] . end ( )
>556	CallExpression	phaseInfo_ [ i ] . end ( )
>557	ArgumentList	 
>558	Callee	phaseInfo_ [ i ] . end
>559	MemberAccess	phaseInfo_ [ i ] . end
>560	Identifier	end
>561	ArrayIndexing	phaseInfo_ [ i ]
>562	Identifier	i
>563	Identifier	phaseInfo_
>564	Identifier	item
>565	ExpressionStatement	 
>566	AssignmentExpr	item = phaseInfo_ [ i ] . find ( r )
>567	CallExpression	phaseInfo_ [ i ] . find ( r )
>568	ArgumentList	r
>569	Argument	r
>570	Identifier	r
>571	Callee	phaseInfo_ [ i ] . find
>572	MemberAccess	phaseInfo_ [ i ] . find
>573	Identifier	find
>574	ArrayIndexing	phaseInfo_ [ i ]
>575	Identifier	i
>576	Identifier	phaseInfo_
>577	Identifier	item
>578	IdentifierDeclStatement	 
>579	IdentifierDecl	item
>580	Identifier	item
>581	IdentifierDeclType	std 
>582	IfStatement	if ( phases . find ( i ) != phases . end ( ) )
>583	ExpressionStatement	 
>584	AssignmentExpr	insertPhase = true
>585	Identifier	true
>586	Identifier	insertPhase
>587	Condition	 
>588	EqualityExpression	phases . find ( i ) != phases . end ( )
>589	CallExpression	phases . end ( )
>590	ArgumentList	 
>591	Callee	phases . end
>592	MemberAccess	phases . end
>593	Identifier	end
>594	Identifier	phases
>595	CallExpression	phases . find ( i )
>596	ArgumentList	i
>597	Argument	i
>598	Identifier	i
>599	Callee	phases . find
>600	MemberAccess	phases . find
>601	Identifier	find
>602	Identifier	phases
>603	IdentifierDeclStatement	 
>604	IdentifierDecl	insertPhase = false
>605	AssignmentExpr	insertPhase = false
>606	Identifier	false
>607	Identifier	false
>608	Identifier	insertPhase
>609	IdentifierDeclType	bool
>610	IncDecOp	 
>611	IncDec	++
>612	Identifier	i
>613	Condition	 
>614	RelationalExpression	i < phaseInfo_ . size ( )
>615	CallExpression	phaseInfo_ . size ( )
>616	ArgumentList	 
>617	Callee	phaseInfo_ . size
>618	MemberAccess	phaseInfo_ . size
>619	Identifier	size
>620	Identifier	phaseInfo_
>621	Identifier	i
>622	ForInit	 
>623	IdentifierDeclStatement	UInt i = 0 ;
>624	IdentifierDecl	i = 0
>625	AssignmentExpr	i = 0
>626	PrimaryExpression	0
>627	Identifier	i
>628	Identifier	i
>629	IdentifierDeclType	UInt
>630	IfStatement	if ( maxNewPhase >= nextPhase )
>631	CompoundStatement	 
>632	ExpressionStatement	 
>633	CallExpression	phaseInfo_ . resize ( maxNewPhase + 1 )
>634	ArgumentList	maxNewPhase + 1
>635	Argument	maxNewPhase + 1
>636	AdditiveExpression	maxNewPhase + 1
>637	PrimaryExpression	1
>638	Identifier	maxNewPhase
>639	Callee	phaseInfo_ . resize
>640	MemberAccess	phaseInfo_ . resize
>641	Identifier	resize
>642	Identifier	phaseInfo_
>643	IfStatement	if ( maxNewPhase - nextPhase > 3 )
>644	ExpressionStatement	 
>645	ShiftExpression	NTA_THROW << \"Attempt to set phase of \" << maxNewPhase << \" when expected next phase is \" << nextPhase << \" \
>646	ShiftExpression	\"Attempt to set phase of \" << maxNewPhase << \" when expected next phase is \" << nextPhase << \" -- this \
>647	ShiftExpression	maxNewPhase << \" when expected next phase is \" << nextPhase << \" -- this is probably an error.\"
>648	ShiftExpression	\" when expected next phase is \" << nextPhase << \" -- this is probably an error.\"
>649	ShiftExpression	nextPhase << \" -- this is probably an error.\"
>650	PrimaryExpression	\" -- this is probably an error.\"
>651	Identifier	nextPhase
>652	PrimaryExpression	\" when expected next phase is \"
>653	Identifier	maxNewPhase
>654	PrimaryExpression	\"Attempt to set phase of \"
>655	Identifier	NTA_THROW
>656	Condition	 
>657	RelationalExpression	maxNewPhase - nextPhase > 3
>658	PrimaryExpression	3
>659	AdditiveExpression	maxNewPhase - nextPhase
>660	Identifier	nextPhase
>661	Identifier	maxNewPhase
>662	Condition	 
>663	RelationalExpression	maxNewPhase >= nextPhase
>664	Identifier	nextPhase
>665	Identifier	maxNewPhase
>666	IdentifierDeclStatement	 
>667	IdentifierDecl	nextPhase = phaseInfo_ . size ( )
>668	AssignmentExpr	nextPhase = phaseInfo_ . size ( )
>669	CallExpression	phaseInfo_ . size ( )
>670	ArgumentList	 
>671	Callee	phaseInfo_ . size
>672	MemberAccess	phaseInfo_ . size
>673	Identifier	size
>674	Identifier	phaseInfo_
>675	Identifier	nextPhase
>676	Identifier	nextPhase
>677	IdentifierDeclType	UInt32
>678	IdentifierDeclStatement	 
>679	IdentifierDecl	maxNewPhase = * ( phases . rbegin ( ) )
>680	AssignmentExpr	maxNewPhase = * ( phases . rbegin ( ) )
>681	UnaryOp	* ( phases . rbegin ( ) )
>682	CallExpression	phases . rbegin ( )
>683	ArgumentList	 
>684	Callee	phases . rbegin
>685	MemberAccess	phases . rbegin
>686	Identifier	rbegin
>687	Identifier	phases
>688	UnaryOperator	*
>689	Identifier	maxNewPhase
>690	Identifier	maxNewPhase
>691	IdentifierDeclType	UInt32
>692	IfStatement	if ( phases . size ( ) == 0 )
>693	ExpressionStatement	 
>694	ShiftExpression	NTA_THROW << \"Attempt to set empty phase list for region \" << r -> getName ( )
>695	ShiftExpression	\"Attempt to set empty phase list for region \" << r -> getName ( )
>696	CallExpression	r -> getName ( )
>697	ArgumentList	 
>698	Callee	r -> getName
>699	PtrMemberAccess	r -> getName
>700	Identifier	getName
>701	Identifier	r
>702	PrimaryExpression	\"Attempt to set empty phase list for region \"
>703	Identifier	NTA_THROW
>704	Condition	 
>705	EqualityExpression	phases . size ( ) == 0
>706	PrimaryExpression	0
>707	CallExpression	phases . size ( )
>708	ArgumentList	 
>709	Callee	phases . size
>710	MemberAccess	phases . size
>711	Identifier	size
>712	Identifier	phases
>738	FunctionDef	Network 
>739	ParameterList	 
>740	ReturnType	void
>741	CompoundStatement	 
>742	ExpressionStatement	 
>743	AssignmentExpr	maxEnabledPhase_ = getMaxPhase ( )
>744	CallExpression	getMaxPhase ( )
>745	ArgumentList	 
>746	Callee	getMaxPhase
>747	Identifier	getMaxPhase
>748	Identifier	maxEnabledPhase_
>749	ExpressionStatement	 
>750	AssignmentExpr	minEnabledPhase_ = getMinPhase ( )
>751	CallExpression	getMinPhase ( )
>752	ArgumentList	 
>753	Callee	getMinPhase
>754	Identifier	getMinPhase
>755	Identifier	minEnabledPhase_
>763	FunctionDef	Network 
>764	ParameterList	const std 
>765	Parameter	 
>766	Identifier	phases
>767	ParameterType	std 
>768	Parameter	 
>769	Identifier	name
>770	ParameterType	const std 
>771	ReturnType	void
>772	CompoundStatement	 
>773	ExpressionStatement	 
>774	CallExpression	setPhases_ ( r , phases )
>775	ArgumentList	r
>776	Argument	phases
>777	Identifier	phases
>778	Argument	r
>779	Identifier	r
>780	Callee	setPhases_
>781	Identifier	setPhases_
>782	IdentifierDeclStatement	 
>783	IdentifierDecl	* r = regions_ . getByName ( name )
>784	AssignmentExpr	* r = regions_ . getByName ( name )
>785	CallExpression	regions_ . getByName ( name )
>786	ArgumentList	name
>787	Argument	name
>788	Identifier	name
>789	Callee	regions_ . getByName
>790	MemberAccess	regions_ . getByName
>791	Identifier	getByName
>792	Identifier	regions_
>793	Identifier	r
>794	Identifier	r
>795	IdentifierDeclType	Region *
>796	IfStatement	if ( ! regions_ . contains ( name ) )
>797	ExpressionStatement	 
>798	ShiftExpression	NTA_THROW << \"setPhases -- no region exists with name '\" << name << \"'\"
>799	ShiftExpression	\"setPhases -- no region exists with name '\" << name << \"'\"
>800	ShiftExpression	name << \"'\"
>801	PrimaryExpression	\"'\"
>802	Identifier	name
>803	PrimaryExpression	\"setPhases -- no region exists with name '\"
>804	Identifier	NTA_THROW
>805	Condition	 
>806	UnaryOp	! regions_ . contains ( name )
>807	CallExpression	regions_ . contains ( name )
>808	ArgumentList	name
>809	Argument	name
>810	Identifier	name
>811	Callee	regions_ . contains
>812	MemberAccess	regions_ . contains
>813	Identifier	contains
>814	Identifier	regions_
>815	UnaryOperator	!
>825	FunctionDef	Network 
>826	ParameterList	const std 
>827	Parameter	 
>828	Identifier	name
>829	ParameterType	const std 
>830	ReturnType	std 
>831	CompoundStatement	 
>832	ReturnStatement	 
>833	Identifier	phases
>834	ForStatement	for ( UInt32 i = 0 ; i < phaseInfo_ . size ( ) ; i ++ )
>835	CompoundStatement	 
>836	IfStatement	if ( phaseInfo_ [ i ] . find ( r ) != phaseInfo_ [ i ] . end ( ) )
>837	CompoundStatement	 
>838	ExpressionStatement	 
>839	CallExpression	phases . insert ( i )
>840	ArgumentList	i
>841	Argument	i
>842	Identifier	i
>843	Callee	phases . insert
>844	MemberAccess	phases . insert
>845	Identifier	insert
>846	Identifier	phases
>847	Condition	 
>848	EqualityExpression	phaseInfo_ [ i ] . find ( r ) != phaseInfo_ [ i ] . end ( )
>849	CallExpression	phaseInfo_ [ i ] . end ( )
>850	ArgumentList	 
>851	Callee	phaseInfo_ [ i ] . end
>852	MemberAccess	phaseInfo_ [ i ] . end
>853	Identifier	end
>854	ArrayIndexing	phaseInfo_ [ i ]
>855	Identifier	i
>856	Identifier	phaseInfo_
>857	CallExpression	phaseInfo_ [ i ] . find ( r )
>858	ArgumentList	r
>859	Argument	r
>860	Identifier	r
>861	Callee	phaseInfo_ [ i ] . find
>862	MemberAccess	phaseInfo_ [ i ] . find
>863	Identifier	find
>864	ArrayIndexing	phaseInfo_ [ i ]
>865	Identifier	i
>866	Identifier	phaseInfo_
>867	IncDecOp	 
>868	IncDec	++
>869	Identifier	i
>870	Condition	 
>871	RelationalExpression	i < phaseInfo_ . size ( )
>872	CallExpression	phaseInfo_ . size ( )
>873	ArgumentList	 
>874	Callee	phaseInfo_ . size
>875	MemberAccess	phaseInfo_ . size
>876	Identifier	size
>877	Identifier	phaseInfo_
>878	Identifier	i
>879	ForInit	 
>880	IdentifierDeclStatement	UInt32 i = 0 ;
>881	IdentifierDecl	i = 0
>882	AssignmentExpr	i = 0
>883	PrimaryExpression	0
>884	Identifier	i
>885	Identifier	i
>886	IdentifierDeclType	UInt32
>887	IdentifierDeclStatement	 
>888	IdentifierDecl	phases
>889	Identifier	phases
>890	IdentifierDeclType	std 
>891	IdentifierDeclStatement	 
>892	IdentifierDecl	* r = regions_ . getByName ( name )
>893	AssignmentExpr	* r = regions_ . getByName ( name )
>894	CallExpression	regions_ . getByName ( name )
>895	ArgumentList	name
>896	Argument	name
>897	Identifier	name
>898	Callee	regions_ . getByName
>899	MemberAccess	regions_ . getByName
>900	Identifier	getByName
>901	Identifier	regions_
>902	Identifier	r
>903	Identifier	r
>904	IdentifierDeclType	Region *
>905	IfStatement	if ( ! regions_ . contains ( name ) )
>906	ExpressionStatement	 
>907	ShiftExpression	NTA_THROW << \"setPhases -- no region exists with name '\" << name << \"'\"
>908	ShiftExpression	\"setPhases -- no region exists with name '\" << name << \"'\"
>909	ShiftExpression	name << \"'\"
>910	PrimaryExpression	\"'\"
>911	Identifier	name
>912	PrimaryExpression	\"setPhases -- no region exists with name '\"
>913	Identifier	NTA_THROW
>914	Condition	 
>915	UnaryOp	! regions_ . contains ( name )
>916	CallExpression	regions_ . contains ( name )
>917	ArgumentList	name
>918	Argument	name
>919	Identifier	name
>920	Callee	regions_ . contains
>921	MemberAccess	regions_ . contains
>922	Identifier	contains
>923	Identifier	regions_
>924	UnaryOperator	!
>941	FunctionDef	Network 
>942	ParameterList	const std 
>943	Parameter	 
>944	Identifier	name
>945	ParameterType	const std 
>946	ReturnType	void
>947	CompoundStatement	 
>948	ReturnStatement	 
>949	ExpressionStatement	 
>950	Identifier	r
>951	Statement	 
>952	ExpressionStatement	 
>953	CallExpression	resetEnabledPhases_ ( )
>954	ArgumentList	 
>955	Callee	resetEnabledPhases_
>956	Identifier	resetEnabledPhases_
>957	ForStatement	for ( size_t i = phaseInfo_ . size ( ) - 1 ; i > 0 ; i -- )
>958	CompoundStatement	 
>959	IfStatement	if ( phaseInfo_ [ i ] . size ( ) == 0 )
>960	ElseStatement	else
>961	BreakStatement	 
>962	ExpressionStatement	 
>963	CallExpression	phaseInfo_ . resize ( i )
>964	ArgumentList	i
>965	Argument	i
>966	Identifier	i
>967	Callee	phaseInfo_ . resize
>968	MemberAccess	phaseInfo_ . resize
>969	Identifier	resize
>970	Identifier	phaseInfo_
>971	Condition	 
>972	EqualityExpression	phaseInfo_ [ i ] . size ( ) == 0
>973	PrimaryExpression	0
>974	CallExpression	phaseInfo_ [ i ] . size ( )
>975	ArgumentList	 
>976	Callee	phaseInfo_ [ i ] . size
>977	MemberAccess	phaseInfo_ [ i ] . size
>978	Identifier	size
>979	ArrayIndexing	phaseInfo_ [ i ]
>980	Identifier	i
>981	Identifier	phaseInfo_
>982	IncDecOp	 
>983	IncDec	--
>984	Identifier	i
>985	Condition	 
>986	RelationalExpression	i > 0
>987	PrimaryExpression	0
>988	Identifier	i
>989	ForInit	 
>990	IdentifierDeclStatement	size_t i = phaseInfo_ . size ( ) - 1 ;
>991	IdentifierDecl	i = phaseInfo_ . size ( ) - 1
>992	AssignmentExpr	i = phaseInfo_ . size ( ) - 1
>993	AdditiveExpression	phaseInfo_ . size ( ) - 1
>994	PrimaryExpression	1
>995	CallExpression	phaseInfo_ . size ( )
>996	ArgumentList	 
>997	Callee	phaseInfo_ . size
>998	MemberAccess	phaseInfo_ . size
>999	Identifier	size
>1000	Identifier	phaseInfo_
>1001	Identifier	i
>1002	Identifier	i
>1003	IdentifierDeclType	size_t
>1004	ForStatement	for ( ; phase != phaseInfo_ . end ( ) ; phase ++ )
>1005	CompoundStatement	 
>1006	IfStatement	if ( toremove != phase -> end ( ) )
>1007	ExpressionStatement	 
>1008	CallExpression	phase -> erase ( toremove )
>1009	ArgumentList	toremove
>1010	Argument	toremove
>1011	Identifier	toremove
>1012	Callee	phase -> erase
>1013	PtrMemberAccess	phase -> erase
>1014	Identifier	erase
>1015	Identifier	phase
>1016	Condition	 
>1017	EqualityExpression	toremove != phase -> end ( )
>1018	CallExpression	phase -> end ( )
>1019	ArgumentList	 
>1020	Callee	phase -> end
>1021	PtrMemberAccess	phase -> end
>1022	Identifier	end
>1023	Identifier	phase
>1024	Identifier	toremove
>1025	IdentifierDeclStatement	 
>1026	IdentifierDecl	toremove = phase -> find ( r )
>1027	AssignmentExpr	toremove = phase -> find ( r )
>1028	CallExpression	phase -> find ( r )
>1029	ArgumentList	r
>1030	Argument	r
>1031	Identifier	r
>1032	Callee	phase -> find
>1033	PtrMemberAccess	phase -> find
>1034	Identifier	find
>1035	Identifier	phase
>1036	Identifier	toremove
>1037	Identifier	toremove
>1038	IdentifierDeclType	std 
>1039	IncDecOp	 
>1040	IncDec	++
>1041	Identifier	phase
>1042	Condition	 
>1043	EqualityExpression	phase != phaseInfo_ . end ( )
>1044	CallExpression	phaseInfo_ . end ( )
>1045	ArgumentList	 
>1046	Callee	phaseInfo_ . end
>1047	MemberAccess	phaseInfo_ . end
>1048	Identifier	end
>1049	Identifier	phaseInfo_
>1050	Identifier	phase
>1051	IdentifierDeclStatement	 
>1052	IdentifierDecl	phase = phaseInfo_ . begin ( )
>1053	AssignmentExpr	phase = phaseInfo_ . begin ( )
>1054	CallExpression	phaseInfo_ . begin ( )
>1055	ArgumentList	 
>1056	Callee	phaseInfo_ . begin
>1057	MemberAccess	phaseInfo_ . begin
>1058	Identifier	begin
>1059	Identifier	phaseInfo_
>1060	Identifier	phase
>1061	Identifier	phase
>1062	IdentifierDeclType	std 
>1063	ExpressionStatement	 
>1064	CallExpression	regions_ . remove ( name )
>1065	ArgumentList	name
>1066	Argument	name
>1067	Identifier	name
>1068	Callee	regions_ . remove
>1069	MemberAccess	regions_ . remove
>1070	Identifier	remove
>1071	Identifier	regions_
>1072	ExpressionStatement	 
>1073	CallExpression	r -> uninitialize ( )
>1074	ArgumentList	 
>1075	Callee	r -> uninitialize
>1076	PtrMemberAccess	r -> uninitialize
>1077	Identifier	uninitialize
>1078	Identifier	r
>1079	IfStatement	if ( r -> hasOutgoingLinks ( ) )
>1080	ExpressionStatement	 
>1081	ShiftExpression	NTA_THROW << \"Unable to remove region '\" << name << \"' because it has one or more outgoing links\"
>1082	ShiftExpression	\"Unable to remove region '\" << name << \"' because it has one or more outgoing links\"
>1083	ShiftExpression	name << \"' because it has one or more outgoing links\"
>1084	PrimaryExpression	\"' because it has one or more outgoing links\"
>1085	Identifier	name
>1086	PrimaryExpression	\"Unable to remove region '\"
>1087	Identifier	NTA_THROW
>1088	Condition	 
>1089	CallExpression	r -> hasOutgoingLinks ( )
>1090	ArgumentList	 
>1091	Callee	r -> hasOutgoingLinks
>1092	PtrMemberAccess	r -> hasOutgoingLinks
>1093	Identifier	hasOutgoingLinks
>1094	Identifier	r
>1095	IdentifierDeclStatement	 
>1096	IdentifierDecl	* r = regions_ . getByName ( name )
>1097	AssignmentExpr	* r = regions_ . getByName ( name )
>1098	CallExpression	regions_ . getByName ( name )
>1099	ArgumentList	name
>1100	Argument	name
>1101	Identifier	name
>1102	Callee	regions_ . getByName
>1103	MemberAccess	regions_ . getByName
>1104	Identifier	getByName
>1105	Identifier	regions_
>1106	Identifier	r
>1107	Identifier	r
>1108	IdentifierDeclType	Region *
>1109	IfStatement	if ( ! regions_ . contains ( name ) )
>1110	ExpressionStatement	 
>1111	ShiftExpression	NTA_THROW << \"removeRegion
>1112	ShiftExpression	\"removeRegion
>1113	ShiftExpression	name << \"'\"
>1114	PrimaryExpression	\"'\"
>1115	Identifier	name
>1116	PrimaryExpression	\"removeRegion
>1117	Identifier	NTA_THROW
>1118	Condition	 
>1119	UnaryOp	! regions_ . contains ( name )
>1120	CallExpression	regions_ . contains ( name )
>1121	ArgumentList	name
>1122	Argument	name
>1123	Identifier	name
>1124	Callee	regions_ . contains
>1125	MemberAccess	regions_ . contains
>1126	Identifier	contains
>1127	Identifier	regions_
>1128	UnaryOperator	!
>1152	FunctionDef	Network 
>1153	ParameterList	const std 
>1154	Parameter	 
>1155	Identifier	destInputName
>1156	ParameterType	const std 
>1157	Parameter	 
>1158	Identifier	srcOutputName
>1159	ParameterType	const std 
>1160	Parameter	 
>1161	Identifier	linkParams
>1162	ParameterType	const std 
>1163	Parameter	 
>1164	Identifier	linkType
>1165	ParameterType	const std 
>1166	Parameter	 
>1167	Identifier	destRegionName
>1168	ParameterType	const std 
>1169	Parameter	 
>1170	Identifier	srcRegionName
>1171	ParameterType	const std 
>1172	ReturnType	void
>1173	CompoundStatement	 
>1174	ExpressionStatement	 
>1175	CallExpression	destInput -> addLink ( linkType , linkParams , srcOutput )
>1176	ArgumentList	linkType
>1177	Argument	srcOutput
>1178	Identifier	srcOutput
>1179	Argument	linkParams
>1180	Identifier	linkParams
>1181	Argument	linkType
>1182	Identifier	linkType
>1183	Callee	destInput -> addLink
>1184	PtrMemberAccess	destInput -> addLink
>1185	Identifier	addLink
>1186	Identifier	destInput
>1187	IfStatement	if ( destInput == NULL )
>1188	CompoundStatement	 
>1189	ExpressionStatement	 
>1190	ShiftExpression	NTA_THROW << \"Network
>1191	ShiftExpression	\"Network
>1192	ShiftExpression	inputName << \" does not exist on region \" << destRegionName
>1193	ShiftExpression	\" does not exist on region \" << destRegionName
>1194	Identifier	destRegionName
>1195	PrimaryExpression	\" does not exist on region \"
>1196	Identifier	inputName
>1197	PrimaryExpression	\"Network
>1198	Identifier	NTA_THROW
>1199	Condition	 
>1200	EqualityExpression	destInput == NULL
>1201	Identifier	NULL
>1202	Identifier	destInput
>1203	IdentifierDeclStatement	 
>1204	IdentifierDecl	* destInput = destRegion -> getInput ( inputName )
>1205	AssignmentExpr	* destInput = destRegion -> getInput ( inputName )
>1206	CallExpression	destRegion -> getInput ( inputName )
>1207	ArgumentList	inputName
>1208	Argument	inputName
>1209	Identifier	inputName
>1210	Callee	destRegion -> getInput
>1211	PtrMemberAccess	destRegion -> getInput
>1212	Identifier	getInput
>1213	Identifier	destRegion
>1214	Identifier	destInput
>1215	Identifier	destInput
>1216	IdentifierDeclType	Input *
>1217	IfStatement	if ( destInputName == \"\" )
>1218	ElseStatement	else
>1219	ExpressionStatement	 
>1220	AssignmentExpr	inputName = destInputName
>1221	Identifier	destInputName
>1222	Identifier	inputName
>1223	ExpressionStatement	 
>1224	AssignmentExpr	inputName = destSpec -> getDefaultInputName ( )
>1225	CallExpression	destSpec -> getDefaultInputName ( )
>1226	ArgumentList	 
>1227	Callee	destSpec -> getDefaultInputName
>1228	PtrMemberAccess	destSpec -> getDefaultInputName
>1229	Identifier	getDefaultInputName
>1230	Identifier	destSpec
>1231	Identifier	inputName
>1232	Condition	 
>1233	EqualityExpression	destInputName == \"\"
>1234	PrimaryExpression	\"\"
>1235	Identifier	destInputName
>1236	IdentifierDeclStatement	 
>1237	IdentifierDecl	inputName
>1238	Identifier	inputName
>1239	IdentifierDeclType	std 
>1240	IdentifierDeclStatement	 
>1241	IdentifierDecl	* destSpec = destRegion -> getSpec ( )
>1242	AssignmentExpr	* destSpec = destRegion -> getSpec ( )
>1243	CallExpression	destRegion -> getSpec ( )
>1244	ArgumentList	 
>1245	Callee	destRegion -> getSpec
>1246	PtrMemberAccess	destRegion -> getSpec
>1247	Identifier	getSpec
>1248	Identifier	destRegion
>1249	Identifier	destSpec
>1250	Identifier	destSpec
>1251	IdentifierDeclType	const Spec *
>1252	IfStatement	if ( srcOutput == NULL )
>1253	ExpressionStatement	 
>1254	ShiftExpression	NTA_THROW << \"Network
>1255	ShiftExpression	\"Network
>1256	ShiftExpression	outputName << \" does not exist on region \" << srcRegionName
>1257	ShiftExpression	\" does not exist on region \" << srcRegionName
>1258	Identifier	srcRegionName
>1259	PrimaryExpression	\" does not exist on region \"
>1260	Identifier	outputName
>1261	PrimaryExpression	\"Network
>1262	Identifier	NTA_THROW
>1263	Condition	 
>1264	EqualityExpression	srcOutput == NULL
>1265	Identifier	NULL
>1266	Identifier	srcOutput
>1267	IdentifierDeclStatement	 
>1268	IdentifierDecl	* srcOutput = srcRegion -> getOutput ( outputName )
>1269	AssignmentExpr	* srcOutput = srcRegion -> getOutput ( outputName )
>1270	CallExpression	srcRegion -> getOutput ( outputName )
>1271	ArgumentList	outputName
>1272	Argument	outputName
>1273	Identifier	outputName
>1274	Callee	srcRegion -> getOutput
>1275	PtrMemberAccess	srcRegion -> getOutput
>1276	Identifier	getOutput
>1277	Identifier	srcRegion
>1278	Identifier	srcOutput
>1279	Identifier	srcOutput
>1280	IdentifierDeclType	Output *
>1281	IfStatement	if ( outputName == \"\" )
>1282	ExpressionStatement	 
>1283	AssignmentExpr	outputName = srcSpec -> getDefaultOutputName ( )
>1284	CallExpression	srcSpec -> getDefaultOutputName ( )
>1285	ArgumentList	 
>1286	Callee	srcSpec -> getDefaultOutputName
>1287	PtrMemberAccess	srcSpec -> getDefaultOutputName
>1288	Identifier	getDefaultOutputName
>1289	Identifier	srcSpec
>1290	Identifier	outputName
>1291	Condition	 
>1292	EqualityExpression	outputName == \"\"
>1293	PrimaryExpression	\"\"
>1294	Identifier	outputName
>1295	IdentifierDeclStatement	 
>1296	IdentifierDecl	outputName = srcOutputName
>1297	AssignmentExpr	outputName = srcOutputName
>1298	Identifier	srcOutputName
>1299	Identifier	srcOutputName
>1300	Identifier	outputName
>1301	IdentifierDeclType	std 
>1302	IdentifierDeclStatement	 
>1303	IdentifierDecl	* srcSpec = srcRegion -> getSpec ( )
>1304	AssignmentExpr	* srcSpec = srcRegion -> getSpec ( )
>1305	CallExpression	srcRegion -> getSpec ( )
>1306	ArgumentList	 
>1307	Callee	srcRegion -> getSpec
>1308	PtrMemberAccess	srcRegion -> getSpec
>1309	Identifier	getSpec
>1310	Identifier	srcRegion
>1311	Identifier	srcSpec
>1312	Identifier	srcSpec
>1313	IdentifierDeclType	const Spec *
>1314	IdentifierDeclStatement	 
>1315	IdentifierDecl	* destRegion = regions_ . getByName ( destRegionName )
>1316	AssignmentExpr	* destRegion = regions_ . getByName ( destRegionName )
>1317	CallExpression	regions_ . getByName ( destRegionName )
>1318	ArgumentList	destRegionName
>1319	Argument	destRegionName
>1320	Identifier	destRegionName
>1321	Callee	regions_ . getByName
>1322	MemberAccess	regions_ . getByName
>1323	Identifier	getByName
>1324	Identifier	regions_
>1325	Identifier	destRegion
>1326	Identifier	destRegion
>1327	IdentifierDeclType	Region *
>1328	IfStatement	if ( ! regions_ . contains ( destRegionName ) )
>1329	ExpressionStatement	 
>1330	ShiftExpression	NTA_THROW << \"Network
>1331	ShiftExpression	\"Network
>1332	ShiftExpression	destRegionName << \"' does not exist\"
>1333	PrimaryExpression	\"' does not exist\"
>1334	Identifier	destRegionName
>1335	PrimaryExpression	\"Network
>1336	Identifier	NTA_THROW
>1337	Condition	 
>1338	UnaryOp	! regions_ . contains ( destRegionName )
>1339	CallExpression	regions_ . contains ( destRegionName )
>1340	ArgumentList	destRegionName
>1341	Argument	destRegionName
>1342	Identifier	destRegionName
>1343	Callee	regions_ . contains
>1344	MemberAccess	regions_ . contains
>1345	Identifier	contains
>1346	Identifier	regions_
>1347	UnaryOperator	!
>1348	IdentifierDeclStatement	 
>1349	IdentifierDecl	* srcRegion = regions_ . getByName ( srcRegionName )
>1350	AssignmentExpr	* srcRegion = regions_ . getByName ( srcRegionName )
>1351	CallExpression	regions_ . getByName ( srcRegionName )
>1352	ArgumentList	srcRegionName
>1353	Argument	srcRegionName
>1354	Identifier	srcRegionName
>1355	Callee	regions_ . getByName
>1356	MemberAccess	regions_ . getByName
>1357	Identifier	getByName
>1358	Identifier	regions_
>1359	Identifier	srcRegion
>1360	Identifier	srcRegion
>1361	IdentifierDeclType	Region *
>1362	IfStatement	if ( ! regions_ . contains ( srcRegionName ) )
>1363	ExpressionStatement	 
>1364	ShiftExpression	NTA_THROW << \"Network
>1365	ShiftExpression	\"Network
>1366	ShiftExpression	srcRegionName << \"' does not exist\"
>1367	PrimaryExpression	\"' does not exist\"
>1368	Identifier	srcRegionName
>1369	PrimaryExpression	\"Network
>1370	Identifier	NTA_THROW
>1371	Condition	 
>1372	UnaryOp	! regions_ . contains ( srcRegionName )
>1373	CallExpression	regions_ . contains ( srcRegionName )
>1374	ArgumentList	srcRegionName
>1375	Argument	srcRegionName
>1376	Identifier	srcRegionName
>1377	Callee	regions_ . contains
>1378	MemberAccess	regions_ . contains
>1379	Identifier	contains
>1380	Identifier	regions_
>1381	UnaryOperator	!
>1413	FunctionDef	Network 
>1414	ParameterList	const std 
>1415	Parameter	 
>1416	Identifier	destInputName
>1417	ParameterType	const std 
>1418	Parameter	 
>1419	Identifier	srcOutputName
>1420	ParameterType	const std 
>1421	Parameter	 
>1422	Identifier	destRegionName
>1423	ParameterType	const std 
>1424	Parameter	 
>1425	Identifier	srcRegionName
>1426	ParameterType	const std 
>1427	ReturnType	void
>1428	CompoundStatement	 
>1429	ExpressionStatement	 
>1430	CallExpression	destInput -> removeLink ( link )
>1431	ArgumentList	link
>1432	Argument	link
>1433	Identifier	link
>1434	Callee	destInput -> removeLink
>1435	PtrMemberAccess	destInput -> removeLink
>1436	Identifier	removeLink
>1437	Identifier	destInput
>1438	IfStatement	if ( link == NULL )
>1439	ExpressionStatement	 
>1440	ShiftExpression	NTA_THROW << \"Network
>1441	ShiftExpression	\"Network
>1442	ShiftExpression	srcRegionName << \" output \" << outputName << \" to region \" << destRegionName << \" input \" << destInput \
>1443	ShiftExpression	\" output \" << outputName << \" to region \" << destRegionName << \" input \" << destInput -> getName ( )
>1444	ShiftExpression	outputName << \" to region \" << destRegionName << \" input \" << destInput -> getName ( )
>1445	ShiftExpression	\" to region \" << destRegionName << \" input \" << destInput -> getName ( )
>1446	ShiftExpression	destRegionName << \" input \" << destInput -> getName ( )
>1447	ShiftExpression	\" input \" << destInput -> getName ( )
>1448	CallExpression	destInput -> getName ( )
>1449	ArgumentList	 
>1450	Callee	destInput -> getName
>1451	PtrMemberAccess	destInput -> getName
>1452	Identifier	getName
>1453	Identifier	destInput
>1454	PrimaryExpression	\" input \"
>1455	Identifier	destRegionName
>1456	PrimaryExpression	\" to region \"
>1457	Identifier	outputName
>1458	PrimaryExpression	\" output \"
>1459	Identifier	srcRegionName
>1460	PrimaryExpression	\"Network
>1461	Identifier	NTA_THROW
>1462	Condition	 
>1463	EqualityExpression	link == NULL
>1464	Identifier	NULL
>1465	Identifier	link
>1466	IdentifierDeclStatement	 
>1467	IdentifierDecl	* link = destInput -> findLink ( srcRegionName , outputName )
>1468	AssignmentExpr	* link = destInput -> findLink ( srcRegionName , outputName )
>1469	CallExpression	destInput -> findLink ( srcRegionName , outputName )
>1470	ArgumentList	srcRegionName
>1471	Argument	outputName
>1472	Identifier	outputName
>1473	Argument	srcRegionName
>1474	Identifier	srcRegionName
>1475	Callee	destInput -> findLink
>1476	PtrMemberAccess	destInput -> findLink
>1477	Identifier	findLink
>1478	Identifier	destInput
>1479	Identifier	link
>1480	Identifier	link
>1481	IdentifierDeclType	Link *
>1482	IfStatement	if ( outputName == \"\" )
>1483	ExpressionStatement	 
>1484	AssignmentExpr	outputName = srcSpec -> getDefaultOutputName ( )
>1485	CallExpression	srcSpec -> getDefaultOutputName ( )
>1486	ArgumentList	 
>1487	Callee	srcSpec -> getDefaultOutputName
>1488	PtrMemberAccess	srcSpec -> getDefaultOutputName
>1489	Identifier	getDefaultOutputName
>1490	Identifier	srcSpec
>1491	Identifier	outputName
>1492	Condition	 
>1493	EqualityExpression	outputName == \"\"
>1494	PrimaryExpression	\"\"
>1495	Identifier	outputName
>1496	IdentifierDeclStatement	 
>1497	IdentifierDecl	outputName = srcOutputName
>1498	AssignmentExpr	outputName = srcOutputName
>1499	Identifier	srcOutputName
>1500	Identifier	srcOutputName
>1501	Identifier	outputName
>1502	IdentifierDeclType	std 
>1503	IfStatement	if ( destInput == NULL )
>1504	CompoundStatement	 
>1505	ExpressionStatement	 
>1506	ShiftExpression	NTA_THROW << \"Network
>1507	ShiftExpression	\"Network
>1508	ShiftExpression	inputName << \" does not exist on region \" << destRegionName
>1509	ShiftExpression	\" does not exist on region \" << destRegionName
>1510	Identifier	destRegionName
>1511	PrimaryExpression	\" does not exist on region \"
>1512	Identifier	inputName
>1513	PrimaryExpression	\"Network
>1514	Identifier	NTA_THROW
>1515	Condition	 
>1516	EqualityExpression	destInput == NULL
>1517	Identifier	NULL
>1518	Identifier	destInput
>1519	IdentifierDeclStatement	 
>1520	IdentifierDecl	* destInput = destRegion -> getInput ( inputName )
>1521	AssignmentExpr	* destInput = destRegion -> getInput ( inputName )
>1522	CallExpression	destRegion -> getInput ( inputName )
>1523	ArgumentList	inputName
>1524	Argument	inputName
>1525	Identifier	inputName
>1526	Callee	destRegion -> getInput
>1527	PtrMemberAccess	destRegion -> getInput
>1528	Identifier	getInput
>1529	Identifier	destRegion
>1530	Identifier	destInput
>1531	Identifier	destInput
>1532	IdentifierDeclType	Input *
>1533	IfStatement	if ( destInputName == \"\" )
>1534	ElseStatement	else
>1535	ExpressionStatement	 
>1536	AssignmentExpr	inputName = destInputName
>1537	Identifier	destInputName
>1538	Identifier	inputName
>1539	ExpressionStatement	 
>1540	AssignmentExpr	inputName = destSpec -> getDefaultInputName ( )
>1541	CallExpression	destSpec -> getDefaultInputName ( )
>1542	ArgumentList	 
>1543	Callee	destSpec -> getDefaultInputName
>1544	PtrMemberAccess	destSpec -> getDefaultInputName
>1545	Identifier	getDefaultInputName
>1546	Identifier	destSpec
>1547	Identifier	inputName
>1548	Condition	 
>1549	EqualityExpression	destInputName == \"\"
>1550	PrimaryExpression	\"\"
>1551	Identifier	destInputName
>1552	IdentifierDeclStatement	 
>1553	IdentifierDecl	inputName
>1554	Identifier	inputName
>1555	IdentifierDeclType	std 
>1556	IdentifierDeclStatement	 
>1557	IdentifierDecl	* destSpec = destRegion -> getSpec ( )
>1558	AssignmentExpr	* destSpec = destRegion -> getSpec ( )
>1559	CallExpression	destRegion -> getSpec ( )
>1560	ArgumentList	 
>1561	Callee	destRegion -> getSpec
>1562	PtrMemberAccess	destRegion -> getSpec
>1563	Identifier	getSpec
>1564	Identifier	destRegion
>1565	Identifier	destSpec
>1566	Identifier	destSpec
>1567	IdentifierDeclType	const Spec *
>1568	IdentifierDeclStatement	 
>1569	IdentifierDecl	* srcSpec = srcRegion -> getSpec ( )
>1570	AssignmentExpr	* srcSpec = srcRegion -> getSpec ( )
>1571	CallExpression	srcRegion -> getSpec ( )
>1572	ArgumentList	 
>1573	Callee	srcRegion -> getSpec
>1574	PtrMemberAccess	srcRegion -> getSpec
>1575	Identifier	getSpec
>1576	Identifier	srcRegion
>1577	Identifier	srcSpec
>1578	Identifier	srcSpec
>1579	IdentifierDeclType	const Spec *
>1580	IdentifierDeclStatement	 
>1581	IdentifierDecl	* destRegion = regions_ . getByName ( destRegionName )
>1582	AssignmentExpr	* destRegion = regions_ . getByName ( destRegionName )
>1583	CallExpression	regions_ . getByName ( destRegionName )
>1584	ArgumentList	destRegionName
>1585	Argument	destRegionName
>1586	Identifier	destRegionName
>1587	Callee	regions_ . getByName
>1588	MemberAccess	regions_ . getByName
>1589	Identifier	getByName
>1590	Identifier	regions_
>1591	Identifier	destRegion
>1592	Identifier	destRegion
>1593	IdentifierDeclType	Region *
>1594	IfStatement	if ( ! regions_ . contains ( destRegionName ) )
>1595	ExpressionStatement	 
>1596	ShiftExpression	NTA_THROW << \"Network
>1597	ShiftExpression	\"Network
>1598	ShiftExpression	destRegionName << \"' does not exist\"
>1599	PrimaryExpression	\"' does not exist\"
>1600	Identifier	destRegionName
>1601	PrimaryExpression	\"Network
>1602	Identifier	NTA_THROW
>1603	Condition	 
>1604	UnaryOp	! regions_ . contains ( destRegionName )
>1605	CallExpression	regions_ . contains ( destRegionName )
>1606	ArgumentList	destRegionName
>1607	Argument	destRegionName
>1608	Identifier	destRegionName
>1609	Callee	regions_ . contains
>1610	MemberAccess	regions_ . contains
>1611	Identifier	contains
>1612	Identifier	regions_
>1613	UnaryOperator	!
>1614	IdentifierDeclStatement	 
>1615	IdentifierDecl	* srcRegion = regions_ . getByName ( srcRegionName )
>1616	AssignmentExpr	* srcRegion = regions_ . getByName ( srcRegionName )
>1617	CallExpression	regions_ . getByName ( srcRegionName )
>1618	ArgumentList	srcRegionName
>1619	Argument	srcRegionName
>1620	Identifier	srcRegionName
>1621	Callee	regions_ . getByName
>1622	MemberAccess	regions_ . getByName
>1623	Identifier	getByName
>1624	Identifier	regions_
>1625	Identifier	srcRegion
>1626	Identifier	srcRegion
>1627	IdentifierDeclType	Region *
>1628	IfStatement	if ( ! regions_ . contains ( srcRegionName ) )
>1629	ExpressionStatement	 
>1630	ShiftExpression	NTA_THROW << \"Network
>1631	ShiftExpression	\"Network
>1632	ShiftExpression	srcRegionName << \"' does not exist\"
>1633	PrimaryExpression	\"' does not exist\"
>1634	Identifier	srcRegionName
>1635	PrimaryExpression	\"Network
>1636	Identifier	NTA_THROW
>1637	Condition	 
>1638	UnaryOp	! regions_ . contains ( srcRegionName )
>1639	CallExpression	regions_ . contains ( srcRegionName )
>1640	ArgumentList	srcRegionName
>1641	Argument	srcRegionName
>1642	Identifier	srcRegionName
>1643	Callee	regions_ . contains
>1644	MemberAccess	regions_ . contains
>1645	Identifier	contains
>1646	Identifier	regions_
>1647	UnaryOperator	!
>1678	FunctionDef	Network 
>1679	ParameterList	int n
>1680	Parameter	 
>1681	Identifier	n
>1682	ParameterType	int
>1683	ReturnType	void
>1684	CompoundStatement	 
>1685	ReturnStatement	 
>1686	ForStatement	for ( int iter = 0 ; iter < n ; iter ++ )
>1687	CompoundStatement	 
>1688	ForStatement	for ( UInt32 i = 0 ; i < callbacks_ . getCount ( ) ; i ++ )
>1689	CompoundStatement	 
>1690	ExpressionStatement	 
>1691	CallExpression	callback . second . first ( this , iteration_ , callback . second . second )
>1692	ArgumentList	this
>1693	Argument	callback . second . second
>1694	MemberAccess	callback . second . second
>1695	Identifier	second
>1696	MemberAccess	callback . second
>1697	Identifier	second
>1698	Identifier	callback
>1699	Argument	iteration_
>1700	Identifier	iteration_
>1701	Argument	this
>1702	Identifier	this
>1703	Callee	callback . second . first
>1704	MemberAccess	callback . second . first
>1705	Identifier	first
>1706	MemberAccess	callback . second
>1707	Identifier	second
>1708	Identifier	callback
>1709	IdentifierDeclStatement	 
>1710	IdentifierDecl	& callback = callbacks_ . getByIndex ( i )
>1711	AssignmentExpr	& callback = callbacks_ . getByIndex ( i )
>1712	CallExpression	callbacks_ . getByIndex ( i )
>1713	ArgumentList	i
>1714	Argument	i
>1715	Identifier	i
>1716	Callee	callbacks_ . getByIndex
>1717	MemberAccess	callbacks_ . getByIndex
>1718	Identifier	getByIndex
>1719	Identifier	callbacks_
>1720	Identifier	callback
>1721	Identifier	callback
>1722	IdentifierDeclType	std 
>1723	IncDecOp	 
>1724	IncDec	++
>1725	Identifier	i
>1726	Condition	 
>1727	RelationalExpression	i < callbacks_ . getCount ( )
>1728	CallExpression	callbacks_ . getCount ( )
>1729	ArgumentList	 
>1730	Callee	callbacks_ . getCount
>1731	MemberAccess	callbacks_ . getCount
>1732	Identifier	getCount
>1733	Identifier	callbacks_
>1734	Identifier	i
>1735	ForInit	 
>1736	IdentifierDeclStatement	UInt32 i = 0 ;
>1737	IdentifierDecl	i = 0
>1738	AssignmentExpr	i = 0
>1739	PrimaryExpression	0
>1740	Identifier	i
>1741	Identifier	i
>1742	IdentifierDeclType	UInt32
>1743	ForStatement	for ( UInt32 phase = minEnabledPhase_ ; phase <= maxEnabledPhase_ ; phase ++ )
>1744	CompoundStatement	 
>1745	ForStatement	for ( std 
>1746	CompoundStatement	 
>1747	ExpressionStatement	 
>1748	CallExpression	r -> compute ( )
>1749	ArgumentList	 
>1750	Callee	r -> compute
>1751	PtrMemberAccess	r -> compute
>1752	Identifier	compute
>1753	Identifier	r
>1754	ExpressionStatement	 
>1755	CallExpression	r -> prepareInputs ( )
>1756	ArgumentList	 
>1757	Callee	r -> prepareInputs
>1758	PtrMemberAccess	r -> prepareInputs
>1759	Identifier	prepareInputs
>1760	Identifier	r
>1761	IdentifierDeclStatement	 
>1762	IdentifierDecl	* r = * i
>1763	AssignmentExpr	* r = * i
>1764	UnaryOp	* i
>1765	Identifier	i
>1766	UnaryOperator	*
>1767	Identifier	r
>1768	Identifier	r
>1769	IdentifierDeclType	Region *
>1770	IncDecOp	 
>1771	IncDec	++
>1772	Identifier	i
>1773	Condition	 
>1774	EqualityExpression	i != phaseInfo_ [ phase ] . end ( )
>1775	CallExpression	phaseInfo_ [ phase ] . end ( )
>1776	ArgumentList	 
>1777	Callee	phaseInfo_ [ phase ] . end
>1778	MemberAccess	phaseInfo_ [ phase ] . end
>1779	Identifier	end
>1780	ArrayIndexing	phaseInfo_ [ phase ]
>1781	Identifier	phase
>1782	Identifier	phaseInfo_
>1783	Identifier	i
>1784	ForInit	 
>1785	IdentifierDeclStatement	std 
>1786	IdentifierDecl	i = phaseInfo_ [ phase ] . begin ( )
>1787	AssignmentExpr	i = phaseInfo_ [ phase ] . begin ( )
>1788	CallExpression	phaseInfo_ [ phase ] . begin ( )
>1789	ArgumentList	 
>1790	Callee	phaseInfo_ [ phase ] . begin
>1791	MemberAccess	phaseInfo_ [ phase ] . begin
>1792	Identifier	begin
>1793	ArrayIndexing	phaseInfo_ [ phase ]
>1794	Identifier	phase
>1795	Identifier	phaseInfo_
>1796	Identifier	i
>1797	Identifier	i
>1798	IdentifierDeclType	std 
>1799	IncDecOp	 
>1800	IncDec	++
>1801	Identifier	phase
>1802	Condition	 
>1803	RelationalExpression	phase <= maxEnabledPhase_
>1804	Identifier	maxEnabledPhase_
>1805	Identifier	phase
>1806	ForInit	 
>1807	IdentifierDeclStatement	UInt32 phase = minEnabledPhase_ ;
>1808	IdentifierDecl	phase = minEnabledPhase_
>1809	AssignmentExpr	phase = minEnabledPhase_
>1810	Identifier	minEnabledPhase_
>1811	Identifier	minEnabledPhase_
>1812	Identifier	phase
>1813	IdentifierDeclType	UInt32
>1814	ExpressionStatement	 
>1815	IncDecOp	iteration_ ++
>1816	IncDec	++
>1817	Identifier	iteration_
>1818	IncDecOp	 
>1819	IncDec	++
>1820	Identifier	iter
>1821	Condition	 
>1822	RelationalExpression	iter < n
>1823	Identifier	n
>1824	Identifier	iter
>1825	ForInit	 
>1826	IdentifierDeclStatement	int iter = 0 ;
>1827	IdentifierDecl	iter = 0
>1828	AssignmentExpr	iter = 0
>1829	PrimaryExpression	0
>1830	Identifier	iter
>1831	Identifier	iter
>1832	IdentifierDeclType	int
>1833	ExpressionStatement	 
>1834	ShiftExpression	NTA_CHECK ( maxEnabledPhase_ < phaseInfo_ . size ( ) ) << \"maxphase
>1835	ShiftExpression	\"maxphase
>1836	ShiftExpression	maxEnabledPhase_ << \" size
>1837	ShiftExpression	\" size
>1838	CallExpression	phaseInfo_ . size ( )
>1839	ArgumentList	 
>1840	Callee	phaseInfo_ . size
>1841	MemberAccess	phaseInfo_ . size
>1842	Identifier	size
>1843	Identifier	phaseInfo_
>1844	PrimaryExpression	\" size
>1845	Identifier	maxEnabledPhase_
>1846	PrimaryExpression	\"maxphase
>1847	CallExpression	NTA_CHECK ( maxEnabledPhase_ < phaseInfo_ . size ( ) )
>1848	ArgumentList	maxEnabledPhase_ < phaseInfo_ . size ( )
>1849	Argument	maxEnabledPhase_ < phaseInfo_ . size ( )
>1850	RelationalExpression	maxEnabledPhase_ < phaseInfo_ . size ( )
>1851	CallExpression	phaseInfo_ . size ( )
>1852	ArgumentList	 
>1853	Callee	phaseInfo_ . size
>1854	MemberAccess	phaseInfo_ . size
>1855	Identifier	size
>1856	Identifier	phaseInfo_
>1857	Identifier	maxEnabledPhase_
>1858	Callee	NTA_CHECK
>1859	Identifier	NTA_CHECK
>1860	IfStatement	if ( phaseInfo_ . size ( ) == 0 )
>1861	ReturnStatement	 
>1862	Condition	 
>1863	EqualityExpression	phaseInfo_ . size ( ) == 0
>1864	PrimaryExpression	0
>1865	CallExpression	phaseInfo_ . size ( )
>1866	ArgumentList	 
>1867	Callee	phaseInfo_ . size
>1868	MemberAccess	phaseInfo_ . size
>1869	Identifier	size
>1870	Identifier	phaseInfo_
>1871	IfStatement	if ( ! initialized_ )
>1872	CompoundStatement	 
>1873	ExpressionStatement	 
>1874	CallExpression	initialize ( )
>1875	ArgumentList	 
>1876	Callee	initialize
>1877	Identifier	initialize
>1878	Condition	 
>1879	UnaryOp	! initialized_
>1880	Identifier	initialized_
>1881	UnaryOperator	!
>1908	FunctionDef	Network 
>1909	ParameterList	 
>1910	ReturnType	void
>1911	CompoundStatement	 
>1912	ExpressionStatement	 
>1913	AssignmentExpr	initialized_ = true
>1914	Identifier	true
>1915	Identifier	initialized_
>1916	ExpressionStatement	 
>1917	CallExpression	resetEnabledPhases_ ( )
>1918	ArgumentList	 
>1919	Callee	resetEnabledPhases_
>1920	Identifier	resetEnabledPhases_
>1921	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>1922	CompoundStatement	 
>1923	ExpressionStatement	 
>1924	CallExpression	r -> initialize ( )
>1925	ArgumentList	 
>1926	Callee	r -> initialize
>1927	PtrMemberAccess	r -> initialize
>1928	Identifier	initialize
>1929	Identifier	r
>1930	IdentifierDeclStatement	 
>1931	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>1932	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>1933	MemberAccess	regions_ . getByIndex ( i ) . second
>1934	Identifier	second
>1935	CallExpression	regions_ . getByIndex ( i )
>1936	ArgumentList	i
>1937	Argument	i
>1938	Identifier	i
>1939	Callee	regions_ . getByIndex
>1940	MemberAccess	regions_ . getByIndex
>1941	Identifier	getByIndex
>1942	Identifier	regions_
>1943	Identifier	r
>1944	Identifier	r
>1945	IdentifierDeclType	Region *
>1946	IncDecOp	 
>1947	IncDec	++
>1948	Identifier	i
>1949	Condition	 
>1950	RelationalExpression	i < regions_ . getCount ( )
>1951	CallExpression	regions_ . getCount ( )
>1952	ArgumentList	 
>1953	Callee	regions_ . getCount
>1954	MemberAccess	regions_ . getCount
>1955	Identifier	getCount
>1956	Identifier	regions_
>1957	Identifier	i
>1958	ForInit	 
>1959	IdentifierDeclStatement	size_t i = 0 ;
>1960	IdentifierDecl	i = 0
>1961	AssignmentExpr	i = 0
>1962	PrimaryExpression	0
>1963	Identifier	i
>1964	Identifier	i
>1965	IdentifierDeclType	size_t
>1966	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>1967	CompoundStatement	 
>1968	ExpressionStatement	 
>1969	CallExpression	r -> initInputs ( )
>1970	ArgumentList	 
>1971	Callee	r -> initInputs
>1972	PtrMemberAccess	r -> initInputs
>1973	Identifier	initInputs
>1974	Identifier	r
>1975	IdentifierDeclStatement	 
>1976	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>1977	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>1978	MemberAccess	regions_ . getByIndex ( i ) . second
>1979	Identifier	second
>1980	CallExpression	regions_ . getByIndex ( i )
>1981	ArgumentList	i
>1982	Argument	i
>1983	Identifier	i
>1984	Callee	regions_ . getByIndex
>1985	MemberAccess	regions_ . getByIndex
>1986	Identifier	getByIndex
>1987	Identifier	regions_
>1988	Identifier	r
>1989	Identifier	r
>1990	IdentifierDeclType	Region *
>1991	IncDecOp	 
>1992	IncDec	++
>1993	Identifier	i
>1994	Condition	 
>1995	RelationalExpression	i < regions_ . getCount ( )
>1996	CallExpression	regions_ . getCount ( )
>1997	ArgumentList	 
>1998	Callee	regions_ . getCount
>1999	MemberAccess	regions_ . getCount
>2000	Identifier	getCount
>2001	Identifier	regions_
>2002	Identifier	i
>2003	ForInit	 
>2004	IdentifierDeclStatement	size_t i = 0 ;
>2005	IdentifierDecl	i = 0
>2006	AssignmentExpr	i = 0
>2007	PrimaryExpression	0
>2008	Identifier	i
>2009	Identifier	i
>2010	IdentifierDeclType	size_t
>2011	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>2012	CompoundStatement	 
>2013	ExpressionStatement	 
>2014	CallExpression	r -> initOutputs ( )
>2015	ArgumentList	 
>2016	Callee	r -> initOutputs
>2017	PtrMemberAccess	r -> initOutputs
>2018	Identifier	initOutputs
>2019	Identifier	r
>2020	IdentifierDeclStatement	 
>2021	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>2022	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>2023	MemberAccess	regions_ . getByIndex ( i ) . second
>2024	Identifier	second
>2025	CallExpression	regions_ . getByIndex ( i )
>2026	ArgumentList	i
>2027	Argument	i
>2028	Identifier	i
>2029	Callee	regions_ . getByIndex
>2030	MemberAccess	regions_ . getByIndex
>2031	Identifier	getByIndex
>2032	Identifier	regions_
>2033	Identifier	r
>2034	Identifier	r
>2035	IdentifierDeclType	Region *
>2036	IncDecOp	 
>2037	IncDec	++
>2038	Identifier	i
>2039	Condition	 
>2040	RelationalExpression	i < regions_ . getCount ( )
>2041	CallExpression	regions_ . getCount ( )
>2042	ArgumentList	 
>2043	Callee	regions_ . getCount
>2044	MemberAccess	regions_ . getCount
>2045	Identifier	getCount
>2046	Identifier	regions_
>2047	Identifier	i
>2048	ForInit	 
>2049	IdentifierDeclStatement	size_t i = 0 ;
>2050	IdentifierDecl	i = 0
>2051	AssignmentExpr	i = 0
>2052	PrimaryExpression	0
>2053	Identifier	i
>2054	Identifier	i
>2055	IdentifierDeclType	size_t
>2056	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>2057	CompoundStatement	 
>2058	IfStatement	if ( ! d . isValid ( ) )
>2059	CompoundStatement	 
>2060	ExpressionStatement	 
>2061	ShiftExpression	NTA_THROW << \"Network
>2062	ShiftExpression	\"Network
>2063	ShiftExpression	d . toString ( ) << \" for Region \" << r -> getName ( )
>2064	ShiftExpression	\" for Region \" << r -> getName ( )
>2065	CallExpression	r -> getName ( )
>2066	ArgumentList	 
>2067	Callee	r -> getName
>2068	PtrMemberAccess	r -> getName
>2069	Identifier	getName
>2070	Identifier	r
>2071	PrimaryExpression	\" for Region \"
>2072	CallExpression	d . toString ( )
>2073	ArgumentList	 
>2074	Callee	d . toString
>2075	MemberAccess	d . toString
>2076	Identifier	toString
>2077	Identifier	d
>2078	PrimaryExpression	\"Network
>2079	Identifier	NTA_THROW
>2080	Condition	 
>2081	UnaryOp	! d . isValid ( )
>2082	CallExpression	d . isValid ( )
>2083	ArgumentList	 
>2084	Callee	d . isValid
>2085	MemberAccess	d . isValid
>2086	Identifier	isValid
>2087	Identifier	d
>2088	UnaryOperator	!
>2089	IfStatement	if ( d . isUnspecified ( ) )
>2090	CompoundStatement	 
>2091	ExpressionStatement	 
>2092	ShiftExpression	NTA_THROW << \"Network
>2093	ShiftExpression	\"Network
>2094	ShiftExpression	\"because region '\" << r -> getName ( ) << \"' has unspecified \" << \"dimensions. You must either specify \
>2095	ShiftExpression	r -> getName ( ) << \"' has unspecified \" << \"dimensions. You must either specify dimensions directly \
>2096	ShiftExpression	\"' has unspecified \" << \"dimensions. You must either specify dimensions directly or \" << \"link to the \
>2097	ShiftExpression	\"dimensions. You must either specify dimensions directly or \" << \"link to the region in a way that induces \
>2098	PrimaryExpression	\"link to the region in a way that induces dimensions on the region.\"
>2099	PrimaryExpression	\"dimensions. You must either specify dimensions directly or \"
>2100	PrimaryExpression	\"' has unspecified \"
>2101	CallExpression	r -> getName ( )
>2102	ArgumentList	 
>2103	Callee	r -> getName
>2104	PtrMemberAccess	r -> getName
>2105	Identifier	getName
>2106	Identifier	r
>2107	PrimaryExpression	\"because region '\"
>2108	PrimaryExpression	\"Network
>2109	Identifier	NTA_THROW
>2110	Condition	 
>2111	CallExpression	d . isUnspecified ( )
>2112	ArgumentList	 
>2113	Callee	d . isUnspecified
>2114	MemberAccess	d . isUnspecified
>2115	Identifier	isUnspecified
>2116	Identifier	d
>2117	IdentifierDeclStatement	 
>2118	IdentifierDecl	& d = r -> getDimensions ( )
>2119	AssignmentExpr	& d = r -> getDimensions ( )
>2120	CallExpression	r -> getDimensions ( )
>2121	ArgumentList	 
>2122	Callee	r -> getDimensions
>2123	PtrMemberAccess	r -> getDimensions
>2124	Identifier	getDimensions
>2125	Identifier	r
>2126	Identifier	d
>2127	Identifier	d
>2128	IdentifierDeclType	const Dimensions &
>2129	IdentifierDeclStatement	 
>2130	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>2131	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>2132	MemberAccess	regions_ . getByIndex ( i ) . second
>2133	Identifier	second
>2134	CallExpression	regions_ . getByIndex ( i )
>2135	ArgumentList	i
>2136	Argument	i
>2137	Identifier	i
>2138	Callee	regions_ . getByIndex
>2139	MemberAccess	regions_ . getByIndex
>2140	Identifier	getByIndex
>2141	Identifier	regions_
>2142	Identifier	r
>2143	Identifier	r
>2144	IdentifierDeclType	Region *
>2145	IncDecOp	 
>2146	IncDec	++
>2147	Identifier	i
>2148	Condition	 
>2149	RelationalExpression	i < regions_ . getCount ( )
>2150	CallExpression	regions_ . getCount ( )
>2151	ArgumentList	 
>2152	Callee	regions_ . getCount
>2153	MemberAccess	regions_ . getCount
>2154	Identifier	getCount
>2155	Identifier	regions_
>2156	Identifier	i
>2157	ForInit	 
>2158	IdentifierDeclStatement	size_t i = 0 ;
>2159	IdentifierDecl	i = 0
>2160	AssignmentExpr	i = 0
>2161	PrimaryExpression	0
>2162	Identifier	i
>2163	Identifier	i
>2164	IdentifierDeclType	size_t
>2165	IfStatement	if ( nLinksRemaining > 0 )
>2166	CompoundStatement	 
>2167	ExpressionStatement	 
>2168	ShiftExpression	NTA_THROW << ss . str ( )
>2169	CallExpression	ss . str ( )
>2170	ArgumentList	 
>2171	Callee	ss . str
>2172	MemberAccess	ss . str
>2173	Identifier	str
>2174	Identifier	ss
>2175	Identifier	NTA_THROW
>2176	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>2177	CompoundStatement	 
>2178	ExpressionStatement	 
>2179	ShiftExpression	ss << errors << \"\n\"
>2180	ShiftExpression	errors << \"\n\"
>2181	PrimaryExpression	\"\n\"
>2182	Identifier	errors
>2183	Identifier	ss
>2184	IfStatement	if ( errors . size ( ) == 0 )
>2185	ContinueStatement	 
>2186	Condition	 
>2187	EqualityExpression	errors . size ( ) == 0
>2188	PrimaryExpression	0
>2189	CallExpression	errors . size ( )
>2190	ArgumentList	 
>2191	Callee	errors . size
>2192	MemberAccess	errors . size
>2193	Identifier	size
>2194	Identifier	errors
>2195	IdentifierDeclStatement	 
>2196	IdentifierDecl	errors = r -> getLinkErrors ( )
>2197	AssignmentExpr	errors = r -> getLinkErrors ( )
>2198	CallExpression	r -> getLinkErrors ( )
>2199	ArgumentList	 
>2200	Callee	r -> getLinkErrors
>2201	PtrMemberAccess	r -> getLinkErrors
>2202	Identifier	getLinkErrors
>2203	Identifier	r
>2204	Identifier	errors
>2205	Identifier	errors
>2206	IdentifierDeclType	std 
>2207	IdentifierDeclStatement	 
>2208	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>2209	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>2210	MemberAccess	regions_ . getByIndex ( i ) . second
>2211	Identifier	second
>2212	CallExpression	regions_ . getByIndex ( i )
>2213	ArgumentList	i
>2214	Argument	i
>2215	Identifier	i
>2216	Callee	regions_ . getByIndex
>2217	MemberAccess	regions_ . getByIndex
>2218	Identifier	getByIndex
>2219	Identifier	regions_
>2220	Identifier	r
>2221	Identifier	r
>2222	IdentifierDeclType	Region *
>2223	IncDecOp	 
>2224	IncDec	++
>2225	Identifier	i
>2226	Condition	 
>2227	RelationalExpression	i < regions_ . getCount ( )
>2228	CallExpression	regions_ . getCount ( )
>2229	ArgumentList	 
>2230	Callee	regions_ . getCount
>2231	MemberAccess	regions_ . getCount
>2232	Identifier	getCount
>2233	Identifier	regions_
>2234	Identifier	i
>2235	ForInit	 
>2236	IdentifierDeclStatement	size_t i = 0 ;
>2237	IdentifierDecl	i = 0
>2238	AssignmentExpr	i = 0
>2239	PrimaryExpression	0
>2240	Identifier	i
>2241	Identifier	i
>2242	IdentifierDeclType	size_t
>2243	ExpressionStatement	 
>2244	ShiftExpression	ss << \"Network
>2245	ShiftExpression	\"Network
>2246	PrimaryExpression	\"The following links could not be evaluated
>2247	PrimaryExpression	\"Network
>2248	Identifier	ss
>2249	IdentifierDeclStatement	 
>2250	IdentifierDecl	ss
>2251	Identifier	ss
>2252	IdentifierDeclType	std 
>2253	Condition	 
>2254	RelationalExpression	nLinksRemaining > 0
>2255	PrimaryExpression	0
>2256	Identifier	nLinksRemaining
>2257	WhileStatement	while ( nLinksRemaining > 0 && nLinksRemainingPrev > nLinksRemaining )
>2258	CompoundStatement	 
>2259	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>2260	CompoundStatement	 
>2261	ExpressionStatement	 
>2262	AssignmentExpr	nLinksRemaining += r -> evaluateLinks ( )
>2263	CallExpression	r -> evaluateLinks ( )
>2264	ArgumentList	 
>2265	Callee	r -> evaluateLinks
>2266	PtrMemberAccess	r -> evaluateLinks
>2267	Identifier	evaluateLinks
>2268	Identifier	r
>2269	Identifier	nLinksRemaining
>2270	IdentifierDeclStatement	 
>2271	IdentifierDecl	* r = regions_ . getByIndex ( i ) . second
>2272	AssignmentExpr	* r = regions_ . getByIndex ( i ) . second
>2273	MemberAccess	regions_ . getByIndex ( i ) . second
>2274	Identifier	second
>2275	CallExpression	regions_ . getByIndex ( i )
>2276	ArgumentList	i
>2277	Argument	i
>2278	Identifier	i
>2279	Callee	regions_ . getByIndex
>2280	MemberAccess	regions_ . getByIndex
>2281	Identifier	getByIndex
>2282	Identifier	regions_
>2283	Identifier	r
>2284	Identifier	r
>2285	IdentifierDeclType	Region *
>2286	IncDecOp	 
>2287	IncDec	++
>2288	Identifier	i
>2289	Condition	 
>2290	RelationalExpression	i < regions_ . getCount ( )
>2291	CallExpression	regions_ . getCount ( )
>2292	ArgumentList	 
>2293	Callee	regions_ . getCount
>2294	MemberAccess	regions_ . getCount
>2295	Identifier	getCount
>2296	Identifier	regions_
>2297	Identifier	i
>2298	ForInit	 
>2299	IdentifierDeclStatement	size_t i = 0 ;
>2300	IdentifierDecl	i = 0
>2301	AssignmentExpr	i = 0
>2302	PrimaryExpression	0
>2303	Identifier	i
>2304	Identifier	i
>2305	IdentifierDeclType	size_t
>2306	ExpressionStatement	 
>2307	AssignmentExpr	nLinksRemaining = 0
>2308	PrimaryExpression	0
>2309	Identifier	nLinksRemaining
>2310	ExpressionStatement	 
>2311	AssignmentExpr	nLinksRemainingPrev = nLinksRemaining
>2312	Identifier	nLinksRemaining
>2313	Identifier	nLinksRemainingPrev
>2314	Condition	 
>2315	AndExpression	nLinksRemaining > 0 && nLinksRemainingPrev > nLinksRemaining
>2316	RelationalExpression	nLinksRemainingPrev > nLinksRemaining
>2317	Identifier	nLinksRemaining
>2318	Identifier	nLinksRemainingPrev
>2319	RelationalExpression	nLinksRemaining > 0
>2320	PrimaryExpression	0
>2321	Identifier	nLinksRemaining
>2322	IdentifierDeclStatement	 
>2323	IdentifierDecl	r
>2324	Identifier	r
>2325	IdentifierDeclType	std 
>2326	IdentifierDeclStatement	 
>2327	IdentifierDecl	nLinksRemaining = nLinksRemainingPrev - 1
>2328	AssignmentExpr	nLinksRemaining = nLinksRemainingPrev - 1
>2329	AdditiveExpression	nLinksRemainingPrev - 1
>2330	PrimaryExpression	1
>2331	Identifier	nLinksRemainingPrev
>2332	Identifier	nLinksRemaining
>2333	Identifier	nLinksRemaining
>2334	IdentifierDeclType	size_t
>2335	ExpressionStatement	 
>2336	CallExpression	max ( )
>2337	ArgumentList	 
>2338	Callee	max
>2339	Identifier	max
>2340	Statement	 
>2341	Statement	 
>2342	Statement	 
>2343	Statement	 
>2344	Statement	 
>2345	Statement	 
>2346	Statement	 
>2347	Statement	 
>2348	Statement	 
>2349	Statement	 
>2350	IfStatement	if ( initialized_ )
>2351	ReturnStatement	 
>2352	Condition	 
>2353	Identifier	initialized_
>2377	FunctionDef	Network 
>2378	ParameterList	 
>2379	ReturnType	const Collection < Region * > &
>2380	CompoundStatement	 
>2381	ReturnStatement	 
>2382	Identifier	regions_
>2387	FunctionDef	Network 
>2388	ParameterList	 
>2389	ReturnType	Collection < Network 
>2390	CompoundStatement	 
>2391	ReturnStatement	 
>2392	Identifier	callbacks_
>2397	FunctionDef	Network 
>2398	ParameterList	 
>2399	ReturnType	UInt32
>2400	CompoundStatement	 
>2401	ReturnStatement	 
>2402	Identifier	i
>2403	ForStatement	for ( ; i < phaseInfo_ . size ( ) ; i ++ )
>2404	CompoundStatement	 
>2405	IfStatement	if ( phaseInfo_ [ i ] . size ( ) > 0 )
>2406	BreakStatement	 
>2407	Condition	 
>2408	RelationalExpression	phaseInfo_ [ i ] . size ( ) > 0
>2409	PrimaryExpression	0
>2410	CallExpression	phaseInfo_ [ i ] . size ( )
>2411	ArgumentList	 
>2412	Callee	phaseInfo_ [ i ] . size
>2413	MemberAccess	phaseInfo_ [ i ] . size
>2414	Identifier	size
>2415	ArrayIndexing	phaseInfo_ [ i ]
>2416	Identifier	i
>2417	Identifier	phaseInfo_
>2418	IncDecOp	 
>2419	IncDec	++
>2420	Identifier	i
>2421	Condition	 
>2422	RelationalExpression	i < phaseInfo_ . size ( )
>2423	CallExpression	phaseInfo_ . size ( )
>2424	ArgumentList	 
>2425	Callee	phaseInfo_ . size
>2426	MemberAccess	phaseInfo_ . size
>2427	Identifier	size
>2428	Identifier	phaseInfo_
>2429	Identifier	i
>2430	IdentifierDeclStatement	 
>2431	IdentifierDecl	i = 0
>2432	AssignmentExpr	i = 0
>2433	PrimaryExpression	0
>2434	Identifier	i
>2435	Identifier	i
>2436	IdentifierDeclType	UInt32
>2446	FunctionDef	Network 
>2447	ParameterList	 
>2448	ReturnType	UInt32
>2449	CompoundStatement	 
>2450	ReturnStatement	 
>2451	AdditiveExpression	phaseInfo_ . size ( ) - 1
>2452	PrimaryExpression	1
>2453	CallExpression	phaseInfo_ . size ( )
>2454	ArgumentList	 
>2455	Callee	phaseInfo_ . size
>2456	MemberAccess	phaseInfo_ . size
>2457	Identifier	size
>2458	Identifier	phaseInfo_
>2459	IfStatement	if ( phaseInfo_ . size ( ) == 0 )
>2460	ReturnStatement	 
>2461	PrimaryExpression	0
>2462	Condition	 
>2463	EqualityExpression	phaseInfo_ . size ( ) == 0
>2464	PrimaryExpression	0
>2465	CallExpression	phaseInfo_ . size ( )
>2466	ArgumentList	 
>2467	Callee	phaseInfo_ . size
>2468	MemberAccess	phaseInfo_ . size
>2469	Identifier	size
>2470	Identifier	phaseInfo_
>2476	FunctionDef	Network 
>2477	ParameterList	UInt32 minPhase
>2478	Parameter	 
>2479	Identifier	minPhase
>2480	ParameterType	UInt32
>2481	ReturnType	void
>2482	CompoundStatement	 
>2483	ExpressionStatement	 
>2484	AssignmentExpr	minEnabledPhase_ = minPhase
>2485	Identifier	minPhase
>2486	Identifier	minEnabledPhase_
>2487	IfStatement	if ( minPhase >= phaseInfo_ . size ( ) )
>2488	ExpressionStatement	 
>2489	ShiftExpression	NTA_THROW << \"Attempt to set min enabled phase \" << minPhase << \" which is larger than the highest phase \
>2490	ShiftExpression	\"Attempt to set min enabled phase \" << minPhase << \" which is larger than the highest phase in the network \
>2491	ShiftExpression	minPhase << \" which is larger than the highest phase in the network - \" << phaseInfo_ . size ( ) - 1
>2492	ShiftExpression	\" which is larger than the highest phase in the network - \" << phaseInfo_ . size ( ) - 1
>2493	AdditiveExpression	phaseInfo_ . size ( ) - 1
>2494	PrimaryExpression	1
>2495	CallExpression	phaseInfo_ . size ( )
>2496	ArgumentList	 
>2497	Callee	phaseInfo_ . size
>2498	MemberAccess	phaseInfo_ . size
>2499	Identifier	size
>2500	Identifier	phaseInfo_
>2501	PrimaryExpression	\" which is larger than the highest phase in the network - \"
>2502	Identifier	minPhase
>2503	PrimaryExpression	\"Attempt to set min enabled phase \"
>2504	Identifier	NTA_THROW
>2505	Condition	 
>2506	RelationalExpression	minPhase >= phaseInfo_ . size ( )
>2507	CallExpression	phaseInfo_ . size ( )
>2508	ArgumentList	 
>2509	Callee	phaseInfo_ . size
>2510	MemberAccess	phaseInfo_ . size
>2511	Identifier	size
>2512	Identifier	phaseInfo_
>2513	Identifier	minPhase
>2521	FunctionDef	Network 
>2522	ParameterList	UInt32 maxPhase
>2523	Parameter	 
>2524	Identifier	maxPhase
>2525	ParameterType	UInt32
>2526	ReturnType	void
>2527	CompoundStatement	 
>2528	ExpressionStatement	 
>2529	AssignmentExpr	maxEnabledPhase_ = maxPhase
>2530	Identifier	maxPhase
>2531	Identifier	maxEnabledPhase_
>2532	IfStatement	if ( maxPhase >= phaseInfo_ . size ( ) )
>2533	ExpressionStatement	 
>2534	ShiftExpression	NTA_THROW << \"Attempt to set max enabled phase \" << maxPhase << \" which is larger than the highest phase \
>2535	ShiftExpression	\"Attempt to set max enabled phase \" << maxPhase << \" which is larger than the highest phase in the network \
>2536	ShiftExpression	maxPhase << \" which is larger than the highest phase in the network - \" << phaseInfo_ . size ( ) - 1
>2537	ShiftExpression	\" which is larger than the highest phase in the network - \" << phaseInfo_ . size ( ) - 1
>2538	AdditiveExpression	phaseInfo_ . size ( ) - 1
>2539	PrimaryExpression	1
>2540	CallExpression	phaseInfo_ . size ( )
>2541	ArgumentList	 
>2542	Callee	phaseInfo_ . size
>2543	MemberAccess	phaseInfo_ . size
>2544	Identifier	size
>2545	Identifier	phaseInfo_
>2546	PrimaryExpression	\" which is larger than the highest phase in the network - \"
>2547	Identifier	maxPhase
>2548	PrimaryExpression	\"Attempt to set max enabled phase \"
>2549	Identifier	NTA_THROW
>2550	Condition	 
>2551	RelationalExpression	maxPhase >= phaseInfo_ . size ( )
>2552	CallExpression	phaseInfo_ . size ( )
>2553	ArgumentList	 
>2554	Callee	phaseInfo_ . size
>2555	MemberAccess	phaseInfo_ . size
>2556	Identifier	size
>2557	Identifier	phaseInfo_
>2558	Identifier	maxPhase
>2566	FunctionDef	Network 
>2567	ParameterList	 
>2568	ReturnType	UInt32
>2569	CompoundStatement	 
>2570	ReturnStatement	 
>2571	Identifier	minEnabledPhase_
>2576	FunctionDef	Network 
>2577	ParameterList	 
>2578	ReturnType	UInt32
>2579	CompoundStatement	 
>2580	ReturnStatement	 
>2581	Identifier	maxEnabledPhase_
>2586	FunctionDef	Network 
>2587	ParameterList	const std 
>2588	Parameter	 
>2589	Identifier	name
>2590	ParameterType	const std 
>2591	ReturnType	void
>2592	CompoundStatement	 
>2593	IfStatement	if ( StringUtils 
>2594	ElseStatement	else
>2595	IfStatement	if ( StringUtils 
>2596	ElseStatement	else
>2597	CompoundStatement	 
>2598	ExpressionStatement	 
>2599	ShiftExpression	NTA_THROW << \"Network
>2600	ShiftExpression	\"Network
>2601	ShiftExpression	name << \"'. Supported extensions are .tgz and .nta\"
>2602	PrimaryExpression	\"'. Supported extensions are .tgz and .nta\"
>2603	Identifier	name
>2604	PrimaryExpression	\"Network
>2605	Identifier	NTA_THROW
>2606	CompoundStatement	 
>2607	ExpressionStatement	 
>2608	CallExpression	saveToBundle ( name )
>2609	ArgumentList	name
>2610	Argument	name
>2611	Identifier	name
>2612	Callee	saveToBundle
>2613	Identifier	saveToBundle
>2614	Condition	 
>2615	CallExpression	StringUtils 
>2616	ArgumentList	name
>2617	Argument	\".nta\"
>2618	PrimaryExpression	\".nta\"
>2619	Argument	name
>2620	Identifier	name
>2621	Callee	StringUtils 
>2622	Identifier	StringUtils 
>2623	CompoundStatement	 
>2624	ExpressionStatement	 
>2625	ShiftExpression	NTA_THROW << \"Gzipped tar archives (\" << name << \") not yet supported\"
>2626	ShiftExpression	\"Gzipped tar archives (\" << name << \") not yet supported\"
>2627	ShiftExpression	name << \") not yet supported\"
>2628	PrimaryExpression	\") not yet supported\"
>2629	Identifier	name
>2630	PrimaryExpression	\"Gzipped tar archives (\"
>2631	Identifier	NTA_THROW
>2632	Condition	 
>2633	CallExpression	StringUtils 
>2634	ArgumentList	name
>2635	Argument	\".tgz\"
>2636	PrimaryExpression	\".tgz\"
>2637	Argument	name
>2638	Identifier	name
>2639	Callee	StringUtils 
>2640	Identifier	StringUtils 
>2646	FunctionDef	getLabel (size_t index)
>2647	ParameterList	size_t index
>2648	Parameter	 
>2649	Identifier	index
>2650	ParameterType	size_t
>2651	ReturnType	static std 
>2652	CompoundStatement	 
>2653	ReturnStatement	 
>2654	AdditiveExpression	std 
>2655	CallExpression	StringUtils 
>2656	ArgumentList	index
>2657	Argument	index
>2658	Identifier	index
>2659	Callee	StringUtils 
>2660	Identifier	StringUtils 
>2661	CallExpression	std 
>2662	ArgumentList	\"R\"
>2663	Argument	\"R\"
>2664	PrimaryExpression	\"R\"
>2665	Callee	std 
>2666	Identifier	std 
>2673	FunctionDef	Network 
>2674	ParameterList	const std 
>2675	Parameter	 
>2676	Identifier	name
>2677	ParameterType	const std 
>2678	ReturnType	void
>2679	CompoundStatement	 
>2680	ForStatement	for ( size_t regionIndex = 0 ; regionIndex < regions_ . getCount ( ) ; regionIndex ++ )
>2681	CompoundStatement	 
>2682	ExpressionStatement	 
>2683	CallExpression	r -> serializeImpl ( bundle )
>2684	ArgumentList	bundle
>2685	Argument	bundle
>2686	Identifier	bundle
>2687	Callee	r -> serializeImpl
>2688	PtrMemberAccess	r -> serializeImpl
>2689	Identifier	serializeImpl
>2690	Identifier	r
>2691	IdentifierDeclStatement	 
>2692	IdentifierDecl	bundle ( fullPath , label , info . first , false )
>2693	Expression	fullPath , label , info . first , false
>2694	Expression	label , info . first , false
>2695	Expression	info . first , false
>2696	Identifier	false
>2697	MemberAccess	info . first
>2698	Identifier	first
>2699	Identifier	info
>2700	Identifier	label
>2701	Identifier	fullPath
>2702	Identifier	bundle
>2703	IdentifierDeclType	BundleIO
>2704	IdentifierDeclStatement	 
>2705	IdentifierDecl	label = getLabel ( regionIndex )
>2706	AssignmentExpr	label = getLabel ( regionIndex )
>2707	CallExpression	getLabel ( regionIndex )
>2708	ArgumentList	regionIndex
>2709	Argument	regionIndex
>2710	Identifier	regionIndex
>2711	Callee	getLabel
>2712	Identifier	getLabel
>2713	Identifier	label
>2714	Identifier	label
>2715	IdentifierDeclType	std 
>2716	IdentifierDeclStatement	 
>2717	IdentifierDecl	* r = info . second
>2718	AssignmentExpr	* r = info . second
>2719	MemberAccess	info . second
>2720	Identifier	second
>2721	Identifier	info
>2722	Identifier	r
>2723	Identifier	r
>2724	IdentifierDeclType	Region *
>2725	IdentifierDeclStatement	 
>2726	IdentifierDecl	& info = regions_ . getByIndex ( regionIndex )
>2727	AssignmentExpr	& info = regions_ . getByIndex ( regionIndex )
>2728	CallExpression	regions_ . getByIndex ( regionIndex )
>2729	ArgumentList	regionIndex
>2730	Argument	regionIndex
>2731	Identifier	regionIndex
>2732	Callee	regions_ . getByIndex
>2733	MemberAccess	regions_ . getByIndex
>2734	Identifier	getByIndex
>2735	Identifier	regions_
>2736	Identifier	info
>2737	Identifier	info
>2738	IdentifierDeclType	std 
>2739	IncDecOp	 
>2740	IncDec	++
>2741	Identifier	regionIndex
>2742	Condition	 
>2743	RelationalExpression	regionIndex < regions_ . getCount ( )
>2744	CallExpression	regions_ . getCount ( )
>2745	ArgumentList	 
>2746	Callee	regions_ . getCount
>2747	MemberAccess	regions_ . getCount
>2748	Identifier	getCount
>2749	Identifier	regions_
>2750	Identifier	regionIndex
>2751	ForInit	 
>2752	IdentifierDeclStatement	size_t regionIndex = 0 ;
>2753	IdentifierDecl	regionIndex = 0
>2754	AssignmentExpr	regionIndex = 0
>2755	PrimaryExpression	0
>2756	Identifier	regionIndex
>2757	Identifier	regionIndex
>2758	IdentifierDeclType	size_t
>2759	CompoundStatement	 
>2760	ExpressionStatement	 
>2761	CallExpression	f . close ( )
>2762	ArgumentList	 
>2763	Callee	f . close
>2764	MemberAccess	f . close
>2765	Identifier	close
>2766	Identifier	f
>2767	ExpressionStatement	 
>2768	ShiftExpression	f << out . c_str ( )
>2769	CallExpression	out . c_str ( )
>2770	ArgumentList	 
>2771	Callee	out . c_str
>2772	MemberAccess	out . c_str
>2773	Identifier	c_str
>2774	Identifier	out
>2775	Identifier	f
>2776	ExpressionStatement	 
>2777	CallExpression	f . open ( networkStructureFilename . c_str ( ) )
>2778	ArgumentList	networkStructureFilename . c_str ( )
>2779	Argument	networkStructureFilename . c_str ( )
>2780	CallExpression	networkStructureFilename . c_str ( )
>2781	ArgumentList	 
>2782	Callee	networkStructureFilename . c_str
>2783	MemberAccess	networkStructureFilename . c_str
>2784	Identifier	c_str
>2785	Identifier	networkStructureFilename
>2786	Callee	f . open
>2787	MemberAccess	f . open
>2788	Identifier	open
>2789	Identifier	f
>2790	IdentifierDeclStatement	 
>2791	IdentifierDecl	f
>2792	Identifier	f
>2793	IdentifierDeclType	OFStream
>2794	ExpressionStatement	 
>2795	ShiftExpression	out << YAML 
>2796	Identifier	YAML 
>2797	Identifier	out
>2798	ExpressionStatement	 
>2799	ShiftExpression	out << YAML 
>2800	Identifier	YAML 
>2801	Identifier	out
>2802	ForStatement	for ( size_t regionIndex = 0 ; regionIndex < regions_ . getCount ( ) ; regionIndex ++ )
>2803	CompoundStatement	 
>2804	ForStatement	for ( std 
>2805	CompoundStatement	 
>2806	ForStatement	for ( std 
>2807	CompoundStatement	 
>2808	ExpressionStatement	 
>2809	ShiftExpression	out << YAML 
>2810	Identifier	YAML 
>2811	Identifier	out
>2812	ExpressionStatement	 
>2813	ShiftExpression	out << YAML 
>2814	ShiftExpression	YAML 
>2815	ShiftExpression	\"destInput\" << YAML 
>2816	ShiftExpression	YAML 
>2817	CallExpression	l . getDestInputName ( )
>2818	ArgumentList	 
>2819	Callee	l . getDestInputName
>2820	MemberAccess	l . getDestInputName
>2821	Identifier	getDestInputName
>2822	Identifier	l
>2823	Identifier	YAML 
>2824	PrimaryExpression	\"destInput\"
>2825	Identifier	YAML 
>2826	Identifier	out
>2827	ExpressionStatement	 
>2828	ShiftExpression	out << YAML 
>2829	ShiftExpression	YAML 
>2830	ShiftExpression	\"destRegion\" << YAML 
>2831	ShiftExpression	YAML 
>2832	CallExpression	l . getDestRegionName ( )
>2833	ArgumentList	 
>2834	Callee	l . getDestRegionName
>2835	MemberAccess	l . getDestRegionName
>2836	Identifier	getDestRegionName
>2837	Identifier	l
>2838	Identifier	YAML 
>2839	PrimaryExpression	\"destRegion\"
>2840	Identifier	YAML 
>2841	Identifier	out
>2842	ExpressionStatement	 
>2843	ShiftExpression	out << YAML 
>2844	ShiftExpression	YAML 
>2845	ShiftExpression	\"srcOutput\" << YAML 
>2846	ShiftExpression	YAML 
>2847	CallExpression	l . getSrcOutputName ( )
>2848	ArgumentList	 
>2849	Callee	l . getSrcOutputName
>2850	MemberAccess	l . getSrcOutputName
>2851	Identifier	getSrcOutputName
>2852	Identifier	l
>2853	Identifier	YAML 
>2854	PrimaryExpression	\"srcOutput\"
>2855	Identifier	YAML 
>2856	Identifier	out
>2857	ExpressionStatement	 
>2858	ShiftExpression	out << YAML 
>2859	ShiftExpression	YAML 
>2860	ShiftExpression	\"srcRegion\" << YAML 
>2861	ShiftExpression	YAML 
>2862	CallExpression	l . getSrcRegionName ( )
>2863	ArgumentList	 
>2864	Callee	l . getSrcRegionName
>2865	MemberAccess	l . getSrcRegionName
>2866	Identifier	getSrcRegionName
>2867	Identifier	l
>2868	Identifier	YAML 
>2869	PrimaryExpression	\"srcRegion\"
>2870	Identifier	YAML 
>2871	Identifier	out
>2872	ExpressionStatement	 
>2873	ShiftExpression	out << YAML 
>2874	ShiftExpression	YAML 
>2875	ShiftExpression	\"params\" << YAML 
>2876	ShiftExpression	YAML 
>2877	CallExpression	l . getLinkParams ( )
>2878	ArgumentList	 
>2879	Callee	l . getLinkParams
>2880	MemberAccess	l . getLinkParams
>2881	Identifier	getLinkParams
>2882	Identifier	l
>2883	Identifier	YAML 
>2884	PrimaryExpression	\"params\"
>2885	Identifier	YAML 
>2886	Identifier	out
>2887	ExpressionStatement	 
>2888	ShiftExpression	out << YAML 
>2889	ShiftExpression	YAML 
>2890	ShiftExpression	\"type\" << YAML 
>2891	ShiftExpression	YAML 
>2892	CallExpression	l . getLinkType ( )
>2893	ArgumentList	 
>2894	Callee	l . getLinkType
>2895	MemberAccess	l . getLinkType
>2896	Identifier	getLinkType
>2897	Identifier	l
>2898	Identifier	YAML 
>2899	PrimaryExpression	\"type\"
>2900	Identifier	YAML 
>2901	Identifier	out
>2902	ExpressionStatement	 
>2903	ShiftExpression	out << YAML 
>2904	Identifier	YAML 
>2905	Identifier	out
>2906	IdentifierDeclStatement	 
>2907	IdentifierDecl	& l = * ( * link )
>2908	AssignmentExpr	& l = * ( * link )
>2909	UnaryOp	* ( * link )
>2910	UnaryOp	* link
>2911	Identifier	link
>2912	UnaryOperator	*
>2913	UnaryOperator	*
>2914	Identifier	l
>2915	Identifier	l
>2916	IdentifierDeclType	Link &
>2917	IncDecOp	 
>2918	IncDec	++
>2919	Identifier	link
>2920	Condition	 
>2921	EqualityExpression	link != links . end ( )
>2922	CallExpression	links . end ( )
>2923	ArgumentList	 
>2924	Callee	links . end
>2925	MemberAccess	links . end
>2926	Identifier	end
>2927	Identifier	links
>2928	Identifier	link
>2929	ForInit	 
>2930	IdentifierDeclStatement	std 
>2931	IdentifierDecl	link = links . begin ( )
>2932	AssignmentExpr	link = links . begin ( )
>2933	CallExpression	links . begin ( )
>2934	ArgumentList	 
>2935	Callee	links . begin
>2936	MemberAccess	links . begin
>2937	Identifier	begin
>2938	Identifier	links
>2939	Identifier	link
>2940	Identifier	link
>2941	IdentifierDeclType	std 
>2942	IdentifierDeclStatement	 
>2943	IdentifierDecl	& links = input -> second -> getLinks ( )
>2944	AssignmentExpr	& links = input -> second -> getLinks ( )
>2945	CallExpression	input -> second -> getLinks ( )
>2946	ArgumentList	 
>2947	Callee	input -> second -> getLinks
>2948	PtrMemberAccess	input -> second -> getLinks
>2949	Identifier	getLinks
>2950	PtrMemberAccess	input -> second
>2951	Identifier	second
>2952	Identifier	input
>2953	Identifier	links
>2954	Identifier	links
>2955	IdentifierDeclType	const std 
>2956	IncDecOp	 
>2957	IncDec	++
>2958	Identifier	input
>2959	Condition	 
>2960	EqualityExpression	input != inputs . end ( )
>2961	CallExpression	inputs . end ( )
>2962	ArgumentList	 
>2963	Callee	inputs . end
>2964	MemberAccess	inputs . end
>2965	Identifier	end
>2966	Identifier	inputs
>2967	Identifier	input
>2968	ForInit	 
>2969	IdentifierDeclStatement	std 
>2970	IdentifierDecl	input = inputs . begin ( )
>2971	AssignmentExpr	input = inputs . begin ( )
>2972	CallExpression	inputs . begin ( )
>2973	ArgumentList	 
>2974	Callee	inputs . begin
>2975	MemberAccess	inputs . begin
>2976	Identifier	begin
>2977	Identifier	inputs
>2978	Identifier	input
>2979	Identifier	input
>2980	IdentifierDeclType	std 
>2981	IdentifierDeclStatement	 
>2982	IdentifierDecl	inputs = r -> getInputs ( )
>2983	AssignmentExpr	inputs = r -> getInputs ( )
>2984	CallExpression	r -> getInputs ( )
>2985	ArgumentList	 
>2986	Callee	r -> getInputs
>2987	PtrMemberAccess	r -> getInputs
>2988	Identifier	getInputs
>2989	Identifier	r
>2990	Identifier	inputs
>2991	Identifier	inputs
>2992	IdentifierDeclType	const std 
>2993	IdentifierDeclStatement	 
>2994	IdentifierDecl	* r = regions_ . getByIndex ( regionIndex ) . second
>2995	AssignmentExpr	* r = regions_ . getByIndex ( regionIndex ) . second
>2996	MemberAccess	regions_ . getByIndex ( regionIndex ) . second
>2997	Identifier	second
>2998	CallExpression	regions_ . getByIndex ( regionIndex )
>2999	ArgumentList	regionIndex
>3000	Argument	regionIndex
>3001	Identifier	regionIndex
>3002	Callee	regions_ . getByIndex
>3003	MemberAccess	regions_ . getByIndex
>3004	Identifier	getByIndex
>3005	Identifier	regions_
>3006	Identifier	r
>3007	Identifier	r
>3008	IdentifierDeclType	Region *
>3009	IncDecOp	 
>3010	IncDec	++
>3011	Identifier	regionIndex
>3012	Condition	 
>3013	RelationalExpression	regionIndex < regions_ . getCount ( )
>3014	CallExpression	regions_ . getCount ( )
>3015	ArgumentList	 
>3016	Callee	regions_ . getCount
>3017	MemberAccess	regions_ . getCount
>3018	Identifier	getCount
>3019	Identifier	regions_
>3020	Identifier	regionIndex
>3021	ForInit	 
>3022	IdentifierDeclStatement	size_t regionIndex = 0 ;
>3023	IdentifierDecl	regionIndex = 0
>3024	AssignmentExpr	regionIndex = 0
>3025	PrimaryExpression	0
>3026	Identifier	regionIndex
>3027	Identifier	regionIndex
>3028	IdentifierDeclType	size_t
>3029	ExpressionStatement	 
>3030	ShiftExpression	out << YAML 
>3031	ShiftExpression	YAML 
>3032	ShiftExpression	\"Links\" << YAML 
>3033	ShiftExpression	YAML 
>3034	Identifier	YAML 
>3035	Identifier	YAML 
>3036	PrimaryExpression	\"Links\"
>3037	Identifier	YAML 
>3038	Identifier	out
>3039	ExpressionStatement	 
>3040	ShiftExpression	out << YAML 
>3041	Identifier	YAML 
>3042	Identifier	out
>3043	ForStatement	for ( size_t regionIndex = 0 ; regionIndex < regions_ . getCount ( ) ; regionIndex ++ )
>3044	CompoundStatement	 
>3045	ExpressionStatement	 
>3046	ShiftExpression	out << YAML 
>3047	Identifier	YAML 
>3048	Identifier	out
>3049	ExpressionStatement	 
>3050	ShiftExpression	out << YAML 
>3051	ShiftExpression	YAML 
>3052	ShiftExpression	\"label\" << YAML 
>3053	ShiftExpression	YAML 
>3054	CallExpression	getLabel ( regionIndex )
>3055	ArgumentList	regionIndex
>3056	Argument	regionIndex
>3057	Identifier	regionIndex
>3058	Callee	getLabel
>3059	Identifier	getLabel
>3060	Identifier	YAML 
>3061	PrimaryExpression	\"label\"
>3062	Identifier	YAML 
>3063	Identifier	out
>3064	ExpressionStatement	 
>3065	ShiftExpression	out << YAML 
>3066	Identifier	YAML 
>3067	Identifier	out
>3068	ForStatement	for ( std 
>3069	CompoundStatement	 
>3070	ExpressionStatement	 
>3071	ShiftExpression	out << * phase
>3072	UnaryOp	* phase
>3073	Identifier	phase
>3074	UnaryOperator	*
>3075	Identifier	out
>3076	IncDecOp	 
>3077	IncDec	++
>3078	Identifier	phase
>3079	Condition	 
>3080	EqualityExpression	phase != phases . end ( )
>3081	CallExpression	phases . end ( )
>3082	ArgumentList	 
>3083	Callee	phases . end
>3084	MemberAccess	phases . end
>3085	Identifier	end
>3086	Identifier	phases
>3087	Identifier	phase
>3088	ForInit	 
>3089	IdentifierDeclStatement	std 
>3090	IdentifierDecl	phase = phases . begin ( )
>3091	AssignmentExpr	phase = phases . begin ( )
>3092	CallExpression	phases . begin ( )
>3093	ArgumentList	 
>3094	Callee	phases . begin
>3095	MemberAccess	phases . begin
>3096	Identifier	begin
>3097	Identifier	phases
>3098	Identifier	phase
>3099	Identifier	phase
>3100	IdentifierDeclType	std 
>3101	IdentifierDeclStatement	 
>3102	IdentifierDecl	phases = r -> getPhases ( )
>3103	AssignmentExpr	phases = r -> getPhases ( )
>3104	CallExpression	r -> getPhases ( )
>3105	ArgumentList	 
>3106	Callee	r -> getPhases
>3107	PtrMemberAccess	r -> getPhases
>3108	Identifier	getPhases
>3109	Identifier	r
>3110	Identifier	phases
>3111	Identifier	phases
>3112	IdentifierDeclType	std 
>3113	ExpressionStatement	 
>3114	ShiftExpression	out << YAML 
>3115	ShiftExpression	YAML 
>3116	ShiftExpression	\"phases\" << YAML 
>3117	ShiftExpression	YAML 
>3118	Identifier	YAML 
>3119	Identifier	YAML 
>3120	PrimaryExpression	\"phases\"
>3121	Identifier	YAML 
>3122	Identifier	out
>3123	ExpressionStatement	 
>3124	ShiftExpression	out << YAML 
>3125	ShiftExpression	YAML 
>3126	ShiftExpression	\"dimensions\" << YAML 
>3127	ShiftExpression	YAML 
>3128	CallExpression	r -> getDimensions ( )
>3129	ArgumentList	 
>3130	Callee	r -> getDimensions
>3131	PtrMemberAccess	r -> getDimensions
>3132	Identifier	getDimensions
>3133	Identifier	r
>3134	Identifier	YAML 
>3135	PrimaryExpression	\"dimensions\"
>3136	Identifier	YAML 
>3137	Identifier	out
>3138	ExpressionStatement	 
>3139	ShiftExpression	out << YAML 
>3140	ShiftExpression	YAML 
>3141	ShiftExpression	\"nodeType\" << YAML 
>3142	ShiftExpression	YAML 
>3143	CallExpression	r -> getType ( )
>3144	ArgumentList	 
>3145	Callee	r -> getType
>3146	PtrMemberAccess	r -> getType
>3147	Identifier	getType
>3148	Identifier	r
>3149	Identifier	YAML 
>3150	PrimaryExpression	\"nodeType\"
>3151	Identifier	YAML 
>3152	Identifier	out
>3153	ExpressionStatement	 
>3154	ShiftExpression	out << YAML 
>3155	ShiftExpression	YAML 
>3156	ShiftExpression	\"name\" << YAML 
>3157	ShiftExpression	YAML 
>3158	MemberAccess	info . first
>3159	Identifier	first
>3160	Identifier	info
>3161	Identifier	YAML 
>3162	PrimaryExpression	\"name\"
>3163	Identifier	YAML 
>3164	Identifier	out
>3165	ExpressionStatement	 
>3166	ShiftExpression	out << YAML 
>3167	Identifier	YAML 
>3168	Identifier	out
>3169	IdentifierDeclStatement	 
>3170	IdentifierDecl	* r = info . second
>3171	AssignmentExpr	* r = info . second
>3172	MemberAccess	info . second
>3173	Identifier	second
>3174	Identifier	info
>3175	Identifier	r
>3176	Identifier	r
>3177	IdentifierDeclType	Region *
>3178	IdentifierDeclStatement	 
>3179	IdentifierDecl	& info = regions_ . getByIndex ( regionIndex )
>3180	AssignmentExpr	& info = regions_ . getByIndex ( regionIndex )
>3181	CallExpression	regions_ . getByIndex ( regionIndex )
>3182	ArgumentList	regionIndex
>3183	Argument	regionIndex
>3184	Identifier	regionIndex
>3185	Callee	regions_ . getByIndex
>3186	MemberAccess	regions_ . getByIndex
>3187	Identifier	getByIndex
>3188	Identifier	regions_
>3189	Identifier	info
>3190	Identifier	info
>3191	IdentifierDeclType	std 
>3192	IncDecOp	 
>3193	IncDec	++
>3194	Identifier	regionIndex
>3195	Condition	 
>3196	RelationalExpression	regionIndex < regions_ . getCount ( )
>3197	CallExpression	regions_ . getCount ( )
>3198	ArgumentList	 
>3199	Callee	regions_ . getCount
>3200	MemberAccess	regions_ . getCount
>3201	Identifier	getCount
>3202	Identifier	regions_
>3203	Identifier	regionIndex
>3204	ForInit	 
>3205	IdentifierDeclStatement	size_t regionIndex = 0 ;
>3206	IdentifierDecl	regionIndex = 0
>3207	AssignmentExpr	regionIndex = 0
>3208	PrimaryExpression	0
>3209	Identifier	regionIndex
>3210	Identifier	regionIndex
>3211	IdentifierDeclType	size_t
>3212	ExpressionStatement	 
>3213	ShiftExpression	out << YAML 
>3214	ShiftExpression	YAML 
>3215	ShiftExpression	\"Regions\" << YAML 
>3216	ShiftExpression	YAML 
>3217	Identifier	YAML 
>3218	Identifier	YAML 
>3219	PrimaryExpression	\"Regions\"
>3220	Identifier	YAML 
>3221	Identifier	out
>3222	ExpressionStatement	 
>3223	ShiftExpression	out << YAML 
>3224	ShiftExpression	YAML 
>3225	ShiftExpression	\"Version\" << YAML 
>3226	ShiftExpression	YAML 
>3227	PrimaryExpression	2
>3228	Identifier	YAML 
>3229	PrimaryExpression	\"Version\"
>3230	Identifier	YAML 
>3231	Identifier	out
>3232	ExpressionStatement	 
>3233	ShiftExpression	out << YAML 
>3234	Identifier	YAML 
>3235	Identifier	out
>3236	IdentifierDeclStatement	 
>3237	IdentifierDecl	out
>3238	Identifier	out
>3239	IdentifierDeclType	YAML 
>3240	ExpressionStatement	 
>3241	CallExpression	Directory 
>3242	ArgumentList	fullPath
>3243	Argument	fullPath
>3244	Identifier	fullPath
>3245	Callee	Directory 
>3246	Identifier	Directory 
>3247	IfStatement	if ( Path 
>3248	CompoundStatement	 
>3249	ExpressionStatement	 
>3250	CallExpression	Directory 
>3251	ArgumentList	fullPath
>3252	Argument	fullPath
>3253	Identifier	fullPath
>3254	Callee	Directory 
>3255	Identifier	Directory 
>3256	IfStatement	if ( ! Path 
>3257	CompoundStatement	 
>3258	ExpressionStatement	 
>3259	ShiftExpression	NTA_THROW << \"Existing filesystem entry \" << fullPath << \" is not a network bundle -- refusing to delete\"\
>3260	ShiftExpression	\"Existing filesystem entry \" << fullPath << \" is not a network bundle -- refusing to delete\"
>3261	ShiftExpression	fullPath << \" is not a network bundle -- refusing to delete\"
>3262	PrimaryExpression	\" is not a network bundle -- refusing to delete\"
>3263	Identifier	fullPath
>3264	PrimaryExpression	\"Existing filesystem entry \"
>3265	Identifier	NTA_THROW
>3266	Condition	 
>3267	OrExpression	! Path 
>3268	UnaryOp	! Path 
>3269	CallExpression	Path 
>3270	ArgumentList	networkStructureFilename
>3271	Argument	networkStructureFilename
>3272	Identifier	networkStructureFilename
>3273	Callee	Path 
>3274	Identifier	Path 
>3275	UnaryOperator	!
>3276	UnaryOp	! Path 
>3277	CallExpression	Path 
>3278	ArgumentList	fullPath
>3279	Argument	fullPath
>3280	Identifier	fullPath
>3281	Callee	Path 
>3282	Identifier	Path 
>3283	UnaryOperator	!
>3284	Condition	 
>3285	CallExpression	Path 
>3286	ArgumentList	fullPath
>3287	Argument	fullPath
>3288	Identifier	fullPath
>3289	Callee	Path 
>3290	Identifier	Path 
>3291	IdentifierDeclStatement	 
>3292	IdentifierDecl	networkStructureFilename = Path 
>3293	AssignmentExpr	networkStructureFilename = Path 
>3294	CallExpression	Path 
>3295	ArgumentList	fullPath
>3296	Argument	\"network.yaml\"
>3297	PrimaryExpression	\"network.yaml\"
>3298	Argument	fullPath
>3299	Identifier	fullPath
>3300	Callee	Path 
>3301	Identifier	Path 
>3302	Identifier	networkStructureFilename
>3303	Identifier	networkStructureFilename
>3304	IdentifierDeclType	std 
>3305	IdentifierDeclStatement	 
>3306	IdentifierDecl	fullPath = Path 
>3307	AssignmentExpr	fullPath = Path 
>3308	CallExpression	Path 
>3309	ArgumentList	Path 
>3310	Argument	Path 
>3311	CallExpression	Path 
>3312	ArgumentList	name
>3313	Argument	name
>3314	Identifier	name
>3315	Callee	Path 
>3316	Identifier	Path 
>3317	Callee	Path 
>3318	Identifier	Path 
>3319	Identifier	fullPath
>3320	Identifier	fullPath
>3321	IdentifierDeclType	std 
>3322	IfStatement	if ( ! StringUtils 
>3323	ExpressionStatement	 
>3324	ShiftExpression	NTA_THROW << \"saveToBundle
>3325	PrimaryExpression	\"saveToBundle
>3326	Identifier	NTA_THROW
>3327	Condition	 
>3328	UnaryOp	! StringUtils 
>3329	CallExpression	StringUtils 
>3330	ArgumentList	name
>3331	Argument	\".nta\"
>3332	PrimaryExpression	\".nta\"
>3333	Argument	name
>3334	Identifier	name
>3335	Callee	StringUtils 
>3336	Identifier	StringUtils 
>3337	UnaryOperator	!
>3388	FunctionDef	Network 
>3389	ParameterList	const std 
>3390	Parameter	 
>3391	Identifier	path
>3392	ParameterType	const std 
>3393	ReturnType	void
>3394	CompoundStatement	 
>3395	IfStatement	if ( StringUtils 
>3396	ElseStatement	else
>3397	IfStatement	if ( StringUtils 
>3398	ElseStatement	else
>3399	CompoundStatement	 
>3400	ExpressionStatement	 
>3401	ShiftExpression	NTA_THROW << \"Network
>3402	ShiftExpression	\"Network
>3403	ShiftExpression	path << \"'. Supported extensions are  .tgz and .nta\"
>3404	PrimaryExpression	\"'. Supported extensions are  .tgz and .nta\"
>3405	Identifier	path
>3406	PrimaryExpression	\"Network
>3407	Identifier	NTA_THROW
>3408	CompoundStatement	 
>3409	ExpressionStatement	 
>3410	CallExpression	loadFromBundle ( path )
>3411	ArgumentList	path
>3412	Argument	path
>3413	Identifier	path
>3414	Callee	loadFromBundle
>3415	Identifier	loadFromBundle
>3416	Condition	 
>3417	CallExpression	StringUtils 
>3418	ArgumentList	path
>3419	Argument	\".nta\"
>3420	PrimaryExpression	\".nta\"
>3421	Argument	path
>3422	Identifier	path
>3423	Callee	StringUtils 
>3424	Identifier	StringUtils 
>3425	CompoundStatement	 
>3426	ExpressionStatement	 
>3427	ShiftExpression	NTA_THROW << \"Gzipped tar archives (\" << path << \") not yet supported\"
>3428	ShiftExpression	\"Gzipped tar archives (\" << path << \") not yet supported\"
>3429	ShiftExpression	path << \") not yet supported\"
>3430	PrimaryExpression	\") not yet supported\"
>3431	Identifier	path
>3432	PrimaryExpression	\"Gzipped tar archives (\"
>3433	Identifier	NTA_THROW
>3434	Condition	 
>3435	CallExpression	StringUtils 
>3436	ArgumentList	path
>3437	Argument	\".tgz\"
>3438	PrimaryExpression	\".tgz\"
>3439	Argument	path
>3440	Identifier	path
>3441	Callee	StringUtils 
>3442	Identifier	StringUtils 
>3448	FunctionDef	Network 
>3449	ParameterList	const std 
>3450	Parameter	 
>3451	Identifier	name
>3452	ParameterType	const std 
>3453	ReturnType	void
>3454	CompoundStatement	 
>3455	ForStatement	for ( YAML 
>3456	CompoundStatement	 
>3457	ExpressionStatement	 
>3458	CallExpression	destInput -> addLink ( linkType , params , srcOutput )
>3459	ArgumentList	linkType
>3460	Argument	srcOutput
>3461	Identifier	srcOutput
>3462	Argument	params
>3463	Identifier	params
>3464	Argument	linkType
>3465	Identifier	linkType
>3466	Callee	destInput -> addLink
>3467	PtrMemberAccess	destInput -> addLink
>3468	Identifier	addLink
>3469	Identifier	destInput
>3470	IfStatement	if ( destInput == NULL )
>3471	ExpressionStatement	 
>3472	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link specifies destination input '\" << destInputName << \"' \
>3473	ShiftExpression	\"Invalid network structure file -- link specifies destination input '\" << destInputName << \"' but no \
>3474	ShiftExpression	destInputName << \"' but no such name exists\"
>3475	PrimaryExpression	\"' but no such name exists\"
>3476	Identifier	destInputName
>3477	PrimaryExpression	\"Invalid network structure file -- link specifies destination input '\"
>3478	Identifier	NTA_THROW
>3479	Condition	 
>3480	EqualityExpression	destInput == NULL
>3481	Identifier	NULL
>3482	Identifier	destInput
>3483	IdentifierDeclStatement	 
>3484	IdentifierDecl	* destInput = destRegion -> getInput ( destInputName )
>3485	AssignmentExpr	* destInput = destRegion -> getInput ( destInputName )
>3486	CallExpression	destRegion -> getInput ( destInputName )
>3487	ArgumentList	destInputName
>3488	Argument	destInputName
>3489	Identifier	destInputName
>3490	Callee	destRegion -> getInput
>3491	PtrMemberAccess	destRegion -> getInput
>3492	Identifier	getInput
>3493	Identifier	destRegion
>3494	Identifier	destInput
>3495	Identifier	destInput
>3496	IdentifierDeclType	Input *
>3497	IfStatement	if ( srcOutput == NULL )
>3498	ExpressionStatement	 
>3499	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link specifies source output '\" << srcOutputName << \"' \
>3500	ShiftExpression	\"Invalid network structure file -- link specifies source output '\" << srcOutputName << \"' but no such \
>3501	ShiftExpression	srcOutputName << \"' but no such name exists\"
>3502	PrimaryExpression	\"' but no such name exists\"
>3503	Identifier	srcOutputName
>3504	PrimaryExpression	\"Invalid network structure file -- link specifies source output '\"
>3505	Identifier	NTA_THROW
>3506	Condition	 
>3507	EqualityExpression	srcOutput == NULL
>3508	Identifier	NULL
>3509	Identifier	srcOutput
>3510	IdentifierDeclStatement	 
>3511	IdentifierDecl	* srcOutput = srcRegion -> getOutput ( srcOutputName )
>3512	AssignmentExpr	* srcOutput = srcRegion -> getOutput ( srcOutputName )
>3513	CallExpression	srcRegion -> getOutput ( srcOutputName )
>3514	ArgumentList	srcOutputName
>3515	Argument	srcOutputName
>3516	Identifier	srcOutputName
>3517	Callee	srcRegion -> getOutput
>3518	PtrMemberAccess	srcRegion -> getOutput
>3519	Identifier	getOutput
>3520	Identifier	srcRegion
>3521	Identifier	srcOutput
>3522	Identifier	srcOutput
>3523	IdentifierDeclType	Output *
>3524	IdentifierDeclStatement	 
>3525	IdentifierDecl	* destRegion = regions_ . getByName ( destRegionName )
>3526	AssignmentExpr	* destRegion = regions_ . getByName ( destRegionName )
>3527	CallExpression	regions_ . getByName ( destRegionName )
>3528	ArgumentList	destRegionName
>3529	Argument	destRegionName
>3530	Identifier	destRegionName
>3531	Callee	regions_ . getByName
>3532	MemberAccess	regions_ . getByName
>3533	Identifier	getByName
>3534	Identifier	regions_
>3535	Identifier	destRegion
>3536	Identifier	destRegion
>3537	IdentifierDeclType	Region *
>3538	IfStatement	if ( ! regions_ . contains ( destRegionName ) )
>3539	ExpressionStatement	 
>3540	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link specifies destination region '\" << destRegionName << \"' \
>3541	ShiftExpression	\"Invalid network structure file -- link specifies destination region '\" << destRegionName << \"' but \
>3542	ShiftExpression	destRegionName << \"' but no such region exists\"
>3543	PrimaryExpression	\"' but no such region exists\"
>3544	Identifier	destRegionName
>3545	PrimaryExpression	\"Invalid network structure file -- link specifies destination region '\"
>3546	Identifier	NTA_THROW
>3547	Condition	 
>3548	UnaryOp	! regions_ . contains ( destRegionName )
>3549	CallExpression	regions_ . contains ( destRegionName )
>3550	ArgumentList	destRegionName
>3551	Argument	destRegionName
>3552	Identifier	destRegionName
>3553	Callee	regions_ . contains
>3554	MemberAccess	regions_ . contains
>3555	Identifier	contains
>3556	Identifier	regions_
>3557	UnaryOperator	!
>3558	IdentifierDeclStatement	 
>3559	IdentifierDecl	* srcRegion = regions_ . getByName ( srcRegionName )
>3560	AssignmentExpr	* srcRegion = regions_ . getByName ( srcRegionName )
>3561	CallExpression	regions_ . getByName ( srcRegionName )
>3562	ArgumentList	srcRegionName
>3563	Argument	srcRegionName
>3564	Identifier	srcRegionName
>3565	Callee	regions_ . getByName
>3566	MemberAccess	regions_ . getByName
>3567	Identifier	getByName
>3568	Identifier	regions_
>3569	Identifier	srcRegion
>3570	Identifier	srcRegion
>3571	IdentifierDeclType	Region *
>3572	IfStatement	if ( ! regions_ . contains ( srcRegionName ) )
>3573	ExpressionStatement	 
>3574	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link specifies source region '\" << srcRegionName << \"' \
>3575	ShiftExpression	\"Invalid network structure file -- link specifies source region '\" << srcRegionName << \"' but no such \
>3576	ShiftExpression	srcRegionName << \"' but no such region exists\"
>3577	PrimaryExpression	\"' but no such region exists\"
>3578	Identifier	srcRegionName
>3579	PrimaryExpression	\"Invalid network structure file -- link specifies source region '\"
>3580	Identifier	NTA_THROW
>3581	Condition	 
>3582	UnaryOp	! regions_ . contains ( srcRegionName )
>3583	CallExpression	regions_ . contains ( srcRegionName )
>3584	ArgumentList	srcRegionName
>3585	Argument	srcRegionName
>3586	Identifier	srcRegionName
>3587	Callee	regions_ . contains
>3588	MemberAccess	regions_ . contains
>3589	Identifier	contains
>3590	Identifier	regions_
>3591	UnaryOperator	!
>3592	ExpressionStatement	 
>3593	ShiftExpression	* node >> destInputName
>3594	Identifier	destInputName
>3595	UnaryOp	* node
>3596	Identifier	node
>3597	UnaryOperator	*
>3598	IdentifierDeclStatement	 
>3599	IdentifierDecl	destInputName
>3600	Identifier	destInputName
>3601	IdentifierDeclType	std 
>3602	IfStatement	if ( node == NULL )
>3603	ExpressionStatement	 
>3604	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link does not have a destInput\"
>3605	PrimaryExpression	\"Invalid network structure file -- link does not have a destInput\"
>3606	Identifier	NTA_THROW
>3607	Condition	 
>3608	EqualityExpression	node == NULL
>3609	Identifier	NULL
>3610	Identifier	node
>3611	ExpressionStatement	 
>3612	AssignmentExpr	node = ( * link ) . FindValue ( \"destInput\" )
>3613	CallExpression	( * link ) . FindValue ( \"destInput\" )
>3614	ArgumentList	\"destInput\"
>3615	Argument	\"destInput\"
>3616	PrimaryExpression	\"destInput\"
>3617	Callee	( * link ) . FindValue
>3618	MemberAccess	( * link ) . FindValue
>3619	Identifier	FindValue
>3620	UnaryOp	* link
>3621	Identifier	link
>3622	UnaryOperator	*
>3623	Identifier	node
>3624	ExpressionStatement	 
>3625	ShiftExpression	* node >> destRegionName
>3626	Identifier	destRegionName
>3627	UnaryOp	* node
>3628	Identifier	node
>3629	UnaryOperator	*
>3630	IdentifierDeclStatement	 
>3631	IdentifierDecl	destRegionName
>3632	Identifier	destRegionName
>3633	IdentifierDeclType	std 
>3634	IfStatement	if ( node == NULL )
>3635	ExpressionStatement	 
>3636	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link does not have a destRegion\"
>3637	PrimaryExpression	\"Invalid network structure file -- link does not have a destRegion\"
>3638	Identifier	NTA_THROW
>3639	Condition	 
>3640	EqualityExpression	node == NULL
>3641	Identifier	NULL
>3642	Identifier	node
>3643	ExpressionStatement	 
>3644	AssignmentExpr	node = ( * link ) . FindValue ( \"destRegion\" )
>3645	CallExpression	( * link ) . FindValue ( \"destRegion\" )
>3646	ArgumentList	\"destRegion\"
>3647	Argument	\"destRegion\"
>3648	PrimaryExpression	\"destRegion\"
>3649	Callee	( * link ) . FindValue
>3650	MemberAccess	( * link ) . FindValue
>3651	Identifier	FindValue
>3652	UnaryOp	* link
>3653	Identifier	link
>3654	UnaryOperator	*
>3655	Identifier	node
>3656	ExpressionStatement	 
>3657	ShiftExpression	* node >> srcOutputName
>3658	Identifier	srcOutputName
>3659	UnaryOp	* node
>3660	Identifier	node
>3661	UnaryOperator	*
>3662	IdentifierDeclStatement	 
>3663	IdentifierDecl	srcOutputName
>3664	Identifier	srcOutputName
>3665	IdentifierDeclType	std 
>3666	IfStatement	if ( node == NULL )
>3667	ExpressionStatement	 
>3668	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link does not have a srcOutput\"
>3669	PrimaryExpression	\"Invalid network structure file -- link does not have a srcOutput\"
>3670	Identifier	NTA_THROW
>3671	Condition	 
>3672	EqualityExpression	node == NULL
>3673	Identifier	NULL
>3674	Identifier	node
>3675	ExpressionStatement	 
>3676	AssignmentExpr	node = ( * link ) . FindValue ( \"srcOutput\" )
>3677	CallExpression	( * link ) . FindValue ( \"srcOutput\" )
>3678	ArgumentList	\"srcOutput\"
>3679	Argument	\"srcOutput\"
>3680	PrimaryExpression	\"srcOutput\"
>3681	Callee	( * link ) . FindValue
>3682	MemberAccess	( * link ) . FindValue
>3683	Identifier	FindValue
>3684	UnaryOp	* link
>3685	Identifier	link
>3686	UnaryOperator	*
>3687	Identifier	node
>3688	ExpressionStatement	 
>3689	ShiftExpression	* node >> srcRegionName
>3690	Identifier	srcRegionName
>3691	UnaryOp	* node
>3692	Identifier	node
>3693	UnaryOperator	*
>3694	IdentifierDeclStatement	 
>3695	IdentifierDecl	srcRegionName
>3696	Identifier	srcRegionName
>3697	IdentifierDeclType	std 
>3698	IfStatement	if ( node == NULL )
>3699	ExpressionStatement	 
>3700	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link does not have a srcRegion\"
>3701	PrimaryExpression	\"Invalid network structure file -- link does not have a srcRegion\"
>3702	Identifier	NTA_THROW
>3703	Condition	 
>3704	EqualityExpression	node == NULL
>3705	Identifier	NULL
>3706	Identifier	node
>3707	ExpressionStatement	 
>3708	AssignmentExpr	node = ( * link ) . FindValue ( \"srcRegion\" )
>3709	CallExpression	( * link ) . FindValue ( \"srcRegion\" )
>3710	ArgumentList	\"srcRegion\"
>3711	Argument	\"srcRegion\"
>3712	PrimaryExpression	\"srcRegion\"
>3713	Callee	( * link ) . FindValue
>3714	MemberAccess	( * link ) . FindValue
>3715	Identifier	FindValue
>3716	UnaryOp	* link
>3717	Identifier	link
>3718	UnaryOperator	*
>3719	Identifier	node
>3720	ExpressionStatement	 
>3721	ShiftExpression	* node >> params
>3722	Identifier	params
>3723	UnaryOp	* node
>3724	Identifier	node
>3725	UnaryOperator	*
>3726	IdentifierDeclStatement	 
>3727	IdentifierDecl	params
>3728	Identifier	params
>3729	IdentifierDeclType	std 
>3730	IfStatement	if ( node == NULL )
>3731	ExpressionStatement	 
>3732	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link does not have params\"
>3733	PrimaryExpression	\"Invalid network structure file -- link does not have params\"
>3734	Identifier	NTA_THROW
>3735	Condition	 
>3736	EqualityExpression	node == NULL
>3737	Identifier	NULL
>3738	Identifier	node
>3739	ExpressionStatement	 
>3740	AssignmentExpr	node = ( * link ) . FindValue ( \"params\" )
>3741	CallExpression	( * link ) . FindValue ( \"params\" )
>3742	ArgumentList	\"params\"
>3743	Argument	\"params\"
>3744	PrimaryExpression	\"params\"
>3745	Callee	( * link ) . FindValue
>3746	MemberAccess	( * link ) . FindValue
>3747	Identifier	FindValue
>3748	UnaryOp	* link
>3749	Identifier	link
>3750	UnaryOperator	*
>3751	Identifier	node
>3752	ExpressionStatement	 
>3753	ShiftExpression	* node >> linkType
>3754	Identifier	linkType
>3755	UnaryOp	* node
>3756	Identifier	node
>3757	UnaryOperator	*
>3758	IdentifierDeclStatement	 
>3759	IdentifierDecl	linkType
>3760	Identifier	linkType
>3761	IdentifierDeclType	std 
>3762	IfStatement	if ( node == NULL )
>3763	ExpressionStatement	 
>3764	ShiftExpression	NTA_THROW << \"Invalid network structure file -- link does not have a type\"
>3765	PrimaryExpression	\"Invalid network structure file -- link does not have a type\"
>3766	Identifier	NTA_THROW
>3767	Condition	 
>3768	EqualityExpression	node == NULL
>3769	Identifier	NULL
>3770	Identifier	node
>3771	ExpressionStatement	 
>3772	AssignmentExpr	node = ( * link ) . FindValue ( \"type\" )
>3773	CallExpression	( * link ) . FindValue ( \"type\" )
>3774	ArgumentList	\"type\"
>3775	Argument	\"type\"
>3776	PrimaryExpression	\"type\"
>3777	Callee	( * link ) . FindValue
>3778	MemberAccess	( * link ) . FindValue
>3779	Identifier	FindValue
>3780	UnaryOp	* link
>3781	Identifier	link
>3782	UnaryOperator	*
>3783	Identifier	node
>3784	IfStatement	if ( ( * link ) . size ( ) != 6 )
>3785	ExpressionStatement	 
>3786	ShiftExpression	NTA_THROW << \"Invalid network structure file -- bad link (wrong size)\"
>3787	PrimaryExpression	\"Invalid network structure file -- bad link (wrong size)\"
>3788	Identifier	NTA_THROW
>3789	Condition	 
>3790	EqualityExpression	( * link ) . size ( ) != 6
>3791	PrimaryExpression	6
>3792	CallExpression	( * link ) . size ( )
>3793	ArgumentList	 
>3794	Callee	( * link ) . size
>3795	MemberAccess	( * link ) . size
>3796	Identifier	size
>3797	UnaryOp	* link
>3798	Identifier	link
>3799	UnaryOperator	*
>3800	IfStatement	if ( ( * link ) . GetType ( ) != YAML 
>3801	ExpressionStatement	 
>3802	ShiftExpression	NTA_THROW << \"Invalid network structure file -- bad link (not a map)\"
>3803	PrimaryExpression	\"Invalid network structure file -- bad link (not a map)\"
>3804	Identifier	NTA_THROW
>3805	Condition	 
>3806	EqualityExpression	( * link ) . GetType ( ) != YAML 
>3807	Identifier	YAML 
>3808	CallExpression	( * link ) . GetType ( )
>3809	ArgumentList	 
>3810	Callee	( * link ) . GetType
>3811	MemberAccess	( * link ) . GetType
>3812	Identifier	GetType
>3813	UnaryOp	* link
>3814	Identifier	link
>3815	UnaryOperator	*
>3816	IncDecOp	 
>3817	IncDec	++
>3818	Identifier	link
>3819	Condition	 
>3820	EqualityExpression	link != links -> end ( )
>3821	CallExpression	links -> end ( )
>3822	ArgumentList	 
>3823	Callee	links -> end
>3824	PtrMemberAccess	links -> end
>3825	Identifier	end
>3826	Identifier	links
>3827	Identifier	link
>3828	ForInit	 
>3829	IdentifierDeclStatement	YAML 
>3830	IdentifierDecl	link = links -> begin ( )
>3831	AssignmentExpr	link = links -> begin ( )
>3832	CallExpression	links -> begin ( )
>3833	ArgumentList	 
>3834	Callee	links -> begin
>3835	PtrMemberAccess	links -> begin
>3836	Identifier	begin
>3837	Identifier	links
>3838	Identifier	link
>3839	Identifier	link
>3840	IdentifierDeclType	YAML 
>3841	IfStatement	if ( links -> GetType ( ) != YAML 
>3842	ExpressionStatement	 
>3843	ShiftExpression	NTA_THROW << \"Invalid network structure file -- links element is not a list\"
>3844	PrimaryExpression	\"Invalid network structure file -- links element is not a list\"
>3845	Identifier	NTA_THROW
>3846	Condition	 
>3847	EqualityExpression	links -> GetType ( ) != YAML 
>3848	Identifier	YAML 
>3849	CallExpression	links -> GetType ( )
>3850	ArgumentList	 
>3851	Callee	links -> GetType
>3852	PtrMemberAccess	links -> GetType
>3853	Identifier	GetType
>3854	Identifier	links
>3855	IfStatement	if ( links == NULL )
>3856	ExpressionStatement	 
>3857	ShiftExpression	NTA_THROW << \"Invalid network structure file -- no links\"
>3858	PrimaryExpression	\"Invalid network structure file -- no links\"
>3859	Identifier	NTA_THROW
>3860	Condition	 
>3861	EqualityExpression	links == NULL
>3862	Identifier	NULL
>3863	Identifier	links
>3864	IdentifierDeclStatement	 
>3865	IdentifierDecl	* links = doc . FindValue ( \"Links\" )
>3866	AssignmentExpr	* links = doc . FindValue ( \"Links\" )
>3867	CallExpression	doc . FindValue ( \"Links\" )
>3868	ArgumentList	\"Links\"
>3869	Argument	\"Links\"
>3870	PrimaryExpression	\"Links\"
>3871	Callee	doc . FindValue
>3872	MemberAccess	doc . FindValue
>3873	Identifier	FindValue
>3874	Identifier	doc
>3875	Identifier	links
>3876	Identifier	links
>3877	IdentifierDeclType	const YAML 
>3878	ForStatement	for ( YAML 
>3879	CompoundStatement	 
>3880	ExpressionStatement	 
>3881	CallExpression	setPhases_ ( r , phases )
>3882	ArgumentList	r
>3883	Argument	phases
>3884	Identifier	phases
>3885	Argument	r
>3886	Identifier	r
>3887	Callee	setPhases_
>3888	Identifier	setPhases_
>3889	IdentifierDeclStatement	 
>3890	IdentifierDecl	* r = addRegionFromBundle ( name , nodeType , dimensions , fullPath , label )
>3891	AssignmentExpr	* r = addRegionFromBundle ( name , nodeType , dimensions , fullPath , label )
>3892	CallExpression	addRegionFromBundle ( name , nodeType , dimensions , fullPath , label )
>3893	ArgumentList	name
>3894	Argument	label
>3895	Identifier	label
>3896	Argument	fullPath
>3897	Identifier	fullPath
>3898	Argument	dimensions
>3899	Identifier	dimensions
>3900	Argument	nodeType
>3901	Identifier	nodeType
>3902	Argument	name
>3903	Identifier	name
>3904	Callee	addRegionFromBundle
>3905	Identifier	addRegionFromBundle
>3906	Identifier	r
>3907	Identifier	r
>3908	IdentifierDeclType	Region *
>3909	ExpressionStatement	 
>3910	ShiftExpression	* node >> label
>3911	Identifier	label
>3912	UnaryOp	* node
>3913	Identifier	node
>3914	UnaryOperator	*
>3915	IdentifierDeclStatement	 
>3916	IdentifierDecl	label
>3917	Identifier	label
>3918	IdentifierDeclType	std 
>3919	IfStatement	if ( node == NULL )
>3920	ExpressionStatement	 
>3921	ShiftExpression	NTA_THROW << \"Invalid network structure file -- region\" << name << \"has no label\"
>3922	ShiftExpression	\"Invalid network structure file -- region\" << name << \"has no label\"
>3923	ShiftExpression	name << \"has no label\"
>3924	PrimaryExpression	\"has no label\"
>3925	Identifier	name
>3926	PrimaryExpression	\"Invalid network structure file -- region\"
>3927	Identifier	NTA_THROW
>3928	Condition	 
>3929	EqualityExpression	node == NULL
>3930	Identifier	NULL
>3931	Identifier	node
>3932	ExpressionStatement	 
>3933	AssignmentExpr	node = ( * region ) . FindValue ( \"label\" )
>3934	CallExpression	( * region ) . FindValue ( \"label\" )
>3935	ArgumentList	\"label\"
>3936	Argument	\"label\"
>3937	PrimaryExpression	\"label\"
>3938	Callee	( * region ) . FindValue
>3939	MemberAccess	( * region ) . FindValue
>3940	Identifier	FindValue
>3941	UnaryOp	* region
>3942	Identifier	region
>3943	UnaryOperator	*
>3944	Identifier	node
>3945	ForStatement	for ( YAML 
>3946	CompoundStatement	 
>3947	ExpressionStatement	 
>3948	CallExpression	phases . insert ( val )
>3949	ArgumentList	val
>3950	Argument	val
>3951	Identifier	val
>3952	Callee	phases . insert
>3953	MemberAccess	phases . insert
>3954	Identifier	insert
>3955	Identifier	phases
>3956	ExpressionStatement	 
>3957	ShiftExpression	( * valiter ) >> val
>3958	Identifier	val
>3959	UnaryOp	* valiter
>3960	Identifier	valiter
>3961	UnaryOperator	*
>3962	IdentifierDeclStatement	 
>3963	IdentifierDecl	val
>3964	Identifier	val
>3965	IdentifierDeclType	UInt32
>3966	IncDecOp	 
>3967	IncDec	++
>3968	Identifier	valiter
>3969	Condition	 
>3970	EqualityExpression	valiter != ( * node ) . end ( )
>3971	CallExpression	( * node ) . end ( )
>3972	ArgumentList	 
>3973	Callee	( * node ) . end
>3974	MemberAccess	( * node ) . end
>3975	Identifier	end
>3976	UnaryOp	* node
>3977	Identifier	node
>3978	UnaryOperator	*
>3979	Identifier	valiter
>3980	ForInit	 
>3981	IdentifierDeclStatement	YAML 
>3982	IdentifierDecl	valiter = ( * node ) . begin ( )
>3983	AssignmentExpr	valiter = ( * node ) . begin ( )
>3984	CallExpression	( * node ) . begin ( )
>3985	ArgumentList	 
>3986	Callee	( * node ) . begin
>3987	MemberAccess	( * node ) . begin
>3988	Identifier	begin
>3989	UnaryOp	* node
>3990	Identifier	node
>3991	UnaryOperator	*
>3992	Identifier	valiter
>3993	Identifier	valiter
>3994	IdentifierDeclType	YAML 
>3995	IdentifierDeclStatement	 
>3996	IdentifierDecl	phases
>3997	Identifier	phases
>3998	IdentifierDeclType	std 
>3999	IfStatement	if ( ( * node ) . GetType ( ) != YAML 
>4000	ExpressionStatement	 
>4001		NTA_THROW << \"Invalid network structure file -- region \" << name << \" phases specified incorrectly\"type
>4002	ShiftExpression	\"Invalid network structure file -- region \" << name << \" phases specified incorrectly\"
>4003	ShiftExpression	name << \" phases specified incorrectly\"
>4004	PrimaryExpression	\" phases specified incorrectly\"
>4005	Identifier	name
>4006	PrimaryExpression	\"Invalid network structure file -- region \"
>4007	Identifier	NTA_THROW
>4008	Condition	 
>4009	EqualityExpression	( * node ) . GetType ( ) != YAML 
>4010	Identifier	YAML 
>4011	CallExpression	( * node ) . GetType ( )
>4012	ArgumentList	 
>4013	Callee	( * node ) . GetType
>4014	MemberAccess	( * node ) . GetType
>4015	Identifier	GetType
>4016	UnaryOp	* node
>4017	Identifier	node
>4018	UnaryOperator	*
>4019	IfStatement	if ( node == NULL )
>4020	ExpressionStatement	 
>4021	ShiftExpression	NTA_THROW << \"Invalid network structure file -- region\" << name << \"has no phases\"
>4022	ShiftExpression	\"Invalid network structure file -- region\" << name << \"has no phases\"
>4023	ShiftExpression	name << \"has no phases\"
>4024	PrimaryExpression	\"has no phases\"
>4025	Identifier	name
>4026	PrimaryExpression	\"Invalid network structure file -- region\"
>4027	Identifier	NTA_THROW
>4028	Condition	 
>4029	EqualityExpression	node == NULL
>4030	Identifier	NULL
>4031	Identifier	node
>4032	ExpressionStatement	 
>4033	AssignmentExpr	node = ( * region ) . FindValue ( \"phases\" )
>4034	CallExpression	( * region ) . FindValue ( \"phases\" )
>4035	ArgumentList	\"phases\"
>4036	Argument	\"phases\"
>4037	PrimaryExpression	\"phases\"
>4038	Callee	( * region ) . FindValue
>4039	MemberAccess	( * region ) . FindValue
>4040	Identifier	FindValue
>4041	UnaryOp	* region
>4042	Identifier	region
>4043	UnaryOperator	*
>4044	Identifier	node
>4045	ForStatement	for ( YAML 
>4046	CompoundStatement	 
>4047	ExpressionStatement	 
>4048	CallExpression	dimensions . push_back ( val )
>4049	ArgumentList	val
>4050	Argument	val
>4051	Identifier	val
>4052	Callee	dimensions . push_back
>4053	MemberAccess	dimensions . push_back
>4054	Identifier	push_back
>4055	Identifier	dimensions
>4056	ExpressionStatement	 
>4057	ShiftExpression	( * valiter ) >> val
>4058	Identifier	val
>4059	UnaryOp	* valiter
>4060	Identifier	valiter
>4061	UnaryOperator	*
>4062	IdentifierDeclStatement	 
>4063	IdentifierDecl	val
>4064	Identifier	val
>4065	IdentifierDeclType	size_t
>4066	IncDecOp	 
>4067	IncDec	++
>4068	Identifier	valiter
>4069	Condition	 
>4070	EqualityExpression	valiter != ( * node ) . end ( )
>4071	CallExpression	( * node ) . end ( )
>4072	ArgumentList	 
>4073	Callee	( * node ) . end
>4074	MemberAccess	( * node ) . end
>4075	Identifier	end
>4076	UnaryOp	* node
>4077	Identifier	node
>4078	UnaryOperator	*
>4079	Identifier	valiter
>4080	ForInit	 
>4081	IdentifierDeclStatement	YAML 
>4082	IdentifierDecl	valiter = ( * node ) . begin ( )
>4083	AssignmentExpr	valiter = ( * node ) . begin ( )
>4084	CallExpression	( * node ) . begin ( )
>4085	ArgumentList	 
>4086	Callee	( * node ) . begin
>4087	MemberAccess	( * node ) . begin
>4088	Identifier	begin
>4089	UnaryOp	* node
>4090	Identifier	node
>4091	UnaryOperator	*
>4092	Identifier	valiter
>4093	Identifier	valiter
>4094	IdentifierDeclType	YAML 
>4095	IdentifierDeclStatement	 
>4096	IdentifierDecl	dimensions
>4097	Identifier	dimensions
>4098	IdentifierDeclType	Dimensions
>4099	IfStatement	if ( ( * node ) . GetType ( ) != YAML 
>4100	ExpressionStatement	 
>4101	ShiftExpression	NTA_THROW << \"Invalid network structure file -- region \" << name << \" dimensions specified incorrectly\"\
>4102	ShiftExpression	\"Invalid network structure file -- region \" << name << \" dimensions specified incorrectly\"
>4103	ShiftExpression	name << \" dimensions specified incorrectly\"
>4104	PrimaryExpression	\" dimensions specified incorrectly\"
>4105	Identifier	name
>4106	PrimaryExpression	\"Invalid network structure file -- region \"
>4107	Identifier	NTA_THROW
>4108	Condition	 
>4109	EqualityExpression	( * node ) . GetType ( ) != YAML 
>4110	Identifier	YAML 
>4111	CallExpression	( * node ) . GetType ( )
>4112	ArgumentList	 
>4113	Callee	( * node ) . GetType
>4114	MemberAccess	( * node ) . GetType
>4115	Identifier	GetType
>4116	UnaryOp	* node
>4117	Identifier	node
>4118	UnaryOperator	*
>4119	IfStatement	if ( node == NULL )
>4120	ExpressionStatement	 
>4121	ShiftExpression	NTA_THROW << \"Invalid network structure file -- region \" << name << \" has no dimensions\"
>4122	ShiftExpression	\"Invalid network structure file -- region \" << name << \" has no dimensions\"
>4123	ShiftExpression	name << \" has no dimensions\"
>4124	PrimaryExpression	\" has no dimensions\"
>4125	Identifier	name
>4126	PrimaryExpression	\"Invalid network structure file -- region \"
>4127	Identifier	NTA_THROW
>4128	Condition	 
>4129	EqualityExpression	node == NULL
>4130	Identifier	NULL
>4131	Identifier	node
>4132	ExpressionStatement	 
>4133	AssignmentExpr	node = ( * region ) . FindValue ( \"dimensions\" )
>4134	CallExpression	( * region ) . FindValue ( \"dimensions\" )
>4135	ArgumentList	\"dimensions\"
>4136	Argument	\"dimensions\"
>4137	PrimaryExpression	\"dimensions\"
>4138	Callee	( * region ) . FindValue
>4139	MemberAccess	( * region ) . FindValue
>4140	Identifier	FindValue
>4141	UnaryOp	* region
>4142	Identifier	region
>4143	UnaryOperator	*
>4144	Identifier	node
>4145	ExpressionStatement	 
>4146	ShiftExpression	* node >> nodeType
>4147	Identifier	nodeType
>4148	UnaryOp	* node
>4149	Identifier	node
>4150	UnaryOperator	*
>4151	IdentifierDeclStatement	 
>4152	IdentifierDecl	nodeType
>4153	Identifier	nodeType
>4154	IdentifierDeclType	std 
>4155	IfStatement	if ( node == NULL )
>4156	ExpressionStatement	 
>4157	ShiftExpression	NTA_THROW << \"Invalid network structure file -- region \" << name << \" has no node type\"
>4158	ShiftExpression	\"Invalid network structure file -- region \" << name << \" has no node type\"
>4159	ShiftExpression	name << \" has no node type\"
>4160	PrimaryExpression	\" has no node type\"
>4161	Identifier	name
>4162	PrimaryExpression	\"Invalid network structure file -- region \"
>4163	Identifier	NTA_THROW
>4164	Condition	 
>4165	EqualityExpression	node == NULL
>4166	Identifier	NULL
>4167	Identifier	node
>4168	ExpressionStatement	 
>4169	AssignmentExpr	node = ( * region ) . FindValue ( \"nodeType\" )
>4170	CallExpression	( * region ) . FindValue ( \"nodeType\" )
>4171	ArgumentList	\"nodeType\"
>4172	Argument	\"nodeType\"
>4173	PrimaryExpression	\"nodeType\"
>4174	Callee	( * region ) . FindValue
>4175	MemberAccess	( * region ) . FindValue
>4176	Identifier	FindValue
>4177	UnaryOp	* region
>4178	Identifier	region
>4179	UnaryOperator	*
>4180	Identifier	node
>4181	ExpressionStatement	 
>4182	ShiftExpression	* node >> name
>4183	Identifier	name
>4184	UnaryOp	* node
>4185	Identifier	node
>4186	UnaryOperator	*
>4187	IdentifierDeclStatement	 
>4188	IdentifierDecl	name
>4189	Identifier	name
>4190	IdentifierDeclType	std 
>4191	IfStatement	if ( node == NULL )
>4192	ExpressionStatement	 
>4193	ShiftExpression	NTA_THROW << \"Invalid network structure file -- region has no name\"
>4194	PrimaryExpression	\"Invalid network structure file -- region has no name\"
>4195	Identifier	NTA_THROW
>4196	Condition	 
>4197	EqualityExpression	node == NULL
>4198	Identifier	NULL
>4199	Identifier	node
>4200	ExpressionStatement	 
>4201	AssignmentExpr	node = ( * region ) . FindValue ( \"name\" )
>4202	CallExpression	( * region ) . FindValue ( \"name\" )
>4203	ArgumentList	\"name\"
>4204	Argument	\"name\"
>4205	PrimaryExpression	\"name\"
>4206	Callee	( * region ) . FindValue
>4207	MemberAccess	( * region ) . FindValue
>4208	Identifier	FindValue
>4209	UnaryOp	* region
>4210	Identifier	region
>4211	UnaryOperator	*
>4212	Identifier	node
>4213	IfStatement	if ( ( * region ) . size ( ) != 5 )
>4214	ExpressionStatement	 
>4215	ShiftExpression	NTA_THROW << \"Invalid network structure file -- bad region (wrong size)\"
>4216	PrimaryExpression	\"Invalid network structure file -- bad region (wrong size)\"
>4217	Identifier	NTA_THROW
>4218	Condition	 
>4219	EqualityExpression	( * region ) . size ( ) != 5
>4220	PrimaryExpression	5
>4221	CallExpression	( * region ) . size ( )
>4222	ArgumentList	 
>4223	Callee	( * region ) . size
>4224	MemberAccess	( * region ) . size
>4225	Identifier	size
>4226	UnaryOp	* region
>4227	Identifier	region
>4228	UnaryOperator	*
>4229	IfStatement	if ( ( * region ) . GetType ( ) != YAML 
>4230	ExpressionStatement	 
>4231	ShiftExpression	NTA_THROW << \"Invalid network structure file -- bad region (not a map)\"
>4232	PrimaryExpression	\"Invalid network structure file -- bad region (not a map)\"
>4233	Identifier	NTA_THROW
>4234	Condition	 
>4235	EqualityExpression	( * region ) . GetType ( ) != YAML 
>4236	Identifier	YAML 
>4237	CallExpression	( * region ) . GetType ( )
>4238	ArgumentList	 
>4239	Callee	( * region ) . GetType
>4240	MemberAccess	( * region ) . GetType
>4241	Identifier	GetType
>4242	UnaryOp	* region
>4243	Identifier	region
>4244	UnaryOperator	*
>4245	IncDecOp	 
>4246	IncDec	++
>4247	Identifier	region
>4248	Condition	 
>4249	EqualityExpression	region != regions -> end ( )
>4250	CallExpression	regions -> end ( )
>4251	ArgumentList	 
>4252	Callee	regions -> end
>4253	PtrMemberAccess	regions -> end
>4254	Identifier	end
>4255	Identifier	regions
>4256	Identifier	region
>4257	ForInit	 
>4258	IdentifierDeclStatement	YAML 
>4259	IdentifierDecl	region = regions -> begin ( )
>4260	AssignmentExpr	region = regions -> begin ( )
>4261	CallExpression	regions -> begin ( )
>4262	ArgumentList	 
>4263	Callee	regions -> begin
>4264	PtrMemberAccess	regions -> begin
>4265	Identifier	begin
>4266	Identifier	regions
>4267	Identifier	region
>4268	Identifier	region
>4269	IdentifierDeclType	YAML 
>4270	IfStatement	if ( regions -> GetType ( ) != YAML 
>4271	ExpressionStatement	 
>4272	ShiftExpression	NTA_THROW << \"Invalid network structure file -- regions element is not a list\"
>4273	PrimaryExpression	\"Invalid network structure file -- regions element is not a list\"
>4274	Identifier	NTA_THROW
>4275	Condition	 
>4276	EqualityExpression	regions -> GetType ( ) != YAML 
>4277	Identifier	YAML 
>4278	CallExpression	regions -> GetType ( )
>4279	ArgumentList	 
>4280	Callee	regions -> GetType
>4281	PtrMemberAccess	regions -> GetType
>4282	Identifier	GetType
>4283	Identifier	regions
>4284	IfStatement	if ( regions == NULL )
>4285	ExpressionStatement	 
>4286	ShiftExpression	NTA_THROW << \"Invalid network structure file -- no regions\"
>4287	PrimaryExpression	\"Invalid network structure file -- no regions\"
>4288	Identifier	NTA_THROW
>4289	Condition	 
>4290	EqualityExpression	regions == NULL
>4291	Identifier	NULL
>4292	Identifier	regions
>4293	IdentifierDeclStatement	 
>4294	IdentifierDecl	* regions = doc . FindValue ( \"Regions\" )
>4295	AssignmentExpr	* regions = doc . FindValue ( \"Regions\" )
>4296	CallExpression	doc . FindValue ( \"Regions\" )
>4297	ArgumentList	\"Regions\"
>4298	Argument	\"Regions\"
>4299	PrimaryExpression	\"Regions\"
>4300	Callee	doc . FindValue
>4301	MemberAccess	doc . FindValue
>4302	Identifier	FindValue
>4303	Identifier	doc
>4304	Identifier	regions
>4305	Identifier	regions
>4306	IdentifierDeclType	const YAML 
>4307	IfStatement	if ( version != 2 )
>4308	ExpressionStatement	 
>4309	ShiftExpression	NTA_THROW << \"Invalid network structure file -- only version 2 supported\"
>4310	PrimaryExpression	\"Invalid network structure file -- only version 2 supported\"
>4311	Identifier	NTA_THROW
>4312	Condition	 
>4313	EqualityExpression	version != 2
>4314	PrimaryExpression	2
>4315	Identifier	version
>4316	ExpressionStatement	 
>4317	ShiftExpression	* node >> version
>4318	Identifier	version
>4319	UnaryOp	* node
>4320	Identifier	node
>4321	UnaryOperator	*
>4322	IdentifierDeclStatement	 
>4323	IdentifierDecl	version
>4324	Identifier	version
>4325	IdentifierDeclType	int
>4326	IfStatement	if ( node == NULL )
>4327	ExpressionStatement	 
>4328	ShiftExpression	NTA_THROW << \"Invalid network structure file -- no version\"
>4329	PrimaryExpression	\"Invalid network structure file -- no version\"
>4330	Identifier	NTA_THROW
>4331	Condition	 
>4332	EqualityExpression	node == NULL
>4333	Identifier	NULL
>4334	Identifier	node
>4335	IdentifierDeclStatement	 
>4336	IdentifierDecl	* node = doc . FindValue ( \"Version\" )
>4337	AssignmentExpr	* node = doc . FindValue ( \"Version\" )
>4338	CallExpression	doc . FindValue ( \"Version\" )
>4339	ArgumentList	\"Version\"
>4340	Argument	\"Version\"
>4341	PrimaryExpression	\"Version\"
>4342	Callee	doc . FindValue
>4343	MemberAccess	doc . FindValue
>4344	Identifier	FindValue
>4345	Identifier	doc
>4346	Identifier	node
>4347	Identifier	node
>4348	IdentifierDeclType	const YAML 
>4349	IfStatement	if ( doc . size ( ) != 3 )
>4350	ExpressionStatement	 
>4351	ShiftExpression	NTA_THROW << \"Invalid network structure file -- contains \" << doc . size ( ) << \" elements\"
>4352	ShiftExpression	\"Invalid network structure file -- contains \" << doc . size ( ) << \" elements\"
>4353	ShiftExpression	doc . size ( ) << \" elements\"
>4354	PrimaryExpression	\" elements\"
>4355	CallExpression	doc . size ( )
>4356	ArgumentList	 
>4357	Callee	doc . size
>4358	MemberAccess	doc . size
>4359	Identifier	size
>4360	Identifier	doc
>4361	PrimaryExpression	\"Invalid network structure file -- contains \"
>4362	Identifier	NTA_THROW
>4363	Condition	 
>4364	EqualityExpression	doc . size ( ) != 3
>4365	PrimaryExpression	3
>4366	CallExpression	doc . size ( )
>4367	ArgumentList	 
>4368	Callee	doc . size
>4369	MemberAccess	doc . size
>4370	Identifier	size
>4371	Identifier	doc
>4372	IfStatement	if ( doc . GetType ( ) != YAML 
>4373	ExpressionStatement	 
>4374	ShiftExpression	NTA_THROW << \"Invalid network structure file -- does not contain a map\"
>4375	PrimaryExpression	\"Invalid network structure file -- does not contain a map\"
>4376	Identifier	NTA_THROW
>4377	Condition	 
>4378	EqualityExpression	doc . GetType ( ) != YAML 
>4379	Identifier	YAML 
>4380	CallExpression	doc . GetType ( )
>4381	ArgumentList	 
>4382	Callee	doc . GetType
>4383	MemberAccess	doc . GetType
>4384	Identifier	GetType
>4385	Identifier	doc
>4386	IfStatement	if ( ! success )
>4387	ExpressionStatement	 
>4388	ShiftExpression	NTA_THROW << \"Unable to find YAML document in network structure file \" << networkStructureFilename
>4389	ShiftExpression	\"Unable to find YAML document in network structure file \" << networkStructureFilename
>4390	Identifier	networkStructureFilename
>4391	PrimaryExpression	\"Unable to find YAML document in network structure file \"
>4392	Identifier	NTA_THROW
>4393	Condition	 
>4394	UnaryOp	! success
>4395	Identifier	success
>4396	UnaryOperator	!
>4397	IdentifierDeclStatement	 
>4398	IdentifierDecl	success = parser . GetNextDocument ( doc )
>4399	AssignmentExpr	success = parser . GetNextDocument ( doc )
>4400	CallExpression	parser . GetNextDocument ( doc )
>4401	ArgumentList	doc
>4402	Argument	doc
>4403	Identifier	doc
>4404	Callee	parser . GetNextDocument
>4405	MemberAccess	parser . GetNextDocument
>4406	Identifier	GetNextDocument
>4407	Identifier	parser
>4408	Identifier	success
>4409	Identifier	success
>4410	IdentifierDeclType	bool
>4411	IdentifierDeclStatement	 
>4412	IdentifierDecl	doc
>4413	Identifier	doc
>4414	IdentifierDeclType	YAML 
>4415	IdentifierDeclStatement	 
>4416	IdentifierDecl	parser ( f )
>4417	Identifier	f
>4418	Identifier	parser
>4419	IdentifierDeclType	YAML 
>4420	IdentifierDeclStatement	 
>4421	IdentifierDecl	f ( networkStructureFilename . c_str ( ) )
>4422	CallExpression	networkStructureFilename . c_str ( )
>4423	ArgumentList	 
>4424	Callee	networkStructureFilename . c_str
>4425	MemberAccess	networkStructureFilename . c_str
>4426	Identifier	c_str
>4427	Identifier	networkStructureFilename
>4428	Identifier	f
>4429	IdentifierDeclType	std 
>4430	IdentifierDeclStatement	 
>4431	IdentifierDecl	networkStructureFilename = Path 
>4432	AssignmentExpr	networkStructureFilename = Path 
>4433	CallExpression	Path 
>4434	ArgumentList	fullPath
>4435	Argument	\"network.yaml\"
>4436	PrimaryExpression	\"network.yaml\"
>4437	Argument	fullPath
>4438	Identifier	fullPath
>4439	Callee	Path 
>4440	Identifier	Path 
>4441	Identifier	networkStructureFilename
>4442	Identifier	networkStructureFilename
>4443	IdentifierDeclType	std 
>4444	IfStatement	if ( ! Path 
>4445	ExpressionStatement	 
>4446	ShiftExpression	NTA_THROW << \"Path \" << fullPath << \" does not exist\"
>4447	ShiftExpression	\"Path \" << fullPath << \" does not exist\"
>4448	ShiftExpression	fullPath << \" does not exist\"
>4449	PrimaryExpression	\" does not exist\"
>4450	Identifier	fullPath
>4451	PrimaryExpression	\"Path \"
>4452	Identifier	NTA_THROW
>4453	Condition	 
>4454	UnaryOp	! Path 
>4455	CallExpression	Path 
>4456	ArgumentList	fullPath
>4457	Argument	fullPath
>4458	Identifier	fullPath
>4459	Callee	Path 
>4460	Identifier	Path 
>4461	UnaryOperator	!
>4462	IdentifierDeclStatement	 
>4463	IdentifierDecl	fullPath = Path 
>4464	AssignmentExpr	fullPath = Path 
>4465	CallExpression	Path 
>4466	ArgumentList	Path 
>4467	Argument	Path 
>4468	CallExpression	Path 
>4469	ArgumentList	name
>4470	Argument	name
>4471	Identifier	name
>4472	Callee	Path 
>4473	Identifier	Path 
>4474	Callee	Path 
>4475	Identifier	Path 
>4476	Identifier	fullPath
>4477	Identifier	fullPath
>4478	IdentifierDeclType	std 
>4479	IfStatement	if ( ! StringUtils 
>4480	ExpressionStatement	 
>4481	ShiftExpression	NTA_THROW << \"loadFromBundle
>4482	PrimaryExpression	\"loadFromBundle
>4483	Identifier	NTA_THROW
>4484	Condition	 
>4485	UnaryOp	! StringUtils 
>4486	CallExpression	StringUtils 
>4487	ArgumentList	name
>4488	Argument	\".nta\"
>4489	PrimaryExpression	\".nta\"
>4490	Argument	name
>4491	Identifier	name
>4492	Callee	StringUtils 
>4493	Identifier	StringUtils 
>4494	UnaryOperator	!
>4568	FunctionDef	Network 
>4569	ParameterList	 
>4570	ReturnType	void
>4571	CompoundStatement	 
>4572	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>4573	ExpressionStatement	 
>4574	CallExpression	regions_ . getByIndex ( i ) . second -> enableProfiling ( )
>4575	ArgumentList	 
>4576	Callee	regions_ . getByIndex ( i ) . second -> enableProfiling
>4577	PtrMemberAccess	regions_ . getByIndex ( i ) . second -> enableProfiling
>4578	Identifier	enableProfiling
>4579	MemberAccess	regions_ . getByIndex ( i ) . second
>4580	Identifier	second
>4581	CallExpression	regions_ . getByIndex ( i )
>4582	ArgumentList	i
>4583	Argument	i
>4584	Identifier	i
>4585	Callee	regions_ . getByIndex
>4586	MemberAccess	regions_ . getByIndex
>4587	Identifier	getByIndex
>4588	Identifier	regions_
>4589	IncDecOp	 
>4590	IncDec	++
>4591	Identifier	i
>4592	Condition	 
>4593	RelationalExpression	i < regions_ . getCount ( )
>4594	CallExpression	regions_ . getCount ( )
>4595	ArgumentList	 
>4596	Callee	regions_ . getCount
>4597	MemberAccess	regions_ . getCount
>4598	Identifier	getCount
>4599	Identifier	regions_
>4600	Identifier	i
>4601	ForInit	 
>4602	IdentifierDeclStatement	size_t i = 0 ;
>4603	IdentifierDecl	i = 0
>4604	AssignmentExpr	i = 0
>4605	PrimaryExpression	0
>4606	Identifier	i
>4607	Identifier	i
>4608	IdentifierDeclType	size_t
>4617	FunctionDef	Network 
>4618	ParameterList	 
>4619	ReturnType	void
>4620	CompoundStatement	 
>4621	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>4622	ExpressionStatement	 
>4623	CallExpression	regions_ . getByIndex ( i ) . second -> disableProfiling ( )
>4624	ArgumentList	 
>4625	Callee	regions_ . getByIndex ( i ) . second -> disableProfiling
>4626	PtrMemberAccess	regions_ . getByIndex ( i ) . second -> disableProfiling
>4627	Identifier	disableProfiling
>4628	MemberAccess	regions_ . getByIndex ( i ) . second
>4629	Identifier	second
>4630	CallExpression	regions_ . getByIndex ( i )
>4631	ArgumentList	i
>4632	Argument	i
>4633	Identifier	i
>4634	Callee	regions_ . getByIndex
>4635	MemberAccess	regions_ . getByIndex
>4636	Identifier	getByIndex
>4637	Identifier	regions_
>4638	IncDecOp	 
>4639	IncDec	++
>4640	Identifier	i
>4641	Condition	 
>4642	RelationalExpression	i < regions_ . getCount ( )
>4643	CallExpression	regions_ . getCount ( )
>4644	ArgumentList	 
>4645	Callee	regions_ . getCount
>4646	MemberAccess	regions_ . getCount
>4647	Identifier	getCount
>4648	Identifier	regions_
>4649	Identifier	i
>4650	ForInit	 
>4651	IdentifierDeclStatement	size_t i = 0 ;
>4652	IdentifierDecl	i = 0
>4653	AssignmentExpr	i = 0
>4654	PrimaryExpression	0
>4655	Identifier	i
>4656	Identifier	i
>4657	IdentifierDeclType	size_t
>4666	FunctionDef	Network 
>4667	ParameterList	 
>4668	ReturnType	void
>4669	CompoundStatement	 
>4670	ForStatement	for ( size_t i = 0 ; i < regions_ . getCount ( ) ; i ++ )
>4671	ExpressionStatement	 
>4672	CallExpression	regions_ . getByIndex ( i ) . second -> resetProfiling ( )
>4673	ArgumentList	 
>4674	Callee	regions_ . getByIndex ( i ) . second -> resetProfiling
>4675	PtrMemberAccess	regions_ . getByIndex ( i ) . second -> resetProfiling
>4676	Identifier	resetProfiling
>4677	MemberAccess	regions_ . getByIndex ( i ) . second
>4678	Identifier	second
>4679	CallExpression	regions_ . getByIndex ( i )
>4680	ArgumentList	i
>4681	Argument	i
>4682	Identifier	i
>4683	Callee	regions_ . getByIndex
>4684	MemberAccess	regions_ . getByIndex
>4685	Identifier	getByIndex
>4686	Identifier	regions_
>4687	IncDecOp	 
>4688	IncDec	++
>4689	Identifier	i
>4690	Condition	 
>4691	RelationalExpression	i < regions_ . getCount ( )
>4692	CallExpression	regions_ . getCount ( )
>4693	ArgumentList	 
>4694	Callee	regions_ . getCount
>4695	MemberAccess	regions_ . getCount
>4696	Identifier	getCount
>4697	Identifier	regions_
>4698	Identifier	i
>4699	ForInit	 
>4700	IdentifierDeclStatement	size_t i = 0 ;
>4701	IdentifierDecl	i = 0
>4702	AssignmentExpr	i = 0
>4703	PrimaryExpression	0
>4704	Identifier	i
>4705	Identifier	i
>4706	IdentifierDeclType	size_t
<3=5,4
<5=13,6
<6=7
<7=11,8
<8=9
<9=10
<11=12
<13=14
<14=16,15
<16=17
<22=27,23
<23=24
<24=26,25
<27=42,35,28
<28=29
<29=33,30
<30=31
<31=32
<33=34
<35=36
<36=40,37
<37=38
<38=39
<40=41
<42=43
<43=45,44
<45=46
<52=55,54,53
<55=73,69,65,61,56
<56=57
<57=59,58
<59=60
<61=62
<62=64,63
<65=66
<66=68,67
<69=70
<70=72,71
<73=74
<74=76,75
<85=87,86
<87=225,180,135,88
<88=127,118,115,89
<89=101,100,96,90
<90=91
<91=93,92
<93=95,94
<96=97
<97=99,98
<101=102
<102=114,113,103
<103=112,104
<104=108,105
<105=106
<106=107
<108=109
<109=111,110
<115=117,116
<118=119
<119=126,120
<120=122,121
<122=123
<123=125,124
<127=128
<128=129
<129=134,133,130
<130=132,131
<135=172,163,160,136
<136=144,137
<137=138
<138=140,139
<140=141
<141=143,142
<144=145
<145=159,158,146
<146=157,147
<147=149,148
<149=153,150
<150=151
<151=152
<153=154
<154=156,155
<160=162,161
<163=164
<164=171,165
<165=167,166
<167=168
<168=170,169
<172=173
<173=174
<174=179,178,175
<175=177,176
<180=217,208,205,181
<181=189,182
<182=183
<183=185,184
<185=186
<186=188,187
<189=190
<190=204,203,191
<191=202,192
<192=194,193
<194=198,195
<195=196
<196=197
<198=199
<199=201,200
<205=207,206
<208=209
<209=216,210
<210=212,211
<212=213
<213=215,214
<217=218
<218=219
<219=224,223,220
<220=222,221
<225=226
<226=230,227
<227=228
<228=229
<230=231
<245=257,256,246
<246=253,250,247
<247=249,248
<250=252,251
<253=255,254
<257=295,282,271,267,260,258
<258=259
<260=261
<261=265,262
<262=263
<263=264
<265=266
<267=268
<268=270,269
<271=272
<272=278,273
<273=276,274
<274=275
<276=277
<278=279
<279=281,280
<282=283
<283=294,293,284
<284=292,285
<285=291,286
<286=290,287
<287=289,288
<295=304,296
<296=297
<297=303,298
<298=302,299
<299=301,300
<304=305
<305=309,306
<306=307
<307=308
<309=310
<310=312,311
<325=331,330,326
<326=327
<327=329,328
<331=354,350,341,332
<332=333
<333=339,334
<334=337,335
<335=336
<337=338
<339=340
<341=342
<342=346,343
<343=344
<344=345
<346=347
<347=349,348
<350=351
<351=353,352
<354=355
<355=365,364,356
<356=363,357
<357=359,358
<359=360
<360=362,361
<374=392,391,375
<375=388,385,382,379,376
<376=378,377
<379=381,380
<382=384,383
<385=387,386
<388=390,389
<392=461,443,432,417,406,402,395,393
<393=394
<395=396
<396=400,397
<397=398
<398=399
<400=401
<402=403
<403=405,404
<406=407
<407=413,408
<408=411,409
<409=410
<411=412
<413=414
<414=416,415
<417=418
<418=431,430,419
<419=429,420
<420=428,421
<421=427,422
<422=426,423
<423=425,424
<432=433
<433=442,441,434
<434=440,435
<435=439,436
<436=438,437
<443=452,444
<444=445
<445=451,446
<446=450,447
<447=449,448
<452=453
<453=460,454
<454=458,455
<455=456
<456=457
<458=459
<461=470,462
<462=463
<463=469,464
<464=468,465
<465=467,466
<470=471
<471=475,472
<472=473
<473=474
<475=476
<476=478,477
<495=504,503,496
<496=500,497
<497=499,498
<500=502,501
<504=692,678,666,630,519,510,505
<505=506
<506=508,507
<508=509
<510=511
<511=515,512
<512=513
<513=514
<515=516
<516=518,517
<519=622,613,610,520
<520=603,582,578,565,521
<521=550,538,522
<522=523
<523=536,524
<524=525
<525=526
<526=530,527
<527=528
<528=529
<530=531
<531=533,532
<533=535,534
<536=537
<538=539
<539=540
<540=544,541
<541=542
<542=543
<544=545
<545=547,546
<547=549,548
<550=551
<551=555,552
<552=554,553
<555=564,556
<556=558,557
<558=559
<559=561,560
<561=563,562
<565=566
<566=577,567
<567=571,568
<568=569
<569=570
<571=572
<572=574,573
<574=576,575
<578=579
<579=581,580
<582=587,583
<583=584
<584=586,585
<587=588
<588=595,589
<589=591,590
<591=592
<592=594,593
<595=599,596
<596=597
<597=598
<599=600
<600=602,601
<603=604
<604=609,608,605
<605=607,606
<610=612,611
<613=614
<614=621,615
<615=617,616
<617=618
<618=620,619
<622=623
<623=624
<624=629,628,625
<625=627,626
<630=662,631
<631=643,632
<632=633
<633=639,634
<634=635
<635=636
<636=638,637
<639=640
<640=642,641
<643=656,644
<644=645
<645=655,646
<646=654,647
<647=653,648
<648=652,649
<649=651,650
<656=657
<657=659,658
<659=661,660
<662=663
<663=665,664
<666=667
<667=677,676,668
<668=675,669
<669=671,670
<671=672
<672=674,673
<678=679
<679=691,690,680
<680=689,681
<681=688,682
<682=684,683
<684=685
<685=687,686
<692=704,693
<693=694
<694=703,695
<695=702,696
<696=698,697
<698=699
<699=701,700
<704=705
<705=707,706
<707=709,708
<709=710
<710=712,711
<738=741,740,739
<741=749,742
<742=743
<743=748,744
<744=746,745
<746=747
<749=750
<750=755,751
<751=753,752
<753=754
<763=772,771,764
<764=768,765
<765=767,766
<768=770,769
<772=796,782,773
<773=774
<774=780,775
<775=778,776
<776=777
<778=779
<780=781
<782=783
<783=795,794,784
<784=793,785
<785=789,786
<786=787
<787=788
<789=790
<790=792,791
<796=805,797
<797=798
<798=804,799
<799=803,800
<800=802,801
<805=806
<806=815,807
<807=811,808
<808=809
<809=810
<811=812
<812=814,813
<825=831,830,826
<826=827
<827=829,828
<831=905,891,887,834,832
<832=833
<834=879,870,867,835
<835=836
<836=847,837
<837=838
<838=839
<839=843,840
<840=841
<841=842
<843=844
<844=846,845
<847=848
<848=857,849
<849=851,850
<851=852
<852=854,853
<854=856,855
<857=861,858
<858=859
<859=860
<861=862
<862=864,863
<864=866,865
<867=869,868
<870=871
<871=878,872
<872=874,873
<874=875
<875=877,876
<879=880
<880=881
<881=886,885,882
<882=884,883
<887=888
<888=890,889
<891=892
<892=904,903,893
<893=902,894
<894=898,895
<895=896
<896=897
<898=899
<899=901,900
<905=914,906
<906=907
<907=913,908
<908=912,909
<909=911,910
<914=915
<915=924,916
<916=920,917
<917=918
<918=919
<920=921
<921=923,922
<941=947,946,942
<942=943
<943=945,944
<947=1109,1095,1079,1072,1063,1051,1004,957,952,951,949,948
<949=950
<952=953
<953=955,954
<955=956
<957=989,985,982,958
<958=959
<959=971,962,960
<960=961
<962=963
<963=967,964
<964=965
<965=966
<967=968
<968=970,969
<971=972
<972=974,973
<974=976,975
<976=977
<977=979,978
<979=981,980
<982=984,983
<985=986
<986=988,987
<989=990
<990=991
<991=1003,1002,992
<992=1001,993
<993=995,994
<995=997,996
<997=998
<998=1000,999
<1004=1042,1039,1005
<1005=1025,1006
<1006=1016,1007
<1007=1008
<1008=1012,1009
<1009=1010
<1010=1011
<1012=1013
<1013=1015,1014
<1016=1017
<1017=1024,1018
<1018=1020,1019
<1020=1021
<1021=1023,1022
<1025=1026
<1026=1038,1037,1027
<1027=1036,1028
<1028=1032,1029
<1029=1030
<1030=1031
<1032=1033
<1033=1035,1034
<1039=1041,1040
<1042=1043
<1043=1050,1044
<1044=1046,1045
<1046=1047
<1047=1049,1048
<1051=1052
<1052=1062,1061,1053
<1053=1060,1054
<1054=1056,1055
<1056=1057
<1057=1059,1058
<1063=1064
<1064=1068,1065
<1065=1066
<1066=1067
<1068=1069
<1069=1071,1070
<1072=1073
<1073=1075,1074
<1075=1076
<1076=1078,1077
<1079=1088,1080
<1080=1081
<1081=1087,1082
<1082=1086,1083
<1083=1085,1084
<1088=1089
<1089=1091,1090
<1091=1092
<1092=1094,1093
<1095=1096
<1096=1108,1107,1097
<1097=1106,1098
<1098=1102,1099
<1099=1100
<1100=1101
<1102=1103
<1103=1105,1104
<1109=1118,1110
<1110=1111
<1111=1117,1112
<1112=1116,1113
<1113=1115,1114
<1118=1119
<1119=1128,1120
<1120=1124,1121
<1121=1122
<1122=1123
<1124=1125
<1125=1127,1126
<1152=1173,1172,1153
<1153=1169,1166,1163,1160,1157,1154
<1154=1156,1155
<1157=1159,1158
<1160=1162,1161
<1163=1165,1164
<1166=1168,1167
<1169=1171,1170
<1173=1362,1348,1328,1314,1302,1295,1281,1267,1252,1240,1236,1217,1203,1187,1174
<1174=1175
<1175=1183,1176
<1176=1181,1179,1177
<1177=1178
<1179=1180
<1181=1182
<1183=1184
<1184=1186,1185
<1187=1199,1188
<1188=1189
<1189=1190
<1190=1198,1191
<1191=1197,1192
<1192=1196,1193
<1193=1195,1194
<1199=1200
<1200=1202,1201
<1203=1204
<1204=1216,1215,1205
<1205=1214,1206
<1206=1210,1207
<1207=1208
<1208=1209
<1210=1211
<1211=1213,1212
<1217=1232,1223,1218
<1218=1219
<1219=1220
<1220=1222,1221
<1223=1224
<1224=1231,1225
<1225=1227,1226
<1227=1228
<1228=1230,1229
<1232=1233
<1233=1235,1234
<1236=1237
<1237=1239,1238
<1240=1241
<1241=1251,1250,1242
<1242=1249,1243
<1243=1245,1244
<1245=1246
<1246=1248,1247
<1252=1263,1253
<1253=1254
<1254=1262,1255
<1255=1261,1256
<1256=1260,1257
<1257=1259,1258
<1263=1264
<1264=1266,1265
<1267=1268
<1268=1280,1279,1269
<1269=1278,1270
<1270=1274,1271
<1271=1272
<1272=1273
<1274=1275
<1275=1277,1276
<1281=1291,1282
<1282=1283
<1283=1290,1284
<1284=1286,1285
<1286=1287
<1287=1289,1288
<1291=1292
<1292=1294,1293
<1295=1296
<1296=1301,1300,1297
<1297=1299,1298
<1302=1303
<1303=1313,1312,1304
<1304=1311,1305
<1305=1307,1306
<1307=1308
<1308=1310,1309
<1314=1315
<1315=1327,1326,1316
<1316=1325,1317
<1317=1321,1318
<1318=1319
<1319=1320
<1321=1322
<1322=1324,1323
<1328=1337,1329
<1329=1330
<1330=1336,1331
<1331=1335,1332
<1332=1334,1333
<1337=1338
<1338=1347,1339
<1339=1343,1340
<1340=1341
<1341=1342
<1343=1344
<1344=1346,1345
<1348=1349
<1349=1361,1360,1350
<1350=1359,1351
<1351=1355,1352
<1352=1353
<1353=1354
<1355=1356
<1356=1358,1357
<1362=1371,1363
<1363=1364
<1364=1370,1365
<1365=1369,1366
<1366=1368,1367
<1371=1372
<1372=1381,1373
<1373=1377,1374
<1374=1375
<1375=1376
<1377=1378
<1378=1380,1379
<1413=1428,1427,1414
<1414=1424,1421,1418,1415
<1415=1417,1416
<1418=1420,1419
<1421=1423,1422
<1424=1426,1425
<1428=1628,1614,1594,1580,1568,1556,1552,1533,1519,1503,1496,1482,1466,1438,1429
<1429=1430
<1430=1434,1431
<1431=1432
<1432=1433
<1434=1435
<1435=1437,1436
<1438=1462,1439
<1439=1440
<1440=1461,1441
<1441=1460,1442
<1442=1459,1443
<1443=1458,1444
<1444=1457,1445
<1445=1456,1446
<1446=1455,1447
<1447=1454,1448
<1448=1450,1449
<1450=1451
<1451=1453,1452
<1462=1463
<1463=1465,1464
<1466=1467
<1467=1481,1480,1468
<1468=1479,1469
<1469=1475,1470
<1470=1473,1471
<1471=1472
<1473=1474
<1475=1476
<1476=1478,1477
<1482=1492,1483
<1483=1484
<1484=1491,1485
<1485=1487,1486
<1487=1488
<1488=1490,1489
<1492=1493
<1493=1495,1494
<1496=1497
<1497=1502,1501,1498
<1498=1500,1499
<1503=1515,1504
<1504=1505
<1505=1506
<1506=1514,1507
<1507=1513,1508
<1508=1512,1509
<1509=1511,1510
<1515=1516
<1516=1518,1517
<1519=1520
<1520=1532,1531,1521
<1521=1530,1522
<1522=1526,1523
<1523=1524
<1524=1525
<1526=1527
<1527=1529,1528
<1533=1548,1539,1534
<1534=1535
<1535=1536
<1536=1538,1537
<1539=1540
<1540=1547,1541
<1541=1543,1542
<1543=1544
<1544=1546,1545
<1548=1549
<1549=1551,1550
<1552=1553
<1553=1555,1554
<1556=1557
<1557=1567,1566,1558
<1558=1565,1559
<1559=1561,1560
<1561=1562
<1562=1564,1563
<1568=1569
<1569=1579,1578,1570
<1570=1577,1571
<1571=1573,1572
<1573=1574
<1574=1576,1575
<1580=1581
<1581=1593,1592,1582
<1582=1591,1583
<1583=1587,1584
<1584=1585
<1585=1586
<1587=1588
<1588=1590,1589
<1594=1603,1595
<1595=1596
<1596=1602,1597
<1597=1601,1598
<1598=1600,1599
<1603=1604
<1604=1613,1605
<1605=1609,1606
<1606=1607
<1607=1608
<1609=1610
<1610=1612,1611
<1614=1615
<1615=1627,1626,1616
<1616=1625,1617
<1617=1621,1618
<1618=1619
<1619=1620
<1621=1622
<1622=1624,1623
<1628=1637,1629
<1629=1630
<1630=1636,1631
<1631=1635,1632
<1632=1634,1633
<1637=1638
<1638=1647,1639
<1639=1643,1640
<1640=1641
<1641=1642
<1643=1644
<1644=1646,1645
<1678=1684,1683,1679
<1679=1680
<1680=1682,1681
<1684=1871,1860,1833,1686,1685
<1686=1825,1821,1818,1687
<1687=1814,1743,1688
<1688=1735,1726,1723,1689
<1689=1709,1690
<1690=1691
<1691=1703,1692
<1692=1701,1699,1693
<1693=1694
<1694=1696,1695
<1696=1698,1697
<1699=1700
<1701=1702
<1703=1704
<1704=1706,1705
<1706=1708,1707
<1709=1710
<1710=1722,1721,1711
<1711=1720,1712
<1712=1716,1713
<1713=1714
<1714=1715
<1716=1717
<1717=1719,1718
<1723=1725,1724
<1726=1727
<1727=1734,1728
<1728=1730,1729
<1730=1731
<1731=1733,1732
<1735=1736
<1736=1737
<1737=1742,1741,1738
<1738=1740,1739
<1743=1806,1802,1799,1744
<1744=1745
<1745=1784,1773,1770,1746
<1746=1761,1754,1747
<1747=1748
<1748=1750,1749
<1750=1751
<1751=1753,1752
<1754=1755
<1755=1757,1756
<1757=1758
<1758=1760,1759
<1761=1762
<1762=1769,1768,1763
<1763=1767,1764
<1764=1766,1765
<1770=1772,1771
<1773=1774
<1774=1783,1775
<1775=1777,1776
<1777=1778
<1778=1780,1779
<1780=1782,1781
<1784=1785
<1785=1786
<1786=1798,1797,1787
<1787=1796,1788
<1788=1790,1789
<1790=1791
<1791=1793,1792
<1793=1795,1794
<1799=1801,1800
<1802=1803
<1803=1805,1804
<1806=1807
<1807=1808
<1808=1813,1812,1809
<1809=1811,1810
<1814=1815
<1815=1817,1816
<1818=1820,1819
<1821=1822
<1822=1824,1823
<1825=1826
<1826=1827
<1827=1832,1831,1828
<1828=1830,1829
<1833=1834
<1834=1847,1835
<1835=1846,1836
<1836=1845,1837
<1837=1844,1838
<1838=1840,1839
<1840=1841
<1841=1843,1842
<1847=1858,1848
<1848=1849
<1849=1850
<1850=1857,1851
<1851=1853,1852
<1853=1854
<1854=1856,1855
<1858=1859
<1860=1862,1861
<1862=1863
<1863=1865,1864
<1865=1867,1866
<1867=1868
<1868=1870,1869
<1871=1878,1872
<1872=1873
<1873=1874
<1874=1876,1875
<1876=1877
<1878=1879
<1879=1881,1880
<1908=1911,1910,1909
<1911=2350,2349,2348,2347,2346,2345,2344,2343,2342,2341,2340,2335,2326,2322,2257,2165,2056,2011,1966,1921,1916,1912
<1912=1913
<1913=1915,1914
<1916=1917
<1917=1919,1918
<1919=1920
<1921=1958,1949,1946,1922
<1922=1930,1923
<1923=1924
<1924=1926,1925
<1926=1927
<1927=1929,1928
<1930=1931
<1931=1945,1944,1932
<1932=1943,1933
<1933=1935,1934
<1935=1939,1936
<1936=1937
<1937=1938
<1939=1940
<1940=1942,1941
<1946=1948,1947
<1949=1950
<1950=1957,1951
<1951=1953,1952
<1953=1954
<1954=1956,1955
<1958=1959
<1959=1960
<1960=1965,1964,1961
<1961=1963,1962
<1966=2003,1994,1991,1967
<1967=1975,1968
<1968=1969
<1969=1971,1970
<1971=1972
<1972=1974,1973
<1975=1976
<1976=1990,1989,1977
<1977=1988,1978
<1978=1980,1979
<1980=1984,1981
<1981=1982
<1982=1983
<1984=1985
<1985=1987,1986
<1991=1993,1992
<1994=1995
<1995=2002,1996
<1996=1998,1997
<1998=1999
<1999=2001,2000
<2003=2004
<2004=2005
<2005=2010,2009,2006
<2006=2008,2007
<2011=2048,2039,2036,2012
<2012=2020,2013
<2013=2014
<2014=2016,2015
<2016=2017
<2017=2019,2018
<2020=2021
<2021=2035,2034,2022
<2022=2033,2023
<2023=2025,2024
<2025=2029,2026
<2026=2027
<2027=2028
<2029=2030
<2030=2032,2031
<2036=2038,2037
<2039=2040
<2040=2047,2041
<2041=2043,2042
<2043=2044
<2044=2046,2045
<2048=2049
<2049=2050
<2050=2055,2054,2051
<2051=2053,2052
<2056=2157,2148,2145,2057
<2057=2129,2117,2089,2058
<2058=2080,2059
<2059=2060
<2060=2061
<2061=2079,2062
<2062=2078,2063
<2063=2072,2064
<2064=2071,2065
<2065=2067,2066
<2067=2068
<2068=2070,2069
<2072=2074,2073
<2074=2075
<2075=2077,2076
<2080=2081
<2081=2088,2082
<2082=2084,2083
<2084=2085
<2085=2087,2086
<2089=2110,2090
<2090=2091
<2091=2092
<2092=2109,2093
<2093=2108,2094
<2094=2107,2095
<2095=2101,2096
<2096=2100,2097
<2097=2099,2098
<2101=2103,2102
<2103=2104
<2104=2106,2105
<2110=2111
<2111=2113,2112
<2113=2114
<2114=2116,2115
<2117=2118
<2118=2128,2127,2119
<2119=2126,2120
<2120=2122,2121
<2122=2123
<2123=2125,2124
<2129=2130
<2130=2144,2143,2131
<2131=2142,2132
<2132=2134,2133
<2134=2138,2135
<2135=2136
<2136=2137
<2138=2139
<2139=2141,2140
<2145=2147,2146
<2148=2149
<2149=2156,2150
<2150=2152,2151
<2152=2153
<2153=2155,2154
<2157=2158
<2158=2159
<2159=2164,2163,2160
<2160=2162,2161
<2165=2253,2166
<2166=2249,2243,2176,2167
<2167=2168
<2168=2175,2169
<2169=2171,2170
<2171=2172
<2172=2174,2173
<2176=2235,2226,2223,2177
<2177=2207,2195,2184,2178
<2178=2179
<2179=2183,2180
<2180=2182,2181
<2184=2186,2185
<2186=2187
<2187=2189,2188
<2189=2191,2190
<2191=2192
<2192=2194,2193
<2195=2196
<2196=2206,2205,2197
<2197=2204,2198
<2198=2200,2199
<2200=2201
<2201=2203,2202
<2207=2208
<2208=2222,2221,2209
<2209=2220,2210
<2210=2212,2211
<2212=2216,2213
<2213=2214
<2214=2215
<2216=2217
<2217=2219,2218
<2223=2225,2224
<2226=2227
<2227=2234,2228
<2228=2230,2229
<2230=2231
<2231=2233,2232
<2235=2236
<2236=2237
<2237=2242,2241,2238
<2238=2240,2239
<2243=2244
<2244=2248,2245
<2245=2247,2246
<2249=2250
<2250=2252,2251
<2253=2254
<2254=2256,2255
<2257=2314,2258
<2258=2310,2306,2259
<2259=2298,2289,2286,2260
<2260=2270,2261
<2261=2262
<2262=2269,2263
<2263=2265,2264
<2265=2266
<2266=2268,2267
<2270=2271
<2271=2285,2284,2272
<2272=2283,2273
<2273=2275,2274
<2275=2279,2276
<2276=2277
<2277=2278
<2279=2280
<2280=2282,2281
<2286=2288,2287
<2289=2290
<2290=2297,2291
<2291=2293,2292
<2293=2294
<2294=2296,2295
<2298=2299
<2299=2300
<2300=2305,2304,2301
<2301=2303,2302
<2306=2307
<2307=2309,2308
<2310=2311
<2311=2313,2312
<2314=2315
<2315=2319,2316
<2316=2318,2317
<2319=2321,2320
<2322=2323
<2323=2325,2324
<2326=2327
<2327=2334,2333,2328
<2328=2332,2329
<2329=2331,2330
<2335=2336
<2336=2338,2337
<2338=2339
<2350=2352,2351
<2352=2353
<2377=2380,2379,2378
<2380=2381
<2381=2382
<2387=2390,2389,2388
<2390=2391
<2391=2392
<2397=2400,2399,2398
<2400=2430,2403,2401
<2401=2402
<2403=2421,2418,2404
<2404=2405
<2405=2407,2406
<2407=2408
<2408=2410,2409
<2410=2412,2411
<2412=2413
<2413=2415,2414
<2415=2417,2416
<2418=2420,2419
<2421=2422
<2422=2429,2423
<2423=2425,2424
<2425=2426
<2426=2428,2427
<2430=2431
<2431=2436,2435,2432
<2432=2434,2433
<2446=2449,2448,2447
<2449=2459,2450
<2450=2451
<2451=2453,2452
<2453=2455,2454
<2455=2456
<2456=2458,2457
<2459=2462,2460
<2460=2461
<2462=2463
<2463=2465,2464
<2465=2467,2466
<2467=2468
<2468=2470,2469
<2476=2482,2481,2477
<2477=2478
<2478=2480,2479
<2482=2487,2483
<2483=2484
<2484=2486,2485
<2487=2505,2488
<2488=2489
<2489=2504,2490
<2490=2503,2491
<2491=2502,2492
<2492=2501,2493
<2493=2495,2494
<2495=2497,2496
<2497=2498
<2498=2500,2499
<2505=2506
<2506=2513,2507
<2507=2509,2508
<2509=2510
<2510=2512,2511
<2521=2527,2526,2522
<2522=2523
<2523=2525,2524
<2527=2532,2528
<2528=2529
<2529=2531,2530
<2532=2550,2533
<2533=2534
<2534=2549,2535
<2535=2548,2536
<2536=2547,2537
<2537=2546,2538
<2538=2540,2539
<2540=2542,2541
<2542=2543
<2543=2545,2544
<2550=2551
<2551=2558,2552
<2552=2554,2553
<2554=2555
<2555=2557,2556
<2566=2569,2568,2567
<2569=2570
<2570=2571
<2576=2579,2578,2577
<2579=2580
<2580=2581
<2586=2592,2591,2587
<2587=2588
<2588=2590,2589
<2592=2593
<2593=2632,2623,2594
<2594=2595
<2595=2614,2606,2596
<2596=2597
<2597=2598
<2598=2599
<2599=2605,2600
<2600=2604,2601
<2601=2603,2602
<2606=2607
<2607=2608
<2608=2612,2609
<2609=2610
<2610=2611
<2612=2613
<2614=2615
<2615=2621,2616
<2616=2619,2617
<2617=2618
<2619=2620
<2621=2622
<2623=2624
<2624=2625
<2625=2631,2626
<2626=2630,2627
<2627=2629,2628
<2632=2633
<2633=2639,2634
<2634=2637,2635
<2635=2636
<2637=2638
<2639=2640
<2646=2652,2651,2647
<2647=2648
<2648=2650,2649
<2652=2653
<2653=2654
<2654=2661,2655
<2655=2659,2656
<2656=2657
<2657=2658
<2659=2660
<2661=2665,2662
<2662=2663
<2663=2664
<2665=2666
<2673=2679,2678,2674
<2674=2675
<2675=2677,2676
<2679=3322,3305,3291,3247,3240,2759,2680
<2680=2751,2742,2739,2681
<2681=2725,2716,2704,2691,2682
<2682=2683
<2683=2687,2684
<2684=2685
<2685=2686
<2687=2688
<2688=2690,2689
<2691=2692
<2692=2703,2702,2693
<2693=2701,2694
<2694=2700,2695
<2695=2697,2696
<2697=2699,2698
<2704=2705
<2705=2715,2714,2706
<2706=2713,2707
<2707=2711,2708
<2708=2709
<2709=2710
<2711=2712
<2716=2717
<2717=2724,2723,2718
<2718=2722,2719
<2719=2721,2720
<2725=2726
<2726=2738,2737,2727
<2727=2736,2728
<2728=2732,2729
<2729=2730
<2730=2731
<2732=2733
<2733=2735,2734
<2739=2741,2740
<2742=2743
<2743=2750,2744
<2744=2746,2745
<2746=2747
<2747=2749,2748
<2751=2752
<2752=2753
<2753=2758,2757,2754
<2754=2756,2755
<2759=3236,3232,3222,3212,3043,3039,3029,2802,2798,2794,2790,2776,2767,2760
<2760=2761
<2761=2763,2762
<2763=2764
<2764=2766,2765
<2767=2768
<2768=2775,2769
<2769=2771,2770
<2771=2772
<2772=2774,2773
<2776=2777
<2777=2786,2778
<2778=2779
<2779=2780
<2780=2782,2781
<2782=2783
<2783=2785,2784
<2786=2787
<2787=2789,2788
<2790=2791
<2791=2793,2792
<2794=2795
<2795=2797,2796
<2798=2799
<2799=2801,2800
<2802=3021,3012,3009,2803
<2803=2993,2981,2804
<2804=2968,2959,2956,2805
<2805=2942,2806
<2806=2929,2920,2917,2807
<2807=2906,2902,2887,2872,2857,2842,2827,2812,2808
<2808=2809
<2809=2811,2810
<2812=2813
<2813=2826,2814
<2814=2825,2815
<2815=2824,2816
<2816=2823,2817
<2817=2819,2818
<2819=2820
<2820=2822,2821
<2827=2828
<2828=2841,2829
<2829=2840,2830
<2830=2839,2831
<2831=2838,2832
<2832=2834,2833
<2834=2835
<2835=2837,2836
<2842=2843
<2843=2856,2844
<2844=2855,2845
<2845=2854,2846
<2846=2853,2847
<2847=2849,2848
<2849=2850
<2850=2852,2851
<2857=2858
<2858=2871,2859
<2859=2870,2860
<2860=2869,2861
<2861=2868,2862
<2862=2864,2863
<2864=2865
<2865=2867,2866
<2872=2873
<2873=2886,2874
<2874=2885,2875
<2875=2884,2876
<2876=2883,2877
<2877=2879,2878
<2879=2880
<2880=2882,2881
<2887=2888
<2888=2901,2889
<2889=2900,2890
<2890=2899,2891
<2891=2898,2892
<2892=2894,2893
<2894=2895
<2895=2897,2896
<2902=2903
<2903=2905,2904
<2906=2907
<2907=2916,2915,2908
<2908=2914,2909
<2909=2913,2910
<2910=2912,2911
<2917=2919,2918
<2920=2921
<2921=2928,2922
<2922=2924,2923
<2924=2925
<2925=2927,2926
<2929=2930
<2930=2931
<2931=2941,2940,2932
<2932=2939,2933
<2933=2935,2934
<2935=2936
<2936=2938,2937
<2942=2943
<2943=2955,2954,2944
<2944=2953,2945
<2945=2947,2946
<2947=2948
<2948=2950,2949
<2950=2952,2951
<2956=2958,2957
<2959=2960
<2960=2967,2961
<2961=2963,2962
<2963=2964
<2964=2966,2965
<2968=2969
<2969=2970
<2970=2980,2979,2971
<2971=2978,2972
<2972=2974,2973
<2974=2975
<2975=2977,2976
<2981=2982
<2982=2992,2991,2983
<2983=2990,2984
<2984=2986,2985
<2986=2987
<2987=2989,2988
<2993=2994
<2994=3008,3007,2995
<2995=3006,2996
<2996=2998,2997
<2998=3002,2999
<2999=3000
<3000=3001
<3002=3003
<3003=3005,3004
<3009=3011,3010
<3012=3013
<3013=3020,3014
<3014=3016,3015
<3016=3017
<3017=3019,3018
<3021=3022
<3022=3023
<3023=3028,3027,3024
<3024=3026,3025
<3029=3030
<3030=3038,3031
<3031=3037,3032
<3032=3036,3033
<3033=3035,3034
<3039=3040
<3040=3042,3041
<3043=3204,3195,3192,3044
<3044=3178,3169,3165,3153,3138,3123,3113,3101,3068,3064,3049,3045
<3045=3046
<3046=3048,3047
<3049=3050
<3050=3063,3051
<3051=3062,3052
<3052=3061,3053
<3053=3060,3054
<3054=3058,3055
<3055=3056
<3056=3057
<3058=3059
<3064=3065
<3065=3067,3066
<3068=3088,3079,3076,3069
<3069=3070
<3070=3071
<3071=3075,3072
<3072=3074,3073
<3076=3078,3077
<3079=3080
<3080=3087,3081
<3081=3083,3082
<3083=3084
<3084=3086,3085
<3088=3089
<3089=3090
<3090=3100,3099,3091
<3091=3098,3092
<3092=3094,3093
<3094=3095
<3095=3097,3096
<3101=3102
<3102=3112,3111,3103
<3103=3110,3104
<3104=3106,3105
<3106=3107
<3107=3109,3108
<3113=3114
<3114=3122,3115
<3115=3121,3116
<3116=3120,3117
<3117=3119,3118
<3123=3124
<3124=3137,3125
<3125=3136,3126
<3126=3135,3127
<3127=3134,3128
<3128=3130,3129
<3130=3131
<3131=3133,3132
<3138=3139
<3139=3152,3140
<3140=3151,3141
<3141=3150,3142
<3142=3149,3143
<3143=3145,3144
<3145=3146
<3146=3148,3147
<3153=3154
<3154=3164,3155
<3155=3163,3156
<3156=3162,3157
<3157=3161,3158
<3158=3160,3159
<3165=3166
<3166=3168,3167
<3169=3170
<3170=3177,3176,3171
<3171=3175,3172
<3172=3174,3173
<3178=3179
<3179=3191,3190,3180
<3180=3189,3181
<3181=3185,3182
<3182=3183
<3183=3184
<3185=3186
<3186=3188,3187
<3192=3194,3193
<3195=3196
<3196=3203,3197
<3197=3199,3198
<3199=3200
<3200=3202,3201
<3204=3205
<3205=3206
<3206=3211,3210,3207
<3207=3209,3208
<3212=3213
<3213=3221,3214
<3214=3220,3215
<3215=3219,3216
<3216=3218,3217
<3222=3223
<3223=3231,3224
<3224=3230,3225
<3225=3229,3226
<3226=3228,3227
<3232=3233
<3233=3235,3234
<3236=3237
<3237=3239,3238
<3240=3241
<3241=3245,3242
<3242=3243
<3243=3244
<3245=3246
<3247=3284,3248
<3248=3256,3249
<3249=3250
<3250=3254,3251
<3251=3252
<3252=3253
<3254=3255
<3256=3266,3257
<3257=3258
<3258=3259
<3259=3265,3260
<3260=3264,3261
<3261=3263,3262
<3266=3267
<3267=3276,3268
<3268=3275,3269
<3269=3273,3270
<3270=3271
<3271=3272
<3273=3274
<3276=3283,3277
<3277=3281,3278
<3278=3279
<3279=3280
<3281=3282
<3284=3285
<3285=3289,3286
<3286=3287
<3287=3288
<3289=3290
<3291=3292
<3292=3304,3303,3293
<3293=3302,3294
<3294=3300,3295
<3295=3298,3296
<3296=3297
<3298=3299
<3300=3301
<3305=3306
<3306=3321,3320,3307
<3307=3319,3308
<3308=3317,3309
<3309=3310
<3310=3311
<3311=3315,3312
<3312=3313
<3313=3314
<3315=3316
<3317=3318
<3322=3327,3323
<3323=3324
<3324=3326,3325
<3327=3328
<3328=3337,3329
<3329=3335,3330
<3330=3333,3331
<3331=3332
<3333=3334
<3335=3336
<3388=3394,3393,3389
<3389=3390
<3390=3392,3391
<3394=3395
<3395=3434,3425,3396
<3396=3397
<3397=3416,3408,3398
<3398=3399
<3399=3400
<3400=3401
<3401=3407,3402
<3402=3406,3403
<3403=3405,3404
<3408=3409
<3409=3410
<3410=3414,3411
<3411=3412
<3412=3413
<3414=3415
<3416=3417
<3417=3423,3418
<3418=3421,3419
<3419=3420
<3421=3422
<3423=3424
<3425=3426
<3426=3427
<3427=3433,3428
<3428=3432,3429
<3429=3431,3430
<3434=3435
<3435=3441,3436
<3436=3439,3437
<3437=3438
<3439=3440
<3441=3442
<3448=3454,3453,3449
<3449=3450
<3450=3452,3451
<3454=4479,4462,4444,4430,4420,4415,4411,4397,4386,4372,4349,4335,4326,4322,4316,4307,4293,4284,4270,3878,3864,3855,3841,3455
<3455=3828,3819,3816,3456
<3456=3800,3784,3771,3762,3758,3752,3739,3730,3726,3720,3707,3698,3694,3688,3675,3666,3662,3656,3643,3634,3630,3624,3611,3602,3598,3592,3572,3558,3538,3524,3510,3497,3483,3470,3457
<3457=3458
<3458=3466,3459
<3459=3464,3462,3460
<3460=3461
<3462=3463
<3464=3465
<3466=3467
<3467=3469,3468
<3470=3479,3471
<3471=3472
<3472=3478,3473
<3473=3477,3474
<3474=3476,3475
<3479=3480
<3480=3482,3481
<3483=3484
<3484=3496,3495,3485
<3485=3494,3486
<3486=3490,3487
<3487=3488
<3488=3489
<3490=3491
<3491=3493,3492
<3497=3506,3498
<3498=3499
<3499=3505,3500
<3500=3504,3501
<3501=3503,3502
<3506=3507
<3507=3509,3508
<3510=3511
<3511=3523,3522,3512
<3512=3521,3513
<3513=3517,3514
<3514=3515
<3515=3516
<3517=3518
<3518=3520,3519
<3524=3525
<3525=3537,3536,3526
<3526=3535,3527
<3527=3531,3528
<3528=3529
<3529=3530
<3531=3532
<3532=3534,3533
<3538=3547,3539
<3539=3540
<3540=3546,3541
<3541=3545,3542
<3542=3544,3543
<3547=3548
<3548=3557,3549
<3549=3553,3550
<3550=3551
<3551=3552
<3553=3554
<3554=3556,3555
<3558=3559
<3559=3571,3570,3560
<3560=3569,3561
<3561=3565,3562
<3562=3563
<3563=3564
<3565=3566
<3566=3568,3567
<3572=3581,3573
<3573=3574
<3574=3580,3575
<3575=3579,3576
<3576=3578,3577
<3581=3582
<3582=3591,3583
<3583=3587,3584
<3584=3585
<3585=3586
<3587=3588
<3588=3590,3589
<3592=3593
<3593=3595,3594
<3595=3597,3596
<3598=3599
<3599=3601,3600
<3602=3607,3603
<3603=3604
<3604=3606,3605
<3607=3608
<3608=3610,3609
<3611=3612
<3612=3623,3613
<3613=3617,3614
<3614=3615
<3615=3616
<3617=3618
<3618=3620,3619
<3620=3622,3621
<3624=3625
<3625=3627,3626
<3627=3629,3628
<3630=3631
<3631=3633,3632
<3634=3639,3635
<3635=3636
<3636=3638,3637
<3639=3640
<3640=3642,3641
<3643=3644
<3644=3655,3645
<3645=3649,3646
<3646=3647
<3647=3648
<3649=3650
<3650=3652,3651
<3652=3654,3653
<3656=3657
<3657=3659,3658
<3659=3661,3660
<3662=3663
<3663=3665,3664
<3666=3671,3667
<3667=3668
<3668=3670,3669
<3671=3672
<3672=3674,3673
<3675=3676
<3676=3687,3677
<3677=3681,3678
<3678=3679
<3679=3680
<3681=3682
<3682=3684,3683
<3684=3686,3685
<3688=3689
<3689=3691,3690
<3691=3693,3692
<3694=3695
<3695=3697,3696
<3698=3703,3699
<3699=3700
<3700=3702,3701
<3703=3704
<3704=3706,3705
<3707=3708
<3708=3719,3709
<3709=3713,3710
<3710=3711
<3711=3712
<3713=3714
<3714=3716,3715
<3716=3718,3717
<3720=3721
<3721=3723,3722
<3723=3725,3724
<3726=3727
<3727=3729,3728
<3730=3735,3731
<3731=3732
<3732=3734,3733
<3735=3736
<3736=3738,3737
<3739=3740
<3740=3751,3741
<3741=3745,3742
<3742=3743
<3743=3744
<3745=3746
<3746=3748,3747
<3748=3750,3749
<3752=3753
<3753=3755,3754
<3755=3757,3756
<3758=3759
<3759=3761,3760
<3762=3767,3763
<3763=3764
<3764=3766,3765
<3767=3768
<3768=3770,3769
<3771=3772
<3772=3783,3773
<3773=3777,3774
<3774=3775
<3775=3776
<3777=3778
<3778=3780,3779
<3780=3782,3781
<3784=3789,3785
<3785=3786
<3786=3788,3787
<3789=3790
<3790=3792,3791
<3792=3794,3793
<3794=3795
<3795=3797,3796
<3797=3799,3798
<3800=3805,3801
<3801=3802
<3802=3804,3803
<3805=3806
<3806=3808,3807
<3808=3810,3809
<3810=3811
<3811=3813,3812
<3813=3815,3814
<3816=3818,3817
<3819=3820
<3820=3827,3821
<3821=3823,3822
<3823=3824
<3824=3826,3825
<3828=3829
<3829=3830
<3830=3840,3839,3831
<3831=3838,3832
<3832=3834,3833
<3834=3835
<3835=3837,3836
<3841=3846,3842
<3842=3843
<3843=3845,3844
<3846=3847
<3847=3849,3848
<3849=3851,3850
<3851=3852
<3852=3854,3853
<3855=3860,3856
<3856=3857
<3857=3859,3858
<3860=3861
<3861=3863,3862
<3864=3865
<3865=3877,3876,3866
<3866=3875,3867
<3867=3871,3868
<3868=3869
<3869=3870
<3871=3872
<3872=3874,3873
<3878=4257,4248,4245,3879
<3879=4229,4213,4200,4191,4187,4181,4168,4155,4151,4145,4132,4119,4099,4095,4045,4032,4019,3999,3995,3945,3932,3919,3915,3909,3889,3880
<3880=3881
<3881=3887,3882
<3882=3885,3883
<3883=3884
<3885=3886
<3887=3888
<3889=3890
<3890=3908,3907,3891
<3891=3906,3892
<3892=3904,3893
<3893=3902,3900,3898,3896,3894
<3894=3895
<3896=3897
<3898=3899
<3900=3901
<3902=3903
<3904=3905
<3909=3910
<3910=3912,3911
<3912=3914,3913
<3915=3916
<3916=3918,3917
<3919=3928,3920
<3920=3921
<3921=3927,3922
<3922=3926,3923
<3923=3925,3924
<3928=3929
<3929=3931,3930
<3932=3933
<3933=3944,3934
<3934=3938,3935
<3935=3936
<3936=3937
<3938=3939
<3939=3941,3940
<3941=3943,3942
<3945=3980,3969,3966,3946
<3946=3962,3956,3947
<3947=3948
<3948=3952,3949
<3949=3950
<3950=3951
<3952=3953
<3953=3955,3954
<3956=3957
<3957=3959,3958
<3959=3961,3960
<3962=3963
<3963=3965,3964
<3966=3968,3967
<3969=3970
<3970=3979,3971
<3971=3973,3972
<3973=3974
<3974=3976,3975
<3976=3978,3977
<3980=3981
<3981=3982
<3982=3994,3993,3983
<3983=3992,3984
<3984=3986,3985
<3986=3987
<3987=3989,3988
<3989=3991,3990
<3995=3996
<3996=3998,3997
<3999=4008,4000
<4000=4001
<4001=4007,4002
<4002=4006,4003
<4003=4005,4004
<4008=4009
<4009=4011,4010
<4011=4013,4012
<4013=4014
<4014=4016,4015
<4016=4018,4017
<4019=4028,4020
<4020=4021
<4021=4027,4022
<4022=4026,4023
<4023=4025,4024
<4028=4029
<4029=4031,4030
<4032=4033
<4033=4044,4034
<4034=4038,4035
<4035=4036
<4036=4037
<4038=4039
<4039=4041,4040
<4041=4043,4042
<4045=4080,4069,4066,4046
<4046=4062,4056,4047
<4047=4048
<4048=4052,4049
<4049=4050
<4050=4051
<4052=4053
<4053=4055,4054
<4056=4057
<4057=4059,4058
<4059=4061,4060
<4062=4063
<4063=4065,4064
<4066=4068,4067
<4069=4070
<4070=4079,4071
<4071=4073,4072
<4073=4074
<4074=4076,4075
<4076=4078,4077
<4080=4081
<4081=4082
<4082=4094,4093,4083
<4083=4092,4084
<4084=4086,4085
<4086=4087
<4087=4089,4088
<4089=4091,4090
<4095=4096
<4096=4098,4097
<4099=4108,4100
<4100=4101
<4101=4107,4102
<4102=4106,4103
<4103=4105,4104
<4108=4109
<4109=4111,4110
<4111=4113,4112
<4113=4114
<4114=4116,4115
<4116=4118,4117
<4119=4128,4120
<4120=4121
<4121=4127,4122
<4122=4126,4123
<4123=4125,4124
<4128=4129
<4129=4131,4130
<4132=4133
<4133=4144,4134
<4134=4138,4135
<4135=4136
<4136=4137
<4138=4139
<4139=4141,4140
<4141=4143,4142
<4145=4146
<4146=4148,4147
<4148=4150,4149
<4151=4152
<4152=4154,4153
<4155=4164,4156
<4156=4157
<4157=4163,4158
<4158=4162,4159
<4159=4161,4160
<4164=4165
<4165=4167,4166
<4168=4169
<4169=4180,4170
<4170=4174,4171
<4171=4172
<4172=4173
<4174=4175
<4175=4177,4176
<4177=4179,4178
<4181=4182
<4182=4184,4183
<4184=4186,4185
<4187=4188
<4188=4190,4189
<4191=4196,4192
<4192=4193
<4193=4195,4194
<4196=4197
<4197=4199,4198
<4200=4201
<4201=4212,4202
<4202=4206,4203
<4203=4204
<4204=4205
<4206=4207
<4207=4209,4208
<4209=4211,4210
<4213=4218,4214
<4214=4215
<4215=4217,4216
<4218=4219
<4219=4221,4220
<4221=4223,4222
<4223=4224
<4224=4226,4225
<4226=4228,4227
<4229=4234,4230
<4230=4231
<4231=4233,4232
<4234=4235
<4235=4237,4236
<4237=4239,4238
<4239=4240
<4240=4242,4241
<4242=4244,4243
<4245=4247,4246
<4248=4249
<4249=4256,4250
<4250=4252,4251
<4252=4253
<4253=4255,4254
<4257=4258
<4258=4259
<4259=4269,4268,4260
<4260=4267,4261
<4261=4263,4262
<4263=4264
<4264=4266,4265
<4270=4275,4271
<4271=4272
<4272=4274,4273
<4275=4276
<4276=4278,4277
<4278=4280,4279
<4280=4281
<4281=4283,4282
<4284=4289,4285
<4285=4286
<4286=4288,4287
<4289=4290
<4290=4292,4291
<4293=4294
<4294=4306,4305,4295
<4295=4304,4296
<4296=4300,4297
<4297=4298
<4298=4299
<4300=4301
<4301=4303,4302
<4307=4312,4308
<4308=4309
<4309=4311,4310
<4312=4313
<4313=4315,4314
<4316=4317
<4317=4319,4318
<4319=4321,4320
<4322=4323
<4323=4325,4324
<4326=4331,4327
<4327=4328
<4328=4330,4329
<4331=4332
<4332=4334,4333
<4335=4336
<4336=4348,4347,4337
<4337=4346,4338
<4338=4342,4339
<4339=4340
<4340=4341
<4342=4343
<4343=4345,4344
<4349=4363,4350
<4350=4351
<4351=4362,4352
<4352=4361,4353
<4353=4355,4354
<4355=4357,4356
<4357=4358
<4358=4360,4359
<4363=4364
<4364=4366,4365
<4366=4368,4367
<4368=4369
<4369=4371,4370
<4372=4377,4373
<4373=4374
<4374=4376,4375
<4377=4378
<4378=4380,4379
<4380=4382,4381
<4382=4383
<4383=4385,4384
<4386=4393,4387
<4387=4388
<4388=4392,4389
<4389=4391,4390
<4393=4394
<4394=4396,4395
<4397=4398
<4398=4410,4409,4399
<4399=4408,4400
<4400=4404,4401
<4401=4402
<4402=4403
<4404=4405
<4405=4407,4406
<4411=4412
<4412=4414,4413
<4415=4416
<4416=4419,4418,4417
<4420=4421
<4421=4429,4428,4422
<4422=4424,4423
<4424=4425
<4425=4427,4426
<4430=4431
<4431=4443,4442,4432
<4432=4441,4433
<4433=4439,4434
<4434=4437,4435
<4435=4436
<4437=4438
<4439=4440
<4444=4453,4445
<4445=4446
<4446=4452,4447
<4447=4451,4448
<4448=4450,4449
<4453=4454
<4454=4461,4455
<4455=4459,4456
<4456=4457
<4457=4458
<4459=4460
<4462=4463
<4463=4478,4477,4464
<4464=4476,4465
<4465=4474,4466
<4466=4467
<4467=4468
<4468=4472,4469
<4469=4470
<4470=4471
<4472=4473
<4474=4475
<4479=4484,4480
<4480=4481
<4481=4483,4482
<4484=4485
<4485=4494,4486
<4486=4492,4487
<4487=4490,4488
<4488=4489
<4490=4491
<4492=4493
<4568=4571,4570,4569
<4571=4572
<4572=4601,4592,4589,4573
<4573=4574
<4574=4576,4575
<4576=4577
<4577=4579,4578
<4579=4581,4580
<4581=4585,4582
<4582=4583
<4583=4584
<4585=4586
<4586=4588,4587
<4589=4591,4590
<4592=4593
<4593=4600,4594
<4594=4596,4595
<4596=4597
<4597=4599,4598
<4601=4602
<4602=4603
<4603=4608,4607,4604
<4604=4606,4605
<4617=4620,4619,4618
<4620=4621
<4621=4650,4641,4638,4622
<4622=4623
<4623=4625,4624
<4625=4626
<4626=4628,4627
<4628=4630,4629
<4630=4634,4631
<4631=4632
<4632=4633
<4634=4635
<4635=4637,4636
<4638=4640,4639
<4641=4642
<4642=4649,4643
<4643=4645,4644
<4645=4646
<4646=4648,4647
<4650=4651
<4651=4652
<4652=4657,4656,4653
<4653=4655,4654
<4666=4669,4668,4667
<4669=4670
<4670=4699,4690,4687,4671
<4671=4672
<4672=4674,4673
<4674=4675
<4675=4677,4676
<4677=4679,4678
<4679=4683,4680
<4680=4681
<4681=4682
<4683=4684
<4684=4686,4685
<4687=4689,4688
<4690=4691
<4691=4698,4692
<4692=4694,4693
<4694=4695
<4695=4697,4696
<4699=4700
<4700=4701
<4701=4706,4705,4702
<4702=4704,4703
