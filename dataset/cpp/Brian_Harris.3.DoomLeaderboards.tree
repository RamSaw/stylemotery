>19	FunctionDef	GenerateLeaderboardID (int expansion , int episode , int map , int skill)
>20	ParameterList	int expansion , int episode , int map , int skill
>21	Parameter	 
>22	Identifier	skill
>23	ParameterType	int
>24	Parameter	 
>25	Identifier	map
>26	ParameterType	int
>27	Parameter	 
>28	Identifier	episode
>29	ParameterType	int
>30	Parameter	 
>31	Identifier	expansion
>32	ParameterType	int
>33	ReturnType	const int
>34	CompoundStatement	 
>35	IfStatement	if ( common -> GetGameSKU ( ) == GAME_SKU_DOOM1_BFG )
>36	ElseStatement	else
>37	IfStatement	if ( common -> GetGameSKU ( ) == GAME_SKU_DOOM2_BFG )
>38	ElseStatement	else
>39	CompoundStatement	 
>40	ReturnStatement	 
>41	AdditiveExpression	block + mapAndSkill
>42	Identifier	mapAndSkill
>43	Identifier	block
>44	IdentifierDeclStatement	 
>45	IdentifierDecl	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>46	AssignmentExpr	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>47	AdditiveExpression	( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>48	Identifier	skill
>49	MultiplicativeExpression	realMapNumber * ( ( int ) sk_nightmare + 1 )
>50	AdditiveExpression	( int ) sk_nightmare + 1
>51	PrimaryExpression	1
>52	CastExpression	( int ) sk_nightmare
>53	Identifier	sk_nightmare
>54	CastTarget	int
>55	Identifier	realMapNumber
>56	Identifier	mapAndSkill
>57	Identifier	mapAndSkill
>58	IdentifierDeclType	int
>59	IfStatement	if ( expansion > 0 )
>60	CompoundStatement	 
>61	ForStatement	for ( int expi = 0 ; expi < expansion ; expi ++ )
>62	CompoundStatement	 
>63	ExpressionStatement	 
>64	AssignmentExpr	block += NUM_LEVEL_LIST [ expi ] * ( ( int ) sk_nightmare + 1 )
>65	MultiplicativeExpression	NUM_LEVEL_LIST [ expi ] * ( ( int ) sk_nightmare + 1 )
>66	AdditiveExpression	( int ) sk_nightmare + 1
>67	PrimaryExpression	1
>68	CastExpression	( int ) sk_nightmare
>69	Identifier	sk_nightmare
>70	CastTarget	int
>71	ArrayIndexing	NUM_LEVEL_LIST [ expi ]
>72	Identifier	expi
>73	Identifier	NUM_LEVEL_LIST
>74	Identifier	block
>75	IncDecOp	 
>76	IncDec	++
>77	Identifier	expi
>78	Condition	 
>79	RelationalExpression	expi < expansion
>80	Identifier	expansion
>81	Identifier	expi
>82	ForInit	 
>83	IdentifierDeclStatement	int expi = 0 ;
>84	IdentifierDecl	expi = 0
>85	AssignmentExpr	expi = 0
>86	PrimaryExpression	0
>87	Identifier	expi
>88	Identifier	expi
>89	IdentifierDeclType	int
>90	Condition	 
>91	RelationalExpression	expansion > 0
>92	PrimaryExpression	0
>93	Identifier	expansion
>94	IdentifierDeclStatement	 
>95	IdentifierDecl	block = 0
>96	AssignmentExpr	block = 0
>97	PrimaryExpression	0
>98	Identifier	block
>99	Identifier	block
>100	IdentifierDeclType	int
>101	CompoundStatement	 
>102	IfStatement	if ( expansion == 1 )
>103	ElseStatement	else
>104	CompoundStatement	 
>105	ReturnStatement	 
>106	AdditiveExpression	block + mapAndSkill
>107	Identifier	mapAndSkill
>108	Identifier	block
>109	IdentifierDeclStatement	 
>110	IdentifierDecl	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>111	AssignmentExpr	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>112	AdditiveExpression	( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>113	Identifier	skill
>114	MultiplicativeExpression	realMapNumber * ( ( int ) sk_nightmare + 1 )
>115	AdditiveExpression	( int ) sk_nightmare + 1
>116	PrimaryExpression	1
>117	CastExpression	( int ) sk_nightmare
>118	Identifier	sk_nightmare
>119	CastTarget	int
>120	Identifier	realMapNumber
>121	Identifier	mapAndSkill
>122	Identifier	mapAndSkill
>123	IdentifierDeclType	int
>124	IdentifierDeclStatement	 
>125	IdentifierDecl	block = 955
>126	AssignmentExpr	block = 955
>127	PrimaryExpression	955
>128	Identifier	block
>129	Identifier	block
>130	IdentifierDeclType	int
>131	CompoundStatement	 
>132	ReturnStatement	 
>133	AdditiveExpression	block + mapAndSkill
>134	Identifier	mapAndSkill
>135	Identifier	block
>136	IdentifierDeclStatement	 
>137	IdentifierDecl	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>138	AssignmentExpr	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>139	AdditiveExpression	( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>140	Identifier	skill
>141	MultiplicativeExpression	realMapNumber * ( ( int ) sk_nightmare + 1 )
>142	AdditiveExpression	( int ) sk_nightmare + 1
>143	PrimaryExpression	1
>144	CastExpression	( int ) sk_nightmare
>145	Identifier	sk_nightmare
>146	CastTarget	int
>147	Identifier	realMapNumber
>148	Identifier	mapAndSkill
>149	Identifier	mapAndSkill
>150	IdentifierDeclType	int
>151	IdentifierDeclStatement	 
>152	IdentifierDecl	block = 795
>153	AssignmentExpr	block = 795
>154	PrimaryExpression	795
>155	Identifier	block
>156	Identifier	block
>157	IdentifierDeclType	int
>158	Condition	 
>159	EqualityExpression	expansion == 1
>160	PrimaryExpression	1
>161	Identifier	expansion
>162	Condition	 
>163	EqualityExpression	common -> GetGameSKU ( ) == GAME_SKU_DOOM2_BFG
>164	Identifier	GAME_SKU_DOOM2_BFG
>165	CallExpression	common -> GetGameSKU ( )
>166	ArgumentList	 
>167	Callee	common -> GetGameSKU
>168	PtrMemberAccess	common -> GetGameSKU
>169	Identifier	GetGameSKU
>170	Identifier	common
>171	CompoundStatement	 
>172	ReturnStatement	 
>173	AdditiveExpression	block + mapAndSkill
>174	Identifier	mapAndSkill
>175	Identifier	block
>176	IdentifierDeclStatement	 
>177	IdentifierDecl	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>178	AssignmentExpr	mapAndSkill = ( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>179	AdditiveExpression	( realMapNumber * ( ( int ) sk_nightmare + 1 ) ) + skill
>180	Identifier	skill
>181	MultiplicativeExpression	realMapNumber * ( ( int ) sk_nightmare + 1 )
>182	AdditiveExpression	( int ) sk_nightmare + 1
>183	PrimaryExpression	1
>184	CastExpression	( int ) sk_nightmare
>185	Identifier	sk_nightmare
>186	CastTarget	int
>187	Identifier	realMapNumber
>188	Identifier	mapAndSkill
>189	Identifier	mapAndSkill
>190	IdentifierDeclType	int
>191	IdentifierDeclStatement	 
>192	IdentifierDecl	block = 615
>193	AssignmentExpr	block = 615
>194	PrimaryExpression	615
>195	Identifier	block
>196	Identifier	block
>197	IdentifierDeclType	int
>198	Condition	 
>199	EqualityExpression	common -> GetGameSKU ( ) == GAME_SKU_DOOM1_BFG
>200	Identifier	GAME_SKU_DOOM1_BFG
>201	CallExpression	common -> GetGameSKU ( )
>202	ArgumentList	 
>203	Callee	common -> GetGameSKU
>204	PtrMemberAccess	common -> GetGameSKU
>205	Identifier	GetGameSKU
>206	Identifier	common
>207	IdentifierDeclStatement	 
>208	IdentifierDecl	realMapNumber = ( episode * map - 1 )
>209	AssignmentExpr	realMapNumber = ( episode * map - 1 )
>210	AdditiveExpression	episode * map - 1
>211	PrimaryExpression	1
>212	MultiplicativeExpression	episode * map
>213	Identifier	map
>214	Identifier	episode
>215	Identifier	realMapNumber
>216	Identifier	realMapNumber
>217	IdentifierDeclType	int
>238	FunctionDef	InitLeaderboards ()
>239	ParameterList	 
>240	ReturnType	void
>241	CompoundStatement	 
>242	ForStatement	for ( int expi = 0 ; expi < ARRAY_COUNT ( NUM_LEVEL_LIST ) ; expi ++ )
>243	CompoundStatement	 
>244	ForStatement	for ( int udi = 1 ; udi <= NUM_LEVEL_LIST [ expi ] ; udi ++ )
>245	CompoundStatement	 
>246	ForStatement	for ( int skilli = 0 ; skilli <= sk_nightmare ; skilli ++ )
>247	CompoundStatement	 
>248	IdentifierDeclStatement	 
>249	IdentifierDecl	* timeTrial_Leaderboard = new leaderboardDefinition_t ( timeTrial_leaderboardID , ARRAY_COUNT ( columnDefTime ) , \
>250	AssignmentExpr	* timeTrial_Leaderboard = new leaderboardDefinition_t ( timeTrial_leaderboardID , ARRAY_COUNT ( columnDefTime ) , \
>251	Expression	timeTrial_leaderboardID , ARRAY_COUNT ( columnDefTime ) , columnDefTime , RANK_LEAST_FIRST , false , true
>252	Expression	ARRAY_COUNT ( columnDefTime ) , columnDefTime , RANK_LEAST_FIRST , false , true
>253	Expression	columnDefTime , RANK_LEAST_FIRST , false , true
>254	Expression	RANK_LEAST_FIRST , false , true
>255	Expression	false , true
>256	Identifier	true
>257	Identifier	false
>258	Identifier	RANK_LEAST_FIRST
>259	Identifier	columnDefTime
>260	CallExpression	ARRAY_COUNT ( columnDefTime )
>261	ArgumentList	columnDefTime
>262	Argument	columnDefTime
>263	Identifier	columnDefTime
>264	Callee	ARRAY_COUNT
>265	Identifier	ARRAY_COUNT
>266	Identifier	timeTrial_leaderboardID
>267	Identifier	timeTrial_Leaderboard
>268	Identifier	timeTrial_Leaderboard
>269	IdentifierDeclType	leaderboardDefinition_t *
>270	IdentifierDeclStatement	 
>271	IdentifierDecl	timeTrial_leaderboardID = GenerateLeaderboardID ( expi , 1 , udi , skilli )
>272	AssignmentExpr	timeTrial_leaderboardID = GenerateLeaderboardID ( expi , 1 , udi , skilli )
>273	CallExpression	GenerateLeaderboardID ( expi , 1 , udi , skilli )
>274	ArgumentList	expi
>275	Argument	skilli
>276	Identifier	skilli
>277	Argument	udi
>278	Identifier	udi
>279	Argument	1
>280	PrimaryExpression	1
>281	Argument	expi
>282	Identifier	expi
>283	Callee	GenerateLeaderboardID
>284	Identifier	GenerateLeaderboardID
>285	Identifier	timeTrial_leaderboardID
>286	Identifier	timeTrial_leaderboardID
>287	IdentifierDeclType	int
>288	IncDecOp	 
>289	IncDec	++
>290	Identifier	skilli
>291	Condition	 
>292	RelationalExpression	skilli <= sk_nightmare
>293	Identifier	sk_nightmare
>294	Identifier	skilli
>295	ForInit	 
>296	IdentifierDeclStatement	int skilli = 0 ;
>297	IdentifierDecl	skilli = 0
>298	AssignmentExpr	skilli = 0
>299	PrimaryExpression	0
>300	Identifier	skilli
>301	Identifier	skilli
>302	IdentifierDeclType	int
>303	IncDecOp	 
>304	IncDec	++
>305	Identifier	udi
>306	Condition	 
>307	RelationalExpression	udi <= NUM_LEVEL_LIST [ expi ]
>308	ArrayIndexing	NUM_LEVEL_LIST [ expi ]
>309	Identifier	expi
>310	Identifier	NUM_LEVEL_LIST
>311	Identifier	udi
>312	ForInit	 
>313	IdentifierDeclStatement	int udi = 1 ;
>314	IdentifierDecl	udi = 1
>315	AssignmentExpr	udi = 1
>316	PrimaryExpression	1
>317	Identifier	udi
>318	Identifier	udi
>319	IdentifierDeclType	int
>320	IncDecOp	 
>321	IncDec	++
>322	Identifier	expi
>323	Condition	 
>324	RelationalExpression	expi < ARRAY_COUNT ( NUM_LEVEL_LIST )
>325	CallExpression	ARRAY_COUNT ( NUM_LEVEL_LIST )
>326	ArgumentList	NUM_LEVEL_LIST
>327	Argument	NUM_LEVEL_LIST
>328	Identifier	NUM_LEVEL_LIST
>329	Callee	ARRAY_COUNT
>330	Identifier	ARRAY_COUNT
>331	Identifier	expi
>332	ForInit	 
>333	IdentifierDeclStatement	int expi = 0 ;
>334	IdentifierDecl	expi = 0
>335	AssignmentExpr	expi = 0
>336	PrimaryExpression	0
>337	Identifier	expi
>338	Identifier	expi
>339	IdentifierDeclType	int
>358	FunctionDef	GetLeaderboard (int expansion , int episode , int map , int skill)
>359	ParameterList	int expansion , int episode , int map , int skill
>360	Parameter	 
>361	Identifier	skill
>362	ParameterType	int
>363	Parameter	 
>364	Identifier	map
>365	ParameterType	int
>366	Parameter	 
>367	Identifier	episode
>368	ParameterType	int
>369	Parameter	 
>370	Identifier	expansion
>371	ParameterType	int
>372	ReturnType	const leaderboardDefinition_t *
>373	CompoundStatement	 
>374	ExpressionStatement	 
>375	ReturnStatement	 
>376	CallExpression	Sys_FindLeaderboardDef ( leaderboardID )
>377	ArgumentList	leaderboardID
>378	Argument	leaderboardID
>379	Identifier	leaderboardID
>380	Callee	Sys_FindLeaderboardDef
>381	Identifier	Sys_FindLeaderboardDef
>382	IdentifierDeclStatement	 
>383	IdentifierDecl	leaderboardID = GenerateLeaderboardID ( expansion , episode , map , skill )
>384	AssignmentExpr	leaderboardID = GenerateLeaderboardID ( expansion , episode , map , skill )
>385	CallExpression	GenerateLeaderboardID ( expansion , episode , map , skill )
>386	ArgumentList	expansion
>387	Argument	skill
>388	Identifier	skill
>389	Argument	map
>390	Identifier	map
>391	Argument	episode
>392	Identifier	episode
>393	Argument	expansion
>394	Identifier	expansion
>395	Callee	GenerateLeaderboardID
>396	Identifier	GenerateLeaderboardID
>397	Identifier	leaderboardID
>398	Identifier	leaderboardID
>399	IdentifierDeclType	int
<19=34,33,20
<20=30,27,24,21
<21=23,22
<24=26,25
<27=29,28
<30=32,31
<34=207,35
<35=198,171,36
<36=37
<37=162,101,38
<38=39
<39=94,59,44,40
<40=41
<41=43,42
<44=45
<45=58,57,46
<46=56,47
<47=49,48
<49=55,50
<50=52,51
<52=54,53
<59=90,60
<60=61
<61=82,78,75,62
<62=63
<63=64
<64=74,65
<65=71,66
<66=68,67
<68=70,69
<71=73,72
<75=77,76
<78=79
<79=81,80
<82=83
<83=84
<84=89,88,85
<85=87,86
<90=91
<91=93,92
<94=95
<95=100,99,96
<96=98,97
<101=102
<102=158,131,103
<103=104
<104=124,109,105
<105=106
<106=108,107
<109=110
<110=123,122,111
<111=121,112
<112=114,113
<114=120,115
<115=117,116
<117=119,118
<124=125
<125=130,129,126
<126=128,127
<131=151,136,132
<132=133
<133=135,134
<136=137
<137=150,149,138
<138=148,139
<139=141,140
<141=147,142
<142=144,143
<144=146,145
<151=152
<152=157,156,153
<153=155,154
<158=159
<159=161,160
<162=163
<163=165,164
<165=167,166
<167=168
<168=170,169
<171=191,176,172
<172=173
<173=175,174
<176=177
<177=190,189,178
<178=188,179
<179=181,180
<181=187,182
<182=184,183
<184=186,185
<191=192
<192=197,196,193
<193=195,194
<198=199
<199=201,200
<201=203,202
<203=204
<204=206,205
<207=208
<208=217,216,209
<209=215,210
<210=212,211
<212=214,213
<238=241,240,239
<241=242
<242=332,323,320,243
<243=244
<244=312,306,303,245
<245=246
<246=295,291,288,247
<247=270,248
<248=249
<249=269,268,250
<250=267,251
<251=266,252
<252=260,253
<253=259,254
<254=258,255
<255=257,256
<260=264,261
<261=262
<262=263
<264=265
<270=271
<271=287,286,272
<272=285,273
<273=283,274
<274=281,279,277,275
<275=276
<277=278
<279=280
<281=282
<283=284
<288=290,289
<291=292
<292=294,293
<295=296
<296=297
<297=302,301,298
<298=300,299
<303=305,304
<306=307
<307=311,308
<308=310,309
<312=313
<313=314
<314=319,318,315
<315=317,316
<320=322,321
<323=324
<324=331,325
<325=329,326
<326=327
<327=328
<329=330
<332=333
<333=334
<334=339,338,335
<335=337,336
<358=373,372,359
<359=369,366,363,360
<360=362,361
<363=365,364
<366=368,367
<369=371,370
<373=382,375,374
<375=376
<376=380,377
<377=378
<378=379
<380=381
<382=383
<383=399,398,384
<384=397,385
<385=395,386
<386=393,391,389,387
<387=388
<389=390
<391=392
<393=394
<395=396
