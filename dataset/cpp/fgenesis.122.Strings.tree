>7	FunctionDef	initInputCodeMap ()
>8	ParameterList	 
>9	ReturnType	void
>10	CompoundStatement	 
>11	ForStatement	for ( int i = 0 ; i < 17 ; i ++ )
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	AssignmentExpr	inputCodeMap [ os . str ( ) ] = ActionMapper 
>15	AdditiveExpression	ActionMapper 
>16	Identifier	i
>17	Identifier	ActionMapper 
>18	ArrayIndexing	inputCodeMap [ os . str ( ) ]
>19	CallExpression	os . str ( )
>20	ArgumentList	 
>21	Callee	os . str
>22	MemberAccess	os . str
>23	Identifier	str
>24	Identifier	os
>25	Identifier	inputCodeMap
>26	ExpressionStatement	 
>27	ShiftExpression	os << \"JOY_BUTTON_\" << i
>28	ShiftExpression	\"JOY_BUTTON_\" << i
>29	Identifier	i
>30	PrimaryExpression	\"JOY_BUTTON_\"
>31	Identifier	os
>32	IdentifierDeclStatement	 
>33	IdentifierDecl	os
>34	Identifier	os
>35	IdentifierDeclType	std 
>36	IncDecOp	 
>37	IncDec	++
>38	Identifier	i
>39	Condition	 
>40	RelationalExpression	i < 17
>41	PrimaryExpression	17
>42	Identifier	i
>43	ForInit	 
>44	IdentifierDeclStatement	int i = 0 ;
>45	IdentifierDecl	i = 0
>46	AssignmentExpr	i = 0
>47	PrimaryExpression	0
>48	Identifier	i
>49	Identifier	i
>50	IdentifierDeclType	int
>51	ExpressionStatement	 
>52	AssignmentExpr	inputCodeMap [ \"MOUSE_BUTTON_MIDDLE\" ] = ActionMapper 
>53	Identifier	ActionMapper 
>54	ArrayIndexing	inputCodeMap [ \"MOUSE_BUTTON_MIDDLE\" ]
>55	PrimaryExpression	\"MOUSE_BUTTON_MIDDLE\"
>56	Identifier	inputCodeMap
>57	ExpressionStatement	 
>58	AssignmentExpr	inputCodeMap [ \"MOUSE_BUTTON_RIGHT\" ] = ActionMapper 
>59	Identifier	ActionMapper 
>60	ArrayIndexing	inputCodeMap [ \"MOUSE_BUTTON_RIGHT\" ]
>61	PrimaryExpression	\"MOUSE_BUTTON_RIGHT\"
>62	Identifier	inputCodeMap
>63	ExpressionStatement	 
>64	AssignmentExpr	inputCodeMap [ \"MOUSE_BUTTON_LEFT\" ] = ActionMapper 
>65	Identifier	ActionMapper 
>66	ArrayIndexing	inputCodeMap [ \"MOUSE_BUTTON_LEFT\" ]
>67	PrimaryExpression	\"MOUSE_BUTTON_LEFT\"
>68	Identifier	inputCodeMap
>69	ExpressionStatement	 
>70	AssignmentExpr	inputCodeMap [ \"KEY_ESCAPE\" ] = KEY_ESCAPE
>71	Identifier	KEY_ESCAPE
>72	ArrayIndexing	inputCodeMap [ \"KEY_ESCAPE\" ]
>73	PrimaryExpression	\"KEY_ESCAPE\"
>74	Identifier	inputCodeMap
>75	ExpressionStatement	 
>76	AssignmentExpr	inputCodeMap [ \"KEY_TAB\" ] = KEY_TAB
>77	Identifier	KEY_TAB
>78	ArrayIndexing	inputCodeMap [ \"KEY_TAB\" ]
>79	PrimaryExpression	\"KEY_TAB\"
>80	Identifier	inputCodeMap
>81	ExpressionStatement	 
>82	AssignmentExpr	inputCodeMap [ \"KEY_RETURN\" ] = KEY_RETURN
>83	Identifier	KEY_RETURN
>84	ArrayIndexing	inputCodeMap [ \"KEY_RETURN\" ]
>85	PrimaryExpression	\"KEY_RETURN\"
>86	Identifier	inputCodeMap
>87	ExpressionStatement	 
>88	AssignmentExpr	inputCodeMap [ \"KEY_RALT\" ] = KEY_RALT
>89	Identifier	KEY_RALT
>90	ArrayIndexing	inputCodeMap [ \"KEY_RALT\" ]
>91	PrimaryExpression	\"KEY_RALT\"
>92	Identifier	inputCodeMap
>93	ExpressionStatement	 
>94	AssignmentExpr	inputCodeMap [ \"KEY_LALT\" ] = KEY_LALT
>95	Identifier	KEY_LALT
>96	ArrayIndexing	inputCodeMap [ \"KEY_LALT\" ]
>97	PrimaryExpression	\"KEY_LALT\"
>98	Identifier	inputCodeMap
>99	ExpressionStatement	 
>100	AssignmentExpr	inputCodeMap [ \"KEY_RMETA\" ] = KEY_RMETA
>101	Identifier	KEY_RMETA
>102	ArrayIndexing	inputCodeMap [ \"KEY_RMETA\" ]
>103	PrimaryExpression	\"KEY_RMETA\"
>104	Identifier	inputCodeMap
>105	ExpressionStatement	 
>106	AssignmentExpr	inputCodeMap [ \"KEY_LMETA\" ] = KEY_LMETA
>107	Identifier	KEY_LMETA
>108	ArrayIndexing	inputCodeMap [ \"KEY_LMETA\" ]
>109	PrimaryExpression	\"KEY_LMETA\"
>110	Identifier	inputCodeMap
>111	ExpressionStatement	 
>112	AssignmentExpr	inputCodeMap [ \"KEY_RSHIFT\" ] = KEY_RSHIFT
>113	Identifier	KEY_RSHIFT
>114	ArrayIndexing	inputCodeMap [ \"KEY_RSHIFT\" ]
>115	PrimaryExpression	\"KEY_RSHIFT\"
>116	Identifier	inputCodeMap
>117	ExpressionStatement	 
>118	AssignmentExpr	inputCodeMap [ \"KEY_LSHIFT\" ] = KEY_LSHIFT
>119	Identifier	KEY_LSHIFT
>120	ArrayIndexing	inputCodeMap [ \"KEY_LSHIFT\" ]
>121	PrimaryExpression	\"KEY_LSHIFT\"
>122	Identifier	inputCodeMap
>123	ExpressionStatement	 
>124	AssignmentExpr	inputCodeMap [ \"KEY_RCONTROL\" ] = KEY_RCONTROL
>125	Identifier	KEY_RCONTROL
>126	ArrayIndexing	inputCodeMap [ \"KEY_RCONTROL\" ]
>127	PrimaryExpression	\"KEY_RCONTROL\"
>128	Identifier	inputCodeMap
>129	ExpressionStatement	 
>130	AssignmentExpr	inputCodeMap [ \"KEY_LCONTROL\" ] = KEY_LCONTROL
>131	Identifier	KEY_LCONTROL
>132	ArrayIndexing	inputCodeMap [ \"KEY_LCONTROL\" ]
>133	PrimaryExpression	\"KEY_LCONTROL\"
>134	Identifier	inputCodeMap
>135	ExpressionStatement	 
>136	AssignmentExpr	inputCodeMap [ \"KEY_SPACE\" ] = KEY_SPACE
>137	Identifier	KEY_SPACE
>138	ArrayIndexing	inputCodeMap [ \"KEY_SPACE\" ]
>139	PrimaryExpression	\"KEY_SPACE\"
>140	Identifier	inputCodeMap
>141	ExpressionStatement	 
>142	AssignmentExpr	inputCodeMap [ \"KEY_DOWN\" ] = KEY_DOWN
>143	Identifier	KEY_DOWN
>144	ArrayIndexing	inputCodeMap [ \"KEY_DOWN\" ]
>145	PrimaryExpression	\"KEY_DOWN\"
>146	Identifier	inputCodeMap
>147	ExpressionStatement	 
>148	AssignmentExpr	inputCodeMap [ \"KEY_UP\" ] = KEY_UP
>149	Identifier	KEY_UP
>150	ArrayIndexing	inputCodeMap [ \"KEY_UP\" ]
>151	PrimaryExpression	\"KEY_UP\"
>152	Identifier	inputCodeMap
>153	ExpressionStatement	 
>154	AssignmentExpr	inputCodeMap [ \"KEY_RIGHT\" ] = KEY_RIGHT
>155	Identifier	KEY_RIGHT
>156	ArrayIndexing	inputCodeMap [ \"KEY_RIGHT\" ]
>157	PrimaryExpression	\"KEY_RIGHT\"
>158	Identifier	inputCodeMap
>159	ExpressionStatement	 
>160	AssignmentExpr	inputCodeMap [ \"KEY_LEFT\" ] = KEY_LEFT
>161	Identifier	KEY_LEFT
>162	ArrayIndexing	inputCodeMap [ \"KEY_LEFT\" ]
>163	PrimaryExpression	\"KEY_LEFT\"
>164	Identifier	inputCodeMap
>165	ExpressionStatement	 
>166	AssignmentExpr	inputCodeMap [ \"KEY_F12\" ] = KEY_F12
>167	Identifier	KEY_F12
>168	ArrayIndexing	inputCodeMap [ \"KEY_F12\" ]
>169	PrimaryExpression	\"KEY_F12\"
>170	Identifier	inputCodeMap
>171	ExpressionStatement	 
>172	AssignmentExpr	inputCodeMap [ \"KEY_F11\" ] = KEY_F11
>173	Identifier	KEY_F11
>174	ArrayIndexing	inputCodeMap [ \"KEY_F11\" ]
>175	PrimaryExpression	\"KEY_F11\"
>176	Identifier	inputCodeMap
>177	ExpressionStatement	 
>178	AssignmentExpr	inputCodeMap [ \"KEY_F10\" ] = KEY_F10
>179	Identifier	KEY_F10
>180	ArrayIndexing	inputCodeMap [ \"KEY_F10\" ]
>181	PrimaryExpression	\"KEY_F10\"
>182	Identifier	inputCodeMap
>183	ExpressionStatement	 
>184	AssignmentExpr	inputCodeMap [ \"KEY_F9\" ] = KEY_F9
>185	Identifier	KEY_F9
>186	ArrayIndexing	inputCodeMap [ \"KEY_F9\" ]
>187	PrimaryExpression	\"KEY_F9\"
>188	Identifier	inputCodeMap
>189	ExpressionStatement	 
>190	AssignmentExpr	inputCodeMap [ \"KEY_F8\" ] = KEY_F8
>191	Identifier	KEY_F8
>192	ArrayIndexing	inputCodeMap [ \"KEY_F8\" ]
>193	PrimaryExpression	\"KEY_F8\"
>194	Identifier	inputCodeMap
>195	ExpressionStatement	 
>196	AssignmentExpr	inputCodeMap [ \"KEY_F7\" ] = KEY_F7
>197	Identifier	KEY_F7
>198	ArrayIndexing	inputCodeMap [ \"KEY_F7\" ]
>199	PrimaryExpression	\"KEY_F7\"
>200	Identifier	inputCodeMap
>201	ExpressionStatement	 
>202	AssignmentExpr	inputCodeMap [ \"KEY_F6\" ] = KEY_F6
>203	Identifier	KEY_F6
>204	ArrayIndexing	inputCodeMap [ \"KEY_F6\" ]
>205	PrimaryExpression	\"KEY_F6\"
>206	Identifier	inputCodeMap
>207	ExpressionStatement	 
>208	AssignmentExpr	inputCodeMap [ \"KEY_F5\" ] = KEY_F5
>209	Identifier	KEY_F5
>210	ArrayIndexing	inputCodeMap [ \"KEY_F5\" ]
>211	PrimaryExpression	\"KEY_F5\"
>212	Identifier	inputCodeMap
>213	ExpressionStatement	 
>214	AssignmentExpr	inputCodeMap [ \"KEY_F4\" ] = KEY_F4
>215	Identifier	KEY_F4
>216	ArrayIndexing	inputCodeMap [ \"KEY_F4\" ]
>217	PrimaryExpression	\"KEY_F4\"
>218	Identifier	inputCodeMap
>219	ExpressionStatement	 
>220	AssignmentExpr	inputCodeMap [ \"KEY_F3\" ] = KEY_F3
>221	Identifier	KEY_F3
>222	ArrayIndexing	inputCodeMap [ \"KEY_F3\" ]
>223	PrimaryExpression	\"KEY_F3\"
>224	Identifier	inputCodeMap
>225	ExpressionStatement	 
>226	AssignmentExpr	inputCodeMap [ \"KEY_F2\" ] = KEY_F2
>227	Identifier	KEY_F2
>228	ArrayIndexing	inputCodeMap [ \"KEY_F2\" ]
>229	PrimaryExpression	\"KEY_F2\"
>230	Identifier	inputCodeMap
>231	ExpressionStatement	 
>232	AssignmentExpr	inputCodeMap [ \"KEY_F1\" ] = KEY_F1
>233	Identifier	KEY_F1
>234	ArrayIndexing	inputCodeMap [ \"KEY_F1\" ]
>235	PrimaryExpression	\"KEY_F1\"
>236	Identifier	inputCodeMap
>237	ExpressionStatement	 
>238	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD0\" ] = KEY_NUMPAD0
>239	Identifier	KEY_NUMPAD0
>240	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD0\" ]
>241	PrimaryExpression	\"KEY_NUMPAD0\"
>242	Identifier	inputCodeMap
>243	ExpressionStatement	 
>244	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD9\" ] = KEY_NUMPAD9
>245	Identifier	KEY_NUMPAD9
>246	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD9\" ]
>247	PrimaryExpression	\"KEY_NUMPAD9\"
>248	Identifier	inputCodeMap
>249	ExpressionStatement	 
>250	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD8\" ] = KEY_NUMPAD8
>251	Identifier	KEY_NUMPAD8
>252	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD8\" ]
>253	PrimaryExpression	\"KEY_NUMPAD8\"
>254	Identifier	inputCodeMap
>255	ExpressionStatement	 
>256	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD7\" ] = KEY_NUMPAD7
>257	Identifier	KEY_NUMPAD7
>258	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD7\" ]
>259	PrimaryExpression	\"KEY_NUMPAD7\"
>260	Identifier	inputCodeMap
>261	ExpressionStatement	 
>262	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD6\" ] = KEY_NUMPAD6
>263	Identifier	KEY_NUMPAD6
>264	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD6\" ]
>265	PrimaryExpression	\"KEY_NUMPAD6\"
>266	Identifier	inputCodeMap
>267	ExpressionStatement	 
>268	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD5\" ] = KEY_NUMPAD5
>269	Identifier	KEY_NUMPAD5
>270	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD5\" ]
>271	PrimaryExpression	\"KEY_NUMPAD5\"
>272	Identifier	inputCodeMap
>273	ExpressionStatement	 
>274	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD4\" ] = KEY_NUMPAD4
>275	Identifier	KEY_NUMPAD4
>276	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD4\" ]
>277	PrimaryExpression	\"KEY_NUMPAD4\"
>278	Identifier	inputCodeMap
>279	ExpressionStatement	 
>280	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD3\" ] = KEY_NUMPAD3
>281	Identifier	KEY_NUMPAD3
>282	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD3\" ]
>283	PrimaryExpression	\"KEY_NUMPAD3\"
>284	Identifier	inputCodeMap
>285	ExpressionStatement	 
>286	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD2\" ] = KEY_NUMPAD2
>287	Identifier	KEY_NUMPAD2
>288	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD2\" ]
>289	PrimaryExpression	\"KEY_NUMPAD2\"
>290	Identifier	inputCodeMap
>291	ExpressionStatement	 
>292	AssignmentExpr	inputCodeMap [ \"KEY_NUMPAD1\" ] = KEY_NUMPAD1
>293	Identifier	KEY_NUMPAD1
>294	ArrayIndexing	inputCodeMap [ \"KEY_NUMPAD1\" ]
>295	PrimaryExpression	\"KEY_NUMPAD1\"
>296	Identifier	inputCodeMap
>297	ExpressionStatement	 
>298	AssignmentExpr	inputCodeMap [ \"KEY_0\" ] = KEY_0
>299	Identifier	KEY_0
>300	ArrayIndexing	inputCodeMap [ \"KEY_0\" ]
>301	PrimaryExpression	\"KEY_0\"
>302	Identifier	inputCodeMap
>303	ExpressionStatement	 
>304	AssignmentExpr	inputCodeMap [ \"KEY_9\" ] = KEY_9
>305	Identifier	KEY_9
>306	ArrayIndexing	inputCodeMap [ \"KEY_9\" ]
>307	PrimaryExpression	\"KEY_9\"
>308	Identifier	inputCodeMap
>309	ExpressionStatement	 
>310	AssignmentExpr	inputCodeMap [ \"KEY_8\" ] = KEY_8
>311	Identifier	KEY_8
>312	ArrayIndexing	inputCodeMap [ \"KEY_8\" ]
>313	PrimaryExpression	\"KEY_8\"
>314	Identifier	inputCodeMap
>315	ExpressionStatement	 
>316	AssignmentExpr	inputCodeMap [ \"KEY_7\" ] = KEY_7
>317	Identifier	KEY_7
>318	ArrayIndexing	inputCodeMap [ \"KEY_7\" ]
>319	PrimaryExpression	\"KEY_7\"
>320	Identifier	inputCodeMap
>321	ExpressionStatement	 
>322	AssignmentExpr	inputCodeMap [ \"KEY_6\" ] = KEY_6
>323	Identifier	KEY_6
>324	ArrayIndexing	inputCodeMap [ \"KEY_6\" ]
>325	PrimaryExpression	\"KEY_6\"
>326	Identifier	inputCodeMap
>327	ExpressionStatement	 
>328	AssignmentExpr	inputCodeMap [ \"KEY_5\" ] = KEY_5
>329	Identifier	KEY_5
>330	ArrayIndexing	inputCodeMap [ \"KEY_5\" ]
>331	PrimaryExpression	\"KEY_5\"
>332	Identifier	inputCodeMap
>333	ExpressionStatement	 
>334	AssignmentExpr	inputCodeMap [ \"KEY_4\" ] = KEY_4
>335	Identifier	KEY_4
>336	ArrayIndexing	inputCodeMap [ \"KEY_4\" ]
>337	PrimaryExpression	\"KEY_4\"
>338	Identifier	inputCodeMap
>339	ExpressionStatement	 
>340	AssignmentExpr	inputCodeMap [ \"KEY_3\" ] = KEY_3
>341	Identifier	KEY_3
>342	ArrayIndexing	inputCodeMap [ \"KEY_3\" ]
>343	PrimaryExpression	\"KEY_3\"
>344	Identifier	inputCodeMap
>345	ExpressionStatement	 
>346	AssignmentExpr	inputCodeMap [ \"KEY_2\" ] = KEY_2
>347	Identifier	KEY_2
>348	ArrayIndexing	inputCodeMap [ \"KEY_2\" ]
>349	PrimaryExpression	\"KEY_2\"
>350	Identifier	inputCodeMap
>351	ExpressionStatement	 
>352	AssignmentExpr	inputCodeMap [ \"KEY_1\" ] = KEY_1
>353	Identifier	KEY_1
>354	ArrayIndexing	inputCodeMap [ \"KEY_1\" ]
>355	PrimaryExpression	\"KEY_1\"
>356	Identifier	inputCodeMap
>357	ExpressionStatement	 
>358	AssignmentExpr	inputCodeMap [ \"KEY_Z\" ] = KEY_Z
>359	Identifier	KEY_Z
>360	ArrayIndexing	inputCodeMap [ \"KEY_Z\" ]
>361	PrimaryExpression	\"KEY_Z\"
>362	Identifier	inputCodeMap
>363	ExpressionStatement	 
>364	AssignmentExpr	inputCodeMap [ \"KEY_Y\" ] = KEY_Y
>365	Identifier	KEY_Y
>366	ArrayIndexing	inputCodeMap [ \"KEY_Y\" ]
>367	PrimaryExpression	\"KEY_Y\"
>368	Identifier	inputCodeMap
>369	ExpressionStatement	 
>370	AssignmentExpr	inputCodeMap [ \"KEY_X\" ] = KEY_X
>371	Identifier	KEY_X
>372	ArrayIndexing	inputCodeMap [ \"KEY_X\" ]
>373	PrimaryExpression	\"KEY_X\"
>374	Identifier	inputCodeMap
>375	ExpressionStatement	 
>376	AssignmentExpr	inputCodeMap [ \"KEY_W\" ] = KEY_W
>377	Identifier	KEY_W
>378	ArrayIndexing	inputCodeMap [ \"KEY_W\" ]
>379	PrimaryExpression	\"KEY_W\"
>380	Identifier	inputCodeMap
>381	ExpressionStatement	 
>382	AssignmentExpr	inputCodeMap [ \"KEY_V\" ] = KEY_V
>383	Identifier	KEY_V
>384	ArrayIndexing	inputCodeMap [ \"KEY_V\" ]
>385	PrimaryExpression	\"KEY_V\"
>386	Identifier	inputCodeMap
>387	ExpressionStatement	 
>388	AssignmentExpr	inputCodeMap [ \"KEY_U\" ] = KEY_U
>389	Identifier	KEY_U
>390	ArrayIndexing	inputCodeMap [ \"KEY_U\" ]
>391	PrimaryExpression	\"KEY_U\"
>392	Identifier	inputCodeMap
>393	ExpressionStatement	 
>394	AssignmentExpr	inputCodeMap [ \"KEY_T\" ] = KEY_T
>395	Identifier	KEY_T
>396	ArrayIndexing	inputCodeMap [ \"KEY_T\" ]
>397	PrimaryExpression	\"KEY_T\"
>398	Identifier	inputCodeMap
>399	ExpressionStatement	 
>400	AssignmentExpr	inputCodeMap [ \"KEY_S\" ] = KEY_S
>401	Identifier	KEY_S
>402	ArrayIndexing	inputCodeMap [ \"KEY_S\" ]
>403	PrimaryExpression	\"KEY_S\"
>404	Identifier	inputCodeMap
>405	ExpressionStatement	 
>406	AssignmentExpr	inputCodeMap [ \"KEY_R\" ] = KEY_R
>407	Identifier	KEY_R
>408	ArrayIndexing	inputCodeMap [ \"KEY_R\" ]
>409	PrimaryExpression	\"KEY_R\"
>410	Identifier	inputCodeMap
>411	ExpressionStatement	 
>412	AssignmentExpr	inputCodeMap [ \"KEY_Q\" ] = KEY_Q
>413	Identifier	KEY_Q
>414	ArrayIndexing	inputCodeMap [ \"KEY_Q\" ]
>415	PrimaryExpression	\"KEY_Q\"
>416	Identifier	inputCodeMap
>417	ExpressionStatement	 
>418	AssignmentExpr	inputCodeMap [ \"KEY_P\" ] = KEY_P
>419	Identifier	KEY_P
>420	ArrayIndexing	inputCodeMap [ \"KEY_P\" ]
>421	PrimaryExpression	\"KEY_P\"
>422	Identifier	inputCodeMap
>423	ExpressionStatement	 
>424	AssignmentExpr	inputCodeMap [ \"KEY_O\" ] = KEY_O
>425	Identifier	KEY_O
>426	ArrayIndexing	inputCodeMap [ \"KEY_O\" ]
>427	PrimaryExpression	\"KEY_O\"
>428	Identifier	inputCodeMap
>429	ExpressionStatement	 
>430	AssignmentExpr	inputCodeMap [ \"KEY_N\" ] = KEY_N
>431	Identifier	KEY_N
>432	ArrayIndexing	inputCodeMap [ \"KEY_N\" ]
>433	PrimaryExpression	\"KEY_N\"
>434	Identifier	inputCodeMap
>435	ExpressionStatement	 
>436	AssignmentExpr	inputCodeMap [ \"KEY_M\" ] = KEY_M
>437	Identifier	KEY_M
>438	ArrayIndexing	inputCodeMap [ \"KEY_M\" ]
>439	PrimaryExpression	\"KEY_M\"
>440	Identifier	inputCodeMap
>441	ExpressionStatement	 
>442	AssignmentExpr	inputCodeMap [ \"KEY_L\" ] = KEY_L
>443	Identifier	KEY_L
>444	ArrayIndexing	inputCodeMap [ \"KEY_L\" ]
>445	PrimaryExpression	\"KEY_L\"
>446	Identifier	inputCodeMap
>447	ExpressionStatement	 
>448	AssignmentExpr	inputCodeMap [ \"KEY_K\" ] = KEY_K
>449	Identifier	KEY_K
>450	ArrayIndexing	inputCodeMap [ \"KEY_K\" ]
>451	PrimaryExpression	\"KEY_K\"
>452	Identifier	inputCodeMap
>453	ExpressionStatement	 
>454	AssignmentExpr	inputCodeMap [ \"KEY_J\" ] = KEY_J
>455	Identifier	KEY_J
>456	ArrayIndexing	inputCodeMap [ \"KEY_J\" ]
>457	PrimaryExpression	\"KEY_J\"
>458	Identifier	inputCodeMap
>459	ExpressionStatement	 
>460	AssignmentExpr	inputCodeMap [ \"KEY_I\" ] = KEY_I
>461	Identifier	KEY_I
>462	ArrayIndexing	inputCodeMap [ \"KEY_I\" ]
>463	PrimaryExpression	\"KEY_I\"
>464	Identifier	inputCodeMap
>465	ExpressionStatement	 
>466	AssignmentExpr	inputCodeMap [ \"KEY_H\" ] = KEY_H
>467	Identifier	KEY_H
>468	ArrayIndexing	inputCodeMap [ \"KEY_H\" ]
>469	PrimaryExpression	\"KEY_H\"
>470	Identifier	inputCodeMap
>471	ExpressionStatement	 
>472	AssignmentExpr	inputCodeMap [ \"KEY_G\" ] = KEY_G
>473	Identifier	KEY_G
>474	ArrayIndexing	inputCodeMap [ \"KEY_G\" ]
>475	PrimaryExpression	\"KEY_G\"
>476	Identifier	inputCodeMap
>477	ExpressionStatement	 
>478	AssignmentExpr	inputCodeMap [ \"KEY_F\" ] = KEY_F
>479	Identifier	KEY_F
>480	ArrayIndexing	inputCodeMap [ \"KEY_F\" ]
>481	PrimaryExpression	\"KEY_F\"
>482	Identifier	inputCodeMap
>483	ExpressionStatement	 
>484	AssignmentExpr	inputCodeMap [ \"KEY_E\" ] = KEY_E
>485	Identifier	KEY_E
>486	ArrayIndexing	inputCodeMap [ \"KEY_E\" ]
>487	PrimaryExpression	\"KEY_E\"
>488	Identifier	inputCodeMap
>489	ExpressionStatement	 
>490	AssignmentExpr	inputCodeMap [ \"KEY_D\" ] = KEY_D
>491	Identifier	KEY_D
>492	ArrayIndexing	inputCodeMap [ \"KEY_D\" ]
>493	PrimaryExpression	\"KEY_D\"
>494	Identifier	inputCodeMap
>495	ExpressionStatement	 
>496	AssignmentExpr	inputCodeMap [ \"KEY_C\" ] = KEY_C
>497	Identifier	KEY_C
>498	ArrayIndexing	inputCodeMap [ \"KEY_C\" ]
>499	PrimaryExpression	\"KEY_C\"
>500	Identifier	inputCodeMap
>501	ExpressionStatement	 
>502	AssignmentExpr	inputCodeMap [ \"KEY_B\" ] = KEY_B
>503	Identifier	KEY_B
>504	ArrayIndexing	inputCodeMap [ \"KEY_B\" ]
>505	PrimaryExpression	\"KEY_B\"
>506	Identifier	inputCodeMap
>507	ExpressionStatement	 
>508	AssignmentExpr	inputCodeMap [ \"KEY_A\" ] = KEY_A
>509	Identifier	KEY_A
>510	ArrayIndexing	inputCodeMap [ \"KEY_A\" ]
>511	PrimaryExpression	\"KEY_A\"
>512	Identifier	inputCodeMap
>513	ExpressionStatement	 
>514	AssignmentExpr	inputCodeMap [ \"0\" ] = 0
>515	PrimaryExpression	0
>516	ArrayIndexing	inputCodeMap [ \"0\" ]
>517	PrimaryExpression	\"0\"
>518	Identifier	inputCodeMap
>607	FunctionDef	clearInputCodeMap ()
>608	ParameterList	 
>609	ReturnType	void
>610	CompoundStatement	 
>611	ExpressionStatement	 
>612	CallExpression	inputCodeMap . clear ( )
>613	ArgumentList	 
>614	Callee	inputCodeMap . clear
>615	MemberAccess	inputCodeMap . clear
>616	Identifier	clear
>617	Identifier	inputCodeMap
>622	FunctionDef	getInputCodeToString (int key)
>623	ParameterList	int key
>624	Parameter	 
>625	Identifier	key
>626	ParameterType	int
>627	ReturnType	std 
>628	CompoundStatement	 
>629	ReturnStatement	 
>630	PrimaryExpression	\"\"
>631	ForStatement	for ( InputCodeMap 
>632	CompoundStatement	 
>633	IfStatement	if ( ( * i ) . second == key )
>634	CompoundStatement	 
>635	ReturnStatement	 
>636	MemberAccess	( * i ) . first
>637	Identifier	first
>638	UnaryOp	* i
>639	Identifier	i
>640	UnaryOperator	*
>641	Condition	 
>642	EqualityExpression	( * i ) . second == key
>643	Identifier	key
>644	MemberAccess	( * i ) . second
>645	Identifier	second
>646	UnaryOp	* i
>647	Identifier	i
>648	UnaryOperator	*
>649	IncDecOp	 
>650	IncDec	++
>651	Identifier	i
>652	Condition	 
>653	EqualityExpression	i != inputCodeMap . end ( )
>654	CallExpression	inputCodeMap . end ( )
>655	ArgumentList	 
>656	Callee	inputCodeMap . end
>657	MemberAccess	inputCodeMap . end
>658	Identifier	end
>659	Identifier	inputCodeMap
>660	Identifier	i
>661	ForInit	 
>662	IdentifierDeclStatement	InputCodeMap 
>663	IdentifierDecl	i = inputCodeMap . begin ( )
>664	AssignmentExpr	i = inputCodeMap . begin ( )
>665	CallExpression	inputCodeMap . begin ( )
>666	ArgumentList	 
>667	Callee	inputCodeMap . begin
>668	MemberAccess	inputCodeMap . begin
>669	Identifier	begin
>670	Identifier	inputCodeMap
>671	Identifier	i
>672	Identifier	i
>673	IdentifierDeclType	InputCodeMap 
>685	FunctionDef	getInputCodeToUserString (int key)
>686	ParameterList	int key
>687	Parameter	 
>688	Identifier	key
>689	ParameterType	int
>690	ReturnType	std 
>691	CompoundStatement	 
>692	ReturnStatement	 
>693	PrimaryExpression	\"\"
>694	ForStatement	for ( InputCodeMap 
>695	CompoundStatement	 
>696	IfStatement	if ( ( * i ) . second == key )
>697	CompoundStatement	 
>698	ReturnStatement	 
>699	Identifier	use
>700	IfStatement	if ( use == \"MOUSE_BUTTON_MIDDLE\" )
>701	ExpressionStatement	 
>702	AssignmentExpr	use = \"Middle Mouse Button\"
>703	PrimaryExpression	\"Middle Mouse Button\"
>704	Identifier	use
>705	Condition	 
>706	EqualityExpression	use == \"MOUSE_BUTTON_MIDDLE\"
>707	PrimaryExpression	\"MOUSE_BUTTON_MIDDLE\"
>708	Identifier	use
>709	IfStatement	if ( use == \"MOUSE_BUTTON_RIGHT\" )
>710	ExpressionStatement	 
>711	AssignmentExpr	use = \"Right Mouse Button\"
>712	PrimaryExpression	\"Right Mouse Button\"
>713	Identifier	use
>714	Condition	 
>715	EqualityExpression	use == \"MOUSE_BUTTON_RIGHT\"
>716	PrimaryExpression	\"MOUSE_BUTTON_RIGHT\"
>717	Identifier	use
>718	IfStatement	if ( use == \"MOUSE_BUTTON_LEFT\" )
>719	ExpressionStatement	 
>720	AssignmentExpr	use = \"Left Mouse Button\"
>721	PrimaryExpression	\"Left Mouse Button\"
>722	Identifier	use
>723	Condition	 
>724	EqualityExpression	use == \"MOUSE_BUTTON_LEFT\"
>725	PrimaryExpression	\"MOUSE_BUTTON_LEFT\"
>726	Identifier	use
>727	IfStatement	if ( idx != std 
>728	CompoundStatement	 
>729	ExpressionStatement	 
>730	AssignmentExpr	use = use . substr ( 4 , use . size ( ) )
>731	CallExpression	use . substr ( 4 , use . size ( ) )
>732	ArgumentList	4
>733	Argument	use . size ( )
>734	CallExpression	use . size ( )
>735	ArgumentList	 
>736	Callee	use . size
>737	MemberAccess	use . size
>738	Identifier	size
>739	Identifier	use
>740	Argument	4
>741	PrimaryExpression	4
>742	Callee	use . substr
>743	MemberAccess	use . substr
>744	Identifier	substr
>745	Identifier	use
>746	Identifier	use
>747	Condition	 
>748	EqualityExpression	idx != std 
>749	Identifier	std 
>750	Identifier	idx
>751	ExpressionStatement	 
>752	AssignmentExpr	idx = use . find ( \"KEY_\" )
>753	CallExpression	use . find ( \"KEY_\" )
>754	ArgumentList	\"KEY_\"
>755	Argument	\"KEY_\"
>756	PrimaryExpression	\"KEY_\"
>757	Callee	use . find
>758	MemberAccess	use . find
>759	Identifier	find
>760	Identifier	use
>761	Identifier	idx
>762	IdentifierDeclStatement	 
>763	IdentifierDecl	idx = 0
>764	AssignmentExpr	idx = 0
>765	PrimaryExpression	0
>766	Identifier	idx
>767	Identifier	idx
>768	IdentifierDeclType	int
>769	IdentifierDeclStatement	 
>770	IdentifierDecl	use = ( * i ) . first
>771	AssignmentExpr	use = ( * i ) . first
>772	MemberAccess	( * i ) . first
>773	Identifier	first
>774	UnaryOp	* i
>775	Identifier	i
>776	UnaryOperator	*
>777	Identifier	use
>778	Identifier	use
>779	IdentifierDeclType	std 
>780	Condition	 
>781	EqualityExpression	( * i ) . second == key
>782	Identifier	key
>783	MemberAccess	( * i ) . second
>784	Identifier	second
>785	UnaryOp	* i
>786	Identifier	i
>787	UnaryOperator	*
>788	IncDecOp	 
>789	IncDec	++
>790	Identifier	i
>791	Condition	 
>792	EqualityExpression	i != inputCodeMap . end ( )
>793	CallExpression	inputCodeMap . end ( )
>794	ArgumentList	 
>795	Callee	inputCodeMap . end
>796	MemberAccess	inputCodeMap . end
>797	Identifier	end
>798	Identifier	inputCodeMap
>799	Identifier	i
>800	ForInit	 
>801	IdentifierDeclStatement	InputCodeMap 
>802	IdentifierDecl	i = inputCodeMap . begin ( )
>803	AssignmentExpr	i = inputCodeMap . begin ( )
>804	CallExpression	inputCodeMap . begin ( )
>805	ArgumentList	 
>806	Callee	inputCodeMap . begin
>807	MemberAccess	inputCodeMap . begin
>808	Identifier	begin
>809	Identifier	inputCodeMap
>810	Identifier	i
>811	Identifier	i
>812	IdentifierDeclType	InputCodeMap 
>830	FunctionDef	getStringToInputCode (const std 
>831	ParameterList	const std 
>832	Parameter	 
>833	Identifier	string
>834	ParameterType	const std 
>835	ReturnType	int
>836	CompoundStatement	 
>837	ReturnStatement	 
>838	ArrayIndexing	inputCodeMap [ string ]
>839	Identifier	string
>840	Identifier	inputCodeMap
<7=10,9,8
<10=513,507,501,495,489,483,477,471,465,459,453,447,441,435,429,423,417,411,405,399,393,387,381,375,369,363,357,351,345,11,51,57,63,69,75,81,87,93,99,105,111,117,123,129,135,141,147,153,159,165,171,177,183,189,195,201,207,213,219,225,231,237,243,249,255,261,267,273,279,285,291,297,303,309,315,321,327,333,339
<11=43,39,36,12
<12=32,26,13
<13=14
<14=18,15
<15=17,16
<18=25,19
<19=21,20
<21=22
<22=24,23
<26=27
<27=31,28
<28=30,29
<32=33
<33=35,34
<36=38,37
<39=40
<40=42,41
<43=44
<44=45
<45=50,49,46
<46=48,47
<51=52
<52=54,53
<54=56,55
<57=58
<58=60,59
<60=62,61
<63=64
<64=66,65
<66=68,67
<69=70
<70=72,71
<72=74,73
<75=76
<76=78,77
<78=80,79
<81=82
<82=84,83
<84=86,85
<87=88
<88=90,89
<90=92,91
<93=94
<94=96,95
<96=98,97
<99=100
<100=102,101
<102=104,103
<105=106
<106=108,107
<108=110,109
<111=112
<112=114,113
<114=116,115
<117=118
<118=120,119
<120=122,121
<123=124
<124=126,125
<126=128,127
<129=130
<130=132,131
<132=134,133
<135=136
<136=138,137
<138=140,139
<141=142
<142=144,143
<144=146,145
<147=148
<148=150,149
<150=152,151
<153=154
<154=156,155
<156=158,157
<159=160
<160=162,161
<162=164,163
<165=166
<166=168,167
<168=170,169
<171=172
<172=174,173
<174=176,175
<177=178
<178=180,179
<180=182,181
<183=184
<184=186,185
<186=188,187
<189=190
<190=192,191
<192=194,193
<195=196
<196=198,197
<198=200,199
<201=202
<202=204,203
<204=206,205
<207=208
<208=210,209
<210=212,211
<213=214
<214=216,215
<216=218,217
<219=220
<220=222,221
<222=224,223
<225=226
<226=228,227
<228=230,229
<231=232
<232=234,233
<234=236,235
<237=238
<238=240,239
<240=242,241
<243=244
<244=246,245
<246=248,247
<249=250
<250=252,251
<252=254,253
<255=256
<256=258,257
<258=260,259
<261=262
<262=264,263
<264=266,265
<267=268
<268=270,269
<270=272,271
<273=274
<274=276,275
<276=278,277
<279=280
<280=282,281
<282=284,283
<285=286
<286=288,287
<288=290,289
<291=292
<292=294,293
<294=296,295
<297=298
<298=300,299
<300=302,301
<303=304
<304=306,305
<306=308,307
<309=310
<310=312,311
<312=314,313
<315=316
<316=318,317
<318=320,319
<321=322
<322=324,323
<324=326,325
<327=328
<328=330,329
<330=332,331
<333=334
<334=336,335
<336=338,337
<339=340
<340=342,341
<342=344,343
<345=346
<346=348,347
<348=350,349
<351=352
<352=354,353
<354=356,355
<357=358
<358=360,359
<360=362,361
<363=364
<364=366,365
<366=368,367
<369=370
<370=372,371
<372=374,373
<375=376
<376=378,377
<378=380,379
<381=382
<382=384,383
<384=386,385
<387=388
<388=390,389
<390=392,391
<393=394
<394=396,395
<396=398,397
<399=400
<400=402,401
<402=404,403
<405=406
<406=408,407
<408=410,409
<411=412
<412=414,413
<414=416,415
<417=418
<418=420,419
<420=422,421
<423=424
<424=426,425
<426=428,427
<429=430
<430=432,431
<432=434,433
<435=436
<436=438,437
<438=440,439
<441=442
<442=444,443
<444=446,445
<447=448
<448=450,449
<450=452,451
<453=454
<454=456,455
<456=458,457
<459=460
<460=462,461
<462=464,463
<465=466
<466=468,467
<468=470,469
<471=472
<472=474,473
<474=476,475
<477=478
<478=480,479
<480=482,481
<483=484
<484=486,485
<486=488,487
<489=490
<490=492,491
<492=494,493
<495=496
<496=498,497
<498=500,499
<501=502
<502=504,503
<504=506,505
<507=508
<508=510,509
<510=512,511
<513=514
<514=516,515
<516=518,517
<607=610,609,608
<610=611
<611=612
<612=614,613
<614=615
<615=617,616
<622=628,627,623
<623=624
<624=626,625
<628=631,629
<629=630
<631=661,652,649,632
<632=633
<633=641,634
<634=635
<635=636
<636=638,637
<638=640,639
<641=642
<642=644,643
<644=646,645
<646=648,647
<649=651,650
<652=653
<653=660,654
<654=656,655
<656=657
<657=659,658
<661=662
<662=663
<663=673,672,664
<664=671,665
<665=667,666
<667=668
<668=670,669
<685=691,690,686
<686=687
<687=689,688
<691=694,692
<692=693
<694=800,791,788,695
<695=696
<696=780,697
<697=769,762,751,727,718,709,700,698
<698=699
<700=705,701
<701=702
<702=704,703
<705=706
<706=708,707
<709=714,710
<710=711
<711=713,712
<714=715
<715=717,716
<718=723,719
<719=720
<720=722,721
<723=724
<724=726,725
<727=747,728
<728=729
<729=730
<730=746,731
<731=742,732
<732=740,733
<733=734
<734=736,735
<736=737
<737=739,738
<740=741
<742=743
<743=745,744
<747=748
<748=750,749
<751=752
<752=761,753
<753=757,754
<754=755
<755=756
<757=758
<758=760,759
<762=763
<763=768,767,764
<764=766,765
<769=770
<770=779,778,771
<771=777,772
<772=774,773
<774=776,775
<780=781
<781=783,782
<783=785,784
<785=787,786
<788=790,789
<791=792
<792=799,793
<793=795,794
<795=796
<796=798,797
<800=801
<801=802
<802=812,811,803
<803=810,804
<804=806,805
<806=807
<807=809,808
<830=836,835,831
<831=832
<832=834,833
<836=837
<837=838
<838=840,839
