>3	FunctionDef	ltrim (std 
>4	ParameterList	std 
>5	Parameter	 
>6	Identifier	s
>7	ParameterType	std 
>8	ReturnType	std 
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	s
>12	ExpressionStatement	 
>13	CallExpression	s . erase ( s . begin ( ) , std 
>14	ArgumentList	s . begin ( )
>15	Argument	std 
>16	CallExpression	std 
>17	ArgumentList	s . begin ( )
>18	Argument	std 
>19	CallExpression	std 
>20	ArgumentList	std 
>21	Argument	int > ( std 
>22	RelationalExpression	int > ( std 
>23	Identifier	std 
>24	Identifier	int
>25	Argument	std 
>26	RelationalExpression	std 
>27	Identifier	int
>28	Identifier	std 
>29	Callee	std 
>30	Identifier	std 
>31	Argument	s . end ( )
>32	CallExpression	s . end ( )
>33	ArgumentList	 
>34	Callee	s . end
>35	MemberAccess	s . end
>36	Identifier	end
>37	Identifier	s
>38	Argument	s . begin ( )
>39	CallExpression	s . begin ( )
>40	ArgumentList	 
>41	Callee	s . begin
>42	MemberAccess	s . begin
>43	Identifier	begin
>44	Identifier	s
>45	Callee	std 
>46	Identifier	std 
>47	Argument	s . begin ( )
>48	CallExpression	s . begin ( )
>49	ArgumentList	 
>50	Callee	s . begin
>51	MemberAccess	s . begin
>52	Identifier	begin
>53	Identifier	s
>54	Callee	s . erase
>55	MemberAccess	s . erase
>56	Identifier	erase
>57	Identifier	s
>69	FunctionDef	rtrim (std 
>70	ParameterList	std 
>71	Parameter	 
>72	Identifier	s
>73	ParameterType	std 
>74	ReturnType	std 
>75	CompoundStatement	 
>76	ReturnStatement	 
>77	Identifier	s
>78	ExpressionStatement	 
>79	CallExpression	s . erase ( std 
>80	ArgumentList	std 
>81	Argument	s . end ( )
>82	CallExpression	s . end ( )
>83	ArgumentList	 
>84	Callee	s . end
>85	MemberAccess	s . end
>86	Identifier	end
>87	Identifier	s
>88	Argument	std 
>89	CallExpression	std 
>90	ArgumentList	 
>91	Callee	std 
>92	MemberAccess	std 
>93	Identifier	base
>94	CallExpression	std 
>95	ArgumentList	s . rbegin ( )
>96	Argument	std 
>97	CallExpression	std 
>98	ArgumentList	std 
>99	Argument	int > ( std 
>100	RelationalExpression	int > ( std 
>101	Identifier	std 
>102	Identifier	int
>103	Argument	std 
>104	RelationalExpression	std 
>105	Identifier	int
>106	Identifier	std 
>107	Callee	std 
>108	Identifier	std 
>109	Argument	s . rend ( )
>110	CallExpression	s . rend ( )
>111	ArgumentList	 
>112	Callee	s . rend
>113	MemberAccess	s . rend
>114	Identifier	rend
>115	Identifier	s
>116	Argument	s . rbegin ( )
>117	CallExpression	s . rbegin ( )
>118	ArgumentList	 
>119	Callee	s . rbegin
>120	MemberAccess	s . rbegin
>121	Identifier	rbegin
>122	Identifier	s
>123	Callee	std 
>124	Identifier	std 
>125	Callee	s . erase
>126	MemberAccess	s . erase
>127	Identifier	erase
>128	Identifier	s
>142	FunctionDef	trim (std 
>143	ParameterList	std 
>144	Parameter	 
>145	Identifier	s
>146	ParameterType	std 
>147	ReturnType	std 
>148	CompoundStatement	 
>149	ReturnStatement	 
>150	CallExpression	ltrim ( rtrim ( s ) )
>151	ArgumentList	rtrim ( s )
>152	Argument	rtrim ( s )
>153	CallExpression	rtrim ( s )
>154	ArgumentList	s
>155	Argument	s
>156	Identifier	s
>157	Callee	rtrim
>158	Identifier	rtrim
>159	Callee	ltrim
>160	Identifier	ltrim
>167	FunctionDef	getdir (std 
>168	ParameterList	std 
>169	Parameter	 
>170	Identifier	files
>171	ParameterType	std 
>172	Parameter	 
>173	Identifier	dir
>174	ParameterType	std 
>175	ReturnType	int
>176	CompoundStatement	 
>177	ReturnStatement	 
>178	CallExpression	files . size ( )
>179	ArgumentList	 
>180	Callee	files . size
>181	MemberAccess	files . size
>182	Identifier	size
>183	Identifier	files
>184	ForStatement	for ( unsigned int i = 0 ; i < files . size ( ) ; i ++ )
>185	CompoundStatement	 
>186	IfStatement	if ( files [ i ] . at ( 0 ) != '/' )
>187	ExpressionStatement	 
>188	AssignmentExpr	files [ i ] = dir + files [ i ]
>189	AdditiveExpression	dir + files [ i ]
>190	ArrayIndexing	files [ i ]
>191	Identifier	i
>192	Identifier	files
>193	Identifier	dir
>194	ArrayIndexing	files [ i ]
>195	Identifier	i
>196	Identifier	files
>197	Condition	 
>198	EqualityExpression	files [ i ] . at ( 0 ) != '/'
>199	PrimaryExpression	'/'
>200	CallExpression	files [ i ] . at ( 0 )
>201	ArgumentList	0
>202	Argument	0
>203	PrimaryExpression	0
>204	Callee	files [ i ] . at
>205	MemberAccess	files [ i ] . at
>206	Identifier	at
>207	ArrayIndexing	files [ i ]
>208	Identifier	i
>209	Identifier	files
>210	IncDecOp	 
>211	IncDec	++
>212	Identifier	i
>213	Condition	 
>214	RelationalExpression	i < files . size ( )
>215	CallExpression	files . size ( )
>216	ArgumentList	 
>217	Callee	files . size
>218	MemberAccess	files . size
>219	Identifier	size
>220	Identifier	files
>221	Identifier	i
>222	ForInit	 
>223	IdentifierDeclStatement	unsigned int i = 0 ;
>224	IdentifierDecl	i = 0
>225	AssignmentExpr	i = 0
>226	PrimaryExpression	0
>227	Identifier	i
>228	Identifier	i
>229	IdentifierDeclType	unsigned int
>230	IfStatement	if ( dir . at ( dir . length ( ) - 1 ) != '/' )
>231	ExpressionStatement	 
>232	AssignmentExpr	dir = dir + \"/\"
>233	AdditiveExpression	dir + \"/\"
>234	PrimaryExpression	\"/\"
>235	Identifier	dir
>236	Identifier	dir
>237	Condition	 
>238	EqualityExpression	dir . at ( dir . length ( ) - 1 ) != '/'
>239	PrimaryExpression	'/'
>240	CallExpression	dir . at ( dir . length ( ) - 1 )
>241	ArgumentList	dir . length ( ) - 1
>242	Argument	dir . length ( ) - 1
>243	AdditiveExpression	dir . length ( ) - 1
>244	PrimaryExpression	1
>245	CallExpression	dir . length ( )
>246	ArgumentList	 
>247	Callee	dir . length
>248	MemberAccess	dir . length
>249	Identifier	length
>250	Identifier	dir
>251	Callee	dir . at
>252	MemberAccess	dir . at
>253	Identifier	at
>254	Identifier	dir
>255	ExpressionStatement	 
>256	CallExpression	std 
>257	ArgumentList	files . begin ( )
>258	Argument	files . end ( )
>259	CallExpression	files . end ( )
>260	ArgumentList	 
>261	Callee	files . end
>262	MemberAccess	files . end
>263	Identifier	end
>264	Identifier	files
>265	Argument	files . begin ( )
>266	CallExpression	files . begin ( )
>267	ArgumentList	 
>268	Callee	files . begin
>269	MemberAccess	files . begin
>270	Identifier	begin
>271	Identifier	files
>272	Callee	std 
>273	Identifier	std 
>274	ExpressionStatement	 
>275	CallExpression	closedir ( dp )
>276	ArgumentList	dp
>277	Argument	dp
>278	Identifier	dp
>279	Callee	closedir
>280	Identifier	closedir
>281	WhileStatement	while ( ( dirp = readdir ( dp ) ) != NULL )
>282	CompoundStatement	 
>283	IfStatement	if ( name != \".\" && name != \"..\" )
>284	ExpressionStatement	 
>285	CallExpression	files . push_back ( name )
>286	ArgumentList	name
>287	Argument	name
>288	Identifier	name
>289	Callee	files . push_back
>290	MemberAccess	files . push_back
>291	Identifier	push_back
>292	Identifier	files
>293	Condition	 
>294	AndExpression	name != \".\" && name != \"..\"
>295	EqualityExpression	name != \"..\"
>296	PrimaryExpression	\"..\"
>297	Identifier	name
>298	EqualityExpression	name != \".\"
>299	PrimaryExpression	\".\"
>300	Identifier	name
>301	IdentifierDeclStatement	 
>302	IdentifierDecl	name = std 
>303	AssignmentExpr	name = std 
>304	CallExpression	std 
>305	ArgumentList	dirp -> d_name
>306	Argument	dirp -> d_name
>307	PtrMemberAccess	dirp -> d_name
>308	Identifier	d_name
>309	Identifier	dirp
>310	Callee	std 
>311	Identifier	std 
>312	Identifier	name
>313	Identifier	name
>314	IdentifierDeclType	std 
>315	Condition	 
>316	EqualityExpression	( dirp = readdir ( dp ) ) != NULL
>317	Identifier	NULL
>318	AssignmentExpr	dirp = readdir ( dp )
>319	CallExpression	readdir ( dp )
>320	ArgumentList	dp
>321	Argument	dp
>322	Identifier	dp
>323	Callee	readdir
>324	Identifier	readdir
>325	Identifier	dirp
>326	IfStatement	if ( ( dp = opendir ( dir . c_str ( ) ) ) == NULL )
>327	CompoundStatement	 
>328	ReturnStatement	 
>329	UnaryOp	- 1
>330	PrimaryExpression	1
>331	UnaryOperator	-
>332	Condition	 
>333	EqualityExpression	( dp = opendir ( dir . c_str ( ) ) ) == NULL
>334	Identifier	NULL
>335	AssignmentExpr	dp = opendir ( dir . c_str ( ) )
>336	CallExpression	opendir ( dir . c_str ( ) )
>337	ArgumentList	dir . c_str ( )
>338	Argument	dir . c_str ( )
>339	CallExpression	dir . c_str ( )
>340	ArgumentList	 
>341	Callee	dir . c_str
>342	MemberAccess	dir . c_str
>343	Identifier	c_str
>344	Identifier	dir
>345	Callee	opendir
>346	Identifier	opendir
>347	Identifier	dp
>348	IdentifierDeclStatement	 
>349	IdentifierDecl	* dirp
>350	Identifier	dirp
>351	IdentifierDeclType	struct dirent *
>352	IdentifierDeclStatement	 
>353	IdentifierDecl	* dp
>354	Identifier	dp
>355	IdentifierDeclType	DIR *
>380	FunctionDef	getFile (std 
>381	ParameterList	std 
>382	Parameter	 
>383	Identifier	files
>384	ParameterType	std 
>385	Parameter	 
>386	Identifier	source
>387	ParameterType	std 
>388	ReturnType	int
>389	CompoundStatement	 
>390	IfStatement	if ( f . good ( ) && f . is_open ( ) )
>391	ElseStatement	else
>392	CompoundStatement	 
>393	ReturnStatement	 
>394	UnaryOp	- 1
>395	PrimaryExpression	1
>396	UnaryOperator	-
>397	ExpressionStatement	 
>398	CallExpression	f . close ( )
>399	ArgumentList	 
>400	Callee	f . close
>401	MemberAccess	f . close
>402	Identifier	close
>403	Identifier	f
>404	CompoundStatement	 
>405	ReturnStatement	 
>406	CastExpression	( int ) files . size ( )
>407	CallExpression	files . size ( )
>408	ArgumentList	 
>409	Callee	files . size
>410	MemberAccess	files . size
>411	Identifier	size
>412	Identifier	files
>413	CastTarget	int
>414	ForStatement	for ( unsigned int i = 0 ; i < files . size ( ) ; i ++ )
>415	CompoundStatement	 
>416	IfStatement	if ( files [ i ] . at ( 0 ) != '/' )
>417	ExpressionStatement	 
>418	AssignmentExpr	files [ i ] = prefix + \"/\" + files [ i ]
>419	AdditiveExpression	prefix + \"/\" + files [ i ]
>420	AdditiveExpression	\"/\" + files [ i ]
>421	ArrayIndexing	files [ i ]
>422	Identifier	i
>423	Identifier	files
>424	PrimaryExpression	\"/\"
>425	Identifier	prefix
>426	ArrayIndexing	files [ i ]
>427	Identifier	i
>428	Identifier	files
>429	Condition	 
>430	EqualityExpression	files [ i ] . at ( 0 ) != '/'
>431	PrimaryExpression	'/'
>432	CallExpression	files [ i ] . at ( 0 )
>433	ArgumentList	0
>434	Argument	0
>435	PrimaryExpression	0
>436	Callee	files [ i ] . at
>437	MemberAccess	files [ i ] . at
>438	Identifier	at
>439	ArrayIndexing	files [ i ]
>440	Identifier	i
>441	Identifier	files
>442	IncDecOp	 
>443	IncDec	++
>444	Identifier	i
>445	Condition	 
>446	RelationalExpression	i < files . size ( )
>447	CallExpression	files . size ( )
>448	ArgumentList	 
>449	Callee	files . size
>450	MemberAccess	files . size
>451	Identifier	size
>452	Identifier	files
>453	Identifier	i
>454	ForInit	 
>455	IdentifierDeclStatement	unsigned int i = 0 ;
>456	IdentifierDecl	i = 0
>457	AssignmentExpr	i = 0
>458	PrimaryExpression	0
>459	Identifier	i
>460	Identifier	i
>461	IdentifierDeclType	unsigned int
>462	IfStatement	if ( sp == std 
>463	ElseStatement	else
>464	ExpressionStatement	 
>465	AssignmentExpr	prefix = source . substr ( 0 , sp )
>466	CallExpression	source . substr ( 0 , sp )
>467	ArgumentList	0
>468	Argument	sp
>469	Identifier	sp
>470	Argument	0
>471	PrimaryExpression	0
>472	Callee	source . substr
>473	MemberAccess	source . substr
>474	Identifier	substr
>475	Identifier	source
>476	Identifier	prefix
>477	ExpressionStatement	 
>478	AssignmentExpr	prefix = \"\"
>479	PrimaryExpression	\"\"
>480	Identifier	prefix
>481	Condition	 
>482	EqualityExpression	sp == std 
>483	Identifier	std 
>484	Identifier	sp
>485	IdentifierDeclStatement	 
>486	IdentifierDecl	prefix
>487	Identifier	prefix
>488	IdentifierDeclType	std 
>489	IdentifierDeclStatement	 
>490	IdentifierDecl	sp = source . find_last_of ( '/' )
>491	AssignmentExpr	sp = source . find_last_of ( '/' )
>492	CallExpression	source . find_last_of ( '/' )
>493	ArgumentList	'/'
>494	Argument	'/'
>495	PrimaryExpression	'/'
>496	Callee	source . find_last_of
>497	MemberAccess	source . find_last_of
>498	Identifier	find_last_of
>499	Identifier	source
>500	Identifier	sp
>501	Identifier	sp
>502	IdentifierDeclType	size_t
>503	ExpressionStatement	 
>504	CallExpression	f . close ( )
>505	ArgumentList	 
>506	Callee	f . close
>507	MemberAccess	f . close
>508	Identifier	close
>509	Identifier	f
>510	WhileStatement	while ( ! f . eof ( ) )
>511	CompoundStatement	 
>512	ExpressionStatement	 
>513	CallExpression	files . push_back ( l )
>514	ArgumentList	l
>515	Argument	l
>516	Identifier	l
>517	Callee	files . push_back
>518	MemberAccess	files . push_back
>519	Identifier	push_back
>520	Identifier	files
>521	IfStatement	if ( l == \"\" || l [ 0 ] == '#' )
>522	ContinueStatement	 
>523	Condition	 
>524	OrExpression	l == \"\" || l [ 0 ] == '#'
>525	EqualityExpression	l [ 0 ] == '#'
>526	PrimaryExpression	'#'
>527	ArrayIndexing	l [ 0 ]
>528	PrimaryExpression	0
>529	Identifier	l
>530	EqualityExpression	l == \"\"
>531	PrimaryExpression	\"\"
>532	Identifier	l
>533	ExpressionStatement	 
>534	AssignmentExpr	l = trim ( l )
>535	CallExpression	trim ( l )
>536	ArgumentList	l
>537	Argument	l
>538	Identifier	l
>539	Callee	trim
>540	Identifier	trim
>541	Identifier	l
>542	ExpressionStatement	 
>543	CallExpression	std 
>544	ArgumentList	f
>545	Argument	l
>546	Identifier	l
>547	Argument	f
>548	Identifier	f
>549	Callee	std 
>550	Identifier	std 
>551	IdentifierDeclStatement	 
>552	IdentifierDecl	l
>553	Identifier	l
>554	IdentifierDeclType	std 
>555	Condition	 
>556	UnaryOp	! f . eof ( )
>557	CallExpression	f . eof ( )
>558	ArgumentList	 
>559	Callee	f . eof
>560	MemberAccess	f . eof
>561	Identifier	eof
>562	Identifier	f
>563	UnaryOperator	!
>564	Condition	 
>565	AndExpression	f . good ( ) && f . is_open ( )
>566	CallExpression	f . is_open ( )
>567	ArgumentList	 
>568	Callee	f . is_open
>569	MemberAccess	f . is_open
>570	Identifier	is_open
>571	Identifier	f
>572	CallExpression	f . good ( )
>573	ArgumentList	 
>574	Callee	f . good
>575	MemberAccess	f . good
>576	Identifier	good
>577	Identifier	f
>578	IdentifierDeclStatement	 
>579	IdentifierDecl	f ( source . c_str ( ) )
>580	CallExpression	source . c_str ( )
>581	ArgumentList	 
>582	Callee	source . c_str
>583	MemberAccess	source . c_str
>584	Identifier	c_str
>585	Identifier	source
>586	Identifier	f
>587	IdentifierDeclType	std 
>610	FunctionDef	main (int argc , char * * argv)
>611	ParameterList	int argc , char * * argv
>612	Parameter	 
>613	Identifier	argv
>614	ParameterType	char * *
>615	Parameter	 
>616	Identifier	argc
>617	ParameterType	int
>618	ReturnType	int
>619	CompoundStatement	 
>620	ReturnStatement	 
>621	PrimaryExpression	0
>622	ExpressionStatement	 
>623	Identifier	outputWrapper
>624	Statement	 
>625	ExpressionStatement	 
>626	Identifier	undistorter
>627	Statement	 
>628	ExpressionStatement	 
>629	Identifier	system
>630	Statement	 
>631	ExpressionStatement	 
>632	CallExpression	system -> finalize ( )
>633	ArgumentList	 
>634	Callee	system -> finalize
>635	PtrMemberAccess	system -> finalize
>636	Identifier	finalize
>637	Identifier	system
>638	ForStatement	for ( unsigned int i = 0 ; i < files . size ( ) ; i ++ )
>639	CompoundStatement	 
>640	IfStatement	if ( ! ros 
>641	BreakStatement	 
>642	Condition	 
>643	UnaryOp	! ros 
>644	CallExpression	ros 
>645	ArgumentList	 
>646	Callee	ros 
>647	Identifier	ros 
>648	UnaryOperator	!
>649	ExpressionStatement	 
>650	CallExpression	ros 
>651	ArgumentList	 
>652	Callee	ros 
>653	Identifier	ros 
>654	IfStatement	if ( fullResetRequested )
>655	CompoundStatement	 
>656	ExpressionStatement	 
>657	AssignmentExpr	runningIDX = 0
>658	PrimaryExpression	0
>659	Identifier	runningIDX
>660	ExpressionStatement	 
>661	AssignmentExpr	fullResetRequested = false
>662	Identifier	false
>663	Identifier	fullResetRequested
>664	ExpressionStatement	 
>665	CallExpression	system -> setVisualization ( outputWrapper )
>666	ArgumentList	outputWrapper
>667	Argument	outputWrapper
>668	Identifier	outputWrapper
>669	Callee	system -> setVisualization
>670	PtrMemberAccess	system -> setVisualization
>671	Identifier	setVisualization
>672	Identifier	system
>673	ExpressionStatement	 
>674	AssignmentExpr	system = new SlamSystem ( w , h , K , doSlam )
>675	Expression	w , h , K , doSlam
>676	Expression	h , K , doSlam
>677	Expression	K , doSlam
>678	Identifier	doSlam
>679	Identifier	K
>680	Identifier	h
>681	Identifier	w
>682	Identifier	system
>683	ExpressionStatement	 
>684	Identifier	system
>685	Statement	 
>686	ExpressionStatement	 
>687	CallExpression	printf ( \"FULL RESET!\n\" )
>688	ArgumentList	\"FULL RESET!\n\"
>689	Argument	\"FULL RESET!\n\"
>690	PrimaryExpression	\"FULL RESET!\n\"
>691	Callee	printf
>692	Identifier	printf
>693	Condition	 
>694	Identifier	fullResetRequested
>695	IfStatement	if ( hz != 0 )
>696	ExpressionStatement	 
>697	CallExpression	r . sleep ( )
>698	ArgumentList	 
>699	Callee	r . sleep
>700	MemberAccess	r . sleep
>701	Identifier	sleep
>702	Identifier	r
>703	Condition	 
>704	EqualityExpression	hz != 0
>705	PrimaryExpression	0
>706	Identifier	hz
>707	ExpressionStatement	 
>708	AssignmentExpr	fakeTimeStamp += 0.03
>709	PrimaryExpression	0.03
>710	Identifier	fakeTimeStamp
>711	ExpressionStatement	 
>712	IncDecOp	runningIDX ++
>713	IncDec	++
>714	Identifier	runningIDX
>715	IfStatement	if ( runningIDX == 0 )
>716	ElseStatement	else
>717	ExpressionStatement	 
>718	CallExpression	system -> trackFrame ( image . data , runningIDX , hz == 0 , fakeTimeStamp )
>719	ArgumentList	image . data
>720	Argument	fakeTimeStamp
>721	Identifier	fakeTimeStamp
>722	Argument	hz == 0
>723	EqualityExpression	hz == 0
>724	PrimaryExpression	0
>725	Identifier	hz
>726	Argument	runningIDX
>727	Identifier	runningIDX
>728	Argument	image . data
>729	MemberAccess	image . data
>730	Identifier	data
>731	Identifier	image
>732	Callee	system -> trackFrame
>733	PtrMemberAccess	system -> trackFrame
>734	Identifier	trackFrame
>735	Identifier	system
>736	ExpressionStatement	 
>737	CallExpression	system -> randomInit ( image . data , fakeTimeStamp , runningIDX )
>738	ArgumentList	image . data
>739	Argument	runningIDX
>740	Identifier	runningIDX
>741	Argument	fakeTimeStamp
>742	Identifier	fakeTimeStamp
>743	Argument	image . data
>744	MemberAccess	image . data
>745	Identifier	data
>746	Identifier	image
>747	Callee	system -> randomInit
>748	PtrMemberAccess	system -> randomInit
>749	Identifier	randomInit
>750	Identifier	system
>751	Condition	 
>752	EqualityExpression	runningIDX == 0
>753	PrimaryExpression	0
>754	Identifier	runningIDX
>755	ExpressionStatement	 
>756	CallExpression	assert ( image . type ( ) == CV_8U )
>757	ArgumentList	image . type ( ) == CV_8U
>758	Argument	image . type ( ) == CV_8U
>759	EqualityExpression	image . type ( ) == CV_8U
>760	Identifier	CV_8U
>761	CallExpression	image . type ( )
>762	ArgumentList	 
>763	Callee	image . type
>764	MemberAccess	image . type
>765	Identifier	type
>766	Identifier	image
>767	Callee	assert
>768	Identifier	assert
>769	ExpressionStatement	 
>770	CallExpression	undistorter -> undistort ( imageDist , image )
>771	ArgumentList	imageDist
>772	Argument	image
>773	Identifier	image
>774	Argument	imageDist
>775	Identifier	imageDist
>776	Callee	undistorter -> undistort
>777	PtrMemberAccess	undistorter -> undistort
>778	Identifier	undistort
>779	Identifier	undistorter
>780	ExpressionStatement	 
>781	CallExpression	assert ( imageDist . type ( ) == CV_8U )
>782	ArgumentList	imageDist . type ( ) == CV_8U
>783	Argument	imageDist . type ( ) == CV_8U
>784	EqualityExpression	imageDist . type ( ) == CV_8U
>785	Identifier	CV_8U
>786	CallExpression	imageDist . type ( )
>787	ArgumentList	 
>788	Callee	imageDist . type
>789	MemberAccess	imageDist . type
>790	Identifier	type
>791	Identifier	imageDist
>792	Callee	assert
>793	Identifier	assert
>794	IfStatement	if ( imageDist . rows != h_inp || imageDist . cols != w_inp )
>795	CompoundStatement	 
>796	ContinueStatement	 
>797	IfStatement	if ( imageDist . rows * imageDist . cols == 0 )
>798	ElseStatement	else
>799	ExpressionStatement	 
>800	CallExpression	printf ( \"image %s has wrong dimensions - expecting %d x %d, found %d x %d. Skipping.\n\" , files [ i ] . c_str ( ) , \
>801	ArgumentList	\"image %s has wrong dimensions - expecting %d x %d, found %d x %d. Skipping.\n\"
>802	Argument	imageDist . rows
>803	MemberAccess	imageDist . rows
>804	Identifier	rows
>805	Identifier	imageDist
>806	Argument	imageDist . cols
>807	MemberAccess	imageDist . cols
>808	Identifier	cols
>809	Identifier	imageDist
>810	Argument	h
>811	Identifier	h
>812	Argument	w
>813	Identifier	w
>814	Argument	files [ i ] . c_str ( )
>815	CallExpression	files [ i ] . c_str ( )
>816	ArgumentList	 
>817	Callee	files [ i ] . c_str
>818	MemberAccess	files [ i ] . c_str
>819	Identifier	c_str
>820	ArrayIndexing	files [ i ]
>821	Identifier	i
>822	Identifier	files
>823	Argument	\"image %s has wrong dimensions - expecting %d x %d, found %d x %d. Skipping.\n\"
>824	PrimaryExpression	\"image %s has wrong dimensions - expecting %d x %d, found %d x %d. Skipping.\n\"
>825	Callee	printf
>826	Identifier	printf
>827	ExpressionStatement	 
>828	CallExpression	printf ( \"failed to load image %s! skipping.\n\" , files [ i ] . c_str ( ) )
>829	ArgumentList	\"failed to load image %s! skipping.\n\"
>830	Argument	files [ i ] . c_str ( )
>831	CallExpression	files [ i ] . c_str ( )
>832	ArgumentList	 
>833	Callee	files [ i ] . c_str
>834	MemberAccess	files [ i ] . c_str
>835	Identifier	c_str
>836	ArrayIndexing	files [ i ]
>837	Identifier	i
>838	Identifier	files
>839	Argument	\"failed to load image %s! skipping.\n\"
>840	PrimaryExpression	\"failed to load image %s! skipping.\n\"
>841	Callee	printf
>842	Identifier	printf
>843	Condition	 
>844	EqualityExpression	imageDist . rows * imageDist . cols == 0
>845	PrimaryExpression	0
>846	MultiplicativeExpression	imageDist . rows * imageDist . cols
>847	MemberAccess	imageDist . cols
>848	Identifier	cols
>849	Identifier	imageDist
>850	MemberAccess	imageDist . rows
>851	Identifier	rows
>852	Identifier	imageDist
>853	Condition	 
>854	OrExpression	imageDist . rows != h_inp || imageDist . cols != w_inp
>855	EqualityExpression	imageDist . cols != w_inp
>856	Identifier	w_inp
>857	MemberAccess	imageDist . cols
>858	Identifier	cols
>859	Identifier	imageDist
>860	EqualityExpression	imageDist . rows != h_inp
>861	Identifier	h_inp
>862	MemberAccess	imageDist . rows
>863	Identifier	rows
>864	Identifier	imageDist
>865	IdentifierDeclStatement	 
>866	IdentifierDecl	imageDist = cv 
>867	AssignmentExpr	imageDist = cv 
>868	CallExpression	cv 
>869	ArgumentList	files [ i ]
>870	Argument	CV_LOAD_IMAGE_GRAYSCALE
>871	Identifier	CV_LOAD_IMAGE_GRAYSCALE
>872	Argument	files [ i ]
>873	ArrayIndexing	files [ i ]
>874	Identifier	i
>875	Identifier	files
>876	Callee	cv 
>877	Identifier	cv 
>878	Identifier	imageDist
>879	Identifier	imageDist
>880	IdentifierDeclType	cv 
>881	IncDecOp	 
>882	IncDec	++
>883	Identifier	i
>884	Condition	 
>885	RelationalExpression	i < files . size ( )
>886	CallExpression	files . size ( )
>887	ArgumentList	 
>888	Callee	files . size
>889	MemberAccess	files . size
>890	Identifier	size
>891	Identifier	files
>892	Identifier	i
>893	ForInit	 
>894	IdentifierDeclStatement	unsigned int i = 0 ;
>895	IdentifierDecl	i = 0
>896	AssignmentExpr	i = 0
>897	PrimaryExpression	0
>898	Identifier	i
>899	Identifier	i
>900	IdentifierDeclType	unsigned int
>901	IdentifierDeclStatement	 
>902	IdentifierDecl	r ( hz )
>903	Identifier	hz
>904	Identifier	r
>905	IdentifierDeclType	ros 
>906	IdentifierDeclStatement	 
>907	IdentifierDecl	fakeTimeStamp = 0
>908	AssignmentExpr	fakeTimeStamp = 0
>909	PrimaryExpression	0
>910	Identifier	fakeTimeStamp
>911	Identifier	fakeTimeStamp
>912	IdentifierDeclType	float
>913	IdentifierDeclStatement	 
>914	IdentifierDecl	runningIDX = 0
>915	AssignmentExpr	runningIDX = 0
>916	PrimaryExpression	0
>917	Identifier	runningIDX
>918	Identifier	runningIDX
>919	IdentifierDeclType	int
>920	IdentifierDeclStatement	 
>921	IdentifierDecl	image = cv 
>922	AssignmentExpr	image = cv 
>923	CallExpression	cv 
>924	ArgumentList	h
>925	Argument	CV_8U
>926	Identifier	CV_8U
>927	Argument	w
>928	Identifier	w
>929	Argument	h
>930	Identifier	h
>931	Callee	cv 
>932	Identifier	cv 
>933	Identifier	image
>934	Identifier	image
>935	IdentifierDeclType	cv 
>936	ExpressionStatement	 
>937	CallExpression	ros 
>938	ArgumentList	\"~hz\"
>939	Argument	\"~hz\"
>940	PrimaryExpression	\"~hz\"
>941	Callee	ros 
>942	Identifier	ros 
>943	IfStatement	if ( ! ros 
>944	ExpressionStatement	 
>945	AssignmentExpr	hz = 0
>946	PrimaryExpression	0
>947	Identifier	hz
>948	Condition	 
>949	UnaryOp	! ros 
>950	CallExpression	ros 
>951	ArgumentList	\"~hz\"
>952	Argument	hz
>953	Identifier	hz
>954	Argument	\"~hz\"
>955	PrimaryExpression	\"~hz\"
>956	Callee	ros 
>957	Identifier	ros 
>958	UnaryOperator	!
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	hz = 0
>961	AssignmentExpr	hz = 0
>962	PrimaryExpression	0
>963	Identifier	hz
>964	Identifier	hz
>965	IdentifierDeclType	double
>966	IfStatement	if ( getdir ( source , files ) >= 0 )
>967	ElseStatement	else
>968	IfStatement	if ( getFile ( source , files ) >= 0 )
>969	ElseStatement	else
>970	CompoundStatement	 
>971	ExpressionStatement	 
>972	CallExpression	printf ( \"could not load file list! wrong path / file?\n\" )
>973	ArgumentList	\"could not load file list! wrong path / file?\n\"
>974	Argument	\"could not load file list! wrong path / file?\n\"
>975	PrimaryExpression	\"could not load file list! wrong path / file?\n\"
>976	Callee	printf
>977	Identifier	printf
>978	CompoundStatement	 
>979	ExpressionStatement	 
>980	CallExpression	printf ( \"found %d image files in file %s!\n\" , ( int ) files . size ( ) , source . c_str ( ) )
>981	ArgumentList	\"found %d image files in file %s!\n\"
>982	Argument	source . c_str ( )
>983	CallExpression	source . c_str ( )
>984	ArgumentList	 
>985	Callee	source . c_str
>986	MemberAccess	source . c_str
>987	Identifier	c_str
>988	Identifier	source
>989	Argument	( int ) files . size ( )
>990	CastExpression	( int ) files . size ( )
>991	CallExpression	files . size ( )
>992	ArgumentList	 
>993	Callee	files . size
>994	MemberAccess	files . size
>995	Identifier	size
>996	Identifier	files
>997	CastTarget	int
>998	Argument	\"found %d image files in file %s!\n\"
>999	PrimaryExpression	\"found %d image files in file %s!\n\"
>1000	Callee	printf
>1001	Identifier	printf
>1002	Condition	 
>1003	RelationalExpression	getFile ( source , files ) >= 0
>1004	PrimaryExpression	0
>1005	CallExpression	getFile ( source , files )
>1006	ArgumentList	source
>1007	Argument	files
>1008	Identifier	files
>1009	Argument	source
>1010	Identifier	source
>1011	Callee	getFile
>1012	Identifier	getFile
>1013	CompoundStatement	 
>1014	ExpressionStatement	 
>1015	CallExpression	printf ( \"found %d image files in folder %s!\n\" , ( int ) files . size ( ) , source . c_str ( ) )
>1016	ArgumentList	\"found %d image files in folder %s!\n\"
>1017	Argument	source . c_str ( )
>1018	CallExpression	source . c_str ( )
>1019	ArgumentList	 
>1020	Callee	source . c_str
>1021	MemberAccess	source . c_str
>1022	Identifier	c_str
>1023	Identifier	source
>1024	Argument	( int ) files . size ( )
>1025	CastExpression	( int ) files . size ( )
>1026	CallExpression	files . size ( )
>1027	ArgumentList	 
>1028	Callee	files . size
>1029	MemberAccess	files . size
>1030	Identifier	size
>1031	Identifier	files
>1032	CastTarget	int
>1033	Argument	\"found %d image files in folder %s!\n\"
>1034	PrimaryExpression	\"found %d image files in folder %s!\n\"
>1035	Callee	printf
>1036	Identifier	printf
>1037	Condition	 
>1038	RelationalExpression	getdir ( source , files ) >= 0
>1039	PrimaryExpression	0
>1040	CallExpression	getdir ( source , files )
>1041	ArgumentList	source
>1042	Argument	files
>1043	Identifier	files
>1044	Argument	source
>1045	Identifier	source
>1046	Callee	getdir
>1047	Identifier	getdir
>1048	ExpressionStatement	 
>1049	CallExpression	ros 
>1050	ArgumentList	\"~files\"
>1051	Argument	\"~files\"
>1052	PrimaryExpression	\"~files\"
>1053	Callee	ros 
>1054	Identifier	ros 
>1055	IfStatement	if ( ! ros 
>1056	CompoundStatement	 
>1057	ExpressionStatement	 
>1058	CallExpression	exit ( 0 )
>1059	ArgumentList	0
>1060	Argument	0
>1061	PrimaryExpression	0
>1062	Callee	exit
>1063	Identifier	exit
>1064	ExpressionStatement	 
>1065	CallExpression	printf ( \"need source files! (set using _files
>1066	ArgumentList	\"need source files! (set using _files
>1067	Argument	\"need source files! (set using _files
>1068	PrimaryExpression	\"need source files! (set using _files
>1069	Callee	printf
>1070	Identifier	printf
>1071	Condition	 
>1072	UnaryOp	! ros 
>1073	CallExpression	ros 
>1074	ArgumentList	\"~files\"
>1075	Argument	source
>1076	Identifier	source
>1077	Argument	\"~files\"
>1078	PrimaryExpression	\"~files\"
>1079	Callee	ros 
>1080	Identifier	ros 
>1081	UnaryOperator	!
>1082	IdentifierDeclStatement	 
>1083	IdentifierDecl	files
>1084	Identifier	files
>1085	IdentifierDeclType	std 
>1086	IdentifierDeclStatement	 
>1087	IdentifierDecl	source
>1088	Identifier	source
>1089	IdentifierDeclType	std 
>1090	ExpressionStatement	 
>1091	CallExpression	system -> setVisualization ( outputWrapper )
>1092	ArgumentList	outputWrapper
>1093	Argument	outputWrapper
>1094	Identifier	outputWrapper
>1095	Callee	system -> setVisualization
>1096	PtrMemberAccess	system -> setVisualization
>1097	Identifier	setVisualization
>1098	Identifier	system
>1099	IdentifierDeclStatement	 
>1100	IdentifierDecl	* system = new SlamSystem ( w , h , K , doSlam )
>1101	AssignmentExpr	* system = new SlamSystem ( w , h , K , doSlam )
>1102	Expression	w , h , K , doSlam
>1103	Expression	h , K , doSlam
>1104	Expression	K , doSlam
>1105	Identifier	doSlam
>1106	Identifier	K
>1107	Identifier	h
>1108	Identifier	w
>1109	Identifier	system
>1110	Identifier	system
>1111	IdentifierDeclType	SlamSystem *
>1112	IdentifierDeclStatement	 
>1113	IdentifierDecl	* outputWrapper = new ROSOutput3DWrapper ( w , h )
>1114	AssignmentExpr	* outputWrapper = new ROSOutput3DWrapper ( w , h )
>1115	Expression	w , h
>1116	Identifier	h
>1117	Identifier	w
>1118	Identifier	outputWrapper
>1119	Identifier	outputWrapper
>1120	IdentifierDeclType	Output3DWrapper *
>1121	ExpressionStatement	 
>1122	Expression	K << fx , 0.0 , cx , 0.0 , fy , cy , 0.0 , 0.0 , 1.0
>1123	Expression	0.0 , cx , 0.0 , fy , cy , 0.0 , 0.0 , 1.0
>1124	Expression	cx , 0.0 , fy , cy , 0.0 , 0.0 , 1.0
>1125	Expression	0.0 , fy , cy , 0.0 , 0.0 , 1.0
>1126	Expression	fy , cy , 0.0 , 0.0 , 1.0
>1127	Expression	cy , 0.0 , 0.0 , 1.0
>1128	Expression	0.0 , 0.0 , 1.0
>1129	Expression	0.0 , 1.0
>1130	PrimaryExpression	1.0
>1131	PrimaryExpression	0.0
>1132	PrimaryExpression	0.0
>1133	Identifier	cy
>1134	Identifier	fy
>1135	PrimaryExpression	0.0
>1136	Identifier	cx
>1137	PrimaryExpression	0.0
>1138	ShiftExpression	K << fx
>1139	Identifier	fx
>1140	Identifier	K
>1141	IdentifierDeclStatement	 
>1142	IdentifierDecl	K
>1143	Identifier	K
>1144	IdentifierDeclType	Sophus 
>1145	IdentifierDeclStatement	 
>1146	IdentifierDecl	cy = undistorter -> getK ( ) . at < double > ( 2 , 1 )
>1147	AssignmentExpr	cy = undistorter -> getK ( ) . at < double > ( 2 , 1 )
>1148	RelationalExpression	undistorter -> getK ( ) . at < double > ( 2 , 1 )
>1149	RelationalExpression	double > ( 2 , 1 )
>1150	Expression	2 , 1
>1151	PrimaryExpression	1
>1152	PrimaryExpression	2
>1153	Identifier	double
>1154	MemberAccess	undistorter -> getK ( ) . at
>1155	Identifier	at
>1156	CallExpression	undistorter -> getK ( )
>1157	ArgumentList	 
>1158	Callee	undistorter -> getK
>1159	PtrMemberAccess	undistorter -> getK
>1160	Identifier	getK
>1161	Identifier	undistorter
>1162	Identifier	cy
>1163	Identifier	cy
>1164	IdentifierDeclType	float
>1165	IdentifierDeclStatement	 
>1166	IdentifierDecl	cx = undistorter -> getK ( ) . at < double > ( 2 , 0 )
>1167	AssignmentExpr	cx = undistorter -> getK ( ) . at < double > ( 2 , 0 )
>1168	RelationalExpression	undistorter -> getK ( ) . at < double > ( 2 , 0 )
>1169	RelationalExpression	double > ( 2 , 0 )
>1170	Expression	2 , 0
>1171	PrimaryExpression	0
>1172	PrimaryExpression	2
>1173	Identifier	double
>1174	MemberAccess	undistorter -> getK ( ) . at
>1175	Identifier	at
>1176	CallExpression	undistorter -> getK ( )
>1177	ArgumentList	 
>1178	Callee	undistorter -> getK
>1179	PtrMemberAccess	undistorter -> getK
>1180	Identifier	getK
>1181	Identifier	undistorter
>1182	Identifier	cx
>1183	Identifier	cx
>1184	IdentifierDeclType	float
>1185	IdentifierDeclStatement	 
>1186	IdentifierDecl	fy = undistorter -> getK ( ) . at < double > ( 1 , 1 )
>1187	AssignmentExpr	fy = undistorter -> getK ( ) . at < double > ( 1 , 1 )
>1188	RelationalExpression	undistorter -> getK ( ) . at < double > ( 1 , 1 )
>1189	RelationalExpression	double > ( 1 , 1 )
>1190	Expression	1 , 1
>1191	PrimaryExpression	1
>1192	PrimaryExpression	1
>1193	Identifier	double
>1194	MemberAccess	undistorter -> getK ( ) . at
>1195	Identifier	at
>1196	CallExpression	undistorter -> getK ( )
>1197	ArgumentList	 
>1198	Callee	undistorter -> getK
>1199	PtrMemberAccess	undistorter -> getK
>1200	Identifier	getK
>1201	Identifier	undistorter
>1202	Identifier	fy
>1203	Identifier	fy
>1204	IdentifierDeclType	float
>1205	IdentifierDeclStatement	 
>1206	IdentifierDecl	fx = undistorter -> getK ( ) . at < double > ( 0 , 0 )
>1207	AssignmentExpr	fx = undistorter -> getK ( ) . at < double > ( 0 , 0 )
>1208	RelationalExpression	undistorter -> getK ( ) . at < double > ( 0 , 0 )
>1209	RelationalExpression	double > ( 0 , 0 )
>1210	Expression	0 , 0
>1211	PrimaryExpression	0
>1212	PrimaryExpression	0
>1213	Identifier	double
>1214	MemberAccess	undistorter -> getK ( ) . at
>1215	Identifier	at
>1216	CallExpression	undistorter -> getK ( )
>1217	ArgumentList	 
>1218	Callee	undistorter -> getK
>1219	PtrMemberAccess	undistorter -> getK
>1220	Identifier	getK
>1221	Identifier	undistorter
>1222	Identifier	fx
>1223	Identifier	fx
>1224	IdentifierDeclType	float
>1225	IdentifierDeclStatement	 
>1226	IdentifierDecl	h_inp = undistorter -> getInputHeight ( )
>1227	AssignmentExpr	h_inp = undistorter -> getInputHeight ( )
>1228	CallExpression	undistorter -> getInputHeight ( )
>1229	ArgumentList	 
>1230	Callee	undistorter -> getInputHeight
>1231	PtrMemberAccess	undistorter -> getInputHeight
>1232	Identifier	getInputHeight
>1233	Identifier	undistorter
>1234	Identifier	h_inp
>1235	Identifier	h_inp
>1236	IdentifierDeclType	int
>1237	IdentifierDeclStatement	 
>1238	IdentifierDecl	w_inp = undistorter -> getInputWidth ( )
>1239	AssignmentExpr	w_inp = undistorter -> getInputWidth ( )
>1240	CallExpression	undistorter -> getInputWidth ( )
>1241	ArgumentList	 
>1242	Callee	undistorter -> getInputWidth
>1243	PtrMemberAccess	undistorter -> getInputWidth
>1244	Identifier	getInputWidth
>1245	Identifier	undistorter
>1246	Identifier	w_inp
>1247	Identifier	w_inp
>1248	IdentifierDeclType	int
>1249	IdentifierDeclStatement	 
>1250	IdentifierDecl	h = undistorter -> getOutputHeight ( )
>1251	AssignmentExpr	h = undistorter -> getOutputHeight ( )
>1252	CallExpression	undistorter -> getOutputHeight ( )
>1253	ArgumentList	 
>1254	Callee	undistorter -> getOutputHeight
>1255	PtrMemberAccess	undistorter -> getOutputHeight
>1256	Identifier	getOutputHeight
>1257	Identifier	undistorter
>1258	Identifier	h
>1259	Identifier	h
>1260	IdentifierDeclType	int
>1261	IdentifierDeclStatement	 
>1262	IdentifierDecl	w = undistorter -> getOutputWidth ( )
>1263	AssignmentExpr	w = undistorter -> getOutputWidth ( )
>1264	CallExpression	undistorter -> getOutputWidth ( )
>1265	ArgumentList	 
>1266	Callee	undistorter -> getOutputWidth
>1267	PtrMemberAccess	undistorter -> getOutputWidth
>1268	Identifier	getOutputWidth
>1269	Identifier	undistorter
>1270	Identifier	w
>1271	Identifier	w
>1272	IdentifierDeclType	int
>1273	IfStatement	if ( undistorter == 0 )
>1274	CompoundStatement	 
>1275	ExpressionStatement	 
>1276	CallExpression	exit ( 0 )
>1277	ArgumentList	0
>1278	Argument	0
>1279	PrimaryExpression	0
>1280	Callee	exit
>1281	Identifier	exit
>1282	ExpressionStatement	 
>1283	CallExpression	printf ( \"need camera calibration file! (set using _calib
>1284	ArgumentList	\"need camera calibration file! (set using _calib
>1285	Argument	\"need camera calibration file! (set using _calib
>1286	PrimaryExpression	\"need camera calibration file! (set using _calib
>1287	Callee	printf
>1288	Identifier	printf
>1289	Condition	 
>1290	EqualityExpression	undistorter == 0
>1291	PrimaryExpression	0
>1292	Identifier	undistorter
>1293	IfStatement	if ( ros 
>1294	CompoundStatement	 
>1295	ExpressionStatement	 
>1296	CallExpression	ros 
>1297	ArgumentList	\"~calib\"
>1298	Argument	\"~calib\"
>1299	PrimaryExpression	\"~calib\"
>1300	Callee	ros 
>1301	Identifier	ros 
>1302	ExpressionStatement	 
>1303	AssignmentExpr	undistorter = Undistorter 
>1304	CallExpression	Undistorter 
>1305	ArgumentList	calibFile . c_str ( )
>1306	Argument	calibFile . c_str ( )
>1307	CallExpression	calibFile . c_str ( )
>1308	ArgumentList	 
>1309	Callee	calibFile . c_str
>1310	MemberAccess	calibFile . c_str
>1311	Identifier	c_str
>1312	Identifier	calibFile
>1313	Callee	Undistorter 
>1314	Identifier	Undistorter 
>1315	Identifier	undistorter
>1316	Condition	 
>1317	CallExpression	ros 
>1318	ArgumentList	\"~calib\"
>1319	Argument	calibFile
>1320	Identifier	calibFile
>1321	Argument	\"~calib\"
>1322	PrimaryExpression	\"~calib\"
>1323	Callee	ros 
>1324	Identifier	ros 
>1325	IdentifierDeclStatement	 
>1326	IdentifierDecl	* undistorter = 0
>1327	AssignmentExpr	* undistorter = 0
>1328	PrimaryExpression	0
>1329	Identifier	undistorter
>1330	Identifier	undistorter
>1331	IdentifierDeclType	Undistorter *
>1332	IdentifierDeclStatement	 
>1333	IdentifierDecl	calibFile
>1334	Identifier	calibFile
>1335	IdentifierDeclType	std 
>1336	ExpressionStatement	 
>1337	AssignmentExpr	packagePath = ros 
>1338	AdditiveExpression	ros 
>1339	PrimaryExpression	\"/\"
>1340	CallExpression	ros 
>1341	ArgumentList	\"lsd_slam_core\"
>1342	Argument	\"lsd_slam_core\"
>1343	PrimaryExpression	\"lsd_slam_core\"
>1344	Callee	ros 
>1345	Identifier	ros 
>1346	Identifier	packagePath
>1347	ExpressionStatement	 
>1348	CallExpression	srvDebug . setCallback ( dynConfCbDebug )
>1349	ArgumentList	dynConfCbDebug
>1350	Argument	dynConfCbDebug
>1351	Identifier	dynConfCbDebug
>1352	Callee	srvDebug . setCallback
>1353	MemberAccess	srvDebug . setCallback
>1354	Identifier	setCallback
>1355	Identifier	srvDebug
>1356	IdentifierDeclStatement	 
>1357	IdentifierDecl	srvDebug ( ros 
>1358	CallExpression	ros 
>1359	ArgumentList	\"~Debug\"
>1360	Argument	\"~Debug\"
>1361	PrimaryExpression	\"~Debug\"
>1362	Callee	ros 
>1363	Identifier	ros 
>1364	Identifier	srvDebug
>1365	IdentifierDeclType	dynamic_reconfigure 
>1366	ExpressionStatement	 
>1367	CallExpression	srv . setCallback ( dynConfCb )
>1368	ArgumentList	dynConfCb
>1369	Argument	dynConfCb
>1370	Identifier	dynConfCb
>1371	Callee	srv . setCallback
>1372	MemberAccess	srv . setCallback
>1373	Identifier	setCallback
>1374	Identifier	srv
>1375	IdentifierDeclStatement	 
>1376	IdentifierDecl	srv ( ros 
>1377	CallExpression	ros 
>1378	ArgumentList	\"~\"
>1379	Argument	\"~\"
>1380	PrimaryExpression	\"~\"
>1381	Callee	ros 
>1382	Identifier	ros 
>1383	Identifier	srv
>1384	IdentifierDeclType	dynamic_reconfigure 
>1385	ExpressionStatement	 
>1386	CallExpression	ros 
>1387	ArgumentList	argc
>1388	Argument	\"LSD_SLAM\"
>1389	PrimaryExpression	\"LSD_SLAM\"
>1390	Argument	argv
>1391	Identifier	argv
>1392	Argument	argc
>1393	Identifier	argc
>1394	Callee	ros 
>1395	Identifier	ros 
<3=9,8,4
<4=5
<5=7,6
<9=12,10
<10=11
<12=13
<13=54,14
<14=47,15
<15=16
<16=45,17
<17=38,31,18
<18=19
<19=29,20
<20=25,21
<21=22
<22=24,23
<25=26
<26=28,27
<29=30
<31=32
<32=34,33
<34=35
<35=37,36
<38=39
<39=41,40
<41=42
<42=44,43
<45=46
<47=48
<48=50,49
<50=51
<51=53,52
<54=55
<55=57,56
<69=75,74,70
<70=71
<71=73,72
<75=78,76
<76=77
<78=79
<79=125,80
<80=88,81
<81=82
<82=84,83
<84=85
<85=87,86
<88=89
<89=91,90
<91=92
<92=94,93
<94=123,95
<95=116,109,96
<96=97
<97=107,98
<98=103,99
<99=100
<100=102,101
<103=104
<104=106,105
<107=108
<109=110
<110=112,111
<112=113
<113=115,114
<116=117
<117=119,118
<119=120
<120=122,121
<123=124
<125=126
<126=128,127
<142=148,147,143
<143=144
<144=146,145
<148=149
<149=150
<150=159,151
<151=152
<152=153
<153=157,154
<154=155
<155=156
<157=158
<159=160
<167=176,175,168
<168=172,169
<169=171,170
<172=174,173
<176=352,348,326,281,274,255,230,184,177
<177=178
<178=180,179
<180=181
<181=183,182
<184=222,213,210,185
<185=186
<186=197,187
<187=188
<188=194,189
<189=193,190
<190=192,191
<194=196,195
<197=198
<198=200,199
<200=204,201
<201=202
<202=203
<204=205
<205=207,206
<207=209,208
<210=212,211
<213=214
<214=221,215
<215=217,216
<217=218
<218=220,219
<222=223
<223=224
<224=229,228,225
<225=227,226
<230=237,231
<231=232
<232=236,233
<233=235,234
<237=238
<238=240,239
<240=251,241
<241=242
<242=243
<243=245,244
<245=247,246
<247=248
<248=250,249
<251=252
<252=254,253
<255=256
<256=272,257
<257=265,258
<258=259
<259=261,260
<261=262
<262=264,263
<265=266
<266=268,267
<268=269
<269=271,270
<272=273
<274=275
<275=279,276
<276=277
<277=278
<279=280
<281=315,282
<282=301,283
<283=293,284
<284=285
<285=289,286
<286=287
<287=288
<289=290
<290=292,291
<293=294
<294=298,295
<295=297,296
<298=300,299
<301=302
<302=314,313,303
<303=312,304
<304=310,305
<305=306
<306=307
<307=309,308
<310=311
<315=316
<316=318,317
<318=325,319
<319=323,320
<320=321
<321=322
<323=324
<326=332,327
<327=328
<328=329
<329=331,330
<332=333
<333=335,334
<335=347,336
<336=345,337
<337=338
<338=339
<339=341,340
<341=342
<342=344,343
<345=346
<348=349
<349=351,350
<352=353
<353=355,354
<380=389,388,381
<381=385,382
<382=384,383
<385=387,386
<389=578,390
<390=564,404,391
<391=392
<392=397,393
<393=394
<394=396,395
<397=398
<398=400,399
<400=401
<401=403,402
<404=510,503,489,485,462,414,405
<405=406
<406=413,407
<407=409,408
<409=410
<410=412,411
<414=454,445,442,415
<415=416
<416=429,417
<417=418
<418=426,419
<419=425,420
<420=424,421
<421=423,422
<426=428,427
<429=430
<430=432,431
<432=436,433
<433=434
<434=435
<436=437
<437=439,438
<439=441,440
<442=444,443
<445=446
<446=453,447
<447=449,448
<449=450
<450=452,451
<454=455
<455=456
<456=461,460,457
<457=459,458
<462=481,477,463
<463=464
<464=465
<465=476,466
<466=472,467
<467=470,468
<468=469
<470=471
<472=473
<473=475,474
<477=478
<478=480,479
<481=482
<482=484,483
<485=486
<486=488,487
<489=490
<490=502,501,491
<491=500,492
<492=496,493
<493=494
<494=495
<496=497
<497=499,498
<503=504
<504=506,505
<506=507
<507=509,508
<510=555,511
<511=551,542,533,521,512
<512=513
<513=517,514
<514=515
<515=516
<517=518
<518=520,519
<521=523,522
<523=524
<524=530,525
<525=527,526
<527=529,528
<530=532,531
<533=534
<534=541,535
<535=539,536
<536=537
<537=538
<539=540
<542=543
<543=549,544
<544=547,545
<545=546
<547=548
<549=550
<551=552
<552=554,553
<555=556
<556=563,557
<557=559,558
<559=560
<560=562,561
<564=565
<565=572,566
<566=568,567
<568=569
<569=571,570
<572=574,573
<574=575
<575=577,576
<578=579
<579=587,586,580
<580=582,581
<582=583
<583=585,584
<610=619,618,611
<611=615,612
<612=614,613
<615=617,616
<619=1385,1375,1366,1356,1347,1336,1332,1325,1293,1273,1261,1249,1237,1225,1205,1185,1165,1145,1141,1121,1112,1099,1090,1086,1082,1055,1048,966,959,943,936,920,913,906,901,638,631,630,628,627,625,624,622,620
<620=621
<622=623
<625=626
<628=629
<631=632
<632=634,633
<634=635
<635=637,636
<638=893,884,881,639
<639=865,794,780,769,755,715,711,707,695,654,649,640
<640=642,641
<642=643
<643=648,644
<644=646,645
<646=647
<649=650
<650=652,651
<652=653
<654=693,655
<655=686,685,683,673,664,660,656
<656=657
<657=659,658
<660=661
<661=663,662
<664=665
<665=669,666
<666=667
<667=668
<669=670
<670=672,671
<673=674
<674=682,675
<675=681,676
<676=680,677
<677=679,678
<683=684
<686=687
<687=691,688
<688=689
<689=690
<691=692
<693=694
<695=703,696
<696=697
<697=699,698
<699=700
<700=702,701
<703=704
<704=706,705
<707=708
<708=710,709
<711=712
<712=714,713
<715=751,736,716
<716=717
<717=718
<718=732,719
<719=728,726,722,720
<720=721
<722=723
<723=725,724
<726=727
<728=729
<729=731,730
<732=733
<733=735,734
<736=737
<737=747,738
<738=743,741,739
<739=740
<741=742
<743=744
<744=746,745
<747=748
<748=750,749
<751=752
<752=754,753
<755=756
<756=767,757
<757=758
<758=759
<759=761,760
<761=763,762
<763=764
<764=766,765
<767=768
<769=770
<770=776,771
<771=774,772
<772=773
<774=775
<776=777
<777=779,778
<780=781
<781=792,782
<782=783
<783=784
<784=786,785
<786=788,787
<788=789
<789=791,790
<792=793
<794=853,795
<795=797,796
<797=843,827,798
<798=799
<799=800
<800=825,801
<801=823,814,812,810,806,802
<802=803
<803=805,804
<806=807
<807=809,808
<810=811
<812=813
<814=815
<815=817,816
<817=818
<818=820,819
<820=822,821
<823=824
<825=826
<827=828
<828=841,829
<829=839,830
<830=831
<831=833,832
<833=834
<834=836,835
<836=838,837
<839=840
<841=842
<843=844
<844=846,845
<846=850,847
<847=849,848
<850=852,851
<853=854
<854=860,855
<855=857,856
<857=859,858
<860=862,861
<862=864,863
<865=866
<866=880,879,867
<867=878,868
<868=876,869
<869=872,870
<870=871
<872=873
<873=875,874
<876=877
<881=883,882
<884=885
<885=892,886
<886=888,887
<888=889
<889=891,890
<893=894
<894=895
<895=900,899,896
<896=898,897
<901=902
<902=905,904,903
<906=907
<907=912,911,908
<908=910,909
<913=914
<914=919,918,915
<915=917,916
<920=921
<921=935,934,922
<922=933,923
<923=931,924
<924=929,927,925
<925=926
<927=928
<929=930
<931=932
<936=937
<937=941,938
<938=939
<939=940
<941=942
<943=948,944
<944=945
<945=947,946
<948=949
<949=958,950
<950=956,951
<951=954,952
<952=953
<954=955
<956=957
<959=960
<960=965,964,961
<961=963,962
<966=1037,1013,967
<967=968
<968=1002,978,969
<969=970
<970=971
<971=972
<972=976,973
<973=974
<974=975
<976=977
<978=979
<979=980
<980=1000,981
<981=998,989,982
<982=983
<983=985,984
<985=986
<986=988,987
<989=990
<990=997,991
<991=993,992
<993=994
<994=996,995
<998=999
<1000=1001
<1002=1003
<1003=1005,1004
<1005=1011,1006
<1006=1009,1007
<1007=1008
<1009=1010
<1011=1012
<1013=1014
<1014=1015
<1015=1035,1016
<1016=1033,1024,1017
<1017=1018
<1018=1020,1019
<1020=1021
<1021=1023,1022
<1024=1025
<1025=1032,1026
<1026=1028,1027
<1028=1029
<1029=1031,1030
<1033=1034
<1035=1036
<1037=1038
<1038=1040,1039
<1040=1046,1041
<1041=1044,1042
<1042=1043
<1044=1045
<1046=1047
<1048=1049
<1049=1053,1050
<1050=1051
<1051=1052
<1053=1054
<1055=1071,1056
<1056=1064,1057
<1057=1058
<1058=1062,1059
<1059=1060
<1060=1061
<1062=1063
<1064=1065
<1065=1069,1066
<1066=1067
<1067=1068
<1069=1070
<1071=1072
<1072=1081,1073
<1073=1079,1074
<1074=1077,1075
<1075=1076
<1077=1078
<1079=1080
<1082=1083
<1083=1085,1084
<1086=1087
<1087=1089,1088
<1090=1091
<1091=1095,1092
<1092=1093
<1093=1094
<1095=1096
<1096=1098,1097
<1099=1100
<1100=1111,1110,1101
<1101=1109,1102
<1102=1108,1103
<1103=1107,1104
<1104=1106,1105
<1112=1113
<1113=1120,1119,1114
<1114=1118,1115
<1115=1117,1116
<1121=1122
<1122=1138,1123
<1123=1137,1124
<1124=1136,1125
<1125=1135,1126
<1126=1134,1127
<1127=1133,1128
<1128=1132,1129
<1129=1131,1130
<1138=1140,1139
<1141=1142
<1142=1144,1143
<1145=1146
<1146=1164,1163,1147
<1147=1162,1148
<1148=1154,1149
<1149=1153,1150
<1150=1152,1151
<1154=1156,1155
<1156=1158,1157
<1158=1159
<1159=1161,1160
<1165=1166
<1166=1184,1183,1167
<1167=1182,1168
<1168=1174,1169
<1169=1173,1170
<1170=1172,1171
<1174=1176,1175
<1176=1178,1177
<1178=1179
<1179=1181,1180
<1185=1186
<1186=1204,1203,1187
<1187=1202,1188
<1188=1194,1189
<1189=1193,1190
<1190=1192,1191
<1194=1196,1195
<1196=1198,1197
<1198=1199
<1199=1201,1200
<1205=1206
<1206=1224,1223,1207
<1207=1222,1208
<1208=1214,1209
<1209=1213,1210
<1210=1212,1211
<1214=1216,1215
<1216=1218,1217
<1218=1219
<1219=1221,1220
<1225=1226
<1226=1236,1235,1227
<1227=1234,1228
<1228=1230,1229
<1230=1231
<1231=1233,1232
<1237=1238
<1238=1248,1247,1239
<1239=1246,1240
<1240=1242,1241
<1242=1243
<1243=1245,1244
<1249=1250
<1250=1260,1259,1251
<1251=1258,1252
<1252=1254,1253
<1254=1255
<1255=1257,1256
<1261=1262
<1262=1272,1271,1263
<1263=1270,1264
<1264=1266,1265
<1266=1267
<1267=1269,1268
<1273=1289,1274
<1274=1282,1275
<1275=1276
<1276=1280,1277
<1277=1278
<1278=1279
<1280=1281
<1282=1283
<1283=1287,1284
<1284=1285
<1285=1286
<1287=1288
<1289=1290
<1290=1292,1291
<1293=1316,1294
<1294=1302,1295
<1295=1296
<1296=1300,1297
<1297=1298
<1298=1299
<1300=1301
<1302=1303
<1303=1315,1304
<1304=1313,1305
<1305=1306
<1306=1307
<1307=1309,1308
<1309=1310
<1310=1312,1311
<1313=1314
<1316=1317
<1317=1323,1318
<1318=1321,1319
<1319=1320
<1321=1322
<1323=1324
<1325=1326
<1326=1331,1330,1327
<1327=1329,1328
<1332=1333
<1333=1335,1334
<1336=1337
<1337=1346,1338
<1338=1340,1339
<1340=1344,1341
<1341=1342
<1342=1343
<1344=1345
<1347=1348
<1348=1352,1349
<1349=1350
<1350=1351
<1352=1353
<1353=1355,1354
<1356=1357
<1357=1365,1364,1358
<1358=1362,1359
<1359=1360
<1360=1361
<1362=1363
<1366=1367
<1367=1371,1368
<1368=1369
<1369=1370
<1371=1372
<1372=1374,1373
<1375=1376
<1376=1384,1383,1377
<1377=1381,1378
<1378=1379
<1379=1380
<1381=1382
<1385=1386
<1386=1394,1387
<1387=1392,1390,1388
<1388=1389
<1390=1391
<1392=1393
<1394=1395
