>5	FunctionDef	SparsePoolerInputMasks 
>6	ParameterList	 
>7	CompoundStatement	 
>11	FunctionDef	SparsePoolerInputMasks 
>12	ParameterList	size_type ss , const std 
>13	Parameter	 
>14	Identifier	masks
>15	ParameterType	const std 
>16	Parameter	 
>17	Identifier	ss
>18	ParameterType	size_type
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	CallExpression	compute_cache_ ( )
>22	ArgumentList	 
>23	Callee	compute_cache_
>24	Identifier	compute_cache_
>30	FunctionDef	SparsePoolerInputMasks 
>31	ParameterList	std 
>32	Parameter	 
>33	Identifier	inStream
>34	ParameterType	std 
>35	CompoundStatement	 
>36	ExpressionStatement	 
>37	CallExpression	readState ( inStream )
>38	ArgumentList	inStream
>39	Argument	inStream
>40	Identifier	inStream
>41	Callee	readState
>42	Identifier	readState
>47	FunctionDef	operator = (const SparsePoolerInputMasks & other)
>48	ParameterList	const SparsePoolerInputMasks & other
>49	Parameter	 
>50	Identifier	other
>51	ParameterType	const SparsePoolerInputMasks &
>52	CompoundStatement	 
>53	ReturnStatement	 
>54	UnaryOp	* this
>55	Identifier	this
>56	UnaryOperator	*
>57	IfStatement	if ( & other != this )
>58	CompoundStatement	 
>59	ExpressionStatement	 
>60	AssignmentExpr	masks_ = other . masks_
>61	MemberAccess	other . masks_
>62	Identifier	masks_
>63	Identifier	other
>64	Identifier	masks_
>65	ExpressionStatement	 
>66	AssignmentExpr	sizes_ = other . sizes_
>67	MemberAccess	other . sizes_
>68	Identifier	sizes_
>69	Identifier	other
>70	Identifier	sizes_
>71	ExpressionStatement	 
>72	AssignmentExpr	max_size_ = other . max_size_
>73	MemberAccess	other . max_size_
>74	Identifier	max_size_
>75	Identifier	other
>76	Identifier	max_size_
>77	ExpressionStatement	 
>78	AssignmentExpr	min_size_ = other . min_size_
>79	MemberAccess	other . min_size_
>80	Identifier	min_size_
>81	Identifier	other
>82	Identifier	min_size_
>83	ExpressionStatement	 
>84	AssignmentExpr	segment_size_ = other . segment_size_
>85	MemberAccess	other . segment_size_
>86	Identifier	segment_size_
>87	Identifier	other
>88	Identifier	segment_size_
>89	Condition	 
>90	EqualityExpression	& other != this
>91	Identifier	this
>92	UnaryOp	& other
>93	Identifier	other
>94	UnaryOperator	&
>112	FunctionDef	SparsePoolerInputMasks 
>113	ParameterList	std 
>114	Parameter	 
>115	Identifier	outStream
>116	ParameterType	std 
>117	ReturnType	void
>118	CompoundStatement	 
>119	ExpressionStatement	 
>120	ShiftExpression	outStream << segmentSize ( ) << \" \" << masks_ << \" \"
>121	ShiftExpression	segmentSize ( ) << \" \" << masks_ << \" \"
>122	ShiftExpression	\" \" << masks_ << \" \"
>123	ShiftExpression	masks_ << \" \"
>124	PrimaryExpression	\" \"
>125	Identifier	masks_
>126	PrimaryExpression	\" \"
>127	CallExpression	segmentSize ( )
>128	ArgumentList	 
>129	Callee	segmentSize
>130	Identifier	segmentSize
>131	Identifier	outStream
>136	FunctionDef	SparsePoolerInputMasks 
>137	ParameterList	std 
>138	Parameter	 
>139	Identifier	inStream
>140	ParameterType	std 
>141	ReturnType	void
>142	CompoundStatement	 
>143	ExpressionStatement	 
>144	CallExpression	compute_cache_ ( )
>145	ArgumentList	 
>146	Callee	compute_cache_
>147	Identifier	compute_cache_
>148	ExpressionStatement	 
>149	ShiftExpression	inStream >> segment_size_ >> general_vector >> masks_
>150	ShiftExpression	segment_size_ >> general_vector >> masks_
>151	ShiftExpression	general_vector >> masks_
>152	Identifier	masks_
>153	Identifier	general_vector
>154	Identifier	segment_size_
>155	Identifier	inStream
>160	FunctionDef	SparsePoolerInputMasks 
>161	ParameterList	 
>162	ReturnType	void
>163	CompoundStatement	 
>164	ForStatement	for ( size_type i = 0 ; i != masks_ . size ( ) ; ++ i )
>165	CompoundStatement	 
>166	IfStatement	if ( a_size > max_size_ )
>167	ExpressionStatement	 
>168	AssignmentExpr	max_size_ = a_size
>169	Identifier	a_size
>170	Identifier	max_size_
>171	Condition	 
>172	RelationalExpression	a_size > max_size_
>173	Identifier	max_size_
>174	Identifier	a_size
>175	IfStatement	if ( a_size < min_size_ )
>176	ExpressionStatement	 
>177	AssignmentExpr	min_size_ = a_size
>178	Identifier	a_size
>179	Identifier	min_size_
>180	Condition	 
>181	RelationalExpression	a_size < min_size_
>182	Identifier	min_size_
>183	Identifier	a_size
>184	ExpressionStatement	 
>185	AssignmentExpr	sizes_ [ i ] = a_size
>186	Identifier	a_size
>187	ArrayIndexing	sizes_ [ i ]
>188	Identifier	i
>189	Identifier	sizes_
>190	ForStatement	for ( size_type j = 0 ; j != masks_ [ i ] . size ( ) ; ++ j )
>191	ExpressionStatement	 
>192	AssignmentExpr	a_size += masks_ [ i ] [ j ] . second
>193	MemberAccess	masks_ [ i ] [ j ] . second
>194	Identifier	second
>195	ArrayIndexing	masks_ [ i ] [ j ]
>196	Identifier	j
>197	ArrayIndexing	masks_ [ i ]
>198	Identifier	i
>199	Identifier	masks_
>200	Identifier	a_size
>201	UnaryExpression	 
>202	Identifier	j
>203	IncDec	++
>204	Condition	 
>205	EqualityExpression	j != masks_ [ i ] . size ( )
>206	CallExpression	masks_ [ i ] . size ( )
>207	ArgumentList	 
>208	Callee	masks_ [ i ] . size
>209	MemberAccess	masks_ [ i ] . size
>210	Identifier	size
>211	ArrayIndexing	masks_ [ i ]
>212	Identifier	i
>213	Identifier	masks_
>214	Identifier	j
>215	ForInit	 
>216	IdentifierDeclStatement	size_type j = 0 ;
>217	IdentifierDecl	j = 0
>218	AssignmentExpr	j = 0
>219	PrimaryExpression	0
>220	Identifier	j
>221	Identifier	j
>222	IdentifierDeclType	size_type
>223	IdentifierDeclStatement	 
>224	IdentifierDecl	a_size = 0
>225	AssignmentExpr	a_size = 0
>226	PrimaryExpression	0
>227	Identifier	a_size
>228	Identifier	a_size
>229	IdentifierDeclType	size_type
>230	UnaryExpression	 
>231	Identifier	i
>232	IncDec	++
>233	Condition	 
>234	EqualityExpression	i != masks_ . size ( )
>235	CallExpression	masks_ . size ( )
>236	ArgumentList	 
>237	Callee	masks_ . size
>238	MemberAccess	masks_ . size
>239	Identifier	size
>240	Identifier	masks_
>241	Identifier	i
>242	ForInit	 
>243	IdentifierDeclStatement	size_type i = 0 ;
>244	IdentifierDecl	i = 0
>245	AssignmentExpr	i = 0
>246	PrimaryExpression	0
>247	Identifier	i
>248	Identifier	i
>249	IdentifierDeclType	size_type
>250	ExpressionStatement	 
>251	CallExpression	sizes_ . resize ( masks_ . size ( ) , 0 )
>252	ArgumentList	masks_ . size ( )
>253	Argument	0
>254	PrimaryExpression	0
>255	Argument	masks_ . size ( )
>256	CallExpression	masks_ . size ( )
>257	ArgumentList	 
>258	Callee	masks_ . size
>259	MemberAccess	masks_ . size
>260	Identifier	size
>261	Identifier	masks_
>262	Callee	sizes_ . resize
>263	MemberAccess	sizes_ . resize
>264	Identifier	resize
>265	Identifier	sizes_
>266	ExpressionStatement	 
>267	AssignmentExpr	max_size_ = 0
>268	PrimaryExpression	0
>269	Identifier	max_size_
>270	ExpressionStatement	 
>271	CallExpression	max ( )
>272	ArgumentList	 
>273	Callee	max
>274	Identifier	max
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	CompoundStatement	 
>285	ForStatement	for ( size_type i = 0 ; i != masks_ . size ( ) ; ++ i )
>286	CompoundStatement	 
>287	ForStatement	for ( size_type j = 0 ; j != masks_ [ i ] . size ( ) ; ++ j )
>288	ExpressionStatement	 
>289	ShiftExpression	NTA_CHECK ( masks_ [ i ] [ j ] . second > 0 ) << \"SparsePoolerInputMasks
>290	PrimaryExpression	\"SparsePoolerInputMasks
>291	CallExpression	NTA_CHECK ( masks_ [ i ] [ j ] . second > 0 )
>292	ArgumentList	masks_ [ i ] [ j ] . second > 0
>293	Argument	masks_ [ i ] [ j ] . second > 0
>294	RelationalExpression	masks_ [ i ] [ j ] . second > 0
>295	PrimaryExpression	0
>296	MemberAccess	masks_ [ i ] [ j ] . second
>297	Identifier	second
>298	ArrayIndexing	masks_ [ i ] [ j ]
>299	Identifier	j
>300	ArrayIndexing	masks_ [ i ]
>301	Identifier	i
>302	Identifier	masks_
>303	Callee	NTA_CHECK
>304	Identifier	NTA_CHECK
>305	UnaryExpression	 
>306	Identifier	j
>307	IncDec	++
>308	Condition	 
>309	EqualityExpression	j != masks_ [ i ] . size ( )
>310	CallExpression	masks_ [ i ] . size ( )
>311	ArgumentList	 
>312	Callee	masks_ [ i ] . size
>313	MemberAccess	masks_ [ i ] . size
>314	Identifier	size
>315	ArrayIndexing	masks_ [ i ]
>316	Identifier	i
>317	Identifier	masks_
>318	Identifier	j
>319	ForInit	 
>320	IdentifierDeclStatement	size_type j = 0 ;
>321	IdentifierDecl	j = 0
>322	AssignmentExpr	j = 0
>323	PrimaryExpression	0
>324	Identifier	j
>325	Identifier	j
>326	IdentifierDeclType	size_type
>327	ExpressionStatement	 
>328	ShiftExpression	NTA_CHECK ( masks_ [ i ] . size ( ) > 0 ) << \"SparsePoolerInputMasks
>329	PrimaryExpression	\"SparsePoolerInputMasks
>330	CallExpression	NTA_CHECK ( masks_ [ i ] . size ( ) > 0 )
>331	ArgumentList	masks_ [ i ] . size ( ) > 0
>332	Argument	masks_ [ i ] . size ( ) > 0
>333	RelationalExpression	masks_ [ i ] . size ( ) > 0
>334	PrimaryExpression	0
>335	CallExpression	masks_ [ i ] . size ( )
>336	ArgumentList	 
>337	Callee	masks_ [ i ] . size
>338	MemberAccess	masks_ [ i ] . size
>339	Identifier	size
>340	ArrayIndexing	masks_ [ i ]
>341	Identifier	i
>342	Identifier	masks_
>343	Callee	NTA_CHECK
>344	Identifier	NTA_CHECK
>345	UnaryExpression	 
>346	Identifier	i
>347	IncDec	++
>348	Condition	 
>349	EqualityExpression	i != masks_ . size ( )
>350	CallExpression	masks_ . size ( )
>351	ArgumentList	 
>352	Callee	masks_ . size
>353	MemberAccess	masks_ . size
>354	Identifier	size
>355	Identifier	masks_
>356	Identifier	i
>357	ForInit	 
>358	IdentifierDeclStatement	size_type i = 0 ;
>359	IdentifierDecl	i = 0
>360	AssignmentExpr	i = 0
>361	PrimaryExpression	0
>362	Identifier	i
>363	Identifier	i
>364	IdentifierDeclType	size_type
>365	ExpressionStatement	 
>366	ShiftExpression	NTA_CHECK ( masks_ . size ( ) > 0 ) << \"SparsePoolerInputMasks
>367	PrimaryExpression	\"SparsePoolerInputMasks
>368	CallExpression	NTA_CHECK ( masks_ . size ( ) > 0 )
>369	ArgumentList	masks_ . size ( ) > 0
>370	Argument	masks_ . size ( ) > 0
>371	RelationalExpression	masks_ . size ( ) > 0
>372	PrimaryExpression	0
>373	CallExpression	masks_ . size ( )
>374	ArgumentList	 
>375	Callee	masks_ . size
>376	MemberAccess	masks_ . size
>377	Identifier	size
>378	Identifier	masks_
>379	Callee	NTA_CHECK
>380	Identifier	NTA_CHECK
>381	ExpressionStatement	 
>382	ShiftExpression	NTA_CHECK ( segment_size_ > 0 ) << \"SparsePoolerInputMasks
>383	ShiftExpression	\"SparsePoolerInputMasks
>384	ShiftExpression	segment_size_ << \" - Should be > 0\"
>385	PrimaryExpression	\" - Should be > 0\"
>386	Identifier	segment_size_
>387	PrimaryExpression	\"SparsePoolerInputMasks
>388	CallExpression	NTA_CHECK ( segment_size_ > 0 )
>389	ArgumentList	segment_size_ > 0
>390	Argument	segment_size_ > 0
>391	RelationalExpression	segment_size_ > 0
>392	PrimaryExpression	0
>393	Identifier	segment_size_
>394	Callee	NTA_CHECK
>395	Identifier	NTA_CHECK
>416	FunctionDef	operator << (std 
>417	ParameterList	std 
>418	Parameter	 
>419	Identifier	masks
>420	ParameterType	const SparsePoolerInputMasks &
>421	Parameter	 
>422	Identifier	outStream
>423	ParameterType	std 
>424	ReturnType	std 
>425	CompoundStatement	 
>426	ReturnStatement	 
>427	Identifier	outStream
>428	ExpressionStatement	 
>429	CallExpression	masks . saveState ( outStream )
>430	ArgumentList	outStream
>431	Argument	outStream
>432	Identifier	outStream
>433	Callee	masks . saveState
>434	MemberAccess	masks . saveState
>435	Identifier	saveState
>436	Identifier	masks
>442	FunctionDef	operator >> (std 
>443	ParameterList	std 
>444	Parameter	 
>445	Identifier	masks
>446	ParameterType	SparsePoolerInputMasks &
>447	Parameter	 
>448	Identifier	inStream
>449	ParameterType	std 
>450	ReturnType	std 
>451	CompoundStatement	 
>452	ReturnStatement	 
>453	Identifier	inStream
>454	ExpressionStatement	 
>455	CallExpression	masks . readState ( inStream )
>456	ArgumentList	inStream
>457	Argument	inStream
>458	Identifier	inStream
>459	Callee	masks . readState
>460	MemberAccess	masks . readState
>461	Identifier	readState
>462	Identifier	masks
>468	FunctionDef	SparsePooler 
>469	ParameterList	 
>470	CompoundStatement	 
>474	FunctionDef	SparsePooler 
>475	ParameterList	const SparsePoolerInputMasks & inputMasks , size_type normalize , value_type norm , size_type sparsification_mode , \
>476	Parameter	 
>477	Identifier	seed
>478	ParameterType	UInt32
>479	Parameter	 
>480	Identifier	sigma
>481	ParameterType	value_type
>482	Parameter	 
>483	Identifier	min_proto_sum
>484	ParameterType	value_type
>485	Parameter	 
>486	Identifier	min_accept_norm
>487	ParameterType	value_type
>488	Parameter	 
>489	Identifier	min_accept_distance
>490	ParameterType	value_type
>491	Parameter	 
>492	Identifier	threshold
>493	ParameterType	value_type
>494	Parameter	 
>495	Identifier	kWinners
>496	ParameterType	size_type
>497	Parameter	 
>498	Identifier	inference_mode
>499	ParameterType	size_type
>500	Parameter	 
>501	Identifier	sparsification_mode
>502	ParameterType	size_type
>503	Parameter	 
>504	Identifier	norm
>505	ParameterType	value_type
>506	Parameter	 
>507	Identifier	normalize
>508	ParameterType	size_type
>509	Parameter	 
>510	Identifier	inputMasks
>511	ParameterType	const SparsePoolerInputMasks &
>512	CompoundStatement	 
>513	ExpressionStatement	 
>514	CallExpression	init_invariants_ ( )
>515	ArgumentList	 
>516	Callee	init_invariants_
>517	Identifier	init_invariants_
>518	ForStatement	for ( size_type i = 0 ; i != inputMasks . nMasks ( ) ; ++ i )
>519	ExpressionStatement	 
>520	CallExpression	prototypes_ [ i ] . resize ( 0 , inputMasks . size ( i ) )
>521	ArgumentList	0
>522	Argument	inputMasks . size ( i )
>523	CallExpression	inputMasks . size ( i )
>524	ArgumentList	i
>525	Argument	i
>526	Identifier	i
>527	Callee	inputMasks . size
>528	MemberAccess	inputMasks . size
>529	Identifier	size
>530	Identifier	inputMasks
>531	Argument	0
>532	PrimaryExpression	0
>533	Callee	prototypes_ [ i ] . resize
>534	MemberAccess	prototypes_ [ i ] . resize
>535	Identifier	resize
>536	ArrayIndexing	prototypes_ [ i ]
>537	Identifier	i
>538	Identifier	prototypes_
>539	UnaryExpression	 
>540	Identifier	i
>541	IncDec	++
>542	Condition	 
>543	EqualityExpression	i != inputMasks . nMasks ( )
>544	CallExpression	inputMasks . nMasks ( )
>545	ArgumentList	 
>546	Callee	inputMasks . nMasks
>547	MemberAccess	inputMasks . nMasks
>548	Identifier	nMasks
>549	Identifier	inputMasks
>550	Identifier	i
>551	ForInit	 
>552	IdentifierDeclStatement	size_type i = 0 ;
>553	IdentifierDecl	i = 0
>554	AssignmentExpr	i = 0
>555	PrimaryExpression	0
>556	Identifier	i
>557	Identifier	i
>558	IdentifierDeclType	size_type
>559	ExpressionStatement	 
>560	CallExpression	prototypes_ . resize ( inputMasks . nMasks ( ) )
>561	ArgumentList	inputMasks . nMasks ( )
>562	Argument	inputMasks . nMasks ( )
>563	CallExpression	inputMasks . nMasks ( )
>564	ArgumentList	 
>565	Callee	inputMasks . nMasks
>566	MemberAccess	inputMasks . nMasks
>567	Identifier	nMasks
>568	Identifier	inputMasks
>569	Callee	prototypes_ . resize
>570	MemberAccess	prototypes_ . resize
>571	Identifier	resize
>572	Identifier	prototypes_
>573	ExpressionStatement	 
>574	CallExpression	setSigma ( sigma )
>575	ArgumentList	sigma
>576	Argument	sigma
>577	Identifier	sigma
>578	Callee	setSigma
>579	Identifier	setSigma
>580	ExpressionStatement	 
>581	CallExpression	setMinProtoSum ( min_proto_sum )
>582	ArgumentList	min_proto_sum
>583	Argument	min_proto_sum
>584	Identifier	min_proto_sum
>585	Callee	setMinProtoSum
>586	Identifier	setMinProtoSum
>587	ExpressionStatement	 
>588	CallExpression	setMinAcceptNorm ( min_accept_norm )
>589	ArgumentList	min_accept_norm
>590	Argument	min_accept_norm
>591	Identifier	min_accept_norm
>592	Callee	setMinAcceptNorm
>593	Identifier	setMinAcceptNorm
>594	ExpressionStatement	 
>595	CallExpression	setMinAcceptDistance ( min_accept_distance )
>596	ArgumentList	min_accept_distance
>597	Argument	min_accept_distance
>598	Identifier	min_accept_distance
>599	Callee	setMinAcceptDistance
>600	Identifier	setMinAcceptDistance
>601	ExpressionStatement	 
>602	CallExpression	setThreshold ( threshold )
>603	ArgumentList	threshold
>604	Argument	threshold
>605	Identifier	threshold
>606	Callee	setThreshold
>607	Identifier	setThreshold
>608	ExpressionStatement	 
>609	CallExpression	setInferenceMode ( inference_mode )
>610	ArgumentList	inference_mode
>611	Argument	inference_mode
>612	Identifier	inference_mode
>613	Callee	setInferenceMode
>614	Identifier	setInferenceMode
>615	ExpressionStatement	 
>616	CallExpression	setKWinners ( kWinners )
>617	ArgumentList	kWinners
>618	Argument	kWinners
>619	Identifier	kWinners
>620	Callee	setKWinners
>621	Identifier	setKWinners
>622	ExpressionStatement	 
>623	CallExpression	setSparsificationMode ( sparsification_mode )
>624	ArgumentList	sparsification_mode
>625	Argument	sparsification_mode
>626	Identifier	sparsification_mode
>627	Callee	setSparsificationMode
>628	Identifier	setSparsificationMode
>629	ExpressionStatement	 
>630	CallExpression	setNorm ( norm )
>631	ArgumentList	norm
>632	Argument	norm
>633	Identifier	norm
>634	Callee	setNorm
>635	Identifier	setNorm
>636	ExpressionStatement	 
>637	CallExpression	setDoNormalization ( normalize )
>638	ArgumentList	normalize
>639	Argument	normalize
>640	Identifier	normalize
>641	Callee	setDoNormalization
>642	Identifier	setDoNormalization
>664	FunctionDef	SparsePooler 
>665	ParameterList	istream & inStream , UInt32 seed
>666	Parameter	 
>667	Identifier	seed
>668	ParameterType	UInt32
>669	Parameter	 
>670	Identifier	inStream
>671	ParameterType	istream &
>672	CompoundStatement	 
>673	ExpressionStatement	 
>674	CallExpression	readState ( inStream )
>675	ArgumentList	inStream
>676	Argument	inStream
>677	Identifier	inStream
>678	Callee	readState
>679	Identifier	readState
>685	FunctionDef	SparsePooler 
>686	ParameterList	 
>687	CompoundStatement	 
>691	FunctionDef	SparsePooler 
>692	ParameterList	ostream & outStream
>693	Parameter	 
>694	Identifier	outStream
>695	ParameterType	ostream &
>696	ReturnType	void
>697	CompoundStatement	 
>698	ForStatement	for ( size_type i = 0 ; i != prototypes_ . size ( ) ; ++ i )
>699	ExpressionStatement	 
>700	CallExpression	getPrototypes ( i ) . toCSR ( outStream )
>701	ArgumentList	outStream
>702	Argument	outStream
>703	Identifier	outStream
>704	Callee	getPrototypes ( i ) . toCSR
>705	MemberAccess	getPrototypes ( i ) . toCSR
>706	Identifier	toCSR
>707	CallExpression	getPrototypes ( i )
>708	ArgumentList	i
>709	Argument	i
>710	Identifier	i
>711	Callee	getPrototypes
>712	Identifier	getPrototypes
>713	UnaryExpression	 
>714	Identifier	i
>715	IncDec	++
>716	Condition	 
>717	EqualityExpression	i != prototypes_ . size ( )
>718	CallExpression	prototypes_ . size ( )
>719	ArgumentList	 
>720	Callee	prototypes_ . size
>721	MemberAccess	prototypes_ . size
>722	Identifier	size
>723	Identifier	prototypes_
>724	Identifier	i
>725	ForInit	 
>726	IdentifierDeclStatement	size_type i = 0 ;
>727	IdentifierDecl	i = 0
>728	AssignmentExpr	i = 0
>729	PrimaryExpression	0
>730	Identifier	i
>731	Identifier	i
>732	IdentifierDeclType	size_type
>733	ExpressionStatement	 
>734	ShiftExpression	outStream << getCurrentSparsePoolerVersion ( ) << \" \" << getSparsificationMode ( ) << \" \" << getInferenceMode ( ) << \" \" << \
>735	ShiftExpression	getCurrentSparsePoolerVersion ( ) << \" \" << getSparsificationMode ( ) << \" \" << getInferenceMode ( ) << \" \" << \
>736	ShiftExpression	\" \" << getSparsificationMode ( ) << \" \" << getInferenceMode ( ) << \" \" << getInputMasks ( ) << \" \" << \
>737	ShiftExpression	getSparsificationMode ( ) << \" \" << getInferenceMode ( ) << \" \" << getInputMasks ( ) << \" \" << getDoNormalization ( ) << \" \" << \
>738	ShiftExpression	\" \" << getInferenceMode ( ) << \" \" << getInputMasks ( ) << \" \" << getDoNormalization ( ) << \" \" << getNorm ( ) << \" \" << \
>739	ShiftExpression	getInferenceMode ( ) << \" \" << getInputMasks ( ) << \" \" << getDoNormalization ( ) << \" \" << getNorm ( ) << \" \" << \
>740	ShiftExpression	\" \" << getInputMasks ( ) << \" \" << getDoNormalization ( ) << \" \" << getNorm ( ) << \" \" << getKWinners ( ) << \" \" << \
>741	ShiftExpression	getInputMasks ( ) << \" \" << getDoNormalization ( ) << \" \" << getNorm ( ) << \" \" << getKWinners ( ) << \" \" << \
>742	ShiftExpression	\" \" << getDoNormalization ( ) << \" \" << getNorm ( ) << \" \" << getKWinners ( ) << \" \" << getThreshold ( ) << \" \" << \
>743	ShiftExpression	getDoNormalization ( ) << \" \" << getNorm ( ) << \" \" << getKWinners ( ) << \" \" << getThreshold ( ) << \" \" << \
>744	ShiftExpression	\" \" << getNorm ( ) << \" \" << getKWinners ( ) << \" \" << getThreshold ( ) << \" \" << getMinAcceptDistance ( ) << \" \" << \
>745	ShiftExpression	getNorm ( ) << \" \" << getKWinners ( ) << \" \" << getThreshold ( ) << \" \" << getMinAcceptDistance ( ) << \" \" << \
>746	ShiftExpression	\" \" << getKWinners ( ) << \" \" << getThreshold ( ) << \" \" << getMinAcceptDistance ( ) << \" \" << getMinAcceptNorm ( ) << \" \" << \
>747	ShiftExpression	getKWinners ( ) << \" \" << getThreshold ( ) << \" \" << getMinAcceptDistance ( ) << \" \" << getMinAcceptNorm ( ) << \" \" << \
>748	ShiftExpression	\" \" << getThreshold ( ) << \" \" << getMinAcceptDistance ( ) << \" \" << getMinAcceptNorm ( ) << \" \" << \
>749	ShiftExpression	getThreshold ( ) << \" \" << getMinAcceptDistance ( ) << \" \" << getMinAcceptNorm ( ) << \" \" << getMinProtoSum ( ) << \" \" << \
>750	ShiftExpression	\" \" << getMinAcceptDistance ( ) << \" \" << getMinAcceptNorm ( ) << \" \" << getMinProtoSum ( ) << \" \" << \
>751	ShiftExpression	getMinAcceptDistance ( ) << \" \" << getMinAcceptNorm ( ) << \" \" << getMinProtoSum ( ) << \" \" << getSigma ( ) << \" \"\
>752	ShiftExpression	\" \" << getMinAcceptNorm ( ) << \" \" << getMinProtoSum ( ) << \" \" << getSigma ( ) << \" \"
>753	ShiftExpression	getMinAcceptNorm ( ) << \" \" << getMinProtoSum ( ) << \" \" << getSigma ( ) << \" \"
>754	ShiftExpression	\" \" << getMinProtoSum ( ) << \" \" << getSigma ( ) << \" \"
>755	ShiftExpression	getMinProtoSum ( ) << \" \" << getSigma ( ) << \" \"
>756	ShiftExpression	\" \" << getSigma ( ) << \" \"
>757	ShiftExpression	getSigma ( ) << \" \"
>758	PrimaryExpression	\" \"
>759	CallExpression	getSigma ( )
>760	ArgumentList	 
>761	Callee	getSigma
>762	Identifier	getSigma
>763	PrimaryExpression	\" \"
>764	CallExpression	getMinProtoSum ( )
>765	ArgumentList	 
>766	Callee	getMinProtoSum
>767	Identifier	getMinProtoSum
>768	PrimaryExpression	\" \"
>769	CallExpression	getMinAcceptNorm ( )
>770	ArgumentList	 
>771	Callee	getMinAcceptNorm
>772	Identifier	getMinAcceptNorm
>773	PrimaryExpression	\" \"
>774	CallExpression	getMinAcceptDistance ( )
>775	ArgumentList	 
>776	Callee	getMinAcceptDistance
>777	Identifier	getMinAcceptDistance
>778	PrimaryExpression	\" \"
>779	CallExpression	getThreshold ( )
>780	ArgumentList	 
>781	Callee	getThreshold
>782	Identifier	getThreshold
>783	PrimaryExpression	\" \"
>784	CallExpression	getKWinners ( )
>785	ArgumentList	 
>786	Callee	getKWinners
>787	Identifier	getKWinners
>788	PrimaryExpression	\" \"
>789	CallExpression	getNorm ( )
>790	ArgumentList	 
>791	Callee	getNorm
>792	Identifier	getNorm
>793	PrimaryExpression	\" \"
>794	CallExpression	getDoNormalization ( )
>795	ArgumentList	 
>796	Callee	getDoNormalization
>797	Identifier	getDoNormalization
>798	PrimaryExpression	\" \"
>799	CallExpression	getInputMasks ( )
>800	ArgumentList	 
>801	Callee	getInputMasks
>802	Identifier	getInputMasks
>803	PrimaryExpression	\" \"
>804	CallExpression	getInferenceMode ( )
>805	ArgumentList	 
>806	Callee	getInferenceMode
>807	Identifier	getInferenceMode
>808	PrimaryExpression	\" \"
>809	CallExpression	getSparsificationMode ( )
>810	ArgumentList	 
>811	Callee	getSparsificationMode
>812	Identifier	getSparsificationMode
>813	PrimaryExpression	\" \"
>814	CallExpression	getCurrentSparsePoolerVersion ( )
>815	ArgumentList	 
>816	Callee	getCurrentSparsePoolerVersion
>817	Identifier	getCurrentSparsePoolerVersion
>818	Identifier	outStream
>827	FunctionDef	SparsePooler 
>828	ParameterList	istream & inStream
>829	Parameter	 
>830	Identifier	inStream
>831	ParameterType	istream &
>832	ReturnType	void
>833	CompoundStatement	 
>834	ExpressionStatement	 
>835	CallExpression	init_invariants_ ( )
>836	ArgumentList	 
>837	Callee	init_invariants_
>838	Identifier	init_invariants_
>839	ExpressionStatement	 
>840	CallExpression	buf_ . resize ( getInputMasks ( ) . maxSize ( ) )
>841	ArgumentList	getInputMasks ( ) . maxSize ( )
>842	Argument	getInputMasks ( ) . maxSize ( )
>843	CallExpression	getInputMasks ( ) . maxSize ( )
>844	ArgumentList	 
>845	Callee	getInputMasks ( ) . maxSize
>846	MemberAccess	getInputMasks ( ) . maxSize
>847	Identifier	maxSize
>848	CallExpression	getInputMasks ( )
>849	ArgumentList	 
>850	Callee	getInputMasks
>851	Identifier	getInputMasks
>852	Callee	buf_ . resize
>853	MemberAccess	buf_ . resize
>854	Identifier	resize
>855	Identifier	buf_
>856	ExpressionStatement	 
>857	AssignmentExpr	p_ = 0
>858	PrimaryExpression	0
>859	Identifier	p_
>860	ForStatement	for ( size_type i = 0 ; i != n_prototypes ; ++ i )
>861	ExpressionStatement	 
>862	CallExpression	prototypes_ [ i ] . fromCSR ( inStream , true )
>863	ArgumentList	inStream
>864	Argument	true
>865	Identifier	true
>866	Argument	inStream
>867	Identifier	inStream
>868	Callee	prototypes_ [ i ] . fromCSR
>869	MemberAccess	prototypes_ [ i ] . fromCSR
>870	Identifier	fromCSR
>871	ArrayIndexing	prototypes_ [ i ]
>872	Identifier	i
>873	Identifier	prototypes_
>874	UnaryExpression	 
>875	Identifier	i
>876	IncDec	++
>877	Condition	 
>878	EqualityExpression	i != n_prototypes
>879	Identifier	n_prototypes
>880	Identifier	i
>881	ForInit	 
>882	IdentifierDeclStatement	size_type i = 0 ;
>883	IdentifierDecl	i = 0
>884	AssignmentExpr	i = 0
>885	PrimaryExpression	0
>886	Identifier	i
>887	Identifier	i
>888	IdentifierDeclType	size_type
>889	ExpressionStatement	 
>890	CallExpression	prototypes_ . resize ( n_prototypes )
>891	ArgumentList	n_prototypes
>892	Argument	n_prototypes
>893	Identifier	n_prototypes
>894	Callee	prototypes_ . resize
>895	MemberAccess	prototypes_ . resize
>896	Identifier	resize
>897	Identifier	prototypes_
>898	IdentifierDeclStatement	 
>899	IdentifierDecl	n_prototypes = getInputMasks ( ) . nMasks ( )
>900	AssignmentExpr	n_prototypes = getInputMasks ( ) . nMasks ( )
>901	CallExpression	getInputMasks ( ) . nMasks ( )
>902	ArgumentList	 
>903	Callee	getInputMasks ( ) . nMasks
>904	MemberAccess	getInputMasks ( ) . nMasks
>905	Identifier	nMasks
>906	CallExpression	getInputMasks ( )
>907	ArgumentList	 
>908	Callee	getInputMasks
>909	Identifier	getInputMasks
>910	Identifier	n_prototypes
>911	Identifier	n_prototypes
>912	IdentifierDeclType	size_type
>913	ExpressionStatement	 
>914	CallExpression	setSigma ( f_val )
>915	ArgumentList	f_val
>916	Argument	f_val
>917	Identifier	f_val
>918	Callee	setSigma
>919	Identifier	setSigma
>920	ExpressionStatement	 
>921	ShiftExpression	inStream >> f_val
>922	Identifier	f_val
>923	Identifier	inStream
>924	IfStatement	if ( flag == \"SparsePooler_1.7\" )
>925	CompoundStatement	 
>926	ExpressionStatement	 
>927	CallExpression	setMinProtoSum ( f_val )
>928	ArgumentList	f_val
>929	Argument	f_val
>930	Identifier	f_val
>931	Callee	setMinProtoSum
>932	Identifier	setMinProtoSum
>933	ExpressionStatement	 
>934	ShiftExpression	inStream >> f_val
>935	Identifier	f_val
>936	Identifier	inStream
>937	Condition	 
>938	EqualityExpression	flag == \"SparsePooler_1.7\"
>939	PrimaryExpression	\"SparsePooler_1.7\"
>940	Identifier	flag
>941	ExpressionStatement	 
>942	CallExpression	setMinAcceptNorm ( f_val )
>943	ArgumentList	f_val
>944	Argument	f_val
>945	Identifier	f_val
>946	Callee	setMinAcceptNorm
>947	Identifier	setMinAcceptNorm
>948	ExpressionStatement	 
>949	ShiftExpression	inStream >> f_val
>950	Identifier	f_val
>951	Identifier	inStream
>952	ExpressionStatement	 
>953	CallExpression	setMinAcceptDistance ( f_val )
>954	ArgumentList	f_val
>955	Argument	f_val
>956	Identifier	f_val
>957	Callee	setMinAcceptDistance
>958	Identifier	setMinAcceptDistance
>959	ExpressionStatement	 
>960	ShiftExpression	inStream >> f_val
>961	Identifier	f_val
>962	Identifier	inStream
>963	ExpressionStatement	 
>964	CallExpression	setThreshold ( f_val )
>965	ArgumentList	f_val
>966	Argument	f_val
>967	Identifier	f_val
>968	Callee	setThreshold
>969	Identifier	setThreshold
>970	ExpressionStatement	 
>971	ShiftExpression	inStream >> f_val
>972	Identifier	f_val
>973	Identifier	inStream
>974	ExpressionStatement	 
>975	CallExpression	setKWinners ( i_val )
>976	ArgumentList	i_val
>977	Argument	i_val
>978	Identifier	i_val
>979	Callee	setKWinners
>980	Identifier	setKWinners
>981	ExpressionStatement	 
>982	ShiftExpression	inStream >> i_val
>983	Identifier	i_val
>984	Identifier	inStream
>985	ExpressionStatement	 
>986	CallExpression	setNorm ( f_val )
>987	ArgumentList	f_val
>988	Argument	f_val
>989	Identifier	f_val
>990	Callee	setNorm
>991	Identifier	setNorm
>992	ExpressionStatement	 
>993	ShiftExpression	inStream >> f_val
>994	Identifier	f_val
>995	Identifier	inStream
>996	ExpressionStatement	 
>997	CallExpression	setDoNormalization ( i_val )
>998	ArgumentList	i_val
>999	Argument	i_val
>1000	Identifier	i_val
>1001	Callee	setDoNormalization
>1002	Identifier	setDoNormalization
>1003	ExpressionStatement	 
>1004	ShiftExpression	inStream >> i_val
>1005	Identifier	i_val
>1006	Identifier	inStream
>1007	ExpressionStatement	 
>1008	ShiftExpression	inStream >> input_masks_
>1009	Identifier	input_masks_
>1010	Identifier	inStream
>1011	ExpressionStatement	 
>1012	CallExpression	setInferenceMode ( i_val )
>1013	ArgumentList	i_val
>1014	Argument	i_val
>1015	Identifier	i_val
>1016	Callee	setInferenceMode
>1017	Identifier	setInferenceMode
>1018	ExpressionStatement	 
>1019	ShiftExpression	inStream >> i_val
>1020	Identifier	i_val
>1021	Identifier	inStream
>1022	ExpressionStatement	 
>1023	CallExpression	setSparsificationMode ( i_val )
>1024	ArgumentList	i_val
>1025	Argument	i_val
>1026	Identifier	i_val
>1027	Callee	setSparsificationMode
>1028	Identifier	setSparsificationMode
>1029	ExpressionStatement	 
>1030	ShiftExpression	inStream >> i_val
>1031	Identifier	i_val
>1032	Identifier	inStream
>1033	ExpressionStatement	 
>1034	ShiftExpression	inStream >> flag
>1035	Identifier	flag
>1036	Identifier	inStream
>1037	IdentifierDeclStatement	 
>1038	IdentifierDecl	f_val = ( value_type ) 0
>1039	AssignmentExpr	f_val = ( value_type ) 0
>1040	CastExpression	( value_type ) 0
>1041	PrimaryExpression	0
>1042	CastTarget	value_type
>1043	Identifier	f_val
>1044	Identifier	f_val
>1045	IdentifierDeclType	value_type
>1046	IdentifierDeclStatement	 
>1047	IdentifierDecl	i_val = 0
>1048	AssignmentExpr	i_val = 0
>1049	PrimaryExpression	0
>1050	Identifier	i_val
>1051	Identifier	i_val
>1052	IdentifierDeclType	size_type
>1053	IdentifierDeclStatement	 
>1054	IdentifierDecl	flag ( \"\" )
>1055	PrimaryExpression	\"\"
>1056	Identifier	flag
>1057	IdentifierDeclType	string
>1058	IdentifierDeclStatement	 
>1059	IdentifierDecl	where = \"SparsePooler
>1060	AssignmentExpr	where = \"SparsePooler
>1061	PrimaryExpression	\"SparsePooler
>1062	Identifier	where
>1063	Identifier	where
>1064	IdentifierDeclType	const std 
>1084	FunctionDef	SparsePooler 
>1085	ParameterList	 
>1086	ReturnType	void
>1087	CompoundStatement	 
<5=7,6
<11=19,12
<12=16,13
<13=15,14
<16=18,17
<19=20
<20=21
<21=23,22
<23=24
<30=35,31
<31=32
<32=34,33
<35=36
<36=37
<37=41,38
<38=39
<39=40
<41=42
<47=52,48
<48=49
<49=51,50
<52=57,53
<53=54
<54=56,55
<57=89,58
<58=83,77,71,65,59
<59=60
<60=64,61
<61=63,62
<65=66
<66=70,67
<67=69,68
<71=72
<72=76,73
<73=75,74
<77=78
<78=82,79
<79=81,80
<83=84
<84=88,85
<85=87,86
<89=90
<90=92,91
<92=94,93
<112=118,117,113
<113=114
<114=116,115
<118=119
<119=120
<120=131,121
<121=127,122
<122=126,123
<123=125,124
<127=129,128
<129=130
<136=142,141,137
<137=138
<138=140,139
<142=148,143
<143=144
<144=146,145
<146=147
<148=149
<149=155,150
<150=154,151
<151=153,152
<160=163,162,161
<163=284,283,282,281,280,279,278,277,276,275,270,266,250,164
<164=242,233,230,165
<165=223,190,184,175,166
<166=171,167
<167=168
<168=170,169
<171=172
<172=174,173
<175=180,176
<176=177
<177=179,178
<180=181
<181=183,182
<184=185
<185=187,186
<187=189,188
<190=215,204,201,191
<191=192
<192=200,193
<193=195,194
<195=197,196
<197=199,198
<201=203,202
<204=205
<205=214,206
<206=208,207
<208=209
<209=211,210
<211=213,212
<215=216
<216=217
<217=222,221,218
<218=220,219
<223=224
<224=229,228,225
<225=227,226
<230=232,231
<233=234
<234=241,235
<235=237,236
<237=238
<238=240,239
<242=243
<243=244
<244=249,248,245
<245=247,246
<250=251
<251=262,252
<252=255,253
<253=254
<255=256
<256=258,257
<258=259
<259=261,260
<262=263
<263=265,264
<266=267
<267=269,268
<270=271
<271=273,272
<273=274
<284=381,365,285
<285=357,348,345,286
<286=327,287
<287=319,308,305,288
<288=289
<289=291,290
<291=303,292
<292=293
<293=294
<294=296,295
<296=298,297
<298=300,299
<300=302,301
<303=304
<305=307,306
<308=309
<309=318,310
<310=312,311
<312=313
<313=315,314
<315=317,316
<319=320
<320=321
<321=326,325,322
<322=324,323
<327=328
<328=330,329
<330=343,331
<331=332
<332=333
<333=335,334
<335=337,336
<337=338
<338=340,339
<340=342,341
<343=344
<345=347,346
<348=349
<349=356,350
<350=352,351
<352=353
<353=355,354
<357=358
<358=359
<359=364,363,360
<360=362,361
<365=366
<366=368,367
<368=379,369
<369=370
<370=371
<371=373,372
<373=375,374
<375=376
<376=378,377
<379=380
<381=382
<382=388,383
<383=387,384
<384=386,385
<388=394,389
<389=390
<390=391
<391=393,392
<394=395
<416=425,424,417
<417=421,418
<418=420,419
<421=423,422
<425=428,426
<426=427
<428=429
<429=433,430
<430=431
<431=432
<433=434
<434=436,435
<442=451,450,443
<443=447,444
<444=446,445
<447=449,448
<451=454,452
<452=453
<454=455
<455=459,456
<456=457
<457=458
<459=460
<460=462,461
<468=470,469
<474=512,475
<475=509,506,503,500,497,494,491,488,485,482,479,476
<476=478,477
<479=481,480
<482=484,483
<485=487,486
<488=490,489
<491=493,492
<494=496,495
<497=499,498
<500=502,501
<503=505,504
<506=508,507
<509=511,510
<512=636,629,622,615,608,601,594,587,580,573,559,518,513
<513=514
<514=516,515
<516=517
<518=551,542,539,519
<519=520
<520=533,521
<521=531,522
<522=523
<523=527,524
<524=525
<525=526
<527=528
<528=530,529
<531=532
<533=534
<534=536,535
<536=538,537
<539=541,540
<542=543
<543=550,544
<544=546,545
<546=547
<547=549,548
<551=552
<552=553
<553=558,557,554
<554=556,555
<559=560
<560=569,561
<561=562
<562=563
<563=565,564
<565=566
<566=568,567
<569=570
<570=572,571
<573=574
<574=578,575
<575=576
<576=577
<578=579
<580=581
<581=585,582
<582=583
<583=584
<585=586
<587=588
<588=592,589
<589=590
<590=591
<592=593
<594=595
<595=599,596
<596=597
<597=598
<599=600
<601=602
<602=606,603
<603=604
<604=605
<606=607
<608=609
<609=613,610
<610=611
<611=612
<613=614
<615=616
<616=620,617
<617=618
<618=619
<620=621
<622=623
<623=627,624
<624=625
<625=626
<627=628
<629=630
<630=634,631
<631=632
<632=633
<634=635
<636=637
<637=641,638
<638=639
<639=640
<641=642
<664=672,665
<665=669,666
<666=668,667
<669=671,670
<672=673
<673=674
<674=678,675
<675=676
<676=677
<678=679
<685=687,686
<691=697,696,692
<692=693
<693=695,694
<697=733,698
<698=725,716,713,699
<699=700
<700=704,701
<701=702
<702=703
<704=705
<705=707,706
<707=711,708
<708=709
<709=710
<711=712
<713=715,714
<716=717
<717=724,718
<718=720,719
<720=721
<721=723,722
<725=726
<726=727
<727=732,731,728
<728=730,729
<733=734
<734=818,735
<735=814,736
<736=813,737
<737=809,738
<738=808,739
<739=804,740
<740=803,741
<741=799,742
<742=798,743
<743=794,744
<744=793,745
<745=789,746
<746=788,747
<747=784,748
<748=783,749
<749=779,750
<750=778,751
<751=774,752
<752=773,753
<753=769,754
<754=768,755
<755=764,756
<756=763,757
<757=759,758
<759=761,760
<761=762
<764=766,765
<766=767
<769=771,770
<771=772
<774=776,775
<776=777
<779=781,780
<781=782
<784=786,785
<786=787
<789=791,790
<791=792
<794=796,795
<796=797
<799=801,800
<801=802
<804=806,805
<806=807
<809=811,810
<811=812
<814=816,815
<816=817
<827=833,832,828
<828=829
<829=831,830
<833=1058,1053,1046,1037,1033,1029,1022,1018,1011,1007,1003,996,992,985,981,974,970,963,959,952,948,941,924,920,913,898,889,860,856,839,834
<834=835
<835=837,836
<837=838
<839=840
<840=852,841
<841=842
<842=843
<843=845,844
<845=846
<846=848,847
<848=850,849
<850=851
<852=853
<853=855,854
<856=857
<857=859,858
<860=881,877,874,861
<861=862
<862=868,863
<863=866,864
<864=865
<866=867
<868=869
<869=871,870
<871=873,872
<874=876,875
<877=878
<878=880,879
<881=882
<882=883
<883=888,887,884
<884=886,885
<889=890
<890=894,891
<891=892
<892=893
<894=895
<895=897,896
<898=899
<899=912,911,900
<900=910,901
<901=903,902
<903=904
<904=906,905
<906=908,907
<908=909
<913=914
<914=918,915
<915=916
<916=917
<918=919
<920=921
<921=923,922
<924=937,925
<925=933,926
<926=927
<927=931,928
<928=929
<929=930
<931=932
<933=934
<934=936,935
<937=938
<938=940,939
<941=942
<942=946,943
<943=944
<944=945
<946=947
<948=949
<949=951,950
<952=953
<953=957,954
<954=955
<955=956
<957=958
<959=960
<960=962,961
<963=964
<964=968,965
<965=966
<966=967
<968=969
<970=971
<971=973,972
<974=975
<975=979,976
<976=977
<977=978
<979=980
<981=982
<982=984,983
<985=986
<986=990,987
<987=988
<988=989
<990=991
<992=993
<993=995,994
<996=997
<997=1001,998
<998=999
<999=1000
<1001=1002
<1003=1004
<1004=1006,1005
<1007=1008
<1008=1010,1009
<1011=1012
<1012=1016,1013
<1013=1014
<1014=1015
<1016=1017
<1018=1019
<1019=1021,1020
<1022=1023
<1023=1027,1024
<1024=1025
<1025=1026
<1027=1028
<1029=1030
<1030=1032,1031
<1033=1034
<1034=1036,1035
<1037=1038
<1038=1045,1044,1039
<1039=1043,1040
<1040=1042,1041
<1046=1047
<1047=1052,1051,1048
<1048=1050,1049
<1053=1054
<1054=1057,1056,1055
<1058=1059
<1059=1064,1063,1060
<1060=1062,1061
<1084=1087,1086,1085
