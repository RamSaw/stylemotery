>5	FunctionDef	ShortestDist (string text [ ] , int n , string word1 , string word2)
>6	ParameterList	string text [ ] , int n , string word1 , string word2
>7	Parameter	 
>8	Identifier	word2
>9	ParameterType	string
>10	Parameter	 
>11	Identifier	word1
>12	ParameterType	string
>13	Parameter	 
>14	Identifier	n
>15	ParameterType	int
>16	Parameter	 
>17	Identifier	text
>18	ParameterType	string [ ]
>19	ReturnType	int
>20	CompoundStatement	 
>21	ReturnStatement	 
>22	Identifier	min
>23	ForStatement	for ( int pos = 0 ; pos < n ; ++ pos )
>24	CompoundStatement	 
>25	IfStatement	if ( text [ pos ] == word1 )
>26	ElseStatement	else
>27	IfStatement	if ( text [ pos ] == word2 )
>28	CompoundStatement	 
>29	IfStatement	if ( dist < min )
>30	ExpressionStatement	 
>31	AssignmentExpr	min = dist
>32	Identifier	dist
>33	Identifier	min
>34	Condition	 
>35	RelationalExpression	dist < min
>36	Identifier	min
>37	Identifier	dist
>38	IdentifierDeclStatement	 
>39	IdentifierDecl	dist = pos2 - pos1
>40	AssignmentExpr	dist = pos2 - pos1
>41	AdditiveExpression	pos2 - pos1
>42	Identifier	pos1
>43	Identifier	pos2
>44	Identifier	dist
>45	Identifier	dist
>46	IdentifierDeclType	int
>47	ExpressionStatement	 
>48	AssignmentExpr	pos2 = pos
>49	Identifier	pos
>50	Identifier	pos2
>51	Condition	 
>52	EqualityExpression	text [ pos ] == word2
>53	Identifier	word2
>54	ArrayIndexing	text [ pos ]
>55	Identifier	pos
>56	Identifier	text
>57	CompoundStatement	 
>58	IfStatement	if ( dist < min )
>59	ExpressionStatement	 
>60	AssignmentExpr	min = dist
>61	Identifier	dist
>62	Identifier	min
>63	Condition	 
>64	RelationalExpression	dist < min
>65	Identifier	min
>66	Identifier	dist
>67	IdentifierDeclStatement	 
>68	IdentifierDecl	dist = pos1 - pos2
>69	AssignmentExpr	dist = pos1 - pos2
>70	AdditiveExpression	pos1 - pos2
>71	Identifier	pos2
>72	Identifier	pos1
>73	Identifier	dist
>74	Identifier	dist
>75	IdentifierDeclType	int
>76	ExpressionStatement	 
>77	AssignmentExpr	pos1 = pos
>78	Identifier	pos
>79	Identifier	pos1
>80	Condition	 
>81	EqualityExpression	text [ pos ] == word1
>82	Identifier	word1
>83	ArrayIndexing	text [ pos ]
>84	Identifier	pos
>85	Identifier	text
>86	UnaryExpression	 
>87	Identifier	pos
>88	IncDec	++
>89	Condition	 
>90	RelationalExpression	pos < n
>91	Identifier	n
>92	Identifier	pos
>93	ForInit	 
>94	IdentifierDeclStatement	int pos = 0 ;
>95	IdentifierDecl	pos = 0
>96	AssignmentExpr	pos = 0
>97	PrimaryExpression	0
>98	Identifier	pos
>99	Identifier	pos
>100	IdentifierDeclType	int
>101	IdentifierDeclStatement	 
>102	IdentifierDecl	pos2 = - min
>103	AssignmentExpr	pos2 = - min
>104	UnaryOp	- min
>105	Identifier	min
>106	UnaryOperator	-
>107	Identifier	pos2
>108	Identifier	pos2
>109	IdentifierDeclType	int
>110	IdentifierDeclStatement	 
>111	IdentifierDecl	pos1 = - min
>112	AssignmentExpr	pos1 = - min
>113	UnaryOp	- min
>114	Identifier	min
>115	UnaryOperator	-
>116	Identifier	pos1
>117	Identifier	pos1
>118	IdentifierDeclType	int
>119	IdentifierDeclStatement	 
>120	IdentifierDecl	min = kMaxInt / 2
>121	AssignmentExpr	min = kMaxInt / 2
>122	MultiplicativeExpression	kMaxInt / 2
>123	PrimaryExpression	2
>124	Identifier	kMaxInt
>125	Identifier	min
>126	Identifier	min
>127	IdentifierDeclType	int
>143	FunctionDef	main ()
>144	ParameterList	 
>145	ReturnType	int
>146	CompoundStatement	 
>147	ReturnStatement	 
>148	PrimaryExpression	0
>149	ExpressionStatement	 
>150	ShiftExpression	cout << ShortestDist ( text , len , \"is\" , \"name\" ) << endl
>151	ShiftExpression	ShortestDist ( text , len , \"is\" , \"name\" ) << endl
>152	Identifier	endl
>153	CallExpression	ShortestDist ( text , len , \"is\" , \"name\" )
>154	ArgumentList	text
>155	Argument	\"name\"
>156	PrimaryExpression	\"name\"
>157	Argument	\"is\"
>158	PrimaryExpression	\"is\"
>159	Argument	len
>160	Identifier	len
>161	Argument	text
>162	Identifier	text
>163	Callee	ShortestDist
>164	Identifier	ShortestDist
>165	Identifier	cout
>166	IdentifierDeclStatement	 
>167	IdentifierDecl	len = 8
>168	AssignmentExpr	len = 8
>169	PrimaryExpression	8
>170	Identifier	len
>171	Identifier	len
>172	IdentifierDeclType	int
>173	IdentifierDeclStatement	 
>174	IdentifierDecl	text [ ] = { \"What\" , \"is\" , \"your\" , \"name\" , \"My\" , \"name\" , \"is\" , \"Hawstein\" }
>175	AssignmentExpr	text [ ] = { \"What\" , \"is\" , \"your\" , \"name\" , \"My\" , \"name\" , \"is\" , \"Hawstein\" }
>176	InitializerList	\"What\"
>177	PrimaryExpression	\"Hawstein\"
>178	PrimaryExpression	\"is\"
>179	PrimaryExpression	\"name\"
>180	PrimaryExpression	\"My\"
>181	PrimaryExpression	\"name\"
>182	PrimaryExpression	\"your\"
>183	PrimaryExpression	\"is\"
>184	PrimaryExpression	\"What\"
>185	Identifier	text
>186	Identifier	text
>187	IdentifierDeclType	string [ ]
<5=20,19,6
<6=16,13,10,7
<7=9,8
<10=12,11
<13=15,14
<16=18,17
<20=119,110,101,23,21
<21=22
<23=93,89,86,24
<24=25
<25=80,57,26
<26=27
<27=51,28
<28=47,38,29
<29=34,30
<30=31
<31=33,32
<34=35
<35=37,36
<38=39
<39=46,45,40
<40=44,41
<41=43,42
<47=48
<48=50,49
<51=52
<52=54,53
<54=56,55
<57=76,67,58
<58=63,59
<59=60
<60=62,61
<63=64
<64=66,65
<67=68
<68=75,74,69
<69=73,70
<70=72,71
<76=77
<77=79,78
<80=81
<81=83,82
<83=85,84
<86=88,87
<89=90
<90=92,91
<93=94
<94=95
<95=100,99,96
<96=98,97
<101=102
<102=109,108,103
<103=107,104
<104=106,105
<110=111
<111=118,117,112
<112=116,113
<113=115,114
<119=120
<120=127,126,121
<121=125,122
<122=124,123
<143=146,145,144
<146=173,166,149,147
<147=148
<149=150
<150=165,151
<151=153,152
<153=163,154
<154=161,159,157,155
<155=156
<157=158
<159=160
<161=162
<163=164
<166=167
<167=172,171,168
<168=170,169
<173=174
<174=187,186,175
<175=185,176
<176=184,183,182,181,180,179,178,177
