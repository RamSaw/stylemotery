>3	FunctionDef	operator ( ) (const FixedPointCoordinate & current_coordinate)
>4	ParameterList	const FixedPointCoordinate & current_coordinate
>5	Parameter	 
>6	Identifier	current_coordinate
>7	ParameterType	const FixedPointCoordinate &
>8	CompoundStatement	 
>9	ReturnStatement	 
>10	CallExpression	BitInterleaving ( location [ 0 ] , location [ 1 ] )
>11	ArgumentList	location [ 0 ]
>12	Argument	location [ 1 ]
>13	ArrayIndexing	location [ 1 ]
>14	PrimaryExpression	1
>15	Identifier	location
>16	Argument	location [ 0 ]
>17	ArrayIndexing	location [ 0 ]
>18	PrimaryExpression	0
>19	Identifier	location
>20	Callee	BitInterleaving
>21	Identifier	BitInterleaving
>22	ExpressionStatement	 
>23	CallExpression	TransposeCoordinate ( location )
>24	ArgumentList	location
>25	Argument	location
>26	Identifier	location
>27	Callee	TransposeCoordinate
>28	Identifier	TransposeCoordinate
>29	ExpressionStatement	 
>30	AssignmentExpr	location [ 1 ] = current_coordinate . lon + static_cast < int > ( 180 * COORDINATE_PRECISION )
>31	RelationalExpression	current_coordinate . lon + static_cast < int > ( 180 * COORDINATE_PRECISION )
>32	RelationalExpression	int > ( 180 * COORDINATE_PRECISION )
>33	MultiplicativeExpression	180 * COORDINATE_PRECISION
>34	Identifier	COORDINATE_PRECISION
>35	PrimaryExpression	180
>36	Identifier	int
>37	AdditiveExpression	current_coordinate . lon + static_cast
>38	Identifier	static_cast
>39	MemberAccess	current_coordinate . lon
>40	Identifier	lon
>41	Identifier	current_coordinate
>42	ArrayIndexing	location [ 1 ]
>43	PrimaryExpression	1
>44	Identifier	location
>45	ExpressionStatement	 
>46	AssignmentExpr	location [ 0 ] = current_coordinate . lat + static_cast < int > ( 90 * COORDINATE_PRECISION )
>47	RelationalExpression	current_coordinate . lat + static_cast < int > ( 90 * COORDINATE_PRECISION )
>48	RelationalExpression	int > ( 90 * COORDINATE_PRECISION )
>49	MultiplicativeExpression	90 * COORDINATE_PRECISION
>50	Identifier	COORDINATE_PRECISION
>51	PrimaryExpression	90
>52	Identifier	int
>53	AdditiveExpression	current_coordinate . lat + static_cast
>54	Identifier	static_cast
>55	MemberAccess	current_coordinate . lat
>56	Identifier	lat
>57	Identifier	current_coordinate
>58	ArrayIndexing	location [ 0 ]
>59	PrimaryExpression	0
>60	Identifier	location
>61	IdentifierDeclStatement	 
>62	IdentifierDecl	location [ 2 ]
>63	PrimaryExpression	2
>64	Identifier	location
>65	IdentifierDeclType	unsigned [ 2 ]
>78	FunctionDef	HilbertCode 
>79	ParameterList	const uint32_t latitude , const uint32_t longitude
>80	Parameter	 
>81	Identifier	longitude
>82	ParameterType	const uint32_t
>83	Parameter	 
>84	Identifier	latitude
>85	ParameterType	const uint32_t
>86	ReturnType	uint64_t
>87	CompoundStatement	 
>88	ReturnStatement	 
>89	Identifier	result
>90	ForStatement	for ( int8_t index = 31 ; index >= 0 ; -- index )
>91	CompoundStatement	 
>92	IfStatement	if ( 0 != index )
>93	CompoundStatement	 
>94	ExpressionStatement	 
>95	AssignmentExpr	result <<= 1
>96	PrimaryExpression	1
>97	Identifier	result
>98	Condition	 
>99	EqualityExpression	0 != index
>100	Identifier	index
>101	PrimaryExpression	0
>102	ExpressionStatement	 
>103	AssignmentExpr	result |= ( longitude >> index ) & 1
>104	BitAndExpression	( longitude >> index ) & 1
>105	PrimaryExpression	1
>106	ShiftExpression	longitude >> index
>107	Identifier	index
>108	Identifier	longitude
>109	Identifier	result
>110	ExpressionStatement	 
>111	AssignmentExpr	result <<= 1
>112	PrimaryExpression	1
>113	Identifier	result
>114	ExpressionStatement	 
>115	AssignmentExpr	result |= ( latitude >> index ) & 1
>116	BitAndExpression	( latitude >> index ) & 1
>117	PrimaryExpression	1
>118	ShiftExpression	latitude >> index
>119	Identifier	index
>120	Identifier	latitude
>121	Identifier	result
>122	UnaryExpression	 
>123	Identifier	index
>124	IncDec	--
>125	Condition	 
>126	RelationalExpression	index >= 0
>127	PrimaryExpression	0
>128	Identifier	index
>129	ForInit	 
>130	IdentifierDeclStatement	int8_t index = 31 ;
>131	IdentifierDecl	index = 31
>132	AssignmentExpr	index = 31
>133	PrimaryExpression	31
>134	Identifier	index
>135	Identifier	index
>136	IdentifierDeclType	int8_t
>137	IdentifierDeclStatement	 
>138	IdentifierDecl	result = 0
>139	AssignmentExpr	result = 0
>140	PrimaryExpression	0
>141	Identifier	result
>142	Identifier	result
>143	IdentifierDeclType	uint64_t
>151	FunctionDef	HilbertCode 
>152	ParameterList	uint32_t * X
>153	Parameter	 
>154	Identifier	X
>155	ParameterType	uint32_t *
>156	ReturnType	void
>157	CompoundStatement	 
>158	ForStatement	for ( i = 0 ; i < 2 ; ++ i )
>159	CompoundStatement	 
>160	ExpressionStatement	 
>161	AssignmentExpr	X [ i ] ^= t
>162	Identifier	t
>163	ArrayIndexing	X [ i ]
>164	Identifier	i
>165	Identifier	X
>166	UnaryExpression	 
>167	Identifier	i
>168	IncDec	++
>169	Condition	 
>170	RelationalExpression	i < 2
>171	PrimaryExpression	2
>172	Identifier	i
>173	ForInit	 
>174	AssignmentExpr	i = 0
>175	PrimaryExpression	0
>176	Identifier	i
>177	ForStatement	for ( Q = M ; Q > 1 ; Q >>= 1 )
>178	CompoundStatement	 
>179	IfStatement	if ( condition )
>180	CompoundStatement	 
>181	ExpressionStatement	 
>182	AssignmentExpr	t ^= Q - 1
>183	AdditiveExpression	Q - 1
>184	PrimaryExpression	1
>185	Identifier	Q
>186	Identifier	t
>187	Condition	 
>188	Identifier	condition
>189	IdentifierDeclStatement	 
>190	IdentifierDecl	condition = ( X [ 2 - 1 ] & Q )
>191	AssignmentExpr	condition = ( X [ 2 - 1 ] & Q )
>192	BitAndExpression	X [ 2 - 1 ] & Q
>193	Identifier	Q
>194	ArrayIndexing	X [ 2 - 1 ]
>195	AdditiveExpression	2 - 1
>196	PrimaryExpression	1
>197	PrimaryExpression	2
>198	Identifier	X
>199	Identifier	condition
>200	Identifier	condition
>201	IdentifierDeclType	const bool
>202	AssignmentExpr	 
>203	PrimaryExpression	1
>204	Identifier	Q
>205	Condition	 
>206	RelationalExpression	Q > 1
>207	PrimaryExpression	1
>208	Identifier	Q
>209	ForInit	 
>210	AssignmentExpr	Q = M
>211	Identifier	M
>212	Identifier	Q
>213	ExpressionStatement	 
>214	AssignmentExpr	t = 0
>215	PrimaryExpression	0
>216	Identifier	t
>217	ForStatement	for ( i = 1 ; i < 2 ; ++ i )
>218	CompoundStatement	 
>219	ExpressionStatement	 
>220	AssignmentExpr	X [ i ] ^= X [ i - 1 ]
>221	ArrayIndexing	X [ i - 1 ]
>222	AdditiveExpression	i - 1
>223	PrimaryExpression	1
>224	Identifier	i
>225	Identifier	X
>226	ArrayIndexing	X [ i ]
>227	Identifier	i
>228	Identifier	X
>229	UnaryExpression	 
>230	Identifier	i
>231	IncDec	++
>232	Condition	 
>233	RelationalExpression	i < 2
>234	PrimaryExpression	2
>235	Identifier	i
>236	ForInit	 
>237	AssignmentExpr	i = 1
>238	PrimaryExpression	1
>239	Identifier	i
>240	ForStatement	for ( Q = M ; Q > 1 ; Q >>= 1 )
>241	CompoundStatement	 
>242	ForStatement	for ( i = 0 ; i < 2 ; ++ i )
>243	CompoundStatement	 
>244	IfStatement	if ( condition )
>245	ElseStatement	else
>246	CompoundStatement	 
>247	ExpressionStatement	 
>248	AssignmentExpr	X [ i ] ^= t
>249	Identifier	t
>250	ArrayIndexing	X [ i ]
>251	Identifier	i
>252	Identifier	X
>253	ExpressionStatement	 
>254	AssignmentExpr	X [ 0 ] ^= t
>255	Identifier	t
>256	ArrayIndexing	X [ 0 ]
>257	PrimaryExpression	0
>258	Identifier	X
>259	ExpressionStatement	 
>260	AssignmentExpr	t = ( X [ 0 ] ^ X [ i ] ) & P
>261	BitAndExpression	( X [ 0 ] ^ X [ i ] ) & P
>262	Identifier	P
>263	ExclusiveOrExpression	X [ 0 ] ^ X [ i ]
>264	ArrayIndexing	X [ i ]
>265	Identifier	i
>266	Identifier	X
>267	ArrayIndexing	X [ 0 ]
>268	PrimaryExpression	0
>269	Identifier	X
>270	Identifier	t
>271	CompoundStatement	 
>272	ExpressionStatement	 
>273	AssignmentExpr	X [ 0 ] ^= P
>274	Identifier	P
>275	ArrayIndexing	X [ 0 ]
>276	PrimaryExpression	0
>277	Identifier	X
>278	Condition	 
>279	Identifier	condition
>280	IdentifierDeclStatement	 
>281	IdentifierDecl	condition = ( X [ i ] & Q )
>282	AssignmentExpr	condition = ( X [ i ] & Q )
>283	BitAndExpression	X [ i ] & Q
>284	Identifier	Q
>285	ArrayIndexing	X [ i ]
>286	Identifier	i
>287	Identifier	X
>288	Identifier	condition
>289	Identifier	condition
>290	IdentifierDeclType	const bool
>291	UnaryExpression	 
>292	Identifier	i
>293	IncDec	++
>294	Condition	 
>295	RelationalExpression	i < 2
>296	PrimaryExpression	2
>297	Identifier	i
>298	ForInit	 
>299	AssignmentExpr	i = 0
>300	PrimaryExpression	0
>301	Identifier	i
>302	ExpressionStatement	 
>303	AssignmentExpr	P = Q - 1
>304	AdditiveExpression	Q - 1
>305	PrimaryExpression	1
>306	Identifier	Q
>307	Identifier	P
>308	AssignmentExpr	 
>309	PrimaryExpression	1
>310	Identifier	Q
>311	Condition	 
>312	RelationalExpression	Q > 1
>313	PrimaryExpression	1
>314	Identifier	Q
>315	ForInit	 
>316	AssignmentExpr	Q = M
>317	Identifier	M
>318	Identifier	Q
>319	IdentifierDeclStatement	 
>320	IdentifierDecl	i
>321	Identifier	i
>322	IdentifierDeclType	int
>323	IdentifierDeclStatement	 
>324	IdentifierDecl	t
>325	Identifier	t
>326	IdentifierDeclType	uint32_t
>327	IdentifierDecl	Q
>328	Identifier	Q
>329	IdentifierDeclType	uint32_t
>330	IdentifierDecl	P
>331	Identifier	P
>332	IdentifierDeclType	uint32_t
>333	IdentifierDecl	M = 1 << ( 32 - 1 )
>334	AssignmentExpr	M = 1 << ( 32 - 1 )
>335	ShiftExpression	1 << ( 32 - 1 )
>336	AdditiveExpression	32 - 1
>337	PrimaryExpression	1
>338	PrimaryExpression	32
>339	PrimaryExpression	1
>340	Identifier	M
>341	Identifier	M
>342	IdentifierDeclType	uint32_t
<3=8,4
<4=5
<5=7,6
<8=61,45,29,22,9
<9=10
<10=20,11
<11=16,12
<12=13
<13=15,14
<16=17
<17=19,18
<20=21
<22=23
<23=27,24
<24=25
<25=26
<27=28
<29=30
<30=42,31
<31=37,32
<32=36,33
<33=35,34
<37=39,38
<39=41,40
<42=44,43
<45=46
<46=58,47
<47=53,48
<48=52,49
<49=51,50
<53=55,54
<55=57,56
<58=60,59
<61=62
<62=65,64,63
<78=87,86,79
<79=83,80
<80=82,81
<83=85,84
<87=137,90,88
<88=89
<90=129,125,122,91
<91=114,110,102,92
<92=98,93
<93=94
<94=95
<95=97,96
<98=99
<99=101,100
<102=103
<103=109,104
<104=106,105
<106=108,107
<110=111
<111=113,112
<114=115
<115=121,116
<116=118,117
<118=120,119
<122=124,123
<125=126
<126=128,127
<129=130
<130=131
<131=136,135,132
<132=134,133
<137=138
<138=143,142,139
<139=141,140
<151=157,156,152
<152=153
<153=155,154
<157=323,319,240,217,213,177,158
<158=173,169,166,159
<159=160
<160=161
<161=163,162
<163=165,164
<166=168,167
<169=170
<170=172,171
<173=174
<174=176,175
<177=209,205,202,178
<178=189,179
<179=187,180
<180=181
<181=182
<182=186,183
<183=185,184
<187=188
<189=190
<190=201,200,191
<191=199,192
<192=194,193
<194=198,195
<195=197,196
<202=204,203
<205=206
<206=208,207
<209=210
<210=212,211
<213=214
<214=216,215
<217=236,232,229,218
<218=219
<219=220
<220=226,221
<221=225,222
<222=224,223
<226=228,227
<229=231,230
<232=233
<233=235,234
<236=237
<237=239,238
<240=315,311,308,241
<241=302,242
<242=298,294,291,243
<243=280,244
<244=278,271,245
<245=246
<246=259,253,247
<247=248
<248=250,249
<250=252,251
<253=254
<254=256,255
<256=258,257
<259=260
<260=270,261
<261=263,262
<263=267,264
<264=266,265
<267=269,268
<271=272
<272=273
<273=275,274
<275=277,276
<278=279
<280=281
<281=290,289,282
<282=288,283
<283=285,284
<285=287,286
<291=293,292
<294=295
<295=297,296
<298=299
<299=301,300
<302=303
<303=307,304
<304=306,305
<308=310,309
<311=312
<312=314,313
<315=316
<316=318,317
<319=320
<320=322,321
<323=333,330,327,324
<324=326,325
<327=329,328
<330=332,331
<333=342,341,334
<334=340,335
<335=339,336
<336=338,337
