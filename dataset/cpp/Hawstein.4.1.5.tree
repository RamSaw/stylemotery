>3	FunctionDef	replace1 (char * c)
>4	ParameterList	char * c
>5	Parameter	 
>6	Identifier	c
>7	ParameterType	char *
>8	ReturnType	char *
>9	CompoundStatement	 
>10	ReturnStatement	 
>11	Identifier	cc
>12	ExpressionStatement	 
>13	AssignmentExpr	cc [ p ] = '\0'
>14	PrimaryExpression	'\0'
>15	ArrayIndexing	cc [ p ]
>16	Identifier	p
>17	Identifier	cc
>18	ForStatement	for ( int i = 0 ; i < len ; ++ i )
>19	CompoundStatement	 
>20	IfStatement	if ( c [ i ] == ' ' )
>21	ElseStatement	else
>22	CompoundStatement	 
>23	ExpressionStatement	 
>24	UnaryExpression	++ p
>25	Identifier	p
>26	IncDec	++
>27	ExpressionStatement	 
>28	AssignmentExpr	cc [ p ] = c [ i ]
>29	ArrayIndexing	c [ i ]
>30	Identifier	i
>31	Identifier	c
>32	ArrayIndexing	cc [ p ]
>33	Identifier	p
>34	Identifier	cc
>35	CompoundStatement	 
>36	ExpressionStatement	 
>37	AssignmentExpr	p += 3
>38	PrimaryExpression	3
>39	Identifier	p
>40	ExpressionStatement	 
>41	AssignmentExpr	cc [ p + 2 ] = '0'
>42	PrimaryExpression	'0'
>43	ArrayIndexing	cc [ p + 2 ]
>44	AdditiveExpression	p + 2
>45	PrimaryExpression	2
>46	Identifier	p
>47	Identifier	cc
>48	ExpressionStatement	 
>49	AssignmentExpr	cc [ p + 1 ] = '2'
>50	PrimaryExpression	'2'
>51	ArrayIndexing	cc [ p + 1 ]
>52	AdditiveExpression	p + 1
>53	PrimaryExpression	1
>54	Identifier	p
>55	Identifier	cc
>56	ExpressionStatement	 
>57	AssignmentExpr	cc [ p ] = '%'
>58	PrimaryExpression	'%'
>59	ArrayIndexing	cc [ p ]
>60	Identifier	p
>61	Identifier	cc
>62	Condition	 
>63	EqualityExpression	c [ i ] == ' '
>64	PrimaryExpression	' '
>65	ArrayIndexing	c [ i ]
>66	Identifier	i
>67	Identifier	c
>68	UnaryExpression	 
>69	Identifier	i
>70	IncDec	++
>71	Condition	 
>72	RelationalExpression	i < len
>73	Identifier	len
>74	Identifier	i
>75	ForInit	 
>76	IdentifierDeclStatement	int i = 0 ;
>77	IdentifierDecl	i = 0
>78	AssignmentExpr	i = 0
>79	PrimaryExpression	0
>80	Identifier	i
>81	Identifier	i
>82	IdentifierDeclType	int
>83	IdentifierDeclStatement	 
>84	IdentifierDecl	p = 0
>85	AssignmentExpr	p = 0
>86	PrimaryExpression	0
>87	Identifier	p
>88	Identifier	p
>89	IdentifierDeclType	int
>90	IdentifierDeclStatement	 
>91	IdentifierDecl	* cc = new char [ len + 2 * cnt + 1 ]
>92	AssignmentExpr	* cc = new char [ len + 2 * cnt + 1 ]
>93	AdditiveExpression	len + 2 * cnt + 1
>94	AdditiveExpression	2 * cnt + 1
>95	PrimaryExpression	1
>96	MultiplicativeExpression	2 * cnt
>97	Identifier	cnt
>98	PrimaryExpression	2
>99	Identifier	len
>100	Identifier	cc
>101	Identifier	cc
>102	IdentifierDeclType	char *
>103	ForStatement	for ( int i = 0 ; i < len ; ++ i )
>104	CompoundStatement	 
>105	IfStatement	if ( c [ i ] == ' ' )
>106	ExpressionStatement	 
>107	UnaryExpression	++ cnt
>108	Identifier	cnt
>109	IncDec	++
>110	Condition	 
>111	EqualityExpression	c [ i ] == ' '
>112	PrimaryExpression	' '
>113	ArrayIndexing	c [ i ]
>114	Identifier	i
>115	Identifier	c
>116	UnaryExpression	 
>117	Identifier	i
>118	IncDec	++
>119	Condition	 
>120	RelationalExpression	i < len
>121	Identifier	len
>122	Identifier	i
>123	ForInit	 
>124	IdentifierDeclStatement	int i = 0 ;
>125	IdentifierDecl	i = 0
>126	AssignmentExpr	i = 0
>127	PrimaryExpression	0
>128	Identifier	i
>129	Identifier	i
>130	IdentifierDeclType	int
>131	IdentifierDeclStatement	 
>132	IdentifierDecl	cnt = 0
>133	AssignmentExpr	cnt = 0
>134	PrimaryExpression	0
>135	Identifier	cnt
>136	Identifier	cnt
>137	IdentifierDeclType	int
>138	IfStatement	if ( len == 0 )
>139	ReturnStatement	 
>140	Identifier	NULL
>141	Condition	 
>142	EqualityExpression	len == 0
>143	PrimaryExpression	0
>144	Identifier	len
>145	IdentifierDeclStatement	 
>146	IdentifierDecl	len = strlen ( c )
>147	AssignmentExpr	len = strlen ( c )
>148	CallExpression	strlen ( c )
>149	ArgumentList	c
>150	Argument	c
>151	Identifier	c
>152	Callee	strlen
>153	Identifier	strlen
>154	Identifier	len
>155	Identifier	len
>156	IdentifierDeclType	int
>157	IfStatement	if ( c == NULL )
>158	ReturnStatement	 
>159	Identifier	NULL
>160	Condition	 
>161	EqualityExpression	c == NULL
>162	Identifier	NULL
>163	Identifier	c
>179	FunctionDef	replace2 (char * c)
>180	ParameterList	char * c
>181	Parameter	 
>182	Identifier	c
>183	ParameterType	char *
>184	ReturnType	void
>185	CompoundStatement	 
>186	ForStatement	for ( int i = len - 1 ; i >= 0 ; -- i )
>187	CompoundStatement	 
>188	IfStatement	if ( c [ i ] == ' ' )
>189	ElseStatement	else
>190	CompoundStatement	 
>191	ExpressionStatement	 
>192	UnaryExpression	-- p
>193	Identifier	p
>194	IncDec	--
>195	ExpressionStatement	 
>196	AssignmentExpr	c [ p ] = c [ i ]
>197	ArrayIndexing	c [ i ]
>198	Identifier	i
>199	Identifier	c
>200	ArrayIndexing	c [ p ]
>201	Identifier	p
>202	Identifier	c
>203	CompoundStatement	 
>204	ExpressionStatement	 
>205	AssignmentExpr	p -= 3
>206	PrimaryExpression	3
>207	Identifier	p
>208	ExpressionStatement	 
>209	AssignmentExpr	c [ p - 2 ] = '%'
>210	PrimaryExpression	'%'
>211	ArrayIndexing	c [ p - 2 ]
>212	AdditiveExpression	p - 2
>213	PrimaryExpression	2
>214	Identifier	p
>215	Identifier	c
>216	ExpressionStatement	 
>217	AssignmentExpr	c [ p - 1 ] = '2'
>218	PrimaryExpression	'2'
>219	ArrayIndexing	c [ p - 1 ]
>220	AdditiveExpression	p - 1
>221	PrimaryExpression	1
>222	Identifier	p
>223	Identifier	c
>224	ExpressionStatement	 
>225	AssignmentExpr	c [ p ] = '0'
>226	PrimaryExpression	'0'
>227	ArrayIndexing	c [ p ]
>228	Identifier	p
>229	Identifier	c
>230	Condition	 
>231	EqualityExpression	c [ i ] == ' '
>232	PrimaryExpression	' '
>233	ArrayIndexing	c [ i ]
>234	Identifier	i
>235	Identifier	c
>236	UnaryExpression	 
>237	Identifier	i
>238	IncDec	--
>239	Condition	 
>240	RelationalExpression	i >= 0
>241	PrimaryExpression	0
>242	Identifier	i
>243	ForInit	 
>244	IdentifierDeclStatement	int i = len - 1 ;
>245	IdentifierDecl	i = len - 1
>246	AssignmentExpr	i = len - 1
>247	AdditiveExpression	len - 1
>248	PrimaryExpression	1
>249	Identifier	len
>250	Identifier	i
>251	Identifier	i
>252	IdentifierDeclType	int
>253	ExpressionStatement	 
>254	AssignmentExpr	c [ p -- ] = '\0'
>255	PrimaryExpression	'\0'
>256	ArrayIndexing	c [ p -- ]
>257	IncDecOp	p --
>258	IncDec	--
>259	Identifier	p
>260	Identifier	c
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	p = len + 2 * cnt
>263	AssignmentExpr	p = len + 2 * cnt
>264	AdditiveExpression	len + 2 * cnt
>265	MultiplicativeExpression	2 * cnt
>266	Identifier	cnt
>267	PrimaryExpression	2
>268	Identifier	len
>269	Identifier	p
>270	Identifier	p
>271	IdentifierDeclType	int
>272	ForStatement	for ( int i = 0 ; i < len ; ++ i )
>273	CompoundStatement	 
>274	IfStatement	if ( c [ i ] == ' ' )
>275	ExpressionStatement	 
>276	UnaryExpression	++ cnt
>277	Identifier	cnt
>278	IncDec	++
>279	Condition	 
>280	EqualityExpression	c [ i ] == ' '
>281	PrimaryExpression	' '
>282	ArrayIndexing	c [ i ]
>283	Identifier	i
>284	Identifier	c
>285	UnaryExpression	 
>286	Identifier	i
>287	IncDec	++
>288	Condition	 
>289	RelationalExpression	i < len
>290	Identifier	len
>291	Identifier	i
>292	ForInit	 
>293	IdentifierDeclStatement	int i = 0 ;
>294	IdentifierDecl	i = 0
>295	AssignmentExpr	i = 0
>296	PrimaryExpression	0
>297	Identifier	i
>298	Identifier	i
>299	IdentifierDeclType	int
>300	IdentifierDeclStatement	 
>301	IdentifierDecl	cnt = 0
>302	AssignmentExpr	cnt = 0
>303	PrimaryExpression	0
>304	Identifier	cnt
>305	Identifier	cnt
>306	IdentifierDeclType	int
>307	IfStatement	if ( len == 0 )
>308	ReturnStatement	 
>309	Condition	 
>310	EqualityExpression	len == 0
>311	PrimaryExpression	0
>312	Identifier	len
>313	IdentifierDeclStatement	 
>314	IdentifierDecl	len = strlen ( c )
>315	AssignmentExpr	len = strlen ( c )
>316	CallExpression	strlen ( c )
>317	ArgumentList	c
>318	Argument	c
>319	Identifier	c
>320	Callee	strlen
>321	Identifier	strlen
>322	Identifier	len
>323	Identifier	len
>324	IdentifierDeclType	int
>325	IfStatement	if ( c == NULL )
>326	ReturnStatement	 
>327	Condition	 
>328	EqualityExpression	c == NULL
>329	Identifier	NULL
>330	Identifier	c
>344	FunctionDef	main ()
>345	ParameterList	 
>346	ReturnType	int
>347	CompoundStatement	 
>348	ReturnStatement	 
>349	PrimaryExpression	0
>350	ExpressionStatement	 
>351	ShiftExpression	cout << c << endl
>352	ShiftExpression	c << endl
>353	Identifier	endl
>354	Identifier	c
>355	Identifier	cout
>356	ExpressionStatement	 
>357	CallExpression	replace2 ( c )
>358	ArgumentList	c
>359	Argument	c
>360	Identifier	c
>361	Callee	replace2
>362	Identifier	replace2
>363	ExpressionStatement	 
>364	ShiftExpression	cout << replace1 ( c ) << endl
>365	ShiftExpression	replace1 ( c ) << endl
>366	Identifier	endl
>367	CallExpression	replace1 ( c )
>368	ArgumentList	c
>369	Argument	c
>370	Identifier	c
>371	Callee	replace1
>372	Identifier	replace1
>373	Identifier	cout
>374	IdentifierDeclStatement	 
>375	IdentifierDecl	c [ len ] = \"\"
>376	AssignmentExpr	c [ len ] = \"\"
>377	PrimaryExpression	\"\"
>378	Identifier	len
>379	Identifier	len
>380	Identifier	c
>381	IdentifierDeclType	char [ len ]
>382	IdentifierDeclStatement	 
>383	IdentifierDecl	len = 100
>384	AssignmentExpr	len = 100
>385	PrimaryExpression	100
>386	Identifier	len
>387	Identifier	len
>388	IdentifierDeclType	const int
<3=9,8,4
<4=5
<5=7,6
<9=157,145,138,131,103,90,83,18,12,10
<10=11
<12=13
<13=15,14
<15=17,16
<18=75,71,68,19
<19=20
<20=62,35,21
<21=22
<22=27,23
<23=24
<24=26,25
<27=28
<28=32,29
<29=31,30
<32=34,33
<35=56,48,40,36
<36=37
<37=39,38
<40=41
<41=43,42
<43=47,44
<44=46,45
<48=49
<49=51,50
<51=55,52
<52=54,53
<56=57
<57=59,58
<59=61,60
<62=63
<63=65,64
<65=67,66
<68=70,69
<71=72
<72=74,73
<75=76
<76=77
<77=82,81,78
<78=80,79
<83=84
<84=89,88,85
<85=87,86
<90=91
<91=102,101,92
<92=100,93
<93=99,94
<94=96,95
<96=98,97
<103=123,119,116,104
<104=105
<105=110,106
<106=107
<107=109,108
<110=111
<111=113,112
<113=115,114
<116=118,117
<119=120
<120=122,121
<123=124
<124=125
<125=130,129,126
<126=128,127
<131=132
<132=137,136,133
<133=135,134
<138=141,139
<139=140
<141=142
<142=144,143
<145=146
<146=156,155,147
<147=154,148
<148=152,149
<149=150
<150=151
<152=153
<157=160,158
<158=159
<160=161
<161=163,162
<179=185,184,180
<180=181
<181=183,182
<185=325,313,307,300,272,261,253,186
<186=243,239,236,187
<187=188
<188=230,203,189
<189=190
<190=195,191
<191=192
<192=194,193
<195=196
<196=200,197
<197=199,198
<200=202,201
<203=224,216,208,204
<204=205
<205=207,206
<208=209
<209=211,210
<211=215,212
<212=214,213
<216=217
<217=219,218
<219=223,220
<220=222,221
<224=225
<225=227,226
<227=229,228
<230=231
<231=233,232
<233=235,234
<236=238,237
<239=240
<240=242,241
<243=244
<244=245
<245=252,251,246
<246=250,247
<247=249,248
<253=254
<254=256,255
<256=260,257
<257=259,258
<261=262
<262=271,270,263
<263=269,264
<264=268,265
<265=267,266
<272=292,288,285,273
<273=274
<274=279,275
<275=276
<276=278,277
<279=280
<280=282,281
<282=284,283
<285=287,286
<288=289
<289=291,290
<292=293
<293=294
<294=299,298,295
<295=297,296
<300=301
<301=306,305,302
<302=304,303
<307=309,308
<309=310
<310=312,311
<313=314
<314=324,323,315
<315=322,316
<316=320,317
<317=318
<318=319
<320=321
<325=327,326
<327=328
<328=330,329
<344=347,346,345
<347=382,374,363,356,350,348
<348=349
<350=351
<351=355,352
<352=354,353
<356=357
<357=361,358
<358=359
<359=360
<361=362
<363=364
<364=373,365
<365=367,366
<367=371,368
<368=369
<369=370
<371=372
<374=375
<375=381,380,379,376
<376=378,377
<382=383
<383=388,387,384
<384=386,385
