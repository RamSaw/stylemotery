>14	FunctionDef	line ()
>15	ParameterList	 
>16	CompoundStatement	 
>20	FunctionDef	line (point p , point q)
>21	ParameterList	point p , point q
>22	Parameter	 
>23	Identifier	q
>24	ParameterType	point
>25	Parameter	 
>26	Identifier	p
>27	ParameterType	point
>28	CompoundStatement	 
>29	IfStatement	if ( abs ( p . x - q . x ) > epsilon )
>30	ElseStatement	else
>31	CompoundStatement	 
>32	ExpressionStatement	 
>33	AssignmentExpr	intercept = p . x
>34	MemberAccess	p . x
>35	Identifier	x
>36	Identifier	p
>37	Identifier	intercept
>38	ExpressionStatement	 
>39	AssignmentExpr	bslope = false
>40	Identifier	false
>41	Identifier	bslope
>42	CompoundStatement	 
>43	ExpressionStatement	 
>44	AssignmentExpr	bslope = true
>45	Identifier	true
>46	Identifier	bslope
>47	ExpressionStatement	 
>48	AssignmentExpr	intercept = p . y - slope * p . x
>49	AdditiveExpression	p . y - slope * p . x
>50	MultiplicativeExpression	slope * p . x
>51	MemberAccess	p . x
>52	Identifier	x
>53	Identifier	p
>54	Identifier	slope
>55	MemberAccess	p . y
>56	Identifier	y
>57	Identifier	p
>58	Identifier	intercept
>59	ExpressionStatement	 
>60	AssignmentExpr	slope = ( p . y - q . y ) / ( p . x - q . x )
>61	MultiplicativeExpression	( p . y - q . y ) / ( p . x - q . x )
>62	AdditiveExpression	p . x - q . x
>63	MemberAccess	q . x
>64	Identifier	x
>65	Identifier	q
>66	MemberAccess	p . x
>67	Identifier	x
>68	Identifier	p
>69	AdditiveExpression	p . y - q . y
>70	MemberAccess	q . y
>71	Identifier	y
>72	Identifier	q
>73	MemberAccess	p . y
>74	Identifier	y
>75	Identifier	p
>76	Identifier	slope
>77	Condition	 
>78	RelationalExpression	abs ( p . x - q . x ) > epsilon
>79	Identifier	epsilon
>80	CallExpression	abs ( p . x - q . x )
>81	ArgumentList	p . x - q . x
>82	Argument	p . x - q . x
>83	AdditiveExpression	p . x - q . x
>84	MemberAccess	q . x
>85	Identifier	x
>86	Identifier	q
>87	MemberAccess	p . x
>88	Identifier	x
>89	Identifier	p
>90	Callee	abs
>91	Identifier	abs
>92	ExpressionStatement	 
>93	AssignmentExpr	epsilon = 0.0001
>94	PrimaryExpression	0.0001
>95	Identifier	epsilon
>112	FunctionDef	print ()
>113	ParameterList	 
>114	ReturnType	void
>115	CompoundStatement	 
>116	ExpressionStatement	 
>117	ShiftExpression	cout << \"y = \" << slope << \"x + \" << intercept << endl
>118	ShiftExpression	\"y = \" << slope << \"x + \" << intercept << endl
>119	ShiftExpression	slope << \"x + \" << intercept << endl
>120	ShiftExpression	\"x + \" << intercept << endl
>121	ShiftExpression	intercept << endl
>122	Identifier	endl
>123	Identifier	intercept
>124	PrimaryExpression	\"x + \"
>125	Identifier	slope
>126	PrimaryExpression	\"y = \"
>127	Identifier	cout
>131	FunctionDef	operator < (const line & l1 , const line & l2)
>132	ParameterList	const line & l1 , const line & l2
>133	Parameter	 
>134	Identifier	l2
>135	ParameterType	const line &
>136	Parameter	 
>137	Identifier	l1
>138	ParameterType	const line &
>139	ReturnType	bool
>140	CompoundStatement	 
>141	ReturnStatement	 
>142	RelationalExpression	l1 . slope < l2 . slope
>143	MemberAccess	l2 . slope
>144	Identifier	slope
>145	Identifier	l2
>146	MemberAccess	l1 . slope
>147	Identifier	slope
>148	Identifier	l1
>156	FunctionDef	equal (double a , double b)
>157	ParameterList	double a , double b
>158	Parameter	 
>159	Identifier	b
>160	ParameterType	double
>161	Parameter	 
>162	Identifier	a
>163	ParameterType	double
>164	ReturnType	bool
>165	CompoundStatement	 
>166	ReturnStatement	 
>167	RelationalExpression	abs ( a - b ) < 0.0001
>168	PrimaryExpression	0.0001
>169	CallExpression	abs ( a - b )
>170	ArgumentList	a - b
>171	Argument	a - b
>172	AdditiveExpression	a - b
>173	Identifier	b
>174	Identifier	a
>175	Callee	abs
>176	Identifier	abs
>183	FunctionDef	operator == (const line & l1 , const line & l2)
>184	ParameterList	const line & l1 , const line & l2
>185	Parameter	 
>186	Identifier	l2
>187	ParameterType	const line &
>188	Parameter	 
>189	Identifier	l1
>190	ParameterType	const line &
>191	ReturnType	bool
>192	CompoundStatement	 
>193	ReturnStatement	 
>194	Identifier	false
>195	IfStatement	if ( l1 . bslope == l2 . bslope && equal ( l1 . slope , l2 . slope ) && equal ( l1 . intercept , l2 . intercept ) )
>196	ReturnStatement	 
>197	Identifier	true
>198	Condition	 
>199	AndExpression	l1 . bslope == l2 . bslope && equal ( l1 . slope , l2 . slope ) && equal ( l1 . intercept , l2 . intercept )
>200	AndExpression	equal ( l1 . slope , l2 . slope ) && equal ( l1 . intercept , l2 . intercept )
>201	CallExpression	equal ( l1 . intercept , l2 . intercept )
>202	ArgumentList	l1 . intercept
>203	Argument	l2 . intercept
>204	MemberAccess	l2 . intercept
>205	Identifier	intercept
>206	Identifier	l2
>207	Argument	l1 . intercept
>208	MemberAccess	l1 . intercept
>209	Identifier	intercept
>210	Identifier	l1
>211	Callee	equal
>212	Identifier	equal
>213	CallExpression	equal ( l1 . slope , l2 . slope )
>214	ArgumentList	l1 . slope
>215	Argument	l2 . slope
>216	MemberAccess	l2 . slope
>217	Identifier	slope
>218	Identifier	l2
>219	Argument	l1 . slope
>220	MemberAccess	l1 . slope
>221	Identifier	slope
>222	Identifier	l1
>223	Callee	equal
>224	Identifier	equal
>225	EqualityExpression	l1 . bslope == l2 . bslope
>226	MemberAccess	l2 . bslope
>227	Identifier	bslope
>228	Identifier	l2
>229	MemberAccess	l1 . bslope
>230	Identifier	bslope
>231	Identifier	l1
>246	FunctionDef	find_best_line (point * p , int point_num)
>247	ParameterList	point * p , int point_num
>248	Parameter	 
>249	Identifier	point_num
>250	ParameterType	int
>251	Parameter	 
>252	Identifier	p
>253	ParameterType	point *
>254	ReturnType	line
>255	CompoundStatement	 
>256	ReturnStatement	 
>257	Identifier	bestline
>258	ExpressionStatement	 
>259	ShiftExpression	cout << line_count [ bestline ] << endl
>260	ShiftExpression	line_count [ bestline ] << endl
>261	Identifier	endl
>262	ArrayIndexing	line_count [ bestline ]
>263	Identifier	bestline
>264	Identifier	line_count
>265	Identifier	cout
>266	ForStatement	for ( int i = 0 ; i < point_num ; ++ i )
>267	CompoundStatement	 
>268	ForStatement	for ( int j = i + 1 ; j < point_num ; ++ j )
>269	CompoundStatement	 
>270	IfStatement	if ( first )
>271	ElseStatement	else
>272	CompoundStatement	 
>273	IfStatement	if ( line_count [ l ] > line_count [ bestline ] )
>274	ExpressionStatement	 
>275	AssignmentExpr	bestline = l
>276	Identifier	l
>277	Identifier	bestline
>278	Condition	 
>279	RelationalExpression	line_count [ l ] > line_count [ bestline ]
>280	ArrayIndexing	line_count [ bestline ]
>281	Identifier	bestline
>282	Identifier	line_count
>283	ArrayIndexing	line_count [ l ]
>284	Identifier	l
>285	Identifier	line_count
>286	CompoundStatement	 
>287	ExpressionStatement	 
>288	AssignmentExpr	first = false
>289	Identifier	false
>290	Identifier	first
>291	ExpressionStatement	 
>292	AssignmentExpr	bestline = l
>293	Identifier	l
>294	Identifier	bestline
>295	Condition	 
>296	Identifier	first
>297	ExpressionStatement	 
>298	AssignmentExpr	line_count [ l ] = line_count [ l ] + 1
>299	AdditiveExpression	line_count [ l ] + 1
>300	PrimaryExpression	1
>301	ArrayIndexing	line_count [ l ]
>302	Identifier	l
>303	Identifier	line_count
>304	ArrayIndexing	line_count [ l ]
>305	Identifier	l
>306	Identifier	line_count
>307	IfStatement	if ( line_count . find ( l ) == line_count . end ( ) )
>308	ExpressionStatement	 
>309	AssignmentExpr	line_count [ l ] = 0
>310	PrimaryExpression	0
>311	ArrayIndexing	line_count [ l ]
>312	Identifier	l
>313	Identifier	line_count
>314	Condition	 
>315	EqualityExpression	line_count . find ( l ) == line_count . end ( )
>316	CallExpression	line_count . end ( )
>317	ArgumentList	 
>318	Callee	line_count . end
>319	MemberAccess	line_count . end
>320	Identifier	end
>321	Identifier	line_count
>322	CallExpression	line_count . find ( l )
>323	ArgumentList	l
>324	Argument	l
>325	Identifier	l
>326	Callee	line_count . find
>327	MemberAccess	line_count . find
>328	Identifier	find
>329	Identifier	line_count
>330	IdentifierDeclStatement	 
>331	IdentifierDecl	l ( p [ i ] , p [ j ] )
>332	Expression	p [ i ] , p [ j ]
>333	ArrayIndexing	p [ j ]
>334	Identifier	j
>335	Identifier	p
>336	ArrayIndexing	p [ i ]
>337	Identifier	i
>338	Identifier	p
>339	Identifier	l
>340	IdentifierDeclType	line
>341	UnaryExpression	 
>342	Identifier	j
>343	IncDec	++
>344	Condition	 
>345	RelationalExpression	j < point_num
>346	Identifier	point_num
>347	Identifier	j
>348	ForInit	 
>349	IdentifierDeclStatement	int j = i + 1 ;
>350	IdentifierDecl	j = i + 1
>351	AssignmentExpr	j = i + 1
>352	AdditiveExpression	i + 1
>353	PrimaryExpression	1
>354	Identifier	i
>355	Identifier	j
>356	Identifier	j
>357	IdentifierDeclType	int
>358	UnaryExpression	 
>359	Identifier	i
>360	IncDec	++
>361	Condition	 
>362	RelationalExpression	i < point_num
>363	Identifier	point_num
>364	Identifier	i
>365	ForInit	 
>366	IdentifierDeclStatement	int i = 0 ;
>367	IdentifierDecl	i = 0
>368	AssignmentExpr	i = 0
>369	PrimaryExpression	0
>370	Identifier	i
>371	Identifier	i
>372	IdentifierDeclType	int
>373	IdentifierDeclStatement	 
>374	IdentifierDecl	line_count
>375	Identifier	line_count
>376	IdentifierDeclType	map < line , int >
>377	IdentifierDeclStatement	 
>378	IdentifierDecl	first = true
>379	AssignmentExpr	first = true
>380	Identifier	true
>381	Identifier	true
>382	Identifier	first
>383	IdentifierDeclType	bool
>384	IdentifierDeclStatement	 
>385	IdentifierDecl	bestline
>386	Identifier	bestline
>387	IdentifierDeclType	line
>406	FunctionDef	main ()
>407	ParameterList	 
>408	ReturnType	int
>409	CompoundStatement	 
>410	ReturnStatement	 
>411	PrimaryExpression	0
>412	ExpressionStatement	 
>413	CallExpression	l . print ( )
>414	ArgumentList	 
>415	Callee	l . print
>416	MemberAccess	l . print
>417	Identifier	print
>418	Identifier	l
>419	IdentifierDeclStatement	 
>420	IdentifierDecl	l = find_best_line ( p , point_num )
>421	AssignmentExpr	l = find_best_line ( p , point_num )
>422	CallExpression	find_best_line ( p , point_num )
>423	ArgumentList	p
>424	Argument	point_num
>425	Identifier	point_num
>426	Argument	p
>427	Identifier	p
>428	Callee	find_best_line
>429	Identifier	find_best_line
>430	Identifier	l
>431	Identifier	l
>432	IdentifierDeclType	line
>433	ForStatement	for ( int i = 0 ; i < point_num ; ++ i )
>434	CompoundStatement	 
>435	ExpressionStatement	 
>436	ShiftExpression	cout << p [ i ] . x << \" \" << p [ i ] . y << endl
>437	ShiftExpression	p [ i ] . x << \" \" << p [ i ] . y << endl
>438	ShiftExpression	\" \" << p [ i ] . y << endl
>439	ShiftExpression	p [ i ] . y << endl
>440	Identifier	endl
>441	MemberAccess	p [ i ] . y
>442	Identifier	y
>443	ArrayIndexing	p [ i ]
>444	Identifier	i
>445	Identifier	p
>446	PrimaryExpression	\" \"
>447	MemberAccess	p [ i ] . x
>448	Identifier	x
>449	ArrayIndexing	p [ i ]
>450	Identifier	i
>451	Identifier	p
>452	Identifier	cout
>453	ExpressionStatement	 
>454	AssignmentExpr	p [ i ] . y = rand ( ) / double ( RAND_MAX ) * graph_size
>455	MultiplicativeExpression	rand ( ) / double ( RAND_MAX ) * graph_size
>456	MultiplicativeExpression	double ( RAND_MAX ) * graph_size
>457	Identifier	graph_size
>458	CallExpression	double ( RAND_MAX )
>459	ArgumentList	RAND_MAX
>460	Argument	RAND_MAX
>461	Identifier	RAND_MAX
>462	Callee	double
>463	Identifier	double
>464	CallExpression	rand ( )
>465	ArgumentList	 
>466	Callee	rand
>467	Identifier	rand
>468	MemberAccess	p [ i ] . y
>469	Identifier	y
>470	ArrayIndexing	p [ i ]
>471	Identifier	i
>472	Identifier	p
>473	ExpressionStatement	 
>474	AssignmentExpr	p [ i ] . x = rand ( ) / double ( RAND_MAX ) * graph_size
>475	MultiplicativeExpression	rand ( ) / double ( RAND_MAX ) * graph_size
>476	MultiplicativeExpression	double ( RAND_MAX ) * graph_size
>477	Identifier	graph_size
>478	CallExpression	double ( RAND_MAX )
>479	ArgumentList	RAND_MAX
>480	Argument	RAND_MAX
>481	Identifier	RAND_MAX
>482	Callee	double
>483	Identifier	double
>484	CallExpression	rand ( )
>485	ArgumentList	 
>486	Callee	rand
>487	Identifier	rand
>488	MemberAccess	p [ i ] . x
>489	Identifier	x
>490	ArrayIndexing	p [ i ]
>491	Identifier	i
>492	Identifier	p
>493	UnaryExpression	 
>494	Identifier	i
>495	IncDec	++
>496	Condition	 
>497	RelationalExpression	i < point_num
>498	Identifier	point_num
>499	Identifier	i
>500	ForInit	 
>501	IdentifierDeclStatement	int i = 0 ;
>502	IdentifierDecl	i = 0
>503	AssignmentExpr	i = 0
>504	PrimaryExpression	0
>505	Identifier	i
>506	Identifier	i
>507	IdentifierDeclType	int
>508	IdentifierDeclStatement	 
>509	IdentifierDecl	* p = new point [ point_num ]
>510	AssignmentExpr	* p = new point [ point_num ]
>511	Identifier	point_num
>512	Identifier	point_num
>513	Identifier	p
>514	IdentifierDeclType	point *
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	point_num = 500
>517	AssignmentExpr	point_num = 500
>518	PrimaryExpression	500
>519	Identifier	point_num
>520	Identifier	point_num
>521	IdentifierDeclType	int
>522	IdentifierDeclStatement	 
>523	IdentifierDecl	graph_size = 10
>524	AssignmentExpr	graph_size = 10
>525	PrimaryExpression	10
>526	Identifier	graph_size
>527	Identifier	graph_size
>528	IdentifierDeclType	int
>529	ExpressionStatement	 
>530	CallExpression	srand ( ( unsigned ) time ( 0 ) )
>531	ArgumentList	( unsigned ) time ( 0 )
>532	Argument	( unsigned ) time ( 0 )
>533	CastExpression	( unsigned ) time ( 0 )
>534	CallExpression	time ( 0 )
>535	ArgumentList	0
>536	Argument	0
>537	PrimaryExpression	0
>538	Callee	time
>539	Identifier	time
>540	CastTarget	unsigned
>541	Callee	srand
>542	Identifier	srand
<14=16,15
<20=28,21
<21=25,22
<22=24,23
<25=27,26
<28=92,29
<29=77,42,30
<30=31
<31=38,32
<32=33
<33=37,34
<34=36,35
<38=39
<39=41,40
<42=59,47,43
<43=44
<44=46,45
<47=48
<48=58,49
<49=55,50
<50=54,51
<51=53,52
<55=57,56
<59=60
<60=76,61
<61=69,62
<62=66,63
<63=65,64
<66=68,67
<69=73,70
<70=72,71
<73=75,74
<77=78
<78=80,79
<80=90,81
<81=82
<82=83
<83=87,84
<84=86,85
<87=89,88
<90=91
<92=93
<93=95,94
<112=115,114,113
<115=116
<116=117
<117=127,118
<118=126,119
<119=125,120
<120=124,121
<121=123,122
<131=140,139,132
<132=136,133
<133=135,134
<136=138,137
<140=141
<141=142
<142=146,143
<143=145,144
<146=148,147
<156=165,164,157
<157=161,158
<158=160,159
<161=163,162
<165=166
<166=167
<167=169,168
<169=175,170
<170=171
<171=172
<172=174,173
<175=176
<183=192,191,184
<184=188,185
<185=187,186
<188=190,189
<192=195,193
<193=194
<195=198,196
<196=197
<198=199
<199=225,200
<200=213,201
<201=211,202
<202=207,203
<203=204
<204=206,205
<207=208
<208=210,209
<211=212
<213=223,214
<214=219,215
<215=216
<216=218,217
<219=220
<220=222,221
<223=224
<225=229,226
<226=228,227
<229=231,230
<246=255,254,247
<247=251,248
<248=250,249
<251=253,252
<255=384,377,373,266,258,256
<256=257
<258=259
<259=265,260
<260=262,261
<262=264,263
<266=365,361,358,267
<267=268
<268=348,344,341,269
<269=330,307,297,270
<270=295,286,271
<271=272
<272=273
<273=278,274
<274=275
<275=277,276
<278=279
<279=283,280
<280=282,281
<283=285,284
<286=291,287
<287=288
<288=290,289
<291=292
<292=294,293
<295=296
<297=298
<298=304,299
<299=301,300
<301=303,302
<304=306,305
<307=314,308
<308=309
<309=311,310
<311=313,312
<314=315
<315=322,316
<316=318,317
<318=319
<319=321,320
<322=326,323
<323=324
<324=325
<326=327
<327=329,328
<330=331
<331=340,339,332
<332=336,333
<333=335,334
<336=338,337
<341=343,342
<344=345
<345=347,346
<348=349
<349=350
<350=357,356,351
<351=355,352
<352=354,353
<358=360,359
<361=362
<362=364,363
<365=366
<366=367
<367=372,371,368
<368=370,369
<373=374
<374=376,375
<377=378
<378=383,382,379
<379=381,380
<384=385
<385=387,386
<406=409,408,407
<409=529,522,515,508,433,419,412,410
<410=411
<412=413
<413=415,414
<415=416
<416=418,417
<419=420
<420=432,431,421
<421=430,422
<422=428,423
<423=426,424
<424=425
<426=427
<428=429
<433=500,496,493,434
<434=473,453,435
<435=436
<436=452,437
<437=447,438
<438=446,439
<439=441,440
<441=443,442
<443=445,444
<447=449,448
<449=451,450
<453=454
<454=468,455
<455=464,456
<456=458,457
<458=462,459
<459=460
<460=461
<462=463
<464=466,465
<466=467
<468=470,469
<470=472,471
<473=474
<474=488,475
<475=484,476
<476=478,477
<478=482,479
<479=480
<480=481
<482=483
<484=486,485
<486=487
<488=490,489
<490=492,491
<493=495,494
<496=497
<497=499,498
<500=501
<501=502
<502=507,506,503
<503=505,504
<508=509
<509=514,513,510
<510=512,511
<515=516
<516=521,520,517
<517=519,518
<522=523
<523=528,527,524
<524=526,525
<529=530
<530=541,531
<531=532
<532=533
<533=540,534
<534=538,535
<535=536
<536=537
<538=539
<541=542
