>11	FunctionDef	_retrieveSkeletalXML (const std 
>12	ParameterList	const std 
>13	Parameter	 
>14	Identifier	keepEmpty
>15	ParameterType	bool
>16	Parameter	 
>17	Identifier	name
>18	ParameterType	const std 
>19	ReturnType	static XMLDocument *
>20	CompoundStatement	 
>21	ReturnStatement	 
>22	Identifier	doc
>23	IfStatement	if ( doc )
>24	ExpressionStatement	 
>25	AssignmentExpr	skelCache [ name ] = doc
>26	Identifier	doc
>27	ArrayIndexing	skelCache [ name ]
>28	Identifier	name
>29	Identifier	skelCache
>30	Condition	 
>31	Identifier	doc
>32	IdentifierDeclStatement	 
>33	IdentifierDecl	* doc = readXML ( name , NULL , keepEmpty )
>34	AssignmentExpr	* doc = readXML ( name , NULL , keepEmpty )
>35	CallExpression	readXML ( name , NULL , keepEmpty )
>36	ArgumentList	name
>37	Argument	keepEmpty
>38	Identifier	keepEmpty
>39	Argument	NULL
>40	Identifier	NULL
>41	Argument	name
>42	Identifier	name
>43	Callee	readXML
>44	Identifier	readXML
>45	Identifier	doc
>46	Identifier	doc
>47	IdentifierDeclType	XMLDocument *
>48	IfStatement	if ( it != skelCache . end ( ) )
>49	ReturnStatement	 
>50	PtrMemberAccess	it -> second
>51	Identifier	second
>52	Identifier	it
>53	Condition	 
>54	EqualityExpression	it != skelCache . end ( )
>55	CallExpression	skelCache . end ( )
>56	ArgumentList	 
>57	Callee	skelCache . end
>58	MemberAccess	skelCache . end
>59	Identifier	end
>60	Identifier	skelCache
>61	Identifier	it
>62	IdentifierDeclStatement	 
>63	IdentifierDecl	it = skelCache . find ( name )
>64	AssignmentExpr	it = skelCache . find ( name )
>65	CallExpression	skelCache . find ( name )
>66	ArgumentList	name
>67	Argument	name
>68	Identifier	name
>69	Callee	skelCache . find
>70	MemberAccess	skelCache . find
>71	Identifier	find
>72	Identifier	skelCache
>73	Identifier	it
>74	Identifier	it
>75	IdentifierDeclType	std 
>92	FunctionDef	SkeletalSprite 
>93	ParameterList	 
>94	ReturnType	void
>95	CompoundStatement	 
>96	ExpressionStatement	 
>97	CallExpression	skelCache . clear ( )
>98	ArgumentList	 
>99	Callee	skelCache . clear
>100	MemberAccess	skelCache . clear
>101	Identifier	clear
>102	Identifier	skelCache
>103	ExpressionStatement	 
>104	PtrMemberAccess	it -> second
>105	Identifier	second
>106	Identifier	it
>107	ForStatement	for ( std 
>108	Statement	 
>109	UnaryExpression	 
>110	Identifier	it
>111	IncDec	++
>112	Condition	 
>113	EqualityExpression	it != skelCache . end ( )
>114	CallExpression	skelCache . end ( )
>115	ArgumentList	 
>116	Callee	skelCache . end
>117	MemberAccess	skelCache . end
>118	Identifier	end
>119	Identifier	skelCache
>120	Identifier	it
>121	ForInit	 
>122	IdentifierDeclStatement	std 
>123	IdentifierDecl	it = skelCache . begin ( )
>124	AssignmentExpr	it = skelCache . begin ( )
>125	CallExpression	skelCache . begin ( )
>126	ArgumentList	 
>127	Callee	skelCache . begin
>128	MemberAccess	skelCache . begin
>129	Identifier	begin
>130	Identifier	skelCache
>131	Identifier	it
>132	Identifier	it
>133	IdentifierDeclType	std 
>141	FunctionDef	SkeletalKeyframe 
>142	ParameterList	SkeletalKeyframe * copy
>143	Parameter	 
>144	Identifier	copy
>145	ParameterType	SkeletalKeyframe *
>146	ReturnType	void
>147	CompoundStatement	 
>148	ExpressionStatement	 
>149	AssignmentExpr	this -> t = t
>150	Identifier	t
>151	PtrMemberAccess	this -> t
>152	Identifier	t
>153	Identifier	this
>154	ExpressionStatement	 
>155	AssignmentExpr	( * this ) = ( * copy )
>156	UnaryOp	* copy
>157	Identifier	copy
>158	UnaryOperator	*
>159	UnaryOp	* this
>160	Identifier	this
>161	UnaryOperator	*
>162	IdentifierDeclStatement	 
>163	IdentifierDecl	t = this -> t
>164	AssignmentExpr	t = this -> t
>165	PtrMemberAccess	this -> t
>166	Identifier	t
>167	Identifier	this
>168	Identifier	t
>169	Identifier	t
>170	IdentifierDeclType	float
>171	IfStatement	if ( ! copy )
>172	ReturnStatement	 
>173	Condition	 
>174	UnaryOp	! copy
>175	Identifier	copy
>176	UnaryOperator	!
>186	FunctionDef	Bone 
>187	ParameterList	 
>188	CompoundStatement	 
>189	ExpressionStatement	 
>190	AssignmentExpr	reverse = false
>191	Identifier	false
>192	Identifier	reverse
>193	ExpressionStatement	 
>194	AssignmentExpr	minDist = maxDist = 128
>195	AssignmentExpr	maxDist = 128
>196	PrimaryExpression	128
>197	Identifier	maxDist
>198	Identifier	minDist
>199	ExpressionStatement	 
>200	AssignmentExpr	segmentChain = 0
>201	PrimaryExpression	0
>202	Identifier	segmentChain
>203	ExpressionStatement	 
>204	AssignmentExpr	rbp = 0
>205	PrimaryExpression	0
>206	Identifier	rbp
>207	ExpressionStatement	 
>208	AssignmentExpr	boneIdx = pidx = - 1
>209	AssignmentExpr	pidx = - 1
>210	UnaryOp	- 1
>211	PrimaryExpression	1
>212	UnaryOperator	-
>213	Identifier	pidx
>214	Identifier	boneIdx
>215	ExpressionStatement	 
>216	AssignmentExpr	originalScale = Vector ( 1 , 1 )
>217	CallExpression	Vector ( 1 , 1 )
>218	ArgumentList	1
>219	Argument	1
>220	PrimaryExpression	1
>221	Argument	1
>222	PrimaryExpression	1
>223	Callee	Vector
>224	Identifier	Vector
>225	Identifier	originalScale
>226	ExpressionStatement	 
>227	AssignmentExpr	animated = ANIM_ALL
>228	Identifier	ANIM_ALL
>229	Identifier	animated
>230	ExpressionStatement	 
>231	AssignmentExpr	generateCollisionMask = true
>232	Identifier	true
>233	Identifier	generateCollisionMask
>234	ExpressionStatement	 
>235	AssignmentExpr	skeleton = 0
>236	PrimaryExpression	0
>237	Identifier	skeleton
>238	ExpressionStatement	 
>239	AssignmentExpr	fileRenderQuad = true
>240	Identifier	true
>241	Identifier	fileRenderQuad
>242	ExpressionStatement	 
>243	CallExpression	addType ( SCO_BONE )
>244	ArgumentList	SCO_BONE
>245	Argument	SCO_BONE
>246	Identifier	SCO_BONE
>247	Callee	addType
>248	Identifier	addType
>269	FunctionDef	Bone 
>270	ParameterList	 
>271	ReturnType	void
>272	CompoundStatement	 
>273	ExpressionStatement	 
>274	CallExpression	segments . clear ( )
>275	ArgumentList	 
>276	Callee	segments . clear
>277	MemberAccess	segments . clear
>278	Identifier	clear
>279	Identifier	segments
>280	ForStatement	for ( int i = 0 ; i < segments . size ( ) ; i ++ )
>281	CompoundStatement	 
>282	ExpressionStatement	 
>283	AssignmentExpr	segments [ i ] -> alpha = 0
>284	PrimaryExpression	0
>285	PtrMemberAccess	segments [ i ] -> alpha
>286	Identifier	alpha
>287	ArrayIndexing	segments [ i ]
>288	Identifier	i
>289	Identifier	segments
>290	ExpressionStatement	 
>291	CallExpression	segments [ i ] -> setDecayRate ( 10 )
>292	ArgumentList	10
>293	Argument	10
>294	PrimaryExpression	10
>295	Callee	segments [ i ] -> setDecayRate
>296	PtrMemberAccess	segments [ i ] -> setDecayRate
>297	Identifier	setDecayRate
>298	ArrayIndexing	segments [ i ]
>299	Identifier	i
>300	Identifier	segments
>301	ExpressionStatement	 
>302	CallExpression	segments [ i ] -> setLife ( 1.0 )
>303	ArgumentList	1.0
>304	Argument	1.0
>305	PrimaryExpression	1.0
>306	Callee	segments [ i ] -> setLife
>307	PtrMemberAccess	segments [ i ] -> setLife
>308	Identifier	setLife
>309	ArrayIndexing	segments [ i ]
>310	Identifier	i
>311	Identifier	segments
>312	IncDecOp	 
>313	IncDec	++
>314	Identifier	i
>315	Condition	 
>316	RelationalExpression	i < segments . size ( )
>317	CallExpression	segments . size ( )
>318	ArgumentList	 
>319	Callee	segments . size
>320	MemberAccess	segments . size
>321	Identifier	size
>322	Identifier	segments
>323	Identifier	i
>324	ForInit	 
>325	IdentifierDeclStatement	int i = 0 ;
>326	IdentifierDecl	i = 0
>327	AssignmentExpr	i = 0
>328	PrimaryExpression	0
>329	Identifier	i
>330	Identifier	i
>331	IdentifierDeclType	int
>332	ExpressionStatement	 
>333	CallExpression	Quad 
>334	ArgumentList	 
>335	Callee	Quad 
>336	Identifier	Quad 
>348	FunctionDef	Bone 
>349	ParameterList	Bone * b
>350	Parameter	 
>351	Identifier	b
>352	ParameterType	Bone *
>353	ReturnType	void
>354	CompoundStatement	 
>355	ExpressionStatement	 
>356	AssignmentExpr	b -> position = this -> getWorldPosition ( )
>357	CallExpression	this -> getWorldPosition ( )
>358	ArgumentList	 
>359	Callee	this -> getWorldPosition
>360	PtrMemberAccess	this -> getWorldPosition
>361	Identifier	getWorldPosition
>362	Identifier	this
>363	PtrMemberAccess	b -> position
>364	Identifier	position
>365	Identifier	b
>366	ExpressionStatement	 
>367	CallExpression	core -> getTopStateData ( ) -> addRenderObject ( b , skeleton -> getTopLayer ( ) )
>368	ArgumentList	b
>369	Argument	skeleton -> getTopLayer ( )
>370	CallExpression	skeleton -> getTopLayer ( )
>371	ArgumentList	 
>372	Callee	skeleton -> getTopLayer
>373	PtrMemberAccess	skeleton -> getTopLayer
>374	Identifier	getTopLayer
>375	Identifier	skeleton
>376	Argument	b
>377	Identifier	b
>378	Callee	core -> getTopStateData ( ) -> addRenderObject
>379	PtrMemberAccess	core -> getTopStateData ( ) -> addRenderObject
>380	Identifier	addRenderObject
>381	CallExpression	core -> getTopStateData ( )
>382	ArgumentList	 
>383	Callee	core -> getTopStateData
>384	PtrMemberAccess	core -> getTopStateData
>385	Identifier	getTopStateData
>386	Identifier	core
>387	ExpressionStatement	 
>388	CallExpression	skeleton -> removeChild ( b )
>389	ArgumentList	b
>390	Argument	b
>391	Identifier	b
>392	Callee	skeleton -> removeChild
>393	PtrMemberAccess	skeleton -> removeChild
>394	Identifier	removeChild
>395	Identifier	skeleton
>396	ExpressionStatement	 
>397	AssignmentExpr	b -> segmentChain = 2
>398	PrimaryExpression	2
>399	PtrMemberAccess	b -> segmentChain
>400	Identifier	segmentChain
>401	Identifier	b
>402	ExpressionStatement	 
>403	CallExpression	segments . push_back ( b )
>404	ArgumentList	b
>405	Argument	b
>406	Identifier	b
>407	Callee	segments . push_back
>408	MemberAccess	segments . push_back
>409	Identifier	push_back
>410	Identifier	segments
>428	FunctionDef	Bone 
>429	ParameterList	bool vert , int num
>430	Parameter	 
>431	Identifier	num
>432	ParameterType	int
>433	Parameter	 
>434	Identifier	vert
>435	ParameterType	bool
>436	ReturnType	void
>437	CompoundStatement	 
>438	ExpressionStatement	 
>439	CallExpression	setGridPoints ( vert , strip )
>440	ArgumentList	vert
>441	Argument	strip
>442	Identifier	strip
>443	Argument	vert
>444	Identifier	vert
>445	Callee	setGridPoints
>446	Identifier	setGridPoints
>447	ExpressionStatement	 
>448	CallExpression	changeStrip . resize ( num )
>449	ArgumentList	num
>450	Argument	num
>451	Identifier	num
>452	Callee	changeStrip . resize
>453	MemberAccess	changeStrip . resize
>454	Identifier	resize
>455	Identifier	changeStrip
>456	ExpressionStatement	 
>457	AssignmentExpr	gridType = GRID_SET
>458	Identifier	GRID_SET
>459	Identifier	gridType
>460	ExpressionStatement	 
>461	AssignmentExpr	stripVert = vert
>462	Identifier	vert
>463	Identifier	stripVert
>464	IfStatement	if ( ! vert )
>465	ElseStatement	else
>466	CompoundStatement	 
>467	ExpressionStatement	 
>468	CallExpression	createGrid ( 2 , num )
>469	ArgumentList	2
>470	Argument	num
>471	Identifier	num
>472	Argument	2
>473	PrimaryExpression	2
>474	Callee	createGrid
>475	Identifier	createGrid
>476	CompoundStatement	 
>477	ExpressionStatement	 
>478	CallExpression	createGrid ( num , 2 )
>479	ArgumentList	num
>480	Argument	2
>481	PrimaryExpression	2
>482	Argument	num
>483	Identifier	num
>484	Callee	createGrid
>485	Identifier	createGrid
>486	Condition	 
>487	UnaryOp	! vert
>488	Identifier	vert
>489	UnaryOperator	!
>500	FunctionDef	Bone 
>501	ParameterList	const std 
>502	Parameter	 
>503	Identifier	gfx
>504	ParameterType	const std 
>505	ReturnType	Quad *
>506	CompoundStatement	 
>507	ReturnStatement	 
>508	Identifier	q
>509	ExpressionStatement	 
>510	CallExpression	addChild ( q , PM_POINTER )
>511	ArgumentList	q
>512	Argument	PM_POINTER
>513	Identifier	PM_POINTER
>514	Argument	q
>515	Identifier	q
>516	Callee	addChild
>517	Identifier	addChild
>518	ExpressionStatement	 
>519	AssignmentExpr	q -> renderBeforeParent = 1
>520	PrimaryExpression	1
>521	PtrMemberAccess	q -> renderBeforeParent
>522	Identifier	renderBeforeParent
>523	Identifier	q
>524	ExpressionStatement	 
>525	CallExpression	q -> setTexture ( gfx )
>526	ArgumentList	gfx
>527	Argument	gfx
>528	Identifier	gfx
>529	Callee	q -> setTexture
>530	PtrMemberAccess	q -> setTexture
>531	Identifier	setTexture
>532	Identifier	q
>533	IdentifierDeclStatement	 
>534	IdentifierDecl	* q = new Quad ( )
>535	AssignmentExpr	* q = new Quad ( )
>536	UnaryExpression	new Quad ( )
>537	Identifier	q
>538	Identifier	q
>539	IdentifierDeclType	Quad *
>540	ExpressionStatement	 
>541	AssignmentExpr	renderQuad = false
>542	Identifier	false
>543	Identifier	renderQuad
>554	FunctionDef	Bone 
>555	ParameterList	int idx
>556	Parameter	 
>557	Identifier	idx
>558	ParameterType	int
>559	ReturnType	void
>560	CompoundStatement	 
>561	ForStatement	for ( Children 
>562	CompoundStatement	 
>563	ExpressionStatement	 
>564	IncDecOp	c ++
>565	IncDec	++
>566	Identifier	c
>567	IfStatement	if ( idx == c )
>568	ElseStatement	else
>569	CompoundStatement	 
>570	IfStatement	if ( r -> alpha == 1 )
>571	ElseStatement	else
>572	CompoundStatement	 
>573	ExpressionStatement	 
>574	AssignmentExpr	r -> alpha = 0
>575	PrimaryExpression	0
>576	PtrMemberAccess	r -> alpha
>577	Identifier	alpha
>578	Identifier	r
>579	CompoundStatement	 
>580	ExpressionStatement	 
>581	AssignmentExpr	r -> alpha = 0
>582	PrimaryExpression	0
>583	PtrMemberAccess	r -> alpha
>584	Identifier	alpha
>585	Identifier	r
>586	Condition	 
>587	EqualityExpression	r -> alpha == 1
>588	PrimaryExpression	1
>589	PtrMemberAccess	r -> alpha
>590	Identifier	alpha
>591	Identifier	r
>592	CompoundStatement	 
>593	IfStatement	if ( r -> alpha == 0 )
>594	ElseStatement	else
>595	CompoundStatement	 
>596	ExpressionStatement	 
>597	AssignmentExpr	r -> alpha = 1
>598	PrimaryExpression	1
>599	PtrMemberAccess	r -> alpha
>600	Identifier	alpha
>601	Identifier	r
>602	CompoundStatement	 
>603	ExpressionStatement	 
>604	AssignmentExpr	r -> alpha = 1
>605	PrimaryExpression	1
>606	PtrMemberAccess	r -> alpha
>607	Identifier	alpha
>608	Identifier	r
>609	Condition	 
>610	EqualityExpression	r -> alpha == 0
>611	PrimaryExpression	0
>612	PtrMemberAccess	r -> alpha
>613	Identifier	alpha
>614	Identifier	r
>615	Condition	 
>616	EqualityExpression	idx == c
>617	Identifier	c
>618	Identifier	idx
>619	IdentifierDeclStatement	 
>620	IdentifierDecl	* r = ( * i )
>621	AssignmentExpr	* r = ( * i )
>622	UnaryOp	* i
>623	Identifier	i
>624	UnaryOperator	*
>625	Identifier	r
>626	Identifier	r
>627	IdentifierDeclType	RenderObject *
>628	IncDecOp	 
>629	IncDec	++
>630	Identifier	i
>631	Condition	 
>632	EqualityExpression	i != children . end ( )
>633	CallExpression	children . end ( )
>634	ArgumentList	 
>635	Callee	children . end
>636	MemberAccess	children . end
>637	Identifier	end
>638	Identifier	children
>639	Identifier	i
>640	ForInit	 
>641	IdentifierDeclStatement	Children 
>642	IdentifierDecl	i = children . begin ( )
>643	AssignmentExpr	i = children . begin ( )
>644	CallExpression	children . begin ( )
>645	ArgumentList	 
>646	Callee	children . begin
>647	MemberAccess	children . begin
>648	Identifier	begin
>649	Identifier	children
>650	Identifier	i
>651	Identifier	i
>652	IdentifierDeclType	Children 
>653	IdentifierDeclStatement	 
>654	IdentifierDecl	c = 0
>655	AssignmentExpr	c = 0
>656	PrimaryExpression	0
>657	Identifier	c
>658	Identifier	c
>659	IdentifierDeclType	int
>673	FunctionDef	Bone 
>674	ParameterList	int b
>675	Parameter	 
>676	Identifier	b
>677	ParameterType	int
>678	ReturnType	void
>679	CompoundStatement	 
>680	ExpressionStatement	 
>681	AssignmentExpr	animated = b
>682	Identifier	b
>683	Identifier	animated
>689	FunctionDef	Bone 
>690	ParameterList	int minDist , int maxDist , bool reverse
>691	Parameter	 
>692	Identifier	reverse
>693	ParameterType	bool
>694	Parameter	 
>695	Identifier	maxDist
>696	ParameterType	int
>697	Parameter	 
>698	Identifier	minDist
>699	ParameterType	int
>700	ReturnType	void
>701	CompoundStatement	 
>702	ExpressionStatement	 
>703	AssignmentExpr	this -> reverse = reverse
>704	Identifier	reverse
>705	PtrMemberAccess	this -> reverse
>706	Identifier	reverse
>707	Identifier	this
>708	ExpressionStatement	 
>709	AssignmentExpr	this -> maxDist = maxDist
>710	Identifier	maxDist
>711	PtrMemberAccess	this -> maxDist
>712	Identifier	maxDist
>713	Identifier	this
>714	ExpressionStatement	 
>715	AssignmentExpr	this -> minDist = minDist
>716	Identifier	minDist
>717	PtrMemberAccess	this -> minDist
>718	Identifier	minDist
>719	Identifier	this
>731	FunctionDef	Bone 
>732	ParameterList	Bone * b , const Vector & diff
>733	Parameter	 
>734	Identifier	diff
>735	ParameterType	const Vector &
>736	Parameter	 
>737	Identifier	b
>738	ParameterType	Bone *
>739	ReturnType	void
>740	CompoundStatement	 
>741	IfStatement	if ( angle != - 1 )
>742	CompoundStatement	 
>743	ExpressionStatement	 
>744	CallExpression	b -> rotation . interpolateTo ( Vector ( 0 , 0 , angle ) , 0.2 )
>745	ArgumentList	Vector ( 0 , 0 , angle )
>746	Argument	0.2
>747	PrimaryExpression	0.2
>748	Argument	Vector ( 0 , 0 , angle )
>749	CallExpression	Vector ( 0 , 0 , angle )
>750	ArgumentList	0
>751	Argument	angle
>752	Identifier	angle
>753	Argument	0
>754	PrimaryExpression	0
>755	Argument	0
>756	PrimaryExpression	0
>757	Callee	Vector
>758	Identifier	Vector
>759	Callee	b -> rotation . interpolateTo
>760	MemberAccess	b -> rotation . interpolateTo
>761	Identifier	interpolateTo
>762	PtrMemberAccess	b -> rotation
>763	Identifier	rotation
>764	Identifier	b
>765	IfStatement	if ( b -> rotation . z <= 90 && angle > 270 )
>766	CompoundStatement	 
>767	ExpressionStatement	 
>768	AssignmentExpr	b -> rotation . z += 360
>769	PrimaryExpression	360
>770	MemberAccess	b -> rotation . z
>771	Identifier	z
>772	PtrMemberAccess	b -> rotation
>773	Identifier	rotation
>774	Identifier	b
>775	ExpressionStatement	 
>776	CallExpression	b -> rotation . stop ( )
>777	ArgumentList	 
>778	Callee	b -> rotation . stop
>779	MemberAccess	b -> rotation . stop
>780	Identifier	stop
>781	PtrMemberAccess	b -> rotation
>782	Identifier	rotation
>783	Identifier	b
>784	Condition	 
>785	AndExpression	b -> rotation . z <= 90 && angle > 270
>786	RelationalExpression	angle > 270
>787	PrimaryExpression	270
>788	Identifier	angle
>789	RelationalExpression	b -> rotation . z <= 90
>790	PrimaryExpression	90
>791	MemberAccess	b -> rotation . z
>792	Identifier	z
>793	PtrMemberAccess	b -> rotation
>794	Identifier	rotation
>795	Identifier	b
>796	IfStatement	if ( b -> rotation . z >= 270 && angle < 90 )
>797	CompoundStatement	 
>798	ExpressionStatement	 
>799	AssignmentExpr	b -> rotation . z -= 360
>800	PrimaryExpression	360
>801	MemberAccess	b -> rotation . z
>802	Identifier	z
>803	PtrMemberAccess	b -> rotation
>804	Identifier	rotation
>805	Identifier	b
>806	ExpressionStatement	 
>807	CallExpression	b -> rotation . stop ( )
>808	ArgumentList	 
>809	Callee	b -> rotation . stop
>810	MemberAccess	b -> rotation . stop
>811	Identifier	stop
>812	PtrMemberAccess	b -> rotation
>813	Identifier	rotation
>814	Identifier	b
>815	Condition	 
>816	AndExpression	b -> rotation . z >= 270 && angle < 90
>817	RelationalExpression	angle < 90
>818	PrimaryExpression	90
>819	Identifier	angle
>820	RelationalExpression	b -> rotation . z >= 270
>821	PrimaryExpression	270
>822	MemberAccess	b -> rotation . z
>823	Identifier	z
>824	PtrMemberAccess	b -> rotation
>825	Identifier	rotation
>826	Identifier	b
>827	Condition	 
>828	EqualityExpression	angle != - 1
>829	UnaryOp	- 1
>830	PrimaryExpression	1
>831	UnaryOperator	-
>832	Identifier	angle
>833	IfStatement	if ( diff . getSquaredLength2D ( ) > sqr ( maxDist ) )
>834	ElseStatement	else
>835	IfStatement	if ( diff . getSquaredLength2D ( ) > sqr ( minDist ) )
>836	CompoundStatement	 
>837	ExpressionStatement	 
>838	CallExpression	MathFunctions 
>839	ArgumentList	Vector ( 0 , 0 , 0 )
>840	Argument	angle
>841	Identifier	angle
>842	Argument	diff
>843	Identifier	diff
>844	Argument	Vector ( 0 , 0 , 0 )
>845	CallExpression	Vector ( 0 , 0 , 0 )
>846	ArgumentList	0
>847	Argument	0
>848	PrimaryExpression	0
>849	Argument	0
>850	PrimaryExpression	0
>851	Argument	0
>852	PrimaryExpression	0
>853	Callee	Vector
>854	Identifier	Vector
>855	Callee	MathFunctions 
>856	Identifier	MathFunctions 
>857	ExpressionStatement	 
>858	AssignmentExpr	b -> position += diff * 0.05f
>859	MultiplicativeExpression	diff * 0.05f
>860	PrimaryExpression	0.05f
>861	Identifier	diff
>862	PtrMemberAccess	b -> position
>863	Identifier	position
>864	Identifier	b
>865	Condition	 
>866	RelationalExpression	diff . getSquaredLength2D ( ) > sqr ( minDist )
>867	CallExpression	sqr ( minDist )
>868	ArgumentList	minDist
>869	Argument	minDist
>870	Identifier	minDist
>871	Callee	sqr
>872	Identifier	sqr
>873	CallExpression	diff . getSquaredLength2D ( )
>874	ArgumentList	 
>875	Callee	diff . getSquaredLength2D
>876	MemberAccess	diff . getSquaredLength2D
>877	Identifier	getSquaredLength2D
>878	Identifier	diff
>879	CompoundStatement	 
>880	ExpressionStatement	 
>881	CallExpression	MathFunctions 
>882	ArgumentList	Vector ( 0 , 0 , 0 )
>883	Argument	angle
>884	Identifier	angle
>885	Argument	diff
>886	Identifier	diff
>887	Argument	Vector ( 0 , 0 , 0 )
>888	CallExpression	Vector ( 0 , 0 , 0 )
>889	ArgumentList	0
>890	Argument	0
>891	PrimaryExpression	0
>892	Argument	0
>893	PrimaryExpression	0
>894	Argument	0
>895	PrimaryExpression	0
>896	Callee	Vector
>897	Identifier	Vector
>898	Callee	MathFunctions 
>899	Identifier	MathFunctions 
>900	ExpressionStatement	 
>901	AssignmentExpr	b -> position += reallyUseDiff
>902	Identifier	reallyUseDiff
>903	PtrMemberAccess	b -> position
>904	Identifier	position
>905	Identifier	b
>906	IdentifierDeclStatement	 
>907	IdentifierDecl	reallyUseDiff = diff - useDiff
>908	AssignmentExpr	reallyUseDiff = diff - useDiff
>909	AdditiveExpression	diff - useDiff
>910	Identifier	useDiff
>911	Identifier	diff
>912	Identifier	reallyUseDiff
>913	Identifier	reallyUseDiff
>914	IdentifierDeclType	Vector
>915	ExpressionStatement	 
>916	CallExpression	useDiff . setLength2D ( maxDist )
>917	ArgumentList	maxDist
>918	Argument	maxDist
>919	Identifier	maxDist
>920	Callee	useDiff . setLength2D
>921	MemberAccess	useDiff . setLength2D
>922	Identifier	setLength2D
>923	Identifier	useDiff
>924	IdentifierDeclStatement	 
>925	IdentifierDecl	useDiff = diff
>926	AssignmentExpr	useDiff = diff
>927	Identifier	diff
>928	Identifier	diff
>929	Identifier	useDiff
>930	IdentifierDeclType	Vector
>931	Condition	 
>932	RelationalExpression	diff . getSquaredLength2D ( ) > sqr ( maxDist )
>933	CallExpression	sqr ( maxDist )
>934	ArgumentList	maxDist
>935	Argument	maxDist
>936	Identifier	maxDist
>937	Callee	sqr
>938	Identifier	sqr
>939	CallExpression	diff . getSquaredLength2D ( )
>940	ArgumentList	 
>941	Callee	diff . getSquaredLength2D
>942	MemberAccess	diff . getSquaredLength2D
>943	Identifier	getSquaredLength2D
>944	Identifier	diff
>945	IdentifierDeclStatement	 
>946	IdentifierDecl	angle = - 1
>947	AssignmentExpr	angle = - 1
>948	UnaryOp	- 1
>949	PrimaryExpression	1
>950	UnaryOperator	-
>951	Identifier	angle
>952	Identifier	angle
>953	IdentifierDeclType	float
>971	FunctionDef	Bone 
>972	ParameterList	 
>973	ReturnType	void
>974	CompoundStatement	 
>975	IfStatement	if ( segmentChain > 0 && ! segments . empty ( ) )
>976	CompoundStatement	 
>977	IfStatement	if ( ! reverse )
>978	ElseStatement	else
>979	CompoundStatement	 
>980	ForStatement	for ( int i = top ; i >= 0 ; i -- )
>981	CompoundStatement	 
>982	ExpressionStatement	 
>983	CallExpression	updateSegment ( segments [ i ] , diff )
>984	ArgumentList	segments [ i ]
>985	Argument	diff
>986	Identifier	diff
>987	Argument	segments [ i ]
>988	ArrayIndexing	segments [ i ]
>989	Identifier	i
>990	Identifier	segments
>991	Callee	updateSegment
>992	Identifier	updateSegment
>993	IfStatement	if ( i == top )
>994	ElseStatement	else
>995	ExpressionStatement	 
>996	AssignmentExpr	diff = segments [ i + 1 ] -> getWorldPosition ( ) - segments [ i ] -> getWorldPosition ( )
>997	AdditiveExpression	segments [ i + 1 ] -> getWorldPosition ( ) - segments [ i ] -> getWorldPosition ( )
>998	CallExpression	segments [ i ] -> getWorldPosition ( )
>999	ArgumentList	 
>1000	Callee	segments [ i ] -> getWorldPosition
>1001	PtrMemberAccess	segments [ i ] -> getWorldPosition
>1002	Identifier	getWorldPosition
>1003	ArrayIndexing	segments [ i ]
>1004	Identifier	i
>1005	Identifier	segments
>1006	CallExpression	segments [ i + 1 ] -> getWorldPosition ( )
>1007	ArgumentList	 
>1008	Callee	segments [ i + 1 ] -> getWorldPosition
>1009	PtrMemberAccess	segments [ i + 1 ] -> getWorldPosition
>1010	Identifier	getWorldPosition
>1011	ArrayIndexing	segments [ i + 1 ]
>1012	AdditiveExpression	i + 1
>1013	PrimaryExpression	1
>1014	Identifier	i
>1015	Identifier	segments
>1016	Identifier	diff
>1017	CompoundStatement	 
>1018	ExpressionStatement	 
>1019	AssignmentExpr	diff = world - segments [ i ] -> getWorldPosition ( )
>1020	AdditiveExpression	world - segments [ i ] -> getWorldPosition ( )
>1021	CallExpression	segments [ i ] -> getWorldPosition ( )
>1022	ArgumentList	 
>1023	Callee	segments [ i ] -> getWorldPosition
>1024	PtrMemberAccess	segments [ i ] -> getWorldPosition
>1025	Identifier	getWorldPosition
>1026	ArrayIndexing	segments [ i ]
>1027	Identifier	i
>1028	Identifier	segments
>1029	Identifier	world
>1030	Identifier	diff
>1031	IdentifierDeclStatement	 
>1032	IdentifierDecl	world = getWorldCollidePosition ( segmentOffset )
>1033	AssignmentExpr	world = getWorldCollidePosition ( segmentOffset )
>1034	CallExpression	getWorldCollidePosition ( segmentOffset )
>1035	ArgumentList	segmentOffset
>1036	Argument	segmentOffset
>1037	Identifier	segmentOffset
>1038	Callee	getWorldCollidePosition
>1039	Identifier	getWorldCollidePosition
>1040	Identifier	world
>1041	Identifier	world
>1042	IdentifierDeclType	Vector
>1043	Condition	 
>1044	EqualityExpression	i == top
>1045	Identifier	top
>1046	Identifier	i
>1047	IdentifierDeclStatement	 
>1048	IdentifierDecl	diff
>1049	Identifier	diff
>1050	IdentifierDeclType	Vector
>1051	IncDecOp	 
>1052	IncDec	--
>1053	Identifier	i
>1054	Condition	 
>1055	RelationalExpression	i >= 0
>1056	PrimaryExpression	0
>1057	Identifier	i
>1058	ForInit	 
>1059	IdentifierDeclStatement	int i = top ;
>1060	IdentifierDecl	i = top
>1061	AssignmentExpr	i = top
>1062	Identifier	top
>1063	Identifier	top
>1064	Identifier	i
>1065	IdentifierDeclType	int
>1066	IdentifierDeclStatement	 
>1067	IdentifierDecl	top = segments . size ( ) - 1
>1068	AssignmentExpr	top = segments . size ( ) - 1
>1069	AdditiveExpression	segments . size ( ) - 1
>1070	PrimaryExpression	1
>1071	CallExpression	segments . size ( )
>1072	ArgumentList	 
>1073	Callee	segments . size
>1074	MemberAccess	segments . size
>1075	Identifier	size
>1076	Identifier	segments
>1077	Identifier	top
>1078	Identifier	top
>1079	IdentifierDeclType	int
>1080	CompoundStatement	 
>1081	ForStatement	for ( int i = 0 ; i < segments . size ( ) ; i ++ )
>1082	CompoundStatement	 
>1083	ExpressionStatement	 
>1084	CallExpression	updateSegment ( segments [ i ] , diff )
>1085	ArgumentList	segments [ i ]
>1086	Argument	diff
>1087	Identifier	diff
>1088	Argument	segments [ i ]
>1089	ArrayIndexing	segments [ i ]
>1090	Identifier	i
>1091	Identifier	segments
>1092	Callee	updateSegment
>1093	Identifier	updateSegment
>1094	IfStatement	if ( i == 0 )
>1095	ElseStatement	else
>1096	ExpressionStatement	 
>1097	AssignmentExpr	diff = segments [ i - 1 ] -> getWorldPosition ( ) - segments [ i ] -> getWorldPosition ( )
>1098	AdditiveExpression	segments [ i - 1 ] -> getWorldPosition ( ) - segments [ i ] -> getWorldPosition ( )
>1099	CallExpression	segments [ i ] -> getWorldPosition ( )
>1100	ArgumentList	 
>1101	Callee	segments [ i ] -> getWorldPosition
>1102	PtrMemberAccess	segments [ i ] -> getWorldPosition
>1103	Identifier	getWorldPosition
>1104	ArrayIndexing	segments [ i ]
>1105	Identifier	i
>1106	Identifier	segments
>1107	CallExpression	segments [ i - 1 ] -> getWorldPosition ( )
>1108	ArgumentList	 
>1109	Callee	segments [ i - 1 ] -> getWorldPosition
>1110	PtrMemberAccess	segments [ i - 1 ] -> getWorldPosition
>1111	Identifier	getWorldPosition
>1112	ArrayIndexing	segments [ i - 1 ]
>1113	AdditiveExpression	i - 1
>1114	PrimaryExpression	1
>1115	Identifier	i
>1116	Identifier	segments
>1117	Identifier	diff
>1118	CompoundStatement	 
>1119	ExpressionStatement	 
>1120	AssignmentExpr	diff = world - segments [ i ] -> getWorldPosition ( )
>1121	AdditiveExpression	world - segments [ i ] -> getWorldPosition ( )
>1122	CallExpression	segments [ i ] -> getWorldPosition ( )
>1123	ArgumentList	 
>1124	Callee	segments [ i ] -> getWorldPosition
>1125	PtrMemberAccess	segments [ i ] -> getWorldPosition
>1126	Identifier	getWorldPosition
>1127	ArrayIndexing	segments [ i ]
>1128	Identifier	i
>1129	Identifier	segments
>1130	Identifier	world
>1131	Identifier	diff
>1132	IdentifierDeclStatement	 
>1133	IdentifierDecl	world = getWorldCollidePosition ( segmentOffset )
>1134	AssignmentExpr	world = getWorldCollidePosition ( segmentOffset )
>1135	CallExpression	getWorldCollidePosition ( segmentOffset )
>1136	ArgumentList	segmentOffset
>1137	Argument	segmentOffset
>1138	Identifier	segmentOffset
>1139	Callee	getWorldCollidePosition
>1140	Identifier	getWorldCollidePosition
>1141	Identifier	world
>1142	Identifier	world
>1143	IdentifierDeclType	Vector
>1144	Condition	 
>1145	EqualityExpression	i == 0
>1146	PrimaryExpression	0
>1147	Identifier	i
>1148	IdentifierDeclStatement	 
>1149	IdentifierDecl	diff
>1150	Identifier	diff
>1151	IdentifierDeclType	Vector
>1152	IncDecOp	 
>1153	IncDec	++
>1154	Identifier	i
>1155	Condition	 
>1156	RelationalExpression	i < segments . size ( )
>1157	CallExpression	segments . size ( )
>1158	ArgumentList	 
>1159	Callee	segments . size
>1160	MemberAccess	segments . size
>1161	Identifier	size
>1162	Identifier	segments
>1163	Identifier	i
>1164	ForInit	 
>1165	IdentifierDeclStatement	int i = 0 ;
>1166	IdentifierDecl	i = 0
>1167	AssignmentExpr	i = 0
>1168	PrimaryExpression	0
>1169	Identifier	i
>1170	Identifier	i
>1171	IdentifierDeclType	int
>1172	Condition	 
>1173	UnaryOp	! reverse
>1174	Identifier	reverse
>1175	UnaryOperator	!
>1176	Condition	 
>1177	AndExpression	segmentChain > 0 && ! segments . empty ( )
>1178	UnaryOp	! segments . empty ( )
>1179	CallExpression	segments . empty ( )
>1180	ArgumentList	 
>1181	Callee	segments . empty
>1182	MemberAccess	segments . empty
>1183	Identifier	empty
>1184	Identifier	segments
>1185	UnaryOperator	!
>1186	RelationalExpression	segmentChain > 0
>1187	PrimaryExpression	0
>1188	Identifier	segmentChain
>1210	FunctionDef	BoneCommand 
>1211	ParameterList	Bone * b , SimpleIStringStream & is
>1212	Parameter	 
>1213	Identifier	is
>1214	ParameterType	SimpleIStringStream &
>1215	Parameter	 
>1216	Identifier	b
>1217	ParameterType	Bone *
>1218	ReturnType	void
>1219	CompoundStatement	 
>1220	IfStatement	if ( type == \"AC_PRT_LOAD\" )
>1221	ElseStatement	else
>1222	IfStatement	if ( type == \"AC_SND_PLAY\" )
>1223	ElseStatement	else
>1224	IfStatement	if ( type == \"AC_FRM_SHOW\" )
>1225	ElseStatement	else
>1226	IfStatement	if ( type == \"AC_PRT_START\" )
>1227	ElseStatement	else
>1228	IfStatement	if ( type == \"AC_PRT_STOP\" )
>1229	ElseStatement	else
>1230	IfStatement	if ( type == \"AC_SEGS_START\" )
>1231	ElseStatement	else
>1232	IfStatement	if ( type == \"AC_SEGS_STOP\" )
>1233	ExpressionStatement	 
>1234	AssignmentExpr	command = AC_SEGS_STOP
>1235	Identifier	AC_SEGS_STOP
>1236	Identifier	command
>1237	Condition	 
>1238	EqualityExpression	type == \"AC_SEGS_STOP\"
>1239	PrimaryExpression	\"AC_SEGS_STOP\"
>1240	Identifier	type
>1241	ExpressionStatement	 
>1242	AssignmentExpr	command = AC_SEGS_START
>1243	Identifier	AC_SEGS_START
>1244	Identifier	command
>1245	Condition	 
>1246	EqualityExpression	type == \"AC_SEGS_START\"
>1247	PrimaryExpression	\"AC_SEGS_START\"
>1248	Identifier	type
>1249	CompoundStatement	 
>1250	ExpressionStatement	 
>1251	ShiftExpression	is >> slot
>1252	Identifier	slot
>1253	Identifier	is
>1254	ExpressionStatement	 
>1255	AssignmentExpr	command = AC_PRT_STOP
>1256	Identifier	AC_PRT_STOP
>1257	Identifier	command
>1258	Condition	 
>1259	EqualityExpression	type == \"AC_PRT_STOP\"
>1260	PrimaryExpression	\"AC_PRT_STOP\"
>1261	Identifier	type
>1262	CompoundStatement	 
>1263	ExpressionStatement	 
>1264	ShiftExpression	is >> slot
>1265	Identifier	slot
>1266	Identifier	is
>1267	ExpressionStatement	 
>1268	AssignmentExpr	command = AC_PRT_START
>1269	Identifier	AC_PRT_START
>1270	Identifier	command
>1271	Condition	 
>1272	EqualityExpression	type == \"AC_PRT_START\"
>1273	PrimaryExpression	\"AC_PRT_START\"
>1274	Identifier	type
>1275	CompoundStatement	 
>1276	ExpressionStatement	 
>1277	ShiftExpression	is >> slot
>1278	Identifier	slot
>1279	Identifier	is
>1280	ExpressionStatement	 
>1281	AssignmentExpr	command = AC_FRM_SHOW
>1282	Identifier	AC_FRM_SHOW
>1283	Identifier	command
>1284	Condition	 
>1285	EqualityExpression	type == \"AC_FRM_SHOW\"
>1286	PrimaryExpression	\"AC_FRM_SHOW\"
>1287	Identifier	type
>1288	CompoundStatement	 
>1289	ExpressionStatement	 
>1290	ShiftExpression	is >> file
>1291	Identifier	file
>1292	Identifier	is
>1293	ExpressionStatement	 
>1294	AssignmentExpr	command = AC_SND_PLAY
>1295	Identifier	AC_SND_PLAY
>1296	Identifier	command
>1297	Condition	 
>1298	EqualityExpression	type == \"AC_SND_PLAY\"
>1299	PrimaryExpression	\"AC_SND_PLAY\"
>1300	Identifier	type
>1301	CompoundStatement	 
>1302	ExpressionStatement	 
>1303	ShiftExpression	is >> slot >> file
>1304	ShiftExpression	slot >> file
>1305	Identifier	file
>1306	Identifier	slot
>1307	Identifier	is
>1308	ExpressionStatement	 
>1309	AssignmentExpr	command = AC_PRT_LOAD
>1310	Identifier	AC_PRT_LOAD
>1311	Identifier	command
>1312	Condition	 
>1313	EqualityExpression	type == \"AC_PRT_LOAD\"
>1314	PrimaryExpression	\"AC_PRT_LOAD\"
>1315	Identifier	type
>1316	ExpressionStatement	 
>1317	AssignmentExpr	this -> b = b
>1318	Identifier	b
>1319	PtrMemberAccess	this -> b
>1320	Identifier	b
>1321	Identifier	this
>1322	ExpressionStatement	 
>1323	ShiftExpression	is >> type
>1324	Identifier	type
>1325	Identifier	is
>1326	IdentifierDeclStatement	 
>1327	IdentifierDecl	type
>1328	Identifier	type
>1329	IdentifierDeclType	std 
>1347	FunctionDef	BoneCommand 
>1348	ParameterList	 
>1349	ReturnType	void
>1350	CompoundStatement	 
>1351	SwitchStatement	switch ( command )
>1352	CompoundStatement	 
>1353	BreakStatement	 
>1354	CompoundStatement	 
>1355	IfStatement	if ( e )
>1356	ExpressionStatement	 
>1357	CallExpression	e -> stop ( )
>1358	ArgumentList	 
>1359	Callee	e -> stop
>1360	PtrMemberAccess	e -> stop
>1361	Identifier	stop
>1362	Identifier	e
>1363	Condition	 
>1364	Identifier	e
>1365	IdentifierDeclStatement	 
>1366	IdentifierDecl	* e = b -> emitters [ slot ]
>1367	AssignmentExpr	* e = b -> emitters [ slot ]
>1368	ArrayIndexing	b -> emitters [ slot ]
>1369	Identifier	slot
>1370	PtrMemberAccess	b -> emitters
>1371	Identifier	emitters
>1372	Identifier	b
>1373	Identifier	e
>1374	Identifier	e
>1375	IdentifierDeclType	ParticleEffect *
>1376	Label	 
>1377	Identifier	AC_PRT_STOP
>1378	BreakStatement	 
>1379	CompoundStatement	 
>1380	IfStatement	if ( e )
>1381	ExpressionStatement	 
>1382	CallExpression	e -> start ( )
>1383	ArgumentList	 
>1384	Callee	e -> start
>1385	PtrMemberAccess	e -> start
>1386	Identifier	start
>1387	Identifier	e
>1388	Condition	 
>1389	Identifier	e
>1390	IdentifierDeclStatement	 
>1391	IdentifierDecl	* e = b -> emitters [ slot ]
>1392	AssignmentExpr	* e = b -> emitters [ slot ]
>1393	ArrayIndexing	b -> emitters [ slot ]
>1394	Identifier	slot
>1395	PtrMemberAccess	b -> emitters
>1396	Identifier	emitters
>1397	Identifier	b
>1398	Identifier	e
>1399	Identifier	e
>1400	IdentifierDeclType	ParticleEffect *
>1401	Label	 
>1402	Identifier	AC_PRT_START
>1403	BreakStatement	 
>1404	CompoundStatement	 
>1405	IfStatement	if ( e )
>1406	CompoundStatement	 
>1407	ExpressionStatement	 
>1408	CallExpression	e -> load ( file )
>1409	ArgumentList	file
>1410	Argument	file
>1411	Identifier	file
>1412	Callee	e -> load
>1413	PtrMemberAccess	e -> load
>1414	Identifier	load
>1415	Identifier	e
>1416	Condition	 
>1417	Identifier	e
>1418	IdentifierDeclStatement	 
>1419	IdentifierDecl	* e = b -> emitters [ slot ]
>1420	AssignmentExpr	* e = b -> emitters [ slot ]
>1421	ArrayIndexing	b -> emitters [ slot ]
>1422	Identifier	slot
>1423	PtrMemberAccess	b -> emitters
>1424	Identifier	emitters
>1425	Identifier	b
>1426	Identifier	e
>1427	Identifier	e
>1428	IdentifierDeclType	ParticleEffect *
>1429	Label	 
>1430	Identifier	AC_PRT_LOAD
>1431	BreakStatement	 
>1432	CompoundStatement	 
>1433	ExpressionStatement	 
>1434	CallExpression	b -> showFrame ( slot )
>1435	ArgumentList	slot
>1436	Argument	slot
>1437	Identifier	slot
>1438	Callee	b -> showFrame
>1439	PtrMemberAccess	b -> showFrame
>1440	Identifier	showFrame
>1441	Identifier	b
>1442	Label	 
>1443	Identifier	AC_FRM_SHOW
>1444	BreakStatement	 
>1445	CompoundStatement	 
>1446	ExpressionStatement	 
>1447	CallExpression	core -> sound -> playSfx ( file )
>1448	ArgumentList	file
>1449	Argument	file
>1450	Identifier	file
>1451	Callee	core -> sound -> playSfx
>1452	PtrMemberAccess	core -> sound -> playSfx
>1453	Identifier	playSfx
>1454	PtrMemberAccess	core -> sound
>1455	Identifier	sound
>1456	Identifier	core
>1457	Label	 
>1458	Identifier	AC_SND_PLAY
>1459	Condition	 
>1460	Identifier	command
>1477	FunctionDef	AnimationLayer 
>1478	ParameterList	 
>1479	CompoundStatement	 
>1480	ExpressionStatement	 
>1481	AssignmentExpr	s = 0
>1482	PrimaryExpression	0
>1483	Identifier	s
>1484	ExpressionStatement	 
>1485	AssignmentExpr	fallThruSpeed = 0
>1486	PrimaryExpression	0
>1487	Identifier	fallThruSpeed
>1488	ExpressionStatement	 
>1489	AssignmentExpr	animating = false
>1490	Identifier	false
>1491	Identifier	animating
>1492	ExpressionStatement	 
>1493	AssignmentExpr	currentAnimation = 0
>1494	PrimaryExpression	0
>1495	Identifier	currentAnimation
>1496	ExpressionStatement	 
>1497	AssignmentExpr	animationLength = 0
>1498	PrimaryExpression	0
>1499	Identifier	animationLength
>1500	ExpressionStatement	 
>1501	AssignmentExpr	timeMultiplier = 1
>1502	PrimaryExpression	1
>1503	Identifier	timeMultiplier
>1504	ExpressionStatement	 
>1505	AssignmentExpr	enqueuedAnimationLoop = 0
>1506	PrimaryExpression	0
>1507	Identifier	enqueuedAnimationLoop
>1508	ExpressionStatement	 
>1509	AssignmentExpr	loop = 0
>1510	PrimaryExpression	0
>1511	Identifier	loop
>1512	ExpressionStatement	 
>1513	AssignmentExpr	timer = 0
>1514	PrimaryExpression	0
>1515	Identifier	timer
>1516	ExpressionStatement	 
>1517	AssignmentExpr	fallThru = 0
>1518	PrimaryExpression	0
>1519	Identifier	fallThru
>1520	ExpressionStatement	 
>1521	AssignmentExpr	lastNewKey = 0
>1522	PrimaryExpression	0
>1523	Identifier	lastNewKey
>1539	FunctionDef	AnimationLayer 
>1540	ParameterList	float t
>1541	Parameter	 
>1542	Identifier	t
>1543	ParameterType	float
>1544	ReturnType	void
>1545	CompoundStatement	 
>1546	ExpressionStatement	 
>1547	AssignmentExpr	timeMultiplier = t
>1548	Identifier	t
>1549	Identifier	timeMultiplier
>1555	FunctionDef	AnimationLayer 
>1556	ParameterList	int loop
>1557	Parameter	 
>1558	Identifier	loop
>1559	ParameterType	int
>1560	ReturnType	void
>1561	CompoundStatement	 
>1562	ExpressionStatement	 
>1563	CallExpression	playAnimation ( currentAnimation , loop )
>1564	ArgumentList	currentAnimation
>1565	Argument	loop
>1566	Identifier	loop
>1567	Argument	currentAnimation
>1568	Identifier	currentAnimation
>1569	Callee	playAnimation
>1570	Identifier	playAnimation
>1576	FunctionDef	AnimationLayer 
>1577	ParameterList	const std 
>1578	Parameter	 
>1579	Identifier	loop
>1580	ParameterType	int
>1581	Parameter	 
>1582	Identifier	a
>1583	ParameterType	const std 
>1584	ReturnType	void
>1585	CompoundStatement	 
>1586	IfStatement	if ( ! played )
>1587	CompoundStatement	 
>1588	ExpressionStatement	 
>1589	CallExpression	debugLog ( os . str ( ) )
>1590	ArgumentList	os . str ( )
>1591	Argument	os . str ( )
>1592	CallExpression	os . str ( )
>1593	ArgumentList	 
>1594	Callee	os . str
>1595	MemberAccess	os . str
>1596	Identifier	str
>1597	Identifier	os
>1598	Callee	debugLog
>1599	Identifier	debugLog
>1600	ExpressionStatement	 
>1601	ShiftExpression	os << \"Could not find animation
>1602	ShiftExpression	\"Could not find animation
>1603	Identifier	animation
>1604	PrimaryExpression	\"Could not find animation
>1605	Identifier	os
>1606	IdentifierDeclStatement	 
>1607	IdentifierDecl	os
>1608	Identifier	os
>1609	IdentifierDeclType	std 
>1610	Condition	 
>1611	UnaryOp	! played
>1612	Identifier	played
>1613	UnaryOperator	!
>1614	ForStatement	for ( int i = 0 ; i < s -> animations . size ( ) ; i ++ )
>1615	CompoundStatement	 
>1616	IfStatement	if ( s -> animations [ i ] . name == animation )
>1617	CompoundStatement	 
>1618	BreakStatement	 
>1619	ExpressionStatement	 
>1620	AssignmentExpr	played = true
>1621	Identifier	true
>1622	Identifier	played
>1623	ExpressionStatement	 
>1624	CallExpression	playAnimation ( i , loop )
>1625	ArgumentList	i
>1626	Argument	loop
>1627	Identifier	loop
>1628	Argument	i
>1629	Identifier	i
>1630	Callee	playAnimation
>1631	Identifier	playAnimation
>1632	Condition	 
>1633	EqualityExpression	s -> animations [ i ] . name == animation
>1634	Identifier	animation
>1635	MemberAccess	s -> animations [ i ] . name
>1636	Identifier	name
>1637	ArrayIndexing	s -> animations [ i ]
>1638	Identifier	i
>1639	PtrMemberAccess	s -> animations
>1640	Identifier	animations
>1641	Identifier	s
>1642	IncDecOp	 
>1643	IncDec	++
>1644	Identifier	i
>1645	Condition	 
>1646	RelationalExpression	i < s -> animations . size ( )
>1647	CallExpression	s -> animations . size ( )
>1648	ArgumentList	 
>1649	Callee	s -> animations . size
>1650	MemberAccess	s -> animations . size
>1651	Identifier	size
>1652	PtrMemberAccess	s -> animations
>1653	Identifier	animations
>1654	Identifier	s
>1655	Identifier	i
>1656	ForInit	 
>1657	IdentifierDeclStatement	int i = 0 ;
>1658	IdentifierDecl	i = 0
>1659	AssignmentExpr	i = 0
>1660	PrimaryExpression	0
>1661	Identifier	i
>1662	Identifier	i
>1663	IdentifierDeclType	int
>1664	IdentifierDeclStatement	 
>1665	IdentifierDecl	played = false
>1666	AssignmentExpr	played = false
>1667	Identifier	false
>1668	Identifier	false
>1669	Identifier	played
>1670	IdentifierDeclType	bool
>1671	ExpressionStatement	 
>1672	CallExpression	stringToLower ( animation )
>1673	ArgumentList	animation
>1674	Argument	animation
>1675	Identifier	animation
>1676	Callee	stringToLower
>1677	Identifier	stringToLower
>1678	IdentifierDeclStatement	 
>1679	IdentifierDecl	animation = a
>1680	AssignmentExpr	animation = a
>1681	Identifier	a
>1682	Identifier	a
>1683	Identifier	animation
>1684	IdentifierDeclType	std 
>1705	FunctionDef	AnimationLayer 
>1706	ParameterList	int idx , int loop
>1707	Parameter	 
>1708	Identifier	loop
>1709	ParameterType	int
>1710	Parameter	 
>1711	Identifier	idx
>1712	ParameterType	int
>1713	ReturnType	void
>1714	CompoundStatement	 
>1715	ExpressionStatement	 
>1716	AssignmentExpr	animationLength = getCurrentAnimation ( ) -> getAnimationLength ( )
>1717	CallExpression	getCurrentAnimation ( ) -> getAnimationLength ( )
>1718	ArgumentList	 
>1719	Callee	getCurrentAnimation ( ) -> getAnimationLength
>1720	PtrMemberAccess	getCurrentAnimation ( ) -> getAnimationLength
>1721	Identifier	getAnimationLength
>1722	CallExpression	getCurrentAnimation ( )
>1723	ArgumentList	 
>1724	Callee	getCurrentAnimation
>1725	Identifier	getCurrentAnimation
>1726	Identifier	animationLength
>1727	ExpressionStatement	 
>1728	AssignmentExpr	this -> loop = loop
>1729	Identifier	loop
>1730	PtrMemberAccess	this -> loop
>1731	Identifier	loop
>1732	Identifier	this
>1733	ExpressionStatement	 
>1734	AssignmentExpr	animating = true
>1735	Identifier	true
>1736	Identifier	animating
>1737	ExpressionStatement	 
>1738	AssignmentExpr	timer = 0
>1739	PrimaryExpression	0
>1740	Identifier	timer
>1741	ExpressionStatement	 
>1742	AssignmentExpr	currentAnimation = idx
>1743	Identifier	idx
>1744	Identifier	currentAnimation
>1745	ExpressionStatement	 
>1746	AssignmentExpr	timeMultiplier = 1
>1747	PrimaryExpression	1
>1748	Identifier	timeMultiplier
>1749	IfStatement	if ( ! ( & s -> animLayers [ 0 ] == this ) )
>1750	CompoundStatement	 
>1751	ExpressionStatement	 
>1752	AssignmentExpr	fallThruSpeed = 10
>1753	PrimaryExpression	10
>1754	Identifier	fallThruSpeed
>1755	ExpressionStatement	 
>1756	AssignmentExpr	fallThru = 1
>1757	PrimaryExpression	1
>1758	Identifier	fallThru
>1759	Condition	 
>1760	UnaryOp	! ( & s -> animLayers [ 0 ] == this )
>1761	EqualityExpression	& s -> animLayers [ 0 ] == this
>1762	Identifier	this
>1763	UnaryOp	& s -> animLayers [ 0 ]
>1764	ArrayIndexing	s -> animLayers [ 0 ]
>1765	PrimaryExpression	0
>1766	PtrMemberAccess	s -> animLayers
>1767	Identifier	animLayers
>1768	Identifier	s
>1769	UnaryOperator	&
>1770	UnaryOperator	!
>1795	FunctionDef	AnimationLayer 
>1796	ParameterList	const std 
>1797	Parameter	 
>1798	Identifier	loop
>1799	ParameterType	int
>1800	Parameter	 
>1801	Identifier	anim
>1802	ParameterType	const std 
>1803	ReturnType	void
>1804	CompoundStatement	 
>1805	ExpressionStatement	 
>1806	CallExpression	stringToLower ( enqueuedAnimation )
>1807	ArgumentList	enqueuedAnimation
>1808	Argument	enqueuedAnimation
>1809	Identifier	enqueuedAnimation
>1810	Callee	stringToLower
>1811	Identifier	stringToLower
>1812	ExpressionStatement	 
>1813	AssignmentExpr	enqueuedAnimationLoop = loop
>1814	Identifier	loop
>1815	Identifier	enqueuedAnimationLoop
>1816	ExpressionStatement	 
>1817	AssignmentExpr	enqueuedAnimation = anim
>1818	Identifier	anim
>1819	Identifier	enqueuedAnimation
>1827	FunctionDef	AnimationLayer 
>1828	ParameterList	std 
>1829	Parameter	 
>1830	Identifier	loop
>1831	ParameterType	int
>1832	Parameter	 
>1833	Identifier	time
>1834	ParameterType	float
>1835	Parameter	 
>1836	Identifier	anim
>1837	ParameterType	std 
>1838	ReturnType	float
>1839	CompoundStatement	 
>1840	ReturnStatement	 
>1841	Identifier	totalTime
>1842	IfStatement	if ( createTransitionAnimation ( anim , time ) )
>1843	CompoundStatement	 
>1844	IfStatement	if ( a )
>1845	CompoundStatement	 
>1846	IfStatement	if ( loop > - 1 )
>1847	ElseStatement	else
>1848	ExpressionStatement	 
>1849	AssignmentExpr	totalTime = a -> getAnimationLength ( ) + time
>1850	AdditiveExpression	a -> getAnimationLength ( ) + time
>1851	Identifier	time
>1852	CallExpression	a -> getAnimationLength ( )
>1853	ArgumentList	 
>1854	Callee	a -> getAnimationLength
>1855	PtrMemberAccess	a -> getAnimationLength
>1856	Identifier	getAnimationLength
>1857	Identifier	a
>1858	Identifier	totalTime
>1859	ExpressionStatement	 
>1860	AssignmentExpr	totalTime = a -> getAnimationLength ( ) * ( loop + 1 ) + time
>1861	AdditiveExpression	a -> getAnimationLength ( ) * ( loop + 1 ) + time
>1862	Identifier	time
>1863	MultiplicativeExpression	a -> getAnimationLength ( ) * ( loop + 1 )
>1864	AdditiveExpression	loop + 1
>1865	PrimaryExpression	1
>1866	Identifier	loop
>1867	CallExpression	a -> getAnimationLength ( )
>1868	ArgumentList	 
>1869	Callee	a -> getAnimationLength
>1870	PtrMemberAccess	a -> getAnimationLength
>1871	Identifier	getAnimationLength
>1872	Identifier	a
>1873	Identifier	totalTime
>1874	Condition	 
>1875	RelationalExpression	loop > - 1
>1876	UnaryOp	- 1
>1877	PrimaryExpression	1
>1878	UnaryOperator	-
>1879	Identifier	loop
>1880	Condition	 
>1881	Identifier	a
>1882	IdentifierDeclStatement	 
>1883	IdentifierDecl	* a = this -> s -> getAnimation ( anim )
>1884	AssignmentExpr	* a = this -> s -> getAnimation ( anim )
>1885	CallExpression	this -> s -> getAnimation ( anim )
>1886	ArgumentList	anim
>1887	Argument	anim
>1888	Identifier	anim
>1889	Callee	this -> s -> getAnimation
>1890	PtrMemberAccess	this -> s -> getAnimation
>1891	Identifier	getAnimation
>1892	PtrMemberAccess	this -> s
>1893	Identifier	s
>1894	Identifier	this
>1895	Identifier	a
>1896	Identifier	a
>1897	IdentifierDeclType	Animation *
>1898	ExpressionStatement	 
>1899	CallExpression	enqueueAnimation ( anim , loop )
>1900	ArgumentList	anim
>1901	Argument	loop
>1902	Identifier	loop
>1903	Argument	anim
>1904	Identifier	anim
>1905	Callee	enqueueAnimation
>1906	Identifier	enqueueAnimation
>1907	ExpressionStatement	 
>1908	AssignmentExpr	animationLength = getCurrentAnimation ( ) -> getAnimationLength ( )
>1909	CallExpression	getCurrentAnimation ( ) -> getAnimationLength ( )
>1910	ArgumentList	 
>1911	Callee	getCurrentAnimation ( ) -> getAnimationLength
>1912	PtrMemberAccess	getCurrentAnimation ( ) -> getAnimationLength
>1913	Identifier	getAnimationLength
>1914	CallExpression	getCurrentAnimation ( )
>1915	ArgumentList	 
>1916	Callee	getCurrentAnimation
>1917	Identifier	getCurrentAnimation
>1918	Identifier	animationLength
>1919	ExpressionStatement	 
>1920	AssignmentExpr	animating = 1
>1921	PrimaryExpression	1
>1922	Identifier	animating
>1923	ExpressionStatement	 
>1924	AssignmentExpr	timer = 0
>1925	PrimaryExpression	0
>1926	Identifier	timer
>1927	ExpressionStatement	 
>1928	AssignmentExpr	this -> loop = 0
>1929	PrimaryExpression	0
>1930	PtrMemberAccess	this -> loop
>1931	Identifier	loop
>1932	Identifier	this
>1933	ExpressionStatement	 
>1934	AssignmentExpr	currentAnimation = - 1
>1935	UnaryOp	- 1
>1936	PrimaryExpression	1
>1937	UnaryOperator	-
>1938	Identifier	currentAnimation
>1939	ExpressionStatement	 
>1940	AssignmentExpr	timeMultiplier = 1
>1941	PrimaryExpression	1
>1942	Identifier	timeMultiplier
>1943	Condition	 
>1944	CallExpression	createTransitionAnimation ( anim , time )
>1945	ArgumentList	anim
>1946	Argument	time
>1947	Identifier	time
>1948	Argument	anim
>1949	Identifier	anim
>1950	Callee	createTransitionAnimation
>1951	Identifier	createTransitionAnimation
>1952	IdentifierDeclStatement	 
>1953	IdentifierDecl	totalTime = 0
>1954	AssignmentExpr	totalTime = 0
>1955	PrimaryExpression	0
>1956	Identifier	totalTime
>1957	Identifier	totalTime
>1958	IdentifierDeclType	float
>1959	ExpressionStatement	 
>1960	CallExpression	stringToLower ( anim )
>1961	ArgumentList	anim
>1962	Argument	anim
>1963	Identifier	anim
>1964	Callee	stringToLower
>1965	Identifier	stringToLower
>1992	FunctionDef	AnimationLayer 
>1993	ParameterList	SkeletalSprite * s
>1994	Parameter	 
>1995	Identifier	s
>1996	ParameterType	SkeletalSprite *
>1997	ReturnType	void
>1998	CompoundStatement	 
>1999	ExpressionStatement	 
>2000	AssignmentExpr	this -> s = s
>2001	Identifier	s
>2002	PtrMemberAccess	this -> s
>2003	Identifier	s
>2004	Identifier	this
>2012	FunctionDef	AnimationLayer 
>2013	ParameterList	 
>2014	ReturnType	Animation *
>2015	CompoundStatement	 
>2016	ReturnStatement	 
>2017	UnaryOp	& s -> animations [ currentAnimation ]
>2018	ArrayIndexing	s -> animations [ currentAnimation ]
>2019	Identifier	currentAnimation
>2020	PtrMemberAccess	s -> animations
>2021	Identifier	animations
>2022	Identifier	s
>2023	UnaryOperator	&
>2024	IfStatement	if ( currentAnimation < 0 || currentAnimation >= s -> animations . size ( ) )
>2025	CompoundStatement	 
>2026	ReturnStatement	 
>2027	PrimaryExpression	0
>2028	ExpressionStatement	 
>2029	CallExpression	exit_error ( os . str ( ) )
>2030	ArgumentList	os . str ( )
>2031	Argument	os . str ( )
>2032	CallExpression	os . str ( )
>2033	ArgumentList	 
>2034	Callee	os . str
>2035	MemberAccess	os . str
>2036	Identifier	str
>2037	Identifier	os
>2038	Callee	exit_error
>2039	Identifier	exit_error
>2040	ExpressionStatement	 
>2041	ShiftExpression	os << \"skel
>2042	ShiftExpression	\"skel
>2043	ShiftExpression	s -> filenameLoaded << \" currentAnimation
>2044	ShiftExpression	\" currentAnimation
>2045	ShiftExpression	currentAnimation << \" is out of range\n error in anim file?\"
>2046	PrimaryExpression	\" is out of range\n error in anim file?\"
>2047	Identifier	currentAnimation
>2048	PrimaryExpression	\" currentAnimation
>2049	PtrMemberAccess	s -> filenameLoaded
>2050	Identifier	filenameLoaded
>2051	Identifier	s
>2052	PrimaryExpression	\"skel
>2053	Identifier	os
>2054	IdentifierDeclStatement	 
>2055	IdentifierDecl	os
>2056	Identifier	os
>2057	IdentifierDeclType	std 
>2058	Condition	 
>2059	OrExpression	currentAnimation < 0 || currentAnimation >= s -> animations . size ( )
>2060	RelationalExpression	currentAnimation >= s -> animations . size ( )
>2061	CallExpression	s -> animations . size ( )
>2062	ArgumentList	 
>2063	Callee	s -> animations . size
>2064	MemberAccess	s -> animations . size
>2065	Identifier	size
>2066	PtrMemberAccess	s -> animations
>2067	Identifier	animations
>2068	Identifier	s
>2069	Identifier	currentAnimation
>2070	RelationalExpression	currentAnimation < 0
>2071	PrimaryExpression	0
>2072	Identifier	currentAnimation
>2073	IfStatement	if ( currentAnimation == - 1 )
>2074	ReturnStatement	 
>2075	UnaryOp	& blendAnimation
>2076	Identifier	blendAnimation
>2077	UnaryOperator	&
>2078	Condition	 
>2079	EqualityExpression	currentAnimation == - 1
>2080	UnaryOp	- 1
>2081	PrimaryExpression	1
>2082	UnaryOperator	-
>2083	Identifier	currentAnimation
>2098	FunctionDef	AnimationLayer 
>2099	ParameterList	const std 
>2100	Parameter	 
>2101	Identifier	time
>2102	ParameterType	float
>2103	Parameter	 
>2104	Identifier	anim
>2105	ParameterType	const std 
>2106	ReturnType	bool
>2107	CompoundStatement	 
>2108	ReturnStatement	 
>2109	Identifier	true
>2110	ExpressionStatement	 
>2111	AssignmentExpr	blendAnimation . name = anim
>2112	Identifier	anim
>2113	MemberAccess	blendAnimation . name
>2114	Identifier	name
>2115	Identifier	blendAnimation
>2116	ExpressionStatement	 
>2117	CallExpression	blendAnimation . keyframes . push_back ( k2 )
>2118	ArgumentList	k2
>2119	Argument	k2
>2120	Identifier	k2
>2121	Callee	blendAnimation . keyframes . push_back
>2122	MemberAccess	blendAnimation . keyframes . push_back
>2123	Identifier	push_back
>2124	MemberAccess	blendAnimation . keyframes
>2125	Identifier	keyframes
>2126	Identifier	blendAnimation
>2127	ExpressionStatement	 
>2128	AssignmentExpr	k2 . t = time
>2129	Identifier	time
>2130	MemberAccess	k2 . t
>2131	Identifier	t
>2132	Identifier	k2
>2133	ExpressionStatement	 
>2134	AssignmentExpr	k2 = * rk
>2135	UnaryOp	* rk
>2136	Identifier	rk
>2137	UnaryOperator	*
>2138	Identifier	k2
>2139	IfStatement	if ( ! rk )
>2140	ReturnStatement	 
>2141	Identifier	false
>2142	Condition	 
>2143	UnaryOp	! rk
>2144	Identifier	rk
>2145	UnaryOperator	!
>2146	IdentifierDeclStatement	 
>2147	IdentifierDecl	* rk = to -> getKeyframe ( 0 )
>2148	AssignmentExpr	* rk = to -> getKeyframe ( 0 )
>2149	CallExpression	to -> getKeyframe ( 0 )
>2150	ArgumentList	0
>2151	Argument	0
>2152	PrimaryExpression	0
>2153	Callee	to -> getKeyframe
>2154	PtrMemberAccess	to -> getKeyframe
>2155	Identifier	getKeyframe
>2156	Identifier	to
>2157	Identifier	rk
>2158	Identifier	rk
>2159	IdentifierDeclType	SkeletalKeyframe *
>2160	IdentifierDeclStatement	 
>2161	IdentifierDecl	k2
>2162	Identifier	k2
>2163	IdentifierDeclType	SkeletalKeyframe
>2164	ExpressionStatement	 
>2165	CallExpression	blendAnimation . keyframes . push_back ( k )
>2166	ArgumentList	k
>2167	Argument	k
>2168	Identifier	k
>2169	Callee	blendAnimation . keyframes . push_back
>2170	MemberAccess	blendAnimation . keyframes . push_back
>2171	Identifier	push_back
>2172	MemberAccess	blendAnimation . keyframes
>2173	Identifier	keyframes
>2174	Identifier	blendAnimation
>2175	ForStatement	for ( int i = 0 ; i < s -> bones . size ( ) ; i ++ )
>2176	CompoundStatement	 
>2177	ExpressionStatement	 
>2178	CallExpression	k . keyframes . push_back ( b )
>2179	ArgumentList	b
>2180	Argument	b
>2181	Identifier	b
>2182	Callee	k . keyframes . push_back
>2183	MemberAccess	k . keyframes . push_back
>2184	Identifier	push_back
>2185	MemberAccess	k . keyframes
>2186	Identifier	keyframes
>2187	Identifier	k
>2188	ExpressionStatement	 
>2189	AssignmentExpr	b . sy = s -> bones [ i ] -> scale . y
>2190	MemberAccess	s -> bones [ i ] -> scale . y
>2191	Identifier	y
>2192	PtrMemberAccess	s -> bones [ i ] -> scale
>2193	Identifier	scale
>2194	ArrayIndexing	s -> bones [ i ]
>2195	Identifier	i
>2196	PtrMemberAccess	s -> bones
>2197	Identifier	bones
>2198	Identifier	s
>2199	MemberAccess	b . sy
>2200	Identifier	sy
>2201	Identifier	b
>2202	ExpressionStatement	 
>2203	AssignmentExpr	b . sx = s -> bones [ i ] -> scale . x
>2204	MemberAccess	s -> bones [ i ] -> scale . x
>2205	Identifier	x
>2206	PtrMemberAccess	s -> bones [ i ] -> scale
>2207	Identifier	scale
>2208	ArrayIndexing	s -> bones [ i ]
>2209	Identifier	i
>2210	PtrMemberAccess	s -> bones
>2211	Identifier	bones
>2212	Identifier	s
>2213	MemberAccess	b . sx
>2214	Identifier	sx
>2215	Identifier	b
>2216	ExpressionStatement	 
>2217	AssignmentExpr	b . strip = s -> bones [ i ] -> strip
>2218	PtrMemberAccess	s -> bones [ i ] -> strip
>2219	Identifier	strip
>2220	ArrayIndexing	s -> bones [ i ]
>2221	Identifier	i
>2222	PtrMemberAccess	s -> bones
>2223	Identifier	bones
>2224	Identifier	s
>2225	MemberAccess	b . strip
>2226	Identifier	strip
>2227	Identifier	b
>2228	ExpressionStatement	 
>2229	AssignmentExpr	b . rot = s -> bones [ i ] -> rotation . z
>2230	MemberAccess	s -> bones [ i ] -> rotation . z
>2231	Identifier	z
>2232	PtrMemberAccess	s -> bones [ i ] -> rotation
>2233	Identifier	rotation
>2234	ArrayIndexing	s -> bones [ i ]
>2235	Identifier	i
>2236	PtrMemberAccess	s -> bones
>2237	Identifier	bones
>2238	Identifier	s
>2239	MemberAccess	b . rot
>2240	Identifier	rot
>2241	Identifier	b
>2242	ExpressionStatement	 
>2243	AssignmentExpr	b . y = s -> bones [ i ] -> position . y
>2244	MemberAccess	s -> bones [ i ] -> position . y
>2245	Identifier	y
>2246	PtrMemberAccess	s -> bones [ i ] -> position
>2247	Identifier	position
>2248	ArrayIndexing	s -> bones [ i ]
>2249	Identifier	i
>2250	PtrMemberAccess	s -> bones
>2251	Identifier	bones
>2252	Identifier	s
>2253	MemberAccess	b . y
>2254	Identifier	y
>2255	Identifier	b
>2256	ExpressionStatement	 
>2257	AssignmentExpr	b . x = s -> bones [ i ] -> position . x
>2258	MemberAccess	s -> bones [ i ] -> position . x
>2259	Identifier	x
>2260	PtrMemberAccess	s -> bones [ i ] -> position
>2261	Identifier	position
>2262	ArrayIndexing	s -> bones [ i ]
>2263	Identifier	i
>2264	PtrMemberAccess	s -> bones
>2265	Identifier	bones
>2266	Identifier	s
>2267	MemberAccess	b . x
>2268	Identifier	x
>2269	Identifier	b
>2270	ExpressionStatement	 
>2271	AssignmentExpr	b . idx = s -> bones [ i ] -> boneIdx
>2272	PtrMemberAccess	s -> bones [ i ] -> boneIdx
>2273	Identifier	boneIdx
>2274	ArrayIndexing	s -> bones [ i ]
>2275	Identifier	i
>2276	PtrMemberAccess	s -> bones
>2277	Identifier	bones
>2278	Identifier	s
>2279	MemberAccess	b . idx
>2280	Identifier	idx
>2281	Identifier	b
>2282	IdentifierDeclStatement	 
>2283	IdentifierDecl	b
>2284	Identifier	b
>2285	IdentifierDeclType	BoneKeyframe
>2286	IncDecOp	 
>2287	IncDec	++
>2288	Identifier	i
>2289	Condition	 
>2290	RelationalExpression	i < s -> bones . size ( )
>2291	CallExpression	s -> bones . size ( )
>2292	ArgumentList	 
>2293	Callee	s -> bones . size
>2294	MemberAccess	s -> bones . size
>2295	Identifier	size
>2296	PtrMemberAccess	s -> bones
>2297	Identifier	bones
>2298	Identifier	s
>2299	Identifier	i
>2300	ForInit	 
>2301	IdentifierDeclStatement	int i = 0 ;
>2302	IdentifierDecl	i = 0
>2303	AssignmentExpr	i = 0
>2304	PrimaryExpression	0
>2305	Identifier	i
>2306	Identifier	i
>2307	IdentifierDeclType	int
>2308	ExpressionStatement	 
>2309	AssignmentExpr	k . t = 0
>2310	PrimaryExpression	0
>2311	MemberAccess	k . t
>2312	Identifier	t
>2313	Identifier	k
>2314	IdentifierDeclStatement	 
>2315	IdentifierDecl	k
>2316	Identifier	k
>2317	IdentifierDeclType	SkeletalKeyframe
>2318	ExpressionStatement	 
>2319	CallExpression	blendAnimation . keyframes . clear ( )
>2320	ArgumentList	 
>2321	Callee	blendAnimation . keyframes . clear
>2322	MemberAccess	blendAnimation . keyframes . clear
>2323	Identifier	clear
>2324	MemberAccess	blendAnimation . keyframes
>2325	Identifier	keyframes
>2326	Identifier	blendAnimation
>2327	IfStatement	if ( ! to )
>2328	ReturnStatement	 
>2329	Identifier	false
>2330	Condition	 
>2331	UnaryOp	! to
>2332	Identifier	to
>2333	UnaryOperator	!
>2334	IdentifierDeclStatement	 
>2335	IdentifierDecl	* to = s -> getAnimation ( anim )
>2336	AssignmentExpr	* to = s -> getAnimation ( anim )
>2337	CallExpression	s -> getAnimation ( anim )
>2338	ArgumentList	anim
>2339	Argument	anim
>2340	Identifier	anim
>2341	Callee	s -> getAnimation
>2342	PtrMemberAccess	s -> getAnimation
>2343	Identifier	getAnimation
>2344	Identifier	s
>2345	Identifier	to
>2346	Identifier	to
>2347	IdentifierDeclType	Animation *
>2398	FunctionDef	AnimationLayer 
>2399	ParameterList	 
>2400	ReturnType	void
>2401	CompoundStatement	 
>2402	IfStatement	if ( ! enqueuedAnimation . empty ( ) )
>2403	CompoundStatement	 
>2404	ExpressionStatement	 
>2405	AssignmentExpr	enqueuedAnimationLoop = 0
>2406	PrimaryExpression	0
>2407	Identifier	enqueuedAnimationLoop
>2408	ExpressionStatement	 
>2409	AssignmentExpr	enqueuedAnimation = \"\"
>2410	PrimaryExpression	\"\"
>2411	Identifier	enqueuedAnimation
>2412	ExpressionStatement	 
>2413	CallExpression	animate ( enqueuedAnimation , enqueuedAnimationLoop )
>2414	ArgumentList	enqueuedAnimation
>2415	Argument	enqueuedAnimationLoop
>2416	Identifier	enqueuedAnimationLoop
>2417	Argument	enqueuedAnimation
>2418	Identifier	enqueuedAnimation
>2419	Callee	animate
>2420	Identifier	animate
>2421	Condition	 
>2422	UnaryOp	! enqueuedAnimation . empty ( )
>2423	CallExpression	enqueuedAnimation . empty ( )
>2424	ArgumentList	 
>2425	Callee	enqueuedAnimation . empty
>2426	MemberAccess	enqueuedAnimation . empty
>2427	Identifier	empty
>2428	Identifier	enqueuedAnimation
>2429	UnaryOperator	!
>2430	ExpressionStatement	 
>2431	AssignmentExpr	animating = false
>2432	Identifier	false
>2433	Identifier	animating
>2442	FunctionDef	AnimationLayer 
>2443	ParameterList	 
>2444	ReturnType	bool
>2445	CompoundStatement	 
>2446	ReturnStatement	 
>2447	Identifier	animating
>2452	FunctionDef	AnimationLayer 
>2453	ParameterList	 
>2454	ReturnType	float
>2455	CompoundStatement	 
>2456	ReturnStatement	 
>2457	Identifier	animationLength
>2462	FunctionDef	Animation 
>2463	ParameterList	 
>2464	ReturnType	int
>2465	CompoundStatement	 
>2466	ReturnStatement	 
>2467	CallExpression	keyframes . size ( )
>2468	ArgumentList	 
>2469	Callee	keyframes . size
>2470	MemberAccess	keyframes . size
>2471	Identifier	size
>2472	Identifier	keyframes
>2478	FunctionDef	Animation 
>2479	ParameterList	int key
>2480	Parameter	 
>2481	Identifier	key
>2482	ParameterType	int
>2483	ReturnType	SkeletalKeyframe *
>2484	CompoundStatement	 
>2485	ReturnStatement	 
>2486	UnaryOp	& keyframes [ key ]
>2487	ArrayIndexing	keyframes [ key ]
>2488	Identifier	key
>2489	Identifier	keyframes
>2490	UnaryOperator	&
>2491	IfStatement	if ( key < 0 || key >= keyframes . size ( ) )
>2492	ReturnStatement	 
>2493	PrimaryExpression	0
>2494	Condition	 
>2495	OrExpression	key < 0 || key >= keyframes . size ( )
>2496	RelationalExpression	key >= keyframes . size ( )
>2497	CallExpression	keyframes . size ( )
>2498	ArgumentList	 
>2499	Callee	keyframes . size
>2500	MemberAccess	keyframes . size
>2501	Identifier	size
>2502	Identifier	keyframes
>2503	Identifier	key
>2504	RelationalExpression	key < 0
>2505	PrimaryExpression	0
>2506	Identifier	key
>2515	FunctionDef	Animation 
>2516	ParameterList	 
>2517	ReturnType	void
>2518	CompoundStatement	 
>2519	ExpressionStatement	 
>2520	CallExpression	reorderKeyframes ( )
>2521	ArgumentList	 
>2522	Callee	reorderKeyframes
>2523	Identifier	reorderKeyframes
>2524	ForStatement	for ( int i = sz ; i >= 0 ; i -- )
>2525	CompoundStatement	 
>2526	ExpressionStatement	 
>2527	AssignmentExpr	keyframes [ keyframes . size ( ) - 1 ] . t = copy2 [ sz - i ] . t
>2528	MemberAccess	copy2 [ sz - i ] . t
>2529	Identifier	t
>2530	ArrayIndexing	copy2 [ sz - i ]
>2531	AdditiveExpression	sz - i
>2532	Identifier	i
>2533	Identifier	sz
>2534	Identifier	copy2
>2535	MemberAccess	keyframes [ keyframes . size ( ) - 1 ] . t
>2536	Identifier	t
>2537	ArrayIndexing	keyframes [ keyframes . size ( ) - 1 ]
>2538	AdditiveExpression	keyframes . size ( ) - 1
>2539	PrimaryExpression	1
>2540	CallExpression	keyframes . size ( )
>2541	ArgumentList	 
>2542	Callee	keyframes . size
>2543	MemberAccess	keyframes . size
>2544	Identifier	size
>2545	Identifier	keyframes
>2546	Identifier	keyframes
>2547	ExpressionStatement	 
>2548	CallExpression	keyframes . push_back ( copy [ i ] )
>2549	ArgumentList	copy [ i ]
>2550	Argument	copy [ i ]
>2551	ArrayIndexing	copy [ i ]
>2552	Identifier	i
>2553	Identifier	copy
>2554	Callee	keyframes . push_back
>2555	MemberAccess	keyframes . push_back
>2556	Identifier	push_back
>2557	Identifier	keyframes
>2558	IncDecOp	 
>2559	IncDec	--
>2560	Identifier	i
>2561	Condition	 
>2562	RelationalExpression	i >= 0
>2563	PrimaryExpression	0
>2564	Identifier	i
>2565	ForInit	 
>2566	IdentifierDeclStatement	int i = sz ;
>2567	IdentifierDecl	i = sz
>2568	AssignmentExpr	i = sz
>2569	Identifier	sz
>2570	Identifier	sz
>2571	Identifier	i
>2572	IdentifierDeclType	int
>2573	IdentifierDeclStatement	 
>2574	IdentifierDecl	sz = copy . size ( ) - 1
>2575	AssignmentExpr	sz = copy . size ( ) - 1
>2576	AdditiveExpression	copy . size ( ) - 1
>2577	PrimaryExpression	1
>2578	CallExpression	copy . size ( )
>2579	ArgumentList	 
>2580	Callee	copy . size
>2581	MemberAccess	copy . size
>2582	Identifier	size
>2583	Identifier	copy
>2584	Identifier	sz
>2585	Identifier	sz
>2586	IdentifierDeclType	int
>2587	ExpressionStatement	 
>2588	CallExpression	keyframes . clear ( )
>2589	ArgumentList	 
>2590	Callee	keyframes . clear
>2591	MemberAccess	keyframes . clear
>2592	Identifier	clear
>2593	Identifier	keyframes
>2594	IdentifierDeclStatement	 
>2595	IdentifierDecl	copy2 = keyframes
>2596	AssignmentExpr	copy2 = keyframes
>2597	Identifier	keyframes
>2598	Identifier	keyframes
>2599	Identifier	copy2
>2600	IdentifierDeclType	Keyframes
>2601	IdentifierDeclStatement	 
>2602	IdentifierDecl	copy = keyframes
>2603	AssignmentExpr	copy = keyframes
>2604	Identifier	keyframes
>2605	Identifier	keyframes
>2606	Identifier	copy
>2607	IdentifierDeclType	Keyframes
>2626	FunctionDef	Animation 
>2627	ParameterList	 
>2628	ReturnType	float
>2629	CompoundStatement	 
>2630	ReturnStatement	 
>2631	PtrMemberAccess	getLastKeyframe ( ) -> t
>2632	Identifier	t
>2633	CallExpression	getLastKeyframe ( )
>2634	ArgumentList	 
>2635	Callee	getLastKeyframe
>2636	Identifier	getLastKeyframe
>2643	FunctionDef	Animation 
>2644	ParameterList	 
>2645	ReturnType	SkeletalKeyframe *
>2646	CompoundStatement	 
>2647	ReturnStatement	 
>2648	PrimaryExpression	0
>2649	IfStatement	if ( ! keyframes . empty ( ) )
>2650	ReturnStatement	 
>2651	UnaryOp	& keyframes [ keyframes . size ( ) - 1 ]
>2652	ArrayIndexing	keyframes [ keyframes . size ( ) - 1 ]
>2653	AdditiveExpression	keyframes . size ( ) - 1
>2654	PrimaryExpression	1
>2655	CallExpression	keyframes . size ( )
>2656	ArgumentList	 
>2657	Callee	keyframes . size
>2658	MemberAccess	keyframes . size
>2659	Identifier	size
>2660	Identifier	keyframes
>2661	Identifier	keyframes
>2662	UnaryOperator	&
>2663	Condition	 
>2664	UnaryOp	! keyframes . empty ( )
>2665	CallExpression	keyframes . empty ( )
>2666	ArgumentList	 
>2667	Callee	keyframes . empty
>2668	MemberAccess	keyframes . empty
>2669	Identifier	empty
>2670	Identifier	keyframes
>2671	UnaryOperator	!
>2680	FunctionDef	Animation 
>2681	ParameterList	 
>2682	ReturnType	SkeletalKeyframe *
>2683	CompoundStatement	 
>2684	ReturnStatement	 
>2685	PrimaryExpression	0
>2686	IfStatement	if ( ! keyframes . empty ( ) )
>2687	ReturnStatement	 
>2688	UnaryOp	& keyframes [ 0 ]
>2689	ArrayIndexing	keyframes [ 0 ]
>2690	PrimaryExpression	0
>2691	Identifier	keyframes
>2692	UnaryOperator	&
>2693	Condition	 
>2694	UnaryOp	! keyframes . empty ( )
>2695	CallExpression	keyframes . empty ( )
>2696	ArgumentList	 
>2697	Callee	keyframes . empty
>2698	MemberAccess	keyframes . empty
>2699	Identifier	empty
>2700	Identifier	keyframes
>2701	UnaryOperator	!
>2708	FunctionDef	Animation 
>2709	ParameterList	 
>2710	ReturnType	void
>2711	CompoundStatement	 
>2712	ForStatement	for ( int i = 0 ; i < keyframes . size ( ) ; i ++ )
>2713	CompoundStatement	 
>2714	ForStatement	for ( int j = 0 ; j < keyframes . size ( ) - 1 ; j ++ )
>2715	CompoundStatement	 
>2716	IfStatement	if ( keyframes [ j ] . t > keyframes [ j + 1 ] . t )
>2717	CompoundStatement	 
>2718	ExpressionStatement	 
>2719	AssignmentExpr	keyframes [ j ] = temp
>2720	Identifier	temp
>2721	ArrayIndexing	keyframes [ j ]
>2722	Identifier	j
>2723	Identifier	keyframes
>2724	ExpressionStatement	 
>2725	AssignmentExpr	keyframes [ j + 1 ] = keyframes [ j ]
>2726	ArrayIndexing	keyframes [ j ]
>2727	Identifier	j
>2728	Identifier	keyframes
>2729	ArrayIndexing	keyframes [ j + 1 ]
>2730	AdditiveExpression	j + 1
>2731	PrimaryExpression	1
>2732	Identifier	j
>2733	Identifier	keyframes
>2734	IdentifierDeclStatement	 
>2735	IdentifierDecl	temp = keyframes [ j + 1 ]
>2736	AssignmentExpr	temp = keyframes [ j + 1 ]
>2737	ArrayIndexing	keyframes [ j + 1 ]
>2738	AdditiveExpression	j + 1
>2739	PrimaryExpression	1
>2740	Identifier	j
>2741	Identifier	keyframes
>2742	Identifier	temp
>2743	Identifier	temp
>2744	IdentifierDeclType	SkeletalKeyframe
>2745	Condition	 
>2746	RelationalExpression	keyframes [ j ] . t > keyframes [ j + 1 ] . t
>2747	MemberAccess	keyframes [ j + 1 ] . t
>2748	Identifier	t
>2749	ArrayIndexing	keyframes [ j + 1 ]
>2750	AdditiveExpression	j + 1
>2751	PrimaryExpression	1
>2752	Identifier	j
>2753	Identifier	keyframes
>2754	MemberAccess	keyframes [ j ] . t
>2755	Identifier	t
>2756	ArrayIndexing	keyframes [ j ]
>2757	Identifier	j
>2758	Identifier	keyframes
>2759	IncDecOp	 
>2760	IncDec	++
>2761	Identifier	j
>2762	Condition	 
>2763	RelationalExpression	j < keyframes . size ( ) - 1
>2764	AdditiveExpression	keyframes . size ( ) - 1
>2765	PrimaryExpression	1
>2766	CallExpression	keyframes . size ( )
>2767	ArgumentList	 
>2768	Callee	keyframes . size
>2769	MemberAccess	keyframes . size
>2770	Identifier	size
>2771	Identifier	keyframes
>2772	Identifier	j
>2773	ForInit	 
>2774	IdentifierDeclStatement	int j = 0 ;
>2775	IdentifierDecl	j = 0
>2776	AssignmentExpr	j = 0
>2777	PrimaryExpression	0
>2778	Identifier	j
>2779	Identifier	j
>2780	IdentifierDeclType	int
>2781	IncDecOp	 
>2782	IncDec	++
>2783	Identifier	i
>2784	Condition	 
>2785	RelationalExpression	i < keyframes . size ( )
>2786	CallExpression	keyframes . size ( )
>2787	ArgumentList	 
>2788	Callee	keyframes . size
>2789	MemberAccess	keyframes . size
>2790	Identifier	size
>2791	Identifier	keyframes
>2792	Identifier	i
>2793	ForInit	 
>2794	IdentifierDeclStatement	int i = 0 ;
>2795	IdentifierDecl	i = 0
>2796	AssignmentExpr	i = 0
>2797	PrimaryExpression	0
>2798	Identifier	i
>2799	Identifier	i
>2800	IdentifierDeclType	int
>2813	FunctionDef	Animation 
>2814	ParameterList	int key , float toffset
>2815	Parameter	 
>2816	Identifier	toffset
>2817	ParameterType	float
>2818	Parameter	 
>2819	Identifier	key
>2820	ParameterType	int
>2821	ReturnType	void
>2822	CompoundStatement	 
>2823	ExpressionStatement	 
>2824	AssignmentExpr	keyframes [ key + 1 ] . t += toffset
>2825	Identifier	toffset
>2826	MemberAccess	keyframes [ key + 1 ] . t
>2827	Identifier	t
>2828	ArrayIndexing	keyframes [ key + 1 ]
>2829	AdditiveExpression	key + 1
>2830	PrimaryExpression	1
>2831	Identifier	key
>2832	Identifier	keyframes
>2833	ForStatement	for ( i = key ; i < copy . size ( ) ; i ++ )
>2834	ExpressionStatement	 
>2835	CallExpression	keyframes . push_back ( copy [ i ] )
>2836	ArgumentList	copy [ i ]
>2837	Argument	copy [ i ]
>2838	ArrayIndexing	copy [ i ]
>2839	Identifier	i
>2840	Identifier	copy
>2841	Callee	keyframes . push_back
>2842	MemberAccess	keyframes . push_back
>2843	Identifier	push_back
>2844	Identifier	keyframes
>2845	IncDecOp	 
>2846	IncDec	++
>2847	Identifier	i
>2848	Condition	 
>2849	RelationalExpression	i < copy . size ( )
>2850	CallExpression	copy . size ( )
>2851	ArgumentList	 
>2852	Callee	copy . size
>2853	MemberAccess	copy . size
>2854	Identifier	size
>2855	Identifier	copy
>2856	Identifier	i
>2857	ForInit	 
>2858	AssignmentExpr	i = key
>2859	Identifier	key
>2860	Identifier	i
>2861	ForStatement	for ( i = 0 ; i <= key ; i ++ )
>2862	ExpressionStatement	 
>2863	CallExpression	keyframes . push_back ( copy [ i ] )
>2864	ArgumentList	copy [ i ]
>2865	Argument	copy [ i ]
>2866	ArrayIndexing	copy [ i ]
>2867	Identifier	i
>2868	Identifier	copy
>2869	Callee	keyframes . push_back
>2870	MemberAccess	keyframes . push_back
>2871	Identifier	push_back
>2872	Identifier	keyframes
>2873	IncDecOp	 
>2874	IncDec	++
>2875	Identifier	i
>2876	Condition	 
>2877	RelationalExpression	i <= key
>2878	Identifier	key
>2879	Identifier	i
>2880	ForInit	 
>2881	AssignmentExpr	i = 0
>2882	PrimaryExpression	0
>2883	Identifier	i
>2884	IdentifierDeclStatement	 
>2885	IdentifierDecl	i = 0
>2886	AssignmentExpr	i = 0
>2887	PrimaryExpression	0
>2888	Identifier	i
>2889	Identifier	i
>2890	IdentifierDeclType	int
>2891	ExpressionStatement	 
>2892	CallExpression	keyframes . clear ( )
>2893	ArgumentList	 
>2894	Callee	keyframes . clear
>2895	MemberAccess	keyframes . clear
>2896	Identifier	clear
>2897	Identifier	keyframes
>2898	IdentifierDeclStatement	 
>2899	IdentifierDecl	copy = this -> keyframes
>2900	AssignmentExpr	copy = this -> keyframes
>2901	PtrMemberAccess	this -> keyframes
>2902	Identifier	keyframes
>2903	Identifier	this
>2904	Identifier	copy
>2905	Identifier	copy
>2906	IdentifierDeclType	std 
>2924	FunctionDef	Animation 
>2925	ParameterList	int key
>2926	Parameter	 
>2927	Identifier	key
>2928	ParameterType	int
>2929	ReturnType	void
>2930	CompoundStatement	 
>2931	ForStatement	for ( i = key + 1 ; i < copy . size ( ) ; i ++ )
>2932	ExpressionStatement	 
>2933	CallExpression	keyframes . push_back ( copy [ i ] )
>2934	ArgumentList	copy [ i ]
>2935	Argument	copy [ i ]
>2936	ArrayIndexing	copy [ i ]
>2937	Identifier	i
>2938	Identifier	copy
>2939	Callee	keyframes . push_back
>2940	MemberAccess	keyframes . push_back
>2941	Identifier	push_back
>2942	Identifier	keyframes
>2943	IncDecOp	 
>2944	IncDec	++
>2945	Identifier	i
>2946	Condition	 
>2947	RelationalExpression	i < copy . size ( )
>2948	CallExpression	copy . size ( )
>2949	ArgumentList	 
>2950	Callee	copy . size
>2951	MemberAccess	copy . size
>2952	Identifier	size
>2953	Identifier	copy
>2954	Identifier	i
>2955	ForInit	 
>2956	AssignmentExpr	i = key + 1
>2957	AdditiveExpression	key + 1
>2958	PrimaryExpression	1
>2959	Identifier	key
>2960	Identifier	i
>2961	ForStatement	for ( i = 0 ; i < key ; i ++ )
>2962	ExpressionStatement	 
>2963	CallExpression	keyframes . push_back ( copy [ i ] )
>2964	ArgumentList	copy [ i ]
>2965	Argument	copy [ i ]
>2966	ArrayIndexing	copy [ i ]
>2967	Identifier	i
>2968	Identifier	copy
>2969	Callee	keyframes . push_back
>2970	MemberAccess	keyframes . push_back
>2971	Identifier	push_back
>2972	Identifier	keyframes
>2973	IncDecOp	 
>2974	IncDec	++
>2975	Identifier	i
>2976	Condition	 
>2977	RelationalExpression	i < key
>2978	Identifier	key
>2979	Identifier	i
>2980	ForInit	 
>2981	AssignmentExpr	i = 0
>2982	PrimaryExpression	0
>2983	Identifier	i
>2984	IdentifierDeclStatement	 
>2985	IdentifierDecl	i = 0
>2986	AssignmentExpr	i = 0
>2987	PrimaryExpression	0
>2988	Identifier	i
>2989	Identifier	i
>2990	IdentifierDeclType	int
>2991	ExpressionStatement	 
>2992	CallExpression	keyframes . clear ( )
>2993	ArgumentList	 
>2994	Callee	keyframes . clear
>2995	MemberAccess	keyframes . clear
>2996	Identifier	clear
>2997	Identifier	keyframes
>2998	IdentifierDeclStatement	 
>2999	IdentifierDecl	copy = this -> keyframes
>3000	AssignmentExpr	copy = this -> keyframes
>3001	PtrMemberAccess	this -> keyframes
>3002	Identifier	keyframes
>3003	Identifier	this
>3004	Identifier	copy
>3005	Identifier	copy
>3006	IdentifierDeclType	std 
>3020	FunctionDef	Animation 
>3021	ParameterList	SkeletalKeyframe * skey
>3022	Parameter	 
>3023	Identifier	skey
>3024	ParameterType	SkeletalKeyframe *
>3025	ReturnType	int
>3026	CompoundStatement	 
>3027	ReturnStatement	 
>3028	UnaryOp	- 1
>3029	PrimaryExpression	1
>3030	UnaryOperator	-
>3031	ForStatement	for ( int i = 0 ; i < keyframes . size ( ) ; i ++ )
>3032	CompoundStatement	 
>3033	IfStatement	if ( & keyframes [ i ] == skey )
>3034	ReturnStatement	 
>3035	Identifier	i
>3036	Condition	 
>3037	EqualityExpression	& keyframes [ i ] == skey
>3038	Identifier	skey
>3039	UnaryOp	& keyframes [ i ]
>3040	ArrayIndexing	keyframes [ i ]
>3041	Identifier	i
>3042	Identifier	keyframes
>3043	UnaryOperator	&
>3044	IncDecOp	 
>3045	IncDec	++
>3046	Identifier	i
>3047	Condition	 
>3048	RelationalExpression	i < keyframes . size ( )
>3049	CallExpression	keyframes . size ( )
>3050	ArgumentList	 
>3051	Callee	keyframes . size
>3052	MemberAccess	keyframes . size
>3053	Identifier	size
>3054	Identifier	keyframes
>3055	Identifier	i
>3056	ForInit	 
>3057	IdentifierDeclStatement	int i = 0 ;
>3058	IdentifierDecl	i = 0
>3059	AssignmentExpr	i = 0
>3060	PrimaryExpression	0
>3061	Identifier	i
>3062	Identifier	i
>3063	IdentifierDeclType	int
>3073	FunctionDef	SkeletalKeyframe 
>3074	ParameterList	int idx
>3075	Parameter	 
>3076	Identifier	idx
>3077	ParameterType	int
>3078	ReturnType	BoneKeyframe *
>3079	CompoundStatement	 
>3080	ReturnStatement	 
>3081	PrimaryExpression	0
>3082	ForStatement	for ( int i = 0 ; i < keyframes . size ( ) ; i ++ )
>3083	CompoundStatement	 
>3084	IfStatement	if ( keyframes [ i ] . idx == idx )
>3085	CompoundStatement	 
>3086	ReturnStatement	 
>3087	UnaryOp	& keyframes [ i ]
>3088	ArrayIndexing	keyframes [ i ]
>3089	Identifier	i
>3090	Identifier	keyframes
>3091	UnaryOperator	&
>3092	Condition	 
>3093	EqualityExpression	keyframes [ i ] . idx == idx
>3094	Identifier	idx
>3095	MemberAccess	keyframes [ i ] . idx
>3096	Identifier	idx
>3097	ArrayIndexing	keyframes [ i ]
>3098	Identifier	i
>3099	Identifier	keyframes
>3100	IncDecOp	 
>3101	IncDec	++
>3102	Identifier	i
>3103	Condition	 
>3104	RelationalExpression	i < keyframes . size ( )
>3105	CallExpression	keyframes . size ( )
>3106	ArgumentList	 
>3107	Callee	keyframes . size
>3108	MemberAccess	keyframes . size
>3109	Identifier	size
>3110	Identifier	keyframes
>3111	Identifier	i
>3112	ForInit	 
>3113	IdentifierDeclStatement	int i = 0 ;
>3114	IdentifierDecl	i = 0
>3115	AssignmentExpr	i = 0
>3116	PrimaryExpression	0
>3117	Identifier	i
>3118	Identifier	i
>3119	IdentifierDeclType	int
>3132	FunctionDef	Animation 
>3133	ParameterList	float t
>3134	Parameter	 
>3135	Identifier	t
>3136	ParameterType	float
>3137	ReturnType	SkeletalKeyframe *
>3138	CompoundStatement	 
>3139	ReturnStatement	 
>3140	UnaryOp	& keyframes [ kf ]
>3141	ArrayIndexing	keyframes [ kf ]
>3142	Identifier	kf
>3143	Identifier	keyframes
>3144	UnaryOperator	&
>3145	IfStatement	if ( kf < 0 )
>3146	ExpressionStatement	 
>3147	AssignmentExpr	kf = 0
>3148	PrimaryExpression	0
>3149	Identifier	kf
>3150	Condition	 
>3151	RelationalExpression	kf < 0
>3152	PrimaryExpression	0
>3153	Identifier	kf
>3154	IfStatement	if ( kf >= keyframes . size ( ) )
>3155	ExpressionStatement	 
>3156	AssignmentExpr	kf = keyframes . size ( ) - 1
>3157	AdditiveExpression	keyframes . size ( ) - 1
>3158	PrimaryExpression	1
>3159	CallExpression	keyframes . size ( )
>3160	ArgumentList	 
>3161	Callee	keyframes . size
>3162	MemberAccess	keyframes . size
>3163	Identifier	size
>3164	Identifier	keyframes
>3165	Identifier	kf
>3166	Condition	 
>3167	RelationalExpression	kf >= keyframes . size ( )
>3168	CallExpression	keyframes . size ( )
>3169	ArgumentList	 
>3170	Callee	keyframes . size
>3171	MemberAccess	keyframes . size
>3172	Identifier	size
>3173	Identifier	keyframes
>3174	Identifier	kf
>3175	IfStatement	if ( kf == - 1 )
>3176	ReturnStatement	 
>3177	PrimaryExpression	0
>3178	Condition	 
>3179	EqualityExpression	kf == - 1
>3180	UnaryOp	- 1
>3181	PrimaryExpression	1
>3182	UnaryOperator	-
>3183	Identifier	kf
>3184	ForStatement	for ( int i = keyframes . size ( ) - 1 ; i >= 0 ; i -- )
>3185	CompoundStatement	 
>3186	IfStatement	if ( t >= keyframes [ i ] . t )
>3187	CompoundStatement	 
>3188	BreakStatement	 
>3189	ExpressionStatement	 
>3190	AssignmentExpr	kf = i
>3191	Identifier	i
>3192	Identifier	kf
>3193	Condition	 
>3194	RelationalExpression	t >= keyframes [ i ] . t
>3195	MemberAccess	keyframes [ i ] . t
>3196	Identifier	t
>3197	ArrayIndexing	keyframes [ i ]
>3198	Identifier	i
>3199	Identifier	keyframes
>3200	Identifier	t
>3201	IncDecOp	 
>3202	IncDec	--
>3203	Identifier	i
>3204	Condition	 
>3205	RelationalExpression	i >= 0
>3206	PrimaryExpression	0
>3207	Identifier	i
>3208	ForInit	 
>3209	IdentifierDeclStatement	int i = keyframes . size ( ) - 1 ;
>3210	IdentifierDecl	i = keyframes . size ( ) - 1
>3211	AssignmentExpr	i = keyframes . size ( ) - 1
>3212	AdditiveExpression	keyframes . size ( ) - 1
>3213	PrimaryExpression	1
>3214	CallExpression	keyframes . size ( )
>3215	ArgumentList	 
>3216	Callee	keyframes . size
>3217	MemberAccess	keyframes . size
>3218	Identifier	size
>3219	Identifier	keyframes
>3220	Identifier	i
>3221	Identifier	i
>3222	IdentifierDeclType	int
>3223	IdentifierDeclStatement	 
>3224	IdentifierDecl	kf = - 1
>3225	AssignmentExpr	kf = - 1
>3226	UnaryOp	- 1
>3227	PrimaryExpression	1
>3228	UnaryOperator	-
>3229	Identifier	kf
>3230	Identifier	kf
>3231	IdentifierDeclType	int
>3245	FunctionDef	Animation 
>3246	ParameterList	float t
>3247	Parameter	 
>3248	Identifier	t
>3249	ParameterType	float
>3250	ReturnType	SkeletalKeyframe *
>3251	CompoundStatement	 
>3252	ReturnStatement	 
>3253	UnaryOp	& keyframes [ kf ]
>3254	ArrayIndexing	keyframes [ kf ]
>3255	Identifier	kf
>3256	Identifier	keyframes
>3257	UnaryOperator	&
>3258	IfStatement	if ( kf < 0 )
>3259	ExpressionStatement	 
>3260	AssignmentExpr	kf = 0
>3261	PrimaryExpression	0
>3262	Identifier	kf
>3263	Condition	 
>3264	RelationalExpression	kf < 0
>3265	PrimaryExpression	0
>3266	Identifier	kf
>3267	IfStatement	if ( kf >= keyframes . size ( ) )
>3268	ExpressionStatement	 
>3269	AssignmentExpr	kf = keyframes . size ( ) - 1
>3270	AdditiveExpression	keyframes . size ( ) - 1
>3271	PrimaryExpression	1
>3272	CallExpression	keyframes . size ( )
>3273	ArgumentList	 
>3274	Callee	keyframes . size
>3275	MemberAccess	keyframes . size
>3276	Identifier	size
>3277	Identifier	keyframes
>3278	Identifier	kf
>3279	Condition	 
>3280	RelationalExpression	kf >= keyframes . size ( )
>3281	CallExpression	keyframes . size ( )
>3282	ArgumentList	 
>3283	Callee	keyframes . size
>3284	MemberAccess	keyframes . size
>3285	Identifier	size
>3286	Identifier	keyframes
>3287	Identifier	kf
>3288	IfStatement	if ( kf == - 1 )
>3289	ReturnStatement	 
>3290	PrimaryExpression	0
>3291	Condition	 
>3292	EqualityExpression	kf == - 1
>3293	UnaryOp	- 1
>3294	PrimaryExpression	1
>3295	UnaryOperator	-
>3296	Identifier	kf
>3297	ForStatement	for ( int i = 0 ; i < keyframes . size ( ) ; i ++ )
>3298	CompoundStatement	 
>3299	IfStatement	if ( t <= keyframes [ i ] . t )
>3300	CompoundStatement	 
>3301	BreakStatement	 
>3302	ExpressionStatement	 
>3303	AssignmentExpr	kf = i
>3304	Identifier	i
>3305	Identifier	kf
>3306	Condition	 
>3307	RelationalExpression	t <= keyframes [ i ] . t
>3308	MemberAccess	keyframes [ i ] . t
>3309	Identifier	t
>3310	ArrayIndexing	keyframes [ i ]
>3311	Identifier	i
>3312	Identifier	keyframes
>3313	Identifier	t
>3314	IncDecOp	 
>3315	IncDec	++
>3316	Identifier	i
>3317	Condition	 
>3318	RelationalExpression	i < keyframes . size ( )
>3319	CallExpression	keyframes . size ( )
>3320	ArgumentList	 
>3321	Callee	keyframes . size
>3322	MemberAccess	keyframes . size
>3323	Identifier	size
>3324	Identifier	keyframes
>3325	Identifier	i
>3326	ForInit	 
>3327	IdentifierDeclStatement	int i = 0 ;
>3328	IdentifierDecl	i = 0
>3329	AssignmentExpr	i = 0
>3330	PrimaryExpression	0
>3331	Identifier	i
>3332	Identifier	i
>3333	IdentifierDeclType	int
>3334	IdentifierDeclStatement	 
>3335	IdentifierDecl	kf = - 1
>3336	AssignmentExpr	kf = - 1
>3337	UnaryOp	- 1
>3338	PrimaryExpression	1
>3339	UnaryOperator	-
>3340	Identifier	kf
>3341	Identifier	kf
>3342	IdentifierDeclType	int
>3356	FunctionDef	SkeletalSprite 
>3357	ParameterList	 
>3358	CompoundStatement	 
>3359	ExpressionStatement	 
>3360	AssignmentExpr	selectedBone = - 1
>3361	UnaryOp	- 1
>3362	PrimaryExpression	1
>3363	UnaryOperator	-
>3364	Identifier	selectedBone
>3365	ForStatement	for ( int i = 0 ; i < animLayers . size ( ) ; i ++ )
>3366	ExpressionStatement	 
>3367	CallExpression	animLayers [ i ] . setSkeletalSprite ( this )
>3368	ArgumentList	this
>3369	Argument	this
>3370	Identifier	this
>3371	Callee	animLayers [ i ] . setSkeletalSprite
>3372	MemberAccess	animLayers [ i ] . setSkeletalSprite
>3373	Identifier	setSkeletalSprite
>3374	ArrayIndexing	animLayers [ i ]
>3375	Identifier	i
>3376	Identifier	animLayers
>3377	IncDecOp	 
>3378	IncDec	++
>3379	Identifier	i
>3380	Condition	 
>3381	RelationalExpression	i < animLayers . size ( )
>3382	CallExpression	animLayers . size ( )
>3383	ArgumentList	 
>3384	Callee	animLayers . size
>3385	MemberAccess	animLayers . size
>3386	Identifier	size
>3387	Identifier	animLayers
>3388	Identifier	i
>3389	ForInit	 
>3390	IdentifierDeclStatement	int i = 0 ;
>3391	IdentifierDecl	i = 0
>3392	AssignmentExpr	i = 0
>3393	PrimaryExpression	0
>3394	Identifier	i
>3395	Identifier	i
>3396	IdentifierDeclType	int
>3397	ExpressionStatement	 
>3398	CallExpression	animLayers . resize ( 10 )
>3399	ArgumentList	10
>3400	Argument	10
>3401	PrimaryExpression	10
>3402	Callee	animLayers . resize
>3403	MemberAccess	animLayers . resize
>3404	Identifier	resize
>3405	Identifier	animLayers
>3406	ExpressionStatement	 
>3407	AssignmentExpr	loaded = false
>3408	Identifier	false
>3409	Identifier	loaded
>3410	ExpressionStatement	 
>3411	AssignmentExpr	animKeyNotify = 0
>3412	PrimaryExpression	0
>3413	Identifier	animKeyNotify
>3414	ExpressionStatement	 
>3415	AssignmentExpr	frozen = false
>3416	Identifier	false
>3417	Identifier	frozen
>3432	FunctionDef	SkeletalSprite 
>3433	ParameterList	RenderObject * r
>3434	Parameter	 
>3435	Identifier	r
>3436	ParameterType	RenderObject *
>3437	ReturnType	void
>3438	CompoundStatement	 
>3439	ExpressionStatement	 
>3440	AssignmentExpr	animKeyNotify = r
>3441	Identifier	r
>3442	Identifier	animKeyNotify
>3448	FunctionDef	SkeletalSprite 
>3449	ParameterList	const std 
>3450	Parameter	 
>3451	Identifier	layer
>3452	ParameterType	int
>3453	Parameter	 
>3454	Identifier	loop
>3455	ParameterType	int
>3456	Parameter	 
>3457	Identifier	animation
>3458	ParameterType	const std 
>3459	ReturnType	void
>3460	CompoundStatement	 
>3461	ExpressionStatement	 
>3462	CallExpression	animLayers [ layer ] . animate ( animation , loop )
>3463	ArgumentList	animation
>3464	Argument	loop
>3465	Identifier	loop
>3466	Argument	animation
>3467	Identifier	animation
>3468	Callee	animLayers [ layer ] . animate
>3469	MemberAccess	animLayers [ layer ] . animate
>3470	Identifier	animate
>3471	ArrayIndexing	animLayers [ layer ]
>3472	Identifier	layer
>3473	Identifier	animLayers
>3483	FunctionDef	SkeletalSprite 
>3484	ParameterList	const std 
>3485	Parameter	 
>3486	Identifier	layer
>3487	ParameterType	int
>3488	Parameter	 
>3489	Identifier	loop
>3490	ParameterType	int
>3491	Parameter	 
>3492	Identifier	time
>3493	ParameterType	float
>3494	Parameter	 
>3495	Identifier	anim
>3496	ParameterType	const std 
>3497	ReturnType	float
>3498	CompoundStatement	 
>3499	ReturnStatement	 
>3500	PrimaryExpression	0
>3501	ExpressionStatement	 
>3502	CallExpression	errorLog ( os . str ( ) )
>3503	ArgumentList	os . str ( )
>3504	Argument	os . str ( )
>3505	CallExpression	os . str ( )
>3506	ArgumentList	 
>3507	Callee	os . str
>3508	MemberAccess	os . str
>3509	Identifier	str
>3510	Identifier	os
>3511	Callee	errorLog
>3512	Identifier	errorLog
>3513	ExpressionStatement	 
>3514	ShiftExpression	os << \"playing animation on invalid layer
>3515	ShiftExpression	\"playing animation on invalid layer
>3516	Identifier	layer
>3517	PrimaryExpression	\"playing animation on invalid layer
>3518	Identifier	os
>3519	IdentifierDeclStatement	 
>3520	IdentifierDecl	os
>3521	Identifier	os
>3522	IdentifierDeclType	std 
>3523	IfStatement	if ( animLayer )
>3524	ReturnStatement	 
>3525	CallExpression	animLayer -> transitionAnimate ( anim , time , loop )
>3526	ArgumentList	anim
>3527	Argument	loop
>3528	Identifier	loop
>3529	Argument	time
>3530	Identifier	time
>3531	Argument	anim
>3532	Identifier	anim
>3533	Callee	animLayer -> transitionAnimate
>3534	PtrMemberAccess	animLayer -> transitionAnimate
>3535	Identifier	transitionAnimate
>3536	Identifier	animLayer
>3537	Condition	 
>3538	Identifier	animLayer
>3539	IdentifierDeclStatement	 
>3540	IdentifierDecl	* animLayer = getAnimationLayer ( layer )
>3541	AssignmentExpr	* animLayer = getAnimationLayer ( layer )
>3542	CallExpression	getAnimationLayer ( layer )
>3543	ArgumentList	layer
>3544	Argument	layer
>3545	Identifier	layer
>3546	Callee	getAnimationLayer
>3547	Identifier	getAnimationLayer
>3548	Identifier	animLayer
>3549	Identifier	animLayer
>3550	IdentifierDeclType	AnimationLayer *
>3564	FunctionDef	SkeletalSprite 
>3565	ParameterList	int l
>3566	Parameter	 
>3567	Identifier	l
>3568	ParameterType	int
>3569	ReturnType	AnimationLayer *
>3570	CompoundStatement	 
>3571	ReturnStatement	 
>3572	PrimaryExpression	0
>3573	ExpressionStatement	 
>3574	CallExpression	debugLog ( os . str ( ) )
>3575	ArgumentList	os . str ( )
>3576	Argument	os . str ( )
>3577	CallExpression	os . str ( )
>3578	ArgumentList	 
>3579	Callee	os . str
>3580	MemberAccess	os . str
>3581	Identifier	str
>3582	Identifier	os
>3583	Callee	debugLog
>3584	Identifier	debugLog
>3585	ExpressionStatement	 
>3586	ShiftExpression	os << \"couldn't get animLayer
>3587	ShiftExpression	\"couldn't get animLayer
>3588	Identifier	l
>3589	PrimaryExpression	\"couldn't get animLayer
>3590	Identifier	os
>3591	IdentifierDeclStatement	 
>3592	IdentifierDecl	os
>3593	Identifier	os
>3594	IdentifierDeclType	std 
>3595	IfStatement	if ( l >= 0 && l < animLayers . size ( ) )
>3596	CompoundStatement	 
>3597	ReturnStatement	 
>3598	UnaryOp	& animLayers [ l ]
>3599	ArrayIndexing	animLayers [ l ]
>3600	Identifier	l
>3601	Identifier	animLayers
>3602	UnaryOperator	&
>3603	Condition	 
>3604	AndExpression	l >= 0 && l < animLayers . size ( )
>3605	RelationalExpression	l < animLayers . size ( )
>3606	CallExpression	animLayers . size ( )
>3607	ArgumentList	 
>3608	Callee	animLayers . size
>3609	MemberAccess	animLayers . size
>3610	Identifier	size
>3611	Identifier	animLayers
>3612	Identifier	l
>3613	RelationalExpression	l >= 0
>3614	PrimaryExpression	0
>3615	Identifier	l
>3626	FunctionDef	SkeletalSprite 
>3627	ParameterList	 
>3628	ReturnType	bool
>3629	CompoundStatement	 
>3630	ReturnStatement	 
>3631	Identifier	loaded
>3636	FunctionDef	SkeletalSprite 
>3637	ParameterList	float dt
>3638	Parameter	 
>3639	Identifier	dt
>3640	ParameterType	float
>3641	ReturnType	void
>3642	CompoundStatement	 
>3643	ForStatement	for ( i = 0 ; i < animLayers . size ( ) ; i ++ )
>3644	CompoundStatement	 
>3645	ExpressionStatement	 
>3646	CallExpression	animLayers [ i ] . update ( dt )
>3647	ArgumentList	dt
>3648	Argument	dt
>3649	Identifier	dt
>3650	Callee	animLayers [ i ] . update
>3651	MemberAccess	animLayers [ i ] . update
>3652	Identifier	update
>3653	ArrayIndexing	animLayers [ i ]
>3654	Identifier	i
>3655	Identifier	animLayers
>3656	IncDecOp	 
>3657	IncDec	++
>3658	Identifier	i
>3659	Condition	 
>3660	RelationalExpression	i < animLayers . size ( )
>3661	CallExpression	animLayers . size ( )
>3662	ArgumentList	 
>3663	Callee	animLayers . size
>3664	MemberAccess	animLayers . size
>3665	Identifier	size
>3666	Identifier	animLayers
>3667	Identifier	i
>3668	ForInit	 
>3669	AssignmentExpr	i = 0
>3670	PrimaryExpression	0
>3671	Identifier	i
>3672	ForStatement	for ( i = 0 ; i < bones . size ( ) ; i ++ )
>3673	CompoundStatement	 
>3674	IfStatement	if ( b && ! b -> collisionMask . empty ( ) )
>3675	CompoundStatement	 
>3676	ForStatement	for ( int i = 0 ; i < b -> collisionMask . size ( ) ; i ++ )
>3677	CompoundStatement	 
>3678	ExpressionStatement	 
>3679	AssignmentExpr	b -> transformedCollisionMask [ i ] = b -> getWorldCollidePosition ( b -> collisionMask [ i ] )
>3680	CallExpression	b -> getWorldCollidePosition ( b -> collisionMask [ i ] )
>3681	ArgumentList	b -> collisionMask [ i ]
>3682	Argument	b -> collisionMask [ i ]
>3683	ArrayIndexing	b -> collisionMask [ i ]
>3684	Identifier	i
>3685	PtrMemberAccess	b -> collisionMask
>3686	Identifier	collisionMask
>3687	Identifier	b
>3688	Callee	b -> getWorldCollidePosition
>3689	PtrMemberAccess	b -> getWorldCollidePosition
>3690	Identifier	getWorldCollidePosition
>3691	Identifier	b
>3692	ArrayIndexing	b -> transformedCollisionMask [ i ]
>3693	Identifier	i
>3694	PtrMemberAccess	b -> transformedCollisionMask
>3695	Identifier	transformedCollisionMask
>3696	Identifier	b
>3697	IncDecOp	 
>3698	IncDec	++
>3699	Identifier	i
>3700	Condition	 
>3701	RelationalExpression	i < b -> collisionMask . size ( )
>3702	CallExpression	b -> collisionMask . size ( )
>3703	ArgumentList	 
>3704	Callee	b -> collisionMask . size
>3705	MemberAccess	b -> collisionMask . size
>3706	Identifier	size
>3707	PtrMemberAccess	b -> collisionMask
>3708	Identifier	collisionMask
>3709	Identifier	b
>3710	Identifier	i
>3711	ForInit	 
>3712	IdentifierDeclStatement	int i = 0 ;
>3713	IdentifierDecl	i = 0
>3714	AssignmentExpr	i = 0
>3715	PrimaryExpression	0
>3716	Identifier	i
>3717	Identifier	i
>3718	IdentifierDeclType	int
>3719	IfStatement	if ( b -> collisionMask . size ( ) != b -> transformedCollisionMask . size ( ) )
>3720	CompoundStatement	 
>3721	ExpressionStatement	 
>3722	CallExpression	b -> transformedCollisionMask . resize ( b -> collisionMask . size ( ) )
>3723	ArgumentList	b -> collisionMask . size ( )
>3724	Argument	b -> collisionMask . size ( )
>3725	CallExpression	b -> collisionMask . size ( )
>3726	ArgumentList	 
>3727	Callee	b -> collisionMask . size
>3728	MemberAccess	b -> collisionMask . size
>3729	Identifier	size
>3730	PtrMemberAccess	b -> collisionMask
>3731	Identifier	collisionMask
>3732	Identifier	b
>3733	Callee	b -> transformedCollisionMask . resize
>3734	MemberAccess	b -> transformedCollisionMask . resize
>3735	Identifier	resize
>3736	PtrMemberAccess	b -> transformedCollisionMask
>3737	Identifier	transformedCollisionMask
>3738	Identifier	b
>3739	Condition	 
>3740	EqualityExpression	b -> collisionMask . size ( ) != b -> transformedCollisionMask . size ( )
>3741	CallExpression	b -> transformedCollisionMask . size ( )
>3742	ArgumentList	 
>3743	Callee	b -> transformedCollisionMask . size
>3744	MemberAccess	b -> transformedCollisionMask . size
>3745	Identifier	size
>3746	PtrMemberAccess	b -> transformedCollisionMask
>3747	Identifier	transformedCollisionMask
>3748	Identifier	b
>3749	CallExpression	b -> collisionMask . size ( )
>3750	ArgumentList	 
>3751	Callee	b -> collisionMask . size
>3752	MemberAccess	b -> collisionMask . size
>3753	Identifier	size
>3754	PtrMemberAccess	b -> collisionMask
>3755	Identifier	collisionMask
>3756	Identifier	b
>3757	Condition	 
>3758	AndExpression	b && ! b -> collisionMask . empty ( )
>3759	UnaryOp	! b -> collisionMask . empty ( )
>3760	CallExpression	b -> collisionMask . empty ( )
>3761	ArgumentList	 
>3762	Callee	b -> collisionMask . empty
>3763	MemberAccess	b -> collisionMask . empty
>3764	Identifier	empty
>3765	PtrMemberAccess	b -> collisionMask
>3766	Identifier	collisionMask
>3767	Identifier	b
>3768	UnaryOperator	!
>3769	Identifier	b
>3770	IdentifierDeclStatement	 
>3771	IdentifierDecl	* b = bones [ i ]
>3772	AssignmentExpr	* b = bones [ i ]
>3773	ArrayIndexing	bones [ i ]
>3774	Identifier	i
>3775	Identifier	bones
>3776	Identifier	b
>3777	Identifier	b
>3778	IdentifierDeclType	Bone *
>3779	IncDecOp	 
>3780	IncDec	++
>3781	Identifier	i
>3782	Condition	 
>3783	RelationalExpression	i < bones . size ( )
>3784	CallExpression	bones . size ( )
>3785	ArgumentList	 
>3786	Callee	bones . size
>3787	MemberAccess	bones . size
>3788	Identifier	size
>3789	Identifier	bones
>3790	Identifier	i
>3791	ForInit	 
>3792	AssignmentExpr	i = 0
>3793	PrimaryExpression	0
>3794	Identifier	i
>3795	IdentifierDeclStatement	 
>3796	IdentifierDecl	i = 0
>3797	AssignmentExpr	i = 0
>3798	PrimaryExpression	0
>3799	Identifier	i
>3800	Identifier	i
>3801	IdentifierDeclType	int
>3802	ExpressionStatement	 
>3803	CallExpression	RenderObject 
>3804	ArgumentList	dt
>3805	Argument	dt
>3806	Identifier	dt
>3807	Callee	RenderObject 
>3808	Identifier	RenderObject 
>3809	IfStatement	if ( frozen )
>3810	ReturnStatement	 
>3811	Condition	 
>3812	Identifier	frozen
>3837	FunctionDef	AnimationLayer 
>3838	ParameterList	float dt
>3839	Parameter	 
>3840	Identifier	dt
>3841	ParameterType	float
>3842	ReturnType	void
>3843	CompoundStatement	 
>3844	IfStatement	if ( animating )
>3845	ElseStatement	else
>3846	IfStatement	if ( ! animating )
>3847	CompoundStatement	 
>3848	IfStatement	if ( fallThru > 0 )
>3849	CompoundStatement	 
>3850	ExpressionStatement	 
>3851	CallExpression	updateBones ( )
>3852	ArgumentList	 
>3853	Callee	updateBones
>3854	Identifier	updateBones
>3855	IfStatement	if ( fallThru < 0 )
>3856	ExpressionStatement	 
>3857	AssignmentExpr	fallThru = 0
>3858	PrimaryExpression	0
>3859	Identifier	fallThru
>3860	Condition	 
>3861	RelationalExpression	fallThru < 0
>3862	PrimaryExpression	0
>3863	Identifier	fallThru
>3864	ExpressionStatement	 
>3865	AssignmentExpr	fallThru -= dt * fallThruSpeed
>3866	MultiplicativeExpression	dt * fallThruSpeed
>3867	Identifier	fallThruSpeed
>3868	Identifier	dt
>3869	Identifier	fallThru
>3870	Condition	 
>3871	RelationalExpression	fallThru > 0
>3872	PrimaryExpression	0
>3873	Identifier	fallThru
>3874	Condition	 
>3875	UnaryOp	! animating
>3876	Identifier	animating
>3877	UnaryOperator	!
>3878	CompoundStatement	 
>3879	ExpressionStatement	 
>3880	CallExpression	updateBones ( )
>3881	ArgumentList	 
>3882	Callee	updateBones
>3883	Identifier	updateBones
>3884	IfStatement	if ( timer > animationLength )
>3885	CompoundStatement	 
>3886	IfStatement	if ( loop == - 1 || loop > 0 )
>3887	ElseStatement	else
>3888	CompoundStatement	 
>3889	ExpressionStatement	 
>3890	CallExpression	stopAnimation ( )
>3891	ArgumentList	 
>3892	Callee	stopAnimation
>3893	Identifier	stopAnimation
>3894	CompoundStatement	 
>3895	ExpressionStatement	 
>3896	AssignmentExpr	timer = leftover
>3897	Identifier	leftover
>3898	Identifier	timer
>3899	IfStatement	if ( loop > 0 )
>3900	ExpressionStatement	 
>3901	IncDecOp	loop --
>3902	IncDec	--
>3903	Identifier	loop
>3904	Condition	 
>3905	RelationalExpression	loop > 0
>3906	PrimaryExpression	0
>3907	Identifier	loop
>3908	ExpressionStatement	 
>3909	CallExpression	playAnimation ( this -> currentAnimation , loop )
>3910	ArgumentList	this -> currentAnimation
>3911	Argument	loop
>3912	Identifier	loop
>3913	Argument	this -> currentAnimation
>3914	PtrMemberAccess	this -> currentAnimation
>3915	Identifier	currentAnimation
>3916	Identifier	this
>3917	Callee	playAnimation
>3918	Identifier	playAnimation
>3919	Condition	 
>3920	OrExpression	loop == - 1 || loop > 0
>3921	RelationalExpression	loop > 0
>3922	PrimaryExpression	0
>3923	Identifier	loop
>3924	EqualityExpression	loop == - 1
>3925	UnaryOp	- 1
>3926	PrimaryExpression	1
>3927	UnaryOperator	-
>3928	Identifier	loop
>3929	ExpressionStatement	 
>3930	AssignmentExpr	timer = animationLength
>3931	Identifier	animationLength
>3932	Identifier	timer
>3933	IfStatement	if ( animationLength > 0 )
>3934	ElseStatement	else
>3935	ExpressionStatement	 
>3936	AssignmentExpr	leftover = 0
>3937	PrimaryExpression	0
>3938	Identifier	leftover
>3939	ExpressionStatement	 
>3940	AssignmentExpr	leftover = fmodf ( timer , animationLength )
>3941	CallExpression	fmodf ( timer , animationLength )
>3942	ArgumentList	timer
>3943	Argument	animationLength
>3944	Identifier	animationLength
>3945	Argument	timer
>3946	Identifier	timer
>3947	Callee	fmodf
>3948	Identifier	fmodf
>3949	Identifier	leftover
>3950	Condition	 
>3951	RelationalExpression	animationLength > 0
>3952	PrimaryExpression	0
>3953	Identifier	animationLength
>3954	IdentifierDeclStatement	 
>3955	IdentifierDecl	leftover
>3956	Identifier	leftover
>3957	IdentifierDeclType	float
>3958	Condition	 
>3959	RelationalExpression	timer > animationLength
>3960	Identifier	animationLength
>3961	Identifier	timer
>3962	ExpressionStatement	 
>3963	AssignmentExpr	timer += dt * timeMultiplier . x
>3964	MultiplicativeExpression	dt * timeMultiplier . x
>3965	MemberAccess	timeMultiplier . x
>3966	Identifier	x
>3967	Identifier	timeMultiplier
>3968	Identifier	dt
>3969	Identifier	timer
>3970	Condition	 
>3971	Identifier	animating
>3972	ExpressionStatement	 
>3973	CallExpression	timeMultiplier . update ( dt )
>3974	ArgumentList	dt
>3975	Argument	dt
>3976	Identifier	dt
>3977	Callee	timeMultiplier . update
>3978	MemberAccess	timeMultiplier . update
>3979	Identifier	update
>3980	Identifier	timeMultiplier
>3998	FunctionDef	SkeletalSprite 
>3999	ParameterList	const std 
>4000	Parameter	 
>4001	Identifier	fn
>4002	ParameterType	const std 
>4003	ReturnType	bool
>4004	CompoundStatement	 
>4005	ReturnStatement	 
>4006	EqualityExpression	xml -> SaveFile ( file . c_str ( ) ) == XML_SUCCESS
>4007	Identifier	XML_SUCCESS
>4008	CallExpression	xml -> SaveFile ( file . c_str ( ) )
>4009	ArgumentList	file . c_str ( )
>4010	Argument	file . c_str ( )
>4011	CallExpression	file . c_str ( )
>4012	ArgumentList	 
>4013	Callee	file . c_str
>4014	MemberAccess	file . c_str
>4015	Identifier	c_str
>4016	Identifier	file
>4017	Callee	xml -> SaveFile
>4018	PtrMemberAccess	xml -> SaveFile
>4019	Identifier	SaveFile
>4020	Identifier	xml
>4021	ExpressionStatement	 
>4022	CallExpression	xml -> InsertEndChild ( animations )
>4023	ArgumentList	animations
>4024	Argument	animations
>4025	Identifier	animations
>4026	Callee	xml -> InsertEndChild
>4027	PtrMemberAccess	xml -> InsertEndChild
>4028	Identifier	InsertEndChild
>4029	Identifier	xml
>4030	ForStatement	for ( i = 0 ; i < this -> animations . size ( ) ; i ++ )
>4031	CompoundStatement	 
>4032	ExpressionStatement	 
>4033	CallExpression	animations -> InsertEndChild ( animation )
>4034	ArgumentList	animation
>4035	Argument	animation
>4036	Identifier	animation
>4037	Callee	animations -> InsertEndChild
>4038	PtrMemberAccess	animations -> InsertEndChild
>4039	Identifier	InsertEndChild
>4040	Identifier	animations
>4041	ForStatement	for ( int j = 0 ; j < a -> keyframes . size ( ) ; j ++ )
>4042	CompoundStatement	 
>4043	ExpressionStatement	 
>4044	CallExpression	animation -> InsertEndChild ( key )
>4045	ArgumentList	key
>4046	Argument	key
>4047	Identifier	key
>4048	Callee	animation -> InsertEndChild
>4049	PtrMemberAccess	animation -> InsertEndChild
>4050	Identifier	InsertEndChild
>4051	Identifier	animation
>4052	ExpressionStatement	 
>4053	CallExpression	key -> SetAttribute ( \"e\" , os . str ( ) . c_str ( ) )
>4054	ArgumentList	\"e\"
>4055	Argument	os . str ( ) . c_str ( )
>4056	CallExpression	os . str ( ) . c_str ( )
>4057	ArgumentList	 
>4058	Callee	os . str ( ) . c_str
>4059	MemberAccess	os . str ( ) . c_str
>4060	Identifier	c_str
>4061	CallExpression	os . str ( )
>4062	ArgumentList	 
>4063	Callee	os . str
>4064	MemberAccess	os . str
>4065	Identifier	str
>4066	Identifier	os
>4067	Argument	\"e\"
>4068	PrimaryExpression	\"e\"
>4069	Callee	key -> SetAttribute
>4070	PtrMemberAccess	key -> SetAttribute
>4071	Identifier	SetAttribute
>4072	Identifier	key
>4073	IfStatement	if ( ! szoss . empty ( ) )
>4074	ExpressionStatement	 
>4075	CallExpression	key -> SetAttribute ( \"sz\" , szoss . c_str ( ) )
>4076	ArgumentList	\"sz\"
>4077	Argument	szoss . c_str ( )
>4078	CallExpression	szoss . c_str ( )
>4079	ArgumentList	 
>4080	Callee	szoss . c_str
>4081	MemberAccess	szoss . c_str
>4082	Identifier	c_str
>4083	Identifier	szoss
>4084	Argument	\"sz\"
>4085	PrimaryExpression	\"sz\"
>4086	Callee	key -> SetAttribute
>4087	PtrMemberAccess	key -> SetAttribute
>4088	Identifier	SetAttribute
>4089	Identifier	key
>4090	Condition	 
>4091	UnaryOp	! szoss . empty ( )
>4092	CallExpression	szoss . empty ( )
>4093	ArgumentList	 
>4094	Callee	szoss . empty
>4095	MemberAccess	szoss . empty
>4096	Identifier	empty
>4097	Identifier	szoss
>4098	UnaryOperator	!
>4099	IdentifierDeclStatement	 
>4100	IdentifierDecl	szoss = szos . str ( )
>4101	AssignmentExpr	szoss = szos . str ( )
>4102	CallExpression	szos . str ( )
>4103	ArgumentList	 
>4104	Callee	szos . str
>4105	MemberAccess	szos . str
>4106	Identifier	str
>4107	Identifier	szos
>4108	Identifier	szoss
>4109	Identifier	szoss
>4110	IdentifierDeclType	std 
>4111	ForStatement	for ( int k = 0 ; k < a -> keyframes [ j ] . keyframes . size ( ) ; k ++ )
>4112	CompoundStatement	 
>4113	IfStatement	if ( b -> doScale )
>4114	CompoundStatement	 
>4115	ExpressionStatement	 
>4116	ShiftExpression	szos << b -> idx << \" \" << b -> sx << \" \" << b -> sy << \" \"
>4117	ShiftExpression	b -> idx << \" \" << b -> sx << \" \" << b -> sy << \" \"
>4118	ShiftExpression	\" \" << b -> sx << \" \" << b -> sy << \" \"
>4119	ShiftExpression	b -> sx << \" \" << b -> sy << \" \"
>4120	ShiftExpression	\" \" << b -> sy << \" \"
>4121	ShiftExpression	b -> sy << \" \"
>4122	PrimaryExpression	\" \"
>4123	PtrMemberAccess	b -> sy
>4124	Identifier	sy
>4125	Identifier	b
>4126	PrimaryExpression	\" \"
>4127	PtrMemberAccess	b -> sx
>4128	Identifier	sx
>4129	Identifier	b
>4130	PrimaryExpression	\" \"
>4131	PtrMemberAccess	b -> idx
>4132	Identifier	idx
>4133	Identifier	b
>4134	Identifier	szos
>4135	Condition	 
>4136	PtrMemberAccess	b -> doScale
>4137	Identifier	doScale
>4138	Identifier	b
>4139	ForStatement	for ( int i = 0 ; i < b -> strip . size ( ) ; i ++ )
>4140	CompoundStatement	 
>4141	ExpressionStatement	 
>4142	ShiftExpression	os << b -> strip [ i ] . x << \" \" << b -> strip [ i ] . y << \" \"
>4143	ShiftExpression	b -> strip [ i ] . x << \" \" << b -> strip [ i ] . y << \" \"
>4144	ShiftExpression	\" \" << b -> strip [ i ] . y << \" \"
>4145	ShiftExpression	b -> strip [ i ] . y << \" \"
>4146	PrimaryExpression	\" \"
>4147	MemberAccess	b -> strip [ i ] . y
>4148	Identifier	y
>4149	ArrayIndexing	b -> strip [ i ]
>4150	Identifier	i
>4151	PtrMemberAccess	b -> strip
>4152	Identifier	strip
>4153	Identifier	b
>4154	PrimaryExpression	\" \"
>4155	MemberAccess	b -> strip [ i ] . x
>4156	Identifier	x
>4157	ArrayIndexing	b -> strip [ i ]
>4158	Identifier	i
>4159	PtrMemberAccess	b -> strip
>4160	Identifier	strip
>4161	Identifier	b
>4162	Identifier	os
>4163	IncDecOp	 
>4164	IncDec	++
>4165	Identifier	i
>4166	Condition	 
>4167	RelationalExpression	i < b -> strip . size ( )
>4168	CallExpression	b -> strip . size ( )
>4169	ArgumentList	 
>4170	Callee	b -> strip . size
>4171	MemberAccess	b -> strip . size
>4172	Identifier	size
>4173	PtrMemberAccess	b -> strip
>4174	Identifier	strip
>4175	Identifier	b
>4176	Identifier	i
>4177	ForInit	 
>4178	IdentifierDeclStatement	int i = 0 ;
>4179	IdentifierDecl	i = 0
>4180	AssignmentExpr	i = 0
>4181	PrimaryExpression	0
>4182	Identifier	i
>4183	Identifier	i
>4184	IdentifierDeclType	int
>4185	ExpressionStatement	 
>4186	ShiftExpression	os << b -> strip . size ( ) << \" \"
>4187	ShiftExpression	b -> strip . size ( ) << \" \"
>4188	PrimaryExpression	\" \"
>4189	CallExpression	b -> strip . size ( )
>4190	ArgumentList	 
>4191	Callee	b -> strip . size
>4192	MemberAccess	b -> strip . size
>4193	Identifier	size
>4194	PtrMemberAccess	b -> strip
>4195	Identifier	strip
>4196	Identifier	b
>4197	Identifier	os
>4198	ExpressionStatement	 
>4199	ShiftExpression	os << b -> idx << \" \" << b -> x << \" \" << b -> y << \" \" << b -> rot << \" \"
>4200	ShiftExpression	b -> idx << \" \" << b -> x << \" \" << b -> y << \" \" << b -> rot << \" \"
>4201	ShiftExpression	\" \" << b -> x << \" \" << b -> y << \" \" << b -> rot << \" \"
>4202	ShiftExpression	b -> x << \" \" << b -> y << \" \" << b -> rot << \" \"
>4203	ShiftExpression	\" \" << b -> y << \" \" << b -> rot << \" \"
>4204	ShiftExpression	b -> y << \" \" << b -> rot << \" \"
>4205	ShiftExpression	\" \" << b -> rot << \" \"
>4206	ShiftExpression	b -> rot << \" \"
>4207	PrimaryExpression	\" \"
>4208	PtrMemberAccess	b -> rot
>4209	Identifier	rot
>4210	Identifier	b
>4211	PrimaryExpression	\" \"
>4212	PtrMemberAccess	b -> y
>4213	Identifier	y
>4214	Identifier	b
>4215	PrimaryExpression	\" \"
>4216	PtrMemberAccess	b -> x
>4217	Identifier	x
>4218	Identifier	b
>4219	PrimaryExpression	\" \"
>4220	PtrMemberAccess	b -> idx
>4221	Identifier	idx
>4222	Identifier	b
>4223	Identifier	os
>4224	IdentifierDeclStatement	 
>4225	IdentifierDecl	* b = & a -> keyframes [ j ] . keyframes [ k ]
>4226	AssignmentExpr	* b = & a -> keyframes [ j ] . keyframes [ k ]
>4227	UnaryOp	& a -> keyframes [ j ] . keyframes [ k ]
>4228	ArrayIndexing	a -> keyframes [ j ] . keyframes [ k ]
>4229	Identifier	k
>4230	MemberAccess	a -> keyframes [ j ] . keyframes
>4231	Identifier	keyframes
>4232	ArrayIndexing	a -> keyframes [ j ]
>4233	Identifier	j
>4234	PtrMemberAccess	a -> keyframes
>4235	Identifier	keyframes
>4236	Identifier	a
>4237	UnaryOperator	&
>4238	Identifier	b
>4239	Identifier	b
>4240	IdentifierDeclType	BoneKeyframe *
>4241	IncDecOp	 
>4242	IncDec	++
>4243	Identifier	k
>4244	Condition	 
>4245	RelationalExpression	k < a -> keyframes [ j ] . keyframes . size ( )
>4246	CallExpression	a -> keyframes [ j ] . keyframes . size ( )
>4247	ArgumentList	 
>4248	Callee	a -> keyframes [ j ] . keyframes . size
>4249	MemberAccess	a -> keyframes [ j ] . keyframes . size
>4250	Identifier	size
>4251	MemberAccess	a -> keyframes [ j ] . keyframes
>4252	Identifier	keyframes
>4253	ArrayIndexing	a -> keyframes [ j ]
>4254	Identifier	j
>4255	PtrMemberAccess	a -> keyframes
>4256	Identifier	keyframes
>4257	Identifier	a
>4258	Identifier	k
>4259	ForInit	 
>4260	IdentifierDeclStatement	int k = 0 ;
>4261	IdentifierDecl	k = 0
>4262	AssignmentExpr	k = 0
>4263	PrimaryExpression	0
>4264	Identifier	k
>4265	Identifier	k
>4266	IdentifierDeclType	int
>4267	IdentifierDeclStatement	 
>4268	IdentifierDecl	szos
>4269	Identifier	szos
>4270	IdentifierDeclType	std 
>4271	ExpressionStatement	 
>4272	ShiftExpression	os << a -> keyframes [ j ] . t << \" \"
>4273	ShiftExpression	a -> keyframes [ j ] . t << \" \"
>4274	PrimaryExpression	\" \"
>4275	MemberAccess	a -> keyframes [ j ] . t
>4276	Identifier	t
>4277	ArrayIndexing	a -> keyframes [ j ]
>4278	Identifier	j
>4279	PtrMemberAccess	a -> keyframes
>4280	Identifier	keyframes
>4281	Identifier	a
>4282	Identifier	os
>4283	IdentifierDeclStatement	 
>4284	IdentifierDecl	os
>4285	Identifier	os
>4286	IdentifierDeclType	std 
>4287	IfStatement	if ( a -> keyframes [ j ] . lerpType != 0 )
>4288	CompoundStatement	 
>4289	ExpressionStatement	 
>4290	CallExpression	key -> SetAttribute ( \"lerp\" , a -> keyframes [ j ] . lerpType )
>4291	ArgumentList	\"lerp\"
>4292	Argument	a -> keyframes [ j ] . lerpType
>4293	MemberAccess	a -> keyframes [ j ] . lerpType
>4294	Identifier	lerpType
>4295	ArrayIndexing	a -> keyframes [ j ]
>4296	Identifier	j
>4297	PtrMemberAccess	a -> keyframes
>4298	Identifier	keyframes
>4299	Identifier	a
>4300	Argument	\"lerp\"
>4301	PrimaryExpression	\"lerp\"
>4302	Callee	key -> SetAttribute
>4303	PtrMemberAccess	key -> SetAttribute
>4304	Identifier	SetAttribute
>4305	Identifier	key
>4306	Condition	 
>4307	EqualityExpression	a -> keyframes [ j ] . lerpType != 0
>4308	PrimaryExpression	0
>4309	MemberAccess	a -> keyframes [ j ] . lerpType
>4310	Identifier	lerpType
>4311	ArrayIndexing	a -> keyframes [ j ]
>4312	Identifier	j
>4313	PtrMemberAccess	a -> keyframes
>4314	Identifier	keyframes
>4315	Identifier	a
>4316	IfStatement	if ( ! a -> keyframes [ j ] . cmd . empty ( ) )
>4317	CompoundStatement	 
>4318	ExpressionStatement	 
>4319	CallExpression	key -> SetAttribute ( \"cmd\" , a -> keyframes [ j ] . cmd . c_str ( ) )
>4320	ArgumentList	\"cmd\"
>4321	Argument	a -> keyframes [ j ] . cmd . c_str ( )
>4322	CallExpression	a -> keyframes [ j ] . cmd . c_str ( )
>4323	ArgumentList	 
>4324	Callee	a -> keyframes [ j ] . cmd . c_str
>4325	MemberAccess	a -> keyframes [ j ] . cmd . c_str
>4326	Identifier	c_str
>4327	MemberAccess	a -> keyframes [ j ] . cmd
>4328	Identifier	cmd
>4329	ArrayIndexing	a -> keyframes [ j ]
>4330	Identifier	j
>4331	PtrMemberAccess	a -> keyframes
>4332	Identifier	keyframes
>4333	Identifier	a
>4334	Argument	\"cmd\"
>4335	PrimaryExpression	\"cmd\"
>4336	Callee	key -> SetAttribute
>4337	PtrMemberAccess	key -> SetAttribute
>4338	Identifier	SetAttribute
>4339	Identifier	key
>4340	Condition	 
>4341	UnaryOp	! a -> keyframes [ j ] . cmd . empty ( )
>4342	CallExpression	a -> keyframes [ j ] . cmd . empty ( )
>4343	ArgumentList	 
>4344	Callee	a -> keyframes [ j ] . cmd . empty
>4345	MemberAccess	a -> keyframes [ j ] . cmd . empty
>4346	Identifier	empty
>4347	MemberAccess	a -> keyframes [ j ] . cmd
>4348	Identifier	cmd
>4349	ArrayIndexing	a -> keyframes [ j ]
>4350	Identifier	j
>4351	PtrMemberAccess	a -> keyframes
>4352	Identifier	keyframes
>4353	Identifier	a
>4354	UnaryOperator	!
>4355	IfStatement	if ( ! a -> keyframes [ j ] . sound . empty ( ) )
>4356	ExpressionStatement	 
>4357	CallExpression	key -> SetAttribute ( \"sound\" , a -> keyframes [ j ] . sound . c_str ( ) )
>4358	ArgumentList	\"sound\"
>4359	Argument	a -> keyframes [ j ] . sound . c_str ( )
>4360	CallExpression	a -> keyframes [ j ] . sound . c_str ( )
>4361	ArgumentList	 
>4362	Callee	a -> keyframes [ j ] . sound . c_str
>4363	MemberAccess	a -> keyframes [ j ] . sound . c_str
>4364	Identifier	c_str
>4365	MemberAccess	a -> keyframes [ j ] . sound
>4366	Identifier	sound
>4367	ArrayIndexing	a -> keyframes [ j ]
>4368	Identifier	j
>4369	PtrMemberAccess	a -> keyframes
>4370	Identifier	keyframes
>4371	Identifier	a
>4372	Argument	\"sound\"
>4373	PrimaryExpression	\"sound\"
>4374	Callee	key -> SetAttribute
>4375	PtrMemberAccess	key -> SetAttribute
>4376	Identifier	SetAttribute
>4377	Identifier	key
>4378	Condition	 
>4379	UnaryOp	! a -> keyframes [ j ] . sound . empty ( )
>4380	CallExpression	a -> keyframes [ j ] . sound . empty ( )
>4381	ArgumentList	 
>4382	Callee	a -> keyframes [ j ] . sound . empty
>4383	MemberAccess	a -> keyframes [ j ] . sound . empty
>4384	Identifier	empty
>4385	MemberAccess	a -> keyframes [ j ] . sound
>4386	Identifier	sound
>4387	ArrayIndexing	a -> keyframes [ j ]
>4388	Identifier	j
>4389	PtrMemberAccess	a -> keyframes
>4390	Identifier	keyframes
>4391	Identifier	a
>4392	UnaryOperator	!
>4393	IdentifierDeclStatement	 
>4394	IdentifierDecl	* key = xml -> NewElement ( \"Key\" )
>4395	AssignmentExpr	* key = xml -> NewElement ( \"Key\" )
>4396	CallExpression	xml -> NewElement ( \"Key\" )
>4397	ArgumentList	\"Key\"
>4398	Argument	\"Key\"
>4399	PrimaryExpression	\"Key\"
>4400	Callee	xml -> NewElement
>4401	PtrMemberAccess	xml -> NewElement
>4402	Identifier	NewElement
>4403	Identifier	xml
>4404	Identifier	key
>4405	Identifier	key
>4406	IdentifierDeclType	XMLElement *
>4407	IncDecOp	 
>4408	IncDec	++
>4409	Identifier	j
>4410	Condition	 
>4411	RelationalExpression	j < a -> keyframes . size ( )
>4412	CallExpression	a -> keyframes . size ( )
>4413	ArgumentList	 
>4414	Callee	a -> keyframes . size
>4415	MemberAccess	a -> keyframes . size
>4416	Identifier	size
>4417	PtrMemberAccess	a -> keyframes
>4418	Identifier	keyframes
>4419	Identifier	a
>4420	Identifier	j
>4421	ForInit	 
>4422	IdentifierDeclStatement	int j = 0 ;
>4423	IdentifierDecl	j = 0
>4424	AssignmentExpr	j = 0
>4425	PrimaryExpression	0
>4426	Identifier	j
>4427	Identifier	j
>4428	IdentifierDeclType	int
>4429	ExpressionStatement	 
>4430	CallExpression	animation -> SetAttribute ( \"name\" , a -> name . c_str ( ) )
>4431	ArgumentList	\"name\"
>4432	Argument	a -> name . c_str ( )
>4433	CallExpression	a -> name . c_str ( )
>4434	ArgumentList	 
>4435	Callee	a -> name . c_str
>4436	MemberAccess	a -> name . c_str
>4437	Identifier	c_str
>4438	PtrMemberAccess	a -> name
>4439	Identifier	name
>4440	Identifier	a
>4441	Argument	\"name\"
>4442	PrimaryExpression	\"name\"
>4443	Callee	animation -> SetAttribute
>4444	PtrMemberAccess	animation -> SetAttribute
>4445	Identifier	SetAttribute
>4446	Identifier	animation
>4447	IdentifierDeclStatement	 
>4448	IdentifierDecl	* animation = xml -> NewElement ( \"Animation\" )
>4449	AssignmentExpr	* animation = xml -> NewElement ( \"Animation\" )
>4450	CallExpression	xml -> NewElement ( \"Animation\" )
>4451	ArgumentList	\"Animation\"
>4452	Argument	\"Animation\"
>4453	PrimaryExpression	\"Animation\"
>4454	Callee	xml -> NewElement
>4455	PtrMemberAccess	xml -> NewElement
>4456	Identifier	NewElement
>4457	Identifier	xml
>4458	Identifier	animation
>4459	Identifier	animation
>4460	IdentifierDeclType	XMLElement *
>4461	IdentifierDeclStatement	 
>4462	IdentifierDecl	* a = & this -> animations [ i ]
>4463	AssignmentExpr	* a = & this -> animations [ i ]
>4464	UnaryOp	& this -> animations [ i ]
>4465	ArrayIndexing	this -> animations [ i ]
>4466	Identifier	i
>4467	PtrMemberAccess	this -> animations
>4468	Identifier	animations
>4469	Identifier	this
>4470	UnaryOperator	&
>4471	Identifier	a
>4472	Identifier	a
>4473	IdentifierDeclType	Animation *
>4474	IncDecOp	 
>4475	IncDec	++
>4476	Identifier	i
>4477	Condition	 
>4478	RelationalExpression	i < this -> animations . size ( )
>4479	CallExpression	this -> animations . size ( )
>4480	ArgumentList	 
>4481	Callee	this -> animations . size
>4482	MemberAccess	this -> animations . size
>4483	Identifier	size
>4484	PtrMemberAccess	this -> animations
>4485	Identifier	animations
>4486	Identifier	this
>4487	Identifier	i
>4488	ForInit	 
>4489	AssignmentExpr	i = 0
>4490	PrimaryExpression	0
>4491	Identifier	i
>4492	IdentifierDeclStatement	 
>4493	IdentifierDecl	* animations = xml -> NewElement ( \"Animations\" )
>4494	AssignmentExpr	* animations = xml -> NewElement ( \"Animations\" )
>4495	CallExpression	xml -> NewElement ( \"Animations\" )
>4496	ArgumentList	\"Animations\"
>4497	Argument	\"Animations\"
>4498	PrimaryExpression	\"Animations\"
>4499	Callee	xml -> NewElement
>4500	PtrMemberAccess	xml -> NewElement
>4501	Identifier	NewElement
>4502	Identifier	xml
>4503	Identifier	animations
>4504	Identifier	animations
>4505	IdentifierDeclType	XMLElement *
>4506	ExpressionStatement	 
>4507	CallExpression	xml -> InsertEndChild ( bones )
>4508	ArgumentList	bones
>4509	Argument	bones
>4510	Identifier	bones
>4511	Callee	xml -> InsertEndChild
>4512	PtrMemberAccess	xml -> InsertEndChild
>4513	Identifier	InsertEndChild
>4514	Identifier	xml
>4515	ForStatement	for ( i = 0 ; i < this -> bones . size ( ) ; i ++ )
>4516	CompoundStatement	 
>4517	ExpressionStatement	 
>4518	CallExpression	bones -> InsertEndChild ( bone )
>4519	ArgumentList	bone
>4520	Argument	bone
>4521	Identifier	bone
>4522	Callee	bones -> InsertEndChild
>4523	PtrMemberAccess	bones -> InsertEndChild
>4524	Identifier	InsertEndChild
>4525	Identifier	bones
>4526	ForStatement	for ( Children 
>4527	CompoundStatement	 
>4528	IfStatement	if ( q && ! b && ! p )
>4529	CompoundStatement	 
>4530	ExpressionStatement	 
>4531	CallExpression	bone -> InsertEndChild ( frame )
>4532	ArgumentList	frame
>4533	Argument	frame
>4534	Identifier	frame
>4535	Callee	bone -> InsertEndChild
>4536	PtrMemberAccess	bone -> InsertEndChild
>4537	Identifier	InsertEndChild
>4538	Identifier	bone
>4539	IfStatement	if ( q -> getRenderPass ( ) != 0 )
>4540	CompoundStatement	 
>4541	ExpressionStatement	 
>4542	CallExpression	frame -> SetAttribute ( \"pass\" , q -> getRenderPass ( ) )
>4543	ArgumentList	\"pass\"
>4544	Argument	q -> getRenderPass ( )
>4545	CallExpression	q -> getRenderPass ( )
>4546	ArgumentList	 
>4547	Callee	q -> getRenderPass
>4548	PtrMemberAccess	q -> getRenderPass
>4549	Identifier	getRenderPass
>4550	Identifier	q
>4551	Argument	\"pass\"
>4552	PrimaryExpression	\"pass\"
>4553	Callee	frame -> SetAttribute
>4554	PtrMemberAccess	frame -> SetAttribute
>4555	Identifier	SetAttribute
>4556	Identifier	frame
>4557	Condition	 
>4558	EqualityExpression	q -> getRenderPass ( ) != 0
>4559	PrimaryExpression	0
>4560	CallExpression	q -> getRenderPass ( )
>4561	ArgumentList	 
>4562	Callee	q -> getRenderPass
>4563	PtrMemberAccess	q -> getRenderPass
>4564	Identifier	getRenderPass
>4565	Identifier	q
>4566	ExpressionStatement	 
>4567	CallExpression	frame -> SetAttribute ( \"gfx\" , q -> texture -> name . c_str ( ) )
>4568	ArgumentList	\"gfx\"
>4569	Argument	q -> texture -> name . c_str ( )
>4570	CallExpression	q -> texture -> name . c_str ( )
>4571	ArgumentList	 
>4572	Callee	q -> texture -> name . c_str
>4573	MemberAccess	q -> texture -> name . c_str
>4574	Identifier	c_str
>4575	PtrMemberAccess	q -> texture -> name
>4576	Identifier	name
>4577	PtrMemberAccess	q -> texture
>4578	Identifier	texture
>4579	Identifier	q
>4580	Argument	\"gfx\"
>4581	PrimaryExpression	\"gfx\"
>4582	Callee	frame -> SetAttribute
>4583	PtrMemberAccess	frame -> SetAttribute
>4584	Identifier	SetAttribute
>4585	Identifier	frame
>4586	IdentifierDeclStatement	 
>4587	IdentifierDecl	* frame = xml -> NewElement ( \"Frame\" )
>4588	AssignmentExpr	* frame = xml -> NewElement ( \"Frame\" )
>4589	CallExpression	xml -> NewElement ( \"Frame\" )
>4590	ArgumentList	\"Frame\"
>4591	Argument	\"Frame\"
>4592	PrimaryExpression	\"Frame\"
>4593	Callee	xml -> NewElement
>4594	PtrMemberAccess	xml -> NewElement
>4595	Identifier	NewElement
>4596	Identifier	xml
>4597	Identifier	frame
>4598	Identifier	frame
>4599	IdentifierDeclType	XMLElement *
>4600	Condition	 
>4601	AndExpression	q && ! b && ! p
>4602	AndExpression	! b && ! p
>4603	UnaryOp	! p
>4604	Identifier	p
>4605	UnaryOperator	!
>4606	UnaryOp	! b
>4607	Identifier	b
>4608	UnaryOperator	!
>4609	Identifier	q
>4610	ExpressionStatement	 
>4611	UnaryOp	* j
>4612	Identifier	j
>4613	UnaryOperator	*
>4614	Statement	 
>4615	Statement	 
>4616	Statement	 
>4617	Statement	 
>4618	Statement	 
>4619	Statement	 
>4620	Statement	 
>4621	Statement	 
>4622	Statement	 
>4623	ExpressionStatement	 
>4624	UnaryOp	* j
>4625	Identifier	j
>4626	UnaryOperator	*
>4627	Statement	 
>4628	Statement	 
>4629	Statement	 
>4630	Statement	 
>4631	Statement	 
>4632	Statement	 
>4633	Statement	 
>4634	Statement	 
>4635	Statement	 
>4636	ExpressionStatement	 
>4637	UnaryOp	* j
>4638	Identifier	j
>4639	UnaryOperator	*
>4640	Statement	 
>4641	Statement	 
>4642	Statement	 
>4643	Statement	 
>4644	Statement	 
>4645	Statement	 
>4646	Statement	 
>4647	Statement	 
>4648	Statement	 
>4649	IncDecOp	 
>4650	IncDec	++
>4651	Identifier	j
>4652	Condition	 
>4653	EqualityExpression	j != this -> bones [ i ] -> children . end ( )
>4654	CallExpression	this -> bones [ i ] -> children . end ( )
>4655	ArgumentList	 
>4656	Callee	this -> bones [ i ] -> children . end
>4657	MemberAccess	this -> bones [ i ] -> children . end
>4658	Identifier	end
>4659	PtrMemberAccess	this -> bones [ i ] -> children
>4660	Identifier	children
>4661	ArrayIndexing	this -> bones [ i ]
>4662	Identifier	i
>4663	PtrMemberAccess	this -> bones
>4664	Identifier	bones
>4665	Identifier	this
>4666	Identifier	j
>4667	ForInit	 
>4668	IdentifierDeclStatement	Children 
>4669	IdentifierDecl	j = this -> bones [ i ] -> children . begin ( )
>4670	AssignmentExpr	j = this -> bones [ i ] -> children . begin ( )
>4671	CallExpression	this -> bones [ i ] -> children . begin ( )
>4672	ArgumentList	 
>4673	Callee	this -> bones [ i ] -> children . begin
>4674	MemberAccess	this -> bones [ i ] -> children . begin
>4675	Identifier	begin
>4676	PtrMemberAccess	this -> bones [ i ] -> children
>4677	Identifier	children
>4678	ArrayIndexing	this -> bones [ i ]
>4679	Identifier	i
>4680	PtrMemberAccess	this -> bones
>4681	Identifier	bones
>4682	Identifier	this
>4683	Identifier	j
>4684	Identifier	j
>4685	IdentifierDeclType	Children 
>4686	IfStatement	if ( this -> bones [ i ] -> originalScale . x != 1 || this -> bones [ i ] -> originalScale . y != 1 )
>4687	CompoundStatement	 
>4688	ExpressionStatement	 
>4689	CallExpression	bone -> SetAttribute ( \"sz\" , os . str ( ) . c_str ( ) )
>4690	ArgumentList	\"sz\"
>4691	Argument	os . str ( ) . c_str ( )
>4692	CallExpression	os . str ( ) . c_str ( )
>4693	ArgumentList	 
>4694	Callee	os . str ( ) . c_str
>4695	MemberAccess	os . str ( ) . c_str
>4696	Identifier	c_str
>4697	CallExpression	os . str ( )
>4698	ArgumentList	 
>4699	Callee	os . str
>4700	MemberAccess	os . str
>4701	Identifier	str
>4702	Identifier	os
>4703	Argument	\"sz\"
>4704	PrimaryExpression	\"sz\"
>4705	Callee	bone -> SetAttribute
>4706	PtrMemberAccess	bone -> SetAttribute
>4707	Identifier	SetAttribute
>4708	Identifier	bone
>4709	ExpressionStatement	 
>4710	ShiftExpression	os << this -> bones [ i ] -> originalScale . x << \" \" << this -> bones [ i ] -> originalScale . y
>4711	ShiftExpression	this -> bones [ i ] -> originalScale . x << \" \" << this -> bones [ i ] -> originalScale . y
>4712	ShiftExpression	\" \" << this -> bones [ i ] -> originalScale . y
>4713	MemberAccess	this -> bones [ i ] -> originalScale . y
>4714	Identifier	y
>4715	PtrMemberAccess	this -> bones [ i ] -> originalScale
>4716	Identifier	originalScale
>4717	ArrayIndexing	this -> bones [ i ]
>4718	Identifier	i
>4719	PtrMemberAccess	this -> bones
>4720	Identifier	bones
>4721	Identifier	this
>4722	PrimaryExpression	\" \"
>4723	MemberAccess	this -> bones [ i ] -> originalScale . x
>4724	Identifier	x
>4725	PtrMemberAccess	this -> bones [ i ] -> originalScale
>4726	Identifier	originalScale
>4727	ArrayIndexing	this -> bones [ i ]
>4728	Identifier	i
>4729	PtrMemberAccess	this -> bones
>4730	Identifier	bones
>4731	Identifier	this
>4732	Identifier	os
>4733	IdentifierDeclStatement	 
>4734	IdentifierDecl	os
>4735	Identifier	os
>4736	IdentifierDeclType	std 
>4737	Condition	 
>4738	OrExpression	this -> bones [ i ] -> originalScale . x != 1 || this -> bones [ i ] -> originalScale . y != 1
>4739	EqualityExpression	this -> bones [ i ] -> originalScale . y != 1
>4740	PrimaryExpression	1
>4741	MemberAccess	this -> bones [ i ] -> originalScale . y
>4742	Identifier	y
>4743	PtrMemberAccess	this -> bones [ i ] -> originalScale
>4744	Identifier	originalScale
>4745	ArrayIndexing	this -> bones [ i ]
>4746	Identifier	i
>4747	PtrMemberAccess	this -> bones
>4748	Identifier	bones
>4749	Identifier	this
>4750	EqualityExpression	this -> bones [ i ] -> originalScale . x != 1
>4751	PrimaryExpression	1
>4752	MemberAccess	this -> bones [ i ] -> originalScale . x
>4753	Identifier	x
>4754	PtrMemberAccess	this -> bones [ i ] -> originalScale
>4755	Identifier	originalScale
>4756	ArrayIndexing	this -> bones [ i ]
>4757	Identifier	i
>4758	PtrMemberAccess	this -> bones
>4759	Identifier	bones
>4760	Identifier	this
>4761	IfStatement	if ( this -> bones [ i ] -> isRepeatingTextureToFill ( ) )
>4762	CompoundStatement	 
>4763	ExpressionStatement	 
>4764	CallExpression	bone -> SetAttribute ( \"rt\" , 1 )
>4765	ArgumentList	\"rt\"
>4766	Argument	1
>4767	PrimaryExpression	1
>4768	Argument	\"rt\"
>4769	PrimaryExpression	\"rt\"
>4770	Callee	bone -> SetAttribute
>4771	PtrMemberAccess	bone -> SetAttribute
>4772	Identifier	SetAttribute
>4773	Identifier	bone
>4774	Condition	 
>4775	CallExpression	this -> bones [ i ] -> isRepeatingTextureToFill ( )
>4776	ArgumentList	 
>4777	Callee	this -> bones [ i ] -> isRepeatingTextureToFill
>4778	PtrMemberAccess	this -> bones [ i ] -> isRepeatingTextureToFill
>4779	Identifier	isRepeatingTextureToFill
>4780	ArrayIndexing	this -> bones [ i ]
>4781	Identifier	i
>4782	PtrMemberAccess	this -> bones
>4783	Identifier	bones
>4784	Identifier	this
>4785	IfStatement	if ( ! this -> bones [ i ] -> internalOffset . isZero ( ) )
>4786	CompoundStatement	 
>4787	ExpressionStatement	 
>4788	CallExpression	bone -> SetAttribute ( \"io\" , os . str ( ) . c_str ( ) )
>4789	ArgumentList	\"io\"
>4790	Argument	os . str ( ) . c_str ( )
>4791	CallExpression	os . str ( ) . c_str ( )
>4792	ArgumentList	 
>4793	Callee	os . str ( ) . c_str
>4794	MemberAccess	os . str ( ) . c_str
>4795	Identifier	c_str
>4796	CallExpression	os . str ( )
>4797	ArgumentList	 
>4798	Callee	os . str
>4799	MemberAccess	os . str
>4800	Identifier	str
>4801	Identifier	os
>4802	Argument	\"io\"
>4803	PrimaryExpression	\"io\"
>4804	Callee	bone -> SetAttribute
>4805	PtrMemberAccess	bone -> SetAttribute
>4806	Identifier	SetAttribute
>4807	Identifier	bone
>4808	ExpressionStatement	 
>4809	ShiftExpression	os << this -> bones [ i ] -> internalOffset . x << \" \" << this -> bones [ i ] -> internalOffset . y
>4810	ShiftExpression	this -> bones [ i ] -> internalOffset . x << \" \" << this -> bones [ i ] -> internalOffset . y
>4811	ShiftExpression	\" \" << this -> bones [ i ] -> internalOffset . y
>4812	MemberAccess	this -> bones [ i ] -> internalOffset . y
>4813	Identifier	y
>4814	PtrMemberAccess	this -> bones [ i ] -> internalOffset
>4815	Identifier	internalOffset
>4816	ArrayIndexing	this -> bones [ i ]
>4817	Identifier	i
>4818	PtrMemberAccess	this -> bones
>4819	Identifier	bones
>4820	Identifier	this
>4821	PrimaryExpression	\" \"
>4822	MemberAccess	this -> bones [ i ] -> internalOffset . x
>4823	Identifier	x
>4824	PtrMemberAccess	this -> bones [ i ] -> internalOffset
>4825	Identifier	internalOffset
>4826	ArrayIndexing	this -> bones [ i ]
>4827	Identifier	i
>4828	PtrMemberAccess	this -> bones
>4829	Identifier	bones
>4830	Identifier	this
>4831	Identifier	os
>4832	IdentifierDeclStatement	 
>4833	IdentifierDecl	os
>4834	Identifier	os
>4835	IdentifierDeclType	std 
>4836	Condition	 
>4837	UnaryOp	! this -> bones [ i ] -> internalOffset . isZero ( )
>4838	CallExpression	this -> bones [ i ] -> internalOffset . isZero ( )
>4839	ArgumentList	 
>4840	Callee	this -> bones [ i ] -> internalOffset . isZero
>4841	MemberAccess	this -> bones [ i ] -> internalOffset . isZero
>4842	Identifier	isZero
>4843	PtrMemberAccess	this -> bones [ i ] -> internalOffset
>4844	Identifier	internalOffset
>4845	ArrayIndexing	this -> bones [ i ]
>4846	Identifier	i
>4847	PtrMemberAccess	this -> bones
>4848	Identifier	bones
>4849	Identifier	this
>4850	UnaryOperator	!
>4851	IfStatement	if ( ! this -> bones [ i ] -> changeStrip . empty ( ) )
>4852	CompoundStatement	 
>4853	ExpressionStatement	 
>4854	CallExpression	bone -> SetAttribute ( \"strip\" , os . str ( ) . c_str ( ) )
>4855	ArgumentList	\"strip\"
>4856	Argument	os . str ( ) . c_str ( )
>4857	CallExpression	os . str ( ) . c_str ( )
>4858	ArgumentList	 
>4859	Callee	os . str ( ) . c_str
>4860	MemberAccess	os . str ( ) . c_str
>4861	Identifier	c_str
>4862	CallExpression	os . str ( )
>4863	ArgumentList	 
>4864	Callee	os . str
>4865	MemberAccess	os . str
>4866	Identifier	str
>4867	Identifier	os
>4868	Argument	\"strip\"
>4869	PrimaryExpression	\"strip\"
>4870	Callee	bone -> SetAttribute
>4871	PtrMemberAccess	bone -> SetAttribute
>4872	Identifier	SetAttribute
>4873	Identifier	bone
>4874	ExpressionStatement	 
>4875	ShiftExpression	os << this -> bones [ i ] -> stripVert << \" \" << this -> bones [ i ] -> changeStrip . size ( )
>4876	ShiftExpression	this -> bones [ i ] -> stripVert << \" \" << this -> bones [ i ] -> changeStrip . size ( )
>4877	ShiftExpression	\" \" << this -> bones [ i ] -> changeStrip . size ( )
>4878	CallExpression	this -> bones [ i ] -> changeStrip . size ( )
>4879	ArgumentList	 
>4880	Callee	this -> bones [ i ] -> changeStrip . size
>4881	MemberAccess	this -> bones [ i ] -> changeStrip . size
>4882	Identifier	size
>4883	PtrMemberAccess	this -> bones [ i ] -> changeStrip
>4884	Identifier	changeStrip
>4885	ArrayIndexing	this -> bones [ i ]
>4886	Identifier	i
>4887	PtrMemberAccess	this -> bones
>4888	Identifier	bones
>4889	Identifier	this
>4890	PrimaryExpression	\" \"
>4891	PtrMemberAccess	this -> bones [ i ] -> stripVert
>4892	Identifier	stripVert
>4893	ArrayIndexing	this -> bones [ i ]
>4894	Identifier	i
>4895	PtrMemberAccess	this -> bones
>4896	Identifier	bones
>4897	Identifier	this
>4898	Identifier	os
>4899	IdentifierDeclStatement	 
>4900	IdentifierDecl	os
>4901	Identifier	os
>4902	IdentifierDeclType	std 
>4903	Condition	 
>4904	UnaryOp	! this -> bones [ i ] -> changeStrip . empty ( )
>4905	CallExpression	this -> bones [ i ] -> changeStrip . empty ( )
>4906	ArgumentList	 
>4907	Callee	this -> bones [ i ] -> changeStrip . empty
>4908	MemberAccess	this -> bones [ i ] -> changeStrip . empty
>4909	Identifier	empty
>4910	PtrMemberAccess	this -> bones [ i ] -> changeStrip
>4911	Identifier	changeStrip
>4912	ArrayIndexing	this -> bones [ i ]
>4913	Identifier	i
>4914	PtrMemberAccess	this -> bones
>4915	Identifier	bones
>4916	Identifier	this
>4917	UnaryOperator	!
>4918	IfStatement	if ( ! this -> bones [ i ] -> prt . empty ( ) )
>4919	ExpressionStatement	 
>4920	CallExpression	bone -> SetAttribute ( \"prt\" , this -> bones [ i ] -> prt . c_str ( ) )
>4921	ArgumentList	\"prt\"
>4922	Argument	this -> bones [ i ] -> prt . c_str ( )
>4923	CallExpression	this -> bones [ i ] -> prt . c_str ( )
>4924	ArgumentList	 
>4925	Callee	this -> bones [ i ] -> prt . c_str
>4926	MemberAccess	this -> bones [ i ] -> prt . c_str
>4927	Identifier	c_str
>4928	PtrMemberAccess	this -> bones [ i ] -> prt
>4929	Identifier	prt
>4930	ArrayIndexing	this -> bones [ i ]
>4931	Identifier	i
>4932	PtrMemberAccess	this -> bones
>4933	Identifier	bones
>4934	Identifier	this
>4935	Argument	\"prt\"
>4936	PrimaryExpression	\"prt\"
>4937	Callee	bone -> SetAttribute
>4938	PtrMemberAccess	bone -> SetAttribute
>4939	Identifier	SetAttribute
>4940	Identifier	bone
>4941	Condition	 
>4942	UnaryOp	! this -> bones [ i ] -> prt . empty ( )
>4943	CallExpression	this -> bones [ i ] -> prt . empty ( )
>4944	ArgumentList	 
>4945	Callee	this -> bones [ i ] -> prt . empty
>4946	MemberAccess	this -> bones [ i ] -> prt . empty
>4947	Identifier	empty
>4948	PtrMemberAccess	this -> bones [ i ] -> prt
>4949	Identifier	prt
>4950	ArrayIndexing	this -> bones [ i ]
>4951	Identifier	i
>4952	PtrMemberAccess	this -> bones
>4953	Identifier	bones
>4954	Identifier	this
>4955	UnaryOperator	!
>4956	IfStatement	if ( this -> bones [ i ] -> offset . y )
>4957	ExpressionStatement	 
>4958	CallExpression	bone -> SetAttribute ( \"offy\" , this -> bones [ i ] -> offset . y )
>4959	ArgumentList	\"offy\"
>4960	Argument	this -> bones [ i ] -> offset . y
>4961	MemberAccess	this -> bones [ i ] -> offset . y
>4962	Identifier	y
>4963	PtrMemberAccess	this -> bones [ i ] -> offset
>4964	Identifier	offset
>4965	ArrayIndexing	this -> bones [ i ]
>4966	Identifier	i
>4967	PtrMemberAccess	this -> bones
>4968	Identifier	bones
>4969	Identifier	this
>4970	Argument	\"offy\"
>4971	PrimaryExpression	\"offy\"
>4972	Callee	bone -> SetAttribute
>4973	PtrMemberAccess	bone -> SetAttribute
>4974	Identifier	SetAttribute
>4975	Identifier	bone
>4976	Condition	 
>4977	MemberAccess	this -> bones [ i ] -> offset . y
>4978	Identifier	y
>4979	PtrMemberAccess	this -> bones [ i ] -> offset
>4980	Identifier	offset
>4981	ArrayIndexing	this -> bones [ i ]
>4982	Identifier	i
>4983	PtrMemberAccess	this -> bones
>4984	Identifier	bones
>4985	Identifier	this
>4986	IfStatement	if ( this -> bones [ i ] -> offset . x )
>4987	ExpressionStatement	 
>4988	CallExpression	bone -> SetAttribute ( \"offx\" , this -> bones [ i ] -> offset . x )
>4989	ArgumentList	\"offx\"
>4990	Argument	this -> bones [ i ] -> offset . x
>4991	MemberAccess	this -> bones [ i ] -> offset . x
>4992	Identifier	x
>4993	PtrMemberAccess	this -> bones [ i ] -> offset
>4994	Identifier	offset
>4995	ArrayIndexing	this -> bones [ i ]
>4996	Identifier	i
>4997	PtrMemberAccess	this -> bones
>4998	Identifier	bones
>4999	Identifier	this
>5000	Argument	\"offx\"
>5001	PrimaryExpression	\"offx\"
>5002	Callee	bone -> SetAttribute
>5003	PtrMemberAccess	bone -> SetAttribute
>5004	Identifier	SetAttribute
>5005	Identifier	bone
>5006	Condition	 
>5007	MemberAccess	this -> bones [ i ] -> offset . x
>5008	Identifier	x
>5009	PtrMemberAccess	this -> bones [ i ] -> offset
>5010	Identifier	offset
>5011	ArrayIndexing	this -> bones [ i ]
>5012	Identifier	i
>5013	PtrMemberAccess	this -> bones
>5014	Identifier	bones
>5015	Identifier	this
>5016	IfStatement	if ( this -> bones [ i ] -> getRenderPass ( ) )
>5017	ExpressionStatement	 
>5018	CallExpression	bone -> SetAttribute ( \"pass\" , this -> bones [ i ] -> getRenderPass ( ) )
>5019	ArgumentList	\"pass\"
>5020	Argument	this -> bones [ i ] -> getRenderPass ( )
>5021	CallExpression	this -> bones [ i ] -> getRenderPass ( )
>5022	ArgumentList	 
>5023	Callee	this -> bones [ i ] -> getRenderPass
>5024	PtrMemberAccess	this -> bones [ i ] -> getRenderPass
>5025	Identifier	getRenderPass
>5026	ArrayIndexing	this -> bones [ i ]
>5027	Identifier	i
>5028	PtrMemberAccess	this -> bones
>5029	Identifier	bones
>5030	Identifier	this
>5031	Argument	\"pass\"
>5032	PrimaryExpression	\"pass\"
>5033	Callee	bone -> SetAttribute
>5034	PtrMemberAccess	bone -> SetAttribute
>5035	Identifier	SetAttribute
>5036	Identifier	bone
>5037	Condition	 
>5038	CallExpression	this -> bones [ i ] -> getRenderPass ( )
>5039	ArgumentList	 
>5040	Callee	this -> bones [ i ] -> getRenderPass
>5041	PtrMemberAccess	this -> bones [ i ] -> getRenderPass
>5042	Identifier	getRenderPass
>5043	ArrayIndexing	this -> bones [ i ]
>5044	Identifier	i
>5045	PtrMemberAccess	this -> bones
>5046	Identifier	bones
>5047	Identifier	this
>5048	IfStatement	if ( this -> bones [ i ] -> rbp )
>5049	ExpressionStatement	 
>5050	CallExpression	bone -> SetAttribute ( \"rbp\" , this -> bones [ i ] -> rbp )
>5051	ArgumentList	\"rbp\"
>5052	Argument	this -> bones [ i ] -> rbp
>5053	PtrMemberAccess	this -> bones [ i ] -> rbp
>5054	Identifier	rbp
>5055	ArrayIndexing	this -> bones [ i ]
>5056	Identifier	i
>5057	PtrMemberAccess	this -> bones
>5058	Identifier	bones
>5059	Identifier	this
>5060	Argument	\"rbp\"
>5061	PrimaryExpression	\"rbp\"
>5062	Callee	bone -> SetAttribute
>5063	PtrMemberAccess	bone -> SetAttribute
>5064	Identifier	SetAttribute
>5065	Identifier	bone
>5066	Condition	 
>5067	PtrMemberAccess	this -> bones [ i ] -> rbp
>5068	Identifier	rbp
>5069	ArrayIndexing	this -> bones [ i ]
>5070	Identifier	i
>5071	PtrMemberAccess	this -> bones
>5072	Identifier	bones
>5073	Identifier	this
>5074	ExpressionStatement	 
>5075	CallExpression	bone -> SetAttribute ( \"cp\" , os . str ( ) . c_str ( ) )
>5076	ArgumentList	\"cp\"
>5077	Argument	os . str ( ) . c_str ( )
>5078	CallExpression	os . str ( ) . c_str ( )
>5079	ArgumentList	 
>5080	Callee	os . str ( ) . c_str
>5081	MemberAccess	os . str ( ) . c_str
>5082	Identifier	c_str
>5083	CallExpression	os . str ( )
>5084	ArgumentList	 
>5085	Callee	os . str
>5086	MemberAccess	os . str
>5087	Identifier	str
>5088	Identifier	os
>5089	Argument	\"cp\"
>5090	PrimaryExpression	\"cp\"
>5091	Callee	bone -> SetAttribute
>5092	PtrMemberAccess	bone -> SetAttribute
>5093	Identifier	SetAttribute
>5094	Identifier	bone
>5095	ExpressionStatement	 
>5096	ShiftExpression	os << this -> bones [ i ] -> collidePosition . x << \" \" << this -> bones [ i ] -> collidePosition . \
>5097	ShiftExpression	this -> bones [ i ] -> collidePosition . x << \" \" << this -> bones [ i ] -> collidePosition . y
>5098	ShiftExpression	\" \" << this -> bones [ i ] -> collidePosition . y
>5099	MemberAccess	this -> bones [ i ] -> collidePosition . y
>5100	Identifier	y
>5101	PtrMemberAccess	this -> bones [ i ] -> collidePosition
>5102	Identifier	collidePosition
>5103	ArrayIndexing	this -> bones [ i ]
>5104	Identifier	i
>5105	PtrMemberAccess	this -> bones
>5106	Identifier	bones
>5107	Identifier	this
>5108	PrimaryExpression	\" \"
>5109	MemberAccess	this -> bones [ i ] -> collidePosition . x
>5110	Identifier	x
>5111	PtrMemberAccess	this -> bones [ i ] -> collidePosition
>5112	Identifier	collidePosition
>5113	ArrayIndexing	this -> bones [ i ]
>5114	Identifier	i
>5115	PtrMemberAccess	this -> bones
>5116	Identifier	bones
>5117	Identifier	this
>5118	Identifier	os
>5119	IdentifierDeclStatement	 
>5120	IdentifierDecl	os
>5121	Identifier	os
>5122	IdentifierDeclType	std 
>5123	IfStatement	if ( ! this -> bones [ i ] -> collisionRects . empty ( ) )
>5124	CompoundStatement	 
>5125	ExpressionStatement	 
>5126	CallExpression	bone -> SetAttribute ( \"crects\" , os . str ( ) . c_str ( ) )
>5127	ArgumentList	\"crects\"
>5128	Argument	os . str ( ) . c_str ( )
>5129	CallExpression	os . str ( ) . c_str ( )
>5130	ArgumentList	 
>5131	Callee	os . str ( ) . c_str
>5132	MemberAccess	os . str ( ) . c_str
>5133	Identifier	c_str
>5134	CallExpression	os . str ( )
>5135	ArgumentList	 
>5136	Callee	os . str
>5137	MemberAccess	os . str
>5138	Identifier	str
>5139	Identifier	os
>5140	Argument	\"crects\"
>5141	PrimaryExpression	\"crects\"
>5142	Callee	bone -> SetAttribute
>5143	PtrMemberAccess	bone -> SetAttribute
>5144	Identifier	SetAttribute
>5145	Identifier	bone
>5146	ForStatement	for ( int j = 0 ; j < this -> bones [ i ] -> collisionRects . size ( ) ; j ++ )
>5147	CompoundStatement	 
>5148	ExpressionStatement	 
>5149	ShiftExpression	os << x << \" \" << y << \" \" << w << \" \" << h << \" \"
>5150	ShiftExpression	x << \" \" << y << \" \" << w << \" \" << h << \" \"
>5151	ShiftExpression	\" \" << y << \" \" << w << \" \" << h << \" \"
>5152	ShiftExpression	y << \" \" << w << \" \" << h << \" \"
>5153	ShiftExpression	\" \" << w << \" \" << h << \" \"
>5154	ShiftExpression	w << \" \" << h << \" \"
>5155	ShiftExpression	\" \" << h << \" \"
>5156	ShiftExpression	h << \" \"
>5157	PrimaryExpression	\" \"
>5158	Identifier	h
>5159	PrimaryExpression	\" \"
>5160	Identifier	w
>5161	PrimaryExpression	\" \"
>5162	Identifier	y
>5163	PrimaryExpression	\" \"
>5164	Identifier	x
>5165	Identifier	os
>5166	ExpressionStatement	 
>5167	CallExpression	r -> getCWH ( & x , & y , & w , & h )
>5168	ArgumentList	& x
>5169	Argument	& h
>5170	UnaryOp	& h
>5171	Identifier	h
>5172	UnaryOperator	&
>5173	Argument	& w
>5174	UnaryOp	& w
>5175	Identifier	w
>5176	UnaryOperator	&
>5177	Argument	& y
>5178	UnaryOp	& y
>5179	Identifier	y
>5180	UnaryOperator	&
>5181	Argument	& x
>5182	UnaryOp	& x
>5183	Identifier	x
>5184	UnaryOperator	&
>5185	Callee	r -> getCWH
>5186	PtrMemberAccess	r -> getCWH
>5187	Identifier	getCWH
>5188	Identifier	r
>5189	IdentifierDeclStatement	 
>5190	IdentifierDecl	h
>5191	Identifier	h
>5192	IdentifierDeclType	int
>5193	IdentifierDecl	w
>5194	Identifier	w
>5195	IdentifierDeclType	int
>5196	IdentifierDecl	y
>5197	Identifier	y
>5198	IdentifierDeclType	int
>5199	IdentifierDecl	x
>5200	Identifier	x
>5201	IdentifierDeclType	int
>5202	IdentifierDeclStatement	 
>5203	IdentifierDecl	* r = & this -> bones [ i ] -> collisionRects [ j ]
>5204	AssignmentExpr	* r = & this -> bones [ i ] -> collisionRects [ j ]
>5205	UnaryOp	& this -> bones [ i ] -> collisionRects [ j ]
>5206	ArrayIndexing	this -> bones [ i ] -> collisionRects [ j ]
>5207	Identifier	j
>5208	PtrMemberAccess	this -> bones [ i ] -> collisionRects
>5209	Identifier	collisionRects
>5210	ArrayIndexing	this -> bones [ i ]
>5211	Identifier	i
>5212	PtrMemberAccess	this -> bones
>5213	Identifier	bones
>5214	Identifier	this
>5215	UnaryOperator	&
>5216	Identifier	r
>5217	Identifier	r
>5218	IdentifierDeclType	RectShape *
>5219	IncDecOp	 
>5220	IncDec	++
>5221	Identifier	j
>5222	Condition	 
>5223	RelationalExpression	j < this -> bones [ i ] -> collisionRects . size ( )
>5224	CallExpression	this -> bones [ i ] -> collisionRects . size ( )
>5225	ArgumentList	 
>5226	Callee	this -> bones [ i ] -> collisionRects . size
>5227	MemberAccess	this -> bones [ i ] -> collisionRects . size
>5228	Identifier	size
>5229	PtrMemberAccess	this -> bones [ i ] -> collisionRects
>5230	Identifier	collisionRects
>5231	ArrayIndexing	this -> bones [ i ]
>5232	Identifier	i
>5233	PtrMemberAccess	this -> bones
>5234	Identifier	bones
>5235	Identifier	this
>5236	Identifier	j
>5237	ForInit	 
>5238	IdentifierDeclStatement	int j = 0 ;
>5239	IdentifierDecl	j = 0
>5240	AssignmentExpr	j = 0
>5241	PrimaryExpression	0
>5242	Identifier	j
>5243	Identifier	j
>5244	IdentifierDeclType	int
>5245	ExpressionStatement	 
>5246	ShiftExpression	os << this -> bones [ i ] -> collisionRects . size ( ) << \" \"
>5247	ShiftExpression	this -> bones [ i ] -> collisionRects . size ( ) << \" \"
>5248	PrimaryExpression	\" \"
>5249	CallExpression	this -> bones [ i ] -> collisionRects . size ( )
>5250	ArgumentList	 
>5251	Callee	this -> bones [ i ] -> collisionRects . size
>5252	MemberAccess	this -> bones [ i ] -> collisionRects . size
>5253	Identifier	size
>5254	PtrMemberAccess	this -> bones [ i ] -> collisionRects
>5255	Identifier	collisionRects
>5256	ArrayIndexing	this -> bones [ i ]
>5257	Identifier	i
>5258	PtrMemberAccess	this -> bones
>5259	Identifier	bones
>5260	Identifier	this
>5261	Identifier	os
>5262	IdentifierDeclStatement	 
>5263	IdentifierDecl	os
>5264	Identifier	os
>5265	IdentifierDeclType	std 
>5266	Condition	 
>5267	UnaryOp	! this -> bones [ i ] -> collisionRects . empty ( )
>5268	CallExpression	this -> bones [ i ] -> collisionRects . empty ( )
>5269	ArgumentList	 
>5270	Callee	this -> bones [ i ] -> collisionRects . empty
>5271	MemberAccess	this -> bones [ i ] -> collisionRects . empty
>5272	Identifier	empty
>5273	PtrMemberAccess	this -> bones [ i ] -> collisionRects
>5274	Identifier	collisionRects
>5275	ArrayIndexing	this -> bones [ i ]
>5276	Identifier	i
>5277	PtrMemberAccess	this -> bones
>5278	Identifier	bones
>5279	Identifier	this
>5280	UnaryOperator	!
>5281	IfStatement	if ( ! this -> bones [ i ] -> renderQuad )
>5282	CompoundStatement	 
>5283	ExpressionStatement	 
>5284	CallExpression	bone -> SetAttribute ( \"rq\" , this -> bones [ i ] -> fileRenderQuad )
>5285	ArgumentList	\"rq\"
>5286	Argument	this -> bones [ i ] -> fileRenderQuad
>5287	PtrMemberAccess	this -> bones [ i ] -> fileRenderQuad
>5288	Identifier	fileRenderQuad
>5289	ArrayIndexing	this -> bones [ i ]
>5290	Identifier	i
>5291	PtrMemberAccess	this -> bones
>5292	Identifier	bones
>5293	Identifier	this
>5294	Argument	\"rq\"
>5295	PrimaryExpression	\"rq\"
>5296	Callee	bone -> SetAttribute
>5297	PtrMemberAccess	bone -> SetAttribute
>5298	Identifier	SetAttribute
>5299	Identifier	bone
>5300	Condition	 
>5301	UnaryOp	! this -> bones [ i ] -> renderQuad
>5302	PtrMemberAccess	this -> bones [ i ] -> renderQuad
>5303	Identifier	renderQuad
>5304	ArrayIndexing	this -> bones [ i ]
>5305	Identifier	i
>5306	PtrMemberAccess	this -> bones
>5307	Identifier	bones
>5308	Identifier	this
>5309	UnaryOperator	!
>5310	ExpressionStatement	 
>5311	CallExpression	bone -> SetAttribute ( \"cr\" , this -> bones [ i ] -> collideRadius )
>5312	ArgumentList	\"cr\"
>5313	Argument	this -> bones [ i ] -> collideRadius
>5314	PtrMemberAccess	this -> bones [ i ] -> collideRadius
>5315	Identifier	collideRadius
>5316	ArrayIndexing	this -> bones [ i ]
>5317	Identifier	i
>5318	PtrMemberAccess	this -> bones
>5319	Identifier	bones
>5320	Identifier	this
>5321	Argument	\"cr\"
>5322	PrimaryExpression	\"cr\"
>5323	Callee	bone -> SetAttribute
>5324	PtrMemberAccess	bone -> SetAttribute
>5325	Identifier	SetAttribute
>5326	Identifier	bone
>5327	ExpressionStatement	 
>5328	CallExpression	bone -> SetAttribute ( \"gc\" , this -> bones [ i ] -> generateCollisionMask )
>5329	ArgumentList	\"gc\"
>5330	Argument	this -> bones [ i ] -> generateCollisionMask
>5331	PtrMemberAccess	this -> bones [ i ] -> generateCollisionMask
>5332	Identifier	generateCollisionMask
>5333	ArrayIndexing	this -> bones [ i ]
>5334	Identifier	i
>5335	PtrMemberAccess	this -> bones
>5336	Identifier	bones
>5337	Identifier	this
>5338	Argument	\"gc\"
>5339	PrimaryExpression	\"gc\"
>5340	Callee	bone -> SetAttribute
>5341	PtrMemberAccess	bone -> SetAttribute
>5342	Identifier	SetAttribute
>5343	Identifier	bone
>5344	ExpressionStatement	 
>5345	CallExpression	bone -> SetAttribute ( \"fv\" , this -> bones [ i ] -> isfv ( ) )
>5346	ArgumentList	\"fv\"
>5347	Argument	this -> bones [ i ] -> isfv ( )
>5348	CallExpression	this -> bones [ i ] -> isfv ( )
>5349	ArgumentList	 
>5350	Callee	this -> bones [ i ] -> isfv
>5351	PtrMemberAccess	this -> bones [ i ] -> isfv
>5352	Identifier	isfv
>5353	ArrayIndexing	this -> bones [ i ]
>5354	Identifier	i
>5355	PtrMemberAccess	this -> bones
>5356	Identifier	bones
>5357	Identifier	this
>5358	Argument	\"fv\"
>5359	PrimaryExpression	\"fv\"
>5360	Callee	bone -> SetAttribute
>5361	PtrMemberAccess	bone -> SetAttribute
>5362	Identifier	SetAttribute
>5363	Identifier	bone
>5364	ExpressionStatement	 
>5365	CallExpression	bone -> SetAttribute ( \"fh\" , this -> bones [ i ] -> isfh ( ) )
>5366	ArgumentList	\"fh\"
>5367	Argument	this -> bones [ i ] -> isfh ( )
>5368	CallExpression	this -> bones [ i ] -> isfh ( )
>5369	ArgumentList	 
>5370	Callee	this -> bones [ i ] -> isfh
>5371	PtrMemberAccess	this -> bones [ i ] -> isfh
>5372	Identifier	isfh
>5373	ArrayIndexing	this -> bones [ i ]
>5374	Identifier	i
>5375	PtrMemberAccess	this -> bones
>5376	Identifier	bones
>5377	Identifier	this
>5378	Argument	\"fh\"
>5379	PrimaryExpression	\"fh\"
>5380	Callee	bone -> SetAttribute
>5381	PtrMemberAccess	bone -> SetAttribute
>5382	Identifier	SetAttribute
>5383	Identifier	bone
>5384	ExpressionStatement	 
>5385	CallExpression	bone -> SetAttribute ( \"name\" , this -> bones [ i ] -> name . c_str ( ) )
>5386	ArgumentList	\"name\"
>5387	Argument	this -> bones [ i ] -> name . c_str ( )
>5388	CallExpression	this -> bones [ i ] -> name . c_str ( )
>5389	ArgumentList	 
>5390	Callee	this -> bones [ i ] -> name . c_str
>5391	MemberAccess	this -> bones [ i ] -> name . c_str
>5392	Identifier	c_str
>5393	PtrMemberAccess	this -> bones [ i ] -> name
>5394	Identifier	name
>5395	ArrayIndexing	this -> bones [ i ]
>5396	Identifier	i
>5397	PtrMemberAccess	this -> bones
>5398	Identifier	bones
>5399	Identifier	this
>5400	Argument	\"name\"
>5401	PrimaryExpression	\"name\"
>5402	Callee	bone -> SetAttribute
>5403	PtrMemberAccess	bone -> SetAttribute
>5404	Identifier	SetAttribute
>5405	Identifier	bone
>5406	ExpressionStatement	 
>5407	CallExpression	bone -> SetAttribute ( \"pidx\" , this -> bones [ i ] -> pidx )
>5408	ArgumentList	\"pidx\"
>5409	Argument	this -> bones [ i ] -> pidx
>5410	PtrMemberAccess	this -> bones [ i ] -> pidx
>5411	Identifier	pidx
>5412	ArrayIndexing	this -> bones [ i ]
>5413	Identifier	i
>5414	PtrMemberAccess	this -> bones
>5415	Identifier	bones
>5416	Identifier	this
>5417	Argument	\"pidx\"
>5418	PrimaryExpression	\"pidx\"
>5419	Callee	bone -> SetAttribute
>5420	PtrMemberAccess	bone -> SetAttribute
>5421	Identifier	SetAttribute
>5422	Identifier	bone
>5423	ExpressionStatement	 
>5424	CallExpression	bone -> SetAttribute ( \"gfx\" , this -> bones [ i ] -> gfx . c_str ( ) )
>5425	ArgumentList	\"gfx\"
>5426	Argument	this -> bones [ i ] -> gfx . c_str ( )
>5427	CallExpression	this -> bones [ i ] -> gfx . c_str ( )
>5428	ArgumentList	 
>5429	Callee	this -> bones [ i ] -> gfx . c_str
>5430	MemberAccess	this -> bones [ i ] -> gfx . c_str
>5431	Identifier	c_str
>5432	PtrMemberAccess	this -> bones [ i ] -> gfx
>5433	Identifier	gfx
>5434	ArrayIndexing	this -> bones [ i ]
>5435	Identifier	i
>5436	PtrMemberAccess	this -> bones
>5437	Identifier	bones
>5438	Identifier	this
>5439	Argument	\"gfx\"
>5440	PrimaryExpression	\"gfx\"
>5441	Callee	bone -> SetAttribute
>5442	PtrMemberAccess	bone -> SetAttribute
>5443	Identifier	SetAttribute
>5444	Identifier	bone
>5445	ExpressionStatement	 
>5446	CallExpression	bone -> SetAttribute ( \"idx\" , this -> bones [ i ] -> boneIdx )
>5447	ArgumentList	\"idx\"
>5448	Argument	this -> bones [ i ] -> boneIdx
>5449	PtrMemberAccess	this -> bones [ i ] -> boneIdx
>5450	Identifier	boneIdx
>5451	ArrayIndexing	this -> bones [ i ]
>5452	Identifier	i
>5453	PtrMemberAccess	this -> bones
>5454	Identifier	bones
>5455	Identifier	this
>5456	Argument	\"idx\"
>5457	PrimaryExpression	\"idx\"
>5458	Callee	bone -> SetAttribute
>5459	PtrMemberAccess	bone -> SetAttribute
>5460	Identifier	SetAttribute
>5461	Identifier	bone
>5462	IdentifierDeclStatement	 
>5463	IdentifierDecl	* bone = xml -> NewElement ( \"Bone\" )
>5464	AssignmentExpr	* bone = xml -> NewElement ( \"Bone\" )
>5465	CallExpression	xml -> NewElement ( \"Bone\" )
>5466	ArgumentList	\"Bone\"
>5467	Argument	\"Bone\"
>5468	PrimaryExpression	\"Bone\"
>5469	Callee	xml -> NewElement
>5470	PtrMemberAccess	xml -> NewElement
>5471	Identifier	NewElement
>5472	Identifier	xml
>5473	Identifier	bone
>5474	Identifier	bone
>5475	IdentifierDeclType	XMLElement *
>5476	IncDecOp	 
>5477	IncDec	++
>5478	Identifier	i
>5479	Condition	 
>5480	RelationalExpression	i < this -> bones . size ( )
>5481	CallExpression	this -> bones . size ( )
>5482	ArgumentList	 
>5483	Callee	this -> bones . size
>5484	MemberAccess	this -> bones . size
>5485	Identifier	size
>5486	PtrMemberAccess	this -> bones
>5487	Identifier	bones
>5488	Identifier	this
>5489	Identifier	i
>5490	ForInit	 
>5491	AssignmentExpr	i = 0
>5492	PrimaryExpression	0
>5493	Identifier	i
>5494	IdentifierDeclStatement	 
>5495	IdentifierDecl	* bones = xml -> NewElement ( \"Bones\" )
>5496	AssignmentExpr	* bones = xml -> NewElement ( \"Bones\" )
>5497	CallExpression	xml -> NewElement ( \"Bones\" )
>5498	ArgumentList	\"Bones\"
>5499	Argument	\"Bones\"
>5500	PrimaryExpression	\"Bones\"
>5501	Callee	xml -> NewElement
>5502	PtrMemberAccess	xml -> NewElement
>5503	Identifier	NewElement
>5504	Identifier	xml
>5505	Identifier	bones
>5506	Identifier	bones
>5507	IdentifierDeclType	XMLElement *
>5508	ExpressionStatement	 
>5509	CallExpression	xml -> InsertEndChild ( animationLayers )
>5510	ArgumentList	animationLayers
>5511	Argument	animationLayers
>5512	Identifier	animationLayers
>5513	Callee	xml -> InsertEndChild
>5514	PtrMemberAccess	xml -> InsertEndChild
>5515	Identifier	InsertEndChild
>5516	Identifier	xml
>5517	ForStatement	for ( i = 0 ; i < animLayers . size ( ) ; i ++ )
>5518	CompoundStatement	 
>5519	ExpressionStatement	 
>5520	CallExpression	animationLayers -> InsertEndChild ( animationLayer )
>5521	ArgumentList	animationLayer
>5522	Argument	animationLayer
>5523	Identifier	animationLayer
>5524	Callee	animationLayers -> InsertEndChild
>5525	PtrMemberAccess	animationLayers -> InsertEndChild
>5526	Identifier	InsertEndChild
>5527	Identifier	animationLayers
>5528	IfStatement	if ( ! animLayers [ i ] . name . empty ( ) )
>5529	CompoundStatement	 
>5530	ExpressionStatement	 
>5531	CallExpression	animationLayer -> SetAttribute ( \"name\" , animLayers [ i ] . name . c_str ( ) )
>5532	ArgumentList	\"name\"
>5533	Argument	animLayers [ i ] . name . c_str ( )
>5534	CallExpression	animLayers [ i ] . name . c_str ( )
>5535	ArgumentList	 
>5536	Callee	animLayers [ i ] . name . c_str
>5537	MemberAccess	animLayers [ i ] . name . c_str
>5538	Identifier	c_str
>5539	MemberAccess	animLayers [ i ] . name
>5540	Identifier	name
>5541	ArrayIndexing	animLayers [ i ]
>5542	Identifier	i
>5543	Identifier	animLayers
>5544	Argument	\"name\"
>5545	PrimaryExpression	\"name\"
>5546	Callee	animationLayer -> SetAttribute
>5547	PtrMemberAccess	animationLayer -> SetAttribute
>5548	Identifier	SetAttribute
>5549	Identifier	animationLayer
>5550	Condition	 
>5551	UnaryOp	! animLayers [ i ] . name . empty ( )
>5552	CallExpression	animLayers [ i ] . name . empty ( )
>5553	ArgumentList	 
>5554	Callee	animLayers [ i ] . name . empty
>5555	MemberAccess	animLayers [ i ] . name . empty
>5556	Identifier	empty
>5557	MemberAccess	animLayers [ i ] . name
>5558	Identifier	name
>5559	ArrayIndexing	animLayers [ i ]
>5560	Identifier	i
>5561	Identifier	animLayers
>5562	UnaryOperator	!
>5563	IfStatement	if ( animLayers [ i ] . includeBones . size ( ) > 0 )
>5564	CompoundStatement	 
>5565	ExpressionStatement	 
>5566	CallExpression	animationLayer -> SetAttribute ( \"include\" , os . str ( ) . c_str ( ) )
>5567	ArgumentList	\"include\"
>5568	Argument	os . str ( ) . c_str ( )
>5569	CallExpression	os . str ( ) . c_str ( )
>5570	ArgumentList	 
>5571	Callee	os . str ( ) . c_str
>5572	MemberAccess	os . str ( ) . c_str
>5573	Identifier	c_str
>5574	CallExpression	os . str ( )
>5575	ArgumentList	 
>5576	Callee	os . str
>5577	MemberAccess	os . str
>5578	Identifier	str
>5579	Identifier	os
>5580	Argument	\"include\"
>5581	PrimaryExpression	\"include\"
>5582	Callee	animationLayer -> SetAttribute
>5583	PtrMemberAccess	animationLayer -> SetAttribute
>5584	Identifier	SetAttribute
>5585	Identifier	animationLayer
>5586	ForStatement	for ( int j = 0 ; j < animLayers [ i ] . includeBones . size ( ) ; j ++ )
>5587	CompoundStatement	 
>5588	ExpressionStatement	 
>5589	ShiftExpression	os << animLayers [ i ] . includeBones [ j ] << \" \"
>5590	ShiftExpression	animLayers [ i ] . includeBones [ j ] << \" \"
>5591	PrimaryExpression	\" \"
>5592	ArrayIndexing	animLayers [ i ] . includeBones [ j ]
>5593	Identifier	j
>5594	MemberAccess	animLayers [ i ] . includeBones
>5595	Identifier	includeBones
>5596	ArrayIndexing	animLayers [ i ]
>5597	Identifier	i
>5598	Identifier	animLayers
>5599	Identifier	os
>5600	IncDecOp	 
>5601	IncDec	++
>5602	Identifier	j
>5603	Condition	 
>5604	RelationalExpression	j < animLayers [ i ] . includeBones . size ( )
>5605	CallExpression	animLayers [ i ] . includeBones . size ( )
>5606	ArgumentList	 
>5607	Callee	animLayers [ i ] . includeBones . size
>5608	MemberAccess	animLayers [ i ] . includeBones . size
>5609	Identifier	size
>5610	MemberAccess	animLayers [ i ] . includeBones
>5611	Identifier	includeBones
>5612	ArrayIndexing	animLayers [ i ]
>5613	Identifier	i
>5614	Identifier	animLayers
>5615	Identifier	j
>5616	ForInit	 
>5617	IdentifierDeclStatement	int j = 0 ;
>5618	IdentifierDecl	j = 0
>5619	AssignmentExpr	j = 0
>5620	PrimaryExpression	0
>5621	Identifier	j
>5622	Identifier	j
>5623	IdentifierDeclType	int
>5624	IdentifierDeclStatement	 
>5625	IdentifierDecl	os
>5626	Identifier	os
>5627	IdentifierDeclType	std 
>5628	Condition	 
>5629	RelationalExpression	animLayers [ i ] . includeBones . size ( ) > 0
>5630	PrimaryExpression	0
>5631	CallExpression	animLayers [ i ] . includeBones . size ( )
>5632	ArgumentList	 
>5633	Callee	animLayers [ i ] . includeBones . size
>5634	MemberAccess	animLayers [ i ] . includeBones . size
>5635	Identifier	size
>5636	MemberAccess	animLayers [ i ] . includeBones
>5637	Identifier	includeBones
>5638	ArrayIndexing	animLayers [ i ]
>5639	Identifier	i
>5640	Identifier	animLayers
>5641	IfStatement	if ( animLayers [ i ] . ignoreBones . size ( ) > 0 )
>5642	CompoundStatement	 
>5643	ExpressionStatement	 
>5644	CallExpression	animationLayer -> SetAttribute ( \"ignore\" , os . str ( ) . c_str ( ) )
>5645	ArgumentList	\"ignore\"
>5646	Argument	os . str ( ) . c_str ( )
>5647	CallExpression	os . str ( ) . c_str ( )
>5648	ArgumentList	 
>5649	Callee	os . str ( ) . c_str
>5650	MemberAccess	os . str ( ) . c_str
>5651	Identifier	c_str
>5652	CallExpression	os . str ( )
>5653	ArgumentList	 
>5654	Callee	os . str
>5655	MemberAccess	os . str
>5656	Identifier	str
>5657	Identifier	os
>5658	Argument	\"ignore\"
>5659	PrimaryExpression	\"ignore\"
>5660	Callee	animationLayer -> SetAttribute
>5661	PtrMemberAccess	animationLayer -> SetAttribute
>5662	Identifier	SetAttribute
>5663	Identifier	animationLayer
>5664	ForStatement	for ( int j = 0 ; j < animLayers [ i ] . ignoreBones . size ( ) ; j ++ )
>5665	CompoundStatement	 
>5666	ExpressionStatement	 
>5667	ShiftExpression	os << animLayers [ i ] . ignoreBones [ j ] << \" \"
>5668	ShiftExpression	animLayers [ i ] . ignoreBones [ j ] << \" \"
>5669	PrimaryExpression	\" \"
>5670	ArrayIndexing	animLayers [ i ] . ignoreBones [ j ]
>5671	Identifier	j
>5672	MemberAccess	animLayers [ i ] . ignoreBones
>5673	Identifier	ignoreBones
>5674	ArrayIndexing	animLayers [ i ]
>5675	Identifier	i
>5676	Identifier	animLayers
>5677	Identifier	os
>5678	IncDecOp	 
>5679	IncDec	++
>5680	Identifier	j
>5681	Condition	 
>5682	RelationalExpression	j < animLayers [ i ] . ignoreBones . size ( )
>5683	CallExpression	animLayers [ i ] . ignoreBones . size ( )
>5684	ArgumentList	 
>5685	Callee	animLayers [ i ] . ignoreBones . size
>5686	MemberAccess	animLayers [ i ] . ignoreBones . size
>5687	Identifier	size
>5688	MemberAccess	animLayers [ i ] . ignoreBones
>5689	Identifier	ignoreBones
>5690	ArrayIndexing	animLayers [ i ]
>5691	Identifier	i
>5692	Identifier	animLayers
>5693	Identifier	j
>5694	ForInit	 
>5695	IdentifierDeclStatement	int j = 0 ;
>5696	IdentifierDecl	j = 0
>5697	AssignmentExpr	j = 0
>5698	PrimaryExpression	0
>5699	Identifier	j
>5700	Identifier	j
>5701	IdentifierDeclType	int
>5702	IdentifierDeclStatement	 
>5703	IdentifierDecl	os
>5704	Identifier	os
>5705	IdentifierDeclType	std 
>5706	Condition	 
>5707	RelationalExpression	animLayers [ i ] . ignoreBones . size ( ) > 0
>5708	PrimaryExpression	0
>5709	CallExpression	animLayers [ i ] . ignoreBones . size ( )
>5710	ArgumentList	 
>5711	Callee	animLayers [ i ] . ignoreBones . size
>5712	MemberAccess	animLayers [ i ] . ignoreBones . size
>5713	Identifier	size
>5714	MemberAccess	animLayers [ i ] . ignoreBones
>5715	Identifier	ignoreBones
>5716	ArrayIndexing	animLayers [ i ]
>5717	Identifier	i
>5718	Identifier	animLayers
>5719	IdentifierDeclStatement	 
>5720	IdentifierDecl	* animationLayer = xml -> NewElement ( \"AnimationLayer\" )
>5721	AssignmentExpr	* animationLayer = xml -> NewElement ( \"AnimationLayer\" )
>5722	CallExpression	xml -> NewElement ( \"AnimationLayer\" )
>5723	ArgumentList	\"AnimationLayer\"
>5724	Argument	\"AnimationLayer\"
>5725	PrimaryExpression	\"AnimationLayer\"
>5726	Callee	xml -> NewElement
>5727	PtrMemberAccess	xml -> NewElement
>5728	Identifier	NewElement
>5729	Identifier	xml
>5730	Identifier	animationLayer
>5731	Identifier	animationLayer
>5732	IdentifierDeclType	XMLElement *
>5733	IncDecOp	 
>5734	IncDec	++
>5735	Identifier	i
>5736	Condition	 
>5737	RelationalExpression	i < animLayers . size ( )
>5738	CallExpression	animLayers . size ( )
>5739	ArgumentList	 
>5740	Callee	animLayers . size
>5741	MemberAccess	animLayers . size
>5742	Identifier	size
>5743	Identifier	animLayers
>5744	Identifier	i
>5745	ForInit	 
>5746	AssignmentExpr	i = 0
>5747	PrimaryExpression	0
>5748	Identifier	i
>5749	IdentifierDeclStatement	 
>5750	IdentifierDecl	* animationLayers = xml -> NewElement ( \"AnimationLayers\" )
>5751	AssignmentExpr	* animationLayers = xml -> NewElement ( \"AnimationLayers\" )
>5752	CallExpression	xml -> NewElement ( \"AnimationLayers\" )
>5753	ArgumentList	\"AnimationLayers\"
>5754	Argument	\"AnimationLayers\"
>5755	PrimaryExpression	\"AnimationLayers\"
>5756	Callee	xml -> NewElement
>5757	PtrMemberAccess	xml -> NewElement
>5758	Identifier	NewElement
>5759	Identifier	xml
>5760	Identifier	animationLayers
>5761	Identifier	animationLayers
>5762	IdentifierDeclType	XMLElement *
>5763	ExpressionStatement	 
>5764	CallExpression	xml -> Clear ( )
>5765	ArgumentList	 
>5766	Callee	xml -> Clear
>5767	PtrMemberAccess	xml -> Clear
>5768	Identifier	Clear
>5769	Identifier	xml
>5770	IdentifierDeclStatement	 
>5771	IdentifierDecl	* xml = _retrieveSkeletalXML ( file , true )
>5772	AssignmentExpr	* xml = _retrieveSkeletalXML ( file , true )
>5773	CallExpression	_retrieveSkeletalXML ( file , true )
>5774	ArgumentList	file
>5775	Argument	true
>5776	Identifier	true
>5777	Argument	file
>5778	Identifier	file
>5779	Callee	_retrieveSkeletalXML
>5780	Identifier	_retrieveSkeletalXML
>5781	Identifier	xml
>5782	Identifier	xml
>5783	IdentifierDeclType	XMLDocument *
>5784	IdentifierDeclStatement	 
>5785	IdentifierDecl	i = 0
>5786	AssignmentExpr	i = 0
>5787	PrimaryExpression	0
>5788	Identifier	i
>5789	Identifier	i
>5790	IdentifierDeclType	int
>5791	IfStatement	if ( ! secondaryAnimationPath . empty ( ) )
>5792	ElseStatement	else
>5793	CompoundStatement	 
>5794	ExpressionStatement	 
>5795	AssignmentExpr	file = animationPath + filename + \".xml\"
>5796	AdditiveExpression	animationPath + filename + \".xml\"
>5797	AdditiveExpression	filename + \".xml\"
>5798	PrimaryExpression	\".xml\"
>5799	Identifier	filename
>5800	Identifier	animationPath
>5801	Identifier	file
>5802	CompoundStatement	 
>5803	ExpressionStatement	 
>5804	AssignmentExpr	file = secondaryAnimationPath + filename + \".xml\"
>5805	AdditiveExpression	secondaryAnimationPath + filename + \".xml\"
>5806	AdditiveExpression	filename + \".xml\"
>5807	PrimaryExpression	\".xml\"
>5808	Identifier	filename
>5809	Identifier	secondaryAnimationPath
>5810	Identifier	file
>5811	ExpressionStatement	 
>5812	CallExpression	createDir ( secondaryAnimationPath )
>5813	ArgumentList	secondaryAnimationPath
>5814	Argument	secondaryAnimationPath
>5815	Identifier	secondaryAnimationPath
>5816	Callee	createDir
>5817	Identifier	createDir
>5818	Condition	 
>5819	UnaryOp	! secondaryAnimationPath . empty ( )
>5820	CallExpression	secondaryAnimationPath . empty ( )
>5821	ArgumentList	 
>5822	Callee	secondaryAnimationPath . empty
>5823	MemberAccess	secondaryAnimationPath . empty
>5824	Identifier	empty
>5825	Identifier	secondaryAnimationPath
>5826	UnaryOperator	!
>5827	ExpressionStatement	 
>5828	CallExpression	stringToLower ( filename )
>5829	ArgumentList	filename
>5830	Argument	filename
>5831	Identifier	filename
>5832	Callee	stringToLower
>5833	Identifier	stringToLower
>5834	IdentifierDeclStatement	 
>5835	IdentifierDecl	filename = fn
>5836	AssignmentExpr	filename = fn
>5837	Identifier	fn
>5838	Identifier	fn
>5839	Identifier	filename
>5840	IdentifierDeclType	std 
>5841	IdentifierDecl	file
>5842	Identifier	file
>5843	IdentifierDeclType	std 
>5993	FunctionDef	SkeletalSprite 
>5994	ParameterList	Bone * b
>5995	Parameter	 
>5996	Identifier	b
>5997	ParameterType	Bone *
>5998	ReturnType	int
>5999	CompoundStatement	 
>6000	ReturnStatement	 
>6001	UnaryOp	- 1
>6002	PrimaryExpression	1
>6003	UnaryOperator	-
>6004	ForStatement	for ( int i = 0 ; i < bones . size ( ) ; i ++ )
>6005	CompoundStatement	 
>6006	IfStatement	if ( bones [ i ] == b )
>6007	ReturnStatement	 
>6008	Identifier	i
>6009	Condition	 
>6010	EqualityExpression	bones [ i ] == b
>6011	Identifier	b
>6012	ArrayIndexing	bones [ i ]
>6013	Identifier	i
>6014	Identifier	bones
>6015	IncDecOp	 
>6016	IncDec	++
>6017	Identifier	i
>6018	Condition	 
>6019	RelationalExpression	i < bones . size ( )
>6020	CallExpression	bones . size ( )
>6021	ArgumentList	 
>6022	Callee	bones . size
>6023	MemberAccess	bones . size
>6024	Identifier	size
>6025	Identifier	bones
>6026	Identifier	i
>6027	ForInit	 
>6028	IdentifierDeclStatement	int i = 0 ;
>6029	IdentifierDecl	i = 0
>6030	AssignmentExpr	i = 0
>6031	PrimaryExpression	0
>6032	Identifier	i
>6033	Identifier	i
>6034	IdentifierDeclType	int
>6044	FunctionDef	SkeletalSprite 
>6045	ParameterList	int idx , int v
>6046	Parameter	 
>6047	Identifier	v
>6048	ParameterType	int
>6049	Parameter	 
>6050	Identifier	idx
>6051	ParameterType	int
>6052	ReturnType	void
>6053	CompoundStatement	 
>6054	IfStatement	if ( idx >= 0 && idx < bones . size ( ) )
>6055	CompoundStatement	 
>6056	ExpressionStatement	 
>6057	AssignmentExpr	bones [ idx ] -> alpha . x = v
>6058	Identifier	v
>6059	MemberAccess	bones [ idx ] -> alpha . x
>6060	Identifier	x
>6061	PtrMemberAccess	bones [ idx ] -> alpha
>6062	Identifier	alpha
>6063	ArrayIndexing	bones [ idx ]
>6064	Identifier	idx
>6065	Identifier	bones
>6066	Condition	 
>6067	AndExpression	idx >= 0 && idx < bones . size ( )
>6068	RelationalExpression	idx < bones . size ( )
>6069	CallExpression	bones . size ( )
>6070	ArgumentList	 
>6071	Callee	bones . size
>6072	MemberAccess	bones . size
>6073	Identifier	size
>6074	Identifier	bones
>6075	Identifier	idx
>6076	RelationalExpression	idx >= 0
>6077	PrimaryExpression	0
>6078	Identifier	idx
>6092	FunctionDef	SkeletalSprite 
>6093	ParameterList	const std 
>6094	Parameter	 
>6095	Identifier	name
>6096	ParameterType	const std 
>6097	ReturnType	Bone *
>6098	CompoundStatement	 
>6099	ReturnStatement	 
>6100	PrimaryExpression	0
>6101	ExpressionStatement	 
>6102	CallExpression	debugLog ( os . str ( ) )
>6103	ArgumentList	os . str ( )
>6104	Argument	os . str ( )
>6105	CallExpression	os . str ( )
>6106	ArgumentList	 
>6107	Callee	os . str
>6108	MemberAccess	os . str
>6109	Identifier	str
>6110	Identifier	os
>6111	Callee	debugLog
>6112	Identifier	debugLog
>6113	ExpressionStatement	 
>6114	ShiftExpression	os << \"Could not find bone with name[\" << name << \"]\"
>6115	ShiftExpression	\"Could not find bone with name[\" << name << \"]\"
>6116	ShiftExpression	name << \"]\"
>6117	PrimaryExpression	\"]\"
>6118	Identifier	name
>6119	PrimaryExpression	\"Could not find bone with name[\"
>6120	Identifier	os
>6121	IdentifierDeclStatement	 
>6122	IdentifierDecl	os
>6123	Identifier	os
>6124	IdentifierDeclType	std 
>6125	ForStatement	for ( int i = 0 ; i < bones . size ( ) ; i ++ )
>6126	CompoundStatement	 
>6127	IfStatement	if ( bones [ i ] -> name == name )
>6128	ReturnStatement	 
>6129	ArrayIndexing	bones [ i ]
>6130	Identifier	i
>6131	Identifier	bones
>6132	Condition	 
>6133	EqualityExpression	bones [ i ] -> name == name
>6134	Identifier	name
>6135	PtrMemberAccess	bones [ i ] -> name
>6136	Identifier	name
>6137	ArrayIndexing	bones [ i ]
>6138	Identifier	i
>6139	Identifier	bones
>6140	IncDecOp	 
>6141	IncDec	++
>6142	Identifier	i
>6143	Condition	 
>6144	RelationalExpression	i < bones . size ( )
>6145	CallExpression	bones . size ( )
>6146	ArgumentList	 
>6147	Callee	bones . size
>6148	MemberAccess	bones . size
>6149	Identifier	size
>6150	Identifier	bones
>6151	Identifier	i
>6152	ForInit	 
>6153	IdentifierDeclStatement	int i = 0 ;
>6154	IdentifierDecl	i = 0
>6155	AssignmentExpr	i = 0
>6156	PrimaryExpression	0
>6157	Identifier	i
>6158	Identifier	i
>6159	IdentifierDeclType	int
>6174	FunctionDef	SkeletalSprite 
>6175	ParameterList	int idx
>6176	Parameter	 
>6177	Identifier	idx
>6178	ParameterType	int
>6179	ReturnType	Bone *
>6180	CompoundStatement	 
>6181	ReturnStatement	 
>6182	PrimaryExpression	0
>6183	ExpressionStatement	 
>6184	CallExpression	debugLog ( os . str ( ) )
>6185	ArgumentList	os . str ( )
>6186	Argument	os . str ( )
>6187	CallExpression	os . str ( )
>6188	ArgumentList	 
>6189	Callee	os . str
>6190	MemberAccess	os . str
>6191	Identifier	str
>6192	Identifier	os
>6193	Callee	debugLog
>6194	Identifier	debugLog
>6195	ExpressionStatement	 
>6196	ShiftExpression	os << \"Could not find bone with idx[\" << idx << \"]\"
>6197	ShiftExpression	\"Could not find bone with idx[\" << idx << \"]\"
>6198	ShiftExpression	idx << \"]\"
>6199	PrimaryExpression	\"]\"
>6200	Identifier	idx
>6201	PrimaryExpression	\"Could not find bone with idx[\"
>6202	Identifier	os
>6203	IdentifierDeclStatement	 
>6204	IdentifierDecl	os
>6205	Identifier	os
>6206	IdentifierDeclType	std 
>6207	ForStatement	for ( int i = 0 ; i < bones . size ( ) ; i ++ )
>6208	CompoundStatement	 
>6209	IfStatement	if ( bones [ i ] -> boneIdx == idx )
>6210	ReturnStatement	 
>6211	ArrayIndexing	bones [ i ]
>6212	Identifier	i
>6213	Identifier	bones
>6214	Condition	 
>6215	EqualityExpression	bones [ i ] -> boneIdx == idx
>6216	Identifier	idx
>6217	PtrMemberAccess	bones [ i ] -> boneIdx
>6218	Identifier	boneIdx
>6219	ArrayIndexing	bones [ i ]
>6220	Identifier	i
>6221	Identifier	bones
>6222	IncDecOp	 
>6223	IncDec	++
>6224	Identifier	i
>6225	Condition	 
>6226	RelationalExpression	i < bones . size ( )
>6227	CallExpression	bones . size ( )
>6228	ArgumentList	 
>6229	Callee	bones . size
>6230	MemberAccess	bones . size
>6231	Identifier	size
>6232	Identifier	bones
>6233	Identifier	i
>6234	ForInit	 
>6235	IdentifierDeclStatement	int i = 0 ;
>6236	IdentifierDecl	i = 0
>6237	AssignmentExpr	i = 0
>6238	PrimaryExpression	0
>6239	Identifier	i
>6240	Identifier	i
>6241	IdentifierDeclType	int
>6256	FunctionDef	SkeletalSprite 
>6257	ParameterList	int idx , std 
>6258	Parameter	 
>6259	Identifier	cp
>6260	ParameterType	const Vector &
>6261	Parameter	 
>6262	Identifier	fv
>6263	ParameterType	bool
>6264	Parameter	 
>6265	Identifier	fh
>6266	ParameterType	bool
>6267	Parameter	 
>6268	Identifier	cr
>6269	ParameterType	float
>6270	Parameter	 
>6271	Identifier	name
>6272	ParameterType	std 
>6273	Parameter	 
>6274	Identifier	rbp
>6275	ParameterType	int
>6276	Parameter	 
>6277	Identifier	pidx
>6278	ParameterType	int
>6279	Parameter	 
>6280	Identifier	gfx
>6281	ParameterType	std 
>6282	Parameter	 
>6283	Identifier	idx
>6284	ParameterType	int
>6285	ReturnType	Bone *
>6286	CompoundStatement	 
>6287	ReturnStatement	 
>6288	Identifier	b
>6289	ExpressionStatement	 
>6290	CallExpression	bones . push_back ( b )
>6291	ArgumentList	b
>6292	Argument	b
>6293	Identifier	b
>6294	Callee	bones . push_back
>6295	MemberAccess	bones . push_back
>6296	Identifier	push_back
>6297	Identifier	bones
>6298	IfStatement	if ( fv )
>6299	ExpressionStatement	 
>6300	CallExpression	b -> flipVertical ( )
>6301	ArgumentList	 
>6302	Callee	b -> flipVertical
>6303	PtrMemberAccess	b -> flipVertical
>6304	Identifier	flipVertical
>6305	Identifier	b
>6306	Condition	 
>6307	Identifier	fv
>6308	IfStatement	if ( fh )
>6309	ExpressionStatement	 
>6310	CallExpression	b -> flipHorizontal ( )
>6311	ArgumentList	 
>6312	Callee	b -> flipHorizontal
>6313	PtrMemberAccess	b -> flipHorizontal
>6314	Identifier	flipHorizontal
>6315	Identifier	b
>6316	Condition	 
>6317	Identifier	fh
>6318	ExpressionStatement	 
>6319	AssignmentExpr	b -> name = name
>6320	Identifier	name
>6321	PtrMemberAccess	b -> name
>6322	Identifier	name
>6323	Identifier	b
>6324	ExpressionStatement	 
>6325	AssignmentExpr	b -> collidePosition = cp
>6326	Identifier	cp
>6327	PtrMemberAccess	b -> collidePosition
>6328	Identifier	collidePosition
>6329	Identifier	b
>6330	ExpressionStatement	 
>6331	AssignmentExpr	b -> collideRadius = cr
>6332	Identifier	cr
>6333	PtrMemberAccess	b -> collideRadius
>6334	Identifier	collideRadius
>6335	Identifier	b
>6336	ExpressionStatement	 
>6337	AssignmentExpr	b -> pidx = pidx
>6338	Identifier	pidx
>6339	PtrMemberAccess	b -> pidx
>6340	Identifier	pidx
>6341	Identifier	b
>6342	ExpressionStatement	 
>6343	AssignmentExpr	b -> renderBeforeParent = rbp
>6344	Identifier	rbp
>6345	PtrMemberAccess	b -> renderBeforeParent
>6346	Identifier	renderBeforeParent
>6347	Identifier	b
>6348	ExpressionStatement	 
>6349	AssignmentExpr	b -> rbp = rbp
>6350	Identifier	rbp
>6351	PtrMemberAccess	b -> rbp
>6352	Identifier	rbp
>6353	Identifier	b
>6354	ExpressionStatement	 
>6355	AssignmentExpr	b -> gfx = gfx
>6356	Identifier	gfx
>6357	PtrMemberAccess	b -> gfx
>6358	Identifier	gfx
>6359	Identifier	b
>6360	ExpressionStatement	 
>6361	AssignmentExpr	b -> skeleton = this
>6362	Identifier	this
>6363	PtrMemberAccess	b -> skeleton
>6364	Identifier	skeleton
>6365	Identifier	b
>6366	ExpressionStatement	 
>6367	CallExpression	b -> setTexture ( gfx )
>6368	ArgumentList	gfx
>6369	Argument	gfx
>6370	Identifier	gfx
>6371	Callee	b -> setTexture
>6372	PtrMemberAccess	b -> setTexture
>6373	Identifier	setTexture
>6374	Identifier	b
>6375	ExpressionStatement	 
>6376	AssignmentExpr	b -> boneIdx = idx
>6377	Identifier	idx
>6378	PtrMemberAccess	b -> boneIdx
>6379	Identifier	boneIdx
>6380	Identifier	b
>6381	ExpressionStatement	 
>6382	Identifier	Bone
>6383	Statement	 
>6384	Statement	 
>6385	Statement	 
>6386	Statement	 
>6387	Statement	 
>6413	FunctionDef	SkeletalSprite 
>6414	ParameterList	 
>6415	ReturnType	void
>6416	CompoundStatement	 
>6417	ExpressionStatement	 
>6418	AssignmentExpr	animLayers [ 0 ] . currentAnimation = 0
>6419	PrimaryExpression	0
>6420	MemberAccess	animLayers [ 0 ] . currentAnimation
>6421	Identifier	currentAnimation
>6422	ArrayIndexing	animLayers [ 0 ]
>6423	PrimaryExpression	0
>6424	Identifier	animLayers
>6425	ExpressionStatement	 
>6426	CallExpression	stopAnimation ( )
>6427	ArgumentList	 
>6428	Callee	stopAnimation
>6429	Identifier	stopAnimation
>6436	FunctionDef	SkeletalSprite 
>6437	ParameterList	 
>6438	ReturnType	void
>6439	CompoundStatement	 
>6440	ExpressionStatement	 
>6441	AssignmentExpr	animLayers [ 0 ] . currentAnimation = animations . size ( ) - 1
>6442	AdditiveExpression	animations . size ( ) - 1
>6443	PrimaryExpression	1
>6444	CallExpression	animations . size ( )
>6445	ArgumentList	 
>6446	Callee	animations . size
>6447	MemberAccess	animations . size
>6448	Identifier	size
>6449	Identifier	animations
>6450	MemberAccess	animLayers [ 0 ] . currentAnimation
>6451	Identifier	currentAnimation
>6452	ArrayIndexing	animLayers [ 0 ]
>6453	PrimaryExpression	0
>6454	Identifier	animLayers
>6455	ExpressionStatement	 
>6456	CallExpression	stopAnimation ( )
>6457	ArgumentList	 
>6458	Callee	stopAnimation
>6459	Identifier	stopAnimation
>6468	FunctionDef	SkeletalSprite 
>6469	ParameterList	 
>6470	ReturnType	void
>6471	CompoundStatement	 
>6472	IfStatement	if ( animLayers [ 0 ] . currentAnimation >= animations . size ( ) )
>6473	ExpressionStatement	 
>6474	AssignmentExpr	animLayers [ 0 ] . currentAnimation = 0
>6475	PrimaryExpression	0
>6476	MemberAccess	animLayers [ 0 ] . currentAnimation
>6477	Identifier	currentAnimation
>6478	ArrayIndexing	animLayers [ 0 ]
>6479	PrimaryExpression	0
>6480	Identifier	animLayers
>6481	Condition	 
>6482	RelationalExpression	animLayers [ 0 ] . currentAnimation >= animations . size ( )
>6483	CallExpression	animations . size ( )
>6484	ArgumentList	 
>6485	Callee	animations . size
>6486	MemberAccess	animations . size
>6487	Identifier	size
>6488	Identifier	animations
>6489	MemberAccess	animLayers [ 0 ] . currentAnimation
>6490	Identifier	currentAnimation
>6491	ArrayIndexing	animLayers [ 0 ]
>6492	PrimaryExpression	0
>6493	Identifier	animLayers
>6494	ExpressionStatement	 
>6495	IncDecOp	animLayers [ 0 ] . currentAnimation ++
>6496	IncDec	++
>6497	MemberAccess	animLayers [ 0 ] . currentAnimation
>6498	Identifier	currentAnimation
>6499	ArrayIndexing	animLayers [ 0 ]
>6500	PrimaryExpression	0
>6501	Identifier	animLayers
>6502	ExpressionStatement	 
>6503	CallExpression	stopAnimation ( )
>6504	ArgumentList	 
>6505	Callee	stopAnimation
>6506	Identifier	stopAnimation
>6515	FunctionDef	SkeletalSprite 
>6516	ParameterList	 
>6517	ReturnType	void
>6518	CompoundStatement	 
>6519	IfStatement	if ( animLayers [ 0 ] . currentAnimation < 0 )
>6520	ExpressionStatement	 
>6521	AssignmentExpr	animLayers [ 0 ] . currentAnimation = animations . size ( ) - 1
>6522	AdditiveExpression	animations . size ( ) - 1
>6523	PrimaryExpression	1
>6524	CallExpression	animations . size ( )
>6525	ArgumentList	 
>6526	Callee	animations . size
>6527	MemberAccess	animations . size
>6528	Identifier	size
>6529	Identifier	animations
>6530	MemberAccess	animLayers [ 0 ] . currentAnimation
>6531	Identifier	currentAnimation
>6532	ArrayIndexing	animLayers [ 0 ]
>6533	PrimaryExpression	0
>6534	Identifier	animLayers
>6535	Condition	 
>6536	RelationalExpression	animLayers [ 0 ] . currentAnimation < 0
>6537	PrimaryExpression	0
>6538	MemberAccess	animLayers [ 0 ] . currentAnimation
>6539	Identifier	currentAnimation
>6540	ArrayIndexing	animLayers [ 0 ]
>6541	PrimaryExpression	0
>6542	Identifier	animLayers
>6543	ExpressionStatement	 
>6544	IncDecOp	animLayers [ 0 ] . currentAnimation --
>6545	IncDec	--
>6546	MemberAccess	animLayers [ 0 ] . currentAnimation
>6547	Identifier	currentAnimation
>6548	ArrayIndexing	animLayers [ 0 ]
>6549	PrimaryExpression	0
>6550	Identifier	animLayers
>6551	ExpressionStatement	 
>6552	CallExpression	stopAnimation ( )
>6553	ArgumentList	 
>6554	Callee	stopAnimation
>6555	Identifier	stopAnimation
>6564	FunctionDef	SkeletalSprite 
>6565	ParameterList	 
>6566	ReturnType	void
>6567	CompoundStatement	 
>6568	ExpressionStatement	 
>6569	CallExpression	bones . clear ( )
>6570	ArgumentList	 
>6571	Callee	bones . clear
>6572	MemberAccess	bones . clear
>6573	Identifier	clear
>6574	Identifier	bones
>6575	ForStatement	for ( Children 
>6576	CompoundStatement	 
>6577	ExpressionStatement	 
>6578	CallExpression	( * it ) -> safeKill ( )
>6579	ArgumentList	 
>6580	Callee	( * it ) -> safeKill
>6581	PtrMemberAccess	( * it ) -> safeKill
>6582	Identifier	safeKill
>6583	UnaryOp	* it
>6584	Identifier	it
>6585	UnaryOperator	*
>6586	UnaryExpression	 
>6587	Identifier	it
>6588	IncDec	++
>6589	Condition	 
>6590	EqualityExpression	it != children . end ( )
>6591	CallExpression	children . end ( )
>6592	ArgumentList	 
>6593	Callee	children . end
>6594	MemberAccess	children . end
>6595	Identifier	end
>6596	Identifier	children
>6597	Identifier	it
>6598	ForInit	 
>6599	IdentifierDeclStatement	Children 
>6600	IdentifierDecl	it = children . begin ( )
>6601	AssignmentExpr	it = children . begin ( )
>6602	CallExpression	children . begin ( )
>6603	ArgumentList	 
>6604	Callee	children . begin
>6605	MemberAccess	children . begin
>6606	Identifier	begin
>6607	Identifier	children
>6608	Identifier	it
>6609	Identifier	it
>6610	IdentifierDeclType	Children 
>6611	ExpressionStatement	 
>6612	CallExpression	bones . clear ( )
>6613	ArgumentList	 
>6614	Callee	bones . clear
>6615	MemberAccess	bones . clear
>6616	Identifier	clear
>6617	Identifier	bones
>6627	FunctionDef	SkeletalSprite 
>6628	ParameterList	const std 
>6629	Parameter	 
>6630	Identifier	anim
>6631	ParameterType	const std 
>6632	ReturnType	Animation *
>6633	CompoundStatement	 
>6634	ReturnStatement	 
>6635	PrimaryExpression	0
>6636	ForStatement	for ( int i = 0 ; i < animations . size ( ) ; i ++ )
>6637	CompoundStatement	 
>6638	IfStatement	if ( animations [ i ] . name == anim )
>6639	ReturnStatement	 
>6640	UnaryOp	& animations [ i ]
>6641	ArrayIndexing	animations [ i ]
>6642	Identifier	i
>6643	Identifier	animations
>6644	UnaryOperator	&
>6645	Condition	 
>6646	EqualityExpression	animations [ i ] . name == anim
>6647	Identifier	anim
>6648	MemberAccess	animations [ i ] . name
>6649	Identifier	name
>6650	ArrayIndexing	animations [ i ]
>6651	Identifier	i
>6652	Identifier	animations
>6653	IncDecOp	 
>6654	IncDec	++
>6655	Identifier	i
>6656	Condition	 
>6657	RelationalExpression	i < animations . size ( )
>6658	CallExpression	animations . size ( )
>6659	ArgumentList	 
>6660	Callee	animations . size
>6661	MemberAccess	animations . size
>6662	Identifier	size
>6663	Identifier	animations
>6664	Identifier	i
>6665	ForInit	 
>6666	IdentifierDeclStatement	int i = 0 ;
>6667	IdentifierDecl	i = 0
>6668	AssignmentExpr	i = 0
>6669	PrimaryExpression	0
>6670	Identifier	i
>6671	Identifier	i
>6672	IdentifierDeclType	int
>6685	FunctionDef	SkeletalSprite 
>6686	ParameterList	const std 
>6687	Parameter	 
>6688	Identifier	fn
>6689	ParameterType	const std 
>6690	ReturnType	void
>6691	CompoundStatement	 
>6692	IfStatement	if ( bonesXml )
>6693	CompoundStatement	 
>6694	WhileStatement	while ( boneXml )
>6695	CompoundStatement	 
>6696	ExpressionStatement	 
>6697	AssignmentExpr	boneXml = boneXml -> NextSiblingElement ( \"Bone\" )
>6698	CallExpression	boneXml -> NextSiblingElement ( \"Bone\" )
>6699	ArgumentList	\"Bone\"
>6700	Argument	\"Bone\"
>6701	PrimaryExpression	\"Bone\"
>6702	Callee	boneXml -> NextSiblingElement
>6703	PtrMemberAccess	boneXml -> NextSiblingElement
>6704	Identifier	NextSiblingElement
>6705	Identifier	boneXml
>6706	Identifier	boneXml
>6707	IfStatement	if ( b )
>6708	ElseStatement	else
>6709	CompoundStatement	 
>6710	ExpressionStatement	 
>6711	CallExpression	debugLog ( os . str ( ) )
>6712	ArgumentList	os . str ( )
>6713	Argument	os . str ( )
>6714	CallExpression	os . str ( )
>6715	ArgumentList	 
>6716	Callee	os . str
>6717	MemberAccess	os . str
>6718	Identifier	str
>6719	Identifier	os
>6720	Callee	debugLog
>6721	Identifier	debugLog
>6722	ExpressionStatement	 
>6723	ShiftExpression	os << \"SkinLoad
>6724	ShiftExpression	\"SkinLoad
>6725	ShiftExpression	idx << \"]\"
>6726	PrimaryExpression	\"]\"
>6727	Identifier	idx
>6728	PrimaryExpression	\"SkinLoad
>6729	Identifier	os
>6730	IdentifierDeclStatement	 
>6731	IdentifierDecl	os
>6732	Identifier	os
>6733	IdentifierDeclType	std 
>6734	CompoundStatement	 
>6735	IfStatement	if ( boneXml -> Attribute ( \"fv\" ) )
>6736	CompoundStatement	 
>6737	IfStatement	if ( fv )
>6738	ExpressionStatement	 
>6739	CallExpression	b -> flipVertical ( )
>6740	ArgumentList	 
>6741	Callee	b -> flipVertical
>6742	PtrMemberAccess	b -> flipVertical
>6743	Identifier	flipVertical
>6744	Identifier	b
>6745	Condition	 
>6746	Identifier	fv
>6747	IdentifierDeclStatement	 
>6748	IdentifierDecl	fv = atoi ( boneXml -> Attribute ( \"fv\" ) )
>6749	AssignmentExpr	fv = atoi ( boneXml -> Attribute ( \"fv\" ) )
>6750	CallExpression	atoi ( boneXml -> Attribute ( \"fv\" ) )
>6751	ArgumentList	boneXml -> Attribute ( \"fv\" )
>6752	Argument	boneXml -> Attribute ( \"fv\" )
>6753	CallExpression	boneXml -> Attribute ( \"fv\" )
>6754	ArgumentList	\"fv\"
>6755	Argument	\"fv\"
>6756	PrimaryExpression	\"fv\"
>6757	Callee	boneXml -> Attribute
>6758	PtrMemberAccess	boneXml -> Attribute
>6759	Identifier	Attribute
>6760	Identifier	boneXml
>6761	Callee	atoi
>6762	Identifier	atoi
>6763	Identifier	fv
>6764	Identifier	fv
>6765	IdentifierDeclType	int
>6766	Condition	 
>6767	CallExpression	boneXml -> Attribute ( \"fv\" )
>6768	ArgumentList	\"fv\"
>6769	Argument	\"fv\"
>6770	PrimaryExpression	\"fv\"
>6771	Callee	boneXml -> Attribute
>6772	PtrMemberAccess	boneXml -> Attribute
>6773	Identifier	Attribute
>6774	Identifier	boneXml
>6775	IfStatement	if ( boneXml -> Attribute ( \"fh\" ) )
>6776	CompoundStatement	 
>6777	IfStatement	if ( fh )
>6778	ExpressionStatement	 
>6779	CallExpression	b -> flipHorizontal ( )
>6780	ArgumentList	 
>6781	Callee	b -> flipHorizontal
>6782	PtrMemberAccess	b -> flipHorizontal
>6783	Identifier	flipHorizontal
>6784	Identifier	b
>6785	Condition	 
>6786	Identifier	fh
>6787	IdentifierDeclStatement	 
>6788	IdentifierDecl	fh = atoi ( boneXml -> Attribute ( \"fh\" ) )
>6789	AssignmentExpr	fh = atoi ( boneXml -> Attribute ( \"fh\" ) )
>6790	CallExpression	atoi ( boneXml -> Attribute ( \"fh\" ) )
>6791	ArgumentList	boneXml -> Attribute ( \"fh\" )
>6792	Argument	boneXml -> Attribute ( \"fh\" )
>6793	CallExpression	boneXml -> Attribute ( \"fh\" )
>6794	ArgumentList	\"fh\"
>6795	Argument	\"fh\"
>6796	PrimaryExpression	\"fh\"
>6797	Callee	boneXml -> Attribute
>6798	PtrMemberAccess	boneXml -> Attribute
>6799	Identifier	Attribute
>6800	Identifier	boneXml
>6801	Callee	atoi
>6802	Identifier	atoi
>6803	Identifier	fh
>6804	Identifier	fh
>6805	IdentifierDeclType	int
>6806	Condition	 
>6807	CallExpression	boneXml -> Attribute ( \"fh\" )
>6808	ArgumentList	\"fh\"
>6809	Argument	\"fh\"
>6810	PrimaryExpression	\"fh\"
>6811	Callee	boneXml -> Attribute
>6812	PtrMemberAccess	boneXml -> Attribute
>6813	Identifier	Attribute
>6814	Identifier	boneXml
>6815	IfStatement	if ( gfx . empty ( ) )
>6816	CompoundStatement	 
>6817	ExpressionStatement	 
>6818	AssignmentExpr	b -> renderQuad = false
>6819	Identifier	false
>6820	PtrMemberAccess	b -> renderQuad
>6821	Identifier	renderQuad
>6822	Identifier	b
>6823	Condition	 
>6824	CallExpression	gfx . empty ( )
>6825	ArgumentList	 
>6826	Callee	gfx . empty
>6827	MemberAccess	gfx . empty
>6828	Identifier	empty
>6829	Identifier	gfx
>6830	IfStatement	if ( boneXml -> Attribute ( \"gfx\" ) )
>6831	CompoundStatement	 
>6832	IfStatement	if ( ! gfx . empty ( ) )
>6833	CompoundStatement	 
>6834	ExpressionStatement	 
>6835	AssignmentExpr	b -> renderQuad = true
>6836	Identifier	true
>6837	PtrMemberAccess	b -> renderQuad
>6838	Identifier	renderQuad
>6839	Identifier	b
>6840	ExpressionStatement	 
>6841	CallExpression	b -> setTexture ( b -> gfx )
>6842	ArgumentList	b -> gfx
>6843	Argument	b -> gfx
>6844	PtrMemberAccess	b -> gfx
>6845	Identifier	gfx
>6846	Identifier	b
>6847	Callee	b -> setTexture
>6848	PtrMemberAccess	b -> setTexture
>6849	Identifier	setTexture
>6850	Identifier	b
>6851	ExpressionStatement	 
>6852	AssignmentExpr	b -> gfx = gfx
>6853	Identifier	gfx
>6854	PtrMemberAccess	b -> gfx
>6855	Identifier	gfx
>6856	Identifier	b
>6857	Condition	 
>6858	UnaryOp	! gfx . empty ( )
>6859	CallExpression	gfx . empty ( )
>6860	ArgumentList	 
>6861	Callee	gfx . empty
>6862	MemberAccess	gfx . empty
>6863	Identifier	empty
>6864	Identifier	gfx
>6865	UnaryOperator	!
>6866	ExpressionStatement	 
>6867	AssignmentExpr	gfx = boneXml -> Attribute ( \"gfx\" )
>6868	CallExpression	boneXml -> Attribute ( \"gfx\" )
>6869	ArgumentList	\"gfx\"
>6870	Argument	\"gfx\"
>6871	PrimaryExpression	\"gfx\"
>6872	Callee	boneXml -> Attribute
>6873	PtrMemberAccess	boneXml -> Attribute
>6874	Identifier	Attribute
>6875	Identifier	boneXml
>6876	Identifier	gfx
>6877	Condition	 
>6878	CallExpression	boneXml -> Attribute ( \"gfx\" )
>6879	ArgumentList	\"gfx\"
>6880	Argument	\"gfx\"
>6881	PrimaryExpression	\"gfx\"
>6882	Callee	boneXml -> Attribute
>6883	PtrMemberAccess	boneXml -> Attribute
>6884	Identifier	Attribute
>6885	Identifier	boneXml
>6886	IdentifierDeclStatement	 
>6887	IdentifierDecl	gfx
>6888	Identifier	gfx
>6889	IdentifierDeclType	std 
>6890	IfStatement	if ( boneXml -> Attribute ( \"rq\" ) )
>6891	CompoundStatement	 
>6892	ExpressionStatement	 
>6893	AssignmentExpr	b -> renderQuad = rq
>6894	Identifier	rq
>6895	PtrMemberAccess	b -> renderQuad
>6896	Identifier	renderQuad
>6897	Identifier	b
>6898	IdentifierDeclStatement	 
>6899	IdentifierDecl	rq = atoi ( boneXml -> Attribute ( \"rq\" ) )
>6900	AssignmentExpr	rq = atoi ( boneXml -> Attribute ( \"rq\" ) )
>6901	CallExpression	atoi ( boneXml -> Attribute ( \"rq\" ) )
>6902	ArgumentList	boneXml -> Attribute ( \"rq\" )
>6903	Argument	boneXml -> Attribute ( \"rq\" )
>6904	CallExpression	boneXml -> Attribute ( \"rq\" )
>6905	ArgumentList	\"rq\"
>6906	Argument	\"rq\"
>6907	PrimaryExpression	\"rq\"
>6908	Callee	boneXml -> Attribute
>6909	PtrMemberAccess	boneXml -> Attribute
>6910	Identifier	Attribute
>6911	Identifier	boneXml
>6912	Callee	atoi
>6913	Identifier	atoi
>6914	Identifier	rq
>6915	Identifier	rq
>6916	IdentifierDeclType	int
>6917	Condition	 
>6918	CallExpression	boneXml -> Attribute ( \"rq\" )
>6919	ArgumentList	\"rq\"
>6920	Argument	\"rq\"
>6921	PrimaryExpression	\"rq\"
>6922	Callee	boneXml -> Attribute
>6923	PtrMemberAccess	boneXml -> Attribute
>6924	Identifier	Attribute
>6925	Identifier	boneXml
>6926	Condition	 
>6927	Identifier	b
>6928	IdentifierDeclStatement	 
>6929	IdentifierDecl	* b = getBoneByIdx ( idx )
>6930	AssignmentExpr	* b = getBoneByIdx ( idx )
>6931	CallExpression	getBoneByIdx ( idx )
>6932	ArgumentList	idx
>6933	Argument	idx
>6934	Identifier	idx
>6935	Callee	getBoneByIdx
>6936	Identifier	getBoneByIdx
>6937	Identifier	b
>6938	Identifier	b
>6939	IdentifierDeclType	Bone *
>6940	IdentifierDeclStatement	 
>6941	IdentifierDecl	idx = atoi ( boneXml -> Attribute ( \"idx\" ) )
>6942	AssignmentExpr	idx = atoi ( boneXml -> Attribute ( \"idx\" ) )
>6943	CallExpression	atoi ( boneXml -> Attribute ( \"idx\" ) )
>6944	ArgumentList	boneXml -> Attribute ( \"idx\" )
>6945	Argument	boneXml -> Attribute ( \"idx\" )
>6946	CallExpression	boneXml -> Attribute ( \"idx\" )
>6947	ArgumentList	\"idx\"
>6948	Argument	\"idx\"
>6949	PrimaryExpression	\"idx\"
>6950	Callee	boneXml -> Attribute
>6951	PtrMemberAccess	boneXml -> Attribute
>6952	Identifier	Attribute
>6953	Identifier	boneXml
>6954	Callee	atoi
>6955	Identifier	atoi
>6956	Identifier	idx
>6957	Identifier	idx
>6958	IdentifierDeclType	int
>6959	Condition	 
>6960	Identifier	boneXml
>6961	IdentifierDeclStatement	 
>6962	IdentifierDecl	* boneXml = bonesXml -> FirstChildElement ( \"Bone\" )
>6963	AssignmentExpr	* boneXml = bonesXml -> FirstChildElement ( \"Bone\" )
>6964	CallExpression	bonesXml -> FirstChildElement ( \"Bone\" )
>6965	ArgumentList	\"Bone\"
>6966	Argument	\"Bone\"
>6967	PrimaryExpression	\"Bone\"
>6968	Callee	bonesXml -> FirstChildElement
>6969	PtrMemberAccess	bonesXml -> FirstChildElement
>6970	Identifier	FirstChildElement
>6971	Identifier	bonesXml
>6972	Identifier	boneXml
>6973	Identifier	boneXml
>6974	IdentifierDeclType	XMLElement *
>6975	Condition	 
>6976	Identifier	bonesXml
>6977	IdentifierDeclStatement	 
>6978	IdentifierDecl	* bonesXml = d -> FirstChildElement ( \"Bones\" )
>6979	AssignmentExpr	* bonesXml = d -> FirstChildElement ( \"Bones\" )
>6980	CallExpression	d -> FirstChildElement ( \"Bones\" )
>6981	ArgumentList	\"Bones\"
>6982	Argument	\"Bones\"
>6983	PrimaryExpression	\"Bones\"
>6984	Callee	d -> FirstChildElement
>6985	PtrMemberAccess	d -> FirstChildElement
>6986	Identifier	FirstChildElement
>6987	Identifier	d
>6988	Identifier	bonesXml
>6989	Identifier	bonesXml
>6990	IdentifierDeclType	XMLElement *
>6991	IfStatement	if ( ! d )
>6992	CompoundStatement	 
>6993	ReturnStatement	 
>6994	ExpressionStatement	 
>6995	CallExpression	errorLog ( \"Could not load skin[\" + file + \"] - Malformed XML.\" )
>6996	ArgumentList	\"Could not load skin[\" + file + \"] - Malformed XML.\"
>6997	Argument	\"Could not load skin[\" + file + \"] - Malformed XML.\"
>6998	AdditiveExpression	\"Could not load skin[\" + file + \"] - Malformed XML.\"
>6999	AdditiveExpression	file + \"] - Malformed XML.\"
>7000	PrimaryExpression	\"] - Malformed XML.\"
>7001	Identifier	file
>7002	PrimaryExpression	\"Could not load skin[\"
>7003	Callee	errorLog
>7004	Identifier	errorLog
>7005	Condition	 
>7006	UnaryOp	! d
>7007	Identifier	d
>7008	UnaryOperator	!
>7009	IdentifierDeclStatement	 
>7010	IdentifierDecl	* d = _retrieveSkeletalXML ( file , false )
>7011	AssignmentExpr	* d = _retrieveSkeletalXML ( file , false )
>7012	CallExpression	_retrieveSkeletalXML ( file , false )
>7013	ArgumentList	file
>7014	Argument	false
>7015	Identifier	false
>7016	Argument	file
>7017	Identifier	file
>7018	Callee	_retrieveSkeletalXML
>7019	Identifier	_retrieveSkeletalXML
>7020	Identifier	d
>7021	Identifier	d
>7022	IdentifierDeclType	XMLDocument *
>7023	IfStatement	if ( ! exists ( file ) )
>7024	CompoundStatement	 
>7025	ReturnStatement	 
>7026	ExpressionStatement	 
>7027	CallExpression	errorLog ( \"Could not load skin[\" + file + \"] - File not found.\" )
>7028	ArgumentList	\"Could not load skin[\" + file + \"] - File not found.\"
>7029	Argument	\"Could not load skin[\" + file + \"] - File not found.\"
>7030	AdditiveExpression	\"Could not load skin[\" + file + \"] - File not found.\"
>7031	AdditiveExpression	file + \"] - File not found.\"
>7032	PrimaryExpression	\"] - File not found.\"
>7033	Identifier	file
>7034	PrimaryExpression	\"Could not load skin[\"
>7035	Callee	errorLog
>7036	Identifier	errorLog
>7037	Condition	 
>7038	UnaryOp	! exists ( file )
>7039	CallExpression	exists ( file )
>7040	ArgumentList	file
>7041	Argument	file
>7042	Identifier	file
>7043	Callee	exists
>7044	Identifier	exists
>7045	UnaryOperator	!
>7046	ExpressionStatement	 
>7047	AssignmentExpr	file = core -> adjustFilenameCase ( file )
>7048	CallExpression	core -> adjustFilenameCase ( file )
>7049	ArgumentList	file
>7050	Argument	file
>7051	Identifier	file
>7052	Callee	core -> adjustFilenameCase
>7053	PtrMemberAccess	core -> adjustFilenameCase
>7054	Identifier	adjustFilenameCase
>7055	Identifier	core
>7056	Identifier	file
>7057	IfStatement	if ( file . empty ( ) || ! exists ( file , false ) )
>7058	CompoundStatement	 
>7059	ExpressionStatement	 
>7060	AssignmentExpr	file = animationPath + skinPath + fn + \".xml\"
>7061	AdditiveExpression	animationPath + skinPath + fn + \".xml\"
>7062	AdditiveExpression	skinPath + fn + \".xml\"
>7063	AdditiveExpression	fn + \".xml\"
>7064	PrimaryExpression	\".xml\"
>7065	Identifier	fn
>7066	Identifier	skinPath
>7067	Identifier	animationPath
>7068	Identifier	file
>7069	Condition	 
>7070	OrExpression	file . empty ( ) || ! exists ( file , false )
>7071	UnaryOp	! exists ( file , false )
>7072	CallExpression	exists ( file , false )
>7073	ArgumentList	file
>7074	Argument	false
>7075	Identifier	false
>7076	Argument	file
>7077	Identifier	file
>7078	Callee	exists
>7079	Identifier	exists
>7080	UnaryOperator	!
>7081	CallExpression	file . empty ( )
>7082	ArgumentList	 
>7083	Callee	file . empty
>7084	MemberAccess	file . empty
>7085	Identifier	empty
>7086	Identifier	file
>7087	IfStatement	if ( ! secondaryAnimationPath . empty ( ) )
>7088	CompoundStatement	 
>7089	ExpressionStatement	 
>7090	AssignmentExpr	file = secondaryAnimationPath + skinPath + fn + \".xml\"
>7091	AdditiveExpression	secondaryAnimationPath + skinPath + fn + \".xml\"
>7092	AdditiveExpression	skinPath + fn + \".xml\"
>7093	AdditiveExpression	fn + \".xml\"
>7094	PrimaryExpression	\".xml\"
>7095	Identifier	fn
>7096	Identifier	skinPath
>7097	Identifier	secondaryAnimationPath
>7098	Identifier	file
>7099	Condition	 
>7100	UnaryOp	! secondaryAnimationPath . empty ( )
>7101	CallExpression	secondaryAnimationPath . empty ( )
>7102	ArgumentList	 
>7103	Callee	secondaryAnimationPath . empty
>7104	MemberAccess	secondaryAnimationPath . empty
>7105	Identifier	empty
>7106	Identifier	secondaryAnimationPath
>7107	UnaryOperator	!
>7108	IdentifierDeclStatement	 
>7109	IdentifierDecl	file
>7110	Identifier	file
>7111	IdentifierDeclType	std 
>7153	FunctionDef	SkeletalSprite 
>7154	ParameterList	int layer
>7155	Parameter	 
>7156	Identifier	layer
>7157	ParameterType	int
>7158	ReturnType	void
>7159	CompoundStatement	 
>7160	ExpressionStatement	 
>7161	CallExpression	animLayers [ layer ] . stopAnimation ( )
>7162	ArgumentList	 
>7163	Callee	animLayers [ layer ] . stopAnimation
>7164	MemberAccess	animLayers [ layer ] . stopAnimation
>7165	Identifier	stopAnimation
>7166	ArrayIndexing	animLayers [ layer ]
>7167	Identifier	layer
>7168	Identifier	animLayers
>7176	FunctionDef	SkeletalSprite 
>7177	ParameterList	 
>7178	ReturnType	void
>7179	CompoundStatement	 
>7180	ForStatement	for ( int i = 0 ; i < animLayers . size ( ) ; i ++ )
>7181	CompoundStatement	 
>7182	ExpressionStatement	 
>7183	CallExpression	animLayers [ i ] . stopAnimation ( )
>7184	ArgumentList	 
>7185	Callee	animLayers [ i ] . stopAnimation
>7186	MemberAccess	animLayers [ i ] . stopAnimation
>7187	Identifier	stopAnimation
>7188	ArrayIndexing	animLayers [ i ]
>7189	Identifier	i
>7190	Identifier	animLayers
>7191	IncDecOp	 
>7192	IncDec	++
>7193	Identifier	i
>7194	Condition	 
>7195	RelationalExpression	i < animLayers . size ( )
>7196	CallExpression	animLayers . size ( )
>7197	ArgumentList	 
>7198	Callee	animLayers . size
>7199	MemberAccess	animLayers . size
>7200	Identifier	size
>7201	Identifier	animLayers
>7202	Identifier	i
>7203	ForInit	 
>7204	IdentifierDeclStatement	int i = 0 ;
>7205	IdentifierDecl	i = 0
>7206	AssignmentExpr	i = 0
>7207	PrimaryExpression	0
>7208	Identifier	i
>7209	Identifier	i
>7210	IdentifierDeclType	int
>7219	FunctionDef	SkeletalSprite 
>7220	ParameterList	int loop , int layer
>7221	Parameter	 
>7222	Identifier	layer
>7223	ParameterType	int
>7224	Parameter	 
>7225	Identifier	loop
>7226	ParameterType	int
>7227	ReturnType	void
>7228	CompoundStatement	 
>7229	ExpressionStatement	 
>7230	CallExpression	animLayers [ layer ] . playCurrentAnimation ( loop )
>7231	ArgumentList	loop
>7232	Argument	loop
>7233	Identifier	loop
>7234	Callee	animLayers [ layer ] . playCurrentAnimation
>7235	MemberAccess	animLayers [ layer ] . playCurrentAnimation
>7236	Identifier	playCurrentAnimation
>7237	ArrayIndexing	animLayers [ layer ]
>7238	Identifier	layer
>7239	Identifier	animLayers
>7248	FunctionDef	SkeletalSprite 
>7249	ParameterList	const std 
>7250	Parameter	 
>7251	Identifier	fn
>7252	ParameterType	const std 
>7253	ReturnType	void
>7254	CompoundStatement	 
>7255	IfStatement	if ( animations )
>7256	CompoundStatement	 
>7257	WhileStatement	while ( animation )
>7258	CompoundStatement	 
>7259	ExpressionStatement	 
>7260	CallExpression	this -> animations . push_back ( newAnimation )
>7261	ArgumentList	newAnimation
>7262	Argument	newAnimation
>7263	Identifier	newAnimation
>7264	Callee	this -> animations . push_back
>7265	MemberAccess	this -> animations . push_back
>7266	Identifier	push_back
>7267	PtrMemberAccess	this -> animations
>7268	Identifier	animations
>7269	Identifier	this
>7270	ExpressionStatement	 
>7271	AssignmentExpr	animation = animation -> NextSiblingElement ( \"Animation\" )
>7272	CallExpression	animation -> NextSiblingElement ( \"Animation\" )
>7273	ArgumentList	\"Animation\"
>7274	Argument	\"Animation\"
>7275	PrimaryExpression	\"Animation\"
>7276	Callee	animation -> NextSiblingElement
>7277	PtrMemberAccess	animation -> NextSiblingElement
>7278	Identifier	NextSiblingElement
>7279	Identifier	animation
>7280	Identifier	animation
>7281	WhileStatement	while ( key )
>7282	CompoundStatement	 
>7283	ExpressionStatement	 
>7284	AssignmentExpr	key = key -> NextSiblingElement ( \"Key\" )
>7285	CallExpression	key -> NextSiblingElement ( \"Key\" )
>7286	ArgumentList	\"Key\"
>7287	Argument	\"Key\"
>7288	PrimaryExpression	\"Key\"
>7289	Callee	key -> NextSiblingElement
>7290	PtrMemberAccess	key -> NextSiblingElement
>7291	Identifier	NextSiblingElement
>7292	Identifier	key
>7293	Identifier	key
>7294	ExpressionStatement	 
>7295	CallExpression	newAnimation . keyframes . push_back ( newSkeletalKeyframe )
>7296	ArgumentList	newSkeletalKeyframe
>7297	Argument	newSkeletalKeyframe
>7298	Identifier	newSkeletalKeyframe
>7299	Callee	newAnimation . keyframes . push_back
>7300	MemberAccess	newAnimation . keyframes . push_back
>7301	Identifier	push_back
>7302	MemberAccess	newAnimation . keyframes
>7303	Identifier	keyframes
>7304	Identifier	newAnimation
>7305	ForStatement	for ( int i = 0 ; i < this -> bones . size ( ) ; i ++ )
>7306	CompoundStatement	 
>7307	IfStatement	if ( newSkeletalKeyframe . getBoneKeyframe ( this -> bones [ i ] -> boneIdx ) )
>7308	ElseStatement	else
>7309	CompoundStatement	 
>7310	ExpressionStatement	 
>7311	CallExpression	newSkeletalKeyframe . keyframes . push_back ( b )
>7312	ArgumentList	b
>7313	Argument	b
>7314	Identifier	b
>7315	Callee	newSkeletalKeyframe . keyframes . push_back
>7316	MemberAccess	newSkeletalKeyframe . keyframes . push_back
>7317	Identifier	push_back
>7318	MemberAccess	newSkeletalKeyframe . keyframes
>7319	Identifier	keyframes
>7320	Identifier	newSkeletalKeyframe
>7321	ExpressionStatement	 
>7322	AssignmentExpr	b . idx = this -> bones [ i ] -> boneIdx
>7323	PtrMemberAccess	this -> bones [ i ] -> boneIdx
>7324	Identifier	boneIdx
>7325	ArrayIndexing	this -> bones [ i ]
>7326	Identifier	i
>7327	PtrMemberAccess	this -> bones
>7328	Identifier	bones
>7329	Identifier	this
>7330	MemberAccess	b . idx
>7331	Identifier	idx
>7332	Identifier	b
>7333	IdentifierDeclStatement	 
>7334	IdentifierDecl	b
>7335	Identifier	b
>7336	IdentifierDeclType	BoneKeyframe
>7337	CompoundStatement	 
>7338	Condition	 
>7339	CallExpression	newSkeletalKeyframe . getBoneKeyframe ( this -> bones [ i ] -> boneIdx )
>7340	ArgumentList	this -> bones [ i ] -> boneIdx
>7341	Argument	this -> bones [ i ] -> boneIdx
>7342	PtrMemberAccess	this -> bones [ i ] -> boneIdx
>7343	Identifier	boneIdx
>7344	ArrayIndexing	this -> bones [ i ]
>7345	Identifier	i
>7346	PtrMemberAccess	this -> bones
>7347	Identifier	bones
>7348	Identifier	this
>7349	Callee	newSkeletalKeyframe . getBoneKeyframe
>7350	MemberAccess	newSkeletalKeyframe . getBoneKeyframe
>7351	Identifier	getBoneKeyframe
>7352	Identifier	newSkeletalKeyframe
>7353	IncDecOp	 
>7354	IncDec	++
>7355	Identifier	i
>7356	Condition	 
>7357	RelationalExpression	i < this -> bones . size ( )
>7358	CallExpression	this -> bones . size ( )
>7359	ArgumentList	 
>7360	Callee	this -> bones . size
>7361	MemberAccess	this -> bones . size
>7362	Identifier	size
>7363	PtrMemberAccess	this -> bones
>7364	Identifier	bones
>7365	Identifier	this
>7366	Identifier	i
>7367	ForInit	 
>7368	IdentifierDeclStatement	int i = 0 ;
>7369	IdentifierDecl	i = 0
>7370	AssignmentExpr	i = 0
>7371	PrimaryExpression	0
>7372	Identifier	i
>7373	Identifier	i
>7374	IdentifierDeclType	int
>7375	IfStatement	if ( key -> Attribute ( \"cmd\" ) )
>7376	CompoundStatement	 
>7377	WhileStatement	while ( is >> bidx )
>7378	CompoundStatement	 
>7379	IfStatement	if ( b )
>7380	CompoundStatement	 
>7381	ExpressionStatement	 
>7382	CallExpression	newSkeletalKeyframe . commands . push_back ( bcmd )
>7383	ArgumentList	bcmd
>7384	Argument	bcmd
>7385	Identifier	bcmd
>7386	Callee	newSkeletalKeyframe . commands . push_back
>7387	MemberAccess	newSkeletalKeyframe . commands . push_back
>7388	Identifier	push_back
>7389	MemberAccess	newSkeletalKeyframe . commands
>7390	Identifier	commands
>7391	Identifier	newSkeletalKeyframe
>7392	ExpressionStatement	 
>7393	CallExpression	bcmd . parse ( b , is )
>7394	ArgumentList	b
>7395	Argument	is
>7396	Identifier	is
>7397	Argument	b
>7398	Identifier	b
>7399	Callee	bcmd . parse
>7400	MemberAccess	bcmd . parse
>7401	Identifier	parse
>7402	Identifier	bcmd
>7403	IdentifierDeclStatement	 
>7404	IdentifierDecl	bcmd
>7405	Identifier	bcmd
>7406	IdentifierDeclType	BoneCommand
>7407	Condition	 
>7408	Identifier	b
>7409	IdentifierDeclStatement	 
>7410	IdentifierDecl	* b = this -> getBoneByIdx ( bidx )
>7411	AssignmentExpr	* b = this -> getBoneByIdx ( bidx )
>7412	CallExpression	this -> getBoneByIdx ( bidx )
>7413	ArgumentList	bidx
>7414	Argument	bidx
>7415	Identifier	bidx
>7416	Callee	this -> getBoneByIdx
>7417	PtrMemberAccess	this -> getBoneByIdx
>7418	Identifier	getBoneByIdx
>7419	Identifier	this
>7420	Identifier	b
>7421	Identifier	b
>7422	IdentifierDeclType	Bone *
>7423	Condition	 
>7424	ShiftExpression	is >> bidx
>7425	Identifier	bidx
>7426	Identifier	is
>7427	IdentifierDeclStatement	 
>7428	IdentifierDecl	bidx
>7429	Identifier	bidx
>7430	IdentifierDeclType	int
>7431	IdentifierDeclStatement	 
>7432	IdentifierDecl	is ( newSkeletalKeyframe . cmd )
>7433	MemberAccess	newSkeletalKeyframe . cmd
>7434	Identifier	cmd
>7435	Identifier	newSkeletalKeyframe
>7436	Identifier	is
>7437	IdentifierDeclType	SimpleIStringStream
>7438	ExpressionStatement	 
>7439	AssignmentExpr	newSkeletalKeyframe . cmd = key -> Attribute ( \"cmd\" )
>7440	CallExpression	key -> Attribute ( \"cmd\" )
>7441	ArgumentList	\"cmd\"
>7442	Argument	\"cmd\"
>7443	PrimaryExpression	\"cmd\"
>7444	Callee	key -> Attribute
>7445	PtrMemberAccess	key -> Attribute
>7446	Identifier	Attribute
>7447	Identifier	key
>7448	MemberAccess	newSkeletalKeyframe . cmd
>7449	Identifier	cmd
>7450	Identifier	newSkeletalKeyframe
>7451	Condition	 
>7452	CallExpression	key -> Attribute ( \"cmd\" )
>7453	ArgumentList	\"cmd\"
>7454	Argument	\"cmd\"
>7455	PrimaryExpression	\"cmd\"
>7456	Callee	key -> Attribute
>7457	PtrMemberAccess	key -> Attribute
>7458	Identifier	Attribute
>7459	Identifier	key
>7460	IfStatement	if ( key -> Attribute ( \"d\" ) )
>7461	CompoundStatement	 
>7462	WhileStatement	while ( is >> idx )
>7463	CompoundStatement	 
>7464	ExpressionStatement	 
>7465	CallExpression	newSkeletalKeyframe . keyframes . push_back ( b )
>7466	ArgumentList	b
>7467	Argument	b
>7468	Identifier	b
>7469	Callee	newSkeletalKeyframe . keyframes . push_back
>7470	MemberAccess	newSkeletalKeyframe . keyframes . push_back
>7471	Identifier	push_back
>7472	MemberAccess	newSkeletalKeyframe . keyframes
>7473	Identifier	keyframes
>7474	Identifier	newSkeletalKeyframe
>7475	ExpressionStatement	 
>7476	AssignmentExpr	b . rot = rot
>7477	Identifier	rot
>7478	MemberAccess	b . rot
>7479	Identifier	rot
>7480	Identifier	b
>7481	ExpressionStatement	 
>7482	AssignmentExpr	b . y = y
>7483	Identifier	y
>7484	MemberAccess	b . y
>7485	Identifier	y
>7486	Identifier	b
>7487	ExpressionStatement	 
>7488	AssignmentExpr	b . x = x
>7489	Identifier	x
>7490	MemberAccess	b . x
>7491	Identifier	x
>7492	Identifier	b
>7493	ExpressionStatement	 
>7494	AssignmentExpr	b . idx = idx
>7495	Identifier	idx
>7496	MemberAccess	b . idx
>7497	Identifier	idx
>7498	Identifier	b
>7499	IdentifierDeclStatement	 
>7500	IdentifierDecl	b
>7501	Identifier	b
>7502	IdentifierDeclType	BoneKeyframe
>7503	ExpressionStatement	 
>7504	ShiftExpression	is >> x >> y >> rot
>7505	ShiftExpression	x >> y >> rot
>7506	ShiftExpression	y >> rot
>7507	Identifier	rot
>7508	Identifier	y
>7509	Identifier	x
>7510	Identifier	is
>7511	Condition	 
>7512	ShiftExpression	is >> idx
>7513	Identifier	idx
>7514	Identifier	is
>7515	IfStatement	if ( key -> Attribute ( \"sound\" ) )
>7516	CompoundStatement	 
>7517	ExpressionStatement	 
>7518	AssignmentExpr	newSkeletalKeyframe . sound = key -> Attribute ( \"sound\" )
>7519	CallExpression	key -> Attribute ( \"sound\" )
>7520	ArgumentList	\"sound\"
>7521	Argument	\"sound\"
>7522	PrimaryExpression	\"sound\"
>7523	Callee	key -> Attribute
>7524	PtrMemberAccess	key -> Attribute
>7525	Identifier	Attribute
>7526	Identifier	key
>7527	MemberAccess	newSkeletalKeyframe . sound
>7528	Identifier	sound
>7529	Identifier	newSkeletalKeyframe
>7530	Condition	 
>7531	CallExpression	key -> Attribute ( \"sound\" )
>7532	ArgumentList	\"sound\"
>7533	Argument	\"sound\"
>7534	PrimaryExpression	\"sound\"
>7535	Callee	key -> Attribute
>7536	PtrMemberAccess	key -> Attribute
>7537	Identifier	Attribute
>7538	Identifier	key
>7539	ExpressionStatement	 
>7540	AssignmentExpr	newSkeletalKeyframe . t = time
>7541	Identifier	time
>7542	MemberAccess	newSkeletalKeyframe . t
>7543	Identifier	t
>7544	Identifier	newSkeletalKeyframe
>7545	IdentifierDeclStatement	 
>7546	IdentifierDecl	rot
>7547	Identifier	rot
>7548	IdentifierDeclType	int
>7549	IdentifierDecl	y
>7550	Identifier	y
>7551	IdentifierDeclType	int
>7552	IdentifierDecl	x
>7553	Identifier	x
>7554	IdentifierDeclType	int
>7555	IdentifierDecl	idx
>7556	Identifier	idx
>7557	IdentifierDeclType	int
>7558	ExpressionStatement	 
>7559	ShiftExpression	is >> time
>7560	Identifier	time
>7561	Identifier	is
>7562	IdentifierDeclStatement	 
>7563	IdentifierDecl	is ( key -> Attribute ( \"d\" ) )
>7564	CallExpression	key -> Attribute ( \"d\" )
>7565	ArgumentList	\"d\"
>7566	Argument	\"d\"
>7567	PrimaryExpression	\"d\"
>7568	Callee	key -> Attribute
>7569	PtrMemberAccess	key -> Attribute
>7570	Identifier	Attribute
>7571	Identifier	key
>7572	Identifier	is
>7573	IdentifierDeclType	SimpleIStringStream
>7574	IdentifierDeclStatement	 
>7575	IdentifierDecl	time
>7576	Identifier	time
>7577	IdentifierDeclType	float
>7578	Condition	 
>7579	CallExpression	key -> Attribute ( \"d\" )
>7580	ArgumentList	\"d\"
>7581	Argument	\"d\"
>7582	PrimaryExpression	\"d\"
>7583	Callee	key -> Attribute
>7584	PtrMemberAccess	key -> Attribute
>7585	Identifier	Attribute
>7586	Identifier	key
>7587	IfStatement	if ( key -> Attribute ( \"e\" ) )
>7588	CompoundStatement	 
>7589	WhileStatement	while ( is >> idx )
>7590	CompoundStatement	 
>7591	ExpressionStatement	 
>7592	CallExpression	newSkeletalKeyframe . keyframes . push_back ( b )
>7593	ArgumentList	b
>7594	Argument	b
>7595	Identifier	b
>7596	Callee	newSkeletalKeyframe . keyframes . push_back
>7597	MemberAccess	newSkeletalKeyframe . keyframes . push_back
>7598	Identifier	push_back
>7599	MemberAccess	newSkeletalKeyframe . keyframes
>7600	Identifier	keyframes
>7601	Identifier	newSkeletalKeyframe
>7602	IfStatement	if ( key -> Attribute ( \"sz\" ) )
>7603	CompoundStatement	 
>7604	WhileStatement	while ( is2 >> midx )
>7605	CompoundStatement	 
>7606	IfStatement	if ( midx == idx )
>7607	CompoundStatement	 
>7608	BreakStatement	 
>7609	ExpressionStatement	 
>7610	AssignmentExpr	b . sy = bsy
>7611	Identifier	bsy
>7612	MemberAccess	b . sy
>7613	Identifier	sy
>7614	Identifier	b
>7615	ExpressionStatement	 
>7616	AssignmentExpr	b . sx = bsx
>7617	Identifier	bsx
>7618	MemberAccess	b . sx
>7619	Identifier	sx
>7620	Identifier	b
>7621	ExpressionStatement	 
>7622	AssignmentExpr	b . doScale = true
>7623	Identifier	true
>7624	MemberAccess	b . doScale
>7625	Identifier	doScale
>7626	Identifier	b
>7627	Condition	 
>7628	EqualityExpression	midx == idx
>7629	Identifier	idx
>7630	Identifier	midx
>7631	ExpressionStatement	 
>7632	ShiftExpression	is2 >> bsx >> bsy
>7633	ShiftExpression	bsx >> bsy
>7634	Identifier	bsy
>7635	Identifier	bsx
>7636	Identifier	is2
>7637	Condition	 
>7638	ShiftExpression	is2 >> midx
>7639	Identifier	midx
>7640	Identifier	is2
>7641	IdentifierDeclStatement	 
>7642	IdentifierDecl	bsy
>7643	Identifier	bsy
>7644	IdentifierDeclType	float
>7645	IdentifierDecl	bsx
>7646	Identifier	bsx
>7647	IdentifierDeclType	float
>7648	IdentifierDeclStatement	 
>7649	IdentifierDecl	midx
>7650	Identifier	midx
>7651	IdentifierDeclType	int
>7652	IdentifierDeclStatement	 
>7653	IdentifierDecl	is2 ( key -> Attribute ( \"sz\" ) )
>7654	CallExpression	key -> Attribute ( \"sz\" )
>7655	ArgumentList	\"sz\"
>7656	Argument	\"sz\"
>7657	PrimaryExpression	\"sz\"
>7658	Callee	key -> Attribute
>7659	PtrMemberAccess	key -> Attribute
>7660	Identifier	Attribute
>7661	Identifier	key
>7662	Identifier	is2
>7663	IdentifierDeclType	SimpleIStringStream
>7664	Condition	 
>7665	CallExpression	key -> Attribute ( \"sz\" )
>7666	ArgumentList	\"sz\"
>7667	Argument	\"sz\"
>7668	PrimaryExpression	\"sz\"
>7669	Callee	key -> Attribute
>7670	PtrMemberAccess	key -> Attribute
>7671	Identifier	Attribute
>7672	Identifier	key
>7673	IfStatement	if ( strip > 0 )
>7674	CompoundStatement	 
>7675	ForStatement	for ( int i = 0 ; i < b . strip . size ( ) ; i ++ )
>7676	CompoundStatement	 
>7677	ExpressionStatement	 
>7678	ShiftExpression	is >> b . strip [ i ] . x >> b . strip [ i ] . y
>7679	ShiftExpression	b . strip [ i ] . x >> b . strip [ i ] . y
>7680	MemberAccess	b . strip [ i ] . y
>7681	Identifier	y
>7682	ArrayIndexing	b . strip [ i ]
>7683	Identifier	i
>7684	MemberAccess	b . strip
>7685	Identifier	strip
>7686	Identifier	b
>7687	MemberAccess	b . strip [ i ] . x
>7688	Identifier	x
>7689	ArrayIndexing	b . strip [ i ]
>7690	Identifier	i
>7691	MemberAccess	b . strip
>7692	Identifier	strip
>7693	Identifier	b
>7694	Identifier	is
>7695	IncDecOp	 
>7696	IncDec	++
>7697	Identifier	i
>7698	Condition	 
>7699	RelationalExpression	i < b . strip . size ( )
>7700	CallExpression	b . strip . size ( )
>7701	ArgumentList	 
>7702	Callee	b . strip . size
>7703	MemberAccess	b . strip . size
>7704	Identifier	size
>7705	MemberAccess	b . strip
>7706	Identifier	strip
>7707	Identifier	b
>7708	Identifier	i
>7709	ForInit	 
>7710	IdentifierDeclStatement	int i = 0 ;
>7711	IdentifierDecl	i = 0
>7712	AssignmentExpr	i = 0
>7713	PrimaryExpression	0
>7714	Identifier	i
>7715	Identifier	i
>7716	IdentifierDeclType	int
>7717	ExpressionStatement	 
>7718	CallExpression	b . strip . resize ( strip )
>7719	ArgumentList	strip
>7720	Argument	strip
>7721	Identifier	strip
>7722	Callee	b . strip . resize
>7723	MemberAccess	b . strip . resize
>7724	Identifier	resize
>7725	MemberAccess	b . strip
>7726	Identifier	strip
>7727	Identifier	b
>7728	Condition	 
>7729	RelationalExpression	strip > 0
>7730	PrimaryExpression	0
>7731	Identifier	strip
>7732	ExpressionStatement	 
>7733	AssignmentExpr	b . rot = rot
>7734	Identifier	rot
>7735	MemberAccess	b . rot
>7736	Identifier	rot
>7737	Identifier	b
>7738	ExpressionStatement	 
>7739	AssignmentExpr	b . y = y
>7740	Identifier	y
>7741	MemberAccess	b . y
>7742	Identifier	y
>7743	Identifier	b
>7744	ExpressionStatement	 
>7745	AssignmentExpr	b . x = x
>7746	Identifier	x
>7747	MemberAccess	b . x
>7748	Identifier	x
>7749	Identifier	b
>7750	ExpressionStatement	 
>7751	AssignmentExpr	b . idx = idx
>7752	Identifier	idx
>7753	MemberAccess	b . idx
>7754	Identifier	idx
>7755	Identifier	b
>7756	ExpressionStatement	 
>7757	ShiftExpression	is >> x >> y >> rot >> strip
>7758	ShiftExpression	x >> y >> rot >> strip
>7759	ShiftExpression	y >> rot >> strip
>7760	ShiftExpression	rot >> strip
>7761	Identifier	strip
>7762	Identifier	rot
>7763	Identifier	y
>7764	Identifier	x
>7765	Identifier	is
>7766	IdentifierDeclStatement	 
>7767	IdentifierDecl	b
>7768	Identifier	b
>7769	IdentifierDeclType	BoneKeyframe
>7770	Condition	 
>7771	ShiftExpression	is >> idx
>7772	Identifier	idx
>7773	Identifier	is
>7774	IfStatement	if ( key -> Attribute ( \"lerp\" ) )
>7775	CompoundStatement	 
>7776	ExpressionStatement	 
>7777	AssignmentExpr	newSkeletalKeyframe . lerpType = atoi ( key -> Attribute ( \"lerp\" ) )
>7778	CallExpression	atoi ( key -> Attribute ( \"lerp\" ) )
>7779	ArgumentList	key -> Attribute ( \"lerp\" )
>7780	Argument	key -> Attribute ( \"lerp\" )
>7781	CallExpression	key -> Attribute ( \"lerp\" )
>7782	ArgumentList	\"lerp\"
>7783	Argument	\"lerp\"
>7784	PrimaryExpression	\"lerp\"
>7785	Callee	key -> Attribute
>7786	PtrMemberAccess	key -> Attribute
>7787	Identifier	Attribute
>7788	Identifier	key
>7789	Callee	atoi
>7790	Identifier	atoi
>7791	MemberAccess	newSkeletalKeyframe . lerpType
>7792	Identifier	lerpType
>7793	Identifier	newSkeletalKeyframe
>7794	Condition	 
>7795	CallExpression	key -> Attribute ( \"lerp\" )
>7796	ArgumentList	\"lerp\"
>7797	Argument	\"lerp\"
>7798	PrimaryExpression	\"lerp\"
>7799	Callee	key -> Attribute
>7800	PtrMemberAccess	key -> Attribute
>7801	Identifier	Attribute
>7802	Identifier	key
>7803	IfStatement	if ( key -> Attribute ( \"sound\" ) )
>7804	CompoundStatement	 
>7805	ExpressionStatement	 
>7806	AssignmentExpr	newSkeletalKeyframe . sound = key -> Attribute ( \"sound\" )
>7807	CallExpression	key -> Attribute ( \"sound\" )
>7808	ArgumentList	\"sound\"
>7809	Argument	\"sound\"
>7810	PrimaryExpression	\"sound\"
>7811	Callee	key -> Attribute
>7812	PtrMemberAccess	key -> Attribute
>7813	Identifier	Attribute
>7814	Identifier	key
>7815	MemberAccess	newSkeletalKeyframe . sound
>7816	Identifier	sound
>7817	Identifier	newSkeletalKeyframe
>7818	Condition	 
>7819	CallExpression	key -> Attribute ( \"sound\" )
>7820	ArgumentList	\"sound\"
>7821	Argument	\"sound\"
>7822	PrimaryExpression	\"sound\"
>7823	Callee	key -> Attribute
>7824	PtrMemberAccess	key -> Attribute
>7825	Identifier	Attribute
>7826	Identifier	key
>7827	ExpressionStatement	 
>7828	AssignmentExpr	newSkeletalKeyframe . t = time
>7829	Identifier	time
>7830	MemberAccess	newSkeletalKeyframe . t
>7831	Identifier	t
>7832	Identifier	newSkeletalKeyframe
>7833	IdentifierDeclStatement	 
>7834	IdentifierDecl	strip
>7835	Identifier	strip
>7836	IdentifierDeclType	int
>7837	IdentifierDecl	rot
>7838	Identifier	rot
>7839	IdentifierDeclType	int
>7840	IdentifierDecl	y
>7841	Identifier	y
>7842	IdentifierDeclType	int
>7843	IdentifierDecl	x
>7844	Identifier	x
>7845	IdentifierDeclType	int
>7846	IdentifierDecl	idx
>7847	Identifier	idx
>7848	IdentifierDeclType	int
>7849	ExpressionStatement	 
>7850	ShiftExpression	is >> time
>7851	Identifier	time
>7852	Identifier	is
>7853	IdentifierDeclStatement	 
>7854	IdentifierDecl	is ( key -> Attribute ( \"e\" ) )
>7855	CallExpression	key -> Attribute ( \"e\" )
>7856	ArgumentList	\"e\"
>7857	Argument	\"e\"
>7858	PrimaryExpression	\"e\"
>7859	Callee	key -> Attribute
>7860	PtrMemberAccess	key -> Attribute
>7861	Identifier	Attribute
>7862	Identifier	key
>7863	Identifier	is
>7864	IdentifierDeclType	SimpleIStringStream
>7865	IdentifierDeclStatement	 
>7866	IdentifierDecl	time
>7867	Identifier	time
>7868	IdentifierDeclType	float
>7869	Condition	 
>7870	CallExpression	key -> Attribute ( \"e\" )
>7871	ArgumentList	\"e\"
>7872	Argument	\"e\"
>7873	PrimaryExpression	\"e\"
>7874	Callee	key -> Attribute
>7875	PtrMemberAccess	key -> Attribute
>7876	Identifier	Attribute
>7877	Identifier	key
>7878	IdentifierDeclStatement	 
>7879	IdentifierDecl	newSkeletalKeyframe
>7880	Identifier	newSkeletalKeyframe
>7881	IdentifierDeclType	SkeletalKeyframe
>7882	Condition	 
>7883	Identifier	key
>7884	IdentifierDeclStatement	 
>7885	IdentifierDecl	* key = animation -> FirstChildElement ( \"Key\" )
>7886	AssignmentExpr	* key = animation -> FirstChildElement ( \"Key\" )
>7887	CallExpression	animation -> FirstChildElement ( \"Key\" )
>7888	ArgumentList	\"Key\"
>7889	Argument	\"Key\"
>7890	PrimaryExpression	\"Key\"
>7891	Callee	animation -> FirstChildElement
>7892	PtrMemberAccess	animation -> FirstChildElement
>7893	Identifier	FirstChildElement
>7894	Identifier	animation
>7895	Identifier	key
>7896	Identifier	key
>7897	IdentifierDeclType	XMLElement *
>7898	ExpressionStatement	 
>7899	CallExpression	stringToLower ( newAnimation . name )
>7900	ArgumentList	newAnimation . name
>7901	Argument	newAnimation . name
>7902	MemberAccess	newAnimation . name
>7903	Identifier	name
>7904	Identifier	newAnimation
>7905	Callee	stringToLower
>7906	Identifier	stringToLower
>7907	ExpressionStatement	 
>7908	AssignmentExpr	newAnimation . name = animation -> Attribute ( \"name\" )
>7909	CallExpression	animation -> Attribute ( \"name\" )
>7910	ArgumentList	\"name\"
>7911	Argument	\"name\"
>7912	PrimaryExpression	\"name\"
>7913	Callee	animation -> Attribute
>7914	PtrMemberAccess	animation -> Attribute
>7915	Identifier	Attribute
>7916	Identifier	animation
>7917	MemberAccess	newAnimation . name
>7918	Identifier	name
>7919	Identifier	newAnimation
>7920	IdentifierDeclStatement	 
>7921	IdentifierDecl	newAnimation
>7922	Identifier	newAnimation
>7923	IdentifierDeclType	Animation
>7924	Condition	 
>7925	Identifier	animation
>7926	IdentifierDeclStatement	 
>7927	IdentifierDecl	* animation = animations -> FirstChildElement ( \"Animation\" )
>7928	AssignmentExpr	* animation = animations -> FirstChildElement ( \"Animation\" )
>7929	CallExpression	animations -> FirstChildElement ( \"Animation\" )
>7930	ArgumentList	\"Animation\"
>7931	Argument	\"Animation\"
>7932	PrimaryExpression	\"Animation\"
>7933	Callee	animations -> FirstChildElement
>7934	PtrMemberAccess	animations -> FirstChildElement
>7935	Identifier	FirstChildElement
>7936	Identifier	animations
>7937	Identifier	animation
>7938	Identifier	animation
>7939	IdentifierDeclType	XMLElement *
>7940	Condition	 
>7941	Identifier	animations
>7942	IdentifierDeclStatement	 
>7943	IdentifierDecl	* animations = xml -> FirstChildElement ( \"Animations\" )
>7944	AssignmentExpr	* animations = xml -> FirstChildElement ( \"Animations\" )
>7945	CallExpression	xml -> FirstChildElement ( \"Animations\" )
>7946	ArgumentList	\"Animations\"
>7947	Argument	\"Animations\"
>7948	PrimaryExpression	\"Animations\"
>7949	Callee	xml -> FirstChildElement
>7950	PtrMemberAccess	xml -> FirstChildElement
>7951	Identifier	FirstChildElement
>7952	Identifier	xml
>7953	Identifier	animations
>7954	Identifier	animations
>7955	IdentifierDeclType	XMLElement *
>7956	ExpressionStatement	 
>7957	CallExpression	animations . clear ( )
>7958	ArgumentList	 
>7959	Callee	animations . clear
>7960	MemberAccess	animations . clear
>7961	Identifier	clear
>7962	Identifier	animations
>7963	IfStatement	if ( animationLayers )
>7964	CompoundStatement	 
>7965	WhileStatement	while ( animationLayer )
>7966	CompoundStatement	 
>7967	ExpressionStatement	 
>7968	AssignmentExpr	animationLayer = animationLayer -> NextSiblingElement ( \"AnimationLayer\" )
>7969	CallExpression	animationLayer -> NextSiblingElement ( \"AnimationLayer\" )
>7970	ArgumentList	\"AnimationLayer\"
>7971	Argument	\"AnimationLayer\"
>7972	PrimaryExpression	\"AnimationLayer\"
>7973	Callee	animationLayer -> NextSiblingElement
>7974	PtrMemberAccess	animationLayer -> NextSiblingElement
>7975	Identifier	NextSiblingElement
>7976	Identifier	animationLayer
>7977	Identifier	animationLayer
>7978	ExpressionStatement	 
>7979	CallExpression	animLayers . push_back ( newAnimationLayer )
>7980	ArgumentList	newAnimationLayer
>7981	Argument	newAnimationLayer
>7982	Identifier	newAnimationLayer
>7983	Callee	animLayers . push_back
>7984	MemberAccess	animLayers . push_back
>7985	Identifier	push_back
>7986	Identifier	animLayers
>7987	ExpressionStatement	 
>7988	CallExpression	newAnimationLayer . setSkeletalSprite ( this )
>7989	ArgumentList	this
>7990	Argument	this
>7991	Identifier	this
>7992	Callee	newAnimationLayer . setSkeletalSprite
>7993	MemberAccess	newAnimationLayer . setSkeletalSprite
>7994	Identifier	setSkeletalSprite
>7995	Identifier	newAnimationLayer
>7996	IfStatement	if ( animationLayer -> Attribute ( \"name\" ) )
>7997	CompoundStatement	 
>7998	ExpressionStatement	 
>7999	AssignmentExpr	newAnimationLayer . name = animationLayer -> Attribute ( \"name\" )
>8000	CallExpression	animationLayer -> Attribute ( \"name\" )
>8001	ArgumentList	\"name\"
>8002	Argument	\"name\"
>8003	PrimaryExpression	\"name\"
>8004	Callee	animationLayer -> Attribute
>8005	PtrMemberAccess	animationLayer -> Attribute
>8006	Identifier	Attribute
>8007	Identifier	animationLayer
>8008	MemberAccess	newAnimationLayer . name
>8009	Identifier	name
>8010	Identifier	newAnimationLayer
>8011	Condition	 
>8012	CallExpression	animationLayer -> Attribute ( \"name\" )
>8013	ArgumentList	\"name\"
>8014	Argument	\"name\"
>8015	PrimaryExpression	\"name\"
>8016	Callee	animationLayer -> Attribute
>8017	PtrMemberAccess	animationLayer -> Attribute
>8018	Identifier	Attribute
>8019	Identifier	animationLayer
>8020	IfStatement	if ( animationLayer -> Attribute ( \"include\" ) )
>8021	CompoundStatement	 
>8022	WhileStatement	while ( is >> t )
>8023	CompoundStatement	 
>8024	ExpressionStatement	 
>8025	CallExpression	newAnimationLayer . includeBones . push_back ( t )
>8026	ArgumentList	t
>8027	Argument	t
>8028	Identifier	t
>8029	Callee	newAnimationLayer . includeBones . push_back
>8030	MemberAccess	newAnimationLayer . includeBones . push_back
>8031	Identifier	push_back
>8032	MemberAccess	newAnimationLayer . includeBones
>8033	Identifier	includeBones
>8034	Identifier	newAnimationLayer
>8035	Condition	 
>8036	ShiftExpression	is >> t
>8037	Identifier	t
>8038	Identifier	is
>8039	IdentifierDeclStatement	 
>8040	IdentifierDecl	t
>8041	Identifier	t
>8042	IdentifierDeclType	int
>8043	IdentifierDeclStatement	 
>8044	IdentifierDecl	is ( animationLayer -> Attribute ( \"include\" ) )
>8045	CallExpression	animationLayer -> Attribute ( \"include\" )
>8046	ArgumentList	\"include\"
>8047	Argument	\"include\"
>8048	PrimaryExpression	\"include\"
>8049	Callee	animationLayer -> Attribute
>8050	PtrMemberAccess	animationLayer -> Attribute
>8051	Identifier	Attribute
>8052	Identifier	animationLayer
>8053	Identifier	is
>8054	IdentifierDeclType	SimpleIStringStream
>8055	Condition	 
>8056	CallExpression	animationLayer -> Attribute ( \"include\" )
>8057	ArgumentList	\"include\"
>8058	Argument	\"include\"
>8059	PrimaryExpression	\"include\"
>8060	Callee	animationLayer -> Attribute
>8061	PtrMemberAccess	animationLayer -> Attribute
>8062	Identifier	Attribute
>8063	Identifier	animationLayer
>8064	IfStatement	if ( animationLayer -> Attribute ( \"ignore\" ) )
>8065	CompoundStatement	 
>8066	WhileStatement	while ( is >> t )
>8067	CompoundStatement	 
>8068	ExpressionStatement	 
>8069	CallExpression	newAnimationLayer . ignoreBones . push_back ( t )
>8070	ArgumentList	t
>8071	Argument	t
>8072	Identifier	t
>8073	Callee	newAnimationLayer . ignoreBones . push_back
>8074	MemberAccess	newAnimationLayer . ignoreBones . push_back
>8075	Identifier	push_back
>8076	MemberAccess	newAnimationLayer . ignoreBones
>8077	Identifier	ignoreBones
>8078	Identifier	newAnimationLayer
>8079	Condition	 
>8080	ShiftExpression	is >> t
>8081	Identifier	t
>8082	Identifier	is
>8083	IdentifierDeclStatement	 
>8084	IdentifierDecl	t
>8085	Identifier	t
>8086	IdentifierDeclType	int
>8087	IdentifierDeclStatement	 
>8088	IdentifierDecl	is ( animationLayer -> Attribute ( \"ignore\" ) )
>8089	CallExpression	animationLayer -> Attribute ( \"ignore\" )
>8090	ArgumentList	\"ignore\"
>8091	Argument	\"ignore\"
>8092	PrimaryExpression	\"ignore\"
>8093	Callee	animationLayer -> Attribute
>8094	PtrMemberAccess	animationLayer -> Attribute
>8095	Identifier	Attribute
>8096	Identifier	animationLayer
>8097	Identifier	is
>8098	IdentifierDeclType	SimpleIStringStream
>8099	Condition	 
>8100	CallExpression	animationLayer -> Attribute ( \"ignore\" )
>8101	ArgumentList	\"ignore\"
>8102	Argument	\"ignore\"
>8103	PrimaryExpression	\"ignore\"
>8104	Callee	animationLayer -> Attribute
>8105	PtrMemberAccess	animationLayer -> Attribute
>8106	Identifier	Attribute
>8107	Identifier	animationLayer
>8108	IdentifierDeclStatement	 
>8109	IdentifierDecl	newAnimationLayer
>8110	Identifier	newAnimationLayer
>8111	IdentifierDeclType	AnimationLayer
>8112	Condition	 
>8113	Identifier	animationLayer
>8114	IdentifierDeclStatement	 
>8115	IdentifierDecl	* animationLayer = animationLayers -> FirstChildElement ( \"AnimationLayer\" )
>8116	AssignmentExpr	* animationLayer = animationLayers -> FirstChildElement ( \"AnimationLayer\" )
>8117	CallExpression	animationLayers -> FirstChildElement ( \"AnimationLayer\" )
>8118	ArgumentList	\"AnimationLayer\"
>8119	Argument	\"AnimationLayer\"
>8120	PrimaryExpression	\"AnimationLayer\"
>8121	Callee	animationLayers -> FirstChildElement
>8122	PtrMemberAccess	animationLayers -> FirstChildElement
>8123	Identifier	FirstChildElement
>8124	Identifier	animationLayers
>8125	Identifier	animationLayer
>8126	Identifier	animationLayer
>8127	IdentifierDeclType	XMLElement *
>8128	Condition	 
>8129	Identifier	animationLayers
>8130	IdentifierDeclStatement	 
>8131	IdentifierDecl	* animationLayers = xml -> FirstChildElement ( \"AnimationLayers\" )
>8132	AssignmentExpr	* animationLayers = xml -> FirstChildElement ( \"AnimationLayers\" )
>8133	CallExpression	xml -> FirstChildElement ( \"AnimationLayers\" )
>8134	ArgumentList	\"AnimationLayers\"
>8135	Argument	\"AnimationLayers\"
>8136	PrimaryExpression	\"AnimationLayers\"
>8137	Callee	xml -> FirstChildElement
>8138	PtrMemberAccess	xml -> FirstChildElement
>8139	Identifier	FirstChildElement
>8140	Identifier	xml
>8141	Identifier	animationLayers
>8142	Identifier	animationLayers
>8143	IdentifierDeclType	XMLElement *
>8144	ExpressionStatement	 
>8145	CallExpression	animLayers . clear ( )
>8146	ArgumentList	 
>8147	Callee	animLayers . clear
>8148	MemberAccess	animLayers . clear
>8149	Identifier	clear
>8150	Identifier	animLayers
>8151	IfStatement	if ( bones )
>8152	CompoundStatement	 
>8153	ForStatement	for ( int i = 0 ; i < this -> bones . size ( ) ; i ++ )
>8154	CompoundStatement	 
>8155	IfStatement	if ( b -> pidx != - 1 )
>8156	ElseStatement	else
>8157	ExpressionStatement	 
>8158	CallExpression	addChild ( b , PM_POINTER )
>8159	ArgumentList	b
>8160	Argument	PM_POINTER
>8161	Identifier	PM_POINTER
>8162	Argument	b
>8163	Identifier	b
>8164	Callee	addChild
>8165	Identifier	addChild
>8166	CompoundStatement	 
>8167	IfStatement	if ( ! pb )
>8168	ElseStatement	else
>8169	CompoundStatement	 
>8170	ExpressionStatement	 
>8171	CallExpression	pb -> addChild ( b , PM_POINTER )
>8172	ArgumentList	b
>8173	Argument	PM_POINTER
>8174	Identifier	PM_POINTER
>8175	Argument	b
>8176	Identifier	b
>8177	Callee	pb -> addChild
>8178	PtrMemberAccess	pb -> addChild
>8179	Identifier	addChild
>8180	Identifier	pb
>8181	CompoundStatement	 
>8182	ExpressionStatement	 
>8183	CallExpression	debugLog ( os . str ( ) )
>8184	ArgumentList	os . str ( )
>8185	Argument	os . str ( )
>8186	CallExpression	os . str ( )
>8187	ArgumentList	 
>8188	Callee	os . str
>8189	MemberAccess	os . str
>8190	Identifier	str
>8191	Identifier	os
>8192	Callee	debugLog
>8193	Identifier	debugLog
>8194	ExpressionStatement	 
>8195	ShiftExpression	os << \"Parent bone not found, index
>8196	ShiftExpression	\"Parent bone not found, index
>8197	ShiftExpression	b -> pidx << \" from bone idx
>8198	ShiftExpression	\" from bone idx
>8199	CallExpression	b -> getIdx ( )
>8200	ArgumentList	 
>8201	Callee	b -> getIdx
>8202	PtrMemberAccess	b -> getIdx
>8203	Identifier	getIdx
>8204	Identifier	b
>8205	PrimaryExpression	\" from bone idx
>8206	PtrMemberAccess	b -> pidx
>8207	Identifier	pidx
>8208	Identifier	b
>8209	PrimaryExpression	\"Parent bone not found, index
>8210	Identifier	os
>8211	IdentifierDeclStatement	 
>8212	IdentifierDecl	os
>8213	Identifier	os
>8214	IdentifierDeclType	std 
>8215	Condition	 
>8216	UnaryOp	! pb
>8217	Identifier	pb
>8218	UnaryOperator	!
>8219	IdentifierDeclStatement	 
>8220	IdentifierDecl	* pb = getBoneByIdx ( b -> pidx )
>8221	AssignmentExpr	* pb = getBoneByIdx ( b -> pidx )
>8222	CallExpression	getBoneByIdx ( b -> pidx )
>8223	ArgumentList	b -> pidx
>8224	Argument	b -> pidx
>8225	PtrMemberAccess	b -> pidx
>8226	Identifier	pidx
>8227	Identifier	b
>8228	Callee	getBoneByIdx
>8229	Identifier	getBoneByIdx
>8230	Identifier	pb
>8231	Identifier	pb
>8232	IdentifierDeclType	Bone *
>8233	Condition	 
>8234	EqualityExpression	b -> pidx != - 1
>8235	UnaryOp	- 1
>8236	PrimaryExpression	1
>8237	UnaryOperator	-
>8238	PtrMemberAccess	b -> pidx
>8239	Identifier	pidx
>8240	Identifier	b
>8241	IdentifierDeclStatement	 
>8242	IdentifierDecl	* b = this -> bones [ i ]
>8243	AssignmentExpr	* b = this -> bones [ i ]
>8244	ArrayIndexing	this -> bones [ i ]
>8245	Identifier	i
>8246	PtrMemberAccess	this -> bones
>8247	Identifier	bones
>8248	Identifier	this
>8249	Identifier	b
>8250	Identifier	b
>8251	IdentifierDeclType	Bone *
>8252	IncDecOp	 
>8253	IncDec	++
>8254	Identifier	i
>8255	Condition	 
>8256	RelationalExpression	i < this -> bones . size ( )
>8257	CallExpression	this -> bones . size ( )
>8258	ArgumentList	 
>8259	Callee	this -> bones . size
>8260	MemberAccess	this -> bones . size
>8261	Identifier	size
>8262	PtrMemberAccess	this -> bones
>8263	Identifier	bones
>8264	Identifier	this
>8265	Identifier	i
>8266	ForInit	 
>8267	IdentifierDeclStatement	int i = 0 ;
>8268	IdentifierDecl	i = 0
>8269	AssignmentExpr	i = 0
>8270	PrimaryExpression	0
>8271	Identifier	i
>8272	Identifier	i
>8273	IdentifierDeclType	int
>8274	WhileStatement	while ( bone )
>8275	CompoundStatement	 
>8276	ExpressionStatement	 
>8277	AssignmentExpr	bone = bone -> NextSiblingElement ( \"Bone\" )
>8278	CallExpression	bone -> NextSiblingElement ( \"Bone\" )
>8279	ArgumentList	\"Bone\"
>8280	Argument	\"Bone\"
>8281	PrimaryExpression	\"Bone\"
>8282	Callee	bone -> NextSiblingElement
>8283	PtrMemberAccess	bone -> NextSiblingElement
>8284	Identifier	NextSiblingElement
>8285	Identifier	bone
>8286	Identifier	bone
>8287	IfStatement	if ( bone -> Attribute ( \"color\" ) )
>8288	CompoundStatement	 
>8289	ExpressionStatement	 
>8290	ShiftExpression	in >> newb -> color . x >> newb -> color . y >> newb -> color . z
>8291	ShiftExpression	newb -> color . x >> newb -> color . y >> newb -> color . z
>8292	ShiftExpression	newb -> color . y >> newb -> color . z
>8293	MemberAccess	newb -> color . z
>8294	Identifier	z
>8295	PtrMemberAccess	newb -> color
>8296	Identifier	color
>8297	Identifier	newb
>8298	MemberAccess	newb -> color . y
>8299	Identifier	y
>8300	PtrMemberAccess	newb -> color
>8301	Identifier	color
>8302	Identifier	newb
>8303	MemberAccess	newb -> color . x
>8304	Identifier	x
>8305	PtrMemberAccess	newb -> color
>8306	Identifier	color
>8307	Identifier	newb
>8308	Identifier	in
>8309	IdentifierDeclStatement	 
>8310	IdentifierDecl	in ( bone -> Attribute ( \"color\" ) )
>8311	CallExpression	bone -> Attribute ( \"color\" )
>8312	ArgumentList	\"color\"
>8313	Argument	\"color\"
>8314	PrimaryExpression	\"color\"
>8315	Callee	bone -> Attribute
>8316	PtrMemberAccess	bone -> Attribute
>8317	Identifier	Attribute
>8318	Identifier	bone
>8319	Identifier	in
>8320	IdentifierDeclType	SimpleIStringStream
>8321	Condition	 
>8322	CallExpression	bone -> Attribute ( \"color\" )
>8323	ArgumentList	\"color\"
>8324	Argument	\"color\"
>8325	PrimaryExpression	\"color\"
>8326	Callee	bone -> Attribute
>8327	PtrMemberAccess	bone -> Attribute
>8328	Identifier	Attribute
>8329	Identifier	bone
>8330	IfStatement	if ( bone -> Attribute ( \"segs\" ) )
>8331	CompoundStatement	 
>8332	ExpressionStatement	 
>8333	CallExpression	newb -> setSegs ( x , y , dgox , dgoy , dgmx , dgmy , dgtm , dgo )
>8334	ArgumentList	x
>8335	Argument	dgo
>8336	Identifier	dgo
>8337	Argument	dgtm
>8338	Identifier	dgtm
>8339	Argument	dgmy
>8340	Identifier	dgmy
>8341	Argument	dgmx
>8342	Identifier	dgmx
>8343	Argument	dgoy
>8344	Identifier	dgoy
>8345	Argument	dgox
>8346	Identifier	dgox
>8347	Argument	y
>8348	Identifier	y
>8349	Argument	x
>8350	Identifier	x
>8351	Callee	newb -> setSegs
>8352	PtrMemberAccess	newb -> setSegs
>8353	Identifier	setSegs
>8354	Identifier	newb
>8355	ExpressionStatement	 
>8356	ShiftExpression	is >> x >> y >> dgox >> dgoy >> dgmx >> dgmy >> dgtm >> dgo
>8357	ShiftExpression	x >> y >> dgox >> dgoy >> dgmx >> dgmy >> dgtm >> dgo
>8358	ShiftExpression	y >> dgox >> dgoy >> dgmx >> dgmy >> dgtm >> dgo
>8359	ShiftExpression	dgox >> dgoy >> dgmx >> dgmy >> dgtm >> dgo
>8360	ShiftExpression	dgoy >> dgmx >> dgmy >> dgtm >> dgo
>8361	ShiftExpression	dgmx >> dgmy >> dgtm >> dgo
>8362	ShiftExpression	dgmy >> dgtm >> dgo
>8363	ShiftExpression	dgtm >> dgo
>8364	Identifier	dgo
>8365	Identifier	dgtm
>8366	Identifier	dgmy
>8367	Identifier	dgmx
>8368	Identifier	dgoy
>8369	Identifier	dgox
>8370	Identifier	y
>8371	Identifier	x
>8372	Identifier	is
>8373	IdentifierDeclStatement	 
>8374	IdentifierDecl	is ( bone -> Attribute ( \"segs\" ) )
>8375	CallExpression	bone -> Attribute ( \"segs\" )
>8376	ArgumentList	\"segs\"
>8377	Argument	\"segs\"
>8378	PrimaryExpression	\"segs\"
>8379	Callee	bone -> Attribute
>8380	PtrMemberAccess	bone -> Attribute
>8381	Identifier	Attribute
>8382	Identifier	bone
>8383	Identifier	is
>8384	IdentifierDeclType	SimpleIStringStream
>8385	IdentifierDeclStatement	 
>8386	IdentifierDecl	dgo
>8387	Identifier	dgo
>8388	IdentifierDeclType	bool
>8389	IdentifierDeclStatement	 
>8390	IdentifierDecl	dgtm
>8391	Identifier	dgtm
>8392	IdentifierDeclType	float
>8393	IdentifierDecl	dgmy
>8394	Identifier	dgmy
>8395	IdentifierDeclType	float
>8396	IdentifierDecl	dgmx
>8397	Identifier	dgmx
>8398	IdentifierDeclType	float
>8399	IdentifierDecl	dgoy
>8400	Identifier	dgoy
>8401	IdentifierDeclType	float
>8402	IdentifierDecl	dgox
>8403	Identifier	dgox
>8404	IdentifierDeclType	float
>8405	IdentifierDeclStatement	 
>8406	IdentifierDecl	y
>8407	Identifier	y
>8408	IdentifierDeclType	int
>8409	IdentifierDecl	x
>8410	Identifier	x
>8411	IdentifierDeclType	int
>8412	Condition	 
>8413	CallExpression	bone -> Attribute ( \"segs\" )
>8414	ArgumentList	\"segs\"
>8415	Argument	\"segs\"
>8416	PrimaryExpression	\"segs\"
>8417	Callee	bone -> Attribute
>8418	PtrMemberAccess	bone -> Attribute
>8419	Identifier	Attribute
>8420	Identifier	bone
>8421	IfStatement	if ( bone -> Attribute ( \"alphaMod\" ) )
>8422	CompoundStatement	 
>8423	ExpressionStatement	 
>8424	AssignmentExpr	newb -> alphaMod = a
>8425	Identifier	a
>8426	PtrMemberAccess	newb -> alphaMod
>8427	Identifier	alphaMod
>8428	Identifier	newb
>8429	ExpressionStatement	 
>8430	ShiftExpression	is >> a
>8431	Identifier	a
>8432	Identifier	is
>8433	IdentifierDeclStatement	 
>8434	IdentifierDecl	is ( bone -> Attribute ( \"alphaMod\" ) )
>8435	CallExpression	bone -> Attribute ( \"alphaMod\" )
>8436	ArgumentList	\"alphaMod\"
>8437	Argument	\"alphaMod\"
>8438	PrimaryExpression	\"alphaMod\"
>8439	Callee	bone -> Attribute
>8440	PtrMemberAccess	bone -> Attribute
>8441	Identifier	Attribute
>8442	Identifier	bone
>8443	Identifier	is
>8444	IdentifierDeclType	SimpleIStringStream
>8445	IdentifierDeclStatement	 
>8446	IdentifierDecl	a = 1.0
>8447	AssignmentExpr	a = 1.0
>8448	PrimaryExpression	1.0
>8449	Identifier	a
>8450	Identifier	a
>8451	IdentifierDeclType	float
>8452	Condition	 
>8453	CallExpression	bone -> Attribute ( \"alphaMod\" )
>8454	ArgumentList	\"alphaMod\"
>8455	Argument	\"alphaMod\"
>8456	PrimaryExpression	\"alphaMod\"
>8457	Callee	bone -> Attribute
>8458	PtrMemberAccess	bone -> Attribute
>8459	Identifier	Attribute
>8460	Identifier	bone
>8461	IfStatement	if ( bone -> Attribute ( \"alpha\" ) )
>8462	CompoundStatement	 
>8463	ExpressionStatement	 
>8464	AssignmentExpr	newb -> alpha = a
>8465	Identifier	a
>8466	PtrMemberAccess	newb -> alpha
>8467	Identifier	alpha
>8468	Identifier	newb
>8469	ExpressionStatement	 
>8470	ShiftExpression	is >> a
>8471	Identifier	a
>8472	Identifier	is
>8473	IdentifierDeclStatement	 
>8474	IdentifierDecl	is ( bone -> Attribute ( \"alpha\" ) )
>8475	CallExpression	bone -> Attribute ( \"alpha\" )
>8476	ArgumentList	\"alpha\"
>8477	Argument	\"alpha\"
>8478	PrimaryExpression	\"alpha\"
>8479	Callee	bone -> Attribute
>8480	PtrMemberAccess	bone -> Attribute
>8481	Identifier	Attribute
>8482	Identifier	bone
>8483	Identifier	is
>8484	IdentifierDeclType	SimpleIStringStream
>8485	IdentifierDeclStatement	 
>8486	IdentifierDecl	a = 1.0
>8487	AssignmentExpr	a = 1.0
>8488	PrimaryExpression	1.0
>8489	Identifier	a
>8490	Identifier	a
>8491	IdentifierDeclType	float
>8492	Condition	 
>8493	CallExpression	bone -> Attribute ( \"alpha\" )
>8494	ArgumentList	\"alpha\"
>8495	Argument	\"alpha\"
>8496	PrimaryExpression	\"alpha\"
>8497	Callee	bone -> Attribute
>8498	PtrMemberAccess	bone -> Attribute
>8499	Identifier	Attribute
>8500	Identifier	bone
>8501	IfStatement	if ( bone -> Attribute ( \"blend\" ) )
>8502	CompoundStatement	 
>8503	ExpressionStatement	 
>8504	AssignmentExpr	newb -> blendType = blendType = BLEND_ADD
>8505	AssignmentExpr	blendType = BLEND_ADD
>8506	Identifier	BLEND_ADD
>8507	Identifier	blendType
>8508	PtrMemberAccess	newb -> blendType
>8509	Identifier	blendType
>8510	Identifier	newb
>8511	Condition	 
>8512	CallExpression	bone -> Attribute ( \"blend\" )
>8513	ArgumentList	\"blend\"
>8514	Argument	\"blend\"
>8515	PrimaryExpression	\"blend\"
>8516	Callee	bone -> Attribute
>8517	PtrMemberAccess	bone -> Attribute
>8518	Identifier	Attribute
>8519	Identifier	bone
>8520	IfStatement	if ( bone -> Attribute ( \"rt\" ) )
>8521	CompoundStatement	 
>8522	ExpressionStatement	 
>8523	CallExpression	newb -> repeatTextureToFill ( true )
>8524	ArgumentList	true
>8525	Argument	true
>8526	Identifier	true
>8527	Callee	newb -> repeatTextureToFill
>8528	PtrMemberAccess	newb -> repeatTextureToFill
>8529	Identifier	repeatTextureToFill
>8530	Identifier	newb
>8531	Condition	 
>8532	CallExpression	bone -> Attribute ( \"rt\" )
>8533	ArgumentList	\"rt\"
>8534	Argument	\"rt\"
>8535	PrimaryExpression	\"rt\"
>8536	Callee	bone -> Attribute
>8537	PtrMemberAccess	bone -> Attribute
>8538	Identifier	Attribute
>8539	Identifier	bone
>8540	IfStatement	if ( bone -> Attribute ( \"sz\" ) )
>8541	CompoundStatement	 
>8542	ExpressionStatement	 
>8543	AssignmentExpr	newb -> scale = newb -> originalScale = Vector ( sx , sy )
>8544	AssignmentExpr	newb -> originalScale = Vector ( sx , sy )
>8545	CallExpression	Vector ( sx , sy )
>8546	ArgumentList	sx
>8547	Argument	sy
>8548	Identifier	sy
>8549	Argument	sx
>8550	Identifier	sx
>8551	Callee	Vector
>8552	Identifier	Vector
>8553	PtrMemberAccess	newb -> originalScale
>8554	Identifier	originalScale
>8555	Identifier	newb
>8556	PtrMemberAccess	newb -> scale
>8557	Identifier	scale
>8558	Identifier	newb
>8559	ExpressionStatement	 
>8560	ShiftExpression	is >> sx >> sy
>8561	ShiftExpression	sx >> sy
>8562	Identifier	sy
>8563	Identifier	sx
>8564	Identifier	is
>8565	IdentifierDeclStatement	 
>8566	IdentifierDecl	is ( bone -> Attribute ( \"sz\" ) )
>8567	CallExpression	bone -> Attribute ( \"sz\" )
>8568	ArgumentList	\"sz\"
>8569	Argument	\"sz\"
>8570	PrimaryExpression	\"sz\"
>8571	Callee	bone -> Attribute
>8572	PtrMemberAccess	bone -> Attribute
>8573	Identifier	Attribute
>8574	Identifier	bone
>8575	Identifier	is
>8576	IdentifierDeclType	SimpleIStringStream
>8577	IdentifierDeclStatement	 
>8578	IdentifierDecl	sy
>8579	Identifier	sy
>8580	IdentifierDeclType	float
>8581	IdentifierDecl	sx
>8582	Identifier	sx
>8583	IdentifierDeclType	float
>8584	Condition	 
>8585	CallExpression	bone -> Attribute ( \"sz\" )
>8586	ArgumentList	\"sz\"
>8587	Argument	\"sz\"
>8588	PrimaryExpression	\"sz\"
>8589	Callee	bone -> Attribute
>8590	PtrMemberAccess	bone -> Attribute
>8591	Identifier	Attribute
>8592	Identifier	bone
>8593	IfStatement	if ( bone -> Attribute ( \"strip\" ) )
>8594	CompoundStatement	 
>8595	ExpressionStatement	 
>8596	CallExpression	newb -> createStrip ( vert , num )
>8597	ArgumentList	vert
>8598	Argument	num
>8599	Identifier	num
>8600	Argument	vert
>8601	Identifier	vert
>8602	Callee	newb -> createStrip
>8603	PtrMemberAccess	newb -> createStrip
>8604	Identifier	createStrip
>8605	Identifier	newb
>8606	ExpressionStatement	 
>8607	ShiftExpression	is >> vert >> num
>8608	ShiftExpression	vert >> num
>8609	Identifier	num
>8610	Identifier	vert
>8611	Identifier	is
>8612	IdentifierDeclStatement	 
>8613	IdentifierDecl	num
>8614	Identifier	num
>8615	IdentifierDeclType	int
>8616	IdentifierDeclStatement	 
>8617	IdentifierDecl	vert
>8618	Identifier	vert
>8619	IdentifierDeclType	bool
>8620	IdentifierDeclStatement	 
>8621	IdentifierDecl	is ( bone -> Attribute ( \"strip\" ) )
>8622	CallExpression	bone -> Attribute ( \"strip\" )
>8623	ArgumentList	\"strip\"
>8624	Argument	\"strip\"
>8625	PrimaryExpression	\"strip\"
>8626	Callee	bone -> Attribute
>8627	PtrMemberAccess	bone -> Attribute
>8628	Identifier	Attribute
>8629	Identifier	bone
>8630	Identifier	is
>8631	IdentifierDeclType	SimpleIStringStream
>8632	Condition	 
>8633	CallExpression	bone -> Attribute ( \"strip\" )
>8634	ArgumentList	\"strip\"
>8635	Argument	\"strip\"
>8636	PrimaryExpression	\"strip\"
>8637	Callee	bone -> Attribute
>8638	PtrMemberAccess	bone -> Attribute
>8639	Identifier	Attribute
>8640	Identifier	bone
>8641	IfStatement	if ( bone -> Attribute ( \"io\" ) )
>8642	CompoundStatement	 
>8643	ExpressionStatement	 
>8644	ShiftExpression	is >> newb -> internalOffset . x >> newb -> internalOffset . y
>8645	ShiftExpression	newb -> internalOffset . x >> newb -> internalOffset . y
>8646	MemberAccess	newb -> internalOffset . y
>8647	Identifier	y
>8648	PtrMemberAccess	newb -> internalOffset
>8649	Identifier	internalOffset
>8650	Identifier	newb
>8651	MemberAccess	newb -> internalOffset . x
>8652	Identifier	x
>8653	PtrMemberAccess	newb -> internalOffset
>8654	Identifier	internalOffset
>8655	Identifier	newb
>8656	Identifier	is
>8657	IdentifierDeclStatement	 
>8658	IdentifierDecl	is ( bone -> Attribute ( \"io\" ) )
>8659	CallExpression	bone -> Attribute ( \"io\" )
>8660	ArgumentList	\"io\"
>8661	Argument	\"io\"
>8662	PrimaryExpression	\"io\"
>8663	Callee	bone -> Attribute
>8664	PtrMemberAccess	bone -> Attribute
>8665	Identifier	Attribute
>8666	Identifier	bone
>8667	Identifier	is
>8668	IdentifierDeclType	SimpleIStringStream
>8669	Condition	 
>8670	CallExpression	bone -> Attribute ( \"io\" )
>8671	ArgumentList	\"io\"
>8672	Argument	\"io\"
>8673	PrimaryExpression	\"io\"
>8674	Callee	bone -> Attribute
>8675	PtrMemberAccess	bone -> Attribute
>8676	Identifier	Attribute
>8677	Identifier	bone
>8678	IfStatement	if ( bone -> Attribute ( \"rq\" ) )
>8679	CompoundStatement	 
>8680	ExpressionStatement	 
>8681	AssignmentExpr	newb -> renderQuad = newb -> fileRenderQuad = atoi ( bone -> Attribute ( \"rq\" ) )
>8682	AssignmentExpr	newb -> fileRenderQuad = atoi ( bone -> Attribute ( \"rq\" ) )
>8683	CallExpression	atoi ( bone -> Attribute ( \"rq\" ) )
>8684	ArgumentList	bone -> Attribute ( \"rq\" )
>8685	Argument	bone -> Attribute ( \"rq\" )
>8686	CallExpression	bone -> Attribute ( \"rq\" )
>8687	ArgumentList	\"rq\"
>8688	Argument	\"rq\"
>8689	PrimaryExpression	\"rq\"
>8690	Callee	bone -> Attribute
>8691	PtrMemberAccess	bone -> Attribute
>8692	Identifier	Attribute
>8693	Identifier	bone
>8694	Callee	atoi
>8695	Identifier	atoi
>8696	PtrMemberAccess	newb -> fileRenderQuad
>8697	Identifier	fileRenderQuad
>8698	Identifier	newb
>8699	PtrMemberAccess	newb -> renderQuad
>8700	Identifier	renderQuad
>8701	Identifier	newb
>8702	Condition	 
>8703	CallExpression	bone -> Attribute ( \"rq\" )
>8704	ArgumentList	\"rq\"
>8705	Argument	\"rq\"
>8706	PrimaryExpression	\"rq\"
>8707	Callee	bone -> Attribute
>8708	PtrMemberAccess	bone -> Attribute
>8709	Identifier	Attribute
>8710	Identifier	bone
>8711	IfStatement	if ( bone -> Attribute ( \"gc\" ) )
>8712	CompoundStatement	 
>8713	ExpressionStatement	 
>8714	AssignmentExpr	newb -> generateCollisionMask = atoi ( bone -> Attribute ( \"gc\" ) )
>8715	CallExpression	atoi ( bone -> Attribute ( \"gc\" ) )
>8716	ArgumentList	bone -> Attribute ( \"gc\" )
>8717	Argument	bone -> Attribute ( \"gc\" )
>8718	CallExpression	bone -> Attribute ( \"gc\" )
>8719	ArgumentList	\"gc\"
>8720	Argument	\"gc\"
>8721	PrimaryExpression	\"gc\"
>8722	Callee	bone -> Attribute
>8723	PtrMemberAccess	bone -> Attribute
>8724	Identifier	Attribute
>8725	Identifier	bone
>8726	Callee	atoi
>8727	Identifier	atoi
>8728	PtrMemberAccess	newb -> generateCollisionMask
>8729	Identifier	generateCollisionMask
>8730	Identifier	newb
>8731	Condition	 
>8732	CallExpression	bone -> Attribute ( \"gc\" )
>8733	ArgumentList	\"gc\"
>8734	Argument	\"gc\"
>8735	PrimaryExpression	\"gc\"
>8736	Callee	bone -> Attribute
>8737	PtrMemberAccess	bone -> Attribute
>8738	Identifier	Attribute
>8739	Identifier	bone
>8740	IfStatement	if ( bone -> Attribute ( \"pass\" ) )
>8741	CompoundStatement	 
>8742	ExpressionStatement	 
>8743	CallExpression	newb -> setRenderPass ( atoi ( bone -> Attribute ( \"pass\" ) ) )
>8744	ArgumentList	atoi ( bone -> Attribute ( \"pass\" ) )
>8745	Argument	atoi ( bone -> Attribute ( \"pass\" ) )
>8746	CallExpression	atoi ( bone -> Attribute ( \"pass\" ) )
>8747	ArgumentList	bone -> Attribute ( \"pass\" )
>8748	Argument	bone -> Attribute ( \"pass\" )
>8749	CallExpression	bone -> Attribute ( \"pass\" )
>8750	ArgumentList	\"pass\"
>8751	Argument	\"pass\"
>8752	PrimaryExpression	\"pass\"
>8753	Callee	bone -> Attribute
>8754	PtrMemberAccess	bone -> Attribute
>8755	Identifier	Attribute
>8756	Identifier	bone
>8757	Callee	atoi
>8758	Identifier	atoi
>8759	Callee	newb -> setRenderPass
>8760	PtrMemberAccess	newb -> setRenderPass
>8761	Identifier	setRenderPass
>8762	Identifier	newb
>8763	Condition	 
>8764	CallExpression	bone -> Attribute ( \"pass\" )
>8765	ArgumentList	\"pass\"
>8766	Argument	\"pass\"
>8767	PrimaryExpression	\"pass\"
>8768	Callee	bone -> Attribute
>8769	PtrMemberAccess	bone -> Attribute
>8770	Identifier	Attribute
>8771	Identifier	bone
>8772	IfStatement	if ( frc )
>8773	CompoundStatement	 
>8774	ExpressionStatement	 
>8775	CallExpression	newb -> showFrame ( 0 )
>8776	ArgumentList	0
>8777	Argument	0
>8778	PrimaryExpression	0
>8779	Callee	newb -> showFrame
>8780	PtrMemberAccess	newb -> showFrame
>8781	Identifier	showFrame
>8782	Identifier	newb
>8783	Condition	 
>8784	Identifier	frc
>8785	WhileStatement	while ( fr )
>8786	CompoundStatement	 
>8787	ExpressionStatement	 
>8788	IncDecOp	frc ++
>8789	IncDec	++
>8790	Identifier	frc
>8791	ExpressionStatement	 
>8792	AssignmentExpr	fr = fr -> NextSiblingElement ( \"Frame\" )
>8793	CallExpression	fr -> NextSiblingElement ( \"Frame\" )
>8794	ArgumentList	\"Frame\"
>8795	Argument	\"Frame\"
>8796	PrimaryExpression	\"Frame\"
>8797	Callee	fr -> NextSiblingElement
>8798	PtrMemberAccess	fr -> NextSiblingElement
>8799	Identifier	NextSiblingElement
>8800	Identifier	fr
>8801	Identifier	fr
>8802	IfStatement	if ( fr -> Attribute ( \"pass\" ) )
>8803	CompoundStatement	 
>8804	IfStatement	if ( q )
>8805	CompoundStatement	 
>8806	ExpressionStatement	 
>8807	CallExpression	q -> setRenderPass ( atoi ( fr -> Attribute ( \"pass\" ) ) )
>8808	ArgumentList	atoi ( fr -> Attribute ( \"pass\" ) )
>8809	Argument	atoi ( fr -> Attribute ( \"pass\" ) )
>8810	CallExpression	atoi ( fr -> Attribute ( \"pass\" ) )
>8811	ArgumentList	fr -> Attribute ( \"pass\" )
>8812	Argument	fr -> Attribute ( \"pass\" )
>8813	CallExpression	fr -> Attribute ( \"pass\" )
>8814	ArgumentList	\"pass\"
>8815	Argument	\"pass\"
>8816	PrimaryExpression	\"pass\"
>8817	Callee	fr -> Attribute
>8818	PtrMemberAccess	fr -> Attribute
>8819	Identifier	Attribute
>8820	Identifier	fr
>8821	Callee	atoi
>8822	Identifier	atoi
>8823	Callee	q -> setRenderPass
>8824	PtrMemberAccess	q -> setRenderPass
>8825	Identifier	setRenderPass
>8826	Identifier	q
>8827	Condition	 
>8828	Identifier	q
>8829	Condition	 
>8830	CallExpression	fr -> Attribute ( \"pass\" )
>8831	ArgumentList	\"pass\"
>8832	Argument	\"pass\"
>8833	PrimaryExpression	\"pass\"
>8834	Callee	fr -> Attribute
>8835	PtrMemberAccess	fr -> Attribute
>8836	Identifier	Attribute
>8837	Identifier	fr
>8838	IfStatement	if ( fr -> Attribute ( \"gfx\" ) )
>8839	CompoundStatement	 
>8840	ExpressionStatement	 
>8841	AssignmentExpr	q = newb -> addFrame ( gfx )
>8842	CallExpression	newb -> addFrame ( gfx )
>8843	ArgumentList	gfx
>8844	Argument	gfx
>8845	Identifier	gfx
>8846	Callee	newb -> addFrame
>8847	PtrMemberAccess	newb -> addFrame
>8848	Identifier	addFrame
>8849	Identifier	newb
>8850	Identifier	q
>8851	ExpressionStatement	 
>8852	AssignmentExpr	gfx = fr -> Attribute ( \"gfx\" )
>8853	CallExpression	fr -> Attribute ( \"gfx\" )
>8854	ArgumentList	\"gfx\"
>8855	Argument	\"gfx\"
>8856	PrimaryExpression	\"gfx\"
>8857	Callee	fr -> Attribute
>8858	PtrMemberAccess	fr -> Attribute
>8859	Identifier	Attribute
>8860	Identifier	fr
>8861	Identifier	gfx
>8862	Condition	 
>8863	CallExpression	fr -> Attribute ( \"gfx\" )
>8864	ArgumentList	\"gfx\"
>8865	Argument	\"gfx\"
>8866	PrimaryExpression	\"gfx\"
>8867	Callee	fr -> Attribute
>8868	PtrMemberAccess	fr -> Attribute
>8869	Identifier	Attribute
>8870	Identifier	fr
>8871	IdentifierDeclStatement	 
>8872	IdentifierDecl	gfx
>8873	Identifier	gfx
>8874	IdentifierDeclType	std 
>8875	IdentifierDeclStatement	 
>8876	IdentifierDecl	* q = 0
>8877	AssignmentExpr	* q = 0
>8878	PrimaryExpression	0
>8879	Identifier	q
>8880	Identifier	q
>8881	IdentifierDeclType	Quad *
>8882	Condition	 
>8883	Identifier	fr
>8884	IdentifierDeclStatement	 
>8885	IdentifierDecl	frc = 0
>8886	AssignmentExpr	frc = 0
>8887	PrimaryExpression	0
>8888	Identifier	frc
>8889	Identifier	frc
>8890	IdentifierDeclType	int
>8891	ExpressionStatement	 
>8892	AssignmentExpr	fr = bone -> FirstChildElement ( \"Frame\" )
>8893	CallExpression	bone -> FirstChildElement ( \"Frame\" )
>8894	ArgumentList	\"Frame\"
>8895	Argument	\"Frame\"
>8896	PrimaryExpression	\"Frame\"
>8897	Callee	bone -> FirstChildElement
>8898	PtrMemberAccess	bone -> FirstChildElement
>8899	Identifier	FirstChildElement
>8900	Identifier	bone
>8901	Identifier	fr
>8902	IdentifierDeclStatement	 
>8903	IdentifierDecl	* fr = 0
>8904	AssignmentExpr	* fr = 0
>8905	PrimaryExpression	0
>8906	Identifier	fr
>8907	Identifier	fr
>8908	IdentifierDeclType	XMLElement *
>8909	IfStatement	if ( bone -> Attribute ( \"prt\" ) )
>8910	CompoundStatement	 
>8911	WhileStatement	while ( is >> slot )
>8912	CompoundStatement	 
>8913	ExpressionStatement	 
>8914	CallExpression	e -> load ( pfile )
>8915	ArgumentList	pfile
>8916	Argument	pfile
>8917	Identifier	pfile
>8918	Callee	e -> load
>8919	PtrMemberAccess	e -> load
>8920	Identifier	load
>8921	Identifier	e
>8922	ExpressionStatement	 
>8923	CallExpression	newb -> addChild ( e , PM_POINTER )
>8924	ArgumentList	e
>8925	Argument	PM_POINTER
>8926	Identifier	PM_POINTER
>8927	Argument	e
>8928	Identifier	e
>8929	Callee	newb -> addChild
>8930	PtrMemberAccess	newb -> addChild
>8931	Identifier	addChild
>8932	Identifier	newb
>8933	IdentifierDeclStatement	 
>8934	IdentifierDecl	* e = newb -> emitters [ slot ]
>8935	AssignmentExpr	* e = newb -> emitters [ slot ]
>8936	ArrayIndexing	newb -> emitters [ slot ]
>8937	Identifier	slot
>8938	PtrMemberAccess	newb -> emitters
>8939	Identifier	emitters
>8940	Identifier	newb
>8941	Identifier	e
>8942	Identifier	e
>8943	IdentifierDeclType	ParticleEffect *
>8944	ExpressionStatement	 
>8945	Identifier	ParticleEffect
>8946	Statement	 
>8947	Statement	 
>8948	Statement	 
>8949	Statement	 
>8950	Statement	 
>8951	Statement	 
>8952	Statement	 
>8953	Statement	 
>8954	ExpressionStatement	 
>8955	ShiftExpression	is >> pfile
>8956	Identifier	pfile
>8957	Identifier	is
>8958	IdentifierDeclStatement	 
>8959	IdentifierDecl	pfile
>8960	Identifier	pfile
>8961	IdentifierDeclType	std 
>8962	Condition	 
>8963	ShiftExpression	is >> slot
>8964	Identifier	slot
>8965	Identifier	is
>8966	IdentifierDeclStatement	 
>8967	IdentifierDecl	slot
>8968	Identifier	slot
>8969	IdentifierDeclType	int
>8970	IdentifierDeclStatement	 
>8971	IdentifierDecl	is ( newb -> prt )
>8972	PtrMemberAccess	newb -> prt
>8973	Identifier	prt
>8974	Identifier	newb
>8975	Identifier	is
>8976	IdentifierDeclType	SimpleIStringStream
>8977	ExpressionStatement	 
>8978	AssignmentExpr	newb -> prt = bone -> Attribute ( \"prt\" )
>8979	CallExpression	bone -> Attribute ( \"prt\" )
>8980	ArgumentList	\"prt\"
>8981	Argument	\"prt\"
>8982	PrimaryExpression	\"prt\"
>8983	Callee	bone -> Attribute
>8984	PtrMemberAccess	bone -> Attribute
>8985	Identifier	Attribute
>8986	Identifier	bone
>8987	PtrMemberAccess	newb -> prt
>8988	Identifier	prt
>8989	Identifier	newb
>8990	Condition	 
>8991	CallExpression	bone -> Attribute ( \"prt\" )
>8992	ArgumentList	\"prt\"
>8993	Argument	\"prt\"
>8994	PrimaryExpression	\"prt\"
>8995	Callee	bone -> Attribute
>8996	PtrMemberAccess	bone -> Attribute
>8997	Identifier	Attribute
>8998	Identifier	bone
>8999	IfStatement	if ( bone -> Attribute ( \"crects\" ) )
>9000	CompoundStatement	 
>9001	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>9002	CompoundStatement	 
>9003	ExpressionStatement	 
>9004	CallExpression	newb -> collisionRects . push_back ( r )
>9005	ArgumentList	r
>9006	Argument	r
>9007	Identifier	r
>9008	Callee	newb -> collisionRects . push_back
>9009	MemberAccess	newb -> collisionRects . push_back
>9010	Identifier	push_back
>9011	PtrMemberAccess	newb -> collisionRects
>9012	Identifier	collisionRects
>9013	Identifier	newb
>9014	ExpressionStatement	 
>9015	CallExpression	r . setCWH ( x , y , w , h )
>9016	ArgumentList	x
>9017	Argument	h
>9018	Identifier	h
>9019	Argument	w
>9020	Identifier	w
>9021	Argument	y
>9022	Identifier	y
>9023	Argument	x
>9024	Identifier	x
>9025	Callee	r . setCWH
>9026	MemberAccess	r . setCWH
>9027	Identifier	setCWH
>9028	Identifier	r
>9029	ExpressionStatement	 
>9030	ShiftExpression	is >> x >> y >> w >> h
>9031	ShiftExpression	x >> y >> w >> h
>9032	ShiftExpression	y >> w >> h
>9033	ShiftExpression	w >> h
>9034	Identifier	h
>9035	Identifier	w
>9036	Identifier	y
>9037	Identifier	x
>9038	Identifier	is
>9039	IdentifierDeclStatement	 
>9040	IdentifierDecl	h
>9041	Identifier	h
>9042	IdentifierDeclType	int
>9043	IdentifierDecl	w
>9044	Identifier	w
>9045	IdentifierDeclType	int
>9046	IdentifierDecl	y
>9047	Identifier	y
>9048	IdentifierDeclType	int
>9049	IdentifierDecl	x
>9050	Identifier	x
>9051	IdentifierDeclType	int
>9052	IdentifierDeclStatement	 
>9053	IdentifierDecl	r
>9054	Identifier	r
>9055	IdentifierDeclType	RectShape
>9056	IncDecOp	 
>9057	IncDec	++
>9058	Identifier	i
>9059	Condition	 
>9060	RelationalExpression	i < num
>9061	Identifier	num
>9062	Identifier	i
>9063	ForInit	 
>9064	IdentifierDeclStatement	int i = 0 ;
>9065	IdentifierDecl	i = 0
>9066	AssignmentExpr	i = 0
>9067	PrimaryExpression	0
>9068	Identifier	i
>9069	Identifier	i
>9070	IdentifierDeclType	int
>9071	ExpressionStatement	 
>9072	ShiftExpression	is >> num
>9073	Identifier	num
>9074	Identifier	is
>9075	IdentifierDeclStatement	 
>9076	IdentifierDecl	num = 0
>9077	AssignmentExpr	num = 0
>9078	PrimaryExpression	0
>9079	Identifier	num
>9080	Identifier	num
>9081	IdentifierDeclType	int
>9082	IdentifierDeclStatement	 
>9083	IdentifierDecl	is ( bone -> Attribute ( \"crects\" ) )
>9084	CallExpression	bone -> Attribute ( \"crects\" )
>9085	ArgumentList	\"crects\"
>9086	Argument	\"crects\"
>9087	PrimaryExpression	\"crects\"
>9088	Callee	bone -> Attribute
>9089	PtrMemberAccess	bone -> Attribute
>9090	Identifier	Attribute
>9091	Identifier	bone
>9092	Identifier	is
>9093	IdentifierDeclType	SimpleIStringStream
>9094	Condition	 
>9095	CallExpression	bone -> Attribute ( \"crects\" )
>9096	ArgumentList	\"crects\"
>9097	Argument	\"crects\"
>9098	PrimaryExpression	\"crects\"
>9099	Callee	bone -> Attribute
>9100	PtrMemberAccess	bone -> Attribute
>9101	Identifier	Attribute
>9102	Identifier	bone
>9103	IfStatement	if ( bone -> Attribute ( \"offy\" ) )
>9104	ExpressionStatement	 
>9105	AssignmentExpr	newb -> offset . y = atoi ( bone -> Attribute ( \"offy\" ) )
>9106	CallExpression	atoi ( bone -> Attribute ( \"offy\" ) )
>9107	ArgumentList	bone -> Attribute ( \"offy\" )
>9108	Argument	bone -> Attribute ( \"offy\" )
>9109	CallExpression	bone -> Attribute ( \"offy\" )
>9110	ArgumentList	\"offy\"
>9111	Argument	\"offy\"
>9112	PrimaryExpression	\"offy\"
>9113	Callee	bone -> Attribute
>9114	PtrMemberAccess	bone -> Attribute
>9115	Identifier	Attribute
>9116	Identifier	bone
>9117	Callee	atoi
>9118	Identifier	atoi
>9119	MemberAccess	newb -> offset . y
>9120	Identifier	y
>9121	PtrMemberAccess	newb -> offset
>9122	Identifier	offset
>9123	Identifier	newb
>9124	Condition	 
>9125	CallExpression	bone -> Attribute ( \"offy\" )
>9126	ArgumentList	\"offy\"
>9127	Argument	\"offy\"
>9128	PrimaryExpression	\"offy\"
>9129	Callee	bone -> Attribute
>9130	PtrMemberAccess	bone -> Attribute
>9131	Identifier	Attribute
>9132	Identifier	bone
>9133	IfStatement	if ( bone -> Attribute ( \"offx\" ) )
>9134	ExpressionStatement	 
>9135	AssignmentExpr	newb -> offset . x = atoi ( bone -> Attribute ( \"offx\" ) )
>9136	CallExpression	atoi ( bone -> Attribute ( \"offx\" ) )
>9137	ArgumentList	bone -> Attribute ( \"offx\" )
>9138	Argument	bone -> Attribute ( \"offx\" )
>9139	CallExpression	bone -> Attribute ( \"offx\" )
>9140	ArgumentList	\"offx\"
>9141	Argument	\"offx\"
>9142	PrimaryExpression	\"offx\"
>9143	Callee	bone -> Attribute
>9144	PtrMemberAccess	bone -> Attribute
>9145	Identifier	Attribute
>9146	Identifier	bone
>9147	Callee	atoi
>9148	Identifier	atoi
>9149	MemberAccess	newb -> offset . x
>9150	Identifier	x
>9151	PtrMemberAccess	newb -> offset
>9152	Identifier	offset
>9153	Identifier	newb
>9154	Condition	 
>9155	CallExpression	bone -> Attribute ( \"offx\" )
>9156	ArgumentList	\"offx\"
>9157	Argument	\"offx\"
>9158	PrimaryExpression	\"offx\"
>9159	Callee	bone -> Attribute
>9160	PtrMemberAccess	bone -> Attribute
>9161	Identifier	Attribute
>9162	Identifier	bone
>9163	IdentifierDeclStatement	 
>9164	IdentifierDecl	* newb = initBone ( idx , gfx , pidx , rbp , name , cr , fh , fv , cp )
>9165	AssignmentExpr	* newb = initBone ( idx , gfx , pidx , rbp , name , cr , fh , fv , cp )
>9166	CallExpression	initBone ( idx , gfx , pidx , rbp , name , cr , fh , fv , cp )
>9167	ArgumentList	idx
>9168	Argument	cp
>9169	Identifier	cp
>9170	Argument	fv
>9171	Identifier	fv
>9172	Argument	fh
>9173	Identifier	fh
>9174	Argument	cr
>9175	Identifier	cr
>9176	Argument	name
>9177	Identifier	name
>9178	Argument	rbp
>9179	Identifier	rbp
>9180	Argument	pidx
>9181	Identifier	pidx
>9182	Argument	gfx
>9183	Identifier	gfx
>9184	Argument	idx
>9185	Identifier	idx
>9186	Callee	initBone
>9187	Identifier	initBone
>9188	Identifier	newb
>9189	Identifier	newb
>9190	IdentifierDeclType	Bone *
>9191	IdentifierDeclStatement	 
>9192	IdentifierDecl	gfx = bone -> Attribute ( \"gfx\" )
>9193	AssignmentExpr	gfx = bone -> Attribute ( \"gfx\" )
>9194	CallExpression	bone -> Attribute ( \"gfx\" )
>9195	ArgumentList	\"gfx\"
>9196	Argument	\"gfx\"
>9197	PrimaryExpression	\"gfx\"
>9198	Callee	bone -> Attribute
>9199	PtrMemberAccess	bone -> Attribute
>9200	Identifier	Attribute
>9201	Identifier	bone
>9202	Identifier	gfx
>9203	Identifier	gfx
>9204	IdentifierDeclType	std 
>9205	IfStatement	if ( bone -> Attribute ( \"cp\" ) )
>9206	CompoundStatement	 
>9207	ExpressionStatement	 
>9208	ShiftExpression	is >> cp . x >> cp . y
>9209	ShiftExpression	cp . x >> cp . y
>9210	MemberAccess	cp . y
>9211	Identifier	y
>9212	Identifier	cp
>9213	MemberAccess	cp . x
>9214	Identifier	x
>9215	Identifier	cp
>9216	Identifier	is
>9217	IdentifierDeclStatement	 
>9218	IdentifierDecl	is ( bone -> Attribute ( \"cp\" ) )
>9219	CallExpression	bone -> Attribute ( \"cp\" )
>9220	ArgumentList	\"cp\"
>9221	Argument	\"cp\"
>9222	PrimaryExpression	\"cp\"
>9223	Callee	bone -> Attribute
>9224	PtrMemberAccess	bone -> Attribute
>9225	Identifier	Attribute
>9226	Identifier	bone
>9227	Identifier	is
>9228	IdentifierDeclType	SimpleIStringStream
>9229	Condition	 
>9230	CallExpression	bone -> Attribute ( \"cp\" )
>9231	ArgumentList	\"cp\"
>9232	Argument	\"cp\"
>9233	PrimaryExpression	\"cp\"
>9234	Callee	bone -> Attribute
>9235	PtrMemberAccess	bone -> Attribute
>9236	Identifier	Attribute
>9237	Identifier	bone
>9238	IfStatement	if ( bone -> Attribute ( \"fv\" ) )
>9239	ExpressionStatement	 
>9240	AssignmentExpr	fv = atoi ( bone -> Attribute ( \"fv\" ) )
>9241	CallExpression	atoi ( bone -> Attribute ( \"fv\" ) )
>9242	ArgumentList	bone -> Attribute ( \"fv\" )
>9243	Argument	bone -> Attribute ( \"fv\" )
>9244	CallExpression	bone -> Attribute ( \"fv\" )
>9245	ArgumentList	\"fv\"
>9246	Argument	\"fv\"
>9247	PrimaryExpression	\"fv\"
>9248	Callee	bone -> Attribute
>9249	PtrMemberAccess	bone -> Attribute
>9250	Identifier	Attribute
>9251	Identifier	bone
>9252	Callee	atoi
>9253	Identifier	atoi
>9254	Identifier	fv
>9255	Condition	 
>9256	CallExpression	bone -> Attribute ( \"fv\" )
>9257	ArgumentList	\"fv\"
>9258	Argument	\"fv\"
>9259	PrimaryExpression	\"fv\"
>9260	Callee	bone -> Attribute
>9261	PtrMemberAccess	bone -> Attribute
>9262	Identifier	Attribute
>9263	Identifier	bone
>9264	IfStatement	if ( bone -> Attribute ( \"fh\" ) )
>9265	ExpressionStatement	 
>9266	AssignmentExpr	fh = atoi ( bone -> Attribute ( \"fh\" ) )
>9267	CallExpression	atoi ( bone -> Attribute ( \"fh\" ) )
>9268	ArgumentList	bone -> Attribute ( \"fh\" )
>9269	Argument	bone -> Attribute ( \"fh\" )
>9270	CallExpression	bone -> Attribute ( \"fh\" )
>9271	ArgumentList	\"fh\"
>9272	Argument	\"fh\"
>9273	PrimaryExpression	\"fh\"
>9274	Callee	bone -> Attribute
>9275	PtrMemberAccess	bone -> Attribute
>9276	Identifier	Attribute
>9277	Identifier	bone
>9278	Callee	atoi
>9279	Identifier	atoi
>9280	Identifier	fh
>9281	Condition	 
>9282	CallExpression	bone -> Attribute ( \"fh\" )
>9283	ArgumentList	\"fh\"
>9284	Argument	\"fh\"
>9285	PrimaryExpression	\"fh\"
>9286	Callee	bone -> Attribute
>9287	PtrMemberAccess	bone -> Attribute
>9288	Identifier	Attribute
>9289	Identifier	bone
>9290	IfStatement	if ( bone -> Attribute ( \"cr\" ) )
>9291	ExpressionStatement	 
>9292	AssignmentExpr	cr = atoi ( bone -> Attribute ( \"cr\" ) )
>9293	CallExpression	atoi ( bone -> Attribute ( \"cr\" ) )
>9294	ArgumentList	bone -> Attribute ( \"cr\" )
>9295	Argument	bone -> Attribute ( \"cr\" )
>9296	CallExpression	bone -> Attribute ( \"cr\" )
>9297	ArgumentList	\"cr\"
>9298	Argument	\"cr\"
>9299	PrimaryExpression	\"cr\"
>9300	Callee	bone -> Attribute
>9301	PtrMemberAccess	bone -> Attribute
>9302	Identifier	Attribute
>9303	Identifier	bone
>9304	Callee	atoi
>9305	Identifier	atoi
>9306	Identifier	cr
>9307	Condition	 
>9308	CallExpression	bone -> Attribute ( \"cr\" )
>9309	ArgumentList	\"cr\"
>9310	Argument	\"cr\"
>9311	PrimaryExpression	\"cr\"
>9312	Callee	bone -> Attribute
>9313	PtrMemberAccess	bone -> Attribute
>9314	Identifier	Attribute
>9315	Identifier	bone
>9316	IfStatement	if ( bone -> Attribute ( \"name\" ) )
>9317	ExpressionStatement	 
>9318	AssignmentExpr	name = bone -> Attribute ( \"name\" )
>9319	CallExpression	bone -> Attribute ( \"name\" )
>9320	ArgumentList	\"name\"
>9321	Argument	\"name\"
>9322	PrimaryExpression	\"name\"
>9323	Callee	bone -> Attribute
>9324	PtrMemberAccess	bone -> Attribute
>9325	Identifier	Attribute
>9326	Identifier	bone
>9327	Identifier	name
>9328	Condition	 
>9329	CallExpression	bone -> Attribute ( \"name\" )
>9330	ArgumentList	\"name\"
>9331	Argument	\"name\"
>9332	PrimaryExpression	\"name\"
>9333	Callee	bone -> Attribute
>9334	PtrMemberAccess	bone -> Attribute
>9335	Identifier	Attribute
>9336	Identifier	bone
>9337	IfStatement	if ( bone -> Attribute ( \"rbp\" ) )
>9338	ExpressionStatement	 
>9339	AssignmentExpr	rbp = atoi ( bone -> Attribute ( \"rbp\" ) )
>9340	CallExpression	atoi ( bone -> Attribute ( \"rbp\" ) )
>9341	ArgumentList	bone -> Attribute ( \"rbp\" )
>9342	Argument	bone -> Attribute ( \"rbp\" )
>9343	CallExpression	bone -> Attribute ( \"rbp\" )
>9344	ArgumentList	\"rbp\"
>9345	Argument	\"rbp\"
>9346	PrimaryExpression	\"rbp\"
>9347	Callee	bone -> Attribute
>9348	PtrMemberAccess	bone -> Attribute
>9349	Identifier	Attribute
>9350	Identifier	bone
>9351	Callee	atoi
>9352	Identifier	atoi
>9353	Identifier	rbp
>9354	Condition	 
>9355	CallExpression	bone -> Attribute ( \"rbp\" )
>9356	ArgumentList	\"rbp\"
>9357	Argument	\"rbp\"
>9358	PrimaryExpression	\"rbp\"
>9359	Callee	bone -> Attribute
>9360	PtrMemberAccess	bone -> Attribute
>9361	Identifier	Attribute
>9362	Identifier	bone
>9363	IfStatement	if ( bone -> Attribute ( \"pidx\" ) )
>9364	ExpressionStatement	 
>9365	AssignmentExpr	pidx = atoi ( bone -> Attribute ( \"pidx\" ) )
>9366	CallExpression	atoi ( bone -> Attribute ( \"pidx\" ) )
>9367	ArgumentList	bone -> Attribute ( \"pidx\" )
>9368	Argument	bone -> Attribute ( \"pidx\" )
>9369	CallExpression	bone -> Attribute ( \"pidx\" )
>9370	ArgumentList	\"pidx\"
>9371	Argument	\"pidx\"
>9372	PrimaryExpression	\"pidx\"
>9373	Callee	bone -> Attribute
>9374	PtrMemberAccess	bone -> Attribute
>9375	Identifier	Attribute
>9376	Identifier	bone
>9377	Callee	atoi
>9378	Identifier	atoi
>9379	Identifier	pidx
>9380	Condition	 
>9381	CallExpression	bone -> Attribute ( \"pidx\" )
>9382	ArgumentList	\"pidx\"
>9383	Argument	\"pidx\"
>9384	PrimaryExpression	\"pidx\"
>9385	Callee	bone -> Attribute
>9386	PtrMemberAccess	bone -> Attribute
>9387	Identifier	Attribute
>9388	Identifier	bone
>9389	IdentifierDeclStatement	 
>9390	IdentifierDecl	cp
>9391	Identifier	cp
>9392	IdentifierDeclType	Vector
>9393	IdentifierDeclStatement	 
>9394	IdentifierDecl	name
>9395	Identifier	name
>9396	IdentifierDeclType	std 
>9397	IdentifierDeclStatement	 
>9398	IdentifierDecl	fv = 0
>9399	AssignmentExpr	fv = 0
>9400	PrimaryExpression	0
>9401	Identifier	fv
>9402	Identifier	fv
>9403	IdentifierDeclType	int
>9404	IdentifierDecl	fh = 0
>9405	AssignmentExpr	fh = 0
>9406	PrimaryExpression	0
>9407	Identifier	fh
>9408	Identifier	fh
>9409	IdentifierDeclType	int
>9410	IdentifierDecl	cr = 0
>9411	AssignmentExpr	cr = 0
>9412	PrimaryExpression	0
>9413	Identifier	cr
>9414	Identifier	cr
>9415	IdentifierDeclType	int
>9416	IdentifierDecl	rbp = 0
>9417	AssignmentExpr	rbp = 0
>9418	PrimaryExpression	0
>9419	Identifier	rbp
>9420	Identifier	rbp
>9421	IdentifierDeclType	int
>9422	IdentifierDecl	pidx = - 1
>9423	AssignmentExpr	pidx = - 1
>9424	UnaryOp	- 1
>9425	PrimaryExpression	1
>9426	UnaryOperator	-
>9427	Identifier	pidx
>9428	Identifier	pidx
>9429	IdentifierDeclType	int
>9430	IdentifierDeclStatement	 
>9431	IdentifierDecl	idx = atoi ( bone -> Attribute ( \"idx\" ) )
>9432	AssignmentExpr	idx = atoi ( bone -> Attribute ( \"idx\" ) )
>9433	CallExpression	atoi ( bone -> Attribute ( \"idx\" ) )
>9434	ArgumentList	bone -> Attribute ( \"idx\" )
>9435	Argument	bone -> Attribute ( \"idx\" )
>9436	CallExpression	bone -> Attribute ( \"idx\" )
>9437	ArgumentList	\"idx\"
>9438	Argument	\"idx\"
>9439	PrimaryExpression	\"idx\"
>9440	Callee	bone -> Attribute
>9441	PtrMemberAccess	bone -> Attribute
>9442	Identifier	Attribute
>9443	Identifier	bone
>9444	Callee	atoi
>9445	Identifier	atoi
>9446	Identifier	idx
>9447	Identifier	idx
>9448	IdentifierDeclType	int
>9449	Condition	 
>9450	Identifier	bone
>9451	IdentifierDeclStatement	 
>9452	IdentifierDecl	* bone = bones -> FirstChildElement ( \"Bone\" )
>9453	AssignmentExpr	* bone = bones -> FirstChildElement ( \"Bone\" )
>9454	CallExpression	bones -> FirstChildElement ( \"Bone\" )
>9455	ArgumentList	\"Bone\"
>9456	Argument	\"Bone\"
>9457	PrimaryExpression	\"Bone\"
>9458	Callee	bones -> FirstChildElement
>9459	PtrMemberAccess	bones -> FirstChildElement
>9460	Identifier	FirstChildElement
>9461	Identifier	bones
>9462	Identifier	bone
>9463	Identifier	bone
>9464	IdentifierDeclType	XMLElement *
>9465	IfStatement	if ( bones -> Attribute ( \"scale\" ) )
>9466	CompoundStatement	 
>9467	ExpressionStatement	 
>9468	ShiftExpression	is >> scale . x >> scale . y
>9469	ShiftExpression	scale . x >> scale . y
>9470	MemberAccess	scale . y
>9471	Identifier	y
>9472	Identifier	scale
>9473	MemberAccess	scale . x
>9474	Identifier	x
>9475	Identifier	scale
>9476	Identifier	is
>9477	IdentifierDeclStatement	 
>9478	IdentifierDecl	is ( bones -> Attribute ( \"scale\" ) )
>9479	CallExpression	bones -> Attribute ( \"scale\" )
>9480	ArgumentList	\"scale\"
>9481	Argument	\"scale\"
>9482	PrimaryExpression	\"scale\"
>9483	Callee	bones -> Attribute
>9484	PtrMemberAccess	bones -> Attribute
>9485	Identifier	Attribute
>9486	Identifier	bones
>9487	Identifier	is
>9488	IdentifierDeclType	SimpleIStringStream
>9489	Condition	 
>9490	CallExpression	bones -> Attribute ( \"scale\" )
>9491	ArgumentList	\"scale\"
>9492	Argument	\"scale\"
>9493	PrimaryExpression	\"scale\"
>9494	Callee	bones -> Attribute
>9495	PtrMemberAccess	bones -> Attribute
>9496	Identifier	Attribute
>9497	Identifier	bones
>9498	Condition	 
>9499	Identifier	bones
>9500	IdentifierDeclStatement	 
>9501	IdentifierDecl	* bones = xml -> FirstChildElement ( \"Bones\" )
>9502	AssignmentExpr	* bones = xml -> FirstChildElement ( \"Bones\" )
>9503	CallExpression	xml -> FirstChildElement ( \"Bones\" )
>9504	ArgumentList	\"Bones\"
>9505	Argument	\"Bones\"
>9506	PrimaryExpression	\"Bones\"
>9507	Callee	xml -> FirstChildElement
>9508	PtrMemberAccess	xml -> FirstChildElement
>9509	Identifier	FirstChildElement
>9510	Identifier	xml
>9511	Identifier	bones
>9512	Identifier	bones
>9513	IdentifierDeclType	XMLElement *
>9514	ExpressionStatement	 
>9515	AssignmentExpr	loaded = true
>9516	Identifier	true
>9517	Identifier	loaded
>9518	IfStatement	if ( ! xml )
>9519	CompoundStatement	 
>9520	ReturnStatement	 
>9521	ExpressionStatement	 
>9522	CallExpression	errorLog ( \"Could not load skeletal[\" + file + \"] - Malformed XML.\" )
>9523	ArgumentList	\"Could not load skeletal[\" + file + \"] - Malformed XML.\"
>9524	Argument	\"Could not load skeletal[\" + file + \"] - Malformed XML.\"
>9525	AdditiveExpression	\"Could not load skeletal[\" + file + \"] - Malformed XML.\"
>9526	AdditiveExpression	file + \"] - Malformed XML.\"
>9527	PrimaryExpression	\"] - Malformed XML.\"
>9528	Identifier	file
>9529	PrimaryExpression	\"Could not load skeletal[\"
>9530	Callee	errorLog
>9531	Identifier	errorLog
>9532	ExpressionStatement	 
>9533	AssignmentExpr	filenameLoaded = \"\"
>9534	PrimaryExpression	\"\"
>9535	Identifier	filenameLoaded
>9536	Condition	 
>9537	UnaryOp	! xml
>9538	Identifier	xml
>9539	UnaryOperator	!
>9540	IdentifierDeclStatement	 
>9541	IdentifierDecl	* xml = _retrieveSkeletalXML ( file , false )
>9542	AssignmentExpr	* xml = _retrieveSkeletalXML ( file , false )
>9543	CallExpression	_retrieveSkeletalXML ( file , false )
>9544	ArgumentList	file
>9545	Argument	false
>9546	Identifier	false
>9547	Argument	file
>9548	Identifier	file
>9549	Callee	_retrieveSkeletalXML
>9550	Identifier	_retrieveSkeletalXML
>9551	Identifier	xml
>9552	Identifier	xml
>9553	IdentifierDeclType	XMLDocument *
>9554	ExpressionStatement	 
>9555	AssignmentExpr	file = core -> adjustFilenameCase ( file )
>9556	CallExpression	core -> adjustFilenameCase ( file )
>9557	ArgumentList	file
>9558	Argument	file
>9559	Identifier	file
>9560	Callee	core -> adjustFilenameCase
>9561	PtrMemberAccess	core -> adjustFilenameCase
>9562	Identifier	adjustFilenameCase
>9563	Identifier	core
>9564	Identifier	file
>9565	IfStatement	if ( ! exists ( file ) )
>9566	CompoundStatement	 
>9567	ReturnStatement	 
>9568	ExpressionStatement	 
>9569	CallExpression	errorLog ( \"Could not load skeletal[\" + file + \"] - File not found.\" )
>9570	ArgumentList	\"Could not load skeletal[\" + file + \"] - File not found.\"
>9571	Argument	\"Could not load skeletal[\" + file + \"] - File not found.\"
>9572	AdditiveExpression	\"Could not load skeletal[\" + file + \"] - File not found.\"
>9573	AdditiveExpression	file + \"] - File not found.\"
>9574	PrimaryExpression	\"] - File not found.\"
>9575	Identifier	file
>9576	PrimaryExpression	\"Could not load skeletal[\"
>9577	Callee	errorLog
>9578	Identifier	errorLog
>9579	ExpressionStatement	 
>9580	AssignmentExpr	filenameLoaded = \"\"
>9581	PrimaryExpression	\"\"
>9582	Identifier	filenameLoaded
>9583	Condition	 
>9584	UnaryOp	! exists ( file )
>9585	CallExpression	exists ( file )
>9586	ArgumentList	file
>9587	Argument	file
>9588	Identifier	file
>9589	Callee	exists
>9590	Identifier	exists
>9591	UnaryOperator	!
>9592	IfStatement	if ( file . empty ( ) || ! exists ( file , false ) )
>9593	CompoundStatement	 
>9594	ExpressionStatement	 
>9595	AssignmentExpr	file = animationPath + filenameLoaded + \".xml\"
>9596	AdditiveExpression	animationPath + filenameLoaded + \".xml\"
>9597	AdditiveExpression	filenameLoaded + \".xml\"
>9598	PrimaryExpression	\".xml\"
>9599	Identifier	filenameLoaded
>9600	Identifier	animationPath
>9601	Identifier	file
>9602	Condition	 
>9603	OrExpression	file . empty ( ) || ! exists ( file , false )
>9604	UnaryOp	! exists ( file , false )
>9605	CallExpression	exists ( file , false )
>9606	ArgumentList	file
>9607	Argument	false
>9608	Identifier	false
>9609	Argument	file
>9610	Identifier	file
>9611	Callee	exists
>9612	Identifier	exists
>9613	UnaryOperator	!
>9614	CallExpression	file . empty ( )
>9615	ArgumentList	 
>9616	Callee	file . empty
>9617	MemberAccess	file . empty
>9618	Identifier	empty
>9619	Identifier	file
>9620	IfStatement	if ( ! secondaryAnimationPath . empty ( ) )
>9621	CompoundStatement	 
>9622	ExpressionStatement	 
>9623	AssignmentExpr	file = secondaryAnimationPath + filenameLoaded + \".xml\"
>9624	AdditiveExpression	secondaryAnimationPath + filenameLoaded + \".xml\"
>9625	AdditiveExpression	filenameLoaded + \".xml\"
>9626	PrimaryExpression	\".xml\"
>9627	Identifier	filenameLoaded
>9628	Identifier	secondaryAnimationPath
>9629	Identifier	file
>9630	Condition	 
>9631	UnaryOp	! secondaryAnimationPath . empty ( )
>9632	CallExpression	secondaryAnimationPath . empty ( )
>9633	ArgumentList	 
>9634	Callee	secondaryAnimationPath . empty
>9635	MemberAccess	secondaryAnimationPath . empty
>9636	Identifier	empty
>9637	Identifier	secondaryAnimationPath
>9638	UnaryOperator	!
>9639	IdentifierDeclStatement	 
>9640	IdentifierDecl	file
>9641	Identifier	file
>9642	IdentifierDeclType	std 
>9643	ExpressionStatement	 
>9644	CallExpression	stringToLower ( filenameLoaded )
>9645	ArgumentList	filenameLoaded
>9646	Argument	filenameLoaded
>9647	Identifier	filenameLoaded
>9648	Callee	stringToLower
>9649	Identifier	stringToLower
>9650	ExpressionStatement	 
>9651	AssignmentExpr	filenameLoaded = fn
>9652	Identifier	fn
>9653	Identifier	filenameLoaded
>9654	ExpressionStatement	 
>9655	CallExpression	deleteBones ( )
>9656	ArgumentList	 
>9657	Callee	deleteBones
>9658	Identifier	deleteBones
>9659	ExpressionStatement	 
>9660	CallExpression	animLayers . clear ( )
>9661	ArgumentList	 
>9662	Callee	animLayers . clear
>9663	MemberAccess	animLayers . clear
>9664	Identifier	clear
>9665	Identifier	animLayers
>9666	ExpressionStatement	 
>9667	CallExpression	stopAnimation ( )
>9668	ArgumentList	 
>9669	Callee	stopAnimation
>9670	Identifier	stopAnimation
>9671	ExpressionStatement	 
>9672	AssignmentExpr	loaded = false
>9673	Identifier	false
>9674	Identifier	loaded
>9675	ExpressionStatement	 
>9676	AssignmentExpr	filenameLoaded = \"\"
>9677	PrimaryExpression	\"\"
>9678	Identifier	filenameLoaded
>9850	FunctionDef	SkeletalSprite 
>9851	ParameterList	int layer
>9852	Parameter	 
>9853	Identifier	layer
>9854	ParameterType	int
>9855	ReturnType	Animation *
>9856	CompoundStatement	 
>9857	ReturnStatement	 
>9858	ConditionalExpression	layer < animLayers . size ( ) ? animLayers [ layer ] . getCurrentAnimation ( ) 
>9859	Identifier	NULL
>9860	CallExpression	animLayers [ layer ] . getCurrentAnimation ( )
>9861	ArgumentList	 
>9862	Callee	animLayers [ layer ] . getCurrentAnimation
>9863	MemberAccess	animLayers [ layer ] . getCurrentAnimation
>9864	Identifier	getCurrentAnimation
>9865	ArrayIndexing	animLayers [ layer ]
>9866	Identifier	layer
>9867	Identifier	animLayers
>9868	Condition	layer < animLayers . size ( )
>9869	RelationalExpression	layer < animLayers . size ( )
>9870	CallExpression	animLayers . size ( )
>9871	ArgumentList	 
>9872	Callee	animLayers . size
>9873	MemberAccess	animLayers . size
>9874	Identifier	size
>9875	Identifier	animLayers
>9876	Identifier	layer
>9887	FunctionDef	SkeletalSprite 
>9888	ParameterList	float time , int layer
>9889	Parameter	 
>9890	Identifier	layer
>9891	ParameterType	int
>9892	Parameter	 
>9893	Identifier	time
>9894	ParameterType	float
>9895	ReturnType	void
>9896	CompoundStatement	 
>9897	IfStatement	if ( layer < animLayers . size ( ) )
>9898	ExpressionStatement	 
>9899	AssignmentExpr	animLayers [ layer ] . timer = time
>9900	Identifier	time
>9901	MemberAccess	animLayers [ layer ] . timer
>9902	Identifier	timer
>9903	ArrayIndexing	animLayers [ layer ]
>9904	Identifier	layer
>9905	Identifier	animLayers
>9906	Condition	 
>9907	RelationalExpression	layer < animLayers . size ( )
>9908	CallExpression	animLayers . size ( )
>9909	ArgumentList	 
>9910	Callee	animLayers . size
>9911	MemberAccess	animLayers . size
>9912	Identifier	size
>9913	Identifier	animLayers
>9914	Identifier	layer
>9925	FunctionDef	AnimationLayer 
>9926	ParameterList	 
>9927	ReturnType	void
>9928	CompoundStatement	 
>9929	ForStatement	for ( int i = 0 ; i < s -> bones . size ( ) ; i ++ )
>9930	CompoundStatement	 
>9931	IfStatement	if ( b -> segmentChain < 2 )
>9932	CompoundStatement	 
>9933	IfStatement	if ( ! c )
>9934	CompoundStatement	 
>9935	IfStatement	if ( bkey1 && bkey2 )
>9936	CompoundStatement	 
>9937	IfStatement	if ( ! animating && fallThru > 0 )
>9938	ElseStatement	else
>9939	CompoundStatement	 
>9940	IfStatement	if ( b -> animated == Bone 
>9941	CompoundStatement	 
>9942	ExpressionStatement	 
>9943	CallExpression	b -> setGridPoints ( b -> stripVert , b -> changeStrip )
>9944	ArgumentList	b -> stripVert
>9945	Argument	b -> changeStrip
>9946	PtrMemberAccess	b -> changeStrip
>9947	Identifier	changeStrip
>9948	Identifier	b
>9949	Argument	b -> stripVert
>9950	PtrMemberAccess	b -> stripVert
>9951	Identifier	stripVert
>9952	Identifier	b
>9953	Callee	b -> setGridPoints
>9954	PtrMemberAccess	b -> setGridPoints
>9955	Identifier	setGridPoints
>9956	Identifier	b
>9957	ForStatement	for ( int i = 0 ; i < b -> changeStrip . size ( ) ; i ++ )
>9958	CompoundStatement	 
>9959	ExpressionStatement	 
>9960	AssignmentExpr	b -> changeStrip [ i ] = Vector ( lerp ( bkey1 -> strip [ i ] . x , bkey2 -> strip [ i ] . x , dt , lerpType ) , \
>9961	CallExpression	Vector ( lerp ( bkey1 -> strip [ i ] . x , bkey2 -> strip [ i ] . x , dt , lerpType ) , lerp ( bkey1 -> strip [ \
>9962	ArgumentList	lerp ( bkey1 -> strip [ i ] . x , bkey2 -> strip [ i ] . x , dt , lerpType )
>9963	Argument	lerp ( bkey1 -> strip [ i ] . y , bkey2 -> strip [ i ] . y , dt , lerpType )
>9964	CallExpression	lerp ( bkey1 -> strip [ i ] . y , bkey2 -> strip [ i ] . y , dt , lerpType )
>9965	ArgumentList	bkey1 -> strip [ i ] . y
>9966	Argument	lerpType
>9967	Identifier	lerpType
>9968	Argument	dt
>9969	Identifier	dt
>9970	Argument	bkey2 -> strip [ i ] . y
>9971	MemberAccess	bkey2 -> strip [ i ] . y
>9972	Identifier	y
>9973	ArrayIndexing	bkey2 -> strip [ i ]
>9974	Identifier	i
>9975	PtrMemberAccess	bkey2 -> strip
>9976	Identifier	strip
>9977	Identifier	bkey2
>9978	Argument	bkey1 -> strip [ i ] . y
>9979	MemberAccess	bkey1 -> strip [ i ] . y
>9980	Identifier	y
>9981	ArrayIndexing	bkey1 -> strip [ i ]
>9982	Identifier	i
>9983	PtrMemberAccess	bkey1 -> strip
>9984	Identifier	strip
>9985	Identifier	bkey1
>9986	Callee	lerp
>9987	Identifier	lerp
>9988	Argument	lerp ( bkey1 -> strip [ i ] . x , bkey2 -> strip [ i ] . x , dt , lerpType )
>9989	CallExpression	lerp ( bkey1 -> strip [ i ] . x , bkey2 -> strip [ i ] . x , dt , lerpType )
>9990	ArgumentList	bkey1 -> strip [ i ] . x
>9991	Argument	lerpType
>9992	Identifier	lerpType
>9993	Argument	dt
>9994	Identifier	dt
>9995	Argument	bkey2 -> strip [ i ] . x
>9996	MemberAccess	bkey2 -> strip [ i ] . x
>9997	Identifier	x
>9998	ArrayIndexing	bkey2 -> strip [ i ]
>9999	Identifier	i
>10000	PtrMemberAccess	bkey2 -> strip
>10001	Identifier	strip
>10002	Identifier	bkey2
>10003	Argument	bkey1 -> strip [ i ] . x
>10004	MemberAccess	bkey1 -> strip [ i ] . x
>10005	Identifier	x
>10006	ArrayIndexing	bkey1 -> strip [ i ]
>10007	Identifier	i
>10008	PtrMemberAccess	bkey1 -> strip
>10009	Identifier	strip
>10010	Identifier	bkey1
>10011	Callee	lerp
>10012	Identifier	lerp
>10013	Callee	Vector
>10014	Identifier	Vector
>10015	ArrayIndexing	b -> changeStrip [ i ]
>10016	Identifier	i
>10017	PtrMemberAccess	b -> changeStrip
>10018	Identifier	changeStrip
>10019	Identifier	b
>10020	IncDecOp	 
>10021	IncDec	++
>10022	Identifier	i
>10023	Condition	 
>10024	RelationalExpression	i < b -> changeStrip . size ( )
>10025	CallExpression	b -> changeStrip . size ( )
>10026	ArgumentList	 
>10027	Callee	b -> changeStrip . size
>10028	MemberAccess	b -> changeStrip . size
>10029	Identifier	size
>10030	PtrMemberAccess	b -> changeStrip
>10031	Identifier	changeStrip
>10032	Identifier	b
>10033	Identifier	i
>10034	ForInit	 
>10035	IdentifierDeclStatement	int i = 0 ;
>10036	IdentifierDecl	i = 0
>10037	AssignmentExpr	i = 0
>10038	PrimaryExpression	0
>10039	Identifier	i
>10040	Identifier	i
>10041	IdentifierDeclType	int
>10042	IfStatement	if ( bkey1 -> strip . size ( ) < b -> changeStrip . size ( ) )
>10043	ExpressionStatement	 
>10044	CallExpression	bkey1 -> strip . resize ( b -> changeStrip . size ( ) )
>10045	ArgumentList	b -> changeStrip . size ( )
>10046	Argument	b -> changeStrip . size ( )
>10047	CallExpression	b -> changeStrip . size ( )
>10048	ArgumentList	 
>10049	Callee	b -> changeStrip . size
>10050	MemberAccess	b -> changeStrip . size
>10051	Identifier	size
>10052	PtrMemberAccess	b -> changeStrip
>10053	Identifier	changeStrip
>10054	Identifier	b
>10055	Callee	bkey1 -> strip . resize
>10056	MemberAccess	bkey1 -> strip . resize
>10057	Identifier	resize
>10058	PtrMemberAccess	bkey1 -> strip
>10059	Identifier	strip
>10060	Identifier	bkey1
>10061	Condition	 
>10062	RelationalExpression	bkey1 -> strip . size ( ) < b -> changeStrip . size ( )
>10063	CallExpression	b -> changeStrip . size ( )
>10064	ArgumentList	 
>10065	Callee	b -> changeStrip . size
>10066	MemberAccess	b -> changeStrip . size
>10067	Identifier	size
>10068	PtrMemberAccess	b -> changeStrip
>10069	Identifier	changeStrip
>10070	Identifier	b
>10071	CallExpression	bkey1 -> strip . size ( )
>10072	ArgumentList	 
>10073	Callee	bkey1 -> strip . size
>10074	MemberAccess	bkey1 -> strip . size
>10075	Identifier	size
>10076	PtrMemberAccess	bkey1 -> strip
>10077	Identifier	strip
>10078	Identifier	bkey1
>10079	IfStatement	if ( bkey2 -> strip . size ( ) < b -> changeStrip . size ( ) )
>10080	ExpressionStatement	 
>10081	CallExpression	bkey2 -> strip . resize ( b -> changeStrip . size ( ) )
>10082	ArgumentList	b -> changeStrip . size ( )
>10083	Argument	b -> changeStrip . size ( )
>10084	CallExpression	b -> changeStrip . size ( )
>10085	ArgumentList	 
>10086	Callee	b -> changeStrip . size
>10087	MemberAccess	b -> changeStrip . size
>10088	Identifier	size
>10089	PtrMemberAccess	b -> changeStrip
>10090	Identifier	changeStrip
>10091	Identifier	b
>10092	Callee	bkey2 -> strip . resize
>10093	MemberAccess	bkey2 -> strip . resize
>10094	Identifier	resize
>10095	PtrMemberAccess	bkey2 -> strip
>10096	Identifier	strip
>10097	Identifier	bkey2
>10098	Condition	 
>10099	RelationalExpression	bkey2 -> strip . size ( ) < b -> changeStrip . size ( )
>10100	CallExpression	b -> changeStrip . size ( )
>10101	ArgumentList	 
>10102	Callee	b -> changeStrip . size
>10103	MemberAccess	b -> changeStrip . size
>10104	Identifier	size
>10105	PtrMemberAccess	b -> changeStrip
>10106	Identifier	changeStrip
>10107	Identifier	b
>10108	CallExpression	bkey2 -> strip . size ( )
>10109	ArgumentList	 
>10110	Callee	bkey2 -> strip . size
>10111	MemberAccess	bkey2 -> strip . size
>10112	Identifier	size
>10113	PtrMemberAccess	bkey2 -> strip
>10114	Identifier	strip
>10115	Identifier	bkey2
>10116	Condition	 
>10117	AndExpression	b -> animated == Bone 
>10118	UnaryOp	! b -> changeStrip . empty ( )
>10119	CallExpression	b -> changeStrip . empty ( )
>10120	ArgumentList	 
>10121	Callee	b -> changeStrip . empty
>10122	MemberAccess	b -> changeStrip . empty
>10123	Identifier	empty
>10124	PtrMemberAccess	b -> changeStrip
>10125	Identifier	changeStrip
>10126	Identifier	b
>10127	UnaryOperator	!
>10128	EqualityExpression	b -> animated == Bone 
>10129	Identifier	Bone 
>10130	PtrMemberAccess	b -> animated
>10131	Identifier	animated
>10132	Identifier	b
>10133	IfStatement	if ( b -> animated == Bone 
>10134	CompoundStatement	 
>10135	ExpressionStatement	 
>10136	AssignmentExpr	b -> scale . y = lerp ( bkey1 -> sy , bkey2 -> sy , dt , lerpType )
>10137	CallExpression	lerp ( bkey1 -> sy , bkey2 -> sy , dt , lerpType )
>10138	ArgumentList	bkey1 -> sy
>10139	Argument	lerpType
>10140	Identifier	lerpType
>10141	Argument	dt
>10142	Identifier	dt
>10143	Argument	bkey2 -> sy
>10144	PtrMemberAccess	bkey2 -> sy
>10145	Identifier	sy
>10146	Identifier	bkey2
>10147	Argument	bkey1 -> sy
>10148	PtrMemberAccess	bkey1 -> sy
>10149	Identifier	sy
>10150	Identifier	bkey1
>10151	Callee	lerp
>10152	Identifier	lerp
>10153	MemberAccess	b -> scale . y
>10154	Identifier	y
>10155	PtrMemberAccess	b -> scale
>10156	Identifier	scale
>10157	Identifier	b
>10158	ExpressionStatement	 
>10159	AssignmentExpr	b -> scale . x = lerp ( bkey1 -> sx , bkey2 -> sx , dt , lerpType )
>10160	CallExpression	lerp ( bkey1 -> sx , bkey2 -> sx , dt , lerpType )
>10161	ArgumentList	bkey1 -> sx
>10162	Argument	lerpType
>10163	Identifier	lerpType
>10164	Argument	dt
>10165	Identifier	dt
>10166	Argument	bkey2 -> sx
>10167	PtrMemberAccess	bkey2 -> sx
>10168	Identifier	sx
>10169	Identifier	bkey2
>10170	Argument	bkey1 -> sx
>10171	PtrMemberAccess	bkey1 -> sx
>10172	Identifier	sx
>10173	Identifier	bkey1
>10174	Callee	lerp
>10175	Identifier	lerp
>10176	MemberAccess	b -> scale . x
>10177	Identifier	x
>10178	PtrMemberAccess	b -> scale
>10179	Identifier	scale
>10180	Identifier	b
>10181	Condition	 
>10182	AndExpression	b -> animated == Bone 
>10183	OrExpression	bkey1 -> doScale || bkey2 -> doScale
>10184	PtrMemberAccess	bkey2 -> doScale
>10185	Identifier	doScale
>10186	Identifier	bkey2
>10187	PtrMemberAccess	bkey1 -> doScale
>10188	Identifier	doScale
>10189	Identifier	bkey1
>10190	EqualityExpression	b -> animated == Bone 
>10191	Identifier	Bone 
>10192	PtrMemberAccess	b -> animated
>10193	Identifier	animated
>10194	Identifier	b
>10195	IfStatement	if ( b -> animated == Bone 
>10196	CompoundStatement	 
>10197	ExpressionStatement	 
>10198	AssignmentExpr	b -> rotation . z = lerp ( bkey1 -> rot , bkey2 -> rot , dt , lerpType )
>10199	CallExpression	lerp ( bkey1 -> rot , bkey2 -> rot , dt , lerpType )
>10200	ArgumentList	bkey1 -> rot
>10201	Argument	lerpType
>10202	Identifier	lerpType
>10203	Argument	dt
>10204	Identifier	dt
>10205	Argument	bkey2 -> rot
>10206	PtrMemberAccess	bkey2 -> rot
>10207	Identifier	rot
>10208	Identifier	bkey2
>10209	Argument	bkey1 -> rot
>10210	PtrMemberAccess	bkey1 -> rot
>10211	Identifier	rot
>10212	Identifier	bkey1
>10213	Callee	lerp
>10214	Identifier	lerp
>10215	MemberAccess	b -> rotation . z
>10216	Identifier	z
>10217	PtrMemberAccess	b -> rotation
>10218	Identifier	rotation
>10219	Identifier	b
>10220	Condition	 
>10221	OrExpression	b -> animated == Bone 
>10222	EqualityExpression	b -> animated == Bone 
>10223	Identifier	Bone 
>10224	PtrMemberAccess	b -> animated
>10225	Identifier	animated
>10226	Identifier	b
>10227	EqualityExpression	b -> animated == Bone 
>10228	Identifier	Bone 
>10229	PtrMemberAccess	b -> animated
>10230	Identifier	animated
>10231	Identifier	b
>10232	IfStatement	if ( b -> animated == Bone 
>10233	CompoundStatement	 
>10234	ExpressionStatement	 
>10235	AssignmentExpr	b -> position = Vector ( lerp ( bkey1 -> x , bkey2 -> x , dt , lerpType ) , lerp ( bkey1 -> y , bkey2 \
>10236	CallExpression	Vector ( lerp ( bkey1 -> x , bkey2 -> x , dt , lerpType ) , lerp ( bkey1 -> y , bkey2 -> y , dt , lerpType ) )
>10237	ArgumentList	lerp ( bkey1 -> x , bkey2 -> x , dt , lerpType )
>10238	Argument	lerp ( bkey1 -> y , bkey2 -> y , dt , lerpType )
>10239	CallExpression	lerp ( bkey1 -> y , bkey2 -> y , dt , lerpType )
>10240	ArgumentList	bkey1 -> y
>10241	Argument	lerpType
>10242	Identifier	lerpType
>10243	Argument	dt
>10244	Identifier	dt
>10245	Argument	bkey2 -> y
>10246	PtrMemberAccess	bkey2 -> y
>10247	Identifier	y
>10248	Identifier	bkey2
>10249	Argument	bkey1 -> y
>10250	PtrMemberAccess	bkey1 -> y
>10251	Identifier	y
>10252	Identifier	bkey1
>10253	Callee	lerp
>10254	Identifier	lerp
>10255	Argument	lerp ( bkey1 -> x , bkey2 -> x , dt , lerpType )
>10256	CallExpression	lerp ( bkey1 -> x , bkey2 -> x , dt , lerpType )
>10257	ArgumentList	bkey1 -> x
>10258	Argument	lerpType
>10259	Identifier	lerpType
>10260	Argument	dt
>10261	Identifier	dt
>10262	Argument	bkey2 -> x
>10263	PtrMemberAccess	bkey2 -> x
>10264	Identifier	x
>10265	Identifier	bkey2
>10266	Argument	bkey1 -> x
>10267	PtrMemberAccess	bkey1 -> x
>10268	Identifier	x
>10269	Identifier	bkey1
>10270	Callee	lerp
>10271	Identifier	lerp
>10272	Callee	Vector
>10273	Identifier	Vector
>10274	PtrMemberAccess	b -> position
>10275	Identifier	position
>10276	Identifier	b
>10277	Condition	 
>10278	OrExpression	b -> animated == Bone 
>10279	EqualityExpression	b -> animated == Bone 
>10280	Identifier	Bone 
>10281	PtrMemberAccess	b -> animated
>10282	Identifier	animated
>10283	Identifier	b
>10284	EqualityExpression	b -> animated == Bone 
>10285	Identifier	Bone 
>10286	PtrMemberAccess	b -> animated
>10287	Identifier	animated
>10288	Identifier	b
>10289	IdentifierDeclStatement	 
>10290	IdentifierDecl	lerpType = key2 -> lerpType
>10291	AssignmentExpr	lerpType = key2 -> lerpType
>10292	PtrMemberAccess	key2 -> lerpType
>10293	Identifier	lerpType
>10294	Identifier	key2
>10295	Identifier	lerpType
>10296	Identifier	lerpType
>10297	IdentifierDeclType	int
>10298	CompoundStatement	 
>10299	IfStatement	if ( b -> animated == Bone 
>10300	ExpressionStatement	 
>10301	AssignmentExpr	b -> rotation . z = rot
>10302	Identifier	rot
>10303	MemberAccess	b -> rotation . z
>10304	Identifier	z
>10305	PtrMemberAccess	b -> rotation
>10306	Identifier	rotation
>10307	Identifier	b
>10308	Condition	 
>10309	OrExpression	b -> animated == Bone 
>10310	EqualityExpression	b -> animated == Bone 
>10311	Identifier	Bone 
>10312	PtrMemberAccess	b -> animated
>10313	Identifier	animated
>10314	Identifier	b
>10315	EqualityExpression	b -> animated == Bone 
>10316	Identifier	Bone 
>10317	PtrMemberAccess	b -> animated
>10318	Identifier	animated
>10319	Identifier	b
>10320	IfStatement	if ( b -> animated == Bone 
>10321	ExpressionStatement	 
>10322	AssignmentExpr	b -> position = p
>10323	Identifier	p
>10324	PtrMemberAccess	b -> position
>10325	Identifier	position
>10326	Identifier	b
>10327	Condition	 
>10328	OrExpression	b -> animated == Bone 
>10329	EqualityExpression	b -> animated == Bone 
>10330	Identifier	Bone 
>10331	PtrMemberAccess	b -> animated
>10332	Identifier	animated
>10333	Identifier	b
>10334	EqualityExpression	b -> animated == Bone 
>10335	Identifier	Bone 
>10336	PtrMemberAccess	b -> animated
>10337	Identifier	animated
>10338	Identifier	b
>10339	ExpressionStatement	 
>10340	AssignmentExpr	rot = ( rot - b -> rotation . z ) * fallThru + b -> rotation . z
>10341	AdditiveExpression	( rot - b -> rotation . z ) * fallThru + b -> rotation . z
>10342	MemberAccess	b -> rotation . z
>10343	Identifier	z
>10344	PtrMemberAccess	b -> rotation
>10345	Identifier	rotation
>10346	Identifier	b
>10347	MultiplicativeExpression	( rot - b -> rotation . z ) * fallThru
>10348	Identifier	fallThru
>10349	AdditiveExpression	rot - b -> rotation . z
>10350	MemberAccess	b -> rotation . z
>10351	Identifier	z
>10352	PtrMemberAccess	b -> rotation
>10353	Identifier	rotation
>10354	Identifier	b
>10355	Identifier	rot
>10356	Identifier	rot
>10357	ExpressionStatement	 
>10358	AssignmentExpr	p = Vector ( ( p . x - b -> position . x ) * fallThru + b -> position . x , ( p . y - b -> position . \
>10359	CallExpression	Vector ( ( p . x - b -> position . x ) * fallThru + b -> position . x , ( p . y - b -> position . y ) * fallThru + \
>10360	ArgumentList	( p . x - b -> position . x ) * fallThru + b -> position . x
>10361	Argument	( p . y - b -> position . y ) * fallThru + b -> position . y
>10362	AdditiveExpression	( p . y - b -> position . y ) * fallThru + b -> position . y
>10363	MemberAccess	b -> position . y
>10364	Identifier	y
>10365	PtrMemberAccess	b -> position
>10366	Identifier	position
>10367	Identifier	b
>10368	MultiplicativeExpression	( p . y - b -> position . y ) * fallThru
>10369	Identifier	fallThru
>10370	AdditiveExpression	p . y - b -> position . y
>10371	MemberAccess	b -> position . y
>10372	Identifier	y
>10373	PtrMemberAccess	b -> position
>10374	Identifier	position
>10375	Identifier	b
>10376	MemberAccess	p . y
>10377	Identifier	y
>10378	Identifier	p
>10379	Argument	( p . x - b -> position . x ) * fallThru + b -> position . x
>10380	AdditiveExpression	( p . x - b -> position . x ) * fallThru + b -> position . x
>10381	MemberAccess	b -> position . x
>10382	Identifier	x
>10383	PtrMemberAccess	b -> position
>10384	Identifier	position
>10385	Identifier	b
>10386	MultiplicativeExpression	( p . x - b -> position . x ) * fallThru
>10387	Identifier	fallThru
>10388	AdditiveExpression	p . x - b -> position . x
>10389	MemberAccess	b -> position . x
>10390	Identifier	x
>10391	PtrMemberAccess	b -> position
>10392	Identifier	position
>10393	Identifier	b
>10394	MemberAccess	p . x
>10395	Identifier	x
>10396	Identifier	p
>10397	Callee	Vector
>10398	Identifier	Vector
>10399	Identifier	p
>10400	IdentifierDeclStatement	 
>10401	IdentifierDecl	rot = ( bkey2 -> rot - bkey1 -> rot ) * dt + bkey1 -> rot
>10402	AssignmentExpr	rot = ( bkey2 -> rot - bkey1 -> rot ) * dt + bkey1 -> rot
>10403	AdditiveExpression	( bkey2 -> rot - bkey1 -> rot ) * dt + bkey1 -> rot
>10404	PtrMemberAccess	bkey1 -> rot
>10405	Identifier	rot
>10406	Identifier	bkey1
>10407	MultiplicativeExpression	( bkey2 -> rot - bkey1 -> rot ) * dt
>10408	Identifier	dt
>10409	AdditiveExpression	bkey2 -> rot - bkey1 -> rot
>10410	PtrMemberAccess	bkey1 -> rot
>10411	Identifier	rot
>10412	Identifier	bkey1
>10413	PtrMemberAccess	bkey2 -> rot
>10414	Identifier	rot
>10415	Identifier	bkey2
>10416	Identifier	rot
>10417	Identifier	rot
>10418	IdentifierDeclType	float
>10419	IdentifierDeclStatement	 
>10420	IdentifierDecl	p = Vector ( ( bkey2 -> x - bkey1 -> x ) * dt + bkey1 -> x , ( bkey2 -> y - bkey1 -> y ) * dt + bkey1 -> y )
>10421	AssignmentExpr	p = Vector ( ( bkey2 -> x - bkey1 -> x ) * dt + bkey1 -> x , ( bkey2 -> y - bkey1 -> y ) * dt + bkey1 \
>10422	CallExpression	Vector ( ( bkey2 -> x - bkey1 -> x ) * dt + bkey1 -> x , ( bkey2 -> y - bkey1 -> y ) * dt + bkey1 -> y )
>10423	ArgumentList	( bkey2 -> x - bkey1 -> x ) * dt + bkey1 -> x
>10424	Argument	( bkey2 -> y - bkey1 -> y ) * dt + bkey1 -> y
>10425	AdditiveExpression	( bkey2 -> y - bkey1 -> y ) * dt + bkey1 -> y
>10426	PtrMemberAccess	bkey1 -> y
>10427	Identifier	y
>10428	Identifier	bkey1
>10429	MultiplicativeExpression	( bkey2 -> y - bkey1 -> y ) * dt
>10430	Identifier	dt
>10431	AdditiveExpression	bkey2 -> y - bkey1 -> y
>10432	PtrMemberAccess	bkey1 -> y
>10433	Identifier	y
>10434	Identifier	bkey1
>10435	PtrMemberAccess	bkey2 -> y
>10436	Identifier	y
>10437	Identifier	bkey2
>10438	Argument	( bkey2 -> x - bkey1 -> x ) * dt + bkey1 -> x
>10439	AdditiveExpression	( bkey2 -> x - bkey1 -> x ) * dt + bkey1 -> x
>10440	PtrMemberAccess	bkey1 -> x
>10441	Identifier	x
>10442	Identifier	bkey1
>10443	MultiplicativeExpression	( bkey2 -> x - bkey1 -> x ) * dt
>10444	Identifier	dt
>10445	AdditiveExpression	bkey2 -> x - bkey1 -> x
>10446	PtrMemberAccess	bkey1 -> x
>10447	Identifier	x
>10448	Identifier	bkey1
>10449	PtrMemberAccess	bkey2 -> x
>10450	Identifier	x
>10451	Identifier	bkey2
>10452	Callee	Vector
>10453	Identifier	Vector
>10454	Identifier	p
>10455	Identifier	p
>10456	IdentifierDeclType	Vector
>10457	Condition	 
>10458	AndExpression	! animating && fallThru > 0
>10459	RelationalExpression	fallThru > 0
>10460	PrimaryExpression	0
>10461	Identifier	fallThru
>10462	UnaryOp	! animating
>10463	Identifier	animating
>10464	UnaryOperator	!
>10465	Condition	 
>10466	AndExpression	bkey1 && bkey2
>10467	Identifier	bkey2
>10468	Identifier	bkey1
>10469	IdentifierDeclStatement	 
>10470	IdentifierDecl	* bkey2 = key2 -> getBoneKeyframe ( idx )
>10471	AssignmentExpr	* bkey2 = key2 -> getBoneKeyframe ( idx )
>10472	CallExpression	key2 -> getBoneKeyframe ( idx )
>10473	ArgumentList	idx
>10474	Argument	idx
>10475	Identifier	idx
>10476	Callee	key2 -> getBoneKeyframe
>10477	PtrMemberAccess	key2 -> getBoneKeyframe
>10478	Identifier	getBoneKeyframe
>10479	Identifier	key2
>10480	Identifier	bkey2
>10481	Identifier	bkey2
>10482	IdentifierDeclType	BoneKeyframe *
>10483	IdentifierDeclStatement	 
>10484	IdentifierDecl	* bkey1 = key1 -> getBoneKeyframe ( idx )
>10485	AssignmentExpr	* bkey1 = key1 -> getBoneKeyframe ( idx )
>10486	CallExpression	key1 -> getBoneKeyframe ( idx )
>10487	ArgumentList	idx
>10488	Argument	idx
>10489	Identifier	idx
>10490	Callee	key1 -> getBoneKeyframe
>10491	PtrMemberAccess	key1 -> getBoneKeyframe
>10492	Identifier	getBoneKeyframe
>10493	Identifier	key1
>10494	Identifier	bkey1
>10495	Identifier	bkey1
>10496	IdentifierDeclType	BoneKeyframe *
>10497	Condition	 
>10498	UnaryOp	! c
>10499	Identifier	c
>10500	UnaryOperator	!
>10501	IfStatement	if ( b -> animated == Bone 
>10502	CompoundStatement	 
>10503	ExpressionStatement	 
>10504	AssignmentExpr	c = 1
>10505	PrimaryExpression	1
>10506	Identifier	c
>10507	Condition	 
>10508	EqualityExpression	b -> animated == Bone 
>10509	Identifier	Bone 
>10510	PtrMemberAccess	b -> animated
>10511	Identifier	animated
>10512	Identifier	b
>10513	IfStatement	if ( ! ignoreBones . empty ( ) )
>10514	ElseStatement	else
>10515	IfStatement	if ( ! includeBones . empty ( ) )
>10516	CompoundStatement	 
>10517	ForStatement	for ( int j = 0 ; j < includeBones . size ( ) ; j ++ )
>10518	CompoundStatement	 
>10519	IfStatement	if ( idx == includeBones [ j ] )
>10520	CompoundStatement	 
>10521	BreakStatement	 
>10522	ExpressionStatement	 
>10523	AssignmentExpr	c = 0
>10524	PrimaryExpression	0
>10525	Identifier	c
>10526	Condition	 
>10527	EqualityExpression	idx == includeBones [ j ]
>10528	ArrayIndexing	includeBones [ j ]
>10529	Identifier	j
>10530	Identifier	includeBones
>10531	Identifier	idx
>10532	IncDecOp	 
>10533	IncDec	++
>10534	Identifier	j
>10535	Condition	 
>10536	RelationalExpression	j < includeBones . size ( )
>10537	CallExpression	includeBones . size ( )
>10538	ArgumentList	 
>10539	Callee	includeBones . size
>10540	MemberAccess	includeBones . size
>10541	Identifier	size
>10542	Identifier	includeBones
>10543	Identifier	j
>10544	ForInit	 
>10545	IdentifierDeclStatement	int j = 0 ;
>10546	IdentifierDecl	j = 0
>10547	AssignmentExpr	j = 0
>10548	PrimaryExpression	0
>10549	Identifier	j
>10550	Identifier	j
>10551	IdentifierDeclType	int
>10552	ExpressionStatement	 
>10553	AssignmentExpr	c = 1
>10554	PrimaryExpression	1
>10555	Identifier	c
>10556	Condition	 
>10557	UnaryOp	! includeBones . empty ( )
>10558	CallExpression	includeBones . empty ( )
>10559	ArgumentList	 
>10560	Callee	includeBones . empty
>10561	MemberAccess	includeBones . empty
>10562	Identifier	empty
>10563	Identifier	includeBones
>10564	UnaryOperator	!
>10565	CompoundStatement	 
>10566	ForStatement	for ( int j = 0 ; j < ignoreBones . size ( ) ; j ++ )
>10567	CompoundStatement	 
>10568	IfStatement	if ( idx == ignoreBones [ j ] )
>10569	CompoundStatement	 
>10570	BreakStatement	 
>10571	ExpressionStatement	 
>10572	AssignmentExpr	c = 1
>10573	PrimaryExpression	1
>10574	Identifier	c
>10575	Condition	 
>10576	EqualityExpression	idx == ignoreBones [ j ]
>10577	ArrayIndexing	ignoreBones [ j ]
>10578	Identifier	j
>10579	Identifier	ignoreBones
>10580	Identifier	idx
>10581	IncDecOp	 
>10582	IncDec	++
>10583	Identifier	j
>10584	Condition	 
>10585	RelationalExpression	j < ignoreBones . size ( )
>10586	CallExpression	ignoreBones . size ( )
>10587	ArgumentList	 
>10588	Callee	ignoreBones . size
>10589	MemberAccess	ignoreBones . size
>10590	Identifier	size
>10591	Identifier	ignoreBones
>10592	Identifier	j
>10593	ForInit	 
>10594	IdentifierDeclStatement	int j = 0 ;
>10595	IdentifierDecl	j = 0
>10596	AssignmentExpr	j = 0
>10597	PrimaryExpression	0
>10598	Identifier	j
>10599	Identifier	j
>10600	IdentifierDeclType	int
>10601	Condition	 
>10602	UnaryOp	! ignoreBones . empty ( )
>10603	CallExpression	ignoreBones . empty ( )
>10604	ArgumentList	 
>10605	Callee	ignoreBones . empty
>10606	MemberAccess	ignoreBones . empty
>10607	Identifier	empty
>10608	Identifier	ignoreBones
>10609	UnaryOperator	!
>10610	ExpressionStatement	 
>10611	AssignmentExpr	c = 0
>10612	PrimaryExpression	0
>10613	Identifier	c
>10614	Condition	 
>10615	RelationalExpression	b -> segmentChain < 2
>10616	PrimaryExpression	2
>10617	PtrMemberAccess	b -> segmentChain
>10618	Identifier	segmentChain
>10619	Identifier	b
>10620	IfStatement	if ( b -> segmentChain == 1 )
>10621	CompoundStatement	 
>10622	ExpressionStatement	 
>10623	CallExpression	b -> updateSegments ( )
>10624	ArgumentList	 
>10625	Callee	b -> updateSegments
>10626	PtrMemberAccess	b -> updateSegments
>10627	Identifier	updateSegments
>10628	Identifier	b
>10629	Condition	 
>10630	EqualityExpression	b -> segmentChain == 1
>10631	PrimaryExpression	1
>10632	PtrMemberAccess	b -> segmentChain
>10633	Identifier	segmentChain
>10634	Identifier	b
>10635	IdentifierDeclStatement	 
>10636	IdentifierDecl	* b = s -> bones [ i ]
>10637	AssignmentExpr	* b = s -> bones [ i ]
>10638	ArrayIndexing	s -> bones [ i ]
>10639	Identifier	i
>10640	PtrMemberAccess	s -> bones
>10641	Identifier	bones
>10642	Identifier	s
>10643	Identifier	b
>10644	Identifier	b
>10645	IdentifierDeclType	Bone *
>10646	IdentifierDeclStatement	 
>10647	IdentifierDecl	idx = s -> bones [ i ] -> boneIdx
>10648	AssignmentExpr	idx = s -> bones [ i ] -> boneIdx
>10649	PtrMemberAccess	s -> bones [ i ] -> boneIdx
>10650	Identifier	boneIdx
>10651	ArrayIndexing	s -> bones [ i ]
>10652	Identifier	i
>10653	PtrMemberAccess	s -> bones
>10654	Identifier	bones
>10655	Identifier	s
>10656	Identifier	idx
>10657	Identifier	idx
>10658	IdentifierDeclType	int
>10659	IncDecOp	 
>10660	IncDec	++
>10661	Identifier	i
>10662	Condition	 
>10663	RelationalExpression	i < s -> bones . size ( )
>10664	CallExpression	s -> bones . size ( )
>10665	ArgumentList	 
>10666	Callee	s -> bones . size
>10667	MemberAccess	s -> bones . size
>10668	Identifier	size
>10669	PtrMemberAccess	s -> bones
>10670	Identifier	bones
>10671	Identifier	s
>10672	Identifier	i
>10673	ForInit	 
>10674	IdentifierDeclStatement	int i = 0 ;
>10675	IdentifierDecl	i = 0
>10676	AssignmentExpr	i = 0
>10677	PrimaryExpression	0
>10678	Identifier	i
>10679	Identifier	i
>10680	IdentifierDeclType	int
>10681	IdentifierDeclStatement	 
>10682	IdentifierDecl	c = 0
>10683	AssignmentExpr	c = 0
>10684	PrimaryExpression	0
>10685	Identifier	c
>10686	Identifier	c
>10687	IdentifierDeclType	bool
>10688	ExpressionStatement	 
>10689	AssignmentExpr	lastNewKey = key2
>10690	Identifier	key2
>10691	Identifier	lastNewKey
>10692	IfStatement	if ( lastNewKey != key2 )
>10693	CompoundStatement	 
>10694	IfStatement	if ( s -> animKeyNotify )
>10695	CompoundStatement	 
>10696	ExpressionStatement	 
>10697	CallExpression	s -> animKeyNotify -> onAnimationKeyPassed ( getCurrentAnimation ( ) -> getSkeletalKeyframeIndex ( lastNewKey ) )
>10698	ArgumentList	getCurrentAnimation ( ) -> getSkeletalKeyframeIndex ( lastNewKey )
>10699	Argument	getCurrentAnimation ( ) -> getSkeletalKeyframeIndex ( lastNewKey )
>10700	CallExpression	getCurrentAnimation ( ) -> getSkeletalKeyframeIndex ( lastNewKey )
>10701	ArgumentList	lastNewKey
>10702	Argument	lastNewKey
>10703	Identifier	lastNewKey
>10704	Callee	getCurrentAnimation ( ) -> getSkeletalKeyframeIndex
>10705	PtrMemberAccess	getCurrentAnimation ( ) -> getSkeletalKeyframeIndex
>10706	Identifier	getSkeletalKeyframeIndex
>10707	CallExpression	getCurrentAnimation ( )
>10708	ArgumentList	 
>10709	Callee	getCurrentAnimation
>10710	Identifier	getCurrentAnimation
>10711	Callee	s -> animKeyNotify -> onAnimationKeyPassed
>10712	PtrMemberAccess	s -> animKeyNotify -> onAnimationKeyPassed
>10713	Identifier	onAnimationKeyPassed
>10714	PtrMemberAccess	s -> animKeyNotify
>10715	Identifier	animKeyNotify
>10716	Identifier	s
>10717	Condition	 
>10718	PtrMemberAccess	s -> animKeyNotify
>10719	Identifier	animKeyNotify
>10720	Identifier	s
>10721	IfStatement	if ( ! key2 -> commands . empty ( ) )
>10722	CompoundStatement	 
>10723	ForStatement	for ( int i = 0 ; i < key2 -> commands . size ( ) ; i ++ )
>10724	CompoundStatement	 
>10725	ExpressionStatement	 
>10726	CallExpression	key2 -> commands [ i ] . run ( )
>10727	ArgumentList	 
>10728	Callee	key2 -> commands [ i ] . run
>10729	MemberAccess	key2 -> commands [ i ] . run
>10730	Identifier	run
>10731	ArrayIndexing	key2 -> commands [ i ]
>10732	Identifier	i
>10733	PtrMemberAccess	key2 -> commands
>10734	Identifier	commands
>10735	Identifier	key2
>10736	IncDecOp	 
>10737	IncDec	++
>10738	Identifier	i
>10739	Condition	 
>10740	RelationalExpression	i < key2 -> commands . size ( )
>10741	CallExpression	key2 -> commands . size ( )
>10742	ArgumentList	 
>10743	Callee	key2 -> commands . size
>10744	MemberAccess	key2 -> commands . size
>10745	Identifier	size
>10746	PtrMemberAccess	key2 -> commands
>10747	Identifier	commands
>10748	Identifier	key2
>10749	Identifier	i
>10750	ForInit	 
>10751	IdentifierDeclStatement	int i = 0 ;
>10752	IdentifierDecl	i = 0
>10753	AssignmentExpr	i = 0
>10754	PrimaryExpression	0
>10755	Identifier	i
>10756	Identifier	i
>10757	IdentifierDeclType	int
>10758	Condition	 
>10759	UnaryOp	! key2 -> commands . empty ( )
>10760	CallExpression	key2 -> commands . empty ( )
>10761	ArgumentList	 
>10762	Callee	key2 -> commands . empty
>10763	MemberAccess	key2 -> commands . empty
>10764	Identifier	empty
>10765	PtrMemberAccess	key2 -> commands
>10766	Identifier	commands
>10767	Identifier	key2
>10768	UnaryOperator	!
>10769	IfStatement	if ( ! key2 -> sound . empty ( ) )
>10770	CompoundStatement	 
>10771	ExpressionStatement	 
>10772	CallExpression	core -> sound -> playSfx ( key2 -> sound )
>10773	ArgumentList	key2 -> sound
>10774	Argument	key2 -> sound
>10775	PtrMemberAccess	key2 -> sound
>10776	Identifier	sound
>10777	Identifier	key2
>10778	Callee	core -> sound -> playSfx
>10779	PtrMemberAccess	core -> sound -> playSfx
>10780	Identifier	playSfx
>10781	PtrMemberAccess	core -> sound
>10782	Identifier	sound
>10783	Identifier	core
>10784	Condition	 
>10785	UnaryOp	! key2 -> sound . empty ( )
>10786	CallExpression	key2 -> sound . empty ( )
>10787	ArgumentList	 
>10788	Callee	key2 -> sound . empty
>10789	MemberAccess	key2 -> sound . empty
>10790	Identifier	empty
>10791	PtrMemberAccess	key2 -> sound
>10792	Identifier	sound
>10793	Identifier	key2
>10794	UnaryOperator	!
>10795	Condition	 
>10796	EqualityExpression	lastNewKey != key2
>10797	Identifier	key2
>10798	Identifier	lastNewKey
>10799	IfStatement	if ( diff != 0 )
>10800	ElseStatement	else
>10801	ExpressionStatement	 
>10802	AssignmentExpr	dt = 0
>10803	PrimaryExpression	0
>10804	Identifier	dt
>10805	ExpressionStatement	 
>10806	AssignmentExpr	dt = ( timer - t1 ) / ( t2 - t1 )
>10807	MultiplicativeExpression	( timer - t1 ) / ( t2 - t1 )
>10808	AdditiveExpression	t2 - t1
>10809	Identifier	t1
>10810	Identifier	t2
>10811	AdditiveExpression	timer - t1
>10812	Identifier	t1
>10813	Identifier	timer
>10814	Identifier	dt
>10815	Condition	 
>10816	EqualityExpression	diff != 0
>10817	PrimaryExpression	0
>10818	Identifier	diff
>10819	IdentifierDeclStatement	 
>10820	IdentifierDecl	dt
>10821	Identifier	dt
>10822	IdentifierDeclType	float
>10823	IdentifierDeclStatement	 
>10824	IdentifierDecl	diff = t2 - t1
>10825	AssignmentExpr	diff = t2 - t1
>10826	AdditiveExpression	t2 - t1
>10827	Identifier	t1
>10828	Identifier	t2
>10829	Identifier	diff
>10830	Identifier	diff
>10831	IdentifierDeclType	float
>10832	IdentifierDeclStatement	 
>10833	IdentifierDecl	t2 = key2 -> t
>10834	AssignmentExpr	t2 = key2 -> t
>10835	PtrMemberAccess	key2 -> t
>10836	Identifier	t
>10837	Identifier	key2
>10838	Identifier	t2
>10839	Identifier	t2
>10840	IdentifierDeclType	float
>10841	IdentifierDeclStatement	 
>10842	IdentifierDecl	t1 = key1 -> t
>10843	AssignmentExpr	t1 = key1 -> t
>10844	PtrMemberAccess	key1 -> t
>10845	Identifier	t
>10846	Identifier	key1
>10847	Identifier	t1
>10848	Identifier	t1
>10849	IdentifierDeclType	float
>10850	IfStatement	if ( ! key1 || ! key2 )
>10851	ReturnStatement	 
>10852	Condition	 
>10853	OrExpression	! key1 || ! key2
>10854	UnaryOp	! key2
>10855	Identifier	key2
>10856	UnaryOperator	!
>10857	UnaryOp	! key1
>10858	Identifier	key1
>10859	UnaryOperator	!
>10860	IdentifierDeclStatement	 
>10861	IdentifierDecl	* key2 = getCurrentAnimation ( ) -> getNextKeyframe ( timer )
>10862	AssignmentExpr	* key2 = getCurrentAnimation ( ) -> getNextKeyframe ( timer )
>10863	CallExpression	getCurrentAnimation ( ) -> getNextKeyframe ( timer )
>10864	ArgumentList	timer
>10865	Argument	timer
>10866	Identifier	timer
>10867	Callee	getCurrentAnimation ( ) -> getNextKeyframe
>10868	PtrMemberAccess	getCurrentAnimation ( ) -> getNextKeyframe
>10869	Identifier	getNextKeyframe
>10870	CallExpression	getCurrentAnimation ( )
>10871	ArgumentList	 
>10872	Callee	getCurrentAnimation
>10873	Identifier	getCurrentAnimation
>10874	Identifier	key2
>10875	Identifier	key2
>10876	IdentifierDeclType	SkeletalKeyframe *
>10877	IdentifierDeclStatement	 
>10878	IdentifierDecl	* key1 = getCurrentAnimation ( ) -> getPrevKeyframe ( timer )
>10879	AssignmentExpr	* key1 = getCurrentAnimation ( ) -> getPrevKeyframe ( timer )
>10880	CallExpression	getCurrentAnimation ( ) -> getPrevKeyframe ( timer )
>10881	ArgumentList	timer
>10882	Argument	timer
>10883	Identifier	timer
>10884	Callee	getCurrentAnimation ( ) -> getPrevKeyframe
>10885	PtrMemberAccess	getCurrentAnimation ( ) -> getPrevKeyframe
>10886	Identifier	getPrevKeyframe
>10887	CallExpression	getCurrentAnimation ( )
>10888	ArgumentList	 
>10889	Callee	getCurrentAnimation
>10890	Identifier	getCurrentAnimation
>10891	Identifier	key1
>10892	Identifier	key1
>10893	IdentifierDeclType	SkeletalKeyframe *
>10894	IfStatement	if ( ! animating && ! ( & s -> animLayers [ 0 ] == this ) && fallThru == 0 )
>10895	ReturnStatement	 
>10896	Condition	 
>10897	AndExpression	! animating && ! ( & s -> animLayers [ 0 ] == this ) && fallThru == 0
>10898	AndExpression	! ( & s -> animLayers [ 0 ] == this ) && fallThru == 0
>10899	EqualityExpression	fallThru == 0
>10900	PrimaryExpression	0
>10901	Identifier	fallThru
>10902	UnaryOp	! ( & s -> animLayers [ 0 ] == this )
>10903	EqualityExpression	& s -> animLayers [ 0 ] == this
>10904	Identifier	this
>10905	UnaryOp	& s -> animLayers [ 0 ]
>10906	ArrayIndexing	s -> animLayers [ 0 ]
>10907	PrimaryExpression	0
>10908	PtrMemberAccess	s -> animLayers
>10909	Identifier	animLayers
>10910	Identifier	s
>10911	UnaryOperator	&
>10912	UnaryOperator	!
>10913	UnaryOp	! animating
>10914	Identifier	animating
>10915	UnaryOperator	!
>11037	FunctionDef	SkeletalSprite 
>11038	ParameterList	bool f
>11039	Parameter	 
>11040	Identifier	f
>11041	ParameterType	bool
>11042	ReturnType	void
>11043	CompoundStatement	 
>11044	ExpressionStatement	 
>11045	AssignmentExpr	frozen = f
>11046	Identifier	f
>11047	Identifier	frozen
>11053	FunctionDef	SkeletalSprite 
>11054	ParameterList	 
>11055	ReturnType	void
>11056	CompoundStatement	 
>11057	IfStatement	if ( ! frozen )
>11058	CompoundStatement	 
>11059	ForStatement	for ( int i = 0 ; i < animLayers . size ( ) ; i ++ )
>11060	CompoundStatement	 
>11061	ExpressionStatement	 
>11062	CallExpression	animLayers [ i ] . updateBones ( )
>11063	ArgumentList	 
>11064	Callee	animLayers [ i ] . updateBones
>11065	MemberAccess	animLayers [ i ] . updateBones
>11066	Identifier	updateBones
>11067	ArrayIndexing	animLayers [ i ]
>11068	Identifier	i
>11069	Identifier	animLayers
>11070	IncDecOp	 
>11071	IncDec	++
>11072	Identifier	i
>11073	Condition	 
>11074	RelationalExpression	i < animLayers . size ( )
>11075	CallExpression	animLayers . size ( )
>11076	ArgumentList	 
>11077	Callee	animLayers . size
>11078	MemberAccess	animLayers . size
>11079	Identifier	size
>11080	Identifier	animLayers
>11081	Identifier	i
>11082	ForInit	 
>11083	IdentifierDeclStatement	int i = 0 ;
>11084	IdentifierDecl	i = 0
>11085	AssignmentExpr	i = 0
>11086	PrimaryExpression	0
>11087	Identifier	i
>11088	Identifier	i
>11089	IdentifierDeclType	int
>11090	Condition	 
>11091	UnaryOp	! frozen
>11092	Identifier	frozen
>11093	UnaryOperator	!
>11103	FunctionDef	SkeletalSprite 
>11104	ParameterList	int layer
>11105	Parameter	 
>11106	Identifier	layer
>11107	ParameterType	int
>11108	ReturnType	bool
>11109	CompoundStatement	 
>11110	ReturnStatement	 
>11111	MemberAccess	animLayers [ layer ] . animating
>11112	Identifier	animating
>11113	ArrayIndexing	animLayers [ layer ]
>11114	Identifier	layer
>11115	Identifier	animLayers
>11124	FunctionDef	SkeletalSprite 
>11125	ParameterList	float t , int layer
>11126	Parameter	 
>11127	Identifier	layer
>11128	ParameterType	int
>11129	Parameter	 
>11130	Identifier	t
>11131	ParameterType	float
>11132	ReturnType	void
>11133	CompoundStatement	 
>11134	ExpressionStatement	 
>11135	AssignmentExpr	animLayers [ layer ] . timeMultiplier = t
>11136	Identifier	t
>11137	MemberAccess	animLayers [ layer ] . timeMultiplier
>11138	Identifier	timeMultiplier
>11139	ArrayIndexing	animLayers [ layer ]
>11140	Identifier	layer
>11141	Identifier	animLayers
>11151	FunctionDef	SkeletalSprite 
>11152	ParameterList	bool mouseBased
>11153	Parameter	 
>11154	Identifier	mouseBased
>11155	ParameterType	bool
>11156	ReturnType	Bone *
>11157	CompoundStatement	 
>11158	ReturnStatement	 
>11159	PrimaryExpression	0
>11160	IfStatement	if ( ! bones . empty ( ) && selectedBone >= 0 && selectedBone < bones . size ( ) )
>11161	ReturnStatement	 
>11162	ArrayIndexing	bones [ selectedBone ]
>11163	Identifier	selectedBone
>11164	Identifier	bones
>11165	Condition	 
>11166	AndExpression	! bones . empty ( ) && selectedBone >= 0 && selectedBone < bones . size ( )
>11167	AndExpression	selectedBone >= 0 && selectedBone < bones . size ( )
>11168	RelationalExpression	selectedBone < bones . size ( )
>11169	CallExpression	bones . size ( )
>11170	ArgumentList	 
>11171	Callee	bones . size
>11172	MemberAccess	bones . size
>11173	Identifier	size
>11174	Identifier	bones
>11175	Identifier	selectedBone
>11176	RelationalExpression	selectedBone >= 0
>11177	PrimaryExpression	0
>11178	Identifier	selectedBone
>11179	UnaryOp	! bones . empty ( )
>11180	CallExpression	bones . empty ( )
>11181	ArgumentList	 
>11182	Callee	bones . empty
>11183	MemberAccess	bones . empty
>11184	Identifier	empty
>11185	Identifier	bones
>11186	UnaryOperator	!
>11187	IfStatement	if ( mouseBased )
>11188	CompoundStatement	 
>11189	ReturnStatement	 
>11190	Identifier	b
>11191	IfStatement	if ( b )
>11192	CompoundStatement	 
>11193	ExpressionStatement	 
>11194	AssignmentExpr	b -> color = Vector ( 1 , 0 , 0 )
>11195	CallExpression	Vector ( 1 , 0 , 0 )
>11196	ArgumentList	1
>11197	Argument	0
>11198	PrimaryExpression	0
>11199	Argument	0
>11200	PrimaryExpression	0
>11201	Argument	1
>11202	PrimaryExpression	1
>11203	Callee	Vector
>11204	Identifier	Vector
>11205	PtrMemberAccess	b -> color
>11206	Identifier	color
>11207	Identifier	b
>11208	Condition	 
>11209	Identifier	b
>11210	ForStatement	for ( int i = 0 ; i < bones . size ( ) ; i ++ )
>11211	CompoundStatement	 
>11212	IfStatement	if ( bones [ i ] -> renderQuad || core -> getShiftState ( ) )
>11213	CompoundStatement	 
>11214	IfStatement	if ( bones [ i ] -> renderQuad && bones [ i ] -> isCoordinateInsideWorld ( p ) )
>11215	CompoundStatement	 
>11216	IfStatement	if ( dist <= closestDist )
>11217	CompoundStatement	 
>11218	ExpressionStatement	 
>11219	AssignmentExpr	selectedBone = i
>11220	Identifier	i
>11221	Identifier	selectedBone
>11222	ExpressionStatement	 
>11223	AssignmentExpr	b = bones [ i ]
>11224	ArrayIndexing	bones [ i ]
>11225	Identifier	i
>11226	Identifier	bones
>11227	Identifier	b
>11228	ExpressionStatement	 
>11229	AssignmentExpr	closestDist = dist
>11230	Identifier	dist
>11231	Identifier	closestDist
>11232	Condition	 
>11233	RelationalExpression	dist <= closestDist
>11234	Identifier	closestDist
>11235	Identifier	dist
>11236	IdentifierDeclStatement	 
>11237	IdentifierDecl	dist = ( bones [ i ] -> getWorldPosition ( ) - p ) . getSquaredLength2D ( )
>11238	AssignmentExpr	dist = ( bones [ i ] -> getWorldPosition ( ) - p ) . getSquaredLength2D ( )
>11239	CallExpression	( bones [ i ] -> getWorldPosition ( ) - p ) . getSquaredLength2D ( )
>11240	ArgumentList	 
>11241	Callee	( bones [ i ] -> getWorldPosition ( ) - p ) . getSquaredLength2D
>11242	MemberAccess	( bones [ i ] -> getWorldPosition ( ) - p ) . getSquaredLength2D
>11243	Identifier	getSquaredLength2D
>11244	AdditiveExpression	bones [ i ] -> getWorldPosition ( ) - p
>11245	Identifier	p
>11246	CallExpression	bones [ i ] -> getWorldPosition ( )
>11247	ArgumentList	 
>11248	Callee	bones [ i ] -> getWorldPosition
>11249	PtrMemberAccess	bones [ i ] -> getWorldPosition
>11250	Identifier	getWorldPosition
>11251	ArrayIndexing	bones [ i ]
>11252	Identifier	i
>11253	Identifier	bones
>11254	Identifier	dist
>11255	Identifier	dist
>11256	IdentifierDeclType	float
>11257	Condition	 
>11258	AndExpression	bones [ i ] -> renderQuad && bones [ i ] -> isCoordinateInsideWorld ( p )
>11259	CallExpression	bones [ i ] -> isCoordinateInsideWorld ( p )
>11260	ArgumentList	p
>11261	Argument	p
>11262	Identifier	p
>11263	Callee	bones [ i ] -> isCoordinateInsideWorld
>11264	PtrMemberAccess	bones [ i ] -> isCoordinateInsideWorld
>11265	Identifier	isCoordinateInsideWorld
>11266	ArrayIndexing	bones [ i ]
>11267	Identifier	i
>11268	Identifier	bones
>11269	PtrMemberAccess	bones [ i ] -> renderQuad
>11270	Identifier	renderQuad
>11271	ArrayIndexing	bones [ i ]
>11272	Identifier	i
>11273	Identifier	bones
>11274	ExpressionStatement	 
>11275	AssignmentExpr	bones [ i ] -> color = Vector ( 1 , 1 , 1 )
>11276	CallExpression	Vector ( 1 , 1 , 1 )
>11277	ArgumentList	1
>11278	Argument	1
>11279	PrimaryExpression	1
>11280	Argument	1
>11281	PrimaryExpression	1
>11282	Argument	1
>11283	PrimaryExpression	1
>11284	Callee	Vector
>11285	Identifier	Vector
>11286	PtrMemberAccess	bones [ i ] -> color
>11287	Identifier	color
>11288	ArrayIndexing	bones [ i ]
>11289	Identifier	i
>11290	Identifier	bones
>11291	Condition	 
>11292	OrExpression	bones [ i ] -> renderQuad || core -> getShiftState ( )
>11293	CallExpression	core -> getShiftState ( )
>11294	ArgumentList	 
>11295	Callee	core -> getShiftState
>11296	PtrMemberAccess	core -> getShiftState
>11297	Identifier	getShiftState
>11298	Identifier	core
>11299	PtrMemberAccess	bones [ i ] -> renderQuad
>11300	Identifier	renderQuad
>11301	ArrayIndexing	bones [ i ]
>11302	Identifier	i
>11303	Identifier	bones
>11304	IncDecOp	 
>11305	IncDec	++
>11306	Identifier	i
>11307	Condition	 
>11308	RelationalExpression	i < bones . size ( )
>11309	CallExpression	bones . size ( )
>11310	ArgumentList	 
>11311	Callee	bones . size
>11312	MemberAccess	bones . size
>11313	Identifier	size
>11314	Identifier	bones
>11315	Identifier	i
>11316	ForInit	 
>11317	IdentifierDeclStatement	int i = 0 ;
>11318	IdentifierDecl	i = 0
>11319	AssignmentExpr	i = 0
>11320	PrimaryExpression	0
>11321	Identifier	i
>11322	Identifier	i
>11323	IdentifierDeclType	int
>11324	IdentifierDeclStatement	 
>11325	IdentifierDecl	p = core -> mouse . position
>11326	AssignmentExpr	p = core -> mouse . position
>11327	MemberAccess	core -> mouse . position
>11328	Identifier	position
>11329	PtrMemberAccess	core -> mouse
>11330	Identifier	mouse
>11331	Identifier	core
>11332	Identifier	p
>11333	Identifier	p
>11334	IdentifierDeclType	Vector
>11335	IdentifierDeclStatement	 
>11336	IdentifierDecl	* b = 0
>11337	AssignmentExpr	* b = 0
>11338	PrimaryExpression	0
>11339	Identifier	b
>11340	Identifier	b
>11341	IdentifierDeclType	Bone *
>11342	IdentifierDeclStatement	 
>11343	IdentifierDecl	closestDist = HUGE_VALF
>11344	AssignmentExpr	closestDist = HUGE_VALF
>11345	Identifier	HUGE_VALF
>11346	Identifier	HUGE_VALF
>11347	Identifier	closestDist
>11348	IdentifierDeclType	float
>11349	Condition	 
>11350	Identifier	mouseBased
>11351	IfStatement	if ( ! loaded )
>11352	ReturnStatement	 
>11353	PrimaryExpression	0
>11354	Condition	 
>11355	UnaryOp	! loaded
>11356	Identifier	loaded
>11357	UnaryOperator	!
>11391	FunctionDef	SkeletalSprite 
>11392	ParameterList	 
>11393	ReturnType	void
>11394	CompoundStatement	 
>11395	IfStatement	if ( b )
>11396	ExpressionStatement	 
>11397	AssignmentExpr	b -> color = Vector ( 0.5 , 0.5 , 1 )
>11398	CallExpression	Vector ( 0.5 , 0.5 , 1 )
>11399	ArgumentList	0.5
>11400	Argument	1
>11401	PrimaryExpression	1
>11402	Argument	0.5
>11403	PrimaryExpression	0.5
>11404	Argument	0.5
>11405	PrimaryExpression	0.5
>11406	Callee	Vector
>11407	Identifier	Vector
>11408	PtrMemberAccess	b -> color
>11409	Identifier	color
>11410	Identifier	b
>11411	Condition	 
>11412	Identifier	b
>11413	IdentifierDeclStatement	 
>11414	IdentifierDecl	* b = bones [ selectedBone ]
>11415	AssignmentExpr	* b = bones [ selectedBone ]
>11416	ArrayIndexing	bones [ selectedBone ]
>11417	Identifier	selectedBone
>11418	Identifier	bones
>11419	Identifier	b
>11420	Identifier	b
>11421	IdentifierDeclType	Bone *
>11422	ForStatement	for ( int i = 0 ; i < bones . size ( ) ; i ++ )
>11423	CompoundStatement	 
>11424	ExpressionStatement	 
>11425	AssignmentExpr	bones [ i ] -> color = Vector ( 1 , 1 , 1 )
>11426	CallExpression	Vector ( 1 , 1 , 1 )
>11427	ArgumentList	1
>11428	Argument	1
>11429	PrimaryExpression	1
>11430	Argument	1
>11431	PrimaryExpression	1
>11432	Argument	1
>11433	PrimaryExpression	1
>11434	Callee	Vector
>11435	Identifier	Vector
>11436	PtrMemberAccess	bones [ i ] -> color
>11437	Identifier	color
>11438	ArrayIndexing	bones [ i ]
>11439	Identifier	i
>11440	Identifier	bones
>11441	IncDecOp	 
>11442	IncDec	++
>11443	Identifier	i
>11444	Condition	 
>11445	RelationalExpression	i < bones . size ( )
>11446	CallExpression	bones . size ( )
>11447	ArgumentList	 
>11448	Callee	bones . size
>11449	MemberAccess	bones . size
>11450	Identifier	size
>11451	Identifier	bones
>11452	Identifier	i
>11453	ForInit	 
>11454	IdentifierDeclStatement	int i = 0 ;
>11455	IdentifierDecl	i = 0
>11456	AssignmentExpr	i = 0
>11457	PrimaryExpression	0
>11458	Identifier	i
>11459	Identifier	i
>11460	IdentifierDeclType	int
>11478	FunctionDef	SkeletalSprite 
>11479	ParameterList	int b
>11480	Parameter	 
>11481	Identifier	b
>11482	ParameterType	int
>11483	ReturnType	void
>11484	CompoundStatement	 
>11485	ExpressionStatement	 
>11486	CallExpression	updateSelectedBoneColor ( )
>11487	ArgumentList	 
>11488	Callee	updateSelectedBoneColor
>11489	Identifier	updateSelectedBoneColor
>11490	ExpressionStatement	 
>11491	AssignmentExpr	selectedBone = b
>11492	Identifier	b
>11493	Identifier	selectedBone
>11499	FunctionDef	SkeletalSprite 
>11500	ParameterList	 
>11501	ReturnType	void
>11502	CompoundStatement	 
>11503	ExpressionStatement	 
>11504	CallExpression	updateSelectedBoneColor ( )
>11505	ArgumentList	 
>11506	Callee	updateSelectedBoneColor
>11507	Identifier	updateSelectedBoneColor
>11508	IfStatement	if ( selectedBone >= bones . size ( ) )
>11509	ExpressionStatement	 
>11510	AssignmentExpr	selectedBone = 0
>11511	PrimaryExpression	0
>11512	Identifier	selectedBone
>11513	Condition	 
>11514	RelationalExpression	selectedBone >= bones . size ( )
>11515	CallExpression	bones . size ( )
>11516	ArgumentList	 
>11517	Callee	bones . size
>11518	MemberAccess	bones . size
>11519	Identifier	size
>11520	Identifier	bones
>11521	Identifier	selectedBone
>11522	ExpressionStatement	 
>11523	IncDecOp	selectedBone ++
>11524	IncDec	++
>11525	Identifier	selectedBone
>11532	FunctionDef	SkeletalSprite 
>11533	ParameterList	 
>11534	ReturnType	void
>11535	CompoundStatement	 
>11536	ExpressionStatement	 
>11537	CallExpression	updateSelectedBoneColor ( )
>11538	ArgumentList	 
>11539	Callee	updateSelectedBoneColor
>11540	Identifier	updateSelectedBoneColor
>11541	IfStatement	if ( selectedBone < 0 )
>11542	ExpressionStatement	 
>11543	AssignmentExpr	selectedBone = bones . size ( ) - 1
>11544	AdditiveExpression	bones . size ( ) - 1
>11545	PrimaryExpression	1
>11546	CallExpression	bones . size ( )
>11547	ArgumentList	 
>11548	Callee	bones . size
>11549	MemberAccess	bones . size
>11550	Identifier	size
>11551	Identifier	bones
>11552	Identifier	selectedBone
>11553	Condition	 
>11554	RelationalExpression	selectedBone < 0
>11555	PrimaryExpression	0
>11556	Identifier	selectedBone
>11557	ExpressionStatement	 
>11558	IncDecOp	selectedBone --
>11559	IncDec	--
>11560	Identifier	selectedBone
<11=20,19,12
<12=16,13
<13=15,14
<16=18,17
<20=62,48,32,23,21
<21=22
<23=30,24
<24=25
<25=27,26
<27=29,28
<30=31
<32=33
<33=47,46,34
<34=45,35
<35=43,36
<36=41,39,37
<37=38
<39=40
<41=42
<43=44
<48=53,49
<49=50
<50=52,51
<53=54
<54=61,55
<55=57,56
<57=58
<58=60,59
<62=63
<63=75,74,64
<64=73,65
<65=69,66
<66=67
<67=68
<69=70
<70=72,71
<92=95,94,93
<95=107,103,96
<96=97
<97=99,98
<99=100
<100=102,101
<103=104
<104=106,105
<107=121,112,109,108
<109=111,110
<112=113
<113=120,114
<114=116,115
<116=117
<117=119,118
<121=122
<122=123
<123=133,132,124
<124=131,125
<125=127,126
<127=128
<128=130,129
<141=147,146,142
<142=143
<143=145,144
<147=171,162,154,148
<148=149
<149=151,150
<151=153,152
<154=155
<155=159,156
<156=158,157
<159=161,160
<162=163
<163=170,169,164
<164=168,165
<165=167,166
<171=173,172
<173=174
<174=176,175
<186=188,187
<188=242,238,234,230,226,215,207,203,199,193,189
<189=190
<190=192,191
<193=194
<194=198,195
<195=197,196
<199=200
<200=202,201
<203=204
<204=206,205
<207=208
<208=214,209
<209=213,210
<210=212,211
<215=216
<216=225,217
<217=223,218
<218=221,219
<219=220
<221=222
<223=224
<226=227
<227=229,228
<230=231
<231=233,232
<234=235
<235=237,236
<238=239
<239=241,240
<242=243
<243=247,244
<244=245
<245=246
<247=248
<269=272,271,270
<272=332,280,273
<273=274
<274=276,275
<276=277
<277=279,278
<280=324,315,312,281
<281=301,290,282
<282=283
<283=285,284
<285=287,286
<287=289,288
<290=291
<291=295,292
<292=293
<293=294
<295=296
<296=298,297
<298=300,299
<301=302
<302=306,303
<303=304
<304=305
<306=307
<307=309,308
<309=311,310
<312=314,313
<315=316
<316=323,317
<317=319,318
<319=320
<320=322,321
<324=325
<325=326
<326=331,330,327
<327=329,328
<332=333
<333=335,334
<335=336
<348=354,353,349
<349=350
<350=352,351
<354=402,396,387,366,355
<355=356
<356=363,357
<357=359,358
<359=360
<360=362,361
<363=365,364
<366=367
<367=378,368
<368=376,369
<369=370
<370=372,371
<372=373
<373=375,374
<376=377
<378=379
<379=381,380
<381=383,382
<383=384
<384=386,385
<387=388
<388=392,389
<389=390
<390=391
<392=393
<393=395,394
<396=397
<397=399,398
<399=401,400
<402=403
<403=407,404
<404=405
<405=406
<407=408
<408=410,409
<428=437,436,429
<429=433,430
<430=432,431
<433=435,434
<437=464,460,456,447,438
<438=439
<439=445,440
<440=443,441
<441=442
<443=444
<445=446
<447=448
<448=452,449
<449=450
<450=451
<452=453
<453=455,454
<456=457
<457=459,458
<460=461
<461=463,462
<464=486,476,465
<465=466
<466=467
<467=468
<468=474,469
<469=472,470
<470=471
<472=473
<474=475
<476=477
<477=478
<478=484,479
<479=482,480
<480=481
<482=483
<484=485
<486=487
<487=489,488
<500=506,505,501
<501=502
<502=504,503
<506=540,533,524,518,509,507
<507=508
<509=510
<510=516,511
<511=514,512
<512=513
<514=515
<516=517
<518=519
<519=521,520
<521=523,522
<524=525
<525=529,526
<526=527
<527=528
<529=530
<530=532,531
<533=534
<534=539,538,535
<535=537,536
<540=541
<541=543,542
<554=560,559,555
<555=556
<556=558,557
<560=653,561
<561=640,631,628,562
<562=619,567,563
<563=564
<564=566,565
<567=615,592,568
<568=569
<569=570
<570=586,579,571
<571=572
<572=573
<573=574
<574=576,575
<576=578,577
<579=580
<580=581
<581=583,582
<583=585,584
<586=587
<587=589,588
<589=591,590
<592=593
<593=609,602,594
<594=595
<595=596
<596=597
<597=599,598
<599=601,600
<602=603
<603=604
<604=606,605
<606=608,607
<609=610
<610=612,611
<612=614,613
<615=616
<616=618,617
<619=620
<620=627,626,621
<621=625,622
<622=624,623
<628=630,629
<631=632
<632=639,633
<633=635,634
<635=636
<636=638,637
<640=641
<641=642
<642=652,651,643
<643=650,644
<644=646,645
<646=647
<647=649,648
<653=654
<654=659,658,655
<655=657,656
<673=679,678,674
<674=675
<675=677,676
<679=680
<680=681
<681=683,682
<689=701,700,690
<690=697,694,691
<691=693,692
<694=696,695
<697=699,698
<701=714,708,702
<702=703
<703=705,704
<705=707,706
<708=709
<709=711,710
<711=713,712
<714=715
<715=717,716
<717=719,718
<731=740,739,732
<732=736,733
<733=735,734
<736=738,737
<740=945,833,741
<741=827,742
<742=796,765,743
<743=744
<744=759,745
<745=748,746
<746=747
<748=749
<749=757,750
<750=755,753,751
<751=752
<753=754
<755=756
<757=758
<759=760
<760=762,761
<762=764,763
<765=784,766
<766=775,767
<767=768
<768=770,769
<770=772,771
<772=774,773
<775=776
<776=778,777
<778=779
<779=781,780
<781=783,782
<784=785
<785=789,786
<786=788,787
<789=791,790
<791=793,792
<793=795,794
<796=815,797
<797=806,798
<798=799
<799=801,800
<801=803,802
<803=805,804
<806=807
<807=809,808
<809=810
<810=812,811
<812=814,813
<815=816
<816=820,817
<817=819,818
<820=822,821
<822=824,823
<824=826,825
<827=828
<828=832,829
<829=831,830
<833=931,879,834
<834=835
<835=865,836
<836=857,837
<837=838
<838=855,839
<839=844,842,840
<840=841
<842=843
<844=845
<845=853,846
<846=851,849,847
<847=848
<849=850
<851=852
<853=854
<855=856
<857=858
<858=862,859
<859=861,860
<862=864,863
<865=866
<866=873,867
<867=871,868
<868=869
<869=870
<871=872
<873=875,874
<875=876
<876=878,877
<879=924,915,906,900,880
<880=881
<881=898,882
<882=887,885,883
<883=884
<885=886
<887=888
<888=896,889
<889=894,892,890
<890=891
<892=893
<894=895
<896=897
<898=899
<900=901
<901=903,902
<903=905,904
<906=907
<907=914,913,908
<908=912,909
<909=911,910
<915=916
<916=920,917
<917=918
<918=919
<920=921
<921=923,922
<924=925
<925=930,929,926
<926=928,927
<931=932
<932=939,933
<933=937,934
<934=935
<935=936
<937=938
<939=941,940
<941=942
<942=944,943
<945=946
<946=953,952,947
<947=951,948
<948=950,949
<971=974,973,972
<974=975
<975=1176,976
<976=977
<977=1172,1080,978
<978=979
<979=1066,980
<980=1058,1054,1051,981
<981=1047,993,982
<982=983
<983=991,984
<984=987,985
<985=986
<987=988
<988=990,989
<991=992
<993=1043,1017,994
<994=995
<995=996
<996=1016,997
<997=1006,998
<998=1000,999
<1000=1001
<1001=1003,1002
<1003=1005,1004
<1006=1008,1007
<1008=1009
<1009=1011,1010
<1011=1015,1012
<1012=1014,1013
<1017=1031,1018
<1018=1019
<1019=1030,1020
<1020=1029,1021
<1021=1023,1022
<1023=1024
<1024=1026,1025
<1026=1028,1027
<1031=1032
<1032=1042,1041,1033
<1033=1040,1034
<1034=1038,1035
<1035=1036
<1036=1037
<1038=1039
<1043=1044
<1044=1046,1045
<1047=1048
<1048=1050,1049
<1051=1053,1052
<1054=1055
<1055=1057,1056
<1058=1059
<1059=1060
<1060=1065,1064,1061
<1061=1063,1062
<1066=1067
<1067=1079,1078,1068
<1068=1077,1069
<1069=1071,1070
<1071=1073,1072
<1073=1074
<1074=1076,1075
<1080=1081
<1081=1164,1155,1152,1082
<1082=1148,1094,1083
<1083=1084
<1084=1092,1085
<1085=1088,1086
<1086=1087
<1088=1089
<1089=1091,1090
<1092=1093
<1094=1144,1118,1095
<1095=1096
<1096=1097
<1097=1117,1098
<1098=1107,1099
<1099=1101,1100
<1101=1102
<1102=1104,1103
<1104=1106,1105
<1107=1109,1108
<1109=1110
<1110=1112,1111
<1112=1116,1113
<1113=1115,1114
<1118=1132,1119
<1119=1120
<1120=1131,1121
<1121=1130,1122
<1122=1124,1123
<1124=1125
<1125=1127,1126
<1127=1129,1128
<1132=1133
<1133=1143,1142,1134
<1134=1141,1135
<1135=1139,1136
<1136=1137
<1137=1138
<1139=1140
<1144=1145
<1145=1147,1146
<1148=1149
<1149=1151,1150
<1152=1154,1153
<1155=1156
<1156=1163,1157
<1157=1159,1158
<1159=1160
<1160=1162,1161
<1164=1165
<1165=1166
<1166=1171,1170,1167
<1167=1169,1168
<1172=1173
<1173=1175,1174
<1176=1177
<1177=1186,1178
<1178=1185,1179
<1179=1181,1180
<1181=1182
<1182=1184,1183
<1186=1188,1187
<1210=1219,1218,1211
<1211=1215,1212
<1212=1214,1213
<1215=1217,1216
<1219=1326,1322,1316,1220
<1220=1312,1301,1221
<1221=1222
<1222=1297,1288,1223
<1223=1224
<1224=1284,1275,1225
<1225=1226
<1226=1271,1262,1227
<1227=1228
<1228=1258,1249,1229
<1229=1230
<1230=1245,1241,1231
<1231=1232
<1232=1237,1233
<1233=1234
<1234=1236,1235
<1237=1238
<1238=1240,1239
<1241=1242
<1242=1244,1243
<1245=1246
<1246=1248,1247
<1249=1254,1250
<1250=1251
<1251=1253,1252
<1254=1255
<1255=1257,1256
<1258=1259
<1259=1261,1260
<1262=1267,1263
<1263=1264
<1264=1266,1265
<1267=1268
<1268=1270,1269
<1271=1272
<1272=1274,1273
<1275=1280,1276
<1276=1277
<1277=1279,1278
<1280=1281
<1281=1283,1282
<1284=1285
<1285=1287,1286
<1288=1293,1289
<1289=1290
<1290=1292,1291
<1293=1294
<1294=1296,1295
<1297=1298
<1298=1300,1299
<1301=1308,1302
<1302=1303
<1303=1307,1304
<1304=1306,1305
<1308=1309
<1309=1311,1310
<1312=1313
<1313=1315,1314
<1316=1317
<1317=1319,1318
<1319=1321,1320
<1322=1323
<1323=1325,1324
<1326=1327
<1327=1329,1328
<1347=1350,1349,1348
<1350=1351
<1351=1459,1352
<1352=1457,1445,1444,1442,1432,1431,1429,1404,1403,1401,1379,1378,1376,1354,1353
<1354=1365,1355
<1355=1363,1356
<1356=1357
<1357=1359,1358
<1359=1360
<1360=1362,1361
<1363=1364
<1365=1366
<1366=1375,1374,1367
<1367=1373,1368
<1368=1370,1369
<1370=1372,1371
<1376=1377
<1379=1390,1380
<1380=1388,1381
<1381=1382
<1382=1384,1383
<1384=1385
<1385=1387,1386
<1388=1389
<1390=1391
<1391=1400,1399,1392
<1392=1398,1393
<1393=1395,1394
<1395=1397,1396
<1401=1402
<1404=1418,1405
<1405=1416,1406
<1406=1407
<1407=1408
<1408=1412,1409
<1409=1410
<1410=1411
<1412=1413
<1413=1415,1414
<1416=1417
<1418=1419
<1419=1428,1427,1420
<1420=1426,1421
<1421=1423,1422
<1423=1425,1424
<1429=1430
<1432=1433
<1433=1434
<1434=1438,1435
<1435=1436
<1436=1437
<1438=1439
<1439=1441,1440
<1442=1443
<1445=1446
<1446=1447
<1447=1451,1448
<1448=1449
<1449=1450
<1451=1452
<1452=1454,1453
<1454=1456,1455
<1457=1458
<1459=1460
<1477=1479,1478
<1479=1520,1516,1512,1508,1504,1500,1496,1492,1488,1484,1480
<1480=1481
<1481=1483,1482
<1484=1485
<1485=1487,1486
<1488=1489
<1489=1491,1490
<1492=1493
<1493=1495,1494
<1496=1497
<1497=1499,1498
<1500=1501
<1501=1503,1502
<1504=1505
<1505=1507,1506
<1508=1509
<1509=1511,1510
<1512=1513
<1513=1515,1514
<1516=1517
<1517=1519,1518
<1520=1521
<1521=1523,1522
<1539=1545,1544,1540
<1540=1541
<1541=1543,1542
<1545=1546
<1546=1547
<1547=1549,1548
<1555=1561,1560,1556
<1556=1557
<1557=1559,1558
<1561=1562
<1562=1563
<1563=1569,1564
<1564=1567,1565
<1565=1566
<1567=1568
<1569=1570
<1576=1585,1584,1577
<1577=1581,1578
<1578=1580,1579
<1581=1583,1582
<1585=1678,1671,1664,1614,1586
<1586=1610,1587
<1587=1606,1600,1588
<1588=1589
<1589=1598,1590
<1590=1591
<1591=1592
<1592=1594,1593
<1594=1595
<1595=1597,1596
<1598=1599
<1600=1601
<1601=1605,1602
<1602=1604,1603
<1606=1607
<1607=1609,1608
<1610=1611
<1611=1613,1612
<1614=1656,1645,1642,1615
<1615=1616
<1616=1632,1617
<1617=1623,1619,1618
<1619=1620
<1620=1622,1621
<1623=1624
<1624=1630,1625
<1625=1628,1626
<1626=1627
<1628=1629
<1630=1631
<1632=1633
<1633=1635,1634
<1635=1637,1636
<1637=1639,1638
<1639=1641,1640
<1642=1644,1643
<1645=1646
<1646=1655,1647
<1647=1649,1648
<1649=1650
<1650=1652,1651
<1652=1654,1653
<1656=1657
<1657=1658
<1658=1663,1662,1659
<1659=1661,1660
<1664=1665
<1665=1670,1669,1666
<1666=1668,1667
<1671=1672
<1672=1676,1673
<1673=1674
<1674=1675
<1676=1677
<1678=1679
<1679=1684,1683,1680
<1680=1682,1681
<1705=1714,1713,1706
<1706=1710,1707
<1707=1709,1708
<1710=1712,1711
<1714=1749,1745,1741,1737,1733,1727,1715
<1715=1716
<1716=1726,1717
<1717=1719,1718
<1719=1720
<1720=1722,1721
<1722=1724,1723
<1724=1725
<1727=1728
<1728=1730,1729
<1730=1732,1731
<1733=1734
<1734=1736,1735
<1737=1738
<1738=1740,1739
<1741=1742
<1742=1744,1743
<1745=1746
<1746=1748,1747
<1749=1759,1750
<1750=1755,1751
<1751=1752
<1752=1754,1753
<1755=1756
<1756=1758,1757
<1759=1760
<1760=1770,1761
<1761=1763,1762
<1763=1769,1764
<1764=1766,1765
<1766=1768,1767
<1795=1804,1803,1796
<1796=1800,1797
<1797=1799,1798
<1800=1802,1801
<1804=1816,1812,1805
<1805=1806
<1806=1810,1807
<1807=1808
<1808=1809
<1810=1811
<1812=1813
<1813=1815,1814
<1816=1817
<1817=1819,1818
<1827=1839,1838,1828
<1828=1835,1832,1829
<1829=1831,1830
<1832=1834,1833
<1835=1837,1836
<1839=1959,1952,1842,1840
<1840=1841
<1842=1943,1843
<1843=1939,1933,1927,1923,1919,1907,1898,1882,1844
<1844=1880,1845
<1845=1846
<1846=1874,1859,1847
<1847=1848
<1848=1849
<1849=1858,1850
<1850=1852,1851
<1852=1854,1853
<1854=1855
<1855=1857,1856
<1859=1860
<1860=1873,1861
<1861=1863,1862
<1863=1867,1864
<1864=1866,1865
<1867=1869,1868
<1869=1870
<1870=1872,1871
<1874=1875
<1875=1879,1876
<1876=1878,1877
<1880=1881
<1882=1883
<1883=1897,1896,1884
<1884=1895,1885
<1885=1889,1886
<1886=1887
<1887=1888
<1889=1890
<1890=1892,1891
<1892=1894,1893
<1898=1899
<1899=1905,1900
<1900=1903,1901
<1901=1902
<1903=1904
<1905=1906
<1907=1908
<1908=1918,1909
<1909=1911,1910
<1911=1912
<1912=1914,1913
<1914=1916,1915
<1916=1917
<1919=1920
<1920=1922,1921
<1923=1924
<1924=1926,1925
<1927=1928
<1928=1930,1929
<1930=1932,1931
<1933=1934
<1934=1938,1935
<1935=1937,1936
<1939=1940
<1940=1942,1941
<1943=1944
<1944=1950,1945
<1945=1948,1946
<1946=1947
<1948=1949
<1950=1951
<1952=1953
<1953=1958,1957,1954
<1954=1956,1955
<1959=1960
<1960=1964,1961
<1961=1962
<1962=1963
<1964=1965
<1992=1998,1997,1993
<1993=1994
<1994=1996,1995
<1998=1999
<1999=2000
<2000=2002,2001
<2002=2004,2003
<2012=2015,2014,2013
<2015=2073,2024,2016
<2016=2017
<2017=2023,2018
<2018=2020,2019
<2020=2022,2021
<2024=2058,2025
<2025=2054,2040,2028,2026
<2026=2027
<2028=2029
<2029=2038,2030
<2030=2031
<2031=2032
<2032=2034,2033
<2034=2035
<2035=2037,2036
<2038=2039
<2040=2041
<2041=2053,2042
<2042=2052,2043
<2043=2049,2044
<2044=2048,2045
<2045=2047,2046
<2049=2051,2050
<2054=2055
<2055=2057,2056
<2058=2059
<2059=2070,2060
<2060=2069,2061
<2061=2063,2062
<2063=2064
<2064=2066,2065
<2066=2068,2067
<2070=2072,2071
<2073=2078,2074
<2074=2075
<2075=2077,2076
<2078=2079
<2079=2083,2080
<2080=2082,2081
<2098=2107,2106,2099
<2099=2103,2100
<2100=2102,2101
<2103=2105,2104
<2107=2334,2327,2318,2314,2308,2175,2164,2160,2146,2139,2133,2127,2116,2110,2108
<2108=2109
<2110=2111
<2111=2113,2112
<2113=2115,2114
<2116=2117
<2117=2121,2118
<2118=2119
<2119=2120
<2121=2122
<2122=2124,2123
<2124=2126,2125
<2127=2128
<2128=2130,2129
<2130=2132,2131
<2133=2134
<2134=2138,2135
<2135=2137,2136
<2139=2142,2140
<2140=2141
<2142=2143
<2143=2145,2144
<2146=2147
<2147=2159,2158,2148
<2148=2157,2149
<2149=2153,2150
<2150=2151
<2151=2152
<2153=2154
<2154=2156,2155
<2160=2161
<2161=2163,2162
<2164=2165
<2165=2169,2166
<2166=2167
<2167=2168
<2169=2170
<2170=2172,2171
<2172=2174,2173
<2175=2300,2289,2286,2176
<2176=2282,2270,2256,2242,2228,2216,2202,2188,2177
<2177=2178
<2178=2182,2179
<2179=2180
<2180=2181
<2182=2183
<2183=2185,2184
<2185=2187,2186
<2188=2189
<2189=2199,2190
<2190=2192,2191
<2192=2194,2193
<2194=2196,2195
<2196=2198,2197
<2199=2201,2200
<2202=2203
<2203=2213,2204
<2204=2206,2205
<2206=2208,2207
<2208=2210,2209
<2210=2212,2211
<2213=2215,2214
<2216=2217
<2217=2225,2218
<2218=2220,2219
<2220=2222,2221
<2222=2224,2223
<2225=2227,2226
<2228=2229
<2229=2239,2230
<2230=2232,2231
<2232=2234,2233
<2234=2236,2235
<2236=2238,2237
<2239=2241,2240
<2242=2243
<2243=2253,2244
<2244=2246,2245
<2246=2248,2247
<2248=2250,2249
<2250=2252,2251
<2253=2255,2254
<2256=2257
<2257=2267,2258
<2258=2260,2259
<2260=2262,2261
<2262=2264,2263
<2264=2266,2265
<2267=2269,2268
<2270=2271
<2271=2279,2272
<2272=2274,2273
<2274=2276,2275
<2276=2278,2277
<2279=2281,2280
<2282=2283
<2283=2285,2284
<2286=2288,2287
<2289=2290
<2290=2299,2291
<2291=2293,2292
<2293=2294
<2294=2296,2295
<2296=2298,2297
<2300=2301
<2301=2302
<2302=2307,2306,2303
<2303=2305,2304
<2308=2309
<2309=2311,2310
<2311=2313,2312
<2314=2315
<2315=2317,2316
<2318=2319
<2319=2321,2320
<2321=2322
<2322=2324,2323
<2324=2326,2325
<2327=2330,2328
<2328=2329
<2330=2331
<2331=2333,2332
<2334=2335
<2335=2347,2346,2336
<2336=2345,2337
<2337=2341,2338
<2338=2339
<2339=2340
<2341=2342
<2342=2344,2343
<2398=2401,2400,2399
<2401=2430,2402
<2402=2421,2403
<2403=2412,2408,2404
<2404=2405
<2405=2407,2406
<2408=2409
<2409=2411,2410
<2412=2413
<2413=2419,2414
<2414=2417,2415
<2415=2416
<2417=2418
<2419=2420
<2421=2422
<2422=2429,2423
<2423=2425,2424
<2425=2426
<2426=2428,2427
<2430=2431
<2431=2433,2432
<2442=2445,2444,2443
<2445=2446
<2446=2447
<2452=2455,2454,2453
<2455=2456
<2456=2457
<2462=2465,2464,2463
<2465=2466
<2466=2467
<2467=2469,2468
<2469=2470
<2470=2472,2471
<2478=2484,2483,2479
<2479=2480
<2480=2482,2481
<2484=2491,2485
<2485=2486
<2486=2490,2487
<2487=2489,2488
<2491=2494,2492
<2492=2493
<2494=2495
<2495=2504,2496
<2496=2503,2497
<2497=2499,2498
<2499=2500
<2500=2502,2501
<2504=2506,2505
<2515=2518,2517,2516
<2518=2601,2594,2587,2573,2524,2519
<2519=2520
<2520=2522,2521
<2522=2523
<2524=2565,2561,2558,2525
<2525=2547,2526
<2526=2527
<2527=2535,2528
<2528=2530,2529
<2530=2534,2531
<2531=2533,2532
<2535=2537,2536
<2537=2546,2538
<2538=2540,2539
<2540=2542,2541
<2542=2543
<2543=2545,2544
<2547=2548
<2548=2554,2549
<2549=2550
<2550=2551
<2551=2553,2552
<2554=2555
<2555=2557,2556
<2558=2560,2559
<2561=2562
<2562=2564,2563
<2565=2566
<2566=2567
<2567=2572,2571,2568
<2568=2570,2569
<2573=2574
<2574=2586,2585,2575
<2575=2584,2576
<2576=2578,2577
<2578=2580,2579
<2580=2581
<2581=2583,2582
<2587=2588
<2588=2590,2589
<2590=2591
<2591=2593,2592
<2594=2595
<2595=2600,2599,2596
<2596=2598,2597
<2601=2602
<2602=2607,2606,2603
<2603=2605,2604
<2626=2629,2628,2627
<2629=2630
<2630=2631
<2631=2633,2632
<2633=2635,2634
<2635=2636
<2643=2646,2645,2644
<2646=2649,2647
<2647=2648
<2649=2663,2650
<2650=2651
<2651=2662,2652
<2652=2661,2653
<2653=2655,2654
<2655=2657,2656
<2657=2658
<2658=2660,2659
<2663=2664
<2664=2671,2665
<2665=2667,2666
<2667=2668
<2668=2670,2669
<2680=2683,2682,2681
<2683=2686,2684
<2684=2685
<2686=2693,2687
<2687=2688
<2688=2692,2689
<2689=2691,2690
<2693=2694
<2694=2701,2695
<2695=2697,2696
<2697=2698
<2698=2700,2699
<2708=2711,2710,2709
<2711=2712
<2712=2793,2784,2781,2713
<2713=2714
<2714=2773,2762,2759,2715
<2715=2716
<2716=2745,2717
<2717=2734,2724,2718
<2718=2719
<2719=2721,2720
<2721=2723,2722
<2724=2725
<2725=2729,2726
<2726=2728,2727
<2729=2733,2730
<2730=2732,2731
<2734=2735
<2735=2744,2743,2736
<2736=2742,2737
<2737=2741,2738
<2738=2740,2739
<2745=2746
<2746=2754,2747
<2747=2749,2748
<2749=2753,2750
<2750=2752,2751
<2754=2756,2755
<2756=2758,2757
<2759=2761,2760
<2762=2763
<2763=2772,2764
<2764=2766,2765
<2766=2768,2767
<2768=2769
<2769=2771,2770
<2773=2774
<2774=2775
<2775=2780,2779,2776
<2776=2778,2777
<2781=2783,2782
<2784=2785
<2785=2792,2786
<2786=2788,2787
<2788=2789
<2789=2791,2790
<2793=2794
<2794=2795
<2795=2800,2799,2796
<2796=2798,2797
<2813=2822,2821,2814
<2814=2818,2815
<2815=2817,2816
<2818=2820,2819
<2822=2898,2891,2884,2861,2833,2823
<2823=2824
<2824=2826,2825
<2826=2828,2827
<2828=2832,2829
<2829=2831,2830
<2833=2857,2848,2845,2834
<2834=2835
<2835=2841,2836
<2836=2837
<2837=2838
<2838=2840,2839
<2841=2842
<2842=2844,2843
<2845=2847,2846
<2848=2849
<2849=2856,2850
<2850=2852,2851
<2852=2853
<2853=2855,2854
<2857=2858
<2858=2860,2859
<2861=2880,2876,2873,2862
<2862=2863
<2863=2869,2864
<2864=2865
<2865=2866
<2866=2868,2867
<2869=2870
<2870=2872,2871
<2873=2875,2874
<2876=2877
<2877=2879,2878
<2880=2881
<2881=2883,2882
<2884=2885
<2885=2890,2889,2886
<2886=2888,2887
<2891=2892
<2892=2894,2893
<2894=2895
<2895=2897,2896
<2898=2899
<2899=2906,2905,2900
<2900=2904,2901
<2901=2903,2902
<2924=2930,2929,2925
<2925=2926
<2926=2928,2927
<2930=2998,2991,2984,2961,2931
<2931=2955,2946,2943,2932
<2932=2933
<2933=2939,2934
<2934=2935
<2935=2936
<2936=2938,2937
<2939=2940
<2940=2942,2941
<2943=2945,2944
<2946=2947
<2947=2954,2948
<2948=2950,2949
<2950=2951
<2951=2953,2952
<2955=2956
<2956=2960,2957
<2957=2959,2958
<2961=2980,2976,2973,2962
<2962=2963
<2963=2969,2964
<2964=2965
<2965=2966
<2966=2968,2967
<2969=2970
<2970=2972,2971
<2973=2975,2974
<2976=2977
<2977=2979,2978
<2980=2981
<2981=2983,2982
<2984=2985
<2985=2990,2989,2986
<2986=2988,2987
<2991=2992
<2992=2994,2993
<2994=2995
<2995=2997,2996
<2998=2999
<2999=3006,3005,3000
<3000=3004,3001
<3001=3003,3002
<3020=3026,3025,3021
<3021=3022
<3022=3024,3023
<3026=3031,3027
<3027=3028
<3028=3030,3029
<3031=3056,3047,3044,3032
<3032=3033
<3033=3036,3034
<3034=3035
<3036=3037
<3037=3039,3038
<3039=3043,3040
<3040=3042,3041
<3044=3046,3045
<3047=3048
<3048=3055,3049
<3049=3051,3050
<3051=3052
<3052=3054,3053
<3056=3057
<3057=3058
<3058=3063,3062,3059
<3059=3061,3060
<3073=3079,3078,3074
<3074=3075
<3075=3077,3076
<3079=3082,3080
<3080=3081
<3082=3112,3103,3100,3083
<3083=3084
<3084=3092,3085
<3085=3086
<3086=3087
<3087=3091,3088
<3088=3090,3089
<3092=3093
<3093=3095,3094
<3095=3097,3096
<3097=3099,3098
<3100=3102,3101
<3103=3104
<3104=3111,3105
<3105=3107,3106
<3107=3108
<3108=3110,3109
<3112=3113
<3113=3114
<3114=3119,3118,3115
<3115=3117,3116
<3132=3138,3137,3133
<3133=3134
<3134=3136,3135
<3138=3223,3184,3175,3154,3145,3139
<3139=3140
<3140=3144,3141
<3141=3143,3142
<3145=3150,3146
<3146=3147
<3147=3149,3148
<3150=3151
<3151=3153,3152
<3154=3166,3155
<3155=3156
<3156=3165,3157
<3157=3159,3158
<3159=3161,3160
<3161=3162
<3162=3164,3163
<3166=3167
<3167=3174,3168
<3168=3170,3169
<3170=3171
<3171=3173,3172
<3175=3178,3176
<3176=3177
<3178=3179
<3179=3183,3180
<3180=3182,3181
<3184=3208,3204,3201,3185
<3185=3186
<3186=3193,3187
<3187=3189,3188
<3189=3190
<3190=3192,3191
<3193=3194
<3194=3200,3195
<3195=3197,3196
<3197=3199,3198
<3201=3203,3202
<3204=3205
<3205=3207,3206
<3208=3209
<3209=3210
<3210=3222,3221,3211
<3211=3220,3212
<3212=3214,3213
<3214=3216,3215
<3216=3217
<3217=3219,3218
<3223=3224
<3224=3231,3230,3225
<3225=3229,3226
<3226=3228,3227
<3245=3251,3250,3246
<3246=3247
<3247=3249,3248
<3251=3334,3297,3288,3267,3258,3252
<3252=3253
<3253=3257,3254
<3254=3256,3255
<3258=3263,3259
<3259=3260
<3260=3262,3261
<3263=3264
<3264=3266,3265
<3267=3279,3268
<3268=3269
<3269=3278,3270
<3270=3272,3271
<3272=3274,3273
<3274=3275
<3275=3277,3276
<3279=3280
<3280=3287,3281
<3281=3283,3282
<3283=3284
<3284=3286,3285
<3288=3291,3289
<3289=3290
<3291=3292
<3292=3296,3293
<3293=3295,3294
<3297=3326,3317,3314,3298
<3298=3299
<3299=3306,3300
<3300=3302,3301
<3302=3303
<3303=3305,3304
<3306=3307
<3307=3313,3308
<3308=3310,3309
<3310=3312,3311
<3314=3316,3315
<3317=3318
<3318=3325,3319
<3319=3321,3320
<3321=3322
<3322=3324,3323
<3326=3327
<3327=3328
<3328=3333,3332,3329
<3329=3331,3330
<3334=3335
<3335=3342,3341,3336
<3336=3340,3337
<3337=3339,3338
<3356=3358,3357
<3358=3414,3410,3406,3397,3365,3359
<3359=3360
<3360=3364,3361
<3361=3363,3362
<3365=3389,3380,3377,3366
<3366=3367
<3367=3371,3368
<3368=3369
<3369=3370
<3371=3372
<3372=3374,3373
<3374=3376,3375
<3377=3379,3378
<3380=3381
<3381=3388,3382
<3382=3384,3383
<3384=3385
<3385=3387,3386
<3389=3390
<3390=3391
<3391=3396,3395,3392
<3392=3394,3393
<3397=3398
<3398=3402,3399
<3399=3400
<3400=3401
<3402=3403
<3403=3405,3404
<3406=3407
<3407=3409,3408
<3410=3411
<3411=3413,3412
<3414=3415
<3415=3417,3416
<3432=3438,3437,3433
<3433=3434
<3434=3436,3435
<3438=3439
<3439=3440
<3440=3442,3441
<3448=3460,3459,3449
<3449=3456,3453,3450
<3450=3452,3451
<3453=3455,3454
<3456=3458,3457
<3460=3461
<3461=3462
<3462=3468,3463
<3463=3466,3464
<3464=3465
<3466=3467
<3468=3469
<3469=3471,3470
<3471=3473,3472
<3483=3498,3497,3484
<3484=3494,3491,3488,3485
<3485=3487,3486
<3488=3490,3489
<3491=3493,3492
<3494=3496,3495
<3498=3539,3523,3519,3513,3501,3499
<3499=3500
<3501=3502
<3502=3511,3503
<3503=3504
<3504=3505
<3505=3507,3506
<3507=3508
<3508=3510,3509
<3511=3512
<3513=3514
<3514=3518,3515
<3515=3517,3516
<3519=3520
<3520=3522,3521
<3523=3537,3524
<3524=3525
<3525=3533,3526
<3526=3531,3529,3527
<3527=3528
<3529=3530
<3531=3532
<3533=3534
<3534=3536,3535
<3537=3538
<3539=3540
<3540=3550,3549,3541
<3541=3548,3542
<3542=3546,3543
<3543=3544
<3544=3545
<3546=3547
<3564=3570,3569,3565
<3565=3566
<3566=3568,3567
<3570=3595,3591,3585,3573,3571
<3571=3572
<3573=3574
<3574=3583,3575
<3575=3576
<3576=3577
<3577=3579,3578
<3579=3580
<3580=3582,3581
<3583=3584
<3585=3586
<3586=3590,3587
<3587=3589,3588
<3591=3592
<3592=3594,3593
<3595=3603,3596
<3596=3597
<3597=3598
<3598=3602,3599
<3599=3601,3600
<3603=3604
<3604=3613,3605
<3605=3612,3606
<3606=3608,3607
<3608=3609
<3609=3611,3610
<3613=3615,3614
<3626=3629,3628,3627
<3629=3630
<3630=3631
<3636=3642,3641,3637
<3637=3638
<3638=3640,3639
<3642=3809,3802,3795,3672,3643
<3643=3668,3659,3656,3644
<3644=3645
<3645=3646
<3646=3650,3647
<3647=3648
<3648=3649
<3650=3651
<3651=3653,3652
<3653=3655,3654
<3656=3658,3657
<3659=3660
<3660=3667,3661
<3661=3663,3662
<3663=3664
<3664=3666,3665
<3668=3669
<3669=3671,3670
<3672=3791,3782,3779,3673
<3673=3770,3674
<3674=3757,3675
<3675=3719,3676
<3676=3711,3700,3697,3677
<3677=3678
<3678=3679
<3679=3692,3680
<3680=3688,3681
<3681=3682
<3682=3683
<3683=3685,3684
<3685=3687,3686
<3688=3689
<3689=3691,3690
<3692=3694,3693
<3694=3696,3695
<3697=3699,3698
<3700=3701
<3701=3710,3702
<3702=3704,3703
<3704=3705
<3705=3707,3706
<3707=3709,3708
<3711=3712
<3712=3713
<3713=3718,3717,3714
<3714=3716,3715
<3719=3739,3720
<3720=3721
<3721=3722
<3722=3733,3723
<3723=3724
<3724=3725
<3725=3727,3726
<3727=3728
<3728=3730,3729
<3730=3732,3731
<3733=3734
<3734=3736,3735
<3736=3738,3737
<3739=3740
<3740=3749,3741
<3741=3743,3742
<3743=3744
<3744=3746,3745
<3746=3748,3747
<3749=3751,3750
<3751=3752
<3752=3754,3753
<3754=3756,3755
<3757=3758
<3758=3769,3759
<3759=3768,3760
<3760=3762,3761
<3762=3763
<3763=3765,3764
<3765=3767,3766
<3770=3771
<3771=3778,3777,3772
<3772=3776,3773
<3773=3775,3774
<3779=3781,3780
<3782=3783
<3783=3790,3784
<3784=3786,3785
<3786=3787
<3787=3789,3788
<3791=3792
<3792=3794,3793
<3795=3796
<3796=3801,3800,3797
<3797=3799,3798
<3802=3803
<3803=3807,3804
<3804=3805
<3805=3806
<3807=3808
<3809=3811,3810
<3811=3812
<3837=3843,3842,3838
<3838=3839
<3839=3841,3840
<3843=3972,3844
<3844=3970,3878,3845
<3845=3846
<3846=3874,3847
<3847=3848
<3848=3870,3849
<3849=3864,3855,3850
<3850=3851
<3851=3853,3852
<3853=3854
<3855=3860,3856
<3856=3857
<3857=3859,3858
<3860=3861
<3861=3863,3862
<3864=3865
<3865=3869,3866
<3866=3868,3867
<3870=3871
<3871=3873,3872
<3874=3875
<3875=3877,3876
<3878=3962,3884,3879
<3879=3880
<3880=3882,3881
<3882=3883
<3884=3958,3885
<3885=3954,3933,3929,3886
<3886=3919,3894,3887
<3887=3888
<3888=3889
<3889=3890
<3890=3892,3891
<3892=3893
<3894=3908,3899,3895
<3895=3896
<3896=3898,3897
<3899=3904,3900
<3900=3901
<3901=3903,3902
<3904=3905
<3905=3907,3906
<3908=3909
<3909=3917,3910
<3910=3913,3911
<3911=3912
<3913=3914
<3914=3916,3915
<3917=3918
<3919=3920
<3920=3924,3921
<3921=3923,3922
<3924=3928,3925
<3925=3927,3926
<3929=3930
<3930=3932,3931
<3933=3950,3939,3934
<3934=3935
<3935=3936
<3936=3938,3937
<3939=3940
<3940=3949,3941
<3941=3947,3942
<3942=3945,3943
<3943=3944
<3945=3946
<3947=3948
<3950=3951
<3951=3953,3952
<3954=3955
<3955=3957,3956
<3958=3959
<3959=3961,3960
<3962=3963
<3963=3969,3964
<3964=3968,3965
<3965=3967,3966
<3970=3971
<3972=3973
<3973=3977,3974
<3974=3975
<3975=3976
<3977=3978
<3978=3980,3979
<3998=4004,4003,3999
<3999=4000
<4000=4002,4001
<4004=5834,5827,5791,5784,5770,5763,5749,5517,5508,5494,4515,4506,4492,4030,4021,4005
<4005=4006
<4006=4008,4007
<4008=4017,4009
<4009=4010
<4010=4011
<4011=4013,4012
<4013=4014
<4014=4016,4015
<4017=4018
<4018=4020,4019
<4021=4022
<4022=4026,4023
<4023=4024
<4024=4025
<4026=4027
<4027=4029,4028
<4030=4488,4477,4474,4031
<4031=4461,4447,4429,4041,4032
<4032=4033
<4033=4037,4034
<4034=4035
<4035=4036
<4037=4038
<4038=4040,4039
<4041=4421,4410,4407,4042
<4042=4393,4355,4316,4287,4283,4271,4267,4111,4099,4073,4052,4043
<4043=4044
<4044=4048,4045
<4045=4046
<4046=4047
<4048=4049
<4049=4051,4050
<4052=4053
<4053=4069,4054
<4054=4067,4055
<4055=4056
<4056=4058,4057
<4058=4059
<4059=4061,4060
<4061=4063,4062
<4063=4064
<4064=4066,4065
<4067=4068
<4069=4070
<4070=4072,4071
<4073=4090,4074
<4074=4075
<4075=4086,4076
<4076=4084,4077
<4077=4078
<4078=4080,4079
<4080=4081
<4081=4083,4082
<4084=4085
<4086=4087
<4087=4089,4088
<4090=4091
<4091=4098,4092
<4092=4094,4093
<4094=4095
<4095=4097,4096
<4099=4100
<4100=4110,4109,4101
<4101=4108,4102
<4102=4104,4103
<4104=4105
<4105=4107,4106
<4111=4259,4244,4241,4112
<4112=4224,4198,4185,4139,4113
<4113=4135,4114
<4114=4115
<4115=4116
<4116=4134,4117
<4117=4131,4118
<4118=4130,4119
<4119=4127,4120
<4120=4126,4121
<4121=4123,4122
<4123=4125,4124
<4127=4129,4128
<4131=4133,4132
<4135=4136
<4136=4138,4137
<4139=4177,4166,4163,4140
<4140=4141
<4141=4142
<4142=4162,4143
<4143=4155,4144
<4144=4154,4145
<4145=4147,4146
<4147=4149,4148
<4149=4151,4150
<4151=4153,4152
<4155=4157,4156
<4157=4159,4158
<4159=4161,4160
<4163=4165,4164
<4166=4167
<4167=4176,4168
<4168=4170,4169
<4170=4171
<4171=4173,4172
<4173=4175,4174
<4177=4178
<4178=4179
<4179=4184,4183,4180
<4180=4182,4181
<4185=4186
<4186=4197,4187
<4187=4189,4188
<4189=4191,4190
<4191=4192
<4192=4194,4193
<4194=4196,4195
<4198=4199
<4199=4223,4200
<4200=4220,4201
<4201=4219,4202
<4202=4216,4203
<4203=4215,4204
<4204=4212,4205
<4205=4211,4206
<4206=4208,4207
<4208=4210,4209
<4212=4214,4213
<4216=4218,4217
<4220=4222,4221
<4224=4225
<4225=4240,4239,4226
<4226=4238,4227
<4227=4237,4228
<4228=4230,4229
<4230=4232,4231
<4232=4234,4233
<4234=4236,4235
<4241=4243,4242
<4244=4245
<4245=4258,4246
<4246=4248,4247
<4248=4249
<4249=4251,4250
<4251=4253,4252
<4253=4255,4254
<4255=4257,4256
<4259=4260
<4260=4261
<4261=4266,4265,4262
<4262=4264,4263
<4267=4268
<4268=4270,4269
<4271=4272
<4272=4282,4273
<4273=4275,4274
<4275=4277,4276
<4277=4279,4278
<4279=4281,4280
<4283=4284
<4284=4286,4285
<4287=4306,4288
<4288=4289
<4289=4290
<4290=4302,4291
<4291=4300,4292
<4292=4293
<4293=4295,4294
<4295=4297,4296
<4297=4299,4298
<4300=4301
<4302=4303
<4303=4305,4304
<4306=4307
<4307=4309,4308
<4309=4311,4310
<4311=4313,4312
<4313=4315,4314
<4316=4340,4317
<4317=4318
<4318=4319
<4319=4336,4320
<4320=4334,4321
<4321=4322
<4322=4324,4323
<4324=4325
<4325=4327,4326
<4327=4329,4328
<4329=4331,4330
<4331=4333,4332
<4334=4335
<4336=4337
<4337=4339,4338
<4340=4341
<4341=4354,4342
<4342=4344,4343
<4344=4345
<4345=4347,4346
<4347=4349,4348
<4349=4351,4350
<4351=4353,4352
<4355=4378,4356
<4356=4357
<4357=4374,4358
<4358=4372,4359
<4359=4360
<4360=4362,4361
<4362=4363
<4363=4365,4364
<4365=4367,4366
<4367=4369,4368
<4369=4371,4370
<4372=4373
<4374=4375
<4375=4377,4376
<4378=4379
<4379=4392,4380
<4380=4382,4381
<4382=4383
<4383=4385,4384
<4385=4387,4386
<4387=4389,4388
<4389=4391,4390
<4393=4394
<4394=4406,4405,4395
<4395=4404,4396
<4396=4400,4397
<4397=4398
<4398=4399
<4400=4401
<4401=4403,4402
<4407=4409,4408
<4410=4411
<4411=4420,4412
<4412=4414,4413
<4414=4415
<4415=4417,4416
<4417=4419,4418
<4421=4422
<4422=4423
<4423=4428,4427,4424
<4424=4426,4425
<4429=4430
<4430=4443,4431
<4431=4441,4432
<4432=4433
<4433=4435,4434
<4435=4436
<4436=4438,4437
<4438=4440,4439
<4441=4442
<4443=4444
<4444=4446,4445
<4447=4448
<4448=4460,4459,4449
<4449=4458,4450
<4450=4454,4451
<4451=4452
<4452=4453
<4454=4455
<4455=4457,4456
<4461=4462
<4462=4473,4472,4463
<4463=4471,4464
<4464=4470,4465
<4465=4467,4466
<4467=4469,4468
<4474=4476,4475
<4477=4478
<4478=4487,4479
<4479=4481,4480
<4481=4482
<4482=4484,4483
<4484=4486,4485
<4488=4489
<4489=4491,4490
<4492=4493
<4493=4505,4504,4494
<4494=4503,4495
<4495=4499,4496
<4496=4497
<4497=4498
<4499=4500
<4500=4502,4501
<4506=4507
<4507=4511,4508
<4508=4509
<4509=4510
<4511=4512
<4512=4514,4513
<4515=5490,5479,5476,4516
<4516=5462,5445,5423,5406,5384,5364,5344,5327,5310,5281,5123,5119,5095,5074,5048,5016,4986,4956,4918,4851,4785,4761,4686,4526,4517
<4517=4518
<4518=4522,4519
<4519=4520
<4520=4521
<4522=4523
<4523=4525,4524
<4526=4667,4652,4649,4527
<4527=4648,4647,4646,4645,4644,4643,4642,4641,4640,4636,4635,4634,4633,4632,4631,4630,4629,4628,4627,4623,4622,4621,4620,4619,4618,4617,4616,4615,4614,4610,4528
<4528=4600,4529
<4529=4586,4566,4539,4530
<4530=4531
<4531=4535,4532
<4532=4533
<4533=4534
<4535=4536
<4536=4538,4537
<4539=4557,4540
<4540=4541
<4541=4542
<4542=4553,4543
<4543=4551,4544
<4544=4545
<4545=4547,4546
<4547=4548
<4548=4550,4549
<4551=4552
<4553=4554
<4554=4556,4555
<4557=4558
<4558=4560,4559
<4560=4562,4561
<4562=4563
<4563=4565,4564
<4566=4567
<4567=4582,4568
<4568=4580,4569
<4569=4570
<4570=4572,4571
<4572=4573
<4573=4575,4574
<4575=4577,4576
<4577=4579,4578
<4580=4581
<4582=4583
<4583=4585,4584
<4586=4587
<4587=4599,4598,4588
<4588=4597,4589
<4589=4593,4590
<4590=4591
<4591=4592
<4593=4594
<4594=4596,4595
<4600=4601
<4601=4609,4602
<4602=4606,4603
<4603=4605,4604
<4606=4608,4607
<4610=4611
<4611=4613,4612
<4623=4624
<4624=4626,4625
<4636=4637
<4637=4639,4638
<4649=4651,4650
<4652=4653
<4653=4666,4654
<4654=4656,4655
<4656=4657
<4657=4659,4658
<4659=4661,4660
<4661=4663,4662
<4663=4665,4664
<4667=4668
<4668=4669
<4669=4685,4684,4670
<4670=4683,4671
<4671=4673,4672
<4673=4674
<4674=4676,4675
<4676=4678,4677
<4678=4680,4679
<4680=4682,4681
<4686=4737,4687
<4687=4733,4709,4688
<4688=4689
<4689=4705,4690
<4690=4703,4691
<4691=4692
<4692=4694,4693
<4694=4695
<4695=4697,4696
<4697=4699,4698
<4699=4700
<4700=4702,4701
<4703=4704
<4705=4706
<4706=4708,4707
<4709=4710
<4710=4732,4711
<4711=4723,4712
<4712=4722,4713
<4713=4715,4714
<4715=4717,4716
<4717=4719,4718
<4719=4721,4720
<4723=4725,4724
<4725=4727,4726
<4727=4729,4728
<4729=4731,4730
<4733=4734
<4734=4736,4735
<4737=4738
<4738=4750,4739
<4739=4741,4740
<4741=4743,4742
<4743=4745,4744
<4745=4747,4746
<4747=4749,4748
<4750=4752,4751
<4752=4754,4753
<4754=4756,4755
<4756=4758,4757
<4758=4760,4759
<4761=4774,4762
<4762=4763
<4763=4764
<4764=4770,4765
<4765=4768,4766
<4766=4767
<4768=4769
<4770=4771
<4771=4773,4772
<4774=4775
<4775=4777,4776
<4777=4778
<4778=4780,4779
<4780=4782,4781
<4782=4784,4783
<4785=4836,4786
<4786=4832,4808,4787
<4787=4788
<4788=4804,4789
<4789=4802,4790
<4790=4791
<4791=4793,4792
<4793=4794
<4794=4796,4795
<4796=4798,4797
<4798=4799
<4799=4801,4800
<4802=4803
<4804=4805
<4805=4807,4806
<4808=4809
<4809=4831,4810
<4810=4822,4811
<4811=4821,4812
<4812=4814,4813
<4814=4816,4815
<4816=4818,4817
<4818=4820,4819
<4822=4824,4823
<4824=4826,4825
<4826=4828,4827
<4828=4830,4829
<4832=4833
<4833=4835,4834
<4836=4837
<4837=4850,4838
<4838=4840,4839
<4840=4841
<4841=4843,4842
<4843=4845,4844
<4845=4847,4846
<4847=4849,4848
<4851=4903,4852
<4852=4899,4874,4853
<4853=4854
<4854=4870,4855
<4855=4868,4856
<4856=4857
<4857=4859,4858
<4859=4860
<4860=4862,4861
<4862=4864,4863
<4864=4865
<4865=4867,4866
<4868=4869
<4870=4871
<4871=4873,4872
<4874=4875
<4875=4898,4876
<4876=4891,4877
<4877=4890,4878
<4878=4880,4879
<4880=4881
<4881=4883,4882
<4883=4885,4884
<4885=4887,4886
<4887=4889,4888
<4891=4893,4892
<4893=4895,4894
<4895=4897,4896
<4899=4900
<4900=4902,4901
<4903=4904
<4904=4917,4905
<4905=4907,4906
<4907=4908
<4908=4910,4909
<4910=4912,4911
<4912=4914,4913
<4914=4916,4915
<4918=4941,4919
<4919=4920
<4920=4937,4921
<4921=4935,4922
<4922=4923
<4923=4925,4924
<4925=4926
<4926=4928,4927
<4928=4930,4929
<4930=4932,4931
<4932=4934,4933
<4935=4936
<4937=4938
<4938=4940,4939
<4941=4942
<4942=4955,4943
<4943=4945,4944
<4945=4946
<4946=4948,4947
<4948=4950,4949
<4950=4952,4951
<4952=4954,4953
<4956=4976,4957
<4957=4958
<4958=4972,4959
<4959=4970,4960
<4960=4961
<4961=4963,4962
<4963=4965,4964
<4965=4967,4966
<4967=4969,4968
<4970=4971
<4972=4973
<4973=4975,4974
<4976=4977
<4977=4979,4978
<4979=4981,4980
<4981=4983,4982
<4983=4985,4984
<4986=5006,4987
<4987=4988
<4988=5002,4989
<4989=5000,4990
<4990=4991
<4991=4993,4992
<4993=4995,4994
<4995=4997,4996
<4997=4999,4998
<5000=5001
<5002=5003
<5003=5005,5004
<5006=5007
<5007=5009,5008
<5009=5011,5010
<5011=5013,5012
<5013=5015,5014
<5016=5037,5017
<5017=5018
<5018=5033,5019
<5019=5031,5020
<5020=5021
<5021=5023,5022
<5023=5024
<5024=5026,5025
<5026=5028,5027
<5028=5030,5029
<5031=5032
<5033=5034
<5034=5036,5035
<5037=5038
<5038=5040,5039
<5040=5041
<5041=5043,5042
<5043=5045,5044
<5045=5047,5046
<5048=5066,5049
<5049=5050
<5050=5062,5051
<5051=5060,5052
<5052=5053
<5053=5055,5054
<5055=5057,5056
<5057=5059,5058
<5060=5061
<5062=5063
<5063=5065,5064
<5066=5067
<5067=5069,5068
<5069=5071,5070
<5071=5073,5072
<5074=5075
<5075=5091,5076
<5076=5089,5077
<5077=5078
<5078=5080,5079
<5080=5081
<5081=5083,5082
<5083=5085,5084
<5085=5086
<5086=5088,5087
<5089=5090
<5091=5092
<5092=5094,5093
<5095=5096
<5096=5118,5097
<5097=5109,5098
<5098=5108,5099
<5099=5101,5100
<5101=5103,5102
<5103=5105,5104
<5105=5107,5106
<5109=5111,5110
<5111=5113,5112
<5113=5115,5114
<5115=5117,5116
<5119=5120
<5120=5122,5121
<5123=5266,5124
<5124=5262,5245,5146,5125
<5125=5126
<5126=5142,5127
<5127=5140,5128
<5128=5129
<5129=5131,5130
<5131=5132
<5132=5134,5133
<5134=5136,5135
<5136=5137
<5137=5139,5138
<5140=5141
<5142=5143
<5143=5145,5144
<5146=5237,5222,5219,5147
<5147=5202,5189,5166,5148
<5148=5149
<5149=5165,5150
<5150=5164,5151
<5151=5163,5152
<5152=5162,5153
<5153=5161,5154
<5154=5160,5155
<5155=5159,5156
<5156=5158,5157
<5166=5167
<5167=5185,5168
<5168=5181,5177,5173,5169
<5169=5170
<5170=5172,5171
<5173=5174
<5174=5176,5175
<5177=5178
<5178=5180,5179
<5181=5182
<5182=5184,5183
<5185=5186
<5186=5188,5187
<5189=5199,5196,5193,5190
<5190=5192,5191
<5193=5195,5194
<5196=5198,5197
<5199=5201,5200
<5202=5203
<5203=5218,5217,5204
<5204=5216,5205
<5205=5215,5206
<5206=5208,5207
<5208=5210,5209
<5210=5212,5211
<5212=5214,5213
<5219=5221,5220
<5222=5223
<5223=5236,5224
<5224=5226,5225
<5226=5227
<5227=5229,5228
<5229=5231,5230
<5231=5233,5232
<5233=5235,5234
<5237=5238
<5238=5239
<5239=5244,5243,5240
<5240=5242,5241
<5245=5246
<5246=5261,5247
<5247=5249,5248
<5249=5251,5250
<5251=5252
<5252=5254,5253
<5254=5256,5255
<5256=5258,5257
<5258=5260,5259
<5262=5263
<5263=5265,5264
<5266=5267
<5267=5280,5268
<5268=5270,5269
<5270=5271
<5271=5273,5272
<5273=5275,5274
<5275=5277,5276
<5277=5279,5278
<5281=5300,5282
<5282=5283
<5283=5284
<5284=5296,5285
<5285=5294,5286
<5286=5287
<5287=5289,5288
<5289=5291,5290
<5291=5293,5292
<5294=5295
<5296=5297
<5297=5299,5298
<5300=5301
<5301=5309,5302
<5302=5304,5303
<5304=5306,5305
<5306=5308,5307
<5310=5311
<5311=5323,5312
<5312=5321,5313
<5313=5314
<5314=5316,5315
<5316=5318,5317
<5318=5320,5319
<5321=5322
<5323=5324
<5324=5326,5325
<5327=5328
<5328=5340,5329
<5329=5338,5330
<5330=5331
<5331=5333,5332
<5333=5335,5334
<5335=5337,5336
<5338=5339
<5340=5341
<5341=5343,5342
<5344=5345
<5345=5360,5346
<5346=5358,5347
<5347=5348
<5348=5350,5349
<5350=5351
<5351=5353,5352
<5353=5355,5354
<5355=5357,5356
<5358=5359
<5360=5361
<5361=5363,5362
<5364=5365
<5365=5380,5366
<5366=5378,5367
<5367=5368
<5368=5370,5369
<5370=5371
<5371=5373,5372
<5373=5375,5374
<5375=5377,5376
<5378=5379
<5380=5381
<5381=5383,5382
<5384=5385
<5385=5402,5386
<5386=5400,5387
<5387=5388
<5388=5390,5389
<5390=5391
<5391=5393,5392
<5393=5395,5394
<5395=5397,5396
<5397=5399,5398
<5400=5401
<5402=5403
<5403=5405,5404
<5406=5407
<5407=5419,5408
<5408=5417,5409
<5409=5410
<5410=5412,5411
<5412=5414,5413
<5414=5416,5415
<5417=5418
<5419=5420
<5420=5422,5421
<5423=5424
<5424=5441,5425
<5425=5439,5426
<5426=5427
<5427=5429,5428
<5429=5430
<5430=5432,5431
<5432=5434,5433
<5434=5436,5435
<5436=5438,5437
<5439=5440
<5441=5442
<5442=5444,5443
<5445=5446
<5446=5458,5447
<5447=5456,5448
<5448=5449
<5449=5451,5450
<5451=5453,5452
<5453=5455,5454
<5456=5457
<5458=5459
<5459=5461,5460
<5462=5463
<5463=5475,5474,5464
<5464=5473,5465
<5465=5469,5466
<5466=5467
<5467=5468
<5469=5470
<5470=5472,5471
<5476=5478,5477
<5479=5480
<5480=5489,5481
<5481=5483,5482
<5483=5484
<5484=5486,5485
<5486=5488,5487
<5490=5491
<5491=5493,5492
<5494=5495
<5495=5507,5506,5496
<5496=5505,5497
<5497=5501,5498
<5498=5499
<5499=5500
<5501=5502
<5502=5504,5503
<5508=5509
<5509=5513,5510
<5510=5511
<5511=5512
<5513=5514
<5514=5516,5515
<5517=5745,5736,5733,5518
<5518=5719,5641,5563,5528,5519
<5519=5520
<5520=5524,5521
<5521=5522
<5522=5523
<5524=5525
<5525=5527,5526
<5528=5550,5529
<5529=5530
<5530=5531
<5531=5546,5532
<5532=5544,5533
<5533=5534
<5534=5536,5535
<5536=5537
<5537=5539,5538
<5539=5541,5540
<5541=5543,5542
<5544=5545
<5546=5547
<5547=5549,5548
<5550=5551
<5551=5562,5552
<5552=5554,5553
<5554=5555
<5555=5557,5556
<5557=5559,5558
<5559=5561,5560
<5563=5628,5564
<5564=5624,5586,5565
<5565=5566
<5566=5582,5567
<5567=5580,5568
<5568=5569
<5569=5571,5570
<5571=5572
<5572=5574,5573
<5574=5576,5575
<5576=5577
<5577=5579,5578
<5580=5581
<5582=5583
<5583=5585,5584
<5586=5616,5603,5600,5587
<5587=5588
<5588=5589
<5589=5599,5590
<5590=5592,5591
<5592=5594,5593
<5594=5596,5595
<5596=5598,5597
<5600=5602,5601
<5603=5604
<5604=5615,5605
<5605=5607,5606
<5607=5608
<5608=5610,5609
<5610=5612,5611
<5612=5614,5613
<5616=5617
<5617=5618
<5618=5623,5622,5619
<5619=5621,5620
<5624=5625
<5625=5627,5626
<5628=5629
<5629=5631,5630
<5631=5633,5632
<5633=5634
<5634=5636,5635
<5636=5638,5637
<5638=5640,5639
<5641=5706,5642
<5642=5702,5664,5643
<5643=5644
<5644=5660,5645
<5645=5658,5646
<5646=5647
<5647=5649,5648
<5649=5650
<5650=5652,5651
<5652=5654,5653
<5654=5655
<5655=5657,5656
<5658=5659
<5660=5661
<5661=5663,5662
<5664=5694,5681,5678,5665
<5665=5666
<5666=5667
<5667=5677,5668
<5668=5670,5669
<5670=5672,5671
<5672=5674,5673
<5674=5676,5675
<5678=5680,5679
<5681=5682
<5682=5693,5683
<5683=5685,5684
<5685=5686
<5686=5688,5687
<5688=5690,5689
<5690=5692,5691
<5694=5695
<5695=5696
<5696=5701,5700,5697
<5697=5699,5698
<5702=5703
<5703=5705,5704
<5706=5707
<5707=5709,5708
<5709=5711,5710
<5711=5712
<5712=5714,5713
<5714=5716,5715
<5716=5718,5717
<5719=5720
<5720=5732,5731,5721
<5721=5730,5722
<5722=5726,5723
<5723=5724
<5724=5725
<5726=5727
<5727=5729,5728
<5733=5735,5734
<5736=5737
<5737=5744,5738
<5738=5740,5739
<5740=5741
<5741=5743,5742
<5745=5746
<5746=5748,5747
<5749=5750
<5750=5762,5761,5751
<5751=5760,5752
<5752=5756,5753
<5753=5754
<5754=5755
<5756=5757
<5757=5759,5758
<5763=5764
<5764=5766,5765
<5766=5767
<5767=5769,5768
<5770=5771
<5771=5783,5782,5772
<5772=5781,5773
<5773=5779,5774
<5774=5777,5775
<5775=5776
<5777=5778
<5779=5780
<5784=5785
<5785=5790,5789,5786
<5786=5788,5787
<5791=5818,5802,5792
<5792=5793
<5793=5794
<5794=5795
<5795=5801,5796
<5796=5800,5797
<5797=5799,5798
<5802=5811,5803
<5803=5804
<5804=5810,5805
<5805=5809,5806
<5806=5808,5807
<5811=5812
<5812=5816,5813
<5813=5814
<5814=5815
<5816=5817
<5818=5819
<5819=5826,5820
<5820=5822,5821
<5822=5823
<5823=5825,5824
<5827=5828
<5828=5832,5829
<5829=5830
<5830=5831
<5832=5833
<5834=5841,5835
<5835=5840,5839,5836
<5836=5838,5837
<5841=5843,5842
<5993=5999,5998,5994
<5994=5995
<5995=5997,5996
<5999=6004,6000
<6000=6001
<6001=6003,6002
<6004=6027,6018,6015,6005
<6005=6006
<6006=6009,6007
<6007=6008
<6009=6010
<6010=6012,6011
<6012=6014,6013
<6015=6017,6016
<6018=6019
<6019=6026,6020
<6020=6022,6021
<6022=6023
<6023=6025,6024
<6027=6028
<6028=6029
<6029=6034,6033,6030
<6030=6032,6031
<6044=6053,6052,6045
<6045=6049,6046
<6046=6048,6047
<6049=6051,6050
<6053=6054
<6054=6066,6055
<6055=6056
<6056=6057
<6057=6059,6058
<6059=6061,6060
<6061=6063,6062
<6063=6065,6064
<6066=6067
<6067=6076,6068
<6068=6075,6069
<6069=6071,6070
<6071=6072
<6072=6074,6073
<6076=6078,6077
<6092=6098,6097,6093
<6093=6094
<6094=6096,6095
<6098=6125,6121,6113,6101,6099
<6099=6100
<6101=6102
<6102=6111,6103
<6103=6104
<6104=6105
<6105=6107,6106
<6107=6108
<6108=6110,6109
<6111=6112
<6113=6114
<6114=6120,6115
<6115=6119,6116
<6116=6118,6117
<6121=6122
<6122=6124,6123
<6125=6152,6143,6140,6126
<6126=6127
<6127=6132,6128
<6128=6129
<6129=6131,6130
<6132=6133
<6133=6135,6134
<6135=6137,6136
<6137=6139,6138
<6140=6142,6141
<6143=6144
<6144=6151,6145
<6145=6147,6146
<6147=6148
<6148=6150,6149
<6152=6153
<6153=6154
<6154=6159,6158,6155
<6155=6157,6156
<6174=6180,6179,6175
<6175=6176
<6176=6178,6177
<6180=6207,6203,6195,6183,6181
<6181=6182
<6183=6184
<6184=6193,6185
<6185=6186
<6186=6187
<6187=6189,6188
<6189=6190
<6190=6192,6191
<6193=6194
<6195=6196
<6196=6202,6197
<6197=6201,6198
<6198=6200,6199
<6203=6204
<6204=6206,6205
<6207=6234,6225,6222,6208
<6208=6209
<6209=6214,6210
<6210=6211
<6211=6213,6212
<6214=6215
<6215=6217,6216
<6217=6219,6218
<6219=6221,6220
<6222=6224,6223
<6225=6226
<6226=6233,6227
<6227=6229,6228
<6229=6230
<6230=6232,6231
<6234=6235
<6235=6236
<6236=6241,6240,6237
<6237=6239,6238
<6256=6286,6285,6257
<6257=6282,6279,6276,6273,6270,6267,6264,6261,6258
<6258=6260,6259
<6261=6263,6262
<6264=6266,6265
<6267=6269,6268
<6270=6272,6271
<6273=6275,6274
<6276=6278,6277
<6279=6281,6280
<6282=6284,6283
<6286=6387,6386,6385,6384,6383,6381,6375,6366,6360,6354,6348,6342,6336,6330,6324,6318,6308,6298,6289,6287
<6287=6288
<6289=6290
<6290=6294,6291
<6291=6292
<6292=6293
<6294=6295
<6295=6297,6296
<6298=6306,6299
<6299=6300
<6300=6302,6301
<6302=6303
<6303=6305,6304
<6306=6307
<6308=6316,6309
<6309=6310
<6310=6312,6311
<6312=6313
<6313=6315,6314
<6316=6317
<6318=6319
<6319=6321,6320
<6321=6323,6322
<6324=6325
<6325=6327,6326
<6327=6329,6328
<6330=6331
<6331=6333,6332
<6333=6335,6334
<6336=6337
<6337=6339,6338
<6339=6341,6340
<6342=6343
<6343=6345,6344
<6345=6347,6346
<6348=6349
<6349=6351,6350
<6351=6353,6352
<6354=6355
<6355=6357,6356
<6357=6359,6358
<6360=6361
<6361=6363,6362
<6363=6365,6364
<6366=6367
<6367=6371,6368
<6368=6369
<6369=6370
<6371=6372
<6372=6374,6373
<6375=6376
<6376=6378,6377
<6378=6380,6379
<6381=6382
<6413=6416,6415,6414
<6416=6425,6417
<6417=6418
<6418=6420,6419
<6420=6422,6421
<6422=6424,6423
<6425=6426
<6426=6428,6427
<6428=6429
<6436=6439,6438,6437
<6439=6455,6440
<6440=6441
<6441=6450,6442
<6442=6444,6443
<6444=6446,6445
<6446=6447
<6447=6449,6448
<6450=6452,6451
<6452=6454,6453
<6455=6456
<6456=6458,6457
<6458=6459
<6468=6471,6470,6469
<6471=6502,6494,6472
<6472=6481,6473
<6473=6474
<6474=6476,6475
<6476=6478,6477
<6478=6480,6479
<6481=6482
<6482=6489,6483
<6483=6485,6484
<6485=6486
<6486=6488,6487
<6489=6491,6490
<6491=6493,6492
<6494=6495
<6495=6497,6496
<6497=6499,6498
<6499=6501,6500
<6502=6503
<6503=6505,6504
<6505=6506
<6515=6518,6517,6516
<6518=6551,6543,6519
<6519=6535,6520
<6520=6521
<6521=6530,6522
<6522=6524,6523
<6524=6526,6525
<6526=6527
<6527=6529,6528
<6530=6532,6531
<6532=6534,6533
<6535=6536
<6536=6538,6537
<6538=6540,6539
<6540=6542,6541
<6543=6544
<6544=6546,6545
<6546=6548,6547
<6548=6550,6549
<6551=6552
<6552=6554,6553
<6554=6555
<6564=6567,6566,6565
<6567=6611,6575,6568
<6568=6569
<6569=6571,6570
<6571=6572
<6572=6574,6573
<6575=6598,6589,6586,6576
<6576=6577
<6577=6578
<6578=6580,6579
<6580=6581
<6581=6583,6582
<6583=6585,6584
<6586=6588,6587
<6589=6590
<6590=6597,6591
<6591=6593,6592
<6593=6594
<6594=6596,6595
<6598=6599
<6599=6600
<6600=6610,6609,6601
<6601=6608,6602
<6602=6604,6603
<6604=6605
<6605=6607,6606
<6611=6612
<6612=6614,6613
<6614=6615
<6615=6617,6616
<6627=6633,6632,6628
<6628=6629
<6629=6631,6630
<6633=6636,6634
<6634=6635
<6636=6665,6656,6653,6637
<6637=6638
<6638=6645,6639
<6639=6640
<6640=6644,6641
<6641=6643,6642
<6645=6646
<6646=6648,6647
<6648=6650,6649
<6650=6652,6651
<6653=6655,6654
<6656=6657
<6657=6664,6658
<6658=6660,6659
<6660=6661
<6661=6663,6662
<6665=6666
<6666=6667
<6667=6672,6671,6668
<6668=6670,6669
<6685=6691,6690,6686
<6686=6687
<6687=6689,6688
<6691=7108,7087,7057,7046,7023,7009,6991,6977,6692
<6692=6975,6693
<6693=6961,6694
<6694=6959,6695
<6695=6940,6928,6707,6696
<6696=6697
<6697=6706,6698
<6698=6702,6699
<6699=6700
<6700=6701
<6702=6703
<6703=6705,6704
<6707=6926,6734,6708
<6708=6709
<6709=6730,6722,6710
<6710=6711
<6711=6720,6712
<6712=6713
<6713=6714
<6714=6716,6715
<6716=6717
<6717=6719,6718
<6720=6721
<6722=6723
<6723=6729,6724
<6724=6728,6725
<6725=6727,6726
<6730=6731
<6731=6733,6732
<6734=6890,6886,6830,6815,6775,6735
<6735=6766,6736
<6736=6747,6737
<6737=6745,6738
<6738=6739
<6739=6741,6740
<6741=6742
<6742=6744,6743
<6745=6746
<6747=6748
<6748=6765,6764,6749
<6749=6763,6750
<6750=6761,6751
<6751=6752
<6752=6753
<6753=6757,6754
<6754=6755
<6755=6756
<6757=6758
<6758=6760,6759
<6761=6762
<6766=6767
<6767=6771,6768
<6768=6769
<6769=6770
<6771=6772
<6772=6774,6773
<6775=6806,6776
<6776=6787,6777
<6777=6785,6778
<6778=6779
<6779=6781,6780
<6781=6782
<6782=6784,6783
<6785=6786
<6787=6788
<6788=6805,6804,6789
<6789=6803,6790
<6790=6801,6791
<6791=6792
<6792=6793
<6793=6797,6794
<6794=6795
<6795=6796
<6797=6798
<6798=6800,6799
<6801=6802
<6806=6807
<6807=6811,6808
<6808=6809
<6809=6810
<6811=6812
<6812=6814,6813
<6815=6823,6816
<6816=6817
<6817=6818
<6818=6820,6819
<6820=6822,6821
<6823=6824
<6824=6826,6825
<6826=6827
<6827=6829,6828
<6830=6877,6831
<6831=6866,6832
<6832=6857,6833
<6833=6851,6840,6834
<6834=6835
<6835=6837,6836
<6837=6839,6838
<6840=6841
<6841=6847,6842
<6842=6843
<6843=6844
<6844=6846,6845
<6847=6848
<6848=6850,6849
<6851=6852
<6852=6854,6853
<6854=6856,6855
<6857=6858
<6858=6865,6859
<6859=6861,6860
<6861=6862
<6862=6864,6863
<6866=6867
<6867=6876,6868
<6868=6872,6869
<6869=6870
<6870=6871
<6872=6873
<6873=6875,6874
<6877=6878
<6878=6882,6879
<6879=6880
<6880=6881
<6882=6883
<6883=6885,6884
<6886=6887
<6887=6889,6888
<6890=6917,6891
<6891=6898,6892
<6892=6893
<6893=6895,6894
<6895=6897,6896
<6898=6899
<6899=6916,6915,6900
<6900=6914,6901
<6901=6912,6902
<6902=6903
<6903=6904
<6904=6908,6905
<6905=6906
<6906=6907
<6908=6909
<6909=6911,6910
<6912=6913
<6917=6918
<6918=6922,6919
<6919=6920
<6920=6921
<6922=6923
<6923=6925,6924
<6926=6927
<6928=6929
<6929=6939,6938,6930
<6930=6937,6931
<6931=6935,6932
<6932=6933
<6933=6934
<6935=6936
<6940=6941
<6941=6958,6957,6942
<6942=6956,6943
<6943=6954,6944
<6944=6945
<6945=6946
<6946=6950,6947
<6947=6948
<6948=6949
<6950=6951
<6951=6953,6952
<6954=6955
<6959=6960
<6961=6962
<6962=6974,6973,6963
<6963=6972,6964
<6964=6968,6965
<6965=6966
<6966=6967
<6968=6969
<6969=6971,6970
<6975=6976
<6977=6978
<6978=6990,6989,6979
<6979=6988,6980
<6980=6984,6981
<6981=6982
<6982=6983
<6984=6985
<6985=6987,6986
<6991=7005,6992
<6992=6994,6993
<6994=6995
<6995=7003,6996
<6996=6997
<6997=6998
<6998=7002,6999
<6999=7001,7000
<7003=7004
<7005=7006
<7006=7008,7007
<7009=7010
<7010=7022,7021,7011
<7011=7020,7012
<7012=7018,7013
<7013=7016,7014
<7014=7015
<7016=7017
<7018=7019
<7023=7037,7024
<7024=7026,7025
<7026=7027
<7027=7035,7028
<7028=7029
<7029=7030
<7030=7034,7031
<7031=7033,7032
<7035=7036
<7037=7038
<7038=7045,7039
<7039=7043,7040
<7040=7041
<7041=7042
<7043=7044
<7046=7047
<7047=7056,7048
<7048=7052,7049
<7049=7050
<7050=7051
<7052=7053
<7053=7055,7054
<7057=7069,7058
<7058=7059
<7059=7060
<7060=7068,7061
<7061=7067,7062
<7062=7066,7063
<7063=7065,7064
<7069=7070
<7070=7081,7071
<7071=7080,7072
<7072=7078,7073
<7073=7076,7074
<7074=7075
<7076=7077
<7078=7079
<7081=7083,7082
<7083=7084
<7084=7086,7085
<7087=7099,7088
<7088=7089
<7089=7090
<7090=7098,7091
<7091=7097,7092
<7092=7096,7093
<7093=7095,7094
<7099=7100
<7100=7107,7101
<7101=7103,7102
<7103=7104
<7104=7106,7105
<7108=7109
<7109=7111,7110
<7153=7159,7158,7154
<7154=7155
<7155=7157,7156
<7159=7160
<7160=7161
<7161=7163,7162
<7163=7164
<7164=7166,7165
<7166=7168,7167
<7176=7179,7178,7177
<7179=7180
<7180=7203,7194,7191,7181
<7181=7182
<7182=7183
<7183=7185,7184
<7185=7186
<7186=7188,7187
<7188=7190,7189
<7191=7193,7192
<7194=7195
<7195=7202,7196
<7196=7198,7197
<7198=7199
<7199=7201,7200
<7203=7204
<7204=7205
<7205=7210,7209,7206
<7206=7208,7207
<7219=7228,7227,7220
<7220=7224,7221
<7221=7223,7222
<7224=7226,7225
<7228=7229
<7229=7230
<7230=7234,7231
<7231=7232
<7232=7233
<7234=7235
<7235=7237,7236
<7237=7239,7238
<7248=7254,7253,7249
<7249=7250
<7250=7252,7251
<7254=9675,9671,9666,9659,9654,9650,9643,9639,9620,9592,9565,9554,9540,9518,9514,9500,8151,8144,8130,7963,7956,7942,7255
<7255=7940,7256
<7256=7926,7257
<7257=7924,7258
<7258=7920,7907,7898,7884,7281,7270,7259
<7259=7260
<7260=7264,7261
<7261=7262
<7262=7263
<7264=7265
<7265=7267,7266
<7267=7269,7268
<7270=7271
<7271=7280,7272
<7272=7276,7273
<7273=7274
<7274=7275
<7276=7277
<7277=7279,7278
<7281=7882,7282
<7282=7878,7587,7460,7375,7305,7294,7283
<7283=7284
<7284=7293,7285
<7285=7289,7286
<7286=7287
<7287=7288
<7289=7290
<7290=7292,7291
<7294=7295
<7295=7299,7296
<7296=7297
<7297=7298
<7299=7300
<7300=7302,7301
<7302=7304,7303
<7305=7367,7356,7353,7306
<7306=7307
<7307=7338,7337,7308
<7308=7309
<7309=7333,7321,7310
<7310=7311
<7311=7315,7312
<7312=7313
<7313=7314
<7315=7316
<7316=7318,7317
<7318=7320,7319
<7321=7322
<7322=7330,7323
<7323=7325,7324
<7325=7327,7326
<7327=7329,7328
<7330=7332,7331
<7333=7334
<7334=7336,7335
<7338=7339
<7339=7349,7340
<7340=7341
<7341=7342
<7342=7344,7343
<7344=7346,7345
<7346=7348,7347
<7349=7350
<7350=7352,7351
<7353=7355,7354
<7356=7357
<7357=7366,7358
<7358=7360,7359
<7360=7361
<7361=7363,7362
<7363=7365,7364
<7367=7368
<7368=7369
<7369=7374,7373,7370
<7370=7372,7371
<7375=7451,7376
<7376=7438,7431,7427,7377
<7377=7423,7378
<7378=7409,7379
<7379=7407,7380
<7380=7403,7392,7381
<7381=7382
<7382=7386,7383
<7383=7384
<7384=7385
<7386=7387
<7387=7389,7388
<7389=7391,7390
<7392=7393
<7393=7399,7394
<7394=7397,7395
<7395=7396
<7397=7398
<7399=7400
<7400=7402,7401
<7403=7404
<7404=7406,7405
<7407=7408
<7409=7410
<7410=7422,7421,7411
<7411=7420,7412
<7412=7416,7413
<7413=7414
<7414=7415
<7416=7417
<7417=7419,7418
<7423=7424
<7424=7426,7425
<7427=7428
<7428=7430,7429
<7431=7432
<7432=7437,7436,7433
<7433=7435,7434
<7438=7439
<7439=7448,7440
<7440=7444,7441
<7441=7442
<7442=7443
<7444=7445
<7445=7447,7446
<7448=7450,7449
<7451=7452
<7452=7456,7453
<7453=7454
<7454=7455
<7456=7457
<7457=7459,7458
<7460=7578,7461
<7461=7574,7562,7558,7545,7539,7515,7462
<7462=7511,7463
<7463=7503,7499,7493,7487,7481,7475,7464
<7464=7465
<7465=7469,7466
<7466=7467
<7467=7468
<7469=7470
<7470=7472,7471
<7472=7474,7473
<7475=7476
<7476=7478,7477
<7478=7480,7479
<7481=7482
<7482=7484,7483
<7484=7486,7485
<7487=7488
<7488=7490,7489
<7490=7492,7491
<7493=7494
<7494=7496,7495
<7496=7498,7497
<7499=7500
<7500=7502,7501
<7503=7504
<7504=7510,7505
<7505=7509,7506
<7506=7508,7507
<7511=7512
<7512=7514,7513
<7515=7530,7516
<7516=7517
<7517=7518
<7518=7527,7519
<7519=7523,7520
<7520=7521
<7521=7522
<7523=7524
<7524=7526,7525
<7527=7529,7528
<7530=7531
<7531=7535,7532
<7532=7533
<7533=7534
<7535=7536
<7536=7538,7537
<7539=7540
<7540=7542,7541
<7542=7544,7543
<7545=7555,7552,7549,7546
<7546=7548,7547
<7549=7551,7550
<7552=7554,7553
<7555=7557,7556
<7558=7559
<7559=7561,7560
<7562=7563
<7563=7573,7572,7564
<7564=7568,7565
<7565=7566
<7566=7567
<7568=7569
<7569=7571,7570
<7574=7575
<7575=7577,7576
<7578=7579
<7579=7583,7580
<7580=7581
<7581=7582
<7583=7584
<7584=7586,7585
<7587=7869,7588
<7588=7865,7853,7849,7833,7827,7803,7774,7589
<7589=7770,7590
<7590=7766,7756,7750,7744,7738,7732,7673,7602,7591
<7591=7592
<7592=7596,7593
<7593=7594
<7594=7595
<7596=7597
<7597=7599,7598
<7599=7601,7600
<7602=7664,7603
<7603=7652,7648,7641,7604
<7604=7637,7605
<7605=7631,7606
<7606=7627,7607
<7607=7621,7615,7609,7608
<7609=7610
<7610=7612,7611
<7612=7614,7613
<7615=7616
<7616=7618,7617
<7618=7620,7619
<7621=7622
<7622=7624,7623
<7624=7626,7625
<7627=7628
<7628=7630,7629
<7631=7632
<7632=7636,7633
<7633=7635,7634
<7637=7638
<7638=7640,7639
<7641=7645,7642
<7642=7644,7643
<7645=7647,7646
<7648=7649
<7649=7651,7650
<7652=7653
<7653=7663,7662,7654
<7654=7658,7655
<7655=7656
<7656=7657
<7658=7659
<7659=7661,7660
<7664=7665
<7665=7669,7666
<7666=7667
<7667=7668
<7669=7670
<7670=7672,7671
<7673=7728,7674
<7674=7717,7675
<7675=7709,7698,7695,7676
<7676=7677
<7677=7678
<7678=7694,7679
<7679=7687,7680
<7680=7682,7681
<7682=7684,7683
<7684=7686,7685
<7687=7689,7688
<7689=7691,7690
<7691=7693,7692
<7695=7697,7696
<7698=7699
<7699=7708,7700
<7700=7702,7701
<7702=7703
<7703=7705,7704
<7705=7707,7706
<7709=7710
<7710=7711
<7711=7716,7715,7712
<7712=7714,7713
<7717=7718
<7718=7722,7719
<7719=7720
<7720=7721
<7722=7723
<7723=7725,7724
<7725=7727,7726
<7728=7729
<7729=7731,7730
<7732=7733
<7733=7735,7734
<7735=7737,7736
<7738=7739
<7739=7741,7740
<7741=7743,7742
<7744=7745
<7745=7747,7746
<7747=7749,7748
<7750=7751
<7751=7753,7752
<7753=7755,7754
<7756=7757
<7757=7765,7758
<7758=7764,7759
<7759=7763,7760
<7760=7762,7761
<7766=7767
<7767=7769,7768
<7770=7771
<7771=7773,7772
<7774=7794,7775
<7775=7776
<7776=7777
<7777=7791,7778
<7778=7789,7779
<7779=7780
<7780=7781
<7781=7785,7782
<7782=7783
<7783=7784
<7785=7786
<7786=7788,7787
<7789=7790
<7791=7793,7792
<7794=7795
<7795=7799,7796
<7796=7797
<7797=7798
<7799=7800
<7800=7802,7801
<7803=7818,7804
<7804=7805
<7805=7806
<7806=7815,7807
<7807=7811,7808
<7808=7809
<7809=7810
<7811=7812
<7812=7814,7813
<7815=7817,7816
<7818=7819
<7819=7823,7820
<7820=7821
<7821=7822
<7823=7824
<7824=7826,7825
<7827=7828
<7828=7830,7829
<7830=7832,7831
<7833=7846,7843,7840,7837,7834
<7834=7836,7835
<7837=7839,7838
<7840=7842,7841
<7843=7845,7844
<7846=7848,7847
<7849=7850
<7850=7852,7851
<7853=7854
<7854=7864,7863,7855
<7855=7859,7856
<7856=7857
<7857=7858
<7859=7860
<7860=7862,7861
<7865=7866
<7866=7868,7867
<7869=7870
<7870=7874,7871
<7871=7872
<7872=7873
<7874=7875
<7875=7877,7876
<7878=7879
<7879=7881,7880
<7882=7883
<7884=7885
<7885=7897,7896,7886
<7886=7895,7887
<7887=7891,7888
<7888=7889
<7889=7890
<7891=7892
<7892=7894,7893
<7898=7899
<7899=7905,7900
<7900=7901
<7901=7902
<7902=7904,7903
<7905=7906
<7907=7908
<7908=7917,7909
<7909=7913,7910
<7910=7911
<7911=7912
<7913=7914
<7914=7916,7915
<7917=7919,7918
<7920=7921
<7921=7923,7922
<7924=7925
<7926=7927
<7927=7939,7938,7928
<7928=7937,7929
<7929=7933,7930
<7930=7931
<7931=7932
<7933=7934
<7934=7936,7935
<7940=7941
<7942=7943
<7943=7955,7954,7944
<7944=7953,7945
<7945=7949,7946
<7946=7947
<7947=7948
<7949=7950
<7950=7952,7951
<7956=7957
<7957=7959,7958
<7959=7960
<7960=7962,7961
<7963=8128,7964
<7964=8114,7965
<7965=8112,7966
<7966=8108,8064,8020,7996,7987,7978,7967
<7967=7968
<7968=7977,7969
<7969=7973,7970
<7970=7971
<7971=7972
<7973=7974
<7974=7976,7975
<7978=7979
<7979=7983,7980
<7980=7981
<7981=7982
<7983=7984
<7984=7986,7985
<7987=7988
<7988=7992,7989
<7989=7990
<7990=7991
<7992=7993
<7993=7995,7994
<7996=8011,7997
<7997=7998
<7998=7999
<7999=8008,8000
<8000=8004,8001
<8001=8002
<8002=8003
<8004=8005
<8005=8007,8006
<8008=8010,8009
<8011=8012
<8012=8016,8013
<8013=8014
<8014=8015
<8016=8017
<8017=8019,8018
<8020=8055,8021
<8021=8043,8039,8022
<8022=8035,8023
<8023=8024
<8024=8025
<8025=8029,8026
<8026=8027
<8027=8028
<8029=8030
<8030=8032,8031
<8032=8034,8033
<8035=8036
<8036=8038,8037
<8039=8040
<8040=8042,8041
<8043=8044
<8044=8054,8053,8045
<8045=8049,8046
<8046=8047
<8047=8048
<8049=8050
<8050=8052,8051
<8055=8056
<8056=8060,8057
<8057=8058
<8058=8059
<8060=8061
<8061=8063,8062
<8064=8099,8065
<8065=8087,8083,8066
<8066=8079,8067
<8067=8068
<8068=8069
<8069=8073,8070
<8070=8071
<8071=8072
<8073=8074
<8074=8076,8075
<8076=8078,8077
<8079=8080
<8080=8082,8081
<8083=8084
<8084=8086,8085
<8087=8088
<8088=8098,8097,8089
<8089=8093,8090
<8090=8091
<8091=8092
<8093=8094
<8094=8096,8095
<8099=8100
<8100=8104,8101
<8101=8102
<8102=8103
<8104=8105
<8105=8107,8106
<8108=8109
<8109=8111,8110
<8112=8113
<8114=8115
<8115=8127,8126,8116
<8116=8125,8117
<8117=8121,8118
<8118=8119
<8119=8120
<8121=8122
<8122=8124,8123
<8128=8129
<8130=8131
<8131=8143,8142,8132
<8132=8141,8133
<8133=8137,8134
<8134=8135
<8135=8136
<8137=8138
<8138=8140,8139
<8144=8145
<8145=8147,8146
<8147=8148
<8148=8150,8149
<8151=9498,8152
<8152=9465,9451,8274,8153
<8153=8266,8255,8252,8154
<8154=8241,8155
<8155=8233,8166,8156
<8156=8157
<8157=8158
<8158=8164,8159
<8159=8162,8160
<8160=8161
<8162=8163
<8164=8165
<8166=8219,8167
<8167=8215,8181,8168
<8168=8169
<8169=8170
<8170=8171
<8171=8177,8172
<8172=8175,8173
<8173=8174
<8175=8176
<8177=8178
<8178=8180,8179
<8181=8211,8194,8182
<8182=8183
<8183=8192,8184
<8184=8185
<8185=8186
<8186=8188,8187
<8188=8189
<8189=8191,8190
<8192=8193
<8194=8195
<8195=8210,8196
<8196=8209,8197
<8197=8206,8198
<8198=8205,8199
<8199=8201,8200
<8201=8202
<8202=8204,8203
<8206=8208,8207
<8211=8212
<8212=8214,8213
<8215=8216
<8216=8218,8217
<8219=8220
<8220=8232,8231,8221
<8221=8230,8222
<8222=8228,8223
<8223=8224
<8224=8225
<8225=8227,8226
<8228=8229
<8233=8234
<8234=8238,8235
<8235=8237,8236
<8238=8240,8239
<8241=8242
<8242=8251,8250,8243
<8243=8249,8244
<8244=8246,8245
<8246=8248,8247
<8252=8254,8253
<8255=8256
<8256=8265,8257
<8257=8259,8258
<8259=8260
<8260=8262,8261
<8262=8264,8263
<8266=8267
<8267=8268
<8268=8273,8272,8269
<8269=8271,8270
<8274=9449,8275
<8275=9430,9397,9393,9389,9363,9337,9316,9290,9264,9238,9205,9191,9163,9133,9103,8999,8909,8902,8891,8884,8785,8772,8740,8711,8678,8641,8593,8540,8520,8501,8461,8421,8330,8287,8276
<8276=8277
<8277=8286,8278
<8278=8282,8279
<8279=8280
<8280=8281
<8282=8283
<8283=8285,8284
<8287=8321,8288
<8288=8309,8289
<8289=8290
<8290=8308,8291
<8291=8303,8292
<8292=8298,8293
<8293=8295,8294
<8295=8297,8296
<8298=8300,8299
<8300=8302,8301
<8303=8305,8304
<8305=8307,8306
<8309=8310
<8310=8320,8319,8311
<8311=8315,8312
<8312=8313
<8313=8314
<8315=8316
<8316=8318,8317
<8321=8322
<8322=8326,8323
<8323=8324
<8324=8325
<8326=8327
<8327=8329,8328
<8330=8412,8331
<8331=8405,8389,8385,8373,8355,8332
<8332=8333
<8333=8351,8334
<8334=8349,8347,8345,8343,8341,8339,8337,8335
<8335=8336
<8337=8338
<8339=8340
<8341=8342
<8343=8344
<8345=8346
<8347=8348
<8349=8350
<8351=8352
<8352=8354,8353
<8355=8356
<8356=8372,8357
<8357=8371,8358
<8358=8370,8359
<8359=8369,8360
<8360=8368,8361
<8361=8367,8362
<8362=8366,8363
<8363=8365,8364
<8373=8374
<8374=8384,8383,8375
<8375=8379,8376
<8376=8377
<8377=8378
<8379=8380
<8380=8382,8381
<8385=8386
<8386=8388,8387
<8389=8402,8399,8396,8393,8390
<8390=8392,8391
<8393=8395,8394
<8396=8398,8397
<8399=8401,8400
<8402=8404,8403
<8405=8409,8406
<8406=8408,8407
<8409=8411,8410
<8412=8413
<8413=8417,8414
<8414=8415
<8415=8416
<8417=8418
<8418=8420,8419
<8421=8452,8422
<8422=8445,8433,8429,8423
<8423=8424
<8424=8426,8425
<8426=8428,8427
<8429=8430
<8430=8432,8431
<8433=8434
<8434=8444,8443,8435
<8435=8439,8436
<8436=8437
<8437=8438
<8439=8440
<8440=8442,8441
<8445=8446
<8446=8451,8450,8447
<8447=8449,8448
<8452=8453
<8453=8457,8454
<8454=8455
<8455=8456
<8457=8458
<8458=8460,8459
<8461=8492,8462
<8462=8485,8473,8469,8463
<8463=8464
<8464=8466,8465
<8466=8468,8467
<8469=8470
<8470=8472,8471
<8473=8474
<8474=8484,8483,8475
<8475=8479,8476
<8476=8477
<8477=8478
<8479=8480
<8480=8482,8481
<8485=8486
<8486=8491,8490,8487
<8487=8489,8488
<8492=8493
<8493=8497,8494
<8494=8495
<8495=8496
<8497=8498
<8498=8500,8499
<8501=8511,8502
<8502=8503
<8503=8504
<8504=8508,8505
<8505=8507,8506
<8508=8510,8509
<8511=8512
<8512=8516,8513
<8513=8514
<8514=8515
<8516=8517
<8517=8519,8518
<8520=8531,8521
<8521=8522
<8522=8523
<8523=8527,8524
<8524=8525
<8525=8526
<8527=8528
<8528=8530,8529
<8531=8532
<8532=8536,8533
<8533=8534
<8534=8535
<8536=8537
<8537=8539,8538
<8540=8584,8541
<8541=8577,8565,8559,8542
<8542=8543
<8543=8556,8544
<8544=8553,8545
<8545=8551,8546
<8546=8549,8547
<8547=8548
<8549=8550
<8551=8552
<8553=8555,8554
<8556=8558,8557
<8559=8560
<8560=8564,8561
<8561=8563,8562
<8565=8566
<8566=8576,8575,8567
<8567=8571,8568
<8568=8569
<8569=8570
<8571=8572
<8572=8574,8573
<8577=8581,8578
<8578=8580,8579
<8581=8583,8582
<8584=8585
<8585=8589,8586
<8586=8587
<8587=8588
<8589=8590
<8590=8592,8591
<8593=8632,8594
<8594=8620,8616,8612,8606,8595
<8595=8596
<8596=8602,8597
<8597=8600,8598
<8598=8599
<8600=8601
<8602=8603
<8603=8605,8604
<8606=8607
<8607=8611,8608
<8608=8610,8609
<8612=8613
<8613=8615,8614
<8616=8617
<8617=8619,8618
<8620=8621
<8621=8631,8630,8622
<8622=8626,8623
<8623=8624
<8624=8625
<8626=8627
<8627=8629,8628
<8632=8633
<8633=8637,8634
<8634=8635
<8635=8636
<8637=8638
<8638=8640,8639
<8641=8669,8642
<8642=8657,8643
<8643=8644
<8644=8656,8645
<8645=8651,8646
<8646=8648,8647
<8648=8650,8649
<8651=8653,8652
<8653=8655,8654
<8657=8658
<8658=8668,8667,8659
<8659=8663,8660
<8660=8661
<8661=8662
<8663=8664
<8664=8666,8665
<8669=8670
<8670=8674,8671
<8671=8672
<8672=8673
<8674=8675
<8675=8677,8676
<8678=8702,8679
<8679=8680
<8680=8681
<8681=8699,8682
<8682=8696,8683
<8683=8694,8684
<8684=8685
<8685=8686
<8686=8690,8687
<8687=8688
<8688=8689
<8690=8691
<8691=8693,8692
<8694=8695
<8696=8698,8697
<8699=8701,8700
<8702=8703
<8703=8707,8704
<8704=8705
<8705=8706
<8707=8708
<8708=8710,8709
<8711=8731,8712
<8712=8713
<8713=8714
<8714=8728,8715
<8715=8726,8716
<8716=8717
<8717=8718
<8718=8722,8719
<8719=8720
<8720=8721
<8722=8723
<8723=8725,8724
<8726=8727
<8728=8730,8729
<8731=8732
<8732=8736,8733
<8733=8734
<8734=8735
<8736=8737
<8737=8739,8738
<8740=8763,8741
<8741=8742
<8742=8743
<8743=8759,8744
<8744=8745
<8745=8746
<8746=8757,8747
<8747=8748
<8748=8749
<8749=8753,8750
<8750=8751
<8751=8752
<8753=8754
<8754=8756,8755
<8757=8758
<8759=8760
<8760=8762,8761
<8763=8764
<8764=8768,8765
<8765=8766
<8766=8767
<8768=8769
<8769=8771,8770
<8772=8783,8773
<8773=8774
<8774=8775
<8775=8779,8776
<8776=8777
<8777=8778
<8779=8780
<8780=8782,8781
<8783=8784
<8785=8882,8786
<8786=8875,8871,8838,8802,8791,8787
<8787=8788
<8788=8790,8789
<8791=8792
<8792=8801,8793
<8793=8797,8794
<8794=8795
<8795=8796
<8797=8798
<8798=8800,8799
<8802=8829,8803
<8803=8804
<8804=8827,8805
<8805=8806
<8806=8807
<8807=8823,8808
<8808=8809
<8809=8810
<8810=8821,8811
<8811=8812
<8812=8813
<8813=8817,8814
<8814=8815
<8815=8816
<8817=8818
<8818=8820,8819
<8821=8822
<8823=8824
<8824=8826,8825
<8827=8828
<8829=8830
<8830=8834,8831
<8831=8832
<8832=8833
<8834=8835
<8835=8837,8836
<8838=8862,8839
<8839=8851,8840
<8840=8841
<8841=8850,8842
<8842=8846,8843
<8843=8844
<8844=8845
<8846=8847
<8847=8849,8848
<8851=8852
<8852=8861,8853
<8853=8857,8854
<8854=8855
<8855=8856
<8857=8858
<8858=8860,8859
<8862=8863
<8863=8867,8864
<8864=8865
<8865=8866
<8867=8868
<8868=8870,8869
<8871=8872
<8872=8874,8873
<8875=8876
<8876=8881,8880,8877
<8877=8879,8878
<8882=8883
<8884=8885
<8885=8890,8889,8886
<8886=8888,8887
<8891=8892
<8892=8901,8893
<8893=8897,8894
<8894=8895
<8895=8896
<8897=8898
<8898=8900,8899
<8902=8903
<8903=8908,8907,8904
<8904=8906,8905
<8909=8990,8910
<8910=8977,8970,8966,8911
<8911=8962,8912
<8912=8958,8954,8953,8952,8951,8950,8949,8948,8947,8946,8944,8933,8922,8913
<8913=8914
<8914=8918,8915
<8915=8916
<8916=8917
<8918=8919
<8919=8921,8920
<8922=8923
<8923=8929,8924
<8924=8927,8925
<8925=8926
<8927=8928
<8929=8930
<8930=8932,8931
<8933=8934
<8934=8943,8942,8935
<8935=8941,8936
<8936=8938,8937
<8938=8940,8939
<8944=8945
<8954=8955
<8955=8957,8956
<8958=8959
<8959=8961,8960
<8962=8963
<8963=8965,8964
<8966=8967
<8967=8969,8968
<8970=8971
<8971=8976,8975,8972
<8972=8974,8973
<8977=8978
<8978=8987,8979
<8979=8983,8980
<8980=8981
<8981=8982
<8983=8984
<8984=8986,8985
<8987=8989,8988
<8990=8991
<8991=8995,8992
<8992=8993
<8993=8994
<8995=8996
<8996=8998,8997
<8999=9094,9000
<9000=9082,9075,9071,9001
<9001=9063,9059,9056,9002
<9002=9052,9039,9029,9014,9003
<9003=9004
<9004=9008,9005
<9005=9006
<9006=9007
<9008=9009
<9009=9011,9010
<9011=9013,9012
<9014=9015
<9015=9025,9016
<9016=9023,9021,9019,9017
<9017=9018
<9019=9020
<9021=9022
<9023=9024
<9025=9026
<9026=9028,9027
<9029=9030
<9030=9038,9031
<9031=9037,9032
<9032=9036,9033
<9033=9035,9034
<9039=9049,9046,9043,9040
<9040=9042,9041
<9043=9045,9044
<9046=9048,9047
<9049=9051,9050
<9052=9053
<9053=9055,9054
<9056=9058,9057
<9059=9060
<9060=9062,9061
<9063=9064
<9064=9065
<9065=9070,9069,9066
<9066=9068,9067
<9071=9072
<9072=9074,9073
<9075=9076
<9076=9081,9080,9077
<9077=9079,9078
<9082=9083
<9083=9093,9092,9084
<9084=9088,9085
<9085=9086
<9086=9087
<9088=9089
<9089=9091,9090
<9094=9095
<9095=9099,9096
<9096=9097
<9097=9098
<9099=9100
<9100=9102,9101
<9103=9124,9104
<9104=9105
<9105=9119,9106
<9106=9117,9107
<9107=9108
<9108=9109
<9109=9113,9110
<9110=9111
<9111=9112
<9113=9114
<9114=9116,9115
<9117=9118
<9119=9121,9120
<9121=9123,9122
<9124=9125
<9125=9129,9126
<9126=9127
<9127=9128
<9129=9130
<9130=9132,9131
<9133=9154,9134
<9134=9135
<9135=9149,9136
<9136=9147,9137
<9137=9138
<9138=9139
<9139=9143,9140
<9140=9141
<9141=9142
<9143=9144
<9144=9146,9145
<9147=9148
<9149=9151,9150
<9151=9153,9152
<9154=9155
<9155=9159,9156
<9156=9157
<9157=9158
<9159=9160
<9160=9162,9161
<9163=9164
<9164=9190,9189,9165
<9165=9188,9166
<9166=9186,9167
<9167=9184,9182,9180,9178,9176,9174,9172,9170,9168
<9168=9169
<9170=9171
<9172=9173
<9174=9175
<9176=9177
<9178=9179
<9180=9181
<9182=9183
<9184=9185
<9186=9187
<9191=9192
<9192=9204,9203,9193
<9193=9202,9194
<9194=9198,9195
<9195=9196
<9196=9197
<9198=9199
<9199=9201,9200
<9205=9229,9206
<9206=9217,9207
<9207=9208
<9208=9216,9209
<9209=9213,9210
<9210=9212,9211
<9213=9215,9214
<9217=9218
<9218=9228,9227,9219
<9219=9223,9220
<9220=9221
<9221=9222
<9223=9224
<9224=9226,9225
<9229=9230
<9230=9234,9231
<9231=9232
<9232=9233
<9234=9235
<9235=9237,9236
<9238=9255,9239
<9239=9240
<9240=9254,9241
<9241=9252,9242
<9242=9243
<9243=9244
<9244=9248,9245
<9245=9246
<9246=9247
<9248=9249
<9249=9251,9250
<9252=9253
<9255=9256
<9256=9260,9257
<9257=9258
<9258=9259
<9260=9261
<9261=9263,9262
<9264=9281,9265
<9265=9266
<9266=9280,9267
<9267=9278,9268
<9268=9269
<9269=9270
<9270=9274,9271
<9271=9272
<9272=9273
<9274=9275
<9275=9277,9276
<9278=9279
<9281=9282
<9282=9286,9283
<9283=9284
<9284=9285
<9286=9287
<9287=9289,9288
<9290=9307,9291
<9291=9292
<9292=9306,9293
<9293=9304,9294
<9294=9295
<9295=9296
<9296=9300,9297
<9297=9298
<9298=9299
<9300=9301
<9301=9303,9302
<9304=9305
<9307=9308
<9308=9312,9309
<9309=9310
<9310=9311
<9312=9313
<9313=9315,9314
<9316=9328,9317
<9317=9318
<9318=9327,9319
<9319=9323,9320
<9320=9321
<9321=9322
<9323=9324
<9324=9326,9325
<9328=9329
<9329=9333,9330
<9330=9331
<9331=9332
<9333=9334
<9334=9336,9335
<9337=9354,9338
<9338=9339
<9339=9353,9340
<9340=9351,9341
<9341=9342
<9342=9343
<9343=9347,9344
<9344=9345
<9345=9346
<9347=9348
<9348=9350,9349
<9351=9352
<9354=9355
<9355=9359,9356
<9356=9357
<9357=9358
<9359=9360
<9360=9362,9361
<9363=9380,9364
<9364=9365
<9365=9379,9366
<9366=9377,9367
<9367=9368
<9368=9369
<9369=9373,9370
<9370=9371
<9371=9372
<9373=9374
<9374=9376,9375
<9377=9378
<9380=9381
<9381=9385,9382
<9382=9383
<9383=9384
<9385=9386
<9386=9388,9387
<9389=9390
<9390=9392,9391
<9393=9394
<9394=9396,9395
<9397=9422,9416,9410,9404,9398
<9398=9403,9402,9399
<9399=9401,9400
<9404=9409,9408,9405
<9405=9407,9406
<9410=9415,9414,9411
<9411=9413,9412
<9416=9421,9420,9417
<9417=9419,9418
<9422=9429,9428,9423
<9423=9427,9424
<9424=9426,9425
<9430=9431
<9431=9448,9447,9432
<9432=9446,9433
<9433=9444,9434
<9434=9435
<9435=9436
<9436=9440,9437
<9437=9438
<9438=9439
<9440=9441
<9441=9443,9442
<9444=9445
<9449=9450
<9451=9452
<9452=9464,9463,9453
<9453=9462,9454
<9454=9458,9455
<9455=9456
<9456=9457
<9458=9459
<9459=9461,9460
<9465=9489,9466
<9466=9477,9467
<9467=9468
<9468=9476,9469
<9469=9473,9470
<9470=9472,9471
<9473=9475,9474
<9477=9478
<9478=9488,9487,9479
<9479=9483,9480
<9480=9481
<9481=9482
<9483=9484
<9484=9486,9485
<9489=9490
<9490=9494,9491
<9491=9492
<9492=9493
<9494=9495
<9495=9497,9496
<9498=9499
<9500=9501
<9501=9513,9512,9502
<9502=9511,9503
<9503=9507,9504
<9504=9505
<9505=9506
<9507=9508
<9508=9510,9509
<9514=9515
<9515=9517,9516
<9518=9536,9519
<9519=9532,9521,9520
<9521=9522
<9522=9530,9523
<9523=9524
<9524=9525
<9525=9529,9526
<9526=9528,9527
<9530=9531
<9532=9533
<9533=9535,9534
<9536=9537
<9537=9539,9538
<9540=9541
<9541=9553,9552,9542
<9542=9551,9543
<9543=9549,9544
<9544=9547,9545
<9545=9546
<9547=9548
<9549=9550
<9554=9555
<9555=9564,9556
<9556=9560,9557
<9557=9558
<9558=9559
<9560=9561
<9561=9563,9562
<9565=9583,9566
<9566=9579,9568,9567
<9568=9569
<9569=9577,9570
<9570=9571
<9571=9572
<9572=9576,9573
<9573=9575,9574
<9577=9578
<9579=9580
<9580=9582,9581
<9583=9584
<9584=9591,9585
<9585=9589,9586
<9586=9587
<9587=9588
<9589=9590
<9592=9602,9593
<9593=9594
<9594=9595
<9595=9601,9596
<9596=9600,9597
<9597=9599,9598
<9602=9603
<9603=9614,9604
<9604=9613,9605
<9605=9611,9606
<9606=9609,9607
<9607=9608
<9609=9610
<9611=9612
<9614=9616,9615
<9616=9617
<9617=9619,9618
<9620=9630,9621
<9621=9622
<9622=9623
<9623=9629,9624
<9624=9628,9625
<9625=9627,9626
<9630=9631
<9631=9638,9632
<9632=9634,9633
<9634=9635
<9635=9637,9636
<9639=9640
<9640=9642,9641
<9643=9644
<9644=9648,9645
<9645=9646
<9646=9647
<9648=9649
<9650=9651
<9651=9653,9652
<9654=9655
<9655=9657,9656
<9657=9658
<9659=9660
<9660=9662,9661
<9662=9663
<9663=9665,9664
<9666=9667
<9667=9669,9668
<9669=9670
<9671=9672
<9672=9674,9673
<9675=9676
<9676=9678,9677
<9850=9856,9855,9851
<9851=9852
<9852=9854,9853
<9856=9857
<9857=9858
<9858=9868,9860,9859
<9860=9862,9861
<9862=9863
<9863=9865,9864
<9865=9867,9866
<9868=9869
<9869=9876,9870
<9870=9872,9871
<9872=9873
<9873=9875,9874
<9887=9896,9895,9888
<9888=9892,9889
<9889=9891,9890
<9892=9894,9893
<9896=9897
<9897=9906,9898
<9898=9899
<9899=9901,9900
<9901=9903,9902
<9903=9905,9904
<9906=9907
<9907=9914,9908
<9908=9910,9909
<9910=9911
<9911=9913,9912
<9925=9928,9927,9926
<9928=10894,10877,10860,10850,10841,10832,10823,10819,10799,10692,10688,10681,9929
<9929=10673,10662,10659,9930
<9930=10646,10635,10620,9931
<9931=10614,9932
<9932=10610,10513,10501,9933
<9933=10497,9934
<9934=10483,10469,9935
<9935=10465,9936
<9936=9937
<9937=10457,10298,9938
<9938=9939
<9939=10289,10232,10195,10133,9940
<9940=10116,9941
<9941=10079,10042,9957,9942
<9942=9943
<9943=9953,9944
<9944=9949,9945
<9945=9946
<9946=9948,9947
<9949=9950
<9950=9952,9951
<9953=9954
<9954=9956,9955
<9957=10034,10023,10020,9958
<9958=9959
<9959=9960
<9960=10015,9961
<9961=10013,9962
<9962=9988,9963
<9963=9964
<9964=9986,9965
<9965=9978,9970,9968,9966
<9966=9967
<9968=9969
<9970=9971
<9971=9973,9972
<9973=9975,9974
<9975=9977,9976
<9978=9979
<9979=9981,9980
<9981=9983,9982
<9983=9985,9984
<9986=9987
<9988=9989
<9989=10011,9990
<9990=10003,9995,9993,9991
<9991=9992
<9993=9994
<9995=9996
<9996=9998,9997
<9998=10000,9999
<10000=10002,10001
<10003=10004
<10004=10006,10005
<10006=10008,10007
<10008=10010,10009
<10011=10012
<10013=10014
<10015=10017,10016
<10017=10019,10018
<10020=10022,10021
<10023=10024
<10024=10033,10025
<10025=10027,10026
<10027=10028
<10028=10030,10029
<10030=10032,10031
<10034=10035
<10035=10036
<10036=10041,10040,10037
<10037=10039,10038
<10042=10061,10043
<10043=10044
<10044=10055,10045
<10045=10046
<10046=10047
<10047=10049,10048
<10049=10050
<10050=10052,10051
<10052=10054,10053
<10055=10056
<10056=10058,10057
<10058=10060,10059
<10061=10062
<10062=10071,10063
<10063=10065,10064
<10065=10066
<10066=10068,10067
<10068=10070,10069
<10071=10073,10072
<10073=10074
<10074=10076,10075
<10076=10078,10077
<10079=10098,10080
<10080=10081
<10081=10092,10082
<10082=10083
<10083=10084
<10084=10086,10085
<10086=10087
<10087=10089,10088
<10089=10091,10090
<10092=10093
<10093=10095,10094
<10095=10097,10096
<10098=10099
<10099=10108,10100
<10100=10102,10101
<10102=10103
<10103=10105,10104
<10105=10107,10106
<10108=10110,10109
<10110=10111
<10111=10113,10112
<10113=10115,10114
<10116=10117
<10117=10128,10118
<10118=10127,10119
<10119=10121,10120
<10121=10122
<10122=10124,10123
<10124=10126,10125
<10128=10130,10129
<10130=10132,10131
<10133=10181,10134
<10134=10158,10135
<10135=10136
<10136=10153,10137
<10137=10151,10138
<10138=10147,10143,10141,10139
<10139=10140
<10141=10142
<10143=10144
<10144=10146,10145
<10147=10148
<10148=10150,10149
<10151=10152
<10153=10155,10154
<10155=10157,10156
<10158=10159
<10159=10176,10160
<10160=10174,10161
<10161=10170,10166,10164,10162
<10162=10163
<10164=10165
<10166=10167
<10167=10169,10168
<10170=10171
<10171=10173,10172
<10174=10175
<10176=10178,10177
<10178=10180,10179
<10181=10182
<10182=10190,10183
<10183=10187,10184
<10184=10186,10185
<10187=10189,10188
<10190=10192,10191
<10192=10194,10193
<10195=10220,10196
<10196=10197
<10197=10198
<10198=10215,10199
<10199=10213,10200
<10200=10209,10205,10203,10201
<10201=10202
<10203=10204
<10205=10206
<10206=10208,10207
<10209=10210
<10210=10212,10211
<10213=10214
<10215=10217,10216
<10217=10219,10218
<10220=10221
<10221=10227,10222
<10222=10224,10223
<10224=10226,10225
<10227=10229,10228
<10229=10231,10230
<10232=10277,10233
<10233=10234
<10234=10235
<10235=10274,10236
<10236=10272,10237
<10237=10255,10238
<10238=10239
<10239=10253,10240
<10240=10249,10245,10243,10241
<10241=10242
<10243=10244
<10245=10246
<10246=10248,10247
<10249=10250
<10250=10252,10251
<10253=10254
<10255=10256
<10256=10270,10257
<10257=10266,10262,10260,10258
<10258=10259
<10260=10261
<10262=10263
<10263=10265,10264
<10266=10267
<10267=10269,10268
<10270=10271
<10272=10273
<10274=10276,10275
<10277=10278
<10278=10284,10279
<10279=10281,10280
<10281=10283,10282
<10284=10286,10285
<10286=10288,10287
<10289=10290
<10290=10297,10296,10291
<10291=10295,10292
<10292=10294,10293
<10298=10419,10400,10357,10339,10320,10299
<10299=10308,10300
<10300=10301
<10301=10303,10302
<10303=10305,10304
<10305=10307,10306
<10308=10309
<10309=10315,10310
<10310=10312,10311
<10312=10314,10313
<10315=10317,10316
<10317=10319,10318
<10320=10327,10321
<10321=10322
<10322=10324,10323
<10324=10326,10325
<10327=10328
<10328=10334,10329
<10329=10331,10330
<10331=10333,10332
<10334=10336,10335
<10336=10338,10337
<10339=10340
<10340=10356,10341
<10341=10347,10342
<10342=10344,10343
<10344=10346,10345
<10347=10349,10348
<10349=10355,10350
<10350=10352,10351
<10352=10354,10353
<10357=10358
<10358=10399,10359
<10359=10397,10360
<10360=10379,10361
<10361=10362
<10362=10368,10363
<10363=10365,10364
<10365=10367,10366
<10368=10370,10369
<10370=10376,10371
<10371=10373,10372
<10373=10375,10374
<10376=10378,10377
<10379=10380
<10380=10386,10381
<10381=10383,10382
<10383=10385,10384
<10386=10388,10387
<10388=10394,10389
<10389=10391,10390
<10391=10393,10392
<10394=10396,10395
<10397=10398
<10400=10401
<10401=10418,10417,10402
<10402=10416,10403
<10403=10407,10404
<10404=10406,10405
<10407=10409,10408
<10409=10413,10410
<10410=10412,10411
<10413=10415,10414
<10419=10420
<10420=10456,10455,10421
<10421=10454,10422
<10422=10452,10423
<10423=10438,10424
<10424=10425
<10425=10429,10426
<10426=10428,10427
<10429=10431,10430
<10431=10435,10432
<10432=10434,10433
<10435=10437,10436
<10438=10439
<10439=10443,10440
<10440=10442,10441
<10443=10445,10444
<10445=10449,10446
<10446=10448,10447
<10449=10451,10450
<10452=10453
<10457=10458
<10458=10462,10459
<10459=10461,10460
<10462=10464,10463
<10465=10466
<10466=10468,10467
<10469=10470
<10470=10482,10481,10471
<10471=10480,10472
<10472=10476,10473
<10473=10474
<10474=10475
<10476=10477
<10477=10479,10478
<10483=10484
<10484=10496,10495,10485
<10485=10494,10486
<10486=10490,10487
<10487=10488
<10488=10489
<10490=10491
<10491=10493,10492
<10497=10498
<10498=10500,10499
<10501=10507,10502
<10502=10503
<10503=10504
<10504=10506,10505
<10507=10508
<10508=10510,10509
<10510=10512,10511
<10513=10601,10565,10514
<10514=10515
<10515=10556,10516
<10516=10552,10517
<10517=10544,10535,10532,10518
<10518=10519
<10519=10526,10520
<10520=10522,10521
<10522=10523
<10523=10525,10524
<10526=10527
<10527=10531,10528
<10528=10530,10529
<10532=10534,10533
<10535=10536
<10536=10543,10537
<10537=10539,10538
<10539=10540
<10540=10542,10541
<10544=10545
<10545=10546
<10546=10551,10550,10547
<10547=10549,10548
<10552=10553
<10553=10555,10554
<10556=10557
<10557=10564,10558
<10558=10560,10559
<10560=10561
<10561=10563,10562
<10565=10566
<10566=10593,10584,10581,10567
<10567=10568
<10568=10575,10569
<10569=10571,10570
<10571=10572
<10572=10574,10573
<10575=10576
<10576=10580,10577
<10577=10579,10578
<10581=10583,10582
<10584=10585
<10585=10592,10586
<10586=10588,10587
<10588=10589
<10589=10591,10590
<10593=10594
<10594=10595
<10595=10600,10599,10596
<10596=10598,10597
<10601=10602
<10602=10609,10603
<10603=10605,10604
<10605=10606
<10606=10608,10607
<10610=10611
<10611=10613,10612
<10614=10615
<10615=10617,10616
<10617=10619,10618
<10620=10629,10621
<10621=10622
<10622=10623
<10623=10625,10624
<10625=10626
<10626=10628,10627
<10629=10630
<10630=10632,10631
<10632=10634,10633
<10635=10636
<10636=10645,10644,10637
<10637=10643,10638
<10638=10640,10639
<10640=10642,10641
<10646=10647
<10647=10658,10657,10648
<10648=10656,10649
<10649=10651,10650
<10651=10653,10652
<10653=10655,10654
<10659=10661,10660
<10662=10663
<10663=10672,10664
<10664=10666,10665
<10666=10667
<10667=10669,10668
<10669=10671,10670
<10673=10674
<10674=10675
<10675=10680,10679,10676
<10676=10678,10677
<10681=10682
<10682=10687,10686,10683
<10683=10685,10684
<10688=10689
<10689=10691,10690
<10692=10795,10693
<10693=10769,10721,10694
<10694=10717,10695
<10695=10696
<10696=10697
<10697=10711,10698
<10698=10699
<10699=10700
<10700=10704,10701
<10701=10702
<10702=10703
<10704=10705
<10705=10707,10706
<10707=10709,10708
<10709=10710
<10711=10712
<10712=10714,10713
<10714=10716,10715
<10717=10718
<10718=10720,10719
<10721=10758,10722
<10722=10723
<10723=10750,10739,10736,10724
<10724=10725
<10725=10726
<10726=10728,10727
<10728=10729
<10729=10731,10730
<10731=10733,10732
<10733=10735,10734
<10736=10738,10737
<10739=10740
<10740=10749,10741
<10741=10743,10742
<10743=10744
<10744=10746,10745
<10746=10748,10747
<10750=10751
<10751=10752
<10752=10757,10756,10753
<10753=10755,10754
<10758=10759
<10759=10768,10760
<10760=10762,10761
<10762=10763
<10763=10765,10764
<10765=10767,10766
<10769=10784,10770
<10770=10771
<10771=10772
<10772=10778,10773
<10773=10774
<10774=10775
<10775=10777,10776
<10778=10779
<10779=10781,10780
<10781=10783,10782
<10784=10785
<10785=10794,10786
<10786=10788,10787
<10788=10789
<10789=10791,10790
<10791=10793,10792
<10795=10796
<10796=10798,10797
<10799=10815,10805,10800
<10800=10801
<10801=10802
<10802=10804,10803
<10805=10806
<10806=10814,10807
<10807=10811,10808
<10808=10810,10809
<10811=10813,10812
<10815=10816
<10816=10818,10817
<10819=10820
<10820=10822,10821
<10823=10824
<10824=10831,10830,10825
<10825=10829,10826
<10826=10828,10827
<10832=10833
<10833=10840,10839,10834
<10834=10838,10835
<10835=10837,10836
<10841=10842
<10842=10849,10848,10843
<10843=10847,10844
<10844=10846,10845
<10850=10852,10851
<10852=10853
<10853=10857,10854
<10854=10856,10855
<10857=10859,10858
<10860=10861
<10861=10876,10875,10862
<10862=10874,10863
<10863=10867,10864
<10864=10865
<10865=10866
<10867=10868
<10868=10870,10869
<10870=10872,10871
<10872=10873
<10877=10878
<10878=10893,10892,10879
<10879=10891,10880
<10880=10884,10881
<10881=10882
<10882=10883
<10884=10885
<10885=10887,10886
<10887=10889,10888
<10889=10890
<10894=10896,10895
<10896=10897
<10897=10913,10898
<10898=10902,10899
<10899=10901,10900
<10902=10912,10903
<10903=10905,10904
<10905=10911,10906
<10906=10908,10907
<10908=10910,10909
<10913=10915,10914
<11037=11043,11042,11038
<11038=11039
<11039=11041,11040
<11043=11044
<11044=11045
<11045=11047,11046
<11053=11056,11055,11054
<11056=11057
<11057=11090,11058
<11058=11059
<11059=11082,11073,11070,11060
<11060=11061
<11061=11062
<11062=11064,11063
<11064=11065
<11065=11067,11066
<11067=11069,11068
<11070=11072,11071
<11073=11074
<11074=11081,11075
<11075=11077,11076
<11077=11078
<11078=11080,11079
<11082=11083
<11083=11084
<11084=11089,11088,11085
<11085=11087,11086
<11090=11091
<11091=11093,11092
<11103=11109,11108,11104
<11104=11105
<11105=11107,11106
<11109=11110
<11110=11111
<11111=11113,11112
<11113=11115,11114
<11124=11133,11132,11125
<11125=11129,11126
<11126=11128,11127
<11129=11131,11130
<11133=11134
<11134=11135
<11135=11137,11136
<11137=11139,11138
<11139=11141,11140
<11151=11157,11156,11152
<11152=11153
<11153=11155,11154
<11157=11351,11187,11160,11158
<11158=11159
<11160=11165,11161
<11161=11162
<11162=11164,11163
<11165=11166
<11166=11179,11167
<11167=11176,11168
<11168=11175,11169
<11169=11171,11170
<11171=11172
<11172=11174,11173
<11176=11178,11177
<11179=11186,11180
<11180=11182,11181
<11182=11183
<11183=11185,11184
<11187=11349,11188
<11188=11342,11335,11324,11210,11191,11189
<11189=11190
<11191=11208,11192
<11192=11193
<11193=11194
<11194=11205,11195
<11195=11203,11196
<11196=11201,11199,11197
<11197=11198
<11199=11200
<11201=11202
<11203=11204
<11205=11207,11206
<11208=11209
<11210=11316,11307,11304,11211
<11211=11212
<11212=11291,11213
<11213=11274,11214
<11214=11257,11215
<11215=11236,11216
<11216=11232,11217
<11217=11228,11222,11218
<11218=11219
<11219=11221,11220
<11222=11223
<11223=11227,11224
<11224=11226,11225
<11228=11229
<11229=11231,11230
<11232=11233
<11233=11235,11234
<11236=11237
<11237=11256,11255,11238
<11238=11254,11239
<11239=11241,11240
<11241=11242
<11242=11244,11243
<11244=11246,11245
<11246=11248,11247
<11248=11249
<11249=11251,11250
<11251=11253,11252
<11257=11258
<11258=11269,11259
<11259=11263,11260
<11260=11261
<11261=11262
<11263=11264
<11264=11266,11265
<11266=11268,11267
<11269=11271,11270
<11271=11273,11272
<11274=11275
<11275=11286,11276
<11276=11284,11277
<11277=11282,11280,11278
<11278=11279
<11280=11281
<11282=11283
<11284=11285
<11286=11288,11287
<11288=11290,11289
<11291=11292
<11292=11299,11293
<11293=11295,11294
<11295=11296
<11296=11298,11297
<11299=11301,11300
<11301=11303,11302
<11304=11306,11305
<11307=11308
<11308=11315,11309
<11309=11311,11310
<11311=11312
<11312=11314,11313
<11316=11317
<11317=11318
<11318=11323,11322,11319
<11319=11321,11320
<11324=11325
<11325=11334,11333,11326
<11326=11332,11327
<11327=11329,11328
<11329=11331,11330
<11335=11336
<11336=11341,11340,11337
<11337=11339,11338
<11342=11343
<11343=11348,11347,11344
<11344=11346,11345
<11349=11350
<11351=11354,11352
<11352=11353
<11354=11355
<11355=11357,11356
<11391=11394,11393,11392
<11394=11422,11413,11395
<11395=11411,11396
<11396=11397
<11397=11408,11398
<11398=11406,11399
<11399=11404,11402,11400
<11400=11401
<11402=11403
<11404=11405
<11406=11407
<11408=11410,11409
<11411=11412
<11413=11414
<11414=11421,11420,11415
<11415=11419,11416
<11416=11418,11417
<11422=11453,11444,11441,11423
<11423=11424
<11424=11425
<11425=11436,11426
<11426=11434,11427
<11427=11432,11430,11428
<11428=11429
<11430=11431
<11432=11433
<11434=11435
<11436=11438,11437
<11438=11440,11439
<11441=11443,11442
<11444=11445
<11445=11452,11446
<11446=11448,11447
<11448=11449
<11449=11451,11450
<11453=11454
<11454=11455
<11455=11460,11459,11456
<11456=11458,11457
<11478=11484,11483,11479
<11479=11480
<11480=11482,11481
<11484=11490,11485
<11485=11486
<11486=11488,11487
<11488=11489
<11490=11491
<11491=11493,11492
<11499=11502,11501,11500
<11502=11522,11508,11503
<11503=11504
<11504=11506,11505
<11506=11507
<11508=11513,11509
<11509=11510
<11510=11512,11511
<11513=11514
<11514=11521,11515
<11515=11517,11516
<11517=11518
<11518=11520,11519
<11522=11523
<11523=11525,11524
<11532=11535,11534,11533
<11535=11557,11541,11536
<11536=11537
<11537=11539,11538
<11539=11540
<11541=11553,11542
<11542=11543
<11543=11552,11544
<11544=11546,11545
<11546=11548,11547
<11548=11549
<11549=11551,11550
<11553=11554
<11554=11556,11555
<11557=11558
<11558=11560,11559
