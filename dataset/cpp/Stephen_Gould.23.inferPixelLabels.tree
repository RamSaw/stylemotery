>16	FunctionDef	InferenceThread ()
>17	ParameterList	 
>18	CompoundStatement	 
>22	FunctionDef	~InferenceThread ()
>23	ParameterList	 
>24	CompoundStatement	 
>28	FunctionDef	operator ( ) ()
>29	ParameterList	 
>30	ReturnType	void
>31	CompoundStatement	 
>32	IfStatement	if ( outUnaryExt != NULL )
>33	CompoundStatement	 
>34	ExpressionStatement	 
>35	CallExpression	ofs . close ( )
>36	ArgumentList	 
>37	Callee	ofs . close
>38	MemberAccess	ofs . close
>39	Identifier	close
>40	Identifier	ofs
>41	ForStatement	for ( int i = 0 ; i < instance . size ( ) ; i ++ )
>42	CompoundStatement	 
>43	ExpressionStatement	 
>44	ShiftExpression	ofs << toString ( instance . unaries [ i ] ) << \"\n\"
>45	ShiftExpression	toString ( instance . unaries [ i ] ) << \"\n\"
>46	PrimaryExpression	\"\n\"
>47	CallExpression	toString ( instance . unaries [ i ] )
>48	ArgumentList	instance . unaries [ i ]
>49	Argument	instance . unaries [ i ]
>50	ArrayIndexing	instance . unaries [ i ]
>51	Identifier	i
>52	MemberAccess	instance . unaries
>53	Identifier	unaries
>54	Identifier	instance
>55	Callee	toString
>56	Identifier	toString
>57	Identifier	ofs
>58	IncDecOp	 
>59	IncDec	++
>60	Identifier	i
>61	Condition	 
>62	RelationalExpression	i < instance . size ( )
>63	CallExpression	instance . size ( )
>64	ArgumentList	 
>65	Callee	instance . size
>66	MemberAccess	instance . size
>67	Identifier	size
>68	Identifier	instance
>69	Identifier	i
>70	ForInit	 
>71	IdentifierDeclStatement	int i = 0 ;
>72	IdentifierDecl	i = 0
>73	AssignmentExpr	i = 0
>74	PrimaryExpression	0
>75	Identifier	i
>76	Identifier	i
>77	IdentifierDeclType	int
>78	ExpressionStatement	 
>79	CallExpression	DRWN_ASSERT_MSG ( ! ofs . fail ( ) , filename )
>80	ArgumentList	! ofs . fail ( )
>81	Argument	filename
>82	Identifier	filename
>83	Argument	! ofs . fail ( )
>84	UnaryOp	! ofs . fail ( )
>85	CallExpression	ofs . fail ( )
>86	ArgumentList	 
>87	Callee	ofs . fail
>88	MemberAccess	ofs . fail
>89	Identifier	fail
>90	Identifier	ofs
>91	UnaryOperator	!
>92	Callee	DRWN_ASSERT_MSG
>93	Identifier	DRWN_ASSERT_MSG
>94	IdentifierDeclStatement	 
>95	IdentifierDecl	ofs ( filename . c_str ( ) )
>96	CallExpression	filename . c_str ( )
>97	ArgumentList	 
>98	Callee	filename . c_str
>99	MemberAccess	filename . c_str
>100	Identifier	c_str
>101	Identifier	filename
>102	Identifier	ofs
>103	IdentifierDeclType	ofstream
>104	IdentifierDeclStatement	 
>105	IdentifierDecl	filename = gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outUnaryExt )
>106	AssignmentExpr	filename = gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outUnaryExt )
>107	AdditiveExpression	gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outUnaryExt )
>108	CallExpression	string ( outUnaryExt )
>109	ArgumentList	outUnaryExt
>110	Argument	outUnaryExt
>111	Identifier	outUnaryExt
>112	Callee	string
>113	Identifier	string
>114	CallExpression	gMultiSegConfig . filebase ( \"outputDir\" , * baseName )
>115	ArgumentList	\"outputDir\"
>116	Argument	* baseName
>117	UnaryOp	* baseName
>118	Identifier	baseName
>119	UnaryOperator	*
>120	Argument	\"outputDir\"
>121	PrimaryExpression	\"outputDir\"
>122	Callee	gMultiSegConfig . filebase
>123	MemberAccess	gMultiSegConfig . filebase
>124	Identifier	filebase
>125	Identifier	gMultiSegConfig
>126	Identifier	filename
>127	Identifier	filename
>128	IdentifierDeclType	string
>129	Condition	 
>130	EqualityExpression	outUnaryExt != NULL
>131	Identifier	NULL
>132	Identifier	outUnaryExt
>133	IfStatement	if ( outImageExt != NULL )
>134	CompoundStatement	 
>135	ExpressionStatement	 
>136	CallExpression	cv 
>137	ArgumentList	filename
>138	Argument	canvas
>139	Identifier	canvas
>140	Argument	filename
>141	Identifier	filename
>142	Callee	cv 
>143	Identifier	cv 
>144	IdentifierDeclStatement	 
>145	IdentifierDecl	canvas = drwnMultiSegVis 
>146	AssignmentExpr	canvas = drwnMultiSegVis 
>147	CallExpression	drwnMultiSegVis 
>148	ArgumentList	instance
>149	Argument	instance
>150	Identifier	instance
>151	Callee	drwnMultiSegVis 
>152	Identifier	drwnMultiSegVis 
>153	Identifier	canvas
>154	Identifier	canvas
>155	IdentifierDeclType	cv 
>156	IdentifierDeclStatement	 
>157	IdentifierDecl	filename = gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outImageExt )
>158	AssignmentExpr	filename = gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outImageExt )
>159	AdditiveExpression	gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outImageExt )
>160	CallExpression	string ( outImageExt )
>161	ArgumentList	outImageExt
>162	Argument	outImageExt
>163	Identifier	outImageExt
>164	Callee	string
>165	Identifier	string
>166	CallExpression	gMultiSegConfig . filebase ( \"outputDir\" , * baseName )
>167	ArgumentList	\"outputDir\"
>168	Argument	* baseName
>169	UnaryOp	* baseName
>170	Identifier	baseName
>171	UnaryOperator	*
>172	Argument	\"outputDir\"
>173	PrimaryExpression	\"outputDir\"
>174	Callee	gMultiSegConfig . filebase
>175	MemberAccess	gMultiSegConfig . filebase
>176	Identifier	filebase
>177	Identifier	gMultiSegConfig
>178	Identifier	filename
>179	Identifier	filename
>180	IdentifierDeclType	string
>181	Condition	 
>182	EqualityExpression	outImageExt != NULL
>183	Identifier	NULL
>184	Identifier	outImageExt
>185	IfStatement	if ( outLabelExt != NULL )
>186	CompoundStatement	 
>187	ExpressionStatement	 
>188	CallExpression	ofs . close ( )
>189	ArgumentList	 
>190	Callee	ofs . close
>191	MemberAccess	ofs . close
>192	Identifier	close
>193	Identifier	ofs
>194	ExpressionStatement	 
>195	ShiftExpression	ofs << instance . pixelLabels << \"\n\"
>196	ShiftExpression	instance . pixelLabels << \"\n\"
>197	PrimaryExpression	\"\n\"
>198	MemberAccess	instance . pixelLabels
>199	Identifier	pixelLabels
>200	Identifier	instance
>201	Identifier	ofs
>202	IdentifierDeclStatement	 
>203	IdentifierDecl	ofs ( filename . c_str ( ) )
>204	CallExpression	filename . c_str ( )
>205	ArgumentList	 
>206	Callee	filename . c_str
>207	MemberAccess	filename . c_str
>208	Identifier	c_str
>209	Identifier	filename
>210	Identifier	ofs
>211	IdentifierDeclType	ofstream
>212	IdentifierDeclStatement	 
>213	IdentifierDecl	filename = gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outLabelExt )
>214	AssignmentExpr	filename = gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outLabelExt )
>215	AdditiveExpression	gMultiSegConfig . filebase ( \"outputDir\" , * baseName ) + string ( outLabelExt )
>216	CallExpression	string ( outLabelExt )
>217	ArgumentList	outLabelExt
>218	Argument	outLabelExt
>219	Identifier	outLabelExt
>220	Callee	string
>221	Identifier	string
>222	CallExpression	gMultiSegConfig . filebase ( \"outputDir\" , * baseName )
>223	ArgumentList	\"outputDir\"
>224	Argument	* baseName
>225	UnaryOp	* baseName
>226	Identifier	baseName
>227	UnaryOperator	*
>228	Argument	\"outputDir\"
>229	PrimaryExpression	\"outputDir\"
>230	Callee	gMultiSegConfig . filebase
>231	MemberAccess	gMultiSegConfig . filebase
>232	Identifier	filebase
>233	Identifier	gMultiSegConfig
>234	Identifier	filename
>235	Identifier	filename
>236	IdentifierDeclType	string
>237	Condition	 
>238	EqualityExpression	outLabelExt != NULL
>239	Identifier	NULL
>240	Identifier	outLabelExt
>241	IfStatement	if ( bVisualize )
>242	CompoundStatement	 
>243	ExpressionStatement	 
>244	CallExpression	unlock ( )
>245	ArgumentList	 
>246	Callee	unlock
>247	Identifier	unlock
>248	ExpressionStatement	 
>249	CallExpression	cv 
>250	ArgumentList	100
>251	Argument	100
>252	PrimaryExpression	100
>253	Callee	cv 
>254	Identifier	cv 
>255	ExpressionStatement	 
>256	CallExpression	cv 
>257	ArgumentList	wndName
>258	Argument	canvas
>259	Identifier	canvas
>260	Argument	wndName
>261	Identifier	wndName
>262	Callee	cv 
>263	Identifier	cv 
>264	IdentifierDeclStatement	 
>265	IdentifierDecl	canvas = drwnMultiSegVis 
>266	AssignmentExpr	canvas = drwnMultiSegVis 
>267	CallExpression	drwnMultiSegVis 
>268	ArgumentList	instance
>269	Argument	instance
>270	Identifier	instance
>271	Callee	drwnMultiSegVis 
>272	Identifier	drwnMultiSegVis 
>273	Identifier	canvas
>274	Identifier	canvas
>275	IdentifierDeclType	cv 
>276	ExpressionStatement	 
>277	CallExpression	cvNamedWindow ( wndName . c_str ( ) )
>278	ArgumentList	wndName . c_str ( )
>279	Argument	wndName . c_str ( )
>280	CallExpression	wndName . c_str ( )
>281	ArgumentList	 
>282	Callee	wndName . c_str
>283	MemberAccess	wndName . c_str
>284	Identifier	c_str
>285	Identifier	wndName
>286	Callee	cvNamedWindow
>287	Identifier	cvNamedWindow
>288	IdentifierDeclStatement	 
>289	IdentifierDecl	wndName = string ( WINDOW_NAME ) + toString ( threadId ( ) )
>290	AssignmentExpr	wndName = string ( WINDOW_NAME ) + toString ( threadId ( ) )
>291	AdditiveExpression	string ( WINDOW_NAME ) + toString ( threadId ( ) )
>292	CallExpression	toString ( threadId ( ) )
>293	ArgumentList	threadId ( )
>294	Argument	threadId ( )
>295	CallExpression	threadId ( )
>296	ArgumentList	 
>297	Callee	threadId
>298	Identifier	threadId
>299	Callee	toString
>300	Identifier	toString
>301	CallExpression	string ( WINDOW_NAME )
>302	ArgumentList	WINDOW_NAME
>303	Argument	WINDOW_NAME
>304	Identifier	WINDOW_NAME
>305	Callee	string
>306	Identifier	string
>307	Identifier	wndName
>308	Identifier	wndName
>309	IdentifierDeclType	string
>310	ExpressionStatement	 
>311	CallExpression	lock ( )
>312	ArgumentList	 
>313	Callee	lock
>314	Identifier	lock
>315	Condition	 
>316	Identifier	bVisualize
>317	ExpressionStatement	 
>318	CallExpression	model -> inferPixelLabels ( & instance )
>319	ArgumentList	& instance
>320	Argument	& instance
>321	UnaryOp	& instance
>322	Identifier	instance
>323	UnaryOperator	&
>324	Callee	model -> inferPixelLabels
>325	PtrMemberAccess	model -> inferPixelLabels
>326	Identifier	inferPixelLabels
>327	Identifier	model
>328	IfStatement	if ( model -> getRobustPottsWeight ( ) != 0.0 )
>329	CompoundStatement	 
>330	IfStatement	if ( ! drwnFileExists ( segFilename . c_str ( ) ) )
>331	ElseStatement	else
>332	CompoundStatement	 
>333	ExpressionStatement	 
>334	CallExpression	ifs . close ( )
>335	ArgumentList	 
>336	Callee	ifs . close
>337	MemberAccess	ifs . close
>338	Identifier	close
>339	Identifier	ifs
>340	ExpressionStatement	 
>341	CallExpression	instance . superpixels . read ( ifs )
>342	ArgumentList	ifs
>343	Argument	ifs
>344	Identifier	ifs
>345	Callee	instance . superpixels . read
>346	MemberAccess	instance . superpixels . read
>347	Identifier	read
>348	MemberAccess	instance . superpixels
>349	Identifier	superpixels
>350	Identifier	instance
>351	IdentifierDeclStatement	 
>352	IdentifierDecl	ifs ( segFilename . c_str ( ) , ios 
>353	Expression	segFilename . c_str ( ) , ios 
>354	Identifier	ios 
>355	CallExpression	segFilename . c_str ( )
>356	ArgumentList	 
>357	Callee	segFilename . c_str
>358	MemberAccess	segFilename . c_str
>359	Identifier	c_str
>360	Identifier	segFilename
>361	Identifier	ifs
>362	IdentifierDeclType	ifstream
>363	CompoundStatement	 
>364	ExpressionStatement	 
>365	CallExpression	unlock ( )
>366	ArgumentList	 
>367	Callee	unlock
>368	Identifier	unlock
>369	ExpressionStatement	 
>370	CallExpression	DRWN_LOG_WARNING ( \"superpixel file \\"\" << segFilename << \"\\" does not exist\" )
>371	ArgumentList	\"superpixel file \\"\" << segFilename << \"\\" does not exist\"
>372	Argument	\"superpixel file \\"\" << segFilename << \"\\" does not exist\"
>373	ShiftExpression	\"superpixel file \\"\" << segFilename << \"\\" does not exist\"
>374	ShiftExpression	segFilename << \"\\" does not exist\"
>375	PrimaryExpression	\"\\" does not exist\"
>376	Identifier	segFilename
>377	PrimaryExpression	\"superpixel file \\"\"
>378	Callee	DRWN_LOG_WARNING
>379	Identifier	DRWN_LOG_WARNING
>380	ExpressionStatement	 
>381	CallExpression	lock ( )
>382	ArgumentList	 
>383	Callee	lock
>384	Identifier	lock
>385	Condition	 
>386	UnaryOp	! drwnFileExists ( segFilename . c_str ( ) )
>387	CallExpression	drwnFileExists ( segFilename . c_str ( ) )
>388	ArgumentList	segFilename . c_str ( )
>389	Argument	segFilename . c_str ( )
>390	CallExpression	segFilename . c_str ( )
>391	ArgumentList	 
>392	Callee	segFilename . c_str
>393	MemberAccess	segFilename . c_str
>394	Identifier	c_str
>395	Identifier	segFilename
>396	Callee	drwnFileExists
>397	Identifier	drwnFileExists
>398	UnaryOperator	!
>399	IdentifierDeclStatement	 
>400	IdentifierDecl	segFilename = gMultiSegConfig . filename ( \"segDir\" , * baseName , \"segExt\" )
>401	AssignmentExpr	segFilename = gMultiSegConfig . filename ( \"segDir\" , * baseName , \"segExt\" )
>402	CallExpression	gMultiSegConfig . filename ( \"segDir\" , * baseName , \"segExt\" )
>403	ArgumentList	\"segDir\"
>404	Argument	\"segExt\"
>405	PrimaryExpression	\"segExt\"
>406	Argument	* baseName
>407	UnaryOp	* baseName
>408	Identifier	baseName
>409	UnaryOperator	*
>410	Argument	\"segDir\"
>411	PrimaryExpression	\"segDir\"
>412	Callee	gMultiSegConfig . filename
>413	MemberAccess	gMultiSegConfig . filename
>414	Identifier	filename
>415	Identifier	gMultiSegConfig
>416	Identifier	segFilename
>417	Identifier	segFilename
>418	IdentifierDeclType	const string
>419	Condition	 
>420	EqualityExpression	model -> getRobustPottsWeight ( ) != 0.0
>421	PrimaryExpression	0.0
>422	CallExpression	model -> getRobustPottsWeight ( )
>423	ArgumentList	 
>424	Callee	model -> getRobustPottsWeight
>425	PtrMemberAccess	model -> getRobustPottsWeight
>426	Identifier	getRobustPottsWeight
>427	Identifier	model
>428	IdentifierDeclStatement	 
>429	IdentifierDecl	instance ( imgFilename . c_str ( ) )
>430	CallExpression	imgFilename . c_str ( )
>431	ArgumentList	 
>432	Callee	imgFilename . c_str
>433	MemberAccess	imgFilename . c_str
>434	Identifier	c_str
>435	Identifier	imgFilename
>436	Identifier	instance
>437	IdentifierDeclType	drwnSegImageInstance
>438	IdentifierDeclStatement	 
>439	IdentifierDecl	imgFilename = gMultiSegConfig . filename ( \"imgDir\" , * baseName , \"imgExt\" )
>440	AssignmentExpr	imgFilename = gMultiSegConfig . filename ( \"imgDir\" , * baseName , \"imgExt\" )
>441	CallExpression	gMultiSegConfig . filename ( \"imgDir\" , * baseName , \"imgExt\" )
>442	ArgumentList	\"imgDir\"
>443	Argument	\"imgExt\"
>444	PrimaryExpression	\"imgExt\"
>445	Argument	* baseName
>446	UnaryOp	* baseName
>447	Identifier	baseName
>448	UnaryOperator	*
>449	Argument	\"imgDir\"
>450	PrimaryExpression	\"imgDir\"
>451	Callee	gMultiSegConfig . filename
>452	MemberAccess	gMultiSegConfig . filename
>453	Identifier	filename
>454	Identifier	gMultiSegConfig
>455	Identifier	imgFilename
>456	Identifier	imgFilename
>457	IdentifierDeclType	string
>458	IfStatement	if ( drwnThreadPool 
>459	ElseStatement	else
>460	CompoundStatement	 
>461	ExpressionStatement	 
>462	CallExpression	DRWN_LOG_STATUS ( \"...\" << * baseName << \" (tid
>463	ArgumentList	\"...\" << * baseName << \" (tid
>464	Argument	\"...\" << * baseName << \" (tid
>465	ShiftExpression	\"...\" << * baseName << \" (tid
>466	ShiftExpression	* baseName << \" (tid
>467	ShiftExpression	\" (tid
>468	ShiftExpression	threadId ( ) << \")\"
>469	PrimaryExpression	\")\"
>470	CallExpression	threadId ( )
>471	ArgumentList	 
>472	Callee	threadId
>473	Identifier	threadId
>474	PrimaryExpression	\" (tid
>475	UnaryOp	* baseName
>476	Identifier	baseName
>477	UnaryOperator	*
>478	PrimaryExpression	\"...\"
>479	Callee	DRWN_LOG_STATUS
>480	Identifier	DRWN_LOG_STATUS
>481	CompoundStatement	 
>482	ExpressionStatement	 
>483	CallExpression	DRWN_LOG_STATUS ( \"...\" << * baseName )
>484	ArgumentList	\"...\" << * baseName
>485	Argument	\"...\" << * baseName
>486	ShiftExpression	\"...\" << * baseName
>487	UnaryOp	* baseName
>488	Identifier	baseName
>489	UnaryOperator	*
>490	PrimaryExpression	\"...\"
>491	Callee	DRWN_LOG_STATUS
>492	Identifier	DRWN_LOG_STATUS
>493	Condition	 
>494	EqualityExpression	drwnThreadPool 
>495	PrimaryExpression	0
>496	Identifier	drwnThreadPool 
>497	ExpressionStatement	 
>498	CallExpression	DRWN_ASSERT ( ( model != NULL ) && ( baseName != NULL ) )
>499	ArgumentList	( model != NULL ) && ( baseName != NULL )
>500	Argument	( model != NULL ) && ( baseName != NULL )
>501	AndExpression	( model != NULL ) && ( baseName != NULL )
>502	EqualityExpression	baseName != NULL
>503	Identifier	NULL
>504	Identifier	baseName
>505	EqualityExpression	model != NULL
>506	Identifier	NULL
>507	Identifier	model
>508	Callee	DRWN_ASSERT
>509	Identifier	DRWN_ASSERT
>560	FunctionDef	usage ()
>561	ParameterList	 
>562	ReturnType	void
>563	CompoundStatement	 
>564	ExpressionStatement	 
>565	ShiftExpression	cerr << \"OPTIONS
>566	ShiftExpression	\"OPTIONS
>567	ShiftExpression	\"  -outLabels <ext>  
>568	ShiftExpression	\"  -outImages <ext>  
>569	ShiftExpression	\"  -outUnary <ext>   
>570	ShiftExpression	\"  -pairwise <w>     
>571	ShiftExpression	\"  -longrange <w>    
>572	ShiftExpression	\"  -robustpotts <w>  
>573	ShiftExpression	\"  -x                
>574	ShiftExpression	DRWN_STANDARD_OPTIONS_USAGE << endl
>575	Identifier	endl
>576	Identifier	DRWN_STANDARD_OPTIONS_USAGE
>577	PrimaryExpression	\"  -x                
>578	PrimaryExpression	\"  -robustpotts <w>  
>579	PrimaryExpression	\"  -longrange <w>    
>580	PrimaryExpression	\"  -pairwise <w>     
>581	PrimaryExpression	\"  -outUnary <ext>   
>582	PrimaryExpression	\"  -outImages <ext>  
>583	PrimaryExpression	\"  -outLabels <ext>  
>584	PrimaryExpression	\"OPTIONS
>585	Identifier	cerr
>586	ExpressionStatement	 
>587	ShiftExpression	cerr << \"USAGE
>588	PrimaryExpression	\"USAGE
>589	Identifier	cerr
>590	ExpressionStatement	 
>591	ShiftExpression	cerr << DRWN_USAGE_HEADER << endl
>592	ShiftExpression	DRWN_USAGE_HEADER << endl
>593	Identifier	endl
>594	Identifier	DRWN_USAGE_HEADER
>595	Identifier	cerr
>599	FunctionDef	main (int argc , char * argv [ ])
>600	ParameterList	int argc , char * argv [ ]
>601	Parameter	 
>602	Identifier	argv
>603	ParameterType	char * [ ]
>604	Parameter	 
>605	Identifier	argc
>606	ParameterType	int
>607	ReturnType	int
>608	CompoundStatement	 
>609	ReturnStatement	 
>610	PrimaryExpression	0
>611	ExpressionStatement	 
>612	CallExpression	drwnCodeProfiler 
>613	ArgumentList	 
>614	Callee	drwnCodeProfiler 
>615	Identifier	drwnCodeProfiler 
>616	ExpressionStatement	 
>617	CallExpression	drwnCodeProfiler 
>618	ArgumentList	drwnCodeProfiler 
>619	Argument	drwnCodeProfiler 
>620	CallExpression	drwnCodeProfiler 
>621	ArgumentList	\"main\"
>622	Argument	\"main\"
>623	PrimaryExpression	\"main\"
>624	Callee	drwnCodeProfiler 
>625	Identifier	drwnCodeProfiler 
>626	Callee	drwnCodeProfiler 
>627	Identifier	drwnCodeProfiler 
>628	ExpressionStatement	 
>629	CallExpression	cvDestroyAllWindows ( )
>630	ArgumentList	 
>631	Callee	cvDestroyAllWindows
>632	Identifier	cvDestroyAllWindows
>633	ExpressionStatement	 
>634	Identifier	model
>635	Statement	 
>636	IfStatement	if ( InferenceThread 
>637	CompoundStatement	 
>638	ExpressionStatement	 
>639	CallExpression	cvWaitKey ( - 1 )
>640	ArgumentList	- 1
>641	Argument	- 1
>642	UnaryOp	- 1
>643	PrimaryExpression	1
>644	UnaryOperator	-
>645	Callee	cvWaitKey
>646	Identifier	cvWaitKey
>647	Condition	 
>648	AndExpression	InferenceThread 
>649	EqualityExpression	baseNames . size ( ) == 1
>650	PrimaryExpression	1
>651	CallExpression	baseNames . size ( )
>652	ArgumentList	 
>653	Callee	baseNames . size
>654	MemberAccess	baseNames . size
>655	Identifier	size
>656	Identifier	baseNames
>657	Identifier	InferenceThread 
>658	ExpressionStatement	 
>659	CallExpression	threadPool . finish ( )
>660	ArgumentList	 
>661	Callee	threadPool . finish
>662	MemberAccess	threadPool . finish
>663	Identifier	finish
>664	Identifier	threadPool
>665	ForStatement	for ( int i = 0 ; i < ( int ) baseNames . size ( ) ; i ++ )
>666	CompoundStatement	 
>667	ExpressionStatement	 
>668	CallExpression	threadPool . addJob ( & threadArgs [ i ] )
>669	ArgumentList	& threadArgs [ i ]
>670	Argument	& threadArgs [ i ]
>671	UnaryOp	& threadArgs [ i ]
>672	ArrayIndexing	threadArgs [ i ]
>673	Identifier	i
>674	Identifier	threadArgs
>675	UnaryOperator	&
>676	Callee	threadPool . addJob
>677	MemberAccess	threadPool . addJob
>678	Identifier	addJob
>679	Identifier	threadPool
>680	ExpressionStatement	 
>681	AssignmentExpr	threadArgs [ i ] . baseName = & baseNames [ i ]
>682	UnaryOp	& baseNames [ i ]
>683	ArrayIndexing	baseNames [ i ]
>684	Identifier	i
>685	Identifier	baseNames
>686	UnaryOperator	&
>687	MemberAccess	threadArgs [ i ] . baseName
>688	Identifier	baseName
>689	ArrayIndexing	threadArgs [ i ]
>690	Identifier	i
>691	Identifier	threadArgs
>692	ExpressionStatement	 
>693	AssignmentExpr	threadArgs [ i ] . model = model
>694	Identifier	model
>695	MemberAccess	threadArgs [ i ] . model
>696	Identifier	model
>697	ArrayIndexing	threadArgs [ i ]
>698	Identifier	i
>699	Identifier	threadArgs
>700	IncDecOp	 
>701	IncDec	++
>702	Identifier	i
>703	Condition	 
>704	RelationalExpression	i < ( int ) baseNames . size ( )
>705	CastExpression	( int ) baseNames . size ( )
>706	CallExpression	baseNames . size ( )
>707	ArgumentList	 
>708	Callee	baseNames . size
>709	MemberAccess	baseNames . size
>710	Identifier	size
>711	Identifier	baseNames
>712	CastTarget	int
>713	Identifier	i
>714	ForInit	 
>715	IdentifierDeclStatement	int i = 0 ;
>716	IdentifierDecl	i = 0
>717	AssignmentExpr	i = 0
>718	PrimaryExpression	0
>719	Identifier	i
>720	Identifier	i
>721	IdentifierDeclType	int
>722	ExpressionStatement	 
>723	CallExpression	threadPool . start ( )
>724	ArgumentList	 
>725	Callee	threadPool . start
>726	MemberAccess	threadPool . start
>727	Identifier	start
>728	Identifier	threadPool
>729	ExpressionStatement	 
>730	CallExpression	threadArgs . resize ( baseNames . size ( ) )
>731	ArgumentList	baseNames . size ( )
>732	Argument	baseNames . size ( )
>733	CallExpression	baseNames . size ( )
>734	ArgumentList	 
>735	Callee	baseNames . size
>736	MemberAccess	baseNames . size
>737	Identifier	size
>738	Identifier	baseNames
>739	Callee	threadArgs . resize
>740	MemberAccess	threadArgs . resize
>741	Identifier	resize
>742	Identifier	threadArgs
>743	IdentifierDeclStatement	 
>744	IdentifierDecl	threadArgs
>745	Identifier	threadArgs
>746	IdentifierDeclType	vector < InferenceThread >
>747	IdentifierDeclStatement	 
>748	IdentifierDecl	threadPool
>749	Identifier	threadPool
>750	IdentifierDeclType	drwnThreadPool
>751	ExpressionStatement	 
>752	CallExpression	DRWN_LOG_MESSAGE ( \"Processing \" << baseNames . size ( ) << \" images...\" )
>753	ArgumentList	\"Processing \" << baseNames . size ( ) << \" images...\"
>754	Argument	\"Processing \" << baseNames . size ( ) << \" images...\"
>755	ShiftExpression	\"Processing \" << baseNames . size ( ) << \" images...\"
>756	ShiftExpression	baseNames . size ( ) << \" images...\"
>757	PrimaryExpression	\" images...\"
>758	CallExpression	baseNames . size ( )
>759	ArgumentList	 
>760	Callee	baseNames . size
>761	MemberAccess	baseNames . size
>762	Identifier	size
>763	Identifier	baseNames
>764	PrimaryExpression	\"Processing \"
>765	Callee	DRWN_LOG_MESSAGE
>766	Identifier	DRWN_LOG_MESSAGE
>767	IfStatement	if ( robustPottsWeight >= 0.0 )
>768	CompoundStatement	 
>769	ExpressionStatement	 
>770	CallExpression	model -> learnRobustPottsWeight ( robustPottsWeight )
>771	ArgumentList	robustPottsWeight
>772	Argument	robustPottsWeight
>773	Identifier	robustPottsWeight
>774	Callee	model -> learnRobustPottsWeight
>775	PtrMemberAccess	model -> learnRobustPottsWeight
>776	Identifier	learnRobustPottsWeight
>777	Identifier	model
>778	ExpressionStatement	 
>779	CallExpression	DRWN_LOG_MESSAGE ( \"...overriding robust potts weight with \" << robustPottsWeight )
>780	ArgumentList	\"...overriding robust potts weight with \" << robustPottsWeight
>781	Argument	\"...overriding robust potts weight with \" << robustPottsWeight
>782	ShiftExpression	\"...overriding robust potts weight with \" << robustPottsWeight
>783	Identifier	robustPottsWeight
>784	PrimaryExpression	\"...overriding robust potts weight with \"
>785	Callee	DRWN_LOG_MESSAGE
>786	Identifier	DRWN_LOG_MESSAGE
>787	Condition	 
>788	RelationalExpression	robustPottsWeight >= 0.0
>789	PrimaryExpression	0.0
>790	Identifier	robustPottsWeight
>791	IfStatement	if ( longRangeWeight >= 0.0 )
>792	CompoundStatement	 
>793	ExpressionStatement	 
>794	CallExpression	model -> learnLongRangePairwiseWeight ( longRangeWeight , 1.0 )
>795	ArgumentList	longRangeWeight
>796	Argument	1.0
>797	PrimaryExpression	1.0
>798	Argument	longRangeWeight
>799	Identifier	longRangeWeight
>800	Callee	model -> learnLongRangePairwiseWeight
>801	PtrMemberAccess	model -> learnLongRangePairwiseWeight
>802	Identifier	learnLongRangePairwiseWeight
>803	Identifier	model
>804	ExpressionStatement	 
>805	CallExpression	DRWN_LOG_MESSAGE ( \"...overriding long-range pairwise weight with \" << longRangeWeight )
>806	ArgumentList	\"...overriding long-range pairwise weight with \" << longRangeWeight
>807	Argument	\"...overriding long-range pairwise weight with \" << longRangeWeight
>808	ShiftExpression	\"...overriding long-range pairwise weight with \" << longRangeWeight
>809	Identifier	longRangeWeight
>810	PrimaryExpression	\"...overriding long-range pairwise weight with \"
>811	Callee	DRWN_LOG_MESSAGE
>812	Identifier	DRWN_LOG_MESSAGE
>813	Condition	 
>814	RelationalExpression	longRangeWeight >= 0.0
>815	PrimaryExpression	0.0
>816	Identifier	longRangeWeight
>817	IfStatement	if ( pairwiseWeight >= 0.0 )
>818	CompoundStatement	 
>819	ExpressionStatement	 
>820	CallExpression	model -> learnPixelContrastWeight ( pairwiseWeight )
>821	ArgumentList	pairwiseWeight
>822	Argument	pairwiseWeight
>823	Identifier	pairwiseWeight
>824	Callee	model -> learnPixelContrastWeight
>825	PtrMemberAccess	model -> learnPixelContrastWeight
>826	Identifier	learnPixelContrastWeight
>827	Identifier	model
>828	ExpressionStatement	 
>829	CallExpression	DRWN_LOG_MESSAGE ( \"...overriding pairwise contrast weight with \" << pairwiseWeight )
>830	ArgumentList	\"...overriding pairwise contrast weight with \" << pairwiseWeight
>831	Argument	\"...overriding pairwise contrast weight with \" << pairwiseWeight
>832	ShiftExpression	\"...overriding pairwise contrast weight with \" << pairwiseWeight
>833	Identifier	pairwiseWeight
>834	PrimaryExpression	\"...overriding pairwise contrast weight with \"
>835	Callee	DRWN_LOG_MESSAGE
>836	Identifier	DRWN_LOG_MESSAGE
>837	Condition	 
>838	RelationalExpression	pairwiseWeight >= 0.0
>839	PrimaryExpression	0.0
>840	Identifier	pairwiseWeight
>841	ExpressionStatement	 
>842	CallExpression	model -> read ( modelFilename . c_str ( ) )
>843	ArgumentList	modelFilename . c_str ( )
>844	Argument	modelFilename . c_str ( )
>845	CallExpression	modelFilename . c_str ( )
>846	ArgumentList	 
>847	Callee	modelFilename . c_str
>848	MemberAccess	modelFilename . c_str
>849	Identifier	c_str
>850	Identifier	modelFilename
>851	Callee	model -> read
>852	PtrMemberAccess	model -> read
>853	Identifier	read
>854	Identifier	model
>855	ExpressionStatement	 
>856	CallExpression	DRWN_LOG_MESSAGE ( \"Reading model from \" << modelFilename )
>857	ArgumentList	\"Reading model from \" << modelFilename
>858	Argument	\"Reading model from \" << modelFilename
>859	ShiftExpression	\"Reading model from \" << modelFilename
>860	Identifier	modelFilename
>861	PrimaryExpression	\"Reading model from \"
>862	Callee	DRWN_LOG_MESSAGE
>863	Identifier	DRWN_LOG_MESSAGE
>864	IdentifierDeclStatement	 
>865	IdentifierDecl	modelFilename = gMultiSegConfig . filebase ( \"modelsDir\" , \"pixelSegModel.xml\" )
>866	AssignmentExpr	modelFilename = gMultiSegConfig . filebase ( \"modelsDir\" , \"pixelSegModel.xml\" )
>867	CallExpression	gMultiSegConfig . filebase ( \"modelsDir\" , \"pixelSegModel.xml\" )
>868	ArgumentList	\"modelsDir\"
>869	Argument	\"pixelSegModel.xml\"
>870	PrimaryExpression	\"pixelSegModel.xml\"
>871	Argument	\"modelsDir\"
>872	PrimaryExpression	\"modelsDir\"
>873	Callee	gMultiSegConfig . filebase
>874	MemberAccess	gMultiSegConfig . filebase
>875	Identifier	filebase
>876	Identifier	gMultiSegConfig
>877	Identifier	modelFilename
>878	Identifier	modelFilename
>879	IdentifierDeclType	string
>880	IdentifierDeclStatement	 
>881	IdentifierDecl	* model = new drwnPixelSegModel ( )
>882	AssignmentExpr	* model = new drwnPixelSegModel ( )
>883	UnaryExpression	new drwnPixelSegModel ( )
>884	Identifier	model
>885	Identifier	model
>886	IdentifierDeclType	drwnPixelSegModel *
>887	IfStatement	if ( drwnFileExists ( evalList ) )
>888	ElseStatement	else
>889	CompoundStatement	 
>890	ExpressionStatement	 
>891	CallExpression	baseNames . push_back ( string ( evalList ) )
>892	ArgumentList	string ( evalList )
>893	Argument	string ( evalList )
>894	CallExpression	string ( evalList )
>895	ArgumentList	evalList
>896	Argument	evalList
>897	Identifier	evalList
>898	Callee	string
>899	Identifier	string
>900	Callee	baseNames . push_back
>901	MemberAccess	baseNames . push_back
>902	Identifier	push_back
>903	Identifier	baseNames
>904	ExpressionStatement	 
>905	CallExpression	DRWN_LOG_MESSAGE ( \"Processing single image \" << evalList << \"...\" )
>906	ArgumentList	\"Processing single image \" << evalList << \"...\"
>907	Argument	\"Processing single image \" << evalList << \"...\"
>908	ShiftExpression	\"Processing single image \" << evalList << \"...\"
>909	ShiftExpression	evalList << \"...\"
>910	PrimaryExpression	\"...\"
>911	Identifier	evalList
>912	PrimaryExpression	\"Processing single image \"
>913	Callee	DRWN_LOG_MESSAGE
>914	Identifier	DRWN_LOG_MESSAGE
>915	CompoundStatement	 
>916	ExpressionStatement	 
>917	CallExpression	DRWN_LOG_MESSAGE ( \"...read \" << baseNames . size ( ) << \" images\" )
>918	ArgumentList	\"...read \" << baseNames . size ( ) << \" images\"
>919	Argument	\"...read \" << baseNames . size ( ) << \" images\"
>920	ShiftExpression	\"...read \" << baseNames . size ( ) << \" images\"
>921	ShiftExpression	baseNames . size ( ) << \" images\"
>922	PrimaryExpression	\" images\"
>923	CallExpression	baseNames . size ( )
>924	ArgumentList	 
>925	Callee	baseNames . size
>926	MemberAccess	baseNames . size
>927	Identifier	size
>928	Identifier	baseNames
>929	PrimaryExpression	\"...read \"
>930	Callee	DRWN_LOG_MESSAGE
>931	Identifier	DRWN_LOG_MESSAGE
>932	ExpressionStatement	 
>933	AssignmentExpr	baseNames = drwnReadFile ( evalList )
>934	CallExpression	drwnReadFile ( evalList )
>935	ArgumentList	evalList
>936	Argument	evalList
>937	Identifier	evalList
>938	Callee	drwnReadFile
>939	Identifier	drwnReadFile
>940	Identifier	baseNames
>941	ExpressionStatement	 
>942	CallExpression	DRWN_LOG_MESSAGE ( \"Reading evaluation list from \" << evalList << \"...\" )
>943	ArgumentList	\"Reading evaluation list from \" << evalList << \"...\"
>944	Argument	\"Reading evaluation list from \" << evalList << \"...\"
>945	ShiftExpression	\"Reading evaluation list from \" << evalList << \"...\"
>946	ShiftExpression	evalList << \"...\"
>947	PrimaryExpression	\"...\"
>948	Identifier	evalList
>949	PrimaryExpression	\"Reading evaluation list from \"
>950	Callee	DRWN_LOG_MESSAGE
>951	Identifier	DRWN_LOG_MESSAGE
>952	Condition	 
>953	CallExpression	drwnFileExists ( evalList )
>954	ArgumentList	evalList
>955	Argument	evalList
>956	Identifier	evalList
>957	Callee	drwnFileExists
>958	Identifier	drwnFileExists
>959	IdentifierDeclStatement	 
>960	IdentifierDecl	baseNames
>961	Identifier	baseNames
>962	IdentifierDeclType	vector < string >
>963	IdentifierDeclStatement	 
>964	IdentifierDecl	* evalList = DRWN_CMDLINE_ARGV [ 0 ]
>965	AssignmentExpr	* evalList = DRWN_CMDLINE_ARGV [ 0 ]
>966	ArrayIndexing	DRWN_CMDLINE_ARGV [ 0 ]
>967	PrimaryExpression	0
>968	Identifier	DRWN_CMDLINE_ARGV
>969	Identifier	evalList
>970	Identifier	evalList
>971	IdentifierDeclType	const char *
>972	ExpressionStatement	 
>973	CallExpression	drwnCodeProfiler 
>974	ArgumentList	drwnCodeProfiler 
>975	Argument	drwnCodeProfiler 
>976	CallExpression	drwnCodeProfiler 
>977	ArgumentList	\"main\"
>978	Argument	\"main\"
>979	PrimaryExpression	\"main\"
>980	Callee	drwnCodeProfiler 
>981	Identifier	drwnCodeProfiler 
>982	Callee	drwnCodeProfiler 
>983	Identifier	drwnCodeProfiler 
>984	IfStatement	if ( DRWN_CMDLINE_ARGC != 1 )
>985	CompoundStatement	 
>986	ReturnStatement	 
>987	UnaryOp	- 1
>988	PrimaryExpression	1
>989	UnaryOperator	-
>990	ExpressionStatement	 
>991	CallExpression	usage ( )
>992	ArgumentList	 
>993	Callee	usage
>994	Identifier	usage
>995	Condition	 
>996	EqualityExpression	DRWN_CMDLINE_ARGC != 1
>997	PrimaryExpression	1
>998	Identifier	DRWN_CMDLINE_ARGC
>999	ExpressionStatement	 
>1000	CallExpression	DRWN_END_CMDLINE_PROCESSING ( usage ( ) )
>1001	ArgumentList	usage ( )
>1002	Argument	usage ( )
>1003	CallExpression	usage ( )
>1004	ArgumentList	 
>1005	Callee	usage
>1006	Identifier	usage
>1007	Callee	DRWN_END_CMDLINE_PROCESSING
>1008	Identifier	DRWN_END_CMDLINE_PROCESSING
>1009	Statement	 
>1010	Statement	 
>1011	Statement	 
>1012	Statement	 
>1013	Statement	 
>1014	Statement	 
>1015	Statement	 
>1016	Statement	 
>1017	Statement	 
>1018	Statement	 
>1019	Statement	 
>1020	Statement	 
>1021	Statement	 
>1022	Statement	 
>1023	Statement	 
>1024	Statement	 
>1025	Statement	 
>1026	Statement	 
>1027	Statement	 
>1028	Statement	 
>1029	Statement	 
>1030	Statement	 
>1031	Statement	 
>1032	Statement	 
>1033	Statement	 
>1034	Statement	 
>1035	Statement	 
>1036	Statement	 
>1037	Statement	 
>1038	Statement	 
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	Statement	 
>1059	Statement	 
>1060	Statement	 
>1061	Statement	 
>1062	Statement	 
>1063	Statement	 
>1064	Statement	 
>1065	IdentifierDeclStatement	 
>1066	IdentifierDecl	robustPottsWeight = - 1.0
>1067	AssignmentExpr	robustPottsWeight = - 1.0
>1068	UnaryOp	- 1.0
>1069	PrimaryExpression	1.0
>1070	UnaryOperator	-
>1071	Identifier	robustPottsWeight
>1072	Identifier	robustPottsWeight
>1073	IdentifierDeclType	double
>1074	IdentifierDeclStatement	 
>1075	IdentifierDecl	longRangeWeight = - 1.0
>1076	AssignmentExpr	longRangeWeight = - 1.0
>1077	UnaryOp	- 1.0
>1078	PrimaryExpression	1.0
>1079	UnaryOperator	-
>1080	Identifier	longRangeWeight
>1081	Identifier	longRangeWeight
>1082	IdentifierDeclType	double
>1083	IdentifierDeclStatement	 
>1084	IdentifierDecl	pairwiseWeight = - 1.0
>1085	AssignmentExpr	pairwiseWeight = - 1.0
>1086	UnaryOp	- 1.0
>1087	PrimaryExpression	1.0
>1088	UnaryOperator	-
>1089	Identifier	pairwiseWeight
>1090	Identifier	pairwiseWeight
>1091	IdentifierDeclType	double
<16=18,17
<22=24,23
<28=31,30,29
<31=497,458,438,428,328,317,241,185,133,32
<32=129,33
<33=104,94,78,41,34
<34=35
<35=37,36
<37=38
<38=40,39
<41=70,61,58,42
<42=43
<43=44
<44=57,45
<45=47,46
<47=55,48
<48=49
<49=50
<50=52,51
<52=54,53
<55=56
<58=60,59
<61=62
<62=69,63
<63=65,64
<65=66
<66=68,67
<70=71
<71=72
<72=77,76,73
<73=75,74
<78=79
<79=92,80
<80=83,81
<81=82
<83=84
<84=91,85
<85=87,86
<87=88
<88=90,89
<92=93
<94=95
<95=103,102,96
<96=98,97
<98=99
<99=101,100
<104=105
<105=128,127,106
<106=126,107
<107=114,108
<108=112,109
<109=110
<110=111
<112=113
<114=122,115
<115=120,116
<116=117
<117=119,118
<120=121
<122=123
<123=125,124
<129=130
<130=132,131
<133=181,134
<134=156,144,135
<135=136
<136=142,137
<137=140,138
<138=139
<140=141
<142=143
<144=145
<145=155,154,146
<146=153,147
<147=151,148
<148=149
<149=150
<151=152
<156=157
<157=180,179,158
<158=178,159
<159=166,160
<160=164,161
<161=162
<162=163
<164=165
<166=174,167
<167=172,168
<168=169
<169=171,170
<172=173
<174=175
<175=177,176
<181=182
<182=184,183
<185=237,186
<186=212,202,194,187
<187=188
<188=190,189
<190=191
<191=193,192
<194=195
<195=201,196
<196=198,197
<198=200,199
<202=203
<203=211,210,204
<204=206,205
<206=207
<207=209,208
<212=213
<213=236,235,214
<214=234,215
<215=222,216
<216=220,217
<217=218
<218=219
<220=221
<222=230,223
<223=228,224
<224=225
<225=227,226
<228=229
<230=231
<231=233,232
<237=238
<238=240,239
<241=315,242
<242=310,288,276,264,255,248,243
<243=244
<244=246,245
<246=247
<248=249
<249=253,250
<250=251
<251=252
<253=254
<255=256
<256=262,257
<257=260,258
<258=259
<260=261
<262=263
<264=265
<265=275,274,266
<266=273,267
<267=271,268
<268=269
<269=270
<271=272
<276=277
<277=286,278
<278=279
<279=280
<280=282,281
<282=283
<283=285,284
<286=287
<288=289
<289=309,308,290
<290=307,291
<291=301,292
<292=299,293
<293=294
<294=295
<295=297,296
<297=298
<299=300
<301=305,302
<302=303
<303=304
<305=306
<310=311
<311=313,312
<313=314
<315=316
<317=318
<318=324,319
<319=320
<320=321
<321=323,322
<324=325
<325=327,326
<328=419,329
<329=399,330
<330=385,363,331
<331=332
<332=351,340,333
<333=334
<334=336,335
<336=337
<337=339,338
<340=341
<341=345,342
<342=343
<343=344
<345=346
<346=348,347
<348=350,349
<351=352
<352=362,361,353
<353=355,354
<355=357,356
<357=358
<358=360,359
<363=380,369,364
<364=365
<365=367,366
<367=368
<369=370
<370=378,371
<371=372
<372=373
<373=377,374
<374=376,375
<378=379
<380=381
<381=383,382
<383=384
<385=386
<386=398,387
<387=396,388
<388=389
<389=390
<390=392,391
<392=393
<393=395,394
<396=397
<399=400
<400=418,417,401
<401=416,402
<402=412,403
<403=410,406,404
<404=405
<406=407
<407=409,408
<410=411
<412=413
<413=415,414
<419=420
<420=422,421
<422=424,423
<424=425
<425=427,426
<428=429
<429=437,436,430
<430=432,431
<432=433
<433=435,434
<438=439
<439=457,456,440
<440=455,441
<441=451,442
<442=449,445,443
<443=444
<445=446
<446=448,447
<449=450
<451=452
<452=454,453
<458=493,481,459
<459=460
<460=461
<461=462
<462=479,463
<463=464
<464=465
<465=478,466
<466=475,467
<467=474,468
<468=470,469
<470=472,471
<472=473
<475=477,476
<479=480
<481=482
<482=483
<483=491,484
<484=485
<485=486
<486=490,487
<487=489,488
<491=492
<493=494
<494=496,495
<497=498
<498=508,499
<499=500
<500=501
<501=505,502
<502=504,503
<505=507,506
<508=509
<560=563,562,561
<563=590,586,564
<564=565
<565=585,566
<566=584,567
<567=583,568
<568=582,569
<569=581,570
<570=580,571
<571=579,572
<572=578,573
<573=577,574
<574=576,575
<586=587
<587=589,588
<590=591
<591=595,592
<592=594,593
<599=608,607,600
<600=604,601
<601=603,602
<604=606,605
<608=1083,1074,1065,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1032,609,611,616,628,633,635,636,658,665,722,729,743,747,751,767,791,817,841,855,864,880,887,959,963,972,984,999,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031
<609=610
<611=612
<612=614,613
<614=615
<616=617
<617=626,618
<618=619
<619=620
<620=624,621
<621=622
<622=623
<624=625
<626=627
<628=629
<629=631,630
<631=632
<633=634
<636=647,637
<637=638
<638=639
<639=645,640
<640=641
<641=642
<642=644,643
<645=646
<647=648
<648=657,649
<649=651,650
<651=653,652
<653=654
<654=656,655
<658=659
<659=661,660
<661=662
<662=664,663
<665=714,703,700,666
<666=692,680,667
<667=668
<668=676,669
<669=670
<670=671
<671=675,672
<672=674,673
<676=677
<677=679,678
<680=681
<681=687,682
<682=686,683
<683=685,684
<687=689,688
<689=691,690
<692=693
<693=695,694
<695=697,696
<697=699,698
<700=702,701
<703=704
<704=713,705
<705=712,706
<706=708,707
<708=709
<709=711,710
<714=715
<715=716
<716=721,720,717
<717=719,718
<722=723
<723=725,724
<725=726
<726=728,727
<729=730
<730=739,731
<731=732
<732=733
<733=735,734
<735=736
<736=738,737
<739=740
<740=742,741
<743=744
<744=746,745
<747=748
<748=750,749
<751=752
<752=765,753
<753=754
<754=755
<755=764,756
<756=758,757
<758=760,759
<760=761
<761=763,762
<765=766
<767=787,768
<768=778,769
<769=770
<770=774,771
<771=772
<772=773
<774=775
<775=777,776
<778=779
<779=785,780
<780=781
<781=782
<782=784,783
<785=786
<787=788
<788=790,789
<791=813,792
<792=804,793
<793=794
<794=800,795
<795=798,796
<796=797
<798=799
<800=801
<801=803,802
<804=805
<805=811,806
<806=807
<807=808
<808=810,809
<811=812
<813=814
<814=816,815
<817=837,818
<818=828,819
<819=820
<820=824,821
<821=822
<822=823
<824=825
<825=827,826
<828=829
<829=835,830
<830=831
<831=832
<832=834,833
<835=836
<837=838
<838=840,839
<841=842
<842=851,843
<843=844
<844=845
<845=847,846
<847=848
<848=850,849
<851=852
<852=854,853
<855=856
<856=862,857
<857=858
<858=859
<859=861,860
<862=863
<864=865
<865=879,878,866
<866=877,867
<867=873,868
<868=871,869
<869=870
<871=872
<873=874
<874=876,875
<880=881
<881=886,885,882
<882=884,883
<887=952,915,888
<888=889
<889=904,890
<890=891
<891=900,892
<892=893
<893=894
<894=898,895
<895=896
<896=897
<898=899
<900=901
<901=903,902
<904=905
<905=913,906
<906=907
<907=908
<908=912,909
<909=911,910
<913=914
<915=941,932,916
<916=917
<917=930,918
<918=919
<919=920
<920=929,921
<921=923,922
<923=925,924
<925=926
<926=928,927
<930=931
<932=933
<933=940,934
<934=938,935
<935=936
<936=937
<938=939
<941=942
<942=950,943
<943=944
<944=945
<945=949,946
<946=948,947
<950=951
<952=953
<953=957,954
<954=955
<955=956
<957=958
<959=960
<960=962,961
<963=964
<964=971,970,965
<965=969,966
<966=968,967
<972=973
<973=982,974
<974=975
<975=976
<976=980,977
<977=978
<978=979
<980=981
<982=983
<984=995,985
<985=990,986
<986=987
<987=989,988
<990=991
<991=993,992
<993=994
<995=996
<996=998,997
<999=1000
<1000=1007,1001
<1001=1002
<1002=1003
<1003=1005,1004
<1005=1006
<1007=1008
<1065=1066
<1066=1073,1072,1067
<1067=1071,1068
<1068=1070,1069
<1074=1075
<1075=1082,1081,1076
<1076=1080,1077
<1077=1079,1078
<1083=1084
<1084=1091,1090,1085
<1085=1089,1086
<1086=1088,1087
