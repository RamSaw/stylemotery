>3	FunctionDef	DecomposeHomography (double * H , double f1 , double f2 , double * Ra , double * ta , double * Rb , double * tb , \
>4	ParameterList	double * H , double f1 , double f2 , double * Ra , double * ta , double * Rb , double * tb , v2_t p , v2_t q
>5	Parameter	 
>6	Identifier	q
>7	ParameterType	v2_t
>8	Parameter	 
>9	Identifier	p
>10	ParameterType	v2_t
>11	Parameter	 
>12	Identifier	tb
>13	ParameterType	double *
>14	Parameter	 
>15	Identifier	Rb
>16	ParameterType	double *
>17	Parameter	 
>18	Identifier	ta
>19	ParameterType	double *
>20	Parameter	 
>21	Identifier	Ra
>22	ParameterType	double *
>23	Parameter	 
>24	Identifier	f2
>25	ParameterType	double
>26	Parameter	 
>27	Identifier	f1
>28	ParameterType	double
>29	Parameter	 
>30	Identifier	H
>31	ParameterType	double *
>32	ReturnType	bool
>33	CompoundStatement	 
>34	ReturnStatement	 
>35	Identifier	true
>36	IfStatement	if ( error_best > 6.0 )
>37	CompoundStatement	 
>38	ReturnStatement	 
>39	Identifier	false
>40	ExpressionStatement	 
>41	CallExpression	printf ( \"[DecomposeHomograph] Error [%0.3f] too high!\n\" , error_best )
>42	ArgumentList	\"[DecomposeHomograph] Error [%0.3f] too high!\n\"
>43	Argument	error_best
>44	Identifier	error_best
>45	Argument	\"[DecomposeHomograph] Error [%0.3f] too high!\n\"
>46	PrimaryExpression	\"[DecomposeHomograph] Error [%0.3f] too high!\n\"
>47	Callee	printf
>48	Identifier	printf
>49	Condition	 
>50	RelationalExpression	error_best > 6.0
>51	PrimaryExpression	6.0
>52	Identifier	error_best
>53	IfStatement	if ( Ra != NULL && ta != NULL )
>54	CompoundStatement	 
>55	IfStatement	if ( Rb != NULL && tb != NULL )
>56	CompoundStatement	 
>57	IfStatement	if ( other == - 1 )
>58	ElseStatement	else
>59	CompoundStatement	 
>60	SwitchStatement	switch ( other )
>61	CompoundStatement	 
>62	BreakStatement	 
>63	ExpressionStatement	 
>64	CallExpression	memcpy ( tb , t4 , sizeof ( double ) * 3 )
>65	ArgumentList	tb
>66	Argument	sizeof ( double ) * 3
>67	MultiplicativeExpression	sizeof ( double ) * 3
>68	PrimaryExpression	3
>69	SizeofExpr	sizeof ( double )
>70	SizeofOperand	double
>71	Sizeof	sizeof
>72	Argument	t4
>73	Identifier	t4
>74	Argument	tb
>75	Identifier	tb
>76	Callee	memcpy
>77	Identifier	memcpy
>78	ExpressionStatement	 
>79	CallExpression	memcpy ( Rb , R4 , sizeof ( double ) * 9 )
>80	ArgumentList	Rb
>81	Argument	sizeof ( double ) * 9
>82	MultiplicativeExpression	sizeof ( double ) * 9
>83	PrimaryExpression	9
>84	SizeofExpr	sizeof ( double )
>85	SizeofOperand	double
>86	Sizeof	sizeof
>87	Argument	R4
>88	Identifier	R4
>89	Argument	Rb
>90	Identifier	Rb
>91	Callee	memcpy
>92	Identifier	memcpy
>93	Label	 
>94	BreakStatement	 
>95	ExpressionStatement	 
>96	CallExpression	memcpy ( tb , t3 , sizeof ( double ) * 3 )
>97	ArgumentList	tb
>98	Argument	sizeof ( double ) * 3
>99	MultiplicativeExpression	sizeof ( double ) * 3
>100	PrimaryExpression	3
>101	SizeofExpr	sizeof ( double )
>102	SizeofOperand	double
>103	Sizeof	sizeof
>104	Argument	t3
>105	Identifier	t3
>106	Argument	tb
>107	Identifier	tb
>108	Callee	memcpy
>109	Identifier	memcpy
>110	ExpressionStatement	 
>111	CallExpression	memcpy ( Rb , R3 , sizeof ( double ) * 9 )
>112	ArgumentList	Rb
>113	Argument	sizeof ( double ) * 9
>114	MultiplicativeExpression	sizeof ( double ) * 9
>115	PrimaryExpression	9
>116	SizeofExpr	sizeof ( double )
>117	SizeofOperand	double
>118	Sizeof	sizeof
>119	Argument	R3
>120	Identifier	R3
>121	Argument	Rb
>122	Identifier	Rb
>123	Callee	memcpy
>124	Identifier	memcpy
>125	Label	 
>126	BreakStatement	 
>127	ExpressionStatement	 
>128	CallExpression	memcpy ( tb , t2 , sizeof ( double ) * 3 )
>129	ArgumentList	tb
>130	Argument	sizeof ( double ) * 3
>131	MultiplicativeExpression	sizeof ( double ) * 3
>132	PrimaryExpression	3
>133	SizeofExpr	sizeof ( double )
>134	SizeofOperand	double
>135	Sizeof	sizeof
>136	Argument	t2
>137	Identifier	t2
>138	Argument	tb
>139	Identifier	tb
>140	Callee	memcpy
>141	Identifier	memcpy
>142	ExpressionStatement	 
>143	CallExpression	memcpy ( Rb , R2 , sizeof ( double ) * 9 )
>144	ArgumentList	Rb
>145	Argument	sizeof ( double ) * 9
>146	MultiplicativeExpression	sizeof ( double ) * 9
>147	PrimaryExpression	9
>148	SizeofExpr	sizeof ( double )
>149	SizeofOperand	double
>150	Sizeof	sizeof
>151	Argument	R2
>152	Identifier	R2
>153	Argument	Rb
>154	Identifier	Rb
>155	Callee	memcpy
>156	Identifier	memcpy
>157	Label	 
>158	BreakStatement	 
>159	ExpressionStatement	 
>160	CallExpression	memcpy ( tb , t1 , sizeof ( double ) * 3 )
>161	ArgumentList	tb
>162	Argument	sizeof ( double ) * 3
>163	MultiplicativeExpression	sizeof ( double ) * 3
>164	PrimaryExpression	3
>165	SizeofExpr	sizeof ( double )
>166	SizeofOperand	double
>167	Sizeof	sizeof
>168	Argument	t1
>169	Identifier	t1
>170	Argument	tb
>171	Identifier	tb
>172	Callee	memcpy
>173	Identifier	memcpy
>174	ExpressionStatement	 
>175	CallExpression	memcpy ( Rb , R1 , sizeof ( double ) * 9 )
>176	ArgumentList	Rb
>177	Argument	sizeof ( double ) * 9
>178	MultiplicativeExpression	sizeof ( double ) * 9
>179	PrimaryExpression	9
>180	SizeofExpr	sizeof ( double )
>181	SizeofOperand	double
>182	Sizeof	sizeof
>183	Argument	R1
>184	Identifier	R1
>185	Argument	Rb
>186	Identifier	Rb
>187	Callee	memcpy
>188	Identifier	memcpy
>189	Label	 
>190	Condition	 
>191	Identifier	other
>192	CompoundStatement	 
>193	ExpressionStatement	 
>194	AssignmentExpr	tb [ 0 ] = tb [ 1 ] = tb [ 2 ]
>195	AssignmentExpr	tb [ 1 ] = tb [ 2 ]
>196	ArrayIndexing	tb [ 2 ]
>197	PrimaryExpression	2
>198	Identifier	tb
>199	ArrayIndexing	tb [ 1 ]
>200	PrimaryExpression	1
>201	Identifier	tb
>202	ArrayIndexing	tb [ 0 ]
>203	PrimaryExpression	0
>204	Identifier	tb
>205	ExpressionStatement	 
>206	CallExpression	matrix_ident ( 3 , Rb )
>207	ArgumentList	3
>208	Argument	Rb
>209	Identifier	Rb
>210	Argument	3
>211	PrimaryExpression	3
>212	Callee	matrix_ident
>213	Identifier	matrix_ident
>214	ExpressionStatement	 
>215	CallExpression	printf ( \"[DecomposeHomography] Error
>216	ArgumentList	\"[DecomposeHomography] Error
>217	Argument	\"[DecomposeHomography] Error
>218	PrimaryExpression	\"[DecomposeHomography] Error
>219	Callee	printf
>220	Identifier	printf
>221	Condition	 
>222	EqualityExpression	other == - 1
>223	UnaryOp	- 1
>224	PrimaryExpression	1
>225	UnaryOperator	-
>226	Identifier	other
>227	IfStatement	if ( good1 == best )
>228	ElseStatement	else
>229	CompoundStatement	 
>230	ExpressionStatement	 
>231	AssignmentExpr	other = good1
>232	Identifier	good1
>233	Identifier	other
>234	ExpressionStatement	 
>235	CallExpression	assert ( good2 == best )
>236	ArgumentList	good2 == best
>237	Argument	good2 == best
>238	EqualityExpression	good2 == best
>239	Identifier	best
>240	Identifier	good2
>241	Callee	assert
>242	Identifier	assert
>243	CompoundStatement	 
>244	ExpressionStatement	 
>245	AssignmentExpr	other = good2
>246	Identifier	good2
>247	Identifier	other
>248	Condition	 
>249	EqualityExpression	good1 == best
>250	Identifier	best
>251	Identifier	good1
>252	IdentifierDeclStatement	 
>253	IdentifierDecl	other = - 1
>254	AssignmentExpr	other = - 1
>255	UnaryOp	- 1
>256	PrimaryExpression	1
>257	UnaryOperator	-
>258	Identifier	other
>259	Identifier	other
>260	IdentifierDeclType	int
>261	Condition	 
>262	AndExpression	Rb != NULL && tb != NULL
>263	EqualityExpression	tb != NULL
>264	Identifier	NULL
>265	Identifier	tb
>266	EqualityExpression	Rb != NULL
>267	Identifier	NULL
>268	Identifier	Rb
>269	SwitchStatement	switch ( best )
>270	CompoundStatement	 
>271	BreakStatement	 
>272	ExpressionStatement	 
>273	CallExpression	memcpy ( ta , t4 , sizeof ( double ) * 3 )
>274	ArgumentList	ta
>275	Argument	sizeof ( double ) * 3
>276	MultiplicativeExpression	sizeof ( double ) * 3
>277	PrimaryExpression	3
>278	SizeofExpr	sizeof ( double )
>279	SizeofOperand	double
>280	Sizeof	sizeof
>281	Argument	t4
>282	Identifier	t4
>283	Argument	ta
>284	Identifier	ta
>285	Callee	memcpy
>286	Identifier	memcpy
>287	ExpressionStatement	 
>288	CallExpression	memcpy ( Ra , R4 , sizeof ( double ) * 9 )
>289	ArgumentList	Ra
>290	Argument	sizeof ( double ) * 9
>291	MultiplicativeExpression	sizeof ( double ) * 9
>292	PrimaryExpression	9
>293	SizeofExpr	sizeof ( double )
>294	SizeofOperand	double
>295	Sizeof	sizeof
>296	Argument	R4
>297	Identifier	R4
>298	Argument	Ra
>299	Identifier	Ra
>300	Callee	memcpy
>301	Identifier	memcpy
>302	Label	 
>303	BreakStatement	 
>304	ExpressionStatement	 
>305	CallExpression	memcpy ( ta , t3 , sizeof ( double ) * 3 )
>306	ArgumentList	ta
>307	Argument	sizeof ( double ) * 3
>308	MultiplicativeExpression	sizeof ( double ) * 3
>309	PrimaryExpression	3
>310	SizeofExpr	sizeof ( double )
>311	SizeofOperand	double
>312	Sizeof	sizeof
>313	Argument	t3
>314	Identifier	t3
>315	Argument	ta
>316	Identifier	ta
>317	Callee	memcpy
>318	Identifier	memcpy
>319	ExpressionStatement	 
>320	CallExpression	memcpy ( Ra , R3 , sizeof ( double ) * 9 )
>321	ArgumentList	Ra
>322	Argument	sizeof ( double ) * 9
>323	MultiplicativeExpression	sizeof ( double ) * 9
>324	PrimaryExpression	9
>325	SizeofExpr	sizeof ( double )
>326	SizeofOperand	double
>327	Sizeof	sizeof
>328	Argument	R3
>329	Identifier	R3
>330	Argument	Ra
>331	Identifier	Ra
>332	Callee	memcpy
>333	Identifier	memcpy
>334	Label	 
>335	BreakStatement	 
>336	ExpressionStatement	 
>337	CallExpression	memcpy ( ta , t2 , sizeof ( double ) * 3 )
>338	ArgumentList	ta
>339	Argument	sizeof ( double ) * 3
>340	MultiplicativeExpression	sizeof ( double ) * 3
>341	PrimaryExpression	3
>342	SizeofExpr	sizeof ( double )
>343	SizeofOperand	double
>344	Sizeof	sizeof
>345	Argument	t2
>346	Identifier	t2
>347	Argument	ta
>348	Identifier	ta
>349	Callee	memcpy
>350	Identifier	memcpy
>351	ExpressionStatement	 
>352	CallExpression	memcpy ( Ra , R2 , sizeof ( double ) * 9 )
>353	ArgumentList	Ra
>354	Argument	sizeof ( double ) * 9
>355	MultiplicativeExpression	sizeof ( double ) * 9
>356	PrimaryExpression	9
>357	SizeofExpr	sizeof ( double )
>358	SizeofOperand	double
>359	Sizeof	sizeof
>360	Argument	R2
>361	Identifier	R2
>362	Argument	Ra
>363	Identifier	Ra
>364	Callee	memcpy
>365	Identifier	memcpy
>366	Label	 
>367	BreakStatement	 
>368	ExpressionStatement	 
>369	CallExpression	memcpy ( ta , t1 , sizeof ( double ) * 3 )
>370	ArgumentList	ta
>371	Argument	sizeof ( double ) * 3
>372	MultiplicativeExpression	sizeof ( double ) * 3
>373	PrimaryExpression	3
>374	SizeofExpr	sizeof ( double )
>375	SizeofOperand	double
>376	Sizeof	sizeof
>377	Argument	t1
>378	Identifier	t1
>379	Argument	ta
>380	Identifier	ta
>381	Callee	memcpy
>382	Identifier	memcpy
>383	ExpressionStatement	 
>384	CallExpression	memcpy ( Ra , R1 , sizeof ( double ) * 9 )
>385	ArgumentList	Ra
>386	Argument	sizeof ( double ) * 9
>387	MultiplicativeExpression	sizeof ( double ) * 9
>388	PrimaryExpression	9
>389	SizeofExpr	sizeof ( double )
>390	SizeofOperand	double
>391	Sizeof	sizeof
>392	Argument	R1
>393	Identifier	R1
>394	Argument	Ra
>395	Identifier	Ra
>396	Callee	memcpy
>397	Identifier	memcpy
>398	Label	 
>399	Condition	 
>400	Identifier	best
>401	Condition	 
>402	AndExpression	Ra != NULL && ta != NULL
>403	EqualityExpression	ta != NULL
>404	Identifier	NULL
>405	Identifier	ta
>406	EqualityExpression	Ra != NULL
>407	Identifier	NULL
>408	Identifier	Ra
>409	IfStatement	if ( best == - 1 )
>410	CompoundStatement	 
>411	ReturnStatement	 
>412	Identifier	false
>413	ExpressionStatement	 
>414	CallExpression	printf ( \"[DecomposeHomography] No solution found\n\" )
>415	ArgumentList	\"[DecomposeHomography] No solution found\n\"
>416	Argument	\"[DecomposeHomography] No solution found\n\"
>417	PrimaryExpression	\"[DecomposeHomography] No solution found\n\"
>418	Callee	printf
>419	Identifier	printf
>420	Condition	 
>421	EqualityExpression	best == - 1
>422	UnaryOp	- 1
>423	PrimaryExpression	1
>424	UnaryOperator	-
>425	Identifier	best
>426	IfStatement	if ( in_front4 )
>427	CompoundStatement	 
>428	IfStatement	if ( good1 == - 1 )
>429	ElseStatement	else
>430	ExpressionStatement	 
>431	AssignmentExpr	good2 = 4
>432	PrimaryExpression	4
>433	Identifier	good2
>434	ExpressionStatement	 
>435	AssignmentExpr	good1 = 4
>436	PrimaryExpression	4
>437	Identifier	good1
>438	Condition	 
>439	EqualityExpression	good1 == - 1
>440	UnaryOp	- 1
>441	PrimaryExpression	1
>442	UnaryOperator	-
>443	Identifier	good1
>444	Condition	 
>445	Identifier	in_front4
>446	IfStatement	if ( in_front4 && fabs ( n4 [ 2 ] ) > max_plane_norm )
>447	CompoundStatement	 
>448	ExpressionStatement	 
>449	AssignmentExpr	error_best = error4
>450	Identifier	error4
>451	Identifier	error_best
>452	ExpressionStatement	 
>453	AssignmentExpr	best = 4
>454	PrimaryExpression	4
>455	Identifier	best
>456	ExpressionStatement	 
>457	AssignmentExpr	max_plane_norm = fabs ( n4 [ 2 ] )
>458	CallExpression	fabs ( n4 [ 2 ] )
>459	ArgumentList	n4 [ 2 ]
>460	Argument	n4 [ 2 ]
>461	ArrayIndexing	n4 [ 2 ]
>462	PrimaryExpression	2
>463	Identifier	n4
>464	Callee	fabs
>465	Identifier	fabs
>466	Identifier	max_plane_norm
>467	Condition	 
>468	AndExpression	in_front4 && fabs ( n4 [ 2 ] ) > max_plane_norm
>469	RelationalExpression	fabs ( n4 [ 2 ] ) > max_plane_norm
>470	Identifier	max_plane_norm
>471	CallExpression	fabs ( n4 [ 2 ] )
>472	ArgumentList	n4 [ 2 ]
>473	Argument	n4 [ 2 ]
>474	ArrayIndexing	n4 [ 2 ]
>475	PrimaryExpression	2
>476	Identifier	n4
>477	Callee	fabs
>478	Identifier	fabs
>479	Identifier	in_front4
>480	IfStatement	if ( in_front3 )
>481	CompoundStatement	 
>482	IfStatement	if ( good1 == - 1 )
>483	ElseStatement	else
>484	ExpressionStatement	 
>485	AssignmentExpr	good2 = 3
>486	PrimaryExpression	3
>487	Identifier	good2
>488	ExpressionStatement	 
>489	AssignmentExpr	good1 = 3
>490	PrimaryExpression	3
>491	Identifier	good1
>492	Condition	 
>493	EqualityExpression	good1 == - 1
>494	UnaryOp	- 1
>495	PrimaryExpression	1
>496	UnaryOperator	-
>497	Identifier	good1
>498	Condition	 
>499	Identifier	in_front3
>500	IfStatement	if ( in_front3 && fabs ( n3 [ 2 ] ) > max_plane_norm )
>501	CompoundStatement	 
>502	ExpressionStatement	 
>503	AssignmentExpr	error_best = error3
>504	Identifier	error3
>505	Identifier	error_best
>506	ExpressionStatement	 
>507	AssignmentExpr	best = 3
>508	PrimaryExpression	3
>509	Identifier	best
>510	ExpressionStatement	 
>511	AssignmentExpr	max_plane_norm = fabs ( n3 [ 2 ] )
>512	CallExpression	fabs ( n3 [ 2 ] )
>513	ArgumentList	n3 [ 2 ]
>514	Argument	n3 [ 2 ]
>515	ArrayIndexing	n3 [ 2 ]
>516	PrimaryExpression	2
>517	Identifier	n3
>518	Callee	fabs
>519	Identifier	fabs
>520	Identifier	max_plane_norm
>521	Condition	 
>522	AndExpression	in_front3 && fabs ( n3 [ 2 ] ) > max_plane_norm
>523	RelationalExpression	fabs ( n3 [ 2 ] ) > max_plane_norm
>524	Identifier	max_plane_norm
>525	CallExpression	fabs ( n3 [ 2 ] )
>526	ArgumentList	n3 [ 2 ]
>527	Argument	n3 [ 2 ]
>528	ArrayIndexing	n3 [ 2 ]
>529	PrimaryExpression	2
>530	Identifier	n3
>531	Callee	fabs
>532	Identifier	fabs
>533	Identifier	in_front3
>534	IfStatement	if ( in_front2 )
>535	CompoundStatement	 
>536	IfStatement	if ( good1 == - 1 )
>537	ElseStatement	else
>538	ExpressionStatement	 
>539	AssignmentExpr	good2 = 2
>540	PrimaryExpression	2
>541	Identifier	good2
>542	ExpressionStatement	 
>543	AssignmentExpr	good1 = 2
>544	PrimaryExpression	2
>545	Identifier	good1
>546	Condition	 
>547	EqualityExpression	good1 == - 1
>548	UnaryOp	- 1
>549	PrimaryExpression	1
>550	UnaryOperator	-
>551	Identifier	good1
>552	Condition	 
>553	Identifier	in_front2
>554	IfStatement	if ( in_front2 && fabs ( n2 [ 2 ] ) > max_plane_norm )
>555	CompoundStatement	 
>556	ExpressionStatement	 
>557	AssignmentExpr	error_best = error2
>558	Identifier	error2
>559	Identifier	error_best
>560	ExpressionStatement	 
>561	AssignmentExpr	best = 2
>562	PrimaryExpression	2
>563	Identifier	best
>564	ExpressionStatement	 
>565	AssignmentExpr	max_plane_norm = fabs ( n2 [ 2 ] )
>566	CallExpression	fabs ( n2 [ 2 ] )
>567	ArgumentList	n2 [ 2 ]
>568	Argument	n2 [ 2 ]
>569	ArrayIndexing	n2 [ 2 ]
>570	PrimaryExpression	2
>571	Identifier	n2
>572	Callee	fabs
>573	Identifier	fabs
>574	Identifier	max_plane_norm
>575	Condition	 
>576	AndExpression	in_front2 && fabs ( n2 [ 2 ] ) > max_plane_norm
>577	RelationalExpression	fabs ( n2 [ 2 ] ) > max_plane_norm
>578	Identifier	max_plane_norm
>579	CallExpression	fabs ( n2 [ 2 ] )
>580	ArgumentList	n2 [ 2 ]
>581	Argument	n2 [ 2 ]
>582	ArrayIndexing	n2 [ 2 ]
>583	PrimaryExpression	2
>584	Identifier	n2
>585	Callee	fabs
>586	Identifier	fabs
>587	Identifier	in_front2
>588	IfStatement	if ( in_front1 )
>589	CompoundStatement	 
>590	ExpressionStatement	 
>591	AssignmentExpr	good1 = 1
>592	PrimaryExpression	1
>593	Identifier	good1
>594	Condition	 
>595	Identifier	in_front1
>596	IfStatement	if ( in_front1 && fabs ( n1 [ 2 ] ) > max_plane_norm )
>597	CompoundStatement	 
>598	ExpressionStatement	 
>599	AssignmentExpr	error_best = error1
>600	Identifier	error1
>601	Identifier	error_best
>602	ExpressionStatement	 
>603	AssignmentExpr	best = 1
>604	PrimaryExpression	1
>605	Identifier	best
>606	ExpressionStatement	 
>607	AssignmentExpr	max_plane_norm = fabs ( n1 [ 2 ] )
>608	CallExpression	fabs ( n1 [ 2 ] )
>609	ArgumentList	n1 [ 2 ]
>610	Argument	n1 [ 2 ]
>611	ArrayIndexing	n1 [ 2 ]
>612	PrimaryExpression	2
>613	Identifier	n1
>614	Callee	fabs
>615	Identifier	fabs
>616	Identifier	max_plane_norm
>617	Condition	 
>618	AndExpression	in_front1 && fabs ( n1 [ 2 ] ) > max_plane_norm
>619	RelationalExpression	fabs ( n1 [ 2 ] ) > max_plane_norm
>620	Identifier	max_plane_norm
>621	CallExpression	fabs ( n1 [ 2 ] )
>622	ArgumentList	n1 [ 2 ]
>623	Argument	n1 [ 2 ]
>624	ArrayIndexing	n1 [ 2 ]
>625	PrimaryExpression	2
>626	Identifier	n1
>627	Callee	fabs
>628	Identifier	fabs
>629	Identifier	in_front1
>630	IdentifierDeclStatement	 
>631	IdentifierDecl	good2 = - 1
>632	AssignmentExpr	good2 = - 1
>633	UnaryOp	- 1
>634	PrimaryExpression	1
>635	UnaryOperator	-
>636	Identifier	good2
>637	Identifier	good2
>638	IdentifierDeclType	int
>639	IdentifierDecl	good1 = - 1
>640	AssignmentExpr	good1 = - 1
>641	UnaryOp	- 1
>642	PrimaryExpression	1
>643	UnaryOperator	-
>644	Identifier	good1
>645	Identifier	good1
>646	IdentifierDeclType	int
>647	IdentifierDecl	best = - 1
>648	AssignmentExpr	best = - 1
>649	UnaryOp	- 1
>650	PrimaryExpression	1
>651	UnaryOperator	-
>652	Identifier	best
>653	Identifier	best
>654	IdentifierDeclType	int
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	error_best = 0.0
>657	AssignmentExpr	error_best = 0.0
>658	PrimaryExpression	0.0
>659	Identifier	error_best
>660	Identifier	error_best
>661	IdentifierDeclType	double
>662	IdentifierDeclStatement	 
>663	IdentifierDecl	max_plane_norm = 0.0
>664	AssignmentExpr	max_plane_norm = 0.0
>665	PrimaryExpression	0.0
>666	Identifier	max_plane_norm
>667	Identifier	max_plane_norm
>668	IdentifierDeclType	double
>669	ExpressionStatement	 
>670	CallExpression	printf ( \"error4
>671	ArgumentList	\"error4
>672	Argument	in_front4 ? 1 
>673	ConditionalExpression	in_front4 ? 1 
>674	PrimaryExpression	0
>675	PrimaryExpression	1
>676	Condition	in_front4
>677	Identifier	in_front4
>678	Argument	RAD2DEG ( angle4 )
>679	CallExpression	RAD2DEG ( angle4 )
>680	ArgumentList	angle4
>681	Argument	angle4
>682	Identifier	angle4
>683	Callee	RAD2DEG
>684	Identifier	RAD2DEG
>685	Argument	error4
>686	Identifier	error4
>687	Argument	\"error4
>688	PrimaryExpression	\"error4
>689	Callee	printf
>690	Identifier	printf
>691	ExpressionStatement	 
>692	CallExpression	matrix_print ( 1 , 3 , n4 )
>693	ArgumentList	1
>694	Argument	n4
>695	Identifier	n4
>696	Argument	3
>697	PrimaryExpression	3
>698	Argument	1
>699	PrimaryExpression	1
>700	Callee	matrix_print
>701	Identifier	matrix_print
>702	ExpressionStatement	 
>703	CallExpression	matrix_print ( 1 , 3 , t4 )
>704	ArgumentList	1
>705	Argument	t4
>706	Identifier	t4
>707	Argument	3
>708	PrimaryExpression	3
>709	Argument	1
>710	PrimaryExpression	1
>711	Callee	matrix_print
>712	Identifier	matrix_print
>713	ExpressionStatement	 
>714	CallExpression	printf ( \"\n\" )
>715	ArgumentList	\"\n\"
>716	Argument	\"\n\"
>717	PrimaryExpression	\"\n\"
>718	Callee	printf
>719	Identifier	printf
>720	ExpressionStatement	 
>721	CallExpression	matrix_print ( 3 , 3 , R4 )
>722	ArgumentList	3
>723	Argument	R4
>724	Identifier	R4
>725	Argument	3
>726	PrimaryExpression	3
>727	Argument	3
>728	PrimaryExpression	3
>729	Callee	matrix_print
>730	Identifier	matrix_print
>731	ExpressionStatement	 
>732	CallExpression	printf ( \"error3
>733	ArgumentList	\"error3
>734	Argument	in_front3 ? 1 
>735	ConditionalExpression	in_front3 ? 1 
>736	PrimaryExpression	0
>737	PrimaryExpression	1
>738	Condition	in_front3
>739	Identifier	in_front3
>740	Argument	RAD2DEG ( angle3 )
>741	CallExpression	RAD2DEG ( angle3 )
>742	ArgumentList	angle3
>743	Argument	angle3
>744	Identifier	angle3
>745	Callee	RAD2DEG
>746	Identifier	RAD2DEG
>747	Argument	error3
>748	Identifier	error3
>749	Argument	\"error3
>750	PrimaryExpression	\"error3
>751	Callee	printf
>752	Identifier	printf
>753	ExpressionStatement	 
>754	CallExpression	matrix_print ( 1 , 3 , n3 )
>755	ArgumentList	1
>756	Argument	n3
>757	Identifier	n3
>758	Argument	3
>759	PrimaryExpression	3
>760	Argument	1
>761	PrimaryExpression	1
>762	Callee	matrix_print
>763	Identifier	matrix_print
>764	ExpressionStatement	 
>765	CallExpression	matrix_print ( 1 , 3 , t3 )
>766	ArgumentList	1
>767	Argument	t3
>768	Identifier	t3
>769	Argument	3
>770	PrimaryExpression	3
>771	Argument	1
>772	PrimaryExpression	1
>773	Callee	matrix_print
>774	Identifier	matrix_print
>775	ExpressionStatement	 
>776	CallExpression	printf ( \"\n\" )
>777	ArgumentList	\"\n\"
>778	Argument	\"\n\"
>779	PrimaryExpression	\"\n\"
>780	Callee	printf
>781	Identifier	printf
>782	ExpressionStatement	 
>783	CallExpression	matrix_print ( 3 , 3 , R3 )
>784	ArgumentList	3
>785	Argument	R3
>786	Identifier	R3
>787	Argument	3
>788	PrimaryExpression	3
>789	Argument	3
>790	PrimaryExpression	3
>791	Callee	matrix_print
>792	Identifier	matrix_print
>793	ExpressionStatement	 
>794	CallExpression	printf ( \"error2
>795	ArgumentList	\"error2
>796	Argument	in_front2 ? 1 
>797	ConditionalExpression	in_front2 ? 1 
>798	PrimaryExpression	0
>799	PrimaryExpression	1
>800	Condition	in_front2
>801	Identifier	in_front2
>802	Argument	RAD2DEG ( angle2 )
>803	CallExpression	RAD2DEG ( angle2 )
>804	ArgumentList	angle2
>805	Argument	angle2
>806	Identifier	angle2
>807	Callee	RAD2DEG
>808	Identifier	RAD2DEG
>809	Argument	error2
>810	Identifier	error2
>811	Argument	\"error2
>812	PrimaryExpression	\"error2
>813	Callee	printf
>814	Identifier	printf
>815	ExpressionStatement	 
>816	CallExpression	matrix_print ( 1 , 3 , n2 )
>817	ArgumentList	1
>818	Argument	n2
>819	Identifier	n2
>820	Argument	3
>821	PrimaryExpression	3
>822	Argument	1
>823	PrimaryExpression	1
>824	Callee	matrix_print
>825	Identifier	matrix_print
>826	ExpressionStatement	 
>827	CallExpression	matrix_print ( 1 , 3 , t2 )
>828	ArgumentList	1
>829	Argument	t2
>830	Identifier	t2
>831	Argument	3
>832	PrimaryExpression	3
>833	Argument	1
>834	PrimaryExpression	1
>835	Callee	matrix_print
>836	Identifier	matrix_print
>837	ExpressionStatement	 
>838	CallExpression	printf ( \"\n\" )
>839	ArgumentList	\"\n\"
>840	Argument	\"\n\"
>841	PrimaryExpression	\"\n\"
>842	Callee	printf
>843	Identifier	printf
>844	ExpressionStatement	 
>845	CallExpression	matrix_print ( 3 , 3 , R2 )
>846	ArgumentList	3
>847	Argument	R2
>848	Identifier	R2
>849	Argument	3
>850	PrimaryExpression	3
>851	Argument	3
>852	PrimaryExpression	3
>853	Callee	matrix_print
>854	Identifier	matrix_print
>855	ExpressionStatement	 
>856	CallExpression	printf ( \"error1
>857	ArgumentList	\"error1
>858	Argument	in_front1 ? 1 
>859	ConditionalExpression	in_front1 ? 1 
>860	PrimaryExpression	0
>861	PrimaryExpression	1
>862	Condition	in_front1
>863	Identifier	in_front1
>864	Argument	RAD2DEG ( angle1 )
>865	CallExpression	RAD2DEG ( angle1 )
>866	ArgumentList	angle1
>867	Argument	angle1
>868	Identifier	angle1
>869	Callee	RAD2DEG
>870	Identifier	RAD2DEG
>871	Argument	error1
>872	Identifier	error1
>873	Argument	\"error1
>874	PrimaryExpression	\"error1
>875	Callee	printf
>876	Identifier	printf
>877	ExpressionStatement	 
>878	CallExpression	matrix_print ( 1 , 3 , n1 )
>879	ArgumentList	1
>880	Argument	n1
>881	Identifier	n1
>882	Argument	3
>883	PrimaryExpression	3
>884	Argument	1
>885	PrimaryExpression	1
>886	Callee	matrix_print
>887	Identifier	matrix_print
>888	ExpressionStatement	 
>889	CallExpression	matrix_print ( 1 , 3 , t1 )
>890	ArgumentList	1
>891	Argument	t1
>892	Identifier	t1
>893	Argument	3
>894	PrimaryExpression	3
>895	Argument	1
>896	PrimaryExpression	1
>897	Callee	matrix_print
>898	Identifier	matrix_print
>899	ExpressionStatement	 
>900	CallExpression	printf ( \"\n\" )
>901	ArgumentList	\"\n\"
>902	Argument	\"\n\"
>903	PrimaryExpression	\"\n\"
>904	Callee	printf
>905	Identifier	printf
>906	ExpressionStatement	 
>907	CallExpression	matrix_print ( 3 , 3 , R1 )
>908	ArgumentList	3
>909	Argument	R1
>910	Identifier	R1
>911	Argument	3
>912	PrimaryExpression	3
>913	Argument	3
>914	PrimaryExpression	3
>915	Callee	matrix_print
>916	Identifier	matrix_print
>917	ExpressionStatement	 
>918	CallExpression	Triangulate ( p , q , camera0 , camera1 , error4 , in_front4 , angle4 , true )
>919	ArgumentList	p
>920	Argument	true
>921	Identifier	true
>922	Argument	angle4
>923	Identifier	angle4
>924	Argument	in_front4
>925	Identifier	in_front4
>926	Argument	error4
>927	Identifier	error4
>928	Argument	camera1
>929	Identifier	camera1
>930	Argument	camera0
>931	Identifier	camera0
>932	Argument	q
>933	Identifier	q
>934	Argument	p
>935	Identifier	p
>936	Callee	Triangulate
>937	Identifier	Triangulate
>938	ExpressionStatement	 
>939	CallExpression	matrix_scale ( 3 , 1 , camera1 . t , - 1.0 , camera1 . t )
>940	ArgumentList	3
>941	Argument	camera1 . t
>942	MemberAccess	camera1 . t
>943	Identifier	t
>944	Identifier	camera1
>945	Argument	- 1.0
>946	UnaryOp	- 1.0
>947	PrimaryExpression	1.0
>948	UnaryOperator	-
>949	Argument	camera1 . t
>950	MemberAccess	camera1 . t
>951	Identifier	t
>952	Identifier	camera1
>953	Argument	1
>954	PrimaryExpression	1
>955	Argument	3
>956	PrimaryExpression	3
>957	Callee	matrix_scale
>958	Identifier	matrix_scale
>959	ExpressionStatement	 
>960	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R4 , t4 , camera1 . t )
>961	ArgumentList	3
>962	Argument	camera1 . t
>963	MemberAccess	camera1 . t
>964	Identifier	t
>965	Identifier	camera1
>966	Argument	t4
>967	Identifier	t4
>968	Argument	R4
>969	Identifier	R4
>970	Argument	1
>971	PrimaryExpression	1
>972	Argument	3
>973	PrimaryExpression	3
>974	Argument	3
>975	PrimaryExpression	3
>976	Argument	3
>977	PrimaryExpression	3
>978	Callee	matrix_transpose_product
>979	Identifier	matrix_transpose_product
>980	ExpressionStatement	 
>981	CallExpression	memcpy ( camera1 . R , R4 , sizeof ( double ) * 9 )
>982	ArgumentList	camera1 . R
>983	Argument	sizeof ( double ) * 9
>984	MultiplicativeExpression	sizeof ( double ) * 9
>985	PrimaryExpression	9
>986	SizeofExpr	sizeof ( double )
>987	SizeofOperand	double
>988	Sizeof	sizeof
>989	Argument	R4
>990	Identifier	R4
>991	Argument	camera1 . R
>992	MemberAccess	camera1 . R
>993	Identifier	R
>994	Identifier	camera1
>995	Callee	memcpy
>996	Identifier	memcpy
>997	IdentifierDeclStatement	 
>998	IdentifierDecl	in_front4
>999	Identifier	in_front4
>1000	IdentifierDeclType	bool
>1001	IdentifierDeclStatement	 
>1002	IdentifierDecl	angle4
>1003	Identifier	angle4
>1004	IdentifierDeclType	double
>1005	IdentifierDecl	error4
>1006	Identifier	error4
>1007	IdentifierDeclType	double
>1008	ExpressionStatement	 
>1009	CallExpression	Triangulate ( p , q , camera0 , camera1 , error3 , in_front3 , angle3 , true )
>1010	ArgumentList	p
>1011	Argument	true
>1012	Identifier	true
>1013	Argument	angle3
>1014	Identifier	angle3
>1015	Argument	in_front3
>1016	Identifier	in_front3
>1017	Argument	error3
>1018	Identifier	error3
>1019	Argument	camera1
>1020	Identifier	camera1
>1021	Argument	camera0
>1022	Identifier	camera0
>1023	Argument	q
>1024	Identifier	q
>1025	Argument	p
>1026	Identifier	p
>1027	Callee	Triangulate
>1028	Identifier	Triangulate
>1029	ExpressionStatement	 
>1030	CallExpression	matrix_scale ( 3 , 1 , camera1 . t , - 1.0 , camera1 . t )
>1031	ArgumentList	3
>1032	Argument	camera1 . t
>1033	MemberAccess	camera1 . t
>1034	Identifier	t
>1035	Identifier	camera1
>1036	Argument	- 1.0
>1037	UnaryOp	- 1.0
>1038	PrimaryExpression	1.0
>1039	UnaryOperator	-
>1040	Argument	camera1 . t
>1041	MemberAccess	camera1 . t
>1042	Identifier	t
>1043	Identifier	camera1
>1044	Argument	1
>1045	PrimaryExpression	1
>1046	Argument	3
>1047	PrimaryExpression	3
>1048	Callee	matrix_scale
>1049	Identifier	matrix_scale
>1050	ExpressionStatement	 
>1051	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R3 , t3 , camera1 . t )
>1052	ArgumentList	3
>1053	Argument	camera1 . t
>1054	MemberAccess	camera1 . t
>1055	Identifier	t
>1056	Identifier	camera1
>1057	Argument	t3
>1058	Identifier	t3
>1059	Argument	R3
>1060	Identifier	R3
>1061	Argument	1
>1062	PrimaryExpression	1
>1063	Argument	3
>1064	PrimaryExpression	3
>1065	Argument	3
>1066	PrimaryExpression	3
>1067	Argument	3
>1068	PrimaryExpression	3
>1069	Callee	matrix_transpose_product
>1070	Identifier	matrix_transpose_product
>1071	ExpressionStatement	 
>1072	CallExpression	memcpy ( camera1 . R , R3 , sizeof ( double ) * 9 )
>1073	ArgumentList	camera1 . R
>1074	Argument	sizeof ( double ) * 9
>1075	MultiplicativeExpression	sizeof ( double ) * 9
>1076	PrimaryExpression	9
>1077	SizeofExpr	sizeof ( double )
>1078	SizeofOperand	double
>1079	Sizeof	sizeof
>1080	Argument	R3
>1081	Identifier	R3
>1082	Argument	camera1 . R
>1083	MemberAccess	camera1 . R
>1084	Identifier	R
>1085	Identifier	camera1
>1086	Callee	memcpy
>1087	Identifier	memcpy
>1088	IdentifierDeclStatement	 
>1089	IdentifierDecl	in_front3
>1090	Identifier	in_front3
>1091	IdentifierDeclType	bool
>1092	IdentifierDeclStatement	 
>1093	IdentifierDecl	angle3
>1094	Identifier	angle3
>1095	IdentifierDeclType	double
>1096	IdentifierDecl	error3
>1097	Identifier	error3
>1098	IdentifierDeclType	double
>1099	ExpressionStatement	 
>1100	CallExpression	Triangulate ( p , q , camera0 , camera1 , error2 , in_front2 , angle2 , true )
>1101	ArgumentList	p
>1102	Argument	true
>1103	Identifier	true
>1104	Argument	angle2
>1105	Identifier	angle2
>1106	Argument	in_front2
>1107	Identifier	in_front2
>1108	Argument	error2
>1109	Identifier	error2
>1110	Argument	camera1
>1111	Identifier	camera1
>1112	Argument	camera0
>1113	Identifier	camera0
>1114	Argument	q
>1115	Identifier	q
>1116	Argument	p
>1117	Identifier	p
>1118	Callee	Triangulate
>1119	Identifier	Triangulate
>1120	ExpressionStatement	 
>1121	CallExpression	matrix_scale ( 3 , 1 , camera1 . t , - 1.0 , camera1 . t )
>1122	ArgumentList	3
>1123	Argument	camera1 . t
>1124	MemberAccess	camera1 . t
>1125	Identifier	t
>1126	Identifier	camera1
>1127	Argument	- 1.0
>1128	UnaryOp	- 1.0
>1129	PrimaryExpression	1.0
>1130	UnaryOperator	-
>1131	Argument	camera1 . t
>1132	MemberAccess	camera1 . t
>1133	Identifier	t
>1134	Identifier	camera1
>1135	Argument	1
>1136	PrimaryExpression	1
>1137	Argument	3
>1138	PrimaryExpression	3
>1139	Callee	matrix_scale
>1140	Identifier	matrix_scale
>1141	ExpressionStatement	 
>1142	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R2 , t2 , camera1 . t )
>1143	ArgumentList	3
>1144	Argument	camera1 . t
>1145	MemberAccess	camera1 . t
>1146	Identifier	t
>1147	Identifier	camera1
>1148	Argument	t2
>1149	Identifier	t2
>1150	Argument	R2
>1151	Identifier	R2
>1152	Argument	1
>1153	PrimaryExpression	1
>1154	Argument	3
>1155	PrimaryExpression	3
>1156	Argument	3
>1157	PrimaryExpression	3
>1158	Argument	3
>1159	PrimaryExpression	3
>1160	Callee	matrix_transpose_product
>1161	Identifier	matrix_transpose_product
>1162	ExpressionStatement	 
>1163	CallExpression	memcpy ( camera1 . R , R2 , sizeof ( double ) * 9 )
>1164	ArgumentList	camera1 . R
>1165	Argument	sizeof ( double ) * 9
>1166	MultiplicativeExpression	sizeof ( double ) * 9
>1167	PrimaryExpression	9
>1168	SizeofExpr	sizeof ( double )
>1169	SizeofOperand	double
>1170	Sizeof	sizeof
>1171	Argument	R2
>1172	Identifier	R2
>1173	Argument	camera1 . R
>1174	MemberAccess	camera1 . R
>1175	Identifier	R
>1176	Identifier	camera1
>1177	Callee	memcpy
>1178	Identifier	memcpy
>1179	IdentifierDeclStatement	 
>1180	IdentifierDecl	in_front2
>1181	Identifier	in_front2
>1182	IdentifierDeclType	bool
>1183	IdentifierDeclStatement	 
>1184	IdentifierDecl	angle2
>1185	Identifier	angle2
>1186	IdentifierDeclType	double
>1187	IdentifierDecl	error2
>1188	Identifier	error2
>1189	IdentifierDeclType	double
>1190	ExpressionStatement	 
>1191	CallExpression	Triangulate ( p , q , camera0 , camera1 , error1 , in_front1 , angle1 , true )
>1192	ArgumentList	p
>1193	Argument	true
>1194	Identifier	true
>1195	Argument	angle1
>1196	Identifier	angle1
>1197	Argument	in_front1
>1198	Identifier	in_front1
>1199	Argument	error1
>1200	Identifier	error1
>1201	Argument	camera1
>1202	Identifier	camera1
>1203	Argument	camera0
>1204	Identifier	camera0
>1205	Argument	q
>1206	Identifier	q
>1207	Argument	p
>1208	Identifier	p
>1209	Callee	Triangulate
>1210	Identifier	Triangulate
>1211	ExpressionStatement	 
>1212	CallExpression	matrix_scale ( 3 , 1 , camera1 . t , - 1.0 , camera1 . t )
>1213	ArgumentList	3
>1214	Argument	camera1 . t
>1215	MemberAccess	camera1 . t
>1216	Identifier	t
>1217	Identifier	camera1
>1218	Argument	- 1.0
>1219	UnaryOp	- 1.0
>1220	PrimaryExpression	1.0
>1221	UnaryOperator	-
>1222	Argument	camera1 . t
>1223	MemberAccess	camera1 . t
>1224	Identifier	t
>1225	Identifier	camera1
>1226	Argument	1
>1227	PrimaryExpression	1
>1228	Argument	3
>1229	PrimaryExpression	3
>1230	Callee	matrix_scale
>1231	Identifier	matrix_scale
>1232	ExpressionStatement	 
>1233	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , R1 , t1 , camera1 . t )
>1234	ArgumentList	3
>1235	Argument	camera1 . t
>1236	MemberAccess	camera1 . t
>1237	Identifier	t
>1238	Identifier	camera1
>1239	Argument	t1
>1240	Identifier	t1
>1241	Argument	R1
>1242	Identifier	R1
>1243	Argument	1
>1244	PrimaryExpression	1
>1245	Argument	3
>1246	PrimaryExpression	3
>1247	Argument	3
>1248	PrimaryExpression	3
>1249	Argument	3
>1250	PrimaryExpression	3
>1251	Callee	matrix_transpose_product
>1252	Identifier	matrix_transpose_product
>1253	ExpressionStatement	 
>1254	CallExpression	memcpy ( camera1 . R , R1 , sizeof ( double ) * 9 )
>1255	ArgumentList	camera1 . R
>1256	Argument	sizeof ( double ) * 9
>1257	MultiplicativeExpression	sizeof ( double ) * 9
>1258	PrimaryExpression	9
>1259	SizeofExpr	sizeof ( double )
>1260	SizeofOperand	double
>1261	Sizeof	sizeof
>1262	Argument	R1
>1263	Identifier	R1
>1264	Argument	camera1 . R
>1265	MemberAccess	camera1 . R
>1266	Identifier	R
>1267	Identifier	camera1
>1268	Callee	memcpy
>1269	Identifier	memcpy
>1270	IdentifierDeclStatement	 
>1271	IdentifierDecl	in_front1
>1272	Identifier	in_front1
>1273	IdentifierDeclType	bool
>1274	IdentifierDeclStatement	 
>1275	IdentifierDecl	angle1
>1276	Identifier	angle1
>1277	IdentifierDeclType	double
>1278	IdentifierDecl	error1
>1279	Identifier	error1
>1280	IdentifierDeclType	double
>1281	ExpressionStatement	 
>1282	AssignmentExpr	camera1 . f = f2
>1283	Identifier	f2
>1284	MemberAccess	camera1 . f
>1285	Identifier	f
>1286	Identifier	camera1
>1287	ExpressionStatement	 
>1288	AssignmentExpr	camera0 . f = f1
>1289	Identifier	f1
>1290	MemberAccess	camera0 . f
>1291	Identifier	f
>1292	Identifier	camera0
>1293	ExpressionStatement	 
>1294	CallExpression	matrix_zeroes ( 3 , 1 , camera0 . t )
>1295	ArgumentList	3
>1296	Argument	camera0 . t
>1297	MemberAccess	camera0 . t
>1298	Identifier	t
>1299	Identifier	camera0
>1300	Argument	1
>1301	PrimaryExpression	1
>1302	Argument	3
>1303	PrimaryExpression	3
>1304	Callee	matrix_zeroes
>1305	Identifier	matrix_zeroes
>1306	ExpressionStatement	 
>1307	CallExpression	matrix_ident ( 3 , camera0 . R )
>1308	ArgumentList	3
>1309	Argument	camera0 . R
>1310	MemberAccess	camera0 . R
>1311	Identifier	R
>1312	Identifier	camera0
>1313	Argument	3
>1314	PrimaryExpression	3
>1315	Callee	matrix_ident
>1316	Identifier	matrix_ident
>1317	IdentifierDeclStatement	 
>1318	IdentifierDecl	camera1
>1319	Identifier	camera1
>1320	IdentifierDeclType	camera_params_t
>1321	IdentifierDecl	camera0
>1322	Identifier	camera0
>1323	IdentifierDeclType	camera_params_t
>1324	ExpressionStatement	 
>1325	CallExpression	matrix_scale ( 3 , 1 , t2 , - 1.0 , t4 )
>1326	ArgumentList	3
>1327	Argument	t4
>1328	Identifier	t4
>1329	Argument	- 1.0
>1330	UnaryOp	- 1.0
>1331	PrimaryExpression	1.0
>1332	UnaryOperator	-
>1333	Argument	t2
>1334	Identifier	t2
>1335	Argument	1
>1336	PrimaryExpression	1
>1337	Argument	3
>1338	PrimaryExpression	3
>1339	Callee	matrix_scale
>1340	Identifier	matrix_scale
>1341	ExpressionStatement	 
>1342	CallExpression	matrix_scale ( 3 , 1 , n2 , - 1.0 , n4 )
>1343	ArgumentList	3
>1344	Argument	n4
>1345	Identifier	n4
>1346	Argument	- 1.0
>1347	UnaryOp	- 1.0
>1348	PrimaryExpression	1.0
>1349	UnaryOperator	-
>1350	Argument	n2
>1351	Identifier	n2
>1352	Argument	1
>1353	PrimaryExpression	1
>1354	Argument	3
>1355	PrimaryExpression	3
>1356	Callee	matrix_scale
>1357	Identifier	matrix_scale
>1358	ExpressionStatement	 
>1359	CallExpression	memcpy ( R4 , R2 , sizeof ( double ) * 9 )
>1360	ArgumentList	R4
>1361	Argument	sizeof ( double ) * 9
>1362	MultiplicativeExpression	sizeof ( double ) * 9
>1363	PrimaryExpression	9
>1364	SizeofExpr	sizeof ( double )
>1365	SizeofOperand	double
>1366	Sizeof	sizeof
>1367	Argument	R2
>1368	Identifier	R2
>1369	Argument	R4
>1370	Identifier	R4
>1371	Callee	memcpy
>1372	Identifier	memcpy
>1373	ExpressionStatement	 
>1374	CallExpression	matrix_scale ( 3 , 1 , t1 , - 1.0 , t3 )
>1375	ArgumentList	3
>1376	Argument	t3
>1377	Identifier	t3
>1378	Argument	- 1.0
>1379	UnaryOp	- 1.0
>1380	PrimaryExpression	1.0
>1381	UnaryOperator	-
>1382	Argument	t1
>1383	Identifier	t1
>1384	Argument	1
>1385	PrimaryExpression	1
>1386	Argument	3
>1387	PrimaryExpression	3
>1388	Callee	matrix_scale
>1389	Identifier	matrix_scale
>1390	ExpressionStatement	 
>1391	CallExpression	matrix_scale ( 3 , 1 , n1 , - 1.0 , n3 )
>1392	ArgumentList	3
>1393	Argument	n3
>1394	Identifier	n3
>1395	Argument	- 1.0
>1396	UnaryOp	- 1.0
>1397	PrimaryExpression	1.0
>1398	UnaryOperator	-
>1399	Argument	n1
>1400	Identifier	n1
>1401	Argument	1
>1402	PrimaryExpression	1
>1403	Argument	3
>1404	PrimaryExpression	3
>1405	Callee	matrix_scale
>1406	Identifier	matrix_scale
>1407	ExpressionStatement	 
>1408	CallExpression	memcpy ( R3 , R1 , sizeof ( double ) * 9 )
>1409	ArgumentList	R3
>1410	Argument	sizeof ( double ) * 9
>1411	MultiplicativeExpression	sizeof ( double ) * 9
>1412	PrimaryExpression	9
>1413	SizeofExpr	sizeof ( double )
>1414	SizeofOperand	double
>1415	Sizeof	sizeof
>1416	Argument	R1
>1417	Identifier	R1
>1418	Argument	R3
>1419	Identifier	R3
>1420	Callee	memcpy
>1421	Identifier	memcpy
>1422	ExpressionStatement	 
>1423	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , tmp , n2 , t2 )
>1424	ArgumentList	3
>1425	Argument	t2
>1426	Identifier	t2
>1427	Argument	n2
>1428	Identifier	n2
>1429	Argument	tmp
>1430	Identifier	tmp
>1431	Argument	1
>1432	PrimaryExpression	1
>1433	Argument	3
>1434	PrimaryExpression	3
>1435	Argument	3
>1436	PrimaryExpression	3
>1437	Argument	3
>1438	PrimaryExpression	3
>1439	Callee	matrix_product
>1440	Identifier	matrix_product
>1441	ExpressionStatement	 
>1442	CallExpression	matrix_diff ( 3 , 3 , 3 , 3 , Hnorm , R2 , tmp )
>1443	ArgumentList	3
>1444	Argument	tmp
>1445	Identifier	tmp
>1446	Argument	R2
>1447	Identifier	R2
>1448	Argument	Hnorm
>1449	Identifier	Hnorm
>1450	Argument	3
>1451	PrimaryExpression	3
>1452	Argument	3
>1453	PrimaryExpression	3
>1454	Argument	3
>1455	PrimaryExpression	3
>1456	Argument	3
>1457	PrimaryExpression	3
>1458	Callee	matrix_diff
>1459	Identifier	matrix_diff
>1460	ExpressionStatement	 
>1461	CallExpression	memcpy ( n2 , v2u2 , sizeof ( double ) * 3 )
>1462	ArgumentList	n2
>1463	Argument	sizeof ( double ) * 3
>1464	MultiplicativeExpression	sizeof ( double ) * 3
>1465	PrimaryExpression	3
>1466	SizeofExpr	sizeof ( double )
>1467	SizeofOperand	double
>1468	Sizeof	sizeof
>1469	Argument	v2u2
>1470	Identifier	v2u2
>1471	Argument	n2
>1472	Identifier	n2
>1473	Callee	memcpy
>1474	Identifier	memcpy
>1475	ExpressionStatement	 
>1476	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , W2 , U2 , R2 )
>1477	ArgumentList	3
>1478	Argument	R2
>1479	Identifier	R2
>1480	Argument	U2
>1481	Identifier	U2
>1482	Argument	W2
>1483	Identifier	W2
>1484	Argument	3
>1485	PrimaryExpression	3
>1486	Argument	3
>1487	PrimaryExpression	3
>1488	Argument	3
>1489	PrimaryExpression	3
>1490	Argument	3
>1491	PrimaryExpression	3
>1492	Callee	matrix_transpose_product2
>1493	Identifier	matrix_transpose_product2
>1494	ExpressionStatement	 
>1495	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , tmp , n1 , t1 )
>1496	ArgumentList	3
>1497	Argument	t1
>1498	Identifier	t1
>1499	Argument	n1
>1500	Identifier	n1
>1501	Argument	tmp
>1502	Identifier	tmp
>1503	Argument	1
>1504	PrimaryExpression	1
>1505	Argument	3
>1506	PrimaryExpression	3
>1507	Argument	3
>1508	PrimaryExpression	3
>1509	Argument	3
>1510	PrimaryExpression	3
>1511	Callee	matrix_product
>1512	Identifier	matrix_product
>1513	ExpressionStatement	 
>1514	CallExpression	matrix_diff ( 3 , 3 , 3 , 3 , Hnorm , R1 , tmp )
>1515	ArgumentList	3
>1516	Argument	tmp
>1517	Identifier	tmp
>1518	Argument	R1
>1519	Identifier	R1
>1520	Argument	Hnorm
>1521	Identifier	Hnorm
>1522	Argument	3
>1523	PrimaryExpression	3
>1524	Argument	3
>1525	PrimaryExpression	3
>1526	Argument	3
>1527	PrimaryExpression	3
>1528	Argument	3
>1529	PrimaryExpression	3
>1530	Callee	matrix_diff
>1531	Identifier	matrix_diff
>1532	ExpressionStatement	 
>1533	CallExpression	memcpy ( n1 , v2u1 , sizeof ( double ) * 3 )
>1534	ArgumentList	n1
>1535	Argument	sizeof ( double ) * 3
>1536	MultiplicativeExpression	sizeof ( double ) * 3
>1537	PrimaryExpression	3
>1538	SizeofExpr	sizeof ( double )
>1539	SizeofOperand	double
>1540	Sizeof	sizeof
>1541	Argument	v2u1
>1542	Identifier	v2u1
>1543	Argument	n1
>1544	Identifier	n1
>1545	Callee	memcpy
>1546	Identifier	memcpy
>1547	ExpressionStatement	 
>1548	CallExpression	matrix_transpose_product2 ( 3 , 3 , 3 , 3 , W1 , U1 , R1 )
>1549	ArgumentList	3
>1550	Argument	R1
>1551	Identifier	R1
>1552	Argument	U1
>1553	Identifier	U1
>1554	Argument	W1
>1555	Identifier	W1
>1556	Argument	3
>1557	PrimaryExpression	3
>1558	Argument	3
>1559	PrimaryExpression	3
>1560	Argument	3
>1561	PrimaryExpression	3
>1562	Argument	3
>1563	PrimaryExpression	3
>1564	Callee	matrix_transpose_product2
>1565	Identifier	matrix_transpose_product2
>1566	IdentifierDeclStatement	 
>1567	IdentifierDecl	t4 [ 3 ]
>1568	PrimaryExpression	3
>1569	Identifier	t4
>1570	IdentifierDeclType	double [ 3 ]
>1571	IdentifierDecl	t3 [ 3 ]
>1572	PrimaryExpression	3
>1573	Identifier	t3
>1574	IdentifierDeclType	double [ 3 ]
>1575	IdentifierDecl	t2 [ 3 ]
>1576	PrimaryExpression	3
>1577	Identifier	t2
>1578	IdentifierDeclType	double [ 3 ]
>1579	IdentifierDecl	t1 [ 3 ]
>1580	PrimaryExpression	3
>1581	Identifier	t1
>1582	IdentifierDeclType	double [ 3 ]
>1583	IdentifierDeclStatement	 
>1584	IdentifierDecl	n4 [ 3 ]
>1585	PrimaryExpression	3
>1586	Identifier	n4
>1587	IdentifierDeclType	double [ 3 ]
>1588	IdentifierDecl	n3 [ 3 ]
>1589	PrimaryExpression	3
>1590	Identifier	n3
>1591	IdentifierDeclType	double [ 3 ]
>1592	IdentifierDecl	n2 [ 3 ]
>1593	PrimaryExpression	3
>1594	Identifier	n2
>1595	IdentifierDeclType	double [ 3 ]
>1596	IdentifierDecl	n1 [ 3 ]
>1597	PrimaryExpression	3
>1598	Identifier	n1
>1599	IdentifierDeclType	double [ 3 ]
>1600	IdentifierDeclStatement	 
>1601	IdentifierDecl	R4 [ 9 ]
>1602	PrimaryExpression	9
>1603	Identifier	R4
>1604	IdentifierDeclType	double [ 9 ]
>1605	IdentifierDecl	R3 [ 9 ]
>1606	PrimaryExpression	9
>1607	Identifier	R3
>1608	IdentifierDeclType	double [ 9 ]
>1609	IdentifierDecl	R2 [ 9 ]
>1610	PrimaryExpression	9
>1611	Identifier	R2
>1612	IdentifierDeclType	double [ 9 ]
>1613	IdentifierDecl	R1 [ 9 ]
>1614	PrimaryExpression	9
>1615	Identifier	R1
>1616	IdentifierDeclType	double [ 9 ]
>1617	ExpressionStatement	 
>1618	CallExpression	matrix_transpose ( 3 , 3 , W2T , W2 )
>1619	ArgumentList	3
>1620	Argument	W2
>1621	Identifier	W2
>1622	Argument	W2T
>1623	Identifier	W2T
>1624	Argument	3
>1625	PrimaryExpression	3
>1626	Argument	3
>1627	PrimaryExpression	3
>1628	Callee	matrix_transpose
>1629	Identifier	matrix_transpose
>1630	ExpressionStatement	 
>1631	CallExpression	matrix_transpose ( 3 , 3 , W1T , W1 )
>1632	ArgumentList	3
>1633	Argument	W1
>1634	Identifier	W1
>1635	Argument	W1T
>1636	Identifier	W1T
>1637	Argument	3
>1638	PrimaryExpression	3
>1639	Argument	3
>1640	PrimaryExpression	3
>1641	Callee	matrix_transpose
>1642	Identifier	matrix_transpose
>1643	ExpressionStatement	 
>1644	CallExpression	matrix_transpose ( 3 , 3 , U2T , U2 )
>1645	ArgumentList	3
>1646	Argument	U2
>1647	Identifier	U2
>1648	Argument	U2T
>1649	Identifier	U2T
>1650	Argument	3
>1651	PrimaryExpression	3
>1652	Argument	3
>1653	PrimaryExpression	3
>1654	Callee	matrix_transpose
>1655	Identifier	matrix_transpose
>1656	ExpressionStatement	 
>1657	CallExpression	matrix_transpose ( 3 , 3 , U1T , U1 )
>1658	ArgumentList	3
>1659	Argument	U1
>1660	Identifier	U1
>1661	Argument	U1T
>1662	Identifier	U1T
>1663	Argument	3
>1664	PrimaryExpression	3
>1665	Argument	3
>1666	PrimaryExpression	3
>1667	Callee	matrix_transpose
>1668	Identifier	matrix_transpose
>1669	IdentifierDeclStatement	 
>1670	IdentifierDecl	W2 [ 9 ]
>1671	PrimaryExpression	9
>1672	Identifier	W2
>1673	IdentifierDeclType	double [ 9 ]
>1674	IdentifierDecl	W1 [ 9 ]
>1675	PrimaryExpression	9
>1676	Identifier	W1
>1677	IdentifierDeclType	double [ 9 ]
>1678	IdentifierDecl	U2 [ 9 ]
>1679	PrimaryExpression	9
>1680	Identifier	U2
>1681	IdentifierDeclType	double [ 9 ]
>1682	IdentifierDecl	U1 [ 9 ]
>1683	PrimaryExpression	9
>1684	Identifier	U1
>1685	IdentifierDeclType	double [ 9 ]
>1686	ExpressionStatement	 
>1687	CallExpression	memcpy ( W2T + 6 , Hv2Hu2 , 3 * sizeof ( double ) )
>1688	ArgumentList	W2T + 6
>1689	Argument	3 * sizeof ( double )
>1690	MultiplicativeExpression	3 * sizeof ( double )
>1691	SizeofExpr	sizeof ( double )
>1692	SizeofOperand	double
>1693	Sizeof	sizeof
>1694	PrimaryExpression	3
>1695	Argument	Hv2Hu2
>1696	Identifier	Hv2Hu2
>1697	Argument	W2T + 6
>1698	AdditiveExpression	W2T + 6
>1699	PrimaryExpression	6
>1700	Identifier	W2T
>1701	Callee	memcpy
>1702	Identifier	memcpy
>1703	ExpressionStatement	 
>1704	CallExpression	memcpy ( W2T + 3 , Hu2 , 3 * sizeof ( double ) )
>1705	ArgumentList	W2T + 3
>1706	Argument	3 * sizeof ( double )
>1707	MultiplicativeExpression	3 * sizeof ( double )
>1708	SizeofExpr	sizeof ( double )
>1709	SizeofOperand	double
>1710	Sizeof	sizeof
>1711	PrimaryExpression	3
>1712	Argument	Hu2
>1713	Identifier	Hu2
>1714	Argument	W2T + 3
>1715	AdditiveExpression	W2T + 3
>1716	PrimaryExpression	3
>1717	Identifier	W2T
>1718	Callee	memcpy
>1719	Identifier	memcpy
>1720	ExpressionStatement	 
>1721	CallExpression	memcpy ( W2T + 0 , Hv2 , 3 * sizeof ( double ) )
>1722	ArgumentList	W2T + 0
>1723	Argument	3 * sizeof ( double )
>1724	MultiplicativeExpression	3 * sizeof ( double )
>1725	SizeofExpr	sizeof ( double )
>1726	SizeofOperand	double
>1727	Sizeof	sizeof
>1728	PrimaryExpression	3
>1729	Argument	Hv2
>1730	Identifier	Hv2
>1731	Argument	W2T + 0
>1732	AdditiveExpression	W2T + 0
>1733	PrimaryExpression	0
>1734	Identifier	W2T
>1735	Callee	memcpy
>1736	Identifier	memcpy
>1737	ExpressionStatement	 
>1738	CallExpression	memcpy ( W1T + 6 , Hv2Hu1 , 3 * sizeof ( double ) )
>1739	ArgumentList	W1T + 6
>1740	Argument	3 * sizeof ( double )
>1741	MultiplicativeExpression	3 * sizeof ( double )
>1742	SizeofExpr	sizeof ( double )
>1743	SizeofOperand	double
>1744	Sizeof	sizeof
>1745	PrimaryExpression	3
>1746	Argument	Hv2Hu1
>1747	Identifier	Hv2Hu1
>1748	Argument	W1T + 6
>1749	AdditiveExpression	W1T + 6
>1750	PrimaryExpression	6
>1751	Identifier	W1T
>1752	Callee	memcpy
>1753	Identifier	memcpy
>1754	ExpressionStatement	 
>1755	CallExpression	memcpy ( W1T + 3 , Hu1 , 3 * sizeof ( double ) )
>1756	ArgumentList	W1T + 3
>1757	Argument	3 * sizeof ( double )
>1758	MultiplicativeExpression	3 * sizeof ( double )
>1759	SizeofExpr	sizeof ( double )
>1760	SizeofOperand	double
>1761	Sizeof	sizeof
>1762	PrimaryExpression	3
>1763	Argument	Hu1
>1764	Identifier	Hu1
>1765	Argument	W1T + 3
>1766	AdditiveExpression	W1T + 3
>1767	PrimaryExpression	3
>1768	Identifier	W1T
>1769	Callee	memcpy
>1770	Identifier	memcpy
>1771	ExpressionStatement	 
>1772	CallExpression	memcpy ( W1T + 0 , Hv2 , 3 * sizeof ( double ) )
>1773	ArgumentList	W1T + 0
>1774	Argument	3 * sizeof ( double )
>1775	MultiplicativeExpression	3 * sizeof ( double )
>1776	SizeofExpr	sizeof ( double )
>1777	SizeofOperand	double
>1778	Sizeof	sizeof
>1779	PrimaryExpression	3
>1780	Argument	Hv2
>1781	Identifier	Hv2
>1782	Argument	W1T + 0
>1783	AdditiveExpression	W1T + 0
>1784	PrimaryExpression	0
>1785	Identifier	W1T
>1786	Callee	memcpy
>1787	Identifier	memcpy
>1788	ExpressionStatement	 
>1789	CallExpression	memcpy ( U2T + 6 , v2u2 , 3 * sizeof ( double ) )
>1790	ArgumentList	U2T + 6
>1791	Argument	3 * sizeof ( double )
>1792	MultiplicativeExpression	3 * sizeof ( double )
>1793	SizeofExpr	sizeof ( double )
>1794	SizeofOperand	double
>1795	Sizeof	sizeof
>1796	PrimaryExpression	3
>1797	Argument	v2u2
>1798	Identifier	v2u2
>1799	Argument	U2T + 6
>1800	AdditiveExpression	U2T + 6
>1801	PrimaryExpression	6
>1802	Identifier	U2T
>1803	Callee	memcpy
>1804	Identifier	memcpy
>1805	ExpressionStatement	 
>1806	CallExpression	memcpy ( U2T + 3 , u2 , 3 * sizeof ( double ) )
>1807	ArgumentList	U2T + 3
>1808	Argument	3 * sizeof ( double )
>1809	MultiplicativeExpression	3 * sizeof ( double )
>1810	SizeofExpr	sizeof ( double )
>1811	SizeofOperand	double
>1812	Sizeof	sizeof
>1813	PrimaryExpression	3
>1814	Argument	u2
>1815	Identifier	u2
>1816	Argument	U2T + 3
>1817	AdditiveExpression	U2T + 3
>1818	PrimaryExpression	3
>1819	Identifier	U2T
>1820	Callee	memcpy
>1821	Identifier	memcpy
>1822	ExpressionStatement	 
>1823	CallExpression	memcpy ( U2T + 0 , v2 , 3 * sizeof ( double ) )
>1824	ArgumentList	U2T + 0
>1825	Argument	3 * sizeof ( double )
>1826	MultiplicativeExpression	3 * sizeof ( double )
>1827	SizeofExpr	sizeof ( double )
>1828	SizeofOperand	double
>1829	Sizeof	sizeof
>1830	PrimaryExpression	3
>1831	Argument	v2
>1832	Identifier	v2
>1833	Argument	U2T + 0
>1834	AdditiveExpression	U2T + 0
>1835	PrimaryExpression	0
>1836	Identifier	U2T
>1837	Callee	memcpy
>1838	Identifier	memcpy
>1839	ExpressionStatement	 
>1840	CallExpression	memcpy ( U1T + 6 , v2u1 , 3 * sizeof ( double ) )
>1841	ArgumentList	U1T + 6
>1842	Argument	3 * sizeof ( double )
>1843	MultiplicativeExpression	3 * sizeof ( double )
>1844	SizeofExpr	sizeof ( double )
>1845	SizeofOperand	double
>1846	Sizeof	sizeof
>1847	PrimaryExpression	3
>1848	Argument	v2u1
>1849	Identifier	v2u1
>1850	Argument	U1T + 6
>1851	AdditiveExpression	U1T + 6
>1852	PrimaryExpression	6
>1853	Identifier	U1T
>1854	Callee	memcpy
>1855	Identifier	memcpy
>1856	ExpressionStatement	 
>1857	CallExpression	memcpy ( U1T + 3 , u1 , 3 * sizeof ( double ) )
>1858	ArgumentList	U1T + 3
>1859	Argument	3 * sizeof ( double )
>1860	MultiplicativeExpression	3 * sizeof ( double )
>1861	SizeofExpr	sizeof ( double )
>1862	SizeofOperand	double
>1863	Sizeof	sizeof
>1864	PrimaryExpression	3
>1865	Argument	u1
>1866	Identifier	u1
>1867	Argument	U1T + 3
>1868	AdditiveExpression	U1T + 3
>1869	PrimaryExpression	3
>1870	Identifier	U1T
>1871	Callee	memcpy
>1872	Identifier	memcpy
>1873	ExpressionStatement	 
>1874	CallExpression	memcpy ( U1T + 0 , v2 , 3 * sizeof ( double ) )
>1875	ArgumentList	U1T + 0
>1876	Argument	3 * sizeof ( double )
>1877	MultiplicativeExpression	3 * sizeof ( double )
>1878	SizeofExpr	sizeof ( double )
>1879	SizeofOperand	double
>1880	Sizeof	sizeof
>1881	PrimaryExpression	3
>1882	Argument	v2
>1883	Identifier	v2
>1884	Argument	U1T + 0
>1885	AdditiveExpression	U1T + 0
>1886	PrimaryExpression	0
>1887	Identifier	U1T
>1888	Callee	memcpy
>1889	Identifier	memcpy
>1890	ExpressionStatement	 
>1891	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Hv2_cross , Hu2 , Hv2Hu2 )
>1892	ArgumentList	3
>1893	Argument	Hv2Hu2
>1894	Identifier	Hv2Hu2
>1895	Argument	Hu2
>1896	Identifier	Hu2
>1897	Argument	Hv2_cross
>1898	Identifier	Hv2_cross
>1899	Argument	1
>1900	PrimaryExpression	1
>1901	Argument	3
>1902	PrimaryExpression	3
>1903	Argument	3
>1904	PrimaryExpression	3
>1905	Argument	3
>1906	PrimaryExpression	3
>1907	Callee	matrix_product
>1908	Identifier	matrix_product
>1909	ExpressionStatement	 
>1910	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Hv2_cross , Hu1 , Hv2Hu1 )
>1911	ArgumentList	3
>1912	Argument	Hv2Hu1
>1913	Identifier	Hv2Hu1
>1914	Argument	Hu1
>1915	Identifier	Hu1
>1916	Argument	Hv2_cross
>1917	Identifier	Hv2_cross
>1918	Argument	1
>1919	PrimaryExpression	1
>1920	Argument	3
>1921	PrimaryExpression	3
>1922	Argument	3
>1923	PrimaryExpression	3
>1924	Argument	3
>1925	PrimaryExpression	3
>1926	Callee	matrix_product
>1927	Identifier	matrix_product
>1928	ExpressionStatement	 
>1929	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , v2_cross , u2 , v2u2 )
>1930	ArgumentList	3
>1931	Argument	v2u2
>1932	Identifier	v2u2
>1933	Argument	u2
>1934	Identifier	u2
>1935	Argument	v2_cross
>1936	Identifier	v2_cross
>1937	Argument	1
>1938	PrimaryExpression	1
>1939	Argument	3
>1940	PrimaryExpression	3
>1941	Argument	3
>1942	PrimaryExpression	3
>1943	Argument	3
>1944	PrimaryExpression	3
>1945	Callee	matrix_product
>1946	Identifier	matrix_product
>1947	ExpressionStatement	 
>1948	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , v2_cross , u1 , v2u1 )
>1949	ArgumentList	3
>1950	Argument	v2u1
>1951	Identifier	v2u1
>1952	Argument	u1
>1953	Identifier	u1
>1954	Argument	v2_cross
>1955	Identifier	v2_cross
>1956	Argument	1
>1957	PrimaryExpression	1
>1958	Argument	3
>1959	PrimaryExpression	3
>1960	Argument	3
>1961	PrimaryExpression	3
>1962	Argument	3
>1963	PrimaryExpression	3
>1964	Callee	matrix_product
>1965	Identifier	matrix_product
>1966	IdentifierDeclStatement	 
>1967	IdentifierDecl	Hv2Hu2 [ 3 ]
>1968	PrimaryExpression	3
>1969	Identifier	Hv2Hu2
>1970	IdentifierDeclType	double [ 3 ]
>1971	IdentifierDecl	Hv2Hu1 [ 3 ]
>1972	PrimaryExpression	3
>1973	Identifier	Hv2Hu1
>1974	IdentifierDeclType	double [ 3 ]
>1975	IdentifierDecl	v2u2 [ 3 ]
>1976	PrimaryExpression	3
>1977	Identifier	v2u2
>1978	IdentifierDeclType	double [ 3 ]
>1979	IdentifierDecl	v2u1 [ 3 ]
>1980	PrimaryExpression	3
>1981	Identifier	v2u1
>1982	IdentifierDeclType	double [ 3 ]
>1983	IdentifierDeclStatement	 
>1984	IdentifierDecl	W2T [ 9 ]
>1985	PrimaryExpression	9
>1986	Identifier	W2T
>1987	IdentifierDeclType	double [ 9 ]
>1988	IdentifierDecl	W1T [ 9 ]
>1989	PrimaryExpression	9
>1990	Identifier	W1T
>1991	IdentifierDeclType	double [ 9 ]
>1992	IdentifierDeclStatement	 
>1993	IdentifierDecl	U2T [ 9 ]
>1994	PrimaryExpression	9
>1995	Identifier	U2T
>1996	IdentifierDeclType	double [ 9 ]
>1997	IdentifierDecl	U1T [ 9 ]
>1998	PrimaryExpression	9
>1999	Identifier	U1T
>2000	IdentifierDeclType	double [ 9 ]
>2001	ExpressionStatement	 
>2002	CallExpression	matrix_cross_matrix ( Hv2 , Hv2_cross )
>2003	ArgumentList	Hv2
>2004	Argument	Hv2_cross
>2005	Identifier	Hv2_cross
>2006	Argument	Hv2
>2007	Identifier	Hv2
>2008	Callee	matrix_cross_matrix
>2009	Identifier	matrix_cross_matrix
>2010	ExpressionStatement	 
>2011	CallExpression	matrix_cross_matrix ( v2 , v2_cross )
>2012	ArgumentList	v2
>2013	Argument	v2_cross
>2014	Identifier	v2_cross
>2015	Argument	v2
>2016	Identifier	v2
>2017	Callee	matrix_cross_matrix
>2018	Identifier	matrix_cross_matrix
>2019	ExpressionStatement	 
>2020	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Hnorm , v2 , Hv2 )
>2021	ArgumentList	3
>2022	Argument	Hv2
>2023	Identifier	Hv2
>2024	Argument	v2
>2025	Identifier	v2
>2026	Argument	Hnorm
>2027	Identifier	Hnorm
>2028	Argument	1
>2029	PrimaryExpression	1
>2030	Argument	3
>2031	PrimaryExpression	3
>2032	Argument	3
>2033	PrimaryExpression	3
>2034	Argument	3
>2035	PrimaryExpression	3
>2036	Callee	matrix_product
>2037	Identifier	matrix_product
>2038	ExpressionStatement	 
>2039	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Hnorm , u2 , Hu2 )
>2040	ArgumentList	3
>2041	Argument	Hu2
>2042	Identifier	Hu2
>2043	Argument	u2
>2044	Identifier	u2
>2045	Argument	Hnorm
>2046	Identifier	Hnorm
>2047	Argument	1
>2048	PrimaryExpression	1
>2049	Argument	3
>2050	PrimaryExpression	3
>2051	Argument	3
>2052	PrimaryExpression	3
>2053	Argument	3
>2054	PrimaryExpression	3
>2055	Callee	matrix_product
>2056	Identifier	matrix_product
>2057	ExpressionStatement	 
>2058	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , Hnorm , u1 , Hu1 )
>2059	ArgumentList	3
>2060	Argument	Hu1
>2061	Identifier	Hu1
>2062	Argument	u1
>2063	Identifier	u1
>2064	Argument	Hnorm
>2065	Identifier	Hnorm
>2066	Argument	1
>2067	PrimaryExpression	1
>2068	Argument	3
>2069	PrimaryExpression	3
>2070	Argument	3
>2071	PrimaryExpression	3
>2072	Argument	3
>2073	PrimaryExpression	3
>2074	Callee	matrix_product
>2075	Identifier	matrix_product
>2076	IdentifierDeclStatement	 
>2077	IdentifierDecl	Hv2_cross [ 9 ]
>2078	PrimaryExpression	9
>2079	Identifier	Hv2_cross
>2080	IdentifierDeclType	double [ 9 ]
>2081	IdentifierDecl	v2_cross [ 9 ]
>2082	PrimaryExpression	9
>2083	Identifier	v2_cross
>2084	IdentifierDeclType	double [ 9 ]
>2085	IdentifierDeclStatement	 
>2086	IdentifierDecl	Hv2 [ 3 ]
>2087	PrimaryExpression	3
>2088	Identifier	Hv2
>2089	IdentifierDeclType	double [ 3 ]
>2090	IdentifierDecl	Hu2 [ 3 ]
>2091	PrimaryExpression	3
>2092	Identifier	Hu2
>2093	IdentifierDeclType	double [ 3 ]
>2094	IdentifierDecl	Hu1 [ 3 ]
>2095	PrimaryExpression	3
>2096	Identifier	Hu1
>2097	IdentifierDeclType	double [ 3 ]
>2098	ExpressionStatement	 
>2099	CallExpression	matrix_scale ( 3 , 1 , u2 , 1.0 / scale13 , u2 )
>2100	ArgumentList	3
>2101	Argument	u2
>2102	Identifier	u2
>2103	Argument	1.0 / scale13
>2104	MultiplicativeExpression	1.0 / scale13
>2105	Identifier	scale13
>2106	PrimaryExpression	1.0
>2107	Argument	u2
>2108	Identifier	u2
>2109	Argument	1
>2110	PrimaryExpression	1
>2111	Argument	3
>2112	PrimaryExpression	3
>2113	Callee	matrix_scale
>2114	Identifier	matrix_scale
>2115	ExpressionStatement	 
>2116	CallExpression	matrix_scale ( 3 , 1 , u1 , 1.0 / scale13 , u1 )
>2117	ArgumentList	3
>2118	Argument	u1
>2119	Identifier	u1
>2120	Argument	1.0 / scale13
>2121	MultiplicativeExpression	1.0 / scale13
>2122	Identifier	scale13
>2123	PrimaryExpression	1.0
>2124	Argument	u1
>2125	Identifier	u1
>2126	Argument	1
>2127	PrimaryExpression	1
>2128	Argument	3
>2129	PrimaryExpression	3
>2130	Callee	matrix_scale
>2131	Identifier	matrix_scale
>2132	ExpressionStatement	 
>2133	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , v1s , v3s , u2 )
>2134	ArgumentList	3
>2135	Argument	u2
>2136	Identifier	u2
>2137	Argument	v3s
>2138	Identifier	v3s
>2139	Argument	v1s
>2140	Identifier	v1s
>2141	Argument	1
>2142	PrimaryExpression	1
>2143	Argument	3
>2144	PrimaryExpression	3
>2145	Argument	1
>2146	PrimaryExpression	1
>2147	Argument	3
>2148	PrimaryExpression	3
>2149	Callee	matrix_diff
>2150	Identifier	matrix_diff
>2151	ExpressionStatement	 
>2152	CallExpression	matrix_sum ( 3 , 1 , 3 , 1 , v1s , v3s , u1 )
>2153	ArgumentList	3
>2154	Argument	u1
>2155	Identifier	u1
>2156	Argument	v3s
>2157	Identifier	v3s
>2158	Argument	v1s
>2159	Identifier	v1s
>2160	Argument	1
>2161	PrimaryExpression	1
>2162	Argument	3
>2163	PrimaryExpression	3
>2164	Argument	1
>2165	PrimaryExpression	1
>2166	Argument	3
>2167	PrimaryExpression	3
>2168	Callee	matrix_sum
>2169	Identifier	matrix_sum
>2170	IdentifierDeclStatement	 
>2171	IdentifierDecl	u2 [ 3 ]
>2172	PrimaryExpression	3
>2173	Identifier	u2
>2174	IdentifierDeclType	double [ 3 ]
>2175	IdentifierDecl	u1 [ 3 ]
>2176	PrimaryExpression	3
>2177	Identifier	u1
>2178	IdentifierDeclType	double [ 3 ]
>2179	ExpressionStatement	 
>2180	CallExpression	matrix_scale ( 3 , 1 , v3 , scale1 , v3s )
>2181	ArgumentList	3
>2182	Argument	v3s
>2183	Identifier	v3s
>2184	Argument	scale1
>2185	Identifier	scale1
>2186	Argument	v3
>2187	Identifier	v3
>2188	Argument	1
>2189	PrimaryExpression	1
>2190	Argument	3
>2191	PrimaryExpression	3
>2192	Callee	matrix_scale
>2193	Identifier	matrix_scale
>2194	ExpressionStatement	 
>2195	CallExpression	matrix_scale ( 3 , 1 , v1 , scale3 , v1s )
>2196	ArgumentList	3
>2197	Argument	v1s
>2198	Identifier	v1s
>2199	Argument	scale3
>2200	Identifier	scale3
>2201	Argument	v1
>2202	Identifier	v1
>2203	Argument	1
>2204	PrimaryExpression	1
>2205	Argument	3
>2206	PrimaryExpression	3
>2207	Callee	matrix_scale
>2208	Identifier	matrix_scale
>2209	IdentifierDeclStatement	 
>2210	IdentifierDecl	v3s [ 3 ]
>2211	PrimaryExpression	3
>2212	Identifier	v3s
>2213	IdentifierDeclType	double [ 3 ]
>2214	IdentifierDecl	v1s [ 3 ]
>2215	PrimaryExpression	3
>2216	Identifier	v1s
>2217	IdentifierDeclType	double [ 3 ]
>2218	IdentifierDeclStatement	 
>2219	IdentifierDecl	scale13 = sqrt ( S [ 0 ] - S [ 2 ] )
>2220	AssignmentExpr	scale13 = sqrt ( S [ 0 ] - S [ 2 ] )
>2221	CallExpression	sqrt ( S [ 0 ] - S [ 2 ] )
>2222	ArgumentList	S [ 0 ] - S [ 2 ]
>2223	Argument	S [ 0 ] - S [ 2 ]
>2224	AdditiveExpression	S [ 0 ] - S [ 2 ]
>2225	ArrayIndexing	S [ 2 ]
>2226	PrimaryExpression	2
>2227	Identifier	S
>2228	ArrayIndexing	S [ 0 ]
>2229	PrimaryExpression	0
>2230	Identifier	S
>2231	Callee	sqrt
>2232	Identifier	sqrt
>2233	Identifier	scale13
>2234	Identifier	scale13
>2235	IdentifierDeclType	double
>2236	IdentifierDeclStatement	 
>2237	IdentifierDecl	scale3 = sqrt ( 1.0 - S [ 2 ] )
>2238	AssignmentExpr	scale3 = sqrt ( 1.0 - S [ 2 ] )
>2239	CallExpression	sqrt ( 1.0 - S [ 2 ] )
>2240	ArgumentList	1.0 - S [ 2 ]
>2241	Argument	1.0 - S [ 2 ]
>2242	AdditiveExpression	1.0 - S [ 2 ]
>2243	ArrayIndexing	S [ 2 ]
>2244	PrimaryExpression	2
>2245	Identifier	S
>2246	PrimaryExpression	1.0
>2247	Callee	sqrt
>2248	Identifier	sqrt
>2249	Identifier	scale3
>2250	Identifier	scale3
>2251	IdentifierDeclType	double
>2252	IdentifierDeclStatement	 
>2253	IdentifierDecl	scale1 = sqrt ( S [ 0 ] - 1.0 )
>2254	AssignmentExpr	scale1 = sqrt ( S [ 0 ] - 1.0 )
>2255	CallExpression	sqrt ( S [ 0 ] - 1.0 )
>2256	ArgumentList	S [ 0 ] - 1.0
>2257	Argument	S [ 0 ] - 1.0
>2258	AdditiveExpression	S [ 0 ] - 1.0
>2259	PrimaryExpression	1.0
>2260	ArrayIndexing	S [ 0 ]
>2261	PrimaryExpression	0
>2262	Identifier	S
>2263	Callee	sqrt
>2264	Identifier	sqrt
>2265	Identifier	scale1
>2266	Identifier	scale1
>2267	IdentifierDeclType	double
>2268	IdentifierDeclStatement	 
>2269	IdentifierDecl	* v3 = VT + 6
>2270	AssignmentExpr	* v3 = VT + 6
>2271	AdditiveExpression	VT + 6
>2272	PrimaryExpression	6
>2273	Identifier	VT
>2274	Identifier	v3
>2275	Identifier	v3
>2276	IdentifierDeclType	double *
>2277	IdentifierDecl	* v2 = VT + 3
>2278	AssignmentExpr	* v2 = VT + 3
>2279	AdditiveExpression	VT + 3
>2280	PrimaryExpression	3
>2281	Identifier	VT
>2282	Identifier	v2
>2283	Identifier	v2
>2284	IdentifierDeclType	double *
>2285	IdentifierDecl	* v1 = VT + 0
>2286	AssignmentExpr	* v1 = VT + 0
>2287	AdditiveExpression	VT + 0
>2288	PrimaryExpression	0
>2289	Identifier	VT
>2290	Identifier	v1
>2291	Identifier	v1
>2292	IdentifierDeclType	double *
>2293	ExpressionStatement	 
>2294	AssignmentExpr	S [ 1 ] = 1.0
>2295	PrimaryExpression	1.0
>2296	ArrayIndexing	S [ 1 ]
>2297	PrimaryExpression	1
>2298	Identifier	S
>2299	ExpressionStatement	 
>2300	CallExpression	dgesvd_driver ( 3 , 3 , HTH , U , S , VT )
>2301	ArgumentList	3
>2302	Argument	VT
>2303	Identifier	VT
>2304	Argument	S
>2305	Identifier	S
>2306	Argument	U
>2307	Identifier	U
>2308	Argument	HTH
>2309	Identifier	HTH
>2310	Argument	3
>2311	PrimaryExpression	3
>2312	Argument	3
>2313	PrimaryExpression	3
>2314	Callee	dgesvd_driver
>2315	Identifier	dgesvd_driver
>2316	IdentifierDeclStatement	 
>2317	IdentifierDecl	VT [ 9 ]
>2318	PrimaryExpression	9
>2319	Identifier	VT
>2320	IdentifierDeclType	double [ 9 ]
>2321	IdentifierDecl	S [ 3 ]
>2322	PrimaryExpression	3
>2323	Identifier	S
>2324	IdentifierDeclType	double [ 3 ]
>2325	IdentifierDecl	U [ 9 ]
>2326	PrimaryExpression	9
>2327	Identifier	U
>2328	IdentifierDeclType	double [ 9 ]
>2329	ExpressionStatement	 
>2330	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 3 , Hnorm , Hnorm , HTH )
>2331	ArgumentList	3
>2332	Argument	HTH
>2333	Identifier	HTH
>2334	Argument	Hnorm
>2335	Identifier	Hnorm
>2336	Argument	Hnorm
>2337	Identifier	Hnorm
>2338	Argument	3
>2339	PrimaryExpression	3
>2340	Argument	3
>2341	PrimaryExpression	3
>2342	Argument	3
>2343	PrimaryExpression	3
>2344	Argument	3
>2345	PrimaryExpression	3
>2346	Callee	matrix_transpose_product
>2347	Identifier	matrix_transpose_product
>2348	IdentifierDeclStatement	 
>2349	IdentifierDecl	HTH [ 9 ]
>2350	PrimaryExpression	9
>2351	Identifier	HTH
>2352	IdentifierDeclType	double [ 9 ]
>2353	ExpressionStatement	 
>2354	CallExpression	matrix_scale ( 3 , 3 , Hnorm , 1.0 / S0 [ 1 ] , Hnorm )
>2355	ArgumentList	3
>2356	Argument	Hnorm
>2357	Identifier	Hnorm
>2358	Argument	1.0 / S0 [ 1 ]
>2359	MultiplicativeExpression	1.0 / S0 [ 1 ]
>2360	ArrayIndexing	S0 [ 1 ]
>2361	PrimaryExpression	1
>2362	Identifier	S0
>2363	PrimaryExpression	1.0
>2364	Argument	Hnorm
>2365	Identifier	Hnorm
>2366	Argument	3
>2367	PrimaryExpression	3
>2368	Argument	3
>2369	PrimaryExpression	3
>2370	Callee	matrix_scale
>2371	Identifier	matrix_scale
>2372	ExpressionStatement	 
>2373	CallExpression	dgesvd_driver ( 3 , 3 , Hnorm , U0 , S0 , VT0 )
>2374	ArgumentList	3
>2375	Argument	VT0
>2376	Identifier	VT0
>2377	Argument	S0
>2378	Identifier	S0
>2379	Argument	U0
>2380	Identifier	U0
>2381	Argument	Hnorm
>2382	Identifier	Hnorm
>2383	Argument	3
>2384	PrimaryExpression	3
>2385	Argument	3
>2386	PrimaryExpression	3
>2387	Callee	dgesvd_driver
>2388	Identifier	dgesvd_driver
>2389	IdentifierDeclStatement	 
>2390	IdentifierDecl	VT0 [ 9 ]
>2391	PrimaryExpression	9
>2392	Identifier	VT0
>2393	IdentifierDeclType	double [ 9 ]
>2394	IdentifierDecl	S0 [ 3 ]
>2395	PrimaryExpression	3
>2396	Identifier	S0
>2397	IdentifierDeclType	double [ 3 ]
>2398	IdentifierDecl	U0 [ 9 ]
>2399	PrimaryExpression	9
>2400	Identifier	U0
>2401	IdentifierDeclType	double [ 9 ]
>2402	ExpressionStatement	 
>2403	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , tmp , K1 , Hnorm )
>2404	ArgumentList	3
>2405	Argument	Hnorm
>2406	Identifier	Hnorm
>2407	Argument	K1
>2408	Identifier	K1
>2409	Argument	tmp
>2410	Identifier	tmp
>2411	Argument	3
>2412	PrimaryExpression	3
>2413	Argument	3
>2414	PrimaryExpression	3
>2415	Argument	3
>2416	PrimaryExpression	3
>2417	Argument	3
>2418	PrimaryExpression	3
>2419	Callee	matrix_product
>2420	Identifier	matrix_product
>2421	ExpressionStatement	 
>2422	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , K2_inv , H , tmp )
>2423	ArgumentList	3
>2424	Argument	tmp
>2425	Identifier	tmp
>2426	Argument	H
>2427	Identifier	H
>2428	Argument	K2_inv
>2429	Identifier	K2_inv
>2430	Argument	3
>2431	PrimaryExpression	3
>2432	Argument	3
>2433	PrimaryExpression	3
>2434	Argument	3
>2435	PrimaryExpression	3
>2436	Argument	3
>2437	PrimaryExpression	3
>2438	Callee	matrix_product
>2439	Identifier	matrix_product
>2440	IdentifierDeclStatement	 
>2441	IdentifierDecl	tmp [ 9 ]
>2442	PrimaryExpression	9
>2443	Identifier	tmp
>2444	IdentifierDeclType	double [ 9 ]
>2445	IdentifierDecl	Hnorm [ 9 ]
>2446	PrimaryExpression	9
>2447	Identifier	Hnorm
>2448	IdentifierDeclType	double [ 9 ]
>2449	IdentifierDeclStatement	 
>2450	IdentifierDecl	Yref [ 9 ] = { 1.0 , 0.0 , 0.0 , 0.0 , - 1.0 , 0.0 , 0.0 , 0.0 , 1.0 }
>2451	AssignmentExpr	Yref [ 9 ] = { 1.0 , 0.0 , 0.0 , 0.0 , - 1.0 , 0.0 , 0.0 , 0.0 , 1.0 }
>2452	InitializerList	1.0
>2453	PrimaryExpression	1.0
>2454	PrimaryExpression	0.0
>2455	PrimaryExpression	0.0
>2456	PrimaryExpression	0.0
>2457	UnaryOp	- 1.0
>2458	PrimaryExpression	1.0
>2459	UnaryOperator	-
>2460	PrimaryExpression	0.0
>2461	PrimaryExpression	0.0
>2462	PrimaryExpression	0.0
>2463	PrimaryExpression	1.0
>2464	Identifier	Yref
>2465	PrimaryExpression	9
>2466	Identifier	Yref
>2467	IdentifierDeclType	double [ 9 ]
>2468	IdentifierDeclStatement	 
>2469	IdentifierDecl	K1 [ 9 ] = { f1 , 0.0 , 0.0 , 0.0 , f1 , 0.0 , 0.0 , 0.0 , 1.0 }
>2470	AssignmentExpr	K1 [ 9 ] = { f1 , 0.0 , 0.0 , 0.0 , f1 , 0.0 , 0.0 , 0.0 , 1.0 }
>2471	InitializerList	f1
>2472	PrimaryExpression	1.0
>2473	PrimaryExpression	0.0
>2474	PrimaryExpression	0.0
>2475	PrimaryExpression	0.0
>2476	Identifier	f1
>2477	PrimaryExpression	0.0
>2478	PrimaryExpression	0.0
>2479	PrimaryExpression	0.0
>2480	Identifier	f1
>2481	Identifier	K1
>2482	PrimaryExpression	9
>2483	Identifier	K1
>2484	IdentifierDeclType	double [ 9 ]
>2485	IdentifierDeclStatement	 
>2486	IdentifierDecl	K2_inv [ 9 ] = { 1.0 / f2 , 0.0 , 0.0 , 0.0 , 1.0 / f2 , 0.0 , 0.0 , 0.0 , 1.0 }
>2487	AssignmentExpr	K2_inv [ 9 ] = { 1.0 / f2 , 0.0 , 0.0 , 0.0 , 1.0 / f2 , 0.0 , 0.0 , 0.0 , 1.0 }
>2488	InitializerList	1.0 / f2
>2489	PrimaryExpression	1.0
>2490	PrimaryExpression	0.0
>2491	PrimaryExpression	0.0
>2492	PrimaryExpression	0.0
>2493	MultiplicativeExpression	1.0 / f2
>2494	Identifier	f2
>2495	PrimaryExpression	1.0
>2496	PrimaryExpression	0.0
>2497	PrimaryExpression	0.0
>2498	PrimaryExpression	0.0
>2499	MultiplicativeExpression	1.0 / f2
>2500	Identifier	f2
>2501	PrimaryExpression	1.0
>2502	Identifier	K2_inv
>2503	PrimaryExpression	9
>2504	Identifier	K2_inv
>2505	IdentifierDeclType	double [ 9 ]
>2608	FunctionDef	ComputeFundamentalMatrix (double f1 , double f2 , double * R2 , double * t2 , double * F)
>2609	ParameterList	double f1 , double f2 , double * R2 , double * t2 , double * F
>2610	Parameter	 
>2611	Identifier	F
>2612	ParameterType	double *
>2613	Parameter	 
>2614	Identifier	t2
>2615	ParameterType	double *
>2616	Parameter	 
>2617	Identifier	R2
>2618	ParameterType	double *
>2619	Parameter	 
>2620	Identifier	f2
>2621	ParameterType	double
>2622	Parameter	 
>2623	Identifier	f1
>2624	ParameterType	double
>2625	ReturnType	bool
>2626	CompoundStatement	 
>2627	ReturnStatement	 
>2628	Identifier	true
>2629	ExpressionStatement	 
>2630	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , tmp , K1inv , F )
>2631	ArgumentList	3
>2632	Argument	F
>2633	Identifier	F
>2634	Argument	K1inv
>2635	Identifier	K1inv
>2636	Argument	tmp
>2637	Identifier	tmp
>2638	Argument	3
>2639	PrimaryExpression	3
>2640	Argument	3
>2641	PrimaryExpression	3
>2642	Argument	3
>2643	PrimaryExpression	3
>2644	Argument	3
>2645	PrimaryExpression	3
>2646	Callee	matrix_product
>2647	Identifier	matrix_product
>2648	ExpressionStatement	 
>2649	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 3 , K2inv , E , tmp )
>2650	ArgumentList	3
>2651	Argument	tmp
>2652	Identifier	tmp
>2653	Argument	E
>2654	Identifier	E
>2655	Argument	K2inv
>2656	Identifier	K2inv
>2657	Argument	3
>2658	PrimaryExpression	3
>2659	Argument	3
>2660	PrimaryExpression	3
>2661	Argument	3
>2662	PrimaryExpression	3
>2663	Argument	3
>2664	PrimaryExpression	3
>2665	Callee	matrix_transpose_product
>2666	Identifier	matrix_transpose_product
>2667	IdentifierDeclStatement	 
>2668	IdentifierDecl	tmp [ 9 ]
>2669	PrimaryExpression	9
>2670	Identifier	tmp
>2671	IdentifierDeclType	double [ 9 ]
>2672	ExpressionStatement	 
>2673	CallExpression	matrix_invert ( 3 , K2 , K2inv )
>2674	ArgumentList	3
>2675	Argument	K2inv
>2676	Identifier	K2inv
>2677	Argument	K2
>2678	Identifier	K2
>2679	Argument	3
>2680	PrimaryExpression	3
>2681	Callee	matrix_invert
>2682	Identifier	matrix_invert
>2683	ExpressionStatement	 
>2684	CallExpression	matrix_invert ( 3 , K1 , K1inv )
>2685	ArgumentList	3
>2686	Argument	K1inv
>2687	Identifier	K1inv
>2688	Argument	K1
>2689	Identifier	K1
>2690	Argument	3
>2691	PrimaryExpression	3
>2692	Callee	matrix_invert
>2693	Identifier	matrix_invert
>2694	IdentifierDeclStatement	 
>2695	IdentifierDecl	K2inv [ 9 ]
>2696	PrimaryExpression	9
>2697	Identifier	K2inv
>2698	IdentifierDeclType	double [ 9 ]
>2699	IdentifierDecl	K1inv [ 9 ]
>2700	PrimaryExpression	9
>2701	Identifier	K1inv
>2702	IdentifierDeclType	double [ 9 ]
>2703	IdentifierDeclStatement	 
>2704	IdentifierDecl	K2 [ 9 ] = { f2 , 0 , 0 , 0 , f2 , 0 , 0 , 0 , 1 }
>2705	AssignmentExpr	K2 [ 9 ] = { f2 , 0 , 0 , 0 , f2 , 0 , 0 , 0 , 1 }
>2706	InitializerList	f2
>2707	PrimaryExpression	1
>2708	PrimaryExpression	0
>2709	PrimaryExpression	0
>2710	PrimaryExpression	0
>2711	Identifier	f2
>2712	PrimaryExpression	0
>2713	PrimaryExpression	0
>2714	PrimaryExpression	0
>2715	Identifier	f2
>2716	Identifier	K2
>2717	PrimaryExpression	9
>2718	Identifier	K2
>2719	IdentifierDeclType	double [ 9 ]
>2720	IdentifierDeclStatement	 
>2721	IdentifierDecl	K1 [ 9 ] = { f1 , 0 , 0 , 0 , f1 , 0 , 0 , 0 , 1 }
>2722	AssignmentExpr	K1 [ 9 ] = { f1 , 0 , 0 , 0 , f1 , 0 , 0 , 0 , 1 }
>2723	InitializerList	f1
>2724	PrimaryExpression	1
>2725	PrimaryExpression	0
>2726	PrimaryExpression	0
>2727	PrimaryExpression	0
>2728	Identifier	f1
>2729	PrimaryExpression	0
>2730	PrimaryExpression	0
>2731	PrimaryExpression	0
>2732	Identifier	f1
>2733	Identifier	K1
>2734	PrimaryExpression	9
>2735	Identifier	K1
>2736	IdentifierDeclType	double [ 9 ]
>2737	ExpressionStatement	 
>2738	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , t2_cross , R2 , E )
>2739	ArgumentList	3
>2740	Argument	E
>2741	Identifier	E
>2742	Argument	R2
>2743	Identifier	R2
>2744	Argument	t2_cross
>2745	Identifier	t2_cross
>2746	Argument	3
>2747	PrimaryExpression	3
>2748	Argument	3
>2749	PrimaryExpression	3
>2750	Argument	3
>2751	PrimaryExpression	3
>2752	Argument	3
>2753	PrimaryExpression	3
>2754	Callee	matrix_product
>2755	Identifier	matrix_product
>2756	IdentifierDeclStatement	 
>2757	IdentifierDecl	E [ 9 ]
>2758	PrimaryExpression	9
>2759	Identifier	E
>2760	IdentifierDeclType	double [ 9 ]
>2761	IdentifierDeclStatement	 
>2762	IdentifierDecl	t2_cross [ 9 ] = { 0.0 , - t2 [ 2 ] , t2 [ 1 ] , t2 [ 2 ] , 0.0 , - t2 [ 0 ] , - t2 [ 1 ] , t2 [ 0 ] , 0.0 }
>2763	AssignmentExpr	t2_cross [ 9 ] = { 0.0 , - t2 [ 2 ] , t2 [ 1 ] , t2 [ 2 ] , 0.0 , - t2 [ 0 ] , - t2 [ 1 ] , t2 [ 0 ] , \
>2764	InitializerList	0.0
>2765	PrimaryExpression	0.0
>2766	ArrayIndexing	t2 [ 0 ]
>2767	PrimaryExpression	0
>2768	Identifier	t2
>2769	UnaryOp	- t2 [ 1 ]
>2770	ArrayIndexing	t2 [ 1 ]
>2771	PrimaryExpression	1
>2772	Identifier	t2
>2773	UnaryOperator	-
>2774	UnaryOp	- t2 [ 0 ]
>2775	ArrayIndexing	t2 [ 0 ]
>2776	PrimaryExpression	0
>2777	Identifier	t2
>2778	UnaryOperator	-
>2779	PrimaryExpression	0.0
>2780	ArrayIndexing	t2 [ 2 ]
>2781	PrimaryExpression	2
>2782	Identifier	t2
>2783	ArrayIndexing	t2 [ 1 ]
>2784	PrimaryExpression	1
>2785	Identifier	t2
>2786	UnaryOp	- t2 [ 2 ]
>2787	ArrayIndexing	t2 [ 2 ]
>2788	PrimaryExpression	2
>2789	Identifier	t2
>2790	UnaryOperator	-
>2791	PrimaryExpression	0.0
>2792	Identifier	t2_cross
>2793	PrimaryExpression	9
>2794	Identifier	t2_cross
>2795	IdentifierDeclType	double [ 9 ]
<3=33,32,4
<4=29,26,23,20,17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<20=22,21
<23=25,24
<26=28,27
<29=31,30
<33=2485,2468,2449,2440,2421,2402,2389,2372,2353,2348,2329,2316,2299,2293,2268,2252,2236,2218,2209,2194,2179,2170,2151,2132,2115,2098,2085,2076,2057,2038,2019,2010,2001,1992,1983,1966,1947,1928,1909,1890,1873,1856,1839,1822,1805,1788,1771,1754,1737,1720,1703,1686,1669,1656,1643,1630,1617,1600,1583,1566,1547,1532,1513,1494,1475,1460,1441,1422,1407,1390,1373,1358,1341,1324,1317,1306,1293,1287,1281,1274,1270,1253,1232,1211,1190,1183,1179,1162,34,36,53,409,426,446,480,500,534,554,588,596,630,655,662,669,691,702,713,720,731,753,764,775,782,793,815,826,837,844,855,877,888,899,906,917,938,959,980,997,1001,1008,1029,1050,1071,1088,1092,1099,1120,1141
<34=35
<36=49,37
<37=40,38
<38=39
<40=41
<41=47,42
<42=45,43
<43=44
<45=46
<47=48
<49=50
<50=52,51
<53=401,54
<54=269,55
<55=261,56
<56=252,227,57
<57=221,192,58
<58=59
<59=60
<60=190,61
<61=189,174,159,158,157,142,127,126,125,110,95,94,93,78,63,62
<63=64
<64=76,65
<65=74,72,66
<66=67
<67=69,68
<69=71,70
<72=73
<74=75
<76=77
<78=79
<79=91,80
<80=89,87,81
<81=82
<82=84,83
<84=86,85
<87=88
<89=90
<91=92
<95=96
<96=108,97
<97=106,104,98
<98=99
<99=101,100
<101=103,102
<104=105
<106=107
<108=109
<110=111
<111=123,112
<112=121,119,113
<113=114
<114=116,115
<116=118,117
<119=120
<121=122
<123=124
<127=128
<128=140,129
<129=138,136,130
<130=131
<131=133,132
<133=135,134
<136=137
<138=139
<140=141
<142=143
<143=155,144
<144=153,151,145
<145=146
<146=148,147
<148=150,149
<151=152
<153=154
<155=156
<159=160
<160=172,161
<161=170,168,162
<162=163
<163=165,164
<165=167,166
<168=169
<170=171
<172=173
<174=175
<175=187,176
<176=185,183,177
<177=178
<178=180,179
<180=182,181
<183=184
<185=186
<187=188
<190=191
<192=214,205,193
<193=194
<194=202,195
<195=199,196
<196=198,197
<199=201,200
<202=204,203
<205=206
<206=212,207
<207=210,208
<208=209
<210=211
<212=213
<214=215
<215=219,216
<216=217
<217=218
<219=220
<221=222
<222=226,223
<223=225,224
<227=248,243,228
<228=229
<229=234,230
<230=231
<231=233,232
<234=235
<235=241,236
<236=237
<237=238
<238=240,239
<241=242
<243=244
<244=245
<245=247,246
<248=249
<249=251,250
<252=253
<253=260,259,254
<254=258,255
<255=257,256
<261=262
<262=266,263
<263=265,264
<266=268,267
<269=399,270
<270=398,383,368,367,366,351,336,335,334,319,304,303,302,287,272,271
<272=273
<273=285,274
<274=283,281,275
<275=276
<276=278,277
<278=280,279
<281=282
<283=284
<285=286
<287=288
<288=300,289
<289=298,296,290
<290=291
<291=293,292
<293=295,294
<296=297
<298=299
<300=301
<304=305
<305=317,306
<306=315,313,307
<307=308
<308=310,309
<310=312,311
<313=314
<315=316
<317=318
<319=320
<320=332,321
<321=330,328,322
<322=323
<323=325,324
<325=327,326
<328=329
<330=331
<332=333
<336=337
<337=349,338
<338=347,345,339
<339=340
<340=342,341
<342=344,343
<345=346
<347=348
<349=350
<351=352
<352=364,353
<353=362,360,354
<354=355
<355=357,356
<357=359,358
<360=361
<362=363
<364=365
<368=369
<369=381,370
<370=379,377,371
<371=372
<372=374,373
<374=376,375
<377=378
<379=380
<381=382
<383=384
<384=396,385
<385=394,392,386
<386=387
<387=389,388
<389=391,390
<392=393
<394=395
<396=397
<399=400
<401=402
<402=406,403
<403=405,404
<406=408,407
<409=420,410
<410=413,411
<411=412
<413=414
<414=418,415
<415=416
<416=417
<418=419
<420=421
<421=425,422
<422=424,423
<426=444,427
<427=428
<428=438,434,429
<429=430
<430=431
<431=433,432
<434=435
<435=437,436
<438=439
<439=443,440
<440=442,441
<444=445
<446=467,447
<447=456,452,448
<448=449
<449=451,450
<452=453
<453=455,454
<456=457
<457=466,458
<458=464,459
<459=460
<460=461
<461=463,462
<464=465
<467=468
<468=479,469
<469=471,470
<471=477,472
<472=473
<473=474
<474=476,475
<477=478
<480=498,481
<481=482
<482=492,488,483
<483=484
<484=485
<485=487,486
<488=489
<489=491,490
<492=493
<493=497,494
<494=496,495
<498=499
<500=521,501
<501=510,506,502
<502=503
<503=505,504
<506=507
<507=509,508
<510=511
<511=520,512
<512=518,513
<513=514
<514=515
<515=517,516
<518=519
<521=522
<522=533,523
<523=525,524
<525=531,526
<526=527
<527=528
<528=530,529
<531=532
<534=552,535
<535=536
<536=546,542,537
<537=538
<538=539
<539=541,540
<542=543
<543=545,544
<546=547
<547=551,548
<548=550,549
<552=553
<554=575,555
<555=564,560,556
<556=557
<557=559,558
<560=561
<561=563,562
<564=565
<565=574,566
<566=572,567
<567=568
<568=569
<569=571,570
<572=573
<575=576
<576=587,577
<577=579,578
<579=585,580
<580=581
<581=582
<582=584,583
<585=586
<588=594,589
<589=590
<590=591
<591=593,592
<594=595
<596=617,597
<597=606,602,598
<598=599
<599=601,600
<602=603
<603=605,604
<606=607
<607=616,608
<608=614,609
<609=610
<610=611
<611=613,612
<614=615
<617=618
<618=629,619
<619=621,620
<621=627,622
<622=623
<623=624
<624=626,625
<627=628
<630=647,639,631
<631=638,637,632
<632=636,633
<633=635,634
<639=646,645,640
<640=644,641
<641=643,642
<647=654,653,648
<648=652,649
<649=651,650
<655=656
<656=661,660,657
<657=659,658
<662=663
<663=668,667,664
<664=666,665
<669=670
<670=689,671
<671=687,685,678,672
<672=673
<673=676,675,674
<676=677
<678=679
<679=683,680
<680=681
<681=682
<683=684
<685=686
<687=688
<689=690
<691=692
<692=700,693
<693=698,696,694
<694=695
<696=697
<698=699
<700=701
<702=703
<703=711,704
<704=709,707,705
<705=706
<707=708
<709=710
<711=712
<713=714
<714=718,715
<715=716
<716=717
<718=719
<720=721
<721=729,722
<722=727,725,723
<723=724
<725=726
<727=728
<729=730
<731=732
<732=751,733
<733=749,747,740,734
<734=735
<735=738,737,736
<738=739
<740=741
<741=745,742
<742=743
<743=744
<745=746
<747=748
<749=750
<751=752
<753=754
<754=762,755
<755=760,758,756
<756=757
<758=759
<760=761
<762=763
<764=765
<765=773,766
<766=771,769,767
<767=768
<769=770
<771=772
<773=774
<775=776
<776=780,777
<777=778
<778=779
<780=781
<782=783
<783=791,784
<784=789,787,785
<785=786
<787=788
<789=790
<791=792
<793=794
<794=813,795
<795=811,809,802,796
<796=797
<797=800,799,798
<800=801
<802=803
<803=807,804
<804=805
<805=806
<807=808
<809=810
<811=812
<813=814
<815=816
<816=824,817
<817=822,820,818
<818=819
<820=821
<822=823
<824=825
<826=827
<827=835,828
<828=833,831,829
<829=830
<831=832
<833=834
<835=836
<837=838
<838=842,839
<839=840
<840=841
<842=843
<844=845
<845=853,846
<846=851,849,847
<847=848
<849=850
<851=852
<853=854
<855=856
<856=875,857
<857=873,871,864,858
<858=859
<859=862,861,860
<862=863
<864=865
<865=869,866
<866=867
<867=868
<869=870
<871=872
<873=874
<875=876
<877=878
<878=886,879
<879=884,882,880
<880=881
<882=883
<884=885
<886=887
<888=889
<889=897,890
<890=895,893,891
<891=892
<893=894
<895=896
<897=898
<899=900
<900=904,901
<901=902
<902=903
<904=905
<906=907
<907=915,908
<908=913,911,909
<909=910
<911=912
<913=914
<915=916
<917=918
<918=936,919
<919=934,932,930,928,926,924,922,920
<920=921
<922=923
<924=925
<926=927
<928=929
<930=931
<932=933
<934=935
<936=937
<938=939
<939=957,940
<940=955,953,949,945,941
<941=942
<942=944,943
<945=946
<946=948,947
<949=950
<950=952,951
<953=954
<955=956
<957=958
<959=960
<960=978,961
<961=976,974,972,970,968,966,962
<962=963
<963=965,964
<966=967
<968=969
<970=971
<972=973
<974=975
<976=977
<978=979
<980=981
<981=995,982
<982=991,989,983
<983=984
<984=986,985
<986=988,987
<989=990
<991=992
<992=994,993
<995=996
<997=998
<998=1000,999
<1001=1005,1002
<1002=1004,1003
<1005=1007,1006
<1008=1009
<1009=1027,1010
<1010=1025,1023,1021,1019,1017,1015,1013,1011
<1011=1012
<1013=1014
<1015=1016
<1017=1018
<1019=1020
<1021=1022
<1023=1024
<1025=1026
<1027=1028
<1029=1030
<1030=1048,1031
<1031=1046,1044,1040,1036,1032
<1032=1033
<1033=1035,1034
<1036=1037
<1037=1039,1038
<1040=1041
<1041=1043,1042
<1044=1045
<1046=1047
<1048=1049
<1050=1051
<1051=1069,1052
<1052=1067,1065,1063,1061,1059,1057,1053
<1053=1054
<1054=1056,1055
<1057=1058
<1059=1060
<1061=1062
<1063=1064
<1065=1066
<1067=1068
<1069=1070
<1071=1072
<1072=1086,1073
<1073=1082,1080,1074
<1074=1075
<1075=1077,1076
<1077=1079,1078
<1080=1081
<1082=1083
<1083=1085,1084
<1086=1087
<1088=1089
<1089=1091,1090
<1092=1096,1093
<1093=1095,1094
<1096=1098,1097
<1099=1100
<1100=1118,1101
<1101=1116,1114,1112,1110,1108,1106,1104,1102
<1102=1103
<1104=1105
<1106=1107
<1108=1109
<1110=1111
<1112=1113
<1114=1115
<1116=1117
<1118=1119
<1120=1121
<1121=1139,1122
<1122=1137,1135,1131,1127,1123
<1123=1124
<1124=1126,1125
<1127=1128
<1128=1130,1129
<1131=1132
<1132=1134,1133
<1135=1136
<1137=1138
<1139=1140
<1141=1142
<1142=1160,1143
<1143=1158,1156,1154,1152,1150,1148,1144
<1144=1145
<1145=1147,1146
<1148=1149
<1150=1151
<1152=1153
<1154=1155
<1156=1157
<1158=1159
<1160=1161
<1162=1163
<1163=1177,1164
<1164=1173,1171,1165
<1165=1166
<1166=1168,1167
<1168=1170,1169
<1171=1172
<1173=1174
<1174=1176,1175
<1177=1178
<1179=1180
<1180=1182,1181
<1183=1187,1184
<1184=1186,1185
<1187=1189,1188
<1190=1191
<1191=1209,1192
<1192=1207,1205,1203,1201,1199,1197,1195,1193
<1193=1194
<1195=1196
<1197=1198
<1199=1200
<1201=1202
<1203=1204
<1205=1206
<1207=1208
<1209=1210
<1211=1212
<1212=1230,1213
<1213=1228,1226,1222,1218,1214
<1214=1215
<1215=1217,1216
<1218=1219
<1219=1221,1220
<1222=1223
<1223=1225,1224
<1226=1227
<1228=1229
<1230=1231
<1232=1233
<1233=1251,1234
<1234=1249,1247,1245,1243,1241,1239,1235
<1235=1236
<1236=1238,1237
<1239=1240
<1241=1242
<1243=1244
<1245=1246
<1247=1248
<1249=1250
<1251=1252
<1253=1254
<1254=1268,1255
<1255=1264,1262,1256
<1256=1257
<1257=1259,1258
<1259=1261,1260
<1262=1263
<1264=1265
<1265=1267,1266
<1268=1269
<1270=1271
<1271=1273,1272
<1274=1278,1275
<1275=1277,1276
<1278=1280,1279
<1281=1282
<1282=1284,1283
<1284=1286,1285
<1287=1288
<1288=1290,1289
<1290=1292,1291
<1293=1294
<1294=1304,1295
<1295=1302,1300,1296
<1296=1297
<1297=1299,1298
<1300=1301
<1302=1303
<1304=1305
<1306=1307
<1307=1315,1308
<1308=1313,1309
<1309=1310
<1310=1312,1311
<1313=1314
<1315=1316
<1317=1321,1318
<1318=1320,1319
<1321=1323,1322
<1324=1325
<1325=1339,1326
<1326=1337,1335,1333,1329,1327
<1327=1328
<1329=1330
<1330=1332,1331
<1333=1334
<1335=1336
<1337=1338
<1339=1340
<1341=1342
<1342=1356,1343
<1343=1354,1352,1350,1346,1344
<1344=1345
<1346=1347
<1347=1349,1348
<1350=1351
<1352=1353
<1354=1355
<1356=1357
<1358=1359
<1359=1371,1360
<1360=1369,1367,1361
<1361=1362
<1362=1364,1363
<1364=1366,1365
<1367=1368
<1369=1370
<1371=1372
<1373=1374
<1374=1388,1375
<1375=1386,1384,1382,1378,1376
<1376=1377
<1378=1379
<1379=1381,1380
<1382=1383
<1384=1385
<1386=1387
<1388=1389
<1390=1391
<1391=1405,1392
<1392=1403,1401,1399,1395,1393
<1393=1394
<1395=1396
<1396=1398,1397
<1399=1400
<1401=1402
<1403=1404
<1405=1406
<1407=1408
<1408=1420,1409
<1409=1418,1416,1410
<1410=1411
<1411=1413,1412
<1413=1415,1414
<1416=1417
<1418=1419
<1420=1421
<1422=1423
<1423=1439,1424
<1424=1437,1435,1433,1431,1429,1427,1425
<1425=1426
<1427=1428
<1429=1430
<1431=1432
<1433=1434
<1435=1436
<1437=1438
<1439=1440
<1441=1442
<1442=1458,1443
<1443=1456,1454,1452,1450,1448,1446,1444
<1444=1445
<1446=1447
<1448=1449
<1450=1451
<1452=1453
<1454=1455
<1456=1457
<1458=1459
<1460=1461
<1461=1473,1462
<1462=1471,1469,1463
<1463=1464
<1464=1466,1465
<1466=1468,1467
<1469=1470
<1471=1472
<1473=1474
<1475=1476
<1476=1492,1477
<1477=1490,1488,1486,1484,1482,1480,1478
<1478=1479
<1480=1481
<1482=1483
<1484=1485
<1486=1487
<1488=1489
<1490=1491
<1492=1493
<1494=1495
<1495=1511,1496
<1496=1509,1507,1505,1503,1501,1499,1497
<1497=1498
<1499=1500
<1501=1502
<1503=1504
<1505=1506
<1507=1508
<1509=1510
<1511=1512
<1513=1514
<1514=1530,1515
<1515=1528,1526,1524,1522,1520,1518,1516
<1516=1517
<1518=1519
<1520=1521
<1522=1523
<1524=1525
<1526=1527
<1528=1529
<1530=1531
<1532=1533
<1533=1545,1534
<1534=1543,1541,1535
<1535=1536
<1536=1538,1537
<1538=1540,1539
<1541=1542
<1543=1544
<1545=1546
<1547=1548
<1548=1564,1549
<1549=1562,1560,1558,1556,1554,1552,1550
<1550=1551
<1552=1553
<1554=1555
<1556=1557
<1558=1559
<1560=1561
<1562=1563
<1564=1565
<1566=1579,1575,1571,1567
<1567=1570,1569,1568
<1571=1574,1573,1572
<1575=1578,1577,1576
<1579=1582,1581,1580
<1583=1596,1592,1588,1584
<1584=1587,1586,1585
<1588=1591,1590,1589
<1592=1595,1594,1593
<1596=1599,1598,1597
<1600=1613,1609,1605,1601
<1601=1604,1603,1602
<1605=1608,1607,1606
<1609=1612,1611,1610
<1613=1616,1615,1614
<1617=1618
<1618=1628,1619
<1619=1626,1624,1622,1620
<1620=1621
<1622=1623
<1624=1625
<1626=1627
<1628=1629
<1630=1631
<1631=1641,1632
<1632=1639,1637,1635,1633
<1633=1634
<1635=1636
<1637=1638
<1639=1640
<1641=1642
<1643=1644
<1644=1654,1645
<1645=1652,1650,1648,1646
<1646=1647
<1648=1649
<1650=1651
<1652=1653
<1654=1655
<1656=1657
<1657=1667,1658
<1658=1665,1663,1661,1659
<1659=1660
<1661=1662
<1663=1664
<1665=1666
<1667=1668
<1669=1682,1678,1674,1670
<1670=1673,1672,1671
<1674=1677,1676,1675
<1678=1681,1680,1679
<1682=1685,1684,1683
<1686=1687
<1687=1701,1688
<1688=1697,1695,1689
<1689=1690
<1690=1694,1691
<1691=1693,1692
<1695=1696
<1697=1698
<1698=1700,1699
<1701=1702
<1703=1704
<1704=1718,1705
<1705=1714,1712,1706
<1706=1707
<1707=1711,1708
<1708=1710,1709
<1712=1713
<1714=1715
<1715=1717,1716
<1718=1719
<1720=1721
<1721=1735,1722
<1722=1731,1729,1723
<1723=1724
<1724=1728,1725
<1725=1727,1726
<1729=1730
<1731=1732
<1732=1734,1733
<1735=1736
<1737=1738
<1738=1752,1739
<1739=1748,1746,1740
<1740=1741
<1741=1745,1742
<1742=1744,1743
<1746=1747
<1748=1749
<1749=1751,1750
<1752=1753
<1754=1755
<1755=1769,1756
<1756=1765,1763,1757
<1757=1758
<1758=1762,1759
<1759=1761,1760
<1763=1764
<1765=1766
<1766=1768,1767
<1769=1770
<1771=1772
<1772=1786,1773
<1773=1782,1780,1774
<1774=1775
<1775=1779,1776
<1776=1778,1777
<1780=1781
<1782=1783
<1783=1785,1784
<1786=1787
<1788=1789
<1789=1803,1790
<1790=1799,1797,1791
<1791=1792
<1792=1796,1793
<1793=1795,1794
<1797=1798
<1799=1800
<1800=1802,1801
<1803=1804
<1805=1806
<1806=1820,1807
<1807=1816,1814,1808
<1808=1809
<1809=1813,1810
<1810=1812,1811
<1814=1815
<1816=1817
<1817=1819,1818
<1820=1821
<1822=1823
<1823=1837,1824
<1824=1833,1831,1825
<1825=1826
<1826=1830,1827
<1827=1829,1828
<1831=1832
<1833=1834
<1834=1836,1835
<1837=1838
<1839=1840
<1840=1854,1841
<1841=1850,1848,1842
<1842=1843
<1843=1847,1844
<1844=1846,1845
<1848=1849
<1850=1851
<1851=1853,1852
<1854=1855
<1856=1857
<1857=1871,1858
<1858=1867,1865,1859
<1859=1860
<1860=1864,1861
<1861=1863,1862
<1865=1866
<1867=1868
<1868=1870,1869
<1871=1872
<1873=1874
<1874=1888,1875
<1875=1884,1882,1876
<1876=1877
<1877=1881,1878
<1878=1880,1879
<1882=1883
<1884=1885
<1885=1887,1886
<1888=1889
<1890=1891
<1891=1907,1892
<1892=1905,1903,1901,1899,1897,1895,1893
<1893=1894
<1895=1896
<1897=1898
<1899=1900
<1901=1902
<1903=1904
<1905=1906
<1907=1908
<1909=1910
<1910=1926,1911
<1911=1924,1922,1920,1918,1916,1914,1912
<1912=1913
<1914=1915
<1916=1917
<1918=1919
<1920=1921
<1922=1923
<1924=1925
<1926=1927
<1928=1929
<1929=1945,1930
<1930=1943,1941,1939,1937,1935,1933,1931
<1931=1932
<1933=1934
<1935=1936
<1937=1938
<1939=1940
<1941=1942
<1943=1944
<1945=1946
<1947=1948
<1948=1964,1949
<1949=1962,1960,1958,1956,1954,1952,1950
<1950=1951
<1952=1953
<1954=1955
<1956=1957
<1958=1959
<1960=1961
<1962=1963
<1964=1965
<1966=1979,1975,1971,1967
<1967=1970,1969,1968
<1971=1974,1973,1972
<1975=1978,1977,1976
<1979=1982,1981,1980
<1983=1988,1984
<1984=1987,1986,1985
<1988=1991,1990,1989
<1992=1997,1993
<1993=1996,1995,1994
<1997=2000,1999,1998
<2001=2002
<2002=2008,2003
<2003=2006,2004
<2004=2005
<2006=2007
<2008=2009
<2010=2011
<2011=2017,2012
<2012=2015,2013
<2013=2014
<2015=2016
<2017=2018
<2019=2020
<2020=2036,2021
<2021=2034,2032,2030,2028,2026,2024,2022
<2022=2023
<2024=2025
<2026=2027
<2028=2029
<2030=2031
<2032=2033
<2034=2035
<2036=2037
<2038=2039
<2039=2055,2040
<2040=2053,2051,2049,2047,2045,2043,2041
<2041=2042
<2043=2044
<2045=2046
<2047=2048
<2049=2050
<2051=2052
<2053=2054
<2055=2056
<2057=2058
<2058=2074,2059
<2059=2072,2070,2068,2066,2064,2062,2060
<2060=2061
<2062=2063
<2064=2065
<2066=2067
<2068=2069
<2070=2071
<2072=2073
<2074=2075
<2076=2081,2077
<2077=2080,2079,2078
<2081=2084,2083,2082
<2085=2094,2090,2086
<2086=2089,2088,2087
<2090=2093,2092,2091
<2094=2097,2096,2095
<2098=2099
<2099=2113,2100
<2100=2111,2109,2107,2103,2101
<2101=2102
<2103=2104
<2104=2106,2105
<2107=2108
<2109=2110
<2111=2112
<2113=2114
<2115=2116
<2116=2130,2117
<2117=2128,2126,2124,2120,2118
<2118=2119
<2120=2121
<2121=2123,2122
<2124=2125
<2126=2127
<2128=2129
<2130=2131
<2132=2133
<2133=2149,2134
<2134=2147,2145,2143,2141,2139,2137,2135
<2135=2136
<2137=2138
<2139=2140
<2141=2142
<2143=2144
<2145=2146
<2147=2148
<2149=2150
<2151=2152
<2152=2168,2153
<2153=2166,2164,2162,2160,2158,2156,2154
<2154=2155
<2156=2157
<2158=2159
<2160=2161
<2162=2163
<2164=2165
<2166=2167
<2168=2169
<2170=2175,2171
<2171=2174,2173,2172
<2175=2178,2177,2176
<2179=2180
<2180=2192,2181
<2181=2190,2188,2186,2184,2182
<2182=2183
<2184=2185
<2186=2187
<2188=2189
<2190=2191
<2192=2193
<2194=2195
<2195=2207,2196
<2196=2205,2203,2201,2199,2197
<2197=2198
<2199=2200
<2201=2202
<2203=2204
<2205=2206
<2207=2208
<2209=2214,2210
<2210=2213,2212,2211
<2214=2217,2216,2215
<2218=2219
<2219=2235,2234,2220
<2220=2233,2221
<2221=2231,2222
<2222=2223
<2223=2224
<2224=2228,2225
<2225=2227,2226
<2228=2230,2229
<2231=2232
<2236=2237
<2237=2251,2250,2238
<2238=2249,2239
<2239=2247,2240
<2240=2241
<2241=2242
<2242=2246,2243
<2243=2245,2244
<2247=2248
<2252=2253
<2253=2267,2266,2254
<2254=2265,2255
<2255=2263,2256
<2256=2257
<2257=2258
<2258=2260,2259
<2260=2262,2261
<2263=2264
<2268=2285,2277,2269
<2269=2276,2275,2270
<2270=2274,2271
<2271=2273,2272
<2277=2284,2283,2278
<2278=2282,2279
<2279=2281,2280
<2285=2292,2291,2286
<2286=2290,2287
<2287=2289,2288
<2293=2294
<2294=2296,2295
<2296=2298,2297
<2299=2300
<2300=2314,2301
<2301=2312,2310,2308,2306,2304,2302
<2302=2303
<2304=2305
<2306=2307
<2308=2309
<2310=2311
<2312=2313
<2314=2315
<2316=2325,2321,2317
<2317=2320,2319,2318
<2321=2324,2323,2322
<2325=2328,2327,2326
<2329=2330
<2330=2346,2331
<2331=2344,2342,2340,2338,2336,2334,2332
<2332=2333
<2334=2335
<2336=2337
<2338=2339
<2340=2341
<2342=2343
<2344=2345
<2346=2347
<2348=2349
<2349=2352,2351,2350
<2353=2354
<2354=2370,2355
<2355=2368,2366,2364,2358,2356
<2356=2357
<2358=2359
<2359=2363,2360
<2360=2362,2361
<2364=2365
<2366=2367
<2368=2369
<2370=2371
<2372=2373
<2373=2387,2374
<2374=2385,2383,2381,2379,2377,2375
<2375=2376
<2377=2378
<2379=2380
<2381=2382
<2383=2384
<2385=2386
<2387=2388
<2389=2398,2394,2390
<2390=2393,2392,2391
<2394=2397,2396,2395
<2398=2401,2400,2399
<2402=2403
<2403=2419,2404
<2404=2417,2415,2413,2411,2409,2407,2405
<2405=2406
<2407=2408
<2409=2410
<2411=2412
<2413=2414
<2415=2416
<2417=2418
<2419=2420
<2421=2422
<2422=2438,2423
<2423=2436,2434,2432,2430,2428,2426,2424
<2424=2425
<2426=2427
<2428=2429
<2430=2431
<2432=2433
<2434=2435
<2436=2437
<2438=2439
<2440=2445,2441
<2441=2444,2443,2442
<2445=2448,2447,2446
<2449=2450
<2450=2467,2466,2465,2451
<2451=2464,2452
<2452=2463,2462,2461,2460,2457,2456,2455,2454,2453
<2457=2459,2458
<2468=2469
<2469=2484,2483,2482,2470
<2470=2481,2471
<2471=2480,2479,2478,2477,2476,2475,2474,2473,2472
<2485=2486
<2486=2505,2504,2503,2487
<2487=2502,2488
<2488=2499,2498,2497,2496,2493,2492,2491,2490,2489
<2493=2495,2494
<2499=2501,2500
<2608=2626,2625,2609
<2609=2622,2619,2616,2613,2610
<2610=2612,2611
<2613=2615,2614
<2616=2618,2617
<2619=2621,2620
<2622=2624,2623
<2626=2761,2756,2737,2720,2703,2694,2683,2672,2667,2648,2629,2627
<2627=2628
<2629=2630
<2630=2646,2631
<2631=2644,2642,2640,2638,2636,2634,2632
<2632=2633
<2634=2635
<2636=2637
<2638=2639
<2640=2641
<2642=2643
<2644=2645
<2646=2647
<2648=2649
<2649=2665,2650
<2650=2663,2661,2659,2657,2655,2653,2651
<2651=2652
<2653=2654
<2655=2656
<2657=2658
<2659=2660
<2661=2662
<2663=2664
<2665=2666
<2667=2668
<2668=2671,2670,2669
<2672=2673
<2673=2681,2674
<2674=2679,2677,2675
<2675=2676
<2677=2678
<2679=2680
<2681=2682
<2683=2684
<2684=2692,2685
<2685=2690,2688,2686
<2686=2687
<2688=2689
<2690=2691
<2692=2693
<2694=2699,2695
<2695=2698,2697,2696
<2699=2702,2701,2700
<2703=2704
<2704=2719,2718,2717,2705
<2705=2716,2706
<2706=2715,2714,2713,2712,2711,2710,2709,2708,2707
<2720=2721
<2721=2736,2735,2734,2722
<2722=2733,2723
<2723=2732,2731,2730,2729,2728,2727,2726,2725,2724
<2737=2738
<2738=2754,2739
<2739=2752,2750,2748,2746,2744,2742,2740
<2740=2741
<2742=2743
<2744=2745
<2746=2747
<2748=2749
<2750=2751
<2752=2753
<2754=2755
<2756=2757
<2757=2760,2759,2758
<2761=2762
<2762=2795,2794,2793,2763
<2763=2792,2764
<2764=2791,2786,2783,2780,2779,2774,2769,2766,2765
<2766=2768,2767
<2769=2773,2770
<2770=2772,2771
<2774=2778,2775
<2775=2777,2776
<2780=2782,2781
<2783=2785,2784
<2786=2790,2787
<2787=2789,2788
