>7	FunctionDef	on_data (blocking_queue & q)
>8	ParameterList	blocking_queue & q
>9	Parameter	 
>10	Identifier	q
>11	ParameterType	blocking_queue &
>12	CompoundStatement	 
>20	FunctionDef	operator ( ) (blocking_queue * queue , IC_OUT * dataout , TC_OUT * tagout , const hidden_graph < IC_IN , IC_OUT , \
>21	ParameterList	blocking_queue * queue , IC_OUT * dataout , TC_OUT * tagout , const hidden_graph < IC_IN , IC_OUT , TC_OUT > * graph
>22	Parameter	 
>23	Identifier	graph
>24	ParameterType	const hidden_graph < IC_IN , IC_OUT , TC_OUT > *
>25	Parameter	 
>26	Identifier	tagout
>27	ParameterType	TC_OUT *
>28	Parameter	 
>29	Identifier	dataout
>30	ParameterType	IC_OUT *
>31	Parameter	 
>32	Identifier	queue
>33	ParameterType	blocking_queue *
>34	ReturnType	void
>35	CompoundStatement	 
>36	ExpressionStatement	 
>37	ShiftExpression	oss << \"done observe_and_compute\"
>38	PrimaryExpression	\"done observe_and_compute\"
>39	Identifier	oss
>40	IdentifierDeclStatement	 
>41	IdentifierDecl	oss
>42	Identifier	oss
>43	IdentifierDeclType	CnC 
>44	ExpressionStatement	 
>45	CallExpression	graph -> enter_quiescence ( )
>46	ArgumentList	 
>47	Callee	graph -> enter_quiescence
>48	PtrMemberAccess	graph -> enter_quiescence
>49	Identifier	enter_quiescence
>50	Identifier	graph
>51	DoStatement	do
>52	Condition	 
>53	RelationalExpression	_tag < CnC 
>54	AdditiveExpression	CnC 
>55	PrimaryExpression	7
>56	MultiplicativeExpression	CnC 
>57	PrimaryExpression	1000
>58	CallExpression	CnC 
>59	ArgumentList	 
>60	Callee	CnC 
>61	Identifier	CnC 
>62	Identifier	_tag
>63	CompoundStatement	 
>64	IfStatement	if ( _tm % 4 )
>65	CompoundStatement	 
>66	ExpressionStatement	 
>67	UnaryExpression	++ _tag
>68	Identifier	_tag
>69	IncDec	++
>70	ExpressionStatement	 
>71	CallExpression	tagout -> put ( _tag )
>72	ArgumentList	_tag
>73	Argument	_tag
>74	Identifier	_tag
>75	Callee	tagout -> put
>76	PtrMemberAccess	tagout -> put
>77	Identifier	put
>78	Identifier	tagout
>79	ExpressionStatement	 
>80	CallExpression	dataout -> put ( _tag , _item + _tm )
>81	ArgumentList	_tag
>82	Argument	_item + _tm
>83	AdditiveExpression	_item + _tm
>84	Identifier	_tm
>85	Identifier	_item
>86	Argument	_tag
>87	Identifier	_tag
>88	Callee	dataout -> put
>89	PtrMemberAccess	dataout -> put
>90	Identifier	put
>91	Identifier	dataout
>92	Condition	 
>93	MultiplicativeExpression	_tm % 4
>94	PrimaryExpression	4
>95	Identifier	_tm
>96	ExpressionStatement	 
>97	CallExpression	std 
>98	ArgumentList	std 
>99	Argument	std 
>100	CallExpression	std 
>101	ArgumentList	_tm
>102	Argument	_tm
>103	Identifier	_tm
>104	Callee	std 
>105	Identifier	std 
>106	Callee	std 
>107	Identifier	std 
>108	IdentifierDeclStatement	 
>109	IdentifierDecl	_tm = rand ( ) % 1111
>110	AssignmentExpr	_tm = rand ( ) % 1111
>111	MultiplicativeExpression	rand ( ) % 1111
>112	PrimaryExpression	1111
>113	CallExpression	rand ( )
>114	ArgumentList	 
>115	Callee	rand
>116	Identifier	rand
>117	Identifier	_tm
>118	Identifier	_tm
>119	IdentifierDeclType	int
>120	ExpressionStatement	 
>121	CallExpression	queue -> pop ( _item )
>122	ArgumentList	_item
>123	Argument	_item
>124	Identifier	_item
>125	Callee	queue -> pop
>126	PtrMemberAccess	queue -> pop
>127	Identifier	pop
>128	Identifier	queue
>129	IdentifierDeclStatement	 
>130	IdentifierDecl	_tag ( CnC 
>131	MultiplicativeExpression	CnC 
>132	PrimaryExpression	1000
>133	CallExpression	CnC 
>134	ArgumentList	 
>135	Callee	CnC 
>136	Identifier	CnC 
>137	Identifier	_tag
>138	IdentifierDeclType	typename TC_OUT 
>139	IdentifierDeclStatement	 
>140	IdentifierDecl	_item
>141	Identifier	_item
>142	IdentifierDeclType	typename IC_IN 
>157	FunctionDef	hidden_graph (CnC 
>158	ParameterList	CnC 
>159	Parameter	 
>160	Identifier	tc
>161	ParameterType	TC_OUT &
>162	Parameter	 
>163	Identifier	ic2
>164	ParameterType	IC_OUT &
>165	Parameter	 
>166	Identifier	ic1
>167	ParameterType	IC_IN &
>168	Parameter	 
>169	Identifier	name
>170	ParameterType	const std 
>171	Parameter	 
>172	Identifier	ctxt
>173	ParameterType	CnC 
>174	CompoundStatement	 
>175	ExpressionStatement	 
>176	CallExpression	m_input . on_put ( new on_data ( m_queue ) )
>177	ArgumentList	m_queue
>178	Argument	m_queue
>179	Identifier	m_queue
>180	Callee	m_input . on_put
>181	MemberAccess	m_input . on_put
>182	Identifier	on_put
>183	Identifier	m_input
>184	ExpressionStatement	 
>185	CallExpression	this -> leave_quiescence ( )
>186	ArgumentList	 
>187	Callee	this -> leave_quiescence
>188	PtrMemberAccess	this -> leave_quiescence
>189	Identifier	leave_quiescence
>190	Identifier	this
>202	FunctionDef	~hidden_graph ()
>203	ParameterList	 
>204	CompoundStatement	 
>205	ExpressionStatement	 
>206	CallExpression	m_thread . join ( )
>207	ArgumentList	 
>208	Callee	m_thread . join
>209	MemberAccess	m_thread . join
>210	Identifier	join
>211	Identifier	m_thread
>226	FunctionDef	make_hgraph (CnC 
>227	ParameterList	CnC 
>228	Parameter	 
>229	Identifier	tc
>230	ParameterType	TC_OUT &
>231	Parameter	 
>232	Identifier	ic2
>233	ParameterType	IC_OUT &
>234	Parameter	 
>235	Identifier	ic1
>236	ParameterType	IC_IN &
>237	Parameter	 
>238	Identifier	name
>239	ParameterType	const std 
>240	Parameter	 
>241	Identifier	ctxt
>242	ParameterType	CnC 
>243	ReturnType	hidden_graph < IC_IN , IC_OUT , TC_OUT > *
>244	CompoundStatement	 
>245	ReturnStatement	 
>246	Expression	ctxt , name , ic1 , ic2 , tc
>247	Expression	name , ic1 , ic2 , tc
>248	Expression	ic1 , ic2 , tc
>249	Expression	ic2 , tc
>250	Identifier	tc
>251	Identifier	ic2
>252	Identifier	ic1
>253	Identifier	name
>254	Identifier	ctxt
>265	FunctionDef	consumed_on (const int & tag)
>266	ParameterList	const int & tag
>267	Parameter	 
>268	Identifier	tag
>269	ParameterType	const int &
>270	ReturnType	int
>271	CompoundStatement	 
>272	ReturnStatement	 
>273	MultiplicativeExpression	tag % numProcs ( )
>274	CallExpression	numProcs ( )
>275	ArgumentList	 
>276	Callee	numProcs
>277	Identifier	numProcs
>278	Identifier	tag
>296	FunctionDef	hg_context ()
>297	ParameterList	 
>298	CompoundStatement	 
>299	ExpressionStatement	 
>300	AssignmentExpr	hgraph = make_hgraph ( * this , \"hidden_graph\" , input_data , processed_data , consumer_tags )
>301	CallExpression	make_hgraph ( * this , \"hidden_graph\" , input_data , processed_data , consumer_tags )
>302	ArgumentList	* this
>303	Argument	consumer_tags
>304	Identifier	consumer_tags
>305	Argument	processed_data
>306	Identifier	processed_data
>307	Argument	input_data
>308	Identifier	input_data
>309	Argument	\"hidden_graph\"
>310	PrimaryExpression	\"hidden_graph\"
>311	Argument	* this
>312	UnaryOp	* this
>313	Identifier	this
>314	UnaryOperator	*
>315	Callee	make_hgraph
>316	Identifier	make_hgraph
>317	Identifier	hgraph
>318	ExpressionStatement	 
>319	CallExpression	consumer . produces ( result_data )
>320	ArgumentList	result_data
>321	Argument	result_data
>322	Identifier	result_data
>323	Callee	consumer . produces
>324	MemberAccess	consumer . produces
>325	Identifier	produces
>326	Identifier	consumer
>327	ExpressionStatement	 
>328	CallExpression	consumer . consumes ( processed_data )
>329	ArgumentList	processed_data
>330	Argument	processed_data
>331	Identifier	processed_data
>332	Callee	consumer . consumes
>333	MemberAccess	consumer . consumes
>334	Identifier	consumes
>335	Identifier	consumer
>336	ExpressionStatement	 
>337	CallExpression	consumer_tags . prescribes ( consumer , * this )
>338	ArgumentList	consumer
>339	Argument	* this
>340	UnaryOp	* this
>341	Identifier	this
>342	UnaryOperator	*
>343	Argument	consumer
>344	Identifier	consumer
>345	Callee	consumer_tags . prescribes
>346	MemberAccess	consumer_tags . prescribes
>347	Identifier	prescribes
>348	Identifier	consumer_tags
>361	FunctionDef	consume 
>362	ParameterList	const int tag , hg_context & ctxt
>363	Parameter	 
>364	Identifier	ctxt
>365	ParameterType	hg_context &
>366	Parameter	 
>367	Identifier	tag
>368	ParameterType	const int
>369	ReturnType	int
>370	CompoundStatement	 
>371	ReturnStatement	 
>372	PrimaryExpression	0
>373	ExpressionStatement	 
>374	CallExpression	ctxt . result_data . put ( tag + tag , _val * _val )
>375	ArgumentList	tag + tag
>376	Argument	_val * _val
>377	MultiplicativeExpression	_val * _val
>378	Identifier	_val
>379	Identifier	_val
>380	Argument	tag + tag
>381	AdditiveExpression	tag + tag
>382	Identifier	tag
>383	Identifier	tag
>384	Callee	ctxt . result_data . put
>385	MemberAccess	ctxt . result_data . put
>386	Identifier	put
>387	MemberAccess	ctxt . result_data
>388	Identifier	result_data
>389	Identifier	ctxt
>390	ExpressionStatement	 
>391	CallExpression	ctxt . processed_data . get ( tag , _val )
>392	ArgumentList	tag
>393	Argument	_val
>394	Identifier	_val
>395	Argument	tag
>396	Identifier	tag
>397	Callee	ctxt . processed_data . get
>398	MemberAccess	ctxt . processed_data . get
>399	Identifier	get
>400	MemberAccess	ctxt . processed_data
>401	Identifier	processed_data
>402	Identifier	ctxt
>403	IdentifierDeclStatement	 
>404	IdentifierDecl	_val
>405	Identifier	_val
>406	IdentifierDeclType	int
>415	FunctionDef	main ()
>416	ParameterList	 
>417	ReturnType	int
>418	CompoundStatement	 
>419	ReturnStatement	 
>420	PrimaryExpression	0
>421	ExpressionStatement	 
>422	ShiftExpression	std 
>423	ShiftExpression	_ctxt . result_data . size ( ) << std 
>424	Identifier	std 
>425	CallExpression	_ctxt . result_data . size ( )
>426	ArgumentList	 
>427	Callee	_ctxt . result_data . size
>428	MemberAccess	_ctxt . result_data . size
>429	Identifier	size
>430	MemberAccess	_ctxt . result_data
>431	Identifier	result_data
>432	Identifier	_ctxt
>433	Identifier	std 
>434	ExpressionStatement	 
>435	CallExpression	_ctxt . wait ( )
>436	ArgumentList	 
>437	Callee	_ctxt . wait
>438	MemberAccess	_ctxt . wait
>439	Identifier	wait
>440	Identifier	_ctxt
>441	ForStatement	for ( int i = 0 ; i < 444 ; ++ i )
>442	CompoundStatement	 
>443	ExpressionStatement	 
>444	CallExpression	_ctxt . input_data . put ( i , rand ( ) )
>445	ArgumentList	i
>446	Argument	rand ( )
>447	CallExpression	rand ( )
>448	ArgumentList	 
>449	Callee	rand
>450	Identifier	rand
>451	Argument	i
>452	Identifier	i
>453	Callee	_ctxt . input_data . put
>454	MemberAccess	_ctxt . input_data . put
>455	Identifier	put
>456	MemberAccess	_ctxt . input_data
>457	Identifier	input_data
>458	Identifier	_ctxt
>459	UnaryExpression	 
>460	Identifier	i
>461	IncDec	++
>462	Condition	 
>463	RelationalExpression	i < 444
>464	PrimaryExpression	444
>465	Identifier	i
>466	ForInit	 
>467	IdentifierDeclStatement	int i = 0 ;
>468	IdentifierDecl	i = 0
>469	AssignmentExpr	i = 0
>470	PrimaryExpression	0
>471	Identifier	i
>472	Identifier	i
>473	IdentifierDeclType	int
>474	IdentifierDeclStatement	 
>475	IdentifierDecl	_ctxt
>476	Identifier	_ctxt
>477	IdentifierDeclType	hg_context
>478	IdentifierDeclStatement	 
>479	IdentifierDecl	_dc
>480	Identifier	_dc
>481	IdentifierDeclType	CnC 
>482	ExpressionStatement	 
>483	CallExpression	srand ( 11 )
>484	ArgumentList	11
>485	Argument	11
>486	PrimaryExpression	11
>487	Callee	srand
>488	Identifier	srand
<7=12,8
<8=9
<9=11,10
<20=35,34,21
<21=31,28,25,22
<22=24,23
<25=27,26
<28=30,29
<31=33,32
<35=139,129,51,44,40,36
<36=37
<37=39,38
<40=41
<41=43,42
<44=45
<45=47,46
<47=48
<48=50,49
<51=63,52
<52=53
<53=62,54
<54=56,55
<56=58,57
<58=60,59
<60=61
<63=120,108,96,64
<64=92,65
<65=79,70,66
<66=67
<67=69,68
<70=71
<71=75,72
<72=73
<73=74
<75=76
<76=78,77
<79=80
<80=88,81
<81=86,82
<82=83
<83=85,84
<86=87
<88=89
<89=91,90
<92=93
<93=95,94
<96=97
<97=106,98
<98=99
<99=100
<100=104,101
<101=102
<102=103
<104=105
<106=107
<108=109
<109=119,118,110
<110=117,111
<111=113,112
<113=115,114
<115=116
<120=121
<121=125,122
<122=123
<123=124
<125=126
<126=128,127
<129=130
<130=138,137,131
<131=133,132
<133=135,134
<135=136
<139=140
<140=142,141
<157=174,158
<158=171,168,165,162,159
<159=161,160
<162=164,163
<165=167,166
<168=170,169
<171=173,172
<174=184,175
<175=176
<176=180,177
<177=178
<178=179
<180=181
<181=183,182
<184=185
<185=187,186
<187=188
<188=190,189
<202=204,203
<204=205
<205=206
<206=208,207
<208=209
<209=211,210
<226=244,243,227
<227=240,237,234,231,228
<228=230,229
<231=233,232
<234=236,235
<237=239,238
<240=242,241
<244=245
<245=246
<246=254,247
<247=253,248
<248=252,249
<249=251,250
<265=271,270,266
<266=267
<267=269,268
<271=272
<272=273
<273=278,274
<274=276,275
<276=277
<296=298,297
<298=336,327,318,299
<299=300
<300=317,301
<301=315,302
<302=311,309,307,305,303
<303=304
<305=306
<307=308
<309=310
<311=312
<312=314,313
<315=316
<318=319
<319=323,320
<320=321
<321=322
<323=324
<324=326,325
<327=328
<328=332,329
<329=330
<330=331
<332=333
<333=335,334
<336=337
<337=345,338
<338=343,339
<339=340
<340=342,341
<343=344
<345=346
<346=348,347
<361=370,369,362
<362=366,363
<363=365,364
<366=368,367
<370=403,390,373,371
<371=372
<373=374
<374=384,375
<375=380,376
<376=377
<377=379,378
<380=381
<381=383,382
<384=385
<385=387,386
<387=389,388
<390=391
<391=397,392
<392=395,393
<393=394
<395=396
<397=398
<398=400,399
<400=402,401
<403=404
<404=406,405
<415=418,417,416
<418=482,478,474,441,434,421,419
<419=420
<421=422
<422=433,423
<423=425,424
<425=427,426
<427=428
<428=430,429
<430=432,431
<434=435
<435=437,436
<437=438
<438=440,439
<441=466,462,459,442
<442=443
<443=444
<444=453,445
<445=451,446
<446=447
<447=449,448
<449=450
<451=452
<453=454
<454=456,455
<456=458,457
<459=461,460
<462=463
<463=465,464
<466=467
<467=468
<468=473,472,469
<469=471,470
<474=475
<475=477,476
<478=479
<479=481,480
<482=483
<483=487,484
<484=485
<485=486
<487=488
