>3	FunctionDef	FX_Moving_Text 
>4	ParameterList	const string & text , const vec2 & startpos , const vec2 & dir , const vec2 & speed
>5	Parameter	 
>6	Identifier	speed
>7	ParameterType	const vec2 &
>8	Parameter	 
>9	Identifier	dir
>10	ParameterType	const vec2 &
>11	Parameter	 
>12	Identifier	startpos
>13	ParameterType	const vec2 &
>14	Parameter	 
>15	Identifier	text
>16	ParameterType	const string &
>17	CompoundStatement	 
>18	ExpressionStatement	 
>19	AssignmentExpr	m_running = true
>20	Identifier	true
>21	Identifier	m_running
>22	ExpressionStatement	 
>23	AssignmentExpr	m_textcolor = vec4 ( 0 , 1 , 0 , 0 )
>24	CallExpression	vec4 ( 0 , 1 , 0 , 0 )
>25	ArgumentList	0
>26	Argument	0
>27	PrimaryExpression	0
>28	Argument	0
>29	PrimaryExpression	0
>30	Argument	1
>31	PrimaryExpression	1
>32	Argument	0
>33	PrimaryExpression	0
>34	Callee	vec4
>35	Identifier	vec4
>36	Identifier	m_textcolor
>37	ExpressionStatement	 
>38	AssignmentExpr	m_textsize = 0.5
>39	PrimaryExpression	0.5
>40	Identifier	m_textsize
>41	ExpressionStatement	 
>42	AssignmentExpr	m_duration = 1.3
>43	PrimaryExpression	1.3
>44	Identifier	m_duration
>45	ExpressionStatement	 
>46	AssignmentExpr	m_start_time = g_timer -> now ( )
>47	CallExpression	g_timer -> now ( )
>48	ArgumentList	 
>49	Callee	g_timer -> now
>50	PtrMemberAccess	g_timer -> now
>51	Identifier	now
>52	Identifier	g_timer
>53	Identifier	m_start_time
>71	FunctionDef	FX_Moving_Text 
>72	ParameterList	 
>73	CompoundStatement	 
>77	FunctionDef	FX_Moving_Text 
>78	ParameterList	 
>79	ReturnType	void
>80	CompoundStatement	 
>81	ExpressionStatement	 
>82	AssignmentExpr	m_textcolor [ 3 ] = fade_out ( 0.3 , m_duration , fx_time )
>83	CallExpression	fade_out ( 0.3 , m_duration , fx_time )
>84	ArgumentList	0.3
>85	Argument	fx_time
>86	Identifier	fx_time
>87	Argument	m_duration
>88	Identifier	m_duration
>89	Argument	0.3
>90	PrimaryExpression	0.3
>91	Callee	fade_out
>92	Identifier	fade_out
>93	ArrayIndexing	m_textcolor [ 3 ]
>94	PrimaryExpression	3
>95	Identifier	m_textcolor
>96	ExpressionStatement	 
>97	AssignmentExpr	m_pos = m_startpos + ( normalized ( m_dir ) * m_speed * fx_time )
>98	AdditiveExpression	m_startpos + ( normalized ( m_dir ) * m_speed * fx_time )
>99	MultiplicativeExpression	normalized ( m_dir ) * m_speed * fx_time
>100	MultiplicativeExpression	m_speed * fx_time
>101	Identifier	fx_time
>102	Identifier	m_speed
>103	CallExpression	normalized ( m_dir )
>104	ArgumentList	m_dir
>105	Argument	m_dir
>106	Identifier	m_dir
>107	Callee	normalized
>108	Identifier	normalized
>109	Identifier	m_startpos
>110	Identifier	m_pos
>111	IfStatement	if ( fx_time > m_duration )
>112	CompoundStatement	 
>113	ReturnStatement	 
>114	ExpressionStatement	 
>115	AssignmentExpr	m_running = false
>116	Identifier	false
>117	Identifier	m_running
>118	Condition	 
>119	RelationalExpression	fx_time > m_duration
>120	Identifier	m_duration
>121	Identifier	fx_time
>122	IdentifierDeclStatement	 
>123	IdentifierDecl	fx_time = g_timer -> now ( ) - m_start_time
>124	AssignmentExpr	fx_time = g_timer -> now ( ) - m_start_time
>125	AdditiveExpression	g_timer -> now ( ) - m_start_time
>126	Identifier	m_start_time
>127	CallExpression	g_timer -> now ( )
>128	ArgumentList	 
>129	Callee	g_timer -> now
>130	PtrMemberAccess	g_timer -> now
>131	Identifier	now
>132	Identifier	g_timer
>133	Identifier	fx_time
>134	Identifier	fx_time
>135	IdentifierDeclType	float
>136	IfStatement	if ( ! m_running )
>137	ReturnStatement	 
>138	Condition	 
>139	UnaryOp	! m_running
>140	Identifier	m_running
>141	UnaryOperator	!
>161	FunctionDef	FX_Moving_Text 
>162	ParameterList	 
>163	ReturnType	void
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	CallExpression	g_resources . font -> print_text_with_shadow ( m_text . c_str ( ) , m_pos , m_textsize , false , m_textcolor )
>167	ArgumentList	m_text . c_str ( )
>168	Argument	m_textcolor
>169	Identifier	m_textcolor
>170	Argument	false
>171	Identifier	false
>172	Argument	m_textsize
>173	Identifier	m_textsize
>174	Argument	m_pos
>175	Identifier	m_pos
>176	Argument	m_text . c_str ( )
>177	CallExpression	m_text . c_str ( )
>178	ArgumentList	 
>179	Callee	m_text . c_str
>180	MemberAccess	m_text . c_str
>181	Identifier	c_str
>182	Identifier	m_text
>183	Callee	g_resources . font -> print_text_with_shadow
>184	PtrMemberAccess	g_resources . font -> print_text_with_shadow
>185	Identifier	print_text_with_shadow
>186	MemberAccess	g_resources . font
>187	Identifier	font
>188	Identifier	g_resources
>189	IfStatement	if ( ! m_running )
>190	ReturnStatement	 
>191	Condition	 
>192	UnaryOp	! m_running
>193	Identifier	m_running
>194	UnaryOperator	!
>207	FunctionDef	FX_Moving_Text 
>208	ParameterList	 
>209	ReturnType	bool
>210	CompoundStatement	 
>211	ReturnStatement	 
>212	UnaryOp	! m_running
>213	Identifier	m_running
>214	UnaryOperator	!
>219	FunctionDef	FX_Moving_Text 
>220	ParameterList	 
>221	ReturnType	bool
>222	CompoundStatement	 
>223	ReturnStatement	 
>224	Identifier	m_running
<3=17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=45,41,37,22,18
<18=19
<19=21,20
<22=23
<23=36,24
<24=34,25
<25=32,30,28,26
<26=27
<28=29
<30=31
<32=33
<34=35
<37=38
<38=40,39
<41=42
<42=44,43
<45=46
<46=53,47
<47=49,48
<49=50
<50=52,51
<71=73,72
<77=80,79,78
<80=136,122,111,96,81
<81=82
<82=93,83
<83=91,84
<84=89,87,85
<85=86
<87=88
<89=90
<91=92
<93=95,94
<96=97
<97=110,98
<98=109,99
<99=103,100
<100=102,101
<103=107,104
<104=105
<105=106
<107=108
<111=118,112
<112=114,113
<114=115
<115=117,116
<118=119
<119=121,120
<122=123
<123=135,134,124
<124=133,125
<125=127,126
<127=129,128
<129=130
<130=132,131
<136=138,137
<138=139
<139=141,140
<161=164,163,162
<164=189,165
<165=166
<166=183,167
<167=176,174,172,170,168
<168=169
<170=171
<172=173
<174=175
<176=177
<177=179,178
<179=180
<180=182,181
<183=184
<184=186,185
<186=188,187
<189=191,190
<191=192
<192=194,193
<207=210,209,208
<210=211
<211=212
<212=214,213
<219=222,221,220
<222=223
<223=224
