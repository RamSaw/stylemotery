>30	FunctionDef	CPLHaveRuntimeSSE ()
>31	ParameterList	 
>32	ReturnType	static int
>33	CompoundStatement	 
>34	ReturnStatement	 
>35	Identifier	TRUE
>40	FunctionDef	CPLHaveRuntimeSSE ()
>41	ParameterList	 
>42	ReturnType	static int
>43	CompoundStatement	 
>44	ReturnStatement	 
>45	EqualityExpression	( cpuinfo [ 3 ] & ( 1 << CPUID_SSE_BIT ) ) != 0
>46	PrimaryExpression	0
>47	BitAndExpression	cpuinfo [ 3 ] & ( 1 << CPUID_SSE_BIT )
>48	ShiftExpression	1 << CPUID_SSE_BIT
>49	Identifier	CPUID_SSE_BIT
>50	PrimaryExpression	1
>51	ArrayIndexing	cpuinfo [ 3 ]
>52	PrimaryExpression	3
>53	Identifier	cpuinfo
>54	ExpressionStatement	 
>55	CallExpression	GCC_CPUID ( 1 , cpuinfo [ 0 ] , cpuinfo [ 1 ] , cpuinfo [ 2 ] , cpuinfo [ 3 ] )
>56	ArgumentList	1
>57	Argument	cpuinfo [ 3 ]
>58	ArrayIndexing	cpuinfo [ 3 ]
>59	PrimaryExpression	3
>60	Identifier	cpuinfo
>61	Argument	cpuinfo [ 2 ]
>62	ArrayIndexing	cpuinfo [ 2 ]
>63	PrimaryExpression	2
>64	Identifier	cpuinfo
>65	Argument	cpuinfo [ 1 ]
>66	ArrayIndexing	cpuinfo [ 1 ]
>67	PrimaryExpression	1
>68	Identifier	cpuinfo
>69	Argument	cpuinfo [ 0 ]
>70	ArrayIndexing	cpuinfo [ 0 ]
>71	PrimaryExpression	0
>72	Identifier	cpuinfo
>73	Argument	1
>74	PrimaryExpression	1
>75	Callee	GCC_CPUID
>76	Identifier	GCC_CPUID
>77	IdentifierDeclStatement	 
>78	IdentifierDecl	cpuinfo [ 4 ] = { 0 , 0 , 0 , 0 }
>79	AssignmentExpr	cpuinfo [ 4 ] = { 0 , 0 , 0 , 0 }
>80	InitializerList	0
>81	PrimaryExpression	0
>82	PrimaryExpression	0
>83	PrimaryExpression	0
>84	PrimaryExpression	0
>85	Identifier	cpuinfo
>86	PrimaryExpression	4
>87	Identifier	cpuinfo
>88	IdentifierDeclType	int [ 4 ]
>95	FunctionDef	__cpuid (int cpuinfo [ 4 ] , int level)
>96	ParameterList	int cpuinfo [ 4 ] , int level
>97	Parameter	 
>98	Identifier	level
>99	ParameterType	int
>100	Parameter	 
>101	Identifier	cpuinfo
>102	ParameterType	int [ 4 ]
>103	CompoundStatement	 
>104	CompoundStatement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	Statement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Statement	 
>133	Statement	 
>134	Statement	 
>135	Statement	 
>136	Statement	 
>137	Statement	 
>138	Statement	 
>139	Statement	 
>140	Statement	 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	Statement	 
>148	Statement	 
>149	Statement	 
>150	Statement	 
>151	Statement	 
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>167	FunctionDef	CPLHaveRuntimeSSE ()
>168	ParameterList	 
>169	ReturnType	static int
>170	CompoundStatement	 
>171	ReturnStatement	 
>172	EqualityExpression	( cpuinfo [ 3 ] & ( 1 << CPUID_SSE_BIT ) ) != 0
>173	PrimaryExpression	0
>174	BitAndExpression	cpuinfo [ 3 ] & ( 1 << CPUID_SSE_BIT )
>175	ShiftExpression	1 << CPUID_SSE_BIT
>176	Identifier	CPUID_SSE_BIT
>177	PrimaryExpression	1
>178	ArrayIndexing	cpuinfo [ 3 ]
>179	PrimaryExpression	3
>180	Identifier	cpuinfo
>181	ExpressionStatement	 
>182	CallExpression	__cpuid ( cpuinfo , 1 )
>183	ArgumentList	cpuinfo
>184	Argument	1
>185	PrimaryExpression	1
>186	Argument	cpuinfo
>187	Identifier	cpuinfo
>188	Callee	__cpuid
>189	Identifier	__cpuid
>190	IdentifierDeclStatement	 
>191	IdentifierDecl	cpuinfo [ 4 ] = { 0 , 0 , 0 , 0 }
>192	AssignmentExpr	cpuinfo [ 4 ] = { 0 , 0 , 0 , 0 }
>193	InitializerList	0
>194	PrimaryExpression	0
>195	PrimaryExpression	0
>196	PrimaryExpression	0
>197	PrimaryExpression	0
>198	Identifier	cpuinfo
>199	PrimaryExpression	4
>200	Identifier	cpuinfo
>201	IdentifierDeclType	int [ 4 ]
>208	FunctionDef	CPLHaveRuntimeSSE ()
>209	ParameterList	 
>210	ReturnType	static int
>211	CompoundStatement	 
>212	ReturnStatement	 
>213	Identifier	FALSE
>218	FunctionDef	GDALGridGetPointBounds (const void * hFeature , CPLRectObj * pBounds)
>219	ParameterList	const void * hFeature , CPLRectObj * pBounds
>220	Parameter	 
>221	Identifier	pBounds
>222	ParameterType	CPLRectObj *
>223	Parameter	 
>224	Identifier	hFeature
>225	ParameterType	const void *
>226	ReturnType	static void
>227	CompoundStatement	 
>228	ExpressionStatement	 
>229	AssignmentExpr	pBounds -> maxy = dfY
>230	Identifier	dfY
>231	PtrMemberAccess	pBounds -> maxy
>232	Identifier	maxy
>233	Identifier	pBounds
>234	ExpressionStatement	 
>235	AssignmentExpr	pBounds -> maxx = dfX
>236	Identifier	dfX
>237	PtrMemberAccess	pBounds -> maxx
>238	Identifier	maxx
>239	Identifier	pBounds
>240	ExpressionStatement	 
>241	AssignmentExpr	pBounds -> miny = dfY
>242	Identifier	dfY
>243	PtrMemberAccess	pBounds -> miny
>244	Identifier	miny
>245	Identifier	pBounds
>246	ExpressionStatement	 
>247	AssignmentExpr	pBounds -> minx = dfX
>248	Identifier	dfX
>249	PtrMemberAccess	pBounds -> minx
>250	Identifier	minx
>251	Identifier	pBounds
>252	IdentifierDeclStatement	 
>253	IdentifierDecl	dfY = psXYArrays -> padfY [ i ]
>254	AssignmentExpr	dfY = psXYArrays -> padfY [ i ]
>255	ArrayIndexing	psXYArrays -> padfY [ i ]
>256	Identifier	i
>257	PtrMemberAccess	psXYArrays -> padfY
>258	Identifier	padfY
>259	Identifier	psXYArrays
>260	Identifier	dfY
>261	Identifier	dfY
>262	IdentifierDeclType	double
>263	IdentifierDeclStatement	 
>264	IdentifierDecl	dfX = psXYArrays -> padfX [ i ]
>265	AssignmentExpr	dfX = psXYArrays -> padfX [ i ]
>266	ArrayIndexing	psXYArrays -> padfX [ i ]
>267	Identifier	i
>268	PtrMemberAccess	psXYArrays -> padfX
>269	Identifier	padfX
>270	Identifier	psXYArrays
>271	Identifier	dfX
>272	Identifier	dfX
>273	IdentifierDeclType	double
>274	IdentifierDeclStatement	 
>275	IdentifierDecl	i = psPoint -> i
>276	AssignmentExpr	i = psPoint -> i
>277	PtrMemberAccess	psPoint -> i
>278	Identifier	i
>279	Identifier	psPoint
>280	Identifier	i
>281	Identifier	i
>282	IdentifierDeclType	int
>283	IdentifierDeclStatement	 
>284	IdentifierDecl	* psXYArrays = psPoint -> psXYArrays
>285	AssignmentExpr	* psXYArrays = psPoint -> psXYArrays
>286	PtrMemberAccess	psPoint -> psXYArrays
>287	Identifier	psXYArrays
>288	Identifier	psPoint
>289	Identifier	psXYArrays
>290	Identifier	psXYArrays
>291	IdentifierDeclType	GDALGridXYArrays *
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	* psPoint = ( GDALGridPoint * ) hFeature
>294	AssignmentExpr	* psPoint = ( GDALGridPoint * ) hFeature
>295	CastExpression	( GDALGridPoint * ) hFeature
>296	Identifier	hFeature
>297	CastTarget	GDALGridPoint *
>298	Identifier	psPoint
>299	Identifier	psPoint
>300	IdentifierDeclType	GDALGridPoint *
>326	FunctionDef	GDALGridInverseDistanceToAPower (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * \
>327	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>328	Parameter	 
>329	Identifier	hExtraParamsIn
>330	ParameterType	void *
>331	Parameter	 
>332	Identifier	pdfValue
>333	ParameterType	double *
>334	Parameter	 
>335	Identifier	dfYPoint
>336	ParameterType	double
>337	Parameter	 
>338	Identifier	dfXPoint
>339	ParameterType	double
>340	Parameter	 
>341	Identifier	padfZ
>342	ParameterType	const double *
>343	Parameter	 
>344	Identifier	padfY
>345	ParameterType	const double *
>346	Parameter	 
>347	Identifier	padfX
>348	ParameterType	const double *
>349	Parameter	 
>350	Identifier	nPoints
>351	ParameterType	GUInt32
>352	Parameter	 
>353	Identifier	poOptions
>354	ParameterType	const void *
>355	ReturnType	CPLErr
>356	CompoundStatement	 
>357	ReturnStatement	 
>358	Identifier	CE_None
>359	IfStatement	if ( n < ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> nMinPoints || dfDenominator == 0.0 )
>360	ElseStatement	else
>361	ExpressionStatement	 
>362	AssignmentExpr	( * pdfValue ) = dfNominator / dfDenominator
>363	MultiplicativeExpression	dfNominator / dfDenominator
>364	Identifier	dfDenominator
>365	Identifier	dfNominator
>366	UnaryOp	* pdfValue
>367	Identifier	pdfValue
>368	UnaryOperator	*
>369	CompoundStatement	 
>370	ExpressionStatement	 
>371	AssignmentExpr	( * pdfValue ) = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfNoDataValue
>372	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfNoDataValue
>373	Identifier	dfNoDataValue
>374	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>375	Identifier	poOptions
>376	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>377	UnaryOp	* pdfValue
>378	Identifier	pdfValue
>379	UnaryOperator	*
>380	Condition	 
>381	OrExpression	n < ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> nMinPoints || dfDenominator == 0.0
>382	EqualityExpression	dfDenominator == 0.0
>383	PrimaryExpression	0.0
>384	Identifier	dfDenominator
>385	RelationalExpression	n < ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> nMinPoints
>386	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> nMinPoints
>387	Identifier	nMinPoints
>388	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>389	Identifier	poOptions
>390	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>391	Identifier	n
>392	ForStatement	for ( i = 0 ; i < nPoints ; i ++ )
>393	CompoundStatement	 
>394	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>395	CompoundStatement	 
>396	IfStatement	if ( dfR2 < 0.0000000000001 )
>397	ElseStatement	else
>398	CompoundStatement	 
>399	IfStatement	if ( nMaxPoints > 0 && n > nMaxPoints )
>400	BreakStatement	 
>401	Condition	 
>402	AndExpression	nMaxPoints > 0 && n > nMaxPoints
>403	RelationalExpression	n > nMaxPoints
>404	Identifier	nMaxPoints
>405	Identifier	n
>406	RelationalExpression	nMaxPoints > 0
>407	PrimaryExpression	0
>408	Identifier	nMaxPoints
>409	ExpressionStatement	 
>410	IncDecOp	n ++
>411	IncDec	++
>412	Identifier	n
>413	ExpressionStatement	 
>414	AssignmentExpr	dfDenominator += dfInvW
>415	Identifier	dfInvW
>416	Identifier	dfDenominator
>417	ExpressionStatement	 
>418	AssignmentExpr	dfNominator += dfInvW * padfZ [ i ]
>419	MultiplicativeExpression	dfInvW * padfZ [ i ]
>420	ArrayIndexing	padfZ [ i ]
>421	Identifier	i
>422	Identifier	padfZ
>423	Identifier	dfInvW
>424	Identifier	dfNominator
>425	IdentifierDeclStatement	 
>426	IdentifierDecl	dfInvW = 1.0 / dfW
>427	AssignmentExpr	dfInvW = 1.0 / dfW
>428	MultiplicativeExpression	1.0 / dfW
>429	Identifier	dfW
>430	PrimaryExpression	1.0
>431	Identifier	dfInvW
>432	Identifier	dfInvW
>433	IdentifierDeclType	double
>434	IdentifierDeclStatement	 
>435	IdentifierDecl	dfW = pow ( dfR2 , dfPowerDiv2 )
>436	AssignmentExpr	dfW = pow ( dfR2 , dfPowerDiv2 )
>437	CallExpression	pow ( dfR2 , dfPowerDiv2 )
>438	ArgumentList	dfR2
>439	Argument	dfPowerDiv2
>440	Identifier	dfPowerDiv2
>441	Argument	dfR2
>442	Identifier	dfR2
>443	Callee	pow
>444	Identifier	pow
>445	Identifier	dfW
>446	Identifier	dfW
>447	IdentifierDeclType	const double
>448	CompoundStatement	 
>449	ReturnStatement	 
>450	Identifier	CE_None
>451	ExpressionStatement	 
>452	AssignmentExpr	( * pdfValue ) = padfZ [ i ]
>453	ArrayIndexing	padfZ [ i ]
>454	Identifier	i
>455	Identifier	padfZ
>456	UnaryOp	* pdfValue
>457	Identifier	pdfValue
>458	UnaryOperator	*
>459	Condition	 
>460	RelationalExpression	dfR2 < 0.0000000000001
>461	PrimaryExpression	0.0000000000001
>462	Identifier	dfR2
>463	Condition	 
>464	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>465	Identifier	dfR12
>466	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>467	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>468	MultiplicativeExpression	dfRY * dfRY
>469	Identifier	dfRY
>470	Identifier	dfRY
>471	Identifier	dfRadius1
>472	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>473	MultiplicativeExpression	dfRX * dfRX
>474	Identifier	dfRX
>475	Identifier	dfRX
>476	Identifier	dfRadius2
>477	IfStatement	if ( bRotated )
>478	CompoundStatement	 
>479	ExpressionStatement	 
>480	AssignmentExpr	dfRY = dfRYRotated
>481	Identifier	dfRYRotated
>482	Identifier	dfRY
>483	ExpressionStatement	 
>484	AssignmentExpr	dfRX = dfRXRotated
>485	Identifier	dfRXRotated
>486	Identifier	dfRX
>487	IdentifierDeclStatement	 
>488	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>489	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>490	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>491	MultiplicativeExpression	dfRX * dfCoeff2
>492	Identifier	dfCoeff2
>493	Identifier	dfRX
>494	MultiplicativeExpression	dfRY * dfCoeff1
>495	Identifier	dfCoeff1
>496	Identifier	dfRY
>497	Identifier	dfRYRotated
>498	Identifier	dfRYRotated
>499	IdentifierDeclType	double
>500	IdentifierDeclStatement	 
>501	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>502	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>503	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>504	MultiplicativeExpression	dfRY * dfCoeff2
>505	Identifier	dfCoeff2
>506	Identifier	dfRY
>507	MultiplicativeExpression	dfRX * dfCoeff1
>508	Identifier	dfCoeff1
>509	Identifier	dfRX
>510	Identifier	dfRXRotated
>511	Identifier	dfRXRotated
>512	IdentifierDeclType	double
>513	Condition	 
>514	Identifier	bRotated
>515	IdentifierDeclStatement	 
>516	IdentifierDecl	dfR2 = dfRX * dfRX + dfRY * dfRY + dfSmoothing * dfSmoothing
>517	AssignmentExpr	dfR2 = dfRX * dfRX + dfRY * dfRY + dfSmoothing * dfSmoothing
>518	AdditiveExpression	dfRX * dfRX + dfRY * dfRY + dfSmoothing * dfSmoothing
>519	AdditiveExpression	dfRY * dfRY + dfSmoothing * dfSmoothing
>520	MultiplicativeExpression	dfSmoothing * dfSmoothing
>521	Identifier	dfSmoothing
>522	Identifier	dfSmoothing
>523	MultiplicativeExpression	dfRY * dfRY
>524	Identifier	dfRY
>525	Identifier	dfRY
>526	MultiplicativeExpression	dfRX * dfRX
>527	Identifier	dfRX
>528	Identifier	dfRX
>529	Identifier	dfR2
>530	Identifier	dfR2
>531	IdentifierDeclType	const double
>532	IdentifierDeclStatement	 
>533	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>534	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>535	AdditiveExpression	padfY [ i ] - dfYPoint
>536	Identifier	dfYPoint
>537	ArrayIndexing	padfY [ i ]
>538	Identifier	i
>539	Identifier	padfY
>540	Identifier	dfRY
>541	Identifier	dfRY
>542	IdentifierDeclType	double
>543	IdentifierDeclStatement	 
>544	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>545	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>546	AdditiveExpression	padfX [ i ] - dfXPoint
>547	Identifier	dfXPoint
>548	ArrayIndexing	padfX [ i ]
>549	Identifier	i
>550	Identifier	padfX
>551	Identifier	dfRX
>552	Identifier	dfRX
>553	IdentifierDeclType	double
>554	IncDecOp	 
>555	IncDec	++
>556	Identifier	i
>557	Condition	 
>558	RelationalExpression	i < nPoints
>559	Identifier	nPoints
>560	Identifier	i
>561	ForInit	 
>562	AssignmentExpr	i = 0
>563	PrimaryExpression	0
>564	Identifier	i
>565	IdentifierDeclStatement	 
>566	IdentifierDecl	n = 0
>567	AssignmentExpr	n = 0
>568	PrimaryExpression	0
>569	Identifier	n
>570	Identifier	n
>571	IdentifierDeclType	GUInt32
>572	IdentifierDecl	i
>573	Identifier	i
>574	IdentifierDeclType	GUInt32
>575	IdentifierDeclStatement	 
>576	IdentifierDecl	dfDenominator = 0.0
>577	AssignmentExpr	dfDenominator = 0.0
>578	PrimaryExpression	0.0
>579	Identifier	dfDenominator
>580	Identifier	dfDenominator
>581	IdentifierDeclType	double
>582	IdentifierDecl	dfNominator = 0.0
>583	AssignmentExpr	dfNominator = 0.0
>584	PrimaryExpression	0.0
>585	Identifier	dfNominator
>586	Identifier	dfNominator
>587	IdentifierDeclType	double
>588	IdentifierDeclStatement	 
>589	IdentifierDecl	nMaxPoints = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> nMaxPoints
>590	AssignmentExpr	nMaxPoints = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> nMaxPoints
>591	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> nMaxPoints
>592	Identifier	nMaxPoints
>593	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>594	Identifier	poOptions
>595	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>596	Identifier	nMaxPoints
>597	Identifier	nMaxPoints
>598	IdentifierDeclType	const GUInt32
>599	IdentifierDeclStatement	 
>600	IdentifierDecl	dfSmoothing = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>601	AssignmentExpr	dfSmoothing = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>602	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>603	Identifier	dfSmoothing
>604	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>605	Identifier	poOptions
>606	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>607	Identifier	dfSmoothing
>608	Identifier	dfSmoothing
>609	IdentifierDeclType	const double
>610	IdentifierDeclStatement	 
>611	IdentifierDecl	dfPowerDiv2 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower / 2
>612	AssignmentExpr	dfPowerDiv2 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower / 2
>613	MultiplicativeExpression	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower / 2
>614	PrimaryExpression	2
>615	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower
>616	Identifier	dfPower
>617	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>618	Identifier	poOptions
>619	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>620	Identifier	dfPowerDiv2
>621	Identifier	dfPowerDiv2
>622	IdentifierDeclType	const double
>623	IfStatement	if ( bRotated )
>624	CompoundStatement	 
>625	ExpressionStatement	 
>626	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>627	CallExpression	sin ( dfAngle )
>628	ArgumentList	dfAngle
>629	Argument	dfAngle
>630	Identifier	dfAngle
>631	Callee	sin
>632	Identifier	sin
>633	Identifier	dfCoeff2
>634	ExpressionStatement	 
>635	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>636	CallExpression	cos ( dfAngle )
>637	ArgumentList	dfAngle
>638	Argument	dfAngle
>639	Identifier	dfAngle
>640	Callee	cos
>641	Identifier	cos
>642	Identifier	dfCoeff1
>643	Condition	 
>644	Identifier	bRotated
>645	IdentifierDeclStatement	 
>646	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>647	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>648	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>649	Identifier	true
>650	Identifier	false
>651	Condition	dfAngle == 0.0
>652	EqualityExpression	dfAngle == 0.0
>653	PrimaryExpression	0.0
>654	Identifier	dfAngle
>655	Identifier	bRotated
>656	Identifier	bRotated
>657	IdentifierDeclType	const bool
>658	IdentifierDeclStatement	 
>659	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfAngle
>660	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfAngle
>661	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfAngle
>662	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfAngle
>663	Identifier	dfAngle
>664	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>665	Identifier	poOptions
>666	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>667	Identifier	TO_RADIANS
>668	Identifier	dfAngle
>669	Identifier	dfAngle
>670	IdentifierDeclType	const double
>671	IdentifierDeclStatement	 
>672	IdentifierDecl	dfCoeff2 = 0.0
>673	AssignmentExpr	dfCoeff2 = 0.0
>674	PrimaryExpression	0.0
>675	Identifier	dfCoeff2
>676	Identifier	dfCoeff2
>677	IdentifierDeclType	double
>678	IdentifierDecl	dfCoeff1 = 0.0
>679	AssignmentExpr	dfCoeff1 = 0.0
>680	PrimaryExpression	0.0
>681	Identifier	dfCoeff1
>682	Identifier	dfCoeff1
>683	IdentifierDeclType	double
>684	ExpressionStatement	 
>685	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>686	MultiplicativeExpression	dfRadius1 * dfRadius2
>687	Identifier	dfRadius2
>688	Identifier	dfRadius1
>689	Identifier	dfR12
>690	ExpressionStatement	 
>691	AssignmentExpr	dfRadius2 *= dfRadius2
>692	Identifier	dfRadius2
>693	Identifier	dfRadius2
>694	ExpressionStatement	 
>695	AssignmentExpr	dfRadius1 *= dfRadius1
>696	Identifier	dfRadius1
>697	Identifier	dfRadius1
>698	IdentifierDeclStatement	 
>699	IdentifierDecl	dfR12
>700	Identifier	dfR12
>701	IdentifierDeclType	double
>702	IdentifierDeclStatement	 
>703	IdentifierDecl	dfRadius2 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius2
>704	AssignmentExpr	dfRadius2 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius2
>705	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius2
>706	Identifier	dfRadius2
>707	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>708	Identifier	poOptions
>709	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>710	Identifier	dfRadius2
>711	Identifier	dfRadius2
>712	IdentifierDeclType	double
>713	IdentifierDeclStatement	 
>714	IdentifierDecl	dfRadius1 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius1
>715	AssignmentExpr	dfRadius1 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius1
>716	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius1
>717	Identifier	dfRadius1
>718	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>719	Identifier	poOptions
>720	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>721	Identifier	dfRadius1
>722	Identifier	dfRadius1
>723	IdentifierDeclType	double
>778	FunctionDef	GDALGridInverseDistanceToAPowerNoSearch (const void * poOptions , GUInt32 nPoints , const double * padfX , const \
>779	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>780	Parameter	 
>781	Identifier	hExtraParamsIn
>782	ParameterType	void *
>783	Parameter	 
>784	Identifier	pdfValue
>785	ParameterType	double *
>786	Parameter	 
>787	Identifier	dfYPoint
>788	ParameterType	double
>789	Parameter	 
>790	Identifier	dfXPoint
>791	ParameterType	double
>792	Parameter	 
>793	Identifier	padfZ
>794	ParameterType	const double *
>795	Parameter	 
>796	Identifier	padfY
>797	ParameterType	const double *
>798	Parameter	 
>799	Identifier	padfX
>800	ParameterType	const double *
>801	Parameter	 
>802	Identifier	nPoints
>803	ParameterType	GUInt32
>804	Parameter	 
>805	Identifier	poOptions
>806	ParameterType	const void *
>807	ReturnType	CPLErr
>808	CompoundStatement	 
>809	ReturnStatement	 
>810	Identifier	CE_None
>811	IfStatement	if ( i != nPoints )
>812	ElseStatement	else
>813	IfStatement	if ( dfDenominator == 0.0 )
>814	ElseStatement	else
>815	ExpressionStatement	 
>816	AssignmentExpr	( * pdfValue ) = dfNominator / dfDenominator
>817	MultiplicativeExpression	dfNominator / dfDenominator
>818	Identifier	dfDenominator
>819	Identifier	dfNominator
>820	UnaryOp	* pdfValue
>821	Identifier	pdfValue
>822	UnaryOperator	*
>823	CompoundStatement	 
>824	ExpressionStatement	 
>825	AssignmentExpr	( * pdfValue ) = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfNoDataValue
>826	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfNoDataValue
>827	Identifier	dfNoDataValue
>828	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>829	Identifier	poOptions
>830	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>831	UnaryOp	* pdfValue
>832	Identifier	pdfValue
>833	UnaryOperator	*
>834	Condition	 
>835	EqualityExpression	dfDenominator == 0.0
>836	PrimaryExpression	0.0
>837	Identifier	dfDenominator
>838	CompoundStatement	 
>839	ExpressionStatement	 
>840	AssignmentExpr	( * pdfValue ) = padfZ [ i ]
>841	ArrayIndexing	padfZ [ i ]
>842	Identifier	i
>843	Identifier	padfZ
>844	UnaryOp	* pdfValue
>845	Identifier	pdfValue
>846	UnaryOperator	*
>847	Condition	 
>848	EqualityExpression	i != nPoints
>849	Identifier	nPoints
>850	Identifier	i
>851	IfStatement	if ( bPower2 )
>852	ElseStatement	else
>853	CompoundStatement	 
>854	ForStatement	for ( i = 0 ; i < nPoints ; i ++ )
>855	CompoundStatement	 
>856	IfStatement	if ( dfR2 < 0.0000000000001 )
>857	ElseStatement	else
>858	CompoundStatement	 
>859	ExpressionStatement	 
>860	AssignmentExpr	dfDenominator += dfInvW
>861	Identifier	dfInvW
>862	Identifier	dfDenominator
>863	ExpressionStatement	 
>864	AssignmentExpr	dfNominator += dfInvW * padfZ [ i ]
>865	MultiplicativeExpression	dfInvW * padfZ [ i ]
>866	ArrayIndexing	padfZ [ i ]
>867	Identifier	i
>868	Identifier	padfZ
>869	Identifier	dfInvW
>870	Identifier	dfNominator
>871	IdentifierDeclStatement	 
>872	IdentifierDecl	dfInvW = 1.0 / dfW
>873	AssignmentExpr	dfInvW = 1.0 / dfW
>874	MultiplicativeExpression	1.0 / dfW
>875	Identifier	dfW
>876	PrimaryExpression	1.0
>877	Identifier	dfInvW
>878	Identifier	dfInvW
>879	IdentifierDeclType	double
>880	IdentifierDeclStatement	 
>881	IdentifierDecl	dfW = pow ( dfR2 , dfPowerDiv2 )
>882	AssignmentExpr	dfW = pow ( dfR2 , dfPowerDiv2 )
>883	CallExpression	pow ( dfR2 , dfPowerDiv2 )
>884	ArgumentList	dfR2
>885	Argument	dfPowerDiv2
>886	Identifier	dfPowerDiv2
>887	Argument	dfR2
>888	Identifier	dfR2
>889	Callee	pow
>890	Identifier	pow
>891	Identifier	dfW
>892	Identifier	dfW
>893	IdentifierDeclType	const double
>894	CompoundStatement	 
>895	BreakStatement	 
>896	Condition	 
>897	RelationalExpression	dfR2 < 0.0000000000001
>898	PrimaryExpression	0.0000000000001
>899	Identifier	dfR2
>900	IdentifierDeclStatement	 
>901	IdentifierDecl	dfR2 = dfRX * dfRX + dfRY * dfRY + dfSmoothing2
>902	AssignmentExpr	dfR2 = dfRX * dfRX + dfRY * dfRY + dfSmoothing2
>903	AdditiveExpression	dfRX * dfRX + dfRY * dfRY + dfSmoothing2
>904	AdditiveExpression	dfRY * dfRY + dfSmoothing2
>905	Identifier	dfSmoothing2
>906	MultiplicativeExpression	dfRY * dfRY
>907	Identifier	dfRY
>908	Identifier	dfRY
>909	MultiplicativeExpression	dfRX * dfRX
>910	Identifier	dfRX
>911	Identifier	dfRX
>912	Identifier	dfR2
>913	Identifier	dfR2
>914	IdentifierDeclType	const double
>915	IdentifierDeclStatement	 
>916	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>917	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>918	AdditiveExpression	padfY [ i ] - dfYPoint
>919	Identifier	dfYPoint
>920	ArrayIndexing	padfY [ i ]
>921	Identifier	i
>922	Identifier	padfY
>923	Identifier	dfRY
>924	Identifier	dfRY
>925	IdentifierDeclType	const double
>926	IdentifierDeclStatement	 
>927	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>928	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>929	AdditiveExpression	padfX [ i ] - dfXPoint
>930	Identifier	dfXPoint
>931	ArrayIndexing	padfX [ i ]
>932	Identifier	i
>933	Identifier	padfX
>934	Identifier	dfRX
>935	Identifier	dfRX
>936	IdentifierDeclType	const double
>937	IncDecOp	 
>938	IncDec	++
>939	Identifier	i
>940	Condition	 
>941	RelationalExpression	i < nPoints
>942	Identifier	nPoints
>943	Identifier	i
>944	ForInit	 
>945	AssignmentExpr	i = 0
>946	PrimaryExpression	0
>947	Identifier	i
>948	CompoundStatement	 
>949	IfStatement	if ( dfSmoothing2 > 0 )
>950	ElseStatement	else
>951	CompoundStatement	 
>952	ForStatement	for ( i = 0 ; i < nPoints ; i ++ )
>953	CompoundStatement	 
>954	IfStatement	if ( dfR2 < 0.0000000000001 )
>955	ElseStatement	else
>956	CompoundStatement	 
>957	ExpressionStatement	 
>958	AssignmentExpr	dfDenominator += dfInvR2
>959	Identifier	dfInvR2
>960	Identifier	dfDenominator
>961	ExpressionStatement	 
>962	AssignmentExpr	dfNominator += dfInvR2 * padfZ [ i ]
>963	MultiplicativeExpression	dfInvR2 * padfZ [ i ]
>964	ArrayIndexing	padfZ [ i ]
>965	Identifier	i
>966	Identifier	padfZ
>967	Identifier	dfInvR2
>968	Identifier	dfNominator
>969	IdentifierDeclStatement	 
>970	IdentifierDecl	dfInvR2 = 1.0 / dfR2
>971	AssignmentExpr	dfInvR2 = 1.0 / dfR2
>972	MultiplicativeExpression	1.0 / dfR2
>973	Identifier	dfR2
>974	PrimaryExpression	1.0
>975	Identifier	dfInvR2
>976	Identifier	dfInvR2
>977	IdentifierDeclType	double
>978	CompoundStatement	 
>979	BreakStatement	 
>980	Condition	 
>981	RelationalExpression	dfR2 < 0.0000000000001
>982	PrimaryExpression	0.0000000000001
>983	Identifier	dfR2
>984	IdentifierDeclStatement	 
>985	IdentifierDecl	dfR2 = dfRX * dfRX + dfRY * dfRY
>986	AssignmentExpr	dfR2 = dfRX * dfRX + dfRY * dfRY
>987	AdditiveExpression	dfRX * dfRX + dfRY * dfRY
>988	MultiplicativeExpression	dfRY * dfRY
>989	Identifier	dfRY
>990	Identifier	dfRY
>991	MultiplicativeExpression	dfRX * dfRX
>992	Identifier	dfRX
>993	Identifier	dfRX
>994	Identifier	dfR2
>995	Identifier	dfR2
>996	IdentifierDeclType	const double
>997	IdentifierDeclStatement	 
>998	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>999	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>1000	AdditiveExpression	padfY [ i ] - dfYPoint
>1001	Identifier	dfYPoint
>1002	ArrayIndexing	padfY [ i ]
>1003	Identifier	i
>1004	Identifier	padfY
>1005	Identifier	dfRY
>1006	Identifier	dfRY
>1007	IdentifierDeclType	const double
>1008	IdentifierDeclStatement	 
>1009	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>1010	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>1011	AdditiveExpression	padfX [ i ] - dfXPoint
>1012	Identifier	dfXPoint
>1013	ArrayIndexing	padfX [ i ]
>1014	Identifier	i
>1015	Identifier	padfX
>1016	Identifier	dfRX
>1017	Identifier	dfRX
>1018	IdentifierDeclType	const double
>1019	IncDecOp	 
>1020	IncDec	++
>1021	Identifier	i
>1022	Condition	 
>1023	RelationalExpression	i < nPoints
>1024	Identifier	nPoints
>1025	Identifier	i
>1026	ForInit	 
>1027	AssignmentExpr	i = 0
>1028	PrimaryExpression	0
>1029	Identifier	i
>1030	CompoundStatement	 
>1031	ForStatement	for ( i = 0 ; i < nPoints ; i ++ )
>1032	CompoundStatement	 
>1033	ExpressionStatement	 
>1034	AssignmentExpr	dfDenominator += dfInvR2
>1035	Identifier	dfInvR2
>1036	Identifier	dfDenominator
>1037	ExpressionStatement	 
>1038	AssignmentExpr	dfNominator += dfInvR2 * padfZ [ i ]
>1039	MultiplicativeExpression	dfInvR2 * padfZ [ i ]
>1040	ArrayIndexing	padfZ [ i ]
>1041	Identifier	i
>1042	Identifier	padfZ
>1043	Identifier	dfInvR2
>1044	Identifier	dfNominator
>1045	IdentifierDeclStatement	 
>1046	IdentifierDecl	dfInvR2 = 1.0 / dfR2
>1047	AssignmentExpr	dfInvR2 = 1.0 / dfR2
>1048	MultiplicativeExpression	1.0 / dfR2
>1049	Identifier	dfR2
>1050	PrimaryExpression	1.0
>1051	Identifier	dfInvR2
>1052	Identifier	dfInvR2
>1053	IdentifierDeclType	double
>1054	IdentifierDeclStatement	 
>1055	IdentifierDecl	dfR2 = dfRX * dfRX + dfRY * dfRY + dfSmoothing2
>1056	AssignmentExpr	dfR2 = dfRX * dfRX + dfRY * dfRY + dfSmoothing2
>1057	AdditiveExpression	dfRX * dfRX + dfRY * dfRY + dfSmoothing2
>1058	AdditiveExpression	dfRY * dfRY + dfSmoothing2
>1059	Identifier	dfSmoothing2
>1060	MultiplicativeExpression	dfRY * dfRY
>1061	Identifier	dfRY
>1062	Identifier	dfRY
>1063	MultiplicativeExpression	dfRX * dfRX
>1064	Identifier	dfRX
>1065	Identifier	dfRX
>1066	Identifier	dfR2
>1067	Identifier	dfR2
>1068	IdentifierDeclType	const double
>1069	IdentifierDeclStatement	 
>1070	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>1071	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>1072	AdditiveExpression	padfY [ i ] - dfYPoint
>1073	Identifier	dfYPoint
>1074	ArrayIndexing	padfY [ i ]
>1075	Identifier	i
>1076	Identifier	padfY
>1077	Identifier	dfRY
>1078	Identifier	dfRY
>1079	IdentifierDeclType	const double
>1080	IdentifierDeclStatement	 
>1081	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>1082	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>1083	AdditiveExpression	padfX [ i ] - dfXPoint
>1084	Identifier	dfXPoint
>1085	ArrayIndexing	padfX [ i ]
>1086	Identifier	i
>1087	Identifier	padfX
>1088	Identifier	dfRX
>1089	Identifier	dfRX
>1090	IdentifierDeclType	const double
>1091	IncDecOp	 
>1092	IncDec	++
>1093	Identifier	i
>1094	Condition	 
>1095	RelationalExpression	i < nPoints
>1096	Identifier	nPoints
>1097	Identifier	i
>1098	ForInit	 
>1099	AssignmentExpr	i = 0
>1100	PrimaryExpression	0
>1101	Identifier	i
>1102	Condition	 
>1103	RelationalExpression	dfSmoothing2 > 0
>1104	PrimaryExpression	0
>1105	Identifier	dfSmoothing2
>1106	Condition	 
>1107	Identifier	bPower2
>1108	IdentifierDeclStatement	 
>1109	IdentifierDecl	bPower2 = ( dfPowerDiv2 == 1.0 )
>1110	AssignmentExpr	bPower2 = ( dfPowerDiv2 == 1.0 )
>1111	EqualityExpression	dfPowerDiv2 == 1.0
>1112	PrimaryExpression	1.0
>1113	Identifier	dfPowerDiv2
>1114	Identifier	bPower2
>1115	Identifier	bPower2
>1116	IdentifierDeclType	int
>1117	IdentifierDeclStatement	 
>1118	IdentifierDecl	i = 0
>1119	AssignmentExpr	i = 0
>1120	PrimaryExpression	0
>1121	Identifier	i
>1122	Identifier	i
>1123	IdentifierDeclType	GUInt32
>1124	IdentifierDeclStatement	 
>1125	IdentifierDecl	dfDenominator = 0.0
>1126	AssignmentExpr	dfDenominator = 0.0
>1127	PrimaryExpression	0.0
>1128	Identifier	dfDenominator
>1129	Identifier	dfDenominator
>1130	IdentifierDeclType	double
>1131	IdentifierDecl	dfNominator = 0.0
>1132	AssignmentExpr	dfNominator = 0.0
>1133	PrimaryExpression	0.0
>1134	Identifier	dfNominator
>1135	Identifier	dfNominator
>1136	IdentifierDeclType	double
>1137	IdentifierDeclStatement	 
>1138	IdentifierDecl	dfSmoothing2 = dfSmoothing * dfSmoothing
>1139	AssignmentExpr	dfSmoothing2 = dfSmoothing * dfSmoothing
>1140	MultiplicativeExpression	dfSmoothing * dfSmoothing
>1141	Identifier	dfSmoothing
>1142	Identifier	dfSmoothing
>1143	Identifier	dfSmoothing2
>1144	Identifier	dfSmoothing2
>1145	IdentifierDeclType	const double
>1146	IdentifierDeclStatement	 
>1147	IdentifierDecl	dfSmoothing = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>1148	AssignmentExpr	dfSmoothing = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>1149	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>1150	Identifier	dfSmoothing
>1151	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>1152	Identifier	poOptions
>1153	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>1154	Identifier	dfSmoothing
>1155	Identifier	dfSmoothing
>1156	IdentifierDeclType	const double
>1157	IdentifierDeclStatement	 
>1158	IdentifierDecl	dfPowerDiv2 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower / 2
>1159	AssignmentExpr	dfPowerDiv2 = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower / 2
>1160	MultiplicativeExpression	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower / 2
>1161	PrimaryExpression	2
>1162	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower
>1163	Identifier	dfPower
>1164	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>1165	Identifier	poOptions
>1166	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>1167	Identifier	dfPowerDiv2
>1168	Identifier	dfPowerDiv2
>1169	IdentifierDeclType	const double
>1206	FunctionDef	GDALGridInverseDistanceToAPower2NoSmoothingNoSearchSSE (const void * poOptions , GUInt32 nPoints , const double * \
>1207	ParameterList	const void * poOptions , GUInt32 nPoints , const double * unused_padfX , const double * unused_padfY , const double * \
>1208	Parameter	 
>1209	Identifier	hExtraParamsIn
>1210	ParameterType	void *
>1211	Parameter	 
>1212	Identifier	pdfValue
>1213	ParameterType	double *
>1214	Parameter	 
>1215	Identifier	dfYPoint
>1216	ParameterType	double
>1217	Parameter	 
>1218	Identifier	dfXPoint
>1219	ParameterType	double
>1220	Parameter	 
>1221	Identifier	unused_padfZ
>1222	ParameterType	const double *
>1223	Parameter	 
>1224	Identifier	unused_padfY
>1225	ParameterType	const double *
>1226	Parameter	 
>1227	Identifier	unused_padfX
>1228	ParameterType	const double *
>1229	Parameter	 
>1230	Identifier	nPoints
>1231	ParameterType	GUInt32
>1232	Parameter	 
>1233	Identifier	poOptions
>1234	ParameterType	const void *
>1235	ReturnType	static CPLErr
>1236	CompoundStatement	 
>1237	ReturnStatement	 
>1238	Identifier	CE_None
>1239	IfStatement	if ( i != nPoints )
>1240	ElseStatement	else
>1241	IfStatement	if ( fDenominator == 0.0 )
>1242	ElseStatement	else
>1243	ExpressionStatement	 
>1244	AssignmentExpr	( * pdfValue ) = fNominator / fDenominator
>1245	MultiplicativeExpression	fNominator / fDenominator
>1246	Identifier	fDenominator
>1247	Identifier	fNominator
>1248	UnaryOp	* pdfValue
>1249	Identifier	pdfValue
>1250	UnaryOperator	*
>1251	CompoundStatement	 
>1252	ExpressionStatement	 
>1253	AssignmentExpr	( * pdfValue ) = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfNoDataValue
>1254	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfNoDataValue
>1255	Identifier	dfNoDataValue
>1256	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>1257	Identifier	poOptions
>1258	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>1259	UnaryOp	* pdfValue
>1260	Identifier	pdfValue
>1261	UnaryOperator	*
>1262	Condition	 
>1263	EqualityExpression	fDenominator == 0.0
>1264	PrimaryExpression	0.0
>1265	Identifier	fDenominator
>1266	CompoundStatement	 
>1267	ExpressionStatement	 
>1268	AssignmentExpr	( * pdfValue ) = pafZ [ i ]
>1269	ArrayIndexing	pafZ [ i ]
>1270	Identifier	i
>1271	Identifier	pafZ
>1272	UnaryOp	* pdfValue
>1273	Identifier	pdfValue
>1274	UnaryOperator	*
>1275	Condition	 
>1276	EqualityExpression	i != nPoints
>1277	Identifier	nPoints
>1278	Identifier	i
>1279	ForStatement	for ( ; i < nPoints ; i ++ )
>1280	CompoundStatement	 
>1281	IfStatement	if ( fR2 < 0.0000000000001 )
>1282	ElseStatement	else
>1283	CompoundStatement	 
>1284	ExpressionStatement	 
>1285	AssignmentExpr	fDenominator += fInvR2
>1286	Identifier	fInvR2
>1287	Identifier	fDenominator
>1288	ExpressionStatement	 
>1289	AssignmentExpr	fNominator += fInvR2 * pafZ [ i ]
>1290	MultiplicativeExpression	fInvR2 * pafZ [ i ]
>1291	ArrayIndexing	pafZ [ i ]
>1292	Identifier	i
>1293	Identifier	pafZ
>1294	Identifier	fInvR2
>1295	Identifier	fNominator
>1296	IdentifierDeclStatement	 
>1297	IdentifierDecl	fInvR2 = 1.0f / fR2
>1298	AssignmentExpr	fInvR2 = 1.0f / fR2
>1299	MultiplicativeExpression	1.0f / fR2
>1300	Identifier	fR2
>1301	PrimaryExpression	1.0f
>1302	Identifier	fInvR2
>1303	Identifier	fInvR2
>1304	IdentifierDeclType	const float
>1305	CompoundStatement	 
>1306	BreakStatement	 
>1307	Condition	 
>1308	RelationalExpression	fR2 < 0.0000000000001
>1309	PrimaryExpression	0.0000000000001
>1310	Identifier	fR2
>1311	IdentifierDeclStatement	 
>1312	IdentifierDecl	fR2 = fRX * fRX + fRY * fRY
>1313	AssignmentExpr	fR2 = fRX * fRX + fRY * fRY
>1314	AdditiveExpression	fRX * fRX + fRY * fRY
>1315	MultiplicativeExpression	fRY * fRY
>1316	Identifier	fRY
>1317	Identifier	fRY
>1318	MultiplicativeExpression	fRX * fRX
>1319	Identifier	fRX
>1320	Identifier	fRX
>1321	Identifier	fR2
>1322	Identifier	fR2
>1323	IdentifierDeclType	const float
>1324	IdentifierDeclStatement	 
>1325	IdentifierDecl	fRY = pafY [ i ] - fYPoint
>1326	AssignmentExpr	fRY = pafY [ i ] - fYPoint
>1327	AdditiveExpression	pafY [ i ] - fYPoint
>1328	Identifier	fYPoint
>1329	ArrayIndexing	pafY [ i ]
>1330	Identifier	i
>1331	Identifier	pafY
>1332	Identifier	fRY
>1333	Identifier	fRY
>1334	IdentifierDeclType	const float
>1335	IdentifierDeclStatement	 
>1336	IdentifierDecl	fRX = pafX [ i ] - fXPoint
>1337	AssignmentExpr	fRX = pafX [ i ] - fXPoint
>1338	AdditiveExpression	pafX [ i ] - fXPoint
>1339	Identifier	fXPoint
>1340	ArrayIndexing	pafX [ i ]
>1341	Identifier	i
>1342	Identifier	pafX
>1343	Identifier	fRX
>1344	Identifier	fRX
>1345	IdentifierDeclType	const float
>1346	IncDecOp	 
>1347	IncDec	++
>1348	Identifier	i
>1349	Condition	 
>1350	RelationalExpression	i < nPoints
>1351	Identifier	nPoints
>1352	Identifier	i
>1353	IdentifierDeclStatement	 
>1354	IdentifierDecl	fDenominator = afDenominator [ 0 ] + afDenominator [ 1 ] + afDenominator [ 2 ] + afDenominator [ 3 ]
>1355	AssignmentExpr	fDenominator = afDenominator [ 0 ] + afDenominator [ 1 ] + afDenominator [ 2 ] + afDenominator [ 3 ]
>1356	AdditiveExpression	afDenominator [ 0 ] + afDenominator [ 1 ] + afDenominator [ 2 ] + afDenominator [ 3 ]
>1357	AdditiveExpression	afDenominator [ 1 ] + afDenominator [ 2 ] + afDenominator [ 3 ]
>1358	AdditiveExpression	afDenominator [ 2 ] + afDenominator [ 3 ]
>1359	ArrayIndexing	afDenominator [ 3 ]
>1360	PrimaryExpression	3
>1361	Identifier	afDenominator
>1362	ArrayIndexing	afDenominator [ 2 ]
>1363	PrimaryExpression	2
>1364	Identifier	afDenominator
>1365	ArrayIndexing	afDenominator [ 1 ]
>1366	PrimaryExpression	1
>1367	Identifier	afDenominator
>1368	ArrayIndexing	afDenominator [ 0 ]
>1369	PrimaryExpression	0
>1370	Identifier	afDenominator
>1371	Identifier	fDenominator
>1372	Identifier	fDenominator
>1373	IdentifierDeclType	float
>1374	IdentifierDeclStatement	 
>1375	IdentifierDecl	fNominator = afNominator [ 0 ] + afNominator [ 1 ] + afNominator [ 2 ] + afNominator [ 3 ]
>1376	AssignmentExpr	fNominator = afNominator [ 0 ] + afNominator [ 1 ] + afNominator [ 2 ] + afNominator [ 3 ]
>1377	AdditiveExpression	afNominator [ 0 ] + afNominator [ 1 ] + afNominator [ 2 ] + afNominator [ 3 ]
>1378	AdditiveExpression	afNominator [ 1 ] + afNominator [ 2 ] + afNominator [ 3 ]
>1379	AdditiveExpression	afNominator [ 2 ] + afNominator [ 3 ]
>1380	ArrayIndexing	afNominator [ 3 ]
>1381	PrimaryExpression	3
>1382	Identifier	afNominator
>1383	ArrayIndexing	afNominator [ 2 ]
>1384	PrimaryExpression	2
>1385	Identifier	afNominator
>1386	ArrayIndexing	afNominator [ 1 ]
>1387	PrimaryExpression	1
>1388	Identifier	afNominator
>1389	ArrayIndexing	afNominator [ 0 ]
>1390	PrimaryExpression	0
>1391	Identifier	afNominator
>1392	Identifier	fNominator
>1393	Identifier	fNominator
>1394	IdentifierDeclType	float
>1395	ExpressionStatement	 
>1396	CallExpression	_mm_storeu_ps ( afDenominator , xmm_denominator )
>1397	ArgumentList	afDenominator
>1398	Argument	xmm_denominator
>1399	Identifier	xmm_denominator
>1400	Argument	afDenominator
>1401	Identifier	afDenominator
>1402	Callee	_mm_storeu_ps
>1403	Identifier	_mm_storeu_ps
>1404	ExpressionStatement	 
>1405	CallExpression	_mm_storeu_ps ( afNominator , xmm_nominator )
>1406	ArgumentList	afNominator
>1407	Argument	xmm_nominator
>1408	Identifier	xmm_nominator
>1409	Argument	afNominator
>1410	Identifier	afNominator
>1411	Callee	_mm_storeu_ps
>1412	Identifier	_mm_storeu_ps
>1413	IdentifierDeclStatement	 
>1414	IdentifierDecl	afDenominator [ 4 ]
>1415	PrimaryExpression	4
>1416	Identifier	afDenominator
>1417	IdentifierDeclType	float [ 4 ]
>1418	IdentifierDecl	afNominator [ 4 ]
>1419	PrimaryExpression	4
>1420	Identifier	afNominator
>1421	IdentifierDeclType	float [ 4 ]
>1422	IfStatement	if ( mask )
>1423	CompoundStatement	 
>1424	ForStatement	for ( int j = 0 ; j < LOOP_SIZE ; j ++ )
>1425	CompoundStatement	 
>1426	IfStatement	if ( mask & ( 1 << j ) )
>1427	CompoundStatement	 
>1428	ReturnStatement	 
>1429	Identifier	CE_None
>1430	ExpressionStatement	 
>1431	AssignmentExpr	( * pdfValue ) = ( pafZ ) [ i + j ]
>1432	ArrayIndexing	( pafZ ) [ i + j ]
>1433	AdditiveExpression	i + j
>1434	Identifier	j
>1435	Identifier	i
>1436	Identifier	pafZ
>1437	UnaryOp	* pdfValue
>1438	Identifier	pdfValue
>1439	UnaryOperator	*
>1440	Condition	 
>1441	BitAndExpression	mask & ( 1 << j )
>1442	ShiftExpression	1 << j
>1443	Identifier	j
>1444	PrimaryExpression	1
>1445	Identifier	mask
>1446	IncDecOp	 
>1447	IncDec	++
>1448	Identifier	j
>1449	Condition	 
>1450	RelationalExpression	j < LOOP_SIZE
>1451	Identifier	LOOP_SIZE
>1452	Identifier	j
>1453	ForInit	 
>1454	IdentifierDeclStatement	int j = 0 ;
>1455	IdentifierDecl	j = 0
>1456	AssignmentExpr	j = 0
>1457	PrimaryExpression	0
>1458	Identifier	j
>1459	Identifier	j
>1460	IdentifierDeclType	int
>1461	Condition	 
>1462	Identifier	mask
>1463	ForStatement	for ( i = 0 ; i < nPointsRound ; i += LOOP_SIZE )
>1464	CompoundStatement	 
>1465	IfStatement	if ( mask )
>1466	BreakStatement	 
>1467	Condition	 
>1468	Identifier	mask
>1469	ExpressionStatement	 
>1470	AssignmentExpr	mask = _mm_movemask_ps ( _mm_cmplt_ps ( xmm_r2 , xmm_small ) ) | ( _mm_movemask_ps ( _mm_cmplt_ps ( xmm_\
>1471	InclusiveOrExpression	_mm_movemask_ps ( _mm_cmplt_ps ( xmm_r2 , xmm_small ) ) | ( _mm_movemask_ps ( _mm_cmplt_ps ( xmm_r2_4 , \
>1472	ShiftExpression	_mm_movemask_ps ( _mm_cmplt_ps ( xmm_r2_4 , xmm_small ) ) << 4
>1473	PrimaryExpression	4
>1474	CallExpression	_mm_movemask_ps ( _mm_cmplt_ps ( xmm_r2_4 , xmm_small ) )
>1475	ArgumentList	_mm_cmplt_ps ( xmm_r2_4 , xmm_small )
>1476	Argument	_mm_cmplt_ps ( xmm_r2_4 , xmm_small )
>1477	CallExpression	_mm_cmplt_ps ( xmm_r2_4 , xmm_small )
>1478	ArgumentList	xmm_r2_4
>1479	Argument	xmm_small
>1480	Identifier	xmm_small
>1481	Argument	xmm_r2_4
>1482	Identifier	xmm_r2_4
>1483	Callee	_mm_cmplt_ps
>1484	Identifier	_mm_cmplt_ps
>1485	Callee	_mm_movemask_ps
>1486	Identifier	_mm_movemask_ps
>1487	CallExpression	_mm_movemask_ps ( _mm_cmplt_ps ( xmm_r2 , xmm_small ) )
>1488	ArgumentList	_mm_cmplt_ps ( xmm_r2 , xmm_small )
>1489	Argument	_mm_cmplt_ps ( xmm_r2 , xmm_small )
>1490	CallExpression	_mm_cmplt_ps ( xmm_r2 , xmm_small )
>1491	ArgumentList	xmm_r2
>1492	Argument	xmm_small
>1493	Identifier	xmm_small
>1494	Argument	xmm_r2
>1495	Identifier	xmm_r2
>1496	Callee	_mm_cmplt_ps
>1497	Identifier	_mm_cmplt_ps
>1498	Callee	_mm_movemask_ps
>1499	Identifier	_mm_movemask_ps
>1500	Identifier	mask
>1501	ExpressionStatement	 
>1502	AssignmentExpr	xmm_denominator = _mm_add_ps ( xmm_denominator , xmm_invr2_4 )
>1503	CallExpression	_mm_add_ps ( xmm_denominator , xmm_invr2_4 )
>1504	ArgumentList	xmm_denominator
>1505	Argument	xmm_invr2_4
>1506	Identifier	xmm_invr2_4
>1507	Argument	xmm_denominator
>1508	Identifier	xmm_denominator
>1509	Callee	_mm_add_ps
>1510	Identifier	_mm_add_ps
>1511	Identifier	xmm_denominator
>1512	ExpressionStatement	 
>1513	AssignmentExpr	xmm_denominator = _mm_add_ps ( xmm_denominator , xmm_invr2 )
>1514	CallExpression	_mm_add_ps ( xmm_denominator , xmm_invr2 )
>1515	ArgumentList	xmm_denominator
>1516	Argument	xmm_invr2
>1517	Identifier	xmm_invr2
>1518	Argument	xmm_denominator
>1519	Identifier	xmm_denominator
>1520	Callee	_mm_add_ps
>1521	Identifier	_mm_add_ps
>1522	Identifier	xmm_denominator
>1523	ExpressionStatement	 
>1524	AssignmentExpr	xmm_nominator = _mm_add_ps ( xmm_nominator , _mm_mul_ps ( xmm_invr2_4 , _mm_load_ps ( pafZ + i + 4 ) ) )
>1525	CallExpression	_mm_add_ps ( xmm_nominator , _mm_mul_ps ( xmm_invr2_4 , _mm_load_ps ( pafZ + i + 4 ) ) )
>1526	ArgumentList	xmm_nominator
>1527	Argument	_mm_mul_ps ( xmm_invr2_4 , _mm_load_ps ( pafZ + i + 4 ) )
>1528	CallExpression	_mm_mul_ps ( xmm_invr2_4 , _mm_load_ps ( pafZ + i + 4 ) )
>1529	ArgumentList	xmm_invr2_4
>1530	Argument	_mm_load_ps ( pafZ + i + 4 )
>1531	CallExpression	_mm_load_ps ( pafZ + i + 4 )
>1532	ArgumentList	pafZ + i + 4
>1533	Argument	pafZ + i + 4
>1534	AdditiveExpression	pafZ + i + 4
>1535	AdditiveExpression	i + 4
>1536	PrimaryExpression	4
>1537	Identifier	i
>1538	Identifier	pafZ
>1539	Callee	_mm_load_ps
>1540	Identifier	_mm_load_ps
>1541	Argument	xmm_invr2_4
>1542	Identifier	xmm_invr2_4
>1543	Callee	_mm_mul_ps
>1544	Identifier	_mm_mul_ps
>1545	Argument	xmm_nominator
>1546	Identifier	xmm_nominator
>1547	Callee	_mm_add_ps
>1548	Identifier	_mm_add_ps
>1549	Identifier	xmm_nominator
>1550	ExpressionStatement	 
>1551	AssignmentExpr	xmm_nominator = _mm_add_ps ( xmm_nominator , _mm_mul_ps ( xmm_invr2 , _mm_load_ps ( pafZ + i ) ) )
>1552	CallExpression	_mm_add_ps ( xmm_nominator , _mm_mul_ps ( xmm_invr2 , _mm_load_ps ( pafZ + i ) ) )
>1553	ArgumentList	xmm_nominator
>1554	Argument	_mm_mul_ps ( xmm_invr2 , _mm_load_ps ( pafZ + i ) )
>1555	CallExpression	_mm_mul_ps ( xmm_invr2 , _mm_load_ps ( pafZ + i ) )
>1556	ArgumentList	xmm_invr2
>1557	Argument	_mm_load_ps ( pafZ + i )
>1558	CallExpression	_mm_load_ps ( pafZ + i )
>1559	ArgumentList	pafZ + i
>1560	Argument	pafZ + i
>1561	AdditiveExpression	pafZ + i
>1562	Identifier	i
>1563	Identifier	pafZ
>1564	Callee	_mm_load_ps
>1565	Identifier	_mm_load_ps
>1566	Argument	xmm_invr2
>1567	Identifier	xmm_invr2
>1568	Callee	_mm_mul_ps
>1569	Identifier	_mm_mul_ps
>1570	Argument	xmm_nominator
>1571	Identifier	xmm_nominator
>1572	Callee	_mm_add_ps
>1573	Identifier	_mm_add_ps
>1574	Identifier	xmm_nominator
>1575	IdentifierDeclStatement	 
>1576	IdentifierDecl	xmm_invr2_4 = _mm_rcp_ps ( xmm_r2_4 )
>1577	AssignmentExpr	xmm_invr2_4 = _mm_rcp_ps ( xmm_r2_4 )
>1578	CallExpression	_mm_rcp_ps ( xmm_r2_4 )
>1579	ArgumentList	xmm_r2_4
>1580	Argument	xmm_r2_4
>1581	Identifier	xmm_r2_4
>1582	Callee	_mm_rcp_ps
>1583	Identifier	_mm_rcp_ps
>1584	Identifier	xmm_invr2_4
>1585	Identifier	xmm_invr2_4
>1586	IdentifierDeclType	__m128
>1587	IdentifierDeclStatement	 
>1588	IdentifierDecl	xmm_invr2 = _mm_rcp_ps ( xmm_r2 )
>1589	AssignmentExpr	xmm_invr2 = _mm_rcp_ps ( xmm_r2 )
>1590	CallExpression	_mm_rcp_ps ( xmm_r2 )
>1591	ArgumentList	xmm_r2
>1592	Argument	xmm_r2
>1593	Identifier	xmm_r2
>1594	Callee	_mm_rcp_ps
>1595	Identifier	_mm_rcp_ps
>1596	Identifier	xmm_invr2
>1597	Identifier	xmm_invr2
>1598	IdentifierDeclType	__m128
>1599	IdentifierDeclStatement	 
>1600	IdentifierDecl	xmm_r2_4 = _mm_add_ps ( _mm_mul_ps ( xmm_rx_4 , xmm_rx_4 ) , _mm_mul_ps ( xmm_ry_4 , xmm_ry_4 ) )
>1601	AssignmentExpr	xmm_r2_4 = _mm_add_ps ( _mm_mul_ps ( xmm_rx_4 , xmm_rx_4 ) , _mm_mul_ps ( xmm_ry_4 , xmm_ry_4 ) )
>1602	CallExpression	_mm_add_ps ( _mm_mul_ps ( xmm_rx_4 , xmm_rx_4 ) , _mm_mul_ps ( xmm_ry_4 , xmm_ry_4 ) )
>1603	ArgumentList	_mm_mul_ps ( xmm_rx_4 , xmm_rx_4 )
>1604	Argument	_mm_mul_ps ( xmm_ry_4 , xmm_ry_4 )
>1605	CallExpression	_mm_mul_ps ( xmm_ry_4 , xmm_ry_4 )
>1606	ArgumentList	xmm_ry_4
>1607	Argument	xmm_ry_4
>1608	Identifier	xmm_ry_4
>1609	Argument	xmm_ry_4
>1610	Identifier	xmm_ry_4
>1611	Callee	_mm_mul_ps
>1612	Identifier	_mm_mul_ps
>1613	Argument	_mm_mul_ps ( xmm_rx_4 , xmm_rx_4 )
>1614	CallExpression	_mm_mul_ps ( xmm_rx_4 , xmm_rx_4 )
>1615	ArgumentList	xmm_rx_4
>1616	Argument	xmm_rx_4
>1617	Identifier	xmm_rx_4
>1618	Argument	xmm_rx_4
>1619	Identifier	xmm_rx_4
>1620	Callee	_mm_mul_ps
>1621	Identifier	_mm_mul_ps
>1622	Callee	_mm_add_ps
>1623	Identifier	_mm_add_ps
>1624	Identifier	xmm_r2_4
>1625	Identifier	xmm_r2_4
>1626	IdentifierDeclType	__m128
>1627	IdentifierDeclStatement	 
>1628	IdentifierDecl	xmm_r2 = _mm_add_ps ( _mm_mul_ps ( xmm_rx , xmm_rx ) , _mm_mul_ps ( xmm_ry , xmm_ry ) )
>1629	AssignmentExpr	xmm_r2 = _mm_add_ps ( _mm_mul_ps ( xmm_rx , xmm_rx ) , _mm_mul_ps ( xmm_ry , xmm_ry ) )
>1630	CallExpression	_mm_add_ps ( _mm_mul_ps ( xmm_rx , xmm_rx ) , _mm_mul_ps ( xmm_ry , xmm_ry ) )
>1631	ArgumentList	_mm_mul_ps ( xmm_rx , xmm_rx )
>1632	Argument	_mm_mul_ps ( xmm_ry , xmm_ry )
>1633	CallExpression	_mm_mul_ps ( xmm_ry , xmm_ry )
>1634	ArgumentList	xmm_ry
>1635	Argument	xmm_ry
>1636	Identifier	xmm_ry
>1637	Argument	xmm_ry
>1638	Identifier	xmm_ry
>1639	Callee	_mm_mul_ps
>1640	Identifier	_mm_mul_ps
>1641	Argument	_mm_mul_ps ( xmm_rx , xmm_rx )
>1642	CallExpression	_mm_mul_ps ( xmm_rx , xmm_rx )
>1643	ArgumentList	xmm_rx
>1644	Argument	xmm_rx
>1645	Identifier	xmm_rx
>1646	Argument	xmm_rx
>1647	Identifier	xmm_rx
>1648	Callee	_mm_mul_ps
>1649	Identifier	_mm_mul_ps
>1650	Callee	_mm_add_ps
>1651	Identifier	_mm_add_ps
>1652	Identifier	xmm_r2
>1653	Identifier	xmm_r2
>1654	IdentifierDeclType	__m128
>1655	IdentifierDeclStatement	 
>1656	IdentifierDecl	xmm_ry_4 = _mm_sub_ps ( _mm_load_ps ( pafY + i + 4 ) , xmm_y )
>1657	AssignmentExpr	xmm_ry_4 = _mm_sub_ps ( _mm_load_ps ( pafY + i + 4 ) , xmm_y )
>1658	CallExpression	_mm_sub_ps ( _mm_load_ps ( pafY + i + 4 ) , xmm_y )
>1659	ArgumentList	_mm_load_ps ( pafY + i + 4 )
>1660	Argument	xmm_y
>1661	Identifier	xmm_y
>1662	Argument	_mm_load_ps ( pafY + i + 4 )
>1663	CallExpression	_mm_load_ps ( pafY + i + 4 )
>1664	ArgumentList	pafY + i + 4
>1665	Argument	pafY + i + 4
>1666	AdditiveExpression	pafY + i + 4
>1667	AdditiveExpression	i + 4
>1668	PrimaryExpression	4
>1669	Identifier	i
>1670	Identifier	pafY
>1671	Callee	_mm_load_ps
>1672	Identifier	_mm_load_ps
>1673	Callee	_mm_sub_ps
>1674	Identifier	_mm_sub_ps
>1675	Identifier	xmm_ry_4
>1676	Identifier	xmm_ry_4
>1677	IdentifierDeclType	__m128
>1678	IdentifierDeclStatement	 
>1679	IdentifierDecl	xmm_ry = _mm_sub_ps ( _mm_load_ps ( pafY + i ) , xmm_y )
>1680	AssignmentExpr	xmm_ry = _mm_sub_ps ( _mm_load_ps ( pafY + i ) , xmm_y )
>1681	CallExpression	_mm_sub_ps ( _mm_load_ps ( pafY + i ) , xmm_y )
>1682	ArgumentList	_mm_load_ps ( pafY + i )
>1683	Argument	xmm_y
>1684	Identifier	xmm_y
>1685	Argument	_mm_load_ps ( pafY + i )
>1686	CallExpression	_mm_load_ps ( pafY + i )
>1687	ArgumentList	pafY + i
>1688	Argument	pafY + i
>1689	AdditiveExpression	pafY + i
>1690	Identifier	i
>1691	Identifier	pafY
>1692	Callee	_mm_load_ps
>1693	Identifier	_mm_load_ps
>1694	Callee	_mm_sub_ps
>1695	Identifier	_mm_sub_ps
>1696	Identifier	xmm_ry
>1697	Identifier	xmm_ry
>1698	IdentifierDeclType	__m128
>1699	IdentifierDeclStatement	 
>1700	IdentifierDecl	xmm_rx_4 = _mm_sub_ps ( _mm_load_ps ( pafX + i + 4 ) , xmm_x )
>1701	AssignmentExpr	xmm_rx_4 = _mm_sub_ps ( _mm_load_ps ( pafX + i + 4 ) , xmm_x )
>1702	CallExpression	_mm_sub_ps ( _mm_load_ps ( pafX + i + 4 ) , xmm_x )
>1703	ArgumentList	_mm_load_ps ( pafX + i + 4 )
>1704	Argument	xmm_x
>1705	Identifier	xmm_x
>1706	Argument	_mm_load_ps ( pafX + i + 4 )
>1707	CallExpression	_mm_load_ps ( pafX + i + 4 )
>1708	ArgumentList	pafX + i + 4
>1709	Argument	pafX + i + 4
>1710	AdditiveExpression	pafX + i + 4
>1711	AdditiveExpression	i + 4
>1712	PrimaryExpression	4
>1713	Identifier	i
>1714	Identifier	pafX
>1715	Callee	_mm_load_ps
>1716	Identifier	_mm_load_ps
>1717	Callee	_mm_sub_ps
>1718	Identifier	_mm_sub_ps
>1719	Identifier	xmm_rx_4
>1720	Identifier	xmm_rx_4
>1721	IdentifierDeclType	__m128
>1722	IdentifierDeclStatement	 
>1723	IdentifierDecl	xmm_rx = _mm_sub_ps ( _mm_load_ps ( pafX + i ) , xmm_x )
>1724	AssignmentExpr	xmm_rx = _mm_sub_ps ( _mm_load_ps ( pafX + i ) , xmm_x )
>1725	CallExpression	_mm_sub_ps ( _mm_load_ps ( pafX + i ) , xmm_x )
>1726	ArgumentList	_mm_load_ps ( pafX + i )
>1727	Argument	xmm_x
>1728	Identifier	xmm_x
>1729	Argument	_mm_load_ps ( pafX + i )
>1730	CallExpression	_mm_load_ps ( pafX + i )
>1731	ArgumentList	pafX + i
>1732	Argument	pafX + i
>1733	AdditiveExpression	pafX + i
>1734	Identifier	i
>1735	Identifier	pafX
>1736	Callee	_mm_load_ps
>1737	Identifier	_mm_load_ps
>1738	Callee	_mm_sub_ps
>1739	Identifier	_mm_sub_ps
>1740	Identifier	xmm_rx
>1741	Identifier	xmm_rx
>1742	IdentifierDeclType	__m128
>1743	AssignmentExpr	 
>1744	Identifier	LOOP_SIZE
>1745	Identifier	i
>1746	Condition	 
>1747	RelationalExpression	i < nPointsRound
>1748	Identifier	nPointsRound
>1749	Identifier	i
>1750	ForInit	 
>1751	AssignmentExpr	i = 0
>1752	PrimaryExpression	0
>1753	Identifier	i
>1754	IdentifierDeclStatement	 
>1755	IdentifierDecl	nPointsRound = ( nPoints / LOOP_SIZE ) * LOOP_SIZE
>1756	AssignmentExpr	nPointsRound = ( nPoints / LOOP_SIZE ) * LOOP_SIZE
>1757	MultiplicativeExpression	( nPoints / LOOP_SIZE ) * LOOP_SIZE
>1758	Identifier	LOOP_SIZE
>1759	MultiplicativeExpression	nPoints / LOOP_SIZE
>1760	Identifier	LOOP_SIZE
>1761	Identifier	nPoints
>1762	Identifier	nPointsRound
>1763	Identifier	nPointsRound
>1764	IdentifierDeclType	size_t
>1765	Statement	 
>1766	Statement	 
>1767	Statement	 
>1768	IdentifierDeclStatement	 
>1769	IdentifierDecl	mask = 0
>1770	AssignmentExpr	mask = 0
>1771	PrimaryExpression	0
>1772	Identifier	mask
>1773	Identifier	mask
>1774	IdentifierDeclType	int
>1775	IdentifierDeclStatement	 
>1776	IdentifierDecl	xmm_denominator = _mm_setzero_ps ( )
>1777	AssignmentExpr	xmm_denominator = _mm_setzero_ps ( )
>1778	CallExpression	_mm_setzero_ps ( )
>1779	ArgumentList	 
>1780	Callee	_mm_setzero_ps
>1781	Identifier	_mm_setzero_ps
>1782	Identifier	xmm_denominator
>1783	Identifier	xmm_denominator
>1784	IdentifierDeclType	__m128
>1785	IdentifierDeclStatement	 
>1786	IdentifierDecl	xmm_nominator = _mm_setzero_ps ( )
>1787	AssignmentExpr	xmm_nominator = _mm_setzero_ps ( )
>1788	CallExpression	_mm_setzero_ps ( )
>1789	ArgumentList	 
>1790	Callee	_mm_setzero_ps
>1791	Identifier	_mm_setzero_ps
>1792	Identifier	xmm_nominator
>1793	Identifier	xmm_nominator
>1794	IdentifierDeclType	__m128
>1795	IdentifierDeclStatement	 
>1796	IdentifierDecl	xmm_y = _mm_load1_ps ( ( float * ) & fYPoint )
>1797	AssignmentExpr	xmm_y = _mm_load1_ps ( ( float * ) & fYPoint )
>1798	CallExpression	_mm_load1_ps ( ( float * ) & fYPoint )
>1799	ArgumentList	( float * ) & fYPoint
>1800	Argument	( float * ) & fYPoint
>1801	CastExpression	( float * ) & fYPoint
>1802	UnaryOp	& fYPoint
>1803	Identifier	fYPoint
>1804	UnaryOperator	&
>1805	CastTarget	float *
>1806	Callee	_mm_load1_ps
>1807	Identifier	_mm_load1_ps
>1808	Identifier	xmm_y
>1809	Identifier	xmm_y
>1810	IdentifierDeclType	const __m128
>1811	IdentifierDeclStatement	 
>1812	IdentifierDecl	xmm_x = _mm_load1_ps ( ( float * ) & fXPoint )
>1813	AssignmentExpr	xmm_x = _mm_load1_ps ( ( float * ) & fXPoint )
>1814	CallExpression	_mm_load1_ps ( ( float * ) & fXPoint )
>1815	ArgumentList	( float * ) & fXPoint
>1816	Argument	( float * ) & fXPoint
>1817	CastExpression	( float * ) & fXPoint
>1818	UnaryOp	& fXPoint
>1819	Identifier	fXPoint
>1820	UnaryOperator	&
>1821	CastTarget	float *
>1822	Callee	_mm_load1_ps
>1823	Identifier	_mm_load1_ps
>1824	Identifier	xmm_x
>1825	Identifier	xmm_x
>1826	IdentifierDeclType	const __m128
>1827	IdentifierDeclStatement	 
>1828	IdentifierDecl	xmm_small = _mm_load1_ps ( ( float * ) & fEpsilon )
>1829	AssignmentExpr	xmm_small = _mm_load1_ps ( ( float * ) & fEpsilon )
>1830	CallExpression	_mm_load1_ps ( ( float * ) & fEpsilon )
>1831	ArgumentList	( float * ) & fEpsilon
>1832	Argument	( float * ) & fEpsilon
>1833	CastExpression	( float * ) & fEpsilon
>1834	UnaryOp	& fEpsilon
>1835	Identifier	fEpsilon
>1836	UnaryOperator	&
>1837	CastTarget	float *
>1838	Callee	_mm_load1_ps
>1839	Identifier	_mm_load1_ps
>1840	Identifier	xmm_small
>1841	Identifier	xmm_small
>1842	IdentifierDeclType	const __m128
>1843	IdentifierDeclStatement	 
>1844	IdentifierDecl	fYPoint = ( float ) dfYPoint
>1845	AssignmentExpr	fYPoint = ( float ) dfYPoint
>1846	CastExpression	( float ) dfYPoint
>1847	Identifier	dfYPoint
>1848	CastTarget	float
>1849	Identifier	fYPoint
>1850	Identifier	fYPoint
>1851	IdentifierDeclType	const float
>1852	IdentifierDeclStatement	 
>1853	IdentifierDecl	fXPoint = ( float ) dfXPoint
>1854	AssignmentExpr	fXPoint = ( float ) dfXPoint
>1855	CastExpression	( float ) dfXPoint
>1856	Identifier	dfXPoint
>1857	CastTarget	float
>1858	Identifier	fXPoint
>1859	Identifier	fXPoint
>1860	IdentifierDeclType	const float
>1861	IdentifierDeclStatement	 
>1862	IdentifierDecl	fEpsilon = 0.0000000000001f
>1863	AssignmentExpr	fEpsilon = 0.0000000000001f
>1864	PrimaryExpression	0.0000000000001f
>1865	Identifier	fEpsilon
>1866	Identifier	fEpsilon
>1867	IdentifierDeclType	const float
>1868	IdentifierDeclStatement	 
>1869	IdentifierDecl	* pafZ = psExtraParams -> pafZ
>1870	AssignmentExpr	* pafZ = psExtraParams -> pafZ
>1871	PtrMemberAccess	psExtraParams -> pafZ
>1872	Identifier	pafZ
>1873	Identifier	psExtraParams
>1874	Identifier	pafZ
>1875	Identifier	pafZ
>1876	IdentifierDeclType	const float *
>1877	IdentifierDeclStatement	 
>1878	IdentifierDecl	* pafY = psExtraParams -> pafY
>1879	AssignmentExpr	* pafY = psExtraParams -> pafY
>1880	PtrMemberAccess	psExtraParams -> pafY
>1881	Identifier	pafY
>1882	Identifier	psExtraParams
>1883	Identifier	pafY
>1884	Identifier	pafY
>1885	IdentifierDeclType	const float *
>1886	IdentifierDeclStatement	 
>1887	IdentifierDecl	* pafX = psExtraParams -> pafX
>1888	AssignmentExpr	* pafX = psExtraParams -> pafX
>1889	PtrMemberAccess	psExtraParams -> pafX
>1890	Identifier	pafX
>1891	Identifier	psExtraParams
>1892	Identifier	pafX
>1893	Identifier	pafX
>1894	IdentifierDeclType	const float *
>1895	IdentifierDeclStatement	 
>1896	IdentifierDecl	* psExtraParams = ( GDALGridExtraParameters * ) hExtraParamsIn
>1897	AssignmentExpr	* psExtraParams = ( GDALGridExtraParameters * ) hExtraParamsIn
>1898	CastExpression	( GDALGridExtraParameters * ) hExtraParamsIn
>1899	Identifier	hExtraParamsIn
>1900	CastTarget	GDALGridExtraParameters *
>1901	Identifier	psExtraParams
>1902	Identifier	psExtraParams
>1903	IdentifierDeclType	GDALGridExtraParameters *
>1904	IdentifierDeclStatement	 
>1905	IdentifierDecl	i = 0
>1906	AssignmentExpr	i = 0
>1907	PrimaryExpression	0
>1908	Identifier	i
>1909	Identifier	i
>1910	IdentifierDeclType	size_t
>1983	FunctionDef	GDALGridMovingAverage (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , \
>1984	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>1985	Parameter	 
>1986	Identifier	hExtraParamsIn
>1987	ParameterType	void *
>1988	Parameter	 
>1989	Identifier	pdfValue
>1990	ParameterType	double *
>1991	Parameter	 
>1992	Identifier	dfYPoint
>1993	ParameterType	double
>1994	Parameter	 
>1995	Identifier	dfXPoint
>1996	ParameterType	double
>1997	Parameter	 
>1998	Identifier	padfZ
>1999	ParameterType	const double *
>2000	Parameter	 
>2001	Identifier	padfY
>2002	ParameterType	const double *
>2003	Parameter	 
>2004	Identifier	padfX
>2005	ParameterType	const double *
>2006	Parameter	 
>2007	Identifier	nPoints
>2008	ParameterType	GUInt32
>2009	Parameter	 
>2010	Identifier	poOptions
>2011	ParameterType	const void *
>2012	ReturnType	CPLErr
>2013	CompoundStatement	 
>2014	ReturnStatement	 
>2015	Identifier	CE_None
>2016	IfStatement	if ( n < ( ( GDALGridMovingAverageOptions * ) poOptions ) -> nMinPoints || n == 0 )
>2017	ElseStatement	else
>2018	ExpressionStatement	 
>2019	AssignmentExpr	( * pdfValue ) = dfAccumulator / n
>2020	MultiplicativeExpression	dfAccumulator / n
>2021	Identifier	n
>2022	Identifier	dfAccumulator
>2023	UnaryOp	* pdfValue
>2024	Identifier	pdfValue
>2025	UnaryOperator	*
>2026	CompoundStatement	 
>2027	ExpressionStatement	 
>2028	AssignmentExpr	( * pdfValue ) = ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfNoDataValue
>2029	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfNoDataValue
>2030	Identifier	dfNoDataValue
>2031	CastExpression	( GDALGridMovingAverageOptions * ) poOptions
>2032	Identifier	poOptions
>2033	CastTarget	GDALGridMovingAverageOptions *
>2034	UnaryOp	* pdfValue
>2035	Identifier	pdfValue
>2036	UnaryOperator	*
>2037	Condition	 
>2038	OrExpression	n < ( ( GDALGridMovingAverageOptions * ) poOptions ) -> nMinPoints || n == 0
>2039	EqualityExpression	n == 0
>2040	PrimaryExpression	0
>2041	Identifier	n
>2042	RelationalExpression	n < ( ( GDALGridMovingAverageOptions * ) poOptions ) -> nMinPoints
>2043	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) poOptions ) -> nMinPoints
>2044	Identifier	nMinPoints
>2045	CastExpression	( GDALGridMovingAverageOptions * ) poOptions
>2046	Identifier	poOptions
>2047	CastTarget	GDALGridMovingAverageOptions *
>2048	Identifier	n
>2049	WhileStatement	while ( i < nPoints )
>2050	CompoundStatement	 
>2051	ExpressionStatement	 
>2052	IncDecOp	i ++
>2053	IncDec	++
>2054	Identifier	i
>2055	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>2056	CompoundStatement	 
>2057	ExpressionStatement	 
>2058	IncDecOp	n ++
>2059	IncDec	++
>2060	Identifier	n
>2061	ExpressionStatement	 
>2062	AssignmentExpr	dfAccumulator += padfZ [ i ]
>2063	ArrayIndexing	padfZ [ i ]
>2064	Identifier	i
>2065	Identifier	padfZ
>2066	Identifier	dfAccumulator
>2067	Condition	 
>2068	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>2069	Identifier	dfR12
>2070	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>2071	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>2072	MultiplicativeExpression	dfRY * dfRY
>2073	Identifier	dfRY
>2074	Identifier	dfRY
>2075	Identifier	dfRadius1
>2076	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>2077	MultiplicativeExpression	dfRX * dfRX
>2078	Identifier	dfRX
>2079	Identifier	dfRX
>2080	Identifier	dfRadius2
>2081	IfStatement	if ( bRotated )
>2082	CompoundStatement	 
>2083	ExpressionStatement	 
>2084	AssignmentExpr	dfRY = dfRYRotated
>2085	Identifier	dfRYRotated
>2086	Identifier	dfRY
>2087	ExpressionStatement	 
>2088	AssignmentExpr	dfRX = dfRXRotated
>2089	Identifier	dfRXRotated
>2090	Identifier	dfRX
>2091	IdentifierDeclStatement	 
>2092	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>2093	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>2094	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>2095	MultiplicativeExpression	dfRX * dfCoeff2
>2096	Identifier	dfCoeff2
>2097	Identifier	dfRX
>2098	MultiplicativeExpression	dfRY * dfCoeff1
>2099	Identifier	dfCoeff1
>2100	Identifier	dfRY
>2101	Identifier	dfRYRotated
>2102	Identifier	dfRYRotated
>2103	IdentifierDeclType	double
>2104	IdentifierDeclStatement	 
>2105	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>2106	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>2107	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>2108	MultiplicativeExpression	dfRY * dfCoeff2
>2109	Identifier	dfCoeff2
>2110	Identifier	dfRY
>2111	MultiplicativeExpression	dfRX * dfCoeff1
>2112	Identifier	dfCoeff1
>2113	Identifier	dfRX
>2114	Identifier	dfRXRotated
>2115	Identifier	dfRXRotated
>2116	IdentifierDeclType	double
>2117	Condition	 
>2118	Identifier	bRotated
>2119	IdentifierDeclStatement	 
>2120	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>2121	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>2122	AdditiveExpression	padfY [ i ] - dfYPoint
>2123	Identifier	dfYPoint
>2124	ArrayIndexing	padfY [ i ]
>2125	Identifier	i
>2126	Identifier	padfY
>2127	Identifier	dfRY
>2128	Identifier	dfRY
>2129	IdentifierDeclType	double
>2130	IdentifierDeclStatement	 
>2131	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>2132	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>2133	AdditiveExpression	padfX [ i ] - dfXPoint
>2134	Identifier	dfXPoint
>2135	ArrayIndexing	padfX [ i ]
>2136	Identifier	i
>2137	Identifier	padfX
>2138	Identifier	dfRX
>2139	Identifier	dfRX
>2140	IdentifierDeclType	double
>2141	Condition	 
>2142	RelationalExpression	i < nPoints
>2143	Identifier	nPoints
>2144	Identifier	i
>2145	IdentifierDeclStatement	 
>2146	IdentifierDecl	n = 0
>2147	AssignmentExpr	n = 0
>2148	PrimaryExpression	0
>2149	Identifier	n
>2150	Identifier	n
>2151	IdentifierDeclType	GUInt32
>2152	IdentifierDecl	i = 0
>2153	AssignmentExpr	i = 0
>2154	PrimaryExpression	0
>2155	Identifier	i
>2156	Identifier	i
>2157	IdentifierDeclType	GUInt32
>2158	IdentifierDeclStatement	 
>2159	IdentifierDecl	dfAccumulator = 0.0
>2160	AssignmentExpr	dfAccumulator = 0.0
>2161	PrimaryExpression	0.0
>2162	Identifier	dfAccumulator
>2163	Identifier	dfAccumulator
>2164	IdentifierDeclType	double
>2165	IfStatement	if ( bRotated )
>2166	CompoundStatement	 
>2167	ExpressionStatement	 
>2168	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>2169	CallExpression	sin ( dfAngle )
>2170	ArgumentList	dfAngle
>2171	Argument	dfAngle
>2172	Identifier	dfAngle
>2173	Callee	sin
>2174	Identifier	sin
>2175	Identifier	dfCoeff2
>2176	ExpressionStatement	 
>2177	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>2178	CallExpression	cos ( dfAngle )
>2179	ArgumentList	dfAngle
>2180	Argument	dfAngle
>2181	Identifier	dfAngle
>2182	Callee	cos
>2183	Identifier	cos
>2184	Identifier	dfCoeff1
>2185	Condition	 
>2186	Identifier	bRotated
>2187	IdentifierDeclStatement	 
>2188	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>2189	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>2190	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>2191	Identifier	true
>2192	Identifier	false
>2193	Condition	dfAngle == 0.0
>2194	EqualityExpression	dfAngle == 0.0
>2195	PrimaryExpression	0.0
>2196	Identifier	dfAngle
>2197	Identifier	bRotated
>2198	Identifier	bRotated
>2199	IdentifierDeclType	const bool
>2200	IdentifierDeclStatement	 
>2201	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfAngle
>2202	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfAngle
>2203	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfAngle
>2204	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfAngle
>2205	Identifier	dfAngle
>2206	CastExpression	( GDALGridMovingAverageOptions * ) poOptions
>2207	Identifier	poOptions
>2208	CastTarget	GDALGridMovingAverageOptions *
>2209	Identifier	TO_RADIANS
>2210	Identifier	dfAngle
>2211	Identifier	dfAngle
>2212	IdentifierDeclType	const double
>2213	IdentifierDeclStatement	 
>2214	IdentifierDecl	dfCoeff2 = 0.0
>2215	AssignmentExpr	dfCoeff2 = 0.0
>2216	PrimaryExpression	0.0
>2217	Identifier	dfCoeff2
>2218	Identifier	dfCoeff2
>2219	IdentifierDeclType	double
>2220	IdentifierDecl	dfCoeff1 = 0.0
>2221	AssignmentExpr	dfCoeff1 = 0.0
>2222	PrimaryExpression	0.0
>2223	Identifier	dfCoeff1
>2224	Identifier	dfCoeff1
>2225	IdentifierDeclType	double
>2226	ExpressionStatement	 
>2227	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>2228	MultiplicativeExpression	dfRadius1 * dfRadius2
>2229	Identifier	dfRadius2
>2230	Identifier	dfRadius1
>2231	Identifier	dfR12
>2232	ExpressionStatement	 
>2233	AssignmentExpr	dfRadius2 *= dfRadius2
>2234	Identifier	dfRadius2
>2235	Identifier	dfRadius2
>2236	ExpressionStatement	 
>2237	AssignmentExpr	dfRadius1 *= dfRadius1
>2238	Identifier	dfRadius1
>2239	Identifier	dfRadius1
>2240	IdentifierDeclStatement	 
>2241	IdentifierDecl	dfR12
>2242	Identifier	dfR12
>2243	IdentifierDeclType	double
>2244	IdentifierDeclStatement	 
>2245	IdentifierDecl	dfRadius2 = ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfRadius2
>2246	AssignmentExpr	dfRadius2 = ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfRadius2
>2247	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfRadius2
>2248	Identifier	dfRadius2
>2249	CastExpression	( GDALGridMovingAverageOptions * ) poOptions
>2250	Identifier	poOptions
>2251	CastTarget	GDALGridMovingAverageOptions *
>2252	Identifier	dfRadius2
>2253	Identifier	dfRadius2
>2254	IdentifierDeclType	double
>2255	IdentifierDeclStatement	 
>2256	IdentifierDecl	dfRadius1 = ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfRadius1
>2257	AssignmentExpr	dfRadius1 = ( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfRadius1
>2258	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) poOptions ) -> dfRadius1
>2259	Identifier	dfRadius1
>2260	CastExpression	( GDALGridMovingAverageOptions * ) poOptions
>2261	Identifier	poOptions
>2262	CastTarget	GDALGridMovingAverageOptions *
>2263	Identifier	dfRadius1
>2264	Identifier	dfRadius1
>2265	IdentifierDeclType	double
>2309	FunctionDef	GDALGridNearestNeighbor (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , \
>2310	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>2311	Parameter	 
>2312	Identifier	hExtraParamsIn
>2313	ParameterType	void *
>2314	Parameter	 
>2315	Identifier	pdfValue
>2316	ParameterType	double *
>2317	Parameter	 
>2318	Identifier	dfYPoint
>2319	ParameterType	double
>2320	Parameter	 
>2321	Identifier	dfXPoint
>2322	ParameterType	double
>2323	Parameter	 
>2324	Identifier	padfZ
>2325	ParameterType	const double *
>2326	Parameter	 
>2327	Identifier	padfY
>2328	ParameterType	const double *
>2329	Parameter	 
>2330	Identifier	padfX
>2331	ParameterType	const double *
>2332	Parameter	 
>2333	Identifier	nPoints
>2334	ParameterType	GUInt32
>2335	Parameter	 
>2336	Identifier	poOptions
>2337	ParameterType	const void *
>2338	ReturnType	CPLErr
>2339	CompoundStatement	 
>2340	ReturnStatement	 
>2341	Identifier	CE_None
>2342	ExpressionStatement	 
>2343	AssignmentExpr	( * pdfValue ) = dfNearestValue
>2344	Identifier	dfNearestValue
>2345	UnaryOp	* pdfValue
>2346	Identifier	pdfValue
>2347	UnaryOperator	*
>2348	IfStatement	if ( hQuadTree != NULL && dfRadius1 == dfRadius2 && dfSearchRadius > 0 )
>2349	ElseStatement	else
>2350	CompoundStatement	 
>2351	WhileStatement	while ( i < nPoints )
>2352	CompoundStatement	 
>2353	ExpressionStatement	 
>2354	IncDecOp	i ++
>2355	IncDec	++
>2356	Identifier	i
>2357	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>2358	CompoundStatement	 
>2359	IfStatement	if ( dfR2 <= dfNearestR )
>2360	CompoundStatement	 
>2361	ExpressionStatement	 
>2362	AssignmentExpr	dfNearestValue = padfZ [ i ]
>2363	ArrayIndexing	padfZ [ i ]
>2364	Identifier	i
>2365	Identifier	padfZ
>2366	Identifier	dfNearestValue
>2367	ExpressionStatement	 
>2368	AssignmentExpr	dfNearestR = dfR2
>2369	Identifier	dfR2
>2370	Identifier	dfNearestR
>2371	Condition	 
>2372	RelationalExpression	dfR2 <= dfNearestR
>2373	Identifier	dfNearestR
>2374	Identifier	dfR2
>2375	IdentifierDeclStatement	 
>2376	IdentifierDecl	dfR2 = dfRX * dfRX + dfRY * dfRY
>2377	AssignmentExpr	dfR2 = dfRX * dfRX + dfRY * dfRY
>2378	AdditiveExpression	dfRX * dfRX + dfRY * dfRY
>2379	MultiplicativeExpression	dfRY * dfRY
>2380	Identifier	dfRY
>2381	Identifier	dfRY
>2382	MultiplicativeExpression	dfRX * dfRX
>2383	Identifier	dfRX
>2384	Identifier	dfRX
>2385	Identifier	dfR2
>2386	Identifier	dfR2
>2387	IdentifierDeclType	const double
>2388	Condition	 
>2389	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>2390	Identifier	dfR12
>2391	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>2392	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>2393	MultiplicativeExpression	dfRY * dfRY
>2394	Identifier	dfRY
>2395	Identifier	dfRY
>2396	Identifier	dfRadius1
>2397	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>2398	MultiplicativeExpression	dfRX * dfRX
>2399	Identifier	dfRX
>2400	Identifier	dfRX
>2401	Identifier	dfRadius2
>2402	IfStatement	if ( bRotated )
>2403	CompoundStatement	 
>2404	ExpressionStatement	 
>2405	AssignmentExpr	dfRY = dfRYRotated
>2406	Identifier	dfRYRotated
>2407	Identifier	dfRY
>2408	ExpressionStatement	 
>2409	AssignmentExpr	dfRX = dfRXRotated
>2410	Identifier	dfRXRotated
>2411	Identifier	dfRX
>2412	IdentifierDeclStatement	 
>2413	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>2414	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>2415	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>2416	MultiplicativeExpression	dfRX * dfCoeff2
>2417	Identifier	dfCoeff2
>2418	Identifier	dfRX
>2419	MultiplicativeExpression	dfRY * dfCoeff1
>2420	Identifier	dfCoeff1
>2421	Identifier	dfRY
>2422	Identifier	dfRYRotated
>2423	Identifier	dfRYRotated
>2424	IdentifierDeclType	double
>2425	IdentifierDeclStatement	 
>2426	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>2427	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>2428	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>2429	MultiplicativeExpression	dfRY * dfCoeff2
>2430	Identifier	dfCoeff2
>2431	Identifier	dfRY
>2432	MultiplicativeExpression	dfRX * dfCoeff1
>2433	Identifier	dfCoeff1
>2434	Identifier	dfRX
>2435	Identifier	dfRXRotated
>2436	Identifier	dfRXRotated
>2437	IdentifierDeclType	double
>2438	Condition	 
>2439	Identifier	bRotated
>2440	IdentifierDeclStatement	 
>2441	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>2442	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>2443	AdditiveExpression	padfY [ i ] - dfYPoint
>2444	Identifier	dfYPoint
>2445	ArrayIndexing	padfY [ i ]
>2446	Identifier	i
>2447	Identifier	padfY
>2448	Identifier	dfRY
>2449	Identifier	dfRY
>2450	IdentifierDeclType	double
>2451	IdentifierDeclStatement	 
>2452	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>2453	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>2454	AdditiveExpression	padfX [ i ] - dfXPoint
>2455	Identifier	dfXPoint
>2456	ArrayIndexing	padfX [ i ]
>2457	Identifier	i
>2458	Identifier	padfX
>2459	Identifier	dfRX
>2460	Identifier	dfRX
>2461	IdentifierDeclType	double
>2462	Condition	 
>2463	RelationalExpression	i < nPoints
>2464	Identifier	nPoints
>2465	Identifier	i
>2466	CompoundStatement	 
>2467	WhileStatement	while ( dfSearchRadius > 0 )
>2468	CompoundStatement	 
>2469	IfStatement	if ( nFeatureCount != 0 )
>2470	ElseStatement	else
>2471	CompoundStatement	 
>2472	ExpressionStatement	 
>2473	AssignmentExpr	dfSearchRadius *= 2
>2474	PrimaryExpression	2
>2475	Identifier	dfSearchRadius
>2476	IfStatement	if ( dfRadius1 > 0 )
>2477	BreakStatement	 
>2478	Condition	 
>2479	RelationalExpression	dfRadius1 > 0
>2480	PrimaryExpression	0
>2481	Identifier	dfRadius1
>2482	ExpressionStatement	 
>2483	CallExpression	CPLFree ( papsPoints )
>2484	ArgumentList	papsPoints
>2485	Argument	papsPoints
>2486	Identifier	papsPoints
>2487	Callee	CPLFree
>2488	Identifier	CPLFree
>2489	CompoundStatement	 
>2490	BreakStatement	 
>2491	ExpressionStatement	 
>2492	CallExpression	CPLFree ( papsPoints )
>2493	ArgumentList	papsPoints
>2494	Argument	papsPoints
>2495	Identifier	papsPoints
>2496	Callee	CPLFree
>2497	Identifier	CPLFree
>2498	ForStatement	for ( int k = 0 ; k < nFeatureCount ; k ++ )
>2499	CompoundStatement	 
>2500	IfStatement	if ( dfR2 <= dfNearestR )
>2501	CompoundStatement	 
>2502	ExpressionStatement	 
>2503	AssignmentExpr	dfNearestValue = padfZ [ i ]
>2504	ArrayIndexing	padfZ [ i ]
>2505	Identifier	i
>2506	Identifier	padfZ
>2507	Identifier	dfNearestValue
>2508	ExpressionStatement	 
>2509	AssignmentExpr	dfNearestR = dfR2
>2510	Identifier	dfR2
>2511	Identifier	dfNearestR
>2512	Condition	 
>2513	RelationalExpression	dfR2 <= dfNearestR
>2514	Identifier	dfNearestR
>2515	Identifier	dfR2
>2516	IdentifierDeclStatement	 
>2517	IdentifierDecl	dfR2 = dfRX * dfRX + dfRY * dfRY
>2518	AssignmentExpr	dfR2 = dfRX * dfRX + dfRY * dfRY
>2519	AdditiveExpression	dfRX * dfRX + dfRY * dfRY
>2520	MultiplicativeExpression	dfRY * dfRY
>2521	Identifier	dfRY
>2522	Identifier	dfRY
>2523	MultiplicativeExpression	dfRX * dfRX
>2524	Identifier	dfRX
>2525	Identifier	dfRX
>2526	Identifier	dfR2
>2527	Identifier	dfR2
>2528	IdentifierDeclType	const double
>2529	IdentifierDeclStatement	 
>2530	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>2531	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>2532	AdditiveExpression	padfY [ i ] - dfYPoint
>2533	Identifier	dfYPoint
>2534	ArrayIndexing	padfY [ i ]
>2535	Identifier	i
>2536	Identifier	padfY
>2537	Identifier	dfRY
>2538	Identifier	dfRY
>2539	IdentifierDeclType	double
>2540	IdentifierDeclStatement	 
>2541	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>2542	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>2543	AdditiveExpression	padfX [ i ] - dfXPoint
>2544	Identifier	dfXPoint
>2545	ArrayIndexing	padfX [ i ]
>2546	Identifier	i
>2547	Identifier	padfX
>2548	Identifier	dfRX
>2549	Identifier	dfRX
>2550	IdentifierDeclType	double
>2551	IdentifierDeclStatement	 
>2552	IdentifierDecl	i = papsPoints [ k ] -> i
>2553	AssignmentExpr	i = papsPoints [ k ] -> i
>2554	PtrMemberAccess	papsPoints [ k ] -> i
>2555	Identifier	i
>2556	ArrayIndexing	papsPoints [ k ]
>2557	Identifier	k
>2558	Identifier	papsPoints
>2559	Identifier	i
>2560	Identifier	i
>2561	IdentifierDeclType	int
>2562	IncDecOp	 
>2563	IncDec	++
>2564	Identifier	k
>2565	Condition	 
>2566	RelationalExpression	k < nFeatureCount
>2567	Identifier	nFeatureCount
>2568	Identifier	k
>2569	ForInit	 
>2570	IdentifierDeclStatement	int k = 0 ;
>2571	IdentifierDecl	k = 0
>2572	AssignmentExpr	k = 0
>2573	PrimaryExpression	0
>2574	Identifier	k
>2575	Identifier	k
>2576	IdentifierDeclType	int
>2577	IfStatement	if ( dfRadius1 > 0 )
>2578	ExpressionStatement	 
>2579	AssignmentExpr	dfNearestR = dfRadius1
>2580	Identifier	dfRadius1
>2581	Identifier	dfNearestR
>2582	Condition	 
>2583	RelationalExpression	dfRadius1 > 0
>2584	PrimaryExpression	0
>2585	Identifier	dfRadius1
>2586	Condition	 
>2587	EqualityExpression	nFeatureCount != 0
>2588	PrimaryExpression	0
>2589	Identifier	nFeatureCount
>2590	IdentifierDeclStatement	 
>2591	IdentifierDecl	* * papsPoints = ( GDALGridPoint * * ) CPLQuadTreeSearch ( hQuadTree , & sAoi , & nFeatureCount )
>2592	AssignmentExpr	* * papsPoints = ( GDALGridPoint * * ) CPLQuadTreeSearch ( hQuadTree , & sAoi , & nFeatureCount )
>2593	CastExpression	( GDALGridPoint * * ) CPLQuadTreeSearch ( hQuadTree , & sAoi , & nFeatureCount )
>2594	CallExpression	CPLQuadTreeSearch ( hQuadTree , & sAoi , & nFeatureCount )
>2595	ArgumentList	hQuadTree
>2596	Argument	& nFeatureCount
>2597	UnaryOp	& nFeatureCount
>2598	Identifier	nFeatureCount
>2599	UnaryOperator	&
>2600	Argument	& sAoi
>2601	UnaryOp	& sAoi
>2602	Identifier	sAoi
>2603	UnaryOperator	&
>2604	Argument	hQuadTree
>2605	Identifier	hQuadTree
>2606	Callee	CPLQuadTreeSearch
>2607	Identifier	CPLQuadTreeSearch
>2608	CastTarget	GDALGridPoint * *
>2609	Identifier	papsPoints
>2610	Identifier	papsPoints
>2611	IdentifierDeclType	GDALGridPoint * *
>2612	IdentifierDeclStatement	 
>2613	IdentifierDecl	nFeatureCount = 0
>2614	AssignmentExpr	nFeatureCount = 0
>2615	PrimaryExpression	0
>2616	Identifier	nFeatureCount
>2617	Identifier	nFeatureCount
>2618	IdentifierDeclType	int
>2619	ExpressionStatement	 
>2620	AssignmentExpr	sAoi . maxy = dfYPoint + dfSearchRadius
>2621	AdditiveExpression	dfYPoint + dfSearchRadius
>2622	Identifier	dfSearchRadius
>2623	Identifier	dfYPoint
>2624	MemberAccess	sAoi . maxy
>2625	Identifier	maxy
>2626	Identifier	sAoi
>2627	ExpressionStatement	 
>2628	AssignmentExpr	sAoi . maxx = dfXPoint + dfSearchRadius
>2629	AdditiveExpression	dfXPoint + dfSearchRadius
>2630	Identifier	dfSearchRadius
>2631	Identifier	dfXPoint
>2632	MemberAccess	sAoi . maxx
>2633	Identifier	maxx
>2634	Identifier	sAoi
>2635	ExpressionStatement	 
>2636	AssignmentExpr	sAoi . miny = dfYPoint - dfSearchRadius
>2637	AdditiveExpression	dfYPoint - dfSearchRadius
>2638	Identifier	dfSearchRadius
>2639	Identifier	dfYPoint
>2640	MemberAccess	sAoi . miny
>2641	Identifier	miny
>2642	Identifier	sAoi
>2643	ExpressionStatement	 
>2644	AssignmentExpr	sAoi . minx = dfXPoint - dfSearchRadius
>2645	AdditiveExpression	dfXPoint - dfSearchRadius
>2646	Identifier	dfSearchRadius
>2647	Identifier	dfXPoint
>2648	MemberAccess	sAoi . minx
>2649	Identifier	minx
>2650	Identifier	sAoi
>2651	Condition	 
>2652	RelationalExpression	dfSearchRadius > 0
>2653	PrimaryExpression	0
>2654	Identifier	dfSearchRadius
>2655	IfStatement	if ( dfRadius1 > 0 )
>2656	ExpressionStatement	 
>2657	AssignmentExpr	dfSearchRadius = ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1
>2658	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1
>2659	Identifier	dfRadius1
>2660	CastExpression	( GDALGridNearestNeighborOptions * ) poOptions
>2661	Identifier	poOptions
>2662	CastTarget	GDALGridNearestNeighborOptions *
>2663	Identifier	dfSearchRadius
>2664	Condition	 
>2665	RelationalExpression	dfRadius1 > 0
>2666	PrimaryExpression	0
>2667	Identifier	dfRadius1
>2668	IdentifierDeclStatement	 
>2669	IdentifierDecl	sAoi
>2670	Identifier	sAoi
>2671	IdentifierDeclType	CPLRectObj
>2672	Condition	 
>2673	AndExpression	hQuadTree != NULL && dfRadius1 == dfRadius2 && dfSearchRadius > 0
>2674	AndExpression	dfRadius1 == dfRadius2 && dfSearchRadius > 0
>2675	RelationalExpression	dfSearchRadius > 0
>2676	PrimaryExpression	0
>2677	Identifier	dfSearchRadius
>2678	EqualityExpression	dfRadius1 == dfRadius2
>2679	Identifier	dfRadius2
>2680	Identifier	dfRadius1
>2681	EqualityExpression	hQuadTree != NULL
>2682	Identifier	NULL
>2683	Identifier	hQuadTree
>2684	IdentifierDeclStatement	 
>2685	IdentifierDecl	dfSearchRadius = psExtraParams -> dfInitialSearchRadius
>2686	AssignmentExpr	dfSearchRadius = psExtraParams -> dfInitialSearchRadius
>2687	PtrMemberAccess	psExtraParams -> dfInitialSearchRadius
>2688	Identifier	dfInitialSearchRadius
>2689	Identifier	psExtraParams
>2690	Identifier	dfSearchRadius
>2691	Identifier	dfSearchRadius
>2692	IdentifierDeclType	double
>2693	IdentifierDeclStatement	 
>2694	IdentifierDecl	i = 0
>2695	AssignmentExpr	i = 0
>2696	PrimaryExpression	0
>2697	Identifier	i
>2698	Identifier	i
>2699	IdentifierDeclType	GUInt32
>2700	IdentifierDeclStatement	 
>2701	IdentifierDecl	dfNearestR = DBL_MAX
>2702	AssignmentExpr	dfNearestR = DBL_MAX
>2703	Identifier	DBL_MAX
>2704	Identifier	DBL_MAX
>2705	Identifier	dfNearestR
>2706	IdentifierDeclType	double
>2707	IdentifierDeclStatement	 
>2708	IdentifierDecl	dfNearestValue = ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfNoDataValue
>2709	AssignmentExpr	dfNearestValue = ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfNoDataValue
>2710	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfNoDataValue
>2711	Identifier	dfNoDataValue
>2712	CastExpression	( GDALGridNearestNeighborOptions * ) poOptions
>2713	Identifier	poOptions
>2714	CastTarget	GDALGridNearestNeighborOptions *
>2715	Identifier	dfNearestValue
>2716	Identifier	dfNearestValue
>2717	IdentifierDeclType	double
>2718	IfStatement	if ( bRotated )
>2719	CompoundStatement	 
>2720	ExpressionStatement	 
>2721	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>2722	CallExpression	sin ( dfAngle )
>2723	ArgumentList	dfAngle
>2724	Argument	dfAngle
>2725	Identifier	dfAngle
>2726	Callee	sin
>2727	Identifier	sin
>2728	Identifier	dfCoeff2
>2729	ExpressionStatement	 
>2730	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>2731	CallExpression	cos ( dfAngle )
>2732	ArgumentList	dfAngle
>2733	Argument	dfAngle
>2734	Identifier	dfAngle
>2735	Callee	cos
>2736	Identifier	cos
>2737	Identifier	dfCoeff1
>2738	Condition	 
>2739	Identifier	bRotated
>2740	IdentifierDeclStatement	 
>2741	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>2742	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>2743	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>2744	Identifier	true
>2745	Identifier	false
>2746	Condition	dfAngle == 0.0
>2747	EqualityExpression	dfAngle == 0.0
>2748	PrimaryExpression	0.0
>2749	Identifier	dfAngle
>2750	Identifier	bRotated
>2751	Identifier	bRotated
>2752	IdentifierDeclType	const bool
>2753	IdentifierDeclStatement	 
>2754	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfAngle
>2755	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfAngle
>2756	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfAngle
>2757	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfAngle
>2758	Identifier	dfAngle
>2759	CastExpression	( GDALGridNearestNeighborOptions * ) poOptions
>2760	Identifier	poOptions
>2761	CastTarget	GDALGridNearestNeighborOptions *
>2762	Identifier	TO_RADIANS
>2763	Identifier	dfAngle
>2764	Identifier	dfAngle
>2765	IdentifierDeclType	const double
>2766	IdentifierDeclStatement	 
>2767	IdentifierDecl	dfCoeff2 = 0.0
>2768	AssignmentExpr	dfCoeff2 = 0.0
>2769	PrimaryExpression	0.0
>2770	Identifier	dfCoeff2
>2771	Identifier	dfCoeff2
>2772	IdentifierDeclType	double
>2773	IdentifierDecl	dfCoeff1 = 0.0
>2774	AssignmentExpr	dfCoeff1 = 0.0
>2775	PrimaryExpression	0.0
>2776	Identifier	dfCoeff1
>2777	Identifier	dfCoeff1
>2778	IdentifierDeclType	double
>2779	ExpressionStatement	 
>2780	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>2781	MultiplicativeExpression	dfRadius1 * dfRadius2
>2782	Identifier	dfRadius2
>2783	Identifier	dfRadius1
>2784	Identifier	dfR12
>2785	ExpressionStatement	 
>2786	AssignmentExpr	dfRadius2 *= dfRadius2
>2787	Identifier	dfRadius2
>2788	Identifier	dfRadius2
>2789	ExpressionStatement	 
>2790	AssignmentExpr	dfRadius1 *= dfRadius1
>2791	Identifier	dfRadius1
>2792	Identifier	dfRadius1
>2793	IdentifierDeclStatement	 
>2794	IdentifierDecl	* hQuadTree = psExtraParams -> hQuadTree
>2795	AssignmentExpr	* hQuadTree = psExtraParams -> hQuadTree
>2796	PtrMemberAccess	psExtraParams -> hQuadTree
>2797	Identifier	hQuadTree
>2798	Identifier	psExtraParams
>2799	Identifier	hQuadTree
>2800	Identifier	hQuadTree
>2801	IdentifierDeclType	CPLQuadTree *
>2802	IdentifierDeclStatement	 
>2803	IdentifierDecl	* psExtraParams = ( GDALGridExtraParameters * ) hExtraParamsIn
>2804	AssignmentExpr	* psExtraParams = ( GDALGridExtraParameters * ) hExtraParamsIn
>2805	CastExpression	( GDALGridExtraParameters * ) hExtraParamsIn
>2806	Identifier	hExtraParamsIn
>2807	CastTarget	GDALGridExtraParameters *
>2808	Identifier	psExtraParams
>2809	Identifier	psExtraParams
>2810	IdentifierDeclType	GDALGridExtraParameters *
>2811	IdentifierDeclStatement	 
>2812	IdentifierDecl	dfR12
>2813	Identifier	dfR12
>2814	IdentifierDeclType	double
>2815	IdentifierDeclStatement	 
>2816	IdentifierDecl	dfRadius2 = ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius2
>2817	AssignmentExpr	dfRadius2 = ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius2
>2818	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius2
>2819	Identifier	dfRadius2
>2820	CastExpression	( GDALGridNearestNeighborOptions * ) poOptions
>2821	Identifier	poOptions
>2822	CastTarget	GDALGridNearestNeighborOptions *
>2823	Identifier	dfRadius2
>2824	Identifier	dfRadius2
>2825	IdentifierDeclType	double
>2826	IdentifierDeclStatement	 
>2827	IdentifierDecl	dfRadius1 = ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1
>2828	AssignmentExpr	dfRadius1 = ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1
>2829	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1
>2830	Identifier	dfRadius1
>2831	CastExpression	( GDALGridNearestNeighborOptions * ) poOptions
>2832	Identifier	poOptions
>2833	CastTarget	GDALGridNearestNeighborOptions *
>2834	Identifier	dfRadius1
>2835	Identifier	dfRadius1
>2836	IdentifierDeclType	double
>2904	FunctionDef	GDALGridDataMetricMinimum (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , \
>2905	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>2906	Parameter	 
>2907	Identifier	hExtraParamsIn
>2908	ParameterType	void *
>2909	Parameter	 
>2910	Identifier	pdfValue
>2911	ParameterType	double *
>2912	Parameter	 
>2913	Identifier	dfYPoint
>2914	ParameterType	double
>2915	Parameter	 
>2916	Identifier	dfXPoint
>2917	ParameterType	double
>2918	Parameter	 
>2919	Identifier	padfZ
>2920	ParameterType	const double *
>2921	Parameter	 
>2922	Identifier	padfY
>2923	ParameterType	const double *
>2924	Parameter	 
>2925	Identifier	padfX
>2926	ParameterType	const double *
>2927	Parameter	 
>2928	Identifier	nPoints
>2929	ParameterType	GUInt32
>2930	Parameter	 
>2931	Identifier	poOptions
>2932	ParameterType	const void *
>2933	ReturnType	CPLErr
>2934	CompoundStatement	 
>2935	ReturnStatement	 
>2936	Identifier	CE_None
>2937	IfStatement	if ( n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0 )
>2938	ElseStatement	else
>2939	ExpressionStatement	 
>2940	AssignmentExpr	( * pdfValue ) = dfMinimumValue
>2941	Identifier	dfMinimumValue
>2942	UnaryOp	* pdfValue
>2943	Identifier	pdfValue
>2944	UnaryOperator	*
>2945	CompoundStatement	 
>2946	ExpressionStatement	 
>2947	AssignmentExpr	( * pdfValue ) = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>2948	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>2949	Identifier	dfNoDataValue
>2950	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>2951	Identifier	poOptions
>2952	CastTarget	GDALGridDataMetricsOptions *
>2953	UnaryOp	* pdfValue
>2954	Identifier	pdfValue
>2955	UnaryOperator	*
>2956	Condition	 
>2957	OrExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0
>2958	EqualityExpression	n == 0
>2959	PrimaryExpression	0
>2960	Identifier	n
>2961	RelationalExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>2962	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>2963	Identifier	nMinPoints
>2964	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>2965	Identifier	poOptions
>2966	CastTarget	GDALGridDataMetricsOptions *
>2967	Identifier	n
>2968	WhileStatement	while ( i < nPoints )
>2969	CompoundStatement	 
>2970	ExpressionStatement	 
>2971	IncDecOp	i ++
>2972	IncDec	++
>2973	Identifier	i
>2974	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>2975	CompoundStatement	 
>2976	ExpressionStatement	 
>2977	IncDecOp	n ++
>2978	IncDec	++
>2979	Identifier	n
>2980	IfStatement	if ( n )
>2981	ElseStatement	else
>2982	ExpressionStatement	 
>2983	AssignmentExpr	dfMinimumValue = padfZ [ i ]
>2984	ArrayIndexing	padfZ [ i ]
>2985	Identifier	i
>2986	Identifier	padfZ
>2987	Identifier	dfMinimumValue
>2988	CompoundStatement	 
>2989	IfStatement	if ( dfMinimumValue > padfZ [ i ] )
>2990	ExpressionStatement	 
>2991	AssignmentExpr	dfMinimumValue = padfZ [ i ]
>2992	ArrayIndexing	padfZ [ i ]
>2993	Identifier	i
>2994	Identifier	padfZ
>2995	Identifier	dfMinimumValue
>2996	Condition	 
>2997	RelationalExpression	dfMinimumValue > padfZ [ i ]
>2998	ArrayIndexing	padfZ [ i ]
>2999	Identifier	i
>3000	Identifier	padfZ
>3001	Identifier	dfMinimumValue
>3002	Condition	 
>3003	Identifier	n
>3004	Condition	 
>3005	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>3006	Identifier	dfR12
>3007	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>3008	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>3009	MultiplicativeExpression	dfRY * dfRY
>3010	Identifier	dfRY
>3011	Identifier	dfRY
>3012	Identifier	dfRadius1
>3013	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>3014	MultiplicativeExpression	dfRX * dfRX
>3015	Identifier	dfRX
>3016	Identifier	dfRX
>3017	Identifier	dfRadius2
>3018	IfStatement	if ( bRotated )
>3019	CompoundStatement	 
>3020	ExpressionStatement	 
>3021	AssignmentExpr	dfRY = dfRYRotated
>3022	Identifier	dfRYRotated
>3023	Identifier	dfRY
>3024	ExpressionStatement	 
>3025	AssignmentExpr	dfRX = dfRXRotated
>3026	Identifier	dfRXRotated
>3027	Identifier	dfRX
>3028	IdentifierDeclStatement	 
>3029	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>3030	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>3031	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>3032	MultiplicativeExpression	dfRX * dfCoeff2
>3033	Identifier	dfCoeff2
>3034	Identifier	dfRX
>3035	MultiplicativeExpression	dfRY * dfCoeff1
>3036	Identifier	dfCoeff1
>3037	Identifier	dfRY
>3038	Identifier	dfRYRotated
>3039	Identifier	dfRYRotated
>3040	IdentifierDeclType	double
>3041	IdentifierDeclStatement	 
>3042	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>3043	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>3044	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>3045	MultiplicativeExpression	dfRY * dfCoeff2
>3046	Identifier	dfCoeff2
>3047	Identifier	dfRY
>3048	MultiplicativeExpression	dfRX * dfCoeff1
>3049	Identifier	dfCoeff1
>3050	Identifier	dfRX
>3051	Identifier	dfRXRotated
>3052	Identifier	dfRXRotated
>3053	IdentifierDeclType	double
>3054	Condition	 
>3055	Identifier	bRotated
>3056	IdentifierDeclStatement	 
>3057	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>3058	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>3059	AdditiveExpression	padfY [ i ] - dfYPoint
>3060	Identifier	dfYPoint
>3061	ArrayIndexing	padfY [ i ]
>3062	Identifier	i
>3063	Identifier	padfY
>3064	Identifier	dfRY
>3065	Identifier	dfRY
>3066	IdentifierDeclType	double
>3067	IdentifierDeclStatement	 
>3068	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>3069	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>3070	AdditiveExpression	padfX [ i ] - dfXPoint
>3071	Identifier	dfXPoint
>3072	ArrayIndexing	padfX [ i ]
>3073	Identifier	i
>3074	Identifier	padfX
>3075	Identifier	dfRX
>3076	Identifier	dfRX
>3077	IdentifierDeclType	double
>3078	Condition	 
>3079	RelationalExpression	i < nPoints
>3080	Identifier	nPoints
>3081	Identifier	i
>3082	IdentifierDeclStatement	 
>3083	IdentifierDecl	n = 0
>3084	AssignmentExpr	n = 0
>3085	PrimaryExpression	0
>3086	Identifier	n
>3087	Identifier	n
>3088	IdentifierDeclType	GUInt32
>3089	IdentifierDecl	i = 0
>3090	AssignmentExpr	i = 0
>3091	PrimaryExpression	0
>3092	Identifier	i
>3093	Identifier	i
>3094	IdentifierDeclType	GUInt32
>3095	IdentifierDeclStatement	 
>3096	IdentifierDecl	dfMinimumValue = 0.0
>3097	AssignmentExpr	dfMinimumValue = 0.0
>3098	PrimaryExpression	0.0
>3099	Identifier	dfMinimumValue
>3100	Identifier	dfMinimumValue
>3101	IdentifierDeclType	double
>3102	IfStatement	if ( bRotated )
>3103	CompoundStatement	 
>3104	ExpressionStatement	 
>3105	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>3106	CallExpression	sin ( dfAngle )
>3107	ArgumentList	dfAngle
>3108	Argument	dfAngle
>3109	Identifier	dfAngle
>3110	Callee	sin
>3111	Identifier	sin
>3112	Identifier	dfCoeff2
>3113	ExpressionStatement	 
>3114	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>3115	CallExpression	cos ( dfAngle )
>3116	ArgumentList	dfAngle
>3117	Argument	dfAngle
>3118	Identifier	dfAngle
>3119	Callee	cos
>3120	Identifier	cos
>3121	Identifier	dfCoeff1
>3122	Condition	 
>3123	Identifier	bRotated
>3124	IdentifierDeclStatement	 
>3125	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>3126	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>3127	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>3128	Identifier	true
>3129	Identifier	false
>3130	Condition	dfAngle == 0.0
>3131	EqualityExpression	dfAngle == 0.0
>3132	PrimaryExpression	0.0
>3133	Identifier	dfAngle
>3134	Identifier	bRotated
>3135	Identifier	bRotated
>3136	IdentifierDeclType	const bool
>3137	IdentifierDeclStatement	 
>3138	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3139	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3140	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3141	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3142	Identifier	dfAngle
>3143	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3144	Identifier	poOptions
>3145	CastTarget	GDALGridDataMetricsOptions *
>3146	Identifier	TO_RADIANS
>3147	Identifier	dfAngle
>3148	Identifier	dfAngle
>3149	IdentifierDeclType	const double
>3150	IdentifierDeclStatement	 
>3151	IdentifierDecl	dfCoeff2 = 0.0
>3152	AssignmentExpr	dfCoeff2 = 0.0
>3153	PrimaryExpression	0.0
>3154	Identifier	dfCoeff2
>3155	Identifier	dfCoeff2
>3156	IdentifierDeclType	double
>3157	IdentifierDecl	dfCoeff1 = 0.0
>3158	AssignmentExpr	dfCoeff1 = 0.0
>3159	PrimaryExpression	0.0
>3160	Identifier	dfCoeff1
>3161	Identifier	dfCoeff1
>3162	IdentifierDeclType	double
>3163	ExpressionStatement	 
>3164	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>3165	MultiplicativeExpression	dfRadius1 * dfRadius2
>3166	Identifier	dfRadius2
>3167	Identifier	dfRadius1
>3168	Identifier	dfR12
>3169	ExpressionStatement	 
>3170	AssignmentExpr	dfRadius2 *= dfRadius2
>3171	Identifier	dfRadius2
>3172	Identifier	dfRadius2
>3173	ExpressionStatement	 
>3174	AssignmentExpr	dfRadius1 *= dfRadius1
>3175	Identifier	dfRadius1
>3176	Identifier	dfRadius1
>3177	IdentifierDeclStatement	 
>3178	IdentifierDecl	dfR12
>3179	Identifier	dfR12
>3180	IdentifierDeclType	double
>3181	IdentifierDeclStatement	 
>3182	IdentifierDecl	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3183	AssignmentExpr	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3184	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3185	Identifier	dfRadius2
>3186	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3187	Identifier	poOptions
>3188	CastTarget	GDALGridDataMetricsOptions *
>3189	Identifier	dfRadius2
>3190	Identifier	dfRadius2
>3191	IdentifierDeclType	double
>3192	IdentifierDeclStatement	 
>3193	IdentifierDecl	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3194	AssignmentExpr	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3195	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3196	Identifier	dfRadius1
>3197	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3198	Identifier	poOptions
>3199	CastTarget	GDALGridDataMetricsOptions *
>3200	Identifier	dfRadius1
>3201	Identifier	dfRadius1
>3202	IdentifierDeclType	double
>3246	FunctionDef	GDALGridDataMetricMaximum (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , \
>3247	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>3248	Parameter	 
>3249	Identifier	hExtraParamsIn
>3250	ParameterType	void *
>3251	Parameter	 
>3252	Identifier	pdfValue
>3253	ParameterType	double *
>3254	Parameter	 
>3255	Identifier	dfYPoint
>3256	ParameterType	double
>3257	Parameter	 
>3258	Identifier	dfXPoint
>3259	ParameterType	double
>3260	Parameter	 
>3261	Identifier	padfZ
>3262	ParameterType	const double *
>3263	Parameter	 
>3264	Identifier	padfY
>3265	ParameterType	const double *
>3266	Parameter	 
>3267	Identifier	padfX
>3268	ParameterType	const double *
>3269	Parameter	 
>3270	Identifier	nPoints
>3271	ParameterType	GUInt32
>3272	Parameter	 
>3273	Identifier	poOptions
>3274	ParameterType	const void *
>3275	ReturnType	CPLErr
>3276	CompoundStatement	 
>3277	ReturnStatement	 
>3278	Identifier	CE_None
>3279	IfStatement	if ( n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0 )
>3280	ElseStatement	else
>3281	ExpressionStatement	 
>3282	AssignmentExpr	( * pdfValue ) = dfMaximumValue
>3283	Identifier	dfMaximumValue
>3284	UnaryOp	* pdfValue
>3285	Identifier	pdfValue
>3286	UnaryOperator	*
>3287	CompoundStatement	 
>3288	ExpressionStatement	 
>3289	AssignmentExpr	( * pdfValue ) = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>3290	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>3291	Identifier	dfNoDataValue
>3292	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3293	Identifier	poOptions
>3294	CastTarget	GDALGridDataMetricsOptions *
>3295	UnaryOp	* pdfValue
>3296	Identifier	pdfValue
>3297	UnaryOperator	*
>3298	Condition	 
>3299	OrExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0
>3300	EqualityExpression	n == 0
>3301	PrimaryExpression	0
>3302	Identifier	n
>3303	RelationalExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>3304	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>3305	Identifier	nMinPoints
>3306	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3307	Identifier	poOptions
>3308	CastTarget	GDALGridDataMetricsOptions *
>3309	Identifier	n
>3310	WhileStatement	while ( i < nPoints )
>3311	CompoundStatement	 
>3312	ExpressionStatement	 
>3313	IncDecOp	i ++
>3314	IncDec	++
>3315	Identifier	i
>3316	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>3317	CompoundStatement	 
>3318	ExpressionStatement	 
>3319	IncDecOp	n ++
>3320	IncDec	++
>3321	Identifier	n
>3322	IfStatement	if ( n )
>3323	ElseStatement	else
>3324	ExpressionStatement	 
>3325	AssignmentExpr	dfMaximumValue = padfZ [ i ]
>3326	ArrayIndexing	padfZ [ i ]
>3327	Identifier	i
>3328	Identifier	padfZ
>3329	Identifier	dfMaximumValue
>3330	CompoundStatement	 
>3331	IfStatement	if ( dfMaximumValue < padfZ [ i ] )
>3332	ExpressionStatement	 
>3333	AssignmentExpr	dfMaximumValue = padfZ [ i ]
>3334	ArrayIndexing	padfZ [ i ]
>3335	Identifier	i
>3336	Identifier	padfZ
>3337	Identifier	dfMaximumValue
>3338	Condition	 
>3339	RelationalExpression	dfMaximumValue < padfZ [ i ]
>3340	ArrayIndexing	padfZ [ i ]
>3341	Identifier	i
>3342	Identifier	padfZ
>3343	Identifier	dfMaximumValue
>3344	Condition	 
>3345	Identifier	n
>3346	Condition	 
>3347	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>3348	Identifier	dfR12
>3349	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>3350	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>3351	MultiplicativeExpression	dfRY * dfRY
>3352	Identifier	dfRY
>3353	Identifier	dfRY
>3354	Identifier	dfRadius1
>3355	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>3356	MultiplicativeExpression	dfRX * dfRX
>3357	Identifier	dfRX
>3358	Identifier	dfRX
>3359	Identifier	dfRadius2
>3360	IfStatement	if ( bRotated )
>3361	CompoundStatement	 
>3362	ExpressionStatement	 
>3363	AssignmentExpr	dfRY = dfRYRotated
>3364	Identifier	dfRYRotated
>3365	Identifier	dfRY
>3366	ExpressionStatement	 
>3367	AssignmentExpr	dfRX = dfRXRotated
>3368	Identifier	dfRXRotated
>3369	Identifier	dfRX
>3370	IdentifierDeclStatement	 
>3371	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>3372	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>3373	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>3374	MultiplicativeExpression	dfRX * dfCoeff2
>3375	Identifier	dfCoeff2
>3376	Identifier	dfRX
>3377	MultiplicativeExpression	dfRY * dfCoeff1
>3378	Identifier	dfCoeff1
>3379	Identifier	dfRY
>3380	Identifier	dfRYRotated
>3381	Identifier	dfRYRotated
>3382	IdentifierDeclType	double
>3383	IdentifierDeclStatement	 
>3384	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>3385	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>3386	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>3387	MultiplicativeExpression	dfRY * dfCoeff2
>3388	Identifier	dfCoeff2
>3389	Identifier	dfRY
>3390	MultiplicativeExpression	dfRX * dfCoeff1
>3391	Identifier	dfCoeff1
>3392	Identifier	dfRX
>3393	Identifier	dfRXRotated
>3394	Identifier	dfRXRotated
>3395	IdentifierDeclType	double
>3396	Condition	 
>3397	Identifier	bRotated
>3398	IdentifierDeclStatement	 
>3399	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>3400	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>3401	AdditiveExpression	padfY [ i ] - dfYPoint
>3402	Identifier	dfYPoint
>3403	ArrayIndexing	padfY [ i ]
>3404	Identifier	i
>3405	Identifier	padfY
>3406	Identifier	dfRY
>3407	Identifier	dfRY
>3408	IdentifierDeclType	double
>3409	IdentifierDeclStatement	 
>3410	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>3411	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>3412	AdditiveExpression	padfX [ i ] - dfXPoint
>3413	Identifier	dfXPoint
>3414	ArrayIndexing	padfX [ i ]
>3415	Identifier	i
>3416	Identifier	padfX
>3417	Identifier	dfRX
>3418	Identifier	dfRX
>3419	IdentifierDeclType	double
>3420	Condition	 
>3421	RelationalExpression	i < nPoints
>3422	Identifier	nPoints
>3423	Identifier	i
>3424	IdentifierDeclStatement	 
>3425	IdentifierDecl	n = 0
>3426	AssignmentExpr	n = 0
>3427	PrimaryExpression	0
>3428	Identifier	n
>3429	Identifier	n
>3430	IdentifierDeclType	GUInt32
>3431	IdentifierDecl	i = 0
>3432	AssignmentExpr	i = 0
>3433	PrimaryExpression	0
>3434	Identifier	i
>3435	Identifier	i
>3436	IdentifierDeclType	GUInt32
>3437	IdentifierDeclStatement	 
>3438	IdentifierDecl	dfMaximumValue = 0.0
>3439	AssignmentExpr	dfMaximumValue = 0.0
>3440	PrimaryExpression	0.0
>3441	Identifier	dfMaximumValue
>3442	Identifier	dfMaximumValue
>3443	IdentifierDeclType	double
>3444	IfStatement	if ( bRotated )
>3445	CompoundStatement	 
>3446	ExpressionStatement	 
>3447	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>3448	CallExpression	sin ( dfAngle )
>3449	ArgumentList	dfAngle
>3450	Argument	dfAngle
>3451	Identifier	dfAngle
>3452	Callee	sin
>3453	Identifier	sin
>3454	Identifier	dfCoeff2
>3455	ExpressionStatement	 
>3456	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>3457	CallExpression	cos ( dfAngle )
>3458	ArgumentList	dfAngle
>3459	Argument	dfAngle
>3460	Identifier	dfAngle
>3461	Callee	cos
>3462	Identifier	cos
>3463	Identifier	dfCoeff1
>3464	Condition	 
>3465	Identifier	bRotated
>3466	IdentifierDeclStatement	 
>3467	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>3468	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>3469	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>3470	Identifier	true
>3471	Identifier	false
>3472	Condition	dfAngle == 0.0
>3473	EqualityExpression	dfAngle == 0.0
>3474	PrimaryExpression	0.0
>3475	Identifier	dfAngle
>3476	Identifier	bRotated
>3477	Identifier	bRotated
>3478	IdentifierDeclType	const bool
>3479	IdentifierDeclStatement	 
>3480	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3481	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3482	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3483	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3484	Identifier	dfAngle
>3485	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3486	Identifier	poOptions
>3487	CastTarget	GDALGridDataMetricsOptions *
>3488	Identifier	TO_RADIANS
>3489	Identifier	dfAngle
>3490	Identifier	dfAngle
>3491	IdentifierDeclType	const double
>3492	IdentifierDeclStatement	 
>3493	IdentifierDecl	dfCoeff2 = 0.0
>3494	AssignmentExpr	dfCoeff2 = 0.0
>3495	PrimaryExpression	0.0
>3496	Identifier	dfCoeff2
>3497	Identifier	dfCoeff2
>3498	IdentifierDeclType	double
>3499	IdentifierDecl	dfCoeff1 = 0.0
>3500	AssignmentExpr	dfCoeff1 = 0.0
>3501	PrimaryExpression	0.0
>3502	Identifier	dfCoeff1
>3503	Identifier	dfCoeff1
>3504	IdentifierDeclType	double
>3505	ExpressionStatement	 
>3506	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>3507	MultiplicativeExpression	dfRadius1 * dfRadius2
>3508	Identifier	dfRadius2
>3509	Identifier	dfRadius1
>3510	Identifier	dfR12
>3511	ExpressionStatement	 
>3512	AssignmentExpr	dfRadius2 *= dfRadius2
>3513	Identifier	dfRadius2
>3514	Identifier	dfRadius2
>3515	ExpressionStatement	 
>3516	AssignmentExpr	dfRadius1 *= dfRadius1
>3517	Identifier	dfRadius1
>3518	Identifier	dfRadius1
>3519	IdentifierDeclStatement	 
>3520	IdentifierDecl	dfR12
>3521	Identifier	dfR12
>3522	IdentifierDeclType	double
>3523	IdentifierDeclStatement	 
>3524	IdentifierDecl	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3525	AssignmentExpr	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3526	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3527	Identifier	dfRadius2
>3528	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3529	Identifier	poOptions
>3530	CastTarget	GDALGridDataMetricsOptions *
>3531	Identifier	dfRadius2
>3532	Identifier	dfRadius2
>3533	IdentifierDeclType	double
>3534	IdentifierDeclStatement	 
>3535	IdentifierDecl	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3536	AssignmentExpr	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3537	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3538	Identifier	dfRadius1
>3539	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3540	Identifier	poOptions
>3541	CastTarget	GDALGridDataMetricsOptions *
>3542	Identifier	dfRadius1
>3543	Identifier	dfRadius1
>3544	IdentifierDeclType	double
>3588	FunctionDef	GDALGridDataMetricRange (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , \
>3589	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>3590	Parameter	 
>3591	Identifier	hExtraParamsIn
>3592	ParameterType	void *
>3593	Parameter	 
>3594	Identifier	pdfValue
>3595	ParameterType	double *
>3596	Parameter	 
>3597	Identifier	dfYPoint
>3598	ParameterType	double
>3599	Parameter	 
>3600	Identifier	dfXPoint
>3601	ParameterType	double
>3602	Parameter	 
>3603	Identifier	padfZ
>3604	ParameterType	const double *
>3605	Parameter	 
>3606	Identifier	padfY
>3607	ParameterType	const double *
>3608	Parameter	 
>3609	Identifier	padfX
>3610	ParameterType	const double *
>3611	Parameter	 
>3612	Identifier	nPoints
>3613	ParameterType	GUInt32
>3614	Parameter	 
>3615	Identifier	poOptions
>3616	ParameterType	const void *
>3617	ReturnType	CPLErr
>3618	CompoundStatement	 
>3619	ReturnStatement	 
>3620	Identifier	CE_None
>3621	IfStatement	if ( n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0 )
>3622	ElseStatement	else
>3623	ExpressionStatement	 
>3624	AssignmentExpr	( * pdfValue ) = dfMaximumValue - dfMinimumValue
>3625	AdditiveExpression	dfMaximumValue - dfMinimumValue
>3626	Identifier	dfMinimumValue
>3627	Identifier	dfMaximumValue
>3628	UnaryOp	* pdfValue
>3629	Identifier	pdfValue
>3630	UnaryOperator	*
>3631	CompoundStatement	 
>3632	ExpressionStatement	 
>3633	AssignmentExpr	( * pdfValue ) = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>3634	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>3635	Identifier	dfNoDataValue
>3636	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3637	Identifier	poOptions
>3638	CastTarget	GDALGridDataMetricsOptions *
>3639	UnaryOp	* pdfValue
>3640	Identifier	pdfValue
>3641	UnaryOperator	*
>3642	Condition	 
>3643	OrExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0
>3644	EqualityExpression	n == 0
>3645	PrimaryExpression	0
>3646	Identifier	n
>3647	RelationalExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>3648	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>3649	Identifier	nMinPoints
>3650	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3651	Identifier	poOptions
>3652	CastTarget	GDALGridDataMetricsOptions *
>3653	Identifier	n
>3654	WhileStatement	while ( i < nPoints )
>3655	CompoundStatement	 
>3656	ExpressionStatement	 
>3657	IncDecOp	i ++
>3658	IncDec	++
>3659	Identifier	i
>3660	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>3661	CompoundStatement	 
>3662	ExpressionStatement	 
>3663	IncDecOp	n ++
>3664	IncDec	++
>3665	Identifier	n
>3666	IfStatement	if ( n )
>3667	ElseStatement	else
>3668	ExpressionStatement	 
>3669	AssignmentExpr	dfMinimumValue = dfMaximumValue = padfZ [ i ]
>3670	AssignmentExpr	dfMaximumValue = padfZ [ i ]
>3671	ArrayIndexing	padfZ [ i ]
>3672	Identifier	i
>3673	Identifier	padfZ
>3674	Identifier	dfMaximumValue
>3675	Identifier	dfMinimumValue
>3676	CompoundStatement	 
>3677	IfStatement	if ( dfMaximumValue < padfZ [ i ] )
>3678	ExpressionStatement	 
>3679	AssignmentExpr	dfMaximumValue = padfZ [ i ]
>3680	ArrayIndexing	padfZ [ i ]
>3681	Identifier	i
>3682	Identifier	padfZ
>3683	Identifier	dfMaximumValue
>3684	Condition	 
>3685	RelationalExpression	dfMaximumValue < padfZ [ i ]
>3686	ArrayIndexing	padfZ [ i ]
>3687	Identifier	i
>3688	Identifier	padfZ
>3689	Identifier	dfMaximumValue
>3690	IfStatement	if ( dfMinimumValue > padfZ [ i ] )
>3691	ExpressionStatement	 
>3692	AssignmentExpr	dfMinimumValue = padfZ [ i ]
>3693	ArrayIndexing	padfZ [ i ]
>3694	Identifier	i
>3695	Identifier	padfZ
>3696	Identifier	dfMinimumValue
>3697	Condition	 
>3698	RelationalExpression	dfMinimumValue > padfZ [ i ]
>3699	ArrayIndexing	padfZ [ i ]
>3700	Identifier	i
>3701	Identifier	padfZ
>3702	Identifier	dfMinimumValue
>3703	Condition	 
>3704	Identifier	n
>3705	Condition	 
>3706	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>3707	Identifier	dfR12
>3708	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>3709	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>3710	MultiplicativeExpression	dfRY * dfRY
>3711	Identifier	dfRY
>3712	Identifier	dfRY
>3713	Identifier	dfRadius1
>3714	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>3715	MultiplicativeExpression	dfRX * dfRX
>3716	Identifier	dfRX
>3717	Identifier	dfRX
>3718	Identifier	dfRadius2
>3719	IfStatement	if ( bRotated )
>3720	CompoundStatement	 
>3721	ExpressionStatement	 
>3722	AssignmentExpr	dfRY = dfRYRotated
>3723	Identifier	dfRYRotated
>3724	Identifier	dfRY
>3725	ExpressionStatement	 
>3726	AssignmentExpr	dfRX = dfRXRotated
>3727	Identifier	dfRXRotated
>3728	Identifier	dfRX
>3729	IdentifierDeclStatement	 
>3730	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>3731	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>3732	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>3733	MultiplicativeExpression	dfRX * dfCoeff2
>3734	Identifier	dfCoeff2
>3735	Identifier	dfRX
>3736	MultiplicativeExpression	dfRY * dfCoeff1
>3737	Identifier	dfCoeff1
>3738	Identifier	dfRY
>3739	Identifier	dfRYRotated
>3740	Identifier	dfRYRotated
>3741	IdentifierDeclType	double
>3742	IdentifierDeclStatement	 
>3743	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>3744	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>3745	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>3746	MultiplicativeExpression	dfRY * dfCoeff2
>3747	Identifier	dfCoeff2
>3748	Identifier	dfRY
>3749	MultiplicativeExpression	dfRX * dfCoeff1
>3750	Identifier	dfCoeff1
>3751	Identifier	dfRX
>3752	Identifier	dfRXRotated
>3753	Identifier	dfRXRotated
>3754	IdentifierDeclType	double
>3755	Condition	 
>3756	Identifier	bRotated
>3757	IdentifierDeclStatement	 
>3758	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>3759	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>3760	AdditiveExpression	padfY [ i ] - dfYPoint
>3761	Identifier	dfYPoint
>3762	ArrayIndexing	padfY [ i ]
>3763	Identifier	i
>3764	Identifier	padfY
>3765	Identifier	dfRY
>3766	Identifier	dfRY
>3767	IdentifierDeclType	double
>3768	IdentifierDeclStatement	 
>3769	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>3770	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>3771	AdditiveExpression	padfX [ i ] - dfXPoint
>3772	Identifier	dfXPoint
>3773	ArrayIndexing	padfX [ i ]
>3774	Identifier	i
>3775	Identifier	padfX
>3776	Identifier	dfRX
>3777	Identifier	dfRX
>3778	IdentifierDeclType	double
>3779	Condition	 
>3780	RelationalExpression	i < nPoints
>3781	Identifier	nPoints
>3782	Identifier	i
>3783	IdentifierDeclStatement	 
>3784	IdentifierDecl	n = 0
>3785	AssignmentExpr	n = 0
>3786	PrimaryExpression	0
>3787	Identifier	n
>3788	Identifier	n
>3789	IdentifierDeclType	GUInt32
>3790	IdentifierDecl	i = 0
>3791	AssignmentExpr	i = 0
>3792	PrimaryExpression	0
>3793	Identifier	i
>3794	Identifier	i
>3795	IdentifierDeclType	GUInt32
>3796	IdentifierDeclStatement	 
>3797	IdentifierDecl	dfMinimumValue = 0.0
>3798	AssignmentExpr	dfMinimumValue = 0.0
>3799	PrimaryExpression	0.0
>3800	Identifier	dfMinimumValue
>3801	Identifier	dfMinimumValue
>3802	IdentifierDeclType	double
>3803	IdentifierDecl	dfMaximumValue = 0.0
>3804	AssignmentExpr	dfMaximumValue = 0.0
>3805	PrimaryExpression	0.0
>3806	Identifier	dfMaximumValue
>3807	Identifier	dfMaximumValue
>3808	IdentifierDeclType	double
>3809	IfStatement	if ( bRotated )
>3810	CompoundStatement	 
>3811	ExpressionStatement	 
>3812	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>3813	CallExpression	sin ( dfAngle )
>3814	ArgumentList	dfAngle
>3815	Argument	dfAngle
>3816	Identifier	dfAngle
>3817	Callee	sin
>3818	Identifier	sin
>3819	Identifier	dfCoeff2
>3820	ExpressionStatement	 
>3821	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>3822	CallExpression	cos ( dfAngle )
>3823	ArgumentList	dfAngle
>3824	Argument	dfAngle
>3825	Identifier	dfAngle
>3826	Callee	cos
>3827	Identifier	cos
>3828	Identifier	dfCoeff1
>3829	Condition	 
>3830	Identifier	bRotated
>3831	IdentifierDeclStatement	 
>3832	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>3833	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>3834	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>3835	Identifier	true
>3836	Identifier	false
>3837	Condition	dfAngle == 0.0
>3838	EqualityExpression	dfAngle == 0.0
>3839	PrimaryExpression	0.0
>3840	Identifier	dfAngle
>3841	Identifier	bRotated
>3842	Identifier	bRotated
>3843	IdentifierDeclType	const bool
>3844	IdentifierDeclStatement	 
>3845	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3846	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3847	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3848	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>3849	Identifier	dfAngle
>3850	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3851	Identifier	poOptions
>3852	CastTarget	GDALGridDataMetricsOptions *
>3853	Identifier	TO_RADIANS
>3854	Identifier	dfAngle
>3855	Identifier	dfAngle
>3856	IdentifierDeclType	const double
>3857	IdentifierDeclStatement	 
>3858	IdentifierDecl	dfCoeff2 = 0.0
>3859	AssignmentExpr	dfCoeff2 = 0.0
>3860	PrimaryExpression	0.0
>3861	Identifier	dfCoeff2
>3862	Identifier	dfCoeff2
>3863	IdentifierDeclType	double
>3864	IdentifierDecl	dfCoeff1 = 0.0
>3865	AssignmentExpr	dfCoeff1 = 0.0
>3866	PrimaryExpression	0.0
>3867	Identifier	dfCoeff1
>3868	Identifier	dfCoeff1
>3869	IdentifierDeclType	double
>3870	ExpressionStatement	 
>3871	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>3872	MultiplicativeExpression	dfRadius1 * dfRadius2
>3873	Identifier	dfRadius2
>3874	Identifier	dfRadius1
>3875	Identifier	dfR12
>3876	ExpressionStatement	 
>3877	AssignmentExpr	dfRadius2 *= dfRadius2
>3878	Identifier	dfRadius2
>3879	Identifier	dfRadius2
>3880	ExpressionStatement	 
>3881	AssignmentExpr	dfRadius1 *= dfRadius1
>3882	Identifier	dfRadius1
>3883	Identifier	dfRadius1
>3884	IdentifierDeclStatement	 
>3885	IdentifierDecl	dfR12
>3886	Identifier	dfR12
>3887	IdentifierDeclType	double
>3888	IdentifierDeclStatement	 
>3889	IdentifierDecl	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3890	AssignmentExpr	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3891	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>3892	Identifier	dfRadius2
>3893	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3894	Identifier	poOptions
>3895	CastTarget	GDALGridDataMetricsOptions *
>3896	Identifier	dfRadius2
>3897	Identifier	dfRadius2
>3898	IdentifierDeclType	double
>3899	IdentifierDeclStatement	 
>3900	IdentifierDecl	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3901	AssignmentExpr	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3902	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>3903	Identifier	dfRadius1
>3904	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>3905	Identifier	poOptions
>3906	CastTarget	GDALGridDataMetricsOptions *
>3907	Identifier	dfRadius1
>3908	Identifier	dfRadius1
>3909	IdentifierDeclType	double
>3954	FunctionDef	GDALGridDataMetricCount (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , \
>3955	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>3956	Parameter	 
>3957	Identifier	hExtraParamsIn
>3958	ParameterType	void *
>3959	Parameter	 
>3960	Identifier	pdfValue
>3961	ParameterType	double *
>3962	Parameter	 
>3963	Identifier	dfYPoint
>3964	ParameterType	double
>3965	Parameter	 
>3966	Identifier	dfXPoint
>3967	ParameterType	double
>3968	Parameter	 
>3969	Identifier	padfZ
>3970	ParameterType	const double *
>3971	Parameter	 
>3972	Identifier	padfY
>3973	ParameterType	const double *
>3974	Parameter	 
>3975	Identifier	padfX
>3976	ParameterType	const double *
>3977	Parameter	 
>3978	Identifier	nPoints
>3979	ParameterType	GUInt32
>3980	Parameter	 
>3981	Identifier	poOptions
>3982	ParameterType	const void *
>3983	ReturnType	CPLErr
>3984	CompoundStatement	 
>3985	ReturnStatement	 
>3986	Identifier	CE_None
>3987	IfStatement	if ( n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints )
>3988	ElseStatement	else
>3989	ExpressionStatement	 
>3990	AssignmentExpr	( * pdfValue ) = ( double ) n
>3991	CastExpression	( double ) n
>3992	Identifier	n
>3993	CastTarget	double
>3994	UnaryOp	* pdfValue
>3995	Identifier	pdfValue
>3996	UnaryOperator	*
>3997	CompoundStatement	 
>3998	ExpressionStatement	 
>3999	AssignmentExpr	( * pdfValue ) = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>4000	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>4001	Identifier	dfNoDataValue
>4002	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4003	Identifier	poOptions
>4004	CastTarget	GDALGridDataMetricsOptions *
>4005	UnaryOp	* pdfValue
>4006	Identifier	pdfValue
>4007	UnaryOperator	*
>4008	Condition	 
>4009	RelationalExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>4010	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>4011	Identifier	nMinPoints
>4012	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4013	Identifier	poOptions
>4014	CastTarget	GDALGridDataMetricsOptions *
>4015	Identifier	n
>4016	WhileStatement	while ( i < nPoints )
>4017	CompoundStatement	 
>4018	ExpressionStatement	 
>4019	IncDecOp	i ++
>4020	IncDec	++
>4021	Identifier	i
>4022	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>4023	ExpressionStatement	 
>4024	IncDecOp	n ++
>4025	IncDec	++
>4026	Identifier	n
>4027	Condition	 
>4028	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>4029	Identifier	dfR12
>4030	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>4031	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>4032	MultiplicativeExpression	dfRY * dfRY
>4033	Identifier	dfRY
>4034	Identifier	dfRY
>4035	Identifier	dfRadius1
>4036	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>4037	MultiplicativeExpression	dfRX * dfRX
>4038	Identifier	dfRX
>4039	Identifier	dfRX
>4040	Identifier	dfRadius2
>4041	IfStatement	if ( bRotated )
>4042	CompoundStatement	 
>4043	ExpressionStatement	 
>4044	AssignmentExpr	dfRY = dfRYRotated
>4045	Identifier	dfRYRotated
>4046	Identifier	dfRY
>4047	ExpressionStatement	 
>4048	AssignmentExpr	dfRX = dfRXRotated
>4049	Identifier	dfRXRotated
>4050	Identifier	dfRX
>4051	IdentifierDeclStatement	 
>4052	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>4053	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>4054	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>4055	MultiplicativeExpression	dfRX * dfCoeff2
>4056	Identifier	dfCoeff2
>4057	Identifier	dfRX
>4058	MultiplicativeExpression	dfRY * dfCoeff1
>4059	Identifier	dfCoeff1
>4060	Identifier	dfRY
>4061	Identifier	dfRYRotated
>4062	Identifier	dfRYRotated
>4063	IdentifierDeclType	double
>4064	IdentifierDeclStatement	 
>4065	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>4066	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>4067	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>4068	MultiplicativeExpression	dfRY * dfCoeff2
>4069	Identifier	dfCoeff2
>4070	Identifier	dfRY
>4071	MultiplicativeExpression	dfRX * dfCoeff1
>4072	Identifier	dfCoeff1
>4073	Identifier	dfRX
>4074	Identifier	dfRXRotated
>4075	Identifier	dfRXRotated
>4076	IdentifierDeclType	double
>4077	Condition	 
>4078	Identifier	bRotated
>4079	IdentifierDeclStatement	 
>4080	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>4081	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>4082	AdditiveExpression	padfY [ i ] - dfYPoint
>4083	Identifier	dfYPoint
>4084	ArrayIndexing	padfY [ i ]
>4085	Identifier	i
>4086	Identifier	padfY
>4087	Identifier	dfRY
>4088	Identifier	dfRY
>4089	IdentifierDeclType	double
>4090	IdentifierDeclStatement	 
>4091	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>4092	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>4093	AdditiveExpression	padfX [ i ] - dfXPoint
>4094	Identifier	dfXPoint
>4095	ArrayIndexing	padfX [ i ]
>4096	Identifier	i
>4097	Identifier	padfX
>4098	Identifier	dfRX
>4099	Identifier	dfRX
>4100	IdentifierDeclType	double
>4101	Condition	 
>4102	RelationalExpression	i < nPoints
>4103	Identifier	nPoints
>4104	Identifier	i
>4105	IdentifierDeclStatement	 
>4106	IdentifierDecl	n = 0
>4107	AssignmentExpr	n = 0
>4108	PrimaryExpression	0
>4109	Identifier	n
>4110	Identifier	n
>4111	IdentifierDeclType	GUInt32
>4112	IdentifierDecl	i = 0
>4113	AssignmentExpr	i = 0
>4114	PrimaryExpression	0
>4115	Identifier	i
>4116	Identifier	i
>4117	IdentifierDeclType	GUInt32
>4118	IfStatement	if ( bRotated )
>4119	CompoundStatement	 
>4120	ExpressionStatement	 
>4121	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>4122	CallExpression	sin ( dfAngle )
>4123	ArgumentList	dfAngle
>4124	Argument	dfAngle
>4125	Identifier	dfAngle
>4126	Callee	sin
>4127	Identifier	sin
>4128	Identifier	dfCoeff2
>4129	ExpressionStatement	 
>4130	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>4131	CallExpression	cos ( dfAngle )
>4132	ArgumentList	dfAngle
>4133	Argument	dfAngle
>4134	Identifier	dfAngle
>4135	Callee	cos
>4136	Identifier	cos
>4137	Identifier	dfCoeff1
>4138	Condition	 
>4139	Identifier	bRotated
>4140	IdentifierDeclStatement	 
>4141	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>4142	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>4143	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>4144	Identifier	true
>4145	Identifier	false
>4146	Condition	dfAngle == 0.0
>4147	EqualityExpression	dfAngle == 0.0
>4148	PrimaryExpression	0.0
>4149	Identifier	dfAngle
>4150	Identifier	bRotated
>4151	Identifier	bRotated
>4152	IdentifierDeclType	const bool
>4153	IdentifierDeclStatement	 
>4154	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4155	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4156	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4157	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4158	Identifier	dfAngle
>4159	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4160	Identifier	poOptions
>4161	CastTarget	GDALGridDataMetricsOptions *
>4162	Identifier	TO_RADIANS
>4163	Identifier	dfAngle
>4164	Identifier	dfAngle
>4165	IdentifierDeclType	const double
>4166	IdentifierDeclStatement	 
>4167	IdentifierDecl	dfCoeff2 = 0.0
>4168	AssignmentExpr	dfCoeff2 = 0.0
>4169	PrimaryExpression	0.0
>4170	Identifier	dfCoeff2
>4171	Identifier	dfCoeff2
>4172	IdentifierDeclType	double
>4173	IdentifierDecl	dfCoeff1 = 0.0
>4174	AssignmentExpr	dfCoeff1 = 0.0
>4175	PrimaryExpression	0.0
>4176	Identifier	dfCoeff1
>4177	Identifier	dfCoeff1
>4178	IdentifierDeclType	double
>4179	ExpressionStatement	 
>4180	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>4181	MultiplicativeExpression	dfRadius1 * dfRadius2
>4182	Identifier	dfRadius2
>4183	Identifier	dfRadius1
>4184	Identifier	dfR12
>4185	ExpressionStatement	 
>4186	AssignmentExpr	dfRadius2 *= dfRadius2
>4187	Identifier	dfRadius2
>4188	Identifier	dfRadius2
>4189	ExpressionStatement	 
>4190	AssignmentExpr	dfRadius1 *= dfRadius1
>4191	Identifier	dfRadius1
>4192	Identifier	dfRadius1
>4193	IdentifierDeclStatement	 
>4194	IdentifierDecl	dfR12
>4195	Identifier	dfR12
>4196	IdentifierDeclType	double
>4197	IdentifierDeclStatement	 
>4198	IdentifierDecl	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4199	AssignmentExpr	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4200	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4201	Identifier	dfRadius2
>4202	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4203	Identifier	poOptions
>4204	CastTarget	GDALGridDataMetricsOptions *
>4205	Identifier	dfRadius2
>4206	Identifier	dfRadius2
>4207	IdentifierDeclType	double
>4208	IdentifierDeclStatement	 
>4209	IdentifierDecl	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>4210	AssignmentExpr	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>4211	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>4212	Identifier	dfRadius1
>4213	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4214	Identifier	poOptions
>4215	CastTarget	GDALGridDataMetricsOptions *
>4216	Identifier	dfRadius1
>4217	Identifier	dfRadius1
>4218	IdentifierDeclType	double
>4260	FunctionDef	GDALGridDataMetricAverageDistance (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * \
>4261	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>4262	Parameter	 
>4263	Identifier	hExtraParamsIn
>4264	ParameterType	void *
>4265	Parameter	 
>4266	Identifier	pdfValue
>4267	ParameterType	double *
>4268	Parameter	 
>4269	Identifier	dfYPoint
>4270	ParameterType	double
>4271	Parameter	 
>4272	Identifier	dfXPoint
>4273	ParameterType	double
>4274	Parameter	 
>4275	Identifier	padfZ
>4276	ParameterType	const double *
>4277	Parameter	 
>4278	Identifier	padfY
>4279	ParameterType	const double *
>4280	Parameter	 
>4281	Identifier	padfX
>4282	ParameterType	const double *
>4283	Parameter	 
>4284	Identifier	nPoints
>4285	ParameterType	GUInt32
>4286	Parameter	 
>4287	Identifier	poOptions
>4288	ParameterType	const void *
>4289	ReturnType	CPLErr
>4290	CompoundStatement	 
>4291	ReturnStatement	 
>4292	Identifier	CE_None
>4293	IfStatement	if ( n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0 )
>4294	ElseStatement	else
>4295	ExpressionStatement	 
>4296	AssignmentExpr	( * pdfValue ) = dfAccumulator / n
>4297	MultiplicativeExpression	dfAccumulator / n
>4298	Identifier	n
>4299	Identifier	dfAccumulator
>4300	UnaryOp	* pdfValue
>4301	Identifier	pdfValue
>4302	UnaryOperator	*
>4303	CompoundStatement	 
>4304	ExpressionStatement	 
>4305	AssignmentExpr	( * pdfValue ) = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>4306	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>4307	Identifier	dfNoDataValue
>4308	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4309	Identifier	poOptions
>4310	CastTarget	GDALGridDataMetricsOptions *
>4311	UnaryOp	* pdfValue
>4312	Identifier	pdfValue
>4313	UnaryOperator	*
>4314	Condition	 
>4315	OrExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0
>4316	EqualityExpression	n == 0
>4317	PrimaryExpression	0
>4318	Identifier	n
>4319	RelationalExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>4320	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>4321	Identifier	nMinPoints
>4322	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4323	Identifier	poOptions
>4324	CastTarget	GDALGridDataMetricsOptions *
>4325	Identifier	n
>4326	WhileStatement	while ( i < nPoints )
>4327	CompoundStatement	 
>4328	ExpressionStatement	 
>4329	IncDecOp	i ++
>4330	IncDec	++
>4331	Identifier	i
>4332	IfStatement	if ( dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12 )
>4333	CompoundStatement	 
>4334	ExpressionStatement	 
>4335	IncDecOp	n ++
>4336	IncDec	++
>4337	Identifier	n
>4338	ExpressionStatement	 
>4339	AssignmentExpr	dfAccumulator += sqrt ( dfRX * dfRX + dfRY * dfRY )
>4340	CallExpression	sqrt ( dfRX * dfRX + dfRY * dfRY )
>4341	ArgumentList	dfRX * dfRX + dfRY * dfRY
>4342	Argument	dfRX * dfRX + dfRY * dfRY
>4343	AdditiveExpression	dfRX * dfRX + dfRY * dfRY
>4344	MultiplicativeExpression	dfRY * dfRY
>4345	Identifier	dfRY
>4346	Identifier	dfRY
>4347	MultiplicativeExpression	dfRX * dfRX
>4348	Identifier	dfRX
>4349	Identifier	dfRX
>4350	Callee	sqrt
>4351	Identifier	sqrt
>4352	Identifier	dfAccumulator
>4353	Condition	 
>4354	RelationalExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY <= dfR12
>4355	Identifier	dfR12
>4356	AdditiveExpression	dfRadius2 * dfRX * dfRX + dfRadius1 * dfRY * dfRY
>4357	MultiplicativeExpression	dfRadius1 * dfRY * dfRY
>4358	MultiplicativeExpression	dfRY * dfRY
>4359	Identifier	dfRY
>4360	Identifier	dfRY
>4361	Identifier	dfRadius1
>4362	MultiplicativeExpression	dfRadius2 * dfRX * dfRX
>4363	MultiplicativeExpression	dfRX * dfRX
>4364	Identifier	dfRX
>4365	Identifier	dfRX
>4366	Identifier	dfRadius2
>4367	IfStatement	if ( bRotated )
>4368	CompoundStatement	 
>4369	ExpressionStatement	 
>4370	AssignmentExpr	dfRY = dfRYRotated
>4371	Identifier	dfRYRotated
>4372	Identifier	dfRY
>4373	ExpressionStatement	 
>4374	AssignmentExpr	dfRX = dfRXRotated
>4375	Identifier	dfRXRotated
>4376	Identifier	dfRX
>4377	IdentifierDeclStatement	 
>4378	IdentifierDecl	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>4379	AssignmentExpr	dfRYRotated = dfRY * dfCoeff1 - dfRX * dfCoeff2
>4380	AdditiveExpression	dfRY * dfCoeff1 - dfRX * dfCoeff2
>4381	MultiplicativeExpression	dfRX * dfCoeff2
>4382	Identifier	dfCoeff2
>4383	Identifier	dfRX
>4384	MultiplicativeExpression	dfRY * dfCoeff1
>4385	Identifier	dfCoeff1
>4386	Identifier	dfRY
>4387	Identifier	dfRYRotated
>4388	Identifier	dfRYRotated
>4389	IdentifierDeclType	double
>4390	IdentifierDeclStatement	 
>4391	IdentifierDecl	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>4392	AssignmentExpr	dfRXRotated = dfRX * dfCoeff1 + dfRY * dfCoeff2
>4393	AdditiveExpression	dfRX * dfCoeff1 + dfRY * dfCoeff2
>4394	MultiplicativeExpression	dfRY * dfCoeff2
>4395	Identifier	dfCoeff2
>4396	Identifier	dfRY
>4397	MultiplicativeExpression	dfRX * dfCoeff1
>4398	Identifier	dfCoeff1
>4399	Identifier	dfRX
>4400	Identifier	dfRXRotated
>4401	Identifier	dfRXRotated
>4402	IdentifierDeclType	double
>4403	Condition	 
>4404	Identifier	bRotated
>4405	IdentifierDeclStatement	 
>4406	IdentifierDecl	dfRY = padfY [ i ] - dfYPoint
>4407	AssignmentExpr	dfRY = padfY [ i ] - dfYPoint
>4408	AdditiveExpression	padfY [ i ] - dfYPoint
>4409	Identifier	dfYPoint
>4410	ArrayIndexing	padfY [ i ]
>4411	Identifier	i
>4412	Identifier	padfY
>4413	Identifier	dfRY
>4414	Identifier	dfRY
>4415	IdentifierDeclType	double
>4416	IdentifierDeclStatement	 
>4417	IdentifierDecl	dfRX = padfX [ i ] - dfXPoint
>4418	AssignmentExpr	dfRX = padfX [ i ] - dfXPoint
>4419	AdditiveExpression	padfX [ i ] - dfXPoint
>4420	Identifier	dfXPoint
>4421	ArrayIndexing	padfX [ i ]
>4422	Identifier	i
>4423	Identifier	padfX
>4424	Identifier	dfRX
>4425	Identifier	dfRX
>4426	IdentifierDeclType	double
>4427	Condition	 
>4428	RelationalExpression	i < nPoints
>4429	Identifier	nPoints
>4430	Identifier	i
>4431	IdentifierDeclStatement	 
>4432	IdentifierDecl	n = 0
>4433	AssignmentExpr	n = 0
>4434	PrimaryExpression	0
>4435	Identifier	n
>4436	Identifier	n
>4437	IdentifierDeclType	GUInt32
>4438	IdentifierDecl	i = 0
>4439	AssignmentExpr	i = 0
>4440	PrimaryExpression	0
>4441	Identifier	i
>4442	Identifier	i
>4443	IdentifierDeclType	GUInt32
>4444	IdentifierDeclStatement	 
>4445	IdentifierDecl	dfAccumulator = 0.0
>4446	AssignmentExpr	dfAccumulator = 0.0
>4447	PrimaryExpression	0.0
>4448	Identifier	dfAccumulator
>4449	Identifier	dfAccumulator
>4450	IdentifierDeclType	double
>4451	IfStatement	if ( bRotated )
>4452	CompoundStatement	 
>4453	ExpressionStatement	 
>4454	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>4455	CallExpression	sin ( dfAngle )
>4456	ArgumentList	dfAngle
>4457	Argument	dfAngle
>4458	Identifier	dfAngle
>4459	Callee	sin
>4460	Identifier	sin
>4461	Identifier	dfCoeff2
>4462	ExpressionStatement	 
>4463	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>4464	CallExpression	cos ( dfAngle )
>4465	ArgumentList	dfAngle
>4466	Argument	dfAngle
>4467	Identifier	dfAngle
>4468	Callee	cos
>4469	Identifier	cos
>4470	Identifier	dfCoeff1
>4471	Condition	 
>4472	Identifier	bRotated
>4473	IdentifierDeclStatement	 
>4474	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>4475	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>4476	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>4477	Identifier	true
>4478	Identifier	false
>4479	Condition	dfAngle == 0.0
>4480	EqualityExpression	dfAngle == 0.0
>4481	PrimaryExpression	0.0
>4482	Identifier	dfAngle
>4483	Identifier	bRotated
>4484	Identifier	bRotated
>4485	IdentifierDeclType	const bool
>4486	IdentifierDeclStatement	 
>4487	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4488	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4489	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4490	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4491	Identifier	dfAngle
>4492	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4493	Identifier	poOptions
>4494	CastTarget	GDALGridDataMetricsOptions *
>4495	Identifier	TO_RADIANS
>4496	Identifier	dfAngle
>4497	Identifier	dfAngle
>4498	IdentifierDeclType	const double
>4499	IdentifierDeclStatement	 
>4500	IdentifierDecl	dfCoeff2 = 0.0
>4501	AssignmentExpr	dfCoeff2 = 0.0
>4502	PrimaryExpression	0.0
>4503	Identifier	dfCoeff2
>4504	Identifier	dfCoeff2
>4505	IdentifierDeclType	double
>4506	IdentifierDecl	dfCoeff1 = 0.0
>4507	AssignmentExpr	dfCoeff1 = 0.0
>4508	PrimaryExpression	0.0
>4509	Identifier	dfCoeff1
>4510	Identifier	dfCoeff1
>4511	IdentifierDeclType	double
>4512	ExpressionStatement	 
>4513	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>4514	MultiplicativeExpression	dfRadius1 * dfRadius2
>4515	Identifier	dfRadius2
>4516	Identifier	dfRadius1
>4517	Identifier	dfR12
>4518	ExpressionStatement	 
>4519	AssignmentExpr	dfRadius2 *= dfRadius2
>4520	Identifier	dfRadius2
>4521	Identifier	dfRadius2
>4522	ExpressionStatement	 
>4523	AssignmentExpr	dfRadius1 *= dfRadius1
>4524	Identifier	dfRadius1
>4525	Identifier	dfRadius1
>4526	IdentifierDeclStatement	 
>4527	IdentifierDecl	dfR12
>4528	Identifier	dfR12
>4529	IdentifierDeclType	double
>4530	IdentifierDeclStatement	 
>4531	IdentifierDecl	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4532	AssignmentExpr	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4533	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4534	Identifier	dfRadius2
>4535	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4536	Identifier	poOptions
>4537	CastTarget	GDALGridDataMetricsOptions *
>4538	Identifier	dfRadius2
>4539	Identifier	dfRadius2
>4540	IdentifierDeclType	double
>4541	IdentifierDeclStatement	 
>4542	IdentifierDecl	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>4543	AssignmentExpr	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>4544	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>4545	Identifier	dfRadius1
>4546	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4547	Identifier	poOptions
>4548	CastTarget	GDALGridDataMetricsOptions *
>4549	Identifier	dfRadius1
>4550	Identifier	dfRadius1
>4551	IdentifierDeclType	double
>4595	FunctionDef	GDALGridDataMetricAverageDistancePts (const void * poOptions , GUInt32 nPoints , const double * padfX , const double * \
>4596	ParameterList	const void * poOptions , GUInt32 nPoints , const double * padfX , const double * padfY , const double * padfZ , \
>4597	Parameter	 
>4598	Identifier	hExtraParamsIn
>4599	ParameterType	void *
>4600	Parameter	 
>4601	Identifier	pdfValue
>4602	ParameterType	double *
>4603	Parameter	 
>4604	Identifier	dfYPoint
>4605	ParameterType	double
>4606	Parameter	 
>4607	Identifier	dfXPoint
>4608	ParameterType	double
>4609	Parameter	 
>4610	Identifier	padfZ
>4611	ParameterType	const double *
>4612	Parameter	 
>4613	Identifier	padfY
>4614	ParameterType	const double *
>4615	Parameter	 
>4616	Identifier	padfX
>4617	ParameterType	const double *
>4618	Parameter	 
>4619	Identifier	nPoints
>4620	ParameterType	GUInt32
>4621	Parameter	 
>4622	Identifier	poOptions
>4623	ParameterType	const void *
>4624	ReturnType	CPLErr
>4625	CompoundStatement	 
>4626	ReturnStatement	 
>4627	Identifier	CE_None
>4628	IfStatement	if ( n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0 )
>4629	ElseStatement	else
>4630	ExpressionStatement	 
>4631	AssignmentExpr	( * pdfValue ) = dfAccumulator / n
>4632	MultiplicativeExpression	dfAccumulator / n
>4633	Identifier	n
>4634	Identifier	dfAccumulator
>4635	UnaryOp	* pdfValue
>4636	Identifier	pdfValue
>4637	UnaryOperator	*
>4638	CompoundStatement	 
>4639	ExpressionStatement	 
>4640	AssignmentExpr	( * pdfValue ) = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>4641	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfNoDataValue
>4642	Identifier	dfNoDataValue
>4643	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4644	Identifier	poOptions
>4645	CastTarget	GDALGridDataMetricsOptions *
>4646	UnaryOp	* pdfValue
>4647	Identifier	pdfValue
>4648	UnaryOperator	*
>4649	Condition	 
>4650	OrExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints || n == 0
>4651	EqualityExpression	n == 0
>4652	PrimaryExpression	0
>4653	Identifier	n
>4654	RelationalExpression	n < ( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>4655	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> nMinPoints
>4656	Identifier	nMinPoints
>4657	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4658	Identifier	poOptions
>4659	CastTarget	GDALGridDataMetricsOptions *
>4660	Identifier	n
>4661	WhileStatement	while ( i < nPoints - 1 )
>4662	CompoundStatement	 
>4663	ExpressionStatement	 
>4664	IncDecOp	i ++
>4665	IncDec	++
>4666	Identifier	i
>4667	IfStatement	if ( dfRadius2 * dfRX1 * dfRX1 + dfRadius1 * dfRY1 * dfRY1 <= dfR12 )
>4668	CompoundStatement	 
>4669	ForStatement	for ( j = i + 1 ; j < nPoints ; j ++ )
>4670	CompoundStatement	 
>4671	IfStatement	if ( dfRadius2 * dfRX2 * dfRX2 + dfRadius1 * dfRY2 * dfRY2 <= dfR12 )
>4672	CompoundStatement	 
>4673	ExpressionStatement	 
>4674	IncDecOp	n ++
>4675	IncDec	++
>4676	Identifier	n
>4677	ExpressionStatement	 
>4678	AssignmentExpr	dfAccumulator += sqrt ( dfRX * dfRX + dfRY * dfRY )
>4679	CallExpression	sqrt ( dfRX * dfRX + dfRY * dfRY )
>4680	ArgumentList	dfRX * dfRX + dfRY * dfRY
>4681	Argument	dfRX * dfRX + dfRY * dfRY
>4682	AdditiveExpression	dfRX * dfRX + dfRY * dfRY
>4683	MultiplicativeExpression	dfRY * dfRY
>4684	Identifier	dfRY
>4685	Identifier	dfRY
>4686	MultiplicativeExpression	dfRX * dfRX
>4687	Identifier	dfRX
>4688	Identifier	dfRX
>4689	Callee	sqrt
>4690	Identifier	sqrt
>4691	Identifier	dfAccumulator
>4692	IdentifierDeclStatement	 
>4693	IdentifierDecl	dfRY = padfY [ j ] - padfY [ i ]
>4694	AssignmentExpr	dfRY = padfY [ j ] - padfY [ i ]
>4695	AdditiveExpression	padfY [ j ] - padfY [ i ]
>4696	ArrayIndexing	padfY [ i ]
>4697	Identifier	i
>4698	Identifier	padfY
>4699	ArrayIndexing	padfY [ j ]
>4700	Identifier	j
>4701	Identifier	padfY
>4702	Identifier	dfRY
>4703	Identifier	dfRY
>4704	IdentifierDeclType	const double
>4705	IdentifierDeclStatement	 
>4706	IdentifierDecl	dfRX = padfX [ j ] - padfX [ i ]
>4707	AssignmentExpr	dfRX = padfX [ j ] - padfX [ i ]
>4708	AdditiveExpression	padfX [ j ] - padfX [ i ]
>4709	ArrayIndexing	padfX [ i ]
>4710	Identifier	i
>4711	Identifier	padfX
>4712	ArrayIndexing	padfX [ j ]
>4713	Identifier	j
>4714	Identifier	padfX
>4715	Identifier	dfRX
>4716	Identifier	dfRX
>4717	IdentifierDeclType	const double
>4718	Condition	 
>4719	RelationalExpression	dfRadius2 * dfRX2 * dfRX2 + dfRadius1 * dfRY2 * dfRY2 <= dfR12
>4720	Identifier	dfR12
>4721	AdditiveExpression	dfRadius2 * dfRX2 * dfRX2 + dfRadius1 * dfRY2 * dfRY2
>4722	MultiplicativeExpression	dfRadius1 * dfRY2 * dfRY2
>4723	MultiplicativeExpression	dfRY2 * dfRY2
>4724	Identifier	dfRY2
>4725	Identifier	dfRY2
>4726	Identifier	dfRadius1
>4727	MultiplicativeExpression	dfRadius2 * dfRX2 * dfRX2
>4728	MultiplicativeExpression	dfRX2 * dfRX2
>4729	Identifier	dfRX2
>4730	Identifier	dfRX2
>4731	Identifier	dfRadius2
>4732	IfStatement	if ( bRotated )
>4733	CompoundStatement	 
>4734	ExpressionStatement	 
>4735	AssignmentExpr	dfRY2 = dfRYRotated
>4736	Identifier	dfRYRotated
>4737	Identifier	dfRY2
>4738	ExpressionStatement	 
>4739	AssignmentExpr	dfRX2 = dfRXRotated
>4740	Identifier	dfRXRotated
>4741	Identifier	dfRX2
>4742	IdentifierDeclStatement	 
>4743	IdentifierDecl	dfRYRotated = dfRY2 * dfCoeff1 - dfRX2 * dfCoeff2
>4744	AssignmentExpr	dfRYRotated = dfRY2 * dfCoeff1 - dfRX2 * dfCoeff2
>4745	AdditiveExpression	dfRY2 * dfCoeff1 - dfRX2 * dfCoeff2
>4746	MultiplicativeExpression	dfRX2 * dfCoeff2
>4747	Identifier	dfCoeff2
>4748	Identifier	dfRX2
>4749	MultiplicativeExpression	dfRY2 * dfCoeff1
>4750	Identifier	dfCoeff1
>4751	Identifier	dfRY2
>4752	Identifier	dfRYRotated
>4753	Identifier	dfRYRotated
>4754	IdentifierDeclType	double
>4755	IdentifierDeclStatement	 
>4756	IdentifierDecl	dfRXRotated = dfRX2 * dfCoeff1 + dfRY2 * dfCoeff2
>4757	AssignmentExpr	dfRXRotated = dfRX2 * dfCoeff1 + dfRY2 * dfCoeff2
>4758	AdditiveExpression	dfRX2 * dfCoeff1 + dfRY2 * dfCoeff2
>4759	MultiplicativeExpression	dfRY2 * dfCoeff2
>4760	Identifier	dfCoeff2
>4761	Identifier	dfRY2
>4762	MultiplicativeExpression	dfRX2 * dfCoeff1
>4763	Identifier	dfCoeff1
>4764	Identifier	dfRX2
>4765	Identifier	dfRXRotated
>4766	Identifier	dfRXRotated
>4767	IdentifierDeclType	double
>4768	Condition	 
>4769	Identifier	bRotated
>4770	IdentifierDeclStatement	 
>4771	IdentifierDecl	dfRY2 = padfY [ j ] - dfYPoint
>4772	AssignmentExpr	dfRY2 = padfY [ j ] - dfYPoint
>4773	AdditiveExpression	padfY [ j ] - dfYPoint
>4774	Identifier	dfYPoint
>4775	ArrayIndexing	padfY [ j ]
>4776	Identifier	j
>4777	Identifier	padfY
>4778	Identifier	dfRY2
>4779	Identifier	dfRY2
>4780	IdentifierDeclType	double
>4781	IdentifierDeclStatement	 
>4782	IdentifierDecl	dfRX2 = padfX [ j ] - dfXPoint
>4783	AssignmentExpr	dfRX2 = padfX [ j ] - dfXPoint
>4784	AdditiveExpression	padfX [ j ] - dfXPoint
>4785	Identifier	dfXPoint
>4786	ArrayIndexing	padfX [ j ]
>4787	Identifier	j
>4788	Identifier	padfX
>4789	Identifier	dfRX2
>4790	Identifier	dfRX2
>4791	IdentifierDeclType	double
>4792	IncDecOp	 
>4793	IncDec	++
>4794	Identifier	j
>4795	Condition	 
>4796	RelationalExpression	j < nPoints
>4797	Identifier	nPoints
>4798	Identifier	j
>4799	ForInit	 
>4800	AssignmentExpr	j = i + 1
>4801	AdditiveExpression	i + 1
>4802	PrimaryExpression	1
>4803	Identifier	i
>4804	Identifier	j
>4805	IdentifierDeclStatement	 
>4806	IdentifierDecl	j
>4807	Identifier	j
>4808	IdentifierDeclType	GUInt32
>4809	Condition	 
>4810	RelationalExpression	dfRadius2 * dfRX1 * dfRX1 + dfRadius1 * dfRY1 * dfRY1 <= dfR12
>4811	Identifier	dfR12
>4812	AdditiveExpression	dfRadius2 * dfRX1 * dfRX1 + dfRadius1 * dfRY1 * dfRY1
>4813	MultiplicativeExpression	dfRadius1 * dfRY1 * dfRY1
>4814	MultiplicativeExpression	dfRY1 * dfRY1
>4815	Identifier	dfRY1
>4816	Identifier	dfRY1
>4817	Identifier	dfRadius1
>4818	MultiplicativeExpression	dfRadius2 * dfRX1 * dfRX1
>4819	MultiplicativeExpression	dfRX1 * dfRX1
>4820	Identifier	dfRX1
>4821	Identifier	dfRX1
>4822	Identifier	dfRadius2
>4823	IfStatement	if ( bRotated )
>4824	CompoundStatement	 
>4825	ExpressionStatement	 
>4826	AssignmentExpr	dfRY1 = dfRYRotated
>4827	Identifier	dfRYRotated
>4828	Identifier	dfRY1
>4829	ExpressionStatement	 
>4830	AssignmentExpr	dfRX1 = dfRXRotated
>4831	Identifier	dfRXRotated
>4832	Identifier	dfRX1
>4833	IdentifierDeclStatement	 
>4834	IdentifierDecl	dfRYRotated = dfRY1 * dfCoeff1 - dfRX1 * dfCoeff2
>4835	AssignmentExpr	dfRYRotated = dfRY1 * dfCoeff1 - dfRX1 * dfCoeff2
>4836	AdditiveExpression	dfRY1 * dfCoeff1 - dfRX1 * dfCoeff2
>4837	MultiplicativeExpression	dfRX1 * dfCoeff2
>4838	Identifier	dfCoeff2
>4839	Identifier	dfRX1
>4840	MultiplicativeExpression	dfRY1 * dfCoeff1
>4841	Identifier	dfCoeff1
>4842	Identifier	dfRY1
>4843	Identifier	dfRYRotated
>4844	Identifier	dfRYRotated
>4845	IdentifierDeclType	double
>4846	IdentifierDeclStatement	 
>4847	IdentifierDecl	dfRXRotated = dfRX1 * dfCoeff1 + dfRY1 * dfCoeff2
>4848	AssignmentExpr	dfRXRotated = dfRX1 * dfCoeff1 + dfRY1 * dfCoeff2
>4849	AdditiveExpression	dfRX1 * dfCoeff1 + dfRY1 * dfCoeff2
>4850	MultiplicativeExpression	dfRY1 * dfCoeff2
>4851	Identifier	dfCoeff2
>4852	Identifier	dfRY1
>4853	MultiplicativeExpression	dfRX1 * dfCoeff1
>4854	Identifier	dfCoeff1
>4855	Identifier	dfRX1
>4856	Identifier	dfRXRotated
>4857	Identifier	dfRXRotated
>4858	IdentifierDeclType	double
>4859	Condition	 
>4860	Identifier	bRotated
>4861	IdentifierDeclStatement	 
>4862	IdentifierDecl	dfRY1 = padfY [ i ] - dfYPoint
>4863	AssignmentExpr	dfRY1 = padfY [ i ] - dfYPoint
>4864	AdditiveExpression	padfY [ i ] - dfYPoint
>4865	Identifier	dfYPoint
>4866	ArrayIndexing	padfY [ i ]
>4867	Identifier	i
>4868	Identifier	padfY
>4869	Identifier	dfRY1
>4870	Identifier	dfRY1
>4871	IdentifierDeclType	double
>4872	IdentifierDeclStatement	 
>4873	IdentifierDecl	dfRX1 = padfX [ i ] - dfXPoint
>4874	AssignmentExpr	dfRX1 = padfX [ i ] - dfXPoint
>4875	AdditiveExpression	padfX [ i ] - dfXPoint
>4876	Identifier	dfXPoint
>4877	ArrayIndexing	padfX [ i ]
>4878	Identifier	i
>4879	Identifier	padfX
>4880	Identifier	dfRX1
>4881	Identifier	dfRX1
>4882	IdentifierDeclType	double
>4883	Condition	 
>4884	RelationalExpression	i < nPoints - 1
>4885	AdditiveExpression	nPoints - 1
>4886	PrimaryExpression	1
>4887	Identifier	nPoints
>4888	Identifier	i
>4889	IdentifierDeclStatement	 
>4890	IdentifierDecl	n = 0
>4891	AssignmentExpr	n = 0
>4892	PrimaryExpression	0
>4893	Identifier	n
>4894	Identifier	n
>4895	IdentifierDeclType	GUInt32
>4896	IdentifierDecl	i = 0
>4897	AssignmentExpr	i = 0
>4898	PrimaryExpression	0
>4899	Identifier	i
>4900	Identifier	i
>4901	IdentifierDeclType	GUInt32
>4902	IdentifierDeclStatement	 
>4903	IdentifierDecl	dfAccumulator = 0.0
>4904	AssignmentExpr	dfAccumulator = 0.0
>4905	PrimaryExpression	0.0
>4906	Identifier	dfAccumulator
>4907	Identifier	dfAccumulator
>4908	IdentifierDeclType	double
>4909	IfStatement	if ( bRotated )
>4910	CompoundStatement	 
>4911	ExpressionStatement	 
>4912	AssignmentExpr	dfCoeff2 = sin ( dfAngle )
>4913	CallExpression	sin ( dfAngle )
>4914	ArgumentList	dfAngle
>4915	Argument	dfAngle
>4916	Identifier	dfAngle
>4917	Callee	sin
>4918	Identifier	sin
>4919	Identifier	dfCoeff2
>4920	ExpressionStatement	 
>4921	AssignmentExpr	dfCoeff1 = cos ( dfAngle )
>4922	CallExpression	cos ( dfAngle )
>4923	ArgumentList	dfAngle
>4924	Argument	dfAngle
>4925	Identifier	dfAngle
>4926	Callee	cos
>4927	Identifier	cos
>4928	Identifier	dfCoeff1
>4929	Condition	 
>4930	Identifier	bRotated
>4931	IdentifierDeclStatement	 
>4932	IdentifierDecl	bRotated = ( dfAngle == 0.0 ) ? false 
>4933	AssignmentExpr	bRotated = ( dfAngle == 0.0 ) ? false 
>4934	ConditionalExpression	( dfAngle == 0.0 ) ? false 
>4935	Identifier	true
>4936	Identifier	false
>4937	Condition	dfAngle == 0.0
>4938	EqualityExpression	dfAngle == 0.0
>4939	PrimaryExpression	0.0
>4940	Identifier	dfAngle
>4941	Identifier	bRotated
>4942	Identifier	bRotated
>4943	IdentifierDeclType	const bool
>4944	IdentifierDeclStatement	 
>4945	IdentifierDecl	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4946	AssignmentExpr	dfAngle = TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4947	MultiplicativeExpression	TO_RADIANS * ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4948	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfAngle
>4949	Identifier	dfAngle
>4950	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4951	Identifier	poOptions
>4952	CastTarget	GDALGridDataMetricsOptions *
>4953	Identifier	TO_RADIANS
>4954	Identifier	dfAngle
>4955	Identifier	dfAngle
>4956	IdentifierDeclType	const double
>4957	IdentifierDeclStatement	 
>4958	IdentifierDecl	dfCoeff2 = 0.0
>4959	AssignmentExpr	dfCoeff2 = 0.0
>4960	PrimaryExpression	0.0
>4961	Identifier	dfCoeff2
>4962	Identifier	dfCoeff2
>4963	IdentifierDeclType	double
>4964	IdentifierDecl	dfCoeff1 = 0.0
>4965	AssignmentExpr	dfCoeff1 = 0.0
>4966	PrimaryExpression	0.0
>4967	Identifier	dfCoeff1
>4968	Identifier	dfCoeff1
>4969	IdentifierDeclType	double
>4970	ExpressionStatement	 
>4971	AssignmentExpr	dfR12 = dfRadius1 * dfRadius2
>4972	MultiplicativeExpression	dfRadius1 * dfRadius2
>4973	Identifier	dfRadius2
>4974	Identifier	dfRadius1
>4975	Identifier	dfR12
>4976	ExpressionStatement	 
>4977	AssignmentExpr	dfRadius2 *= dfRadius2
>4978	Identifier	dfRadius2
>4979	Identifier	dfRadius2
>4980	ExpressionStatement	 
>4981	AssignmentExpr	dfRadius1 *= dfRadius1
>4982	Identifier	dfRadius1
>4983	Identifier	dfRadius1
>4984	IdentifierDeclStatement	 
>4985	IdentifierDecl	dfR12
>4986	Identifier	dfR12
>4987	IdentifierDeclType	double
>4988	IdentifierDeclStatement	 
>4989	IdentifierDecl	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4990	AssignmentExpr	dfRadius2 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4991	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius2
>4992	Identifier	dfRadius2
>4993	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>4994	Identifier	poOptions
>4995	CastTarget	GDALGridDataMetricsOptions *
>4996	Identifier	dfRadius2
>4997	Identifier	dfRadius2
>4998	IdentifierDeclType	double
>4999	IdentifierDeclStatement	 
>5000	IdentifierDecl	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>5001	AssignmentExpr	dfRadius1 = ( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>5002	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) poOptions ) -> dfRadius1
>5003	Identifier	dfRadius1
>5004	CastExpression	( GDALGridDataMetricsOptions * ) poOptions
>5005	Identifier	poOptions
>5006	CastTarget	GDALGridDataMetricsOptions *
>5007	Identifier	dfRadius1
>5008	Identifier	dfRadius1
>5009	IdentifierDeclType	double
>5110	FunctionDef	GDALGridProgressMultiThread (GDALGridJob * psJob)
>5111	ParameterList	GDALGridJob * psJob
>5112	Parameter	 
>5113	Identifier	psJob
>5114	ParameterType	GDALGridJob *
>5115	ReturnType	static int
>5116	CompoundStatement	 
>5117	ReturnStatement	 
>5118	Identifier	bStop
>5119	ExpressionStatement	 
>5120	CallExpression	CPLReleaseMutex ( psJob -> hCondMutex )
>5121	ArgumentList	psJob -> hCondMutex
>5122	Argument	psJob -> hCondMutex
>5123	PtrMemberAccess	psJob -> hCondMutex
>5124	Identifier	hCondMutex
>5125	Identifier	psJob
>5126	Callee	CPLReleaseMutex
>5127	Identifier	CPLReleaseMutex
>5128	IdentifierDeclStatement	 
>5129	IdentifierDecl	bStop = * ( psJob -> pbStop )
>5130	AssignmentExpr	bStop = * ( psJob -> pbStop )
>5131	UnaryOp	* ( psJob -> pbStop )
>5132	PtrMemberAccess	psJob -> pbStop
>5133	Identifier	pbStop
>5134	Identifier	psJob
>5135	UnaryOperator	*
>5136	Identifier	bStop
>5137	Identifier	bStop
>5138	IdentifierDeclType	int
>5139	ExpressionStatement	 
>5140	CallExpression	CPLCondSignal ( psJob -> hCond )
>5141	ArgumentList	psJob -> hCond
>5142	Argument	psJob -> hCond
>5143	PtrMemberAccess	psJob -> hCond
>5144	Identifier	hCond
>5145	Identifier	psJob
>5146	Callee	CPLCondSignal
>5147	Identifier	CPLCondSignal
>5148	ExpressionStatement	 
>5149	IncDecOp	( * ( psJob -> pnCounter ) ) ++
>5150	IncDec	++
>5151	UnaryOp	* ( psJob -> pnCounter )
>5152	PtrMemberAccess	psJob -> pnCounter
>5153	Identifier	pnCounter
>5154	Identifier	psJob
>5155	UnaryOperator	*
>5156	ExpressionStatement	 
>5157	CallExpression	CPLAcquireMutex ( psJob -> hCondMutex , 1.0 )
>5158	ArgumentList	psJob -> hCondMutex
>5159	Argument	1.0
>5160	PrimaryExpression	1.0
>5161	Argument	psJob -> hCondMutex
>5162	PtrMemberAccess	psJob -> hCondMutex
>5163	Identifier	hCondMutex
>5164	Identifier	psJob
>5165	Callee	CPLAcquireMutex
>5166	Identifier	CPLAcquireMutex
>5182	FunctionDef	GDALGridProgressMonoThread (GDALGridJob * psJob)
>5183	ParameterList	GDALGridJob * psJob
>5184	Parameter	 
>5185	Identifier	psJob
>5186	ParameterType	GDALGridJob *
>5187	ReturnType	static int
>5188	CompoundStatement	 
>5189	ReturnStatement	 
>5190	Identifier	FALSE
>5191	IfStatement	if ( ! psJob -> pfnRealProgress ( ( nCounter / ( double ) psJob -> nYSize ) , \"\" , psJob -> pRealProgressArg ) )
>5192	CompoundStatement	 
>5193	ReturnStatement	 
>5194	Identifier	TRUE
>5195	ExpressionStatement	 
>5196	AssignmentExpr	* ( psJob -> pbStop ) = TRUE
>5197	Identifier	TRUE
>5198	UnaryOp	* ( psJob -> pbStop )
>5199	PtrMemberAccess	psJob -> pbStop
>5200	Identifier	pbStop
>5201	Identifier	psJob
>5202	UnaryOperator	*
>5203	ExpressionStatement	 
>5204	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>5205	ArgumentList	CE_Failure
>5206	Argument	\"User terminated\"
>5207	PrimaryExpression	\"User terminated\"
>5208	Argument	CPLE_UserInterrupt
>5209	Identifier	CPLE_UserInterrupt
>5210	Argument	CE_Failure
>5211	Identifier	CE_Failure
>5212	Callee	CPLError
>5213	Identifier	CPLError
>5214	Condition	 
>5215	UnaryOp	! psJob -> pfnRealProgress ( ( nCounter / ( double ) psJob -> nYSize ) , \"\" , psJob -> pRealProgressArg )
>5216	CallExpression	psJob -> pfnRealProgress ( ( nCounter / ( double ) psJob -> nYSize ) , \"\" , psJob -> pRealProgressArg )
>5217	ArgumentList	nCounter / ( double ) psJob -> nYSize
>5218	Argument	psJob -> pRealProgressArg
>5219	PtrMemberAccess	psJob -> pRealProgressArg
>5220	Identifier	pRealProgressArg
>5221	Identifier	psJob
>5222	Argument	\"\"
>5223	PrimaryExpression	\"\"
>5224	Argument	nCounter / ( double ) psJob -> nYSize
>5225	MultiplicativeExpression	nCounter / ( double ) psJob -> nYSize
>5226	CastExpression	( double ) psJob -> nYSize
>5227	PtrMemberAccess	psJob -> nYSize
>5228	Identifier	nYSize
>5229	Identifier	psJob
>5230	CastTarget	double
>5231	Identifier	nCounter
>5232	Callee	psJob -> pfnRealProgress
>5233	PtrMemberAccess	psJob -> pfnRealProgress
>5234	Identifier	pfnRealProgress
>5235	Identifier	psJob
>5236	UnaryOperator	!
>5237	IdentifierDeclStatement	 
>5238	IdentifierDecl	nCounter = ++ ( * ( psJob -> pnCounter ) )
>5239	AssignmentExpr	nCounter = ++ ( * ( psJob -> pnCounter ) )
>5240	UnaryExpression	++ ( * ( psJob -> pnCounter ) )
>5241	UnaryOp	* ( psJob -> pnCounter )
>5242	PtrMemberAccess	psJob -> pnCounter
>5243	Identifier	pnCounter
>5244	Identifier	psJob
>5245	UnaryOperator	*
>5246	IncDec	++
>5247	Identifier	nCounter
>5248	Identifier	nCounter
>5249	IdentifierDeclType	int
>5270	FunctionDef	GDALGridJobProcess (void * user_data)
>5271	ParameterList	void * user_data
>5272	Parameter	 
>5273	Identifier	user_data
>5274	ParameterType	void *
>5275	ReturnType	static void
>5276	CompoundStatement	 
>5277	ExpressionStatement	 
>5278	CallExpression	CPLFree ( padfValues )
>5279	ArgumentList	padfValues
>5280	Argument	padfValues
>5281	Identifier	padfValues
>5282	Callee	CPLFree
>5283	Identifier	CPLFree
>5284	ForStatement	for ( nYPoint = nYStart ; nYPoint < nYSize ; nYPoint += nYStep )
>5285	CompoundStatement	 
>5286	IfStatement	if ( * ( psJob -> pbStop ) || pfnProgress ( psJob ) )
>5287	BreakStatement	 
>5288	Condition	 
>5289	OrExpression	* ( psJob -> pbStop ) || pfnProgress ( psJob )
>5290	CallExpression	pfnProgress ( psJob )
>5291	ArgumentList	psJob
>5292	Argument	psJob
>5293	Identifier	psJob
>5294	Callee	pfnProgress
>5295	Identifier	pfnProgress
>5296	UnaryOp	* ( psJob -> pbStop )
>5297	PtrMemberAccess	psJob -> pbStop
>5298	Identifier	pbStop
>5299	Identifier	psJob
>5300	UnaryOperator	*
>5301	ExpressionStatement	 
>5302	CallExpression	GDALCopyWords ( padfValues , GDT_Float64 , sizeof ( double ) , pabyData + nYPoint * nLineSpace , eType , nDataTypeSize , \
>5303	ArgumentList	padfValues
>5304	Argument	nXSize
>5305	Identifier	nXSize
>5306	Argument	nDataTypeSize
>5307	Identifier	nDataTypeSize
>5308	Argument	eType
>5309	Identifier	eType
>5310	Argument	pabyData + nYPoint * nLineSpace
>5311	AdditiveExpression	pabyData + nYPoint * nLineSpace
>5312	MultiplicativeExpression	nYPoint * nLineSpace
>5313	Identifier	nLineSpace
>5314	Identifier	nYPoint
>5315	Identifier	pabyData
>5316	Argument	sizeof ( double )
>5317	SizeofExpr	sizeof ( double )
>5318	SizeofOperand	double
>5319	Sizeof	sizeof
>5320	Argument	GDT_Float64
>5321	Identifier	GDT_Float64
>5322	Argument	padfValues
>5323	Identifier	padfValues
>5324	Callee	GDALCopyWords
>5325	Identifier	GDALCopyWords
>5326	ForStatement	for ( nXPoint = 0 ; nXPoint < nXSize ; nXPoint ++ )
>5327	CompoundStatement	 
>5328	IfStatement	if ( ( * pfnGDALGridMethod ) ( poOptions , nPoints , padfX , padfY , padfZ , dfXPoint , dfYPoint , padfValues + \
>5329	CompoundStatement	 
>5330	BreakStatement	 
>5331	ExpressionStatement	 
>5332	CallExpression	pfnProgress ( psJob )
>5333	ArgumentList	psJob
>5334	Argument	psJob
>5335	Identifier	psJob
>5336	Callee	pfnProgress
>5337	Identifier	pfnProgress
>5338	ExpressionStatement	 
>5339	AssignmentExpr	* ( psJob -> pbStop ) = TRUE
>5340	Identifier	TRUE
>5341	UnaryOp	* ( psJob -> pbStop )
>5342	PtrMemberAccess	psJob -> pbStop
>5343	Identifier	pbStop
>5344	Identifier	psJob
>5345	UnaryOperator	*
>5346	ExpressionStatement	 
>5347	Statement	 
>5348	Statement	 
>5349	Statement	 
>5350	Statement	 
>5351	Statement	 
>5352	Statement	 
>5353	Statement	 
>5354	Statement	 
>5355	Statement	 
>5356	Statement	 
>5357	Statement	 
>5358	Statement	 
>5359	Statement	 
>5360	Statement	 
>5361	Statement	 
>5362	Statement	 
>5363	Statement	 
>5364	Statement	 
>5365	Statement	 
>5366	Statement	 
>5367	Statement	 
>5368	Statement	 
>5369	Condition	 
>5370	EqualityExpression	( * pfnGDALGridMethod ) ( poOptions , nPoints , padfX , padfY , padfZ , dfXPoint , dfYPoint , padfValues + \
>5371	Identifier	CE_None
>5372	CallExpression	( * pfnGDALGridMethod ) ( poOptions , nPoints , padfX , padfY , padfZ , dfXPoint , dfYPoint , padfValues + nXPoint , \
>5373	ArgumentList	poOptions
>5374	Argument	psExtraParameters
>5375	Identifier	psExtraParameters
>5376	Argument	padfValues + nXPoint
>5377	AdditiveExpression	padfValues + nXPoint
>5378	Identifier	nXPoint
>5379	Identifier	padfValues
>5380	Argument	dfYPoint
>5381	Identifier	dfYPoint
>5382	Argument	dfXPoint
>5383	Identifier	dfXPoint
>5384	Argument	padfZ
>5385	Identifier	padfZ
>5386	Argument	padfY
>5387	Identifier	padfY
>5388	Argument	padfX
>5389	Identifier	padfX
>5390	Argument	nPoints
>5391	Identifier	nPoints
>5392	Argument	poOptions
>5393	Identifier	poOptions
>5394	Callee	* pfnGDALGridMethod
>5395	UnaryOp	* pfnGDALGridMethod
>5396	Identifier	pfnGDALGridMethod
>5397	UnaryOperator	*
>5398	IdentifierDeclStatement	 
>5399	IdentifierDecl	dfXPoint = dfXMin + ( nXPoint + 0.5 ) * dfDeltaX
>5400	AssignmentExpr	dfXPoint = dfXMin + ( nXPoint + 0.5 ) * dfDeltaX
>5401	AdditiveExpression	dfXMin + ( nXPoint + 0.5 ) * dfDeltaX
>5402	MultiplicativeExpression	( nXPoint + 0.5 ) * dfDeltaX
>5403	Identifier	dfDeltaX
>5404	AdditiveExpression	nXPoint + 0.5
>5405	PrimaryExpression	0.5
>5406	Identifier	nXPoint
>5407	Identifier	dfXMin
>5408	Identifier	dfXPoint
>5409	Identifier	dfXPoint
>5410	IdentifierDeclType	const double
>5411	IncDecOp	 
>5412	IncDec	++
>5413	Identifier	nXPoint
>5414	Condition	 
>5415	RelationalExpression	nXPoint < nXSize
>5416	Identifier	nXSize
>5417	Identifier	nXPoint
>5418	ForInit	 
>5419	AssignmentExpr	nXPoint = 0
>5420	PrimaryExpression	0
>5421	Identifier	nXPoint
>5422	IdentifierDeclStatement	 
>5423	IdentifierDecl	dfYPoint = dfYMin + ( nYPoint + 0.5 ) * dfDeltaY
>5424	AssignmentExpr	dfYPoint = dfYMin + ( nYPoint + 0.5 ) * dfDeltaY
>5425	AdditiveExpression	dfYMin + ( nYPoint + 0.5 ) * dfDeltaY
>5426	MultiplicativeExpression	( nYPoint + 0.5 ) * dfDeltaY
>5427	Identifier	dfDeltaY
>5428	AdditiveExpression	nYPoint + 0.5
>5429	PrimaryExpression	0.5
>5430	Identifier	nYPoint
>5431	Identifier	dfYMin
>5432	Identifier	dfYPoint
>5433	Identifier	dfYPoint
>5434	IdentifierDeclType	const double
>5435	AssignmentExpr	 
>5436	Identifier	nYStep
>5437	Identifier	nYPoint
>5438	Condition	 
>5439	RelationalExpression	nYPoint < nYSize
>5440	Identifier	nYSize
>5441	Identifier	nYPoint
>5442	ForInit	 
>5443	AssignmentExpr	nYPoint = nYStart
>5444	Identifier	nYStart
>5445	Identifier	nYPoint
>5446	IfStatement	if ( padfValues == NULL )
>5447	CompoundStatement	 
>5448	ReturnStatement	 
>5449	ExpressionStatement	 
>5450	CallExpression	pfnProgress ( psJob )
>5451	ArgumentList	psJob
>5452	Argument	psJob
>5453	Identifier	psJob
>5454	Callee	pfnProgress
>5455	Identifier	pfnProgress
>5456	ExpressionStatement	 
>5457	AssignmentExpr	* ( psJob -> pbStop ) = TRUE
>5458	Identifier	TRUE
>5459	UnaryOp	* ( psJob -> pbStop )
>5460	PtrMemberAccess	psJob -> pbStop
>5461	Identifier	pbStop
>5462	Identifier	psJob
>5463	UnaryOperator	*
>5464	Condition	 
>5465	EqualityExpression	padfValues == NULL
>5466	Identifier	NULL
>5467	Identifier	padfValues
>5468	IdentifierDeclStatement	 
>5469	IdentifierDecl	* padfValues = ( double * ) VSIMalloc2 ( sizeof ( double ) , nXSize )
>5470	AssignmentExpr	* padfValues = ( double * ) VSIMalloc2 ( sizeof ( double ) , nXSize )
>5471	CastExpression	( double * ) VSIMalloc2 ( sizeof ( double ) , nXSize )
>5472	CallExpression	VSIMalloc2 ( sizeof ( double ) , nXSize )
>5473	ArgumentList	sizeof ( double )
>5474	Argument	nXSize
>5475	Identifier	nXSize
>5476	Argument	sizeof ( double )
>5477	SizeofExpr	sizeof ( double )
>5478	SizeofOperand	double
>5479	Sizeof	sizeof
>5480	Callee	VSIMalloc2
>5481	Identifier	VSIMalloc2
>5482	CastTarget	double *
>5483	Identifier	padfValues
>5484	Identifier	padfValues
>5485	IdentifierDeclType	double *
>5486	IdentifierDeclStatement	 
>5487	IdentifierDecl	nLineSpace = nXSize * nDataTypeSize
>5488	AssignmentExpr	nLineSpace = nXSize * nDataTypeSize
>5489	MultiplicativeExpression	nXSize * nDataTypeSize
>5490	Identifier	nDataTypeSize
>5491	Identifier	nXSize
>5492	Identifier	nLineSpace
>5493	Identifier	nLineSpace
>5494	IdentifierDeclType	int
>5495	IdentifierDeclStatement	 
>5496	IdentifierDecl	nDataTypeSize = GDALGetDataTypeSize ( eType ) / 8
>5497	AssignmentExpr	nDataTypeSize = GDALGetDataTypeSize ( eType ) / 8
>5498	MultiplicativeExpression	GDALGetDataTypeSize ( eType ) / 8
>5499	PrimaryExpression	8
>5500	CallExpression	GDALGetDataTypeSize ( eType )
>5501	ArgumentList	eType
>5502	Argument	eType
>5503	Identifier	eType
>5504	Callee	GDALGetDataTypeSize
>5505	Identifier	GDALGetDataTypeSize
>5506	Identifier	nDataTypeSize
>5507	Identifier	nDataTypeSize
>5508	IdentifierDeclType	int
>5509	ExpressionStatement	 
>5510	AssignmentExpr	int ( * pfnProgress ) ( GDALGridJob * psJob ) = psJob -> pfnProgress
>5511	PtrMemberAccess	psJob -> pfnProgress
>5512	Identifier	pfnProgress
>5513	Identifier	psJob
>5514	CallExpression	int ( * pfnProgress ) ( GDALGridJob * psJob )
>5515	ArgumentList	GDALGridJob * psJob
>5516	Argument	GDALGridJob * psJob
>5517	MultiplicativeExpression	GDALGridJob * psJob
>5518	Identifier	psJob
>5519	Identifier	GDALGridJob
>5520	Callee	int ( * pfnProgress )
>5521	CallExpression	int ( * pfnProgress )
>5522	ArgumentList	* pfnProgress
>5523	Argument	* pfnProgress
>5524	UnaryOp	* pfnProgress
>5525	Identifier	pfnProgress
>5526	UnaryOperator	*
>5527	Callee	int
>5528	Identifier	int
>5529	IdentifierDeclStatement	 
>5530	IdentifierDecl	eType = psJob -> eType
>5531	AssignmentExpr	eType = psJob -> eType
>5532	PtrMemberAccess	psJob -> eType
>5533	Identifier	eType
>5534	Identifier	psJob
>5535	Identifier	eType
>5536	Identifier	eType
>5537	IdentifierDeclType	GDALDataType
>5538	IdentifierDeclStatement	 
>5539	IdentifierDecl	* psExtraParameters = psJob -> psExtraParameters
>5540	AssignmentExpr	* psExtraParameters = psJob -> psExtraParameters
>5541	PtrMemberAccess	psJob -> psExtraParameters
>5542	Identifier	psExtraParameters
>5543	Identifier	psJob
>5544	Identifier	psExtraParameters
>5545	Identifier	psExtraParameters
>5546	IdentifierDeclType	GDALGridExtraParameters *
>5547	IdentifierDeclStatement	 
>5548	IdentifierDecl	pfnGDALGridMethod = psJob -> pfnGDALGridMethod
>5549	AssignmentExpr	pfnGDALGridMethod = psJob -> pfnGDALGridMethod
>5550	PtrMemberAccess	psJob -> pfnGDALGridMethod
>5551	Identifier	pfnGDALGridMethod
>5552	Identifier	psJob
>5553	Identifier	pfnGDALGridMethod
>5554	Identifier	pfnGDALGridMethod
>5555	IdentifierDeclType	GDALGridFunction
>5556	IdentifierDeclStatement	 
>5557	IdentifierDecl	* poOptions = psJob -> poOptions
>5558	AssignmentExpr	* poOptions = psJob -> poOptions
>5559	PtrMemberAccess	psJob -> poOptions
>5560	Identifier	poOptions
>5561	Identifier	psJob
>5562	Identifier	poOptions
>5563	Identifier	poOptions
>5564	IdentifierDeclType	const void *
>5565	IdentifierDeclStatement	 
>5566	IdentifierDecl	* padfZ = psJob -> padfZ
>5567	AssignmentExpr	* padfZ = psJob -> padfZ
>5568	PtrMemberAccess	psJob -> padfZ
>5569	Identifier	padfZ
>5570	Identifier	psJob
>5571	Identifier	padfZ
>5572	Identifier	padfZ
>5573	IdentifierDeclType	const double *
>5574	IdentifierDeclStatement	 
>5575	IdentifierDecl	* padfY = psJob -> padfY
>5576	AssignmentExpr	* padfY = psJob -> padfY
>5577	PtrMemberAccess	psJob -> padfY
>5578	Identifier	padfY
>5579	Identifier	psJob
>5580	Identifier	padfY
>5581	Identifier	padfY
>5582	IdentifierDeclType	const double *
>5583	IdentifierDeclStatement	 
>5584	IdentifierDecl	* padfX = psJob -> padfX
>5585	AssignmentExpr	* padfX = psJob -> padfX
>5586	PtrMemberAccess	psJob -> padfX
>5587	Identifier	padfX
>5588	Identifier	psJob
>5589	Identifier	padfX
>5590	Identifier	padfX
>5591	IdentifierDeclType	const double *
>5592	IdentifierDeclStatement	 
>5593	IdentifierDecl	nPoints = psJob -> nPoints
>5594	AssignmentExpr	nPoints = psJob -> nPoints
>5595	PtrMemberAccess	psJob -> nPoints
>5596	Identifier	nPoints
>5597	Identifier	psJob
>5598	Identifier	nPoints
>5599	Identifier	nPoints
>5600	IdentifierDeclType	GUInt32
>5601	IdentifierDeclStatement	 
>5602	IdentifierDecl	dfDeltaY = psJob -> dfDeltaY
>5603	AssignmentExpr	dfDeltaY = psJob -> dfDeltaY
>5604	PtrMemberAccess	psJob -> dfDeltaY
>5605	Identifier	dfDeltaY
>5606	Identifier	psJob
>5607	Identifier	dfDeltaY
>5608	Identifier	dfDeltaY
>5609	IdentifierDeclType	const double
>5610	IdentifierDeclStatement	 
>5611	IdentifierDecl	dfDeltaX = psJob -> dfDeltaX
>5612	AssignmentExpr	dfDeltaX = psJob -> dfDeltaX
>5613	PtrMemberAccess	psJob -> dfDeltaX
>5614	Identifier	dfDeltaX
>5615	Identifier	psJob
>5616	Identifier	dfDeltaX
>5617	Identifier	dfDeltaX
>5618	IdentifierDeclType	const double
>5619	IdentifierDeclStatement	 
>5620	IdentifierDecl	dfYMin = psJob -> dfYMin
>5621	AssignmentExpr	dfYMin = psJob -> dfYMin
>5622	PtrMemberAccess	psJob -> dfYMin
>5623	Identifier	dfYMin
>5624	Identifier	psJob
>5625	Identifier	dfYMin
>5626	Identifier	dfYMin
>5627	IdentifierDeclType	const double
>5628	IdentifierDeclStatement	 
>5629	IdentifierDecl	dfXMin = psJob -> dfXMin
>5630	AssignmentExpr	dfXMin = psJob -> dfXMin
>5631	PtrMemberAccess	psJob -> dfXMin
>5632	Identifier	dfXMin
>5633	Identifier	psJob
>5634	Identifier	dfXMin
>5635	Identifier	dfXMin
>5636	IdentifierDeclType	const double
>5637	IdentifierDeclStatement	 
>5638	IdentifierDecl	nYSize = psJob -> nYSize
>5639	AssignmentExpr	nYSize = psJob -> nYSize
>5640	PtrMemberAccess	psJob -> nYSize
>5641	Identifier	nYSize
>5642	Identifier	psJob
>5643	Identifier	nYSize
>5644	Identifier	nYSize
>5645	IdentifierDeclType	const GUInt32
>5646	IdentifierDeclStatement	 
>5647	IdentifierDecl	nXSize = psJob -> nXSize
>5648	AssignmentExpr	nXSize = psJob -> nXSize
>5649	PtrMemberAccess	psJob -> nXSize
>5650	Identifier	nXSize
>5651	Identifier	psJob
>5652	Identifier	nXSize
>5653	Identifier	nXSize
>5654	IdentifierDeclType	const GUInt32
>5655	IdentifierDeclStatement	 
>5656	IdentifierDecl	* pabyData = psJob -> pabyData
>5657	AssignmentExpr	* pabyData = psJob -> pabyData
>5658	PtrMemberAccess	psJob -> pabyData
>5659	Identifier	pabyData
>5660	Identifier	psJob
>5661	Identifier	pabyData
>5662	Identifier	pabyData
>5663	IdentifierDeclType	GByte *
>5664	IdentifierDeclStatement	 
>5665	IdentifierDecl	nYStep = psJob -> nYStep
>5666	AssignmentExpr	nYStep = psJob -> nYStep
>5667	PtrMemberAccess	psJob -> nYStep
>5668	Identifier	nYStep
>5669	Identifier	psJob
>5670	Identifier	nYStep
>5671	Identifier	nYStep
>5672	IdentifierDeclType	const GUInt32
>5673	IdentifierDeclStatement	 
>5674	IdentifierDecl	nYStart = psJob -> nYStart
>5675	AssignmentExpr	nYStart = psJob -> nYStart
>5676	PtrMemberAccess	psJob -> nYStart
>5677	Identifier	nYStart
>5678	Identifier	psJob
>5679	Identifier	nYStart
>5680	Identifier	nYStart
>5681	IdentifierDeclType	const GUInt32
>5682	IdentifierDeclStatement	 
>5683	IdentifierDecl	nYPoint
>5684	Identifier	nYPoint
>5685	IdentifierDeclType	GUInt32
>5686	IdentifierDecl	nXPoint
>5687	Identifier	nXPoint
>5688	IdentifierDeclType	GUInt32
>5689	IdentifierDeclStatement	 
>5690	IdentifierDecl	* psJob = ( GDALGridJob * ) user_data
>5691	AssignmentExpr	* psJob = ( GDALGridJob * ) user_data
>5692	CastExpression	( GDALGridJob * ) user_data
>5693	Identifier	user_data
>5694	CastTarget	GDALGridJob *
>5695	Identifier	psJob
>5696	Identifier	psJob
>5697	IdentifierDeclType	GDALGridJob *
>5761	FunctionDef	GDALGridCreate (GDALGridAlgorithm eAlgorithm , const void * poOptions , GUInt32 nPoints , const double * padfX , \
>5762	ParameterList	GDALGridAlgorithm eAlgorithm , const void * poOptions , GUInt32 nPoints , const double * padfX , const double * \
>5763	Parameter	 
>5764	Identifier	pProgressArg
>5765	ParameterType	void *
>5766	Parameter	 
>5767	Identifier	pfnProgress
>5768	ParameterType	GDALProgressFunc
>5769	Parameter	 
>5770	Identifier	pData
>5771	ParameterType	void *
>5772	Parameter	 
>5773	Identifier	eType
>5774	ParameterType	GDALDataType
>5775	Parameter	 
>5776	Identifier	nYSize
>5777	ParameterType	GUInt32
>5778	Parameter	 
>5779	Identifier	nXSize
>5780	ParameterType	GUInt32
>5781	Parameter	 
>5782	Identifier	dfYMax
>5783	ParameterType	double
>5784	Parameter	 
>5785	Identifier	dfYMin
>5786	ParameterType	double
>5787	Parameter	 
>5788	Identifier	dfXMax
>5789	ParameterType	double
>5790	Parameter	 
>5791	Identifier	dfXMin
>5792	ParameterType	double
>5793	Parameter	 
>5794	Identifier	padfZ
>5795	ParameterType	const double *
>5796	Parameter	 
>5797	Identifier	padfY
>5798	ParameterType	const double *
>5799	Parameter	 
>5800	Identifier	padfX
>5801	ParameterType	const double *
>5802	Parameter	 
>5803	Identifier	nPoints
>5804	ParameterType	GUInt32
>5805	Parameter	 
>5806	Identifier	poOptions
>5807	ParameterType	const void *
>5808	Parameter	 
>5809	Identifier	eAlgorithm
>5810	ParameterType	GDALGridAlgorithm
>5811	ReturnType	CPLErr
>5812	CompoundStatement	 
>5813	ReturnStatement	 
>5814	ConditionalExpression	bStop ? CE_Failure 
>5815	Identifier	CE_None
>5816	Identifier	CE_Failure
>5817	Condition	bStop
>5818	Identifier	bStop
>5819	ExpressionStatement	 
>5820	CallExpression	CPLFree ( pabyZ )
>5821	ArgumentList	pabyZ
>5822	Argument	pabyZ
>5823	Identifier	pabyZ
>5824	Callee	CPLFree
>5825	Identifier	CPLFree
>5826	ExpressionStatement	 
>5827	CallExpression	CPLFree ( pabyY )
>5828	ArgumentList	pabyY
>5829	Argument	pabyY
>5830	Identifier	pabyY
>5831	Callee	CPLFree
>5832	Identifier	CPLFree
>5833	ExpressionStatement	 
>5834	CallExpression	CPLFree ( pabyX )
>5835	ArgumentList	pabyX
>5836	Argument	pabyX
>5837	Identifier	pabyX
>5838	Callee	CPLFree
>5839	Identifier	CPLFree
>5840	IfStatement	if ( hQuadTree != NULL )
>5841	ExpressionStatement	 
>5842	CallExpression	CPLQuadTreeDestroy ( hQuadTree )
>5843	ArgumentList	hQuadTree
>5844	Argument	hQuadTree
>5845	Identifier	hQuadTree
>5846	Callee	CPLQuadTreeDestroy
>5847	Identifier	CPLQuadTreeDestroy
>5848	Condition	 
>5849	EqualityExpression	hQuadTree != NULL
>5850	Identifier	NULL
>5851	Identifier	hQuadTree
>5852	ExpressionStatement	 
>5853	CallExpression	CPLFree ( pasGridPoints )
>5854	ArgumentList	pasGridPoints
>5855	Argument	pasGridPoints
>5856	Identifier	pasGridPoints
>5857	Callee	CPLFree
>5858	Identifier	CPLFree
>5859	IfStatement	if ( nThreads <= 1 )
>5860	ElseStatement	else
>5861	CompoundStatement	 
>5862	ExpressionStatement	 
>5863	CallExpression	CPLDestroyMutex ( sJob . hCondMutex )
>5864	ArgumentList	sJob . hCondMutex
>5865	Argument	sJob . hCondMutex
>5866	MemberAccess	sJob . hCondMutex
>5867	Identifier	hCondMutex
>5868	Identifier	sJob
>5869	Callee	CPLDestroyMutex
>5870	Identifier	CPLDestroyMutex
>5871	ExpressionStatement	 
>5872	CallExpression	CPLDestroyCond ( sJob . hCond )
>5873	ArgumentList	sJob . hCond
>5874	Argument	sJob . hCond
>5875	MemberAccess	sJob . hCond
>5876	Identifier	hCond
>5877	Identifier	sJob
>5878	Callee	CPLDestroyCond
>5879	Identifier	CPLDestroyCond
>5880	ExpressionStatement	 
>5881	CallExpression	CPLFree ( pasJobs )
>5882	ArgumentList	pasJobs
>5883	Argument	pasJobs
>5884	Identifier	pasJobs
>5885	Callee	CPLFree
>5886	Identifier	CPLFree
>5887	ForStatement	for ( i = 0 ; i < nThreads ; i ++ )
>5888	CompoundStatement	 
>5889	IfStatement	if ( pasJobs [ i ] . hThread )
>5890	ExpressionStatement	 
>5891	CallExpression	CPLJoinThread ( pasJobs [ i ] . hThread )
>5892	ArgumentList	pasJobs [ i ] . hThread
>5893	Argument	pasJobs [ i ] . hThread
>5894	MemberAccess	pasJobs [ i ] . hThread
>5895	Identifier	hThread
>5896	ArrayIndexing	pasJobs [ i ]
>5897	Identifier	i
>5898	Identifier	pasJobs
>5899	Callee	CPLJoinThread
>5900	Identifier	CPLJoinThread
>5901	Condition	 
>5902	MemberAccess	pasJobs [ i ] . hThread
>5903	Identifier	hThread
>5904	ArrayIndexing	pasJobs [ i ]
>5905	Identifier	i
>5906	Identifier	pasJobs
>5907	IncDecOp	 
>5908	IncDec	++
>5909	Identifier	i
>5910	Condition	 
>5911	RelationalExpression	i < nThreads
>5912	Identifier	nThreads
>5913	Identifier	i
>5914	ForInit	 
>5915	AssignmentExpr	i = 0
>5916	PrimaryExpression	0
>5917	Identifier	i
>5918	ExpressionStatement	 
>5919	CallExpression	CPLReleaseMutex ( sJob . hCondMutex )
>5920	ArgumentList	sJob . hCondMutex
>5921	Argument	sJob . hCondMutex
>5922	MemberAccess	sJob . hCondMutex
>5923	Identifier	hCondMutex
>5924	Identifier	sJob
>5925	Callee	CPLReleaseMutex
>5926	Identifier	CPLReleaseMutex
>5927	WhileStatement	while ( nCounter < ( int ) nYSize && ! bStop )
>5928	CompoundStatement	 
>5929	ExpressionStatement	 
>5930	CallExpression	CPLAcquireMutex ( sJob . hCondMutex , 1.0 )
>5931	ArgumentList	sJob . hCondMutex
>5932	Argument	1.0
>5933	PrimaryExpression	1.0
>5934	Argument	sJob . hCondMutex
>5935	MemberAccess	sJob . hCondMutex
>5936	Identifier	hCondMutex
>5937	Identifier	sJob
>5938	Callee	CPLAcquireMutex
>5939	Identifier	CPLAcquireMutex
>5940	IfStatement	if ( ! pfnProgress ( nLocalCounter / ( double ) nYSize , \"\" , pProgressArg ) )
>5941	CompoundStatement	 
>5942	ExpressionStatement	 
>5943	AssignmentExpr	bStop = TRUE
>5944	Identifier	TRUE
>5945	Identifier	bStop
>5946	ExpressionStatement	 
>5947	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User terminated\" )
>5948	ArgumentList	CE_Failure
>5949	Argument	\"User terminated\"
>5950	PrimaryExpression	\"User terminated\"
>5951	Argument	CPLE_UserInterrupt
>5952	Identifier	CPLE_UserInterrupt
>5953	Argument	CE_Failure
>5954	Identifier	CE_Failure
>5955	Callee	CPLError
>5956	Identifier	CPLError
>5957	Condition	 
>5958	UnaryOp	! pfnProgress ( nLocalCounter / ( double ) nYSize , \"\" , pProgressArg )
>5959	CallExpression	pfnProgress ( nLocalCounter / ( double ) nYSize , \"\" , pProgressArg )
>5960	ArgumentList	nLocalCounter / ( double ) nYSize
>5961	Argument	pProgressArg
>5962	Identifier	pProgressArg
>5963	Argument	\"\"
>5964	PrimaryExpression	\"\"
>5965	Argument	nLocalCounter / ( double ) nYSize
>5966	MultiplicativeExpression	nLocalCounter / ( double ) nYSize
>5967	CastExpression	( double ) nYSize
>5968	Identifier	nYSize
>5969	CastTarget	double
>5970	Identifier	nLocalCounter
>5971	Callee	pfnProgress
>5972	Identifier	pfnProgress
>5973	UnaryOperator	!
>5974	ExpressionStatement	 
>5975	CallExpression	CPLReleaseMutex ( sJob . hCondMutex )
>5976	ArgumentList	sJob . hCondMutex
>5977	Argument	sJob . hCondMutex
>5978	MemberAccess	sJob . hCondMutex
>5979	Identifier	hCondMutex
>5980	Identifier	sJob
>5981	Callee	CPLReleaseMutex
>5982	Identifier	CPLReleaseMutex
>5983	IdentifierDeclStatement	 
>5984	IdentifierDecl	nLocalCounter = nCounter
>5985	AssignmentExpr	nLocalCounter = nCounter
>5986	Identifier	nCounter
>5987	Identifier	nCounter
>5988	Identifier	nLocalCounter
>5989	IdentifierDeclType	int
>5990	ExpressionStatement	 
>5991	CallExpression	CPLCondWait ( sJob . hCond , sJob . hCondMutex )
>5992	ArgumentList	sJob . hCond
>5993	Argument	sJob . hCondMutex
>5994	MemberAccess	sJob . hCondMutex
>5995	Identifier	hCondMutex
>5996	Identifier	sJob
>5997	Argument	sJob . hCond
>5998	MemberAccess	sJob . hCond
>5999	Identifier	hCond
>6000	Identifier	sJob
>6001	Callee	CPLCondWait
>6002	Identifier	CPLCondWait
>6003	Condition	 
>6004	AndExpression	nCounter < ( int ) nYSize && ! bStop
>6005	UnaryOp	! bStop
>6006	Identifier	bStop
>6007	UnaryOperator	!
>6008	RelationalExpression	nCounter < ( int ) nYSize
>6009	CastExpression	( int ) nYSize
>6010	Identifier	nYSize
>6011	CastTarget	int
>6012	Identifier	nCounter
>6013	ForStatement	for ( i = 0 ; i < nThreads && ! bStop ; i ++ )
>6014	CompoundStatement	 
>6015	ExpressionStatement	 
>6016	AssignmentExpr	pasJobs [ i ] . hThread = CPLCreateJoinableThread ( GDALGridJobProcess , ( void * ) & pasJobs [ i ] )
>6017	CallExpression	CPLCreateJoinableThread ( GDALGridJobProcess , ( void * ) & pasJobs [ i ] )
>6018	ArgumentList	GDALGridJobProcess
>6019	Argument	( void * ) & pasJobs [ i ]
>6020	CastExpression	( void * ) & pasJobs [ i ]
>6021	UnaryOp	& pasJobs [ i ]
>6022	ArrayIndexing	pasJobs [ i ]
>6023	Identifier	i
>6024	Identifier	pasJobs
>6025	UnaryOperator	&
>6026	CastTarget	void *
>6027	Argument	GDALGridJobProcess
>6028	Identifier	GDALGridJobProcess
>6029	Callee	CPLCreateJoinableThread
>6030	Identifier	CPLCreateJoinableThread
>6031	MemberAccess	pasJobs [ i ] . hThread
>6032	Identifier	hThread
>6033	ArrayIndexing	pasJobs [ i ]
>6034	Identifier	i
>6035	Identifier	pasJobs
>6036	ExpressionStatement	 
>6037	AssignmentExpr	pasJobs [ i ] . nYStart = i
>6038	Identifier	i
>6039	MemberAccess	pasJobs [ i ] . nYStart
>6040	Identifier	nYStart
>6041	ArrayIndexing	pasJobs [ i ]
>6042	Identifier	i
>6043	Identifier	pasJobs
>6044	ExpressionStatement	 
>6045	CallExpression	memcpy ( & pasJobs [ i ] , & sJob , sizeof ( GDALGridJob ) )
>6046	ArgumentList	& pasJobs [ i ]
>6047	Argument	sizeof ( GDALGridJob )
>6048	SizeofExpr	sizeof ( GDALGridJob )
>6049	SizeofOperand	GDALGridJob
>6050	Sizeof	sizeof
>6051	Argument	& sJob
>6052	UnaryOp	& sJob
>6053	Identifier	sJob
>6054	UnaryOperator	&
>6055	Argument	& pasJobs [ i ]
>6056	UnaryOp	& pasJobs [ i ]
>6057	ArrayIndexing	pasJobs [ i ]
>6058	Identifier	i
>6059	Identifier	pasJobs
>6060	UnaryOperator	&
>6061	Callee	memcpy
>6062	Identifier	memcpy
>6063	IncDecOp	 
>6064	IncDec	++
>6065	Identifier	i
>6066	Condition	 
>6067	AndExpression	i < nThreads && ! bStop
>6068	UnaryOp	! bStop
>6069	Identifier	bStop
>6070	UnaryOperator	!
>6071	RelationalExpression	i < nThreads
>6072	Identifier	nThreads
>6073	Identifier	i
>6074	ForInit	 
>6075	AssignmentExpr	i = 0
>6076	PrimaryExpression	0
>6077	Identifier	i
>6078	ExpressionStatement	 
>6079	AssignmentExpr	sJob . pfnProgress = GDALGridProgressMultiThread
>6080	Identifier	GDALGridProgressMultiThread
>6081	MemberAccess	sJob . pfnProgress
>6082	Identifier	pfnProgress
>6083	Identifier	sJob
>6084	ExpressionStatement	 
>6085	AssignmentExpr	sJob . hCondMutex = CPLCreateMutex ( )
>6086	CallExpression	CPLCreateMutex ( )
>6087	ArgumentList	 
>6088	Callee	CPLCreateMutex
>6089	Identifier	CPLCreateMutex
>6090	MemberAccess	sJob . hCondMutex
>6091	Identifier	hCondMutex
>6092	Identifier	sJob
>6093	ExpressionStatement	 
>6094	AssignmentExpr	sJob . nYStep = nThreads
>6095	Identifier	nThreads
>6096	MemberAccess	sJob . nYStep
>6097	Identifier	nYStep
>6098	Identifier	sJob
>6099	ExpressionStatement	 
>6100	CallExpression	CPLDebug ( \"GDAL_GRID\" , \"Using %d threads\" , nThreads )
>6101	ArgumentList	\"GDAL_GRID\"
>6102	Argument	nThreads
>6103	Identifier	nThreads
>6104	Argument	\"Using %d threads\"
>6105	PrimaryExpression	\"Using %d threads\"
>6106	Argument	\"GDAL_GRID\"
>6107	PrimaryExpression	\"GDAL_GRID\"
>6108	Callee	CPLDebug
>6109	Identifier	CPLDebug
>6110	IdentifierDeclStatement	 
>6111	IdentifierDecl	i
>6112	Identifier	i
>6113	IdentifierDeclType	int
>6114	IdentifierDeclStatement	 
>6115	IdentifierDecl	* pasJobs = ( GDALGridJob * ) CPLMalloc ( sizeof ( GDALGridJob ) * nThreads )
>6116	AssignmentExpr	* pasJobs = ( GDALGridJob * ) CPLMalloc ( sizeof ( GDALGridJob ) * nThreads )
>6117	CastExpression	( GDALGridJob * ) CPLMalloc ( sizeof ( GDALGridJob ) * nThreads )
>6118	CallExpression	CPLMalloc ( sizeof ( GDALGridJob ) * nThreads )
>6119	ArgumentList	sizeof ( GDALGridJob ) * nThreads
>6120	Argument	sizeof ( GDALGridJob ) * nThreads
>6121	MultiplicativeExpression	sizeof ( GDALGridJob ) * nThreads
>6122	Identifier	nThreads
>6123	SizeofExpr	sizeof ( GDALGridJob )
>6124	SizeofOperand	GDALGridJob
>6125	Sizeof	sizeof
>6126	Callee	CPLMalloc
>6127	Identifier	CPLMalloc
>6128	CastTarget	GDALGridJob *
>6129	Identifier	pasJobs
>6130	Identifier	pasJobs
>6131	IdentifierDeclType	GDALGridJob *
>6132	CompoundStatement	 
>6133	ExpressionStatement	 
>6134	CallExpression	GDALGridJobProcess ( & sJob )
>6135	ArgumentList	& sJob
>6136	Argument	& sJob
>6137	UnaryOp	& sJob
>6138	Identifier	sJob
>6139	UnaryOperator	&
>6140	Callee	GDALGridJobProcess
>6141	Identifier	GDALGridJobProcess
>6142	ExpressionStatement	 
>6143	AssignmentExpr	sJob . pfnProgress = GDALGridProgressMonoThread
>6144	Identifier	GDALGridProgressMonoThread
>6145	MemberAccess	sJob . pfnProgress
>6146	Identifier	pfnProgress
>6147	Identifier	sJob
>6148	Condition	 
>6149	RelationalExpression	nThreads <= 1
>6150	PrimaryExpression	1
>6151	Identifier	nThreads
>6152	IfStatement	if ( nThreads > 1 )
>6153	CompoundStatement	 
>6154	IfStatement	if ( sJob . hCond == NULL )
>6155	CompoundStatement	 
>6156	ExpressionStatement	 
>6157	AssignmentExpr	nThreads = 1
>6158	PrimaryExpression	1
>6159	Identifier	nThreads
>6160	ExpressionStatement	 
>6161	CallExpression	CPLError ( CE_Warning , CPLE_AppDefined , \"Cannot create condition. Reverting to monothread processing\" )
>6162	ArgumentList	CE_Warning
>6163	Argument	\"Cannot create condition. Reverting to monothread processing\"
>6164	PrimaryExpression	\"Cannot create condition. Reverting to monothread processing\"
>6165	Argument	CPLE_AppDefined
>6166	Identifier	CPLE_AppDefined
>6167	Argument	CE_Warning
>6168	Identifier	CE_Warning
>6169	Callee	CPLError
>6170	Identifier	CPLError
>6171	Condition	 
>6172	EqualityExpression	sJob . hCond == NULL
>6173	Identifier	NULL
>6174	MemberAccess	sJob . hCond
>6175	Identifier	hCond
>6176	Identifier	sJob
>6177	ExpressionStatement	 
>6178	AssignmentExpr	sJob . hCond = CPLCreateCond ( )
>6179	CallExpression	CPLCreateCond ( )
>6180	ArgumentList	 
>6181	Callee	CPLCreateCond
>6182	Identifier	CPLCreateCond
>6183	MemberAccess	sJob . hCond
>6184	Identifier	hCond
>6185	Identifier	sJob
>6186	Condition	 
>6187	RelationalExpression	nThreads > 1
>6188	PrimaryExpression	1
>6189	Identifier	nThreads
>6190	ExpressionStatement	 
>6191	AssignmentExpr	sJob . hThread = NULL
>6192	Identifier	NULL
>6193	MemberAccess	sJob . hThread
>6194	Identifier	hThread
>6195	Identifier	sJob
>6196	ExpressionStatement	 
>6197	AssignmentExpr	sJob . hCondMutex = NULL
>6198	Identifier	NULL
>6199	MemberAccess	sJob . hCondMutex
>6200	Identifier	hCondMutex
>6201	Identifier	sJob
>6202	ExpressionStatement	 
>6203	AssignmentExpr	sJob . hCond = NULL
>6204	Identifier	NULL
>6205	MemberAccess	sJob . hCond
>6206	Identifier	hCond
>6207	Identifier	sJob
>6208	ExpressionStatement	 
>6209	AssignmentExpr	sJob . pbStop = & bStop
>6210	UnaryOp	& bStop
>6211	Identifier	bStop
>6212	UnaryOperator	&
>6213	MemberAccess	sJob . pbStop
>6214	Identifier	pbStop
>6215	Identifier	sJob
>6216	ExpressionStatement	 
>6217	AssignmentExpr	sJob . pnCounter = & nCounter
>6218	UnaryOp	& nCounter
>6219	Identifier	nCounter
>6220	UnaryOperator	&
>6221	MemberAccess	sJob . pnCounter
>6222	Identifier	pnCounter
>6223	Identifier	sJob
>6224	ExpressionStatement	 
>6225	AssignmentExpr	sJob . pRealProgressArg = pProgressArg
>6226	Identifier	pProgressArg
>6227	MemberAccess	sJob . pRealProgressArg
>6228	Identifier	pRealProgressArg
>6229	Identifier	sJob
>6230	ExpressionStatement	 
>6231	AssignmentExpr	sJob . pfnRealProgress = pfnProgress
>6232	Identifier	pfnProgress
>6233	MemberAccess	sJob . pfnRealProgress
>6234	Identifier	pfnRealProgress
>6235	Identifier	sJob
>6236	ExpressionStatement	 
>6237	AssignmentExpr	sJob . eType = eType
>6238	Identifier	eType
>6239	MemberAccess	sJob . eType
>6240	Identifier	eType
>6241	Identifier	sJob
>6242	ExpressionStatement	 
>6243	AssignmentExpr	sJob . pfnProgress = NULL
>6244	Identifier	NULL
>6245	MemberAccess	sJob . pfnProgress
>6246	Identifier	pfnProgress
>6247	Identifier	sJob
>6248	ExpressionStatement	 
>6249	AssignmentExpr	sJob . psExtraParameters = & sExtraParameters
>6250	UnaryOp	& sExtraParameters
>6251	Identifier	sExtraParameters
>6252	UnaryOperator	&
>6253	MemberAccess	sJob . psExtraParameters
>6254	Identifier	psExtraParameters
>6255	Identifier	sJob
>6256	ExpressionStatement	 
>6257	AssignmentExpr	sJob . pfnGDALGridMethod = pfnGDALGridMethod
>6258	Identifier	pfnGDALGridMethod
>6259	MemberAccess	sJob . pfnGDALGridMethod
>6260	Identifier	pfnGDALGridMethod
>6261	Identifier	sJob
>6262	ExpressionStatement	 
>6263	AssignmentExpr	sJob . poOptions = poOptions
>6264	Identifier	poOptions
>6265	MemberAccess	sJob . poOptions
>6266	Identifier	poOptions
>6267	Identifier	sJob
>6268	ExpressionStatement	 
>6269	AssignmentExpr	sJob . padfZ = padfZ
>6270	Identifier	padfZ
>6271	MemberAccess	sJob . padfZ
>6272	Identifier	padfZ
>6273	Identifier	sJob
>6274	ExpressionStatement	 
>6275	AssignmentExpr	sJob . padfY = padfY
>6276	Identifier	padfY
>6277	MemberAccess	sJob . padfY
>6278	Identifier	padfY
>6279	Identifier	sJob
>6280	ExpressionStatement	 
>6281	AssignmentExpr	sJob . padfX = padfX
>6282	Identifier	padfX
>6283	MemberAccess	sJob . padfX
>6284	Identifier	padfX
>6285	Identifier	sJob
>6286	ExpressionStatement	 
>6287	AssignmentExpr	sJob . nPoints = nPoints
>6288	Identifier	nPoints
>6289	MemberAccess	sJob . nPoints
>6290	Identifier	nPoints
>6291	Identifier	sJob
>6292	ExpressionStatement	 
>6293	AssignmentExpr	sJob . dfDeltaY = dfDeltaY
>6294	Identifier	dfDeltaY
>6295	MemberAccess	sJob . dfDeltaY
>6296	Identifier	dfDeltaY
>6297	Identifier	sJob
>6298	ExpressionStatement	 
>6299	AssignmentExpr	sJob . dfDeltaX = dfDeltaX
>6300	Identifier	dfDeltaX
>6301	MemberAccess	sJob . dfDeltaX
>6302	Identifier	dfDeltaX
>6303	Identifier	sJob
>6304	ExpressionStatement	 
>6305	AssignmentExpr	sJob . dfYMin = dfYMin
>6306	Identifier	dfYMin
>6307	MemberAccess	sJob . dfYMin
>6308	Identifier	dfYMin
>6309	Identifier	sJob
>6310	ExpressionStatement	 
>6311	AssignmentExpr	sJob . dfXMin = dfXMin
>6312	Identifier	dfXMin
>6313	MemberAccess	sJob . dfXMin
>6314	Identifier	dfXMin
>6315	Identifier	sJob
>6316	ExpressionStatement	 
>6317	AssignmentExpr	sJob . nYSize = nYSize
>6318	Identifier	nYSize
>6319	MemberAccess	sJob . nYSize
>6320	Identifier	nYSize
>6321	Identifier	sJob
>6322	ExpressionStatement	 
>6323	AssignmentExpr	sJob . nXSize = nXSize
>6324	Identifier	nXSize
>6325	MemberAccess	sJob . nXSize
>6326	Identifier	nXSize
>6327	Identifier	sJob
>6328	ExpressionStatement	 
>6329	AssignmentExpr	sJob . nYStep = 1
>6330	PrimaryExpression	1
>6331	MemberAccess	sJob . nYStep
>6332	Identifier	nYStep
>6333	Identifier	sJob
>6334	ExpressionStatement	 
>6335	AssignmentExpr	sJob . pabyData = ( GByte * ) pData
>6336	CastExpression	( GByte * ) pData
>6337	Identifier	pData
>6338	CastTarget	GByte *
>6339	MemberAccess	sJob . pabyData
>6340	Identifier	pabyData
>6341	Identifier	sJob
>6342	ExpressionStatement	 
>6343	AssignmentExpr	sJob . nYStart = 0
>6344	PrimaryExpression	0
>6345	MemberAccess	sJob . nYStart
>6346	Identifier	nYStart
>6347	Identifier	sJob
>6348	IdentifierDeclStatement	 
>6349	IdentifierDecl	sJob
>6350	Identifier	sJob
>6351	IdentifierDeclType	GDALGridJob
>6352	IdentifierDeclStatement	 
>6353	IdentifierDecl	bStop = FALSE
>6354	AssignmentExpr	bStop = FALSE
>6355	Identifier	FALSE
>6356	Identifier	FALSE
>6357	Identifier	bStop
>6358	IdentifierDeclType	volatile int
>6359	IdentifierDeclStatement	 
>6360	IdentifierDecl	nCounter = 0
>6361	AssignmentExpr	nCounter = 0
>6362	PrimaryExpression	0
>6363	Identifier	nCounter
>6364	Identifier	nCounter
>6365	IdentifierDeclType	volatile int
>6366	IfStatement	if ( nThreads >= ( int ) nYSize / 2 )
>6367	ExpressionStatement	 
>6368	AssignmentExpr	nThreads = ( int ) nYSize / 2
>6369	MultiplicativeExpression	( int ) nYSize / 2
>6370	PrimaryExpression	2
>6371	CastExpression	( int ) nYSize
>6372	Identifier	nYSize
>6373	CastTarget	int
>6374	Identifier	nThreads
>6375	Condition	 
>6376	RelationalExpression	nThreads >= ( int ) nYSize / 2
>6377	MultiplicativeExpression	( int ) nYSize / 2
>6378	PrimaryExpression	2
>6379	CastExpression	( int ) nYSize
>6380	Identifier	nYSize
>6381	CastTarget	int
>6382	Identifier	nThreads
>6383	IfStatement	if ( nThreads > 128 )
>6384	ExpressionStatement	 
>6385	AssignmentExpr	nThreads = 128
>6386	PrimaryExpression	128
>6387	Identifier	nThreads
>6388	Condition	 
>6389	RelationalExpression	nThreads > 128
>6390	PrimaryExpression	128
>6391	Identifier	nThreads
>6392	IfStatement	if ( EQUAL ( pszThreads , \"ALL_CPUS\" ) )
>6393	ElseStatement	else
>6394	ExpressionStatement	 
>6395	AssignmentExpr	nThreads = atoi ( pszThreads )
>6396	CallExpression	atoi ( pszThreads )
>6397	ArgumentList	pszThreads
>6398	Argument	pszThreads
>6399	Identifier	pszThreads
>6400	Callee	atoi
>6401	Identifier	atoi
>6402	Identifier	nThreads
>6403	ExpressionStatement	 
>6404	AssignmentExpr	nThreads = CPLGetNumCPUs ( )
>6405	CallExpression	CPLGetNumCPUs ( )
>6406	ArgumentList	 
>6407	Callee	CPLGetNumCPUs
>6408	Identifier	CPLGetNumCPUs
>6409	Identifier	nThreads
>6410	Condition	 
>6411	CallExpression	EQUAL ( pszThreads , \"ALL_CPUS\" )
>6412	ArgumentList	pszThreads
>6413	Argument	\"ALL_CPUS\"
>6414	PrimaryExpression	\"ALL_CPUS\"
>6415	Argument	pszThreads
>6416	Identifier	pszThreads
>6417	Callee	EQUAL
>6418	Identifier	EQUAL
>6419	IdentifierDeclStatement	 
>6420	IdentifierDecl	nThreads
>6421	Identifier	nThreads
>6422	IdentifierDeclType	int
>6423	IdentifierDeclStatement	 
>6424	IdentifierDecl	* pszThreads = CPLGetConfigOption ( \"GDAL_NUM_THREADS\" , \"ALL_CPUS\" )
>6425	AssignmentExpr	* pszThreads = CPLGetConfigOption ( \"GDAL_NUM_THREADS\" , \"ALL_CPUS\" )
>6426	CallExpression	CPLGetConfigOption ( \"GDAL_NUM_THREADS\" , \"ALL_CPUS\" )
>6427	ArgumentList	\"GDAL_NUM_THREADS\"
>6428	Argument	\"ALL_CPUS\"
>6429	PrimaryExpression	\"ALL_CPUS\"
>6430	Argument	\"GDAL_NUM_THREADS\"
>6431	PrimaryExpression	\"GDAL_NUM_THREADS\"
>6432	Callee	CPLGetConfigOption
>6433	Identifier	CPLGetConfigOption
>6434	Identifier	pszThreads
>6435	Identifier	pszThreads
>6436	IdentifierDeclType	const char *
>6437	ExpressionStatement	 
>6438	AssignmentExpr	sExtraParameters . pafZ = pafZAligned
>6439	Identifier	pafZAligned
>6440	MemberAccess	sExtraParameters . pafZ
>6441	Identifier	pafZ
>6442	Identifier	sExtraParameters
>6443	ExpressionStatement	 
>6444	AssignmentExpr	sExtraParameters . pafY = pafYAligned
>6445	Identifier	pafYAligned
>6446	MemberAccess	sExtraParameters . pafY
>6447	Identifier	pafY
>6448	Identifier	sExtraParameters
>6449	ExpressionStatement	 
>6450	AssignmentExpr	sExtraParameters . pafX = pafXAligned
>6451	Identifier	pafXAligned
>6452	MemberAccess	sExtraParameters . pafX
>6453	Identifier	pafX
>6454	Identifier	sExtraParameters
>6455	ExpressionStatement	 
>6456	AssignmentExpr	sExtraParameters . dfInitialSearchRadius = dfInitialSearchRadius
>6457	Identifier	dfInitialSearchRadius
>6458	MemberAccess	sExtraParameters . dfInitialSearchRadius
>6459	Identifier	dfInitialSearchRadius
>6460	Identifier	sExtraParameters
>6461	ExpressionStatement	 
>6462	AssignmentExpr	sExtraParameters . hQuadTree = hQuadTree
>6463	Identifier	hQuadTree
>6464	MemberAccess	sExtraParameters . hQuadTree
>6465	Identifier	hQuadTree
>6466	Identifier	sExtraParameters
>6467	IdentifierDeclStatement	 
>6468	IdentifierDecl	sExtraParameters
>6469	Identifier	sExtraParameters
>6470	IdentifierDeclType	GDALGridExtraParameters
>6471	IfStatement	if ( bCreateQuadTree )
>6472	CompoundStatement	 
>6473	IfStatement	if ( pasGridPoints != NULL )
>6474	CompoundStatement	 
>6475	ForStatement	for ( i = 0 ; i < nPoints ; i ++ )
>6476	CompoundStatement	 
>6477	ExpressionStatement	 
>6478	CallExpression	CPLQuadTreeInsert ( hQuadTree , pasGridPoints + i )
>6479	ArgumentList	hQuadTree
>6480	Argument	pasGridPoints + i
>6481	AdditiveExpression	pasGridPoints + i
>6482	Identifier	i
>6483	Identifier	pasGridPoints
>6484	Argument	hQuadTree
>6485	Identifier	hQuadTree
>6486	Callee	CPLQuadTreeInsert
>6487	Identifier	CPLQuadTreeInsert
>6488	ExpressionStatement	 
>6489	AssignmentExpr	pasGridPoints [ i ] . i = i
>6490	Identifier	i
>6491	MemberAccess	pasGridPoints [ i ] . i
>6492	Identifier	i
>6493	ArrayIndexing	pasGridPoints [ i ]
>6494	Identifier	i
>6495	Identifier	pasGridPoints
>6496	ExpressionStatement	 
>6497	AssignmentExpr	pasGridPoints [ i ] . psXYArrays = & sXYArrays
>6498	UnaryOp	& sXYArrays
>6499	Identifier	sXYArrays
>6500	UnaryOperator	&
>6501	MemberAccess	pasGridPoints [ i ] . psXYArrays
>6502	Identifier	psXYArrays
>6503	ArrayIndexing	pasGridPoints [ i ]
>6504	Identifier	i
>6505	Identifier	pasGridPoints
>6506	IncDecOp	 
>6507	IncDec	++
>6508	Identifier	i
>6509	Condition	 
>6510	RelationalExpression	i < nPoints
>6511	Identifier	nPoints
>6512	Identifier	i
>6513	ForInit	 
>6514	AssignmentExpr	i = 0
>6515	PrimaryExpression	0
>6516	Identifier	i
>6517	ExpressionStatement	 
>6518	AssignmentExpr	hQuadTree = CPLQuadTreeCreate ( & sRect , GDALGridGetPointBounds )
>6519	CallExpression	CPLQuadTreeCreate ( & sRect , GDALGridGetPointBounds )
>6520	ArgumentList	& sRect
>6521	Argument	GDALGridGetPointBounds
>6522	Identifier	GDALGridGetPointBounds
>6523	Argument	& sRect
>6524	UnaryOp	& sRect
>6525	Identifier	sRect
>6526	UnaryOperator	&
>6527	Callee	CPLQuadTreeCreate
>6528	Identifier	CPLQuadTreeCreate
>6529	Identifier	hQuadTree
>6530	ExpressionStatement	 
>6531	AssignmentExpr	dfInitialSearchRadius = sqrt ( ( sRect . maxx - sRect . minx ) * ( sRect . maxy - sRect . miny ) / nPoints )
>6532	CallExpression	sqrt ( ( sRect . maxx - sRect . minx ) * ( sRect . maxy - sRect . miny ) / nPoints )
>6533	ArgumentList	( sRect . maxx - sRect . minx ) * ( sRect . maxy - sRect . miny ) / nPoints
>6534	Argument	( sRect . maxx - sRect . minx ) * ( sRect . maxy - sRect . miny ) / nPoints
>6535	MultiplicativeExpression	( sRect . maxx - sRect . minx ) * ( sRect . maxy - sRect . miny ) / nPoints
>6536	MultiplicativeExpression	( sRect . maxy - sRect . miny ) / nPoints
>6537	Identifier	nPoints
>6538	AdditiveExpression	sRect . maxy - sRect . miny
>6539	MemberAccess	sRect . miny
>6540	Identifier	miny
>6541	Identifier	sRect
>6542	MemberAccess	sRect . maxy
>6543	Identifier	maxy
>6544	Identifier	sRect
>6545	AdditiveExpression	sRect . maxx - sRect . minx
>6546	MemberAccess	sRect . minx
>6547	Identifier	minx
>6548	Identifier	sRect
>6549	MemberAccess	sRect . maxx
>6550	Identifier	maxx
>6551	Identifier	sRect
>6552	Callee	sqrt
>6553	Identifier	sqrt
>6554	Identifier	dfInitialSearchRadius
>6555	ForStatement	for ( i = 1 ; i < nPoints ; i ++ )
>6556	CompoundStatement	 
>6557	IfStatement	if ( padfY [ i ] > sRect . maxy )
>6558	ExpressionStatement	 
>6559	AssignmentExpr	sRect . maxy = padfY [ i ]
>6560	ArrayIndexing	padfY [ i ]
>6561	Identifier	i
>6562	Identifier	padfY
>6563	MemberAccess	sRect . maxy
>6564	Identifier	maxy
>6565	Identifier	sRect
>6566	Condition	 
>6567	RelationalExpression	padfY [ i ] > sRect . maxy
>6568	MemberAccess	sRect . maxy
>6569	Identifier	maxy
>6570	Identifier	sRect
>6571	ArrayIndexing	padfY [ i ]
>6572	Identifier	i
>6573	Identifier	padfY
>6574	IfStatement	if ( padfX [ i ] > sRect . maxx )
>6575	ExpressionStatement	 
>6576	AssignmentExpr	sRect . maxx = padfX [ i ]
>6577	ArrayIndexing	padfX [ i ]
>6578	Identifier	i
>6579	Identifier	padfX
>6580	MemberAccess	sRect . maxx
>6581	Identifier	maxx
>6582	Identifier	sRect
>6583	Condition	 
>6584	RelationalExpression	padfX [ i ] > sRect . maxx
>6585	MemberAccess	sRect . maxx
>6586	Identifier	maxx
>6587	Identifier	sRect
>6588	ArrayIndexing	padfX [ i ]
>6589	Identifier	i
>6590	Identifier	padfX
>6591	IfStatement	if ( padfY [ i ] < sRect . miny )
>6592	ExpressionStatement	 
>6593	AssignmentExpr	sRect . miny = padfY [ i ]
>6594	ArrayIndexing	padfY [ i ]
>6595	Identifier	i
>6596	Identifier	padfY
>6597	MemberAccess	sRect . miny
>6598	Identifier	miny
>6599	Identifier	sRect
>6600	Condition	 
>6601	RelationalExpression	padfY [ i ] < sRect . miny
>6602	MemberAccess	sRect . miny
>6603	Identifier	miny
>6604	Identifier	sRect
>6605	ArrayIndexing	padfY [ i ]
>6606	Identifier	i
>6607	Identifier	padfY
>6608	IfStatement	if ( padfX [ i ] < sRect . minx )
>6609	ExpressionStatement	 
>6610	AssignmentExpr	sRect . minx = padfX [ i ]
>6611	ArrayIndexing	padfX [ i ]
>6612	Identifier	i
>6613	Identifier	padfX
>6614	MemberAccess	sRect . minx
>6615	Identifier	minx
>6616	Identifier	sRect
>6617	Condition	 
>6618	RelationalExpression	padfX [ i ] < sRect . minx
>6619	MemberAccess	sRect . minx
>6620	Identifier	minx
>6621	Identifier	sRect
>6622	ArrayIndexing	padfX [ i ]
>6623	Identifier	i
>6624	Identifier	padfX
>6625	IncDecOp	 
>6626	IncDec	++
>6627	Identifier	i
>6628	Condition	 
>6629	RelationalExpression	i < nPoints
>6630	Identifier	nPoints
>6631	Identifier	i
>6632	ForInit	 
>6633	AssignmentExpr	i = 1
>6634	PrimaryExpression	1
>6635	Identifier	i
>6636	ExpressionStatement	 
>6637	AssignmentExpr	sRect . maxy = padfY [ 0 ]
>6638	ArrayIndexing	padfY [ 0 ]
>6639	PrimaryExpression	0
>6640	Identifier	padfY
>6641	MemberAccess	sRect . maxy
>6642	Identifier	maxy
>6643	Identifier	sRect
>6644	ExpressionStatement	 
>6645	AssignmentExpr	sRect . maxx = padfX [ 0 ]
>6646	ArrayIndexing	padfX [ 0 ]
>6647	PrimaryExpression	0
>6648	Identifier	padfX
>6649	MemberAccess	sRect . maxx
>6650	Identifier	maxx
>6651	Identifier	sRect
>6652	ExpressionStatement	 
>6653	AssignmentExpr	sRect . miny = padfY [ 0 ]
>6654	ArrayIndexing	padfY [ 0 ]
>6655	PrimaryExpression	0
>6656	Identifier	padfY
>6657	MemberAccess	sRect . miny
>6658	Identifier	miny
>6659	Identifier	sRect
>6660	ExpressionStatement	 
>6661	AssignmentExpr	sRect . minx = padfX [ 0 ]
>6662	ArrayIndexing	padfX [ 0 ]
>6663	PrimaryExpression	0
>6664	Identifier	padfX
>6665	MemberAccess	sRect . minx
>6666	Identifier	minx
>6667	Identifier	sRect
>6668	IdentifierDeclStatement	 
>6669	IdentifierDecl	i
>6670	Identifier	i
>6671	IdentifierDeclType	GUInt32
>6672	IdentifierDeclStatement	 
>6673	IdentifierDecl	sRect
>6674	Identifier	sRect
>6675	IdentifierDeclType	CPLRectObj
>6676	Condition	 
>6677	EqualityExpression	pasGridPoints != NULL
>6678	Identifier	NULL
>6679	Identifier	pasGridPoints
>6680	ExpressionStatement	 
>6681	AssignmentExpr	pasGridPoints = ( GDALGridPoint * ) VSIMalloc2 ( nPoints , sizeof ( GDALGridPoint ) )
>6682	CastExpression	( GDALGridPoint * ) VSIMalloc2 ( nPoints , sizeof ( GDALGridPoint ) )
>6683	CallExpression	VSIMalloc2 ( nPoints , sizeof ( GDALGridPoint ) )
>6684	ArgumentList	nPoints
>6685	Argument	sizeof ( GDALGridPoint )
>6686	SizeofExpr	sizeof ( GDALGridPoint )
>6687	SizeofOperand	GDALGridPoint
>6688	Sizeof	sizeof
>6689	Argument	nPoints
>6690	Identifier	nPoints
>6691	Callee	VSIMalloc2
>6692	Identifier	VSIMalloc2
>6693	CastTarget	GDALGridPoint *
>6694	Identifier	pasGridPoints
>6695	Condition	 
>6696	Identifier	bCreateQuadTree
>6697	ExpressionStatement	 
>6698	AssignmentExpr	sXYArrays . padfY = padfY
>6699	Identifier	padfY
>6700	MemberAccess	sXYArrays . padfY
>6701	Identifier	padfY
>6702	Identifier	sXYArrays
>6703	ExpressionStatement	 
>6704	AssignmentExpr	sXYArrays . padfX = padfX
>6705	Identifier	padfX
>6706	MemberAccess	sXYArrays . padfX
>6707	Identifier	padfX
>6708	Identifier	sXYArrays
>6709	IdentifierDeclStatement	 
>6710	IdentifierDecl	sXYArrays
>6711	Identifier	sXYArrays
>6712	IdentifierDeclType	GDALGridXYArrays
>6713	IdentifierDeclStatement	 
>6714	IdentifierDecl	* pasGridPoints = NULL
>6715	AssignmentExpr	* pasGridPoints = NULL
>6716	Identifier	NULL
>6717	Identifier	NULL
>6718	Identifier	pasGridPoints
>6719	IdentifierDeclType	GDALGridPoint *
>6720	IdentifierDeclStatement	 
>6721	IdentifierDecl	dfInitialSearchRadius = 0
>6722	AssignmentExpr	dfInitialSearchRadius = 0
>6723	PrimaryExpression	0
>6724	Identifier	dfInitialSearchRadius
>6725	Identifier	dfInitialSearchRadius
>6726	IdentifierDeclType	double
>6727	IdentifierDeclStatement	 
>6728	IdentifierDecl	* hQuadTree = NULL
>6729	AssignmentExpr	* hQuadTree = NULL
>6730	Identifier	NULL
>6731	Identifier	NULL
>6732	Identifier	hQuadTree
>6733	IdentifierDeclType	CPLQuadTree *
>6734	IdentifierDeclStatement	 
>6735	IdentifierDecl	dfDeltaY = ( dfYMax - dfYMin ) / nYSize
>6736	AssignmentExpr	dfDeltaY = ( dfYMax - dfYMin ) / nYSize
>6737	MultiplicativeExpression	( dfYMax - dfYMin ) / nYSize
>6738	Identifier	nYSize
>6739	AdditiveExpression	dfYMax - dfYMin
>6740	Identifier	dfYMin
>6741	Identifier	dfYMax
>6742	Identifier	dfDeltaY
>6743	Identifier	dfDeltaY
>6744	IdentifierDeclType	const double
>6745	IdentifierDeclStatement	 
>6746	IdentifierDecl	dfDeltaX = ( dfXMax - dfXMin ) / nXSize
>6747	AssignmentExpr	dfDeltaX = ( dfXMax - dfXMin ) / nXSize
>6748	MultiplicativeExpression	( dfXMax - dfXMin ) / nXSize
>6749	Identifier	nXSize
>6750	AdditiveExpression	dfXMax - dfXMin
>6751	Identifier	dfXMin
>6752	Identifier	dfXMax
>6753	Identifier	dfDeltaX
>6754	Identifier	dfDeltaX
>6755	IdentifierDeclType	const double
>6756	SwitchStatement	switch ( eAlgorithm )
>6757	CompoundStatement	 
>6758	ReturnStatement	 
>6759	Identifier	CE_Failure
>6760	ExpressionStatement	 
>6761	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"GDAL does not support gridding method %d\" , eAlgorithm )
>6762	ArgumentList	CE_Failure
>6763	Argument	eAlgorithm
>6764	Identifier	eAlgorithm
>6765	Argument	\"GDAL does not support gridding method %d\"
>6766	PrimaryExpression	\"GDAL does not support gridding method %d\"
>6767	Argument	CPLE_IllegalArg
>6768	Identifier	CPLE_IllegalArg
>6769	Argument	CE_Failure
>6770	Identifier	CE_Failure
>6771	Callee	CPLError
>6772	Identifier	CPLError
>6773	Label	 
>6774	Identifier	default
>6775	BreakStatement	 
>6776	ExpressionStatement	 
>6777	AssignmentExpr	pfnGDALGridMethod = GDALGridDataMetricAverageDistancePts
>6778	Identifier	GDALGridDataMetricAverageDistancePts
>6779	Identifier	pfnGDALGridMethod
>6780	Label	 
>6781	Identifier	GGA_MetricAverageDistancePts
>6782	BreakStatement	 
>6783	ExpressionStatement	 
>6784	AssignmentExpr	pfnGDALGridMethod = GDALGridDataMetricAverageDistance
>6785	Identifier	GDALGridDataMetricAverageDistance
>6786	Identifier	pfnGDALGridMethod
>6787	Label	 
>6788	Identifier	GGA_MetricAverageDistance
>6789	BreakStatement	 
>6790	ExpressionStatement	 
>6791	AssignmentExpr	pfnGDALGridMethod = GDALGridDataMetricCount
>6792	Identifier	GDALGridDataMetricCount
>6793	Identifier	pfnGDALGridMethod
>6794	Label	 
>6795	Identifier	GGA_MetricCount
>6796	BreakStatement	 
>6797	ExpressionStatement	 
>6798	AssignmentExpr	pfnGDALGridMethod = GDALGridDataMetricRange
>6799	Identifier	GDALGridDataMetricRange
>6800	Identifier	pfnGDALGridMethod
>6801	Label	 
>6802	Identifier	GGA_MetricRange
>6803	BreakStatement	 
>6804	ExpressionStatement	 
>6805	AssignmentExpr	pfnGDALGridMethod = GDALGridDataMetricMaximum
>6806	Identifier	GDALGridDataMetricMaximum
>6807	Identifier	pfnGDALGridMethod
>6808	Label	 
>6809	Identifier	GGA_MetricMaximum
>6810	BreakStatement	 
>6811	ExpressionStatement	 
>6812	AssignmentExpr	pfnGDALGridMethod = GDALGridDataMetricMinimum
>6813	Identifier	GDALGridDataMetricMinimum
>6814	Identifier	pfnGDALGridMethod
>6815	Label	 
>6816	Identifier	GGA_MetricMinimum
>6817	BreakStatement	 
>6818	ExpressionStatement	 
>6819	AssignmentExpr	bCreateQuadTree = ( nPoints > 100 && ( ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1 == ( ( \
>6820	AndExpression	nPoints > 100 && ( ( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1 == ( ( GDALGridNearestNeighborOptions * ) \
>6821	EqualityExpression	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1 == ( ( GDALGridNearestNeighborOptions * ) \
>6822	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius2
>6823	Identifier	dfRadius2
>6824	CastExpression	( GDALGridNearestNeighborOptions * ) poOptions
>6825	Identifier	poOptions
>6826	CastTarget	GDALGridNearestNeighborOptions *
>6827	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) poOptions ) -> dfRadius1
>6828	Identifier	dfRadius1
>6829	CastExpression	( GDALGridNearestNeighborOptions * ) poOptions
>6830	Identifier	poOptions
>6831	CastTarget	GDALGridNearestNeighborOptions *
>6832	RelationalExpression	nPoints > 100
>6833	PrimaryExpression	100
>6834	Identifier	nPoints
>6835	Identifier	bCreateQuadTree
>6836	ExpressionStatement	 
>6837	AssignmentExpr	pfnGDALGridMethod = GDALGridNearestNeighbor
>6838	Identifier	GDALGridNearestNeighbor
>6839	Identifier	pfnGDALGridMethod
>6840	Label	 
>6841	Identifier	GGA_NearestNeighbor
>6842	BreakStatement	 
>6843	ExpressionStatement	 
>6844	AssignmentExpr	pfnGDALGridMethod = GDALGridMovingAverage
>6845	Identifier	GDALGridMovingAverage
>6846	Identifier	pfnGDALGridMethod
>6847	Label	 
>6848	Identifier	GGA_MovingAverage
>6849	BreakStatement	 
>6850	IfStatement	if ( ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius1 == 0.0 && ( ( GDALGridInverseDistanceToAPowerOptions * ) \
>6851	ElseStatement	else
>6852	ExpressionStatement	 
>6853	AssignmentExpr	pfnGDALGridMethod = GDALGridInverseDistanceToAPower
>6854	Identifier	GDALGridInverseDistanceToAPower
>6855	Identifier	pfnGDALGridMethod
>6856	CompoundStatement	 
>6857	IfStatement	if ( dfPower == 2.0 && dfSmoothing == 0.0 )
>6858	CompoundStatement	 
>6859	IfStatement	if ( CSLTestBoolean ( CPLGetConfigOption ( \"GDAL_USE_SSE\" , \"YES\" ) ) && CPLHaveRuntimeSSE ( ) )
>6860	CompoundStatement	 
>6861	IfStatement	if ( pabyX != NULL && pabyY != NULL && pabyZ != NULL )
>6862	ElseStatement	else
>6863	CompoundStatement	 
>6864	ExpressionStatement	 
>6865	AssignmentExpr	pabyX = pabyY = pabyZ = NULL
>6866	AssignmentExpr	pabyY = pabyZ = NULL
>6867	AssignmentExpr	pabyZ = NULL
>6868	Identifier	NULL
>6869	Identifier	pabyZ
>6870	Identifier	pabyY
>6871	Identifier	pabyX
>6872	ExpressionStatement	 
>6873	CallExpression	VSIFree ( pabyZ )
>6874	ArgumentList	pabyZ
>6875	Argument	pabyZ
>6876	Identifier	pabyZ
>6877	Callee	VSIFree
>6878	Identifier	VSIFree
>6879	ExpressionStatement	 
>6880	CallExpression	VSIFree ( pabyY )
>6881	ArgumentList	pabyY
>6882	Argument	pabyY
>6883	Identifier	pabyY
>6884	Callee	VSIFree
>6885	Identifier	VSIFree
>6886	ExpressionStatement	 
>6887	CallExpression	VSIFree ( pabyX )
>6888	ArgumentList	pabyX
>6889	Argument	pabyX
>6890	Identifier	pabyX
>6891	Callee	VSIFree
>6892	Identifier	VSIFree
>6893	CompoundStatement	 
>6894	ForStatement	for ( i = 0 ; i < nPoints ; i ++ )
>6895	CompoundStatement	 
>6896	ExpressionStatement	 
>6897	AssignmentExpr	pafZAligned [ i ] = ( float ) padfZ [ i ]
>6898	CastExpression	( float ) padfZ [ i ]
>6899	ArrayIndexing	padfZ [ i ]
>6900	Identifier	i
>6901	Identifier	padfZ
>6902	CastTarget	float
>6903	ArrayIndexing	pafZAligned [ i ]
>6904	Identifier	i
>6905	Identifier	pafZAligned
>6906	ExpressionStatement	 
>6907	AssignmentExpr	pafYAligned [ i ] = ( float ) padfY [ i ]
>6908	CastExpression	( float ) padfY [ i ]
>6909	ArrayIndexing	padfY [ i ]
>6910	Identifier	i
>6911	Identifier	padfY
>6912	CastTarget	float
>6913	ArrayIndexing	pafYAligned [ i ]
>6914	Identifier	i
>6915	Identifier	pafYAligned
>6916	ExpressionStatement	 
>6917	AssignmentExpr	pafXAligned [ i ] = ( float ) padfX [ i ]
>6918	CastExpression	( float ) padfX [ i ]
>6919	ArrayIndexing	padfX [ i ]
>6920	Identifier	i
>6921	Identifier	padfX
>6922	CastTarget	float
>6923	ArrayIndexing	pafXAligned [ i ]
>6924	Identifier	i
>6925	Identifier	pafXAligned
>6926	IncDecOp	 
>6927	IncDec	++
>6928	Identifier	i
>6929	Condition	 
>6930	RelationalExpression	i < nPoints
>6931	Identifier	nPoints
>6932	Identifier	i
>6933	ForInit	 
>6934	AssignmentExpr	i = 0
>6935	PrimaryExpression	0
>6936	Identifier	i
>6937	IdentifierDeclStatement	 
>6938	IdentifierDecl	i
>6939	Identifier	i
>6940	IdentifierDeclType	GUInt32
>6941	ExpressionStatement	 
>6942	AssignmentExpr	pfnGDALGridMethod = GDALGridInverseDistanceToAPower2NoSmoothingNoSearchSSE
>6943	Identifier	GDALGridInverseDistanceToAPower2NoSmoothingNoSearchSSE
>6944	Identifier	pfnGDALGridMethod
>6945	ExpressionStatement	 
>6946	AssignmentExpr	pafZAligned = ( float * ) ALIGN16 ( pabyZ )
>6947	CastExpression	( float * ) ALIGN16 ( pabyZ )
>6948	CallExpression	ALIGN16 ( pabyZ )
>6949	ArgumentList	pabyZ
>6950	Argument	pabyZ
>6951	Identifier	pabyZ
>6952	Callee	ALIGN16
>6953	Identifier	ALIGN16
>6954	CastTarget	float *
>6955	Identifier	pafZAligned
>6956	ExpressionStatement	 
>6957	AssignmentExpr	pafYAligned = ( float * ) ALIGN16 ( pabyY )
>6958	CastExpression	( float * ) ALIGN16 ( pabyY )
>6959	CallExpression	ALIGN16 ( pabyY )
>6960	ArgumentList	pabyY
>6961	Argument	pabyY
>6962	Identifier	pabyY
>6963	Callee	ALIGN16
>6964	Identifier	ALIGN16
>6965	CastTarget	float *
>6966	Identifier	pafYAligned
>6967	ExpressionStatement	 
>6968	AssignmentExpr	pafXAligned = ( float * ) ALIGN16 ( pabyX )
>6969	CastExpression	( float * ) ALIGN16 ( pabyX )
>6970	CallExpression	ALIGN16 ( pabyX )
>6971	ArgumentList	pabyX
>6972	Argument	pabyX
>6973	Identifier	pabyX
>6974	Callee	ALIGN16
>6975	Identifier	ALIGN16
>6976	CastTarget	float *
>6977	Identifier	pafXAligned
>6978	ExpressionStatement	 
>6979	CallExpression	CPLDebug ( \"GDAL_GRID\" , \"Using SSE optimized version\" )
>6980	ArgumentList	\"GDAL_GRID\"
>6981	Argument	\"Using SSE optimized version\"
>6982	PrimaryExpression	\"Using SSE optimized version\"
>6983	Argument	\"GDAL_GRID\"
>6984	PrimaryExpression	\"GDAL_GRID\"
>6985	Callee	CPLDebug
>6986	Identifier	CPLDebug
>6987	Condition	 
>6988	AndExpression	pabyX != NULL && pabyY != NULL && pabyZ != NULL
>6989	AndExpression	pabyY != NULL && pabyZ != NULL
>6990	EqualityExpression	pabyZ != NULL
>6991	Identifier	NULL
>6992	Identifier	pabyZ
>6993	EqualityExpression	pabyY != NULL
>6994	Identifier	NULL
>6995	Identifier	pabyY
>6996	EqualityExpression	pabyX != NULL
>6997	Identifier	NULL
>6998	Identifier	pabyX
>6999	ExpressionStatement	 
>7000	AssignmentExpr	pabyZ = ( float * ) VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7001	CastExpression	( float * ) VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7002	CallExpression	VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7003	ArgumentList	sizeof ( float ) * nPoints + 15
>7004	Argument	sizeof ( float ) * nPoints + 15
>7005	AdditiveExpression	sizeof ( float ) * nPoints + 15
>7006	PrimaryExpression	15
>7007	MultiplicativeExpression	sizeof ( float ) * nPoints
>7008	Identifier	nPoints
>7009	SizeofExpr	sizeof ( float )
>7010	SizeofOperand	float
>7011	Sizeof	sizeof
>7012	Callee	VSIMalloc
>7013	Identifier	VSIMalloc
>7014	CastTarget	float *
>7015	Identifier	pabyZ
>7016	ExpressionStatement	 
>7017	AssignmentExpr	pabyY = ( float * ) VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7018	CastExpression	( float * ) VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7019	CallExpression	VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7020	ArgumentList	sizeof ( float ) * nPoints + 15
>7021	Argument	sizeof ( float ) * nPoints + 15
>7022	AdditiveExpression	sizeof ( float ) * nPoints + 15
>7023	PrimaryExpression	15
>7024	MultiplicativeExpression	sizeof ( float ) * nPoints
>7025	Identifier	nPoints
>7026	SizeofExpr	sizeof ( float )
>7027	SizeofOperand	float
>7028	Sizeof	sizeof
>7029	Callee	VSIMalloc
>7030	Identifier	VSIMalloc
>7031	CastTarget	float *
>7032	Identifier	pabyY
>7033	ExpressionStatement	 
>7034	AssignmentExpr	pabyX = ( float * ) VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7035	CastExpression	( float * ) VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7036	CallExpression	VSIMalloc ( sizeof ( float ) * nPoints + 15 )
>7037	ArgumentList	sizeof ( float ) * nPoints + 15
>7038	Argument	sizeof ( float ) * nPoints + 15
>7039	AdditiveExpression	sizeof ( float ) * nPoints + 15
>7040	PrimaryExpression	15
>7041	MultiplicativeExpression	sizeof ( float ) * nPoints
>7042	Identifier	nPoints
>7043	SizeofExpr	sizeof ( float )
>7044	SizeofOperand	float
>7045	Sizeof	sizeof
>7046	Callee	VSIMalloc
>7047	Identifier	VSIMalloc
>7048	CastTarget	float *
>7049	Identifier	pabyX
>7050	Condition	 
>7051	AndExpression	CSLTestBoolean ( CPLGetConfigOption ( \"GDAL_USE_SSE\" , \"YES\" ) ) && CPLHaveRuntimeSSE ( )
>7052	CallExpression	CPLHaveRuntimeSSE ( )
>7053	ArgumentList	 
>7054	Callee	CPLHaveRuntimeSSE
>7055	Identifier	CPLHaveRuntimeSSE
>7056	CallExpression	CSLTestBoolean ( CPLGetConfigOption ( \"GDAL_USE_SSE\" , \"YES\" ) )
>7057	ArgumentList	CPLGetConfigOption ( \"GDAL_USE_SSE\" , \"YES\" )
>7058	Argument	CPLGetConfigOption ( \"GDAL_USE_SSE\" , \"YES\" )
>7059	CallExpression	CPLGetConfigOption ( \"GDAL_USE_SSE\" , \"YES\" )
>7060	ArgumentList	\"GDAL_USE_SSE\"
>7061	Argument	\"YES\"
>7062	PrimaryExpression	\"YES\"
>7063	Argument	\"GDAL_USE_SSE\"
>7064	PrimaryExpression	\"GDAL_USE_SSE\"
>7065	Callee	CPLGetConfigOption
>7066	Identifier	CPLGetConfigOption
>7067	Callee	CSLTestBoolean
>7068	Identifier	CSLTestBoolean
>7069	Statement	 
>7070	Statement	 
>7071	Statement	 
>7072	Statement	 
>7073	Statement	 
>7074	Statement	 
>7075	Statement	 
>7076	Statement	 
>7077	Statement	 
>7078	Statement	 
>7079	Statement	 
>7080	Statement	 
>7081	Statement	 
>7082	Statement	 
>7083	Statement	 
>7084	Statement	 
>7085	Statement	 
>7086	Statement	 
>7087	Statement	 
>7088	Statement	 
>7089	Statement	 
>7090	Statement	 
>7091	Statement	 
>7092	Statement	 
>7093	Statement	 
>7094	Statement	 
>7095	Statement	 
>7096	Statement	 
>7097	Statement	 
>7098	Statement	 
>7099	Statement	 
>7100	Statement	 
>7101	Statement	 
>7102	Statement	 
>7103	Statement	 
>7104	Statement	 
>7105	Statement	 
>7106	Condition	 
>7107	AndExpression	dfPower == 2.0 && dfSmoothing == 0.0
>7108	EqualityExpression	dfSmoothing == 0.0
>7109	PrimaryExpression	0.0
>7110	Identifier	dfSmoothing
>7111	EqualityExpression	dfPower == 2.0
>7112	PrimaryExpression	2.0
>7113	Identifier	dfPower
>7114	ExpressionStatement	 
>7115	AssignmentExpr	pfnGDALGridMethod = GDALGridInverseDistanceToAPowerNoSearch
>7116	Identifier	GDALGridInverseDistanceToAPowerNoSearch
>7117	Identifier	pfnGDALGridMethod
>7118	IdentifierDeclStatement	 
>7119	IdentifierDecl	dfSmoothing = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>7120	AssignmentExpr	dfSmoothing = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>7121	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfSmoothing
>7122	Identifier	dfSmoothing
>7123	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>7124	Identifier	poOptions
>7125	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>7126	Identifier	dfSmoothing
>7127	Identifier	dfSmoothing
>7128	IdentifierDeclType	const double
>7129	IdentifierDeclStatement	 
>7130	IdentifierDecl	dfPower = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower
>7131	AssignmentExpr	dfPower = ( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower
>7132	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfPower
>7133	Identifier	dfPower
>7134	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>7135	Identifier	poOptions
>7136	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>7137	Identifier	dfPower
>7138	Identifier	dfPower
>7139	IdentifierDeclType	const double
>7140	Condition	 
>7141	AndExpression	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius1 == 0.0 && ( ( GDALGridInverseDistanceToAPowerOptions * ) \
>7142	EqualityExpression	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius2 == 0.0
>7143	PrimaryExpression	0.0
>7144	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius2
>7145	Identifier	dfRadius2
>7146	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>7147	Identifier	poOptions
>7148	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>7149	EqualityExpression	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius1 == 0.0
>7150	PrimaryExpression	0.0
>7151	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) poOptions ) -> dfRadius1
>7152	Identifier	dfRadius1
>7153	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) poOptions
>7154	Identifier	poOptions
>7155	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>7156	Label	 
>7157	Identifier	GGA_InverseDistanceToAPower
>7158	Condition	 
>7159	Identifier	eAlgorithm
>7160	IdentifierDeclStatement	 
>7161	IdentifierDecl	* pafZAligned = NULL
>7162	AssignmentExpr	* pafZAligned = NULL
>7163	Identifier	NULL
>7164	Identifier	NULL
>7165	Identifier	pafZAligned
>7166	IdentifierDeclType	float *
>7167	IdentifierDeclStatement	 
>7168	IdentifierDecl	* pafYAligned = NULL
>7169	AssignmentExpr	* pafYAligned = NULL
>7170	Identifier	NULL
>7171	Identifier	NULL
>7172	Identifier	pafYAligned
>7173	IdentifierDeclType	float *
>7174	IdentifierDeclStatement	 
>7175	IdentifierDecl	* pafXAligned = NULL
>7176	AssignmentExpr	* pafXAligned = NULL
>7177	Identifier	NULL
>7178	Identifier	NULL
>7179	Identifier	pafXAligned
>7180	IdentifierDeclType	float *
>7181	IdentifierDeclStatement	 
>7182	IdentifierDecl	* pabyZ = NULL
>7183	AssignmentExpr	* pabyZ = NULL
>7184	Identifier	NULL
>7185	Identifier	NULL
>7186	Identifier	pabyZ
>7187	IdentifierDeclType	void *
>7188	IdentifierDeclStatement	 
>7189	IdentifierDecl	* pabyY = NULL
>7190	AssignmentExpr	* pabyY = NULL
>7191	Identifier	NULL
>7192	Identifier	NULL
>7193	Identifier	pabyY
>7194	IdentifierDeclType	void *
>7195	IdentifierDeclStatement	 
>7196	IdentifierDecl	* pabyX = NULL
>7197	AssignmentExpr	* pabyX = NULL
>7198	Identifier	NULL
>7199	Identifier	NULL
>7200	Identifier	pabyX
>7201	IdentifierDeclType	void *
>7202	IdentifierDeclStatement	 
>7203	IdentifierDecl	bCreateQuadTree = FALSE
>7204	AssignmentExpr	bCreateQuadTree = FALSE
>7205	Identifier	FALSE
>7206	Identifier	FALSE
>7207	Identifier	bCreateQuadTree
>7208	IdentifierDeclType	int
>7209	IdentifierDeclStatement	 
>7210	IdentifierDecl	pfnGDALGridMethod
>7211	Identifier	pfnGDALGridMethod
>7212	IdentifierDeclType	GDALGridFunction
>7213	IfStatement	if ( nXSize == 0 || nYSize == 0 )
>7214	CompoundStatement	 
>7215	ReturnStatement	 
>7216	Identifier	CE_Failure
>7217	ExpressionStatement	 
>7218	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"Output raster dimesions should have non-zero size.\" )
>7219	ArgumentList	CE_Failure
>7220	Argument	\"Output raster dimesions should have non-zero size.\"
>7221	PrimaryExpression	\"Output raster dimesions should have non-zero size.\"
>7222	Argument	CPLE_IllegalArg
>7223	Identifier	CPLE_IllegalArg
>7224	Argument	CE_Failure
>7225	Identifier	CE_Failure
>7226	Callee	CPLError
>7227	Identifier	CPLError
>7228	Condition	 
>7229	OrExpression	nXSize == 0 || nYSize == 0
>7230	EqualityExpression	nYSize == 0
>7231	PrimaryExpression	0
>7232	Identifier	nYSize
>7233	EqualityExpression	nXSize == 0
>7234	PrimaryExpression	0
>7235	Identifier	nXSize
>7236	IfStatement	if ( pfnProgress == NULL )
>7237	ExpressionStatement	 
>7238	AssignmentExpr	pfnProgress = GDALDummyProgress
>7239	Identifier	GDALDummyProgress
>7240	Identifier	pfnProgress
>7241	Condition	 
>7242	EqualityExpression	pfnProgress == NULL
>7243	Identifier	NULL
>7244	Identifier	pfnProgress
>7245	ExpressionStatement	 
>7246	CallExpression	CPLAssert ( pData )
>7247	ArgumentList	pData
>7248	Argument	pData
>7249	Identifier	pData
>7250	Callee	CPLAssert
>7251	Identifier	CPLAssert
>7252	ExpressionStatement	 
>7253	CallExpression	CPLAssert ( padfZ )
>7254	ArgumentList	padfZ
>7255	Argument	padfZ
>7256	Identifier	padfZ
>7257	Callee	CPLAssert
>7258	Identifier	CPLAssert
>7259	ExpressionStatement	 
>7260	CallExpression	CPLAssert ( padfY )
>7261	ArgumentList	padfY
>7262	Argument	padfY
>7263	Identifier	padfY
>7264	Callee	CPLAssert
>7265	Identifier	CPLAssert
>7266	ExpressionStatement	 
>7267	CallExpression	CPLAssert ( padfX )
>7268	ArgumentList	padfX
>7269	Argument	padfX
>7270	Identifier	padfX
>7271	Callee	CPLAssert
>7272	Identifier	CPLAssert
>7273	ExpressionStatement	 
>7274	CallExpression	CPLAssert ( poOptions )
>7275	ArgumentList	poOptions
>7276	Argument	poOptions
>7277	Identifier	poOptions
>7278	Callee	CPLAssert
>7279	Identifier	CPLAssert
>7429	FunctionDef	ParseAlgorithmAndOptions (const char * pszAlgoritm , GDALGridAlgorithm * peAlgorithm , void * * ppOptions)
>7430	ParameterList	const char * pszAlgoritm , GDALGridAlgorithm * peAlgorithm , void * * ppOptions
>7431	Parameter	 
>7432	Identifier	ppOptions
>7433	ParameterType	void * *
>7434	Parameter	 
>7435	Identifier	peAlgorithm
>7436	ParameterType	GDALGridAlgorithm *
>7437	Parameter	 
>7438	Identifier	pszAlgoritm
>7439	ParameterType	const char *
>7440	ReturnType	CPLErr
>7441	CompoundStatement	 
>7442	ReturnStatement	 
>7443	Identifier	CE_None
>7444	ExpressionStatement	 
>7445	CallExpression	CSLDestroy ( papszParms )
>7446	ArgumentList	papszParms
>7447	Argument	papszParms
>7448	Identifier	papszParms
>7449	Callee	CSLDestroy
>7450	Identifier	CSLDestroy
>7451	SwitchStatement	switch ( * peAlgorithm )
>7452	CompoundStatement	 
>7453	BreakStatement	 
>7454	ExpressionStatement	 
>7455	AssignmentExpr	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfNoDataValue = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7456	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7457	PrimaryExpression	0.0
>7458	CallExpression	CPLAtofM ( pszValue )
>7459	ArgumentList	pszValue
>7460	Argument	pszValue
>7461	Identifier	pszValue
>7462	Callee	CPLAtofM
>7463	Identifier	CPLAtofM
>7464	Condition	pszValue
>7465	Identifier	pszValue
>7466	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfNoDataValue
>7467	Identifier	dfNoDataValue
>7468	CastExpression	( GDALGridDataMetricsOptions * ) * ppOptions
>7469	UnaryOp	* ppOptions
>7470	Identifier	ppOptions
>7471	UnaryOperator	*
>7472	CastTarget	GDALGridDataMetricsOptions *
>7473	ExpressionStatement	 
>7474	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"nodata\" )
>7475	CallExpression	CSLFetchNameValue ( papszParms , \"nodata\" )
>7476	ArgumentList	papszParms
>7477	Argument	\"nodata\"
>7478	PrimaryExpression	\"nodata\"
>7479	Argument	papszParms
>7480	Identifier	papszParms
>7481	Callee	CSLFetchNameValue
>7482	Identifier	CSLFetchNameValue
>7483	Identifier	pszValue
>7484	ExpressionStatement	 
>7485	AssignmentExpr	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> nMinPoints = ( pszValue ) ? atol ( pszValue ) 
>7486	ConditionalExpression	( pszValue ) ? atol ( pszValue ) 
>7487	PrimaryExpression	0
>7488	CallExpression	atol ( pszValue )
>7489	ArgumentList	pszValue
>7490	Argument	pszValue
>7491	Identifier	pszValue
>7492	Callee	atol
>7493	Identifier	atol
>7494	Condition	pszValue
>7495	Identifier	pszValue
>7496	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> nMinPoints
>7497	Identifier	nMinPoints
>7498	CastExpression	( GDALGridDataMetricsOptions * ) * ppOptions
>7499	UnaryOp	* ppOptions
>7500	Identifier	ppOptions
>7501	UnaryOperator	*
>7502	CastTarget	GDALGridDataMetricsOptions *
>7503	ExpressionStatement	 
>7504	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"min_points\" )
>7505	CallExpression	CSLFetchNameValue ( papszParms , \"min_points\" )
>7506	ArgumentList	papszParms
>7507	Argument	\"min_points\"
>7508	PrimaryExpression	\"min_points\"
>7509	Argument	papszParms
>7510	Identifier	papszParms
>7511	Callee	CSLFetchNameValue
>7512	Identifier	CSLFetchNameValue
>7513	Identifier	pszValue
>7514	ExpressionStatement	 
>7515	AssignmentExpr	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfAngle = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7516	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7517	PrimaryExpression	0.0
>7518	CallExpression	CPLAtofM ( pszValue )
>7519	ArgumentList	pszValue
>7520	Argument	pszValue
>7521	Identifier	pszValue
>7522	Callee	CPLAtofM
>7523	Identifier	CPLAtofM
>7524	Condition	pszValue
>7525	Identifier	pszValue
>7526	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfAngle
>7527	Identifier	dfAngle
>7528	CastExpression	( GDALGridDataMetricsOptions * ) * ppOptions
>7529	UnaryOp	* ppOptions
>7530	Identifier	ppOptions
>7531	UnaryOperator	*
>7532	CastTarget	GDALGridDataMetricsOptions *
>7533	ExpressionStatement	 
>7534	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"angle\" )
>7535	CallExpression	CSLFetchNameValue ( papszParms , \"angle\" )
>7536	ArgumentList	papszParms
>7537	Argument	\"angle\"
>7538	PrimaryExpression	\"angle\"
>7539	Argument	papszParms
>7540	Identifier	papszParms
>7541	Callee	CSLFetchNameValue
>7542	Identifier	CSLFetchNameValue
>7543	Identifier	pszValue
>7544	ExpressionStatement	 
>7545	AssignmentExpr	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfRadius2 = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7546	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7547	PrimaryExpression	0.0
>7548	CallExpression	CPLAtofM ( pszValue )
>7549	ArgumentList	pszValue
>7550	Argument	pszValue
>7551	Identifier	pszValue
>7552	Callee	CPLAtofM
>7553	Identifier	CPLAtofM
>7554	Condition	pszValue
>7555	Identifier	pszValue
>7556	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfRadius2
>7557	Identifier	dfRadius2
>7558	CastExpression	( GDALGridDataMetricsOptions * ) * ppOptions
>7559	UnaryOp	* ppOptions
>7560	Identifier	ppOptions
>7561	UnaryOperator	*
>7562	CastTarget	GDALGridDataMetricsOptions *
>7563	ExpressionStatement	 
>7564	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius2\" )
>7565	CallExpression	CSLFetchNameValue ( papszParms , \"radius2\" )
>7566	ArgumentList	papszParms
>7567	Argument	\"radius2\"
>7568	PrimaryExpression	\"radius2\"
>7569	Argument	papszParms
>7570	Identifier	papszParms
>7571	Callee	CSLFetchNameValue
>7572	Identifier	CSLFetchNameValue
>7573	Identifier	pszValue
>7574	ExpressionStatement	 
>7575	AssignmentExpr	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfRadius1 = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7576	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7577	PrimaryExpression	0.0
>7578	CallExpression	CPLAtofM ( pszValue )
>7579	ArgumentList	pszValue
>7580	Argument	pszValue
>7581	Identifier	pszValue
>7582	Callee	CPLAtofM
>7583	Identifier	CPLAtofM
>7584	Condition	pszValue
>7585	Identifier	pszValue
>7586	PtrMemberAccess	( ( GDALGridDataMetricsOptions * ) * ppOptions ) -> dfRadius1
>7587	Identifier	dfRadius1
>7588	CastExpression	( GDALGridDataMetricsOptions * ) * ppOptions
>7589	UnaryOp	* ppOptions
>7590	Identifier	ppOptions
>7591	UnaryOperator	*
>7592	CastTarget	GDALGridDataMetricsOptions *
>7593	ExpressionStatement	 
>7594	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius1\" )
>7595	CallExpression	CSLFetchNameValue ( papszParms , \"radius1\" )
>7596	ArgumentList	papszParms
>7597	Argument	\"radius1\"
>7598	PrimaryExpression	\"radius1\"
>7599	Argument	papszParms
>7600	Identifier	papszParms
>7601	Callee	CSLFetchNameValue
>7602	Identifier	CSLFetchNameValue
>7603	Identifier	pszValue
>7604	ExpressionStatement	 
>7605	AssignmentExpr	* ppOptions = CPLMalloc ( sizeof ( GDALGridDataMetricsOptions ) )
>7606	CallExpression	CPLMalloc ( sizeof ( GDALGridDataMetricsOptions ) )
>7607	ArgumentList	sizeof ( GDALGridDataMetricsOptions )
>7608	Argument	sizeof ( GDALGridDataMetricsOptions )
>7609	SizeofExpr	sizeof ( GDALGridDataMetricsOptions )
>7610	SizeofOperand	GDALGridDataMetricsOptions
>7611	Sizeof	sizeof
>7612	Callee	CPLMalloc
>7613	Identifier	CPLMalloc
>7614	UnaryOp	* ppOptions
>7615	Identifier	ppOptions
>7616	UnaryOperator	*
>7617	Label	 
>7618	Identifier	GGA_MetricAverageDistancePts
>7619	Label	 
>7620	Identifier	GGA_MetricAverageDistance
>7621	Label	 
>7622	Identifier	GGA_MetricCount
>7623	Label	 
>7624	Identifier	GGA_MetricRange
>7625	Label	 
>7626	Identifier	GGA_MetricMaximum
>7627	Label	 
>7628	Identifier	GGA_MetricMinimum
>7629	BreakStatement	 
>7630	ExpressionStatement	 
>7631	AssignmentExpr	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfNoDataValue = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7632	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7633	PrimaryExpression	0.0
>7634	CallExpression	CPLAtofM ( pszValue )
>7635	ArgumentList	pszValue
>7636	Argument	pszValue
>7637	Identifier	pszValue
>7638	Callee	CPLAtofM
>7639	Identifier	CPLAtofM
>7640	Condition	pszValue
>7641	Identifier	pszValue
>7642	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfNoDataValue
>7643	Identifier	dfNoDataValue
>7644	CastExpression	( GDALGridNearestNeighborOptions * ) * ppOptions
>7645	UnaryOp	* ppOptions
>7646	Identifier	ppOptions
>7647	UnaryOperator	*
>7648	CastTarget	GDALGridNearestNeighborOptions *
>7649	ExpressionStatement	 
>7650	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"nodata\" )
>7651	CallExpression	CSLFetchNameValue ( papszParms , \"nodata\" )
>7652	ArgumentList	papszParms
>7653	Argument	\"nodata\"
>7654	PrimaryExpression	\"nodata\"
>7655	Argument	papszParms
>7656	Identifier	papszParms
>7657	Callee	CSLFetchNameValue
>7658	Identifier	CSLFetchNameValue
>7659	Identifier	pszValue
>7660	ExpressionStatement	 
>7661	AssignmentExpr	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfAngle = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7662	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7663	PrimaryExpression	0.0
>7664	CallExpression	CPLAtofM ( pszValue )
>7665	ArgumentList	pszValue
>7666	Argument	pszValue
>7667	Identifier	pszValue
>7668	Callee	CPLAtofM
>7669	Identifier	CPLAtofM
>7670	Condition	pszValue
>7671	Identifier	pszValue
>7672	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfAngle
>7673	Identifier	dfAngle
>7674	CastExpression	( GDALGridNearestNeighborOptions * ) * ppOptions
>7675	UnaryOp	* ppOptions
>7676	Identifier	ppOptions
>7677	UnaryOperator	*
>7678	CastTarget	GDALGridNearestNeighborOptions *
>7679	ExpressionStatement	 
>7680	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"angle\" )
>7681	CallExpression	CSLFetchNameValue ( papszParms , \"angle\" )
>7682	ArgumentList	papszParms
>7683	Argument	\"angle\"
>7684	PrimaryExpression	\"angle\"
>7685	Argument	papszParms
>7686	Identifier	papszParms
>7687	Callee	CSLFetchNameValue
>7688	Identifier	CSLFetchNameValue
>7689	Identifier	pszValue
>7690	ExpressionStatement	 
>7691	AssignmentExpr	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfRadius2 = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7692	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7693	PrimaryExpression	0.0
>7694	CallExpression	CPLAtofM ( pszValue )
>7695	ArgumentList	pszValue
>7696	Argument	pszValue
>7697	Identifier	pszValue
>7698	Callee	CPLAtofM
>7699	Identifier	CPLAtofM
>7700	Condition	pszValue
>7701	Identifier	pszValue
>7702	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfRadius2
>7703	Identifier	dfRadius2
>7704	CastExpression	( GDALGridNearestNeighborOptions * ) * ppOptions
>7705	UnaryOp	* ppOptions
>7706	Identifier	ppOptions
>7707	UnaryOperator	*
>7708	CastTarget	GDALGridNearestNeighborOptions *
>7709	ExpressionStatement	 
>7710	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius2\" )
>7711	CallExpression	CSLFetchNameValue ( papszParms , \"radius2\" )
>7712	ArgumentList	papszParms
>7713	Argument	\"radius2\"
>7714	PrimaryExpression	\"radius2\"
>7715	Argument	papszParms
>7716	Identifier	papszParms
>7717	Callee	CSLFetchNameValue
>7718	Identifier	CSLFetchNameValue
>7719	Identifier	pszValue
>7720	ExpressionStatement	 
>7721	AssignmentExpr	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfRadius1 = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7722	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7723	PrimaryExpression	0.0
>7724	CallExpression	CPLAtofM ( pszValue )
>7725	ArgumentList	pszValue
>7726	Argument	pszValue
>7727	Identifier	pszValue
>7728	Callee	CPLAtofM
>7729	Identifier	CPLAtofM
>7730	Condition	pszValue
>7731	Identifier	pszValue
>7732	PtrMemberAccess	( ( GDALGridNearestNeighborOptions * ) * ppOptions ) -> dfRadius1
>7733	Identifier	dfRadius1
>7734	CastExpression	( GDALGridNearestNeighborOptions * ) * ppOptions
>7735	UnaryOp	* ppOptions
>7736	Identifier	ppOptions
>7737	UnaryOperator	*
>7738	CastTarget	GDALGridNearestNeighborOptions *
>7739	ExpressionStatement	 
>7740	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius1\" )
>7741	CallExpression	CSLFetchNameValue ( papszParms , \"radius1\" )
>7742	ArgumentList	papszParms
>7743	Argument	\"radius1\"
>7744	PrimaryExpression	\"radius1\"
>7745	Argument	papszParms
>7746	Identifier	papszParms
>7747	Callee	CSLFetchNameValue
>7748	Identifier	CSLFetchNameValue
>7749	Identifier	pszValue
>7750	ExpressionStatement	 
>7751	AssignmentExpr	* ppOptions = CPLMalloc ( sizeof ( GDALGridNearestNeighborOptions ) )
>7752	CallExpression	CPLMalloc ( sizeof ( GDALGridNearestNeighborOptions ) )
>7753	ArgumentList	sizeof ( GDALGridNearestNeighborOptions )
>7754	Argument	sizeof ( GDALGridNearestNeighborOptions )
>7755	SizeofExpr	sizeof ( GDALGridNearestNeighborOptions )
>7756	SizeofOperand	GDALGridNearestNeighborOptions
>7757	Sizeof	sizeof
>7758	Callee	CPLMalloc
>7759	Identifier	CPLMalloc
>7760	UnaryOp	* ppOptions
>7761	Identifier	ppOptions
>7762	UnaryOperator	*
>7763	Label	 
>7764	Identifier	GGA_NearestNeighbor
>7765	BreakStatement	 
>7766	ExpressionStatement	 
>7767	AssignmentExpr	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfNoDataValue = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7768	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7769	PrimaryExpression	0.0
>7770	CallExpression	CPLAtofM ( pszValue )
>7771	ArgumentList	pszValue
>7772	Argument	pszValue
>7773	Identifier	pszValue
>7774	Callee	CPLAtofM
>7775	Identifier	CPLAtofM
>7776	Condition	pszValue
>7777	Identifier	pszValue
>7778	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfNoDataValue
>7779	Identifier	dfNoDataValue
>7780	CastExpression	( GDALGridMovingAverageOptions * ) * ppOptions
>7781	UnaryOp	* ppOptions
>7782	Identifier	ppOptions
>7783	UnaryOperator	*
>7784	CastTarget	GDALGridMovingAverageOptions *
>7785	ExpressionStatement	 
>7786	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"nodata\" )
>7787	CallExpression	CSLFetchNameValue ( papszParms , \"nodata\" )
>7788	ArgumentList	papszParms
>7789	Argument	\"nodata\"
>7790	PrimaryExpression	\"nodata\"
>7791	Argument	papszParms
>7792	Identifier	papszParms
>7793	Callee	CSLFetchNameValue
>7794	Identifier	CSLFetchNameValue
>7795	Identifier	pszValue
>7796	ExpressionStatement	 
>7797	AssignmentExpr	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> nMinPoints = ( GUInt32 ) ( ( pszValue ) ? CPLAtofM ( \
>7798	CastExpression	( GUInt32 ) ( ( pszValue ) ? CPLAtofM ( pszValue ) 
>7799	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7800	PrimaryExpression	0
>7801	CallExpression	CPLAtofM ( pszValue )
>7802	ArgumentList	pszValue
>7803	Argument	pszValue
>7804	Identifier	pszValue
>7805	Callee	CPLAtofM
>7806	Identifier	CPLAtofM
>7807	Condition	pszValue
>7808	Identifier	pszValue
>7809	CastTarget	GUInt32
>7810	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> nMinPoints
>7811	Identifier	nMinPoints
>7812	CastExpression	( GDALGridMovingAverageOptions * ) * ppOptions
>7813	UnaryOp	* ppOptions
>7814	Identifier	ppOptions
>7815	UnaryOperator	*
>7816	CastTarget	GDALGridMovingAverageOptions *
>7817	ExpressionStatement	 
>7818	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"min_points\" )
>7819	CallExpression	CSLFetchNameValue ( papszParms , \"min_points\" )
>7820	ArgumentList	papszParms
>7821	Argument	\"min_points\"
>7822	PrimaryExpression	\"min_points\"
>7823	Argument	papszParms
>7824	Identifier	papszParms
>7825	Callee	CSLFetchNameValue
>7826	Identifier	CSLFetchNameValue
>7827	Identifier	pszValue
>7828	ExpressionStatement	 
>7829	AssignmentExpr	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfAngle = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7830	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7831	PrimaryExpression	0.0
>7832	CallExpression	CPLAtofM ( pszValue )
>7833	ArgumentList	pszValue
>7834	Argument	pszValue
>7835	Identifier	pszValue
>7836	Callee	CPLAtofM
>7837	Identifier	CPLAtofM
>7838	Condition	pszValue
>7839	Identifier	pszValue
>7840	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfAngle
>7841	Identifier	dfAngle
>7842	CastExpression	( GDALGridMovingAverageOptions * ) * ppOptions
>7843	UnaryOp	* ppOptions
>7844	Identifier	ppOptions
>7845	UnaryOperator	*
>7846	CastTarget	GDALGridMovingAverageOptions *
>7847	ExpressionStatement	 
>7848	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"angle\" )
>7849	CallExpression	CSLFetchNameValue ( papszParms , \"angle\" )
>7850	ArgumentList	papszParms
>7851	Argument	\"angle\"
>7852	PrimaryExpression	\"angle\"
>7853	Argument	papszParms
>7854	Identifier	papszParms
>7855	Callee	CSLFetchNameValue
>7856	Identifier	CSLFetchNameValue
>7857	Identifier	pszValue
>7858	ExpressionStatement	 
>7859	AssignmentExpr	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfRadius2 = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7860	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7861	PrimaryExpression	0.0
>7862	CallExpression	CPLAtofM ( pszValue )
>7863	ArgumentList	pszValue
>7864	Argument	pszValue
>7865	Identifier	pszValue
>7866	Callee	CPLAtofM
>7867	Identifier	CPLAtofM
>7868	Condition	pszValue
>7869	Identifier	pszValue
>7870	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfRadius2
>7871	Identifier	dfRadius2
>7872	CastExpression	( GDALGridMovingAverageOptions * ) * ppOptions
>7873	UnaryOp	* ppOptions
>7874	Identifier	ppOptions
>7875	UnaryOperator	*
>7876	CastTarget	GDALGridMovingAverageOptions *
>7877	ExpressionStatement	 
>7878	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius2\" )
>7879	CallExpression	CSLFetchNameValue ( papszParms , \"radius2\" )
>7880	ArgumentList	papszParms
>7881	Argument	\"radius2\"
>7882	PrimaryExpression	\"radius2\"
>7883	Argument	papszParms
>7884	Identifier	papszParms
>7885	Callee	CSLFetchNameValue
>7886	Identifier	CSLFetchNameValue
>7887	Identifier	pszValue
>7888	ExpressionStatement	 
>7889	AssignmentExpr	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfRadius1 = ( pszValue ) ? CPLAtofM ( pszValue ) 
>7890	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7891	PrimaryExpression	0.0
>7892	CallExpression	CPLAtofM ( pszValue )
>7893	ArgumentList	pszValue
>7894	Argument	pszValue
>7895	Identifier	pszValue
>7896	Callee	CPLAtofM
>7897	Identifier	CPLAtofM
>7898	Condition	pszValue
>7899	Identifier	pszValue
>7900	PtrMemberAccess	( ( GDALGridMovingAverageOptions * ) * ppOptions ) -> dfRadius1
>7901	Identifier	dfRadius1
>7902	CastExpression	( GDALGridMovingAverageOptions * ) * ppOptions
>7903	UnaryOp	* ppOptions
>7904	Identifier	ppOptions
>7905	UnaryOperator	*
>7906	CastTarget	GDALGridMovingAverageOptions *
>7907	ExpressionStatement	 
>7908	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius1\" )
>7909	CallExpression	CSLFetchNameValue ( papszParms , \"radius1\" )
>7910	ArgumentList	papszParms
>7911	Argument	\"radius1\"
>7912	PrimaryExpression	\"radius1\"
>7913	Argument	papszParms
>7914	Identifier	papszParms
>7915	Callee	CSLFetchNameValue
>7916	Identifier	CSLFetchNameValue
>7917	Identifier	pszValue
>7918	ExpressionStatement	 
>7919	AssignmentExpr	* ppOptions = CPLMalloc ( sizeof ( GDALGridMovingAverageOptions ) )
>7920	CallExpression	CPLMalloc ( sizeof ( GDALGridMovingAverageOptions ) )
>7921	ArgumentList	sizeof ( GDALGridMovingAverageOptions )
>7922	Argument	sizeof ( GDALGridMovingAverageOptions )
>7923	SizeofExpr	sizeof ( GDALGridMovingAverageOptions )
>7924	SizeofOperand	GDALGridMovingAverageOptions
>7925	Sizeof	sizeof
>7926	Callee	CPLMalloc
>7927	Identifier	CPLMalloc
>7928	UnaryOp	* ppOptions
>7929	Identifier	ppOptions
>7930	UnaryOperator	*
>7931	Label	 
>7932	Identifier	GGA_MovingAverage
>7933	BreakStatement	 
>7934	ExpressionStatement	 
>7935	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfNoDataValue = ( pszValue ) ? CPLAtofM ( \
>7936	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7937	PrimaryExpression	0.0
>7938	CallExpression	CPLAtofM ( pszValue )
>7939	ArgumentList	pszValue
>7940	Argument	pszValue
>7941	Identifier	pszValue
>7942	Callee	CPLAtofM
>7943	Identifier	CPLAtofM
>7944	Condition	pszValue
>7945	Identifier	pszValue
>7946	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfNoDataValue
>7947	Identifier	dfNoDataValue
>7948	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>7949	UnaryOp	* ppOptions
>7950	Identifier	ppOptions
>7951	UnaryOperator	*
>7952	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>7953	ExpressionStatement	 
>7954	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"nodata\" )
>7955	CallExpression	CSLFetchNameValue ( papszParms , \"nodata\" )
>7956	ArgumentList	papszParms
>7957	Argument	\"nodata\"
>7958	PrimaryExpression	\"nodata\"
>7959	Argument	papszParms
>7960	Identifier	papszParms
>7961	Callee	CSLFetchNameValue
>7962	Identifier	CSLFetchNameValue
>7963	Identifier	pszValue
>7964	ExpressionStatement	 
>7965	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> nMinPoints = ( GUInt32 ) ( ( pszValue ) ? \
>7966	CastExpression	( GUInt32 ) ( ( pszValue ) ? CPLAtofM ( pszValue ) 
>7967	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>7968	PrimaryExpression	0
>7969	CallExpression	CPLAtofM ( pszValue )
>7970	ArgumentList	pszValue
>7971	Argument	pszValue
>7972	Identifier	pszValue
>7973	Callee	CPLAtofM
>7974	Identifier	CPLAtofM
>7975	Condition	pszValue
>7976	Identifier	pszValue
>7977	CastTarget	GUInt32
>7978	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> nMinPoints
>7979	Identifier	nMinPoints
>7980	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>7981	UnaryOp	* ppOptions
>7982	Identifier	ppOptions
>7983	UnaryOperator	*
>7984	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>7985	ExpressionStatement	 
>7986	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"min_points\" )
>7987	CallExpression	CSLFetchNameValue ( papszParms , \"min_points\" )
>7988	ArgumentList	papszParms
>7989	Argument	\"min_points\"
>7990	PrimaryExpression	\"min_points\"
>7991	Argument	papszParms
>7992	Identifier	papszParms
>7993	Callee	CSLFetchNameValue
>7994	Identifier	CSLFetchNameValue
>7995	Identifier	pszValue
>7996	ExpressionStatement	 
>7997	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> nMaxPoints = ( GUInt32 ) ( ( pszValue ) ? \
>7998	CastExpression	( GUInt32 ) ( ( pszValue ) ? CPLAtofM ( pszValue ) 
>7999	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>8000	PrimaryExpression	0
>8001	CallExpression	CPLAtofM ( pszValue )
>8002	ArgumentList	pszValue
>8003	Argument	pszValue
>8004	Identifier	pszValue
>8005	Callee	CPLAtofM
>8006	Identifier	CPLAtofM
>8007	Condition	pszValue
>8008	Identifier	pszValue
>8009	CastTarget	GUInt32
>8010	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> nMaxPoints
>8011	Identifier	nMaxPoints
>8012	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>8013	UnaryOp	* ppOptions
>8014	Identifier	ppOptions
>8015	UnaryOperator	*
>8016	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>8017	ExpressionStatement	 
>8018	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"max_points\" )
>8019	CallExpression	CSLFetchNameValue ( papszParms , \"max_points\" )
>8020	ArgumentList	papszParms
>8021	Argument	\"max_points\"
>8022	PrimaryExpression	\"max_points\"
>8023	Argument	papszParms
>8024	Identifier	papszParms
>8025	Callee	CSLFetchNameValue
>8026	Identifier	CSLFetchNameValue
>8027	Identifier	pszValue
>8028	ExpressionStatement	 
>8029	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfAngle = ( pszValue ) ? CPLAtofM ( pszValue ) 
>8030	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>8031	PrimaryExpression	0.0
>8032	CallExpression	CPLAtofM ( pszValue )
>8033	ArgumentList	pszValue
>8034	Argument	pszValue
>8035	Identifier	pszValue
>8036	Callee	CPLAtofM
>8037	Identifier	CPLAtofM
>8038	Condition	pszValue
>8039	Identifier	pszValue
>8040	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfAngle
>8041	Identifier	dfAngle
>8042	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>8043	UnaryOp	* ppOptions
>8044	Identifier	ppOptions
>8045	UnaryOperator	*
>8046	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>8047	ExpressionStatement	 
>8048	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"angle\" )
>8049	CallExpression	CSLFetchNameValue ( papszParms , \"angle\" )
>8050	ArgumentList	papszParms
>8051	Argument	\"angle\"
>8052	PrimaryExpression	\"angle\"
>8053	Argument	papszParms
>8054	Identifier	papszParms
>8055	Callee	CSLFetchNameValue
>8056	Identifier	CSLFetchNameValue
>8057	Identifier	pszValue
>8058	ExpressionStatement	 
>8059	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfRadius2 = ( pszValue ) ? CPLAtofM ( \
>8060	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>8061	PrimaryExpression	0.0
>8062	CallExpression	CPLAtofM ( pszValue )
>8063	ArgumentList	pszValue
>8064	Argument	pszValue
>8065	Identifier	pszValue
>8066	Callee	CPLAtofM
>8067	Identifier	CPLAtofM
>8068	Condition	pszValue
>8069	Identifier	pszValue
>8070	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfRadius2
>8071	Identifier	dfRadius2
>8072	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>8073	UnaryOp	* ppOptions
>8074	Identifier	ppOptions
>8075	UnaryOperator	*
>8076	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>8077	ExpressionStatement	 
>8078	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius2\" )
>8079	CallExpression	CSLFetchNameValue ( papszParms , \"radius2\" )
>8080	ArgumentList	papszParms
>8081	Argument	\"radius2\"
>8082	PrimaryExpression	\"radius2\"
>8083	Argument	papszParms
>8084	Identifier	papszParms
>8085	Callee	CSLFetchNameValue
>8086	Identifier	CSLFetchNameValue
>8087	Identifier	pszValue
>8088	ExpressionStatement	 
>8089	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfRadius1 = ( pszValue ) ? CPLAtofM ( \
>8090	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>8091	PrimaryExpression	0.0
>8092	CallExpression	CPLAtofM ( pszValue )
>8093	ArgumentList	pszValue
>8094	Argument	pszValue
>8095	Identifier	pszValue
>8096	Callee	CPLAtofM
>8097	Identifier	CPLAtofM
>8098	Condition	pszValue
>8099	Identifier	pszValue
>8100	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfRadius1
>8101	Identifier	dfRadius1
>8102	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>8103	UnaryOp	* ppOptions
>8104	Identifier	ppOptions
>8105	UnaryOperator	*
>8106	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>8107	ExpressionStatement	 
>8108	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"radius1\" )
>8109	CallExpression	CSLFetchNameValue ( papszParms , \"radius1\" )
>8110	ArgumentList	papszParms
>8111	Argument	\"radius1\"
>8112	PrimaryExpression	\"radius1\"
>8113	Argument	papszParms
>8114	Identifier	papszParms
>8115	Callee	CSLFetchNameValue
>8116	Identifier	CSLFetchNameValue
>8117	Identifier	pszValue
>8118	ExpressionStatement	 
>8119	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfSmoothing = ( pszValue ) ? CPLAtofM ( \
>8120	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>8121	PrimaryExpression	0.0
>8122	CallExpression	CPLAtofM ( pszValue )
>8123	ArgumentList	pszValue
>8124	Argument	pszValue
>8125	Identifier	pszValue
>8126	Callee	CPLAtofM
>8127	Identifier	CPLAtofM
>8128	Condition	pszValue
>8129	Identifier	pszValue
>8130	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfSmoothing
>8131	Identifier	dfSmoothing
>8132	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>8133	UnaryOp	* ppOptions
>8134	Identifier	ppOptions
>8135	UnaryOperator	*
>8136	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>8137	ExpressionStatement	 
>8138	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"smoothing\" )
>8139	CallExpression	CSLFetchNameValue ( papszParms , \"smoothing\" )
>8140	ArgumentList	papszParms
>8141	Argument	\"smoothing\"
>8142	PrimaryExpression	\"smoothing\"
>8143	Argument	papszParms
>8144	Identifier	papszParms
>8145	Callee	CSLFetchNameValue
>8146	Identifier	CSLFetchNameValue
>8147	Identifier	pszValue
>8148	ExpressionStatement	 
>8149	AssignmentExpr	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfPower = ( pszValue ) ? CPLAtofM ( pszValue ) 
>8150	ConditionalExpression	( pszValue ) ? CPLAtofM ( pszValue ) 
>8151	PrimaryExpression	2.0
>8152	CallExpression	CPLAtofM ( pszValue )
>8153	ArgumentList	pszValue
>8154	Argument	pszValue
>8155	Identifier	pszValue
>8156	Callee	CPLAtofM
>8157	Identifier	CPLAtofM
>8158	Condition	pszValue
>8159	Identifier	pszValue
>8160	PtrMemberAccess	( ( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions ) -> dfPower
>8161	Identifier	dfPower
>8162	CastExpression	( GDALGridInverseDistanceToAPowerOptions * ) * ppOptions
>8163	UnaryOp	* ppOptions
>8164	Identifier	ppOptions
>8165	UnaryOperator	*
>8166	CastTarget	GDALGridInverseDistanceToAPowerOptions *
>8167	ExpressionStatement	 
>8168	AssignmentExpr	pszValue = CSLFetchNameValue ( papszParms , \"power\" )
>8169	CallExpression	CSLFetchNameValue ( papszParms , \"power\" )
>8170	ArgumentList	papszParms
>8171	Argument	\"power\"
>8172	PrimaryExpression	\"power\"
>8173	Argument	papszParms
>8174	Identifier	papszParms
>8175	Callee	CSLFetchNameValue
>8176	Identifier	CSLFetchNameValue
>8177	Identifier	pszValue
>8178	ExpressionStatement	 
>8179	AssignmentExpr	* ppOptions = CPLMalloc ( sizeof ( GDALGridInverseDistanceToAPowerOptions ) )
>8180	CallExpression	CPLMalloc ( sizeof ( GDALGridInverseDistanceToAPowerOptions ) )
>8181	ArgumentList	sizeof ( GDALGridInverseDistanceToAPowerOptions )
>8182	Argument	sizeof ( GDALGridInverseDistanceToAPowerOptions )
>8183	SizeofExpr	sizeof ( GDALGridInverseDistanceToAPowerOptions )
>8184	SizeofOperand	GDALGridInverseDistanceToAPowerOptions
>8185	Sizeof	sizeof
>8186	Callee	CPLMalloc
>8187	Identifier	CPLMalloc
>8188	UnaryOp	* ppOptions
>8189	Identifier	ppOptions
>8190	UnaryOperator	*
>8191	Label	 
>8192	Identifier	default
>8193	Label	 
>8194	Identifier	GGA_InverseDistanceToAPower
>8195	Condition	 
>8196	UnaryOp	* peAlgorithm
>8197	Identifier	peAlgorithm
>8198	UnaryOperator	*
>8199	IdentifierDeclStatement	 
>8200	IdentifierDecl	* pszValue
>8201	Identifier	pszValue
>8202	IdentifierDeclType	const char *
>8203	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameInvDist ) )
>8204	ElseStatement	else
>8205	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameAverage ) )
>8206	ElseStatement	else
>8207	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameNearest ) )
>8208	ElseStatement	else
>8209	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameMinimum ) )
>8210	ElseStatement	else
>8211	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameMaximum ) )
>8212	ElseStatement	else
>8213	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameRange ) )
>8214	ElseStatement	else
>8215	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameCount ) )
>8216	ElseStatement	else
>8217	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameAverageDistance ) )
>8218	ElseStatement	else
>8219	IfStatement	if ( EQUAL ( papszParms [ 0 ] , szAlgNameAverageDistancePts ) )
>8220	ElseStatement	else
>8221	CompoundStatement	 
>8222	ReturnStatement	 
>8223	Identifier	CE_Failure
>8224	ExpressionStatement	 
>8225	CallExpression	CSLDestroy ( papszParms )
>8226	ArgumentList	papszParms
>8227	Argument	papszParms
>8228	Identifier	papszParms
>8229	Callee	CSLDestroy
>8230	Identifier	CSLDestroy
>8231	ExpressionStatement	 
>8232	CallExpression	fprintf ( stderr , \"Unsupported gridding method \\"%s\\".\n\" , papszParms [ 0 ] )
>8233	ArgumentList	stderr
>8234	Argument	papszParms [ 0 ]
>8235	ArrayIndexing	papszParms [ 0 ]
>8236	PrimaryExpression	0
>8237	Identifier	papszParms
>8238	Argument	\"Unsupported gridding method \\"%s\\".\n\"
>8239	PrimaryExpression	\"Unsupported gridding method \\"%s\\".\n\"
>8240	Argument	stderr
>8241	Identifier	stderr
>8242	Callee	fprintf
>8243	Identifier	fprintf
>8244	ExpressionStatement	 
>8245	AssignmentExpr	* peAlgorithm = GGA_MetricAverageDistancePts
>8246	Identifier	GGA_MetricAverageDistancePts
>8247	UnaryOp	* peAlgorithm
>8248	Identifier	peAlgorithm
>8249	UnaryOperator	*
>8250	Condition	 
>8251	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameAverageDistancePts )
>8252	ArgumentList	papszParms [ 0 ]
>8253	Argument	szAlgNameAverageDistancePts
>8254	Identifier	szAlgNameAverageDistancePts
>8255	Argument	papszParms [ 0 ]
>8256	ArrayIndexing	papszParms [ 0 ]
>8257	PrimaryExpression	0
>8258	Identifier	papszParms
>8259	Callee	EQUAL
>8260	Identifier	EQUAL
>8261	ExpressionStatement	 
>8262	AssignmentExpr	* peAlgorithm = GGA_MetricAverageDistance
>8263	Identifier	GGA_MetricAverageDistance
>8264	UnaryOp	* peAlgorithm
>8265	Identifier	peAlgorithm
>8266	UnaryOperator	*
>8267	Condition	 
>8268	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameAverageDistance )
>8269	ArgumentList	papszParms [ 0 ]
>8270	Argument	szAlgNameAverageDistance
>8271	Identifier	szAlgNameAverageDistance
>8272	Argument	papszParms [ 0 ]
>8273	ArrayIndexing	papszParms [ 0 ]
>8274	PrimaryExpression	0
>8275	Identifier	papszParms
>8276	Callee	EQUAL
>8277	Identifier	EQUAL
>8278	ExpressionStatement	 
>8279	AssignmentExpr	* peAlgorithm = GGA_MetricCount
>8280	Identifier	GGA_MetricCount
>8281	UnaryOp	* peAlgorithm
>8282	Identifier	peAlgorithm
>8283	UnaryOperator	*
>8284	Condition	 
>8285	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameCount )
>8286	ArgumentList	papszParms [ 0 ]
>8287	Argument	szAlgNameCount
>8288	Identifier	szAlgNameCount
>8289	Argument	papszParms [ 0 ]
>8290	ArrayIndexing	papszParms [ 0 ]
>8291	PrimaryExpression	0
>8292	Identifier	papszParms
>8293	Callee	EQUAL
>8294	Identifier	EQUAL
>8295	ExpressionStatement	 
>8296	AssignmentExpr	* peAlgorithm = GGA_MetricRange
>8297	Identifier	GGA_MetricRange
>8298	UnaryOp	* peAlgorithm
>8299	Identifier	peAlgorithm
>8300	UnaryOperator	*
>8301	Condition	 
>8302	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameRange )
>8303	ArgumentList	papszParms [ 0 ]
>8304	Argument	szAlgNameRange
>8305	Identifier	szAlgNameRange
>8306	Argument	papszParms [ 0 ]
>8307	ArrayIndexing	papszParms [ 0 ]
>8308	PrimaryExpression	0
>8309	Identifier	papszParms
>8310	Callee	EQUAL
>8311	Identifier	EQUAL
>8312	ExpressionStatement	 
>8313	AssignmentExpr	* peAlgorithm = GGA_MetricMaximum
>8314	Identifier	GGA_MetricMaximum
>8315	UnaryOp	* peAlgorithm
>8316	Identifier	peAlgorithm
>8317	UnaryOperator	*
>8318	Condition	 
>8319	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameMaximum )
>8320	ArgumentList	papszParms [ 0 ]
>8321	Argument	szAlgNameMaximum
>8322	Identifier	szAlgNameMaximum
>8323	Argument	papszParms [ 0 ]
>8324	ArrayIndexing	papszParms [ 0 ]
>8325	PrimaryExpression	0
>8326	Identifier	papszParms
>8327	Callee	EQUAL
>8328	Identifier	EQUAL
>8329	ExpressionStatement	 
>8330	AssignmentExpr	* peAlgorithm = GGA_MetricMinimum
>8331	Identifier	GGA_MetricMinimum
>8332	UnaryOp	* peAlgorithm
>8333	Identifier	peAlgorithm
>8334	UnaryOperator	*
>8335	Condition	 
>8336	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameMinimum )
>8337	ArgumentList	papszParms [ 0 ]
>8338	Argument	szAlgNameMinimum
>8339	Identifier	szAlgNameMinimum
>8340	Argument	papszParms [ 0 ]
>8341	ArrayIndexing	papszParms [ 0 ]
>8342	PrimaryExpression	0
>8343	Identifier	papszParms
>8344	Callee	EQUAL
>8345	Identifier	EQUAL
>8346	ExpressionStatement	 
>8347	AssignmentExpr	* peAlgorithm = GGA_NearestNeighbor
>8348	Identifier	GGA_NearestNeighbor
>8349	UnaryOp	* peAlgorithm
>8350	Identifier	peAlgorithm
>8351	UnaryOperator	*
>8352	Condition	 
>8353	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameNearest )
>8354	ArgumentList	papszParms [ 0 ]
>8355	Argument	szAlgNameNearest
>8356	Identifier	szAlgNameNearest
>8357	Argument	papszParms [ 0 ]
>8358	ArrayIndexing	papszParms [ 0 ]
>8359	PrimaryExpression	0
>8360	Identifier	papszParms
>8361	Callee	EQUAL
>8362	Identifier	EQUAL
>8363	ExpressionStatement	 
>8364	AssignmentExpr	* peAlgorithm = GGA_MovingAverage
>8365	Identifier	GGA_MovingAverage
>8366	UnaryOp	* peAlgorithm
>8367	Identifier	peAlgorithm
>8368	UnaryOperator	*
>8369	Condition	 
>8370	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameAverage )
>8371	ArgumentList	papszParms [ 0 ]
>8372	Argument	szAlgNameAverage
>8373	Identifier	szAlgNameAverage
>8374	Argument	papszParms [ 0 ]
>8375	ArrayIndexing	papszParms [ 0 ]
>8376	PrimaryExpression	0
>8377	Identifier	papszParms
>8378	Callee	EQUAL
>8379	Identifier	EQUAL
>8380	ExpressionStatement	 
>8381	AssignmentExpr	* peAlgorithm = GGA_InverseDistanceToAPower
>8382	Identifier	GGA_InverseDistanceToAPower
>8383	UnaryOp	* peAlgorithm
>8384	Identifier	peAlgorithm
>8385	UnaryOperator	*
>8386	Condition	 
>8387	CallExpression	EQUAL ( papszParms [ 0 ] , szAlgNameInvDist )
>8388	ArgumentList	papszParms [ 0 ]
>8389	Argument	szAlgNameInvDist
>8390	Identifier	szAlgNameInvDist
>8391	Argument	papszParms [ 0 ]
>8392	ArrayIndexing	papszParms [ 0 ]
>8393	PrimaryExpression	0
>8394	Identifier	papszParms
>8395	Callee	EQUAL
>8396	Identifier	EQUAL
>8397	IfStatement	if ( CSLCount ( papszParms ) < 1 )
>8398	ReturnStatement	 
>8399	Identifier	CE_Failure
>8400	Condition	 
>8401	RelationalExpression	CSLCount ( papszParms ) < 1
>8402	PrimaryExpression	1
>8403	CallExpression	CSLCount ( papszParms )
>8404	ArgumentList	papszParms
>8405	Argument	papszParms
>8406	Identifier	papszParms
>8407	Callee	CSLCount
>8408	Identifier	CSLCount
>8409	IdentifierDeclStatement	 
>8410	IdentifierDecl	* * papszParms = CSLTokenizeString2 ( pszAlgoritm , \"
>8411	AssignmentExpr	* * papszParms = CSLTokenizeString2 ( pszAlgoritm , \"
>8412	CallExpression	CSLTokenizeString2 ( pszAlgoritm , \"
>8413	ArgumentList	pszAlgoritm
>8414	Argument	FALSE
>8415	Identifier	FALSE
>8416	Argument	\"
>8417	PrimaryExpression	\"
>8418	Argument	pszAlgoritm
>8419	Identifier	pszAlgoritm
>8420	Callee	CSLTokenizeString2
>8421	Identifier	CSLTokenizeString2
>8422	Identifier	papszParms
>8423	Identifier	papszParms
>8424	IdentifierDeclType	char * *
>8425	ExpressionStatement	 
>8426	AssignmentExpr	* ppOptions = NULL
>8427	Identifier	NULL
>8428	UnaryOp	* ppOptions
>8429	Identifier	ppOptions
>8430	UnaryOperator	*
>8431	ExpressionStatement	 
>8432	CallExpression	CPLAssert ( ppOptions )
>8433	ArgumentList	ppOptions
>8434	Argument	ppOptions
>8435	Identifier	ppOptions
>8436	Callee	CPLAssert
>8437	Identifier	CPLAssert
>8438	ExpressionStatement	 
>8439	CallExpression	CPLAssert ( peAlgorithm )
>8440	ArgumentList	peAlgorithm
>8441	Argument	peAlgorithm
>8442	Identifier	peAlgorithm
>8443	Callee	CPLAssert
>8444	Identifier	CPLAssert
>8445	ExpressionStatement	 
>8446	CallExpression	CPLAssert ( pszAlgoritm )
>8447	ArgumentList	pszAlgoritm
>8448	Argument	pszAlgoritm
>8449	Identifier	pszAlgoritm
>8450	Callee	CPLAssert
>8451	Identifier	CPLAssert
<30=33,32,31
<33=34
<34=35
<40=43,42,41
<43=77,54,44
<44=45
<45=47,46
<47=51,48
<48=50,49
<51=53,52
<54=55
<55=75,56
<56=73,69,65,61,57
<57=58
<58=60,59
<61=62
<62=64,63
<65=66
<66=68,67
<69=70
<70=72,71
<73=74
<75=76
<77=78
<78=88,87,86,79
<79=85,80
<80=84,83,82,81
<95=103,96
<96=100,97
<97=99,98
<100=102,101
<103=161,104
<104=160,159,158,157,156,155,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154
<167=170,169,168
<170=190,181,171
<171=172
<172=174,173
<174=178,175
<175=177,176
<178=180,179
<181=182
<182=188,183
<183=186,184
<184=185
<186=187
<188=189
<190=191
<191=201,200,199,192
<192=198,193
<193=197,196,195,194
<208=211,210,209
<211=212
<212=213
<218=227,226,219
<219=223,220
<220=222,221
<223=225,224
<227=292,283,274,263,252,246,240,234,228
<228=229
<229=231,230
<231=233,232
<234=235
<235=237,236
<237=239,238
<240=241
<241=243,242
<243=245,244
<246=247
<247=249,248
<249=251,250
<252=253
<253=262,261,254
<254=260,255
<255=257,256
<257=259,258
<263=264
<264=273,272,265
<265=271,266
<266=268,267
<268=270,269
<274=275
<275=282,281,276
<276=280,277
<277=279,278
<283=284
<284=291,290,285
<285=289,286
<286=288,287
<292=293
<293=300,299,294
<294=298,295
<295=297,296
<326=356,355,327
<327=352,349,346,343,340,337,334,331,328
<328=330,329
<331=333,332
<334=336,335
<337=339,338
<340=342,341
<343=345,344
<346=348,347
<349=351,350
<352=354,353
<356=713,702,698,694,690,684,671,658,645,623,610,599,588,575,565,392,359,357
<357=358
<359=380,369,360
<360=361
<361=362
<362=366,363
<363=365,364
<366=368,367
<369=370
<370=371
<371=377,372
<372=374,373
<374=376,375
<377=379,378
<380=381
<381=385,382
<382=384,383
<385=391,386
<386=388,387
<388=390,389
<392=561,557,554,393
<393=543,532,515,477,394
<394=463,395
<395=396
<396=459,448,397
<397=398
<398=434,425,417,413,409,399
<399=401,400
<401=402
<402=406,403
<403=405,404
<406=408,407
<409=410
<410=412,411
<413=414
<414=416,415
<417=418
<418=424,419
<419=423,420
<420=422,421
<425=426
<426=433,432,427
<427=431,428
<428=430,429
<434=435
<435=447,446,436
<436=445,437
<437=443,438
<438=441,439
<439=440
<441=442
<443=444
<448=451,449
<449=450
<451=452
<452=456,453
<453=455,454
<456=458,457
<459=460
<460=462,461
<463=464
<464=466,465
<466=472,467
<467=471,468
<468=470,469
<472=476,473
<473=475,474
<477=513,478
<478=500,487,483,479
<479=480
<480=482,481
<483=484
<484=486,485
<487=488
<488=499,498,489
<489=497,490
<490=494,491
<491=493,492
<494=496,495
<500=501
<501=512,511,502
<502=510,503
<503=507,504
<504=506,505
<507=509,508
<513=514
<515=516
<516=531,530,517
<517=529,518
<518=526,519
<519=523,520
<520=522,521
<523=525,524
<526=528,527
<532=533
<533=542,541,534
<534=540,535
<535=537,536
<537=539,538
<543=544
<544=553,552,545
<545=551,546
<546=548,547
<548=550,549
<554=556,555
<557=558
<558=560,559
<561=562
<562=564,563
<565=572,566
<566=571,570,567
<567=569,568
<572=574,573
<575=582,576
<576=581,580,577
<577=579,578
<582=587,586,583
<583=585,584
<588=589
<589=598,597,590
<590=596,591
<591=593,592
<593=595,594
<599=600
<600=609,608,601
<601=607,602
<602=604,603
<604=606,605
<610=611
<611=622,621,612
<612=620,613
<613=615,614
<615=617,616
<617=619,618
<623=643,624
<624=634,625
<625=626
<626=633,627
<627=631,628
<628=629
<629=630
<631=632
<634=635
<635=642,636
<636=640,637
<637=638
<638=639
<640=641
<643=644
<645=646
<646=657,656,647
<647=655,648
<648=651,650,649
<651=652
<652=654,653
<658=659
<659=670,669,660
<660=668,661
<661=667,662
<662=664,663
<664=666,665
<671=678,672
<672=677,676,673
<673=675,674
<678=683,682,679
<679=681,680
<684=685
<685=689,686
<686=688,687
<690=691
<691=693,692
<694=695
<695=697,696
<698=699
<699=701,700
<702=703
<703=712,711,704
<704=710,705
<705=707,706
<707=709,708
<713=714
<714=723,722,715
<715=721,716
<716=718,717
<718=720,719
<778=808,807,779
<779=804,801,798,795,792,789,786,783,780
<780=782,781
<783=785,784
<786=788,787
<789=791,790
<792=794,793
<795=797,796
<798=800,799
<801=803,802
<804=806,805
<808=1157,1146,1137,1124,1117,1108,851,811,809
<809=810
<811=847,838,812
<812=813
<813=834,823,814
<814=815
<815=816
<816=820,817
<817=819,818
<820=822,821
<823=824
<824=825
<825=831,826
<826=828,827
<828=830,829
<831=833,832
<834=835
<835=837,836
<838=839
<839=840
<840=844,841
<841=843,842
<844=846,845
<847=848
<848=850,849
<851=1106,948,852
<852=853
<853=854
<854=944,940,937,855
<855=926,915,900,856
<856=896,894,857
<857=858
<858=880,871,863,859
<859=860
<860=862,861
<863=864
<864=870,865
<865=869,866
<866=868,867
<871=872
<872=879,878,873
<873=877,874
<874=876,875
<880=881
<881=893,892,882
<882=891,883
<883=889,884
<884=887,885
<885=886
<887=888
<889=890
<894=895
<896=897
<897=899,898
<900=901
<901=914,913,902
<902=912,903
<903=909,904
<904=906,905
<906=908,907
<909=911,910
<915=916
<916=925,924,917
<917=923,918
<918=920,919
<920=922,921
<926=927
<927=936,935,928
<928=934,929
<929=931,930
<931=933,932
<937=939,938
<940=941
<941=943,942
<944=945
<945=947,946
<948=949
<949=1102,1030,950
<950=951
<951=952
<952=1026,1022,1019,953
<953=1008,997,984,954
<954=980,978,955
<955=956
<956=969,961,957
<957=958
<958=960,959
<961=962
<962=968,963
<963=967,964
<964=966,965
<969=970
<970=977,976,971
<971=975,972
<972=974,973
<978=979
<980=981
<981=983,982
<984=985
<985=996,995,986
<986=994,987
<987=991,988
<988=990,989
<991=993,992
<997=998
<998=1007,1006,999
<999=1005,1000
<1000=1002,1001
<1002=1004,1003
<1008=1009
<1009=1018,1017,1010
<1010=1016,1011
<1011=1013,1012
<1013=1015,1014
<1019=1021,1020
<1022=1023
<1023=1025,1024
<1026=1027
<1027=1029,1028
<1030=1031
<1031=1098,1094,1091,1032
<1032=1080,1069,1054,1045,1037,1033
<1033=1034
<1034=1036,1035
<1037=1038
<1038=1044,1039
<1039=1043,1040
<1040=1042,1041
<1045=1046
<1046=1053,1052,1047
<1047=1051,1048
<1048=1050,1049
<1054=1055
<1055=1068,1067,1056
<1056=1066,1057
<1057=1063,1058
<1058=1060,1059
<1060=1062,1061
<1063=1065,1064
<1069=1070
<1070=1079,1078,1071
<1071=1077,1072
<1072=1074,1073
<1074=1076,1075
<1080=1081
<1081=1090,1089,1082
<1082=1088,1083
<1083=1085,1084
<1085=1087,1086
<1091=1093,1092
<1094=1095
<1095=1097,1096
<1098=1099
<1099=1101,1100
<1102=1103
<1103=1105,1104
<1106=1107
<1108=1109
<1109=1116,1115,1110
<1110=1114,1111
<1111=1113,1112
<1117=1118
<1118=1123,1122,1119
<1119=1121,1120
<1124=1131,1125
<1125=1130,1129,1126
<1126=1128,1127
<1131=1136,1135,1132
<1132=1134,1133
<1137=1138
<1138=1145,1144,1139
<1139=1143,1140
<1140=1142,1141
<1146=1147
<1147=1156,1155,1148
<1148=1154,1149
<1149=1151,1150
<1151=1153,1152
<1157=1158
<1158=1169,1168,1159
<1159=1167,1160
<1160=1162,1161
<1162=1164,1163
<1164=1166,1165
<1206=1236,1235,1207
<1207=1232,1229,1226,1223,1220,1217,1214,1211,1208
<1208=1210,1209
<1211=1213,1212
<1214=1216,1215
<1217=1219,1218
<1220=1222,1221
<1223=1225,1224
<1226=1228,1227
<1229=1231,1230
<1232=1234,1233
<1236=1904,1895,1886,1877,1868,1861,1852,1843,1827,1811,1795,1785,1775,1768,1767,1766,1765,1754,1463,1422,1413,1404,1395,1374,1353,1279,1239,1237
<1237=1238
<1239=1275,1266,1240
<1240=1241
<1241=1262,1251,1242
<1242=1243
<1243=1244
<1244=1248,1245
<1245=1247,1246
<1248=1250,1249
<1251=1252
<1252=1253
<1253=1259,1254
<1254=1256,1255
<1256=1258,1257
<1259=1261,1260
<1262=1263
<1263=1265,1264
<1266=1267
<1267=1268
<1268=1272,1269
<1269=1271,1270
<1272=1274,1273
<1275=1276
<1276=1278,1277
<1279=1349,1346,1280
<1280=1335,1324,1311,1281
<1281=1307,1305,1282
<1282=1283
<1283=1296,1288,1284
<1284=1285
<1285=1287,1286
<1288=1289
<1289=1295,1290
<1290=1294,1291
<1291=1293,1292
<1296=1297
<1297=1304,1303,1298
<1298=1302,1299
<1299=1301,1300
<1305=1306
<1307=1308
<1308=1310,1309
<1311=1312
<1312=1323,1322,1313
<1313=1321,1314
<1314=1318,1315
<1315=1317,1316
<1318=1320,1319
<1324=1325
<1325=1334,1333,1326
<1326=1332,1327
<1327=1329,1328
<1329=1331,1330
<1335=1336
<1336=1345,1344,1337
<1337=1343,1338
<1338=1340,1339
<1340=1342,1341
<1346=1348,1347
<1349=1350
<1350=1352,1351
<1353=1354
<1354=1373,1372,1355
<1355=1371,1356
<1356=1368,1357
<1357=1365,1358
<1358=1362,1359
<1359=1361,1360
<1362=1364,1363
<1365=1367,1366
<1368=1370,1369
<1374=1375
<1375=1394,1393,1376
<1376=1392,1377
<1377=1389,1378
<1378=1386,1379
<1379=1383,1380
<1380=1382,1381
<1383=1385,1384
<1386=1388,1387
<1389=1391,1390
<1395=1396
<1396=1402,1397
<1397=1400,1398
<1398=1399
<1400=1401
<1402=1403
<1404=1405
<1405=1411,1406
<1406=1409,1407
<1407=1408
<1409=1410
<1411=1412
<1413=1418,1414
<1414=1417,1416,1415
<1418=1421,1420,1419
<1422=1461,1423
<1423=1424
<1424=1453,1449,1446,1425
<1425=1426
<1426=1440,1427
<1427=1430,1428
<1428=1429
<1430=1431
<1431=1437,1432
<1432=1436,1433
<1433=1435,1434
<1437=1439,1438
<1440=1441
<1441=1445,1442
<1442=1444,1443
<1446=1448,1447
<1449=1450
<1450=1452,1451
<1453=1454
<1454=1455
<1455=1460,1459,1456
<1456=1458,1457
<1461=1462
<1463=1750,1746,1743,1464
<1464=1722,1699,1678,1655,1627,1599,1587,1575,1550,1523,1512,1501,1469,1465
<1465=1467,1466
<1467=1468
<1469=1470
<1470=1500,1471
<1471=1487,1472
<1472=1474,1473
<1474=1485,1475
<1475=1476
<1476=1477
<1477=1483,1478
<1478=1481,1479
<1479=1480
<1481=1482
<1483=1484
<1485=1486
<1487=1498,1488
<1488=1489
<1489=1490
<1490=1496,1491
<1491=1494,1492
<1492=1493
<1494=1495
<1496=1497
<1498=1499
<1501=1502
<1502=1511,1503
<1503=1509,1504
<1504=1507,1505
<1505=1506
<1507=1508
<1509=1510
<1512=1513
<1513=1522,1514
<1514=1520,1515
<1515=1518,1516
<1516=1517
<1518=1519
<1520=1521
<1523=1524
<1524=1549,1525
<1525=1547,1526
<1526=1545,1527
<1527=1528
<1528=1543,1529
<1529=1541,1530
<1530=1531
<1531=1539,1532
<1532=1533
<1533=1534
<1534=1538,1535
<1535=1537,1536
<1539=1540
<1541=1542
<1543=1544
<1545=1546
<1547=1548
<1550=1551
<1551=1574,1552
<1552=1572,1553
<1553=1570,1554
<1554=1555
<1555=1568,1556
<1556=1566,1557
<1557=1558
<1558=1564,1559
<1559=1560
<1560=1561
<1561=1563,1562
<1564=1565
<1566=1567
<1568=1569
<1570=1571
<1572=1573
<1575=1576
<1576=1586,1585,1577
<1577=1584,1578
<1578=1582,1579
<1579=1580
<1580=1581
<1582=1583
<1587=1588
<1588=1598,1597,1589
<1589=1596,1590
<1590=1594,1591
<1591=1592
<1592=1593
<1594=1595
<1599=1600
<1600=1626,1625,1601
<1601=1624,1602
<1602=1622,1603
<1603=1613,1604
<1604=1605
<1605=1611,1606
<1606=1609,1607
<1607=1608
<1609=1610
<1611=1612
<1613=1614
<1614=1620,1615
<1615=1618,1616
<1616=1617
<1618=1619
<1620=1621
<1622=1623
<1627=1628
<1628=1654,1653,1629
<1629=1652,1630
<1630=1650,1631
<1631=1641,1632
<1632=1633
<1633=1639,1634
<1634=1637,1635
<1635=1636
<1637=1638
<1639=1640
<1641=1642
<1642=1648,1643
<1643=1646,1644
<1644=1645
<1646=1647
<1648=1649
<1650=1651
<1655=1656
<1656=1677,1676,1657
<1657=1675,1658
<1658=1673,1659
<1659=1662,1660
<1660=1661
<1662=1663
<1663=1671,1664
<1664=1665
<1665=1666
<1666=1670,1667
<1667=1669,1668
<1671=1672
<1673=1674
<1678=1679
<1679=1698,1697,1680
<1680=1696,1681
<1681=1694,1682
<1682=1685,1683
<1683=1684
<1685=1686
<1686=1692,1687
<1687=1688
<1688=1689
<1689=1691,1690
<1692=1693
<1694=1695
<1699=1700
<1700=1721,1720,1701
<1701=1719,1702
<1702=1717,1703
<1703=1706,1704
<1704=1705
<1706=1707
<1707=1715,1708
<1708=1709
<1709=1710
<1710=1714,1711
<1711=1713,1712
<1715=1716
<1717=1718
<1722=1723
<1723=1742,1741,1724
<1724=1740,1725
<1725=1738,1726
<1726=1729,1727
<1727=1728
<1729=1730
<1730=1736,1731
<1731=1732
<1732=1733
<1733=1735,1734
<1736=1737
<1738=1739
<1743=1745,1744
<1746=1747
<1747=1749,1748
<1750=1751
<1751=1753,1752
<1754=1755
<1755=1764,1763,1756
<1756=1762,1757
<1757=1759,1758
<1759=1761,1760
<1768=1769
<1769=1774,1773,1770
<1770=1772,1771
<1775=1776
<1776=1784,1783,1777
<1777=1782,1778
<1778=1780,1779
<1780=1781
<1785=1786
<1786=1794,1793,1787
<1787=1792,1788
<1788=1790,1789
<1790=1791
<1795=1796
<1796=1810,1809,1797
<1797=1808,1798
<1798=1806,1799
<1799=1800
<1800=1801
<1801=1805,1802
<1802=1804,1803
<1806=1807
<1811=1812
<1812=1826,1825,1813
<1813=1824,1814
<1814=1822,1815
<1815=1816
<1816=1817
<1817=1821,1818
<1818=1820,1819
<1822=1823
<1827=1828
<1828=1842,1841,1829
<1829=1840,1830
<1830=1838,1831
<1831=1832
<1832=1833
<1833=1837,1834
<1834=1836,1835
<1838=1839
<1843=1844
<1844=1851,1850,1845
<1845=1849,1846
<1846=1848,1847
<1852=1853
<1853=1860,1859,1854
<1854=1858,1855
<1855=1857,1856
<1861=1862
<1862=1867,1866,1863
<1863=1865,1864
<1868=1869
<1869=1876,1875,1870
<1870=1874,1871
<1871=1873,1872
<1877=1878
<1878=1885,1884,1879
<1879=1883,1880
<1880=1882,1881
<1886=1887
<1887=1894,1893,1888
<1888=1892,1889
<1889=1891,1890
<1895=1896
<1896=1903,1902,1897
<1897=1901,1898
<1898=1900,1899
<1904=1905
<1905=1910,1909,1906
<1906=1908,1907
<1983=2013,2012,1984
<1984=2009,2006,2003,2000,1997,1994,1991,1988,1985
<1985=1987,1986
<1988=1990,1989
<1991=1993,1992
<1994=1996,1995
<1997=1999,1998
<2000=2002,2001
<2003=2005,2004
<2006=2008,2007
<2009=2011,2010
<2013=2255,2244,2240,2236,2232,2226,2213,2200,2187,2165,2158,2145,2049,2016,2014
<2014=2015
<2016=2037,2026,2017
<2017=2018
<2018=2019
<2019=2023,2020
<2020=2022,2021
<2023=2025,2024
<2026=2027
<2027=2028
<2028=2034,2029
<2029=2031,2030
<2031=2033,2032
<2034=2036,2035
<2037=2038
<2038=2042,2039
<2039=2041,2040
<2042=2048,2043
<2043=2045,2044
<2045=2047,2046
<2049=2141,2050
<2050=2130,2119,2081,2055,2051
<2051=2052
<2052=2054,2053
<2055=2067,2056
<2056=2061,2057
<2057=2058
<2058=2060,2059
<2061=2062
<2062=2066,2063
<2063=2065,2064
<2067=2068
<2068=2070,2069
<2070=2076,2071
<2071=2075,2072
<2072=2074,2073
<2076=2080,2077
<2077=2079,2078
<2081=2117,2082
<2082=2104,2091,2087,2083
<2083=2084
<2084=2086,2085
<2087=2088
<2088=2090,2089
<2091=2092
<2092=2103,2102,2093
<2093=2101,2094
<2094=2098,2095
<2095=2097,2096
<2098=2100,2099
<2104=2105
<2105=2116,2115,2106
<2106=2114,2107
<2107=2111,2108
<2108=2110,2109
<2111=2113,2112
<2117=2118
<2119=2120
<2120=2129,2128,2121
<2121=2127,2122
<2122=2124,2123
<2124=2126,2125
<2130=2131
<2131=2140,2139,2132
<2132=2138,2133
<2133=2135,2134
<2135=2137,2136
<2141=2142
<2142=2144,2143
<2145=2152,2146
<2146=2151,2150,2147
<2147=2149,2148
<2152=2157,2156,2153
<2153=2155,2154
<2158=2159
<2159=2164,2163,2160
<2160=2162,2161
<2165=2185,2166
<2166=2176,2167
<2167=2168
<2168=2175,2169
<2169=2173,2170
<2170=2171
<2171=2172
<2173=2174
<2176=2177
<2177=2184,2178
<2178=2182,2179
<2179=2180
<2180=2181
<2182=2183
<2185=2186
<2187=2188
<2188=2199,2198,2189
<2189=2197,2190
<2190=2193,2192,2191
<2193=2194
<2194=2196,2195
<2200=2201
<2201=2212,2211,2202
<2202=2210,2203
<2203=2209,2204
<2204=2206,2205
<2206=2208,2207
<2213=2220,2214
<2214=2219,2218,2215
<2215=2217,2216
<2220=2225,2224,2221
<2221=2223,2222
<2226=2227
<2227=2231,2228
<2228=2230,2229
<2232=2233
<2233=2235,2234
<2236=2237
<2237=2239,2238
<2240=2241
<2241=2243,2242
<2244=2245
<2245=2254,2253,2246
<2246=2252,2247
<2247=2249,2248
<2249=2251,2250
<2255=2256
<2256=2265,2264,2257
<2257=2263,2258
<2258=2260,2259
<2260=2262,2261
<2309=2339,2338,2310
<2310=2335,2332,2329,2326,2323,2320,2317,2314,2311
<2311=2313,2312
<2314=2316,2315
<2317=2319,2318
<2320=2322,2321
<2323=2325,2324
<2326=2328,2327
<2329=2331,2330
<2332=2334,2333
<2335=2337,2336
<2339=2826,2815,2811,2802,2793,2789,2785,2779,2766,2753,2740,2718,2707,2700,2693,2684,2348,2342,2340
<2340=2341
<2342=2343
<2343=2345,2344
<2345=2347,2346
<2348=2672,2466,2349
<2349=2350
<2350=2351
<2351=2462,2352
<2352=2451,2440,2402,2357,2353
<2353=2354
<2354=2356,2355
<2357=2388,2358
<2358=2375,2359
<2359=2371,2360
<2360=2367,2361
<2361=2362
<2362=2366,2363
<2363=2365,2364
<2367=2368
<2368=2370,2369
<2371=2372
<2372=2374,2373
<2375=2376
<2376=2387,2386,2377
<2377=2385,2378
<2378=2382,2379
<2379=2381,2380
<2382=2384,2383
<2388=2389
<2389=2391,2390
<2391=2397,2392
<2392=2396,2393
<2393=2395,2394
<2397=2401,2398
<2398=2400,2399
<2402=2438,2403
<2403=2425,2412,2408,2404
<2404=2405
<2405=2407,2406
<2408=2409
<2409=2411,2410
<2412=2413
<2413=2424,2423,2414
<2414=2422,2415
<2415=2419,2416
<2416=2418,2417
<2419=2421,2420
<2425=2426
<2426=2437,2436,2427
<2427=2435,2428
<2428=2432,2429
<2429=2431,2430
<2432=2434,2433
<2438=2439
<2440=2441
<2441=2450,2449,2442
<2442=2448,2443
<2443=2445,2444
<2445=2447,2446
<2451=2452
<2452=2461,2460,2453
<2453=2459,2454
<2454=2456,2455
<2456=2458,2457
<2462=2463
<2463=2465,2464
<2466=2668,2655,2467
<2467=2651,2468
<2468=2643,2635,2627,2619,2612,2590,2469
<2469=2586,2489,2470
<2470=2471
<2471=2482,2476,2472
<2472=2473
<2473=2475,2474
<2476=2478,2477
<2478=2479
<2479=2481,2480
<2482=2483
<2483=2487,2484
<2484=2485
<2485=2486
<2487=2488
<2489=2577,2498,2491,2490
<2491=2492
<2492=2496,2493
<2493=2494
<2494=2495
<2496=2497
<2498=2569,2565,2562,2499
<2499=2551,2540,2529,2516,2500
<2500=2512,2501
<2501=2508,2502
<2502=2503
<2503=2507,2504
<2504=2506,2505
<2508=2509
<2509=2511,2510
<2512=2513
<2513=2515,2514
<2516=2517
<2517=2528,2527,2518
<2518=2526,2519
<2519=2523,2520
<2520=2522,2521
<2523=2525,2524
<2529=2530
<2530=2539,2538,2531
<2531=2537,2532
<2532=2534,2533
<2534=2536,2535
<2540=2541
<2541=2550,2549,2542
<2542=2548,2543
<2543=2545,2544
<2545=2547,2546
<2551=2552
<2552=2561,2560,2553
<2553=2559,2554
<2554=2556,2555
<2556=2558,2557
<2562=2564,2563
<2565=2566
<2566=2568,2567
<2569=2570
<2570=2571
<2571=2576,2575,2572
<2572=2574,2573
<2577=2582,2578
<2578=2579
<2579=2581,2580
<2582=2583
<2583=2585,2584
<2586=2587
<2587=2589,2588
<2590=2591
<2591=2611,2610,2592
<2592=2609,2593
<2593=2608,2594
<2594=2606,2595
<2595=2604,2600,2596
<2596=2597
<2597=2599,2598
<2600=2601
<2601=2603,2602
<2604=2605
<2606=2607
<2612=2613
<2613=2618,2617,2614
<2614=2616,2615
<2619=2620
<2620=2624,2621
<2621=2623,2622
<2624=2626,2625
<2627=2628
<2628=2632,2629
<2629=2631,2630
<2632=2634,2633
<2635=2636
<2636=2640,2637
<2637=2639,2638
<2640=2642,2641
<2643=2644
<2644=2648,2645
<2645=2647,2646
<2648=2650,2649
<2651=2652
<2652=2654,2653
<2655=2664,2656
<2656=2657
<2657=2663,2658
<2658=2660,2659
<2660=2662,2661
<2664=2665
<2665=2667,2666
<2668=2669
<2669=2671,2670
<2672=2673
<2673=2681,2674
<2674=2678,2675
<2675=2677,2676
<2678=2680,2679
<2681=2683,2682
<2684=2685
<2685=2692,2691,2686
<2686=2690,2687
<2687=2689,2688
<2693=2694
<2694=2699,2698,2695
<2695=2697,2696
<2700=2701
<2701=2706,2705,2702
<2702=2704,2703
<2707=2708
<2708=2717,2716,2709
<2709=2715,2710
<2710=2712,2711
<2712=2714,2713
<2718=2738,2719
<2719=2729,2720
<2720=2721
<2721=2728,2722
<2722=2726,2723
<2723=2724
<2724=2725
<2726=2727
<2729=2730
<2730=2737,2731
<2731=2735,2732
<2732=2733
<2733=2734
<2735=2736
<2738=2739
<2740=2741
<2741=2752,2751,2742
<2742=2750,2743
<2743=2746,2745,2744
<2746=2747
<2747=2749,2748
<2753=2754
<2754=2765,2764,2755
<2755=2763,2756
<2756=2762,2757
<2757=2759,2758
<2759=2761,2760
<2766=2773,2767
<2767=2772,2771,2768
<2768=2770,2769
<2773=2778,2777,2774
<2774=2776,2775
<2779=2780
<2780=2784,2781
<2781=2783,2782
<2785=2786
<2786=2788,2787
<2789=2790
<2790=2792,2791
<2793=2794
<2794=2801,2800,2795
<2795=2799,2796
<2796=2798,2797
<2802=2803
<2803=2810,2809,2804
<2804=2808,2805
<2805=2807,2806
<2811=2812
<2812=2814,2813
<2815=2816
<2816=2825,2824,2817
<2817=2823,2818
<2818=2820,2819
<2820=2822,2821
<2826=2827
<2827=2836,2835,2828
<2828=2834,2829
<2829=2831,2830
<2831=2833,2832
<2904=2934,2933,2905
<2905=2930,2927,2924,2921,2918,2915,2912,2909,2906
<2906=2908,2907
<2909=2911,2910
<2912=2914,2913
<2915=2917,2916
<2918=2920,2919
<2921=2923,2922
<2924=2926,2925
<2927=2929,2928
<2930=2932,2931
<2934=3192,3181,3177,3173,3169,3163,3150,3137,3124,3102,3095,3082,2968,2937,2935
<2935=2936
<2937=2956,2945,2938
<2938=2939
<2939=2940
<2940=2942,2941
<2942=2944,2943
<2945=2946
<2946=2947
<2947=2953,2948
<2948=2950,2949
<2950=2952,2951
<2953=2955,2954
<2956=2957
<2957=2961,2958
<2958=2960,2959
<2961=2967,2962
<2962=2964,2963
<2964=2966,2965
<2968=3078,2969
<2969=3067,3056,3018,2974,2970
<2970=2971
<2971=2973,2972
<2974=3004,2975
<2975=2980,2976
<2976=2977
<2977=2979,2978
<2980=3002,2988,2981
<2981=2982
<2982=2983
<2983=2987,2984
<2984=2986,2985
<2988=2989
<2989=2996,2990
<2990=2991
<2991=2995,2992
<2992=2994,2993
<2996=2997
<2997=3001,2998
<2998=3000,2999
<3002=3003
<3004=3005
<3005=3007,3006
<3007=3013,3008
<3008=3012,3009
<3009=3011,3010
<3013=3017,3014
<3014=3016,3015
<3018=3054,3019
<3019=3041,3028,3024,3020
<3020=3021
<3021=3023,3022
<3024=3025
<3025=3027,3026
<3028=3029
<3029=3040,3039,3030
<3030=3038,3031
<3031=3035,3032
<3032=3034,3033
<3035=3037,3036
<3041=3042
<3042=3053,3052,3043
<3043=3051,3044
<3044=3048,3045
<3045=3047,3046
<3048=3050,3049
<3054=3055
<3056=3057
<3057=3066,3065,3058
<3058=3064,3059
<3059=3061,3060
<3061=3063,3062
<3067=3068
<3068=3077,3076,3069
<3069=3075,3070
<3070=3072,3071
<3072=3074,3073
<3078=3079
<3079=3081,3080
<3082=3089,3083
<3083=3088,3087,3084
<3084=3086,3085
<3089=3094,3093,3090
<3090=3092,3091
<3095=3096
<3096=3101,3100,3097
<3097=3099,3098
<3102=3122,3103
<3103=3113,3104
<3104=3105
<3105=3112,3106
<3106=3110,3107
<3107=3108
<3108=3109
<3110=3111
<3113=3114
<3114=3121,3115
<3115=3119,3116
<3116=3117
<3117=3118
<3119=3120
<3122=3123
<3124=3125
<3125=3136,3135,3126
<3126=3134,3127
<3127=3130,3129,3128
<3130=3131
<3131=3133,3132
<3137=3138
<3138=3149,3148,3139
<3139=3147,3140
<3140=3146,3141
<3141=3143,3142
<3143=3145,3144
<3150=3157,3151
<3151=3156,3155,3152
<3152=3154,3153
<3157=3162,3161,3158
<3158=3160,3159
<3163=3164
<3164=3168,3165
<3165=3167,3166
<3169=3170
<3170=3172,3171
<3173=3174
<3174=3176,3175
<3177=3178
<3178=3180,3179
<3181=3182
<3182=3191,3190,3183
<3183=3189,3184
<3184=3186,3185
<3186=3188,3187
<3192=3193
<3193=3202,3201,3194
<3194=3200,3195
<3195=3197,3196
<3197=3199,3198
<3246=3276,3275,3247
<3247=3272,3269,3266,3263,3260,3257,3254,3251,3248
<3248=3250,3249
<3251=3253,3252
<3254=3256,3255
<3257=3259,3258
<3260=3262,3261
<3263=3265,3264
<3266=3268,3267
<3269=3271,3270
<3272=3274,3273
<3276=3534,3523,3519,3515,3511,3505,3492,3479,3466,3444,3437,3424,3310,3279,3277
<3277=3278
<3279=3298,3287,3280
<3280=3281
<3281=3282
<3282=3284,3283
<3284=3286,3285
<3287=3288
<3288=3289
<3289=3295,3290
<3290=3292,3291
<3292=3294,3293
<3295=3297,3296
<3298=3299
<3299=3303,3300
<3300=3302,3301
<3303=3309,3304
<3304=3306,3305
<3306=3308,3307
<3310=3420,3311
<3311=3409,3398,3360,3316,3312
<3312=3313
<3313=3315,3314
<3316=3346,3317
<3317=3322,3318
<3318=3319
<3319=3321,3320
<3322=3344,3330,3323
<3323=3324
<3324=3325
<3325=3329,3326
<3326=3328,3327
<3330=3331
<3331=3338,3332
<3332=3333
<3333=3337,3334
<3334=3336,3335
<3338=3339
<3339=3343,3340
<3340=3342,3341
<3344=3345
<3346=3347
<3347=3349,3348
<3349=3355,3350
<3350=3354,3351
<3351=3353,3352
<3355=3359,3356
<3356=3358,3357
<3360=3396,3361
<3361=3383,3370,3366,3362
<3362=3363
<3363=3365,3364
<3366=3367
<3367=3369,3368
<3370=3371
<3371=3382,3381,3372
<3372=3380,3373
<3373=3377,3374
<3374=3376,3375
<3377=3379,3378
<3383=3384
<3384=3395,3394,3385
<3385=3393,3386
<3386=3390,3387
<3387=3389,3388
<3390=3392,3391
<3396=3397
<3398=3399
<3399=3408,3407,3400
<3400=3406,3401
<3401=3403,3402
<3403=3405,3404
<3409=3410
<3410=3419,3418,3411
<3411=3417,3412
<3412=3414,3413
<3414=3416,3415
<3420=3421
<3421=3423,3422
<3424=3431,3425
<3425=3430,3429,3426
<3426=3428,3427
<3431=3436,3435,3432
<3432=3434,3433
<3437=3438
<3438=3443,3442,3439
<3439=3441,3440
<3444=3464,3445
<3445=3455,3446
<3446=3447
<3447=3454,3448
<3448=3452,3449
<3449=3450
<3450=3451
<3452=3453
<3455=3456
<3456=3463,3457
<3457=3461,3458
<3458=3459
<3459=3460
<3461=3462
<3464=3465
<3466=3467
<3467=3478,3477,3468
<3468=3476,3469
<3469=3472,3471,3470
<3472=3473
<3473=3475,3474
<3479=3480
<3480=3491,3490,3481
<3481=3489,3482
<3482=3488,3483
<3483=3485,3484
<3485=3487,3486
<3492=3499,3493
<3493=3498,3497,3494
<3494=3496,3495
<3499=3504,3503,3500
<3500=3502,3501
<3505=3506
<3506=3510,3507
<3507=3509,3508
<3511=3512
<3512=3514,3513
<3515=3516
<3516=3518,3517
<3519=3520
<3520=3522,3521
<3523=3524
<3524=3533,3532,3525
<3525=3531,3526
<3526=3528,3527
<3528=3530,3529
<3534=3535
<3535=3544,3543,3536
<3536=3542,3537
<3537=3539,3538
<3539=3541,3540
<3588=3618,3617,3589
<3589=3614,3611,3608,3605,3602,3599,3596,3593,3590
<3590=3592,3591
<3593=3595,3594
<3596=3598,3597
<3599=3601,3600
<3602=3604,3603
<3605=3607,3606
<3608=3610,3609
<3611=3613,3612
<3614=3616,3615
<3618=3899,3888,3884,3880,3876,3870,3857,3844,3831,3809,3796,3783,3654,3621,3619
<3619=3620
<3621=3642,3631,3622
<3622=3623
<3623=3624
<3624=3628,3625
<3625=3627,3626
<3628=3630,3629
<3631=3632
<3632=3633
<3633=3639,3634
<3634=3636,3635
<3636=3638,3637
<3639=3641,3640
<3642=3643
<3643=3647,3644
<3644=3646,3645
<3647=3653,3648
<3648=3650,3649
<3650=3652,3651
<3654=3779,3655
<3655=3768,3757,3719,3660,3656
<3656=3657
<3657=3659,3658
<3660=3705,3661
<3661=3666,3662
<3662=3663
<3663=3665,3664
<3666=3703,3676,3667
<3667=3668
<3668=3669
<3669=3675,3670
<3670=3674,3671
<3671=3673,3672
<3676=3690,3677
<3677=3684,3678
<3678=3679
<3679=3683,3680
<3680=3682,3681
<3684=3685
<3685=3689,3686
<3686=3688,3687
<3690=3697,3691
<3691=3692
<3692=3696,3693
<3693=3695,3694
<3697=3698
<3698=3702,3699
<3699=3701,3700
<3703=3704
<3705=3706
<3706=3708,3707
<3708=3714,3709
<3709=3713,3710
<3710=3712,3711
<3714=3718,3715
<3715=3717,3716
<3719=3755,3720
<3720=3742,3729,3725,3721
<3721=3722
<3722=3724,3723
<3725=3726
<3726=3728,3727
<3729=3730
<3730=3741,3740,3731
<3731=3739,3732
<3732=3736,3733
<3733=3735,3734
<3736=3738,3737
<3742=3743
<3743=3754,3753,3744
<3744=3752,3745
<3745=3749,3746
<3746=3748,3747
<3749=3751,3750
<3755=3756
<3757=3758
<3758=3767,3766,3759
<3759=3765,3760
<3760=3762,3761
<3762=3764,3763
<3768=3769
<3769=3778,3777,3770
<3770=3776,3771
<3771=3773,3772
<3773=3775,3774
<3779=3780
<3780=3782,3781
<3783=3790,3784
<3784=3789,3788,3785
<3785=3787,3786
<3790=3795,3794,3791
<3791=3793,3792
<3796=3803,3797
<3797=3802,3801,3798
<3798=3800,3799
<3803=3808,3807,3804
<3804=3806,3805
<3809=3829,3810
<3810=3820,3811
<3811=3812
<3812=3819,3813
<3813=3817,3814
<3814=3815
<3815=3816
<3817=3818
<3820=3821
<3821=3828,3822
<3822=3826,3823
<3823=3824
<3824=3825
<3826=3827
<3829=3830
<3831=3832
<3832=3843,3842,3833
<3833=3841,3834
<3834=3837,3836,3835
<3837=3838
<3838=3840,3839
<3844=3845
<3845=3856,3855,3846
<3846=3854,3847
<3847=3853,3848
<3848=3850,3849
<3850=3852,3851
<3857=3864,3858
<3858=3863,3862,3859
<3859=3861,3860
<3864=3869,3868,3865
<3865=3867,3866
<3870=3871
<3871=3875,3872
<3872=3874,3873
<3876=3877
<3877=3879,3878
<3880=3881
<3881=3883,3882
<3884=3885
<3885=3887,3886
<3888=3889
<3889=3898,3897,3890
<3890=3896,3891
<3891=3893,3892
<3893=3895,3894
<3899=3900
<3900=3909,3908,3901
<3901=3907,3902
<3902=3904,3903
<3904=3906,3905
<3954=3984,3983,3955
<3955=3980,3977,3974,3971,3968,3965,3962,3959,3956
<3956=3958,3957
<3959=3961,3960
<3962=3964,3963
<3965=3967,3966
<3968=3970,3969
<3971=3973,3972
<3974=3976,3975
<3977=3979,3978
<3980=3982,3981
<3984=4208,4197,4193,4189,4185,4179,4166,4153,4140,4118,4105,4016,3987,3985
<3985=3986
<3987=4008,3997,3988
<3988=3989
<3989=3990
<3990=3994,3991
<3991=3993,3992
<3994=3996,3995
<3997=3998
<3998=3999
<3999=4005,4000
<4000=4002,4001
<4002=4004,4003
<4005=4007,4006
<4008=4009
<4009=4015,4010
<4010=4012,4011
<4012=4014,4013
<4016=4101,4017
<4017=4090,4079,4041,4022,4018
<4018=4019
<4019=4021,4020
<4022=4027,4023
<4023=4024
<4024=4026,4025
<4027=4028
<4028=4030,4029
<4030=4036,4031
<4031=4035,4032
<4032=4034,4033
<4036=4040,4037
<4037=4039,4038
<4041=4077,4042
<4042=4064,4051,4047,4043
<4043=4044
<4044=4046,4045
<4047=4048
<4048=4050,4049
<4051=4052
<4052=4063,4062,4053
<4053=4061,4054
<4054=4058,4055
<4055=4057,4056
<4058=4060,4059
<4064=4065
<4065=4076,4075,4066
<4066=4074,4067
<4067=4071,4068
<4068=4070,4069
<4071=4073,4072
<4077=4078
<4079=4080
<4080=4089,4088,4081
<4081=4087,4082
<4082=4084,4083
<4084=4086,4085
<4090=4091
<4091=4100,4099,4092
<4092=4098,4093
<4093=4095,4094
<4095=4097,4096
<4101=4102
<4102=4104,4103
<4105=4112,4106
<4106=4111,4110,4107
<4107=4109,4108
<4112=4117,4116,4113
<4113=4115,4114
<4118=4138,4119
<4119=4129,4120
<4120=4121
<4121=4128,4122
<4122=4126,4123
<4123=4124
<4124=4125
<4126=4127
<4129=4130
<4130=4137,4131
<4131=4135,4132
<4132=4133
<4133=4134
<4135=4136
<4138=4139
<4140=4141
<4141=4152,4151,4142
<4142=4150,4143
<4143=4146,4145,4144
<4146=4147
<4147=4149,4148
<4153=4154
<4154=4165,4164,4155
<4155=4163,4156
<4156=4162,4157
<4157=4159,4158
<4159=4161,4160
<4166=4173,4167
<4167=4172,4171,4168
<4168=4170,4169
<4173=4178,4177,4174
<4174=4176,4175
<4179=4180
<4180=4184,4181
<4181=4183,4182
<4185=4186
<4186=4188,4187
<4189=4190
<4190=4192,4191
<4193=4194
<4194=4196,4195
<4197=4198
<4198=4207,4206,4199
<4199=4205,4200
<4200=4202,4201
<4202=4204,4203
<4208=4209
<4209=4218,4217,4210
<4210=4216,4211
<4211=4213,4212
<4213=4215,4214
<4260=4290,4289,4261
<4261=4286,4283,4280,4277,4274,4271,4268,4265,4262
<4262=4264,4263
<4265=4267,4266
<4268=4270,4269
<4271=4273,4272
<4274=4276,4275
<4277=4279,4278
<4280=4282,4281
<4283=4285,4284
<4286=4288,4287
<4290=4541,4530,4526,4522,4518,4512,4499,4486,4473,4451,4444,4431,4326,4293,4291
<4291=4292
<4293=4314,4303,4294
<4294=4295
<4295=4296
<4296=4300,4297
<4297=4299,4298
<4300=4302,4301
<4303=4304
<4304=4305
<4305=4311,4306
<4306=4308,4307
<4308=4310,4309
<4311=4313,4312
<4314=4315
<4315=4319,4316
<4316=4318,4317
<4319=4325,4320
<4320=4322,4321
<4322=4324,4323
<4326=4427,4327
<4327=4416,4405,4367,4332,4328
<4328=4329
<4329=4331,4330
<4332=4353,4333
<4333=4338,4334
<4334=4335
<4335=4337,4336
<4338=4339
<4339=4352,4340
<4340=4350,4341
<4341=4342
<4342=4343
<4343=4347,4344
<4344=4346,4345
<4347=4349,4348
<4350=4351
<4353=4354
<4354=4356,4355
<4356=4362,4357
<4357=4361,4358
<4358=4360,4359
<4362=4366,4363
<4363=4365,4364
<4367=4403,4368
<4368=4390,4377,4373,4369
<4369=4370
<4370=4372,4371
<4373=4374
<4374=4376,4375
<4377=4378
<4378=4389,4388,4379
<4379=4387,4380
<4380=4384,4381
<4381=4383,4382
<4384=4386,4385
<4390=4391
<4391=4402,4401,4392
<4392=4400,4393
<4393=4397,4394
<4394=4396,4395
<4397=4399,4398
<4403=4404
<4405=4406
<4406=4415,4414,4407
<4407=4413,4408
<4408=4410,4409
<4410=4412,4411
<4416=4417
<4417=4426,4425,4418
<4418=4424,4419
<4419=4421,4420
<4421=4423,4422
<4427=4428
<4428=4430,4429
<4431=4438,4432
<4432=4437,4436,4433
<4433=4435,4434
<4438=4443,4442,4439
<4439=4441,4440
<4444=4445
<4445=4450,4449,4446
<4446=4448,4447
<4451=4471,4452
<4452=4462,4453
<4453=4454
<4454=4461,4455
<4455=4459,4456
<4456=4457
<4457=4458
<4459=4460
<4462=4463
<4463=4470,4464
<4464=4468,4465
<4465=4466
<4466=4467
<4468=4469
<4471=4472
<4473=4474
<4474=4485,4484,4475
<4475=4483,4476
<4476=4479,4478,4477
<4479=4480
<4480=4482,4481
<4486=4487
<4487=4498,4497,4488
<4488=4496,4489
<4489=4495,4490
<4490=4492,4491
<4492=4494,4493
<4499=4506,4500
<4500=4505,4504,4501
<4501=4503,4502
<4506=4511,4510,4507
<4507=4509,4508
<4512=4513
<4513=4517,4514
<4514=4516,4515
<4518=4519
<4519=4521,4520
<4522=4523
<4523=4525,4524
<4526=4527
<4527=4529,4528
<4530=4531
<4531=4540,4539,4532
<4532=4538,4533
<4533=4535,4534
<4535=4537,4536
<4541=4542
<4542=4551,4550,4543
<4543=4549,4544
<4544=4546,4545
<4546=4548,4547
<4595=4625,4624,4596
<4596=4621,4618,4615,4612,4609,4606,4603,4600,4597
<4597=4599,4598
<4600=4602,4601
<4603=4605,4604
<4606=4608,4607
<4609=4611,4610
<4612=4614,4613
<4615=4617,4616
<4618=4620,4619
<4621=4623,4622
<4625=4999,4988,4984,4980,4976,4970,4957,4944,4931,4909,4902,4889,4661,4628,4626
<4626=4627
<4628=4649,4638,4629
<4629=4630
<4630=4631
<4631=4635,4632
<4632=4634,4633
<4635=4637,4636
<4638=4639
<4639=4640
<4640=4646,4641
<4641=4643,4642
<4643=4645,4644
<4646=4648,4647
<4649=4650
<4650=4654,4651
<4651=4653,4652
<4654=4660,4655
<4655=4657,4656
<4657=4659,4658
<4661=4883,4662
<4662=4872,4861,4823,4667,4663
<4663=4664
<4664=4666,4665
<4667=4809,4668
<4668=4805,4669
<4669=4799,4795,4792,4670
<4670=4781,4770,4732,4671
<4671=4718,4672
<4672=4705,4692,4677,4673
<4673=4674
<4674=4676,4675
<4677=4678
<4678=4691,4679
<4679=4689,4680
<4680=4681
<4681=4682
<4682=4686,4683
<4683=4685,4684
<4686=4688,4687
<4689=4690
<4692=4693
<4693=4704,4703,4694
<4694=4702,4695
<4695=4699,4696
<4696=4698,4697
<4699=4701,4700
<4705=4706
<4706=4717,4716,4707
<4707=4715,4708
<4708=4712,4709
<4709=4711,4710
<4712=4714,4713
<4718=4719
<4719=4721,4720
<4721=4727,4722
<4722=4726,4723
<4723=4725,4724
<4727=4731,4728
<4728=4730,4729
<4732=4768,4733
<4733=4755,4742,4738,4734
<4734=4735
<4735=4737,4736
<4738=4739
<4739=4741,4740
<4742=4743
<4743=4754,4753,4744
<4744=4752,4745
<4745=4749,4746
<4746=4748,4747
<4749=4751,4750
<4755=4756
<4756=4767,4766,4757
<4757=4765,4758
<4758=4762,4759
<4759=4761,4760
<4762=4764,4763
<4768=4769
<4770=4771
<4771=4780,4779,4772
<4772=4778,4773
<4773=4775,4774
<4775=4777,4776
<4781=4782
<4782=4791,4790,4783
<4783=4789,4784
<4784=4786,4785
<4786=4788,4787
<4792=4794,4793
<4795=4796
<4796=4798,4797
<4799=4800
<4800=4804,4801
<4801=4803,4802
<4805=4806
<4806=4808,4807
<4809=4810
<4810=4812,4811
<4812=4818,4813
<4813=4817,4814
<4814=4816,4815
<4818=4822,4819
<4819=4821,4820
<4823=4859,4824
<4824=4846,4833,4829,4825
<4825=4826
<4826=4828,4827
<4829=4830
<4830=4832,4831
<4833=4834
<4834=4845,4844,4835
<4835=4843,4836
<4836=4840,4837
<4837=4839,4838
<4840=4842,4841
<4846=4847
<4847=4858,4857,4848
<4848=4856,4849
<4849=4853,4850
<4850=4852,4851
<4853=4855,4854
<4859=4860
<4861=4862
<4862=4871,4870,4863
<4863=4869,4864
<4864=4866,4865
<4866=4868,4867
<4872=4873
<4873=4882,4881,4874
<4874=4880,4875
<4875=4877,4876
<4877=4879,4878
<4883=4884
<4884=4888,4885
<4885=4887,4886
<4889=4896,4890
<4890=4895,4894,4891
<4891=4893,4892
<4896=4901,4900,4897
<4897=4899,4898
<4902=4903
<4903=4908,4907,4904
<4904=4906,4905
<4909=4929,4910
<4910=4920,4911
<4911=4912
<4912=4919,4913
<4913=4917,4914
<4914=4915
<4915=4916
<4917=4918
<4920=4921
<4921=4928,4922
<4922=4926,4923
<4923=4924
<4924=4925
<4926=4927
<4929=4930
<4931=4932
<4932=4943,4942,4933
<4933=4941,4934
<4934=4937,4936,4935
<4937=4938
<4938=4940,4939
<4944=4945
<4945=4956,4955,4946
<4946=4954,4947
<4947=4953,4948
<4948=4950,4949
<4950=4952,4951
<4957=4964,4958
<4958=4963,4962,4959
<4959=4961,4960
<4964=4969,4968,4965
<4965=4967,4966
<4970=4971
<4971=4975,4972
<4972=4974,4973
<4976=4977
<4977=4979,4978
<4980=4981
<4981=4983,4982
<4984=4985
<4985=4987,4986
<4988=4989
<4989=4998,4997,4990
<4990=4996,4991
<4991=4993,4992
<4993=4995,4994
<4999=5000
<5000=5009,5008,5001
<5001=5007,5002
<5002=5004,5003
<5004=5006,5005
<5110=5116,5115,5111
<5111=5112
<5112=5114,5113
<5116=5156,5148,5139,5128,5119,5117
<5117=5118
<5119=5120
<5120=5126,5121
<5121=5122
<5122=5123
<5123=5125,5124
<5126=5127
<5128=5129
<5129=5138,5137,5130
<5130=5136,5131
<5131=5135,5132
<5132=5134,5133
<5139=5140
<5140=5146,5141
<5141=5142
<5142=5143
<5143=5145,5144
<5146=5147
<5148=5149
<5149=5151,5150
<5151=5155,5152
<5152=5154,5153
<5156=5157
<5157=5165,5158
<5158=5161,5159
<5159=5160
<5161=5162
<5162=5164,5163
<5165=5166
<5182=5188,5187,5183
<5183=5184
<5184=5186,5185
<5188=5237,5191,5189
<5189=5190
<5191=5214,5192
<5192=5203,5195,5193
<5193=5194
<5195=5196
<5196=5198,5197
<5198=5202,5199
<5199=5201,5200
<5203=5204
<5204=5212,5205
<5205=5210,5208,5206
<5206=5207
<5208=5209
<5210=5211
<5212=5213
<5214=5215
<5215=5236,5216
<5216=5232,5217
<5217=5224,5222,5218
<5218=5219
<5219=5221,5220
<5222=5223
<5224=5225
<5225=5231,5226
<5226=5230,5227
<5227=5229,5228
<5232=5233
<5233=5235,5234
<5237=5238
<5238=5249,5248,5239
<5239=5247,5240
<5240=5246,5241
<5241=5245,5242
<5242=5244,5243
<5270=5276,5275,5271
<5271=5272
<5272=5274,5273
<5276=5689,5682,5673,5664,5655,5646,5637,5628,5619,5610,5601,5592,5583,5574,5565,5556,5547,5538,5529,5509,5495,5486,5468,5446,5284,5277
<5277=5278
<5278=5282,5279
<5279=5280
<5280=5281
<5282=5283
<5284=5442,5438,5435,5285
<5285=5422,5326,5301,5286
<5286=5288,5287
<5288=5289
<5289=5296,5290
<5290=5294,5291
<5291=5292
<5292=5293
<5294=5295
<5296=5300,5297
<5297=5299,5298
<5301=5302
<5302=5324,5303
<5303=5322,5320,5316,5310,5308,5306,5304
<5304=5305
<5306=5307
<5308=5309
<5310=5311
<5311=5315,5312
<5312=5314,5313
<5316=5317
<5317=5319,5318
<5320=5321
<5322=5323
<5324=5325
<5326=5418,5414,5411,5327
<5327=5398,5328
<5328=5369,5329
<5329=5368,5367,5366,5365,5364,5363,5362,5361,5360,5359,5358,5357,5356,5355,5354,5353,5352,5351,5350,5349,5348,5347,5346,5338,5331,5330
<5331=5332
<5332=5336,5333
<5333=5334
<5334=5335
<5336=5337
<5338=5339
<5339=5341,5340
<5341=5345,5342
<5342=5344,5343
<5369=5370
<5370=5372,5371
<5372=5394,5373
<5373=5392,5390,5388,5386,5384,5382,5380,5376,5374
<5374=5375
<5376=5377
<5377=5379,5378
<5380=5381
<5382=5383
<5384=5385
<5386=5387
<5388=5389
<5390=5391
<5392=5393
<5394=5395
<5395=5397,5396
<5398=5399
<5399=5410,5409,5400
<5400=5408,5401
<5401=5407,5402
<5402=5404,5403
<5404=5406,5405
<5411=5413,5412
<5414=5415
<5415=5417,5416
<5418=5419
<5419=5421,5420
<5422=5423
<5423=5434,5433,5424
<5424=5432,5425
<5425=5431,5426
<5426=5428,5427
<5428=5430,5429
<5435=5437,5436
<5438=5439
<5439=5441,5440
<5442=5443
<5443=5445,5444
<5446=5464,5447
<5447=5456,5449,5448
<5449=5450
<5450=5454,5451
<5451=5452
<5452=5453
<5454=5455
<5456=5457
<5457=5459,5458
<5459=5463,5460
<5460=5462,5461
<5464=5465
<5465=5467,5466
<5468=5469
<5469=5485,5484,5470
<5470=5483,5471
<5471=5482,5472
<5472=5480,5473
<5473=5476,5474
<5474=5475
<5476=5477
<5477=5479,5478
<5480=5481
<5486=5487
<5487=5494,5493,5488
<5488=5492,5489
<5489=5491,5490
<5495=5496
<5496=5508,5507,5497
<5497=5506,5498
<5498=5500,5499
<5500=5504,5501
<5501=5502
<5502=5503
<5504=5505
<5509=5510
<5510=5514,5511
<5511=5513,5512
<5514=5520,5515
<5515=5516
<5516=5517
<5517=5519,5518
<5520=5521
<5521=5527,5522
<5522=5523
<5523=5524
<5524=5526,5525
<5527=5528
<5529=5530
<5530=5537,5536,5531
<5531=5535,5532
<5532=5534,5533
<5538=5539
<5539=5546,5545,5540
<5540=5544,5541
<5541=5543,5542
<5547=5548
<5548=5555,5554,5549
<5549=5553,5550
<5550=5552,5551
<5556=5557
<5557=5564,5563,5558
<5558=5562,5559
<5559=5561,5560
<5565=5566
<5566=5573,5572,5567
<5567=5571,5568
<5568=5570,5569
<5574=5575
<5575=5582,5581,5576
<5576=5580,5577
<5577=5579,5578
<5583=5584
<5584=5591,5590,5585
<5585=5589,5586
<5586=5588,5587
<5592=5593
<5593=5600,5599,5594
<5594=5598,5595
<5595=5597,5596
<5601=5602
<5602=5609,5608,5603
<5603=5607,5604
<5604=5606,5605
<5610=5611
<5611=5618,5617,5612
<5612=5616,5613
<5613=5615,5614
<5619=5620
<5620=5627,5626,5621
<5621=5625,5622
<5622=5624,5623
<5628=5629
<5629=5636,5635,5630
<5630=5634,5631
<5631=5633,5632
<5637=5638
<5638=5645,5644,5639
<5639=5643,5640
<5640=5642,5641
<5646=5647
<5647=5654,5653,5648
<5648=5652,5649
<5649=5651,5650
<5655=5656
<5656=5663,5662,5657
<5657=5661,5658
<5658=5660,5659
<5664=5665
<5665=5672,5671,5666
<5666=5670,5667
<5667=5669,5668
<5673=5674
<5674=5681,5680,5675
<5675=5679,5676
<5676=5678,5677
<5682=5686,5683
<5683=5685,5684
<5686=5688,5687
<5689=5690
<5690=5697,5696,5691
<5691=5695,5692
<5692=5694,5693
<5761=5812,5811,5762
<5762=5808,5805,5802,5799,5796,5793,5790,5787,5784,5781,5778,5775,5772,5769,5766,5763
<5763=5765,5764
<5766=5768,5767
<5769=5771,5770
<5772=5774,5773
<5775=5777,5776
<5778=5780,5779
<5781=5783,5782
<5784=5786,5785
<5787=5789,5788
<5790=5792,5791
<5793=5795,5794
<5796=5798,5797
<5799=5801,5800
<5802=5804,5803
<5805=5807,5806
<5808=5810,5809
<5812=7273,7266,7259,7252,7245,7236,7213,7209,7202,7195,7188,7181,7174,7167,7160,6756,6745,6734,6727,6720,6713,6709,5813,5819,5826,5833,5840,5852,5859,6152,6190,6196,6202,6208,6216,6224,6230,6236,6242,6248,6256,6262,6268,6274,6280,6286,6292,6298,6304,6310,6316,6322,6328,6334,6342,6348,6352,6359,6366,6383,6392,6419,6423,6437,6443,6449,6455,6461,6467,6471,6697,6703
<5813=5814
<5814=5817,5816,5815
<5817=5818
<5819=5820
<5820=5824,5821
<5821=5822
<5822=5823
<5824=5825
<5826=5827
<5827=5831,5828
<5828=5829
<5829=5830
<5831=5832
<5833=5834
<5834=5838,5835
<5835=5836
<5836=5837
<5838=5839
<5840=5848,5841
<5841=5842
<5842=5846,5843
<5843=5844
<5844=5845
<5846=5847
<5848=5849
<5849=5851,5850
<5852=5853
<5853=5857,5854
<5854=5855
<5855=5856
<5857=5858
<5859=6148,6132,5860
<5860=5861
<5861=6114,6110,6099,6093,6084,6078,6013,5927,5918,5887,5880,5871,5862
<5862=5863
<5863=5869,5864
<5864=5865
<5865=5866
<5866=5868,5867
<5869=5870
<5871=5872
<5872=5878,5873
<5873=5874
<5874=5875
<5875=5877,5876
<5878=5879
<5880=5881
<5881=5885,5882
<5882=5883
<5883=5884
<5885=5886
<5887=5914,5910,5907,5888
<5888=5889
<5889=5901,5890
<5890=5891
<5891=5899,5892
<5892=5893
<5893=5894
<5894=5896,5895
<5896=5898,5897
<5899=5900
<5901=5902
<5902=5904,5903
<5904=5906,5905
<5907=5909,5908
<5910=5911
<5911=5913,5912
<5914=5915
<5915=5917,5916
<5918=5919
<5919=5925,5920
<5920=5921
<5921=5922
<5922=5924,5923
<5925=5926
<5927=6003,5928
<5928=5990,5983,5974,5940,5929
<5929=5930
<5930=5938,5931
<5931=5934,5932
<5932=5933
<5934=5935
<5935=5937,5936
<5938=5939
<5940=5957,5941
<5941=5946,5942
<5942=5943
<5943=5945,5944
<5946=5947
<5947=5955,5948
<5948=5953,5951,5949
<5949=5950
<5951=5952
<5953=5954
<5955=5956
<5957=5958
<5958=5973,5959
<5959=5971,5960
<5960=5965,5963,5961
<5961=5962
<5963=5964
<5965=5966
<5966=5970,5967
<5967=5969,5968
<5971=5972
<5974=5975
<5975=5981,5976
<5976=5977
<5977=5978
<5978=5980,5979
<5981=5982
<5983=5984
<5984=5989,5988,5985
<5985=5987,5986
<5990=5991
<5991=6001,5992
<5992=5997,5993
<5993=5994
<5994=5996,5995
<5997=5998
<5998=6000,5999
<6001=6002
<6003=6004
<6004=6008,6005
<6005=6007,6006
<6008=6012,6009
<6009=6011,6010
<6013=6074,6066,6063,6014
<6014=6044,6036,6015
<6015=6016
<6016=6031,6017
<6017=6029,6018
<6018=6027,6019
<6019=6020
<6020=6026,6021
<6021=6025,6022
<6022=6024,6023
<6027=6028
<6029=6030
<6031=6033,6032
<6033=6035,6034
<6036=6037
<6037=6039,6038
<6039=6041,6040
<6041=6043,6042
<6044=6045
<6045=6061,6046
<6046=6055,6051,6047
<6047=6048
<6048=6050,6049
<6051=6052
<6052=6054,6053
<6055=6056
<6056=6060,6057
<6057=6059,6058
<6061=6062
<6063=6065,6064
<6066=6067
<6067=6071,6068
<6068=6070,6069
<6071=6073,6072
<6074=6075
<6075=6077,6076
<6078=6079
<6079=6081,6080
<6081=6083,6082
<6084=6085
<6085=6090,6086
<6086=6088,6087
<6088=6089
<6090=6092,6091
<6093=6094
<6094=6096,6095
<6096=6098,6097
<6099=6100
<6100=6108,6101
<6101=6106,6104,6102
<6102=6103
<6104=6105
<6106=6107
<6108=6109
<6110=6111
<6111=6113,6112
<6114=6115
<6115=6131,6130,6116
<6116=6129,6117
<6117=6128,6118
<6118=6126,6119
<6119=6120
<6120=6121
<6121=6123,6122
<6123=6125,6124
<6126=6127
<6132=6142,6133
<6133=6134
<6134=6140,6135
<6135=6136
<6136=6137
<6137=6139,6138
<6140=6141
<6142=6143
<6143=6145,6144
<6145=6147,6146
<6148=6149
<6149=6151,6150
<6152=6186,6153
<6153=6177,6154
<6154=6171,6155
<6155=6160,6156
<6156=6157
<6157=6159,6158
<6160=6161
<6161=6169,6162
<6162=6167,6165,6163
<6163=6164
<6165=6166
<6167=6168
<6169=6170
<6171=6172
<6172=6174,6173
<6174=6176,6175
<6177=6178
<6178=6183,6179
<6179=6181,6180
<6181=6182
<6183=6185,6184
<6186=6187
<6187=6189,6188
<6190=6191
<6191=6193,6192
<6193=6195,6194
<6196=6197
<6197=6199,6198
<6199=6201,6200
<6202=6203
<6203=6205,6204
<6205=6207,6206
<6208=6209
<6209=6213,6210
<6210=6212,6211
<6213=6215,6214
<6216=6217
<6217=6221,6218
<6218=6220,6219
<6221=6223,6222
<6224=6225
<6225=6227,6226
<6227=6229,6228
<6230=6231
<6231=6233,6232
<6233=6235,6234
<6236=6237
<6237=6239,6238
<6239=6241,6240
<6242=6243
<6243=6245,6244
<6245=6247,6246
<6248=6249
<6249=6253,6250
<6250=6252,6251
<6253=6255,6254
<6256=6257
<6257=6259,6258
<6259=6261,6260
<6262=6263
<6263=6265,6264
<6265=6267,6266
<6268=6269
<6269=6271,6270
<6271=6273,6272
<6274=6275
<6275=6277,6276
<6277=6279,6278
<6280=6281
<6281=6283,6282
<6283=6285,6284
<6286=6287
<6287=6289,6288
<6289=6291,6290
<6292=6293
<6293=6295,6294
<6295=6297,6296
<6298=6299
<6299=6301,6300
<6301=6303,6302
<6304=6305
<6305=6307,6306
<6307=6309,6308
<6310=6311
<6311=6313,6312
<6313=6315,6314
<6316=6317
<6317=6319,6318
<6319=6321,6320
<6322=6323
<6323=6325,6324
<6325=6327,6326
<6328=6329
<6329=6331,6330
<6331=6333,6332
<6334=6335
<6335=6339,6336
<6336=6338,6337
<6339=6341,6340
<6342=6343
<6343=6345,6344
<6345=6347,6346
<6348=6349
<6349=6351,6350
<6352=6353
<6353=6358,6357,6354
<6354=6356,6355
<6359=6360
<6360=6365,6364,6361
<6361=6363,6362
<6366=6375,6367
<6367=6368
<6368=6374,6369
<6369=6371,6370
<6371=6373,6372
<6375=6376
<6376=6382,6377
<6377=6379,6378
<6379=6381,6380
<6383=6388,6384
<6384=6385
<6385=6387,6386
<6388=6389
<6389=6391,6390
<6392=6410,6403,6393
<6393=6394
<6394=6395
<6395=6402,6396
<6396=6400,6397
<6397=6398
<6398=6399
<6400=6401
<6403=6404
<6404=6409,6405
<6405=6407,6406
<6407=6408
<6410=6411
<6411=6417,6412
<6412=6415,6413
<6413=6414
<6415=6416
<6417=6418
<6419=6420
<6420=6422,6421
<6423=6424
<6424=6436,6435,6425
<6425=6434,6426
<6426=6432,6427
<6427=6430,6428
<6428=6429
<6430=6431
<6432=6433
<6437=6438
<6438=6440,6439
<6440=6442,6441
<6443=6444
<6444=6446,6445
<6446=6448,6447
<6449=6450
<6450=6452,6451
<6452=6454,6453
<6455=6456
<6456=6458,6457
<6458=6460,6459
<6461=6462
<6462=6464,6463
<6464=6466,6465
<6467=6468
<6468=6470,6469
<6471=6695,6472
<6472=6680,6473
<6473=6676,6474
<6474=6672,6668,6660,6652,6644,6636,6555,6530,6517,6475
<6475=6513,6509,6506,6476
<6476=6496,6488,6477
<6477=6478
<6478=6486,6479
<6479=6484,6480
<6480=6481
<6481=6483,6482
<6484=6485
<6486=6487
<6488=6489
<6489=6491,6490
<6491=6493,6492
<6493=6495,6494
<6496=6497
<6497=6501,6498
<6498=6500,6499
<6501=6503,6502
<6503=6505,6504
<6506=6508,6507
<6509=6510
<6510=6512,6511
<6513=6514
<6514=6516,6515
<6517=6518
<6518=6529,6519
<6519=6527,6520
<6520=6523,6521
<6521=6522
<6523=6524
<6524=6526,6525
<6527=6528
<6530=6531
<6531=6554,6532
<6532=6552,6533
<6533=6534
<6534=6535
<6535=6545,6536
<6536=6538,6537
<6538=6542,6539
<6539=6541,6540
<6542=6544,6543
<6545=6549,6546
<6546=6548,6547
<6549=6551,6550
<6552=6553
<6555=6632,6628,6625,6556
<6556=6608,6591,6574,6557
<6557=6566,6558
<6558=6559
<6559=6563,6560
<6560=6562,6561
<6563=6565,6564
<6566=6567
<6567=6571,6568
<6568=6570,6569
<6571=6573,6572
<6574=6583,6575
<6575=6576
<6576=6580,6577
<6577=6579,6578
<6580=6582,6581
<6583=6584
<6584=6588,6585
<6585=6587,6586
<6588=6590,6589
<6591=6600,6592
<6592=6593
<6593=6597,6594
<6594=6596,6595
<6597=6599,6598
<6600=6601
<6601=6605,6602
<6602=6604,6603
<6605=6607,6606
<6608=6617,6609
<6609=6610
<6610=6614,6611
<6611=6613,6612
<6614=6616,6615
<6617=6618
<6618=6622,6619
<6619=6621,6620
<6622=6624,6623
<6625=6627,6626
<6628=6629
<6629=6631,6630
<6632=6633
<6633=6635,6634
<6636=6637
<6637=6641,6638
<6638=6640,6639
<6641=6643,6642
<6644=6645
<6645=6649,6646
<6646=6648,6647
<6649=6651,6650
<6652=6653
<6653=6657,6654
<6654=6656,6655
<6657=6659,6658
<6660=6661
<6661=6665,6662
<6662=6664,6663
<6665=6667,6666
<6668=6669
<6669=6671,6670
<6672=6673
<6673=6675,6674
<6676=6677
<6677=6679,6678
<6680=6681
<6681=6694,6682
<6682=6693,6683
<6683=6691,6684
<6684=6689,6685
<6685=6686
<6686=6688,6687
<6689=6690
<6691=6692
<6695=6696
<6697=6698
<6698=6700,6699
<6700=6702,6701
<6703=6704
<6704=6706,6705
<6706=6708,6707
<6709=6710
<6710=6712,6711
<6713=6714
<6714=6719,6718,6715
<6715=6717,6716
<6720=6721
<6721=6726,6725,6722
<6722=6724,6723
<6727=6728
<6728=6733,6732,6729
<6729=6731,6730
<6734=6735
<6735=6744,6743,6736
<6736=6742,6737
<6737=6739,6738
<6739=6741,6740
<6745=6746
<6746=6755,6754,6747
<6747=6753,6748
<6748=6750,6749
<6750=6752,6751
<6756=7158,6757
<6757=7156,6850,6849,6847,6843,6842,6840,6836,6818,6817,6815,6811,6810,6808,6804,6803,6801,6797,6796,6794,6790,6789,6787,6783,6782,6780,6776,6775,6773,6760,6758
<6758=6759
<6760=6761
<6761=6771,6762
<6762=6769,6767,6765,6763
<6763=6764
<6765=6766
<6767=6768
<6769=6770
<6771=6772
<6773=6774
<6776=6777
<6777=6779,6778
<6780=6781
<6783=6784
<6784=6786,6785
<6787=6788
<6790=6791
<6791=6793,6792
<6794=6795
<6797=6798
<6798=6800,6799
<6801=6802
<6804=6805
<6805=6807,6806
<6808=6809
<6811=6812
<6812=6814,6813
<6815=6816
<6818=6819
<6819=6835,6820
<6820=6832,6821
<6821=6827,6822
<6822=6824,6823
<6824=6826,6825
<6827=6829,6828
<6829=6831,6830
<6832=6834,6833
<6836=6837
<6837=6839,6838
<6840=6841
<6843=6844
<6844=6846,6845
<6847=6848
<6850=7140,6856,6851
<6851=6852
<6852=6853
<6853=6855,6854
<6856=7129,7118,7114,6857
<6857=7106,6858
<6858=7105,7104,7103,7102,7101,7100,7099,7098,7097,7096,7095,7094,7093,7092,7091,7090,7089,7088,7087,7086,7085,7084,7083,7082,7081,7080,7079,7078,7077,7076,7075,7074,7073,7072,7071,7070,7069,6859
<6859=7050,6860
<6860=7033,7016,6999,6861
<6861=6987,6893,6862
<6862=6863
<6863=6886,6879,6872,6864
<6864=6865
<6865=6871,6866
<6866=6870,6867
<6867=6869,6868
<6872=6873
<6873=6877,6874
<6874=6875
<6875=6876
<6877=6878
<6879=6880
<6880=6884,6881
<6881=6882
<6882=6883
<6884=6885
<6886=6887
<6887=6891,6888
<6888=6889
<6889=6890
<6891=6892
<6893=6978,6967,6956,6945,6941,6937,6894
<6894=6933,6929,6926,6895
<6895=6916,6906,6896
<6896=6897
<6897=6903,6898
<6898=6902,6899
<6899=6901,6900
<6903=6905,6904
<6906=6907
<6907=6913,6908
<6908=6912,6909
<6909=6911,6910
<6913=6915,6914
<6916=6917
<6917=6923,6918
<6918=6922,6919
<6919=6921,6920
<6923=6925,6924
<6926=6928,6927
<6929=6930
<6930=6932,6931
<6933=6934
<6934=6936,6935
<6937=6938
<6938=6940,6939
<6941=6942
<6942=6944,6943
<6945=6946
<6946=6955,6947
<6947=6954,6948
<6948=6952,6949
<6949=6950
<6950=6951
<6952=6953
<6956=6957
<6957=6966,6958
<6958=6965,6959
<6959=6963,6960
<6960=6961
<6961=6962
<6963=6964
<6967=6968
<6968=6977,6969
<6969=6976,6970
<6970=6974,6971
<6971=6972
<6972=6973
<6974=6975
<6978=6979
<6979=6985,6980
<6980=6983,6981
<6981=6982
<6983=6984
<6985=6986
<6987=6988
<6988=6996,6989
<6989=6993,6990
<6990=6992,6991
<6993=6995,6994
<6996=6998,6997
<6999=7000
<7000=7015,7001
<7001=7014,7002
<7002=7012,7003
<7003=7004
<7004=7005
<7005=7007,7006
<7007=7009,7008
<7009=7011,7010
<7012=7013
<7016=7017
<7017=7032,7018
<7018=7031,7019
<7019=7029,7020
<7020=7021
<7021=7022
<7022=7024,7023
<7024=7026,7025
<7026=7028,7027
<7029=7030
<7033=7034
<7034=7049,7035
<7035=7048,7036
<7036=7046,7037
<7037=7038
<7038=7039
<7039=7041,7040
<7041=7043,7042
<7043=7045,7044
<7046=7047
<7050=7051
<7051=7056,7052
<7052=7054,7053
<7054=7055
<7056=7067,7057
<7057=7058
<7058=7059
<7059=7065,7060
<7060=7063,7061
<7061=7062
<7063=7064
<7065=7066
<7067=7068
<7106=7107
<7107=7111,7108
<7108=7110,7109
<7111=7113,7112
<7114=7115
<7115=7117,7116
<7118=7119
<7119=7128,7127,7120
<7120=7126,7121
<7121=7123,7122
<7123=7125,7124
<7129=7130
<7130=7139,7138,7131
<7131=7137,7132
<7132=7134,7133
<7134=7136,7135
<7140=7141
<7141=7149,7142
<7142=7144,7143
<7144=7146,7145
<7146=7148,7147
<7149=7151,7150
<7151=7153,7152
<7153=7155,7154
<7156=7157
<7158=7159
<7160=7161
<7161=7166,7165,7162
<7162=7164,7163
<7167=7168
<7168=7173,7172,7169
<7169=7171,7170
<7174=7175
<7175=7180,7179,7176
<7176=7178,7177
<7181=7182
<7182=7187,7186,7183
<7183=7185,7184
<7188=7189
<7189=7194,7193,7190
<7190=7192,7191
<7195=7196
<7196=7201,7200,7197
<7197=7199,7198
<7202=7203
<7203=7208,7207,7204
<7204=7206,7205
<7209=7210
<7210=7212,7211
<7213=7228,7214
<7214=7217,7215
<7215=7216
<7217=7218
<7218=7226,7219
<7219=7224,7222,7220
<7220=7221
<7222=7223
<7224=7225
<7226=7227
<7228=7229
<7229=7233,7230
<7230=7232,7231
<7233=7235,7234
<7236=7241,7237
<7237=7238
<7238=7240,7239
<7241=7242
<7242=7244,7243
<7245=7246
<7246=7250,7247
<7247=7248
<7248=7249
<7250=7251
<7252=7253
<7253=7257,7254
<7254=7255
<7255=7256
<7257=7258
<7259=7260
<7260=7264,7261
<7261=7262
<7262=7263
<7264=7265
<7266=7267
<7267=7271,7268
<7268=7269
<7269=7270
<7271=7272
<7273=7274
<7274=7278,7275
<7275=7276
<7276=7277
<7278=7279
<7429=7441,7440,7430
<7430=7437,7434,7431
<7431=7433,7432
<7434=7436,7435
<7437=7439,7438
<7441=8445,8438,8431,8425,8409,8397,8203,8199,7451,7444,7442
<7442=7443
<7444=7445
<7445=7449,7446
<7446=7447
<7447=7448
<7449=7450
<7451=8195,7452
<7452=8193,8191,8178,8167,8148,8137,8118,8107,8088,8077,8058,8047,7453,7454,7473,7484,7503,7514,7533,7544,7563,7574,7593,7604,7617,7619,7621,7623,7625,7627,7629,7630,7649,7660,7679,7690,7709,7720,7739,7750,7763,7765,7766,7785,7796,7817,7828,7847,7858,7877,7888,7907,7918,7931,7933,7934,7953,7964,7985,7996,8017,8028
<7454=7455
<7455=7466,7456
<7456=7464,7458,7457
<7458=7462,7459
<7459=7460
<7460=7461
<7462=7463
<7464=7465
<7466=7468,7467
<7468=7472,7469
<7469=7471,7470
<7473=7474
<7474=7483,7475
<7475=7481,7476
<7476=7479,7477
<7477=7478
<7479=7480
<7481=7482
<7484=7485
<7485=7496,7486
<7486=7494,7488,7487
<7488=7492,7489
<7489=7490
<7490=7491
<7492=7493
<7494=7495
<7496=7498,7497
<7498=7502,7499
<7499=7501,7500
<7503=7504
<7504=7513,7505
<7505=7511,7506
<7506=7509,7507
<7507=7508
<7509=7510
<7511=7512
<7514=7515
<7515=7526,7516
<7516=7524,7518,7517
<7518=7522,7519
<7519=7520
<7520=7521
<7522=7523
<7524=7525
<7526=7528,7527
<7528=7532,7529
<7529=7531,7530
<7533=7534
<7534=7543,7535
<7535=7541,7536
<7536=7539,7537
<7537=7538
<7539=7540
<7541=7542
<7544=7545
<7545=7556,7546
<7546=7554,7548,7547
<7548=7552,7549
<7549=7550
<7550=7551
<7552=7553
<7554=7555
<7556=7558,7557
<7558=7562,7559
<7559=7561,7560
<7563=7564
<7564=7573,7565
<7565=7571,7566
<7566=7569,7567
<7567=7568
<7569=7570
<7571=7572
<7574=7575
<7575=7586,7576
<7576=7584,7578,7577
<7578=7582,7579
<7579=7580
<7580=7581
<7582=7583
<7584=7585
<7586=7588,7587
<7588=7592,7589
<7589=7591,7590
<7593=7594
<7594=7603,7595
<7595=7601,7596
<7596=7599,7597
<7597=7598
<7599=7600
<7601=7602
<7604=7605
<7605=7614,7606
<7606=7612,7607
<7607=7608
<7608=7609
<7609=7611,7610
<7612=7613
<7614=7616,7615
<7617=7618
<7619=7620
<7621=7622
<7623=7624
<7625=7626
<7627=7628
<7630=7631
<7631=7642,7632
<7632=7640,7634,7633
<7634=7638,7635
<7635=7636
<7636=7637
<7638=7639
<7640=7641
<7642=7644,7643
<7644=7648,7645
<7645=7647,7646
<7649=7650
<7650=7659,7651
<7651=7657,7652
<7652=7655,7653
<7653=7654
<7655=7656
<7657=7658
<7660=7661
<7661=7672,7662
<7662=7670,7664,7663
<7664=7668,7665
<7665=7666
<7666=7667
<7668=7669
<7670=7671
<7672=7674,7673
<7674=7678,7675
<7675=7677,7676
<7679=7680
<7680=7689,7681
<7681=7687,7682
<7682=7685,7683
<7683=7684
<7685=7686
<7687=7688
<7690=7691
<7691=7702,7692
<7692=7700,7694,7693
<7694=7698,7695
<7695=7696
<7696=7697
<7698=7699
<7700=7701
<7702=7704,7703
<7704=7708,7705
<7705=7707,7706
<7709=7710
<7710=7719,7711
<7711=7717,7712
<7712=7715,7713
<7713=7714
<7715=7716
<7717=7718
<7720=7721
<7721=7732,7722
<7722=7730,7724,7723
<7724=7728,7725
<7725=7726
<7726=7727
<7728=7729
<7730=7731
<7732=7734,7733
<7734=7738,7735
<7735=7737,7736
<7739=7740
<7740=7749,7741
<7741=7747,7742
<7742=7745,7743
<7743=7744
<7745=7746
<7747=7748
<7750=7751
<7751=7760,7752
<7752=7758,7753
<7753=7754
<7754=7755
<7755=7757,7756
<7758=7759
<7760=7762,7761
<7763=7764
<7766=7767
<7767=7778,7768
<7768=7776,7770,7769
<7770=7774,7771
<7771=7772
<7772=7773
<7774=7775
<7776=7777
<7778=7780,7779
<7780=7784,7781
<7781=7783,7782
<7785=7786
<7786=7795,7787
<7787=7793,7788
<7788=7791,7789
<7789=7790
<7791=7792
<7793=7794
<7796=7797
<7797=7810,7798
<7798=7809,7799
<7799=7807,7801,7800
<7801=7805,7802
<7802=7803
<7803=7804
<7805=7806
<7807=7808
<7810=7812,7811
<7812=7816,7813
<7813=7815,7814
<7817=7818
<7818=7827,7819
<7819=7825,7820
<7820=7823,7821
<7821=7822
<7823=7824
<7825=7826
<7828=7829
<7829=7840,7830
<7830=7838,7832,7831
<7832=7836,7833
<7833=7834
<7834=7835
<7836=7837
<7838=7839
<7840=7842,7841
<7842=7846,7843
<7843=7845,7844
<7847=7848
<7848=7857,7849
<7849=7855,7850
<7850=7853,7851
<7851=7852
<7853=7854
<7855=7856
<7858=7859
<7859=7870,7860
<7860=7868,7862,7861
<7862=7866,7863
<7863=7864
<7864=7865
<7866=7867
<7868=7869
<7870=7872,7871
<7872=7876,7873
<7873=7875,7874
<7877=7878
<7878=7887,7879
<7879=7885,7880
<7880=7883,7881
<7881=7882
<7883=7884
<7885=7886
<7888=7889
<7889=7900,7890
<7890=7898,7892,7891
<7892=7896,7893
<7893=7894
<7894=7895
<7896=7897
<7898=7899
<7900=7902,7901
<7902=7906,7903
<7903=7905,7904
<7907=7908
<7908=7917,7909
<7909=7915,7910
<7910=7913,7911
<7911=7912
<7913=7914
<7915=7916
<7918=7919
<7919=7928,7920
<7920=7926,7921
<7921=7922
<7922=7923
<7923=7925,7924
<7926=7927
<7928=7930,7929
<7931=7932
<7934=7935
<7935=7946,7936
<7936=7944,7938,7937
<7938=7942,7939
<7939=7940
<7940=7941
<7942=7943
<7944=7945
<7946=7948,7947
<7948=7952,7949
<7949=7951,7950
<7953=7954
<7954=7963,7955
<7955=7961,7956
<7956=7959,7957
<7957=7958
<7959=7960
<7961=7962
<7964=7965
<7965=7978,7966
<7966=7977,7967
<7967=7975,7969,7968
<7969=7973,7970
<7970=7971
<7971=7972
<7973=7974
<7975=7976
<7978=7980,7979
<7980=7984,7981
<7981=7983,7982
<7985=7986
<7986=7995,7987
<7987=7993,7988
<7988=7991,7989
<7989=7990
<7991=7992
<7993=7994
<7996=7997
<7997=8010,7998
<7998=8009,7999
<7999=8007,8001,8000
<8001=8005,8002
<8002=8003
<8003=8004
<8005=8006
<8007=8008
<8010=8012,8011
<8012=8016,8013
<8013=8015,8014
<8017=8018
<8018=8027,8019
<8019=8025,8020
<8020=8023,8021
<8021=8022
<8023=8024
<8025=8026
<8028=8029
<8029=8040,8030
<8030=8038,8032,8031
<8032=8036,8033
<8033=8034
<8034=8035
<8036=8037
<8038=8039
<8040=8042,8041
<8042=8046,8043
<8043=8045,8044
<8047=8048
<8048=8057,8049
<8049=8055,8050
<8050=8053,8051
<8051=8052
<8053=8054
<8055=8056
<8058=8059
<8059=8070,8060
<8060=8068,8062,8061
<8062=8066,8063
<8063=8064
<8064=8065
<8066=8067
<8068=8069
<8070=8072,8071
<8072=8076,8073
<8073=8075,8074
<8077=8078
<8078=8087,8079
<8079=8085,8080
<8080=8083,8081
<8081=8082
<8083=8084
<8085=8086
<8088=8089
<8089=8100,8090
<8090=8098,8092,8091
<8092=8096,8093
<8093=8094
<8094=8095
<8096=8097
<8098=8099
<8100=8102,8101
<8102=8106,8103
<8103=8105,8104
<8107=8108
<8108=8117,8109
<8109=8115,8110
<8110=8113,8111
<8111=8112
<8113=8114
<8115=8116
<8118=8119
<8119=8130,8120
<8120=8128,8122,8121
<8122=8126,8123
<8123=8124
<8124=8125
<8126=8127
<8128=8129
<8130=8132,8131
<8132=8136,8133
<8133=8135,8134
<8137=8138
<8138=8147,8139
<8139=8145,8140
<8140=8143,8141
<8141=8142
<8143=8144
<8145=8146
<8148=8149
<8149=8160,8150
<8150=8158,8152,8151
<8152=8156,8153
<8153=8154
<8154=8155
<8156=8157
<8158=8159
<8160=8162,8161
<8162=8166,8163
<8163=8165,8164
<8167=8168
<8168=8177,8169
<8169=8175,8170
<8170=8173,8171
<8171=8172
<8173=8174
<8175=8176
<8178=8179
<8179=8188,8180
<8180=8186,8181
<8181=8182
<8182=8183
<8183=8185,8184
<8186=8187
<8188=8190,8189
<8191=8192
<8193=8194
<8195=8196
<8196=8198,8197
<8199=8200
<8200=8202,8201
<8203=8386,8380,8204
<8204=8205
<8205=8369,8363,8206
<8206=8207
<8207=8352,8346,8208
<8208=8209
<8209=8335,8329,8210
<8210=8211
<8211=8318,8312,8212
<8212=8213
<8213=8301,8295,8214
<8214=8215
<8215=8284,8278,8216
<8216=8217
<8217=8267,8261,8218
<8218=8219
<8219=8250,8244,8220
<8220=8221
<8221=8231,8224,8222
<8222=8223
<8224=8225
<8225=8229,8226
<8226=8227
<8227=8228
<8229=8230
<8231=8232
<8232=8242,8233
<8233=8240,8238,8234
<8234=8235
<8235=8237,8236
<8238=8239
<8240=8241
<8242=8243
<8244=8245
<8245=8247,8246
<8247=8249,8248
<8250=8251
<8251=8259,8252
<8252=8255,8253
<8253=8254
<8255=8256
<8256=8258,8257
<8259=8260
<8261=8262
<8262=8264,8263
<8264=8266,8265
<8267=8268
<8268=8276,8269
<8269=8272,8270
<8270=8271
<8272=8273
<8273=8275,8274
<8276=8277
<8278=8279
<8279=8281,8280
<8281=8283,8282
<8284=8285
<8285=8293,8286
<8286=8289,8287
<8287=8288
<8289=8290
<8290=8292,8291
<8293=8294
<8295=8296
<8296=8298,8297
<8298=8300,8299
<8301=8302
<8302=8310,8303
<8303=8306,8304
<8304=8305
<8306=8307
<8307=8309,8308
<8310=8311
<8312=8313
<8313=8315,8314
<8315=8317,8316
<8318=8319
<8319=8327,8320
<8320=8323,8321
<8321=8322
<8323=8324
<8324=8326,8325
<8327=8328
<8329=8330
<8330=8332,8331
<8332=8334,8333
<8335=8336
<8336=8344,8337
<8337=8340,8338
<8338=8339
<8340=8341
<8341=8343,8342
<8344=8345
<8346=8347
<8347=8349,8348
<8349=8351,8350
<8352=8353
<8353=8361,8354
<8354=8357,8355
<8355=8356
<8357=8358
<8358=8360,8359
<8361=8362
<8363=8364
<8364=8366,8365
<8366=8368,8367
<8369=8370
<8370=8378,8371
<8371=8374,8372
<8372=8373
<8374=8375
<8375=8377,8376
<8378=8379
<8380=8381
<8381=8383,8382
<8383=8385,8384
<8386=8387
<8387=8395,8388
<8388=8391,8389
<8389=8390
<8391=8392
<8392=8394,8393
<8395=8396
<8397=8400,8398
<8398=8399
<8400=8401
<8401=8403,8402
<8403=8407,8404
<8404=8405
<8405=8406
<8407=8408
<8409=8410
<8410=8424,8423,8411
<8411=8422,8412
<8412=8420,8413
<8413=8418,8416,8414
<8414=8415
<8416=8417
<8418=8419
<8420=8421
<8425=8426
<8426=8428,8427
<8428=8430,8429
<8431=8432
<8432=8436,8433
<8433=8434
<8434=8435
<8436=8437
<8438=8439
<8439=8443,8440
<8440=8441
<8441=8442
<8443=8444
<8445=8446
<8446=8450,8447
<8447=8448
<8448=8449
<8450=8451
