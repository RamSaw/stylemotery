>3	FunctionDef	MpegAudioDetector 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	CallExpression	resetFormatDetails ( )
>8	ArgumentList	 
>9	Callee	resetFormatDetails
>10	Identifier	resetFormatDetails
>14	FunctionDef	MpegAudioDetector 
>15	ParameterList	 
>16	CompoundStatement	 
>20	FunctionDef	MpegAudioDetector 
>21	ParameterList	const char * b , int length
>22	Parameter	 
>23	Identifier	length
>24	ParameterType	int
>25	Parameter	 
>26	Identifier	b
>27	ParameterType	const char *
>28	ReturnType	int
>29	CompoundStatement	 
>30	ReturnStatement	 
>31	Identifier	rval
>32	IfStatement	if ( length > 3 )
>33	CompoundStatement	 
>34	IfStatement	if ( header != NULL )
>35	CompoundStatement	 
>36	IfStatement	if ( mFrameParser . getLastOffset ( ) > 0 )
>37	ElseStatement	else
>38	CompoundStatement	 
>39	IfStatement	if ( header -> isCrcEnabled ( ) )
>40	ElseStatement	else
>41	CompoundStatement	 
>42	ExpressionStatement	 
>43	CallExpression	recordHeaderInfo ( header )
>44	ArgumentList	header
>45	Argument	header
>46	Identifier	header
>47	Callee	recordHeaderInfo
>48	Identifier	recordHeaderInfo
>49	CompoundStatement	 
>50	IfStatement	if ( ( 6 + audioDataAmount ) <= length )
>51	ElseStatement	else
>52	CompoundStatement	 
>53	ExpressionStatement	 
>54	CallExpression	setSkipBytes ( 0 )
>55	ArgumentList	0
>56	Argument	0
>57	PrimaryExpression	0
>58	Callee	setSkipBytes
>59	Identifier	setSkipBytes
>60	ExpressionStatement	 
>61	AssignmentExpr	rval = 0
>62	PrimaryExpression	0
>63	Identifier	rval
>64	CompoundStatement	 
>65	IfStatement	if ( calcCrc != existingCrc )
>66	CompoundStatement	 
>67	ExpressionStatement	 
>68	UnaryExpression	++ mFrameCrcErrors
>69	Identifier	mFrameCrcErrors
>70	IncDec	++
>71	Condition	 
>72	EqualityExpression	calcCrc != existingCrc
>73	Identifier	existingCrc
>74	Identifier	calcCrc
>75	IdentifierDeclStatement	 
>76	IdentifierDecl	existingCrc = ( b0 << 8 ) | b1
>77	AssignmentExpr	existingCrc = ( b0 << 8 ) | b1
>78	InclusiveOrExpression	( b0 << 8 ) | b1
>79	Identifier	b1
>80	ShiftExpression	b0 << 8
>81	PrimaryExpression	8
>82	Identifier	b0
>83	Identifier	existingCrc
>84	Identifier	existingCrc
>85	IdentifierDeclType	int
>86	IdentifierDeclStatement	 
>87	IdentifierDecl	b1 = ub [ 5 ]
>88	AssignmentExpr	b1 = ub [ 5 ]
>89	ArrayIndexing	ub [ 5 ]
>90	PrimaryExpression	5
>91	Identifier	ub
>92	Identifier	b1
>93	Identifier	b1
>94	IdentifierDeclType	unsigned int
>95	IdentifierDeclStatement	 
>96	IdentifierDecl	b0 = ub [ 4 ]
>97	AssignmentExpr	b0 = ub [ 4 ]
>98	ArrayIndexing	ub [ 4 ]
>99	PrimaryExpression	4
>100	Identifier	ub
>101	Identifier	b0
>102	Identifier	b0
>103	IdentifierDeclType	unsigned int
>104	IdentifierDeclStatement	 
>105	IdentifierDecl	* ub = ( const unsigned char * ) b
>106	AssignmentExpr	* ub = ( const unsigned char * ) b
>107	CastExpression	( const unsigned char * ) b
>108	Identifier	b
>109	CastTarget	const unsigned char *
>110	Identifier	ub
>111	Identifier	ub
>112	IdentifierDeclType	const unsigned char *
>113	IdentifierDeclStatement	 
>114	IdentifierDecl	calcCrc = mCrc16 . calculateCrc ( header , b + audioDataOffset )
>115	AssignmentExpr	calcCrc = mCrc16 . calculateCrc ( header , b + audioDataOffset )
>116	CallExpression	mCrc16 . calculateCrc ( header , b + audioDataOffset )
>117	ArgumentList	header
>118	Argument	b + audioDataOffset
>119	AdditiveExpression	b + audioDataOffset
>120	Identifier	audioDataOffset
>121	Identifier	b
>122	Argument	header
>123	Identifier	header
>124	Callee	mCrc16 . calculateCrc
>125	MemberAccess	mCrc16 . calculateCrc
>126	Identifier	calculateCrc
>127	Identifier	mCrc16
>128	Identifier	calcCrc
>129	Identifier	calcCrc
>130	IdentifierDeclType	int
>131	ExpressionStatement	 
>132	CallExpression	recordHeaderInfo ( header )
>133	ArgumentList	header
>134	Argument	header
>135	Identifier	header
>136	Callee	recordHeaderInfo
>137	Identifier	recordHeaderInfo
>138	Condition	 
>139	RelationalExpression	( 6 + audioDataAmount ) <= length
>140	Identifier	length
>141	AdditiveExpression	6 + audioDataAmount
>142	Identifier	audioDataAmount
>143	PrimaryExpression	6
>144	IdentifierDeclStatement	 
>145	IdentifierDecl	audioDataOffset = 6
>146	AssignmentExpr	audioDataOffset = 6
>147	PrimaryExpression	6
>148	Identifier	audioDataOffset
>149	Identifier	audioDataOffset
>150	IdentifierDeclType	int
>151	IdentifierDeclStatement	 
>152	IdentifierDecl	audioDataAmount = mCrc16 . getAudioDataAmount ( header )
>153	AssignmentExpr	audioDataAmount = mCrc16 . getAudioDataAmount ( header )
>154	CallExpression	mCrc16 . getAudioDataAmount ( header )
>155	ArgumentList	header
>156	Argument	header
>157	Identifier	header
>158	Callee	mCrc16 . getAudioDataAmount
>159	MemberAccess	mCrc16 . getAudioDataAmount
>160	Identifier	getAudioDataAmount
>161	Identifier	mCrc16
>162	Identifier	audioDataAmount
>163	Identifier	audioDataAmount
>164	IdentifierDeclType	int
>165	Condition	 
>166	CallExpression	header -> isCrcEnabled ( )
>167	ArgumentList	 
>168	Callee	header -> isCrcEnabled
>169	PtrMemberAccess	header -> isCrcEnabled
>170	Identifier	isCrcEnabled
>171	Identifier	header
>172	IfStatement	if ( rval > length )
>173	CompoundStatement	 
>174	ExpressionStatement	 
>175	AssignmentExpr	rval = length
>176	Identifier	length
>177	Identifier	rval
>178	ExpressionStatement	 
>179	CallExpression	setSkipBytes ( rval - length )
>180	ArgumentList	rval - length
>181	Argument	rval - length
>182	AdditiveExpression	rval - length
>183	Identifier	length
>184	Identifier	rval
>185	Callee	setSkipBytes
>186	Identifier	setSkipBytes
>187	Condition	 
>188	RelationalExpression	rval > length
>189	Identifier	length
>190	Identifier	rval
>191	ExpressionStatement	 
>192	AssignmentExpr	rval = frameLength
>193	Identifier	frameLength
>194	Identifier	rval
>195	IdentifierDeclStatement	 
>196	IdentifierDecl	frameLength = header -> getFrameLength ( )
>197	AssignmentExpr	frameLength = header -> getFrameLength ( )
>198	CallExpression	header -> getFrameLength ( )
>199	ArgumentList	 
>200	Callee	header -> getFrameLength
>201	PtrMemberAccess	header -> getFrameLength
>202	Identifier	getFrameLength
>203	Identifier	header
>204	Identifier	frameLength
>205	Identifier	frameLength
>206	IdentifierDeclType	int
>207	CompoundStatement	 
>208	IfStatement	if ( mFalsePositives < MAX_FALSE_POSITIVES )
>209	ElseStatement	else
>210	IfStatement	if ( ! isFormatRecognized ( ) )
>211	CompoundStatement	 
>212	ExpressionStatement	 
>213	CallExpression	setFormatRecognized ( false )
>214	ArgumentList	false
>215	Argument	false
>216	Identifier	false
>217	Callee	setFormatRecognized
>218	Identifier	setFormatRecognized
>219	Condition	 
>220	UnaryOp	! isFormatRecognized ( )
>221	CallExpression	isFormatRecognized ( )
>222	ArgumentList	 
>223	Callee	isFormatRecognized
>224	Identifier	isFormatRecognized
>225	UnaryOperator	!
>226	CompoundStatement	 
>227	ExpressionStatement	 
>228	AssignmentExpr	rval = mFrameParser . getLastOffset ( )
>229	CallExpression	mFrameParser . getLastOffset ( )
>230	ArgumentList	 
>231	Callee	mFrameParser . getLastOffset
>232	MemberAccess	mFrameParser . getLastOffset
>233	Identifier	getLastOffset
>234	Identifier	mFrameParser
>235	Identifier	rval
>236	Condition	 
>237	RelationalExpression	mFalsePositives < MAX_FALSE_POSITIVES
>238	Identifier	MAX_FALSE_POSITIVES
>239	Identifier	mFalsePositives
>240	IfStatement	if ( getFramesDetected ( ) == 1 )
>241	ElseStatement	else
>242	IfStatement	if ( getFramesDetected ( ) == 2 )
>243	CompoundStatement	 
>244	IfStatement	if ( ! isFormatRecognized ( ) )
>245	CompoundStatement	 
>246	ExpressionStatement	 
>247	CallExpression	setFormatRecognized ( false )
>248	ArgumentList	false
>249	Argument	false
>250	Identifier	false
>251	Callee	setFormatRecognized
>252	Identifier	setFormatRecognized
>253	Condition	 
>254	UnaryOp	! isFormatRecognized ( )
>255	CallExpression	isFormatRecognized ( )
>256	ArgumentList	 
>257	Callee	isFormatRecognized
>258	Identifier	isFormatRecognized
>259	UnaryOperator	!
>260	Condition	 
>261	EqualityExpression	getFramesDetected ( ) == 2
>262	PrimaryExpression	2
>263	CallExpression	getFramesDetected ( )
>264	ArgumentList	 
>265	Callee	getFramesDetected
>266	Identifier	getFramesDetected
>267	CompoundStatement	 
>268	ExpressionStatement	 
>269	UnaryExpression	++ mFalsePositives
>270	Identifier	mFalsePositives
>271	IncDec	++
>272	ExpressionStatement	 
>273	CallExpression	resetFormatDetails ( )
>274	ArgumentList	 
>275	Callee	resetFormatDetails
>276	Identifier	resetFormatDetails
>277	Condition	 
>278	EqualityExpression	getFramesDetected ( ) == 1
>279	PrimaryExpression	1
>280	CallExpression	getFramesDetected ( )
>281	ArgumentList	 
>282	Callee	getFramesDetected
>283	Identifier	getFramesDetected
>284	Condition	 
>285	RelationalExpression	mFrameParser . getLastOffset ( ) > 0
>286	PrimaryExpression	0
>287	CallExpression	mFrameParser . getLastOffset ( )
>288	ArgumentList	 
>289	Callee	mFrameParser . getLastOffset
>290	MemberAccess	mFrameParser . getLastOffset
>291	Identifier	getLastOffset
>292	Identifier	mFrameParser
>293	Condition	 
>294	EqualityExpression	header != NULL
>295	Identifier	NULL
>296	Identifier	header
>297	IdentifierDeclStatement	 
>298	IdentifierDecl	* header = mFrameParser . getLastHeader ( )
>299	AssignmentExpr	* header = mFrameParser . getLastHeader ( )
>300	CallExpression	mFrameParser . getLastHeader ( )
>301	ArgumentList	 
>302	Callee	mFrameParser . getLastHeader
>303	MemberAccess	mFrameParser . getLastHeader
>304	Identifier	getLastHeader
>305	Identifier	mFrameParser
>306	Identifier	header
>307	Identifier	header
>308	IdentifierDeclType	AudioFrameHeader *
>309	ExpressionStatement	 
>310	CallExpression	mFrameParser . findFrame ( b , length )
>311	ArgumentList	b
>312	Argument	length
>313	Identifier	length
>314	Argument	b
>315	Identifier	b
>316	Callee	mFrameParser . findFrame
>317	MemberAccess	mFrameParser . findFrame
>318	Identifier	findFrame
>319	Identifier	mFrameParser
>320	ExpressionStatement	 
>321	AssignmentExpr	rval = length
>322	Identifier	length
>323	Identifier	rval
>324	Condition	 
>325	RelationalExpression	length > 3
>326	PrimaryExpression	3
>327	Identifier	length
>328	IdentifierDeclStatement	 
>329	IdentifierDecl	rval = 0
>330	AssignmentExpr	rval = 0
>331	PrimaryExpression	0
>332	Identifier	rval
>333	Identifier	rval
>334	IdentifierDeclType	int
>366	FunctionDef	MpegAudioDetector 
>367	ParameterList	 
>368	ReturnType	DynamicObject
>369	CompoundStatement	 
>370	ReturnStatement	 
>371	Identifier	formatDetails
>372	IfStatement	if ( ! isFormatRecognized ( ) )
>373	ElseStatement	else
>374	CompoundStatement	 
>375	ExpressionStatement	 
>376	AssignmentExpr	formatDetails [ \"layer3Frames\" ] = getFramesDetected ( AudioLayer 
>377	CallExpression	getFramesDetected ( AudioLayer 
>378	ArgumentList	AudioLayer 
>379	Argument	AudioLayer 
>380	Identifier	AudioLayer 
>381	Callee	getFramesDetected
>382	Identifier	getFramesDetected
>383	ArrayIndexing	formatDetails [ \"layer3Frames\" ]
>384	PrimaryExpression	\"layer3Frames\"
>385	Identifier	formatDetails
>386	ExpressionStatement	 
>387	AssignmentExpr	formatDetails [ \"layer2Frames\" ] = getFramesDetected ( AudioLayer 
>388	CallExpression	getFramesDetected ( AudioLayer 
>389	ArgumentList	AudioLayer 
>390	Argument	AudioLayer 
>391	Identifier	AudioLayer 
>392	Callee	getFramesDetected
>393	Identifier	getFramesDetected
>394	ArrayIndexing	formatDetails [ \"layer2Frames\" ]
>395	PrimaryExpression	\"layer2Frames\"
>396	Identifier	formatDetails
>397	ExpressionStatement	 
>398	AssignmentExpr	formatDetails [ \"layer1Frames\" ] = getFramesDetected ( AudioLayer 
>399	CallExpression	getFramesDetected ( AudioLayer 
>400	ArgumentList	AudioLayer 
>401	Argument	AudioLayer 
>402	Identifier	AudioLayer 
>403	Callee	getFramesDetected
>404	Identifier	getFramesDetected
>405	ArrayIndexing	formatDetails [ \"layer1Frames\" ]
>406	PrimaryExpression	\"layer1Frames\"
>407	Identifier	formatDetails
>408	ExpressionStatement	 
>409	AssignmentExpr	formatDetails [ \"mpeg25Frames\" ] = getFramesDetected ( AudioVersion 
>410	CallExpression	getFramesDetected ( AudioVersion 
>411	ArgumentList	AudioVersion 
>412	Argument	AudioVersion 
>413	Identifier	AudioVersion 
>414	Callee	getFramesDetected
>415	Identifier	getFramesDetected
>416	ArrayIndexing	formatDetails [ \"mpeg25Frames\" ]
>417	PrimaryExpression	\"mpeg25Frames\"
>418	Identifier	formatDetails
>419	ExpressionStatement	 
>420	AssignmentExpr	formatDetails [ \"mpeg2Frames\" ] = getFramesDetected ( AudioVersion 
>421	CallExpression	getFramesDetected ( AudioVersion 
>422	ArgumentList	AudioVersion 
>423	Argument	AudioVersion 
>424	Identifier	AudioVersion 
>425	Callee	getFramesDetected
>426	Identifier	getFramesDetected
>427	ArrayIndexing	formatDetails [ \"mpeg2Frames\" ]
>428	PrimaryExpression	\"mpeg2Frames\"
>429	Identifier	formatDetails
>430	ExpressionStatement	 
>431	AssignmentExpr	formatDetails [ \"mpeg1Frames\" ] = getFramesDetected ( AudioVersion 
>432	CallExpression	getFramesDetected ( AudioVersion 
>433	ArgumentList	AudioVersion 
>434	Argument	AudioVersion 
>435	Identifier	AudioVersion 
>436	Callee	getFramesDetected
>437	Identifier	getFramesDetected
>438	ArrayIndexing	formatDetails [ \"mpeg1Frames\" ]
>439	PrimaryExpression	\"mpeg1Frames\"
>440	Identifier	formatDetails
>441	ExpressionStatement	 
>442	AssignmentExpr	formatDetails [ \"mpegAudioPercentage\" ] = mpegPercent
>443	Identifier	mpegPercent
>444	ArrayIndexing	formatDetails [ \"mpegAudioPercentage\" ]
>445	PrimaryExpression	\"mpegAudioPercentage\"
>446	Identifier	formatDetails
>447	ExpressionStatement	 
>448	AssignmentExpr	formatDetails [ \"variableBitrate\" ] = isVariableBitrate ( )
>449	CallExpression	isVariableBitrate ( )
>450	ArgumentList	 
>451	Callee	isVariableBitrate
>452	Identifier	isVariableBitrate
>453	ArrayIndexing	formatDetails [ \"variableBitrate\" ]
>454	PrimaryExpression	\"variableBitrate\"
>455	Identifier	formatDetails
>456	ExpressionStatement	 
>457	AssignmentExpr	formatDetails [ \"averageBitrate\" ] = getAverageBitrate ( )
>458	CallExpression	getAverageBitrate ( )
>459	ArgumentList	 
>460	Callee	getAverageBitrate
>461	Identifier	getAverageBitrate
>462	ArrayIndexing	formatDetails [ \"averageBitrate\" ]
>463	PrimaryExpression	\"averageBitrate\"
>464	Identifier	formatDetails
>465	ExpressionStatement	 
>466	AssignmentExpr	formatDetails [ \"totalBytesInspected\" ] = getBytesInspected ( )
>467	CallExpression	getBytesInspected ( )
>468	ArgumentList	 
>469	Callee	getBytesInspected
>470	Identifier	getBytesInspected
>471	ArrayIndexing	formatDetails [ \"totalBytesInspected\" ]
>472	PrimaryExpression	\"totalBytesInspected\"
>473	Identifier	formatDetails
>474	ExpressionStatement	 
>475	AssignmentExpr	formatDetails [ \"exactMpegAudioTime\" ] = getAudioTime ( )
>476	CallExpression	getAudioTime ( )
>477	ArgumentList	 
>478	Callee	getAudioTime
>479	Identifier	getAudioTime
>480	ArrayIndexing	formatDetails [ \"exactMpegAudioTime\" ]
>481	PrimaryExpression	\"exactMpegAudioTime\"
>482	Identifier	formatDetails
>483	ExpressionStatement	 
>484	AssignmentExpr	formatDetails [ \"totalAudioTime\" ] = audioTime
>485	Identifier	audioTime
>486	ArrayIndexing	formatDetails [ \"totalAudioTime\" ]
>487	PrimaryExpression	\"totalAudioTime\"
>488	Identifier	formatDetails
>489	ExpressionStatement	 
>490	AssignmentExpr	formatDetails [ \"totalMpegAudioSize\" ] = getTotalMpegAudioSize ( )
>491	CallExpression	getTotalMpegAudioSize ( )
>492	ArgumentList	 
>493	Callee	getTotalMpegAudioSize
>494	Identifier	getTotalMpegAudioSize
>495	ArrayIndexing	formatDetails [ \"totalMpegAudioSize\" ]
>496	PrimaryExpression	\"totalMpegAudioSize\"
>497	Identifier	formatDetails
>498	ExpressionStatement	 
>499	AssignmentExpr	formatDetails [ \"frameCrcErrors\" ] = getFrameCrcErrors ( )
>500	CallExpression	getFrameCrcErrors ( )
>501	ArgumentList	 
>502	Callee	getFrameCrcErrors
>503	Identifier	getFrameCrcErrors
>504	ArrayIndexing	formatDetails [ \"frameCrcErrors\" ]
>505	PrimaryExpression	\"frameCrcErrors\"
>506	Identifier	formatDetails
>507	ExpressionStatement	 
>508	AssignmentExpr	formatDetails [ \"framesDetected\" ] = getFramesDetected ( )
>509	CallExpression	getFramesDetected ( )
>510	ArgumentList	 
>511	Callee	getFramesDetected
>512	Identifier	getFramesDetected
>513	ArrayIndexing	formatDetails [ \"framesDetected\" ]
>514	PrimaryExpression	\"framesDetected\"
>515	Identifier	formatDetails
>516	ExpressionStatement	 
>517	CallExpression	snprintf ( audioTime , 20 , \"%.2f\" , getAudioTime ( ) )
>518	ArgumentList	audioTime
>519	Argument	getAudioTime ( )
>520	CallExpression	getAudioTime ( )
>521	ArgumentList	 
>522	Callee	getAudioTime
>523	Identifier	getAudioTime
>524	Argument	\"%.2f\"
>525	PrimaryExpression	\"%.2f\"
>526	Argument	20
>527	PrimaryExpression	20
>528	Argument	audioTime
>529	Identifier	audioTime
>530	Callee	snprintf
>531	Identifier	snprintf
>532	IdentifierDeclStatement	 
>533	IdentifierDecl	audioTime [ 20 ]
>534	PrimaryExpression	20
>535	Identifier	audioTime
>536	IdentifierDeclType	char [ 20 ]
>537	ExpressionStatement	 
>538	CallExpression	snprintf ( mpegPercent , 20 , \"%.2f\" , mpegPercentage )
>539	ArgumentList	mpegPercent
>540	Argument	mpegPercentage
>541	Identifier	mpegPercentage
>542	Argument	\"%.2f\"
>543	PrimaryExpression	\"%.2f\"
>544	Argument	20
>545	PrimaryExpression	20
>546	Argument	mpegPercent
>547	Identifier	mpegPercent
>548	Callee	snprintf
>549	Identifier	snprintf
>550	IdentifierDeclStatement	 
>551	IdentifierDecl	mpegPercent [ 20 ]
>552	PrimaryExpression	20
>553	Identifier	mpegPercent
>554	IdentifierDeclType	char [ 20 ]
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	mpegPercentage = ( mpegSize / getBytesInspected ( ) ) * 100
>557	AssignmentExpr	mpegPercentage = ( mpegSize / getBytesInspected ( ) ) * 100
>558	MultiplicativeExpression	( mpegSize / getBytesInspected ( ) ) * 100
>559	PrimaryExpression	100
>560	MultiplicativeExpression	mpegSize / getBytesInspected ( )
>561	CallExpression	getBytesInspected ( )
>562	ArgumentList	 
>563	Callee	getBytesInspected
>564	Identifier	getBytesInspected
>565	Identifier	mpegSize
>566	Identifier	mpegPercentage
>567	Identifier	mpegPercentage
>568	IdentifierDeclType	double
>569	IdentifierDeclStatement	 
>570	IdentifierDecl	mpegSize = getTotalMpegAudioSize ( )
>571	AssignmentExpr	mpegSize = getTotalMpegAudioSize ( )
>572	CallExpression	getTotalMpegAudioSize ( )
>573	ArgumentList	 
>574	Callee	getTotalMpegAudioSize
>575	Identifier	getTotalMpegAudioSize
>576	Identifier	mpegSize
>577	Identifier	mpegSize
>578	IdentifierDeclType	double
>579	ExpressionStatement	 
>580	AssignmentExpr	formatDetails [ \"contentType\" ] = \"audio/mpeg\"
>581	PrimaryExpression	\"audio/mpeg\"
>582	ArrayIndexing	formatDetails [ \"contentType\" ]
>583	PrimaryExpression	\"contentType\"
>584	Identifier	formatDetails
>585	ExpressionStatement	 
>586	AssignmentExpr	formatDetails [ \"inspectorType\" ] = DataFormatInspector 
>587	Identifier	DataFormatInspector 
>588	ArrayIndexing	formatDetails [ \"inspectorType\" ]
>589	PrimaryExpression	\"inspectorType\"
>590	Identifier	formatDetails
>591	CompoundStatement	 
>592	ExpressionStatement	 
>593	AssignmentExpr	formatDetails [ \"contentType\" ] = \"application/octet-stream\"
>594	PrimaryExpression	\"application/octet-stream\"
>595	ArrayIndexing	formatDetails [ \"contentType\" ]
>596	PrimaryExpression	\"contentType\"
>597	Identifier	formatDetails
>598	ExpressionStatement	 
>599	AssignmentExpr	formatDetails [ \"inspectorType\" ] = DataFormatInspector 
>600	Identifier	DataFormatInspector 
>601	ArrayIndexing	formatDetails [ \"inspectorType\" ]
>602	PrimaryExpression	\"inspectorType\"
>603	Identifier	formatDetails
>604	Condition	 
>605	UnaryOp	! isFormatRecognized ( )
>606	CallExpression	isFormatRecognized ( )
>607	ArgumentList	 
>608	Callee	isFormatRecognized
>609	Identifier	isFormatRecognized
>610	UnaryOperator	!
>611	ExpressionStatement	 
>612	AssignmentExpr	formatDetails [ \"inspectorName\" ] = \"bitmunk.data.MpegAudioDetector\"
>613	PrimaryExpression	\"bitmunk.data.MpegAudioDetector\"
>614	ArrayIndexing	formatDetails [ \"inspectorName\" ]
>615	PrimaryExpression	\"inspectorName\"
>616	Identifier	formatDetails
>617	IdentifierDeclStatement	 
>618	IdentifierDecl	formatDetails
>619	Identifier	formatDetails
>620	IdentifierDeclType	DynamicObject
>646	FunctionDef	MpegAudioDetector 
>647	ParameterList	 
>648	ReturnType	unsigned int
>649	CompoundStatement	 
>650	ReturnStatement	 
>651	Identifier	mFramesDetected
>656	FunctionDef	MpegAudioDetector 
>657	ParameterList	AudioVersion 
>658	Parameter	 
>659	Identifier	version
>660	ParameterType	AudioVersion 
>661	ReturnType	unsigned int
>662	CompoundStatement	 
>663	ReturnStatement	 
>664	ArrayIndexing	mVersionMap [ version ]
>665	Identifier	version
>666	Identifier	mVersionMap
>674	FunctionDef	MpegAudioDetector 
>675	ParameterList	AudioLayer 
>676	Parameter	 
>677	Identifier	layer
>678	ParameterType	AudioLayer 
>679	ReturnType	unsigned int
>680	CompoundStatement	 
>681	ReturnStatement	 
>682	ArrayIndexing	mLayerMap [ layer ]
>683	Identifier	layer
>684	Identifier	mLayerMap
>692	FunctionDef	MpegAudioDetector 
>693	ParameterList	 
>694	ReturnType	unsigned int
>695	CompoundStatement	 
>696	ReturnStatement	 
>697	Identifier	mFrameCrcErrors
>702	FunctionDef	MpegAudioDetector 
>703	ParameterList	 
>704	ReturnType	uint64_t
>705	CompoundStatement	 
>706	ReturnStatement	 
>707	Identifier	mTotalMpegAudioSize
>712	FunctionDef	MpegAudioDetector 
>713	ParameterList	 
>714	ReturnType	unsigned int
>715	CompoundStatement	 
>716	ReturnStatement	 
>717	Identifier	rval
>718	IfStatement	if ( rval <= 0 )
>719	CompoundStatement	 
>720	ExpressionStatement	 
>721	AssignmentExpr	rval = mHighBitrate
>722	Identifier	mHighBitrate
>723	Identifier	rval
>724	Condition	 
>725	RelationalExpression	rval <= 0
>726	PrimaryExpression	0
>727	Identifier	rval
>728	IfStatement	if ( getFramesDetected ( ) > 0 )
>729	CompoundStatement	 
>730	ExpressionStatement	 
>731	AssignmentExpr	rval = ( int ) round ( ( ( double ) mSummedBitrates ) / getFramesDetected ( ) )
>732	CastExpression	( int ) round ( ( ( double ) mSummedBitrates ) / getFramesDetected ( ) )
>733	CallExpression	round ( ( ( double ) mSummedBitrates ) / getFramesDetected ( ) )
>734	ArgumentList	( ( double ) mSummedBitrates ) / getFramesDetected ( )
>735	Argument	( ( double ) mSummedBitrates ) / getFramesDetected ( )
>736	MultiplicativeExpression	( ( double ) mSummedBitrates ) / getFramesDetected ( )
>737	CallExpression	getFramesDetected ( )
>738	ArgumentList	 
>739	Callee	getFramesDetected
>740	Identifier	getFramesDetected
>741	CastExpression	( double ) mSummedBitrates
>742	Identifier	mSummedBitrates
>743	CastTarget	double
>744	Callee	round
>745	Identifier	round
>746	CastTarget	int
>747	Identifier	rval
>748	Condition	 
>749	RelationalExpression	getFramesDetected ( ) > 0
>750	PrimaryExpression	0
>751	CallExpression	getFramesDetected ( )
>752	ArgumentList	 
>753	Callee	getFramesDetected
>754	Identifier	getFramesDetected
>755	IdentifierDeclStatement	 
>756	IdentifierDecl	rval = 0
>757	AssignmentExpr	rval = 0
>758	PrimaryExpression	0
>759	Identifier	rval
>760	Identifier	rval
>761	IdentifierDeclType	unsigned int
>770	FunctionDef	MpegAudioDetector 
>771	ParameterList	 
>772	ReturnType	double
>773	CompoundStatement	 
>774	ReturnStatement	 
>775	Identifier	mAudioTime
>780	FunctionDef	MpegAudioDetector 
>781	ParameterList	 
>782	ReturnType	bool
>783	CompoundStatement	 
>784	ReturnStatement	 
>785	EqualityExpression	mLowBitrate != mHighBitrate
>786	Identifier	mHighBitrate
>787	Identifier	mLowBitrate
>793	FunctionDef	MpegAudioDetector 
>794	ParameterList	 
>795	ReturnType	void
>796	CompoundStatement	 
>797	ExpressionStatement	 
>798	AssignmentExpr	mAudioTime = 0.0
>799	PrimaryExpression	0.0
>800	Identifier	mAudioTime
>801	ExpressionStatement	 
>802	AssignmentExpr	mSummedBitrates = 0
>803	PrimaryExpression	0
>804	Identifier	mSummedBitrates
>805	ExpressionStatement	 
>806	AssignmentExpr	mLowBitrate = 0
>807	PrimaryExpression	0
>808	Identifier	mLowBitrate
>809	ExpressionStatement	 
>810	AssignmentExpr	mHighBitrate = 0
>811	PrimaryExpression	0
>812	Identifier	mHighBitrate
>813	ExpressionStatement	 
>814	AssignmentExpr	mLayerMap [ AudioLayer 
>815	PrimaryExpression	0
>816	ArrayIndexing	mLayerMap [ AudioLayer 
>817	Identifier	AudioLayer 
>818	Identifier	mLayerMap
>819	ExpressionStatement	 
>820	AssignmentExpr	mLayerMap [ AudioLayer 
>821	PrimaryExpression	0
>822	ArrayIndexing	mLayerMap [ AudioLayer 
>823	Identifier	AudioLayer 
>824	Identifier	mLayerMap
>825	ExpressionStatement	 
>826	AssignmentExpr	mLayerMap [ AudioLayer 
>827	PrimaryExpression	0
>828	ArrayIndexing	mLayerMap [ AudioLayer 
>829	Identifier	AudioLayer 
>830	Identifier	mLayerMap
>831	ExpressionStatement	 
>832	AssignmentExpr	mVersionMap [ AudioVersion 
>833	PrimaryExpression	0
>834	ArrayIndexing	mVersionMap [ AudioVersion 
>835	Identifier	AudioVersion 
>836	Identifier	mVersionMap
>837	ExpressionStatement	 
>838	AssignmentExpr	mVersionMap [ AudioVersion 
>839	PrimaryExpression	0
>840	ArrayIndexing	mVersionMap [ AudioVersion 
>841	Identifier	AudioVersion 
>842	Identifier	mVersionMap
>843	ExpressionStatement	 
>844	AssignmentExpr	mVersionMap [ AudioVersion 
>845	PrimaryExpression	0
>846	ArrayIndexing	mVersionMap [ AudioVersion 
>847	Identifier	AudioVersion 
>848	Identifier	mVersionMap
>849	ExpressionStatement	 
>850	AssignmentExpr	mTotalMpegAudioSize = 0
>851	PrimaryExpression	0
>852	Identifier	mTotalMpegAudioSize
>853	ExpressionStatement	 
>854	AssignmentExpr	mFrameCrcErrors = 0
>855	PrimaryExpression	0
>856	Identifier	mFrameCrcErrors
>857	ExpressionStatement	 
>858	AssignmentExpr	mFramesDetected = 0
>859	PrimaryExpression	0
>860	Identifier	mFramesDetected
>887	FunctionDef	MpegAudioDetector 
>888	ParameterList	AudioFrameHeader * header
>889	Parameter	 
>890	Identifier	header
>891	ParameterType	AudioFrameHeader *
>892	ReturnType	void
>893	CompoundStatement	 
>894	IfStatement	if ( ! isDataSatisfied ( ) && getFramesDetected ( ) > 10 )
>895	CompoundStatement	 
>896	ExpressionStatement	 
>897	CallExpression	setFormatRecognized ( true )
>898	ArgumentList	true
>899	Argument	true
>900	Identifier	true
>901	Callee	setFormatRecognized
>902	Identifier	setFormatRecognized
>903	Condition	 
>904	AndExpression	! isDataSatisfied ( ) && getFramesDetected ( ) > 10
>905	RelationalExpression	getFramesDetected ( ) > 10
>906	PrimaryExpression	10
>907	CallExpression	getFramesDetected ( )
>908	ArgumentList	 
>909	Callee	getFramesDetected
>910	Identifier	getFramesDetected
>911	UnaryOp	! isDataSatisfied ( )
>912	CallExpression	isDataSatisfied ( )
>913	ArgumentList	 
>914	Callee	isDataSatisfied
>915	Identifier	isDataSatisfied
>916	UnaryOperator	!
>917	ExpressionStatement	 
>918	AssignmentExpr	mAudioTime += header -> getAudioLength ( )
>919	CallExpression	header -> getAudioLength ( )
>920	ArgumentList	 
>921	Callee	header -> getAudioLength
>922	PtrMemberAccess	header -> getAudioLength
>923	Identifier	getAudioLength
>924	Identifier	header
>925	Identifier	mAudioTime
>926	ExpressionStatement	 
>927	AssignmentExpr	mTotalMpegAudioSize += header -> getFrameLength ( )
>928	CallExpression	header -> getFrameLength ( )
>929	ArgumentList	 
>930	Callee	header -> getFrameLength
>931	PtrMemberAccess	header -> getFrameLength
>932	Identifier	getFrameLength
>933	Identifier	header
>934	Identifier	mTotalMpegAudioSize
>935	ExpressionStatement	 
>936	AssignmentExpr	mSummedBitrates += bitrate
>937	Identifier	bitrate
>938	Identifier	mSummedBitrates
>939	IfStatement	if ( mLowBitrate == 0 || bitrate < mLowBitrate )
>940	CompoundStatement	 
>941	ExpressionStatement	 
>942	AssignmentExpr	mLowBitrate = bitrate
>943	Identifier	bitrate
>944	Identifier	mLowBitrate
>945	Condition	 
>946	OrExpression	mLowBitrate == 0 || bitrate < mLowBitrate
>947	RelationalExpression	bitrate < mLowBitrate
>948	Identifier	mLowBitrate
>949	Identifier	bitrate
>950	EqualityExpression	mLowBitrate == 0
>951	PrimaryExpression	0
>952	Identifier	mLowBitrate
>953	IfStatement	if ( bitrate > mHighBitrate )
>954	CompoundStatement	 
>955	ExpressionStatement	 
>956	AssignmentExpr	mHighBitrate = bitrate
>957	Identifier	bitrate
>958	Identifier	mHighBitrate
>959	Condition	 
>960	RelationalExpression	bitrate > mHighBitrate
>961	Identifier	mHighBitrate
>962	Identifier	bitrate
>963	IdentifierDeclStatement	 
>964	IdentifierDecl	bitrate = header -> getBitrate ( )
>965	AssignmentExpr	bitrate = header -> getBitrate ( )
>966	CallExpression	header -> getBitrate ( )
>967	ArgumentList	 
>968	Callee	header -> getBitrate
>969	PtrMemberAccess	header -> getBitrate
>970	Identifier	getBitrate
>971	Identifier	header
>972	Identifier	bitrate
>973	Identifier	bitrate
>974	IdentifierDeclType	unsigned int
>975	ExpressionStatement	 
>976	UnaryExpression	++ mLayerMap [ layer . type ]
>977	ArrayIndexing	mLayerMap [ layer . type ]
>978	MemberAccess	layer . type
>979	Identifier	type
>980	Identifier	layer
>981	Identifier	mLayerMap
>982	IncDec	++
>983	ExpressionStatement	 
>984	CallExpression	header -> getLayer ( layer )
>985	ArgumentList	layer
>986	Argument	layer
>987	Identifier	layer
>988	Callee	header -> getLayer
>989	PtrMemberAccess	header -> getLayer
>990	Identifier	getLayer
>991	Identifier	header
>992	IdentifierDeclStatement	 
>993	IdentifierDecl	layer
>994	Identifier	layer
>995	IdentifierDeclType	AudioLayer
>996	ExpressionStatement	 
>997	UnaryExpression	++ mVersionMap [ version . type ]
>998	ArrayIndexing	mVersionMap [ version . type ]
>999	MemberAccess	version . type
>1000	Identifier	type
>1001	Identifier	version
>1002	Identifier	mVersionMap
>1003	IncDec	++
>1004	ExpressionStatement	 
>1005	CallExpression	header -> getVersion ( version )
>1006	ArgumentList	version
>1007	Argument	version
>1008	Identifier	version
>1009	Callee	header -> getVersion
>1010	PtrMemberAccess	header -> getVersion
>1011	Identifier	getVersion
>1012	Identifier	header
>1013	IdentifierDeclStatement	 
>1014	IdentifierDecl	version
>1015	Identifier	version
>1016	IdentifierDeclType	AudioVersion
>1017	ExpressionStatement	 
>1018	UnaryExpression	++ mFramesDetected
>1019	Identifier	mFramesDetected
>1020	IncDec	++
<3=5,4
<5=6
<6=7
<7=9,8
<9=10
<14=16,15
<20=29,28,21
<21=25,22
<22=24,23
<25=27,26
<29=328,32,30
<30=31
<32=324,33
<33=320,309,297,34
<34=293,35
<35=36
<36=284,207,37
<37=38
<38=195,191,172,39
<39=165,49,40
<40=41
<41=42
<42=43
<43=47,44
<44=45
<45=46
<47=48
<49=151,144,50
<50=138,64,51
<51=52
<52=60,53
<53=54
<54=58,55
<55=56
<56=57
<58=59
<60=61
<61=63,62
<64=131,113,104,95,86,75,65
<65=71,66
<66=67
<67=68
<68=70,69
<71=72
<72=74,73
<75=76
<76=85,84,77
<77=83,78
<78=80,79
<80=82,81
<86=87
<87=94,93,88
<88=92,89
<89=91,90
<95=96
<96=103,102,97
<97=101,98
<98=100,99
<104=105
<105=112,111,106
<106=110,107
<107=109,108
<113=114
<114=130,129,115
<115=128,116
<116=124,117
<117=122,118
<118=119
<119=121,120
<122=123
<124=125
<125=127,126
<131=132
<132=136,133
<133=134
<134=135
<136=137
<138=139
<139=141,140
<141=143,142
<144=145
<145=150,149,146
<146=148,147
<151=152
<152=164,163,153
<153=162,154
<154=158,155
<155=156
<156=157
<158=159
<159=161,160
<165=166
<166=168,167
<168=169
<169=171,170
<172=187,173
<173=178,174
<174=175
<175=177,176
<178=179
<179=185,180
<180=181
<181=182
<182=184,183
<185=186
<187=188
<188=190,189
<191=192
<192=194,193
<195=196
<196=206,205,197
<197=204,198
<198=200,199
<200=201
<201=203,202
<207=240,208
<208=236,226,209
<209=210
<210=219,211
<211=212
<212=213
<213=217,214
<214=215
<215=216
<217=218
<219=220
<220=225,221
<221=223,222
<223=224
<226=227
<227=228
<228=235,229
<229=231,230
<231=232
<232=234,233
<236=237
<237=239,238
<240=277,267,241
<241=242
<242=260,243
<243=244
<244=253,245
<245=246
<246=247
<247=251,248
<248=249
<249=250
<251=252
<253=254
<254=259,255
<255=257,256
<257=258
<260=261
<261=263,262
<263=265,264
<265=266
<267=272,268
<268=269
<269=271,270
<272=273
<273=275,274
<275=276
<277=278
<278=280,279
<280=282,281
<282=283
<284=285
<285=287,286
<287=289,288
<289=290
<290=292,291
<293=294
<294=296,295
<297=298
<298=308,307,299
<299=306,300
<300=302,301
<302=303
<303=305,304
<309=310
<310=316,311
<311=314,312
<312=313
<314=315
<316=317
<317=319,318
<320=321
<321=323,322
<324=325
<325=327,326
<328=329
<329=334,333,330
<330=332,331
<366=369,368,367
<369=617,611,372,370
<370=371
<372=604,591,373
<373=374
<374=585,579,569,555,550,537,532,516,507,498,489,483,474,465,456,447,441,430,419,408,397,386,375
<375=376
<376=383,377
<377=381,378
<378=379
<379=380
<381=382
<383=385,384
<386=387
<387=394,388
<388=392,389
<389=390
<390=391
<392=393
<394=396,395
<397=398
<398=405,399
<399=403,400
<400=401
<401=402
<403=404
<405=407,406
<408=409
<409=416,410
<410=414,411
<411=412
<412=413
<414=415
<416=418,417
<419=420
<420=427,421
<421=425,422
<422=423
<423=424
<425=426
<427=429,428
<430=431
<431=438,432
<432=436,433
<433=434
<434=435
<436=437
<438=440,439
<441=442
<442=444,443
<444=446,445
<447=448
<448=453,449
<449=451,450
<451=452
<453=455,454
<456=457
<457=462,458
<458=460,459
<460=461
<462=464,463
<465=466
<466=471,467
<467=469,468
<469=470
<471=473,472
<474=475
<475=480,476
<476=478,477
<478=479
<480=482,481
<483=484
<484=486,485
<486=488,487
<489=490
<490=495,491
<491=493,492
<493=494
<495=497,496
<498=499
<499=504,500
<500=502,501
<502=503
<504=506,505
<507=508
<508=513,509
<509=511,510
<511=512
<513=515,514
<516=517
<517=530,518
<518=528,526,524,519
<519=520
<520=522,521
<522=523
<524=525
<526=527
<528=529
<530=531
<532=533
<533=536,535,534
<537=538
<538=548,539
<539=546,544,542,540
<540=541
<542=543
<544=545
<546=547
<548=549
<550=551
<551=554,553,552
<555=556
<556=568,567,557
<557=566,558
<558=560,559
<560=565,561
<561=563,562
<563=564
<569=570
<570=578,577,571
<571=576,572
<572=574,573
<574=575
<579=580
<580=582,581
<582=584,583
<585=586
<586=588,587
<588=590,589
<591=598,592
<592=593
<593=595,594
<595=597,596
<598=599
<599=601,600
<601=603,602
<604=605
<605=610,606
<606=608,607
<608=609
<611=612
<612=614,613
<614=616,615
<617=618
<618=620,619
<646=649,648,647
<649=650
<650=651
<656=662,661,657
<657=658
<658=660,659
<662=663
<663=664
<664=666,665
<674=680,679,675
<675=676
<676=678,677
<680=681
<681=682
<682=684,683
<692=695,694,693
<695=696
<696=697
<702=705,704,703
<705=706
<706=707
<712=715,714,713
<715=755,728,718,716
<716=717
<718=724,719
<719=720
<720=721
<721=723,722
<724=725
<725=727,726
<728=748,729
<729=730
<730=731
<731=747,732
<732=746,733
<733=744,734
<734=735
<735=736
<736=741,737
<737=739,738
<739=740
<741=743,742
<744=745
<748=749
<749=751,750
<751=753,752
<753=754
<755=756
<756=761,760,757
<757=759,758
<770=773,772,771
<773=774
<774=775
<780=783,782,781
<783=784
<784=785
<785=787,786
<793=796,795,794
<796=857,853,849,843,837,831,825,819,813,809,805,801,797
<797=798
<798=800,799
<801=802
<802=804,803
<805=806
<806=808,807
<809=810
<810=812,811
<813=814
<814=816,815
<816=818,817
<819=820
<820=822,821
<822=824,823
<825=826
<826=828,827
<828=830,829
<831=832
<832=834,833
<834=836,835
<837=838
<838=840,839
<840=842,841
<843=844
<844=846,845
<846=848,847
<849=850
<850=852,851
<853=854
<854=856,855
<857=858
<858=860,859
<887=893,892,888
<888=889
<889=891,890
<893=1017,1013,1004,996,992,983,975,963,953,939,935,926,917,894
<894=903,895
<895=896
<896=897
<897=901,898
<898=899
<899=900
<901=902
<903=904
<904=911,905
<905=907,906
<907=909,908
<909=910
<911=916,912
<912=914,913
<914=915
<917=918
<918=925,919
<919=921,920
<921=922
<922=924,923
<926=927
<927=934,928
<928=930,929
<930=931
<931=933,932
<935=936
<936=938,937
<939=945,940
<940=941
<941=942
<942=944,943
<945=946
<946=950,947
<947=949,948
<950=952,951
<953=959,954
<954=955
<955=956
<956=958,957
<959=960
<960=962,961
<963=964
<964=974,973,965
<965=972,966
<966=968,967
<968=969
<969=971,970
<975=976
<976=982,977
<977=981,978
<978=980,979
<983=984
<984=988,985
<985=986
<986=987
<988=989
<989=991,990
<992=993
<993=995,994
<996=997
<997=1003,998
<998=1002,999
<999=1001,1000
<1004=1005
<1005=1009,1006
<1006=1007
<1007=1008
<1009=1010
<1010=1012,1011
<1013=1014
<1014=1016,1015
<1017=1018
<1018=1020,1019
