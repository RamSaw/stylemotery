>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	prhs
>10	ParameterType	const mxArray * [ ]
>11	Parameter	 
>12	Identifier	plhs
>13	ParameterType	mxArray * [ ]
>14	ReturnType	inline void
>15	CompoundStatement	 
>16	IfStatement	if ( nlhs == 2 )
>17	ExpressionStatement	 
>18	CallExpression	convertSpMatrix ( plhs [ 1 ] , path . m ( ) , path . n ( ) , path . n ( ) , path . nzmax ( ) , path . v ( ) , path \
>19	ArgumentList	plhs [ 1 ]
>20	Argument	path . pB ( )
>21	CallExpression	path . pB ( )
>22	ArgumentList	 
>23	Callee	path . pB
>24	MemberAccess	path . pB
>25	Identifier	pB
>26	Identifier	path
>27	Argument	path . r ( )
>28	CallExpression	path . r ( )
>29	ArgumentList	 
>30	Callee	path . r
>31	MemberAccess	path . r
>32	Identifier	r
>33	Identifier	path
>34	Argument	path . v ( )
>35	CallExpression	path . v ( )
>36	ArgumentList	 
>37	Callee	path . v
>38	MemberAccess	path . v
>39	Identifier	v
>40	Identifier	path
>41	Argument	path . nzmax ( )
>42	CallExpression	path . nzmax ( )
>43	ArgumentList	 
>44	Callee	path . nzmax
>45	MemberAccess	path . nzmax
>46	Identifier	nzmax
>47	Identifier	path
>48	Argument	path . n ( )
>49	CallExpression	path . n ( )
>50	ArgumentList	 
>51	Callee	path . n
>52	MemberAccess	path . n
>53	Identifier	n
>54	Identifier	path
>55	Argument	path . n ( )
>56	CallExpression	path . n ( )
>57	ArgumentList	 
>58	Callee	path . n
>59	MemberAccess	path . n
>60	Identifier	n
>61	Identifier	path
>62	Argument	path . m ( )
>63	CallExpression	path . m ( )
>64	ArgumentList	 
>65	Callee	path . m
>66	MemberAccess	path . m
>67	Identifier	m
>68	Identifier	path
>69	Argument	plhs [ 1 ]
>70	ArrayIndexing	plhs [ 1 ]
>71	PrimaryExpression	1
>72	Identifier	plhs
>73	Callee	convertSpMatrix
>74	Identifier	convertSpMatrix
>75	Condition	 
>76	EqualityExpression	nlhs == 2
>77	PrimaryExpression	2
>78	Identifier	nlhs
>79	ForStatement	for ( long i = 0 ; i < val . n ( ) ; ++ i )
>80	ExpressionStatement	 
>81	AssignmentExpr	pr_val [ i ] = val [ i ]
>82	ArrayIndexing	val [ i ]
>83	Identifier	i
>84	Identifier	val
>85	ArrayIndexing	pr_val [ i ]
>86	Identifier	i
>87	Identifier	pr_val
>88	UnaryExpression	 
>89	Identifier	i
>90	IncDec	++
>91	Condition	 
>92	RelationalExpression	i < val . n ( )
>93	CallExpression	val . n ( )
>94	ArgumentList	 
>95	Callee	val . n
>96	MemberAccess	val . n
>97	Identifier	n
>98	Identifier	val
>99	Identifier	i
>100	ForInit	 
>101	IdentifierDeclStatement	long i = 0 ;
>102	IdentifierDecl	i = 0
>103	AssignmentExpr	i = 0
>104	PrimaryExpression	0
>105	Identifier	i
>106	Identifier	i
>107	IdentifierDeclType	long
>108	ExpressionStatement	 
>109	CallExpression	mxGetPr ( plhs [ 0 ] )
>110	ArgumentList	plhs [ 0 ]
>111	Argument	plhs [ 0 ]
>112	ArrayIndexing	plhs [ 0 ]
>113	PrimaryExpression	0
>114	Identifier	plhs
>115	Callee	mxGetPr
>116	Identifier	mxGetPr
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	ExpressionStatement	 
>127	AssignmentExpr	plhs [ 0 ] = createMatrix < T > ( 1 , val . n ( ) )
>128	RelationalExpression	createMatrix < T > ( 1 , val . n ( ) )
>129	RelationalExpression	T > ( 1 , val . n ( ) )
>130	Expression	1 , val . n ( )
>131	CallExpression	val . n ( )
>132	ArgumentList	 
>133	Callee	val . n
>134	MemberAccess	val . n
>135	Identifier	n
>136	Identifier	val
>137	PrimaryExpression	1
>138	Identifier	T
>139	Identifier	createMatrix
>140	ArrayIndexing	plhs [ 0 ]
>141	PrimaryExpression	0
>142	Identifier	plhs
>143	IfStatement	if ( nlhs == 1 )
>144	ElseStatement	else
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	RelationalExpression	FISTA 
>148	RelationalExpression	T > ( alpha0 , param , val , & graph , & path )
>149	Expression	alpha0 , param , val , & graph , & path
>150	Expression	param , val , & graph , & path
>151	Expression	val , & graph , & path
>152	Expression	& graph , & path
>153	UnaryOp	& path
>154	Identifier	path
>155	UnaryOperator	&
>156	UnaryOp	& graph
>157	Identifier	graph
>158	UnaryOperator	&
>159	Identifier	val
>160	Identifier	param
>161	Identifier	alpha0
>162	Identifier	T
>163	Identifier	FISTA 
>164	CompoundStatement	 
>165	ExpressionStatement	 
>166	RelationalExpression	FISTA 
>167	RelationalExpression	T > ( alpha0 , param , val , & graph )
>168	Expression	alpha0 , param , val , & graph
>169	Expression	param , val , & graph
>170	Expression	val , & graph
>171	UnaryOp	& graph
>172	Identifier	graph
>173	UnaryOperator	&
>174	Identifier	val
>175	Identifier	param
>176	Identifier	alpha0
>177	Identifier	T
>178	Identifier	FISTA 
>179	Condition	 
>180	EqualityExpression	nlhs == 1
>181	PrimaryExpression	1
>182	Identifier	nlhs
>183	IdentifierDeclStatement	 
>184	IdentifierDecl	path
>185	Identifier	path
>186	IdentifierDeclType	SpMatrix < T >
>187	IdentifierDeclStatement	 
>188	IdentifierDecl	val
>189	Identifier	val
>190	IdentifierDeclType	Vector < T >
>191	ExpressionStatement	 
>192	Expression	prhs [ 2 ] , \"precision\" , 100000000000000000
>193	Expression	\"precision\" , 100000000000000000
>194	PrimaryExpression	100000000000000000
>195	PrimaryExpression	\"precision\"
>196	ArrayIndexing	prhs [ 2 ]
>197	PrimaryExpression	2
>198	Identifier	prhs
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	Statement	 
>204	Statement	 
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	ExpressionStatement	 
>209	AssignmentExpr	graph . jc = GG_pB
>210	Identifier	GG_pB
>211	MemberAccess	graph . jc
>212	Identifier	jc
>213	Identifier	graph
>214	ExpressionStatement	 
>215	AssignmentExpr	graph . ir = GG_r
>216	Identifier	GG_r
>217	MemberAccess	graph . ir
>218	Identifier	ir
>219	Identifier	graph
>220	ExpressionStatement	 
>221	AssignmentExpr	graph . stop_weights = stop_weights
>222	Identifier	stop_weights
>223	MemberAccess	graph . stop_weights
>224	Identifier	stop_weights
>225	Identifier	graph
>226	ExpressionStatement	 
>227	AssignmentExpr	graph . start_weights = start_weights
>228	Identifier	start_weights
>229	MemberAccess	graph . start_weights
>230	Identifier	start_weights
>231	Identifier	graph
>232	ExpressionStatement	 
>233	AssignmentExpr	graph . weights = graph_weights
>234	Identifier	graph_weights
>235	MemberAccess	graph . weights
>236	Identifier	weights
>237	Identifier	graph
>238	ExpressionStatement	 
>239	AssignmentExpr	graph . m = GG_pB [ graph . n ] - GG_pB [ 0 ]
>240	AdditiveExpression	GG_pB [ graph . n ] - GG_pB [ 0 ]
>241	ArrayIndexing	GG_pB [ 0 ]
>242	PrimaryExpression	0
>243	Identifier	GG_pB
>244	ArrayIndexing	GG_pB [ graph . n ]
>245	MemberAccess	graph . n
>246	Identifier	n
>247	Identifier	graph
>248	Identifier	GG_pB
>249	MemberAccess	graph . m
>250	Identifier	m
>251	Identifier	graph
>252	ExpressionStatement	 
>253	AssignmentExpr	graph . n = pAlpha
>254	Identifier	pAlpha
>255	MemberAccess	graph . n
>256	Identifier	n
>257	Identifier	graph
>258	IdentifierDeclStatement	 
>259	IdentifierDecl	graph
>260	Identifier	graph
>261	IdentifierDeclType	GraphPathStruct < T >
>262	IfStatement	if ( param . num_threads == - 1 )
>263	CompoundStatement	 
>264	ExpressionStatement	 
>265	AssignmentExpr	param . num_threads = MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>266	CallExpression	MIN ( MAX_THREADS , omp_get_num_procs ( ) )
>267	ArgumentList	MAX_THREADS
>268	Argument	omp_get_num_procs ( )
>269	CallExpression	omp_get_num_procs ( )
>270	ArgumentList	 
>271	Callee	omp_get_num_procs
>272	Identifier	omp_get_num_procs
>273	Argument	MAX_THREADS
>274	Identifier	MAX_THREADS
>275	Callee	MIN
>276	Identifier	MIN
>277	MemberAccess	param . num_threads
>278	Identifier	num_threads
>279	Identifier	param
>280	ExpressionStatement	 
>281	AssignmentExpr	param . num_threads = 1
>282	PrimaryExpression	1
>283	MemberAccess	param . num_threads
>284	Identifier	num_threads
>285	Identifier	param
>286	Condition	 
>287	EqualityExpression	param . num_threads == - 1
>288	UnaryOp	- 1
>289	PrimaryExpression	1
>290	UnaryOperator	-
>291	MemberAccess	param . num_threads
>292	Identifier	num_threads
>293	Identifier	param
>294	IfStatement	if ( param . regul != GRAPH_PATH_L0 && param . regul != GRAPH_PATH_CONV )
>295	ExpressionStatement	 
>296	CallExpression	mexErrMsgTxt ( \"Use a different mexEvalGraphPath function\" )
>297	ArgumentList	\"Use a different mexEvalGraphPath function\"
>298	Argument	\"Use a different mexEvalGraphPath function\"
>299	PrimaryExpression	\"Use a different mexEvalGraphPath function\"
>300	Callee	mexErrMsgTxt
>301	Identifier	mexErrMsgTxt
>302	Condition	 
>303	AndExpression	param . regul != GRAPH_PATH_L0 && param . regul != GRAPH_PATH_CONV
>304	EqualityExpression	param . regul != GRAPH_PATH_CONV
>305	Identifier	GRAPH_PATH_CONV
>306	MemberAccess	param . regul
>307	Identifier	regul
>308	Identifier	param
>309	EqualityExpression	param . regul != GRAPH_PATH_L0
>310	Identifier	GRAPH_PATH_L0
>311	MemberAccess	param . regul
>312	Identifier	regul
>313	Identifier	param
>314	ExpressionStatement	 
>315	AssignmentExpr	param . eval_dual_norm = getScalarStructDef < bool > ( prhs [ 2 ] , \"dual_norm\" , false )
>316	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"dual_norm\" , false )
>317	RelationalExpression	bool > ( prhs [ 2 ] , \"dual_norm\" , false )
>318	Expression	prhs [ 2 ] , \"dual_norm\" , false
>319	Expression	\"dual_norm\" , false
>320	Identifier	false
>321	PrimaryExpression	\"dual_norm\"
>322	ArrayIndexing	prhs [ 2 ]
>323	PrimaryExpression	2
>324	Identifier	prhs
>325	Identifier	bool
>326	Identifier	getScalarStructDef
>327	MemberAccess	param . eval_dual_norm
>328	Identifier	eval_dual_norm
>329	Identifier	param
>330	ExpressionStatement	 
>331	AssignmentExpr	param . verbose = getScalarStructDef < bool > ( prhs [ 2 ] , \"verbose\" , false )
>332	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"verbose\" , false )
>333	RelationalExpression	bool > ( prhs [ 2 ] , \"verbose\" , false )
>334	Expression	prhs [ 2 ] , \"verbose\" , false
>335	Expression	\"verbose\" , false
>336	Identifier	false
>337	PrimaryExpression	\"verbose\"
>338	ArrayIndexing	prhs [ 2 ]
>339	PrimaryExpression	2
>340	Identifier	prhs
>341	Identifier	bool
>342	Identifier	getScalarStructDef
>343	MemberAccess	param . verbose
>344	Identifier	verbose
>345	Identifier	param
>346	ExpressionStatement	 
>347	AssignmentExpr	param . intercept = getScalarStructDef < bool > ( prhs [ 2 ] , \"intercept\" , false )
>348	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"intercept\" , false )
>349	RelationalExpression	bool > ( prhs [ 2 ] , \"intercept\" , false )
>350	Expression	prhs [ 2 ] , \"intercept\" , false
>351	Expression	\"intercept\" , false
>352	Identifier	false
>353	PrimaryExpression	\"intercept\"
>354	ArrayIndexing	prhs [ 2 ]
>355	PrimaryExpression	2
>356	Identifier	prhs
>357	Identifier	bool
>358	Identifier	getScalarStructDef
>359	MemberAccess	param . intercept
>360	Identifier	intercept
>361	Identifier	param
>362	IfStatement	if ( param . regul == INCORRECT_REG )
>363	ExpressionStatement	 
>364	CallExpression	mexErrMsgTxt ( \"Unknown regularization\" )
>365	ArgumentList	\"Unknown regularization\"
>366	Argument	\"Unknown regularization\"
>367	PrimaryExpression	\"Unknown regularization\"
>368	Callee	mexErrMsgTxt
>369	Identifier	mexErrMsgTxt
>370	Condition	 
>371	EqualityExpression	param . regul == INCORRECT_REG
>372	Identifier	INCORRECT_REG
>373	MemberAccess	param . regul
>374	Identifier	regul
>375	Identifier	param
>376	ExpressionStatement	 
>377	AssignmentExpr	param . regul = regul_from_string ( param . name_regul )
>378	CallExpression	regul_from_string ( param . name_regul )
>379	ArgumentList	param . name_regul
>380	Argument	param . name_regul
>381	MemberAccess	param . name_regul
>382	Identifier	name_regul
>383	Identifier	param
>384	Callee	regul_from_string
>385	Identifier	regul_from_string
>386	MemberAccess	param . regul
>387	Identifier	regul
>388	Identifier	param
>389	ExpressionStatement	 
>390	CallExpression	getStringStruct ( prhs [ 2 ] , \"regul\" , param . name_regul , param . length_names )
>391	ArgumentList	prhs [ 2 ]
>392	Argument	param . length_names
>393	MemberAccess	param . length_names
>394	Identifier	length_names
>395	Identifier	param
>396	Argument	param . name_regul
>397	MemberAccess	param . name_regul
>398	Identifier	name_regul
>399	Identifier	param
>400	Argument	\"regul\"
>401	PrimaryExpression	\"regul\"
>402	Argument	prhs [ 2 ]
>403	ArrayIndexing	prhs [ 2 ]
>404	PrimaryExpression	2
>405	Identifier	prhs
>406	Callee	getStringStruct
>407	Identifier	getStringStruct
>408	ExpressionStatement	 
>409	Expression	prhs [ 2 ] , \"numThreads\" , - 1
>410	Expression	\"numThreads\" , - 1
>411	UnaryOp	- 1
>412	PrimaryExpression	1
>413	UnaryOperator	-
>414	PrimaryExpression	\"numThreads\"
>415	ArrayIndexing	prhs [ 2 ]
>416	PrimaryExpression	2
>417	Identifier	prhs
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	IdentifierDeclStatement	 
>427	IdentifierDecl	param
>428	Identifier	param
>429	IdentifierDeclType	FISTA 
>430	IfStatement	if ( nweights2 != pAlpha )
>431	ExpressionStatement	 
>432	CallExpression	mexErrMsgTxt ( \"size of field stop_weights is not consistent\" )
>433	ArgumentList	\"size of field stop_weights is not consistent\"
>434	Argument	\"size of field stop_weights is not consistent\"
>435	PrimaryExpression	\"size of field stop_weights is not consistent\"
>436	Callee	mexErrMsgTxt
>437	Identifier	mexErrMsgTxt
>438	Condition	 
>439	EqualityExpression	nweights2 != pAlpha
>440	Identifier	pAlpha
>441	Identifier	nweights2
>442	ExpressionStatement	 
>443	ArrayIndexing	dims_weights2 [ 1 ]
>444	PrimaryExpression	1
>445	Identifier	dims_weights2
>446	Statement	 
>447	Statement	 
>448	Statement	 
>449	Statement	 
>450	Statement	 
>451	Statement	 
>452	Statement	 
>453	Statement	 
>454	Statement	 
>455	Statement	 
>456	Statement	 
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	IdentifierDeclStatement	 
>465	IdentifierDecl	* dims_weights2 = mxGetDimensions ( ppr_weights2 )
>466	AssignmentExpr	* dims_weights2 = mxGetDimensions ( ppr_weights2 )
>467	CallExpression	mxGetDimensions ( ppr_weights2 )
>468	ArgumentList	ppr_weights2
>469	Argument	ppr_weights2
>470	Identifier	ppr_weights2
>471	Callee	mxGetDimensions
>472	Identifier	mxGetDimensions
>473	Identifier	dims_weights2
>474	Identifier	dims_weights2
>475	IdentifierDeclType	const mwSize *
>476	ExpressionStatement	 
>477	CallExpression	mxGetPr ( ppr_weights2 )
>478	ArgumentList	ppr_weights2
>479	Argument	ppr_weights2
>480	Identifier	ppr_weights2
>481	Callee	mxGetPr
>482	Identifier	mxGetPr
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	IfStatement	if ( mxIsSparse ( ppr_weights2 ) )
>493	ExpressionStatement	 
>494	CallExpression	mexErrMsgTxt ( \"field stop_weights should not be sparse\" )
>495	ArgumentList	\"field stop_weights should not be sparse\"
>496	Argument	\"field stop_weights should not be sparse\"
>497	PrimaryExpression	\"field stop_weights should not be sparse\"
>498	Callee	mexErrMsgTxt
>499	Identifier	mexErrMsgTxt
>500	Condition	 
>501	CallExpression	mxIsSparse ( ppr_weights2 )
>502	ArgumentList	ppr_weights2
>503	Argument	ppr_weights2
>504	Identifier	ppr_weights2
>505	Callee	mxIsSparse
>506	Identifier	mxIsSparse
>507	IdentifierDeclStatement	 
>508	IdentifierDecl	* ppr_weights2 = mxGetField ( prhs [ 1 ] , 0 , \"stop_weights\" )
>509	AssignmentExpr	* ppr_weights2 = mxGetField ( prhs [ 1 ] , 0 , \"stop_weights\" )
>510	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"stop_weights\" )
>511	ArgumentList	prhs [ 1 ]
>512	Argument	\"stop_weights\"
>513	PrimaryExpression	\"stop_weights\"
>514	Argument	0
>515	PrimaryExpression	0
>516	Argument	prhs [ 1 ]
>517	ArrayIndexing	prhs [ 1 ]
>518	PrimaryExpression	1
>519	Identifier	prhs
>520	Callee	mxGetField
>521	Identifier	mxGetField
>522	Identifier	ppr_weights2
>523	Identifier	ppr_weights2
>524	IdentifierDeclType	mxArray *
>525	IfStatement	if ( nweights != pAlpha )
>526	ExpressionStatement	 
>527	CallExpression	mexErrMsgTxt ( \"size of field start_weights is not consistent\" )
>528	ArgumentList	\"size of field start_weights is not consistent\"
>529	Argument	\"size of field start_weights is not consistent\"
>530	PrimaryExpression	\"size of field start_weights is not consistent\"
>531	Callee	mexErrMsgTxt
>532	Identifier	mexErrMsgTxt
>533	Condition	 
>534	EqualityExpression	nweights != pAlpha
>535	Identifier	pAlpha
>536	Identifier	nweights
>537	ExpressionStatement	 
>538	ArrayIndexing	dims_weights [ 1 ]
>539	PrimaryExpression	1
>540	Identifier	dims_weights
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	IdentifierDeclStatement	 
>560	IdentifierDecl	* dims_weights = mxGetDimensions ( ppr_weights )
>561	AssignmentExpr	* dims_weights = mxGetDimensions ( ppr_weights )
>562	CallExpression	mxGetDimensions ( ppr_weights )
>563	ArgumentList	ppr_weights
>564	Argument	ppr_weights
>565	Identifier	ppr_weights
>566	Callee	mxGetDimensions
>567	Identifier	mxGetDimensions
>568	Identifier	dims_weights
>569	Identifier	dims_weights
>570	IdentifierDeclType	const mwSize *
>571	ExpressionStatement	 
>572	CallExpression	mxGetPr ( ppr_weights )
>573	ArgumentList	ppr_weights
>574	Argument	ppr_weights
>575	Identifier	ppr_weights
>576	Callee	mxGetPr
>577	Identifier	mxGetPr
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	IfStatement	if ( mxIsSparse ( ppr_weights ) )
>588	ExpressionStatement	 
>589	CallExpression	mexErrMsgTxt ( \"field start_weights should not be sparse\" )
>590	ArgumentList	\"field start_weights should not be sparse\"
>591	Argument	\"field start_weights should not be sparse\"
>592	PrimaryExpression	\"field start_weights should not be sparse\"
>593	Callee	mexErrMsgTxt
>594	Identifier	mexErrMsgTxt
>595	Condition	 
>596	CallExpression	mxIsSparse ( ppr_weights )
>597	ArgumentList	ppr_weights
>598	Argument	ppr_weights
>599	Identifier	ppr_weights
>600	Callee	mxIsSparse
>601	Identifier	mxIsSparse
>602	IdentifierDeclStatement	 
>603	IdentifierDecl	* ppr_weights = mxGetField ( prhs [ 1 ] , 0 , \"start_weights\" )
>604	AssignmentExpr	* ppr_weights = mxGetField ( prhs [ 1 ] , 0 , \"start_weights\" )
>605	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"start_weights\" )
>606	ArgumentList	prhs [ 1 ]
>607	Argument	\"start_weights\"
>608	PrimaryExpression	\"start_weights\"
>609	Argument	0
>610	PrimaryExpression	0
>611	Argument	prhs [ 1 ]
>612	ArrayIndexing	prhs [ 1 ]
>613	PrimaryExpression	1
>614	Identifier	prhs
>615	Callee	mxGetField
>616	Identifier	mxGetField
>617	Identifier	ppr_weights
>618	Identifier	ppr_weights
>619	IdentifierDeclType	mxArray *
>620	IfStatement	if ( GGm != GGn || GGm != pAlpha )
>621	ExpressionStatement	 
>622	CallExpression	mexErrMsgTxt ( \"size of field groups is not consistent\" )
>623	ArgumentList	\"size of field groups is not consistent\"
>624	Argument	\"size of field groups is not consistent\"
>625	PrimaryExpression	\"size of field groups is not consistent\"
>626	Callee	mexErrMsgTxt
>627	Identifier	mexErrMsgTxt
>628	Condition	 
>629	OrExpression	GGm != GGn || GGm != pAlpha
>630	EqualityExpression	GGm != pAlpha
>631	Identifier	pAlpha
>632	Identifier	GGm
>633	EqualityExpression	GGm != GGn
>634	Identifier	GGn
>635	Identifier	GGm
>636	ExpressionStatement	 
>637	ArrayIndexing	dims_GG [ 1 ]
>638	PrimaryExpression	1
>639	Identifier	dims_GG
>640	Statement	 
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	Statement	 
>646	Statement	 
>647	ExpressionStatement	 
>648	ArrayIndexing	dims_GG [ 0 ]
>649	PrimaryExpression	0
>650	Identifier	dims_GG
>651	Statement	 
>652	Statement	 
>653	Statement	 
>654	Statement	 
>655	Statement	 
>656	Statement	 
>657	Statement	 
>658	IdentifierDeclStatement	 
>659	IdentifierDecl	* dims_GG = mxGetDimensions ( ppr_GG )
>660	AssignmentExpr	* dims_GG = mxGetDimensions ( ppr_GG )
>661	CallExpression	mxGetDimensions ( ppr_GG )
>662	ArgumentList	ppr_GG
>663	Argument	ppr_GG
>664	Identifier	ppr_GG
>665	Callee	mxGetDimensions
>666	Identifier	mxGetDimensions
>667	Identifier	dims_GG
>668	Identifier	dims_GG
>669	IdentifierDeclType	const mwSize *
>670	IdentifierDeclStatement	 
>671	IdentifierDecl	* GG_pB = mxGetJc ( ppr_GG )
>672	AssignmentExpr	* GG_pB = mxGetJc ( ppr_GG )
>673	CallExpression	mxGetJc ( ppr_GG )
>674	ArgumentList	ppr_GG
>675	Argument	ppr_GG
>676	Identifier	ppr_GG
>677	Callee	mxGetJc
>678	Identifier	mxGetJc
>679	Identifier	GG_pB
>680	Identifier	GG_pB
>681	IdentifierDeclType	mwSize *
>682	IdentifierDeclStatement	 
>683	IdentifierDecl	* GG_r = mxGetIr ( ppr_GG )
>684	AssignmentExpr	* GG_r = mxGetIr ( ppr_GG )
>685	CallExpression	mxGetIr ( ppr_GG )
>686	ArgumentList	ppr_GG
>687	Argument	ppr_GG
>688	Identifier	ppr_GG
>689	Callee	mxGetIr
>690	Identifier	mxGetIr
>691	Identifier	GG_r
>692	Identifier	GG_r
>693	IdentifierDeclType	mwSize *
>694	ExpressionStatement	 
>695	CallExpression	mxGetPr ( ppr_GG )
>696	ArgumentList	ppr_GG
>697	Argument	ppr_GG
>698	Identifier	ppr_GG
>699	Callee	mxGetPr
>700	Identifier	mxGetPr
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	Statement	 
>708	Statement	 
>709	Statement	 
>710	IfStatement	if ( ! mxIsSparse ( ppr_GG ) )
>711	ExpressionStatement	 
>712	CallExpression	mexErrMsgTxt ( \"field groups should be sparse\" )
>713	ArgumentList	\"field groups should be sparse\"
>714	Argument	\"field groups should be sparse\"
>715	PrimaryExpression	\"field groups should be sparse\"
>716	Callee	mexErrMsgTxt
>717	Identifier	mexErrMsgTxt
>718	Condition	 
>719	UnaryOp	! mxIsSparse ( ppr_GG )
>720	CallExpression	mxIsSparse ( ppr_GG )
>721	ArgumentList	ppr_GG
>722	Argument	ppr_GG
>723	Identifier	ppr_GG
>724	Callee	mxIsSparse
>725	Identifier	mxIsSparse
>726	UnaryOperator	!
>727	IdentifierDeclStatement	 
>728	IdentifierDecl	* ppr_GG = mxGetField ( prhs [ 1 ] , 0 , \"weights\" )
>729	AssignmentExpr	* ppr_GG = mxGetField ( prhs [ 1 ] , 0 , \"weights\" )
>730	CallExpression	mxGetField ( prhs [ 1 ] , 0 , \"weights\" )
>731	ArgumentList	prhs [ 1 ]
>732	Argument	\"weights\"
>733	PrimaryExpression	\"weights\"
>734	Argument	0
>735	PrimaryExpression	0
>736	Argument	prhs [ 1 ]
>737	ArrayIndexing	prhs [ 1 ]
>738	PrimaryExpression	1
>739	Identifier	prhs
>740	Callee	mxGetField
>741	Identifier	mxGetField
>742	Identifier	ppr_GG
>743	Identifier	ppr_GG
>744	IdentifierDeclType	mxArray *
>745	IdentifierDeclStatement	 
>746	IdentifierDecl	alpha0 ( pr_alpha0 , pAlpha , nAlpha )
>747	Expression	pr_alpha0 , pAlpha , nAlpha
>748	Expression	pAlpha , nAlpha
>749	Identifier	nAlpha
>750	Identifier	pAlpha
>751	Identifier	pr_alpha0
>752	Identifier	alpha0
>753	IdentifierDeclType	Matrix < T >
>754	ExpressionStatement	 
>755	ArrayIndexing	dimsAlpha [ 1 ]
>756	PrimaryExpression	1
>757	Identifier	dimsAlpha
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>764	Statement	 
>765	ExpressionStatement	 
>766	ArrayIndexing	dimsAlpha [ 0 ]
>767	PrimaryExpression	0
>768	Identifier	dimsAlpha
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	IdentifierDeclStatement	 
>777	IdentifierDecl	* dimsAlpha = mxGetDimensions ( prhs [ 0 ] )
>778	AssignmentExpr	* dimsAlpha = mxGetDimensions ( prhs [ 0 ] )
>779	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>780	ArgumentList	prhs [ 0 ]
>781	Argument	prhs [ 0 ]
>782	ArrayIndexing	prhs [ 0 ]
>783	PrimaryExpression	0
>784	Identifier	prhs
>785	Callee	mxGetDimensions
>786	Identifier	mxGetDimensions
>787	Identifier	dimsAlpha
>788	Identifier	dimsAlpha
>789	IdentifierDeclType	const mwSize *
>790	ExpressionStatement	 
>791	CallExpression	mxGetPr ( prhs [ 0 ] )
>792	ArgumentList	prhs [ 0 ]
>793	Argument	prhs [ 0 ]
>794	ArrayIndexing	prhs [ 0 ]
>795	PrimaryExpression	0
>796	Identifier	prhs
>797	Callee	mxGetPr
>798	Identifier	mxGetPr
>799	Statement	 
>800	Statement	 
>801	Statement	 
>802	Statement	 
>803	Statement	 
>804	Statement	 
>805	Statement	 
>806	Statement	 
>807	Statement	 
>808	IfStatement	if ( ! mxIsStruct ( prhs [ 2 ] ) )
>809	ExpressionStatement	 
>810	CallExpression	mexErrMsgTxt ( \"argument 3 should be struct\" )
>811	ArgumentList	\"argument 3 should be struct\"
>812	Argument	\"argument 3 should be struct\"
>813	PrimaryExpression	\"argument 3 should be struct\"
>814	Callee	mexErrMsgTxt
>815	Identifier	mexErrMsgTxt
>816	Condition	 
>817	UnaryOp	! mxIsStruct ( prhs [ 2 ] )
>818	CallExpression	mxIsStruct ( prhs [ 2 ] )
>819	ArgumentList	prhs [ 2 ]
>820	Argument	prhs [ 2 ]
>821	ArrayIndexing	prhs [ 2 ]
>822	PrimaryExpression	2
>823	Identifier	prhs
>824	Callee	mxIsStruct
>825	Identifier	mxIsStruct
>826	UnaryOperator	!
>827	IfStatement	if ( ! mxIsStruct ( prhs [ 1 ] ) )
>828	ExpressionStatement	 
>829	CallExpression	mexErrMsgTxt ( \"argument 2 should be struct\" )
>830	ArgumentList	\"argument 2 should be struct\"
>831	Argument	\"argument 2 should be struct\"
>832	PrimaryExpression	\"argument 2 should be struct\"
>833	Callee	mexErrMsgTxt
>834	Identifier	mexErrMsgTxt
>835	Condition	 
>836	UnaryOp	! mxIsStruct ( prhs [ 1 ] )
>837	CallExpression	mxIsStruct ( prhs [ 1 ] )
>838	ArgumentList	prhs [ 1 ]
>839	Argument	prhs [ 1 ]
>840	ArrayIndexing	prhs [ 1 ]
>841	PrimaryExpression	1
>842	Identifier	prhs
>843	Callee	mxIsStruct
>844	Identifier	mxIsStruct
>845	UnaryOperator	!
>846	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>847	ExpressionStatement	 
>848	CallExpression	mexErrMsgTxt ( \"argument 1 should not be sparse\" )
>849	ArgumentList	\"argument 1 should not be sparse\"
>850	Argument	\"argument 1 should not be sparse\"
>851	PrimaryExpression	\"argument 1 should not be sparse\"
>852	Callee	mexErrMsgTxt
>853	Identifier	mexErrMsgTxt
>854	Condition	 
>855	CallExpression	mxIsSparse ( prhs [ 0 ] )
>856	ArgumentList	prhs [ 0 ]
>857	Argument	prhs [ 0 ]
>858	ArrayIndexing	prhs [ 0 ]
>859	PrimaryExpression	0
>860	Identifier	prhs
>861	Callee	mxIsSparse
>862	Identifier	mxIsSparse
>863	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>864	ExpressionStatement	 
>865	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>866	ArgumentList	\"type of argument 1 is not consistent\"
>867	Argument	\"type of argument 1 is not consistent\"
>868	PrimaryExpression	\"type of argument 1 is not consistent\"
>869	Callee	mexErrMsgTxt
>870	Identifier	mexErrMsgTxt
>871	Condition	 
>872	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>873	RelationalExpression	T > ( prhs [ 0 ] )
>874	ArrayIndexing	prhs [ 0 ]
>875	PrimaryExpression	0
>876	Identifier	prhs
>877	Identifier	T
>878	UnaryOp	! mexCheckType
>879	Identifier	mexCheckType
>880	UnaryOperator	!
>959	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>960	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>961	Parameter	 
>962	Identifier	prhs
>963	ParameterType	const mxArray * [ ]
>964	Parameter	 
>965	Identifier	nrhs
>966	ParameterType	int
>967	Parameter	 
>968	Identifier	plhs
>969	ParameterType	mxArray * [ ]
>970	Parameter	 
>971	Identifier	nlhs
>972	ParameterType	int
>973	ReturnType	void
>974	CompoundStatement	 
>975	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>976	ElseStatement	else
>977	CompoundStatement	 
>978	ExpressionStatement	 
>979	RelationalExpression	callFunction < float > ( plhs , prhs , nlhs )
>980	RelationalExpression	float > ( plhs , prhs , nlhs )
>981	Expression	plhs , prhs , nlhs
>982	Expression	prhs , nlhs
>983	Identifier	nlhs
>984	Identifier	prhs
>985	Identifier	plhs
>986	Identifier	float
>987	Identifier	callFunction
>988	CompoundStatement	 
>989	ExpressionStatement	 
>990	RelationalExpression	callFunction < double > ( plhs , prhs , nlhs )
>991	RelationalExpression	double > ( plhs , prhs , nlhs )
>992	Expression	plhs , prhs , nlhs
>993	Expression	prhs , nlhs
>994	Identifier	nlhs
>995	Identifier	prhs
>996	Identifier	plhs
>997	Identifier	double
>998	Identifier	callFunction
>999	Condition	 
>1000	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>1001	Identifier	mxDOUBLE_CLASS
>1002	CallExpression	mxGetClassID ( prhs [ 0 ] )
>1003	ArgumentList	prhs [ 0 ]
>1004	Argument	prhs [ 0 ]
>1005	ArrayIndexing	prhs [ 0 ]
>1006	PrimaryExpression	0
>1007	Identifier	prhs
>1008	Callee	mxGetClassID
>1009	Identifier	mxGetClassID
>1010	IfStatement	if ( nlhs != 1 && nlhs != 2 )
>1011	ExpressionStatement	 
>1012	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>1013	ArgumentList	\"Bad number of output arguments\"
>1014	Argument	\"Bad number of output arguments\"
>1015	PrimaryExpression	\"Bad number of output arguments\"
>1016	Callee	mexErrMsgTxt
>1017	Identifier	mexErrMsgTxt
>1018	Condition	 
>1019	AndExpression	nlhs != 1 && nlhs != 2
>1020	EqualityExpression	nlhs != 2
>1021	PrimaryExpression	2
>1022	Identifier	nlhs
>1023	EqualityExpression	nlhs != 1
>1024	PrimaryExpression	1
>1025	Identifier	nlhs
>1026	IfStatement	if ( nrhs != 3 )
>1027	ExpressionStatement	 
>1028	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>1029	ArgumentList	\"Bad number of inputs arguments\"
>1030	Argument	\"Bad number of inputs arguments\"
>1031	PrimaryExpression	\"Bad number of inputs arguments\"
>1032	Callee	mexErrMsgTxt
>1033	Identifier	mexErrMsgTxt
>1034	Condition	 
>1035	EqualityExpression	nrhs != 3
>1036	PrimaryExpression	3
>1037	Identifier	nrhs
<3=15,14,4
<4=11,8,5
<5=7,6
<8=10,9
<11=13,12
<15=863,846,827,808,807,806,805,804,803,802,801,800,799,790,776,775,774,773,772,771,770,769,765,764,763,762,761,760,759,758,754,745,727,710,709,708,707,706,705,704,703,702,701,694,682,670,658,657,656,655,654,653,652,651,647,646,645,644,643,642,641,640,636,620,602,587,586,585,584,583,582,581,580,579,578,571,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,537,525,507,492,491,490,489,488,487,486,485,484,483,476,464,463,462,461,460,459,458,457,456,455,454,453,452,451,450,449,448,447,446,442,430,426,425,16,79,108,117,118,119,120,121,122,123,124,125,126,143,183,187,191,199,200,201,202,203,204,205,206,207,208,214,220,226,232,238,252,258,262,294,314,330,346,362,376,389,408,418,419,420,421,422,423,424
<16=75,17
<17=18
<18=73,19
<19=69,62,55,48,41,34,27,20
<20=21
<21=23,22
<23=24
<24=26,25
<27=28
<28=30,29
<30=31
<31=33,32
<34=35
<35=37,36
<37=38
<38=40,39
<41=42
<42=44,43
<44=45
<45=47,46
<48=49
<49=51,50
<51=52
<52=54,53
<55=56
<56=58,57
<58=59
<59=61,60
<62=63
<63=65,64
<65=66
<66=68,67
<69=70
<70=72,71
<73=74
<75=76
<76=78,77
<79=100,91,88,80
<80=81
<81=85,82
<82=84,83
<85=87,86
<88=90,89
<91=92
<92=99,93
<93=95,94
<95=96
<96=98,97
<100=101
<101=102
<102=107,106,103
<103=105,104
<108=109
<109=115,110
<110=111
<111=112
<112=114,113
<115=116
<126=127
<127=140,128
<128=139,129
<129=138,130
<130=137,131
<131=133,132
<133=134
<134=136,135
<140=142,141
<143=179,164,144
<144=145
<145=146
<146=147
<147=163,148
<148=162,149
<149=161,150
<150=160,151
<151=159,152
<152=156,153
<153=155,154
<156=158,157
<164=165
<165=166
<166=178,167
<167=177,168
<168=176,169
<169=175,170
<170=174,171
<171=173,172
<179=180
<180=182,181
<183=184
<184=186,185
<187=188
<188=190,189
<191=192
<192=196,193
<193=195,194
<196=198,197
<208=209
<209=211,210
<211=213,212
<214=215
<215=217,216
<217=219,218
<220=221
<221=223,222
<223=225,224
<226=227
<227=229,228
<229=231,230
<232=233
<233=235,234
<235=237,236
<238=239
<239=249,240
<240=244,241
<241=243,242
<244=248,245
<245=247,246
<249=251,250
<252=253
<253=255,254
<255=257,256
<258=259
<259=261,260
<262=286,263
<263=280,264
<264=265
<265=277,266
<266=275,267
<267=273,268
<268=269
<269=271,270
<271=272
<273=274
<275=276
<277=279,278
<280=281
<281=283,282
<283=285,284
<286=287
<287=291,288
<288=290,289
<291=293,292
<294=302,295
<295=296
<296=300,297
<297=298
<298=299
<300=301
<302=303
<303=309,304
<304=306,305
<306=308,307
<309=311,310
<311=313,312
<314=315
<315=327,316
<316=326,317
<317=325,318
<318=322,319
<319=321,320
<322=324,323
<327=329,328
<330=331
<331=343,332
<332=342,333
<333=341,334
<334=338,335
<335=337,336
<338=340,339
<343=345,344
<346=347
<347=359,348
<348=358,349
<349=357,350
<350=354,351
<351=353,352
<354=356,355
<359=361,360
<362=370,363
<363=364
<364=368,365
<365=366
<366=367
<368=369
<370=371
<371=373,372
<373=375,374
<376=377
<377=386,378
<378=384,379
<379=380
<380=381
<381=383,382
<384=385
<386=388,387
<389=390
<390=406,391
<391=402,400,396,392
<392=393
<393=395,394
<396=397
<397=399,398
<400=401
<402=403
<403=405,404
<406=407
<408=409
<409=415,410
<410=414,411
<411=413,412
<415=417,416
<426=427
<427=429,428
<430=438,431
<431=432
<432=436,433
<433=434
<434=435
<436=437
<438=439
<439=441,440
<442=443
<443=445,444
<464=465
<465=475,474,466
<466=473,467
<467=471,468
<468=469
<469=470
<471=472
<476=477
<477=481,478
<478=479
<479=480
<481=482
<492=500,493
<493=494
<494=498,495
<495=496
<496=497
<498=499
<500=501
<501=505,502
<502=503
<503=504
<505=506
<507=508
<508=524,523,509
<509=522,510
<510=520,511
<511=516,514,512
<512=513
<514=515
<516=517
<517=519,518
<520=521
<525=533,526
<526=527
<527=531,528
<528=529
<529=530
<531=532
<533=534
<534=536,535
<537=538
<538=540,539
<559=560
<560=570,569,561
<561=568,562
<562=566,563
<563=564
<564=565
<566=567
<571=572
<572=576,573
<573=574
<574=575
<576=577
<587=595,588
<588=589
<589=593,590
<590=591
<591=592
<593=594
<595=596
<596=600,597
<597=598
<598=599
<600=601
<602=603
<603=619,618,604
<604=617,605
<605=615,606
<606=611,609,607
<607=608
<609=610
<611=612
<612=614,613
<615=616
<620=628,621
<621=622
<622=626,623
<623=624
<624=625
<626=627
<628=629
<629=633,630
<630=632,631
<633=635,634
<636=637
<637=639,638
<647=648
<648=650,649
<658=659
<659=669,668,660
<660=667,661
<661=665,662
<662=663
<663=664
<665=666
<670=671
<671=681,680,672
<672=679,673
<673=677,674
<674=675
<675=676
<677=678
<682=683
<683=693,692,684
<684=691,685
<685=689,686
<686=687
<687=688
<689=690
<694=695
<695=699,696
<696=697
<697=698
<699=700
<710=718,711
<711=712
<712=716,713
<713=714
<714=715
<716=717
<718=719
<719=726,720
<720=724,721
<721=722
<722=723
<724=725
<727=728
<728=744,743,729
<729=742,730
<730=740,731
<731=736,734,732
<732=733
<734=735
<736=737
<737=739,738
<740=741
<745=746
<746=753,752,747
<747=751,748
<748=750,749
<754=755
<755=757,756
<765=766
<766=768,767
<776=777
<777=789,788,778
<778=787,779
<779=785,780
<780=781
<781=782
<782=784,783
<785=786
<790=791
<791=797,792
<792=793
<793=794
<794=796,795
<797=798
<808=816,809
<809=810
<810=814,811
<811=812
<812=813
<814=815
<816=817
<817=826,818
<818=824,819
<819=820
<820=821
<821=823,822
<824=825
<827=835,828
<828=829
<829=833,830
<830=831
<831=832
<833=834
<835=836
<836=845,837
<837=843,838
<838=839
<839=840
<840=842,841
<843=844
<846=854,847
<847=848
<848=852,849
<849=850
<850=851
<852=853
<854=855
<855=861,856
<856=857
<857=858
<858=860,859
<861=862
<863=871,864
<864=865
<865=869,866
<866=867
<867=868
<869=870
<871=872
<872=878,873
<873=877,874
<874=876,875
<878=880,879
<959=974,973,960
<960=970,967,964,961
<961=963,962
<964=966,965
<967=969,968
<970=972,971
<974=1026,1010,975
<975=999,988,976
<976=977
<977=978
<978=979
<979=987,980
<980=986,981
<981=985,982
<982=984,983
<988=989
<989=990
<990=998,991
<991=997,992
<992=996,993
<993=995,994
<999=1000
<1000=1002,1001
<1002=1008,1003
<1003=1004
<1004=1005
<1005=1007,1006
<1008=1009
<1010=1018,1011
<1011=1012
<1012=1016,1013
<1013=1014
<1014=1015
<1016=1017
<1018=1019
<1019=1023,1020
<1020=1022,1021
<1023=1025,1024
<1026=1034,1027
<1027=1028
<1028=1032,1029
<1029=1030
<1030=1031
<1032=1033
<1034=1035
<1035=1037,1036
