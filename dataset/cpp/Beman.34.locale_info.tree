>3	FunctionDef	facet_info (const locale & loc , const char * msg)
>4	ParameterList	const locale & loc , const char * msg
>5	Parameter	 
>6	Identifier	msg
>7	ParameterType	const char *
>8	Parameter	 
>9	Identifier	loc
>10	ParameterType	const locale &
>11	ReturnType	void
>12	CompoundStatement	 
>13	ExpressionStatement	 
>14	Statement	 
>15	Statement	 
>16	Statement	 
>17	Statement	 
>18	Statement	 
>19	Statement	 
>20	Statement	 
>21	Statement	 
>22	Statement	 
>23	Statement	 
>24	Statement	 
>25	Statement	 
>26	Statement	 
>27	Statement	 
>28	Statement	 
>29	Statement	 
>30	Statement	 
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	ExpressionStatement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>55	Statement	 
>56	Statement	 
>57	Statement	 
>58	Statement	 
>59	Statement	 
>60	Statement	 
>61	Statement	 
>62	Statement	 
>63	Statement	 
>64	Statement	 
>65	Statement	 
>66	Statement	 
>67	Statement	 
>68	Statement	 
>69	Statement	 
>70	Statement	 
>71	Statement	 
>72	Statement	 
>73	Statement	 
>74	Statement	 
>75	Statement	 
>76	Statement	 
>77	Statement	 
>78	Statement	 
>79	ExpressionStatement	 
>80	Statement	 
>81	Statement	 
>82	Statement	 
>83	Statement	 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>93	Statement	 
>94	Statement	 
>95	Statement	 
>96	Statement	 
>97	Statement	 
>98	Statement	 
>99	Statement	 
>100	Statement	 
>101	Statement	 
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	Statement	 
>112	ExpressionStatement	 
>113	Statement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Statement	 
>133	Statement	 
>134	Statement	 
>135	Statement	 
>136	Statement	 
>137	Statement	 
>138	Statement	 
>139	Statement	 
>140	Statement	 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>150	FunctionDef	default_info ()
>151	ParameterList	 
>152	ReturnType	void
>153	CompoundStatement	 
>154	BlockStarter	 
>155	CompoundStatement	 
>156	ExpressionStatement	cout << \"\nlocale default construction threw
>157	ShiftExpression	cout << \"\nlocale default construction threw
>158	ShiftExpression	\"\nlocale default construction threw
>159	ShiftExpression	ex . what ( ) << endl
>160	Identifier	endl
>161	CallExpression	ex . what ( )
>162	ArgumentList	 
>163	Callee	ex . what
>164	MemberAccess	ex . what
>165	Identifier	what
>166	Identifier	ex
>167	PrimaryExpression	\"\nlocale default construction threw
>168	Identifier	cout
>169	Identifier	ex
>170	BlockStarter	 
>171	CompoundStatement	 
>172	ExpressionStatement	facet_info ( loc , \"locale()\" )
>173	CallExpression	facet_info ( loc , \"locale()\" )
>174	ArgumentList	loc
>175	Argument	\"locale()\"
>176	PrimaryExpression	\"locale()\"
>177	Argument	loc
>178	Identifier	loc
>179	Callee	facet_info
>180	Identifier	facet_info
>181	ExpressionStatement	cout << \"\nlocale default construction OK, name is \" << loc . name ( ) << endl
>182	ShiftExpression	cout << \"\nlocale default construction OK, name is \" << loc . name ( ) << endl
>183	ShiftExpression	\"\nlocale default construction OK, name is \" << loc . name ( ) << endl
>184	ShiftExpression	loc . name ( ) << endl
>185	Identifier	endl
>186	CallExpression	loc . name ( )
>187	ArgumentList	 
>188	Callee	loc . name
>189	MemberAccess	loc . name
>190	Identifier	name
>191	Identifier	loc
>192	PrimaryExpression	\"\nlocale default construction OK, name is \"
>193	Identifier	cout
>194	IdentifierDeclStatement	locale loc ;
>195	IdentifierDecl	loc
>196	Identifier	loc
>197	IdentifierDeclType	locale
>203	FunctionDef	null_string_info ()
>204	ParameterList	 
>205	ReturnType	void
>206	CompoundStatement	 
>207	BlockStarter	 
>208	CompoundStatement	 
>209	ExpressionStatement	cout << \"\nlocale(\\"\\") construction threw
>210	ShiftExpression	cout << \"\nlocale(\\"\\") construction threw
>211	ShiftExpression	\"\nlocale(\\"\\") construction threw
>212	ShiftExpression	ex . what ( ) << endl
>213	Identifier	endl
>214	CallExpression	ex . what ( )
>215	ArgumentList	 
>216	Callee	ex . what
>217	MemberAccess	ex . what
>218	Identifier	what
>219	Identifier	ex
>220	PrimaryExpression	\"\nlocale(\\"\\") construction threw
>221	Identifier	cout
>222	Identifier	ex
>223	BlockStarter	 
>224	CompoundStatement	 
>225	ExpressionStatement	facet_info ( loc , \"locale(\\"\\")\" )
>226	CallExpression	facet_info ( loc , \"locale(\\"\\")\" )
>227	ArgumentList	loc
>228	Argument	\"locale(\\"\\")\"
>229	PrimaryExpression	\"locale(\\"\\")\"
>230	Argument	loc
>231	Identifier	loc
>232	Callee	facet_info
>233	Identifier	facet_info
>234	ExpressionStatement	cout << \"\nlocale(\\"\\") construction OK, name is \" << loc . name ( ) << endl
>235	ShiftExpression	cout << \"\nlocale(\\"\\") construction OK, name is \" << loc . name ( ) << endl
>236	ShiftExpression	\"\nlocale(\\"\\") construction OK, name is \" << loc . name ( ) << endl
>237	ShiftExpression	loc . name ( ) << endl
>238	Identifier	endl
>239	CallExpression	loc . name ( )
>240	ArgumentList	 
>241	Callee	loc . name
>242	MemberAccess	loc . name
>243	Identifier	name
>244	Identifier	loc
>245	PrimaryExpression	\"\nlocale(\\"\\") construction OK, name is \"
>246	Identifier	cout
>247	IdentifierDeclStatement	locale loc ( \"\" ) ;
>248	IdentifierDecl	loc ( \"\" )
>249	PrimaryExpression	\"\"
>250	Identifier	loc
>251	IdentifierDeclType	locale
>257	FunctionDef	classic_info ()
>258	ParameterList	 
>259	ReturnType	void
>260	CompoundStatement	 
>261	BlockStarter	 
>262	CompoundStatement	 
>263	ExpressionStatement	cout << \"\nlocale(locale
>264	ShiftExpression	cout << \"\nlocale(locale
>265	ShiftExpression	\"\nlocale(locale
>266	ShiftExpression	ex . what ( ) << endl
>267	Identifier	endl
>268	CallExpression	ex . what ( )
>269	ArgumentList	 
>270	Callee	ex . what
>271	MemberAccess	ex . what
>272	Identifier	what
>273	Identifier	ex
>274	PrimaryExpression	\"\nlocale(locale
>275	Identifier	cout
>276	Identifier	ex
>277	BlockStarter	 
>278	CompoundStatement	 
>279	ExpressionStatement	facet_info ( loc , \"locale
>280	CallExpression	facet_info ( loc , \"locale
>281	ArgumentList	loc
>282	Argument	\"locale
>283	PrimaryExpression	\"locale
>284	Argument	loc
>285	Identifier	loc
>286	Callee	facet_info
>287	Identifier	facet_info
>288	ExpressionStatement	cout << \"\nlocale(locale
>289	ShiftExpression	cout << \"\nlocale(locale
>290	ShiftExpression	\"\nlocale(locale
>291	ShiftExpression	loc . name ( ) << endl
>292	Identifier	endl
>293	CallExpression	loc . name ( )
>294	ArgumentList	 
>295	Callee	loc . name
>296	MemberAccess	loc . name
>297	Identifier	name
>298	Identifier	loc
>299	PrimaryExpression	\"\nlocale(locale
>300	Identifier	cout
>301	IdentifierDeclStatement	locale loc ( locale 
>302	IdentifierDecl	loc ( locale 
>303	CallExpression	locale 
>304	ArgumentList	 
>305	Callee	locale 
>306	Identifier	locale 
>307	Identifier	loc
>308	IdentifierDeclType	locale
>314	FunctionDef	codecvt_info (const locale & loc)
>315	ParameterList	const locale & loc
>316	Parameter	 
>317	Identifier	loc
>318	ParameterType	const locale &
>319	ReturnType	void
>320	CompoundStatement	 
>321	ExpressionStatement	 
>322	ShiftExpression	cout << endl
>323	Identifier	endl
>324	Identifier	cout
>325	ForStatement	for ( int i = 0 ; i < 128 ; ++ i )
>326	CompoundStatement	 
>327	IfStatement	if ( i % 8 )
>328	ElseStatement	else
>329	ExpressionStatement	 
>330	ShiftExpression	cout << endl
>331	Identifier	endl
>332	Identifier	cout
>333	ExpressionStatement	 
>334	ShiftExpression	cout << ','
>335	PrimaryExpression	','
>336	Identifier	cout
>337	Condition	 
>338	MultiplicativeExpression	i % 8
>339	PrimaryExpression	8
>340	Identifier	i
>341	ExpressionStatement	 
>342	ShiftExpression	cout << s [ i ] << '
>343	ShiftExpression	s [ i ] << '
>344	ShiftExpression	'
>345	CastExpression	( unsigned short ) ( ws [ i ] )
>346	ArrayIndexing	ws [ i ]
>347	Identifier	i
>348	Identifier	ws
>349	CastTarget	unsigned short
>350	PrimaryExpression	'
>351	ArrayIndexing	s [ i ]
>352	Identifier	i
>353	Identifier	s
>354	Identifier	cout
>355	UnaryExpression	 
>356	Identifier	i
>357	IncDec	++
>358	Condition	 
>359	RelationalExpression	i < 128
>360	PrimaryExpression	128
>361	Identifier	i
>362	ForInit	 
>363	IdentifierDeclStatement	int i = 0 ;
>364	IdentifierDecl	i = 0
>365	AssignmentExpr	i = 0
>366	PrimaryExpression	0
>367	Identifier	i
>368	Identifier	i
>369	IdentifierDeclType	int
>370	ExpressionStatement	 
>371	ShiftExpression	cout << hex
>372	Identifier	hex
>373	Identifier	cout
>374	CompoundStatement	 
>375	ReturnStatement	 
>376	ExpressionStatement	 
>377	ShiftExpression	cout << \"Oops! conversion returned \" << result << endl
>378	ShiftExpression	\"Oops! conversion returned \" << result << endl
>379	ShiftExpression	result << endl
>380	Identifier	endl
>381	Identifier	result
>382	PrimaryExpression	\"Oops! conversion returned \"
>383	Identifier	cout
>384	Statement	 
>385	Statement	 
>386	Statement	 
>387	Statement	 
>388	Statement	 
>389	Statement	 
>390	Statement	 
>391	Statement	 
>392	Statement	 
>393	Statement	 
>394	Statement	 
>395	Statement	 
>396	Statement	 
>397	Statement	 
>398	Statement	 
>399	BlockStarter	 
>400	CompoundStatement	 
>401	ReturnStatement	return ;
>402	ExpressionStatement	cout << \"exception
>403	ShiftExpression	cout << \"exception
>404	ShiftExpression	\"exception
>405	ShiftExpression	x . what ( ) << endl
>406	Identifier	endl
>407	CallExpression	x . what ( )
>408	ArgumentList	 
>409	Callee	x . what
>410	MemberAccess	x . what
>411	Identifier	what
>412	Identifier	x
>413	PrimaryExpression	\"exception
>414	Identifier	cout
>415	Identifier	x
>416	BlockStarter	 
>417	CompoundStatement	 
>418	ExpressionStatement	( loc ) . in ( state , s , s + 128 , from_next , ws , ws + 128 , to_next )
>419	CallExpression	( loc ) . in ( state , s , s + 128 , from_next , ws , ws + 128 , to_next )
>420	ArgumentList	state
>421	Argument	to_next
>422	Identifier	to_next
>423	Argument	ws + 128
>424	AdditiveExpression	ws + 128
>425	PrimaryExpression	128
>426	Identifier	ws
>427	Argument	ws
>428	Identifier	ws
>429	Argument	from_next
>430	Identifier	from_next
>431	Argument	s + 128
>432	AdditiveExpression	s + 128
>433	PrimaryExpression	128
>434	Identifier	s
>435	Argument	s
>436	Identifier	s
>437	Argument	state
>438	Identifier	state
>439	Callee	( loc ) . in
>440	MemberAccess	( loc ) . in
>441	Identifier	in
>442	Identifier	loc
>443	Statement	>
>444	Statement	>
>445	Statement	mbstate_t
>446	Statement	,
>447	Statement	char
>448	Statement	,
>449	Statement	wchar_t
>450	Statement	<
>451	Statement	codecvt
>452	Statement	<
>453	Statement	use_facet
>454	Statement	=
>455	Statement	result
>456	IdentifierDeclStatement	 
>457	IdentifierDecl	result
>458	Identifier	result
>459	IdentifierDeclType	codecvt < wchar_t , char , mbstate_t > 
>460	IdentifierDeclStatement	 
>461	IdentifierDecl	* to_next
>462	Identifier	to_next
>463	IdentifierDeclType	wchar_t *
>464	IdentifierDeclStatement	 
>465	IdentifierDecl	* from_next
>466	Identifier	from_next
>467	IdentifierDeclType	const char *
>468	IdentifierDeclStatement	 
>469	IdentifierDecl	state = mbstate_t ( )
>470	AssignmentExpr	state = mbstate_t ( )
>471	CallExpression	mbstate_t ( )
>472	ArgumentList	 
>473	Callee	mbstate_t
>474	Identifier	mbstate_t
>475	Identifier	state
>476	Identifier	state
>477	IdentifierDeclType	mbstate_t
>478	ForStatement	for ( int i = 0 ; i < 128 ; ++ i )
>479	CompoundStatement	 
>480	ExpressionStatement	 
>481	PrimaryExpression	'\0'
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	ExpressionStatement	 
>489	AssignmentExpr	s [ i ] = char ( 128 + i )
>490	CallExpression	char ( 128 + i )
>491	ArgumentList	128 + i
>492	Argument	128 + i
>493	AdditiveExpression	128 + i
>494	Identifier	i
>495	PrimaryExpression	128
>496	Callee	char
>497	Identifier	char
>498	ArrayIndexing	s [ i ]
>499	Identifier	i
>500	Identifier	s
>501	UnaryExpression	 
>502	Identifier	i
>503	IncDec	++
>504	Condition	 
>505	RelationalExpression	i < 128
>506	PrimaryExpression	128
>507	Identifier	i
>508	ForInit	 
>509	IdentifierDeclStatement	int i = 0 ;
>510	IdentifierDecl	i = 0
>511	AssignmentExpr	i = 0
>512	PrimaryExpression	0
>513	Identifier	i
>514	Identifier	i
>515	IdentifierDeclType	int
>516	IdentifierDeclStatement	 
>517	IdentifierDecl	ws [ 128 ]
>518	PrimaryExpression	128
>519	Identifier	ws
>520	IdentifierDeclType	wchar_t [ 128 ]
>521	IdentifierDeclStatement	 
>522	IdentifierDecl	s [ 128 ]
>523	PrimaryExpression	128
>524	Identifier	s
>525	IdentifierDeclType	char [ 128 ]
>526	ExpressionStatement	 
>527	ShiftExpression	cout << \"\ncodecvt conversion for locale \" << loc . name ( ) << endl
>528	ShiftExpression	\"\ncodecvt conversion for locale \" << loc . name ( ) << endl
>529	ShiftExpression	loc . name ( ) << endl
>530	Identifier	endl
>531	CallExpression	loc . name ( )
>532	ArgumentList	 
>533	Callee	loc . name
>534	MemberAccess	loc . name
>535	Identifier	name
>536	Identifier	loc
>537	PrimaryExpression	\"\ncodecvt conversion for locale \"
>538	Identifier	cout
>555	FunctionDef	main ()
>556	ParameterList	 
>557	ReturnType	int
>558	CompoundStatement	 
>559	ReturnStatement	 
>560	PrimaryExpression	0
>561	ExpressionStatement	 
>562	CallExpression	codecvt_info ( locale ( \"\" ) )
>563	ArgumentList	locale ( \"\" )
>564	Argument	locale ( \"\" )
>565	CallExpression	locale ( \"\" )
>566	ArgumentList	\"\"
>567	Argument	\"\"
>568	PrimaryExpression	\"\"
>569	Callee	locale
>570	Identifier	locale
>571	Callee	codecvt_info
>572	Identifier	codecvt_info
>573	ExpressionStatement	 
>574	CallExpression	codecvt_info ( locale ( ) )
>575	ArgumentList	locale ( )
>576	Argument	locale ( )
>577	CallExpression	locale ( )
>578	ArgumentList	 
>579	Callee	locale
>580	Identifier	locale
>581	Callee	codecvt_info
>582	Identifier	codecvt_info
>583	ExpressionStatement	 
>584	CallExpression	classic_info ( )
>585	ArgumentList	 
>586	Callee	classic_info
>587	Identifier	classic_info
>588	ExpressionStatement	 
>589	CallExpression	null_string_info ( )
>590	ArgumentList	 
>591	Callee	null_string_info
>592	Identifier	null_string_info
>593	ExpressionStatement	 
>594	CallExpression	default_info ( )
>595	ArgumentList	 
>596	Callee	default_info
>597	Identifier	default_info
>598	ExpressionStatement	 
>599	ShiftExpression	cout << \"BOOST_NO_CXX11_CHAR32_T is not defined\" << endl
>600	ShiftExpression	\"BOOST_NO_CXX11_CHAR32_T is not defined\" << endl
>601	Identifier	endl
>602	PrimaryExpression	\"BOOST_NO_CXX11_CHAR32_T is not defined\"
>603	Identifier	cout
>604	ExpressionStatement	 
>605	ShiftExpression	cout << \"BOOST_NO_CXX11_CHAR16_T is not defined\" << endl
>606	ShiftExpression	\"BOOST_NO_CXX11_CHAR16_T is not defined\" << endl
>607	Identifier	endl
>608	PrimaryExpression	\"BOOST_NO_CXX11_CHAR16_T is not defined\"
>609	Identifier	cout
>610	ExpressionStatement	 
>611	ShiftExpression	cout << \"BOOST_NO_CXX11_HDR_CODECVT is not defined\" << endl
>612	ShiftExpression	\"BOOST_NO_CXX11_HDR_CODECVT is not defined\" << endl
>613	Identifier	endl
>614	PrimaryExpression	\"BOOST_NO_CXX11_HDR_CODECVT is not defined\"
>615	Identifier	cout
>616	ExpressionStatement	 
>617	ShiftExpression	cout << \"\nLANG environmental variable is \" << ( lang ? lang 
>618	ShiftExpression	\"\nLANG environmental variable is \" << ( lang ? lang 
>619	ShiftExpression	( lang ? lang 
>620	Identifier	endl
>621	ConditionalExpression	lang ? lang 
>622	PrimaryExpression	\"not present\"
>623	Identifier	lang
>624	Condition	lang
>625	Identifier	lang
>626	PrimaryExpression	\"\nLANG environmental variable is \"
>627	Identifier	cout
>628	IdentifierDeclStatement	 
>629	IdentifierDecl	* lang = getenv ( \"LANG\" )
>630	AssignmentExpr	* lang = getenv ( \"LANG\" )
>631	CallExpression	getenv ( \"LANG\" )
>632	ArgumentList	\"LANG\"
>633	Argument	\"LANG\"
>634	PrimaryExpression	\"LANG\"
>635	Callee	getenv
>636	Identifier	getenv
>637	Identifier	lang
>638	Identifier	lang
>639	IdentifierDeclType	const char *
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62
<150=153,152,151
<153=170,154
<154=169,155
<155=156
<156=157
<157=168,158
<158=167,159
<159=161,160
<161=163,162
<163=164
<164=166,165
<170=171
<171=194,181,172
<172=173
<173=179,174
<174=177,175
<175=176
<177=178
<179=180
<181=182
<182=193,183
<183=192,184
<184=186,185
<186=188,187
<188=189
<189=191,190
<194=195
<195=197,196
<203=206,205,204
<206=223,207
<207=222,208
<208=209
<209=210
<210=221,211
<211=220,212
<212=214,213
<214=216,215
<216=217
<217=219,218
<223=224
<224=247,234,225
<225=226
<226=232,227
<227=230,228
<228=229
<230=231
<232=233
<234=235
<235=246,236
<236=245,237
<237=239,238
<239=241,240
<241=242
<242=244,243
<247=248
<248=251,250,249
<257=260,259,258
<260=277,261
<261=276,262
<262=263
<263=264
<264=275,265
<265=274,266
<266=268,267
<268=270,269
<270=271
<271=273,272
<277=278
<278=301,288,279
<279=280
<280=286,281
<281=284,282
<282=283
<284=285
<286=287
<288=289
<289=300,290
<290=299,291
<291=293,292
<293=295,294
<295=296
<296=298,297
<301=302
<302=308,307,303
<303=305,304
<305=306
<314=320,319,315
<315=316
<316=318,317
<320=526,521,516,478,468,464,460,456,416,399,398,397,396,395,394,393,392,391,390,389,388,387,386,385,384,374,370,325,321
<321=322
<322=324,323
<325=362,358,355,326
<326=341,327
<327=337,333,328
<328=329
<329=330
<330=332,331
<333=334
<334=336,335
<337=338
<338=340,339
<341=342
<342=354,343
<343=351,344
<344=350,345
<345=349,346
<346=348,347
<351=353,352
<355=357,356
<358=359
<359=361,360
<362=363
<363=364
<364=369,368,365
<365=367,366
<370=371
<371=373,372
<374=376,375
<376=377
<377=383,378
<378=382,379
<379=381,380
<399=415,400
<400=402,401
<402=403
<403=414,404
<404=413,405
<405=407,406
<407=409,408
<409=410
<410=412,411
<416=417
<417=455,454,453,452,451,450,449,448,447,446,445,444,443,418
<418=419
<419=439,420
<420=437,435,431,429,427,423,421
<421=422
<423=424
<424=426,425
<427=428
<429=430
<431=432
<432=434,433
<435=436
<437=438
<439=440
<440=442,441
<456=457
<457=459,458
<460=461
<461=463,462
<464=465
<465=467,466
<468=469
<469=477,476,470
<470=475,471
<471=473,472
<473=474
<478=508,504,501,479
<479=488,487,486,485,484,483,482,480
<480=481
<488=489
<489=498,490
<490=496,491
<491=492
<492=493
<493=495,494
<496=497
<498=500,499
<501=503,502
<504=505
<505=507,506
<508=509
<509=510
<510=515,514,511
<511=513,512
<516=517
<517=520,519,518
<521=522
<522=525,524,523
<526=527
<527=538,528
<528=537,529
<529=531,530
<531=533,532
<533=534
<534=536,535
<555=558,557,556
<558=628,616,610,604,598,593,588,583,573,561,559
<559=560
<561=562
<562=571,563
<563=564
<564=565
<565=569,566
<566=567
<567=568
<569=570
<571=572
<573=574
<574=581,575
<575=576
<576=577
<577=579,578
<579=580
<581=582
<583=584
<584=586,585
<586=587
<588=589
<589=591,590
<591=592
<593=594
<594=596,595
<596=597
<598=599
<599=603,600
<600=602,601
<604=605
<605=609,606
<606=608,607
<610=611
<611=615,612
<612=614,613
<616=617
<617=627,618
<618=626,619
<619=621,620
<621=624,623,622
<624=625
<628=629
<629=639,638,630
<630=637,631
<631=635,632
<632=633
<633=634
<635=636
