>12	FunctionDef	onRender ()
>13	ParameterList	 
>14	ReturnType	void
>15	CompoundStatement	 
>16	ExpressionStatement	 
>17	CallExpression	glEnd ( )
>18	ArgumentList	 
>19	Callee	glEnd
>20	Identifier	glEnd
>21	ForStatement	for ( int x = 0 ; x < 800 ; x += TIMELINE_GRIDSIZE )
>22	CompoundStatement	 
>23	ExpressionStatement	 
>24	CallExpression	glVertex3f ( x , 5 , 0 )
>25	ArgumentList	x
>26	Argument	0
>27	PrimaryExpression	0
>28	Argument	5
>29	PrimaryExpression	5
>30	Argument	x
>31	Identifier	x
>32	Callee	glVertex3f
>33	Identifier	glVertex3f
>34	ExpressionStatement	 
>35	CallExpression	glVertex3f ( x , - 5 , 0 )
>36	ArgumentList	x
>37	Argument	0
>38	PrimaryExpression	0
>39	Argument	- 5
>40	UnaryOp	- 5
>41	PrimaryExpression	5
>42	UnaryOperator	-
>43	Argument	x
>44	Identifier	x
>45	Callee	glVertex3f
>46	Identifier	glVertex3f
>47	AssignmentExpr	 
>48	Identifier	TIMELINE_GRIDSIZE
>49	Identifier	x
>50	Condition	 
>51	RelationalExpression	x < 800
>52	PrimaryExpression	800
>53	Identifier	x
>54	ForInit	 
>55	IdentifierDeclStatement	int x = 0 ;
>56	IdentifierDecl	x = 0
>57	AssignmentExpr	x = 0
>58	PrimaryExpression	0
>59	Identifier	x
>60	Identifier	x
>61	IdentifierDeclType	int
>62	ExpressionStatement	 
>63	CallExpression	glColor4f ( 1 , 1 , 1 , 1 )
>64	ArgumentList	1
>65	Argument	1
>66	PrimaryExpression	1
>67	Argument	1
>68	PrimaryExpression	1
>69	Argument	1
>70	PrimaryExpression	1
>71	Argument	1
>72	PrimaryExpression	1
>73	Callee	glColor4f
>74	Identifier	glColor4f
>75	ExpressionStatement	 
>76	CallExpression	glBegin ( GL_LINES )
>77	ArgumentList	GL_LINES
>78	Argument	GL_LINES
>79	Identifier	GL_LINES
>80	Callee	glBegin
>81	Identifier	glBegin
>82	ExpressionStatement	 
>83	CallExpression	glLineWidth ( 1 )
>84	ArgumentList	1
>85	Argument	1
>86	PrimaryExpression	1
>87	Callee	glLineWidth
>88	Identifier	glLineWidth
>105	FunctionDef	AnimationEditor 
>106	ParameterList	 
>107	ReturnType	void
>108	CompoundStatement	 
>109	IfStatement	if ( doit )
>110	ExpressionStatement	 
>111	CallExpression	core -> setMousePosition ( mp )
>112	ArgumentList	mp
>113	Argument	mp
>114	Identifier	mp
>115	Callee	core -> setMousePosition
>116	PtrMemberAccess	core -> setMousePosition
>117	Identifier	setMousePosition
>118	Identifier	core
>119	Condition	 
>120	Identifier	doit
>121	IfStatement	if ( mp . y > 500 )
>122	CompoundStatement	 
>123	ExpressionStatement	 
>124	AssignmentExpr	doit = true
>125	Identifier	true
>126	Identifier	doit
>127	ExpressionStatement	 
>128	AssignmentExpr	mp . y = 500
>129	PrimaryExpression	500
>130	MemberAccess	mp . y
>131	Identifier	y
>132	Identifier	mp
>133	Condition	 
>134	RelationalExpression	mp . y > 500
>135	PrimaryExpression	500
>136	MemberAccess	mp . y
>137	Identifier	y
>138	Identifier	mp
>139	IfStatement	if ( mp . y < 100 )
>140	CompoundStatement	 
>141	ExpressionStatement	 
>142	AssignmentExpr	doit = true
>143	Identifier	true
>144	Identifier	doit
>145	ExpressionStatement	 
>146	AssignmentExpr	mp . y = 100
>147	PrimaryExpression	100
>148	MemberAccess	mp . y
>149	Identifier	y
>150	Identifier	mp
>151	Condition	 
>152	RelationalExpression	mp . y < 100
>153	PrimaryExpression	100
>154	MemberAccess	mp . y
>155	Identifier	y
>156	Identifier	mp
>157	IfStatement	if ( mp . x > 600 )
>158	CompoundStatement	 
>159	ExpressionStatement	 
>160	AssignmentExpr	doit = true
>161	Identifier	true
>162	Identifier	doit
>163	ExpressionStatement	 
>164	AssignmentExpr	mp . x = 600
>165	PrimaryExpression	600
>166	MemberAccess	mp . x
>167	Identifier	x
>168	Identifier	mp
>169	Condition	 
>170	RelationalExpression	mp . x > 600
>171	PrimaryExpression	600
>172	MemberAccess	mp . x
>173	Identifier	x
>174	Identifier	mp
>175	IfStatement	if ( mp . x < 200 )
>176	CompoundStatement	 
>177	ExpressionStatement	 
>178	AssignmentExpr	doit = true
>179	Identifier	true
>180	Identifier	doit
>181	ExpressionStatement	 
>182	AssignmentExpr	mp . x = 200
>183	PrimaryExpression	200
>184	MemberAccess	mp . x
>185	Identifier	x
>186	Identifier	mp
>187	Condition	 
>188	RelationalExpression	mp . x < 200
>189	PrimaryExpression	200
>190	MemberAccess	mp . x
>191	Identifier	x
>192	Identifier	mp
>193	IdentifierDeclStatement	 
>194	IdentifierDecl	doit = false
>195	AssignmentExpr	doit = false
>196	Identifier	false
>197	Identifier	false
>198	Identifier	doit
>199	IdentifierDeclType	bool
>200	IdentifierDeclStatement	 
>201	IdentifierDecl	mp = core -> mouse . position
>202	AssignmentExpr	mp = core -> mouse . position
>203	MemberAccess	core -> mouse . position
>204	Identifier	position
>205	PtrMemberAccess	core -> mouse
>206	Identifier	mouse
>207	Identifier	core
>208	Identifier	mp
>209	Identifier	mp
>210	IdentifierDeclType	Vector
>224	FunctionDef	KeyframeWidget 
>225	ParameterList	int key
>226	Parameter	 
>227	Identifier	key
>228	ParameterType	int
>229	CompoundStatement	 
>230	ExpressionStatement	 
>231	CallExpression	ae -> keyframeWidgets . push_back ( this )
>232	ArgumentList	this
>233	Argument	this
>234	Identifier	this
>235	Callee	ae -> keyframeWidgets . push_back
>236	MemberAccess	ae -> keyframeWidgets . push_back
>237	Identifier	push_back
>238	PtrMemberAccess	ae -> keyframeWidgets
>239	Identifier	keyframeWidgets
>240	Identifier	ae
>241	ExpressionStatement	 
>242	AssignmentExpr	this -> key = key
>243	Identifier	key
>244	PtrMemberAccess	this -> key
>245	Identifier	key
>246	Identifier	this
>247	ExpressionStatement	 
>248	CallExpression	addChild ( b , PM_POINTER )
>249	ArgumentList	b
>250	Argument	PM_POINTER
>251	Identifier	PM_POINTER
>252	Argument	b
>253	Identifier	b
>254	Callee	addChild
>255	Identifier	addChild
>256	ExpressionStatement	 
>257	CallExpression	b -> setFontSize ( 12 )
>258	ArgumentList	12
>259	Argument	12
>260	PrimaryExpression	12
>261	Callee	b -> setFontSize
>262	PtrMemberAccess	b -> setFontSize
>263	Identifier	setFontSize
>264	Identifier	b
>265	ExpressionStatement	 
>266	AssignmentExpr	b -> position = Vector ( 1 , - 15 )
>267	CallExpression	Vector ( 1 , - 15 )
>268	ArgumentList	1
>269	Argument	- 15
>270	UnaryOp	- 15
>271	PrimaryExpression	15
>272	UnaryOperator	-
>273	Argument	1
>274	PrimaryExpression	1
>275	Callee	Vector
>276	Identifier	Vector
>277	PtrMemberAccess	b -> position
>278	Identifier	position
>279	Identifier	b
>280	ExpressionStatement	 
>281	AssignmentExpr	b = new BitmapText ( & dsq -> smallFont )
>282	UnaryOp	& dsq -> smallFont
>283	PtrMemberAccess	dsq -> smallFont
>284	Identifier	smallFont
>285	Identifier	dsq
>286	UnaryOperator	&
>287	Identifier	b
>288	ExpressionStatement	 
>289	CallExpression	setWidthHeight ( 15 , 30 )
>290	ArgumentList	15
>291	Argument	30
>292	PrimaryExpression	30
>293	Argument	15
>294	PrimaryExpression	15
>295	Callee	setWidthHeight
>296	Identifier	setWidthHeight
>297	ExpressionStatement	 
>298	CallExpression	setTexture ( \"keyframe\" )
>299	ArgumentList	\"keyframe\"
>300	Argument	\"keyframe\"
>301	PrimaryExpression	\"keyframe\"
>302	Callee	setTexture
>303	Identifier	setTexture
>322	FunctionDef	KeyframeWidget 
>323	ParameterList	 
>324	ReturnType	void
>325	CompoundStatement	 
>326	IfStatement	if ( ! offset . isInterpolating ( ) )
>327	ExpressionStatement	 
>328	CallExpression	offset . interpolateTo ( Vector ( offset . x - 80 , 0 ) , 0.1 , 0 , 0 , 0 )
>329	ArgumentList	Vector ( offset . x - 80 , 0 )
>330	Argument	0
>331	PrimaryExpression	0
>332	Argument	0
>333	PrimaryExpression	0
>334	Argument	0
>335	PrimaryExpression	0
>336	Argument	0.1
>337	PrimaryExpression	0.1
>338	Argument	Vector ( offset . x - 80 , 0 )
>339	CallExpression	Vector ( offset . x - 80 , 0 )
>340	ArgumentList	offset . x - 80
>341	Argument	0
>342	PrimaryExpression	0
>343	Argument	offset . x - 80
>344	AdditiveExpression	offset . x - 80
>345	PrimaryExpression	80
>346	MemberAccess	offset . x
>347	Identifier	x
>348	Identifier	offset
>349	Callee	Vector
>350	Identifier	Vector
>351	Callee	offset . interpolateTo
>352	MemberAccess	offset . interpolateTo
>353	Identifier	interpolateTo
>354	Identifier	offset
>355	Condition	 
>356	UnaryOp	! offset . isInterpolating ( )
>357	CallExpression	offset . isInterpolating ( )
>358	ArgumentList	 
>359	Callee	offset . isInterpolating
>360	MemberAccess	offset . isInterpolating
>361	Identifier	isInterpolating
>362	Identifier	offset
>363	UnaryOperator	!
>371	FunctionDef	KeyframeWidget 
>372	ParameterList	 
>373	ReturnType	void
>374	CompoundStatement	 
>375	IfStatement	if ( ! offset . isInterpolating ( ) )
>376	ExpressionStatement	 
>377	CallExpression	offset . interpolateTo ( Vector ( offset . x + 80 , 0 ) , 0.1 , 0 , 0 , 0 )
>378	ArgumentList	Vector ( offset . x + 80 , 0 )
>379	Argument	0
>380	PrimaryExpression	0
>381	Argument	0
>382	PrimaryExpression	0
>383	Argument	0
>384	PrimaryExpression	0
>385	Argument	0.1
>386	PrimaryExpression	0.1
>387	Argument	Vector ( offset . x + 80 , 0 )
>388	CallExpression	Vector ( offset . x + 80 , 0 )
>389	ArgumentList	offset . x + 80
>390	Argument	0
>391	PrimaryExpression	0
>392	Argument	offset . x + 80
>393	AdditiveExpression	offset . x + 80
>394	PrimaryExpression	80
>395	MemberAccess	offset . x
>396	Identifier	x
>397	Identifier	offset
>398	Callee	Vector
>399	Identifier	Vector
>400	Callee	offset . interpolateTo
>401	MemberAccess	offset . interpolateTo
>402	Identifier	interpolateTo
>403	Identifier	offset
>404	Condition	 
>405	UnaryOp	! offset . isInterpolating ( )
>406	CallExpression	offset . isInterpolating ( )
>407	ArgumentList	 
>408	Callee	offset . isInterpolating
>409	MemberAccess	offset . isInterpolating
>410	Identifier	isInterpolating
>411	Identifier	offset
>412	UnaryOperator	!
>420	FunctionDef	KeyframeWidget 
>421	ParameterList	float dt
>422	Parameter	 
>423	Identifier	dt
>424	ParameterType	float
>425	ReturnType	void
>426	CompoundStatement	 
>427	ExpressionStatement	 
>428	AssignmentExpr	position . y = KEYFRAME_POS_Y
>429	Identifier	KEYFRAME_POS_Y
>430	MemberAccess	position . y
>431	Identifier	y
>432	Identifier	position
>433	IfStatement	if ( movingWidget == this && ! core -> mouse . buttons . left )
>434	CompoundStatement	 
>435	ReturnStatement	 
>436	ExpressionStatement	 
>437	CallExpression	ae -> reorderKeys ( )
>438	ArgumentList	 
>439	Callee	ae -> reorderKeys
>440	PtrMemberAccess	ae -> reorderKeys
>441	Identifier	reorderKeys
>442	Identifier	ae
>443	ExpressionStatement	 
>444	AssignmentExpr	movingWidget = 0
>445	PrimaryExpression	0
>446	Identifier	movingWidget
>447	Condition	 
>448	AndExpression	movingWidget == this && ! core -> mouse . buttons . left
>449	UnaryOp	! core -> mouse . buttons . left
>450	MemberAccess	core -> mouse . buttons . left
>451	Identifier	left
>452	MemberAccess	core -> mouse . buttons
>453	Identifier	buttons
>454	PtrMemberAccess	core -> mouse
>455	Identifier	mouse
>456	Identifier	core
>457	UnaryOperator	!
>458	EqualityExpression	movingWidget == this
>459	Identifier	this
>460	Identifier	movingWidget
>461	IfStatement	if ( movingWidget == this )
>462	ElseStatement	else
>463	CompoundStatement	 
>464	ExpressionStatement	 
>465	AssignmentExpr	this -> position . x = ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> \
>466	AdditiveExpression	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t * TIMELINE_GRIDSIZE * ( \
>467	MultiplicativeExpression	TIMELINE_GRIDSIZE / 2
>468	PrimaryExpression	2
>469	Identifier	TIMELINE_GRIDSIZE
>470	MultiplicativeExpression	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t * TIMELINE_GRIDSIZE * ( \
>471	MultiplicativeExpression	TIMELINE_GRIDSIZE * ( 1 / TIMELINE_UNIT )
>472	MultiplicativeExpression	1 / TIMELINE_UNIT
>473	Identifier	TIMELINE_UNIT
>474	PrimaryExpression	1
>475	Identifier	TIMELINE_GRIDSIZE
>476	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t
>477	Identifier	t
>478	CallExpression	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key )
>479	ArgumentList	this -> key
>480	Argument	this -> key
>481	PtrMemberAccess	this -> key
>482	Identifier	key
>483	Identifier	this
>484	Callee	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>485	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>486	Identifier	getKeyframe
>487	CallExpression	ae -> editSprite -> getCurrentAnimation ( )
>488	ArgumentList	 
>489	Callee	ae -> editSprite -> getCurrentAnimation
>490	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation
>491	Identifier	getCurrentAnimation
>492	PtrMemberAccess	ae -> editSprite
>493	Identifier	editSprite
>494	Identifier	ae
>495	MemberAccess	this -> position . x
>496	Identifier	x
>497	PtrMemberAccess	this -> position
>498	Identifier	position
>499	Identifier	this
>500	CompoundStatement	 
>501	IfStatement	if ( core -> getShiftState ( ) )
>502	CompoundStatement	 
>503	ExpressionStatement	 
>504	CallExpression	ae -> moveNextWidgets ( newT - lastT )
>505	ArgumentList	newT - lastT
>506	Argument	newT - lastT
>507	AdditiveExpression	newT - lastT
>508	Identifier	lastT
>509	Identifier	newT
>510	Callee	ae -> moveNextWidgets
>511	PtrMemberAccess	ae -> moveNextWidgets
>512	Identifier	moveNextWidgets
>513	Identifier	ae
>514	Condition	 
>515	CallExpression	core -> getShiftState ( )
>516	ArgumentList	 
>517	Callee	core -> getShiftState
>518	PtrMemberAccess	core -> getShiftState
>519	Identifier	getShiftState
>520	Identifier	core
>521	ExpressionStatement	 
>522	AssignmentExpr	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t = newT
>523	Identifier	newT
>524	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t
>525	Identifier	t
>526	CallExpression	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key )
>527	ArgumentList	this -> key
>528	Argument	this -> key
>529	PtrMemberAccess	this -> key
>530	Identifier	key
>531	Identifier	this
>532	Callee	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>533	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>534	Identifier	getKeyframe
>535	CallExpression	ae -> editSprite -> getCurrentAnimation ( )
>536	ArgumentList	 
>537	Callee	ae -> editSprite -> getCurrentAnimation
>538	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation
>539	Identifier	getCurrentAnimation
>540	PtrMemberAccess	ae -> editSprite
>541	Identifier	editSprite
>542	Identifier	ae
>543	IdentifierDeclStatement	 
>544	IdentifierDecl	newT = int ( this -> position . x / TIMELINE_GRIDSIZE ) * TIMELINE_UNIT
>545	AssignmentExpr	newT = int ( this -> position . x / TIMELINE_GRIDSIZE ) * TIMELINE_UNIT
>546	MultiplicativeExpression	int ( this -> position . x / TIMELINE_GRIDSIZE ) * TIMELINE_UNIT
>547	Identifier	TIMELINE_UNIT
>548	CallExpression	int ( this -> position . x / TIMELINE_GRIDSIZE )
>549	ArgumentList	this -> position . x / TIMELINE_GRIDSIZE
>550	Argument	this -> position . x / TIMELINE_GRIDSIZE
>551	MultiplicativeExpression	this -> position . x / TIMELINE_GRIDSIZE
>552	Identifier	TIMELINE_GRIDSIZE
>553	MemberAccess	this -> position . x
>554	Identifier	x
>555	PtrMemberAccess	this -> position
>556	Identifier	position
>557	Identifier	this
>558	Callee	int
>559	Identifier	int
>560	Identifier	newT
>561	Identifier	newT
>562	IdentifierDeclType	float
>563	ExpressionStatement	 
>564	AssignmentExpr	this -> position . x = int ( ( core -> mouse . position . x - offset . x ) / TIMELINE_GRIDSIZE ) * TIMELINE_\
>565	AdditiveExpression	int ( ( core -> mouse . position . x - offset . x ) / TIMELINE_GRIDSIZE ) * TIMELINE_GRIDSIZE + TIMELINE_\
>566	MultiplicativeExpression	TIMELINE_GRIDSIZE / 2
>567	PrimaryExpression	2
>568	Identifier	TIMELINE_GRIDSIZE
>569	MultiplicativeExpression	int ( ( core -> mouse . position . x - offset . x ) / TIMELINE_GRIDSIZE ) * TIMELINE_GRIDSIZE
>570	Identifier	TIMELINE_GRIDSIZE
>571	CallExpression	int ( ( core -> mouse . position . x - offset . x ) / TIMELINE_GRIDSIZE )
>572	ArgumentList	( core -> mouse . position . x - offset . x ) / TIMELINE_GRIDSIZE
>573	Argument	( core -> mouse . position . x - offset . x ) / TIMELINE_GRIDSIZE
>574	MultiplicativeExpression	( core -> mouse . position . x - offset . x ) / TIMELINE_GRIDSIZE
>575	Identifier	TIMELINE_GRIDSIZE
>576	AdditiveExpression	core -> mouse . position . x - offset . x
>577	MemberAccess	offset . x
>578	Identifier	x
>579	Identifier	offset
>580	MemberAccess	core -> mouse . position . x
>581	Identifier	x
>582	MemberAccess	core -> mouse . position
>583	Identifier	position
>584	PtrMemberAccess	core -> mouse
>585	Identifier	mouse
>586	Identifier	core
>587	Callee	int
>588	Identifier	int
>589	MemberAccess	this -> position . x
>590	Identifier	x
>591	PtrMemberAccess	this -> position
>592	Identifier	position
>593	Identifier	this
>594	IdentifierDeclStatement	 
>595	IdentifierDecl	lastT = ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t
>596	AssignmentExpr	lastT = ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t
>597	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> t
>598	Identifier	t
>599	CallExpression	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key )
>600	ArgumentList	this -> key
>601	Argument	this -> key
>602	PtrMemberAccess	this -> key
>603	Identifier	key
>604	Identifier	this
>605	Callee	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>606	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>607	Identifier	getKeyframe
>608	CallExpression	ae -> editSprite -> getCurrentAnimation ( )
>609	ArgumentList	 
>610	Callee	ae -> editSprite -> getCurrentAnimation
>611	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation
>612	Identifier	getCurrentAnimation
>613	PtrMemberAccess	ae -> editSprite
>614	Identifier	editSprite
>615	Identifier	ae
>616	Identifier	lastT
>617	Identifier	lastT
>618	IdentifierDeclType	float
>619	Condition	 
>620	EqualityExpression	movingWidget == this
>621	Identifier	this
>622	Identifier	movingWidget
>623	IfStatement	if ( ! movingWidget && isCoordinateInside ( core -> mouse . position ) )
>624	CompoundStatement	 
>625	IfStatement	if ( core -> mouse . buttons . left )
>626	CompoundStatement	 
>627	ExpressionStatement	 
>628	AssignmentExpr	ae -> currentKey = this -> key
>629	PtrMemberAccess	this -> key
>630	Identifier	key
>631	Identifier	this
>632	PtrMemberAccess	ae -> currentKey
>633	Identifier	currentKey
>634	Identifier	ae
>635	ExpressionStatement	 
>636	AssignmentExpr	movingWidget = this
>637	Identifier	this
>638	Identifier	movingWidget
>639	Condition	 
>640	MemberAccess	core -> mouse . buttons . left
>641	Identifier	left
>642	MemberAccess	core -> mouse . buttons
>643	Identifier	buttons
>644	PtrMemberAccess	core -> mouse
>645	Identifier	mouse
>646	Identifier	core
>647	Condition	 
>648	AndExpression	! movingWidget && isCoordinateInside ( core -> mouse . position )
>649	CallExpression	isCoordinateInside ( core -> mouse . position )
>650	ArgumentList	core -> mouse . position
>651	Argument	core -> mouse . position
>652	MemberAccess	core -> mouse . position
>653	Identifier	position
>654	PtrMemberAccess	core -> mouse
>655	Identifier	mouse
>656	Identifier	core
>657	Callee	isCoordinateInside
>658	Identifier	isCoordinateInside
>659	UnaryOp	! movingWidget
>660	Identifier	movingWidget
>661	UnaryOperator	!
>662	ExpressionStatement	 
>663	CallExpression	b -> setText ( os . str ( ) )
>664	ArgumentList	os . str ( )
>665	Argument	os . str ( )
>666	CallExpression	os . str ( )
>667	ArgumentList	 
>668	Callee	os . str
>669	MemberAccess	os . str
>670	Identifier	str
>671	Identifier	os
>672	Callee	b -> setText
>673	PtrMemberAccess	b -> setText
>674	Identifier	setText
>675	Identifier	b
>676	ExpressionStatement	 
>677	ShiftExpression	os << key
>678	Identifier	key
>679	Identifier	os
>680	IdentifierDeclStatement	 
>681	IdentifierDecl	os
>682	Identifier	os
>683	IdentifierDeclType	std 
>684	IfStatement	if ( ! offset . isInterpolating ( ) )
>685	CompoundStatement	 
>686	IfStatement	if ( this -> key == ae -> currentKey )
>687	ElseStatement	else
>688	ExpressionStatement	 
>689	AssignmentExpr	offset . y = 0
>690	PrimaryExpression	0
>691	MemberAccess	offset . y
>692	Identifier	y
>693	Identifier	offset
>694	ExpressionStatement	 
>695	AssignmentExpr	offset . y = - 12
>696	UnaryOp	- 12
>697	PrimaryExpression	12
>698	UnaryOperator	-
>699	MemberAccess	offset . y
>700	Identifier	y
>701	Identifier	offset
>702	Condition	 
>703	EqualityExpression	this -> key == ae -> currentKey
>704	PtrMemberAccess	ae -> currentKey
>705	Identifier	currentKey
>706	Identifier	ae
>707	PtrMemberAccess	this -> key
>708	Identifier	key
>709	Identifier	this
>710	Condition	 
>711	UnaryOp	! offset . isInterpolating ( )
>712	CallExpression	offset . isInterpolating ( )
>713	ArgumentList	 
>714	Callee	offset . isInterpolating
>715	MemberAccess	offset . isInterpolating
>716	Identifier	isInterpolating
>717	Identifier	offset
>718	UnaryOperator	!
>719	SwitchStatement	switch ( ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> lerpType )
>720	CompoundStatement	 
>721	BreakStatement	 
>722	ExpressionStatement	 
>723	AssignmentExpr	color = Vector ( 1 , 1 , 1 )
>724	CallExpression	Vector ( 1 , 1 , 1 )
>725	ArgumentList	1
>726	Argument	1
>727	PrimaryExpression	1
>728	Argument	1
>729	PrimaryExpression	1
>730	Argument	1
>731	PrimaryExpression	1
>732	Callee	Vector
>733	Identifier	Vector
>734	Identifier	color
>735	Label	 
>736	Identifier	default
>737	BreakStatement	 
>738	ExpressionStatement	 
>739	AssignmentExpr	color = Vector ( 1 , 1 , 0 )
>740	CallExpression	Vector ( 1 , 1 , 0 )
>741	ArgumentList	1
>742	Argument	0
>743	PrimaryExpression	0
>744	Argument	1
>745	PrimaryExpression	1
>746	Argument	1
>747	PrimaryExpression	1
>748	Callee	Vector
>749	Identifier	Vector
>750	Identifier	color
>751	Label	 
>752	BreakStatement	 
>753	ExpressionStatement	 
>754	AssignmentExpr	color = Vector ( 1 , 0 , 0 )
>755	CallExpression	Vector ( 1 , 0 , 0 )
>756	ArgumentList	1
>757	Argument	0
>758	PrimaryExpression	0
>759	Argument	0
>760	PrimaryExpression	0
>761	Argument	1
>762	PrimaryExpression	1
>763	Callee	Vector
>764	Identifier	Vector
>765	Identifier	color
>766	Label	 
>767	BreakStatement	 
>768	ExpressionStatement	 
>769	AssignmentExpr	color = Vector ( 0 , 0 , 1 )
>770	CallExpression	Vector ( 0 , 0 , 1 )
>771	ArgumentList	0
>772	Argument	1
>773	PrimaryExpression	1
>774	Argument	0
>775	PrimaryExpression	0
>776	Argument	0
>777	PrimaryExpression	0
>778	Callee	Vector
>779	Identifier	Vector
>780	Identifier	color
>781	Label	 
>782	Condition	 
>783	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key ) -> lerpType
>784	Identifier	lerpType
>785	CallExpression	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> key )
>786	ArgumentList	this -> key
>787	Argument	this -> key
>788	PtrMemberAccess	this -> key
>789	Identifier	key
>790	Identifier	this
>791	Callee	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>792	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>793	Identifier	getKeyframe
>794	CallExpression	ae -> editSprite -> getCurrentAnimation ( )
>795	ArgumentList	 
>796	Callee	ae -> editSprite -> getCurrentAnimation
>797	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation
>798	Identifier	getCurrentAnimation
>799	PtrMemberAccess	ae -> editSprite
>800	Identifier	editSprite
>801	Identifier	ae
>802	IfStatement	if ( life != 1 || ae -> editSprite -> isAnimating ( ) )
>803	ReturnStatement	 
>804	Condition	 
>805	OrExpression	life != 1 || ae -> editSprite -> isAnimating ( )
>806	CallExpression	ae -> editSprite -> isAnimating ( )
>807	ArgumentList	 
>808	Callee	ae -> editSprite -> isAnimating
>809	PtrMemberAccess	ae -> editSprite -> isAnimating
>810	Identifier	isAnimating
>811	PtrMemberAccess	ae -> editSprite
>812	Identifier	editSprite
>813	Identifier	ae
>814	EqualityExpression	life != 1
>815	PrimaryExpression	1
>816	Identifier	life
>817	ExpressionStatement	 
>818	CallExpression	Quad 
>819	ArgumentList	dt
>820	Argument	dt
>821	Identifier	dt
>822	Callee	Quad 
>823	Identifier	Quad 
>879	FunctionDef	AnimationEditor 
>880	ParameterList	 
>881	ReturnType	void
>882	CompoundStatement	 
>883	IfStatement	if ( core -> getCtrlState ( ) )
>884	ElseStatement	else
>885	CompoundStatement	 
>886	IfStatement	if ( * lt > 3 )
>887	ExpressionStatement	 
>888	AssignmentExpr	* lt = 0
>889	PrimaryExpression	0
>890	UnaryOp	* lt
>891	Identifier	lt
>892	UnaryOperator	*
>893	Condition	 
>894	RelationalExpression	* lt > 3
>895	PrimaryExpression	3
>896	UnaryOp	* lt
>897	Identifier	lt
>898	UnaryOperator	*
>899	ExpressionStatement	 
>900	IncDecOp	( * lt ) ++
>901	IncDec	++
>902	UnaryOp	* lt
>903	Identifier	lt
>904	UnaryOperator	*
>905	IdentifierDeclStatement	 
>906	IdentifierDecl	* lt = & ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> currentKey ) -> lerpType
>907	AssignmentExpr	* lt = & ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> currentKey ) -> lerpType
>908	UnaryOp	& ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> currentKey ) -> lerpType
>909	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> currentKey ) -> lerpType
>910	Identifier	lerpType
>911	CallExpression	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe ( this -> currentKey )
>912	ArgumentList	this -> currentKey
>913	Argument	this -> currentKey
>914	PtrMemberAccess	this -> currentKey
>915	Identifier	currentKey
>916	Identifier	this
>917	Callee	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>918	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation ( ) -> getKeyframe
>919	Identifier	getKeyframe
>920	CallExpression	ae -> editSprite -> getCurrentAnimation ( )
>921	ArgumentList	 
>922	Callee	ae -> editSprite -> getCurrentAnimation
>923	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation
>924	Identifier	getCurrentAnimation
>925	PtrMemberAccess	ae -> editSprite
>926	Identifier	editSprite
>927	Identifier	ae
>928	UnaryOperator	&
>929	Identifier	lt
>930	Identifier	lt
>931	IdentifierDeclType	int *
>932	ExpressionStatement	 
>933	CallExpression	pushUndo ( )
>934	ArgumentList	 
>935	Callee	pushUndo
>936	Identifier	pushUndo
>937	CompoundStatement	 
>938	IfStatement	if ( a -> getNumKeyframes ( ) >= 2 )
>939	CompoundStatement	 
>940	ExpressionStatement	 
>941	CallExpression	dsq -> screenMessage ( \"Copied Loop Key\" )
>942	ArgumentList	\"Copied Loop Key\"
>943	Argument	\"Copied Loop Key\"
>944	PrimaryExpression	\"Copied Loop Key\"
>945	Callee	dsq -> screenMessage
>946	PtrMemberAccess	dsq -> screenMessage
>947	Identifier	screenMessage
>948	Identifier	dsq
>949	IfStatement	if ( k1 && k2 )
>950	CompoundStatement	 
>951	ExpressionStatement	 
>952	CallExpression	k2 -> copyAllButTime ( k1 )
>953	ArgumentList	k1
>954	Argument	k1
>955	Identifier	k1
>956	Callee	k2 -> copyAllButTime
>957	PtrMemberAccess	k2 -> copyAllButTime
>958	Identifier	copyAllButTime
>959	Identifier	k2
>960	Condition	 
>961	AndExpression	k1 && k2
>962	Identifier	k2
>963	Identifier	k1
>964	IdentifierDeclStatement	 
>965	IdentifierDecl	* k2 = a -> getLastKeyframe ( )
>966	AssignmentExpr	* k2 = a -> getLastKeyframe ( )
>967	CallExpression	a -> getLastKeyframe ( )
>968	ArgumentList	 
>969	Callee	a -> getLastKeyframe
>970	PtrMemberAccess	a -> getLastKeyframe
>971	Identifier	getLastKeyframe
>972	Identifier	a
>973	Identifier	k2
>974	Identifier	k2
>975	IdentifierDeclType	SkeletalKeyframe *
>976	IdentifierDeclStatement	 
>977	IdentifierDecl	* k1 = a -> getFirstKeyframe ( )
>978	AssignmentExpr	* k1 = a -> getFirstKeyframe ( )
>979	CallExpression	a -> getFirstKeyframe ( )
>980	ArgumentList	 
>981	Callee	a -> getFirstKeyframe
>982	PtrMemberAccess	a -> getFirstKeyframe
>983	Identifier	getFirstKeyframe
>984	Identifier	a
>985	Identifier	k1
>986	Identifier	k1
>987	IdentifierDeclType	SkeletalKeyframe *
>988	ExpressionStatement	 
>989	CallExpression	pushUndo ( )
>990	ArgumentList	 
>991	Callee	pushUndo
>992	Identifier	pushUndo
>993	Condition	 
>994	RelationalExpression	a -> getNumKeyframes ( ) >= 2
>995	PrimaryExpression	2
>996	CallExpression	a -> getNumKeyframes ( )
>997	ArgumentList	 
>998	Callee	a -> getNumKeyframes
>999	PtrMemberAccess	a -> getNumKeyframes
>1000	Identifier	getNumKeyframes
>1001	Identifier	a
>1002	IdentifierDeclStatement	 
>1003	IdentifierDecl	* a = ae -> editSprite -> getCurrentAnimation ( )
>1004	AssignmentExpr	* a = ae -> editSprite -> getCurrentAnimation ( )
>1005	CallExpression	ae -> editSprite -> getCurrentAnimation ( )
>1006	ArgumentList	 
>1007	Callee	ae -> editSprite -> getCurrentAnimation
>1008	PtrMemberAccess	ae -> editSprite -> getCurrentAnimation
>1009	Identifier	getCurrentAnimation
>1010	PtrMemberAccess	ae -> editSprite
>1011	Identifier	editSprite
>1012	Identifier	ae
>1013	Identifier	a
>1014	Identifier	a
>1015	IdentifierDeclType	Animation *
>1016	Condition	 
>1017	CallExpression	core -> getCtrlState ( )
>1018	ArgumentList	 
>1019	Callee	core -> getCtrlState
>1020	PtrMemberAccess	core -> getCtrlState
>1021	Identifier	getCtrlState
>1022	Identifier	core
>1023	IfStatement	if ( dsq -> isNested ( ) )
>1024	ReturnStatement	 
>1025	Condition	 
>1026	CallExpression	dsq -> isNested ( )
>1027	ArgumentList	 
>1028	Callee	dsq -> isNested
>1029	PtrMemberAccess	dsq -> isNested
>1030	Identifier	isNested
>1031	Identifier	dsq
>1068	FunctionDef	AnimationEditor 
>1069	ParameterList	 
>1070	CompoundStatement	 
>1071	ExpressionStatement	 
>1072	CallExpression	registerState ( this , \"AnimationEditor\" )
>1073	ArgumentList	this
>1074	Argument	\"AnimationEditor\"
>1075	PrimaryExpression	\"AnimationEditor\"
>1076	Argument	this
>1077	Identifier	this
>1078	Callee	registerState
>1079	Identifier	registerState
>1084	FunctionDef	AnimationEditor 
>1085	ParameterList	 
>1086	ReturnType	void
>1087	CompoundStatement	 
>1088	IfStatement	if ( core -> getCtrlState ( ) )
>1089	ElseStatement	else
>1090	ExpressionStatement	 
>1091	AssignmentExpr	editSprite -> scale = Vector ( 1 , 1 )
>1092	CallExpression	Vector ( 1 , 1 )
>1093	ArgumentList	1
>1094	Argument	1
>1095	PrimaryExpression	1
>1096	Argument	1
>1097	PrimaryExpression	1
>1098	Callee	Vector
>1099	Identifier	Vector
>1100	PtrMemberAccess	editSprite -> scale
>1101	Identifier	scale
>1102	Identifier	editSprite
>1103	ExpressionStatement	 
>1104	CallExpression	saveFile ( )
>1105	ArgumentList	 
>1106	Callee	saveFile
>1107	Identifier	saveFile
>1108	Condition	 
>1109	CallExpression	core -> getCtrlState ( )
>1110	ArgumentList	 
>1111	Callee	core -> getCtrlState
>1112	PtrMemberAccess	core -> getCtrlState
>1113	Identifier	getCtrlState
>1114	Identifier	core
>1115	IfStatement	if ( dsq -> isNested ( ) )
>1116	ReturnStatement	 
>1117	Condition	 
>1118	CallExpression	dsq -> isNested ( )
>1119	ArgumentList	 
>1120	Callee	dsq -> isNested
>1121	PtrMemberAccess	dsq -> isNested
>1122	Identifier	isNested
>1123	Identifier	dsq
>1137	FunctionDef	AnimationEditor 
>1138	ParameterList	 
>1139	ReturnType	void
>1140	CompoundStatement	 
>1141	ExpressionStatement	 
>1142	CallExpression	updateTimelineUnit ( )
>1143	ArgumentList	 
>1144	Callee	updateTimelineUnit
>1145	Identifier	updateTimelineUnit
>1146	ExpressionStatement	 
>1147	CallExpression	updateTimelineGrid ( )
>1148	ArgumentList	 
>1149	Callee	updateTimelineGrid
>1150	Identifier	updateTimelineGrid
>1151	ExpressionStatement	 
>1152	CallExpression	dsq -> toggleCursor ( true , 0.1 )
>1153	ArgumentList	true
>1154	Argument	0.1
>1155	PrimaryExpression	0.1
>1156	Argument	true
>1157	Identifier	true
>1158	Callee	dsq -> toggleCursor
>1159	PtrMemberAccess	dsq -> toggleCursor
>1160	Identifier	toggleCursor
>1161	Identifier	dsq
>1162	ExpressionStatement	 
>1163	CallExpression	dsq -> resetTimer ( )
>1164	ArgumentList	 
>1165	Callee	dsq -> resetTimer
>1166	PtrMemberAccess	dsq -> resetTimer
>1167	Identifier	resetTimer
>1168	Identifier	dsq
>1169	ExpressionStatement	 
>1170	CallExpression	rebuildKeyframeWidgets ( )
>1171	ArgumentList	 
>1172	Callee	rebuildKeyframeWidgets
>1173	Identifier	rebuildKeyframeWidgets
>1174	ExpressionStatement	 
>1175	CallExpression	dsq -> overlay -> alpha . interpolateTo ( 0 , 0.5 )
>1176	ArgumentList	0
>1177	Argument	0.5
>1178	PrimaryExpression	0.5
>1179	Argument	0
>1180	PrimaryExpression	0
>1181	Callee	dsq -> overlay -> alpha . interpolateTo
>1182	MemberAccess	dsq -> overlay -> alpha . interpolateTo
>1183	Identifier	interpolateTo
>1184	PtrMemberAccess	dsq -> overlay -> alpha
>1185	Identifier	alpha
>1186	PtrMemberAccess	dsq -> overlay
>1187	Identifier	overlay
>1188	Identifier	dsq
>1189	ExpressionStatement	 
>1190	CallExpression	editSprite -> setSelectedBone ( 0 )
>1191	ArgumentList	0
>1192	Argument	0
>1193	PrimaryExpression	0
>1194	Callee	editSprite -> setSelectedBone
>1195	PtrMemberAccess	editSprite -> setSelectedBone
>1196	Identifier	setSelectedBone
>1197	Identifier	editSprite
>1198	ExpressionStatement	 
>1199	CallExpression	addRenderObject ( tr , LR_BLACKGROUND )
>1200	ArgumentList	tr
>1201	Argument	LR_BLACKGROUND
>1202	Identifier	LR_BLACKGROUND
>1203	Argument	tr
>1204	Identifier	tr
>1205	Callee	addRenderObject
>1206	Identifier	addRenderObject
>1207	ExpressionStatement	 
>1208	AssignmentExpr	tr -> position = Vector ( 0 , KEYFRAME_POS_Y )
>1209	CallExpression	Vector ( 0 , KEYFRAME_POS_Y )
>1210	ArgumentList	0
>1211	Argument	KEYFRAME_POS_Y
>1212	Identifier	KEYFRAME_POS_Y
>1213	Argument	0
>1214	PrimaryExpression	0
>1215	Callee	Vector
>1216	Identifier	Vector
>1217	PtrMemberAccess	tr -> position
>1218	Identifier	position
>1219	Identifier	tr
>1220	IdentifierDeclStatement	 
>1221	IdentifierDecl	* tr = new TimelineRender ( )
>1222	AssignmentExpr	* tr = new TimelineRender ( )
>1223	UnaryExpression	new TimelineRender ( )
>1224	Identifier	tr
>1225	Identifier	tr
>1226	IdentifierDeclType	TimelineRender *
>1227	ExpressionStatement	 
>1228	CallExpression	addRenderObject ( text2 , LR_HUD )
>1229	ArgumentList	text2
>1230	Argument	LR_HUD
>1231	Identifier	LR_HUD
>1232	Argument	text2
>1233	Identifier	text2
>1234	Callee	addRenderObject
>1235	Identifier	addRenderObject
>1236	ExpressionStatement	 
>1237	CallExpression	text2 -> setFontSize ( 6 )
>1238	ArgumentList	6
>1239	Argument	6
>1240	PrimaryExpression	6
>1241	Callee	text2 -> setFontSize
>1242	PtrMemberAccess	text2 -> setFontSize
>1243	Identifier	setFontSize
>1244	Identifier	text2
>1245	ExpressionStatement	 
>1246	AssignmentExpr	text2 -> position = Vector ( 200 , 510 )
>1247	CallExpression	Vector ( 200 , 510 )
>1248	ArgumentList	200
>1249	Argument	510
>1250	PrimaryExpression	510
>1251	Argument	200
>1252	PrimaryExpression	200
>1253	Callee	Vector
>1254	Identifier	Vector
>1255	PtrMemberAccess	text2 -> position
>1256	Identifier	position
>1257	Identifier	text2
>1258	ExpressionStatement	 
>1259	AssignmentExpr	text2 = new DebugFont ( )
>1260	UnaryExpression	new DebugFont ( )
>1261	Identifier	text2
>1262	ExpressionStatement	 
>1263	CallExpression	addRenderObject ( text , LR_HUD )
>1264	ArgumentList	text
>1265	Argument	LR_HUD
>1266	Identifier	LR_HUD
>1267	Argument	text
>1268	Identifier	text
>1269	Callee	addRenderObject
>1270	Identifier	addRenderObject
>1271	ExpressionStatement	 
>1272	CallExpression	text -> setFontSize ( 6 )
>1273	ArgumentList	6
>1274	Argument	6
>1275	PrimaryExpression	6
>1276	Callee	text -> setFontSize
>1277	PtrMemberAccess	text -> setFontSize
>1278	Identifier	setFontSize
>1279	Identifier	text
>1280	ExpressionStatement	 
>1281	AssignmentExpr	text -> position = Vector ( 200 , 90 )
>1282	CallExpression	Vector ( 200 , 90 )
>1283	ArgumentList	200
>1284	Argument	90
>1285	PrimaryExpression	90
>1286	Argument	200
>1287	PrimaryExpression	200
>1288	Callee	Vector
>1289	Identifier	Vector
>1290	PtrMemberAccess	text -> position
>1291	Identifier	position
>1292	Identifier	text
>1293	ExpressionStatement	 
>1294	AssignmentExpr	text = new DebugFont ( )
>1295	UnaryExpression	new DebugFont ( )
>1296	Identifier	text
>1297	ExpressionStatement	 
>1298	CallExpression	addRenderObject ( rect , LR_MENU )
>1299	ArgumentList	rect
>1300	Argument	LR_MENU
>1301	Identifier	LR_MENU
>1302	Argument	rect
>1303	Identifier	rect
>1304	Callee	addRenderObject
>1305	Identifier	addRenderObject
>1306	ExpressionStatement	 
>1307	AssignmentExpr	rect -> position = Vector ( 400 , 300 )
>1308	CallExpression	Vector ( 400 , 300 )
>1309	ArgumentList	400
>1310	Argument	300
>1311	PrimaryExpression	300
>1312	Argument	400
>1313	PrimaryExpression	400
>1314	Callee	Vector
>1315	Identifier	Vector
>1316	PtrMemberAccess	rect -> position
>1317	Identifier	position
>1318	Identifier	rect
>1319	ExpressionStatement	 
>1320	CallExpression	rect -> setWidthHeight ( 400 , 400 )
>1321	ArgumentList	400
>1322	Argument	400
>1323	PrimaryExpression	400
>1324	Argument	400
>1325	PrimaryExpression	400
>1326	Callee	rect -> setWidthHeight
>1327	PtrMemberAccess	rect -> setWidthHeight
>1328	Identifier	setWidthHeight
>1329	Identifier	rect
>1330	ExpressionStatement	 
>1331	Identifier	OutlineRect
>1332	Statement	 
>1333	Statement	 
>1334	Statement	 
>1335	Statement	 
>1336	Statement	 
>1337	ExpressionStatement	 
>1338	CallExpression	addRenderObject ( reverseAnim , LR_MENU )
>1339	ArgumentList	reverseAnim
>1340	Argument	LR_MENU
>1341	Identifier	LR_MENU
>1342	Argument	reverseAnim
>1343	Identifier	reverseAnim
>1344	Callee	addRenderObject
>1345	Identifier	addRenderObject
>1346	ExpressionStatement	 
>1347	CallExpression	reverseAnim -> event . set ( MakeFunctionEvent ( AnimationEditor , reverseAnim ) )
>1348	ArgumentList	MakeFunctionEvent ( AnimationEditor , reverseAnim )
>1349	Argument	MakeFunctionEvent ( AnimationEditor , reverseAnim )
>1350	CallExpression	MakeFunctionEvent ( AnimationEditor , reverseAnim )
>1351	ArgumentList	AnimationEditor
>1352	Argument	reverseAnim
>1353	Identifier	reverseAnim
>1354	Argument	AnimationEditor
>1355	Identifier	AnimationEditor
>1356	Callee	MakeFunctionEvent
>1357	Identifier	MakeFunctionEvent
>1358	Callee	reverseAnim -> event . set
>1359	MemberAccess	reverseAnim -> event . set
>1360	Identifier	set
>1361	PtrMemberAccess	reverseAnim -> event
>1362	Identifier	event
>1363	Identifier	reverseAnim
>1364	ExpressionStatement	 
>1365	AssignmentExpr	reverseAnim -> position = Vector ( 10 , 480 )
>1366	CallExpression	Vector ( 10 , 480 )
>1367	ArgumentList	10
>1368	Argument	480
>1369	PrimaryExpression	480
>1370	Argument	10
>1371	PrimaryExpression	10
>1372	Callee	Vector
>1373	Identifier	Vector
>1374	PtrMemberAccess	reverseAnim -> position
>1375	Identifier	position
>1376	Identifier	reverseAnim
>1377	ExpressionStatement	 
>1378	CallExpression	reverseAnim -> label -> setText ( \"reverseAnim\" )
>1379	ArgumentList	\"reverseAnim\"
>1380	Argument	\"reverseAnim\"
>1381	PrimaryExpression	\"reverseAnim\"
>1382	Callee	reverseAnim -> label -> setText
>1383	PtrMemberAccess	reverseAnim -> label -> setText
>1384	Identifier	setText
>1385	PtrMemberAccess	reverseAnim -> label
>1386	Identifier	label
>1387	Identifier	reverseAnim
>1388	IdentifierDeclStatement	 
>1389	IdentifierDecl	* reverseAnim = new DebugButton ( 0 , 0 , 150 )
>1390	AssignmentExpr	* reverseAnim = new DebugButton ( 0 , 0 , 150 )
>1391	Expression	0 , 0 , 150
>1392	Expression	0 , 150
>1393	PrimaryExpression	150
>1394	PrimaryExpression	0
>1395	PrimaryExpression	0
>1396	Identifier	reverseAnim
>1397	Identifier	reverseAnim
>1398	IdentifierDeclType	DebugButton *
>1399	ExpressionStatement	 
>1400	CallExpression	addRenderObject ( load , LR_MENU )
>1401	ArgumentList	load
>1402	Argument	LR_MENU
>1403	Identifier	LR_MENU
>1404	Argument	load
>1405	Identifier	load
>1406	Callee	addRenderObject
>1407	Identifier	addRenderObject
>1408	ExpressionStatement	 
>1409	CallExpression	load -> event . set ( MakeFunctionEvent ( AnimationEditor , loadFile ) )
>1410	ArgumentList	MakeFunctionEvent ( AnimationEditor , loadFile )
>1411	Argument	MakeFunctionEvent ( AnimationEditor , loadFile )
>1412	CallExpression	MakeFunctionEvent ( AnimationEditor , loadFile )
>1413	ArgumentList	AnimationEditor
>1414	Argument	loadFile
>1415	Identifier	loadFile
>1416	Argument	AnimationEditor
>1417	Identifier	AnimationEditor
>1418	Callee	MakeFunctionEvent
>1419	Identifier	MakeFunctionEvent
>1420	Callee	load -> event . set
>1421	MemberAccess	load -> event . set
>1422	Identifier	set
>1423	PtrMemberAccess	load -> event
>1424	Identifier	event
>1425	Identifier	load
>1426	ExpressionStatement	 
>1427	AssignmentExpr	load -> position = Vector ( 640 , 50 )
>1428	CallExpression	Vector ( 640 , 50 )
>1429	ArgumentList	640
>1430	Argument	50
>1431	PrimaryExpression	50
>1432	Argument	640
>1433	PrimaryExpression	640
>1434	Callee	Vector
>1435	Identifier	Vector
>1436	PtrMemberAccess	load -> position
>1437	Identifier	position
>1438	Identifier	load
>1439	ExpressionStatement	 
>1440	CallExpression	load -> label -> setText ( \"Reload\" )
>1441	ArgumentList	\"Reload\"
>1442	Argument	\"Reload\"
>1443	PrimaryExpression	\"Reload\"
>1444	Callee	load -> label -> setText
>1445	PtrMemberAccess	load -> label -> setText
>1446	Identifier	setText
>1447	PtrMemberAccess	load -> label
>1448	Identifier	label
>1449	Identifier	load
>1450	IdentifierDeclStatement	 
>1451	IdentifierDecl	* load = new DebugButton ( 0 , 0 , 150 )
>1452	AssignmentExpr	* load = new DebugButton ( 0 , 0 , 150 )
>1453	Expression	0 , 0 , 150
>1454	Expression	0 , 150
>1455	PrimaryExpression	150
>1456	PrimaryExpression	0
>1457	PrimaryExpression	0
>1458	Identifier	load
>1459	Identifier	load
>1460	IdentifierDeclType	DebugButton *
>1461	ExpressionStatement	 
>1462	CallExpression	addRenderObject ( save , LR_MENU )
>1463	ArgumentList	save
>1464	Argument	LR_MENU
>1465	Identifier	LR_MENU
>1466	Argument	save
>1467	Identifier	save
>1468	Callee	addRenderObject
>1469	Identifier	addRenderObject
>1470	ExpressionStatement	 
>1471	CallExpression	save -> event . set ( MakeFunctionEvent ( AnimationEditor , saveFile ) )
>1472	ArgumentList	MakeFunctionEvent ( AnimationEditor , saveFile )
>1473	Argument	MakeFunctionEvent ( AnimationEditor , saveFile )
>1474	CallExpression	MakeFunctionEvent ( AnimationEditor , saveFile )
>1475	ArgumentList	AnimationEditor
>1476	Argument	saveFile
>1477	Identifier	saveFile
>1478	Argument	AnimationEditor
>1479	Identifier	AnimationEditor
>1480	Callee	MakeFunctionEvent
>1481	Identifier	MakeFunctionEvent
>1482	Callee	save -> event . set
>1483	MemberAccess	save -> event . set
>1484	Identifier	set
>1485	PtrMemberAccess	save -> event
>1486	Identifier	event
>1487	Identifier	save
>1488	ExpressionStatement	 
>1489	AssignmentExpr	save -> position = Vector ( 640 , 100 )
>1490	CallExpression	Vector ( 640 , 100 )
>1491	ArgumentList	640
>1492	Argument	100
>1493	PrimaryExpression	100
>1494	Argument	640
>1495	PrimaryExpression	640
>1496	Callee	Vector
>1497	Identifier	Vector
>1498	PtrMemberAccess	save -> position
>1499	Identifier	position
>1500	Identifier	save
>1501	ExpressionStatement	 
>1502	CallExpression	save -> label -> setText ( \"Save\" )
>1503	ArgumentList	\"Save\"
>1504	Argument	\"Save\"
>1505	PrimaryExpression	\"Save\"
>1506	Callee	save -> label -> setText
>1507	PtrMemberAccess	save -> label -> setText
>1508	Identifier	setText
>1509	PtrMemberAccess	save -> label
>1510	Identifier	label
>1511	Identifier	save
>1512	IdentifierDeclStatement	 
>1513	IdentifierDecl	* save = new DebugButton ( 0 , 0 , 150 )
>1514	AssignmentExpr	* save = new DebugButton ( 0 , 0 , 150 )
>1515	Expression	0 , 0 , 150
>1516	Expression	0 , 150
>1517	PrimaryExpression	150
>1518	PrimaryExpression	0
>1519	PrimaryExpression	0
>1520	Identifier	save
>1521	Identifier	save
>1522	IdentifierDeclType	DebugButton *
>1523	ExpressionStatement	 
>1524	CallExpression	addRenderObject ( gridup , LR_MENU )
>1525	ArgumentList	gridup
>1526	Argument	LR_MENU
>1527	Identifier	LR_MENU
>1528	Argument	gridup
>1529	Identifier	gridup
>1530	Callee	addRenderObject
>1531	Identifier	addRenderObject
>1532	ExpressionStatement	 
>1533	CallExpression	gridup -> event . set ( MakeFunctionEvent ( AnimationEditor , incrTimelineGrid ) )
>1534	ArgumentList	MakeFunctionEvent ( AnimationEditor , incrTimelineGrid )
>1535	Argument	MakeFunctionEvent ( AnimationEditor , incrTimelineGrid )
>1536	CallExpression	MakeFunctionEvent ( AnimationEditor , incrTimelineGrid )
>1537	ArgumentList	AnimationEditor
>1538	Argument	incrTimelineGrid
>1539	Identifier	incrTimelineGrid
>1540	Argument	AnimationEditor
>1541	Identifier	AnimationEditor
>1542	Callee	MakeFunctionEvent
>1543	Identifier	MakeFunctionEvent
>1544	Callee	gridup -> event . set
>1545	MemberAccess	gridup -> event . set
>1546	Identifier	set
>1547	PtrMemberAccess	gridup -> event
>1548	Identifier	event
>1549	Identifier	gridup
>1550	ExpressionStatement	 
>1551	AssignmentExpr	gridup -> position = Vector ( 640 + 80 , 470 )
>1552	CallExpression	Vector ( 640 + 80 , 470 )
>1553	ArgumentList	640 + 80
>1554	Argument	470
>1555	PrimaryExpression	470
>1556	Argument	640 + 80
>1557	AdditiveExpression	640 + 80
>1558	PrimaryExpression	80
>1559	PrimaryExpression	640
>1560	Callee	Vector
>1561	Identifier	Vector
>1562	PtrMemberAccess	gridup -> position
>1563	Identifier	position
>1564	Identifier	gridup
>1565	ExpressionStatement	 
>1566	CallExpression	gridup -> label -> setText ( \"Up\" )
>1567	ArgumentList	\"Up\"
>1568	Argument	\"Up\"
>1569	PrimaryExpression	\"Up\"
>1570	Callee	gridup -> label -> setText
>1571	PtrMemberAccess	gridup -> label -> setText
>1572	Identifier	setText
>1573	PtrMemberAccess	gridup -> label
>1574	Identifier	label
>1575	Identifier	gridup
>1576	IdentifierDeclStatement	 
>1577	IdentifierDecl	* gridup = new DebugButton ( 0 , 0 , 70 )
>1578	AssignmentExpr	* gridup = new DebugButton ( 0 , 0 , 70 )
>1579	Expression	0 , 0 , 70
>1580	Expression	0 , 70
>1581	PrimaryExpression	70
>1582	PrimaryExpression	0
>1583	PrimaryExpression	0
>1584	Identifier	gridup
>1585	Identifier	gridup
>1586	IdentifierDeclType	DebugButton *
>1587	ExpressionStatement	 
>1588	CallExpression	addRenderObject ( griddown , LR_MENU )
>1589	ArgumentList	griddown
>1590	Argument	LR_MENU
>1591	Identifier	LR_MENU
>1592	Argument	griddown
>1593	Identifier	griddown
>1594	Callee	addRenderObject
>1595	Identifier	addRenderObject
>1596	ExpressionStatement	 
>1597	CallExpression	griddown -> event . set ( MakeFunctionEvent ( AnimationEditor , decrTimelineGrid ) )
>1598	ArgumentList	MakeFunctionEvent ( AnimationEditor , decrTimelineGrid )
>1599	Argument	MakeFunctionEvent ( AnimationEditor , decrTimelineGrid )
>1600	CallExpression	MakeFunctionEvent ( AnimationEditor , decrTimelineGrid )
>1601	ArgumentList	AnimationEditor
>1602	Argument	decrTimelineGrid
>1603	Identifier	decrTimelineGrid
>1604	Argument	AnimationEditor
>1605	Identifier	AnimationEditor
>1606	Callee	MakeFunctionEvent
>1607	Identifier	MakeFunctionEvent
>1608	Callee	griddown -> event . set
>1609	MemberAccess	griddown -> event . set
>1610	Identifier	set
>1611	PtrMemberAccess	griddown -> event
>1612	Identifier	event
>1613	Identifier	griddown
>1614	ExpressionStatement	 
>1615	AssignmentExpr	griddown -> position = Vector ( 640 , 470 )
>1616	CallExpression	Vector ( 640 , 470 )
>1617	ArgumentList	640
>1618	Argument	470
>1619	PrimaryExpression	470
>1620	Argument	640
>1621	PrimaryExpression	640
>1622	Callee	Vector
>1623	Identifier	Vector
>1624	PtrMemberAccess	griddown -> position
>1625	Identifier	position
>1626	Identifier	griddown
>1627	ExpressionStatement	 
>1628	CallExpression	griddown -> label -> setText ( \"Down\" )
>1629	ArgumentList	\"Down\"
>1630	Argument	\"Down\"
>1631	PrimaryExpression	\"Down\"
>1632	Callee	griddown -> label -> setText
>1633	PtrMemberAccess	griddown -> label -> setText
>1634	Identifier	setText
>1635	PtrMemberAccess	griddown -> label
>1636	Identifier	label
>1637	Identifier	griddown
>1638	IdentifierDeclStatement	 
>1639	IdentifierDecl	* griddown = new DebugButton ( 0 , 0 , 70 )
>1640	AssignmentExpr	* griddown = new DebugButton ( 0 , 0 , 70 )
>1641	Expression	0 , 0 , 70
>1642	Expression	0 , 70
>1643	PrimaryExpression	70
>1644	PrimaryExpression	0
>1645	PrimaryExpression	0
>1646	Identifier	griddown
>1647	Identifier	griddown
>1648	IdentifierDeclType	DebugButton *
>1649	ExpressionStatement	 
>1650	CallExpression	addRenderObject ( gridsize , LR_MENU )
>1651	ArgumentList	gridsize
>1652	Argument	LR_MENU
>1653	Identifier	LR_MENU
>1654	Argument	gridsize
>1655	Identifier	gridsize
>1656	Callee	addRenderObject
>1657	Identifier	addRenderObject
>1658	ExpressionStatement	 
>1659	AssignmentExpr	gridsize -> position = Vector ( 650 , 450 )
>1660	CallExpression	Vector ( 650 , 450 )
>1661	ArgumentList	650
>1662	Argument	450
>1663	PrimaryExpression	450
>1664	Argument	650
>1665	PrimaryExpression	650
>1666	Callee	Vector
>1667	Identifier	Vector
>1668	PtrMemberAccess	gridsize -> position
>1669	Identifier	position
>1670	Identifier	gridsize
>1671	ExpressionStatement	 
>1672	AssignmentExpr	gridsize = new DebugFont ( 10 , \"Gridsize\" )
>1673	Expression	10 , \"Gridsize\"
>1674	PrimaryExpression	\"Gridsize\"
>1675	PrimaryExpression	10
>1676	Identifier	gridsize
>1677	ExpressionStatement	 
>1678	CallExpression	addRenderObject ( unitup , LR_MENU )
>1679	ArgumentList	unitup
>1680	Argument	LR_MENU
>1681	Identifier	LR_MENU
>1682	Argument	unitup
>1683	Identifier	unitup
>1684	Callee	addRenderObject
>1685	Identifier	addRenderObject
>1686	ExpressionStatement	 
>1687	CallExpression	unitup -> event . set ( MakeFunctionEvent ( AnimationEditor , incrTimelineUnit ) )
>1688	ArgumentList	MakeFunctionEvent ( AnimationEditor , incrTimelineUnit )
>1689	Argument	MakeFunctionEvent ( AnimationEditor , incrTimelineUnit )
>1690	CallExpression	MakeFunctionEvent ( AnimationEditor , incrTimelineUnit )
>1691	ArgumentList	AnimationEditor
>1692	Argument	incrTimelineUnit
>1693	Identifier	incrTimelineUnit
>1694	Argument	AnimationEditor
>1695	Identifier	AnimationEditor
>1696	Callee	MakeFunctionEvent
>1697	Identifier	MakeFunctionEvent
>1698	Callee	unitup -> event . set
>1699	MemberAccess	unitup -> event . set
>1700	Identifier	set
>1701	PtrMemberAccess	unitup -> event
>1702	Identifier	event
>1703	Identifier	unitup
>1704	ExpressionStatement	 
>1705	AssignmentExpr	unitup -> position = Vector ( 640 + 80 , 420 )
>1706	CallExpression	Vector ( 640 + 80 , 420 )
>1707	ArgumentList	640 + 80
>1708	Argument	420
>1709	PrimaryExpression	420
>1710	Argument	640 + 80
>1711	AdditiveExpression	640 + 80
>1712	PrimaryExpression	80
>1713	PrimaryExpression	640
>1714	Callee	Vector
>1715	Identifier	Vector
>1716	PtrMemberAccess	unitup -> position
>1717	Identifier	position
>1718	Identifier	unitup
>1719	ExpressionStatement	 
>1720	CallExpression	unitup -> label -> setText ( \"Up\" )
>1721	ArgumentList	\"Up\"
>1722	Argument	\"Up\"
>1723	PrimaryExpression	\"Up\"
>1724	Callee	unitup -> label -> setText
>1725	PtrMemberAccess	unitup -> label -> setText
>1726	Identifier	setText
>1727	PtrMemberAccess	unitup -> label
>1728	Identifier	label
>1729	Identifier	unitup
>1730	IdentifierDeclStatement	 
>1731	IdentifierDecl	* unitup = new DebugButton ( 0 , 0 , 70 )
>1732	AssignmentExpr	* unitup = new DebugButton ( 0 , 0 , 70 )
>1733	Expression	0 , 0 , 70
>1734	Expression	0 , 70
>1735	PrimaryExpression	70
>1736	PrimaryExpression	0
>1737	PrimaryExpression	0
>1738	Identifier	unitup
>1739	Identifier	unitup
>1740	IdentifierDeclType	DebugButton *
>1741	ExpressionStatement	 
>1742	CallExpression	addRenderObject ( unitdown , LR_MENU )
>1743	ArgumentList	unitdown
>1744	Argument	LR_MENU
>1745	Identifier	LR_MENU
>1746	Argument	unitdown
>1747	Identifier	unitdown
>1748	Callee	addRenderObject
>1749	Identifier	addRenderObject
>1750	ExpressionStatement	 
>1751	CallExpression	unitdown -> event . set ( MakeFunctionEvent ( AnimationEditor , decrTimelineUnit ) )
>1752	ArgumentList	MakeFunctionEvent ( AnimationEditor , decrTimelineUnit )
>1753	Argument	MakeFunctionEvent ( AnimationEditor , decrTimelineUnit )
>1754	CallExpression	MakeFunctionEvent ( AnimationEditor , decrTimelineUnit )
>1755	ArgumentList	AnimationEditor
>1756	Argument	decrTimelineUnit
>1757	Identifier	decrTimelineUnit
>1758	Argument	AnimationEditor
>1759	Identifier	AnimationEditor
>1760	Callee	MakeFunctionEvent
>1761	Identifier	MakeFunctionEvent
>1762	Callee	unitdown -> event . set
>1763	MemberAccess	unitdown -> event . set
>1764	Identifier	set
>1765	PtrMemberAccess	unitdown -> event
>1766	Identifier	event
>1767	Identifier	unitdown
>1768	ExpressionStatement	 
>1769	AssignmentExpr	unitdown -> position = Vector ( 640 , 420 )
>1770	CallExpression	Vector ( 640 , 420 )
>1771	ArgumentList	640
>1772	Argument	420
>1773	PrimaryExpression	420
>1774	Argument	640
>1775	PrimaryExpression	640
>1776	Callee	Vector
>1777	Identifier	Vector
>1778	PtrMemberAccess	unitdown -> position
>1779	Identifier	position
>1780	Identifier	unitdown
>1781	ExpressionStatement	 
>1782	CallExpression	unitdown -> label -> setText ( \"Down\" )
>1783	ArgumentList	\"Down\"
>1784	Argument	\"Down\"
>1785	PrimaryExpression	\"Down\"
>1786	Callee	unitdown -> label -> setText
>1787	PtrMemberAccess	unitdown -> label -> setText
>1788	Identifier	setText
>1789	PtrMemberAccess	unitdown -> label
>1790	Identifier	label
>1791	Identifier	unitdown
>1792	IdentifierDeclStatement	 
>1793	IdentifierDecl	* unitdown = new DebugButton ( 0 , 0 , 70 )
>1794	AssignmentExpr	* unitdown = new DebugButton ( 0 , 0 , 70 )
>1795	Expression	0 , 0 , 70
>1796	Expression	0 , 70
>1797	PrimaryExpression	70
>1798	PrimaryExpression	0
>1799	PrimaryExpression	0
>1800	Identifier	unitdown
>1801	Identifier	unitdown
>1802	IdentifierDeclType	DebugButton *
>1803	ExpressionStatement	 
>1804	CallExpression	addRenderObject ( unitsize , LR_MENU )
>1805	ArgumentList	unitsize
>1806	Argument	LR_MENU
>1807	Identifier	LR_MENU
>1808	Argument	unitsize
>1809	Identifier	unitsize
>1810	Callee	addRenderObject
>1811	Identifier	addRenderObject
>1812	ExpressionStatement	 
>1813	AssignmentExpr	unitsize -> position = Vector ( 650 , 400 )
>1814	CallExpression	Vector ( 650 , 400 )
>1815	ArgumentList	650
>1816	Argument	400
>1817	PrimaryExpression	400
>1818	Argument	650
>1819	PrimaryExpression	650
>1820	Callee	Vector
>1821	Identifier	Vector
>1822	PtrMemberAccess	unitsize -> position
>1823	Identifier	position
>1824	Identifier	unitsize
>1825	ExpressionStatement	 
>1826	AssignmentExpr	unitsize = new DebugFont ( 10 , \"Unitsize\" )
>1827	Expression	10 , \"Unitsize\"
>1828	PrimaryExpression	\"Unitsize\"
>1829	PrimaryExpression	10
>1830	Identifier	unitsize
>1831	ExpressionStatement	 
>1832	CallExpression	addRenderObject ( a4 , LR_MENU )
>1833	ArgumentList	a4
>1834	Argument	LR_MENU
>1835	Identifier	LR_MENU
>1836	Argument	a4
>1837	Identifier	a4
>1838	Callee	addRenderObject
>1839	Identifier	addRenderObject
>1840	ExpressionStatement	 
>1841	CallExpression	a4 -> event . set ( MakeFunctionEvent ( AnimationEditor , deleteKey ) )
>1842	ArgumentList	MakeFunctionEvent ( AnimationEditor , deleteKey )
>1843	Argument	MakeFunctionEvent ( AnimationEditor , deleteKey )
>1844	CallExpression	MakeFunctionEvent ( AnimationEditor , deleteKey )
>1845	ArgumentList	AnimationEditor
>1846	Argument	deleteKey
>1847	Identifier	deleteKey
>1848	Argument	AnimationEditor
>1849	Identifier	AnimationEditor
>1850	Callee	MakeFunctionEvent
>1851	Identifier	MakeFunctionEvent
>1852	Callee	a4 -> event . set
>1853	MemberAccess	a4 -> event . set
>1854	Identifier	set
>1855	PtrMemberAccess	a4 -> event
>1856	Identifier	event
>1857	Identifier	a4
>1858	ExpressionStatement	 
>1859	AssignmentExpr	a4 -> position = Vector ( 640 , 340 )
>1860	CallExpression	Vector ( 640 , 340 )
>1861	ArgumentList	640
>1862	Argument	340
>1863	PrimaryExpression	340
>1864	Argument	640
>1865	PrimaryExpression	640
>1866	Callee	Vector
>1867	Identifier	Vector
>1868	PtrMemberAccess	a4 -> position
>1869	Identifier	position
>1870	Identifier	a4
>1871	ExpressionStatement	 
>1872	CallExpression	a4 -> label -> setText ( \"deleteKey\" )
>1873	ArgumentList	\"deleteKey\"
>1874	Argument	\"deleteKey\"
>1875	PrimaryExpression	\"deleteKey\"
>1876	Callee	a4 -> label -> setText
>1877	PtrMemberAccess	a4 -> label -> setText
>1878	Identifier	setText
>1879	PtrMemberAccess	a4 -> label
>1880	Identifier	label
>1881	Identifier	a4
>1882	IdentifierDeclStatement	 
>1883	IdentifierDecl	* a4 = new DebugButton ( 0 , 0 , 150 )
>1884	AssignmentExpr	* a4 = new DebugButton ( 0 , 0 , 150 )
>1885	Expression	0 , 0 , 150
>1886	Expression	0 , 150
>1887	PrimaryExpression	150
>1888	PrimaryExpression	0
>1889	PrimaryExpression	0
>1890	Identifier	a4
>1891	Identifier	a4
>1892	IdentifierDeclType	DebugButton *
>1893	ExpressionStatement	 
>1894	CallExpression	addRenderObject ( sa , LR_MENU )
>1895	ArgumentList	sa
>1896	Argument	LR_MENU
>1897	Identifier	LR_MENU
>1898	Argument	sa
>1899	Identifier	sa
>1900	Callee	addRenderObject
>1901	Identifier	addRenderObject
>1902	ExpressionStatement	 
>1903	CallExpression	sa -> event . set ( MakeFunctionEvent ( AnimationEditor , showAllBones ) )
>1904	ArgumentList	MakeFunctionEvent ( AnimationEditor , showAllBones )
>1905	Argument	MakeFunctionEvent ( AnimationEditor , showAllBones )
>1906	CallExpression	MakeFunctionEvent ( AnimationEditor , showAllBones )
>1907	ArgumentList	AnimationEditor
>1908	Argument	showAllBones
>1909	Identifier	showAllBones
>1910	Argument	AnimationEditor
>1911	Identifier	AnimationEditor
>1912	Callee	MakeFunctionEvent
>1913	Identifier	MakeFunctionEvent
>1914	Callee	sa -> event . set
>1915	MemberAccess	sa -> event . set
>1916	Identifier	set
>1917	PtrMemberAccess	sa -> event
>1918	Identifier	event
>1919	Identifier	sa
>1920	ExpressionStatement	 
>1921	AssignmentExpr	sa -> position = Vector ( 640 , 270 )
>1922	CallExpression	Vector ( 640 , 270 )
>1923	ArgumentList	640
>1924	Argument	270
>1925	PrimaryExpression	270
>1926	Argument	640
>1927	PrimaryExpression	640
>1928	Callee	Vector
>1929	Identifier	Vector
>1930	PtrMemberAccess	sa -> position
>1931	Identifier	position
>1932	Identifier	sa
>1933	ExpressionStatement	 
>1934	CallExpression	sa -> label -> setText ( \"ShowAll (A)\" )
>1935	ArgumentList	\"ShowAll (A)\"
>1936	Argument	\"ShowAll (A)\"
>1937	PrimaryExpression	\"ShowAll (A)\"
>1938	Callee	sa -> label -> setText
>1939	PtrMemberAccess	sa -> label -> setText
>1940	Identifier	setText
>1941	PtrMemberAccess	sa -> label
>1942	Identifier	label
>1943	Identifier	sa
>1944	IdentifierDeclStatement	 
>1945	IdentifierDecl	* sa = new DebugButton ( 0 , 0 , 150 )
>1946	AssignmentExpr	* sa = new DebugButton ( 0 , 0 , 150 )
>1947	Expression	0 , 0 , 150
>1948	Expression	0 , 150
>1949	PrimaryExpression	150
>1950	PrimaryExpression	0
>1951	PrimaryExpression	0
>1952	Identifier	sa
>1953	Identifier	sa
>1954	IdentifierDeclType	DebugButton *
>1955	ExpressionStatement	 
>1956	CallExpression	addRenderObject ( rb , LR_MENU )
>1957	ArgumentList	rb
>1958	Argument	LR_MENU
>1959	Identifier	LR_MENU
>1960	Argument	rb
>1961	Identifier	rb
>1962	Callee	addRenderObject
>1963	Identifier	addRenderObject
>1964	ExpressionStatement	 
>1965	CallExpression	rb -> event . set ( MakeFunctionEvent ( AnimationEditor , toggleRenderBorders ) )
>1966	ArgumentList	MakeFunctionEvent ( AnimationEditor , toggleRenderBorders )
>1967	Argument	MakeFunctionEvent ( AnimationEditor , toggleRenderBorders )
>1968	CallExpression	MakeFunctionEvent ( AnimationEditor , toggleRenderBorders )
>1969	ArgumentList	AnimationEditor
>1970	Argument	toggleRenderBorders
>1971	Identifier	toggleRenderBorders
>1972	Argument	AnimationEditor
>1973	Identifier	AnimationEditor
>1974	Callee	MakeFunctionEvent
>1975	Identifier	MakeFunctionEvent
>1976	Callee	rb -> event . set
>1977	MemberAccess	rb -> event . set
>1978	Identifier	set
>1979	PtrMemberAccess	rb -> event
>1980	Identifier	event
>1981	Identifier	rb
>1982	ExpressionStatement	 
>1983	AssignmentExpr	rb -> position = Vector ( 640 , 240 )
>1984	CallExpression	Vector ( 640 , 240 )
>1985	ArgumentList	640
>1986	Argument	240
>1987	PrimaryExpression	240
>1988	Argument	640
>1989	PrimaryExpression	640
>1990	Callee	Vector
>1991	Identifier	Vector
>1992	PtrMemberAccess	rb -> position
>1993	Identifier	position
>1994	Identifier	rb
>1995	ExpressionStatement	 
>1996	CallExpression	rb -> label -> setText ( \"ShowJoints (B)\" )
>1997	ArgumentList	\"ShowJoints (B)\"
>1998	Argument	\"ShowJoints (B)\"
>1999	PrimaryExpression	\"ShowJoints (B)\"
>2000	Callee	rb -> label -> setText
>2001	PtrMemberAccess	rb -> label -> setText
>2002	Identifier	setText
>2003	PtrMemberAccess	rb -> label
>2004	Identifier	label
>2005	Identifier	rb
>2006	IdentifierDeclStatement	 
>2007	IdentifierDecl	* rb = new DebugButton ( 0 , 0 , 150 )
>2008	AssignmentExpr	* rb = new DebugButton ( 0 , 0 , 150 )
>2009	Expression	0 , 0 , 150
>2010	Expression	0 , 150
>2011	PrimaryExpression	150
>2012	PrimaryExpression	0
>2013	PrimaryExpression	0
>2014	Identifier	rb
>2015	Identifier	rb
>2016	IdentifierDeclType	DebugButton *
>2017	ExpressionStatement	 
>2018	CallExpression	addRenderObject ( tm , LR_MENU )
>2019	ArgumentList	tm
>2020	Argument	LR_MENU
>2021	Identifier	LR_MENU
>2022	Argument	tm
>2023	Identifier	tm
>2024	Callee	addRenderObject
>2025	Identifier	addRenderObject
>2026	ExpressionStatement	 
>2027	CallExpression	tm -> event . set ( MakeFunctionEvent ( AnimationEditor , toggleMouseSelection ) )
>2028	ArgumentList	MakeFunctionEvent ( AnimationEditor , toggleMouseSelection )
>2029	Argument	MakeFunctionEvent ( AnimationEditor , toggleMouseSelection )
>2030	CallExpression	MakeFunctionEvent ( AnimationEditor , toggleMouseSelection )
>2031	ArgumentList	AnimationEditor
>2032	Argument	toggleMouseSelection
>2033	Identifier	toggleMouseSelection
>2034	Argument	AnimationEditor
>2035	Identifier	AnimationEditor
>2036	Callee	MakeFunctionEvent
>2037	Identifier	MakeFunctionEvent
>2038	Callee	tm -> event . set
>2039	MemberAccess	tm -> event . set
>2040	Identifier	set
>2041	PtrMemberAccess	tm -> event
>2042	Identifier	event
>2043	Identifier	tm
>2044	ExpressionStatement	 
>2045	AssignmentExpr	tm -> position = Vector ( 640 , 210 )
>2046	CallExpression	Vector ( 640 , 210 )
>2047	ArgumentList	640
>2048	Argument	210
>2049	PrimaryExpression	210
>2050	Argument	640
>2051	PrimaryExpression	640
>2052	Callee	Vector
>2053	Identifier	Vector
>2054	PtrMemberAccess	tm -> position
>2055	Identifier	position
>2056	Identifier	tm
>2057	ExpressionStatement	 
>2058	CallExpression	tm -> label -> setText ( \"SelMode (M)\" )
>2059	ArgumentList	\"SelMode (M)\"
>2060	Argument	\"SelMode (M)\"
>2061	PrimaryExpression	\"SelMode (M)\"
>2062	Callee	tm -> label -> setText
>2063	PtrMemberAccess	tm -> label -> setText
>2064	Identifier	setText
>2065	PtrMemberAccess	tm -> label
>2066	Identifier	label
>2067	Identifier	tm
>2068	IdentifierDeclStatement	 
>2069	IdentifierDecl	* tm = new DebugButton ( 0 , 0 , 150 )
>2070	AssignmentExpr	* tm = new DebugButton ( 0 , 0 , 150 )
>2071	Expression	0 , 0 , 150
>2072	Expression	0 , 150
>2073	PrimaryExpression	150
>2074	PrimaryExpression	0
>2075	PrimaryExpression	0
>2076	Identifier	tm
>2077	Identifier	tm
>2078	IdentifierDeclType	DebugButton *
>2079	ExpressionStatement	 
>2080	CallExpression	addRenderObject ( newAnim , LR_MENU )
>2081	ArgumentList	newAnim
>2082	Argument	LR_MENU
>2083	Identifier	LR_MENU
>2084	Argument	newAnim
>2085	Identifier	newAnim
>2086	Callee	addRenderObject
>2087	Identifier	addRenderObject
>2088	ExpressionStatement	 
>2089	CallExpression	newAnim -> event . set ( MakeFunctionEvent ( AnimationEditor , newAnim ) )
>2090	ArgumentList	MakeFunctionEvent ( AnimationEditor , newAnim )
>2091	Argument	MakeFunctionEvent ( AnimationEditor , newAnim )
>2092	CallExpression	MakeFunctionEvent ( AnimationEditor , newAnim )
>2093	ArgumentList	AnimationEditor
>2094	Argument	newAnim
>2095	Identifier	newAnim
>2096	Argument	AnimationEditor
>2097	Identifier	AnimationEditor
>2098	Callee	MakeFunctionEvent
>2099	Identifier	MakeFunctionEvent
>2100	Callee	newAnim -> event . set
>2101	MemberAccess	newAnim -> event . set
>2102	Identifier	set
>2103	PtrMemberAccess	newAnim -> event
>2104	Identifier	event
>2105	Identifier	newAnim
>2106	ExpressionStatement	 
>2107	AssignmentExpr	newAnim -> position = Vector ( 640 , 150 )
>2108	CallExpression	Vector ( 640 , 150 )
>2109	ArgumentList	640
>2110	Argument	150
>2111	PrimaryExpression	150
>2112	Argument	640
>2113	PrimaryExpression	640
>2114	Callee	Vector
>2115	Identifier	Vector
>2116	PtrMemberAccess	newAnim -> position
>2117	Identifier	position
>2118	Identifier	newAnim
>2119	ExpressionStatement	 
>2120	CallExpression	newAnim -> label -> setText ( \"NewAnim\" )
>2121	ArgumentList	\"NewAnim\"
>2122	Argument	\"NewAnim\"
>2123	PrimaryExpression	\"NewAnim\"
>2124	Callee	newAnim -> label -> setText
>2125	PtrMemberAccess	newAnim -> label -> setText
>2126	Identifier	setText
>2127	PtrMemberAccess	newAnim -> label
>2128	Identifier	label
>2129	Identifier	newAnim
>2130	IdentifierDeclStatement	 
>2131	IdentifierDecl	* newAnim = new DebugButton ( 0 , 0 , 150 )
>2132	AssignmentExpr	* newAnim = new DebugButton ( 0 , 0 , 150 )
>2133	Expression	0 , 0 , 150
>2134	Expression	0 , 150
>2135	PrimaryExpression	150
>2136	PrimaryExpression	0
>2137	PrimaryExpression	0
>2138	Identifier	newAnim
>2139	Identifier	newAnim
>2140	IdentifierDeclType	DebugButton *
>2141	ExpressionStatement	 
>2142	CallExpression	addRenderObject ( pasteKey , LR_MENU )
>2143	ArgumentList	pasteKey
>2144	Argument	LR_MENU
>2145	Identifier	LR_MENU
>2146	Argument	pasteKey
>2147	Identifier	pasteKey
>2148	Callee	addRenderObject
>2149	Identifier	addRenderObject
>2150	ExpressionStatement	 
>2151	CallExpression	pasteKey -> event . set ( MakeFunctionEvent ( AnimationEditor , pasteKey ) )
>2152	ArgumentList	MakeFunctionEvent ( AnimationEditor , pasteKey )
>2153	Argument	MakeFunctionEvent ( AnimationEditor , pasteKey )
>2154	CallExpression	MakeFunctionEvent ( AnimationEditor , pasteKey )
>2155	ArgumentList	AnimationEditor
>2156	Argument	pasteKey
>2157	Identifier	pasteKey
>2158	Argument	AnimationEditor
>2159	Identifier	AnimationEditor
>2160	Callee	MakeFunctionEvent
>2161	Identifier	MakeFunctionEvent
>2162	Callee	pasteKey -> event . set
>2163	MemberAccess	pasteKey -> event . set
>2164	Identifier	set
>2165	PtrMemberAccess	pasteKey -> event
>2166	Identifier	event
>2167	Identifier	pasteKey
>2168	ExpressionStatement	 
>2169	AssignmentExpr	pasteKey -> position = Vector ( 10 , 420 )
>2170	CallExpression	Vector ( 10 , 420 )
>2171	ArgumentList	10
>2172	Argument	420
>2173	PrimaryExpression	420
>2174	Argument	10
>2175	PrimaryExpression	10
>2176	Callee	Vector
>2177	Identifier	Vector
>2178	PtrMemberAccess	pasteKey -> position
>2179	Identifier	position
>2180	Identifier	pasteKey
>2181	ExpressionStatement	 
>2182	CallExpression	pasteKey -> label -> setText ( \"pasteKey\" )
>2183	ArgumentList	\"pasteKey\"
>2184	Argument	\"pasteKey\"
>2185	PrimaryExpression	\"pasteKey\"
>2186	Callee	pasteKey -> label -> setText
>2187	PtrMemberAccess	pasteKey -> label -> setText
>2188	Identifier	setText
>2189	PtrMemberAccess	pasteKey -> label
>2190	Identifier	label
>2191	Identifier	pasteKey
>2192	IdentifierDeclStatement	 
>2193	IdentifierDecl	* pasteKey = new DebugButton ( 0 , 0 , 150 )
>2194	AssignmentExpr	* pasteKey = new DebugButton ( 0 , 0 , 150 )
>2195	Expression	0 , 0 , 150
>2196	Expression	0 , 150
>2197	PrimaryExpression	150
>2198	PrimaryExpression	0
>2199	PrimaryExpression	0
>2200	Identifier	pasteKey
>2201	Identifier	pasteKey
>2202	IdentifierDeclType	DebugButton *
>2203	ExpressionStatement	 
>2204	CallExpression	addRenderObject ( copyKey , LR_MENU )
>2205	ArgumentList	copyKey
>2206	Argument	LR_MENU
>2207	Identifier	LR_MENU
>2208	Argument	copyKey
>2209	Identifier	copyKey
>2210	Callee	addRenderObject
>2211	Identifier	addRenderObject
>2212	ExpressionStatement	 
>2213	CallExpression	copyKey -> event . set ( MakeFunctionEvent ( AnimationEditor , copyKey ) )
>2214	ArgumentList	MakeFunctionEvent ( AnimationEditor , copyKey )
>2215	Argument	MakeFunctionEvent ( AnimationEditor , copyKey )
>2216	CallExpression	MakeFunctionEvent ( AnimationEditor , copyKey )
>2217	ArgumentList	AnimationEditor
>2218	Argument	copyKey
>2219	Identifier	copyKey
>2220	Argument	AnimationEditor
>2221	Identifier	AnimationEditor
>2222	Callee	MakeFunctionEvent
>2223	Identifier	MakeFunctionEvent
>2224	Callee	copyKey -> event . set
>2225	MemberAccess	copyKey -> event . set
>2226	Identifier	set
>2227	PtrMemberAccess	copyKey -> event
>2228	Identifier	event
>2229	Identifier	copyKey
>2230	ExpressionStatement	 
>2231	AssignmentExpr	copyKey -> position = Vector ( 10 , 390 )
>2232	CallExpression	Vector ( 10 , 390 )
>2233	ArgumentList	10
>2234	Argument	390
>2235	PrimaryExpression	390
>2236	Argument	10
>2237	PrimaryExpression	10
>2238	Callee	Vector
>2239	Identifier	Vector
>2240	PtrMemberAccess	copyKey -> position
>2241	Identifier	position
>2242	Identifier	copyKey
>2243	ExpressionStatement	 
>2244	CallExpression	copyKey -> label -> setText ( \"copyKey\" )
>2245	ArgumentList	\"copyKey\"
>2246	Argument	\"copyKey\"
>2247	PrimaryExpression	\"copyKey\"
>2248	Callee	copyKey -> label -> setText
>2249	PtrMemberAccess	copyKey -> label -> setText
>2250	Identifier	setText
>2251	PtrMemberAccess	copyKey -> label
>2252	Identifier	label
>2253	Identifier	copyKey
>2254	IdentifierDeclStatement	 
>2255	IdentifierDecl	* copyKey = new DebugButton ( 0 , 0 , 150 )
>2256	AssignmentExpr	* copyKey = new DebugButton ( 0 , 0 , 150 )
>2257	Expression	0 , 0 , 150
>2258	Expression	0 , 150
>2259	PrimaryExpression	150
>2260	PrimaryExpression	0
>2261	PrimaryExpression	0
>2262	Identifier	copyKey
>2263	Identifier	copyKey
>2264	IdentifierDeclType	DebugButton *
>2265	ExpressionStatement	 
>2266	CallExpression	addRenderObject ( nextAnimation , LR_MENU )
>2267	ArgumentList	nextAnimation
>2268	Argument	LR_MENU
>2269	Identifier	LR_MENU
>2270	Argument	nextAnimation
>2271	Identifier	nextAnimation
>2272	Callee	addRenderObject
>2273	Identifier	addRenderObject
>2274	ExpressionStatement	 
>2275	CallExpression	nextAnimation -> event . set ( MakeFunctionEvent ( AnimationEditor , nextAnim ) )
>2276	ArgumentList	MakeFunctionEvent ( AnimationEditor , nextAnim )
>2277	Argument	MakeFunctionEvent ( AnimationEditor , nextAnim )
>2278	CallExpression	MakeFunctionEvent ( AnimationEditor , nextAnim )
>2279	ArgumentList	AnimationEditor
>2280	Argument	nextAnim
>2281	Identifier	nextAnim
>2282	Argument	AnimationEditor
>2283	Identifier	AnimationEditor
>2284	Callee	MakeFunctionEvent
>2285	Identifier	MakeFunctionEvent
>2286	Callee	nextAnimation -> event . set
>2287	MemberAccess	nextAnimation -> event . set
>2288	Identifier	set
>2289	PtrMemberAccess	nextAnimation -> event
>2290	Identifier	event
>2291	Identifier	nextAnimation
>2292	ExpressionStatement	 
>2293	AssignmentExpr	nextAnimation -> position = Vector ( 10 , 360 )
>2294	CallExpression	Vector ( 10 , 360 )
>2295	ArgumentList	10
>2296	Argument	360
>2297	PrimaryExpression	360
>2298	Argument	10
>2299	PrimaryExpression	10
>2300	Callee	Vector
>2301	Identifier	Vector
>2302	PtrMemberAccess	nextAnimation -> position
>2303	Identifier	position
>2304	Identifier	nextAnimation
>2305	ExpressionStatement	 
>2306	CallExpression	nextAnimation -> label -> setText ( \"nextAnim (PGDN)\" )
>2307	ArgumentList	\"nextAnim (PGDN)\"
>2308	Argument	\"nextAnim (PGDN)\"
>2309	PrimaryExpression	\"nextAnim (PGDN)\"
>2310	Callee	nextAnimation -> label -> setText
>2311	PtrMemberAccess	nextAnimation -> label -> setText
>2312	Identifier	setText
>2313	PtrMemberAccess	nextAnimation -> label
>2314	Identifier	label
>2315	Identifier	nextAnimation
>2316	IdentifierDeclStatement	 
>2317	IdentifierDecl	* nextAnimation = new DebugButton ( 0 , 0 , 150 )
>2318	AssignmentExpr	* nextAnimation = new DebugButton ( 0 , 0 , 150 )
>2319	Expression	0 , 0 , 150
>2320	Expression	0 , 150
>2321	PrimaryExpression	150
>2322	PrimaryExpression	0
>2323	PrimaryExpression	0
>2324	Identifier	nextAnimation
>2325	Identifier	nextAnimation
>2326	IdentifierDeclType	DebugButton *
>2327	ExpressionStatement	 
>2328	CallExpression	addRenderObject ( prevAnimation , LR_MENU )
>2329	ArgumentList	prevAnimation
>2330	Argument	LR_MENU
>2331	Identifier	LR_MENU
>2332	Argument	prevAnimation
>2333	Identifier	prevAnimation
>2334	Callee	addRenderObject
>2335	Identifier	addRenderObject
>2336	ExpressionStatement	 
>2337	CallExpression	prevAnimation -> event . set ( MakeFunctionEvent ( AnimationEditor , prevAnim ) )
>2338	ArgumentList	MakeFunctionEvent ( AnimationEditor , prevAnim )
>2339	Argument	MakeFunctionEvent ( AnimationEditor , prevAnim )
>2340	CallExpression	MakeFunctionEvent ( AnimationEditor , prevAnim )
>2341	ArgumentList	AnimationEditor
>2342	Argument	prevAnim
>2343	Identifier	prevAnim
>2344	Argument	AnimationEditor
>2345	Identifier	AnimationEditor
>2346	Callee	MakeFunctionEvent
>2347	Identifier	MakeFunctionEvent
>2348	Callee	prevAnimation -> event . set
>2349	MemberAccess	prevAnimation -> event . set
>2350	Identifier	set
>2351	PtrMemberAccess	prevAnimation -> event
>2352	Identifier	event
>2353	Identifier	prevAnimation
>2354	ExpressionStatement	 
>2355	AssignmentExpr	prevAnimation -> position = Vector ( 10 , 330 )
>2356	CallExpression	Vector ( 10 , 330 )
>2357	ArgumentList	10
>2358	Argument	330
>2359	PrimaryExpression	330
>2360	Argument	10
>2361	PrimaryExpression	10
>2362	Callee	Vector
>2363	Identifier	Vector
>2364	PtrMemberAccess	prevAnimation -> position
>2365	Identifier	position
>2366	Identifier	prevAnimation
>2367	ExpressionStatement	 
>2368	CallExpression	prevAnimation -> label -> setText ( \"prevAnim (PGUP)\" )
>2369	ArgumentList	\"prevAnim (PGUP)\"
>2370	Argument	\"prevAnim (PGUP)\"
>2371	PrimaryExpression	\"prevAnim (PGUP)\"
>2372	Callee	prevAnimation -> label -> setText
>2373	PtrMemberAccess	prevAnimation -> label -> setText
>2374	Identifier	setText
>2375	PtrMemberAccess	prevAnimation -> label
>2376	Identifier	label
>2377	Identifier	prevAnimation
>2378	IdentifierDeclStatement	 
>2379	IdentifierDecl	* prevAnimation = new DebugButton ( 0 , 0 , 150 )
>2380	AssignmentExpr	* prevAnimation = new DebugButton ( 0 , 0 , 150 )
>2381	Expression	0 , 0 , 150
>2382	Expression	0 , 150
>2383	PrimaryExpression	150
>2384	PrimaryExpression	0
>2385	PrimaryExpression	0
>2386	Identifier	prevAnimation
>2387	Identifier	prevAnimation
>2388	IdentifierDeclType	DebugButton *
>2389	ExpressionStatement	 
>2390	CallExpression	addRenderObject ( stop , LR_HUD )
>2391	ArgumentList	stop
>2392	Argument	LR_HUD
>2393	Identifier	LR_HUD
>2394	Argument	stop
>2395	Identifier	stop
>2396	Callee	addRenderObject
>2397	Identifier	addRenderObject
>2398	ExpressionStatement	 
>2399	CallExpression	stop -> event . set ( MakeFunctionEvent ( AnimationEditor , stop ) )
>2400	ArgumentList	MakeFunctionEvent ( AnimationEditor , stop )
>2401	Argument	MakeFunctionEvent ( AnimationEditor , stop )
>2402	CallExpression	MakeFunctionEvent ( AnimationEditor , stop )
>2403	ArgumentList	AnimationEditor
>2404	Argument	stop
>2405	Identifier	stop
>2406	Argument	AnimationEditor
>2407	Identifier	AnimationEditor
>2408	Callee	MakeFunctionEvent
>2409	Identifier	MakeFunctionEvent
>2410	Callee	stop -> event . set
>2411	MemberAccess	stop -> event . set
>2412	Identifier	set
>2413	PtrMemberAccess	stop -> event
>2414	Identifier	event
>2415	Identifier	stop
>2416	ExpressionStatement	 
>2417	CallExpression	stop -> label -> setText ( \"stop  (S-ENTER)\" )
>2418	ArgumentList	\"stop  (S-ENTER)\"
>2419	Argument	\"stop  (S-ENTER)\"
>2420	PrimaryExpression	\"stop  (S-ENTER)\"
>2421	Callee	stop -> label -> setText
>2422	PtrMemberAccess	stop -> label -> setText
>2423	Identifier	setText
>2424	PtrMemberAccess	stop -> label
>2425	Identifier	label
>2426	Identifier	stop
>2427	ExpressionStatement	 
>2428	AssignmentExpr	stop -> position = Vector ( 10 , 230 )
>2429	CallExpression	Vector ( 10 , 230 )
>2430	ArgumentList	10
>2431	Argument	230
>2432	PrimaryExpression	230
>2433	Argument	10
>2434	PrimaryExpression	10
>2435	Callee	Vector
>2436	Identifier	Vector
>2437	PtrMemberAccess	stop -> position
>2438	Identifier	position
>2439	Identifier	stop
>2440	IdentifierDeclStatement	 
>2441	IdentifierDecl	* stop = new DebugButton ( 0 , 0 , 150 )
>2442	AssignmentExpr	* stop = new DebugButton ( 0 , 0 , 150 )
>2443	Expression	0 , 0 , 150
>2444	Expression	0 , 150
>2445	PrimaryExpression	150
>2446	PrimaryExpression	0
>2447	PrimaryExpression	0
>2448	Identifier	stop
>2449	Identifier	stop
>2450	IdentifierDeclType	DebugButton *
>2451	ExpressionStatement	 
>2452	CallExpression	addRenderObject ( animate , LR_HUD )
>2453	ArgumentList	animate
>2454	Argument	LR_HUD
>2455	Identifier	LR_HUD
>2456	Argument	animate
>2457	Identifier	animate
>2458	Callee	addRenderObject
>2459	Identifier	addRenderObject
>2460	ExpressionStatement	 
>2461	CallExpression	animate -> event . set ( MakeFunctionEvent ( AnimationEditor , animate ) )
>2462	ArgumentList	MakeFunctionEvent ( AnimationEditor , animate )
>2463	Argument	MakeFunctionEvent ( AnimationEditor , animate )
>2464	CallExpression	MakeFunctionEvent ( AnimationEditor , animate )
>2465	ArgumentList	AnimationEditor
>2466	Argument	animate
>2467	Identifier	animate
>2468	Argument	AnimationEditor
>2469	Identifier	AnimationEditor
>2470	Callee	MakeFunctionEvent
>2471	Identifier	MakeFunctionEvent
>2472	Callee	animate -> event . set
>2473	MemberAccess	animate -> event . set
>2474	Identifier	set
>2475	PtrMemberAccess	animate -> event
>2476	Identifier	event
>2477	Identifier	animate
>2478	ExpressionStatement	 
>2479	CallExpression	animate -> label -> setText ( \"animate (ENTER)\" )
>2480	ArgumentList	\"animate (ENTER)\"
>2481	Argument	\"animate (ENTER)\"
>2482	PrimaryExpression	\"animate (ENTER)\"
>2483	Callee	animate -> label -> setText
>2484	PtrMemberAccess	animate -> label -> setText
>2485	Identifier	setText
>2486	PtrMemberAccess	animate -> label
>2487	Identifier	label
>2488	Identifier	animate
>2489	ExpressionStatement	 
>2490	AssignmentExpr	animate -> position = Vector ( 10 , 200 )
>2491	CallExpression	Vector ( 10 , 200 )
>2492	ArgumentList	10
>2493	Argument	200
>2494	PrimaryExpression	200
>2495	Argument	10
>2496	PrimaryExpression	10
>2497	Callee	Vector
>2498	Identifier	Vector
>2499	PtrMemberAccess	animate -> position
>2500	Identifier	position
>2501	Identifier	animate
>2502	IdentifierDeclStatement	 
>2503	IdentifierDecl	* animate = new DebugButton ( 0 , 0 , 150 )
>2504	AssignmentExpr	* animate = new DebugButton ( 0 , 0 , 150 )
>2505	Expression	0 , 0 , 150
>2506	Expression	0 , 150
>2507	PrimaryExpression	150
>2508	PrimaryExpression	0
>2509	PrimaryExpression	0
>2510	Identifier	animate
>2511	Identifier	animate
>2512	IdentifierDeclType	DebugButton *
>2513	ExpressionStatement	 
>2514	CallExpression	addRenderObject ( a3 , LR_HUD )
>2515	ArgumentList	a3
>2516	Argument	LR_HUD
>2517	Identifier	LR_HUD
>2518	Argument	a3
>2519	Identifier	a3
>2520	Callee	addRenderObject
>2521	Identifier	addRenderObject
>2522	ExpressionStatement	 
>2523	CallExpression	a3 -> event . set ( MakeFunctionEvent ( AnimationEditor , newKey ) )
>2524	ArgumentList	MakeFunctionEvent ( AnimationEditor , newKey )
>2525	Argument	MakeFunctionEvent ( AnimationEditor , newKey )
>2526	CallExpression	MakeFunctionEvent ( AnimationEditor , newKey )
>2527	ArgumentList	AnimationEditor
>2528	Argument	newKey
>2529	Identifier	newKey
>2530	Argument	AnimationEditor
>2531	Identifier	AnimationEditor
>2532	Callee	MakeFunctionEvent
>2533	Identifier	MakeFunctionEvent
>2534	Callee	a3 -> event . set
>2535	MemberAccess	a3 -> event . set
>2536	Identifier	set
>2537	PtrMemberAccess	a3 -> event
>2538	Identifier	event
>2539	Identifier	a3
>2540	ExpressionStatement	 
>2541	CallExpression	a3 -> label -> setText ( \"cloneKey\" )
>2542	ArgumentList	\"cloneKey\"
>2543	Argument	\"cloneKey\"
>2544	PrimaryExpression	\"cloneKey\"
>2545	Callee	a3 -> label -> setText
>2546	PtrMemberAccess	a3 -> label -> setText
>2547	Identifier	setText
>2548	PtrMemberAccess	a3 -> label
>2549	Identifier	label
>2550	Identifier	a3
>2551	ExpressionStatement	 
>2552	AssignmentExpr	a3 -> position = Vector ( 10 , 120 )
>2553	CallExpression	Vector ( 10 , 120 )
>2554	ArgumentList	10
>2555	Argument	120
>2556	PrimaryExpression	120
>2557	Argument	10
>2558	PrimaryExpression	10
>2559	Callee	Vector
>2560	Identifier	Vector
>2561	PtrMemberAccess	a3 -> position
>2562	Identifier	position
>2563	Identifier	a3
>2564	IdentifierDeclStatement	 
>2565	IdentifierDecl	* a3 = new DebugButton ( 0 , 0 , 150 )
>2566	AssignmentExpr	* a3 = new DebugButton ( 0 , 0 , 150 )
>2567	Expression	0 , 0 , 150
>2568	Expression	0 , 150
>2569	PrimaryExpression	150
>2570	PrimaryExpression	0
>2571	PrimaryExpression	0
>2572	Identifier	a3
>2573	Identifier	a3
>2574	IdentifierDeclType	DebugButton *
>2575	ExpressionStatement	 
>2576	CallExpression	addRenderObject ( a2 , LR_HUD )
>2577	ArgumentList	a2
>2578	Argument	LR_HUD
>2579	Identifier	LR_HUD
>2580	Argument	a2
>2581	Identifier	a2
>2582	Callee	addRenderObject
>2583	Identifier	addRenderObject
>2584	ExpressionStatement	 
>2585	CallExpression	a2 -> event . set ( MakeFunctionEvent ( AnimationEditor , nextKey ) )
>2586	ArgumentList	MakeFunctionEvent ( AnimationEditor , nextKey )
>2587	Argument	MakeFunctionEvent ( AnimationEditor , nextKey )
>2588	CallExpression	MakeFunctionEvent ( AnimationEditor , nextKey )
>2589	ArgumentList	AnimationEditor
>2590	Argument	nextKey
>2591	Identifier	nextKey
>2592	Argument	AnimationEditor
>2593	Identifier	AnimationEditor
>2594	Callee	MakeFunctionEvent
>2595	Identifier	MakeFunctionEvent
>2596	Callee	a2 -> event . set
>2597	MemberAccess	a2 -> event . set
>2598	Identifier	set
>2599	PtrMemberAccess	a2 -> event
>2600	Identifier	event
>2601	Identifier	a2
>2602	ExpressionStatement	 
>2603	CallExpression	a2 -> label -> setText ( \"nextKey (RIGHT)\" )
>2604	ArgumentList	\"nextKey (RIGHT)\"
>2605	Argument	\"nextKey (RIGHT)\"
>2606	PrimaryExpression	\"nextKey (RIGHT)\"
>2607	Callee	a2 -> label -> setText
>2608	PtrMemberAccess	a2 -> label -> setText
>2609	Identifier	setText
>2610	PtrMemberAccess	a2 -> label
>2611	Identifier	label
>2612	Identifier	a2
>2613	ExpressionStatement	 
>2614	AssignmentExpr	a2 -> position = Vector ( 10 , 90 )
>2615	CallExpression	Vector ( 10 , 90 )
>2616	ArgumentList	10
>2617	Argument	90
>2618	PrimaryExpression	90
>2619	Argument	10
>2620	PrimaryExpression	10
>2621	Callee	Vector
>2622	Identifier	Vector
>2623	PtrMemberAccess	a2 -> position
>2624	Identifier	position
>2625	Identifier	a2
>2626	IdentifierDeclStatement	 
>2627	IdentifierDecl	* a2 = new DebugButton ( 0 , 0 , 150 )
>2628	AssignmentExpr	* a2 = new DebugButton ( 0 , 0 , 150 )
>2629	Expression	0 , 0 , 150
>2630	Expression	0 , 150
>2631	PrimaryExpression	150
>2632	PrimaryExpression	0
>2633	PrimaryExpression	0
>2634	Identifier	a2
>2635	Identifier	a2
>2636	IdentifierDeclType	DebugButton *
>2637	ExpressionStatement	 
>2638	CallExpression	addRenderObject ( a , LR_HUD )
>2639	ArgumentList	a
>2640	Argument	LR_HUD
>2641	Identifier	LR_HUD
>2642	Argument	a
>2643	Identifier	a
>2644	Callee	addRenderObject
>2645	Identifier	addRenderObject
>2646	ExpressionStatement	 
>2647	CallExpression	a -> event . set ( MakeFunctionEvent ( AnimationEditor , prevKey ) )
>2648	ArgumentList	MakeFunctionEvent ( AnimationEditor , prevKey )
>2649	Argument	MakeFunctionEvent ( AnimationEditor , prevKey )
>2650	CallExpression	MakeFunctionEvent ( AnimationEditor , prevKey )
>2651	ArgumentList	AnimationEditor
>2652	Argument	prevKey
>2653	Identifier	prevKey
>2654	Argument	AnimationEditor
>2655	Identifier	AnimationEditor
>2656	Callee	MakeFunctionEvent
>2657	Identifier	MakeFunctionEvent
>2658	Callee	a -> event . set
>2659	MemberAccess	a -> event . set
>2660	Identifier	set
>2661	PtrMemberAccess	a -> event
>2662	Identifier	event
>2663	Identifier	a
>2664	ExpressionStatement	 
>2665	CallExpression	a -> label -> setText ( \"prevKey  (LEFT)\" )
>2666	ArgumentList	\"prevKey  (LEFT)\"
>2667	Argument	\"prevKey  (LEFT)\"
>2668	PrimaryExpression	\"prevKey  (LEFT)\"
>2669	Callee	a -> label -> setText
>2670	PtrMemberAccess	a -> label -> setText
>2671	Identifier	setText
>2672	PtrMemberAccess	a -> label
>2673	Identifier	label
>2674	Identifier	a
>2675	ExpressionStatement	 
>2676	AssignmentExpr	a -> position = Vector ( 10 , 60 )
>2677	CallExpression	Vector ( 10 , 60 )
>2678	ArgumentList	10
>2679	Argument	60
>2680	PrimaryExpression	60
>2681	Argument	10
>2682	PrimaryExpression	10
>2683	Callee	Vector
>2684	Identifier	Vector
>2685	PtrMemberAccess	a -> position
>2686	Identifier	position
>2687	Identifier	a
>2688	IdentifierDeclStatement	 
>2689	IdentifierDecl	* a = new DebugButton ( 0 , 0 , 150 )
>2690	AssignmentExpr	* a = new DebugButton ( 0 , 0 , 150 )
>2691	Expression	0 , 0 , 150
>2692	Expression	0 , 150
>2693	PrimaryExpression	150
>2694	PrimaryExpression	0
>2695	PrimaryExpression	0
>2696	Identifier	a
>2697	Identifier	a
>2698	IdentifierDeclType	DebugButton *
>2699	ExpressionStatement	 
>2700	CallExpression	addRenderObject ( bgGrad , LR_BACKDROP )
>2701	ArgumentList	bgGrad
>2702	Argument	LR_BACKDROP
>2703	Identifier	LR_BACKDROP
>2704	Argument	bgGrad
>2705	Identifier	bgGrad
>2706	Callee	addRenderObject
>2707	Identifier	addRenderObject
>2708	ExpressionStatement	 
>2709	CallExpression	bgGrad -> makeVertical ( Vector ( 0.4 , 0.4 , 0.4 ) , Vector ( 0.8 , 0.8 , 0.8 ) )
>2710	ArgumentList	Vector ( 0.4 , 0.4 , 0.4 )
>2711	Argument	Vector ( 0.8 , 0.8 , 0.8 )
>2712	CallExpression	Vector ( 0.8 , 0.8 , 0.8 )
>2713	ArgumentList	0.8
>2714	Argument	0.8
>2715	PrimaryExpression	0.8
>2716	Argument	0.8
>2717	PrimaryExpression	0.8
>2718	Argument	0.8
>2719	PrimaryExpression	0.8
>2720	Callee	Vector
>2721	Identifier	Vector
>2722	Argument	Vector ( 0.4 , 0.4 , 0.4 )
>2723	CallExpression	Vector ( 0.4 , 0.4 , 0.4 )
>2724	ArgumentList	0.4
>2725	Argument	0.4
>2726	PrimaryExpression	0.4
>2727	Argument	0.4
>2728	PrimaryExpression	0.4
>2729	Argument	0.4
>2730	PrimaryExpression	0.4
>2731	Callee	Vector
>2732	Identifier	Vector
>2733	Callee	bgGrad -> makeVertical
>2734	PtrMemberAccess	bgGrad -> makeVertical
>2735	Identifier	makeVertical
>2736	Identifier	bgGrad
>2737	ExpressionStatement	 
>2738	AssignmentExpr	bgGrad -> position = Vector ( 400 , 300 )
>2739	CallExpression	Vector ( 400 , 300 )
>2740	ArgumentList	400
>2741	Argument	300
>2742	PrimaryExpression	300
>2743	Argument	400
>2744	PrimaryExpression	400
>2745	Callee	Vector
>2746	Identifier	Vector
>2747	PtrMemberAccess	bgGrad -> position
>2748	Identifier	position
>2749	Identifier	bgGrad
>2750	ExpressionStatement	 
>2751	AssignmentExpr	bgGrad -> scale = Vector ( 800 , 600 )
>2752	CallExpression	Vector ( 800 , 600 )
>2753	ArgumentList	800
>2754	Argument	600
>2755	PrimaryExpression	600
>2756	Argument	800
>2757	PrimaryExpression	800
>2758	Callee	Vector
>2759	Identifier	Vector
>2760	PtrMemberAccess	bgGrad -> scale
>2761	Identifier	scale
>2762	Identifier	bgGrad
>2763	ExpressionStatement	 
>2764	Identifier	Gradient
>2765	Statement	 
>2766	Statement	 
>2767	Statement	 
>2768	ExpressionStatement	 
>2769	CallExpression	addRenderObject ( back , LR_BACKDROP )
>2770	ArgumentList	back
>2771	Argument	LR_BACKDROP
>2772	Identifier	LR_BACKDROP
>2773	Argument	back
>2774	Identifier	back
>2775	Callee	addRenderObject
>2776	Identifier	addRenderObject
>2777	CompoundStatement	 
>2778	ExpressionStatement	 
>2779	AssignmentExpr	back -> position = Vector ( 400 , 300 , - 0.2 )
>2780	CallExpression	Vector ( 400 , 300 , - 0.2 )
>2781	ArgumentList	400
>2782	Argument	- 0.2
>2783	UnaryOp	- 0.2
>2784	PrimaryExpression	0.2
>2785	UnaryOperator	-
>2786	Argument	300
>2787	PrimaryExpression	300
>2788	Argument	400
>2789	PrimaryExpression	400
>2790	Callee	Vector
>2791	Identifier	Vector
>2792	PtrMemberAccess	back -> position
>2793	Identifier	position
>2794	Identifier	back
>2795	ExpressionStatement	 
>2796	CallExpression	back -> setWidthHeight ( 800 , 600 )
>2797	ArgumentList	800
>2798	Argument	600
>2799	PrimaryExpression	600
>2800	Argument	800
>2801	PrimaryExpression	800
>2802	Callee	back -> setWidthHeight
>2803	PtrMemberAccess	back -> setWidthHeight
>2804	Identifier	setWidthHeight
>2805	Identifier	back
>2806	ExpressionStatement	 
>2807	AssignmentExpr	back -> color = 0
>2808	PrimaryExpression	0
>2809	PtrMemberAccess	back -> color
>2810	Identifier	color
>2811	Identifier	back
>2812	ExpressionStatement	 
>2813	Identifier	Quad
>2814	Statement	 
>2815	Statement	 
>2816	Statement	 
>2817	Statement	 
>2818	Statement	 
>2819	ExpressionStatement	 
>2820	CallExpression	addRenderObject ( editSprite , LR_ENTITIES )
>2821	ArgumentList	editSprite
>2822	Argument	LR_ENTITIES
>2823	Identifier	LR_ENTITIES
>2824	Argument	editSprite
>2825	Identifier	editSprite
>2826	Callee	addRenderObject
>2827	Identifier	addRenderObject
>2828	ExpressionStatement	 
>2829	CallExpression	addAction ( ACTION_SWIMDOWN , KEY_DOWN )
>2830	ArgumentList	ACTION_SWIMDOWN
>2831	Argument	KEY_DOWN
>2832	Identifier	KEY_DOWN
>2833	Argument	ACTION_SWIMDOWN
>2834	Identifier	ACTION_SWIMDOWN
>2835	Callee	addAction
>2836	Identifier	addAction
>2837	ExpressionStatement	 
>2838	CallExpression	addAction ( ACTION_SWIMUP , KEY_UP )
>2839	ArgumentList	ACTION_SWIMUP
>2840	Argument	KEY_UP
>2841	Identifier	KEY_UP
>2842	Argument	ACTION_SWIMUP
>2843	Identifier	ACTION_SWIMUP
>2844	Callee	addAction
>2845	Identifier	addAction
>2846	ExpressionStatement	 
>2847	CallExpression	addAction ( ACTION_SWIMRIGHT , KEY_K )
>2848	ArgumentList	ACTION_SWIMRIGHT
>2849	Argument	KEY_K
>2850	Identifier	KEY_K
>2851	Argument	ACTION_SWIMRIGHT
>2852	Identifier	ACTION_SWIMRIGHT
>2853	Callee	addAction
>2854	Identifier	addAction
>2855	ExpressionStatement	 
>2856	CallExpression	addAction ( ACTION_SWIMLEFT , KEY_J )
>2857	ArgumentList	ACTION_SWIMLEFT
>2858	Argument	KEY_J
>2859	Identifier	KEY_J
>2860	Argument	ACTION_SWIMLEFT
>2861	Identifier	ACTION_SWIMLEFT
>2862	Callee	addAction
>2863	Identifier	addAction
>2864	ExpressionStatement	 
>2865	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , incrTimelineGrid ) , KEY_P , 0 )
>2866	ArgumentList	MakeFunctionEvent ( AnimationEditor , incrTimelineGrid )
>2867	Argument	0
>2868	PrimaryExpression	0
>2869	Argument	KEY_P
>2870	Identifier	KEY_P
>2871	Argument	MakeFunctionEvent ( AnimationEditor , incrTimelineGrid )
>2872	CallExpression	MakeFunctionEvent ( AnimationEditor , incrTimelineGrid )
>2873	ArgumentList	AnimationEditor
>2874	Argument	incrTimelineGrid
>2875	Identifier	incrTimelineGrid
>2876	Argument	AnimationEditor
>2877	Identifier	AnimationEditor
>2878	Callee	MakeFunctionEvent
>2879	Identifier	MakeFunctionEvent
>2880	Callee	addAction
>2881	Identifier	addAction
>2882	ExpressionStatement	 
>2883	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , decrTimelineGrid ) , KEY_O , 0 )
>2884	ArgumentList	MakeFunctionEvent ( AnimationEditor , decrTimelineGrid )
>2885	Argument	0
>2886	PrimaryExpression	0
>2887	Argument	KEY_O
>2888	Identifier	KEY_O
>2889	Argument	MakeFunctionEvent ( AnimationEditor , decrTimelineGrid )
>2890	CallExpression	MakeFunctionEvent ( AnimationEditor , decrTimelineGrid )
>2891	ArgumentList	AnimationEditor
>2892	Argument	decrTimelineGrid
>2893	Identifier	decrTimelineGrid
>2894	Argument	AnimationEditor
>2895	Identifier	AnimationEditor
>2896	Callee	MakeFunctionEvent
>2897	Identifier	MakeFunctionEvent
>2898	Callee	addAction
>2899	Identifier	addAction
>2900	ExpressionStatement	 
>2901	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , incrTimelineUnit ) , KEY_I , 0 )
>2902	ArgumentList	MakeFunctionEvent ( AnimationEditor , incrTimelineUnit )
>2903	Argument	0
>2904	PrimaryExpression	0
>2905	Argument	KEY_I
>2906	Identifier	KEY_I
>2907	Argument	MakeFunctionEvent ( AnimationEditor , incrTimelineUnit )
>2908	CallExpression	MakeFunctionEvent ( AnimationEditor , incrTimelineUnit )
>2909	ArgumentList	AnimationEditor
>2910	Argument	incrTimelineUnit
>2911	Identifier	incrTimelineUnit
>2912	Argument	AnimationEditor
>2913	Identifier	AnimationEditor
>2914	Callee	MakeFunctionEvent
>2915	Identifier	MakeFunctionEvent
>2916	Callee	addAction
>2917	Identifier	addAction
>2918	ExpressionStatement	 
>2919	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , decrTimelineUnit ) , KEY_U , 0 )
>2920	ArgumentList	MakeFunctionEvent ( AnimationEditor , decrTimelineUnit )
>2921	Argument	0
>2922	PrimaryExpression	0
>2923	Argument	KEY_U
>2924	Identifier	KEY_U
>2925	Argument	MakeFunctionEvent ( AnimationEditor , decrTimelineUnit )
>2926	CallExpression	MakeFunctionEvent ( AnimationEditor , decrTimelineUnit )
>2927	ArgumentList	AnimationEditor
>2928	Argument	decrTimelineUnit
>2929	Identifier	decrTimelineUnit
>2930	Argument	AnimationEditor
>2931	Identifier	AnimationEditor
>2932	Callee	MakeFunctionEvent
>2933	Identifier	MakeFunctionEvent
>2934	Callee	addAction
>2935	Identifier	addAction
>2936	ExpressionStatement	 
>2937	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , showAllBones ) , KEY_A , 0 )
>2938	ArgumentList	MakeFunctionEvent ( AnimationEditor , showAllBones )
>2939	Argument	0
>2940	PrimaryExpression	0
>2941	Argument	KEY_A
>2942	Identifier	KEY_A
>2943	Argument	MakeFunctionEvent ( AnimationEditor , showAllBones )
>2944	CallExpression	MakeFunctionEvent ( AnimationEditor , showAllBones )
>2945	ArgumentList	AnimationEditor
>2946	Argument	showAllBones
>2947	Identifier	showAllBones
>2948	Argument	AnimationEditor
>2949	Identifier	AnimationEditor
>2950	Callee	MakeFunctionEvent
>2951	Identifier	MakeFunctionEvent
>2952	Callee	addAction
>2953	Identifier	addAction
>2954	ExpressionStatement	 
>2955	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , toggleMouseSelection ) , KEY_M , 0 )
>2956	ArgumentList	MakeFunctionEvent ( AnimationEditor , toggleMouseSelection )
>2957	Argument	0
>2958	PrimaryExpression	0
>2959	Argument	KEY_M
>2960	Identifier	KEY_M
>2961	Argument	MakeFunctionEvent ( AnimationEditor , toggleMouseSelection )
>2962	CallExpression	MakeFunctionEvent ( AnimationEditor , toggleMouseSelection )
>2963	ArgumentList	AnimationEditor
>2964	Argument	toggleMouseSelection
>2965	Identifier	toggleMouseSelection
>2966	Argument	AnimationEditor
>2967	Identifier	AnimationEditor
>2968	Callee	MakeFunctionEvent
>2969	Identifier	MakeFunctionEvent
>2970	Callee	addAction
>2971	Identifier	addAction
>2972	ExpressionStatement	 
>2973	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , toggleRenderBorders ) , KEY_B , 0 )
>2974	ArgumentList	MakeFunctionEvent ( AnimationEditor , toggleRenderBorders )
>2975	Argument	0
>2976	PrimaryExpression	0
>2977	Argument	KEY_B
>2978	Identifier	KEY_B
>2979	Argument	MakeFunctionEvent ( AnimationEditor , toggleRenderBorders )
>2980	CallExpression	MakeFunctionEvent ( AnimationEditor , toggleRenderBorders )
>2981	ArgumentList	AnimationEditor
>2982	Argument	toggleRenderBorders
>2983	Identifier	toggleRenderBorders
>2984	Argument	AnimationEditor
>2985	Identifier	AnimationEditor
>2986	Callee	MakeFunctionEvent
>2987	Identifier	MakeFunctionEvent
>2988	Callee	addAction
>2989	Identifier	addAction
>2990	ExpressionStatement	 
>2991	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , animateOrStop ) , KEY_RETURN , 0 )
>2992	ArgumentList	MakeFunctionEvent ( AnimationEditor , animateOrStop )
>2993	Argument	0
>2994	PrimaryExpression	0
>2995	Argument	KEY_RETURN
>2996	Identifier	KEY_RETURN
>2997	Argument	MakeFunctionEvent ( AnimationEditor , animateOrStop )
>2998	CallExpression	MakeFunctionEvent ( AnimationEditor , animateOrStop )
>2999	ArgumentList	AnimationEditor
>3000	Argument	animateOrStop
>3001	Identifier	animateOrStop
>3002	Argument	AnimationEditor
>3003	Identifier	AnimationEditor
>3004	Callee	MakeFunctionEvent
>3005	Identifier	MakeFunctionEvent
>3006	Callee	addAction
>3007	Identifier	addAction
>3008	ExpressionStatement	 
>3009	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , nextAnim ) , KEY_PGDN , 0 )
>3010	ArgumentList	MakeFunctionEvent ( AnimationEditor , nextAnim )
>3011	Argument	0
>3012	PrimaryExpression	0
>3013	Argument	KEY_PGDN
>3014	Identifier	KEY_PGDN
>3015	Argument	MakeFunctionEvent ( AnimationEditor , nextAnim )
>3016	CallExpression	MakeFunctionEvent ( AnimationEditor , nextAnim )
>3017	ArgumentList	AnimationEditor
>3018	Argument	nextAnim
>3019	Identifier	nextAnim
>3020	Argument	AnimationEditor
>3021	Identifier	AnimationEditor
>3022	Callee	MakeFunctionEvent
>3023	Identifier	MakeFunctionEvent
>3024	Callee	addAction
>3025	Identifier	addAction
>3026	ExpressionStatement	 
>3027	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , prevAnim ) , KEY_PGUP , 0 )
>3028	ArgumentList	MakeFunctionEvent ( AnimationEditor , prevAnim )
>3029	Argument	0
>3030	PrimaryExpression	0
>3031	Argument	KEY_PGUP
>3032	Identifier	KEY_PGUP
>3033	Argument	MakeFunctionEvent ( AnimationEditor , prevAnim )
>3034	CallExpression	MakeFunctionEvent ( AnimationEditor , prevAnim )
>3035	ArgumentList	AnimationEditor
>3036	Argument	prevAnim
>3037	Identifier	prevAnim
>3038	Argument	AnimationEditor
>3039	Identifier	AnimationEditor
>3040	Callee	MakeFunctionEvent
>3041	Identifier	MakeFunctionEvent
>3042	Callee	addAction
>3043	Identifier	addAction
>3044	ExpressionStatement	 
>3045	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , editStripKey ) , KEY_E , 0 )
>3046	ArgumentList	MakeFunctionEvent ( AnimationEditor , editStripKey )
>3047	Argument	0
>3048	PrimaryExpression	0
>3049	Argument	KEY_E
>3050	Identifier	KEY_E
>3051	Argument	MakeFunctionEvent ( AnimationEditor , editStripKey )
>3052	CallExpression	MakeFunctionEvent ( AnimationEditor , editStripKey )
>3053	ArgumentList	AnimationEditor
>3054	Argument	editStripKey
>3055	Identifier	editStripKey
>3056	Argument	AnimationEditor
>3057	Identifier	AnimationEditor
>3058	Callee	MakeFunctionEvent
>3059	Identifier	MakeFunctionEvent
>3060	Callee	addAction
>3061	Identifier	addAction
>3062	ExpressionStatement	 
>3063	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , selectNextBone ) , KEY_DOWN , 0 )
>3064	ArgumentList	MakeFunctionEvent ( AnimationEditor , selectNextBone )
>3065	Argument	0
>3066	PrimaryExpression	0
>3067	Argument	KEY_DOWN
>3068	Identifier	KEY_DOWN
>3069	Argument	MakeFunctionEvent ( AnimationEditor , selectNextBone )
>3070	CallExpression	MakeFunctionEvent ( AnimationEditor , selectNextBone )
>3071	ArgumentList	AnimationEditor
>3072	Argument	selectNextBone
>3073	Identifier	selectNextBone
>3074	Argument	AnimationEditor
>3075	Identifier	AnimationEditor
>3076	Callee	MakeFunctionEvent
>3077	Identifier	MakeFunctionEvent
>3078	Callee	addAction
>3079	Identifier	addAction
>3080	ExpressionStatement	 
>3081	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , selectPrevBone ) , KEY_UP , 0 )
>3082	ArgumentList	MakeFunctionEvent ( AnimationEditor , selectPrevBone )
>3083	Argument	0
>3084	PrimaryExpression	0
>3085	Argument	KEY_UP
>3086	Identifier	KEY_UP
>3087	Argument	MakeFunctionEvent ( AnimationEditor , selectPrevBone )
>3088	CallExpression	MakeFunctionEvent ( AnimationEditor , selectPrevBone )
>3089	ArgumentList	AnimationEditor
>3090	Argument	selectPrevBone
>3091	Identifier	selectPrevBone
>3092	Argument	AnimationEditor
>3093	Identifier	AnimationEditor
>3094	Callee	MakeFunctionEvent
>3095	Identifier	MakeFunctionEvent
>3096	Callee	addAction
>3097	Identifier	addAction
>3098	ExpressionStatement	 
>3099	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , cycleLerpType ) , KEY_L , 0 )
>3100	ArgumentList	MakeFunctionEvent ( AnimationEditor , cycleLerpType )
>3101	Argument	0
>3102	PrimaryExpression	0
>3103	Argument	KEY_L
>3104	Identifier	KEY_L
>3105	Argument	MakeFunctionEvent ( AnimationEditor , cycleLerpType )
>3106	CallExpression	MakeFunctionEvent ( AnimationEditor , cycleLerpType )
>3107	ArgumentList	AnimationEditor
>3108	Argument	cycleLerpType
>3109	Identifier	cycleLerpType
>3110	Argument	AnimationEditor
>3111	Identifier	AnimationEditor
>3112	Callee	MakeFunctionEvent
>3113	Identifier	MakeFunctionEvent
>3114	Callee	addAction
>3115	Identifier	addAction
>3116	ExpressionStatement	 
>3117	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , redo ) , KEY_Y , 0 )
>3118	ArgumentList	MakeFunctionEvent ( AnimationEditor , redo )
>3119	Argument	0
>3120	PrimaryExpression	0
>3121	Argument	KEY_Y
>3122	Identifier	KEY_Y
>3123	Argument	MakeFunctionEvent ( AnimationEditor , redo )
>3124	CallExpression	MakeFunctionEvent ( AnimationEditor , redo )
>3125	ArgumentList	AnimationEditor
>3126	Argument	redo
>3127	Identifier	redo
>3128	Argument	AnimationEditor
>3129	Identifier	AnimationEditor
>3130	Callee	MakeFunctionEvent
>3131	Identifier	MakeFunctionEvent
>3132	Callee	addAction
>3133	Identifier	addAction
>3134	ExpressionStatement	 
>3135	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , undo ) , KEY_Z , 0 )
>3136	ArgumentList	MakeFunctionEvent ( AnimationEditor , undo )
>3137	Argument	0
>3138	PrimaryExpression	0
>3139	Argument	KEY_Z
>3140	Identifier	KEY_Z
>3141	Argument	MakeFunctionEvent ( AnimationEditor , undo )
>3142	CallExpression	MakeFunctionEvent ( AnimationEditor , undo )
>3143	ArgumentList	AnimationEditor
>3144	Argument	undo
>3145	Identifier	undo
>3146	Argument	AnimationEditor
>3147	Identifier	AnimationEditor
>3148	Callee	MakeFunctionEvent
>3149	Identifier	MakeFunctionEvent
>3150	Callee	addAction
>3151	Identifier	addAction
>3152	ExpressionStatement	 
>3153	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , paste ) , KEY_V , 0 )
>3154	ArgumentList	MakeFunctionEvent ( AnimationEditor , paste )
>3155	Argument	0
>3156	PrimaryExpression	0
>3157	Argument	KEY_V
>3158	Identifier	KEY_V
>3159	Argument	MakeFunctionEvent ( AnimationEditor , paste )
>3160	CallExpression	MakeFunctionEvent ( AnimationEditor , paste )
>3161	ArgumentList	AnimationEditor
>3162	Argument	paste
>3163	Identifier	paste
>3164	Argument	AnimationEditor
>3165	Identifier	AnimationEditor
>3166	Callee	MakeFunctionEvent
>3167	Identifier	MakeFunctionEvent
>3168	Callee	addAction
>3169	Identifier	addAction
>3170	ExpressionStatement	 
>3171	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , copy ) , KEY_C , 0 )
>3172	ArgumentList	MakeFunctionEvent ( AnimationEditor , copy )
>3173	Argument	0
>3174	PrimaryExpression	0
>3175	Argument	KEY_C
>3176	Identifier	KEY_C
>3177	Argument	MakeFunctionEvent ( AnimationEditor , copy )
>3178	CallExpression	MakeFunctionEvent ( AnimationEditor , copy )
>3179	ArgumentList	AnimationEditor
>3180	Argument	copy
>3181	Identifier	copy
>3182	Argument	AnimationEditor
>3183	Identifier	AnimationEditor
>3184	Callee	MakeFunctionEvent
>3185	Identifier	MakeFunctionEvent
>3186	Callee	addAction
>3187	Identifier	addAction
>3188	ExpressionStatement	 
>3189	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , toggleHideBone ) , KEY_N , 0 )
>3190	ArgumentList	MakeFunctionEvent ( AnimationEditor , toggleHideBone )
>3191	Argument	0
>3192	PrimaryExpression	0
>3193	Argument	KEY_N
>3194	Identifier	KEY_N
>3195	Argument	MakeFunctionEvent ( AnimationEditor , toggleHideBone )
>3196	CallExpression	MakeFunctionEvent ( AnimationEditor , toggleHideBone )
>3197	ArgumentList	AnimationEditor
>3198	Argument	toggleHideBone
>3199	Identifier	toggleHideBone
>3200	Argument	AnimationEditor
>3201	Identifier	AnimationEditor
>3202	Callee	MakeFunctionEvent
>3203	Identifier	MakeFunctionEvent
>3204	Callee	addAction
>3205	Identifier	addAction
>3206	ExpressionStatement	 
>3207	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , flipRot ) , KEY_D , 0 )
>3208	ArgumentList	MakeFunctionEvent ( AnimationEditor , flipRot )
>3209	Argument	0
>3210	PrimaryExpression	0
>3211	Argument	KEY_D
>3212	Identifier	KEY_D
>3213	Argument	MakeFunctionEvent ( AnimationEditor , flipRot )
>3214	CallExpression	MakeFunctionEvent ( AnimationEditor , flipRot )
>3215	ArgumentList	AnimationEditor
>3216	Argument	flipRot
>3217	Identifier	flipRot
>3218	Argument	AnimationEditor
>3219	Identifier	AnimationEditor
>3220	Callee	MakeFunctionEvent
>3221	Identifier	MakeFunctionEvent
>3222	Callee	addAction
>3223	Identifier	addAction
>3224	ExpressionStatement	 
>3225	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , clearPos ) , KEY_P , 0 )
>3226	ArgumentList	MakeFunctionEvent ( AnimationEditor , clearPos )
>3227	Argument	0
>3228	PrimaryExpression	0
>3229	Argument	KEY_P
>3230	Identifier	KEY_P
>3231	Argument	MakeFunctionEvent ( AnimationEditor , clearPos )
>3232	CallExpression	MakeFunctionEvent ( AnimationEditor , clearPos )
>3233	ArgumentList	AnimationEditor
>3234	Argument	clearPos
>3235	Identifier	clearPos
>3236	Argument	AnimationEditor
>3237	Identifier	AnimationEditor
>3238	Callee	MakeFunctionEvent
>3239	Identifier	MakeFunctionEvent
>3240	Callee	addAction
>3241	Identifier	addAction
>3242	ExpressionStatement	 
>3243	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , clearRot ) , KEY_R , 0 )
>3244	ArgumentList	MakeFunctionEvent ( AnimationEditor , clearRot )
>3245	Argument	0
>3246	PrimaryExpression	0
>3247	Argument	KEY_R
>3248	Identifier	KEY_R
>3249	Argument	MakeFunctionEvent ( AnimationEditor , clearRot )
>3250	CallExpression	MakeFunctionEvent ( AnimationEditor , clearRot )
>3251	ArgumentList	AnimationEditor
>3252	Argument	clearRot
>3253	Identifier	clearRot
>3254	Argument	AnimationEditor
>3255	Identifier	AnimationEditor
>3256	Callee	MakeFunctionEvent
>3257	Identifier	MakeFunctionEvent
>3258	Callee	addAction
>3259	Identifier	addAction
>3260	ExpressionStatement	 
>3261	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , loadSkin ) , KEY_F5 , 0 )
>3262	ArgumentList	MakeFunctionEvent ( AnimationEditor , loadSkin )
>3263	Argument	0
>3264	PrimaryExpression	0
>3265	Argument	KEY_F5
>3266	Identifier	KEY_F5
>3267	Argument	MakeFunctionEvent ( AnimationEditor , loadSkin )
>3268	CallExpression	MakeFunctionEvent ( AnimationEditor , loadSkin )
>3269	ArgumentList	AnimationEditor
>3270	Argument	loadSkin
>3271	Identifier	loadSkin
>3272	Argument	AnimationEditor
>3273	Identifier	AnimationEditor
>3274	Callee	MakeFunctionEvent
>3275	Identifier	MakeFunctionEvent
>3276	Callee	addAction
>3277	Identifier	addAction
>3278	ExpressionStatement	 
>3279	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , load ) , KEY_F1 , 0 )
>3280	ArgumentList	MakeFunctionEvent ( AnimationEditor , load )
>3281	Argument	0
>3282	PrimaryExpression	0
>3283	Argument	KEY_F1
>3284	Identifier	KEY_F1
>3285	Argument	MakeFunctionEvent ( AnimationEditor , load )
>3286	CallExpression	MakeFunctionEvent ( AnimationEditor , load )
>3287	ArgumentList	AnimationEditor
>3288	Argument	load
>3289	Identifier	load
>3290	Argument	AnimationEditor
>3291	Identifier	AnimationEditor
>3292	Callee	MakeFunctionEvent
>3293	Identifier	MakeFunctionEvent
>3294	Callee	addAction
>3295	Identifier	addAction
>3296	ExpressionStatement	 
>3297	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , goToTitle ) , KEY_ESCAPE , 0 )
>3298	ArgumentList	MakeFunctionEvent ( AnimationEditor , goToTitle )
>3299	Argument	0
>3300	PrimaryExpression	0
>3301	Argument	KEY_ESCAPE
>3302	Identifier	KEY_ESCAPE
>3303	Argument	MakeFunctionEvent ( AnimationEditor , goToTitle )
>3304	CallExpression	MakeFunctionEvent ( AnimationEditor , goToTitle )
>3305	ArgumentList	AnimationEditor
>3306	Argument	goToTitle
>3307	Identifier	goToTitle
>3308	Argument	AnimationEditor
>3309	Identifier	AnimationEditor
>3310	Callee	MakeFunctionEvent
>3311	Identifier	MakeFunctionEvent
>3312	Callee	addAction
>3313	Identifier	addAction
>3314	ExpressionStatement	 
>3315	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , quit ) , KEY_F12 , 0 )
>3316	ArgumentList	MakeFunctionEvent ( AnimationEditor , quit )
>3317	Argument	0
>3318	PrimaryExpression	0
>3319	Argument	KEY_F12
>3320	Identifier	KEY_F12
>3321	Argument	MakeFunctionEvent ( AnimationEditor , quit )
>3322	CallExpression	MakeFunctionEvent ( AnimationEditor , quit )
>3323	ArgumentList	AnimationEditor
>3324	Argument	quit
>3325	Identifier	quit
>3326	Argument	AnimationEditor
>3327	Identifier	AnimationEditor
>3328	Callee	MakeFunctionEvent
>3329	Identifier	MakeFunctionEvent
>3330	Callee	addAction
>3331	Identifier	addAction
>3332	ExpressionStatement	 
>3333	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , resetScaleOrSave ) , KEY_S , 0 )
>3334	ArgumentList	MakeFunctionEvent ( AnimationEditor , resetScaleOrSave )
>3335	Argument	0
>3336	PrimaryExpression	0
>3337	Argument	KEY_S
>3338	Identifier	KEY_S
>3339	Argument	MakeFunctionEvent ( AnimationEditor , resetScaleOrSave )
>3340	CallExpression	MakeFunctionEvent ( AnimationEditor , resetScaleOrSave )
>3341	ArgumentList	AnimationEditor
>3342	Argument	resetScaleOrSave
>3343	Identifier	resetScaleOrSave
>3344	Argument	AnimationEditor
>3345	Identifier	AnimationEditor
>3346	Callee	MakeFunctionEvent
>3347	Identifier	MakeFunctionEvent
>3348	Callee	addAction
>3349	Identifier	addAction
>3350	ExpressionStatement	 
>3351	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , deleteKey ) , KEY_DELETE , 0 )
>3352	ArgumentList	MakeFunctionEvent ( AnimationEditor , deleteKey )
>3353	Argument	0
>3354	PrimaryExpression	0
>3355	Argument	KEY_DELETE
>3356	Identifier	KEY_DELETE
>3357	Argument	MakeFunctionEvent ( AnimationEditor , deleteKey )
>3358	CallExpression	MakeFunctionEvent ( AnimationEditor , deleteKey )
>3359	ArgumentList	AnimationEditor
>3360	Argument	deleteKey
>3361	Identifier	deleteKey
>3362	Argument	AnimationEditor
>3363	Identifier	AnimationEditor
>3364	Callee	MakeFunctionEvent
>3365	Identifier	MakeFunctionEvent
>3366	Callee	addAction
>3367	Identifier	addAction
>3368	ExpressionStatement	 
>3369	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , nextKey ) , KEY_RIGHT , 0 )
>3370	ArgumentList	MakeFunctionEvent ( AnimationEditor , nextKey )
>3371	Argument	0
>3372	PrimaryExpression	0
>3373	Argument	KEY_RIGHT
>3374	Identifier	KEY_RIGHT
>3375	Argument	MakeFunctionEvent ( AnimationEditor , nextKey )
>3376	CallExpression	MakeFunctionEvent ( AnimationEditor , nextKey )
>3377	ArgumentList	AnimationEditor
>3378	Argument	nextKey
>3379	Identifier	nextKey
>3380	Argument	AnimationEditor
>3381	Identifier	AnimationEditor
>3382	Callee	MakeFunctionEvent
>3383	Identifier	MakeFunctionEvent
>3384	Callee	addAction
>3385	Identifier	addAction
>3386	ExpressionStatement	 
>3387	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , prevKey ) , KEY_LEFT , 0 )
>3388	ArgumentList	MakeFunctionEvent ( AnimationEditor , prevKey )
>3389	Argument	0
>3390	PrimaryExpression	0
>3391	Argument	KEY_LEFT
>3392	Identifier	KEY_LEFT
>3393	Argument	MakeFunctionEvent ( AnimationEditor , prevKey )
>3394	CallExpression	MakeFunctionEvent ( AnimationEditor , prevKey )
>3395	ArgumentList	AnimationEditor
>3396	Argument	prevKey
>3397	Identifier	prevKey
>3398	Argument	AnimationEditor
>3399	Identifier	AnimationEditor
>3400	Callee	MakeFunctionEvent
>3401	Identifier	MakeFunctionEvent
>3402	Callee	addAction
>3403	Identifier	addAction
>3404	ExpressionStatement	 
>3405	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , cloneBoneAhead ) , KEY_SPACE , 0 )
>3406	ArgumentList	MakeFunctionEvent ( AnimationEditor , cloneBoneAhead )
>3407	Argument	0
>3408	PrimaryExpression	0
>3409	Argument	KEY_SPACE
>3410	Identifier	KEY_SPACE
>3411	Argument	MakeFunctionEvent ( AnimationEditor , cloneBoneAhead )
>3412	CallExpression	MakeFunctionEvent ( AnimationEditor , cloneBoneAhead )
>3413	ArgumentList	AnimationEditor
>3414	Argument	cloneBoneAhead
>3415	Identifier	cloneBoneAhead
>3416	Argument	AnimationEditor
>3417	Identifier	AnimationEditor
>3418	Callee	MakeFunctionEvent
>3419	Identifier	MakeFunctionEvent
>3420	Callee	addAction
>3421	Identifier	addAction
>3422	ExpressionStatement	 
>3423	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , mmbd ) , ActionMapper 
>3424	ArgumentList	MakeFunctionEvent ( AnimationEditor , mmbd )
>3425	Argument	1
>3426	PrimaryExpression	1
>3427	Argument	ActionMapper 
>3428	Identifier	ActionMapper 
>3429	Argument	MakeFunctionEvent ( AnimationEditor , mmbd )
>3430	CallExpression	MakeFunctionEvent ( AnimationEditor , mmbd )
>3431	ArgumentList	AnimationEditor
>3432	Argument	mmbd
>3433	Identifier	mmbd
>3434	Argument	AnimationEditor
>3435	Identifier	AnimationEditor
>3436	Callee	MakeFunctionEvent
>3437	Identifier	MakeFunctionEvent
>3438	Callee	addAction
>3439	Identifier	addAction
>3440	ExpressionStatement	 
>3441	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , rmbd ) , ActionMapper 
>3442	ArgumentList	MakeFunctionEvent ( AnimationEditor , rmbd )
>3443	Argument	1
>3444	PrimaryExpression	1
>3445	Argument	ActionMapper 
>3446	Identifier	ActionMapper 
>3447	Argument	MakeFunctionEvent ( AnimationEditor , rmbd )
>3448	CallExpression	MakeFunctionEvent ( AnimationEditor , rmbd )
>3449	ArgumentList	AnimationEditor
>3450	Argument	rmbd
>3451	Identifier	rmbd
>3452	Argument	AnimationEditor
>3453	Identifier	AnimationEditor
>3454	Callee	MakeFunctionEvent
>3455	Identifier	MakeFunctionEvent
>3456	Callee	addAction
>3457	Identifier	addAction
>3458	ExpressionStatement	 
>3459	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , rmbu ) , ActionMapper 
>3460	ArgumentList	MakeFunctionEvent ( AnimationEditor , rmbu )
>3461	Argument	0
>3462	PrimaryExpression	0
>3463	Argument	ActionMapper 
>3464	Identifier	ActionMapper 
>3465	Argument	MakeFunctionEvent ( AnimationEditor , rmbu )
>3466	CallExpression	MakeFunctionEvent ( AnimationEditor , rmbu )
>3467	ArgumentList	AnimationEditor
>3468	Argument	rmbu
>3469	Identifier	rmbu
>3470	Argument	AnimationEditor
>3471	Identifier	AnimationEditor
>3472	Callee	MakeFunctionEvent
>3473	Identifier	MakeFunctionEvent
>3474	Callee	addAction
>3475	Identifier	addAction
>3476	ExpressionStatement	 
>3477	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , lmbd ) , ActionMapper 
>3478	ArgumentList	MakeFunctionEvent ( AnimationEditor , lmbd )
>3479	Argument	1
>3480	PrimaryExpression	1
>3481	Argument	ActionMapper 
>3482	Identifier	ActionMapper 
>3483	Argument	MakeFunctionEvent ( AnimationEditor , lmbd )
>3484	CallExpression	MakeFunctionEvent ( AnimationEditor , lmbd )
>3485	ArgumentList	AnimationEditor
>3486	Argument	lmbd
>3487	Identifier	lmbd
>3488	Argument	AnimationEditor
>3489	Identifier	AnimationEditor
>3490	Callee	MakeFunctionEvent
>3491	Identifier	MakeFunctionEvent
>3492	Callee	addAction
>3493	Identifier	addAction
>3494	ExpressionStatement	 
>3495	CallExpression	addAction ( MakeFunctionEvent ( AnimationEditor , lmbu ) , ActionMapper 
>3496	ArgumentList	MakeFunctionEvent ( AnimationEditor , lmbu )
>3497	Argument	0
>3498	PrimaryExpression	0
>3499	Argument	ActionMapper 
>3500	Identifier	ActionMapper 
>3501	Argument	MakeFunctionEvent ( AnimationEditor , lmbu )
>3502	CallExpression	MakeFunctionEvent ( AnimationEditor , lmbu )
>3503	ArgumentList	AnimationEditor
>3504	Argument	lmbu
>3505	Identifier	lmbu
>3506	Argument	AnimationEditor
>3507	Identifier	AnimationEditor
>3508	Callee	MakeFunctionEvent
>3509	Identifier	MakeFunctionEvent
>3510	Callee	addAction
>3511	Identifier	addAction
>3512	ExpressionStatement	 
>3513	AssignmentExpr	editSprite -> position = Vector ( 400 , 300 )
>3514	CallExpression	Vector ( 400 , 300 )
>3515	ArgumentList	400
>3516	Argument	300
>3517	PrimaryExpression	300
>3518	Argument	400
>3519	PrimaryExpression	400
>3520	Callee	Vector
>3521	Identifier	Vector
>3522	PtrMemberAccess	editSprite -> position
>3523	Identifier	position
>3524	Identifier	editSprite
>3525	ExpressionStatement	 
>3526	CallExpression	editSprite -> loadSkeletal ( editingFile )
>3527	ArgumentList	editingFile
>3528	Argument	editingFile
>3529	Identifier	editingFile
>3530	Callee	editSprite -> loadSkeletal
>3531	PtrMemberAccess	editSprite -> loadSkeletal
>3532	Identifier	loadSkeletal
>3533	Identifier	editSprite
>3534	ExpressionStatement	 
>3535	AssignmentExpr	editSprite -> cull = false
>3536	Identifier	false
>3537	PtrMemberAccess	editSprite -> cull
>3538	Identifier	cull
>3539	Identifier	editSprite
>3540	ExpressionStatement	 
>3541	AssignmentExpr	editSprite = new SkeletalSprite ( )
>3542	UnaryExpression	new SkeletalSprite ( )
>3543	Identifier	editSprite
>3544	ExpressionStatement	 
>3545	AssignmentExpr	currentKey = 0
>3546	PrimaryExpression	0
>3547	Identifier	currentKey
>3548	ExpressionStatement	 
>3549	AssignmentExpr	editingBone = 0
>3550	PrimaryExpression	0
>3551	Identifier	editingBone
>3552	ExpressionStatement	 
>3553	AssignmentExpr	boneEdit = 0
>3554	PrimaryExpression	0
>3555	Identifier	boneEdit
>3556	ExpressionStatement	 
>3557	CallExpression	StateObject 
>3558	ArgumentList	 
>3559	Callee	StateObject 
>3560	Identifier	StateObject 
>3561	ExpressionStatement	 
>3562	AssignmentExpr	ae = this
>3563	Identifier	this
>3564	Identifier	ae
>3565	ExpressionStatement	 
>3566	AssignmentExpr	renderBorders = false
>3567	Identifier	false
>3568	Identifier	renderBorders
>3569	ExpressionStatement	 
>3570	AssignmentExpr	editingFile = \"Naija\"
>3571	PrimaryExpression	\"Naija\"
>3572	Identifier	editingFile
>3573	ExpressionStatement	 
>3574	AssignmentExpr	mouseSelection = true
>3575	Identifier	true
>3576	Identifier	mouseSelection
>3577	ExpressionStatement	 
>3578	AssignmentExpr	selectedStripPoint = 0
>3579	PrimaryExpression	0
>3580	Identifier	selectedStripPoint
>3581	ExpressionStatement	 
>3582	AssignmentExpr	editingStrip = false
>3583	Identifier	false
>3584	Identifier	editingStrip
>3585	ExpressionStatement	 
>3586	AssignmentExpr	core -> cameraPos = Vector ( 0 , 0 )
>3587	CallExpression	Vector ( 0 , 0 )
>3588	ArgumentList	0
>3589	Argument	0
>3590	PrimaryExpression	0
>3591	Argument	0
>3592	PrimaryExpression	0
>3593	Callee	Vector
>3594	Identifier	Vector
>3595	PtrMemberAccess	core -> cameraPos
>3596	Identifier	cameraPos
>3597	Identifier	core
>3598	ExpressionStatement	 
>3599	CallExpression	dsq -> toggleCursor ( true , 0.1 )
>3600	ArgumentList	true
>3601	Argument	0.1
>3602	PrimaryExpression	0.1
>3603	Argument	true
>3604	Identifier	true
>3605	Callee	dsq -> toggleCursor
>3606	PtrMemberAccess	dsq -> toggleCursor
>3607	Identifier	toggleCursor
>3608	Identifier	dsq
>3854	FunctionDef	AnimationEditor 
>3855	ParameterList	 
>3856	ReturnType	void
>3857	CompoundStatement	 
>3858	ExpressionStatement	 
>3859	CallExpression	undoHistory . clear ( )
>3860	ArgumentList	 
>3861	Callee	undoHistory . clear
>3862	MemberAccess	undoHistory . clear
>3863	Identifier	clear
>3864	Identifier	undoHistory
>3869	FunctionDef	AnimationEditor 
>3870	ParameterList	 
>3871	ReturnType	void
>3872	CompoundStatement	 
>3873	ExpressionStatement	 
>3874	AssignmentExpr	undoEntry = undoHistory . size ( ) - 1
>3875	AdditiveExpression	undoHistory . size ( ) - 1
>3876	PrimaryExpression	1
>3877	CallExpression	undoHistory . size ( )
>3878	ArgumentList	 
>3879	Callee	undoHistory . size
>3880	MemberAccess	undoHistory . size
>3881	Identifier	size
>3882	Identifier	undoHistory
>3883	Identifier	undoEntry
>3884	IfStatement	if ( undoHistory . size ( ) > 50 )
>3885	ExpressionStatement	 
>3886	CallExpression	undoHistory . pop_front ( )
>3887	ArgumentList	 
>3888	Callee	undoHistory . pop_front
>3889	MemberAccess	undoHistory . pop_front
>3890	Identifier	pop_front
>3891	Identifier	undoHistory
>3892	Condition	 
>3893	RelationalExpression	undoHistory . size ( ) > 50
>3894	PrimaryExpression	50
>3895	CallExpression	undoHistory . size ( )
>3896	ArgumentList	 
>3897	Callee	undoHistory . size
>3898	MemberAccess	undoHistory . size
>3899	Identifier	size
>3900	Identifier	undoHistory
>3901	ExpressionStatement	 
>3902	CallExpression	undoHistory . push_back ( sk )
>3903	ArgumentList	sk
>3904	Argument	sk
>3905	Identifier	sk
>3906	Callee	undoHistory . push_back
>3907	MemberAccess	undoHistory . push_back
>3908	Identifier	push_back
>3909	Identifier	undoHistory
>3910	ExpressionStatement	 
>3911	AssignmentExpr	sk . animations = editSprite -> animations
>3912	PtrMemberAccess	editSprite -> animations
>3913	Identifier	animations
>3914	Identifier	editSprite
>3915	MemberAccess	sk . animations
>3916	Identifier	animations
>3917	Identifier	sk
>3918	IdentifierDeclStatement	 
>3919	IdentifierDecl	sk
>3920	Identifier	sk
>3921	IdentifierDeclType	SkeletalSprite
>3933	FunctionDef	AnimationEditor 
>3934	ParameterList	 
>3935	ReturnType	void
>3936	CompoundStatement	 
>3937	IfStatement	if ( core -> getCtrlState ( ) )
>3938	CompoundStatement	 
>3939	IfStatement	if ( undoEntry >= 0 && undoEntry < undoHistory . size ( ) )
>3940	CompoundStatement	 
>3941	IfStatement	if ( undoEntry < 0 )
>3942	ExpressionStatement	 
>3943	AssignmentExpr	undoEntry = 0
>3944	PrimaryExpression	0
>3945	Identifier	undoEntry
>3946	Condition	 
>3947	RelationalExpression	undoEntry < 0
>3948	PrimaryExpression	0
>3949	Identifier	undoEntry
>3950	ExpressionStatement	 
>3951	IncDecOp	undoEntry --
>3952	IncDec	--
>3953	Identifier	undoEntry
>3954	ExpressionStatement	 
>3955	AssignmentExpr	editSprite -> animations = undoHistory [ undoEntry ] . animations
>3956	MemberAccess	undoHistory [ undoEntry ] . animations
>3957	Identifier	animations
>3958	ArrayIndexing	undoHistory [ undoEntry ]
>3959	Identifier	undoEntry
>3960	Identifier	undoHistory
>3961	PtrMemberAccess	editSprite -> animations
>3962	Identifier	animations
>3963	Identifier	editSprite
>3964	Condition	 
>3965	AndExpression	undoEntry >= 0 && undoEntry < undoHistory . size ( )
>3966	RelationalExpression	undoEntry < undoHistory . size ( )
>3967	CallExpression	undoHistory . size ( )
>3968	ArgumentList	 
>3969	Callee	undoHistory . size
>3970	MemberAccess	undoHistory . size
>3971	Identifier	size
>3972	Identifier	undoHistory
>3973	Identifier	undoEntry
>3974	RelationalExpression	undoEntry >= 0
>3975	PrimaryExpression	0
>3976	Identifier	undoEntry
>3977	Condition	 
>3978	CallExpression	core -> getCtrlState ( )
>3979	ArgumentList	 
>3980	Callee	core -> getCtrlState
>3981	PtrMemberAccess	core -> getCtrlState
>3982	Identifier	getCtrlState
>3983	Identifier	core
>3984	IfStatement	if ( dsq -> isNested ( ) )
>3985	ReturnStatement	 
>3986	Condition	 
>3987	CallExpression	dsq -> isNested ( )
>3988	ArgumentList	 
>3989	Callee	dsq -> isNested
>3990	PtrMemberAccess	dsq -> isNested
>3991	Identifier	isNested
>3992	Identifier	dsq
>4011	FunctionDef	AnimationEditor 
>4012	ParameterList	 
>4013	ReturnType	void
>4014	CompoundStatement	 
>4015	IfStatement	if ( core -> getCtrlState ( ) )
>4016	CompoundStatement	 
>4017	IfStatement	if ( undoEntry >= 0 && undoEntry < undoHistory . size ( ) )
>4018	ElseStatement	else
>4019	CompoundStatement	 
>4020	ExpressionStatement	 
>4021	IncDecOp	undoEntry --
>4022	IncDec	--
>4023	Identifier	undoEntry
>4024	CompoundStatement	 
>4025	ExpressionStatement	 
>4026	AssignmentExpr	editSprite -> animations = undoHistory [ undoEntry ] . animations
>4027	MemberAccess	undoHistory [ undoEntry ] . animations
>4028	Identifier	animations
>4029	ArrayIndexing	undoHistory [ undoEntry ]
>4030	Identifier	undoEntry
>4031	Identifier	undoHistory
>4032	PtrMemberAccess	editSprite -> animations
>4033	Identifier	animations
>4034	Identifier	editSprite
>4035	Condition	 
>4036	AndExpression	undoEntry >= 0 && undoEntry < undoHistory . size ( )
>4037	RelationalExpression	undoEntry < undoHistory . size ( )
>4038	CallExpression	undoHistory . size ( )
>4039	ArgumentList	 
>4040	Callee	undoHistory . size
>4041	MemberAccess	undoHistory . size
>4042	Identifier	size
>4043	Identifier	undoHistory
>4044	Identifier	undoEntry
>4045	RelationalExpression	undoEntry >= 0
>4046	PrimaryExpression	0
>4047	Identifier	undoEntry
>4048	ExpressionStatement	 
>4049	IncDecOp	undoEntry ++
>4050	IncDec	++
>4051	Identifier	undoEntry
>4052	Condition	 
>4053	CallExpression	core -> getCtrlState ( )
>4054	ArgumentList	 
>4055	Callee	core -> getCtrlState
>4056	PtrMemberAccess	core -> getCtrlState
>4057	Identifier	getCtrlState
>4058	Identifier	core
>4059	IfStatement	if ( dsq -> isNested ( ) )
>4060	ReturnStatement	 
>4061	Condition	 
>4062	CallExpression	dsq -> isNested ( )
>4063	ArgumentList	 
>4064	Callee	dsq -> isNested
>4065	PtrMemberAccess	dsq -> isNested
>4066	Identifier	isNested
>4067	Identifier	dsq
>4086	FunctionDef	AnimationEditor 
>4087	ParameterList	int id , int state
>4088	Parameter	 
>4089	Identifier	state
>4090	ParameterType	int
>4091	Parameter	 
>4092	Identifier	id
>4093	ParameterType	int
>4094	ReturnType	void
>4095	CompoundStatement	 
>4096	IfStatement	if ( editingBone && state )
>4097	CompoundStatement	 
>4098	IfStatement	if ( id == ACTION_BONEDOWN )
>4099	CompoundStatement	 
>4100	ExpressionStatement	 
>4101	CallExpression	applyTranslation ( )
>4102	ArgumentList	 
>4103	Callee	applyTranslation
>4104	Identifier	applyTranslation
>4105	ExpressionStatement	 
>4106	IncDecOp	editingBone -> position . y ++
>4107	IncDec	++
>4108	MemberAccess	editingBone -> position . y
>4109	Identifier	y
>4110	PtrMemberAccess	editingBone -> position
>4111	Identifier	position
>4112	Identifier	editingBone
>4113	Condition	 
>4114	EqualityExpression	id == ACTION_BONEDOWN
>4115	Identifier	ACTION_BONEDOWN
>4116	Identifier	id
>4117	IfStatement	if ( id == ACTION_BONEUP )
>4118	CompoundStatement	 
>4119	ExpressionStatement	 
>4120	CallExpression	applyTranslation ( )
>4121	ArgumentList	 
>4122	Callee	applyTranslation
>4123	Identifier	applyTranslation
>4124	ExpressionStatement	 
>4125	IncDecOp	editingBone -> position . y --
>4126	IncDec	--
>4127	MemberAccess	editingBone -> position . y
>4128	Identifier	y
>4129	PtrMemberAccess	editingBone -> position
>4130	Identifier	position
>4131	Identifier	editingBone
>4132	Condition	 
>4133	EqualityExpression	id == ACTION_BONEUP
>4134	Identifier	ACTION_BONEUP
>4135	Identifier	id
>4136	IfStatement	if ( id == ACTION_BONERIGHT )
>4137	CompoundStatement	 
>4138	ExpressionStatement	 
>4139	CallExpression	applyTranslation ( )
>4140	ArgumentList	 
>4141	Callee	applyTranslation
>4142	Identifier	applyTranslation
>4143	ExpressionStatement	 
>4144	IncDecOp	editingBone -> position . x ++
>4145	IncDec	++
>4146	MemberAccess	editingBone -> position . x
>4147	Identifier	x
>4148	PtrMemberAccess	editingBone -> position
>4149	Identifier	position
>4150	Identifier	editingBone
>4151	Condition	 
>4152	EqualityExpression	id == ACTION_BONERIGHT
>4153	Identifier	ACTION_BONERIGHT
>4154	Identifier	id
>4155	IfStatement	if ( id == ACTION_BONELEFT )
>4156	CompoundStatement	 
>4157	ExpressionStatement	 
>4158	CallExpression	applyTranslation ( )
>4159	ArgumentList	 
>4160	Callee	applyTranslation
>4161	Identifier	applyTranslation
>4162	ExpressionStatement	 
>4163	IncDecOp	editingBone -> position . x --
>4164	IncDec	--
>4165	MemberAccess	editingBone -> position . x
>4166	Identifier	x
>4167	PtrMemberAccess	editingBone -> position
>4168	Identifier	position
>4169	Identifier	editingBone
>4170	Condition	 
>4171	EqualityExpression	id == ACTION_BONELEFT
>4172	Identifier	ACTION_BONELEFT
>4173	Identifier	id
>4174	IfStatement	if ( dsq -> isNested ( ) )
>4175	ReturnStatement	 
>4176	Condition	 
>4177	CallExpression	dsq -> isNested ( )
>4178	ArgumentList	 
>4179	Callee	dsq -> isNested
>4180	PtrMemberAccess	dsq -> isNested
>4181	Identifier	isNested
>4182	Identifier	dsq
>4183	Condition	 
>4184	AndExpression	editingBone && state
>4185	Identifier	state
>4186	Identifier	editingBone
>4187	ExpressionStatement	 
>4188	CallExpression	StateObject 
>4189	ArgumentList	id
>4190	Argument	state
>4191	Identifier	state
>4192	Argument	id
>4193	Identifier	id
>4194	Callee	StateObject 
>4195	Identifier	StateObject 
>4215	FunctionDef	AnimationEditor 
>4216	ParameterList	 
>4217	ReturnType	void
>4218	CompoundStatement	 
>4219	ExpressionStatement	 
>4220	CallExpression	core -> globalScaleChanged ( )
>4221	ArgumentList	 
>4222	Callee	core -> globalScaleChanged
>4223	PtrMemberAccess	core -> globalScaleChanged
>4224	Identifier	globalScaleChanged
>4225	Identifier	core
>4226	ExpressionStatement	 
>4227	AssignmentExpr	core -> globalScale -= Vector ( ANIM_EDIT_ZOOM , ANIM_EDIT_ZOOM )
>4228	CallExpression	Vector ( ANIM_EDIT_ZOOM , ANIM_EDIT_ZOOM )
>4229	ArgumentList	ANIM_EDIT_ZOOM
>4230	Argument	ANIM_EDIT_ZOOM
>4231	Identifier	ANIM_EDIT_ZOOM
>4232	Argument	ANIM_EDIT_ZOOM
>4233	Identifier	ANIM_EDIT_ZOOM
>4234	Callee	Vector
>4235	Identifier	Vector
>4236	PtrMemberAccess	core -> globalScale
>4237	Identifier	globalScale
>4238	Identifier	core
>4239	IfStatement	if ( dsq -> isNested ( ) )
>4240	ReturnStatement	 
>4241	Condition	 
>4242	CallExpression	dsq -> isNested ( )
>4243	ArgumentList	 
>4244	Callee	dsq -> isNested
>4245	PtrMemberAccess	dsq -> isNested
>4246	Identifier	isNested
>4247	Identifier	dsq
>4259	FunctionDef	AnimationEditor 
>4260	ParameterList	 
>4261	ReturnType	void
>4262	CompoundStatement	 
>4263	ExpressionStatement	 
>4264	CallExpression	core -> globalScaleChanged ( )
>4265	ArgumentList	 
>4266	Callee	core -> globalScaleChanged
>4267	PtrMemberAccess	core -> globalScaleChanged
>4268	Identifier	globalScaleChanged
>4269	Identifier	core
>4270	ExpressionStatement	 
>4271	AssignmentExpr	core -> globalScale += Vector ( ANIM_EDIT_ZOOM , ANIM_EDIT_ZOOM )
>4272	CallExpression	Vector ( ANIM_EDIT_ZOOM , ANIM_EDIT_ZOOM )
>4273	ArgumentList	ANIM_EDIT_ZOOM
>4274	Argument	ANIM_EDIT_ZOOM
>4275	Identifier	ANIM_EDIT_ZOOM
>4276	Argument	ANIM_EDIT_ZOOM
>4277	Identifier	ANIM_EDIT_ZOOM
>4278	Callee	Vector
>4279	Identifier	Vector
>4280	PtrMemberAccess	core -> globalScale
>4281	Identifier	globalScale
>4282	Identifier	core
>4283	IfStatement	if ( dsq -> isNested ( ) )
>4284	ReturnStatement	 
>4285	Condition	 
>4286	CallExpression	dsq -> isNested ( )
>4287	ArgumentList	 
>4288	Callee	dsq -> isNested
>4289	PtrMemberAccess	dsq -> isNested
>4290	Identifier	isNested
>4291	Identifier	dsq
>4303	FunctionDef	AnimationEditor 
>4304	ParameterList	 
>4305	ReturnType	void
>4306	CompoundStatement	 
>4307	ExpressionStatement	 
>4308	CallExpression	rebuildKeyframeWidgets ( )
>4309	ArgumentList	 
>4310	Callee	rebuildKeyframeWidgets
>4311	Identifier	rebuildKeyframeWidgets
>4312	ExpressionStatement	 
>4313	CallExpression	editSprite -> getCurrentAnimation ( ) -> reorderKeyframes ( )
>4314	ArgumentList	 
>4315	Callee	editSprite -> getCurrentAnimation ( ) -> reorderKeyframes
>4316	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> reorderKeyframes
>4317	Identifier	reorderKeyframes
>4318	CallExpression	editSprite -> getCurrentAnimation ( )
>4319	ArgumentList	 
>4320	Callee	editSprite -> getCurrentAnimation
>4321	PtrMemberAccess	editSprite -> getCurrentAnimation
>4322	Identifier	getCurrentAnimation
>4323	Identifier	editSprite
>4330	FunctionDef	AnimationEditor 
>4331	ParameterList	 
>4332	ReturnType	void
>4333	CompoundStatement	 
>4334	ForStatement	for ( int i = 0 ; i < 1000 ; i ++ )
>4335	CompoundStatement	 
>4336	IfStatement	if ( editSprite -> getCurrentAnimation ( ) )
>4337	CompoundStatement	 
>4338	ExpressionStatement	 
>4339	CallExpression	keyframeWidgets . push_back ( k )
>4340	ArgumentList	k
>4341	Argument	k
>4342	Identifier	k
>4343	Callee	keyframeWidgets . push_back
>4344	MemberAccess	keyframeWidgets . push_back
>4345	Identifier	push_back
>4346	Identifier	keyframeWidgets
>4347	ExpressionStatement	 
>4348	CallExpression	addRenderObject ( k , LR_HUD )
>4349	ArgumentList	k
>4350	Argument	LR_HUD
>4351	Identifier	LR_HUD
>4352	Argument	k
>4353	Identifier	k
>4354	Callee	addRenderObject
>4355	Identifier	addRenderObject
>4356	ExpressionStatement	 
>4357	AssignmentExpr	k -> offset . x = offx
>4358	Identifier	offx
>4359	MemberAccess	k -> offset . x
>4360	Identifier	x
>4361	PtrMemberAccess	k -> offset
>4362	Identifier	offset
>4363	Identifier	k
>4364	IdentifierDeclStatement	 
>4365	IdentifierDecl	* k = new KeyframeWidget ( i )
>4366	AssignmentExpr	* k = new KeyframeWidget ( i )
>4367	Identifier	i
>4368	Identifier	i
>4369	Identifier	k
>4370	IdentifierDeclType	KeyframeWidget *
>4371	IfStatement	if ( ! key )
>4372	BreakStatement	 
>4373	Condition	 
>4374	UnaryOp	! key
>4375	Identifier	key
>4376	UnaryOperator	!
>4377	IdentifierDeclStatement	 
>4378	IdentifierDecl	* key = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i )
>4379	AssignmentExpr	* key = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i )
>4380	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i )
>4381	ArgumentList	i
>4382	Argument	i
>4383	Identifier	i
>4384	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>4385	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>4386	Identifier	getKeyframe
>4387	CallExpression	editSprite -> getCurrentAnimation ( )
>4388	ArgumentList	 
>4389	Callee	editSprite -> getCurrentAnimation
>4390	PtrMemberAccess	editSprite -> getCurrentAnimation
>4391	Identifier	getCurrentAnimation
>4392	Identifier	editSprite
>4393	Identifier	key
>4394	Identifier	key
>4395	IdentifierDeclType	SkeletalKeyframe *
>4396	Condition	 
>4397	CallExpression	editSprite -> getCurrentAnimation ( )
>4398	ArgumentList	 
>4399	Callee	editSprite -> getCurrentAnimation
>4400	PtrMemberAccess	editSprite -> getCurrentAnimation
>4401	Identifier	getCurrentAnimation
>4402	Identifier	editSprite
>4403	IncDecOp	 
>4404	IncDec	++
>4405	Identifier	i
>4406	Condition	 
>4407	RelationalExpression	i < 1000
>4408	PrimaryExpression	1000
>4409	Identifier	i
>4410	ForInit	 
>4411	IdentifierDeclStatement	int i = 0 ;
>4412	IdentifierDecl	i = 0
>4413	AssignmentExpr	i = 0
>4414	PrimaryExpression	0
>4415	Identifier	i
>4416	Identifier	i
>4417	IdentifierDeclType	int
>4418	ExpressionStatement	 
>4419	CallExpression	keyframeWidgets . clear ( )
>4420	ArgumentList	 
>4421	Callee	keyframeWidgets . clear
>4422	MemberAccess	keyframeWidgets . clear
>4423	Identifier	clear
>4424	Identifier	keyframeWidgets
>4425	ForStatement	for ( int i = 0 ; i < keyframeWidgets . size ( ) ; i ++ )
>4426	CompoundStatement	 
>4427	ExpressionStatement	 
>4428	AssignmentExpr	offx = keyframeWidgets [ i ] -> offset . x
>4429	MemberAccess	keyframeWidgets [ i ] -> offset . x
>4430	Identifier	x
>4431	PtrMemberAccess	keyframeWidgets [ i ] -> offset
>4432	Identifier	offset
>4433	ArrayIndexing	keyframeWidgets [ i ]
>4434	Identifier	i
>4435	Identifier	keyframeWidgets
>4436	Identifier	offx
>4437	ExpressionStatement	 
>4438	CallExpression	keyframeWidgets [ i ] -> setDecayRate ( 1 )
>4439	ArgumentList	1
>4440	Argument	1
>4441	PrimaryExpression	1
>4442	Callee	keyframeWidgets [ i ] -> setDecayRate
>4443	PtrMemberAccess	keyframeWidgets [ i ] -> setDecayRate
>4444	Identifier	setDecayRate
>4445	ArrayIndexing	keyframeWidgets [ i ]
>4446	Identifier	i
>4447	Identifier	keyframeWidgets
>4448	ExpressionStatement	 
>4449	CallExpression	keyframeWidgets [ i ] -> setLife ( 0.03 )
>4450	ArgumentList	0.03
>4451	Argument	0.03
>4452	PrimaryExpression	0.03
>4453	Callee	keyframeWidgets [ i ] -> setLife
>4454	PtrMemberAccess	keyframeWidgets [ i ] -> setLife
>4455	Identifier	setLife
>4456	ArrayIndexing	keyframeWidgets [ i ]
>4457	Identifier	i
>4458	Identifier	keyframeWidgets
>4459	IncDecOp	 
>4460	IncDec	++
>4461	Identifier	i
>4462	Condition	 
>4463	RelationalExpression	i < keyframeWidgets . size ( )
>4464	CallExpression	keyframeWidgets . size ( )
>4465	ArgumentList	 
>4466	Callee	keyframeWidgets . size
>4467	MemberAccess	keyframeWidgets . size
>4468	Identifier	size
>4469	Identifier	keyframeWidgets
>4470	Identifier	i
>4471	ForInit	 
>4472	IdentifierDeclStatement	int i = 0 ;
>4473	IdentifierDecl	i = 0
>4474	AssignmentExpr	i = 0
>4475	PrimaryExpression	0
>4476	Identifier	i
>4477	Identifier	i
>4478	IdentifierDeclType	int
>4479	IdentifierDeclStatement	 
>4480	IdentifierDecl	offx = 0
>4481	AssignmentExpr	offx = 0
>4482	PrimaryExpression	0
>4483	Identifier	offx
>4484	Identifier	offx
>4485	IdentifierDeclType	int
>4511	FunctionDef	AnimationEditor 
>4512	ParameterList	 
>4513	ReturnType	void
>4514	CompoundStatement	 
>4515	ExpressionStatement	 
>4516	AssignmentExpr	core -> cameraPos = Vector ( 0 , 0 )
>4517	CallExpression	Vector ( 0 , 0 )
>4518	ArgumentList	0
>4519	Argument	0
>4520	PrimaryExpression	0
>4521	Argument	0
>4522	PrimaryExpression	0
>4523	Callee	Vector
>4524	Identifier	Vector
>4525	PtrMemberAccess	core -> cameraPos
>4526	Identifier	cameraPos
>4527	Identifier	core
>4528	ExpressionStatement	 
>4529	CallExpression	StateObject 
>4530	ArgumentList	 
>4531	Callee	StateObject 
>4532	Identifier	StateObject 
>4533	ExpressionStatement	 
>4534	CallExpression	keyframeWidgets . clear ( )
>4535	ArgumentList	 
>4536	Callee	keyframeWidgets . clear
>4537	MemberAccess	keyframeWidgets . clear
>4538	Identifier	clear
>4539	Identifier	keyframeWidgets
>4548	FunctionDef	AnimationEditor 
>4549	ParameterList	 
>4550	ReturnType	void
>4551	CompoundStatement	 
>4552	ExpressionStatement	 
>4553	AssignmentExpr	mouseSelection = ! mouseSelection
>4554	UnaryOp	! mouseSelection
>4555	Identifier	mouseSelection
>4556	UnaryOperator	!
>4557	Identifier	mouseSelection
>4558	IfStatement	if ( editSprite && mouseSelection )
>4559	ExpressionStatement	 
>4560	CallExpression	editSprite -> updateSelectedBoneColor ( )
>4561	ArgumentList	 
>4562	Callee	editSprite -> updateSelectedBoneColor
>4563	PtrMemberAccess	editSprite -> updateSelectedBoneColor
>4564	Identifier	updateSelectedBoneColor
>4565	Identifier	editSprite
>4566	Condition	 
>4567	AndExpression	editSprite && mouseSelection
>4568	Identifier	mouseSelection
>4569	Identifier	editSprite
>4570	IfStatement	if ( dsq -> isNested ( ) )
>4571	ReturnStatement	 
>4572	Condition	 
>4573	CallExpression	dsq -> isNested ( )
>4574	ArgumentList	 
>4575	Callee	dsq -> isNested
>4576	PtrMemberAccess	dsq -> isNested
>4577	Identifier	isNested
>4578	Identifier	dsq
>4587	FunctionDef	AnimationEditor 
>4588	ParameterList	const Vector & mov
>4589	Parameter	 
>4590	Identifier	mov
>4591	ParameterType	const Vector &
>4592	ReturnType	void
>4593	CompoundStatement	 
>4594	IfStatement	if ( sel )
>4595	CompoundStatement	 
>4596	IfStatement	if ( b )
>4597	CompoundStatement	 
>4598	IfStatement	if ( ! sel -> changeStrip . empty ( ) )
>4599	CompoundStatement	 
>4600	ExpressionStatement	 
>4601	CallExpression	sel -> setGridPoints ( sel -> stripVert , sel -> strip )
>4602	ArgumentList	sel -> stripVert
>4603	Argument	sel -> strip
>4604	PtrMemberAccess	sel -> strip
>4605	Identifier	strip
>4606	Identifier	sel
>4607	Argument	sel -> stripVert
>4608	PtrMemberAccess	sel -> stripVert
>4609	Identifier	stripVert
>4610	Identifier	sel
>4611	Callee	sel -> setGridPoints
>4612	PtrMemberAccess	sel -> setGridPoints
>4613	Identifier	setGridPoints
>4614	Identifier	sel
>4615	ExpressionStatement	 
>4616	AssignmentExpr	b -> strip [ selectedStripPoint ] = sel -> changeStrip [ selectedStripPoint ] += mov * 0.006f
>4617	AssignmentExpr	sel -> changeStrip [ selectedStripPoint ] += mov * 0.006f
>4618	MultiplicativeExpression	mov * 0.006f
>4619	PrimaryExpression	0.006f
>4620	Identifier	mov
>4621	ArrayIndexing	sel -> changeStrip [ selectedStripPoint ]
>4622	Identifier	selectedStripPoint
>4623	PtrMemberAccess	sel -> changeStrip
>4624	Identifier	changeStrip
>4625	Identifier	sel
>4626	ArrayIndexing	b -> strip [ selectedStripPoint ]
>4627	Identifier	selectedStripPoint
>4628	PtrMemberAccess	b -> strip
>4629	Identifier	strip
>4630	Identifier	b
>4631	IfStatement	if ( b -> strip . size ( ) < sel -> changeStrip . size ( ) )
>4632	CompoundStatement	 
>4633	ExpressionStatement	 
>4634	CallExpression	b -> strip . resize ( sel -> changeStrip . size ( ) )
>4635	ArgumentList	sel -> changeStrip . size ( )
>4636	Argument	sel -> changeStrip . size ( )
>4637	CallExpression	sel -> changeStrip . size ( )
>4638	ArgumentList	 
>4639	Callee	sel -> changeStrip . size
>4640	MemberAccess	sel -> changeStrip . size
>4641	Identifier	size
>4642	PtrMemberAccess	sel -> changeStrip
>4643	Identifier	changeStrip
>4644	Identifier	sel
>4645	Callee	b -> strip . resize
>4646	MemberAccess	b -> strip . resize
>4647	Identifier	resize
>4648	PtrMemberAccess	b -> strip
>4649	Identifier	strip
>4650	Identifier	b
>4651	Condition	 
>4652	RelationalExpression	b -> strip . size ( ) < sel -> changeStrip . size ( )
>4653	CallExpression	sel -> changeStrip . size ( )
>4654	ArgumentList	 
>4655	Callee	sel -> changeStrip . size
>4656	MemberAccess	sel -> changeStrip . size
>4657	Identifier	size
>4658	PtrMemberAccess	sel -> changeStrip
>4659	Identifier	changeStrip
>4660	Identifier	sel
>4661	CallExpression	b -> strip . size ( )
>4662	ArgumentList	 
>4663	Callee	b -> strip . size
>4664	MemberAccess	b -> strip . size
>4665	Identifier	size
>4666	PtrMemberAccess	b -> strip
>4667	Identifier	strip
>4668	Identifier	b
>4669	Condition	 
>4670	UnaryOp	! sel -> changeStrip . empty ( )
>4671	CallExpression	sel -> changeStrip . empty ( )
>4672	ArgumentList	 
>4673	Callee	sel -> changeStrip . empty
>4674	MemberAccess	sel -> changeStrip . empty
>4675	Identifier	empty
>4676	PtrMemberAccess	sel -> changeStrip
>4677	Identifier	changeStrip
>4678	Identifier	sel
>4679	UnaryOperator	!
>4680	Condition	 
>4681	Identifier	b
>4682	IdentifierDeclStatement	 
>4683	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( sel -> boneIdx )
>4684	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( sel -> \
>4685	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( sel -> boneIdx )
>4686	ArgumentList	sel -> boneIdx
>4687	Argument	sel -> boneIdx
>4688	PtrMemberAccess	sel -> boneIdx
>4689	Identifier	boneIdx
>4690	Identifier	sel
>4691	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>4692	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>4693	Identifier	getBoneKeyframe
>4694	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>4695	ArgumentList	currentKey
>4696	Argument	currentKey
>4697	Identifier	currentKey
>4698	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>4699	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>4700	Identifier	getKeyframe
>4701	CallExpression	editSprite -> getCurrentAnimation ( )
>4702	ArgumentList	 
>4703	Callee	editSprite -> getCurrentAnimation
>4704	PtrMemberAccess	editSprite -> getCurrentAnimation
>4705	Identifier	getCurrentAnimation
>4706	Identifier	editSprite
>4707	Identifier	b
>4708	Identifier	b
>4709	IdentifierDeclType	BoneKeyframe *
>4710	Condition	 
>4711	Identifier	sel
>4712	IdentifierDeclStatement	 
>4713	IdentifierDecl	* sel = editSprite -> getSelectedBone ( false )
>4714	AssignmentExpr	* sel = editSprite -> getSelectedBone ( false )
>4715	CallExpression	editSprite -> getSelectedBone ( false )
>4716	ArgumentList	false
>4717	Argument	false
>4718	Identifier	false
>4719	Callee	editSprite -> getSelectedBone
>4720	PtrMemberAccess	editSprite -> getSelectedBone
>4721	Identifier	getSelectedBone
>4722	Identifier	editSprite
>4723	Identifier	sel
>4724	Identifier	sel
>4725	IdentifierDeclType	Bone *
>4726	IfStatement	if ( dsq -> isNested ( ) )
>4727	ReturnStatement	 
>4728	Condition	 
>4729	CallExpression	dsq -> isNested ( )
>4730	ArgumentList	 
>4731	Callee	dsq -> isNested
>4732	PtrMemberAccess	dsq -> isNested
>4733	Identifier	isNested
>4734	Identifier	dsq
>4773	FunctionDef	AnimationEditor 
>4774	ParameterList	 
>4775	ReturnType	void
>4776	CompoundStatement	 
>4777	IfStatement	if ( editingStrip )
>4778	ElseStatement	else
>4779	CompoundStatement	 
>4780	ExpressionStatement	 
>4781	CallExpression	editSprite -> selectPrevBone ( )
>4782	ArgumentList	 
>4783	Callee	editSprite -> selectPrevBone
>4784	PtrMemberAccess	editSprite -> selectPrevBone
>4785	Identifier	selectPrevBone
>4786	Identifier	editSprite
>4787	CompoundStatement	 
>4788	Condition	 
>4789	Identifier	editingStrip
>4790	IfStatement	if ( dsq -> isNested ( ) )
>4791	ReturnStatement	 
>4792	Condition	 
>4793	CallExpression	dsq -> isNested ( )
>4794	ArgumentList	 
>4795	Callee	dsq -> isNested
>4796	PtrMemberAccess	dsq -> isNested
>4797	Identifier	isNested
>4798	Identifier	dsq
>4807	FunctionDef	AnimationEditor 
>4808	ParameterList	 
>4809	ReturnType	void
>4810	CompoundStatement	 
>4811	IfStatement	if ( editingStrip )
>4812	ElseStatement	else
>4813	CompoundStatement	 
>4814	ExpressionStatement	 
>4815	CallExpression	editSprite -> selectNextBone ( )
>4816	ArgumentList	 
>4817	Callee	editSprite -> selectNextBone
>4818	PtrMemberAccess	editSprite -> selectNextBone
>4819	Identifier	selectNextBone
>4820	Identifier	editSprite
>4821	CompoundStatement	 
>4822	Condition	 
>4823	Identifier	editingStrip
>4824	IfStatement	if ( dsq -> isNested ( ) )
>4825	ReturnStatement	 
>4826	Condition	 
>4827	CallExpression	dsq -> isNested ( )
>4828	ArgumentList	 
>4829	Callee	dsq -> isNested
>4830	PtrMemberAccess	dsq -> isNested
>4831	Identifier	isNested
>4832	Identifier	dsq
>4841	FunctionDef	AnimationEditor 
>4842	ParameterList	float dt
>4843	Parameter	 
>4844	Identifier	dt
>4845	ParameterType	float
>4846	ReturnType	void
>4847	CompoundStatement	 
>4848	IfStatement	if ( boneEdit == 0 )
>4849	CompoundStatement	 
>4850	IfStatement	if ( ! editSprite -> isAnimating ( ) )
>4851	CompoundStatement	 
>4852	ExpressionStatement	 
>4853	CallExpression	editSprite -> updateBones ( )
>4854	ArgumentList	 
>4855	Callee	editSprite -> updateBones
>4856	PtrMemberAccess	editSprite -> updateBones
>4857	Identifier	updateBones
>4858	Identifier	editSprite
>4859	IfStatement	if ( k )
>4860	ExpressionStatement	 
>4861	CallExpression	editSprite -> setTime ( k -> t )
>4862	ArgumentList	k -> t
>4863	Argument	k -> t
>4864	PtrMemberAccess	k -> t
>4865	Identifier	t
>4866	Identifier	k
>4867	Callee	editSprite -> setTime
>4868	PtrMemberAccess	editSprite -> setTime
>4869	Identifier	setTime
>4870	Identifier	editSprite
>4871	Condition	 
>4872	Identifier	k
>4873	IdentifierDeclStatement	 
>4874	IdentifierDecl	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>4875	AssignmentExpr	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>4876	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>4877	ArgumentList	currentKey
>4878	Argument	currentKey
>4879	Identifier	currentKey
>4880	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>4881	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>4882	Identifier	getKeyframe
>4883	CallExpression	editSprite -> getCurrentAnimation ( )
>4884	ArgumentList	 
>4885	Callee	editSprite -> getCurrentAnimation
>4886	PtrMemberAccess	editSprite -> getCurrentAnimation
>4887	Identifier	getCurrentAnimation
>4888	Identifier	editSprite
>4889	Identifier	k
>4890	Identifier	k
>4891	IdentifierDeclType	SkeletalKeyframe *
>4892	Condition	 
>4893	UnaryOp	! editSprite -> isAnimating ( )
>4894	CallExpression	editSprite -> isAnimating ( )
>4895	ArgumentList	 
>4896	Callee	editSprite -> isAnimating
>4897	PtrMemberAccess	editSprite -> isAnimating
>4898	Identifier	isAnimating
>4899	Identifier	editSprite
>4900	UnaryOperator	!
>4901	Condition	 
>4902	EqualityExpression	boneEdit == 0
>4903	PrimaryExpression	0
>4904	Identifier	boneEdit
>4905	IfStatement	if ( editingBone && boneEdit == 2 )
>4906	CompoundStatement	 
>4907	ExpressionStatement	 
>4908	CallExpression	constrainMouse ( )
>4909	ArgumentList	 
>4910	Callee	constrainMouse
>4911	Identifier	constrainMouse
>4912	IfStatement	if ( editingBone -> getParent ( ) && editingBone -> getParent ( ) -> isfhr ( ) )
>4913	ElseStatement	else
>4914	ExpressionStatement	 
>4915	AssignmentExpr	editingBone -> rotation . z = rotOffset + ( core -> mouse . position . x - cursorOffset . x ) / 2
>4916	AdditiveExpression	rotOffset + ( core -> mouse . position . x - cursorOffset . x ) / 2
>4917	MultiplicativeExpression	( core -> mouse . position . x - cursorOffset . x ) / 2
>4918	PrimaryExpression	2
>4919	AdditiveExpression	core -> mouse . position . x - cursorOffset . x
>4920	MemberAccess	cursorOffset . x
>4921	Identifier	x
>4922	Identifier	cursorOffset
>4923	MemberAccess	core -> mouse . position . x
>4924	Identifier	x
>4925	MemberAccess	core -> mouse . position
>4926	Identifier	position
>4927	PtrMemberAccess	core -> mouse
>4928	Identifier	mouse
>4929	Identifier	core
>4930	Identifier	rotOffset
>4931	MemberAccess	editingBone -> rotation . z
>4932	Identifier	z
>4933	PtrMemberAccess	editingBone -> rotation
>4934	Identifier	rotation
>4935	Identifier	editingBone
>4936	ExpressionStatement	 
>4937	AssignmentExpr	editingBone -> rotation . z = rotOffset + ( cursorOffset . x - core -> mouse . position . x ) / 2
>4938	AdditiveExpression	rotOffset + ( cursorOffset . x - core -> mouse . position . x ) / 2
>4939	MultiplicativeExpression	( cursorOffset . x - core -> mouse . position . x ) / 2
>4940	PrimaryExpression	2
>4941	AdditiveExpression	cursorOffset . x - core -> mouse . position . x
>4942	MemberAccess	core -> mouse . position . x
>4943	Identifier	x
>4944	MemberAccess	core -> mouse . position
>4945	Identifier	position
>4946	PtrMemberAccess	core -> mouse
>4947	Identifier	mouse
>4948	Identifier	core
>4949	MemberAccess	cursorOffset . x
>4950	Identifier	x
>4951	Identifier	cursorOffset
>4952	Identifier	rotOffset
>4953	MemberAccess	editingBone -> rotation . z
>4954	Identifier	z
>4955	PtrMemberAccess	editingBone -> rotation
>4956	Identifier	rotation
>4957	Identifier	editingBone
>4958	Condition	 
>4959	AndExpression	editingBone -> getParent ( ) && editingBone -> getParent ( ) -> isfhr ( )
>4960	CallExpression	editingBone -> getParent ( ) -> isfhr ( )
>4961	ArgumentList	 
>4962	Callee	editingBone -> getParent ( ) -> isfhr
>4963	PtrMemberAccess	editingBone -> getParent ( ) -> isfhr
>4964	Identifier	isfhr
>4965	CallExpression	editingBone -> getParent ( )
>4966	ArgumentList	 
>4967	Callee	editingBone -> getParent
>4968	PtrMemberAccess	editingBone -> getParent
>4969	Identifier	getParent
>4970	Identifier	editingBone
>4971	CallExpression	editingBone -> getParent ( )
>4972	ArgumentList	 
>4973	Callee	editingBone -> getParent
>4974	PtrMemberAccess	editingBone -> getParent
>4975	Identifier	getParent
>4976	Identifier	editingBone
>4977	Condition	 
>4978	AndExpression	editingBone && boneEdit == 2
>4979	EqualityExpression	boneEdit == 2
>4980	PrimaryExpression	2
>4981	Identifier	boneEdit
>4982	Identifier	editingBone
>4983	IfStatement	if ( editingBone && boneEdit == 1 )
>4984	CompoundStatement	 
>4985	ExpressionStatement	 
>4986	CallExpression	constrainMouse ( )
>4987	ArgumentList	 
>4988	Callee	constrainMouse
>4989	Identifier	constrainMouse
>4990	ExpressionStatement	 
>4991	AssignmentExpr	editingBone -> position += add
>4992	Identifier	add
>4993	PtrMemberAccess	editingBone -> position
>4994	Identifier	position
>4995	Identifier	editingBone
>4996	IfStatement	if ( editingBone -> getParent ( ) )
>4997	CompoundStatement	 
>4998	IfStatement	if ( editingBone -> getParent ( ) -> isfhr ( ) )
>4999	ElseStatement	else
>5000	ExpressionStatement	 
>5001	CallExpression	add . rotate2D360 ( 360 - rot )
>5002	ArgumentList	360 - rot
>5003	Argument	360 - rot
>5004	AdditiveExpression	360 - rot
>5005	Identifier	rot
>5006	PrimaryExpression	360
>5007	Callee	add . rotate2D360
>5008	MemberAccess	add . rotate2D360
>5009	Identifier	rotate2D360
>5010	Identifier	add
>5011	CompoundStatement	 
>5012	ExpressionStatement	 
>5013	CallExpression	add . rotate2D360 ( rot )
>5014	ArgumentList	rot
>5015	Argument	rot
>5016	Identifier	rot
>5017	Callee	add . rotate2D360
>5018	MemberAccess	add . rotate2D360
>5019	Identifier	rotate2D360
>5020	Identifier	add
>5021	ExpressionStatement	 
>5022	AssignmentExpr	add . x = - add . x
>5023	UnaryOp	- add . x
>5024	MemberAccess	add . x
>5025	Identifier	x
>5026	Identifier	add
>5027	UnaryOperator	-
>5028	MemberAccess	add . x
>5029	Identifier	x
>5030	Identifier	add
>5031	Condition	 
>5032	CallExpression	editingBone -> getParent ( ) -> isfhr ( )
>5033	ArgumentList	 
>5034	Callee	editingBone -> getParent ( ) -> isfhr
>5035	PtrMemberAccess	editingBone -> getParent ( ) -> isfhr
>5036	Identifier	isfhr
>5037	CallExpression	editingBone -> getParent ( )
>5038	ArgumentList	 
>5039	Callee	editingBone -> getParent
>5040	PtrMemberAccess	editingBone -> getParent
>5041	Identifier	getParent
>5042	Identifier	editingBone
>5043	IdentifierDeclStatement	 
>5044	IdentifierDecl	rot = editingBone -> getParent ( ) -> getAbsoluteRotation ( ) . z
>5045	AssignmentExpr	rot = editingBone -> getParent ( ) -> getAbsoluteRotation ( ) . z
>5046	MemberAccess	editingBone -> getParent ( ) -> getAbsoluteRotation ( ) . z
>5047	Identifier	z
>5048	CallExpression	editingBone -> getParent ( ) -> getAbsoluteRotation ( )
>5049	ArgumentList	 
>5050	Callee	editingBone -> getParent ( ) -> getAbsoluteRotation
>5051	PtrMemberAccess	editingBone -> getParent ( ) -> getAbsoluteRotation
>5052	Identifier	getAbsoluteRotation
>5053	CallExpression	editingBone -> getParent ( )
>5054	ArgumentList	 
>5055	Callee	editingBone -> getParent
>5056	PtrMemberAccess	editingBone -> getParent
>5057	Identifier	getParent
>5058	Identifier	editingBone
>5059	Identifier	rot
>5060	Identifier	rot
>5061	IdentifierDeclType	float
>5062	Condition	 
>5063	CallExpression	editingBone -> getParent ( )
>5064	ArgumentList	 
>5065	Callee	editingBone -> getParent
>5066	PtrMemberAccess	editingBone -> getParent
>5067	Identifier	getParent
>5068	Identifier	editingBone
>5069	IdentifierDeclStatement	 
>5070	IdentifierDecl	add = core -> mouse . change
>5071	AssignmentExpr	add = core -> mouse . change
>5072	MemberAccess	core -> mouse . change
>5073	Identifier	change
>5074	PtrMemberAccess	core -> mouse
>5075	Identifier	mouse
>5076	Identifier	core
>5077	Identifier	add
>5078	Identifier	add
>5079	IdentifierDeclType	Vector
>5080	Condition	 
>5081	AndExpression	editingBone && boneEdit == 1
>5082	EqualityExpression	boneEdit == 1
>5083	PrimaryExpression	1
>5084	Identifier	boneEdit
>5085	Identifier	editingBone
>5086	IfStatement	if ( boneEdit == 0 )
>5087	CompoundStatement	 
>5088	IfStatement	if ( editingBone )
>5089	CompoundStatement	 
>5090	Condition	 
>5091	Identifier	editingBone
>5092	IfStatement	if ( editSprite )
>5093	ExpressionStatement	 
>5094	CallExpression	updateEditingBone ( )
>5095	ArgumentList	 
>5096	Callee	updateEditingBone
>5097	Identifier	updateEditingBone
>5098	Condition	 
>5099	Identifier	editSprite
>5100	Condition	 
>5101	EqualityExpression	boneEdit == 0
>5102	PrimaryExpression	0
>5103	Identifier	boneEdit
>5104	IfStatement	if ( editSprite -> scale . x < 0.05f )
>5105	CompoundStatement	 
>5106	ExpressionStatement	 
>5107	AssignmentExpr	editSprite -> scale = Vector ( 0.05f , 0.05f )
>5108	CallExpression	Vector ( 0.05f , 0.05f )
>5109	ArgumentList	0.05f
>5110	Argument	0.05f
>5111	PrimaryExpression	0.05f
>5112	Argument	0.05f
>5113	PrimaryExpression	0.05f
>5114	Callee	Vector
>5115	Identifier	Vector
>5116	PtrMemberAccess	editSprite -> scale
>5117	Identifier	scale
>5118	Identifier	editSprite
>5119	Condition	 
>5120	RelationalExpression	editSprite -> scale . x < 0.05f
>5121	PrimaryExpression	0.05f
>5122	MemberAccess	editSprite -> scale . x
>5123	Identifier	x
>5124	PtrMemberAccess	editSprite -> scale
>5125	Identifier	scale
>5126	Identifier	editSprite
>5127	IfStatement	if ( core -> getKeyState ( KEY_PGUP ) && core -> getShiftState ( ) )
>5128	CompoundStatement	 
>5129	ExpressionStatement	 
>5130	AssignmentExpr	editSprite -> scale += Vector ( spd * 0.05f , spd * 0.05f )
>5131	CallExpression	Vector ( spd * 0.05f , spd * 0.05f )
>5132	ArgumentList	spd * 0.05f
>5133	Argument	spd * 0.05f
>5134	MultiplicativeExpression	spd * 0.05f
>5135	PrimaryExpression	0.05f
>5136	Identifier	spd
>5137	Argument	spd * 0.05f
>5138	MultiplicativeExpression	spd * 0.05f
>5139	PrimaryExpression	0.05f
>5140	Identifier	spd
>5141	Callee	Vector
>5142	Identifier	Vector
>5143	PtrMemberAccess	editSprite -> scale
>5144	Identifier	scale
>5145	Identifier	editSprite
>5146	Condition	 
>5147	AndExpression	core -> getKeyState ( KEY_PGUP ) && core -> getShiftState ( )
>5148	CallExpression	core -> getShiftState ( )
>5149	ArgumentList	 
>5150	Callee	core -> getShiftState
>5151	PtrMemberAccess	core -> getShiftState
>5152	Identifier	getShiftState
>5153	Identifier	core
>5154	CallExpression	core -> getKeyState ( KEY_PGUP )
>5155	ArgumentList	KEY_PGUP
>5156	Argument	KEY_PGUP
>5157	Identifier	KEY_PGUP
>5158	Callee	core -> getKeyState
>5159	PtrMemberAccess	core -> getKeyState
>5160	Identifier	getKeyState
>5161	Identifier	core
>5162	IfStatement	if ( core -> getKeyState ( KEY_PGDN ) && core -> getShiftState ( ) )
>5163	CompoundStatement	 
>5164	ExpressionStatement	 
>5165	AssignmentExpr	editSprite -> scale -= Vector ( spd * 0.05f , spd * 0.05f )
>5166	CallExpression	Vector ( spd * 0.05f , spd * 0.05f )
>5167	ArgumentList	spd * 0.05f
>5168	Argument	spd * 0.05f
>5169	MultiplicativeExpression	spd * 0.05f
>5170	PrimaryExpression	0.05f
>5171	Identifier	spd
>5172	Argument	spd * 0.05f
>5173	MultiplicativeExpression	spd * 0.05f
>5174	PrimaryExpression	0.05f
>5175	Identifier	spd
>5176	Callee	Vector
>5177	Identifier	Vector
>5178	PtrMemberAccess	editSprite -> scale
>5179	Identifier	scale
>5180	Identifier	editSprite
>5181	Condition	 
>5182	AndExpression	core -> getKeyState ( KEY_PGDN ) && core -> getShiftState ( )
>5183	CallExpression	core -> getShiftState ( )
>5184	ArgumentList	 
>5185	Callee	core -> getShiftState
>5186	PtrMemberAccess	core -> getShiftState
>5187	Identifier	getShiftState
>5188	Identifier	core
>5189	CallExpression	core -> getKeyState ( KEY_PGDN )
>5190	ArgumentList	KEY_PGDN
>5191	Argument	KEY_PGDN
>5192	Identifier	KEY_PGDN
>5193	Callee	core -> getKeyState
>5194	PtrMemberAccess	core -> getKeyState
>5195	Identifier	getKeyState
>5196	Identifier	core
>5197	IfStatement	if ( core -> mouse . scrollWheelChange < 0 )
>5198	ElseStatement	else
>5199	IfStatement	if ( core -> mouse . scrollWheelChange > 0 )
>5200	CompoundStatement	 
>5201	ExpressionStatement	 
>5202	AssignmentExpr	editSprite -> scale += Vector ( spd * 0.05f , spd * 0.05f )
>5203	CallExpression	Vector ( spd * 0.05f , spd * 0.05f )
>5204	ArgumentList	spd * 0.05f
>5205	Argument	spd * 0.05f
>5206	MultiplicativeExpression	spd * 0.05f
>5207	PrimaryExpression	0.05f
>5208	Identifier	spd
>5209	Argument	spd * 0.05f
>5210	MultiplicativeExpression	spd * 0.05f
>5211	PrimaryExpression	0.05f
>5212	Identifier	spd
>5213	Callee	Vector
>5214	Identifier	Vector
>5215	PtrMemberAccess	editSprite -> scale
>5216	Identifier	scale
>5217	Identifier	editSprite
>5218	Condition	 
>5219	RelationalExpression	core -> mouse . scrollWheelChange > 0
>5220	PrimaryExpression	0
>5221	MemberAccess	core -> mouse . scrollWheelChange
>5222	Identifier	scrollWheelChange
>5223	PtrMemberAccess	core -> mouse
>5224	Identifier	mouse
>5225	Identifier	core
>5226	CompoundStatement	 
>5227	ExpressionStatement	 
>5228	AssignmentExpr	editSprite -> scale -= Vector ( spd * 0.05f , spd * 0.05f )
>5229	CallExpression	Vector ( spd * 0.05f , spd * 0.05f )
>5230	ArgumentList	spd * 0.05f
>5231	Argument	spd * 0.05f
>5232	MultiplicativeExpression	spd * 0.05f
>5233	PrimaryExpression	0.05f
>5234	Identifier	spd
>5235	Argument	spd * 0.05f
>5236	MultiplicativeExpression	spd * 0.05f
>5237	PrimaryExpression	0.05f
>5238	Identifier	spd
>5239	Callee	Vector
>5240	Identifier	Vector
>5241	PtrMemberAccess	editSprite -> scale
>5242	Identifier	scale
>5243	Identifier	editSprite
>5244	Condition	 
>5245	RelationalExpression	core -> mouse . scrollWheelChange < 0
>5246	PrimaryExpression	0
>5247	MemberAccess	core -> mouse . scrollWheelChange
>5248	Identifier	scrollWheelChange
>5249	PtrMemberAccess	core -> mouse
>5250	Identifier	mouse
>5251	Identifier	core
>5252	IdentifierDeclStatement	 
>5253	IdentifierDecl	spd = 1
>5254	AssignmentExpr	spd = 1
>5255	PrimaryExpression	1
>5256	Identifier	spd
>5257	Identifier	spd
>5258	IdentifierDeclType	int
>5259	IfStatement	if ( editingStrip )
>5260	CompoundStatement	 
>5261	IfStatement	if ( isActing ( ACTION_SWIMDOWN ) )
>5262	ExpressionStatement	 
>5263	CallExpression	moveBoneStripPoint ( Vector ( 0 , dt ) )
>5264	ArgumentList	Vector ( 0 , dt )
>5265	Argument	Vector ( 0 , dt )
>5266	CallExpression	Vector ( 0 , dt )
>5267	ArgumentList	0
>5268	Argument	dt
>5269	Identifier	dt
>5270	Argument	0
>5271	PrimaryExpression	0
>5272	Callee	Vector
>5273	Identifier	Vector
>5274	Callee	moveBoneStripPoint
>5275	Identifier	moveBoneStripPoint
>5276	Condition	 
>5277	CallExpression	isActing ( ACTION_SWIMDOWN )
>5278	ArgumentList	ACTION_SWIMDOWN
>5279	Argument	ACTION_SWIMDOWN
>5280	Identifier	ACTION_SWIMDOWN
>5281	Callee	isActing
>5282	Identifier	isActing
>5283	IfStatement	if ( isActing ( ACTION_SWIMUP ) )
>5284	ExpressionStatement	 
>5285	CallExpression	moveBoneStripPoint ( Vector ( 0 , - dt ) )
>5286	ArgumentList	Vector ( 0 , - dt )
>5287	Argument	Vector ( 0 , - dt )
>5288	CallExpression	Vector ( 0 , - dt )
>5289	ArgumentList	0
>5290	Argument	- dt
>5291	UnaryOp	- dt
>5292	Identifier	dt
>5293	UnaryOperator	-
>5294	Argument	0
>5295	PrimaryExpression	0
>5296	Callee	Vector
>5297	Identifier	Vector
>5298	Callee	moveBoneStripPoint
>5299	Identifier	moveBoneStripPoint
>5300	Condition	 
>5301	CallExpression	isActing ( ACTION_SWIMUP )
>5302	ArgumentList	ACTION_SWIMUP
>5303	Argument	ACTION_SWIMUP
>5304	Identifier	ACTION_SWIMUP
>5305	Callee	isActing
>5306	Identifier	isActing
>5307	IfStatement	if ( isActing ( ACTION_SWIMRIGHT ) )
>5308	ExpressionStatement	 
>5309	CallExpression	moveBoneStripPoint ( Vector ( dt , 0 ) )
>5310	ArgumentList	Vector ( dt , 0 )
>5311	Argument	Vector ( dt , 0 )
>5312	CallExpression	Vector ( dt , 0 )
>5313	ArgumentList	dt
>5314	Argument	0
>5315	PrimaryExpression	0
>5316	Argument	dt
>5317	Identifier	dt
>5318	Callee	Vector
>5319	Identifier	Vector
>5320	Callee	moveBoneStripPoint
>5321	Identifier	moveBoneStripPoint
>5322	Condition	 
>5323	CallExpression	isActing ( ACTION_SWIMRIGHT )
>5324	ArgumentList	ACTION_SWIMRIGHT
>5325	Argument	ACTION_SWIMRIGHT
>5326	Identifier	ACTION_SWIMRIGHT
>5327	Callee	isActing
>5328	Identifier	isActing
>5329	IfStatement	if ( isActing ( ACTION_SWIMLEFT ) )
>5330	ExpressionStatement	 
>5331	CallExpression	moveBoneStripPoint ( Vector ( - dt , 0 ) )
>5332	ArgumentList	Vector ( - dt , 0 )
>5333	Argument	Vector ( - dt , 0 )
>5334	CallExpression	Vector ( - dt , 0 )
>5335	ArgumentList	- dt
>5336	Argument	0
>5337	PrimaryExpression	0
>5338	Argument	- dt
>5339	UnaryOp	- dt
>5340	Identifier	dt
>5341	UnaryOperator	-
>5342	Callee	Vector
>5343	Identifier	Vector
>5344	Callee	moveBoneStripPoint
>5345	Identifier	moveBoneStripPoint
>5346	Condition	 
>5347	CallExpression	isActing ( ACTION_SWIMLEFT )
>5348	ArgumentList	ACTION_SWIMLEFT
>5349	Argument	ACTION_SWIMLEFT
>5350	Identifier	ACTION_SWIMLEFT
>5351	Callee	isActing
>5352	Identifier	isActing
>5353	Condition	 
>5354	Identifier	editingStrip
>5355	IfStatement	if ( core -> mouse . buttons . middle )
>5356	CompoundStatement	 
>5357	ExpressionStatement	 
>5358	AssignmentExpr	editSprite -> position += core -> mouse . change
>5359	MemberAccess	core -> mouse . change
>5360	Identifier	change
>5361	PtrMemberAccess	core -> mouse
>5362	Identifier	mouse
>5363	Identifier	core
>5364	PtrMemberAccess	editSprite -> position
>5365	Identifier	position
>5366	Identifier	editSprite
>5367	Condition	 
>5368	MemberAccess	core -> mouse . buttons . middle
>5369	Identifier	middle
>5370	MemberAccess	core -> mouse . buttons
>5371	Identifier	buttons
>5372	PtrMemberAccess	core -> mouse
>5373	Identifier	mouse
>5374	Identifier	core
>5375	ExpressionStatement	 
>5376	CallExpression	text2 -> setText ( t2buf )
>5377	ArgumentList	t2buf
>5378	Argument	t2buf
>5379	Identifier	t2buf
>5380	Callee	text2 -> setText
>5381	PtrMemberAccess	text2 -> setText
>5382	Identifier	setText
>5383	Identifier	text2
>5384	ExpressionStatement	 
>5385	CallExpression	sprintf ( t2buf , \"Bone x
>5386	ArgumentList	t2buf
>5387	Argument	selectedStripPoint
>5388	Identifier	selectedStripPoint
>5389	Argument	ebdata . z
>5390	MemberAccess	ebdata . z
>5391	Identifier	z
>5392	Identifier	ebdata
>5393	Argument	ebdata . y
>5394	MemberAccess	ebdata . y
>5395	Identifier	y
>5396	Identifier	ebdata
>5397	Argument	ebdata . x
>5398	MemberAccess	ebdata . x
>5399	Identifier	x
>5400	Identifier	ebdata
>5401	Argument	\"Bone x
>5402	PrimaryExpression	\"Bone x
>5403	Argument	t2buf
>5404	Identifier	t2buf
>5405	Callee	sprintf
>5406	Identifier	sprintf
>5407	IdentifierDeclStatement	 
>5408	IdentifierDecl	t2buf [ 128 ]
>5409	PrimaryExpression	128
>5410	Identifier	t2buf
>5411	IdentifierDeclType	char [ 128 ]
>5412	ExpressionStatement	 
>5413	CallExpression	text -> setText ( os . str ( ) )
>5414	ArgumentList	os . str ( )
>5415	Argument	os . str ( )
>5416	CallExpression	os . str ( )
>5417	ArgumentList	 
>5418	Callee	os . str
>5419	MemberAccess	os . str
>5420	Identifier	str
>5421	Identifier	os
>5422	Callee	text -> setText
>5423	PtrMemberAccess	text -> setText
>5424	Identifier	setText
>5425	Identifier	text
>5426	IfStatement	if ( editingBone )
>5427	CompoundStatement	 
>5428	ExpressionStatement	 
>5429	AssignmentExpr	ebdata . z = editingBone -> rotation . z
>5430	MemberAccess	editingBone -> rotation . z
>5431	Identifier	z
>5432	PtrMemberAccess	editingBone -> rotation
>5433	Identifier	rotation
>5434	Identifier	editingBone
>5435	MemberAccess	ebdata . z
>5436	Identifier	z
>5437	Identifier	ebdata
>5438	ExpressionStatement	 
>5439	AssignmentExpr	ebdata . y = editingBone -> position . y
>5440	MemberAccess	editingBone -> position . y
>5441	Identifier	y
>5442	PtrMemberAccess	editingBone -> position
>5443	Identifier	position
>5444	Identifier	editingBone
>5445	MemberAccess	ebdata . y
>5446	Identifier	y
>5447	Identifier	ebdata
>5448	ExpressionStatement	 
>5449	AssignmentExpr	ebdata . x = editingBone -> position . x
>5450	MemberAccess	editingBone -> position . x
>5451	Identifier	x
>5452	PtrMemberAccess	editingBone -> position
>5453	Identifier	position
>5454	Identifier	editingBone
>5455	MemberAccess	ebdata . x
>5456	Identifier	x
>5457	Identifier	ebdata
>5458	ExpressionStatement	 
>5459	ShiftExpression	os << \" bone
>5460	ShiftExpression	\" bone
>5461	ShiftExpression	editingBone -> name << \" [idx \" << editingBone -> boneIdx << \"]\"
>5462	ShiftExpression	\" [idx \" << editingBone -> boneIdx << \"]\"
>5463	ShiftExpression	editingBone -> boneIdx << \"]\"
>5464	PrimaryExpression	\"]\"
>5465	PtrMemberAccess	editingBone -> boneIdx
>5466	Identifier	boneIdx
>5467	Identifier	editingBone
>5468	PrimaryExpression	\" [idx \"
>5469	PtrMemberAccess	editingBone -> name
>5470	Identifier	name
>5471	Identifier	editingBone
>5472	PrimaryExpression	\" bone
>5473	Identifier	os
>5474	Condition	 
>5475	Identifier	editingBone
>5476	IdentifierDeclStatement	 
>5477	IdentifierDecl	ebdata
>5478	Identifier	ebdata
>5479	IdentifierDeclType	Vector
>5480	IfStatement	if ( k )
>5481	CompoundStatement	 
>5482	ExpressionStatement	 
>5483	ShiftExpression	os << \" keyTime
>5484	ShiftExpression	\" keyTime
>5485	PtrMemberAccess	k -> t
>5486	Identifier	t
>5487	Identifier	k
>5488	PrimaryExpression	\" keyTime
>5489	Identifier	os
>5490	Condition	 
>5491	Identifier	k
>5492	IdentifierDeclStatement	 
>5493	IdentifierDecl	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5494	AssignmentExpr	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5495	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5496	ArgumentList	currentKey
>5497	Argument	currentKey
>5498	Identifier	currentKey
>5499	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5500	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5501	Identifier	getKeyframe
>5502	CallExpression	editSprite -> getCurrentAnimation ( )
>5503	ArgumentList	 
>5504	Callee	editSprite -> getCurrentAnimation
>5505	PtrMemberAccess	editSprite -> getCurrentAnimation
>5506	Identifier	getCurrentAnimation
>5507	Identifier	editSprite
>5508	Identifier	k
>5509	Identifier	k
>5510	IdentifierDeclType	SkeletalKeyframe *
>5511	ExpressionStatement	 
>5512	ShiftExpression	os << \"currentKey \" << currentKey
>5513	ShiftExpression	\"currentKey \" << currentKey
>5514	Identifier	currentKey
>5515	PrimaryExpression	\"currentKey \"
>5516	Identifier	os
>5517	ExpressionStatement	 
>5518	ShiftExpression	os << \" anim[\" << editSprite -> getCurrentAnimation ( ) -> name << \"] \"
>5519	ShiftExpression	\" anim[\" << editSprite -> getCurrentAnimation ( ) -> name << \"] \"
>5520	ShiftExpression	editSprite -> getCurrentAnimation ( ) -> name << \"] \"
>5521	PrimaryExpression	\"] \"
>5522	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> name
>5523	Identifier	name
>5524	CallExpression	editSprite -> getCurrentAnimation ( )
>5525	ArgumentList	 
>5526	Callee	editSprite -> getCurrentAnimation
>5527	PtrMemberAccess	editSprite -> getCurrentAnimation
>5528	Identifier	getCurrentAnimation
>5529	Identifier	editSprite
>5530	PrimaryExpression	\" anim[\"
>5531	Identifier	os
>5532	ExpressionStatement	 
>5533	ShiftExpression	os << editingFile
>5534	Identifier	editingFile
>5535	Identifier	os
>5536	IdentifierDeclStatement	 
>5537	IdentifierDecl	os
>5538	Identifier	os
>5539	IdentifierDeclType	std 
>5540	ExpressionStatement	 
>5541	CallExpression	StateObject 
>5542	ArgumentList	dt
>5543	Argument	dt
>5544	Identifier	dt
>5545	Callee	StateObject 
>5546	Identifier	StateObject 
>5616	FunctionDef	AnimationEditor 
>5617	ParameterList	 
>5618	ReturnType	void
>5619	CompoundStatement	 
>5620	IfStatement	if ( core -> getCtrlState ( ) )
>5621	ExpressionStatement	 
>5622	AssignmentExpr	copyBuffer = * editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5623	UnaryOp	* editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5624	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5625	ArgumentList	currentKey
>5626	Argument	currentKey
>5627	Identifier	currentKey
>5628	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5629	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5630	Identifier	getKeyframe
>5631	CallExpression	editSprite -> getCurrentAnimation ( )
>5632	ArgumentList	 
>5633	Callee	editSprite -> getCurrentAnimation
>5634	PtrMemberAccess	editSprite -> getCurrentAnimation
>5635	Identifier	getCurrentAnimation
>5636	Identifier	editSprite
>5637	UnaryOperator	*
>5638	Identifier	copyBuffer
>5639	Condition	 
>5640	CallExpression	core -> getCtrlState ( )
>5641	ArgumentList	 
>5642	Callee	core -> getCtrlState
>5643	PtrMemberAccess	core -> getCtrlState
>5644	Identifier	getCtrlState
>5645	Identifier	core
>5646	IfStatement	if ( dsq -> isNested ( ) )
>5647	ReturnStatement	 
>5648	Condition	 
>5649	CallExpression	dsq -> isNested ( )
>5650	ArgumentList	 
>5651	Callee	dsq -> isNested
>5652	PtrMemberAccess	dsq -> isNested
>5653	Identifier	isNested
>5654	Identifier	dsq
>5676	FunctionDef	AnimationEditor 
>5677	ParameterList	 
>5678	ReturnType	void
>5679	CompoundStatement	 
>5680	IfStatement	if ( core -> getCtrlState ( ) )
>5681	CompoundStatement	 
>5682	ExpressionStatement	 
>5683	AssignmentExpr	k -> t = time
>5684	Identifier	time
>5685	PtrMemberAccess	k -> t
>5686	Identifier	t
>5687	Identifier	k
>5688	ExpressionStatement	 
>5689	AssignmentExpr	* k = copyBuffer
>5690	Identifier	copyBuffer
>5691	UnaryOp	* k
>5692	Identifier	k
>5693	UnaryOperator	*
>5694	IdentifierDeclStatement	 
>5695	IdentifierDecl	time = k -> t
>5696	AssignmentExpr	time = k -> t
>5697	PtrMemberAccess	k -> t
>5698	Identifier	t
>5699	Identifier	k
>5700	Identifier	time
>5701	Identifier	time
>5702	IdentifierDeclType	float
>5703	IdentifierDeclStatement	 
>5704	IdentifierDecl	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5705	AssignmentExpr	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5706	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5707	ArgumentList	currentKey
>5708	Argument	currentKey
>5709	Identifier	currentKey
>5710	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5711	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5712	Identifier	getKeyframe
>5713	CallExpression	editSprite -> getCurrentAnimation ( )
>5714	ArgumentList	 
>5715	Callee	editSprite -> getCurrentAnimation
>5716	PtrMemberAccess	editSprite -> getCurrentAnimation
>5717	Identifier	getCurrentAnimation
>5718	Identifier	editSprite
>5719	Identifier	k
>5720	Identifier	k
>5721	IdentifierDeclType	SkeletalKeyframe *
>5722	Condition	 
>5723	CallExpression	core -> getCtrlState ( )
>5724	ArgumentList	 
>5725	Callee	core -> getCtrlState
>5726	PtrMemberAccess	core -> getCtrlState
>5727	Identifier	getCtrlState
>5728	Identifier	core
>5729	IfStatement	if ( dsq -> isNested ( ) )
>5730	ReturnStatement	 
>5731	Condition	 
>5732	CallExpression	dsq -> isNested ( )
>5733	ArgumentList	 
>5734	Callee	dsq -> isNested
>5735	PtrMemberAccess	dsq -> isNested
>5736	Identifier	isNested
>5737	Identifier	dsq
>5759	FunctionDef	AnimationEditor 
>5760	ParameterList	 
>5761	ReturnType	void
>5762	CompoundStatement	 
>5763	IfStatement	if ( editingStrip )
>5764	ElseStatement	else
>5765	CompoundStatement	 
>5766	IfStatement	if ( core -> getCtrlState ( ) )
>5767	ElseStatement	else
>5768	CompoundStatement	 
>5769	IfStatement	if ( k )
>5770	ElseStatement	else
>5771	ExpressionStatement	 
>5772	IncDecOp	currentKey --
>5773	IncDec	--
>5774	Identifier	currentKey
>5775	ExpressionStatement	 
>5776	CallExpression	editSprite -> setTime ( k -> t )
>5777	ArgumentList	k -> t
>5778	Argument	k -> t
>5779	PtrMemberAccess	k -> t
>5780	Identifier	t
>5781	Identifier	k
>5782	Callee	editSprite -> setTime
>5783	PtrMemberAccess	editSprite -> setTime
>5784	Identifier	setTime
>5785	Identifier	editSprite
>5786	Condition	 
>5787	Identifier	k
>5788	IdentifierDeclStatement	 
>5789	IdentifierDecl	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5790	AssignmentExpr	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5791	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5792	ArgumentList	currentKey
>5793	Argument	currentKey
>5794	Identifier	currentKey
>5795	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5796	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5797	Identifier	getKeyframe
>5798	CallExpression	editSprite -> getCurrentAnimation ( )
>5799	ArgumentList	 
>5800	Callee	editSprite -> getCurrentAnimation
>5801	PtrMemberAccess	editSprite -> getCurrentAnimation
>5802	Identifier	getCurrentAnimation
>5803	Identifier	editSprite
>5804	Identifier	k
>5805	Identifier	k
>5806	IdentifierDeclType	SkeletalKeyframe *
>5807	ExpressionStatement	 
>5808	IncDecOp	currentKey ++
>5809	IncDec	++
>5810	Identifier	currentKey
>5811	CompoundStatement	 
>5812	ForStatement	for ( int i = 0 ; i < keyframeWidgets . size ( ) ; i ++ )
>5813	CompoundStatement	 
>5814	ExpressionStatement	 
>5815	CallExpression	keyframeWidgets [ i ] -> shiftLeft ( )
>5816	ArgumentList	 
>5817	Callee	keyframeWidgets [ i ] -> shiftLeft
>5818	PtrMemberAccess	keyframeWidgets [ i ] -> shiftLeft
>5819	Identifier	shiftLeft
>5820	ArrayIndexing	keyframeWidgets [ i ]
>5821	Identifier	i
>5822	Identifier	keyframeWidgets
>5823	IncDecOp	 
>5824	IncDec	++
>5825	Identifier	i
>5826	Condition	 
>5827	RelationalExpression	i < keyframeWidgets . size ( )
>5828	CallExpression	keyframeWidgets . size ( )
>5829	ArgumentList	 
>5830	Callee	keyframeWidgets . size
>5831	MemberAccess	keyframeWidgets . size
>5832	Identifier	size
>5833	Identifier	keyframeWidgets
>5834	Identifier	i
>5835	ForInit	 
>5836	IdentifierDeclStatement	int i = 0 ;
>5837	IdentifierDecl	i = 0
>5838	AssignmentExpr	i = 0
>5839	PrimaryExpression	0
>5840	Identifier	i
>5841	Identifier	i
>5842	IdentifierDeclType	int
>5843	Condition	 
>5844	CallExpression	core -> getCtrlState ( )
>5845	ArgumentList	 
>5846	Callee	core -> getCtrlState
>5847	PtrMemberAccess	core -> getCtrlState
>5848	Identifier	getCtrlState
>5849	Identifier	core
>5850	CompoundStatement	 
>5851	IfStatement	if ( selectedStripPoint >= editSprite -> getSelectedBone ( false ) -> changeStrip . size ( ) )
>5852	ExpressionStatement	 
>5853	IncDecOp	selectedStripPoint --
>5854	IncDec	--
>5855	Identifier	selectedStripPoint
>5856	Condition	 
>5857	RelationalExpression	selectedStripPoint >= editSprite -> getSelectedBone ( false ) -> changeStrip . size ( )
>5858	CallExpression	editSprite -> getSelectedBone ( false ) -> changeStrip . size ( )
>5859	ArgumentList	 
>5860	Callee	editSprite -> getSelectedBone ( false ) -> changeStrip . size
>5861	MemberAccess	editSprite -> getSelectedBone ( false ) -> changeStrip . size
>5862	Identifier	size
>5863	PtrMemberAccess	editSprite -> getSelectedBone ( false ) -> changeStrip
>5864	Identifier	changeStrip
>5865	CallExpression	editSprite -> getSelectedBone ( false )
>5866	ArgumentList	false
>5867	Argument	false
>5868	Identifier	false
>5869	Callee	editSprite -> getSelectedBone
>5870	PtrMemberAccess	editSprite -> getSelectedBone
>5871	Identifier	getSelectedBone
>5872	Identifier	editSprite
>5873	Identifier	selectedStripPoint
>5874	ExpressionStatement	 
>5875	IncDecOp	selectedStripPoint ++
>5876	IncDec	++
>5877	Identifier	selectedStripPoint
>5878	Condition	 
>5879	Identifier	editingStrip
>5880	IfStatement	if ( dsq -> isNested ( ) )
>5881	ReturnStatement	 
>5882	Condition	 
>5883	CallExpression	dsq -> isNested ( )
>5884	ArgumentList	 
>5885	Callee	dsq -> isNested
>5886	PtrMemberAccess	dsq -> isNested
>5887	Identifier	isNested
>5888	Identifier	dsq
>5920	FunctionDef	AnimationEditor 
>5921	ParameterList	 
>5922	ReturnType	void
>5923	CompoundStatement	 
>5924	IfStatement	if ( editingStrip )
>5925	ElseStatement	else
>5926	CompoundStatement	 
>5927	IfStatement	if ( core -> getCtrlState ( ) )
>5928	ElseStatement	else
>5929	CompoundStatement	 
>5930	IfStatement	if ( currentKey > 0 )
>5931	CompoundStatement	 
>5932	IfStatement	if ( k )
>5933	ExpressionStatement	 
>5934	CallExpression	editSprite -> setTime ( k -> t )
>5935	ArgumentList	k -> t
>5936	Argument	k -> t
>5937	PtrMemberAccess	k -> t
>5938	Identifier	t
>5939	Identifier	k
>5940	Callee	editSprite -> setTime
>5941	PtrMemberAccess	editSprite -> setTime
>5942	Identifier	setTime
>5943	Identifier	editSprite
>5944	Condition	 
>5945	Identifier	k
>5946	IdentifierDeclStatement	 
>5947	IdentifierDecl	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5948	AssignmentExpr	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5949	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>5950	ArgumentList	currentKey
>5951	Argument	currentKey
>5952	Identifier	currentKey
>5953	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5954	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>5955	Identifier	getKeyframe
>5956	CallExpression	editSprite -> getCurrentAnimation ( )
>5957	ArgumentList	 
>5958	Callee	editSprite -> getCurrentAnimation
>5959	PtrMemberAccess	editSprite -> getCurrentAnimation
>5960	Identifier	getCurrentAnimation
>5961	Identifier	editSprite
>5962	Identifier	k
>5963	Identifier	k
>5964	IdentifierDeclType	SkeletalKeyframe *
>5965	ExpressionStatement	 
>5966	IncDecOp	currentKey --
>5967	IncDec	--
>5968	Identifier	currentKey
>5969	Condition	 
>5970	RelationalExpression	currentKey > 0
>5971	PrimaryExpression	0
>5972	Identifier	currentKey
>5973	CompoundStatement	 
>5974	ForStatement	for ( int i = 0 ; i < keyframeWidgets . size ( ) ; i ++ )
>5975	CompoundStatement	 
>5976	ExpressionStatement	 
>5977	CallExpression	keyframeWidgets [ i ] -> shiftRight ( )
>5978	ArgumentList	 
>5979	Callee	keyframeWidgets [ i ] -> shiftRight
>5980	PtrMemberAccess	keyframeWidgets [ i ] -> shiftRight
>5981	Identifier	shiftRight
>5982	ArrayIndexing	keyframeWidgets [ i ]
>5983	Identifier	i
>5984	Identifier	keyframeWidgets
>5985	IncDecOp	 
>5986	IncDec	++
>5987	Identifier	i
>5988	Condition	 
>5989	RelationalExpression	i < keyframeWidgets . size ( )
>5990	CallExpression	keyframeWidgets . size ( )
>5991	ArgumentList	 
>5992	Callee	keyframeWidgets . size
>5993	MemberAccess	keyframeWidgets . size
>5994	Identifier	size
>5995	Identifier	keyframeWidgets
>5996	Identifier	i
>5997	ForInit	 
>5998	IdentifierDeclStatement	int i = 0 ;
>5999	IdentifierDecl	i = 0
>6000	AssignmentExpr	i = 0
>6001	PrimaryExpression	0
>6002	Identifier	i
>6003	Identifier	i
>6004	IdentifierDeclType	int
>6005	Condition	 
>6006	CallExpression	core -> getCtrlState ( )
>6007	ArgumentList	 
>6008	Callee	core -> getCtrlState
>6009	PtrMemberAccess	core -> getCtrlState
>6010	Identifier	getCtrlState
>6011	Identifier	core
>6012	CompoundStatement	 
>6013	IfStatement	if ( selectedStripPoint < 0 )
>6014	ExpressionStatement	 
>6015	AssignmentExpr	selectedStripPoint = 0
>6016	PrimaryExpression	0
>6017	Identifier	selectedStripPoint
>6018	Condition	 
>6019	RelationalExpression	selectedStripPoint < 0
>6020	PrimaryExpression	0
>6021	Identifier	selectedStripPoint
>6022	ExpressionStatement	 
>6023	IncDecOp	selectedStripPoint --
>6024	IncDec	--
>6025	Identifier	selectedStripPoint
>6026	Condition	 
>6027	Identifier	editingStrip
>6028	IfStatement	if ( dsq -> isNested ( ) )
>6029	ReturnStatement	 
>6030	Condition	 
>6031	CallExpression	dsq -> isNested ( )
>6032	ArgumentList	 
>6033	Callee	dsq -> isNested
>6034	PtrMemberAccess	dsq -> isNested
>6035	Identifier	isNested
>6036	Identifier	dsq
>6063	FunctionDef	AnimationEditor 
>6064	ParameterList	 
>6065	ReturnType	void
>6066	CompoundStatement	 
>6067	ExpressionStatement	 
>6068	AssignmentExpr	buffer = * k
>6069	UnaryOp	* k
>6070	Identifier	k
>6071	UnaryOperator	*
>6072	Identifier	buffer
>6073	IdentifierDeclStatement	 
>6074	IdentifierDecl	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6075	AssignmentExpr	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6076	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6077	ArgumentList	currentKey
>6078	Argument	currentKey
>6079	Identifier	currentKey
>6080	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6081	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6082	Identifier	getKeyframe
>6083	CallExpression	editSprite -> getCurrentAnimation ( )
>6084	ArgumentList	 
>6085	Callee	editSprite -> getCurrentAnimation
>6086	PtrMemberAccess	editSprite -> getCurrentAnimation
>6087	Identifier	getCurrentAnimation
>6088	Identifier	editSprite
>6089	Identifier	k
>6090	Identifier	k
>6091	IdentifierDeclType	SkeletalKeyframe *
>6105	FunctionDef	AnimationEditor 
>6106	ParameterList	 
>6107	ReturnType	void
>6108	CompoundStatement	 
>6109	IfStatement	if ( ! name . empty ( ) )
>6110	CompoundStatement	 
>6111	ExpressionStatement	 
>6112	CallExpression	editSprite -> lastAnimation ( )
>6113	ArgumentList	 
>6114	Callee	editSprite -> lastAnimation
>6115	PtrMemberAccess	editSprite -> lastAnimation
>6116	Identifier	lastAnimation
>6117	Identifier	editSprite
>6118	ExpressionStatement	 
>6119	CallExpression	editSprite -> animations . push_back ( anim )
>6120	ArgumentList	anim
>6121	Argument	anim
>6122	Identifier	anim
>6123	Callee	editSprite -> animations . push_back
>6124	MemberAccess	editSprite -> animations . push_back
>6125	Identifier	push_back
>6126	PtrMemberAccess	editSprite -> animations
>6127	Identifier	animations
>6128	Identifier	editSprite
>6129	ExpressionStatement	 
>6130	AssignmentExpr	anim . name = name
>6131	Identifier	name
>6132	MemberAccess	anim . name
>6133	Identifier	name
>6134	Identifier	anim
>6135	IdentifierDeclStatement	 
>6136	IdentifierDecl	anim = * editSprite -> getCurrentAnimation ( )
>6137	AssignmentExpr	anim = * editSprite -> getCurrentAnimation ( )
>6138	UnaryOp	* editSprite -> getCurrentAnimation ( )
>6139	CallExpression	editSprite -> getCurrentAnimation ( )
>6140	ArgumentList	 
>6141	Callee	editSprite -> getCurrentAnimation
>6142	PtrMemberAccess	editSprite -> getCurrentAnimation
>6143	Identifier	getCurrentAnimation
>6144	Identifier	editSprite
>6145	UnaryOperator	*
>6146	Identifier	anim
>6147	Identifier	anim
>6148	IdentifierDeclType	Animation
>6149	Condition	 
>6150	UnaryOp	! name . empty ( )
>6151	CallExpression	name . empty ( )
>6152	ArgumentList	 
>6153	Callee	name . empty
>6154	MemberAccess	name . empty
>6155	Identifier	empty
>6156	Identifier	name
>6157	UnaryOperator	!
>6158	IdentifierDeclStatement	 
>6159	IdentifierDecl	name = dsq -> getUserInputString ( \"NewAnimName\" , \"\" )
>6160	AssignmentExpr	name = dsq -> getUserInputString ( \"NewAnimName\" , \"\" )
>6161	CallExpression	dsq -> getUserInputString ( \"NewAnimName\" , \"\" )
>6162	ArgumentList	\"NewAnimName\"
>6163	Argument	\"\"
>6164	PrimaryExpression	\"\"
>6165	Argument	\"NewAnimName\"
>6166	PrimaryExpression	\"NewAnimName\"
>6167	Callee	dsq -> getUserInputString
>6168	PtrMemberAccess	dsq -> getUserInputString
>6169	Identifier	getUserInputString
>6170	Identifier	dsq
>6171	Identifier	name
>6172	Identifier	name
>6173	IdentifierDeclType	std 
>6174	IfStatement	if ( dsq -> isNested ( ) )
>6175	ReturnStatement	 
>6176	Condition	 
>6177	CallExpression	dsq -> isNested ( )
>6178	ArgumentList	 
>6179	Callee	dsq -> isNested
>6180	PtrMemberAccess	dsq -> isNested
>6181	Identifier	isNested
>6182	Identifier	dsq
>6201	FunctionDef	AnimationEditor 
>6202	ParameterList	 
>6203	ReturnType	void
>6204	CompoundStatement	 
>6205	ExpressionStatement	 
>6206	AssignmentExpr	( * k ) = buffer
>6207	Identifier	buffer
>6208	UnaryOp	* k
>6209	Identifier	k
>6210	UnaryOperator	*
>6211	IdentifierDeclStatement	 
>6212	IdentifierDecl	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6213	AssignmentExpr	* k = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6214	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6215	ArgumentList	currentKey
>6216	Argument	currentKey
>6217	Identifier	currentKey
>6218	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6219	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6220	Identifier	getKeyframe
>6221	CallExpression	editSprite -> getCurrentAnimation ( )
>6222	ArgumentList	 
>6223	Callee	editSprite -> getCurrentAnimation
>6224	PtrMemberAccess	editSprite -> getCurrentAnimation
>6225	Identifier	getCurrentAnimation
>6226	Identifier	editSprite
>6227	Identifier	k
>6228	Identifier	k
>6229	IdentifierDeclType	SkeletalKeyframe *
>6230	IfStatement	if ( dsq -> isNested ( ) )
>6231	ReturnStatement	 
>6232	Condition	 
>6233	CallExpression	dsq -> isNested ( )
>6234	ArgumentList	 
>6235	Callee	dsq -> isNested
>6236	PtrMemberAccess	dsq -> isNested
>6237	Identifier	isNested
>6238	Identifier	dsq
>6255	FunctionDef	AnimationEditor 
>6256	ParameterList	 
>6257	ReturnType	void
>6258	CompoundStatement	 
>6259	ExpressionStatement	 
>6260	CallExpression	rebuildKeyframeWidgets ( )
>6261	ArgumentList	 
>6262	Callee	rebuildKeyframeWidgets
>6263	Identifier	rebuildKeyframeWidgets
>6264	ExpressionStatement	 
>6265	IncDecOp	currentKey ++
>6266	IncDec	++
>6267	Identifier	currentKey
>6268	ExpressionStatement	 
>6269	CallExpression	editSprite -> getCurrentAnimation ( ) -> cloneKey ( currentKey , TIMELINE_UNIT )
>6270	ArgumentList	currentKey
>6271	Argument	TIMELINE_UNIT
>6272	Identifier	TIMELINE_UNIT
>6273	Argument	currentKey
>6274	Identifier	currentKey
>6275	Callee	editSprite -> getCurrentAnimation ( ) -> cloneKey
>6276	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> cloneKey
>6277	Identifier	cloneKey
>6278	CallExpression	editSprite -> getCurrentAnimation ( )
>6279	ArgumentList	 
>6280	Callee	editSprite -> getCurrentAnimation
>6281	PtrMemberAccess	editSprite -> getCurrentAnimation
>6282	Identifier	getCurrentAnimation
>6283	Identifier	editSprite
>6284	IfStatement	if ( dsq -> isNested ( ) )
>6285	ReturnStatement	 
>6286	Condition	 
>6287	CallExpression	dsq -> isNested ( )
>6288	ArgumentList	 
>6289	Callee	dsq -> isNested
>6290	PtrMemberAccess	dsq -> isNested
>6291	Identifier	isNested
>6292	Identifier	dsq
>6304	FunctionDef	AnimationEditor 
>6305	ParameterList	 
>6306	ReturnType	void
>6307	CompoundStatement	 
>6308	IfStatement	if ( editingStrip )
>6309	ElseStatement	else
>6310	CompoundStatement	 
>6311	ExpressionStatement	 
>6312	CallExpression	bgGrad -> makeVertical ( Vector ( 0.4 , 0.4 , 0.6 ) , Vector ( 0.8 , 0.8 , 1 ) )
>6313	ArgumentList	Vector ( 0.4 , 0.4 , 0.6 )
>6314	Argument	Vector ( 0.8 , 0.8 , 1 )
>6315	CallExpression	Vector ( 0.8 , 0.8 , 1 )
>6316	ArgumentList	0.8
>6317	Argument	1
>6318	PrimaryExpression	1
>6319	Argument	0.8
>6320	PrimaryExpression	0.8
>6321	Argument	0.8
>6322	PrimaryExpression	0.8
>6323	Callee	Vector
>6324	Identifier	Vector
>6325	Argument	Vector ( 0.4 , 0.4 , 0.6 )
>6326	CallExpression	Vector ( 0.4 , 0.4 , 0.6 )
>6327	ArgumentList	0.4
>6328	Argument	0.6
>6329	PrimaryExpression	0.6
>6330	Argument	0.4
>6331	PrimaryExpression	0.4
>6332	Argument	0.4
>6333	PrimaryExpression	0.4
>6334	Callee	Vector
>6335	Identifier	Vector
>6336	Callee	bgGrad -> makeVertical
>6337	PtrMemberAccess	bgGrad -> makeVertical
>6338	Identifier	makeVertical
>6339	Identifier	bgGrad
>6340	ExpressionStatement	 
>6341	AssignmentExpr	editingStrip = true
>6342	Identifier	true
>6343	Identifier	editingStrip
>6344	CompoundStatement	 
>6345	ExpressionStatement	 
>6346	CallExpression	bgGrad -> makeVertical ( Vector ( 0.4 , 0.4 , 0.4 ) , Vector ( 0.8 , 0.8 , 0.8 ) )
>6347	ArgumentList	Vector ( 0.4 , 0.4 , 0.4 )
>6348	Argument	Vector ( 0.8 , 0.8 , 0.8 )
>6349	CallExpression	Vector ( 0.8 , 0.8 , 0.8 )
>6350	ArgumentList	0.8
>6351	Argument	0.8
>6352	PrimaryExpression	0.8
>6353	Argument	0.8
>6354	PrimaryExpression	0.8
>6355	Argument	0.8
>6356	PrimaryExpression	0.8
>6357	Callee	Vector
>6358	Identifier	Vector
>6359	Argument	Vector ( 0.4 , 0.4 , 0.4 )
>6360	CallExpression	Vector ( 0.4 , 0.4 , 0.4 )
>6361	ArgumentList	0.4
>6362	Argument	0.4
>6363	PrimaryExpression	0.4
>6364	Argument	0.4
>6365	PrimaryExpression	0.4
>6366	Argument	0.4
>6367	PrimaryExpression	0.4
>6368	Callee	Vector
>6369	Identifier	Vector
>6370	Callee	bgGrad -> makeVertical
>6371	PtrMemberAccess	bgGrad -> makeVertical
>6372	Identifier	makeVertical
>6373	Identifier	bgGrad
>6374	ExpressionStatement	 
>6375	AssignmentExpr	editingStrip = false
>6376	Identifier	false
>6377	Identifier	editingStrip
>6378	ExpressionStatement	 
>6379	AssignmentExpr	selectedStripPoint = 0
>6380	PrimaryExpression	0
>6381	Identifier	selectedStripPoint
>6382	Condition	 
>6383	Identifier	editingStrip
>6384	IfStatement	if ( dsq -> isNested ( ) )
>6385	ReturnStatement	 
>6386	Condition	 
>6387	CallExpression	dsq -> isNested ( )
>6388	ArgumentList	 
>6389	Callee	dsq -> isNested
>6390	PtrMemberAccess	dsq -> isNested
>6391	Identifier	isNested
>6392	Identifier	dsq
>6405	FunctionDef	AnimationEditor 
>6406	ParameterList	 
>6407	ReturnType	void
>6408	CompoundStatement	 
>6409	ExpressionStatement	 
>6410	CallExpression	rebuildKeyframeWidgets ( )
>6411	ArgumentList	 
>6412	Callee	rebuildKeyframeWidgets
>6413	Identifier	rebuildKeyframeWidgets
>6414	IfStatement	if ( currentKey > 0 )
>6415	CompoundStatement	 
>6416	ExpressionStatement	 
>6417	IncDecOp	currentKey --
>6418	IncDec	--
>6419	Identifier	currentKey
>6420	ExpressionStatement	 
>6421	CallExpression	editSprite -> getCurrentAnimation ( ) -> deleteKey ( currentKey )
>6422	ArgumentList	currentKey
>6423	Argument	currentKey
>6424	Identifier	currentKey
>6425	Callee	editSprite -> getCurrentAnimation ( ) -> deleteKey
>6426	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> deleteKey
>6427	Identifier	deleteKey
>6428	CallExpression	editSprite -> getCurrentAnimation ( )
>6429	ArgumentList	 
>6430	Callee	editSprite -> getCurrentAnimation
>6431	PtrMemberAccess	editSprite -> getCurrentAnimation
>6432	Identifier	getCurrentAnimation
>6433	Identifier	editSprite
>6434	Condition	 
>6435	RelationalExpression	currentKey > 0
>6436	PrimaryExpression	0
>6437	Identifier	currentKey
>6438	IfStatement	if ( dsq -> isNested ( ) )
>6439	ReturnStatement	 
>6440	Condition	 
>6441	CallExpression	dsq -> isNested ( )
>6442	ArgumentList	 
>6443	Callee	dsq -> isNested
>6444	PtrMemberAccess	dsq -> isNested
>6445	Identifier	isNested
>6446	Identifier	dsq
>6457	FunctionDef	AnimationEditor 
>6458	ParameterList	 
>6459	ReturnType	void
>6460	CompoundStatement	 
>6461	ExpressionStatement	 
>6462	CallExpression	editSprite -> playCurrentAnimation ( - 1 )
>6463	ArgumentList	- 1
>6464	Argument	- 1
>6465	UnaryOp	- 1
>6466	PrimaryExpression	1
>6467	UnaryOperator	-
>6468	Callee	editSprite -> playCurrentAnimation
>6469	PtrMemberAccess	editSprite -> playCurrentAnimation
>6470	Identifier	playCurrentAnimation
>6471	Identifier	editSprite
>6472	IfStatement	if ( dsq -> isNested ( ) )
>6473	ReturnStatement	 
>6474	Condition	 
>6475	CallExpression	dsq -> isNested ( )
>6476	ArgumentList	 
>6477	Callee	dsq -> isNested
>6478	PtrMemberAccess	dsq -> isNested
>6479	Identifier	isNested
>6480	Identifier	dsq
>6488	FunctionDef	AnimationEditor 
>6489	ParameterList	 
>6490	ReturnType	void
>6491	CompoundStatement	 
>6492	ExpressionStatement	 
>6493	CallExpression	editSprite -> stopAnimation ( )
>6494	ArgumentList	 
>6495	Callee	editSprite -> stopAnimation
>6496	PtrMemberAccess	editSprite -> stopAnimation
>6497	Identifier	stopAnimation
>6498	Identifier	editSprite
>6499	IfStatement	if ( dsq -> isNested ( ) )
>6500	ReturnStatement	 
>6501	Condition	 
>6502	CallExpression	dsq -> isNested ( )
>6503	ArgumentList	 
>6504	Callee	dsq -> isNested
>6505	PtrMemberAccess	dsq -> isNested
>6506	Identifier	isNested
>6507	Identifier	dsq
>6515	FunctionDef	AnimationEditor 
>6516	ParameterList	 
>6517	ReturnType	void
>6518	CompoundStatement	 
>6519	IfStatement	if ( core -> getShiftState ( ) )
>6520	ElseStatement	else
>6521	ExpressionStatement	 
>6522	CallExpression	editSprite -> playCurrentAnimation ( - 1 )
>6523	ArgumentList	- 1
>6524	Argument	- 1
>6525	UnaryOp	- 1
>6526	PrimaryExpression	1
>6527	UnaryOperator	-
>6528	Callee	editSprite -> playCurrentAnimation
>6529	PtrMemberAccess	editSprite -> playCurrentAnimation
>6530	Identifier	playCurrentAnimation
>6531	Identifier	editSprite
>6532	ExpressionStatement	 
>6533	CallExpression	editSprite -> stopAnimation ( )
>6534	ArgumentList	 
>6535	Callee	editSprite -> stopAnimation
>6536	PtrMemberAccess	editSprite -> stopAnimation
>6537	Identifier	stopAnimation
>6538	Identifier	editSprite
>6539	Condition	 
>6540	CallExpression	core -> getShiftState ( )
>6541	ArgumentList	 
>6542	Callee	core -> getShiftState
>6543	PtrMemberAccess	core -> getShiftState
>6544	Identifier	getShiftState
>6545	Identifier	core
>6546	IfStatement	if ( dsq -> isNested ( ) )
>6547	ReturnStatement	 
>6548	Condition	 
>6549	CallExpression	dsq -> isNested ( )
>6550	ArgumentList	 
>6551	Callee	dsq -> isNested
>6552	PtrMemberAccess	dsq -> isNested
>6553	Identifier	isNested
>6554	Identifier	dsq
>6565	FunctionDef	AnimationEditor 
>6566	ParameterList	 
>6567	ReturnType	void
>6568	CompoundStatement	 
>6569	IfStatement	if ( editingBone && core -> mouse . position . x > 400 - 200 && core -> mouse . position . x < 400 + 200 && core \
>6570	CompoundStatement	 
>6571	ExpressionStatement	 
>6572	AssignmentExpr	boneEdit = 1
>6573	PrimaryExpression	1
>6574	Identifier	boneEdit
>6575	ExpressionStatement	 
>6576	AssignmentExpr	cursorOffset = editingBone -> position + editSprite -> position - core -> mouse . position
>6577	AdditiveExpression	editingBone -> position + editSprite -> position - core -> mouse . position
>6578	AdditiveExpression	editSprite -> position - core -> mouse . position
>6579	MemberAccess	core -> mouse . position
>6580	Identifier	position
>6581	PtrMemberAccess	core -> mouse
>6582	Identifier	mouse
>6583	Identifier	core
>6584	PtrMemberAccess	editSprite -> position
>6585	Identifier	position
>6586	Identifier	editSprite
>6587	PtrMemberAccess	editingBone -> position
>6588	Identifier	position
>6589	Identifier	editingBone
>6590	Identifier	cursorOffset
>6591	Condition	 
>6592	AndExpression	editingBone && core -> mouse . position . x > 400 - 200 && core -> mouse . position . x < 400 + 200 && \
>6593	AndExpression	core -> mouse . position . x > 400 - 200 && core -> mouse . position . x < 400 + 200 && core -> mouse \
>6594	AndExpression	core -> mouse . position . x < 400 + 200 && core -> mouse . position . y > 300 - 200 && core -> mouse \
>6595	AndExpression	core -> mouse . position . y > 300 - 200 && core -> mouse . position . y < 300 + 200
>6596	RelationalExpression	core -> mouse . position . y < 300 + 200
>6597	AdditiveExpression	300 + 200
>6598	PrimaryExpression	200
>6599	PrimaryExpression	300
>6600	MemberAccess	core -> mouse . position . y
>6601	Identifier	y
>6602	MemberAccess	core -> mouse . position
>6603	Identifier	position
>6604	PtrMemberAccess	core -> mouse
>6605	Identifier	mouse
>6606	Identifier	core
>6607	RelationalExpression	core -> mouse . position . y > 300 - 200
>6608	AdditiveExpression	300 - 200
>6609	PrimaryExpression	200
>6610	PrimaryExpression	300
>6611	MemberAccess	core -> mouse . position . y
>6612	Identifier	y
>6613	MemberAccess	core -> mouse . position
>6614	Identifier	position
>6615	PtrMemberAccess	core -> mouse
>6616	Identifier	mouse
>6617	Identifier	core
>6618	RelationalExpression	core -> mouse . position . x < 400 + 200
>6619	AdditiveExpression	400 + 200
>6620	PrimaryExpression	200
>6621	PrimaryExpression	400
>6622	MemberAccess	core -> mouse . position . x
>6623	Identifier	x
>6624	MemberAccess	core -> mouse . position
>6625	Identifier	position
>6626	PtrMemberAccess	core -> mouse
>6627	Identifier	mouse
>6628	Identifier	core
>6629	RelationalExpression	core -> mouse . position . x > 400 - 200
>6630	AdditiveExpression	400 - 200
>6631	PrimaryExpression	200
>6632	PrimaryExpression	400
>6633	MemberAccess	core -> mouse . position . x
>6634	Identifier	x
>6635	MemberAccess	core -> mouse . position
>6636	Identifier	position
>6637	PtrMemberAccess	core -> mouse
>6638	Identifier	mouse
>6639	Identifier	core
>6640	Identifier	editingBone
>6641	ExpressionStatement	 
>6642	CallExpression	updateEditingBone ( )
>6643	ArgumentList	 
>6644	Callee	updateEditingBone
>6645	Identifier	updateEditingBone
>6646	ExpressionStatement	 
>6647	CallExpression	pushUndo ( )
>6648	ArgumentList	 
>6649	Callee	pushUndo
>6650	Identifier	pushUndo
>6668	FunctionDef	AnimationEditor 
>6669	ParameterList	 
>6670	ReturnType	void
>6671	CompoundStatement	 
>6672	IfStatement	if ( editingBone )
>6673	CompoundStatement	 
>6674	IfStatement	if ( ! core -> getShiftState ( ) )
>6675	ElseStatement	else
>6676	CompoundStatement	 
>6677	IfStatement	if ( bcur )
>6678	CompoundStatement	 
>6679	IfStatement	if ( ! core -> getCtrlState ( ) )
>6680	ElseStatement	else
>6681	CompoundStatement	 
>6682	ForStatement	for ( int a = 0 ; a < editSprite -> animations . size ( ) ; ++ a )
>6683	CompoundStatement	 
>6684	ForStatement	for ( int i = 0 ; i < editSprite -> animations [ a ] . getNumKeyframes ( ) ; ++ i )
>6685	CompoundStatement	 
>6686	IfStatement	if ( b )
>6687	CompoundStatement	 
>6688	ExpressionStatement	 
>6689	AssignmentExpr	b -> y += ydiff
>6690	Identifier	ydiff
>6691	PtrMemberAccess	b -> y
>6692	Identifier	y
>6693	Identifier	b
>6694	ExpressionStatement	 
>6695	AssignmentExpr	b -> x += xdiff
>6696	Identifier	xdiff
>6697	PtrMemberAccess	b -> x
>6698	Identifier	x
>6699	Identifier	b
>6700	Condition	 
>6701	Identifier	b
>6702	IdentifierDeclStatement	 
>6703	IdentifierDecl	* b = editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6704	AssignmentExpr	* b = editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6705	CallExpression	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6706	ArgumentList	editingBone -> boneIdx
>6707	Argument	editingBone -> boneIdx
>6708	PtrMemberAccess	editingBone -> boneIdx
>6709	Identifier	boneIdx
>6710	Identifier	editingBone
>6711	Callee	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe
>6712	PtrMemberAccess	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe
>6713	Identifier	getBoneKeyframe
>6714	CallExpression	editSprite -> animations [ a ] . getKeyframe ( i )
>6715	ArgumentList	i
>6716	Argument	i
>6717	Identifier	i
>6718	Callee	editSprite -> animations [ a ] . getKeyframe
>6719	MemberAccess	editSprite -> animations [ a ] . getKeyframe
>6720	Identifier	getKeyframe
>6721	ArrayIndexing	editSprite -> animations [ a ]
>6722	Identifier	a
>6723	PtrMemberAccess	editSprite -> animations
>6724	Identifier	animations
>6725	Identifier	editSprite
>6726	Identifier	b
>6727	Identifier	b
>6728	IdentifierDeclType	BoneKeyframe *
>6729	UnaryExpression	 
>6730	Identifier	i
>6731	IncDec	++
>6732	Condition	 
>6733	RelationalExpression	i < editSprite -> animations [ a ] . getNumKeyframes ( )
>6734	CallExpression	editSprite -> animations [ a ] . getNumKeyframes ( )
>6735	ArgumentList	 
>6736	Callee	editSprite -> animations [ a ] . getNumKeyframes
>6737	MemberAccess	editSprite -> animations [ a ] . getNumKeyframes
>6738	Identifier	getNumKeyframes
>6739	ArrayIndexing	editSprite -> animations [ a ]
>6740	Identifier	a
>6741	PtrMemberAccess	editSprite -> animations
>6742	Identifier	animations
>6743	Identifier	editSprite
>6744	Identifier	i
>6745	ForInit	 
>6746	IdentifierDeclStatement	int i = 0 ;
>6747	IdentifierDecl	i = 0
>6748	AssignmentExpr	i = 0
>6749	PrimaryExpression	0
>6750	Identifier	i
>6751	Identifier	i
>6752	IdentifierDeclType	int
>6753	UnaryExpression	 
>6754	Identifier	a
>6755	IncDec	++
>6756	Condition	 
>6757	RelationalExpression	a < editSprite -> animations . size ( )
>6758	CallExpression	editSprite -> animations . size ( )
>6759	ArgumentList	 
>6760	Callee	editSprite -> animations . size
>6761	MemberAccess	editSprite -> animations . size
>6762	Identifier	size
>6763	PtrMemberAccess	editSprite -> animations
>6764	Identifier	animations
>6765	Identifier	editSprite
>6766	Identifier	a
>6767	ForInit	 
>6768	IdentifierDeclStatement	int a = 0 ;
>6769	IdentifierDecl	a = 0
>6770	AssignmentExpr	a = 0
>6771	PrimaryExpression	0
>6772	Identifier	a
>6773	Identifier	a
>6774	IdentifierDeclType	int
>6775	CompoundStatement	 
>6776	ForStatement	for ( int i = 0 ; i < editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( ) ; ++ i )
>6777	CompoundStatement	 
>6778	IfStatement	if ( b )
>6779	CompoundStatement	 
>6780	ExpressionStatement	 
>6781	AssignmentExpr	b -> y += ydiff
>6782	Identifier	ydiff
>6783	PtrMemberAccess	b -> y
>6784	Identifier	y
>6785	Identifier	b
>6786	ExpressionStatement	 
>6787	AssignmentExpr	b -> x += xdiff
>6788	Identifier	xdiff
>6789	PtrMemberAccess	b -> x
>6790	Identifier	x
>6791	Identifier	b
>6792	Condition	 
>6793	Identifier	b
>6794	IdentifierDeclStatement	 
>6795	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6796	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> \
>6797	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6798	ArgumentList	editingBone -> boneIdx
>6799	Argument	editingBone -> boneIdx
>6800	PtrMemberAccess	editingBone -> boneIdx
>6801	Identifier	boneIdx
>6802	Identifier	editingBone
>6803	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe
>6804	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe
>6805	Identifier	getBoneKeyframe
>6806	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i )
>6807	ArgumentList	i
>6808	Argument	i
>6809	Identifier	i
>6810	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6811	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6812	Identifier	getKeyframe
>6813	CallExpression	editSprite -> getCurrentAnimation ( )
>6814	ArgumentList	 
>6815	Callee	editSprite -> getCurrentAnimation
>6816	PtrMemberAccess	editSprite -> getCurrentAnimation
>6817	Identifier	getCurrentAnimation
>6818	Identifier	editSprite
>6819	Identifier	b
>6820	Identifier	b
>6821	IdentifierDeclType	BoneKeyframe *
>6822	UnaryExpression	 
>6823	Identifier	i
>6824	IncDec	++
>6825	Condition	 
>6826	RelationalExpression	i < editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( )
>6827	CallExpression	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( )
>6828	ArgumentList	 
>6829	Callee	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes
>6830	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes
>6831	Identifier	getNumKeyframes
>6832	CallExpression	editSprite -> getCurrentAnimation ( )
>6833	ArgumentList	 
>6834	Callee	editSprite -> getCurrentAnimation
>6835	PtrMemberAccess	editSprite -> getCurrentAnimation
>6836	Identifier	getCurrentAnimation
>6837	Identifier	editSprite
>6838	Identifier	i
>6839	ForInit	 
>6840	IdentifierDeclStatement	int i = 0 ;
>6841	IdentifierDecl	i = 0
>6842	AssignmentExpr	i = 0
>6843	PrimaryExpression	0
>6844	Identifier	i
>6845	Identifier	i
>6846	IdentifierDeclType	int
>6847	Condition	 
>6848	UnaryOp	! core -> getCtrlState ( )
>6849	CallExpression	core -> getCtrlState ( )
>6850	ArgumentList	 
>6851	Callee	core -> getCtrlState
>6852	PtrMemberAccess	core -> getCtrlState
>6853	Identifier	getCtrlState
>6854	Identifier	core
>6855	UnaryOperator	!
>6856	IdentifierDeclStatement	 
>6857	IdentifierDecl	ydiff = editingBone -> position . y - bcur -> y
>6858	AssignmentExpr	ydiff = editingBone -> position . y - bcur -> y
>6859	AdditiveExpression	editingBone -> position . y - bcur -> y
>6860	PtrMemberAccess	bcur -> y
>6861	Identifier	y
>6862	Identifier	bcur
>6863	MemberAccess	editingBone -> position . y
>6864	Identifier	y
>6865	PtrMemberAccess	editingBone -> position
>6866	Identifier	position
>6867	Identifier	editingBone
>6868	Identifier	ydiff
>6869	Identifier	ydiff
>6870	IdentifierDeclType	int
>6871	IdentifierDeclStatement	 
>6872	IdentifierDecl	xdiff = editingBone -> position . x - bcur -> x
>6873	AssignmentExpr	xdiff = editingBone -> position . x - bcur -> x
>6874	AdditiveExpression	editingBone -> position . x - bcur -> x
>6875	PtrMemberAccess	bcur -> x
>6876	Identifier	x
>6877	Identifier	bcur
>6878	MemberAccess	editingBone -> position . x
>6879	Identifier	x
>6880	PtrMemberAccess	editingBone -> position
>6881	Identifier	position
>6882	Identifier	editingBone
>6883	Identifier	xdiff
>6884	Identifier	xdiff
>6885	IdentifierDeclType	int
>6886	Condition	 
>6887	Identifier	bcur
>6888	IdentifierDeclStatement	 
>6889	IdentifierDecl	* bcur = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> \
>6890	AssignmentExpr	* bcur = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>6891	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6892	ArgumentList	editingBone -> boneIdx
>6893	Argument	editingBone -> boneIdx
>6894	PtrMemberAccess	editingBone -> boneIdx
>6895	Identifier	boneIdx
>6896	Identifier	editingBone
>6897	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>6898	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>6899	Identifier	getBoneKeyframe
>6900	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6901	ArgumentList	currentKey
>6902	Argument	currentKey
>6903	Identifier	currentKey
>6904	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6905	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6906	Identifier	getKeyframe
>6907	CallExpression	editSprite -> getCurrentAnimation ( )
>6908	ArgumentList	 
>6909	Callee	editSprite -> getCurrentAnimation
>6910	PtrMemberAccess	editSprite -> getCurrentAnimation
>6911	Identifier	getCurrentAnimation
>6912	Identifier	editSprite
>6913	Identifier	bcur
>6914	Identifier	bcur
>6915	IdentifierDeclType	BoneKeyframe *
>6916	CompoundStatement	 
>6917	IfStatement	if ( b )
>6918	CompoundStatement	 
>6919	ExpressionStatement	 
>6920	AssignmentExpr	b -> y = editingBone -> position . y
>6921	MemberAccess	editingBone -> position . y
>6922	Identifier	y
>6923	PtrMemberAccess	editingBone -> position
>6924	Identifier	position
>6925	Identifier	editingBone
>6926	PtrMemberAccess	b -> y
>6927	Identifier	y
>6928	Identifier	b
>6929	ExpressionStatement	 
>6930	AssignmentExpr	b -> x = editingBone -> position . x
>6931	MemberAccess	editingBone -> position . x
>6932	Identifier	x
>6933	PtrMemberAccess	editingBone -> position
>6934	Identifier	position
>6935	Identifier	editingBone
>6936	PtrMemberAccess	b -> x
>6937	Identifier	x
>6938	Identifier	b
>6939	Condition	 
>6940	Identifier	b
>6941	IdentifierDeclStatement	 
>6942	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6943	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>6944	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>6945	ArgumentList	editingBone -> boneIdx
>6946	Argument	editingBone -> boneIdx
>6947	PtrMemberAccess	editingBone -> boneIdx
>6948	Identifier	boneIdx
>6949	Identifier	editingBone
>6950	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>6951	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>6952	Identifier	getBoneKeyframe
>6953	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>6954	ArgumentList	currentKey
>6955	Argument	currentKey
>6956	Identifier	currentKey
>6957	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6958	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>6959	Identifier	getKeyframe
>6960	CallExpression	editSprite -> getCurrentAnimation ( )
>6961	ArgumentList	 
>6962	Callee	editSprite -> getCurrentAnimation
>6963	PtrMemberAccess	editSprite -> getCurrentAnimation
>6964	Identifier	getCurrentAnimation
>6965	Identifier	editSprite
>6966	Identifier	b
>6967	Identifier	b
>6968	IdentifierDeclType	BoneKeyframe *
>6969	Condition	 
>6970	UnaryOp	! core -> getShiftState ( )
>6971	CallExpression	core -> getShiftState ( )
>6972	ArgumentList	 
>6973	Callee	core -> getShiftState
>6974	PtrMemberAccess	core -> getShiftState
>6975	Identifier	getShiftState
>6976	Identifier	core
>6977	UnaryOperator	!
>6978	Condition	 
>6979	Identifier	editingBone
>7028	FunctionDef	AnimationEditor 
>7029	ParameterList	 
>7030	ReturnType	void
>7031	CompoundStatement	 
>7032	IfStatement	if ( b )
>7033	CompoundStatement	 
>7034	ExpressionStatement	 
>7035	AssignmentExpr	b -> rot = editingBone -> rotation . z = 0
>7036	AssignmentExpr	editingBone -> rotation . z = 0
>7037	PrimaryExpression	0
>7038	MemberAccess	editingBone -> rotation . z
>7039	Identifier	z
>7040	PtrMemberAccess	editingBone -> rotation
>7041	Identifier	rotation
>7042	Identifier	editingBone
>7043	PtrMemberAccess	b -> rot
>7044	Identifier	rot
>7045	Identifier	b
>7046	Condition	 
>7047	Identifier	b
>7048	IdentifierDeclStatement	 
>7049	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7050	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>7051	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7052	ArgumentList	editingBone -> boneIdx
>7053	Argument	editingBone -> boneIdx
>7054	PtrMemberAccess	editingBone -> boneIdx
>7055	Identifier	boneIdx
>7056	Identifier	editingBone
>7057	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7058	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7059	Identifier	getBoneKeyframe
>7060	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>7061	ArgumentList	currentKey
>7062	Argument	currentKey
>7063	Identifier	currentKey
>7064	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7065	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7066	Identifier	getKeyframe
>7067	CallExpression	editSprite -> getCurrentAnimation ( )
>7068	ArgumentList	 
>7069	Callee	editSprite -> getCurrentAnimation
>7070	PtrMemberAccess	editSprite -> getCurrentAnimation
>7071	Identifier	getCurrentAnimation
>7072	Identifier	editSprite
>7073	Identifier	b
>7074	Identifier	b
>7075	IdentifierDeclType	BoneKeyframe *
>7098	FunctionDef	AnimationEditor 
>7099	ParameterList	 
>7100	ReturnType	void
>7101	CompoundStatement	 
>7102	ExpressionStatement	 
>7103	AssignmentExpr	boneEdit = 0
>7104	PrimaryExpression	0
>7105	Identifier	boneEdit
>7106	SwitchStatement	switch ( boneEdit )
>7107	CompoundStatement	 
>7108	BreakStatement	 
>7109	CompoundStatement	 
>7110	ExpressionStatement	 
>7111	CallExpression	applyTranslation ( )
>7112	ArgumentList	 
>7113	Callee	applyTranslation
>7114	Identifier	applyTranslation
>7115	Label	 
>7116	Condition	 
>7117	Identifier	boneEdit
>7122	FunctionDef	AnimationEditor 
>7123	ParameterList	 
>7124	ReturnType	void
>7125	CompoundStatement	 
>7126	IfStatement	if ( editingBone )
>7127	CompoundStatement	 
>7128	ExpressionStatement	 
>7129	AssignmentExpr	boneEdit = 2
>7130	PrimaryExpression	2
>7131	Identifier	boneEdit
>7132	ExpressionStatement	 
>7133	AssignmentExpr	rotOffset = editingBone -> rotation . z
>7134	MemberAccess	editingBone -> rotation . z
>7135	Identifier	z
>7136	PtrMemberAccess	editingBone -> rotation
>7137	Identifier	rotation
>7138	Identifier	editingBone
>7139	Identifier	rotOffset
>7140	ExpressionStatement	 
>7141	AssignmentExpr	cursorOffset = core -> mouse . position
>7142	MemberAccess	core -> mouse . position
>7143	Identifier	position
>7144	PtrMemberAccess	core -> mouse
>7145	Identifier	mouse
>7146	Identifier	core
>7147	Identifier	cursorOffset
>7148	Condition	 
>7149	Identifier	editingBone
>7150	ExpressionStatement	 
>7151	CallExpression	updateEditingBone ( )
>7152	ArgumentList	 
>7153	Callee	updateEditingBone
>7154	Identifier	updateEditingBone
>7155	ExpressionStatement	 
>7156	CallExpression	pushUndo ( )
>7157	ArgumentList	 
>7158	Callee	pushUndo
>7159	Identifier	pushUndo
>7174	FunctionDef	AnimationEditor 
>7175	ParameterList	 
>7176	ReturnType	void
>7177	CompoundStatement	 
>7178	IfStatement	if ( editingBone )
>7179	CompoundStatement	 
>7180	ExpressionStatement	 
>7181	CallExpression	applyRotation ( )
>7182	ArgumentList	 
>7183	Callee	applyRotation
>7184	Identifier	applyRotation
>7185	Condition	 
>7186	Identifier	editingBone
>7187	ExpressionStatement	 
>7188	CallExpression	updateEditingBone ( )
>7189	ArgumentList	 
>7190	Callee	updateEditingBone
>7191	Identifier	updateEditingBone
>7192	IfStatement	if ( dsq -> isNested ( ) )
>7193	ReturnStatement	 
>7194	Condition	 
>7195	CallExpression	dsq -> isNested ( )
>7196	ArgumentList	 
>7197	Callee	dsq -> isNested
>7198	PtrMemberAccess	dsq -> isNested
>7199	Identifier	isNested
>7200	Identifier	dsq
>7208	FunctionDef	AnimationEditor 
>7209	ParameterList	 
>7210	ReturnType	void
>7211	CompoundStatement	 
>7212	IfStatement	if ( editingBone )
>7213	CompoundStatement	 
>7214	IfStatement	if ( ! core -> getShiftState ( ) )
>7215	ElseStatement	else
>7216	CompoundStatement	 
>7217	IfStatement	if ( bcur )
>7218	CompoundStatement	 
>7219	IfStatement	if ( ! core -> getCtrlState ( ) )
>7220	ElseStatement	else
>7221	CompoundStatement	 
>7222	ForStatement	for ( int a = 0 ; a < editSprite -> animations . size ( ) ; ++ a )
>7223	CompoundStatement	 
>7224	ForStatement	for ( int i = 0 ; i < editSprite -> animations [ a ] . getNumKeyframes ( ) ; ++ i )
>7225	CompoundStatement	 
>7226	IfStatement	if ( b )
>7227	CompoundStatement	 
>7228	ExpressionStatement	 
>7229	AssignmentExpr	b -> rot = - b -> rot
>7230	UnaryOp	- b -> rot
>7231	PtrMemberAccess	b -> rot
>7232	Identifier	rot
>7233	Identifier	b
>7234	UnaryOperator	-
>7235	PtrMemberAccess	b -> rot
>7236	Identifier	rot
>7237	Identifier	b
>7238	Condition	 
>7239	Identifier	b
>7240	IdentifierDeclStatement	 
>7241	IdentifierDecl	* b = editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7242	AssignmentExpr	* b = editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7243	CallExpression	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7244	ArgumentList	editingBone -> boneIdx
>7245	Argument	editingBone -> boneIdx
>7246	PtrMemberAccess	editingBone -> boneIdx
>7247	Identifier	boneIdx
>7248	Identifier	editingBone
>7249	Callee	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe
>7250	PtrMemberAccess	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe
>7251	Identifier	getBoneKeyframe
>7252	CallExpression	editSprite -> animations [ a ] . getKeyframe ( i )
>7253	ArgumentList	i
>7254	Argument	i
>7255	Identifier	i
>7256	Callee	editSprite -> animations [ a ] . getKeyframe
>7257	MemberAccess	editSprite -> animations [ a ] . getKeyframe
>7258	Identifier	getKeyframe
>7259	ArrayIndexing	editSprite -> animations [ a ]
>7260	Identifier	a
>7261	PtrMemberAccess	editSprite -> animations
>7262	Identifier	animations
>7263	Identifier	editSprite
>7264	Identifier	b
>7265	Identifier	b
>7266	IdentifierDeclType	BoneKeyframe *
>7267	UnaryExpression	 
>7268	Identifier	i
>7269	IncDec	++
>7270	Condition	 
>7271	RelationalExpression	i < editSprite -> animations [ a ] . getNumKeyframes ( )
>7272	CallExpression	editSprite -> animations [ a ] . getNumKeyframes ( )
>7273	ArgumentList	 
>7274	Callee	editSprite -> animations [ a ] . getNumKeyframes
>7275	MemberAccess	editSprite -> animations [ a ] . getNumKeyframes
>7276	Identifier	getNumKeyframes
>7277	ArrayIndexing	editSprite -> animations [ a ]
>7278	Identifier	a
>7279	PtrMemberAccess	editSprite -> animations
>7280	Identifier	animations
>7281	Identifier	editSprite
>7282	Identifier	i
>7283	ForInit	 
>7284	IdentifierDeclStatement	int i = 0 ;
>7285	IdentifierDecl	i = 0
>7286	AssignmentExpr	i = 0
>7287	PrimaryExpression	0
>7288	Identifier	i
>7289	Identifier	i
>7290	IdentifierDeclType	int
>7291	UnaryExpression	 
>7292	Identifier	a
>7293	IncDec	++
>7294	Condition	 
>7295	RelationalExpression	a < editSprite -> animations . size ( )
>7296	CallExpression	editSprite -> animations . size ( )
>7297	ArgumentList	 
>7298	Callee	editSprite -> animations . size
>7299	MemberAccess	editSprite -> animations . size
>7300	Identifier	size
>7301	PtrMemberAccess	editSprite -> animations
>7302	Identifier	animations
>7303	Identifier	editSprite
>7304	Identifier	a
>7305	ForInit	 
>7306	IdentifierDeclStatement	int a = 0 ;
>7307	IdentifierDecl	a = 0
>7308	AssignmentExpr	a = 0
>7309	PrimaryExpression	0
>7310	Identifier	a
>7311	Identifier	a
>7312	IdentifierDeclType	int
>7313	CompoundStatement	 
>7314	ForStatement	for ( int i = 0 ; i < editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( ) ; ++ i )
>7315	CompoundStatement	 
>7316	IfStatement	if ( b )
>7317	CompoundStatement	 
>7318	ExpressionStatement	 
>7319	AssignmentExpr	b -> rot = - b -> rot
>7320	UnaryOp	- b -> rot
>7321	PtrMemberAccess	b -> rot
>7322	Identifier	rot
>7323	Identifier	b
>7324	UnaryOperator	-
>7325	PtrMemberAccess	b -> rot
>7326	Identifier	rot
>7327	Identifier	b
>7328	Condition	 
>7329	Identifier	b
>7330	IdentifierDeclStatement	 
>7331	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7332	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> \
>7333	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7334	ArgumentList	editingBone -> boneIdx
>7335	Argument	editingBone -> boneIdx
>7336	PtrMemberAccess	editingBone -> boneIdx
>7337	Identifier	boneIdx
>7338	Identifier	editingBone
>7339	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe
>7340	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe
>7341	Identifier	getBoneKeyframe
>7342	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i )
>7343	ArgumentList	i
>7344	Argument	i
>7345	Identifier	i
>7346	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7347	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7348	Identifier	getKeyframe
>7349	CallExpression	editSprite -> getCurrentAnimation ( )
>7350	ArgumentList	 
>7351	Callee	editSprite -> getCurrentAnimation
>7352	PtrMemberAccess	editSprite -> getCurrentAnimation
>7353	Identifier	getCurrentAnimation
>7354	Identifier	editSprite
>7355	Identifier	b
>7356	Identifier	b
>7357	IdentifierDeclType	BoneKeyframe *
>7358	UnaryExpression	 
>7359	Identifier	i
>7360	IncDec	++
>7361	Condition	 
>7362	RelationalExpression	i < editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( )
>7363	CallExpression	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( )
>7364	ArgumentList	 
>7365	Callee	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes
>7366	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes
>7367	Identifier	getNumKeyframes
>7368	CallExpression	editSprite -> getCurrentAnimation ( )
>7369	ArgumentList	 
>7370	Callee	editSprite -> getCurrentAnimation
>7371	PtrMemberAccess	editSprite -> getCurrentAnimation
>7372	Identifier	getCurrentAnimation
>7373	Identifier	editSprite
>7374	Identifier	i
>7375	ForInit	 
>7376	IdentifierDeclStatement	int i = 0 ;
>7377	IdentifierDecl	i = 0
>7378	AssignmentExpr	i = 0
>7379	PrimaryExpression	0
>7380	Identifier	i
>7381	Identifier	i
>7382	IdentifierDeclType	int
>7383	Condition	 
>7384	UnaryOp	! core -> getCtrlState ( )
>7385	CallExpression	core -> getCtrlState ( )
>7386	ArgumentList	 
>7387	Callee	core -> getCtrlState
>7388	PtrMemberAccess	core -> getCtrlState
>7389	Identifier	getCtrlState
>7390	Identifier	core
>7391	UnaryOperator	!
>7392	IdentifierDeclStatement	 
>7393	IdentifierDecl	rotdiff = editingBone -> rotation . z - bcur -> rot
>7394	AssignmentExpr	rotdiff = editingBone -> rotation . z - bcur -> rot
>7395	AdditiveExpression	editingBone -> rotation . z - bcur -> rot
>7396	PtrMemberAccess	bcur -> rot
>7397	Identifier	rot
>7398	Identifier	bcur
>7399	MemberAccess	editingBone -> rotation . z
>7400	Identifier	z
>7401	PtrMemberAccess	editingBone -> rotation
>7402	Identifier	rotation
>7403	Identifier	editingBone
>7404	Identifier	rotdiff
>7405	Identifier	rotdiff
>7406	IdentifierDeclType	int
>7407	Condition	 
>7408	Identifier	bcur
>7409	IdentifierDeclStatement	 
>7410	IdentifierDecl	* bcur = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> \
>7411	AssignmentExpr	* bcur = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>7412	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7413	ArgumentList	editingBone -> boneIdx
>7414	Argument	editingBone -> boneIdx
>7415	PtrMemberAccess	editingBone -> boneIdx
>7416	Identifier	boneIdx
>7417	Identifier	editingBone
>7418	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7419	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7420	Identifier	getBoneKeyframe
>7421	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>7422	ArgumentList	currentKey
>7423	Argument	currentKey
>7424	Identifier	currentKey
>7425	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7426	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7427	Identifier	getKeyframe
>7428	CallExpression	editSprite -> getCurrentAnimation ( )
>7429	ArgumentList	 
>7430	Callee	editSprite -> getCurrentAnimation
>7431	PtrMemberAccess	editSprite -> getCurrentAnimation
>7432	Identifier	getCurrentAnimation
>7433	Identifier	editSprite
>7434	Identifier	bcur
>7435	Identifier	bcur
>7436	IdentifierDeclType	BoneKeyframe *
>7437	CompoundStatement	 
>7438	IfStatement	if ( b )
>7439	CompoundStatement	 
>7440	ExpressionStatement	 
>7441	AssignmentExpr	b -> rot = - b -> rot
>7442	UnaryOp	- b -> rot
>7443	PtrMemberAccess	b -> rot
>7444	Identifier	rot
>7445	Identifier	b
>7446	UnaryOperator	-
>7447	PtrMemberAccess	b -> rot
>7448	Identifier	rot
>7449	Identifier	b
>7450	Condition	 
>7451	Identifier	b
>7452	IdentifierDeclStatement	 
>7453	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7454	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>7455	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7456	ArgumentList	editingBone -> boneIdx
>7457	Argument	editingBone -> boneIdx
>7458	PtrMemberAccess	editingBone -> boneIdx
>7459	Identifier	boneIdx
>7460	Identifier	editingBone
>7461	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7462	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7463	Identifier	getBoneKeyframe
>7464	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>7465	ArgumentList	currentKey
>7466	Argument	currentKey
>7467	Identifier	currentKey
>7468	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7469	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7470	Identifier	getKeyframe
>7471	CallExpression	editSprite -> getCurrentAnimation ( )
>7472	ArgumentList	 
>7473	Callee	editSprite -> getCurrentAnimation
>7474	PtrMemberAccess	editSprite -> getCurrentAnimation
>7475	Identifier	getCurrentAnimation
>7476	Identifier	editSprite
>7477	Identifier	b
>7478	Identifier	b
>7479	IdentifierDeclType	BoneKeyframe *
>7480	Condition	 
>7481	UnaryOp	! core -> getShiftState ( )
>7482	CallExpression	core -> getShiftState ( )
>7483	ArgumentList	 
>7484	Callee	core -> getShiftState
>7485	PtrMemberAccess	core -> getShiftState
>7486	Identifier	getShiftState
>7487	Identifier	core
>7488	UnaryOperator	!
>7489	Condition	 
>7490	Identifier	editingBone
>7491	ExpressionStatement	 
>7492	CallExpression	updateEditingBone ( )
>7493	ArgumentList	 
>7494	Callee	updateEditingBone
>7495	Identifier	updateEditingBone
>7496	IfStatement	if ( dsq -> isNested ( ) )
>7497	ReturnStatement	 
>7498	Condition	 
>7499	CallExpression	dsq -> isNested ( )
>7500	ArgumentList	 
>7501	Callee	dsq -> isNested
>7502	PtrMemberAccess	dsq -> isNested
>7503	Identifier	isNested
>7504	Identifier	dsq
>7552	FunctionDef	AnimationEditor 
>7553	ParameterList	 
>7554	ReturnType	void
>7555	CompoundStatement	 
>7556	IfStatement	if ( editingBone )
>7557	CompoundStatement	 
>7558	IfStatement	if ( b )
>7559	CompoundStatement	 
>7560	ExpressionStatement	 
>7561	AssignmentExpr	b -> x = b -> y = 0
>7562	AssignmentExpr	b -> y = 0
>7563	PrimaryExpression	0
>7564	PtrMemberAccess	b -> y
>7565	Identifier	y
>7566	Identifier	b
>7567	PtrMemberAccess	b -> x
>7568	Identifier	x
>7569	Identifier	b
>7570	ExpressionStatement	 
>7571	AssignmentExpr	editingBone -> position = Vector ( 0 , 0 )
>7572	CallExpression	Vector ( 0 , 0 )
>7573	ArgumentList	0
>7574	Argument	0
>7575	PrimaryExpression	0
>7576	Argument	0
>7577	PrimaryExpression	0
>7578	Callee	Vector
>7579	Identifier	Vector
>7580	PtrMemberAccess	editingBone -> position
>7581	Identifier	position
>7582	Identifier	editingBone
>7583	Condition	 
>7584	Identifier	b
>7585	IdentifierDeclStatement	 
>7586	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7587	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>7588	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7589	ArgumentList	editingBone -> boneIdx
>7590	Argument	editingBone -> boneIdx
>7591	PtrMemberAccess	editingBone -> boneIdx
>7592	Identifier	boneIdx
>7593	Identifier	editingBone
>7594	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7595	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7596	Identifier	getBoneKeyframe
>7597	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>7598	ArgumentList	currentKey
>7599	Argument	currentKey
>7600	Identifier	currentKey
>7601	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7602	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7603	Identifier	getKeyframe
>7604	CallExpression	editSprite -> getCurrentAnimation ( )
>7605	ArgumentList	 
>7606	Callee	editSprite -> getCurrentAnimation
>7607	PtrMemberAccess	editSprite -> getCurrentAnimation
>7608	Identifier	getCurrentAnimation
>7609	Identifier	editSprite
>7610	Identifier	b
>7611	Identifier	b
>7612	IdentifierDeclType	BoneKeyframe *
>7613	Condition	 
>7614	Identifier	editingBone
>7615	ExpressionStatement	 
>7616	CallExpression	updateEditingBone ( )
>7617	ArgumentList	 
>7618	Callee	updateEditingBone
>7619	Identifier	updateEditingBone
>7620	IfStatement	if ( dsq -> isNested ( ) )
>7621	ReturnStatement	 
>7622	Condition	 
>7623	CallExpression	dsq -> isNested ( )
>7624	ArgumentList	 
>7625	Callee	dsq -> isNested
>7626	PtrMemberAccess	dsq -> isNested
>7627	Identifier	isNested
>7628	Identifier	dsq
>7655	FunctionDef	AnimationEditor 
>7656	ParameterList	 
>7657	ReturnType	void
>7658	CompoundStatement	 
>7659	IfStatement	if ( ! dsq -> isNested ( ) )
>7660	CompoundStatement	 
>7661	IfStatement	if ( editingBone )
>7662	CompoundStatement	 
>7663	ExpressionStatement	 
>7664	AssignmentExpr	editingBone -> renderQuad = ! editingBone -> renderQuad
>7665	UnaryOp	! editingBone -> renderQuad
>7666	PtrMemberAccess	editingBone -> renderQuad
>7667	Identifier	renderQuad
>7668	Identifier	editingBone
>7669	UnaryOperator	!
>7670	PtrMemberAccess	editingBone -> renderQuad
>7671	Identifier	renderQuad
>7672	Identifier	editingBone
>7673	Condition	 
>7674	Identifier	editingBone
>7675	ExpressionStatement	 
>7676	CallExpression	updateEditingBone ( )
>7677	ArgumentList	 
>7678	Callee	updateEditingBone
>7679	Identifier	updateEditingBone
>7680	Condition	 
>7681	UnaryOp	! dsq -> isNested ( )
>7682	CallExpression	dsq -> isNested ( )
>7683	ArgumentList	 
>7684	Callee	dsq -> isNested
>7685	PtrMemberAccess	dsq -> isNested
>7686	Identifier	isNested
>7687	Identifier	dsq
>7688	UnaryOperator	!
>7698	FunctionDef	AnimationEditor 
>7699	ParameterList	 
>7700	ReturnType	void
>7701	CompoundStatement	 
>7702	ExpressionStatement	 
>7703	AssignmentExpr	boneEdit = 0
>7704	PrimaryExpression	0
>7705	Identifier	boneEdit
>7706	SwitchStatement	switch ( boneEdit )
>7707	CompoundStatement	 
>7708	BreakStatement	 
>7709	CompoundStatement	 
>7710	IfStatement	if ( editingBone )
>7711	CompoundStatement	 
>7712	IfStatement	if ( ! core -> getShiftState ( ) )
>7713	ElseStatement	else
>7714	CompoundStatement	 
>7715	IfStatement	if ( bcur )
>7716	CompoundStatement	 
>7717	IfStatement	if ( ! core -> getCtrlState ( ) )
>7718	ElseStatement	else
>7719	CompoundStatement	 
>7720	ForStatement	for ( int a = 0 ; a < editSprite -> animations . size ( ) ; ++ a )
>7721	CompoundStatement	 
>7722	ForStatement	for ( int i = 0 ; i < editSprite -> animations [ a ] . getNumKeyframes ( ) ; ++ i )
>7723	CompoundStatement	 
>7724	IfStatement	if ( b )
>7725	CompoundStatement	 
>7726	ExpressionStatement	 
>7727	AssignmentExpr	b -> rot += rotdiff
>7728	Identifier	rotdiff
>7729	PtrMemberAccess	b -> rot
>7730	Identifier	rot
>7731	Identifier	b
>7732	Condition	 
>7733	Identifier	b
>7734	IdentifierDeclStatement	 
>7735	IdentifierDecl	* b = editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7736	AssignmentExpr	* b = editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7737	CallExpression	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7738	ArgumentList	editingBone -> boneIdx
>7739	Argument	editingBone -> boneIdx
>7740	PtrMemberAccess	editingBone -> boneIdx
>7741	Identifier	boneIdx
>7742	Identifier	editingBone
>7743	Callee	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe
>7744	PtrMemberAccess	editSprite -> animations [ a ] . getKeyframe ( i ) -> getBoneKeyframe
>7745	Identifier	getBoneKeyframe
>7746	CallExpression	editSprite -> animations [ a ] . getKeyframe ( i )
>7747	ArgumentList	i
>7748	Argument	i
>7749	Identifier	i
>7750	Callee	editSprite -> animations [ a ] . getKeyframe
>7751	MemberAccess	editSprite -> animations [ a ] . getKeyframe
>7752	Identifier	getKeyframe
>7753	ArrayIndexing	editSprite -> animations [ a ]
>7754	Identifier	a
>7755	PtrMemberAccess	editSprite -> animations
>7756	Identifier	animations
>7757	Identifier	editSprite
>7758	Identifier	b
>7759	Identifier	b
>7760	IdentifierDeclType	BoneKeyframe *
>7761	UnaryExpression	 
>7762	Identifier	i
>7763	IncDec	++
>7764	Condition	 
>7765	RelationalExpression	i < editSprite -> animations [ a ] . getNumKeyframes ( )
>7766	CallExpression	editSprite -> animations [ a ] . getNumKeyframes ( )
>7767	ArgumentList	 
>7768	Callee	editSprite -> animations [ a ] . getNumKeyframes
>7769	MemberAccess	editSprite -> animations [ a ] . getNumKeyframes
>7770	Identifier	getNumKeyframes
>7771	ArrayIndexing	editSprite -> animations [ a ]
>7772	Identifier	a
>7773	PtrMemberAccess	editSprite -> animations
>7774	Identifier	animations
>7775	Identifier	editSprite
>7776	Identifier	i
>7777	ForInit	 
>7778	IdentifierDeclStatement	int i = 0 ;
>7779	IdentifierDecl	i = 0
>7780	AssignmentExpr	i = 0
>7781	PrimaryExpression	0
>7782	Identifier	i
>7783	Identifier	i
>7784	IdentifierDeclType	int
>7785	UnaryExpression	 
>7786	Identifier	a
>7787	IncDec	++
>7788	Condition	 
>7789	RelationalExpression	a < editSprite -> animations . size ( )
>7790	CallExpression	editSprite -> animations . size ( )
>7791	ArgumentList	 
>7792	Callee	editSprite -> animations . size
>7793	MemberAccess	editSprite -> animations . size
>7794	Identifier	size
>7795	PtrMemberAccess	editSprite -> animations
>7796	Identifier	animations
>7797	Identifier	editSprite
>7798	Identifier	a
>7799	ForInit	 
>7800	IdentifierDeclStatement	int a = 0 ;
>7801	IdentifierDecl	a = 0
>7802	AssignmentExpr	a = 0
>7803	PrimaryExpression	0
>7804	Identifier	a
>7805	Identifier	a
>7806	IdentifierDeclType	int
>7807	CompoundStatement	 
>7808	ForStatement	for ( int i = 0 ; i < editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( ) ; ++ i )
>7809	CompoundStatement	 
>7810	IfStatement	if ( b )
>7811	CompoundStatement	 
>7812	ExpressionStatement	 
>7813	AssignmentExpr	b -> rot += rotdiff
>7814	Identifier	rotdiff
>7815	PtrMemberAccess	b -> rot
>7816	Identifier	rot
>7817	Identifier	b
>7818	Condition	 
>7819	Identifier	b
>7820	IdentifierDeclStatement	 
>7821	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7822	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> \
>7823	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7824	ArgumentList	editingBone -> boneIdx
>7825	Argument	editingBone -> boneIdx
>7826	PtrMemberAccess	editingBone -> boneIdx
>7827	Identifier	boneIdx
>7828	Identifier	editingBone
>7829	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe
>7830	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i ) -> getBoneKeyframe
>7831	Identifier	getBoneKeyframe
>7832	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( i )
>7833	ArgumentList	i
>7834	Argument	i
>7835	Identifier	i
>7836	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7837	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7838	Identifier	getKeyframe
>7839	CallExpression	editSprite -> getCurrentAnimation ( )
>7840	ArgumentList	 
>7841	Callee	editSprite -> getCurrentAnimation
>7842	PtrMemberAccess	editSprite -> getCurrentAnimation
>7843	Identifier	getCurrentAnimation
>7844	Identifier	editSprite
>7845	Identifier	b
>7846	Identifier	b
>7847	IdentifierDeclType	BoneKeyframe *
>7848	UnaryExpression	 
>7849	Identifier	i
>7850	IncDec	++
>7851	Condition	 
>7852	RelationalExpression	i < editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( )
>7853	CallExpression	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes ( )
>7854	ArgumentList	 
>7855	Callee	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes
>7856	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getNumKeyframes
>7857	Identifier	getNumKeyframes
>7858	CallExpression	editSprite -> getCurrentAnimation ( )
>7859	ArgumentList	 
>7860	Callee	editSprite -> getCurrentAnimation
>7861	PtrMemberAccess	editSprite -> getCurrentAnimation
>7862	Identifier	getCurrentAnimation
>7863	Identifier	editSprite
>7864	Identifier	i
>7865	ForInit	 
>7866	IdentifierDeclStatement	int i = 0 ;
>7867	IdentifierDecl	i = 0
>7868	AssignmentExpr	i = 0
>7869	PrimaryExpression	0
>7870	Identifier	i
>7871	Identifier	i
>7872	IdentifierDeclType	int
>7873	Condition	 
>7874	UnaryOp	! core -> getCtrlState ( )
>7875	CallExpression	core -> getCtrlState ( )
>7876	ArgumentList	 
>7877	Callee	core -> getCtrlState
>7878	PtrMemberAccess	core -> getCtrlState
>7879	Identifier	getCtrlState
>7880	Identifier	core
>7881	UnaryOperator	!
>7882	IdentifierDeclStatement	 
>7883	IdentifierDecl	rotdiff = editingBone -> rotation . z - bcur -> rot
>7884	AssignmentExpr	rotdiff = editingBone -> rotation . z - bcur -> rot
>7885	AdditiveExpression	editingBone -> rotation . z - bcur -> rot
>7886	PtrMemberAccess	bcur -> rot
>7887	Identifier	rot
>7888	Identifier	bcur
>7889	MemberAccess	editingBone -> rotation . z
>7890	Identifier	z
>7891	PtrMemberAccess	editingBone -> rotation
>7892	Identifier	rotation
>7893	Identifier	editingBone
>7894	Identifier	rotdiff
>7895	Identifier	rotdiff
>7896	IdentifierDeclType	int
>7897	Condition	 
>7898	Identifier	bcur
>7899	IdentifierDeclStatement	 
>7900	IdentifierDecl	* bcur = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> \
>7901	AssignmentExpr	* bcur = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>7902	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7903	ArgumentList	editingBone -> boneIdx
>7904	Argument	editingBone -> boneIdx
>7905	PtrMemberAccess	editingBone -> boneIdx
>7906	Identifier	boneIdx
>7907	Identifier	editingBone
>7908	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7909	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7910	Identifier	getBoneKeyframe
>7911	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>7912	ArgumentList	currentKey
>7913	Argument	currentKey
>7914	Identifier	currentKey
>7915	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7916	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7917	Identifier	getKeyframe
>7918	CallExpression	editSprite -> getCurrentAnimation ( )
>7919	ArgumentList	 
>7920	Callee	editSprite -> getCurrentAnimation
>7921	PtrMemberAccess	editSprite -> getCurrentAnimation
>7922	Identifier	getCurrentAnimation
>7923	Identifier	editSprite
>7924	Identifier	bcur
>7925	Identifier	bcur
>7926	IdentifierDeclType	BoneKeyframe *
>7927	CompoundStatement	 
>7928	IfStatement	if ( b )
>7929	CompoundStatement	 
>7930	ExpressionStatement	 
>7931	AssignmentExpr	b -> rot = int ( editingBone -> rotation . z )
>7932	CallExpression	int ( editingBone -> rotation . z )
>7933	ArgumentList	editingBone -> rotation . z
>7934	Argument	editingBone -> rotation . z
>7935	MemberAccess	editingBone -> rotation . z
>7936	Identifier	z
>7937	PtrMemberAccess	editingBone -> rotation
>7938	Identifier	rotation
>7939	Identifier	editingBone
>7940	Callee	int
>7941	Identifier	int
>7942	PtrMemberAccess	b -> rot
>7943	Identifier	rot
>7944	Identifier	b
>7945	Condition	 
>7946	Identifier	b
>7947	IdentifierDeclStatement	 
>7948	IdentifierDecl	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7949	AssignmentExpr	* b = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone \
>7950	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe ( editingBone -> boneIdx )
>7951	ArgumentList	editingBone -> boneIdx
>7952	Argument	editingBone -> boneIdx
>7953	PtrMemberAccess	editingBone -> boneIdx
>7954	Identifier	boneIdx
>7955	Identifier	editingBone
>7956	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7957	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey ) -> getBoneKeyframe
>7958	Identifier	getBoneKeyframe
>7959	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>7960	ArgumentList	currentKey
>7961	Argument	currentKey
>7962	Identifier	currentKey
>7963	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7964	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>7965	Identifier	getKeyframe
>7966	CallExpression	editSprite -> getCurrentAnimation ( )
>7967	ArgumentList	 
>7968	Callee	editSprite -> getCurrentAnimation
>7969	PtrMemberAccess	editSprite -> getCurrentAnimation
>7970	Identifier	getCurrentAnimation
>7971	Identifier	editSprite
>7972	Identifier	b
>7973	Identifier	b
>7974	IdentifierDeclType	BoneKeyframe *
>7975	Condition	 
>7976	UnaryOp	! core -> getShiftState ( )
>7977	CallExpression	core -> getShiftState ( )
>7978	ArgumentList	 
>7979	Callee	core -> getShiftState
>7980	PtrMemberAccess	core -> getShiftState
>7981	Identifier	getShiftState
>7982	Identifier	core
>7983	UnaryOperator	!
>7984	Condition	 
>7985	Identifier	editingBone
>7986	Label	 
>7987	Condition	 
>7988	Identifier	boneEdit
>8035	FunctionDef	AnimationEditor 
>8036	ParameterList	 
>8037	ReturnType	void
>8038	CompoundStatement	 
>8042	FunctionDef	AnimationEditor 
>8043	ParameterList	 
>8044	ReturnType	void
>8045	CompoundStatement	 
>8046	IfStatement	if ( editingBone && currentKey >= 0 )
>8047	CompoundStatement	 
>8048	IfStatement	if ( b1 && b2 )
>8049	CompoundStatement	 
>8050	ExpressionStatement	 
>8051	AssignmentExpr	b2 -> strip = b1 -> strip
>8052	PtrMemberAccess	b1 -> strip
>8053	Identifier	strip
>8054	Identifier	b1
>8055	PtrMemberAccess	b2 -> strip
>8056	Identifier	strip
>8057	Identifier	b2
>8058	ExpressionStatement	 
>8059	AssignmentExpr	b2 -> rot = b1 -> rot
>8060	PtrMemberAccess	b1 -> rot
>8061	Identifier	rot
>8062	Identifier	b1
>8063	PtrMemberAccess	b2 -> rot
>8064	Identifier	rot
>8065	Identifier	b2
>8066	ExpressionStatement	 
>8067	AssignmentExpr	b2 -> y = b1 -> y
>8068	PtrMemberAccess	b1 -> y
>8069	Identifier	y
>8070	Identifier	b1
>8071	PtrMemberAccess	b2 -> y
>8072	Identifier	y
>8073	Identifier	b2
>8074	ExpressionStatement	 
>8075	AssignmentExpr	b2 -> x = b1 -> x
>8076	PtrMemberAccess	b1 -> x
>8077	Identifier	x
>8078	Identifier	b1
>8079	PtrMemberAccess	b2 -> x
>8080	Identifier	x
>8081	Identifier	b2
>8082	Condition	 
>8083	AndExpression	b1 && b2
>8084	Identifier	b2
>8085	Identifier	b1
>8086	IfStatement	if ( s2 )
>8087	ExpressionStatement	 
>8088	AssignmentExpr	b2 = s2 -> getBoneKeyframe ( editingBone -> boneIdx )
>8089	CallExpression	s2 -> getBoneKeyframe ( editingBone -> boneIdx )
>8090	ArgumentList	editingBone -> boneIdx
>8091	Argument	editingBone -> boneIdx
>8092	PtrMemberAccess	editingBone -> boneIdx
>8093	Identifier	boneIdx
>8094	Identifier	editingBone
>8095	Callee	s2 -> getBoneKeyframe
>8096	PtrMemberAccess	s2 -> getBoneKeyframe
>8097	Identifier	getBoneKeyframe
>8098	Identifier	s2
>8099	Identifier	b2
>8100	Condition	 
>8101	Identifier	s2
>8102	IdentifierDeclStatement	 
>8103	IdentifierDecl	* b2 = 0
>8104	AssignmentExpr	* b2 = 0
>8105	PrimaryExpression	0
>8106	Identifier	b2
>8107	Identifier	b2
>8108	IdentifierDeclType	BoneKeyframe *
>8109	IdentifierDeclStatement	 
>8110	IdentifierDecl	* s2 = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey + 1 )
>8111	AssignmentExpr	* s2 = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey + 1 )
>8112	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey + 1 )
>8113	ArgumentList	currentKey + 1
>8114	Argument	currentKey + 1
>8115	AdditiveExpression	currentKey + 1
>8116	PrimaryExpression	1
>8117	Identifier	currentKey
>8118	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>8119	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>8120	Identifier	getKeyframe
>8121	CallExpression	editSprite -> getCurrentAnimation ( )
>8122	ArgumentList	 
>8123	Callee	editSprite -> getCurrentAnimation
>8124	PtrMemberAccess	editSprite -> getCurrentAnimation
>8125	Identifier	getCurrentAnimation
>8126	Identifier	editSprite
>8127	Identifier	s2
>8128	Identifier	s2
>8129	IdentifierDeclType	SkeletalKeyframe *
>8130	IfStatement	if ( s1 )
>8131	ExpressionStatement	 
>8132	AssignmentExpr	b1 = s1 -> getBoneKeyframe ( editingBone -> boneIdx )
>8133	CallExpression	s1 -> getBoneKeyframe ( editingBone -> boneIdx )
>8134	ArgumentList	editingBone -> boneIdx
>8135	Argument	editingBone -> boneIdx
>8136	PtrMemberAccess	editingBone -> boneIdx
>8137	Identifier	boneIdx
>8138	Identifier	editingBone
>8139	Callee	s1 -> getBoneKeyframe
>8140	PtrMemberAccess	s1 -> getBoneKeyframe
>8141	Identifier	getBoneKeyframe
>8142	Identifier	s1
>8143	Identifier	b1
>8144	Condition	 
>8145	Identifier	s1
>8146	IdentifierDeclStatement	 
>8147	IdentifierDecl	* b1 = 0
>8148	AssignmentExpr	* b1 = 0
>8149	PrimaryExpression	0
>8150	Identifier	b1
>8151	Identifier	b1
>8152	IdentifierDeclType	BoneKeyframe *
>8153	IdentifierDeclStatement	 
>8154	IdentifierDecl	* s1 = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>8155	AssignmentExpr	* s1 = editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>8156	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( currentKey )
>8157	ArgumentList	currentKey
>8158	Argument	currentKey
>8159	Identifier	currentKey
>8160	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>8161	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>8162	Identifier	getKeyframe
>8163	CallExpression	editSprite -> getCurrentAnimation ( )
>8164	ArgumentList	 
>8165	Callee	editSprite -> getCurrentAnimation
>8166	PtrMemberAccess	editSprite -> getCurrentAnimation
>8167	Identifier	getCurrentAnimation
>8168	Identifier	editSprite
>8169	Identifier	s1
>8170	Identifier	s1
>8171	IdentifierDeclType	SkeletalKeyframe *
>8172	Condition	 
>8173	AndExpression	editingBone && currentKey >= 0
>8174	RelationalExpression	currentKey >= 0
>8175	PrimaryExpression	0
>8176	Identifier	currentKey
>8177	Identifier	editingBone
>8178	ExpressionStatement	 
>8179	CallExpression	updateEditingBone ( )
>8180	ArgumentList	 
>8181	Callee	updateEditingBone
>8182	Identifier	updateEditingBone
>8214	FunctionDef	AnimationEditor 
>8215	ParameterList	 
>8216	ReturnType	void
>8217	CompoundStatement	 
>8218	IfStatement	if ( editSprite -> saveSkeletal ( editingFile ) )
>8219	ElseStatement	else
>8220	ExpressionStatement	 
>8221	CallExpression	dsq -> screenMessage ( \"FAILED TO SAVE
>8222	ArgumentList	\"FAILED TO SAVE
>8223	Argument	\"FAILED TO SAVE
>8224	AdditiveExpression	\"FAILED TO SAVE
>8225	Identifier	editingFile
>8226	PrimaryExpression	\"FAILED TO SAVE
>8227	Callee	dsq -> screenMessage
>8228	PtrMemberAccess	dsq -> screenMessage
>8229	Identifier	screenMessage
>8230	Identifier	dsq
>8231	ExpressionStatement	 
>8232	CallExpression	dsq -> screenMessage ( \"Saved anim
>8233	ArgumentList	\"Saved anim
>8234	Argument	\"Saved anim
>8235	AdditiveExpression	\"Saved anim
>8236	Identifier	editingFile
>8237	PrimaryExpression	\"Saved anim
>8238	Callee	dsq -> screenMessage
>8239	PtrMemberAccess	dsq -> screenMessage
>8240	Identifier	screenMessage
>8241	Identifier	dsq
>8242	Condition	 
>8243	CallExpression	editSprite -> saveSkeletal ( editingFile )
>8244	ArgumentList	editingFile
>8245	Argument	editingFile
>8246	Identifier	editingFile
>8247	Callee	editSprite -> saveSkeletal
>8248	PtrMemberAccess	editSprite -> saveSkeletal
>8249	Identifier	saveSkeletal
>8250	Identifier	editSprite
>8259	FunctionDef	AnimationEditor 
>8260	ParameterList	 
>8261	ReturnType	void
>8262	CompoundStatement	 
>8263	IfStatement	if ( editingStrip )
>8264	ExpressionStatement	 
>8265	CallExpression	editStripKey ( )
>8266	ArgumentList	 
>8267	Callee	editStripKey
>8268	Identifier	editStripKey
>8269	Condition	 
>8270	Identifier	editingStrip
>8271	ExpressionStatement	 
>8272	CallExpression	rebuildKeyframeWidgets ( )
>8273	ArgumentList	 
>8274	Callee	rebuildKeyframeWidgets
>8275	Identifier	rebuildKeyframeWidgets
>8276	ExpressionStatement	 
>8277	AssignmentExpr	currentKey = 0
>8278	PrimaryExpression	0
>8279	Identifier	currentKey
>8280	ExpressionStatement	 
>8281	CallExpression	editSprite -> loadSkeletal ( editingFile )
>8282	ArgumentList	editingFile
>8283	Argument	editingFile
>8284	Identifier	editingFile
>8285	Callee	editSprite -> loadSkeletal
>8286	PtrMemberAccess	editSprite -> loadSkeletal
>8287	Identifier	loadSkeletal
>8288	Identifier	editSprite
>8289	ExpressionStatement	 
>8290	AssignmentExpr	editSprite -> position = Vector ( 400 , 300 )
>8291	CallExpression	Vector ( 400 , 300 )
>8292	ArgumentList	400
>8293	Argument	300
>8294	PrimaryExpression	300
>8295	Argument	400
>8296	PrimaryExpression	400
>8297	Callee	Vector
>8298	Identifier	Vector
>8299	PtrMemberAccess	editSprite -> position
>8300	Identifier	position
>8301	Identifier	editSprite
>8302	ExpressionStatement	 
>8303	CallExpression	clearUndoHistory ( )
>8304	ArgumentList	 
>8305	Callee	clearUndoHistory
>8306	Identifier	clearUndoHistory
>8307	ExpressionStatement	 
>8308	AssignmentExpr	editingBone = 0
>8309	PrimaryExpression	0
>8310	Identifier	editingBone
>8311	ExpressionStatement	 
>8312	AssignmentExpr	lastSelectedBone = 0
>8313	PrimaryExpression	0
>8314	Identifier	lastSelectedBone
>8315	ExpressionStatement	 
>8316	CallExpression	SkeletalSprite 
>8317	ArgumentList	 
>8318	Callee	SkeletalSprite 
>8319	Identifier	SkeletalSprite 
>8332	FunctionDef	AnimationEditor 
>8333	ParameterList	 
>8334	ReturnType	void
>8335	CompoundStatement	 
>8336	IfStatement	if ( ! dsq -> returnToScene . empty ( ) )
>8337	ElseStatement	else
>8338	ExpressionStatement	 
>8339	CallExpression	dsq -> title ( )
>8340	ArgumentList	 
>8341	Callee	dsq -> title
>8342	PtrMemberAccess	dsq -> title
>8343	Identifier	title
>8344	Identifier	dsq
>8345	ExpressionStatement	 
>8346	CallExpression	dsq -> game -> transitionToScene ( dsq -> returnToScene )
>8347	ArgumentList	dsq -> returnToScene
>8348	Argument	dsq -> returnToScene
>8349	PtrMemberAccess	dsq -> returnToScene
>8350	Identifier	returnToScene
>8351	Identifier	dsq
>8352	Callee	dsq -> game -> transitionToScene
>8353	PtrMemberAccess	dsq -> game -> transitionToScene
>8354	Identifier	transitionToScene
>8355	PtrMemberAccess	dsq -> game
>8356	Identifier	game
>8357	Identifier	dsq
>8358	Condition	 
>8359	UnaryOp	! dsq -> returnToScene . empty ( )
>8360	CallExpression	dsq -> returnToScene . empty ( )
>8361	ArgumentList	 
>8362	Callee	dsq -> returnToScene . empty
>8363	MemberAccess	dsq -> returnToScene . empty
>8364	Identifier	empty
>8365	PtrMemberAccess	dsq -> returnToScene
>8366	Identifier	returnToScene
>8367	Identifier	dsq
>8368	UnaryOperator	!
>8369	IfStatement	if ( dsq -> isNested ( ) )
>8370	ReturnStatement	 
>8371	Condition	 
>8372	CallExpression	dsq -> isNested ( )
>8373	ArgumentList	 
>8374	Callee	dsq -> isNested
>8375	PtrMemberAccess	dsq -> isNested
>8376	Identifier	isNested
>8377	Identifier	dsq
>8387	FunctionDef	AnimationEditor 
>8388	ParameterList	 
>8389	ReturnType	void
>8390	CompoundStatement	 
>8391	ExpressionStatement	 
>8392	CallExpression	core -> quit ( )
>8393	ArgumentList	 
>8394	Callee	core -> quit
>8395	PtrMemberAccess	core -> quit
>8396	Identifier	quit
>8397	Identifier	core
>8402	FunctionDef	AnimationEditor 
>8403	ParameterList	 
>8404	ReturnType	void
>8405	CompoundStatement	 
>8406	IfStatement	if ( ! core -> getShiftState ( ) )
>8407	CompoundStatement	 
>8408	ExpressionStatement	 
>8409	CallExpression	rebuildKeyframeWidgets ( )
>8410	ArgumentList	 
>8411	Callee	rebuildKeyframeWidgets
>8412	Identifier	rebuildKeyframeWidgets
>8413	ExpressionStatement	 
>8414	AssignmentExpr	currentKey = 0
>8415	PrimaryExpression	0
>8416	Identifier	currentKey
>8417	ExpressionStatement	 
>8418	CallExpression	editSprite -> nextAnimation ( )
>8419	ArgumentList	 
>8420	Callee	editSprite -> nextAnimation
>8421	PtrMemberAccess	editSprite -> nextAnimation
>8422	Identifier	nextAnimation
>8423	Identifier	editSprite
>8424	Condition	 
>8425	UnaryOp	! core -> getShiftState ( )
>8426	CallExpression	core -> getShiftState ( )
>8427	ArgumentList	 
>8428	Callee	core -> getShiftState
>8429	PtrMemberAccess	core -> getShiftState
>8430	Identifier	getShiftState
>8431	Identifier	core
>8432	UnaryOperator	!
>8433	IfStatement	if ( dsq -> isNested ( ) )
>8434	ReturnStatement	 
>8435	Condition	 
>8436	CallExpression	dsq -> isNested ( )
>8437	ArgumentList	 
>8438	Callee	dsq -> isNested
>8439	PtrMemberAccess	dsq -> isNested
>8440	Identifier	isNested
>8441	Identifier	dsq
>8453	FunctionDef	AnimationEditor 
>8454	ParameterList	 
>8455	ReturnType	void
>8456	CompoundStatement	 
>8457	IfStatement	if ( ! core -> getShiftState ( ) )
>8458	CompoundStatement	 
>8459	ExpressionStatement	 
>8460	CallExpression	rebuildKeyframeWidgets ( )
>8461	ArgumentList	 
>8462	Callee	rebuildKeyframeWidgets
>8463	Identifier	rebuildKeyframeWidgets
>8464	ExpressionStatement	 
>8465	AssignmentExpr	currentKey = 0
>8466	PrimaryExpression	0
>8467	Identifier	currentKey
>8468	ExpressionStatement	 
>8469	CallExpression	editSprite -> prevAnimation ( )
>8470	ArgumentList	 
>8471	Callee	editSprite -> prevAnimation
>8472	PtrMemberAccess	editSprite -> prevAnimation
>8473	Identifier	prevAnimation
>8474	Identifier	editSprite
>8475	Condition	 
>8476	UnaryOp	! core -> getShiftState ( )
>8477	CallExpression	core -> getShiftState ( )
>8478	ArgumentList	 
>8479	Callee	core -> getShiftState
>8480	PtrMemberAccess	core -> getShiftState
>8481	Identifier	getShiftState
>8482	Identifier	core
>8483	UnaryOperator	!
>8484	IfStatement	if ( dsq -> isNested ( ) )
>8485	ReturnStatement	 
>8486	Condition	 
>8487	CallExpression	dsq -> isNested ( )
>8488	ArgumentList	 
>8489	Callee	dsq -> isNested
>8490	PtrMemberAccess	dsq -> isNested
>8491	Identifier	isNested
>8492	Identifier	dsq
>8504	FunctionDef	AnimationEditor 
>8505	ParameterList	 
>8506	ReturnType	void
>8507	CompoundStatement	 
>8508	IfStatement	if ( a )
>8509	CompoundStatement	 
>8510	ExpressionStatement	 
>8511	CallExpression	rebuildKeyframeWidgets ( )
>8512	ArgumentList	 
>8513	Callee	rebuildKeyframeWidgets
>8514	Identifier	rebuildKeyframeWidgets
>8515	ExpressionStatement	 
>8516	CallExpression	a -> reverse ( )
>8517	ArgumentList	 
>8518	Callee	a -> reverse
>8519	PtrMemberAccess	a -> reverse
>8520	Identifier	reverse
>8521	Identifier	a
>8522	ExpressionStatement	 
>8523	CallExpression	debugLog ( \"calling reverse anim\" )
>8524	ArgumentList	\"calling reverse anim\"
>8525	Argument	\"calling reverse anim\"
>8526	PrimaryExpression	\"calling reverse anim\"
>8527	Callee	debugLog
>8528	Identifier	debugLog
>8529	Condition	 
>8530	Identifier	a
>8531	IdentifierDeclStatement	 
>8532	IdentifierDecl	* a = editSprite -> getCurrentAnimation ( )
>8533	AssignmentExpr	* a = editSprite -> getCurrentAnimation ( )
>8534	CallExpression	editSprite -> getCurrentAnimation ( )
>8535	ArgumentList	 
>8536	Callee	editSprite -> getCurrentAnimation
>8537	PtrMemberAccess	editSprite -> getCurrentAnimation
>8538	Identifier	getCurrentAnimation
>8539	Identifier	editSprite
>8540	Identifier	a
>8541	Identifier	a
>8542	IdentifierDeclType	Animation *
>8543	IfStatement	if ( dsq -> isNested ( ) )
>8544	ReturnStatement	 
>8545	Condition	 
>8546	CallExpression	dsq -> isNested ( )
>8547	ArgumentList	 
>8548	Callee	dsq -> isNested
>8549	PtrMemberAccess	dsq -> isNested
>8550	Identifier	isNested
>8551	Identifier	dsq
>8562	FunctionDef	AnimationEditor 
>8563	ParameterList	 
>8564	ReturnType	void
>8565	CompoundStatement	 
>8566	ExpressionStatement	 
>8567	CallExpression	loadFile ( )
>8568	ArgumentList	 
>8569	Callee	loadFile
>8570	Identifier	loadFile
>8571	ExpressionStatement	 
>8572	CallExpression	SkeletalSprite 
>8573	ArgumentList	 
>8574	Callee	SkeletalSprite 
>8575	Identifier	SkeletalSprite 
>8576	ExpressionStatement	 
>8577	AssignmentExpr	this -> editingFile = file
>8578	Identifier	file
>8579	PtrMemberAccess	this -> editingFile
>8580	Identifier	editingFile
>8581	Identifier	this
>8582	IfStatement	if ( file . empty ( ) )
>8583	ReturnStatement	 
>8584	Condition	 
>8585	CallExpression	file . empty ( )
>8586	ArgumentList	 
>8587	Callee	file . empty
>8588	MemberAccess	file . empty
>8589	Identifier	empty
>8590	Identifier	file
>8591	IdentifierDeclStatement	 
>8592	IdentifierDecl	file = dsq -> getUserInputString ( \"Enter anim file to load
>8593	AssignmentExpr	file = dsq -> getUserInputString ( \"Enter anim file to load
>8594	CallExpression	dsq -> getUserInputString ( \"Enter anim file to load
>8595	ArgumentList	\"Enter anim file to load
>8596	Argument	\"Enter anim file to load
>8597	PrimaryExpression	\"Enter anim file to load
>8598	Callee	dsq -> getUserInputString
>8599	PtrMemberAccess	dsq -> getUserInputString
>8600	Identifier	getUserInputString
>8601	Identifier	dsq
>8602	Identifier	file
>8603	Identifier	file
>8604	IdentifierDeclType	std 
>8605	IfStatement	if ( dsq -> isNested ( ) )
>8606	ReturnStatement	 
>8607	Condition	 
>8608	CallExpression	dsq -> isNested ( )
>8609	ArgumentList	 
>8610	Callee	dsq -> isNested
>8611	PtrMemberAccess	dsq -> isNested
>8612	Identifier	isNested
>8613	Identifier	dsq
>8626	FunctionDef	AnimationEditor 
>8627	ParameterList	 
>8628	ReturnType	void
>8629	CompoundStatement	 
>8630	ExpressionStatement	 
>8631	CallExpression	editSprite -> loadSkin ( file )
>8632	ArgumentList	file
>8633	Argument	file
>8634	Identifier	file
>8635	Callee	editSprite -> loadSkin
>8636	PtrMemberAccess	editSprite -> loadSkin
>8637	Identifier	loadSkin
>8638	Identifier	editSprite
>8639	ExpressionStatement	 
>8640	CallExpression	SkeletalSprite 
>8641	ArgumentList	 
>8642	Callee	SkeletalSprite 
>8643	Identifier	SkeletalSprite 
>8644	IfStatement	if ( file . empty ( ) )
>8645	ReturnStatement	 
>8646	Condition	 
>8647	CallExpression	file . empty ( )
>8648	ArgumentList	 
>8649	Callee	file . empty
>8650	MemberAccess	file . empty
>8651	Identifier	empty
>8652	Identifier	file
>8653	IdentifierDeclStatement	 
>8654	IdentifierDecl	file = dsq -> getUserInputString ( \"Enter skin file to load
>8655	AssignmentExpr	file = dsq -> getUserInputString ( \"Enter skin file to load
>8656	CallExpression	dsq -> getUserInputString ( \"Enter skin file to load
>8657	ArgumentList	\"Enter skin file to load
>8658	Argument	\"Enter skin file to load
>8659	PrimaryExpression	\"Enter skin file to load
>8660	Callee	dsq -> getUserInputString
>8661	PtrMemberAccess	dsq -> getUserInputString
>8662	Identifier	getUserInputString
>8663	Identifier	dsq
>8664	Identifier	file
>8665	Identifier	file
>8666	IdentifierDeclType	std 
>8667	IfStatement	if ( dsq -> isNested ( ) )
>8668	ReturnStatement	 
>8669	Condition	 
>8670	CallExpression	dsq -> isNested ( )
>8671	ArgumentList	 
>8672	Callee	dsq -> isNested
>8673	PtrMemberAccess	dsq -> isNested
>8674	Identifier	isNested
>8675	Identifier	dsq
>8686	FunctionDef	AnimationEditor 
>8687	ParameterList	float dt
>8688	Parameter	 
>8689	Identifier	dt
>8690	ParameterType	float
>8691	ReturnType	void
>8692	CompoundStatement	 
>8693	ForStatement	for ( int i = 0 ; i < keyframeWidgets . size ( ) ; i ++ )
>8694	CompoundStatement	 
>8695	IfStatement	if ( s )
>8696	ElseStatement	else
>8697	IfStatement	if ( ! s && KeyframeWidget 
>8698	CompoundStatement	 
>8699	ExpressionStatement	 
>8700	AssignmentExpr	s = 1
>8701	PrimaryExpression	1
>8702	Identifier	s
>8703	Condition	 
>8704	AndExpression	! s && KeyframeWidget 
>8705	EqualityExpression	KeyframeWidget 
>8706	Identifier	w
>8707	Identifier	KeyframeWidget 
>8708	UnaryOp	! s
>8709	Identifier	s
>8710	UnaryOperator	!
>8711	CompoundStatement	 
>8712	ExpressionStatement	 
>8713	AssignmentExpr	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( w -> key ) -> t += dt
>8714	Identifier	dt
>8715	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( w -> key ) -> t
>8716	Identifier	t
>8717	CallExpression	editSprite -> getCurrentAnimation ( ) -> getKeyframe ( w -> key )
>8718	ArgumentList	w -> key
>8719	Argument	w -> key
>8720	PtrMemberAccess	w -> key
>8721	Identifier	key
>8722	Identifier	w
>8723	Callee	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>8724	PtrMemberAccess	editSprite -> getCurrentAnimation ( ) -> getKeyframe
>8725	Identifier	getKeyframe
>8726	CallExpression	editSprite -> getCurrentAnimation ( )
>8727	ArgumentList	 
>8728	Callee	editSprite -> getCurrentAnimation
>8729	PtrMemberAccess	editSprite -> getCurrentAnimation
>8730	Identifier	getCurrentAnimation
>8731	Identifier	editSprite
>8732	Condition	 
>8733	Identifier	s
>8734	ExpressionStatement	 
>8735	AssignmentExpr	w = keyframeWidgets [ i ]
>8736	ArrayIndexing	keyframeWidgets [ i ]
>8737	Identifier	i
>8738	Identifier	keyframeWidgets
>8739	Identifier	w
>8740	IncDecOp	 
>8741	IncDec	++
>8742	Identifier	i
>8743	Condition	 
>8744	RelationalExpression	i < keyframeWidgets . size ( )
>8745	CallExpression	keyframeWidgets . size ( )
>8746	ArgumentList	 
>8747	Callee	keyframeWidgets . size
>8748	MemberAccess	keyframeWidgets . size
>8749	Identifier	size
>8750	Identifier	keyframeWidgets
>8751	Identifier	i
>8752	ForInit	 
>8753	IdentifierDeclStatement	int i = 0 ;
>8754	IdentifierDecl	i = 0
>8755	AssignmentExpr	i = 0
>8756	PrimaryExpression	0
>8757	Identifier	i
>8758	Identifier	i
>8759	IdentifierDeclType	int
>8760	IdentifierDeclStatement	 
>8761	IdentifierDecl	* w = 0
>8762	AssignmentExpr	* w = 0
>8763	PrimaryExpression	0
>8764	Identifier	w
>8765	Identifier	w
>8766	IdentifierDeclType	KeyframeWidget *
>8767	IdentifierDeclStatement	 
>8768	IdentifierDecl	s = 0
>8769	AssignmentExpr	s = 0
>8770	PrimaryExpression	0
>8771	Identifier	s
>8772	Identifier	s
>8773	IdentifierDeclType	int
>8774	IfStatement	if ( dsq -> isNested ( ) )
>8775	ReturnStatement	 
>8776	Condition	 
>8777	CallExpression	dsq -> isNested ( )
>8778	ArgumentList	 
>8779	Callee	dsq -> isNested
>8780	PtrMemberAccess	dsq -> isNested
>8781	Identifier	isNested
>8782	Identifier	dsq
>8810	FunctionDef	AnimationEditor 
>8811	ParameterList	 
>8812	ReturnType	void
>8813	CompoundStatement	 
>8814	ExpressionStatement	 
>8815	CallExpression	updateRenderBorders ( )
>8816	ArgumentList	 
>8817	Callee	updateRenderBorders
>8818	Identifier	updateRenderBorders
>8819	ExpressionStatement	 
>8820	AssignmentExpr	renderBorders = ! renderBorders
>8821	UnaryOp	! renderBorders
>8822	Identifier	renderBorders
>8823	UnaryOperator	!
>8824	Identifier	renderBorders
>8825	IfStatement	if ( dsq -> isNested ( ) )
>8826	ReturnStatement	 
>8827	Condition	 
>8828	CallExpression	dsq -> isNested ( )
>8829	ArgumentList	 
>8830	Callee	dsq -> isNested
>8831	PtrMemberAccess	dsq -> isNested
>8832	Identifier	isNested
>8833	Identifier	dsq
>8841	FunctionDef	AnimationEditor 
>8842	ParameterList	 
>8843	ReturnType	void
>8844	CompoundStatement	 
>8845	ForStatement	for ( size_t i = 0 ; i < editSprite -> bones . size ( ) ; ++ i )
>8846	CompoundStatement	 
>8847	ExpressionStatement	 
>8848	AssignmentExpr	editSprite -> bones [ i ] -> borderAlpha = 0.8f
>8849	PrimaryExpression	0.8f
>8850	PtrMemberAccess	editSprite -> bones [ i ] -> borderAlpha
>8851	Identifier	borderAlpha
>8852	ArrayIndexing	editSprite -> bones [ i ]
>8853	Identifier	i
>8854	PtrMemberAccess	editSprite -> bones
>8855	Identifier	bones
>8856	Identifier	editSprite
>8857	ExpressionStatement	 
>8858	AssignmentExpr	editSprite -> bones [ i ] -> renderCenter = renderBorders
>8859	Identifier	renderBorders
>8860	PtrMemberAccess	editSprite -> bones [ i ] -> renderCenter
>8861	Identifier	renderCenter
>8862	ArrayIndexing	editSprite -> bones [ i ]
>8863	Identifier	i
>8864	PtrMemberAccess	editSprite -> bones
>8865	Identifier	bones
>8866	Identifier	editSprite
>8867	ExpressionStatement	 
>8868	AssignmentExpr	editSprite -> bones [ i ] -> renderBorder = renderBorders
>8869	Identifier	renderBorders
>8870	PtrMemberAccess	editSprite -> bones [ i ] -> renderBorder
>8871	Identifier	renderBorder
>8872	ArrayIndexing	editSprite -> bones [ i ]
>8873	Identifier	i
>8874	PtrMemberAccess	editSprite -> bones
>8875	Identifier	bones
>8876	Identifier	editSprite
>8877	UnaryExpression	 
>8878	Identifier	i
>8879	IncDec	++
>8880	Condition	 
>8881	RelationalExpression	i < editSprite -> bones . size ( )
>8882	CallExpression	editSprite -> bones . size ( )
>8883	ArgumentList	 
>8884	Callee	editSprite -> bones . size
>8885	MemberAccess	editSprite -> bones . size
>8886	Identifier	size
>8887	PtrMemberAccess	editSprite -> bones
>8888	Identifier	bones
>8889	Identifier	editSprite
>8890	Identifier	i
>8891	ForInit	 
>8892	IdentifierDeclStatement	size_t i = 0 ;
>8893	IdentifierDecl	i = 0
>8894	AssignmentExpr	i = 0
>8895	PrimaryExpression	0
>8896	Identifier	i
>8897	Identifier	i
>8898	IdentifierDeclType	size_t
>8899	IfStatement	if ( ! editSprite )
>8900	ReturnStatement	 
>8901	Condition	 
>8902	UnaryOp	! editSprite
>8903	Identifier	editSprite
>8904	UnaryOperator	!
>8923	FunctionDef	AnimationEditor 
>8924	ParameterList	 
>8925	ReturnType	void
>8926	CompoundStatement	 
>8927	IfStatement	if ( ! editingStrip )
>8928	ExpressionStatement	 
>8929	AssignmentExpr	editingBone = editSprite -> getSelectedBone ( mouseSelection )
>8930	CallExpression	editSprite -> getSelectedBone ( mouseSelection )
>8931	ArgumentList	mouseSelection
>8932	Argument	mouseSelection
>8933	Identifier	mouseSelection
>8934	Callee	editSprite -> getSelectedBone
>8935	PtrMemberAccess	editSprite -> getSelectedBone
>8936	Identifier	getSelectedBone
>8937	Identifier	editSprite
>8938	Identifier	editingBone
>8939	Condition	 
>8940	UnaryOp	! editingStrip
>8941	Identifier	editingStrip
>8942	UnaryOperator	!
>8952	FunctionDef	AnimationEditor 
>8953	ParameterList	 
>8954	ReturnType	void
>8955	CompoundStatement	 
>8956	ForStatement	for ( size_t i = 0 ; i < editSprite -> bones . size ( ) ; ++ i )
>8957	ExpressionStatement	 
>8958	AssignmentExpr	editSprite -> bones [ i ] -> renderQuad = true
>8959	Identifier	true
>8960	PtrMemberAccess	editSprite -> bones [ i ] -> renderQuad
>8961	Identifier	renderQuad
>8962	ArrayIndexing	editSprite -> bones [ i ]
>8963	Identifier	i
>8964	PtrMemberAccess	editSprite -> bones
>8965	Identifier	bones
>8966	Identifier	editSprite
>8967	UnaryExpression	 
>8968	Identifier	i
>8969	IncDec	++
>8970	Condition	 
>8971	RelationalExpression	i < editSprite -> bones . size ( )
>8972	CallExpression	editSprite -> bones . size ( )
>8973	ArgumentList	 
>8974	Callee	editSprite -> bones . size
>8975	MemberAccess	editSprite -> bones . size
>8976	Identifier	size
>8977	PtrMemberAccess	editSprite -> bones
>8978	Identifier	bones
>8979	Identifier	editSprite
>8980	Identifier	i
>8981	ForInit	 
>8982	IdentifierDeclStatement	size_t i = 0 ;
>8983	IdentifierDecl	i = 0
>8984	AssignmentExpr	i = 0
>8985	PrimaryExpression	0
>8986	Identifier	i
>8987	Identifier	i
>8988	IdentifierDeclType	size_t
>8989	IfStatement	if ( dsq -> isNested ( ) )
>8990	ReturnStatement	 
>8991	Condition	 
>8992	CallExpression	dsq -> isNested ( )
>8993	ArgumentList	 
>8994	Callee	dsq -> isNested
>8995	PtrMemberAccess	dsq -> isNested
>8996	Identifier	isNested
>8997	Identifier	dsq
>9017	FunctionDef	AnimationEditor 
>9018	ParameterList	 
>9019	ReturnType	void
>9020	CompoundStatement	 
>9021	ExpressionStatement	 
>9022	CallExpression	updateTimelineUnit ( )
>9023	ArgumentList	 
>9024	Callee	updateTimelineUnit
>9025	Identifier	updateTimelineUnit
>9026	ExpressionStatement	 
>9027	AssignmentExpr	TIMELINE_UNIT += TIMELINE_UNIT_STEP
>9028	Identifier	TIMELINE_UNIT_STEP
>9029	Identifier	TIMELINE_UNIT
>9030	IfStatement	if ( dsq -> isNested ( ) )
>9031	ReturnStatement	 
>9032	Condition	 
>9033	CallExpression	dsq -> isNested ( )
>9034	ArgumentList	 
>9035	Callee	dsq -> isNested
>9036	PtrMemberAccess	dsq -> isNested
>9037	Identifier	isNested
>9038	Identifier	dsq
>9047	FunctionDef	AnimationEditor 
>9048	ParameterList	 
>9049	ReturnType	void
>9050	CompoundStatement	 
>9051	ExpressionStatement	 
>9052	CallExpression	updateTimelineUnit ( )
>9053	ArgumentList	 
>9054	Callee	updateTimelineUnit
>9055	Identifier	updateTimelineUnit
>9056	IfStatement	if ( t >= TIMELINE_UNIT_STEP )
>9057	ExpressionStatement	 
>9058	AssignmentExpr	TIMELINE_UNIT = t
>9059	Identifier	t
>9060	Identifier	TIMELINE_UNIT
>9061	Condition	 
>9062	RelationalExpression	t >= TIMELINE_UNIT_STEP
>9063	Identifier	TIMELINE_UNIT_STEP
>9064	Identifier	t
>9065	IdentifierDeclStatement	 
>9066	IdentifierDecl	t = TIMELINE_UNIT - TIMELINE_UNIT_STEP
>9067	AssignmentExpr	t = TIMELINE_UNIT - TIMELINE_UNIT_STEP
>9068	AdditiveExpression	TIMELINE_UNIT - TIMELINE_UNIT_STEP
>9069	Identifier	TIMELINE_UNIT_STEP
>9070	Identifier	TIMELINE_UNIT
>9071	Identifier	t
>9072	Identifier	t
>9073	IdentifierDeclType	float
>9074	IfStatement	if ( dsq -> isNested ( ) )
>9075	ReturnStatement	 
>9076	Condition	 
>9077	CallExpression	dsq -> isNested ( )
>9078	ArgumentList	 
>9079	Callee	dsq -> isNested
>9080	PtrMemberAccess	dsq -> isNested
>9081	Identifier	isNested
>9082	Identifier	dsq
>9092	FunctionDef	AnimationEditor 
>9093	ParameterList	 
>9094	ReturnType	void
>9095	CompoundStatement	 
>9096	ExpressionStatement	 
>9097	CallExpression	unitsize -> setText ( os . str ( ) )
>9098	ArgumentList	os . str ( )
>9099	Argument	os . str ( )
>9100	CallExpression	os . str ( )
>9101	ArgumentList	 
>9102	Callee	os . str
>9103	MemberAccess	os . str
>9104	Identifier	str
>9105	Identifier	os
>9106	Callee	unitsize -> setText
>9107	PtrMemberAccess	unitsize -> setText
>9108	Identifier	setText
>9109	Identifier	unitsize
>9110	ExpressionStatement	 
>9111	ShiftExpression	os << \"Unit
>9112	ShiftExpression	\"Unit
>9113	Identifier	TIMELINE_UNIT
>9114	PrimaryExpression	\"Unit
>9115	Identifier	os
>9116	IdentifierDeclStatement	 
>9117	IdentifierDecl	os
>9118	Identifier	os
>9119	IdentifierDeclType	std 
>9126	FunctionDef	AnimationEditor 
>9127	ParameterList	 
>9128	ReturnType	void
>9129	CompoundStatement	 
>9130	ExpressionStatement	 
>9131	CallExpression	updateTimelineGrid ( )
>9132	ArgumentList	 
>9133	Callee	updateTimelineGrid
>9134	Identifier	updateTimelineGrid
>9135	ExpressionStatement	 
>9136	IncDecOp	TIMELINE_GRIDSIZE ++
>9137	IncDec	++
>9138	Identifier	TIMELINE_GRIDSIZE
>9139	IfStatement	if ( dsq -> isNested ( ) )
>9140	ReturnStatement	 
>9141	Condition	 
>9142	CallExpression	dsq -> isNested ( )
>9143	ArgumentList	 
>9144	Callee	dsq -> isNested
>9145	PtrMemberAccess	dsq -> isNested
>9146	Identifier	isNested
>9147	Identifier	dsq
>9155	FunctionDef	AnimationEditor 
>9156	ParameterList	 
>9157	ReturnType	void
>9158	CompoundStatement	 
>9159	ExpressionStatement	 
>9160	CallExpression	updateTimelineGrid ( )
>9161	ArgumentList	 
>9162	Callee	updateTimelineGrid
>9163	Identifier	updateTimelineGrid
>9164	IfStatement	if ( t > 0 )
>9165	ExpressionStatement	 
>9166	AssignmentExpr	TIMELINE_GRIDSIZE = t
>9167	Identifier	t
>9168	Identifier	TIMELINE_GRIDSIZE
>9169	Condition	 
>9170	RelationalExpression	t > 0
>9171	PrimaryExpression	0
>9172	Identifier	t
>9173	IdentifierDeclStatement	 
>9174	IdentifierDecl	t = TIMELINE_GRIDSIZE - 1
>9175	AssignmentExpr	t = TIMELINE_GRIDSIZE - 1
>9176	AdditiveExpression	TIMELINE_GRIDSIZE - 1
>9177	PrimaryExpression	1
>9178	Identifier	TIMELINE_GRIDSIZE
>9179	Identifier	t
>9180	Identifier	t
>9181	IdentifierDeclType	int
>9182	IfStatement	if ( dsq -> isNested ( ) )
>9183	ReturnStatement	 
>9184	Condition	 
>9185	CallExpression	dsq -> isNested ( )
>9186	ArgumentList	 
>9187	Callee	dsq -> isNested
>9188	PtrMemberAccess	dsq -> isNested
>9189	Identifier	isNested
>9190	Identifier	dsq
>9199	FunctionDef	AnimationEditor 
>9200	ParameterList	 
>9201	ReturnType	void
>9202	CompoundStatement	 
>9203	ExpressionStatement	 
>9204	CallExpression	gridsize -> setText ( os . str ( ) )
>9205	ArgumentList	os . str ( )
>9206	Argument	os . str ( )
>9207	CallExpression	os . str ( )
>9208	ArgumentList	 
>9209	Callee	os . str
>9210	MemberAccess	os . str
>9211	Identifier	str
>9212	Identifier	os
>9213	Callee	gridsize -> setText
>9214	PtrMemberAccess	gridsize -> setText
>9215	Identifier	setText
>9216	Identifier	gridsize
>9217	ExpressionStatement	 
>9218	ShiftExpression	os << \"Grid
>9219	ShiftExpression	\"Grid
>9220	Identifier	TIMELINE_GRIDSIZE
>9221	PrimaryExpression	\"Grid
>9222	Identifier	os
>9223	IdentifierDeclStatement	 
>9224	IdentifierDecl	os
>9225	Identifier	os
>9226	IdentifierDeclType	std 
<12=15,14,13
<15=82,75,62,21,16
<16=17
<17=19,18
<19=20
<21=54,50,47,22
<22=34,23
<23=24
<24=32,25
<25=30,28,26
<26=27
<28=29
<30=31
<32=33
<34=35
<35=45,36
<36=43,39,37
<37=38
<39=40
<40=42,41
<43=44
<45=46
<47=49,48
<50=51
<51=53,52
<54=55
<55=56
<56=61,60,57
<57=59,58
<62=63
<63=73,64
<64=71,69,67,65
<65=66
<67=68
<69=70
<71=72
<73=74
<75=76
<76=80,77
<77=78
<78=79
<80=81
<82=83
<83=87,84
<84=85
<85=86
<87=88
<105=108,107,106
<108=200,193,175,157,139,121,109
<109=119,110
<110=111
<111=115,112
<112=113
<113=114
<115=116
<116=118,117
<119=120
<121=133,122
<122=127,123
<123=124
<124=126,125
<127=128
<128=130,129
<130=132,131
<133=134
<134=136,135
<136=138,137
<139=151,140
<140=145,141
<141=142
<142=144,143
<145=146
<146=148,147
<148=150,149
<151=152
<152=154,153
<154=156,155
<157=169,158
<158=163,159
<159=160
<160=162,161
<163=164
<164=166,165
<166=168,167
<169=170
<170=172,171
<172=174,173
<175=187,176
<176=181,177
<177=178
<178=180,179
<181=182
<182=184,183
<184=186,185
<187=188
<188=190,189
<190=192,191
<193=194
<194=199,198,195
<195=197,196
<200=201
<201=210,209,202
<202=208,203
<203=205,204
<205=207,206
<224=229,225
<225=226
<226=228,227
<229=297,288,280,265,256,247,241,230
<230=231
<231=235,232
<232=233
<233=234
<235=236
<236=238,237
<238=240,239
<241=242
<242=244,243
<244=246,245
<247=248
<248=254,249
<249=252,250
<250=251
<252=253
<254=255
<256=257
<257=261,258
<258=259
<259=260
<261=262
<262=264,263
<265=266
<266=277,267
<267=275,268
<268=273,269
<269=270
<270=272,271
<273=274
<275=276
<277=279,278
<280=281
<281=287,282
<282=286,283
<283=285,284
<288=289
<289=295,290
<290=293,291
<291=292
<293=294
<295=296
<297=298
<298=302,299
<299=300
<300=301
<302=303
<322=325,324,323
<325=326
<326=355,327
<327=328
<328=351,329
<329=338,336,334,332,330
<330=331
<332=333
<334=335
<336=337
<338=339
<339=349,340
<340=343,341
<341=342
<343=344
<344=346,345
<346=348,347
<349=350
<351=352
<352=354,353
<355=356
<356=363,357
<357=359,358
<359=360
<360=362,361
<371=374,373,372
<374=375
<375=404,376
<376=377
<377=400,378
<378=387,385,383,381,379
<379=380
<381=382
<383=384
<385=386
<387=388
<388=398,389
<389=392,390
<390=391
<392=393
<393=395,394
<395=397,396
<398=399
<400=401
<401=403,402
<404=405
<405=412,406
<406=408,407
<408=409
<409=411,410
<420=426,425,421
<421=422
<422=424,423
<426=817,802,719,684,680,676,662,623,461,433,427
<427=428
<428=430,429
<430=432,431
<433=447,434
<434=443,436,435
<436=437
<437=439,438
<439=440
<440=442,441
<443=444
<444=446,445
<447=448
<448=458,449
<449=457,450
<450=452,451
<452=454,453
<454=456,455
<458=460,459
<461=619,500,462
<462=463
<463=464
<464=465
<465=495,466
<466=470,467
<467=469,468
<470=476,471
<471=475,472
<472=474,473
<476=478,477
<478=484,479
<479=480
<480=481
<481=483,482
<484=485
<485=487,486
<487=489,488
<489=490
<490=492,491
<492=494,493
<495=497,496
<497=499,498
<500=594,563,543,521,501
<501=514,502
<502=503
<503=504
<504=510,505
<505=506
<506=507
<507=509,508
<510=511
<511=513,512
<514=515
<515=517,516
<517=518
<518=520,519
<521=522
<522=524,523
<524=526,525
<526=532,527
<527=528
<528=529
<529=531,530
<532=533
<533=535,534
<535=537,536
<537=538
<538=540,539
<540=542,541
<543=544
<544=562,561,545
<545=560,546
<546=548,547
<548=558,549
<549=550
<550=551
<551=553,552
<553=555,554
<555=557,556
<558=559
<563=564
<564=589,565
<565=569,566
<566=568,567
<569=571,570
<571=587,572
<572=573
<573=574
<574=576,575
<576=580,577
<577=579,578
<580=582,581
<582=584,583
<584=586,585
<587=588
<589=591,590
<591=593,592
<594=595
<595=618,617,596
<596=616,597
<597=599,598
<599=605,600
<600=601
<601=602
<602=604,603
<605=606
<606=608,607
<608=610,609
<610=611
<611=613,612
<613=615,614
<619=620
<620=622,621
<623=647,624
<624=625
<625=639,626
<626=635,627
<627=628
<628=632,629
<629=631,630
<632=634,633
<635=636
<636=638,637
<639=640
<640=642,641
<642=644,643
<644=646,645
<647=648
<648=659,649
<649=657,650
<650=651
<651=652
<652=654,653
<654=656,655
<657=658
<659=661,660
<662=663
<663=672,664
<664=665
<665=666
<666=668,667
<668=669
<669=671,670
<672=673
<673=675,674
<676=677
<677=679,678
<680=681
<681=683,682
<684=710,685
<685=686
<686=702,694,687
<687=688
<688=689
<689=691,690
<691=693,692
<694=695
<695=699,696
<696=698,697
<699=701,700
<702=703
<703=707,704
<704=706,705
<707=709,708
<710=711
<711=718,712
<712=714,713
<714=715
<715=717,716
<719=782,720
<720=781,768,767,766,753,752,751,738,737,735,722,721
<722=723
<723=734,724
<724=732,725
<725=730,728,726
<726=727
<728=729
<730=731
<732=733
<735=736
<738=739
<739=750,740
<740=748,741
<741=746,744,742
<742=743
<744=745
<746=747
<748=749
<753=754
<754=765,755
<755=763,756
<756=761,759,757
<757=758
<759=760
<761=762
<763=764
<768=769
<769=780,770
<770=778,771
<771=776,774,772
<772=773
<774=775
<776=777
<778=779
<782=783
<783=785,784
<785=791,786
<786=787
<787=788
<788=790,789
<791=792
<792=794,793
<794=796,795
<796=797
<797=799,798
<799=801,800
<802=804,803
<804=805
<805=814,806
<806=808,807
<808=809
<809=811,810
<811=813,812
<814=816,815
<817=818
<818=822,819
<819=820
<820=821
<822=823
<879=882,881,880
<882=1023,883
<883=1016,937,884
<884=885
<885=932,905,899,886
<886=893,887
<887=888
<888=890,889
<890=892,891
<893=894
<894=896,895
<896=898,897
<899=900
<900=902,901
<902=904,903
<905=906
<906=931,930,907
<907=929,908
<908=928,909
<909=911,910
<911=917,912
<912=913
<913=914
<914=916,915
<917=918
<918=920,919
<920=922,921
<922=923
<923=925,924
<925=927,926
<932=933
<933=935,934
<935=936
<937=1002,938
<938=993,939
<939=988,976,964,949,940
<940=941
<941=945,942
<942=943
<943=944
<945=946
<946=948,947
<949=960,950
<950=951
<951=952
<952=956,953
<953=954
<954=955
<956=957
<957=959,958
<960=961
<961=963,962
<964=965
<965=975,974,966
<966=973,967
<967=969,968
<969=970
<970=972,971
<976=977
<977=987,986,978
<978=985,979
<979=981,980
<981=982
<982=984,983
<988=989
<989=991,990
<991=992
<993=994
<994=996,995
<996=998,997
<998=999
<999=1001,1000
<1002=1003
<1003=1015,1014,1004
<1004=1013,1005
<1005=1007,1006
<1007=1008
<1008=1010,1009
<1010=1012,1011
<1016=1017
<1017=1019,1018
<1019=1020
<1020=1022,1021
<1023=1025,1024
<1025=1026
<1026=1028,1027
<1028=1029
<1029=1031,1030
<1068=1070,1069
<1070=1071
<1071=1072
<1072=1078,1073
<1073=1076,1074
<1074=1075
<1076=1077
<1078=1079
<1084=1087,1086,1085
<1087=1115,1088
<1088=1108,1103,1089
<1089=1090
<1090=1091
<1091=1100,1092
<1092=1098,1093
<1093=1096,1094
<1094=1095
<1096=1097
<1098=1099
<1100=1102,1101
<1103=1104
<1104=1106,1105
<1106=1107
<1108=1109
<1109=1111,1110
<1111=1112
<1112=1114,1113
<1115=1117,1116
<1117=1118
<1118=1120,1119
<1120=1121
<1121=1123,1122
<1137=1140,1139,1138
<1140=3598,3585,3581,3577,3573,3569,3565,3561,3556,3552,3548,3544,3540,3534,3525,3512,3494,3476,3458,3440,3422,3404,3386,3368,3350,3332,3314,3296,3278,3260,3242,3224,3206,3188,3170,3152,3134,3116,3098,3080,3062,3044,3026,3008,2990,2972,2954,2936,2918,2900,2882,2864,2855,2846,2837,2828,2819,2818,2817,2816,2815,2814,2812,2777,2768,2767,2766,2765,2763,2750,2737,2708,2699,2688,2675,2664,2646,2637,2626,2613,2602,2584,2575,2564,2551,2540,2522,2513,2502,2489,2478,2460,2451,2440,2427,2416,2398,2389,2378,2367,2354,2336,2327,2316,2305,2292,2274,2265,2254,2243,2230,2212,2203,2192,2181,2168,2150,2141,2130,2119,2106,2088,2079,2068,2057,2044,2026,2017,2006,1995,1982,1964,1955,1944,1933,1920,1902,1893,1882,1871,1858,1840,1831,1825,1812,1803,1792,1781,1768,1750,1741,1730,1719,1704,1686,1677,1671,1658,1649,1638,1627,1141,1146,1151,1162,1169,1174,1189,1198,1207,1220,1227,1236,1245,1258,1262,1271,1280,1293,1297,1306,1319,1330,1332,1333,1334,1335,1336,1337,1346,1364,1377,1388,1399,1408,1426,1439,1450,1461,1470,1488,1501,1512,1523,1532,1550,1565,1576,1587,1596,1614
<1141=1142
<1142=1144,1143
<1144=1145
<1146=1147
<1147=1149,1148
<1149=1150
<1151=1152
<1152=1158,1153
<1153=1156,1154
<1154=1155
<1156=1157
<1158=1159
<1159=1161,1160
<1162=1163
<1163=1165,1164
<1165=1166
<1166=1168,1167
<1169=1170
<1170=1172,1171
<1172=1173
<1174=1175
<1175=1181,1176
<1176=1179,1177
<1177=1178
<1179=1180
<1181=1182
<1182=1184,1183
<1184=1186,1185
<1186=1188,1187
<1189=1190
<1190=1194,1191
<1191=1192
<1192=1193
<1194=1195
<1195=1197,1196
<1198=1199
<1199=1205,1200
<1200=1203,1201
<1201=1202
<1203=1204
<1205=1206
<1207=1208
<1208=1217,1209
<1209=1215,1210
<1210=1213,1211
<1211=1212
<1213=1214
<1215=1216
<1217=1219,1218
<1220=1221
<1221=1226,1225,1222
<1222=1224,1223
<1227=1228
<1228=1234,1229
<1229=1232,1230
<1230=1231
<1232=1233
<1234=1235
<1236=1237
<1237=1241,1238
<1238=1239
<1239=1240
<1241=1242
<1242=1244,1243
<1245=1246
<1246=1255,1247
<1247=1253,1248
<1248=1251,1249
<1249=1250
<1251=1252
<1253=1254
<1255=1257,1256
<1258=1259
<1259=1261,1260
<1262=1263
<1263=1269,1264
<1264=1267,1265
<1265=1266
<1267=1268
<1269=1270
<1271=1272
<1272=1276,1273
<1273=1274
<1274=1275
<1276=1277
<1277=1279,1278
<1280=1281
<1281=1290,1282
<1282=1288,1283
<1283=1286,1284
<1284=1285
<1286=1287
<1288=1289
<1290=1292,1291
<1293=1294
<1294=1296,1295
<1297=1298
<1298=1304,1299
<1299=1302,1300
<1300=1301
<1302=1303
<1304=1305
<1306=1307
<1307=1316,1308
<1308=1314,1309
<1309=1312,1310
<1310=1311
<1312=1313
<1314=1315
<1316=1318,1317
<1319=1320
<1320=1326,1321
<1321=1324,1322
<1322=1323
<1324=1325
<1326=1327
<1327=1329,1328
<1330=1331
<1337=1338
<1338=1344,1339
<1339=1342,1340
<1340=1341
<1342=1343
<1344=1345
<1346=1347
<1347=1358,1348
<1348=1349
<1349=1350
<1350=1356,1351
<1351=1354,1352
<1352=1353
<1354=1355
<1356=1357
<1358=1359
<1359=1361,1360
<1361=1363,1362
<1364=1365
<1365=1374,1366
<1366=1372,1367
<1367=1370,1368
<1368=1369
<1370=1371
<1372=1373
<1374=1376,1375
<1377=1378
<1378=1382,1379
<1379=1380
<1380=1381
<1382=1383
<1383=1385,1384
<1385=1387,1386
<1388=1389
<1389=1398,1397,1390
<1390=1396,1391
<1391=1395,1392
<1392=1394,1393
<1399=1400
<1400=1406,1401
<1401=1404,1402
<1402=1403
<1404=1405
<1406=1407
<1408=1409
<1409=1420,1410
<1410=1411
<1411=1412
<1412=1418,1413
<1413=1416,1414
<1414=1415
<1416=1417
<1418=1419
<1420=1421
<1421=1423,1422
<1423=1425,1424
<1426=1427
<1427=1436,1428
<1428=1434,1429
<1429=1432,1430
<1430=1431
<1432=1433
<1434=1435
<1436=1438,1437
<1439=1440
<1440=1444,1441
<1441=1442
<1442=1443
<1444=1445
<1445=1447,1446
<1447=1449,1448
<1450=1451
<1451=1460,1459,1452
<1452=1458,1453
<1453=1457,1454
<1454=1456,1455
<1461=1462
<1462=1468,1463
<1463=1466,1464
<1464=1465
<1466=1467
<1468=1469
<1470=1471
<1471=1482,1472
<1472=1473
<1473=1474
<1474=1480,1475
<1475=1478,1476
<1476=1477
<1478=1479
<1480=1481
<1482=1483
<1483=1485,1484
<1485=1487,1486
<1488=1489
<1489=1498,1490
<1490=1496,1491
<1491=1494,1492
<1492=1493
<1494=1495
<1496=1497
<1498=1500,1499
<1501=1502
<1502=1506,1503
<1503=1504
<1504=1505
<1506=1507
<1507=1509,1508
<1509=1511,1510
<1512=1513
<1513=1522,1521,1514
<1514=1520,1515
<1515=1519,1516
<1516=1518,1517
<1523=1524
<1524=1530,1525
<1525=1528,1526
<1526=1527
<1528=1529
<1530=1531
<1532=1533
<1533=1544,1534
<1534=1535
<1535=1536
<1536=1542,1537
<1537=1540,1538
<1538=1539
<1540=1541
<1542=1543
<1544=1545
<1545=1547,1546
<1547=1549,1548
<1550=1551
<1551=1562,1552
<1552=1560,1553
<1553=1556,1554
<1554=1555
<1556=1557
<1557=1559,1558
<1560=1561
<1562=1564,1563
<1565=1566
<1566=1570,1567
<1567=1568
<1568=1569
<1570=1571
<1571=1573,1572
<1573=1575,1574
<1576=1577
<1577=1586,1585,1578
<1578=1584,1579
<1579=1583,1580
<1580=1582,1581
<1587=1588
<1588=1594,1589
<1589=1592,1590
<1590=1591
<1592=1593
<1594=1595
<1596=1597
<1597=1608,1598
<1598=1599
<1599=1600
<1600=1606,1601
<1601=1604,1602
<1602=1603
<1604=1605
<1606=1607
<1608=1609
<1609=1611,1610
<1611=1613,1612
<1614=1615
<1615=1624,1616
<1616=1622,1617
<1617=1620,1618
<1618=1619
<1620=1621
<1622=1623
<1624=1626,1625
<1627=1628
<1628=1632,1629
<1629=1630
<1630=1631
<1632=1633
<1633=1635,1634
<1635=1637,1636
<1638=1639
<1639=1648,1647,1640
<1640=1646,1641
<1641=1645,1642
<1642=1644,1643
<1649=1650
<1650=1656,1651
<1651=1654,1652
<1652=1653
<1654=1655
<1656=1657
<1658=1659
<1659=1668,1660
<1660=1666,1661
<1661=1664,1662
<1662=1663
<1664=1665
<1666=1667
<1668=1670,1669
<1671=1672
<1672=1676,1673
<1673=1675,1674
<1677=1678
<1678=1684,1679
<1679=1682,1680
<1680=1681
<1682=1683
<1684=1685
<1686=1687
<1687=1698,1688
<1688=1689
<1689=1690
<1690=1696,1691
<1691=1694,1692
<1692=1693
<1694=1695
<1696=1697
<1698=1699
<1699=1701,1700
<1701=1703,1702
<1704=1705
<1705=1716,1706
<1706=1714,1707
<1707=1710,1708
<1708=1709
<1710=1711
<1711=1713,1712
<1714=1715
<1716=1718,1717
<1719=1720
<1720=1724,1721
<1721=1722
<1722=1723
<1724=1725
<1725=1727,1726
<1727=1729,1728
<1730=1731
<1731=1740,1739,1732
<1732=1738,1733
<1733=1737,1734
<1734=1736,1735
<1741=1742
<1742=1748,1743
<1743=1746,1744
<1744=1745
<1746=1747
<1748=1749
<1750=1751
<1751=1762,1752
<1752=1753
<1753=1754
<1754=1760,1755
<1755=1758,1756
<1756=1757
<1758=1759
<1760=1761
<1762=1763
<1763=1765,1764
<1765=1767,1766
<1768=1769
<1769=1778,1770
<1770=1776,1771
<1771=1774,1772
<1772=1773
<1774=1775
<1776=1777
<1778=1780,1779
<1781=1782
<1782=1786,1783
<1783=1784
<1784=1785
<1786=1787
<1787=1789,1788
<1789=1791,1790
<1792=1793
<1793=1802,1801,1794
<1794=1800,1795
<1795=1799,1796
<1796=1798,1797
<1803=1804
<1804=1810,1805
<1805=1808,1806
<1806=1807
<1808=1809
<1810=1811
<1812=1813
<1813=1822,1814
<1814=1820,1815
<1815=1818,1816
<1816=1817
<1818=1819
<1820=1821
<1822=1824,1823
<1825=1826
<1826=1830,1827
<1827=1829,1828
<1831=1832
<1832=1838,1833
<1833=1836,1834
<1834=1835
<1836=1837
<1838=1839
<1840=1841
<1841=1852,1842
<1842=1843
<1843=1844
<1844=1850,1845
<1845=1848,1846
<1846=1847
<1848=1849
<1850=1851
<1852=1853
<1853=1855,1854
<1855=1857,1856
<1858=1859
<1859=1868,1860
<1860=1866,1861
<1861=1864,1862
<1862=1863
<1864=1865
<1866=1867
<1868=1870,1869
<1871=1872
<1872=1876,1873
<1873=1874
<1874=1875
<1876=1877
<1877=1879,1878
<1879=1881,1880
<1882=1883
<1883=1892,1891,1884
<1884=1890,1885
<1885=1889,1886
<1886=1888,1887
<1893=1894
<1894=1900,1895
<1895=1898,1896
<1896=1897
<1898=1899
<1900=1901
<1902=1903
<1903=1914,1904
<1904=1905
<1905=1906
<1906=1912,1907
<1907=1910,1908
<1908=1909
<1910=1911
<1912=1913
<1914=1915
<1915=1917,1916
<1917=1919,1918
<1920=1921
<1921=1930,1922
<1922=1928,1923
<1923=1926,1924
<1924=1925
<1926=1927
<1928=1929
<1930=1932,1931
<1933=1934
<1934=1938,1935
<1935=1936
<1936=1937
<1938=1939
<1939=1941,1940
<1941=1943,1942
<1944=1945
<1945=1954,1953,1946
<1946=1952,1947
<1947=1951,1948
<1948=1950,1949
<1955=1956
<1956=1962,1957
<1957=1960,1958
<1958=1959
<1960=1961
<1962=1963
<1964=1965
<1965=1976,1966
<1966=1967
<1967=1968
<1968=1974,1969
<1969=1972,1970
<1970=1971
<1972=1973
<1974=1975
<1976=1977
<1977=1979,1978
<1979=1981,1980
<1982=1983
<1983=1992,1984
<1984=1990,1985
<1985=1988,1986
<1986=1987
<1988=1989
<1990=1991
<1992=1994,1993
<1995=1996
<1996=2000,1997
<1997=1998
<1998=1999
<2000=2001
<2001=2003,2002
<2003=2005,2004
<2006=2007
<2007=2016,2015,2008
<2008=2014,2009
<2009=2013,2010
<2010=2012,2011
<2017=2018
<2018=2024,2019
<2019=2022,2020
<2020=2021
<2022=2023
<2024=2025
<2026=2027
<2027=2038,2028
<2028=2029
<2029=2030
<2030=2036,2031
<2031=2034,2032
<2032=2033
<2034=2035
<2036=2037
<2038=2039
<2039=2041,2040
<2041=2043,2042
<2044=2045
<2045=2054,2046
<2046=2052,2047
<2047=2050,2048
<2048=2049
<2050=2051
<2052=2053
<2054=2056,2055
<2057=2058
<2058=2062,2059
<2059=2060
<2060=2061
<2062=2063
<2063=2065,2064
<2065=2067,2066
<2068=2069
<2069=2078,2077,2070
<2070=2076,2071
<2071=2075,2072
<2072=2074,2073
<2079=2080
<2080=2086,2081
<2081=2084,2082
<2082=2083
<2084=2085
<2086=2087
<2088=2089
<2089=2100,2090
<2090=2091
<2091=2092
<2092=2098,2093
<2093=2096,2094
<2094=2095
<2096=2097
<2098=2099
<2100=2101
<2101=2103,2102
<2103=2105,2104
<2106=2107
<2107=2116,2108
<2108=2114,2109
<2109=2112,2110
<2110=2111
<2112=2113
<2114=2115
<2116=2118,2117
<2119=2120
<2120=2124,2121
<2121=2122
<2122=2123
<2124=2125
<2125=2127,2126
<2127=2129,2128
<2130=2131
<2131=2140,2139,2132
<2132=2138,2133
<2133=2137,2134
<2134=2136,2135
<2141=2142
<2142=2148,2143
<2143=2146,2144
<2144=2145
<2146=2147
<2148=2149
<2150=2151
<2151=2162,2152
<2152=2153
<2153=2154
<2154=2160,2155
<2155=2158,2156
<2156=2157
<2158=2159
<2160=2161
<2162=2163
<2163=2165,2164
<2165=2167,2166
<2168=2169
<2169=2178,2170
<2170=2176,2171
<2171=2174,2172
<2172=2173
<2174=2175
<2176=2177
<2178=2180,2179
<2181=2182
<2182=2186,2183
<2183=2184
<2184=2185
<2186=2187
<2187=2189,2188
<2189=2191,2190
<2192=2193
<2193=2202,2201,2194
<2194=2200,2195
<2195=2199,2196
<2196=2198,2197
<2203=2204
<2204=2210,2205
<2205=2208,2206
<2206=2207
<2208=2209
<2210=2211
<2212=2213
<2213=2224,2214
<2214=2215
<2215=2216
<2216=2222,2217
<2217=2220,2218
<2218=2219
<2220=2221
<2222=2223
<2224=2225
<2225=2227,2226
<2227=2229,2228
<2230=2231
<2231=2240,2232
<2232=2238,2233
<2233=2236,2234
<2234=2235
<2236=2237
<2238=2239
<2240=2242,2241
<2243=2244
<2244=2248,2245
<2245=2246
<2246=2247
<2248=2249
<2249=2251,2250
<2251=2253,2252
<2254=2255
<2255=2264,2263,2256
<2256=2262,2257
<2257=2261,2258
<2258=2260,2259
<2265=2266
<2266=2272,2267
<2267=2270,2268
<2268=2269
<2270=2271
<2272=2273
<2274=2275
<2275=2286,2276
<2276=2277
<2277=2278
<2278=2284,2279
<2279=2282,2280
<2280=2281
<2282=2283
<2284=2285
<2286=2287
<2287=2289,2288
<2289=2291,2290
<2292=2293
<2293=2302,2294
<2294=2300,2295
<2295=2298,2296
<2296=2297
<2298=2299
<2300=2301
<2302=2304,2303
<2305=2306
<2306=2310,2307
<2307=2308
<2308=2309
<2310=2311
<2311=2313,2312
<2313=2315,2314
<2316=2317
<2317=2326,2325,2318
<2318=2324,2319
<2319=2323,2320
<2320=2322,2321
<2327=2328
<2328=2334,2329
<2329=2332,2330
<2330=2331
<2332=2333
<2334=2335
<2336=2337
<2337=2348,2338
<2338=2339
<2339=2340
<2340=2346,2341
<2341=2344,2342
<2342=2343
<2344=2345
<2346=2347
<2348=2349
<2349=2351,2350
<2351=2353,2352
<2354=2355
<2355=2364,2356
<2356=2362,2357
<2357=2360,2358
<2358=2359
<2360=2361
<2362=2363
<2364=2366,2365
<2367=2368
<2368=2372,2369
<2369=2370
<2370=2371
<2372=2373
<2373=2375,2374
<2375=2377,2376
<2378=2379
<2379=2388,2387,2380
<2380=2386,2381
<2381=2385,2382
<2382=2384,2383
<2389=2390
<2390=2396,2391
<2391=2394,2392
<2392=2393
<2394=2395
<2396=2397
<2398=2399
<2399=2410,2400
<2400=2401
<2401=2402
<2402=2408,2403
<2403=2406,2404
<2404=2405
<2406=2407
<2408=2409
<2410=2411
<2411=2413,2412
<2413=2415,2414
<2416=2417
<2417=2421,2418
<2418=2419
<2419=2420
<2421=2422
<2422=2424,2423
<2424=2426,2425
<2427=2428
<2428=2437,2429
<2429=2435,2430
<2430=2433,2431
<2431=2432
<2433=2434
<2435=2436
<2437=2439,2438
<2440=2441
<2441=2450,2449,2442
<2442=2448,2443
<2443=2447,2444
<2444=2446,2445
<2451=2452
<2452=2458,2453
<2453=2456,2454
<2454=2455
<2456=2457
<2458=2459
<2460=2461
<2461=2472,2462
<2462=2463
<2463=2464
<2464=2470,2465
<2465=2468,2466
<2466=2467
<2468=2469
<2470=2471
<2472=2473
<2473=2475,2474
<2475=2477,2476
<2478=2479
<2479=2483,2480
<2480=2481
<2481=2482
<2483=2484
<2484=2486,2485
<2486=2488,2487
<2489=2490
<2490=2499,2491
<2491=2497,2492
<2492=2495,2493
<2493=2494
<2495=2496
<2497=2498
<2499=2501,2500
<2502=2503
<2503=2512,2511,2504
<2504=2510,2505
<2505=2509,2506
<2506=2508,2507
<2513=2514
<2514=2520,2515
<2515=2518,2516
<2516=2517
<2518=2519
<2520=2521
<2522=2523
<2523=2534,2524
<2524=2525
<2525=2526
<2526=2532,2527
<2527=2530,2528
<2528=2529
<2530=2531
<2532=2533
<2534=2535
<2535=2537,2536
<2537=2539,2538
<2540=2541
<2541=2545,2542
<2542=2543
<2543=2544
<2545=2546
<2546=2548,2547
<2548=2550,2549
<2551=2552
<2552=2561,2553
<2553=2559,2554
<2554=2557,2555
<2555=2556
<2557=2558
<2559=2560
<2561=2563,2562
<2564=2565
<2565=2574,2573,2566
<2566=2572,2567
<2567=2571,2568
<2568=2570,2569
<2575=2576
<2576=2582,2577
<2577=2580,2578
<2578=2579
<2580=2581
<2582=2583
<2584=2585
<2585=2596,2586
<2586=2587
<2587=2588
<2588=2594,2589
<2589=2592,2590
<2590=2591
<2592=2593
<2594=2595
<2596=2597
<2597=2599,2598
<2599=2601,2600
<2602=2603
<2603=2607,2604
<2604=2605
<2605=2606
<2607=2608
<2608=2610,2609
<2610=2612,2611
<2613=2614
<2614=2623,2615
<2615=2621,2616
<2616=2619,2617
<2617=2618
<2619=2620
<2621=2622
<2623=2625,2624
<2626=2627
<2627=2636,2635,2628
<2628=2634,2629
<2629=2633,2630
<2630=2632,2631
<2637=2638
<2638=2644,2639
<2639=2642,2640
<2640=2641
<2642=2643
<2644=2645
<2646=2647
<2647=2658,2648
<2648=2649
<2649=2650
<2650=2656,2651
<2651=2654,2652
<2652=2653
<2654=2655
<2656=2657
<2658=2659
<2659=2661,2660
<2661=2663,2662
<2664=2665
<2665=2669,2666
<2666=2667
<2667=2668
<2669=2670
<2670=2672,2671
<2672=2674,2673
<2675=2676
<2676=2685,2677
<2677=2683,2678
<2678=2681,2679
<2679=2680
<2681=2682
<2683=2684
<2685=2687,2686
<2688=2689
<2689=2698,2697,2690
<2690=2696,2691
<2691=2695,2692
<2692=2694,2693
<2699=2700
<2700=2706,2701
<2701=2704,2702
<2702=2703
<2704=2705
<2706=2707
<2708=2709
<2709=2733,2710
<2710=2722,2711
<2711=2712
<2712=2720,2713
<2713=2718,2716,2714
<2714=2715
<2716=2717
<2718=2719
<2720=2721
<2722=2723
<2723=2731,2724
<2724=2729,2727,2725
<2725=2726
<2727=2728
<2729=2730
<2731=2732
<2733=2734
<2734=2736,2735
<2737=2738
<2738=2747,2739
<2739=2745,2740
<2740=2743,2741
<2741=2742
<2743=2744
<2745=2746
<2747=2749,2748
<2750=2751
<2751=2760,2752
<2752=2758,2753
<2753=2756,2754
<2754=2755
<2756=2757
<2758=2759
<2760=2762,2761
<2763=2764
<2768=2769
<2769=2775,2770
<2770=2773,2771
<2771=2772
<2773=2774
<2775=2776
<2777=2806,2795,2778
<2778=2779
<2779=2792,2780
<2780=2790,2781
<2781=2788,2786,2782
<2782=2783
<2783=2785,2784
<2786=2787
<2788=2789
<2790=2791
<2792=2794,2793
<2795=2796
<2796=2802,2797
<2797=2800,2798
<2798=2799
<2800=2801
<2802=2803
<2803=2805,2804
<2806=2807
<2807=2809,2808
<2809=2811,2810
<2812=2813
<2819=2820
<2820=2826,2821
<2821=2824,2822
<2822=2823
<2824=2825
<2826=2827
<2828=2829
<2829=2835,2830
<2830=2833,2831
<2831=2832
<2833=2834
<2835=2836
<2837=2838
<2838=2844,2839
<2839=2842,2840
<2840=2841
<2842=2843
<2844=2845
<2846=2847
<2847=2853,2848
<2848=2851,2849
<2849=2850
<2851=2852
<2853=2854
<2855=2856
<2856=2862,2857
<2857=2860,2858
<2858=2859
<2860=2861
<2862=2863
<2864=2865
<2865=2880,2866
<2866=2871,2869,2867
<2867=2868
<2869=2870
<2871=2872
<2872=2878,2873
<2873=2876,2874
<2874=2875
<2876=2877
<2878=2879
<2880=2881
<2882=2883
<2883=2898,2884
<2884=2889,2887,2885
<2885=2886
<2887=2888
<2889=2890
<2890=2896,2891
<2891=2894,2892
<2892=2893
<2894=2895
<2896=2897
<2898=2899
<2900=2901
<2901=2916,2902
<2902=2907,2905,2903
<2903=2904
<2905=2906
<2907=2908
<2908=2914,2909
<2909=2912,2910
<2910=2911
<2912=2913
<2914=2915
<2916=2917
<2918=2919
<2919=2934,2920
<2920=2925,2923,2921
<2921=2922
<2923=2924
<2925=2926
<2926=2932,2927
<2927=2930,2928
<2928=2929
<2930=2931
<2932=2933
<2934=2935
<2936=2937
<2937=2952,2938
<2938=2943,2941,2939
<2939=2940
<2941=2942
<2943=2944
<2944=2950,2945
<2945=2948,2946
<2946=2947
<2948=2949
<2950=2951
<2952=2953
<2954=2955
<2955=2970,2956
<2956=2961,2959,2957
<2957=2958
<2959=2960
<2961=2962
<2962=2968,2963
<2963=2966,2964
<2964=2965
<2966=2967
<2968=2969
<2970=2971
<2972=2973
<2973=2988,2974
<2974=2979,2977,2975
<2975=2976
<2977=2978
<2979=2980
<2980=2986,2981
<2981=2984,2982
<2982=2983
<2984=2985
<2986=2987
<2988=2989
<2990=2991
<2991=3006,2992
<2992=2997,2995,2993
<2993=2994
<2995=2996
<2997=2998
<2998=3004,2999
<2999=3002,3000
<3000=3001
<3002=3003
<3004=3005
<3006=3007
<3008=3009
<3009=3024,3010
<3010=3015,3013,3011
<3011=3012
<3013=3014
<3015=3016
<3016=3022,3017
<3017=3020,3018
<3018=3019
<3020=3021
<3022=3023
<3024=3025
<3026=3027
<3027=3042,3028
<3028=3033,3031,3029
<3029=3030
<3031=3032
<3033=3034
<3034=3040,3035
<3035=3038,3036
<3036=3037
<3038=3039
<3040=3041
<3042=3043
<3044=3045
<3045=3060,3046
<3046=3051,3049,3047
<3047=3048
<3049=3050
<3051=3052
<3052=3058,3053
<3053=3056,3054
<3054=3055
<3056=3057
<3058=3059
<3060=3061
<3062=3063
<3063=3078,3064
<3064=3069,3067,3065
<3065=3066
<3067=3068
<3069=3070
<3070=3076,3071
<3071=3074,3072
<3072=3073
<3074=3075
<3076=3077
<3078=3079
<3080=3081
<3081=3096,3082
<3082=3087,3085,3083
<3083=3084
<3085=3086
<3087=3088
<3088=3094,3089
<3089=3092,3090
<3090=3091
<3092=3093
<3094=3095
<3096=3097
<3098=3099
<3099=3114,3100
<3100=3105,3103,3101
<3101=3102
<3103=3104
<3105=3106
<3106=3112,3107
<3107=3110,3108
<3108=3109
<3110=3111
<3112=3113
<3114=3115
<3116=3117
<3117=3132,3118
<3118=3123,3121,3119
<3119=3120
<3121=3122
<3123=3124
<3124=3130,3125
<3125=3128,3126
<3126=3127
<3128=3129
<3130=3131
<3132=3133
<3134=3135
<3135=3150,3136
<3136=3141,3139,3137
<3137=3138
<3139=3140
<3141=3142
<3142=3148,3143
<3143=3146,3144
<3144=3145
<3146=3147
<3148=3149
<3150=3151
<3152=3153
<3153=3168,3154
<3154=3159,3157,3155
<3155=3156
<3157=3158
<3159=3160
<3160=3166,3161
<3161=3164,3162
<3162=3163
<3164=3165
<3166=3167
<3168=3169
<3170=3171
<3171=3186,3172
<3172=3177,3175,3173
<3173=3174
<3175=3176
<3177=3178
<3178=3184,3179
<3179=3182,3180
<3180=3181
<3182=3183
<3184=3185
<3186=3187
<3188=3189
<3189=3204,3190
<3190=3195,3193,3191
<3191=3192
<3193=3194
<3195=3196
<3196=3202,3197
<3197=3200,3198
<3198=3199
<3200=3201
<3202=3203
<3204=3205
<3206=3207
<3207=3222,3208
<3208=3213,3211,3209
<3209=3210
<3211=3212
<3213=3214
<3214=3220,3215
<3215=3218,3216
<3216=3217
<3218=3219
<3220=3221
<3222=3223
<3224=3225
<3225=3240,3226
<3226=3231,3229,3227
<3227=3228
<3229=3230
<3231=3232
<3232=3238,3233
<3233=3236,3234
<3234=3235
<3236=3237
<3238=3239
<3240=3241
<3242=3243
<3243=3258,3244
<3244=3249,3247,3245
<3245=3246
<3247=3248
<3249=3250
<3250=3256,3251
<3251=3254,3252
<3252=3253
<3254=3255
<3256=3257
<3258=3259
<3260=3261
<3261=3276,3262
<3262=3267,3265,3263
<3263=3264
<3265=3266
<3267=3268
<3268=3274,3269
<3269=3272,3270
<3270=3271
<3272=3273
<3274=3275
<3276=3277
<3278=3279
<3279=3294,3280
<3280=3285,3283,3281
<3281=3282
<3283=3284
<3285=3286
<3286=3292,3287
<3287=3290,3288
<3288=3289
<3290=3291
<3292=3293
<3294=3295
<3296=3297
<3297=3312,3298
<3298=3303,3301,3299
<3299=3300
<3301=3302
<3303=3304
<3304=3310,3305
<3305=3308,3306
<3306=3307
<3308=3309
<3310=3311
<3312=3313
<3314=3315
<3315=3330,3316
<3316=3321,3319,3317
<3317=3318
<3319=3320
<3321=3322
<3322=3328,3323
<3323=3326,3324
<3324=3325
<3326=3327
<3328=3329
<3330=3331
<3332=3333
<3333=3348,3334
<3334=3339,3337,3335
<3335=3336
<3337=3338
<3339=3340
<3340=3346,3341
<3341=3344,3342
<3342=3343
<3344=3345
<3346=3347
<3348=3349
<3350=3351
<3351=3366,3352
<3352=3357,3355,3353
<3353=3354
<3355=3356
<3357=3358
<3358=3364,3359
<3359=3362,3360
<3360=3361
<3362=3363
<3364=3365
<3366=3367
<3368=3369
<3369=3384,3370
<3370=3375,3373,3371
<3371=3372
<3373=3374
<3375=3376
<3376=3382,3377
<3377=3380,3378
<3378=3379
<3380=3381
<3382=3383
<3384=3385
<3386=3387
<3387=3402,3388
<3388=3393,3391,3389
<3389=3390
<3391=3392
<3393=3394
<3394=3400,3395
<3395=3398,3396
<3396=3397
<3398=3399
<3400=3401
<3402=3403
<3404=3405
<3405=3420,3406
<3406=3411,3409,3407
<3407=3408
<3409=3410
<3411=3412
<3412=3418,3413
<3413=3416,3414
<3414=3415
<3416=3417
<3418=3419
<3420=3421
<3422=3423
<3423=3438,3424
<3424=3429,3427,3425
<3425=3426
<3427=3428
<3429=3430
<3430=3436,3431
<3431=3434,3432
<3432=3433
<3434=3435
<3436=3437
<3438=3439
<3440=3441
<3441=3456,3442
<3442=3447,3445,3443
<3443=3444
<3445=3446
<3447=3448
<3448=3454,3449
<3449=3452,3450
<3450=3451
<3452=3453
<3454=3455
<3456=3457
<3458=3459
<3459=3474,3460
<3460=3465,3463,3461
<3461=3462
<3463=3464
<3465=3466
<3466=3472,3467
<3467=3470,3468
<3468=3469
<3470=3471
<3472=3473
<3474=3475
<3476=3477
<3477=3492,3478
<3478=3483,3481,3479
<3479=3480
<3481=3482
<3483=3484
<3484=3490,3485
<3485=3488,3486
<3486=3487
<3488=3489
<3490=3491
<3492=3493
<3494=3495
<3495=3510,3496
<3496=3501,3499,3497
<3497=3498
<3499=3500
<3501=3502
<3502=3508,3503
<3503=3506,3504
<3504=3505
<3506=3507
<3508=3509
<3510=3511
<3512=3513
<3513=3522,3514
<3514=3520,3515
<3515=3518,3516
<3516=3517
<3518=3519
<3520=3521
<3522=3524,3523
<3525=3526
<3526=3530,3527
<3527=3528
<3528=3529
<3530=3531
<3531=3533,3532
<3534=3535
<3535=3537,3536
<3537=3539,3538
<3540=3541
<3541=3543,3542
<3544=3545
<3545=3547,3546
<3548=3549
<3549=3551,3550
<3552=3553
<3553=3555,3554
<3556=3557
<3557=3559,3558
<3559=3560
<3561=3562
<3562=3564,3563
<3565=3566
<3566=3568,3567
<3569=3570
<3570=3572,3571
<3573=3574
<3574=3576,3575
<3577=3578
<3578=3580,3579
<3581=3582
<3582=3584,3583
<3585=3586
<3586=3595,3587
<3587=3593,3588
<3588=3591,3589
<3589=3590
<3591=3592
<3593=3594
<3595=3597,3596
<3598=3599
<3599=3605,3600
<3600=3603,3601
<3601=3602
<3603=3604
<3605=3606
<3606=3608,3607
<3854=3857,3856,3855
<3857=3858
<3858=3859
<3859=3861,3860
<3861=3862
<3862=3864,3863
<3869=3872,3871,3870
<3872=3918,3910,3901,3884,3873
<3873=3874
<3874=3883,3875
<3875=3877,3876
<3877=3879,3878
<3879=3880
<3880=3882,3881
<3884=3892,3885
<3885=3886
<3886=3888,3887
<3888=3889
<3889=3891,3890
<3892=3893
<3893=3895,3894
<3895=3897,3896
<3897=3898
<3898=3900,3899
<3901=3902
<3902=3906,3903
<3903=3904
<3904=3905
<3906=3907
<3907=3909,3908
<3910=3911
<3911=3915,3912
<3912=3914,3913
<3915=3917,3916
<3918=3919
<3919=3921,3920
<3933=3936,3935,3934
<3936=3984,3937
<3937=3977,3938
<3938=3939
<3939=3964,3940
<3940=3954,3950,3941
<3941=3946,3942
<3942=3943
<3943=3945,3944
<3946=3947
<3947=3949,3948
<3950=3951
<3951=3953,3952
<3954=3955
<3955=3961,3956
<3956=3958,3957
<3958=3960,3959
<3961=3963,3962
<3964=3965
<3965=3974,3966
<3966=3973,3967
<3967=3969,3968
<3969=3970
<3970=3972,3971
<3974=3976,3975
<3977=3978
<3978=3980,3979
<3980=3981
<3981=3983,3982
<3984=3986,3985
<3986=3987
<3987=3989,3988
<3989=3990
<3990=3992,3991
<4011=4014,4013,4012
<4014=4059,4015
<4015=4052,4016
<4016=4048,4017
<4017=4035,4024,4018
<4018=4019
<4019=4020
<4020=4021
<4021=4023,4022
<4024=4025
<4025=4026
<4026=4032,4027
<4027=4029,4028
<4029=4031,4030
<4032=4034,4033
<4035=4036
<4036=4045,4037
<4037=4044,4038
<4038=4040,4039
<4040=4041
<4041=4043,4042
<4045=4047,4046
<4048=4049
<4049=4051,4050
<4052=4053
<4053=4055,4054
<4055=4056
<4056=4058,4057
<4059=4061,4060
<4061=4062
<4062=4064,4063
<4064=4065
<4065=4067,4066
<4086=4095,4094,4087
<4087=4091,4088
<4088=4090,4089
<4091=4093,4092
<4095=4187,4096
<4096=4183,4097
<4097=4174,4155,4136,4117,4098
<4098=4113,4099
<4099=4105,4100
<4100=4101
<4101=4103,4102
<4103=4104
<4105=4106
<4106=4108,4107
<4108=4110,4109
<4110=4112,4111
<4113=4114
<4114=4116,4115
<4117=4132,4118
<4118=4124,4119
<4119=4120
<4120=4122,4121
<4122=4123
<4124=4125
<4125=4127,4126
<4127=4129,4128
<4129=4131,4130
<4132=4133
<4133=4135,4134
<4136=4151,4137
<4137=4143,4138
<4138=4139
<4139=4141,4140
<4141=4142
<4143=4144
<4144=4146,4145
<4146=4148,4147
<4148=4150,4149
<4151=4152
<4152=4154,4153
<4155=4170,4156
<4156=4162,4157
<4157=4158
<4158=4160,4159
<4160=4161
<4162=4163
<4163=4165,4164
<4165=4167,4166
<4167=4169,4168
<4170=4171
<4171=4173,4172
<4174=4176,4175
<4176=4177
<4177=4179,4178
<4179=4180
<4180=4182,4181
<4183=4184
<4184=4186,4185
<4187=4188
<4188=4194,4189
<4189=4192,4190
<4190=4191
<4192=4193
<4194=4195
<4215=4218,4217,4216
<4218=4239,4226,4219
<4219=4220
<4220=4222,4221
<4222=4223
<4223=4225,4224
<4226=4227
<4227=4236,4228
<4228=4234,4229
<4229=4232,4230
<4230=4231
<4232=4233
<4234=4235
<4236=4238,4237
<4239=4241,4240
<4241=4242
<4242=4244,4243
<4244=4245
<4245=4247,4246
<4259=4262,4261,4260
<4262=4283,4270,4263
<4263=4264
<4264=4266,4265
<4266=4267
<4267=4269,4268
<4270=4271
<4271=4280,4272
<4272=4278,4273
<4273=4276,4274
<4274=4275
<4276=4277
<4278=4279
<4280=4282,4281
<4283=4285,4284
<4285=4286
<4286=4288,4287
<4288=4289
<4289=4291,4290
<4303=4306,4305,4304
<4306=4312,4307
<4307=4308
<4308=4310,4309
<4310=4311
<4312=4313
<4313=4315,4314
<4315=4316
<4316=4318,4317
<4318=4320,4319
<4320=4321
<4321=4323,4322
<4330=4333,4332,4331
<4333=4479,4425,4418,4334
<4334=4410,4406,4403,4335
<4335=4336
<4336=4396,4337
<4337=4377,4371,4364,4356,4347,4338
<4338=4339
<4339=4343,4340
<4340=4341
<4341=4342
<4343=4344
<4344=4346,4345
<4347=4348
<4348=4354,4349
<4349=4352,4350
<4350=4351
<4352=4353
<4354=4355
<4356=4357
<4357=4359,4358
<4359=4361,4360
<4361=4363,4362
<4364=4365
<4365=4370,4369,4366
<4366=4368,4367
<4371=4373,4372
<4373=4374
<4374=4376,4375
<4377=4378
<4378=4395,4394,4379
<4379=4393,4380
<4380=4384,4381
<4381=4382
<4382=4383
<4384=4385
<4385=4387,4386
<4387=4389,4388
<4389=4390
<4390=4392,4391
<4396=4397
<4397=4399,4398
<4399=4400
<4400=4402,4401
<4403=4405,4404
<4406=4407
<4407=4409,4408
<4410=4411
<4411=4412
<4412=4417,4416,4413
<4413=4415,4414
<4418=4419
<4419=4421,4420
<4421=4422
<4422=4424,4423
<4425=4471,4462,4459,4426
<4426=4448,4437,4427
<4427=4428
<4428=4436,4429
<4429=4431,4430
<4431=4433,4432
<4433=4435,4434
<4437=4438
<4438=4442,4439
<4439=4440
<4440=4441
<4442=4443
<4443=4445,4444
<4445=4447,4446
<4448=4449
<4449=4453,4450
<4450=4451
<4451=4452
<4453=4454
<4454=4456,4455
<4456=4458,4457
<4459=4461,4460
<4462=4463
<4463=4470,4464
<4464=4466,4465
<4466=4467
<4467=4469,4468
<4471=4472
<4472=4473
<4473=4478,4477,4474
<4474=4476,4475
<4479=4480
<4480=4485,4484,4481
<4481=4483,4482
<4511=4514,4513,4512
<4514=4533,4528,4515
<4515=4516
<4516=4525,4517
<4517=4523,4518
<4518=4521,4519
<4519=4520
<4521=4522
<4523=4524
<4525=4527,4526
<4528=4529
<4529=4531,4530
<4531=4532
<4533=4534
<4534=4536,4535
<4536=4537
<4537=4539,4538
<4548=4551,4550,4549
<4551=4570,4558,4552
<4552=4553
<4553=4557,4554
<4554=4556,4555
<4558=4566,4559
<4559=4560
<4560=4562,4561
<4562=4563
<4563=4565,4564
<4566=4567
<4567=4569,4568
<4570=4572,4571
<4572=4573
<4573=4575,4574
<4575=4576
<4576=4578,4577
<4587=4593,4592,4588
<4588=4589
<4589=4591,4590
<4593=4726,4712,4594
<4594=4710,4595
<4595=4682,4596
<4596=4680,4597
<4597=4598
<4598=4669,4599
<4599=4631,4615,4600
<4600=4601
<4601=4611,4602
<4602=4607,4603
<4603=4604
<4604=4606,4605
<4607=4608
<4608=4610,4609
<4611=4612
<4612=4614,4613
<4615=4616
<4616=4626,4617
<4617=4621,4618
<4618=4620,4619
<4621=4623,4622
<4623=4625,4624
<4626=4628,4627
<4628=4630,4629
<4631=4651,4632
<4632=4633
<4633=4634
<4634=4645,4635
<4635=4636
<4636=4637
<4637=4639,4638
<4639=4640
<4640=4642,4641
<4642=4644,4643
<4645=4646
<4646=4648,4647
<4648=4650,4649
<4651=4652
<4652=4661,4653
<4653=4655,4654
<4655=4656
<4656=4658,4657
<4658=4660,4659
<4661=4663,4662
<4663=4664
<4664=4666,4665
<4666=4668,4667
<4669=4670
<4670=4679,4671
<4671=4673,4672
<4673=4674
<4674=4676,4675
<4676=4678,4677
<4680=4681
<4682=4683
<4683=4709,4708,4684
<4684=4707,4685
<4685=4691,4686
<4686=4687
<4687=4688
<4688=4690,4689
<4691=4692
<4692=4694,4693
<4694=4698,4695
<4695=4696
<4696=4697
<4698=4699
<4699=4701,4700
<4701=4703,4702
<4703=4704
<4704=4706,4705
<4710=4711
<4712=4713
<4713=4725,4724,4714
<4714=4723,4715
<4715=4719,4716
<4716=4717
<4717=4718
<4719=4720
<4720=4722,4721
<4726=4728,4727
<4728=4729
<4729=4731,4730
<4731=4732
<4732=4734,4733
<4773=4776,4775,4774
<4776=4790,4777
<4777=4788,4787,4778
<4778=4779
<4779=4780
<4780=4781
<4781=4783,4782
<4783=4784
<4784=4786,4785
<4788=4789
<4790=4792,4791
<4792=4793
<4793=4795,4794
<4795=4796
<4796=4798,4797
<4807=4810,4809,4808
<4810=4824,4811
<4811=4822,4821,4812
<4812=4813
<4813=4814
<4814=4815
<4815=4817,4816
<4817=4818
<4818=4820,4819
<4822=4823
<4824=4826,4825
<4826=4827
<4827=4829,4828
<4829=4830
<4830=4832,4831
<4841=4847,4846,4842
<4842=4843
<4843=4845,4844
<4847=5540,5536,5532,5517,5511,5492,5480,5476,5426,5412,5407,5384,5375,5355,5259,5252,5197,5162,5127,5104,5086,4983,4905,4848
<4848=4901,4849
<4849=4850
<4850=4892,4851
<4851=4873,4859,4852
<4852=4853
<4853=4855,4854
<4855=4856
<4856=4858,4857
<4859=4871,4860
<4860=4861
<4861=4867,4862
<4862=4863
<4863=4864
<4864=4866,4865
<4867=4868
<4868=4870,4869
<4871=4872
<4873=4874
<4874=4891,4890,4875
<4875=4889,4876
<4876=4880,4877
<4877=4878
<4878=4879
<4880=4881
<4881=4883,4882
<4883=4885,4884
<4885=4886
<4886=4888,4887
<4892=4893
<4893=4900,4894
<4894=4896,4895
<4896=4897
<4897=4899,4898
<4901=4902
<4902=4904,4903
<4905=4977,4906
<4906=4912,4907
<4907=4908
<4908=4910,4909
<4910=4911
<4912=4958,4936,4913
<4913=4914
<4914=4915
<4915=4931,4916
<4916=4930,4917
<4917=4919,4918
<4919=4923,4920
<4920=4922,4921
<4923=4925,4924
<4925=4927,4926
<4927=4929,4928
<4931=4933,4932
<4933=4935,4934
<4936=4937
<4937=4953,4938
<4938=4952,4939
<4939=4941,4940
<4941=4949,4942
<4942=4944,4943
<4944=4946,4945
<4946=4948,4947
<4949=4951,4950
<4953=4955,4954
<4955=4957,4956
<4958=4959
<4959=4971,4960
<4960=4962,4961
<4962=4963
<4963=4965,4964
<4965=4967,4966
<4967=4968
<4968=4970,4969
<4971=4973,4972
<4973=4974
<4974=4976,4975
<4977=4978
<4978=4982,4979
<4979=4981,4980
<4983=5080,4984
<4984=5069,4996,4990,4985
<4985=4986
<4986=4988,4987
<4988=4989
<4990=4991
<4991=4993,4992
<4993=4995,4994
<4996=5062,4997
<4997=5043,4998
<4998=5031,5011,4999
<4999=5000
<5000=5001
<5001=5007,5002
<5002=5003
<5003=5004
<5004=5006,5005
<5007=5008
<5008=5010,5009
<5011=5021,5012
<5012=5013
<5013=5017,5014
<5014=5015
<5015=5016
<5017=5018
<5018=5020,5019
<5021=5022
<5022=5028,5023
<5023=5027,5024
<5024=5026,5025
<5028=5030,5029
<5031=5032
<5032=5034,5033
<5034=5035
<5035=5037,5036
<5037=5039,5038
<5039=5040
<5040=5042,5041
<5043=5044
<5044=5061,5060,5045
<5045=5059,5046
<5046=5048,5047
<5048=5050,5049
<5050=5051
<5051=5053,5052
<5053=5055,5054
<5055=5056
<5056=5058,5057
<5062=5063
<5063=5065,5064
<5065=5066
<5066=5068,5067
<5069=5070
<5070=5079,5078,5071
<5071=5077,5072
<5072=5074,5073
<5074=5076,5075
<5080=5081
<5081=5085,5082
<5082=5084,5083
<5086=5100,5087
<5087=5092,5088
<5088=5090,5089
<5090=5091
<5092=5098,5093
<5093=5094
<5094=5096,5095
<5096=5097
<5098=5099
<5100=5101
<5101=5103,5102
<5104=5119,5105
<5105=5106
<5106=5107
<5107=5116,5108
<5108=5114,5109
<5109=5112,5110
<5110=5111
<5112=5113
<5114=5115
<5116=5118,5117
<5119=5120
<5120=5122,5121
<5122=5124,5123
<5124=5126,5125
<5127=5146,5128
<5128=5129
<5129=5130
<5130=5143,5131
<5131=5141,5132
<5132=5137,5133
<5133=5134
<5134=5136,5135
<5137=5138
<5138=5140,5139
<5141=5142
<5143=5145,5144
<5146=5147
<5147=5154,5148
<5148=5150,5149
<5150=5151
<5151=5153,5152
<5154=5158,5155
<5155=5156
<5156=5157
<5158=5159
<5159=5161,5160
<5162=5181,5163
<5163=5164
<5164=5165
<5165=5178,5166
<5166=5176,5167
<5167=5172,5168
<5168=5169
<5169=5171,5170
<5172=5173
<5173=5175,5174
<5176=5177
<5178=5180,5179
<5181=5182
<5182=5189,5183
<5183=5185,5184
<5185=5186
<5186=5188,5187
<5189=5193,5190
<5190=5191
<5191=5192
<5193=5194
<5194=5196,5195
<5197=5244,5226,5198
<5198=5199
<5199=5218,5200
<5200=5201
<5201=5202
<5202=5215,5203
<5203=5213,5204
<5204=5209,5205
<5205=5206
<5206=5208,5207
<5209=5210
<5210=5212,5211
<5213=5214
<5215=5217,5216
<5218=5219
<5219=5221,5220
<5221=5223,5222
<5223=5225,5224
<5226=5227
<5227=5228
<5228=5241,5229
<5229=5239,5230
<5230=5235,5231
<5231=5232
<5232=5234,5233
<5235=5236
<5236=5238,5237
<5239=5240
<5241=5243,5242
<5244=5245
<5245=5247,5246
<5247=5249,5248
<5249=5251,5250
<5252=5253
<5253=5258,5257,5254
<5254=5256,5255
<5259=5353,5260
<5260=5329,5307,5283,5261
<5261=5276,5262
<5262=5263
<5263=5274,5264
<5264=5265
<5265=5266
<5266=5272,5267
<5267=5270,5268
<5268=5269
<5270=5271
<5272=5273
<5274=5275
<5276=5277
<5277=5281,5278
<5278=5279
<5279=5280
<5281=5282
<5283=5300,5284
<5284=5285
<5285=5298,5286
<5286=5287
<5287=5288
<5288=5296,5289
<5289=5294,5290
<5290=5291
<5291=5293,5292
<5294=5295
<5296=5297
<5298=5299
<5300=5301
<5301=5305,5302
<5302=5303
<5303=5304
<5305=5306
<5307=5322,5308
<5308=5309
<5309=5320,5310
<5310=5311
<5311=5312
<5312=5318,5313
<5313=5316,5314
<5314=5315
<5316=5317
<5318=5319
<5320=5321
<5322=5323
<5323=5327,5324
<5324=5325
<5325=5326
<5327=5328
<5329=5346,5330
<5330=5331
<5331=5344,5332
<5332=5333
<5333=5334
<5334=5342,5335
<5335=5338,5336
<5336=5337
<5338=5339
<5339=5341,5340
<5342=5343
<5344=5345
<5346=5347
<5347=5351,5348
<5348=5349
<5349=5350
<5351=5352
<5353=5354
<5355=5367,5356
<5356=5357
<5357=5358
<5358=5364,5359
<5359=5361,5360
<5361=5363,5362
<5364=5366,5365
<5367=5368
<5368=5370,5369
<5370=5372,5371
<5372=5374,5373
<5375=5376
<5376=5380,5377
<5377=5378
<5378=5379
<5380=5381
<5381=5383,5382
<5384=5385
<5385=5405,5386
<5386=5403,5401,5397,5393,5389,5387
<5387=5388
<5389=5390
<5390=5392,5391
<5393=5394
<5394=5396,5395
<5397=5398
<5398=5400,5399
<5401=5402
<5403=5404
<5405=5406
<5407=5408
<5408=5411,5410,5409
<5412=5413
<5413=5422,5414
<5414=5415
<5415=5416
<5416=5418,5417
<5418=5419
<5419=5421,5420
<5422=5423
<5423=5425,5424
<5426=5474,5427
<5427=5458,5448,5438,5428
<5428=5429
<5429=5435,5430
<5430=5432,5431
<5432=5434,5433
<5435=5437,5436
<5438=5439
<5439=5445,5440
<5440=5442,5441
<5442=5444,5443
<5445=5447,5446
<5448=5449
<5449=5455,5450
<5450=5452,5451
<5452=5454,5453
<5455=5457,5456
<5458=5459
<5459=5473,5460
<5460=5472,5461
<5461=5469,5462
<5462=5468,5463
<5463=5465,5464
<5465=5467,5466
<5469=5471,5470
<5474=5475
<5476=5477
<5477=5479,5478
<5480=5490,5481
<5481=5482
<5482=5483
<5483=5489,5484
<5484=5488,5485
<5485=5487,5486
<5490=5491
<5492=5493
<5493=5510,5509,5494
<5494=5508,5495
<5495=5499,5496
<5496=5497
<5497=5498
<5499=5500
<5500=5502,5501
<5502=5504,5503
<5504=5505
<5505=5507,5506
<5511=5512
<5512=5516,5513
<5513=5515,5514
<5517=5518
<5518=5531,5519
<5519=5530,5520
<5520=5522,5521
<5522=5524,5523
<5524=5526,5525
<5526=5527
<5527=5529,5528
<5532=5533
<5533=5535,5534
<5536=5537
<5537=5539,5538
<5540=5541
<5541=5545,5542
<5542=5543
<5543=5544
<5545=5546
<5616=5619,5618,5617
<5619=5646,5620
<5620=5639,5621
<5621=5622
<5622=5638,5623
<5623=5637,5624
<5624=5628,5625
<5625=5626
<5626=5627
<5628=5629
<5629=5631,5630
<5631=5633,5632
<5633=5634
<5634=5636,5635
<5639=5640
<5640=5642,5641
<5642=5643
<5643=5645,5644
<5646=5648,5647
<5648=5649
<5649=5651,5650
<5651=5652
<5652=5654,5653
<5676=5679,5678,5677
<5679=5729,5680
<5680=5722,5681
<5681=5703,5694,5688,5682
<5682=5683
<5683=5685,5684
<5685=5687,5686
<5688=5689
<5689=5691,5690
<5691=5693,5692
<5694=5695
<5695=5702,5701,5696
<5696=5700,5697
<5697=5699,5698
<5703=5704
<5704=5721,5720,5705
<5705=5719,5706
<5706=5710,5707
<5707=5708
<5708=5709
<5710=5711
<5711=5713,5712
<5713=5715,5714
<5715=5716
<5716=5718,5717
<5722=5723
<5723=5725,5724
<5725=5726
<5726=5728,5727
<5729=5731,5730
<5731=5732
<5732=5734,5733
<5734=5735
<5735=5737,5736
<5759=5762,5761,5760
<5762=5880,5763
<5763=5878,5850,5764
<5764=5765
<5765=5766
<5766=5843,5811,5767
<5767=5768
<5768=5807,5788,5769
<5769=5786,5775,5770
<5770=5771
<5771=5772
<5772=5774,5773
<5775=5776
<5776=5782,5777
<5777=5778
<5778=5779
<5779=5781,5780
<5782=5783
<5783=5785,5784
<5786=5787
<5788=5789
<5789=5806,5805,5790
<5790=5804,5791
<5791=5795,5792
<5792=5793
<5793=5794
<5795=5796
<5796=5798,5797
<5798=5800,5799
<5800=5801
<5801=5803,5802
<5807=5808
<5808=5810,5809
<5811=5812
<5812=5835,5826,5823,5813
<5813=5814
<5814=5815
<5815=5817,5816
<5817=5818
<5818=5820,5819
<5820=5822,5821
<5823=5825,5824
<5826=5827
<5827=5834,5828
<5828=5830,5829
<5830=5831
<5831=5833,5832
<5835=5836
<5836=5837
<5837=5842,5841,5838
<5838=5840,5839
<5843=5844
<5844=5846,5845
<5846=5847
<5847=5849,5848
<5850=5874,5851
<5851=5856,5852
<5852=5853
<5853=5855,5854
<5856=5857
<5857=5873,5858
<5858=5860,5859
<5860=5861
<5861=5863,5862
<5863=5865,5864
<5865=5869,5866
<5866=5867
<5867=5868
<5869=5870
<5870=5872,5871
<5874=5875
<5875=5877,5876
<5878=5879
<5880=5882,5881
<5882=5883
<5883=5885,5884
<5885=5886
<5886=5888,5887
<5920=5923,5922,5921
<5923=6028,5924
<5924=6026,6012,5925
<5925=5926
<5926=5927
<5927=6005,5973,5928
<5928=5929
<5929=5930
<5930=5969,5931
<5931=5965,5946,5932
<5932=5944,5933
<5933=5934
<5934=5940,5935
<5935=5936
<5936=5937
<5937=5939,5938
<5940=5941
<5941=5943,5942
<5944=5945
<5946=5947
<5947=5964,5963,5948
<5948=5962,5949
<5949=5953,5950
<5950=5951
<5951=5952
<5953=5954
<5954=5956,5955
<5956=5958,5957
<5958=5959
<5959=5961,5960
<5965=5966
<5966=5968,5967
<5969=5970
<5970=5972,5971
<5973=5974
<5974=5997,5988,5985,5975
<5975=5976
<5976=5977
<5977=5979,5978
<5979=5980
<5980=5982,5981
<5982=5984,5983
<5985=5987,5986
<5988=5989
<5989=5996,5990
<5990=5992,5991
<5992=5993
<5993=5995,5994
<5997=5998
<5998=5999
<5999=6004,6003,6000
<6000=6002,6001
<6005=6006
<6006=6008,6007
<6008=6009
<6009=6011,6010
<6012=6022,6013
<6013=6018,6014
<6014=6015
<6015=6017,6016
<6018=6019
<6019=6021,6020
<6022=6023
<6023=6025,6024
<6026=6027
<6028=6030,6029
<6030=6031
<6031=6033,6032
<6033=6034
<6034=6036,6035
<6063=6066,6065,6064
<6066=6073,6067
<6067=6068
<6068=6072,6069
<6069=6071,6070
<6073=6074
<6074=6091,6090,6075
<6075=6089,6076
<6076=6080,6077
<6077=6078
<6078=6079
<6080=6081
<6081=6083,6082
<6083=6085,6084
<6085=6086
<6086=6088,6087
<6105=6108,6107,6106
<6108=6174,6158,6109
<6109=6149,6110
<6110=6135,6129,6118,6111
<6111=6112
<6112=6114,6113
<6114=6115
<6115=6117,6116
<6118=6119
<6119=6123,6120
<6120=6121
<6121=6122
<6123=6124
<6124=6126,6125
<6126=6128,6127
<6129=6130
<6130=6132,6131
<6132=6134,6133
<6135=6136
<6136=6148,6147,6137
<6137=6146,6138
<6138=6145,6139
<6139=6141,6140
<6141=6142
<6142=6144,6143
<6149=6150
<6150=6157,6151
<6151=6153,6152
<6153=6154
<6154=6156,6155
<6158=6159
<6159=6173,6172,6160
<6160=6171,6161
<6161=6167,6162
<6162=6165,6163
<6163=6164
<6165=6166
<6167=6168
<6168=6170,6169
<6174=6176,6175
<6176=6177
<6177=6179,6178
<6179=6180
<6180=6182,6181
<6201=6204,6203,6202
<6204=6230,6211,6205
<6205=6206
<6206=6208,6207
<6208=6210,6209
<6211=6212
<6212=6229,6228,6213
<6213=6227,6214
<6214=6218,6215
<6215=6216
<6216=6217
<6218=6219
<6219=6221,6220
<6221=6223,6222
<6223=6224
<6224=6226,6225
<6230=6232,6231
<6232=6233
<6233=6235,6234
<6235=6236
<6236=6238,6237
<6255=6258,6257,6256
<6258=6284,6268,6264,6259
<6259=6260
<6260=6262,6261
<6262=6263
<6264=6265
<6265=6267,6266
<6268=6269
<6269=6275,6270
<6270=6273,6271
<6271=6272
<6273=6274
<6275=6276
<6276=6278,6277
<6278=6280,6279
<6280=6281
<6281=6283,6282
<6284=6286,6285
<6286=6287
<6287=6289,6288
<6289=6290
<6290=6292,6291
<6304=6307,6306,6305
<6307=6384,6308
<6308=6382,6344,6309
<6309=6310
<6310=6340,6311
<6311=6312
<6312=6336,6313
<6313=6325,6314
<6314=6315
<6315=6323,6316
<6316=6321,6319,6317
<6317=6318
<6319=6320
<6321=6322
<6323=6324
<6325=6326
<6326=6334,6327
<6327=6332,6330,6328
<6328=6329
<6330=6331
<6332=6333
<6334=6335
<6336=6337
<6337=6339,6338
<6340=6341
<6341=6343,6342
<6344=6378,6374,6345
<6345=6346
<6346=6370,6347
<6347=6359,6348
<6348=6349
<6349=6357,6350
<6350=6355,6353,6351
<6351=6352
<6353=6354
<6355=6356
<6357=6358
<6359=6360
<6360=6368,6361
<6361=6366,6364,6362
<6362=6363
<6364=6365
<6366=6367
<6368=6369
<6370=6371
<6371=6373,6372
<6374=6375
<6375=6377,6376
<6378=6379
<6379=6381,6380
<6382=6383
<6384=6386,6385
<6386=6387
<6387=6389,6388
<6389=6390
<6390=6392,6391
<6405=6408,6407,6406
<6408=6438,6414,6409
<6409=6410
<6410=6412,6411
<6412=6413
<6414=6434,6415
<6415=6420,6416
<6416=6417
<6417=6419,6418
<6420=6421
<6421=6425,6422
<6422=6423
<6423=6424
<6425=6426
<6426=6428,6427
<6428=6430,6429
<6430=6431
<6431=6433,6432
<6434=6435
<6435=6437,6436
<6438=6440,6439
<6440=6441
<6441=6443,6442
<6443=6444
<6444=6446,6445
<6457=6460,6459,6458
<6460=6472,6461
<6461=6462
<6462=6468,6463
<6463=6464
<6464=6465
<6465=6467,6466
<6468=6469
<6469=6471,6470
<6472=6474,6473
<6474=6475
<6475=6477,6476
<6477=6478
<6478=6480,6479
<6488=6491,6490,6489
<6491=6499,6492
<6492=6493
<6493=6495,6494
<6495=6496
<6496=6498,6497
<6499=6501,6500
<6501=6502
<6502=6504,6503
<6504=6505
<6505=6507,6506
<6515=6518,6517,6516
<6518=6546,6519
<6519=6539,6532,6520
<6520=6521
<6521=6522
<6522=6528,6523
<6523=6524
<6524=6525
<6525=6527,6526
<6528=6529
<6529=6531,6530
<6532=6533
<6533=6535,6534
<6535=6536
<6536=6538,6537
<6539=6540
<6540=6542,6541
<6542=6543
<6543=6545,6544
<6546=6548,6547
<6548=6549
<6549=6551,6550
<6551=6552
<6552=6554,6553
<6565=6568,6567,6566
<6568=6646,6641,6569
<6569=6591,6570
<6570=6575,6571
<6571=6572
<6572=6574,6573
<6575=6576
<6576=6590,6577
<6577=6587,6578
<6578=6584,6579
<6579=6581,6580
<6581=6583,6582
<6584=6586,6585
<6587=6589,6588
<6591=6592
<6592=6640,6593
<6593=6629,6594
<6594=6618,6595
<6595=6607,6596
<6596=6600,6597
<6597=6599,6598
<6600=6602,6601
<6602=6604,6603
<6604=6606,6605
<6607=6611,6608
<6608=6610,6609
<6611=6613,6612
<6613=6615,6614
<6615=6617,6616
<6618=6622,6619
<6619=6621,6620
<6622=6624,6623
<6624=6626,6625
<6626=6628,6627
<6629=6633,6630
<6630=6632,6631
<6633=6635,6634
<6635=6637,6636
<6637=6639,6638
<6641=6642
<6642=6644,6643
<6644=6645
<6646=6647
<6647=6649,6648
<6649=6650
<6668=6671,6670,6669
<6671=6672
<6672=6978,6673
<6673=6674
<6674=6969,6916,6675
<6675=6676
<6676=6888,6677
<6677=6886,6678
<6678=6871,6856,6679
<6679=6847,6775,6680
<6680=6681
<6681=6682
<6682=6767,6756,6753,6683
<6683=6684
<6684=6745,6732,6729,6685
<6685=6702,6686
<6686=6700,6687
<6687=6694,6688
<6688=6689
<6689=6691,6690
<6691=6693,6692
<6694=6695
<6695=6697,6696
<6697=6699,6698
<6700=6701
<6702=6703
<6703=6728,6727,6704
<6704=6726,6705
<6705=6711,6706
<6706=6707
<6707=6708
<6708=6710,6709
<6711=6712
<6712=6714,6713
<6714=6718,6715
<6715=6716
<6716=6717
<6718=6719
<6719=6721,6720
<6721=6723,6722
<6723=6725,6724
<6729=6731,6730
<6732=6733
<6733=6744,6734
<6734=6736,6735
<6736=6737
<6737=6739,6738
<6739=6741,6740
<6741=6743,6742
<6745=6746
<6746=6747
<6747=6752,6751,6748
<6748=6750,6749
<6753=6755,6754
<6756=6757
<6757=6766,6758
<6758=6760,6759
<6760=6761
<6761=6763,6762
<6763=6765,6764
<6767=6768
<6768=6769
<6769=6774,6773,6770
<6770=6772,6771
<6775=6776
<6776=6839,6825,6822,6777
<6777=6794,6778
<6778=6792,6779
<6779=6786,6780
<6780=6781
<6781=6783,6782
<6783=6785,6784
<6786=6787
<6787=6789,6788
<6789=6791,6790
<6792=6793
<6794=6795
<6795=6821,6820,6796
<6796=6819,6797
<6797=6803,6798
<6798=6799
<6799=6800
<6800=6802,6801
<6803=6804
<6804=6806,6805
<6806=6810,6807
<6807=6808
<6808=6809
<6810=6811
<6811=6813,6812
<6813=6815,6814
<6815=6816
<6816=6818,6817
<6822=6824,6823
<6825=6826
<6826=6838,6827
<6827=6829,6828
<6829=6830
<6830=6832,6831
<6832=6834,6833
<6834=6835
<6835=6837,6836
<6839=6840
<6840=6841
<6841=6846,6845,6842
<6842=6844,6843
<6847=6848
<6848=6855,6849
<6849=6851,6850
<6851=6852
<6852=6854,6853
<6856=6857
<6857=6870,6869,6858
<6858=6868,6859
<6859=6863,6860
<6860=6862,6861
<6863=6865,6864
<6865=6867,6866
<6871=6872
<6872=6885,6884,6873
<6873=6883,6874
<6874=6878,6875
<6875=6877,6876
<6878=6880,6879
<6880=6882,6881
<6886=6887
<6888=6889
<6889=6915,6914,6890
<6890=6913,6891
<6891=6897,6892
<6892=6893
<6893=6894
<6894=6896,6895
<6897=6898
<6898=6900,6899
<6900=6904,6901
<6901=6902
<6902=6903
<6904=6905
<6905=6907,6906
<6907=6909,6908
<6909=6910
<6910=6912,6911
<6916=6941,6917
<6917=6939,6918
<6918=6929,6919
<6919=6920
<6920=6926,6921
<6921=6923,6922
<6923=6925,6924
<6926=6928,6927
<6929=6930
<6930=6936,6931
<6931=6933,6932
<6933=6935,6934
<6936=6938,6937
<6939=6940
<6941=6942
<6942=6968,6967,6943
<6943=6966,6944
<6944=6950,6945
<6945=6946
<6946=6947
<6947=6949,6948
<6950=6951
<6951=6953,6952
<6953=6957,6954
<6954=6955
<6955=6956
<6957=6958
<6958=6960,6959
<6960=6962,6961
<6962=6963
<6963=6965,6964
<6969=6970
<6970=6977,6971
<6971=6973,6972
<6973=6974
<6974=6976,6975
<6978=6979
<7028=7031,7030,7029
<7031=7048,7032
<7032=7046,7033
<7033=7034
<7034=7035
<7035=7043,7036
<7036=7038,7037
<7038=7040,7039
<7040=7042,7041
<7043=7045,7044
<7046=7047
<7048=7049
<7049=7075,7074,7050
<7050=7073,7051
<7051=7057,7052
<7052=7053
<7053=7054
<7054=7056,7055
<7057=7058
<7058=7060,7059
<7060=7064,7061
<7061=7062
<7062=7063
<7064=7065
<7065=7067,7066
<7067=7069,7068
<7069=7070
<7070=7072,7071
<7098=7101,7100,7099
<7101=7106,7102
<7102=7103
<7103=7105,7104
<7106=7116,7107
<7107=7115,7109,7108
<7109=7110
<7110=7111
<7111=7113,7112
<7113=7114
<7116=7117
<7122=7125,7124,7123
<7125=7155,7150,7126
<7126=7148,7127
<7127=7140,7132,7128
<7128=7129
<7129=7131,7130
<7132=7133
<7133=7139,7134
<7134=7136,7135
<7136=7138,7137
<7140=7141
<7141=7147,7142
<7142=7144,7143
<7144=7146,7145
<7148=7149
<7150=7151
<7151=7153,7152
<7153=7154
<7155=7156
<7156=7158,7157
<7158=7159
<7174=7177,7176,7175
<7177=7192,7187,7178
<7178=7185,7179
<7179=7180
<7180=7181
<7181=7183,7182
<7183=7184
<7185=7186
<7187=7188
<7188=7190,7189
<7190=7191
<7192=7194,7193
<7194=7195
<7195=7197,7196
<7197=7198
<7198=7200,7199
<7208=7211,7210,7209
<7211=7496,7491,7212
<7212=7489,7213
<7213=7214
<7214=7480,7437,7215
<7215=7216
<7216=7409,7217
<7217=7407,7218
<7218=7392,7219
<7219=7383,7313,7220
<7220=7221
<7221=7222
<7222=7305,7294,7291,7223
<7223=7224
<7224=7283,7270,7267,7225
<7225=7240,7226
<7226=7238,7227
<7227=7228
<7228=7229
<7229=7235,7230
<7230=7234,7231
<7231=7233,7232
<7235=7237,7236
<7238=7239
<7240=7241
<7241=7266,7265,7242
<7242=7264,7243
<7243=7249,7244
<7244=7245
<7245=7246
<7246=7248,7247
<7249=7250
<7250=7252,7251
<7252=7256,7253
<7253=7254
<7254=7255
<7256=7257
<7257=7259,7258
<7259=7261,7260
<7261=7263,7262
<7267=7269,7268
<7270=7271
<7271=7282,7272
<7272=7274,7273
<7274=7275
<7275=7277,7276
<7277=7279,7278
<7279=7281,7280
<7283=7284
<7284=7285
<7285=7290,7289,7286
<7286=7288,7287
<7291=7293,7292
<7294=7295
<7295=7304,7296
<7296=7298,7297
<7298=7299
<7299=7301,7300
<7301=7303,7302
<7305=7306
<7306=7307
<7307=7312,7311,7308
<7308=7310,7309
<7313=7314
<7314=7375,7361,7358,7315
<7315=7330,7316
<7316=7328,7317
<7317=7318
<7318=7319
<7319=7325,7320
<7320=7324,7321
<7321=7323,7322
<7325=7327,7326
<7328=7329
<7330=7331
<7331=7357,7356,7332
<7332=7355,7333
<7333=7339,7334
<7334=7335
<7335=7336
<7336=7338,7337
<7339=7340
<7340=7342,7341
<7342=7346,7343
<7343=7344
<7344=7345
<7346=7347
<7347=7349,7348
<7349=7351,7350
<7351=7352
<7352=7354,7353
<7358=7360,7359
<7361=7362
<7362=7374,7363
<7363=7365,7364
<7365=7366
<7366=7368,7367
<7368=7370,7369
<7370=7371
<7371=7373,7372
<7375=7376
<7376=7377
<7377=7382,7381,7378
<7378=7380,7379
<7383=7384
<7384=7391,7385
<7385=7387,7386
<7387=7388
<7388=7390,7389
<7392=7393
<7393=7406,7405,7394
<7394=7404,7395
<7395=7399,7396
<7396=7398,7397
<7399=7401,7400
<7401=7403,7402
<7407=7408
<7409=7410
<7410=7436,7435,7411
<7411=7434,7412
<7412=7418,7413
<7413=7414
<7414=7415
<7415=7417,7416
<7418=7419
<7419=7421,7420
<7421=7425,7422
<7422=7423
<7423=7424
<7425=7426
<7426=7428,7427
<7428=7430,7429
<7430=7431
<7431=7433,7432
<7437=7452,7438
<7438=7450,7439
<7439=7440
<7440=7441
<7441=7447,7442
<7442=7446,7443
<7443=7445,7444
<7447=7449,7448
<7450=7451
<7452=7453
<7453=7479,7478,7454
<7454=7477,7455
<7455=7461,7456
<7456=7457
<7457=7458
<7458=7460,7459
<7461=7462
<7462=7464,7463
<7464=7468,7465
<7465=7466
<7466=7467
<7468=7469
<7469=7471,7470
<7471=7473,7472
<7473=7474
<7474=7476,7475
<7480=7481
<7481=7488,7482
<7482=7484,7483
<7484=7485
<7485=7487,7486
<7489=7490
<7491=7492
<7492=7494,7493
<7494=7495
<7496=7498,7497
<7498=7499
<7499=7501,7500
<7501=7502
<7502=7504,7503
<7552=7555,7554,7553
<7555=7620,7615,7556
<7556=7613,7557
<7557=7585,7558
<7558=7583,7559
<7559=7570,7560
<7560=7561
<7561=7567,7562
<7562=7564,7563
<7564=7566,7565
<7567=7569,7568
<7570=7571
<7571=7580,7572
<7572=7578,7573
<7573=7576,7574
<7574=7575
<7576=7577
<7578=7579
<7580=7582,7581
<7583=7584
<7585=7586
<7586=7612,7611,7587
<7587=7610,7588
<7588=7594,7589
<7589=7590
<7590=7591
<7591=7593,7592
<7594=7595
<7595=7597,7596
<7597=7601,7598
<7598=7599
<7599=7600
<7601=7602
<7602=7604,7603
<7604=7606,7605
<7606=7607
<7607=7609,7608
<7613=7614
<7615=7616
<7616=7618,7617
<7618=7619
<7620=7622,7621
<7622=7623
<7623=7625,7624
<7625=7626
<7626=7628,7627
<7655=7658,7657,7656
<7658=7659
<7659=7680,7660
<7660=7675,7661
<7661=7673,7662
<7662=7663
<7663=7664
<7664=7670,7665
<7665=7669,7666
<7666=7668,7667
<7670=7672,7671
<7673=7674
<7675=7676
<7676=7678,7677
<7678=7679
<7680=7681
<7681=7688,7682
<7682=7684,7683
<7684=7685
<7685=7687,7686
<7698=7701,7700,7699
<7701=7706,7702
<7702=7703
<7703=7705,7704
<7706=7987,7707
<7707=7986,7709,7708
<7709=7710
<7710=7984,7711
<7711=7712
<7712=7975,7927,7713
<7713=7714
<7714=7899,7715
<7715=7897,7716
<7716=7882,7717
<7717=7873,7807,7718
<7718=7719
<7719=7720
<7720=7799,7788,7785,7721
<7721=7722
<7722=7777,7764,7761,7723
<7723=7734,7724
<7724=7732,7725
<7725=7726
<7726=7727
<7727=7729,7728
<7729=7731,7730
<7732=7733
<7734=7735
<7735=7760,7759,7736
<7736=7758,7737
<7737=7743,7738
<7738=7739
<7739=7740
<7740=7742,7741
<7743=7744
<7744=7746,7745
<7746=7750,7747
<7747=7748
<7748=7749
<7750=7751
<7751=7753,7752
<7753=7755,7754
<7755=7757,7756
<7761=7763,7762
<7764=7765
<7765=7776,7766
<7766=7768,7767
<7768=7769
<7769=7771,7770
<7771=7773,7772
<7773=7775,7774
<7777=7778
<7778=7779
<7779=7784,7783,7780
<7780=7782,7781
<7785=7787,7786
<7788=7789
<7789=7798,7790
<7790=7792,7791
<7792=7793
<7793=7795,7794
<7795=7797,7796
<7799=7800
<7800=7801
<7801=7806,7805,7802
<7802=7804,7803
<7807=7808
<7808=7865,7851,7848,7809
<7809=7820,7810
<7810=7818,7811
<7811=7812
<7812=7813
<7813=7815,7814
<7815=7817,7816
<7818=7819
<7820=7821
<7821=7847,7846,7822
<7822=7845,7823
<7823=7829,7824
<7824=7825
<7825=7826
<7826=7828,7827
<7829=7830
<7830=7832,7831
<7832=7836,7833
<7833=7834
<7834=7835
<7836=7837
<7837=7839,7838
<7839=7841,7840
<7841=7842
<7842=7844,7843
<7848=7850,7849
<7851=7852
<7852=7864,7853
<7853=7855,7854
<7855=7856
<7856=7858,7857
<7858=7860,7859
<7860=7861
<7861=7863,7862
<7865=7866
<7866=7867
<7867=7872,7871,7868
<7868=7870,7869
<7873=7874
<7874=7881,7875
<7875=7877,7876
<7877=7878
<7878=7880,7879
<7882=7883
<7883=7896,7895,7884
<7884=7894,7885
<7885=7889,7886
<7886=7888,7887
<7889=7891,7890
<7891=7893,7892
<7897=7898
<7899=7900
<7900=7926,7925,7901
<7901=7924,7902
<7902=7908,7903
<7903=7904
<7904=7905
<7905=7907,7906
<7908=7909
<7909=7911,7910
<7911=7915,7912
<7912=7913
<7913=7914
<7915=7916
<7916=7918,7917
<7918=7920,7919
<7920=7921
<7921=7923,7922
<7927=7947,7928
<7928=7945,7929
<7929=7930
<7930=7931
<7931=7942,7932
<7932=7940,7933
<7933=7934
<7934=7935
<7935=7937,7936
<7937=7939,7938
<7940=7941
<7942=7944,7943
<7945=7946
<7947=7948
<7948=7974,7973,7949
<7949=7972,7950
<7950=7956,7951
<7951=7952
<7952=7953
<7953=7955,7954
<7956=7957
<7957=7959,7958
<7959=7963,7960
<7960=7961
<7961=7962
<7963=7964
<7964=7966,7965
<7966=7968,7967
<7968=7969
<7969=7971,7970
<7975=7976
<7976=7983,7977
<7977=7979,7978
<7979=7980
<7980=7982,7981
<7984=7985
<7987=7988
<8035=8038,8037,8036
<8042=8045,8044,8043
<8045=8178,8046
<8046=8172,8047
<8047=8153,8146,8130,8109,8102,8086,8048
<8048=8082,8049
<8049=8074,8066,8058,8050
<8050=8051
<8051=8055,8052
<8052=8054,8053
<8055=8057,8056
<8058=8059
<8059=8063,8060
<8060=8062,8061
<8063=8065,8064
<8066=8067
<8067=8071,8068
<8068=8070,8069
<8071=8073,8072
<8074=8075
<8075=8079,8076
<8076=8078,8077
<8079=8081,8080
<8082=8083
<8083=8085,8084
<8086=8100,8087
<8087=8088
<8088=8099,8089
<8089=8095,8090
<8090=8091
<8091=8092
<8092=8094,8093
<8095=8096
<8096=8098,8097
<8100=8101
<8102=8103
<8103=8108,8107,8104
<8104=8106,8105
<8109=8110
<8110=8129,8128,8111
<8111=8127,8112
<8112=8118,8113
<8113=8114
<8114=8115
<8115=8117,8116
<8118=8119
<8119=8121,8120
<8121=8123,8122
<8123=8124
<8124=8126,8125
<8130=8144,8131
<8131=8132
<8132=8143,8133
<8133=8139,8134
<8134=8135
<8135=8136
<8136=8138,8137
<8139=8140
<8140=8142,8141
<8144=8145
<8146=8147
<8147=8152,8151,8148
<8148=8150,8149
<8153=8154
<8154=8171,8170,8155
<8155=8169,8156
<8156=8160,8157
<8157=8158
<8158=8159
<8160=8161
<8161=8163,8162
<8163=8165,8164
<8165=8166
<8166=8168,8167
<8172=8173
<8173=8177,8174
<8174=8176,8175
<8178=8179
<8179=8181,8180
<8181=8182
<8214=8217,8216,8215
<8217=8218
<8218=8242,8231,8219
<8219=8220
<8220=8221
<8221=8227,8222
<8222=8223
<8223=8224
<8224=8226,8225
<8227=8228
<8228=8230,8229
<8231=8232
<8232=8238,8233
<8233=8234
<8234=8235
<8235=8237,8236
<8238=8239
<8239=8241,8240
<8242=8243
<8243=8247,8244
<8244=8245
<8245=8246
<8247=8248
<8248=8250,8249
<8259=8262,8261,8260
<8262=8315,8311,8307,8302,8289,8280,8276,8271,8263
<8263=8269,8264
<8264=8265
<8265=8267,8266
<8267=8268
<8269=8270
<8271=8272
<8272=8274,8273
<8274=8275
<8276=8277
<8277=8279,8278
<8280=8281
<8281=8285,8282
<8282=8283
<8283=8284
<8285=8286
<8286=8288,8287
<8289=8290
<8290=8299,8291
<8291=8297,8292
<8292=8295,8293
<8293=8294
<8295=8296
<8297=8298
<8299=8301,8300
<8302=8303
<8303=8305,8304
<8305=8306
<8307=8308
<8308=8310,8309
<8311=8312
<8312=8314,8313
<8315=8316
<8316=8318,8317
<8318=8319
<8332=8335,8334,8333
<8335=8369,8336
<8336=8358,8345,8337
<8337=8338
<8338=8339
<8339=8341,8340
<8341=8342
<8342=8344,8343
<8345=8346
<8346=8352,8347
<8347=8348
<8348=8349
<8349=8351,8350
<8352=8353
<8353=8355,8354
<8355=8357,8356
<8358=8359
<8359=8368,8360
<8360=8362,8361
<8362=8363
<8363=8365,8364
<8365=8367,8366
<8369=8371,8370
<8371=8372
<8372=8374,8373
<8374=8375
<8375=8377,8376
<8387=8390,8389,8388
<8390=8391
<8391=8392
<8392=8394,8393
<8394=8395
<8395=8397,8396
<8402=8405,8404,8403
<8405=8433,8406
<8406=8424,8407
<8407=8417,8413,8408
<8408=8409
<8409=8411,8410
<8411=8412
<8413=8414
<8414=8416,8415
<8417=8418
<8418=8420,8419
<8420=8421
<8421=8423,8422
<8424=8425
<8425=8432,8426
<8426=8428,8427
<8428=8429
<8429=8431,8430
<8433=8435,8434
<8435=8436
<8436=8438,8437
<8438=8439
<8439=8441,8440
<8453=8456,8455,8454
<8456=8484,8457
<8457=8475,8458
<8458=8468,8464,8459
<8459=8460
<8460=8462,8461
<8462=8463
<8464=8465
<8465=8467,8466
<8468=8469
<8469=8471,8470
<8471=8472
<8472=8474,8473
<8475=8476
<8476=8483,8477
<8477=8479,8478
<8479=8480
<8480=8482,8481
<8484=8486,8485
<8486=8487
<8487=8489,8488
<8489=8490
<8490=8492,8491
<8504=8507,8506,8505
<8507=8543,8531,8508
<8508=8529,8509
<8509=8522,8515,8510
<8510=8511
<8511=8513,8512
<8513=8514
<8515=8516
<8516=8518,8517
<8518=8519
<8519=8521,8520
<8522=8523
<8523=8527,8524
<8524=8525
<8525=8526
<8527=8528
<8529=8530
<8531=8532
<8532=8542,8541,8533
<8533=8540,8534
<8534=8536,8535
<8536=8537
<8537=8539,8538
<8543=8545,8544
<8545=8546
<8546=8548,8547
<8548=8549
<8549=8551,8550
<8562=8565,8564,8563
<8565=8605,8591,8582,8576,8571,8566
<8566=8567
<8567=8569,8568
<8569=8570
<8571=8572
<8572=8574,8573
<8574=8575
<8576=8577
<8577=8579,8578
<8579=8581,8580
<8582=8584,8583
<8584=8585
<8585=8587,8586
<8587=8588
<8588=8590,8589
<8591=8592
<8592=8604,8603,8593
<8593=8602,8594
<8594=8598,8595
<8595=8596
<8596=8597
<8598=8599
<8599=8601,8600
<8605=8607,8606
<8607=8608
<8608=8610,8609
<8610=8611
<8611=8613,8612
<8626=8629,8628,8627
<8629=8667,8653,8644,8639,8630
<8630=8631
<8631=8635,8632
<8632=8633
<8633=8634
<8635=8636
<8636=8638,8637
<8639=8640
<8640=8642,8641
<8642=8643
<8644=8646,8645
<8646=8647
<8647=8649,8648
<8649=8650
<8650=8652,8651
<8653=8654
<8654=8666,8665,8655
<8655=8664,8656
<8656=8660,8657
<8657=8658
<8658=8659
<8660=8661
<8661=8663,8662
<8667=8669,8668
<8669=8670
<8670=8672,8671
<8672=8673
<8673=8675,8674
<8686=8692,8691,8687
<8687=8688
<8688=8690,8689
<8692=8774,8767,8760,8693
<8693=8752,8743,8740,8694
<8694=8734,8695
<8695=8732,8711,8696
<8696=8697
<8697=8703,8698
<8698=8699
<8699=8700
<8700=8702,8701
<8703=8704
<8704=8708,8705
<8705=8707,8706
<8708=8710,8709
<8711=8712
<8712=8713
<8713=8715,8714
<8715=8717,8716
<8717=8723,8718
<8718=8719
<8719=8720
<8720=8722,8721
<8723=8724
<8724=8726,8725
<8726=8728,8727
<8728=8729
<8729=8731,8730
<8732=8733
<8734=8735
<8735=8739,8736
<8736=8738,8737
<8740=8742,8741
<8743=8744
<8744=8751,8745
<8745=8747,8746
<8747=8748
<8748=8750,8749
<8752=8753
<8753=8754
<8754=8759,8758,8755
<8755=8757,8756
<8760=8761
<8761=8766,8765,8762
<8762=8764,8763
<8767=8768
<8768=8773,8772,8769
<8769=8771,8770
<8774=8776,8775
<8776=8777
<8777=8779,8778
<8779=8780
<8780=8782,8781
<8810=8813,8812,8811
<8813=8825,8819,8814
<8814=8815
<8815=8817,8816
<8817=8818
<8819=8820
<8820=8824,8821
<8821=8823,8822
<8825=8827,8826
<8827=8828
<8828=8830,8829
<8830=8831
<8831=8833,8832
<8841=8844,8843,8842
<8844=8899,8845
<8845=8891,8880,8877,8846
<8846=8867,8857,8847
<8847=8848
<8848=8850,8849
<8850=8852,8851
<8852=8854,8853
<8854=8856,8855
<8857=8858
<8858=8860,8859
<8860=8862,8861
<8862=8864,8863
<8864=8866,8865
<8867=8868
<8868=8870,8869
<8870=8872,8871
<8872=8874,8873
<8874=8876,8875
<8877=8879,8878
<8880=8881
<8881=8890,8882
<8882=8884,8883
<8884=8885
<8885=8887,8886
<8887=8889,8888
<8891=8892
<8892=8893
<8893=8898,8897,8894
<8894=8896,8895
<8899=8901,8900
<8901=8902
<8902=8904,8903
<8923=8926,8925,8924
<8926=8927
<8927=8939,8928
<8928=8929
<8929=8938,8930
<8930=8934,8931
<8931=8932
<8932=8933
<8934=8935
<8935=8937,8936
<8939=8940
<8940=8942,8941
<8952=8955,8954,8953
<8955=8989,8956
<8956=8981,8970,8967,8957
<8957=8958
<8958=8960,8959
<8960=8962,8961
<8962=8964,8963
<8964=8966,8965
<8967=8969,8968
<8970=8971
<8971=8980,8972
<8972=8974,8973
<8974=8975
<8975=8977,8976
<8977=8979,8978
<8981=8982
<8982=8983
<8983=8988,8987,8984
<8984=8986,8985
<8989=8991,8990
<8991=8992
<8992=8994,8993
<8994=8995
<8995=8997,8996
<9017=9020,9019,9018
<9020=9030,9026,9021
<9021=9022
<9022=9024,9023
<9024=9025
<9026=9027
<9027=9029,9028
<9030=9032,9031
<9032=9033
<9033=9035,9034
<9035=9036
<9036=9038,9037
<9047=9050,9049,9048
<9050=9074,9065,9056,9051
<9051=9052
<9052=9054,9053
<9054=9055
<9056=9061,9057
<9057=9058
<9058=9060,9059
<9061=9062
<9062=9064,9063
<9065=9066
<9066=9073,9072,9067
<9067=9071,9068
<9068=9070,9069
<9074=9076,9075
<9076=9077
<9077=9079,9078
<9079=9080
<9080=9082,9081
<9092=9095,9094,9093
<9095=9116,9110,9096
<9096=9097
<9097=9106,9098
<9098=9099
<9099=9100
<9100=9102,9101
<9102=9103
<9103=9105,9104
<9106=9107
<9107=9109,9108
<9110=9111
<9111=9115,9112
<9112=9114,9113
<9116=9117
<9117=9119,9118
<9126=9129,9128,9127
<9129=9139,9135,9130
<9130=9131
<9131=9133,9132
<9133=9134
<9135=9136
<9136=9138,9137
<9139=9141,9140
<9141=9142
<9142=9144,9143
<9144=9145
<9145=9147,9146
<9155=9158,9157,9156
<9158=9182,9173,9164,9159
<9159=9160
<9160=9162,9161
<9162=9163
<9164=9169,9165
<9165=9166
<9166=9168,9167
<9169=9170
<9170=9172,9171
<9173=9174
<9174=9181,9180,9175
<9175=9179,9176
<9176=9178,9177
<9182=9184,9183
<9184=9185
<9185=9187,9186
<9187=9188
<9188=9190,9189
<9199=9202,9201,9200
<9202=9223,9217,9203
<9203=9204
<9204=9213,9205
<9205=9206
<9206=9207
<9207=9209,9208
<9209=9210
<9210=9212,9211
<9213=9214
<9214=9216,9215
<9217=9218
<9218=9222,9219
<9219=9221,9220
<9223=9224
<9224=9226,9225
