>3	FunctionDef	fail (int err , boost 
>4	ParameterList	int err , boost 
>5	Parameter	 
>6	Identifier	ec
>7	ParameterType	boost 
>8	Parameter	 
>9	Identifier	err
>10	ParameterType	int
>11	ReturnType	void
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	ExpressionStatement	 
>15	CallExpression	ec -> assign ( err , boost 
>16	ArgumentList	err
>17	Argument	boost 
>18	CallExpression	boost 
>19	ArgumentList	 
>20	Callee	boost 
>21	Identifier	boost 
>22	Argument	err
>23	Identifier	err
>24	Callee	ec -> assign
>25	PtrMemberAccess	ec -> assign
>26	Identifier	assign
>27	Identifier	ec
>28	IfStatement	if ( ec == 0 )
>29	ExpressionStatement	 
>30	CallExpression	BOOST_FILESYSTEM_THROW ( boost 
>31	ArgumentList	boost 
>32	Argument	boost 
>33	CallExpression	boost 
>34	ArgumentList	err
>35	Argument	\"boost
>36	PrimaryExpression	\"boost
>37	Argument	boost 
>38	CallExpression	boost 
>39	ArgumentList	 
>40	Callee	boost 
>41	Identifier	boost 
>42	Argument	err
>43	Identifier	err
>44	Callee	boost 
>45	Identifier	boost 
>46	Callee	BOOST_FILESYSTEM_THROW
>47	Identifier	BOOST_FILESYSTEM_THROW
>48	Condition	 
>49	EqualityExpression	ec == 0
>50	PrimaryExpression	0
>51	Identifier	ec
>59	FunctionDef	system_crypt_random (void * buf , std 
>60	ParameterList	void * buf , std 
>61	Parameter	 
>62	Identifier	ec
>63	ParameterType	boost 
>64	Parameter	 
>65	Identifier	len
>66	ParameterType	std 
>67	Parameter	 
>68	Identifier	buf
>69	ParameterType	void *
>70	ReturnType	void
>71	CompoundStatement	 
>72	Statement	 
>73	ExpressionStatement	 
>74	CallExpression	fail ( errval , ec )
>75	ArgumentList	errval
>76	Argument	ec
>77	Identifier	ec
>78	Argument	errval
>79	Identifier	errval
>80	Callee	fail
>81	Identifier	fail
>82	IfStatement	if ( ! errval )
>83	ReturnStatement	 
>84	Condition	 
>85	UnaryOp	! errval
>86	Identifier	errval
>87	UnaryOperator	!
>88	IfStatement	if ( ! errval )
>89	CompoundStatement	 
>90	ExpressionStatement	 
>91	CallExpression	CryptReleaseContext ( handle , 0 )
>92	ArgumentList	handle
>93	Argument	0
>94	PrimaryExpression	0
>95	Argument	handle
>96	Identifier	handle
>97	Callee	CryptReleaseContext
>98	Identifier	CryptReleaseContext
>99	Statement	 
>100	ExpressionStatement	 
>101	CallExpression	GetLastError ( )
>102	ArgumentList	 
>103	Callee	GetLastError
>104	Identifier	GetLastError
>105	Statement	 
>106	Statement	 
>107	IfStatement	if ( ! gen_ok )
>108	Statement	 
>109	Condition	 
>110	UnaryOp	! gen_ok
>111	Identifier	gen_ok
>112	UnaryOperator	!
>113	ExpressionStatement	 
>114	Statement	 
>115	Statement	 
>116	Statement	 
>117	Statement	 
>118	Statement	 
>119	Statement	 
>120	Statement	 
>121	Statement	 
>122	Statement	 
>123	Statement	 
>124	Statement	 
>125	Statement	 
>126	Statement	 
>127	Statement	 
>128	Statement	 
>129	Statement	 
>130	Statement	 
>131	Statement	 
>132	Statement	 
>133	Statement	 
>134	Condition	 
>135	UnaryOp	! errval
>136	Identifier	errval
>137	UnaryOperator	!
>138	CompoundStatement	 
>139	IfStatement	if ( errval == NTE_BAD_KEYSET )
>140	ElseStatement	else
>141	ExpressionStatement	 
>142	AssignmentExpr	errval = 0
>143	PrimaryExpression	0
>144	Identifier	errval
>145	CompoundStatement	 
>146	CompoundStatement	 
>147	ExpressionStatement	 
>148	CallExpression	GetLastError ( )
>149	ArgumentList	 
>150	Callee	GetLastError
>151	Identifier	GetLastError
>152	Statement	 
>153	Statement	 
>154	Statement	 
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	Statement	 
>166	Statement	 
>167	Statement	 
>168	Statement	 
>169	Statement	 
>170	Statement	 
>171	Statement	 
>172	Statement	 
>173	Condition	 
>174	EqualityExpression	errval == NTE_BAD_KEYSET
>175	Identifier	NTE_BAD_KEYSET
>176	Identifier	errval
>177	ExpressionStatement	 
>178	CallExpression	GetLastError ( )
>179	ArgumentList	 
>180	Callee	GetLastError
>181	Identifier	GetLastError
>182	Statement	 
>183	Statement	 
>184	Statement	 
>185	Statement	 
>186	Statement	 
>187	Statement	 
>188	Statement	 
>189	Statement	 
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	Statement	 
>200	Statement	 
>201	Statement	 
>202	Statement	 
>203	IdentifierDeclStatement	 
>204	IdentifierDecl	errval = 0
>205	AssignmentExpr	errval = 0
>206	PrimaryExpression	0
>207	Identifier	errval
>208	Identifier	errval
>209	IdentifierDeclType	int
>210	ExpressionStatement	 
>211	CallExpression	close ( file )
>212	ArgumentList	file
>213	Argument	file
>214	Identifier	file
>215	Callee	close
>216	Identifier	close
>217	WhileStatement	while ( bytes_read < len )
>218	CompoundStatement	 
>219	ExpressionStatement	 
>220	CastExpression	( buf ) + n
>221	UnaryOp	+ n
>222	Identifier	n
>223	UnaryOperator	+
>224	CastTarget	buf
>225	Statement	 
>226	Statement	 
>227	Statement	 
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	Statement	 
>232	ExpressionStatement	 
>233	AssignmentExpr	bytes_read += n
>234	Identifier	n
>235	Identifier	bytes_read
>236	IfStatement	if ( n == - 1 )
>237	CompoundStatement	 
>238	ReturnStatement	 
>239	ExpressionStatement	 
>240	CallExpression	fail ( errno , ec )
>241	ArgumentList	errno
>242	Argument	ec
>243	Identifier	ec
>244	Argument	errno
>245	Identifier	errno
>246	Callee	fail
>247	Identifier	fail
>248	ExpressionStatement	 
>249	CallExpression	close ( file )
>250	ArgumentList	file
>251	Argument	file
>252	Identifier	file
>253	Callee	close
>254	Identifier	close
>255	Condition	 
>256	EqualityExpression	n == - 1
>257	UnaryOp	- 1
>258	PrimaryExpression	1
>259	UnaryOperator	-
>260	Identifier	n
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	n = read ( file , buf , len - bytes_read )
>263	AssignmentExpr	n = read ( file , buf , len - bytes_read )
>264	CallExpression	read ( file , buf , len - bytes_read )
>265	ArgumentList	file
>266	Argument	len - bytes_read
>267	AdditiveExpression	len - bytes_read
>268	Identifier	bytes_read
>269	Identifier	len
>270	Argument	buf
>271	Identifier	buf
>272	Argument	file
>273	Identifier	file
>274	Callee	read
>275	Identifier	read
>276	Identifier	n
>277	Identifier	n
>278	IdentifierDeclType	ssize_t
>279	Condition	 
>280	RelationalExpression	bytes_read < len
>281	Identifier	len
>282	Identifier	bytes_read
>283	IdentifierDeclStatement	 
>284	IdentifierDecl	bytes_read = 0
>285	AssignmentExpr	bytes_read = 0
>286	PrimaryExpression	0
>287	Identifier	bytes_read
>288	Identifier	bytes_read
>289	IdentifierDeclType	size_t
>290	IfStatement	if ( file == - 1 )
>291	ElseStatement	else
>292	IdentifierDeclStatement	 
>293	IdentifierDecl	handle
>294	Identifier	handle
>295	IdentifierDeclType	HCRYPTPROV
>296	CompoundStatement	 
>297	IfStatement	if ( file == - 1 )
>298	CompoundStatement	 
>299	ReturnStatement	 
>300	ExpressionStatement	 
>301	CallExpression	fail ( errno , ec )
>302	ArgumentList	errno
>303	Argument	ec
>304	Identifier	ec
>305	Argument	errno
>306	Identifier	errno
>307	Callee	fail
>308	Identifier	fail
>309	Condition	 
>310	EqualityExpression	file == - 1
>311	UnaryOp	- 1
>312	PrimaryExpression	1
>313	UnaryOperator	-
>314	Identifier	file
>315	ExpressionStatement	 
>316	AssignmentExpr	file = open ( \"/dev/random\" , O_RDONLY )
>317	CallExpression	open ( \"/dev/random\" , O_RDONLY )
>318	ArgumentList	\"/dev/random\"
>319	Argument	O_RDONLY
>320	Identifier	O_RDONLY
>321	Argument	\"/dev/random\"
>322	PrimaryExpression	\"/dev/random\"
>323	Callee	open
>324	Identifier	open
>325	Identifier	file
>326	Condition	 
>327	EqualityExpression	file == - 1
>328	UnaryOp	- 1
>329	PrimaryExpression	1
>330	UnaryOperator	-
>331	Identifier	file
>332	IdentifierDeclStatement	 
>333	IdentifierDecl	file = open ( \"/dev/urandom\" , O_RDONLY )
>334	AssignmentExpr	file = open ( \"/dev/urandom\" , O_RDONLY )
>335	CallExpression	open ( \"/dev/urandom\" , O_RDONLY )
>336	ArgumentList	\"/dev/urandom\"
>337	Argument	O_RDONLY
>338	Identifier	O_RDONLY
>339	Argument	\"/dev/urandom\"
>340	PrimaryExpression	\"/dev/urandom\"
>341	Callee	open
>342	Identifier	open
>343	Identifier	file
>344	Identifier	file
>345	IdentifierDeclType	ifdef BOOST_POSIX_API int
>363	FunctionDef	unique_path (const path & model , system 
>364	ParameterList	const path & model , system 
>365	Parameter	 
>366	Identifier	ec
>367	ParameterType	system 
>368	Parameter	 
>369	Identifier	model
>370	ParameterType	const path &
>371	ReturnType	BOOST_FILESYSTEM_DECL path
>372	CompoundStatement	 
>373	ReturnStatement	 
>374	Identifier	s
>375	IfStatement	if ( ec != 0 )
>376	ExpressionStatement	 
>377	CallExpression	ec -> clear ( )
>378	ArgumentList	 
>379	Callee	ec -> clear
>380	PtrMemberAccess	ec -> clear
>381	Identifier	clear
>382	Identifier	ec
>383	Condition	 
>384	EqualityExpression	ec != 0
>385	PrimaryExpression	0
>386	Identifier	ec
>387	ForStatement	for ( std 
>388	CompoundStatement	 
>389	CompoundStatement	 
>390	ExpressionStatement	 
>391	AssignmentExpr	s [ i ] = hex [ c & 0xf ]
>392	ArrayIndexing	hex [ c & 0xf ]
>393	BitAndExpression	c & 0xf
>394	PrimaryExpression	0xf
>395	Identifier	c
>396	Identifier	hex
>397	ArrayIndexing	s [ i ]
>398	Identifier	i
>399	Identifier	s
>400	ExpressionStatement	 
>401	AssignmentExpr	c >>= 4 * ( nibbles_used ++ & 1 )
>402	MultiplicativeExpression	4 * ( nibbles_used ++ & 1 )
>403	BitAndExpression	nibbles_used ++ & 1
>404	PrimaryExpression	1
>405	IncDecOp	nibbles_used ++
>406	IncDec	++
>407	Identifier	nibbles_used
>408	PrimaryExpression	4
>409	Identifier	c
>410	IdentifierDeclStatement	 
>411	IdentifierDecl	c = ran [ nibbles_used / 2 ]
>412	AssignmentExpr	c = ran [ nibbles_used / 2 ]
>413	ArrayIndexing	ran [ nibbles_used / 2 ]
>414	MultiplicativeExpression	nibbles_used / 2
>415	PrimaryExpression	2
>416	Identifier	nibbles_used
>417	Identifier	ran
>418	Identifier	c
>419	Identifier	c
>420	IdentifierDeclType	int
>421	IfStatement	if ( nibbles_used == max_nibbles )
>422	CompoundStatement	 
>423	ExpressionStatement	 
>424	AssignmentExpr	nibbles_used = 0
>425	PrimaryExpression	0
>426	Identifier	nibbles_used
>427	IfStatement	if ( ec != 0 && * ec )
>428	ReturnStatement	 
>429	CallExpression	path ( )
>430	ArgumentList	 
>431	Callee	path
>432	Identifier	path
>433	Condition	 
>434	AndExpression	ec != 0 && * ec
>435	UnaryOp	* ec
>436	Identifier	ec
>437	UnaryOperator	*
>438	EqualityExpression	ec != 0
>439	PrimaryExpression	0
>440	Identifier	ec
>441	ExpressionStatement	 
>442	CallExpression	system_crypt_random ( ran , sizeof ( ran ) , ec )
>443	ArgumentList	ran
>444	Argument	ec
>445	Identifier	ec
>446	Argument	sizeof ( ran )
>447	SizeofExpr	sizeof ( ran )
>448	SizeofOperand	ran
>449	Sizeof	sizeof
>450	Argument	ran
>451	Identifier	ran
>452	Callee	system_crypt_random
>453	Identifier	system_crypt_random
>454	Condition	 
>455	EqualityExpression	nibbles_used == max_nibbles
>456	Identifier	max_nibbles
>457	Identifier	nibbles_used
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	UnaryExpression	 
>469	Identifier	i
>470	IncDec	++
>471	Condition	 
>472	RelationalExpression	i < s . size ( )
>473	CallExpression	s . size ( )
>474	ArgumentList	 
>475	Callee	s . size
>476	MemberAccess	s . size
>477	Identifier	size
>478	Identifier	s
>479	Identifier	i
>480	ForInit	 
>481	IdentifierDeclStatement	std 
>482	IdentifierDecl	i = 0
>483	AssignmentExpr	i = 0
>484	PrimaryExpression	0
>485	Identifier	i
>486	Identifier	i
>487	IdentifierDeclType	std 
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	nibbles_used = max_nibbles
>490	AssignmentExpr	nibbles_used = max_nibbles
>491	Identifier	max_nibbles
>492	Identifier	max_nibbles
>493	Identifier	nibbles_used
>494	IdentifierDeclType	int
>495	IdentifierDeclStatement	 
>496	IdentifierDecl	ran [ n_ran ]
>497	Identifier	n_ran
>498	Identifier	ran
>499	IdentifierDeclType	char [ n_ran ]
>500	IdentifierDeclStatement	 
>501	IdentifierDecl	max_nibbles = 2 * n_ran
>502	AssignmentExpr	max_nibbles = 2 * n_ran
>503	MultiplicativeExpression	2 * n_ran
>504	Identifier	n_ran
>505	PrimaryExpression	2
>506	Identifier	max_nibbles
>507	Identifier	max_nibbles
>508	IdentifierDeclType	const int
>509	IdentifierDeclStatement	 
>510	IdentifierDecl	n_ran = 16
>511	AssignmentExpr	n_ran = 16
>512	PrimaryExpression	16
>513	Identifier	n_ran
>514	Identifier	n_ran
>515	IdentifierDeclType	const int
>516	ExpressionStatement	 
>517	PrimaryExpression	\"0123456789abcdef\"
>518	Statement	 
>519	Statement	 
>520	Statement	 
>521	Statement	 
>522	Statement	 
>523	Statement	 
>524	Statement	 
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	s ( model . wstring ( ) )
>527	CallExpression	model . wstring ( )
>528	ArgumentList	 
>529	Callee	model . wstring
>530	MemberAccess	model . wstring
>531	Identifier	wstring
>532	Identifier	model
>533	Identifier	s
>534	IdentifierDeclType	std 
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=28,14,13
<14=15
<15=24,16
<16=22,17
<17=18
<18=20,19
<20=21
<22=23
<24=25
<25=27,26
<28=48,29
<29=30
<30=46,31
<31=32
<32=33
<33=44,34
<34=42,37,35
<35=36
<37=38
<38=40,39
<40=41
<42=43
<44=45
<46=47
<48=49
<49=51,50
<59=71,70,60
<60=67,64,61
<61=63,62
<64=66,65
<67=69,68
<71=332,290,283,217,210,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,138,88,82,73,72
<73=74
<74=80,75
<75=78,76
<76=77
<78=79
<80=81
<82=84,83
<84=85
<85=87,86
<88=134,89
<89=133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,107,106,105,100,99,90
<90=91
<91=97,92
<92=95,93
<93=94
<95=96
<97=98
<100=101
<101=103,102
<103=104
<107=109,108
<109=110
<110=112,111
<134=135
<135=137,136
<138=184,183,182,177,139
<139=173,145,140
<140=141
<141=142
<142=144,143
<145=172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,146
<146=154,153,152,147
<147=148
<148=150,149
<150=151
<173=174
<174=176,175
<177=178
<178=180,179
<180=181
<203=204
<204=209,208,205
<205=207,206
<210=211
<211=215,212
<212=213
<213=214
<215=216
<217=279,218
<218=261,236,232,231,230,229,228,227,226,225,219
<219=220
<220=224,221
<221=223,222
<232=233
<233=235,234
<236=255,237
<237=248,239,238
<239=240
<240=246,241
<241=244,242
<242=243
<244=245
<246=247
<248=249
<249=253,250
<250=251
<251=252
<253=254
<255=256
<256=260,257
<257=259,258
<261=262
<262=278,277,263
<263=276,264
<264=274,265
<265=272,270,266
<266=267
<267=269,268
<270=271
<272=273
<274=275
<279=280
<280=282,281
<283=284
<284=289,288,285
<285=287,286
<290=326,296,291
<291=292
<292=293
<293=295,294
<296=315,297
<297=309,298
<298=300,299
<300=301
<301=307,302
<302=305,303
<303=304
<305=306
<307=308
<309=310
<310=314,311
<311=313,312
<315=316
<316=325,317
<317=323,318
<318=321,319
<319=320
<321=322
<323=324
<326=327
<327=331,328
<328=330,329
<332=333
<333=345,344,334
<334=343,335
<335=341,336
<336=339,337
<337=338
<339=340
<341=342
<363=372,371,364
<364=368,365
<365=367,366
<368=370,369
<372=525,524,523,522,521,520,519,518,516,509,500,495,488,387,375,373
<373=374
<375=383,376
<376=377
<377=379,378
<379=380
<380=382,381
<383=384
<384=386,385
<387=480,471,468,388
<388=467,466,465,464,463,462,461,460,459,458,389
<389=421,410,400,390
<390=391
<391=397,392
<392=396,393
<393=395,394
<397=399,398
<400=401
<401=409,402
<402=408,403
<403=405,404
<405=407,406
<410=411
<411=420,419,412
<412=418,413
<413=417,414
<414=416,415
<421=454,422
<422=441,427,423
<423=424
<424=426,425
<427=433,428
<428=429
<429=431,430
<431=432
<433=434
<434=438,435
<435=437,436
<438=440,439
<441=442
<442=452,443
<443=450,446,444
<444=445
<446=447
<447=449,448
<450=451
<452=453
<454=455
<455=457,456
<468=470,469
<471=472
<472=479,473
<473=475,474
<475=476
<476=478,477
<480=481
<481=482
<482=487,486,483
<483=485,484
<488=489
<489=494,493,490
<490=492,491
<495=496
<496=499,498,497
<500=501
<501=508,507,502
<502=506,503
<503=505,504
<509=510
<510=515,514,511
<511=513,512
<516=517
<525=526
<526=534,533,527
<527=529,528
<529=530
<530=532,531
