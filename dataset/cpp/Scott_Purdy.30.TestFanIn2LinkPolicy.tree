>3	FunctionDef	TestFanIn2LinkPolicy 
>4	ParameterList	const std 
>5	Parameter	 
>6	Identifier	link
>7	ParameterType	Link *
>8	Parameter	 
>9	Identifier	params
>10	ParameterType	const std 
>11	CompoundStatement	 
>17	FunctionDef	TestFanIn2LinkPolicy 
>18	ParameterList	 
>19	CompoundStatement	 
>23	FunctionDef	TestFanIn2LinkPolicy 
>24	ParameterList	Dimensions & dims
>25	Parameter	 
>26	Identifier	dims
>27	ParameterType	Dimensions &
>28	ReturnType	void
>29	CompoundStatement	 
>30	ExpressionStatement	 
>31	AssignmentExpr	destDimensions_ = destDims
>32	Identifier	destDims
>33	Identifier	destDimensions_
>34	ExpressionStatement	 
>35	AssignmentExpr	srcDimensions_ = dims
>36	Identifier	dims
>37	Identifier	srcDimensions_
>38	ForStatement	for ( size_t i = 0 ; i < dims . size ( ) ; i ++ )
>39	CompoundStatement	 
>40	IfStatement	if ( destDims [ i ] * 2 != dims [ i ] )
>41	ExpressionStatement	 
>42	ShiftExpression	NTA_THROW << \"Invalid source dimensions \" << dims . toString ( ) << \" for link \" << link_ -> toString ( ) << \"\
>43	ShiftExpression	\"Invalid source dimensions \" << dims . toString ( ) << \" for link \" << link_ -> toString ( ) << \". Dimensions \
>44	ShiftExpression	dims . toString ( ) << \" for link \" << link_ -> toString ( ) << \". Dimensions must be multiples of 2\"\
>45	ShiftExpression	\" for link \" << link_ -> toString ( ) << \". Dimensions must be multiples of 2\"
>46	ShiftExpression	link_ -> toString ( ) << \". Dimensions must be multiples of 2\"
>47	PrimaryExpression	\". Dimensions must be multiples of 2\"
>48	CallExpression	link_ -> toString ( )
>49	ArgumentList	 
>50	Callee	link_ -> toString
>51	PtrMemberAccess	link_ -> toString
>52	Identifier	toString
>53	Identifier	link_
>54	PrimaryExpression	\" for link \"
>55	CallExpression	dims . toString ( )
>56	ArgumentList	 
>57	Callee	dims . toString
>58	MemberAccess	dims . toString
>59	Identifier	toString
>60	Identifier	dims
>61	PrimaryExpression	\"Invalid source dimensions \"
>62	Identifier	NTA_THROW
>63	Condition	 
>64	EqualityExpression	destDims [ i ] * 2 != dims [ i ]
>65	ArrayIndexing	dims [ i ]
>66	Identifier	i
>67	Identifier	dims
>68	MultiplicativeExpression	destDims [ i ] * 2
>69	PrimaryExpression	2
>70	ArrayIndexing	destDims [ i ]
>71	Identifier	i
>72	Identifier	destDims
>73	ExpressionStatement	 
>74	CallExpression	destDims . push_back ( dims [ i ] / 2 )
>75	ArgumentList	dims [ i ] / 2
>76	Argument	dims [ i ] / 2
>77	MultiplicativeExpression	dims [ i ] / 2
>78	PrimaryExpression	2
>79	ArrayIndexing	dims [ i ]
>80	Identifier	i
>81	Identifier	dims
>82	Callee	destDims . push_back
>83	MemberAccess	destDims . push_back
>84	Identifier	push_back
>85	Identifier	destDims
>86	IncDecOp	 
>87	IncDec	++
>88	Identifier	i
>89	Condition	 
>90	RelationalExpression	i < dims . size ( )
>91	CallExpression	dims . size ( )
>92	ArgumentList	 
>93	Callee	dims . size
>94	MemberAccess	dims . size
>95	Identifier	size
>96	Identifier	dims
>97	Identifier	i
>98	ForInit	 
>99	IdentifierDeclStatement	size_t i = 0 ;
>100	IdentifierDecl	i = 0
>101	AssignmentExpr	i = 0
>102	PrimaryExpression	0
>103	Identifier	i
>104	Identifier	i
>105	IdentifierDeclType	size_t
>106	IdentifierDeclStatement	 
>107	IdentifierDecl	destDims
>108	Identifier	destDims
>109	IdentifierDeclType	Dimensions
>110	IfStatement	if ( dims . isDontcare ( ) )
>111	ExpressionStatement	 
>112	ShiftExpression	NTA_THROW << \"Invalid dontcare source dimensions for link \" << link_ -> toString ( )
>113	ShiftExpression	\"Invalid dontcare source dimensions for link \" << link_ -> toString ( )
>114	CallExpression	link_ -> toString ( )
>115	ArgumentList	 
>116	Callee	link_ -> toString
>117	PtrMemberAccess	link_ -> toString
>118	Identifier	toString
>119	Identifier	link_
>120	PrimaryExpression	\"Invalid dontcare source dimensions for link \"
>121	Identifier	NTA_THROW
>122	Condition	 
>123	CallExpression	dims . isDontcare ( )
>124	ArgumentList	 
>125	Callee	dims . isDontcare
>126	MemberAccess	dims . isDontcare
>127	Identifier	isDontcare
>128	Identifier	dims
>129	IfStatement	if ( dims . isUnspecified ( ) )
>130	ExpressionStatement	 
>131	ShiftExpression	NTA_THROW << \"Invalid unspecified source dimensions for link \" << link_ -> toString ( )
>132	ShiftExpression	\"Invalid unspecified source dimensions for link \" << link_ -> toString ( )
>133	CallExpression	link_ -> toString ( )
>134	ArgumentList	 
>135	Callee	link_ -> toString
>136	PtrMemberAccess	link_ -> toString
>137	Identifier	toString
>138	Identifier	link_
>139	PrimaryExpression	\"Invalid unspecified source dimensions for link \"
>140	Identifier	NTA_THROW
>141	Condition	 
>142	CallExpression	dims . isUnspecified ( )
>143	ArgumentList	 
>144	Callee	dims . isUnspecified
>145	MemberAccess	dims . isUnspecified
>146	Identifier	isUnspecified
>147	Identifier	dims
>148	ExpressionStatement	 
>149	ShiftExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>150	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>151	CallExpression	link_ -> toString ( )
>152	ArgumentList	 
>153	Callee	link_ -> toString
>154	PtrMemberAccess	link_ -> toString
>155	Identifier	toString
>156	Identifier	link_
>157	PrimaryExpression	\"Internal error on link \"
>158	CallExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) )
>159	ArgumentList	destDimensions_ . isUnspecified ( )
>160	Argument	destDimensions_ . isUnspecified ( )
>161	CallExpression	destDimensions_ . isUnspecified ( )
>162	ArgumentList	 
>163	Callee	destDimensions_ . isUnspecified
>164	MemberAccess	destDimensions_ . isUnspecified
>165	Identifier	isUnspecified
>166	Identifier	destDimensions_
>167	Callee	NTA_CHECK
>168	Identifier	NTA_CHECK
>169	ExpressionStatement	 
>170	ShiftExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>171	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>172	CallExpression	link_ -> toString ( )
>173	ArgumentList	 
>174	Callee	link_ -> toString
>175	PtrMemberAccess	link_ -> toString
>176	Identifier	toString
>177	Identifier	link_
>178	PrimaryExpression	\"Internal error on link \"
>179	CallExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) )
>180	ArgumentList	srcDimensions_ . isUnspecified ( )
>181	Argument	srcDimensions_ . isUnspecified ( )
>182	CallExpression	srcDimensions_ . isUnspecified ( )
>183	ArgumentList	 
>184	Callee	srcDimensions_ . isUnspecified
>185	MemberAccess	srcDimensions_ . isUnspecified
>186	Identifier	isUnspecified
>187	Identifier	srcDimensions_
>188	Callee	NTA_CHECK
>189	Identifier	NTA_CHECK
>207	FunctionDef	TestFanIn2LinkPolicy 
>208	ParameterList	Dimensions & dims
>209	Parameter	 
>210	Identifier	dims
>211	ParameterType	Dimensions &
>212	ReturnType	void
>213	CompoundStatement	 
>214	ExpressionStatement	 
>215	AssignmentExpr	destDimensions_ = dims
>216	Identifier	dims
>217	Identifier	destDimensions_
>218	ExpressionStatement	 
>219	AssignmentExpr	srcDimensions_ = srcDims
>220	Identifier	srcDims
>221	Identifier	srcDimensions_
>222	ForStatement	for ( size_t i = 0 ; i < dims . size ( ) ; i ++ )
>223	CompoundStatement	 
>224	ExpressionStatement	 
>225	CallExpression	srcDims . push_back ( dims [ i ] * 2 )
>226	ArgumentList	dims [ i ] * 2
>227	Argument	dims [ i ] * 2
>228	MultiplicativeExpression	dims [ i ] * 2
>229	PrimaryExpression	2
>230	ArrayIndexing	dims [ i ]
>231	Identifier	i
>232	Identifier	dims
>233	Callee	srcDims . push_back
>234	MemberAccess	srcDims . push_back
>235	Identifier	push_back
>236	Identifier	srcDims
>237	IncDecOp	 
>238	IncDec	++
>239	Identifier	i
>240	Condition	 
>241	RelationalExpression	i < dims . size ( )
>242	CallExpression	dims . size ( )
>243	ArgumentList	 
>244	Callee	dims . size
>245	MemberAccess	dims . size
>246	Identifier	size
>247	Identifier	dims
>248	Identifier	i
>249	ForInit	 
>250	IdentifierDeclStatement	size_t i = 0 ;
>251	IdentifierDecl	i = 0
>252	AssignmentExpr	i = 0
>253	PrimaryExpression	0
>254	Identifier	i
>255	Identifier	i
>256	IdentifierDeclType	size_t
>257	IdentifierDeclStatement	 
>258	IdentifierDecl	srcDims
>259	Identifier	srcDims
>260	IdentifierDeclType	Dimensions
>261	IfStatement	if ( dims . isDontcare ( ) )
>262	ExpressionStatement	 
>263	ShiftExpression	NTA_THROW << \"Invalid dontcare dest dimensions for link \" << link_ -> toString ( )
>264	ShiftExpression	\"Invalid dontcare dest dimensions for link \" << link_ -> toString ( )
>265	CallExpression	link_ -> toString ( )
>266	ArgumentList	 
>267	Callee	link_ -> toString
>268	PtrMemberAccess	link_ -> toString
>269	Identifier	toString
>270	Identifier	link_
>271	PrimaryExpression	\"Invalid dontcare dest dimensions for link \"
>272	Identifier	NTA_THROW
>273	Condition	 
>274	CallExpression	dims . isDontcare ( )
>275	ArgumentList	 
>276	Callee	dims . isDontcare
>277	MemberAccess	dims . isDontcare
>278	Identifier	isDontcare
>279	Identifier	dims
>280	IfStatement	if ( dims . isUnspecified ( ) )
>281	ExpressionStatement	 
>282	ShiftExpression	NTA_THROW << \"Invalid unspecified dest dimensions for link \" << link_ -> toString ( )
>283	ShiftExpression	\"Invalid unspecified dest dimensions for link \" << link_ -> toString ( )
>284	CallExpression	link_ -> toString ( )
>285	ArgumentList	 
>286	Callee	link_ -> toString
>287	PtrMemberAccess	link_ -> toString
>288	Identifier	toString
>289	Identifier	link_
>290	PrimaryExpression	\"Invalid unspecified dest dimensions for link \"
>291	Identifier	NTA_THROW
>292	Condition	 
>293	CallExpression	dims . isUnspecified ( )
>294	ArgumentList	 
>295	Callee	dims . isUnspecified
>296	MemberAccess	dims . isUnspecified
>297	Identifier	isUnspecified
>298	Identifier	dims
>299	ExpressionStatement	 
>300	ShiftExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>301	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>302	CallExpression	link_ -> toString ( )
>303	ArgumentList	 
>304	Callee	link_ -> toString
>305	PtrMemberAccess	link_ -> toString
>306	Identifier	toString
>307	Identifier	link_
>308	PrimaryExpression	\"Internal error on link \"
>309	CallExpression	NTA_CHECK ( destDimensions_ . isUnspecified ( ) )
>310	ArgumentList	destDimensions_ . isUnspecified ( )
>311	Argument	destDimensions_ . isUnspecified ( )
>312	CallExpression	destDimensions_ . isUnspecified ( )
>313	ArgumentList	 
>314	Callee	destDimensions_ . isUnspecified
>315	MemberAccess	destDimensions_ . isUnspecified
>316	Identifier	isUnspecified
>317	Identifier	destDimensions_
>318	Callee	NTA_CHECK
>319	Identifier	NTA_CHECK
>320	ExpressionStatement	 
>321	ShiftExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) ) << \"Internal error on link \" << link_ -> toString ( )
>322	ShiftExpression	\"Internal error on link \" << link_ -> toString ( )
>323	CallExpression	link_ -> toString ( )
>324	ArgumentList	 
>325	Callee	link_ -> toString
>326	PtrMemberAccess	link_ -> toString
>327	Identifier	toString
>328	Identifier	link_
>329	PrimaryExpression	\"Internal error on link \"
>330	CallExpression	NTA_CHECK ( srcDimensions_ . isUnspecified ( ) )
>331	ArgumentList	srcDimensions_ . isUnspecified ( )
>332	Argument	srcDimensions_ . isUnspecified ( )
>333	CallExpression	srcDimensions_ . isUnspecified ( )
>334	ArgumentList	 
>335	Callee	srcDimensions_ . isUnspecified
>336	MemberAccess	srcDimensions_ . isUnspecified
>337	Identifier	isUnspecified
>338	Identifier	srcDimensions_
>339	Callee	NTA_CHECK
>340	Identifier	NTA_CHECK
>357	FunctionDef	TestFanIn2LinkPolicy 
>358	ParameterList	 
>359	ReturnType	const Dimensions &
>360	CompoundStatement	 
>361	ReturnStatement	 
>362	Identifier	srcDimensions_
>367	FunctionDef	TestFanIn2LinkPolicy 
>368	ParameterList	 
>369	ReturnType	const Dimensions &
>370	CompoundStatement	 
>371	ReturnStatement	 
>372	Identifier	destDimensions_
>377	FunctionDef	TestFanIn2LinkPolicy 
>378	ParameterList	size_t elementCount
>379	Parameter	 
>380	Identifier	elementCount
>381	ParameterType	size_t
>382	ReturnType	void
>383	CompoundStatement	 
>384	ExpressionStatement	 
>385	AssignmentExpr	elementCount_ = elementCount
>386	Identifier	elementCount
>387	Identifier	elementCount_
>393	FunctionDef	TestFanIn2LinkPolicy 
>394	ParameterList	Input 
>395	Parameter	 
>396	Identifier	splitter
>397	ParameterType	Input 
>398	ReturnType	void
>399	CompoundStatement	 
>400	IfStatement	if ( srcDimensions_ . size ( ) == 1 )
>401	ElseStatement	else
>402	IfStatement	if ( srcDimensions_ . size ( ) == 2 )
>403	ElseStatement	else
>404	CompoundStatement	 
>405	ExpressionStatement	 
>406	ShiftExpression	NTA_THROW << \"TestFanIn2 link policy does not support \" << srcDimensions_ . size ( ) << \"-dimensional \
>407	ShiftExpression	\"TestFanIn2 link policy does not support \" << srcDimensions_ . size ( ) << \"-dimensional topologies. \
>408	ShiftExpression	srcDimensions_ . size ( ) << \"-dimensional topologies. FIXME!\"
>409	PrimaryExpression	\"-dimensional topologies. FIXME!\"
>410	CallExpression	srcDimensions_ . size ( )
>411	ArgumentList	 
>412	Callee	srcDimensions_ . size
>413	MemberAccess	srcDimensions_ . size
>414	Identifier	size
>415	Identifier	srcDimensions_
>416	PrimaryExpression	\"TestFanIn2 link policy does not support \"
>417	Identifier	NTA_THROW
>418	CompoundStatement	 
>419	ForStatement	for ( size_t y = 0 ; y < srcDimensions_ [ 1 ] ; y ++ )
>420	CompoundStatement	 
>421	ForStatement	for ( size_t x = 0 ; x < srcDimensions_ [ 0 ] ; x ++ )
>422	CompoundStatement	 
>423	ForStatement	for ( size_t element = 0 ; element < elementCount_ ; element ++ )
>424	CompoundStatement	 
>425	ExpressionStatement	 
>426	CallExpression	splitter [ destIndex ] . push_back ( baseOffset + element )
>427	ArgumentList	baseOffset + element
>428	Argument	baseOffset + element
>429	AdditiveExpression	baseOffset + element
>430	Identifier	element
>431	Identifier	baseOffset
>432	Callee	splitter [ destIndex ] . push_back
>433	MemberAccess	splitter [ destIndex ] . push_back
>434	Identifier	push_back
>435	ArrayIndexing	splitter [ destIndex ]
>436	Identifier	destIndex
>437	Identifier	splitter
>438	IncDecOp	 
>439	IncDec	++
>440	Identifier	element
>441	Condition	 
>442	RelationalExpression	element < elementCount_
>443	Identifier	elementCount_
>444	Identifier	element
>445	ForInit	 
>446	IdentifierDeclStatement	size_t element = 0 ;
>447	IdentifierDecl	element = 0
>448	AssignmentExpr	element = 0
>449	PrimaryExpression	0
>450	Identifier	element
>451	Identifier	element
>452	IdentifierDeclType	size_t
>453	IdentifierDeclStatement	 
>454	IdentifierDecl	baseOffset = srcIndex * elementCount_
>455	AssignmentExpr	baseOffset = srcIndex * elementCount_
>456	MultiplicativeExpression	srcIndex * elementCount_
>457	Identifier	elementCount_
>458	Identifier	srcIndex
>459	Identifier	baseOffset
>460	Identifier	baseOffset
>461	IdentifierDeclType	size_t
>462	IdentifierDeclStatement	 
>463	IdentifierDecl	destIndex = destDimensions_ . getIndex ( Dimensions ( x / 2 , y / 2 ) )
>464	AssignmentExpr	destIndex = destDimensions_ . getIndex ( Dimensions ( x / 2 , y / 2 ) )
>465	CallExpression	destDimensions_ . getIndex ( Dimensions ( x / 2 , y / 2 ) )
>466	ArgumentList	Dimensions ( x / 2 , y / 2 )
>467	Argument	Dimensions ( x / 2 , y / 2 )
>468	CallExpression	Dimensions ( x / 2 , y / 2 )
>469	ArgumentList	x / 2
>470	Argument	y / 2
>471	MultiplicativeExpression	y / 2
>472	PrimaryExpression	2
>473	Identifier	y
>474	Argument	x / 2
>475	MultiplicativeExpression	x / 2
>476	PrimaryExpression	2
>477	Identifier	x
>478	Callee	Dimensions
>479	Identifier	Dimensions
>480	Callee	destDimensions_ . getIndex
>481	MemberAccess	destDimensions_ . getIndex
>482	Identifier	getIndex
>483	Identifier	destDimensions_
>484	Identifier	destIndex
>485	Identifier	destIndex
>486	IdentifierDeclType	size_t
>487	IdentifierDeclStatement	 
>488	IdentifierDecl	srcIndex = srcDimensions_ . getIndex ( Dimensions ( x , y ) )
>489	AssignmentExpr	srcIndex = srcDimensions_ . getIndex ( Dimensions ( x , y ) )
>490	CallExpression	srcDimensions_ . getIndex ( Dimensions ( x , y ) )
>491	ArgumentList	Dimensions ( x , y )
>492	Argument	Dimensions ( x , y )
>493	CallExpression	Dimensions ( x , y )
>494	ArgumentList	x
>495	Argument	y
>496	Identifier	y
>497	Argument	x
>498	Identifier	x
>499	Callee	Dimensions
>500	Identifier	Dimensions
>501	Callee	srcDimensions_ . getIndex
>502	MemberAccess	srcDimensions_ . getIndex
>503	Identifier	getIndex
>504	Identifier	srcDimensions_
>505	Identifier	srcIndex
>506	Identifier	srcIndex
>507	IdentifierDeclType	size_t
>508	IncDecOp	 
>509	IncDec	++
>510	Identifier	x
>511	Condition	 
>512	RelationalExpression	x < srcDimensions_ [ 0 ]
>513	ArrayIndexing	srcDimensions_ [ 0 ]
>514	PrimaryExpression	0
>515	Identifier	srcDimensions_
>516	Identifier	x
>517	ForInit	 
>518	IdentifierDeclStatement	size_t x = 0 ;
>519	IdentifierDecl	x = 0
>520	AssignmentExpr	x = 0
>521	PrimaryExpression	0
>522	Identifier	x
>523	Identifier	x
>524	IdentifierDeclType	size_t
>525	IncDecOp	 
>526	IncDec	++
>527	Identifier	y
>528	Condition	 
>529	RelationalExpression	y < srcDimensions_ [ 1 ]
>530	ArrayIndexing	srcDimensions_ [ 1 ]
>531	PrimaryExpression	1
>532	Identifier	srcDimensions_
>533	Identifier	y
>534	ForInit	 
>535	IdentifierDeclStatement	size_t y = 0 ;
>536	IdentifierDecl	y = 0
>537	AssignmentExpr	y = 0
>538	PrimaryExpression	0
>539	Identifier	y
>540	Identifier	y
>541	IdentifierDeclType	size_t
>542	Condition	 
>543	EqualityExpression	srcDimensions_ . size ( ) == 2
>544	PrimaryExpression	2
>545	CallExpression	srcDimensions_ . size ( )
>546	ArgumentList	 
>547	Callee	srcDimensions_ . size
>548	MemberAccess	srcDimensions_ . size
>549	Identifier	size
>550	Identifier	srcDimensions_
>551	CompoundStatement	 
>552	ForStatement	for ( size_t i = 0 ; i < srcDimensions_ [ 0 ] ; i ++ )
>553	CompoundStatement	 
>554	ExpressionStatement	 
>555	CallExpression	splitter [ i / 2 ] . push_back ( i )
>556	ArgumentList	i
>557	Argument	i
>558	Identifier	i
>559	Callee	splitter [ i / 2 ] . push_back
>560	MemberAccess	splitter [ i / 2 ] . push_back
>561	Identifier	push_back
>562	ArrayIndexing	splitter [ i / 2 ]
>563	MultiplicativeExpression	i / 2
>564	PrimaryExpression	2
>565	Identifier	i
>566	Identifier	splitter
>567	IncDecOp	 
>568	IncDec	++
>569	Identifier	i
>570	Condition	 
>571	RelationalExpression	i < srcDimensions_ [ 0 ]
>572	ArrayIndexing	srcDimensions_ [ 0 ]
>573	PrimaryExpression	0
>574	Identifier	srcDimensions_
>575	Identifier	i
>576	ForInit	 
>577	IdentifierDeclStatement	size_t i = 0 ;
>578	IdentifierDecl	i = 0
>579	AssignmentExpr	i = 0
>580	PrimaryExpression	0
>581	Identifier	i
>582	Identifier	i
>583	IdentifierDeclType	size_t
>584	Condition	 
>585	EqualityExpression	srcDimensions_ . size ( ) == 1
>586	PrimaryExpression	1
>587	CallExpression	srcDimensions_ . size ( )
>588	ArgumentList	 
>589	Callee	srcDimensions_ . size
>590	MemberAccess	srcDimensions_ . size
>591	Identifier	size
>592	Identifier	srcDimensions_
>593	ExpressionStatement	 
>594	CallExpression	NTA_CHECK ( isInitialized ( ) )
>595	ArgumentList	isInitialized ( )
>596	Argument	isInitialized ( )
>597	CallExpression	isInitialized ( )
>598	ArgumentList	 
>599	Callee	isInitialized
>600	Identifier	isInitialized
>601	Callee	NTA_CHECK
>602	Identifier	NTA_CHECK
>626	FunctionDef	TestFanIn2LinkPolicy 
>627	ParameterList	 
>628	ReturnType	void
>629	CompoundStatement	 
>630	ExpressionStatement	 
>631	AssignmentExpr	initialized_ = true
>632	Identifier	true
>633	Identifier	initialized_
>639	FunctionDef	TestFanIn2LinkPolicy 
>640	ParameterList	 
>641	ReturnType	bool
>642	CompoundStatement	 
>643	ReturnStatement	 
>644	Identifier	initialized_
<3=11,4
<4=8,5
<5=7,6
<8=10,9
<17=19,18
<23=29,28,24
<24=25
<25=27,26
<29=169,148,129,110,106,38,34,30
<30=31
<31=33,32
<34=35
<35=37,36
<38=98,89,86,39
<39=73,40
<40=63,41
<41=42
<42=62,43
<43=61,44
<44=55,45
<45=54,46
<46=48,47
<48=50,49
<50=51
<51=53,52
<55=57,56
<57=58
<58=60,59
<63=64
<64=68,65
<65=67,66
<68=70,69
<70=72,71
<73=74
<74=82,75
<75=76
<76=77
<77=79,78
<79=81,80
<82=83
<83=85,84
<86=88,87
<89=90
<90=97,91
<91=93,92
<93=94
<94=96,95
<98=99
<99=100
<100=105,104,101
<101=103,102
<106=107
<107=109,108
<110=122,111
<111=112
<112=121,113
<113=120,114
<114=116,115
<116=117
<117=119,118
<122=123
<123=125,124
<125=126
<126=128,127
<129=141,130
<130=131
<131=140,132
<132=139,133
<133=135,134
<135=136
<136=138,137
<141=142
<142=144,143
<144=145
<145=147,146
<148=149
<149=158,150
<150=157,151
<151=153,152
<153=154
<154=156,155
<158=167,159
<159=160
<160=161
<161=163,162
<163=164
<164=166,165
<167=168
<169=170
<170=179,171
<171=178,172
<172=174,173
<174=175
<175=177,176
<179=188,180
<180=181
<181=182
<182=184,183
<184=185
<185=187,186
<188=189
<207=213,212,208
<208=209
<209=211,210
<213=320,299,280,261,257,222,218,214
<214=215
<215=217,216
<218=219
<219=221,220
<222=249,240,237,223
<223=224
<224=225
<225=233,226
<226=227
<227=228
<228=230,229
<230=232,231
<233=234
<234=236,235
<237=239,238
<240=241
<241=248,242
<242=244,243
<244=245
<245=247,246
<249=250
<250=251
<251=256,255,252
<252=254,253
<257=258
<258=260,259
<261=273,262
<262=263
<263=272,264
<264=271,265
<265=267,266
<267=268
<268=270,269
<273=274
<274=276,275
<276=277
<277=279,278
<280=292,281
<281=282
<282=291,283
<283=290,284
<284=286,285
<286=287
<287=289,288
<292=293
<293=295,294
<295=296
<296=298,297
<299=300
<300=309,301
<301=308,302
<302=304,303
<304=305
<305=307,306
<309=318,310
<310=311
<311=312
<312=314,313
<314=315
<315=317,316
<318=319
<320=321
<321=330,322
<322=329,323
<323=325,324
<325=326
<326=328,327
<330=339,331
<331=332
<332=333
<333=335,334
<335=336
<336=338,337
<339=340
<357=360,359,358
<360=361
<361=362
<367=370,369,368
<370=371
<371=372
<377=383,382,378
<378=379
<379=381,380
<383=384
<384=385
<385=387,386
<393=399,398,394
<394=395
<395=397,396
<399=593,400
<400=584,551,401
<401=402
<402=542,418,403
<403=404
<404=405
<405=406
<406=417,407
<407=416,408
<408=410,409
<410=412,411
<412=413
<413=415,414
<418=419
<419=534,528,525,420
<420=421
<421=517,511,508,422
<422=487,462,453,423
<423=445,441,438,424
<424=425
<425=426
<426=432,427
<427=428
<428=429
<429=431,430
<432=433
<433=435,434
<435=437,436
<438=440,439
<441=442
<442=444,443
<445=446
<446=447
<447=452,451,448
<448=450,449
<453=454
<454=461,460,455
<455=459,456
<456=458,457
<462=463
<463=486,485,464
<464=484,465
<465=480,466
<466=467
<467=468
<468=478,469
<469=474,470
<470=471
<471=473,472
<474=475
<475=477,476
<478=479
<480=481
<481=483,482
<487=488
<488=507,506,489
<489=505,490
<490=501,491
<491=492
<492=493
<493=499,494
<494=497,495
<495=496
<497=498
<499=500
<501=502
<502=504,503
<508=510,509
<511=512
<512=516,513
<513=515,514
<517=518
<518=519
<519=524,523,520
<520=522,521
<525=527,526
<528=529
<529=533,530
<530=532,531
<534=535
<535=536
<536=541,540,537
<537=539,538
<542=543
<543=545,544
<545=547,546
<547=548
<548=550,549
<551=552
<552=576,570,567,553
<553=554
<554=555
<555=559,556
<556=557
<557=558
<559=560
<560=562,561
<562=566,563
<563=565,564
<567=569,568
<570=571
<571=575,572
<572=574,573
<576=577
<577=578
<578=583,582,579
<579=581,580
<584=585
<585=587,586
<587=589,588
<589=590
<590=592,591
<593=594
<594=601,595
<595=596
<596=597
<597=599,598
<599=600
<601=602
<626=629,628,627
<629=630
<630=631
<631=633,632
<639=642,641,640
<642=643
<643=644
