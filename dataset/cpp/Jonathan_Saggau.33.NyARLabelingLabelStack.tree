>3	FunctionDef	NyARLabelingLabelStack 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	NyARLabelingLabelStack 
>10	ParameterList	 
>11	ReturnType	void
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	ForStatement	for ( ; ; )
>15	CompoundStatement	 
>16	IfStatement	if ( h == 1 )
>17	ElseStatement	else
>18	CompoundStatement	 
>19	ExpressionStatement	 
>20	AssignmentExpr	h = h * 10 / 13
>21	MultiplicativeExpression	h * 10 / 13
>22	MultiplicativeExpression	10 / 13
>23	PrimaryExpression	13
>24	PrimaryExpression	10
>25	Identifier	h
>26	Identifier	h
>27	CompoundStatement	 
>28	IfStatement	if ( swaps == 0 )
>29	CompoundStatement	 
>30	BreakStatement	 
>31	Condition	 
>32	EqualityExpression	swaps == 0
>33	PrimaryExpression	0
>34	Identifier	swaps
>35	Condition	 
>36	EqualityExpression	h == 1
>37	PrimaryExpression	1
>38	Identifier	h
>39	ForStatement	for ( int i = 0 ; i + h < len ; i ++ )
>40	CompoundStatement	 
>41	IfStatement	if ( item [ i + h ] -> area > item [ i ] -> area )
>42	CompoundStatement	 
>43	ExpressionStatement	 
>44	IncDecOp	swaps ++
>45	IncDec	++
>46	Identifier	swaps
>47	ExpressionStatement	 
>48	AssignmentExpr	item [ i ] = temp
>49	Identifier	temp
>50	ArrayIndexing	item [ i ]
>51	Identifier	i
>52	Identifier	item
>53	ExpressionStatement	 
>54	AssignmentExpr	item [ i + h ] = item [ i ]
>55	ArrayIndexing	item [ i ]
>56	Identifier	i
>57	Identifier	item
>58	ArrayIndexing	item [ i + h ]
>59	AdditiveExpression	i + h
>60	Identifier	h
>61	Identifier	i
>62	Identifier	item
>63	IdentifierDeclStatement	 
>64	IdentifierDecl	* temp = item [ i + h ]
>65	AssignmentExpr	* temp = item [ i + h ]
>66	ArrayIndexing	item [ i + h ]
>67	AdditiveExpression	i + h
>68	Identifier	h
>69	Identifier	i
>70	Identifier	item
>71	Identifier	temp
>72	Identifier	temp
>73	IdentifierDeclType	NyARLabelingLabel *
>74	Condition	 
>75	RelationalExpression	item [ i + h ] -> area > item [ i ] -> area
>76	PtrMemberAccess	item [ i ] -> area
>77	Identifier	area
>78	ArrayIndexing	item [ i ]
>79	Identifier	i
>80	Identifier	item
>81	PtrMemberAccess	item [ i + h ] -> area
>82	Identifier	area
>83	ArrayIndexing	item [ i + h ]
>84	AdditiveExpression	i + h
>85	Identifier	h
>86	Identifier	i
>87	Identifier	item
>88	IncDecOp	 
>89	IncDec	++
>90	Identifier	i
>91	Condition	 
>92	RelationalExpression	i + h < len
>93	Identifier	len
>94	AdditiveExpression	i + h
>95	Identifier	h
>96	Identifier	i
>97	ForInit	 
>98	IdentifierDeclStatement	int i = 0 ;
>99	IdentifierDecl	i = 0
>100	AssignmentExpr	i = 0
>101	PrimaryExpression	0
>102	Identifier	i
>103	Identifier	i
>104	IdentifierDeclType	int
>105	IdentifierDeclStatement	 
>106	IdentifierDecl	swaps = 0
>107	AssignmentExpr	swaps = 0
>108	PrimaryExpression	0
>109	Identifier	swaps
>110	Identifier	swaps
>111	IdentifierDeclType	int
>112	IdentifierDeclStatement	 
>113	IdentifierDecl	* * item = this -> _items -> item
>114	AssignmentExpr	* * item = this -> _items -> item
>115	PtrMemberAccess	this -> _items -> item
>116	Identifier	item
>117	PtrMemberAccess	this -> _items
>118	Identifier	_items
>119	Identifier	this
>120	Identifier	item
>121	Identifier	item
>122	IdentifierDeclType	NyARLabelingLabel * *
>123	IdentifierDeclStatement	 
>124	IdentifierDecl	h = len * 13 / 10
>125	AssignmentExpr	h = len * 13 / 10
>126	MultiplicativeExpression	len * 13 / 10
>127	MultiplicativeExpression	13 / 10
>128	PrimaryExpression	10
>129	PrimaryExpression	13
>130	Identifier	len
>131	Identifier	h
>132	Identifier	h
>133	IdentifierDeclType	int
>134	IdentifierDeclStatement	 
>135	IdentifierDecl	len = this -> _length
>136	AssignmentExpr	len = this -> _length
>137	PtrMemberAccess	this -> _length
>138	Identifier	_length
>139	Identifier	this
>140	Identifier	len
>141	Identifier	len
>142	IdentifierDeclType	const int
<3=5,4
<9=12,11,10
<12=134,123,112,14,13
<14=15
<15=105,39,16
<16=35,27,17
<17=18
<18=19
<19=20
<20=26,21
<21=25,22
<22=24,23
<27=28
<28=31,29
<29=30
<31=32
<32=34,33
<35=36
<36=38,37
<39=97,91,88,40
<40=41
<41=74,42
<42=63,53,47,43
<43=44
<44=46,45
<47=48
<48=50,49
<50=52,51
<53=54
<54=58,55
<55=57,56
<58=62,59
<59=61,60
<63=64
<64=73,72,65
<65=71,66
<66=70,67
<67=69,68
<74=75
<75=81,76
<76=78,77
<78=80,79
<81=83,82
<83=87,84
<84=86,85
<88=90,89
<91=92
<92=94,93
<94=96,95
<97=98
<98=99
<99=104,103,100
<100=102,101
<105=106
<106=111,110,107
<107=109,108
<112=113
<113=122,121,114
<114=120,115
<115=117,116
<117=119,118
<123=124
<124=133,132,125
<125=131,126
<126=130,127
<127=129,128
<134=135
<135=142,141,136
<136=140,137
<137=139,138
