>7	FunctionDef	RenderObjectLayer 
>8	ParameterList	 
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	clearDisplayList ( )
>12	ArgumentList	 
>13	Callee	clearDisplayList
>14	Identifier	clearDisplayList
>18	FunctionDef	RenderObjectLayer 
>19	ParameterList	bool cull
>20	Parameter	 
>21	Identifier	cull
>22	ParameterType	bool
>23	ReturnType	void
>24	CompoundStatement	 
>25	ExpressionStatement	 
>26	AssignmentExpr	this -> cull = cull
>27	Identifier	cull
>28	PtrMemberAccess	this -> cull
>29	Identifier	cull
>30	Identifier	this
>38	FunctionDef	RenderObjectLayer 
>39	ParameterList	bool opt
>40	Parameter	 
>41	Identifier	opt
>42	ParameterType	bool
>43	ReturnType	void
>44	CompoundStatement	 
>45	ExpressionStatement	 
>46	CallExpression	clearDisplayList ( )
>47	ArgumentList	 
>48	Callee	clearDisplayList
>49	Identifier	clearDisplayList
>50	ExpressionStatement	 
>51	AssignmentExpr	this -> optimizeStatic = opt
>52	Identifier	opt
>53	PtrMemberAccess	this -> optimizeStatic
>54	Identifier	optimizeStatic
>55	Identifier	this
>63	FunctionDef	sortRenderObjectsByDepth (RenderObject * r1 , RenderObject * r2)
>64	ParameterList	RenderObject * r1 , RenderObject * r2
>65	Parameter	 
>66	Identifier	r2
>67	ParameterType	RenderObject *
>68	Parameter	 
>69	Identifier	r1
>70	ParameterType	RenderObject *
>71	ReturnType	bool
>72	CompoundStatement	 
>73	ReturnStatement	 
>74	RelationalExpression	r1 -> getSortDepth ( ) < r2 -> getSortDepth ( )
>75	CallExpression	r2 -> getSortDepth ( )
>76	ArgumentList	 
>77	Callee	r2 -> getSortDepth
>78	PtrMemberAccess	r2 -> getSortDepth
>79	Identifier	getSortDepth
>80	Identifier	r2
>81	CallExpression	r1 -> getSortDepth ( )
>82	ArgumentList	 
>83	Callee	r1 -> getSortDepth
>84	PtrMemberAccess	r1 -> getSortDepth
>85	Identifier	getSortDepth
>86	Identifier	r1
>96	FunctionDef	RenderObjectLayer 
>97	ParameterList	 
>98	ReturnType	void
>99	CompoundStatement	 
>100	ExpressionStatement	 
>101	CallExpression	renderObjectList . sort ( sortRenderObjectsByDepth )
>102	ArgumentList	sortRenderObjectsByDepth
>103	Argument	sortRenderObjectsByDepth
>104	Identifier	sortRenderObjectsByDepth
>105	Callee	renderObjectList . sort
>106	MemberAccess	renderObjectList . sort
>107	Identifier	sort
>108	Identifier	renderObjectList
>109	ForStatement	for ( int i = 0 ; i < count - 1 ; i ++ )
>110	CompoundStatement	 
>111	IfStatement	if ( best != i )
>112	CompoundStatement	 
>113	ExpressionStatement	 
>114	AssignmentExpr	sortDepths [ best ] = d
>115	Identifier	d
>116	ArrayIndexing	sortDepths [ best ]
>117	Identifier	best
>118	Identifier	sortDepths
>119	ExpressionStatement	 
>120	AssignmentExpr	sortDepths [ i ] = sortDepths [ best ]
>121	ArrayIndexing	sortDepths [ best ]
>122	Identifier	best
>123	Identifier	sortDepths
>124	ArrayIndexing	sortDepths [ i ]
>125	Identifier	i
>126	Identifier	sortDepths
>127	IdentifierDeclStatement	 
>128	IdentifierDecl	d = sortDepths [ i ]
>129	AssignmentExpr	d = sortDepths [ i ]
>130	ArrayIndexing	sortDepths [ i ]
>131	Identifier	i
>132	Identifier	sortDepths
>133	Identifier	d
>134	Identifier	d
>135	IdentifierDeclType	float
>136	ExpressionStatement	 
>137	CallExpression	renderObjects [ best ] -> setIdx ( best )
>138	ArgumentList	best
>139	Argument	best
>140	Identifier	best
>141	Callee	renderObjects [ best ] -> setIdx
>142	PtrMemberAccess	renderObjects [ best ] -> setIdx
>143	Identifier	setIdx
>144	ArrayIndexing	renderObjects [ best ]
>145	Identifier	best
>146	Identifier	renderObjects
>147	ExpressionStatement	 
>148	AssignmentExpr	renderObjects [ best ] = r
>149	Identifier	r
>150	ArrayIndexing	renderObjects [ best ]
>151	Identifier	best
>152	Identifier	renderObjects
>153	ExpressionStatement	 
>154	CallExpression	renderObjects [ i ] -> setIdx ( i )
>155	ArgumentList	i
>156	Argument	i
>157	Identifier	i
>158	Callee	renderObjects [ i ] -> setIdx
>159	PtrMemberAccess	renderObjects [ i ] -> setIdx
>160	Identifier	setIdx
>161	ArrayIndexing	renderObjects [ i ]
>162	Identifier	i
>163	Identifier	renderObjects
>164	ExpressionStatement	 
>165	AssignmentExpr	renderObjects [ i ] = renderObjects [ best ]
>166	ArrayIndexing	renderObjects [ best ]
>167	Identifier	best
>168	Identifier	renderObjects
>169	ArrayIndexing	renderObjects [ i ]
>170	Identifier	i
>171	Identifier	renderObjects
>172	IdentifierDeclStatement	 
>173	IdentifierDecl	* r = renderObjects [ i ]
>174	AssignmentExpr	* r = renderObjects [ i ]
>175	ArrayIndexing	renderObjects [ i ]
>176	Identifier	i
>177	Identifier	renderObjects
>178	Identifier	r
>179	Identifier	r
>180	IdentifierDeclType	RenderObject *
>181	Condition	 
>182	EqualityExpression	best != i
>183	Identifier	i
>184	Identifier	best
>185	ForStatement	for ( int j = i + 1 ; j < count ; j ++ )
>186	CompoundStatement	 
>187	IfStatement	if ( sortDepths [ j ] < bestDepth )
>188	CompoundStatement	 
>189	ExpressionStatement	 
>190	AssignmentExpr	bestDepth = sortDepths [ j ]
>191	ArrayIndexing	sortDepths [ j ]
>192	Identifier	j
>193	Identifier	sortDepths
>194	Identifier	bestDepth
>195	ExpressionStatement	 
>196	AssignmentExpr	best = j
>197	Identifier	j
>198	Identifier	best
>199	Condition	 
>200	RelationalExpression	sortDepths [ j ] < bestDepth
>201	Identifier	bestDepth
>202	ArrayIndexing	sortDepths [ j ]
>203	Identifier	j
>204	Identifier	sortDepths
>205	IncDecOp	 
>206	IncDec	++
>207	Identifier	j
>208	Condition	 
>209	RelationalExpression	j < count
>210	Identifier	count
>211	Identifier	j
>212	ForInit	 
>213	IdentifierDeclStatement	int j = i + 1 ;
>214	IdentifierDecl	j = i + 1
>215	AssignmentExpr	j = i + 1
>216	AdditiveExpression	i + 1
>217	PrimaryExpression	1
>218	Identifier	i
>219	Identifier	j
>220	Identifier	j
>221	IdentifierDeclType	int
>222	IdentifierDeclStatement	 
>223	IdentifierDecl	bestDepth = sortDepths [ i ]
>224	AssignmentExpr	bestDepth = sortDepths [ i ]
>225	ArrayIndexing	sortDepths [ i ]
>226	Identifier	i
>227	Identifier	sortDepths
>228	Identifier	bestDepth
>229	Identifier	bestDepth
>230	IdentifierDeclType	float
>231	IdentifierDeclStatement	 
>232	IdentifierDecl	best = i
>233	AssignmentExpr	best = i
>234	Identifier	i
>235	Identifier	i
>236	Identifier	best
>237	IdentifierDeclType	int
>238	IncDecOp	 
>239	IncDec	++
>240	Identifier	i
>241	Condition	 
>242	RelationalExpression	i < count - 1
>243	AdditiveExpression	count - 1
>244	PrimaryExpression	1
>245	Identifier	count
>246	Identifier	i
>247	ForInit	 
>248	IdentifierDeclStatement	int i = 0 ;
>249	IdentifierDecl	i = 0
>250	AssignmentExpr	i = 0
>251	PrimaryExpression	0
>252	Identifier	i
>253	Identifier	i
>254	IdentifierDeclType	int
>255	ForStatement	for ( int i = 0 ; i < count ; i ++ )
>256	CompoundStatement	 
>257	ExpressionStatement	 
>258	AssignmentExpr	sortDepths [ i ] = renderObjects [ i ] -> getSortDepth ( )
>259	CallExpression	renderObjects [ i ] -> getSortDepth ( )
>260	ArgumentList	 
>261	Callee	renderObjects [ i ] -> getSortDepth
>262	PtrMemberAccess	renderObjects [ i ] -> getSortDepth
>263	Identifier	getSortDepth
>264	ArrayIndexing	renderObjects [ i ]
>265	Identifier	i
>266	Identifier	renderObjects
>267	ArrayIndexing	sortDepths [ i ]
>268	Identifier	i
>269	Identifier	sortDepths
>270	IncDecOp	 
>271	IncDec	++
>272	Identifier	i
>273	Condition	 
>274	RelationalExpression	i < count
>275	Identifier	count
>276	Identifier	i
>277	ForInit	 
>278	IdentifierDeclStatement	int i = 0 ;
>279	IdentifierDecl	i = 0
>280	AssignmentExpr	i = 0
>281	PrimaryExpression	0
>282	Identifier	i
>283	Identifier	i
>284	IdentifierDeclType	int
>285	IdentifierDeclStatement	 
>286	IdentifierDecl	sortDepths ( count )
>287	Identifier	count
>288	Identifier	sortDepths
>289	IdentifierDeclType	std 
>290	IdentifierDeclStatement	 
>291	IdentifierDecl	count = objectCount
>292	AssignmentExpr	count = objectCount
>293	Identifier	objectCount
>294	Identifier	objectCount
>295	Identifier	count
>296	IdentifierDeclType	const int
>297	IfStatement	if ( to != objectCount )
>298	CompoundStatement	 
>299	ExpressionStatement	 
>300	AssignmentExpr	objectCount = to
>301	Identifier	to
>302	Identifier	objectCount
>303	ExpressionStatement	 
>304	CallExpression	errorLog ( os . str ( ) )
>305	ArgumentList	os . str ( )
>306	Argument	os . str ( )
>307	CallExpression	os . str ( )
>308	ArgumentList	 
>309	Callee	os . str
>310	MemberAccess	os . str
>311	Identifier	str
>312	Identifier	os
>313	Callee	errorLog
>314	Identifier	errorLog
>315	ExpressionStatement	 
>316	ShiftExpression	os << \"Objects lost in sort! (\" << to << \" != \" << objectCount << \")\"
>317	ShiftExpression	\"Objects lost in sort! (\" << to << \" != \" << objectCount << \")\"
>318	ShiftExpression	to << \" != \" << objectCount << \")\"
>319	ShiftExpression	\" != \" << objectCount << \")\"
>320	ShiftExpression	objectCount << \")\"
>321	PrimaryExpression	\")\"
>322	Identifier	objectCount
>323	PrimaryExpression	\" != \"
>324	Identifier	to
>325	PrimaryExpression	\"Objects lost in sort! (\"
>326	Identifier	os
>327	IdentifierDeclStatement	 
>328	IdentifierDecl	os
>329	Identifier	os
>330	IdentifierDeclType	std 
>331	Condition	 
>332	EqualityExpression	to != objectCount
>333	Identifier	objectCount
>334	Identifier	to
>335	IfStatement	if ( to < size )
>336	ExpressionStatement	 
>337	AssignmentExpr	renderObjects [ to ] = 0
>338	PrimaryExpression	0
>339	ArrayIndexing	renderObjects [ to ]
>340	Identifier	to
>341	Identifier	renderObjects
>342	Condition	 
>343	RelationalExpression	to < size
>344	Identifier	size
>345	Identifier	to
>346	ForStatement	for ( from = to + 1 ; from < size ; from ++ )
>347	CompoundStatement	 
>348	IfStatement	if ( renderObjects [ from ] )
>349	CompoundStatement	 
>350	ExpressionStatement	 
>351	IncDecOp	to ++
>352	IncDec	++
>353	Identifier	to
>354	ExpressionStatement	 
>355	CallExpression	renderObjects [ to ] -> setIdx ( to )
>356	ArgumentList	to
>357	Argument	to
>358	Identifier	to
>359	Callee	renderObjects [ to ] -> setIdx
>360	PtrMemberAccess	renderObjects [ to ] -> setIdx
>361	Identifier	setIdx
>362	ArrayIndexing	renderObjects [ to ]
>363	Identifier	to
>364	Identifier	renderObjects
>365	ExpressionStatement	 
>366	AssignmentExpr	renderObjects [ to ] = renderObjects [ from ]
>367	ArrayIndexing	renderObjects [ from ]
>368	Identifier	from
>369	Identifier	renderObjects
>370	ArrayIndexing	renderObjects [ to ]
>371	Identifier	to
>372	Identifier	renderObjects
>373	Condition	 
>374	ArrayIndexing	renderObjects [ from ]
>375	Identifier	from
>376	Identifier	renderObjects
>377	IncDecOp	 
>378	IncDec	++
>379	Identifier	from
>380	Condition	 
>381	RelationalExpression	from < size
>382	Identifier	size
>383	Identifier	from
>384	ForInit	 
>385	AssignmentExpr	from = to + 1
>386	AdditiveExpression	to + 1
>387	PrimaryExpression	1
>388	Identifier	to
>389	Identifier	from
>390	ForStatement	for ( to = 0 ; to < size ; to ++ )
>391	CompoundStatement	 
>392	IfStatement	if ( ! renderObjects [ to ] )
>393	BreakStatement	 
>394	Condition	 
>395	UnaryOp	! renderObjects [ to ]
>396	ArrayIndexing	renderObjects [ to ]
>397	Identifier	to
>398	Identifier	renderObjects
>399	UnaryOperator	!
>400	IncDecOp	 
>401	IncDec	++
>402	Identifier	to
>403	Condition	 
>404	RelationalExpression	to < size
>405	Identifier	size
>406	Identifier	to
>407	ForInit	 
>408	AssignmentExpr	to = 0
>409	PrimaryExpression	0
>410	Identifier	to
>411	IdentifierDeclStatement	 
>412	IdentifierDecl	to
>413	Identifier	to
>414	IdentifierDeclType	int
>415	IdentifierDecl	from
>416	Identifier	from
>417	IdentifierDeclType	int
>418	IdentifierDeclStatement	 
>419	IdentifierDecl	size = renderObjects . size ( )
>420	AssignmentExpr	size = renderObjects . size ( )
>421	CallExpression	renderObjects . size ( )
>422	ArgumentList	 
>423	Callee	renderObjects . size
>424	MemberAccess	renderObjects . size
>425	Identifier	size
>426	Identifier	renderObjects
>427	Identifier	size
>428	Identifier	size
>429	IdentifierDeclType	const int
>430	IfStatement	if ( optimizeStatic && displayListValid )
>431	ReturnStatement	 
>432	Condition	 
>433	AndExpression	optimizeStatic && displayListValid
>434	Identifier	displayListValid
>435	Identifier	optimizeStatic
>469	FunctionDef	RenderObjectLayer 
>470	ParameterList	RenderObject * r
>471	Parameter	 
>472	Identifier	r
>473	ParameterType	RenderObject *
>474	ReturnType	void
>475	CompoundStatement	 
>476	ExpressionStatement	 
>477	CallExpression	clearDisplayList ( )
>478	ArgumentList	 
>479	Callee	clearDisplayList
>480	Identifier	clearDisplayList
>481	ExpressionStatement	 
>482	AssignmentExpr	renderObjectMap [ intptr_t ( r ) ] = r
>483	Identifier	r
>484	ArrayIndexing	renderObjectMap [ intptr_t ( r ) ]
>485	CallExpression	intptr_t ( r )
>486	ArgumentList	r
>487	Argument	r
>488	Identifier	r
>489	Callee	intptr_t
>490	Identifier	intptr_t
>491	Identifier	renderObjectMap
>492	ExpressionStatement	 
>493	CallExpression	renderObjectList . push_back ( r )
>494	ArgumentList	r
>495	Argument	r
>496	Identifier	r
>497	Callee	renderObjectList . push_back
>498	MemberAccess	renderObjectList . push_back
>499	Identifier	push_back
>500	Identifier	renderObjectList
>501	ForStatement	for ( ; firstFreeIdx < size ; firstFreeIdx ++ )
>502	CompoundStatement	 
>503	IfStatement	if ( ! renderObjects [ firstFreeIdx ] )
>504	BreakStatement	 
>505	Condition	 
>506	UnaryOp	! renderObjects [ firstFreeIdx ]
>507	ArrayIndexing	renderObjects [ firstFreeIdx ]
>508	Identifier	firstFreeIdx
>509	Identifier	renderObjects
>510	UnaryOperator	!
>511	IncDecOp	 
>512	IncDec	++
>513	Identifier	firstFreeIdx
>514	Condition	 
>515	RelationalExpression	firstFreeIdx < size
>516	Identifier	size
>517	Identifier	firstFreeIdx
>518	ExpressionStatement	 
>519	CallExpression	r -> setIdx ( firstFreeIdx )
>520	ArgumentList	firstFreeIdx
>521	Argument	firstFreeIdx
>522	Identifier	firstFreeIdx
>523	Callee	r -> setIdx
>524	PtrMemberAccess	r -> setIdx
>525	Identifier	setIdx
>526	Identifier	r
>527	ExpressionStatement	 
>528	IncDecOp	objectCount ++
>529	IncDec	++
>530	Identifier	objectCount
>531	ExpressionStatement	 
>532	AssignmentExpr	renderObjects [ firstFreeIdx ] = r
>533	Identifier	r
>534	ArrayIndexing	renderObjects [ firstFreeIdx ]
>535	Identifier	firstFreeIdx
>536	Identifier	renderObjects
>537	IfStatement	if ( firstFreeIdx >= size )
>538	CompoundStatement	 
>539	ExpressionStatement	 
>540	CallExpression	renderObjects . resize ( size )
>541	ArgumentList	size
>542	Argument	size
>543	Identifier	size
>544	Callee	renderObjects . resize
>545	MemberAccess	renderObjects . resize
>546	Identifier	resize
>547	Identifier	renderObjects
>548	ExpressionStatement	 
>549	AssignmentExpr	size += size / 2
>550	MultiplicativeExpression	size / 2
>551	PrimaryExpression	2
>552	Identifier	size
>553	Identifier	size
>554	Condition	 
>555	RelationalExpression	firstFreeIdx >= size
>556	Identifier	size
>557	Identifier	firstFreeIdx
>558	IdentifierDeclStatement	 
>559	IdentifierDecl	size = renderObjects . size ( )
>560	AssignmentExpr	size = renderObjects . size ( )
>561	CallExpression	renderObjects . size ( )
>562	ArgumentList	 
>563	Callee	renderObjects . size
>564	MemberAccess	renderObjects . size
>565	Identifier	size
>566	Identifier	renderObjects
>567	Identifier	size
>568	Identifier	size
>569	IdentifierDeclType	int
>586	FunctionDef	RenderObjectLayer 
>587	ParameterList	RenderObject * r
>588	Parameter	 
>589	Identifier	r
>590	ParameterType	RenderObject *
>591	ReturnType	void
>592	CompoundStatement	 
>593	ExpressionStatement	 
>594	CallExpression	clearDisplayList ( )
>595	ArgumentList	 
>596	Callee	clearDisplayList
>597	Identifier	clearDisplayList
>598	ExpressionStatement	 
>599	AssignmentExpr	renderObjectMap [ intptr_t ( r ) ] = 0
>600	PrimaryExpression	0
>601	ArrayIndexing	renderObjectMap [ intptr_t ( r ) ]
>602	CallExpression	intptr_t ( r )
>603	ArgumentList	r
>604	Argument	r
>605	Identifier	r
>606	Callee	intptr_t
>607	Identifier	intptr_t
>608	Identifier	renderObjectMap
>609	ExpressionStatement	 
>610	CallExpression	renderObjectList . remove ( r )
>611	ArgumentList	r
>612	Argument	r
>613	Identifier	r
>614	Callee	renderObjectList . remove
>615	MemberAccess	renderObjectList . remove
>616	Identifier	remove
>617	Identifier	renderObjectList
>618	ExpressionStatement	 
>619	CallExpression	r -> setIdx ( - 1 )
>620	ArgumentList	- 1
>621	Argument	- 1
>622	UnaryOp	- 1
>623	PrimaryExpression	1
>624	UnaryOperator	-
>625	Callee	r -> setIdx
>626	PtrMemberAccess	r -> setIdx
>627	Identifier	setIdx
>628	Identifier	r
>629	IfStatement	if ( idx < firstFreeIdx )
>630	ExpressionStatement	 
>631	AssignmentExpr	firstFreeIdx = idx
>632	Identifier	idx
>633	Identifier	firstFreeIdx
>634	Condition	 
>635	RelationalExpression	idx < firstFreeIdx
>636	Identifier	firstFreeIdx
>637	Identifier	idx
>638	ExpressionStatement	 
>639	IncDecOp	objectCount --
>640	IncDec	--
>641	Identifier	objectCount
>642	ExpressionStatement	 
>643	AssignmentExpr	renderObjects [ idx ] = 0
>644	PrimaryExpression	0
>645	ArrayIndexing	renderObjects [ idx ]
>646	Identifier	idx
>647	Identifier	renderObjects
>648	IfStatement	if ( renderObjects [ idx ] != r )
>649	CompoundStatement	 
>650	ReturnStatement	 
>651	ExpressionStatement	 
>652	CallExpression	errorLog ( \"RenderObject pointer doesn't match array\" )
>653	ArgumentList	\"RenderObject pointer doesn't match array\"
>654	Argument	\"RenderObject pointer doesn't match array\"
>655	PrimaryExpression	\"RenderObject pointer doesn't match array\"
>656	Callee	errorLog
>657	Identifier	errorLog
>658	Condition	 
>659	EqualityExpression	renderObjects [ idx ] != r
>660	Identifier	r
>661	ArrayIndexing	renderObjects [ idx ]
>662	Identifier	idx
>663	Identifier	renderObjects
>664	IfStatement	if ( idx < 0 || idx >= renderObjects . size ( ) )
>665	CompoundStatement	 
>666	ReturnStatement	 
>667	ExpressionStatement	 
>668	CallExpression	errorLog ( \"Trying to remove RenderObject with invalid index\" )
>669	ArgumentList	\"Trying to remove RenderObject with invalid index\"
>670	Argument	\"Trying to remove RenderObject with invalid index\"
>671	PrimaryExpression	\"Trying to remove RenderObject with invalid index\"
>672	Callee	errorLog
>673	Identifier	errorLog
>674	Condition	 
>675	OrExpression	idx < 0 || idx >= renderObjects . size ( )
>676	RelationalExpression	idx >= renderObjects . size ( )
>677	CallExpression	renderObjects . size ( )
>678	ArgumentList	 
>679	Callee	renderObjects . size
>680	MemberAccess	renderObjects . size
>681	Identifier	size
>682	Identifier	renderObjects
>683	Identifier	idx
>684	RelationalExpression	idx < 0
>685	PrimaryExpression	0
>686	Identifier	idx
>687	IdentifierDeclStatement	 
>688	IdentifierDecl	idx = r -> getIdx ( )
>689	AssignmentExpr	idx = r -> getIdx ( )
>690	CallExpression	r -> getIdx ( )
>691	ArgumentList	 
>692	Callee	r -> getIdx
>693	PtrMemberAccess	r -> getIdx
>694	Identifier	getIdx
>695	Identifier	r
>696	Identifier	idx
>697	Identifier	idx
>698	IdentifierDeclType	const int
>717	FunctionDef	RenderObjectLayer 
>718	ParameterList	RenderObject * r
>719	Parameter	 
>720	Identifier	r
>721	ParameterType	RenderObject *
>722	ReturnType	void
>723	CompoundStatement	 
>724	ExpressionStatement	 
>725	CallExpression	clearDisplayList ( )
>726	ArgumentList	 
>727	Callee	clearDisplayList
>728	Identifier	clearDisplayList
>729	ExpressionStatement	 
>730	CallExpression	renderObjectList . push_back ( r )
>731	ArgumentList	r
>732	Argument	r
>733	Identifier	r
>734	Callee	renderObjectList . push_back
>735	MemberAccess	renderObjectList . push_back
>736	Identifier	push_back
>737	Identifier	renderObjectList
>738	ExpressionStatement	 
>739	CallExpression	renderObjectList . remove ( r )
>740	ArgumentList	r
>741	Argument	r
>742	Identifier	r
>743	Callee	renderObjectList . remove
>744	MemberAccess	renderObjectList . remove
>745	Identifier	remove
>746	Identifier	renderObjectList
>747	IfStatement	if ( curIdx == lastUsed )
>748	ElseStatement	else
>749	IfStatement	if ( lastUsed < size - 1 )
>750	ElseStatement	else
>751	IfStatement	if ( objectCount == size )
>752	ElseStatement	else
>753	CompoundStatement	 
>754	WhileStatement	while ( renderObjects [ firstFreeIdx ] )
>755	ExpressionStatement	 
>756	IncDecOp	firstFreeIdx ++
>757	IncDec	++
>758	Identifier	firstFreeIdx
>759	Condition	 
>760	ArrayIndexing	renderObjects [ firstFreeIdx ]
>761	Identifier	firstFreeIdx
>762	Identifier	renderObjects
>763	ExpressionStatement	 
>764	AssignmentExpr	firstFreeIdx = 0
>765	PrimaryExpression	0
>766	Identifier	firstFreeIdx
>767	ExpressionStatement	 
>768	CallExpression	r -> setIdx ( lastUsed )
>769	ArgumentList	lastUsed
>770	Argument	lastUsed
>771	Identifier	lastUsed
>772	Callee	r -> setIdx
>773	PtrMemberAccess	r -> setIdx
>774	Identifier	setIdx
>775	Identifier	r
>776	ExpressionStatement	 
>777	AssignmentExpr	renderObjects [ lastUsed ] = r
>778	Identifier	r
>779	ArrayIndexing	renderObjects [ lastUsed ]
>780	Identifier	lastUsed
>781	Identifier	renderObjects
>782	ForStatement	for ( int i = lastFree + 1 ; i <= lastUsed ; i ++ )
>783	CompoundStatement	 
>784	ExpressionStatement	 
>785	CallExpression	renderObjects [ i - 1 ] -> setIdx ( i - 1 )
>786	ArgumentList	i - 1
>787	Argument	i - 1
>788	AdditiveExpression	i - 1
>789	PrimaryExpression	1
>790	Identifier	i
>791	Callee	renderObjects [ i - 1 ] -> setIdx
>792	PtrMemberAccess	renderObjects [ i - 1 ] -> setIdx
>793	Identifier	setIdx
>794	ArrayIndexing	renderObjects [ i - 1 ]
>795	AdditiveExpression	i - 1
>796	PrimaryExpression	1
>797	Identifier	i
>798	Identifier	renderObjects
>799	ExpressionStatement	 
>800	AssignmentExpr	renderObjects [ i - 1 ] = renderObjects [ i ]
>801	ArrayIndexing	renderObjects [ i ]
>802	Identifier	i
>803	Identifier	renderObjects
>804	ArrayIndexing	renderObjects [ i - 1 ]
>805	AdditiveExpression	i - 1
>806	PrimaryExpression	1
>807	Identifier	i
>808	Identifier	renderObjects
>809	IncDecOp	 
>810	IncDec	++
>811	Identifier	i
>812	Condition	 
>813	RelationalExpression	i <= lastUsed
>814	Identifier	lastUsed
>815	Identifier	i
>816	ForInit	 
>817	IdentifierDeclStatement	int i = lastFree + 1 ;
>818	IdentifierDecl	i = lastFree + 1
>819	AssignmentExpr	i = lastFree + 1
>820	AdditiveExpression	lastFree + 1
>821	PrimaryExpression	1
>822	Identifier	lastFree
>823	Identifier	i
>824	Identifier	i
>825	IdentifierDeclType	int
>826	ForStatement	for ( lastFree = lastUsed - 1 ; lastFree > curIdx ; lastFree -- )
>827	CompoundStatement	 
>828	IfStatement	if ( ! renderObjects [ lastFree ] )
>829	BreakStatement	 
>830	Condition	 
>831	UnaryOp	! renderObjects [ lastFree ]
>832	ArrayIndexing	renderObjects [ lastFree ]
>833	Identifier	lastFree
>834	Identifier	renderObjects
>835	UnaryOperator	!
>836	IncDecOp	 
>837	IncDec	--
>838	Identifier	lastFree
>839	Condition	 
>840	RelationalExpression	lastFree > curIdx
>841	Identifier	curIdx
>842	Identifier	lastFree
>843	ForInit	 
>844	AssignmentExpr	lastFree = lastUsed - 1
>845	AdditiveExpression	lastUsed - 1
>846	PrimaryExpression	1
>847	Identifier	lastUsed
>848	Identifier	lastFree
>849	IdentifierDeclStatement	 
>850	IdentifierDecl	lastFree
>851	Identifier	lastFree
>852	IdentifierDeclType	int
>853	ExpressionStatement	 
>854	AssignmentExpr	renderObjects [ curIdx ] = 0
>855	PrimaryExpression	0
>856	ArrayIndexing	renderObjects [ curIdx ]
>857	Identifier	curIdx
>858	Identifier	renderObjects
>859	CompoundStatement	 
>860	IfStatement	if ( firstFreeIdx > curIdx )
>861	ExpressionStatement	 
>862	AssignmentExpr	firstFreeIdx = curIdx
>863	Identifier	curIdx
>864	Identifier	firstFreeIdx
>865	Condition	 
>866	RelationalExpression	firstFreeIdx > curIdx
>867	Identifier	curIdx
>868	Identifier	firstFreeIdx
>869	ForStatement	for ( int i = size + 1 ; i < newSize ; i ++ )
>870	ExpressionStatement	 
>871	AssignmentExpr	renderObjects [ i ] = 0
>872	PrimaryExpression	0
>873	ArrayIndexing	renderObjects [ i ]
>874	Identifier	i
>875	Identifier	renderObjects
>876	IncDecOp	 
>877	IncDec	++
>878	Identifier	i
>879	Condition	 
>880	RelationalExpression	i < newSize
>881	Identifier	newSize
>882	Identifier	i
>883	ForInit	 
>884	IdentifierDeclStatement	int i = size + 1 ;
>885	IdentifierDecl	i = size + 1
>886	AssignmentExpr	i = size + 1
>887	AdditiveExpression	size + 1
>888	PrimaryExpression	1
>889	Identifier	size
>890	Identifier	i
>891	Identifier	i
>892	IdentifierDeclType	int
>893	ExpressionStatement	 
>894	CallExpression	r -> setIdx ( size )
>895	ArgumentList	size
>896	Argument	size
>897	Identifier	size
>898	Callee	r -> setIdx
>899	PtrMemberAccess	r -> setIdx
>900	Identifier	setIdx
>901	Identifier	r
>902	ExpressionStatement	 
>903	AssignmentExpr	renderObjects [ size ] = r
>904	Identifier	r
>905	ArrayIndexing	renderObjects [ size ]
>906	Identifier	size
>907	Identifier	renderObjects
>908	ExpressionStatement	 
>909	AssignmentExpr	renderObjects [ curIdx ] = 0
>910	PrimaryExpression	0
>911	ArrayIndexing	renderObjects [ curIdx ]
>912	Identifier	curIdx
>913	Identifier	renderObjects
>914	ExpressionStatement	 
>915	CallExpression	renderObjects . resize ( newSize )
>916	ArgumentList	newSize
>917	Argument	newSize
>918	Identifier	newSize
>919	Callee	renderObjects . resize
>920	MemberAccess	renderObjects . resize
>921	Identifier	resize
>922	Identifier	renderObjects
>923	IdentifierDeclStatement	 
>924	IdentifierDecl	newSize = size + 10
>925	AssignmentExpr	newSize = size + 10
>926	AdditiveExpression	size + 10
>927	PrimaryExpression	10
>928	Identifier	size
>929	Identifier	newSize
>930	Identifier	newSize
>931	IdentifierDeclType	const int
>932	Condition	 
>933	EqualityExpression	objectCount == size
>934	Identifier	size
>935	Identifier	objectCount
>936	CompoundStatement	 
>937	IfStatement	if ( firstFreeIdx > curIdx )
>938	ExpressionStatement	 
>939	AssignmentExpr	firstFreeIdx = curIdx
>940	Identifier	curIdx
>941	Identifier	firstFreeIdx
>942	Condition	 
>943	RelationalExpression	firstFreeIdx > curIdx
>944	Identifier	curIdx
>945	Identifier	firstFreeIdx
>946	ExpressionStatement	 
>947	CallExpression	r -> setIdx ( newIdx )
>948	ArgumentList	newIdx
>949	Argument	newIdx
>950	Identifier	newIdx
>951	Callee	r -> setIdx
>952	PtrMemberAccess	r -> setIdx
>953	Identifier	setIdx
>954	Identifier	r
>955	ExpressionStatement	 
>956	AssignmentExpr	renderObjects [ newIdx ] = r
>957	Identifier	r
>958	ArrayIndexing	renderObjects [ newIdx ]
>959	Identifier	newIdx
>960	Identifier	renderObjects
>961	ExpressionStatement	 
>962	AssignmentExpr	renderObjects [ curIdx ] = 0
>963	PrimaryExpression	0
>964	ArrayIndexing	renderObjects [ curIdx ]
>965	Identifier	curIdx
>966	Identifier	renderObjects
>967	IdentifierDeclStatement	 
>968	IdentifierDecl	newIdx = lastUsed + 1
>969	AssignmentExpr	newIdx = lastUsed + 1
>970	AdditiveExpression	lastUsed + 1
>971	PrimaryExpression	1
>972	Identifier	lastUsed
>973	Identifier	newIdx
>974	Identifier	newIdx
>975	IdentifierDeclType	const int
>976	Condition	 
>977	RelationalExpression	lastUsed < size - 1
>978	AdditiveExpression	size - 1
>979	PrimaryExpression	1
>980	Identifier	size
>981	Identifier	lastUsed
>982	CompoundStatement	 
>983	Condition	 
>984	EqualityExpression	curIdx == lastUsed
>985	Identifier	lastUsed
>986	Identifier	curIdx
>987	ForStatement	for ( lastUsed = size - 1 ; lastUsed > curIdx ; lastUsed -- )
>988	CompoundStatement	 
>989	IfStatement	if ( renderObjects [ lastUsed ] )
>990	BreakStatement	 
>991	Condition	 
>992	ArrayIndexing	renderObjects [ lastUsed ]
>993	Identifier	lastUsed
>994	Identifier	renderObjects
>995	IncDecOp	 
>996	IncDec	--
>997	Identifier	lastUsed
>998	Condition	 
>999	RelationalExpression	lastUsed > curIdx
>1000	Identifier	curIdx
>1001	Identifier	lastUsed
>1002	ForInit	 
>1003	AssignmentExpr	lastUsed = size - 1
>1004	AdditiveExpression	size - 1
>1005	PrimaryExpression	1
>1006	Identifier	size
>1007	Identifier	lastUsed
>1008	IdentifierDeclStatement	 
>1009	IdentifierDecl	lastUsed
>1010	Identifier	lastUsed
>1011	IdentifierDeclType	int
>1012	IdentifierDeclStatement	 
>1013	IdentifierDecl	curIdx = r -> getIdx ( )
>1014	AssignmentExpr	curIdx = r -> getIdx ( )
>1015	CallExpression	r -> getIdx ( )
>1016	ArgumentList	 
>1017	Callee	r -> getIdx
>1018	PtrMemberAccess	r -> getIdx
>1019	Identifier	getIdx
>1020	Identifier	r
>1021	Identifier	curIdx
>1022	Identifier	curIdx
>1023	IdentifierDeclType	const int
>1024	IdentifierDeclStatement	 
>1025	IdentifierDecl	size = renderObjects . size ( )
>1026	AssignmentExpr	size = renderObjects . size ( )
>1027	CallExpression	renderObjects . size ( )
>1028	ArgumentList	 
>1029	Callee	renderObjects . size
>1030	MemberAccess	renderObjects . size
>1031	Identifier	size
>1032	Identifier	renderObjects
>1033	Identifier	size
>1034	Identifier	size
>1035	IdentifierDeclType	const int
>1062	FunctionDef	RenderObjectLayer 
>1063	ParameterList	RenderObject * r
>1064	Parameter	 
>1065	Identifier	r
>1066	ParameterType	RenderObject *
>1067	ReturnType	void
>1068	CompoundStatement	 
>1069	ExpressionStatement	 
>1070	CallExpression	clearDisplayList ( )
>1071	ArgumentList	 
>1072	Callee	clearDisplayList
>1073	Identifier	clearDisplayList
>1074	ExpressionStatement	 
>1075	CallExpression	renderObjectList . push_front ( r )
>1076	ArgumentList	r
>1077	Argument	r
>1078	Identifier	r
>1079	Callee	renderObjectList . push_front
>1080	MemberAccess	renderObjectList . push_front
>1081	Identifier	push_front
>1082	Identifier	renderObjectList
>1083	ExpressionStatement	 
>1084	CallExpression	renderObjectList . remove ( r )
>1085	ArgumentList	r
>1086	Argument	r
>1087	Identifier	r
>1088	Callee	renderObjectList . remove
>1089	MemberAccess	renderObjectList . remove
>1090	Identifier	remove
>1091	Identifier	renderObjectList
>1092	IfStatement	if ( curIdx == firstUsed )
>1093	ElseStatement	else
>1094	IfStatement	if ( firstUsed > 0 )
>1095	ElseStatement	else
>1096	IfStatement	if ( objectCount == size )
>1097	ElseStatement	else
>1098	CompoundStatement	 
>1099	ForStatement	for ( firstFreeIdx ++ ; firstFreeIdx < size ; firstFreeIdx ++ )
>1100	CompoundStatement	 
>1101	IfStatement	if ( ! renderObjects [ firstFreeIdx ] )
>1102	BreakStatement	 
>1103	Condition	 
>1104	UnaryOp	! renderObjects [ firstFreeIdx ]
>1105	ArrayIndexing	renderObjects [ firstFreeIdx ]
>1106	Identifier	firstFreeIdx
>1107	Identifier	renderObjects
>1108	UnaryOperator	!
>1109	IncDecOp	 
>1110	IncDec	++
>1111	Identifier	firstFreeIdx
>1112	Condition	 
>1113	RelationalExpression	firstFreeIdx < size
>1114	Identifier	size
>1115	Identifier	firstFreeIdx
>1116	ForInit	 
>1117	IncDecOp	firstFreeIdx ++
>1118	IncDec	++
>1119	Identifier	firstFreeIdx
>1120	ExpressionStatement	 
>1121	CallExpression	r -> setIdx ( 0 )
>1122	ArgumentList	0
>1123	Argument	0
>1124	PrimaryExpression	0
>1125	Callee	r -> setIdx
>1126	PtrMemberAccess	r -> setIdx
>1127	Identifier	setIdx
>1128	Identifier	r
>1129	ExpressionStatement	 
>1130	AssignmentExpr	renderObjects [ 0 ] = r
>1131	Identifier	r
>1132	ArrayIndexing	renderObjects [ 0 ]
>1133	PrimaryExpression	0
>1134	Identifier	renderObjects
>1135	ForStatement	for ( int i = firstFreeIdx ; i > 0 ; i -- )
>1136	CompoundStatement	 
>1137	ExpressionStatement	 
>1138	CallExpression	renderObjects [ i ] -> setIdx ( i )
>1139	ArgumentList	i
>1140	Argument	i
>1141	Identifier	i
>1142	Callee	renderObjects [ i ] -> setIdx
>1143	PtrMemberAccess	renderObjects [ i ] -> setIdx
>1144	Identifier	setIdx
>1145	ArrayIndexing	renderObjects [ i ]
>1146	Identifier	i
>1147	Identifier	renderObjects
>1148	ExpressionStatement	 
>1149	AssignmentExpr	renderObjects [ i ] = renderObjects [ i - 1 ]
>1150	ArrayIndexing	renderObjects [ i - 1 ]
>1151	AdditiveExpression	i - 1
>1152	PrimaryExpression	1
>1153	Identifier	i
>1154	Identifier	renderObjects
>1155	ArrayIndexing	renderObjects [ i ]
>1156	Identifier	i
>1157	Identifier	renderObjects
>1158	IncDecOp	 
>1159	IncDec	--
>1160	Identifier	i
>1161	Condition	 
>1162	RelationalExpression	i > 0
>1163	PrimaryExpression	0
>1164	Identifier	i
>1165	ForInit	 
>1166	IdentifierDeclStatement	int i = firstFreeIdx ;
>1167	IdentifierDecl	i = firstFreeIdx
>1168	AssignmentExpr	i = firstFreeIdx
>1169	Identifier	firstFreeIdx
>1170	Identifier	firstFreeIdx
>1171	Identifier	i
>1172	IdentifierDeclType	int
>1173	IfStatement	if ( curIdx < firstFreeIdx )
>1174	ExpressionStatement	 
>1175	AssignmentExpr	firstFreeIdx = curIdx
>1176	Identifier	curIdx
>1177	Identifier	firstFreeIdx
>1178	Condition	 
>1179	RelationalExpression	curIdx < firstFreeIdx
>1180	Identifier	firstFreeIdx
>1181	Identifier	curIdx
>1182	ExpressionStatement	 
>1183	AssignmentExpr	renderObjects [ curIdx ] = 0
>1184	PrimaryExpression	0
>1185	ArrayIndexing	renderObjects [ curIdx ]
>1186	Identifier	curIdx
>1187	Identifier	renderObjects
>1188	CompoundStatement	 
>1189	ExpressionStatement	 
>1190	AssignmentExpr	firstFreeIdx = 0
>1191	PrimaryExpression	0
>1192	Identifier	firstFreeIdx
>1193	ExpressionStatement	 
>1194	CallExpression	r -> setIdx ( newIdx )
>1195	ArgumentList	newIdx
>1196	Argument	newIdx
>1197	Identifier	newIdx
>1198	Callee	r -> setIdx
>1199	PtrMemberAccess	r -> setIdx
>1200	Identifier	setIdx
>1201	Identifier	r
>1202	ExpressionStatement	 
>1203	AssignmentExpr	renderObjects [ newIdx ] = r
>1204	Identifier	r
>1205	ArrayIndexing	renderObjects [ newIdx ]
>1206	Identifier	newIdx
>1207	Identifier	renderObjects
>1208	ForStatement	for ( int i = 0 ; i < newIdx ; i ++ )
>1209	ExpressionStatement	 
>1210	AssignmentExpr	renderObjects [ i ] = 0
>1211	PrimaryExpression	0
>1212	ArrayIndexing	renderObjects [ i ]
>1213	Identifier	i
>1214	Identifier	renderObjects
>1215	IncDecOp	 
>1216	IncDec	++
>1217	Identifier	i
>1218	Condition	 
>1219	RelationalExpression	i < newIdx
>1220	Identifier	newIdx
>1221	Identifier	i
>1222	ForInit	 
>1223	IdentifierDeclStatement	int i = 0 ;
>1224	IdentifierDecl	i = 0
>1225	AssignmentExpr	i = 0
>1226	PrimaryExpression	0
>1227	Identifier	i
>1228	Identifier	i
>1229	IdentifierDeclType	int
>1230	ForStatement	for ( int i = newSize - 1 ; i >= sizeDiff ; i -- )
>1231	CompoundStatement	 
>1232	IfStatement	if ( renderObjects [ i ] )
>1233	ExpressionStatement	 
>1234	CallExpression	renderObjects [ i ] -> setIdx ( i )
>1235	ArgumentList	i
>1236	Argument	i
>1237	Identifier	i
>1238	Callee	renderObjects [ i ] -> setIdx
>1239	PtrMemberAccess	renderObjects [ i ] -> setIdx
>1240	Identifier	setIdx
>1241	ArrayIndexing	renderObjects [ i ]
>1242	Identifier	i
>1243	Identifier	renderObjects
>1244	Condition	 
>1245	ArrayIndexing	renderObjects [ i ]
>1246	Identifier	i
>1247	Identifier	renderObjects
>1248	ExpressionStatement	 
>1249	AssignmentExpr	renderObjects [ i ] = renderObjects [ i - sizeDiff ]
>1250	ArrayIndexing	renderObjects [ i - sizeDiff ]
>1251	AdditiveExpression	i - sizeDiff
>1252	Identifier	sizeDiff
>1253	Identifier	i
>1254	Identifier	renderObjects
>1255	ArrayIndexing	renderObjects [ i ]
>1256	Identifier	i
>1257	Identifier	renderObjects
>1258	IncDecOp	 
>1259	IncDec	--
>1260	Identifier	i
>1261	Condition	 
>1262	RelationalExpression	i >= sizeDiff
>1263	Identifier	sizeDiff
>1264	Identifier	i
>1265	ForInit	 
>1266	IdentifierDeclStatement	int i = newSize - 1 ;
>1267	IdentifierDecl	i = newSize - 1
>1268	AssignmentExpr	i = newSize - 1
>1269	AdditiveExpression	newSize - 1
>1270	PrimaryExpression	1
>1271	Identifier	newSize
>1272	Identifier	i
>1273	Identifier	i
>1274	IdentifierDeclType	int
>1275	ExpressionStatement	 
>1276	AssignmentExpr	renderObjects [ curIdx ] = 0
>1277	PrimaryExpression	0
>1278	ArrayIndexing	renderObjects [ curIdx ]
>1279	Identifier	curIdx
>1280	Identifier	renderObjects
>1281	ExpressionStatement	 
>1282	CallExpression	renderObjects . resize ( newSize )
>1283	ArgumentList	newSize
>1284	Argument	newSize
>1285	Identifier	newSize
>1286	Callee	renderObjects . resize
>1287	MemberAccess	renderObjects . resize
>1288	Identifier	resize
>1289	Identifier	renderObjects
>1290	IdentifierDeclStatement	 
>1291	IdentifierDecl	newIdx = sizeDiff - 1
>1292	AssignmentExpr	newIdx = sizeDiff - 1
>1293	AdditiveExpression	sizeDiff - 1
>1294	PrimaryExpression	1
>1295	Identifier	sizeDiff
>1296	Identifier	newIdx
>1297	Identifier	newIdx
>1298	IdentifierDeclType	const int
>1299	IdentifierDeclStatement	 
>1300	IdentifierDecl	sizeDiff = newSize - size
>1301	AssignmentExpr	sizeDiff = newSize - size
>1302	AdditiveExpression	newSize - size
>1303	Identifier	size
>1304	Identifier	newSize
>1305	Identifier	sizeDiff
>1306	Identifier	sizeDiff
>1307	IdentifierDeclType	const int
>1308	IdentifierDeclStatement	 
>1309	IdentifierDecl	newSize = size + 10
>1310	AssignmentExpr	newSize = size + 10
>1311	AdditiveExpression	size + 10
>1312	PrimaryExpression	10
>1313	Identifier	size
>1314	Identifier	newSize
>1315	Identifier	newSize
>1316	IdentifierDeclType	const int
>1317	Condition	 
>1318	EqualityExpression	objectCount == size
>1319	Identifier	size
>1320	Identifier	objectCount
>1321	CompoundStatement	 
>1322	WhileStatement	while ( renderObjects [ firstFreeIdx ] )
>1323	ExpressionStatement	 
>1324	IncDecOp	firstFreeIdx ++
>1325	IncDec	++
>1326	Identifier	firstFreeIdx
>1327	Condition	 
>1328	ArrayIndexing	renderObjects [ firstFreeIdx ]
>1329	Identifier	firstFreeIdx
>1330	Identifier	renderObjects
>1331	ExpressionStatement	 
>1332	CallExpression	r -> setIdx ( newIdx )
>1333	ArgumentList	newIdx
>1334	Argument	newIdx
>1335	Identifier	newIdx
>1336	Callee	r -> setIdx
>1337	PtrMemberAccess	r -> setIdx
>1338	Identifier	setIdx
>1339	Identifier	r
>1340	ExpressionStatement	 
>1341	AssignmentExpr	renderObjects [ newIdx ] = r
>1342	Identifier	r
>1343	ArrayIndexing	renderObjects [ newIdx ]
>1344	Identifier	newIdx
>1345	Identifier	renderObjects
>1346	ExpressionStatement	 
>1347	AssignmentExpr	renderObjects [ curIdx ] = 0
>1348	PrimaryExpression	0
>1349	ArrayIndexing	renderObjects [ curIdx ]
>1350	Identifier	curIdx
>1351	Identifier	renderObjects
>1352	IdentifierDeclStatement	 
>1353	IdentifierDecl	newIdx = firstUsed - 1
>1354	AssignmentExpr	newIdx = firstUsed - 1
>1355	AdditiveExpression	firstUsed - 1
>1356	PrimaryExpression	1
>1357	Identifier	firstUsed
>1358	Identifier	newIdx
>1359	Identifier	newIdx
>1360	IdentifierDeclType	const int
>1361	Condition	 
>1362	RelationalExpression	firstUsed > 0
>1363	PrimaryExpression	0
>1364	Identifier	firstUsed
>1365	CompoundStatement	 
>1366	Condition	 
>1367	EqualityExpression	curIdx == firstUsed
>1368	Identifier	firstUsed
>1369	Identifier	curIdx
>1370	ForStatement	for ( firstUsed = 0 ; firstUsed < curIdx ; firstUsed ++ )
>1371	CompoundStatement	 
>1372	IfStatement	if ( renderObjects [ firstUsed ] )
>1373	BreakStatement	 
>1374	Condition	 
>1375	ArrayIndexing	renderObjects [ firstUsed ]
>1376	Identifier	firstUsed
>1377	Identifier	renderObjects
>1378	IncDecOp	 
>1379	IncDec	++
>1380	Identifier	firstUsed
>1381	Condition	 
>1382	RelationalExpression	firstUsed < curIdx
>1383	Identifier	curIdx
>1384	Identifier	firstUsed
>1385	ForInit	 
>1386	AssignmentExpr	firstUsed = 0
>1387	PrimaryExpression	0
>1388	Identifier	firstUsed
>1389	IdentifierDeclStatement	 
>1390	IdentifierDecl	firstUsed
>1391	Identifier	firstUsed
>1392	IdentifierDeclType	int
>1393	IdentifierDeclStatement	 
>1394	IdentifierDecl	curIdx = r -> getIdx ( )
>1395	AssignmentExpr	curIdx = r -> getIdx ( )
>1396	CallExpression	r -> getIdx ( )
>1397	ArgumentList	 
>1398	Callee	r -> getIdx
>1399	PtrMemberAccess	r -> getIdx
>1400	Identifier	getIdx
>1401	Identifier	r
>1402	Identifier	curIdx
>1403	Identifier	curIdx
>1404	IdentifierDeclType	const int
>1405	IdentifierDeclStatement	 
>1406	IdentifierDecl	size = renderObjects . size ( )
>1407	AssignmentExpr	size = renderObjects . size ( )
>1408	CallExpression	renderObjects . size ( )
>1409	ArgumentList	 
>1410	Callee	renderObjects . size
>1411	MemberAccess	renderObjects . size
>1412	Identifier	size
>1413	Identifier	renderObjects
>1414	Identifier	size
>1415	Identifier	size
>1416	IdentifierDeclType	const int
>1442	FunctionDef	RenderObjectLayer 
>1443	ParameterList	int pass
>1444	Parameter	 
>1445	Identifier	pass
>1446	ParameterType	int
>1447	ReturnType	void
>1448	CompoundStatement	 
>1449	IfStatement	if ( optimizeStatic && ( followCamera == 0 || followCamera == NO_FOLLOW_CAMERA ) )
>1450	ElseStatement	else
>1451	CompoundStatement	 
>1452	ForStatement	for ( RenderObject * robj = getFirst ( ) ; robj ; robj = getNext ( ) )
>1453	CompoundStatement	 
>1454	ExpressionStatement	 
>1455	CallExpression	renderOneObject ( robj )
>1456	ArgumentList	robj
>1457	Argument	robj
>1458	Identifier	robj
>1459	Callee	renderOneObject
>1460	Identifier	renderOneObject
>1461	AssignmentExpr	 
>1462	CallExpression	getNext ( )
>1463	ArgumentList	 
>1464	Callee	getNext
>1465	Identifier	getNext
>1466	Identifier	robj
>1467	Condition	 
>1468	Identifier	robj
>1469	ForInit	 
>1470	IdentifierDeclStatement	RenderObject * robj = getFirst ( ) ;
>1471	IdentifierDecl	* robj = getFirst ( )
>1472	AssignmentExpr	* robj = getFirst ( )
>1473	CallExpression	getFirst ( )
>1474	ArgumentList	 
>1475	Callee	getFirst
>1476	Identifier	getFirst
>1477	Identifier	robj
>1478	Identifier	robj
>1479	IdentifierDeclType	RenderObject *
>1480	CompoundStatement	 
>1481	ForStatement	for ( int i = 0 ; i < size ; i ++ )
>1482	CompoundStatement	 
>1483	IfStatement	if ( displayList [ i ] . isList )
>1484	ElseStatement	else
>1485	ExpressionStatement	 
>1486	CallExpression	renderOneObject ( displayList [ i ] . u . robj )
>1487	ArgumentList	displayList [ i ] . u . robj
>1488	Argument	displayList [ i ] . u . robj
>1489	MemberAccess	displayList [ i ] . u . robj
>1490	Identifier	robj
>1491	MemberAccess	displayList [ i ] . u
>1492	Identifier	u
>1493	ArrayIndexing	displayList [ i ]
>1494	Identifier	i
>1495	Identifier	displayList
>1496	Callee	renderOneObject
>1497	Identifier	renderOneObject
>1498	CompoundStatement	 
>1499	ExpressionStatement	 
>1500	AssignmentExpr	RenderObject 
>1501	PrimaryExpression	0
>1502	Identifier	RenderObject 
>1503	ExpressionStatement	 
>1504	CallExpression	glCallList ( displayList [ i ] . u . listID )
>1505	ArgumentList	displayList [ i ] . u . listID
>1506	Argument	displayList [ i ] . u . listID
>1507	MemberAccess	displayList [ i ] . u . listID
>1508	Identifier	listID
>1509	MemberAccess	displayList [ i ] . u
>1510	Identifier	u
>1511	ArrayIndexing	displayList [ i ]
>1512	Identifier	i
>1513	Identifier	displayList
>1514	Callee	glCallList
>1515	Identifier	glCallList
>1516	Condition	 
>1517	MemberAccess	displayList [ i ] . isList
>1518	Identifier	isList
>1519	ArrayIndexing	displayList [ i ]
>1520	Identifier	i
>1521	Identifier	displayList
>1522	IncDecOp	 
>1523	IncDec	++
>1524	Identifier	i
>1525	Condition	 
>1526	RelationalExpression	i < size
>1527	Identifier	size
>1528	Identifier	i
>1529	ForInit	 
>1530	IdentifierDeclStatement	int i = 0 ;
>1531	IdentifierDecl	i = 0
>1532	AssignmentExpr	i = 0
>1533	PrimaryExpression	0
>1534	Identifier	i
>1535	Identifier	i
>1536	IdentifierDeclType	int
>1537	IdentifierDeclStatement	 
>1538	IdentifierDecl	size = displayList . size ( )
>1539	AssignmentExpr	size = displayList . size ( )
>1540	CallExpression	displayList . size ( )
>1541	ArgumentList	 
>1542	Callee	displayList . size
>1543	MemberAccess	displayList . size
>1544	Identifier	size
>1545	Identifier	displayList
>1546	Identifier	size
>1547	Identifier	size
>1548	IdentifierDeclType	const int
>1549	IfStatement	if ( ! displayListValid )
>1550	ExpressionStatement	 
>1551	CallExpression	generateDisplayList ( )
>1552	ArgumentList	 
>1553	Callee	generateDisplayList
>1554	Identifier	generateDisplayList
>1555	Condition	 
>1556	UnaryOp	! displayListValid
>1557	Identifier	displayListValid
>1558	UnaryOperator	!
>1559	Condition	 
>1560	AndExpression	optimizeStatic && ( followCamera == 0 || followCamera == NO_FOLLOW_CAMERA )
>1561	OrExpression	followCamera == 0 || followCamera == NO_FOLLOW_CAMERA
>1562	EqualityExpression	followCamera == NO_FOLLOW_CAMERA
>1563	Identifier	NO_FOLLOW_CAMERA
>1564	Identifier	followCamera
>1565	EqualityExpression	followCamera == 0
>1566	PrimaryExpression	0
>1567	Identifier	followCamera
>1568	Identifier	optimizeStatic
>1569	ExpressionStatement	 
>1570	AssignmentExpr	core -> currentLayerPass = pass
>1571	Identifier	pass
>1572	PtrMemberAccess	core -> currentLayerPass
>1573	Identifier	currentLayerPass
>1574	Identifier	core
>1600	FunctionDef	RenderObjectLayer 
>1601	ParameterList	 
>1602	ReturnType	void
>1603	CompoundStatement	 
>1604	IfStatement	if ( displayListValid )
>1605	ExpressionStatement	 
>1606	CallExpression	clearDisplayList ( )
>1607	ArgumentList	 
>1608	Callee	clearDisplayList
>1609	Identifier	clearDisplayList
>1610	Condition	 
>1611	Identifier	displayListValid
>1616	FunctionDef	RenderObjectLayer 
>1617	ParameterList	 
>1618	ReturnType	void
>1619	CompoundStatement	 
>1620	ExpressionStatement	 
>1621	AssignmentExpr	displayListValid = false
>1622	Identifier	false
>1623	Identifier	displayListValid
>1624	ExpressionStatement	 
>1625	CallExpression	displayList . resize ( 0 )
>1626	ArgumentList	0
>1627	Argument	0
>1628	PrimaryExpression	0
>1629	Callee	displayList . resize
>1630	MemberAccess	displayList . resize
>1631	Identifier	resize
>1632	Identifier	displayList
>1633	ForStatement	for ( int i = 0 ; i < size ; i ++ )
>1634	CompoundStatement	 
>1635	IfStatement	if ( displayList [ i ] . isList )
>1636	ExpressionStatement	 
>1637	CallExpression	glDeleteLists ( displayList [ i ] . u . listID , 1 )
>1638	ArgumentList	displayList [ i ] . u . listID
>1639	Argument	1
>1640	PrimaryExpression	1
>1641	Argument	displayList [ i ] . u . listID
>1642	MemberAccess	displayList [ i ] . u . listID
>1643	Identifier	listID
>1644	MemberAccess	displayList [ i ] . u
>1645	Identifier	u
>1646	ArrayIndexing	displayList [ i ]
>1647	Identifier	i
>1648	Identifier	displayList
>1649	Callee	glDeleteLists
>1650	Identifier	glDeleteLists
>1651	Condition	 
>1652	MemberAccess	displayList [ i ] . isList
>1653	Identifier	isList
>1654	ArrayIndexing	displayList [ i ]
>1655	Identifier	i
>1656	Identifier	displayList
>1657	IncDecOp	 
>1658	IncDec	++
>1659	Identifier	i
>1660	Condition	 
>1661	RelationalExpression	i < size
>1662	Identifier	size
>1663	Identifier	i
>1664	ForInit	 
>1665	IdentifierDeclStatement	int i = 0 ;
>1666	IdentifierDecl	i = 0
>1667	AssignmentExpr	i = 0
>1668	PrimaryExpression	0
>1669	Identifier	i
>1670	Identifier	i
>1671	IdentifierDeclType	int
>1672	IdentifierDeclStatement	 
>1673	IdentifierDecl	size = displayList . size ( )
>1674	AssignmentExpr	size = displayList . size ( )
>1675	CallExpression	displayList . size ( )
>1676	ArgumentList	 
>1677	Callee	displayList . size
>1678	MemberAccess	displayList . size
>1679	Identifier	size
>1680	Identifier	displayList
>1681	Identifier	size
>1682	Identifier	size
>1683	IdentifierDeclType	const int
>1684	IfStatement	if ( ! displayListValid )
>1685	ReturnStatement	 
>1686	Condition	 
>1687	UnaryOp	! displayListValid
>1688	Identifier	displayListValid
>1689	UnaryOperator	!
>1704	FunctionDef	RenderObjectLayer 
>1705	ParameterList	 
>1706	ReturnType	void
>1707	CompoundStatement	 
>1708	ExpressionStatement	 
>1709	AssignmentExpr	this -> cull = savedCull
>1710	Identifier	savedCull
>1711	PtrMemberAccess	this -> cull
>1712	Identifier	cull
>1713	Identifier	this
>1714	ExpressionStatement	 
>1715	AssignmentExpr	displayListValid = true
>1716	Identifier	true
>1717	Identifier	displayListValid
>1718	ExpressionStatement	 
>1719	CallExpression	displayList . resize ( listLength )
>1720	ArgumentList	listLength
>1721	Argument	listLength
>1722	Identifier	listLength
>1723	Callee	displayList . resize
>1724	MemberAccess	displayList . resize
>1725	Identifier	resize
>1726	Identifier	displayList
>1727	IfStatement	if ( lastWasStatic )
>1728	CompoundStatement	 
>1729	ExpressionStatement	 
>1730	CallExpression	glEndList ( )
>1731	ArgumentList	 
>1732	Callee	glEndList
>1733	Identifier	glEndList
>1734	Condition	 
>1735	Identifier	lastWasStatic
>1736	ForStatement	for ( RenderObject * robj = getFirst ( ) ; robj ; robj = getNext ( ) )
>1737	CompoundStatement	 
>1738	IfStatement	if ( addEntry )
>1739	ElseStatement	else
>1740	CompoundStatement	 
>1741	ExpressionStatement	 
>1742	CallExpression	renderOneObject ( robj )
>1743	ArgumentList	robj
>1744	Argument	robj
>1745	Identifier	robj
>1746	Callee	renderOneObject
>1747	Identifier	renderOneObject
>1748	CompoundStatement	 
>1749	ExpressionStatement	 
>1750	IncDecOp	listLength ++
>1751	IncDec	++
>1752	Identifier	listLength
>1753	ExpressionStatement	 
>1754	AssignmentExpr	displayList [ listLength ] . u . robj = robj
>1755	Identifier	robj
>1756	MemberAccess	displayList [ listLength ] . u . robj
>1757	Identifier	robj
>1758	MemberAccess	displayList [ listLength ] . u
>1759	Identifier	u
>1760	ArrayIndexing	displayList [ listLength ]
>1761	Identifier	listLength
>1762	Identifier	displayList
>1763	ExpressionStatement	 
>1764	AssignmentExpr	displayList [ listLength ] . isList = false
>1765	Identifier	false
>1766	MemberAccess	displayList [ listLength ] . isList
>1767	Identifier	isList
>1768	ArrayIndexing	displayList [ listLength ]
>1769	Identifier	listLength
>1770	Identifier	displayList
>1771	Condition	 
>1772	Identifier	addEntry
>1773	IfStatement	if ( robj -> isStatic ( ) && robj -> followCamera == 0 )
>1774	ElseStatement	else
>1775	CompoundStatement	 
>1776	IfStatement	if ( lastWasStatic )
>1777	CompoundStatement	 
>1778	ExpressionStatement	 
>1779	AssignmentExpr	lastWasStatic = false
>1780	Identifier	false
>1781	Identifier	lastWasStatic
>1782	ExpressionStatement	 
>1783	CallExpression	glEndList ( )
>1784	ArgumentList	 
>1785	Callee	glEndList
>1786	Identifier	glEndList
>1787	Condition	 
>1788	Identifier	lastWasStatic
>1789	CompoundStatement	 
>1790	IfStatement	if ( lastWasStatic )
>1791	ElseStatement	else
>1792	CompoundStatement	 
>1793	IfStatement	if ( listID != 0 )
>1794	ElseStatement	else
>1795	ExpressionStatement	 
>1796	CallExpression	debugLog ( \"glGenLists failed\" )
>1797	ArgumentList	\"glGenLists failed\"
>1798	Argument	\"glGenLists failed\"
>1799	PrimaryExpression	\"glGenLists failed\"
>1800	Callee	debugLog
>1801	Identifier	debugLog
>1802	CompoundStatement	 
>1803	IfStatement	if ( glGetError ( ) == GL_NO_ERROR )
>1804	ElseStatement	else
>1805	ExpressionStatement	 
>1806	CallExpression	debugLog ( \"glNewList failed\" )
>1807	ArgumentList	\"glNewList failed\"
>1808	Argument	\"glNewList failed\"
>1809	PrimaryExpression	\"glNewList failed\"
>1810	Callee	debugLog
>1811	Identifier	debugLog
>1812	CompoundStatement	 
>1813	ExpressionStatement	 
>1814	AssignmentExpr	RenderObject 
>1815	PrimaryExpression	0
>1816	Identifier	RenderObject 
>1817	ExpressionStatement	 
>1818	AssignmentExpr	addEntry = false
>1819	Identifier	false
>1820	Identifier	addEntry
>1821	ExpressionStatement	 
>1822	AssignmentExpr	lastWasStatic = true
>1823	Identifier	true
>1824	Identifier	lastWasStatic
>1825	ExpressionStatement	 
>1826	IncDecOp	listLength ++
>1827	IncDec	++
>1828	Identifier	listLength
>1829	ExpressionStatement	 
>1830	AssignmentExpr	displayList [ listLength ] . u . listID = listID
>1831	Identifier	listID
>1832	MemberAccess	displayList [ listLength ] . u . listID
>1833	Identifier	listID
>1834	MemberAccess	displayList [ listLength ] . u
>1835	Identifier	u
>1836	ArrayIndexing	displayList [ listLength ]
>1837	Identifier	listLength
>1838	Identifier	displayList
>1839	ExpressionStatement	 
>1840	AssignmentExpr	displayList [ listLength ] . isList = true
>1841	Identifier	true
>1842	MemberAccess	displayList [ listLength ] . isList
>1843	Identifier	isList
>1844	ArrayIndexing	displayList [ listLength ]
>1845	Identifier	listLength
>1846	Identifier	displayList
>1847	Condition	 
>1848	EqualityExpression	glGetError ( ) == GL_NO_ERROR
>1849	Identifier	GL_NO_ERROR
>1850	CallExpression	glGetError ( )
>1851	ArgumentList	 
>1852	Callee	glGetError
>1853	Identifier	glGetError
>1854	ExpressionStatement	 
>1855	CallExpression	glNewList ( listID , GL_COMPILE )
>1856	ArgumentList	listID
>1857	Argument	GL_COMPILE
>1858	Identifier	GL_COMPILE
>1859	Argument	listID
>1860	Identifier	listID
>1861	Callee	glNewList
>1862	Identifier	glNewList
>1863	ExpressionStatement	 
>1864	CastExpression	( void ) glGetError ( )
>1865	CallExpression	glGetError ( )
>1866	ArgumentList	 
>1867	Callee	glGetError
>1868	Identifier	glGetError
>1869	CastTarget	void
>1870	Condition	 
>1871	EqualityExpression	listID != 0
>1872	PrimaryExpression	0
>1873	Identifier	listID
>1874	IdentifierDeclStatement	 
>1875	IdentifierDecl	listID = glGenLists ( 1 )
>1876	AssignmentExpr	listID = glGenLists ( 1 )
>1877	CallExpression	glGenLists ( 1 )
>1878	ArgumentList	1
>1879	Argument	1
>1880	PrimaryExpression	1
>1881	Callee	glGenLists
>1882	Identifier	glGenLists
>1883	Identifier	listID
>1884	Identifier	listID
>1885	IdentifierDeclType	int
>1886	CompoundStatement	 
>1887	ExpressionStatement	 
>1888	AssignmentExpr	addEntry = false
>1889	Identifier	false
>1890	Identifier	addEntry
>1891	Condition	 
>1892	Identifier	lastWasStatic
>1893	Condition	 
>1894	AndExpression	robj -> isStatic ( ) && robj -> followCamera == 0
>1895	EqualityExpression	robj -> followCamera == 0
>1896	PrimaryExpression	0
>1897	PtrMemberAccess	robj -> followCamera
>1898	Identifier	followCamera
>1899	Identifier	robj
>1900	CallExpression	robj -> isStatic ( )
>1901	ArgumentList	 
>1902	Callee	robj -> isStatic
>1903	PtrMemberAccess	robj -> isStatic
>1904	Identifier	isStatic
>1905	Identifier	robj
>1906	IdentifierDeclStatement	 
>1907	IdentifierDecl	addEntry = true
>1908	AssignmentExpr	addEntry = true
>1909	Identifier	true
>1910	Identifier	true
>1911	Identifier	addEntry
>1912	IdentifierDeclType	bool
>1913	IfStatement	if ( listLength >= listSize )
>1914	CompoundStatement	 
>1915	ExpressionStatement	 
>1916	CallExpression	displayList . resize ( listSize )
>1917	ArgumentList	listSize
>1918	Argument	listSize
>1919	Identifier	listSize
>1920	Callee	displayList . resize
>1921	MemberAccess	displayList . resize
>1922	Identifier	resize
>1923	Identifier	displayList
>1924	ExpressionStatement	 
>1925	AssignmentExpr	listSize += 100
>1926	PrimaryExpression	100
>1927	Identifier	listSize
>1928	Condition	 
>1929	RelationalExpression	listLength >= listSize
>1930	Identifier	listSize
>1931	Identifier	listLength
>1932	AssignmentExpr	 
>1933	CallExpression	getNext ( )
>1934	ArgumentList	 
>1935	Callee	getNext
>1936	Identifier	getNext
>1937	Identifier	robj
>1938	Condition	 
>1939	Identifier	robj
>1940	ForInit	 
>1941	IdentifierDeclStatement	RenderObject * robj = getFirst ( ) ;
>1942	IdentifierDecl	* robj = getFirst ( )
>1943	AssignmentExpr	* robj = getFirst ( )
>1944	CallExpression	getFirst ( )
>1945	ArgumentList	 
>1946	Callee	getFirst
>1947	Identifier	getFirst
>1948	Identifier	robj
>1949	Identifier	robj
>1950	IdentifierDeclType	RenderObject *
>1951	IdentifierDeclStatement	 
>1952	IdentifierDecl	lastWasStatic = false
>1953	AssignmentExpr	lastWasStatic = false
>1954	Identifier	false
>1955	Identifier	false
>1956	Identifier	lastWasStatic
>1957	IdentifierDeclType	bool
>1958	IdentifierDeclStatement	 
>1959	IdentifierDecl	listLength = 0
>1960	AssignmentExpr	listLength = 0
>1961	PrimaryExpression	0
>1962	Identifier	listLength
>1963	Identifier	listLength
>1964	IdentifierDeclType	int
>1965	IdentifierDecl	listSize = 0
>1966	AssignmentExpr	listSize = 0
>1967	PrimaryExpression	0
>1968	Identifier	listSize
>1969	Identifier	listSize
>1970	IdentifierDeclType	int
>1971	ExpressionStatement	 
>1972	AssignmentExpr	this -> cull = false
>1973	Identifier	false
>1974	PtrMemberAccess	this -> cull
>1975	Identifier	cull
>1976	Identifier	this
>1977	IdentifierDeclStatement	 
>1978	IdentifierDecl	savedCull = this -> cull
>1979	AssignmentExpr	savedCull = this -> cull
>1980	PtrMemberAccess	this -> cull
>1981	Identifier	cull
>1982	Identifier	this
>1983	Identifier	savedCull
>1984	Identifier	savedCull
>1985	IdentifierDeclType	bool
>2019	FunctionDef	RenderObjectLayer 
>2020	ParameterList	RenderObject * robj
>2021	Parameter	 
>2022	Identifier	robj
>2023	ParameterType	RenderObject *
>2024	ReturnType	inline void
>2025	CompoundStatement	 
>2026	ExpressionStatement	 
>2027	IncDecOp	core -> processedRenderObjectCount ++
>2028	IncDec	++
>2029	PtrMemberAccess	core -> processedRenderObjectCount
>2030	Identifier	processedRenderObjectCount
>2031	Identifier	core
>2032	IfStatement	if ( ! this -> cull || ! robj -> cull || robj -> isOnScreen ( ) )
>2033	CompoundStatement	 
>2034	ExpressionStatement	 
>2035	IncDecOp	core -> renderObjectCount ++
>2036	IncDec	++
>2037	PtrMemberAccess	core -> renderObjectCount
>2038	Identifier	renderObjectCount
>2039	Identifier	core
>2040	ExpressionStatement	 
>2041	CallExpression	robj -> render ( )
>2042	ArgumentList	 
>2043	Callee	robj -> render
>2044	PtrMemberAccess	robj -> render
>2045	Identifier	render
>2046	Identifier	robj
>2047	Condition	 
>2048	OrExpression	! this -> cull || ! robj -> cull || robj -> isOnScreen ( )
>2049	OrExpression	! robj -> cull || robj -> isOnScreen ( )
>2050	CallExpression	robj -> isOnScreen ( )
>2051	ArgumentList	 
>2052	Callee	robj -> isOnScreen
>2053	PtrMemberAccess	robj -> isOnScreen
>2054	Identifier	isOnScreen
>2055	Identifier	robj
>2056	UnaryOp	! robj -> cull
>2057	PtrMemberAccess	robj -> cull
>2058	Identifier	cull
>2059	Identifier	robj
>2060	UnaryOperator	!
>2061	UnaryOp	! this -> cull
>2062	PtrMemberAccess	this -> cull
>2063	Identifier	cull
>2064	Identifier	this
>2065	UnaryOperator	!
>2066	IfStatement	if ( robj -> getParent ( ) || robj -> alpha . x == 0 )
>2067	ReturnStatement	 
>2068	Condition	 
>2069	OrExpression	robj -> getParent ( ) || robj -> alpha . x == 0
>2070	EqualityExpression	robj -> alpha . x == 0
>2071	PrimaryExpression	0
>2072	MemberAccess	robj -> alpha . x
>2073	Identifier	x
>2074	PtrMemberAccess	robj -> alpha
>2075	Identifier	alpha
>2076	Identifier	robj
>2077	CallExpression	robj -> getParent ( )
>2078	ArgumentList	 
>2079	Callee	robj -> getParent
>2080	PtrMemberAccess	robj -> getParent
>2081	Identifier	getParent
>2082	Identifier	robj
>2083	ExpressionStatement	 
>2084	IncDecOp	core -> totalRenderObjectCount ++
>2085	IncDec	++
>2086	PtrMemberAccess	core -> totalRenderObjectCount
>2087	Identifier	totalRenderObjectCount
>2088	Identifier	core
<7=9,8
<9=10
<10=11
<11=13,12
<13=14
<18=24,23,19
<19=20
<20=22,21
<24=25
<25=26
<26=28,27
<28=30,29
<38=44,43,39
<39=40
<40=42,41
<44=50,45
<45=46
<46=48,47
<48=49
<50=51
<51=53,52
<53=55,54
<63=72,71,64
<64=68,65
<65=67,66
<68=70,69
<72=73
<73=74
<74=81,75
<75=77,76
<77=78
<78=80,79
<81=83,82
<83=84
<84=86,85
<96=99,98,97
<99=430,418,411,390,346,335,297,290,285,255,109,100
<100=101
<101=105,102
<102=103
<103=104
<105=106
<106=108,107
<109=247,241,238,110
<110=231,222,185,111
<111=181,112
<112=172,164,153,147,136,127,119,113
<113=114
<114=116,115
<116=118,117
<119=120
<120=124,121
<121=123,122
<124=126,125
<127=128
<128=135,134,129
<129=133,130
<130=132,131
<136=137
<137=141,138
<138=139
<139=140
<141=142
<142=144,143
<144=146,145
<147=148
<148=150,149
<150=152,151
<153=154
<154=158,155
<155=156
<156=157
<158=159
<159=161,160
<161=163,162
<164=165
<165=169,166
<166=168,167
<169=171,170
<172=173
<173=180,179,174
<174=178,175
<175=177,176
<181=182
<182=184,183
<185=212,208,205,186
<186=187
<187=199,188
<188=195,189
<189=190
<190=194,191
<191=193,192
<195=196
<196=198,197
<199=200
<200=202,201
<202=204,203
<205=207,206
<208=209
<209=211,210
<212=213
<213=214
<214=221,220,215
<215=219,216
<216=218,217
<222=223
<223=230,229,224
<224=228,225
<225=227,226
<231=232
<232=237,236,233
<233=235,234
<238=240,239
<241=242
<242=246,243
<243=245,244
<247=248
<248=249
<249=254,253,250
<250=252,251
<255=277,273,270,256
<256=257
<257=258
<258=267,259
<259=261,260
<261=262
<262=264,263
<264=266,265
<267=269,268
<270=272,271
<273=274
<274=276,275
<277=278
<278=279
<279=284,283,280
<280=282,281
<285=286
<286=289,288,287
<290=291
<291=296,295,292
<292=294,293
<297=331,298
<298=327,315,303,299
<299=300
<300=302,301
<303=304
<304=313,305
<305=306
<306=307
<307=309,308
<309=310
<310=312,311
<313=314
<315=316
<316=326,317
<317=325,318
<318=324,319
<319=323,320
<320=322,321
<327=328
<328=330,329
<331=332
<332=334,333
<335=342,336
<336=337
<337=339,338
<339=341,340
<342=343
<343=345,344
<346=384,380,377,347
<347=348
<348=373,349
<349=365,354,350
<350=351
<351=353,352
<354=355
<355=359,356
<356=357
<357=358
<359=360
<360=362,361
<362=364,363
<365=366
<366=370,367
<367=369,368
<370=372,371
<373=374
<374=376,375
<377=379,378
<380=381
<381=383,382
<384=385
<385=389,386
<386=388,387
<390=407,403,400,391
<391=392
<392=394,393
<394=395
<395=399,396
<396=398,397
<400=402,401
<403=404
<404=406,405
<407=408
<408=410,409
<411=415,412
<412=414,413
<415=417,416
<418=419
<419=429,428,420
<420=427,421
<421=423,422
<423=424
<424=426,425
<430=432,431
<432=433
<433=435,434
<469=475,474,470
<470=471
<471=473,472
<475=558,537,531,527,518,501,492,481,476
<476=477
<477=479,478
<479=480
<481=482
<482=484,483
<484=491,485
<485=489,486
<486=487
<487=488
<489=490
<492=493
<493=497,494
<494=495
<495=496
<497=498
<498=500,499
<501=514,511,502
<502=503
<503=505,504
<505=506
<506=510,507
<507=509,508
<511=513,512
<514=515
<515=517,516
<518=519
<519=523,520
<520=521
<521=522
<523=524
<524=526,525
<527=528
<528=530,529
<531=532
<532=534,533
<534=536,535
<537=554,538
<538=548,539
<539=540
<540=544,541
<541=542
<542=543
<544=545
<545=547,546
<548=549
<549=553,550
<550=552,551
<554=555
<555=557,556
<558=559
<559=569,568,560
<560=567,561
<561=563,562
<563=564
<564=566,565
<586=592,591,587
<587=588
<588=590,589
<592=687,664,648,642,638,629,618,609,598,593
<593=594
<594=596,595
<596=597
<598=599
<599=601,600
<601=608,602
<602=606,603
<603=604
<604=605
<606=607
<609=610
<610=614,611
<611=612
<612=613
<614=615
<615=617,616
<618=619
<619=625,620
<620=621
<621=622
<622=624,623
<625=626
<626=628,627
<629=634,630
<630=631
<631=633,632
<634=635
<635=637,636
<638=639
<639=641,640
<642=643
<643=645,644
<645=647,646
<648=658,649
<649=651,650
<651=652
<652=656,653
<653=654
<654=655
<656=657
<658=659
<659=661,660
<661=663,662
<664=674,665
<665=667,666
<667=668
<668=672,669
<669=670
<670=671
<672=673
<674=675
<675=684,676
<676=683,677
<677=679,678
<679=680
<680=682,681
<684=686,685
<687=688
<688=698,697,689
<689=696,690
<690=692,691
<692=693
<693=695,694
<717=723,722,718
<718=719
<719=721,720
<723=1024,1012,1008,987,747,738,729,724
<724=725
<725=727,726
<727=728
<729=730
<730=734,731
<731=732
<732=733
<734=735
<735=737,736
<738=739
<739=743,740
<740=741
<741=742
<743=744
<744=746,745
<747=983,982,748
<748=749
<749=976,936,750
<750=751
<751=932,859,752
<752=753
<753=853,849,826,782,776,767,763,754
<754=759,755
<755=756
<756=758,757
<759=760
<760=762,761
<763=764
<764=766,765
<767=768
<768=772,769
<769=770
<770=771
<772=773
<773=775,774
<776=777
<777=779,778
<779=781,780
<782=816,812,809,783
<783=799,784
<784=785
<785=791,786
<786=787
<787=788
<788=790,789
<791=792
<792=794,793
<794=798,795
<795=797,796
<799=800
<800=804,801
<801=803,802
<804=808,805
<805=807,806
<809=811,810
<812=813
<813=815,814
<816=817
<817=818
<818=825,824,819
<819=823,820
<820=822,821
<826=843,839,836,827
<827=828
<828=830,829
<830=831
<831=835,832
<832=834,833
<836=838,837
<839=840
<840=842,841
<843=844
<844=848,845
<845=847,846
<849=850
<850=852,851
<853=854
<854=856,855
<856=858,857
<859=923,914,908,902,893,869,860
<860=865,861
<861=862
<862=864,863
<865=866
<866=868,867
<869=883,879,876,870
<870=871
<871=873,872
<873=875,874
<876=878,877
<879=880
<880=882,881
<883=884
<884=885
<885=892,891,886
<886=890,887
<887=889,888
<893=894
<894=898,895
<895=896
<896=897
<898=899
<899=901,900
<902=903
<903=905,904
<905=907,906
<908=909
<909=911,910
<911=913,912
<914=915
<915=919,916
<916=917
<917=918
<919=920
<920=922,921
<923=924
<924=931,930,925
<925=929,926
<926=928,927
<932=933
<933=935,934
<936=967,961,955,946,937
<937=942,938
<938=939
<939=941,940
<942=943
<943=945,944
<946=947
<947=951,948
<948=949
<949=950
<951=952
<952=954,953
<955=956
<956=958,957
<958=960,959
<961=962
<962=964,963
<964=966,965
<967=968
<968=975,974,969
<969=973,970
<970=972,971
<976=977
<977=981,978
<978=980,979
<983=984
<984=986,985
<987=1002,998,995,988
<988=989
<989=991,990
<991=992
<992=994,993
<995=997,996
<998=999
<999=1001,1000
<1002=1003
<1003=1007,1004
<1004=1006,1005
<1008=1009
<1009=1011,1010
<1012=1013
<1013=1023,1022,1014
<1014=1021,1015
<1015=1017,1016
<1017=1018
<1018=1020,1019
<1024=1025
<1025=1035,1034,1026
<1026=1033,1027
<1027=1029,1028
<1029=1030
<1030=1032,1031
<1062=1068,1067,1063
<1063=1064
<1064=1066,1065
<1068=1405,1393,1389,1370,1092,1083,1074,1069
<1069=1070
<1070=1072,1071
<1072=1073
<1074=1075
<1075=1079,1076
<1076=1077
<1077=1078
<1079=1080
<1080=1082,1081
<1083=1084
<1084=1088,1085
<1085=1086
<1086=1087
<1088=1089
<1089=1091,1090
<1092=1366,1365,1093
<1093=1094
<1094=1361,1321,1095
<1095=1096
<1096=1317,1188,1097
<1097=1098
<1098=1182,1173,1135,1129,1120,1099
<1099=1116,1112,1109,1100
<1100=1101
<1101=1103,1102
<1103=1104
<1104=1108,1105
<1105=1107,1106
<1109=1111,1110
<1112=1113
<1113=1115,1114
<1116=1117
<1117=1119,1118
<1120=1121
<1121=1125,1122
<1122=1123
<1123=1124
<1125=1126
<1126=1128,1127
<1129=1130
<1130=1132,1131
<1132=1134,1133
<1135=1165,1161,1158,1136
<1136=1148,1137
<1137=1138
<1138=1142,1139
<1139=1140
<1140=1141
<1142=1143
<1143=1145,1144
<1145=1147,1146
<1148=1149
<1149=1155,1150
<1150=1154,1151
<1151=1153,1152
<1155=1157,1156
<1158=1160,1159
<1161=1162
<1162=1164,1163
<1165=1166
<1166=1167
<1167=1172,1171,1168
<1168=1170,1169
<1173=1178,1174
<1174=1175
<1175=1177,1176
<1178=1179
<1179=1181,1180
<1182=1183
<1183=1185,1184
<1185=1187,1186
<1188=1308,1299,1290,1281,1275,1230,1208,1202,1193,1189
<1189=1190
<1190=1192,1191
<1193=1194
<1194=1198,1195
<1195=1196
<1196=1197
<1198=1199
<1199=1201,1200
<1202=1203
<1203=1205,1204
<1205=1207,1206
<1208=1222,1218,1215,1209
<1209=1210
<1210=1212,1211
<1212=1214,1213
<1215=1217,1216
<1218=1219
<1219=1221,1220
<1222=1223
<1223=1224
<1224=1229,1228,1225
<1225=1227,1226
<1230=1265,1261,1258,1231
<1231=1248,1232
<1232=1244,1233
<1233=1234
<1234=1238,1235
<1235=1236
<1236=1237
<1238=1239
<1239=1241,1240
<1241=1243,1242
<1244=1245
<1245=1247,1246
<1248=1249
<1249=1255,1250
<1250=1254,1251
<1251=1253,1252
<1255=1257,1256
<1258=1260,1259
<1261=1262
<1262=1264,1263
<1265=1266
<1266=1267
<1267=1274,1273,1268
<1268=1272,1269
<1269=1271,1270
<1275=1276
<1276=1278,1277
<1278=1280,1279
<1281=1282
<1282=1286,1283
<1283=1284
<1284=1285
<1286=1287
<1287=1289,1288
<1290=1291
<1291=1298,1297,1292
<1292=1296,1293
<1293=1295,1294
<1299=1300
<1300=1307,1306,1301
<1301=1305,1302
<1302=1304,1303
<1308=1309
<1309=1316,1315,1310
<1310=1314,1311
<1311=1313,1312
<1317=1318
<1318=1320,1319
<1321=1352,1346,1340,1331,1322
<1322=1327,1323
<1323=1324
<1324=1326,1325
<1327=1328
<1328=1330,1329
<1331=1332
<1332=1336,1333
<1333=1334
<1334=1335
<1336=1337
<1337=1339,1338
<1340=1341
<1341=1343,1342
<1343=1345,1344
<1346=1347
<1347=1349,1348
<1349=1351,1350
<1352=1353
<1353=1360,1359,1354
<1354=1358,1355
<1355=1357,1356
<1361=1362
<1362=1364,1363
<1366=1367
<1367=1369,1368
<1370=1385,1381,1378,1371
<1371=1372
<1372=1374,1373
<1374=1375
<1375=1377,1376
<1378=1380,1379
<1381=1382
<1382=1384,1383
<1385=1386
<1386=1388,1387
<1389=1390
<1390=1392,1391
<1393=1394
<1394=1404,1403,1395
<1395=1402,1396
<1396=1398,1397
<1398=1399
<1399=1401,1400
<1405=1406
<1406=1416,1415,1407
<1407=1414,1408
<1408=1410,1409
<1410=1411
<1411=1413,1412
<1442=1448,1447,1443
<1443=1444
<1444=1446,1445
<1448=1569,1449
<1449=1559,1480,1450
<1450=1451
<1451=1452
<1452=1469,1467,1461,1453
<1453=1454
<1454=1455
<1455=1459,1456
<1456=1457
<1457=1458
<1459=1460
<1461=1466,1462
<1462=1464,1463
<1464=1465
<1467=1468
<1469=1470
<1470=1471
<1471=1479,1478,1472
<1472=1477,1473
<1473=1475,1474
<1475=1476
<1480=1549,1537,1481
<1481=1529,1525,1522,1482
<1482=1483
<1483=1516,1498,1484
<1484=1485
<1485=1486
<1486=1496,1487
<1487=1488
<1488=1489
<1489=1491,1490
<1491=1493,1492
<1493=1495,1494
<1496=1497
<1498=1503,1499
<1499=1500
<1500=1502,1501
<1503=1504
<1504=1514,1505
<1505=1506
<1506=1507
<1507=1509,1508
<1509=1511,1510
<1511=1513,1512
<1514=1515
<1516=1517
<1517=1519,1518
<1519=1521,1520
<1522=1524,1523
<1525=1526
<1526=1528,1527
<1529=1530
<1530=1531
<1531=1536,1535,1532
<1532=1534,1533
<1537=1538
<1538=1548,1547,1539
<1539=1546,1540
<1540=1542,1541
<1542=1543
<1543=1545,1544
<1549=1555,1550
<1550=1551
<1551=1553,1552
<1553=1554
<1555=1556
<1556=1558,1557
<1559=1560
<1560=1568,1561
<1561=1565,1562
<1562=1564,1563
<1565=1567,1566
<1569=1570
<1570=1572,1571
<1572=1574,1573
<1600=1603,1602,1601
<1603=1604
<1604=1610,1605
<1605=1606
<1606=1608,1607
<1608=1609
<1610=1611
<1616=1619,1618,1617
<1619=1684,1672,1633,1624,1620
<1620=1621
<1621=1623,1622
<1624=1625
<1625=1629,1626
<1626=1627
<1627=1628
<1629=1630
<1630=1632,1631
<1633=1664,1660,1657,1634
<1634=1635
<1635=1651,1636
<1636=1637
<1637=1649,1638
<1638=1641,1639
<1639=1640
<1641=1642
<1642=1644,1643
<1644=1646,1645
<1646=1648,1647
<1649=1650
<1651=1652
<1652=1654,1653
<1654=1656,1655
<1657=1659,1658
<1660=1661
<1661=1663,1662
<1664=1665
<1665=1666
<1666=1671,1670,1667
<1667=1669,1668
<1672=1673
<1673=1683,1682,1674
<1674=1681,1675
<1675=1677,1676
<1677=1678
<1678=1680,1679
<1684=1686,1685
<1686=1687
<1687=1689,1688
<1704=1707,1706,1705
<1707=1977,1971,1958,1951,1736,1727,1718,1714,1708
<1708=1709
<1709=1711,1710
<1711=1713,1712
<1714=1715
<1715=1717,1716
<1718=1719
<1719=1723,1720
<1720=1721
<1721=1722
<1723=1724
<1724=1726,1725
<1727=1734,1728
<1728=1729
<1729=1730
<1730=1732,1731
<1732=1733
<1734=1735
<1736=1940,1938,1932,1737
<1737=1913,1906,1773,1738
<1738=1771,1748,1739
<1739=1740
<1740=1741
<1741=1742
<1742=1746,1743
<1743=1744
<1744=1745
<1746=1747
<1748=1763,1753,1749
<1749=1750
<1750=1752,1751
<1753=1754
<1754=1756,1755
<1756=1758,1757
<1758=1760,1759
<1760=1762,1761
<1763=1764
<1764=1766,1765
<1766=1768,1767
<1768=1770,1769
<1771=1772
<1773=1893,1789,1774
<1774=1775
<1775=1776
<1776=1787,1777
<1777=1782,1778
<1778=1779
<1779=1781,1780
<1782=1783
<1783=1785,1784
<1785=1786
<1787=1788
<1789=1790
<1790=1891,1886,1791
<1791=1792
<1792=1874,1793
<1793=1870,1802,1794
<1794=1795
<1795=1796
<1796=1800,1797
<1797=1798
<1798=1799
<1800=1801
<1802=1863,1854,1803
<1803=1847,1812,1804
<1804=1805
<1805=1806
<1806=1810,1807
<1807=1808
<1808=1809
<1810=1811
<1812=1839,1829,1825,1821,1817,1813
<1813=1814
<1814=1816,1815
<1817=1818
<1818=1820,1819
<1821=1822
<1822=1824,1823
<1825=1826
<1826=1828,1827
<1829=1830
<1830=1832,1831
<1832=1834,1833
<1834=1836,1835
<1836=1838,1837
<1839=1840
<1840=1842,1841
<1842=1844,1843
<1844=1846,1845
<1847=1848
<1848=1850,1849
<1850=1852,1851
<1852=1853
<1854=1855
<1855=1861,1856
<1856=1859,1857
<1857=1858
<1859=1860
<1861=1862
<1863=1864
<1864=1869,1865
<1865=1867,1866
<1867=1868
<1870=1871
<1871=1873,1872
<1874=1875
<1875=1885,1884,1876
<1876=1883,1877
<1877=1881,1878
<1878=1879
<1879=1880
<1881=1882
<1886=1887
<1887=1888
<1888=1890,1889
<1891=1892
<1893=1894
<1894=1900,1895
<1895=1897,1896
<1897=1899,1898
<1900=1902,1901
<1902=1903
<1903=1905,1904
<1906=1907
<1907=1912,1911,1908
<1908=1910,1909
<1913=1928,1914
<1914=1924,1915
<1915=1916
<1916=1920,1917
<1917=1918
<1918=1919
<1920=1921
<1921=1923,1922
<1924=1925
<1925=1927,1926
<1928=1929
<1929=1931,1930
<1932=1937,1933
<1933=1935,1934
<1935=1936
<1938=1939
<1940=1941
<1941=1942
<1942=1950,1949,1943
<1943=1948,1944
<1944=1946,1945
<1946=1947
<1951=1952
<1952=1957,1956,1953
<1953=1955,1954
<1958=1965,1959
<1959=1964,1963,1960
<1960=1962,1961
<1965=1970,1969,1966
<1966=1968,1967
<1971=1972
<1972=1974,1973
<1974=1976,1975
<1977=1978
<1978=1985,1984,1979
<1979=1983,1980
<1980=1982,1981
<2019=2025,2024,2020
<2020=2021
<2021=2023,2022
<2025=2083,2066,2032,2026
<2026=2027
<2027=2029,2028
<2029=2031,2030
<2032=2047,2033
<2033=2040,2034
<2034=2035
<2035=2037,2036
<2037=2039,2038
<2040=2041
<2041=2043,2042
<2043=2044
<2044=2046,2045
<2047=2048
<2048=2061,2049
<2049=2056,2050
<2050=2052,2051
<2052=2053
<2053=2055,2054
<2056=2060,2057
<2057=2059,2058
<2061=2065,2062
<2062=2064,2063
<2066=2068,2067
<2068=2069
<2069=2077,2070
<2070=2072,2071
<2072=2074,2073
<2074=2076,2075
<2077=2079,2078
<2079=2080
<2080=2082,2081
<2083=2084
<2084=2086,2085
<2086=2088,2087
