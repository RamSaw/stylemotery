>3	FunctionDef	PythonSystem_initFromReferenceP (unsigned long long refP)
>4	ParameterList	unsigned long long refP
>5	Parameter	 
>6	Identifier	refP
>7	ParameterType	unsigned long long
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	nta 
>12	ArgumentList	* p
>13	Argument	* p
>14	UnaryOp	* p
>15	Identifier	p
>16	UnaryOperator	*
>17	Callee	nta 
>18	Identifier	nta 
>19	IdentifierDeclStatement	 
>20	IdentifierDecl	* p = ( nta 
>21	AssignmentExpr	* p = ( nta 
>22	CastExpression	( nta 
>23	Identifier	refP
>24	CastTarget	nta 
>25	Identifier	p
>26	Identifier	p
>27	IdentifierDeclType	const nta 
>28	ExpressionStatement	 
>29	CallExpression	NTA_CHECK ( refP != 0 )
>30	ArgumentList	refP != 0
>31	Argument	refP != 0
>32	EqualityExpression	refP != 0
>33	PrimaryExpression	0
>34	Identifier	refP
>35	Callee	NTA_CHECK
>36	Identifier	NTA_CHECK
>43	FunctionDef	initNumpyLibrary ()
>44	ParameterList	 
>45	ReturnType	int
>46	CompoundStatement	 
>47	ReturnStatement	 
>48	CallExpression	_import_array ( )
>49	ArgumentList	 
>50	Callee	_import_array
>51	Identifier	_import_array
>56	FunctionDef	_prepareInput_sweepOff (const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psBufferIn , int nHalfFilterDim , const \
>57	ParameterList	const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psBufferIn , int nHalfFilterDim , const NUMPY_ARRAY * psBBox , \
>58	Parameter	 
>59	Identifier	fOffImageFillValue
>60	ParameterType	float
>61	Parameter	 
>62	Identifier	psImageBox
>63	ParameterType	const NUMPY_ARRAY *
>64	Parameter	 
>65	Identifier	psBBox
>66	ParameterType	const NUMPY_ARRAY *
>67	Parameter	 
>68	Identifier	nHalfFilterDim
>69	ParameterType	int
>70	Parameter	 
>71	Identifier	psBufferIn
>72	ParameterType	const NUMPY_ARRAY *
>73	Parameter	 
>74	Identifier	psInput
>75	ParameterType	const NUMPY_ARRAY *
>76	ReturnType	void
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput <= pDebugOutputEOMB )
>80	ArgumentList	( const char * ) pnOutput <= pDebugOutputEOMB
>81	Argument	( const char * ) pnOutput <= pDebugOutputEOMB
>82	RelationalExpression	( const char * ) pnOutput <= pDebugOutputEOMB
>83	Identifier	pDebugOutputEOMB
>84	CastExpression	( const char * ) pnOutput
>85	Identifier	pnOutput
>86	CastTarget	const char *
>87	Callee	NTA_ASSERT
>88	Identifier	NTA_ASSERT
>89	ForStatement	for ( j = nFillBottom - nPixelBottom ; j ; j -- )
>90	CompoundStatement	 
>91	ForStatement	for ( i = nPureFillQuads ; i ; i -- )
>92	CompoundStatement	 
>93	ExpressionStatement	 
>94	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>95	Identifier	nOffImageFillValue
>96	UnaryOp	* pnOutput ++
>97	IncDecOp	pnOutput ++
>98	IncDec	++
>99	Identifier	pnOutput
>100	UnaryOperator	*
>101	ExpressionStatement	 
>102	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>103	Identifier	nOffImageFillValue
>104	UnaryOp	* pnOutput ++
>105	IncDecOp	pnOutput ++
>106	IncDec	++
>107	Identifier	pnOutput
>108	UnaryOperator	*
>109	ExpressionStatement	 
>110	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>111	Identifier	nOffImageFillValue
>112	UnaryOp	* pnOutput ++
>113	IncDecOp	pnOutput ++
>114	IncDec	++
>115	Identifier	pnOutput
>116	UnaryOperator	*
>117	ExpressionStatement	 
>118	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>119	Identifier	nOffImageFillValue
>120	UnaryOp	* pnOutput ++
>121	IncDecOp	pnOutput ++
>122	IncDec	++
>123	Identifier	pnOutput
>124	UnaryOperator	*
>125	ExpressionStatement	 
>126	CallExpression	NTA_ASSERT ( ( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB )
>127	ArgumentList	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>128	Argument	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>129	RelationalExpression	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>130	Identifier	pDebugOutputEOMB
>131	CastExpression	( const char * ) & ( pnOutput [ 3 ] )
>132	UnaryOp	& ( pnOutput [ 3 ] )
>133	ArrayIndexing	pnOutput [ 3 ]
>134	PrimaryExpression	3
>135	Identifier	pnOutput
>136	UnaryOperator	&
>137	CastTarget	const char *
>138	Callee	NTA_ASSERT
>139	Identifier	NTA_ASSERT
>140	ExpressionStatement	 
>141	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput >= pDebugOutputSOMB )
>142	ArgumentList	( const char * ) pnOutput >= pDebugOutputSOMB
>143	Argument	( const char * ) pnOutput >= pDebugOutputSOMB
>144	RelationalExpression	( const char * ) pnOutput >= pDebugOutputSOMB
>145	Identifier	pDebugOutputSOMB
>146	CastExpression	( const char * ) pnOutput
>147	Identifier	pnOutput
>148	CastTarget	const char *
>149	Callee	NTA_ASSERT
>150	Identifier	NTA_ASSERT
>151	IncDecOp	 
>152	IncDec	--
>153	Identifier	i
>154	Condition	 
>155	Identifier	i
>156	ForInit	 
>157	AssignmentExpr	i = nPureFillQuads
>158	Identifier	nPureFillQuads
>159	Identifier	i
>160	IncDecOp	 
>161	IncDec	--
>162	Identifier	j
>163	Condition	 
>164	Identifier	j
>165	ForInit	 
>166	AssignmentExpr	j = nFillBottom - nPixelBottom
>167	AdditiveExpression	nFillBottom - nPixelBottom
>168	Identifier	nPixelBottom
>169	Identifier	nFillBottom
>170	Identifier	j
>171	ExpressionStatement	 
>172	AssignmentExpr	pnOutput -= nFillLeft
>173	Identifier	nFillLeft
>174	Identifier	pnOutput
>175	ForStatement	for ( j = nOutputRows ; j ; j -- )
>176	CompoundStatement	 
>177	ExpressionStatement	 
>178	AssignmentExpr	pnOutput += nOutputRowAdvance
>179	Identifier	nOutputRowAdvance
>180	Identifier	pnOutput
>181	ExpressionStatement	 
>182	AssignmentExpr	pfInput += nInputRowAdvance
>183	Identifier	nInputRowAdvance
>184	Identifier	pfInput
>185	ForStatement	for ( i = nNumPostFills ; i ; i -- )
>186	CompoundStatement	 
>187	ExpressionStatement	 
>188	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>189	Identifier	nOffImageFillValue
>190	UnaryOp	* pnOutput ++
>191	IncDecOp	pnOutput ++
>192	IncDec	++
>193	Identifier	pnOutput
>194	UnaryOperator	*
>195	ExpressionStatement	 
>196	CallExpression	NTA_ASSERT ( ( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB )
>197	ArgumentList	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>198	Argument	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>199	RelationalExpression	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>200	Identifier	pDebugOutputEOMB
>201	CastExpression	( const char * ) & ( pnOutput [ 0 ] )
>202	UnaryOp	& ( pnOutput [ 0 ] )
>203	ArrayIndexing	pnOutput [ 0 ]
>204	PrimaryExpression	0
>205	Identifier	pnOutput
>206	UnaryOperator	&
>207	CastTarget	const char *
>208	Callee	NTA_ASSERT
>209	Identifier	NTA_ASSERT
>210	ExpressionStatement	 
>211	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput >= pDebugOutputSOMB )
>212	ArgumentList	( const char * ) pnOutput >= pDebugOutputSOMB
>213	Argument	( const char * ) pnOutput >= pDebugOutputSOMB
>214	RelationalExpression	( const char * ) pnOutput >= pDebugOutputSOMB
>215	Identifier	pDebugOutputSOMB
>216	CastExpression	( const char * ) pnOutput
>217	Identifier	pnOutput
>218	CastTarget	const char *
>219	Callee	NTA_ASSERT
>220	Identifier	NTA_ASSERT
>221	IncDecOp	 
>222	IncDec	--
>223	Identifier	i
>224	Condition	 
>225	Identifier	i
>226	ForInit	 
>227	AssignmentExpr	i = nNumPostFills
>228	Identifier	nNumPostFills
>229	Identifier	i
>230	ForStatement	for ( i = nPixelLeftovers ; i ; i -- )
>231	CompoundStatement	 
>232	ExpressionStatement	 
>233	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>234	CastExpression	( int ) ( * pfInput ++ )
>235	UnaryOp	* pfInput ++
>236	IncDecOp	pfInput ++
>237	IncDec	++
>238	Identifier	pfInput
>239	UnaryOperator	*
>240	CastTarget	int
>241	UnaryOp	* pnOutput ++
>242	IncDecOp	pnOutput ++
>243	IncDec	++
>244	Identifier	pnOutput
>245	UnaryOperator	*
>246	ExpressionStatement	 
>247	CallExpression	NTA_ASSERT ( ( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB )
>248	ArgumentList	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>249	Argument	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>250	RelationalExpression	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>251	Identifier	pDebugOutputEOMB
>252	CastExpression	( const char * ) & ( pnOutput [ 0 ] )
>253	UnaryOp	& ( pnOutput [ 0 ] )
>254	ArrayIndexing	pnOutput [ 0 ]
>255	PrimaryExpression	0
>256	Identifier	pnOutput
>257	UnaryOperator	&
>258	CastTarget	const char *
>259	Callee	NTA_ASSERT
>260	Identifier	NTA_ASSERT
>261	ExpressionStatement	 
>262	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput >= pDebugOutputSOMB )
>263	ArgumentList	( const char * ) pnOutput >= pDebugOutputSOMB
>264	Argument	( const char * ) pnOutput >= pDebugOutputSOMB
>265	RelationalExpression	( const char * ) pnOutput >= pDebugOutputSOMB
>266	Identifier	pDebugOutputSOMB
>267	CastExpression	( const char * ) pnOutput
>268	Identifier	pnOutput
>269	CastTarget	const char *
>270	Callee	NTA_ASSERT
>271	Identifier	NTA_ASSERT
>272	IncDecOp	 
>273	IncDec	--
>274	Identifier	i
>275	Condition	 
>276	Identifier	i
>277	ForInit	 
>278	AssignmentExpr	i = nPixelLeftovers
>279	Identifier	nPixelLeftovers
>280	Identifier	i
>281	ForStatement	for ( i = nPixelQuadsPerRow ; i ; i -- )
>282	CompoundStatement	 
>283	ExpressionStatement	 
>284	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>285	CastExpression	( int ) ( * pfInput ++ )
>286	UnaryOp	* pfInput ++
>287	IncDecOp	pfInput ++
>288	IncDec	++
>289	Identifier	pfInput
>290	UnaryOperator	*
>291	CastTarget	int
>292	UnaryOp	* pnOutput ++
>293	IncDecOp	pnOutput ++
>294	IncDec	++
>295	Identifier	pnOutput
>296	UnaryOperator	*
>297	ExpressionStatement	 
>298	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>299	CastExpression	( int ) ( * pfInput ++ )
>300	UnaryOp	* pfInput ++
>301	IncDecOp	pfInput ++
>302	IncDec	++
>303	Identifier	pfInput
>304	UnaryOperator	*
>305	CastTarget	int
>306	UnaryOp	* pnOutput ++
>307	IncDecOp	pnOutput ++
>308	IncDec	++
>309	Identifier	pnOutput
>310	UnaryOperator	*
>311	ExpressionStatement	 
>312	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>313	CastExpression	( int ) ( * pfInput ++ )
>314	UnaryOp	* pfInput ++
>315	IncDecOp	pfInput ++
>316	IncDec	++
>317	Identifier	pfInput
>318	UnaryOperator	*
>319	CastTarget	int
>320	UnaryOp	* pnOutput ++
>321	IncDecOp	pnOutput ++
>322	IncDec	++
>323	Identifier	pnOutput
>324	UnaryOperator	*
>325	ExpressionStatement	 
>326	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>327	CastExpression	( int ) ( * pfInput ++ )
>328	UnaryOp	* pfInput ++
>329	IncDecOp	pfInput ++
>330	IncDec	++
>331	Identifier	pfInput
>332	UnaryOperator	*
>333	CastTarget	int
>334	UnaryOp	* pnOutput ++
>335	IncDecOp	pnOutput ++
>336	IncDec	++
>337	Identifier	pnOutput
>338	UnaryOperator	*
>339	ExpressionStatement	 
>340	CallExpression	NTA_ASSERT ( ( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB )
>341	ArgumentList	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>342	Argument	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>343	RelationalExpression	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>344	Identifier	pDebugOutputEOMB
>345	CastExpression	( const char * ) & ( pnOutput [ 3 ] )
>346	UnaryOp	& ( pnOutput [ 3 ] )
>347	ArrayIndexing	pnOutput [ 3 ]
>348	PrimaryExpression	3
>349	Identifier	pnOutput
>350	UnaryOperator	&
>351	CastTarget	const char *
>352	Callee	NTA_ASSERT
>353	Identifier	NTA_ASSERT
>354	ExpressionStatement	 
>355	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput >= pDebugOutputSOMB )
>356	ArgumentList	( const char * ) pnOutput >= pDebugOutputSOMB
>357	Argument	( const char * ) pnOutput >= pDebugOutputSOMB
>358	RelationalExpression	( const char * ) pnOutput >= pDebugOutputSOMB
>359	Identifier	pDebugOutputSOMB
>360	CastExpression	( const char * ) pnOutput
>361	Identifier	pnOutput
>362	CastTarget	const char *
>363	Callee	NTA_ASSERT
>364	Identifier	NTA_ASSERT
>365	IncDecOp	 
>366	IncDec	--
>367	Identifier	i
>368	Condition	 
>369	Identifier	i
>370	ForInit	 
>371	AssignmentExpr	i = nPixelQuadsPerRow
>372	Identifier	nPixelQuadsPerRow
>373	Identifier	i
>374	ForStatement	for ( i = nNumPrepPixels ; i ; i -- )
>375	CompoundStatement	 
>376	ExpressionStatement	 
>377	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>378	CastExpression	( int ) ( * pfInput ++ )
>379	UnaryOp	* pfInput ++
>380	IncDecOp	pfInput ++
>381	IncDec	++
>382	Identifier	pfInput
>383	UnaryOperator	*
>384	CastTarget	int
>385	UnaryOp	* pnOutput ++
>386	IncDecOp	pnOutput ++
>387	IncDec	++
>388	Identifier	pnOutput
>389	UnaryOperator	*
>390	ExpressionStatement	 
>391	CallExpression	NTA_ASSERT ( ( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB )
>392	ArgumentList	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>393	Argument	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>394	RelationalExpression	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>395	Identifier	pDebugOutputEOMB
>396	CastExpression	( const char * ) & ( pnOutput [ 0 ] )
>397	UnaryOp	& ( pnOutput [ 0 ] )
>398	ArrayIndexing	pnOutput [ 0 ]
>399	PrimaryExpression	0
>400	Identifier	pnOutput
>401	UnaryOperator	&
>402	CastTarget	const char *
>403	Callee	NTA_ASSERT
>404	Identifier	NTA_ASSERT
>405	ExpressionStatement	 
>406	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput >= pDebugOutputSOMB )
>407	ArgumentList	( const char * ) pnOutput >= pDebugOutputSOMB
>408	Argument	( const char * ) pnOutput >= pDebugOutputSOMB
>409	RelationalExpression	( const char * ) pnOutput >= pDebugOutputSOMB
>410	Identifier	pDebugOutputSOMB
>411	CastExpression	( const char * ) pnOutput
>412	Identifier	pnOutput
>413	CastTarget	const char *
>414	Callee	NTA_ASSERT
>415	Identifier	NTA_ASSERT
>416	IncDecOp	 
>417	IncDec	--
>418	Identifier	i
>419	Condition	 
>420	Identifier	i
>421	ForInit	 
>422	AssignmentExpr	i = nNumPrepPixels
>423	Identifier	nNumPrepPixels
>424	Identifier	i
>425	ForStatement	for ( i = nNumPreFills ; i ; i -- )
>426	CompoundStatement	 
>427	ExpressionStatement	 
>428	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>429	Identifier	nOffImageFillValue
>430	UnaryOp	* pnOutput ++
>431	IncDecOp	pnOutput ++
>432	IncDec	++
>433	Identifier	pnOutput
>434	UnaryOperator	*
>435	ExpressionStatement	 
>436	CallExpression	NTA_ASSERT ( ( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB )
>437	ArgumentList	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>438	Argument	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>439	RelationalExpression	( const char * ) & ( pnOutput [ 0 ] ) < pDebugOutputEOMB
>440	Identifier	pDebugOutputEOMB
>441	CastExpression	( const char * ) & ( pnOutput [ 0 ] )
>442	UnaryOp	& ( pnOutput [ 0 ] )
>443	ArrayIndexing	pnOutput [ 0 ]
>444	PrimaryExpression	0
>445	Identifier	pnOutput
>446	UnaryOperator	&
>447	CastTarget	const char *
>448	Callee	NTA_ASSERT
>449	Identifier	NTA_ASSERT
>450	ExpressionStatement	 
>451	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput >= pDebugOutputSOMB )
>452	ArgumentList	( const char * ) pnOutput >= pDebugOutputSOMB
>453	Argument	( const char * ) pnOutput >= pDebugOutputSOMB
>454	RelationalExpression	( const char * ) pnOutput >= pDebugOutputSOMB
>455	Identifier	pDebugOutputSOMB
>456	CastExpression	( const char * ) pnOutput
>457	Identifier	pnOutput
>458	CastTarget	const char *
>459	Callee	NTA_ASSERT
>460	Identifier	NTA_ASSERT
>461	IncDecOp	 
>462	IncDec	--
>463	Identifier	i
>464	Condition	 
>465	Identifier	i
>466	ForInit	 
>467	AssignmentExpr	i = nNumPreFills
>468	Identifier	nNumPreFills
>469	Identifier	i
>470	IncDecOp	 
>471	IncDec	--
>472	Identifier	j
>473	Condition	 
>474	Identifier	j
>475	ForInit	 
>476	AssignmentExpr	j = nOutputRows
>477	Identifier	nOutputRows
>478	Identifier	j
>479	ExpressionStatement	 
>480	AssignmentExpr	pnOutput += nFillLeft
>481	Identifier	nFillLeft
>482	Identifier	pnOutput
>483	IdentifierDeclStatement	 
>484	IdentifierDecl	nNumPostFills = nFillRight - nPixelRight
>485	AssignmentExpr	nNumPostFills = nFillRight - nPixelRight
>486	AdditiveExpression	nFillRight - nPixelRight
>487	Identifier	nPixelRight
>488	Identifier	nFillRight
>489	Identifier	nNumPostFills
>490	Identifier	nNumPostFills
>491	IdentifierDeclType	int
>492	IdentifierDeclStatement	 
>493	IdentifierDecl	nNumPreFills = nPixelLeft - nFillLeft
>494	AssignmentExpr	nNumPreFills = nPixelLeft - nFillLeft
>495	AdditiveExpression	nPixelLeft - nFillLeft
>496	Identifier	nFillLeft
>497	Identifier	nPixelLeft
>498	Identifier	nNumPreFills
>499	Identifier	nNumPreFills
>500	IdentifierDeclType	int
>501	ExpressionStatement	 
>502	CallExpression	NTA_ASSERT ( ( nNumPrepPixels + nPixelLeftovers + ( nPixelQuadsPerRow << 2 ) ) == ( nPixelRight - nPixelLeft ) )
>503	ArgumentList	( nNumPrepPixels + nPixelLeftovers + ( nPixelQuadsPerRow << 2 ) ) == ( nPixelRight - nPixelLeft )
>504	Argument	( nNumPrepPixels + nPixelLeftovers + ( nPixelQuadsPerRow << 2 ) ) == ( nPixelRight - nPixelLeft )
>505	EqualityExpression	( nNumPrepPixels + nPixelLeftovers + ( nPixelQuadsPerRow << 2 ) ) == ( nPixelRight - nPixelLeft )
>506	AdditiveExpression	nPixelRight - nPixelLeft
>507	Identifier	nPixelLeft
>508	Identifier	nPixelRight
>509	AdditiveExpression	nNumPrepPixels + nPixelLeftovers + ( nPixelQuadsPerRow << 2 )
>510	AdditiveExpression	nPixelLeftovers + ( nPixelQuadsPerRow << 2 )
>511	ShiftExpression	nPixelQuadsPerRow << 2
>512	PrimaryExpression	2
>513	Identifier	nPixelQuadsPerRow
>514	Identifier	nPixelLeftovers
>515	Identifier	nNumPrepPixels
>516	Callee	NTA_ASSERT
>517	Identifier	NTA_ASSERT
>518	IdentifierDeclStatement	 
>519	IdentifierDecl	nPixelLeftovers = nNumPixelsPerRow - ( nPixelQuadsPerRow << 2 )
>520	AssignmentExpr	nPixelLeftovers = nNumPixelsPerRow - ( nPixelQuadsPerRow << 2 )
>521	AdditiveExpression	nNumPixelsPerRow - ( nPixelQuadsPerRow << 2 )
>522	ShiftExpression	nPixelQuadsPerRow << 2
>523	PrimaryExpression	2
>524	Identifier	nPixelQuadsPerRow
>525	Identifier	nNumPixelsPerRow
>526	Identifier	nPixelLeftovers
>527	Identifier	nPixelLeftovers
>528	IdentifierDeclType	int
>529	IdentifierDeclStatement	 
>530	IdentifierDecl	nPixelQuadsPerRow = nNumPixelsPerRow >> 2
>531	AssignmentExpr	nPixelQuadsPerRow = nNumPixelsPerRow >> 2
>532	ShiftExpression	nNumPixelsPerRow >> 2
>533	PrimaryExpression	2
>534	Identifier	nNumPixelsPerRow
>535	Identifier	nPixelQuadsPerRow
>536	Identifier	nPixelQuadsPerRow
>537	IdentifierDeclType	int
>538	IdentifierDeclStatement	 
>539	IdentifierDecl	nNumPixelsPerRow = nPixelRight - nPixelLeft - nNumPrepPixels
>540	AssignmentExpr	nNumPixelsPerRow = nPixelRight - nPixelLeft - nNumPrepPixels
>541	AdditiveExpression	nPixelRight - nPixelLeft - nNumPrepPixels
>542	AdditiveExpression	nPixelLeft - nNumPrepPixels
>543	Identifier	nNumPrepPixels
>544	Identifier	nPixelLeft
>545	Identifier	nPixelRight
>546	Identifier	nNumPixelsPerRow
>547	Identifier	nNumPixelsPerRow
>548	IdentifierDeclType	int
>549	IdentifierDeclStatement	 
>550	IdentifierDecl	nNumPrepPixels = ( 4 - ( nPixelLeft % 4 ) ) % 4
>551	AssignmentExpr	nNumPrepPixels = ( 4 - ( nPixelLeft % 4 ) ) % 4
>552	MultiplicativeExpression	( 4 - ( nPixelLeft % 4 ) ) % 4
>553	PrimaryExpression	4
>554	AdditiveExpression	4 - ( nPixelLeft % 4 )
>555	MultiplicativeExpression	nPixelLeft % 4
>556	PrimaryExpression	4
>557	Identifier	nPixelLeft
>558	PrimaryExpression	4
>559	Identifier	nNumPrepPixels
>560	Identifier	nNumPrepPixels
>561	IdentifierDeclType	int
>562	IdentifierDeclStatement	 
>563	IdentifierDecl	nOutputRows = nPixelBottom - nPixelTop
>564	AssignmentExpr	nOutputRows = nPixelBottom - nPixelTop
>565	AdditiveExpression	nPixelBottom - nPixelTop
>566	Identifier	nPixelTop
>567	Identifier	nPixelBottom
>568	Identifier	nOutputRows
>569	Identifier	nOutputRows
>570	IdentifierDeclType	int
>571	ExpressionStatement	 
>572	AssignmentExpr	pfInput += nInputRowStride * ( nPixelTop - nHalfFilterDim ) + ( nPixelLeft - nHalfFilterDim )
>573	AdditiveExpression	nInputRowStride * ( nPixelTop - nHalfFilterDim ) + ( nPixelLeft - nHalfFilterDim )
>574	AdditiveExpression	nPixelLeft - nHalfFilterDim
>575	Identifier	nHalfFilterDim
>576	Identifier	nPixelLeft
>577	MultiplicativeExpression	nInputRowStride * ( nPixelTop - nHalfFilterDim )
>578	AdditiveExpression	nPixelTop - nHalfFilterDim
>579	Identifier	nHalfFilterDim
>580	Identifier	nPixelTop
>581	Identifier	nInputRowStride
>582	Identifier	pfInput
>583	IdentifierDeclStatement	 
>584	IdentifierDecl	nOutputRowAdvance = nOutputRowStride - ( nFillRight - nFillLeft )
>585	AssignmentExpr	nOutputRowAdvance = nOutputRowStride - ( nFillRight - nFillLeft )
>586	AdditiveExpression	nOutputRowStride - ( nFillRight - nFillLeft )
>587	AdditiveExpression	nFillRight - nFillLeft
>588	Identifier	nFillLeft
>589	Identifier	nFillRight
>590	Identifier	nOutputRowStride
>591	Identifier	nOutputRowAdvance
>592	Identifier	nOutputRowAdvance
>593	IdentifierDeclType	int
>594	IdentifierDeclStatement	 
>595	IdentifierDecl	nInputRowAdvance = nInputRowStride - nPixelWidth
>596	AssignmentExpr	nInputRowAdvance = nInputRowStride - nPixelWidth
>597	AdditiveExpression	nInputRowStride - nPixelWidth
>598	Identifier	nPixelWidth
>599	Identifier	nInputRowStride
>600	Identifier	nInputRowAdvance
>601	Identifier	nInputRowAdvance
>602	IdentifierDeclType	int
>603	IdentifierDeclStatement	 
>604	IdentifierDecl	nPixelWidth = nPixelRight - nPixelLeft
>605	AssignmentExpr	nPixelWidth = nPixelRight - nPixelLeft
>606	AdditiveExpression	nPixelRight - nPixelLeft
>607	Identifier	nPixelLeft
>608	Identifier	nPixelRight
>609	Identifier	nPixelWidth
>610	Identifier	nPixelWidth
>611	IdentifierDeclType	int
>612	ForStatement	for ( j = nPixelTop - nFillTop ; j ; j -- )
>613	CompoundStatement	 
>614	ForStatement	for ( i = nPureFillQuads ; i ; i -- )
>615	CompoundStatement	 
>616	ExpressionStatement	 
>617	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>618	Identifier	nOffImageFillValue
>619	UnaryOp	* pnOutput ++
>620	IncDecOp	pnOutput ++
>621	IncDec	++
>622	Identifier	pnOutput
>623	UnaryOperator	*
>624	ExpressionStatement	 
>625	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>626	Identifier	nOffImageFillValue
>627	UnaryOp	* pnOutput ++
>628	IncDecOp	pnOutput ++
>629	IncDec	++
>630	Identifier	pnOutput
>631	UnaryOperator	*
>632	ExpressionStatement	 
>633	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>634	Identifier	nOffImageFillValue
>635	UnaryOp	* pnOutput ++
>636	IncDecOp	pnOutput ++
>637	IncDec	++
>638	Identifier	pnOutput
>639	UnaryOperator	*
>640	ExpressionStatement	 
>641	AssignmentExpr	* pnOutput ++ = nOffImageFillValue
>642	Identifier	nOffImageFillValue
>643	UnaryOp	* pnOutput ++
>644	IncDecOp	pnOutput ++
>645	IncDec	++
>646	Identifier	pnOutput
>647	UnaryOperator	*
>648	ExpressionStatement	 
>649	CallExpression	NTA_ASSERT ( ( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB )
>650	ArgumentList	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>651	Argument	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>652	RelationalExpression	( const char * ) & ( pnOutput [ 3 ] ) < pDebugOutputEOMB
>653	Identifier	pDebugOutputEOMB
>654	CastExpression	( const char * ) & ( pnOutput [ 3 ] )
>655	UnaryOp	& ( pnOutput [ 3 ] )
>656	ArrayIndexing	pnOutput [ 3 ]
>657	PrimaryExpression	3
>658	Identifier	pnOutput
>659	UnaryOperator	&
>660	CastTarget	const char *
>661	Callee	NTA_ASSERT
>662	Identifier	NTA_ASSERT
>663	ExpressionStatement	 
>664	CallExpression	NTA_ASSERT ( ( const char * ) pnOutput >= pDebugOutputSOMB )
>665	ArgumentList	( const char * ) pnOutput >= pDebugOutputSOMB
>666	Argument	( const char * ) pnOutput >= pDebugOutputSOMB
>667	RelationalExpression	( const char * ) pnOutput >= pDebugOutputSOMB
>668	Identifier	pDebugOutputSOMB
>669	CastExpression	( const char * ) pnOutput
>670	Identifier	pnOutput
>671	CastTarget	const char *
>672	Callee	NTA_ASSERT
>673	Identifier	NTA_ASSERT
>674	IncDecOp	 
>675	IncDec	--
>676	Identifier	i
>677	Condition	 
>678	Identifier	i
>679	ForInit	 
>680	AssignmentExpr	i = nPureFillQuads
>681	Identifier	nPureFillQuads
>682	Identifier	i
>683	IncDecOp	 
>684	IncDec	--
>685	Identifier	j
>686	Condition	 
>687	Identifier	j
>688	ForInit	 
>689	AssignmentExpr	j = nPixelTop - nFillTop
>690	AdditiveExpression	nPixelTop - nFillTop
>691	Identifier	nFillTop
>692	Identifier	nPixelTop
>693	Identifier	j
>694	IdentifierDeclStatement	 
>695	IdentifierDecl	nOffImageFillValue = ( int ) fOffImageFillValue
>696	AssignmentExpr	nOffImageFillValue = ( int ) fOffImageFillValue
>697	CastExpression	( int ) fOffImageFillValue
>698	Identifier	fOffImageFillValue
>699	CastTarget	int
>700	Identifier	nOffImageFillValue
>701	Identifier	nOffImageFillValue
>702	IdentifierDeclType	int
>703	IdentifierDeclStatement	 
>704	IdentifierDecl	nPureFillQuads = nOutputRowStride >> 2
>705	AssignmentExpr	nPureFillQuads = nOutputRowStride >> 2
>706	ShiftExpression	nOutputRowStride >> 2
>707	PrimaryExpression	2
>708	Identifier	nOutputRowStride
>709	Identifier	nPureFillQuads
>710	Identifier	nPureFillQuads
>711	IdentifierDeclType	int
>712	ExpressionStatement	 
>713	AssignmentExpr	pnOutput += nFillTop * nOutputRowStride
>714	MultiplicativeExpression	nFillTop * nOutputRowStride
>715	Identifier	nOutputRowStride
>716	Identifier	nFillTop
>717	Identifier	pnOutput
>718	ExpressionStatement	 
>719	CallExpression	NTA_ASSERT ( nFillBottom <= IMAGE_ROWS ( psBufferIn ) )
>720	ArgumentList	nFillBottom <= IMAGE_ROWS ( psBufferIn )
>721	Argument	nFillBottom <= IMAGE_ROWS ( psBufferIn )
>722	RelationalExpression	nFillBottom <= IMAGE_ROWS ( psBufferIn )
>723	CallExpression	IMAGE_ROWS ( psBufferIn )
>724	ArgumentList	psBufferIn
>725	Argument	psBufferIn
>726	Identifier	psBufferIn
>727	Callee	IMAGE_ROWS
>728	Identifier	IMAGE_ROWS
>729	Identifier	nFillBottom
>730	Callee	NTA_ASSERT
>731	Identifier	NTA_ASSERT
>732	ExpressionStatement	 
>733	CallExpression	NTA_ASSERT ( nFillTop >= 0 )
>734	ArgumentList	nFillTop >= 0
>735	Argument	nFillTop >= 0
>736	RelationalExpression	nFillTop >= 0
>737	PrimaryExpression	0
>738	Identifier	nFillTop
>739	Callee	NTA_ASSERT
>740	Identifier	NTA_ASSERT
>741	ExpressionStatement	 
>742	CallExpression	NTA_ASSERT ( nFillRight <= IMAGE_COLS ( psBufferIn ) )
>743	ArgumentList	nFillRight <= IMAGE_COLS ( psBufferIn )
>744	Argument	nFillRight <= IMAGE_COLS ( psBufferIn )
>745	RelationalExpression	nFillRight <= IMAGE_COLS ( psBufferIn )
>746	CallExpression	IMAGE_COLS ( psBufferIn )
>747	ArgumentList	psBufferIn
>748	Argument	psBufferIn
>749	Identifier	psBufferIn
>750	Callee	IMAGE_COLS
>751	Identifier	IMAGE_COLS
>752	Identifier	nFillRight
>753	Callee	NTA_ASSERT
>754	Identifier	NTA_ASSERT
>755	ExpressionStatement	 
>756	CallExpression	NTA_ASSERT ( nFillLeft >= 0 )
>757	ArgumentList	nFillLeft >= 0
>758	Argument	nFillLeft >= 0
>759	RelationalExpression	nFillLeft >= 0
>760	PrimaryExpression	0
>761	Identifier	nFillLeft
>762	Callee	NTA_ASSERT
>763	Identifier	NTA_ASSERT
>764	ExpressionStatement	 
>765	CallExpression	NTA_ASSERT ( nPixelBottom <= IMAGE_ROWS ( psBufferIn ) - nHalfFilterDim )
>766	ArgumentList	nPixelBottom <= IMAGE_ROWS ( psBufferIn ) - nHalfFilterDim
>767	Argument	nPixelBottom <= IMAGE_ROWS ( psBufferIn ) - nHalfFilterDim
>768	RelationalExpression	nPixelBottom <= IMAGE_ROWS ( psBufferIn ) - nHalfFilterDim
>769	AdditiveExpression	IMAGE_ROWS ( psBufferIn ) - nHalfFilterDim
>770	Identifier	nHalfFilterDim
>771	CallExpression	IMAGE_ROWS ( psBufferIn )
>772	ArgumentList	psBufferIn
>773	Argument	psBufferIn
>774	Identifier	psBufferIn
>775	Callee	IMAGE_ROWS
>776	Identifier	IMAGE_ROWS
>777	Identifier	nPixelBottom
>778	Callee	NTA_ASSERT
>779	Identifier	NTA_ASSERT
>780	ExpressionStatement	 
>781	CallExpression	NTA_ASSERT ( nPixelTop >= nHalfFilterDim )
>782	ArgumentList	nPixelTop >= nHalfFilterDim
>783	Argument	nPixelTop >= nHalfFilterDim
>784	RelationalExpression	nPixelTop >= nHalfFilterDim
>785	Identifier	nHalfFilterDim
>786	Identifier	nPixelTop
>787	Callee	NTA_ASSERT
>788	Identifier	NTA_ASSERT
>789	ExpressionStatement	 
>790	CallExpression	NTA_ASSERT ( nPixelRight <= IMAGE_COLS ( psBufferIn ) - nHalfFilterDim )
>791	ArgumentList	nPixelRight <= IMAGE_COLS ( psBufferIn ) - nHalfFilterDim
>792	Argument	nPixelRight <= IMAGE_COLS ( psBufferIn ) - nHalfFilterDim
>793	RelationalExpression	nPixelRight <= IMAGE_COLS ( psBufferIn ) - nHalfFilterDim
>794	AdditiveExpression	IMAGE_COLS ( psBufferIn ) - nHalfFilterDim
>795	Identifier	nHalfFilterDim
>796	CallExpression	IMAGE_COLS ( psBufferIn )
>797	ArgumentList	psBufferIn
>798	Argument	psBufferIn
>799	Identifier	psBufferIn
>800	Callee	IMAGE_COLS
>801	Identifier	IMAGE_COLS
>802	Identifier	nPixelRight
>803	Callee	NTA_ASSERT
>804	Identifier	NTA_ASSERT
>805	ExpressionStatement	 
>806	CallExpression	NTA_ASSERT ( nPixelLeft >= nHalfFilterDim )
>807	ArgumentList	nPixelLeft >= nHalfFilterDim
>808	Argument	nPixelLeft >= nHalfFilterDim
>809	RelationalExpression	nPixelLeft >= nHalfFilterDim
>810	Identifier	nHalfFilterDim
>811	Identifier	nPixelLeft
>812	Callee	NTA_ASSERT
>813	Identifier	NTA_ASSERT
>814	IdentifierDeclStatement	 
>815	IdentifierDecl	nPixelBottom = MIN ( BBOX_BOTTOM ( psBBox ) + nFilterDim , BBOX_BOTTOM ( psImageBox ) + nHalfFilterDim )
>816	AssignmentExpr	nPixelBottom = MIN ( BBOX_BOTTOM ( psBBox ) + nFilterDim , BBOX_BOTTOM ( psImageBox ) + nHalfFilterDim )
>817	CallExpression	MIN ( BBOX_BOTTOM ( psBBox ) + nFilterDim , BBOX_BOTTOM ( psImageBox ) + nHalfFilterDim )
>818	ArgumentList	BBOX_BOTTOM ( psBBox ) + nFilterDim
>819	Argument	BBOX_BOTTOM ( psImageBox ) + nHalfFilterDim
>820	AdditiveExpression	BBOX_BOTTOM ( psImageBox ) + nHalfFilterDim
>821	Identifier	nHalfFilterDim
>822	CallExpression	BBOX_BOTTOM ( psImageBox )
>823	ArgumentList	psImageBox
>824	Argument	psImageBox
>825	Identifier	psImageBox
>826	Callee	BBOX_BOTTOM
>827	Identifier	BBOX_BOTTOM
>828	Argument	BBOX_BOTTOM ( psBBox ) + nFilterDim
>829	AdditiveExpression	BBOX_BOTTOM ( psBBox ) + nFilterDim
>830	Identifier	nFilterDim
>831	CallExpression	BBOX_BOTTOM ( psBBox )
>832	ArgumentList	psBBox
>833	Argument	psBBox
>834	Identifier	psBBox
>835	Callee	BBOX_BOTTOM
>836	Identifier	BBOX_BOTTOM
>837	Callee	MIN
>838	Identifier	MIN
>839	Identifier	nPixelBottom
>840	Identifier	nPixelBottom
>841	IdentifierDeclType	int
>842	IdentifierDeclStatement	 
>843	IdentifierDecl	nPixelRight = MIN ( BBOX_RIGHT ( psBBox ) + nFilterDim , BBOX_RIGHT ( psImageBox ) + nHalfFilterDim )
>844	AssignmentExpr	nPixelRight = MIN ( BBOX_RIGHT ( psBBox ) + nFilterDim , BBOX_RIGHT ( psImageBox ) + nHalfFilterDim )
>845	CallExpression	MIN ( BBOX_RIGHT ( psBBox ) + nFilterDim , BBOX_RIGHT ( psImageBox ) + nHalfFilterDim )
>846	ArgumentList	BBOX_RIGHT ( psBBox ) + nFilterDim
>847	Argument	BBOX_RIGHT ( psImageBox ) + nHalfFilterDim
>848	AdditiveExpression	BBOX_RIGHT ( psImageBox ) + nHalfFilterDim
>849	Identifier	nHalfFilterDim
>850	CallExpression	BBOX_RIGHT ( psImageBox )
>851	ArgumentList	psImageBox
>852	Argument	psImageBox
>853	Identifier	psImageBox
>854	Callee	BBOX_RIGHT
>855	Identifier	BBOX_RIGHT
>856	Argument	BBOX_RIGHT ( psBBox ) + nFilterDim
>857	AdditiveExpression	BBOX_RIGHT ( psBBox ) + nFilterDim
>858	Identifier	nFilterDim
>859	CallExpression	BBOX_RIGHT ( psBBox )
>860	ArgumentList	psBBox
>861	Argument	psBBox
>862	Identifier	psBBox
>863	Callee	BBOX_RIGHT
>864	Identifier	BBOX_RIGHT
>865	Callee	MIN
>866	Identifier	MIN
>867	Identifier	nPixelRight
>868	Identifier	nPixelRight
>869	IdentifierDeclType	int
>870	IdentifierDeclStatement	 
>871	IdentifierDecl	nPixelTop = MAX ( nFillTop , nHalfFilterDim )
>872	AssignmentExpr	nPixelTop = MAX ( nFillTop , nHalfFilterDim )
>873	CallExpression	MAX ( nFillTop , nHalfFilterDim )
>874	ArgumentList	nFillTop
>875	Argument	nHalfFilterDim
>876	Identifier	nHalfFilterDim
>877	Argument	nFillTop
>878	Identifier	nFillTop
>879	Callee	MAX
>880	Identifier	MAX
>881	Identifier	nPixelTop
>882	Identifier	nPixelTop
>883	IdentifierDeclType	int
>884	IdentifierDeclStatement	 
>885	IdentifierDecl	nPixelLeft = MAX ( nFillLeft , nHalfFilterDim )
>886	AssignmentExpr	nPixelLeft = MAX ( nFillLeft , nHalfFilterDim )
>887	CallExpression	MAX ( nFillLeft , nHalfFilterDim )
>888	ArgumentList	nFillLeft
>889	Argument	nHalfFilterDim
>890	Identifier	nHalfFilterDim
>891	Argument	nFillLeft
>892	Identifier	nFillLeft
>893	Callee	MAX
>894	Identifier	MAX
>895	Identifier	nPixelLeft
>896	Identifier	nPixelLeft
>897	IdentifierDeclType	int
>898	IdentifierDeclStatement	 
>899	IdentifierDecl	nFillBottom = BBOX_BOTTOM ( psBBox ) + nFilterDim
>900	AssignmentExpr	nFillBottom = BBOX_BOTTOM ( psBBox ) + nFilterDim
>901	AdditiveExpression	BBOX_BOTTOM ( psBBox ) + nFilterDim
>902	Identifier	nFilterDim
>903	CallExpression	BBOX_BOTTOM ( psBBox )
>904	ArgumentList	psBBox
>905	Argument	psBBox
>906	Identifier	psBBox
>907	Callee	BBOX_BOTTOM
>908	Identifier	BBOX_BOTTOM
>909	Identifier	nFillBottom
>910	Identifier	nFillBottom
>911	IdentifierDeclType	int
>912	IdentifierDeclStatement	 
>913	IdentifierDecl	nFillRight = BBOX_RIGHT ( psBBox ) + nFilterDim
>914	AssignmentExpr	nFillRight = BBOX_RIGHT ( psBBox ) + nFilterDim
>915	AdditiveExpression	BBOX_RIGHT ( psBBox ) + nFilterDim
>916	Identifier	nFilterDim
>917	CallExpression	BBOX_RIGHT ( psBBox )
>918	ArgumentList	psBBox
>919	Argument	psBBox
>920	Identifier	psBBox
>921	Callee	BBOX_RIGHT
>922	Identifier	BBOX_RIGHT
>923	Identifier	nFillRight
>924	Identifier	nFillRight
>925	IdentifierDeclType	int
>926	IdentifierDeclStatement	 
>927	IdentifierDecl	nFillTop = BBOX_TOP ( psBBox )
>928	AssignmentExpr	nFillTop = BBOX_TOP ( psBBox )
>929	CallExpression	BBOX_TOP ( psBBox )
>930	ArgumentList	psBBox
>931	Argument	psBBox
>932	Identifier	psBBox
>933	Callee	BBOX_TOP
>934	Identifier	BBOX_TOP
>935	Identifier	nFillTop
>936	Identifier	nFillTop
>937	IdentifierDeclType	int
>938	IdentifierDeclStatement	 
>939	IdentifierDecl	nFillLeft = BBOX_LEFT ( psBBox )
>940	AssignmentExpr	nFillLeft = BBOX_LEFT ( psBBox )
>941	CallExpression	BBOX_LEFT ( psBBox )
>942	ArgumentList	psBBox
>943	Argument	psBBox
>944	Identifier	psBBox
>945	Callee	BBOX_LEFT
>946	Identifier	BBOX_LEFT
>947	Identifier	nFillLeft
>948	Identifier	nFillLeft
>949	IdentifierDeclType	int
>950	IdentifierDeclStatement	 
>951	IdentifierDecl	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGE_ROWSTRIDE ( psBufferIn ) * IMAGE_ROWS ( psBufferIn )
>952	AssignmentExpr	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGE_ROWSTRIDE ( psBufferIn ) * IMAGE_ROWS ( psBufferIn )
>953	AdditiveExpression	pDebugOutputSOMB + IMAGE_ROWSTRIDE ( psBufferIn ) * IMAGE_ROWS ( psBufferIn )
>954	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psBufferIn ) * IMAGE_ROWS ( psBufferIn )
>955	CallExpression	IMAGE_ROWS ( psBufferIn )
>956	ArgumentList	psBufferIn
>957	Argument	psBufferIn
>958	Identifier	psBufferIn
>959	Callee	IMAGE_ROWS
>960	Identifier	IMAGE_ROWS
>961	CallExpression	IMAGE_ROWSTRIDE ( psBufferIn )
>962	ArgumentList	psBufferIn
>963	Argument	psBufferIn
>964	Identifier	psBufferIn
>965	Callee	IMAGE_ROWSTRIDE
>966	Identifier	IMAGE_ROWSTRIDE
>967	Identifier	pDebugOutputSOMB
>968	Identifier	pDebugOutputEOMB
>969	Identifier	pDebugOutputEOMB
>970	IdentifierDeclType	const char *
>971	IdentifierDeclStatement	 
>972	IdentifierDecl	* pDebugOutputSOMB = ( const char * ) ( psBufferIn -> pData )
>973	AssignmentExpr	* pDebugOutputSOMB = ( const char * ) ( psBufferIn -> pData )
>974	CastExpression	( const char * ) ( psBufferIn -> pData )
>975	PtrMemberAccess	psBufferIn -> pData
>976	Identifier	pData
>977	Identifier	psBufferIn
>978	CastTarget	const char *
>979	Identifier	pDebugOutputSOMB
>980	Identifier	pDebugOutputSOMB
>981	IdentifierDeclType	const char *
>982	IdentifierDeclStatement	 
>983	IdentifierDecl	nOutputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnOutput )
>984	AssignmentExpr	nOutputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnOutput )
>985	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnOutput )
>986	SizeofExpr	sizeof ( * pnOutput )
>987	UnaryOp	* pnOutput
>988	Identifier	pnOutput
>989	UnaryOperator	*
>990	Sizeof	sizeof
>991	CallExpression	IMAGE_ROWSTRIDE ( psBufferIn )
>992	ArgumentList	psBufferIn
>993	Argument	psBufferIn
>994	Identifier	psBufferIn
>995	Callee	IMAGE_ROWSTRIDE
>996	Identifier	IMAGE_ROWSTRIDE
>997	Identifier	nOutputRowStride
>998	Identifier	nOutputRowStride
>999	IdentifierDeclType	int
>1000	IdentifierDeclStatement	 
>1001	IdentifierDecl	* pnOutput = ( int * ) psBufferIn -> pData
>1002	AssignmentExpr	* pnOutput = ( int * ) psBufferIn -> pData
>1003	CastExpression	( int * ) psBufferIn -> pData
>1004	PtrMemberAccess	psBufferIn -> pData
>1005	Identifier	pData
>1006	Identifier	psBufferIn
>1007	CastTarget	int *
>1008	Identifier	pnOutput
>1009	Identifier	pnOutput
>1010	IdentifierDeclType	int *
>1011	IdentifierDeclStatement	 
>1012	IdentifierDecl	nInputRowStride = IMAGE_ROWSTRIDE ( psInput ) / sizeof ( * pfInput )
>1013	AssignmentExpr	nInputRowStride = IMAGE_ROWSTRIDE ( psInput ) / sizeof ( * pfInput )
>1014	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psInput ) / sizeof ( * pfInput )
>1015	SizeofExpr	sizeof ( * pfInput )
>1016	UnaryOp	* pfInput
>1017	Identifier	pfInput
>1018	UnaryOperator	*
>1019	Sizeof	sizeof
>1020	CallExpression	IMAGE_ROWSTRIDE ( psInput )
>1021	ArgumentList	psInput
>1022	Argument	psInput
>1023	Identifier	psInput
>1024	Callee	IMAGE_ROWSTRIDE
>1025	Identifier	IMAGE_ROWSTRIDE
>1026	Identifier	nInputRowStride
>1027	Identifier	nInputRowStride
>1028	IdentifierDeclType	int
>1029	IdentifierDeclStatement	 
>1030	IdentifierDecl	* pfInput = ( const float * ) psInput -> pData
>1031	AssignmentExpr	* pfInput = ( const float * ) psInput -> pData
>1032	CastExpression	( const float * ) psInput -> pData
>1033	PtrMemberAccess	psInput -> pData
>1034	Identifier	pData
>1035	Identifier	psInput
>1036	CastTarget	const float *
>1037	Identifier	pfInput
>1038	Identifier	pfInput
>1039	IdentifierDeclType	const float *
>1040	IdentifierDeclStatement	 
>1041	IdentifierDecl	nFilterDim = nHalfFilterDim << 1
>1042	AssignmentExpr	nFilterDim = nHalfFilterDim << 1
>1043	ShiftExpression	nHalfFilterDim << 1
>1044	PrimaryExpression	1
>1045	Identifier	nHalfFilterDim
>1046	Identifier	nFilterDim
>1047	Identifier	nFilterDim
>1048	IdentifierDeclType	int
>1049	IdentifierDeclStatement	 
>1050	IdentifierDecl	j
>1051	Identifier	j
>1052	IdentifierDeclType	int
>1053	IdentifierDecl	i
>1054	Identifier	i
>1055	IdentifierDeclType	int
>1112	FunctionDef	_prepareInput_constrained (const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psBufferIn , int nHalfFilterDim , const \
>1113	ParameterList	const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psBufferIn , int nHalfFilterDim , const NUMPY_ARRAY * psBBox , \
>1114	Parameter	 
>1115	Identifier	psImageBox
>1116	ParameterType	const NUMPY_ARRAY *
>1117	Parameter	 
>1118	Identifier	psBBox
>1119	ParameterType	const NUMPY_ARRAY *
>1120	Parameter	 
>1121	Identifier	nHalfFilterDim
>1122	ParameterType	int
>1123	Parameter	 
>1124	Identifier	psBufferIn
>1125	ParameterType	const NUMPY_ARRAY *
>1126	Parameter	 
>1127	Identifier	psInput
>1128	ParameterType	const NUMPY_ARRAY *
>1129	ReturnType	void
>1130	CompoundStatement	 
>1131	ForStatement	for ( j = nOutputRows ; j ; j -- )
>1132	CompoundStatement	 
>1133	ExpressionStatement	 
>1134	AssignmentExpr	pnOutput += nOutputRowAdvance
>1135	Identifier	nOutputRowAdvance
>1136	Identifier	pnOutput
>1137	ExpressionStatement	 
>1138	AssignmentExpr	pfInput += nInputRowAdvance
>1139	Identifier	nInputRowAdvance
>1140	Identifier	pfInput
>1141	ForStatement	for ( i = nLeftovers ; i ; i -- )
>1142	ExpressionStatement	 
>1143	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>1144	CastExpression	( int ) ( * pfInput ++ )
>1145	UnaryOp	* pfInput ++
>1146	IncDecOp	pfInput ++
>1147	IncDec	++
>1148	Identifier	pfInput
>1149	UnaryOperator	*
>1150	CastTarget	int
>1151	UnaryOp	* pnOutput ++
>1152	IncDecOp	pnOutput ++
>1153	IncDec	++
>1154	Identifier	pnOutput
>1155	UnaryOperator	*
>1156	IncDecOp	 
>1157	IncDec	--
>1158	Identifier	i
>1159	Condition	 
>1160	Identifier	i
>1161	ForInit	 
>1162	AssignmentExpr	i = nLeftovers
>1163	Identifier	nLeftovers
>1164	Identifier	i
>1165	ForStatement	for ( i = nQuadsPerRow ; i ; i -- )
>1166	CompoundStatement	 
>1167	ExpressionStatement	 
>1168	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>1169	CastExpression	( int ) ( * pfInput ++ )
>1170	UnaryOp	* pfInput ++
>1171	IncDecOp	pfInput ++
>1172	IncDec	++
>1173	Identifier	pfInput
>1174	UnaryOperator	*
>1175	CastTarget	int
>1176	UnaryOp	* pnOutput ++
>1177	IncDecOp	pnOutput ++
>1178	IncDec	++
>1179	Identifier	pnOutput
>1180	UnaryOperator	*
>1181	ExpressionStatement	 
>1182	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>1183	CastExpression	( int ) ( * pfInput ++ )
>1184	UnaryOp	* pfInput ++
>1185	IncDecOp	pfInput ++
>1186	IncDec	++
>1187	Identifier	pfInput
>1188	UnaryOperator	*
>1189	CastTarget	int
>1190	UnaryOp	* pnOutput ++
>1191	IncDecOp	pnOutput ++
>1192	IncDec	++
>1193	Identifier	pnOutput
>1194	UnaryOperator	*
>1195	ExpressionStatement	 
>1196	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>1197	CastExpression	( int ) ( * pfInput ++ )
>1198	UnaryOp	* pfInput ++
>1199	IncDecOp	pfInput ++
>1200	IncDec	++
>1201	Identifier	pfInput
>1202	UnaryOperator	*
>1203	CastTarget	int
>1204	UnaryOp	* pnOutput ++
>1205	IncDecOp	pnOutput ++
>1206	IncDec	++
>1207	Identifier	pnOutput
>1208	UnaryOperator	*
>1209	ExpressionStatement	 
>1210	AssignmentExpr	* pnOutput ++ = ( int ) ( * pfInput ++ )
>1211	CastExpression	( int ) ( * pfInput ++ )
>1212	UnaryOp	* pfInput ++
>1213	IncDecOp	pfInput ++
>1214	IncDec	++
>1215	Identifier	pfInput
>1216	UnaryOperator	*
>1217	CastTarget	int
>1218	UnaryOp	* pnOutput ++
>1219	IncDecOp	pnOutput ++
>1220	IncDec	++
>1221	Identifier	pnOutput
>1222	UnaryOperator	*
>1223	IncDecOp	 
>1224	IncDec	--
>1225	Identifier	i
>1226	Condition	 
>1227	Identifier	i
>1228	ForInit	 
>1229	AssignmentExpr	i = nQuadsPerRow
>1230	Identifier	nQuadsPerRow
>1231	Identifier	i
>1232	IncDecOp	 
>1233	IncDec	--
>1234	Identifier	j
>1235	Condition	 
>1236	Identifier	j
>1237	ForInit	 
>1238	AssignmentExpr	j = nOutputRows
>1239	Identifier	nOutputRows
>1240	Identifier	j
>1241	IdentifierDeclStatement	 
>1242	IdentifierDecl	nLeftovers = nBoxWidth - ( nQuadsPerRow << 2 )
>1243	AssignmentExpr	nLeftovers = nBoxWidth - ( nQuadsPerRow << 2 )
>1244	AdditiveExpression	nBoxWidth - ( nQuadsPerRow << 2 )
>1245	ShiftExpression	nQuadsPerRow << 2
>1246	PrimaryExpression	2
>1247	Identifier	nQuadsPerRow
>1248	Identifier	nBoxWidth
>1249	Identifier	nLeftovers
>1250	Identifier	nLeftovers
>1251	IdentifierDeclType	int
>1252	IdentifierDeclStatement	 
>1253	IdentifierDecl	nQuadsPerRow = nBoxWidth >> 2
>1254	AssignmentExpr	nQuadsPerRow = nBoxWidth >> 2
>1255	ShiftExpression	nBoxWidth >> 2
>1256	PrimaryExpression	2
>1257	Identifier	nBoxWidth
>1258	Identifier	nQuadsPerRow
>1259	Identifier	nQuadsPerRow
>1260	IdentifierDeclType	int
>1261	IdentifierDeclStatement	 
>1262	IdentifierDecl	nOutputRows = nBoxBottom - nBoxTop
>1263	AssignmentExpr	nOutputRows = nBoxBottom - nBoxTop
>1264	AdditiveExpression	nBoxBottom - nBoxTop
>1265	Identifier	nBoxTop
>1266	Identifier	nBoxBottom
>1267	Identifier	nOutputRows
>1268	Identifier	nOutputRows
>1269	IdentifierDeclType	int
>1270	ExpressionStatement	 
>1271	AssignmentExpr	pnOutput += nOutputRowStride * nBoxTop + nBoxLeft
>1272	AdditiveExpression	nOutputRowStride * nBoxTop + nBoxLeft
>1273	Identifier	nBoxLeft
>1274	MultiplicativeExpression	nOutputRowStride * nBoxTop
>1275	Identifier	nBoxTop
>1276	Identifier	nOutputRowStride
>1277	Identifier	pnOutput
>1278	ExpressionStatement	 
>1279	AssignmentExpr	pfInput += nInputRowStride * nBoxTop + nBoxLeft
>1280	AdditiveExpression	nInputRowStride * nBoxTop + nBoxLeft
>1281	Identifier	nBoxLeft
>1282	MultiplicativeExpression	nInputRowStride * nBoxTop
>1283	Identifier	nBoxTop
>1284	Identifier	nInputRowStride
>1285	Identifier	pfInput
>1286	IdentifierDeclStatement	 
>1287	IdentifierDecl	nOutputRowAdvance = nOutputRowStride - nBoxWidth
>1288	AssignmentExpr	nOutputRowAdvance = nOutputRowStride - nBoxWidth
>1289	AdditiveExpression	nOutputRowStride - nBoxWidth
>1290	Identifier	nBoxWidth
>1291	Identifier	nOutputRowStride
>1292	Identifier	nOutputRowAdvance
>1293	Identifier	nOutputRowAdvance
>1294	IdentifierDeclType	int
>1295	IdentifierDeclStatement	 
>1296	IdentifierDecl	nInputRowAdvance = nInputRowStride - nBoxWidth
>1297	AssignmentExpr	nInputRowAdvance = nInputRowStride - nBoxWidth
>1298	AdditiveExpression	nInputRowStride - nBoxWidth
>1299	Identifier	nBoxWidth
>1300	Identifier	nInputRowStride
>1301	Identifier	nInputRowAdvance
>1302	Identifier	nInputRowAdvance
>1303	IdentifierDeclType	int
>1304	IdentifierDeclStatement	 
>1305	IdentifierDecl	nBoxWidth = nBoxRight - nBoxLeft
>1306	AssignmentExpr	nBoxWidth = nBoxRight - nBoxLeft
>1307	AdditiveExpression	nBoxRight - nBoxLeft
>1308	Identifier	nBoxLeft
>1309	Identifier	nBoxRight
>1310	Identifier	nBoxWidth
>1311	Identifier	nBoxWidth
>1312	IdentifierDeclType	int
>1313	ExpressionStatement	 
>1314	CallExpression	NTA_ASSERT ( nBoxLeft % 4 == 0 )
>1315	ArgumentList	nBoxLeft % 4 == 0
>1316	Argument	nBoxLeft % 4 == 0
>1317	EqualityExpression	nBoxLeft % 4 == 0
>1318	PrimaryExpression	0
>1319	MultiplicativeExpression	nBoxLeft % 4
>1320	PrimaryExpression	4
>1321	Identifier	nBoxLeft
>1322	Callee	NTA_ASSERT
>1323	Identifier	NTA_ASSERT
>1324	ExpressionStatement	 
>1325	CallExpression	NTA_ASSERT ( nBoxBottom <= IMAGE_ROWS ( psInput ) )
>1326	ArgumentList	nBoxBottom <= IMAGE_ROWS ( psInput )
>1327	Argument	nBoxBottom <= IMAGE_ROWS ( psInput )
>1328	RelationalExpression	nBoxBottom <= IMAGE_ROWS ( psInput )
>1329	CallExpression	IMAGE_ROWS ( psInput )
>1330	ArgumentList	psInput
>1331	Argument	psInput
>1332	Identifier	psInput
>1333	Callee	IMAGE_ROWS
>1334	Identifier	IMAGE_ROWS
>1335	Identifier	nBoxBottom
>1336	Callee	NTA_ASSERT
>1337	Identifier	NTA_ASSERT
>1338	ExpressionStatement	 
>1339	CallExpression	NTA_ASSERT ( nBoxTop >= 0 )
>1340	ArgumentList	nBoxTop >= 0
>1341	Argument	nBoxTop >= 0
>1342	RelationalExpression	nBoxTop >= 0
>1343	PrimaryExpression	0
>1344	Identifier	nBoxTop
>1345	Callee	NTA_ASSERT
>1346	Identifier	NTA_ASSERT
>1347	ExpressionStatement	 
>1348	CallExpression	NTA_ASSERT ( nBoxRight <= IMAGE_COLS ( psInput ) )
>1349	ArgumentList	nBoxRight <= IMAGE_COLS ( psInput )
>1350	Argument	nBoxRight <= IMAGE_COLS ( psInput )
>1351	RelationalExpression	nBoxRight <= IMAGE_COLS ( psInput )
>1352	CallExpression	IMAGE_COLS ( psInput )
>1353	ArgumentList	psInput
>1354	Argument	psInput
>1355	Identifier	psInput
>1356	Callee	IMAGE_COLS
>1357	Identifier	IMAGE_COLS
>1358	Identifier	nBoxRight
>1359	Callee	NTA_ASSERT
>1360	Identifier	NTA_ASSERT
>1361	ExpressionStatement	 
>1362	CallExpression	NTA_ASSERT ( nBoxLeft >= 0 )
>1363	ArgumentList	nBoxLeft >= 0
>1364	Argument	nBoxLeft >= 0
>1365	RelationalExpression	nBoxLeft >= 0
>1366	PrimaryExpression	0
>1367	Identifier	nBoxLeft
>1368	Callee	NTA_ASSERT
>1369	Identifier	NTA_ASSERT
>1370	IdentifierDeclStatement	 
>1371	IdentifierDecl	nBoxBottom = MIN ( BBOX_BOTTOM ( psBBox ) + nHalfFilterDim , BBOX_BOTTOM ( psImageBox ) )
>1372	AssignmentExpr	nBoxBottom = MIN ( BBOX_BOTTOM ( psBBox ) + nHalfFilterDim , BBOX_BOTTOM ( psImageBox ) )
>1373	CallExpression	MIN ( BBOX_BOTTOM ( psBBox ) + nHalfFilterDim , BBOX_BOTTOM ( psImageBox ) )
>1374	ArgumentList	BBOX_BOTTOM ( psBBox ) + nHalfFilterDim
>1375	Argument	BBOX_BOTTOM ( psImageBox )
>1376	CallExpression	BBOX_BOTTOM ( psImageBox )
>1377	ArgumentList	psImageBox
>1378	Argument	psImageBox
>1379	Identifier	psImageBox
>1380	Callee	BBOX_BOTTOM
>1381	Identifier	BBOX_BOTTOM
>1382	Argument	BBOX_BOTTOM ( psBBox ) + nHalfFilterDim
>1383	AdditiveExpression	BBOX_BOTTOM ( psBBox ) + nHalfFilterDim
>1384	Identifier	nHalfFilterDim
>1385	CallExpression	BBOX_BOTTOM ( psBBox )
>1386	ArgumentList	psBBox
>1387	Argument	psBBox
>1388	Identifier	psBBox
>1389	Callee	BBOX_BOTTOM
>1390	Identifier	BBOX_BOTTOM
>1391	Callee	MIN
>1392	Identifier	MIN
>1393	Identifier	nBoxBottom
>1394	Identifier	nBoxBottom
>1395	IdentifierDeclType	int
>1396	IdentifierDeclStatement	 
>1397	IdentifierDecl	nBoxTop = MAX ( BBOX_TOP ( psBBox ) - nHalfFilterDim , BBOX_TOP ( psImageBox ) )
>1398	AssignmentExpr	nBoxTop = MAX ( BBOX_TOP ( psBBox ) - nHalfFilterDim , BBOX_TOP ( psImageBox ) )
>1399	CallExpression	MAX ( BBOX_TOP ( psBBox ) - nHalfFilterDim , BBOX_TOP ( psImageBox ) )
>1400	ArgumentList	BBOX_TOP ( psBBox ) - nHalfFilterDim
>1401	Argument	BBOX_TOP ( psImageBox )
>1402	CallExpression	BBOX_TOP ( psImageBox )
>1403	ArgumentList	psImageBox
>1404	Argument	psImageBox
>1405	Identifier	psImageBox
>1406	Callee	BBOX_TOP
>1407	Identifier	BBOX_TOP
>1408	Argument	BBOX_TOP ( psBBox ) - nHalfFilterDim
>1409	AdditiveExpression	BBOX_TOP ( psBBox ) - nHalfFilterDim
>1410	Identifier	nHalfFilterDim
>1411	CallExpression	BBOX_TOP ( psBBox )
>1412	ArgumentList	psBBox
>1413	Argument	psBBox
>1414	Identifier	psBBox
>1415	Callee	BBOX_TOP
>1416	Identifier	BBOX_TOP
>1417	Callee	MAX
>1418	Identifier	MAX
>1419	Identifier	nBoxTop
>1420	Identifier	nBoxTop
>1421	IdentifierDeclType	int
>1422	IdentifierDeclStatement	 
>1423	IdentifierDecl	nBoxRight = MIN ( BBOX_RIGHT ( psBBox ) + nHalfFilterDim , BBOX_RIGHT ( psImageBox ) )
>1424	AssignmentExpr	nBoxRight = MIN ( BBOX_RIGHT ( psBBox ) + nHalfFilterDim , BBOX_RIGHT ( psImageBox ) )
>1425	CallExpression	MIN ( BBOX_RIGHT ( psBBox ) + nHalfFilterDim , BBOX_RIGHT ( psImageBox ) )
>1426	ArgumentList	BBOX_RIGHT ( psBBox ) + nHalfFilterDim
>1427	Argument	BBOX_RIGHT ( psImageBox )
>1428	CallExpression	BBOX_RIGHT ( psImageBox )
>1429	ArgumentList	psImageBox
>1430	Argument	psImageBox
>1431	Identifier	psImageBox
>1432	Callee	BBOX_RIGHT
>1433	Identifier	BBOX_RIGHT
>1434	Argument	BBOX_RIGHT ( psBBox ) + nHalfFilterDim
>1435	AdditiveExpression	BBOX_RIGHT ( psBBox ) + nHalfFilterDim
>1436	Identifier	nHalfFilterDim
>1437	CallExpression	BBOX_RIGHT ( psBBox )
>1438	ArgumentList	psBBox
>1439	Argument	psBBox
>1440	Identifier	psBBox
>1441	Callee	BBOX_RIGHT
>1442	Identifier	BBOX_RIGHT
>1443	Callee	MIN
>1444	Identifier	MIN
>1445	Identifier	nBoxRight
>1446	Identifier	nBoxRight
>1447	IdentifierDeclType	int
>1448	IdentifierDeclStatement	 
>1449	IdentifierDecl	nBoxLeft = MAX ( ALIGN_4_FLOOR ( BBOX_LEFT ( psBBox ) - nHalfFilterDim ) , BBOX_LEFT ( psImageBox ) )
>1450	AssignmentExpr	nBoxLeft = MAX ( ALIGN_4_FLOOR ( BBOX_LEFT ( psBBox ) - nHalfFilterDim ) , BBOX_LEFT ( psImageBox ) )
>1451	CallExpression	MAX ( ALIGN_4_FLOOR ( BBOX_LEFT ( psBBox ) - nHalfFilterDim ) , BBOX_LEFT ( psImageBox ) )
>1452	ArgumentList	ALIGN_4_FLOOR ( BBOX_LEFT ( psBBox ) - nHalfFilterDim )
>1453	Argument	BBOX_LEFT ( psImageBox )
>1454	CallExpression	BBOX_LEFT ( psImageBox )
>1455	ArgumentList	psImageBox
>1456	Argument	psImageBox
>1457	Identifier	psImageBox
>1458	Callee	BBOX_LEFT
>1459	Identifier	BBOX_LEFT
>1460	Argument	ALIGN_4_FLOOR ( BBOX_LEFT ( psBBox ) - nHalfFilterDim )
>1461	CallExpression	ALIGN_4_FLOOR ( BBOX_LEFT ( psBBox ) - nHalfFilterDim )
>1462	ArgumentList	BBOX_LEFT ( psBBox ) - nHalfFilterDim
>1463	Argument	BBOX_LEFT ( psBBox ) - nHalfFilterDim
>1464	AdditiveExpression	BBOX_LEFT ( psBBox ) - nHalfFilterDim
>1465	Identifier	nHalfFilterDim
>1466	CallExpression	BBOX_LEFT ( psBBox )
>1467	ArgumentList	psBBox
>1468	Argument	psBBox
>1469	Identifier	psBBox
>1470	Callee	BBOX_LEFT
>1471	Identifier	BBOX_LEFT
>1472	Callee	ALIGN_4_FLOOR
>1473	Identifier	ALIGN_4_FLOOR
>1474	Callee	MAX
>1475	Identifier	MAX
>1476	Identifier	nBoxLeft
>1477	Identifier	nBoxLeft
>1478	IdentifierDeclType	int
>1479	IdentifierDeclStatement	 
>1480	IdentifierDecl	nOutputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnOutput )
>1481	AssignmentExpr	nOutputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnOutput )
>1482	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnOutput )
>1483	SizeofExpr	sizeof ( * pnOutput )
>1484	UnaryOp	* pnOutput
>1485	Identifier	pnOutput
>1486	UnaryOperator	*
>1487	Sizeof	sizeof
>1488	CallExpression	IMAGE_ROWSTRIDE ( psBufferIn )
>1489	ArgumentList	psBufferIn
>1490	Argument	psBufferIn
>1491	Identifier	psBufferIn
>1492	Callee	IMAGE_ROWSTRIDE
>1493	Identifier	IMAGE_ROWSTRIDE
>1494	Identifier	nOutputRowStride
>1495	Identifier	nOutputRowStride
>1496	IdentifierDeclType	int
>1497	IdentifierDeclStatement	 
>1498	IdentifierDecl	* pnOutput = ( int * ) psBufferIn -> pData
>1499	AssignmentExpr	* pnOutput = ( int * ) psBufferIn -> pData
>1500	CastExpression	( int * ) psBufferIn -> pData
>1501	PtrMemberAccess	psBufferIn -> pData
>1502	Identifier	pData
>1503	Identifier	psBufferIn
>1504	CastTarget	int *
>1505	Identifier	pnOutput
>1506	Identifier	pnOutput
>1507	IdentifierDeclType	int *
>1508	IdentifierDeclStatement	 
>1509	IdentifierDecl	nInputRowStride = IMAGE_ROWSTRIDE ( psInput ) / sizeof ( * pfInput )
>1510	AssignmentExpr	nInputRowStride = IMAGE_ROWSTRIDE ( psInput ) / sizeof ( * pfInput )
>1511	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psInput ) / sizeof ( * pfInput )
>1512	SizeofExpr	sizeof ( * pfInput )
>1513	UnaryOp	* pfInput
>1514	Identifier	pfInput
>1515	UnaryOperator	*
>1516	Sizeof	sizeof
>1517	CallExpression	IMAGE_ROWSTRIDE ( psInput )
>1518	ArgumentList	psInput
>1519	Argument	psInput
>1520	Identifier	psInput
>1521	Callee	IMAGE_ROWSTRIDE
>1522	Identifier	IMAGE_ROWSTRIDE
>1523	Identifier	nInputRowStride
>1524	Identifier	nInputRowStride
>1525	IdentifierDeclType	int
>1526	IdentifierDeclStatement	 
>1527	IdentifierDecl	* pfInput = ( const float * ) psInput -> pData
>1528	AssignmentExpr	* pfInput = ( const float * ) psInput -> pData
>1529	CastExpression	( const float * ) psInput -> pData
>1530	PtrMemberAccess	psInput -> pData
>1531	Identifier	pData
>1532	Identifier	psInput
>1533	CastTarget	const float *
>1534	Identifier	pfInput
>1535	Identifier	pfInput
>1536	IdentifierDeclType	const float *
>1537	IdentifierDeclStatement	 
>1538	IdentifierDecl	j
>1539	Identifier	j
>1540	IdentifierDeclType	int
>1541	IdentifierDecl	i
>1542	Identifier	i
>1543	IdentifierDeclType	int
>1586	FunctionDef	_prepareInput (const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psBufferIn , int nHalfFilterDim , const NUMPY_ARRAY * \
>1587	ParameterList	const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psBufferIn , int nHalfFilterDim , const NUMPY_ARRAY * psBBox , \
>1588	Parameter	 
>1589	Identifier	fOffImageFillValue
>1590	ParameterType	float
>1591	Parameter	 
>1592	Identifier	eEdgeMode
>1593	ParameterType	EDGE_MODE
>1594	Parameter	 
>1595	Identifier	psImageBox
>1596	ParameterType	const NUMPY_ARRAY *
>1597	Parameter	 
>1598	Identifier	psBBox
>1599	ParameterType	const NUMPY_ARRAY *
>1600	Parameter	 
>1601	Identifier	nHalfFilterDim
>1602	ParameterType	int
>1603	Parameter	 
>1604	Identifier	psBufferIn
>1605	ParameterType	const NUMPY_ARRAY *
>1606	Parameter	 
>1607	Identifier	psInput
>1608	ParameterType	const NUMPY_ARRAY *
>1609	ReturnType	void
>1610	CompoundStatement	 
>1611	IfStatement	if ( eEdgeMode == EDGE_MODE_CONSTRAINED )
>1612	ElseStatement	else
>1613	ExpressionStatement	 
>1614	CallExpression	_prepareInput_sweepOff ( psInput , psBufferIn , nHalfFilterDim , psBBox , psImageBox , fOffImageFillValue )
>1615	ArgumentList	psInput
>1616	Argument	fOffImageFillValue
>1617	Identifier	fOffImageFillValue
>1618	Argument	psImageBox
>1619	Identifier	psImageBox
>1620	Argument	psBBox
>1621	Identifier	psBBox
>1622	Argument	nHalfFilterDim
>1623	Identifier	nHalfFilterDim
>1624	Argument	psBufferIn
>1625	Identifier	psBufferIn
>1626	Argument	psInput
>1627	Identifier	psInput
>1628	Callee	_prepareInput_sweepOff
>1629	Identifier	_prepareInput_sweepOff
>1630	ExpressionStatement	 
>1631	CallExpression	_prepareInput_constrained ( psInput , psBufferIn , nHalfFilterDim , psBBox , psImageBox )
>1632	ArgumentList	psInput
>1633	Argument	psImageBox
>1634	Identifier	psImageBox
>1635	Argument	psBBox
>1636	Identifier	psBBox
>1637	Argument	nHalfFilterDim
>1638	Identifier	nHalfFilterDim
>1639	Argument	psBufferIn
>1640	Identifier	psBufferIn
>1641	Argument	psInput
>1642	Identifier	psInput
>1643	Callee	_prepareInput_constrained
>1644	Identifier	_prepareInput_constrained
>1645	Condition	 
>1646	EqualityExpression	eEdgeMode == EDGE_MODE_CONSTRAINED
>1647	Identifier	EDGE_MODE_CONSTRAINED
>1648	Identifier	eEdgeMode
>1660	FunctionDef	_computeNormalizers (int & nStatPosGrand , int & nStatNegGrand , unsigned int nStatFlags , NORMALIZE_METHOD eNormalizeMethod , \
>1661	ParameterList	int & nStatPosGrand , int & nStatNegGrand , unsigned int nStatFlags , NORMALIZE_METHOD eNormalizeMethod , int nNumPixels
>1662	Parameter	 
>1663	Identifier	nNumPixels
>1664	ParameterType	int
>1665	Parameter	 
>1666	Identifier	eNormalizeMethod
>1667	ParameterType	NORMALIZE_METHOD
>1668	Parameter	 
>1669	Identifier	nStatFlags
>1670	ParameterType	unsigned int
>1671	Parameter	 
>1672	Identifier	nStatNegGrand
>1673	ParameterType	int &
>1674	Parameter	 
>1675	Identifier	nStatPosGrand
>1676	ParameterType	int &
>1677	ReturnType	void
>1678	CompoundStatement	 
>1679	IfStatement	if ( eNormalizeMethod == NORMALIZE_METHOD_FIXED )
>1680	ElseStatement	else
>1681	IfStatement	if ( nStatFlags & STATS_MEAN )
>1682	ElseStatement	else
>1683	CompoundStatement	 
>1684	ExpressionStatement	 
>1685	AssignmentExpr	nStatNegGrand >>= GABOR_SCALING_SHIFT
>1686	Identifier	GABOR_SCALING_SHIFT
>1687	Identifier	nStatNegGrand
>1688	ExpressionStatement	 
>1689	AssignmentExpr	nStatPosGrand >>= GABOR_SCALING_SHIFT
>1690	Identifier	GABOR_SCALING_SHIFT
>1691	Identifier	nStatPosGrand
>1692	CompoundStatement	 
>1693	IfStatement	if ( nNumPixels )
>1694	CompoundStatement	 
>1695	ExpressionStatement	 
>1696	AssignmentExpr	nStatNegGrand /= nNumPixels
>1697	Identifier	nNumPixels
>1698	Identifier	nStatNegGrand
>1699	ExpressionStatement	 
>1700	AssignmentExpr	nStatPosGrand /= nNumPixels
>1701	Identifier	nNumPixels
>1702	Identifier	nStatPosGrand
>1703	Condition	 
>1704	Identifier	nNumPixels
>1705	Condition	 
>1706	BitAndExpression	nStatFlags & STATS_MEAN
>1707	Identifier	STATS_MEAN
>1708	Identifier	nStatFlags
>1709	CompoundStatement	 
>1710	ExpressionStatement	 
>1711	AssignmentExpr	nStatNegGrand = - nStatPosGrand
>1712	UnaryOp	- nStatPosGrand
>1713	Identifier	nStatPosGrand
>1714	UnaryOperator	-
>1715	Identifier	nStatNegGrand
>1716	ExpressionStatement	 
>1717	AssignmentExpr	nStatPosGrand = 255
>1718	PrimaryExpression	255
>1719	Identifier	nStatPosGrand
>1720	Condition	 
>1721	EqualityExpression	eNormalizeMethod == NORMALIZE_METHOD_FIXED
>1722	Identifier	NORMALIZE_METHOD_FIXED
>1723	Identifier	eNormalizeMethod
>1735	FunctionDef	_doConvolution_alpha (const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psBufferOut , const NUMPY_ARRAY * psGaborBank , \
>1736	ParameterList	const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psBufferOut , const NUMPY_ARRAY * psGaborBank , const NUMPY_\
>1737	Parameter	 
>1738	Identifier	anStatNegGrand
>1739	ParameterType	unsigned int [ ]
>1740	Parameter	 
>1741	Identifier	anStatPosGrand
>1742	ParameterType	unsigned int [ ]
>1743	Parameter	 
>1744	Identifier	eNormalizeMode
>1745	ParameterType	NORMALIZE_MODE
>1746	Parameter	 
>1747	Identifier	eNormalizeMethod
>1748	ParameterType	NORMALIZE_METHOD
>1749	Parameter	 
>1750	Identifier	ePhaseMode
>1751	ParameterType	PHASE_MODE
>1752	Parameter	 
>1753	Identifier	psOutputBox
>1754	ParameterType	const BBOX *
>1755	Parameter	 
>1756	Identifier	psInputBox
>1757	ParameterType	const BBOX *
>1758	Parameter	 
>1759	Identifier	psAlpha
>1760	ParameterType	const NUMPY_ARRAY *
>1761	Parameter	 
>1762	Identifier	psGaborBank
>1763	ParameterType	const NUMPY_ARRAY *
>1764	Parameter	 
>1765	Identifier	psBufferOut
>1766	ParameterType	const NUMPY_ARRAY *
>1767	Parameter	 
>1768	Identifier	psBufferIn
>1769	ParameterType	const NUMPY_ARRAY *
>1770	ReturnType	void
>1771	CompoundStatement	 
>1772	ForStatement	for ( int kk = 0 ; kk < 1 ; kk ++ )
>1773	CompoundStatement	 
>1774	ExpressionStatement	 
>1775	CallExpression	fprintf ( stdout , \"anStatNegGrand[%d]
>1776	ArgumentList	stdout
>1777	Argument	anStatNegGrand [ kk ]
>1778	ArrayIndexing	anStatNegGrand [ kk ]
>1779	Identifier	kk
>1780	Identifier	anStatNegGrand
>1781	Argument	kk
>1782	Identifier	kk
>1783	Argument	\"anStatNegGrand[%d]
>1784	PrimaryExpression	\"anStatNegGrand[%d]
>1785	Argument	stdout
>1786	Identifier	stdout
>1787	Callee	fprintf
>1788	Identifier	fprintf
>1789	ExpressionStatement	 
>1790	CallExpression	fprintf ( stdout , \"anStatPosGrand[%d]
>1791	ArgumentList	stdout
>1792	Argument	anStatPosGrand [ kk ]
>1793	ArrayIndexing	anStatPosGrand [ kk ]
>1794	Identifier	kk
>1795	Identifier	anStatPosGrand
>1796	Argument	kk
>1797	Identifier	kk
>1798	Argument	\"anStatPosGrand[%d]
>1799	PrimaryExpression	\"anStatPosGrand[%d]
>1800	Argument	stdout
>1801	Identifier	stdout
>1802	Callee	fprintf
>1803	Identifier	fprintf
>1804	IncDecOp	 
>1805	IncDec	++
>1806	Identifier	kk
>1807	Condition	 
>1808	RelationalExpression	kk < 1
>1809	PrimaryExpression	1
>1810	Identifier	kk
>1811	ForInit	 
>1812	IdentifierDeclStatement	int kk = 0 ;
>1813	IdentifierDecl	kk = 0
>1814	AssignmentExpr	kk = 0
>1815	PrimaryExpression	0
>1816	Identifier	kk
>1817	Identifier	kk
>1818	IdentifierDeclType	int
>1819	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_GLOBAL )
>1820	CompoundStatement	 
>1821	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>1822	CompoundStatement	 
>1823	ExpressionStatement	 
>1824	AssignmentExpr	anStatNegGrand [ 0 ] = ( unsigned int ) ( nStatNegGrand + 1 )
>1825	CastExpression	( unsigned int ) ( nStatNegGrand + 1 )
>1826	AdditiveExpression	nStatNegGrand + 1
>1827	PrimaryExpression	1
>1828	Identifier	nStatNegGrand
>1829	CastTarget	unsigned int
>1830	ArrayIndexing	anStatNegGrand [ 0 ]
>1831	PrimaryExpression	0
>1832	Identifier	anStatNegGrand
>1833	ExpressionStatement	 
>1834	CallExpression	NTA_ASSERT ( nStatNegGrand >= 0 )
>1835	ArgumentList	nStatNegGrand >= 0
>1836	Argument	nStatNegGrand >= 0
>1837	RelationalExpression	nStatNegGrand >= 0
>1838	PrimaryExpression	0
>1839	Identifier	nStatNegGrand
>1840	Callee	NTA_ASSERT
>1841	Identifier	NTA_ASSERT
>1842	ExpressionStatement	 
>1843	AssignmentExpr	nStatNegGrand = - nStatNegGrand
>1844	UnaryOp	- nStatNegGrand
>1845	Identifier	nStatNegGrand
>1846	UnaryOperator	-
>1847	Identifier	nStatNegGrand
>1848	Condition	 
>1849	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>1850	Identifier	PHASE_MODE_DUAL
>1851	Identifier	ePhaseMode
>1852	ExpressionStatement	 
>1853	AssignmentExpr	anStatPosGrand [ 0 ] = ( unsigned int ) ( nStatPosGrand + 1 )
>1854	CastExpression	( unsigned int ) ( nStatPosGrand + 1 )
>1855	AdditiveExpression	nStatPosGrand + 1
>1856	PrimaryExpression	1
>1857	Identifier	nStatPosGrand
>1858	CastTarget	unsigned int
>1859	ArrayIndexing	anStatPosGrand [ 0 ]
>1860	PrimaryExpression	0
>1861	Identifier	anStatPosGrand
>1862	ExpressionStatement	 
>1863	CallExpression	NTA_ASSERT ( nStatPosGrand >= 0 )
>1864	ArgumentList	nStatPosGrand >= 0
>1865	Argument	nStatPosGrand >= 0
>1866	RelationalExpression	nStatPosGrand >= 0
>1867	PrimaryExpression	0
>1868	Identifier	nStatPosGrand
>1869	Callee	NTA_ASSERT
>1870	Identifier	NTA_ASSERT
>1871	ExpressionStatement	 
>1872	CallExpression	_computeNormalizers ( nStatPosGrand , nStatNegGrand , nStatFlags , eNormalizeMethod , nNumPixels )
>1873	ArgumentList	nStatPosGrand
>1874	Argument	nNumPixels
>1875	Identifier	nNumPixels
>1876	Argument	eNormalizeMethod
>1877	Identifier	eNormalizeMethod
>1878	Argument	nStatFlags
>1879	Identifier	nStatFlags
>1880	Argument	nStatNegGrand
>1881	Identifier	nStatNegGrand
>1882	Argument	nStatPosGrand
>1883	Identifier	nStatPosGrand
>1884	Callee	_computeNormalizers
>1885	Identifier	_computeNormalizers
>1886	Condition	 
>1887	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_GLOBAL
>1888	Identifier	NORMALIZE_MODE_GLOBAL
>1889	Identifier	eNormalizeMode
>1890	ForStatement	for ( nFilterIndex = 0 ; nFilterIndex < GABORSET_PLANES ( psGaborBank ) ; nFilterIndex ++ )
>1891	CompoundStatement	 
>1892	IfStatement	if ( nFilterIndex == 0 && ( eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER ) && \
>1893	ExpressionStatement	 
>1894	AssignmentExpr	nNumPixels *= GABORSET_PLANES ( psGaborBank )
>1895	CallExpression	GABORSET_PLANES ( psGaborBank )
>1896	ArgumentList	psGaborBank
>1897	Argument	psGaborBank
>1898	Identifier	psGaborBank
>1899	Callee	GABORSET_PLANES
>1900	Identifier	GABORSET_PLANES
>1901	Identifier	nNumPixels
>1902	Condition	 
>1903	AndExpression	nFilterIndex == 0 && ( eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_\
>1904	AndExpression	( eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER ) && eNormalizeMode == \
>1905	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_GLOBAL
>1906	Identifier	NORMALIZE_MODE_GLOBAL
>1907	Identifier	eNormalizeMode
>1908	OrExpression	eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER
>1909	EqualityExpression	eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER
>1910	Identifier	NORMALIZE_METHOD_MEANPOWER
>1911	Identifier	eNormalizeMethod
>1912	EqualityExpression	eNormalizeMethod == NORMALIZE_METHOD_MEAN
>1913	Identifier	NORMALIZE_METHOD_MEAN
>1914	Identifier	eNormalizeMethod
>1915	EqualityExpression	nFilterIndex == 0
>1916	PrimaryExpression	0
>1917	Identifier	nFilterIndex
>1918	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_PERORIENT )
>1919	CompoundStatement	 
>1920	ForStatement	for ( int kk = 0 ; kk <= nFilterIndex ; kk ++ )
>1921	CompoundStatement	 
>1922	ExpressionStatement	 
>1923	CallExpression	fprintf ( stdout , \"[%d]
>1924	ArgumentList	stdout
>1925	Argument	anStatNegGrand [ kk ]
>1926	ArrayIndexing	anStatNegGrand [ kk ]
>1927	Identifier	kk
>1928	Identifier	anStatNegGrand
>1929	Argument	anStatPosGrand [ kk ]
>1930	ArrayIndexing	anStatPosGrand [ kk ]
>1931	Identifier	kk
>1932	Identifier	anStatPosGrand
>1933	Argument	kk
>1934	Identifier	kk
>1935	Argument	\"[%d]
>1936	PrimaryExpression	\"[%d]
>1937	Argument	stdout
>1938	Identifier	stdout
>1939	Callee	fprintf
>1940	Identifier	fprintf
>1941	IncDecOp	 
>1942	IncDec	++
>1943	Identifier	kk
>1944	Condition	 
>1945	RelationalExpression	kk <= nFilterIndex
>1946	Identifier	nFilterIndex
>1947	Identifier	kk
>1948	ForInit	 
>1949	IdentifierDeclStatement	int kk = 0 ;
>1950	IdentifierDecl	kk = 0
>1951	AssignmentExpr	kk = 0
>1952	PrimaryExpression	0
>1953	Identifier	kk
>1954	Identifier	kk
>1955	IdentifierDeclType	int
>1956	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>1957	CompoundStatement	 
>1958	ExpressionStatement	 
>1959	AssignmentExpr	anStatNegGrand [ nFilterIndex ] = ( unsigned int ) ( nStatNegGrand + 1 )
>1960	CastExpression	( unsigned int ) ( nStatNegGrand + 1 )
>1961	AdditiveExpression	nStatNegGrand + 1
>1962	PrimaryExpression	1
>1963	Identifier	nStatNegGrand
>1964	CastTarget	unsigned int
>1965	ArrayIndexing	anStatNegGrand [ nFilterIndex ]
>1966	Identifier	nFilterIndex
>1967	Identifier	anStatNegGrand
>1968	ExpressionStatement	 
>1969	CallExpression	NTA_ASSERT ( nStatNegGrand >= 0 )
>1970	ArgumentList	nStatNegGrand >= 0
>1971	Argument	nStatNegGrand >= 0
>1972	RelationalExpression	nStatNegGrand >= 0
>1973	PrimaryExpression	0
>1974	Identifier	nStatNegGrand
>1975	Callee	NTA_ASSERT
>1976	Identifier	NTA_ASSERT
>1977	ExpressionStatement	 
>1978	AssignmentExpr	nStatNegGrand = - nStatNegGrand
>1979	UnaryOp	- nStatNegGrand
>1980	Identifier	nStatNegGrand
>1981	UnaryOperator	-
>1982	Identifier	nStatNegGrand
>1983	Condition	 
>1984	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>1985	Identifier	PHASE_MODE_DUAL
>1986	Identifier	ePhaseMode
>1987	ExpressionStatement	 
>1988	AssignmentExpr	anStatPosGrand [ nFilterIndex ] = ( unsigned int ) ( nStatPosGrand + 1 )
>1989	CastExpression	( unsigned int ) ( nStatPosGrand + 1 )
>1990	AdditiveExpression	nStatPosGrand + 1
>1991	PrimaryExpression	1
>1992	Identifier	nStatPosGrand
>1993	CastTarget	unsigned int
>1994	ArrayIndexing	anStatPosGrand [ nFilterIndex ]
>1995	Identifier	nFilterIndex
>1996	Identifier	anStatPosGrand
>1997	ExpressionStatement	 
>1998	CallExpression	NTA_ASSERT ( nStatPosGrand >= 0 )
>1999	ArgumentList	nStatPosGrand >= 0
>2000	Argument	nStatPosGrand >= 0
>2001	RelationalExpression	nStatPosGrand >= 0
>2002	PrimaryExpression	0
>2003	Identifier	nStatPosGrand
>2004	Callee	NTA_ASSERT
>2005	Identifier	NTA_ASSERT
>2006	ExpressionStatement	 
>2007	CallExpression	_computeNormalizers ( nStatPosGrand , nStatNegGrand , nStatFlags , eNormalizeMethod , nNumPixels )
>2008	ArgumentList	nStatPosGrand
>2009	Argument	nNumPixels
>2010	Identifier	nNumPixels
>2011	Argument	eNormalizeMethod
>2012	Identifier	eNormalizeMethod
>2013	Argument	nStatFlags
>2014	Identifier	nStatFlags
>2015	Argument	nStatNegGrand
>2016	Identifier	nStatNegGrand
>2017	Argument	nStatPosGrand
>2018	Identifier	nStatPosGrand
>2019	Callee	_computeNormalizers
>2020	Identifier	_computeNormalizers
>2021	Condition	 
>2022	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_PERORIENT
>2023	Identifier	NORMALIZE_MODE_PERORIENT
>2024	Identifier	eNormalizeMode
>2025	ExpressionStatement	 
>2026	AssignmentExpr	pnOutputBase += IMAGESET_PLANESTRIDE ( psBufferOut ) / sizeof ( * pnOutput )
>2027	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psBufferOut ) / sizeof ( * pnOutput )
>2028	SizeofExpr	sizeof ( * pnOutput )
>2029	UnaryOp	* pnOutput
>2030	Identifier	pnOutput
>2031	UnaryOperator	*
>2032	Sizeof	sizeof
>2033	CallExpression	IMAGESET_PLANESTRIDE ( psBufferOut )
>2034	ArgumentList	psBufferOut
>2035	Argument	psBufferOut
>2036	Identifier	psBufferOut
>2037	Callee	IMAGESET_PLANESTRIDE
>2038	Identifier	IMAGESET_PLANESTRIDE
>2039	Identifier	pnOutputBase
>2040	ExpressionStatement	 
>2041	AssignmentExpr	pnFilterBase += IMAGESET_PLANESTRIDE ( psGaborBank ) / sizeof ( * pnFilter )
>2042	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psGaborBank ) / sizeof ( * pnFilter )
>2043	SizeofExpr	sizeof ( * pnFilter )
>2044	UnaryOp	* pnFilter
>2045	Identifier	pnFilter
>2046	UnaryOperator	*
>2047	Sizeof	sizeof
>2048	CallExpression	IMAGESET_PLANESTRIDE ( psGaborBank )
>2049	ArgumentList	psGaborBank
>2050	Argument	psGaborBank
>2051	Identifier	psGaborBank
>2052	Callee	IMAGESET_PLANESTRIDE
>2053	Identifier	IMAGESET_PLANESTRIDE
>2054	Identifier	pnFilterBase
>2055	ForStatement	for ( j = nOutputRows ; j ; j -- )
>2056	CompoundStatement	 
>2057	ExpressionStatement	 
>2058	AssignmentExpr	pfAlpha += nAlphaRowStride
>2059	Identifier	nAlphaRowStride
>2060	Identifier	pfAlpha
>2061	ExpressionStatement	 
>2062	AssignmentExpr	pnOutput += nOutputRowStride
>2063	Identifier	nOutputRowStride
>2064	Identifier	pnOutput
>2065	ExpressionStatement	 
>2066	AssignmentExpr	pnInput += nInputRowStride
>2067	Identifier	nInputRowStride
>2068	Identifier	pnInput
>2069	IfStatement	if ( nStatFlags & STATS_MEAN )
>2070	CompoundStatement	 
>2071	ExpressionStatement	 
>2072	AssignmentExpr	nStatNegGrand += ( ( - nStatNegRow ) >> 8 )
>2073	ShiftExpression	( - nStatNegRow ) >> 8
>2074	PrimaryExpression	8
>2075	UnaryOp	- nStatNegRow
>2076	Identifier	nStatNegRow
>2077	UnaryOperator	-
>2078	Identifier	nStatNegGrand
>2079	ExpressionStatement	 
>2080	AssignmentExpr	nStatPosGrand += ( nStatPosRow >> 8 )
>2081	ShiftExpression	nStatPosRow >> 8
>2082	PrimaryExpression	8
>2083	Identifier	nStatPosRow
>2084	Identifier	nStatPosGrand
>2085	Condition	 
>2086	BitAndExpression	nStatFlags & STATS_MEAN
>2087	Identifier	STATS_MEAN
>2088	Identifier	nStatFlags
>2089	SwitchStatement	switch ( nFilterDim )
>2090	CompoundStatement	 
>2091	BreakStatement	 
>2092	ForStatement	for ( i = nOutputCols ; i ; i -- )
>2093	CompoundStatement	 
>2094	ExpressionStatement	 
>2095	IncDecOp	pnInputRow ++
>2096	IncDec	++
>2097	Identifier	pnInputRow
>2098	ExpressionStatement	 
>2099	AssignmentExpr	* pnOutputRow ++ = nResponse
>2100	Identifier	nResponse
>2101	UnaryOp	* pnOutputRow ++
>2102	IncDecOp	pnOutputRow ++
>2103	IncDec	++
>2104	Identifier	pnOutputRow
>2105	UnaryOperator	*
>2106	ExpressionStatement	 
>2107	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>2108	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>2109	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>2110	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>2111	Identifier	pDebugOutputEOMB
>2112	CastExpression	( const char * ) pnOutputRow
>2113	Identifier	pnOutputRow
>2114	CastTarget	const char *
>2115	Callee	NTA_ASSERT
>2116	Identifier	NTA_ASSERT
>2117	ExpressionStatement	 
>2118	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>2119	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2120	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2121	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2122	Identifier	pDebugOutputSOMB
>2123	CastExpression	( const char * ) pnOutputRow
>2124	Identifier	pnOutputRow
>2125	CastTarget	const char *
>2126	Callee	NTA_ASSERT
>2127	Identifier	NTA_ASSERT
>2128	IfStatement	if ( * pfAlphaRow ++ )
>2129	CompoundStatement	 
>2130	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>2131	ElseStatement	else
>2132	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>2133	ElseStatement	else
>2134	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>2135	ElseStatement	else
>2136	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>2137	CompoundStatement	 
>2138	IfStatement	if ( nResponse >= 0 )
>2139	ElseStatement	else
>2140	ExpressionStatement	 
>2141	AssignmentExpr	nStatNegRow -= nResponse
>2142	Identifier	nResponse
>2143	Identifier	nStatNegRow
>2144	ExpressionStatement	 
>2145	AssignmentExpr	nStatPosRow += nResponse
>2146	Identifier	nResponse
>2147	Identifier	nStatPosRow
>2148	Condition	 
>2149	RelationalExpression	nResponse >= 0
>2150	PrimaryExpression	0
>2151	Identifier	nResponse
>2152	Condition	 
>2153	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>2154	Identifier	STATS_SUM_POS_NEG
>2155	Identifier	nStatFlags
>2156	ExpressionStatement	 
>2157	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>2158	CallExpression	IABS32 ( nResponse )
>2159	ArgumentList	nResponse
>2160	Argument	nResponse
>2161	Identifier	nResponse
>2162	Callee	IABS32
>2163	Identifier	IABS32
>2164	Identifier	nStatPosRow
>2165	Condition	 
>2166	BitAndExpression	nStatFlags & STATS_SUM_ABS
>2167	Identifier	STATS_SUM_ABS
>2168	Identifier	nStatFlags
>2169	CompoundStatement	 
>2170	IfStatement	if ( nResponse >= 0 )
>2171	ElseStatement	else
>2172	ExpressionStatement	 
>2173	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>2174	CallExpression	MIN ( nStatNegGrand , nResponse )
>2175	ArgumentList	nStatNegGrand
>2176	Argument	nResponse
>2177	Identifier	nResponse
>2178	Argument	nStatNegGrand
>2179	Identifier	nStatNegGrand
>2180	Callee	MIN
>2181	Identifier	MIN
>2182	Identifier	nStatNegGrand
>2183	ExpressionStatement	 
>2184	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>2185	CallExpression	MAX ( nStatPosGrand , nResponse )
>2186	ArgumentList	nStatPosGrand
>2187	Argument	nResponse
>2188	Identifier	nResponse
>2189	Argument	nStatPosGrand
>2190	Identifier	nStatPosGrand
>2191	Callee	MAX
>2192	Identifier	MAX
>2193	Identifier	nStatPosGrand
>2194	Condition	 
>2195	RelationalExpression	nResponse >= 0
>2196	PrimaryExpression	0
>2197	Identifier	nResponse
>2198	Condition	 
>2199	BitAndExpression	nStatFlags & STATS_MAX_MIN
>2200	Identifier	STATS_MAX_MIN
>2201	Identifier	nStatFlags
>2202	ExpressionStatement	 
>2203	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>2204	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>2205	ArgumentList	nStatPosGrand
>2206	Argument	IABS32 ( nResponse )
>2207	CallExpression	IABS32 ( nResponse )
>2208	ArgumentList	nResponse
>2209	Argument	nResponse
>2210	Identifier	nResponse
>2211	Callee	IABS32
>2212	Identifier	IABS32
>2213	Argument	nStatPosGrand
>2214	Identifier	nStatPosGrand
>2215	Callee	MAX
>2216	Identifier	MAX
>2217	Identifier	nStatPosGrand
>2218	Condition	 
>2219	BitAndExpression	nStatFlags & STATS_MAX_ABS
>2220	Identifier	STATS_MAX_ABS
>2221	Identifier	nStatFlags
>2222	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>2223	CompoundStatement	 
>2224	ExpressionStatement	 
>2225	AssignmentExpr	pnInputPtr += nInputRowAdvance
>2226	Identifier	nInputRowAdvance
>2227	Identifier	pnInputPtr
>2228	ExpressionStatement	 
>2229	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2230	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2231	UnaryOp	* pnInputPtr ++
>2232	IncDecOp	pnInputPtr ++
>2233	IncDec	++
>2234	Identifier	pnInputPtr
>2235	UnaryOperator	*
>2236	UnaryOp	* pnGaborPtr ++
>2237	IncDecOp	pnGaborPtr ++
>2238	IncDec	++
>2239	Identifier	pnGaborPtr
>2240	UnaryOperator	*
>2241	Identifier	nResponse
>2242	ExpressionStatement	 
>2243	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2244	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2245	UnaryOp	* pnInputPtr ++
>2246	IncDecOp	pnInputPtr ++
>2247	IncDec	++
>2248	Identifier	pnInputPtr
>2249	UnaryOperator	*
>2250	UnaryOp	* pnGaborPtr ++
>2251	IncDecOp	pnGaborPtr ++
>2252	IncDec	++
>2253	Identifier	pnGaborPtr
>2254	UnaryOperator	*
>2255	Identifier	nResponse
>2256	ExpressionStatement	 
>2257	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2258	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2259	UnaryOp	* pnInputPtr ++
>2260	IncDecOp	pnInputPtr ++
>2261	IncDec	++
>2262	Identifier	pnInputPtr
>2263	UnaryOperator	*
>2264	UnaryOp	* pnGaborPtr ++
>2265	IncDecOp	pnGaborPtr ++
>2266	IncDec	++
>2267	Identifier	pnGaborPtr
>2268	UnaryOperator	*
>2269	Identifier	nResponse
>2270	ExpressionStatement	 
>2271	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2272	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2273	UnaryOp	* pnInputPtr ++
>2274	IncDecOp	pnInputPtr ++
>2275	IncDec	++
>2276	Identifier	pnInputPtr
>2277	UnaryOperator	*
>2278	UnaryOp	* pnGaborPtr ++
>2279	IncDecOp	pnGaborPtr ++
>2280	IncDec	++
>2281	Identifier	pnGaborPtr
>2282	UnaryOperator	*
>2283	Identifier	nResponse
>2284	ExpressionStatement	 
>2285	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2286	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2287	UnaryOp	* pnInputPtr ++
>2288	IncDecOp	pnInputPtr ++
>2289	IncDec	++
>2290	Identifier	pnInputPtr
>2291	UnaryOperator	*
>2292	UnaryOp	* pnGaborPtr ++
>2293	IncDecOp	pnGaborPtr ++
>2294	IncDec	++
>2295	Identifier	pnGaborPtr
>2296	UnaryOperator	*
>2297	Identifier	nResponse
>2298	ExpressionStatement	 
>2299	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2300	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2301	UnaryOp	* pnInputPtr ++
>2302	IncDecOp	pnInputPtr ++
>2303	IncDec	++
>2304	Identifier	pnInputPtr
>2305	UnaryOperator	*
>2306	UnaryOp	* pnGaborPtr ++
>2307	IncDecOp	pnGaborPtr ++
>2308	IncDec	++
>2309	Identifier	pnGaborPtr
>2310	UnaryOperator	*
>2311	Identifier	nResponse
>2312	ExpressionStatement	 
>2313	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2314	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2315	UnaryOp	* pnInputPtr ++
>2316	IncDecOp	pnInputPtr ++
>2317	IncDec	++
>2318	Identifier	pnInputPtr
>2319	UnaryOperator	*
>2320	UnaryOp	* pnGaborPtr ++
>2321	IncDecOp	pnGaborPtr ++
>2322	IncDec	++
>2323	Identifier	pnGaborPtr
>2324	UnaryOperator	*
>2325	Identifier	nResponse
>2326	ExpressionStatement	 
>2327	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2328	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2329	UnaryOp	* pnInputPtr ++
>2330	IncDecOp	pnInputPtr ++
>2331	IncDec	++
>2332	Identifier	pnInputPtr
>2333	UnaryOperator	*
>2334	UnaryOp	* pnGaborPtr ++
>2335	IncDecOp	pnGaborPtr ++
>2336	IncDec	++
>2337	Identifier	pnGaborPtr
>2338	UnaryOperator	*
>2339	Identifier	nResponse
>2340	ExpressionStatement	 
>2341	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2342	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2343	UnaryOp	* pnInputPtr ++
>2344	IncDecOp	pnInputPtr ++
>2345	IncDec	++
>2346	Identifier	pnInputPtr
>2347	UnaryOperator	*
>2348	UnaryOp	* pnGaborPtr ++
>2349	IncDecOp	pnGaborPtr ++
>2350	IncDec	++
>2351	Identifier	pnGaborPtr
>2352	UnaryOperator	*
>2353	Identifier	nResponse
>2354	ExpressionStatement	 
>2355	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2356	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2357	UnaryOp	* pnInputPtr ++
>2358	IncDecOp	pnInputPtr ++
>2359	IncDec	++
>2360	Identifier	pnInputPtr
>2361	UnaryOperator	*
>2362	UnaryOp	* pnGaborPtr ++
>2363	IncDecOp	pnGaborPtr ++
>2364	IncDec	++
>2365	Identifier	pnGaborPtr
>2366	UnaryOperator	*
>2367	Identifier	nResponse
>2368	ExpressionStatement	 
>2369	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2370	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2371	UnaryOp	* pnInputPtr ++
>2372	IncDecOp	pnInputPtr ++
>2373	IncDec	++
>2374	Identifier	pnInputPtr
>2375	UnaryOperator	*
>2376	UnaryOp	* pnGaborPtr ++
>2377	IncDecOp	pnGaborPtr ++
>2378	IncDec	++
>2379	Identifier	pnGaborPtr
>2380	UnaryOperator	*
>2381	Identifier	nResponse
>2382	ExpressionStatement	 
>2383	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2384	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2385	UnaryOp	* pnInputPtr ++
>2386	IncDecOp	pnInputPtr ++
>2387	IncDec	++
>2388	Identifier	pnInputPtr
>2389	UnaryOperator	*
>2390	UnaryOp	* pnGaborPtr ++
>2391	IncDecOp	pnGaborPtr ++
>2392	IncDec	++
>2393	Identifier	pnGaborPtr
>2394	UnaryOperator	*
>2395	Identifier	nResponse
>2396	ExpressionStatement	 
>2397	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2398	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2399	UnaryOp	* pnInputPtr ++
>2400	IncDecOp	pnInputPtr ++
>2401	IncDec	++
>2402	Identifier	pnInputPtr
>2403	UnaryOperator	*
>2404	UnaryOp	* pnGaborPtr ++
>2405	IncDecOp	pnGaborPtr ++
>2406	IncDec	++
>2407	Identifier	pnGaborPtr
>2408	UnaryOperator	*
>2409	Identifier	nResponse
>2410	IncDecOp	 
>2411	IncDec	--
>2412	Identifier	jj
>2413	Condition	 
>2414	Identifier	jj
>2415	ForInit	 
>2416	AssignmentExpr	jj = nFilterDim
>2417	Identifier	nFilterDim
>2418	Identifier	jj
>2419	Condition	 
>2420	UnaryOp	* pfAlphaRow ++
>2421	IncDecOp	pfAlphaRow ++
>2422	IncDec	++
>2423	Identifier	pfAlphaRow
>2424	UnaryOperator	*
>2425	ExpressionStatement	 
>2426	AssignmentExpr	nResponse = 0
>2427	PrimaryExpression	0
>2428	Identifier	nResponse
>2429	ExpressionStatement	 
>2430	AssignmentExpr	pnInputPtr = pnInputRow
>2431	Identifier	pnInputRow
>2432	Identifier	pnInputPtr
>2433	ExpressionStatement	 
>2434	AssignmentExpr	pnGaborPtr = pnFilter
>2435	Identifier	pnFilter
>2436	Identifier	pnGaborPtr
>2437	IncDecOp	 
>2438	IncDec	--
>2439	Identifier	i
>2440	Condition	 
>2441	Identifier	i
>2442	ForInit	 
>2443	AssignmentExpr	i = nOutputCols
>2444	Identifier	nOutputCols
>2445	Identifier	i
>2446	Label	 
>2447	BreakStatement	 
>2448	ForStatement	for ( i = nOutputCols ; i ; i -- )
>2449	CompoundStatement	 
>2450	ExpressionStatement	 
>2451	IncDecOp	pnInputRow ++
>2452	IncDec	++
>2453	Identifier	pnInputRow
>2454	ExpressionStatement	 
>2455	AssignmentExpr	* pnOutputRow ++ = nResponse
>2456	Identifier	nResponse
>2457	UnaryOp	* pnOutputRow ++
>2458	IncDecOp	pnOutputRow ++
>2459	IncDec	++
>2460	Identifier	pnOutputRow
>2461	UnaryOperator	*
>2462	ExpressionStatement	 
>2463	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>2464	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>2465	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>2466	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>2467	Identifier	pDebugOutputEOMB
>2468	CastExpression	( const char * ) pnOutputRow
>2469	Identifier	pnOutputRow
>2470	CastTarget	const char *
>2471	Callee	NTA_ASSERT
>2472	Identifier	NTA_ASSERT
>2473	ExpressionStatement	 
>2474	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>2475	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2476	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2477	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2478	Identifier	pDebugOutputSOMB
>2479	CastExpression	( const char * ) pnOutputRow
>2480	Identifier	pnOutputRow
>2481	CastTarget	const char *
>2482	Callee	NTA_ASSERT
>2483	Identifier	NTA_ASSERT
>2484	IfStatement	if ( * pfAlphaRow ++ )
>2485	CompoundStatement	 
>2486	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>2487	ElseStatement	else
>2488	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>2489	ElseStatement	else
>2490	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>2491	ElseStatement	else
>2492	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>2493	CompoundStatement	 
>2494	IfStatement	if ( nResponse >= 0 )
>2495	ElseStatement	else
>2496	ExpressionStatement	 
>2497	AssignmentExpr	nStatNegRow -= nResponse
>2498	Identifier	nResponse
>2499	Identifier	nStatNegRow
>2500	ExpressionStatement	 
>2501	AssignmentExpr	nStatPosRow += nResponse
>2502	Identifier	nResponse
>2503	Identifier	nStatPosRow
>2504	Condition	 
>2505	RelationalExpression	nResponse >= 0
>2506	PrimaryExpression	0
>2507	Identifier	nResponse
>2508	Condition	 
>2509	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>2510	Identifier	STATS_SUM_POS_NEG
>2511	Identifier	nStatFlags
>2512	ExpressionStatement	 
>2513	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>2514	CallExpression	IABS32 ( nResponse )
>2515	ArgumentList	nResponse
>2516	Argument	nResponse
>2517	Identifier	nResponse
>2518	Callee	IABS32
>2519	Identifier	IABS32
>2520	Identifier	nStatPosRow
>2521	Condition	 
>2522	BitAndExpression	nStatFlags & STATS_SUM_ABS
>2523	Identifier	STATS_SUM_ABS
>2524	Identifier	nStatFlags
>2525	CompoundStatement	 
>2526	IfStatement	if ( nResponse >= 0 )
>2527	ElseStatement	else
>2528	ExpressionStatement	 
>2529	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>2530	CallExpression	MIN ( nStatNegGrand , nResponse )
>2531	ArgumentList	nStatNegGrand
>2532	Argument	nResponse
>2533	Identifier	nResponse
>2534	Argument	nStatNegGrand
>2535	Identifier	nStatNegGrand
>2536	Callee	MIN
>2537	Identifier	MIN
>2538	Identifier	nStatNegGrand
>2539	ExpressionStatement	 
>2540	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>2541	CallExpression	MAX ( nStatPosGrand , nResponse )
>2542	ArgumentList	nStatPosGrand
>2543	Argument	nResponse
>2544	Identifier	nResponse
>2545	Argument	nStatPosGrand
>2546	Identifier	nStatPosGrand
>2547	Callee	MAX
>2548	Identifier	MAX
>2549	Identifier	nStatPosGrand
>2550	Condition	 
>2551	RelationalExpression	nResponse >= 0
>2552	PrimaryExpression	0
>2553	Identifier	nResponse
>2554	Condition	 
>2555	BitAndExpression	nStatFlags & STATS_MAX_MIN
>2556	Identifier	STATS_MAX_MIN
>2557	Identifier	nStatFlags
>2558	ExpressionStatement	 
>2559	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>2560	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>2561	ArgumentList	nStatPosGrand
>2562	Argument	IABS32 ( nResponse )
>2563	CallExpression	IABS32 ( nResponse )
>2564	ArgumentList	nResponse
>2565	Argument	nResponse
>2566	Identifier	nResponse
>2567	Callee	IABS32
>2568	Identifier	IABS32
>2569	Argument	nStatPosGrand
>2570	Identifier	nStatPosGrand
>2571	Callee	MAX
>2572	Identifier	MAX
>2573	Identifier	nStatPosGrand
>2574	Condition	 
>2575	BitAndExpression	nStatFlags & STATS_MAX_ABS
>2576	Identifier	STATS_MAX_ABS
>2577	Identifier	nStatFlags
>2578	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>2579	CompoundStatement	 
>2580	ExpressionStatement	 
>2581	AssignmentExpr	pnInputPtr += nInputRowAdvance
>2582	Identifier	nInputRowAdvance
>2583	Identifier	pnInputPtr
>2584	ExpressionStatement	 
>2585	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2586	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2587	UnaryOp	* pnInputPtr ++
>2588	IncDecOp	pnInputPtr ++
>2589	IncDec	++
>2590	Identifier	pnInputPtr
>2591	UnaryOperator	*
>2592	UnaryOp	* pnGaborPtr ++
>2593	IncDecOp	pnGaborPtr ++
>2594	IncDec	++
>2595	Identifier	pnGaborPtr
>2596	UnaryOperator	*
>2597	Identifier	nResponse
>2598	ExpressionStatement	 
>2599	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2600	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2601	UnaryOp	* pnInputPtr ++
>2602	IncDecOp	pnInputPtr ++
>2603	IncDec	++
>2604	Identifier	pnInputPtr
>2605	UnaryOperator	*
>2606	UnaryOp	* pnGaborPtr ++
>2607	IncDecOp	pnGaborPtr ++
>2608	IncDec	++
>2609	Identifier	pnGaborPtr
>2610	UnaryOperator	*
>2611	Identifier	nResponse
>2612	ExpressionStatement	 
>2613	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2614	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2615	UnaryOp	* pnInputPtr ++
>2616	IncDecOp	pnInputPtr ++
>2617	IncDec	++
>2618	Identifier	pnInputPtr
>2619	UnaryOperator	*
>2620	UnaryOp	* pnGaborPtr ++
>2621	IncDecOp	pnGaborPtr ++
>2622	IncDec	++
>2623	Identifier	pnGaborPtr
>2624	UnaryOperator	*
>2625	Identifier	nResponse
>2626	ExpressionStatement	 
>2627	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2628	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2629	UnaryOp	* pnInputPtr ++
>2630	IncDecOp	pnInputPtr ++
>2631	IncDec	++
>2632	Identifier	pnInputPtr
>2633	UnaryOperator	*
>2634	UnaryOp	* pnGaborPtr ++
>2635	IncDecOp	pnGaborPtr ++
>2636	IncDec	++
>2637	Identifier	pnGaborPtr
>2638	UnaryOperator	*
>2639	Identifier	nResponse
>2640	ExpressionStatement	 
>2641	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2642	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2643	UnaryOp	* pnInputPtr ++
>2644	IncDecOp	pnInputPtr ++
>2645	IncDec	++
>2646	Identifier	pnInputPtr
>2647	UnaryOperator	*
>2648	UnaryOp	* pnGaborPtr ++
>2649	IncDecOp	pnGaborPtr ++
>2650	IncDec	++
>2651	Identifier	pnGaborPtr
>2652	UnaryOperator	*
>2653	Identifier	nResponse
>2654	ExpressionStatement	 
>2655	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2656	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2657	UnaryOp	* pnInputPtr ++
>2658	IncDecOp	pnInputPtr ++
>2659	IncDec	++
>2660	Identifier	pnInputPtr
>2661	UnaryOperator	*
>2662	UnaryOp	* pnGaborPtr ++
>2663	IncDecOp	pnGaborPtr ++
>2664	IncDec	++
>2665	Identifier	pnGaborPtr
>2666	UnaryOperator	*
>2667	Identifier	nResponse
>2668	ExpressionStatement	 
>2669	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2670	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2671	UnaryOp	* pnInputPtr ++
>2672	IncDecOp	pnInputPtr ++
>2673	IncDec	++
>2674	Identifier	pnInputPtr
>2675	UnaryOperator	*
>2676	UnaryOp	* pnGaborPtr ++
>2677	IncDecOp	pnGaborPtr ++
>2678	IncDec	++
>2679	Identifier	pnGaborPtr
>2680	UnaryOperator	*
>2681	Identifier	nResponse
>2682	ExpressionStatement	 
>2683	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2684	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2685	UnaryOp	* pnInputPtr ++
>2686	IncDecOp	pnInputPtr ++
>2687	IncDec	++
>2688	Identifier	pnInputPtr
>2689	UnaryOperator	*
>2690	UnaryOp	* pnGaborPtr ++
>2691	IncDecOp	pnGaborPtr ++
>2692	IncDec	++
>2693	Identifier	pnGaborPtr
>2694	UnaryOperator	*
>2695	Identifier	nResponse
>2696	ExpressionStatement	 
>2697	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2698	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2699	UnaryOp	* pnInputPtr ++
>2700	IncDecOp	pnInputPtr ++
>2701	IncDec	++
>2702	Identifier	pnInputPtr
>2703	UnaryOperator	*
>2704	UnaryOp	* pnGaborPtr ++
>2705	IncDecOp	pnGaborPtr ++
>2706	IncDec	++
>2707	Identifier	pnGaborPtr
>2708	UnaryOperator	*
>2709	Identifier	nResponse
>2710	ExpressionStatement	 
>2711	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2712	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2713	UnaryOp	* pnInputPtr ++
>2714	IncDecOp	pnInputPtr ++
>2715	IncDec	++
>2716	Identifier	pnInputPtr
>2717	UnaryOperator	*
>2718	UnaryOp	* pnGaborPtr ++
>2719	IncDecOp	pnGaborPtr ++
>2720	IncDec	++
>2721	Identifier	pnGaborPtr
>2722	UnaryOperator	*
>2723	Identifier	nResponse
>2724	ExpressionStatement	 
>2725	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2726	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2727	UnaryOp	* pnInputPtr ++
>2728	IncDecOp	pnInputPtr ++
>2729	IncDec	++
>2730	Identifier	pnInputPtr
>2731	UnaryOperator	*
>2732	UnaryOp	* pnGaborPtr ++
>2733	IncDecOp	pnGaborPtr ++
>2734	IncDec	++
>2735	Identifier	pnGaborPtr
>2736	UnaryOperator	*
>2737	Identifier	nResponse
>2738	IncDecOp	 
>2739	IncDec	--
>2740	Identifier	jj
>2741	Condition	 
>2742	Identifier	jj
>2743	ForInit	 
>2744	AssignmentExpr	jj = nFilterDim
>2745	Identifier	nFilterDim
>2746	Identifier	jj
>2747	Condition	 
>2748	UnaryOp	* pfAlphaRow ++
>2749	IncDecOp	pfAlphaRow ++
>2750	IncDec	++
>2751	Identifier	pfAlphaRow
>2752	UnaryOperator	*
>2753	ExpressionStatement	 
>2754	AssignmentExpr	nResponse = 0
>2755	PrimaryExpression	0
>2756	Identifier	nResponse
>2757	ExpressionStatement	 
>2758	AssignmentExpr	pnInputPtr = pnInputRow
>2759	Identifier	pnInputRow
>2760	Identifier	pnInputPtr
>2761	ExpressionStatement	 
>2762	AssignmentExpr	pnGaborPtr = pnFilter
>2763	Identifier	pnFilter
>2764	Identifier	pnGaborPtr
>2765	IncDecOp	 
>2766	IncDec	--
>2767	Identifier	i
>2768	Condition	 
>2769	Identifier	i
>2770	ForInit	 
>2771	AssignmentExpr	i = nOutputCols
>2772	Identifier	nOutputCols
>2773	Identifier	i
>2774	Label	 
>2775	BreakStatement	 
>2776	ForStatement	for ( i = nOutputCols ; i ; i -- )
>2777	CompoundStatement	 
>2778	ExpressionStatement	 
>2779	IncDecOp	pnInputRow ++
>2780	IncDec	++
>2781	Identifier	pnInputRow
>2782	ExpressionStatement	 
>2783	AssignmentExpr	* pnOutputRow ++ = nResponse
>2784	Identifier	nResponse
>2785	UnaryOp	* pnOutputRow ++
>2786	IncDecOp	pnOutputRow ++
>2787	IncDec	++
>2788	Identifier	pnOutputRow
>2789	UnaryOperator	*
>2790	ExpressionStatement	 
>2791	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>2792	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>2793	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>2794	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>2795	Identifier	pDebugOutputEOMB
>2796	CastExpression	( const char * ) pnOutputRow
>2797	Identifier	pnOutputRow
>2798	CastTarget	const char *
>2799	Callee	NTA_ASSERT
>2800	Identifier	NTA_ASSERT
>2801	ExpressionStatement	 
>2802	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>2803	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2804	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2805	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>2806	Identifier	pDebugOutputSOMB
>2807	CastExpression	( const char * ) pnOutputRow
>2808	Identifier	pnOutputRow
>2809	CastTarget	const char *
>2810	Callee	NTA_ASSERT
>2811	Identifier	NTA_ASSERT
>2812	IfStatement	if ( * pfAlphaRow ++ )
>2813	CompoundStatement	 
>2814	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>2815	ElseStatement	else
>2816	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>2817	ElseStatement	else
>2818	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>2819	ElseStatement	else
>2820	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>2821	CompoundStatement	 
>2822	IfStatement	if ( nResponse >= 0 )
>2823	ElseStatement	else
>2824	ExpressionStatement	 
>2825	AssignmentExpr	nStatNegRow -= nResponse
>2826	Identifier	nResponse
>2827	Identifier	nStatNegRow
>2828	ExpressionStatement	 
>2829	AssignmentExpr	nStatPosRow += nResponse
>2830	Identifier	nResponse
>2831	Identifier	nStatPosRow
>2832	Condition	 
>2833	RelationalExpression	nResponse >= 0
>2834	PrimaryExpression	0
>2835	Identifier	nResponse
>2836	Condition	 
>2837	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>2838	Identifier	STATS_SUM_POS_NEG
>2839	Identifier	nStatFlags
>2840	ExpressionStatement	 
>2841	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>2842	CallExpression	IABS32 ( nResponse )
>2843	ArgumentList	nResponse
>2844	Argument	nResponse
>2845	Identifier	nResponse
>2846	Callee	IABS32
>2847	Identifier	IABS32
>2848	Identifier	nStatPosRow
>2849	Condition	 
>2850	BitAndExpression	nStatFlags & STATS_SUM_ABS
>2851	Identifier	STATS_SUM_ABS
>2852	Identifier	nStatFlags
>2853	CompoundStatement	 
>2854	IfStatement	if ( nResponse >= 0 )
>2855	ElseStatement	else
>2856	ExpressionStatement	 
>2857	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>2858	CallExpression	MIN ( nStatNegGrand , nResponse )
>2859	ArgumentList	nStatNegGrand
>2860	Argument	nResponse
>2861	Identifier	nResponse
>2862	Argument	nStatNegGrand
>2863	Identifier	nStatNegGrand
>2864	Callee	MIN
>2865	Identifier	MIN
>2866	Identifier	nStatNegGrand
>2867	ExpressionStatement	 
>2868	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>2869	CallExpression	MAX ( nStatPosGrand , nResponse )
>2870	ArgumentList	nStatPosGrand
>2871	Argument	nResponse
>2872	Identifier	nResponse
>2873	Argument	nStatPosGrand
>2874	Identifier	nStatPosGrand
>2875	Callee	MAX
>2876	Identifier	MAX
>2877	Identifier	nStatPosGrand
>2878	Condition	 
>2879	RelationalExpression	nResponse >= 0
>2880	PrimaryExpression	0
>2881	Identifier	nResponse
>2882	Condition	 
>2883	BitAndExpression	nStatFlags & STATS_MAX_MIN
>2884	Identifier	STATS_MAX_MIN
>2885	Identifier	nStatFlags
>2886	ExpressionStatement	 
>2887	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>2888	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>2889	ArgumentList	nStatPosGrand
>2890	Argument	IABS32 ( nResponse )
>2891	CallExpression	IABS32 ( nResponse )
>2892	ArgumentList	nResponse
>2893	Argument	nResponse
>2894	Identifier	nResponse
>2895	Callee	IABS32
>2896	Identifier	IABS32
>2897	Argument	nStatPosGrand
>2898	Identifier	nStatPosGrand
>2899	Callee	MAX
>2900	Identifier	MAX
>2901	Identifier	nStatPosGrand
>2902	Condition	 
>2903	BitAndExpression	nStatFlags & STATS_MAX_ABS
>2904	Identifier	STATS_MAX_ABS
>2905	Identifier	nStatFlags
>2906	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>2907	CompoundStatement	 
>2908	ExpressionStatement	 
>2909	AssignmentExpr	pnInputPtr += nInputRowAdvance
>2910	Identifier	nInputRowAdvance
>2911	Identifier	pnInputPtr
>2912	ExpressionStatement	 
>2913	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2914	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2915	UnaryOp	* pnInputPtr ++
>2916	IncDecOp	pnInputPtr ++
>2917	IncDec	++
>2918	Identifier	pnInputPtr
>2919	UnaryOperator	*
>2920	UnaryOp	* pnGaborPtr ++
>2921	IncDecOp	pnGaborPtr ++
>2922	IncDec	++
>2923	Identifier	pnGaborPtr
>2924	UnaryOperator	*
>2925	Identifier	nResponse
>2926	ExpressionStatement	 
>2927	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2928	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2929	UnaryOp	* pnInputPtr ++
>2930	IncDecOp	pnInputPtr ++
>2931	IncDec	++
>2932	Identifier	pnInputPtr
>2933	UnaryOperator	*
>2934	UnaryOp	* pnGaborPtr ++
>2935	IncDecOp	pnGaborPtr ++
>2936	IncDec	++
>2937	Identifier	pnGaborPtr
>2938	UnaryOperator	*
>2939	Identifier	nResponse
>2940	ExpressionStatement	 
>2941	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2942	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2943	UnaryOp	* pnInputPtr ++
>2944	IncDecOp	pnInputPtr ++
>2945	IncDec	++
>2946	Identifier	pnInputPtr
>2947	UnaryOperator	*
>2948	UnaryOp	* pnGaborPtr ++
>2949	IncDecOp	pnGaborPtr ++
>2950	IncDec	++
>2951	Identifier	pnGaborPtr
>2952	UnaryOperator	*
>2953	Identifier	nResponse
>2954	ExpressionStatement	 
>2955	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2956	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2957	UnaryOp	* pnInputPtr ++
>2958	IncDecOp	pnInputPtr ++
>2959	IncDec	++
>2960	Identifier	pnInputPtr
>2961	UnaryOperator	*
>2962	UnaryOp	* pnGaborPtr ++
>2963	IncDecOp	pnGaborPtr ++
>2964	IncDec	++
>2965	Identifier	pnGaborPtr
>2966	UnaryOperator	*
>2967	Identifier	nResponse
>2968	ExpressionStatement	 
>2969	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2970	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2971	UnaryOp	* pnInputPtr ++
>2972	IncDecOp	pnInputPtr ++
>2973	IncDec	++
>2974	Identifier	pnInputPtr
>2975	UnaryOperator	*
>2976	UnaryOp	* pnGaborPtr ++
>2977	IncDecOp	pnGaborPtr ++
>2978	IncDec	++
>2979	Identifier	pnGaborPtr
>2980	UnaryOperator	*
>2981	Identifier	nResponse
>2982	ExpressionStatement	 
>2983	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2984	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2985	UnaryOp	* pnInputPtr ++
>2986	IncDecOp	pnInputPtr ++
>2987	IncDec	++
>2988	Identifier	pnInputPtr
>2989	UnaryOperator	*
>2990	UnaryOp	* pnGaborPtr ++
>2991	IncDecOp	pnGaborPtr ++
>2992	IncDec	++
>2993	Identifier	pnGaborPtr
>2994	UnaryOperator	*
>2995	Identifier	nResponse
>2996	ExpressionStatement	 
>2997	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2998	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>2999	UnaryOp	* pnInputPtr ++
>3000	IncDecOp	pnInputPtr ++
>3001	IncDec	++
>3002	Identifier	pnInputPtr
>3003	UnaryOperator	*
>3004	UnaryOp	* pnGaborPtr ++
>3005	IncDecOp	pnGaborPtr ++
>3006	IncDec	++
>3007	Identifier	pnGaborPtr
>3008	UnaryOperator	*
>3009	Identifier	nResponse
>3010	ExpressionStatement	 
>3011	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3012	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3013	UnaryOp	* pnInputPtr ++
>3014	IncDecOp	pnInputPtr ++
>3015	IncDec	++
>3016	Identifier	pnInputPtr
>3017	UnaryOperator	*
>3018	UnaryOp	* pnGaborPtr ++
>3019	IncDecOp	pnGaborPtr ++
>3020	IncDec	++
>3021	Identifier	pnGaborPtr
>3022	UnaryOperator	*
>3023	Identifier	nResponse
>3024	ExpressionStatement	 
>3025	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3026	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3027	UnaryOp	* pnInputPtr ++
>3028	IncDecOp	pnInputPtr ++
>3029	IncDec	++
>3030	Identifier	pnInputPtr
>3031	UnaryOperator	*
>3032	UnaryOp	* pnGaborPtr ++
>3033	IncDecOp	pnGaborPtr ++
>3034	IncDec	++
>3035	Identifier	pnGaborPtr
>3036	UnaryOperator	*
>3037	Identifier	nResponse
>3038	IncDecOp	 
>3039	IncDec	--
>3040	Identifier	jj
>3041	Condition	 
>3042	Identifier	jj
>3043	ForInit	 
>3044	AssignmentExpr	jj = nFilterDim
>3045	Identifier	nFilterDim
>3046	Identifier	jj
>3047	Condition	 
>3048	UnaryOp	* pfAlphaRow ++
>3049	IncDecOp	pfAlphaRow ++
>3050	IncDec	++
>3051	Identifier	pfAlphaRow
>3052	UnaryOperator	*
>3053	ExpressionStatement	 
>3054	AssignmentExpr	nResponse = 0
>3055	PrimaryExpression	0
>3056	Identifier	nResponse
>3057	ExpressionStatement	 
>3058	AssignmentExpr	pnInputPtr = pnInputRow
>3059	Identifier	pnInputRow
>3060	Identifier	pnInputPtr
>3061	ExpressionStatement	 
>3062	AssignmentExpr	pnGaborPtr = pnFilter
>3063	Identifier	pnFilter
>3064	Identifier	pnGaborPtr
>3065	IncDecOp	 
>3066	IncDec	--
>3067	Identifier	i
>3068	Condition	 
>3069	Identifier	i
>3070	ForInit	 
>3071	AssignmentExpr	i = nOutputCols
>3072	Identifier	nOutputCols
>3073	Identifier	i
>3074	Label	 
>3075	BreakStatement	 
>3076	ForStatement	for ( i = nOutputCols ; i ; i -- )
>3077	CompoundStatement	 
>3078	ExpressionStatement	 
>3079	IncDecOp	pnInputRow ++
>3080	IncDec	++
>3081	Identifier	pnInputRow
>3082	ExpressionStatement	 
>3083	AssignmentExpr	* pnOutputRow ++ = nResponse
>3084	Identifier	nResponse
>3085	UnaryOp	* pnOutputRow ++
>3086	IncDecOp	pnOutputRow ++
>3087	IncDec	++
>3088	Identifier	pnOutputRow
>3089	UnaryOperator	*
>3090	ExpressionStatement	 
>3091	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>3092	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>3093	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>3094	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>3095	Identifier	pDebugOutputEOMB
>3096	CastExpression	( const char * ) pnOutputRow
>3097	Identifier	pnOutputRow
>3098	CastTarget	const char *
>3099	Callee	NTA_ASSERT
>3100	Identifier	NTA_ASSERT
>3101	ExpressionStatement	 
>3102	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>3103	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>3104	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>3105	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>3106	Identifier	pDebugOutputSOMB
>3107	CastExpression	( const char * ) pnOutputRow
>3108	Identifier	pnOutputRow
>3109	CastTarget	const char *
>3110	Callee	NTA_ASSERT
>3111	Identifier	NTA_ASSERT
>3112	IfStatement	if ( * pfAlphaRow ++ )
>3113	CompoundStatement	 
>3114	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>3115	ElseStatement	else
>3116	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>3117	ElseStatement	else
>3118	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>3119	ElseStatement	else
>3120	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>3121	CompoundStatement	 
>3122	IfStatement	if ( nResponse >= 0 )
>3123	ElseStatement	else
>3124	ExpressionStatement	 
>3125	AssignmentExpr	nStatNegRow -= nResponse
>3126	Identifier	nResponse
>3127	Identifier	nStatNegRow
>3128	ExpressionStatement	 
>3129	AssignmentExpr	nStatPosRow += nResponse
>3130	Identifier	nResponse
>3131	Identifier	nStatPosRow
>3132	Condition	 
>3133	RelationalExpression	nResponse >= 0
>3134	PrimaryExpression	0
>3135	Identifier	nResponse
>3136	Condition	 
>3137	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>3138	Identifier	STATS_SUM_POS_NEG
>3139	Identifier	nStatFlags
>3140	ExpressionStatement	 
>3141	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>3142	CallExpression	IABS32 ( nResponse )
>3143	ArgumentList	nResponse
>3144	Argument	nResponse
>3145	Identifier	nResponse
>3146	Callee	IABS32
>3147	Identifier	IABS32
>3148	Identifier	nStatPosRow
>3149	Condition	 
>3150	BitAndExpression	nStatFlags & STATS_SUM_ABS
>3151	Identifier	STATS_SUM_ABS
>3152	Identifier	nStatFlags
>3153	CompoundStatement	 
>3154	IfStatement	if ( nResponse >= 0 )
>3155	ElseStatement	else
>3156	ExpressionStatement	 
>3157	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>3158	CallExpression	MIN ( nStatNegGrand , nResponse )
>3159	ArgumentList	nStatNegGrand
>3160	Argument	nResponse
>3161	Identifier	nResponse
>3162	Argument	nStatNegGrand
>3163	Identifier	nStatNegGrand
>3164	Callee	MIN
>3165	Identifier	MIN
>3166	Identifier	nStatNegGrand
>3167	ExpressionStatement	 
>3168	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>3169	CallExpression	MAX ( nStatPosGrand , nResponse )
>3170	ArgumentList	nStatPosGrand
>3171	Argument	nResponse
>3172	Identifier	nResponse
>3173	Argument	nStatPosGrand
>3174	Identifier	nStatPosGrand
>3175	Callee	MAX
>3176	Identifier	MAX
>3177	Identifier	nStatPosGrand
>3178	Condition	 
>3179	RelationalExpression	nResponse >= 0
>3180	PrimaryExpression	0
>3181	Identifier	nResponse
>3182	Condition	 
>3183	BitAndExpression	nStatFlags & STATS_MAX_MIN
>3184	Identifier	STATS_MAX_MIN
>3185	Identifier	nStatFlags
>3186	ExpressionStatement	 
>3187	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>3188	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>3189	ArgumentList	nStatPosGrand
>3190	Argument	IABS32 ( nResponse )
>3191	CallExpression	IABS32 ( nResponse )
>3192	ArgumentList	nResponse
>3193	Argument	nResponse
>3194	Identifier	nResponse
>3195	Callee	IABS32
>3196	Identifier	IABS32
>3197	Argument	nStatPosGrand
>3198	Identifier	nStatPosGrand
>3199	Callee	MAX
>3200	Identifier	MAX
>3201	Identifier	nStatPosGrand
>3202	Condition	 
>3203	BitAndExpression	nStatFlags & STATS_MAX_ABS
>3204	Identifier	STATS_MAX_ABS
>3205	Identifier	nStatFlags
>3206	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>3207	CompoundStatement	 
>3208	ExpressionStatement	 
>3209	AssignmentExpr	pnInputPtr += nInputRowAdvance
>3210	Identifier	nInputRowAdvance
>3211	Identifier	pnInputPtr
>3212	ExpressionStatement	 
>3213	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3214	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3215	UnaryOp	* pnInputPtr ++
>3216	IncDecOp	pnInputPtr ++
>3217	IncDec	++
>3218	Identifier	pnInputPtr
>3219	UnaryOperator	*
>3220	UnaryOp	* pnGaborPtr ++
>3221	IncDecOp	pnGaborPtr ++
>3222	IncDec	++
>3223	Identifier	pnGaborPtr
>3224	UnaryOperator	*
>3225	Identifier	nResponse
>3226	ExpressionStatement	 
>3227	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3228	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3229	UnaryOp	* pnInputPtr ++
>3230	IncDecOp	pnInputPtr ++
>3231	IncDec	++
>3232	Identifier	pnInputPtr
>3233	UnaryOperator	*
>3234	UnaryOp	* pnGaborPtr ++
>3235	IncDecOp	pnGaborPtr ++
>3236	IncDec	++
>3237	Identifier	pnGaborPtr
>3238	UnaryOperator	*
>3239	Identifier	nResponse
>3240	ExpressionStatement	 
>3241	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3242	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3243	UnaryOp	* pnInputPtr ++
>3244	IncDecOp	pnInputPtr ++
>3245	IncDec	++
>3246	Identifier	pnInputPtr
>3247	UnaryOperator	*
>3248	UnaryOp	* pnGaborPtr ++
>3249	IncDecOp	pnGaborPtr ++
>3250	IncDec	++
>3251	Identifier	pnGaborPtr
>3252	UnaryOperator	*
>3253	Identifier	nResponse
>3254	ExpressionStatement	 
>3255	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3256	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3257	UnaryOp	* pnInputPtr ++
>3258	IncDecOp	pnInputPtr ++
>3259	IncDec	++
>3260	Identifier	pnInputPtr
>3261	UnaryOperator	*
>3262	UnaryOp	* pnGaborPtr ++
>3263	IncDecOp	pnGaborPtr ++
>3264	IncDec	++
>3265	Identifier	pnGaborPtr
>3266	UnaryOperator	*
>3267	Identifier	nResponse
>3268	ExpressionStatement	 
>3269	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3270	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3271	UnaryOp	* pnInputPtr ++
>3272	IncDecOp	pnInputPtr ++
>3273	IncDec	++
>3274	Identifier	pnInputPtr
>3275	UnaryOperator	*
>3276	UnaryOp	* pnGaborPtr ++
>3277	IncDecOp	pnGaborPtr ++
>3278	IncDec	++
>3279	Identifier	pnGaborPtr
>3280	UnaryOperator	*
>3281	Identifier	nResponse
>3282	ExpressionStatement	 
>3283	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3284	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3285	UnaryOp	* pnInputPtr ++
>3286	IncDecOp	pnInputPtr ++
>3287	IncDec	++
>3288	Identifier	pnInputPtr
>3289	UnaryOperator	*
>3290	UnaryOp	* pnGaborPtr ++
>3291	IncDecOp	pnGaborPtr ++
>3292	IncDec	++
>3293	Identifier	pnGaborPtr
>3294	UnaryOperator	*
>3295	Identifier	nResponse
>3296	ExpressionStatement	 
>3297	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3298	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3299	UnaryOp	* pnInputPtr ++
>3300	IncDecOp	pnInputPtr ++
>3301	IncDec	++
>3302	Identifier	pnInputPtr
>3303	UnaryOperator	*
>3304	UnaryOp	* pnGaborPtr ++
>3305	IncDecOp	pnGaborPtr ++
>3306	IncDec	++
>3307	Identifier	pnGaborPtr
>3308	UnaryOperator	*
>3309	Identifier	nResponse
>3310	IncDecOp	 
>3311	IncDec	--
>3312	Identifier	jj
>3313	Condition	 
>3314	Identifier	jj
>3315	ForInit	 
>3316	AssignmentExpr	jj = nFilterDim
>3317	Identifier	nFilterDim
>3318	Identifier	jj
>3319	Condition	 
>3320	UnaryOp	* pfAlphaRow ++
>3321	IncDecOp	pfAlphaRow ++
>3322	IncDec	++
>3323	Identifier	pfAlphaRow
>3324	UnaryOperator	*
>3325	ExpressionStatement	 
>3326	AssignmentExpr	nResponse = 0
>3327	PrimaryExpression	0
>3328	Identifier	nResponse
>3329	ExpressionStatement	 
>3330	AssignmentExpr	pnInputPtr = pnInputRow
>3331	Identifier	pnInputRow
>3332	Identifier	pnInputPtr
>3333	ExpressionStatement	 
>3334	AssignmentExpr	pnGaborPtr = pnFilter
>3335	Identifier	pnFilter
>3336	Identifier	pnGaborPtr
>3337	IncDecOp	 
>3338	IncDec	--
>3339	Identifier	i
>3340	Condition	 
>3341	Identifier	i
>3342	ForInit	 
>3343	AssignmentExpr	i = nOutputCols
>3344	Identifier	nOutputCols
>3345	Identifier	i
>3346	Label	 
>3347	BreakStatement	 
>3348	ForStatement	for ( i = nOutputCols ; i ; i -- )
>3349	CompoundStatement	 
>3350	ExpressionStatement	 
>3351	IncDecOp	pnInputRow ++
>3352	IncDec	++
>3353	Identifier	pnInputRow
>3354	ExpressionStatement	 
>3355	AssignmentExpr	* pnOutputRow ++ = nResponse
>3356	Identifier	nResponse
>3357	UnaryOp	* pnOutputRow ++
>3358	IncDecOp	pnOutputRow ++
>3359	IncDec	++
>3360	Identifier	pnOutputRow
>3361	UnaryOperator	*
>3362	ExpressionStatement	 
>3363	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>3364	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>3365	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>3366	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>3367	Identifier	pDebugOutputEOMB
>3368	CastExpression	( const char * ) pnOutputRow
>3369	Identifier	pnOutputRow
>3370	CastTarget	const char *
>3371	Callee	NTA_ASSERT
>3372	Identifier	NTA_ASSERT
>3373	ExpressionStatement	 
>3374	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>3375	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>3376	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>3377	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>3378	Identifier	pDebugOutputSOMB
>3379	CastExpression	( const char * ) pnOutputRow
>3380	Identifier	pnOutputRow
>3381	CastTarget	const char *
>3382	Callee	NTA_ASSERT
>3383	Identifier	NTA_ASSERT
>3384	IfStatement	if ( * pfAlphaRow ++ )
>3385	CompoundStatement	 
>3386	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>3387	ElseStatement	else
>3388	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>3389	ElseStatement	else
>3390	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>3391	ElseStatement	else
>3392	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>3393	CompoundStatement	 
>3394	IfStatement	if ( nResponse >= 0 )
>3395	ElseStatement	else
>3396	ExpressionStatement	 
>3397	AssignmentExpr	nStatNegRow -= nResponse
>3398	Identifier	nResponse
>3399	Identifier	nStatNegRow
>3400	ExpressionStatement	 
>3401	AssignmentExpr	nStatPosRow += nResponse
>3402	Identifier	nResponse
>3403	Identifier	nStatPosRow
>3404	Condition	 
>3405	RelationalExpression	nResponse >= 0
>3406	PrimaryExpression	0
>3407	Identifier	nResponse
>3408	Condition	 
>3409	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>3410	Identifier	STATS_SUM_POS_NEG
>3411	Identifier	nStatFlags
>3412	ExpressionStatement	 
>3413	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>3414	CallExpression	IABS32 ( nResponse )
>3415	ArgumentList	nResponse
>3416	Argument	nResponse
>3417	Identifier	nResponse
>3418	Callee	IABS32
>3419	Identifier	IABS32
>3420	Identifier	nStatPosRow
>3421	Condition	 
>3422	BitAndExpression	nStatFlags & STATS_SUM_ABS
>3423	Identifier	STATS_SUM_ABS
>3424	Identifier	nStatFlags
>3425	CompoundStatement	 
>3426	IfStatement	if ( nResponse >= 0 )
>3427	ElseStatement	else
>3428	ExpressionStatement	 
>3429	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>3430	CallExpression	MIN ( nStatNegGrand , nResponse )
>3431	ArgumentList	nStatNegGrand
>3432	Argument	nResponse
>3433	Identifier	nResponse
>3434	Argument	nStatNegGrand
>3435	Identifier	nStatNegGrand
>3436	Callee	MIN
>3437	Identifier	MIN
>3438	Identifier	nStatNegGrand
>3439	ExpressionStatement	 
>3440	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>3441	CallExpression	MAX ( nStatPosGrand , nResponse )
>3442	ArgumentList	nStatPosGrand
>3443	Argument	nResponse
>3444	Identifier	nResponse
>3445	Argument	nStatPosGrand
>3446	Identifier	nStatPosGrand
>3447	Callee	MAX
>3448	Identifier	MAX
>3449	Identifier	nStatPosGrand
>3450	Condition	 
>3451	RelationalExpression	nResponse >= 0
>3452	PrimaryExpression	0
>3453	Identifier	nResponse
>3454	Condition	 
>3455	BitAndExpression	nStatFlags & STATS_MAX_MIN
>3456	Identifier	STATS_MAX_MIN
>3457	Identifier	nStatFlags
>3458	ExpressionStatement	 
>3459	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>3460	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>3461	ArgumentList	nStatPosGrand
>3462	Argument	IABS32 ( nResponse )
>3463	CallExpression	IABS32 ( nResponse )
>3464	ArgumentList	nResponse
>3465	Argument	nResponse
>3466	Identifier	nResponse
>3467	Callee	IABS32
>3468	Identifier	IABS32
>3469	Argument	nStatPosGrand
>3470	Identifier	nStatPosGrand
>3471	Callee	MAX
>3472	Identifier	MAX
>3473	Identifier	nStatPosGrand
>3474	Condition	 
>3475	BitAndExpression	nStatFlags & STATS_MAX_ABS
>3476	Identifier	STATS_MAX_ABS
>3477	Identifier	nStatFlags
>3478	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>3479	CompoundStatement	 
>3480	ExpressionStatement	 
>3481	AssignmentExpr	pnInputPtr += nInputRowAdvance
>3482	Identifier	nInputRowAdvance
>3483	Identifier	pnInputPtr
>3484	ExpressionStatement	 
>3485	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3486	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3487	UnaryOp	* pnInputPtr ++
>3488	IncDecOp	pnInputPtr ++
>3489	IncDec	++
>3490	Identifier	pnInputPtr
>3491	UnaryOperator	*
>3492	UnaryOp	* pnGaborPtr ++
>3493	IncDecOp	pnGaborPtr ++
>3494	IncDec	++
>3495	Identifier	pnGaborPtr
>3496	UnaryOperator	*
>3497	Identifier	nResponse
>3498	ExpressionStatement	 
>3499	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3500	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3501	UnaryOp	* pnInputPtr ++
>3502	IncDecOp	pnInputPtr ++
>3503	IncDec	++
>3504	Identifier	pnInputPtr
>3505	UnaryOperator	*
>3506	UnaryOp	* pnGaborPtr ++
>3507	IncDecOp	pnGaborPtr ++
>3508	IncDec	++
>3509	Identifier	pnGaborPtr
>3510	UnaryOperator	*
>3511	Identifier	nResponse
>3512	ExpressionStatement	 
>3513	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3514	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3515	UnaryOp	* pnInputPtr ++
>3516	IncDecOp	pnInputPtr ++
>3517	IncDec	++
>3518	Identifier	pnInputPtr
>3519	UnaryOperator	*
>3520	UnaryOp	* pnGaborPtr ++
>3521	IncDecOp	pnGaborPtr ++
>3522	IncDec	++
>3523	Identifier	pnGaborPtr
>3524	UnaryOperator	*
>3525	Identifier	nResponse
>3526	ExpressionStatement	 
>3527	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3528	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3529	UnaryOp	* pnInputPtr ++
>3530	IncDecOp	pnInputPtr ++
>3531	IncDec	++
>3532	Identifier	pnInputPtr
>3533	UnaryOperator	*
>3534	UnaryOp	* pnGaborPtr ++
>3535	IncDecOp	pnGaborPtr ++
>3536	IncDec	++
>3537	Identifier	pnGaborPtr
>3538	UnaryOperator	*
>3539	Identifier	nResponse
>3540	ExpressionStatement	 
>3541	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3542	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>3543	UnaryOp	* pnInputPtr ++
>3544	IncDecOp	pnInputPtr ++
>3545	IncDec	++
>3546	Identifier	pnInputPtr
>3547	UnaryOperator	*
>3548	UnaryOp	* pnGaborPtr ++
>3549	IncDecOp	pnGaborPtr ++
>3550	IncDec	++
>3551	Identifier	pnGaborPtr
>3552	UnaryOperator	*
>3553	Identifier	nResponse
>3554	IncDecOp	 
>3555	IncDec	--
>3556	Identifier	jj
>3557	Condition	 
>3558	Identifier	jj
>3559	ForInit	 
>3560	AssignmentExpr	jj = nFilterDim
>3561	Identifier	nFilterDim
>3562	Identifier	jj
>3563	Condition	 
>3564	UnaryOp	* pfAlphaRow ++
>3565	IncDecOp	pfAlphaRow ++
>3566	IncDec	++
>3567	Identifier	pfAlphaRow
>3568	UnaryOperator	*
>3569	ExpressionStatement	 
>3570	AssignmentExpr	nResponse = 0
>3571	PrimaryExpression	0
>3572	Identifier	nResponse
>3573	ExpressionStatement	 
>3574	AssignmentExpr	pnInputPtr = pnInputRow
>3575	Identifier	pnInputRow
>3576	Identifier	pnInputPtr
>3577	ExpressionStatement	 
>3578	AssignmentExpr	pnGaborPtr = pnFilter
>3579	Identifier	pnFilter
>3580	Identifier	pnGaborPtr
>3581	IncDecOp	 
>3582	IncDec	--
>3583	Identifier	i
>3584	Condition	 
>3585	Identifier	i
>3586	ForInit	 
>3587	AssignmentExpr	i = nOutputCols
>3588	Identifier	nOutputCols
>3589	Identifier	i
>3590	Label	 
>3591	Condition	 
>3592	Identifier	nFilterDim
>3593	IfStatement	if ( nFilterIndex == 0 && ( eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER ) && \
>3594	CompoundStatement	 
>3595	ForStatement	for ( i = nOutputCols ; i ; i -- )
>3596	CompoundStatement	 
>3597	IfStatement	if ( * pfAlphaRowPtr ++ )
>3598	ExpressionStatement	 
>3599	IncDecOp	nNumPixels ++
>3600	IncDec	++
>3601	Identifier	nNumPixels
>3602	Condition	 
>3603	UnaryOp	* pfAlphaRowPtr ++
>3604	IncDecOp	pfAlphaRowPtr ++
>3605	IncDec	++
>3606	Identifier	pfAlphaRowPtr
>3607	UnaryOperator	*
>3608	IncDecOp	 
>3609	IncDec	--
>3610	Identifier	i
>3611	Condition	 
>3612	Identifier	i
>3613	ForInit	 
>3614	AssignmentExpr	i = nOutputCols
>3615	Identifier	nOutputCols
>3616	Identifier	i
>3617	ExpressionStatement	 
>3618	AssignmentExpr	pfAlphaRowPtr = pfAlphaRow
>3619	Identifier	pfAlphaRow
>3620	Identifier	pfAlphaRowPtr
>3621	Condition	 
>3622	AndExpression	nFilterIndex == 0 && ( eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_\
>3623	AndExpression	( eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER ) && eNormalizeMode == \
>3624	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_GLOBAL
>3625	Identifier	NORMALIZE_MODE_GLOBAL
>3626	Identifier	eNormalizeMode
>3627	OrExpression	eNormalizeMethod == NORMALIZE_METHOD_MEAN || eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER
>3628	EqualityExpression	eNormalizeMethod == NORMALIZE_METHOD_MEANPOWER
>3629	Identifier	NORMALIZE_METHOD_MEANPOWER
>3630	Identifier	eNormalizeMethod
>3631	EqualityExpression	eNormalizeMethod == NORMALIZE_METHOD_MEAN
>3632	Identifier	NORMALIZE_METHOD_MEAN
>3633	Identifier	eNormalizeMethod
>3634	EqualityExpression	nFilterIndex == 0
>3635	PrimaryExpression	0
>3636	Identifier	nFilterIndex
>3637	ExpressionStatement	 
>3638	AssignmentExpr	pfAlphaRow = pfAlpha + ( psOutputBox -> nLeft + nShrinkageX )
>3639	AdditiveExpression	pfAlpha + ( psOutputBox -> nLeft + nShrinkageX )
>3640	AdditiveExpression	psOutputBox -> nLeft + nShrinkageX
>3641	Identifier	nShrinkageX
>3642	PtrMemberAccess	psOutputBox -> nLeft
>3643	Identifier	nLeft
>3644	Identifier	psOutputBox
>3645	Identifier	pfAlpha
>3646	Identifier	pfAlphaRow
>3647	ExpressionStatement	 
>3648	AssignmentExpr	pnOutputRow = pnOutput + psOutputBox -> nLeft
>3649	AdditiveExpression	pnOutput + psOutputBox -> nLeft
>3650	PtrMemberAccess	psOutputBox -> nLeft
>3651	Identifier	nLeft
>3652	Identifier	psOutputBox
>3653	Identifier	pnOutput
>3654	Identifier	pnOutputRow
>3655	ExpressionStatement	 
>3656	AssignmentExpr	pnInputRow = pnInput
>3657	Identifier	pnInput
>3658	Identifier	pnInputRow
>3659	ExpressionStatement	 
>3660	AssignmentExpr	nStatNegRow = 0
>3661	PrimaryExpression	0
>3662	Identifier	nStatNegRow
>3663	ExpressionStatement	 
>3664	AssignmentExpr	nStatPosRow = 0
>3665	PrimaryExpression	0
>3666	Identifier	nStatPosRow
>3667	IncDecOp	 
>3668	IncDec	--
>3669	Identifier	j
>3670	Condition	 
>3671	Identifier	j
>3672	ForInit	 
>3673	AssignmentExpr	j = nOutputRows
>3674	Identifier	nOutputRows
>3675	Identifier	j
>3676	ExpressionStatement	 
>3677	AssignmentExpr	pfAlpha = pfAlphaBase + ( nNumBlankTopRows + nShrinkageY ) * nAlphaRowStride
>3678	AdditiveExpression	pfAlphaBase + ( nNumBlankTopRows + nShrinkageY ) * nAlphaRowStride
>3679	MultiplicativeExpression	( nNumBlankTopRows + nShrinkageY ) * nAlphaRowStride
>3680	Identifier	nAlphaRowStride
>3681	AdditiveExpression	nNumBlankTopRows + nShrinkageY
>3682	Identifier	nShrinkageY
>3683	Identifier	nNumBlankTopRows
>3684	Identifier	pfAlphaBase
>3685	Identifier	pfAlpha
>3686	ExpressionStatement	 
>3687	AssignmentExpr	pnOutput += nNumBlankTopRows * nOutputRowStride
>3688	MultiplicativeExpression	nNumBlankTopRows * nOutputRowStride
>3689	Identifier	nOutputRowStride
>3690	Identifier	nNumBlankTopRows
>3691	Identifier	pnOutput
>3692	IdentifierDeclStatement	 
>3693	IdentifierDecl	* pnOutput = pnOutputBase
>3694	AssignmentExpr	* pnOutput = pnOutputBase
>3695	Identifier	pnOutputBase
>3696	Identifier	pnOutputBase
>3697	Identifier	pnOutput
>3698	IdentifierDeclType	int *
>3699	IdentifierDeclStatement	 
>3700	IdentifierDecl	* pnFilter = pnFilterBase
>3701	AssignmentExpr	* pnFilter = pnFilterBase
>3702	Identifier	pnFilterBase
>3703	Identifier	pnFilterBase
>3704	Identifier	pnFilter
>3705	IdentifierDeclType	const int *
>3706	ExpressionStatement	 
>3707	AssignmentExpr	pnInput = pnInputBase + nInputRowStride * psInputBox -> nTop + psInputBox -> nLeft
>3708	AdditiveExpression	pnInputBase + nInputRowStride * psInputBox -> nTop + psInputBox -> nLeft
>3709	AdditiveExpression	nInputRowStride * psInputBox -> nTop + psInputBox -> nLeft
>3710	PtrMemberAccess	psInputBox -> nLeft
>3711	Identifier	nLeft
>3712	Identifier	psInputBox
>3713	MultiplicativeExpression	nInputRowStride * psInputBox -> nTop
>3714	PtrMemberAccess	psInputBox -> nTop
>3715	Identifier	nTop
>3716	Identifier	psInputBox
>3717	Identifier	nInputRowStride
>3718	Identifier	pnInputBase
>3719	Identifier	pnInput
>3720	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_PERORIENT )
>3721	CompoundStatement	 
>3722	ExpressionStatement	 
>3723	AssignmentExpr	nStatNegGrand = 0
>3724	PrimaryExpression	0
>3725	Identifier	nStatNegGrand
>3726	ExpressionStatement	 
>3727	AssignmentExpr	nStatPosGrand = 0
>3728	PrimaryExpression	0
>3729	Identifier	nStatPosGrand
>3730	Condition	 
>3731	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_PERORIENT
>3732	Identifier	NORMALIZE_MODE_PERORIENT
>3733	Identifier	eNormalizeMode
>3734	IncDecOp	 
>3735	IncDec	++
>3736	Identifier	nFilterIndex
>3737	Condition	 
>3738	RelationalExpression	nFilterIndex < GABORSET_PLANES ( psGaborBank )
>3739	CallExpression	GABORSET_PLANES ( psGaborBank )
>3740	ArgumentList	psGaborBank
>3741	Argument	psGaborBank
>3742	Identifier	psGaborBank
>3743	Callee	GABORSET_PLANES
>3744	Identifier	GABORSET_PLANES
>3745	Identifier	nFilterIndex
>3746	ForInit	 
>3747	AssignmentExpr	nFilterIndex = 0
>3748	PrimaryExpression	0
>3749	Identifier	nFilterIndex
>3750	ExpressionStatement	 
>3751	AssignmentExpr	nStatNegGrand = 0
>3752	PrimaryExpression	0
>3753	Identifier	nStatNegGrand
>3754	ExpressionStatement	 
>3755	AssignmentExpr	nStatPosGrand = 0
>3756	PrimaryExpression	0
>3757	Identifier	nStatPosGrand
>3758	IdentifierDeclStatement	 
>3759	IdentifierDecl	nNumBlankTopRows = psOutputBox -> nTop
>3760	AssignmentExpr	nNumBlankTopRows = psOutputBox -> nTop
>3761	PtrMemberAccess	psOutputBox -> nTop
>3762	Identifier	nTop
>3763	Identifier	psOutputBox
>3764	Identifier	nNumBlankTopRows
>3765	Identifier	nNumBlankTopRows
>3766	IdentifierDeclType	int
>3767	ExpressionStatement	 
>3768	CallExpression	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) % 4 == 0 )
>3769	ArgumentList	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>3770	Argument	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>3771	EqualityExpression	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>3772	PrimaryExpression	0
>3773	MultiplicativeExpression	IMAGESET_COLS ( psBufferOut ) % 4
>3774	PrimaryExpression	4
>3775	CallExpression	IMAGESET_COLS ( psBufferOut )
>3776	ArgumentList	psBufferOut
>3777	Argument	psBufferOut
>3778	Identifier	psBufferOut
>3779	Callee	IMAGESET_COLS
>3780	Identifier	IMAGESET_COLS
>3781	Callee	NTA_ASSERT
>3782	Identifier	NTA_ASSERT
>3783	IdentifierDeclStatement	 
>3784	IdentifierDecl	nOutputCols = ( psOutputBox -> nRight - psOutputBox -> nLeft )
>3785	AssignmentExpr	nOutputCols = ( psOutputBox -> nRight - psOutputBox -> nLeft )
>3786	AdditiveExpression	psOutputBox -> nRight - psOutputBox -> nLeft
>3787	PtrMemberAccess	psOutputBox -> nLeft
>3788	Identifier	nLeft
>3789	Identifier	psOutputBox
>3790	PtrMemberAccess	psOutputBox -> nRight
>3791	Identifier	nRight
>3792	Identifier	psOutputBox
>3793	Identifier	nOutputCols
>3794	Identifier	nOutputCols
>3795	IdentifierDeclType	int
>3796	IdentifierDeclStatement	 
>3797	IdentifierDecl	nOutputRows = ( psOutputBox -> nBottom - psOutputBox -> nTop )
>3798	AssignmentExpr	nOutputRows = ( psOutputBox -> nBottom - psOutputBox -> nTop )
>3799	AdditiveExpression	psOutputBox -> nBottom - psOutputBox -> nTop
>3800	PtrMemberAccess	psOutputBox -> nTop
>3801	Identifier	nTop
>3802	Identifier	psOutputBox
>3803	PtrMemberAccess	psOutputBox -> nBottom
>3804	Identifier	nBottom
>3805	Identifier	psOutputBox
>3806	Identifier	nOutputRows
>3807	Identifier	nOutputRows
>3808	IdentifierDeclType	int
>3809	IdentifierDeclStatement	 
>3810	IdentifierDecl	nAlphaRowStride = IMAGE_ROWSTRIDE ( psAlpha ) / sizeof ( * pfAlphaBase )
>3811	AssignmentExpr	nAlphaRowStride = IMAGE_ROWSTRIDE ( psAlpha ) / sizeof ( * pfAlphaBase )
>3812	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psAlpha ) / sizeof ( * pfAlphaBase )
>3813	SizeofExpr	sizeof ( * pfAlphaBase )
>3814	UnaryOp	* pfAlphaBase
>3815	Identifier	pfAlphaBase
>3816	UnaryOperator	*
>3817	Sizeof	sizeof
>3818	CallExpression	IMAGE_ROWSTRIDE ( psAlpha )
>3819	ArgumentList	psAlpha
>3820	Argument	psAlpha
>3821	Identifier	psAlpha
>3822	Callee	IMAGE_ROWSTRIDE
>3823	Identifier	IMAGE_ROWSTRIDE
>3824	Identifier	nAlphaRowStride
>3825	Identifier	nAlphaRowStride
>3826	IdentifierDeclType	int
>3827	IdentifierDeclStatement	 
>3828	IdentifierDecl	* pfAlphaBase = ( const float * ) psAlpha -> pData
>3829	AssignmentExpr	* pfAlphaBase = ( const float * ) psAlpha -> pData
>3830	CastExpression	( const float * ) psAlpha -> pData
>3831	PtrMemberAccess	psAlpha -> pData
>3832	Identifier	pData
>3833	Identifier	psAlpha
>3834	CastTarget	const float *
>3835	Identifier	pfAlphaBase
>3836	Identifier	pfAlphaBase
>3837	IdentifierDeclType	const float *
>3838	IdentifierDeclStatement	 
>3839	IdentifierDecl	nInputRowAdvance = nInputRowStride - nFilterDim
>3840	AssignmentExpr	nInputRowAdvance = nInputRowStride - nFilterDim
>3841	AdditiveExpression	nInputRowStride - nFilterDim
>3842	Identifier	nFilterDim
>3843	Identifier	nInputRowStride
>3844	Identifier	nInputRowAdvance
>3845	Identifier	nInputRowAdvance
>3846	IdentifierDeclType	int
>3847	IdentifierDeclStatement	 
>3848	IdentifierDecl	nInputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>3849	AssignmentExpr	nInputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>3850	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>3851	SizeofExpr	sizeof ( * pnInputBase )
>3852	UnaryOp	* pnInputBase
>3853	Identifier	pnInputBase
>3854	UnaryOperator	*
>3855	Sizeof	sizeof
>3856	CallExpression	IMAGE_ROWSTRIDE ( psBufferIn )
>3857	ArgumentList	psBufferIn
>3858	Argument	psBufferIn
>3859	Identifier	psBufferIn
>3860	Callee	IMAGE_ROWSTRIDE
>3861	Identifier	IMAGE_ROWSTRIDE
>3862	Identifier	nInputRowStride
>3863	Identifier	nInputRowStride
>3864	IdentifierDeclType	int
>3865	IdentifierDeclStatement	 
>3866	IdentifierDecl	* pnInputBase = ( const int * ) psBufferIn -> pData
>3867	AssignmentExpr	* pnInputBase = ( const int * ) psBufferIn -> pData
>3868	CastExpression	( const int * ) psBufferIn -> pData
>3869	PtrMemberAccess	psBufferIn -> pData
>3870	Identifier	pData
>3871	Identifier	psBufferIn
>3872	CastTarget	const int *
>3873	Identifier	pnInputBase
>3874	Identifier	pnInputBase
>3875	IdentifierDeclType	const int *
>3876	IdentifierDeclStatement	 
>3877	IdentifierDecl	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>3878	AssignmentExpr	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>3879	AdditiveExpression	pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>3880	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>3881	CallExpression	IMAGESET_PLANES ( psBufferOut )
>3882	ArgumentList	psBufferOut
>3883	Argument	psBufferOut
>3884	Identifier	psBufferOut
>3885	Callee	IMAGESET_PLANES
>3886	Identifier	IMAGESET_PLANES
>3887	CallExpression	IMAGESET_PLANESTRIDE ( psBufferOut )
>3888	ArgumentList	psBufferOut
>3889	Argument	psBufferOut
>3890	Identifier	psBufferOut
>3891	Callee	IMAGESET_PLANESTRIDE
>3892	Identifier	IMAGESET_PLANESTRIDE
>3893	Identifier	pDebugOutputSOMB
>3894	Identifier	pDebugOutputEOMB
>3895	Identifier	pDebugOutputEOMB
>3896	IdentifierDeclType	const char *
>3897	IdentifierDeclStatement	 
>3898	IdentifierDecl	* pDebugOutputSOMB = ( const char * ) ( psBufferOut -> pData )
>3899	AssignmentExpr	* pDebugOutputSOMB = ( const char * ) ( psBufferOut -> pData )
>3900	CastExpression	( const char * ) ( psBufferOut -> pData )
>3901	PtrMemberAccess	psBufferOut -> pData
>3902	Identifier	pData
>3903	Identifier	psBufferOut
>3904	CastTarget	const char *
>3905	Identifier	pDebugOutputSOMB
>3906	Identifier	pDebugOutputSOMB
>3907	IdentifierDeclType	const char *
>3908	IdentifierDeclStatement	 
>3909	IdentifierDecl	nOutputRowStride = IMAGESET_ROWSTRIDE ( psBufferOut ) / sizeof ( * pnOutputBase )
>3910	AssignmentExpr	nOutputRowStride = IMAGESET_ROWSTRIDE ( psBufferOut ) / sizeof ( * pnOutputBase )
>3911	MultiplicativeExpression	IMAGESET_ROWSTRIDE ( psBufferOut ) / sizeof ( * pnOutputBase )
>3912	SizeofExpr	sizeof ( * pnOutputBase )
>3913	UnaryOp	* pnOutputBase
>3914	Identifier	pnOutputBase
>3915	UnaryOperator	*
>3916	Sizeof	sizeof
>3917	CallExpression	IMAGESET_ROWSTRIDE ( psBufferOut )
>3918	ArgumentList	psBufferOut
>3919	Argument	psBufferOut
>3920	Identifier	psBufferOut
>3921	Callee	IMAGESET_ROWSTRIDE
>3922	Identifier	IMAGESET_ROWSTRIDE
>3923	Identifier	nOutputRowStride
>3924	Identifier	nOutputRowStride
>3925	IdentifierDeclType	int
>3926	IdentifierDeclStatement	 
>3927	IdentifierDecl	* pnOutputBase = ( int * ) psBufferOut -> pData
>3928	AssignmentExpr	* pnOutputBase = ( int * ) psBufferOut -> pData
>3929	CastExpression	( int * ) psBufferOut -> pData
>3930	PtrMemberAccess	psBufferOut -> pData
>3931	Identifier	pData
>3932	Identifier	psBufferOut
>3933	CastTarget	int *
>3934	Identifier	pnOutputBase
>3935	Identifier	pnOutputBase
>3936	IdentifierDeclType	int *
>3937	IdentifierDeclStatement	 
>3938	IdentifierDecl	* pnFilterBase = ( const int * ) psGaborBank -> pData
>3939	AssignmentExpr	* pnFilterBase = ( const int * ) psGaborBank -> pData
>3940	CastExpression	( const int * ) psGaborBank -> pData
>3941	PtrMemberAccess	psGaborBank -> pData
>3942	Identifier	pData
>3943	Identifier	psGaborBank
>3944	CastTarget	const int *
>3945	Identifier	pnFilterBase
>3946	Identifier	pnFilterBase
>3947	IdentifierDeclType	const int *
>3948	IdentifierDeclStatement	 
>3949	IdentifierDecl	nShrinkageY = ( psInputBox -> nBottom - psOutputBox -> nBottom ) >> 1
>3950	AssignmentExpr	nShrinkageY = ( psInputBox -> nBottom - psOutputBox -> nBottom ) >> 1
>3951	ShiftExpression	( psInputBox -> nBottom - psOutputBox -> nBottom ) >> 1
>3952	PrimaryExpression	1
>3953	AdditiveExpression	psInputBox -> nBottom - psOutputBox -> nBottom
>3954	PtrMemberAccess	psOutputBox -> nBottom
>3955	Identifier	nBottom
>3956	Identifier	psOutputBox
>3957	PtrMemberAccess	psInputBox -> nBottom
>3958	Identifier	nBottom
>3959	Identifier	psInputBox
>3960	Identifier	nShrinkageY
>3961	Identifier	nShrinkageY
>3962	IdentifierDeclType	int
>3963	IdentifierDeclStatement	 
>3964	IdentifierDecl	nShrinkageX = ( psInputBox -> nRight - psOutputBox -> nRight ) >> 1
>3965	AssignmentExpr	nShrinkageX = ( psInputBox -> nRight - psOutputBox -> nRight ) >> 1
>3966	ShiftExpression	( psInputBox -> nRight - psOutputBox -> nRight ) >> 1
>3967	PrimaryExpression	1
>3968	AdditiveExpression	psInputBox -> nRight - psOutputBox -> nRight
>3969	PtrMemberAccess	psOutputBox -> nRight
>3970	Identifier	nRight
>3971	Identifier	psOutputBox
>3972	PtrMemberAccess	psInputBox -> nRight
>3973	Identifier	nRight
>3974	Identifier	psInputBox
>3975	Identifier	nShrinkageX
>3976	Identifier	nShrinkageX
>3977	IdentifierDeclType	int
>3978	IdentifierDeclStatement	 
>3979	IdentifierDecl	nFilterDim = IMAGESET_ROWS ( psGaborBank )
>3980	AssignmentExpr	nFilterDim = IMAGESET_ROWS ( psGaborBank )
>3981	CallExpression	IMAGESET_ROWS ( psGaborBank )
>3982	ArgumentList	psGaborBank
>3983	Argument	psGaborBank
>3984	Identifier	psGaborBank
>3985	Callee	IMAGESET_ROWS
>3986	Identifier	IMAGESET_ROWS
>3987	Identifier	nFilterDim
>3988	Identifier	nFilterDim
>3989	IdentifierDeclType	int
>3990	ExpressionStatement	 
>3991	CallExpression	NTA_ASSERT ( IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank ) )
>3992	ArgumentList	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>3993	Argument	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>3994	EqualityExpression	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>3995	CallExpression	IMAGESET_COLS ( psGaborBank )
>3996	ArgumentList	psGaborBank
>3997	Argument	psGaborBank
>3998	Identifier	psGaborBank
>3999	Callee	IMAGESET_COLS
>4000	Identifier	IMAGESET_COLS
>4001	CallExpression	IMAGESET_ROWS ( psGaborBank )
>4002	ArgumentList	psGaborBank
>4003	Argument	psGaborBank
>4004	Identifier	psGaborBank
>4005	Callee	IMAGESET_ROWS
>4006	Identifier	IMAGESET_ROWS
>4007	Callee	NTA_ASSERT
>4008	Identifier	NTA_ASSERT
>4009	SwitchStatement	switch ( eNormalizeMethod )
>4010	CompoundStatement	 
>4011	ExpressionStatement	 
>4012	CallExpression	NTA_ASSERT ( false )
>4013	ArgumentList	false
>4014	Argument	false
>4015	Identifier	false
>4016	Callee	NTA_ASSERT
>4017	Identifier	NTA_ASSERT
>4018	Label	 
>4019	Identifier	default
>4020	BreakStatement	 
>4021	Label	 
>4022	Identifier	NORMALIZE_METHOD_FIXED
>4023	BreakStatement	 
>4024	ExpressionStatement	 
>4025	AssignmentExpr	nNumPixels = 0
>4026	PrimaryExpression	0
>4027	Identifier	nNumPixels
>4028	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>4029	ElseStatement	else
>4030	CompoundStatement	 
>4031	ExpressionStatement	 
>4032	AssignmentExpr	nStatFlags |= STATS_SUM_POS_NEG
>4033	Identifier	STATS_SUM_POS_NEG
>4034	Identifier	nStatFlags
>4035	ExpressionStatement	 
>4036	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>4037	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>4038	Argument	ePhaseMode == PHASE_MODE_DUAL
>4039	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>4040	Identifier	PHASE_MODE_DUAL
>4041	Identifier	ePhaseMode
>4042	Callee	NTA_ASSERT
>4043	Identifier	NTA_ASSERT
>4044	ExpressionStatement	 
>4045	AssignmentExpr	nStatFlags |= STATS_SUM_ABS
>4046	Identifier	STATS_SUM_ABS
>4047	Identifier	nStatFlags
>4048	Condition	 
>4049	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>4050	Identifier	PHASE_MODE_SINGLE
>4051	Identifier	ePhaseMode
>4052	Label	 
>4053	Identifier	NORMALIZE_METHOD_MEANPOWER
>4054	Label	 
>4055	Identifier	NORMALIZE_METHOD_MEAN
>4056	BreakStatement	 
>4057	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>4058	ElseStatement	else
>4059	CompoundStatement	 
>4060	ExpressionStatement	 
>4061	AssignmentExpr	nStatFlags |= STATS_MAX_MIN
>4062	Identifier	STATS_MAX_MIN
>4063	Identifier	nStatFlags
>4064	ExpressionStatement	 
>4065	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>4066	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>4067	Argument	ePhaseMode == PHASE_MODE_DUAL
>4068	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>4069	Identifier	PHASE_MODE_DUAL
>4070	Identifier	ePhaseMode
>4071	Callee	NTA_ASSERT
>4072	Identifier	NTA_ASSERT
>4073	ExpressionStatement	 
>4074	AssignmentExpr	nStatFlags |= STATS_MAX_ABS
>4075	Identifier	STATS_MAX_ABS
>4076	Identifier	nStatFlags
>4077	Condition	 
>4078	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>4079	Identifier	PHASE_MODE_SINGLE
>4080	Identifier	ePhaseMode
>4081	Label	 
>4082	Identifier	NORMALIZE_METHOD_MAXPOWER
>4083	Label	 
>4084	Identifier	NORMALIZE_METHOD_MAX
>4085	Condition	 
>4086	Identifier	eNormalizeMethod
>4087	IdentifierDeclStatement	 
>4088	IdentifierDecl	nStatFlags = STATS_NONE
>4089	AssignmentExpr	nStatFlags = STATS_NONE
>4090	Identifier	STATS_NONE
>4091	Identifier	STATS_NONE
>4092	Identifier	nStatFlags
>4093	IdentifierDeclType	unsigned int
>4094	IdentifierDeclStatement	 
>4095	IdentifierDecl	nStatNegRow
>4096	Identifier	nStatNegRow
>4097	IdentifierDeclType	int
>4098	IdentifierDecl	nStatPosRow
>4099	Identifier	nStatPosRow
>4100	IdentifierDeclType	int
>4101	IdentifierDeclStatement	 
>4102	IdentifierDecl	nStatNegGrand
>4103	Identifier	nStatNegGrand
>4104	IdentifierDeclType	int
>4105	IdentifierDecl	nStatPosGrand
>4106	Identifier	nStatPosGrand
>4107	IdentifierDeclType	int
>4108	IdentifierDeclStatement	 
>4109	IdentifierDecl	* pnOutputRow = NULL
>4110	AssignmentExpr	* pnOutputRow = NULL
>4111	Identifier	NULL
>4112	Identifier	NULL
>4113	Identifier	pnOutputRow
>4114	IdentifierDeclType	int *
>4115	IdentifierDeclStatement	 
>4116	IdentifierDecl	* pfAlphaRowPtr = NULL
>4117	AssignmentExpr	* pfAlphaRowPtr = NULL
>4118	Identifier	NULL
>4119	Identifier	NULL
>4120	Identifier	pfAlphaRowPtr
>4121	IdentifierDeclType	const float *
>4122	IdentifierDeclStatement	 
>4123	IdentifierDecl	* pfAlphaRow = NULL
>4124	AssignmentExpr	* pfAlphaRow = NULL
>4125	Identifier	NULL
>4126	Identifier	NULL
>4127	Identifier	pfAlphaRow
>4128	IdentifierDeclType	const float *
>4129	IdentifierDeclStatement	 
>4130	IdentifierDecl	* pfAlpha = NULL
>4131	AssignmentExpr	* pfAlpha = NULL
>4132	Identifier	NULL
>4133	Identifier	NULL
>4134	Identifier	pfAlpha
>4135	IdentifierDeclType	const float *
>4136	IdentifierDeclStatement	 
>4137	IdentifierDecl	* pnGaborPtr = NULL
>4138	AssignmentExpr	* pnGaborPtr = NULL
>4139	Identifier	NULL
>4140	Identifier	NULL
>4141	Identifier	pnGaborPtr
>4142	IdentifierDeclType	const int *
>4143	IdentifierDeclStatement	 
>4144	IdentifierDecl	* pnInputPtr = NULL
>4145	AssignmentExpr	* pnInputPtr = NULL
>4146	Identifier	NULL
>4147	Identifier	NULL
>4148	Identifier	pnInputPtr
>4149	IdentifierDeclType	const int *
>4150	IdentifierDeclStatement	 
>4151	IdentifierDecl	* pnInputRow = NULL
>4152	AssignmentExpr	* pnInputRow = NULL
>4153	Identifier	NULL
>4154	Identifier	NULL
>4155	Identifier	pnInputRow
>4156	IdentifierDeclType	const int *
>4157	IdentifierDeclStatement	 
>4158	IdentifierDecl	* pnInput = NULL
>4159	AssignmentExpr	* pnInput = NULL
>4160	Identifier	NULL
>4161	Identifier	NULL
>4162	Identifier	pnInput
>4163	IdentifierDeclType	const int *
>4164	IdentifierDeclStatement	 
>4165	IdentifierDecl	nNumPixels = 0
>4166	AssignmentExpr	nNumPixels = 0
>4167	PrimaryExpression	0
>4168	Identifier	nNumPixels
>4169	Identifier	nNumPixels
>4170	IdentifierDeclType	int
>4171	IdentifierDeclStatement	 
>4172	IdentifierDecl	nResponse
>4173	Identifier	nResponse
>4174	IdentifierDeclType	int
>4175	IdentifierDeclStatement	 
>4176	IdentifierDecl	nFilterIndex
>4177	Identifier	nFilterIndex
>4178	IdentifierDeclType	int
>4179	IdentifierDeclStatement	 
>4180	IdentifierDecl	jj
>4181	Identifier	jj
>4182	IdentifierDeclType	int
>4183	IdentifierDecl	j
>4184	Identifier	j
>4185	IdentifierDeclType	int
>4186	IdentifierDecl	i
>4187	Identifier	i
>4188	IdentifierDeclType	int
>4303	FunctionDef	_doConvolution_bbox (const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psBufferOut , const NUMPY_ARRAY * psGaborBank , \
>4304	ParameterList	const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psBufferOut , const NUMPY_ARRAY * psGaborBank , const BBOX * \
>4305	Parameter	 
>4306	Identifier	anStatNegGrand
>4307	ParameterType	unsigned int [ ]
>4308	Parameter	 
>4309	Identifier	anStatPosGrand
>4310	ParameterType	unsigned int [ ]
>4311	Parameter	 
>4312	Identifier	eNormalizeMode
>4313	ParameterType	NORMALIZE_MODE
>4314	Parameter	 
>4315	Identifier	eNormalizeMethod
>4316	ParameterType	NORMALIZE_METHOD
>4317	Parameter	 
>4318	Identifier	ePhaseMode
>4319	ParameterType	PHASE_MODE
>4320	Parameter	 
>4321	Identifier	psOutputBox
>4322	ParameterType	const BBOX *
>4323	Parameter	 
>4324	Identifier	psInputBox
>4325	ParameterType	const BBOX *
>4326	Parameter	 
>4327	Identifier	psGaborBank
>4328	ParameterType	const NUMPY_ARRAY *
>4329	Parameter	 
>4330	Identifier	psBufferOut
>4331	ParameterType	const NUMPY_ARRAY *
>4332	Parameter	 
>4333	Identifier	psBufferIn
>4334	ParameterType	const NUMPY_ARRAY *
>4335	ReturnType	void
>4336	CompoundStatement	 
>4337	ForStatement	for ( int kk = 0 ; kk < 1 ; kk ++ )
>4338	CompoundStatement	 
>4339	ExpressionStatement	 
>4340	CallExpression	fprintf ( stdout , \"anStatNegGrand[%d]
>4341	ArgumentList	stdout
>4342	Argument	anStatNegGrand [ kk ]
>4343	ArrayIndexing	anStatNegGrand [ kk ]
>4344	Identifier	kk
>4345	Identifier	anStatNegGrand
>4346	Argument	kk
>4347	Identifier	kk
>4348	Argument	\"anStatNegGrand[%d]
>4349	PrimaryExpression	\"anStatNegGrand[%d]
>4350	Argument	stdout
>4351	Identifier	stdout
>4352	Callee	fprintf
>4353	Identifier	fprintf
>4354	ExpressionStatement	 
>4355	CallExpression	fprintf ( stdout , \"anStatPosGrand[%d]
>4356	ArgumentList	stdout
>4357	Argument	anStatPosGrand [ kk ]
>4358	ArrayIndexing	anStatPosGrand [ kk ]
>4359	Identifier	kk
>4360	Identifier	anStatPosGrand
>4361	Argument	kk
>4362	Identifier	kk
>4363	Argument	\"anStatPosGrand[%d]
>4364	PrimaryExpression	\"anStatPosGrand[%d]
>4365	Argument	stdout
>4366	Identifier	stdout
>4367	Callee	fprintf
>4368	Identifier	fprintf
>4369	IncDecOp	 
>4370	IncDec	++
>4371	Identifier	kk
>4372	Condition	 
>4373	RelationalExpression	kk < 1
>4374	PrimaryExpression	1
>4375	Identifier	kk
>4376	ForInit	 
>4377	IdentifierDeclStatement	int kk = 0 ;
>4378	IdentifierDecl	kk = 0
>4379	AssignmentExpr	kk = 0
>4380	PrimaryExpression	0
>4381	Identifier	kk
>4382	Identifier	kk
>4383	IdentifierDeclType	int
>4384	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_GLOBAL )
>4385	CompoundStatement	 
>4386	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>4387	CompoundStatement	 
>4388	ExpressionStatement	 
>4389	AssignmentExpr	anStatNegGrand [ 0 ] = ( unsigned int ) ( nStatNegGrand + 1 )
>4390	CastExpression	( unsigned int ) ( nStatNegGrand + 1 )
>4391	AdditiveExpression	nStatNegGrand + 1
>4392	PrimaryExpression	1
>4393	Identifier	nStatNegGrand
>4394	CastTarget	unsigned int
>4395	ArrayIndexing	anStatNegGrand [ 0 ]
>4396	PrimaryExpression	0
>4397	Identifier	anStatNegGrand
>4398	ExpressionStatement	 
>4399	CallExpression	NTA_ASSERT ( nStatNegGrand >= 0 )
>4400	ArgumentList	nStatNegGrand >= 0
>4401	Argument	nStatNegGrand >= 0
>4402	RelationalExpression	nStatNegGrand >= 0
>4403	PrimaryExpression	0
>4404	Identifier	nStatNegGrand
>4405	Callee	NTA_ASSERT
>4406	Identifier	NTA_ASSERT
>4407	ExpressionStatement	 
>4408	AssignmentExpr	nStatNegGrand = - nStatNegGrand
>4409	UnaryOp	- nStatNegGrand
>4410	Identifier	nStatNegGrand
>4411	UnaryOperator	-
>4412	Identifier	nStatNegGrand
>4413	Condition	 
>4414	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>4415	Identifier	PHASE_MODE_DUAL
>4416	Identifier	ePhaseMode
>4417	ExpressionStatement	 
>4418	AssignmentExpr	anStatPosGrand [ 0 ] = ( unsigned int ) ( nStatPosGrand + 1 )
>4419	CastExpression	( unsigned int ) ( nStatPosGrand + 1 )
>4420	AdditiveExpression	nStatPosGrand + 1
>4421	PrimaryExpression	1
>4422	Identifier	nStatPosGrand
>4423	CastTarget	unsigned int
>4424	ArrayIndexing	anStatPosGrand [ 0 ]
>4425	PrimaryExpression	0
>4426	Identifier	anStatPosGrand
>4427	ExpressionStatement	 
>4428	CallExpression	NTA_ASSERT ( nStatPosGrand >= 0 )
>4429	ArgumentList	nStatPosGrand >= 0
>4430	Argument	nStatPosGrand >= 0
>4431	RelationalExpression	nStatPosGrand >= 0
>4432	PrimaryExpression	0
>4433	Identifier	nStatPosGrand
>4434	Callee	NTA_ASSERT
>4435	Identifier	NTA_ASSERT
>4436	ExpressionStatement	 
>4437	CallExpression	_computeNormalizers ( nStatPosGrand , nStatNegGrand , nStatFlags , eNormalizeMethod , nNumPixels )
>4438	ArgumentList	nStatPosGrand
>4439	Argument	nNumPixels
>4440	Identifier	nNumPixels
>4441	Argument	eNormalizeMethod
>4442	Identifier	eNormalizeMethod
>4443	Argument	nStatFlags
>4444	Identifier	nStatFlags
>4445	Argument	nStatNegGrand
>4446	Identifier	nStatNegGrand
>4447	Argument	nStatPosGrand
>4448	Identifier	nStatPosGrand
>4449	Callee	_computeNormalizers
>4450	Identifier	_computeNormalizers
>4451	Condition	 
>4452	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_GLOBAL
>4453	Identifier	NORMALIZE_MODE_GLOBAL
>4454	Identifier	eNormalizeMode
>4455	ForStatement	for ( nFilterIndex = 0 ; nFilterIndex < GABORSET_PLANES ( psGaborBank ) ; nFilterIndex ++ )
>4456	CompoundStatement	 
>4457	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_PERORIENT )
>4458	CompoundStatement	 
>4459	ForStatement	for ( int kk = 0 ; kk <= nFilterIndex ; kk ++ )
>4460	CompoundStatement	 
>4461	ExpressionStatement	 
>4462	CallExpression	fprintf ( stdout , \"[%d]
>4463	ArgumentList	stdout
>4464	Argument	anStatNegGrand [ kk ]
>4465	ArrayIndexing	anStatNegGrand [ kk ]
>4466	Identifier	kk
>4467	Identifier	anStatNegGrand
>4468	Argument	anStatPosGrand [ kk ]
>4469	ArrayIndexing	anStatPosGrand [ kk ]
>4470	Identifier	kk
>4471	Identifier	anStatPosGrand
>4472	Argument	kk
>4473	Identifier	kk
>4474	Argument	\"[%d]
>4475	PrimaryExpression	\"[%d]
>4476	Argument	stdout
>4477	Identifier	stdout
>4478	Callee	fprintf
>4479	Identifier	fprintf
>4480	IncDecOp	 
>4481	IncDec	++
>4482	Identifier	kk
>4483	Condition	 
>4484	RelationalExpression	kk <= nFilterIndex
>4485	Identifier	nFilterIndex
>4486	Identifier	kk
>4487	ForInit	 
>4488	IdentifierDeclStatement	int kk = 0 ;
>4489	IdentifierDecl	kk = 0
>4490	AssignmentExpr	kk = 0
>4491	PrimaryExpression	0
>4492	Identifier	kk
>4493	Identifier	kk
>4494	IdentifierDeclType	int
>4495	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>4496	CompoundStatement	 
>4497	ExpressionStatement	 
>4498	AssignmentExpr	anStatNegGrand [ nFilterIndex ] = ( unsigned int ) ( nStatNegGrand + 1 )
>4499	CastExpression	( unsigned int ) ( nStatNegGrand + 1 )
>4500	AdditiveExpression	nStatNegGrand + 1
>4501	PrimaryExpression	1
>4502	Identifier	nStatNegGrand
>4503	CastTarget	unsigned int
>4504	ArrayIndexing	anStatNegGrand [ nFilterIndex ]
>4505	Identifier	nFilterIndex
>4506	Identifier	anStatNegGrand
>4507	ExpressionStatement	 
>4508	CallExpression	NTA_ASSERT ( nStatNegGrand >= 0 )
>4509	ArgumentList	nStatNegGrand >= 0
>4510	Argument	nStatNegGrand >= 0
>4511	RelationalExpression	nStatNegGrand >= 0
>4512	PrimaryExpression	0
>4513	Identifier	nStatNegGrand
>4514	Callee	NTA_ASSERT
>4515	Identifier	NTA_ASSERT
>4516	ExpressionStatement	 
>4517	AssignmentExpr	nStatNegGrand = - nStatNegGrand
>4518	UnaryOp	- nStatNegGrand
>4519	Identifier	nStatNegGrand
>4520	UnaryOperator	-
>4521	Identifier	nStatNegGrand
>4522	Condition	 
>4523	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>4524	Identifier	PHASE_MODE_DUAL
>4525	Identifier	ePhaseMode
>4526	ExpressionStatement	 
>4527	AssignmentExpr	anStatPosGrand [ nFilterIndex ] = ( unsigned int ) ( nStatPosGrand + 1 )
>4528	CastExpression	( unsigned int ) ( nStatPosGrand + 1 )
>4529	AdditiveExpression	nStatPosGrand + 1
>4530	PrimaryExpression	1
>4531	Identifier	nStatPosGrand
>4532	CastTarget	unsigned int
>4533	ArrayIndexing	anStatPosGrand [ nFilterIndex ]
>4534	Identifier	nFilterIndex
>4535	Identifier	anStatPosGrand
>4536	ExpressionStatement	 
>4537	CallExpression	NTA_ASSERT ( nStatPosGrand >= 0 )
>4538	ArgumentList	nStatPosGrand >= 0
>4539	Argument	nStatPosGrand >= 0
>4540	RelationalExpression	nStatPosGrand >= 0
>4541	PrimaryExpression	0
>4542	Identifier	nStatPosGrand
>4543	Callee	NTA_ASSERT
>4544	Identifier	NTA_ASSERT
>4545	ExpressionStatement	 
>4546	CallExpression	_computeNormalizers ( nStatPosGrand , nStatNegGrand , nStatFlags , eNormalizeMethod , nNumPixels )
>4547	ArgumentList	nStatPosGrand
>4548	Argument	nNumPixels
>4549	Identifier	nNumPixels
>4550	Argument	eNormalizeMethod
>4551	Identifier	eNormalizeMethod
>4552	Argument	nStatFlags
>4553	Identifier	nStatFlags
>4554	Argument	nStatNegGrand
>4555	Identifier	nStatNegGrand
>4556	Argument	nStatPosGrand
>4557	Identifier	nStatPosGrand
>4558	Callee	_computeNormalizers
>4559	Identifier	_computeNormalizers
>4560	Condition	 
>4561	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_PERORIENT
>4562	Identifier	NORMALIZE_MODE_PERORIENT
>4563	Identifier	eNormalizeMode
>4564	ExpressionStatement	 
>4565	AssignmentExpr	pnOutputBase += IMAGESET_PLANESTRIDE ( psBufferOut ) / sizeof ( * pnOutput )
>4566	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psBufferOut ) / sizeof ( * pnOutput )
>4567	SizeofExpr	sizeof ( * pnOutput )
>4568	UnaryOp	* pnOutput
>4569	Identifier	pnOutput
>4570	UnaryOperator	*
>4571	Sizeof	sizeof
>4572	CallExpression	IMAGESET_PLANESTRIDE ( psBufferOut )
>4573	ArgumentList	psBufferOut
>4574	Argument	psBufferOut
>4575	Identifier	psBufferOut
>4576	Callee	IMAGESET_PLANESTRIDE
>4577	Identifier	IMAGESET_PLANESTRIDE
>4578	Identifier	pnOutputBase
>4579	ExpressionStatement	 
>4580	AssignmentExpr	pnFilterBase += IMAGESET_PLANESTRIDE ( psGaborBank ) / sizeof ( * pnFilter )
>4581	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psGaborBank ) / sizeof ( * pnFilter )
>4582	SizeofExpr	sizeof ( * pnFilter )
>4583	UnaryOp	* pnFilter
>4584	Identifier	pnFilter
>4585	UnaryOperator	*
>4586	Sizeof	sizeof
>4587	CallExpression	IMAGESET_PLANESTRIDE ( psGaborBank )
>4588	ArgumentList	psGaborBank
>4589	Argument	psGaborBank
>4590	Identifier	psGaborBank
>4591	Callee	IMAGESET_PLANESTRIDE
>4592	Identifier	IMAGESET_PLANESTRIDE
>4593	Identifier	pnFilterBase
>4594	ForStatement	for ( j = nOutputRows ; j ; j -- )
>4595	CompoundStatement	 
>4596	ExpressionStatement	 
>4597	AssignmentExpr	pnOutput += nOutputRowStride
>4598	Identifier	nOutputRowStride
>4599	Identifier	pnOutput
>4600	ExpressionStatement	 
>4601	AssignmentExpr	pnInput += nInputRowStride
>4602	Identifier	nInputRowStride
>4603	Identifier	pnInput
>4604	IfStatement	if ( nStatFlags & STATS_MEAN )
>4605	CompoundStatement	 
>4606	ExpressionStatement	 
>4607	AssignmentExpr	nStatNegGrand += ( ( - nStatNegRow ) >> 8 )
>4608	ShiftExpression	( - nStatNegRow ) >> 8
>4609	PrimaryExpression	8
>4610	UnaryOp	- nStatNegRow
>4611	Identifier	nStatNegRow
>4612	UnaryOperator	-
>4613	Identifier	nStatNegGrand
>4614	ExpressionStatement	 
>4615	AssignmentExpr	nStatPosGrand += ( nStatPosRow >> 8 )
>4616	ShiftExpression	nStatPosRow >> 8
>4617	PrimaryExpression	8
>4618	Identifier	nStatPosRow
>4619	Identifier	nStatPosGrand
>4620	Condition	 
>4621	BitAndExpression	nStatFlags & STATS_MEAN
>4622	Identifier	STATS_MEAN
>4623	Identifier	nStatFlags
>4624	SwitchStatement	switch ( nFilterDim )
>4625	CompoundStatement	 
>4626	BreakStatement	 
>4627	ForStatement	for ( i = nOutputCols ; i ; i -- )
>4628	CompoundStatement	 
>4629	ExpressionStatement	 
>4630	IncDecOp	pnInputRow ++
>4631	IncDec	++
>4632	Identifier	pnInputRow
>4633	ExpressionStatement	 
>4634	AssignmentExpr	* pnOutputRow ++ = nResponse
>4635	Identifier	nResponse
>4636	UnaryOp	* pnOutputRow ++
>4637	IncDecOp	pnOutputRow ++
>4638	IncDec	++
>4639	Identifier	pnOutputRow
>4640	UnaryOperator	*
>4641	ExpressionStatement	 
>4642	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>4643	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>4644	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>4645	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>4646	Identifier	pDebugOutputEOMB
>4647	CastExpression	( const char * ) pnOutputRow
>4648	Identifier	pnOutputRow
>4649	CastTarget	const char *
>4650	Callee	NTA_ASSERT
>4651	Identifier	NTA_ASSERT
>4652	ExpressionStatement	 
>4653	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>4654	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>4655	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>4656	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>4657	Identifier	pDebugOutputSOMB
>4658	CastExpression	( const char * ) pnOutputRow
>4659	Identifier	pnOutputRow
>4660	CastTarget	const char *
>4661	Callee	NTA_ASSERT
>4662	Identifier	NTA_ASSERT
>4663	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>4664	ElseStatement	else
>4665	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>4666	ElseStatement	else
>4667	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>4668	ElseStatement	else
>4669	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>4670	CompoundStatement	 
>4671	IfStatement	if ( nResponse >= 0 )
>4672	ElseStatement	else
>4673	ExpressionStatement	 
>4674	AssignmentExpr	nStatNegRow -= nResponse
>4675	Identifier	nResponse
>4676	Identifier	nStatNegRow
>4677	ExpressionStatement	 
>4678	AssignmentExpr	nStatPosRow += nResponse
>4679	Identifier	nResponse
>4680	Identifier	nStatPosRow
>4681	Condition	 
>4682	RelationalExpression	nResponse >= 0
>4683	PrimaryExpression	0
>4684	Identifier	nResponse
>4685	Condition	 
>4686	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>4687	Identifier	STATS_SUM_POS_NEG
>4688	Identifier	nStatFlags
>4689	ExpressionStatement	 
>4690	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>4691	CallExpression	IABS32 ( nResponse )
>4692	ArgumentList	nResponse
>4693	Argument	nResponse
>4694	Identifier	nResponse
>4695	Callee	IABS32
>4696	Identifier	IABS32
>4697	Identifier	nStatPosRow
>4698	Condition	 
>4699	BitAndExpression	nStatFlags & STATS_SUM_ABS
>4700	Identifier	STATS_SUM_ABS
>4701	Identifier	nStatFlags
>4702	CompoundStatement	 
>4703	IfStatement	if ( nResponse >= 0 )
>4704	ElseStatement	else
>4705	ExpressionStatement	 
>4706	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>4707	CallExpression	MIN ( nStatNegGrand , nResponse )
>4708	ArgumentList	nStatNegGrand
>4709	Argument	nResponse
>4710	Identifier	nResponse
>4711	Argument	nStatNegGrand
>4712	Identifier	nStatNegGrand
>4713	Callee	MIN
>4714	Identifier	MIN
>4715	Identifier	nStatNegGrand
>4716	ExpressionStatement	 
>4717	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>4718	CallExpression	MAX ( nStatPosGrand , nResponse )
>4719	ArgumentList	nStatPosGrand
>4720	Argument	nResponse
>4721	Identifier	nResponse
>4722	Argument	nStatPosGrand
>4723	Identifier	nStatPosGrand
>4724	Callee	MAX
>4725	Identifier	MAX
>4726	Identifier	nStatPosGrand
>4727	Condition	 
>4728	RelationalExpression	nResponse >= 0
>4729	PrimaryExpression	0
>4730	Identifier	nResponse
>4731	Condition	 
>4732	BitAndExpression	nStatFlags & STATS_MAX_MIN
>4733	Identifier	STATS_MAX_MIN
>4734	Identifier	nStatFlags
>4735	ExpressionStatement	 
>4736	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>4737	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>4738	ArgumentList	nStatPosGrand
>4739	Argument	IABS32 ( nResponse )
>4740	CallExpression	IABS32 ( nResponse )
>4741	ArgumentList	nResponse
>4742	Argument	nResponse
>4743	Identifier	nResponse
>4744	Callee	IABS32
>4745	Identifier	IABS32
>4746	Argument	nStatPosGrand
>4747	Identifier	nStatPosGrand
>4748	Callee	MAX
>4749	Identifier	MAX
>4750	Identifier	nStatPosGrand
>4751	Condition	 
>4752	BitAndExpression	nStatFlags & STATS_MAX_ABS
>4753	Identifier	STATS_MAX_ABS
>4754	Identifier	nStatFlags
>4755	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>4756	CompoundStatement	 
>4757	ExpressionStatement	 
>4758	AssignmentExpr	pnInputPtr += nInputRowAdvance
>4759	Identifier	nInputRowAdvance
>4760	Identifier	pnInputPtr
>4761	ExpressionStatement	 
>4762	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4763	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4764	UnaryOp	* pnInputPtr ++
>4765	IncDecOp	pnInputPtr ++
>4766	IncDec	++
>4767	Identifier	pnInputPtr
>4768	UnaryOperator	*
>4769	UnaryOp	* pnGaborPtr ++
>4770	IncDecOp	pnGaborPtr ++
>4771	IncDec	++
>4772	Identifier	pnGaborPtr
>4773	UnaryOperator	*
>4774	Identifier	nResponse
>4775	ExpressionStatement	 
>4776	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4777	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4778	UnaryOp	* pnInputPtr ++
>4779	IncDecOp	pnInputPtr ++
>4780	IncDec	++
>4781	Identifier	pnInputPtr
>4782	UnaryOperator	*
>4783	UnaryOp	* pnGaborPtr ++
>4784	IncDecOp	pnGaborPtr ++
>4785	IncDec	++
>4786	Identifier	pnGaborPtr
>4787	UnaryOperator	*
>4788	Identifier	nResponse
>4789	ExpressionStatement	 
>4790	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4791	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4792	UnaryOp	* pnInputPtr ++
>4793	IncDecOp	pnInputPtr ++
>4794	IncDec	++
>4795	Identifier	pnInputPtr
>4796	UnaryOperator	*
>4797	UnaryOp	* pnGaborPtr ++
>4798	IncDecOp	pnGaborPtr ++
>4799	IncDec	++
>4800	Identifier	pnGaborPtr
>4801	UnaryOperator	*
>4802	Identifier	nResponse
>4803	ExpressionStatement	 
>4804	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4805	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4806	UnaryOp	* pnInputPtr ++
>4807	IncDecOp	pnInputPtr ++
>4808	IncDec	++
>4809	Identifier	pnInputPtr
>4810	UnaryOperator	*
>4811	UnaryOp	* pnGaborPtr ++
>4812	IncDecOp	pnGaborPtr ++
>4813	IncDec	++
>4814	Identifier	pnGaborPtr
>4815	UnaryOperator	*
>4816	Identifier	nResponse
>4817	ExpressionStatement	 
>4818	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4819	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4820	UnaryOp	* pnInputPtr ++
>4821	IncDecOp	pnInputPtr ++
>4822	IncDec	++
>4823	Identifier	pnInputPtr
>4824	UnaryOperator	*
>4825	UnaryOp	* pnGaborPtr ++
>4826	IncDecOp	pnGaborPtr ++
>4827	IncDec	++
>4828	Identifier	pnGaborPtr
>4829	UnaryOperator	*
>4830	Identifier	nResponse
>4831	ExpressionStatement	 
>4832	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4833	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4834	UnaryOp	* pnInputPtr ++
>4835	IncDecOp	pnInputPtr ++
>4836	IncDec	++
>4837	Identifier	pnInputPtr
>4838	UnaryOperator	*
>4839	UnaryOp	* pnGaborPtr ++
>4840	IncDecOp	pnGaborPtr ++
>4841	IncDec	++
>4842	Identifier	pnGaborPtr
>4843	UnaryOperator	*
>4844	Identifier	nResponse
>4845	ExpressionStatement	 
>4846	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4847	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4848	UnaryOp	* pnInputPtr ++
>4849	IncDecOp	pnInputPtr ++
>4850	IncDec	++
>4851	Identifier	pnInputPtr
>4852	UnaryOperator	*
>4853	UnaryOp	* pnGaborPtr ++
>4854	IncDecOp	pnGaborPtr ++
>4855	IncDec	++
>4856	Identifier	pnGaborPtr
>4857	UnaryOperator	*
>4858	Identifier	nResponse
>4859	ExpressionStatement	 
>4860	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4861	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4862	UnaryOp	* pnInputPtr ++
>4863	IncDecOp	pnInputPtr ++
>4864	IncDec	++
>4865	Identifier	pnInputPtr
>4866	UnaryOperator	*
>4867	UnaryOp	* pnGaborPtr ++
>4868	IncDecOp	pnGaborPtr ++
>4869	IncDec	++
>4870	Identifier	pnGaborPtr
>4871	UnaryOperator	*
>4872	Identifier	nResponse
>4873	ExpressionStatement	 
>4874	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4875	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4876	UnaryOp	* pnInputPtr ++
>4877	IncDecOp	pnInputPtr ++
>4878	IncDec	++
>4879	Identifier	pnInputPtr
>4880	UnaryOperator	*
>4881	UnaryOp	* pnGaborPtr ++
>4882	IncDecOp	pnGaborPtr ++
>4883	IncDec	++
>4884	Identifier	pnGaborPtr
>4885	UnaryOperator	*
>4886	Identifier	nResponse
>4887	ExpressionStatement	 
>4888	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4889	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4890	UnaryOp	* pnInputPtr ++
>4891	IncDecOp	pnInputPtr ++
>4892	IncDec	++
>4893	Identifier	pnInputPtr
>4894	UnaryOperator	*
>4895	UnaryOp	* pnGaborPtr ++
>4896	IncDecOp	pnGaborPtr ++
>4897	IncDec	++
>4898	Identifier	pnGaborPtr
>4899	UnaryOperator	*
>4900	Identifier	nResponse
>4901	ExpressionStatement	 
>4902	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4903	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4904	UnaryOp	* pnInputPtr ++
>4905	IncDecOp	pnInputPtr ++
>4906	IncDec	++
>4907	Identifier	pnInputPtr
>4908	UnaryOperator	*
>4909	UnaryOp	* pnGaborPtr ++
>4910	IncDecOp	pnGaborPtr ++
>4911	IncDec	++
>4912	Identifier	pnGaborPtr
>4913	UnaryOperator	*
>4914	Identifier	nResponse
>4915	ExpressionStatement	 
>4916	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4917	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4918	UnaryOp	* pnInputPtr ++
>4919	IncDecOp	pnInputPtr ++
>4920	IncDec	++
>4921	Identifier	pnInputPtr
>4922	UnaryOperator	*
>4923	UnaryOp	* pnGaborPtr ++
>4924	IncDecOp	pnGaborPtr ++
>4925	IncDec	++
>4926	Identifier	pnGaborPtr
>4927	UnaryOperator	*
>4928	Identifier	nResponse
>4929	ExpressionStatement	 
>4930	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4931	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>4932	UnaryOp	* pnInputPtr ++
>4933	IncDecOp	pnInputPtr ++
>4934	IncDec	++
>4935	Identifier	pnInputPtr
>4936	UnaryOperator	*
>4937	UnaryOp	* pnGaborPtr ++
>4938	IncDecOp	pnGaborPtr ++
>4939	IncDec	++
>4940	Identifier	pnGaborPtr
>4941	UnaryOperator	*
>4942	Identifier	nResponse
>4943	IncDecOp	 
>4944	IncDec	--
>4945	Identifier	jj
>4946	Condition	 
>4947	Identifier	jj
>4948	ForInit	 
>4949	AssignmentExpr	jj = nFilterDim
>4950	Identifier	nFilterDim
>4951	Identifier	jj
>4952	ExpressionStatement	 
>4953	AssignmentExpr	nResponse = 0
>4954	PrimaryExpression	0
>4955	Identifier	nResponse
>4956	ExpressionStatement	 
>4957	AssignmentExpr	pnInputPtr = pnInputRow
>4958	Identifier	pnInputRow
>4959	Identifier	pnInputPtr
>4960	ExpressionStatement	 
>4961	AssignmentExpr	pnGaborPtr = pnFilter
>4962	Identifier	pnFilter
>4963	Identifier	pnGaborPtr
>4964	IncDecOp	 
>4965	IncDec	--
>4966	Identifier	i
>4967	Condition	 
>4968	Identifier	i
>4969	ForInit	 
>4970	AssignmentExpr	i = nOutputCols
>4971	Identifier	nOutputCols
>4972	Identifier	i
>4973	Label	 
>4974	BreakStatement	 
>4975	ForStatement	for ( i = nOutputCols ; i ; i -- )
>4976	CompoundStatement	 
>4977	ExpressionStatement	 
>4978	IncDecOp	pnInputRow ++
>4979	IncDec	++
>4980	Identifier	pnInputRow
>4981	ExpressionStatement	 
>4982	AssignmentExpr	* pnOutputRow ++ = nResponse
>4983	Identifier	nResponse
>4984	UnaryOp	* pnOutputRow ++
>4985	IncDecOp	pnOutputRow ++
>4986	IncDec	++
>4987	Identifier	pnOutputRow
>4988	UnaryOperator	*
>4989	ExpressionStatement	 
>4990	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>4991	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>4992	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>4993	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>4994	Identifier	pDebugOutputEOMB
>4995	CastExpression	( const char * ) pnOutputRow
>4996	Identifier	pnOutputRow
>4997	CastTarget	const char *
>4998	Callee	NTA_ASSERT
>4999	Identifier	NTA_ASSERT
>5000	ExpressionStatement	 
>5001	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>5002	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5003	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5004	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5005	Identifier	pDebugOutputSOMB
>5006	CastExpression	( const char * ) pnOutputRow
>5007	Identifier	pnOutputRow
>5008	CastTarget	const char *
>5009	Callee	NTA_ASSERT
>5010	Identifier	NTA_ASSERT
>5011	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>5012	ElseStatement	else
>5013	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>5014	ElseStatement	else
>5015	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>5016	ElseStatement	else
>5017	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>5018	CompoundStatement	 
>5019	IfStatement	if ( nResponse >= 0 )
>5020	ElseStatement	else
>5021	ExpressionStatement	 
>5022	AssignmentExpr	nStatNegRow -= nResponse
>5023	Identifier	nResponse
>5024	Identifier	nStatNegRow
>5025	ExpressionStatement	 
>5026	AssignmentExpr	nStatPosRow += nResponse
>5027	Identifier	nResponse
>5028	Identifier	nStatPosRow
>5029	Condition	 
>5030	RelationalExpression	nResponse >= 0
>5031	PrimaryExpression	0
>5032	Identifier	nResponse
>5033	Condition	 
>5034	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>5035	Identifier	STATS_SUM_POS_NEG
>5036	Identifier	nStatFlags
>5037	ExpressionStatement	 
>5038	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>5039	CallExpression	IABS32 ( nResponse )
>5040	ArgumentList	nResponse
>5041	Argument	nResponse
>5042	Identifier	nResponse
>5043	Callee	IABS32
>5044	Identifier	IABS32
>5045	Identifier	nStatPosRow
>5046	Condition	 
>5047	BitAndExpression	nStatFlags & STATS_SUM_ABS
>5048	Identifier	STATS_SUM_ABS
>5049	Identifier	nStatFlags
>5050	CompoundStatement	 
>5051	IfStatement	if ( nResponse >= 0 )
>5052	ElseStatement	else
>5053	ExpressionStatement	 
>5054	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>5055	CallExpression	MIN ( nStatNegGrand , nResponse )
>5056	ArgumentList	nStatNegGrand
>5057	Argument	nResponse
>5058	Identifier	nResponse
>5059	Argument	nStatNegGrand
>5060	Identifier	nStatNegGrand
>5061	Callee	MIN
>5062	Identifier	MIN
>5063	Identifier	nStatNegGrand
>5064	ExpressionStatement	 
>5065	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>5066	CallExpression	MAX ( nStatPosGrand , nResponse )
>5067	ArgumentList	nStatPosGrand
>5068	Argument	nResponse
>5069	Identifier	nResponse
>5070	Argument	nStatPosGrand
>5071	Identifier	nStatPosGrand
>5072	Callee	MAX
>5073	Identifier	MAX
>5074	Identifier	nStatPosGrand
>5075	Condition	 
>5076	RelationalExpression	nResponse >= 0
>5077	PrimaryExpression	0
>5078	Identifier	nResponse
>5079	Condition	 
>5080	BitAndExpression	nStatFlags & STATS_MAX_MIN
>5081	Identifier	STATS_MAX_MIN
>5082	Identifier	nStatFlags
>5083	ExpressionStatement	 
>5084	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5085	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5086	ArgumentList	nStatPosGrand
>5087	Argument	IABS32 ( nResponse )
>5088	CallExpression	IABS32 ( nResponse )
>5089	ArgumentList	nResponse
>5090	Argument	nResponse
>5091	Identifier	nResponse
>5092	Callee	IABS32
>5093	Identifier	IABS32
>5094	Argument	nStatPosGrand
>5095	Identifier	nStatPosGrand
>5096	Callee	MAX
>5097	Identifier	MAX
>5098	Identifier	nStatPosGrand
>5099	Condition	 
>5100	BitAndExpression	nStatFlags & STATS_MAX_ABS
>5101	Identifier	STATS_MAX_ABS
>5102	Identifier	nStatFlags
>5103	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>5104	CompoundStatement	 
>5105	ExpressionStatement	 
>5106	AssignmentExpr	pnInputPtr += nInputRowAdvance
>5107	Identifier	nInputRowAdvance
>5108	Identifier	pnInputPtr
>5109	ExpressionStatement	 
>5110	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5111	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5112	UnaryOp	* pnInputPtr ++
>5113	IncDecOp	pnInputPtr ++
>5114	IncDec	++
>5115	Identifier	pnInputPtr
>5116	UnaryOperator	*
>5117	UnaryOp	* pnGaborPtr ++
>5118	IncDecOp	pnGaborPtr ++
>5119	IncDec	++
>5120	Identifier	pnGaborPtr
>5121	UnaryOperator	*
>5122	Identifier	nResponse
>5123	ExpressionStatement	 
>5124	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5125	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5126	UnaryOp	* pnInputPtr ++
>5127	IncDecOp	pnInputPtr ++
>5128	IncDec	++
>5129	Identifier	pnInputPtr
>5130	UnaryOperator	*
>5131	UnaryOp	* pnGaborPtr ++
>5132	IncDecOp	pnGaborPtr ++
>5133	IncDec	++
>5134	Identifier	pnGaborPtr
>5135	UnaryOperator	*
>5136	Identifier	nResponse
>5137	ExpressionStatement	 
>5138	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5139	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5140	UnaryOp	* pnInputPtr ++
>5141	IncDecOp	pnInputPtr ++
>5142	IncDec	++
>5143	Identifier	pnInputPtr
>5144	UnaryOperator	*
>5145	UnaryOp	* pnGaborPtr ++
>5146	IncDecOp	pnGaborPtr ++
>5147	IncDec	++
>5148	Identifier	pnGaborPtr
>5149	UnaryOperator	*
>5150	Identifier	nResponse
>5151	ExpressionStatement	 
>5152	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5153	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5154	UnaryOp	* pnInputPtr ++
>5155	IncDecOp	pnInputPtr ++
>5156	IncDec	++
>5157	Identifier	pnInputPtr
>5158	UnaryOperator	*
>5159	UnaryOp	* pnGaborPtr ++
>5160	IncDecOp	pnGaborPtr ++
>5161	IncDec	++
>5162	Identifier	pnGaborPtr
>5163	UnaryOperator	*
>5164	Identifier	nResponse
>5165	ExpressionStatement	 
>5166	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5167	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5168	UnaryOp	* pnInputPtr ++
>5169	IncDecOp	pnInputPtr ++
>5170	IncDec	++
>5171	Identifier	pnInputPtr
>5172	UnaryOperator	*
>5173	UnaryOp	* pnGaborPtr ++
>5174	IncDecOp	pnGaborPtr ++
>5175	IncDec	++
>5176	Identifier	pnGaborPtr
>5177	UnaryOperator	*
>5178	Identifier	nResponse
>5179	ExpressionStatement	 
>5180	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5181	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5182	UnaryOp	* pnInputPtr ++
>5183	IncDecOp	pnInputPtr ++
>5184	IncDec	++
>5185	Identifier	pnInputPtr
>5186	UnaryOperator	*
>5187	UnaryOp	* pnGaborPtr ++
>5188	IncDecOp	pnGaborPtr ++
>5189	IncDec	++
>5190	Identifier	pnGaborPtr
>5191	UnaryOperator	*
>5192	Identifier	nResponse
>5193	ExpressionStatement	 
>5194	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5195	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5196	UnaryOp	* pnInputPtr ++
>5197	IncDecOp	pnInputPtr ++
>5198	IncDec	++
>5199	Identifier	pnInputPtr
>5200	UnaryOperator	*
>5201	UnaryOp	* pnGaborPtr ++
>5202	IncDecOp	pnGaborPtr ++
>5203	IncDec	++
>5204	Identifier	pnGaborPtr
>5205	UnaryOperator	*
>5206	Identifier	nResponse
>5207	ExpressionStatement	 
>5208	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5209	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5210	UnaryOp	* pnInputPtr ++
>5211	IncDecOp	pnInputPtr ++
>5212	IncDec	++
>5213	Identifier	pnInputPtr
>5214	UnaryOperator	*
>5215	UnaryOp	* pnGaborPtr ++
>5216	IncDecOp	pnGaborPtr ++
>5217	IncDec	++
>5218	Identifier	pnGaborPtr
>5219	UnaryOperator	*
>5220	Identifier	nResponse
>5221	ExpressionStatement	 
>5222	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5223	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5224	UnaryOp	* pnInputPtr ++
>5225	IncDecOp	pnInputPtr ++
>5226	IncDec	++
>5227	Identifier	pnInputPtr
>5228	UnaryOperator	*
>5229	UnaryOp	* pnGaborPtr ++
>5230	IncDecOp	pnGaborPtr ++
>5231	IncDec	++
>5232	Identifier	pnGaborPtr
>5233	UnaryOperator	*
>5234	Identifier	nResponse
>5235	ExpressionStatement	 
>5236	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5237	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5238	UnaryOp	* pnInputPtr ++
>5239	IncDecOp	pnInputPtr ++
>5240	IncDec	++
>5241	Identifier	pnInputPtr
>5242	UnaryOperator	*
>5243	UnaryOp	* pnGaborPtr ++
>5244	IncDecOp	pnGaborPtr ++
>5245	IncDec	++
>5246	Identifier	pnGaborPtr
>5247	UnaryOperator	*
>5248	Identifier	nResponse
>5249	ExpressionStatement	 
>5250	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5251	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5252	UnaryOp	* pnInputPtr ++
>5253	IncDecOp	pnInputPtr ++
>5254	IncDec	++
>5255	Identifier	pnInputPtr
>5256	UnaryOperator	*
>5257	UnaryOp	* pnGaborPtr ++
>5258	IncDecOp	pnGaborPtr ++
>5259	IncDec	++
>5260	Identifier	pnGaborPtr
>5261	UnaryOperator	*
>5262	Identifier	nResponse
>5263	IncDecOp	 
>5264	IncDec	--
>5265	Identifier	jj
>5266	Condition	 
>5267	Identifier	jj
>5268	ForInit	 
>5269	AssignmentExpr	jj = nFilterDim
>5270	Identifier	nFilterDim
>5271	Identifier	jj
>5272	ExpressionStatement	 
>5273	AssignmentExpr	nResponse = 0
>5274	PrimaryExpression	0
>5275	Identifier	nResponse
>5276	ExpressionStatement	 
>5277	AssignmentExpr	pnInputPtr = pnInputRow
>5278	Identifier	pnInputRow
>5279	Identifier	pnInputPtr
>5280	ExpressionStatement	 
>5281	AssignmentExpr	pnGaborPtr = pnFilter
>5282	Identifier	pnFilter
>5283	Identifier	pnGaborPtr
>5284	IncDecOp	 
>5285	IncDec	--
>5286	Identifier	i
>5287	Condition	 
>5288	Identifier	i
>5289	ForInit	 
>5290	AssignmentExpr	i = nOutputCols
>5291	Identifier	nOutputCols
>5292	Identifier	i
>5293	Label	 
>5294	BreakStatement	 
>5295	ForStatement	for ( i = nOutputCols ; i ; i -- )
>5296	CompoundStatement	 
>5297	ExpressionStatement	 
>5298	IncDecOp	pnInputRow ++
>5299	IncDec	++
>5300	Identifier	pnInputRow
>5301	ExpressionStatement	 
>5302	AssignmentExpr	* pnOutputRow ++ = nResponse
>5303	Identifier	nResponse
>5304	UnaryOp	* pnOutputRow ++
>5305	IncDecOp	pnOutputRow ++
>5306	IncDec	++
>5307	Identifier	pnOutputRow
>5308	UnaryOperator	*
>5309	ExpressionStatement	 
>5310	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>5311	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>5312	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>5313	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>5314	Identifier	pDebugOutputEOMB
>5315	CastExpression	( const char * ) pnOutputRow
>5316	Identifier	pnOutputRow
>5317	CastTarget	const char *
>5318	Callee	NTA_ASSERT
>5319	Identifier	NTA_ASSERT
>5320	ExpressionStatement	 
>5321	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>5322	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5323	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5324	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5325	Identifier	pDebugOutputSOMB
>5326	CastExpression	( const char * ) pnOutputRow
>5327	Identifier	pnOutputRow
>5328	CastTarget	const char *
>5329	Callee	NTA_ASSERT
>5330	Identifier	NTA_ASSERT
>5331	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>5332	ElseStatement	else
>5333	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>5334	ElseStatement	else
>5335	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>5336	ElseStatement	else
>5337	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>5338	CompoundStatement	 
>5339	IfStatement	if ( nResponse >= 0 )
>5340	ElseStatement	else
>5341	ExpressionStatement	 
>5342	AssignmentExpr	nStatNegRow -= nResponse
>5343	Identifier	nResponse
>5344	Identifier	nStatNegRow
>5345	ExpressionStatement	 
>5346	AssignmentExpr	nStatPosRow += nResponse
>5347	Identifier	nResponse
>5348	Identifier	nStatPosRow
>5349	Condition	 
>5350	RelationalExpression	nResponse >= 0
>5351	PrimaryExpression	0
>5352	Identifier	nResponse
>5353	Condition	 
>5354	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>5355	Identifier	STATS_SUM_POS_NEG
>5356	Identifier	nStatFlags
>5357	ExpressionStatement	 
>5358	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>5359	CallExpression	IABS32 ( nResponse )
>5360	ArgumentList	nResponse
>5361	Argument	nResponse
>5362	Identifier	nResponse
>5363	Callee	IABS32
>5364	Identifier	IABS32
>5365	Identifier	nStatPosRow
>5366	Condition	 
>5367	BitAndExpression	nStatFlags & STATS_SUM_ABS
>5368	Identifier	STATS_SUM_ABS
>5369	Identifier	nStatFlags
>5370	CompoundStatement	 
>5371	IfStatement	if ( nResponse >= 0 )
>5372	ElseStatement	else
>5373	ExpressionStatement	 
>5374	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>5375	CallExpression	MIN ( nStatNegGrand , nResponse )
>5376	ArgumentList	nStatNegGrand
>5377	Argument	nResponse
>5378	Identifier	nResponse
>5379	Argument	nStatNegGrand
>5380	Identifier	nStatNegGrand
>5381	Callee	MIN
>5382	Identifier	MIN
>5383	Identifier	nStatNegGrand
>5384	ExpressionStatement	 
>5385	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>5386	CallExpression	MAX ( nStatPosGrand , nResponse )
>5387	ArgumentList	nStatPosGrand
>5388	Argument	nResponse
>5389	Identifier	nResponse
>5390	Argument	nStatPosGrand
>5391	Identifier	nStatPosGrand
>5392	Callee	MAX
>5393	Identifier	MAX
>5394	Identifier	nStatPosGrand
>5395	Condition	 
>5396	RelationalExpression	nResponse >= 0
>5397	PrimaryExpression	0
>5398	Identifier	nResponse
>5399	Condition	 
>5400	BitAndExpression	nStatFlags & STATS_MAX_MIN
>5401	Identifier	STATS_MAX_MIN
>5402	Identifier	nStatFlags
>5403	ExpressionStatement	 
>5404	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5405	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5406	ArgumentList	nStatPosGrand
>5407	Argument	IABS32 ( nResponse )
>5408	CallExpression	IABS32 ( nResponse )
>5409	ArgumentList	nResponse
>5410	Argument	nResponse
>5411	Identifier	nResponse
>5412	Callee	IABS32
>5413	Identifier	IABS32
>5414	Argument	nStatPosGrand
>5415	Identifier	nStatPosGrand
>5416	Callee	MAX
>5417	Identifier	MAX
>5418	Identifier	nStatPosGrand
>5419	Condition	 
>5420	BitAndExpression	nStatFlags & STATS_MAX_ABS
>5421	Identifier	STATS_MAX_ABS
>5422	Identifier	nStatFlags
>5423	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>5424	CompoundStatement	 
>5425	ExpressionStatement	 
>5426	AssignmentExpr	pnInputPtr += nInputRowAdvance
>5427	Identifier	nInputRowAdvance
>5428	Identifier	pnInputPtr
>5429	ExpressionStatement	 
>5430	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5431	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5432	UnaryOp	* pnInputPtr ++
>5433	IncDecOp	pnInputPtr ++
>5434	IncDec	++
>5435	Identifier	pnInputPtr
>5436	UnaryOperator	*
>5437	UnaryOp	* pnGaborPtr ++
>5438	IncDecOp	pnGaborPtr ++
>5439	IncDec	++
>5440	Identifier	pnGaborPtr
>5441	UnaryOperator	*
>5442	Identifier	nResponse
>5443	ExpressionStatement	 
>5444	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5445	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5446	UnaryOp	* pnInputPtr ++
>5447	IncDecOp	pnInputPtr ++
>5448	IncDec	++
>5449	Identifier	pnInputPtr
>5450	UnaryOperator	*
>5451	UnaryOp	* pnGaborPtr ++
>5452	IncDecOp	pnGaborPtr ++
>5453	IncDec	++
>5454	Identifier	pnGaborPtr
>5455	UnaryOperator	*
>5456	Identifier	nResponse
>5457	ExpressionStatement	 
>5458	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5459	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5460	UnaryOp	* pnInputPtr ++
>5461	IncDecOp	pnInputPtr ++
>5462	IncDec	++
>5463	Identifier	pnInputPtr
>5464	UnaryOperator	*
>5465	UnaryOp	* pnGaborPtr ++
>5466	IncDecOp	pnGaborPtr ++
>5467	IncDec	++
>5468	Identifier	pnGaborPtr
>5469	UnaryOperator	*
>5470	Identifier	nResponse
>5471	ExpressionStatement	 
>5472	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5473	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5474	UnaryOp	* pnInputPtr ++
>5475	IncDecOp	pnInputPtr ++
>5476	IncDec	++
>5477	Identifier	pnInputPtr
>5478	UnaryOperator	*
>5479	UnaryOp	* pnGaborPtr ++
>5480	IncDecOp	pnGaborPtr ++
>5481	IncDec	++
>5482	Identifier	pnGaborPtr
>5483	UnaryOperator	*
>5484	Identifier	nResponse
>5485	ExpressionStatement	 
>5486	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5487	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5488	UnaryOp	* pnInputPtr ++
>5489	IncDecOp	pnInputPtr ++
>5490	IncDec	++
>5491	Identifier	pnInputPtr
>5492	UnaryOperator	*
>5493	UnaryOp	* pnGaborPtr ++
>5494	IncDecOp	pnGaborPtr ++
>5495	IncDec	++
>5496	Identifier	pnGaborPtr
>5497	UnaryOperator	*
>5498	Identifier	nResponse
>5499	ExpressionStatement	 
>5500	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5501	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5502	UnaryOp	* pnInputPtr ++
>5503	IncDecOp	pnInputPtr ++
>5504	IncDec	++
>5505	Identifier	pnInputPtr
>5506	UnaryOperator	*
>5507	UnaryOp	* pnGaborPtr ++
>5508	IncDecOp	pnGaborPtr ++
>5509	IncDec	++
>5510	Identifier	pnGaborPtr
>5511	UnaryOperator	*
>5512	Identifier	nResponse
>5513	ExpressionStatement	 
>5514	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5515	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5516	UnaryOp	* pnInputPtr ++
>5517	IncDecOp	pnInputPtr ++
>5518	IncDec	++
>5519	Identifier	pnInputPtr
>5520	UnaryOperator	*
>5521	UnaryOp	* pnGaborPtr ++
>5522	IncDecOp	pnGaborPtr ++
>5523	IncDec	++
>5524	Identifier	pnGaborPtr
>5525	UnaryOperator	*
>5526	Identifier	nResponse
>5527	ExpressionStatement	 
>5528	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5529	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5530	UnaryOp	* pnInputPtr ++
>5531	IncDecOp	pnInputPtr ++
>5532	IncDec	++
>5533	Identifier	pnInputPtr
>5534	UnaryOperator	*
>5535	UnaryOp	* pnGaborPtr ++
>5536	IncDecOp	pnGaborPtr ++
>5537	IncDec	++
>5538	Identifier	pnGaborPtr
>5539	UnaryOperator	*
>5540	Identifier	nResponse
>5541	ExpressionStatement	 
>5542	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5543	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5544	UnaryOp	* pnInputPtr ++
>5545	IncDecOp	pnInputPtr ++
>5546	IncDec	++
>5547	Identifier	pnInputPtr
>5548	UnaryOperator	*
>5549	UnaryOp	* pnGaborPtr ++
>5550	IncDecOp	pnGaborPtr ++
>5551	IncDec	++
>5552	Identifier	pnGaborPtr
>5553	UnaryOperator	*
>5554	Identifier	nResponse
>5555	IncDecOp	 
>5556	IncDec	--
>5557	Identifier	jj
>5558	Condition	 
>5559	Identifier	jj
>5560	ForInit	 
>5561	AssignmentExpr	jj = nFilterDim
>5562	Identifier	nFilterDim
>5563	Identifier	jj
>5564	ExpressionStatement	 
>5565	AssignmentExpr	nResponse = 0
>5566	PrimaryExpression	0
>5567	Identifier	nResponse
>5568	ExpressionStatement	 
>5569	AssignmentExpr	pnInputPtr = pnInputRow
>5570	Identifier	pnInputRow
>5571	Identifier	pnInputPtr
>5572	ExpressionStatement	 
>5573	AssignmentExpr	pnGaborPtr = pnFilter
>5574	Identifier	pnFilter
>5575	Identifier	pnGaborPtr
>5576	IncDecOp	 
>5577	IncDec	--
>5578	Identifier	i
>5579	Condition	 
>5580	Identifier	i
>5581	ForInit	 
>5582	AssignmentExpr	i = nOutputCols
>5583	Identifier	nOutputCols
>5584	Identifier	i
>5585	Label	 
>5586	BreakStatement	 
>5587	ForStatement	for ( i = nOutputCols ; i ; i -- )
>5588	CompoundStatement	 
>5589	ExpressionStatement	 
>5590	IncDecOp	pnInputRow ++
>5591	IncDec	++
>5592	Identifier	pnInputRow
>5593	ExpressionStatement	 
>5594	AssignmentExpr	* pnOutputRow ++ = nResponse
>5595	Identifier	nResponse
>5596	UnaryOp	* pnOutputRow ++
>5597	IncDecOp	pnOutputRow ++
>5598	IncDec	++
>5599	Identifier	pnOutputRow
>5600	UnaryOperator	*
>5601	ExpressionStatement	 
>5602	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>5603	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>5604	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>5605	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>5606	Identifier	pDebugOutputEOMB
>5607	CastExpression	( const char * ) pnOutputRow
>5608	Identifier	pnOutputRow
>5609	CastTarget	const char *
>5610	Callee	NTA_ASSERT
>5611	Identifier	NTA_ASSERT
>5612	ExpressionStatement	 
>5613	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>5614	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5615	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5616	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5617	Identifier	pDebugOutputSOMB
>5618	CastExpression	( const char * ) pnOutputRow
>5619	Identifier	pnOutputRow
>5620	CastTarget	const char *
>5621	Callee	NTA_ASSERT
>5622	Identifier	NTA_ASSERT
>5623	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>5624	ElseStatement	else
>5625	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>5626	ElseStatement	else
>5627	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>5628	ElseStatement	else
>5629	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>5630	CompoundStatement	 
>5631	IfStatement	if ( nResponse >= 0 )
>5632	ElseStatement	else
>5633	ExpressionStatement	 
>5634	AssignmentExpr	nStatNegRow -= nResponse
>5635	Identifier	nResponse
>5636	Identifier	nStatNegRow
>5637	ExpressionStatement	 
>5638	AssignmentExpr	nStatPosRow += nResponse
>5639	Identifier	nResponse
>5640	Identifier	nStatPosRow
>5641	Condition	 
>5642	RelationalExpression	nResponse >= 0
>5643	PrimaryExpression	0
>5644	Identifier	nResponse
>5645	Condition	 
>5646	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>5647	Identifier	STATS_SUM_POS_NEG
>5648	Identifier	nStatFlags
>5649	ExpressionStatement	 
>5650	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>5651	CallExpression	IABS32 ( nResponse )
>5652	ArgumentList	nResponse
>5653	Argument	nResponse
>5654	Identifier	nResponse
>5655	Callee	IABS32
>5656	Identifier	IABS32
>5657	Identifier	nStatPosRow
>5658	Condition	 
>5659	BitAndExpression	nStatFlags & STATS_SUM_ABS
>5660	Identifier	STATS_SUM_ABS
>5661	Identifier	nStatFlags
>5662	CompoundStatement	 
>5663	IfStatement	if ( nResponse >= 0 )
>5664	ElseStatement	else
>5665	ExpressionStatement	 
>5666	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>5667	CallExpression	MIN ( nStatNegGrand , nResponse )
>5668	ArgumentList	nStatNegGrand
>5669	Argument	nResponse
>5670	Identifier	nResponse
>5671	Argument	nStatNegGrand
>5672	Identifier	nStatNegGrand
>5673	Callee	MIN
>5674	Identifier	MIN
>5675	Identifier	nStatNegGrand
>5676	ExpressionStatement	 
>5677	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>5678	CallExpression	MAX ( nStatPosGrand , nResponse )
>5679	ArgumentList	nStatPosGrand
>5680	Argument	nResponse
>5681	Identifier	nResponse
>5682	Argument	nStatPosGrand
>5683	Identifier	nStatPosGrand
>5684	Callee	MAX
>5685	Identifier	MAX
>5686	Identifier	nStatPosGrand
>5687	Condition	 
>5688	RelationalExpression	nResponse >= 0
>5689	PrimaryExpression	0
>5690	Identifier	nResponse
>5691	Condition	 
>5692	BitAndExpression	nStatFlags & STATS_MAX_MIN
>5693	Identifier	STATS_MAX_MIN
>5694	Identifier	nStatFlags
>5695	ExpressionStatement	 
>5696	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5697	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5698	ArgumentList	nStatPosGrand
>5699	Argument	IABS32 ( nResponse )
>5700	CallExpression	IABS32 ( nResponse )
>5701	ArgumentList	nResponse
>5702	Argument	nResponse
>5703	Identifier	nResponse
>5704	Callee	IABS32
>5705	Identifier	IABS32
>5706	Argument	nStatPosGrand
>5707	Identifier	nStatPosGrand
>5708	Callee	MAX
>5709	Identifier	MAX
>5710	Identifier	nStatPosGrand
>5711	Condition	 
>5712	BitAndExpression	nStatFlags & STATS_MAX_ABS
>5713	Identifier	STATS_MAX_ABS
>5714	Identifier	nStatFlags
>5715	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>5716	CompoundStatement	 
>5717	ExpressionStatement	 
>5718	AssignmentExpr	pnInputPtr += nInputRowAdvance
>5719	Identifier	nInputRowAdvance
>5720	Identifier	pnInputPtr
>5721	ExpressionStatement	 
>5722	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5723	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5724	UnaryOp	* pnInputPtr ++
>5725	IncDecOp	pnInputPtr ++
>5726	IncDec	++
>5727	Identifier	pnInputPtr
>5728	UnaryOperator	*
>5729	UnaryOp	* pnGaborPtr ++
>5730	IncDecOp	pnGaborPtr ++
>5731	IncDec	++
>5732	Identifier	pnGaborPtr
>5733	UnaryOperator	*
>5734	Identifier	nResponse
>5735	ExpressionStatement	 
>5736	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5737	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5738	UnaryOp	* pnInputPtr ++
>5739	IncDecOp	pnInputPtr ++
>5740	IncDec	++
>5741	Identifier	pnInputPtr
>5742	UnaryOperator	*
>5743	UnaryOp	* pnGaborPtr ++
>5744	IncDecOp	pnGaborPtr ++
>5745	IncDec	++
>5746	Identifier	pnGaborPtr
>5747	UnaryOperator	*
>5748	Identifier	nResponse
>5749	ExpressionStatement	 
>5750	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5751	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5752	UnaryOp	* pnInputPtr ++
>5753	IncDecOp	pnInputPtr ++
>5754	IncDec	++
>5755	Identifier	pnInputPtr
>5756	UnaryOperator	*
>5757	UnaryOp	* pnGaborPtr ++
>5758	IncDecOp	pnGaborPtr ++
>5759	IncDec	++
>5760	Identifier	pnGaborPtr
>5761	UnaryOperator	*
>5762	Identifier	nResponse
>5763	ExpressionStatement	 
>5764	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5765	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5766	UnaryOp	* pnInputPtr ++
>5767	IncDecOp	pnInputPtr ++
>5768	IncDec	++
>5769	Identifier	pnInputPtr
>5770	UnaryOperator	*
>5771	UnaryOp	* pnGaborPtr ++
>5772	IncDecOp	pnGaborPtr ++
>5773	IncDec	++
>5774	Identifier	pnGaborPtr
>5775	UnaryOperator	*
>5776	Identifier	nResponse
>5777	ExpressionStatement	 
>5778	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5779	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5780	UnaryOp	* pnInputPtr ++
>5781	IncDecOp	pnInputPtr ++
>5782	IncDec	++
>5783	Identifier	pnInputPtr
>5784	UnaryOperator	*
>5785	UnaryOp	* pnGaborPtr ++
>5786	IncDecOp	pnGaborPtr ++
>5787	IncDec	++
>5788	Identifier	pnGaborPtr
>5789	UnaryOperator	*
>5790	Identifier	nResponse
>5791	ExpressionStatement	 
>5792	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5793	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5794	UnaryOp	* pnInputPtr ++
>5795	IncDecOp	pnInputPtr ++
>5796	IncDec	++
>5797	Identifier	pnInputPtr
>5798	UnaryOperator	*
>5799	UnaryOp	* pnGaborPtr ++
>5800	IncDecOp	pnGaborPtr ++
>5801	IncDec	++
>5802	Identifier	pnGaborPtr
>5803	UnaryOperator	*
>5804	Identifier	nResponse
>5805	ExpressionStatement	 
>5806	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5807	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5808	UnaryOp	* pnInputPtr ++
>5809	IncDecOp	pnInputPtr ++
>5810	IncDec	++
>5811	Identifier	pnInputPtr
>5812	UnaryOperator	*
>5813	UnaryOp	* pnGaborPtr ++
>5814	IncDecOp	pnGaborPtr ++
>5815	IncDec	++
>5816	Identifier	pnGaborPtr
>5817	UnaryOperator	*
>5818	Identifier	nResponse
>5819	IncDecOp	 
>5820	IncDec	--
>5821	Identifier	jj
>5822	Condition	 
>5823	Identifier	jj
>5824	ForInit	 
>5825	AssignmentExpr	jj = nFilterDim
>5826	Identifier	nFilterDim
>5827	Identifier	jj
>5828	ExpressionStatement	 
>5829	AssignmentExpr	nResponse = 0
>5830	PrimaryExpression	0
>5831	Identifier	nResponse
>5832	ExpressionStatement	 
>5833	AssignmentExpr	pnInputPtr = pnInputRow
>5834	Identifier	pnInputRow
>5835	Identifier	pnInputPtr
>5836	ExpressionStatement	 
>5837	AssignmentExpr	pnGaborPtr = pnFilter
>5838	Identifier	pnFilter
>5839	Identifier	pnGaborPtr
>5840	IncDecOp	 
>5841	IncDec	--
>5842	Identifier	i
>5843	Condition	 
>5844	Identifier	i
>5845	ForInit	 
>5846	AssignmentExpr	i = nOutputCols
>5847	Identifier	nOutputCols
>5848	Identifier	i
>5849	Label	 
>5850	BreakStatement	 
>5851	ForStatement	for ( i = nOutputCols ; i ; i -- )
>5852	CompoundStatement	 
>5853	ExpressionStatement	 
>5854	IncDecOp	pnInputRow ++
>5855	IncDec	++
>5856	Identifier	pnInputRow
>5857	ExpressionStatement	 
>5858	AssignmentExpr	* pnOutputRow ++ = nResponse
>5859	Identifier	nResponse
>5860	UnaryOp	* pnOutputRow ++
>5861	IncDecOp	pnOutputRow ++
>5862	IncDec	++
>5863	Identifier	pnOutputRow
>5864	UnaryOperator	*
>5865	ExpressionStatement	 
>5866	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow < pDebugOutputEOMB )
>5867	ArgumentList	( const char * ) pnOutputRow < pDebugOutputEOMB
>5868	Argument	( const char * ) pnOutputRow < pDebugOutputEOMB
>5869	RelationalExpression	( const char * ) pnOutputRow < pDebugOutputEOMB
>5870	Identifier	pDebugOutputEOMB
>5871	CastExpression	( const char * ) pnOutputRow
>5872	Identifier	pnOutputRow
>5873	CastTarget	const char *
>5874	Callee	NTA_ASSERT
>5875	Identifier	NTA_ASSERT
>5876	ExpressionStatement	 
>5877	CallExpression	NTA_ASSERT ( ( const char * ) pnOutputRow >= pDebugOutputSOMB )
>5878	ArgumentList	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5879	Argument	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5880	RelationalExpression	( const char * ) pnOutputRow >= pDebugOutputSOMB
>5881	Identifier	pDebugOutputSOMB
>5882	CastExpression	( const char * ) pnOutputRow
>5883	Identifier	pnOutputRow
>5884	CastTarget	const char *
>5885	Callee	NTA_ASSERT
>5886	Identifier	NTA_ASSERT
>5887	IfStatement	if ( nStatFlags & STATS_MAX_ABS )
>5888	ElseStatement	else
>5889	IfStatement	if ( nStatFlags & STATS_MAX_MIN )
>5890	ElseStatement	else
>5891	IfStatement	if ( nStatFlags & STATS_SUM_ABS )
>5892	ElseStatement	else
>5893	IfStatement	if ( nStatFlags & STATS_SUM_POS_NEG )
>5894	CompoundStatement	 
>5895	IfStatement	if ( nResponse >= 0 )
>5896	ElseStatement	else
>5897	ExpressionStatement	 
>5898	AssignmentExpr	nStatNegRow -= nResponse
>5899	Identifier	nResponse
>5900	Identifier	nStatNegRow
>5901	ExpressionStatement	 
>5902	AssignmentExpr	nStatPosRow += nResponse
>5903	Identifier	nResponse
>5904	Identifier	nStatPosRow
>5905	Condition	 
>5906	RelationalExpression	nResponse >= 0
>5907	PrimaryExpression	0
>5908	Identifier	nResponse
>5909	Condition	 
>5910	BitAndExpression	nStatFlags & STATS_SUM_POS_NEG
>5911	Identifier	STATS_SUM_POS_NEG
>5912	Identifier	nStatFlags
>5913	ExpressionStatement	 
>5914	AssignmentExpr	nStatPosRow += IABS32 ( nResponse )
>5915	CallExpression	IABS32 ( nResponse )
>5916	ArgumentList	nResponse
>5917	Argument	nResponse
>5918	Identifier	nResponse
>5919	Callee	IABS32
>5920	Identifier	IABS32
>5921	Identifier	nStatPosRow
>5922	Condition	 
>5923	BitAndExpression	nStatFlags & STATS_SUM_ABS
>5924	Identifier	STATS_SUM_ABS
>5925	Identifier	nStatFlags
>5926	CompoundStatement	 
>5927	IfStatement	if ( nResponse >= 0 )
>5928	ElseStatement	else
>5929	ExpressionStatement	 
>5930	AssignmentExpr	nStatNegGrand = MIN ( nStatNegGrand , nResponse )
>5931	CallExpression	MIN ( nStatNegGrand , nResponse )
>5932	ArgumentList	nStatNegGrand
>5933	Argument	nResponse
>5934	Identifier	nResponse
>5935	Argument	nStatNegGrand
>5936	Identifier	nStatNegGrand
>5937	Callee	MIN
>5938	Identifier	MIN
>5939	Identifier	nStatNegGrand
>5940	ExpressionStatement	 
>5941	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , nResponse )
>5942	CallExpression	MAX ( nStatPosGrand , nResponse )
>5943	ArgumentList	nStatPosGrand
>5944	Argument	nResponse
>5945	Identifier	nResponse
>5946	Argument	nStatPosGrand
>5947	Identifier	nStatPosGrand
>5948	Callee	MAX
>5949	Identifier	MAX
>5950	Identifier	nStatPosGrand
>5951	Condition	 
>5952	RelationalExpression	nResponse >= 0
>5953	PrimaryExpression	0
>5954	Identifier	nResponse
>5955	Condition	 
>5956	BitAndExpression	nStatFlags & STATS_MAX_MIN
>5957	Identifier	STATS_MAX_MIN
>5958	Identifier	nStatFlags
>5959	ExpressionStatement	 
>5960	AssignmentExpr	nStatPosGrand = MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5961	CallExpression	MAX ( nStatPosGrand , IABS32 ( nResponse ) )
>5962	ArgumentList	nStatPosGrand
>5963	Argument	IABS32 ( nResponse )
>5964	CallExpression	IABS32 ( nResponse )
>5965	ArgumentList	nResponse
>5966	Argument	nResponse
>5967	Identifier	nResponse
>5968	Callee	IABS32
>5969	Identifier	IABS32
>5970	Argument	nStatPosGrand
>5971	Identifier	nStatPosGrand
>5972	Callee	MAX
>5973	Identifier	MAX
>5974	Identifier	nStatPosGrand
>5975	Condition	 
>5976	BitAndExpression	nStatFlags & STATS_MAX_ABS
>5977	Identifier	STATS_MAX_ABS
>5978	Identifier	nStatFlags
>5979	ForStatement	for ( jj = nFilterDim ; jj ; jj -- )
>5980	CompoundStatement	 
>5981	ExpressionStatement	 
>5982	AssignmentExpr	pnInputPtr += nInputRowAdvance
>5983	Identifier	nInputRowAdvance
>5984	Identifier	pnInputPtr
>5985	ExpressionStatement	 
>5986	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5987	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>5988	UnaryOp	* pnInputPtr ++
>5989	IncDecOp	pnInputPtr ++
>5990	IncDec	++
>5991	Identifier	pnInputPtr
>5992	UnaryOperator	*
>5993	UnaryOp	* pnGaborPtr ++
>5994	IncDecOp	pnGaborPtr ++
>5995	IncDec	++
>5996	Identifier	pnGaborPtr
>5997	UnaryOperator	*
>5998	Identifier	nResponse
>5999	ExpressionStatement	 
>6000	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6001	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6002	UnaryOp	* pnInputPtr ++
>6003	IncDecOp	pnInputPtr ++
>6004	IncDec	++
>6005	Identifier	pnInputPtr
>6006	UnaryOperator	*
>6007	UnaryOp	* pnGaborPtr ++
>6008	IncDecOp	pnGaborPtr ++
>6009	IncDec	++
>6010	Identifier	pnGaborPtr
>6011	UnaryOperator	*
>6012	Identifier	nResponse
>6013	ExpressionStatement	 
>6014	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6015	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6016	UnaryOp	* pnInputPtr ++
>6017	IncDecOp	pnInputPtr ++
>6018	IncDec	++
>6019	Identifier	pnInputPtr
>6020	UnaryOperator	*
>6021	UnaryOp	* pnGaborPtr ++
>6022	IncDecOp	pnGaborPtr ++
>6023	IncDec	++
>6024	Identifier	pnGaborPtr
>6025	UnaryOperator	*
>6026	Identifier	nResponse
>6027	ExpressionStatement	 
>6028	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6029	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6030	UnaryOp	* pnInputPtr ++
>6031	IncDecOp	pnInputPtr ++
>6032	IncDec	++
>6033	Identifier	pnInputPtr
>6034	UnaryOperator	*
>6035	UnaryOp	* pnGaborPtr ++
>6036	IncDecOp	pnGaborPtr ++
>6037	IncDec	++
>6038	Identifier	pnGaborPtr
>6039	UnaryOperator	*
>6040	Identifier	nResponse
>6041	ExpressionStatement	 
>6042	AssignmentExpr	nResponse += ( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6043	MultiplicativeExpression	( * pnGaborPtr ++ ) * ( * pnInputPtr ++ )
>6044	UnaryOp	* pnInputPtr ++
>6045	IncDecOp	pnInputPtr ++
>6046	IncDec	++
>6047	Identifier	pnInputPtr
>6048	UnaryOperator	*
>6049	UnaryOp	* pnGaborPtr ++
>6050	IncDecOp	pnGaborPtr ++
>6051	IncDec	++
>6052	Identifier	pnGaborPtr
>6053	UnaryOperator	*
>6054	Identifier	nResponse
>6055	IncDecOp	 
>6056	IncDec	--
>6057	Identifier	jj
>6058	Condition	 
>6059	Identifier	jj
>6060	ForInit	 
>6061	AssignmentExpr	jj = nFilterDim
>6062	Identifier	nFilterDim
>6063	Identifier	jj
>6064	ExpressionStatement	 
>6065	AssignmentExpr	nResponse = 0
>6066	PrimaryExpression	0
>6067	Identifier	nResponse
>6068	ExpressionStatement	 
>6069	AssignmentExpr	pnInputPtr = pnInputRow
>6070	Identifier	pnInputRow
>6071	Identifier	pnInputPtr
>6072	ExpressionStatement	 
>6073	AssignmentExpr	pnGaborPtr = pnFilter
>6074	Identifier	pnFilter
>6075	Identifier	pnGaborPtr
>6076	IncDecOp	 
>6077	IncDec	--
>6078	Identifier	i
>6079	Condition	 
>6080	Identifier	i
>6081	ForInit	 
>6082	AssignmentExpr	i = nOutputCols
>6083	Identifier	nOutputCols
>6084	Identifier	i
>6085	Label	 
>6086	Condition	 
>6087	Identifier	nFilterDim
>6088	ExpressionStatement	 
>6089	AssignmentExpr	pnInputRow = pnInput
>6090	Identifier	pnInput
>6091	Identifier	pnInputRow
>6092	ExpressionStatement	 
>6093	AssignmentExpr	pnOutputRow += psOutputBox -> nLeft
>6094	PtrMemberAccess	psOutputBox -> nLeft
>6095	Identifier	nLeft
>6096	Identifier	psOutputBox
>6097	Identifier	pnOutputRow
>6098	ExpressionStatement	 
>6099	AssignmentExpr	nStatNegRow = 0
>6100	PrimaryExpression	0
>6101	Identifier	nStatNegRow
>6102	ExpressionStatement	 
>6103	AssignmentExpr	nStatPosRow = 0
>6104	PrimaryExpression	0
>6105	Identifier	nStatPosRow
>6106	ExpressionStatement	 
>6107	AssignmentExpr	pnOutputRow = pnOutput
>6108	Identifier	pnOutput
>6109	Identifier	pnOutputRow
>6110	IncDecOp	 
>6111	IncDec	--
>6112	Identifier	j
>6113	Condition	 
>6114	Identifier	j
>6115	ForInit	 
>6116	AssignmentExpr	j = nOutputRows
>6117	Identifier	nOutputRows
>6118	Identifier	j
>6119	ExpressionStatement	 
>6120	AssignmentExpr	pnOutput += nNumBlankTopRows * nOutputRowStride
>6121	MultiplicativeExpression	nNumBlankTopRows * nOutputRowStride
>6122	Identifier	nOutputRowStride
>6123	Identifier	nNumBlankTopRows
>6124	Identifier	pnOutput
>6125	IdentifierDeclStatement	 
>6126	IdentifierDecl	* pnOutput = pnOutputBase
>6127	AssignmentExpr	* pnOutput = pnOutputBase
>6128	Identifier	pnOutputBase
>6129	Identifier	pnOutputBase
>6130	Identifier	pnOutput
>6131	IdentifierDeclType	int *
>6132	IdentifierDeclStatement	 
>6133	IdentifierDecl	* pnFilter = pnFilterBase
>6134	AssignmentExpr	* pnFilter = pnFilterBase
>6135	Identifier	pnFilterBase
>6136	Identifier	pnFilterBase
>6137	Identifier	pnFilter
>6138	IdentifierDeclType	const int *
>6139	ExpressionStatement	 
>6140	AssignmentExpr	pnInput = pnInputBase + nInputRowStride * psInputBox -> nTop + psInputBox -> nLeft
>6141	AdditiveExpression	pnInputBase + nInputRowStride * psInputBox -> nTop + psInputBox -> nLeft
>6142	AdditiveExpression	nInputRowStride * psInputBox -> nTop + psInputBox -> nLeft
>6143	PtrMemberAccess	psInputBox -> nLeft
>6144	Identifier	nLeft
>6145	Identifier	psInputBox
>6146	MultiplicativeExpression	nInputRowStride * psInputBox -> nTop
>6147	PtrMemberAccess	psInputBox -> nTop
>6148	Identifier	nTop
>6149	Identifier	psInputBox
>6150	Identifier	nInputRowStride
>6151	Identifier	pnInputBase
>6152	Identifier	pnInput
>6153	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_PERORIENT )
>6154	CompoundStatement	 
>6155	ExpressionStatement	 
>6156	AssignmentExpr	nStatNegGrand = 0
>6157	PrimaryExpression	0
>6158	Identifier	nStatNegGrand
>6159	ExpressionStatement	 
>6160	AssignmentExpr	nStatPosGrand = 0
>6161	PrimaryExpression	0
>6162	Identifier	nStatPosGrand
>6163	Condition	 
>6164	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_PERORIENT
>6165	Identifier	NORMALIZE_MODE_PERORIENT
>6166	Identifier	eNormalizeMode
>6167	IncDecOp	 
>6168	IncDec	++
>6169	Identifier	nFilterIndex
>6170	Condition	 
>6171	RelationalExpression	nFilterIndex < GABORSET_PLANES ( psGaborBank )
>6172	CallExpression	GABORSET_PLANES ( psGaborBank )
>6173	ArgumentList	psGaborBank
>6174	Argument	psGaborBank
>6175	Identifier	psGaborBank
>6176	Callee	GABORSET_PLANES
>6177	Identifier	GABORSET_PLANES
>6178	Identifier	nFilterIndex
>6179	ForInit	 
>6180	AssignmentExpr	nFilterIndex = 0
>6181	PrimaryExpression	0
>6182	Identifier	nFilterIndex
>6183	ExpressionStatement	 
>6184	AssignmentExpr	nStatNegGrand = 0
>6185	PrimaryExpression	0
>6186	Identifier	nStatNegGrand
>6187	ExpressionStatement	 
>6188	AssignmentExpr	nStatPosGrand = 0
>6189	PrimaryExpression	0
>6190	Identifier	nStatPosGrand
>6191	IdentifierDeclStatement	 
>6192	IdentifierDecl	nNumBlankTopRows = psOutputBox -> nTop
>6193	AssignmentExpr	nNumBlankTopRows = psOutputBox -> nTop
>6194	PtrMemberAccess	psOutputBox -> nTop
>6195	Identifier	nTop
>6196	Identifier	psOutputBox
>6197	Identifier	nNumBlankTopRows
>6198	Identifier	nNumBlankTopRows
>6199	IdentifierDeclType	int
>6200	ExpressionStatement	 
>6201	CallExpression	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) % 4 == 0 )
>6202	ArgumentList	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>6203	Argument	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>6204	EqualityExpression	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>6205	PrimaryExpression	0
>6206	MultiplicativeExpression	IMAGESET_COLS ( psBufferOut ) % 4
>6207	PrimaryExpression	4
>6208	CallExpression	IMAGESET_COLS ( psBufferOut )
>6209	ArgumentList	psBufferOut
>6210	Argument	psBufferOut
>6211	Identifier	psBufferOut
>6212	Callee	IMAGESET_COLS
>6213	Identifier	IMAGESET_COLS
>6214	Callee	NTA_ASSERT
>6215	Identifier	NTA_ASSERT
>6216	IdentifierDeclStatement	 
>6217	IdentifierDecl	nOutputCols = ( psOutputBox -> nRight - psOutputBox -> nLeft )
>6218	AssignmentExpr	nOutputCols = ( psOutputBox -> nRight - psOutputBox -> nLeft )
>6219	AdditiveExpression	psOutputBox -> nRight - psOutputBox -> nLeft
>6220	PtrMemberAccess	psOutputBox -> nLeft
>6221	Identifier	nLeft
>6222	Identifier	psOutputBox
>6223	PtrMemberAccess	psOutputBox -> nRight
>6224	Identifier	nRight
>6225	Identifier	psOutputBox
>6226	Identifier	nOutputCols
>6227	Identifier	nOutputCols
>6228	IdentifierDeclType	int
>6229	IdentifierDeclStatement	 
>6230	IdentifierDecl	nOutputRows = ( psOutputBox -> nBottom - psOutputBox -> nTop )
>6231	AssignmentExpr	nOutputRows = ( psOutputBox -> nBottom - psOutputBox -> nTop )
>6232	AdditiveExpression	psOutputBox -> nBottom - psOutputBox -> nTop
>6233	PtrMemberAccess	psOutputBox -> nTop
>6234	Identifier	nTop
>6235	Identifier	psOutputBox
>6236	PtrMemberAccess	psOutputBox -> nBottom
>6237	Identifier	nBottom
>6238	Identifier	psOutputBox
>6239	Identifier	nOutputRows
>6240	Identifier	nOutputRows
>6241	IdentifierDeclType	int
>6242	IdentifierDeclStatement	 
>6243	IdentifierDecl	nInputRowAdvance = nInputRowStride - nFilterDim
>6244	AssignmentExpr	nInputRowAdvance = nInputRowStride - nFilterDim
>6245	AdditiveExpression	nInputRowStride - nFilterDim
>6246	Identifier	nFilterDim
>6247	Identifier	nInputRowStride
>6248	Identifier	nInputRowAdvance
>6249	Identifier	nInputRowAdvance
>6250	IdentifierDeclType	int
>6251	IdentifierDeclStatement	 
>6252	IdentifierDecl	nInputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>6253	AssignmentExpr	nInputRowStride = IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>6254	MultiplicativeExpression	IMAGE_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>6255	SizeofExpr	sizeof ( * pnInputBase )
>6256	UnaryOp	* pnInputBase
>6257	Identifier	pnInputBase
>6258	UnaryOperator	*
>6259	Sizeof	sizeof
>6260	CallExpression	IMAGE_ROWSTRIDE ( psBufferIn )
>6261	ArgumentList	psBufferIn
>6262	Argument	psBufferIn
>6263	Identifier	psBufferIn
>6264	Callee	IMAGE_ROWSTRIDE
>6265	Identifier	IMAGE_ROWSTRIDE
>6266	Identifier	nInputRowStride
>6267	Identifier	nInputRowStride
>6268	IdentifierDeclType	int
>6269	IdentifierDeclStatement	 
>6270	IdentifierDecl	* pnInputBase = ( const int * ) psBufferIn -> pData
>6271	AssignmentExpr	* pnInputBase = ( const int * ) psBufferIn -> pData
>6272	CastExpression	( const int * ) psBufferIn -> pData
>6273	PtrMemberAccess	psBufferIn -> pData
>6274	Identifier	pData
>6275	Identifier	psBufferIn
>6276	CastTarget	const int *
>6277	Identifier	pnInputBase
>6278	Identifier	pnInputBase
>6279	IdentifierDeclType	const int *
>6280	IdentifierDeclStatement	 
>6281	IdentifierDecl	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>6282	AssignmentExpr	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>6283	AdditiveExpression	pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>6284	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psBufferOut ) * IMAGESET_PLANES ( psBufferOut )
>6285	CallExpression	IMAGESET_PLANES ( psBufferOut )
>6286	ArgumentList	psBufferOut
>6287	Argument	psBufferOut
>6288	Identifier	psBufferOut
>6289	Callee	IMAGESET_PLANES
>6290	Identifier	IMAGESET_PLANES
>6291	CallExpression	IMAGESET_PLANESTRIDE ( psBufferOut )
>6292	ArgumentList	psBufferOut
>6293	Argument	psBufferOut
>6294	Identifier	psBufferOut
>6295	Callee	IMAGESET_PLANESTRIDE
>6296	Identifier	IMAGESET_PLANESTRIDE
>6297	Identifier	pDebugOutputSOMB
>6298	Identifier	pDebugOutputEOMB
>6299	Identifier	pDebugOutputEOMB
>6300	IdentifierDeclType	const char *
>6301	IdentifierDeclStatement	 
>6302	IdentifierDecl	* pDebugOutputSOMB = ( const char * ) ( psBufferOut -> pData )
>6303	AssignmentExpr	* pDebugOutputSOMB = ( const char * ) ( psBufferOut -> pData )
>6304	CastExpression	( const char * ) ( psBufferOut -> pData )
>6305	PtrMemberAccess	psBufferOut -> pData
>6306	Identifier	pData
>6307	Identifier	psBufferOut
>6308	CastTarget	const char *
>6309	Identifier	pDebugOutputSOMB
>6310	Identifier	pDebugOutputSOMB
>6311	IdentifierDeclType	const char *
>6312	IdentifierDeclStatement	 
>6313	IdentifierDecl	nOutputRowStride = IMAGESET_ROWSTRIDE ( psBufferOut ) / sizeof ( * pnOutputBase )
>6314	AssignmentExpr	nOutputRowStride = IMAGESET_ROWSTRIDE ( psBufferOut ) / sizeof ( * pnOutputBase )
>6315	MultiplicativeExpression	IMAGESET_ROWSTRIDE ( psBufferOut ) / sizeof ( * pnOutputBase )
>6316	SizeofExpr	sizeof ( * pnOutputBase )
>6317	UnaryOp	* pnOutputBase
>6318	Identifier	pnOutputBase
>6319	UnaryOperator	*
>6320	Sizeof	sizeof
>6321	CallExpression	IMAGESET_ROWSTRIDE ( psBufferOut )
>6322	ArgumentList	psBufferOut
>6323	Argument	psBufferOut
>6324	Identifier	psBufferOut
>6325	Callee	IMAGESET_ROWSTRIDE
>6326	Identifier	IMAGESET_ROWSTRIDE
>6327	Identifier	nOutputRowStride
>6328	Identifier	nOutputRowStride
>6329	IdentifierDeclType	int
>6330	IdentifierDeclStatement	 
>6331	IdentifierDecl	* pnOutputBase = ( int * ) psBufferOut -> pData
>6332	AssignmentExpr	* pnOutputBase = ( int * ) psBufferOut -> pData
>6333	CastExpression	( int * ) psBufferOut -> pData
>6334	PtrMemberAccess	psBufferOut -> pData
>6335	Identifier	pData
>6336	Identifier	psBufferOut
>6337	CastTarget	int *
>6338	Identifier	pnOutputBase
>6339	Identifier	pnOutputBase
>6340	IdentifierDeclType	int *
>6341	IdentifierDeclStatement	 
>6342	IdentifierDecl	* pnFilterBase = ( const int * ) psGaborBank -> pData
>6343	AssignmentExpr	* pnFilterBase = ( const int * ) psGaborBank -> pData
>6344	CastExpression	( const int * ) psGaborBank -> pData
>6345	PtrMemberAccess	psGaborBank -> pData
>6346	Identifier	pData
>6347	Identifier	psGaborBank
>6348	CastTarget	const int *
>6349	Identifier	pnFilterBase
>6350	Identifier	pnFilterBase
>6351	IdentifierDeclType	const int *
>6352	IdentifierDeclStatement	 
>6353	IdentifierDecl	nFilterDim = IMAGESET_ROWS ( psGaborBank )
>6354	AssignmentExpr	nFilterDim = IMAGESET_ROWS ( psGaborBank )
>6355	CallExpression	IMAGESET_ROWS ( psGaborBank )
>6356	ArgumentList	psGaborBank
>6357	Argument	psGaborBank
>6358	Identifier	psGaborBank
>6359	Callee	IMAGESET_ROWS
>6360	Identifier	IMAGESET_ROWS
>6361	Identifier	nFilterDim
>6362	Identifier	nFilterDim
>6363	IdentifierDeclType	int
>6364	ExpressionStatement	 
>6365	CallExpression	NTA_ASSERT ( IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank ) )
>6366	ArgumentList	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>6367	Argument	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>6368	EqualityExpression	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>6369	CallExpression	IMAGESET_COLS ( psGaborBank )
>6370	ArgumentList	psGaborBank
>6371	Argument	psGaborBank
>6372	Identifier	psGaborBank
>6373	Callee	IMAGESET_COLS
>6374	Identifier	IMAGESET_COLS
>6375	CallExpression	IMAGESET_ROWS ( psGaborBank )
>6376	ArgumentList	psGaborBank
>6377	Argument	psGaborBank
>6378	Identifier	psGaborBank
>6379	Callee	IMAGESET_ROWS
>6380	Identifier	IMAGESET_ROWS
>6381	Callee	NTA_ASSERT
>6382	Identifier	NTA_ASSERT
>6383	SwitchStatement	switch ( eNormalizeMethod )
>6384	CompoundStatement	 
>6385	ExpressionStatement	 
>6386	CallExpression	NTA_ASSERT ( false )
>6387	ArgumentList	false
>6388	Argument	false
>6389	Identifier	false
>6390	Callee	NTA_ASSERT
>6391	Identifier	NTA_ASSERT
>6392	Label	 
>6393	Identifier	default
>6394	BreakStatement	 
>6395	Label	 
>6396	Identifier	NORMALIZE_METHOD_FIXED
>6397	BreakStatement	 
>6398	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_GLOBAL )
>6399	ExpressionStatement	 
>6400	AssignmentExpr	nNumPixels *= GABORSET_PLANES ( psGaborBank )
>6401	CallExpression	GABORSET_PLANES ( psGaborBank )
>6402	ArgumentList	psGaborBank
>6403	Argument	psGaborBank
>6404	Identifier	psGaborBank
>6405	Callee	GABORSET_PLANES
>6406	Identifier	GABORSET_PLANES
>6407	Identifier	nNumPixels
>6408	Condition	 
>6409	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_GLOBAL
>6410	Identifier	NORMALIZE_MODE_GLOBAL
>6411	Identifier	eNormalizeMode
>6412	ExpressionStatement	 
>6413	AssignmentExpr	nNumPixels = ( psOutputBox -> nRight - psOutputBox -> nLeft ) * ( psOutputBox -> nBottom - psOutputBox \
>6414	MultiplicativeExpression	( psOutputBox -> nRight - psOutputBox -> nLeft ) * ( psOutputBox -> nBottom - psOutputBox -> nTop )
>6415	AdditiveExpression	psOutputBox -> nBottom - psOutputBox -> nTop
>6416	PtrMemberAccess	psOutputBox -> nTop
>6417	Identifier	nTop
>6418	Identifier	psOutputBox
>6419	PtrMemberAccess	psOutputBox -> nBottom
>6420	Identifier	nBottom
>6421	Identifier	psOutputBox
>6422	AdditiveExpression	psOutputBox -> nRight - psOutputBox -> nLeft
>6423	PtrMemberAccess	psOutputBox -> nLeft
>6424	Identifier	nLeft
>6425	Identifier	psOutputBox
>6426	PtrMemberAccess	psOutputBox -> nRight
>6427	Identifier	nRight
>6428	Identifier	psOutputBox
>6429	Identifier	nNumPixels
>6430	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>6431	ElseStatement	else
>6432	CompoundStatement	 
>6433	ExpressionStatement	 
>6434	AssignmentExpr	nStatFlags |= STATS_SUM_POS_NEG
>6435	Identifier	STATS_SUM_POS_NEG
>6436	Identifier	nStatFlags
>6437	ExpressionStatement	 
>6438	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>6439	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>6440	Argument	ePhaseMode == PHASE_MODE_DUAL
>6441	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>6442	Identifier	PHASE_MODE_DUAL
>6443	Identifier	ePhaseMode
>6444	Callee	NTA_ASSERT
>6445	Identifier	NTA_ASSERT
>6446	ExpressionStatement	 
>6447	AssignmentExpr	nStatFlags |= STATS_SUM_ABS
>6448	Identifier	STATS_SUM_ABS
>6449	Identifier	nStatFlags
>6450	Condition	 
>6451	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>6452	Identifier	PHASE_MODE_SINGLE
>6453	Identifier	ePhaseMode
>6454	Label	 
>6455	Identifier	NORMALIZE_METHOD_MEANPOWER
>6456	Label	 
>6457	Identifier	NORMALIZE_METHOD_MEAN
>6458	BreakStatement	 
>6459	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>6460	ElseStatement	else
>6461	CompoundStatement	 
>6462	ExpressionStatement	 
>6463	AssignmentExpr	nStatFlags |= STATS_MAX_MIN
>6464	Identifier	STATS_MAX_MIN
>6465	Identifier	nStatFlags
>6466	ExpressionStatement	 
>6467	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>6468	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>6469	Argument	ePhaseMode == PHASE_MODE_DUAL
>6470	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>6471	Identifier	PHASE_MODE_DUAL
>6472	Identifier	ePhaseMode
>6473	Callee	NTA_ASSERT
>6474	Identifier	NTA_ASSERT
>6475	ExpressionStatement	 
>6476	AssignmentExpr	nStatFlags |= STATS_MAX_ABS
>6477	Identifier	STATS_MAX_ABS
>6478	Identifier	nStatFlags
>6479	Condition	 
>6480	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>6481	Identifier	PHASE_MODE_SINGLE
>6482	Identifier	ePhaseMode
>6483	Label	 
>6484	Identifier	NORMALIZE_METHOD_MAXPOWER
>6485	Label	 
>6486	Identifier	NORMALIZE_METHOD_MAX
>6487	Condition	 
>6488	Identifier	eNormalizeMethod
>6489	IdentifierDeclStatement	 
>6490	IdentifierDecl	nStatFlags = STATS_NONE
>6491	AssignmentExpr	nStatFlags = STATS_NONE
>6492	Identifier	STATS_NONE
>6493	Identifier	STATS_NONE
>6494	Identifier	nStatFlags
>6495	IdentifierDeclType	unsigned int
>6496	IdentifierDeclStatement	 
>6497	IdentifierDecl	nStatNegRow
>6498	Identifier	nStatNegRow
>6499	IdentifierDeclType	int
>6500	IdentifierDecl	nStatPosRow
>6501	Identifier	nStatPosRow
>6502	IdentifierDeclType	int
>6503	IdentifierDeclStatement	 
>6504	IdentifierDecl	nStatNegGrand
>6505	Identifier	nStatNegGrand
>6506	IdentifierDeclType	int
>6507	IdentifierDecl	nStatPosGrand
>6508	Identifier	nStatPosGrand
>6509	IdentifierDeclType	int
>6510	IdentifierDeclStatement	 
>6511	IdentifierDecl	* pnOutputRow = NULL
>6512	AssignmentExpr	* pnOutputRow = NULL
>6513	Identifier	NULL
>6514	Identifier	NULL
>6515	Identifier	pnOutputRow
>6516	IdentifierDeclType	int *
>6517	IdentifierDeclStatement	 
>6518	IdentifierDecl	* pnGaborPtr = NULL
>6519	AssignmentExpr	* pnGaborPtr = NULL
>6520	Identifier	NULL
>6521	Identifier	NULL
>6522	Identifier	pnGaborPtr
>6523	IdentifierDeclType	const int *
>6524	IdentifierDeclStatement	 
>6525	IdentifierDecl	* pnInputPtr = NULL
>6526	AssignmentExpr	* pnInputPtr = NULL
>6527	Identifier	NULL
>6528	Identifier	NULL
>6529	Identifier	pnInputPtr
>6530	IdentifierDeclType	const int *
>6531	IdentifierDeclStatement	 
>6532	IdentifierDecl	* pnInputRow = NULL
>6533	AssignmentExpr	* pnInputRow = NULL
>6534	Identifier	NULL
>6535	Identifier	NULL
>6536	Identifier	pnInputRow
>6537	IdentifierDeclType	const int *
>6538	IdentifierDeclStatement	 
>6539	IdentifierDecl	* pnInput = NULL
>6540	AssignmentExpr	* pnInput = NULL
>6541	Identifier	NULL
>6542	Identifier	NULL
>6543	Identifier	pnInput
>6544	IdentifierDeclType	const int *
>6545	IdentifierDeclStatement	 
>6546	IdentifierDecl	nNumPixels = 0
>6547	AssignmentExpr	nNumPixels = 0
>6548	PrimaryExpression	0
>6549	Identifier	nNumPixels
>6550	Identifier	nNumPixels
>6551	IdentifierDeclType	int
>6552	IdentifierDeclStatement	 
>6553	IdentifierDecl	nResponse
>6554	Identifier	nResponse
>6555	IdentifierDeclType	int
>6556	IdentifierDeclStatement	 
>6557	IdentifierDecl	nFilterIndex
>6558	Identifier	nFilterIndex
>6559	IdentifierDeclType	int
>6560	IdentifierDeclStatement	 
>6561	IdentifierDecl	jj
>6562	Identifier	jj
>6563	IdentifierDeclType	int
>6564	IdentifierDecl	j
>6565	Identifier	j
>6566	IdentifierDeclType	int
>6567	IdentifierDecl	i
>6568	Identifier	i
>6569	IdentifierDeclType	int
>6665	FunctionDef	_doConvolution (const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psBufferOut , const NUMPY_ARRAY * psGaborBank , \
>6666	ParameterList	const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psBufferOut , const NUMPY_ARRAY * psGaborBank , const NUMPY_\
>6667	Parameter	 
>6668	Identifier	anStatNegGrand
>6669	ParameterType	unsigned int [ ]
>6670	Parameter	 
>6671	Identifier	anStatPosGrand
>6672	ParameterType	unsigned int [ ]
>6673	Parameter	 
>6674	Identifier	eNormalizeMode
>6675	ParameterType	NORMALIZE_MODE
>6676	Parameter	 
>6677	Identifier	eNormalizeMethod
>6678	ParameterType	NORMALIZE_METHOD
>6679	Parameter	 
>6680	Identifier	ePhaseMode
>6681	ParameterType	PHASE_MODE
>6682	Parameter	 
>6683	Identifier	psOutputBox
>6684	ParameterType	const BBOX *
>6685	Parameter	 
>6686	Identifier	psInputBox
>6687	ParameterType	const BBOX *
>6688	Parameter	 
>6689	Identifier	psAlpha
>6690	ParameterType	const NUMPY_ARRAY *
>6691	Parameter	 
>6692	Identifier	psGaborBank
>6693	ParameterType	const NUMPY_ARRAY *
>6694	Parameter	 
>6695	Identifier	psBufferOut
>6696	ParameterType	const NUMPY_ARRAY *
>6697	Parameter	 
>6698	Identifier	psBufferIn
>6699	ParameterType	const NUMPY_ARRAY *
>6700	ReturnType	void
>6701	CompoundStatement	 
>6702	IfStatement	if ( psAlpha )
>6703	ElseStatement	else
>6704	ExpressionStatement	 
>6705	CallExpression	_doConvolution_bbox ( psBufferIn , psBufferOut , psGaborBank , psInputBox , psOutputBox , ePhaseMode , eNormalizeMethod , \
>6706	ArgumentList	psBufferIn
>6707	Argument	anStatNegGrand
>6708	Identifier	anStatNegGrand
>6709	Argument	anStatPosGrand
>6710	Identifier	anStatPosGrand
>6711	Argument	eNormalizeMode
>6712	Identifier	eNormalizeMode
>6713	Argument	eNormalizeMethod
>6714	Identifier	eNormalizeMethod
>6715	Argument	ePhaseMode
>6716	Identifier	ePhaseMode
>6717	Argument	psOutputBox
>6718	Identifier	psOutputBox
>6719	Argument	psInputBox
>6720	Identifier	psInputBox
>6721	Argument	psGaborBank
>6722	Identifier	psGaborBank
>6723	Argument	psBufferOut
>6724	Identifier	psBufferOut
>6725	Argument	psBufferIn
>6726	Identifier	psBufferIn
>6727	Callee	_doConvolution_bbox
>6728	Identifier	_doConvolution_bbox
>6729	ExpressionStatement	 
>6730	CallExpression	_doConvolution_alpha ( psBufferIn , psBufferOut , psGaborBank , psAlpha , psInputBox , psOutputBox , ePhaseMode , \
>6731	ArgumentList	psBufferIn
>6732	Argument	anStatNegGrand
>6733	Identifier	anStatNegGrand
>6734	Argument	anStatPosGrand
>6735	Identifier	anStatPosGrand
>6736	Argument	eNormalizeMode
>6737	Identifier	eNormalizeMode
>6738	Argument	eNormalizeMethod
>6739	Identifier	eNormalizeMethod
>6740	Argument	ePhaseMode
>6741	Identifier	ePhaseMode
>6742	Argument	psOutputBox
>6743	Identifier	psOutputBox
>6744	Argument	psInputBox
>6745	Identifier	psInputBox
>6746	Argument	psAlpha
>6747	Identifier	psAlpha
>6748	Argument	psGaborBank
>6749	Identifier	psGaborBank
>6750	Argument	psBufferOut
>6751	Identifier	psBufferOut
>6752	Argument	psBufferIn
>6753	Identifier	psBufferIn
>6754	Callee	_doConvolution_alpha
>6755	Identifier	_doConvolution_alpha
>6756	Condition	 
>6757	Identifier	psAlpha
>6772	FunctionDef	_computeGains (float fGain , unsigned int nStatPosGrand , unsigned int nStatNegGrand , PHASE_MODE ePhaseMode , PHASENORM_\
>6773	ParameterList	float fGain , unsigned int nStatPosGrand , unsigned int nStatNegGrand , PHASE_MODE ePhaseMode , PHASENORM_MODE ePhaseNormMode , \
>6774	Parameter	 
>6775	Identifier	fGainNeg
>6776	ParameterType	float &
>6777	Parameter	 
>6778	Identifier	fGainPos
>6779	ParameterType	float &
>6780	Parameter	 
>6781	Identifier	ePhaseNormMode
>6782	ParameterType	PHASENORM_MODE
>6783	Parameter	 
>6784	Identifier	ePhaseMode
>6785	ParameterType	PHASE_MODE
>6786	Parameter	 
>6787	Identifier	nStatNegGrand
>6788	ParameterType	unsigned int
>6789	Parameter	 
>6790	Identifier	nStatPosGrand
>6791	ParameterType	unsigned int
>6792	Parameter	 
>6793	Identifier	fGain
>6794	ParameterType	float
>6795	ReturnType	void
>6796	CompoundStatement	 
>6797	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>6798	CompoundStatement	 
>6799	IfStatement	if ( ePhaseNormMode == PHASENORM_MODE_INDIV )
>6800	ElseStatement	else
>6801	CompoundStatement	 
>6802	ExpressionStatement	 
>6803	CallExpression	NTA_ASSERT ( fGainNeg == - fGainPos )
>6804	ArgumentList	fGainNeg == - fGainPos
>6805	Argument	fGainNeg == - fGainPos
>6806	EqualityExpression	fGainNeg == - fGainPos
>6807	UnaryOp	- fGainPos
>6808	Identifier	fGainPos
>6809	UnaryOperator	-
>6810	Identifier	fGainNeg
>6811	Callee	NTA_ASSERT
>6812	Identifier	NTA_ASSERT
>6813	IfStatement	if ( nStatNegGrand > nStatPosGrand )
>6814	ElseStatement	else
>6815	ExpressionStatement	 
>6816	AssignmentExpr	fGainNeg = - fGainPos
>6817	UnaryOp	- fGainPos
>6818	Identifier	fGainPos
>6819	UnaryOperator	-
>6820	Identifier	fGainNeg
>6821	CompoundStatement	 
>6822	ExpressionStatement	 
>6823	AssignmentExpr	fGainPos = - fGainNeg
>6824	UnaryOp	- fGainNeg
>6825	Identifier	fGainNeg
>6826	UnaryOperator	-
>6827	Identifier	fGainPos
>6828	ExpressionStatement	 
>6829	AssignmentExpr	fGainNeg = - fGain / float ( nStatNegGrand )
>6830	MultiplicativeExpression	- fGain / float ( nStatNegGrand )
>6831	CallExpression	float ( nStatNegGrand )
>6832	ArgumentList	nStatNegGrand
>6833	Argument	nStatNegGrand
>6834	Identifier	nStatNegGrand
>6835	Callee	float
>6836	Identifier	float
>6837	UnaryOp	- fGain
>6838	Identifier	fGain
>6839	UnaryOperator	-
>6840	Identifier	fGainNeg
>6841	Condition	 
>6842	RelationalExpression	nStatNegGrand > nStatPosGrand
>6843	Identifier	nStatPosGrand
>6844	Identifier	nStatNegGrand
>6845	ExpressionStatement	 
>6846	CallExpression	NTA_ASSERT ( ePhaseNormMode == PHASENORM_MODE_COMBO )
>6847	ArgumentList	ePhaseNormMode == PHASENORM_MODE_COMBO
>6848	Argument	ePhaseNormMode == PHASENORM_MODE_COMBO
>6849	EqualityExpression	ePhaseNormMode == PHASENORM_MODE_COMBO
>6850	Identifier	PHASENORM_MODE_COMBO
>6851	Identifier	ePhaseNormMode
>6852	Callee	NTA_ASSERT
>6853	Identifier	NTA_ASSERT
>6854	ExpressionStatement	 
>6855	AssignmentExpr	fGainNeg = - fGain / float ( nStatNegGrand )
>6856	MultiplicativeExpression	- fGain / float ( nStatNegGrand )
>6857	CallExpression	float ( nStatNegGrand )
>6858	ArgumentList	nStatNegGrand
>6859	Argument	nStatNegGrand
>6860	Identifier	nStatNegGrand
>6861	Callee	float
>6862	Identifier	float
>6863	UnaryOp	- fGain
>6864	Identifier	fGain
>6865	UnaryOperator	-
>6866	Identifier	fGainNeg
>6867	Condition	 
>6868	EqualityExpression	ePhaseNormMode == PHASENORM_MODE_INDIV
>6869	Identifier	PHASENORM_MODE_INDIV
>6870	Identifier	ePhaseNormMode
>6871	ExpressionStatement	 
>6872	CallExpression	NTA_ASSERT ( nStatNegGrand > 0 )
>6873	ArgumentList	nStatNegGrand > 0
>6874	Argument	nStatNegGrand > 0
>6875	RelationalExpression	nStatNegGrand > 0
>6876	PrimaryExpression	0
>6877	Identifier	nStatNegGrand
>6878	Callee	NTA_ASSERT
>6879	Identifier	NTA_ASSERT
>6880	Condition	 
>6881	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>6882	Identifier	PHASE_MODE_DUAL
>6883	Identifier	ePhaseMode
>6884	ExpressionStatement	 
>6885	AssignmentExpr	fGainPos /= float ( nStatPosGrand )
>6886	CallExpression	float ( nStatPosGrand )
>6887	ArgumentList	nStatPosGrand
>6888	Argument	nStatPosGrand
>6889	Identifier	nStatPosGrand
>6890	Callee	float
>6891	Identifier	float
>6892	Identifier	fGainPos
>6893	ExpressionStatement	 
>6894	CallExpression	NTA_ASSERT ( nStatPosGrand > 0 )
>6895	ArgumentList	nStatPosGrand > 0
>6896	Argument	nStatPosGrand > 0
>6897	RelationalExpression	nStatPosGrand > 0
>6898	PrimaryExpression	0
>6899	Identifier	nStatPosGrand
>6900	Callee	NTA_ASSERT
>6901	Identifier	NTA_ASSERT
>6902	ExpressionStatement	 
>6903	AssignmentExpr	fGainPos = fGain
>6904	Identifier	fGain
>6905	Identifier	fGainPos
>6920	FunctionDef	_postProcess (const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psOutput , const BBOX * psBox , PHASE_MODE ePhaseMode , \
>6921	ParameterList	const NUMPY_ARRAY * psBufferIn , const NUMPY_ARRAY * psOutput , const BBOX * psBox , PHASE_MODE ePhaseMode , int \
>6922	Parameter	 
>6923	Identifier	fPostProcScalar
>6924	ParameterType	float
>6925	Parameter	 
>6926	Identifier	psPostProcLUT
>6927	ParameterType	const NUMPY_ARRAY *
>6928	Parameter	 
>6929	Identifier	anStatNegGrand
>6930	ParameterType	const unsigned int [ ]
>6931	Parameter	 
>6932	Identifier	anStatPosGrand
>6933	ParameterType	const unsigned int [ ]
>6934	Parameter	 
>6935	Identifier	fPostProcMax
>6936	ParameterType	float
>6937	Parameter	 
>6938	Identifier	fPostProcMin
>6939	ParameterType	float
>6940	Parameter	 
>6941	Identifier	fPostProcMidpoint
>6942	ParameterType	float
>6943	Parameter	 
>6944	Identifier	fPostProcSlope
>6945	ParameterType	float
>6946	Parameter	 
>6947	Identifier	ePostProcMethod
>6948	ParameterType	POSTPROC_METHOD
>6949	Parameter	 
>6950	Identifier	ePhaseNormMode
>6951	ParameterType	PHASENORM_MODE
>6952	Parameter	 
>6953	Identifier	eNormalizeMode
>6954	ParameterType	NORMALIZE_MODE
>6955	Parameter	 
>6956	Identifier	eNormalizeMethod
>6957	ParameterType	NORMALIZE_METHOD
>6958	Parameter	 
>6959	Identifier	fGainConstant
>6960	ParameterType	float
>6961	Parameter	 
>6962	Identifier	eEdgeMode
>6963	ParameterType	EDGE_MODE
>6964	Parameter	 
>6965	Identifier	nShrinkage
>6966	ParameterType	int
>6967	Parameter	 
>6968	Identifier	ePhaseMode
>6969	ParameterType	PHASE_MODE
>6970	Parameter	 
>6971	Identifier	psBox
>6972	ParameterType	const BBOX *
>6973	Parameter	 
>6974	Identifier	psOutput
>6975	ParameterType	const NUMPY_ARRAY *
>6976	Parameter	 
>6977	Identifier	psBufferIn
>6978	ParameterType	const NUMPY_ARRAY *
>6979	ReturnType	void
>6980	CompoundStatement	 
>6981	ForStatement	for ( nFilterIndex = 0 ; nFilterIndex < IMAGESET_PLANES ( psBufferIn ) ; nFilterIndex ++ )
>6982	CompoundStatement	 
>6983	ExpressionStatement	 
>6984	AssignmentExpr	pfOutputBase += IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>6985	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>6986	SizeofExpr	sizeof ( * pfOutputBase )
>6987	UnaryOp	* pfOutputBase
>6988	Identifier	pfOutputBase
>6989	UnaryOperator	*
>6990	Sizeof	sizeof
>6991	CallExpression	IMAGESET_PLANESTRIDE ( psOutput )
>6992	ArgumentList	psOutput
>6993	Argument	psOutput
>6994	Identifier	psOutput
>6995	Callee	IMAGESET_PLANESTRIDE
>6996	Identifier	IMAGESET_PLANESTRIDE
>6997	Identifier	pfOutputBase
>6998	ExpressionStatement	 
>6999	AssignmentExpr	pnInputBase += IMAGESET_PLANESTRIDE ( psBufferIn ) / sizeof ( * pnInput )
>7000	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psBufferIn ) / sizeof ( * pnInput )
>7001	SizeofExpr	sizeof ( * pnInput )
>7002	UnaryOp	* pnInput
>7003	Identifier	pnInput
>7004	UnaryOperator	*
>7005	Sizeof	sizeof
>7006	CallExpression	IMAGESET_PLANESTRIDE ( psBufferIn )
>7007	ArgumentList	psBufferIn
>7008	Argument	psBufferIn
>7009	Identifier	psBufferIn
>7010	Callee	IMAGESET_PLANESTRIDE
>7011	Identifier	IMAGESET_PLANESTRIDE
>7012	Identifier	pnInputBase
>7013	ForStatement	for ( j = nNumBlankBottomRows ; j ; j -- )
>7014	CompoundStatement	 
>7015	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>7016	ElseStatement	else
>7017	CompoundStatement	 
>7018	ExpressionStatement	 
>7019	AssignmentExpr	pfOutputNeg += nOutputRowStride
>7020	Identifier	nOutputRowStride
>7021	Identifier	pfOutputNeg
>7022	ExpressionStatement	 
>7023	AssignmentExpr	pfOutputPos += nOutputRowStride
>7024	Identifier	nOutputRowStride
>7025	Identifier	pfOutputPos
>7026	ForStatement	for ( i = nTotalLeftovers ; i ; i -- )
>7027	CompoundStatement	 
>7028	ExpressionStatement	 
>7029	AssignmentExpr	* pfOutputRowNeg ++ = NULL_RESPONSE
>7030	Identifier	NULL_RESPONSE
>7031	UnaryOp	* pfOutputRowNeg ++
>7032	IncDecOp	pfOutputRowNeg ++
>7033	IncDec	++
>7034	Identifier	pfOutputRowNeg
>7035	UnaryOperator	*
>7036	ExpressionStatement	 
>7037	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>7038	Identifier	NULL_RESPONSE
>7039	UnaryOp	* pfOutputRowPos ++
>7040	IncDecOp	pfOutputRowPos ++
>7041	IncDec	++
>7042	Identifier	pfOutputRowPos
>7043	UnaryOperator	*
>7044	ExpressionStatement	 
>7045	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg < pDebugOutputEOMB )
>7046	ArgumentList	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7047	Argument	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7048	RelationalExpression	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7049	Identifier	pDebugOutputEOMB
>7050	CastExpression	( const char * ) pfOutputRowNeg
>7051	Identifier	pfOutputRowNeg
>7052	CastTarget	const char *
>7053	Callee	NTA_ASSERT
>7054	Identifier	NTA_ASSERT
>7055	ExpressionStatement	 
>7056	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg >= pDebugOutputSOMB )
>7057	ArgumentList	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7058	Argument	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7059	RelationalExpression	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7060	Identifier	pDebugOutputSOMB
>7061	CastExpression	( const char * ) pfOutputRowNeg
>7062	Identifier	pfOutputRowNeg
>7063	CastTarget	const char *
>7064	Callee	NTA_ASSERT
>7065	Identifier	NTA_ASSERT
>7066	ExpressionStatement	 
>7067	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos < pDebugOutputEOMB )
>7068	ArgumentList	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7069	Argument	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7070	RelationalExpression	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7071	Identifier	pDebugOutputEOMB
>7072	CastExpression	( const char * ) pfOutputRowPos
>7073	Identifier	pfOutputRowPos
>7074	CastTarget	const char *
>7075	Callee	NTA_ASSERT
>7076	Identifier	NTA_ASSERT
>7077	ExpressionStatement	 
>7078	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7079	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7080	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7081	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7082	Identifier	pDebugOutputSOMB
>7083	CastExpression	( const char * ) pfOutputRowPos
>7084	Identifier	pfOutputRowPos
>7085	CastTarget	const char *
>7086	Callee	NTA_ASSERT
>7087	Identifier	NTA_ASSERT
>7088	IncDecOp	 
>7089	IncDec	--
>7090	Identifier	i
>7091	Condition	 
>7092	Identifier	i
>7093	ForInit	 
>7094	AssignmentExpr	i = nTotalLeftovers
>7095	Identifier	nTotalLeftovers
>7096	Identifier	i
>7097	ForStatement	for ( i = nTotalQuadsPerRow ; i ; i -- )
>7098	CompoundStatement	 
>7099	ExpressionStatement	 
>7100	AssignmentExpr	pfOutputRowNeg += 4
>7101	PrimaryExpression	4
>7102	Identifier	pfOutputRowNeg
>7103	ExpressionStatement	 
>7104	AssignmentExpr	pfOutputRowPos += 4
>7105	PrimaryExpression	4
>7106	Identifier	pfOutputRowPos
>7107	ExpressionStatement	 
>7108	AssignmentExpr	pfOutputRowNeg [ 3 ] = NULL_RESPONSE
>7109	Identifier	NULL_RESPONSE
>7110	ArrayIndexing	pfOutputRowNeg [ 3 ]
>7111	PrimaryExpression	3
>7112	Identifier	pfOutputRowNeg
>7113	ExpressionStatement	 
>7114	AssignmentExpr	pfOutputRowPos [ 3 ] = NULL_RESPONSE
>7115	Identifier	NULL_RESPONSE
>7116	ArrayIndexing	pfOutputRowPos [ 3 ]
>7117	PrimaryExpression	3
>7118	Identifier	pfOutputRowPos
>7119	ExpressionStatement	 
>7120	AssignmentExpr	pfOutputRowNeg [ 2 ] = NULL_RESPONSE
>7121	Identifier	NULL_RESPONSE
>7122	ArrayIndexing	pfOutputRowNeg [ 2 ]
>7123	PrimaryExpression	2
>7124	Identifier	pfOutputRowNeg
>7125	ExpressionStatement	 
>7126	AssignmentExpr	pfOutputRowPos [ 2 ] = NULL_RESPONSE
>7127	Identifier	NULL_RESPONSE
>7128	ArrayIndexing	pfOutputRowPos [ 2 ]
>7129	PrimaryExpression	2
>7130	Identifier	pfOutputRowPos
>7131	ExpressionStatement	 
>7132	AssignmentExpr	pfOutputRowNeg [ 1 ] = NULL_RESPONSE
>7133	Identifier	NULL_RESPONSE
>7134	ArrayIndexing	pfOutputRowNeg [ 1 ]
>7135	PrimaryExpression	1
>7136	Identifier	pfOutputRowNeg
>7137	ExpressionStatement	 
>7138	AssignmentExpr	pfOutputRowPos [ 1 ] = NULL_RESPONSE
>7139	Identifier	NULL_RESPONSE
>7140	ArrayIndexing	pfOutputRowPos [ 1 ]
>7141	PrimaryExpression	1
>7142	Identifier	pfOutputRowPos
>7143	ExpressionStatement	 
>7144	AssignmentExpr	pfOutputRowNeg [ 0 ] = NULL_RESPONSE
>7145	Identifier	NULL_RESPONSE
>7146	ArrayIndexing	pfOutputRowNeg [ 0 ]
>7147	PrimaryExpression	0
>7148	Identifier	pfOutputRowNeg
>7149	ExpressionStatement	 
>7150	AssignmentExpr	pfOutputRowPos [ 0 ] = NULL_RESPONSE
>7151	Identifier	NULL_RESPONSE
>7152	ArrayIndexing	pfOutputRowPos [ 0 ]
>7153	PrimaryExpression	0
>7154	Identifier	pfOutputRowPos
>7155	ExpressionStatement	 
>7156	CallExpression	NTA_ASSERT ( ( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB )
>7157	ArgumentList	( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB
>7158	Argument	( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB
>7159	RelationalExpression	( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB
>7160	Identifier	pDebugOutputEOMB
>7161	CastExpression	( const char * ) & ( pfOutputRowNeg [ 3 ] )
>7162	UnaryOp	& ( pfOutputRowNeg [ 3 ] )
>7163	ArrayIndexing	pfOutputRowNeg [ 3 ]
>7164	PrimaryExpression	3
>7165	Identifier	pfOutputRowNeg
>7166	UnaryOperator	&
>7167	CastTarget	const char *
>7168	Callee	NTA_ASSERT
>7169	Identifier	NTA_ASSERT
>7170	ExpressionStatement	 
>7171	CallExpression	NTA_ASSERT ( ( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB )
>7172	ArgumentList	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>7173	Argument	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>7174	RelationalExpression	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>7175	Identifier	pDebugOutputEOMB
>7176	CastExpression	( const char * ) & ( pfOutputRowPos [ 3 ] )
>7177	UnaryOp	& ( pfOutputRowPos [ 3 ] )
>7178	ArrayIndexing	pfOutputRowPos [ 3 ]
>7179	PrimaryExpression	3
>7180	Identifier	pfOutputRowPos
>7181	UnaryOperator	&
>7182	CastTarget	const char *
>7183	Callee	NTA_ASSERT
>7184	Identifier	NTA_ASSERT
>7185	ExpressionStatement	 
>7186	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg >= pDebugOutputSOMB )
>7187	ArgumentList	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7188	Argument	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7189	RelationalExpression	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7190	Identifier	pDebugOutputSOMB
>7191	CastExpression	( const char * ) pfOutputRowNeg
>7192	Identifier	pfOutputRowNeg
>7193	CastTarget	const char *
>7194	Callee	NTA_ASSERT
>7195	Identifier	NTA_ASSERT
>7196	ExpressionStatement	 
>7197	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7198	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7199	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7200	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7201	Identifier	pDebugOutputSOMB
>7202	CastExpression	( const char * ) pfOutputRowPos
>7203	Identifier	pfOutputRowPos
>7204	CastTarget	const char *
>7205	Callee	NTA_ASSERT
>7206	Identifier	NTA_ASSERT
>7207	IncDecOp	 
>7208	IncDec	--
>7209	Identifier	i
>7210	Condition	 
>7211	Identifier	i
>7212	ForInit	 
>7213	AssignmentExpr	i = nTotalQuadsPerRow
>7214	Identifier	nTotalQuadsPerRow
>7215	Identifier	i
>7216	ExpressionStatement	 
>7217	AssignmentExpr	pfOutputRowNeg = pfOutputNeg
>7218	Identifier	pfOutputNeg
>7219	Identifier	pfOutputRowNeg
>7220	ExpressionStatement	 
>7221	AssignmentExpr	pfOutputRowPos = pfOutputPos
>7222	Identifier	pfOutputPos
>7223	Identifier	pfOutputRowPos
>7224	ExpressionStatement	 
>7225	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>7226	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>7227	Argument	ePhaseMode == PHASE_MODE_DUAL
>7228	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>7229	Identifier	PHASE_MODE_DUAL
>7230	Identifier	ePhaseMode
>7231	Callee	NTA_ASSERT
>7232	Identifier	NTA_ASSERT
>7233	CompoundStatement	 
>7234	ExpressionStatement	 
>7235	AssignmentExpr	pfOutputPos += nOutputRowStride
>7236	Identifier	nOutputRowStride
>7237	Identifier	pfOutputPos
>7238	ForStatement	for ( i = nTotalLeftovers ; i ; i -- )
>7239	CompoundStatement	 
>7240	ExpressionStatement	 
>7241	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>7242	Identifier	NULL_RESPONSE
>7243	UnaryOp	* pfOutputRowPos ++
>7244	IncDecOp	pfOutputRowPos ++
>7245	IncDec	++
>7246	Identifier	pfOutputRowPos
>7247	UnaryOperator	*
>7248	ExpressionStatement	 
>7249	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos < pDebugOutputEOMB )
>7250	ArgumentList	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7251	Argument	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7252	RelationalExpression	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7253	Identifier	pDebugOutputEOMB
>7254	CastExpression	( const char * ) pfOutputRowPos
>7255	Identifier	pfOutputRowPos
>7256	CastTarget	const char *
>7257	Callee	NTA_ASSERT
>7258	Identifier	NTA_ASSERT
>7259	ExpressionStatement	 
>7260	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7261	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7262	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7263	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7264	Identifier	pDebugOutputSOMB
>7265	CastExpression	( const char * ) pfOutputRowPos
>7266	Identifier	pfOutputRowPos
>7267	CastTarget	const char *
>7268	Callee	NTA_ASSERT
>7269	Identifier	NTA_ASSERT
>7270	IncDecOp	 
>7271	IncDec	--
>7272	Identifier	i
>7273	Condition	 
>7274	Identifier	i
>7275	ForInit	 
>7276	AssignmentExpr	i = nTotalLeftovers
>7277	Identifier	nTotalLeftovers
>7278	Identifier	i
>7279	ForStatement	for ( i = nTotalQuadsPerRow ; i ; i -- )
>7280	CompoundStatement	 
>7281	ExpressionStatement	 
>7282	AssignmentExpr	pfOutputRowPos += 4
>7283	PrimaryExpression	4
>7284	Identifier	pfOutputRowPos
>7285	ExpressionStatement	 
>7286	AssignmentExpr	pfOutputRowPos [ 3 ] = NULL_RESPONSE
>7287	Identifier	NULL_RESPONSE
>7288	ArrayIndexing	pfOutputRowPos [ 3 ]
>7289	PrimaryExpression	3
>7290	Identifier	pfOutputRowPos
>7291	ExpressionStatement	 
>7292	AssignmentExpr	pfOutputRowPos [ 2 ] = NULL_RESPONSE
>7293	Identifier	NULL_RESPONSE
>7294	ArrayIndexing	pfOutputRowPos [ 2 ]
>7295	PrimaryExpression	2
>7296	Identifier	pfOutputRowPos
>7297	ExpressionStatement	 
>7298	AssignmentExpr	pfOutputRowPos [ 1 ] = NULL_RESPONSE
>7299	Identifier	NULL_RESPONSE
>7300	ArrayIndexing	pfOutputRowPos [ 1 ]
>7301	PrimaryExpression	1
>7302	Identifier	pfOutputRowPos
>7303	ExpressionStatement	 
>7304	AssignmentExpr	pfOutputRowPos [ 0 ] = NULL_RESPONSE
>7305	Identifier	NULL_RESPONSE
>7306	ArrayIndexing	pfOutputRowPos [ 0 ]
>7307	PrimaryExpression	0
>7308	Identifier	pfOutputRowPos
>7309	ExpressionStatement	 
>7310	CallExpression	NTA_ASSERT ( ( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB )
>7311	ArgumentList	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>7312	Argument	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>7313	RelationalExpression	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>7314	Identifier	pDebugOutputEOMB
>7315	CastExpression	( const char * ) & ( pfOutputRowPos [ 3 ] )
>7316	UnaryOp	& ( pfOutputRowPos [ 3 ] )
>7317	ArrayIndexing	pfOutputRowPos [ 3 ]
>7318	PrimaryExpression	3
>7319	Identifier	pfOutputRowPos
>7320	UnaryOperator	&
>7321	CastTarget	const char *
>7322	Callee	NTA_ASSERT
>7323	Identifier	NTA_ASSERT
>7324	ExpressionStatement	 
>7325	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7326	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7327	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7328	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7329	Identifier	pDebugOutputSOMB
>7330	CastExpression	( const char * ) pfOutputRowPos
>7331	Identifier	pfOutputRowPos
>7332	CastTarget	const char *
>7333	Callee	NTA_ASSERT
>7334	Identifier	NTA_ASSERT
>7335	IncDecOp	 
>7336	IncDec	--
>7337	Identifier	i
>7338	Condition	 
>7339	Identifier	i
>7340	ForInit	 
>7341	AssignmentExpr	i = nTotalQuadsPerRow
>7342	Identifier	nTotalQuadsPerRow
>7343	Identifier	i
>7344	ExpressionStatement	 
>7345	AssignmentExpr	pfOutputRowPos = pfOutputPos
>7346	Identifier	pfOutputPos
>7347	Identifier	pfOutputRowPos
>7348	Condition	 
>7349	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>7350	Identifier	PHASE_MODE_SINGLE
>7351	Identifier	ePhaseMode
>7352	IncDecOp	 
>7353	IncDec	--
>7354	Identifier	j
>7355	Condition	 
>7356	Identifier	j
>7357	ForInit	 
>7358	AssignmentExpr	j = nNumBlankBottomRows
>7359	Identifier	nNumBlankBottomRows
>7360	Identifier	j
>7361	ForStatement	for ( j = nOutputRows ; j ; j -- )
>7362	CompoundStatement	 
>7363	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>7364	ExpressionStatement	 
>7365	AssignmentExpr	pfOutputNeg += nOutputRowStride
>7366	Identifier	nOutputRowStride
>7367	Identifier	pfOutputNeg
>7368	Condition	 
>7369	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>7370	Identifier	PHASE_MODE_DUAL
>7371	Identifier	ePhaseMode
>7372	ExpressionStatement	 
>7373	AssignmentExpr	pfOutputPos += nOutputRowStride
>7374	Identifier	nOutputRowStride
>7375	Identifier	pfOutputPos
>7376	ExpressionStatement	 
>7377	AssignmentExpr	pnInput += nInputRowStride
>7378	Identifier	nInputRowStride
>7379	Identifier	pnInput
>7380	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>7381	ElseStatement	else
>7382	CompoundStatement	 
>7383	ForStatement	for ( i = nNumBlankRightCols ; i ; i -- )
>7384	CompoundStatement	 
>7385	ExpressionStatement	 
>7386	AssignmentExpr	* pfOutputRowNeg ++ = NULL_RESPONSE
>7387	Identifier	NULL_RESPONSE
>7388	UnaryOp	* pfOutputRowNeg ++
>7389	IncDecOp	pfOutputRowNeg ++
>7390	IncDec	++
>7391	Identifier	pfOutputRowNeg
>7392	UnaryOperator	*
>7393	ExpressionStatement	 
>7394	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>7395	Identifier	NULL_RESPONSE
>7396	UnaryOp	* pfOutputRowPos ++
>7397	IncDecOp	pfOutputRowPos ++
>7398	IncDec	++
>7399	Identifier	pfOutputRowPos
>7400	UnaryOperator	*
>7401	ExpressionStatement	 
>7402	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg < pDebugOutputEOMB )
>7403	ArgumentList	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7404	Argument	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7405	RelationalExpression	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7406	Identifier	pDebugOutputEOMB
>7407	CastExpression	( const char * ) pfOutputRowNeg
>7408	Identifier	pfOutputRowNeg
>7409	CastTarget	const char *
>7410	Callee	NTA_ASSERT
>7411	Identifier	NTA_ASSERT
>7412	ExpressionStatement	 
>7413	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg >= pDebugOutputSOMB )
>7414	ArgumentList	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7415	Argument	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7416	RelationalExpression	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7417	Identifier	pDebugOutputSOMB
>7418	CastExpression	( const char * ) pfOutputRowNeg
>7419	Identifier	pfOutputRowNeg
>7420	CastTarget	const char *
>7421	Callee	NTA_ASSERT
>7422	Identifier	NTA_ASSERT
>7423	ExpressionStatement	 
>7424	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos < pDebugOutputEOMB )
>7425	ArgumentList	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7426	Argument	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7427	RelationalExpression	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7428	Identifier	pDebugOutputEOMB
>7429	CastExpression	( const char * ) pfOutputRowPos
>7430	Identifier	pfOutputRowPos
>7431	CastTarget	const char *
>7432	Callee	NTA_ASSERT
>7433	Identifier	NTA_ASSERT
>7434	ExpressionStatement	 
>7435	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7436	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7437	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7438	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7439	Identifier	pDebugOutputSOMB
>7440	CastExpression	( const char * ) pfOutputRowPos
>7441	Identifier	pfOutputRowPos
>7442	CastTarget	const char *
>7443	Callee	NTA_ASSERT
>7444	Identifier	NTA_ASSERT
>7445	IncDecOp	 
>7446	IncDec	--
>7447	Identifier	i
>7448	Condition	 
>7449	Identifier	i
>7450	ForInit	 
>7451	AssignmentExpr	i = nNumBlankRightCols
>7452	Identifier	nNumBlankRightCols
>7453	Identifier	i
>7454	ExpressionStatement	 
>7455	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>7456	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>7457	Argument	ePhaseMode == PHASE_MODE_DUAL
>7458	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>7459	Identifier	PHASE_MODE_DUAL
>7460	Identifier	ePhaseMode
>7461	Callee	NTA_ASSERT
>7462	Identifier	NTA_ASSERT
>7463	CompoundStatement	 
>7464	ForStatement	for ( i = nNumBlankRightCols ; i ; i -- )
>7465	CompoundStatement	 
>7466	ExpressionStatement	 
>7467	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>7468	Identifier	NULL_RESPONSE
>7469	UnaryOp	* pfOutputRowPos ++
>7470	IncDecOp	pfOutputRowPos ++
>7471	IncDec	++
>7472	Identifier	pfOutputRowPos
>7473	UnaryOperator	*
>7474	ExpressionStatement	 
>7475	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7476	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7477	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7478	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7479	Identifier	pDebugOutputSOMB
>7480	CastExpression	( const char * ) pfOutputRowPos
>7481	Identifier	pfOutputRowPos
>7482	CastTarget	const char *
>7483	Callee	NTA_ASSERT
>7484	Identifier	NTA_ASSERT
>7485	IncDecOp	 
>7486	IncDec	--
>7487	Identifier	i
>7488	Condition	 
>7489	Identifier	i
>7490	ForInit	 
>7491	AssignmentExpr	i = nNumBlankRightCols
>7492	Identifier	nNumBlankRightCols
>7493	Identifier	i
>7494	Condition	 
>7495	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>7496	Identifier	PHASE_MODE_SINGLE
>7497	Identifier	ePhaseMode
>7498	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>7499	ElseStatement	else
>7500	CompoundStatement	 
>7501	IfStatement	if ( ePostProcMethod == POSTPROC_METHOD_RAW )
>7502	ElseStatement	else
>7503	CompoundStatement	 
>7504	IfStatement	if ( nOverflowMask )
>7505	ElseStatement	else
>7506	CompoundStatement	 
>7507	ForStatement	for ( i = nOutputCols ; i ; i -- )
>7508	CompoundStatement	 
>7509	ExpressionStatement	 
>7510	IncDecOp	pnInputRow ++
>7511	IncDec	++
>7512	Identifier	pnInputRow
>7513	ExpressionStatement	 
>7514	CallExpression	NTA_ASSERT ( pfOutputRowNeg [ - 1 ] >= 0.0f )
>7515	ArgumentList	pfOutputRowNeg [ - 1 ] >= 0.0f
>7516	Argument	pfOutputRowNeg [ - 1 ] >= 0.0f
>7517	RelationalExpression	pfOutputRowNeg [ - 1 ] >= 0.0f
>7518	PrimaryExpression	0.0f
>7519	ArrayIndexing	pfOutputRowNeg [ - 1 ]
>7520	UnaryOp	- 1
>7521	PrimaryExpression	1
>7522	UnaryOperator	-
>7523	Identifier	pfOutputRowNeg
>7524	Callee	NTA_ASSERT
>7525	Identifier	NTA_ASSERT
>7526	ExpressionStatement	 
>7527	CallExpression	NTA_ASSERT ( pfOutputRowNeg [ - 1 ] <= 1.0f )
>7528	ArgumentList	pfOutputRowNeg [ - 1 ] <= 1.0f
>7529	Argument	pfOutputRowNeg [ - 1 ] <= 1.0f
>7530	RelationalExpression	pfOutputRowNeg [ - 1 ] <= 1.0f
>7531	PrimaryExpression	1.0f
>7532	ArrayIndexing	pfOutputRowNeg [ - 1 ]
>7533	UnaryOp	- 1
>7534	PrimaryExpression	1
>7535	UnaryOperator	-
>7536	Identifier	pfOutputRowNeg
>7537	Callee	NTA_ASSERT
>7538	Identifier	NTA_ASSERT
>7539	ExpressionStatement	 
>7540	CallExpression	NTA_ASSERT ( pfOutputRowPos [ - 1 ] >= 0.0f )
>7541	ArgumentList	pfOutputRowPos [ - 1 ] >= 0.0f
>7542	Argument	pfOutputRowPos [ - 1 ] >= 0.0f
>7543	RelationalExpression	pfOutputRowPos [ - 1 ] >= 0.0f
>7544	PrimaryExpression	0.0f
>7545	ArrayIndexing	pfOutputRowPos [ - 1 ]
>7546	UnaryOp	- 1
>7547	PrimaryExpression	1
>7548	UnaryOperator	-
>7549	Identifier	pfOutputRowPos
>7550	Callee	NTA_ASSERT
>7551	Identifier	NTA_ASSERT
>7552	ExpressionStatement	 
>7553	CallExpression	NTA_ASSERT ( pfOutputRowPos [ - 1 ] <= 1.0f )
>7554	ArgumentList	pfOutputRowPos [ - 1 ] <= 1.0f
>7555	Argument	pfOutputRowPos [ - 1 ] <= 1.0f
>7556	RelationalExpression	pfOutputRowPos [ - 1 ] <= 1.0f
>7557	PrimaryExpression	1.0f
>7558	ArrayIndexing	pfOutputRowPos [ - 1 ]
>7559	UnaryOp	- 1
>7560	PrimaryExpression	1
>7561	UnaryOperator	-
>7562	Identifier	pfOutputRowPos
>7563	Callee	NTA_ASSERT
>7564	Identifier	NTA_ASSERT
>7565	IfStatement	if ( nDualBin >= 0 )
>7566	ElseStatement	else
>7567	CompoundStatement	 
>7568	ExpressionStatement	 
>7569	AssignmentExpr	* pfOutputRowNeg ++ = pfPostProcLUT [ nDualBin ]
>7570	ArrayIndexing	pfPostProcLUT [ nDualBin ]
>7571	Identifier	nDualBin
>7572	Identifier	pfPostProcLUT
>7573	UnaryOp	* pfOutputRowNeg ++
>7574	IncDecOp	pfOutputRowNeg ++
>7575	IncDec	++
>7576	Identifier	pfOutputRowNeg
>7577	UnaryOperator	*
>7578	ExpressionStatement	 
>7579	CallExpression	NTA_ASSERT ( nDualBin <= nMaxLutBin )
>7580	ArgumentList	nDualBin <= nMaxLutBin
>7581	Argument	nDualBin <= nMaxLutBin
>7582	RelationalExpression	nDualBin <= nMaxLutBin
>7583	Identifier	nMaxLutBin
>7584	Identifier	nDualBin
>7585	Callee	NTA_ASSERT
>7586	Identifier	NTA_ASSERT
>7587	ExpressionStatement	 
>7588	AssignmentExpr	nDualBin = ( * pnInputRow ) / nDiscreteGainNeg
>7589	MultiplicativeExpression	( * pnInputRow ) / nDiscreteGainNeg
>7590	Identifier	nDiscreteGainNeg
>7591	UnaryOp	* pnInputRow
>7592	Identifier	pnInputRow
>7593	UnaryOperator	*
>7594	Identifier	nDualBin
>7595	ExpressionStatement	 
>7596	AssignmentExpr	* pfOutputRowPos ++ = 0.0f
>7597	PrimaryExpression	0.0f
>7598	UnaryOp	* pfOutputRowPos ++
>7599	IncDecOp	pfOutputRowPos ++
>7600	IncDec	++
>7601	Identifier	pfOutputRowPos
>7602	UnaryOperator	*
>7603	CompoundStatement	 
>7604	ExpressionStatement	 
>7605	AssignmentExpr	* pfOutputRowNeg ++ = 0.0f
>7606	PrimaryExpression	0.0f
>7607	UnaryOp	* pfOutputRowNeg ++
>7608	IncDecOp	pfOutputRowNeg ++
>7609	IncDec	++
>7610	Identifier	pfOutputRowNeg
>7611	UnaryOperator	*
>7612	ExpressionStatement	 
>7613	AssignmentExpr	* pfOutputRowPos ++ = pfPostProcLUT [ nDualBin ]
>7614	ArrayIndexing	pfPostProcLUT [ nDualBin ]
>7615	Identifier	nDualBin
>7616	Identifier	pfPostProcLUT
>7617	UnaryOp	* pfOutputRowPos ++
>7618	IncDecOp	pfOutputRowPos ++
>7619	IncDec	++
>7620	Identifier	pfOutputRowPos
>7621	UnaryOperator	*
>7622	ExpressionStatement	 
>7623	CallExpression	NTA_ASSERT ( nDualBin <= nMaxLutBin )
>7624	ArgumentList	nDualBin <= nMaxLutBin
>7625	Argument	nDualBin <= nMaxLutBin
>7626	RelationalExpression	nDualBin <= nMaxLutBin
>7627	Identifier	nMaxLutBin
>7628	Identifier	nDualBin
>7629	Callee	NTA_ASSERT
>7630	Identifier	NTA_ASSERT
>7631	Condition	 
>7632	RelationalExpression	nDualBin >= 0
>7633	PrimaryExpression	0
>7634	Identifier	nDualBin
>7635	ExpressionStatement	 
>7636	AssignmentExpr	nDualBin = ( * pnInputRow ) / nDiscreteGainPos
>7637	MultiplicativeExpression	( * pnInputRow ) / nDiscreteGainPos
>7638	Identifier	nDiscreteGainPos
>7639	UnaryOp	* pnInputRow
>7640	Identifier	pnInputRow
>7641	UnaryOperator	*
>7642	Identifier	nDualBin
>7643	ExpressionStatement	 
>7644	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg < pDebugOutputEOMB )
>7645	ArgumentList	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7646	Argument	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7647	RelationalExpression	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7648	Identifier	pDebugOutputEOMB
>7649	CastExpression	( const char * ) pfOutputRowNeg
>7650	Identifier	pfOutputRowNeg
>7651	CastTarget	const char *
>7652	Callee	NTA_ASSERT
>7653	Identifier	NTA_ASSERT
>7654	ExpressionStatement	 
>7655	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg >= pDebugOutputSOMB )
>7656	ArgumentList	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7657	Argument	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7658	RelationalExpression	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7659	Identifier	pDebugOutputSOMB
>7660	CastExpression	( const char * ) pfOutputRowNeg
>7661	Identifier	pfOutputRowNeg
>7662	CastTarget	const char *
>7663	Callee	NTA_ASSERT
>7664	Identifier	NTA_ASSERT
>7665	ExpressionStatement	 
>7666	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos < pDebugOutputEOMB )
>7667	ArgumentList	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7668	Argument	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7669	RelationalExpression	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7670	Identifier	pDebugOutputEOMB
>7671	CastExpression	( const char * ) pfOutputRowPos
>7672	Identifier	pfOutputRowPos
>7673	CastTarget	const char *
>7674	Callee	NTA_ASSERT
>7675	Identifier	NTA_ASSERT
>7676	ExpressionStatement	 
>7677	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7678	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7679	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7680	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7681	Identifier	pDebugOutputSOMB
>7682	CastExpression	( const char * ) pfOutputRowPos
>7683	Identifier	pfOutputRowPos
>7684	CastTarget	const char *
>7685	Callee	NTA_ASSERT
>7686	Identifier	NTA_ASSERT
>7687	IncDecOp	 
>7688	IncDec	--
>7689	Identifier	i
>7690	Condition	 
>7691	Identifier	i
>7692	ForInit	 
>7693	AssignmentExpr	i = nOutputCols
>7694	Identifier	nOutputCols
>7695	Identifier	i
>7696	CompoundStatement	 
>7697	ForStatement	for ( i = nOutputCols ; i ; i -- )
>7698	CompoundStatement	 
>7699	ExpressionStatement	 
>7700	IncDecOp	pnInputRow ++
>7701	IncDec	++
>7702	Identifier	pnInputRow
>7703	IfStatement	if ( nDualBin >= 0 )
>7704	ElseStatement	else
>7705	CompoundStatement	 
>7706	ExpressionStatement	 
>7707	CallExpression	NTA_ASSERT ( pfOutputRowNeg [ - 1 ] >= 0.0f )
>7708	ArgumentList	pfOutputRowNeg [ - 1 ] >= 0.0f
>7709	Argument	pfOutputRowNeg [ - 1 ] >= 0.0f
>7710	RelationalExpression	pfOutputRowNeg [ - 1 ] >= 0.0f
>7711	PrimaryExpression	0.0f
>7712	ArrayIndexing	pfOutputRowNeg [ - 1 ]
>7713	UnaryOp	- 1
>7714	PrimaryExpression	1
>7715	UnaryOperator	-
>7716	Identifier	pfOutputRowNeg
>7717	Callee	NTA_ASSERT
>7718	Identifier	NTA_ASSERT
>7719	ExpressionStatement	 
>7720	CallExpression	NTA_ASSERT ( pfOutputRowNeg [ - 1 ] <= 1.0f )
>7721	ArgumentList	pfOutputRowNeg [ - 1 ] <= 1.0f
>7722	Argument	pfOutputRowNeg [ - 1 ] <= 1.0f
>7723	RelationalExpression	pfOutputRowNeg [ - 1 ] <= 1.0f
>7724	PrimaryExpression	1.0f
>7725	ArrayIndexing	pfOutputRowNeg [ - 1 ]
>7726	UnaryOp	- 1
>7727	PrimaryExpression	1
>7728	UnaryOperator	-
>7729	Identifier	pfOutputRowNeg
>7730	Callee	NTA_ASSERT
>7731	Identifier	NTA_ASSERT
>7732	ExpressionStatement	 
>7733	AssignmentExpr	* pfOutputRowNeg ++ = pfPostProcLUT [ nDualBin ]
>7734	ArrayIndexing	pfPostProcLUT [ nDualBin ]
>7735	Identifier	nDualBin
>7736	Identifier	pfPostProcLUT
>7737	UnaryOp	* pfOutputRowNeg ++
>7738	IncDecOp	pfOutputRowNeg ++
>7739	IncDec	++
>7740	Identifier	pfOutputRowNeg
>7741	UnaryOperator	*
>7742	ExpressionStatement	 
>7743	CallExpression	NTA_ASSERT ( nDualBin >= 0 )
>7744	ArgumentList	nDualBin >= 0
>7745	Argument	nDualBin >= 0
>7746	RelationalExpression	nDualBin >= 0
>7747	PrimaryExpression	0
>7748	Identifier	nDualBin
>7749	Callee	NTA_ASSERT
>7750	Identifier	NTA_ASSERT
>7751	ExpressionStatement	 
>7752	CallExpression	NTA_ASSERT ( nDualBin <= nMaxLutBin )
>7753	ArgumentList	nDualBin <= nMaxLutBin
>7754	Argument	nDualBin <= nMaxLutBin
>7755	RelationalExpression	nDualBin <= nMaxLutBin
>7756	Identifier	nMaxLutBin
>7757	Identifier	nDualBin
>7758	Callee	NTA_ASSERT
>7759	Identifier	NTA_ASSERT
>7760	IfStatement	if ( nDualBin > nMaxLutBin )
>7761	ExpressionStatement	 
>7762	AssignmentExpr	nDualBin = nMaxLutBin
>7763	Identifier	nMaxLutBin
>7764	Identifier	nDualBin
>7765	Condition	 
>7766	RelationalExpression	nDualBin > nMaxLutBin
>7767	Identifier	nMaxLutBin
>7768	Identifier	nDualBin
>7769	ExpressionStatement	 
>7770	AssignmentExpr	nDualBin = ( * pnInputRow ) / nDiscreteGainNeg
>7771	MultiplicativeExpression	( * pnInputRow ) / nDiscreteGainNeg
>7772	Identifier	nDiscreteGainNeg
>7773	UnaryOp	* pnInputRow
>7774	Identifier	pnInputRow
>7775	UnaryOperator	*
>7776	Identifier	nDualBin
>7777	ExpressionStatement	 
>7778	AssignmentExpr	* pfOutputRowPos ++ = 0.0f
>7779	PrimaryExpression	0.0f
>7780	UnaryOp	* pfOutputRowPos ++
>7781	IncDecOp	pfOutputRowPos ++
>7782	IncDec	++
>7783	Identifier	pfOutputRowPos
>7784	UnaryOperator	*
>7785	CompoundStatement	 
>7786	ExpressionStatement	 
>7787	CallExpression	NTA_ASSERT ( pfOutputRowPos [ - 1 ] >= 0.0f )
>7788	ArgumentList	pfOutputRowPos [ - 1 ] >= 0.0f
>7789	Argument	pfOutputRowPos [ - 1 ] >= 0.0f
>7790	RelationalExpression	pfOutputRowPos [ - 1 ] >= 0.0f
>7791	PrimaryExpression	0.0f
>7792	ArrayIndexing	pfOutputRowPos [ - 1 ]
>7793	UnaryOp	- 1
>7794	PrimaryExpression	1
>7795	UnaryOperator	-
>7796	Identifier	pfOutputRowPos
>7797	Callee	NTA_ASSERT
>7798	Identifier	NTA_ASSERT
>7799	ExpressionStatement	 
>7800	CallExpression	NTA_ASSERT ( pfOutputRowPos [ - 1 ] <= 1.0f )
>7801	ArgumentList	pfOutputRowPos [ - 1 ] <= 1.0f
>7802	Argument	pfOutputRowPos [ - 1 ] <= 1.0f
>7803	RelationalExpression	pfOutputRowPos [ - 1 ] <= 1.0f
>7804	PrimaryExpression	1.0f
>7805	ArrayIndexing	pfOutputRowPos [ - 1 ]
>7806	UnaryOp	- 1
>7807	PrimaryExpression	1
>7808	UnaryOperator	-
>7809	Identifier	pfOutputRowPos
>7810	Callee	NTA_ASSERT
>7811	Identifier	NTA_ASSERT
>7812	ExpressionStatement	 
>7813	AssignmentExpr	* pfOutputRowNeg ++ = 0.0f
>7814	PrimaryExpression	0.0f
>7815	UnaryOp	* pfOutputRowNeg ++
>7816	IncDecOp	pfOutputRowNeg ++
>7817	IncDec	++
>7818	Identifier	pfOutputRowNeg
>7819	UnaryOperator	*
>7820	ExpressionStatement	 
>7821	AssignmentExpr	* pfOutputRowPos ++ = pfPostProcLUT [ nDualBin ]
>7822	ArrayIndexing	pfPostProcLUT [ nDualBin ]
>7823	Identifier	nDualBin
>7824	Identifier	pfPostProcLUT
>7825	UnaryOp	* pfOutputRowPos ++
>7826	IncDecOp	pfOutputRowPos ++
>7827	IncDec	++
>7828	Identifier	pfOutputRowPos
>7829	UnaryOperator	*
>7830	ExpressionStatement	 
>7831	CallExpression	NTA_ASSERT ( nDualBin >= 0 )
>7832	ArgumentList	nDualBin >= 0
>7833	Argument	nDualBin >= 0
>7834	RelationalExpression	nDualBin >= 0
>7835	PrimaryExpression	0
>7836	Identifier	nDualBin
>7837	Callee	NTA_ASSERT
>7838	Identifier	NTA_ASSERT
>7839	ExpressionStatement	 
>7840	CallExpression	NTA_ASSERT ( nDualBin <= nMaxLutBin )
>7841	ArgumentList	nDualBin <= nMaxLutBin
>7842	Argument	nDualBin <= nMaxLutBin
>7843	RelationalExpression	nDualBin <= nMaxLutBin
>7844	Identifier	nMaxLutBin
>7845	Identifier	nDualBin
>7846	Callee	NTA_ASSERT
>7847	Identifier	NTA_ASSERT
>7848	IfStatement	if ( nDualBin > nMaxLutBin )
>7849	ExpressionStatement	 
>7850	AssignmentExpr	nDualBin = nMaxLutBin
>7851	Identifier	nMaxLutBin
>7852	Identifier	nDualBin
>7853	Condition	 
>7854	RelationalExpression	nDualBin > nMaxLutBin
>7855	Identifier	nMaxLutBin
>7856	Identifier	nDualBin
>7857	Condition	 
>7858	RelationalExpression	nDualBin >= 0
>7859	PrimaryExpression	0
>7860	Identifier	nDualBin
>7861	ExpressionStatement	 
>7862	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg < pDebugOutputEOMB )
>7863	ArgumentList	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7864	Argument	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7865	RelationalExpression	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7866	Identifier	pDebugOutputEOMB
>7867	CastExpression	( const char * ) pfOutputRowNeg
>7868	Identifier	pfOutputRowNeg
>7869	CastTarget	const char *
>7870	Callee	NTA_ASSERT
>7871	Identifier	NTA_ASSERT
>7872	ExpressionStatement	 
>7873	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg >= pDebugOutputSOMB )
>7874	ArgumentList	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7875	Argument	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7876	RelationalExpression	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7877	Identifier	pDebugOutputSOMB
>7878	CastExpression	( const char * ) pfOutputRowNeg
>7879	Identifier	pfOutputRowNeg
>7880	CastTarget	const char *
>7881	Callee	NTA_ASSERT
>7882	Identifier	NTA_ASSERT
>7883	ExpressionStatement	 
>7884	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos < pDebugOutputEOMB )
>7885	ArgumentList	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7886	Argument	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7887	RelationalExpression	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>7888	Identifier	pDebugOutputEOMB
>7889	CastExpression	( const char * ) pfOutputRowPos
>7890	Identifier	pfOutputRowPos
>7891	CastTarget	const char *
>7892	Callee	NTA_ASSERT
>7893	Identifier	NTA_ASSERT
>7894	ExpressionStatement	 
>7895	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>7896	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7897	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7898	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>7899	Identifier	pDebugOutputSOMB
>7900	CastExpression	( const char * ) pfOutputRowPos
>7901	Identifier	pfOutputRowPos
>7902	CastTarget	const char *
>7903	Callee	NTA_ASSERT
>7904	Identifier	NTA_ASSERT
>7905	ExpressionStatement	 
>7906	AssignmentExpr	nDualBin = ( * pnInputRow ) / nDiscreteGainPos
>7907	MultiplicativeExpression	( * pnInputRow ) / nDiscreteGainPos
>7908	Identifier	nDiscreteGainPos
>7909	UnaryOp	* pnInputRow
>7910	Identifier	pnInputRow
>7911	UnaryOperator	*
>7912	Identifier	nDualBin
>7913	IncDecOp	 
>7914	IncDec	--
>7915	Identifier	i
>7916	Condition	 
>7917	Identifier	i
>7918	ForInit	 
>7919	AssignmentExpr	i = nOutputCols
>7920	Identifier	nOutputCols
>7921	Identifier	i
>7922	Condition	 
>7923	Identifier	nOverflowMask
>7924	CompoundStatement	 
>7925	ForStatement	for ( i = nNumLeftovers ; i ; i -- )
>7926	CompoundStatement	 
>7927	IfStatement	if ( fResponse >= 0.0f )
>7928	ElseStatement	else
>7929	CompoundStatement	 
>7930	ExpressionStatement	 
>7931	AssignmentExpr	* pfOutputRowNeg ++ = fResponse * fGainNeg
>7932	MultiplicativeExpression	fResponse * fGainNeg
>7933	Identifier	fGainNeg
>7934	Identifier	fResponse
>7935	UnaryOp	* pfOutputRowNeg ++
>7936	IncDecOp	pfOutputRowNeg ++
>7937	IncDec	++
>7938	Identifier	pfOutputRowNeg
>7939	UnaryOperator	*
>7940	ExpressionStatement	 
>7941	AssignmentExpr	* pfOutputRowPos ++ = 0.0f
>7942	PrimaryExpression	0.0f
>7943	UnaryOp	* pfOutputRowPos ++
>7944	IncDecOp	pfOutputRowPos ++
>7945	IncDec	++
>7946	Identifier	pfOutputRowPos
>7947	UnaryOperator	*
>7948	CompoundStatement	 
>7949	ExpressionStatement	 
>7950	AssignmentExpr	* pfOutputRowNeg ++ = 0.0f
>7951	PrimaryExpression	0.0f
>7952	UnaryOp	* pfOutputRowNeg ++
>7953	IncDecOp	pfOutputRowNeg ++
>7954	IncDec	++
>7955	Identifier	pfOutputRowNeg
>7956	UnaryOperator	*
>7957	ExpressionStatement	 
>7958	AssignmentExpr	* pfOutputRowPos ++ = fResponse * fGainPos
>7959	MultiplicativeExpression	fResponse * fGainPos
>7960	Identifier	fGainPos
>7961	Identifier	fResponse
>7962	UnaryOp	* pfOutputRowPos ++
>7963	IncDecOp	pfOutputRowPos ++
>7964	IncDec	++
>7965	Identifier	pfOutputRowPos
>7966	UnaryOperator	*
>7967	Condition	 
>7968	RelationalExpression	fResponse >= 0.0f
>7969	PrimaryExpression	0.0f
>7970	Identifier	fResponse
>7971	ExpressionStatement	 
>7972	AssignmentExpr	fResponse = ( float ) ( * pnInputRow ++ )
>7973	CastExpression	( float ) ( * pnInputRow ++ )
>7974	UnaryOp	* pnInputRow ++
>7975	IncDecOp	pnInputRow ++
>7976	IncDec	++
>7977	Identifier	pnInputRow
>7978	UnaryOperator	*
>7979	CastTarget	float
>7980	Identifier	fResponse
>7981	ExpressionStatement	 
>7982	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg < pDebugOutputEOMB )
>7983	ArgumentList	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7984	Argument	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7985	RelationalExpression	( const char * ) pfOutputRowNeg < pDebugOutputEOMB
>7986	Identifier	pDebugOutputEOMB
>7987	CastExpression	( const char * ) pfOutputRowNeg
>7988	Identifier	pfOutputRowNeg
>7989	CastTarget	const char *
>7990	Callee	NTA_ASSERT
>7991	Identifier	NTA_ASSERT
>7992	ExpressionStatement	 
>7993	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg >= pDebugOutputSOMB )
>7994	ArgumentList	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7995	Argument	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7996	RelationalExpression	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>7997	Identifier	pDebugOutputSOMB
>7998	CastExpression	( const char * ) pfOutputRowNeg
>7999	Identifier	pfOutputRowNeg
>8000	CastTarget	const char *
>8001	Callee	NTA_ASSERT
>8002	Identifier	NTA_ASSERT
>8003	ExpressionStatement	 
>8004	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos < pDebugOutputEOMB )
>8005	ArgumentList	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>8006	Argument	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>8007	RelationalExpression	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>8008	Identifier	pDebugOutputEOMB
>8009	CastExpression	( const char * ) pfOutputRowPos
>8010	Identifier	pfOutputRowPos
>8011	CastTarget	const char *
>8012	Callee	NTA_ASSERT
>8013	Identifier	NTA_ASSERT
>8014	ExpressionStatement	 
>8015	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>8016	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8017	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8018	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8019	Identifier	pDebugOutputSOMB
>8020	CastExpression	( const char * ) pfOutputRowPos
>8021	Identifier	pfOutputRowPos
>8022	CastTarget	const char *
>8023	Callee	NTA_ASSERT
>8024	Identifier	NTA_ASSERT
>8025	IncDecOp	 
>8026	IncDec	--
>8027	Identifier	i
>8028	Condition	 
>8029	Identifier	i
>8030	ForInit	 
>8031	AssignmentExpr	i = nNumLeftovers
>8032	Identifier	nNumLeftovers
>8033	Identifier	i
>8034	ForStatement	for ( i = nOutputQuadsPerRow ; i ; i -- )
>8035	CompoundStatement	 
>8036	ExpressionStatement	 
>8037	AssignmentExpr	pfOutputRowNeg += 4
>8038	PrimaryExpression	4
>8039	Identifier	pfOutputRowNeg
>8040	ExpressionStatement	 
>8041	AssignmentExpr	pfOutputRowPos += 4
>8042	PrimaryExpression	4
>8043	Identifier	pfOutputRowPos
>8044	ExpressionStatement	 
>8045	AssignmentExpr	pnInputRow += 4
>8046	PrimaryExpression	4
>8047	Identifier	pnInputRow
>8048	IfStatement	if ( fResponse >= 0.0f )
>8049	ElseStatement	else
>8050	CompoundStatement	 
>8051	ExpressionStatement	 
>8052	AssignmentExpr	pfOutputRowNeg [ 3 ] = fResponse * fGainNeg
>8053	MultiplicativeExpression	fResponse * fGainNeg
>8054	Identifier	fGainNeg
>8055	Identifier	fResponse
>8056	ArrayIndexing	pfOutputRowNeg [ 3 ]
>8057	PrimaryExpression	3
>8058	Identifier	pfOutputRowNeg
>8059	ExpressionStatement	 
>8060	AssignmentExpr	pfOutputRowPos [ 3 ] = 0.0f
>8061	PrimaryExpression	0.0f
>8062	ArrayIndexing	pfOutputRowPos [ 3 ]
>8063	PrimaryExpression	3
>8064	Identifier	pfOutputRowPos
>8065	CompoundStatement	 
>8066	ExpressionStatement	 
>8067	AssignmentExpr	pfOutputRowNeg [ 3 ] = 0.0f
>8068	PrimaryExpression	0.0f
>8069	ArrayIndexing	pfOutputRowNeg [ 3 ]
>8070	PrimaryExpression	3
>8071	Identifier	pfOutputRowNeg
>8072	ExpressionStatement	 
>8073	AssignmentExpr	pfOutputRowPos [ 3 ] = fResponse * fGainPos
>8074	MultiplicativeExpression	fResponse * fGainPos
>8075	Identifier	fGainPos
>8076	Identifier	fResponse
>8077	ArrayIndexing	pfOutputRowPos [ 3 ]
>8078	PrimaryExpression	3
>8079	Identifier	pfOutputRowPos
>8080	Condition	 
>8081	RelationalExpression	fResponse >= 0.0f
>8082	PrimaryExpression	0.0f
>8083	Identifier	fResponse
>8084	ExpressionStatement	 
>8085	AssignmentExpr	fResponse = ( float ) ( pnInputRow [ 3 ] )
>8086	CastExpression	( float ) ( pnInputRow [ 3 ] )
>8087	ArrayIndexing	pnInputRow [ 3 ]
>8088	PrimaryExpression	3
>8089	Identifier	pnInputRow
>8090	CastTarget	float
>8091	Identifier	fResponse
>8092	IfStatement	if ( fResponse >= 0.0f )
>8093	ElseStatement	else
>8094	CompoundStatement	 
>8095	ExpressionStatement	 
>8096	AssignmentExpr	pfOutputRowNeg [ 2 ] = fResponse * fGainNeg
>8097	MultiplicativeExpression	fResponse * fGainNeg
>8098	Identifier	fGainNeg
>8099	Identifier	fResponse
>8100	ArrayIndexing	pfOutputRowNeg [ 2 ]
>8101	PrimaryExpression	2
>8102	Identifier	pfOutputRowNeg
>8103	ExpressionStatement	 
>8104	AssignmentExpr	pfOutputRowPos [ 2 ] = 0.0f
>8105	PrimaryExpression	0.0f
>8106	ArrayIndexing	pfOutputRowPos [ 2 ]
>8107	PrimaryExpression	2
>8108	Identifier	pfOutputRowPos
>8109	CompoundStatement	 
>8110	ExpressionStatement	 
>8111	AssignmentExpr	pfOutputRowNeg [ 2 ] = 0.0f
>8112	PrimaryExpression	0.0f
>8113	ArrayIndexing	pfOutputRowNeg [ 2 ]
>8114	PrimaryExpression	2
>8115	Identifier	pfOutputRowNeg
>8116	ExpressionStatement	 
>8117	AssignmentExpr	pfOutputRowPos [ 2 ] = fResponse * fGainPos
>8118	MultiplicativeExpression	fResponse * fGainPos
>8119	Identifier	fGainPos
>8120	Identifier	fResponse
>8121	ArrayIndexing	pfOutputRowPos [ 2 ]
>8122	PrimaryExpression	2
>8123	Identifier	pfOutputRowPos
>8124	Condition	 
>8125	RelationalExpression	fResponse >= 0.0f
>8126	PrimaryExpression	0.0f
>8127	Identifier	fResponse
>8128	ExpressionStatement	 
>8129	AssignmentExpr	fResponse = ( float ) ( pnInputRow [ 2 ] )
>8130	CastExpression	( float ) ( pnInputRow [ 2 ] )
>8131	ArrayIndexing	pnInputRow [ 2 ]
>8132	PrimaryExpression	2
>8133	Identifier	pnInputRow
>8134	CastTarget	float
>8135	Identifier	fResponse
>8136	IfStatement	if ( fResponse >= 0.0f )
>8137	ElseStatement	else
>8138	CompoundStatement	 
>8139	ExpressionStatement	 
>8140	AssignmentExpr	pfOutputRowNeg [ 1 ] = fResponse * fGainNeg
>8141	MultiplicativeExpression	fResponse * fGainNeg
>8142	Identifier	fGainNeg
>8143	Identifier	fResponse
>8144	ArrayIndexing	pfOutputRowNeg [ 1 ]
>8145	PrimaryExpression	1
>8146	Identifier	pfOutputRowNeg
>8147	ExpressionStatement	 
>8148	AssignmentExpr	pfOutputRowPos [ 1 ] = 0.0f
>8149	PrimaryExpression	0.0f
>8150	ArrayIndexing	pfOutputRowPos [ 1 ]
>8151	PrimaryExpression	1
>8152	Identifier	pfOutputRowPos
>8153	CompoundStatement	 
>8154	ExpressionStatement	 
>8155	AssignmentExpr	pfOutputRowNeg [ 1 ] = 0.0f
>8156	PrimaryExpression	0.0f
>8157	ArrayIndexing	pfOutputRowNeg [ 1 ]
>8158	PrimaryExpression	1
>8159	Identifier	pfOutputRowNeg
>8160	ExpressionStatement	 
>8161	AssignmentExpr	pfOutputRowPos [ 1 ] = fResponse * fGainPos
>8162	MultiplicativeExpression	fResponse * fGainPos
>8163	Identifier	fGainPos
>8164	Identifier	fResponse
>8165	ArrayIndexing	pfOutputRowPos [ 1 ]
>8166	PrimaryExpression	1
>8167	Identifier	pfOutputRowPos
>8168	Condition	 
>8169	RelationalExpression	fResponse >= 0.0f
>8170	PrimaryExpression	0.0f
>8171	Identifier	fResponse
>8172	ExpressionStatement	 
>8173	AssignmentExpr	fResponse = ( float ) ( pnInputRow [ 1 ] )
>8174	CastExpression	( float ) ( pnInputRow [ 1 ] )
>8175	ArrayIndexing	pnInputRow [ 1 ]
>8176	PrimaryExpression	1
>8177	Identifier	pnInputRow
>8178	CastTarget	float
>8179	Identifier	fResponse
>8180	IfStatement	if ( fResponse >= 0.0f )
>8181	ElseStatement	else
>8182	CompoundStatement	 
>8183	ExpressionStatement	 
>8184	AssignmentExpr	* pfOutputRowNeg = fResponse * fGainNeg
>8185	MultiplicativeExpression	fResponse * fGainNeg
>8186	Identifier	fGainNeg
>8187	Identifier	fResponse
>8188	UnaryOp	* pfOutputRowNeg
>8189	Identifier	pfOutputRowNeg
>8190	UnaryOperator	*
>8191	ExpressionStatement	 
>8192	AssignmentExpr	* pfOutputRowPos = 0.0f
>8193	PrimaryExpression	0.0f
>8194	UnaryOp	* pfOutputRowPos
>8195	Identifier	pfOutputRowPos
>8196	UnaryOperator	*
>8197	CompoundStatement	 
>8198	ExpressionStatement	 
>8199	AssignmentExpr	* pfOutputRowNeg = 0.0f
>8200	PrimaryExpression	0.0f
>8201	UnaryOp	* pfOutputRowNeg
>8202	Identifier	pfOutputRowNeg
>8203	UnaryOperator	*
>8204	ExpressionStatement	 
>8205	AssignmentExpr	* pfOutputRowPos = fResponse * fGainPos
>8206	MultiplicativeExpression	fResponse * fGainPos
>8207	Identifier	fGainPos
>8208	Identifier	fResponse
>8209	UnaryOp	* pfOutputRowPos
>8210	Identifier	pfOutputRowPos
>8211	UnaryOperator	*
>8212	Condition	 
>8213	RelationalExpression	fResponse >= 0.0f
>8214	PrimaryExpression	0.0f
>8215	Identifier	fResponse
>8216	ExpressionStatement	 
>8217	AssignmentExpr	fResponse = ( float ) ( pnInputRow [ 0 ] )
>8218	CastExpression	( float ) ( pnInputRow [ 0 ] )
>8219	ArrayIndexing	pnInputRow [ 0 ]
>8220	PrimaryExpression	0
>8221	Identifier	pnInputRow
>8222	CastTarget	float
>8223	Identifier	fResponse
>8224	ExpressionStatement	 
>8225	CallExpression	NTA_ASSERT ( ( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB )
>8226	ArgumentList	( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB
>8227	Argument	( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB
>8228	RelationalExpression	( const char * ) & ( pfOutputRowNeg [ 3 ] ) < pDebugOutputEOMB
>8229	Identifier	pDebugOutputEOMB
>8230	CastExpression	( const char * ) & ( pfOutputRowNeg [ 3 ] )
>8231	UnaryOp	& ( pfOutputRowNeg [ 3 ] )
>8232	ArrayIndexing	pfOutputRowNeg [ 3 ]
>8233	PrimaryExpression	3
>8234	Identifier	pfOutputRowNeg
>8235	UnaryOperator	&
>8236	CastTarget	const char *
>8237	Callee	NTA_ASSERT
>8238	Identifier	NTA_ASSERT
>8239	ExpressionStatement	 
>8240	CallExpression	NTA_ASSERT ( ( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB )
>8241	ArgumentList	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>8242	Argument	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>8243	RelationalExpression	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>8244	Identifier	pDebugOutputEOMB
>8245	CastExpression	( const char * ) & ( pfOutputRowPos [ 3 ] )
>8246	UnaryOp	& ( pfOutputRowPos [ 3 ] )
>8247	ArrayIndexing	pfOutputRowPos [ 3 ]
>8248	PrimaryExpression	3
>8249	Identifier	pfOutputRowPos
>8250	UnaryOperator	&
>8251	CastTarget	const char *
>8252	Callee	NTA_ASSERT
>8253	Identifier	NTA_ASSERT
>8254	ExpressionStatement	 
>8255	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowNeg >= pDebugOutputSOMB )
>8256	ArgumentList	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>8257	Argument	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>8258	RelationalExpression	( const char * ) pfOutputRowNeg >= pDebugOutputSOMB
>8259	Identifier	pDebugOutputSOMB
>8260	CastExpression	( const char * ) pfOutputRowNeg
>8261	Identifier	pfOutputRowNeg
>8262	CastTarget	const char *
>8263	Callee	NTA_ASSERT
>8264	Identifier	NTA_ASSERT
>8265	ExpressionStatement	 
>8266	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>8267	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8268	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8269	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8270	Identifier	pDebugOutputSOMB
>8271	CastExpression	( const char * ) pfOutputRowPos
>8272	Identifier	pfOutputRowPos
>8273	CastTarget	const char *
>8274	Callee	NTA_ASSERT
>8275	Identifier	NTA_ASSERT
>8276	IncDecOp	 
>8277	IncDec	--
>8278	Identifier	i
>8279	Condition	 
>8280	Identifier	i
>8281	ForInit	 
>8282	AssignmentExpr	i = nOutputQuadsPerRow
>8283	Identifier	nOutputQuadsPerRow
>8284	Identifier	i
>8285	Condition	 
>8286	EqualityExpression	ePostProcMethod == POSTPROC_METHOD_RAW
>8287	Identifier	POSTPROC_METHOD_RAW
>8288	Identifier	ePostProcMethod
>8289	ExpressionStatement	 
>8290	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>8291	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>8292	Argument	ePhaseMode == PHASE_MODE_DUAL
>8293	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>8294	Identifier	PHASE_MODE_DUAL
>8295	Identifier	ePhaseMode
>8296	Callee	NTA_ASSERT
>8297	Identifier	NTA_ASSERT
>8298	CompoundStatement	 
>8299	IfStatement	if ( ePostProcMethod == POSTPROC_METHOD_RAW )
>8300	ElseStatement	else
>8301	CompoundStatement	 
>8302	IfStatement	if ( nOverflowMask )
>8303	ElseStatement	else
>8304	CompoundStatement	 
>8305	ForStatement	for ( i = nNumLeftovers ; i ; i -- )
>8306	CompoundStatement	 
>8307	ExpressionStatement	 
>8308	AssignmentExpr	* pfOutputRowPos ++ = pfPostProcLUT [ nSingleBin ]
>8309	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8310	Identifier	nSingleBin
>8311	Identifier	pfPostProcLUT
>8312	UnaryOp	* pfOutputRowPos ++
>8313	IncDecOp	pfOutputRowPos ++
>8314	IncDec	++
>8315	Identifier	pfOutputRowPos
>8316	UnaryOperator	*
>8317	ExpressionStatement	 
>8318	CallExpression	NTA_ASSERT ( nSingleBin <= ( unsigned int ) nMaxLutBin )
>8319	ArgumentList	nSingleBin <= ( unsigned int ) nMaxLutBin
>8320	Argument	nSingleBin <= ( unsigned int ) nMaxLutBin
>8321	RelationalExpression	nSingleBin <= ( unsigned int ) nMaxLutBin
>8322	CastExpression	( unsigned int ) nMaxLutBin
>8323	Identifier	nMaxLutBin
>8324	CastTarget	unsigned int
>8325	Identifier	nSingleBin
>8326	Callee	NTA_ASSERT
>8327	Identifier	NTA_ASSERT
>8328	ExpressionStatement	 
>8329	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( nResponse ) / nDiscreteGainPos )
>8330	CastExpression	( unsigned int ) ( IABS32 ( nResponse ) / nDiscreteGainPos )
>8331	MultiplicativeExpression	IABS32 ( nResponse ) / nDiscreteGainPos
>8332	Identifier	nDiscreteGainPos
>8333	CallExpression	IABS32 ( nResponse )
>8334	ArgumentList	nResponse
>8335	Argument	nResponse
>8336	Identifier	nResponse
>8337	Callee	IABS32
>8338	Identifier	IABS32
>8339	CastTarget	unsigned int
>8340	Identifier	nSingleBin
>8341	ExpressionStatement	 
>8342	AssignmentExpr	nResponse = * pnInputRow ++
>8343	UnaryOp	* pnInputRow ++
>8344	IncDecOp	pnInputRow ++
>8345	IncDec	++
>8346	Identifier	pnInputRow
>8347	UnaryOperator	*
>8348	Identifier	nResponse
>8349	ExpressionStatement	 
>8350	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos < pDebugOutputEOMB )
>8351	ArgumentList	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>8352	Argument	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>8353	RelationalExpression	( const char * ) pfOutputRowPos < pDebugOutputEOMB
>8354	Identifier	pDebugOutputEOMB
>8355	CastExpression	( const char * ) pfOutputRowPos
>8356	Identifier	pfOutputRowPos
>8357	CastTarget	const char *
>8358	Callee	NTA_ASSERT
>8359	Identifier	NTA_ASSERT
>8360	ExpressionStatement	 
>8361	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>8362	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8363	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8364	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8365	Identifier	pDebugOutputSOMB
>8366	CastExpression	( const char * ) pfOutputRowPos
>8367	Identifier	pfOutputRowPos
>8368	CastTarget	const char *
>8369	Callee	NTA_ASSERT
>8370	Identifier	NTA_ASSERT
>8371	IncDecOp	 
>8372	IncDec	--
>8373	Identifier	i
>8374	Condition	 
>8375	Identifier	i
>8376	ForInit	 
>8377	AssignmentExpr	i = nNumLeftovers
>8378	Identifier	nNumLeftovers
>8379	Identifier	i
>8380	ForStatement	for ( i = nOutputQuadsPerRow ; i ; i -- )
>8381	CompoundStatement	 
>8382	ExpressionStatement	 
>8383	AssignmentExpr	pfOutputRowPos += 4
>8384	PrimaryExpression	4
>8385	Identifier	pfOutputRowPos
>8386	ExpressionStatement	 
>8387	AssignmentExpr	pnInputRow += 4
>8388	PrimaryExpression	4
>8389	Identifier	pnInputRow
>8390	ExpressionStatement	 
>8391	AssignmentExpr	pfOutputRowPos [ 3 ] = pfPostProcLUT [ nSingleBin ]
>8392	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8393	Identifier	nSingleBin
>8394	Identifier	pfPostProcLUT
>8395	ArrayIndexing	pfOutputRowPos [ 3 ]
>8396	PrimaryExpression	3
>8397	Identifier	pfOutputRowPos
>8398	ExpressionStatement	 
>8399	CallExpression	NTA_ASSERT ( nSingleBin <= ( unsigned int ) nMaxLutBin )
>8400	ArgumentList	nSingleBin <= ( unsigned int ) nMaxLutBin
>8401	Argument	nSingleBin <= ( unsigned int ) nMaxLutBin
>8402	RelationalExpression	nSingleBin <= ( unsigned int ) nMaxLutBin
>8403	CastExpression	( unsigned int ) nMaxLutBin
>8404	Identifier	nMaxLutBin
>8405	CastTarget	unsigned int
>8406	Identifier	nSingleBin
>8407	Callee	NTA_ASSERT
>8408	Identifier	NTA_ASSERT
>8409	ExpressionStatement	 
>8410	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( pnInputRow [ 3 ] ) / nDiscreteGainPos )
>8411	CastExpression	( unsigned int ) ( IABS32 ( pnInputRow [ 3 ] ) / nDiscreteGainPos )
>8412	MultiplicativeExpression	IABS32 ( pnInputRow [ 3 ] ) / nDiscreteGainPos
>8413	Identifier	nDiscreteGainPos
>8414	CallExpression	IABS32 ( pnInputRow [ 3 ] )
>8415	ArgumentList	pnInputRow [ 3 ]
>8416	Argument	pnInputRow [ 3 ]
>8417	ArrayIndexing	pnInputRow [ 3 ]
>8418	PrimaryExpression	3
>8419	Identifier	pnInputRow
>8420	Callee	IABS32
>8421	Identifier	IABS32
>8422	CastTarget	unsigned int
>8423	Identifier	nSingleBin
>8424	ExpressionStatement	 
>8425	AssignmentExpr	pfOutputRowPos [ 2 ] = pfPostProcLUT [ nSingleBin ]
>8426	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8427	Identifier	nSingleBin
>8428	Identifier	pfPostProcLUT
>8429	ArrayIndexing	pfOutputRowPos [ 2 ]
>8430	PrimaryExpression	2
>8431	Identifier	pfOutputRowPos
>8432	ExpressionStatement	 
>8433	CallExpression	NTA_ASSERT ( nSingleBin <= ( unsigned int ) nMaxLutBin )
>8434	ArgumentList	nSingleBin <= ( unsigned int ) nMaxLutBin
>8435	Argument	nSingleBin <= ( unsigned int ) nMaxLutBin
>8436	RelationalExpression	nSingleBin <= ( unsigned int ) nMaxLutBin
>8437	CastExpression	( unsigned int ) nMaxLutBin
>8438	Identifier	nMaxLutBin
>8439	CastTarget	unsigned int
>8440	Identifier	nSingleBin
>8441	Callee	NTA_ASSERT
>8442	Identifier	NTA_ASSERT
>8443	ExpressionStatement	 
>8444	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( pnInputRow [ 2 ] ) / nDiscreteGainPos )
>8445	CastExpression	( unsigned int ) ( IABS32 ( pnInputRow [ 2 ] ) / nDiscreteGainPos )
>8446	MultiplicativeExpression	IABS32 ( pnInputRow [ 2 ] ) / nDiscreteGainPos
>8447	Identifier	nDiscreteGainPos
>8448	CallExpression	IABS32 ( pnInputRow [ 2 ] )
>8449	ArgumentList	pnInputRow [ 2 ]
>8450	Argument	pnInputRow [ 2 ]
>8451	ArrayIndexing	pnInputRow [ 2 ]
>8452	PrimaryExpression	2
>8453	Identifier	pnInputRow
>8454	Callee	IABS32
>8455	Identifier	IABS32
>8456	CastTarget	unsigned int
>8457	Identifier	nSingleBin
>8458	ExpressionStatement	 
>8459	AssignmentExpr	pfOutputRowPos [ 1 ] = pfPostProcLUT [ nSingleBin ]
>8460	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8461	Identifier	nSingleBin
>8462	Identifier	pfPostProcLUT
>8463	ArrayIndexing	pfOutputRowPos [ 1 ]
>8464	PrimaryExpression	1
>8465	Identifier	pfOutputRowPos
>8466	ExpressionStatement	 
>8467	CallExpression	NTA_ASSERT ( nSingleBin <= ( unsigned int ) nMaxLutBin )
>8468	ArgumentList	nSingleBin <= ( unsigned int ) nMaxLutBin
>8469	Argument	nSingleBin <= ( unsigned int ) nMaxLutBin
>8470	RelationalExpression	nSingleBin <= ( unsigned int ) nMaxLutBin
>8471	CastExpression	( unsigned int ) nMaxLutBin
>8472	Identifier	nMaxLutBin
>8473	CastTarget	unsigned int
>8474	Identifier	nSingleBin
>8475	Callee	NTA_ASSERT
>8476	Identifier	NTA_ASSERT
>8477	ExpressionStatement	 
>8478	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( pnInputRow [ 1 ] ) / nDiscreteGainPos )
>8479	CastExpression	( unsigned int ) ( IABS32 ( pnInputRow [ 1 ] ) / nDiscreteGainPos )
>8480	MultiplicativeExpression	IABS32 ( pnInputRow [ 1 ] ) / nDiscreteGainPos
>8481	Identifier	nDiscreteGainPos
>8482	CallExpression	IABS32 ( pnInputRow [ 1 ] )
>8483	ArgumentList	pnInputRow [ 1 ]
>8484	Argument	pnInputRow [ 1 ]
>8485	ArrayIndexing	pnInputRow [ 1 ]
>8486	PrimaryExpression	1
>8487	Identifier	pnInputRow
>8488	Callee	IABS32
>8489	Identifier	IABS32
>8490	CastTarget	unsigned int
>8491	Identifier	nSingleBin
>8492	ExpressionStatement	 
>8493	AssignmentExpr	* pfOutputRowPos = pfPostProcLUT [ nSingleBin ]
>8494	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8495	Identifier	nSingleBin
>8496	Identifier	pfPostProcLUT
>8497	UnaryOp	* pfOutputRowPos
>8498	Identifier	pfOutputRowPos
>8499	UnaryOperator	*
>8500	ExpressionStatement	 
>8501	CallExpression	NTA_ASSERT ( nSingleBin <= ( unsigned int ) nMaxLutBin )
>8502	ArgumentList	nSingleBin <= ( unsigned int ) nMaxLutBin
>8503	Argument	nSingleBin <= ( unsigned int ) nMaxLutBin
>8504	RelationalExpression	nSingleBin <= ( unsigned int ) nMaxLutBin
>8505	CastExpression	( unsigned int ) nMaxLutBin
>8506	Identifier	nMaxLutBin
>8507	CastTarget	unsigned int
>8508	Identifier	nSingleBin
>8509	Callee	NTA_ASSERT
>8510	Identifier	NTA_ASSERT
>8511	ExpressionStatement	 
>8512	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( * pnInputRow ) / nDiscreteGainPos )
>8513	CastExpression	( unsigned int ) ( IABS32 ( * pnInputRow ) / nDiscreteGainPos )
>8514	MultiplicativeExpression	IABS32 ( * pnInputRow ) / nDiscreteGainPos
>8515	Identifier	nDiscreteGainPos
>8516	CallExpression	IABS32 ( * pnInputRow )
>8517	ArgumentList	* pnInputRow
>8518	Argument	* pnInputRow
>8519	UnaryOp	* pnInputRow
>8520	Identifier	pnInputRow
>8521	UnaryOperator	*
>8522	Callee	IABS32
>8523	Identifier	IABS32
>8524	CastTarget	unsigned int
>8525	Identifier	nSingleBin
>8526	ExpressionStatement	 
>8527	CallExpression	NTA_ASSERT ( ( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB )
>8528	ArgumentList	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>8529	Argument	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>8530	RelationalExpression	( const char * ) & ( pfOutputRowPos [ 3 ] ) < pDebugOutputEOMB
>8531	Identifier	pDebugOutputEOMB
>8532	CastExpression	( const char * ) & ( pfOutputRowPos [ 3 ] )
>8533	UnaryOp	& ( pfOutputRowPos [ 3 ] )
>8534	ArrayIndexing	pfOutputRowPos [ 3 ]
>8535	PrimaryExpression	3
>8536	Identifier	pfOutputRowPos
>8537	UnaryOperator	&
>8538	CastTarget	const char *
>8539	Callee	NTA_ASSERT
>8540	Identifier	NTA_ASSERT
>8541	ExpressionStatement	 
>8542	CallExpression	NTA_ASSERT ( ( const char * ) pfOutputRowPos >= pDebugOutputSOMB )
>8543	ArgumentList	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8544	Argument	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8545	RelationalExpression	( const char * ) pfOutputRowPos >= pDebugOutputSOMB
>8546	Identifier	pDebugOutputSOMB
>8547	CastExpression	( const char * ) pfOutputRowPos
>8548	Identifier	pfOutputRowPos
>8549	CastTarget	const char *
>8550	Callee	NTA_ASSERT
>8551	Identifier	NTA_ASSERT
>8552	IncDecOp	 
>8553	IncDec	--
>8554	Identifier	i
>8555	Condition	 
>8556	Identifier	i
>8557	ForInit	 
>8558	AssignmentExpr	i = nOutputQuadsPerRow
>8559	Identifier	nOutputQuadsPerRow
>8560	Identifier	i
>8561	CompoundStatement	 
>8562	ForStatement	for ( i = nNumLeftovers ; i ; i -- )
>8563	CompoundStatement	 
>8564	ExpressionStatement	 
>8565	AssignmentExpr	* pfOutputRowPos ++ = pfPostProcLUT [ nSingleBin ]
>8566	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8567	Identifier	nSingleBin
>8568	Identifier	pfPostProcLUT
>8569	UnaryOp	* pfOutputRowPos ++
>8570	IncDecOp	pfOutputRowPos ++
>8571	IncDec	++
>8572	Identifier	pfOutputRowPos
>8573	UnaryOperator	*
>8574	IfStatement	if ( nSingleBin & nOverflowMask )
>8575	ExpressionStatement	 
>8576	AssignmentExpr	nSingleBin = nMaxLutBin
>8577	Identifier	nMaxLutBin
>8578	Identifier	nSingleBin
>8579	Condition	 
>8580	BitAndExpression	nSingleBin & nOverflowMask
>8581	Identifier	nOverflowMask
>8582	Identifier	nSingleBin
>8583	ExpressionStatement	 
>8584	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( nResponse ) / nDiscreteGainPos )
>8585	CastExpression	( unsigned int ) ( IABS32 ( nResponse ) / nDiscreteGainPos )
>8586	MultiplicativeExpression	IABS32 ( nResponse ) / nDiscreteGainPos
>8587	Identifier	nDiscreteGainPos
>8588	CallExpression	IABS32 ( nResponse )
>8589	ArgumentList	nResponse
>8590	Argument	nResponse
>8591	Identifier	nResponse
>8592	Callee	IABS32
>8593	Identifier	IABS32
>8594	CastTarget	unsigned int
>8595	Identifier	nSingleBin
>8596	ExpressionStatement	 
>8597	AssignmentExpr	nResponse = * pnInputRow ++
>8598	UnaryOp	* pnInputRow ++
>8599	IncDecOp	pnInputRow ++
>8600	IncDec	++
>8601	Identifier	pnInputRow
>8602	UnaryOperator	*
>8603	Identifier	nResponse
>8604	IncDecOp	 
>8605	IncDec	--
>8606	Identifier	i
>8607	Condition	 
>8608	Identifier	i
>8609	ForInit	 
>8610	AssignmentExpr	i = nNumLeftovers
>8611	Identifier	nNumLeftovers
>8612	Identifier	i
>8613	ForStatement	for ( i = nOutputQuadsPerRow ; i ; i -- )
>8614	CompoundStatement	 
>8615	ExpressionStatement	 
>8616	AssignmentExpr	pfOutputRowPos += 4
>8617	PrimaryExpression	4
>8618	Identifier	pfOutputRowPos
>8619	ExpressionStatement	 
>8620	AssignmentExpr	pnInputRow += 4
>8621	PrimaryExpression	4
>8622	Identifier	pnInputRow
>8623	ExpressionStatement	 
>8624	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 3 ] >= 0.0f )
>8625	ArgumentList	pfOutputRowPos [ 3 ] >= 0.0f
>8626	Argument	pfOutputRowPos [ 3 ] >= 0.0f
>8627	RelationalExpression	pfOutputRowPos [ 3 ] >= 0.0f
>8628	PrimaryExpression	0.0f
>8629	ArrayIndexing	pfOutputRowPos [ 3 ]
>8630	PrimaryExpression	3
>8631	Identifier	pfOutputRowPos
>8632	Callee	NTA_ASSERT
>8633	Identifier	NTA_ASSERT
>8634	ExpressionStatement	 
>8635	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 2 ] >= 0.0f )
>8636	ArgumentList	pfOutputRowPos [ 2 ] >= 0.0f
>8637	Argument	pfOutputRowPos [ 2 ] >= 0.0f
>8638	RelationalExpression	pfOutputRowPos [ 2 ] >= 0.0f
>8639	PrimaryExpression	0.0f
>8640	ArrayIndexing	pfOutputRowPos [ 2 ]
>8641	PrimaryExpression	2
>8642	Identifier	pfOutputRowPos
>8643	Callee	NTA_ASSERT
>8644	Identifier	NTA_ASSERT
>8645	ExpressionStatement	 
>8646	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 1 ] >= 0.0f )
>8647	ArgumentList	pfOutputRowPos [ 1 ] >= 0.0f
>8648	Argument	pfOutputRowPos [ 1 ] >= 0.0f
>8649	RelationalExpression	pfOutputRowPos [ 1 ] >= 0.0f
>8650	PrimaryExpression	0.0f
>8651	ArrayIndexing	pfOutputRowPos [ 1 ]
>8652	PrimaryExpression	1
>8653	Identifier	pfOutputRowPos
>8654	Callee	NTA_ASSERT
>8655	Identifier	NTA_ASSERT
>8656	ExpressionStatement	 
>8657	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 0 ] >= 0.0f )
>8658	ArgumentList	pfOutputRowPos [ 0 ] >= 0.0f
>8659	Argument	pfOutputRowPos [ 0 ] >= 0.0f
>8660	RelationalExpression	pfOutputRowPos [ 0 ] >= 0.0f
>8661	PrimaryExpression	0.0f
>8662	ArrayIndexing	pfOutputRowPos [ 0 ]
>8663	PrimaryExpression	0
>8664	Identifier	pfOutputRowPos
>8665	Callee	NTA_ASSERT
>8666	Identifier	NTA_ASSERT
>8667	ExpressionStatement	 
>8668	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 3 ] <= 1.0f )
>8669	ArgumentList	pfOutputRowPos [ 3 ] <= 1.0f
>8670	Argument	pfOutputRowPos [ 3 ] <= 1.0f
>8671	RelationalExpression	pfOutputRowPos [ 3 ] <= 1.0f
>8672	PrimaryExpression	1.0f
>8673	ArrayIndexing	pfOutputRowPos [ 3 ]
>8674	PrimaryExpression	3
>8675	Identifier	pfOutputRowPos
>8676	Callee	NTA_ASSERT
>8677	Identifier	NTA_ASSERT
>8678	ExpressionStatement	 
>8679	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 2 ] <= 1.0f )
>8680	ArgumentList	pfOutputRowPos [ 2 ] <= 1.0f
>8681	Argument	pfOutputRowPos [ 2 ] <= 1.0f
>8682	RelationalExpression	pfOutputRowPos [ 2 ] <= 1.0f
>8683	PrimaryExpression	1.0f
>8684	ArrayIndexing	pfOutputRowPos [ 2 ]
>8685	PrimaryExpression	2
>8686	Identifier	pfOutputRowPos
>8687	Callee	NTA_ASSERT
>8688	Identifier	NTA_ASSERT
>8689	ExpressionStatement	 
>8690	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 1 ] <= 1.0f )
>8691	ArgumentList	pfOutputRowPos [ 1 ] <= 1.0f
>8692	Argument	pfOutputRowPos [ 1 ] <= 1.0f
>8693	RelationalExpression	pfOutputRowPos [ 1 ] <= 1.0f
>8694	PrimaryExpression	1.0f
>8695	ArrayIndexing	pfOutputRowPos [ 1 ]
>8696	PrimaryExpression	1
>8697	Identifier	pfOutputRowPos
>8698	Callee	NTA_ASSERT
>8699	Identifier	NTA_ASSERT
>8700	ExpressionStatement	 
>8701	CallExpression	NTA_ASSERT ( pfOutputRowPos [ 0 ] <= 1.0f )
>8702	ArgumentList	pfOutputRowPos [ 0 ] <= 1.0f
>8703	Argument	pfOutputRowPos [ 0 ] <= 1.0f
>8704	RelationalExpression	pfOutputRowPos [ 0 ] <= 1.0f
>8705	PrimaryExpression	1.0f
>8706	ArrayIndexing	pfOutputRowPos [ 0 ]
>8707	PrimaryExpression	0
>8708	Identifier	pfOutputRowPos
>8709	Callee	NTA_ASSERT
>8710	Identifier	NTA_ASSERT
>8711	ExpressionStatement	 
>8712	AssignmentExpr	pfOutputRowPos [ 3 ] = pfPostProcLUT [ nSingleBin ]
>8713	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8714	Identifier	nSingleBin
>8715	Identifier	pfPostProcLUT
>8716	ArrayIndexing	pfOutputRowPos [ 3 ]
>8717	PrimaryExpression	3
>8718	Identifier	pfOutputRowPos
>8719	IfStatement	if ( nSingleBin & nOverflowMask )
>8720	ExpressionStatement	 
>8721	AssignmentExpr	nSingleBin = nMaxLutBin
>8722	Identifier	nMaxLutBin
>8723	Identifier	nSingleBin
>8724	Condition	 
>8725	BitAndExpression	nSingleBin & nOverflowMask
>8726	Identifier	nOverflowMask
>8727	Identifier	nSingleBin
>8728	ExpressionStatement	 
>8729	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( pnInputRow [ 3 ] ) / nDiscreteGainPos )
>8730	CastExpression	( unsigned int ) ( IABS32 ( pnInputRow [ 3 ] ) / nDiscreteGainPos )
>8731	MultiplicativeExpression	IABS32 ( pnInputRow [ 3 ] ) / nDiscreteGainPos
>8732	Identifier	nDiscreteGainPos
>8733	CallExpression	IABS32 ( pnInputRow [ 3 ] )
>8734	ArgumentList	pnInputRow [ 3 ]
>8735	Argument	pnInputRow [ 3 ]
>8736	ArrayIndexing	pnInputRow [ 3 ]
>8737	PrimaryExpression	3
>8738	Identifier	pnInputRow
>8739	Callee	IABS32
>8740	Identifier	IABS32
>8741	CastTarget	unsigned int
>8742	Identifier	nSingleBin
>8743	ExpressionStatement	 
>8744	AssignmentExpr	pfOutputRowPos [ 2 ] = pfPostProcLUT [ nSingleBin ]
>8745	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8746	Identifier	nSingleBin
>8747	Identifier	pfPostProcLUT
>8748	ArrayIndexing	pfOutputRowPos [ 2 ]
>8749	PrimaryExpression	2
>8750	Identifier	pfOutputRowPos
>8751	IfStatement	if ( nSingleBin & nOverflowMask )
>8752	ExpressionStatement	 
>8753	AssignmentExpr	nSingleBin = nMaxLutBin
>8754	Identifier	nMaxLutBin
>8755	Identifier	nSingleBin
>8756	Condition	 
>8757	BitAndExpression	nSingleBin & nOverflowMask
>8758	Identifier	nOverflowMask
>8759	Identifier	nSingleBin
>8760	ExpressionStatement	 
>8761	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( pnInputRow [ 2 ] ) / nDiscreteGainPos )
>8762	CastExpression	( unsigned int ) ( IABS32 ( pnInputRow [ 2 ] ) / nDiscreteGainPos )
>8763	MultiplicativeExpression	IABS32 ( pnInputRow [ 2 ] ) / nDiscreteGainPos
>8764	Identifier	nDiscreteGainPos
>8765	CallExpression	IABS32 ( pnInputRow [ 2 ] )
>8766	ArgumentList	pnInputRow [ 2 ]
>8767	Argument	pnInputRow [ 2 ]
>8768	ArrayIndexing	pnInputRow [ 2 ]
>8769	PrimaryExpression	2
>8770	Identifier	pnInputRow
>8771	Callee	IABS32
>8772	Identifier	IABS32
>8773	CastTarget	unsigned int
>8774	Identifier	nSingleBin
>8775	ExpressionStatement	 
>8776	AssignmentExpr	pfOutputRowPos [ 1 ] = pfPostProcLUT [ nSingleBin ]
>8777	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8778	Identifier	nSingleBin
>8779	Identifier	pfPostProcLUT
>8780	ArrayIndexing	pfOutputRowPos [ 1 ]
>8781	PrimaryExpression	1
>8782	Identifier	pfOutputRowPos
>8783	IfStatement	if ( nSingleBin & nOverflowMask )
>8784	ExpressionStatement	 
>8785	AssignmentExpr	nSingleBin = nMaxLutBin
>8786	Identifier	nMaxLutBin
>8787	Identifier	nSingleBin
>8788	Condition	 
>8789	BitAndExpression	nSingleBin & nOverflowMask
>8790	Identifier	nOverflowMask
>8791	Identifier	nSingleBin
>8792	ExpressionStatement	 
>8793	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( pnInputRow [ 1 ] ) / nDiscreteGainPos )
>8794	CastExpression	( unsigned int ) ( IABS32 ( pnInputRow [ 1 ] ) / nDiscreteGainPos )
>8795	MultiplicativeExpression	IABS32 ( pnInputRow [ 1 ] ) / nDiscreteGainPos
>8796	Identifier	nDiscreteGainPos
>8797	CallExpression	IABS32 ( pnInputRow [ 1 ] )
>8798	ArgumentList	pnInputRow [ 1 ]
>8799	Argument	pnInputRow [ 1 ]
>8800	ArrayIndexing	pnInputRow [ 1 ]
>8801	PrimaryExpression	1
>8802	Identifier	pnInputRow
>8803	Callee	IABS32
>8804	Identifier	IABS32
>8805	CastTarget	unsigned int
>8806	Identifier	nSingleBin
>8807	ExpressionStatement	 
>8808	AssignmentExpr	* pfOutputRowPos = pfPostProcLUT [ nSingleBin ]
>8809	ArrayIndexing	pfPostProcLUT [ nSingleBin ]
>8810	Identifier	nSingleBin
>8811	Identifier	pfPostProcLUT
>8812	UnaryOp	* pfOutputRowPos
>8813	Identifier	pfOutputRowPos
>8814	UnaryOperator	*
>8815	IfStatement	if ( nSingleBin & nOverflowMask )
>8816	ExpressionStatement	 
>8817	AssignmentExpr	nSingleBin = nMaxLutBin
>8818	Identifier	nMaxLutBin
>8819	Identifier	nSingleBin
>8820	Condition	 
>8821	BitAndExpression	nSingleBin & nOverflowMask
>8822	Identifier	nOverflowMask
>8823	Identifier	nSingleBin
>8824	ExpressionStatement	 
>8825	AssignmentExpr	nSingleBin = ( unsigned int ) ( IABS32 ( * pnInputRow ) / nDiscreteGainPos )
>8826	CastExpression	( unsigned int ) ( IABS32 ( * pnInputRow ) / nDiscreteGainPos )
>8827	MultiplicativeExpression	IABS32 ( * pnInputRow ) / nDiscreteGainPos
>8828	Identifier	nDiscreteGainPos
>8829	CallExpression	IABS32 ( * pnInputRow )
>8830	ArgumentList	* pnInputRow
>8831	Argument	* pnInputRow
>8832	UnaryOp	* pnInputRow
>8833	Identifier	pnInputRow
>8834	UnaryOperator	*
>8835	Callee	IABS32
>8836	Identifier	IABS32
>8837	CastTarget	unsigned int
>8838	Identifier	nSingleBin
>8839	IncDecOp	 
>8840	IncDec	--
>8841	Identifier	i
>8842	Condition	 
>8843	Identifier	i
>8844	ForInit	 
>8845	AssignmentExpr	i = nOutputQuadsPerRow
>8846	Identifier	nOutputQuadsPerRow
>8847	Identifier	i
>8848	Condition	 
>8849	Identifier	nOverflowMask
>8850	CompoundStatement	 
>8851	ForStatement	for ( i = nNumLeftovers ; i ; i -- )
>8852	CompoundStatement	 
>8853	ExpressionStatement	 
>8854	IncDecOp	pnInputRow ++
>8855	IncDec	++
>8856	Identifier	pnInputRow
>8857	ExpressionStatement	 
>8858	AssignmentExpr	* pfOutputRowPos ++ = fGainPos * ( float ) ( IABS32 ( * pnInputRow ) )
>8859	MultiplicativeExpression	fGainPos * ( float ) ( IABS32 ( * pnInputRow ) )
>8860	CastExpression	( float ) ( IABS32 ( * pnInputRow ) )
>8861	CallExpression	IABS32 ( * pnInputRow )
>8862	ArgumentList	* pnInputRow
>8863	Argument	* pnInputRow
>8864	UnaryOp	* pnInputRow
>8865	Identifier	pnInputRow
>8866	UnaryOperator	*
>8867	Callee	IABS32
>8868	Identifier	IABS32
>8869	CastTarget	float
>8870	Identifier	fGainPos
>8871	UnaryOp	* pfOutputRowPos ++
>8872	IncDecOp	pfOutputRowPos ++
>8873	IncDec	++
>8874	Identifier	pfOutputRowPos
>8875	UnaryOperator	*
>8876	IncDecOp	 
>8877	IncDec	--
>8878	Identifier	i
>8879	Condition	 
>8880	Identifier	i
>8881	ForInit	 
>8882	AssignmentExpr	i = nNumLeftovers
>8883	Identifier	nNumLeftovers
>8884	Identifier	i
>8885	ForStatement	for ( i = nOutputQuadsPerRow ; i ; i -- )
>8886	CompoundStatement	 
>8887	ExpressionStatement	 
>8888	AssignmentExpr	pfOutputRowPos += 4
>8889	PrimaryExpression	4
>8890	Identifier	pfOutputRowPos
>8891	ExpressionStatement	 
>8892	AssignmentExpr	pnInputRow += 4
>8893	PrimaryExpression	4
>8894	Identifier	pnInputRow
>8895	ExpressionStatement	 
>8896	AssignmentExpr	pfOutputRowPos [ 3 ] = fGainPos * ( float ) ( IABS32 ( pnInputRow [ 3 ] ) )
>8897	MultiplicativeExpression	fGainPos * ( float ) ( IABS32 ( pnInputRow [ 3 ] ) )
>8898	CastExpression	( float ) ( IABS32 ( pnInputRow [ 3 ] ) )
>8899	CallExpression	IABS32 ( pnInputRow [ 3 ] )
>8900	ArgumentList	pnInputRow [ 3 ]
>8901	Argument	pnInputRow [ 3 ]
>8902	ArrayIndexing	pnInputRow [ 3 ]
>8903	PrimaryExpression	3
>8904	Identifier	pnInputRow
>8905	Callee	IABS32
>8906	Identifier	IABS32
>8907	CastTarget	float
>8908	Identifier	fGainPos
>8909	ArrayIndexing	pfOutputRowPos [ 3 ]
>8910	PrimaryExpression	3
>8911	Identifier	pfOutputRowPos
>8912	ExpressionStatement	 
>8913	AssignmentExpr	pfOutputRowPos [ 2 ] = fGainPos * ( float ) ( IABS32 ( pnInputRow [ 2 ] ) )
>8914	MultiplicativeExpression	fGainPos * ( float ) ( IABS32 ( pnInputRow [ 2 ] ) )
>8915	CastExpression	( float ) ( IABS32 ( pnInputRow [ 2 ] ) )
>8916	CallExpression	IABS32 ( pnInputRow [ 2 ] )
>8917	ArgumentList	pnInputRow [ 2 ]
>8918	Argument	pnInputRow [ 2 ]
>8919	ArrayIndexing	pnInputRow [ 2 ]
>8920	PrimaryExpression	2
>8921	Identifier	pnInputRow
>8922	Callee	IABS32
>8923	Identifier	IABS32
>8924	CastTarget	float
>8925	Identifier	fGainPos
>8926	ArrayIndexing	pfOutputRowPos [ 2 ]
>8927	PrimaryExpression	2
>8928	Identifier	pfOutputRowPos
>8929	ExpressionStatement	 
>8930	AssignmentExpr	pfOutputRowPos [ 1 ] = fGainPos * ( float ) ( IABS32 ( pnInputRow [ 1 ] ) )
>8931	MultiplicativeExpression	fGainPos * ( float ) ( IABS32 ( pnInputRow [ 1 ] ) )
>8932	CastExpression	( float ) ( IABS32 ( pnInputRow [ 1 ] ) )
>8933	CallExpression	IABS32 ( pnInputRow [ 1 ] )
>8934	ArgumentList	pnInputRow [ 1 ]
>8935	Argument	pnInputRow [ 1 ]
>8936	ArrayIndexing	pnInputRow [ 1 ]
>8937	PrimaryExpression	1
>8938	Identifier	pnInputRow
>8939	Callee	IABS32
>8940	Identifier	IABS32
>8941	CastTarget	float
>8942	Identifier	fGainPos
>8943	ArrayIndexing	pfOutputRowPos [ 1 ]
>8944	PrimaryExpression	1
>8945	Identifier	pfOutputRowPos
>8946	ExpressionStatement	 
>8947	AssignmentExpr	pfOutputRowPos [ 0 ] = fGainPos * ( float ) ( IABS32 ( pnInputRow [ 0 ] ) )
>8948	MultiplicativeExpression	fGainPos * ( float ) ( IABS32 ( pnInputRow [ 0 ] ) )
>8949	CastExpression	( float ) ( IABS32 ( pnInputRow [ 0 ] ) )
>8950	CallExpression	IABS32 ( pnInputRow [ 0 ] )
>8951	ArgumentList	pnInputRow [ 0 ]
>8952	Argument	pnInputRow [ 0 ]
>8953	ArrayIndexing	pnInputRow [ 0 ]
>8954	PrimaryExpression	0
>8955	Identifier	pnInputRow
>8956	Callee	IABS32
>8957	Identifier	IABS32
>8958	CastTarget	float
>8959	Identifier	fGainPos
>8960	ArrayIndexing	pfOutputRowPos [ 0 ]
>8961	PrimaryExpression	0
>8962	Identifier	pfOutputRowPos
>8963	IncDecOp	 
>8964	IncDec	--
>8965	Identifier	i
>8966	Condition	 
>8967	Identifier	i
>8968	ForInit	 
>8969	AssignmentExpr	i = nOutputQuadsPerRow
>8970	Identifier	nOutputQuadsPerRow
>8971	Identifier	i
>8972	Condition	 
>8973	EqualityExpression	ePostProcMethod == POSTPROC_METHOD_RAW
>8974	Identifier	POSTPROC_METHOD_RAW
>8975	Identifier	ePostProcMethod
>8976	Condition	 
>8977	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>8978	Identifier	PHASE_MODE_SINGLE
>8979	Identifier	ePhaseMode
>8980	ExpressionStatement	 
>8981	AssignmentExpr	pnInputRow += psBox -> nLeft
>8982	PtrMemberAccess	psBox -> nLeft
>8983	Identifier	nLeft
>8984	Identifier	psBox
>8985	Identifier	pnInputRow
>8986	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>8987	ElseStatement	else
>8988	CompoundStatement	 
>8989	ForStatement	for ( i = psBox -> nLeft ; i ; i -- )
>8990	CompoundStatement	 
>8991	ExpressionStatement	 
>8992	AssignmentExpr	* pfOutputRowNeg ++ = NULL_RESPONSE
>8993	Identifier	NULL_RESPONSE
>8994	UnaryOp	* pfOutputRowNeg ++
>8995	IncDecOp	pfOutputRowNeg ++
>8996	IncDec	++
>8997	Identifier	pfOutputRowNeg
>8998	UnaryOperator	*
>8999	ExpressionStatement	 
>9000	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>9001	Identifier	NULL_RESPONSE
>9002	UnaryOp	* pfOutputRowPos ++
>9003	IncDecOp	pfOutputRowPos ++
>9004	IncDec	++
>9005	Identifier	pfOutputRowPos
>9006	UnaryOperator	*
>9007	IncDecOp	 
>9008	IncDec	--
>9009	Identifier	i
>9010	Condition	 
>9011	Identifier	i
>9012	ForInit	 
>9013	AssignmentExpr	i = psBox -> nLeft
>9014	PtrMemberAccess	psBox -> nLeft
>9015	Identifier	nLeft
>9016	Identifier	psBox
>9017	Identifier	i
>9018	ExpressionStatement	 
>9019	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>9020	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>9021	Argument	ePhaseMode == PHASE_MODE_DUAL
>9022	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>9023	Identifier	PHASE_MODE_DUAL
>9024	Identifier	ePhaseMode
>9025	Callee	NTA_ASSERT
>9026	Identifier	NTA_ASSERT
>9027	CompoundStatement	 
>9028	ForStatement	for ( i = psBox -> nLeft ; i ; i -- )
>9029	ExpressionStatement	 
>9030	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>9031	Identifier	NULL_RESPONSE
>9032	UnaryOp	* pfOutputRowPos ++
>9033	IncDecOp	pfOutputRowPos ++
>9034	IncDec	++
>9035	Identifier	pfOutputRowPos
>9036	UnaryOperator	*
>9037	IncDecOp	 
>9038	IncDec	--
>9039	Identifier	i
>9040	Condition	 
>9041	Identifier	i
>9042	ForInit	 
>9043	AssignmentExpr	i = psBox -> nLeft
>9044	PtrMemberAccess	psBox -> nLeft
>9045	Identifier	nLeft
>9046	Identifier	psBox
>9047	Identifier	i
>9048	Condition	 
>9049	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>9050	Identifier	PHASE_MODE_SINGLE
>9051	Identifier	ePhaseMode
>9052	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>9053	ExpressionStatement	 
>9054	AssignmentExpr	pfOutputRowNeg = pfOutputNeg
>9055	Identifier	pfOutputNeg
>9056	Identifier	pfOutputRowNeg
>9057	Condition	 
>9058	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>9059	Identifier	PHASE_MODE_DUAL
>9060	Identifier	ePhaseMode
>9061	ExpressionStatement	 
>9062	AssignmentExpr	pfOutputRowPos = pfOutputPos
>9063	Identifier	pfOutputPos
>9064	Identifier	pfOutputRowPos
>9065	ExpressionStatement	 
>9066	AssignmentExpr	pnInputRow = pnInput
>9067	Identifier	pnInput
>9068	Identifier	pnInputRow
>9069	IncDecOp	 
>9070	IncDec	--
>9071	Identifier	j
>9072	Condition	 
>9073	Identifier	j
>9074	ForInit	 
>9075	AssignmentExpr	j = nOutputRows
>9076	Identifier	nOutputRows
>9077	Identifier	j
>9078	ExpressionStatement	 
>9079	AssignmentExpr	pnInput += nInputRowStride * psBox -> nTop
>9080	MultiplicativeExpression	nInputRowStride * psBox -> nTop
>9081	PtrMemberAccess	psBox -> nTop
>9082	Identifier	nTop
>9083	Identifier	psBox
>9084	Identifier	nInputRowStride
>9085	Identifier	pnInput
>9086	ForStatement	for ( j = nNumBlankTopRows ; j ; j -- )
>9087	CompoundStatement	 
>9088	IfStatement	if ( ePhaseMode == PHASE_MODE_SINGLE )
>9089	ElseStatement	else
>9090	CompoundStatement	 
>9091	ExpressionStatement	 
>9092	AssignmentExpr	pfOutputNeg += nOutputRowStride
>9093	Identifier	nOutputRowStride
>9094	Identifier	pfOutputNeg
>9095	ExpressionStatement	 
>9096	AssignmentExpr	pfOutputPos += nOutputRowStride
>9097	Identifier	nOutputRowStride
>9098	Identifier	pfOutputPos
>9099	ForStatement	for ( i = nTotalLeftovers ; i ; i -- )
>9100	CompoundStatement	 
>9101	ExpressionStatement	 
>9102	AssignmentExpr	* pfOutputRowNeg ++ = NULL_RESPONSE
>9103	Identifier	NULL_RESPONSE
>9104	UnaryOp	* pfOutputRowNeg ++
>9105	IncDecOp	pfOutputRowNeg ++
>9106	IncDec	++
>9107	Identifier	pfOutputRowNeg
>9108	UnaryOperator	*
>9109	ExpressionStatement	 
>9110	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>9111	Identifier	NULL_RESPONSE
>9112	UnaryOp	* pfOutputRowPos ++
>9113	IncDecOp	pfOutputRowPos ++
>9114	IncDec	++
>9115	Identifier	pfOutputRowPos
>9116	UnaryOperator	*
>9117	IncDecOp	 
>9118	IncDec	--
>9119	Identifier	i
>9120	Condition	 
>9121	Identifier	i
>9122	ForInit	 
>9123	AssignmentExpr	i = nTotalLeftovers
>9124	Identifier	nTotalLeftovers
>9125	Identifier	i
>9126	ForStatement	for ( i = nTotalQuadsPerRow ; i ; i -- )
>9127	CompoundStatement	 
>9128	ExpressionStatement	 
>9129	AssignmentExpr	pfOutputRowNeg += 4
>9130	PrimaryExpression	4
>9131	Identifier	pfOutputRowNeg
>9132	ExpressionStatement	 
>9133	AssignmentExpr	pfOutputRowPos += 4
>9134	PrimaryExpression	4
>9135	Identifier	pfOutputRowPos
>9136	ExpressionStatement	 
>9137	AssignmentExpr	pfOutputRowNeg [ 3 ] = NULL_RESPONSE
>9138	Identifier	NULL_RESPONSE
>9139	ArrayIndexing	pfOutputRowNeg [ 3 ]
>9140	PrimaryExpression	3
>9141	Identifier	pfOutputRowNeg
>9142	ExpressionStatement	 
>9143	AssignmentExpr	pfOutputRowPos [ 3 ] = NULL_RESPONSE
>9144	Identifier	NULL_RESPONSE
>9145	ArrayIndexing	pfOutputRowPos [ 3 ]
>9146	PrimaryExpression	3
>9147	Identifier	pfOutputRowPos
>9148	ExpressionStatement	 
>9149	AssignmentExpr	pfOutputRowNeg [ 2 ] = NULL_RESPONSE
>9150	Identifier	NULL_RESPONSE
>9151	ArrayIndexing	pfOutputRowNeg [ 2 ]
>9152	PrimaryExpression	2
>9153	Identifier	pfOutputRowNeg
>9154	ExpressionStatement	 
>9155	AssignmentExpr	pfOutputRowPos [ 2 ] = NULL_RESPONSE
>9156	Identifier	NULL_RESPONSE
>9157	ArrayIndexing	pfOutputRowPos [ 2 ]
>9158	PrimaryExpression	2
>9159	Identifier	pfOutputRowPos
>9160	ExpressionStatement	 
>9161	AssignmentExpr	pfOutputRowNeg [ 1 ] = NULL_RESPONSE
>9162	Identifier	NULL_RESPONSE
>9163	ArrayIndexing	pfOutputRowNeg [ 1 ]
>9164	PrimaryExpression	1
>9165	Identifier	pfOutputRowNeg
>9166	ExpressionStatement	 
>9167	AssignmentExpr	pfOutputRowPos [ 1 ] = NULL_RESPONSE
>9168	Identifier	NULL_RESPONSE
>9169	ArrayIndexing	pfOutputRowPos [ 1 ]
>9170	PrimaryExpression	1
>9171	Identifier	pfOutputRowPos
>9172	ExpressionStatement	 
>9173	AssignmentExpr	pfOutputRowNeg [ 0 ] = NULL_RESPONSE
>9174	Identifier	NULL_RESPONSE
>9175	ArrayIndexing	pfOutputRowNeg [ 0 ]
>9176	PrimaryExpression	0
>9177	Identifier	pfOutputRowNeg
>9178	ExpressionStatement	 
>9179	AssignmentExpr	pfOutputRowPos [ 0 ] = NULL_RESPONSE
>9180	Identifier	NULL_RESPONSE
>9181	ArrayIndexing	pfOutputRowPos [ 0 ]
>9182	PrimaryExpression	0
>9183	Identifier	pfOutputRowPos
>9184	IncDecOp	 
>9185	IncDec	--
>9186	Identifier	i
>9187	Condition	 
>9188	Identifier	i
>9189	ForInit	 
>9190	AssignmentExpr	i = nTotalQuadsPerRow
>9191	Identifier	nTotalQuadsPerRow
>9192	Identifier	i
>9193	ExpressionStatement	 
>9194	AssignmentExpr	pfOutputRowNeg = pfOutputNeg
>9195	Identifier	pfOutputNeg
>9196	Identifier	pfOutputRowNeg
>9197	ExpressionStatement	 
>9198	AssignmentExpr	pfOutputRowPos = pfOutputPos
>9199	Identifier	pfOutputPos
>9200	Identifier	pfOutputRowPos
>9201	ExpressionStatement	 
>9202	CallExpression	NTA_ASSERT ( ePhaseMode == PHASE_MODE_DUAL )
>9203	ArgumentList	ePhaseMode == PHASE_MODE_DUAL
>9204	Argument	ePhaseMode == PHASE_MODE_DUAL
>9205	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>9206	Identifier	PHASE_MODE_DUAL
>9207	Identifier	ePhaseMode
>9208	Callee	NTA_ASSERT
>9209	Identifier	NTA_ASSERT
>9210	CompoundStatement	 
>9211	ExpressionStatement	 
>9212	AssignmentExpr	pfOutputPos += nOutputRowStride
>9213	Identifier	nOutputRowStride
>9214	Identifier	pfOutputPos
>9215	ForStatement	for ( i = nTotalLeftovers ; i ; i -- )
>9216	ExpressionStatement	 
>9217	AssignmentExpr	* pfOutputRowPos ++ = NULL_RESPONSE
>9218	Identifier	NULL_RESPONSE
>9219	UnaryOp	* pfOutputRowPos ++
>9220	IncDecOp	pfOutputRowPos ++
>9221	IncDec	++
>9222	Identifier	pfOutputRowPos
>9223	UnaryOperator	*
>9224	IncDecOp	 
>9225	IncDec	--
>9226	Identifier	i
>9227	Condition	 
>9228	Identifier	i
>9229	ForInit	 
>9230	AssignmentExpr	i = nTotalLeftovers
>9231	Identifier	nTotalLeftovers
>9232	Identifier	i
>9233	ForStatement	for ( i = nTotalQuadsPerRow ; i ; i -- )
>9234	CompoundStatement	 
>9235	ExpressionStatement	 
>9236	AssignmentExpr	pfOutputRowPos += 4
>9237	PrimaryExpression	4
>9238	Identifier	pfOutputRowPos
>9239	ExpressionStatement	 
>9240	AssignmentExpr	pfOutputRowPos [ 3 ] = NULL_RESPONSE
>9241	Identifier	NULL_RESPONSE
>9242	ArrayIndexing	pfOutputRowPos [ 3 ]
>9243	PrimaryExpression	3
>9244	Identifier	pfOutputRowPos
>9245	ExpressionStatement	 
>9246	AssignmentExpr	pfOutputRowPos [ 2 ] = NULL_RESPONSE
>9247	Identifier	NULL_RESPONSE
>9248	ArrayIndexing	pfOutputRowPos [ 2 ]
>9249	PrimaryExpression	2
>9250	Identifier	pfOutputRowPos
>9251	ExpressionStatement	 
>9252	AssignmentExpr	pfOutputRowPos [ 1 ] = NULL_RESPONSE
>9253	Identifier	NULL_RESPONSE
>9254	ArrayIndexing	pfOutputRowPos [ 1 ]
>9255	PrimaryExpression	1
>9256	Identifier	pfOutputRowPos
>9257	ExpressionStatement	 
>9258	AssignmentExpr	pfOutputRowPos [ 0 ] = NULL_RESPONSE
>9259	Identifier	NULL_RESPONSE
>9260	ArrayIndexing	pfOutputRowPos [ 0 ]
>9261	PrimaryExpression	0
>9262	Identifier	pfOutputRowPos
>9263	IncDecOp	 
>9264	IncDec	--
>9265	Identifier	i
>9266	Condition	 
>9267	Identifier	i
>9268	ForInit	 
>9269	AssignmentExpr	i = nTotalQuadsPerRow
>9270	Identifier	nTotalQuadsPerRow
>9271	Identifier	i
>9272	ExpressionStatement	 
>9273	AssignmentExpr	pfOutputRowPos = pfOutputPos
>9274	Identifier	pfOutputPos
>9275	Identifier	pfOutputRowPos
>9276	Condition	 
>9277	EqualityExpression	ePhaseMode == PHASE_MODE_SINGLE
>9278	Identifier	PHASE_MODE_SINGLE
>9279	Identifier	ePhaseMode
>9280	IncDecOp	 
>9281	IncDec	--
>9282	Identifier	j
>9283	Condition	 
>9284	Identifier	j
>9285	ForInit	 
>9286	AssignmentExpr	j = nNumBlankTopRows
>9287	Identifier	nNumBlankTopRows
>9288	Identifier	j
>9289	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>9290	ExpressionStatement	 
>9291	AssignmentExpr	pfOutputNeg = pfOutputPos + IMAGESET_PLANES ( psBufferIn ) * IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * \
>9292	AdditiveExpression	pfOutputPos + IMAGESET_PLANES ( psBufferIn ) * IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>9293	MultiplicativeExpression	IMAGESET_PLANES ( psBufferIn ) * IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>9294	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>9295	SizeofExpr	sizeof ( * pfOutputBase )
>9296	UnaryOp	* pfOutputBase
>9297	Identifier	pfOutputBase
>9298	UnaryOperator	*
>9299	Sizeof	sizeof
>9300	CallExpression	IMAGESET_PLANESTRIDE ( psOutput )
>9301	ArgumentList	psOutput
>9302	Argument	psOutput
>9303	Identifier	psOutput
>9304	Callee	IMAGESET_PLANESTRIDE
>9305	Identifier	IMAGESET_PLANESTRIDE
>9306	CallExpression	IMAGESET_PLANES ( psBufferIn )
>9307	ArgumentList	psBufferIn
>9308	Argument	psBufferIn
>9309	Identifier	psBufferIn
>9310	Callee	IMAGESET_PLANES
>9311	Identifier	IMAGESET_PLANES
>9312	Identifier	pfOutputPos
>9313	Identifier	pfOutputNeg
>9314	Condition	 
>9315	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>9316	Identifier	PHASE_MODE_DUAL
>9317	Identifier	ePhaseMode
>9318	ExpressionStatement	 
>9319	AssignmentExpr	pfOutputPos = pfOutputBase
>9320	Identifier	pfOutputBase
>9321	Identifier	pfOutputPos
>9322	IdentifierDeclStatement	 
>9323	IdentifierDecl	* pnInput = pnInputBase
>9324	AssignmentExpr	* pnInput = pnInputBase
>9325	Identifier	pnInputBase
>9326	Identifier	pnInputBase
>9327	Identifier	pnInput
>9328	IdentifierDeclType	int *
>9329	IfStatement	if ( ePostProcMethod != POSTPROC_METHOD_RAW )
>9330	CompoundStatement	 
>9331	IfStatement	if ( ePhaseMode == PHASE_MODE_DUAL )
>9332	ExpressionStatement	 
>9333	AssignmentExpr	nDiscreteGainNeg = int ( 1.0f / ( fPostProcScalar * fGainNeg ) )
>9334	CallExpression	int ( 1.0f / ( fPostProcScalar * fGainNeg ) )
>9335	ArgumentList	1.0f / ( fPostProcScalar * fGainNeg )
>9336	Argument	1.0f / ( fPostProcScalar * fGainNeg )
>9337	MultiplicativeExpression	1.0f / ( fPostProcScalar * fGainNeg )
>9338	MultiplicativeExpression	fPostProcScalar * fGainNeg
>9339	Identifier	fGainNeg
>9340	Identifier	fPostProcScalar
>9341	PrimaryExpression	1.0f
>9342	Callee	int
>9343	Identifier	int
>9344	Identifier	nDiscreteGainNeg
>9345	Condition	 
>9346	EqualityExpression	ePhaseMode == PHASE_MODE_DUAL
>9347	Identifier	PHASE_MODE_DUAL
>9348	Identifier	ePhaseMode
>9349	ExpressionStatement	 
>9350	AssignmentExpr	nDiscreteGainPos = int ( 1.0f / ( fPostProcScalar * fGainPos ) )
>9351	CallExpression	int ( 1.0f / ( fPostProcScalar * fGainPos ) )
>9352	ArgumentList	1.0f / ( fPostProcScalar * fGainPos )
>9353	Argument	1.0f / ( fPostProcScalar * fGainPos )
>9354	MultiplicativeExpression	1.0f / ( fPostProcScalar * fGainPos )
>9355	MultiplicativeExpression	fPostProcScalar * fGainPos
>9356	Identifier	fGainPos
>9357	Identifier	fPostProcScalar
>9358	PrimaryExpression	1.0f
>9359	Callee	int
>9360	Identifier	int
>9361	Identifier	nDiscreteGainPos
>9362	Condition	 
>9363	EqualityExpression	ePostProcMethod != POSTPROC_METHOD_RAW
>9364	Identifier	POSTPROC_METHOD_RAW
>9365	Identifier	ePostProcMethod
>9366	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_PERORIENT )
>9367	CompoundStatement	 
>9368	ExpressionStatement	 
>9369	CallExpression	_computeGains ( fGain , anStatPosGrand [ nFilterIndex ] , anStatNegGrand [ nFilterIndex ] , ePhaseMode , ePhaseNormMode , \
>9370	ArgumentList	fGain
>9371	Argument	fGainNeg
>9372	Identifier	fGainNeg
>9373	Argument	fGainPos
>9374	Identifier	fGainPos
>9375	Argument	ePhaseNormMode
>9376	Identifier	ePhaseNormMode
>9377	Argument	ePhaseMode
>9378	Identifier	ePhaseMode
>9379	Argument	anStatNegGrand [ nFilterIndex ]
>9380	ArrayIndexing	anStatNegGrand [ nFilterIndex ]
>9381	Identifier	nFilterIndex
>9382	Identifier	anStatNegGrand
>9383	Argument	anStatPosGrand [ nFilterIndex ]
>9384	ArrayIndexing	anStatPosGrand [ nFilterIndex ]
>9385	Identifier	nFilterIndex
>9386	Identifier	anStatPosGrand
>9387	Argument	fGain
>9388	Identifier	fGain
>9389	Callee	_computeGains
>9390	Identifier	_computeGains
>9391	Condition	 
>9392	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_PERORIENT
>9393	Identifier	NORMALIZE_MODE_PERORIENT
>9394	Identifier	eNormalizeMode
>9395	IncDecOp	 
>9396	IncDec	++
>9397	Identifier	nFilterIndex
>9398	Condition	 
>9399	RelationalExpression	nFilterIndex < IMAGESET_PLANES ( psBufferIn )
>9400	CallExpression	IMAGESET_PLANES ( psBufferIn )
>9401	ArgumentList	psBufferIn
>9402	Argument	psBufferIn
>9403	Identifier	psBufferIn
>9404	Callee	IMAGESET_PLANES
>9405	Identifier	IMAGESET_PLANES
>9406	Identifier	nFilterIndex
>9407	ForInit	 
>9408	AssignmentExpr	nFilterIndex = 0
>9409	PrimaryExpression	0
>9410	Identifier	nFilterIndex
>9411	IfStatement	if ( eNormalizeMode == NORMALIZE_MODE_GLOBAL )
>9412	CompoundStatement	 
>9413	ExpressionStatement	 
>9414	CallExpression	_computeGains ( fGain , anStatPosGrand [ 0 ] , anStatNegGrand [ 0 ] , ePhaseMode , ePhaseNormMode , fGainPos , fGainNeg )
>9415	ArgumentList	fGain
>9416	Argument	fGainNeg
>9417	Identifier	fGainNeg
>9418	Argument	fGainPos
>9419	Identifier	fGainPos
>9420	Argument	ePhaseNormMode
>9421	Identifier	ePhaseNormMode
>9422	Argument	ePhaseMode
>9423	Identifier	ePhaseMode
>9424	Argument	anStatNegGrand [ 0 ]
>9425	ArrayIndexing	anStatNegGrand [ 0 ]
>9426	PrimaryExpression	0
>9427	Identifier	anStatNegGrand
>9428	Argument	anStatPosGrand [ 0 ]
>9429	ArrayIndexing	anStatPosGrand [ 0 ]
>9430	PrimaryExpression	0
>9431	Identifier	anStatPosGrand
>9432	Argument	fGain
>9433	Identifier	fGain
>9434	Callee	_computeGains
>9435	Identifier	_computeGains
>9436	Condition	 
>9437	EqualityExpression	eNormalizeMode == NORMALIZE_MODE_GLOBAL
>9438	Identifier	NORMALIZE_MODE_GLOBAL
>9439	Identifier	eNormalizeMode
>9440	ExpressionStatement	 
>9441	AssignmentExpr	fGain = fGainConstant / ( float ) ( 0x1 << GABOR_SCALING_SHIFT )
>9442	MultiplicativeExpression	fGainConstant / ( float ) ( 0x1 << GABOR_SCALING_SHIFT )
>9443	CastExpression	( float ) ( 0x1 << GABOR_SCALING_SHIFT )
>9444	ShiftExpression	0x1 << GABOR_SCALING_SHIFT
>9445	Identifier	GABOR_SCALING_SHIFT
>9446	PrimaryExpression	0x1
>9447	CastTarget	float
>9448	Identifier	fGainConstant
>9449	Identifier	fGain
>9450	IfStatement	if ( ePostProcMethod != POSTPROC_METHOD_RAW )
>9451	CompoundStatement	 
>9452	IfStatement	if ( eNormalizeMethod == NORMALIZE_METHOD_MEAN )
>9453	CompoundStatement	 
>9454	ExpressionStatement	 
>9455	CallExpression	NTA_ASSERT ( nOverflowMask )
>9456	ArgumentList	nOverflowMask
>9457	Argument	nOverflowMask
>9458	Identifier	nOverflowMask
>9459	Callee	NTA_ASSERT
>9460	Identifier	NTA_ASSERT
>9461	ExpressionStatement	 
>9462	AssignmentExpr	nOverflowMask = ~nMaxLutBin
>9463	Identifier	~nMaxLutBin
>9464	Identifier	nOverflowMask
>9465	Condition	 
>9466	EqualityExpression	eNormalizeMethod == NORMALIZE_METHOD_MEAN
>9467	Identifier	NORMALIZE_METHOD_MEAN
>9468	Identifier	eNormalizeMethod
>9469	ExpressionStatement	 
>9470	AssignmentExpr	nMaxLutBin = nNumLutBins - 1
>9471	AdditiveExpression	nNumLutBins - 1
>9472	PrimaryExpression	1
>9473	Identifier	nNumLutBins
>9474	Identifier	nMaxLutBin
>9475	ExpressionStatement	 
>9476	AssignmentExpr	nNumLutBins = VECTOR_PLANES ( psPostProcLUT )
>9477	CallExpression	VECTOR_PLANES ( psPostProcLUT )
>9478	ArgumentList	psPostProcLUT
>9479	Argument	psPostProcLUT
>9480	Identifier	psPostProcLUT
>9481	Callee	VECTOR_PLANES
>9482	Identifier	VECTOR_PLANES
>9483	Identifier	nNumLutBins
>9484	ExpressionStatement	 
>9485	AssignmentExpr	pfPostProcLUT = ( const float * ) psPostProcLUT -> pData
>9486	CastExpression	( const float * ) psPostProcLUT -> pData
>9487	PtrMemberAccess	psPostProcLUT -> pData
>9488	Identifier	pData
>9489	Identifier	psPostProcLUT
>9490	CastTarget	const float *
>9491	Identifier	pfPostProcLUT
>9492	Condition	 
>9493	EqualityExpression	ePostProcMethod != POSTPROC_METHOD_RAW
>9494	Identifier	POSTPROC_METHOD_RAW
>9495	Identifier	ePostProcMethod
>9496	IdentifierDeclStatement	 
>9497	IdentifierDecl	nOverflowMask = 0x0
>9498	AssignmentExpr	nOverflowMask = 0x0
>9499	PrimaryExpression	0x0
>9500	Identifier	nOverflowMask
>9501	Identifier	nOverflowMask
>9502	IdentifierDeclType	unsigned int
>9503	IdentifierDeclStatement	 
>9504	IdentifierDecl	nMaxLutBin = 0
>9505	AssignmentExpr	nMaxLutBin = 0
>9506	PrimaryExpression	0
>9507	Identifier	nMaxLutBin
>9508	Identifier	nMaxLutBin
>9509	IdentifierDeclType	int
>9510	IdentifierDeclStatement	 
>9511	IdentifierDecl	nNumLutBins = 0
>9512	AssignmentExpr	nNumLutBins = 0
>9513	PrimaryExpression	0
>9514	Identifier	nNumLutBins
>9515	Identifier	nNumLutBins
>9516	IdentifierDeclType	int
>9517	IdentifierDeclStatement	 
>9518	IdentifierDecl	* pfPostProcLUT = NULL
>9519	AssignmentExpr	* pfPostProcLUT = NULL
>9520	Identifier	NULL
>9521	Identifier	NULL
>9522	Identifier	pfPostProcLUT
>9523	IdentifierDeclType	const float *
>9524	IdentifierDeclStatement	 
>9525	IdentifierDecl	nTotalLeftovers = IMAGESET_COLS ( psOutput ) - ( nTotalQuadsPerRow << 2 )
>9526	AssignmentExpr	nTotalLeftovers = IMAGESET_COLS ( psOutput ) - ( nTotalQuadsPerRow << 2 )
>9527	AdditiveExpression	IMAGESET_COLS ( psOutput ) - ( nTotalQuadsPerRow << 2 )
>9528	ShiftExpression	nTotalQuadsPerRow << 2
>9529	PrimaryExpression	2
>9530	Identifier	nTotalQuadsPerRow
>9531	CallExpression	IMAGESET_COLS ( psOutput )
>9532	ArgumentList	psOutput
>9533	Argument	psOutput
>9534	Identifier	psOutput
>9535	Callee	IMAGESET_COLS
>9536	Identifier	IMAGESET_COLS
>9537	Identifier	nTotalLeftovers
>9538	Identifier	nTotalLeftovers
>9539	IdentifierDeclType	int
>9540	IdentifierDeclStatement	 
>9541	IdentifierDecl	nTotalQuadsPerRow = IMAGESET_COLS ( psOutput ) >> 2
>9542	AssignmentExpr	nTotalQuadsPerRow = IMAGESET_COLS ( psOutput ) >> 2
>9543	ShiftExpression	IMAGESET_COLS ( psOutput ) >> 2
>9544	PrimaryExpression	2
>9545	CallExpression	IMAGESET_COLS ( psOutput )
>9546	ArgumentList	psOutput
>9547	Argument	psOutput
>9548	Identifier	psOutput
>9549	Callee	IMAGESET_COLS
>9550	Identifier	IMAGESET_COLS
>9551	Identifier	nTotalQuadsPerRow
>9552	Identifier	nTotalQuadsPerRow
>9553	IdentifierDeclType	int
>9554	IdentifierDeclStatement	 
>9555	IdentifierDecl	nNumLeftovers = nOutputCols - ( nOutputQuadsPerRow << 2 )
>9556	AssignmentExpr	nNumLeftovers = nOutputCols - ( nOutputQuadsPerRow << 2 )
>9557	AdditiveExpression	nOutputCols - ( nOutputQuadsPerRow << 2 )
>9558	ShiftExpression	nOutputQuadsPerRow << 2
>9559	PrimaryExpression	2
>9560	Identifier	nOutputQuadsPerRow
>9561	Identifier	nOutputCols
>9562	Identifier	nNumLeftovers
>9563	Identifier	nNumLeftovers
>9564	IdentifierDeclType	int
>9565	IdentifierDeclStatement	 
>9566	IdentifierDecl	nOutputQuadsPerRow = nOutputCols >> 2
>9567	AssignmentExpr	nOutputQuadsPerRow = nOutputCols >> 2
>9568	ShiftExpression	nOutputCols >> 2
>9569	PrimaryExpression	2
>9570	Identifier	nOutputCols
>9571	Identifier	nOutputQuadsPerRow
>9572	Identifier	nOutputQuadsPerRow
>9573	IdentifierDeclType	int
>9574	IdentifierDeclStatement	 
>9575	IdentifierDecl	nNumBlankRightCols = IMAGESET_COLS ( psOutput ) - psBox -> nRight
>9576	AssignmentExpr	nNumBlankRightCols = IMAGESET_COLS ( psOutput ) - psBox -> nRight
>9577	AdditiveExpression	IMAGESET_COLS ( psOutput ) - psBox -> nRight
>9578	PtrMemberAccess	psBox -> nRight
>9579	Identifier	nRight
>9580	Identifier	psBox
>9581	CallExpression	IMAGESET_COLS ( psOutput )
>9582	ArgumentList	psOutput
>9583	Argument	psOutput
>9584	Identifier	psOutput
>9585	Callee	IMAGESET_COLS
>9586	Identifier	IMAGESET_COLS
>9587	Identifier	nNumBlankRightCols
>9588	Identifier	nNumBlankRightCols
>9589	IdentifierDeclType	int
>9590	IdentifierDeclStatement	 
>9591	IdentifierDecl	nNumBlankBottomRows = IMAGESET_ROWS ( psOutput ) - psBox -> nBottom
>9592	AssignmentExpr	nNumBlankBottomRows = IMAGESET_ROWS ( psOutput ) - psBox -> nBottom
>9593	AdditiveExpression	IMAGESET_ROWS ( psOutput ) - psBox -> nBottom
>9594	PtrMemberAccess	psBox -> nBottom
>9595	Identifier	nBottom
>9596	Identifier	psBox
>9597	CallExpression	IMAGESET_ROWS ( psOutput )
>9598	ArgumentList	psOutput
>9599	Argument	psOutput
>9600	Identifier	psOutput
>9601	Callee	IMAGESET_ROWS
>9602	Identifier	IMAGESET_ROWS
>9603	Identifier	nNumBlankBottomRows
>9604	Identifier	nNumBlankBottomRows
>9605	IdentifierDeclType	int
>9606	IdentifierDeclStatement	 
>9607	IdentifierDecl	nNumBlankTopRows = psBox -> nTop
>9608	AssignmentExpr	nNumBlankTopRows = psBox -> nTop
>9609	PtrMemberAccess	psBox -> nTop
>9610	Identifier	nTop
>9611	Identifier	psBox
>9612	Identifier	nNumBlankTopRows
>9613	Identifier	nNumBlankTopRows
>9614	IdentifierDeclType	int
>9615	ExpressionStatement	 
>9616	CallExpression	NTA_ASSERT ( IMAGESET_COLS ( psBufferIn ) % 4 == 0 )
>9617	ArgumentList	IMAGESET_COLS ( psBufferIn ) % 4 == 0
>9618	Argument	IMAGESET_COLS ( psBufferIn ) % 4 == 0
>9619	EqualityExpression	IMAGESET_COLS ( psBufferIn ) % 4 == 0
>9620	PrimaryExpression	0
>9621	MultiplicativeExpression	IMAGESET_COLS ( psBufferIn ) % 4
>9622	PrimaryExpression	4
>9623	CallExpression	IMAGESET_COLS ( psBufferIn )
>9624	ArgumentList	psBufferIn
>9625	Argument	psBufferIn
>9626	Identifier	psBufferIn
>9627	Callee	IMAGESET_COLS
>9628	Identifier	IMAGESET_COLS
>9629	Callee	NTA_ASSERT
>9630	Identifier	NTA_ASSERT
>9631	IdentifierDeclStatement	 
>9632	IdentifierDecl	nOutputCols = psBox -> nRight - psBox -> nLeft
>9633	AssignmentExpr	nOutputCols = psBox -> nRight - psBox -> nLeft
>9634	AdditiveExpression	psBox -> nRight - psBox -> nLeft
>9635	PtrMemberAccess	psBox -> nLeft
>9636	Identifier	nLeft
>9637	Identifier	psBox
>9638	PtrMemberAccess	psBox -> nRight
>9639	Identifier	nRight
>9640	Identifier	psBox
>9641	Identifier	nOutputCols
>9642	Identifier	nOutputCols
>9643	IdentifierDeclType	int
>9644	IdentifierDeclStatement	 
>9645	IdentifierDecl	nOutputRows = psBox -> nBottom - psBox -> nTop
>9646	AssignmentExpr	nOutputRows = psBox -> nBottom - psBox -> nTop
>9647	AdditiveExpression	psBox -> nBottom - psBox -> nTop
>9648	PtrMemberAccess	psBox -> nTop
>9649	Identifier	nTop
>9650	Identifier	psBox
>9651	PtrMemberAccess	psBox -> nBottom
>9652	Identifier	nBottom
>9653	Identifier	psBox
>9654	Identifier	nOutputRows
>9655	Identifier	nOutputRows
>9656	IdentifierDeclType	int
>9657	IdentifierDeclStatement	 
>9658	IdentifierDecl	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psOutput ) * IMAGESET_PLANES ( psOutput )
>9659	AssignmentExpr	* pDebugOutputEOMB = pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psOutput ) * IMAGESET_PLANES ( psOutput )
>9660	AdditiveExpression	pDebugOutputSOMB + IMAGESET_PLANESTRIDE ( psOutput ) * IMAGESET_PLANES ( psOutput )
>9661	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psOutput ) * IMAGESET_PLANES ( psOutput )
>9662	CallExpression	IMAGESET_PLANES ( psOutput )
>9663	ArgumentList	psOutput
>9664	Argument	psOutput
>9665	Identifier	psOutput
>9666	Callee	IMAGESET_PLANES
>9667	Identifier	IMAGESET_PLANES
>9668	CallExpression	IMAGESET_PLANESTRIDE ( psOutput )
>9669	ArgumentList	psOutput
>9670	Argument	psOutput
>9671	Identifier	psOutput
>9672	Callee	IMAGESET_PLANESTRIDE
>9673	Identifier	IMAGESET_PLANESTRIDE
>9674	Identifier	pDebugOutputSOMB
>9675	Identifier	pDebugOutputEOMB
>9676	Identifier	pDebugOutputEOMB
>9677	IdentifierDeclType	const char *
>9678	IdentifierDeclStatement	 
>9679	IdentifierDecl	* pDebugOutputSOMB = ( const char * ) ( psOutput -> pData )
>9680	AssignmentExpr	* pDebugOutputSOMB = ( const char * ) ( psOutput -> pData )
>9681	CastExpression	( const char * ) ( psOutput -> pData )
>9682	PtrMemberAccess	psOutput -> pData
>9683	Identifier	pData
>9684	Identifier	psOutput
>9685	CastTarget	const char *
>9686	Identifier	pDebugOutputSOMB
>9687	Identifier	pDebugOutputSOMB
>9688	IdentifierDeclType	const char *
>9689	IdentifierDeclStatement	 
>9690	IdentifierDecl	nOutputRowStride = IMAGESET_ROWSTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>9691	AssignmentExpr	nOutputRowStride = IMAGESET_ROWSTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>9692	MultiplicativeExpression	IMAGESET_ROWSTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>9693	SizeofExpr	sizeof ( * pfOutputBase )
>9694	UnaryOp	* pfOutputBase
>9695	Identifier	pfOutputBase
>9696	UnaryOperator	*
>9697	Sizeof	sizeof
>9698	CallExpression	IMAGESET_ROWSTRIDE ( psOutput )
>9699	ArgumentList	psOutput
>9700	Argument	psOutput
>9701	Identifier	psOutput
>9702	Callee	IMAGESET_ROWSTRIDE
>9703	Identifier	IMAGESET_ROWSTRIDE
>9704	Identifier	nOutputRowStride
>9705	Identifier	nOutputRowStride
>9706	IdentifierDeclType	int
>9707	IdentifierDeclStatement	 
>9708	IdentifierDecl	* pfOutputBase = ( float * ) psOutput -> pData
>9709	AssignmentExpr	* pfOutputBase = ( float * ) psOutput -> pData
>9710	CastExpression	( float * ) psOutput -> pData
>9711	PtrMemberAccess	psOutput -> pData
>9712	Identifier	pData
>9713	Identifier	psOutput
>9714	CastTarget	float *
>9715	Identifier	pfOutputBase
>9716	Identifier	pfOutputBase
>9717	IdentifierDeclType	float *
>9718	IdentifierDeclStatement	 
>9719	IdentifierDecl	nInputRowStride = IMAGESET_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>9720	AssignmentExpr	nInputRowStride = IMAGESET_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>9721	MultiplicativeExpression	IMAGESET_ROWSTRIDE ( psBufferIn ) / sizeof ( * pnInputBase )
>9722	SizeofExpr	sizeof ( * pnInputBase )
>9723	UnaryOp	* pnInputBase
>9724	Identifier	pnInputBase
>9725	UnaryOperator	*
>9726	Sizeof	sizeof
>9727	CallExpression	IMAGESET_ROWSTRIDE ( psBufferIn )
>9728	ArgumentList	psBufferIn
>9729	Argument	psBufferIn
>9730	Identifier	psBufferIn
>9731	Callee	IMAGESET_ROWSTRIDE
>9732	Identifier	IMAGESET_ROWSTRIDE
>9733	Identifier	nInputRowStride
>9734	Identifier	nInputRowStride
>9735	IdentifierDeclType	int
>9736	IdentifierDeclStatement	 
>9737	IdentifierDecl	* pnInputBase = ( int * ) psBufferIn -> pData
>9738	AssignmentExpr	* pnInputBase = ( int * ) psBufferIn -> pData
>9739	CastExpression	( int * ) psBufferIn -> pData
>9740	PtrMemberAccess	psBufferIn -> pData
>9741	Identifier	pData
>9742	Identifier	psBufferIn
>9743	CastTarget	int *
>9744	Identifier	pnInputBase
>9745	Identifier	pnInputBase
>9746	IdentifierDeclType	int *
>9747	IdentifierDeclStatement	 
>9748	IdentifierDecl	* pnInputRow = NULL
>9749	AssignmentExpr	* pnInputRow = NULL
>9750	Identifier	NULL
>9751	Identifier	NULL
>9752	Identifier	pnInputRow
>9753	IdentifierDeclType	int *
>9754	IdentifierDeclStatement	 
>9755	IdentifierDecl	* pfOutputNeg = NULL
>9756	AssignmentExpr	* pfOutputNeg = NULL
>9757	Identifier	NULL
>9758	Identifier	NULL
>9759	Identifier	pfOutputNeg
>9760	IdentifierDeclType	float *
>9761	IdentifierDeclStatement	 
>9762	IdentifierDecl	* pfOutputPos = NULL
>9763	AssignmentExpr	* pfOutputPos = NULL
>9764	Identifier	NULL
>9765	Identifier	NULL
>9766	Identifier	pfOutputPos
>9767	IdentifierDeclType	float *
>9768	IdentifierDeclStatement	 
>9769	IdentifierDecl	* pfOutputRowNeg = NULL
>9770	AssignmentExpr	* pfOutputRowNeg = NULL
>9771	Identifier	NULL
>9772	Identifier	NULL
>9773	Identifier	pfOutputRowNeg
>9774	IdentifierDeclType	float *
>9775	IdentifierDeclStatement	 
>9776	IdentifierDecl	* pfOutputRowPos = NULL
>9777	AssignmentExpr	* pfOutputRowPos = NULL
>9778	Identifier	NULL
>9779	Identifier	NULL
>9780	Identifier	pfOutputRowPos
>9781	IdentifierDeclType	float *
>9782	IdentifierDeclStatement	 
>9783	IdentifierDecl	fGainNeg = 0.0f
>9784	AssignmentExpr	fGainNeg = 0.0f
>9785	PrimaryExpression	0.0f
>9786	Identifier	fGainNeg
>9787	Identifier	fGainNeg
>9788	IdentifierDeclType	float
>9789	IdentifierDecl	fGainPos = 0.0f
>9790	AssignmentExpr	fGainPos = 0.0f
>9791	PrimaryExpression	0.0f
>9792	Identifier	fGainPos
>9793	Identifier	fGainPos
>9794	IdentifierDeclType	float
>9795	IdentifierDecl	fGain
>9796	Identifier	fGain
>9797	IdentifierDeclType	float
>9798	IdentifierDeclStatement	 
>9799	IdentifierDecl	nDualBin
>9800	Identifier	nDualBin
>9801	IdentifierDeclType	int
>9802	IdentifierDeclStatement	 
>9803	IdentifierDecl	nSingleBin
>9804	Identifier	nSingleBin
>9805	IdentifierDeclType	unsigned int
>9806	IdentifierDeclStatement	 
>9807	IdentifierDecl	nDiscreteGainNeg = 0
>9808	AssignmentExpr	nDiscreteGainNeg = 0
>9809	PrimaryExpression	0
>9810	Identifier	nDiscreteGainNeg
>9811	Identifier	nDiscreteGainNeg
>9812	IdentifierDeclType	int
>9813	IdentifierDeclStatement	 
>9814	IdentifierDecl	nDiscreteGainPos = 0
>9815	AssignmentExpr	nDiscreteGainPos = 0
>9816	PrimaryExpression	0
>9817	Identifier	nDiscreteGainPos
>9818	Identifier	nDiscreteGainPos
>9819	IdentifierDeclType	int
>9820	IdentifierDeclStatement	 
>9821	IdentifierDecl	fResponse
>9822	Identifier	fResponse
>9823	IdentifierDeclType	float
>9824	IdentifierDeclStatement	 
>9825	IdentifierDecl	nResponse
>9826	Identifier	nResponse
>9827	IdentifierDeclType	int
>9828	IdentifierDeclStatement	 
>9829	IdentifierDecl	nFilterIndex
>9830	Identifier	nFilterIndex
>9831	IdentifierDeclType	int
>9832	IdentifierDeclStatement	 
>9833	IdentifierDecl	j
>9834	Identifier	j
>9835	IdentifierDeclType	int
>9836	IdentifierDecl	i
>9837	Identifier	i
>9838	IdentifierDeclType	int
>9944	FunctionDef	_zeroOutputs (const NUMPY_ARRAY * psOutput)
>9945	ParameterList	const NUMPY_ARRAY * psOutput
>9946	Parameter	 
>9947	Identifier	psOutput
>9948	ParameterType	const NUMPY_ARRAY *
>9949	ReturnType	void
>9950	CompoundStatement	 
>9951	ForStatement	for ( k = nNumPlanes ; k ; k -- )
>9952	CompoundStatement	 
>9953	ExpressionStatement	 
>9954	AssignmentExpr	pfOutputBase += nOutputPlaneStride
>9955	Identifier	nOutputPlaneStride
>9956	Identifier	pfOutputBase
>9957	ForStatement	for ( j = nOutputRows ; j ; j -- )
>9958	CompoundStatement	 
>9959	ExpressionStatement	 
>9960	AssignmentExpr	pfOutputRow += nOutputRowStride
>9961	Identifier	nOutputRowStride
>9962	Identifier	pfOutputRow
>9963	ForStatement	for ( i = nLeftovers ; i ; i -- )
>9964	ExpressionStatement	 
>9965	AssignmentExpr	* pfOutputPtr ++ = 0.0f
>9966	PrimaryExpression	0.0f
>9967	UnaryOp	* pfOutputPtr ++
>9968	IncDecOp	pfOutputPtr ++
>9969	IncDec	++
>9970	Identifier	pfOutputPtr
>9971	UnaryOperator	*
>9972	IncDecOp	 
>9973	IncDec	--
>9974	Identifier	i
>9975	Condition	 
>9976	Identifier	i
>9977	ForInit	 
>9978	AssignmentExpr	i = nLeftovers
>9979	Identifier	nLeftovers
>9980	Identifier	i
>9981	ForStatement	for ( i = nQuadsPerRow ; i ; i -- )
>9982	CompoundStatement	 
>9983	ExpressionStatement	 
>9984	AssignmentExpr	* pfOutputPtr ++ = 0.0f
>9985	PrimaryExpression	0.0f
>9986	UnaryOp	* pfOutputPtr ++
>9987	IncDecOp	pfOutputPtr ++
>9988	IncDec	++
>9989	Identifier	pfOutputPtr
>9990	UnaryOperator	*
>9991	ExpressionStatement	 
>9992	AssignmentExpr	* pfOutputPtr ++ = 0.0f
>9993	PrimaryExpression	0.0f
>9994	UnaryOp	* pfOutputPtr ++
>9995	IncDecOp	pfOutputPtr ++
>9996	IncDec	++
>9997	Identifier	pfOutputPtr
>9998	UnaryOperator	*
>9999	ExpressionStatement	 
>10000	AssignmentExpr	* pfOutputPtr ++ = 0.0f
>10001	PrimaryExpression	0.0f
>10002	UnaryOp	* pfOutputPtr ++
>10003	IncDecOp	pfOutputPtr ++
>10004	IncDec	++
>10005	Identifier	pfOutputPtr
>10006	UnaryOperator	*
>10007	ExpressionStatement	 
>10008	AssignmentExpr	* pfOutputPtr ++ = 0.0f
>10009	PrimaryExpression	0.0f
>10010	UnaryOp	* pfOutputPtr ++
>10011	IncDecOp	pfOutputPtr ++
>10012	IncDec	++
>10013	Identifier	pfOutputPtr
>10014	UnaryOperator	*
>10015	IncDecOp	 
>10016	IncDec	--
>10017	Identifier	i
>10018	Condition	 
>10019	Identifier	i
>10020	ForInit	 
>10021	AssignmentExpr	i = nQuadsPerRow
>10022	Identifier	nQuadsPerRow
>10023	Identifier	i
>10024	ExpressionStatement	 
>10025	AssignmentExpr	pfOutputPtr = pfOutputRow
>10026	Identifier	pfOutputRow
>10027	Identifier	pfOutputPtr
>10028	IncDecOp	 
>10029	IncDec	--
>10030	Identifier	j
>10031	Condition	 
>10032	Identifier	j
>10033	ForInit	 
>10034	AssignmentExpr	j = nOutputRows
>10035	Identifier	nOutputRows
>10036	Identifier	j
>10037	ExpressionStatement	 
>10038	AssignmentExpr	pfOutputRow = pfOutputBase
>10039	Identifier	pfOutputBase
>10040	Identifier	pfOutputRow
>10041	IncDecOp	 
>10042	IncDec	--
>10043	Identifier	k
>10044	Condition	 
>10045	Identifier	k
>10046	ForInit	 
>10047	AssignmentExpr	k = nNumPlanes
>10048	Identifier	nNumPlanes
>10049	Identifier	k
>10050	IdentifierDeclStatement	 
>10051	IdentifierDecl	nLeftovers = nOutputCols - ( nQuadsPerRow << 2 )
>10052	AssignmentExpr	nLeftovers = nOutputCols - ( nQuadsPerRow << 2 )
>10053	AdditiveExpression	nOutputCols - ( nQuadsPerRow << 2 )
>10054	ShiftExpression	nQuadsPerRow << 2
>10055	PrimaryExpression	2
>10056	Identifier	nQuadsPerRow
>10057	Identifier	nOutputCols
>10058	Identifier	nLeftovers
>10059	Identifier	nLeftovers
>10060	IdentifierDeclType	int
>10061	IdentifierDeclStatement	 
>10062	IdentifierDecl	nQuadsPerRow = nOutputCols >> 2
>10063	AssignmentExpr	nQuadsPerRow = nOutputCols >> 2
>10064	ShiftExpression	nOutputCols >> 2
>10065	PrimaryExpression	2
>10066	Identifier	nOutputCols
>10067	Identifier	nQuadsPerRow
>10068	Identifier	nQuadsPerRow
>10069	IdentifierDeclType	int
>10070	IdentifierDeclStatement	 
>10071	IdentifierDecl	nNumPlanes = IMAGESET_PLANES ( psOutput )
>10072	AssignmentExpr	nNumPlanes = IMAGESET_PLANES ( psOutput )
>10073	CallExpression	IMAGESET_PLANES ( psOutput )
>10074	ArgumentList	psOutput
>10075	Argument	psOutput
>10076	Identifier	psOutput
>10077	Callee	IMAGESET_PLANES
>10078	Identifier	IMAGESET_PLANES
>10079	Identifier	nNumPlanes
>10080	Identifier	nNumPlanes
>10081	IdentifierDeclType	int
>10082	IdentifierDeclStatement	 
>10083	IdentifierDecl	nOutputCols = IMAGESET_COLS ( psOutput )
>10084	AssignmentExpr	nOutputCols = IMAGESET_COLS ( psOutput )
>10085	CallExpression	IMAGESET_COLS ( psOutput )
>10086	ArgumentList	psOutput
>10087	Argument	psOutput
>10088	Identifier	psOutput
>10089	Callee	IMAGESET_COLS
>10090	Identifier	IMAGESET_COLS
>10091	Identifier	nOutputCols
>10092	Identifier	nOutputCols
>10093	IdentifierDeclType	int
>10094	IdentifierDeclStatement	 
>10095	IdentifierDecl	nOutputRows = IMAGESET_ROWS ( psOutput )
>10096	AssignmentExpr	nOutputRows = IMAGESET_ROWS ( psOutput )
>10097	CallExpression	IMAGESET_ROWS ( psOutput )
>10098	ArgumentList	psOutput
>10099	Argument	psOutput
>10100	Identifier	psOutput
>10101	Callee	IMAGESET_ROWS
>10102	Identifier	IMAGESET_ROWS
>10103	Identifier	nOutputRows
>10104	Identifier	nOutputRows
>10105	IdentifierDeclType	int
>10106	IdentifierDeclStatement	 
>10107	IdentifierDecl	nOutputPlaneStride = IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>10108	AssignmentExpr	nOutputPlaneStride = IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>10109	MultiplicativeExpression	IMAGESET_PLANESTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>10110	SizeofExpr	sizeof ( * pfOutputBase )
>10111	UnaryOp	* pfOutputBase
>10112	Identifier	pfOutputBase
>10113	UnaryOperator	*
>10114	Sizeof	sizeof
>10115	CallExpression	IMAGESET_PLANESTRIDE ( psOutput )
>10116	ArgumentList	psOutput
>10117	Argument	psOutput
>10118	Identifier	psOutput
>10119	Callee	IMAGESET_PLANESTRIDE
>10120	Identifier	IMAGESET_PLANESTRIDE
>10121	Identifier	nOutputPlaneStride
>10122	Identifier	nOutputPlaneStride
>10123	IdentifierDeclType	int
>10124	IdentifierDeclStatement	 
>10125	IdentifierDecl	nOutputRowStride = IMAGESET_ROWSTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>10126	AssignmentExpr	nOutputRowStride = IMAGESET_ROWSTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>10127	MultiplicativeExpression	IMAGESET_ROWSTRIDE ( psOutput ) / sizeof ( * pfOutputBase )
>10128	SizeofExpr	sizeof ( * pfOutputBase )
>10129	UnaryOp	* pfOutputBase
>10130	Identifier	pfOutputBase
>10131	UnaryOperator	*
>10132	Sizeof	sizeof
>10133	CallExpression	IMAGESET_ROWSTRIDE ( psOutput )
>10134	ArgumentList	psOutput
>10135	Argument	psOutput
>10136	Identifier	psOutput
>10137	Callee	IMAGESET_ROWSTRIDE
>10138	Identifier	IMAGESET_ROWSTRIDE
>10139	Identifier	nOutputRowStride
>10140	Identifier	nOutputRowStride
>10141	IdentifierDeclType	int
>10142	IdentifierDeclStatement	 
>10143	IdentifierDecl	* pfOutputBase = ( float * ) psOutput -> pData
>10144	AssignmentExpr	* pfOutputBase = ( float * ) psOutput -> pData
>10145	CastExpression	( float * ) psOutput -> pData
>10146	PtrMemberAccess	psOutput -> pData
>10147	Identifier	pData
>10148	Identifier	psOutput
>10149	CastTarget	float *
>10150	Identifier	pfOutputBase
>10151	Identifier	pfOutputBase
>10152	IdentifierDeclType	float *
>10153	IdentifierDeclStatement	 
>10154	IdentifierDecl	* pfOutputPtr = NULL
>10155	AssignmentExpr	* pfOutputPtr = NULL
>10156	Identifier	NULL
>10157	Identifier	NULL
>10158	Identifier	pfOutputPtr
>10159	IdentifierDeclType	float *
>10160	IdentifierDeclStatement	 
>10161	IdentifierDecl	* pfOutputRow = NULL
>10162	AssignmentExpr	* pfOutputRow = NULL
>10163	Identifier	NULL
>10164	Identifier	NULL
>10165	Identifier	pfOutputRow
>10166	IdentifierDeclType	float *
>10167	IdentifierDeclStatement	 
>10168	IdentifierDecl	i
>10169	Identifier	i
>10170	IdentifierDeclType	int
>10171	IdentifierDecl	j
>10172	Identifier	j
>10173	IdentifierDeclType	int
>10174	IdentifierDecl	k
>10175	Identifier	k
>10176	IdentifierDeclType	int
>10205	FunctionDef	initFromPython (unsigned long long refP)
>10206	ParameterList	unsigned long long refP
>10207	Parameter	 
>10208	Identifier	refP
>10209	ParameterType	unsigned long long
>10210	ReturnType	NTA_EXPORT void
>10211	CompoundStatement	 
>10212	ExpressionStatement	 
>10213	CallExpression	PythonSystem_initFromReferenceP ( refP )
>10214	ArgumentList	refP
>10215	Argument	refP
>10216	Identifier	refP
>10217	Callee	PythonSystem_initFromReferenceP
>10218	Identifier	PythonSystem_initFromReferenceP
>10223	FunctionDef	gaborCompute (const NUMPY_ARRAY * psGaborBank , const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psAlpha , const \
>10224	ParameterList	const NUMPY_ARRAY * psGaborBank , const NUMPY_ARRAY * psInput , const NUMPY_ARRAY * psAlpha , const NUMPY_ARRAY * \
>10225	Parameter	 
>10226	Identifier	fPostProcScalar
>10227	ParameterType	float
>10228	Parameter	 
>10229	Identifier	psPostProcLUT
>10230	ParameterType	const NUMPY_ARRAY *
>10231	Parameter	 
>10232	Identifier	psBufferOut
>10233	ParameterType	const NUMPY_ARRAY *
>10234	Parameter	 
>10235	Identifier	psBufferIn
>10236	ParameterType	const NUMPY_ARRAY *
>10237	Parameter	 
>10238	Identifier	fPostProcMax
>10239	ParameterType	float
>10240	Parameter	 
>10241	Identifier	fPostProcMin
>10242	ParameterType	float
>10243	Parameter	 
>10244	Identifier	fPostProcMidpoint
>10245	ParameterType	float
>10246	Parameter	 
>10247	Identifier	fPostProcSlope
>10248	ParameterType	float
>10249	Parameter	 
>10250	Identifier	ePostProcMethod
>10251	ParameterType	POSTPROC_METHOD
>10252	Parameter	 
>10253	Identifier	ePhaseNormMode
>10254	ParameterType	PHASENORM_MODE
>10255	Parameter	 
>10256	Identifier	eNormalizeMode
>10257	ParameterType	NORMALIZE_MODE
>10258	Parameter	 
>10259	Identifier	eNormalizeMethod
>10260	ParameterType	NORMALIZE_METHOD
>10261	Parameter	 
>10262	Identifier	ePhaseMode
>10263	ParameterType	PHASE_MODE
>10264	Parameter	 
>10265	Identifier	fOffImageFillValue
>10266	ParameterType	float
>10267	Parameter	 
>10268	Identifier	eEdgeMode
>10269	ParameterType	EDGE_MODE
>10270	Parameter	 
>10271	Identifier	fGainConstant
>10272	ParameterType	float
>10273	Parameter	 
>10274	Identifier	psOutput
>10275	ParameterType	const NUMPY_ARRAY *
>10276	Parameter	 
>10277	Identifier	psImageBox
>10278	ParameterType	const NUMPY_ARRAY *
>10279	Parameter	 
>10280	Identifier	psBBox
>10281	ParameterType	const NUMPY_ARRAY *
>10282	Parameter	 
>10283	Identifier	psAlpha
>10284	ParameterType	const NUMPY_ARRAY *
>10285	Parameter	 
>10286	Identifier	psInput
>10287	ParameterType	const NUMPY_ARRAY *
>10288	Parameter	 
>10289	Identifier	psGaborBank
>10290	ParameterType	const NUMPY_ARRAY *
>10291	ReturnType	NTA_EXPORT int
>10292	CompoundStatement	 
>10293	ReturnStatement	 
>10294	PrimaryExpression	0
>10295	BlockStarter	 
>10296	CompoundStatement	 
>10297	ReturnStatement	return - 1 ;
>10298	UnaryOp	- 1
>10299	PrimaryExpression	1
>10300	UnaryOperator	-
>10301	ExpressionStatement	NTA_WARN << \"gaborNode -- returning error
>10302	ShiftExpression	NTA_WARN << \"gaborNode -- returning error
>10303	ShiftExpression	\"gaborNode -- returning error
>10304	CallExpression	e . what ( )
>10305	ArgumentList	 
>10306	Callee	e . what
>10307	MemberAccess	e . what
>10308	Identifier	what
>10309	Identifier	e
>10310	PrimaryExpression	\"gaborNode -- returning error
>10311	Identifier	NTA_WARN
>10312	Identifier	e
>10313	BlockStarter	 
>10314	CompoundStatement	 
>10315	ExpressionStatement	_postProcess ( psBufferOut , psOutput , & sBoxOutput , ePhaseMode , nShrinkage , eEdgeMode , fGainConstant , eNormalizeMethod , \
>10316	CallExpression	_postProcess ( psBufferOut , psOutput , & sBoxOutput , ePhaseMode , nShrinkage , eEdgeMode , fGainConstant , eNormalizeMethod , \
>10317	ArgumentList	psBufferOut
>10318	Argument	fPostProcScalar
>10319	Identifier	fPostProcScalar
>10320	Argument	psPostProcLUT
>10321	Identifier	psPostProcLUT
>10322	Argument	anStatNegGrand
>10323	Identifier	anStatNegGrand
>10324	Argument	anStatPosGrand
>10325	Identifier	anStatPosGrand
>10326	Argument	fPostProcMax
>10327	Identifier	fPostProcMax
>10328	Argument	fPostProcMin
>10329	Identifier	fPostProcMin
>10330	Argument	fPostProcMidpoint
>10331	Identifier	fPostProcMidpoint
>10332	Argument	fPostProcSlope
>10333	Identifier	fPostProcSlope
>10334	Argument	ePostProcMethod
>10335	Identifier	ePostProcMethod
>10336	Argument	ePhaseNormMode
>10337	Identifier	ePhaseNormMode
>10338	Argument	eNormalizeMode
>10339	Identifier	eNormalizeMode
>10340	Argument	eNormalizeMethod
>10341	Identifier	eNormalizeMethod
>10342	Argument	fGainConstant
>10343	Identifier	fGainConstant
>10344	Argument	eEdgeMode
>10345	Identifier	eEdgeMode
>10346	Argument	nShrinkage
>10347	Identifier	nShrinkage
>10348	Argument	ePhaseMode
>10349	Identifier	ePhaseMode
>10350	Argument	& sBoxOutput
>10351	UnaryOp	& sBoxOutput
>10352	Identifier	sBoxOutput
>10353	UnaryOperator	&
>10354	Argument	psOutput
>10355	Identifier	psOutput
>10356	Argument	psBufferOut
>10357	Identifier	psBufferOut
>10358	Callee	_postProcess
>10359	Identifier	_postProcess
>10360	ExpressionStatement	_doConvolution ( psBufferIn , psBufferOut , psGaborBank , psAlpha , & sBoxInput , & sBoxOutput , ePhaseMode , eNormalizeMethod , \
>10361	CallExpression	_doConvolution ( psBufferIn , psBufferOut , psGaborBank , psAlpha , & sBoxInput , & sBoxOutput , ePhaseMode , eNormalizeMethod , \
>10362	ArgumentList	psBufferIn
>10363	Argument	anStatNegGrand
>10364	Identifier	anStatNegGrand
>10365	Argument	anStatPosGrand
>10366	Identifier	anStatPosGrand
>10367	Argument	eNormalizeMode
>10368	Identifier	eNormalizeMode
>10369	Argument	eNormalizeMethod
>10370	Identifier	eNormalizeMethod
>10371	Argument	ePhaseMode
>10372	Identifier	ePhaseMode
>10373	Argument	& sBoxOutput
>10374	UnaryOp	& sBoxOutput
>10375	Identifier	sBoxOutput
>10376	UnaryOperator	&
>10377	Argument	& sBoxInput
>10378	UnaryOp	& sBoxInput
>10379	Identifier	sBoxInput
>10380	UnaryOperator	&
>10381	Argument	psAlpha
>10382	Identifier	psAlpha
>10383	Argument	psGaborBank
>10384	Identifier	psGaborBank
>10385	Argument	psBufferOut
>10386	Identifier	psBufferOut
>10387	Argument	psBufferIn
>10388	Identifier	psBufferIn
>10389	Callee	_doConvolution
>10390	Identifier	_doConvolution
>10391	ExpressionStatement	_prepareInput ( psInput , psBufferIn , nFilterDim >> 1 , psBBox , psImageBox , eEdgeMode , fOffImageFillValue )
>10392	CallExpression	_prepareInput ( psInput , psBufferIn , nFilterDim >> 1 , psBBox , psImageBox , eEdgeMode , fOffImageFillValue )
>10393	ArgumentList	psInput
>10394	Argument	fOffImageFillValue
>10395	Identifier	fOffImageFillValue
>10396	Argument	eEdgeMode
>10397	Identifier	eEdgeMode
>10398	Argument	psImageBox
>10399	Identifier	psImageBox
>10400	Argument	psBBox
>10401	Identifier	psBBox
>10402	Argument	nFilterDim >> 1
>10403	ShiftExpression	nFilterDim >> 1
>10404	PrimaryExpression	1
>10405	Identifier	nFilterDim
>10406	Argument	psBufferIn
>10407	Identifier	psBufferIn
>10408	Argument	psInput
>10409	Identifier	psInput
>10410	Callee	_prepareInput
>10411	Identifier	_prepareInput
>10412	IfStatement	if ( ( BBOX_RIGHT ( psBBox ) - BBOX_LEFT ( psBBox ) < nFilterDim ) || ( BBOX_BOTTOM ( psBBox ) - BBOX_TOP ( psBBox ) < \
>10413	CompoundStatement	 
>10414	ReturnStatement	return 0 ;
>10415	PrimaryExpression	0
>10416	ExpressionStatement	_zeroOutputs ( psOutput )
>10417	CallExpression	_zeroOutputs ( psOutput )
>10418	ArgumentList	psOutput
>10419	Argument	psOutput
>10420	Identifier	psOutput
>10421	Callee	_zeroOutputs
>10422	Identifier	_zeroOutputs
>10423	Condition	( BBOX_RIGHT ( psBBox ) - BBOX_LEFT ( psBBox ) < nFilterDim ) || ( BBOX_BOTTOM ( psBBox ) - BBOX_TOP ( psBBox ) < \
>10424	OrExpression	( BBOX_RIGHT ( psBBox ) - BBOX_LEFT ( psBBox ) < nFilterDim ) || ( BBOX_BOTTOM ( psBBox ) - BBOX_TOP ( \
>10425	RelationalExpression	BBOX_BOTTOM ( psBBox ) - BBOX_TOP ( psBBox ) < nFilterDim
>10426	Identifier	nFilterDim
>10427	AdditiveExpression	BBOX_BOTTOM ( psBBox ) - BBOX_TOP ( psBBox )
>10428	CallExpression	BBOX_TOP ( psBBox )
>10429	ArgumentList	psBBox
>10430	Argument	psBBox
>10431	Identifier	psBBox
>10432	Callee	BBOX_TOP
>10433	Identifier	BBOX_TOP
>10434	CallExpression	BBOX_BOTTOM ( psBBox )
>10435	ArgumentList	psBBox
>10436	Argument	psBBox
>10437	Identifier	psBBox
>10438	Callee	BBOX_BOTTOM
>10439	Identifier	BBOX_BOTTOM
>10440	RelationalExpression	BBOX_RIGHT ( psBBox ) - BBOX_LEFT ( psBBox ) < nFilterDim
>10441	Identifier	nFilterDim
>10442	AdditiveExpression	BBOX_RIGHT ( psBBox ) - BBOX_LEFT ( psBBox )
>10443	CallExpression	BBOX_LEFT ( psBBox )
>10444	ArgumentList	psBBox
>10445	Argument	psBBox
>10446	Identifier	psBBox
>10447	Callee	BBOX_LEFT
>10448	Identifier	BBOX_LEFT
>10449	CallExpression	BBOX_RIGHT ( psBBox )
>10450	ArgumentList	psBBox
>10451	Argument	psBBox
>10452	Identifier	psBBox
>10453	Callee	BBOX_RIGHT
>10454	Identifier	BBOX_RIGHT
>10455	ExpressionStatement	fprintf ( stdout , \"sBoxOutput
>10456	CallExpression	fprintf ( stdout , \"sBoxOutput
>10457	ArgumentList	stdout
>10458	Argument	sBoxOutput . nBottom - sBoxOutput . nTop
>10459	AdditiveExpression	sBoxOutput . nBottom - sBoxOutput . nTop
>10460	MemberAccess	sBoxOutput . nTop
>10461	Identifier	nTop
>10462	Identifier	sBoxOutput
>10463	MemberAccess	sBoxOutput . nBottom
>10464	Identifier	nBottom
>10465	Identifier	sBoxOutput
>10466	Argument	sBoxOutput . nRight - sBoxOutput . nLeft
>10467	AdditiveExpression	sBoxOutput . nRight - sBoxOutput . nLeft
>10468	MemberAccess	sBoxOutput . nLeft
>10469	Identifier	nLeft
>10470	Identifier	sBoxOutput
>10471	MemberAccess	sBoxOutput . nRight
>10472	Identifier	nRight
>10473	Identifier	sBoxOutput
>10474	Argument	sBoxOutput . nBottom
>10475	MemberAccess	sBoxOutput . nBottom
>10476	Identifier	nBottom
>10477	Identifier	sBoxOutput
>10478	Argument	sBoxOutput . nRight
>10479	MemberAccess	sBoxOutput . nRight
>10480	Identifier	nRight
>10481	Identifier	sBoxOutput
>10482	Argument	sBoxOutput . nTop
>10483	MemberAccess	sBoxOutput . nTop
>10484	Identifier	nTop
>10485	Identifier	sBoxOutput
>10486	Argument	sBoxOutput . nLeft
>10487	MemberAccess	sBoxOutput . nLeft
>10488	Identifier	nLeft
>10489	Identifier	sBoxOutput
>10490	Argument	\"sBoxOutput
>10491	PrimaryExpression	\"sBoxOutput
>10492	Argument	stdout
>10493	Identifier	stdout
>10494	Callee	fprintf
>10495	Identifier	fprintf
>10496	ExpressionStatement	fprintf ( stdout , \"sBoxInput
>10497	CallExpression	fprintf ( stdout , \"sBoxInput
>10498	ArgumentList	stdout
>10499	Argument	sBoxInput . nBottom - sBoxInput . nTop
>10500	AdditiveExpression	sBoxInput . nBottom - sBoxInput . nTop
>10501	MemberAccess	sBoxInput . nTop
>10502	Identifier	nTop
>10503	Identifier	sBoxInput
>10504	MemberAccess	sBoxInput . nBottom
>10505	Identifier	nBottom
>10506	Identifier	sBoxInput
>10507	Argument	sBoxInput . nRight - sBoxInput . nLeft
>10508	AdditiveExpression	sBoxInput . nRight - sBoxInput . nLeft
>10509	MemberAccess	sBoxInput . nLeft
>10510	Identifier	nLeft
>10511	Identifier	sBoxInput
>10512	MemberAccess	sBoxInput . nRight
>10513	Identifier	nRight
>10514	Identifier	sBoxInput
>10515	Argument	sBoxInput . nBottom
>10516	MemberAccess	sBoxInput . nBottom
>10517	Identifier	nBottom
>10518	Identifier	sBoxInput
>10519	Argument	sBoxInput . nRight
>10520	MemberAccess	sBoxInput . nRight
>10521	Identifier	nRight
>10522	Identifier	sBoxInput
>10523	Argument	sBoxInput . nTop
>10524	MemberAccess	sBoxInput . nTop
>10525	Identifier	nTop
>10526	Identifier	sBoxInput
>10527	Argument	sBoxInput . nLeft
>10528	MemberAccess	sBoxInput . nLeft
>10529	Identifier	nLeft
>10530	Identifier	sBoxInput
>10531	Argument	\"sBoxInput
>10532	PrimaryExpression	\"sBoxInput
>10533	Argument	stdout
>10534	Identifier	stdout
>10535	Callee	fprintf
>10536	Identifier	fprintf
>10537	IfStatement	if ( eEdgeMode == EDGE_MODE_CONSTRAINED )
>10538	ElseStatement	else
>10539	CompoundStatement	 
>10540	ExpressionStatement	sBoxOutput . nBottom = sBoxOutput . nTop + BBOX_HEIGHT ( psBBox )
>10541	AssignmentExpr	sBoxOutput . nBottom = sBoxOutput . nTop + BBOX_HEIGHT ( psBBox )
>10542	AdditiveExpression	sBoxOutput . nTop + BBOX_HEIGHT ( psBBox )
>10543	CallExpression	BBOX_HEIGHT ( psBBox )
>10544	ArgumentList	psBBox
>10545	Argument	psBBox
>10546	Identifier	psBBox
>10547	Callee	BBOX_HEIGHT
>10548	Identifier	BBOX_HEIGHT
>10549	MemberAccess	sBoxOutput . nTop
>10550	Identifier	nTop
>10551	Identifier	sBoxOutput
>10552	MemberAccess	sBoxOutput . nBottom
>10553	Identifier	nBottom
>10554	Identifier	sBoxOutput
>10555	ExpressionStatement	sBoxOutput . nRight = sBoxOutput . nLeft + BBOX_WIDTH ( psBBox )
>10556	AssignmentExpr	sBoxOutput . nRight = sBoxOutput . nLeft + BBOX_WIDTH ( psBBox )
>10557	AdditiveExpression	sBoxOutput . nLeft + BBOX_WIDTH ( psBBox )
>10558	CallExpression	BBOX_WIDTH ( psBBox )
>10559	ArgumentList	psBBox
>10560	Argument	psBBox
>10561	Identifier	psBBox
>10562	Callee	BBOX_WIDTH
>10563	Identifier	BBOX_WIDTH
>10564	MemberAccess	sBoxOutput . nLeft
>10565	Identifier	nLeft
>10566	Identifier	sBoxOutput
>10567	MemberAccess	sBoxOutput . nRight
>10568	Identifier	nRight
>10569	Identifier	sBoxOutput
>10570	ExpressionStatement	sBoxOutput . nTop = sBoxInput . nTop
>10571	AssignmentExpr	sBoxOutput . nTop = sBoxInput . nTop
>10572	MemberAccess	sBoxInput . nTop
>10573	Identifier	nTop
>10574	Identifier	sBoxInput
>10575	MemberAccess	sBoxOutput . nTop
>10576	Identifier	nTop
>10577	Identifier	sBoxOutput
>10578	ExpressionStatement	sBoxOutput . nLeft = sBoxInput . nLeft
>10579	AssignmentExpr	sBoxOutput . nLeft = sBoxInput . nLeft
>10580	MemberAccess	sBoxInput . nLeft
>10581	Identifier	nLeft
>10582	Identifier	sBoxInput
>10583	MemberAccess	sBoxOutput . nLeft
>10584	Identifier	nLeft
>10585	Identifier	sBoxOutput
>10586	ExpressionStatement	sBoxInput . nBottom = sBoxInput . nTop + BBOX_HEIGHT ( psBBox )
>10587	AssignmentExpr	sBoxInput . nBottom = sBoxInput . nTop + BBOX_HEIGHT ( psBBox )
>10588	AdditiveExpression	sBoxInput . nTop + BBOX_HEIGHT ( psBBox )
>10589	CallExpression	BBOX_HEIGHT ( psBBox )
>10590	ArgumentList	psBBox
>10591	Argument	psBBox
>10592	Identifier	psBBox
>10593	Callee	BBOX_HEIGHT
>10594	Identifier	BBOX_HEIGHT
>10595	MemberAccess	sBoxInput . nTop
>10596	Identifier	nTop
>10597	Identifier	sBoxInput
>10598	MemberAccess	sBoxInput . nBottom
>10599	Identifier	nBottom
>10600	Identifier	sBoxInput
>10601	ExpressionStatement	sBoxInput . nRight = sBoxInput . nLeft + BBOX_WIDTH ( psBBox )
>10602	AssignmentExpr	sBoxInput . nRight = sBoxInput . nLeft + BBOX_WIDTH ( psBBox )
>10603	AdditiveExpression	sBoxInput . nLeft + BBOX_WIDTH ( psBBox )
>10604	CallExpression	BBOX_WIDTH ( psBBox )
>10605	ArgumentList	psBBox
>10606	Argument	psBBox
>10607	Identifier	psBBox
>10608	Callee	BBOX_WIDTH
>10609	Identifier	BBOX_WIDTH
>10610	MemberAccess	sBoxInput . nLeft
>10611	Identifier	nLeft
>10612	Identifier	sBoxInput
>10613	MemberAccess	sBoxInput . nRight
>10614	Identifier	nRight
>10615	Identifier	sBoxInput
>10616	ExpressionStatement	sBoxInput . nTop = BBOX_TOP ( psBBox )
>10617	AssignmentExpr	sBoxInput . nTop = BBOX_TOP ( psBBox )
>10618	CallExpression	BBOX_TOP ( psBBox )
>10619	ArgumentList	psBBox
>10620	Argument	psBBox
>10621	Identifier	psBBox
>10622	Callee	BBOX_TOP
>10623	Identifier	BBOX_TOP
>10624	MemberAccess	sBoxInput . nTop
>10625	Identifier	nTop
>10626	Identifier	sBoxInput
>10627	ExpressionStatement	sBoxInput . nLeft = BBOX_LEFT ( psBBox )
>10628	AssignmentExpr	sBoxInput . nLeft = BBOX_LEFT ( psBBox )
>10629	CallExpression	BBOX_LEFT ( psBBox )
>10630	ArgumentList	psBBox
>10631	Argument	psBBox
>10632	Identifier	psBBox
>10633	Callee	BBOX_LEFT
>10634	Identifier	BBOX_LEFT
>10635	MemberAccess	sBoxInput . nLeft
>10636	Identifier	nLeft
>10637	Identifier	sBoxInput
>10638	ExpressionStatement	NTA_ASSERT ( eEdgeMode == EDGE_MODE_SWEEPOFF )
>10639	CallExpression	NTA_ASSERT ( eEdgeMode == EDGE_MODE_SWEEPOFF )
>10640	ArgumentList	eEdgeMode == EDGE_MODE_SWEEPOFF
>10641	Argument	eEdgeMode == EDGE_MODE_SWEEPOFF
>10642	EqualityExpression	eEdgeMode == EDGE_MODE_SWEEPOFF
>10643	Identifier	EDGE_MODE_SWEEPOFF
>10644	Identifier	eEdgeMode
>10645	Callee	NTA_ASSERT
>10646	Identifier	NTA_ASSERT
>10647	CompoundStatement	 
>10648	ExpressionStatement	sBoxOutput . nBottom = sBoxOutput . nTop + BBOX_HEIGHT ( psBBox ) - nShrinkage
>10649	AssignmentExpr	sBoxOutput . nBottom = sBoxOutput . nTop + BBOX_HEIGHT ( psBBox ) - nShrinkage
>10650	AdditiveExpression	sBoxOutput . nTop + BBOX_HEIGHT ( psBBox ) - nShrinkage
>10651	AdditiveExpression	BBOX_HEIGHT ( psBBox ) - nShrinkage
>10652	Identifier	nShrinkage
>10653	CallExpression	BBOX_HEIGHT ( psBBox )
>10654	ArgumentList	psBBox
>10655	Argument	psBBox
>10656	Identifier	psBBox
>10657	Callee	BBOX_HEIGHT
>10658	Identifier	BBOX_HEIGHT
>10659	MemberAccess	sBoxOutput . nTop
>10660	Identifier	nTop
>10661	Identifier	sBoxOutput
>10662	MemberAccess	sBoxOutput . nBottom
>10663	Identifier	nBottom
>10664	Identifier	sBoxOutput
>10665	ExpressionStatement	sBoxOutput . nRight = sBoxOutput . nLeft + BBOX_WIDTH ( psBBox ) - nShrinkage
>10666	AssignmentExpr	sBoxOutput . nRight = sBoxOutput . nLeft + BBOX_WIDTH ( psBBox ) - nShrinkage
>10667	AdditiveExpression	sBoxOutput . nLeft + BBOX_WIDTH ( psBBox ) - nShrinkage
>10668	AdditiveExpression	BBOX_WIDTH ( psBBox ) - nShrinkage
>10669	Identifier	nShrinkage
>10670	CallExpression	BBOX_WIDTH ( psBBox )
>10671	ArgumentList	psBBox
>10672	Argument	psBBox
>10673	Identifier	psBBox
>10674	Callee	BBOX_WIDTH
>10675	Identifier	BBOX_WIDTH
>10676	MemberAccess	sBoxOutput . nLeft
>10677	Identifier	nLeft
>10678	Identifier	sBoxOutput
>10679	MemberAccess	sBoxOutput . nRight
>10680	Identifier	nRight
>10681	Identifier	sBoxOutput
>10682	ExpressionStatement	sBoxOutput . nTop = sBoxInput . nTop
>10683	AssignmentExpr	sBoxOutput . nTop = sBoxInput . nTop
>10684	MemberAccess	sBoxInput . nTop
>10685	Identifier	nTop
>10686	Identifier	sBoxInput
>10687	MemberAccess	sBoxOutput . nTop
>10688	Identifier	nTop
>10689	Identifier	sBoxOutput
>10690	ExpressionStatement	sBoxOutput . nLeft = sBoxInput . nLeft
>10691	AssignmentExpr	sBoxOutput . nLeft = sBoxInput . nLeft
>10692	MemberAccess	sBoxInput . nLeft
>10693	Identifier	nLeft
>10694	Identifier	sBoxInput
>10695	MemberAccess	sBoxOutput . nLeft
>10696	Identifier	nLeft
>10697	Identifier	sBoxOutput
>10698	ExpressionStatement	sBoxInput . nBottom = sBoxInput . nTop + BBOX_HEIGHT ( psBBox )
>10699	AssignmentExpr	sBoxInput . nBottom = sBoxInput . nTop + BBOX_HEIGHT ( psBBox )
>10700	AdditiveExpression	sBoxInput . nTop + BBOX_HEIGHT ( psBBox )
>10701	CallExpression	BBOX_HEIGHT ( psBBox )
>10702	ArgumentList	psBBox
>10703	Argument	psBBox
>10704	Identifier	psBBox
>10705	Callee	BBOX_HEIGHT
>10706	Identifier	BBOX_HEIGHT
>10707	MemberAccess	sBoxInput . nTop
>10708	Identifier	nTop
>10709	Identifier	sBoxInput
>10710	MemberAccess	sBoxInput . nBottom
>10711	Identifier	nBottom
>10712	Identifier	sBoxInput
>10713	ExpressionStatement	sBoxInput . nRight = sBoxInput . nLeft + BBOX_WIDTH ( psBBox )
>10714	AssignmentExpr	sBoxInput . nRight = sBoxInput . nLeft + BBOX_WIDTH ( psBBox )
>10715	AdditiveExpression	sBoxInput . nLeft + BBOX_WIDTH ( psBBox )
>10716	CallExpression	BBOX_WIDTH ( psBBox )
>10717	ArgumentList	psBBox
>10718	Argument	psBBox
>10719	Identifier	psBBox
>10720	Callee	BBOX_WIDTH
>10721	Identifier	BBOX_WIDTH
>10722	MemberAccess	sBoxInput . nLeft
>10723	Identifier	nLeft
>10724	Identifier	sBoxInput
>10725	MemberAccess	sBoxInput . nRight
>10726	Identifier	nRight
>10727	Identifier	sBoxInput
>10728	ExpressionStatement	sBoxInput . nTop = BBOX_TOP ( psBBox )
>10729	AssignmentExpr	sBoxInput . nTop = BBOX_TOP ( psBBox )
>10730	CallExpression	BBOX_TOP ( psBBox )
>10731	ArgumentList	psBBox
>10732	Argument	psBBox
>10733	Identifier	psBBox
>10734	Callee	BBOX_TOP
>10735	Identifier	BBOX_TOP
>10736	MemberAccess	sBoxInput . nTop
>10737	Identifier	nTop
>10738	Identifier	sBoxInput
>10739	ExpressionStatement	sBoxInput . nLeft = BBOX_LEFT ( psBBox )
>10740	AssignmentExpr	sBoxInput . nLeft = BBOX_LEFT ( psBBox )
>10741	CallExpression	BBOX_LEFT ( psBBox )
>10742	ArgumentList	psBBox
>10743	Argument	psBBox
>10744	Identifier	psBBox
>10745	Callee	BBOX_LEFT
>10746	Identifier	BBOX_LEFT
>10747	MemberAccess	sBoxInput . nLeft
>10748	Identifier	nLeft
>10749	Identifier	sBoxInput
>10750	Condition	eEdgeMode == EDGE_MODE_CONSTRAINED
>10751	EqualityExpression	eEdgeMode == EDGE_MODE_CONSTRAINED
>10752	Identifier	EDGE_MODE_CONSTRAINED
>10753	Identifier	eEdgeMode
>10754	IdentifierDeclStatement	BBOX sBoxInput , sBoxOutput ;
>10755	IdentifierDecl	sBoxOutput
>10756	Identifier	sBoxOutput
>10757	IdentifierDeclType	BBOX
>10758	IdentifierDecl	sBoxInput
>10759	Identifier	sBoxInput
>10760	IdentifierDeclType	BBOX
>10761	IfStatement	if ( psAlpha )
>10762	CompoundStatement	 
>10763	ExpressionStatement	NTA_ASSERT ( IMAGE_ROWS ( psAlpha ) >= IMAGE_ROWS ( psInput ) )
>10764	CallExpression	NTA_ASSERT ( IMAGE_ROWS ( psAlpha ) >= IMAGE_ROWS ( psInput ) )
>10765	ArgumentList	IMAGE_ROWS ( psAlpha ) >= IMAGE_ROWS ( psInput )
>10766	Argument	IMAGE_ROWS ( psAlpha ) >= IMAGE_ROWS ( psInput )
>10767	RelationalExpression	IMAGE_ROWS ( psAlpha ) >= IMAGE_ROWS ( psInput )
>10768	CallExpression	IMAGE_ROWS ( psInput )
>10769	ArgumentList	psInput
>10770	Argument	psInput
>10771	Identifier	psInput
>10772	Callee	IMAGE_ROWS
>10773	Identifier	IMAGE_ROWS
>10774	CallExpression	IMAGE_ROWS ( psAlpha )
>10775	ArgumentList	psAlpha
>10776	Argument	psAlpha
>10777	Identifier	psAlpha
>10778	Callee	IMAGE_ROWS
>10779	Identifier	IMAGE_ROWS
>10780	Callee	NTA_ASSERT
>10781	Identifier	NTA_ASSERT
>10782	ExpressionStatement	NTA_ASSERT ( IMAGE_COLS ( psAlpha ) >= IMAGE_COLS ( psInput ) )
>10783	CallExpression	NTA_ASSERT ( IMAGE_COLS ( psAlpha ) >= IMAGE_COLS ( psInput ) )
>10784	ArgumentList	IMAGE_COLS ( psAlpha ) >= IMAGE_COLS ( psInput )
>10785	Argument	IMAGE_COLS ( psAlpha ) >= IMAGE_COLS ( psInput )
>10786	RelationalExpression	IMAGE_COLS ( psAlpha ) >= IMAGE_COLS ( psInput )
>10787	CallExpression	IMAGE_COLS ( psInput )
>10788	ArgumentList	psInput
>10789	Argument	psInput
>10790	Identifier	psInput
>10791	Callee	IMAGE_COLS
>10792	Identifier	IMAGE_COLS
>10793	CallExpression	IMAGE_COLS ( psAlpha )
>10794	ArgumentList	psAlpha
>10795	Argument	psAlpha
>10796	Identifier	psAlpha
>10797	Callee	IMAGE_COLS
>10798	Identifier	IMAGE_COLS
>10799	Callee	NTA_ASSERT
>10800	Identifier	NTA_ASSERT
>10801	Condition	psAlpha
>10802	Identifier	psAlpha
>10803	ExpressionStatement	NTA_ASSERT ( BBOX_BOTTOM ( psBBox ) <= BBOX_BOTTOM ( psImageBox ) )
>10804	CallExpression	NTA_ASSERT ( BBOX_BOTTOM ( psBBox ) <= BBOX_BOTTOM ( psImageBox ) )
>10805	ArgumentList	BBOX_BOTTOM ( psBBox ) <= BBOX_BOTTOM ( psImageBox )
>10806	Argument	BBOX_BOTTOM ( psBBox ) <= BBOX_BOTTOM ( psImageBox )
>10807	RelationalExpression	BBOX_BOTTOM ( psBBox ) <= BBOX_BOTTOM ( psImageBox )
>10808	CallExpression	BBOX_BOTTOM ( psImageBox )
>10809	ArgumentList	psImageBox
>10810	Argument	psImageBox
>10811	Identifier	psImageBox
>10812	Callee	BBOX_BOTTOM
>10813	Identifier	BBOX_BOTTOM
>10814	CallExpression	BBOX_BOTTOM ( psBBox )
>10815	ArgumentList	psBBox
>10816	Argument	psBBox
>10817	Identifier	psBBox
>10818	Callee	BBOX_BOTTOM
>10819	Identifier	BBOX_BOTTOM
>10820	Callee	NTA_ASSERT
>10821	Identifier	NTA_ASSERT
>10822	ExpressionStatement	NTA_ASSERT ( BBOX_TOP ( psBBox ) >= BBOX_TOP ( psImageBox ) )
>10823	CallExpression	NTA_ASSERT ( BBOX_TOP ( psBBox ) >= BBOX_TOP ( psImageBox ) )
>10824	ArgumentList	BBOX_TOP ( psBBox ) >= BBOX_TOP ( psImageBox )
>10825	Argument	BBOX_TOP ( psBBox ) >= BBOX_TOP ( psImageBox )
>10826	RelationalExpression	BBOX_TOP ( psBBox ) >= BBOX_TOP ( psImageBox )
>10827	CallExpression	BBOX_TOP ( psImageBox )
>10828	ArgumentList	psImageBox
>10829	Argument	psImageBox
>10830	Identifier	psImageBox
>10831	Callee	BBOX_TOP
>10832	Identifier	BBOX_TOP
>10833	CallExpression	BBOX_TOP ( psBBox )
>10834	ArgumentList	psBBox
>10835	Argument	psBBox
>10836	Identifier	psBBox
>10837	Callee	BBOX_TOP
>10838	Identifier	BBOX_TOP
>10839	Callee	NTA_ASSERT
>10840	Identifier	NTA_ASSERT
>10841	ExpressionStatement	NTA_ASSERT ( BBOX_RIGHT ( psBBox ) <= BBOX_RIGHT ( psImageBox ) )
>10842	CallExpression	NTA_ASSERT ( BBOX_RIGHT ( psBBox ) <= BBOX_RIGHT ( psImageBox ) )
>10843	ArgumentList	BBOX_RIGHT ( psBBox ) <= BBOX_RIGHT ( psImageBox )
>10844	Argument	BBOX_RIGHT ( psBBox ) <= BBOX_RIGHT ( psImageBox )
>10845	RelationalExpression	BBOX_RIGHT ( psBBox ) <= BBOX_RIGHT ( psImageBox )
>10846	CallExpression	BBOX_RIGHT ( psImageBox )
>10847	ArgumentList	psImageBox
>10848	Argument	psImageBox
>10849	Identifier	psImageBox
>10850	Callee	BBOX_RIGHT
>10851	Identifier	BBOX_RIGHT
>10852	CallExpression	BBOX_RIGHT ( psBBox )
>10853	ArgumentList	psBBox
>10854	Argument	psBBox
>10855	Identifier	psBBox
>10856	Callee	BBOX_RIGHT
>10857	Identifier	BBOX_RIGHT
>10858	Callee	NTA_ASSERT
>10859	Identifier	NTA_ASSERT
>10860	ExpressionStatement	NTA_ASSERT ( BBOX_LEFT ( psBBox ) >= BBOX_LEFT ( psImageBox ) )
>10861	CallExpression	NTA_ASSERT ( BBOX_LEFT ( psBBox ) >= BBOX_LEFT ( psImageBox ) )
>10862	ArgumentList	BBOX_LEFT ( psBBox ) >= BBOX_LEFT ( psImageBox )
>10863	Argument	BBOX_LEFT ( psBBox ) >= BBOX_LEFT ( psImageBox )
>10864	RelationalExpression	BBOX_LEFT ( psBBox ) >= BBOX_LEFT ( psImageBox )
>10865	CallExpression	BBOX_LEFT ( psImageBox )
>10866	ArgumentList	psImageBox
>10867	Argument	psImageBox
>10868	Identifier	psImageBox
>10869	Callee	BBOX_LEFT
>10870	Identifier	BBOX_LEFT
>10871	CallExpression	BBOX_LEFT ( psBBox )
>10872	ArgumentList	psBBox
>10873	Argument	psBBox
>10874	Identifier	psBBox
>10875	Callee	BBOX_LEFT
>10876	Identifier	BBOX_LEFT
>10877	Callee	NTA_ASSERT
>10878	Identifier	NTA_ASSERT
>10879	ExpressionStatement	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) % 4 == 0 )
>10880	CallExpression	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) % 4 == 0 )
>10881	ArgumentList	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>10882	Argument	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>10883	EqualityExpression	IMAGESET_COLS ( psBufferOut ) % 4 == 0
>10884	PrimaryExpression	0
>10885	MultiplicativeExpression	IMAGESET_COLS ( psBufferOut ) % 4
>10886	PrimaryExpression	4
>10887	CallExpression	IMAGESET_COLS ( psBufferOut )
>10888	ArgumentList	psBufferOut
>10889	Argument	psBufferOut
>10890	Identifier	psBufferOut
>10891	Callee	IMAGESET_COLS
>10892	Identifier	IMAGESET_COLS
>10893	Callee	NTA_ASSERT
>10894	Identifier	NTA_ASSERT
>10895	ExpressionStatement	NTA_ASSERT ( IMAGE_COLS ( psBufferIn ) % 4 == 0 )
>10896	CallExpression	NTA_ASSERT ( IMAGE_COLS ( psBufferIn ) % 4 == 0 )
>10897	ArgumentList	IMAGE_COLS ( psBufferIn ) % 4 == 0
>10898	Argument	IMAGE_COLS ( psBufferIn ) % 4 == 0
>10899	EqualityExpression	IMAGE_COLS ( psBufferIn ) % 4 == 0
>10900	PrimaryExpression	0
>10901	MultiplicativeExpression	IMAGE_COLS ( psBufferIn ) % 4
>10902	PrimaryExpression	4
>10903	CallExpression	IMAGE_COLS ( psBufferIn )
>10904	ArgumentList	psBufferIn
>10905	Argument	psBufferIn
>10906	Identifier	psBufferIn
>10907	Callee	IMAGE_COLS
>10908	Identifier	IMAGE_COLS
>10909	Callee	NTA_ASSERT
>10910	Identifier	NTA_ASSERT
>10911	ExpressionStatement	NTA_ASSERT ( BBOX_BOTTOM ( psBBox ) <= IMAGE_ROWS ( psInput ) )
>10912	CallExpression	NTA_ASSERT ( BBOX_BOTTOM ( psBBox ) <= IMAGE_ROWS ( psInput ) )
>10913	ArgumentList	BBOX_BOTTOM ( psBBox ) <= IMAGE_ROWS ( psInput )
>10914	Argument	BBOX_BOTTOM ( psBBox ) <= IMAGE_ROWS ( psInput )
>10915	RelationalExpression	BBOX_BOTTOM ( psBBox ) <= IMAGE_ROWS ( psInput )
>10916	CallExpression	IMAGE_ROWS ( psInput )
>10917	ArgumentList	psInput
>10918	Argument	psInput
>10919	Identifier	psInput
>10920	Callee	IMAGE_ROWS
>10921	Identifier	IMAGE_ROWS
>10922	CallExpression	BBOX_BOTTOM ( psBBox )
>10923	ArgumentList	psBBox
>10924	Argument	psBBox
>10925	Identifier	psBBox
>10926	Callee	BBOX_BOTTOM
>10927	Identifier	BBOX_BOTTOM
>10928	Callee	NTA_ASSERT
>10929	Identifier	NTA_ASSERT
>10930	ExpressionStatement	NTA_ASSERT ( BBOX_TOP ( psBBox ) <= BBOX_BOTTOM ( psBBox ) )
>10931	CallExpression	NTA_ASSERT ( BBOX_TOP ( psBBox ) <= BBOX_BOTTOM ( psBBox ) )
>10932	ArgumentList	BBOX_TOP ( psBBox ) <= BBOX_BOTTOM ( psBBox )
>10933	Argument	BBOX_TOP ( psBBox ) <= BBOX_BOTTOM ( psBBox )
>10934	RelationalExpression	BBOX_TOP ( psBBox ) <= BBOX_BOTTOM ( psBBox )
>10935	CallExpression	BBOX_BOTTOM ( psBBox )
>10936	ArgumentList	psBBox
>10937	Argument	psBBox
>10938	Identifier	psBBox
>10939	Callee	BBOX_BOTTOM
>10940	Identifier	BBOX_BOTTOM
>10941	CallExpression	BBOX_TOP ( psBBox )
>10942	ArgumentList	psBBox
>10943	Argument	psBBox
>10944	Identifier	psBBox
>10945	Callee	BBOX_TOP
>10946	Identifier	BBOX_TOP
>10947	Callee	NTA_ASSERT
>10948	Identifier	NTA_ASSERT
>10949	ExpressionStatement	NTA_ASSERT ( BBOX_TOP ( psBBox ) >= 0 )
>10950	CallExpression	NTA_ASSERT ( BBOX_TOP ( psBBox ) >= 0 )
>10951	ArgumentList	BBOX_TOP ( psBBox ) >= 0
>10952	Argument	BBOX_TOP ( psBBox ) >= 0
>10953	RelationalExpression	BBOX_TOP ( psBBox ) >= 0
>10954	PrimaryExpression	0
>10955	CallExpression	BBOX_TOP ( psBBox )
>10956	ArgumentList	psBBox
>10957	Argument	psBBox
>10958	Identifier	psBBox
>10959	Callee	BBOX_TOP
>10960	Identifier	BBOX_TOP
>10961	Callee	NTA_ASSERT
>10962	Identifier	NTA_ASSERT
>10963	ExpressionStatement	NTA_ASSERT ( BBOX_RIGHT ( psBBox ) <= IMAGE_COLS ( psInput ) )
>10964	CallExpression	NTA_ASSERT ( BBOX_RIGHT ( psBBox ) <= IMAGE_COLS ( psInput ) )
>10965	ArgumentList	BBOX_RIGHT ( psBBox ) <= IMAGE_COLS ( psInput )
>10966	Argument	BBOX_RIGHT ( psBBox ) <= IMAGE_COLS ( psInput )
>10967	RelationalExpression	BBOX_RIGHT ( psBBox ) <= IMAGE_COLS ( psInput )
>10968	CallExpression	IMAGE_COLS ( psInput )
>10969	ArgumentList	psInput
>10970	Argument	psInput
>10971	Identifier	psInput
>10972	Callee	IMAGE_COLS
>10973	Identifier	IMAGE_COLS
>10974	CallExpression	BBOX_RIGHT ( psBBox )
>10975	ArgumentList	psBBox
>10976	Argument	psBBox
>10977	Identifier	psBBox
>10978	Callee	BBOX_RIGHT
>10979	Identifier	BBOX_RIGHT
>10980	Callee	NTA_ASSERT
>10981	Identifier	NTA_ASSERT
>10982	ExpressionStatement	NTA_ASSERT ( BBOX_LEFT ( psBBox ) <= BBOX_RIGHT ( psBBox ) )
>10983	CallExpression	NTA_ASSERT ( BBOX_LEFT ( psBBox ) <= BBOX_RIGHT ( psBBox ) )
>10984	ArgumentList	BBOX_LEFT ( psBBox ) <= BBOX_RIGHT ( psBBox )
>10985	Argument	BBOX_LEFT ( psBBox ) <= BBOX_RIGHT ( psBBox )
>10986	RelationalExpression	BBOX_LEFT ( psBBox ) <= BBOX_RIGHT ( psBBox )
>10987	CallExpression	BBOX_RIGHT ( psBBox )
>10988	ArgumentList	psBBox
>10989	Argument	psBBox
>10990	Identifier	psBBox
>10991	Callee	BBOX_RIGHT
>10992	Identifier	BBOX_RIGHT
>10993	CallExpression	BBOX_LEFT ( psBBox )
>10994	ArgumentList	psBBox
>10995	Argument	psBBox
>10996	Identifier	psBBox
>10997	Callee	BBOX_LEFT
>10998	Identifier	BBOX_LEFT
>10999	Callee	NTA_ASSERT
>11000	Identifier	NTA_ASSERT
>11001	ExpressionStatement	NTA_ASSERT ( BBOX_LEFT ( psBBox ) >= 0 )
>11002	CallExpression	NTA_ASSERT ( BBOX_LEFT ( psBBox ) >= 0 )
>11003	ArgumentList	BBOX_LEFT ( psBBox ) >= 0
>11004	Argument	BBOX_LEFT ( psBBox ) >= 0
>11005	RelationalExpression	BBOX_LEFT ( psBBox ) >= 0
>11006	PrimaryExpression	0
>11007	CallExpression	BBOX_LEFT ( psBBox )
>11008	ArgumentList	psBBox
>11009	Argument	psBBox
>11010	Identifier	psBBox
>11011	Callee	BBOX_LEFT
>11012	Identifier	BBOX_LEFT
>11013	Callee	NTA_ASSERT
>11014	Identifier	NTA_ASSERT
>11015	IfStatement	if ( eEdgeMode == EDGE_MODE_CONSTRAINED )
>11016	ElseStatement	else
>11017	CompoundStatement	 
>11018	ExpressionStatement	NTA_ASSERT ( IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput ) )
>11019	CallExpression	NTA_ASSERT ( IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput ) )
>11020	ArgumentList	IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput )
>11021	Argument	IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput )
>11022	EqualityExpression	IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput )
>11023	CallExpression	IMAGESET_ROWS ( psOutput )
>11024	ArgumentList	psOutput
>11025	Argument	psOutput
>11026	Identifier	psOutput
>11027	Callee	IMAGESET_ROWS
>11028	Identifier	IMAGESET_ROWS
>11029	CallExpression	IMAGESET_ROWS ( psBufferOut )
>11030	ArgumentList	psBufferOut
>11031	Argument	psBufferOut
>11032	Identifier	psBufferOut
>11033	Callee	IMAGESET_ROWS
>11034	Identifier	IMAGESET_ROWS
>11035	Callee	NTA_ASSERT
>11036	Identifier	NTA_ASSERT
>11037	ExpressionStatement	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) ) )
>11038	CallExpression	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) ) )
>11039	ArgumentList	IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11040	Argument	IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11041	EqualityExpression	IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11042	CallExpression	ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11043	ArgumentList	IMAGESET_COLS ( psOutput )
>11044	Argument	IMAGESET_COLS ( psOutput )
>11045	CallExpression	IMAGESET_COLS ( psOutput )
>11046	ArgumentList	psOutput
>11047	Argument	psOutput
>11048	Identifier	psOutput
>11049	Callee	IMAGESET_COLS
>11050	Identifier	IMAGESET_COLS
>11051	Callee	ALIGN_4_CEIL
>11052	Identifier	ALIGN_4_CEIL
>11053	CallExpression	IMAGESET_COLS ( psBufferOut )
>11054	ArgumentList	psBufferOut
>11055	Argument	psBufferOut
>11056	Identifier	psBufferOut
>11057	Callee	IMAGESET_COLS
>11058	Identifier	IMAGESET_COLS
>11059	Callee	NTA_ASSERT
>11060	Identifier	NTA_ASSERT
>11061	ExpressionStatement	NTA_ASSERT ( IMAGE_ROWS ( psBufferIn ) == ( IMAGESET_ROWS ( psBufferOut ) + nFilterDim - 1 ) )
>11062	CallExpression	NTA_ASSERT ( IMAGE_ROWS ( psBufferIn ) == ( IMAGESET_ROWS ( psBufferOut ) + nFilterDim - 1 ) )
>11063	ArgumentList	IMAGE_ROWS ( psBufferIn ) == ( IMAGESET_ROWS ( psBufferOut ) + nFilterDim - 1 )
>11064	Argument	IMAGE_ROWS ( psBufferIn ) == ( IMAGESET_ROWS ( psBufferOut ) + nFilterDim - 1 )
>11065	EqualityExpression	IMAGE_ROWS ( psBufferIn ) == ( IMAGESET_ROWS ( psBufferOut ) + nFilterDim - 1 )
>11066	AdditiveExpression	IMAGESET_ROWS ( psBufferOut ) + nFilterDim - 1
>11067	AdditiveExpression	nFilterDim - 1
>11068	PrimaryExpression	1
>11069	Identifier	nFilterDim
>11070	CallExpression	IMAGESET_ROWS ( psBufferOut )
>11071	ArgumentList	psBufferOut
>11072	Argument	psBufferOut
>11073	Identifier	psBufferOut
>11074	Callee	IMAGESET_ROWS
>11075	Identifier	IMAGESET_ROWS
>11076	CallExpression	IMAGE_ROWS ( psBufferIn )
>11077	ArgumentList	psBufferIn
>11078	Argument	psBufferIn
>11079	Identifier	psBufferIn
>11080	Callee	IMAGE_ROWS
>11081	Identifier	IMAGE_ROWS
>11082	Callee	NTA_ASSERT
>11083	Identifier	NTA_ASSERT
>11084	ExpressionStatement	NTA_ASSERT ( IMAGE_COLS ( psBufferIn ) <= ALIGN_4_CEIL ( IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1 ) )
>11085	CallExpression	NTA_ASSERT ( IMAGE_COLS ( psBufferIn ) <= ALIGN_4_CEIL ( IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1 ) )
>11086	ArgumentList	IMAGE_COLS ( psBufferIn ) <= ALIGN_4_CEIL ( IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1 )
>11087	Argument	IMAGE_COLS ( psBufferIn ) <= ALIGN_4_CEIL ( IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1 )
>11088	RelationalExpression	IMAGE_COLS ( psBufferIn ) <= ALIGN_4_CEIL ( IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1 )
>11089	CallExpression	ALIGN_4_CEIL ( IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1 )
>11090	ArgumentList	IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1
>11091	Argument	IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1
>11092	AdditiveExpression	IMAGESET_COLS ( psBufferOut ) + nFilterDim - 1
>11093	AdditiveExpression	nFilterDim - 1
>11094	PrimaryExpression	1
>11095	Identifier	nFilterDim
>11096	CallExpression	IMAGESET_COLS ( psBufferOut )
>11097	ArgumentList	psBufferOut
>11098	Argument	psBufferOut
>11099	Identifier	psBufferOut
>11100	Callee	IMAGESET_COLS
>11101	Identifier	IMAGESET_COLS
>11102	Callee	ALIGN_4_CEIL
>11103	Identifier	ALIGN_4_CEIL
>11104	CallExpression	IMAGE_COLS ( psBufferIn )
>11105	ArgumentList	psBufferIn
>11106	Argument	psBufferIn
>11107	Identifier	psBufferIn
>11108	Callee	IMAGE_COLS
>11109	Identifier	IMAGE_COLS
>11110	Callee	NTA_ASSERT
>11111	Identifier	NTA_ASSERT
>11112	ExpressionStatement	NTA_ASSERT ( eEdgeMode == EDGE_MODE_SWEEPOFF )
>11113	CallExpression	NTA_ASSERT ( eEdgeMode == EDGE_MODE_SWEEPOFF )
>11114	ArgumentList	eEdgeMode == EDGE_MODE_SWEEPOFF
>11115	Argument	eEdgeMode == EDGE_MODE_SWEEPOFF
>11116	EqualityExpression	eEdgeMode == EDGE_MODE_SWEEPOFF
>11117	Identifier	EDGE_MODE_SWEEPOFF
>11118	Identifier	eEdgeMode
>11119	Callee	NTA_ASSERT
>11120	Identifier	NTA_ASSERT
>11121	CompoundStatement	 
>11122	ExpressionStatement	NTA_ASSERT ( IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput ) )
>11123	CallExpression	NTA_ASSERT ( IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput ) )
>11124	ArgumentList	IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput )
>11125	Argument	IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput )
>11126	EqualityExpression	IMAGESET_ROWS ( psBufferOut ) == IMAGESET_ROWS ( psOutput )
>11127	CallExpression	IMAGESET_ROWS ( psOutput )
>11128	ArgumentList	psOutput
>11129	Argument	psOutput
>11130	Identifier	psOutput
>11131	Callee	IMAGESET_ROWS
>11132	Identifier	IMAGESET_ROWS
>11133	CallExpression	IMAGESET_ROWS ( psBufferOut )
>11134	ArgumentList	psBufferOut
>11135	Argument	psBufferOut
>11136	Identifier	psBufferOut
>11137	Callee	IMAGESET_ROWS
>11138	Identifier	IMAGESET_ROWS
>11139	Callee	NTA_ASSERT
>11140	Identifier	NTA_ASSERT
>11141	ExpressionStatement	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) ) )
>11142	CallExpression	NTA_ASSERT ( IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) ) )
>11143	ArgumentList	IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11144	Argument	IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11145	EqualityExpression	IMAGESET_COLS ( psBufferOut ) == ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11146	CallExpression	ALIGN_4_CEIL ( IMAGESET_COLS ( psOutput ) )
>11147	ArgumentList	IMAGESET_COLS ( psOutput )
>11148	Argument	IMAGESET_COLS ( psOutput )
>11149	CallExpression	IMAGESET_COLS ( psOutput )
>11150	ArgumentList	psOutput
>11151	Argument	psOutput
>11152	Identifier	psOutput
>11153	Callee	IMAGESET_COLS
>11154	Identifier	IMAGESET_COLS
>11155	Callee	ALIGN_4_CEIL
>11156	Identifier	ALIGN_4_CEIL
>11157	CallExpression	IMAGESET_COLS ( psBufferOut )
>11158	ArgumentList	psBufferOut
>11159	Argument	psBufferOut
>11160	Identifier	psBufferOut
>11161	Callee	IMAGESET_COLS
>11162	Identifier	IMAGESET_COLS
>11163	Callee	NTA_ASSERT
>11164	Identifier	NTA_ASSERT
>11165	Condition	eEdgeMode == EDGE_MODE_CONSTRAINED
>11166	EqualityExpression	eEdgeMode == EDGE_MODE_CONSTRAINED
>11167	Identifier	EDGE_MODE_CONSTRAINED
>11168	Identifier	eEdgeMode
>11169	IdentifierDeclStatement	int nShrinkage = nHalfFilterDim << 1 ;
>11170	IdentifierDecl	nShrinkage = nHalfFilterDim << 1
>11171	AssignmentExpr	nShrinkage = nHalfFilterDim << 1
>11172	ShiftExpression	nHalfFilterDim << 1
>11173	PrimaryExpression	1
>11174	Identifier	nHalfFilterDim
>11175	Identifier	nShrinkage
>11176	Identifier	nShrinkage
>11177	IdentifierDeclType	int
>11178	IdentifierDeclStatement	int nHalfFilterDim = nFilterDim >> 1 ;
>11179	IdentifierDecl	nHalfFilterDim = nFilterDim >> 1
>11180	AssignmentExpr	nHalfFilterDim = nFilterDim >> 1
>11181	ShiftExpression	nFilterDim >> 1
>11182	PrimaryExpression	1
>11183	Identifier	nFilterDim
>11184	Identifier	nHalfFilterDim
>11185	Identifier	nHalfFilterDim
>11186	IdentifierDeclType	int
>11187	IdentifierDeclStatement	int nFilterDim = IMAGESET_ROWS ( psGaborBank ) ;
>11188	IdentifierDecl	nFilterDim = IMAGESET_ROWS ( psGaborBank )
>11189	AssignmentExpr	nFilterDim = IMAGESET_ROWS ( psGaborBank )
>11190	CallExpression	IMAGESET_ROWS ( psGaborBank )
>11191	ArgumentList	psGaborBank
>11192	Argument	psGaborBank
>11193	Identifier	psGaborBank
>11194	Callee	IMAGESET_ROWS
>11195	Identifier	IMAGESET_ROWS
>11196	Identifier	nFilterDim
>11197	Identifier	nFilterDim
>11198	IdentifierDeclType	int
>11199	ExpressionStatement	NTA_ASSERT ( IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank ) )
>11200	CallExpression	NTA_ASSERT ( IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank ) )
>11201	ArgumentList	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>11202	Argument	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>11203	EqualityExpression	IMAGESET_ROWS ( psGaborBank ) == IMAGESET_COLS ( psGaborBank )
>11204	CallExpression	IMAGESET_COLS ( psGaborBank )
>11205	ArgumentList	psGaborBank
>11206	Argument	psGaborBank
>11207	Identifier	psGaborBank
>11208	Callee	IMAGESET_COLS
>11209	Identifier	IMAGESET_COLS
>11210	CallExpression	IMAGESET_ROWS ( psGaborBank )
>11211	ArgumentList	psGaborBank
>11212	Argument	psGaborBank
>11213	Identifier	psGaborBank
>11214	Callee	IMAGESET_ROWS
>11215	Identifier	IMAGESET_ROWS
>11216	Callee	NTA_ASSERT
>11217	Identifier	NTA_ASSERT
>11218	IdentifierDeclStatement	 
>11219	IdentifierDecl	anStatNegGrand [ MAXNUM_FILTERS ]
>11220	Identifier	MAXNUM_FILTERS
>11221	Identifier	anStatNegGrand
>11222	IdentifierDeclType	unsigned int [ MAXNUM_FILTERS ]
>11223	IdentifierDeclStatement	 
>11224	IdentifierDecl	anStatPosGrand [ MAXNUM_FILTERS ]
>11225	Identifier	MAXNUM_FILTERS
>11226	Identifier	anStatPosGrand
>11227	IdentifierDeclType	unsigned int [ MAXNUM_FILTERS ]
<3=9,8,4
<4=5
<5=7,6
<9=28,19,10
<10=11
<11=17,12
<12=13
<13=14
<14=16,15
<17=18
<19=20
<20=27,26,21
<21=25,22
<22=24,23
<28=29
<29=35,30
<30=31
<31=32
<32=34,33
<35=36
<43=46,45,44
<46=47
<47=48
<48=50,49
<50=51
<56=77,76,57
<57=73,70,67,64,61,58
<58=60,59
<61=63,62
<64=66,65
<67=69,68
<70=72,71
<73=75,74
<77=1049,1040,1029,1011,1000,982,971,950,938,926,912,898,884,870,842,814,805,789,780,764,755,741,732,718,712,703,694,612,603,594,583,571,562,549,538,529,518,501,492,483,479,175,171,89,78
<78=79
<79=87,80
<80=81
<81=82
<82=84,83
<84=86,85
<87=88
<89=165,163,160,90
<90=91
<91=156,154,151,92
<92=140,125,117,109,101,93
<93=94
<94=96,95
<96=100,97
<97=99,98
<101=102
<102=104,103
<104=108,105
<105=107,106
<109=110
<110=112,111
<112=116,113
<113=115,114
<117=118
<118=120,119
<120=124,121
<121=123,122
<125=126
<126=138,127
<127=128
<128=129
<129=131,130
<131=137,132
<132=136,133
<133=135,134
<138=139
<140=141
<141=149,142
<142=143
<143=144
<144=146,145
<146=148,147
<149=150
<151=153,152
<154=155
<156=157
<157=159,158
<160=162,161
<163=164
<165=166
<166=170,167
<167=169,168
<171=172
<172=174,173
<175=475,473,470,176
<176=425,374,281,230,185,181,177
<177=178
<178=180,179
<181=182
<182=184,183
<185=226,224,221,186
<186=210,195,187
<187=188
<188=190,189
<190=194,191
<191=193,192
<195=196
<196=208,197
<197=198
<198=199
<199=201,200
<201=207,202
<202=206,203
<203=205,204
<208=209
<210=211
<211=219,212
<212=213
<213=214
<214=216,215
<216=218,217
<219=220
<221=223,222
<224=225
<226=227
<227=229,228
<230=277,275,272,231
<231=261,246,232
<232=233
<233=241,234
<234=240,235
<235=239,236
<236=238,237
<241=245,242
<242=244,243
<246=247
<247=259,248
<248=249
<249=250
<250=252,251
<252=258,253
<253=257,254
<254=256,255
<259=260
<261=262
<262=270,263
<263=264
<264=265
<265=267,266
<267=269,268
<270=271
<272=274,273
<275=276
<277=278
<278=280,279
<281=370,368,365,282
<282=354,339,325,311,297,283
<283=284
<284=292,285
<285=291,286
<286=290,287
<287=289,288
<292=296,293
<293=295,294
<297=298
<298=306,299
<299=305,300
<300=304,301
<301=303,302
<306=310,307
<307=309,308
<311=312
<312=320,313
<313=319,314
<314=318,315
<315=317,316
<320=324,321
<321=323,322
<325=326
<326=334,327
<327=333,328
<328=332,329
<329=331,330
<334=338,335
<335=337,336
<339=340
<340=352,341
<341=342
<342=343
<343=345,344
<345=351,346
<346=350,347
<347=349,348
<352=353
<354=355
<355=363,356
<356=357
<357=358
<358=360,359
<360=362,361
<363=364
<365=367,366
<368=369
<370=371
<371=373,372
<374=421,419,416,375
<375=405,390,376
<376=377
<377=385,378
<378=384,379
<379=383,380
<380=382,381
<385=389,386
<386=388,387
<390=391
<391=403,392
<392=393
<393=394
<394=396,395
<396=402,397
<397=401,398
<398=400,399
<403=404
<405=406
<406=414,407
<407=408
<408=409
<409=411,410
<411=413,412
<414=415
<416=418,417
<419=420
<421=422
<422=424,423
<425=466,464,461,426
<426=450,435,427
<427=428
<428=430,429
<430=434,431
<431=433,432
<435=436
<436=448,437
<437=438
<438=439
<439=441,440
<441=447,442
<442=446,443
<443=445,444
<448=449
<450=451
<451=459,452
<452=453
<453=454
<454=456,455
<456=458,457
<459=460
<461=463,462
<464=465
<466=467
<467=469,468
<470=472,471
<473=474
<475=476
<476=478,477
<479=480
<480=482,481
<483=484
<484=491,490,485
<485=489,486
<486=488,487
<492=493
<493=500,499,494
<494=498,495
<495=497,496
<501=502
<502=516,503
<503=504
<504=505
<505=509,506
<506=508,507
<509=515,510
<510=514,511
<511=513,512
<516=517
<518=519
<519=528,527,520
<520=526,521
<521=525,522
<522=524,523
<529=530
<530=537,536,531
<531=535,532
<532=534,533
<538=539
<539=548,547,540
<540=546,541
<541=545,542
<542=544,543
<549=550
<550=561,560,551
<551=559,552
<552=554,553
<554=558,555
<555=557,556
<562=563
<563=570,569,564
<564=568,565
<565=567,566
<571=572
<572=582,573
<573=577,574
<574=576,575
<577=581,578
<578=580,579
<583=584
<584=593,592,585
<585=591,586
<586=590,587
<587=589,588
<594=595
<595=602,601,596
<596=600,597
<597=599,598
<603=604
<604=611,610,605
<605=609,606
<606=608,607
<612=688,686,683,613
<613=614
<614=679,677,674,615
<615=663,648,640,632,624,616
<616=617
<617=619,618
<619=623,620
<620=622,621
<624=625
<625=627,626
<627=631,628
<628=630,629
<632=633
<633=635,634
<635=639,636
<636=638,637
<640=641
<641=643,642
<643=647,644
<644=646,645
<648=649
<649=661,650
<650=651
<651=652
<652=654,653
<654=660,655
<655=659,656
<656=658,657
<661=662
<663=664
<664=672,665
<665=666
<666=667
<667=669,668
<669=671,670
<672=673
<674=676,675
<677=678
<679=680
<680=682,681
<683=685,684
<686=687
<688=689
<689=693,690
<690=692,691
<694=695
<695=702,701,696
<696=700,697
<697=699,698
<703=704
<704=711,710,705
<705=709,706
<706=708,707
<712=713
<713=717,714
<714=716,715
<718=719
<719=730,720
<720=721
<721=722
<722=729,723
<723=727,724
<724=725
<725=726
<727=728
<730=731
<732=733
<733=739,734
<734=735
<735=736
<736=738,737
<739=740
<741=742
<742=753,743
<743=744
<744=745
<745=752,746
<746=750,747
<747=748
<748=749
<750=751
<753=754
<755=756
<756=762,757
<757=758
<758=759
<759=761,760
<762=763
<764=765
<765=778,766
<766=767
<767=768
<768=777,769
<769=771,770
<771=775,772
<772=773
<773=774
<775=776
<778=779
<780=781
<781=787,782
<782=783
<783=784
<784=786,785
<787=788
<789=790
<790=803,791
<791=792
<792=793
<793=802,794
<794=796,795
<796=800,797
<797=798
<798=799
<800=801
<803=804
<805=806
<806=812,807
<807=808
<808=809
<809=811,810
<812=813
<814=815
<815=841,840,816
<816=839,817
<817=837,818
<818=828,819
<819=820
<820=822,821
<822=826,823
<823=824
<824=825
<826=827
<828=829
<829=831,830
<831=835,832
<832=833
<833=834
<835=836
<837=838
<842=843
<843=869,868,844
<844=867,845
<845=865,846
<846=856,847
<847=848
<848=850,849
<850=854,851
<851=852
<852=853
<854=855
<856=857
<857=859,858
<859=863,860
<860=861
<861=862
<863=864
<865=866
<870=871
<871=883,882,872
<872=881,873
<873=879,874
<874=877,875
<875=876
<877=878
<879=880
<884=885
<885=897,896,886
<886=895,887
<887=893,888
<888=891,889
<889=890
<891=892
<893=894
<898=899
<899=911,910,900
<900=909,901
<901=903,902
<903=907,904
<904=905
<905=906
<907=908
<912=913
<913=925,924,914
<914=923,915
<915=917,916
<917=921,918
<918=919
<919=920
<921=922
<926=927
<927=937,936,928
<928=935,929
<929=933,930
<930=931
<931=932
<933=934
<938=939
<939=949,948,940
<940=947,941
<941=945,942
<942=943
<943=944
<945=946
<950=951
<951=970,969,952
<952=968,953
<953=967,954
<954=961,955
<955=959,956
<956=957
<957=958
<959=960
<961=965,962
<962=963
<963=964
<965=966
<971=972
<972=981,980,973
<973=979,974
<974=978,975
<975=977,976
<982=983
<983=999,998,984
<984=997,985
<985=991,986
<986=990,987
<987=989,988
<991=995,992
<992=993
<993=994
<995=996
<1000=1001
<1001=1010,1009,1002
<1002=1008,1003
<1003=1007,1004
<1004=1006,1005
<1011=1012
<1012=1028,1027,1013
<1013=1026,1014
<1014=1020,1015
<1015=1019,1016
<1016=1018,1017
<1020=1024,1021
<1021=1022
<1022=1023
<1024=1025
<1029=1030
<1030=1039,1038,1031
<1031=1037,1032
<1032=1036,1033
<1033=1035,1034
<1040=1041
<1041=1048,1047,1042
<1042=1046,1043
<1043=1045,1044
<1049=1053,1050
<1050=1052,1051
<1053=1055,1054
<1112=1130,1129,1113
<1113=1126,1123,1120,1117,1114
<1114=1116,1115
<1117=1119,1118
<1120=1122,1121
<1123=1125,1124
<1126=1128,1127
<1130=1537,1526,1508,1497,1479,1448,1422,1396,1370,1361,1347,1338,1324,1313,1304,1295,1286,1278,1270,1261,1252,1241,1131
<1131=1237,1235,1232,1132
<1132=1165,1141,1137,1133
<1133=1134
<1134=1136,1135
<1137=1138
<1138=1140,1139
<1141=1161,1159,1156,1142
<1142=1143
<1143=1151,1144
<1144=1150,1145
<1145=1149,1146
<1146=1148,1147
<1151=1155,1152
<1152=1154,1153
<1156=1158,1157
<1159=1160
<1161=1162
<1162=1164,1163
<1165=1228,1226,1223,1166
<1166=1209,1195,1181,1167
<1167=1168
<1168=1176,1169
<1169=1175,1170
<1170=1174,1171
<1171=1173,1172
<1176=1180,1177
<1177=1179,1178
<1181=1182
<1182=1190,1183
<1183=1189,1184
<1184=1188,1185
<1185=1187,1186
<1190=1194,1191
<1191=1193,1192
<1195=1196
<1196=1204,1197
<1197=1203,1198
<1198=1202,1199
<1199=1201,1200
<1204=1208,1205
<1205=1207,1206
<1209=1210
<1210=1218,1211
<1211=1217,1212
<1212=1216,1213
<1213=1215,1214
<1218=1222,1219
<1219=1221,1220
<1223=1225,1224
<1226=1227
<1228=1229
<1229=1231,1230
<1232=1234,1233
<1235=1236
<1237=1238
<1238=1240,1239
<1241=1242
<1242=1251,1250,1243
<1243=1249,1244
<1244=1248,1245
<1245=1247,1246
<1252=1253
<1253=1260,1259,1254
<1254=1258,1255
<1255=1257,1256
<1261=1262
<1262=1269,1268,1263
<1263=1267,1264
<1264=1266,1265
<1270=1271
<1271=1277,1272
<1272=1274,1273
<1274=1276,1275
<1278=1279
<1279=1285,1280
<1280=1282,1281
<1282=1284,1283
<1286=1287
<1287=1294,1293,1288
<1288=1292,1289
<1289=1291,1290
<1295=1296
<1296=1303,1302,1297
<1297=1301,1298
<1298=1300,1299
<1304=1305
<1305=1312,1311,1306
<1306=1310,1307
<1307=1309,1308
<1313=1314
<1314=1322,1315
<1315=1316
<1316=1317
<1317=1319,1318
<1319=1321,1320
<1322=1323
<1324=1325
<1325=1336,1326
<1326=1327
<1327=1328
<1328=1335,1329
<1329=1333,1330
<1330=1331
<1331=1332
<1333=1334
<1336=1337
<1338=1339
<1339=1345,1340
<1340=1341
<1341=1342
<1342=1344,1343
<1345=1346
<1347=1348
<1348=1359,1349
<1349=1350
<1350=1351
<1351=1358,1352
<1352=1356,1353
<1353=1354
<1354=1355
<1356=1357
<1359=1360
<1361=1362
<1362=1368,1363
<1363=1364
<1364=1365
<1365=1367,1366
<1368=1369
<1370=1371
<1371=1395,1394,1372
<1372=1393,1373
<1373=1391,1374
<1374=1382,1375
<1375=1376
<1376=1380,1377
<1377=1378
<1378=1379
<1380=1381
<1382=1383
<1383=1385,1384
<1385=1389,1386
<1386=1387
<1387=1388
<1389=1390
<1391=1392
<1396=1397
<1397=1421,1420,1398
<1398=1419,1399
<1399=1417,1400
<1400=1408,1401
<1401=1402
<1402=1406,1403
<1403=1404
<1404=1405
<1406=1407
<1408=1409
<1409=1411,1410
<1411=1415,1412
<1412=1413
<1413=1414
<1415=1416
<1417=1418
<1422=1423
<1423=1447,1446,1424
<1424=1445,1425
<1425=1443,1426
<1426=1434,1427
<1427=1428
<1428=1432,1429
<1429=1430
<1430=1431
<1432=1433
<1434=1435
<1435=1437,1436
<1437=1441,1438
<1438=1439
<1439=1440
<1441=1442
<1443=1444
<1448=1449
<1449=1478,1477,1450
<1450=1476,1451
<1451=1474,1452
<1452=1460,1453
<1453=1454
<1454=1458,1455
<1455=1456
<1456=1457
<1458=1459
<1460=1461
<1461=1472,1462
<1462=1463
<1463=1464
<1464=1466,1465
<1466=1470,1467
<1467=1468
<1468=1469
<1470=1471
<1472=1473
<1474=1475
<1479=1480
<1480=1496,1495,1481
<1481=1494,1482
<1482=1488,1483
<1483=1487,1484
<1484=1486,1485
<1488=1492,1489
<1489=1490
<1490=1491
<1492=1493
<1497=1498
<1498=1507,1506,1499
<1499=1505,1500
<1500=1504,1501
<1501=1503,1502
<1508=1509
<1509=1525,1524,1510
<1510=1523,1511
<1511=1517,1512
<1512=1516,1513
<1513=1515,1514
<1517=1521,1518
<1518=1519
<1519=1520
<1521=1522
<1526=1527
<1527=1536,1535,1528
<1528=1534,1529
<1529=1533,1530
<1530=1532,1531
<1537=1541,1538
<1538=1540,1539
<1541=1543,1542
<1586=1610,1609,1587
<1587=1606,1603,1600,1597,1594,1591,1588
<1588=1590,1589
<1591=1593,1592
<1594=1596,1595
<1597=1599,1598
<1600=1602,1601
<1603=1605,1604
<1606=1608,1607
<1610=1611
<1611=1645,1630,1612
<1612=1613
<1613=1614
<1614=1628,1615
<1615=1626,1624,1622,1620,1618,1616
<1616=1617
<1618=1619
<1620=1621
<1622=1623
<1624=1625
<1626=1627
<1628=1629
<1630=1631
<1631=1643,1632
<1632=1641,1639,1637,1635,1633
<1633=1634
<1635=1636
<1637=1638
<1639=1640
<1641=1642
<1643=1644
<1645=1646
<1646=1648,1647
<1660=1678,1677,1661
<1661=1674,1671,1668,1665,1662
<1662=1664,1663
<1665=1667,1666
<1668=1670,1669
<1671=1673,1672
<1674=1676,1675
<1678=1679
<1679=1720,1709,1680
<1680=1681
<1681=1705,1692,1682
<1682=1683
<1683=1688,1684
<1684=1685
<1685=1687,1686
<1688=1689
<1689=1691,1690
<1692=1693
<1693=1703,1694
<1694=1699,1695
<1695=1696
<1696=1698,1697
<1699=1700
<1700=1702,1701
<1703=1704
<1705=1706
<1706=1708,1707
<1709=1716,1710
<1710=1711
<1711=1715,1712
<1712=1714,1713
<1716=1717
<1717=1719,1718
<1720=1721
<1721=1723,1722
<1735=1771,1770,1736
<1736=1767,1764,1761,1758,1755,1752,1749,1746,1743,1740,1737
<1737=1739,1738
<1740=1742,1741
<1743=1745,1744
<1746=1748,1747
<1749=1751,1750
<1752=1754,1753
<1755=1757,1756
<1758=1760,1759
<1761=1763,1762
<1764=1766,1765
<1767=1769,1768
<1771=4179,4175,4171,4164,4157,4150,4143,4136,4129,4122,4115,4108,4101,4094,4087,4009,3990,3978,3963,3948,3937,3926,3908,3897,3876,3865,3847,3838,3827,3809,3796,3783,3767,3758,3754,3750,1890,1819,1772
<1772=1811,1807,1804,1773
<1773=1789,1774
<1774=1775
<1775=1787,1776
<1776=1785,1783,1781,1777
<1777=1778
<1778=1780,1779
<1781=1782
<1783=1784
<1785=1786
<1787=1788
<1789=1790
<1790=1802,1791
<1791=1800,1798,1796,1792
<1792=1793
<1793=1795,1794
<1796=1797
<1798=1799
<1800=1801
<1802=1803
<1804=1806,1805
<1807=1808
<1808=1810,1809
<1811=1812
<1812=1813
<1813=1818,1817,1814
<1814=1816,1815
<1819=1886,1820
<1820=1871,1862,1852,1821
<1821=1848,1822
<1822=1842,1833,1823
<1823=1824
<1824=1830,1825
<1825=1829,1826
<1826=1828,1827
<1830=1832,1831
<1833=1834
<1834=1840,1835
<1835=1836
<1836=1837
<1837=1839,1838
<1840=1841
<1842=1843
<1843=1847,1844
<1844=1846,1845
<1848=1849
<1849=1851,1850
<1852=1853
<1853=1859,1854
<1854=1858,1855
<1855=1857,1856
<1859=1861,1860
<1862=1863
<1863=1869,1864
<1864=1865
<1865=1866
<1866=1868,1867
<1869=1870
<1871=1872
<1872=1884,1873
<1873=1882,1880,1878,1876,1874
<1874=1875
<1876=1877
<1878=1879
<1880=1881
<1882=1883
<1884=1885
<1886=1887
<1887=1889,1888
<1890=3746,3737,3734,1891
<1891=3720,3706,3699,3692,3686,3676,2055,2040,2025,1918,1892
<1892=1902,1893
<1893=1894
<1894=1901,1895
<1895=1899,1896
<1896=1897
<1897=1898
<1899=1900
<1902=1903
<1903=1915,1904
<1904=1908,1905
<1905=1907,1906
<1908=1912,1909
<1909=1911,1910
<1912=1914,1913
<1915=1917,1916
<1918=2021,1919
<1919=2006,1997,1987,1956,1920
<1920=1948,1944,1941,1921
<1921=1922
<1922=1923
<1923=1939,1924
<1924=1937,1935,1933,1929,1925
<1925=1926
<1926=1928,1927
<1929=1930
<1930=1932,1931
<1933=1934
<1935=1936
<1937=1938
<1939=1940
<1941=1943,1942
<1944=1945
<1945=1947,1946
<1948=1949
<1949=1950
<1950=1955,1954,1951
<1951=1953,1952
<1956=1983,1957
<1957=1977,1968,1958
<1958=1959
<1959=1965,1960
<1960=1964,1961
<1961=1963,1962
<1965=1967,1966
<1968=1969
<1969=1975,1970
<1970=1971
<1971=1972
<1972=1974,1973
<1975=1976
<1977=1978
<1978=1982,1979
<1979=1981,1980
<1983=1984
<1984=1986,1985
<1987=1988
<1988=1994,1989
<1989=1993,1990
<1990=1992,1991
<1994=1996,1995
<1997=1998
<1998=2004,1999
<1999=2000
<2000=2001
<2001=2003,2002
<2004=2005
<2006=2007
<2007=2019,2008
<2008=2017,2015,2013,2011,2009
<2009=2010
<2011=2012
<2013=2014
<2015=2016
<2017=2018
<2019=2020
<2021=2022
<2022=2024,2023
<2025=2026
<2026=2039,2027
<2027=2033,2028
<2028=2032,2029
<2029=2031,2030
<2033=2037,2034
<2034=2035
<2035=2036
<2037=2038
<2040=2041
<2041=2054,2042
<2042=2048,2043
<2043=2047,2044
<2044=2046,2045
<2048=2052,2049
<2049=2050
<2050=2051
<2052=2053
<2055=3672,3670,3667,2056
<2056=3663,3659,3655,3647,3637,3593,2089,2069,2065,2061,2057
<2057=2058
<2058=2060,2059
<2061=2062
<2062=2064,2063
<2065=2066
<2066=2068,2067
<2069=2085,2070
<2070=2079,2071
<2071=2072
<2072=2078,2073
<2073=2075,2074
<2075=2077,2076
<2079=2080
<2080=2084,2081
<2081=2083,2082
<2085=2086
<2086=2088,2087
<2089=3591,2090
<2090=3590,3348,3347,3346,3076,3075,3074,2776,2775,2774,2448,2447,2446,2092,2091
<2092=2442,2440,2437,2093
<2093=2433,2429,2425,2128,2117,2106,2098,2094
<2094=2095
<2095=2097,2096
<2098=2099
<2099=2101,2100
<2101=2105,2102
<2102=2104,2103
<2106=2107
<2107=2115,2108
<2108=2109
<2109=2110
<2110=2112,2111
<2112=2114,2113
<2115=2116
<2117=2118
<2118=2126,2119
<2119=2120
<2120=2121
<2121=2123,2122
<2123=2125,2124
<2126=2127
<2128=2419,2129
<2129=2222,2130
<2130=2218,2202,2131
<2131=2132
<2132=2198,2169,2133
<2133=2134
<2134=2165,2156,2135
<2135=2136
<2136=2152,2137
<2137=2138
<2138=2148,2144,2139
<2139=2140
<2140=2141
<2141=2143,2142
<2144=2145
<2145=2147,2146
<2148=2149
<2149=2151,2150
<2152=2153
<2153=2155,2154
<2156=2157
<2157=2164,2158
<2158=2162,2159
<2159=2160
<2160=2161
<2162=2163
<2165=2166
<2166=2168,2167
<2169=2170
<2170=2194,2183,2171
<2171=2172
<2172=2173
<2173=2182,2174
<2174=2180,2175
<2175=2178,2176
<2176=2177
<2178=2179
<2180=2181
<2183=2184
<2184=2193,2185
<2185=2191,2186
<2186=2189,2187
<2187=2188
<2189=2190
<2191=2192
<2194=2195
<2195=2197,2196
<2198=2199
<2199=2201,2200
<2202=2203
<2203=2217,2204
<2204=2215,2205
<2205=2213,2206
<2206=2207
<2207=2211,2208
<2208=2209
<2209=2210
<2211=2212
<2213=2214
<2215=2216
<2218=2219
<2219=2221,2220
<2222=2415,2413,2410,2223
<2223=2396,2382,2368,2354,2340,2326,2312,2298,2284,2270,2256,2242,2228,2224
<2224=2225
<2225=2227,2226
<2228=2229
<2229=2241,2230
<2230=2236,2231
<2231=2235,2232
<2232=2234,2233
<2236=2240,2237
<2237=2239,2238
<2242=2243
<2243=2255,2244
<2244=2250,2245
<2245=2249,2246
<2246=2248,2247
<2250=2254,2251
<2251=2253,2252
<2256=2257
<2257=2269,2258
<2258=2264,2259
<2259=2263,2260
<2260=2262,2261
<2264=2268,2265
<2265=2267,2266
<2270=2271
<2271=2283,2272
<2272=2278,2273
<2273=2277,2274
<2274=2276,2275
<2278=2282,2279
<2279=2281,2280
<2284=2285
<2285=2297,2286
<2286=2292,2287
<2287=2291,2288
<2288=2290,2289
<2292=2296,2293
<2293=2295,2294
<2298=2299
<2299=2311,2300
<2300=2306,2301
<2301=2305,2302
<2302=2304,2303
<2306=2310,2307
<2307=2309,2308
<2312=2313
<2313=2325,2314
<2314=2320,2315
<2315=2319,2316
<2316=2318,2317
<2320=2324,2321
<2321=2323,2322
<2326=2327
<2327=2339,2328
<2328=2334,2329
<2329=2333,2330
<2330=2332,2331
<2334=2338,2335
<2335=2337,2336
<2340=2341
<2341=2353,2342
<2342=2348,2343
<2343=2347,2344
<2344=2346,2345
<2348=2352,2349
<2349=2351,2350
<2354=2355
<2355=2367,2356
<2356=2362,2357
<2357=2361,2358
<2358=2360,2359
<2362=2366,2363
<2363=2365,2364
<2368=2369
<2369=2381,2370
<2370=2376,2371
<2371=2375,2372
<2372=2374,2373
<2376=2380,2377
<2377=2379,2378
<2382=2383
<2383=2395,2384
<2384=2390,2385
<2385=2389,2386
<2386=2388,2387
<2390=2394,2391
<2391=2393,2392
<2396=2397
<2397=2409,2398
<2398=2404,2399
<2399=2403,2400
<2400=2402,2401
<2404=2408,2405
<2405=2407,2406
<2410=2412,2411
<2413=2414
<2415=2416
<2416=2418,2417
<2419=2420
<2420=2424,2421
<2421=2423,2422
<2425=2426
<2426=2428,2427
<2429=2430
<2430=2432,2431
<2433=2434
<2434=2436,2435
<2437=2439,2438
<2440=2441
<2442=2443
<2443=2445,2444
<2448=2770,2768,2765,2449
<2449=2761,2757,2753,2484,2473,2462,2454,2450
<2450=2451
<2451=2453,2452
<2454=2455
<2455=2457,2456
<2457=2461,2458
<2458=2460,2459
<2462=2463
<2463=2471,2464
<2464=2465
<2465=2466
<2466=2468,2467
<2468=2470,2469
<2471=2472
<2473=2474
<2474=2482,2475
<2475=2476
<2476=2477
<2477=2479,2478
<2479=2481,2480
<2482=2483
<2484=2747,2485
<2485=2578,2486
<2486=2574,2558,2487
<2487=2488
<2488=2554,2525,2489
<2489=2490
<2490=2521,2512,2491
<2491=2492
<2492=2508,2493
<2493=2494
<2494=2504,2500,2495
<2495=2496
<2496=2497
<2497=2499,2498
<2500=2501
<2501=2503,2502
<2504=2505
<2505=2507,2506
<2508=2509
<2509=2511,2510
<2512=2513
<2513=2520,2514
<2514=2518,2515
<2515=2516
<2516=2517
<2518=2519
<2521=2522
<2522=2524,2523
<2525=2526
<2526=2550,2539,2527
<2527=2528
<2528=2529
<2529=2538,2530
<2530=2536,2531
<2531=2534,2532
<2532=2533
<2534=2535
<2536=2537
<2539=2540
<2540=2549,2541
<2541=2547,2542
<2542=2545,2543
<2543=2544
<2545=2546
<2547=2548
<2550=2551
<2551=2553,2552
<2554=2555
<2555=2557,2556
<2558=2559
<2559=2573,2560
<2560=2571,2561
<2561=2569,2562
<2562=2563
<2563=2567,2564
<2564=2565
<2565=2566
<2567=2568
<2569=2570
<2571=2572
<2574=2575
<2575=2577,2576
<2578=2743,2741,2738,2579
<2579=2724,2710,2696,2682,2668,2654,2640,2626,2612,2598,2584,2580
<2580=2581
<2581=2583,2582
<2584=2585
<2585=2597,2586
<2586=2592,2587
<2587=2591,2588
<2588=2590,2589
<2592=2596,2593
<2593=2595,2594
<2598=2599
<2599=2611,2600
<2600=2606,2601
<2601=2605,2602
<2602=2604,2603
<2606=2610,2607
<2607=2609,2608
<2612=2613
<2613=2625,2614
<2614=2620,2615
<2615=2619,2616
<2616=2618,2617
<2620=2624,2621
<2621=2623,2622
<2626=2627
<2627=2639,2628
<2628=2634,2629
<2629=2633,2630
<2630=2632,2631
<2634=2638,2635
<2635=2637,2636
<2640=2641
<2641=2653,2642
<2642=2648,2643
<2643=2647,2644
<2644=2646,2645
<2648=2652,2649
<2649=2651,2650
<2654=2655
<2655=2667,2656
<2656=2662,2657
<2657=2661,2658
<2658=2660,2659
<2662=2666,2663
<2663=2665,2664
<2668=2669
<2669=2681,2670
<2670=2676,2671
<2671=2675,2672
<2672=2674,2673
<2676=2680,2677
<2677=2679,2678
<2682=2683
<2683=2695,2684
<2684=2690,2685
<2685=2689,2686
<2686=2688,2687
<2690=2694,2691
<2691=2693,2692
<2696=2697
<2697=2709,2698
<2698=2704,2699
<2699=2703,2700
<2700=2702,2701
<2704=2708,2705
<2705=2707,2706
<2710=2711
<2711=2723,2712
<2712=2718,2713
<2713=2717,2714
<2714=2716,2715
<2718=2722,2719
<2719=2721,2720
<2724=2725
<2725=2737,2726
<2726=2732,2727
<2727=2731,2728
<2728=2730,2729
<2732=2736,2733
<2733=2735,2734
<2738=2740,2739
<2741=2742
<2743=2744
<2744=2746,2745
<2747=2748
<2748=2752,2749
<2749=2751,2750
<2753=2754
<2754=2756,2755
<2757=2758
<2758=2760,2759
<2761=2762
<2762=2764,2763
<2765=2767,2766
<2768=2769
<2770=2771
<2771=2773,2772
<2776=3070,3068,3065,2777
<2777=3061,3057,3053,2812,2801,2790,2782,2778
<2778=2779
<2779=2781,2780
<2782=2783
<2783=2785,2784
<2785=2789,2786
<2786=2788,2787
<2790=2791
<2791=2799,2792
<2792=2793
<2793=2794
<2794=2796,2795
<2796=2798,2797
<2799=2800
<2801=2802
<2802=2810,2803
<2803=2804
<2804=2805
<2805=2807,2806
<2807=2809,2808
<2810=2811
<2812=3047,2813
<2813=2906,2814
<2814=2902,2886,2815
<2815=2816
<2816=2882,2853,2817
<2817=2818
<2818=2849,2840,2819
<2819=2820
<2820=2836,2821
<2821=2822
<2822=2832,2828,2823
<2823=2824
<2824=2825
<2825=2827,2826
<2828=2829
<2829=2831,2830
<2832=2833
<2833=2835,2834
<2836=2837
<2837=2839,2838
<2840=2841
<2841=2848,2842
<2842=2846,2843
<2843=2844
<2844=2845
<2846=2847
<2849=2850
<2850=2852,2851
<2853=2854
<2854=2878,2867,2855
<2855=2856
<2856=2857
<2857=2866,2858
<2858=2864,2859
<2859=2862,2860
<2860=2861
<2862=2863
<2864=2865
<2867=2868
<2868=2877,2869
<2869=2875,2870
<2870=2873,2871
<2871=2872
<2873=2874
<2875=2876
<2878=2879
<2879=2881,2880
<2882=2883
<2883=2885,2884
<2886=2887
<2887=2901,2888
<2888=2899,2889
<2889=2897,2890
<2890=2891
<2891=2895,2892
<2892=2893
<2893=2894
<2895=2896
<2897=2898
<2899=2900
<2902=2903
<2903=2905,2904
<2906=3043,3041,3038,2907
<2907=3024,3010,2996,2982,2968,2954,2940,2926,2912,2908
<2908=2909
<2909=2911,2910
<2912=2913
<2913=2925,2914
<2914=2920,2915
<2915=2919,2916
<2916=2918,2917
<2920=2924,2921
<2921=2923,2922
<2926=2927
<2927=2939,2928
<2928=2934,2929
<2929=2933,2930
<2930=2932,2931
<2934=2938,2935
<2935=2937,2936
<2940=2941
<2941=2953,2942
<2942=2948,2943
<2943=2947,2944
<2944=2946,2945
<2948=2952,2949
<2949=2951,2950
<2954=2955
<2955=2967,2956
<2956=2962,2957
<2957=2961,2958
<2958=2960,2959
<2962=2966,2963
<2963=2965,2964
<2968=2969
<2969=2981,2970
<2970=2976,2971
<2971=2975,2972
<2972=2974,2973
<2976=2980,2977
<2977=2979,2978
<2982=2983
<2983=2995,2984
<2984=2990,2985
<2985=2989,2986
<2986=2988,2987
<2990=2994,2991
<2991=2993,2992
<2996=2997
<2997=3009,2998
<2998=3004,2999
<2999=3003,3000
<3000=3002,3001
<3004=3008,3005
<3005=3007,3006
<3010=3011
<3011=3023,3012
<3012=3018,3013
<3013=3017,3014
<3014=3016,3015
<3018=3022,3019
<3019=3021,3020
<3024=3025
<3025=3037,3026
<3026=3032,3027
<3027=3031,3028
<3028=3030,3029
<3032=3036,3033
<3033=3035,3034
<3038=3040,3039
<3041=3042
<3043=3044
<3044=3046,3045
<3047=3048
<3048=3052,3049
<3049=3051,3050
<3053=3054
<3054=3056,3055
<3057=3058
<3058=3060,3059
<3061=3062
<3062=3064,3063
<3065=3067,3066
<3068=3069
<3070=3071
<3071=3073,3072
<3076=3342,3340,3337,3077
<3077=3333,3329,3325,3112,3101,3090,3082,3078
<3078=3079
<3079=3081,3080
<3082=3083
<3083=3085,3084
<3085=3089,3086
<3086=3088,3087
<3090=3091
<3091=3099,3092
<3092=3093
<3093=3094
<3094=3096,3095
<3096=3098,3097
<3099=3100
<3101=3102
<3102=3110,3103
<3103=3104
<3104=3105
<3105=3107,3106
<3107=3109,3108
<3110=3111
<3112=3319,3113
<3113=3206,3114
<3114=3202,3186,3115
<3115=3116
<3116=3182,3153,3117
<3117=3118
<3118=3149,3140,3119
<3119=3120
<3120=3136,3121
<3121=3122
<3122=3132,3128,3123
<3123=3124
<3124=3125
<3125=3127,3126
<3128=3129
<3129=3131,3130
<3132=3133
<3133=3135,3134
<3136=3137
<3137=3139,3138
<3140=3141
<3141=3148,3142
<3142=3146,3143
<3143=3144
<3144=3145
<3146=3147
<3149=3150
<3150=3152,3151
<3153=3154
<3154=3178,3167,3155
<3155=3156
<3156=3157
<3157=3166,3158
<3158=3164,3159
<3159=3162,3160
<3160=3161
<3162=3163
<3164=3165
<3167=3168
<3168=3177,3169
<3169=3175,3170
<3170=3173,3171
<3171=3172
<3173=3174
<3175=3176
<3178=3179
<3179=3181,3180
<3182=3183
<3183=3185,3184
<3186=3187
<3187=3201,3188
<3188=3199,3189
<3189=3197,3190
<3190=3191
<3191=3195,3192
<3192=3193
<3193=3194
<3195=3196
<3197=3198
<3199=3200
<3202=3203
<3203=3205,3204
<3206=3315,3313,3310,3207
<3207=3296,3282,3268,3254,3240,3226,3212,3208
<3208=3209
<3209=3211,3210
<3212=3213
<3213=3225,3214
<3214=3220,3215
<3215=3219,3216
<3216=3218,3217
<3220=3224,3221
<3221=3223,3222
<3226=3227
<3227=3239,3228
<3228=3234,3229
<3229=3233,3230
<3230=3232,3231
<3234=3238,3235
<3235=3237,3236
<3240=3241
<3241=3253,3242
<3242=3248,3243
<3243=3247,3244
<3244=3246,3245
<3248=3252,3249
<3249=3251,3250
<3254=3255
<3255=3267,3256
<3256=3262,3257
<3257=3261,3258
<3258=3260,3259
<3262=3266,3263
<3263=3265,3264
<3268=3269
<3269=3281,3270
<3270=3276,3271
<3271=3275,3272
<3272=3274,3273
<3276=3280,3277
<3277=3279,3278
<3282=3283
<3283=3295,3284
<3284=3290,3285
<3285=3289,3286
<3286=3288,3287
<3290=3294,3291
<3291=3293,3292
<3296=3297
<3297=3309,3298
<3298=3304,3299
<3299=3303,3300
<3300=3302,3301
<3304=3308,3305
<3305=3307,3306
<3310=3312,3311
<3313=3314
<3315=3316
<3316=3318,3317
<3319=3320
<3320=3324,3321
<3321=3323,3322
<3325=3326
<3326=3328,3327
<3329=3330
<3330=3332,3331
<3333=3334
<3334=3336,3335
<3337=3339,3338
<3340=3341
<3342=3343
<3343=3345,3344
<3348=3586,3584,3581,3349
<3349=3577,3573,3569,3384,3373,3362,3354,3350
<3350=3351
<3351=3353,3352
<3354=3355
<3355=3357,3356
<3357=3361,3358
<3358=3360,3359
<3362=3363
<3363=3371,3364
<3364=3365
<3365=3366
<3366=3368,3367
<3368=3370,3369
<3371=3372
<3373=3374
<3374=3382,3375
<3375=3376
<3376=3377
<3377=3379,3378
<3379=3381,3380
<3382=3383
<3384=3563,3385
<3385=3478,3386
<3386=3474,3458,3387
<3387=3388
<3388=3454,3425,3389
<3389=3390
<3390=3421,3412,3391
<3391=3392
<3392=3408,3393
<3393=3394
<3394=3404,3400,3395
<3395=3396
<3396=3397
<3397=3399,3398
<3400=3401
<3401=3403,3402
<3404=3405
<3405=3407,3406
<3408=3409
<3409=3411,3410
<3412=3413
<3413=3420,3414
<3414=3418,3415
<3415=3416
<3416=3417
<3418=3419
<3421=3422
<3422=3424,3423
<3425=3426
<3426=3450,3439,3427
<3427=3428
<3428=3429
<3429=3438,3430
<3430=3436,3431
<3431=3434,3432
<3432=3433
<3434=3435
<3436=3437
<3439=3440
<3440=3449,3441
<3441=3447,3442
<3442=3445,3443
<3443=3444
<3445=3446
<3447=3448
<3450=3451
<3451=3453,3452
<3454=3455
<3455=3457,3456
<3458=3459
<3459=3473,3460
<3460=3471,3461
<3461=3469,3462
<3462=3463
<3463=3467,3464
<3464=3465
<3465=3466
<3467=3468
<3469=3470
<3471=3472
<3474=3475
<3475=3477,3476
<3478=3559,3557,3554,3479
<3479=3540,3526,3512,3498,3484,3480
<3480=3481
<3481=3483,3482
<3484=3485
<3485=3497,3486
<3486=3492,3487
<3487=3491,3488
<3488=3490,3489
<3492=3496,3493
<3493=3495,3494
<3498=3499
<3499=3511,3500
<3500=3506,3501
<3501=3505,3502
<3502=3504,3503
<3506=3510,3507
<3507=3509,3508
<3512=3513
<3513=3525,3514
<3514=3520,3515
<3515=3519,3516
<3516=3518,3517
<3520=3524,3521
<3521=3523,3522
<3526=3527
<3527=3539,3528
<3528=3534,3529
<3529=3533,3530
<3530=3532,3531
<3534=3538,3535
<3535=3537,3536
<3540=3541
<3541=3553,3542
<3542=3548,3543
<3543=3547,3544
<3544=3546,3545
<3548=3552,3549
<3549=3551,3550
<3554=3556,3555
<3557=3558
<3559=3560
<3560=3562,3561
<3563=3564
<3564=3568,3565
<3565=3567,3566
<3569=3570
<3570=3572,3571
<3573=3574
<3574=3576,3575
<3577=3578
<3578=3580,3579
<3581=3583,3582
<3584=3585
<3586=3587
<3587=3589,3588
<3591=3592
<3593=3621,3594
<3594=3617,3595
<3595=3613,3611,3608,3596
<3596=3597
<3597=3602,3598
<3598=3599
<3599=3601,3600
<3602=3603
<3603=3607,3604
<3604=3606,3605
<3608=3610,3609
<3611=3612
<3613=3614
<3614=3616,3615
<3617=3618
<3618=3620,3619
<3621=3622
<3622=3634,3623
<3623=3627,3624
<3624=3626,3625
<3627=3631,3628
<3628=3630,3629
<3631=3633,3632
<3634=3636,3635
<3637=3638
<3638=3646,3639
<3639=3645,3640
<3640=3642,3641
<3642=3644,3643
<3647=3648
<3648=3654,3649
<3649=3653,3650
<3650=3652,3651
<3655=3656
<3656=3658,3657
<3659=3660
<3660=3662,3661
<3663=3664
<3664=3666,3665
<3667=3669,3668
<3670=3671
<3672=3673
<3673=3675,3674
<3676=3677
<3677=3685,3678
<3678=3684,3679
<3679=3681,3680
<3681=3683,3682
<3686=3687
<3687=3691,3688
<3688=3690,3689
<3692=3693
<3693=3698,3697,3694
<3694=3696,3695
<3699=3700
<3700=3705,3704,3701
<3701=3703,3702
<3706=3707
<3707=3719,3708
<3708=3718,3709
<3709=3713,3710
<3710=3712,3711
<3713=3717,3714
<3714=3716,3715
<3720=3730,3721
<3721=3726,3722
<3722=3723
<3723=3725,3724
<3726=3727
<3727=3729,3728
<3730=3731
<3731=3733,3732
<3734=3736,3735
<3737=3738
<3738=3745,3739
<3739=3743,3740
<3740=3741
<3741=3742
<3743=3744
<3746=3747
<3747=3749,3748
<3750=3751
<3751=3753,3752
<3754=3755
<3755=3757,3756
<3758=3759
<3759=3766,3765,3760
<3760=3764,3761
<3761=3763,3762
<3767=3768
<3768=3781,3769
<3769=3770
<3770=3771
<3771=3773,3772
<3773=3775,3774
<3775=3779,3776
<3776=3777
<3777=3778
<3779=3780
<3781=3782
<3783=3784
<3784=3795,3794,3785
<3785=3793,3786
<3786=3790,3787
<3787=3789,3788
<3790=3792,3791
<3796=3797
<3797=3808,3807,3798
<3798=3806,3799
<3799=3803,3800
<3800=3802,3801
<3803=3805,3804
<3809=3810
<3810=3826,3825,3811
<3811=3824,3812
<3812=3818,3813
<3813=3817,3814
<3814=3816,3815
<3818=3822,3819
<3819=3820
<3820=3821
<3822=3823
<3827=3828
<3828=3837,3836,3829
<3829=3835,3830
<3830=3834,3831
<3831=3833,3832
<3838=3839
<3839=3846,3845,3840
<3840=3844,3841
<3841=3843,3842
<3847=3848
<3848=3864,3863,3849
<3849=3862,3850
<3850=3856,3851
<3851=3855,3852
<3852=3854,3853
<3856=3860,3857
<3857=3858
<3858=3859
<3860=3861
<3865=3866
<3866=3875,3874,3867
<3867=3873,3868
<3868=3872,3869
<3869=3871,3870
<3876=3877
<3877=3896,3895,3878
<3878=3894,3879
<3879=3893,3880
<3880=3887,3881
<3881=3885,3882
<3882=3883
<3883=3884
<3885=3886
<3887=3891,3888
<3888=3889
<3889=3890
<3891=3892
<3897=3898
<3898=3907,3906,3899
<3899=3905,3900
<3900=3904,3901
<3901=3903,3902
<3908=3909
<3909=3925,3924,3910
<3910=3923,3911
<3911=3917,3912
<3912=3916,3913
<3913=3915,3914
<3917=3921,3918
<3918=3919
<3919=3920
<3921=3922
<3926=3927
<3927=3936,3935,3928
<3928=3934,3929
<3929=3933,3930
<3930=3932,3931
<3937=3938
<3938=3947,3946,3939
<3939=3945,3940
<3940=3944,3941
<3941=3943,3942
<3948=3949
<3949=3962,3961,3950
<3950=3960,3951
<3951=3953,3952
<3953=3957,3954
<3954=3956,3955
<3957=3959,3958
<3963=3964
<3964=3977,3976,3965
<3965=3975,3966
<3966=3968,3967
<3968=3972,3969
<3969=3971,3970
<3972=3974,3973
<3978=3979
<3979=3989,3988,3980
<3980=3987,3981
<3981=3985,3982
<3982=3983
<3983=3984
<3985=3986
<3990=3991
<3991=4007,3992
<3992=3993
<3993=3994
<3994=4001,3995
<3995=3999,3996
<3996=3997
<3997=3998
<3999=4000
<4001=4005,4002
<4002=4003
<4003=4004
<4005=4006
<4007=4008
<4009=4085,4010
<4010=4083,4081,4057,4056,4054,4052,4028,4024,4023,4021,4020,4018,4011
<4011=4012
<4012=4016,4013
<4013=4014
<4014=4015
<4016=4017
<4018=4019
<4021=4022
<4024=4025
<4025=4027,4026
<4028=4048,4044,4029
<4029=4030
<4030=4035,4031
<4031=4032
<4032=4034,4033
<4035=4036
<4036=4042,4037
<4037=4038
<4038=4039
<4039=4041,4040
<4042=4043
<4044=4045
<4045=4047,4046
<4048=4049
<4049=4051,4050
<4052=4053
<4054=4055
<4057=4077,4073,4058
<4058=4059
<4059=4064,4060
<4060=4061
<4061=4063,4062
<4064=4065
<4065=4071,4066
<4066=4067
<4067=4068
<4068=4070,4069
<4071=4072
<4073=4074
<4074=4076,4075
<4077=4078
<4078=4080,4079
<4081=4082
<4083=4084
<4085=4086
<4087=4088
<4088=4093,4092,4089
<4089=4091,4090
<4094=4098,4095
<4095=4097,4096
<4098=4100,4099
<4101=4105,4102
<4102=4104,4103
<4105=4107,4106
<4108=4109
<4109=4114,4113,4110
<4110=4112,4111
<4115=4116
<4116=4121,4120,4117
<4117=4119,4118
<4122=4123
<4123=4128,4127,4124
<4124=4126,4125
<4129=4130
<4130=4135,4134,4131
<4131=4133,4132
<4136=4137
<4137=4142,4141,4138
<4138=4140,4139
<4143=4144
<4144=4149,4148,4145
<4145=4147,4146
<4150=4151
<4151=4156,4155,4152
<4152=4154,4153
<4157=4158
<4158=4163,4162,4159
<4159=4161,4160
<4164=4165
<4165=4170,4169,4166
<4166=4168,4167
<4171=4172
<4172=4174,4173
<4175=4176
<4176=4178,4177
<4179=4186,4183,4180
<4180=4182,4181
<4183=4185,4184
<4186=4188,4187
<4303=4336,4335,4304
<4304=4332,4329,4326,4323,4320,4317,4314,4311,4308,4305
<4305=4307,4306
<4308=4310,4309
<4311=4313,4312
<4314=4316,4315
<4317=4319,4318
<4320=4322,4321
<4323=4325,4324
<4326=4328,4327
<4329=4331,4330
<4332=4334,4333
<4336=6560,6556,6552,6545,6538,6531,6524,6517,6510,6503,6496,6489,6383,6364,6352,6341,6330,6312,6301,6280,6269,6251,6242,6229,6216,6200,6191,6187,6183,4455,4384,4337
<4337=4376,4372,4369,4338
<4338=4354,4339
<4339=4340
<4340=4352,4341
<4341=4350,4348,4346,4342
<4342=4343
<4343=4345,4344
<4346=4347
<4348=4349
<4350=4351
<4352=4353
<4354=4355
<4355=4367,4356
<4356=4365,4363,4361,4357
<4357=4358
<4358=4360,4359
<4361=4362
<4363=4364
<4365=4366
<4367=4368
<4369=4371,4370
<4372=4373
<4373=4375,4374
<4376=4377
<4377=4378
<4378=4383,4382,4379
<4379=4381,4380
<4384=4451,4385
<4385=4436,4427,4417,4386
<4386=4413,4387
<4387=4407,4398,4388
<4388=4389
<4389=4395,4390
<4390=4394,4391
<4391=4393,4392
<4395=4397,4396
<4398=4399
<4399=4405,4400
<4400=4401
<4401=4402
<4402=4404,4403
<4405=4406
<4407=4408
<4408=4412,4409
<4409=4411,4410
<4413=4414
<4414=4416,4415
<4417=4418
<4418=4424,4419
<4419=4423,4420
<4420=4422,4421
<4424=4426,4425
<4427=4428
<4428=4434,4429
<4429=4430
<4430=4431
<4431=4433,4432
<4434=4435
<4436=4437
<4437=4449,4438
<4438=4447,4445,4443,4441,4439
<4439=4440
<4441=4442
<4443=4444
<4445=4446
<4447=4448
<4449=4450
<4451=4452
<4452=4454,4453
<4455=6179,6170,6167,4456
<4456=6153,6139,6132,6125,6119,4594,4579,4564,4457
<4457=4560,4458
<4458=4545,4536,4526,4495,4459
<4459=4487,4483,4480,4460
<4460=4461
<4461=4462
<4462=4478,4463
<4463=4476,4474,4472,4468,4464
<4464=4465
<4465=4467,4466
<4468=4469
<4469=4471,4470
<4472=4473
<4474=4475
<4476=4477
<4478=4479
<4480=4482,4481
<4483=4484
<4484=4486,4485
<4487=4488
<4488=4489
<4489=4494,4493,4490
<4490=4492,4491
<4495=4522,4496
<4496=4516,4507,4497
<4497=4498
<4498=4504,4499
<4499=4503,4500
<4500=4502,4501
<4504=4506,4505
<4507=4508
<4508=4514,4509
<4509=4510
<4510=4511
<4511=4513,4512
<4514=4515
<4516=4517
<4517=4521,4518
<4518=4520,4519
<4522=4523
<4523=4525,4524
<4526=4527
<4527=4533,4528
<4528=4532,4529
<4529=4531,4530
<4533=4535,4534
<4536=4537
<4537=4543,4538
<4538=4539
<4539=4540
<4540=4542,4541
<4543=4544
<4545=4546
<4546=4558,4547
<4547=4556,4554,4552,4550,4548
<4548=4549
<4550=4551
<4552=4553
<4554=4555
<4556=4557
<4558=4559
<4560=4561
<4561=4563,4562
<4564=4565
<4565=4578,4566
<4566=4572,4567
<4567=4571,4568
<4568=4570,4569
<4572=4576,4573
<4573=4574
<4574=4575
<4576=4577
<4579=4580
<4580=4593,4581
<4581=4587,4582
<4582=4586,4583
<4583=4585,4584
<4587=4591,4588
<4588=4589
<4589=4590
<4591=4592
<4594=6115,6113,6110,4595
<4595=6106,6102,6098,6092,6088,4624,4604,4600,4596
<4596=4597
<4597=4599,4598
<4600=4601
<4601=4603,4602
<4604=4620,4605
<4605=4614,4606
<4606=4607
<4607=4613,4608
<4608=4610,4609
<4610=4612,4611
<4614=4615
<4615=4619,4616
<4616=4618,4617
<4620=4621
<4621=4623,4622
<4624=6086,4625
<4625=6085,5851,5850,5849,5587,5586,5585,5295,5294,5293,4975,4974,4973,4627,4626
<4627=4969,4967,4964,4628
<4628=4960,4956,4952,4755,4663,4652,4641,4633,4629
<4629=4630
<4630=4632,4631
<4633=4634
<4634=4636,4635
<4636=4640,4637
<4637=4639,4638
<4641=4642
<4642=4650,4643
<4643=4644
<4644=4645
<4645=4647,4646
<4647=4649,4648
<4650=4651
<4652=4653
<4653=4661,4654
<4654=4655
<4655=4656
<4656=4658,4657
<4658=4660,4659
<4661=4662
<4663=4751,4735,4664
<4664=4665
<4665=4731,4702,4666
<4666=4667
<4667=4698,4689,4668
<4668=4669
<4669=4685,4670
<4670=4671
<4671=4681,4677,4672
<4672=4673
<4673=4674
<4674=4676,4675
<4677=4678
<4678=4680,4679
<4681=4682
<4682=4684,4683
<4685=4686
<4686=4688,4687
<4689=4690
<4690=4697,4691
<4691=4695,4692
<4692=4693
<4693=4694
<4695=4696
<4698=4699
<4699=4701,4700
<4702=4703
<4703=4727,4716,4704
<4704=4705
<4705=4706
<4706=4715,4707
<4707=4713,4708
<4708=4711,4709
<4709=4710
<4711=4712
<4713=4714
<4716=4717
<4717=4726,4718
<4718=4724,4719
<4719=4722,4720
<4720=4721
<4722=4723
<4724=4725
<4727=4728
<4728=4730,4729
<4731=4732
<4732=4734,4733
<4735=4736
<4736=4750,4737
<4737=4748,4738
<4738=4746,4739
<4739=4740
<4740=4744,4741
<4741=4742
<4742=4743
<4744=4745
<4746=4747
<4748=4749
<4751=4752
<4752=4754,4753
<4755=4948,4946,4943,4756
<4756=4929,4915,4901,4887,4873,4859,4845,4831,4817,4803,4789,4775,4761,4757
<4757=4758
<4758=4760,4759
<4761=4762
<4762=4774,4763
<4763=4769,4764
<4764=4768,4765
<4765=4767,4766
<4769=4773,4770
<4770=4772,4771
<4775=4776
<4776=4788,4777
<4777=4783,4778
<4778=4782,4779
<4779=4781,4780
<4783=4787,4784
<4784=4786,4785
<4789=4790
<4790=4802,4791
<4791=4797,4792
<4792=4796,4793
<4793=4795,4794
<4797=4801,4798
<4798=4800,4799
<4803=4804
<4804=4816,4805
<4805=4811,4806
<4806=4810,4807
<4807=4809,4808
<4811=4815,4812
<4812=4814,4813
<4817=4818
<4818=4830,4819
<4819=4825,4820
<4820=4824,4821
<4821=4823,4822
<4825=4829,4826
<4826=4828,4827
<4831=4832
<4832=4844,4833
<4833=4839,4834
<4834=4838,4835
<4835=4837,4836
<4839=4843,4840
<4840=4842,4841
<4845=4846
<4846=4858,4847
<4847=4853,4848
<4848=4852,4849
<4849=4851,4850
<4853=4857,4854
<4854=4856,4855
<4859=4860
<4860=4872,4861
<4861=4867,4862
<4862=4866,4863
<4863=4865,4864
<4867=4871,4868
<4868=4870,4869
<4873=4874
<4874=4886,4875
<4875=4881,4876
<4876=4880,4877
<4877=4879,4878
<4881=4885,4882
<4882=4884,4883
<4887=4888
<4888=4900,4889
<4889=4895,4890
<4890=4894,4891
<4891=4893,4892
<4895=4899,4896
<4896=4898,4897
<4901=4902
<4902=4914,4903
<4903=4909,4904
<4904=4908,4905
<4905=4907,4906
<4909=4913,4910
<4910=4912,4911
<4915=4916
<4916=4928,4917
<4917=4923,4918
<4918=4922,4919
<4919=4921,4920
<4923=4927,4924
<4924=4926,4925
<4929=4930
<4930=4942,4931
<4931=4937,4932
<4932=4936,4933
<4933=4935,4934
<4937=4941,4938
<4938=4940,4939
<4943=4945,4944
<4946=4947
<4948=4949
<4949=4951,4950
<4952=4953
<4953=4955,4954
<4956=4957
<4957=4959,4958
<4960=4961
<4961=4963,4962
<4964=4966,4965
<4967=4968
<4969=4970
<4970=4972,4971
<4975=5289,5287,5284,4976
<4976=5280,5276,5272,5103,5011,5000,4989,4981,4977
<4977=4978
<4978=4980,4979
<4981=4982
<4982=4984,4983
<4984=4988,4985
<4985=4987,4986
<4989=4990
<4990=4998,4991
<4991=4992
<4992=4993
<4993=4995,4994
<4995=4997,4996
<4998=4999
<5000=5001
<5001=5009,5002
<5002=5003
<5003=5004
<5004=5006,5005
<5006=5008,5007
<5009=5010
<5011=5099,5083,5012
<5012=5013
<5013=5079,5050,5014
<5014=5015
<5015=5046,5037,5016
<5016=5017
<5017=5033,5018
<5018=5019
<5019=5029,5025,5020
<5020=5021
<5021=5022
<5022=5024,5023
<5025=5026
<5026=5028,5027
<5029=5030
<5030=5032,5031
<5033=5034
<5034=5036,5035
<5037=5038
<5038=5045,5039
<5039=5043,5040
<5040=5041
<5041=5042
<5043=5044
<5046=5047
<5047=5049,5048
<5050=5051
<5051=5075,5064,5052
<5052=5053
<5053=5054
<5054=5063,5055
<5055=5061,5056
<5056=5059,5057
<5057=5058
<5059=5060
<5061=5062
<5064=5065
<5065=5074,5066
<5066=5072,5067
<5067=5070,5068
<5068=5069
<5070=5071
<5072=5073
<5075=5076
<5076=5078,5077
<5079=5080
<5080=5082,5081
<5083=5084
<5084=5098,5085
<5085=5096,5086
<5086=5094,5087
<5087=5088
<5088=5092,5089
<5089=5090
<5090=5091
<5092=5093
<5094=5095
<5096=5097
<5099=5100
<5100=5102,5101
<5103=5268,5266,5263,5104
<5104=5249,5235,5221,5207,5193,5179,5165,5151,5137,5123,5109,5105
<5105=5106
<5106=5108,5107
<5109=5110
<5110=5122,5111
<5111=5117,5112
<5112=5116,5113
<5113=5115,5114
<5117=5121,5118
<5118=5120,5119
<5123=5124
<5124=5136,5125
<5125=5131,5126
<5126=5130,5127
<5127=5129,5128
<5131=5135,5132
<5132=5134,5133
<5137=5138
<5138=5150,5139
<5139=5145,5140
<5140=5144,5141
<5141=5143,5142
<5145=5149,5146
<5146=5148,5147
<5151=5152
<5152=5164,5153
<5153=5159,5154
<5154=5158,5155
<5155=5157,5156
<5159=5163,5160
<5160=5162,5161
<5165=5166
<5166=5178,5167
<5167=5173,5168
<5168=5172,5169
<5169=5171,5170
<5173=5177,5174
<5174=5176,5175
<5179=5180
<5180=5192,5181
<5181=5187,5182
<5182=5186,5183
<5183=5185,5184
<5187=5191,5188
<5188=5190,5189
<5193=5194
<5194=5206,5195
<5195=5201,5196
<5196=5200,5197
<5197=5199,5198
<5201=5205,5202
<5202=5204,5203
<5207=5208
<5208=5220,5209
<5209=5215,5210
<5210=5214,5211
<5211=5213,5212
<5215=5219,5216
<5216=5218,5217
<5221=5222
<5222=5234,5223
<5223=5229,5224
<5224=5228,5225
<5225=5227,5226
<5229=5233,5230
<5230=5232,5231
<5235=5236
<5236=5248,5237
<5237=5243,5238
<5238=5242,5239
<5239=5241,5240
<5243=5247,5244
<5244=5246,5245
<5249=5250
<5250=5262,5251
<5251=5257,5252
<5252=5256,5253
<5253=5255,5254
<5257=5261,5258
<5258=5260,5259
<5263=5265,5264
<5266=5267
<5268=5269
<5269=5271,5270
<5272=5273
<5273=5275,5274
<5276=5277
<5277=5279,5278
<5280=5281
<5281=5283,5282
<5284=5286,5285
<5287=5288
<5289=5290
<5290=5292,5291
<5295=5581,5579,5576,5296
<5296=5572,5568,5564,5423,5331,5320,5309,5301,5297
<5297=5298
<5298=5300,5299
<5301=5302
<5302=5304,5303
<5304=5308,5305
<5305=5307,5306
<5309=5310
<5310=5318,5311
<5311=5312
<5312=5313
<5313=5315,5314
<5315=5317,5316
<5318=5319
<5320=5321
<5321=5329,5322
<5322=5323
<5323=5324
<5324=5326,5325
<5326=5328,5327
<5329=5330
<5331=5419,5403,5332
<5332=5333
<5333=5399,5370,5334
<5334=5335
<5335=5366,5357,5336
<5336=5337
<5337=5353,5338
<5338=5339
<5339=5349,5345,5340
<5340=5341
<5341=5342
<5342=5344,5343
<5345=5346
<5346=5348,5347
<5349=5350
<5350=5352,5351
<5353=5354
<5354=5356,5355
<5357=5358
<5358=5365,5359
<5359=5363,5360
<5360=5361
<5361=5362
<5363=5364
<5366=5367
<5367=5369,5368
<5370=5371
<5371=5395,5384,5372
<5372=5373
<5373=5374
<5374=5383,5375
<5375=5381,5376
<5376=5379,5377
<5377=5378
<5379=5380
<5381=5382
<5384=5385
<5385=5394,5386
<5386=5392,5387
<5387=5390,5388
<5388=5389
<5390=5391
<5392=5393
<5395=5396
<5396=5398,5397
<5399=5400
<5400=5402,5401
<5403=5404
<5404=5418,5405
<5405=5416,5406
<5406=5414,5407
<5407=5408
<5408=5412,5409
<5409=5410
<5410=5411
<5412=5413
<5414=5415
<5416=5417
<5419=5420
<5420=5422,5421
<5423=5560,5558,5555,5424
<5424=5541,5527,5513,5499,5485,5471,5457,5443,5429,5425
<5425=5426
<5426=5428,5427
<5429=5430
<5430=5442,5431
<5431=5437,5432
<5432=5436,5433
<5433=5435,5434
<5437=5441,5438
<5438=5440,5439
<5443=5444
<5444=5456,5445
<5445=5451,5446
<5446=5450,5447
<5447=5449,5448
<5451=5455,5452
<5452=5454,5453
<5457=5458
<5458=5470,5459
<5459=5465,5460
<5460=5464,5461
<5461=5463,5462
<5465=5469,5466
<5466=5468,5467
<5471=5472
<5472=5484,5473
<5473=5479,5474
<5474=5478,5475
<5475=5477,5476
<5479=5483,5480
<5480=5482,5481
<5485=5486
<5486=5498,5487
<5487=5493,5488
<5488=5492,5489
<5489=5491,5490
<5493=5497,5494
<5494=5496,5495
<5499=5500
<5500=5512,5501
<5501=5507,5502
<5502=5506,5503
<5503=5505,5504
<5507=5511,5508
<5508=5510,5509
<5513=5514
<5514=5526,5515
<5515=5521,5516
<5516=5520,5517
<5517=5519,5518
<5521=5525,5522
<5522=5524,5523
<5527=5528
<5528=5540,5529
<5529=5535,5530
<5530=5534,5531
<5531=5533,5532
<5535=5539,5536
<5536=5538,5537
<5541=5542
<5542=5554,5543
<5543=5549,5544
<5544=5548,5545
<5545=5547,5546
<5549=5553,5550
<5550=5552,5551
<5555=5557,5556
<5558=5559
<5560=5561
<5561=5563,5562
<5564=5565
<5565=5567,5566
<5568=5569
<5569=5571,5570
<5572=5573
<5573=5575,5574
<5576=5578,5577
<5579=5580
<5581=5582
<5582=5584,5583
<5587=5845,5843,5840,5588
<5588=5836,5832,5828,5715,5623,5612,5601,5593,5589
<5589=5590
<5590=5592,5591
<5593=5594
<5594=5596,5595
<5596=5600,5597
<5597=5599,5598
<5601=5602
<5602=5610,5603
<5603=5604
<5604=5605
<5605=5607,5606
<5607=5609,5608
<5610=5611
<5612=5613
<5613=5621,5614
<5614=5615
<5615=5616
<5616=5618,5617
<5618=5620,5619
<5621=5622
<5623=5711,5695,5624
<5624=5625
<5625=5691,5662,5626
<5626=5627
<5627=5658,5649,5628
<5628=5629
<5629=5645,5630
<5630=5631
<5631=5641,5637,5632
<5632=5633
<5633=5634
<5634=5636,5635
<5637=5638
<5638=5640,5639
<5641=5642
<5642=5644,5643
<5645=5646
<5646=5648,5647
<5649=5650
<5650=5657,5651
<5651=5655,5652
<5652=5653
<5653=5654
<5655=5656
<5658=5659
<5659=5661,5660
<5662=5663
<5663=5687,5676,5664
<5664=5665
<5665=5666
<5666=5675,5667
<5667=5673,5668
<5668=5671,5669
<5669=5670
<5671=5672
<5673=5674
<5676=5677
<5677=5686,5678
<5678=5684,5679
<5679=5682,5680
<5680=5681
<5682=5683
<5684=5685
<5687=5688
<5688=5690,5689
<5691=5692
<5692=5694,5693
<5695=5696
<5696=5710,5697
<5697=5708,5698
<5698=5706,5699
<5699=5700
<5700=5704,5701
<5701=5702
<5702=5703
<5704=5705
<5706=5707
<5708=5709
<5711=5712
<5712=5714,5713
<5715=5824,5822,5819,5716
<5716=5805,5791,5777,5763,5749,5735,5721,5717
<5717=5718
<5718=5720,5719
<5721=5722
<5722=5734,5723
<5723=5729,5724
<5724=5728,5725
<5725=5727,5726
<5729=5733,5730
<5730=5732,5731
<5735=5736
<5736=5748,5737
<5737=5743,5738
<5738=5742,5739
<5739=5741,5740
<5743=5747,5744
<5744=5746,5745
<5749=5750
<5750=5762,5751
<5751=5757,5752
<5752=5756,5753
<5753=5755,5754
<5757=5761,5758
<5758=5760,5759
<5763=5764
<5764=5776,5765
<5765=5771,5766
<5766=5770,5767
<5767=5769,5768
<5771=5775,5772
<5772=5774,5773
<5777=5778
<5778=5790,5779
<5779=5785,5780
<5780=5784,5781
<5781=5783,5782
<5785=5789,5786
<5786=5788,5787
<5791=5792
<5792=5804,5793
<5793=5799,5794
<5794=5798,5795
<5795=5797,5796
<5799=5803,5800
<5800=5802,5801
<5805=5806
<5806=5818,5807
<5807=5813,5808
<5808=5812,5809
<5809=5811,5810
<5813=5817,5814
<5814=5816,5815
<5819=5821,5820
<5822=5823
<5824=5825
<5825=5827,5826
<5828=5829
<5829=5831,5830
<5832=5833
<5833=5835,5834
<5836=5837
<5837=5839,5838
<5840=5842,5841
<5843=5844
<5845=5846
<5846=5848,5847
<5851=6081,6079,6076,5852
<5852=6072,6068,6064,5979,5887,5876,5865,5857,5853
<5853=5854
<5854=5856,5855
<5857=5858
<5858=5860,5859
<5860=5864,5861
<5861=5863,5862
<5865=5866
<5866=5874,5867
<5867=5868
<5868=5869
<5869=5871,5870
<5871=5873,5872
<5874=5875
<5876=5877
<5877=5885,5878
<5878=5879
<5879=5880
<5880=5882,5881
<5882=5884,5883
<5885=5886
<5887=5975,5959,5888
<5888=5889
<5889=5955,5926,5890
<5890=5891
<5891=5922,5913,5892
<5892=5893
<5893=5909,5894
<5894=5895
<5895=5905,5901,5896
<5896=5897
<5897=5898
<5898=5900,5899
<5901=5902
<5902=5904,5903
<5905=5906
<5906=5908,5907
<5909=5910
<5910=5912,5911
<5913=5914
<5914=5921,5915
<5915=5919,5916
<5916=5917
<5917=5918
<5919=5920
<5922=5923
<5923=5925,5924
<5926=5927
<5927=5951,5940,5928
<5928=5929
<5929=5930
<5930=5939,5931
<5931=5937,5932
<5932=5935,5933
<5933=5934
<5935=5936
<5937=5938
<5940=5941
<5941=5950,5942
<5942=5948,5943
<5943=5946,5944
<5944=5945
<5946=5947
<5948=5949
<5951=5952
<5952=5954,5953
<5955=5956
<5956=5958,5957
<5959=5960
<5960=5974,5961
<5961=5972,5962
<5962=5970,5963
<5963=5964
<5964=5968,5965
<5965=5966
<5966=5967
<5968=5969
<5970=5971
<5972=5973
<5975=5976
<5976=5978,5977
<5979=6060,6058,6055,5980
<5980=6041,6027,6013,5999,5985,5981
<5981=5982
<5982=5984,5983
<5985=5986
<5986=5998,5987
<5987=5993,5988
<5988=5992,5989
<5989=5991,5990
<5993=5997,5994
<5994=5996,5995
<5999=6000
<6000=6012,6001
<6001=6007,6002
<6002=6006,6003
<6003=6005,6004
<6007=6011,6008
<6008=6010,6009
<6013=6014
<6014=6026,6015
<6015=6021,6016
<6016=6020,6017
<6017=6019,6018
<6021=6025,6022
<6022=6024,6023
<6027=6028
<6028=6040,6029
<6029=6035,6030
<6030=6034,6031
<6031=6033,6032
<6035=6039,6036
<6036=6038,6037
<6041=6042
<6042=6054,6043
<6043=6049,6044
<6044=6048,6045
<6045=6047,6046
<6049=6053,6050
<6050=6052,6051
<6055=6057,6056
<6058=6059
<6060=6061
<6061=6063,6062
<6064=6065
<6065=6067,6066
<6068=6069
<6069=6071,6070
<6072=6073
<6073=6075,6074
<6076=6078,6077
<6079=6080
<6081=6082
<6082=6084,6083
<6086=6087
<6088=6089
<6089=6091,6090
<6092=6093
<6093=6097,6094
<6094=6096,6095
<6098=6099
<6099=6101,6100
<6102=6103
<6103=6105,6104
<6106=6107
<6107=6109,6108
<6110=6112,6111
<6113=6114
<6115=6116
<6116=6118,6117
<6119=6120
<6120=6124,6121
<6121=6123,6122
<6125=6126
<6126=6131,6130,6127
<6127=6129,6128
<6132=6133
<6133=6138,6137,6134
<6134=6136,6135
<6139=6140
<6140=6152,6141
<6141=6151,6142
<6142=6146,6143
<6143=6145,6144
<6146=6150,6147
<6147=6149,6148
<6153=6163,6154
<6154=6159,6155
<6155=6156
<6156=6158,6157
<6159=6160
<6160=6162,6161
<6163=6164
<6164=6166,6165
<6167=6169,6168
<6170=6171
<6171=6178,6172
<6172=6176,6173
<6173=6174
<6174=6175
<6176=6177
<6179=6180
<6180=6182,6181
<6183=6184
<6184=6186,6185
<6187=6188
<6188=6190,6189
<6191=6192
<6192=6199,6198,6193
<6193=6197,6194
<6194=6196,6195
<6200=6201
<6201=6214,6202
<6202=6203
<6203=6204
<6204=6206,6205
<6206=6208,6207
<6208=6212,6209
<6209=6210
<6210=6211
<6212=6213
<6214=6215
<6216=6217
<6217=6228,6227,6218
<6218=6226,6219
<6219=6223,6220
<6220=6222,6221
<6223=6225,6224
<6229=6230
<6230=6241,6240,6231
<6231=6239,6232
<6232=6236,6233
<6233=6235,6234
<6236=6238,6237
<6242=6243
<6243=6250,6249,6244
<6244=6248,6245
<6245=6247,6246
<6251=6252
<6252=6268,6267,6253
<6253=6266,6254
<6254=6260,6255
<6255=6259,6256
<6256=6258,6257
<6260=6264,6261
<6261=6262
<6262=6263
<6264=6265
<6269=6270
<6270=6279,6278,6271
<6271=6277,6272
<6272=6276,6273
<6273=6275,6274
<6280=6281
<6281=6300,6299,6282
<6282=6298,6283
<6283=6297,6284
<6284=6291,6285
<6285=6289,6286
<6286=6287
<6287=6288
<6289=6290
<6291=6295,6292
<6292=6293
<6293=6294
<6295=6296
<6301=6302
<6302=6311,6310,6303
<6303=6309,6304
<6304=6308,6305
<6305=6307,6306
<6312=6313
<6313=6329,6328,6314
<6314=6327,6315
<6315=6321,6316
<6316=6320,6317
<6317=6319,6318
<6321=6325,6322
<6322=6323
<6323=6324
<6325=6326
<6330=6331
<6331=6340,6339,6332
<6332=6338,6333
<6333=6337,6334
<6334=6336,6335
<6341=6342
<6342=6351,6350,6343
<6343=6349,6344
<6344=6348,6345
<6345=6347,6346
<6352=6353
<6353=6363,6362,6354
<6354=6361,6355
<6355=6359,6356
<6356=6357
<6357=6358
<6359=6360
<6364=6365
<6365=6381,6366
<6366=6367
<6367=6368
<6368=6375,6369
<6369=6373,6370
<6370=6371
<6371=6372
<6373=6374
<6375=6379,6376
<6376=6377
<6377=6378
<6379=6380
<6381=6382
<6383=6487,6384
<6384=6485,6483,6459,6458,6456,6454,6430,6412,6398,6397,6395,6394,6392,6385
<6385=6386
<6386=6390,6387
<6387=6388
<6388=6389
<6390=6391
<6392=6393
<6395=6396
<6398=6408,6399
<6399=6400
<6400=6407,6401
<6401=6405,6402
<6402=6403
<6403=6404
<6405=6406
<6408=6409
<6409=6411,6410
<6412=6413
<6413=6429,6414
<6414=6422,6415
<6415=6419,6416
<6416=6418,6417
<6419=6421,6420
<6422=6426,6423
<6423=6425,6424
<6426=6428,6427
<6430=6450,6446,6431
<6431=6432
<6432=6437,6433
<6433=6434
<6434=6436,6435
<6437=6438
<6438=6444,6439
<6439=6440
<6440=6441
<6441=6443,6442
<6444=6445
<6446=6447
<6447=6449,6448
<6450=6451
<6451=6453,6452
<6454=6455
<6456=6457
<6459=6479,6475,6460
<6460=6461
<6461=6466,6462
<6462=6463
<6463=6465,6464
<6466=6467
<6467=6473,6468
<6468=6469
<6469=6470
<6470=6472,6471
<6473=6474
<6475=6476
<6476=6478,6477
<6479=6480
<6480=6482,6481
<6483=6484
<6485=6486
<6487=6488
<6489=6490
<6490=6495,6494,6491
<6491=6493,6492
<6496=6500,6497
<6497=6499,6498
<6500=6502,6501
<6503=6507,6504
<6504=6506,6505
<6507=6509,6508
<6510=6511
<6511=6516,6515,6512
<6512=6514,6513
<6517=6518
<6518=6523,6522,6519
<6519=6521,6520
<6524=6525
<6525=6530,6529,6526
<6526=6528,6527
<6531=6532
<6532=6537,6536,6533
<6533=6535,6534
<6538=6539
<6539=6544,6543,6540
<6540=6542,6541
<6545=6546
<6546=6551,6550,6547
<6547=6549,6548
<6552=6553
<6553=6555,6554
<6556=6557
<6557=6559,6558
<6560=6567,6564,6561
<6561=6563,6562
<6564=6566,6565
<6567=6569,6568
<6665=6701,6700,6666
<6666=6697,6694,6691,6688,6685,6682,6679,6676,6673,6670,6667
<6667=6669,6668
<6670=6672,6671
<6673=6675,6674
<6676=6678,6677
<6679=6681,6680
<6682=6684,6683
<6685=6687,6686
<6688=6690,6689
<6691=6693,6692
<6694=6696,6695
<6697=6699,6698
<6701=6702
<6702=6756,6729,6703
<6703=6704
<6704=6705
<6705=6727,6706
<6706=6725,6723,6721,6719,6717,6715,6713,6711,6709,6707
<6707=6708
<6709=6710
<6711=6712
<6713=6714
<6715=6716
<6717=6718
<6719=6720
<6721=6722
<6723=6724
<6725=6726
<6727=6728
<6729=6730
<6730=6754,6731
<6731=6752,6750,6748,6746,6744,6742,6740,6738,6736,6734,6732
<6732=6733
<6734=6735
<6736=6737
<6738=6739
<6740=6741
<6742=6743
<6744=6745
<6746=6747
<6748=6749
<6750=6751
<6752=6753
<6754=6755
<6756=6757
<6772=6796,6795,6773
<6773=6792,6789,6786,6783,6780,6777,6774
<6774=6776,6775
<6777=6779,6778
<6780=6782,6781
<6783=6785,6784
<6786=6788,6787
<6789=6791,6790
<6792=6794,6793
<6796=6902,6893,6884,6797
<6797=6880,6798
<6798=6871,6799
<6799=6867,6854,6800
<6800=6801
<6801=6845,6813,6802
<6802=6803
<6803=6811,6804
<6804=6805
<6805=6806
<6806=6810,6807
<6807=6809,6808
<6811=6812
<6813=6841,6821,6814
<6814=6815
<6815=6816
<6816=6820,6817
<6817=6819,6818
<6821=6828,6822
<6822=6823
<6823=6827,6824
<6824=6826,6825
<6828=6829
<6829=6840,6830
<6830=6837,6831
<6831=6835,6832
<6832=6833
<6833=6834
<6835=6836
<6837=6839,6838
<6841=6842
<6842=6844,6843
<6845=6846
<6846=6852,6847
<6847=6848
<6848=6849
<6849=6851,6850
<6852=6853
<6854=6855
<6855=6866,6856
<6856=6863,6857
<6857=6861,6858
<6858=6859
<6859=6860
<6861=6862
<6863=6865,6864
<6867=6868
<6868=6870,6869
<6871=6872
<6872=6878,6873
<6873=6874
<6874=6875
<6875=6877,6876
<6878=6879
<6880=6881
<6881=6883,6882
<6884=6885
<6885=6892,6886
<6886=6890,6887
<6887=6888
<6888=6889
<6890=6891
<6893=6894
<6894=6900,6895
<6895=6896
<6896=6897
<6897=6899,6898
<6900=6901
<6902=6903
<6903=6905,6904
<6920=6980,6979,6921
<6921=6976,6973,6970,6967,6964,6961,6958,6955,6952,6949,6946,6943,6940,6937,6934,6931,6928,6925,6922
<6922=6924,6923
<6925=6927,6926
<6928=6930,6929
<6931=6933,6932
<6934=6936,6935
<6937=6939,6938
<6940=6942,6941
<6943=6945,6944
<6946=6948,6947
<6949=6951,6950
<6952=6954,6953
<6955=6957,6956
<6958=6960,6959
<6961=6963,6962
<6964=6966,6965
<6967=6969,6968
<6970=6972,6971
<6973=6975,6974
<6976=6978,6977
<6980=9832,9828,9824,9820,9813,9806,9802,9798,9782,9775,9768,9761,9754,9747,9736,9718,9707,9689,9678,9657,9644,9631,9615,9606,9590,9574,9565,9554,9540,9524,9517,9510,9503,9496,9450,9440,9411,6981
<6981=9407,9398,9395,6982
<6982=9366,9329,9322,9318,9289,9086,9078,7361,7013,6998,6983
<6983=6984
<6984=6997,6985
<6985=6991,6986
<6986=6990,6987
<6987=6989,6988
<6991=6995,6992
<6992=6993
<6993=6994
<6995=6996
<6998=6999
<6999=7012,7000
<7000=7006,7001
<7001=7005,7002
<7002=7004,7003
<7006=7010,7007
<7007=7008
<7008=7009
<7010=7011
<7013=7357,7355,7352,7014
<7014=7015
<7015=7348,7233,7016
<7016=7017
<7017=7224,7220,7216,7097,7026,7022,7018
<7018=7019
<7019=7021,7020
<7022=7023
<7023=7025,7024
<7026=7093,7091,7088,7027
<7027=7077,7066,7055,7044,7036,7028
<7028=7029
<7029=7031,7030
<7031=7035,7032
<7032=7034,7033
<7036=7037
<7037=7039,7038
<7039=7043,7040
<7040=7042,7041
<7044=7045
<7045=7053,7046
<7046=7047
<7047=7048
<7048=7050,7049
<7050=7052,7051
<7053=7054
<7055=7056
<7056=7064,7057
<7057=7058
<7058=7059
<7059=7061,7060
<7061=7063,7062
<7064=7065
<7066=7067
<7067=7075,7068
<7068=7069
<7069=7070
<7070=7072,7071
<7072=7074,7073
<7075=7076
<7077=7078
<7078=7086,7079
<7079=7080
<7080=7081
<7081=7083,7082
<7083=7085,7084
<7086=7087
<7088=7090,7089
<7091=7092
<7093=7094
<7094=7096,7095
<7097=7212,7210,7207,7098
<7098=7196,7185,7170,7155,7149,7143,7137,7131,7125,7119,7113,7107,7103,7099
<7099=7100
<7100=7102,7101
<7103=7104
<7104=7106,7105
<7107=7108
<7108=7110,7109
<7110=7112,7111
<7113=7114
<7114=7116,7115
<7116=7118,7117
<7119=7120
<7120=7122,7121
<7122=7124,7123
<7125=7126
<7126=7128,7127
<7128=7130,7129
<7131=7132
<7132=7134,7133
<7134=7136,7135
<7137=7138
<7138=7140,7139
<7140=7142,7141
<7143=7144
<7144=7146,7145
<7146=7148,7147
<7149=7150
<7150=7152,7151
<7152=7154,7153
<7155=7156
<7156=7168,7157
<7157=7158
<7158=7159
<7159=7161,7160
<7161=7167,7162
<7162=7166,7163
<7163=7165,7164
<7168=7169
<7170=7171
<7171=7183,7172
<7172=7173
<7173=7174
<7174=7176,7175
<7176=7182,7177
<7177=7181,7178
<7178=7180,7179
<7183=7184
<7185=7186
<7186=7194,7187
<7187=7188
<7188=7189
<7189=7191,7190
<7191=7193,7192
<7194=7195
<7196=7197
<7197=7205,7198
<7198=7199
<7199=7200
<7200=7202,7201
<7202=7204,7203
<7205=7206
<7207=7209,7208
<7210=7211
<7212=7213
<7213=7215,7214
<7216=7217
<7217=7219,7218
<7220=7221
<7221=7223,7222
<7224=7225
<7225=7231,7226
<7226=7227
<7227=7228
<7228=7230,7229
<7231=7232
<7233=7344,7279,7238,7234
<7234=7235
<7235=7237,7236
<7238=7275,7273,7270,7239
<7239=7259,7248,7240
<7240=7241
<7241=7243,7242
<7243=7247,7244
<7244=7246,7245
<7248=7249
<7249=7257,7250
<7250=7251
<7251=7252
<7252=7254,7253
<7254=7256,7255
<7257=7258
<7259=7260
<7260=7268,7261
<7261=7262
<7262=7263
<7263=7265,7264
<7265=7267,7266
<7268=7269
<7270=7272,7271
<7273=7274
<7275=7276
<7276=7278,7277
<7279=7340,7338,7335,7280
<7280=7324,7309,7303,7297,7291,7285,7281
<7281=7282
<7282=7284,7283
<7285=7286
<7286=7288,7287
<7288=7290,7289
<7291=7292
<7292=7294,7293
<7294=7296,7295
<7297=7298
<7298=7300,7299
<7300=7302,7301
<7303=7304
<7304=7306,7305
<7306=7308,7307
<7309=7310
<7310=7322,7311
<7311=7312
<7312=7313
<7313=7315,7314
<7315=7321,7316
<7316=7320,7317
<7317=7319,7318
<7322=7323
<7324=7325
<7325=7333,7326
<7326=7327
<7327=7328
<7328=7330,7329
<7330=7332,7331
<7333=7334
<7335=7337,7336
<7338=7339
<7340=7341
<7341=7343,7342
<7344=7345
<7345=7347,7346
<7348=7349
<7349=7351,7350
<7352=7354,7353
<7355=7356
<7357=7358
<7358=7360,7359
<7361=9074,9072,9069,7362
<7362=9065,9061,9052,8986,8980,7498,7380,7376,7372,7363
<7363=7368,7364
<7364=7365
<7365=7367,7366
<7368=7369
<7369=7371,7370
<7372=7373
<7373=7375,7374
<7376=7377
<7377=7379,7378
<7380=7494,7463,7381
<7381=7382
<7382=7454,7383
<7383=7450,7448,7445,7384
<7384=7434,7423,7412,7401,7393,7385
<7385=7386
<7386=7388,7387
<7388=7392,7389
<7389=7391,7390
<7393=7394
<7394=7396,7395
<7396=7400,7397
<7397=7399,7398
<7401=7402
<7402=7410,7403
<7403=7404
<7404=7405
<7405=7407,7406
<7407=7409,7408
<7410=7411
<7412=7413
<7413=7421,7414
<7414=7415
<7415=7416
<7416=7418,7417
<7418=7420,7419
<7421=7422
<7423=7424
<7424=7432,7425
<7425=7426
<7426=7427
<7427=7429,7428
<7429=7431,7430
<7432=7433
<7434=7435
<7435=7443,7436
<7436=7437
<7437=7438
<7438=7440,7439
<7440=7442,7441
<7443=7444
<7445=7447,7446
<7448=7449
<7450=7451
<7451=7453,7452
<7454=7455
<7455=7461,7456
<7456=7457
<7457=7458
<7458=7460,7459
<7461=7462
<7463=7464
<7464=7490,7488,7485,7465
<7465=7474,7466
<7466=7467
<7467=7469,7468
<7469=7473,7470
<7470=7472,7471
<7474=7475
<7475=7483,7476
<7476=7477
<7477=7478
<7478=7480,7479
<7480=7482,7481
<7483=7484
<7485=7487,7486
<7488=7489
<7490=7491
<7491=7493,7492
<7494=7495
<7495=7497,7496
<7498=8976,8298,7499
<7499=7500
<7500=8289,7501
<7501=8285,7924,7502
<7502=7503
<7503=7504
<7504=7922,7696,7505
<7505=7506
<7506=7507
<7507=7692,7690,7687,7508
<7508=7676,7665,7654,7643,7635,7565,7552,7539,7526,7513,7509
<7509=7510
<7510=7512,7511
<7513=7514
<7514=7524,7515
<7515=7516
<7516=7517
<7517=7519,7518
<7519=7523,7520
<7520=7522,7521
<7524=7525
<7526=7527
<7527=7537,7528
<7528=7529
<7529=7530
<7530=7532,7531
<7532=7536,7533
<7533=7535,7534
<7537=7538
<7539=7540
<7540=7550,7541
<7541=7542
<7542=7543
<7543=7545,7544
<7545=7549,7546
<7546=7548,7547
<7550=7551
<7552=7553
<7553=7563,7554
<7554=7555
<7555=7556
<7556=7558,7557
<7558=7562,7559
<7559=7561,7560
<7563=7564
<7565=7631,7603,7566
<7566=7567
<7567=7595,7587,7578,7568
<7568=7569
<7569=7573,7570
<7570=7572,7571
<7573=7577,7574
<7574=7576,7575
<7578=7579
<7579=7585,7580
<7580=7581
<7581=7582
<7582=7584,7583
<7585=7586
<7587=7588
<7588=7594,7589
<7589=7591,7590
<7591=7593,7592
<7595=7596
<7596=7598,7597
<7598=7602,7599
<7599=7601,7600
<7603=7622,7612,7604
<7604=7605
<7605=7607,7606
<7607=7611,7608
<7608=7610,7609
<7612=7613
<7613=7617,7614
<7614=7616,7615
<7617=7621,7618
<7618=7620,7619
<7622=7623
<7623=7629,7624
<7624=7625
<7625=7626
<7626=7628,7627
<7629=7630
<7631=7632
<7632=7634,7633
<7635=7636
<7636=7642,7637
<7637=7639,7638
<7639=7641,7640
<7643=7644
<7644=7652,7645
<7645=7646
<7646=7647
<7647=7649,7648
<7649=7651,7650
<7652=7653
<7654=7655
<7655=7663,7656
<7656=7657
<7657=7658
<7658=7660,7659
<7660=7662,7661
<7663=7664
<7665=7666
<7666=7674,7667
<7667=7668
<7668=7669
<7669=7671,7670
<7671=7673,7672
<7674=7675
<7676=7677
<7677=7685,7678
<7678=7679
<7679=7680
<7680=7682,7681
<7682=7684,7683
<7685=7686
<7687=7689,7688
<7690=7691
<7692=7693
<7693=7695,7694
<7696=7697
<7697=7918,7916,7913,7698
<7698=7905,7894,7883,7872,7861,7703,7699
<7699=7700
<7700=7702,7701
<7703=7857,7785,7704
<7704=7705
<7705=7777,7769,7760,7751,7742,7732,7719,7706
<7706=7707
<7707=7717,7708
<7708=7709
<7709=7710
<7710=7712,7711
<7712=7716,7713
<7713=7715,7714
<7717=7718
<7719=7720
<7720=7730,7721
<7721=7722
<7722=7723
<7723=7725,7724
<7725=7729,7726
<7726=7728,7727
<7730=7731
<7732=7733
<7733=7737,7734
<7734=7736,7735
<7737=7741,7738
<7738=7740,7739
<7742=7743
<7743=7749,7744
<7744=7745
<7745=7746
<7746=7748,7747
<7749=7750
<7751=7752
<7752=7758,7753
<7753=7754
<7754=7755
<7755=7757,7756
<7758=7759
<7760=7765,7761
<7761=7762
<7762=7764,7763
<7765=7766
<7766=7768,7767
<7769=7770
<7770=7776,7771
<7771=7773,7772
<7773=7775,7774
<7777=7778
<7778=7780,7779
<7780=7784,7781
<7781=7783,7782
<7785=7848,7839,7830,7820,7812,7799,7786
<7786=7787
<7787=7797,7788
<7788=7789
<7789=7790
<7790=7792,7791
<7792=7796,7793
<7793=7795,7794
<7797=7798
<7799=7800
<7800=7810,7801
<7801=7802
<7802=7803
<7803=7805,7804
<7805=7809,7806
<7806=7808,7807
<7810=7811
<7812=7813
<7813=7815,7814
<7815=7819,7816
<7816=7818,7817
<7820=7821
<7821=7825,7822
<7822=7824,7823
<7825=7829,7826
<7826=7828,7827
<7830=7831
<7831=7837,7832
<7832=7833
<7833=7834
<7834=7836,7835
<7837=7838
<7839=7840
<7840=7846,7841
<7841=7842
<7842=7843
<7843=7845,7844
<7846=7847
<7848=7853,7849
<7849=7850
<7850=7852,7851
<7853=7854
<7854=7856,7855
<7857=7858
<7858=7860,7859
<7861=7862
<7862=7870,7863
<7863=7864
<7864=7865
<7865=7867,7866
<7867=7869,7868
<7870=7871
<7872=7873
<7873=7881,7874
<7874=7875
<7875=7876
<7876=7878,7877
<7878=7880,7879
<7881=7882
<7883=7884
<7884=7892,7885
<7885=7886
<7886=7887
<7887=7889,7888
<7889=7891,7890
<7892=7893
<7894=7895
<7895=7903,7896
<7896=7897
<7897=7898
<7898=7900,7899
<7900=7902,7901
<7903=7904
<7905=7906
<7906=7912,7907
<7907=7909,7908
<7909=7911,7910
<7913=7915,7914
<7916=7917
<7918=7919
<7919=7921,7920
<7922=7923
<7924=8034,7925
<7925=8030,8028,8025,7926
<7926=8014,8003,7992,7981,7971,7927
<7927=7967,7948,7928
<7928=7929
<7929=7940,7930
<7930=7931
<7931=7935,7932
<7932=7934,7933
<7935=7939,7936
<7936=7938,7937
<7940=7941
<7941=7943,7942
<7943=7947,7944
<7944=7946,7945
<7948=7957,7949
<7949=7950
<7950=7952,7951
<7952=7956,7953
<7953=7955,7954
<7957=7958
<7958=7962,7959
<7959=7961,7960
<7962=7966,7963
<7963=7965,7964
<7967=7968
<7968=7970,7969
<7971=7972
<7972=7980,7973
<7973=7979,7974
<7974=7978,7975
<7975=7977,7976
<7981=7982
<7982=7990,7983
<7983=7984
<7984=7985
<7985=7987,7986
<7987=7989,7988
<7990=7991
<7992=7993
<7993=8001,7994
<7994=7995
<7995=7996
<7996=7998,7997
<7998=8000,7999
<8001=8002
<8003=8004
<8004=8012,8005
<8005=8006
<8006=8007
<8007=8009,8008
<8009=8011,8010
<8012=8013
<8014=8015
<8015=8023,8016
<8016=8017
<8017=8018
<8018=8020,8019
<8020=8022,8021
<8023=8024
<8025=8027,8026
<8028=8029
<8030=8031
<8031=8033,8032
<8034=8281,8279,8276,8035
<8035=8265,8254,8239,8224,8216,8180,8172,8136,8128,8092,8084,8048,8044,8040,8036
<8036=8037
<8037=8039,8038
<8040=8041
<8041=8043,8042
<8044=8045
<8045=8047,8046
<8048=8080,8065,8049
<8049=8050
<8050=8059,8051
<8051=8052
<8052=8056,8053
<8053=8055,8054
<8056=8058,8057
<8059=8060
<8060=8062,8061
<8062=8064,8063
<8065=8072,8066
<8066=8067
<8067=8069,8068
<8069=8071,8070
<8072=8073
<8073=8077,8074
<8074=8076,8075
<8077=8079,8078
<8080=8081
<8081=8083,8082
<8084=8085
<8085=8091,8086
<8086=8090,8087
<8087=8089,8088
<8092=8124,8109,8093
<8093=8094
<8094=8103,8095
<8095=8096
<8096=8100,8097
<8097=8099,8098
<8100=8102,8101
<8103=8104
<8104=8106,8105
<8106=8108,8107
<8109=8116,8110
<8110=8111
<8111=8113,8112
<8113=8115,8114
<8116=8117
<8117=8121,8118
<8118=8120,8119
<8121=8123,8122
<8124=8125
<8125=8127,8126
<8128=8129
<8129=8135,8130
<8130=8134,8131
<8131=8133,8132
<8136=8168,8153,8137
<8137=8138
<8138=8147,8139
<8139=8140
<8140=8144,8141
<8141=8143,8142
<8144=8146,8145
<8147=8148
<8148=8150,8149
<8150=8152,8151
<8153=8160,8154
<8154=8155
<8155=8157,8156
<8157=8159,8158
<8160=8161
<8161=8165,8162
<8162=8164,8163
<8165=8167,8166
<8168=8169
<8169=8171,8170
<8172=8173
<8173=8179,8174
<8174=8178,8175
<8175=8177,8176
<8180=8212,8197,8181
<8181=8182
<8182=8191,8183
<8183=8184
<8184=8188,8185
<8185=8187,8186
<8188=8190,8189
<8191=8192
<8192=8194,8193
<8194=8196,8195
<8197=8204,8198
<8198=8199
<8199=8201,8200
<8201=8203,8202
<8204=8205
<8205=8209,8206
<8206=8208,8207
<8209=8211,8210
<8212=8213
<8213=8215,8214
<8216=8217
<8217=8223,8218
<8218=8222,8219
<8219=8221,8220
<8224=8225
<8225=8237,8226
<8226=8227
<8227=8228
<8228=8230,8229
<8230=8236,8231
<8231=8235,8232
<8232=8234,8233
<8237=8238
<8239=8240
<8240=8252,8241
<8241=8242
<8242=8243
<8243=8245,8244
<8245=8251,8246
<8246=8250,8247
<8247=8249,8248
<8252=8253
<8254=8255
<8255=8263,8256
<8256=8257
<8257=8258
<8258=8260,8259
<8260=8262,8261
<8263=8264
<8265=8266
<8266=8274,8267
<8267=8268
<8268=8269
<8269=8271,8270
<8271=8273,8272
<8274=8275
<8276=8278,8277
<8279=8280
<8281=8282
<8282=8284,8283
<8285=8286
<8286=8288,8287
<8289=8290
<8290=8296,8291
<8291=8292
<8292=8293
<8293=8295,8294
<8296=8297
<8298=8299
<8299=8972,8850,8300
<8300=8301
<8301=8302
<8302=8848,8561,8303
<8303=8304
<8304=8380,8305
<8305=8376,8374,8371,8306
<8306=8360,8349,8341,8328,8317,8307
<8307=8308
<8308=8312,8309
<8309=8311,8310
<8312=8316,8313
<8313=8315,8314
<8317=8318
<8318=8326,8319
<8319=8320
<8320=8321
<8321=8325,8322
<8322=8324,8323
<8326=8327
<8328=8329
<8329=8340,8330
<8330=8339,8331
<8331=8333,8332
<8333=8337,8334
<8334=8335
<8335=8336
<8337=8338
<8341=8342
<8342=8348,8343
<8343=8347,8344
<8344=8346,8345
<8349=8350
<8350=8358,8351
<8351=8352
<8352=8353
<8353=8355,8354
<8355=8357,8356
<8358=8359
<8360=8361
<8361=8369,8362
<8362=8363
<8363=8364
<8364=8366,8365
<8366=8368,8367
<8369=8370
<8371=8373,8372
<8374=8375
<8376=8377
<8377=8379,8378
<8380=8557,8555,8552,8381
<8381=8541,8526,8511,8500,8492,8477,8466,8458,8443,8432,8424,8409,8398,8390,8386,8382
<8382=8383
<8383=8385,8384
<8386=8387
<8387=8389,8388
<8390=8391
<8391=8395,8392
<8392=8394,8393
<8395=8397,8396
<8398=8399
<8399=8407,8400
<8400=8401
<8401=8402
<8402=8406,8403
<8403=8405,8404
<8407=8408
<8409=8410
<8410=8423,8411
<8411=8422,8412
<8412=8414,8413
<8414=8420,8415
<8415=8416
<8416=8417
<8417=8419,8418
<8420=8421
<8424=8425
<8425=8429,8426
<8426=8428,8427
<8429=8431,8430
<8432=8433
<8433=8441,8434
<8434=8435
<8435=8436
<8436=8440,8437
<8437=8439,8438
<8441=8442
<8443=8444
<8444=8457,8445
<8445=8456,8446
<8446=8448,8447
<8448=8454,8449
<8449=8450
<8450=8451
<8451=8453,8452
<8454=8455
<8458=8459
<8459=8463,8460
<8460=8462,8461
<8463=8465,8464
<8466=8467
<8467=8475,8468
<8468=8469
<8469=8470
<8470=8474,8471
<8471=8473,8472
<8475=8476
<8477=8478
<8478=8491,8479
<8479=8490,8480
<8480=8482,8481
<8482=8488,8483
<8483=8484
<8484=8485
<8485=8487,8486
<8488=8489
<8492=8493
<8493=8497,8494
<8494=8496,8495
<8497=8499,8498
<8500=8501
<8501=8509,8502
<8502=8503
<8503=8504
<8504=8508,8505
<8505=8507,8506
<8509=8510
<8511=8512
<8512=8525,8513
<8513=8524,8514
<8514=8516,8515
<8516=8522,8517
<8517=8518
<8518=8519
<8519=8521,8520
<8522=8523
<8526=8527
<8527=8539,8528
<8528=8529
<8529=8530
<8530=8532,8531
<8532=8538,8533
<8533=8537,8534
<8534=8536,8535
<8539=8540
<8541=8542
<8542=8550,8543
<8543=8544
<8544=8545
<8545=8547,8546
<8547=8549,8548
<8550=8551
<8552=8554,8553
<8555=8556
<8557=8558
<8558=8560,8559
<8561=8613,8562
<8562=8609,8607,8604,8563
<8563=8596,8583,8574,8564
<8564=8565
<8565=8569,8566
<8566=8568,8567
<8569=8573,8570
<8570=8572,8571
<8574=8579,8575
<8575=8576
<8576=8578,8577
<8579=8580
<8580=8582,8581
<8583=8584
<8584=8595,8585
<8585=8594,8586
<8586=8588,8587
<8588=8592,8589
<8589=8590
<8590=8591
<8592=8593
<8596=8597
<8597=8603,8598
<8598=8602,8599
<8599=8601,8600
<8604=8606,8605
<8607=8608
<8609=8610
<8610=8612,8611
<8613=8844,8842,8839,8614
<8614=8824,8815,8807,8792,8783,8775,8760,8751,8743,8728,8719,8711,8700,8689,8678,8667,8656,8645,8634,8623,8619,8615
<8615=8616
<8616=8618,8617
<8619=8620
<8620=8622,8621
<8623=8624
<8624=8632,8625
<8625=8626
<8626=8627
<8627=8629,8628
<8629=8631,8630
<8632=8633
<8634=8635
<8635=8643,8636
<8636=8637
<8637=8638
<8638=8640,8639
<8640=8642,8641
<8643=8644
<8645=8646
<8646=8654,8647
<8647=8648
<8648=8649
<8649=8651,8650
<8651=8653,8652
<8654=8655
<8656=8657
<8657=8665,8658
<8658=8659
<8659=8660
<8660=8662,8661
<8662=8664,8663
<8665=8666
<8667=8668
<8668=8676,8669
<8669=8670
<8670=8671
<8671=8673,8672
<8673=8675,8674
<8676=8677
<8678=8679
<8679=8687,8680
<8680=8681
<8681=8682
<8682=8684,8683
<8684=8686,8685
<8687=8688
<8689=8690
<8690=8698,8691
<8691=8692
<8692=8693
<8693=8695,8694
<8695=8697,8696
<8698=8699
<8700=8701
<8701=8709,8702
<8702=8703
<8703=8704
<8704=8706,8705
<8706=8708,8707
<8709=8710
<8711=8712
<8712=8716,8713
<8713=8715,8714
<8716=8718,8717
<8719=8724,8720
<8720=8721
<8721=8723,8722
<8724=8725
<8725=8727,8726
<8728=8729
<8729=8742,8730
<8730=8741,8731
<8731=8733,8732
<8733=8739,8734
<8734=8735
<8735=8736
<8736=8738,8737
<8739=8740
<8743=8744
<8744=8748,8745
<8745=8747,8746
<8748=8750,8749
<8751=8756,8752
<8752=8753
<8753=8755,8754
<8756=8757
<8757=8759,8758
<8760=8761
<8761=8774,8762
<8762=8773,8763
<8763=8765,8764
<8765=8771,8766
<8766=8767
<8767=8768
<8768=8770,8769
<8771=8772
<8775=8776
<8776=8780,8777
<8777=8779,8778
<8780=8782,8781
<8783=8788,8784
<8784=8785
<8785=8787,8786
<8788=8789
<8789=8791,8790
<8792=8793
<8793=8806,8794
<8794=8805,8795
<8795=8797,8796
<8797=8803,8798
<8798=8799
<8799=8800
<8800=8802,8801
<8803=8804
<8807=8808
<8808=8812,8809
<8809=8811,8810
<8812=8814,8813
<8815=8820,8816
<8816=8817
<8817=8819,8818
<8820=8821
<8821=8823,8822
<8824=8825
<8825=8838,8826
<8826=8837,8827
<8827=8829,8828
<8829=8835,8830
<8830=8831
<8831=8832
<8832=8834,8833
<8835=8836
<8839=8841,8840
<8842=8843
<8844=8845
<8845=8847,8846
<8848=8849
<8850=8885,8851
<8851=8881,8879,8876,8852
<8852=8857,8853
<8853=8854
<8854=8856,8855
<8857=8858
<8858=8871,8859
<8859=8870,8860
<8860=8869,8861
<8861=8867,8862
<8862=8863
<8863=8864
<8864=8866,8865
<8867=8868
<8871=8875,8872
<8872=8874,8873
<8876=8878,8877
<8879=8880
<8881=8882
<8882=8884,8883
<8885=8968,8966,8963,8886
<8886=8946,8929,8912,8895,8891,8887
<8887=8888
<8888=8890,8889
<8891=8892
<8892=8894,8893
<8895=8896
<8896=8909,8897
<8897=8908,8898
<8898=8907,8899
<8899=8905,8900
<8900=8901
<8901=8902
<8902=8904,8903
<8905=8906
<8909=8911,8910
<8912=8913
<8913=8926,8914
<8914=8925,8915
<8915=8924,8916
<8916=8922,8917
<8917=8918
<8918=8919
<8919=8921,8920
<8922=8923
<8926=8928,8927
<8929=8930
<8930=8943,8931
<8931=8942,8932
<8932=8941,8933
<8933=8939,8934
<8934=8935
<8935=8936
<8936=8938,8937
<8939=8940
<8943=8945,8944
<8946=8947
<8947=8960,8948
<8948=8959,8949
<8949=8958,8950
<8950=8956,8951
<8951=8952
<8952=8953
<8953=8955,8954
<8956=8957
<8960=8962,8961
<8963=8965,8964
<8966=8967
<8968=8969
<8969=8971,8970
<8972=8973
<8973=8975,8974
<8976=8977
<8977=8979,8978
<8980=8981
<8981=8985,8982
<8982=8984,8983
<8986=9048,9027,8987
<8987=8988
<8988=9018,8989
<8989=9012,9010,9007,8990
<8990=8999,8991
<8991=8992
<8992=8994,8993
<8994=8998,8995
<8995=8997,8996
<8999=9000
<9000=9002,9001
<9002=9006,9003
<9003=9005,9004
<9007=9009,9008
<9010=9011
<9012=9013
<9013=9017,9014
<9014=9016,9015
<9018=9019
<9019=9025,9020
<9020=9021
<9021=9022
<9022=9024,9023
<9025=9026
<9027=9028
<9028=9042,9040,9037,9029
<9029=9030
<9030=9032,9031
<9032=9036,9033
<9033=9035,9034
<9037=9039,9038
<9040=9041
<9042=9043
<9043=9047,9044
<9044=9046,9045
<9048=9049
<9049=9051,9050
<9052=9057,9053
<9053=9054
<9054=9056,9055
<9057=9058
<9058=9060,9059
<9061=9062
<9062=9064,9063
<9065=9066
<9066=9068,9067
<9069=9071,9070
<9072=9073
<9074=9075
<9075=9077,9076
<9078=9079
<9079=9085,9080
<9080=9084,9081
<9081=9083,9082
<9086=9285,9283,9280,9087
<9087=9088
<9088=9276,9210,9089
<9089=9090
<9090=9201,9197,9193,9126,9099,9095,9091
<9091=9092
<9092=9094,9093
<9095=9096
<9096=9098,9097
<9099=9122,9120,9117,9100
<9100=9109,9101
<9101=9102
<9102=9104,9103
<9104=9108,9105
<9105=9107,9106
<9109=9110
<9110=9112,9111
<9112=9116,9113
<9113=9115,9114
<9117=9119,9118
<9120=9121
<9122=9123
<9123=9125,9124
<9126=9189,9187,9184,9127
<9127=9178,9172,9166,9160,9154,9148,9142,9136,9132,9128
<9128=9129
<9129=9131,9130
<9132=9133
<9133=9135,9134
<9136=9137
<9137=9139,9138
<9139=9141,9140
<9142=9143
<9143=9145,9144
<9145=9147,9146
<9148=9149
<9149=9151,9150
<9151=9153,9152
<9154=9155
<9155=9157,9156
<9157=9159,9158
<9160=9161
<9161=9163,9162
<9163=9165,9164
<9166=9167
<9167=9169,9168
<9169=9171,9170
<9172=9173
<9173=9175,9174
<9175=9177,9176
<9178=9179
<9179=9181,9180
<9181=9183,9182
<9184=9186,9185
<9187=9188
<9189=9190
<9190=9192,9191
<9193=9194
<9194=9196,9195
<9197=9198
<9198=9200,9199
<9201=9202
<9202=9208,9203
<9203=9204
<9204=9205
<9205=9207,9206
<9208=9209
<9210=9272,9233,9215,9211
<9211=9212
<9212=9214,9213
<9215=9229,9227,9224,9216
<9216=9217
<9217=9219,9218
<9219=9223,9220
<9220=9222,9221
<9224=9226,9225
<9227=9228
<9229=9230
<9230=9232,9231
<9233=9268,9266,9263,9234
<9234=9257,9251,9245,9239,9235
<9235=9236
<9236=9238,9237
<9239=9240
<9240=9242,9241
<9242=9244,9243
<9245=9246
<9246=9248,9247
<9248=9250,9249
<9251=9252
<9252=9254,9253
<9254=9256,9255
<9257=9258
<9258=9260,9259
<9260=9262,9261
<9263=9265,9264
<9266=9267
<9268=9269
<9269=9271,9270
<9272=9273
<9273=9275,9274
<9276=9277
<9277=9279,9278
<9280=9282,9281
<9283=9284
<9285=9286
<9286=9288,9287
<9289=9314,9290
<9290=9291
<9291=9313,9292
<9292=9312,9293
<9293=9306,9294
<9294=9300,9295
<9295=9299,9296
<9296=9298,9297
<9300=9304,9301
<9301=9302
<9302=9303
<9304=9305
<9306=9310,9307
<9307=9308
<9308=9309
<9310=9311
<9314=9315
<9315=9317,9316
<9318=9319
<9319=9321,9320
<9322=9323
<9323=9328,9327,9324
<9324=9326,9325
<9329=9362,9330
<9330=9349,9331
<9331=9345,9332
<9332=9333
<9333=9344,9334
<9334=9342,9335
<9335=9336
<9336=9337
<9337=9341,9338
<9338=9340,9339
<9342=9343
<9345=9346
<9346=9348,9347
<9349=9350
<9350=9361,9351
<9351=9359,9352
<9352=9353
<9353=9354
<9354=9358,9355
<9355=9357,9356
<9359=9360
<9362=9363
<9363=9365,9364
<9366=9391,9367
<9367=9368
<9368=9369
<9369=9389,9370
<9370=9387,9383,9379,9377,9375,9373,9371
<9371=9372
<9373=9374
<9375=9376
<9377=9378
<9379=9380
<9380=9382,9381
<9383=9384
<9384=9386,9385
<9387=9388
<9389=9390
<9391=9392
<9392=9394,9393
<9395=9397,9396
<9398=9399
<9399=9406,9400
<9400=9404,9401
<9401=9402
<9402=9403
<9404=9405
<9407=9408
<9408=9410,9409
<9411=9436,9412
<9412=9413
<9413=9414
<9414=9434,9415
<9415=9432,9428,9424,9422,9420,9418,9416
<9416=9417
<9418=9419
<9420=9421
<9422=9423
<9424=9425
<9425=9427,9426
<9428=9429
<9429=9431,9430
<9432=9433
<9434=9435
<9436=9437
<9437=9439,9438
<9440=9441
<9441=9449,9442
<9442=9448,9443
<9443=9447,9444
<9444=9446,9445
<9450=9492,9451
<9451=9484,9475,9469,9452
<9452=9465,9453
<9453=9461,9454
<9454=9455
<9455=9459,9456
<9456=9457
<9457=9458
<9459=9460
<9461=9462
<9462=9464,9463
<9465=9466
<9466=9468,9467
<9469=9470
<9470=9474,9471
<9471=9473,9472
<9475=9476
<9476=9483,9477
<9477=9481,9478
<9478=9479
<9479=9480
<9481=9482
<9484=9485
<9485=9491,9486
<9486=9490,9487
<9487=9489,9488
<9492=9493
<9493=9495,9494
<9496=9497
<9497=9502,9501,9498
<9498=9500,9499
<9503=9504
<9504=9509,9508,9505
<9505=9507,9506
<9510=9511
<9511=9516,9515,9512
<9512=9514,9513
<9517=9518
<9518=9523,9522,9519
<9519=9521,9520
<9524=9525
<9525=9539,9538,9526
<9526=9537,9527
<9527=9531,9528
<9528=9530,9529
<9531=9535,9532
<9532=9533
<9533=9534
<9535=9536
<9540=9541
<9541=9553,9552,9542
<9542=9551,9543
<9543=9545,9544
<9545=9549,9546
<9546=9547
<9547=9548
<9549=9550
<9554=9555
<9555=9564,9563,9556
<9556=9562,9557
<9557=9561,9558
<9558=9560,9559
<9565=9566
<9566=9573,9572,9567
<9567=9571,9568
<9568=9570,9569
<9574=9575
<9575=9589,9588,9576
<9576=9587,9577
<9577=9581,9578
<9578=9580,9579
<9581=9585,9582
<9582=9583
<9583=9584
<9585=9586
<9590=9591
<9591=9605,9604,9592
<9592=9603,9593
<9593=9597,9594
<9594=9596,9595
<9597=9601,9598
<9598=9599
<9599=9600
<9601=9602
<9606=9607
<9607=9614,9613,9608
<9608=9612,9609
<9609=9611,9610
<9615=9616
<9616=9629,9617
<9617=9618
<9618=9619
<9619=9621,9620
<9621=9623,9622
<9623=9627,9624
<9624=9625
<9625=9626
<9627=9628
<9629=9630
<9631=9632
<9632=9643,9642,9633
<9633=9641,9634
<9634=9638,9635
<9635=9637,9636
<9638=9640,9639
<9644=9645
<9645=9656,9655,9646
<9646=9654,9647
<9647=9651,9648
<9648=9650,9649
<9651=9653,9652
<9657=9658
<9658=9677,9676,9659
<9659=9675,9660
<9660=9674,9661
<9661=9668,9662
<9662=9666,9663
<9663=9664
<9664=9665
<9666=9667
<9668=9672,9669
<9669=9670
<9670=9671
<9672=9673
<9678=9679
<9679=9688,9687,9680
<9680=9686,9681
<9681=9685,9682
<9682=9684,9683
<9689=9690
<9690=9706,9705,9691
<9691=9704,9692
<9692=9698,9693
<9693=9697,9694
<9694=9696,9695
<9698=9702,9699
<9699=9700
<9700=9701
<9702=9703
<9707=9708
<9708=9717,9716,9709
<9709=9715,9710
<9710=9714,9711
<9711=9713,9712
<9718=9719
<9719=9735,9734,9720
<9720=9733,9721
<9721=9727,9722
<9722=9726,9723
<9723=9725,9724
<9727=9731,9728
<9728=9729
<9729=9730
<9731=9732
<9736=9737
<9737=9746,9745,9738
<9738=9744,9739
<9739=9743,9740
<9740=9742,9741
<9747=9748
<9748=9753,9752,9749
<9749=9751,9750
<9754=9755
<9755=9760,9759,9756
<9756=9758,9757
<9761=9762
<9762=9767,9766,9763
<9763=9765,9764
<9768=9769
<9769=9774,9773,9770
<9770=9772,9771
<9775=9776
<9776=9781,9780,9777
<9777=9779,9778
<9782=9795,9789,9783
<9783=9788,9787,9784
<9784=9786,9785
<9789=9794,9793,9790
<9790=9792,9791
<9795=9797,9796
<9798=9799
<9799=9801,9800
<9802=9803
<9803=9805,9804
<9806=9807
<9807=9812,9811,9808
<9808=9810,9809
<9813=9814
<9814=9819,9818,9815
<9815=9817,9816
<9820=9821
<9821=9823,9822
<9824=9825
<9825=9827,9826
<9828=9829
<9829=9831,9830
<9832=9836,9833
<9833=9835,9834
<9836=9838,9837
<9944=9950,9949,9945
<9945=9946
<9946=9948,9947
<9950=10167,10160,10153,10142,10124,10106,10094,10082,10070,10061,10050,9951
<9951=10046,10044,10041,9952
<9952=10037,9957,9953
<9953=9954
<9954=9956,9955
<9957=10033,10031,10028,9958
<9958=10024,9981,9963,9959
<9959=9960
<9960=9962,9961
<9963=9977,9975,9972,9964
<9964=9965
<9965=9967,9966
<9967=9971,9968
<9968=9970,9969
<9972=9974,9973
<9975=9976
<9977=9978
<9978=9980,9979
<9981=10020,10018,10015,9982
<9982=10007,9999,9991,9983
<9983=9984
<9984=9986,9985
<9986=9990,9987
<9987=9989,9988
<9991=9992
<9992=9994,9993
<9994=9998,9995
<9995=9997,9996
<9999=10000
<10000=10002,10001
<10002=10006,10003
<10003=10005,10004
<10007=10008
<10008=10010,10009
<10010=10014,10011
<10011=10013,10012
<10015=10017,10016
<10018=10019
<10020=10021
<10021=10023,10022
<10024=10025
<10025=10027,10026
<10028=10030,10029
<10031=10032
<10033=10034
<10034=10036,10035
<10037=10038
<10038=10040,10039
<10041=10043,10042
<10044=10045
<10046=10047
<10047=10049,10048
<10050=10051
<10051=10060,10059,10052
<10052=10058,10053
<10053=10057,10054
<10054=10056,10055
<10061=10062
<10062=10069,10068,10063
<10063=10067,10064
<10064=10066,10065
<10070=10071
<10071=10081,10080,10072
<10072=10079,10073
<10073=10077,10074
<10074=10075
<10075=10076
<10077=10078
<10082=10083
<10083=10093,10092,10084
<10084=10091,10085
<10085=10089,10086
<10086=10087
<10087=10088
<10089=10090
<10094=10095
<10095=10105,10104,10096
<10096=10103,10097
<10097=10101,10098
<10098=10099
<10099=10100
<10101=10102
<10106=10107
<10107=10123,10122,10108
<10108=10121,10109
<10109=10115,10110
<10110=10114,10111
<10111=10113,10112
<10115=10119,10116
<10116=10117
<10117=10118
<10119=10120
<10124=10125
<10125=10141,10140,10126
<10126=10139,10127
<10127=10133,10128
<10128=10132,10129
<10129=10131,10130
<10133=10137,10134
<10134=10135
<10135=10136
<10137=10138
<10142=10143
<10143=10152,10151,10144
<10144=10150,10145
<10145=10149,10146
<10146=10148,10147
<10153=10154
<10154=10159,10158,10155
<10155=10157,10156
<10160=10161
<10161=10166,10165,10162
<10162=10164,10163
<10167=10174,10171,10168
<10168=10170,10169
<10171=10173,10172
<10174=10176,10175
<10205=10211,10210,10206
<10206=10207
<10207=10209,10208
<10211=10212
<10212=10213
<10213=10217,10214
<10214=10215
<10215=10216
<10217=10218
<10223=10292,10291,10224
<10224=10288,10285,10282,10279,10276,10273,10270,10267,10264,10261,10258,10255,10252,10249,10246,10243,10240,10237,10234,10231,10228,10225
<10225=10227,10226
<10228=10230,10229
<10231=10233,10232
<10234=10236,10235
<10237=10239,10238
<10240=10242,10241
<10243=10245,10244
<10246=10248,10247
<10249=10251,10250
<10252=10254,10253
<10255=10257,10256
<10258=10260,10259
<10261=10263,10262
<10264=10266,10265
<10267=10269,10268
<10270=10272,10271
<10273=10275,10274
<10276=10278,10277
<10279=10281,10280
<10282=10284,10283
<10285=10287,10286
<10288=10290,10289
<10292=11223,11218,10313,10295,10293
<10293=10294
<10295=10312,10296
<10296=10301,10297
<10297=10298
<10298=10300,10299
<10301=10302
<10302=10311,10303
<10303=10310,10304
<10304=10306,10305
<10306=10307
<10307=10309,10308
<10313=10314
<10314=11199,11187,11178,11169,11015,11001,10982,10963,10949,10930,10911,10895,10879,10860,10841,10822,10803,10761,10754,10537,10496,10455,10412,10391,10360,10315
<10315=10316
<10316=10358,10317
<10317=10356,10354,10350,10348,10346,10344,10342,10340,10338,10336,10334,10332,10330,10328,10326,10324,10322,10320,10318
<10318=10319
<10320=10321
<10322=10323
<10324=10325
<10326=10327
<10328=10329
<10330=10331
<10332=10333
<10334=10335
<10336=10337
<10338=10339
<10340=10341
<10342=10343
<10344=10345
<10346=10347
<10348=10349
<10350=10351
<10351=10353,10352
<10354=10355
<10356=10357
<10358=10359
<10360=10361
<10361=10389,10362
<10362=10387,10385,10383,10381,10377,10373,10371,10369,10367,10365,10363
<10363=10364
<10365=10366
<10367=10368
<10369=10370
<10371=10372
<10373=10374
<10374=10376,10375
<10377=10378
<10378=10380,10379
<10381=10382
<10383=10384
<10385=10386
<10387=10388
<10389=10390
<10391=10392
<10392=10410,10393
<10393=10408,10406,10402,10400,10398,10396,10394
<10394=10395
<10396=10397
<10398=10399
<10400=10401
<10402=10403
<10403=10405,10404
<10406=10407
<10408=10409
<10410=10411
<10412=10423,10413
<10413=10416,10414
<10414=10415
<10416=10417
<10417=10421,10418
<10418=10419
<10419=10420
<10421=10422
<10423=10424
<10424=10440,10425
<10425=10427,10426
<10427=10434,10428
<10428=10432,10429
<10429=10430
<10430=10431
<10432=10433
<10434=10438,10435
<10435=10436
<10436=10437
<10438=10439
<10440=10442,10441
<10442=10449,10443
<10443=10447,10444
<10444=10445
<10445=10446
<10447=10448
<10449=10453,10450
<10450=10451
<10451=10452
<10453=10454
<10455=10456
<10456=10494,10457
<10457=10492,10490,10486,10482,10478,10474,10466,10458
<10458=10459
<10459=10463,10460
<10460=10462,10461
<10463=10465,10464
<10466=10467
<10467=10471,10468
<10468=10470,10469
<10471=10473,10472
<10474=10475
<10475=10477,10476
<10478=10479
<10479=10481,10480
<10482=10483
<10483=10485,10484
<10486=10487
<10487=10489,10488
<10490=10491
<10492=10493
<10494=10495
<10496=10497
<10497=10535,10498
<10498=10533,10531,10527,10523,10519,10515,10507,10499
<10499=10500
<10500=10504,10501
<10501=10503,10502
<10504=10506,10505
<10507=10508
<10508=10512,10509
<10509=10511,10510
<10512=10514,10513
<10515=10516
<10516=10518,10517
<10519=10520
<10520=10522,10521
<10523=10524
<10524=10526,10525
<10527=10528
<10528=10530,10529
<10531=10532
<10533=10534
<10535=10536
<10537=10750,10647,10538
<10538=10539
<10539=10638,10627,10616,10601,10586,10578,10570,10555,10540
<10540=10541
<10541=10552,10542
<10542=10549,10543
<10543=10547,10544
<10544=10545
<10545=10546
<10547=10548
<10549=10551,10550
<10552=10554,10553
<10555=10556
<10556=10567,10557
<10557=10564,10558
<10558=10562,10559
<10559=10560
<10560=10561
<10562=10563
<10564=10566,10565
<10567=10569,10568
<10570=10571
<10571=10575,10572
<10572=10574,10573
<10575=10577,10576
<10578=10579
<10579=10583,10580
<10580=10582,10581
<10583=10585,10584
<10586=10587
<10587=10598,10588
<10588=10595,10589
<10589=10593,10590
<10590=10591
<10591=10592
<10593=10594
<10595=10597,10596
<10598=10600,10599
<10601=10602
<10602=10613,10603
<10603=10610,10604
<10604=10608,10605
<10605=10606
<10606=10607
<10608=10609
<10610=10612,10611
<10613=10615,10614
<10616=10617
<10617=10624,10618
<10618=10622,10619
<10619=10620
<10620=10621
<10622=10623
<10624=10626,10625
<10627=10628
<10628=10635,10629
<10629=10633,10630
<10630=10631
<10631=10632
<10633=10634
<10635=10637,10636
<10638=10639
<10639=10645,10640
<10640=10641
<10641=10642
<10642=10644,10643
<10645=10646
<10647=10739,10728,10713,10698,10690,10682,10665,10648
<10648=10649
<10649=10662,10650
<10650=10659,10651
<10651=10653,10652
<10653=10657,10654
<10654=10655
<10655=10656
<10657=10658
<10659=10661,10660
<10662=10664,10663
<10665=10666
<10666=10679,10667
<10667=10676,10668
<10668=10670,10669
<10670=10674,10671
<10671=10672
<10672=10673
<10674=10675
<10676=10678,10677
<10679=10681,10680
<10682=10683
<10683=10687,10684
<10684=10686,10685
<10687=10689,10688
<10690=10691
<10691=10695,10692
<10692=10694,10693
<10695=10697,10696
<10698=10699
<10699=10710,10700
<10700=10707,10701
<10701=10705,10702
<10702=10703
<10703=10704
<10705=10706
<10707=10709,10708
<10710=10712,10711
<10713=10714
<10714=10725,10715
<10715=10722,10716
<10716=10720,10717
<10717=10718
<10718=10719
<10720=10721
<10722=10724,10723
<10725=10727,10726
<10728=10729
<10729=10736,10730
<10730=10734,10731
<10731=10732
<10732=10733
<10734=10735
<10736=10738,10737
<10739=10740
<10740=10747,10741
<10741=10745,10742
<10742=10743
<10743=10744
<10745=10746
<10747=10749,10748
<10750=10751
<10751=10753,10752
<10754=10758,10755
<10755=10757,10756
<10758=10760,10759
<10761=10801,10762
<10762=10782,10763
<10763=10764
<10764=10780,10765
<10765=10766
<10766=10767
<10767=10774,10768
<10768=10772,10769
<10769=10770
<10770=10771
<10772=10773
<10774=10778,10775
<10775=10776
<10776=10777
<10778=10779
<10780=10781
<10782=10783
<10783=10799,10784
<10784=10785
<10785=10786
<10786=10793,10787
<10787=10791,10788
<10788=10789
<10789=10790
<10791=10792
<10793=10797,10794
<10794=10795
<10795=10796
<10797=10798
<10799=10800
<10801=10802
<10803=10804
<10804=10820,10805
<10805=10806
<10806=10807
<10807=10814,10808
<10808=10812,10809
<10809=10810
<10810=10811
<10812=10813
<10814=10818,10815
<10815=10816
<10816=10817
<10818=10819
<10820=10821
<10822=10823
<10823=10839,10824
<10824=10825
<10825=10826
<10826=10833,10827
<10827=10831,10828
<10828=10829
<10829=10830
<10831=10832
<10833=10837,10834
<10834=10835
<10835=10836
<10837=10838
<10839=10840
<10841=10842
<10842=10858,10843
<10843=10844
<10844=10845
<10845=10852,10846
<10846=10850,10847
<10847=10848
<10848=10849
<10850=10851
<10852=10856,10853
<10853=10854
<10854=10855
<10856=10857
<10858=10859
<10860=10861
<10861=10877,10862
<10862=10863
<10863=10864
<10864=10871,10865
<10865=10869,10866
<10866=10867
<10867=10868
<10869=10870
<10871=10875,10872
<10872=10873
<10873=10874
<10875=10876
<10877=10878
<10879=10880
<10880=10893,10881
<10881=10882
<10882=10883
<10883=10885,10884
<10885=10887,10886
<10887=10891,10888
<10888=10889
<10889=10890
<10891=10892
<10893=10894
<10895=10896
<10896=10909,10897
<10897=10898
<10898=10899
<10899=10901,10900
<10901=10903,10902
<10903=10907,10904
<10904=10905
<10905=10906
<10907=10908
<10909=10910
<10911=10912
<10912=10928,10913
<10913=10914
<10914=10915
<10915=10922,10916
<10916=10920,10917
<10917=10918
<10918=10919
<10920=10921
<10922=10926,10923
<10923=10924
<10924=10925
<10926=10927
<10928=10929
<10930=10931
<10931=10947,10932
<10932=10933
<10933=10934
<10934=10941,10935
<10935=10939,10936
<10936=10937
<10937=10938
<10939=10940
<10941=10945,10942
<10942=10943
<10943=10944
<10945=10946
<10947=10948
<10949=10950
<10950=10961,10951
<10951=10952
<10952=10953
<10953=10955,10954
<10955=10959,10956
<10956=10957
<10957=10958
<10959=10960
<10961=10962
<10963=10964
<10964=10980,10965
<10965=10966
<10966=10967
<10967=10974,10968
<10968=10972,10969
<10969=10970
<10970=10971
<10972=10973
<10974=10978,10975
<10975=10976
<10976=10977
<10978=10979
<10980=10981
<10982=10983
<10983=10999,10984
<10984=10985
<10985=10986
<10986=10993,10987
<10987=10991,10988
<10988=10989
<10989=10990
<10991=10992
<10993=10997,10994
<10994=10995
<10995=10996
<10997=10998
<10999=11000
<11001=11002
<11002=11013,11003
<11003=11004
<11004=11005
<11005=11007,11006
<11007=11011,11008
<11008=11009
<11009=11010
<11011=11012
<11013=11014
<11015=11165,11121,11016
<11016=11017
<11017=11112,11084,11061,11037,11018
<11018=11019
<11019=11035,11020
<11020=11021
<11021=11022
<11022=11029,11023
<11023=11027,11024
<11024=11025
<11025=11026
<11027=11028
<11029=11033,11030
<11030=11031
<11031=11032
<11033=11034
<11035=11036
<11037=11038
<11038=11059,11039
<11039=11040
<11040=11041
<11041=11053,11042
<11042=11051,11043
<11043=11044
<11044=11045
<11045=11049,11046
<11046=11047
<11047=11048
<11049=11050
<11051=11052
<11053=11057,11054
<11054=11055
<11055=11056
<11057=11058
<11059=11060
<11061=11062
<11062=11082,11063
<11063=11064
<11064=11065
<11065=11076,11066
<11066=11070,11067
<11067=11069,11068
<11070=11074,11071
<11071=11072
<11072=11073
<11074=11075
<11076=11080,11077
<11077=11078
<11078=11079
<11080=11081
<11082=11083
<11084=11085
<11085=11110,11086
<11086=11087
<11087=11088
<11088=11104,11089
<11089=11102,11090
<11090=11091
<11091=11092
<11092=11096,11093
<11093=11095,11094
<11096=11100,11097
<11097=11098
<11098=11099
<11100=11101
<11102=11103
<11104=11108,11105
<11105=11106
<11106=11107
<11108=11109
<11110=11111
<11112=11113
<11113=11119,11114
<11114=11115
<11115=11116
<11116=11118,11117
<11119=11120
<11121=11141,11122
<11122=11123
<11123=11139,11124
<11124=11125
<11125=11126
<11126=11133,11127
<11127=11131,11128
<11128=11129
<11129=11130
<11131=11132
<11133=11137,11134
<11134=11135
<11135=11136
<11137=11138
<11139=11140
<11141=11142
<11142=11163,11143
<11143=11144
<11144=11145
<11145=11157,11146
<11146=11155,11147
<11147=11148
<11148=11149
<11149=11153,11150
<11150=11151
<11151=11152
<11153=11154
<11155=11156
<11157=11161,11158
<11158=11159
<11159=11160
<11161=11162
<11163=11164
<11165=11166
<11166=11168,11167
<11169=11170
<11170=11177,11176,11171
<11171=11175,11172
<11172=11174,11173
<11178=11179
<11179=11186,11185,11180
<11180=11184,11181
<11181=11183,11182
<11187=11188
<11188=11198,11197,11189
<11189=11196,11190
<11190=11194,11191
<11191=11192
<11192=11193
<11194=11195
<11199=11200
<11200=11216,11201
<11201=11202
<11202=11203
<11203=11210,11204
<11204=11208,11205
<11205=11206
<11206=11207
<11208=11209
<11210=11214,11211
<11211=11212
<11212=11213
<11214=11215
<11216=11217
<11218=11219
<11219=11222,11221,11220
<11223=11224
<11224=11227,11226,11225
