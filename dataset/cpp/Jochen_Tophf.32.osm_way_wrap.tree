>7	FunctionDef	OSMWayWrap 
>8	ParameterList	v8 
>9	Parameter	 
>10	Identifier	target
>11	ParameterType	v8 
>12	ReturnType	void
>13	CompoundStatement	 
>14	ExpressionStatement	 
>15	CallExpression	target -> Set ( symbol_Way , constructor -> GetFunction ( ) )
>16	ArgumentList	symbol_Way
>17	Argument	constructor -> GetFunction ( )
>18	CallExpression	constructor -> GetFunction ( )
>19	ArgumentList	 
>20	Callee	constructor -> GetFunction
>21	PtrMemberAccess	constructor -> GetFunction
>22	Identifier	GetFunction
>23	Identifier	constructor
>24	Argument	symbol_Way
>25	Identifier	symbol_Way
>26	Callee	target -> Set
>27	PtrMemberAccess	target -> Set
>28	Identifier	Set
>29	Identifier	target
>30	ExpressionStatement	 
>31	CallExpression	node 
>32	ArgumentList	constructor
>33	Argument	wkt
>34	Identifier	wkt
>35	Argument	\"wkt\"
>36	PrimaryExpression	\"wkt\"
>37	Argument	constructor
>38	Identifier	constructor
>39	Callee	node 
>40	Identifier	node 
>41	ExpressionStatement	 
>42	CallExpression	node 
>43	ArgumentList	constructor
>44	Argument	wkb
>45	Identifier	wkb
>46	Argument	\"wkb\"
>47	PrimaryExpression	\"wkb\"
>48	Argument	constructor
>49	Identifier	constructor
>50	Callee	node 
>51	Identifier	node 
>52	ExpressionStatement	 
>53	CallExpression	node 
>54	ArgumentList	constructor
>55	Argument	node_coordinates
>56	Identifier	node_coordinates
>57	Argument	\"node_coordinates\"
>58	PrimaryExpression	\"node_coordinates\"
>59	Argument	constructor
>60	Identifier	constructor
>61	Callee	node 
>62	Identifier	node 
>63	ExpressionStatement	 
>64	CallExpression	node 
>65	ArgumentList	constructor
>66	Argument	node_refs
>67	Identifier	node_refs
>68	Argument	\"node_refs\"
>69	PrimaryExpression	\"node_refs\"
>70	Argument	constructor
>71	Identifier	constructor
>72	Callee	node 
>73	Identifier	node 
>74	ExpressionStatement	 
>75	CallExpression	set_accessor ( constructor , \"nodes_count\" , get_nodes_count , attributes )
>76	ArgumentList	constructor
>77	Argument	attributes
>78	Identifier	attributes
>79	Argument	get_nodes_count
>80	Identifier	get_nodes_count
>81	Argument	\"nodes_count\"
>82	PrimaryExpression	\"nodes_count\"
>83	Argument	constructor
>84	Identifier	constructor
>85	Callee	set_accessor
>86	Identifier	set_accessor
>87	ExpressionStatement	 
>88	CallExpression	set_accessor ( constructor , \"type\" , get_type , attributes )
>89	ArgumentList	constructor
>90	Argument	attributes
>91	Identifier	attributes
>92	Argument	get_type
>93	Identifier	get_type
>94	Argument	\"type\"
>95	PrimaryExpression	\"type\"
>96	Argument	constructor
>97	Identifier	constructor
>98	Callee	set_accessor
>99	Identifier	set_accessor
>100	ExpressionStatement	 
>101	AssignmentExpr	attributes = static_cast < v8 
>102	RelationalExpression	static_cast < v8 
>103	RelationalExpression	v8 
>104	InclusiveOrExpression	v8 
>105	Identifier	v8 
>106	Identifier	v8 
>107	Identifier	v8 
>108	Identifier	static_cast
>109	Identifier	attributes
>110	Statement	 
>111	ExpressionStatement	 
>112	CallExpression	constructor -> SetClassName ( symbol_Way )
>113	ArgumentList	symbol_Way
>114	Argument	symbol_Way
>115	Identifier	symbol_Way
>116	Callee	constructor -> SetClassName
>117	PtrMemberAccess	constructor -> SetClassName
>118	Identifier	SetClassName
>119	Identifier	constructor
>120	ExpressionStatement	 
>121	CallExpression	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount ( 1 )
>122	ArgumentList	1
>123	Argument	1
>124	PrimaryExpression	1
>125	Callee	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount
>126	PtrMemberAccess	constructor -> InstanceTemplate ( ) -> SetInternalFieldCount
>127	Identifier	SetInternalFieldCount
>128	CallExpression	constructor -> InstanceTemplate ( )
>129	ArgumentList	 
>130	Callee	constructor -> InstanceTemplate
>131	PtrMemberAccess	constructor -> InstanceTemplate
>132	Identifier	InstanceTemplate
>133	Identifier	constructor
>134	ExpressionStatement	 
>135	CallExpression	constructor -> Inherit ( OSMObjectWrap 
>136	ArgumentList	OSMObjectWrap 
>137	Argument	OSMObjectWrap 
>138	Identifier	OSMObjectWrap 
>139	Callee	constructor -> Inherit
>140	PtrMemberAccess	constructor -> Inherit
>141	Identifier	Inherit
>142	Identifier	constructor
>143	ExpressionStatement	 
>144	CallExpression	New ( v8 
>145	ArgumentList	v8 
>146	Argument	v8 
>147	CallExpression	v8 
>148	ArgumentList	OSMWayWrap 
>149	Argument	OSMWayWrap 
>150	Identifier	OSMWayWrap 
>151	Callee	v8 
>152	Identifier	v8 
>153	Callee	New
>154	Identifier	New
>155	Statement	 
>156	Statement	 
>157	Statement	 
>158	Statement	 
>159	Statement	 
>160	Statement	 
>161	Statement	 
>162	Statement	 
>163	Statement	 
>164	Statement	 
>165	Statement	 
>166	IdentifierDeclStatement	 
>167	IdentifierDecl	scope
>168	Identifier	scope
>169	IdentifierDeclType	v8 
>194	FunctionDef	OSMWayWrap 
>195	ParameterList	const v8 
>196	Parameter	 
>197	Identifier	args
>198	ParameterType	const v8 
>199	ReturnType	v8 
>200	CompoundStatement	 
>201	IfStatement	if ( args . Length ( ) == 1 && args [ 0 ] -> IsExternal ( ) )
>202	ElseStatement	else
>203	CompoundStatement	 
>204	ReturnStatement	 
>205	CallExpression	ThrowException ( v8 
>206	ArgumentList	v8 
>207	Argument	v8 
>208	CallExpression	v8 
>209	ArgumentList	v8 
>210	Argument	v8 
>211	CallExpression	v8 
>212	ArgumentList	\"osmium.Way cannot be created in Javascript\"
>213	Argument	\"osmium.Way cannot be created in Javascript\"
>214	PrimaryExpression	\"osmium.Way cannot be created in Javascript\"
>215	Callee	v8 
>216	Identifier	v8 
>217	Callee	v8 
>218	Identifier	v8 
>219	Callee	ThrowException
>220	Identifier	ThrowException
>221	CompoundStatement	 
>222	ReturnStatement	 
>223	CallExpression	args . This ( )
>224	ArgumentList	 
>225	Callee	args . This
>226	MemberAccess	args . This
>227	Identifier	This
>228	Identifier	args
>229	ExpressionStatement	 
>230	CallExpression	( ext -> Value ( ) ) -> Wrap ( args . This ( ) )
>231	ArgumentList	args . This ( )
>232	Argument	args . This ( )
>233	CallExpression	args . This ( )
>234	ArgumentList	 
>235	Callee	args . This
>236	MemberAccess	args . This
>237	Identifier	This
>238	Identifier	args
>239	Callee	( ext -> Value ( ) ) -> Wrap
>240	PtrMemberAccess	( ext -> Value ( ) ) -> Wrap
>241	Identifier	Wrap
>242	CallExpression	ext -> Value ( )
>243	ArgumentList	 
>244	Callee	ext -> Value
>245	PtrMemberAccess	ext -> Value
>246	Identifier	Value
>247	Identifier	ext
>248	Statement	 
>249	Statement	 
>250	Statement	 
>251	Statement	 
>252	Statement	 
>253	ExpressionStatement	 
>254	CallExpression	Cast ( args [ 0 ] )
>255	ArgumentList	args [ 0 ]
>256	Argument	args [ 0 ]
>257	ArrayIndexing	args [ 0 ]
>258	PrimaryExpression	0
>259	Identifier	args
>260	Callee	Cast
>261	Identifier	Cast
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Condition	 
>282	AndExpression	args . Length ( ) == 1 && args [ 0 ] -> IsExternal ( )
>283	CallExpression	args [ 0 ] -> IsExternal ( )
>284	ArgumentList	 
>285	Callee	args [ 0 ] -> IsExternal
>286	PtrMemberAccess	args [ 0 ] -> IsExternal
>287	Identifier	IsExternal
>288	ArrayIndexing	args [ 0 ]
>289	PrimaryExpression	0
>290	Identifier	args
>291	EqualityExpression	args . Length ( ) == 1
>292	PrimaryExpression	1
>293	CallExpression	args . Length ( )
>294	ArgumentList	 
>295	Callee	args . Length
>296	MemberAccess	args . Length
>297	Identifier	Length
>298	Identifier	args
>314	FunctionDef	OSMWayWrap 
>315	ParameterList	const v8 
>316	Parameter	 
>317	Identifier	args
>318	ParameterType	const v8 
>319	ReturnType	v8 
>320	CompoundStatement	 
>321	BlockStarter	 
>322	CompoundStatement	 
>323	ReturnStatement	return ThrowException ( v8 
>324	CallExpression	ThrowException ( v8 
>325	ArgumentList	v8 
>326	Argument	v8 
>327	CallExpression	v8 
>328	ArgumentList	v8 
>329	Argument	v8 
>330	CallExpression	v8 
>331	ArgumentList	e . what ( )
>332	Argument	e . what ( )
>333	CallExpression	e . what ( )
>334	ArgumentList	 
>335	Callee	e . what
>336	MemberAccess	e . what
>337	Identifier	what
>338	Identifier	e
>339	Callee	v8 
>340	Identifier	v8 
>341	Callee	v8 
>342	Identifier	v8 
>343	Callee	ThrowException
>344	Identifier	ThrowException
>345	Identifier	e
>346	BlockStarter	 
>347	CompoundStatement	 
>348	ReturnStatement	return scope . Close ( node 
>349	CallExpression	scope . Close ( node 
>350	ArgumentList	node 
>351	Argument	node 
>352	PtrMemberAccess	node 
>353	Identifier	handle_
>354	CallExpression	node 
>355	ArgumentList	wkb . data ( )
>356	Argument	wkb . size ( )
>357	CallExpression	wkb . size ( )
>358	ArgumentList	 
>359	Callee	wkb . size
>360	MemberAccess	wkb . size
>361	Identifier	size
>362	Identifier	wkb
>363	Argument	wkb . data ( )
>364	CallExpression	wkb . data ( )
>365	ArgumentList	 
>366	Callee	wkb . data
>367	MemberAccess	wkb . data
>368	Identifier	data
>369	Identifier	wkb
>370	Callee	node 
>371	Identifier	node 
>372	Callee	scope . Close
>373	MemberAccess	scope . Close
>374	Identifier	Close
>375	Identifier	scope
>376	ExpressionStatement	 
>377	CompoundStatement	 
>378	Statement	)
>379	Statement	)
>380	Statement	)
>381	Statement	(
>382	Statement	This
>383	Statement	.
>384	Statement	args
>385	Statement	(
>386	Statement	wrapped
>387	Statement	(
>388	Statement	create_linestring
>389	Statement	.
>390	Statement	wkb_factory
>391	Statement	wkb
>392	Statement	string
>393	Statement	 
>394	Statement	std
>395	IdentifierDeclStatement	 
>396	IdentifierDecl	scope
>397	Identifier	scope
>398	IdentifierDeclType	v8 
>416	FunctionDef	OSMWayWrap 
>417	ParameterList	const v8 
>418	Parameter	 
>419	Identifier	args
>420	ParameterType	const v8 
>421	ReturnType	v8 
>422	CompoundStatement	 
>423	BlockStarter	 
>424	CompoundStatement	 
>425	ReturnStatement	return ThrowException ( v8 
>426	CallExpression	ThrowException ( v8 
>427	ArgumentList	v8 
>428	Argument	v8 
>429	CallExpression	v8 
>430	ArgumentList	v8 
>431	Argument	v8 
>432	CallExpression	v8 
>433	ArgumentList	e . what ( )
>434	Argument	e . what ( )
>435	CallExpression	e . what ( )
>436	ArgumentList	 
>437	Callee	e . what
>438	MemberAccess	e . what
>439	Identifier	what
>440	Identifier	e
>441	Callee	v8 
>442	Identifier	v8 
>443	Callee	v8 
>444	Identifier	v8 
>445	Callee	ThrowException
>446	Identifier	ThrowException
>447	Identifier	e
>448	BlockStarter	 
>449	CompoundStatement	 
>450	ReturnStatement	return scope . Close ( v8 
>451	CallExpression	scope . Close ( v8 
>452	ArgumentList	v8 
>453	Argument	v8 
>454	CallExpression	v8 
>455	ArgumentList	wkt . c_str ( )
>456	Argument	wkt . c_str ( )
>457	CallExpression	wkt . c_str ( )
>458	ArgumentList	 
>459	Callee	wkt . c_str
>460	MemberAccess	wkt . c_str
>461	Identifier	c_str
>462	Identifier	wkt
>463	Callee	v8 
>464	Identifier	v8 
>465	Callee	scope . Close
>466	MemberAccess	scope . Close
>467	Identifier	Close
>468	Identifier	scope
>469	ExpressionStatement	 
>470	CompoundStatement	 
>471	Statement	)
>472	Statement	)
>473	Statement	)
>474	Statement	(
>475	Statement	This
>476	Statement	.
>477	Statement	args
>478	Statement	(
>479	Statement	wrapped
>480	Statement	(
>481	Statement	create_linestring
>482	Statement	.
>483	Statement	wkt_factory
>484	Statement	wkt
>485	Statement	string
>486	Statement	 
>487	Statement	std
>488	IdentifierDeclStatement	 
>489	IdentifierDecl	scope
>490	Identifier	scope
>491	IdentifierDeclType	v8 
>507	FunctionDef	OSMWayWrap 
>508	ParameterList	const v8 
>509	Parameter	 
>510	Identifier	args
>511	ParameterType	const v8 
>512	ReturnType	v8 
>513	CompoundStatement	 
>514	ReturnStatement	 
>515	CallExpression	ThrowException ( v8 
>516	ArgumentList	v8 
>517	Argument	v8 
>518	CallExpression	v8 
>519	ArgumentList	v8 
>520	Argument	v8 
>521	CallExpression	v8 
>522	ArgumentList	\"call node_refs() without parameters or the index of the node you want\"
>523	Argument	\"call node_refs() without parameters or the index of the node you want\"
>524	PrimaryExpression	\"call node_refs() without parameters or the index of the node you want\"
>525	Callee	v8 
>526	Identifier	v8 
>527	Callee	v8 
>528	Identifier	v8 
>529	Callee	ThrowException
>530	Identifier	ThrowException
>531	SwitchStatement	switch ( args . Length ( ) )
>532	CompoundStatement	 
>533	CompoundStatement	 
>534	IfStatement	if ( n < way . nodes ( ) . size ( ) )
>535	ElseStatement	else
>536	CompoundStatement	 
>537	ReturnStatement	 
>538	CallExpression	ThrowException ( v8 
>539	ArgumentList	v8 
>540	Argument	v8 
>541	CallExpression	v8 
>542	ArgumentList	v8 
>543	Argument	v8 
>544	CallExpression	v8 
>545	ArgumentList	\"argument to node_refs() out of range\"
>546	Argument	\"argument to node_refs() out of range\"
>547	PrimaryExpression	\"argument to node_refs() out of range\"
>548	Callee	v8 
>549	Identifier	v8 
>550	Callee	v8 
>551	Identifier	v8 
>552	Callee	ThrowException
>553	Identifier	ThrowException
>554	CompoundStatement	 
>555	ReturnStatement	 
>556	CallExpression	scope . Close ( v8 
>557	ArgumentList	v8 
>558	Argument	v8 
>559	CallExpression	v8 
>560	ArgumentList	way . nodes ( ) [ n ] . ref ( )
>561	Argument	way . nodes ( ) [ n ] . ref ( )
>562	CallExpression	way . nodes ( ) [ n ] . ref ( )
>563	ArgumentList	 
>564	Callee	way . nodes ( ) [ n ] . ref
>565	MemberAccess	way . nodes ( ) [ n ] . ref
>566	Identifier	ref
>567	ArrayIndexing	way . nodes ( ) [ n ]
>568	Identifier	n
>569	CallExpression	way . nodes ( )
>570	ArgumentList	 
>571	Callee	way . nodes
>572	MemberAccess	way . nodes
>573	Identifier	nodes
>574	Identifier	way
>575	Callee	v8 
>576	Identifier	v8 
>577	Callee	scope . Close
>578	MemberAccess	scope . Close
>579	Identifier	Close
>580	Identifier	scope
>581	Condition	 
>582	RelationalExpression	n < way . nodes ( ) . size ( )
>583	CallExpression	way . nodes ( ) . size ( )
>584	ArgumentList	 
>585	Callee	way . nodes ( ) . size
>586	MemberAccess	way . nodes ( ) . size
>587	Identifier	size
>588	CallExpression	way . nodes ( )
>589	ArgumentList	 
>590	Callee	way . nodes
>591	MemberAccess	way . nodes
>592	Identifier	nodes
>593	Identifier	way
>594	Identifier	n
>595	IdentifierDeclStatement	 
>596	IdentifierDecl	n = args [ 0 ] -> ToUint32 ( ) -> Value ( )
>597	AssignmentExpr	n = args [ 0 ] -> ToUint32 ( ) -> Value ( )
>598	CallExpression	args [ 0 ] -> ToUint32 ( ) -> Value ( )
>599	ArgumentList	 
>600	Callee	args [ 0 ] -> ToUint32 ( ) -> Value
>601	PtrMemberAccess	args [ 0 ] -> ToUint32 ( ) -> Value
>602	Identifier	Value
>603	CallExpression	args [ 0 ] -> ToUint32 ( )
>604	ArgumentList	 
>605	Callee	args [ 0 ] -> ToUint32
>606	PtrMemberAccess	args [ 0 ] -> ToUint32
>607	Identifier	ToUint32
>608	ArrayIndexing	args [ 0 ]
>609	PrimaryExpression	0
>610	Identifier	args
>611	Identifier	n
>612	Identifier	n
>613	IdentifierDeclType	uint32_t
>614	IfStatement	if ( ! args [ 0 ] -> IsUint32 ( ) )
>615	CompoundStatement	 
>616	ReturnStatement	 
>617	CallExpression	ThrowException ( v8 
>618	ArgumentList	v8 
>619	Argument	v8 
>620	CallExpression	v8 
>621	ArgumentList	v8 
>622	Argument	v8 
>623	CallExpression	v8 
>624	ArgumentList	\"call node_refs() without parameters or the index of the node you want\"
>625	Argument	\"call node_refs() without parameters or the index of the node you want\"
>626	PrimaryExpression	\"call node_refs() without parameters or the index of the node you want\"
>627	Callee	v8 
>628	Identifier	v8 
>629	Callee	v8 
>630	Identifier	v8 
>631	Callee	ThrowException
>632	Identifier	ThrowException
>633	Condition	 
>634	UnaryOp	! args [ 0 ] -> IsUint32 ( )
>635	CallExpression	args [ 0 ] -> IsUint32 ( )
>636	ArgumentList	 
>637	Callee	args [ 0 ] -> IsUint32
>638	PtrMemberAccess	args [ 0 ] -> IsUint32
>639	Identifier	IsUint32
>640	ArrayIndexing	args [ 0 ]
>641	PrimaryExpression	0
>642	Identifier	args
>643	UnaryOperator	!
>644	Label	 
>645	CompoundStatement	 
>646	ReturnStatement	 
>647	CallExpression	scope . Close ( nodes )
>648	ArgumentList	nodes
>649	Argument	nodes
>650	Identifier	nodes
>651	Callee	scope . Close
>652	MemberAccess	scope . Close
>653	Identifier	Close
>654	Identifier	scope
>655	CompoundStatement	 
>656	ExpressionStatement	 
>657	UnaryExpression	++ i
>658	Identifier	i
>659	IncDec	++
>660	ExpressionStatement	 
>661	CallExpression	nodes -> Set ( i , v8 
>662	ArgumentList	i
>663	Argument	v8 
>664	CallExpression	v8 
>665	ArgumentList	node_ref . ref ( )
>666	Argument	node_ref . ref ( )
>667	CallExpression	node_ref . ref ( )
>668	ArgumentList	 
>669	Callee	node_ref . ref
>670	MemberAccess	node_ref . ref
>671	Identifier	ref
>672	Identifier	node_ref
>673	Callee	v8 
>674	Identifier	v8 
>675	Argument	i
>676	Identifier	i
>677	Callee	nodes -> Set
>678	PtrMemberAccess	nodes -> Set
>679	Identifier	Set
>680	Identifier	nodes
>681	Statement	 
>682	Statement	 
>683	Statement	 
>684	Statement	 
>685	Statement	 
>686	Statement	 
>687	Label	 
>688	Identifier	node_ref
>689	Statement	 
>690	Statement	 
>691	Statement	 
>692	Statement	 
>693	Statement	 
>694	IdentifierDeclStatement	 
>695	IdentifierDecl	i = 0
>696	AssignmentExpr	i = 0
>697	PrimaryExpression	0
>698	Identifier	i
>699	Identifier	i
>700	IdentifierDeclType	int
>701	IdentifierDeclStatement	 
>702	IdentifierDecl	nodes = v8 
>703	AssignmentExpr	nodes = v8 
>704	CallExpression	v8 
>705	ArgumentList	way . nodes ( ) . size ( )
>706	Argument	way . nodes ( ) . size ( )
>707	CallExpression	way . nodes ( ) . size ( )
>708	ArgumentList	 
>709	Callee	way . nodes ( ) . size
>710	MemberAccess	way . nodes ( ) . size
>711	Identifier	size
>712	CallExpression	way . nodes ( )
>713	ArgumentList	 
>714	Callee	way . nodes
>715	MemberAccess	way . nodes
>716	Identifier	nodes
>717	Identifier	way
>718	Callee	v8 
>719	Identifier	v8 
>720	Identifier	nodes
>721	Identifier	nodes
>722	IdentifierDeclType	v8 
>723	Label	 
>724	Condition	 
>725	CallExpression	args . Length ( )
>726	ArgumentList	 
>727	Callee	args . Length
>728	MemberAccess	args . Length
>729	Identifier	Length
>730	Identifier	args
>731	IdentifierDeclStatement	 
>732	IdentifierDecl	& way = wrapped ( args . This ( ) )
>733	AssignmentExpr	& way = wrapped ( args . This ( ) )
>734	CallExpression	wrapped ( args . This ( ) )
>735	ArgumentList	args . This ( )
>736	Argument	args . This ( )
>737	CallExpression	args . This ( )
>738	ArgumentList	 
>739	Callee	args . This
>740	MemberAccess	args . This
>741	Identifier	This
>742	Identifier	args
>743	Callee	wrapped
>744	Identifier	wrapped
>745	Identifier	way
>746	Identifier	way
>747	IdentifierDeclType	const osmium 
>748	IdentifierDeclStatement	 
>749	IdentifierDecl	scope
>750	Identifier	scope
>751	IdentifierDeclType	v8 
>786	FunctionDef	OSMWayWrap 
>787	ParameterList	const v8 
>788	Parameter	 
>789	Identifier	args
>790	ParameterType	const v8 
>791	ReturnType	v8 
>792	CompoundStatement	 
>793	ReturnStatement	 
>794	CallExpression	ThrowException ( v8 
>795	ArgumentList	v8 
>796	Argument	v8 
>797	CallExpression	v8 
>798	ArgumentList	v8 
>799	Argument	v8 
>800	CallExpression	v8 
>801	ArgumentList	\"call node_coordinates() without parameters or the index of the node you want\"
>802	Argument	\"call node_coordinates() without parameters or the index of the node you want\"
>803	PrimaryExpression	\"call node_coordinates() without parameters or the index of the node you want\"
>804	Callee	v8 
>805	Identifier	v8 
>806	Callee	v8 
>807	Identifier	v8 
>808	Callee	ThrowException
>809	Identifier	ThrowException
>810	SwitchStatement	switch ( args . Length ( ) )
>811	CompoundStatement	 
>812	CompoundStatement	 
>813	IfStatement	if ( n < way . nodes ( ) . size ( ) )
>814	ElseStatement	else
>815	CompoundStatement	 
>816	ReturnStatement	 
>817	CallExpression	ThrowException ( v8 
>818	ArgumentList	v8 
>819	Argument	v8 
>820	CallExpression	v8 
>821	ArgumentList	v8 
>822	Argument	v8 
>823	CallExpression	v8 
>824	ArgumentList	\"argument to node_coordinates() out of range\"
>825	Argument	\"argument to node_coordinates() out of range\"
>826	PrimaryExpression	\"argument to node_coordinates() out of range\"
>827	Callee	v8 
>828	Identifier	v8 
>829	Callee	v8 
>830	Identifier	v8 
>831	Callee	ThrowException
>832	Identifier	ThrowException
>833	CompoundStatement	 
>834	IfStatement	if ( location . valid ( ) )
>835	ElseStatement	else
>836	CompoundStatement	 
>837	ReturnStatement	 
>838	CallExpression	scope . Close ( v8 
>839	ArgumentList	v8 
>840	Argument	v8 
>841	CallExpression	v8 
>842	ArgumentList	 
>843	Callee	v8 
>844	Identifier	v8 
>845	Callee	scope . Close
>846	MemberAccess	scope . Close
>847	Identifier	Close
>848	Identifier	scope
>849	CompoundStatement	 
>850	ExpressionStatement	 
>851	Statement	 
>852	Statement	 
>853	Statement	 
>854	Statement	 
>855	Statement	 
>856	Statement	 
>857	Statement	 
>858	Statement	 
>859	Statement	 
>860	Statement	 
>861	Statement	 
>862	Statement	 
>863	Statement	 
>864	Statement	 
>865	Statement	 
>866	Statement	 
>867	Statement	 
>868	Statement	 
>869	Statement	 
>870	Statement	 
>871	Statement	 
>872	Statement	 
>873	Statement	 
>874	Statement	 
>875	Statement	 
>876	Statement	 
>877	IdentifierDeclStatement	 
>878	IdentifierDecl	argv [ 2 ] = { v8 
>879	AssignmentExpr	argv [ 2 ] = { v8 
>880	InitializerList	v8 
>881	CallExpression	v8 
>882	ArgumentList	location . lat ( )
>883	Argument	location . lat ( )
>884	CallExpression	location . lat ( )
>885	ArgumentList	 
>886	Callee	location . lat
>887	MemberAccess	location . lat
>888	Identifier	lat
>889	Identifier	location
>890	Callee	v8 
>891	Identifier	v8 
>892	CallExpression	v8 
>893	ArgumentList	location . lon ( )
>894	Argument	location . lon ( )
>895	CallExpression	location . lon ( )
>896	ArgumentList	 
>897	Callee	location . lon
>898	MemberAccess	location . lon
>899	Identifier	lon
>900	Identifier	location
>901	Callee	v8 
>902	Identifier	v8 
>903	Identifier	argv
>904	PrimaryExpression	2
>905	Identifier	argv
>906	IdentifierDeclType	v8 
>907	Condition	 
>908	CallExpression	location . valid ( )
>909	ArgumentList	 
>910	Callee	location . valid
>911	MemberAccess	location . valid
>912	Identifier	valid
>913	Identifier	location
>914	IdentifierDeclStatement	 
>915	IdentifierDecl	location = way . nodes ( ) [ n ] . location ( )
>916	AssignmentExpr	location = way . nodes ( ) [ n ] . location ( )
>917	CallExpression	way . nodes ( ) [ n ] . location ( )
>918	ArgumentList	 
>919	Callee	way . nodes ( ) [ n ] . location
>920	MemberAccess	way . nodes ( ) [ n ] . location
>921	Identifier	location
>922	ArrayIndexing	way . nodes ( ) [ n ]
>923	Identifier	n
>924	CallExpression	way . nodes ( )
>925	ArgumentList	 
>926	Callee	way . nodes
>927	MemberAccess	way . nodes
>928	Identifier	nodes
>929	Identifier	way
>930	Identifier	location
>931	Identifier	location
>932	IdentifierDeclType	const osmium 
>933	Condition	 
>934	RelationalExpression	n < way . nodes ( ) . size ( )
>935	CallExpression	way . nodes ( ) . size ( )
>936	ArgumentList	 
>937	Callee	way . nodes ( ) . size
>938	MemberAccess	way . nodes ( ) . size
>939	Identifier	size
>940	CallExpression	way . nodes ( )
>941	ArgumentList	 
>942	Callee	way . nodes
>943	MemberAccess	way . nodes
>944	Identifier	nodes
>945	Identifier	way
>946	Identifier	n
>947	IdentifierDeclStatement	 
>948	IdentifierDecl	n = args [ 0 ] -> ToUint32 ( ) -> Value ( )
>949	AssignmentExpr	n = args [ 0 ] -> ToUint32 ( ) -> Value ( )
>950	CallExpression	args [ 0 ] -> ToUint32 ( ) -> Value ( )
>951	ArgumentList	 
>952	Callee	args [ 0 ] -> ToUint32 ( ) -> Value
>953	PtrMemberAccess	args [ 0 ] -> ToUint32 ( ) -> Value
>954	Identifier	Value
>955	CallExpression	args [ 0 ] -> ToUint32 ( )
>956	ArgumentList	 
>957	Callee	args [ 0 ] -> ToUint32
>958	PtrMemberAccess	args [ 0 ] -> ToUint32
>959	Identifier	ToUint32
>960	ArrayIndexing	args [ 0 ]
>961	PrimaryExpression	0
>962	Identifier	args
>963	Identifier	n
>964	Identifier	n
>965	IdentifierDeclType	uint32_t
>966	IfStatement	if ( ! args [ 0 ] -> IsUint32 ( ) )
>967	CompoundStatement	 
>968	ReturnStatement	 
>969	CallExpression	ThrowException ( v8 
>970	ArgumentList	v8 
>971	Argument	v8 
>972	CallExpression	v8 
>973	ArgumentList	v8 
>974	Argument	v8 
>975	CallExpression	v8 
>976	ArgumentList	\"call node_coordinates() without parameters or the index of the node you want\"
>977	Argument	\"call node_coordinates() without parameters or the index of the node you want\"
>978	PrimaryExpression	\"call node_coordinates() without parameters or the index of the node you want\"
>979	Callee	v8 
>980	Identifier	v8 
>981	Callee	v8 
>982	Identifier	v8 
>983	Callee	ThrowException
>984	Identifier	ThrowException
>985	Condition	 
>986	UnaryOp	! args [ 0 ] -> IsUint32 ( )
>987	CallExpression	args [ 0 ] -> IsUint32 ( )
>988	ArgumentList	 
>989	Callee	args [ 0 ] -> IsUint32
>990	PtrMemberAccess	args [ 0 ] -> IsUint32
>991	Identifier	IsUint32
>992	ArrayIndexing	args [ 0 ]
>993	PrimaryExpression	0
>994	Identifier	args
>995	UnaryOperator	!
>996	Label	 
>997	CompoundStatement	 
>998	BlockStarter	 
>999	CompoundStatement	 
>1000	ReturnStatement	return ThrowException ( v8 
>1001	CallExpression	ThrowException ( v8 
>1002	ArgumentList	v8 
>1003	Argument	v8 
>1004	CallExpression	v8 
>1005	ArgumentList	v8 
>1006	Argument	v8 
>1007	CallExpression	v8 
>1008	ArgumentList	\"location of at least one of the nodes in this way not set\"
>1009	Argument	\"location of at least one of the nodes in this way not set\"
>1010	PrimaryExpression	\"location of at least one of the nodes in this way not set\"
>1011	Callee	v8 
>1012	Identifier	v8 
>1013	Callee	v8 
>1014	Identifier	v8 
>1015	Callee	ThrowException
>1016	Identifier	ThrowException
>1017	BlockStarter	 
>1018	CompoundStatement	 
>1019	ReturnStatement	return scope . Close ( nodes ) ;
>1020	CallExpression	scope . Close ( nodes )
>1021	ArgumentList	nodes
>1022	Argument	nodes
>1023	Identifier	nodes
>1024	Callee	scope . Close
>1025	MemberAccess	scope . Close
>1026	Identifier	Close
>1027	Identifier	scope
>1028	CompoundStatement	 
>1029	ExpressionStatement	++ i
>1030	UnaryExpression	++ i
>1031	Identifier	i
>1032	IncDec	++
>1033	ExpressionStatement	 
>1034	Statement	)
>1035	Statement	)
>1036	Statement	argv
>1037	Statement	,
>1038	Statement	2
>1039	Statement	(
>1040	Statement	NewInstance
>1041	Statement	->
>1042	Statement	)
>1043	Statement	cf
>1044	Statement	(
>1045	Statement	Cast
>1046	Statement	 
>1047	Statement	>
>1048	Statement	Function
>1049	Statement	 
>1050	Statement	v8
>1051	Statement	<
>1052	Statement	Local
>1053	Statement	 
>1054	Statement	v8
>1055	Statement	,
>1056	Statement	i
>1057	Statement	(
>1058	Statement	Set
>1059	Statement	->
>1060	Statement	nodes
>1061	IdentifierDeclStatement	v8 
>1062	IdentifierDecl	argv [ 2 ] = { v8 
>1063	AssignmentExpr	argv [ 2 ] = { v8 
>1064	InitializerList	v8 
>1065	CallExpression	v8 
>1066	ArgumentList	location . lat ( )
>1067	Argument	location . lat ( )
>1068	CallExpression	location . lat ( )
>1069	ArgumentList	 
>1070	Callee	location . lat
>1071	MemberAccess	location . lat
>1072	Identifier	lat
>1073	Identifier	location
>1074	Callee	v8 
>1075	Identifier	v8 
>1076	CallExpression	v8 
>1077	ArgumentList	location . lon ( )
>1078	Argument	location . lon ( )
>1079	CallExpression	location . lon ( )
>1080	ArgumentList	 
>1081	Callee	location . lon
>1082	MemberAccess	location . lon
>1083	Identifier	lon
>1084	Identifier	location
>1085	Callee	v8 
>1086	Identifier	v8 
>1087	Identifier	argv
>1088	PrimaryExpression	2
>1089	Identifier	argv
>1090	IdentifierDeclType	v8 
>1091	IdentifierDeclStatement	const osmium 
>1092	IdentifierDecl	location = node_ref . location ( )
>1093	AssignmentExpr	location = node_ref . location ( )
>1094	CallExpression	node_ref . location ( )
>1095	ArgumentList	 
>1096	Callee	node_ref . location
>1097	MemberAccess	node_ref . location
>1098	Identifier	location
>1099	Identifier	node_ref
>1100	Identifier	location
>1101	Identifier	location
>1102	IdentifierDeclType	const osmium 
>1103	Statement	)
>1104	Statement	)
>1105	Statement	(
>1106	Statement	nodes
>1107	Statement	.
>1108	Statement	way
>1109	Label	node_ref 
>1110	Identifier	node_ref
>1111	Statement	&
>1112	Statement	auto
>1113	Statement	const
>1114	Statement	(
>1115	Statement	for
>1116	IdentifierDeclStatement	int i = 0 ;
>1117	IdentifierDecl	i = 0
>1118	AssignmentExpr	i = 0
>1119	PrimaryExpression	0
>1120	Identifier	i
>1121	Identifier	i
>1122	IdentifierDeclType	int
>1123	IdentifierDeclStatement	v8 
>1124	IdentifierDecl	nodes = v8 
>1125	AssignmentExpr	nodes = v8 
>1126	CallExpression	v8 
>1127	ArgumentList	way . nodes ( ) . size ( )
>1128	Argument	way . nodes ( ) . size ( )
>1129	CallExpression	way . nodes ( ) . size ( )
>1130	ArgumentList	 
>1131	Callee	way . nodes ( ) . size
>1132	MemberAccess	way . nodes ( ) . size
>1133	Identifier	size
>1134	CallExpression	way . nodes ( )
>1135	ArgumentList	 
>1136	Callee	way . nodes
>1137	MemberAccess	way . nodes
>1138	Identifier	nodes
>1139	Identifier	way
>1140	Callee	v8 
>1141	Identifier	v8 
>1142	Identifier	nodes
>1143	Identifier	nodes
>1144	IdentifierDeclType	v8 
>1145	Label	 
>1146	Condition	 
>1147	CallExpression	args . Length ( )
>1148	ArgumentList	 
>1149	Callee	args . Length
>1150	MemberAccess	args . Length
>1151	Identifier	Length
>1152	Identifier	args
>1153	IdentifierDeclStatement	 
>1154	IdentifierDecl	& way = wrapped ( args . This ( ) )
>1155	AssignmentExpr	& way = wrapped ( args . This ( ) )
>1156	CallExpression	wrapped ( args . This ( ) )
>1157	ArgumentList	args . This ( )
>1158	Argument	args . This ( )
>1159	CallExpression	args . This ( )
>1160	ArgumentList	 
>1161	Callee	args . This
>1162	MemberAccess	args . This
>1163	Identifier	This
>1164	Identifier	args
>1165	Callee	wrapped
>1166	Identifier	wrapped
>1167	Identifier	way
>1168	Identifier	way
>1169	IdentifierDeclType	const osmium 
>1170	ExpressionStatement	 
>1171	CallExpression	assert ( cf -> IsFunction ( ) )
>1172	ArgumentList	cf -> IsFunction ( )
>1173	Argument	cf -> IsFunction ( )
>1174	CallExpression	cf -> IsFunction ( )
>1175	ArgumentList	 
>1176	Callee	cf -> IsFunction
>1177	PtrMemberAccess	cf -> IsFunction
>1178	Identifier	IsFunction
>1179	Identifier	cf
>1180	Callee	assert
>1181	Identifier	assert
>1182	ExpressionStatement	 
>1183	AssignmentExpr	cf = module -> Get ( symbol_Coordinates )
>1184	CallExpression	module -> Get ( symbol_Coordinates )
>1185	ArgumentList	symbol_Coordinates
>1186	Argument	symbol_Coordinates
>1187	Identifier	symbol_Coordinates
>1188	Callee	module -> Get
>1189	PtrMemberAccess	module -> Get
>1190	Identifier	Get
>1191	Identifier	module
>1192	Identifier	cf
>1193	Statement	 
>1194	IdentifierDeclStatement	 
>1195	IdentifierDecl	scope
>1196	Identifier	scope
>1197	IdentifierDeclType	v8 
<7=13,12,8
<8=9
<9=11,10
<13=166,165,164,163,162,161,160,159,158,157,156,155,143,134,120,111,110,100,87,74,63,52,41,30,14
<14=15
<15=26,16
<16=24,17
<17=18
<18=20,19
<20=21
<21=23,22
<24=25
<26=27
<27=29,28
<30=31
<31=39,32
<32=37,35,33
<33=34
<35=36
<37=38
<39=40
<41=42
<42=50,43
<43=48,46,44
<44=45
<46=47
<48=49
<50=51
<52=53
<53=61,54
<54=59,57,55
<55=56
<57=58
<59=60
<61=62
<63=64
<64=72,65
<65=70,68,66
<66=67
<68=69
<70=71
<72=73
<74=75
<75=85,76
<76=83,81,79,77
<77=78
<79=80
<81=82
<83=84
<85=86
<87=88
<88=98,89
<89=96,94,92,90
<90=91
<92=93
<94=95
<96=97
<98=99
<100=101
<101=109,102
<102=108,103
<103=107,104
<104=106,105
<111=112
<112=116,113
<113=114
<114=115
<116=117
<117=119,118
<120=121
<121=125,122
<122=123
<123=124
<125=126
<126=128,127
<128=130,129
<130=131
<131=133,132
<134=135
<135=139,136
<136=137
<137=138
<139=140
<140=142,141
<143=144
<144=153,145
<145=146
<146=147
<147=151,148
<148=149
<149=150
<151=152
<153=154
<166=167
<167=169,168
<194=200,199,195
<195=196
<196=198,197
<200=201
<201=281,221,202
<202=203
<203=204
<204=205
<205=219,206
<206=207
<207=208
<208=217,209
<209=210
<210=211
<211=215,212
<212=213
<213=214
<215=216
<217=218
<219=220
<221=280,279,278,277,276,275,274,273,272,271,270,269,268,267,266,265,264,263,262,253,252,251,250,249,248,229,222
<222=223
<223=225,224
<225=226
<226=228,227
<229=230
<230=239,231
<231=232
<232=233
<233=235,234
<235=236
<236=238,237
<239=240
<240=242,241
<242=244,243
<244=245
<245=247,246
<253=254
<254=260,255
<255=256
<256=257
<257=259,258
<260=261
<281=282
<282=291,283
<283=285,284
<285=286
<286=288,287
<288=290,289
<291=293,292
<293=295,294
<295=296
<296=298,297
<314=320,319,315
<315=316
<316=318,317
<320=395,346,321
<321=345,322
<322=323
<323=324
<324=343,325
<325=326
<326=327
<327=341,328
<328=329
<329=330
<330=339,331
<331=332
<332=333
<333=335,334
<335=336
<336=338,337
<339=340
<341=342
<343=344
<346=347
<347=394,393,392,391,377,376,348
<348=349
<349=372,350
<350=351
<351=352
<352=354,353
<354=370,355
<355=363,356
<356=357
<357=359,358
<359=360
<360=362,361
<363=364
<364=366,365
<366=367
<367=369,368
<370=371
<372=373
<373=375,374
<377=390,389,388,387,386,385,384,383,382,381,380,379,378
<395=396
<396=398,397
<416=422,421,417
<417=418
<418=420,419
<422=488,448,423
<423=447,424
<424=425
<425=426
<426=445,427
<427=428
<428=429
<429=443,430
<430=431
<431=432
<432=441,433
<433=434
<434=435
<435=437,436
<437=438
<438=440,439
<441=442
<443=444
<445=446
<448=449
<449=487,486,485,484,470,469,450
<450=451
<451=465,452
<452=453
<453=454
<454=463,455
<455=456
<456=457
<457=459,458
<459=460
<460=462,461
<463=464
<465=466
<466=468,467
<470=483,482,481,480,479,478,477,476,475,474,473,472,471
<488=489
<489=491,490
<507=513,512,508
<508=509
<509=511,510
<513=748,731,531,514
<514=515
<515=529,516
<516=517
<517=518
<518=527,519
<519=520
<520=521
<521=525,522
<522=523
<523=524
<525=526
<527=528
<529=530
<531=724,532
<532=723,645,644,533
<533=614,595,534
<534=581,554,535
<535=536
<536=537
<537=538
<538=552,539
<539=540
<540=541
<541=550,542
<542=543
<543=544
<544=548,545
<545=546
<546=547
<548=549
<550=551
<552=553
<554=555
<555=556
<556=577,557
<557=558
<558=559
<559=575,560
<560=561
<561=562
<562=564,563
<564=565
<565=567,566
<567=569,568
<569=571,570
<571=572
<572=574,573
<575=576
<577=578
<578=580,579
<581=582
<582=594,583
<583=585,584
<585=586
<586=588,587
<588=590,589
<590=591
<591=593,592
<595=596
<596=613,612,597
<597=611,598
<598=600,599
<600=601
<601=603,602
<603=605,604
<605=606
<606=608,607
<608=610,609
<614=633,615
<615=616
<616=617
<617=631,618
<618=619
<619=620
<620=629,621
<621=622
<622=623
<623=627,624
<624=625
<625=626
<627=628
<629=630
<631=632
<633=634
<634=643,635
<635=637,636
<637=638
<638=640,639
<640=642,641
<645=701,694,693,692,691,690,689,687,686,685,684,683,682,681,655,646
<646=647
<647=651,648
<648=649
<649=650
<651=652
<652=654,653
<655=660,656
<656=657
<657=659,658
<660=661
<661=677,662
<662=675,663
<663=664
<664=673,665
<665=666
<666=667
<667=669,668
<669=670
<670=672,671
<673=674
<675=676
<677=678
<678=680,679
<687=688
<694=695
<695=700,699,696
<696=698,697
<701=702
<702=722,721,703
<703=720,704
<704=718,705
<705=706
<706=707
<707=709,708
<709=710
<710=712,711
<712=714,713
<714=715
<715=717,716
<718=719
<724=725
<725=727,726
<727=728
<728=730,729
<731=732
<732=747,746,733
<733=745,734
<734=743,735
<735=736
<736=737
<737=739,738
<739=740
<740=742,741
<743=744
<748=749
<749=751,750
<786=792,791,787
<787=788
<788=790,789
<792=1194,1193,1182,1170,1153,810,793
<793=794
<794=808,795
<795=796
<796=797
<797=806,798
<798=799
<799=800
<800=804,801
<801=802
<802=803
<804=805
<806=807
<808=809
<810=1146,811
<811=1145,997,996,812
<812=966,947,813
<813=933,833,814
<814=815
<815=816
<816=817
<817=831,818
<818=819
<819=820
<820=829,821
<821=822
<822=823
<823=827,824
<824=825
<825=826
<827=828
<829=830
<831=832
<833=914,834
<834=907,849,835
<835=836
<836=837
<837=838
<838=845,839
<839=840
<840=841
<841=843,842
<843=844
<845=846
<846=848,847
<849=877,876,875,874,873,872,871,870,869,868,867,866,865,864,863,862,861,860,859,858,857,856,855,854,853,852,851,850
<877=878
<878=906,905,904,879
<879=903,880
<880=892,881
<881=890,882
<882=883
<883=884
<884=886,885
<886=887
<887=889,888
<890=891
<892=901,893
<893=894
<894=895
<895=897,896
<897=898
<898=900,899
<901=902
<907=908
<908=910,909
<910=911
<911=913,912
<914=915
<915=932,931,916
<916=930,917
<917=919,918
<919=920
<920=922,921
<922=924,923
<924=926,925
<926=927
<927=929,928
<933=934
<934=946,935
<935=937,936
<937=938
<938=940,939
<940=942,941
<942=943
<943=945,944
<947=948
<948=965,964,949
<949=963,950
<950=952,951
<952=953
<953=955,954
<955=957,956
<957=958
<958=960,959
<960=962,961
<966=985,967
<967=968
<968=969
<969=983,970
<970=971
<971=972
<972=981,973
<973=974
<974=975
<975=979,976
<976=977
<977=978
<979=980
<981=982
<983=984
<985=986
<986=995,987
<987=989,988
<989=990
<990=992,991
<992=994,993
<997=1017,998
<998=999
<999=1000
<1000=1001
<1001=1015,1002
<1002=1003
<1003=1004
<1004=1013,1005
<1005=1006
<1006=1007
<1007=1011,1008
<1008=1009
<1009=1010
<1011=1012
<1013=1014
<1015=1016
<1017=1018
<1018=1123,1116,1115,1114,1113,1112,1111,1109,1108,1107,1106,1105,1104,1103,1028,1019
<1019=1020
<1020=1024,1021
<1021=1022
<1022=1023
<1024=1025
<1025=1027,1026
<1028=1091,1061,1060,1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1036,1035,1034,1033,1029
<1029=1030
<1030=1032,1031
<1061=1062
<1062=1090,1089,1088,1063
<1063=1087,1064
<1064=1076,1065
<1065=1074,1066
<1066=1067
<1067=1068
<1068=1070,1069
<1070=1071
<1071=1073,1072
<1074=1075
<1076=1085,1077
<1077=1078
<1078=1079
<1079=1081,1080
<1081=1082
<1082=1084,1083
<1085=1086
<1091=1092
<1092=1102,1101,1093
<1093=1100,1094
<1094=1096,1095
<1096=1097
<1097=1099,1098
<1109=1110
<1116=1117
<1117=1122,1121,1118
<1118=1120,1119
<1123=1124
<1124=1144,1143,1125
<1125=1142,1126
<1126=1140,1127
<1127=1128
<1128=1129
<1129=1131,1130
<1131=1132
<1132=1134,1133
<1134=1136,1135
<1136=1137
<1137=1139,1138
<1140=1141
<1146=1147
<1147=1149,1148
<1149=1150
<1150=1152,1151
<1153=1154
<1154=1169,1168,1155
<1155=1167,1156
<1156=1165,1157
<1157=1158
<1158=1159
<1159=1161,1160
<1161=1162
<1162=1164,1163
<1165=1166
<1170=1171
<1171=1180,1172
<1172=1173
<1173=1174
<1174=1176,1175
<1176=1177
<1177=1179,1178
<1180=1181
<1182=1183
<1183=1192,1184
<1184=1188,1185
<1185=1186
<1186=1187
<1188=1189
<1189=1191,1190
<1194=1195
<1195=1197,1196
