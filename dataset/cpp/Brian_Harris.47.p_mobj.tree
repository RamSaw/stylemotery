>9	FunctionDef	P_SetMobjState (mobj_t * mobj , statenum_t state)
>10	ParameterList	mobj_t * mobj , statenum_t state
>11	Parameter	 
>12	Identifier	state
>13	ParameterType	statenum_t
>14	Parameter	 
>15	Identifier	mobj
>16	ParameterType	mobj_t *
>17	ReturnType	qboolean
>18	CompoundStatement	 
>19	ReturnStatement	 
>20	Identifier	true
>21	DoStatement	do
>22	Condition	 
>23	UnaryOp	! mobj -> tics
>24	PtrMemberAccess	mobj -> tics
>25	Identifier	tics
>26	Identifier	mobj
>27	UnaryOperator	!
>28	CompoundStatement	 
>29	ExpressionStatement	 
>30	AssignmentExpr	state = st -> nextstate
>31	PtrMemberAccess	st -> nextstate
>32	Identifier	nextstate
>33	Identifier	st
>34	Identifier	state
>35	IfStatement	if ( st -> action )
>36	ExpressionStatement	 
>37	CallExpression	st -> action ( mobj , NULL )
>38	ArgumentList	mobj
>39	Argument	NULL
>40	Identifier	NULL
>41	Argument	mobj
>42	Identifier	mobj
>43	Callee	st -> action
>44	PtrMemberAccess	st -> action
>45	Identifier	action
>46	Identifier	st
>47	Condition	 
>48	PtrMemberAccess	st -> action
>49	Identifier	action
>50	Identifier	st
>51	ExpressionStatement	 
>52	AssignmentExpr	mobj -> frame = st -> frame
>53	PtrMemberAccess	st -> frame
>54	Identifier	frame
>55	Identifier	st
>56	PtrMemberAccess	mobj -> frame
>57	Identifier	frame
>58	Identifier	mobj
>59	ExpressionStatement	 
>60	AssignmentExpr	mobj -> sprite = st -> sprite
>61	PtrMemberAccess	st -> sprite
>62	Identifier	sprite
>63	Identifier	st
>64	PtrMemberAccess	mobj -> sprite
>65	Identifier	sprite
>66	Identifier	mobj
>67	ExpressionStatement	 
>68	AssignmentExpr	mobj -> tics = st -> tics
>69	PtrMemberAccess	st -> tics
>70	Identifier	tics
>71	Identifier	st
>72	PtrMemberAccess	mobj -> tics
>73	Identifier	tics
>74	Identifier	mobj
>75	ExpressionStatement	 
>76	AssignmentExpr	mobj -> state = st
>77	Identifier	st
>78	PtrMemberAccess	mobj -> state
>79	Identifier	state
>80	Identifier	mobj
>81	ExpressionStatement	 
>82	ArrayIndexing	g -> states [ state ]
>83	Identifier	state
>84	PtrMemberAccess	g -> states
>85	Identifier	states
>86	Identifier	g
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	IfStatement	if ( state == S_NULL )
>92	CompoundStatement	 
>93	ReturnStatement	 
>94	Identifier	false
>95	ExpressionStatement	 
>96	CallExpression	P_RemoveMobj ( mobj )
>97	ArgumentList	mobj
>98	Argument	mobj
>99	Identifier	mobj
>100	Callee	P_RemoveMobj
>101	Identifier	P_RemoveMobj
>102	ExpressionStatement	 
>103	AssignmentExpr	mobj -> state = ( const state_t * ) S_NULL
>104	CastExpression	( const state_t * ) S_NULL
>105	Identifier	S_NULL
>106	CastTarget	const state_t *
>107	PtrMemberAccess	mobj -> state
>108	Identifier	state
>109	Identifier	mobj
>110	Condition	 
>111	EqualityExpression	state == S_NULL
>112	Identifier	S_NULL
>113	Identifier	state
>114	IdentifierDeclStatement	 
>115	IdentifierDecl	* st
>116	Identifier	st
>117	IdentifierDeclType	const state_t *
>142	FunctionDef	P_ExplodeMissile (mobj_t * mo)
>143	ParameterList	mobj_t * mo
>144	Parameter	 
>145	Identifier	mo
>146	ParameterType	mobj_t *
>147	ReturnType	void
>148	CompoundStatement	 
>149	IfStatement	if ( mo -> info -> deathsound )
>150	ExpressionStatement	 
>151	CallExpression	S_StartSound ( mo , mo -> info -> deathsound )
>152	ArgumentList	mo
>153	Argument	mo -> info -> deathsound
>154	PtrMemberAccess	mo -> info -> deathsound
>155	Identifier	deathsound
>156	PtrMemberAccess	mo -> info
>157	Identifier	info
>158	Identifier	mo
>159	Argument	mo
>160	Identifier	mo
>161	Callee	S_StartSound
>162	Identifier	S_StartSound
>163	Condition	 
>164	PtrMemberAccess	mo -> info -> deathsound
>165	Identifier	deathsound
>166	PtrMemberAccess	mo -> info
>167	Identifier	info
>168	Identifier	mo
>169	ExpressionStatement	 
>170	AssignmentExpr	mo -> flags &= ~MF_MISSILE
>171	Identifier	~MF_MISSILE
>172	PtrMemberAccess	mo -> flags
>173	Identifier	flags
>174	Identifier	mo
>175	IfStatement	if ( mo -> tics < 1 )
>176	ExpressionStatement	 
>177	AssignmentExpr	mo -> tics = 1
>178	PrimaryExpression	1
>179	PtrMemberAccess	mo -> tics
>180	Identifier	tics
>181	Identifier	mo
>182	Condition	 
>183	RelationalExpression	mo -> tics < 1
>184	PrimaryExpression	1
>185	PtrMemberAccess	mo -> tics
>186	Identifier	tics
>187	Identifier	mo
>188	ExpressionStatement	 
>189	AssignmentExpr	mo -> tics -= P_Random ( ) & 3
>190	BitAndExpression	P_Random ( ) & 3
>191	PrimaryExpression	3
>192	CallExpression	P_Random ( )
>193	ArgumentList	 
>194	Callee	P_Random
>195	Identifier	P_Random
>196	PtrMemberAccess	mo -> tics
>197	Identifier	tics
>198	Identifier	mo
>199	ExpressionStatement	 
>200	CallExpression	P_SetMobjState ( mo , ( statenum_t ) mobjinfo [ mo -> type ] . deathstate )
>201	ArgumentList	mo
>202	Argument	( statenum_t ) mobjinfo [ mo -> type ] . deathstate
>203	CastExpression	( statenum_t ) mobjinfo [ mo -> type ] . deathstate
>204	MemberAccess	mobjinfo [ mo -> type ] . deathstate
>205	Identifier	deathstate
>206	ArrayIndexing	mobjinfo [ mo -> type ]
>207	PtrMemberAccess	mo -> type
>208	Identifier	type
>209	Identifier	mo
>210	Identifier	mobjinfo
>211	CastTarget	statenum_t
>212	Argument	mo
>213	Identifier	mo
>214	Callee	P_SetMobjState
>215	Identifier	P_SetMobjState
>216	ExpressionStatement	 
>217	AssignmentExpr	mo -> momx = mo -> momy = mo -> momz = 0
>218	AssignmentExpr	mo -> momy = mo -> momz = 0
>219	AssignmentExpr	mo -> momz = 0
>220	PrimaryExpression	0
>221	PtrMemberAccess	mo -> momz
>222	Identifier	momz
>223	Identifier	mo
>224	PtrMemberAccess	mo -> momy
>225	Identifier	momy
>226	Identifier	mo
>227	PtrMemberAccess	mo -> momx
>228	Identifier	momx
>229	Identifier	mo
>251	FunctionDef	P_XYMovement (mobj_t * mo)
>252	ParameterList	mobj_t * mo
>253	Parameter	 
>254	Identifier	mo
>255	ParameterType	mobj_t *
>256	ReturnType	void
>257	CompoundStatement	 
>258	IfStatement	if ( mo -> momx > - STOPSPEED && mo -> momx < STOPSPEED && mo -> momy > - STOPSPEED && mo -> momy < STOPSPEED && ( ! \
>259	ElseStatement	else
>260	CompoundStatement	 
>261	ExpressionStatement	 
>262	AssignmentExpr	mo -> momy = FixedMul ( mo -> momy , FRICTION )
>263	CallExpression	FixedMul ( mo -> momy , FRICTION )
>264	ArgumentList	mo -> momy
>265	Argument	FRICTION
>266	Identifier	FRICTION
>267	Argument	mo -> momy
>268	PtrMemberAccess	mo -> momy
>269	Identifier	momy
>270	Identifier	mo
>271	Callee	FixedMul
>272	Identifier	FixedMul
>273	PtrMemberAccess	mo -> momy
>274	Identifier	momy
>275	Identifier	mo
>276	ExpressionStatement	 
>277	AssignmentExpr	mo -> momx = FixedMul ( mo -> momx , FRICTION )
>278	CallExpression	FixedMul ( mo -> momx , FRICTION )
>279	ArgumentList	mo -> momx
>280	Argument	FRICTION
>281	Identifier	FRICTION
>282	Argument	mo -> momx
>283	PtrMemberAccess	mo -> momx
>284	Identifier	momx
>285	Identifier	mo
>286	Callee	FixedMul
>287	Identifier	FixedMul
>288	PtrMemberAccess	mo -> momx
>289	Identifier	momx
>290	Identifier	mo
>291	CompoundStatement	 
>292	ExpressionStatement	 
>293	AssignmentExpr	mo -> momy = 0
>294	PrimaryExpression	0
>295	PtrMemberAccess	mo -> momy
>296	Identifier	momy
>297	Identifier	mo
>298	ExpressionStatement	 
>299	AssignmentExpr	mo -> momx = 0
>300	PrimaryExpression	0
>301	PtrMemberAccess	mo -> momx
>302	Identifier	momx
>303	Identifier	mo
>304	ExpressionStatement	 
>305	CallExpression	P_SetMobjState ( player -> mo , S_PLAY )
>306	ArgumentList	player -> mo
>307	Argument	S_PLAY
>308	Identifier	S_PLAY
>309	Argument	player -> mo
>310	PtrMemberAccess	player -> mo
>311	Identifier	mo
>312	Identifier	player
>313	Callee	P_SetMobjState
>314	Identifier	P_SetMobjState
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>323	Statement	 
>324	Statement	 
>325	Statement	 
>326	Statement	 
>327	Statement	 
>328	Statement	 
>329	Statement	 
>330	Statement	 
>331	Statement	 
>332	Statement	 
>333	Statement	 
>334	Statement	 
>335	Statement	 
>336	Statement	 
>337	Statement	 
>338	Statement	 
>339	Statement	 
>340	Statement	 
>341	Condition	 
>342	AndExpression	mo -> momx > - STOPSPEED && mo -> momx < STOPSPEED && mo -> momy > - STOPSPEED && mo -> momy < STOPSPEED && ( ! \
>343	AndExpression	mo -> momx < STOPSPEED && mo -> momy > - STOPSPEED && mo -> momy < STOPSPEED && ( ! player || ( player \
>344	AndExpression	mo -> momy > - STOPSPEED && mo -> momy < STOPSPEED && ( ! player || ( player -> cmd . forwardmove == \
>345	AndExpression	mo -> momy < STOPSPEED && ( ! player || ( player -> cmd . forwardmove == 0 && player -> cmd . sidemove == \
>346	OrExpression	! player || ( player -> cmd . forwardmove == 0 && player -> cmd . sidemove == 0 )
>347	AndExpression	player -> cmd . forwardmove == 0 && player -> cmd . sidemove == 0
>348	EqualityExpression	player -> cmd . sidemove == 0
>349	PrimaryExpression	0
>350	MemberAccess	player -> cmd . sidemove
>351	Identifier	sidemove
>352	PtrMemberAccess	player -> cmd
>353	Identifier	cmd
>354	Identifier	player
>355	EqualityExpression	player -> cmd . forwardmove == 0
>356	PrimaryExpression	0
>357	MemberAccess	player -> cmd . forwardmove
>358	Identifier	forwardmove
>359	PtrMemberAccess	player -> cmd
>360	Identifier	cmd
>361	Identifier	player
>362	UnaryOp	! player
>363	Identifier	player
>364	UnaryOperator	!
>365	RelationalExpression	mo -> momy < STOPSPEED
>366	Identifier	STOPSPEED
>367	PtrMemberAccess	mo -> momy
>368	Identifier	momy
>369	Identifier	mo
>370	RelationalExpression	mo -> momy > - STOPSPEED
>371	UnaryOp	- STOPSPEED
>372	Identifier	STOPSPEED
>373	UnaryOperator	-
>374	PtrMemberAccess	mo -> momy
>375	Identifier	momy
>376	Identifier	mo
>377	RelationalExpression	mo -> momx < STOPSPEED
>378	Identifier	STOPSPEED
>379	PtrMemberAccess	mo -> momx
>380	Identifier	momx
>381	Identifier	mo
>382	RelationalExpression	mo -> momx > - STOPSPEED
>383	UnaryOp	- STOPSPEED
>384	Identifier	STOPSPEED
>385	UnaryOperator	-
>386	PtrMemberAccess	mo -> momx
>387	Identifier	momx
>388	Identifier	mo
>389	IfStatement	if ( mo -> flags & MF_CORPSE )
>390	CompoundStatement	 
>391	IfStatement	if ( mo -> momx > FRACUNIT / 4 || mo -> momx < - FRACUNIT / 4 || mo -> momy > FRACUNIT / 4 || mo -> momy < - FRACUNIT / \
>392	CompoundStatement	 
>393	IfStatement	if ( mo -> floorz != mo -> subsector -> sector -> floorheight )
>394	ReturnStatement	 
>395	Condition	 
>396	EqualityExpression	mo -> floorz != mo -> subsector -> sector -> floorheight
>397	PtrMemberAccess	mo -> subsector -> sector -> floorheight
>398	Identifier	floorheight
>399	PtrMemberAccess	mo -> subsector -> sector
>400	Identifier	sector
>401	PtrMemberAccess	mo -> subsector
>402	Identifier	subsector
>403	Identifier	mo
>404	PtrMemberAccess	mo -> floorz
>405	Identifier	floorz
>406	Identifier	mo
>407	Condition	 
>408	OrExpression	mo -> momx > FRACUNIT / 4 || mo -> momx < - FRACUNIT / 4 || mo -> momy > FRACUNIT / 4 || mo -> momy < \
>409	OrExpression	mo -> momx < - FRACUNIT / 4 || mo -> momy > FRACUNIT / 4 || mo -> momy < - FRACUNIT / 4
>410	OrExpression	mo -> momy > FRACUNIT / 4 || mo -> momy < - FRACUNIT / 4
>411	RelationalExpression	mo -> momy < - FRACUNIT / 4
>412	MultiplicativeExpression	- FRACUNIT / 4
>413	PrimaryExpression	4
>414	UnaryOp	- FRACUNIT
>415	Identifier	FRACUNIT
>416	UnaryOperator	-
>417	PtrMemberAccess	mo -> momy
>418	Identifier	momy
>419	Identifier	mo
>420	RelationalExpression	mo -> momy > FRACUNIT / 4
>421	MultiplicativeExpression	FRACUNIT / 4
>422	PrimaryExpression	4
>423	Identifier	FRACUNIT
>424	PtrMemberAccess	mo -> momy
>425	Identifier	momy
>426	Identifier	mo
>427	RelationalExpression	mo -> momx < - FRACUNIT / 4
>428	MultiplicativeExpression	- FRACUNIT / 4
>429	PrimaryExpression	4
>430	UnaryOp	- FRACUNIT
>431	Identifier	FRACUNIT
>432	UnaryOperator	-
>433	PtrMemberAccess	mo -> momx
>434	Identifier	momx
>435	Identifier	mo
>436	RelationalExpression	mo -> momx > FRACUNIT / 4
>437	MultiplicativeExpression	FRACUNIT / 4
>438	PrimaryExpression	4
>439	Identifier	FRACUNIT
>440	PtrMemberAccess	mo -> momx
>441	Identifier	momx
>442	Identifier	mo
>443	Condition	 
>444	BitAndExpression	mo -> flags & MF_CORPSE
>445	Identifier	MF_CORPSE
>446	PtrMemberAccess	mo -> flags
>447	Identifier	flags
>448	Identifier	mo
>449	IfStatement	if ( mo -> z > mo -> floorz )
>450	ReturnStatement	 
>451	Condition	 
>452	RelationalExpression	mo -> z > mo -> floorz
>453	PtrMemberAccess	mo -> floorz
>454	Identifier	floorz
>455	Identifier	mo
>456	PtrMemberAccess	mo -> z
>457	Identifier	z
>458	Identifier	mo
>459	IfStatement	if ( mo -> flags & ( MF_MISSILE | MF_SKULLFLY ) )
>460	ReturnStatement	 
>461	Condition	 
>462	BitAndExpression	mo -> flags & ( MF_MISSILE | MF_SKULLFLY )
>463	InclusiveOrExpression	MF_MISSILE | MF_SKULLFLY
>464	Identifier	MF_SKULLFLY
>465	Identifier	MF_MISSILE
>466	PtrMemberAccess	mo -> flags
>467	Identifier	flags
>468	Identifier	mo
>469	IfStatement	if ( player && player -> cheats & CF_NOMOMENTUM )
>470	CompoundStatement	 
>471	ReturnStatement	 
>472	ExpressionStatement	 
>473	AssignmentExpr	mo -> momx = mo -> momy = 0
>474	AssignmentExpr	mo -> momy = 0
>475	PrimaryExpression	0
>476	PtrMemberAccess	mo -> momy
>477	Identifier	momy
>478	Identifier	mo
>479	PtrMemberAccess	mo -> momx
>480	Identifier	momx
>481	Identifier	mo
>482	Condition	 
>483	AndExpression	player && player -> cheats & CF_NOMOMENTUM
>484	BitAndExpression	player -> cheats & CF_NOMOMENTUM
>485	Identifier	CF_NOMOMENTUM
>486	PtrMemberAccess	player -> cheats
>487	Identifier	cheats
>488	Identifier	player
>489	Identifier	player
>490	DoStatement	do
>491	Condition	 
>492	OrExpression	xmove || ymove
>493	Identifier	ymove
>494	Identifier	xmove
>495	CompoundStatement	 
>496	IfStatement	if ( ! P_TryMove ( mo , ptryx , ptryy ) )
>497	CompoundStatement	 
>498	IfStatement	if ( mo -> player )
>499	ElseStatement	else
>500	IfStatement	if ( mo -> flags & MF_MISSILE )
>501	ElseStatement	else
>502	ExpressionStatement	 
>503	AssignmentExpr	mo -> momx = mo -> momy = 0
>504	AssignmentExpr	mo -> momy = 0
>505	PrimaryExpression	0
>506	PtrMemberAccess	mo -> momy
>507	Identifier	momy
>508	Identifier	mo
>509	PtrMemberAccess	mo -> momx
>510	Identifier	momx
>511	Identifier	mo
>512	CompoundStatement	 
>513	ExpressionStatement	 
>514	CallExpression	P_ExplodeMissile ( mo )
>515	ArgumentList	mo
>516	Argument	mo
>517	Identifier	mo
>518	Callee	P_ExplodeMissile
>519	Identifier	P_ExplodeMissile
>520	CompoundStatement	 
>521	ReturnStatement	 
>522	ExpressionStatement	 
>523	CallExpression	P_RemoveMobj ( mo )
>524	ArgumentList	mo
>525	Argument	mo
>526	Identifier	mo
>527	Callee	P_RemoveMobj
>528	Identifier	P_RemoveMobj
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>533	Statement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	Statement	 
>538	Statement	 
>539	Statement	 
>540	Statement	 
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Condition	 
>558	BitAndExpression	mo -> flags & MF_MISSILE
>559	Identifier	MF_MISSILE
>560	PtrMemberAccess	mo -> flags
>561	Identifier	flags
>562	Identifier	mo
>563	CompoundStatement	 
>564	ExpressionStatement	 
>565	CallExpression	P_SlideMove ( mo )
>566	ArgumentList	mo
>567	Argument	mo
>568	Identifier	mo
>569	Callee	P_SlideMove
>570	Identifier	P_SlideMove
>571	Condition	 
>572	PtrMemberAccess	mo -> player
>573	Identifier	player
>574	Identifier	mo
>575	Condition	 
>576	UnaryOp	! P_TryMove ( mo , ptryx , ptryy )
>577	CallExpression	P_TryMove ( mo , ptryx , ptryy )
>578	ArgumentList	mo
>579	Argument	ptryy
>580	Identifier	ptryy
>581	Argument	ptryx
>582	Identifier	ptryx
>583	Argument	mo
>584	Identifier	mo
>585	Callee	P_TryMove
>586	Identifier	P_TryMove
>587	UnaryOperator	!
>588	IfStatement	if ( xmove > MAXMOVE / 2 || ymove > MAXMOVE / 2 )
>589	ElseStatement	else
>590	CompoundStatement	 
>591	ExpressionStatement	 
>592	AssignmentExpr	xmove = ymove = 0
>593	AssignmentExpr	ymove = 0
>594	PrimaryExpression	0
>595	Identifier	ymove
>596	Identifier	xmove
>597	ExpressionStatement	 
>598	AssignmentExpr	ptryy = mo -> y + ymove
>599	AdditiveExpression	mo -> y + ymove
>600	Identifier	ymove
>601	PtrMemberAccess	mo -> y
>602	Identifier	y
>603	Identifier	mo
>604	Identifier	ptryy
>605	ExpressionStatement	 
>606	AssignmentExpr	ptryx = mo -> x + xmove
>607	AdditiveExpression	mo -> x + xmove
>608	Identifier	xmove
>609	PtrMemberAccess	mo -> x
>610	Identifier	x
>611	Identifier	mo
>612	Identifier	ptryx
>613	CompoundStatement	 
>614	ExpressionStatement	 
>615	AssignmentExpr	ymove >>= 1
>616	PrimaryExpression	1
>617	Identifier	ymove
>618	ExpressionStatement	 
>619	AssignmentExpr	xmove >>= 1
>620	PrimaryExpression	1
>621	Identifier	xmove
>622	ExpressionStatement	 
>623	AssignmentExpr	ptryy = mo -> y + ymove / 2
>624	AdditiveExpression	mo -> y + ymove / 2
>625	MultiplicativeExpression	ymove / 2
>626	PrimaryExpression	2
>627	Identifier	ymove
>628	PtrMemberAccess	mo -> y
>629	Identifier	y
>630	Identifier	mo
>631	Identifier	ptryy
>632	ExpressionStatement	 
>633	AssignmentExpr	ptryx = mo -> x + xmove / 2
>634	AdditiveExpression	mo -> x + xmove / 2
>635	MultiplicativeExpression	xmove / 2
>636	PrimaryExpression	2
>637	Identifier	xmove
>638	PtrMemberAccess	mo -> x
>639	Identifier	x
>640	Identifier	mo
>641	Identifier	ptryx
>642	Condition	 
>643	OrExpression	xmove > MAXMOVE / 2 || ymove > MAXMOVE / 2
>644	RelationalExpression	ymove > MAXMOVE / 2
>645	MultiplicativeExpression	MAXMOVE / 2
>646	PrimaryExpression	2
>647	Identifier	MAXMOVE
>648	Identifier	ymove
>649	RelationalExpression	xmove > MAXMOVE / 2
>650	MultiplicativeExpression	MAXMOVE / 2
>651	PrimaryExpression	2
>652	Identifier	MAXMOVE
>653	Identifier	xmove
>654	ExpressionStatement	 
>655	AssignmentExpr	ymove = mo -> momy
>656	PtrMemberAccess	mo -> momy
>657	Identifier	momy
>658	Identifier	mo
>659	Identifier	ymove
>660	ExpressionStatement	 
>661	AssignmentExpr	xmove = mo -> momx
>662	PtrMemberAccess	mo -> momx
>663	Identifier	momx
>664	Identifier	mo
>665	Identifier	xmove
>666	IfStatement	if ( mo -> momy > MAXMOVE )
>667	ElseStatement	else
>668	IfStatement	if ( mo -> momy < - MAXMOVE )
>669	ExpressionStatement	 
>670	AssignmentExpr	mo -> momy = - MAXMOVE
>671	UnaryOp	- MAXMOVE
>672	Identifier	MAXMOVE
>673	UnaryOperator	-
>674	PtrMemberAccess	mo -> momy
>675	Identifier	momy
>676	Identifier	mo
>677	Condition	 
>678	RelationalExpression	mo -> momy < - MAXMOVE
>679	UnaryOp	- MAXMOVE
>680	Identifier	MAXMOVE
>681	UnaryOperator	-
>682	PtrMemberAccess	mo -> momy
>683	Identifier	momy
>684	Identifier	mo
>685	ExpressionStatement	 
>686	AssignmentExpr	mo -> momy = MAXMOVE
>687	Identifier	MAXMOVE
>688	PtrMemberAccess	mo -> momy
>689	Identifier	momy
>690	Identifier	mo
>691	Condition	 
>692	RelationalExpression	mo -> momy > MAXMOVE
>693	Identifier	MAXMOVE
>694	PtrMemberAccess	mo -> momy
>695	Identifier	momy
>696	Identifier	mo
>697	IfStatement	if ( mo -> momx > MAXMOVE )
>698	ElseStatement	else
>699	IfStatement	if ( mo -> momx < - MAXMOVE )
>700	ExpressionStatement	 
>701	AssignmentExpr	mo -> momx = - MAXMOVE
>702	UnaryOp	- MAXMOVE
>703	Identifier	MAXMOVE
>704	UnaryOperator	-
>705	PtrMemberAccess	mo -> momx
>706	Identifier	momx
>707	Identifier	mo
>708	Condition	 
>709	RelationalExpression	mo -> momx < - MAXMOVE
>710	UnaryOp	- MAXMOVE
>711	Identifier	MAXMOVE
>712	UnaryOperator	-
>713	PtrMemberAccess	mo -> momx
>714	Identifier	momx
>715	Identifier	mo
>716	ExpressionStatement	 
>717	AssignmentExpr	mo -> momx = MAXMOVE
>718	Identifier	MAXMOVE
>719	PtrMemberAccess	mo -> momx
>720	Identifier	momx
>721	Identifier	mo
>722	Condition	 
>723	RelationalExpression	mo -> momx > MAXMOVE
>724	Identifier	MAXMOVE
>725	PtrMemberAccess	mo -> momx
>726	Identifier	momx
>727	Identifier	mo
>728	ExpressionStatement	 
>729	AssignmentExpr	player = mo -> player
>730	PtrMemberAccess	mo -> player
>731	Identifier	player
>732	Identifier	mo
>733	Identifier	player
>734	IfStatement	if ( ! mo -> momx && ! mo -> momy )
>735	CompoundStatement	 
>736	ReturnStatement	 
>737	IfStatement	if ( mo -> flags & MF_SKULLFLY )
>738	CompoundStatement	 
>739	ExpressionStatement	 
>740	CallExpression	P_SetMobjState ( mo , ( statenum_t ) mo -> info -> spawnstate )
>741	ArgumentList	mo
>742	Argument	( statenum_t ) mo -> info -> spawnstate
>743	CastExpression	( statenum_t ) mo -> info -> spawnstate
>744	PtrMemberAccess	mo -> info -> spawnstate
>745	Identifier	spawnstate
>746	PtrMemberAccess	mo -> info
>747	Identifier	info
>748	Identifier	mo
>749	CastTarget	statenum_t
>750	Argument	mo
>751	Identifier	mo
>752	Callee	P_SetMobjState
>753	Identifier	P_SetMobjState
>754	ExpressionStatement	 
>755	AssignmentExpr	mo -> momx = mo -> momy = mo -> momz = 0
>756	AssignmentExpr	mo -> momy = mo -> momz = 0
>757	AssignmentExpr	mo -> momz = 0
>758	PrimaryExpression	0
>759	PtrMemberAccess	mo -> momz
>760	Identifier	momz
>761	Identifier	mo
>762	PtrMemberAccess	mo -> momy
>763	Identifier	momy
>764	Identifier	mo
>765	PtrMemberAccess	mo -> momx
>766	Identifier	momx
>767	Identifier	mo
>768	ExpressionStatement	 
>769	AssignmentExpr	mo -> flags &= ~MF_SKULLFLY
>770	Identifier	~MF_SKULLFLY
>771	PtrMemberAccess	mo -> flags
>772	Identifier	flags
>773	Identifier	mo
>774	Condition	 
>775	BitAndExpression	mo -> flags & MF_SKULLFLY
>776	Identifier	MF_SKULLFLY
>777	PtrMemberAccess	mo -> flags
>778	Identifier	flags
>779	Identifier	mo
>780	Condition	 
>781	AndExpression	! mo -> momx && ! mo -> momy
>782	UnaryOp	! mo -> momy
>783	PtrMemberAccess	mo -> momy
>784	Identifier	momy
>785	Identifier	mo
>786	UnaryOperator	!
>787	UnaryOp	! mo -> momx
>788	PtrMemberAccess	mo -> momx
>789	Identifier	momx
>790	Identifier	mo
>791	UnaryOperator	!
>792	IdentifierDeclStatement	 
>793	IdentifierDecl	ymove
>794	Identifier	ymove
>795	IdentifierDeclType	fixed_t
>796	IdentifierDeclStatement	 
>797	IdentifierDecl	xmove
>798	Identifier	xmove
>799	IdentifierDeclType	fixed_t
>800	IdentifierDeclStatement	 
>801	IdentifierDecl	* player
>802	Identifier	player
>803	IdentifierDeclType	player_t *
>804	IdentifierDeclStatement	 
>805	IdentifierDecl	ptryy
>806	Identifier	ptryy
>807	IdentifierDeclType	fixed_t
>808	IdentifierDeclStatement	 
>809	IdentifierDecl	ptryx
>810	Identifier	ptryx
>811	IdentifierDeclType	fixed_t
>860	FunctionDef	P_ZMovement (mobj_t * mo)
>861	ParameterList	mobj_t * mo
>862	Parameter	 
>863	Identifier	mo
>864	ParameterType	mobj_t *
>865	ReturnType	void
>866	CompoundStatement	 
>867	IfStatement	if ( mo -> z + mo -> height > mo -> ceilingz )
>868	CompoundStatement	 
>869	IfStatement	if ( ( mo -> flags & MF_MISSILE ) && ! ( mo -> flags & MF_NOCLIP ) )
>870	CompoundStatement	 
>871	ReturnStatement	 
>872	ExpressionStatement	 
>873	CallExpression	P_ExplodeMissile ( mo )
>874	ArgumentList	mo
>875	Argument	mo
>876	Identifier	mo
>877	Callee	P_ExplodeMissile
>878	Identifier	P_ExplodeMissile
>879	Condition	 
>880	AndExpression	( mo -> flags & MF_MISSILE ) && ! ( mo -> flags & MF_NOCLIP )
>881	UnaryOp	! ( mo -> flags & MF_NOCLIP )
>882	BitAndExpression	mo -> flags & MF_NOCLIP
>883	Identifier	MF_NOCLIP
>884	PtrMemberAccess	mo -> flags
>885	Identifier	flags
>886	Identifier	mo
>887	UnaryOperator	!
>888	BitAndExpression	mo -> flags & MF_MISSILE
>889	Identifier	MF_MISSILE
>890	PtrMemberAccess	mo -> flags
>891	Identifier	flags
>892	Identifier	mo
>893	IfStatement	if ( mo -> flags & MF_SKULLFLY )
>894	CompoundStatement	 
>895	ExpressionStatement	 
>896	AssignmentExpr	mo -> momz = - mo -> momz
>897	UnaryOp	- mo -> momz
>898	PtrMemberAccess	mo -> momz
>899	Identifier	momz
>900	Identifier	mo
>901	UnaryOperator	-
>902	PtrMemberAccess	mo -> momz
>903	Identifier	momz
>904	Identifier	mo
>905	Condition	 
>906	BitAndExpression	mo -> flags & MF_SKULLFLY
>907	Identifier	MF_SKULLFLY
>908	PtrMemberAccess	mo -> flags
>909	Identifier	flags
>910	Identifier	mo
>911	CompoundStatement	 
>912	ExpressionStatement	 
>913	AssignmentExpr	mo -> z = mo -> ceilingz - mo -> height
>914	AdditiveExpression	mo -> ceilingz - mo -> height
>915	PtrMemberAccess	mo -> height
>916	Identifier	height
>917	Identifier	mo
>918	PtrMemberAccess	mo -> ceilingz
>919	Identifier	ceilingz
>920	Identifier	mo
>921	PtrMemberAccess	mo -> z
>922	Identifier	z
>923	Identifier	mo
>924	IfStatement	if ( mo -> momz > 0 )
>925	ExpressionStatement	 
>926	AssignmentExpr	mo -> momz = 0
>927	PrimaryExpression	0
>928	PtrMemberAccess	mo -> momz
>929	Identifier	momz
>930	Identifier	mo
>931	Condition	 
>932	RelationalExpression	mo -> momz > 0
>933	PrimaryExpression	0
>934	PtrMemberAccess	mo -> momz
>935	Identifier	momz
>936	Identifier	mo
>937	Condition	 
>938	RelationalExpression	mo -> z + mo -> height > mo -> ceilingz
>939	PtrMemberAccess	mo -> ceilingz
>940	Identifier	ceilingz
>941	Identifier	mo
>942	AdditiveExpression	mo -> z + mo -> height
>943	PtrMemberAccess	mo -> height
>944	Identifier	height
>945	Identifier	mo
>946	PtrMemberAccess	mo -> z
>947	Identifier	z
>948	Identifier	mo
>949	IfStatement	if ( mo -> z <= mo -> floorz )
>950	ElseStatement	else
>951	IfStatement	if ( ! ( mo -> flags & MF_NOGRAVITY ) )
>952	CompoundStatement	 
>953	IfStatement	if ( mo -> momz == 0 )
>954	ElseStatement	else
>955	ExpressionStatement	 
>956	AssignmentExpr	mo -> momz -= GRAVITY
>957	Identifier	GRAVITY
>958	PtrMemberAccess	mo -> momz
>959	Identifier	momz
>960	Identifier	mo
>961	ExpressionStatement	 
>962	AssignmentExpr	mo -> momz = - GRAVITY * 2
>963	MultiplicativeExpression	- GRAVITY * 2
>964	PrimaryExpression	2
>965	UnaryOp	- GRAVITY
>966	Identifier	GRAVITY
>967	UnaryOperator	-
>968	PtrMemberAccess	mo -> momz
>969	Identifier	momz
>970	Identifier	mo
>971	Condition	 
>972	EqualityExpression	mo -> momz == 0
>973	PrimaryExpression	0
>974	PtrMemberAccess	mo -> momz
>975	Identifier	momz
>976	Identifier	mo
>977	Condition	 
>978	UnaryOp	! ( mo -> flags & MF_NOGRAVITY )
>979	BitAndExpression	mo -> flags & MF_NOGRAVITY
>980	Identifier	MF_NOGRAVITY
>981	PtrMemberAccess	mo -> flags
>982	Identifier	flags
>983	Identifier	mo
>984	UnaryOperator	!
>985	CompoundStatement	 
>986	IfStatement	if ( ( mo -> flags & MF_MISSILE ) && ! ( mo -> flags & MF_NOCLIP ) )
>987	CompoundStatement	 
>988	ReturnStatement	 
>989	ExpressionStatement	 
>990	CallExpression	P_ExplodeMissile ( mo )
>991	ArgumentList	mo
>992	Argument	mo
>993	Identifier	mo
>994	Callee	P_ExplodeMissile
>995	Identifier	P_ExplodeMissile
>996	Condition	 
>997	AndExpression	( mo -> flags & MF_MISSILE ) && ! ( mo -> flags & MF_NOCLIP )
>998	UnaryOp	! ( mo -> flags & MF_NOCLIP )
>999	BitAndExpression	mo -> flags & MF_NOCLIP
>1000	Identifier	MF_NOCLIP
>1001	PtrMemberAccess	mo -> flags
>1002	Identifier	flags
>1003	Identifier	mo
>1004	UnaryOperator	!
>1005	BitAndExpression	mo -> flags & MF_MISSILE
>1006	Identifier	MF_MISSILE
>1007	PtrMemberAccess	mo -> flags
>1008	Identifier	flags
>1009	Identifier	mo
>1010	ExpressionStatement	 
>1011	AssignmentExpr	mo -> z = mo -> floorz
>1012	PtrMemberAccess	mo -> floorz
>1013	Identifier	floorz
>1014	Identifier	mo
>1015	PtrMemberAccess	mo -> z
>1016	Identifier	z
>1017	Identifier	mo
>1018	IfStatement	if ( mo -> momz < 0 )
>1019	CompoundStatement	 
>1020	ExpressionStatement	 
>1021	AssignmentExpr	mo -> momz = 0
>1022	PrimaryExpression	0
>1023	PtrMemberAccess	mo -> momz
>1024	Identifier	momz
>1025	Identifier	mo
>1026	IfStatement	if ( mo -> player && mo -> momz < - GRAVITY * 8 )
>1027	CompoundStatement	 
>1028	ExpressionStatement	 
>1029	CallExpression	S_StartSound ( mo , sfx_oof )
>1030	ArgumentList	mo
>1031	Argument	sfx_oof
>1032	Identifier	sfx_oof
>1033	Argument	mo
>1034	Identifier	mo
>1035	Callee	S_StartSound
>1036	Identifier	S_StartSound
>1037	Statement	 
>1038	Statement	 
>1039	Statement	 
>1040	Statement	 
>1041	Statement	 
>1042	Statement	 
>1043	Statement	 
>1044	Statement	 
>1045	Statement	 
>1046	Statement	 
>1047	Statement	 
>1048	Statement	 
>1049	Statement	 
>1050	Statement	 
>1051	Statement	 
>1052	Statement	 
>1053	Statement	 
>1054	Statement	 
>1055	Statement	 
>1056	Statement	 
>1057	Statement	 
>1058	Statement	 
>1059	ExpressionStatement	 
>1060	AssignmentExpr	mo -> player -> deltaviewheight = mo -> momz >> 3
>1061	ShiftExpression	mo -> momz >> 3
>1062	PrimaryExpression	3
>1063	PtrMemberAccess	mo -> momz
>1064	Identifier	momz
>1065	Identifier	mo
>1066	PtrMemberAccess	mo -> player -> deltaviewheight
>1067	Identifier	deltaviewheight
>1068	PtrMemberAccess	mo -> player
>1069	Identifier	player
>1070	Identifier	mo
>1071	Condition	 
>1072	AndExpression	mo -> player && mo -> momz < - GRAVITY * 8
>1073	RelationalExpression	mo -> momz < - GRAVITY * 8
>1074	MultiplicativeExpression	- GRAVITY * 8
>1075	PrimaryExpression	8
>1076	UnaryOp	- GRAVITY
>1077	Identifier	GRAVITY
>1078	UnaryOperator	-
>1079	PtrMemberAccess	mo -> momz
>1080	Identifier	momz
>1081	Identifier	mo
>1082	PtrMemberAccess	mo -> player
>1083	Identifier	player
>1084	Identifier	mo
>1085	Condition	 
>1086	RelationalExpression	mo -> momz < 0
>1087	PrimaryExpression	0
>1088	PtrMemberAccess	mo -> momz
>1089	Identifier	momz
>1090	Identifier	mo
>1091	IfStatement	if ( mo -> flags & MF_SKULLFLY )
>1092	CompoundStatement	 
>1093	ExpressionStatement	 
>1094	AssignmentExpr	mo -> momz = - mo -> momz
>1095	UnaryOp	- mo -> momz
>1096	PtrMemberAccess	mo -> momz
>1097	Identifier	momz
>1098	Identifier	mo
>1099	UnaryOperator	-
>1100	PtrMemberAccess	mo -> momz
>1101	Identifier	momz
>1102	Identifier	mo
>1103	Condition	 
>1104	BitAndExpression	mo -> flags & MF_SKULLFLY
>1105	Identifier	MF_SKULLFLY
>1106	PtrMemberAccess	mo -> flags
>1107	Identifier	flags
>1108	Identifier	mo
>1109	Condition	 
>1110	RelationalExpression	mo -> z <= mo -> floorz
>1111	PtrMemberAccess	mo -> floorz
>1112	Identifier	floorz
>1113	Identifier	mo
>1114	PtrMemberAccess	mo -> z
>1115	Identifier	z
>1116	Identifier	mo
>1117	IfStatement	if ( mo -> flags & MF_FLOAT && mo -> target )
>1118	CompoundStatement	 
>1119	IfStatement	if ( ! ( mo -> flags & MF_SKULLFLY ) && ! ( mo -> flags & MF_INFLOAT ) )
>1120	CompoundStatement	 
>1121	IfStatement	if ( delta < 0 && dist < - ( delta * 3 ) )
>1122	ElseStatement	else
>1123	IfStatement	if ( delta > 0 && dist < ( delta * 3 ) )
>1124	ExpressionStatement	 
>1125	AssignmentExpr	mo -> z += FLOATSPEED
>1126	Identifier	FLOATSPEED
>1127	PtrMemberAccess	mo -> z
>1128	Identifier	z
>1129	Identifier	mo
>1130	Condition	 
>1131	AndExpression	delta > 0 && dist < ( delta * 3 )
>1132	RelationalExpression	dist < ( delta * 3 )
>1133	MultiplicativeExpression	delta * 3
>1134	PrimaryExpression	3
>1135	Identifier	delta
>1136	Identifier	dist
>1137	RelationalExpression	delta > 0
>1138	PrimaryExpression	0
>1139	Identifier	delta
>1140	ExpressionStatement	 
>1141	AssignmentExpr	mo -> z -= FLOATSPEED
>1142	Identifier	FLOATSPEED
>1143	PtrMemberAccess	mo -> z
>1144	Identifier	z
>1145	Identifier	mo
>1146	Condition	 
>1147	AndExpression	delta < 0 && dist < - ( delta * 3 )
>1148	RelationalExpression	dist < - ( delta * 3 )
>1149	UnaryOp	- ( delta * 3 )
>1150	MultiplicativeExpression	delta * 3
>1151	PrimaryExpression	3
>1152	Identifier	delta
>1153	UnaryOperator	-
>1154	Identifier	dist
>1155	RelationalExpression	delta < 0
>1156	PrimaryExpression	0
>1157	Identifier	delta
>1158	ExpressionStatement	 
>1159	AssignmentExpr	delta = ( mo -> target -> z + ( mo -> height >> 1 ) ) - mo -> z
>1160	AdditiveExpression	( mo -> target -> z + ( mo -> height >> 1 ) ) - mo -> z
>1161	PtrMemberAccess	mo -> z
>1162	Identifier	z
>1163	Identifier	mo
>1164	AdditiveExpression	mo -> target -> z + ( mo -> height >> 1 )
>1165	ShiftExpression	mo -> height >> 1
>1166	PrimaryExpression	1
>1167	PtrMemberAccess	mo -> height
>1168	Identifier	height
>1169	Identifier	mo
>1170	PtrMemberAccess	mo -> target -> z
>1171	Identifier	z
>1172	PtrMemberAccess	mo -> target
>1173	Identifier	target
>1174	Identifier	mo
>1175	Identifier	delta
>1176	ExpressionStatement	 
>1177	AssignmentExpr	dist = P_AproxDistance ( mo -> x - mo -> target -> x , mo -> y - mo -> target -> y )
>1178	CallExpression	P_AproxDistance ( mo -> x - mo -> target -> x , mo -> y - mo -> target -> y )
>1179	ArgumentList	mo -> x - mo -> target -> x
>1180	Argument	mo -> y - mo -> target -> y
>1181	AdditiveExpression	mo -> y - mo -> target -> y
>1182	PtrMemberAccess	mo -> target -> y
>1183	Identifier	y
>1184	PtrMemberAccess	mo -> target
>1185	Identifier	target
>1186	Identifier	mo
>1187	PtrMemberAccess	mo -> y
>1188	Identifier	y
>1189	Identifier	mo
>1190	Argument	mo -> x - mo -> target -> x
>1191	AdditiveExpression	mo -> x - mo -> target -> x
>1192	PtrMemberAccess	mo -> target -> x
>1193	Identifier	x
>1194	PtrMemberAccess	mo -> target
>1195	Identifier	target
>1196	Identifier	mo
>1197	PtrMemberAccess	mo -> x
>1198	Identifier	x
>1199	Identifier	mo
>1200	Callee	P_AproxDistance
>1201	Identifier	P_AproxDistance
>1202	Identifier	dist
>1203	Condition	 
>1204	AndExpression	! ( mo -> flags & MF_SKULLFLY ) && ! ( mo -> flags & MF_INFLOAT )
>1205	UnaryOp	! ( mo -> flags & MF_INFLOAT )
>1206	BitAndExpression	mo -> flags & MF_INFLOAT
>1207	Identifier	MF_INFLOAT
>1208	PtrMemberAccess	mo -> flags
>1209	Identifier	flags
>1210	Identifier	mo
>1211	UnaryOperator	!
>1212	UnaryOp	! ( mo -> flags & MF_SKULLFLY )
>1213	BitAndExpression	mo -> flags & MF_SKULLFLY
>1214	Identifier	MF_SKULLFLY
>1215	PtrMemberAccess	mo -> flags
>1216	Identifier	flags
>1217	Identifier	mo
>1218	UnaryOperator	!
>1219	Condition	 
>1220	AndExpression	mo -> flags & MF_FLOAT && mo -> target
>1221	PtrMemberAccess	mo -> target
>1222	Identifier	target
>1223	Identifier	mo
>1224	BitAndExpression	mo -> flags & MF_FLOAT
>1225	Identifier	MF_FLOAT
>1226	PtrMemberAccess	mo -> flags
>1227	Identifier	flags
>1228	Identifier	mo
>1229	ExpressionStatement	 
>1230	AssignmentExpr	mo -> z += mo -> momz
>1231	PtrMemberAccess	mo -> momz
>1232	Identifier	momz
>1233	Identifier	mo
>1234	PtrMemberAccess	mo -> z
>1235	Identifier	z
>1236	Identifier	mo
>1237	IfStatement	if ( mo -> player && mo -> z < mo -> floorz )
>1238	CompoundStatement	 
>1239	ExpressionStatement	 
>1240	AssignmentExpr	mo -> player -> deltaviewheight = ( VIEWHEIGHT - mo -> player -> viewheight ) >> 3
>1241	ShiftExpression	( VIEWHEIGHT - mo -> player -> viewheight ) >> 3
>1242	PrimaryExpression	3
>1243	AdditiveExpression	VIEWHEIGHT - mo -> player -> viewheight
>1244	PtrMemberAccess	mo -> player -> viewheight
>1245	Identifier	viewheight
>1246	PtrMemberAccess	mo -> player
>1247	Identifier	player
>1248	Identifier	mo
>1249	Identifier	VIEWHEIGHT
>1250	PtrMemberAccess	mo -> player -> deltaviewheight
>1251	Identifier	deltaviewheight
>1252	PtrMemberAccess	mo -> player
>1253	Identifier	player
>1254	Identifier	mo
>1255	ExpressionStatement	 
>1256	AssignmentExpr	mo -> player -> viewheight -= mo -> floorz - mo -> z
>1257	AdditiveExpression	mo -> floorz - mo -> z
>1258	PtrMemberAccess	mo -> z
>1259	Identifier	z
>1260	Identifier	mo
>1261	PtrMemberAccess	mo -> floorz
>1262	Identifier	floorz
>1263	Identifier	mo
>1264	PtrMemberAccess	mo -> player -> viewheight
>1265	Identifier	viewheight
>1266	PtrMemberAccess	mo -> player
>1267	Identifier	player
>1268	Identifier	mo
>1269	Condition	 
>1270	AndExpression	mo -> player && mo -> z < mo -> floorz
>1271	RelationalExpression	mo -> z < mo -> floorz
>1272	PtrMemberAccess	mo -> floorz
>1273	Identifier	floorz
>1274	Identifier	mo
>1275	PtrMemberAccess	mo -> z
>1276	Identifier	z
>1277	Identifier	mo
>1278	PtrMemberAccess	mo -> player
>1279	Identifier	player
>1280	Identifier	mo
>1281	IdentifierDeclStatement	 
>1282	IdentifierDecl	delta
>1283	Identifier	delta
>1284	IdentifierDeclType	fixed_t
>1285	IdentifierDeclStatement	 
>1286	IdentifierDecl	dist
>1287	Identifier	dist
>1288	IdentifierDeclType	fixed_t
>1325	FunctionDef	P_NightmareRespawn (mobj_t * mobj)
>1326	ParameterList	mobj_t * mobj
>1327	Parameter	 
>1328	Identifier	mobj
>1329	ParameterType	mobj_t *
>1330	ReturnType	void
>1331	CompoundStatement	 
>1332	ExpressionStatement	 
>1333	CallExpression	P_RemoveMobj ( mobj )
>1334	ArgumentList	mobj
>1335	Argument	mobj
>1336	Identifier	mobj
>1337	Callee	P_RemoveMobj
>1338	Identifier	P_RemoveMobj
>1339	ExpressionStatement	 
>1340	AssignmentExpr	mo -> reactiontime = 18
>1341	PrimaryExpression	18
>1342	PtrMemberAccess	mo -> reactiontime
>1343	Identifier	reactiontime
>1344	Identifier	mo
>1345	IfStatement	if ( mthing -> options & MTF_AMBUSH )
>1346	ExpressionStatement	 
>1347	AssignmentExpr	mo -> flags |= MF_AMBUSH
>1348	Identifier	MF_AMBUSH
>1349	PtrMemberAccess	mo -> flags
>1350	Identifier	flags
>1351	Identifier	mo
>1352	Condition	 
>1353	BitAndExpression	mthing -> options & MTF_AMBUSH
>1354	Identifier	MTF_AMBUSH
>1355	PtrMemberAccess	mthing -> options
>1356	Identifier	options
>1357	Identifier	mthing
>1358	ExpressionStatement	 
>1359	AssignmentExpr	mo -> angle = ANG45 * ( mthing -> angle / 45 )
>1360	MultiplicativeExpression	ANG45 * ( mthing -> angle / 45 )
>1361	MultiplicativeExpression	mthing -> angle / 45
>1362	PrimaryExpression	45
>1363	PtrMemberAccess	mthing -> angle
>1364	Identifier	angle
>1365	Identifier	mthing
>1366	Identifier	ANG45
>1367	PtrMemberAccess	mo -> angle
>1368	Identifier	angle
>1369	Identifier	mo
>1370	ExpressionStatement	 
>1371	AssignmentExpr	mo -> spawnpoint = mobj -> spawnpoint
>1372	PtrMemberAccess	mobj -> spawnpoint
>1373	Identifier	spawnpoint
>1374	Identifier	mobj
>1375	PtrMemberAccess	mo -> spawnpoint
>1376	Identifier	spawnpoint
>1377	Identifier	mo
>1378	ExpressionStatement	 
>1379	AssignmentExpr	mo = P_SpawnMobj ( x , y , z , mobj -> type )
>1380	CallExpression	P_SpawnMobj ( x , y , z , mobj -> type )
>1381	ArgumentList	x
>1382	Argument	mobj -> type
>1383	PtrMemberAccess	mobj -> type
>1384	Identifier	type
>1385	Identifier	mobj
>1386	Argument	z
>1387	Identifier	z
>1388	Argument	y
>1389	Identifier	y
>1390	Argument	x
>1391	Identifier	x
>1392	Callee	P_SpawnMobj
>1393	Identifier	P_SpawnMobj
>1394	Identifier	mo
>1395	IfStatement	if ( mobj -> info -> flags & MF_SPAWNCEILING )
>1396	ElseStatement	else
>1397	ExpressionStatement	 
>1398	AssignmentExpr	z = ONFLOORZ
>1399	Identifier	ONFLOORZ
>1400	Identifier	z
>1401	ExpressionStatement	 
>1402	AssignmentExpr	z = ONCEILINGZ
>1403	Identifier	ONCEILINGZ
>1404	Identifier	z
>1405	Condition	 
>1406	BitAndExpression	mobj -> info -> flags & MF_SPAWNCEILING
>1407	Identifier	MF_SPAWNCEILING
>1408	PtrMemberAccess	mobj -> info -> flags
>1409	Identifier	flags
>1410	PtrMemberAccess	mobj -> info
>1411	Identifier	info
>1412	Identifier	mobj
>1413	ExpressionStatement	 
>1414	AssignmentExpr	mthing = & mobj -> spawnpoint
>1415	UnaryOp	& mobj -> spawnpoint
>1416	PtrMemberAccess	mobj -> spawnpoint
>1417	Identifier	spawnpoint
>1418	Identifier	mobj
>1419	UnaryOperator	&
>1420	Identifier	mthing
>1421	ExpressionStatement	 
>1422	CallExpression	S_StartSound ( mo , sfx_telept )
>1423	ArgumentList	mo
>1424	Argument	sfx_telept
>1425	Identifier	sfx_telept
>1426	Argument	mo
>1427	Identifier	mo
>1428	Callee	S_StartSound
>1429	Identifier	S_StartSound
>1430	ExpressionStatement	 
>1431	AssignmentExpr	mo = P_SpawnMobj ( x , y , ss -> sector -> floorheight , MT_TFOG )
>1432	CallExpression	P_SpawnMobj ( x , y , ss -> sector -> floorheight , MT_TFOG )
>1433	ArgumentList	x
>1434	Argument	MT_TFOG
>1435	Identifier	MT_TFOG
>1436	Argument	ss -> sector -> floorheight
>1437	PtrMemberAccess	ss -> sector -> floorheight
>1438	Identifier	floorheight
>1439	PtrMemberAccess	ss -> sector
>1440	Identifier	sector
>1441	Identifier	ss
>1442	Argument	y
>1443	Identifier	y
>1444	Argument	x
>1445	Identifier	x
>1446	Callee	P_SpawnMobj
>1447	Identifier	P_SpawnMobj
>1448	Identifier	mo
>1449	ExpressionStatement	 
>1450	AssignmentExpr	ss = R_PointInSubsector ( x , y )
>1451	CallExpression	R_PointInSubsector ( x , y )
>1452	ArgumentList	x
>1453	Argument	y
>1454	Identifier	y
>1455	Argument	x
>1456	Identifier	x
>1457	Callee	R_PointInSubsector
>1458	Identifier	R_PointInSubsector
>1459	Identifier	ss
>1460	ExpressionStatement	 
>1461	CallExpression	S_StartSound ( mo , sfx_telept )
>1462	ArgumentList	mo
>1463	Argument	sfx_telept
>1464	Identifier	sfx_telept
>1465	Argument	mo
>1466	Identifier	mo
>1467	Callee	S_StartSound
>1468	Identifier	S_StartSound
>1469	ExpressionStatement	 
>1470	AssignmentExpr	mo = P_SpawnMobj ( mobj -> x , mobj -> y , mobj -> subsector -> sector -> floorheight , MT_TFOG )
>1471	CallExpression	P_SpawnMobj ( mobj -> x , mobj -> y , mobj -> subsector -> sector -> floorheight , MT_TFOG )
>1472	ArgumentList	mobj -> x
>1473	Argument	MT_TFOG
>1474	Identifier	MT_TFOG
>1475	Argument	mobj -> subsector -> sector -> floorheight
>1476	PtrMemberAccess	mobj -> subsector -> sector -> floorheight
>1477	Identifier	floorheight
>1478	PtrMemberAccess	mobj -> subsector -> sector
>1479	Identifier	sector
>1480	PtrMemberAccess	mobj -> subsector
>1481	Identifier	subsector
>1482	Identifier	mobj
>1483	Argument	mobj -> y
>1484	PtrMemberAccess	mobj -> y
>1485	Identifier	y
>1486	Identifier	mobj
>1487	Argument	mobj -> x
>1488	PtrMemberAccess	mobj -> x
>1489	Identifier	x
>1490	Identifier	mobj
>1491	Callee	P_SpawnMobj
>1492	Identifier	P_SpawnMobj
>1493	Identifier	mo
>1494	IfStatement	if ( ! P_CheckPosition ( mobj , x , y ) )
>1495	ReturnStatement	 
>1496	Condition	 
>1497	UnaryOp	! P_CheckPosition ( mobj , x , y )
>1498	CallExpression	P_CheckPosition ( mobj , x , y )
>1499	ArgumentList	mobj
>1500	Argument	y
>1501	Identifier	y
>1502	Argument	x
>1503	Identifier	x
>1504	Argument	mobj
>1505	Identifier	mobj
>1506	Callee	P_CheckPosition
>1507	Identifier	P_CheckPosition
>1508	UnaryOperator	!
>1509	ExpressionStatement	 
>1510	AssignmentExpr	y = mobj -> spawnpoint . y << FRACBITS
>1511	ShiftExpression	mobj -> spawnpoint . y << FRACBITS
>1512	Identifier	FRACBITS
>1513	MemberAccess	mobj -> spawnpoint . y
>1514	Identifier	y
>1515	PtrMemberAccess	mobj -> spawnpoint
>1516	Identifier	spawnpoint
>1517	Identifier	mobj
>1518	Identifier	y
>1519	ExpressionStatement	 
>1520	AssignmentExpr	x = mobj -> spawnpoint . x << FRACBITS
>1521	ShiftExpression	mobj -> spawnpoint . x << FRACBITS
>1522	Identifier	FRACBITS
>1523	MemberAccess	mobj -> spawnpoint . x
>1524	Identifier	x
>1525	PtrMemberAccess	mobj -> spawnpoint
>1526	Identifier	spawnpoint
>1527	Identifier	mobj
>1528	Identifier	x
>1529	IdentifierDeclStatement	 
>1530	IdentifierDecl	* mthing
>1531	Identifier	mthing
>1532	IdentifierDeclType	mapthing_t *
>1533	IdentifierDeclStatement	 
>1534	IdentifierDecl	* mo
>1535	Identifier	mo
>1536	IdentifierDeclType	mobj_t *
>1537	IdentifierDeclStatement	 
>1538	IdentifierDecl	* ss
>1539	Identifier	ss
>1540	IdentifierDeclType	subsector_t *
>1541	IdentifierDeclStatement	 
>1542	IdentifierDecl	z
>1543	Identifier	z
>1544	IdentifierDeclType	fixed_t
>1545	IdentifierDeclStatement	 
>1546	IdentifierDecl	y
>1547	Identifier	y
>1548	IdentifierDeclType	fixed_t
>1549	IdentifierDeclStatement	 
>1550	IdentifierDecl	x
>1551	Identifier	x
>1552	IdentifierDeclType	fixed_t
>1608	FunctionDef	P_MobjThinker (mobj_t * mobj)
>1609	ParameterList	mobj_t * mobj
>1610	Parameter	 
>1611	Identifier	mobj
>1612	ParameterType	mobj_t *
>1613	ReturnType	void
>1614	CompoundStatement	 
>1615	IfStatement	if ( mobj -> tics != - 1 )
>1616	ElseStatement	else
>1617	CompoundStatement	 
>1618	ExpressionStatement	 
>1619	CallExpression	P_NightmareRespawn ( mobj )
>1620	ArgumentList	mobj
>1621	Argument	mobj
>1622	Identifier	mobj
>1623	Callee	P_NightmareRespawn
>1624	Identifier	P_NightmareRespawn
>1625	IfStatement	if ( P_Random ( ) > 4 )
>1626	ReturnStatement	 
>1627	Condition	 
>1628	RelationalExpression	P_Random ( ) > 4
>1629	PrimaryExpression	4
>1630	CallExpression	P_Random ( )
>1631	ArgumentList	 
>1632	Callee	P_Random
>1633	Identifier	P_Random
>1634	ReturnStatement	 
>1635	Statement	 
>1636	Statement	 
>1637	Statement	 
>1638	Statement	 
>1639	Statement	 
>1640	Statement	 
>1641	Statement	 
>1642	Statement	 
>1643	Statement	 
>1644	IfStatement	if ( mobj -> movecount < 12 * TICRATE )
>1645	ReturnStatement	 
>1646	Condition	 
>1647	RelationalExpression	mobj -> movecount < 12 * TICRATE
>1648	MultiplicativeExpression	12 * TICRATE
>1649	Identifier	TICRATE
>1650	PrimaryExpression	12
>1651	PtrMemberAccess	mobj -> movecount
>1652	Identifier	movecount
>1653	Identifier	mobj
>1654	ExpressionStatement	 
>1655	IncDecOp	mobj -> movecount ++
>1656	IncDec	++
>1657	PtrMemberAccess	mobj -> movecount
>1658	Identifier	movecount
>1659	Identifier	mobj
>1660	ReturnStatement	 
>1661	Statement	 
>1662	Statement	 
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	Statement	 
>1668	Statement	 
>1669	IfStatement	if ( ! ( mobj -> flags & MF_COUNTKILL ) )
>1670	ReturnStatement	 
>1671	Condition	 
>1672	UnaryOp	! ( mobj -> flags & MF_COUNTKILL )
>1673	BitAndExpression	mobj -> flags & MF_COUNTKILL
>1674	Identifier	MF_COUNTKILL
>1675	PtrMemberAccess	mobj -> flags
>1676	Identifier	flags
>1677	Identifier	mobj
>1678	UnaryOperator	!
>1679	CompoundStatement	 
>1680	IfStatement	if ( ! mobj -> tics )
>1681	IfStatement	if ( ! P_SetMobjState ( mobj , mobj -> state -> nextstate ) )
>1682	ReturnStatement	 
>1683	Condition	 
>1684	UnaryOp	! P_SetMobjState ( mobj , mobj -> state -> nextstate )
>1685	CallExpression	P_SetMobjState ( mobj , mobj -> state -> nextstate )
>1686	ArgumentList	mobj
>1687	Argument	mobj -> state -> nextstate
>1688	PtrMemberAccess	mobj -> state -> nextstate
>1689	Identifier	nextstate
>1690	PtrMemberAccess	mobj -> state
>1691	Identifier	state
>1692	Identifier	mobj
>1693	Argument	mobj
>1694	Identifier	mobj
>1695	Callee	P_SetMobjState
>1696	Identifier	P_SetMobjState
>1697	UnaryOperator	!
>1698	Condition	 
>1699	UnaryOp	! mobj -> tics
>1700	PtrMemberAccess	mobj -> tics
>1701	Identifier	tics
>1702	Identifier	mobj
>1703	UnaryOperator	!
>1704	ExpressionStatement	 
>1705	IncDecOp	mobj -> tics --
>1706	IncDec	--
>1707	PtrMemberAccess	mobj -> tics
>1708	Identifier	tics
>1709	Identifier	mobj
>1710	Condition	 
>1711	EqualityExpression	mobj -> tics != - 1
>1712	UnaryOp	- 1
>1713	PrimaryExpression	1
>1714	UnaryOperator	-
>1715	PtrMemberAccess	mobj -> tics
>1716	Identifier	tics
>1717	Identifier	mobj
>1718	IfStatement	if ( ( mobj -> z != mobj -> floorz ) || mobj -> momz )
>1719	CompoundStatement	 
>1720	IfStatement	if ( mobj -> thinker . function . acv == ( actionf_v ) ( - 1 ) )
>1721	ReturnStatement	 
>1722	Condition	 
>1723	EqualityExpression	mobj -> thinker . function . acv == ( actionf_v ) ( - 1 )
>1724	CastExpression	( actionf_v ) ( - 1 )
>1725	UnaryOp	- 1
>1726	PrimaryExpression	1
>1727	UnaryOperator	-
>1728	CastTarget	actionf_v
>1729	MemberAccess	mobj -> thinker . function . acv
>1730	Identifier	acv
>1731	MemberAccess	mobj -> thinker . function
>1732	Identifier	function
>1733	PtrMemberAccess	mobj -> thinker
>1734	Identifier	thinker
>1735	Identifier	mobj
>1736	ExpressionStatement	 
>1737	CallExpression	P_ZMovement ( mobj )
>1738	ArgumentList	mobj
>1739	Argument	mobj
>1740	Identifier	mobj
>1741	Callee	P_ZMovement
>1742	Identifier	P_ZMovement
>1743	Condition	 
>1744	OrExpression	( mobj -> z != mobj -> floorz ) || mobj -> momz
>1745	PtrMemberAccess	mobj -> momz
>1746	Identifier	momz
>1747	Identifier	mobj
>1748	EqualityExpression	mobj -> z != mobj -> floorz
>1749	PtrMemberAccess	mobj -> floorz
>1750	Identifier	floorz
>1751	Identifier	mobj
>1752	PtrMemberAccess	mobj -> z
>1753	Identifier	z
>1754	Identifier	mobj
>1755	IfStatement	if ( mobj -> momx || mobj -> momy || ( mobj -> flags & MF_SKULLFLY ) )
>1756	CompoundStatement	 
>1757	IfStatement	if ( mobj -> thinker . function . acv == ( actionf_v ) ( - 1 ) )
>1758	ReturnStatement	 
>1759	Condition	 
>1760	EqualityExpression	mobj -> thinker . function . acv == ( actionf_v ) ( - 1 )
>1761	CastExpression	( actionf_v ) ( - 1 )
>1762	UnaryOp	- 1
>1763	PrimaryExpression	1
>1764	UnaryOperator	-
>1765	CastTarget	actionf_v
>1766	MemberAccess	mobj -> thinker . function . acv
>1767	Identifier	acv
>1768	MemberAccess	mobj -> thinker . function
>1769	Identifier	function
>1770	PtrMemberAccess	mobj -> thinker
>1771	Identifier	thinker
>1772	Identifier	mobj
>1773	ExpressionStatement	 
>1774	CallExpression	P_XYMovement ( mobj )
>1775	ArgumentList	mobj
>1776	Argument	mobj
>1777	Identifier	mobj
>1778	Callee	P_XYMovement
>1779	Identifier	P_XYMovement
>1780	Condition	 
>1781	OrExpression	mobj -> momx || mobj -> momy || ( mobj -> flags & MF_SKULLFLY )
>1782	OrExpression	mobj -> momy || ( mobj -> flags & MF_SKULLFLY )
>1783	BitAndExpression	mobj -> flags & MF_SKULLFLY
>1784	Identifier	MF_SKULLFLY
>1785	PtrMemberAccess	mobj -> flags
>1786	Identifier	flags
>1787	Identifier	mobj
>1788	PtrMemberAccess	mobj -> momy
>1789	Identifier	momy
>1790	Identifier	mobj
>1791	PtrMemberAccess	mobj -> momx
>1792	Identifier	momx
>1793	Identifier	mobj
>1819	FunctionDef	P_SpawnMobj (fixed_t x , fixed_t y , fixed_t z , mobjtype_t type)
>1820	ParameterList	fixed_t x , fixed_t y , fixed_t z , mobjtype_t type
>1821	Parameter	 
>1822	Identifier	type
>1823	ParameterType	mobjtype_t
>1824	Parameter	 
>1825	Identifier	z
>1826	ParameterType	fixed_t
>1827	Parameter	 
>1828	Identifier	y
>1829	ParameterType	fixed_t
>1830	Parameter	 
>1831	Identifier	x
>1832	ParameterType	fixed_t
>1833	ReturnType	mobj_t *
>1834	CompoundStatement	 
>1835	ReturnStatement	 
>1836	Identifier	mobj
>1837	ExpressionStatement	 
>1838	CallExpression	P_AddThinker ( & mobj -> thinker )
>1839	ArgumentList	& mobj -> thinker
>1840	Argument	& mobj -> thinker
>1841	UnaryOp	& mobj -> thinker
>1842	PtrMemberAccess	mobj -> thinker
>1843	Identifier	thinker
>1844	Identifier	mobj
>1845	UnaryOperator	&
>1846	Callee	P_AddThinker
>1847	Identifier	P_AddThinker
>1848	ExpressionStatement	 
>1849	AssignmentExpr	mobj -> thinker . function . acp1 = ( actionf_p1 ) P_MobjThinker
>1850	CastExpression	( actionf_p1 ) P_MobjThinker
>1851	Identifier	P_MobjThinker
>1852	CastTarget	actionf_p1
>1853	MemberAccess	mobj -> thinker . function . acp1
>1854	Identifier	acp1
>1855	MemberAccess	mobj -> thinker . function
>1856	Identifier	function
>1857	PtrMemberAccess	mobj -> thinker
>1858	Identifier	thinker
>1859	Identifier	mobj
>1860	IfStatement	if ( z == ONFLOORZ )
>1861	ElseStatement	else
>1862	IfStatement	if ( z == ONCEILINGZ )
>1863	ElseStatement	else
>1864	ExpressionStatement	 
>1865	AssignmentExpr	mobj -> z = z
>1866	Identifier	z
>1867	PtrMemberAccess	mobj -> z
>1868	Identifier	z
>1869	Identifier	mobj
>1870	ExpressionStatement	 
>1871	AssignmentExpr	mobj -> z = mobj -> ceilingz - mobj -> info -> height
>1872	AdditiveExpression	mobj -> ceilingz - mobj -> info -> height
>1873	PtrMemberAccess	mobj -> info -> height
>1874	Identifier	height
>1875	PtrMemberAccess	mobj -> info
>1876	Identifier	info
>1877	Identifier	mobj
>1878	PtrMemberAccess	mobj -> ceilingz
>1879	Identifier	ceilingz
>1880	Identifier	mobj
>1881	PtrMemberAccess	mobj -> z
>1882	Identifier	z
>1883	Identifier	mobj
>1884	Condition	 
>1885	EqualityExpression	z == ONCEILINGZ
>1886	Identifier	ONCEILINGZ
>1887	Identifier	z
>1888	ExpressionStatement	 
>1889	AssignmentExpr	mobj -> z = mobj -> floorz
>1890	PtrMemberAccess	mobj -> floorz
>1891	Identifier	floorz
>1892	Identifier	mobj
>1893	PtrMemberAccess	mobj -> z
>1894	Identifier	z
>1895	Identifier	mobj
>1896	Condition	 
>1897	EqualityExpression	z == ONFLOORZ
>1898	Identifier	ONFLOORZ
>1899	Identifier	z
>1900	ExpressionStatement	 
>1901	AssignmentExpr	mobj -> ceilingz = mobj -> subsector -> sector -> ceilingheight
>1902	PtrMemberAccess	mobj -> subsector -> sector -> ceilingheight
>1903	Identifier	ceilingheight
>1904	PtrMemberAccess	mobj -> subsector -> sector
>1905	Identifier	sector
>1906	PtrMemberAccess	mobj -> subsector
>1907	Identifier	subsector
>1908	Identifier	mobj
>1909	PtrMemberAccess	mobj -> ceilingz
>1910	Identifier	ceilingz
>1911	Identifier	mobj
>1912	ExpressionStatement	 
>1913	AssignmentExpr	mobj -> floorz = mobj -> subsector -> sector -> floorheight
>1914	PtrMemberAccess	mobj -> subsector -> sector -> floorheight
>1915	Identifier	floorheight
>1916	PtrMemberAccess	mobj -> subsector -> sector
>1917	Identifier	sector
>1918	PtrMemberAccess	mobj -> subsector
>1919	Identifier	subsector
>1920	Identifier	mobj
>1921	PtrMemberAccess	mobj -> floorz
>1922	Identifier	floorz
>1923	Identifier	mobj
>1924	ExpressionStatement	 
>1925	CallExpression	P_SetThingPosition ( mobj )
>1926	ArgumentList	mobj
>1927	Argument	mobj
>1928	Identifier	mobj
>1929	Callee	P_SetThingPosition
>1930	Identifier	P_SetThingPosition
>1931	ExpressionStatement	 
>1932	AssignmentExpr	mobj -> frame = st -> frame
>1933	PtrMemberAccess	st -> frame
>1934	Identifier	frame
>1935	Identifier	st
>1936	PtrMemberAccess	mobj -> frame
>1937	Identifier	frame
>1938	Identifier	mobj
>1939	ExpressionStatement	 
>1940	AssignmentExpr	mobj -> sprite = st -> sprite
>1941	PtrMemberAccess	st -> sprite
>1942	Identifier	sprite
>1943	Identifier	st
>1944	PtrMemberAccess	mobj -> sprite
>1945	Identifier	sprite
>1946	Identifier	mobj
>1947	ExpressionStatement	 
>1948	AssignmentExpr	mobj -> tics = st -> tics
>1949	PtrMemberAccess	st -> tics
>1950	Identifier	tics
>1951	Identifier	st
>1952	PtrMemberAccess	mobj -> tics
>1953	Identifier	tics
>1954	Identifier	mobj
>1955	ExpressionStatement	 
>1956	AssignmentExpr	mobj -> state = st
>1957	Identifier	st
>1958	PtrMemberAccess	mobj -> state
>1959	Identifier	state
>1960	Identifier	mobj
>1961	ExpressionStatement	 
>1962	ArrayIndexing	g -> states [ info -> spawnstate ]
>1963	PtrMemberAccess	info -> spawnstate
>1964	Identifier	spawnstate
>1965	Identifier	info
>1966	PtrMemberAccess	g -> states
>1967	Identifier	states
>1968	Identifier	g
>1969	Statement	 
>1970	Statement	 
>1971	Statement	 
>1972	Statement	 
>1973	ExpressionStatement	 
>1974	AssignmentExpr	mobj -> lastlook = P_Random ( ) % MAXPLAYERS
>1975	MultiplicativeExpression	P_Random ( ) % MAXPLAYERS
>1976	Identifier	MAXPLAYERS
>1977	CallExpression	P_Random ( )
>1978	ArgumentList	 
>1979	Callee	P_Random
>1980	Identifier	P_Random
>1981	PtrMemberAccess	mobj -> lastlook
>1982	Identifier	lastlook
>1983	Identifier	mobj
>1984	ExpressionStatement	 
>1985	AssignmentExpr	mobj -> reactiontime = info -> reactiontime
>1986	PtrMemberAccess	info -> reactiontime
>1987	Identifier	reactiontime
>1988	Identifier	info
>1989	PtrMemberAccess	mobj -> reactiontime
>1990	Identifier	reactiontime
>1991	Identifier	mobj
>1992	Statement	 
>1993	Statement	 
>1994	Statement	 
>1995	Statement	 
>1996	Statement	 
>1997	Statement	 
>1998	Statement	 
>1999	Statement	 
>2000	Statement	 
>2001	ExpressionStatement	 
>2002	AssignmentExpr	mobj -> health = info -> spawnhealth
>2003	PtrMemberAccess	info -> spawnhealth
>2004	Identifier	spawnhealth
>2005	Identifier	info
>2006	PtrMemberAccess	mobj -> health
>2007	Identifier	health
>2008	Identifier	mobj
>2009	ExpressionStatement	 
>2010	AssignmentExpr	mobj -> flags = info -> flags
>2011	PtrMemberAccess	info -> flags
>2012	Identifier	flags
>2013	Identifier	info
>2014	PtrMemberAccess	mobj -> flags
>2015	Identifier	flags
>2016	Identifier	mobj
>2017	ExpressionStatement	 
>2018	AssignmentExpr	mobj -> height = info -> height
>2019	PtrMemberAccess	info -> height
>2020	Identifier	height
>2021	Identifier	info
>2022	PtrMemberAccess	mobj -> height
>2023	Identifier	height
>2024	Identifier	mobj
>2025	ExpressionStatement	 
>2026	AssignmentExpr	mobj -> radius = info -> radius
>2027	PtrMemberAccess	info -> radius
>2028	Identifier	radius
>2029	Identifier	info
>2030	PtrMemberAccess	mobj -> radius
>2031	Identifier	radius
>2032	Identifier	mobj
>2033	ExpressionStatement	 
>2034	AssignmentExpr	mobj -> y = y
>2035	Identifier	y
>2036	PtrMemberAccess	mobj -> y
>2037	Identifier	y
>2038	Identifier	mobj
>2039	ExpressionStatement	 
>2040	AssignmentExpr	mobj -> x = x
>2041	Identifier	x
>2042	PtrMemberAccess	mobj -> x
>2043	Identifier	x
>2044	Identifier	mobj
>2045	ExpressionStatement	 
>2046	AssignmentExpr	mobj -> info = info
>2047	Identifier	info
>2048	PtrMemberAccess	mobj -> info
>2049	Identifier	info
>2050	Identifier	mobj
>2051	ExpressionStatement	 
>2052	AssignmentExpr	mobj -> type = type
>2053	Identifier	type
>2054	PtrMemberAccess	mobj -> type
>2055	Identifier	type
>2056	Identifier	mobj
>2057	ExpressionStatement	 
>2058	AssignmentExpr	info = & mobjinfo [ type ]
>2059	UnaryOp	& mobjinfo [ type ]
>2060	ArrayIndexing	mobjinfo [ type ]
>2061	Identifier	type
>2062	Identifier	mobjinfo
>2063	UnaryOperator	&
>2064	Identifier	info
>2065	ExpressionStatement	 
>2066	CallExpression	memset ( mobj , 0 , sizeof ( * mobj ) )
>2067	ArgumentList	mobj
>2068	Argument	sizeof ( * mobj )
>2069	SizeofExpr	sizeof ( * mobj )
>2070	UnaryOp	* mobj
>2071	Identifier	mobj
>2072	UnaryOperator	*
>2073	Sizeof	sizeof
>2074	Argument	0
>2075	PrimaryExpression	0
>2076	Argument	mobj
>2077	Identifier	mobj
>2078	Callee	memset
>2079	Identifier	memset
>2080	ExpressionStatement	 
>2081	AssignmentExpr	mobj = ( mobj_t * ) DoomLib 
>2082	CastExpression	( mobj_t * ) DoomLib 
>2083	CallExpression	DoomLib 
>2084	ArgumentList	sizeof ( * mobj )
>2085	Argument	NULL
>2086	Identifier	NULL
>2087	Argument	PU_LEVEL
>2088	Identifier	PU_LEVEL
>2089	Argument	sizeof ( * mobj )
>2090	SizeofExpr	sizeof ( * mobj )
>2091	UnaryOp	* mobj
>2092	Identifier	mobj
>2093	UnaryOperator	*
>2094	Sizeof	sizeof
>2095	Callee	DoomLib 
>2096	Identifier	DoomLib 
>2097	CastTarget	mobj_t *
>2098	Identifier	mobj
>2099	IdentifierDeclStatement	 
>2100	IdentifierDecl	* info
>2101	Identifier	info
>2102	IdentifierDeclType	const mobjinfo_t *
>2103	IdentifierDeclStatement	 
>2104	IdentifierDecl	* st
>2105	Identifier	st
>2106	IdentifierDeclType	const state_t *
>2107	IdentifierDeclStatement	 
>2108	IdentifierDecl	* mobj
>2109	Identifier	mobj
>2110	IdentifierDeclType	mobj_t *
>2180	FunctionDef	P_RemoveMobj (mobj_t * mobj)
>2181	ParameterList	mobj_t * mobj
>2182	Parameter	 
>2183	Identifier	mobj
>2184	ParameterType	mobj_t *
>2185	ReturnType	void
>2186	CompoundStatement	 
>2187	ExpressionStatement	 
>2188	CallExpression	P_RemoveThinker ( ( thinker_t * ) mobj )
>2189	ArgumentList	( thinker_t * ) mobj
>2190	Argument	( thinker_t * ) mobj
>2191	CastExpression	( thinker_t * ) mobj
>2192	Identifier	mobj
>2193	CastTarget	thinker_t *
>2194	Callee	P_RemoveThinker
>2195	Identifier	P_RemoveThinker
>2196	ExpressionStatement	 
>2197	CallExpression	P_UnsetThingPosition ( mobj )
>2198	ArgumentList	mobj
>2199	Argument	mobj
>2200	Identifier	mobj
>2201	Callee	P_UnsetThingPosition
>2202	Identifier	P_UnsetThingPosition
>2203	IfStatement	if ( ( mobj -> flags & MF_SPECIAL ) && ! ( mobj -> flags & MF_DROPPED ) && ( mobj -> type != MT_INV ) && ( mobj \
>2204	CompoundStatement	 
>2205	ExpressionStatement	 
>2206	UnaryOp	& ( ITEMQUESIZE - 1 )
>2207	AdditiveExpression	ITEMQUESIZE - 1
>2208	PrimaryExpression	1
>2209	Identifier	ITEMQUESIZE
>2210	UnaryOperator	&
>2211	Statement	 
>2212	Statement	 
>2213	Statement	 
>2214	Statement	 
>2215	Statement	 
>2216	Statement	 
>2217	Statement	 
>2218	Statement	 
>2219	Statement	 
>2220	Statement	 
>2221	Statement	 
>2222	Statement	 
>2223	Statement	 
>2224	Statement	 
>2225	Statement	 
>2226	Statement	 
>2227	Statement	 
>2228	Statement	 
>2229	Statement	 
>2230	Statement	 
>2231	Statement	 
>2232	Statement	 
>2233	Statement	 
>2234	Statement	 
>2235	Statement	 
>2236	ExpressionStatement	 
>2237	UnaryOp	& ( ITEMQUESIZE - 1 )
>2238	AdditiveExpression	ITEMQUESIZE - 1
>2239	PrimaryExpression	1
>2240	Identifier	ITEMQUESIZE
>2241	UnaryOperator	&
>2242	Statement	 
>2243	Statement	 
>2244	Statement	 
>2245	Statement	 
>2246	Statement	 
>2247	Statement	 
>2248	Statement	 
>2249	Statement	 
>2250	Statement	 
>2251	Statement	 
>2252	Statement	 
>2253	Statement	 
>2254	Statement	 
>2255	ExpressionStatement	 
>2256	PtrMemberAccess	g -> leveltime
>2257	Identifier	leveltime
>2258	Identifier	g
>2259	Statement	 
>2260	Statement	 
>2261	Statement	 
>2262	Statement	 
>2263	Statement	 
>2264	Statement	 
>2265	Statement	 
>2266	Statement	 
>2267	Statement	 
>2268	Statement	 
>2269	Statement	 
>2270	Statement	 
>2271	ExpressionStatement	 
>2272	PtrMemberAccess	mobj -> spawnpoint
>2273	Identifier	spawnpoint
>2274	Identifier	mobj
>2275	Statement	 
>2276	Statement	 
>2277	Statement	 
>2278	Statement	 
>2279	Statement	 
>2280	Statement	 
>2281	Statement	 
>2282	Statement	 
>2283	Statement	 
>2284	Statement	 
>2285	Statement	 
>2286	Condition	 
>2287	AndExpression	( mobj -> flags & MF_SPECIAL ) && ! ( mobj -> flags & MF_DROPPED ) && ( mobj -> type != MT_INV ) && ( \
>2288	AndExpression	! ( mobj -> flags & MF_DROPPED ) && ( mobj -> type != MT_INV ) && ( mobj -> type != MT_INS )
>2289	AndExpression	( mobj -> type != MT_INV ) && ( mobj -> type != MT_INS )
>2290	EqualityExpression	mobj -> type != MT_INS
>2291	Identifier	MT_INS
>2292	PtrMemberAccess	mobj -> type
>2293	Identifier	type
>2294	Identifier	mobj
>2295	EqualityExpression	mobj -> type != MT_INV
>2296	Identifier	MT_INV
>2297	PtrMemberAccess	mobj -> type
>2298	Identifier	type
>2299	Identifier	mobj
>2300	UnaryOp	! ( mobj -> flags & MF_DROPPED )
>2301	BitAndExpression	mobj -> flags & MF_DROPPED
>2302	Identifier	MF_DROPPED
>2303	PtrMemberAccess	mobj -> flags
>2304	Identifier	flags
>2305	Identifier	mobj
>2306	UnaryOperator	!
>2307	BitAndExpression	mobj -> flags & MF_SPECIAL
>2308	Identifier	MF_SPECIAL
>2309	PtrMemberAccess	mobj -> flags
>2310	Identifier	flags
>2311	Identifier	mobj
>2324	FunctionDef	P_RespawnSpecials ()
>2325	ParameterList	 
>2326	ReturnType	void
>2327	CompoundStatement	 
>2328	ExpressionStatement	 
>2329	UnaryOp	& ( ITEMQUESIZE - 1 )
>2330	AdditiveExpression	ITEMQUESIZE - 1
>2331	PrimaryExpression	1
>2332	Identifier	ITEMQUESIZE
>2333	UnaryOperator	&
>2334	Statement	 
>2335	Statement	 
>2336	Statement	 
>2337	Statement	 
>2338	Statement	 
>2339	Statement	 
>2340	Statement	 
>2341	Statement	 
>2342	Statement	 
>2343	Statement	 
>2344	Statement	 
>2345	Statement	 
>2346	Statement	 
>2347	ExpressionStatement	 
>2348	AssignmentExpr	mo -> angle = ANG45 * ( mthing -> angle / 45 )
>2349	MultiplicativeExpression	ANG45 * ( mthing -> angle / 45 )
>2350	MultiplicativeExpression	mthing -> angle / 45
>2351	PrimaryExpression	45
>2352	PtrMemberAccess	mthing -> angle
>2353	Identifier	angle
>2354	Identifier	mthing
>2355	Identifier	ANG45
>2356	PtrMemberAccess	mo -> angle
>2357	Identifier	angle
>2358	Identifier	mo
>2359	ExpressionStatement	 
>2360	AssignmentExpr	mo -> spawnpoint = * mthing
>2361	UnaryOp	* mthing
>2362	Identifier	mthing
>2363	UnaryOperator	*
>2364	PtrMemberAccess	mo -> spawnpoint
>2365	Identifier	spawnpoint
>2366	Identifier	mo
>2367	ExpressionStatement	 
>2368	AssignmentExpr	mo = ( mobj_t * ) P_SpawnMobj ( x , y , z , ( mobjtype_t ) i )
>2369	CastExpression	( mobj_t * ) P_SpawnMobj ( x , y , z , ( mobjtype_t ) i )
>2370	CallExpression	P_SpawnMobj ( x , y , z , ( mobjtype_t ) i )
>2371	ArgumentList	x
>2372	Argument	( mobjtype_t ) i
>2373	CastExpression	( mobjtype_t ) i
>2374	Identifier	i
>2375	CastTarget	mobjtype_t
>2376	Argument	z
>2377	Identifier	z
>2378	Argument	y
>2379	Identifier	y
>2380	Argument	x
>2381	Identifier	x
>2382	Callee	P_SpawnMobj
>2383	Identifier	P_SpawnMobj
>2384	CastTarget	mobj_t *
>2385	Identifier	mo
>2386	IfStatement	if ( mobjinfo [ i ] . flags & MF_SPAWNCEILING )
>2387	ElseStatement	else
>2388	ExpressionStatement	 
>2389	AssignmentExpr	z = ONFLOORZ
>2390	Identifier	ONFLOORZ
>2391	Identifier	z
>2392	ExpressionStatement	 
>2393	AssignmentExpr	z = ONCEILINGZ
>2394	Identifier	ONCEILINGZ
>2395	Identifier	z
>2396	Condition	 
>2397	BitAndExpression	mobjinfo [ i ] . flags & MF_SPAWNCEILING
>2398	Identifier	MF_SPAWNCEILING
>2399	MemberAccess	mobjinfo [ i ] . flags
>2400	Identifier	flags
>2401	ArrayIndexing	mobjinfo [ i ]
>2402	Identifier	i
>2403	Identifier	mobjinfo
>2404	ForStatement	for ( i = 0 ; i < NUMMOBJTYPES ; i ++ )
>2405	CompoundStatement	 
>2406	IfStatement	if ( mthing -> type == mobjinfo [ i ] . doomednum )
>2407	BreakStatement	 
>2408	Condition	 
>2409	EqualityExpression	mthing -> type == mobjinfo [ i ] . doomednum
>2410	MemberAccess	mobjinfo [ i ] . doomednum
>2411	Identifier	doomednum
>2412	ArrayIndexing	mobjinfo [ i ]
>2413	Identifier	i
>2414	Identifier	mobjinfo
>2415	PtrMemberAccess	mthing -> type
>2416	Identifier	type
>2417	Identifier	mthing
>2418	IncDecOp	 
>2419	IncDec	++
>2420	Identifier	i
>2421	Condition	 
>2422	RelationalExpression	i < NUMMOBJTYPES
>2423	Identifier	NUMMOBJTYPES
>2424	Identifier	i
>2425	ForInit	 
>2426	AssignmentExpr	i = 0
>2427	PrimaryExpression	0
>2428	Identifier	i
>2429	ExpressionStatement	 
>2430	CallExpression	S_StartSound ( mo , sfx_itmbk )
>2431	ArgumentList	mo
>2432	Argument	sfx_itmbk
>2433	Identifier	sfx_itmbk
>2434	Argument	mo
>2435	Identifier	mo
>2436	Callee	S_StartSound
>2437	Identifier	S_StartSound
>2438	ExpressionStatement	 
>2439	AssignmentExpr	mo = P_SpawnMobj ( x , y , ss -> sector -> floorheight , MT_IFOG )
>2440	CallExpression	P_SpawnMobj ( x , y , ss -> sector -> floorheight , MT_IFOG )
>2441	ArgumentList	x
>2442	Argument	MT_IFOG
>2443	Identifier	MT_IFOG
>2444	Argument	ss -> sector -> floorheight
>2445	PtrMemberAccess	ss -> sector -> floorheight
>2446	Identifier	floorheight
>2447	PtrMemberAccess	ss -> sector
>2448	Identifier	sector
>2449	Identifier	ss
>2450	Argument	y
>2451	Identifier	y
>2452	Argument	x
>2453	Identifier	x
>2454	Callee	P_SpawnMobj
>2455	Identifier	P_SpawnMobj
>2456	Identifier	mo
>2457	ExpressionStatement	 
>2458	AssignmentExpr	ss = R_PointInSubsector ( x , y )
>2459	CallExpression	R_PointInSubsector ( x , y )
>2460	ArgumentList	x
>2461	Argument	y
>2462	Identifier	y
>2463	Argument	x
>2464	Identifier	x
>2465	Callee	R_PointInSubsector
>2466	Identifier	R_PointInSubsector
>2467	Identifier	ss
>2468	ExpressionStatement	 
>2469	AssignmentExpr	y = mthing -> y << FRACBITS
>2470	ShiftExpression	mthing -> y << FRACBITS
>2471	Identifier	FRACBITS
>2472	PtrMemberAccess	mthing -> y
>2473	Identifier	y
>2474	Identifier	mthing
>2475	Identifier	y
>2476	ExpressionStatement	 
>2477	AssignmentExpr	x = mthing -> x << FRACBITS
>2478	ShiftExpression	mthing -> x << FRACBITS
>2479	Identifier	FRACBITS
>2480	PtrMemberAccess	mthing -> x
>2481	Identifier	x
>2482	Identifier	mthing
>2483	Identifier	x
>2484	ExpressionStatement	 
>2485	Statement	 
>2486	Statement	 
>2487	Statement	 
>2488	Statement	 
>2489	Statement	 
>2490	Statement	 
>2491	Statement	 
>2492	Statement	 
>2493	Statement	 
>2494	Statement	 
>2495	Statement	 
>2496	Statement	 
>2497	Statement	 
>2498	ReturnStatement	 
>2499	Statement	 
>2500	Statement	 
>2501	Statement	 
>2502	Statement	 
>2503	Statement	 
>2504	Statement	 
>2505	Statement	 
>2506	Statement	 
>2507	Statement	 
>2508	Statement	 
>2509	Statement	 
>2510	Statement	 
>2511	Statement	 
>2512	Statement	 
>2513	Statement	 
>2514	Statement	 
>2515	Statement	 
>2516	Statement	 
>2517	Statement	 
>2518	Statement	 
>2519	Statement	 
>2520	Statement	 
>2521	ReturnStatement	 
>2522	Statement	 
>2523	Statement	 
>2524	Statement	 
>2525	Statement	 
>2526	Statement	 
>2527	Statement	 
>2528	Statement	 
>2529	Statement	 
>2530	Statement	 
>2531	Statement	 
>2532	Statement	 
>2533	Statement	 
>2534	ReturnStatement	 
>2535	Statement	 
>2536	Statement	 
>2537	Statement	 
>2538	Statement	 
>2539	Statement	 
>2540	Statement	 
>2541	Statement	 
>2542	Statement	 
>2543	Statement	 
>2544	IdentifierDeclStatement	 
>2545	IdentifierDecl	i
>2546	Identifier	i
>2547	IdentifierDeclType	int
>2548	IdentifierDeclStatement	 
>2549	IdentifierDecl	* mthing
>2550	Identifier	mthing
>2551	IdentifierDeclType	mapthing_t *
>2552	IdentifierDeclStatement	 
>2553	IdentifierDecl	* mo
>2554	Identifier	mo
>2555	IdentifierDeclType	mobj_t *
>2556	IdentifierDeclStatement	 
>2557	IdentifierDecl	* ss
>2558	Identifier	ss
>2559	IdentifierDeclType	subsector_t *
>2560	IdentifierDeclStatement	 
>2561	IdentifierDecl	z
>2562	Identifier	z
>2563	IdentifierDeclType	fixed_t
>2564	IdentifierDeclStatement	 
>2565	IdentifierDecl	y
>2566	Identifier	y
>2567	IdentifierDeclType	fixed_t
>2568	IdentifierDeclStatement	 
>2569	IdentifierDecl	x
>2570	Identifier	x
>2571	IdentifierDeclType	fixed_t
>2610	FunctionDef	P_SpawnPlayer (mapthing_t * mthing)
>2611	ParameterList	mapthing_t * mthing
>2612	Parameter	 
>2613	Identifier	mthing
>2614	ParameterType	mapthing_t *
>2615	ReturnType	void
>2616	CompoundStatement	 
>2617	IfStatement	if ( p -> cheats & CF_GIVEALL )
>2618	CompoundStatement	 
>2619	ForStatement	for ( i = 0 ; i < NUMCARDS ; i ++ )
>2620	ExpressionStatement	 
>2621	AssignmentExpr	p -> cards [ i ] = true
>2622	Identifier	true
>2623	ArrayIndexing	p -> cards [ i ]
>2624	Identifier	i
>2625	PtrMemberAccess	p -> cards
>2626	Identifier	cards
>2627	Identifier	p
>2628	IncDecOp	 
>2629	IncDec	++
>2630	Identifier	i
>2631	Condition	 
>2632	RelationalExpression	i < NUMCARDS
>2633	Identifier	NUMCARDS
>2634	Identifier	i
>2635	ForInit	 
>2636	AssignmentExpr	i = 0
>2637	PrimaryExpression	0
>2638	Identifier	i
>2639	ForStatement	for ( i = 0 ; i < NUMAMMO ; i ++ )
>2640	ExpressionStatement	 
>2641	AssignmentExpr	p -> ammo [ i ] = p -> maxammo [ i ]
>2642	ArrayIndexing	p -> maxammo [ i ]
>2643	Identifier	i
>2644	PtrMemberAccess	p -> maxammo
>2645	Identifier	maxammo
>2646	Identifier	p
>2647	ArrayIndexing	p -> ammo [ i ]
>2648	Identifier	i
>2649	PtrMemberAccess	p -> ammo
>2650	Identifier	ammo
>2651	Identifier	p
>2652	IncDecOp	 
>2653	IncDec	++
>2654	Identifier	i
>2655	Condition	 
>2656	RelationalExpression	i < NUMAMMO
>2657	Identifier	NUMAMMO
>2658	Identifier	i
>2659	ForInit	 
>2660	AssignmentExpr	i = 0
>2661	PrimaryExpression	0
>2662	Identifier	i
>2663	ForStatement	for ( i = 0 ; i < NUMWEAPONS ; i ++ )
>2664	ExpressionStatement	 
>2665	AssignmentExpr	p -> weaponowned [ i ] = true
>2666	Identifier	true
>2667	ArrayIndexing	p -> weaponowned [ i ]
>2668	Identifier	i
>2669	PtrMemberAccess	p -> weaponowned
>2670	Identifier	weaponowned
>2671	Identifier	p
>2672	IncDecOp	 
>2673	IncDec	++
>2674	Identifier	i
>2675	Condition	 
>2676	RelationalExpression	i < NUMWEAPONS
>2677	Identifier	NUMWEAPONS
>2678	Identifier	i
>2679	ForInit	 
>2680	AssignmentExpr	i = 0
>2681	PrimaryExpression	0
>2682	Identifier	i
>2683	IdentifierDeclStatement	 
>2684	IdentifierDecl	i
>2685	Identifier	i
>2686	IdentifierDeclType	int
>2687	ExpressionStatement	 
>2688	AssignmentExpr	p -> armortype = 2
>2689	PrimaryExpression	2
>2690	PtrMemberAccess	p -> armortype
>2691	Identifier	armortype
>2692	Identifier	p
>2693	ExpressionStatement	 
>2694	AssignmentExpr	p -> armorpoints = 200
>2695	PrimaryExpression	200
>2696	PtrMemberAccess	p -> armorpoints
>2697	Identifier	armorpoints
>2698	Identifier	p
>2699	Condition	 
>2700	BitAndExpression	p -> cheats & CF_GIVEALL
>2701	Identifier	CF_GIVEALL
>2702	PtrMemberAccess	p -> cheats
>2703	Identifier	cheats
>2704	Identifier	p
>2705	CompoundStatement	 
>2706	ExpressionStatement	 
>2707	CallExpression	HU_Start ( )
>2708	ArgumentList	 
>2709	Callee	HU_Start
>2710	Identifier	HU_Start
>2711	ExpressionStatement	 
>2712	CallExpression	ST_Start ( )
>2713	ArgumentList	 
>2714	Callee	ST_Start
>2715	Identifier	ST_Start
>2716	Statement	 
>2717	Statement	 
>2718	Statement	 
>2719	Statement	 
>2720	Statement	 
>2721	Statement	 
>2722	Statement	 
>2723	Statement	 
>2724	Statement	 
>2725	Statement	 
>2726	Statement	 
>2727	Statement	 
>2728	Statement	 
>2729	ForStatement	for ( i = 0 ; i < NUMCARDS ; i ++ )
>2730	ExpressionStatement	 
>2731	AssignmentExpr	p -> cards [ i ] = true
>2732	Identifier	true
>2733	ArrayIndexing	p -> cards [ i ]
>2734	Identifier	i
>2735	PtrMemberAccess	p -> cards
>2736	Identifier	cards
>2737	Identifier	p
>2738	IncDecOp	 
>2739	IncDec	++
>2740	Identifier	i
>2741	Condition	 
>2742	RelationalExpression	i < NUMCARDS
>2743	Identifier	NUMCARDS
>2744	Identifier	i
>2745	ForInit	 
>2746	AssignmentExpr	i = 0
>2747	PrimaryExpression	0
>2748	Identifier	i
>2749	Statement	 
>2750	Statement	 
>2751	Statement	 
>2752	Statement	 
>2753	Statement	 
>2754	Statement	 
>2755	Statement	 
>2756	ExpressionStatement	 
>2757	CallExpression	P_SetupPsprites ( p )
>2758	ArgumentList	p
>2759	Argument	p
>2760	Identifier	p
>2761	Callee	P_SetupPsprites
>2762	Identifier	P_SetupPsprites
>2763	ExpressionStatement	 
>2764	AssignmentExpr	p -> viewheight = VIEWHEIGHT
>2765	Identifier	VIEWHEIGHT
>2766	PtrMemberAccess	p -> viewheight
>2767	Identifier	viewheight
>2768	Identifier	p
>2769	ExpressionStatement	 
>2770	AssignmentExpr	p -> fixedcolormap = 0
>2771	PrimaryExpression	0
>2772	PtrMemberAccess	p -> fixedcolormap
>2773	Identifier	fixedcolormap
>2774	Identifier	p
>2775	ExpressionStatement	 
>2776	AssignmentExpr	p -> extralight = 0
>2777	PrimaryExpression	0
>2778	PtrMemberAccess	p -> extralight
>2779	Identifier	extralight
>2780	Identifier	p
>2781	ExpressionStatement	 
>2782	AssignmentExpr	p -> bonuscount = 0
>2783	PrimaryExpression	0
>2784	PtrMemberAccess	p -> bonuscount
>2785	Identifier	bonuscount
>2786	Identifier	p
>2787	ExpressionStatement	 
>2788	AssignmentExpr	p -> damagecount = 0
>2789	PrimaryExpression	0
>2790	PtrMemberAccess	p -> damagecount
>2791	Identifier	damagecount
>2792	Identifier	p
>2793	ExpressionStatement	 
>2794	AssignmentExpr	p -> message = NULL
>2795	Identifier	NULL
>2796	PtrMemberAccess	p -> message
>2797	Identifier	message
>2798	Identifier	p
>2799	ExpressionStatement	 
>2800	AssignmentExpr	p -> refire = 0
>2801	PrimaryExpression	0
>2802	PtrMemberAccess	p -> refire
>2803	Identifier	refire
>2804	Identifier	p
>2805	ExpressionStatement	 
>2806	AssignmentExpr	p -> playerstate = PST_LIVE
>2807	Identifier	PST_LIVE
>2808	PtrMemberAccess	p -> playerstate
>2809	Identifier	playerstate
>2810	Identifier	p
>2811	ExpressionStatement	 
>2812	AssignmentExpr	p -> mo = mobj
>2813	Identifier	mobj
>2814	PtrMemberAccess	p -> mo
>2815	Identifier	mo
>2816	Identifier	p
>2817	ExpressionStatement	 
>2818	AssignmentExpr	mobj -> health = p -> health
>2819	PtrMemberAccess	p -> health
>2820	Identifier	health
>2821	Identifier	p
>2822	PtrMemberAccess	mobj -> health
>2823	Identifier	health
>2824	Identifier	mobj
>2825	ExpressionStatement	 
>2826	AssignmentExpr	mobj -> player = p
>2827	Identifier	p
>2828	PtrMemberAccess	mobj -> player
>2829	Identifier	player
>2830	Identifier	mobj
>2831	ExpressionStatement	 
>2832	AssignmentExpr	mobj -> angle = ANG45 * ( mthing -> angle / 45 )
>2833	MultiplicativeExpression	ANG45 * ( mthing -> angle / 45 )
>2834	MultiplicativeExpression	mthing -> angle / 45
>2835	PrimaryExpression	45
>2836	PtrMemberAccess	mthing -> angle
>2837	Identifier	angle
>2838	Identifier	mthing
>2839	Identifier	ANG45
>2840	PtrMemberAccess	mobj -> angle
>2841	Identifier	angle
>2842	Identifier	mobj
>2843	IfStatement	if ( mthing -> type > 1 )
>2844	ExpressionStatement	 
>2845	AssignmentExpr	mobj -> flags |= ( mthing -> type - 1 ) << MF_TRANSSHIFT
>2846	ShiftExpression	( mthing -> type - 1 ) << MF_TRANSSHIFT
>2847	Identifier	MF_TRANSSHIFT
>2848	AdditiveExpression	mthing -> type - 1
>2849	PrimaryExpression	1
>2850	PtrMemberAccess	mthing -> type
>2851	Identifier	type
>2852	Identifier	mthing
>2853	PtrMemberAccess	mobj -> flags
>2854	Identifier	flags
>2855	Identifier	mobj
>2856	Condition	 
>2857	RelationalExpression	mthing -> type > 1
>2858	PrimaryExpression	1
>2859	PtrMemberAccess	mthing -> type
>2860	Identifier	type
>2861	Identifier	mthing
>2862	ExpressionStatement	 
>2863	AssignmentExpr	mobj = P_SpawnMobj ( x , y , z , MT_PLAYER )
>2864	CallExpression	P_SpawnMobj ( x , y , z , MT_PLAYER )
>2865	ArgumentList	x
>2866	Argument	MT_PLAYER
>2867	Identifier	MT_PLAYER
>2868	Argument	z
>2869	Identifier	z
>2870	Argument	y
>2871	Identifier	y
>2872	Argument	x
>2873	Identifier	x
>2874	Callee	P_SpawnMobj
>2875	Identifier	P_SpawnMobj
>2876	Identifier	mobj
>2877	ExpressionStatement	 
>2878	AssignmentExpr	z = ONFLOORZ
>2879	Identifier	ONFLOORZ
>2880	Identifier	z
>2881	ExpressionStatement	 
>2882	AssignmentExpr	y = mthing -> y << FRACBITS
>2883	ShiftExpression	mthing -> y << FRACBITS
>2884	Identifier	FRACBITS
>2885	PtrMemberAccess	mthing -> y
>2886	Identifier	y
>2887	Identifier	mthing
>2888	Identifier	y
>2889	ExpressionStatement	 
>2890	AssignmentExpr	x = mthing -> x << FRACBITS
>2891	ShiftExpression	mthing -> x << FRACBITS
>2892	Identifier	FRACBITS
>2893	PtrMemberAccess	mthing -> x
>2894	Identifier	x
>2895	Identifier	mthing
>2896	Identifier	x
>2897	IfStatement	if ( p -> playerstate == PST_REBORN )
>2898	ExpressionStatement	 
>2899	CallExpression	G_PlayerReborn ( mthing -> type - 1 )
>2900	ArgumentList	mthing -> type - 1
>2901	Argument	mthing -> type - 1
>2902	AdditiveExpression	mthing -> type - 1
>2903	PrimaryExpression	1
>2904	PtrMemberAccess	mthing -> type
>2905	Identifier	type
>2906	Identifier	mthing
>2907	Callee	G_PlayerReborn
>2908	Identifier	G_PlayerReborn
>2909	Condition	 
>2910	EqualityExpression	p -> playerstate == PST_REBORN
>2911	Identifier	PST_REBORN
>2912	PtrMemberAccess	p -> playerstate
>2913	Identifier	playerstate
>2914	Identifier	p
>2915	ExpressionStatement	 
>2916	ArrayIndexing	g -> players [ mthing -> type - 1 ]
>2917	AdditiveExpression	mthing -> type - 1
>2918	PrimaryExpression	1
>2919	PtrMemberAccess	mthing -> type
>2920	Identifier	type
>2921	Identifier	mthing
>2922	PtrMemberAccess	g -> players
>2923	Identifier	players
>2924	Identifier	g
>2925	Statement	 
>2926	Statement	 
>2927	Statement	 
>2928	Statement	 
>2929	ReturnStatement	 
>2930	Statement	 
>2931	Statement	 
>2932	Statement	 
>2933	Statement	 
>2934	Statement	 
>2935	Statement	 
>2936	Statement	 
>2937	Statement	 
>2938	Statement	 
>2939	Statement	 
>2940	Statement	 
>2941	Statement	 
>2942	Statement	 
>2943	Statement	 
>2944	Statement	 
>2945	IdentifierDeclStatement	 
>2946	IdentifierDecl	i
>2947	Identifier	i
>2948	IdentifierDeclType	int
>2949	IdentifierDeclStatement	 
>2950	IdentifierDecl	* mobj
>2951	Identifier	mobj
>2952	IdentifierDeclType	mobj_t *
>2953	IdentifierDeclStatement	 
>2954	IdentifierDecl	z
>2955	Identifier	z
>2956	IdentifierDeclType	fixed_t
>2957	IdentifierDeclStatement	 
>2958	IdentifierDecl	y
>2959	Identifier	y
>2960	IdentifierDeclType	fixed_t
>2961	IdentifierDeclStatement	 
>2962	IdentifierDecl	x
>2963	Identifier	x
>2964	IdentifierDeclType	fixed_t
>2965	IdentifierDeclStatement	 
>2966	IdentifierDecl	* p
>2967	Identifier	p
>2968	IdentifierDeclType	player_t *
>3031	FunctionDef	P_SpawnMapThing (mapthing_t * mthing)
>3032	ParameterList	mapthing_t * mthing
>3033	Parameter	 
>3034	Identifier	mthing
>3035	ParameterType	mapthing_t *
>3036	ReturnType	void
>3037	CompoundStatement	 
>3038	IfStatement	if ( mthing -> options & MTF_AMBUSH )
>3039	ExpressionStatement	 
>3040	AssignmentExpr	mobj -> flags |= MF_AMBUSH
>3041	Identifier	MF_AMBUSH
>3042	PtrMemberAccess	mobj -> flags
>3043	Identifier	flags
>3044	Identifier	mobj
>3045	Condition	 
>3046	BitAndExpression	mthing -> options & MTF_AMBUSH
>3047	Identifier	MTF_AMBUSH
>3048	PtrMemberAccess	mthing -> options
>3049	Identifier	options
>3050	Identifier	mthing
>3051	ExpressionStatement	 
>3052	AssignmentExpr	mobj -> angle = ANG45 * ( mthing -> angle / 45 )
>3053	MultiplicativeExpression	ANG45 * ( mthing -> angle / 45 )
>3054	MultiplicativeExpression	mthing -> angle / 45
>3055	PrimaryExpression	45
>3056	PtrMemberAccess	mthing -> angle
>3057	Identifier	angle
>3058	Identifier	mthing
>3059	Identifier	ANG45
>3060	PtrMemberAccess	mobj -> angle
>3061	Identifier	angle
>3062	Identifier	mobj
>3063	ExpressionStatement	 
>3064	IncDecOp	g -> totalitems ++
>3065	IncDec	++
>3066	PtrMemberAccess	g -> totalitems
>3067	Identifier	totalitems
>3068	Identifier	g
>3069	IfStatement	if ( mobj -> flags & MF_COUNTITEM )
>3070	Statement	 
>3071	Condition	 
>3072	BitAndExpression	mobj -> flags & MF_COUNTITEM
>3073	Identifier	MF_COUNTITEM
>3074	PtrMemberAccess	mobj -> flags
>3075	Identifier	flags
>3076	Identifier	mobj
>3077	ExpressionStatement	 
>3078	IncDecOp	g -> totalkills ++
>3079	IncDec	++
>3080	PtrMemberAccess	g -> totalkills
>3081	Identifier	totalkills
>3082	Identifier	g
>3083	IfStatement	if ( mobj -> flags & MF_COUNTKILL )
>3084	Statement	 
>3085	Condition	 
>3086	BitAndExpression	mobj -> flags & MF_COUNTKILL
>3087	Identifier	MF_COUNTKILL
>3088	PtrMemberAccess	mobj -> flags
>3089	Identifier	flags
>3090	Identifier	mobj
>3091	IfStatement	if ( mobj -> tics > 0 )
>3092	ExpressionStatement	 
>3093	AssignmentExpr	mobj -> tics = 1 + ( P_Random ( ) % mobj -> tics )
>3094	AdditiveExpression	1 + ( P_Random ( ) % mobj -> tics )
>3095	MultiplicativeExpression	P_Random ( ) % mobj -> tics
>3096	PtrMemberAccess	mobj -> tics
>3097	Identifier	tics
>3098	Identifier	mobj
>3099	CallExpression	P_Random ( )
>3100	ArgumentList	 
>3101	Callee	P_Random
>3102	Identifier	P_Random
>3103	PrimaryExpression	1
>3104	PtrMemberAccess	mobj -> tics
>3105	Identifier	tics
>3106	Identifier	mobj
>3107	Condition	 
>3108	RelationalExpression	mobj -> tics > 0
>3109	PrimaryExpression	0
>3110	PtrMemberAccess	mobj -> tics
>3111	Identifier	tics
>3112	Identifier	mobj
>3113	ExpressionStatement	 
>3114	AssignmentExpr	mobj -> spawnpoint = * mthing
>3115	UnaryOp	* mthing
>3116	Identifier	mthing
>3117	UnaryOperator	*
>3118	PtrMemberAccess	mobj -> spawnpoint
>3119	Identifier	spawnpoint
>3120	Identifier	mobj
>3121	ExpressionStatement	 
>3122	AssignmentExpr	mobj = ( mobj_t * ) P_SpawnMobj ( x , y , z , ( mobjtype_t ) i )
>3123	CastExpression	( mobj_t * ) P_SpawnMobj ( x , y , z , ( mobjtype_t ) i )
>3124	CallExpression	P_SpawnMobj ( x , y , z , ( mobjtype_t ) i )
>3125	ArgumentList	x
>3126	Argument	( mobjtype_t ) i
>3127	CastExpression	( mobjtype_t ) i
>3128	Identifier	i
>3129	CastTarget	mobjtype_t
>3130	Argument	z
>3131	Identifier	z
>3132	Argument	y
>3133	Identifier	y
>3134	Argument	x
>3135	Identifier	x
>3136	Callee	P_SpawnMobj
>3137	Identifier	P_SpawnMobj
>3138	CastTarget	mobj_t *
>3139	Identifier	mobj
>3140	IfStatement	if ( mobjinfo [ i ] . flags & MF_SPAWNCEILING )
>3141	ElseStatement	else
>3142	ExpressionStatement	 
>3143	AssignmentExpr	z = ONFLOORZ
>3144	Identifier	ONFLOORZ
>3145	Identifier	z
>3146	ExpressionStatement	 
>3147	AssignmentExpr	z = ONCEILINGZ
>3148	Identifier	ONCEILINGZ
>3149	Identifier	z
>3150	Condition	 
>3151	BitAndExpression	mobjinfo [ i ] . flags & MF_SPAWNCEILING
>3152	Identifier	MF_SPAWNCEILING
>3153	MemberAccess	mobjinfo [ i ] . flags
>3154	Identifier	flags
>3155	ArrayIndexing	mobjinfo [ i ]
>3156	Identifier	i
>3157	Identifier	mobjinfo
>3158	ExpressionStatement	 
>3159	AssignmentExpr	y = mthing -> y << FRACBITS
>3160	ShiftExpression	mthing -> y << FRACBITS
>3161	Identifier	FRACBITS
>3162	PtrMemberAccess	mthing -> y
>3163	Identifier	y
>3164	Identifier	mthing
>3165	Identifier	y
>3166	ExpressionStatement	 
>3167	AssignmentExpr	x = mthing -> x << FRACBITS
>3168	ShiftExpression	mthing -> x << FRACBITS
>3169	Identifier	FRACBITS
>3170	PtrMemberAccess	mthing -> x
>3171	Identifier	x
>3172	Identifier	mthing
>3173	Identifier	x
>3174	CompoundStatement	 
>3175	ReturnStatement	 
>3176	Statement	 
>3177	Statement	 
>3178	Statement	 
>3179	Statement	 
>3180	Statement	 
>3181	Statement	 
>3182	Statement	 
>3183	Statement	 
>3184	Statement	 
>3185	Statement	 
>3186	Statement	 
>3187	Statement	 
>3188	Statement	 
>3189	Statement	 
>3190	Statement	 
>3191	Statement	 
>3192	Statement	 
>3193	Statement	 
>3194	Statement	 
>3195	Statement	 
>3196	Statement	 
>3197	Statement	 
>3198	Statement	 
>3199	Statement	 
>3200	ReturnStatement	 
>3201	Statement	 
>3202	Statement	 
>3203	Statement	 
>3204	Statement	 
>3205	Statement	 
>3206	Statement	 
>3207	Statement	 
>3208	Statement	 
>3209	Statement	 
>3210	Statement	 
>3211	Statement	 
>3212	Statement	 
>3213	Statement	 
>3214	Statement	 
>3215	Statement	 
>3216	Statement	 
>3217	IfStatement	if ( i == NUMMOBJTYPES )
>3218	CompoundStatement	 
>3219	ReturnStatement	 
>3220	Condition	 
>3221	EqualityExpression	i == NUMMOBJTYPES
>3222	Identifier	NUMMOBJTYPES
>3223	Identifier	i
>3224	ForStatement	for ( i = 0 ; i < NUMMOBJTYPES ; i ++ )
>3225	IfStatement	if ( mthing -> type == mobjinfo [ i ] . doomednum )
>3226	BreakStatement	 
>3227	Condition	 
>3228	EqualityExpression	mthing -> type == mobjinfo [ i ] . doomednum
>3229	MemberAccess	mobjinfo [ i ] . doomednum
>3230	Identifier	doomednum
>3231	ArrayIndexing	mobjinfo [ i ]
>3232	Identifier	i
>3233	Identifier	mobjinfo
>3234	PtrMemberAccess	mthing -> type
>3235	Identifier	type
>3236	Identifier	mthing
>3237	IncDecOp	 
>3238	IncDec	++
>3239	Identifier	i
>3240	Condition	 
>3241	RelationalExpression	i < NUMMOBJTYPES
>3242	Identifier	NUMMOBJTYPES
>3243	Identifier	i
>3244	ForInit	 
>3245	AssignmentExpr	i = 0
>3246	PrimaryExpression	0
>3247	Identifier	i
>3248	IfStatement	if ( ! ( mthing -> options & bit ) )
>3249	ReturnStatement	 
>3250	Condition	 
>3251	UnaryOp	! ( mthing -> options & bit )
>3252	BitAndExpression	mthing -> options & bit
>3253	Identifier	bit
>3254	PtrMemberAccess	mthing -> options
>3255	Identifier	options
>3256	Identifier	mthing
>3257	UnaryOperator	!
>3258	ExpressionStatement	 
>3259	Statement	 
>3260	Statement	 
>3261	Statement	 
>3262	Statement	 
>3263	Statement	 
>3264	Statement	 
>3265	Statement	 
>3266	Statement	 
>3267	Statement	 
>3268	Statement	 
>3269	Statement	 
>3270	ExpressionStatement	 
>3271	AssignmentExpr	bit = 4
>3272	PrimaryExpression	4
>3273	Identifier	bit
>3274	Statement	 
>3275	Statement	 
>3276	Statement	 
>3277	Statement	 
>3278	Statement	 
>3279	Statement	 
>3280	Statement	 
>3281	Statement	 
>3282	ExpressionStatement	 
>3283	AssignmentExpr	bit = 1
>3284	PrimaryExpression	1
>3285	Identifier	bit
>3286	Statement	 
>3287	Statement	 
>3288	Statement	 
>3289	Statement	 
>3290	Statement	 
>3291	Statement	 
>3292	Statement	 
>3293	Statement	 
>3294	Statement	 
>3295	ReturnStatement	 
>3296	Statement	 
>3297	Statement	 
>3298	Statement	 
>3299	Statement	 
>3300	Statement	 
>3301	Statement	 
>3302	Statement	 
>3303	Statement	 
>3304	Statement	 
>3305	Statement	 
>3306	Statement	 
>3307	Statement	 
>3308	Statement	 
>3309	Statement	 
>3310	Statement	 
>3311	Statement	 
>3312	IfStatement	if ( mthing -> type <= 4 )
>3313	ElseStatement	else
>3314	Statement	 
>3315	CompoundStatement	 
>3316	ReturnStatement	 
>3317	ExpressionStatement	 
>3318	CallExpression	P_SpawnPlayer ( mthing )
>3319	ArgumentList	mthing
>3320	Argument	mthing
>3321	Identifier	mthing
>3322	Callee	P_SpawnPlayer
>3323	Identifier	P_SpawnPlayer
>3324	Statement	 
>3325	Statement	 
>3326	Statement	 
>3327	Statement	 
>3328	Statement	 
>3329	Statement	 
>3330	Statement	 
>3331	Statement	 
>3332	ExpressionStatement	 
>3333	AssignmentExpr	g -> playerstarts [ mthing -> type - 1 ] = * mthing
>3334	UnaryOp	* mthing
>3335	Identifier	mthing
>3336	UnaryOperator	*
>3337	ArrayIndexing	g -> playerstarts [ mthing -> type - 1 ]
>3338	AdditiveExpression	mthing -> type - 1
>3339	PrimaryExpression	1
>3340	PtrMemberAccess	mthing -> type
>3341	Identifier	type
>3342	Identifier	mthing
>3343	PtrMemberAccess	g -> playerstarts
>3344	Identifier	playerstarts
>3345	Identifier	g
>3346	Statement	 
>3347	Condition	 
>3348	RelationalExpression	mthing -> type <= 4
>3349	PrimaryExpression	4
>3350	PtrMemberAccess	mthing -> type
>3351	Identifier	type
>3352	Identifier	mthing
>3353	IfStatement	if ( mthing -> type == 11 )
>3354	ElseStatement	else
>3355	Statement	 
>3356	CompoundStatement	 
>3357	ReturnStatement	 
>3358	CompoundStatement	 
>3359	ExpressionStatement	 
>3360	IncDecOp	g -> deathmatch_p ++
>3361	IncDec	++
>3362	PtrMemberAccess	g -> deathmatch_p
>3363	Identifier	deathmatch_p
>3364	Identifier	g
>3365	Statement	 
>3366	ExpressionStatement	 
>3367	Statement	 
>3368	Statement	 
>3369	Statement	 
>3370	Statement	 
>3371	Statement	 
>3372	Statement	 
>3373	Statement	 
>3374	Statement	 
>3375	Statement	 
>3376	Statement	 
>3377	Statement	 
>3378	Statement	 
>3379	Statement	 
>3380	Statement	 
>3381	Statement	 
>3382	Statement	 
>3383	Statement	 
>3384	Statement	 
>3385	Statement	 
>3386	Statement	 
>3387	Statement	 
>3388	Statement	 
>3389	Statement	 
>3390	Statement	 
>3391	Statement	 
>3392	Statement	 
>3393	Statement	 
>3394	Statement	 
>3395	Statement	 
>3396	Statement	 
>3397	Statement	 
>3398	Condition	 
>3399	EqualityExpression	mthing -> type == 11
>3400	PrimaryExpression	11
>3401	PtrMemberAccess	mthing -> type
>3402	Identifier	type
>3403	Identifier	mthing
>3404	IdentifierDeclStatement	 
>3405	IdentifierDecl	z
>3406	Identifier	z
>3407	IdentifierDeclType	fixed_t
>3408	IdentifierDeclStatement	 
>3409	IdentifierDecl	y
>3410	Identifier	y
>3411	IdentifierDeclType	fixed_t
>3412	IdentifierDeclStatement	 
>3413	IdentifierDecl	x
>3414	Identifier	x
>3415	IdentifierDeclType	fixed_t
>3416	IdentifierDeclStatement	 
>3417	IdentifierDecl	* mobj
>3418	Identifier	mobj
>3419	IdentifierDeclType	mobj_t *
>3420	IdentifierDeclStatement	 
>3421	IdentifierDecl	bit
>3422	Identifier	bit
>3423	IdentifierDeclType	int
>3424	IdentifierDeclStatement	 
>3425	IdentifierDecl	i
>3426	Identifier	i
>3427	IdentifierDeclType	int
>3476	FunctionDef	P_SpawnPuff (fixed_t x , fixed_t y , fixed_t z)
>3477	ParameterList	fixed_t x , fixed_t y , fixed_t z
>3478	Parameter	 
>3479	Identifier	z
>3480	ParameterType	fixed_t
>3481	Parameter	 
>3482	Identifier	y
>3483	ParameterType	fixed_t
>3484	Parameter	 
>3485	Identifier	x
>3486	ParameterType	fixed_t
>3487	ReturnType	void
>3488	CompoundStatement	 
>3489	CompoundStatement	 
>3490	ExpressionStatement	 
>3491	CallExpression	P_SetMobjState ( th , S_PUFF3 )
>3492	ArgumentList	th
>3493	Argument	S_PUFF3
>3494	Identifier	S_PUFF3
>3495	Argument	th
>3496	Identifier	th
>3497	Callee	P_SetMobjState
>3498	Identifier	P_SetMobjState
>3499	Statement	 
>3500	Statement	 
>3501	Statement	 
>3502	Statement	 
>3503	Statement	 
>3504	Statement	 
>3505	Statement	 
>3506	Statement	 
>3507	Statement	 
>3508	IfStatement	if ( th -> tics < 1 )
>3509	ExpressionStatement	 
>3510	AssignmentExpr	th -> tics = 1
>3511	PrimaryExpression	1
>3512	PtrMemberAccess	th -> tics
>3513	Identifier	tics
>3514	Identifier	th
>3515	Condition	 
>3516	RelationalExpression	th -> tics < 1
>3517	PrimaryExpression	1
>3518	PtrMemberAccess	th -> tics
>3519	Identifier	tics
>3520	Identifier	th
>3521	ExpressionStatement	 
>3522	AssignmentExpr	th -> tics -= P_Random ( ) & 3
>3523	BitAndExpression	P_Random ( ) & 3
>3524	PrimaryExpression	3
>3525	CallExpression	P_Random ( )
>3526	ArgumentList	 
>3527	Callee	P_Random
>3528	Identifier	P_Random
>3529	PtrMemberAccess	th -> tics
>3530	Identifier	tics
>3531	Identifier	th
>3532	ExpressionStatement	 
>3533	AssignmentExpr	th -> momz = FRACUNIT
>3534	Identifier	FRACUNIT
>3535	PtrMemberAccess	th -> momz
>3536	Identifier	momz
>3537	Identifier	th
>3538	ExpressionStatement	 
>3539	AssignmentExpr	th = P_SpawnMobj ( x , y , z , MT_PUFF )
>3540	CallExpression	P_SpawnMobj ( x , y , z , MT_PUFF )
>3541	ArgumentList	x
>3542	Argument	MT_PUFF
>3543	Identifier	MT_PUFF
>3544	Argument	z
>3545	Identifier	z
>3546	Argument	y
>3547	Identifier	y
>3548	Argument	x
>3549	Identifier	x
>3550	Callee	P_SpawnMobj
>3551	Identifier	P_SpawnMobj
>3552	Identifier	th
>3553	ExpressionStatement	 
>3554	AssignmentExpr	z += ( ( P_Random ( ) - P_Random ( ) ) << 10 )
>3555	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 10
>3556	PrimaryExpression	10
>3557	AdditiveExpression	P_Random ( ) - P_Random ( )
>3558	CallExpression	P_Random ( )
>3559	ArgumentList	 
>3560	Callee	P_Random
>3561	Identifier	P_Random
>3562	CallExpression	P_Random ( )
>3563	ArgumentList	 
>3564	Callee	P_Random
>3565	Identifier	P_Random
>3566	Identifier	z
>3567	IdentifierDeclStatement	 
>3568	IdentifierDecl	* th
>3569	Identifier	th
>3570	IdentifierDeclType	mobj_t *
>3586	FunctionDef	P_SpawnBlood (fixed_t x , fixed_t y , fixed_t z , int damage)
>3587	ParameterList	fixed_t x , fixed_t y , fixed_t z , int damage
>3588	Parameter	 
>3589	Identifier	damage
>3590	ParameterType	int
>3591	Parameter	 
>3592	Identifier	z
>3593	ParameterType	fixed_t
>3594	Parameter	 
>3595	Identifier	y
>3596	ParameterType	fixed_t
>3597	Parameter	 
>3598	Identifier	x
>3599	ParameterType	fixed_t
>3600	ReturnType	void
>3601	CompoundStatement	 
>3602	IfStatement	if ( damage <= 12 && damage >= 9 )
>3603	ElseStatement	else
>3604	IfStatement	if ( damage < 9 )
>3605	ExpressionStatement	 
>3606	CallExpression	P_SetMobjState ( th , S_BLOOD3 )
>3607	ArgumentList	th
>3608	Argument	S_BLOOD3
>3609	Identifier	S_BLOOD3
>3610	Argument	th
>3611	Identifier	th
>3612	Callee	P_SetMobjState
>3613	Identifier	P_SetMobjState
>3614	Condition	 
>3615	RelationalExpression	damage < 9
>3616	PrimaryExpression	9
>3617	Identifier	damage
>3618	ExpressionStatement	 
>3619	CallExpression	P_SetMobjState ( th , S_BLOOD2 )
>3620	ArgumentList	th
>3621	Argument	S_BLOOD2
>3622	Identifier	S_BLOOD2
>3623	Argument	th
>3624	Identifier	th
>3625	Callee	P_SetMobjState
>3626	Identifier	P_SetMobjState
>3627	Condition	 
>3628	AndExpression	damage <= 12 && damage >= 9
>3629	RelationalExpression	damage >= 9
>3630	PrimaryExpression	9
>3631	Identifier	damage
>3632	RelationalExpression	damage <= 12
>3633	PrimaryExpression	12
>3634	Identifier	damage
>3635	IfStatement	if ( th -> tics < 1 )
>3636	ExpressionStatement	 
>3637	AssignmentExpr	th -> tics = 1
>3638	PrimaryExpression	1
>3639	PtrMemberAccess	th -> tics
>3640	Identifier	tics
>3641	Identifier	th
>3642	Condition	 
>3643	RelationalExpression	th -> tics < 1
>3644	PrimaryExpression	1
>3645	PtrMemberAccess	th -> tics
>3646	Identifier	tics
>3647	Identifier	th
>3648	ExpressionStatement	 
>3649	AssignmentExpr	th -> tics -= P_Random ( ) & 3
>3650	BitAndExpression	P_Random ( ) & 3
>3651	PrimaryExpression	3
>3652	CallExpression	P_Random ( )
>3653	ArgumentList	 
>3654	Callee	P_Random
>3655	Identifier	P_Random
>3656	PtrMemberAccess	th -> tics
>3657	Identifier	tics
>3658	Identifier	th
>3659	ExpressionStatement	 
>3660	AssignmentExpr	th -> momz = FRACUNIT * 2
>3661	MultiplicativeExpression	FRACUNIT * 2
>3662	PrimaryExpression	2
>3663	Identifier	FRACUNIT
>3664	PtrMemberAccess	th -> momz
>3665	Identifier	momz
>3666	Identifier	th
>3667	ExpressionStatement	 
>3668	AssignmentExpr	th = P_SpawnMobj ( x , y , z , MT_BLOOD )
>3669	CallExpression	P_SpawnMobj ( x , y , z , MT_BLOOD )
>3670	ArgumentList	x
>3671	Argument	MT_BLOOD
>3672	Identifier	MT_BLOOD
>3673	Argument	z
>3674	Identifier	z
>3675	Argument	y
>3676	Identifier	y
>3677	Argument	x
>3678	Identifier	x
>3679	Callee	P_SpawnMobj
>3680	Identifier	P_SpawnMobj
>3681	Identifier	th
>3682	ExpressionStatement	 
>3683	AssignmentExpr	z += ( ( P_Random ( ) - P_Random ( ) ) << 10 )
>3684	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 10
>3685	PrimaryExpression	10
>3686	AdditiveExpression	P_Random ( ) - P_Random ( )
>3687	CallExpression	P_Random ( )
>3688	ArgumentList	 
>3689	Callee	P_Random
>3690	Identifier	P_Random
>3691	CallExpression	P_Random ( )
>3692	ArgumentList	 
>3693	Callee	P_Random
>3694	Identifier	P_Random
>3695	Identifier	z
>3696	IdentifierDeclStatement	 
>3697	IdentifierDecl	* th
>3698	Identifier	th
>3699	IdentifierDeclType	mobj_t *
>3717	FunctionDef	P_CheckMissileSpawn (mobj_t * th)
>3718	ParameterList	mobj_t * th
>3719	Parameter	 
>3720	Identifier	th
>3721	ParameterType	mobj_t *
>3722	ReturnType	void
>3723	CompoundStatement	 
>3724	IfStatement	if ( ! P_TryMove ( th , th -> x , th -> y ) )
>3725	ExpressionStatement	 
>3726	CallExpression	P_ExplodeMissile ( th )
>3727	ArgumentList	th
>3728	Argument	th
>3729	Identifier	th
>3730	Callee	P_ExplodeMissile
>3731	Identifier	P_ExplodeMissile
>3732	Condition	 
>3733	UnaryOp	! P_TryMove ( th , th -> x , th -> y )
>3734	CallExpression	P_TryMove ( th , th -> x , th -> y )
>3735	ArgumentList	th
>3736	Argument	th -> y
>3737	PtrMemberAccess	th -> y
>3738	Identifier	y
>3739	Identifier	th
>3740	Argument	th -> x
>3741	PtrMemberAccess	th -> x
>3742	Identifier	x
>3743	Identifier	th
>3744	Argument	th
>3745	Identifier	th
>3746	Callee	P_TryMove
>3747	Identifier	P_TryMove
>3748	UnaryOperator	!
>3749	ExpressionStatement	 
>3750	AssignmentExpr	th -> z += ( th -> momz >> 1 )
>3751	ShiftExpression	th -> momz >> 1
>3752	PrimaryExpression	1
>3753	PtrMemberAccess	th -> momz
>3754	Identifier	momz
>3755	Identifier	th
>3756	PtrMemberAccess	th -> z
>3757	Identifier	z
>3758	Identifier	th
>3759	ExpressionStatement	 
>3760	AssignmentExpr	th -> y += ( th -> momy >> 1 )
>3761	ShiftExpression	th -> momy >> 1
>3762	PrimaryExpression	1
>3763	PtrMemberAccess	th -> momy
>3764	Identifier	momy
>3765	Identifier	th
>3766	PtrMemberAccess	th -> y
>3767	Identifier	y
>3768	Identifier	th
>3769	ExpressionStatement	 
>3770	AssignmentExpr	th -> x += ( th -> momx >> 1 )
>3771	ShiftExpression	th -> momx >> 1
>3772	PrimaryExpression	1
>3773	PtrMemberAccess	th -> momx
>3774	Identifier	momx
>3775	Identifier	th
>3776	PtrMemberAccess	th -> x
>3777	Identifier	x
>3778	Identifier	th
>3779	IfStatement	if ( th -> tics < 1 )
>3780	ExpressionStatement	 
>3781	AssignmentExpr	th -> tics = 1
>3782	PrimaryExpression	1
>3783	PtrMemberAccess	th -> tics
>3784	Identifier	tics
>3785	Identifier	th
>3786	Condition	 
>3787	RelationalExpression	th -> tics < 1
>3788	PrimaryExpression	1
>3789	PtrMemberAccess	th -> tics
>3790	Identifier	tics
>3791	Identifier	th
>3792	ExpressionStatement	 
>3793	AssignmentExpr	th -> tics -= P_Random ( ) & 3
>3794	BitAndExpression	P_Random ( ) & 3
>3795	PrimaryExpression	3
>3796	CallExpression	P_Random ( )
>3797	ArgumentList	 
>3798	Callee	P_Random
>3799	Identifier	P_Random
>3800	PtrMemberAccess	th -> tics
>3801	Identifier	tics
>3802	Identifier	th
>3817	FunctionDef	P_SpawnMissile (mobj_t * source , mobj_t * dest , mobjtype_t type)
>3818	ParameterList	mobj_t * source , mobj_t * dest , mobjtype_t type
>3819	Parameter	 
>3820	Identifier	type
>3821	ParameterType	mobjtype_t
>3822	Parameter	 
>3823	Identifier	dest
>3824	ParameterType	mobj_t *
>3825	Parameter	 
>3826	Identifier	source
>3827	ParameterType	mobj_t *
>3828	ReturnType	mobj_t *
>3829	CompoundStatement	 
>3830	ReturnStatement	 
>3831	Identifier	th
>3832	ExpressionStatement	 
>3833	CallExpression	P_CheckMissileSpawn ( th )
>3834	ArgumentList	th
>3835	Argument	th
>3836	Identifier	th
>3837	Callee	P_CheckMissileSpawn
>3838	Identifier	P_CheckMissileSpawn
>3839	ExpressionStatement	 
>3840	AssignmentExpr	th -> momz = ( dest -> z - source -> z ) / dist
>3841	MultiplicativeExpression	( dest -> z - source -> z ) / dist
>3842	Identifier	dist
>3843	AdditiveExpression	dest -> z - source -> z
>3844	PtrMemberAccess	source -> z
>3845	Identifier	z
>3846	Identifier	source
>3847	PtrMemberAccess	dest -> z
>3848	Identifier	z
>3849	Identifier	dest
>3850	PtrMemberAccess	th -> momz
>3851	Identifier	momz
>3852	Identifier	th
>3853	IfStatement	if ( dist < 1 )
>3854	ExpressionStatement	 
>3855	AssignmentExpr	dist = 1
>3856	PrimaryExpression	1
>3857	Identifier	dist
>3858	Condition	 
>3859	RelationalExpression	dist < 1
>3860	PrimaryExpression	1
>3861	Identifier	dist
>3862	ExpressionStatement	 
>3863	AssignmentExpr	dist = dist / th -> info -> speed
>3864	MultiplicativeExpression	dist / th -> info -> speed
>3865	PtrMemberAccess	th -> info -> speed
>3866	Identifier	speed
>3867	PtrMemberAccess	th -> info
>3868	Identifier	info
>3869	Identifier	th
>3870	Identifier	dist
>3871	Identifier	dist
>3872	ExpressionStatement	 
>3873	AssignmentExpr	dist = P_AproxDistance ( dest -> x - source -> x , dest -> y - source -> y )
>3874	CallExpression	P_AproxDistance ( dest -> x - source -> x , dest -> y - source -> y )
>3875	ArgumentList	dest -> x - source -> x
>3876	Argument	dest -> y - source -> y
>3877	AdditiveExpression	dest -> y - source -> y
>3878	PtrMemberAccess	source -> y
>3879	Identifier	y
>3880	Identifier	source
>3881	PtrMemberAccess	dest -> y
>3882	Identifier	y
>3883	Identifier	dest
>3884	Argument	dest -> x - source -> x
>3885	AdditiveExpression	dest -> x - source -> x
>3886	PtrMemberAccess	source -> x
>3887	Identifier	x
>3888	Identifier	source
>3889	PtrMemberAccess	dest -> x
>3890	Identifier	x
>3891	Identifier	dest
>3892	Callee	P_AproxDistance
>3893	Identifier	P_AproxDistance
>3894	Identifier	dist
>3895	ExpressionStatement	 
>3896	AssignmentExpr	th -> momy = FixedMul ( th -> info -> speed , finesine [ an ] )
>3897	CallExpression	FixedMul ( th -> info -> speed , finesine [ an ] )
>3898	ArgumentList	th -> info -> speed
>3899	Argument	finesine [ an ]
>3900	ArrayIndexing	finesine [ an ]
>3901	Identifier	an
>3902	Identifier	finesine
>3903	Argument	th -> info -> speed
>3904	PtrMemberAccess	th -> info -> speed
>3905	Identifier	speed
>3906	PtrMemberAccess	th -> info
>3907	Identifier	info
>3908	Identifier	th
>3909	Callee	FixedMul
>3910	Identifier	FixedMul
>3911	PtrMemberAccess	th -> momy
>3912	Identifier	momy
>3913	Identifier	th
>3914	ExpressionStatement	 
>3915	AssignmentExpr	th -> momx = FixedMul ( th -> info -> speed , finecosine [ an ] )
>3916	CallExpression	FixedMul ( th -> info -> speed , finecosine [ an ] )
>3917	ArgumentList	th -> info -> speed
>3918	Argument	finecosine [ an ]
>3919	ArrayIndexing	finecosine [ an ]
>3920	Identifier	an
>3921	Identifier	finecosine
>3922	Argument	th -> info -> speed
>3923	PtrMemberAccess	th -> info -> speed
>3924	Identifier	speed
>3925	PtrMemberAccess	th -> info
>3926	Identifier	info
>3927	Identifier	th
>3928	Callee	FixedMul
>3929	Identifier	FixedMul
>3930	PtrMemberAccess	th -> momx
>3931	Identifier	momx
>3932	Identifier	th
>3933	ExpressionStatement	 
>3934	AssignmentExpr	an >>= ANGLETOFINESHIFT
>3935	Identifier	ANGLETOFINESHIFT
>3936	Identifier	an
>3937	ExpressionStatement	 
>3938	AssignmentExpr	th -> angle = an
>3939	Identifier	an
>3940	PtrMemberAccess	th -> angle
>3941	Identifier	angle
>3942	Identifier	th
>3943	IfStatement	if ( dest -> flags & MF_SHADOW )
>3944	ExpressionStatement	 
>3945	AssignmentExpr	an += ( P_Random ( ) - P_Random ( ) ) << 20
>3946	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 20
>3947	PrimaryExpression	20
>3948	AdditiveExpression	P_Random ( ) - P_Random ( )
>3949	CallExpression	P_Random ( )
>3950	ArgumentList	 
>3951	Callee	P_Random
>3952	Identifier	P_Random
>3953	CallExpression	P_Random ( )
>3954	ArgumentList	 
>3955	Callee	P_Random
>3956	Identifier	P_Random
>3957	Identifier	an
>3958	Condition	 
>3959	BitAndExpression	dest -> flags & MF_SHADOW
>3960	Identifier	MF_SHADOW
>3961	PtrMemberAccess	dest -> flags
>3962	Identifier	flags
>3963	Identifier	dest
>3964	ExpressionStatement	 
>3965	AssignmentExpr	an = R_PointToAngle2 ( source -> x , source -> y , dest -> x , dest -> y )
>3966	CallExpression	R_PointToAngle2 ( source -> x , source -> y , dest -> x , dest -> y )
>3967	ArgumentList	source -> x
>3968	Argument	dest -> y
>3969	PtrMemberAccess	dest -> y
>3970	Identifier	y
>3971	Identifier	dest
>3972	Argument	dest -> x
>3973	PtrMemberAccess	dest -> x
>3974	Identifier	x
>3975	Identifier	dest
>3976	Argument	source -> y
>3977	PtrMemberAccess	source -> y
>3978	Identifier	y
>3979	Identifier	source
>3980	Argument	source -> x
>3981	PtrMemberAccess	source -> x
>3982	Identifier	x
>3983	Identifier	source
>3984	Callee	R_PointToAngle2
>3985	Identifier	R_PointToAngle2
>3986	Identifier	an
>3987	ExpressionStatement	 
>3988	AssignmentExpr	th -> target = source
>3989	Identifier	source
>3990	PtrMemberAccess	th -> target
>3991	Identifier	target
>3992	Identifier	th
>3993	IfStatement	if ( th -> info -> seesound )
>3994	ExpressionStatement	 
>3995	CallExpression	S_StartSound ( th , th -> info -> seesound )
>3996	ArgumentList	th
>3997	Argument	th -> info -> seesound
>3998	PtrMemberAccess	th -> info -> seesound
>3999	Identifier	seesound
>4000	PtrMemberAccess	th -> info
>4001	Identifier	info
>4002	Identifier	th
>4003	Argument	th
>4004	Identifier	th
>4005	Callee	S_StartSound
>4006	Identifier	S_StartSound
>4007	Condition	 
>4008	PtrMemberAccess	th -> info -> seesound
>4009	Identifier	seesound
>4010	PtrMemberAccess	th -> info
>4011	Identifier	info
>4012	Identifier	th
>4013	ExpressionStatement	 
>4014	AssignmentExpr	th = P_SpawnMobj ( source -> x , source -> y , source -> z + 4 * 8 * FRACUNIT , type )
>4015	CallExpression	P_SpawnMobj ( source -> x , source -> y , source -> z + 4 * 8 * FRACUNIT , type )
>4016	ArgumentList	source -> x
>4017	Argument	type
>4018	Identifier	type
>4019	Argument	source -> z + 4 * 8 * FRACUNIT
>4020	AdditiveExpression	source -> z + 4 * 8 * FRACUNIT
>4021	MultiplicativeExpression	4 * 8 * FRACUNIT
>4022	MultiplicativeExpression	8 * FRACUNIT
>4023	Identifier	FRACUNIT
>4024	PrimaryExpression	8
>4025	PrimaryExpression	4
>4026	PtrMemberAccess	source -> z
>4027	Identifier	z
>4028	Identifier	source
>4029	Argument	source -> y
>4030	PtrMemberAccess	source -> y
>4031	Identifier	y
>4032	Identifier	source
>4033	Argument	source -> x
>4034	PtrMemberAccess	source -> x
>4035	Identifier	x
>4036	Identifier	source
>4037	Callee	P_SpawnMobj
>4038	Identifier	P_SpawnMobj
>4039	Identifier	th
>4040	IdentifierDeclStatement	 
>4041	IdentifierDecl	dist
>4042	Identifier	dist
>4043	IdentifierDeclType	int
>4044	IdentifierDeclStatement	 
>4045	IdentifierDecl	an
>4046	Identifier	an
>4047	IdentifierDeclType	angle_t
>4048	IdentifierDeclStatement	 
>4049	IdentifierDecl	* th
>4050	Identifier	th
>4051	IdentifierDeclType	mobj_t *
>4094	FunctionDef	P_SpawnPlayerMissile (mobj_t * source , mobjtype_t type)
>4095	ParameterList	mobj_t * source , mobjtype_t type
>4096	Parameter	 
>4097	Identifier	type
>4098	ParameterType	mobjtype_t
>4099	Parameter	 
>4100	Identifier	source
>4101	ParameterType	mobj_t *
>4102	ReturnType	void
>4103	CompoundStatement	 
>4104	ExpressionStatement	 
>4105	CallExpression	P_CheckMissileSpawn ( th )
>4106	ArgumentList	th
>4107	Argument	th
>4108	Identifier	th
>4109	Callee	P_CheckMissileSpawn
>4110	Identifier	P_CheckMissileSpawn
>4111	ExpressionStatement	 
>4112	AssignmentExpr	th -> momz = FixedMul ( th -> info -> speed , slope )
>4113	CallExpression	FixedMul ( th -> info -> speed , slope )
>4114	ArgumentList	th -> info -> speed
>4115	Argument	slope
>4116	Identifier	slope
>4117	Argument	th -> info -> speed
>4118	PtrMemberAccess	th -> info -> speed
>4119	Identifier	speed
>4120	PtrMemberAccess	th -> info
>4121	Identifier	info
>4122	Identifier	th
>4123	Callee	FixedMul
>4124	Identifier	FixedMul
>4125	PtrMemberAccess	th -> momz
>4126	Identifier	momz
>4127	Identifier	th
>4128	ExpressionStatement	 
>4129	AssignmentExpr	th -> momy = FixedMul ( th -> info -> speed , finesine [ an >> ANGLETOFINESHIFT ] )
>4130	CallExpression	FixedMul ( th -> info -> speed , finesine [ an >> ANGLETOFINESHIFT ] )
>4131	ArgumentList	th -> info -> speed
>4132	Argument	finesine [ an >> ANGLETOFINESHIFT ]
>4133	ArrayIndexing	finesine [ an >> ANGLETOFINESHIFT ]
>4134	ShiftExpression	an >> ANGLETOFINESHIFT
>4135	Identifier	ANGLETOFINESHIFT
>4136	Identifier	an
>4137	Identifier	finesine
>4138	Argument	th -> info -> speed
>4139	PtrMemberAccess	th -> info -> speed
>4140	Identifier	speed
>4141	PtrMemberAccess	th -> info
>4142	Identifier	info
>4143	Identifier	th
>4144	Callee	FixedMul
>4145	Identifier	FixedMul
>4146	PtrMemberAccess	th -> momy
>4147	Identifier	momy
>4148	Identifier	th
>4149	ExpressionStatement	 
>4150	AssignmentExpr	th -> momx = FixedMul ( th -> info -> speed , finecosine [ an >> ANGLETOFINESHIFT ] )
>4151	CallExpression	FixedMul ( th -> info -> speed , finecosine [ an >> ANGLETOFINESHIFT ] )
>4152	ArgumentList	th -> info -> speed
>4153	Argument	finecosine [ an >> ANGLETOFINESHIFT ]
>4154	ArrayIndexing	finecosine [ an >> ANGLETOFINESHIFT ]
>4155	ShiftExpression	an >> ANGLETOFINESHIFT
>4156	Identifier	ANGLETOFINESHIFT
>4157	Identifier	an
>4158	Identifier	finecosine
>4159	Argument	th -> info -> speed
>4160	PtrMemberAccess	th -> info -> speed
>4161	Identifier	speed
>4162	PtrMemberAccess	th -> info
>4163	Identifier	info
>4164	Identifier	th
>4165	Callee	FixedMul
>4166	Identifier	FixedMul
>4167	PtrMemberAccess	th -> momx
>4168	Identifier	momx
>4169	Identifier	th
>4170	ExpressionStatement	 
>4171	AssignmentExpr	th -> angle = an
>4172	Identifier	an
>4173	PtrMemberAccess	th -> angle
>4174	Identifier	angle
>4175	Identifier	th
>4176	ExpressionStatement	 
>4177	AssignmentExpr	th -> target = source
>4178	Identifier	source
>4179	PtrMemberAccess	th -> target
>4180	Identifier	target
>4181	Identifier	th
>4182	CompoundStatement	 
>4183	ExpressionStatement	 
>4184	CallExpression	S_StartSound ( th , th -> info -> seesound )
>4185	ArgumentList	th
>4186	Argument	th -> info -> seesound
>4187	PtrMemberAccess	th -> info -> seesound
>4188	Identifier	seesound
>4189	PtrMemberAccess	th -> info
>4190	Identifier	info
>4191	Identifier	th
>4192	Argument	th
>4193	Identifier	th
>4194	Callee	S_StartSound
>4195	Identifier	S_StartSound
>4196	Statement	 
>4197	Statement	 
>4198	Statement	 
>4199	Statement	 
>4200	Statement	 
>4201	Statement	 
>4202	Statement	 
>4203	Statement	 
>4204	Statement	 
>4205	Statement	 
>4206	Statement	 
>4207	Statement	 
>4208	Statement	 
>4209	Statement	 
>4210	Statement	 
>4211	Statement	 
>4212	Statement	 
>4213	Statement	 
>4214	Statement	 
>4215	Statement	 
>4216	Statement	 
>4217	Statement	 
>4218	Statement	 
>4219	Statement	 
>4220	Statement	 
>4221	Statement	 
>4222	ExpressionStatement	 
>4223	AssignmentExpr	th = P_SpawnMobj ( x , y , z , type )
>4224	CallExpression	P_SpawnMobj ( x , y , z , type )
>4225	ArgumentList	x
>4226	Argument	type
>4227	Identifier	type
>4228	Argument	z
>4229	Identifier	z
>4230	Argument	y
>4231	Identifier	y
>4232	Argument	x
>4233	Identifier	x
>4234	Callee	P_SpawnMobj
>4235	Identifier	P_SpawnMobj
>4236	Identifier	th
>4237	ExpressionStatement	 
>4238	AssignmentExpr	z = source -> z + 4 * 8 * FRACUNIT
>4239	AdditiveExpression	source -> z + 4 * 8 * FRACUNIT
>4240	MultiplicativeExpression	4 * 8 * FRACUNIT
>4241	MultiplicativeExpression	8 * FRACUNIT
>4242	Identifier	FRACUNIT
>4243	PrimaryExpression	8
>4244	PrimaryExpression	4
>4245	PtrMemberAccess	source -> z
>4246	Identifier	z
>4247	Identifier	source
>4248	Identifier	z
>4249	ExpressionStatement	 
>4250	AssignmentExpr	y = source -> y
>4251	PtrMemberAccess	source -> y
>4252	Identifier	y
>4253	Identifier	source
>4254	Identifier	y
>4255	ExpressionStatement	 
>4256	AssignmentExpr	x = source -> x
>4257	PtrMemberAccess	source -> x
>4258	Identifier	x
>4259	Identifier	source
>4260	Identifier	x
>4261	CompoundStatement	 
>4262	CompoundStatement	 
>4263	ExpressionStatement	 
>4264	AssignmentExpr	slope = 0
>4265	PrimaryExpression	0
>4266	Identifier	slope
>4267	ExpressionStatement	 
>4268	AssignmentExpr	an = source -> angle
>4269	PtrMemberAccess	source -> angle
>4270	Identifier	angle
>4271	Identifier	source
>4272	Identifier	an
>4273	Statement	 
>4274	Statement	 
>4275	Statement	 
>4276	Statement	 
>4277	Statement	 
>4278	Statement	 
>4279	Statement	 
>4280	Statement	 
>4281	CompoundStatement	 
>4282	ExpressionStatement	 
>4283	AssignmentExpr	slope = P_AimLineAttack ( source , an , 16 * 64 * FRACUNIT )
>4284	CallExpression	P_AimLineAttack ( source , an , 16 * 64 * FRACUNIT )
>4285	ArgumentList	source
>4286	Argument	16 * 64 * FRACUNIT
>4287	MultiplicativeExpression	16 * 64 * FRACUNIT
>4288	MultiplicativeExpression	64 * FRACUNIT
>4289	Identifier	FRACUNIT
>4290	PrimaryExpression	64
>4291	PrimaryExpression	16
>4292	Argument	an
>4293	Identifier	an
>4294	Argument	source
>4295	Identifier	source
>4296	Callee	P_AimLineAttack
>4297	Identifier	P_AimLineAttack
>4298	Identifier	slope
>4299	ExpressionStatement	 
>4300	AssignmentExpr	an -= 2 << 26
>4301	ShiftExpression	2 << 26
>4302	PrimaryExpression	26
>4303	PrimaryExpression	2
>4304	Identifier	an
>4305	Statement	 
>4306	Statement	 
>4307	Statement	 
>4308	Statement	 
>4309	Statement	 
>4310	Statement	 
>4311	Statement	 
>4312	Statement	 
>4313	ExpressionStatement	 
>4314	AssignmentExpr	slope = P_AimLineAttack ( source , an , 16 * 64 * FRACUNIT )
>4315	CallExpression	P_AimLineAttack ( source , an , 16 * 64 * FRACUNIT )
>4316	ArgumentList	source
>4317	Argument	16 * 64 * FRACUNIT
>4318	MultiplicativeExpression	16 * 64 * FRACUNIT
>4319	MultiplicativeExpression	64 * FRACUNIT
>4320	Identifier	FRACUNIT
>4321	PrimaryExpression	64
>4322	PrimaryExpression	16
>4323	Argument	an
>4324	Identifier	an
>4325	Argument	source
>4326	Identifier	source
>4327	Callee	P_AimLineAttack
>4328	Identifier	P_AimLineAttack
>4329	Identifier	slope
>4330	ExpressionStatement	 
>4331	AssignmentExpr	an += 1 << 26
>4332	ShiftExpression	1 << 26
>4333	PrimaryExpression	26
>4334	PrimaryExpression	1
>4335	Identifier	an
>4336	Statement	 
>4337	Statement	 
>4338	Statement	 
>4339	Statement	 
>4340	Statement	 
>4341	Statement	 
>4342	Statement	 
>4343	Statement	 
>4344	ExpressionStatement	 
>4345	AssignmentExpr	slope = P_AimLineAttack ( source , an , 16 * 64 * FRACUNIT )
>4346	CallExpression	P_AimLineAttack ( source , an , 16 * 64 * FRACUNIT )
>4347	ArgumentList	source
>4348	Argument	16 * 64 * FRACUNIT
>4349	MultiplicativeExpression	16 * 64 * FRACUNIT
>4350	MultiplicativeExpression	64 * FRACUNIT
>4351	Identifier	FRACUNIT
>4352	PrimaryExpression	64
>4353	PrimaryExpression	16
>4354	Argument	an
>4355	Identifier	an
>4356	Argument	source
>4357	Identifier	source
>4358	Callee	P_AimLineAttack
>4359	Identifier	P_AimLineAttack
>4360	Identifier	slope
>4361	ExpressionStatement	 
>4362	AssignmentExpr	an = source -> angle
>4363	PtrMemberAccess	source -> angle
>4364	Identifier	angle
>4365	Identifier	source
>4366	Identifier	an
>4367	IdentifierDeclStatement	 
>4368	IdentifierDecl	slope
>4369	Identifier	slope
>4370	IdentifierDeclType	fixed_t
>4371	IdentifierDeclStatement	 
>4372	IdentifierDecl	z
>4373	Identifier	z
>4374	IdentifierDeclType	fixed_t
>4375	IdentifierDeclStatement	 
>4376	IdentifierDecl	y
>4377	Identifier	y
>4378	IdentifierDeclType	fixed_t
>4379	IdentifierDeclStatement	 
>4380	IdentifierDecl	x
>4381	Identifier	x
>4382	IdentifierDeclType	fixed_t
>4383	IdentifierDeclStatement	 
>4384	IdentifierDecl	an
>4385	Identifier	an
>4386	IdentifierDeclType	angle_t
>4387	IdentifierDeclStatement	 
>4388	IdentifierDecl	* th
>4389	Identifier	th
>4390	IdentifierDeclType	mobj_t *
<9=18,17,10
<10=14,11
<11=13,12
<14=16,15
<18=114,21,19
<19=20
<21=28,22
<22=23
<23=27,24
<24=26,25
<28=91,90,89,88,87,81,75,67,59,51,35,29
<29=30
<30=34,31
<31=33,32
<35=47,36
<36=37
<37=43,38
<38=41,39
<39=40
<41=42
<43=44
<44=46,45
<47=48
<48=50,49
<51=52
<52=56,53
<53=55,54
<56=58,57
<59=60
<60=64,61
<61=63,62
<64=66,65
<67=68
<68=72,69
<69=71,70
<72=74,73
<75=76
<76=78,77
<78=80,79
<81=82
<82=84,83
<84=86,85
<91=110,92
<92=102,95,93
<93=94
<95=96
<96=100,97
<97=98
<98=99
<100=101
<102=103
<103=107,104
<104=106,105
<107=109,108
<110=111
<111=113,112
<114=115
<115=117,116
<142=148,147,143
<143=144
<144=146,145
<148=216,199,188,175,169,149
<149=163,150
<150=151
<151=161,152
<152=159,153
<153=154
<154=156,155
<156=158,157
<159=160
<161=162
<163=164
<164=166,165
<166=168,167
<169=170
<170=172,171
<172=174,173
<175=182,176
<176=177
<177=179,178
<179=181,180
<182=183
<183=185,184
<185=187,186
<188=189
<189=196,190
<190=192,191
<192=194,193
<194=195
<196=198,197
<199=200
<200=214,201
<201=212,202
<202=203
<203=211,204
<204=206,205
<206=210,207
<207=209,208
<212=213
<214=215
<216=217
<217=227,218
<218=224,219
<219=221,220
<221=223,222
<224=226,225
<227=229,228
<251=257,256,252
<252=253
<253=255,254
<257=808,804,800,796,792,734,728,697,666,660,654,490,469,459,449,389,258
<258=341,291,259
<259=260
<260=276,261
<261=262
<262=273,263
<263=271,264
<264=267,265
<265=266
<267=268
<268=270,269
<271=272
<273=275,274
<276=277
<277=288,278
<278=286,279
<279=282,280
<280=281
<282=283
<283=285,284
<286=287
<288=290,289
<291=340,339,338,337,336,335,334,333,332,331,330,329,328,327,326,325,324,323,322,321,320,319,318,317,316,315,304,298,292
<292=293
<293=295,294
<295=297,296
<298=299
<299=301,300
<301=303,302
<304=305
<305=313,306
<306=309,307
<307=308
<309=310
<310=312,311
<313=314
<341=342
<342=382,343
<343=377,344
<344=370,345
<345=365,346
<346=362,347
<347=355,348
<348=350,349
<350=352,351
<352=354,353
<355=357,356
<357=359,358
<359=361,360
<362=364,363
<365=367,366
<367=369,368
<370=374,371
<371=373,372
<374=376,375
<377=379,378
<379=381,380
<382=386,383
<383=385,384
<386=388,387
<389=443,390
<390=391
<391=407,392
<392=393
<393=395,394
<395=396
<396=404,397
<397=399,398
<399=401,400
<401=403,402
<404=406,405
<407=408
<408=436,409
<409=427,410
<410=420,411
<411=417,412
<412=414,413
<414=416,415
<417=419,418
<420=424,421
<421=423,422
<424=426,425
<427=433,428
<428=430,429
<430=432,431
<433=435,434
<436=440,437
<437=439,438
<440=442,441
<443=444
<444=446,445
<446=448,447
<449=451,450
<451=452
<452=456,453
<453=455,454
<456=458,457
<459=461,460
<461=462
<462=466,463
<463=465,464
<466=468,467
<469=482,470
<470=472,471
<472=473
<473=479,474
<474=476,475
<476=478,477
<479=481,480
<482=483
<483=489,484
<484=486,485
<486=488,487
<490=495,491
<491=492
<492=494,493
<495=588,496
<496=575,497
<497=498
<498=571,563,499
<499=500
<500=557,512,501
<501=502
<502=503
<503=509,504
<504=506,505
<506=508,507
<509=511,510
<512=556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,520,513
<513=514
<514=518,515
<515=516
<516=517
<518=519
<520=522,521
<522=523
<523=527,524
<524=525
<525=526
<527=528
<557=558
<558=560,559
<560=562,561
<563=564
<564=565
<565=569,566
<566=567
<567=568
<569=570
<571=572
<572=574,573
<575=576
<576=587,577
<577=585,578
<578=583,581,579
<579=580
<581=582
<583=584
<585=586
<588=642,613,589
<589=590
<590=605,597,591
<591=592
<592=596,593
<593=595,594
<597=598
<598=604,599
<599=601,600
<601=603,602
<605=606
<606=612,607
<607=609,608
<609=611,610
<613=632,622,618,614
<614=615
<615=617,616
<618=619
<619=621,620
<622=623
<623=631,624
<624=628,625
<625=627,626
<628=630,629
<632=633
<633=641,634
<634=638,635
<635=637,636
<638=640,639
<642=643
<643=649,644
<644=648,645
<645=647,646
<649=653,650
<650=652,651
<654=655
<655=659,656
<656=658,657
<660=661
<661=665,662
<662=664,663
<666=691,685,667
<667=668
<668=677,669
<669=670
<670=674,671
<671=673,672
<674=676,675
<677=678
<678=682,679
<679=681,680
<682=684,683
<685=686
<686=688,687
<688=690,689
<691=692
<692=694,693
<694=696,695
<697=722,716,698
<698=699
<699=708,700
<700=701
<701=705,702
<702=704,703
<705=707,706
<708=709
<709=713,710
<710=712,711
<713=715,714
<716=717
<717=719,718
<719=721,720
<722=723
<723=725,724
<725=727,726
<728=729
<729=733,730
<730=732,731
<734=780,735
<735=737,736
<737=774,738
<738=768,754,739
<739=740
<740=752,741
<741=750,742
<742=743
<743=749,744
<744=746,745
<746=748,747
<750=751
<752=753
<754=755
<755=765,756
<756=762,757
<757=759,758
<759=761,760
<762=764,763
<765=767,766
<768=769
<769=771,770
<771=773,772
<774=775
<775=777,776
<777=779,778
<780=781
<781=787,782
<782=786,783
<783=785,784
<787=791,788
<788=790,789
<792=793
<793=795,794
<796=797
<797=799,798
<800=801
<801=803,802
<804=805
<805=807,806
<808=809
<809=811,810
<860=866,865,861
<861=862
<862=864,863
<866=1285,1281,1237,1229,1117,949,867
<867=937,868
<868=924,911,893,869
<869=879,870
<870=872,871
<872=873
<873=877,874
<874=875
<875=876
<877=878
<879=880
<880=888,881
<881=887,882
<882=884,883
<884=886,885
<888=890,889
<890=892,891
<893=905,894
<894=895
<895=896
<896=902,897
<897=901,898
<898=900,899
<902=904,903
<905=906
<906=908,907
<908=910,909
<911=912
<912=913
<913=921,914
<914=918,915
<915=917,916
<918=920,919
<921=923,922
<924=931,925
<925=926
<926=928,927
<928=930,929
<931=932
<932=934,933
<934=936,935
<937=938
<938=942,939
<939=941,940
<942=946,943
<943=945,944
<946=948,947
<949=1109,985,950
<950=951
<951=977,952
<952=953
<953=971,961,954
<954=955
<955=956
<956=958,957
<958=960,959
<961=962
<962=968,963
<963=965,964
<965=967,966
<968=970,969
<971=972
<972=974,973
<974=976,975
<977=978
<978=984,979
<979=981,980
<981=983,982
<985=1091,1018,1010,986
<986=996,987
<987=989,988
<989=990
<990=994,991
<991=992
<992=993
<994=995
<996=997
<997=1005,998
<998=1004,999
<999=1001,1000
<1001=1003,1002
<1005=1007,1006
<1007=1009,1008
<1010=1011
<1011=1015,1012
<1012=1014,1013
<1015=1017,1016
<1018=1085,1019
<1019=1026,1020
<1020=1021
<1021=1023,1022
<1023=1025,1024
<1026=1071,1027
<1027=1059,1058,1057,1056,1055,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,1044,1043,1042,1041,1040,1039,1038,1037,1028
<1028=1029
<1029=1035,1030
<1030=1033,1031
<1031=1032
<1033=1034
<1035=1036
<1059=1060
<1060=1066,1061
<1061=1063,1062
<1063=1065,1064
<1066=1068,1067
<1068=1070,1069
<1071=1072
<1072=1082,1073
<1073=1079,1074
<1074=1076,1075
<1076=1078,1077
<1079=1081,1080
<1082=1084,1083
<1085=1086
<1086=1088,1087
<1088=1090,1089
<1091=1103,1092
<1092=1093
<1093=1094
<1094=1100,1095
<1095=1099,1096
<1096=1098,1097
<1100=1102,1101
<1103=1104
<1104=1106,1105
<1106=1108,1107
<1109=1110
<1110=1114,1111
<1111=1113,1112
<1114=1116,1115
<1117=1219,1118
<1118=1119
<1119=1203,1120
<1120=1176,1158,1121
<1121=1146,1140,1122
<1122=1123
<1123=1130,1124
<1124=1125
<1125=1127,1126
<1127=1129,1128
<1130=1131
<1131=1137,1132
<1132=1136,1133
<1133=1135,1134
<1137=1139,1138
<1140=1141
<1141=1143,1142
<1143=1145,1144
<1146=1147
<1147=1155,1148
<1148=1154,1149
<1149=1153,1150
<1150=1152,1151
<1155=1157,1156
<1158=1159
<1159=1175,1160
<1160=1164,1161
<1161=1163,1162
<1164=1170,1165
<1165=1167,1166
<1167=1169,1168
<1170=1172,1171
<1172=1174,1173
<1176=1177
<1177=1202,1178
<1178=1200,1179
<1179=1190,1180
<1180=1181
<1181=1187,1182
<1182=1184,1183
<1184=1186,1185
<1187=1189,1188
<1190=1191
<1191=1197,1192
<1192=1194,1193
<1194=1196,1195
<1197=1199,1198
<1200=1201
<1203=1204
<1204=1212,1205
<1205=1211,1206
<1206=1208,1207
<1208=1210,1209
<1212=1218,1213
<1213=1215,1214
<1215=1217,1216
<1219=1220
<1220=1224,1221
<1221=1223,1222
<1224=1226,1225
<1226=1228,1227
<1229=1230
<1230=1234,1231
<1231=1233,1232
<1234=1236,1235
<1237=1269,1238
<1238=1255,1239
<1239=1240
<1240=1250,1241
<1241=1243,1242
<1243=1249,1244
<1244=1246,1245
<1246=1248,1247
<1250=1252,1251
<1252=1254,1253
<1255=1256
<1256=1264,1257
<1257=1261,1258
<1258=1260,1259
<1261=1263,1262
<1264=1266,1265
<1266=1268,1267
<1269=1270
<1270=1278,1271
<1271=1275,1272
<1272=1274,1273
<1275=1277,1276
<1278=1280,1279
<1281=1282
<1282=1284,1283
<1285=1286
<1286=1288,1287
<1325=1331,1330,1326
<1326=1327
<1327=1329,1328
<1331=1549,1545,1541,1537,1533,1529,1519,1509,1494,1469,1460,1449,1430,1421,1413,1395,1378,1370,1358,1345,1339,1332
<1332=1333
<1333=1337,1334
<1334=1335
<1335=1336
<1337=1338
<1339=1340
<1340=1342,1341
<1342=1344,1343
<1345=1352,1346
<1346=1347
<1347=1349,1348
<1349=1351,1350
<1352=1353
<1353=1355,1354
<1355=1357,1356
<1358=1359
<1359=1367,1360
<1360=1366,1361
<1361=1363,1362
<1363=1365,1364
<1367=1369,1368
<1370=1371
<1371=1375,1372
<1372=1374,1373
<1375=1377,1376
<1378=1379
<1379=1394,1380
<1380=1392,1381
<1381=1390,1388,1386,1382
<1382=1383
<1383=1385,1384
<1386=1387
<1388=1389
<1390=1391
<1392=1393
<1395=1405,1401,1396
<1396=1397
<1397=1398
<1398=1400,1399
<1401=1402
<1402=1404,1403
<1405=1406
<1406=1408,1407
<1408=1410,1409
<1410=1412,1411
<1413=1414
<1414=1420,1415
<1415=1419,1416
<1416=1418,1417
<1421=1422
<1422=1428,1423
<1423=1426,1424
<1424=1425
<1426=1427
<1428=1429
<1430=1431
<1431=1448,1432
<1432=1446,1433
<1433=1444,1442,1436,1434
<1434=1435
<1436=1437
<1437=1439,1438
<1439=1441,1440
<1442=1443
<1444=1445
<1446=1447
<1449=1450
<1450=1459,1451
<1451=1457,1452
<1452=1455,1453
<1453=1454
<1455=1456
<1457=1458
<1460=1461
<1461=1467,1462
<1462=1465,1463
<1463=1464
<1465=1466
<1467=1468
<1469=1470
<1470=1493,1471
<1471=1491,1472
<1472=1487,1483,1475,1473
<1473=1474
<1475=1476
<1476=1478,1477
<1478=1480,1479
<1480=1482,1481
<1483=1484
<1484=1486,1485
<1487=1488
<1488=1490,1489
<1491=1492
<1494=1496,1495
<1496=1497
<1497=1508,1498
<1498=1506,1499
<1499=1504,1502,1500
<1500=1501
<1502=1503
<1504=1505
<1506=1507
<1509=1510
<1510=1518,1511
<1511=1513,1512
<1513=1515,1514
<1515=1517,1516
<1519=1520
<1520=1528,1521
<1521=1523,1522
<1523=1525,1524
<1525=1527,1526
<1529=1530
<1530=1532,1531
<1533=1534
<1534=1536,1535
<1537=1538
<1538=1540,1539
<1541=1542
<1542=1544,1543
<1545=1546
<1546=1548,1547
<1549=1550
<1550=1552,1551
<1608=1614,1613,1609
<1609=1610
<1610=1612,1611
<1614=1755,1718,1615
<1615=1710,1679,1616
<1616=1617
<1617=1669,1668,1667,1666,1665,1664,1663,1662,1661,1660,1654,1644,1643,1642,1641,1640,1639,1638,1637,1636,1635,1634,1625,1618
<1618=1619
<1619=1623,1620
<1620=1621
<1621=1622
<1623=1624
<1625=1627,1626
<1627=1628
<1628=1630,1629
<1630=1632,1631
<1632=1633
<1644=1646,1645
<1646=1647
<1647=1651,1648
<1648=1650,1649
<1651=1653,1652
<1654=1655
<1655=1657,1656
<1657=1659,1658
<1669=1671,1670
<1671=1672
<1672=1678,1673
<1673=1675,1674
<1675=1677,1676
<1679=1704,1680
<1680=1698,1681
<1681=1683,1682
<1683=1684
<1684=1697,1685
<1685=1695,1686
<1686=1693,1687
<1687=1688
<1688=1690,1689
<1690=1692,1691
<1693=1694
<1695=1696
<1698=1699
<1699=1703,1700
<1700=1702,1701
<1704=1705
<1705=1707,1706
<1707=1709,1708
<1710=1711
<1711=1715,1712
<1712=1714,1713
<1715=1717,1716
<1718=1743,1719
<1719=1736,1720
<1720=1722,1721
<1722=1723
<1723=1729,1724
<1724=1728,1725
<1725=1727,1726
<1729=1731,1730
<1731=1733,1732
<1733=1735,1734
<1736=1737
<1737=1741,1738
<1738=1739
<1739=1740
<1741=1742
<1743=1744
<1744=1748,1745
<1745=1747,1746
<1748=1752,1749
<1749=1751,1750
<1752=1754,1753
<1755=1780,1756
<1756=1773,1757
<1757=1759,1758
<1759=1760
<1760=1766,1761
<1761=1765,1762
<1762=1764,1763
<1766=1768,1767
<1768=1770,1769
<1770=1772,1771
<1773=1774
<1774=1778,1775
<1775=1776
<1776=1777
<1778=1779
<1780=1781
<1781=1791,1782
<1782=1788,1783
<1783=1785,1784
<1785=1787,1786
<1788=1790,1789
<1791=1793,1792
<1819=1834,1833,1820
<1820=1830,1827,1824,1821
<1821=1823,1822
<1824=1826,1825
<1827=1829,1828
<1830=1832,1831
<1834=2107,2103,2099,2080,2065,2057,2051,2045,2039,2033,2025,2017,2009,2001,2000,1999,1998,1997,1996,1995,1994,1993,1992,1984,1973,1972,1971,1970,1969,1961,1955,1947,1939,1931,1924,1912,1900,1860,1848,1837,1835
<1835=1836
<1837=1838
<1838=1846,1839
<1839=1840
<1840=1841
<1841=1845,1842
<1842=1844,1843
<1846=1847
<1848=1849
<1849=1853,1850
<1850=1852,1851
<1853=1855,1854
<1855=1857,1856
<1857=1859,1858
<1860=1896,1888,1861
<1861=1862
<1862=1884,1870,1863
<1863=1864
<1864=1865
<1865=1867,1866
<1867=1869,1868
<1870=1871
<1871=1881,1872
<1872=1878,1873
<1873=1875,1874
<1875=1877,1876
<1878=1880,1879
<1881=1883,1882
<1884=1885
<1885=1887,1886
<1888=1889
<1889=1893,1890
<1890=1892,1891
<1893=1895,1894
<1896=1897
<1897=1899,1898
<1900=1901
<1901=1909,1902
<1902=1904,1903
<1904=1906,1905
<1906=1908,1907
<1909=1911,1910
<1912=1913
<1913=1921,1914
<1914=1916,1915
<1916=1918,1917
<1918=1920,1919
<1921=1923,1922
<1924=1925
<1925=1929,1926
<1926=1927
<1927=1928
<1929=1930
<1931=1932
<1932=1936,1933
<1933=1935,1934
<1936=1938,1937
<1939=1940
<1940=1944,1941
<1941=1943,1942
<1944=1946,1945
<1947=1948
<1948=1952,1949
<1949=1951,1950
<1952=1954,1953
<1955=1956
<1956=1958,1957
<1958=1960,1959
<1961=1962
<1962=1966,1963
<1963=1965,1964
<1966=1968,1967
<1973=1974
<1974=1981,1975
<1975=1977,1976
<1977=1979,1978
<1979=1980
<1981=1983,1982
<1984=1985
<1985=1989,1986
<1986=1988,1987
<1989=1991,1990
<2001=2002
<2002=2006,2003
<2003=2005,2004
<2006=2008,2007
<2009=2010
<2010=2014,2011
<2011=2013,2012
<2014=2016,2015
<2017=2018
<2018=2022,2019
<2019=2021,2020
<2022=2024,2023
<2025=2026
<2026=2030,2027
<2027=2029,2028
<2030=2032,2031
<2033=2034
<2034=2036,2035
<2036=2038,2037
<2039=2040
<2040=2042,2041
<2042=2044,2043
<2045=2046
<2046=2048,2047
<2048=2050,2049
<2051=2052
<2052=2054,2053
<2054=2056,2055
<2057=2058
<2058=2064,2059
<2059=2063,2060
<2060=2062,2061
<2065=2066
<2066=2078,2067
<2067=2076,2074,2068
<2068=2069
<2069=2073,2070
<2070=2072,2071
<2074=2075
<2076=2077
<2078=2079
<2080=2081
<2081=2098,2082
<2082=2097,2083
<2083=2095,2084
<2084=2089,2087,2085
<2085=2086
<2087=2088
<2089=2090
<2090=2094,2091
<2091=2093,2092
<2095=2096
<2099=2100
<2100=2102,2101
<2103=2104
<2104=2106,2105
<2107=2108
<2108=2110,2109
<2180=2186,2185,2181
<2181=2182
<2182=2184,2183
<2186=2203,2196,2187
<2187=2188
<2188=2194,2189
<2189=2190
<2190=2191
<2191=2193,2192
<2194=2195
<2196=2197
<2197=2201,2198
<2198=2199
<2199=2200
<2201=2202
<2203=2286,2204
<2204=2285,2284,2283,2282,2281,2280,2279,2278,2277,2276,2275,2271,2270,2269,2268,2205,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2259,2260,2261,2262,2263,2264,2265,2266,2267
<2205=2206
<2206=2210,2207
<2207=2209,2208
<2236=2237
<2237=2241,2238
<2238=2240,2239
<2255=2256
<2256=2258,2257
<2271=2272
<2272=2274,2273
<2286=2287
<2287=2307,2288
<2288=2300,2289
<2289=2295,2290
<2290=2292,2291
<2292=2294,2293
<2295=2297,2296
<2297=2299,2298
<2300=2306,2301
<2301=2303,2302
<2303=2305,2304
<2307=2309,2308
<2309=2311,2310
<2324=2327,2326,2325
<2327=2568,2564,2560,2556,2552,2548,2544,2543,2542,2541,2540,2539,2538,2537,2536,2535,2534,2533,2532,2531,2530,2529,2528,2527,2526,2525,2524,2523,2522,2521,2520,2519,2518,2517,2516,2515,2514,2513,2512,2511,2510,2328,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2359,2367,2386,2404,2429,2438,2457,2468,2476,2484,2485,2486,2487,2488,2489,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2500,2501,2502,2503,2504,2505,2506,2507,2508,2509
<2328=2329
<2329=2333,2330
<2330=2332,2331
<2347=2348
<2348=2356,2349
<2349=2355,2350
<2350=2352,2351
<2352=2354,2353
<2356=2358,2357
<2359=2360
<2360=2364,2361
<2361=2363,2362
<2364=2366,2365
<2367=2368
<2368=2385,2369
<2369=2384,2370
<2370=2382,2371
<2371=2380,2378,2376,2372
<2372=2373
<2373=2375,2374
<2376=2377
<2378=2379
<2380=2381
<2382=2383
<2386=2396,2392,2387
<2387=2388
<2388=2389
<2389=2391,2390
<2392=2393
<2393=2395,2394
<2396=2397
<2397=2399,2398
<2399=2401,2400
<2401=2403,2402
<2404=2425,2421,2418,2405
<2405=2406
<2406=2408,2407
<2408=2409
<2409=2415,2410
<2410=2412,2411
<2412=2414,2413
<2415=2417,2416
<2418=2420,2419
<2421=2422
<2422=2424,2423
<2425=2426
<2426=2428,2427
<2429=2430
<2430=2436,2431
<2431=2434,2432
<2432=2433
<2434=2435
<2436=2437
<2438=2439
<2439=2456,2440
<2440=2454,2441
<2441=2452,2450,2444,2442
<2442=2443
<2444=2445
<2445=2447,2446
<2447=2449,2448
<2450=2451
<2452=2453
<2454=2455
<2457=2458
<2458=2467,2459
<2459=2465,2460
<2460=2463,2461
<2461=2462
<2463=2464
<2465=2466
<2468=2469
<2469=2475,2470
<2470=2472,2471
<2472=2474,2473
<2476=2477
<2477=2483,2478
<2478=2480,2479
<2480=2482,2481
<2544=2545
<2545=2547,2546
<2548=2549
<2549=2551,2550
<2552=2553
<2553=2555,2554
<2556=2557
<2557=2559,2558
<2560=2561
<2561=2563,2562
<2564=2565
<2565=2567,2566
<2568=2569
<2569=2571,2570
<2610=2616,2615,2611
<2611=2612
<2612=2614,2613
<2616=2965,2961,2957,2953,2949,2945,2944,2943,2942,2941,2940,2939,2938,2937,2936,2935,2934,2933,2932,2617,2705,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2749,2750,2751,2752,2753,2754,2755,2756,2763,2769,2775,2781,2787,2793,2799,2805,2811,2817,2825,2831,2843,2862,2877,2881,2889,2897,2915,2925,2926,2927,2928,2929,2930,2931
<2617=2699,2618
<2618=2693,2687,2683,2663,2639,2619
<2619=2635,2631,2628,2620
<2620=2621
<2621=2623,2622
<2623=2625,2624
<2625=2627,2626
<2628=2630,2629
<2631=2632
<2632=2634,2633
<2635=2636
<2636=2638,2637
<2639=2659,2655,2652,2640
<2640=2641
<2641=2647,2642
<2642=2644,2643
<2644=2646,2645
<2647=2649,2648
<2649=2651,2650
<2652=2654,2653
<2655=2656
<2656=2658,2657
<2659=2660
<2660=2662,2661
<2663=2679,2675,2672,2664
<2664=2665
<2665=2667,2666
<2667=2669,2668
<2669=2671,2670
<2672=2674,2673
<2675=2676
<2676=2678,2677
<2679=2680
<2680=2682,2681
<2683=2684
<2684=2686,2685
<2687=2688
<2688=2690,2689
<2690=2692,2691
<2693=2694
<2694=2696,2695
<2696=2698,2697
<2699=2700
<2700=2702,2701
<2702=2704,2703
<2705=2711,2706
<2706=2707
<2707=2709,2708
<2709=2710
<2711=2712
<2712=2714,2713
<2714=2715
<2729=2745,2741,2738,2730
<2730=2731
<2731=2733,2732
<2733=2735,2734
<2735=2737,2736
<2738=2740,2739
<2741=2742
<2742=2744,2743
<2745=2746
<2746=2748,2747
<2756=2757
<2757=2761,2758
<2758=2759
<2759=2760
<2761=2762
<2763=2764
<2764=2766,2765
<2766=2768,2767
<2769=2770
<2770=2772,2771
<2772=2774,2773
<2775=2776
<2776=2778,2777
<2778=2780,2779
<2781=2782
<2782=2784,2783
<2784=2786,2785
<2787=2788
<2788=2790,2789
<2790=2792,2791
<2793=2794
<2794=2796,2795
<2796=2798,2797
<2799=2800
<2800=2802,2801
<2802=2804,2803
<2805=2806
<2806=2808,2807
<2808=2810,2809
<2811=2812
<2812=2814,2813
<2814=2816,2815
<2817=2818
<2818=2822,2819
<2819=2821,2820
<2822=2824,2823
<2825=2826
<2826=2828,2827
<2828=2830,2829
<2831=2832
<2832=2840,2833
<2833=2839,2834
<2834=2836,2835
<2836=2838,2837
<2840=2842,2841
<2843=2856,2844
<2844=2845
<2845=2853,2846
<2846=2848,2847
<2848=2850,2849
<2850=2852,2851
<2853=2855,2854
<2856=2857
<2857=2859,2858
<2859=2861,2860
<2862=2863
<2863=2876,2864
<2864=2874,2865
<2865=2872,2870,2868,2866
<2866=2867
<2868=2869
<2870=2871
<2872=2873
<2874=2875
<2877=2878
<2878=2880,2879
<2881=2882
<2882=2888,2883
<2883=2885,2884
<2885=2887,2886
<2889=2890
<2890=2896,2891
<2891=2893,2892
<2893=2895,2894
<2897=2909,2898
<2898=2899
<2899=2907,2900
<2900=2901
<2901=2902
<2902=2904,2903
<2904=2906,2905
<2907=2908
<2909=2910
<2910=2912,2911
<2912=2914,2913
<2915=2916
<2916=2922,2917
<2917=2919,2918
<2919=2921,2920
<2922=2924,2923
<2945=2946
<2946=2948,2947
<2949=2950
<2950=2952,2951
<2953=2954
<2954=2956,2955
<2957=2958
<2958=2960,2959
<2961=2962
<2962=2964,2963
<2965=2966
<2966=2968,2967
<3031=3037,3036,3032
<3032=3033
<3033=3035,3034
<3037=3424,3420,3416,3412,3408,3404,3353,3312,3311,3310,3309,3308,3307,3306,3305,3304,3303,3302,3301,3300,3299,3298,3297,3296,3295,3294,3293,3292,3291,3290,3289,3288,3287,3286,3282,3281,3280,3279,3278,3277,3276,3275,3274,3270,3269,3268,3267,3266,3265,3264,3263,3262,3261,3260,3259,3258,3248,3224,3217,3216,3215,3214,3213,3038,3051,3063,3069,3077,3083,3091,3113,3121,3140,3158,3166,3174,3176,3177,3178,3179,3180,3181,3182,3183,3184,3185,3186,3187,3188,3189,3190,3191,3192,3193,3194,3195,3196,3197,3198,3199,3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,3210,3211,3212
<3038=3045,3039
<3039=3040
<3040=3042,3041
<3042=3044,3043
<3045=3046
<3046=3048,3047
<3048=3050,3049
<3051=3052
<3052=3060,3053
<3053=3059,3054
<3054=3056,3055
<3056=3058,3057
<3060=3062,3061
<3063=3064
<3064=3066,3065
<3066=3068,3067
<3069=3071,3070
<3071=3072
<3072=3074,3073
<3074=3076,3075
<3077=3078
<3078=3080,3079
<3080=3082,3081
<3083=3085,3084
<3085=3086
<3086=3088,3087
<3088=3090,3089
<3091=3107,3092
<3092=3093
<3093=3104,3094
<3094=3103,3095
<3095=3099,3096
<3096=3098,3097
<3099=3101,3100
<3101=3102
<3104=3106,3105
<3107=3108
<3108=3110,3109
<3110=3112,3111
<3113=3114
<3114=3118,3115
<3115=3117,3116
<3118=3120,3119
<3121=3122
<3122=3139,3123
<3123=3138,3124
<3124=3136,3125
<3125=3134,3132,3130,3126
<3126=3127
<3127=3129,3128
<3130=3131
<3132=3133
<3134=3135
<3136=3137
<3140=3150,3146,3141
<3141=3142
<3142=3143
<3143=3145,3144
<3146=3147
<3147=3149,3148
<3150=3151
<3151=3153,3152
<3153=3155,3154
<3155=3157,3156
<3158=3159
<3159=3165,3160
<3160=3162,3161
<3162=3164,3163
<3166=3167
<3167=3173,3168
<3168=3170,3169
<3170=3172,3171
<3174=3175
<3217=3220,3218
<3218=3219
<3220=3221
<3221=3223,3222
<3224=3244,3240,3237,3225
<3225=3227,3226
<3227=3228
<3228=3234,3229
<3229=3231,3230
<3231=3233,3232
<3234=3236,3235
<3237=3239,3238
<3240=3241
<3241=3243,3242
<3244=3245
<3245=3247,3246
<3248=3250,3249
<3250=3251
<3251=3257,3252
<3252=3254,3253
<3254=3256,3255
<3270=3271
<3271=3273,3272
<3282=3283
<3283=3285,3284
<3312=3347,3315,3313
<3313=3314
<3315=3346,3332,3331,3330,3329,3328,3327,3326,3325,3324,3317,3316
<3317=3318
<3318=3322,3319
<3319=3320
<3320=3321
<3322=3323
<3332=3333
<3333=3337,3334
<3334=3336,3335
<3337=3343,3338
<3338=3340,3339
<3340=3342,3341
<3343=3345,3344
<3347=3348
<3348=3350,3349
<3350=3352,3351
<3353=3398,3356,3354
<3354=3355
<3356=3397,3396,3395,3394,3393,3392,3391,3390,3389,3388,3387,3386,3385,3384,3383,3382,3358,3357
<3358=3381,3380,3379,3378,3377,3376,3375,3374,3373,3372,3371,3370,3369,3368,3367,3366,3365,3359
<3359=3360
<3360=3362,3361
<3362=3364,3363
<3398=3399
<3399=3401,3400
<3401=3403,3402
<3404=3405
<3405=3407,3406
<3408=3409
<3409=3411,3410
<3412=3413
<3413=3415,3414
<3416=3417
<3417=3419,3418
<3420=3421
<3421=3423,3422
<3424=3425
<3425=3427,3426
<3476=3488,3487,3477
<3477=3484,3481,3478
<3478=3480,3479
<3481=3483,3482
<3484=3486,3485
<3488=3567,3553,3538,3532,3521,3508,3507,3506,3505,3504,3503,3502,3501,3500,3499,3489
<3489=3490
<3490=3491
<3491=3497,3492
<3492=3495,3493
<3493=3494
<3495=3496
<3497=3498
<3508=3515,3509
<3509=3510
<3510=3512,3511
<3512=3514,3513
<3515=3516
<3516=3518,3517
<3518=3520,3519
<3521=3522
<3522=3529,3523
<3523=3525,3524
<3525=3527,3526
<3527=3528
<3529=3531,3530
<3532=3533
<3533=3535,3534
<3535=3537,3536
<3538=3539
<3539=3552,3540
<3540=3550,3541
<3541=3548,3546,3544,3542
<3542=3543
<3544=3545
<3546=3547
<3548=3549
<3550=3551
<3553=3554
<3554=3566,3555
<3555=3557,3556
<3557=3562,3558
<3558=3560,3559
<3560=3561
<3562=3564,3563
<3564=3565
<3567=3568
<3568=3570,3569
<3586=3601,3600,3587
<3587=3597,3594,3591,3588
<3588=3590,3589
<3591=3593,3592
<3594=3596,3595
<3597=3599,3598
<3601=3696,3682,3667,3659,3648,3635,3602
<3602=3627,3618,3603
<3603=3604
<3604=3614,3605
<3605=3606
<3606=3612,3607
<3607=3610,3608
<3608=3609
<3610=3611
<3612=3613
<3614=3615
<3615=3617,3616
<3618=3619
<3619=3625,3620
<3620=3623,3621
<3621=3622
<3623=3624
<3625=3626
<3627=3628
<3628=3632,3629
<3629=3631,3630
<3632=3634,3633
<3635=3642,3636
<3636=3637
<3637=3639,3638
<3639=3641,3640
<3642=3643
<3643=3645,3644
<3645=3647,3646
<3648=3649
<3649=3656,3650
<3650=3652,3651
<3652=3654,3653
<3654=3655
<3656=3658,3657
<3659=3660
<3660=3664,3661
<3661=3663,3662
<3664=3666,3665
<3667=3668
<3668=3681,3669
<3669=3679,3670
<3670=3677,3675,3673,3671
<3671=3672
<3673=3674
<3675=3676
<3677=3678
<3679=3680
<3682=3683
<3683=3695,3684
<3684=3686,3685
<3686=3691,3687
<3687=3689,3688
<3689=3690
<3691=3693,3692
<3693=3694
<3696=3697
<3697=3699,3698
<3717=3723,3722,3718
<3718=3719
<3719=3721,3720
<3723=3792,3779,3769,3759,3749,3724
<3724=3732,3725
<3725=3726
<3726=3730,3727
<3727=3728
<3728=3729
<3730=3731
<3732=3733
<3733=3748,3734
<3734=3746,3735
<3735=3744,3740,3736
<3736=3737
<3737=3739,3738
<3740=3741
<3741=3743,3742
<3744=3745
<3746=3747
<3749=3750
<3750=3756,3751
<3751=3753,3752
<3753=3755,3754
<3756=3758,3757
<3759=3760
<3760=3766,3761
<3761=3763,3762
<3763=3765,3764
<3766=3768,3767
<3769=3770
<3770=3776,3771
<3771=3773,3772
<3773=3775,3774
<3776=3778,3777
<3779=3786,3780
<3780=3781
<3781=3783,3782
<3783=3785,3784
<3786=3787
<3787=3789,3788
<3789=3791,3790
<3792=3793
<3793=3800,3794
<3794=3796,3795
<3796=3798,3797
<3798=3799
<3800=3802,3801
<3817=3829,3828,3818
<3818=3825,3822,3819
<3819=3821,3820
<3822=3824,3823
<3825=3827,3826
<3829=4048,4044,4040,4013,3993,3987,3964,3943,3937,3933,3914,3895,3872,3862,3853,3839,3832,3830
<3830=3831
<3832=3833
<3833=3837,3834
<3834=3835
<3835=3836
<3837=3838
<3839=3840
<3840=3850,3841
<3841=3843,3842
<3843=3847,3844
<3844=3846,3845
<3847=3849,3848
<3850=3852,3851
<3853=3858,3854
<3854=3855
<3855=3857,3856
<3858=3859
<3859=3861,3860
<3862=3863
<3863=3871,3864
<3864=3870,3865
<3865=3867,3866
<3867=3869,3868
<3872=3873
<3873=3894,3874
<3874=3892,3875
<3875=3884,3876
<3876=3877
<3877=3881,3878
<3878=3880,3879
<3881=3883,3882
<3884=3885
<3885=3889,3886
<3886=3888,3887
<3889=3891,3890
<3892=3893
<3895=3896
<3896=3911,3897
<3897=3909,3898
<3898=3903,3899
<3899=3900
<3900=3902,3901
<3903=3904
<3904=3906,3905
<3906=3908,3907
<3909=3910
<3911=3913,3912
<3914=3915
<3915=3930,3916
<3916=3928,3917
<3917=3922,3918
<3918=3919
<3919=3921,3920
<3922=3923
<3923=3925,3924
<3925=3927,3926
<3928=3929
<3930=3932,3931
<3933=3934
<3934=3936,3935
<3937=3938
<3938=3940,3939
<3940=3942,3941
<3943=3958,3944
<3944=3945
<3945=3957,3946
<3946=3948,3947
<3948=3953,3949
<3949=3951,3950
<3951=3952
<3953=3955,3954
<3955=3956
<3958=3959
<3959=3961,3960
<3961=3963,3962
<3964=3965
<3965=3986,3966
<3966=3984,3967
<3967=3980,3976,3972,3968
<3968=3969
<3969=3971,3970
<3972=3973
<3973=3975,3974
<3976=3977
<3977=3979,3978
<3980=3981
<3981=3983,3982
<3984=3985
<3987=3988
<3988=3990,3989
<3990=3992,3991
<3993=4007,3994
<3994=3995
<3995=4005,3996
<3996=4003,3997
<3997=3998
<3998=4000,3999
<4000=4002,4001
<4003=4004
<4005=4006
<4007=4008
<4008=4010,4009
<4010=4012,4011
<4013=4014
<4014=4039,4015
<4015=4037,4016
<4016=4033,4029,4019,4017
<4017=4018
<4019=4020
<4020=4026,4021
<4021=4025,4022
<4022=4024,4023
<4026=4028,4027
<4029=4030
<4030=4032,4031
<4033=4034
<4034=4036,4035
<4037=4038
<4040=4041
<4041=4043,4042
<4044=4045
<4045=4047,4046
<4048=4049
<4049=4051,4050
<4094=4103,4102,4095
<4095=4099,4096
<4096=4098,4097
<4099=4101,4100
<4103=4387,4383,4379,4375,4104,4111,4128,4149,4170,4176,4182,4196,4197,4198,4199,4200,4201,4202,4203,4204,4205,4206,4207,4208,4209,4210,4211,4212,4213,4214,4215,4216,4217,4218,4219,4220,4221,4222,4237,4249,4255,4261,4336,4337,4338,4339,4340,4341,4342,4343,4344,4361,4367,4371
<4104=4105
<4105=4109,4106
<4106=4107
<4107=4108
<4109=4110
<4111=4112
<4112=4125,4113
<4113=4123,4114
<4114=4117,4115
<4115=4116
<4117=4118
<4118=4120,4119
<4120=4122,4121
<4123=4124
<4125=4127,4126
<4128=4129
<4129=4146,4130
<4130=4144,4131
<4131=4138,4132
<4132=4133
<4133=4137,4134
<4134=4136,4135
<4138=4139
<4139=4141,4140
<4141=4143,4142
<4144=4145
<4146=4148,4147
<4149=4150
<4150=4167,4151
<4151=4165,4152
<4152=4159,4153
<4153=4154
<4154=4158,4155
<4155=4157,4156
<4159=4160
<4160=4162,4161
<4162=4164,4163
<4165=4166
<4167=4169,4168
<4170=4171
<4171=4173,4172
<4173=4175,4174
<4176=4177
<4177=4179,4178
<4179=4181,4180
<4182=4183
<4183=4184
<4184=4194,4185
<4185=4192,4186
<4186=4187
<4187=4189,4188
<4189=4191,4190
<4192=4193
<4194=4195
<4222=4223
<4223=4236,4224
<4224=4234,4225
<4225=4232,4230,4228,4226
<4226=4227
<4228=4229
<4230=4231
<4232=4233
<4234=4235
<4237=4238
<4238=4248,4239
<4239=4245,4240
<4240=4244,4241
<4241=4243,4242
<4245=4247,4246
<4249=4250
<4250=4254,4251
<4251=4253,4252
<4255=4256
<4256=4260,4257
<4257=4259,4258
<4261=4330,4313,4312,4311,4310,4309,4308,4307,4306,4305,4281,4280,4279,4278,4277,4276,4275,4274,4273,4262
<4262=4267,4263
<4263=4264
<4264=4266,4265
<4267=4268
<4268=4272,4269
<4269=4271,4270
<4281=4299,4282
<4282=4283
<4283=4298,4284
<4284=4296,4285
<4285=4294,4292,4286
<4286=4287
<4287=4291,4288
<4288=4290,4289
<4292=4293
<4294=4295
<4296=4297
<4299=4300
<4300=4304,4301
<4301=4303,4302
<4313=4314
<4314=4329,4315
<4315=4327,4316
<4316=4325,4323,4317
<4317=4318
<4318=4322,4319
<4319=4321,4320
<4323=4324
<4325=4326
<4327=4328
<4330=4331
<4331=4335,4332
<4332=4334,4333
<4344=4345
<4345=4360,4346
<4346=4358,4347
<4347=4356,4354,4348
<4348=4349
<4349=4353,4350
<4350=4352,4351
<4354=4355
<4356=4357
<4358=4359
<4361=4362
<4362=4366,4363
<4363=4365,4364
<4367=4368
<4368=4370,4369
<4371=4372
<4372=4374,4373
<4375=4376
<4376=4378,4377
<4379=4380
<4380=4382,4381
<4383=4384
<4384=4386,4385
<4387=4388
<4388=4390,4389
