>3	FunctionDef	KeyFrameDisplay 
>4	ParameterList	 
>5	CompoundStatement	 
>6	ExpressionStatement	 
>7	AssignmentExpr	totalPoints = displayedPoints = 0
>8	AssignmentExpr	displayedPoints = 0
>9	PrimaryExpression	0
>10	Identifier	displayedPoints
>11	Identifier	totalPoints
>12	ExpressionStatement	 
>13	AssignmentExpr	my_scaledTH = my_absTH = 0
>14	AssignmentExpr	my_absTH = 0
>15	PrimaryExpression	0
>16	Identifier	my_absTH
>17	Identifier	my_scaledTH
>18	ExpressionStatement	 
>19	AssignmentExpr	width = height = 0
>20	AssignmentExpr	height = 0
>21	PrimaryExpression	0
>22	Identifier	height
>23	Identifier	width
>24	ExpressionStatement	 
>25	AssignmentExpr	camToWorld = Sophus 
>26	CallExpression	Sophus 
>27	ArgumentList	 
>28	Callee	Sophus 
>29	Identifier	Sophus 
>30	Identifier	camToWorld
>31	ExpressionStatement	 
>32	AssignmentExpr	glBuffersValid = false
>33	Identifier	false
>34	Identifier	glBuffersValid
>35	ExpressionStatement	 
>36	AssignmentExpr	vertexBufferIdValid = false
>37	Identifier	false
>38	Identifier	vertexBufferIdValid
>39	ExpressionStatement	 
>40	AssignmentExpr	id = 0
>41	PrimaryExpression	0
>42	Identifier	id
>43	ExpressionStatement	 
>44	AssignmentExpr	originalInput = 0
>45	PrimaryExpression	0
>46	Identifier	originalInput
>63	FunctionDef	KeyFrameDisplay 
>64	ParameterList	 
>65	CompoundStatement	 
>66	ExpressionStatement	 
>67	Identifier	originalInput
>68	Statement	 
>69	Statement	 
>70	IfStatement	if ( originalInput != 0 )
>71	Statement	 
>72	Condition	 
>73	EqualityExpression	originalInput != 0
>74	PrimaryExpression	0
>75	Identifier	originalInput
>76	IfStatement	if ( vertexBufferIdValid )
>77	CompoundStatement	 
>78	ExpressionStatement	 
>79	AssignmentExpr	vertexBufferIdValid = false
>80	Identifier	false
>81	Identifier	vertexBufferIdValid
>82	ExpressionStatement	 
>83	CallExpression	glDeleteBuffers ( 1 , & vertexBufferId )
>84	ArgumentList	1
>85	Argument	& vertexBufferId
>86	UnaryOp	& vertexBufferId
>87	Identifier	vertexBufferId
>88	UnaryOperator	&
>89	Argument	1
>90	PrimaryExpression	1
>91	Callee	glDeleteBuffers
>92	Identifier	glDeleteBuffers
>93	Condition	 
>94	Identifier	vertexBufferIdValid
>102	FunctionDef	KeyFrameDisplay 
>103	ParameterList	lsd_slam_viewer 
>104	Parameter	 
>105	Identifier	msg
>106	ParameterType	lsd_slam_viewer 
>107	ReturnType	void
>108	CompoundStatement	 
>109	ExpressionStatement	 
>110	AssignmentExpr	glBuffersValid = false
>111	Identifier	false
>112	Identifier	glBuffersValid
>113	IfStatement	if ( msg -> pointcloud . size ( ) != width * height * sizeof ( InputPointDense ) )
>114	ElseStatement	else
>115	CompoundStatement	 
>116	ExpressionStatement	 
>117	CallExpression	memcpy ( originalInput , msg -> pointcloud . data ( ) , width * height * sizeof ( InputPointDense ) )
>118	ArgumentList	originalInput
>119	Argument	width * height * sizeof ( InputPointDense )
>120	MultiplicativeExpression	width * height * sizeof ( InputPointDense )
>121	MultiplicativeExpression	height * sizeof ( InputPointDense )
>122	SizeofExpr	sizeof ( InputPointDense )
>123	SizeofOperand	InputPointDense
>124	Sizeof	sizeof
>125	Identifier	height
>126	Identifier	width
>127	Argument	msg -> pointcloud . data ( )
>128	CallExpression	msg -> pointcloud . data ( )
>129	ArgumentList	 
>130	Callee	msg -> pointcloud . data
>131	MemberAccess	msg -> pointcloud . data
>132	Identifier	data
>133	PtrMemberAccess	msg -> pointcloud
>134	Identifier	pointcloud
>135	Identifier	msg
>136	Argument	originalInput
>137	Identifier	originalInput
>138	Callee	memcpy
>139	Identifier	memcpy
>140	ExpressionStatement	 
>141	AssignmentExpr	originalInput = new InputPointDense [ width * height ]
>142	MultiplicativeExpression	width * height
>143	Identifier	height
>144	Identifier	width
>145	Identifier	originalInput
>146	CompoundStatement	 
>147	IfStatement	if ( msg -> pointcloud . size ( ) != 0 )
>148	CompoundStatement	 
>149	ExpressionStatement	 
>150	CallExpression	printf ( \"WARNING
>151	ArgumentList	\"WARNING
>152	Argument	width * height * sizeof ( InputPointDense )
>153	MultiplicativeExpression	width * height * sizeof ( InputPointDense )
>154	MultiplicativeExpression	height * sizeof ( InputPointDense )
>155	SizeofExpr	sizeof ( InputPointDense )
>156	SizeofOperand	InputPointDense
>157	Sizeof	sizeof
>158	Identifier	height
>159	Identifier	width
>160	Argument	height
>161	Identifier	height
>162	Argument	width
>163	Identifier	width
>164	Argument	sizeof ( InputPointDense )
>165	SizeofExpr	sizeof ( InputPointDense )
>166	SizeofOperand	InputPointDense
>167	Sizeof	sizeof
>168	Argument	msg -> pointcloud . size ( )
>169	CallExpression	msg -> pointcloud . size ( )
>170	ArgumentList	 
>171	Callee	msg -> pointcloud . size
>172	MemberAccess	msg -> pointcloud . size
>173	Identifier	size
>174	PtrMemberAccess	msg -> pointcloud
>175	Identifier	pointcloud
>176	Identifier	msg
>177	Argument	\"WARNING
>178	PrimaryExpression	\"WARNING
>179	Callee	printf
>180	Identifier	printf
>181	Condition	 
>182	EqualityExpression	msg -> pointcloud . size ( ) != 0
>183	PrimaryExpression	0
>184	CallExpression	msg -> pointcloud . size ( )
>185	ArgumentList	 
>186	Callee	msg -> pointcloud . size
>187	MemberAccess	msg -> pointcloud . size
>188	Identifier	size
>189	PtrMemberAccess	msg -> pointcloud
>190	Identifier	pointcloud
>191	Identifier	msg
>192	Condition	 
>193	EqualityExpression	msg -> pointcloud . size ( ) != width * height * sizeof ( InputPointDense )
>194	MultiplicativeExpression	width * height * sizeof ( InputPointDense )
>195	MultiplicativeExpression	height * sizeof ( InputPointDense )
>196	SizeofExpr	sizeof ( InputPointDense )
>197	SizeofOperand	InputPointDense
>198	Sizeof	sizeof
>199	Identifier	height
>200	Identifier	width
>201	CallExpression	msg -> pointcloud . size ( )
>202	ArgumentList	 
>203	Callee	msg -> pointcloud . size
>204	MemberAccess	msg -> pointcloud . size
>205	Identifier	size
>206	PtrMemberAccess	msg -> pointcloud
>207	Identifier	pointcloud
>208	Identifier	msg
>209	ExpressionStatement	 
>210	AssignmentExpr	originalInput = 0
>211	PrimaryExpression	0
>212	Identifier	originalInput
>213	ExpressionStatement	 
>214	Identifier	originalInput
>215	Statement	 
>216	Statement	 
>217	IfStatement	if ( originalInput != 0 )
>218	Statement	 
>219	Condition	 
>220	EqualityExpression	originalInput != 0
>221	PrimaryExpression	0
>222	Identifier	originalInput
>223	ExpressionStatement	 
>224	AssignmentExpr	time = msg -> time
>225	PtrMemberAccess	msg -> time
>226	Identifier	time
>227	Identifier	msg
>228	Identifier	time
>229	ExpressionStatement	 
>230	AssignmentExpr	id = msg -> id
>231	PtrMemberAccess	msg -> id
>232	Identifier	id
>233	Identifier	msg
>234	Identifier	id
>235	ExpressionStatement	 
>236	AssignmentExpr	height = msg -> height
>237	PtrMemberAccess	msg -> height
>238	Identifier	height
>239	Identifier	msg
>240	Identifier	height
>241	ExpressionStatement	 
>242	AssignmentExpr	width = msg -> width
>243	PtrMemberAccess	msg -> width
>244	Identifier	width
>245	Identifier	msg
>246	Identifier	width
>247	ExpressionStatement	 
>248	AssignmentExpr	cyi = - cy / fy
>249	MultiplicativeExpression	- cy / fy
>250	Identifier	fy
>251	UnaryOp	- cy
>252	Identifier	cy
>253	UnaryOperator	-
>254	Identifier	cyi
>255	ExpressionStatement	 
>256	AssignmentExpr	cxi = - cx / fx
>257	MultiplicativeExpression	- cx / fx
>258	Identifier	fx
>259	UnaryOp	- cx
>260	Identifier	cx
>261	UnaryOperator	-
>262	Identifier	cxi
>263	ExpressionStatement	 
>264	AssignmentExpr	fyi = 1 / fy
>265	MultiplicativeExpression	1 / fy
>266	Identifier	fy
>267	PrimaryExpression	1
>268	Identifier	fyi
>269	ExpressionStatement	 
>270	AssignmentExpr	fxi = 1 / fx
>271	MultiplicativeExpression	1 / fx
>272	Identifier	fx
>273	PrimaryExpression	1
>274	Identifier	fxi
>275	ExpressionStatement	 
>276	AssignmentExpr	cy = msg -> cy
>277	PtrMemberAccess	msg -> cy
>278	Identifier	cy
>279	Identifier	msg
>280	Identifier	cy
>281	ExpressionStatement	 
>282	AssignmentExpr	cx = msg -> cx
>283	PtrMemberAccess	msg -> cx
>284	Identifier	cx
>285	Identifier	msg
>286	Identifier	cx
>287	ExpressionStatement	 
>288	AssignmentExpr	fy = msg -> fy
>289	PtrMemberAccess	msg -> fy
>290	Identifier	fy
>291	Identifier	msg
>292	Identifier	fy
>293	ExpressionStatement	 
>294	AssignmentExpr	fx = msg -> fx
>295	PtrMemberAccess	msg -> fx
>296	Identifier	fx
>297	Identifier	msg
>298	Identifier	fx
>299	ExpressionStatement	 
>300	CallExpression	memcpy ( camToWorld . data ( ) , msg -> camToWorld . data ( ) , 7 * sizeof ( float ) )
>301	ArgumentList	camToWorld . data ( )
>302	Argument	7 * sizeof ( float )
>303	MultiplicativeExpression	7 * sizeof ( float )
>304	SizeofExpr	sizeof ( float )
>305	SizeofOperand	float
>306	Sizeof	sizeof
>307	PrimaryExpression	7
>308	Argument	msg -> camToWorld . data ( )
>309	CallExpression	msg -> camToWorld . data ( )
>310	ArgumentList	 
>311	Callee	msg -> camToWorld . data
>312	MemberAccess	msg -> camToWorld . data
>313	Identifier	data
>314	PtrMemberAccess	msg -> camToWorld
>315	Identifier	camToWorld
>316	Identifier	msg
>317	Argument	camToWorld . data ( )
>318	CallExpression	camToWorld . data ( )
>319	ArgumentList	 
>320	Callee	camToWorld . data
>321	MemberAccess	camToWorld . data
>322	Identifier	data
>323	Identifier	camToWorld
>324	Callee	memcpy
>325	Identifier	memcpy
>361	FunctionDef	KeyFrameDisplay 
>362	ParameterList	 
>363	ReturnType	void
>364	CompoundStatement	 
>365	ExpressionStatement	 
>366	Identifier	tmpBuffer
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	IfStatement	if ( ! keepInMemory )
>371	CompoundStatement	 
>372	ExpressionStatement	 
>373	AssignmentExpr	originalInput = 0
>374	PrimaryExpression	0
>375	Identifier	originalInput
>376	ExpressionStatement	 
>377	Identifier	originalInput
>378	Statement	 
>379	Statement	 
>380	Statement	 
>381	Condition	 
>382	UnaryOp	! keepInMemory
>383	Identifier	keepInMemory
>384	UnaryOperator	!
>385	ExpressionStatement	 
>386	AssignmentExpr	vertexBufferIdValid = true
>387	Identifier	true
>388	Identifier	vertexBufferIdValid
>389	ExpressionStatement	 
>390	CallExpression	glBufferData ( GL_ARRAY_BUFFER , sizeof ( MyVertex ) * vertexBufferNumPoints , tmpBuffer , GL_STATIC_DRAW )
>391	ArgumentList	GL_ARRAY_BUFFER
>392	Argument	GL_STATIC_DRAW
>393	Identifier	GL_STATIC_DRAW
>394	Argument	tmpBuffer
>395	Identifier	tmpBuffer
>396	Argument	sizeof ( MyVertex ) * vertexBufferNumPoints
>397	MultiplicativeExpression	sizeof ( MyVertex ) * vertexBufferNumPoints
>398	Identifier	vertexBufferNumPoints
>399	SizeofExpr	sizeof ( MyVertex )
>400	SizeofOperand	MyVertex
>401	Sizeof	sizeof
>402	Argument	GL_ARRAY_BUFFER
>403	Identifier	GL_ARRAY_BUFFER
>404	Callee	glBufferData
>405	Identifier	glBufferData
>406	ExpressionStatement	 
>407	CallExpression	glBindBuffer ( GL_ARRAY_BUFFER , vertexBufferId )
>408	ArgumentList	GL_ARRAY_BUFFER
>409	Argument	vertexBufferId
>410	Identifier	vertexBufferId
>411	Argument	GL_ARRAY_BUFFER
>412	Identifier	GL_ARRAY_BUFFER
>413	Callee	glBindBuffer
>414	Identifier	glBindBuffer
>415	ExpressionStatement	 
>416	CallExpression	glGenBuffers ( 1 , & vertexBufferId )
>417	ArgumentList	1
>418	Argument	& vertexBufferId
>419	UnaryOp	& vertexBufferId
>420	Identifier	vertexBufferId
>421	UnaryOperator	&
>422	Argument	1
>423	PrimaryExpression	1
>424	Callee	glGenBuffers
>425	Identifier	glGenBuffers
>426	ExpressionStatement	 
>427	AssignmentExpr	vertexBufferId = 0
>428	PrimaryExpression	0
>429	Identifier	vertexBufferId
>430	ExpressionStatement	 
>431	AssignmentExpr	displayedPoints = displayed
>432	Identifier	displayed
>433	Identifier	displayedPoints
>434	ExpressionStatement	 
>435	AssignmentExpr	totalPoints = total
>436	Identifier	total
>437	Identifier	totalPoints
>438	ForStatement	for ( int y = 1 ; y < height - 1 ; y ++ )
>439	ForStatement	for ( int x = 1 ; x < width - 1 ; x ++ )
>440	CompoundStatement	 
>441	ExpressionStatement	 
>442	IncDecOp	displayed ++
>443	IncDec	++
>444	Identifier	displayed
>445	ExpressionStatement	 
>446	IncDecOp	vertexBufferNumPoints ++
>447	IncDec	++
>448	Identifier	vertexBufferNumPoints
>449	ExpressionStatement	 
>450	AssignmentExpr	tmpBuffer [ vertexBufferNumPoints ] . color [ 0 ] = originalInput [ x + y * width ] . color [ 2 ]
>451	ArrayIndexing	originalInput [ x + y * width ] . color [ 2 ]
>452	PrimaryExpression	2
>453	MemberAccess	originalInput [ x + y * width ] . color
>454	Identifier	color
>455	ArrayIndexing	originalInput [ x + y * width ]
>456	AdditiveExpression	x + y * width
>457	MultiplicativeExpression	y * width
>458	Identifier	width
>459	Identifier	y
>460	Identifier	x
>461	Identifier	originalInput
>462	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ] . color [ 0 ]
>463	PrimaryExpression	0
>464	MemberAccess	tmpBuffer [ vertexBufferNumPoints ] . color
>465	Identifier	color
>466	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ]
>467	Identifier	vertexBufferNumPoints
>468	Identifier	tmpBuffer
>469	ExpressionStatement	 
>470	AssignmentExpr	tmpBuffer [ vertexBufferNumPoints ] . color [ 1 ] = originalInput [ x + y * width ] . color [ 1 ]
>471	ArrayIndexing	originalInput [ x + y * width ] . color [ 1 ]
>472	PrimaryExpression	1
>473	MemberAccess	originalInput [ x + y * width ] . color
>474	Identifier	color
>475	ArrayIndexing	originalInput [ x + y * width ]
>476	AdditiveExpression	x + y * width
>477	MultiplicativeExpression	y * width
>478	Identifier	width
>479	Identifier	y
>480	Identifier	x
>481	Identifier	originalInput
>482	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ] . color [ 1 ]
>483	PrimaryExpression	1
>484	MemberAccess	tmpBuffer [ vertexBufferNumPoints ] . color
>485	Identifier	color
>486	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ]
>487	Identifier	vertexBufferNumPoints
>488	Identifier	tmpBuffer
>489	ExpressionStatement	 
>490	AssignmentExpr	tmpBuffer [ vertexBufferNumPoints ] . color [ 2 ] = originalInput [ x + y * width ] . color [ 0 ]
>491	ArrayIndexing	originalInput [ x + y * width ] . color [ 0 ]
>492	PrimaryExpression	0
>493	MemberAccess	originalInput [ x + y * width ] . color
>494	Identifier	color
>495	ArrayIndexing	originalInput [ x + y * width ]
>496	AdditiveExpression	x + y * width
>497	MultiplicativeExpression	y * width
>498	Identifier	width
>499	Identifier	y
>500	Identifier	x
>501	Identifier	originalInput
>502	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ] . color [ 2 ]
>503	PrimaryExpression	2
>504	MemberAccess	tmpBuffer [ vertexBufferNumPoints ] . color
>505	Identifier	color
>506	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ]
>507	Identifier	vertexBufferNumPoints
>508	Identifier	tmpBuffer
>509	ExpressionStatement	 
>510	AssignmentExpr	tmpBuffer [ vertexBufferNumPoints ] . color [ 3 ] = 100
>511	PrimaryExpression	100
>512	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ] . color [ 3 ]
>513	PrimaryExpression	3
>514	MemberAccess	tmpBuffer [ vertexBufferNumPoints ] . color
>515	Identifier	color
>516	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ]
>517	Identifier	vertexBufferNumPoints
>518	Identifier	tmpBuffer
>519	ExpressionStatement	 
>520	AssignmentExpr	tmpBuffer [ vertexBufferNumPoints ] . point [ 2 ] = depth
>521	Identifier	depth
>522	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ] . point [ 2 ]
>523	PrimaryExpression	2
>524	MemberAccess	tmpBuffer [ vertexBufferNumPoints ] . point
>525	Identifier	point
>526	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ]
>527	Identifier	vertexBufferNumPoints
>528	Identifier	tmpBuffer
>529	ExpressionStatement	 
>530	AssignmentExpr	tmpBuffer [ vertexBufferNumPoints ] . point [ 1 ] = ( y * fyi + cyi ) * depth
>531	MultiplicativeExpression	( y * fyi + cyi ) * depth
>532	Identifier	depth
>533	AdditiveExpression	y * fyi + cyi
>534	Identifier	cyi
>535	MultiplicativeExpression	y * fyi
>536	Identifier	fyi
>537	Identifier	y
>538	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ] . point [ 1 ]
>539	PrimaryExpression	1
>540	MemberAccess	tmpBuffer [ vertexBufferNumPoints ] . point
>541	Identifier	point
>542	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ]
>543	Identifier	vertexBufferNumPoints
>544	Identifier	tmpBuffer
>545	ExpressionStatement	 
>546	AssignmentExpr	tmpBuffer [ vertexBufferNumPoints ] . point [ 0 ] = ( x * fxi + cxi ) * depth
>547	MultiplicativeExpression	( x * fxi + cxi ) * depth
>548	Identifier	depth
>549	AdditiveExpression	x * fxi + cxi
>550	Identifier	cxi
>551	MultiplicativeExpression	x * fxi
>552	Identifier	fxi
>553	Identifier	x
>554	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ] . point [ 0 ]
>555	PrimaryExpression	0
>556	MemberAccess	tmpBuffer [ vertexBufferNumPoints ] . point
>557	Identifier	point
>558	ArrayIndexing	tmpBuffer [ vertexBufferNumPoints ]
>559	Identifier	vertexBufferNumPoints
>560	Identifier	tmpBuffer
>561	IfStatement	if ( my_minNearSupport > 1 )
>562	CompoundStatement	 
>563	IfStatement	if ( nearSupport < my_minNearSupport )
>564	ContinueStatement	 
>565	Condition	 
>566	RelationalExpression	nearSupport < my_minNearSupport
>567	Identifier	my_minNearSupport
>568	Identifier	nearSupport
>569	ForStatement	for ( int dx = - 1 ; dx < 2 ; dx ++ )
>570	ForStatement	for ( int dy = - 1 ; dy < 2 ; dy ++ )
>571	CompoundStatement	 
>572	IfStatement	if ( originalInput [ idx ] . idepth > 0 )
>573	CompoundStatement	 
>574	IfStatement	if ( diff * diff < 2 * originalInput [ x + y * width ] . idepth_var )
>575	ExpressionStatement	 
>576	IncDecOp	nearSupport ++
>577	IncDec	++
>578	Identifier	nearSupport
>579	Condition	 
>580	RelationalExpression	diff * diff < 2 * originalInput [ x + y * width ] . idepth_var
>581	MultiplicativeExpression	2 * originalInput [ x + y * width ] . idepth_var
>582	MemberAccess	originalInput [ x + y * width ] . idepth_var
>583	Identifier	idepth_var
>584	ArrayIndexing	originalInput [ x + y * width ]
>585	AdditiveExpression	x + y * width
>586	MultiplicativeExpression	y * width
>587	Identifier	width
>588	Identifier	y
>589	Identifier	x
>590	Identifier	originalInput
>591	PrimaryExpression	2
>592	MultiplicativeExpression	diff * diff
>593	Identifier	diff
>594	Identifier	diff
>595	IdentifierDeclStatement	 
>596	IdentifierDecl	diff = originalInput [ idx ] . idepth - 1.0f / depth
>597	AssignmentExpr	diff = originalInput [ idx ] . idepth - 1.0f / depth
>598	AdditiveExpression	originalInput [ idx ] . idepth - 1.0f / depth
>599	MultiplicativeExpression	1.0f / depth
>600	Identifier	depth
>601	PrimaryExpression	1.0f
>602	MemberAccess	originalInput [ idx ] . idepth
>603	Identifier	idepth
>604	ArrayIndexing	originalInput [ idx ]
>605	Identifier	idx
>606	Identifier	originalInput
>607	Identifier	diff
>608	Identifier	diff
>609	IdentifierDeclType	float
>610	Condition	 
>611	RelationalExpression	originalInput [ idx ] . idepth > 0
>612	PrimaryExpression	0
>613	MemberAccess	originalInput [ idx ] . idepth
>614	Identifier	idepth
>615	ArrayIndexing	originalInput [ idx ]
>616	Identifier	idx
>617	Identifier	originalInput
>618	IdentifierDeclStatement	 
>619	IdentifierDecl	idx = x + dx + ( y + dy ) * width
>620	AssignmentExpr	idx = x + dx + ( y + dy ) * width
>621	AdditiveExpression	x + dx + ( y + dy ) * width
>622	AdditiveExpression	dx + ( y + dy ) * width
>623	MultiplicativeExpression	( y + dy ) * width
>624	Identifier	width
>625	AdditiveExpression	y + dy
>626	Identifier	dy
>627	Identifier	y
>628	Identifier	dx
>629	Identifier	x
>630	Identifier	idx
>631	Identifier	idx
>632	IdentifierDeclType	int
>633	IncDecOp	 
>634	IncDec	++
>635	Identifier	dy
>636	Condition	 
>637	RelationalExpression	dy < 2
>638	PrimaryExpression	2
>639	Identifier	dy
>640	ForInit	 
>641	IdentifierDeclStatement	int dy = - 1 ;
>642	IdentifierDecl	dy = - 1
>643	AssignmentExpr	dy = - 1
>644	UnaryOp	- 1
>645	PrimaryExpression	1
>646	UnaryOperator	-
>647	Identifier	dy
>648	Identifier	dy
>649	IdentifierDeclType	int
>650	IncDecOp	 
>651	IncDec	++
>652	Identifier	dx
>653	Condition	 
>654	RelationalExpression	dx < 2
>655	PrimaryExpression	2
>656	Identifier	dx
>657	ForInit	 
>658	IdentifierDeclStatement	int dx = - 1 ;
>659	IdentifierDecl	dx = - 1
>660	AssignmentExpr	dx = - 1
>661	UnaryOp	- 1
>662	PrimaryExpression	1
>663	UnaryOperator	-
>664	Identifier	dx
>665	Identifier	dx
>666	IdentifierDeclType	int
>667	IdentifierDeclStatement	 
>668	IdentifierDecl	nearSupport = 0
>669	AssignmentExpr	nearSupport = 0
>670	PrimaryExpression	0
>671	Identifier	nearSupport
>672	Identifier	nearSupport
>673	IdentifierDeclType	int
>674	Condition	 
>675	RelationalExpression	my_minNearSupport > 1
>676	PrimaryExpression	1
>677	Identifier	my_minNearSupport
>678	IfStatement	if ( originalInput [ x + y * width ] . idepth_var * depth4 * my_scale * my_scale > my_absTH )
>679	ContinueStatement	 
>680	Condition	 
>681	RelationalExpression	originalInput [ x + y * width ] . idepth_var * depth4 * my_scale * my_scale > my_absTH
>682	Identifier	my_absTH
>683	MultiplicativeExpression	originalInput [ x + y * width ] . idepth_var * depth4 * my_scale * my_scale
>684	MultiplicativeExpression	depth4 * my_scale * my_scale
>685	MultiplicativeExpression	my_scale * my_scale
>686	Identifier	my_scale
>687	Identifier	my_scale
>688	Identifier	depth4
>689	MemberAccess	originalInput [ x + y * width ] . idepth_var
>690	Identifier	idepth_var
>691	ArrayIndexing	originalInput [ x + y * width ]
>692	AdditiveExpression	x + y * width
>693	MultiplicativeExpression	y * width
>694	Identifier	width
>695	Identifier	y
>696	Identifier	x
>697	Identifier	originalInput
>698	IfStatement	if ( originalInput [ x + y * width ] . idepth_var * depth4 > my_scaledTH )
>699	ContinueStatement	 
>700	Condition	 
>701	RelationalExpression	originalInput [ x + y * width ] . idepth_var * depth4 > my_scaledTH
>702	Identifier	my_scaledTH
>703	MultiplicativeExpression	originalInput [ x + y * width ] . idepth_var * depth4
>704	Identifier	depth4
>705	MemberAccess	originalInput [ x + y * width ] . idepth_var
>706	Identifier	idepth_var
>707	ArrayIndexing	originalInput [ x + y * width ]
>708	AdditiveExpression	x + y * width
>709	MultiplicativeExpression	y * width
>710	Identifier	width
>711	Identifier	y
>712	Identifier	x
>713	Identifier	originalInput
>714	ExpressionStatement	 
>715	AssignmentExpr	depth4 *= depth4
>716	Identifier	depth4
>717	Identifier	depth4
>718	IdentifierDeclStatement	 
>719	IdentifierDecl	depth4 = depth * depth
>720	AssignmentExpr	depth4 = depth * depth
>721	MultiplicativeExpression	depth * depth
>722	Identifier	depth
>723	Identifier	depth
>724	Identifier	depth4
>725	Identifier	depth4
>726	IdentifierDeclType	float
>727	IdentifierDeclStatement	 
>728	IdentifierDecl	depth = 1 / originalInput [ x + y * width ] . idepth
>729	AssignmentExpr	depth = 1 / originalInput [ x + y * width ] . idepth
>730	MultiplicativeExpression	1 / originalInput [ x + y * width ] . idepth
>731	MemberAccess	originalInput [ x + y * width ] . idepth
>732	Identifier	idepth
>733	ArrayIndexing	originalInput [ x + y * width ]
>734	AdditiveExpression	x + y * width
>735	MultiplicativeExpression	y * width
>736	Identifier	width
>737	Identifier	y
>738	Identifier	x
>739	Identifier	originalInput
>740	PrimaryExpression	1
>741	Identifier	depth
>742	Identifier	depth
>743	IdentifierDeclType	float
>744	IfStatement	if ( my_sparsifyFactor > 1 && rand ( ) % my_sparsifyFactor != 0 )
>745	ContinueStatement	 
>746	Condition	 
>747	AndExpression	my_sparsifyFactor > 1 && rand ( ) % my_sparsifyFactor != 0
>748	EqualityExpression	rand ( ) % my_sparsifyFactor != 0
>749	PrimaryExpression	0
>750	MultiplicativeExpression	rand ( ) % my_sparsifyFactor
>751	Identifier	my_sparsifyFactor
>752	CallExpression	rand ( )
>753	ArgumentList	 
>754	Callee	rand
>755	Identifier	rand
>756	RelationalExpression	my_sparsifyFactor > 1
>757	PrimaryExpression	1
>758	Identifier	my_sparsifyFactor
>759	ExpressionStatement	 
>760	IncDecOp	total ++
>761	IncDec	++
>762	Identifier	total
>763	IfStatement	if ( originalInput [ x + y * width ] . idepth <= 0 )
>764	ContinueStatement	 
>765	Condition	 
>766	RelationalExpression	originalInput [ x + y * width ] . idepth <= 0
>767	PrimaryExpression	0
>768	MemberAccess	originalInput [ x + y * width ] . idepth
>769	Identifier	idepth
>770	ArrayIndexing	originalInput [ x + y * width ]
>771	AdditiveExpression	x + y * width
>772	MultiplicativeExpression	y * width
>773	Identifier	width
>774	Identifier	y
>775	Identifier	x
>776	Identifier	originalInput
>777	IncDecOp	 
>778	IncDec	++
>779	Identifier	x
>780	Condition	 
>781	RelationalExpression	x < width - 1
>782	AdditiveExpression	width - 1
>783	PrimaryExpression	1
>784	Identifier	width
>785	Identifier	x
>786	ForInit	 
>787	IdentifierDeclStatement	int x = 1 ;
>788	IdentifierDecl	x = 1
>789	AssignmentExpr	x = 1
>790	PrimaryExpression	1
>791	Identifier	x
>792	Identifier	x
>793	IdentifierDeclType	int
>794	IncDecOp	 
>795	IncDec	++
>796	Identifier	y
>797	Condition	 
>798	RelationalExpression	y < height - 1
>799	AdditiveExpression	height - 1
>800	PrimaryExpression	1
>801	Identifier	height
>802	Identifier	y
>803	ForInit	 
>804	IdentifierDeclStatement	int y = 1 ;
>805	IdentifierDecl	y = 1
>806	AssignmentExpr	y = 1
>807	PrimaryExpression	1
>808	Identifier	y
>809	Identifier	y
>810	IdentifierDeclType	int
>811	IdentifierDeclStatement	 
>812	IdentifierDecl	displayed = 0
>813	AssignmentExpr	displayed = 0
>814	PrimaryExpression	0
>815	Identifier	displayed
>816	Identifier	displayed
>817	IdentifierDeclType	int
>818	IdentifierDecl	total = 0
>819	AssignmentExpr	total = 0
>820	PrimaryExpression	0
>821	Identifier	total
>822	Identifier	total
>823	IdentifierDeclType	int
>824	ExpressionStatement	 
>825	AssignmentExpr	vertexBufferNumPoints = 0
>826	PrimaryExpression	0
>827	Identifier	vertexBufferNumPoints
>828	ExpressionStatement	 
>829	AssignmentExpr	my_sparsifyFactor = sparsifyFactor
>830	Identifier	sparsifyFactor
>831	Identifier	my_sparsifyFactor
>832	ExpressionStatement	 
>833	AssignmentExpr	my_minNearSupport = minNearSupport
>834	Identifier	minNearSupport
>835	Identifier	my_minNearSupport
>836	ExpressionStatement	 
>837	AssignmentExpr	my_scale = camToWorld . scale ( )
>838	CallExpression	camToWorld . scale ( )
>839	ArgumentList	 
>840	Callee	camToWorld . scale
>841	MemberAccess	camToWorld . scale
>842	Identifier	scale
>843	Identifier	camToWorld
>844	Identifier	my_scale
>845	ExpressionStatement	 
>846	AssignmentExpr	my_absTH = absDepthVarTH
>847	Identifier	absDepthVarTH
>848	Identifier	my_absTH
>849	ExpressionStatement	 
>850	AssignmentExpr	my_scaledTH = scaledDepthVarTH
>851	Identifier	scaledDepthVarTH
>852	Identifier	my_scaledTH
>853	IdentifierDeclStatement	 
>854	IdentifierDecl	* tmpBuffer = new MyVertex [ width * height ]
>855	AssignmentExpr	* tmpBuffer = new MyVertex [ width * height ]
>856	MultiplicativeExpression	width * height
>857	Identifier	height
>858	Identifier	width
>859	Identifier	tmpBuffer
>860	Identifier	tmpBuffer
>861	IdentifierDeclType	MyVertex *
>862	IfStatement	if ( originalInput == 0 )
>863	ReturnStatement	 
>864	Condition	 
>865	EqualityExpression	originalInput == 0
>866	PrimaryExpression	0
>867	Identifier	originalInput
>868	IfStatement	if ( vertexBufferIdValid )
>869	CompoundStatement	 
>870	ExpressionStatement	 
>871	AssignmentExpr	vertexBufferIdValid = false
>872	Identifier	false
>873	Identifier	vertexBufferIdValid
>874	ExpressionStatement	 
>875	CallExpression	glDeleteBuffers ( 1 , & vertexBufferId )
>876	ArgumentList	1
>877	Argument	& vertexBufferId
>878	UnaryOp	& vertexBufferId
>879	Identifier	vertexBufferId
>880	UnaryOperator	&
>881	Argument	1
>882	PrimaryExpression	1
>883	Callee	glDeleteBuffers
>884	Identifier	glDeleteBuffers
>885	Condition	 
>886	Identifier	vertexBufferIdValid
>887	ExpressionStatement	 
>888	AssignmentExpr	glBuffersValid = true
>889	Identifier	true
>890	Identifier	glBuffersValid
>891	ExpressionStatement	 
>892	IncDecOp	numRefreshedAlready ++
>893	IncDec	++
>894	Identifier	numRefreshedAlready
>895	IfStatement	if ( glBuffersValid && ( paramsStillGood || numRefreshedAlready > 10 ) )
>896	ReturnStatement	 
>897	Condition	 
>898	AndExpression	glBuffersValid && ( paramsStillGood || numRefreshedAlready > 10 )
>899	OrExpression	paramsStillGood || numRefreshedAlready > 10
>900	RelationalExpression	numRefreshedAlready > 10
>901	PrimaryExpression	10
>902	Identifier	numRefreshedAlready
>903	Identifier	paramsStillGood
>904	Identifier	glBuffersValid
>905	IdentifierDeclStatement	 
>906	IdentifierDecl	paramsStillGood = my_scaledTH == scaledDepthVarTH && my_absTH == absDepthVarTH && my_scale * 1.2 > camToWorld . \
>907	AssignmentExpr	paramsStillGood = my_scaledTH == scaledDepthVarTH && my_absTH == absDepthVarTH && my_scale * 1.2 > camToWorld \
>908	AndExpression	my_scaledTH == scaledDepthVarTH && my_absTH == absDepthVarTH && my_scale * 1.2 > camToWorld . scale ( ) && \
>909	AndExpression	my_absTH == absDepthVarTH && my_scale * 1.2 > camToWorld . scale ( ) && my_scale < camToWorld . scale ( ) * \
>910	AndExpression	my_scale * 1.2 > camToWorld . scale ( ) && my_scale < camToWorld . scale ( ) * 1.2 && my_minNearSupport == \
>911	AndExpression	my_scale < camToWorld . scale ( ) * 1.2 && my_minNearSupport == minNearSupport && my_sparsifyFactor == \
>912	AndExpression	my_minNearSupport == minNearSupport && my_sparsifyFactor == sparsifyFactor
>913	EqualityExpression	my_sparsifyFactor == sparsifyFactor
>914	Identifier	sparsifyFactor
>915	Identifier	my_sparsifyFactor
>916	EqualityExpression	my_minNearSupport == minNearSupport
>917	Identifier	minNearSupport
>918	Identifier	my_minNearSupport
>919	RelationalExpression	my_scale < camToWorld . scale ( ) * 1.2
>920	MultiplicativeExpression	camToWorld . scale ( ) * 1.2
>921	PrimaryExpression	1.2
>922	CallExpression	camToWorld . scale ( )
>923	ArgumentList	 
>924	Callee	camToWorld . scale
>925	MemberAccess	camToWorld . scale
>926	Identifier	scale
>927	Identifier	camToWorld
>928	Identifier	my_scale
>929	RelationalExpression	my_scale * 1.2 > camToWorld . scale ( )
>930	CallExpression	camToWorld . scale ( )
>931	ArgumentList	 
>932	Callee	camToWorld . scale
>933	MemberAccess	camToWorld . scale
>934	Identifier	scale
>935	Identifier	camToWorld
>936	MultiplicativeExpression	my_scale * 1.2
>937	PrimaryExpression	1.2
>938	Identifier	my_scale
>939	EqualityExpression	my_absTH == absDepthVarTH
>940	Identifier	absDepthVarTH
>941	Identifier	my_absTH
>942	EqualityExpression	my_scaledTH == scaledDepthVarTH
>943	Identifier	scaledDepthVarTH
>944	Identifier	my_scaledTH
>945	Identifier	paramsStillGood
>946	Identifier	paramsStillGood
>947	IdentifierDeclType	bool
>1018	FunctionDef	KeyFrameDisplay 
>1019	ParameterList	float lineWidth , float * color
>1020	Parameter	 
>1021	Identifier	color
>1022	ParameterType	float *
>1023	Parameter	 
>1024	Identifier	lineWidth
>1025	ParameterType	float
>1026	ReturnType	void
>1027	CompoundStatement	 
>1028	ExpressionStatement	 
>1029	CallExpression	glPopMatrix ( )
>1030	ArgumentList	 
>1031	Callee	glPopMatrix
>1032	Identifier	glPopMatrix
>1033	ExpressionStatement	 
>1034	CallExpression	glEnd ( )
>1035	ArgumentList	 
>1036	Callee	glEnd
>1037	Identifier	glEnd
>1038	ExpressionStatement	 
>1039	CallExpression	glVertex3f ( 0.05 * ( width - 1 - cx ) / fx , 0.05 * ( 0 - cy ) / fy , 0.05 )
>1040	ArgumentList	0.05 * ( width - 1 - cx ) / fx
>1041	Argument	0.05
>1042	PrimaryExpression	0.05
>1043	Argument	0.05 * ( 0 - cy ) / fy
>1044	MultiplicativeExpression	0.05 * ( 0 - cy ) / fy
>1045	MultiplicativeExpression	( 0 - cy ) / fy
>1046	Identifier	fy
>1047	AdditiveExpression	0 - cy
>1048	Identifier	cy
>1049	PrimaryExpression	0
>1050	PrimaryExpression	0.05
>1051	Argument	0.05 * ( width - 1 - cx ) / fx
>1052	MultiplicativeExpression	0.05 * ( width - 1 - cx ) / fx
>1053	MultiplicativeExpression	( width - 1 - cx ) / fx
>1054	Identifier	fx
>1055	AdditiveExpression	width - 1 - cx
>1056	AdditiveExpression	1 - cx
>1057	Identifier	cx
>1058	PrimaryExpression	1
>1059	Identifier	width
>1060	PrimaryExpression	0.05
>1061	Callee	glVertex3f
>1062	Identifier	glVertex3f
>1063	ExpressionStatement	 
>1064	CallExpression	glVertex3f ( 0.05 * ( 0 - cx ) / fx , 0.05 * ( 0 - cy ) / fy , 0.05 )
>1065	ArgumentList	0.05 * ( 0 - cx ) / fx
>1066	Argument	0.05
>1067	PrimaryExpression	0.05
>1068	Argument	0.05 * ( 0 - cy ) / fy
>1069	MultiplicativeExpression	0.05 * ( 0 - cy ) / fy
>1070	MultiplicativeExpression	( 0 - cy ) / fy
>1071	Identifier	fy
>1072	AdditiveExpression	0 - cy
>1073	Identifier	cy
>1074	PrimaryExpression	0
>1075	PrimaryExpression	0.05
>1076	Argument	0.05 * ( 0 - cx ) / fx
>1077	MultiplicativeExpression	0.05 * ( 0 - cx ) / fx
>1078	MultiplicativeExpression	( 0 - cx ) / fx
>1079	Identifier	fx
>1080	AdditiveExpression	0 - cx
>1081	Identifier	cx
>1082	PrimaryExpression	0
>1083	PrimaryExpression	0.05
>1084	Callee	glVertex3f
>1085	Identifier	glVertex3f
>1086	ExpressionStatement	 
>1087	CallExpression	glVertex3f ( 0.05 * ( 0 - cx ) / fx , 0.05 * ( 0 - cy ) / fy , 0.05 )
>1088	ArgumentList	0.05 * ( 0 - cx ) / fx
>1089	Argument	0.05
>1090	PrimaryExpression	0.05
>1091	Argument	0.05 * ( 0 - cy ) / fy
>1092	MultiplicativeExpression	0.05 * ( 0 - cy ) / fy
>1093	MultiplicativeExpression	( 0 - cy ) / fy
>1094	Identifier	fy
>1095	AdditiveExpression	0 - cy
>1096	Identifier	cy
>1097	PrimaryExpression	0
>1098	PrimaryExpression	0.05
>1099	Argument	0.05 * ( 0 - cx ) / fx
>1100	MultiplicativeExpression	0.05 * ( 0 - cx ) / fx
>1101	MultiplicativeExpression	( 0 - cx ) / fx
>1102	Identifier	fx
>1103	AdditiveExpression	0 - cx
>1104	Identifier	cx
>1105	PrimaryExpression	0
>1106	PrimaryExpression	0.05
>1107	Callee	glVertex3f
>1108	Identifier	glVertex3f
>1109	ExpressionStatement	 
>1110	CallExpression	glVertex3f ( 0.05 * ( 0 - cx ) / fx , 0.05 * ( height - 1 - cy ) / fy , 0.05 )
>1111	ArgumentList	0.05 * ( 0 - cx ) / fx
>1112	Argument	0.05
>1113	PrimaryExpression	0.05
>1114	Argument	0.05 * ( height - 1 - cy ) / fy
>1115	MultiplicativeExpression	0.05 * ( height - 1 - cy ) / fy
>1116	MultiplicativeExpression	( height - 1 - cy ) / fy
>1117	Identifier	fy
>1118	AdditiveExpression	height - 1 - cy
>1119	AdditiveExpression	1 - cy
>1120	Identifier	cy
>1121	PrimaryExpression	1
>1122	Identifier	height
>1123	PrimaryExpression	0.05
>1124	Argument	0.05 * ( 0 - cx ) / fx
>1125	MultiplicativeExpression	0.05 * ( 0 - cx ) / fx
>1126	MultiplicativeExpression	( 0 - cx ) / fx
>1127	Identifier	fx
>1128	AdditiveExpression	0 - cx
>1129	Identifier	cx
>1130	PrimaryExpression	0
>1131	PrimaryExpression	0.05
>1132	Callee	glVertex3f
>1133	Identifier	glVertex3f
>1134	ExpressionStatement	 
>1135	CallExpression	glVertex3f ( 0.05 * ( 0 - cx ) / fx , 0.05 * ( height - 1 - cy ) / fy , 0.05 )
>1136	ArgumentList	0.05 * ( 0 - cx ) / fx
>1137	Argument	0.05
>1138	PrimaryExpression	0.05
>1139	Argument	0.05 * ( height - 1 - cy ) / fy
>1140	MultiplicativeExpression	0.05 * ( height - 1 - cy ) / fy
>1141	MultiplicativeExpression	( height - 1 - cy ) / fy
>1142	Identifier	fy
>1143	AdditiveExpression	height - 1 - cy
>1144	AdditiveExpression	1 - cy
>1145	Identifier	cy
>1146	PrimaryExpression	1
>1147	Identifier	height
>1148	PrimaryExpression	0.05
>1149	Argument	0.05 * ( 0 - cx ) / fx
>1150	MultiplicativeExpression	0.05 * ( 0 - cx ) / fx
>1151	MultiplicativeExpression	( 0 - cx ) / fx
>1152	Identifier	fx
>1153	AdditiveExpression	0 - cx
>1154	Identifier	cx
>1155	PrimaryExpression	0
>1156	PrimaryExpression	0.05
>1157	Callee	glVertex3f
>1158	Identifier	glVertex3f
>1159	ExpressionStatement	 
>1160	CallExpression	glVertex3f ( 0.05 * ( width - 1 - cx ) / fx , 0.05 * ( height - 1 - cy ) / fy , 0.05 )
>1161	ArgumentList	0.05 * ( width - 1 - cx ) / fx
>1162	Argument	0.05
>1163	PrimaryExpression	0.05
>1164	Argument	0.05 * ( height - 1 - cy ) / fy
>1165	MultiplicativeExpression	0.05 * ( height - 1 - cy ) / fy
>1166	MultiplicativeExpression	( height - 1 - cy ) / fy
>1167	Identifier	fy
>1168	AdditiveExpression	height - 1 - cy
>1169	AdditiveExpression	1 - cy
>1170	Identifier	cy
>1171	PrimaryExpression	1
>1172	Identifier	height
>1173	PrimaryExpression	0.05
>1174	Argument	0.05 * ( width - 1 - cx ) / fx
>1175	MultiplicativeExpression	0.05 * ( width - 1 - cx ) / fx
>1176	MultiplicativeExpression	( width - 1 - cx ) / fx
>1177	Identifier	fx
>1178	AdditiveExpression	width - 1 - cx
>1179	AdditiveExpression	1 - cx
>1180	Identifier	cx
>1181	PrimaryExpression	1
>1182	Identifier	width
>1183	PrimaryExpression	0.05
>1184	Callee	glVertex3f
>1185	Identifier	glVertex3f
>1186	ExpressionStatement	 
>1187	CallExpression	glVertex3f ( 0.05 * ( width - 1 - cx ) / fx , 0.05 * ( height - 1 - cy ) / fy , 0.05 )
>1188	ArgumentList	0.05 * ( width - 1 - cx ) / fx
>1189	Argument	0.05
>1190	PrimaryExpression	0.05
>1191	Argument	0.05 * ( height - 1 - cy ) / fy
>1192	MultiplicativeExpression	0.05 * ( height - 1 - cy ) / fy
>1193	MultiplicativeExpression	( height - 1 - cy ) / fy
>1194	Identifier	fy
>1195	AdditiveExpression	height - 1 - cy
>1196	AdditiveExpression	1 - cy
>1197	Identifier	cy
>1198	PrimaryExpression	1
>1199	Identifier	height
>1200	PrimaryExpression	0.05
>1201	Argument	0.05 * ( width - 1 - cx ) / fx
>1202	MultiplicativeExpression	0.05 * ( width - 1 - cx ) / fx
>1203	MultiplicativeExpression	( width - 1 - cx ) / fx
>1204	Identifier	fx
>1205	AdditiveExpression	width - 1 - cx
>1206	AdditiveExpression	1 - cx
>1207	Identifier	cx
>1208	PrimaryExpression	1
>1209	Identifier	width
>1210	PrimaryExpression	0.05
>1211	Callee	glVertex3f
>1212	Identifier	glVertex3f
>1213	ExpressionStatement	 
>1214	CallExpression	glVertex3f ( 0.05 * ( width - 1 - cx ) / fx , 0.05 * ( 0 - cy ) / fy , 0.05 )
>1215	ArgumentList	0.05 * ( width - 1 - cx ) / fx
>1216	Argument	0.05
>1217	PrimaryExpression	0.05
>1218	Argument	0.05 * ( 0 - cy ) / fy
>1219	MultiplicativeExpression	0.05 * ( 0 - cy ) / fy
>1220	MultiplicativeExpression	( 0 - cy ) / fy
>1221	Identifier	fy
>1222	AdditiveExpression	0 - cy
>1223	Identifier	cy
>1224	PrimaryExpression	0
>1225	PrimaryExpression	0.05
>1226	Argument	0.05 * ( width - 1 - cx ) / fx
>1227	MultiplicativeExpression	0.05 * ( width - 1 - cx ) / fx
>1228	MultiplicativeExpression	( width - 1 - cx ) / fx
>1229	Identifier	fx
>1230	AdditiveExpression	width - 1 - cx
>1231	AdditiveExpression	1 - cx
>1232	Identifier	cx
>1233	PrimaryExpression	1
>1234	Identifier	width
>1235	PrimaryExpression	0.05
>1236	Callee	glVertex3f
>1237	Identifier	glVertex3f
>1238	ExpressionStatement	 
>1239	CallExpression	glVertex3f ( 0.05 * ( width - 1 - cx ) / fx , 0.05 * ( 0 - cy ) / fy , 0.05 )
>1240	ArgumentList	0.05 * ( width - 1 - cx ) / fx
>1241	Argument	0.05
>1242	PrimaryExpression	0.05
>1243	Argument	0.05 * ( 0 - cy ) / fy
>1244	MultiplicativeExpression	0.05 * ( 0 - cy ) / fy
>1245	MultiplicativeExpression	( 0 - cy ) / fy
>1246	Identifier	fy
>1247	AdditiveExpression	0 - cy
>1248	Identifier	cy
>1249	PrimaryExpression	0
>1250	PrimaryExpression	0.05
>1251	Argument	0.05 * ( width - 1 - cx ) / fx
>1252	MultiplicativeExpression	0.05 * ( width - 1 - cx ) / fx
>1253	MultiplicativeExpression	( width - 1 - cx ) / fx
>1254	Identifier	fx
>1255	AdditiveExpression	width - 1 - cx
>1256	AdditiveExpression	1 - cx
>1257	Identifier	cx
>1258	PrimaryExpression	1
>1259	Identifier	width
>1260	PrimaryExpression	0.05
>1261	Callee	glVertex3f
>1262	Identifier	glVertex3f
>1263	ExpressionStatement	 
>1264	CallExpression	glVertex3f ( 0 , 0 , 0 )
>1265	ArgumentList	0
>1266	Argument	0
>1267	PrimaryExpression	0
>1268	Argument	0
>1269	PrimaryExpression	0
>1270	Argument	0
>1271	PrimaryExpression	0
>1272	Callee	glVertex3f
>1273	Identifier	glVertex3f
>1274	ExpressionStatement	 
>1275	CallExpression	glVertex3f ( 0.05 * ( width - 1 - cx ) / fx , 0.05 * ( height - 1 - cy ) / fy , 0.05 )
>1276	ArgumentList	0.05 * ( width - 1 - cx ) / fx
>1277	Argument	0.05
>1278	PrimaryExpression	0.05
>1279	Argument	0.05 * ( height - 1 - cy ) / fy
>1280	MultiplicativeExpression	0.05 * ( height - 1 - cy ) / fy
>1281	MultiplicativeExpression	( height - 1 - cy ) / fy
>1282	Identifier	fy
>1283	AdditiveExpression	height - 1 - cy
>1284	AdditiveExpression	1 - cy
>1285	Identifier	cy
>1286	PrimaryExpression	1
>1287	Identifier	height
>1288	PrimaryExpression	0.05
>1289	Argument	0.05 * ( width - 1 - cx ) / fx
>1290	MultiplicativeExpression	0.05 * ( width - 1 - cx ) / fx
>1291	MultiplicativeExpression	( width - 1 - cx ) / fx
>1292	Identifier	fx
>1293	AdditiveExpression	width - 1 - cx
>1294	AdditiveExpression	1 - cx
>1295	Identifier	cx
>1296	PrimaryExpression	1
>1297	Identifier	width
>1298	PrimaryExpression	0.05
>1299	Callee	glVertex3f
>1300	Identifier	glVertex3f
>1301	ExpressionStatement	 
>1302	CallExpression	glVertex3f ( 0 , 0 , 0 )
>1303	ArgumentList	0
>1304	Argument	0
>1305	PrimaryExpression	0
>1306	Argument	0
>1307	PrimaryExpression	0
>1308	Argument	0
>1309	PrimaryExpression	0
>1310	Callee	glVertex3f
>1311	Identifier	glVertex3f
>1312	ExpressionStatement	 
>1313	CallExpression	glVertex3f ( 0.05 * ( 0 - cx ) / fx , 0.05 * ( height - 1 - cy ) / fy , 0.05 )
>1314	ArgumentList	0.05 * ( 0 - cx ) / fx
>1315	Argument	0.05
>1316	PrimaryExpression	0.05
>1317	Argument	0.05 * ( height - 1 - cy ) / fy
>1318	MultiplicativeExpression	0.05 * ( height - 1 - cy ) / fy
>1319	MultiplicativeExpression	( height - 1 - cy ) / fy
>1320	Identifier	fy
>1321	AdditiveExpression	height - 1 - cy
>1322	AdditiveExpression	1 - cy
>1323	Identifier	cy
>1324	PrimaryExpression	1
>1325	Identifier	height
>1326	PrimaryExpression	0.05
>1327	Argument	0.05 * ( 0 - cx ) / fx
>1328	MultiplicativeExpression	0.05 * ( 0 - cx ) / fx
>1329	MultiplicativeExpression	( 0 - cx ) / fx
>1330	Identifier	fx
>1331	AdditiveExpression	0 - cx
>1332	Identifier	cx
>1333	PrimaryExpression	0
>1334	PrimaryExpression	0.05
>1335	Callee	glVertex3f
>1336	Identifier	glVertex3f
>1337	ExpressionStatement	 
>1338	CallExpression	glVertex3f ( 0 , 0 , 0 )
>1339	ArgumentList	0
>1340	Argument	0
>1341	PrimaryExpression	0
>1342	Argument	0
>1343	PrimaryExpression	0
>1344	Argument	0
>1345	PrimaryExpression	0
>1346	Callee	glVertex3f
>1347	Identifier	glVertex3f
>1348	ExpressionStatement	 
>1349	CallExpression	glVertex3f ( 0.05 * ( 0 - cx ) / fx , 0.05 * ( 0 - cy ) / fy , 0.05 )
>1350	ArgumentList	0.05 * ( 0 - cx ) / fx
>1351	Argument	0.05
>1352	PrimaryExpression	0.05
>1353	Argument	0.05 * ( 0 - cy ) / fy
>1354	MultiplicativeExpression	0.05 * ( 0 - cy ) / fy
>1355	MultiplicativeExpression	( 0 - cy ) / fy
>1356	Identifier	fy
>1357	AdditiveExpression	0 - cy
>1358	Identifier	cy
>1359	PrimaryExpression	0
>1360	PrimaryExpression	0.05
>1361	Argument	0.05 * ( 0 - cx ) / fx
>1362	MultiplicativeExpression	0.05 * ( 0 - cx ) / fx
>1363	MultiplicativeExpression	( 0 - cx ) / fx
>1364	Identifier	fx
>1365	AdditiveExpression	0 - cx
>1366	Identifier	cx
>1367	PrimaryExpression	0
>1368	PrimaryExpression	0.05
>1369	Callee	glVertex3f
>1370	Identifier	glVertex3f
>1371	ExpressionStatement	 
>1372	CallExpression	glVertex3f ( 0 , 0 , 0 )
>1373	ArgumentList	0
>1374	Argument	0
>1375	PrimaryExpression	0
>1376	Argument	0
>1377	PrimaryExpression	0
>1378	Argument	0
>1379	PrimaryExpression	0
>1380	Callee	glVertex3f
>1381	Identifier	glVertex3f
>1382	ExpressionStatement	 
>1383	CallExpression	glBegin ( GL_LINES )
>1384	ArgumentList	GL_LINES
>1385	Argument	GL_LINES
>1386	Identifier	GL_LINES
>1387	Callee	glBegin
>1388	Identifier	glBegin
>1389	ExpressionStatement	 
>1390	CallExpression	glLineWidth ( lineWidth )
>1391	ArgumentList	lineWidth
>1392	Argument	lineWidth
>1393	Identifier	lineWidth
>1394	Callee	glLineWidth
>1395	Identifier	glLineWidth
>1396	IfStatement	if ( color == 0 )
>1397	ElseStatement	else
>1398	ExpressionStatement	 
>1399	CallExpression	glColor3f ( color [ 0 ] , color [ 1 ] , color [ 2 ] )
>1400	ArgumentList	color [ 0 ]
>1401	Argument	color [ 2 ]
>1402	ArrayIndexing	color [ 2 ]
>1403	PrimaryExpression	2
>1404	Identifier	color
>1405	Argument	color [ 1 ]
>1406	ArrayIndexing	color [ 1 ]
>1407	PrimaryExpression	1
>1408	Identifier	color
>1409	Argument	color [ 0 ]
>1410	ArrayIndexing	color [ 0 ]
>1411	PrimaryExpression	0
>1412	Identifier	color
>1413	Callee	glColor3f
>1414	Identifier	glColor3f
>1415	ExpressionStatement	 
>1416	CallExpression	glColor3f ( 1 , 0 , 0 )
>1417	ArgumentList	1
>1418	Argument	0
>1419	PrimaryExpression	0
>1420	Argument	0
>1421	PrimaryExpression	0
>1422	Argument	1
>1423	PrimaryExpression	1
>1424	Callee	glColor3f
>1425	Identifier	glColor3f
>1426	Condition	 
>1427	EqualityExpression	color == 0
>1428	PrimaryExpression	0
>1429	Identifier	color
>1430	ExpressionStatement	 
>1431	CallExpression	glMultMatrixf ( ( GLfloat * ) m . data ( ) )
>1432	ArgumentList	( GLfloat * ) m . data ( )
>1433	Argument	( GLfloat * ) m . data ( )
>1434	CastExpression	( GLfloat * ) m . data ( )
>1435	CallExpression	m . data ( )
>1436	ArgumentList	 
>1437	Callee	m . data
>1438	MemberAccess	m . data
>1439	Identifier	data
>1440	Identifier	m
>1441	CastTarget	GLfloat *
>1442	Callee	glMultMatrixf
>1443	Identifier	glMultMatrixf
>1444	IdentifierDeclStatement	 
>1445	IdentifierDecl	m = camToWorld . matrix ( )
>1446	AssignmentExpr	m = camToWorld . matrix ( )
>1447	CallExpression	camToWorld . matrix ( )
>1448	ArgumentList	 
>1449	Callee	camToWorld . matrix
>1450	MemberAccess	camToWorld . matrix
>1451	Identifier	matrix
>1452	Identifier	camToWorld
>1453	Identifier	m
>1454	Identifier	m
>1455	IdentifierDeclType	Sophus 
>1456	ExpressionStatement	 
>1457	CallExpression	glPushMatrix ( )
>1458	ArgumentList	 
>1459	Callee	glPushMatrix
>1460	Identifier	glPushMatrix
>1461	IfStatement	if ( width == 0 )
>1462	ReturnStatement	 
>1463	Condition	 
>1464	EqualityExpression	width == 0
>1465	PrimaryExpression	0
>1466	Identifier	width
>1484	FunctionDef	KeyFrameDisplay 
>1485	ParameterList	std 
>1486	Parameter	 
>1487	Identifier	f
>1488	ParameterType	std 
>1489	ReturnType	int
>1490	CompoundStatement	 
>1491	ReturnStatement	 
>1492	Identifier	num
>1493	ExpressionStatement	 
>1494	CallExpression	printf ( \"Done flushing frame %d (%d points)!\n\" , this -> id , num )
>1495	ArgumentList	\"Done flushing frame %d (%d points)!\n\"
>1496	Argument	num
>1497	Identifier	num
>1498	Argument	this -> id
>1499	PtrMemberAccess	this -> id
>1500	Identifier	id
>1501	Identifier	this
>1502	Argument	\"Done flushing frame %d (%d points)!\n\"
>1503	PrimaryExpression	\"Done flushing frame %d (%d points)!\n\"
>1504	Callee	printf
>1505	Identifier	printf
>1506	ExpressionStatement	 
>1507	Identifier	tmpBuffer
>1508	Statement	 
>1509	ForStatement	for ( int i = 0 ; i < num ; i ++ )
>1510	CompoundStatement	 
>1511	ExpressionStatement	 
>1512	CallExpression	f -> write ( ( const char * ) & color , sizeof ( float ) )
>1513	ArgumentList	( const char * ) & color
>1514	Argument	sizeof ( float )
>1515	SizeofExpr	sizeof ( float )
>1516	SizeofOperand	float
>1517	Sizeof	sizeof
>1518	Argument	( const char * ) & color
>1519	CastExpression	( const char * ) & color
>1520	UnaryOp	& color
>1521	Identifier	color
>1522	UnaryOperator	&
>1523	CastTarget	const char *
>1524	Callee	f -> write
>1525	PtrMemberAccess	f -> write
>1526	Identifier	write
>1527	Identifier	f
>1528	IdentifierDeclStatement	 
>1529	IdentifierDecl	color = tmpBuffer [ i ] . color [ 0 ] / 255.0
>1530	AssignmentExpr	color = tmpBuffer [ i ] . color [ 0 ] / 255.0
>1531	MultiplicativeExpression	tmpBuffer [ i ] . color [ 0 ] / 255.0
>1532	PrimaryExpression	255.0
>1533	ArrayIndexing	tmpBuffer [ i ] . color [ 0 ]
>1534	PrimaryExpression	0
>1535	MemberAccess	tmpBuffer [ i ] . color
>1536	Identifier	color
>1537	ArrayIndexing	tmpBuffer [ i ]
>1538	Identifier	i
>1539	Identifier	tmpBuffer
>1540	Identifier	color
>1541	Identifier	color
>1542	IdentifierDeclType	float
>1543	ExpressionStatement	 
>1544	CallExpression	f -> write ( ( const char * ) tmpBuffer [ i ] . point , 3 * sizeof ( float ) )
>1545	ArgumentList	( const char * ) tmpBuffer [ i ] . point
>1546	Argument	3 * sizeof ( float )
>1547	MultiplicativeExpression	3 * sizeof ( float )
>1548	SizeofExpr	sizeof ( float )
>1549	SizeofOperand	float
>1550	Sizeof	sizeof
>1551	PrimaryExpression	3
>1552	Argument	( const char * ) tmpBuffer [ i ] . point
>1553	CastExpression	( const char * ) tmpBuffer [ i ] . point
>1554	MemberAccess	tmpBuffer [ i ] . point
>1555	Identifier	point
>1556	ArrayIndexing	tmpBuffer [ i ]
>1557	Identifier	i
>1558	Identifier	tmpBuffer
>1559	CastTarget	const char *
>1560	Callee	f -> write
>1561	PtrMemberAccess	f -> write
>1562	Identifier	write
>1563	Identifier	f
>1564	IncDecOp	 
>1565	IncDec	++
>1566	Identifier	i
>1567	Condition	 
>1568	RelationalExpression	i < num
>1569	Identifier	num
>1570	Identifier	i
>1571	ForInit	 
>1572	IdentifierDeclStatement	int i = 0 ;
>1573	IdentifierDecl	i = 0
>1574	AssignmentExpr	i = 0
>1575	PrimaryExpression	0
>1576	Identifier	i
>1577	Identifier	i
>1578	IdentifierDeclType	int
>1579	ForStatement	for ( int y = 1 ; y < height - 1 ; y ++ )
>1580	ForStatement	for ( int x = 1 ; x < width - 1 ; x ++ )
>1581	CompoundStatement	 
>1582	ExpressionStatement	 
>1583	IncDecOp	num ++
>1584	IncDec	++
>1585	Identifier	num
>1586	ExpressionStatement	 
>1587	AssignmentExpr	tmpBuffer [ num ] . color [ 0 ] = originalInput [ x + y * width ] . color [ 2 ]
>1588	ArrayIndexing	originalInput [ x + y * width ] . color [ 2 ]
>1589	PrimaryExpression	2
>1590	MemberAccess	originalInput [ x + y * width ] . color
>1591	Identifier	color
>1592	ArrayIndexing	originalInput [ x + y * width ]
>1593	AdditiveExpression	x + y * width
>1594	MultiplicativeExpression	y * width
>1595	Identifier	width
>1596	Identifier	y
>1597	Identifier	x
>1598	Identifier	originalInput
>1599	ArrayIndexing	tmpBuffer [ num ] . color [ 0 ]
>1600	PrimaryExpression	0
>1601	MemberAccess	tmpBuffer [ num ] . color
>1602	Identifier	color
>1603	ArrayIndexing	tmpBuffer [ num ]
>1604	Identifier	num
>1605	Identifier	tmpBuffer
>1606	ExpressionStatement	 
>1607	AssignmentExpr	tmpBuffer [ num ] . color [ 1 ] = originalInput [ x + y * width ] . color [ 1 ]
>1608	ArrayIndexing	originalInput [ x + y * width ] . color [ 1 ]
>1609	PrimaryExpression	1
>1610	MemberAccess	originalInput [ x + y * width ] . color
>1611	Identifier	color
>1612	ArrayIndexing	originalInput [ x + y * width ]
>1613	AdditiveExpression	x + y * width
>1614	MultiplicativeExpression	y * width
>1615	Identifier	width
>1616	Identifier	y
>1617	Identifier	x
>1618	Identifier	originalInput
>1619	ArrayIndexing	tmpBuffer [ num ] . color [ 1 ]
>1620	PrimaryExpression	1
>1621	MemberAccess	tmpBuffer [ num ] . color
>1622	Identifier	color
>1623	ArrayIndexing	tmpBuffer [ num ]
>1624	Identifier	num
>1625	Identifier	tmpBuffer
>1626	ExpressionStatement	 
>1627	AssignmentExpr	tmpBuffer [ num ] . color [ 2 ] = originalInput [ x + y * width ] . color [ 0 ]
>1628	ArrayIndexing	originalInput [ x + y * width ] . color [ 0 ]
>1629	PrimaryExpression	0
>1630	MemberAccess	originalInput [ x + y * width ] . color
>1631	Identifier	color
>1632	ArrayIndexing	originalInput [ x + y * width ]
>1633	AdditiveExpression	x + y * width
>1634	MultiplicativeExpression	y * width
>1635	Identifier	width
>1636	Identifier	y
>1637	Identifier	x
>1638	Identifier	originalInput
>1639	ArrayIndexing	tmpBuffer [ num ] . color [ 2 ]
>1640	PrimaryExpression	2
>1641	MemberAccess	tmpBuffer [ num ] . color
>1642	Identifier	color
>1643	ArrayIndexing	tmpBuffer [ num ]
>1644	Identifier	num
>1645	Identifier	tmpBuffer
>1646	ExpressionStatement	 
>1647	AssignmentExpr	tmpBuffer [ num ] . color [ 3 ] = 100
>1648	PrimaryExpression	100
>1649	ArrayIndexing	tmpBuffer [ num ] . color [ 3 ]
>1650	PrimaryExpression	3
>1651	MemberAccess	tmpBuffer [ num ] . color
>1652	Identifier	color
>1653	ArrayIndexing	tmpBuffer [ num ]
>1654	Identifier	num
>1655	Identifier	tmpBuffer
>1656	ExpressionStatement	 
>1657	AssignmentExpr	tmpBuffer [ num ] . point [ 2 ] = pt [ 2 ]
>1658	ArrayIndexing	pt [ 2 ]
>1659	PrimaryExpression	2
>1660	Identifier	pt
>1661	ArrayIndexing	tmpBuffer [ num ] . point [ 2 ]
>1662	PrimaryExpression	2
>1663	MemberAccess	tmpBuffer [ num ] . point
>1664	Identifier	point
>1665	ArrayIndexing	tmpBuffer [ num ]
>1666	Identifier	num
>1667	Identifier	tmpBuffer
>1668	ExpressionStatement	 
>1669	AssignmentExpr	tmpBuffer [ num ] . point [ 1 ] = pt [ 1 ]
>1670	ArrayIndexing	pt [ 1 ]
>1671	PrimaryExpression	1
>1672	Identifier	pt
>1673	ArrayIndexing	tmpBuffer [ num ] . point [ 1 ]
>1674	PrimaryExpression	1
>1675	MemberAccess	tmpBuffer [ num ] . point
>1676	Identifier	point
>1677	ArrayIndexing	tmpBuffer [ num ]
>1678	Identifier	num
>1679	Identifier	tmpBuffer
>1680	ExpressionStatement	 
>1681	AssignmentExpr	tmpBuffer [ num ] . point [ 0 ] = pt [ 0 ]
>1682	ArrayIndexing	pt [ 0 ]
>1683	PrimaryExpression	0
>1684	Identifier	pt
>1685	ArrayIndexing	tmpBuffer [ num ] . point [ 0 ]
>1686	PrimaryExpression	0
>1687	MemberAccess	tmpBuffer [ num ] . point
>1688	Identifier	point
>1689	ArrayIndexing	tmpBuffer [ num ]
>1690	Identifier	num
>1691	Identifier	tmpBuffer
>1692	IdentifierDeclStatement	 
>1693	IdentifierDecl	pt = camToWorld * ( Sophus 
>1694	AssignmentExpr	pt = camToWorld * ( Sophus 
>1695	MultiplicativeExpression	camToWorld * ( Sophus 
>1696	MultiplicativeExpression	Sophus 
>1697	Identifier	depth
>1698	CallExpression	Sophus 
>1699	ArgumentList	x * fxi + cxi
>1700	Argument	1
>1701	PrimaryExpression	1
>1702	Argument	y * fyi + cyi
>1703	AdditiveExpression	y * fyi + cyi
>1704	Identifier	cyi
>1705	MultiplicativeExpression	y * fyi
>1706	Identifier	fyi
>1707	Identifier	y
>1708	Argument	x * fxi + cxi
>1709	AdditiveExpression	x * fxi + cxi
>1710	Identifier	cxi
>1711	MultiplicativeExpression	x * fxi
>1712	Identifier	fxi
>1713	Identifier	x
>1714	Callee	Sophus 
>1715	Identifier	Sophus 
>1716	Identifier	camToWorld
>1717	Identifier	pt
>1718	Identifier	pt
>1719	IdentifierDeclType	Sophus 
>1720	IfStatement	if ( my_minNearSupport > 1 )
>1721	CompoundStatement	 
>1722	IfStatement	if ( nearSupport < my_minNearSupport )
>1723	ContinueStatement	 
>1724	Condition	 
>1725	RelationalExpression	nearSupport < my_minNearSupport
>1726	Identifier	my_minNearSupport
>1727	Identifier	nearSupport
>1728	ForStatement	for ( int dx = - 1 ; dx < 2 ; dx ++ )
>1729	ForStatement	for ( int dy = - 1 ; dy < 2 ; dy ++ )
>1730	CompoundStatement	 
>1731	IfStatement	if ( originalInput [ idx ] . idepth > 0 )
>1732	CompoundStatement	 
>1733	IfStatement	if ( diff * diff < 2 * originalInput [ x + y * width ] . idepth_var )
>1734	ExpressionStatement	 
>1735	IncDecOp	nearSupport ++
>1736	IncDec	++
>1737	Identifier	nearSupport
>1738	Condition	 
>1739	RelationalExpression	diff * diff < 2 * originalInput [ x + y * width ] . idepth_var
>1740	MultiplicativeExpression	2 * originalInput [ x + y * width ] . idepth_var
>1741	MemberAccess	originalInput [ x + y * width ] . idepth_var
>1742	Identifier	idepth_var
>1743	ArrayIndexing	originalInput [ x + y * width ]
>1744	AdditiveExpression	x + y * width
>1745	MultiplicativeExpression	y * width
>1746	Identifier	width
>1747	Identifier	y
>1748	Identifier	x
>1749	Identifier	originalInput
>1750	PrimaryExpression	2
>1751	MultiplicativeExpression	diff * diff
>1752	Identifier	diff
>1753	Identifier	diff
>1754	IdentifierDeclStatement	 
>1755	IdentifierDecl	diff = originalInput [ idx ] . idepth - 1.0f / depth
>1756	AssignmentExpr	diff = originalInput [ idx ] . idepth - 1.0f / depth
>1757	AdditiveExpression	originalInput [ idx ] . idepth - 1.0f / depth
>1758	MultiplicativeExpression	1.0f / depth
>1759	Identifier	depth
>1760	PrimaryExpression	1.0f
>1761	MemberAccess	originalInput [ idx ] . idepth
>1762	Identifier	idepth
>1763	ArrayIndexing	originalInput [ idx ]
>1764	Identifier	idx
>1765	Identifier	originalInput
>1766	Identifier	diff
>1767	Identifier	diff
>1768	IdentifierDeclType	float
>1769	Condition	 
>1770	RelationalExpression	originalInput [ idx ] . idepth > 0
>1771	PrimaryExpression	0
>1772	MemberAccess	originalInput [ idx ] . idepth
>1773	Identifier	idepth
>1774	ArrayIndexing	originalInput [ idx ]
>1775	Identifier	idx
>1776	Identifier	originalInput
>1777	IdentifierDeclStatement	 
>1778	IdentifierDecl	idx = x + dx + ( y + dy ) * width
>1779	AssignmentExpr	idx = x + dx + ( y + dy ) * width
>1780	AdditiveExpression	x + dx + ( y + dy ) * width
>1781	AdditiveExpression	dx + ( y + dy ) * width
>1782	MultiplicativeExpression	( y + dy ) * width
>1783	Identifier	width
>1784	AdditiveExpression	y + dy
>1785	Identifier	dy
>1786	Identifier	y
>1787	Identifier	dx
>1788	Identifier	x
>1789	Identifier	idx
>1790	Identifier	idx
>1791	IdentifierDeclType	int
>1792	IncDecOp	 
>1793	IncDec	++
>1794	Identifier	dy
>1795	Condition	 
>1796	RelationalExpression	dy < 2
>1797	PrimaryExpression	2
>1798	Identifier	dy
>1799	ForInit	 
>1800	IdentifierDeclStatement	int dy = - 1 ;
>1801	IdentifierDecl	dy = - 1
>1802	AssignmentExpr	dy = - 1
>1803	UnaryOp	- 1
>1804	PrimaryExpression	1
>1805	UnaryOperator	-
>1806	Identifier	dy
>1807	Identifier	dy
>1808	IdentifierDeclType	int
>1809	IncDecOp	 
>1810	IncDec	++
>1811	Identifier	dx
>1812	Condition	 
>1813	RelationalExpression	dx < 2
>1814	PrimaryExpression	2
>1815	Identifier	dx
>1816	ForInit	 
>1817	IdentifierDeclStatement	int dx = - 1 ;
>1818	IdentifierDecl	dx = - 1
>1819	AssignmentExpr	dx = - 1
>1820	UnaryOp	- 1
>1821	PrimaryExpression	1
>1822	UnaryOperator	-
>1823	Identifier	dx
>1824	Identifier	dx
>1825	IdentifierDeclType	int
>1826	IdentifierDeclStatement	 
>1827	IdentifierDecl	nearSupport = 0
>1828	AssignmentExpr	nearSupport = 0
>1829	PrimaryExpression	0
>1830	Identifier	nearSupport
>1831	Identifier	nearSupport
>1832	IdentifierDeclType	int
>1833	Condition	 
>1834	RelationalExpression	my_minNearSupport > 1
>1835	PrimaryExpression	1
>1836	Identifier	my_minNearSupport
>1837	IfStatement	if ( originalInput [ x + y * width ] . idepth_var * depth4 * my_scale * my_scale > my_absTH )
>1838	ContinueStatement	 
>1839	Condition	 
>1840	RelationalExpression	originalInput [ x + y * width ] . idepth_var * depth4 * my_scale * my_scale > my_absTH
>1841	Identifier	my_absTH
>1842	MultiplicativeExpression	originalInput [ x + y * width ] . idepth_var * depth4 * my_scale * my_scale
>1843	MultiplicativeExpression	depth4 * my_scale * my_scale
>1844	MultiplicativeExpression	my_scale * my_scale
>1845	Identifier	my_scale
>1846	Identifier	my_scale
>1847	Identifier	depth4
>1848	MemberAccess	originalInput [ x + y * width ] . idepth_var
>1849	Identifier	idepth_var
>1850	ArrayIndexing	originalInput [ x + y * width ]
>1851	AdditiveExpression	x + y * width
>1852	MultiplicativeExpression	y * width
>1853	Identifier	width
>1854	Identifier	y
>1855	Identifier	x
>1856	Identifier	originalInput
>1857	IfStatement	if ( originalInput [ x + y * width ] . idepth_var * depth4 > my_scaledTH )
>1858	ContinueStatement	 
>1859	Condition	 
>1860	RelationalExpression	originalInput [ x + y * width ] . idepth_var * depth4 > my_scaledTH
>1861	Identifier	my_scaledTH
>1862	MultiplicativeExpression	originalInput [ x + y * width ] . idepth_var * depth4
>1863	Identifier	depth4
>1864	MemberAccess	originalInput [ x + y * width ] . idepth_var
>1865	Identifier	idepth_var
>1866	ArrayIndexing	originalInput [ x + y * width ]
>1867	AdditiveExpression	x + y * width
>1868	MultiplicativeExpression	y * width
>1869	Identifier	width
>1870	Identifier	y
>1871	Identifier	x
>1872	Identifier	originalInput
>1873	ExpressionStatement	 
>1874	AssignmentExpr	depth4 *= depth4
>1875	Identifier	depth4
>1876	Identifier	depth4
>1877	IdentifierDeclStatement	 
>1878	IdentifierDecl	depth4 = depth * depth
>1879	AssignmentExpr	depth4 = depth * depth
>1880	MultiplicativeExpression	depth * depth
>1881	Identifier	depth
>1882	Identifier	depth
>1883	Identifier	depth4
>1884	Identifier	depth4
>1885	IdentifierDeclType	float
>1886	IdentifierDeclStatement	 
>1887	IdentifierDecl	depth = 1 / originalInput [ x + y * width ] . idepth
>1888	AssignmentExpr	depth = 1 / originalInput [ x + y * width ] . idepth
>1889	MultiplicativeExpression	1 / originalInput [ x + y * width ] . idepth
>1890	MemberAccess	originalInput [ x + y * width ] . idepth
>1891	Identifier	idepth
>1892	ArrayIndexing	originalInput [ x + y * width ]
>1893	AdditiveExpression	x + y * width
>1894	MultiplicativeExpression	y * width
>1895	Identifier	width
>1896	Identifier	y
>1897	Identifier	x
>1898	Identifier	originalInput
>1899	PrimaryExpression	1
>1900	Identifier	depth
>1901	Identifier	depth
>1902	IdentifierDeclType	float
>1903	IfStatement	if ( my_sparsifyFactor > 1 && rand ( ) % my_sparsifyFactor != 0 )
>1904	ContinueStatement	 
>1905	Condition	 
>1906	AndExpression	my_sparsifyFactor > 1 && rand ( ) % my_sparsifyFactor != 0
>1907	EqualityExpression	rand ( ) % my_sparsifyFactor != 0
>1908	PrimaryExpression	0
>1909	MultiplicativeExpression	rand ( ) % my_sparsifyFactor
>1910	Identifier	my_sparsifyFactor
>1911	CallExpression	rand ( )
>1912	ArgumentList	 
>1913	Callee	rand
>1914	Identifier	rand
>1915	RelationalExpression	my_sparsifyFactor > 1
>1916	PrimaryExpression	1
>1917	Identifier	my_sparsifyFactor
>1918	IfStatement	if ( originalInput [ x + y * width ] . idepth <= 0 )
>1919	ContinueStatement	 
>1920	Condition	 
>1921	RelationalExpression	originalInput [ x + y * width ] . idepth <= 0
>1922	PrimaryExpression	0
>1923	MemberAccess	originalInput [ x + y * width ] . idepth
>1924	Identifier	idepth
>1925	ArrayIndexing	originalInput [ x + y * width ]
>1926	AdditiveExpression	x + y * width
>1927	MultiplicativeExpression	y * width
>1928	Identifier	width
>1929	Identifier	y
>1930	Identifier	x
>1931	Identifier	originalInput
>1932	IncDecOp	 
>1933	IncDec	++
>1934	Identifier	x
>1935	Condition	 
>1936	RelationalExpression	x < width - 1
>1937	AdditiveExpression	width - 1
>1938	PrimaryExpression	1
>1939	Identifier	width
>1940	Identifier	x
>1941	ForInit	 
>1942	IdentifierDeclStatement	int x = 1 ;
>1943	IdentifierDecl	x = 1
>1944	AssignmentExpr	x = 1
>1945	PrimaryExpression	1
>1946	Identifier	x
>1947	Identifier	x
>1948	IdentifierDeclType	int
>1949	IncDecOp	 
>1950	IncDec	++
>1951	Identifier	y
>1952	Condition	 
>1953	RelationalExpression	y < height - 1
>1954	AdditiveExpression	height - 1
>1955	PrimaryExpression	1
>1956	Identifier	height
>1957	Identifier	y
>1958	ForInit	 
>1959	IdentifierDeclStatement	int y = 1 ;
>1960	IdentifierDecl	y = 1
>1961	AssignmentExpr	y = 1
>1962	PrimaryExpression	1
>1963	Identifier	y
>1964	Identifier	y
>1965	IdentifierDeclType	int
>1966	IdentifierDeclStatement	 
>1967	IdentifierDecl	num = 0
>1968	AssignmentExpr	num = 0
>1969	PrimaryExpression	0
>1970	Identifier	num
>1971	Identifier	num
>1972	IdentifierDeclType	int
>1973	IdentifierDeclStatement	 
>1974	IdentifierDecl	* tmpBuffer = new MyVertex [ width * height ]
>1975	AssignmentExpr	* tmpBuffer = new MyVertex [ width * height ]
>1976	MultiplicativeExpression	width * height
>1977	Identifier	height
>1978	Identifier	width
>1979	Identifier	tmpBuffer
>1980	Identifier	tmpBuffer
>1981	IdentifierDeclType	MyVertex *
>2047	FunctionDef	KeyFrameDisplay 
>2048	ParameterList	float pointSize , float alpha
>2049	Parameter	 
>2050	Identifier	alpha
>2051	ParameterType	float
>2052	Parameter	 
>2053	Identifier	pointSize
>2054	ParameterType	float
>2055	ReturnType	void
>2056	CompoundStatement	 
>2057	IfStatement	if ( alpha < 1 )
>2058	CompoundStatement	 
>2059	ExpressionStatement	 
>2060	CallExpression	glLightfv ( GL_LIGHT0 , GL_AMBIENT_AND_DIFFUSE , LightColor )
>2061	ArgumentList	GL_LIGHT0
>2062	Argument	LightColor
>2063	Identifier	LightColor
>2064	Argument	GL_AMBIENT_AND_DIFFUSE
>2065	Identifier	GL_AMBIENT_AND_DIFFUSE
>2066	Argument	GL_LIGHT0
>2067	Identifier	GL_LIGHT0
>2068	Callee	glLightfv
>2069	Identifier	glLightfv
>2070	ExpressionStatement	 
>2071	AssignmentExpr	LightColor [ 2 ] = LightColor [ 1 ] = LightColor [ 0 ] = 1
>2072	AssignmentExpr	LightColor [ 1 ] = LightColor [ 0 ] = 1
>2073	AssignmentExpr	LightColor [ 0 ] = 1
>2074	PrimaryExpression	1
>2075	ArrayIndexing	LightColor [ 0 ]
>2076	PrimaryExpression	0
>2077	Identifier	LightColor
>2078	ArrayIndexing	LightColor [ 1 ]
>2079	PrimaryExpression	1
>2080	Identifier	LightColor
>2081	ArrayIndexing	LightColor [ 2 ]
>2082	PrimaryExpression	2
>2083	Identifier	LightColor
>2084	ExpressionStatement	 
>2085	CallExpression	glDisable ( GL_LIGHTING )
>2086	ArgumentList	GL_LIGHTING
>2087	Argument	GL_LIGHTING
>2088	Identifier	GL_LIGHTING
>2089	Callee	glDisable
>2090	Identifier	glDisable
>2091	ExpressionStatement	 
>2092	CallExpression	glDisable ( GL_BLEND )
>2093	ArgumentList	GL_BLEND
>2094	Argument	GL_BLEND
>2095	Identifier	GL_BLEND
>2096	Callee	glDisable
>2097	Identifier	glDisable
>2098	Condition	 
>2099	RelationalExpression	alpha < 1
>2100	PrimaryExpression	1
>2101	Identifier	alpha
>2102	ExpressionStatement	 
>2103	CallExpression	glPopMatrix ( )
>2104	ArgumentList	 
>2105	Callee	glPopMatrix
>2106	Identifier	glPopMatrix
>2107	ExpressionStatement	 
>2108	CallExpression	glDisableClientState ( GL_VERTEX_ARRAY )
>2109	ArgumentList	GL_VERTEX_ARRAY
>2110	Argument	GL_VERTEX_ARRAY
>2111	Identifier	GL_VERTEX_ARRAY
>2112	Callee	glDisableClientState
>2113	Identifier	glDisableClientState
>2114	ExpressionStatement	 
>2115	CallExpression	glDisableClientState ( GL_COLOR_ARRAY )
>2116	ArgumentList	GL_COLOR_ARRAY
>2117	Argument	GL_COLOR_ARRAY
>2118	Identifier	GL_COLOR_ARRAY
>2119	Callee	glDisableClientState
>2120	Identifier	glDisableClientState
>2121	ExpressionStatement	 
>2122	CallExpression	glDrawArrays ( GL_POINTS , 0 , vertexBufferNumPoints )
>2123	ArgumentList	GL_POINTS
>2124	Argument	vertexBufferNumPoints
>2125	Identifier	vertexBufferNumPoints
>2126	Argument	0
>2127	PrimaryExpression	0
>2128	Argument	GL_POINTS
>2129	Identifier	GL_POINTS
>2130	Callee	glDrawArrays
>2131	Identifier	glDrawArrays
>2132	ExpressionStatement	 
>2133	CallExpression	glEnableClientState ( GL_COLOR_ARRAY )
>2134	ArgumentList	GL_COLOR_ARRAY
>2135	Argument	GL_COLOR_ARRAY
>2136	Identifier	GL_COLOR_ARRAY
>2137	Callee	glEnableClientState
>2138	Identifier	glEnableClientState
>2139	ExpressionStatement	 
>2140	CallExpression	glEnableClientState ( GL_VERTEX_ARRAY )
>2141	ArgumentList	GL_VERTEX_ARRAY
>2142	Argument	GL_VERTEX_ARRAY
>2143	Identifier	GL_VERTEX_ARRAY
>2144	Callee	glEnableClientState
>2145	Identifier	glEnableClientState
>2146	ExpressionStatement	 
>2147	CallExpression	glColorPointer ( 4 , GL_UNSIGNED_BYTE , sizeof ( MyVertex ) , ( const void * ) ( 3 * sizeof ( float ) ) )
>2148	ArgumentList	4
>2149	Argument	( const void * ) ( 3 * sizeof ( float ) )
>2150	CastExpression	( const void * ) ( 3 * sizeof ( float ) )
>2151	MultiplicativeExpression	3 * sizeof ( float )
>2152	SizeofExpr	sizeof ( float )
>2153	SizeofOperand	float
>2154	Sizeof	sizeof
>2155	PrimaryExpression	3
>2156	CastTarget	const void *
>2157	Argument	sizeof ( MyVertex )
>2158	SizeofExpr	sizeof ( MyVertex )
>2159	SizeofOperand	MyVertex
>2160	Sizeof	sizeof
>2161	Argument	GL_UNSIGNED_BYTE
>2162	Identifier	GL_UNSIGNED_BYTE
>2163	Argument	4
>2164	PrimaryExpression	4
>2165	Callee	glColorPointer
>2166	Identifier	glColorPointer
>2167	ExpressionStatement	 
>2168	CallExpression	glVertexPointer ( 3 , GL_FLOAT , sizeof ( MyVertex ) , 0 )
>2169	ArgumentList	3
>2170	Argument	0
>2171	PrimaryExpression	0
>2172	Argument	sizeof ( MyVertex )
>2173	SizeofExpr	sizeof ( MyVertex )
>2174	SizeofOperand	MyVertex
>2175	Sizeof	sizeof
>2176	Argument	GL_FLOAT
>2177	Identifier	GL_FLOAT
>2178	Argument	3
>2179	PrimaryExpression	3
>2180	Callee	glVertexPointer
>2181	Identifier	glVertexPointer
>2182	ExpressionStatement	 
>2183	CallExpression	glBindBuffer ( GL_ARRAY_BUFFER , vertexBufferId )
>2184	ArgumentList	GL_ARRAY_BUFFER
>2185	Argument	vertexBufferId
>2186	Identifier	vertexBufferId
>2187	Argument	GL_ARRAY_BUFFER
>2188	Identifier	GL_ARRAY_BUFFER
>2189	Callee	glBindBuffer
>2190	Identifier	glBindBuffer
>2191	ExpressionStatement	 
>2192	CallExpression	glPointSize ( pointSize )
>2193	ArgumentList	pointSize
>2194	Argument	pointSize
>2195	Identifier	pointSize
>2196	Callee	glPointSize
>2197	Identifier	glPointSize
>2198	ExpressionStatement	 
>2199	CallExpression	glMultMatrixf ( ( GLfloat * ) m . data ( ) )
>2200	ArgumentList	( GLfloat * ) m . data ( )
>2201	Argument	( GLfloat * ) m . data ( )
>2202	CastExpression	( GLfloat * ) m . data ( )
>2203	CallExpression	m . data ( )
>2204	ArgumentList	 
>2205	Callee	m . data
>2206	MemberAccess	m . data
>2207	Identifier	data
>2208	Identifier	m
>2209	CastTarget	GLfloat *
>2210	Callee	glMultMatrixf
>2211	Identifier	glMultMatrixf
>2212	IdentifierDeclStatement	 
>2213	IdentifierDecl	m = camToWorld . matrix ( )
>2214	AssignmentExpr	m = camToWorld . matrix ( )
>2215	CallExpression	camToWorld . matrix ( )
>2216	ArgumentList	 
>2217	Callee	camToWorld . matrix
>2218	MemberAccess	camToWorld . matrix
>2219	Identifier	matrix
>2220	Identifier	camToWorld
>2221	Identifier	m
>2222	Identifier	m
>2223	IdentifierDeclType	Sophus 
>2224	ExpressionStatement	 
>2225	CallExpression	glPushMatrix ( )
>2226	ArgumentList	 
>2227	Callee	glPushMatrix
>2228	Identifier	glPushMatrix
>2229	IfStatement	if ( alpha < 1 )
>2230	ElseStatement	else
>2231	CompoundStatement	 
>2232	ExpressionStatement	 
>2233	CallExpression	glDisable ( GL_LIGHTING )
>2234	ArgumentList	GL_LIGHTING
>2235	Argument	GL_LIGHTING
>2236	Identifier	GL_LIGHTING
>2237	Callee	glDisable
>2238	Identifier	glDisable
>2239	CompoundStatement	 
>2240	ExpressionStatement	 
>2241	CallExpression	glLightfv ( GL_LIGHT0 , GL_AMBIENT , LightColor )
>2242	ArgumentList	GL_LIGHT0
>2243	Argument	LightColor
>2244	Identifier	LightColor
>2245	Argument	GL_AMBIENT
>2246	Identifier	GL_AMBIENT
>2247	Argument	GL_LIGHT0
>2248	Identifier	GL_LIGHT0
>2249	Callee	glLightfv
>2250	Identifier	glLightfv
>2251	ExpressionStatement	 
>2252	CallExpression	glDisable ( GL_LIGHT1 )
>2253	ArgumentList	GL_LIGHT1
>2254	Argument	GL_LIGHT1
>2255	Identifier	GL_LIGHT1
>2256	Callee	glDisable
>2257	Identifier	glDisable
>2258	ExpressionStatement	 
>2259	CallExpression	glEnable ( GL_LIGHTING )
>2260	ArgumentList	GL_LIGHTING
>2261	Argument	GL_LIGHTING
>2262	Identifier	GL_LIGHTING
>2263	Callee	glEnable
>2264	Identifier	glEnable
>2265	ExpressionStatement	 
>2266	AssignmentExpr	LightColor [ 0 ] = LightColor [ 1 ] = 0
>2267	AssignmentExpr	LightColor [ 1 ] = 0
>2268	PrimaryExpression	0
>2269	ArrayIndexing	LightColor [ 1 ]
>2270	PrimaryExpression	1
>2271	Identifier	LightColor
>2272	ArrayIndexing	LightColor [ 0 ]
>2273	PrimaryExpression	0
>2274	Identifier	LightColor
>2275	ExpressionStatement	 
>2276	CallExpression	glBlendFunc ( GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA )
>2277	ArgumentList	GL_SRC_ALPHA
>2278	Argument	GL_ONE_MINUS_SRC_ALPHA
>2279	Identifier	GL_ONE_MINUS_SRC_ALPHA
>2280	Argument	GL_SRC_ALPHA
>2281	Identifier	GL_SRC_ALPHA
>2282	Callee	glBlendFunc
>2283	Identifier	glBlendFunc
>2284	ExpressionStatement	 
>2285	CallExpression	glEnable ( GL_BLEND )
>2286	ArgumentList	GL_BLEND
>2287	Argument	GL_BLEND
>2288	Identifier	GL_BLEND
>2289	Callee	glEnable
>2290	Identifier	glEnable
>2291	Condition	 
>2292	RelationalExpression	alpha < 1
>2293	PrimaryExpression	1
>2294	Identifier	alpha
>2295	IdentifierDeclStatement	 
>2296	IdentifierDecl	LightColor [ ] = { 1 , 1 , 1 , 1 }
>2297	AssignmentExpr	LightColor [ ] = { 1 , 1 , 1 , 1 }
>2298	InitializerList	1
>2299	PrimaryExpression	1
>2300	PrimaryExpression	1
>2301	PrimaryExpression	1
>2302	PrimaryExpression	1
>2303	Identifier	LightColor
>2304	Identifier	LightColor
>2305	IdentifierDeclType	GLfloat [ ]
>2306	IfStatement	if ( ! vertexBufferIdValid )
>2307	CompoundStatement	 
>2308	ReturnStatement	 
>2309	Condition	 
>2310	UnaryOp	! vertexBufferIdValid
>2311	Identifier	vertexBufferIdValid
>2312	UnaryOperator	!
>2313	ExpressionStatement	 
>2314	CallExpression	refreshPC ( )
>2315	ArgumentList	 
>2316	Callee	refreshPC
>2317	Identifier	refreshPC
<3=5,4
<5=43,39,35,31,24,18,12,6
<6=7
<7=11,8
<8=10,9
<12=13
<13=17,14
<14=16,15
<18=19
<19=23,20
<20=22,21
<24=25
<25=30,26
<26=28,27
<28=29
<31=32
<32=34,33
<35=36
<36=38,37
<39=40
<40=42,41
<43=44
<44=46,45
<63=65,64
<65=76,70,69,68,66
<66=67
<70=72,71
<72=73
<73=75,74
<76=93,77
<77=82,78
<78=79
<79=81,80
<82=83
<83=91,84
<84=89,85
<85=86
<86=88,87
<89=90
<91=92
<93=94
<102=108,107,103
<103=104
<104=106,105
<108=299,293,287,281,275,269,263,255,247,241,235,229,223,217,216,215,213,209,113,109
<109=110
<110=112,111
<113=192,146,114
<114=115
<115=140,116
<116=117
<117=138,118
<118=136,127,119
<119=120
<120=126,121
<121=125,122
<122=124,123
<127=128
<128=130,129
<130=131
<131=133,132
<133=135,134
<136=137
<138=139
<140=141
<141=145,142
<142=144,143
<146=147
<147=181,148
<148=149
<149=150
<150=179,151
<151=177,168,164,162,160,152
<152=153
<153=159,154
<154=158,155
<155=157,156
<160=161
<162=163
<164=165
<165=167,166
<168=169
<169=171,170
<171=172
<172=174,173
<174=176,175
<177=178
<179=180
<181=182
<182=184,183
<184=186,185
<186=187
<187=189,188
<189=191,190
<192=193
<193=201,194
<194=200,195
<195=199,196
<196=198,197
<201=203,202
<203=204
<204=206,205
<206=208,207
<209=210
<210=212,211
<213=214
<217=219,218
<219=220
<220=222,221
<223=224
<224=228,225
<225=227,226
<229=230
<230=234,231
<231=233,232
<235=236
<236=240,237
<237=239,238
<241=242
<242=246,243
<243=245,244
<247=248
<248=254,249
<249=251,250
<251=253,252
<255=256
<256=262,257
<257=259,258
<259=261,260
<263=264
<264=268,265
<265=267,266
<269=270
<270=274,271
<271=273,272
<275=276
<276=280,277
<277=279,278
<281=282
<282=286,283
<283=285,284
<287=288
<288=292,289
<289=291,290
<293=294
<294=298,295
<295=297,296
<299=300
<300=324,301
<301=317,308,302
<302=303
<303=307,304
<304=306,305
<308=309
<309=311,310
<311=312
<312=314,313
<314=316,315
<317=318
<318=320,319
<320=321
<321=323,322
<324=325
<361=364,363,362
<364=905,895,891,887,868,862,853,849,845,836,832,828,824,811,438,434,430,426,415,406,389,385,370,369,368,367,365
<365=366
<370=381,371
<371=380,379,378,376,372
<372=373
<373=375,374
<376=377
<381=382
<382=384,383
<385=386
<386=388,387
<389=390
<390=404,391
<391=402,396,394,392
<392=393
<394=395
<396=397
<397=399,398
<399=401,400
<402=403
<404=405
<406=407
<407=413,408
<408=411,409
<409=410
<411=412
<413=414
<415=416
<416=424,417
<417=422,418
<418=419
<419=421,420
<422=423
<424=425
<426=427
<427=429,428
<430=431
<431=433,432
<434=435
<435=437,436
<438=803,797,794,439
<439=786,780,777,440
<440=763,759,744,727,718,714,698,678,561,545,529,519,509,489,469,449,445,441
<441=442
<442=444,443
<445=446
<446=448,447
<449=450
<450=462,451
<451=453,452
<453=455,454
<455=461,456
<456=460,457
<457=459,458
<462=464,463
<464=466,465
<466=468,467
<469=470
<470=482,471
<471=473,472
<473=475,474
<475=481,476
<476=480,477
<477=479,478
<482=484,483
<484=486,485
<486=488,487
<489=490
<490=502,491
<491=493,492
<493=495,494
<495=501,496
<496=500,497
<497=499,498
<502=504,503
<504=506,505
<506=508,507
<509=510
<510=512,511
<512=514,513
<514=516,515
<516=518,517
<519=520
<520=522,521
<522=524,523
<524=526,525
<526=528,527
<529=530
<530=538,531
<531=533,532
<533=535,534
<535=537,536
<538=540,539
<540=542,541
<542=544,543
<545=546
<546=554,547
<547=549,548
<549=551,550
<551=553,552
<554=556,555
<556=558,557
<558=560,559
<561=674,562
<562=667,569,563
<563=565,564
<565=566
<566=568,567
<569=657,653,650,570
<570=640,636,633,571
<571=618,572
<572=610,573
<573=595,574
<574=579,575
<575=576
<576=578,577
<579=580
<580=592,581
<581=591,582
<582=584,583
<584=590,585
<585=589,586
<586=588,587
<592=594,593
<595=596
<596=609,608,597
<597=607,598
<598=602,599
<599=601,600
<602=604,603
<604=606,605
<610=611
<611=613,612
<613=615,614
<615=617,616
<618=619
<619=632,631,620
<620=630,621
<621=629,622
<622=628,623
<623=625,624
<625=627,626
<633=635,634
<636=637
<637=639,638
<640=641
<641=642
<642=649,648,643
<643=647,644
<644=646,645
<650=652,651
<653=654
<654=656,655
<657=658
<658=659
<659=666,665,660
<660=664,661
<661=663,662
<667=668
<668=673,672,669
<669=671,670
<674=675
<675=677,676
<678=680,679
<680=681
<681=683,682
<683=689,684
<684=688,685
<685=687,686
<689=691,690
<691=697,692
<692=696,693
<693=695,694
<698=700,699
<700=701
<701=703,702
<703=705,704
<705=707,706
<707=713,708
<708=712,709
<709=711,710
<714=715
<715=717,716
<718=719
<719=726,725,720
<720=724,721
<721=723,722
<727=728
<728=743,742,729
<729=741,730
<730=740,731
<731=733,732
<733=739,734
<734=738,735
<735=737,736
<744=746,745
<746=747
<747=756,748
<748=750,749
<750=752,751
<752=754,753
<754=755
<756=758,757
<759=760
<760=762,761
<763=765,764
<765=766
<766=768,767
<768=770,769
<770=776,771
<771=775,772
<772=774,773
<777=779,778
<780=781
<781=785,782
<782=784,783
<786=787
<787=788
<788=793,792,789
<789=791,790
<794=796,795
<797=798
<798=802,799
<799=801,800
<803=804
<804=805
<805=810,809,806
<806=808,807
<811=818,812
<812=817,816,813
<813=815,814
<818=823,822,819
<819=821,820
<824=825
<825=827,826
<828=829
<829=831,830
<832=833
<833=835,834
<836=837
<837=844,838
<838=840,839
<840=841
<841=843,842
<845=846
<846=848,847
<849=850
<850=852,851
<853=854
<854=861,860,855
<855=859,856
<856=858,857
<862=864,863
<864=865
<865=867,866
<868=885,869
<869=874,870
<870=871
<871=873,872
<874=875
<875=883,876
<876=881,877
<877=878
<878=880,879
<881=882
<883=884
<885=886
<887=888
<888=890,889
<891=892
<892=894,893
<895=897,896
<897=898
<898=904,899
<899=903,900
<900=902,901
<905=906
<906=947,946,907
<907=945,908
<908=942,909
<909=939,910
<910=929,911
<911=919,912
<912=916,913
<913=915,914
<916=918,917
<919=928,920
<920=922,921
<922=924,923
<924=925
<925=927,926
<929=936,930
<930=932,931
<932=933
<933=935,934
<936=938,937
<939=941,940
<942=944,943
<1018=1027,1026,1019
<1019=1023,1020
<1020=1022,1021
<1023=1025,1024
<1027=1461,1456,1444,1430,1396,1389,1382,1371,1348,1337,1312,1301,1274,1263,1238,1213,1186,1159,1134,1109,1086,1063,1038,1033,1028
<1028=1029
<1029=1031,1030
<1031=1032
<1033=1034
<1034=1036,1035
<1036=1037
<1038=1039
<1039=1061,1040
<1040=1051,1043,1041
<1041=1042
<1043=1044
<1044=1050,1045
<1045=1047,1046
<1047=1049,1048
<1051=1052
<1052=1060,1053
<1053=1055,1054
<1055=1059,1056
<1056=1058,1057
<1061=1062
<1063=1064
<1064=1084,1065
<1065=1076,1068,1066
<1066=1067
<1068=1069
<1069=1075,1070
<1070=1072,1071
<1072=1074,1073
<1076=1077
<1077=1083,1078
<1078=1080,1079
<1080=1082,1081
<1084=1085
<1086=1087
<1087=1107,1088
<1088=1099,1091,1089
<1089=1090
<1091=1092
<1092=1098,1093
<1093=1095,1094
<1095=1097,1096
<1099=1100
<1100=1106,1101
<1101=1103,1102
<1103=1105,1104
<1107=1108
<1109=1110
<1110=1132,1111
<1111=1124,1114,1112
<1112=1113
<1114=1115
<1115=1123,1116
<1116=1118,1117
<1118=1122,1119
<1119=1121,1120
<1124=1125
<1125=1131,1126
<1126=1128,1127
<1128=1130,1129
<1132=1133
<1134=1135
<1135=1157,1136
<1136=1149,1139,1137
<1137=1138
<1139=1140
<1140=1148,1141
<1141=1143,1142
<1143=1147,1144
<1144=1146,1145
<1149=1150
<1150=1156,1151
<1151=1153,1152
<1153=1155,1154
<1157=1158
<1159=1160
<1160=1184,1161
<1161=1174,1164,1162
<1162=1163
<1164=1165
<1165=1173,1166
<1166=1168,1167
<1168=1172,1169
<1169=1171,1170
<1174=1175
<1175=1183,1176
<1176=1178,1177
<1178=1182,1179
<1179=1181,1180
<1184=1185
<1186=1187
<1187=1211,1188
<1188=1201,1191,1189
<1189=1190
<1191=1192
<1192=1200,1193
<1193=1195,1194
<1195=1199,1196
<1196=1198,1197
<1201=1202
<1202=1210,1203
<1203=1205,1204
<1205=1209,1206
<1206=1208,1207
<1211=1212
<1213=1214
<1214=1236,1215
<1215=1226,1218,1216
<1216=1217
<1218=1219
<1219=1225,1220
<1220=1222,1221
<1222=1224,1223
<1226=1227
<1227=1235,1228
<1228=1230,1229
<1230=1234,1231
<1231=1233,1232
<1236=1237
<1238=1239
<1239=1261,1240
<1240=1251,1243,1241
<1241=1242
<1243=1244
<1244=1250,1245
<1245=1247,1246
<1247=1249,1248
<1251=1252
<1252=1260,1253
<1253=1255,1254
<1255=1259,1256
<1256=1258,1257
<1261=1262
<1263=1264
<1264=1272,1265
<1265=1270,1268,1266
<1266=1267
<1268=1269
<1270=1271
<1272=1273
<1274=1275
<1275=1299,1276
<1276=1289,1279,1277
<1277=1278
<1279=1280
<1280=1288,1281
<1281=1283,1282
<1283=1287,1284
<1284=1286,1285
<1289=1290
<1290=1298,1291
<1291=1293,1292
<1293=1297,1294
<1294=1296,1295
<1299=1300
<1301=1302
<1302=1310,1303
<1303=1308,1306,1304
<1304=1305
<1306=1307
<1308=1309
<1310=1311
<1312=1313
<1313=1335,1314
<1314=1327,1317,1315
<1315=1316
<1317=1318
<1318=1326,1319
<1319=1321,1320
<1321=1325,1322
<1322=1324,1323
<1327=1328
<1328=1334,1329
<1329=1331,1330
<1331=1333,1332
<1335=1336
<1337=1338
<1338=1346,1339
<1339=1344,1342,1340
<1340=1341
<1342=1343
<1344=1345
<1346=1347
<1348=1349
<1349=1369,1350
<1350=1361,1353,1351
<1351=1352
<1353=1354
<1354=1360,1355
<1355=1357,1356
<1357=1359,1358
<1361=1362
<1362=1368,1363
<1363=1365,1364
<1365=1367,1366
<1369=1370
<1371=1372
<1372=1380,1373
<1373=1378,1376,1374
<1374=1375
<1376=1377
<1378=1379
<1380=1381
<1382=1383
<1383=1387,1384
<1384=1385
<1385=1386
<1387=1388
<1389=1390
<1390=1394,1391
<1391=1392
<1392=1393
<1394=1395
<1396=1426,1415,1397
<1397=1398
<1398=1399
<1399=1413,1400
<1400=1409,1405,1401
<1401=1402
<1402=1404,1403
<1405=1406
<1406=1408,1407
<1409=1410
<1410=1412,1411
<1413=1414
<1415=1416
<1416=1424,1417
<1417=1422,1420,1418
<1418=1419
<1420=1421
<1422=1423
<1424=1425
<1426=1427
<1427=1429,1428
<1430=1431
<1431=1442,1432
<1432=1433
<1433=1434
<1434=1441,1435
<1435=1437,1436
<1437=1438
<1438=1440,1439
<1442=1443
<1444=1445
<1445=1455,1454,1446
<1446=1453,1447
<1447=1449,1448
<1449=1450
<1450=1452,1451
<1456=1457
<1457=1459,1458
<1459=1460
<1461=1463,1462
<1463=1464
<1464=1466,1465
<1484=1490,1489,1485
<1485=1486
<1486=1488,1487
<1490=1973,1966,1579,1509,1508,1506,1493,1491
<1491=1492
<1493=1494
<1494=1504,1495
<1495=1502,1498,1496
<1496=1497
<1498=1499
<1499=1501,1500
<1502=1503
<1504=1505
<1506=1507
<1509=1571,1567,1564,1510
<1510=1543,1528,1511
<1511=1512
<1512=1524,1513
<1513=1518,1514
<1514=1515
<1515=1517,1516
<1518=1519
<1519=1523,1520
<1520=1522,1521
<1524=1525
<1525=1527,1526
<1528=1529
<1529=1542,1541,1530
<1530=1540,1531
<1531=1533,1532
<1533=1535,1534
<1535=1537,1536
<1537=1539,1538
<1543=1544
<1544=1560,1545
<1545=1552,1546
<1546=1547
<1547=1551,1548
<1548=1550,1549
<1552=1553
<1553=1559,1554
<1554=1556,1555
<1556=1558,1557
<1560=1561
<1561=1563,1562
<1564=1566,1565
<1567=1568
<1568=1570,1569
<1571=1572
<1572=1573
<1573=1578,1577,1574
<1574=1576,1575
<1579=1958,1952,1949,1580
<1580=1941,1935,1932,1581
<1581=1918,1903,1886,1877,1873,1857,1837,1720,1692,1680,1668,1656,1646,1626,1606,1586,1582
<1582=1583
<1583=1585,1584
<1586=1587
<1587=1599,1588
<1588=1590,1589
<1590=1592,1591
<1592=1598,1593
<1593=1597,1594
<1594=1596,1595
<1599=1601,1600
<1601=1603,1602
<1603=1605,1604
<1606=1607
<1607=1619,1608
<1608=1610,1609
<1610=1612,1611
<1612=1618,1613
<1613=1617,1614
<1614=1616,1615
<1619=1621,1620
<1621=1623,1622
<1623=1625,1624
<1626=1627
<1627=1639,1628
<1628=1630,1629
<1630=1632,1631
<1632=1638,1633
<1633=1637,1634
<1634=1636,1635
<1639=1641,1640
<1641=1643,1642
<1643=1645,1644
<1646=1647
<1647=1649,1648
<1649=1651,1650
<1651=1653,1652
<1653=1655,1654
<1656=1657
<1657=1661,1658
<1658=1660,1659
<1661=1663,1662
<1663=1665,1664
<1665=1667,1666
<1668=1669
<1669=1673,1670
<1670=1672,1671
<1673=1675,1674
<1675=1677,1676
<1677=1679,1678
<1680=1681
<1681=1685,1682
<1682=1684,1683
<1685=1687,1686
<1687=1689,1688
<1689=1691,1690
<1692=1693
<1693=1719,1718,1694
<1694=1717,1695
<1695=1716,1696
<1696=1698,1697
<1698=1714,1699
<1699=1708,1702,1700
<1700=1701
<1702=1703
<1703=1705,1704
<1705=1707,1706
<1708=1709
<1709=1711,1710
<1711=1713,1712
<1714=1715
<1720=1833,1721
<1721=1826,1728,1722
<1722=1724,1723
<1724=1725
<1725=1727,1726
<1728=1816,1812,1809,1729
<1729=1799,1795,1792,1730
<1730=1777,1731
<1731=1769,1732
<1732=1754,1733
<1733=1738,1734
<1734=1735
<1735=1737,1736
<1738=1739
<1739=1751,1740
<1740=1750,1741
<1741=1743,1742
<1743=1749,1744
<1744=1748,1745
<1745=1747,1746
<1751=1753,1752
<1754=1755
<1755=1768,1767,1756
<1756=1766,1757
<1757=1761,1758
<1758=1760,1759
<1761=1763,1762
<1763=1765,1764
<1769=1770
<1770=1772,1771
<1772=1774,1773
<1774=1776,1775
<1777=1778
<1778=1791,1790,1779
<1779=1789,1780
<1780=1788,1781
<1781=1787,1782
<1782=1784,1783
<1784=1786,1785
<1792=1794,1793
<1795=1796
<1796=1798,1797
<1799=1800
<1800=1801
<1801=1808,1807,1802
<1802=1806,1803
<1803=1805,1804
<1809=1811,1810
<1812=1813
<1813=1815,1814
<1816=1817
<1817=1818
<1818=1825,1824,1819
<1819=1823,1820
<1820=1822,1821
<1826=1827
<1827=1832,1831,1828
<1828=1830,1829
<1833=1834
<1834=1836,1835
<1837=1839,1838
<1839=1840
<1840=1842,1841
<1842=1848,1843
<1843=1847,1844
<1844=1846,1845
<1848=1850,1849
<1850=1856,1851
<1851=1855,1852
<1852=1854,1853
<1857=1859,1858
<1859=1860
<1860=1862,1861
<1862=1864,1863
<1864=1866,1865
<1866=1872,1867
<1867=1871,1868
<1868=1870,1869
<1873=1874
<1874=1876,1875
<1877=1878
<1878=1885,1884,1879
<1879=1883,1880
<1880=1882,1881
<1886=1887
<1887=1902,1901,1888
<1888=1900,1889
<1889=1899,1890
<1890=1892,1891
<1892=1898,1893
<1893=1897,1894
<1894=1896,1895
<1903=1905,1904
<1905=1906
<1906=1915,1907
<1907=1909,1908
<1909=1911,1910
<1911=1913,1912
<1913=1914
<1915=1917,1916
<1918=1920,1919
<1920=1921
<1921=1923,1922
<1923=1925,1924
<1925=1931,1926
<1926=1930,1927
<1927=1929,1928
<1932=1934,1933
<1935=1936
<1936=1940,1937
<1937=1939,1938
<1941=1942
<1942=1943
<1943=1948,1947,1944
<1944=1946,1945
<1949=1951,1950
<1952=1953
<1953=1957,1954
<1954=1956,1955
<1958=1959
<1959=1960
<1960=1965,1964,1961
<1961=1963,1962
<1966=1967
<1967=1972,1971,1968
<1968=1970,1969
<1973=1974
<1974=1981,1980,1975
<1975=1979,1976
<1976=1978,1977
<2047=2056,2055,2048
<2048=2052,2049
<2049=2051,2050
<2052=2054,2053
<2056=2313,2306,2295,2229,2224,2212,2198,2191,2182,2167,2146,2139,2132,2121,2114,2107,2102,2057
<2057=2098,2058
<2058=2091,2084,2070,2059
<2059=2060
<2060=2068,2061
<2061=2066,2064,2062
<2062=2063
<2064=2065
<2066=2067
<2068=2069
<2070=2071
<2071=2081,2072
<2072=2078,2073
<2073=2075,2074
<2075=2077,2076
<2078=2080,2079
<2081=2083,2082
<2084=2085
<2085=2089,2086
<2086=2087
<2087=2088
<2089=2090
<2091=2092
<2092=2096,2093
<2093=2094
<2094=2095
<2096=2097
<2098=2099
<2099=2101,2100
<2102=2103
<2103=2105,2104
<2105=2106
<2107=2108
<2108=2112,2109
<2109=2110
<2110=2111
<2112=2113
<2114=2115
<2115=2119,2116
<2116=2117
<2117=2118
<2119=2120
<2121=2122
<2122=2130,2123
<2123=2128,2126,2124
<2124=2125
<2126=2127
<2128=2129
<2130=2131
<2132=2133
<2133=2137,2134
<2134=2135
<2135=2136
<2137=2138
<2139=2140
<2140=2144,2141
<2141=2142
<2142=2143
<2144=2145
<2146=2147
<2147=2165,2148
<2148=2163,2161,2157,2149
<2149=2150
<2150=2156,2151
<2151=2155,2152
<2152=2154,2153
<2157=2158
<2158=2160,2159
<2161=2162
<2163=2164
<2165=2166
<2167=2168
<2168=2180,2169
<2169=2178,2176,2172,2170
<2170=2171
<2172=2173
<2173=2175,2174
<2176=2177
<2178=2179
<2180=2181
<2182=2183
<2183=2189,2184
<2184=2187,2185
<2185=2186
<2187=2188
<2189=2190
<2191=2192
<2192=2196,2193
<2193=2194
<2194=2195
<2196=2197
<2198=2199
<2199=2210,2200
<2200=2201
<2201=2202
<2202=2209,2203
<2203=2205,2204
<2205=2206
<2206=2208,2207
<2210=2211
<2212=2213
<2213=2223,2222,2214
<2214=2221,2215
<2215=2217,2216
<2217=2218
<2218=2220,2219
<2224=2225
<2225=2227,2226
<2227=2228
<2229=2291,2239,2230
<2230=2231
<2231=2232
<2232=2233
<2233=2237,2234
<2234=2235
<2235=2236
<2237=2238
<2239=2284,2275,2265,2258,2251,2240
<2240=2241
<2241=2249,2242
<2242=2247,2245,2243
<2243=2244
<2245=2246
<2247=2248
<2249=2250
<2251=2252
<2252=2256,2253
<2253=2254
<2254=2255
<2256=2257
<2258=2259
<2259=2263,2260
<2260=2261
<2261=2262
<2263=2264
<2265=2266
<2266=2272,2267
<2267=2269,2268
<2269=2271,2270
<2272=2274,2273
<2275=2276
<2276=2282,2277
<2277=2280,2278
<2278=2279
<2280=2281
<2282=2283
<2284=2285
<2285=2289,2286
<2286=2287
<2287=2288
<2289=2290
<2291=2292
<2292=2294,2293
<2295=2296
<2296=2305,2304,2297
<2297=2303,2298
<2298=2302,2301,2300,2299
<2306=2309,2307
<2307=2308
<2309=2310
<2310=2312,2311
<2313=2314
<2314=2316,2315
<2316=2317
