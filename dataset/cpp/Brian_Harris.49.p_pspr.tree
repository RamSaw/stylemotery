>77	FunctionDef	P_SetPsprite (player_t * player , int position , statenum_t stnum)
>78	ParameterList	player_t * player , int position , statenum_t stnum
>79	Parameter	 
>80	Identifier	stnum
>81	ParameterType	statenum_t
>82	Parameter	 
>83	Identifier	position
>84	ParameterType	int
>85	Parameter	 
>86	Identifier	player
>87	ParameterType	player_t *
>88	ReturnType	void
>89	CompoundStatement	 
>90	DoStatement	do
>91	Condition	 
>92	UnaryOp	! psp -> tics
>93	PtrMemberAccess	psp -> tics
>94	Identifier	tics
>95	Identifier	psp
>96	UnaryOperator	!
>97	CompoundStatement	 
>98	ExpressionStatement	 
>99	AssignmentExpr	stnum = psp -> state -> nextstate
>100	PtrMemberAccess	psp -> state -> nextstate
>101	Identifier	nextstate
>102	PtrMemberAccess	psp -> state
>103	Identifier	state
>104	Identifier	psp
>105	Identifier	stnum
>106	IfStatement	if ( state -> action )
>107	CompoundStatement	 
>108	IfStatement	if ( ! psp -> state )
>109	BreakStatement	 
>110	Condition	 
>111	UnaryOp	! psp -> state
>112	PtrMemberAccess	psp -> state
>113	Identifier	state
>114	Identifier	psp
>115	UnaryOperator	!
>116	ExpressionStatement	 
>117	CallExpression	state -> action ( player , psp )
>118	ArgumentList	player
>119	Argument	psp
>120	Identifier	psp
>121	Argument	player
>122	Identifier	player
>123	Callee	state -> action
>124	PtrMemberAccess	state -> action
>125	Identifier	action
>126	Identifier	state
>127	Condition	 
>128	PtrMemberAccess	state -> action
>129	Identifier	action
>130	Identifier	state
>131	IfStatement	if ( state -> misc1 )
>132	CompoundStatement	 
>133	ExpressionStatement	 
>134	AssignmentExpr	psp -> sy = state -> misc2 << FRACBITS
>135	ShiftExpression	state -> misc2 << FRACBITS
>136	Identifier	FRACBITS
>137	PtrMemberAccess	state -> misc2
>138	Identifier	misc2
>139	Identifier	state
>140	PtrMemberAccess	psp -> sy
>141	Identifier	sy
>142	Identifier	psp
>143	ExpressionStatement	 
>144	AssignmentExpr	psp -> sx = state -> misc1 << FRACBITS
>145	ShiftExpression	state -> misc1 << FRACBITS
>146	Identifier	FRACBITS
>147	PtrMemberAccess	state -> misc1
>148	Identifier	misc1
>149	Identifier	state
>150	PtrMemberAccess	psp -> sx
>151	Identifier	sx
>152	Identifier	psp
>153	Condition	 
>154	PtrMemberAccess	state -> misc1
>155	Identifier	misc1
>156	Identifier	state
>157	ExpressionStatement	 
>158	AssignmentExpr	psp -> tics = state -> tics
>159	PtrMemberAccess	state -> tics
>160	Identifier	tics
>161	Identifier	state
>162	PtrMemberAccess	psp -> tics
>163	Identifier	tics
>164	Identifier	psp
>165	ExpressionStatement	 
>166	AssignmentExpr	psp -> state = state
>167	Identifier	state
>168	PtrMemberAccess	psp -> state
>169	Identifier	state
>170	Identifier	psp
>171	ExpressionStatement	 
>172	ArrayIndexing	g -> states [ stnum ]
>173	Identifier	stnum
>174	PtrMemberAccess	g -> states
>175	Identifier	states
>176	Identifier	g
>177	Statement	 
>178	Statement	 
>179	Statement	 
>180	Statement	 
>181	IfStatement	if ( ! stnum )
>182	CompoundStatement	 
>183	BreakStatement	 
>184	ExpressionStatement	 
>185	AssignmentExpr	psp -> state = NULL
>186	Identifier	NULL
>187	PtrMemberAccess	psp -> state
>188	Identifier	state
>189	Identifier	psp
>190	Condition	 
>191	UnaryOp	! stnum
>192	Identifier	stnum
>193	UnaryOperator	!
>194	ExpressionStatement	 
>195	AssignmentExpr	psp = & player -> psprites [ position ]
>196	UnaryOp	& player -> psprites [ position ]
>197	ArrayIndexing	player -> psprites [ position ]
>198	Identifier	position
>199	PtrMemberAccess	player -> psprites
>200	Identifier	psprites
>201	Identifier	player
>202	UnaryOperator	&
>203	Identifier	psp
>204	IdentifierDeclStatement	 
>205	IdentifierDecl	* state
>206	Identifier	state
>207	IdentifierDeclType	const state_t *
>208	IdentifierDeclStatement	 
>209	IdentifierDecl	* psp
>210	Identifier	psp
>211	IdentifierDeclType	pspdef_t *
>243	FunctionDef	P_CalcSwing (player_t * player)
>244	ParameterList	player_t * player
>245	Parameter	 
>246	Identifier	player
>247	ParameterType	player_t *
>248	ReturnType	void
>249	CompoundStatement	 
>250	ExpressionStatement	 
>251	Statement	 
>252	Statement	 
>253	Statement	 
>254	Statement	 
>255	Statement	 
>256	Statement	 
>257	Statement	 
>258	Statement	 
>259	Statement	 
>260	Statement	 
>261	Statement	 
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	ExpressionStatement	 
>270	UnaryOp	& FINEMASK
>271	Identifier	FINEMASK
>272	UnaryOperator	&
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	ExpressionStatement	 
>290	AssignmentExpr	g -> swingx = FixedMul ( swing , finesine [ angle ] )
>291	CallExpression	FixedMul ( swing , finesine [ angle ] )
>292	ArgumentList	swing
>293	Argument	finesine [ angle ]
>294	ArrayIndexing	finesine [ angle ]
>295	Identifier	angle
>296	Identifier	finesine
>297	Argument	swing
>298	Identifier	swing
>299	Callee	FixedMul
>300	Identifier	FixedMul
>301	PtrMemberAccess	g -> swingx
>302	Identifier	swingx
>303	Identifier	g
>304	Statement	 
>305	ExpressionStatement	 
>306	UnaryOp	& FINEMASK
>307	Identifier	FINEMASK
>308	UnaryOperator	&
>309	Statement	 
>310	Statement	 
>311	Statement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	ExpressionStatement	 
>322	AssignmentExpr	swing = player -> bob
>323	PtrMemberAccess	player -> bob
>324	Identifier	bob
>325	Identifier	player
>326	Identifier	swing
>327	IdentifierDeclStatement	 
>328	IdentifierDecl	angle
>329	Identifier	angle
>330	IdentifierDeclType	int
>331	IdentifierDeclStatement	 
>332	IdentifierDecl	swing
>333	Identifier	swing
>334	IdentifierDeclType	fixed_t
>350	FunctionDef	P_BringUpWeapon (player_t * player)
>351	ParameterList	player_t * player
>352	Parameter	 
>353	Identifier	player
>354	ParameterType	player_t *
>355	ReturnType	void
>356	CompoundStatement	 
>357	ExpressionStatement	 
>358	CallExpression	P_SetPsprite ( player , ps_weapon , newstate )
>359	ArgumentList	player
>360	Argument	newstate
>361	Identifier	newstate
>362	Argument	ps_weapon
>363	Identifier	ps_weapon
>364	Argument	player
>365	Identifier	player
>366	Callee	P_SetPsprite
>367	Identifier	P_SetPsprite
>368	ExpressionStatement	 
>369	AssignmentExpr	player -> psprites [ ps_weapon ] . sy = WEAPONBOTTOM
>370	Identifier	WEAPONBOTTOM
>371	MemberAccess	player -> psprites [ ps_weapon ] . sy
>372	Identifier	sy
>373	ArrayIndexing	player -> psprites [ ps_weapon ]
>374	Identifier	ps_weapon
>375	PtrMemberAccess	player -> psprites
>376	Identifier	psprites
>377	Identifier	player
>378	ExpressionStatement	 
>379	AssignmentExpr	player -> pendingweapon = wp_nochange
>380	Identifier	wp_nochange
>381	PtrMemberAccess	player -> pendingweapon
>382	Identifier	pendingweapon
>383	Identifier	player
>384	ExpressionStatement	 
>385	AssignmentExpr	newstate = ( statenum_t ) ( weaponinfo [ player -> pendingweapon ] . upstate )
>386	CastExpression	( statenum_t ) ( weaponinfo [ player -> pendingweapon ] . upstate )
>387	MemberAccess	weaponinfo [ player -> pendingweapon ] . upstate
>388	Identifier	upstate
>389	ArrayIndexing	weaponinfo [ player -> pendingweapon ]
>390	PtrMemberAccess	player -> pendingweapon
>391	Identifier	pendingweapon
>392	Identifier	player
>393	Identifier	weaponinfo
>394	CastTarget	statenum_t
>395	Identifier	newstate
>396	ExpressionStatement	 
>397	CallExpression	S_StartSound ( player -> mo , sfx_sawup )
>398	ArgumentList	player -> mo
>399	Argument	sfx_sawup
>400	Identifier	sfx_sawup
>401	Argument	player -> mo
>402	PtrMemberAccess	player -> mo
>403	Identifier	mo
>404	Identifier	player
>405	Callee	S_StartSound
>406	Identifier	S_StartSound
>407	Statement	 
>408	Statement	 
>409	Statement	 
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	Statement	 
>414	Statement	 
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	Statement	 
>427	Statement	 
>428	Statement	 
>429	Statement	 
>430	Statement	 
>431	Statement	 
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	IfStatement	if ( player -> pendingweapon == wp_nochange )
>436	ExpressionStatement	 
>437	AssignmentExpr	player -> pendingweapon = player -> readyweapon
>438	PtrMemberAccess	player -> readyweapon
>439	Identifier	readyweapon
>440	Identifier	player
>441	PtrMemberAccess	player -> pendingweapon
>442	Identifier	pendingweapon
>443	Identifier	player
>444	Condition	 
>445	EqualityExpression	player -> pendingweapon == wp_nochange
>446	Identifier	wp_nochange
>447	PtrMemberAccess	player -> pendingweapon
>448	Identifier	pendingweapon
>449	Identifier	player
>450	IdentifierDeclStatement	 
>451	IdentifierDecl	newstate
>452	Identifier	newstate
>453	IdentifierDeclType	statenum_t
>476	FunctionDef	P_CheckAmmo (player_t * player)
>477	ParameterList	player_t * player
>478	Parameter	 
>479	Identifier	player
>480	ParameterType	player_t *
>481	ReturnType	qboolean
>482	CompoundStatement	 
>483	IfStatement	if ( ammo == am_noammo || player -> ammo [ ammo ] >= count )
>484	ReturnStatement	 
>485	Identifier	true
>486	Condition	 
>487	OrExpression	ammo == am_noammo || player -> ammo [ ammo ] >= count
>488	RelationalExpression	player -> ammo [ ammo ] >= count
>489	Identifier	count
>490	ArrayIndexing	player -> ammo [ ammo ]
>491	Identifier	ammo
>492	PtrMemberAccess	player -> ammo
>493	Identifier	ammo
>494	Identifier	player
>495	EqualityExpression	ammo == am_noammo
>496	Identifier	am_noammo
>497	Identifier	ammo
>498	IfStatement	if ( player -> readyweapon == wp_bfg )
>499	ElseStatement	else
>500	IfStatement	if ( player -> readyweapon == wp_supershotgun )
>501	ElseStatement	else
>502	ExpressionStatement	 
>503	AssignmentExpr	count = 1
>504	PrimaryExpression	1
>505	Identifier	count
>506	ExpressionStatement	 
>507	AssignmentExpr	count = 2
>508	PrimaryExpression	2
>509	Identifier	count
>510	Condition	 
>511	EqualityExpression	player -> readyweapon == wp_supershotgun
>512	Identifier	wp_supershotgun
>513	PtrMemberAccess	player -> readyweapon
>514	Identifier	readyweapon
>515	Identifier	player
>516	ExpressionStatement	 
>517	AssignmentExpr	count = BFGCELLS
>518	Identifier	BFGCELLS
>519	Identifier	count
>520	Condition	 
>521	EqualityExpression	player -> readyweapon == wp_bfg
>522	Identifier	wp_bfg
>523	PtrMemberAccess	player -> readyweapon
>524	Identifier	readyweapon
>525	Identifier	player
>526	ExpressionStatement	 
>527	AssignmentExpr	ammo = weaponinfo [ player -> readyweapon ] . ammo
>528	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>529	Identifier	ammo
>530	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>531	PtrMemberAccess	player -> readyweapon
>532	Identifier	readyweapon
>533	Identifier	player
>534	Identifier	weaponinfo
>535	Identifier	ammo
>536	IdentifierDeclStatement	 
>537	IdentifierDecl	count
>538	Identifier	count
>539	IdentifierDeclType	int
>540	IdentifierDeclStatement	 
>541	IdentifierDecl	ammo
>542	Identifier	ammo
>543	IdentifierDeclType	ammotype_t
>565	FunctionDef	P_FireWeapon (player_t * player)
>566	ParameterList	player_t * player
>567	Parameter	 
>568	Identifier	player
>569	ParameterType	player_t *
>570	ReturnType	void
>571	CompoundStatement	 
>572	IfStatement	if ( player -> readyweapon == wp_chainsaw )
>573	CompoundStatement	 
>574	CompoundStatement	 
>575	Statement	 
>576	Statement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Condition	 
>585	EqualityExpression	player -> readyweapon == wp_chainsaw
>586	Identifier	wp_chainsaw
>587	PtrMemberAccess	player -> readyweapon
>588	Identifier	readyweapon
>589	Identifier	player
>590	ExpressionStatement	 
>591	CallExpression	P_NoiseAlert ( player -> mo , player -> mo )
>592	ArgumentList	player -> mo
>593	Argument	player -> mo
>594	PtrMemberAccess	player -> mo
>595	Identifier	mo
>596	Identifier	player
>597	Argument	player -> mo
>598	PtrMemberAccess	player -> mo
>599	Identifier	mo
>600	Identifier	player
>601	Callee	P_NoiseAlert
>602	Identifier	P_NoiseAlert
>603	ExpressionStatement	 
>604	CallExpression	P_SetPsprite ( player , ps_weapon , newstate )
>605	ArgumentList	player
>606	Argument	newstate
>607	Identifier	newstate
>608	Argument	ps_weapon
>609	Identifier	ps_weapon
>610	Argument	player
>611	Identifier	player
>612	Callee	P_SetPsprite
>613	Identifier	P_SetPsprite
>614	ExpressionStatement	 
>615	AssignmentExpr	newstate = ( statenum_t ) weaponinfo [ player -> readyweapon ] . atkstate
>616	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . atkstate
>617	MemberAccess	weaponinfo [ player -> readyweapon ] . atkstate
>618	Identifier	atkstate
>619	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>620	PtrMemberAccess	player -> readyweapon
>621	Identifier	readyweapon
>622	Identifier	player
>623	Identifier	weaponinfo
>624	CastTarget	statenum_t
>625	Identifier	newstate
>626	ExpressionStatement	 
>627	CallExpression	P_SetMobjState ( player -> mo , S_PLAY_ATK1 )
>628	ArgumentList	player -> mo
>629	Argument	S_PLAY_ATK1
>630	Identifier	S_PLAY_ATK1
>631	Argument	player -> mo
>632	PtrMemberAccess	player -> mo
>633	Identifier	mo
>634	Identifier	player
>635	Callee	P_SetMobjState
>636	Identifier	P_SetMobjState
>637	IfStatement	if ( ! P_CheckAmmo ( player ) )
>638	ReturnStatement	 
>639	Condition	 
>640	UnaryOp	! P_CheckAmmo ( player )
>641	CallExpression	P_CheckAmmo ( player )
>642	ArgumentList	player
>643	Argument	player
>644	Identifier	player
>645	Callee	P_CheckAmmo
>646	Identifier	P_CheckAmmo
>647	UnaryOperator	!
>648	IdentifierDeclStatement	 
>649	IdentifierDecl	newstate
>650	Identifier	newstate
>651	IdentifierDeclType	statenum_t
>669	FunctionDef	P_DropWeapon (player_t * player)
>670	ParameterList	player_t * player
>671	Parameter	 
>672	Identifier	player
>673	ParameterType	player_t *
>674	ReturnType	void
>675	CompoundStatement	 
>676	ExpressionStatement	 
>677	CallExpression	P_SetPsprite ( player , ps_weapon , ( statenum_t ) weaponinfo [ player -> readyweapon ] . downstate )
>678	ArgumentList	player
>679	Argument	( statenum_t ) weaponinfo [ player -> readyweapon ] . downstate
>680	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . downstate
>681	MemberAccess	weaponinfo [ player -> readyweapon ] . downstate
>682	Identifier	downstate
>683	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>684	PtrMemberAccess	player -> readyweapon
>685	Identifier	readyweapon
>686	Identifier	player
>687	Identifier	weaponinfo
>688	CastTarget	statenum_t
>689	Argument	ps_weapon
>690	Identifier	ps_weapon
>691	Argument	player
>692	Identifier	player
>693	Callee	P_SetPsprite
>694	Identifier	P_SetPsprite
>707	FunctionDef	A_WeaponReady (player_t * player , pspdef_t * psp)
>708	ParameterList	player_t * player , pspdef_t * psp
>709	Parameter	 
>710	Identifier	psp
>711	ParameterType	pspdef_t *
>712	Parameter	 
>713	Identifier	player
>714	ParameterType	player_t *
>715	ReturnType	void
>716	CompoundStatement	 
>717	ExpressionStatement	 
>718	AssignmentExpr	psp -> sy = WEAPONTOP + FixedMul ( player -> bob , finesine [ angle ] )
>719	AdditiveExpression	WEAPONTOP + FixedMul ( player -> bob , finesine [ angle ] )
>720	CallExpression	FixedMul ( player -> bob , finesine [ angle ] )
>721	ArgumentList	player -> bob
>722	Argument	finesine [ angle ]
>723	ArrayIndexing	finesine [ angle ]
>724	Identifier	angle
>725	Identifier	finesine
>726	Argument	player -> bob
>727	PtrMemberAccess	player -> bob
>728	Identifier	bob
>729	Identifier	player
>730	Callee	FixedMul
>731	Identifier	FixedMul
>732	Identifier	WEAPONTOP
>733	PtrMemberAccess	psp -> sy
>734	Identifier	sy
>735	Identifier	psp
>736	ExpressionStatement	 
>737	AssignmentExpr	angle &= FINEANGLES / 2 - 1
>738	AdditiveExpression	FINEANGLES / 2 - 1
>739	PrimaryExpression	1
>740	MultiplicativeExpression	FINEANGLES / 2
>741	PrimaryExpression	2
>742	Identifier	FINEANGLES
>743	Identifier	angle
>744	ExpressionStatement	 
>745	AssignmentExpr	psp -> sx = FRACUNIT + FixedMul ( player -> bob , finecosine [ angle ] )
>746	AdditiveExpression	FRACUNIT + FixedMul ( player -> bob , finecosine [ angle ] )
>747	CallExpression	FixedMul ( player -> bob , finecosine [ angle ] )
>748	ArgumentList	player -> bob
>749	Argument	finecosine [ angle ]
>750	ArrayIndexing	finecosine [ angle ]
>751	Identifier	angle
>752	Identifier	finecosine
>753	Argument	player -> bob
>754	PtrMemberAccess	player -> bob
>755	Identifier	bob
>756	Identifier	player
>757	Callee	FixedMul
>758	Identifier	FixedMul
>759	Identifier	FRACUNIT
>760	PtrMemberAccess	psp -> sx
>761	Identifier	sx
>762	Identifier	psp
>763	ExpressionStatement	 
>764	UnaryOp	& FINEMASK
>765	Identifier	FINEMASK
>766	UnaryOperator	&
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	IfStatement	if ( player -> cmd . buttons & BT_ATTACK )
>778	ElseStatement	else
>779	ExpressionStatement	 
>780	AssignmentExpr	player -> attackdown = false
>781	Identifier	false
>782	PtrMemberAccess	player -> attackdown
>783	Identifier	attackdown
>784	Identifier	player
>785	CompoundStatement	 
>786	IfStatement	if ( ! player -> attackdown || ( player -> readyweapon != wp_missile && player -> readyweapon != wp_bfg ) )
>787	CompoundStatement	 
>788	ReturnStatement	 
>789	ExpressionStatement	 
>790	CallExpression	P_FireWeapon ( player )
>791	ArgumentList	player
>792	Argument	player
>793	Identifier	player
>794	Callee	P_FireWeapon
>795	Identifier	P_FireWeapon
>796	ExpressionStatement	 
>797	AssignmentExpr	player -> attackdown = true
>798	Identifier	true
>799	PtrMemberAccess	player -> attackdown
>800	Identifier	attackdown
>801	Identifier	player
>802	Condition	 
>803	OrExpression	! player -> attackdown || ( player -> readyweapon != wp_missile && player -> readyweapon != wp_bfg )
>804	AndExpression	player -> readyweapon != wp_missile && player -> readyweapon != wp_bfg
>805	EqualityExpression	player -> readyweapon != wp_bfg
>806	Identifier	wp_bfg
>807	PtrMemberAccess	player -> readyweapon
>808	Identifier	readyweapon
>809	Identifier	player
>810	EqualityExpression	player -> readyweapon != wp_missile
>811	Identifier	wp_missile
>812	PtrMemberAccess	player -> readyweapon
>813	Identifier	readyweapon
>814	Identifier	player
>815	UnaryOp	! player -> attackdown
>816	PtrMemberAccess	player -> attackdown
>817	Identifier	attackdown
>818	Identifier	player
>819	UnaryOperator	!
>820	Condition	 
>821	BitAndExpression	player -> cmd . buttons & BT_ATTACK
>822	Identifier	BT_ATTACK
>823	MemberAccess	player -> cmd . buttons
>824	Identifier	buttons
>825	PtrMemberAccess	player -> cmd
>826	Identifier	cmd
>827	Identifier	player
>828	IfStatement	if ( player -> pendingweapon != wp_nochange || ! player -> health )
>829	CompoundStatement	 
>830	ReturnStatement	 
>831	ExpressionStatement	 
>832	CallExpression	P_SetPsprite ( player , ps_weapon , newstate )
>833	ArgumentList	player
>834	Argument	newstate
>835	Identifier	newstate
>836	Argument	ps_weapon
>837	Identifier	ps_weapon
>838	Argument	player
>839	Identifier	player
>840	Callee	P_SetPsprite
>841	Identifier	P_SetPsprite
>842	ExpressionStatement	 
>843	AssignmentExpr	newstate = ( statenum_t ) weaponinfo [ player -> readyweapon ] . downstate
>844	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . downstate
>845	MemberAccess	weaponinfo [ player -> readyweapon ] . downstate
>846	Identifier	downstate
>847	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>848	PtrMemberAccess	player -> readyweapon
>849	Identifier	readyweapon
>850	Identifier	player
>851	Identifier	weaponinfo
>852	CastTarget	statenum_t
>853	Identifier	newstate
>854	Condition	 
>855	OrExpression	player -> pendingweapon != wp_nochange || ! player -> health
>856	UnaryOp	! player -> health
>857	PtrMemberAccess	player -> health
>858	Identifier	health
>859	Identifier	player
>860	UnaryOperator	!
>861	EqualityExpression	player -> pendingweapon != wp_nochange
>862	Identifier	wp_nochange
>863	PtrMemberAccess	player -> pendingweapon
>864	Identifier	pendingweapon
>865	Identifier	player
>866	CompoundStatement	 
>867	ExpressionStatement	 
>868	CallExpression	S_StartSound ( player -> mo , sfx_sawidl )
>869	ArgumentList	player -> mo
>870	Argument	sfx_sawidl
>871	Identifier	sfx_sawidl
>872	Argument	player -> mo
>873	PtrMemberAccess	player -> mo
>874	Identifier	mo
>875	Identifier	player
>876	Callee	S_StartSound
>877	Identifier	S_StartSound
>878	Statement	 
>879	Statement	 
>880	Statement	 
>881	Statement	 
>882	Statement	 
>883	Statement	 
>884	Statement	 
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	Statement	 
>896	Statement	 
>897	Statement	 
>898	Statement	 
>899	Statement	 
>900	Statement	 
>901	Statement	 
>902	Statement	 
>903	Statement	 
>904	Statement	 
>905	Statement	 
>906	Statement	 
>907	Statement	 
>908	Statement	 
>909	Statement	 
>910	Statement	 
>911	Statement	 
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	Statement	 
>919	CompoundStatement	 
>920	ExpressionStatement	 
>921	CallExpression	P_SetMobjState ( player -> mo , S_PLAY )
>922	ArgumentList	player -> mo
>923	Argument	S_PLAY
>924	Identifier	S_PLAY
>925	Argument	player -> mo
>926	PtrMemberAccess	player -> mo
>927	Identifier	mo
>928	Identifier	player
>929	Callee	P_SetMobjState
>930	Identifier	P_SetMobjState
>931	Statement	 
>932	Statement	 
>933	Statement	 
>934	Statement	 
>935	Statement	 
>936	Statement	 
>937	Statement	 
>938	Statement	 
>939	Statement	 
>940	Statement	 
>941	Statement	 
>942	Statement	 
>943	Statement	 
>944	Statement	 
>945	Statement	 
>946	Statement	 
>947	Statement	 
>948	Statement	 
>949	Statement	 
>950	Statement	 
>951	Statement	 
>952	Statement	 
>953	Statement	 
>954	Statement	 
>955	Statement	 
>956	Statement	 
>957	Statement	 
>958	Statement	 
>959	Statement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	IdentifierDeclStatement	 
>964	IdentifierDecl	angle
>965	Identifier	angle
>966	IdentifierDeclType	int
>967	IdentifierDeclStatement	 
>968	IdentifierDecl	newstate
>969	Identifier	newstate
>970	IdentifierDeclType	statenum_t
>1013	FunctionDef	A_ReFire (player_t * player , pspdef_t * psp)
>1014	ParameterList	player_t * player , pspdef_t * psp
>1015	Parameter	 
>1016	Identifier	psp
>1017	ParameterType	pspdef_t *
>1018	Parameter	 
>1019	Identifier	player
>1020	ParameterType	player_t *
>1021	ReturnType	void
>1022	CompoundStatement	 
>1023	IfStatement	if ( ( player -> cmd . buttons & BT_ATTACK ) && player -> pendingweapon == wp_nochange && player -> health )
>1024	ElseStatement	else
>1025	CompoundStatement	 
>1026	ExpressionStatement	 
>1027	CallExpression	P_CheckAmmo ( player )
>1028	ArgumentList	player
>1029	Argument	player
>1030	Identifier	player
>1031	Callee	P_CheckAmmo
>1032	Identifier	P_CheckAmmo
>1033	ExpressionStatement	 
>1034	AssignmentExpr	player -> refire = 0
>1035	PrimaryExpression	0
>1036	PtrMemberAccess	player -> refire
>1037	Identifier	refire
>1038	Identifier	player
>1039	CompoundStatement	 
>1040	ExpressionStatement	 
>1041	CallExpression	P_FireWeapon ( player )
>1042	ArgumentList	player
>1043	Argument	player
>1044	Identifier	player
>1045	Callee	P_FireWeapon
>1046	Identifier	P_FireWeapon
>1047	ExpressionStatement	 
>1048	IncDecOp	player -> refire ++
>1049	IncDec	++
>1050	PtrMemberAccess	player -> refire
>1051	Identifier	refire
>1052	Identifier	player
>1053	Condition	 
>1054	AndExpression	( player -> cmd . buttons & BT_ATTACK ) && player -> pendingweapon == wp_nochange && player -> health
>1055	AndExpression	player -> pendingweapon == wp_nochange && player -> health
>1056	PtrMemberAccess	player -> health
>1057	Identifier	health
>1058	Identifier	player
>1059	EqualityExpression	player -> pendingweapon == wp_nochange
>1060	Identifier	wp_nochange
>1061	PtrMemberAccess	player -> pendingweapon
>1062	Identifier	pendingweapon
>1063	Identifier	player
>1064	BitAndExpression	player -> cmd . buttons & BT_ATTACK
>1065	Identifier	BT_ATTACK
>1066	MemberAccess	player -> cmd . buttons
>1067	Identifier	buttons
>1068	PtrMemberAccess	player -> cmd
>1069	Identifier	cmd
>1070	Identifier	player
>1084	FunctionDef	A_CheckReload (player_t * player , pspdef_t * psp)
>1085	ParameterList	player_t * player , pspdef_t * psp
>1086	Parameter	 
>1087	Identifier	psp
>1088	ParameterType	pspdef_t *
>1089	Parameter	 
>1090	Identifier	player
>1091	ParameterType	player_t *
>1092	ReturnType	void
>1093	CompoundStatement	 
>1094	IfStatement	if ( player -> ammo [ am_shell ] < 2 )
>1095	ExpressionStatement	 
>1096	CallExpression	P_SetPsprite ( player , ps_weapon , S_DSNR1 )
>1097	ArgumentList	player
>1098	Argument	S_DSNR1
>1099	Identifier	S_DSNR1
>1100	Argument	ps_weapon
>1101	Identifier	ps_weapon
>1102	Argument	player
>1103	Identifier	player
>1104	Callee	P_SetPsprite
>1105	Identifier	P_SetPsprite
>1106	Condition	 
>1107	RelationalExpression	player -> ammo [ am_shell ] < 2
>1108	PrimaryExpression	2
>1109	ArrayIndexing	player -> ammo [ am_shell ]
>1110	Identifier	am_shell
>1111	PtrMemberAccess	player -> ammo
>1112	Identifier	ammo
>1113	Identifier	player
>1114	ExpressionStatement	 
>1115	CallExpression	P_CheckAmmo ( player )
>1116	ArgumentList	player
>1117	Argument	player
>1118	Identifier	player
>1119	Callee	P_CheckAmmo
>1120	Identifier	P_CheckAmmo
>1134	FunctionDef	A_Lower (player_t * player , pspdef_t * psp)
>1135	ParameterList	player_t * player , pspdef_t * psp
>1136	Parameter	 
>1137	Identifier	psp
>1138	ParameterType	pspdef_t *
>1139	Parameter	 
>1140	Identifier	player
>1141	ParameterType	player_t *
>1142	ReturnType	void
>1143	CompoundStatement	 
>1144	ExpressionStatement	 
>1145	CallExpression	P_BringUpWeapon ( player )
>1146	ArgumentList	player
>1147	Argument	player
>1148	Identifier	player
>1149	Callee	P_BringUpWeapon
>1150	Identifier	P_BringUpWeapon
>1151	ExpressionStatement	 
>1152	AssignmentExpr	player -> readyweapon = player -> pendingweapon
>1153	PtrMemberAccess	player -> pendingweapon
>1154	Identifier	pendingweapon
>1155	Identifier	player
>1156	PtrMemberAccess	player -> readyweapon
>1157	Identifier	readyweapon
>1158	Identifier	player
>1159	IfStatement	if ( ! player -> health )
>1160	CompoundStatement	 
>1161	ReturnStatement	 
>1162	ExpressionStatement	 
>1163	CallExpression	P_SetPsprite ( player , ps_weapon , S_NULL )
>1164	ArgumentList	player
>1165	Argument	S_NULL
>1166	Identifier	S_NULL
>1167	Argument	ps_weapon
>1168	Identifier	ps_weapon
>1169	Argument	player
>1170	Identifier	player
>1171	Callee	P_SetPsprite
>1172	Identifier	P_SetPsprite
>1173	Condition	 
>1174	UnaryOp	! player -> health
>1175	PtrMemberAccess	player -> health
>1176	Identifier	health
>1177	Identifier	player
>1178	UnaryOperator	!
>1179	IfStatement	if ( player -> playerstate == PST_DEAD )
>1180	CompoundStatement	 
>1181	ReturnStatement	 
>1182	ExpressionStatement	 
>1183	AssignmentExpr	psp -> sy = WEAPONBOTTOM
>1184	Identifier	WEAPONBOTTOM
>1185	PtrMemberAccess	psp -> sy
>1186	Identifier	sy
>1187	Identifier	psp
>1188	Condition	 
>1189	EqualityExpression	player -> playerstate == PST_DEAD
>1190	Identifier	PST_DEAD
>1191	PtrMemberAccess	player -> playerstate
>1192	Identifier	playerstate
>1193	Identifier	player
>1194	IfStatement	if ( psp -> sy < WEAPONBOTTOM )
>1195	ReturnStatement	 
>1196	Condition	 
>1197	RelationalExpression	psp -> sy < WEAPONBOTTOM
>1198	Identifier	WEAPONBOTTOM
>1199	PtrMemberAccess	psp -> sy
>1200	Identifier	sy
>1201	Identifier	psp
>1202	ExpressionStatement	 
>1203	AssignmentExpr	psp -> sy += LOWERSPEED
>1204	Identifier	LOWERSPEED
>1205	PtrMemberAccess	psp -> sy
>1206	Identifier	sy
>1207	Identifier	psp
>1225	FunctionDef	A_Raise (player_t * player , pspdef_t * psp)
>1226	ParameterList	player_t * player , pspdef_t * psp
>1227	Parameter	 
>1228	Identifier	psp
>1229	ParameterType	pspdef_t *
>1230	Parameter	 
>1231	Identifier	player
>1232	ParameterType	player_t *
>1233	ReturnType	void
>1234	CompoundStatement	 
>1235	ExpressionStatement	 
>1236	CallExpression	P_SetPsprite ( player , ps_weapon , newstate )
>1237	ArgumentList	player
>1238	Argument	newstate
>1239	Identifier	newstate
>1240	Argument	ps_weapon
>1241	Identifier	ps_weapon
>1242	Argument	player
>1243	Identifier	player
>1244	Callee	P_SetPsprite
>1245	Identifier	P_SetPsprite
>1246	ExpressionStatement	 
>1247	AssignmentExpr	newstate = ( statenum_t ) weaponinfo [ player -> readyweapon ] . readystate
>1248	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . readystate
>1249	MemberAccess	weaponinfo [ player -> readyweapon ] . readystate
>1250	Identifier	readystate
>1251	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>1252	PtrMemberAccess	player -> readyweapon
>1253	Identifier	readyweapon
>1254	Identifier	player
>1255	Identifier	weaponinfo
>1256	CastTarget	statenum_t
>1257	Identifier	newstate
>1258	ExpressionStatement	 
>1259	AssignmentExpr	psp -> sy = WEAPONTOP
>1260	Identifier	WEAPONTOP
>1261	PtrMemberAccess	psp -> sy
>1262	Identifier	sy
>1263	Identifier	psp
>1264	IfStatement	if ( psp -> sy > WEAPONTOP )
>1265	ReturnStatement	 
>1266	Condition	 
>1267	RelationalExpression	psp -> sy > WEAPONTOP
>1268	Identifier	WEAPONTOP
>1269	PtrMemberAccess	psp -> sy
>1270	Identifier	sy
>1271	Identifier	psp
>1272	ExpressionStatement	 
>1273	AssignmentExpr	psp -> sy -= RAISESPEED
>1274	Identifier	RAISESPEED
>1275	PtrMemberAccess	psp -> sy
>1276	Identifier	sy
>1277	Identifier	psp
>1278	IdentifierDeclStatement	 
>1279	IdentifierDecl	newstate
>1280	Identifier	newstate
>1281	IdentifierDeclType	statenum_t
>1300	FunctionDef	A_GunFlash (player_t * player , pspdef_t * psp)
>1301	ParameterList	player_t * player , pspdef_t * psp
>1302	Parameter	 
>1303	Identifier	psp
>1304	ParameterType	pspdef_t *
>1305	Parameter	 
>1306	Identifier	player
>1307	ParameterType	player_t *
>1308	ReturnType	void
>1309	CompoundStatement	 
>1310	ExpressionStatement	 
>1311	CallExpression	P_SetPsprite ( player , ps_flash , ( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate )
>1312	ArgumentList	player
>1313	Argument	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>1314	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>1315	MemberAccess	weaponinfo [ player -> readyweapon ] . flashstate
>1316	Identifier	flashstate
>1317	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>1318	PtrMemberAccess	player -> readyweapon
>1319	Identifier	readyweapon
>1320	Identifier	player
>1321	Identifier	weaponinfo
>1322	CastTarget	statenum_t
>1323	Argument	ps_flash
>1324	Identifier	ps_flash
>1325	Argument	player
>1326	Identifier	player
>1327	Callee	P_SetPsprite
>1328	Identifier	P_SetPsprite
>1329	ExpressionStatement	 
>1330	CallExpression	P_SetMobjState ( player -> mo , S_PLAY_ATK2 )
>1331	ArgumentList	player -> mo
>1332	Argument	S_PLAY_ATK2
>1333	Identifier	S_PLAY_ATK2
>1334	Argument	player -> mo
>1335	PtrMemberAccess	player -> mo
>1336	Identifier	mo
>1337	Identifier	player
>1338	Callee	P_SetMobjState
>1339	Identifier	P_SetMobjState
>1355	FunctionDef	A_Punch (player_t * player , pspdef_t * psp)
>1356	ParameterList	player_t * player , pspdef_t * psp
>1357	Parameter	 
>1358	Identifier	psp
>1359	ParameterType	pspdef_t *
>1360	Parameter	 
>1361	Identifier	player
>1362	ParameterType	player_t *
>1363	ReturnType	void
>1364	CompoundStatement	 
>1365	CompoundStatement	 
>1366	ExpressionStatement	 
>1367	Statement	 
>1368	Statement	 
>1369	Statement	 
>1370	Statement	 
>1371	Statement	 
>1372	Statement	 
>1373	Statement	 
>1374	Statement	 
>1375	Statement	 
>1376	Statement	 
>1377	Statement	 
>1378	Statement	 
>1379	Statement	 
>1380	Statement	 
>1381	Statement	 
>1382	Statement	 
>1383	Statement	 
>1384	Statement	 
>1385	Statement	 
>1386	Statement	 
>1387	Statement	 
>1388	Statement	 
>1389	Statement	 
>1390	Statement	 
>1391	Statement	 
>1392	Statement	 
>1393	Statement	 
>1394	Statement	 
>1395	Statement	 
>1396	Statement	 
>1397	Statement	 
>1398	Statement	 
>1399	Statement	 
>1400	Statement	 
>1401	ExpressionStatement	 
>1402	CallExpression	S_StartSound ( player -> mo , sfx_punch )
>1403	ArgumentList	player -> mo
>1404	Argument	sfx_punch
>1405	Identifier	sfx_punch
>1406	Argument	player -> mo
>1407	PtrMemberAccess	player -> mo
>1408	Identifier	mo
>1409	Identifier	player
>1410	Callee	S_StartSound
>1411	Identifier	S_StartSound
>1412	Statement	 
>1413	Statement	 
>1414	Statement	 
>1415	Statement	 
>1416	Statement	 
>1417	Statement	 
>1418	Statement	 
>1419	ExpressionStatement	 
>1420	CallExpression	P_LineAttack ( player -> mo , angle , MELEERANGE , slope , damage )
>1421	ArgumentList	player -> mo
>1422	Argument	damage
>1423	Identifier	damage
>1424	Argument	slope
>1425	Identifier	slope
>1426	Argument	MELEERANGE
>1427	Identifier	MELEERANGE
>1428	Argument	angle
>1429	Identifier	angle
>1430	Argument	player -> mo
>1431	PtrMemberAccess	player -> mo
>1432	Identifier	mo
>1433	Identifier	player
>1434	Callee	P_LineAttack
>1435	Identifier	P_LineAttack
>1436	ExpressionStatement	 
>1437	AssignmentExpr	slope = P_AimLineAttack ( player -> mo , angle , MELEERANGE )
>1438	CallExpression	P_AimLineAttack ( player -> mo , angle , MELEERANGE )
>1439	ArgumentList	player -> mo
>1440	Argument	MELEERANGE
>1441	Identifier	MELEERANGE
>1442	Argument	angle
>1443	Identifier	angle
>1444	Argument	player -> mo
>1445	PtrMemberAccess	player -> mo
>1446	Identifier	mo
>1447	Identifier	player
>1448	Callee	P_AimLineAttack
>1449	Identifier	P_AimLineAttack
>1450	Identifier	slope
>1451	ExpressionStatement	 
>1452	AssignmentExpr	angle += ( P_Random ( ) - P_Random ( ) ) << 18
>1453	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 18
>1454	PrimaryExpression	18
>1455	AdditiveExpression	P_Random ( ) - P_Random ( )
>1456	CallExpression	P_Random ( )
>1457	ArgumentList	 
>1458	Callee	P_Random
>1459	Identifier	P_Random
>1460	CallExpression	P_Random ( )
>1461	ArgumentList	 
>1462	Callee	P_Random
>1463	Identifier	P_Random
>1464	Identifier	angle
>1465	ExpressionStatement	 
>1466	AssignmentExpr	angle = player -> mo -> angle
>1467	PtrMemberAccess	player -> mo -> angle
>1468	Identifier	angle
>1469	PtrMemberAccess	player -> mo
>1470	Identifier	mo
>1471	Identifier	player
>1472	Identifier	angle
>1473	IfStatement	if ( player -> powers [ pw_strength ] )
>1474	ExpressionStatement	 
>1475	AssignmentExpr	damage *= 10
>1476	PrimaryExpression	10
>1477	Identifier	damage
>1478	Condition	 
>1479	ArrayIndexing	player -> powers [ pw_strength ]
>1480	Identifier	pw_strength
>1481	PtrMemberAccess	player -> powers
>1482	Identifier	powers
>1483	Identifier	player
>1484	ExpressionStatement	 
>1485	AssignmentExpr	damage = ( P_Random ( ) % 10 + 1 ) << 1
>1486	ShiftExpression	( P_Random ( ) % 10 + 1 ) << 1
>1487	PrimaryExpression	1
>1488	AdditiveExpression	P_Random ( ) % 10 + 1
>1489	PrimaryExpression	1
>1490	MultiplicativeExpression	P_Random ( ) % 10
>1491	PrimaryExpression	10
>1492	CallExpression	P_Random ( )
>1493	ArgumentList	 
>1494	Callee	P_Random
>1495	Identifier	P_Random
>1496	Identifier	damage
>1497	IdentifierDeclStatement	 
>1498	IdentifierDecl	slope
>1499	Identifier	slope
>1500	IdentifierDeclType	int
>1501	IdentifierDeclStatement	 
>1502	IdentifierDecl	damage
>1503	Identifier	damage
>1504	IdentifierDeclType	int
>1505	IdentifierDeclStatement	 
>1506	IdentifierDecl	angle
>1507	Identifier	angle
>1508	IdentifierDeclType	angle_t
>1530	FunctionDef	A_Saw (player_t * player , pspdef_t * psp)
>1531	ParameterList	player_t * player , pspdef_t * psp
>1532	Parameter	 
>1533	Identifier	psp
>1534	ParameterType	pspdef_t *
>1535	Parameter	 
>1536	Identifier	player
>1537	ParameterType	player_t *
>1538	ReturnType	void
>1539	CompoundStatement	 
>1540	ExpressionStatement	 
>1541	AssignmentExpr	player -> mo -> flags |= MF_JUSTATTACKED
>1542	Identifier	MF_JUSTATTACKED
>1543	PtrMemberAccess	player -> mo -> flags
>1544	Identifier	flags
>1545	PtrMemberAccess	player -> mo
>1546	Identifier	mo
>1547	Identifier	player
>1548	IfStatement	if ( angle - player -> mo -> angle > ANG180 )
>1549	ElseStatement	else
>1550	CompoundStatement	 
>1551	IfStatement	if ( angle - player -> mo -> angle > ANG90 / 20 )
>1552	ElseStatement	else
>1553	ExpressionStatement	 
>1554	AssignmentExpr	player -> mo -> angle += ANG90 / 20
>1555	MultiplicativeExpression	ANG90 / 20
>1556	PrimaryExpression	20
>1557	Identifier	ANG90
>1558	PtrMemberAccess	player -> mo -> angle
>1559	Identifier	angle
>1560	PtrMemberAccess	player -> mo
>1561	Identifier	mo
>1562	Identifier	player
>1563	ExpressionStatement	 
>1564	AssignmentExpr	player -> mo -> angle = angle - ANG90 / 21
>1565	AdditiveExpression	angle - ANG90 / 21
>1566	MultiplicativeExpression	ANG90 / 21
>1567	PrimaryExpression	21
>1568	Identifier	ANG90
>1569	Identifier	angle
>1570	PtrMemberAccess	player -> mo -> angle
>1571	Identifier	angle
>1572	PtrMemberAccess	player -> mo
>1573	Identifier	mo
>1574	Identifier	player
>1575	Condition	 
>1576	RelationalExpression	angle - player -> mo -> angle > ANG90 / 20
>1577	MultiplicativeExpression	ANG90 / 20
>1578	PrimaryExpression	20
>1579	Identifier	ANG90
>1580	AdditiveExpression	angle - player -> mo -> angle
>1581	PtrMemberAccess	player -> mo -> angle
>1582	Identifier	angle
>1583	PtrMemberAccess	player -> mo
>1584	Identifier	mo
>1585	Identifier	player
>1586	Identifier	angle
>1587	CompoundStatement	 
>1588	IfStatement	if ( angle - player -> mo -> angle < - ANG90 / 20 )
>1589	ElseStatement	else
>1590	ExpressionStatement	 
>1591	AssignmentExpr	player -> mo -> angle -= ANG90 / 20
>1592	MultiplicativeExpression	ANG90 / 20
>1593	PrimaryExpression	20
>1594	Identifier	ANG90
>1595	PtrMemberAccess	player -> mo -> angle
>1596	Identifier	angle
>1597	PtrMemberAccess	player -> mo
>1598	Identifier	mo
>1599	Identifier	player
>1600	ExpressionStatement	 
>1601	AssignmentExpr	player -> mo -> angle = angle + ANG90 / 21
>1602	AdditiveExpression	angle + ANG90 / 21
>1603	MultiplicativeExpression	ANG90 / 21
>1604	PrimaryExpression	21
>1605	Identifier	ANG90
>1606	Identifier	angle
>1607	PtrMemberAccess	player -> mo -> angle
>1608	Identifier	angle
>1609	PtrMemberAccess	player -> mo
>1610	Identifier	mo
>1611	Identifier	player
>1612	Condition	 
>1613	RelationalExpression	angle - player -> mo -> angle < - ANG90 / 20
>1614	MultiplicativeExpression	- ANG90 / 20
>1615	PrimaryExpression	20
>1616	UnaryOp	- ANG90
>1617	Identifier	ANG90
>1618	UnaryOperator	-
>1619	AdditiveExpression	angle - player -> mo -> angle
>1620	PtrMemberAccess	player -> mo -> angle
>1621	Identifier	angle
>1622	PtrMemberAccess	player -> mo
>1623	Identifier	mo
>1624	Identifier	player
>1625	Identifier	angle
>1626	Condition	 
>1627	RelationalExpression	angle - player -> mo -> angle > ANG180
>1628	Identifier	ANG180
>1629	AdditiveExpression	angle - player -> mo -> angle
>1630	PtrMemberAccess	player -> mo -> angle
>1631	Identifier	angle
>1632	PtrMemberAccess	player -> mo
>1633	Identifier	mo
>1634	Identifier	player
>1635	Identifier	angle
>1636	ExpressionStatement	 
>1637	Statement	 
>1638	Statement	 
>1639	Statement	 
>1640	Statement	 
>1641	Statement	 
>1642	Statement	 
>1643	Statement	 
>1644	Statement	 
>1645	Statement	 
>1646	Statement	 
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	Statement	 
>1651	Statement	 
>1652	Statement	 
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	Statement	 
>1659	Statement	 
>1660	Statement	 
>1661	Statement	 
>1662	Statement	 
>1663	Statement	 
>1664	Statement	 
>1665	Statement	 
>1666	Statement	 
>1667	ExpressionStatement	 
>1668	CallExpression	S_StartSound ( player -> mo , sfx_sawhit )
>1669	ArgumentList	player -> mo
>1670	Argument	sfx_sawhit
>1671	Identifier	sfx_sawhit
>1672	Argument	player -> mo
>1673	PtrMemberAccess	player -> mo
>1674	Identifier	mo
>1675	Identifier	player
>1676	Callee	S_StartSound
>1677	Identifier	S_StartSound
>1678	Statement	 
>1679	Statement	 
>1680	Statement	 
>1681	Statement	 
>1682	Statement	 
>1683	Statement	 
>1684	Statement	 
>1685	Statement	 
>1686	Statement	 
>1687	Statement	 
>1688	Statement	 
>1689	Statement	 
>1690	Statement	 
>1691	Statement	 
>1692	Statement	 
>1693	Statement	 
>1694	Statement	 
>1695	Statement	 
>1696	Statement	 
>1697	Statement	 
>1698	CompoundStatement	 
>1699	ReturnStatement	 
>1700	ExpressionStatement	 
>1701	CallExpression	S_StartSound ( player -> mo , sfx_sawful )
>1702	ArgumentList	player -> mo
>1703	Argument	sfx_sawful
>1704	Identifier	sfx_sawful
>1705	Argument	player -> mo
>1706	PtrMemberAccess	player -> mo
>1707	Identifier	mo
>1708	Identifier	player
>1709	Callee	S_StartSound
>1710	Identifier	S_StartSound
>1711	Statement	 
>1712	Statement	 
>1713	Statement	 
>1714	Statement	 
>1715	Statement	 
>1716	Statement	 
>1717	Statement	 
>1718	Statement	 
>1719	Statement	 
>1720	Statement	 
>1721	Statement	 
>1722	Statement	 
>1723	Statement	 
>1724	Statement	 
>1725	Statement	 
>1726	Statement	 
>1727	Statement	 
>1728	Statement	 
>1729	Statement	 
>1730	Statement	 
>1731	Statement	 
>1732	Statement	 
>1733	Statement	 
>1734	Statement	 
>1735	Statement	 
>1736	Statement	 
>1737	Statement	 
>1738	Statement	 
>1739	ExpressionStatement	 
>1740	CallExpression	P_LineAttack ( player -> mo , angle , MELEERANGE + 1 , slope , damage )
>1741	ArgumentList	player -> mo
>1742	Argument	damage
>1743	Identifier	damage
>1744	Argument	slope
>1745	Identifier	slope
>1746	Argument	MELEERANGE + 1
>1747	AdditiveExpression	MELEERANGE + 1
>1748	PrimaryExpression	1
>1749	Identifier	MELEERANGE
>1750	Argument	angle
>1751	Identifier	angle
>1752	Argument	player -> mo
>1753	PtrMemberAccess	player -> mo
>1754	Identifier	mo
>1755	Identifier	player
>1756	Callee	P_LineAttack
>1757	Identifier	P_LineAttack
>1758	ExpressionStatement	 
>1759	AssignmentExpr	slope = P_AimLineAttack ( player -> mo , angle , MELEERANGE + 1 )
>1760	CallExpression	P_AimLineAttack ( player -> mo , angle , MELEERANGE + 1 )
>1761	ArgumentList	player -> mo
>1762	Argument	MELEERANGE + 1
>1763	AdditiveExpression	MELEERANGE + 1
>1764	PrimaryExpression	1
>1765	Identifier	MELEERANGE
>1766	Argument	angle
>1767	Identifier	angle
>1768	Argument	player -> mo
>1769	PtrMemberAccess	player -> mo
>1770	Identifier	mo
>1771	Identifier	player
>1772	Callee	P_AimLineAttack
>1773	Identifier	P_AimLineAttack
>1774	Identifier	slope
>1775	ExpressionStatement	 
>1776	AssignmentExpr	angle += ( P_Random ( ) - P_Random ( ) ) << 18
>1777	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 18
>1778	PrimaryExpression	18
>1779	AdditiveExpression	P_Random ( ) - P_Random ( )
>1780	CallExpression	P_Random ( )
>1781	ArgumentList	 
>1782	Callee	P_Random
>1783	Identifier	P_Random
>1784	CallExpression	P_Random ( )
>1785	ArgumentList	 
>1786	Callee	P_Random
>1787	Identifier	P_Random
>1788	Identifier	angle
>1789	ExpressionStatement	 
>1790	AssignmentExpr	angle = player -> mo -> angle
>1791	PtrMemberAccess	player -> mo -> angle
>1792	Identifier	angle
>1793	PtrMemberAccess	player -> mo
>1794	Identifier	mo
>1795	Identifier	player
>1796	Identifier	angle
>1797	ExpressionStatement	 
>1798	AssignmentExpr	damage = 2 * ( P_Random ( ) % 10 + 1 )
>1799	MultiplicativeExpression	2 * ( P_Random ( ) % 10 + 1 )
>1800	AdditiveExpression	P_Random ( ) % 10 + 1
>1801	PrimaryExpression	1
>1802	MultiplicativeExpression	P_Random ( ) % 10
>1803	PrimaryExpression	10
>1804	CallExpression	P_Random ( )
>1805	ArgumentList	 
>1806	Callee	P_Random
>1807	Identifier	P_Random
>1808	PrimaryExpression	2
>1809	Identifier	damage
>1810	IdentifierDeclStatement	 
>1811	IdentifierDecl	slope
>1812	Identifier	slope
>1813	IdentifierDeclType	int
>1814	IdentifierDeclStatement	 
>1815	IdentifierDecl	damage
>1816	Identifier	damage
>1817	IdentifierDeclType	int
>1818	IdentifierDeclStatement	 
>1819	IdentifierDecl	angle
>1820	Identifier	angle
>1821	IdentifierDeclType	angle_t
>1844	FunctionDef	A_FireMissile (player_t * player , pspdef_t * psp)
>1845	ParameterList	player_t * player , pspdef_t * psp
>1846	Parameter	 
>1847	Identifier	psp
>1848	ParameterType	pspdef_t *
>1849	Parameter	 
>1850	Identifier	player
>1851	ParameterType	player_t *
>1852	ReturnType	void
>1853	CompoundStatement	 
>1854	CompoundStatement	 
>1855	Statement	 
>1856	Statement	 
>1857	Statement	 
>1858	Statement	 
>1859	Statement	 
>1860	Statement	 
>1861	Statement	 
>1862	Statement	 
>1863	Statement	 
>1864	ExpressionStatement	 
>1865	CallExpression	P_SpawnPlayerMissile ( player -> mo , MT_ROCKET )
>1866	ArgumentList	player -> mo
>1867	Argument	MT_ROCKET
>1868	Identifier	MT_ROCKET
>1869	Argument	player -> mo
>1870	PtrMemberAccess	player -> mo
>1871	Identifier	mo
>1872	Identifier	player
>1873	Callee	P_SpawnPlayerMissile
>1874	Identifier	P_SpawnPlayerMissile
>1875	IfStatement	if ( ( player -> cheats & CF_INFAMMO ) == false )
>1876	CompoundStatement	 
>1877	ExpressionStatement	 
>1878	IncDecOp	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] --
>1879	IncDec	--
>1880	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>1881	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>1882	Identifier	ammo
>1883	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>1884	PtrMemberAccess	player -> readyweapon
>1885	Identifier	readyweapon
>1886	Identifier	player
>1887	Identifier	weaponinfo
>1888	PtrMemberAccess	player -> ammo
>1889	Identifier	ammo
>1890	Identifier	player
>1891	Condition	 
>1892	EqualityExpression	( player -> cheats & CF_INFAMMO ) == false
>1893	Identifier	false
>1894	BitAndExpression	player -> cheats & CF_INFAMMO
>1895	Identifier	CF_INFAMMO
>1896	PtrMemberAccess	player -> cheats
>1897	Identifier	cheats
>1898	Identifier	player
>1922	FunctionDef	A_FireBFG (player_t * player , pspdef_t * psp)
>1923	ParameterList	player_t * player , pspdef_t * psp
>1924	Parameter	 
>1925	Identifier	psp
>1926	ParameterType	pspdef_t *
>1927	Parameter	 
>1928	Identifier	player
>1929	ParameterType	player_t *
>1930	ReturnType	void
>1931	CompoundStatement	 
>1932	CompoundStatement	 
>1933	Statement	 
>1934	Statement	 
>1935	Statement	 
>1936	Statement	 
>1937	Statement	 
>1938	Statement	 
>1939	Statement	 
>1940	Statement	 
>1941	Statement	 
>1942	ExpressionStatement	 
>1943	CallExpression	P_SpawnPlayerMissile ( player -> mo , MT_BFG )
>1944	ArgumentList	player -> mo
>1945	Argument	MT_BFG
>1946	Identifier	MT_BFG
>1947	Argument	player -> mo
>1948	PtrMemberAccess	player -> mo
>1949	Identifier	mo
>1950	Identifier	player
>1951	Callee	P_SpawnPlayerMissile
>1952	Identifier	P_SpawnPlayerMissile
>1953	IfStatement	if ( ( player -> cheats & CF_INFAMMO ) == false )
>1954	CompoundStatement	 
>1955	ExpressionStatement	 
>1956	AssignmentExpr	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] -= BFGCELLS
>1957	Identifier	BFGCELLS
>1958	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>1959	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>1960	Identifier	ammo
>1961	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>1962	PtrMemberAccess	player -> readyweapon
>1963	Identifier	readyweapon
>1964	Identifier	player
>1965	Identifier	weaponinfo
>1966	PtrMemberAccess	player -> ammo
>1967	Identifier	ammo
>1968	Identifier	player
>1969	Condition	 
>1970	EqualityExpression	( player -> cheats & CF_INFAMMO ) == false
>1971	Identifier	false
>1972	BitAndExpression	player -> cheats & CF_INFAMMO
>1973	Identifier	CF_INFAMMO
>1974	PtrMemberAccess	player -> cheats
>1975	Identifier	cheats
>1976	Identifier	player
>2001	FunctionDef	A_FirePlasma (player_t * player , pspdef_t * psp)
>2002	ParameterList	player_t * player , pspdef_t * psp
>2003	Parameter	 
>2004	Identifier	psp
>2005	ParameterType	pspdef_t *
>2006	Parameter	 
>2007	Identifier	player
>2008	ParameterType	player_t *
>2009	ReturnType	void
>2010	CompoundStatement	 
>2011	CompoundStatement	 
>2012	Statement	 
>2013	Statement	 
>2014	Statement	 
>2015	Statement	 
>2016	Statement	 
>2017	Statement	 
>2018	Statement	 
>2019	Statement	 
>2020	Statement	 
>2021	ExpressionStatement	 
>2022	CallExpression	P_SpawnPlayerMissile ( player -> mo , MT_PLASMA )
>2023	ArgumentList	player -> mo
>2024	Argument	MT_PLASMA
>2025	Identifier	MT_PLASMA
>2026	Argument	player -> mo
>2027	PtrMemberAccess	player -> mo
>2028	Identifier	mo
>2029	Identifier	player
>2030	Callee	P_SpawnPlayerMissile
>2031	Identifier	P_SpawnPlayerMissile
>2032	ExpressionStatement	 
>2033	CallExpression	P_SetPsprite ( player , ps_flash , ( statenum_t ) ( weaponinfo [ player -> readyweapon ] . flashstate + ( P_Random ( ) & \
>2034	ArgumentList	player
>2035	Argument	( statenum_t ) ( weaponinfo [ player -> readyweapon ] . flashstate + ( P_Random ( ) & 1 ) )
>2036	CastExpression	( statenum_t ) ( weaponinfo [ player -> readyweapon ] . flashstate + ( P_Random ( ) & 1 ) )
>2037	AdditiveExpression	weaponinfo [ player -> readyweapon ] . flashstate + ( P_Random ( ) & 1 )
>2038	BitAndExpression	P_Random ( ) & 1
>2039	PrimaryExpression	1
>2040	CallExpression	P_Random ( )
>2041	ArgumentList	 
>2042	Callee	P_Random
>2043	Identifier	P_Random
>2044	MemberAccess	weaponinfo [ player -> readyweapon ] . flashstate
>2045	Identifier	flashstate
>2046	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2047	PtrMemberAccess	player -> readyweapon
>2048	Identifier	readyweapon
>2049	Identifier	player
>2050	Identifier	weaponinfo
>2051	CastTarget	statenum_t
>2052	Argument	ps_flash
>2053	Identifier	ps_flash
>2054	Argument	player
>2055	Identifier	player
>2056	Callee	P_SetPsprite
>2057	Identifier	P_SetPsprite
>2058	IfStatement	if ( ( player -> cheats & CF_INFAMMO ) == false )
>2059	CompoundStatement	 
>2060	ExpressionStatement	 
>2061	IncDecOp	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] --
>2062	IncDec	--
>2063	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>2064	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>2065	Identifier	ammo
>2066	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2067	PtrMemberAccess	player -> readyweapon
>2068	Identifier	readyweapon
>2069	Identifier	player
>2070	Identifier	weaponinfo
>2071	PtrMemberAccess	player -> ammo
>2072	Identifier	ammo
>2073	Identifier	player
>2074	Condition	 
>2075	EqualityExpression	( player -> cheats & CF_INFAMMO ) == false
>2076	Identifier	false
>2077	BitAndExpression	player -> cheats & CF_INFAMMO
>2078	Identifier	CF_INFAMMO
>2079	PtrMemberAccess	player -> cheats
>2080	Identifier	cheats
>2081	Identifier	player
>2108	FunctionDef	P_BulletSlope (mobj_t * mo)
>2109	ParameterList	mobj_t * mo
>2110	Parameter	 
>2111	Identifier	mo
>2112	ParameterType	mobj_t *
>2113	ReturnType	void
>2114	CompoundStatement	 
>2115	CompoundStatement	 
>2116	CompoundStatement	 
>2117	ExpressionStatement	 
>2118	AssignmentExpr	g -> bulletslope = P_AimLineAttack ( mo , an , 16 * 64 * FRACUNIT )
>2119	CallExpression	P_AimLineAttack ( mo , an , 16 * 64 * FRACUNIT )
>2120	ArgumentList	mo
>2121	Argument	16 * 64 * FRACUNIT
>2122	MultiplicativeExpression	16 * 64 * FRACUNIT
>2123	MultiplicativeExpression	64 * FRACUNIT
>2124	Identifier	FRACUNIT
>2125	PrimaryExpression	64
>2126	PrimaryExpression	16
>2127	Argument	an
>2128	Identifier	an
>2129	Argument	mo
>2130	Identifier	mo
>2131	Callee	P_AimLineAttack
>2132	Identifier	P_AimLineAttack
>2133	PtrMemberAccess	g -> bulletslope
>2134	Identifier	bulletslope
>2135	Identifier	g
>2136	Statement	 
>2137	ExpressionStatement	 
>2138	AssignmentExpr	an -= 2 << 26
>2139	ShiftExpression	2 << 26
>2140	PrimaryExpression	26
>2141	PrimaryExpression	2
>2142	Identifier	an
>2143	Statement	 
>2144	Statement	 
>2145	Statement	 
>2146	Statement	 
>2147	Statement	 
>2148	Statement	 
>2149	Statement	 
>2150	Statement	 
>2151	ExpressionStatement	 
>2152	AssignmentExpr	g -> bulletslope = P_AimLineAttack ( mo , an , 16 * 64 * FRACUNIT )
>2153	CallExpression	P_AimLineAttack ( mo , an , 16 * 64 * FRACUNIT )
>2154	ArgumentList	mo
>2155	Argument	16 * 64 * FRACUNIT
>2156	MultiplicativeExpression	16 * 64 * FRACUNIT
>2157	MultiplicativeExpression	64 * FRACUNIT
>2158	Identifier	FRACUNIT
>2159	PrimaryExpression	64
>2160	PrimaryExpression	16
>2161	Argument	an
>2162	Identifier	an
>2163	Argument	mo
>2164	Identifier	mo
>2165	Callee	P_AimLineAttack
>2166	Identifier	P_AimLineAttack
>2167	PtrMemberAccess	g -> bulletslope
>2168	Identifier	bulletslope
>2169	Identifier	g
>2170	Statement	 
>2171	ExpressionStatement	 
>2172	AssignmentExpr	an += 1 << 26
>2173	ShiftExpression	1 << 26
>2174	PrimaryExpression	26
>2175	PrimaryExpression	1
>2176	Identifier	an
>2177	Statement	 
>2178	Statement	 
>2179	Statement	 
>2180	Statement	 
>2181	Statement	 
>2182	Statement	 
>2183	Statement	 
>2184	Statement	 
>2185	ExpressionStatement	 
>2186	AssignmentExpr	g -> bulletslope = P_AimLineAttack ( mo , an , 16 * 64 * FRACUNIT )
>2187	CallExpression	P_AimLineAttack ( mo , an , 16 * 64 * FRACUNIT )
>2188	ArgumentList	mo
>2189	Argument	16 * 64 * FRACUNIT
>2190	MultiplicativeExpression	16 * 64 * FRACUNIT
>2191	MultiplicativeExpression	64 * FRACUNIT
>2192	Identifier	FRACUNIT
>2193	PrimaryExpression	64
>2194	PrimaryExpression	16
>2195	Argument	an
>2196	Identifier	an
>2197	Argument	mo
>2198	Identifier	mo
>2199	Callee	P_AimLineAttack
>2200	Identifier	P_AimLineAttack
>2201	PtrMemberAccess	g -> bulletslope
>2202	Identifier	bulletslope
>2203	Identifier	g
>2204	Statement	 
>2205	ExpressionStatement	 
>2206	AssignmentExpr	an = mo -> angle
>2207	PtrMemberAccess	mo -> angle
>2208	Identifier	angle
>2209	Identifier	mo
>2210	Identifier	an
>2211	IdentifierDeclStatement	 
>2212	IdentifierDecl	an
>2213	Identifier	an
>2214	IdentifierDeclType	angle_t
>2227	FunctionDef	P_GunShot (mobj_t * mo , qboolean accurate)
>2228	ParameterList	mobj_t * mo , qboolean accurate
>2229	Parameter	 
>2230	Identifier	accurate
>2231	ParameterType	qboolean
>2232	Parameter	 
>2233	Identifier	mo
>2234	ParameterType	mobj_t *
>2235	ReturnType	void
>2236	CompoundStatement	 
>2237	ExpressionStatement	 
>2238	Statement	 
>2239	Statement	 
>2240	Statement	 
>2241	Statement	 
>2242	Statement	 
>2243	Statement	 
>2244	Statement	 
>2245	Statement	 
>2246	Statement	 
>2247	Statement	 
>2248	Statement	 
>2249	Statement	 
>2250	Statement	 
>2251	Statement	 
>2252	Statement	 
>2253	IfStatement	if ( ! accurate )
>2254	ExpressionStatement	 
>2255	AssignmentExpr	angle += ( P_Random ( ) - P_Random ( ) ) << 18
>2256	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 18
>2257	PrimaryExpression	18
>2258	AdditiveExpression	P_Random ( ) - P_Random ( )
>2259	CallExpression	P_Random ( )
>2260	ArgumentList	 
>2261	Callee	P_Random
>2262	Identifier	P_Random
>2263	CallExpression	P_Random ( )
>2264	ArgumentList	 
>2265	Callee	P_Random
>2266	Identifier	P_Random
>2267	Identifier	angle
>2268	Condition	 
>2269	UnaryOp	! accurate
>2270	Identifier	accurate
>2271	UnaryOperator	!
>2272	ExpressionStatement	 
>2273	AssignmentExpr	angle = mo -> angle
>2274	PtrMemberAccess	mo -> angle
>2275	Identifier	angle
>2276	Identifier	mo
>2277	Identifier	angle
>2278	ExpressionStatement	 
>2279	AssignmentExpr	damage = 5 * ( P_Random ( ) % 3 + 1 )
>2280	MultiplicativeExpression	5 * ( P_Random ( ) % 3 + 1 )
>2281	AdditiveExpression	P_Random ( ) % 3 + 1
>2282	PrimaryExpression	1
>2283	MultiplicativeExpression	P_Random ( ) % 3
>2284	PrimaryExpression	3
>2285	CallExpression	P_Random ( )
>2286	ArgumentList	 
>2287	Callee	P_Random
>2288	Identifier	P_Random
>2289	PrimaryExpression	5
>2290	Identifier	damage
>2291	IdentifierDeclStatement	 
>2292	IdentifierDecl	damage
>2293	Identifier	damage
>2294	IdentifierDeclType	int
>2295	IdentifierDeclStatement	 
>2296	IdentifierDecl	angle
>2297	Identifier	angle
>2298	IdentifierDeclType	angle_t
>2309	FunctionDef	A_FirePistol (player_t * player , pspdef_t * psp)
>2310	ParameterList	player_t * player , pspdef_t * psp
>2311	Parameter	 
>2312	Identifier	psp
>2313	ParameterType	pspdef_t *
>2314	Parameter	 
>2315	Identifier	player
>2316	ParameterType	player_t *
>2317	ReturnType	void
>2318	CompoundStatement	 
>2319	CompoundStatement	 
>2320	Statement	 
>2321	Statement	 
>2322	Statement	 
>2323	Statement	 
>2324	Statement	 
>2325	Statement	 
>2326	Statement	 
>2327	Statement	 
>2328	Statement	 
>2329	ExpressionStatement	 
>2330	CallExpression	P_GunShot ( player -> mo , ! player -> refire )
>2331	ArgumentList	player -> mo
>2332	Argument	! player -> refire
>2333	UnaryOp	! player -> refire
>2334	PtrMemberAccess	player -> refire
>2335	Identifier	refire
>2336	Identifier	player
>2337	UnaryOperator	!
>2338	Argument	player -> mo
>2339	PtrMemberAccess	player -> mo
>2340	Identifier	mo
>2341	Identifier	player
>2342	Callee	P_GunShot
>2343	Identifier	P_GunShot
>2344	ExpressionStatement	 
>2345	CallExpression	P_BulletSlope ( player -> mo )
>2346	ArgumentList	player -> mo
>2347	Argument	player -> mo
>2348	PtrMemberAccess	player -> mo
>2349	Identifier	mo
>2350	Identifier	player
>2351	Callee	P_BulletSlope
>2352	Identifier	P_BulletSlope
>2353	ExpressionStatement	 
>2354	CallExpression	P_SetPsprite ( player , ps_flash , ( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate )
>2355	ArgumentList	player
>2356	Argument	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>2357	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>2358	MemberAccess	weaponinfo [ player -> readyweapon ] . flashstate
>2359	Identifier	flashstate
>2360	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2361	PtrMemberAccess	player -> readyweapon
>2362	Identifier	readyweapon
>2363	Identifier	player
>2364	Identifier	weaponinfo
>2365	CastTarget	statenum_t
>2366	Argument	ps_flash
>2367	Identifier	ps_flash
>2368	Argument	player
>2369	Identifier	player
>2370	Callee	P_SetPsprite
>2371	Identifier	P_SetPsprite
>2372	IfStatement	if ( ( player -> cheats & CF_INFAMMO ) == false )
>2373	CompoundStatement	 
>2374	ExpressionStatement	 
>2375	IncDecOp	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] --
>2376	IncDec	--
>2377	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>2378	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>2379	Identifier	ammo
>2380	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2381	PtrMemberAccess	player -> readyweapon
>2382	Identifier	readyweapon
>2383	Identifier	player
>2384	Identifier	weaponinfo
>2385	PtrMemberAccess	player -> ammo
>2386	Identifier	ammo
>2387	Identifier	player
>2388	Condition	 
>2389	EqualityExpression	( player -> cheats & CF_INFAMMO ) == false
>2390	Identifier	false
>2391	BitAndExpression	player -> cheats & CF_INFAMMO
>2392	Identifier	CF_INFAMMO
>2393	PtrMemberAccess	player -> cheats
>2394	Identifier	cheats
>2395	Identifier	player
>2396	ExpressionStatement	 
>2397	CallExpression	P_SetMobjState ( player -> mo , S_PLAY_ATK2 )
>2398	ArgumentList	player -> mo
>2399	Argument	S_PLAY_ATK2
>2400	Identifier	S_PLAY_ATK2
>2401	Argument	player -> mo
>2402	PtrMemberAccess	player -> mo
>2403	Identifier	mo
>2404	Identifier	player
>2405	Callee	P_SetMobjState
>2406	Identifier	P_SetMobjState
>2407	ExpressionStatement	 
>2408	CallExpression	S_StartSound ( player -> mo , sfx_pistol )
>2409	ArgumentList	player -> mo
>2410	Argument	sfx_pistol
>2411	Identifier	sfx_pistol
>2412	Argument	player -> mo
>2413	PtrMemberAccess	player -> mo
>2414	Identifier	mo
>2415	Identifier	player
>2416	Callee	S_StartSound
>2417	Identifier	S_StartSound
>2418	Statement	 
>2419	Statement	 
>2420	Statement	 
>2421	Statement	 
>2422	Statement	 
>2423	Statement	 
>2424	Statement	 
>2425	Statement	 
>2426	Statement	 
>2427	Statement	 
>2428	Statement	 
>2429	Statement	 
>2430	Statement	 
>2431	Statement	 
>2432	Statement	 
>2433	Statement	 
>2434	Statement	 
>2435	Statement	 
>2436	Statement	 
>2437	Statement	 
>2465	FunctionDef	A_FireShotgun (player_t * player , pspdef_t * psp)
>2466	ParameterList	player_t * player , pspdef_t * psp
>2467	Parameter	 
>2468	Identifier	psp
>2469	ParameterType	pspdef_t *
>2470	Parameter	 
>2471	Identifier	player
>2472	ParameterType	player_t *
>2473	ReturnType	void
>2474	CompoundStatement	 
>2475	CompoundStatement	 
>2476	Statement	 
>2477	Statement	 
>2478	Statement	 
>2479	Statement	 
>2480	Statement	 
>2481	Statement	 
>2482	Statement	 
>2483	Statement	 
>2484	Statement	 
>2485	ForStatement	for ( i = 0 ; i < 7 ; i ++ )
>2486	ExpressionStatement	 
>2487	CallExpression	P_GunShot ( player -> mo , false )
>2488	ArgumentList	player -> mo
>2489	Argument	false
>2490	Identifier	false
>2491	Argument	player -> mo
>2492	PtrMemberAccess	player -> mo
>2493	Identifier	mo
>2494	Identifier	player
>2495	Callee	P_GunShot
>2496	Identifier	P_GunShot
>2497	IncDecOp	 
>2498	IncDec	++
>2499	Identifier	i
>2500	Condition	 
>2501	RelationalExpression	i < 7
>2502	PrimaryExpression	7
>2503	Identifier	i
>2504	ForInit	 
>2505	AssignmentExpr	i = 0
>2506	PrimaryExpression	0
>2507	Identifier	i
>2508	ExpressionStatement	 
>2509	CallExpression	P_BulletSlope ( player -> mo )
>2510	ArgumentList	player -> mo
>2511	Argument	player -> mo
>2512	PtrMemberAccess	player -> mo
>2513	Identifier	mo
>2514	Identifier	player
>2515	Callee	P_BulletSlope
>2516	Identifier	P_BulletSlope
>2517	ExpressionStatement	 
>2518	CallExpression	P_SetPsprite ( player , ps_flash , ( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate )
>2519	ArgumentList	player
>2520	Argument	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>2521	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>2522	MemberAccess	weaponinfo [ player -> readyweapon ] . flashstate
>2523	Identifier	flashstate
>2524	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2525	PtrMemberAccess	player -> readyweapon
>2526	Identifier	readyweapon
>2527	Identifier	player
>2528	Identifier	weaponinfo
>2529	CastTarget	statenum_t
>2530	Argument	ps_flash
>2531	Identifier	ps_flash
>2532	Argument	player
>2533	Identifier	player
>2534	Callee	P_SetPsprite
>2535	Identifier	P_SetPsprite
>2536	IfStatement	if ( ( player -> cheats & CF_INFAMMO ) == false )
>2537	CompoundStatement	 
>2538	ExpressionStatement	 
>2539	IncDecOp	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] --
>2540	IncDec	--
>2541	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>2542	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>2543	Identifier	ammo
>2544	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2545	PtrMemberAccess	player -> readyweapon
>2546	Identifier	readyweapon
>2547	Identifier	player
>2548	Identifier	weaponinfo
>2549	PtrMemberAccess	player -> ammo
>2550	Identifier	ammo
>2551	Identifier	player
>2552	Condition	 
>2553	EqualityExpression	( player -> cheats & CF_INFAMMO ) == false
>2554	Identifier	false
>2555	BitAndExpression	player -> cheats & CF_INFAMMO
>2556	Identifier	CF_INFAMMO
>2557	PtrMemberAccess	player -> cheats
>2558	Identifier	cheats
>2559	Identifier	player
>2560	ExpressionStatement	 
>2561	CallExpression	P_SetMobjState ( player -> mo , S_PLAY_ATK2 )
>2562	ArgumentList	player -> mo
>2563	Argument	S_PLAY_ATK2
>2564	Identifier	S_PLAY_ATK2
>2565	Argument	player -> mo
>2566	PtrMemberAccess	player -> mo
>2567	Identifier	mo
>2568	Identifier	player
>2569	Callee	P_SetMobjState
>2570	Identifier	P_SetMobjState
>2571	ExpressionStatement	 
>2572	CallExpression	S_StartSound ( player -> mo , sfx_shotgn )
>2573	ArgumentList	player -> mo
>2574	Argument	sfx_shotgn
>2575	Identifier	sfx_shotgn
>2576	Argument	player -> mo
>2577	PtrMemberAccess	player -> mo
>2578	Identifier	mo
>2579	Identifier	player
>2580	Callee	S_StartSound
>2581	Identifier	S_StartSound
>2582	Statement	 
>2583	Statement	 
>2584	Statement	 
>2585	Statement	 
>2586	Statement	 
>2587	Statement	 
>2588	Statement	 
>2589	Statement	 
>2590	Statement	 
>2591	Statement	 
>2592	Statement	 
>2593	Statement	 
>2594	Statement	 
>2595	Statement	 
>2596	Statement	 
>2597	Statement	 
>2598	Statement	 
>2599	Statement	 
>2600	Statement	 
>2601	Statement	 
>2602	IdentifierDeclStatement	 
>2603	IdentifierDecl	i
>2604	Identifier	i
>2605	IdentifierDeclType	int
>2633	FunctionDef	A_FireShotgun2 (player_t * player , pspdef_t * psp)
>2634	ParameterList	player_t * player , pspdef_t * psp
>2635	Parameter	 
>2636	Identifier	psp
>2637	ParameterType	pspdef_t *
>2638	Parameter	 
>2639	Identifier	player
>2640	ParameterType	player_t *
>2641	ReturnType	void
>2642	CompoundStatement	 
>2643	CompoundStatement	 
>2644	Statement	 
>2645	Statement	 
>2646	Statement	 
>2647	Statement	 
>2648	Statement	 
>2649	Statement	 
>2650	Statement	 
>2651	Statement	 
>2652	Statement	 
>2653	ForStatement	for ( i = 0 ; i < 20 ; i ++ )
>2654	CompoundStatement	 
>2655	ExpressionStatement	 
>2656	Statement	 
>2657	Statement	 
>2658	Statement	 
>2659	Statement	 
>2660	Statement	 
>2661	Statement	 
>2662	Statement	 
>2663	Statement	 
>2664	Statement	 
>2665	Statement	 
>2666	Statement	 
>2667	Statement	 
>2668	Statement	 
>2669	Statement	 
>2670	Statement	 
>2671	Statement	 
>2672	Statement	 
>2673	Statement	 
>2674	Statement	 
>2675	Statement	 
>2676	Statement	 
>2677	Statement	 
>2678	Statement	 
>2679	Statement	 
>2680	Statement	 
>2681	Statement	 
>2682	Statement	 
>2683	Statement	 
>2684	Statement	 
>2685	Statement	 
>2686	Statement	 
>2687	ExpressionStatement	 
>2688	AssignmentExpr	angle += ( P_Random ( ) - P_Random ( ) ) << 19
>2689	ShiftExpression	( P_Random ( ) - P_Random ( ) ) << 19
>2690	PrimaryExpression	19
>2691	AdditiveExpression	P_Random ( ) - P_Random ( )
>2692	CallExpression	P_Random ( )
>2693	ArgumentList	 
>2694	Callee	P_Random
>2695	Identifier	P_Random
>2696	CallExpression	P_Random ( )
>2697	ArgumentList	 
>2698	Callee	P_Random
>2699	Identifier	P_Random
>2700	Identifier	angle
>2701	ExpressionStatement	 
>2702	AssignmentExpr	angle = player -> mo -> angle
>2703	PtrMemberAccess	player -> mo -> angle
>2704	Identifier	angle
>2705	PtrMemberAccess	player -> mo
>2706	Identifier	mo
>2707	Identifier	player
>2708	Identifier	angle
>2709	ExpressionStatement	 
>2710	AssignmentExpr	damage = 5 * ( P_Random ( ) % 3 + 1 )
>2711	MultiplicativeExpression	5 * ( P_Random ( ) % 3 + 1 )
>2712	AdditiveExpression	P_Random ( ) % 3 + 1
>2713	PrimaryExpression	1
>2714	MultiplicativeExpression	P_Random ( ) % 3
>2715	PrimaryExpression	3
>2716	CallExpression	P_Random ( )
>2717	ArgumentList	 
>2718	Callee	P_Random
>2719	Identifier	P_Random
>2720	PrimaryExpression	5
>2721	Identifier	damage
>2722	IncDecOp	 
>2723	IncDec	++
>2724	Identifier	i
>2725	Condition	 
>2726	RelationalExpression	i < 20
>2727	PrimaryExpression	20
>2728	Identifier	i
>2729	ForInit	 
>2730	AssignmentExpr	i = 0
>2731	PrimaryExpression	0
>2732	Identifier	i
>2733	ExpressionStatement	 
>2734	CallExpression	P_BulletSlope ( player -> mo )
>2735	ArgumentList	player -> mo
>2736	Argument	player -> mo
>2737	PtrMemberAccess	player -> mo
>2738	Identifier	mo
>2739	Identifier	player
>2740	Callee	P_BulletSlope
>2741	Identifier	P_BulletSlope
>2742	ExpressionStatement	 
>2743	CallExpression	P_SetPsprite ( player , ps_flash , ( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate )
>2744	ArgumentList	player
>2745	Argument	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>2746	CastExpression	( statenum_t ) weaponinfo [ player -> readyweapon ] . flashstate
>2747	MemberAccess	weaponinfo [ player -> readyweapon ] . flashstate
>2748	Identifier	flashstate
>2749	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2750	PtrMemberAccess	player -> readyweapon
>2751	Identifier	readyweapon
>2752	Identifier	player
>2753	Identifier	weaponinfo
>2754	CastTarget	statenum_t
>2755	Argument	ps_flash
>2756	Identifier	ps_flash
>2757	Argument	player
>2758	Identifier	player
>2759	Callee	P_SetPsprite
>2760	Identifier	P_SetPsprite
>2761	IfStatement	if ( ( player -> cheats & CF_INFAMMO ) == false )
>2762	CompoundStatement	 
>2763	ExpressionStatement	 
>2764	AssignmentExpr	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] -= 2
>2765	PrimaryExpression	2
>2766	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>2767	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>2768	Identifier	ammo
>2769	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2770	PtrMemberAccess	player -> readyweapon
>2771	Identifier	readyweapon
>2772	Identifier	player
>2773	Identifier	weaponinfo
>2774	PtrMemberAccess	player -> ammo
>2775	Identifier	ammo
>2776	Identifier	player
>2777	Condition	 
>2778	EqualityExpression	( player -> cheats & CF_INFAMMO ) == false
>2779	Identifier	false
>2780	BitAndExpression	player -> cheats & CF_INFAMMO
>2781	Identifier	CF_INFAMMO
>2782	PtrMemberAccess	player -> cheats
>2783	Identifier	cheats
>2784	Identifier	player
>2785	ExpressionStatement	 
>2786	CallExpression	P_SetMobjState ( player -> mo , S_PLAY_ATK2 )
>2787	ArgumentList	player -> mo
>2788	Argument	S_PLAY_ATK2
>2789	Identifier	S_PLAY_ATK2
>2790	Argument	player -> mo
>2791	PtrMemberAccess	player -> mo
>2792	Identifier	mo
>2793	Identifier	player
>2794	Callee	P_SetMobjState
>2795	Identifier	P_SetMobjState
>2796	ExpressionStatement	 
>2797	CallExpression	S_StartSound ( player -> mo , sfx_dshtgn )
>2798	ArgumentList	player -> mo
>2799	Argument	sfx_dshtgn
>2800	Identifier	sfx_dshtgn
>2801	Argument	player -> mo
>2802	PtrMemberAccess	player -> mo
>2803	Identifier	mo
>2804	Identifier	player
>2805	Callee	S_StartSound
>2806	Identifier	S_StartSound
>2807	Statement	 
>2808	Statement	 
>2809	Statement	 
>2810	Statement	 
>2811	Statement	 
>2812	Statement	 
>2813	Statement	 
>2814	Statement	 
>2815	Statement	 
>2816	Statement	 
>2817	Statement	 
>2818	Statement	 
>2819	Statement	 
>2820	Statement	 
>2821	Statement	 
>2822	Statement	 
>2823	Statement	 
>2824	Statement	 
>2825	Statement	 
>2826	Statement	 
>2827	IdentifierDeclStatement	 
>2828	IdentifierDecl	damage
>2829	Identifier	damage
>2830	IdentifierDeclType	int
>2831	IdentifierDeclStatement	 
>2832	IdentifierDecl	angle
>2833	Identifier	angle
>2834	IdentifierDeclType	angle_t
>2835	IdentifierDeclStatement	 
>2836	IdentifierDecl	i
>2837	Identifier	i
>2838	IdentifierDeclType	int
>2871	FunctionDef	A_FireCGun (player_t * player , pspdef_t * psp)
>2872	ParameterList	player_t * player , pspdef_t * psp
>2873	Parameter	 
>2874	Identifier	psp
>2875	ParameterType	pspdef_t *
>2876	Parameter	 
>2877	Identifier	player
>2878	ParameterType	player_t *
>2879	ReturnType	void
>2880	CompoundStatement	 
>2881	CompoundStatement	 
>2882	Statement	 
>2883	Statement	 
>2884	Statement	 
>2885	Statement	 
>2886	Statement	 
>2887	Statement	 
>2888	Statement	 
>2889	Statement	 
>2890	Statement	 
>2891	ExpressionStatement	 
>2892	CallExpression	P_GunShot ( player -> mo , ! player -> refire )
>2893	ArgumentList	player -> mo
>2894	Argument	! player -> refire
>2895	UnaryOp	! player -> refire
>2896	PtrMemberAccess	player -> refire
>2897	Identifier	refire
>2898	Identifier	player
>2899	UnaryOperator	!
>2900	Argument	player -> mo
>2901	PtrMemberAccess	player -> mo
>2902	Identifier	mo
>2903	Identifier	player
>2904	Callee	P_GunShot
>2905	Identifier	P_GunShot
>2906	ExpressionStatement	 
>2907	CallExpression	P_BulletSlope ( player -> mo )
>2908	ArgumentList	player -> mo
>2909	Argument	player -> mo
>2910	PtrMemberAccess	player -> mo
>2911	Identifier	mo
>2912	Identifier	player
>2913	Callee	P_BulletSlope
>2914	Identifier	P_BulletSlope
>2915	ExpressionStatement	 
>2916	Statement	 
>2917	Statement	 
>2918	Statement	 
>2919	Statement	 
>2920	Statement	 
>2921	Statement	 
>2922	Statement	 
>2923	Statement	 
>2924	Statement	 
>2925	Statement	 
>2926	Statement	 
>2927	Statement	 
>2928	Statement	 
>2929	Statement	 
>2930	Statement	 
>2931	Statement	 
>2932	Statement	 
>2933	Statement	 
>2934	Statement	 
>2935	Statement	 
>2936	Statement	 
>2937	Statement	 
>2938	Statement	 
>2939	Statement	 
>2940	Statement	 
>2941	Statement	 
>2942	Statement	 
>2943	Statement	 
>2944	Statement	 
>2945	Statement	 
>2946	Statement	 
>2947	Statement	 
>2948	Statement	 
>2949	IfStatement	if ( ( player -> cheats & CF_INFAMMO ) == false )
>2950	CompoundStatement	 
>2951	ExpressionStatement	 
>2952	IncDecOp	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] --
>2953	IncDec	--
>2954	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>2955	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>2956	Identifier	ammo
>2957	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2958	PtrMemberAccess	player -> readyweapon
>2959	Identifier	readyweapon
>2960	Identifier	player
>2961	Identifier	weaponinfo
>2962	PtrMemberAccess	player -> ammo
>2963	Identifier	ammo
>2964	Identifier	player
>2965	Condition	 
>2966	EqualityExpression	( player -> cheats & CF_INFAMMO ) == false
>2967	Identifier	false
>2968	BitAndExpression	player -> cheats & CF_INFAMMO
>2969	Identifier	CF_INFAMMO
>2970	PtrMemberAccess	player -> cheats
>2971	Identifier	cheats
>2972	Identifier	player
>2973	ExpressionStatement	 
>2974	CallExpression	P_SetMobjState ( player -> mo , S_PLAY_ATK2 )
>2975	ArgumentList	player -> mo
>2976	Argument	S_PLAY_ATK2
>2977	Identifier	S_PLAY_ATK2
>2978	Argument	player -> mo
>2979	PtrMemberAccess	player -> mo
>2980	Identifier	mo
>2981	Identifier	player
>2982	Callee	P_SetMobjState
>2983	Identifier	P_SetMobjState
>2984	IfStatement	if ( ! player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ] )
>2985	ReturnStatement	 
>2986	Condition	 
>2987	UnaryOp	! player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>2988	ArrayIndexing	player -> ammo [ weaponinfo [ player -> readyweapon ] . ammo ]
>2989	MemberAccess	weaponinfo [ player -> readyweapon ] . ammo
>2990	Identifier	ammo
>2991	ArrayIndexing	weaponinfo [ player -> readyweapon ]
>2992	PtrMemberAccess	player -> readyweapon
>2993	Identifier	readyweapon
>2994	Identifier	player
>2995	Identifier	weaponinfo
>2996	PtrMemberAccess	player -> ammo
>2997	Identifier	ammo
>2998	Identifier	player
>2999	UnaryOperator	!
>3000	ExpressionStatement	 
>3001	CallExpression	S_StartSound ( player -> mo , sfx_pistol )
>3002	ArgumentList	player -> mo
>3003	Argument	sfx_pistol
>3004	Identifier	sfx_pistol
>3005	Argument	player -> mo
>3006	PtrMemberAccess	player -> mo
>3007	Identifier	mo
>3008	Identifier	player
>3009	Callee	S_StartSound
>3010	Identifier	S_StartSound
>3011	Statement	 
>3012	Statement	 
>3013	Statement	 
>3014	Statement	 
>3015	Statement	 
>3016	Statement	 
>3017	Statement	 
>3018	Statement	 
>3019	Statement	 
>3020	Statement	 
>3021	Statement	 
>3022	Statement	 
>3023	Statement	 
>3024	Statement	 
>3025	Statement	 
>3026	Statement	 
>3027	Statement	 
>3028	Statement	 
>3029	Statement	 
>3030	Statement	 
>3056	FunctionDef	A_Light0 (player_t * player , pspdef_t * psp)
>3057	ParameterList	player_t * player , pspdef_t * psp
>3058	Parameter	 
>3059	Identifier	psp
>3060	ParameterType	pspdef_t *
>3061	Parameter	 
>3062	Identifier	player
>3063	ParameterType	player_t *
>3064	ReturnType	void
>3065	CompoundStatement	 
>3066	ExpressionStatement	 
>3067	AssignmentExpr	player -> extralight = 0
>3068	PrimaryExpression	0
>3069	PtrMemberAccess	player -> extralight
>3070	Identifier	extralight
>3071	Identifier	player
>3079	FunctionDef	A_Light1 (player_t * player , pspdef_t * psp)
>3080	ParameterList	player_t * player , pspdef_t * psp
>3081	Parameter	 
>3082	Identifier	psp
>3083	ParameterType	pspdef_t *
>3084	Parameter	 
>3085	Identifier	player
>3086	ParameterType	player_t *
>3087	ReturnType	void
>3088	CompoundStatement	 
>3089	ExpressionStatement	 
>3090	AssignmentExpr	player -> extralight = 1
>3091	PrimaryExpression	1
>3092	PtrMemberAccess	player -> extralight
>3093	Identifier	extralight
>3094	Identifier	player
>3102	FunctionDef	A_Light2 (player_t * player , pspdef_t * psp)
>3103	ParameterList	player_t * player , pspdef_t * psp
>3104	Parameter	 
>3105	Identifier	psp
>3106	ParameterType	pspdef_t *
>3107	Parameter	 
>3108	Identifier	player
>3109	ParameterType	player_t *
>3110	ReturnType	void
>3111	CompoundStatement	 
>3112	ExpressionStatement	 
>3113	AssignmentExpr	player -> extralight = 2
>3114	PrimaryExpression	2
>3115	PtrMemberAccess	player -> extralight
>3116	Identifier	extralight
>3117	Identifier	player
>3133	FunctionDef	A_BFGsound (player_t * player , pspdef_t * psp)
>3134	ParameterList	player_t * player , pspdef_t * psp
>3135	Parameter	 
>3136	Identifier	psp
>3137	ParameterType	pspdef_t *
>3138	Parameter	 
>3139	Identifier	player
>3140	ParameterType	player_t *
>3141	ReturnType	void
>3142	CompoundStatement	 
>3143	ExpressionStatement	 
>3144	CallExpression	S_StartSound ( player -> mo , sfx_bfg )
>3145	ArgumentList	player -> mo
>3146	Argument	sfx_bfg
>3147	Identifier	sfx_bfg
>3148	Argument	player -> mo
>3149	PtrMemberAccess	player -> mo
>3150	Identifier	mo
>3151	Identifier	player
>3152	Callee	S_StartSound
>3153	Identifier	S_StartSound
>3162	FunctionDef	P_SetupPsprites (player_t * player)
>3163	ParameterList	player_t * player
>3164	Parameter	 
>3165	Identifier	player
>3166	ParameterType	player_t *
>3167	ReturnType	void
>3168	CompoundStatement	 
>3169	ExpressionStatement	 
>3170	CallExpression	P_BringUpWeapon ( player )
>3171	ArgumentList	player
>3172	Argument	player
>3173	Identifier	player
>3174	Callee	P_BringUpWeapon
>3175	Identifier	P_BringUpWeapon
>3176	ExpressionStatement	 
>3177	AssignmentExpr	player -> pendingweapon = player -> readyweapon
>3178	PtrMemberAccess	player -> readyweapon
>3179	Identifier	readyweapon
>3180	Identifier	player
>3181	PtrMemberAccess	player -> pendingweapon
>3182	Identifier	pendingweapon
>3183	Identifier	player
>3184	ForStatement	for ( i = 0 ; i < NUMPSPRITES ; i ++ )
>3185	ExpressionStatement	 
>3186	AssignmentExpr	player -> psprites [ i ] . state = NULL
>3187	Identifier	NULL
>3188	MemberAccess	player -> psprites [ i ] . state
>3189	Identifier	state
>3190	ArrayIndexing	player -> psprites [ i ]
>3191	Identifier	i
>3192	PtrMemberAccess	player -> psprites
>3193	Identifier	psprites
>3194	Identifier	player
>3195	IncDecOp	 
>3196	IncDec	++
>3197	Identifier	i
>3198	Condition	 
>3199	RelationalExpression	i < NUMPSPRITES
>3200	Identifier	NUMPSPRITES
>3201	Identifier	i
>3202	ForInit	 
>3203	AssignmentExpr	i = 0
>3204	PrimaryExpression	0
>3205	Identifier	i
>3206	IdentifierDeclStatement	 
>3207	IdentifierDecl	i
>3208	Identifier	i
>3209	IdentifierDeclType	int
>3225	FunctionDef	P_MovePsprites (player_t * player)
>3226	ParameterList	player_t * player
>3227	Parameter	 
>3228	Identifier	player
>3229	ParameterType	player_t *
>3230	ReturnType	void
>3231	CompoundStatement	 
>3232	ExpressionStatement	 
>3233	AssignmentExpr	player -> psprites [ ps_flash ] . sy = player -> psprites [ ps_weapon ] . sy
>3234	MemberAccess	player -> psprites [ ps_weapon ] . sy
>3235	Identifier	sy
>3236	ArrayIndexing	player -> psprites [ ps_weapon ]
>3237	Identifier	ps_weapon
>3238	PtrMemberAccess	player -> psprites
>3239	Identifier	psprites
>3240	Identifier	player
>3241	MemberAccess	player -> psprites [ ps_flash ] . sy
>3242	Identifier	sy
>3243	ArrayIndexing	player -> psprites [ ps_flash ]
>3244	Identifier	ps_flash
>3245	PtrMemberAccess	player -> psprites
>3246	Identifier	psprites
>3247	Identifier	player
>3248	ExpressionStatement	 
>3249	AssignmentExpr	player -> psprites [ ps_flash ] . sx = player -> psprites [ ps_weapon ] . sx
>3250	MemberAccess	player -> psprites [ ps_weapon ] . sx
>3251	Identifier	sx
>3252	ArrayIndexing	player -> psprites [ ps_weapon ]
>3253	Identifier	ps_weapon
>3254	PtrMemberAccess	player -> psprites
>3255	Identifier	psprites
>3256	Identifier	player
>3257	MemberAccess	player -> psprites [ ps_flash ] . sx
>3258	Identifier	sx
>3259	ArrayIndexing	player -> psprites [ ps_flash ]
>3260	Identifier	ps_flash
>3261	PtrMemberAccess	player -> psprites
>3262	Identifier	psprites
>3263	Identifier	player
>3264	ForStatement	for ( i = 0 ; i < NUMPSPRITES ; i ++ , psp ++ )
>3265	CompoundStatement	 
>3266	IfStatement	if ( ( state = psp -> state ) )
>3267	CompoundStatement	 
>3268	IfStatement	if ( psp -> tics != - 1 )
>3269	CompoundStatement	 
>3270	IfStatement	if ( ! psp -> tics )
>3271	ExpressionStatement	 
>3272	CallExpression	P_SetPsprite ( player , i , psp -> state -> nextstate )
>3273	ArgumentList	player
>3274	Argument	psp -> state -> nextstate
>3275	PtrMemberAccess	psp -> state -> nextstate
>3276	Identifier	nextstate
>3277	PtrMemberAccess	psp -> state
>3278	Identifier	state
>3279	Identifier	psp
>3280	Argument	i
>3281	Identifier	i
>3282	Argument	player
>3283	Identifier	player
>3284	Callee	P_SetPsprite
>3285	Identifier	P_SetPsprite
>3286	Condition	 
>3287	UnaryOp	! psp -> tics
>3288	PtrMemberAccess	psp -> tics
>3289	Identifier	tics
>3290	Identifier	psp
>3291	UnaryOperator	!
>3292	ExpressionStatement	 
>3293	IncDecOp	psp -> tics --
>3294	IncDec	--
>3295	PtrMemberAccess	psp -> tics
>3296	Identifier	tics
>3297	Identifier	psp
>3298	Condition	 
>3299	EqualityExpression	psp -> tics != - 1
>3300	UnaryOp	- 1
>3301	PrimaryExpression	1
>3302	UnaryOperator	-
>3303	PtrMemberAccess	psp -> tics
>3304	Identifier	tics
>3305	Identifier	psp
>3306	Condition	 
>3307	AssignmentExpr	state = psp -> state
>3308	PtrMemberAccess	psp -> state
>3309	Identifier	state
>3310	Identifier	psp
>3311	Identifier	state
>3312	Expression	 
>3313	IncDecOp	psp ++
>3314	IncDec	++
>3315	Identifier	psp
>3316	IncDecOp	i ++
>3317	IncDec	++
>3318	Identifier	i
>3319	Condition	 
>3320	RelationalExpression	i < NUMPSPRITES
>3321	Identifier	NUMPSPRITES
>3322	Identifier	i
>3323	ForInit	 
>3324	AssignmentExpr	i = 0
>3325	PrimaryExpression	0
>3326	Identifier	i
>3327	ExpressionStatement	 
>3328	AssignmentExpr	psp = & player -> psprites [ 0 ]
>3329	UnaryOp	& player -> psprites [ 0 ]
>3330	ArrayIndexing	player -> psprites [ 0 ]
>3331	PrimaryExpression	0
>3332	PtrMemberAccess	player -> psprites
>3333	Identifier	psprites
>3334	Identifier	player
>3335	UnaryOperator	&
>3336	Identifier	psp
>3337	IdentifierDeclStatement	 
>3338	IdentifierDecl	* state
>3339	Identifier	state
>3340	IdentifierDeclType	const state_t *
>3341	IdentifierDeclStatement	 
>3342	IdentifierDecl	* psp
>3343	Identifier	psp
>3344	IdentifierDeclType	pspdef_t *
>3345	IdentifierDeclStatement	 
>3346	IdentifierDecl	i
>3347	Identifier	i
>3348	IdentifierDeclType	int
<77=89,88,78
<78=85,82,79
<79=81,80
<82=84,83
<85=87,86
<89=208,204,194,90
<90=97,91
<91=92
<92=96,93
<93=95,94
<97=181,180,179,178,177,171,165,157,131,106,98
<98=99
<99=105,100
<100=102,101
<102=104,103
<106=127,107
<107=116,108
<108=110,109
<110=111
<111=115,112
<112=114,113
<116=117
<117=123,118
<118=121,119
<119=120
<121=122
<123=124
<124=126,125
<127=128
<128=130,129
<131=153,132
<132=143,133
<133=134
<134=140,135
<135=137,136
<137=139,138
<140=142,141
<143=144
<144=150,145
<145=147,146
<147=149,148
<150=152,151
<153=154
<154=156,155
<157=158
<158=162,159
<159=161,160
<162=164,163
<165=166
<166=168,167
<168=170,169
<171=172
<172=174,173
<174=176,175
<181=190,182
<182=184,183
<184=185
<185=187,186
<187=189,188
<190=191
<191=193,192
<194=195
<195=203,196
<196=202,197
<197=199,198
<199=201,200
<204=205
<205=207,206
<208=209
<209=211,210
<243=249,248,244
<244=245
<245=247,246
<249=331,327,321,320,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,304,305,309,310,311,312,313,314,315,316,317,318,319
<269=270
<270=272,271
<289=290
<290=301,291
<291=299,292
<292=297,293
<293=294
<294=296,295
<297=298
<299=300
<301=303,302
<305=306
<306=308,307
<321=322
<322=326,323
<323=325,324
<327=328
<328=330,329
<331=332
<332=334,333
<350=356,355,351
<351=352
<352=354,353
<356=450,435,434,433,432,431,430,429,428,427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,396,384,378,368,357
<357=358
<358=366,359
<359=364,362,360
<360=361
<362=363
<364=365
<366=367
<368=369
<369=371,370
<371=373,372
<373=375,374
<375=377,376
<378=379
<379=381,380
<381=383,382
<384=385
<385=395,386
<386=394,387
<387=389,388
<389=393,390
<390=392,391
<396=397
<397=405,398
<398=401,399
<399=400
<401=402
<402=404,403
<405=406
<435=444,436
<436=437
<437=441,438
<438=440,439
<441=443,442
<444=445
<445=447,446
<447=449,448
<450=451
<451=453,452
<476=482,481,477
<477=478
<478=480,479
<482=540,536,526,498,483
<483=486,484
<484=485
<486=487
<487=495,488
<488=490,489
<490=492,491
<492=494,493
<495=497,496
<498=520,516,499
<499=500
<500=510,506,501
<501=502
<502=503
<503=505,504
<506=507
<507=509,508
<510=511
<511=513,512
<513=515,514
<516=517
<517=519,518
<520=521
<521=523,522
<523=525,524
<526=527
<527=535,528
<528=530,529
<530=534,531
<531=533,532
<536=537
<537=539,538
<540=541
<541=543,542
<565=571,570,566
<566=567
<567=569,568
<571=648,637,626,614,603,590,572
<572=584,573
<573=583,582,581,580,579,578,577,576,575,574
<584=585
<585=587,586
<587=589,588
<590=591
<591=601,592
<592=597,593
<593=594
<594=596,595
<597=598
<598=600,599
<601=602
<603=604
<604=612,605
<605=610,608,606
<606=607
<608=609
<610=611
<612=613
<614=615
<615=625,616
<616=624,617
<617=619,618
<619=623,620
<620=622,621
<626=627
<627=635,628
<628=631,629
<629=630
<631=632
<632=634,633
<635=636
<637=639,638
<639=640
<640=647,641
<641=645,642
<642=643
<643=644
<645=646
<648=649
<649=651,650
<669=675,674,670
<670=671
<671=673,672
<675=676
<676=677
<677=693,678
<678=691,689,679
<679=680
<680=688,681
<681=683,682
<683=687,684
<684=686,685
<689=690
<691=692
<693=694
<707=716,715,708
<708=712,709
<709=711,710
<712=714,713
<716=967,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,717,736,744,763,767,768,769,770,771,772,773,774,775,776,777,828,866,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,931,932,933,934,935,936,937,938,939,940,941
<717=718
<718=733,719
<719=732,720
<720=730,721
<721=726,722
<722=723
<723=725,724
<726=727
<727=729,728
<730=731
<733=735,734
<736=737
<737=743,738
<738=740,739
<740=742,741
<744=745
<745=760,746
<746=759,747
<747=757,748
<748=753,749
<749=750
<750=752,751
<753=754
<754=756,755
<757=758
<760=762,761
<763=764
<764=766,765
<777=820,785,778
<778=779
<779=780
<780=782,781
<782=784,783
<785=786
<786=802,787
<787=796,789,788
<789=790
<790=794,791
<791=792
<792=793
<794=795
<796=797
<797=799,798
<799=801,800
<802=803
<803=815,804
<804=810,805
<805=807,806
<807=809,808
<810=812,811
<812=814,813
<815=819,816
<816=818,817
<820=821
<821=823,822
<823=825,824
<825=827,826
<828=854,829
<829=842,831,830
<831=832
<832=840,833
<833=838,836,834
<834=835
<836=837
<838=839
<840=841
<842=843
<843=853,844
<844=852,845
<845=847,846
<847=851,848
<848=850,849
<854=855
<855=861,856
<856=860,857
<857=859,858
<861=863,862
<863=865,864
<866=897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881,880,879,878,867
<867=868
<868=876,869
<869=872,870
<870=871
<872=873
<873=875,874
<876=877
<919=920
<920=921
<921=929,922
<922=925,923
<923=924
<925=926
<926=928,927
<929=930
<963=964
<964=966,965
<967=968
<968=970,969
<1013=1022,1021,1014
<1014=1018,1015
<1015=1017,1016
<1018=1020,1019
<1022=1023
<1023=1053,1039,1024
<1024=1025
<1025=1033,1026
<1026=1027
<1027=1031,1028
<1028=1029
<1029=1030
<1031=1032
<1033=1034
<1034=1036,1035
<1036=1038,1037
<1039=1047,1040
<1040=1041
<1041=1045,1042
<1042=1043
<1043=1044
<1045=1046
<1047=1048
<1048=1050,1049
<1050=1052,1051
<1053=1054
<1054=1064,1055
<1055=1059,1056
<1056=1058,1057
<1059=1061,1060
<1061=1063,1062
<1064=1066,1065
<1066=1068,1067
<1068=1070,1069
<1084=1093,1092,1085
<1085=1089,1086
<1086=1088,1087
<1089=1091,1090
<1093=1114,1094
<1094=1106,1095
<1095=1096
<1096=1104,1097
<1097=1102,1100,1098
<1098=1099
<1100=1101
<1102=1103
<1104=1105
<1106=1107
<1107=1109,1108
<1109=1111,1110
<1111=1113,1112
<1114=1115
<1115=1119,1116
<1116=1117
<1117=1118
<1119=1120
<1134=1143,1142,1135
<1135=1139,1136
<1136=1138,1137
<1139=1141,1140
<1143=1202,1194,1179,1159,1151,1144
<1144=1145
<1145=1149,1146
<1146=1147
<1147=1148
<1149=1150
<1151=1152
<1152=1156,1153
<1153=1155,1154
<1156=1158,1157
<1159=1173,1160
<1160=1162,1161
<1162=1163
<1163=1171,1164
<1164=1169,1167,1165
<1165=1166
<1167=1168
<1169=1170
<1171=1172
<1173=1174
<1174=1178,1175
<1175=1177,1176
<1179=1188,1180
<1180=1182,1181
<1182=1183
<1183=1185,1184
<1185=1187,1186
<1188=1189
<1189=1191,1190
<1191=1193,1192
<1194=1196,1195
<1196=1197
<1197=1199,1198
<1199=1201,1200
<1202=1203
<1203=1205,1204
<1205=1207,1206
<1225=1234,1233,1226
<1226=1230,1227
<1227=1229,1228
<1230=1232,1231
<1234=1278,1272,1264,1258,1246,1235
<1235=1236
<1236=1244,1237
<1237=1242,1240,1238
<1238=1239
<1240=1241
<1242=1243
<1244=1245
<1246=1247
<1247=1257,1248
<1248=1256,1249
<1249=1251,1250
<1251=1255,1252
<1252=1254,1253
<1258=1259
<1259=1261,1260
<1261=1263,1262
<1264=1266,1265
<1266=1267
<1267=1269,1268
<1269=1271,1270
<1272=1273
<1273=1275,1274
<1275=1277,1276
<1278=1279
<1279=1281,1280
<1300=1309,1308,1301
<1301=1305,1302
<1302=1304,1303
<1305=1307,1306
<1309=1329,1310
<1310=1311
<1311=1327,1312
<1312=1325,1323,1313
<1313=1314
<1314=1322,1315
<1315=1317,1316
<1317=1321,1318
<1318=1320,1319
<1323=1324
<1325=1326
<1327=1328
<1329=1330
<1330=1338,1331
<1331=1334,1332
<1332=1333
<1334=1335
<1335=1337,1336
<1338=1339
<1355=1364,1363,1356
<1356=1360,1357
<1357=1359,1358
<1360=1362,1361
<1364=1505,1501,1497,1484,1473,1465,1451,1436,1419,1418,1417,1416,1415,1414,1413,1412,1365
<1365=1401,1400,1399,1398,1397,1396,1395,1394,1393,1392,1391,1390,1389,1388,1387,1386,1385,1384,1383,1382,1381,1380,1379,1378,1377,1376,1375,1374,1373,1372,1371,1370,1369,1368,1367,1366
<1401=1402
<1402=1410,1403
<1403=1406,1404
<1404=1405
<1406=1407
<1407=1409,1408
<1410=1411
<1419=1420
<1420=1434,1421
<1421=1430,1428,1426,1424,1422
<1422=1423
<1424=1425
<1426=1427
<1428=1429
<1430=1431
<1431=1433,1432
<1434=1435
<1436=1437
<1437=1450,1438
<1438=1448,1439
<1439=1444,1442,1440
<1440=1441
<1442=1443
<1444=1445
<1445=1447,1446
<1448=1449
<1451=1452
<1452=1464,1453
<1453=1455,1454
<1455=1460,1456
<1456=1458,1457
<1458=1459
<1460=1462,1461
<1462=1463
<1465=1466
<1466=1472,1467
<1467=1469,1468
<1469=1471,1470
<1473=1478,1474
<1474=1475
<1475=1477,1476
<1478=1479
<1479=1481,1480
<1481=1483,1482
<1484=1485
<1485=1496,1486
<1486=1488,1487
<1488=1490,1489
<1490=1492,1491
<1492=1494,1493
<1494=1495
<1497=1498
<1498=1500,1499
<1501=1502
<1502=1504,1503
<1505=1506
<1506=1508,1507
<1530=1539,1538,1531
<1531=1535,1532
<1532=1534,1533
<1535=1537,1536
<1539=1818,1814,1810,1797,1789,1775,1758,1739,1738,1737,1736,1735,1734,1733,1732,1731,1698,1697,1696,1695,1694,1540,1548,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693
<1540=1541
<1541=1543,1542
<1543=1545,1544
<1545=1547,1546
<1548=1626,1587,1549
<1549=1550
<1550=1551
<1551=1575,1563,1552
<1552=1553
<1553=1554
<1554=1558,1555
<1555=1557,1556
<1558=1560,1559
<1560=1562,1561
<1563=1564
<1564=1570,1565
<1565=1569,1566
<1566=1568,1567
<1570=1572,1571
<1572=1574,1573
<1575=1576
<1576=1580,1577
<1577=1579,1578
<1580=1586,1581
<1581=1583,1582
<1583=1585,1584
<1587=1588
<1588=1612,1600,1589
<1589=1590
<1590=1591
<1591=1595,1592
<1592=1594,1593
<1595=1597,1596
<1597=1599,1598
<1600=1601
<1601=1607,1602
<1602=1606,1603
<1603=1605,1604
<1607=1609,1608
<1609=1611,1610
<1612=1613
<1613=1619,1614
<1614=1616,1615
<1616=1618,1617
<1619=1625,1620
<1620=1622,1621
<1622=1624,1623
<1626=1627
<1627=1629,1628
<1629=1635,1630
<1630=1632,1631
<1632=1634,1633
<1667=1668
<1668=1676,1669
<1669=1672,1670
<1670=1671
<1672=1673
<1673=1675,1674
<1676=1677
<1698=1730,1729,1728,1727,1726,1725,1724,1723,1722,1721,1720,1719,1718,1717,1716,1715,1714,1713,1712,1711,1700,1699
<1700=1701
<1701=1709,1702
<1702=1705,1703
<1703=1704
<1705=1706
<1706=1708,1707
<1709=1710
<1739=1740
<1740=1756,1741
<1741=1752,1750,1746,1744,1742
<1742=1743
<1744=1745
<1746=1747
<1747=1749,1748
<1750=1751
<1752=1753
<1753=1755,1754
<1756=1757
<1758=1759
<1759=1774,1760
<1760=1772,1761
<1761=1768,1766,1762
<1762=1763
<1763=1765,1764
<1766=1767
<1768=1769
<1769=1771,1770
<1772=1773
<1775=1776
<1776=1788,1777
<1777=1779,1778
<1779=1784,1780
<1780=1782,1781
<1782=1783
<1784=1786,1785
<1786=1787
<1789=1790
<1790=1796,1791
<1791=1793,1792
<1793=1795,1794
<1797=1798
<1798=1809,1799
<1799=1808,1800
<1800=1802,1801
<1802=1804,1803
<1804=1806,1805
<1806=1807
<1810=1811
<1811=1813,1812
<1814=1815
<1815=1817,1816
<1818=1819
<1819=1821,1820
<1844=1853,1852,1845
<1845=1849,1846
<1846=1848,1847
<1849=1851,1850
<1853=1875,1864,1863,1862,1861,1860,1859,1858,1857,1856,1855,1854
<1864=1865
<1865=1873,1866
<1866=1869,1867
<1867=1868
<1869=1870
<1870=1872,1871
<1873=1874
<1875=1891,1876
<1876=1877
<1877=1878
<1878=1880,1879
<1880=1888,1881
<1881=1883,1882
<1883=1887,1884
<1884=1886,1885
<1888=1890,1889
<1891=1892
<1892=1894,1893
<1894=1896,1895
<1896=1898,1897
<1922=1931,1930,1923
<1923=1927,1924
<1924=1926,1925
<1927=1929,1928
<1931=1953,1942,1941,1940,1939,1938,1937,1936,1935,1934,1933,1932
<1942=1943
<1943=1951,1944
<1944=1947,1945
<1945=1946
<1947=1948
<1948=1950,1949
<1951=1952
<1953=1969,1954
<1954=1955
<1955=1956
<1956=1958,1957
<1958=1966,1959
<1959=1961,1960
<1961=1965,1962
<1962=1964,1963
<1966=1968,1967
<1969=1970
<1970=1972,1971
<1972=1974,1973
<1974=1976,1975
<2001=2010,2009,2002
<2002=2006,2003
<2003=2005,2004
<2006=2008,2007
<2010=2058,2032,2021,2020,2019,2018,2017,2016,2015,2014,2013,2012,2011
<2021=2022
<2022=2030,2023
<2023=2026,2024
<2024=2025
<2026=2027
<2027=2029,2028
<2030=2031
<2032=2033
<2033=2056,2034
<2034=2054,2052,2035
<2035=2036
<2036=2051,2037
<2037=2044,2038
<2038=2040,2039
<2040=2042,2041
<2042=2043
<2044=2046,2045
<2046=2050,2047
<2047=2049,2048
<2052=2053
<2054=2055
<2056=2057
<2058=2074,2059
<2059=2060
<2060=2061
<2061=2063,2062
<2063=2071,2064
<2064=2066,2065
<2066=2070,2067
<2067=2069,2068
<2071=2073,2072
<2074=2075
<2075=2077,2076
<2077=2079,2078
<2079=2081,2080
<2108=2114,2113,2109
<2109=2110
<2110=2112,2111
<2114=2211,2205,2204,2185,2184,2183,2182,2181,2180,2179,2178,2177,2115
<2115=2171,2170,2151,2150,2149,2148,2147,2146,2145,2144,2143,2116
<2116=2137,2136,2117
<2117=2118
<2118=2133,2119
<2119=2131,2120
<2120=2129,2127,2121
<2121=2122
<2122=2126,2123
<2123=2125,2124
<2127=2128
<2129=2130
<2131=2132
<2133=2135,2134
<2137=2138
<2138=2142,2139
<2139=2141,2140
<2151=2152
<2152=2167,2153
<2153=2165,2154
<2154=2163,2161,2155
<2155=2156
<2156=2160,2157
<2157=2159,2158
<2161=2162
<2163=2164
<2165=2166
<2167=2169,2168
<2171=2172
<2172=2176,2173
<2173=2175,2174
<2185=2186
<2186=2201,2187
<2187=2199,2188
<2188=2197,2195,2189
<2189=2190
<2190=2194,2191
<2191=2193,2192
<2195=2196
<2197=2198
<2199=2200
<2201=2203,2202
<2205=2206
<2206=2210,2207
<2207=2209,2208
<2211=2212
<2212=2214,2213
<2227=2236,2235,2228
<2228=2232,2229
<2229=2231,2230
<2232=2234,2233
<2236=2295,2291,2278,2272,2253,2252,2251,2250,2249,2248,2247,2246,2245,2244,2243,2242,2241,2240,2239,2238,2237
<2253=2268,2254
<2254=2255
<2255=2267,2256
<2256=2258,2257
<2258=2263,2259
<2259=2261,2260
<2261=2262
<2263=2265,2264
<2265=2266
<2268=2269
<2269=2271,2270
<2272=2273
<2273=2277,2274
<2274=2276,2275
<2278=2279
<2279=2290,2280
<2280=2289,2281
<2281=2283,2282
<2283=2285,2284
<2285=2287,2286
<2287=2288
<2291=2292
<2292=2294,2293
<2295=2296
<2296=2298,2297
<2309=2318,2317,2310
<2310=2314,2311
<2311=2313,2312
<2314=2316,2315
<2318=2437,2436,2435,2434,2433,2432,2431,2430,2429,2428,2427,2426,2425,2424,2423,2422,2421,2420,2419,2418,2407,2396,2372,2353,2344,2329,2328,2327,2326,2325,2324,2323,2322,2321,2320,2319
<2329=2330
<2330=2342,2331
<2331=2338,2332
<2332=2333
<2333=2337,2334
<2334=2336,2335
<2338=2339
<2339=2341,2340
<2342=2343
<2344=2345
<2345=2351,2346
<2346=2347
<2347=2348
<2348=2350,2349
<2351=2352
<2353=2354
<2354=2370,2355
<2355=2368,2366,2356
<2356=2357
<2357=2365,2358
<2358=2360,2359
<2360=2364,2361
<2361=2363,2362
<2366=2367
<2368=2369
<2370=2371
<2372=2388,2373
<2373=2374
<2374=2375
<2375=2377,2376
<2377=2385,2378
<2378=2380,2379
<2380=2384,2381
<2381=2383,2382
<2385=2387,2386
<2388=2389
<2389=2391,2390
<2391=2393,2392
<2393=2395,2394
<2396=2397
<2397=2405,2398
<2398=2401,2399
<2399=2400
<2401=2402
<2402=2404,2403
<2405=2406
<2407=2408
<2408=2416,2409
<2409=2412,2410
<2410=2411
<2412=2413
<2413=2415,2414
<2416=2417
<2465=2474,2473,2466
<2466=2470,2467
<2467=2469,2468
<2470=2472,2471
<2474=2602,2601,2600,2599,2598,2597,2596,2595,2594,2593,2592,2591,2590,2589,2588,2587,2586,2585,2584,2583,2582,2571,2560,2536,2517,2508,2485,2484,2483,2482,2481,2480,2479,2478,2477,2476,2475
<2485=2504,2500,2497,2486
<2486=2487
<2487=2495,2488
<2488=2491,2489
<2489=2490
<2491=2492
<2492=2494,2493
<2495=2496
<2497=2499,2498
<2500=2501
<2501=2503,2502
<2504=2505
<2505=2507,2506
<2508=2509
<2509=2515,2510
<2510=2511
<2511=2512
<2512=2514,2513
<2515=2516
<2517=2518
<2518=2534,2519
<2519=2532,2530,2520
<2520=2521
<2521=2529,2522
<2522=2524,2523
<2524=2528,2525
<2525=2527,2526
<2530=2531
<2532=2533
<2534=2535
<2536=2552,2537
<2537=2538
<2538=2539
<2539=2541,2540
<2541=2549,2542
<2542=2544,2543
<2544=2548,2545
<2545=2547,2546
<2549=2551,2550
<2552=2553
<2553=2555,2554
<2555=2557,2556
<2557=2559,2558
<2560=2561
<2561=2569,2562
<2562=2565,2563
<2563=2564
<2565=2566
<2566=2568,2567
<2569=2570
<2571=2572
<2572=2580,2573
<2573=2576,2574
<2574=2575
<2576=2577
<2577=2579,2578
<2580=2581
<2602=2603
<2603=2605,2604
<2633=2642,2641,2634
<2634=2638,2635
<2635=2637,2636
<2638=2640,2639
<2642=2835,2831,2827,2826,2825,2824,2823,2822,2821,2820,2819,2818,2817,2816,2815,2814,2813,2812,2811,2810,2809,2808,2807,2796,2785,2761,2742,2733,2653,2652,2651,2650,2649,2648,2647,2646,2645,2644,2643
<2653=2729,2725,2722,2654
<2654=2709,2701,2687,2686,2685,2684,2683,2682,2681,2680,2679,2678,2677,2676,2675,2674,2673,2672,2671,2670,2669,2668,2667,2666,2665,2664,2663,2662,2661,2660,2659,2658,2657,2656,2655
<2687=2688
<2688=2700,2689
<2689=2691,2690
<2691=2696,2692
<2692=2694,2693
<2694=2695
<2696=2698,2697
<2698=2699
<2701=2702
<2702=2708,2703
<2703=2705,2704
<2705=2707,2706
<2709=2710
<2710=2721,2711
<2711=2720,2712
<2712=2714,2713
<2714=2716,2715
<2716=2718,2717
<2718=2719
<2722=2724,2723
<2725=2726
<2726=2728,2727
<2729=2730
<2730=2732,2731
<2733=2734
<2734=2740,2735
<2735=2736
<2736=2737
<2737=2739,2738
<2740=2741
<2742=2743
<2743=2759,2744
<2744=2757,2755,2745
<2745=2746
<2746=2754,2747
<2747=2749,2748
<2749=2753,2750
<2750=2752,2751
<2755=2756
<2757=2758
<2759=2760
<2761=2777,2762
<2762=2763
<2763=2764
<2764=2766,2765
<2766=2774,2767
<2767=2769,2768
<2769=2773,2770
<2770=2772,2771
<2774=2776,2775
<2777=2778
<2778=2780,2779
<2780=2782,2781
<2782=2784,2783
<2785=2786
<2786=2794,2787
<2787=2790,2788
<2788=2789
<2790=2791
<2791=2793,2792
<2794=2795
<2796=2797
<2797=2805,2798
<2798=2801,2799
<2799=2800
<2801=2802
<2802=2804,2803
<2805=2806
<2827=2828
<2828=2830,2829
<2831=2832
<2832=2834,2833
<2835=2836
<2836=2838,2837
<2871=2880,2879,2872
<2872=2876,2873
<2873=2875,2874
<2876=2878,2877
<2880=3030,3029,3028,3027,3026,3025,3024,3023,3022,3021,3020,3019,3018,3017,3016,3015,3014,3013,3012,3011,2881,2882,2883,2884,2885,2886,2887,2888,2889,2890,2891,2906,2915,2916,2917,2918,2919,2920,2921,2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942,2943,2944,2945,2946,2947,2948,2949,2973,2984,3000
<2891=2892
<2892=2904,2893
<2893=2900,2894
<2894=2895
<2895=2899,2896
<2896=2898,2897
<2900=2901
<2901=2903,2902
<2904=2905
<2906=2907
<2907=2913,2908
<2908=2909
<2909=2910
<2910=2912,2911
<2913=2914
<2949=2965,2950
<2950=2951
<2951=2952
<2952=2954,2953
<2954=2962,2955
<2955=2957,2956
<2957=2961,2958
<2958=2960,2959
<2962=2964,2963
<2965=2966
<2966=2968,2967
<2968=2970,2969
<2970=2972,2971
<2973=2974
<2974=2982,2975
<2975=2978,2976
<2976=2977
<2978=2979
<2979=2981,2980
<2982=2983
<2984=2986,2985
<2986=2987
<2987=2999,2988
<2988=2996,2989
<2989=2991,2990
<2991=2995,2992
<2992=2994,2993
<2996=2998,2997
<3000=3001
<3001=3009,3002
<3002=3005,3003
<3003=3004
<3005=3006
<3006=3008,3007
<3009=3010
<3056=3065,3064,3057
<3057=3061,3058
<3058=3060,3059
<3061=3063,3062
<3065=3066
<3066=3067
<3067=3069,3068
<3069=3071,3070
<3079=3088,3087,3080
<3080=3084,3081
<3081=3083,3082
<3084=3086,3085
<3088=3089
<3089=3090
<3090=3092,3091
<3092=3094,3093
<3102=3111,3110,3103
<3103=3107,3104
<3104=3106,3105
<3107=3109,3108
<3111=3112
<3112=3113
<3113=3115,3114
<3115=3117,3116
<3133=3142,3141,3134
<3134=3138,3135
<3135=3137,3136
<3138=3140,3139
<3142=3143
<3143=3144
<3144=3152,3145
<3145=3148,3146
<3146=3147
<3148=3149
<3149=3151,3150
<3152=3153
<3162=3168,3167,3163
<3163=3164
<3164=3166,3165
<3168=3206,3184,3176,3169
<3169=3170
<3170=3174,3171
<3171=3172
<3172=3173
<3174=3175
<3176=3177
<3177=3181,3178
<3178=3180,3179
<3181=3183,3182
<3184=3202,3198,3195,3185
<3185=3186
<3186=3188,3187
<3188=3190,3189
<3190=3192,3191
<3192=3194,3193
<3195=3197,3196
<3198=3199
<3199=3201,3200
<3202=3203
<3203=3205,3204
<3206=3207
<3207=3209,3208
<3225=3231,3230,3226
<3226=3227
<3227=3229,3228
<3231=3345,3341,3337,3327,3264,3248,3232
<3232=3233
<3233=3241,3234
<3234=3236,3235
<3236=3238,3237
<3238=3240,3239
<3241=3243,3242
<3243=3245,3244
<3245=3247,3246
<3248=3249
<3249=3257,3250
<3250=3252,3251
<3252=3254,3253
<3254=3256,3255
<3257=3259,3258
<3259=3261,3260
<3261=3263,3262
<3264=3323,3319,3312,3265
<3265=3266
<3266=3306,3267
<3267=3268
<3268=3298,3269
<3269=3292,3270
<3270=3286,3271
<3271=3272
<3272=3284,3273
<3273=3282,3280,3274
<3274=3275
<3275=3277,3276
<3277=3279,3278
<3280=3281
<3282=3283
<3284=3285
<3286=3287
<3287=3291,3288
<3288=3290,3289
<3292=3293
<3293=3295,3294
<3295=3297,3296
<3298=3299
<3299=3303,3300
<3300=3302,3301
<3303=3305,3304
<3306=3307
<3307=3311,3308
<3308=3310,3309
<3312=3316,3313
<3313=3315,3314
<3316=3318,3317
<3319=3320
<3320=3322,3321
<3323=3324
<3324=3326,3325
<3327=3328
<3328=3336,3329
<3329=3335,3330
<3330=3332,3331
<3332=3334,3333
<3337=3338
<3338=3340,3339
<3341=3342
<3342=3344,3343
<3345=3346
<3346=3348,3347
