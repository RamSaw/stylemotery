>3	FunctionDef	ChowLiuTree 
>4	ParameterList	 
>5	CompoundStatement	 
>9	FunctionDef	ChowLiuTree 
>10	ParameterList	 
>11	CompoundStatement	 
>15	FunctionDef	ChowLiuTree 
>16	ParameterList	const Mat & imgDescriptor
>17	Parameter	 
>18	Identifier	imgDescriptor
>19	ParameterType	const Mat &
>20	ReturnType	void
>21	CompoundStatement	 
>22	ExpressionStatement	 
>23	CallExpression	imgDescriptors . push_back ( imgDescriptor )
>24	ArgumentList	imgDescriptor
>25	Argument	imgDescriptor
>26	Identifier	imgDescriptor
>27	Callee	imgDescriptors . push_back
>28	MemberAccess	imgDescriptors . push_back
>29	Identifier	push_back
>30	Identifier	imgDescriptors
>31	IfStatement	if ( ! imgDescriptors . empty ( ) )
>32	CompoundStatement	 
>33	ExpressionStatement	 
>34	CallExpression	CV_Assert ( imgDescriptors [ 0 ] . type ( ) == imgDescriptor . type ( ) )
>35	ArgumentList	imgDescriptors [ 0 ] . type ( ) == imgDescriptor . type ( )
>36	Argument	imgDescriptors [ 0 ] . type ( ) == imgDescriptor . type ( )
>37	EqualityExpression	imgDescriptors [ 0 ] . type ( ) == imgDescriptor . type ( )
>38	CallExpression	imgDescriptor . type ( )
>39	ArgumentList	 
>40	Callee	imgDescriptor . type
>41	MemberAccess	imgDescriptor . type
>42	Identifier	type
>43	Identifier	imgDescriptor
>44	CallExpression	imgDescriptors [ 0 ] . type ( )
>45	ArgumentList	 
>46	Callee	imgDescriptors [ 0 ] . type
>47	MemberAccess	imgDescriptors [ 0 ] . type
>48	Identifier	type
>49	ArrayIndexing	imgDescriptors [ 0 ]
>50	PrimaryExpression	0
>51	Identifier	imgDescriptors
>52	Callee	CV_Assert
>53	Identifier	CV_Assert
>54	ExpressionStatement	 
>55	CallExpression	CV_Assert ( imgDescriptors [ 0 ] . cols == imgDescriptor . cols )
>56	ArgumentList	imgDescriptors [ 0 ] . cols == imgDescriptor . cols
>57	Argument	imgDescriptors [ 0 ] . cols == imgDescriptor . cols
>58	EqualityExpression	imgDescriptors [ 0 ] . cols == imgDescriptor . cols
>59	MemberAccess	imgDescriptor . cols
>60	Identifier	cols
>61	Identifier	imgDescriptor
>62	MemberAccess	imgDescriptors [ 0 ] . cols
>63	Identifier	cols
>64	ArrayIndexing	imgDescriptors [ 0 ]
>65	PrimaryExpression	0
>66	Identifier	imgDescriptors
>67	Callee	CV_Assert
>68	Identifier	CV_Assert
>69	Condition	 
>70	UnaryOp	! imgDescriptors . empty ( )
>71	CallExpression	imgDescriptors . empty ( )
>72	ArgumentList	 
>73	Callee	imgDescriptors . empty
>74	MemberAccess	imgDescriptors . empty
>75	Identifier	empty
>76	Identifier	imgDescriptors
>77	UnaryOperator	!
>78	ExpressionStatement	 
>79	CallExpression	CV_Assert ( ! imgDescriptor . empty ( ) )
>80	ArgumentList	! imgDescriptor . empty ( )
>81	Argument	! imgDescriptor . empty ( )
>82	UnaryOp	! imgDescriptor . empty ( )
>83	CallExpression	imgDescriptor . empty ( )
>84	ArgumentList	 
>85	Callee	imgDescriptor . empty
>86	MemberAccess	imgDescriptor . empty
>87	Identifier	empty
>88	Identifier	imgDescriptor
>89	UnaryOperator	!
>90	Callee	CV_Assert
>91	Identifier	CV_Assert
>104	FunctionDef	ChowLiuTree 
>105	ParameterList	const vector < Mat > & imgDescriptors
>106	Parameter	 
>107	Identifier	imgDescriptors
>108	ParameterType	const vector < Mat > &
>109	ReturnType	void
>110	CompoundStatement	 
>111	ForStatement	for ( size_t i = 0 ; i < imgDescriptors . size ( ) ; i ++ )
>112	CompoundStatement	 
>113	ExpressionStatement	 
>114	CallExpression	add ( imgDescriptors [ i ] )
>115	ArgumentList	imgDescriptors [ i ]
>116	Argument	imgDescriptors [ i ]
>117	ArrayIndexing	imgDescriptors [ i ]
>118	Identifier	i
>119	Identifier	imgDescriptors
>120	Callee	add
>121	Identifier	add
>122	IncDecOp	 
>123	IncDec	++
>124	Identifier	i
>125	Condition	 
>126	RelationalExpression	i < imgDescriptors . size ( )
>127	CallExpression	imgDescriptors . size ( )
>128	ArgumentList	 
>129	Callee	imgDescriptors . size
>130	MemberAccess	imgDescriptors . size
>131	Identifier	size
>132	Identifier	imgDescriptors
>133	Identifier	i
>134	ForInit	 
>135	IdentifierDeclStatement	size_t i = 0 ;
>136	IdentifierDecl	i = 0
>137	AssignmentExpr	i = 0
>138	PrimaryExpression	0
>139	Identifier	i
>140	Identifier	i
>141	IdentifierDeclType	size_t
>150	FunctionDef	ChowLiuTree 
>151	ParameterList	 
>152	ReturnType	const std 
>153	CompoundStatement	 
>154	ReturnStatement	 
>155	Identifier	imgDescriptors
>160	FunctionDef	ChowLiuTree 
>161	ParameterList	double infoThreshold
>162	Parameter	 
>163	Identifier	infoThreshold
>164	ParameterType	double
>165	ReturnType	Mat
>166	CompoundStatement	 
>167	ReturnStatement	 
>168	CallExpression	buildTree ( edges . front ( ) . word1 , edges )
>169	ArgumentList	edges . front ( ) . word1
>170	Argument	edges
>171	Identifier	edges
>172	Argument	edges . front ( ) . word1
>173	MemberAccess	edges . front ( ) . word1
>174	Identifier	word1
>175	CallExpression	edges . front ( )
>176	ArgumentList	 
>177	Callee	edges . front
>178	MemberAccess	edges . front
>179	Identifier	front
>180	Identifier	edges
>181	Callee	buildTree
>182	Identifier	buildTree
>183	ExpressionStatement	 
>184	CallExpression	CV_Assert ( reduceEdgesToMinSpan ( edges ) )
>185	ArgumentList	reduceEdgesToMinSpan ( edges )
>186	Argument	reduceEdgesToMinSpan ( edges )
>187	CallExpression	reduceEdgesToMinSpan ( edges )
>188	ArgumentList	edges
>189	Argument	edges
>190	Identifier	edges
>191	Callee	reduceEdgesToMinSpan
>192	Identifier	reduceEdgesToMinSpan
>193	Callee	CV_Assert
>194	Identifier	CV_Assert
>195	ExpressionStatement	 
>196	CallExpression	createBaseEdges ( edges , infoThreshold )
>197	ArgumentList	edges
>198	Argument	infoThreshold
>199	Identifier	infoThreshold
>200	Argument	edges
>201	Identifier	edges
>202	Callee	createBaseEdges
>203	Identifier	createBaseEdges
>204	IdentifierDeclStatement	 
>205	IdentifierDecl	edges
>206	Identifier	edges
>207	IdentifierDeclType	list < info >
>208	ForStatement	for ( size_t i = 0 , start = 0 ; i < imgDescriptors . size ( ) ; i ++ )
>209	CompoundStatement	 
>210	ExpressionStatement	 
>211	AssignmentExpr	start += imgDescriptors [ i ] . rows
>212	MemberAccess	imgDescriptors [ i ] . rows
>213	Identifier	rows
>214	ArrayIndexing	imgDescriptors [ i ]
>215	Identifier	i
>216	Identifier	imgDescriptors
>217	Identifier	start
>218	ExpressionStatement	 
>219	CallExpression	imgDescriptors [ i ] . copyTo ( submut )
>220	ArgumentList	submut
>221	Argument	submut
>222	Identifier	submut
>223	Callee	imgDescriptors [ i ] . copyTo
>224	MemberAccess	imgDescriptors [ i ] . copyTo
>225	Identifier	copyTo
>226	ArrayIndexing	imgDescriptors [ i ]
>227	Identifier	i
>228	Identifier	imgDescriptors
>229	IdentifierDeclStatement	 
>230	IdentifierDecl	submut = mergedImgDescriptors . rowRange ( ( int ) start , ( int ) ( start + imgDescriptors [ i ] . rows ) )
>231	AssignmentExpr	submut = mergedImgDescriptors . rowRange ( ( int ) start , ( int ) ( start + imgDescriptors [ i ] . rows ) )
>232	CallExpression	mergedImgDescriptors . rowRange ( ( int ) start , ( int ) ( start + imgDescriptors [ i ] . rows ) )
>233	ArgumentList	( int ) start
>234	Argument	( int ) ( start + imgDescriptors [ i ] . rows )
>235	CastExpression	( int ) ( start + imgDescriptors [ i ] . rows )
>236	AdditiveExpression	start + imgDescriptors [ i ] . rows
>237	MemberAccess	imgDescriptors [ i ] . rows
>238	Identifier	rows
>239	ArrayIndexing	imgDescriptors [ i ]
>240	Identifier	i
>241	Identifier	imgDescriptors
>242	Identifier	start
>243	CastTarget	int
>244	Argument	( int ) start
>245	CastExpression	( int ) start
>246	Identifier	start
>247	CastTarget	int
>248	Callee	mergedImgDescriptors . rowRange
>249	MemberAccess	mergedImgDescriptors . rowRange
>250	Identifier	rowRange
>251	Identifier	mergedImgDescriptors
>252	Identifier	submut
>253	Identifier	submut
>254	IdentifierDeclType	Mat
>255	IncDecOp	 
>256	IncDec	++
>257	Identifier	i
>258	Condition	 
>259	RelationalExpression	i < imgDescriptors . size ( )
>260	CallExpression	imgDescriptors . size ( )
>261	ArgumentList	 
>262	Callee	imgDescriptors . size
>263	MemberAccess	imgDescriptors . size
>264	Identifier	size
>265	Identifier	imgDescriptors
>266	Identifier	i
>267	ForInit	 
>268	IdentifierDeclStatement	size_t i = 0 , start = 0 ;
>269	IdentifierDecl	start = 0
>270	AssignmentExpr	start = 0
>271	PrimaryExpression	0
>272	Identifier	start
>273	Identifier	start
>274	IdentifierDeclType	size_t
>275	IdentifierDecl	i = 0
>276	AssignmentExpr	i = 0
>277	PrimaryExpression	0
>278	Identifier	i
>279	Identifier	i
>280	IdentifierDeclType	size_t
>281	ExpressionStatement	 
>282	AssignmentExpr	mergedImgDescriptors = cv 
>283	CallExpression	cv 
>284	ArgumentList	descCount
>285	Argument	imgDescriptors [ 0 ] . type ( )
>286	CallExpression	imgDescriptors [ 0 ] . type ( )
>287	ArgumentList	 
>288	Callee	imgDescriptors [ 0 ] . type
>289	MemberAccess	imgDescriptors [ 0 ] . type
>290	Identifier	type
>291	ArrayIndexing	imgDescriptors [ 0 ]
>292	PrimaryExpression	0
>293	Identifier	imgDescriptors
>294	Argument	imgDescriptors [ 0 ] . cols
>295	MemberAccess	imgDescriptors [ 0 ] . cols
>296	Identifier	cols
>297	ArrayIndexing	imgDescriptors [ 0 ]
>298	PrimaryExpression	0
>299	Identifier	imgDescriptors
>300	Argument	descCount
>301	Identifier	descCount
>302	Callee	cv 
>303	Identifier	cv 
>304	Identifier	mergedImgDescriptors
>305	ForStatement	for ( size_t i = 0 ; i < imgDescriptors . size ( ) ; i ++ )
>306	ExpressionStatement	 
>307	AssignmentExpr	descCount += imgDescriptors [ i ] . rows
>308	MemberAccess	imgDescriptors [ i ] . rows
>309	Identifier	rows
>310	ArrayIndexing	imgDescriptors [ i ]
>311	Identifier	i
>312	Identifier	imgDescriptors
>313	Identifier	descCount
>314	IncDecOp	 
>315	IncDec	++
>316	Identifier	i
>317	Condition	 
>318	RelationalExpression	i < imgDescriptors . size ( )
>319	CallExpression	imgDescriptors . size ( )
>320	ArgumentList	 
>321	Callee	imgDescriptors . size
>322	MemberAccess	imgDescriptors . size
>323	Identifier	size
>324	Identifier	imgDescriptors
>325	Identifier	i
>326	ForInit	 
>327	IdentifierDeclStatement	size_t i = 0 ;
>328	IdentifierDecl	i = 0
>329	AssignmentExpr	i = 0
>330	PrimaryExpression	0
>331	Identifier	i
>332	Identifier	i
>333	IdentifierDeclType	size_t
>334	IdentifierDeclStatement	 
>335	IdentifierDecl	descCount = 0
>336	AssignmentExpr	descCount = 0
>337	PrimaryExpression	0
>338	Identifier	descCount
>339	Identifier	descCount
>340	IdentifierDeclType	unsigned int
>341	ExpressionStatement	 
>342	CallExpression	CV_Assert ( ! imgDescriptors . empty ( ) )
>343	ArgumentList	! imgDescriptors . empty ( )
>344	Argument	! imgDescriptors . empty ( )
>345	UnaryOp	! imgDescriptors . empty ( )
>346	CallExpression	imgDescriptors . empty ( )
>347	ArgumentList	 
>348	Callee	imgDescriptors . empty
>349	MemberAccess	imgDescriptors . empty
>350	Identifier	empty
>351	Identifier	imgDescriptors
>352	UnaryOperator	!
>353	Callee	CV_Assert
>354	Identifier	CV_Assert
>379	FunctionDef	ChowLiuTree 
>380	ParameterList	int a , bool za
>381	Parameter	 
>382	Identifier	za
>383	ParameterType	bool
>384	Parameter	 
>385	Identifier	a
>386	ParameterType	int
>387	ReturnType	double
>388	CompoundStatement	 
>389	IfStatement	if ( za )
>390	ElseStatement	else
>391	CompoundStatement	 
>392	ReturnStatement	 
>393	AdditiveExpression	1 - ( ( 0.98 * cv 
>394	AdditiveExpression	( 0.98 * cv 
>395	PrimaryExpression	0.01
>396	MultiplicativeExpression	0.98 * cv 
>397	MultiplicativeExpression	cv 
>398	MemberAccess	mergedImgDescriptors . rows
>399	Identifier	rows
>400	Identifier	mergedImgDescriptors
>401	CallExpression	cv 
>402	ArgumentList	mergedImgDescriptors . col ( a )
>403	Argument	mergedImgDescriptors . col ( a )
>404	CallExpression	mergedImgDescriptors . col ( a )
>405	ArgumentList	a
>406	Argument	a
>407	Identifier	a
>408	Callee	mergedImgDescriptors . col
>409	MemberAccess	mergedImgDescriptors . col
>410	Identifier	col
>411	Identifier	mergedImgDescriptors
>412	Callee	cv 
>413	Identifier	cv 
>414	PrimaryExpression	0.98
>415	PrimaryExpression	1
>416	CompoundStatement	 
>417	ReturnStatement	 
>418	AdditiveExpression	( 0.98 * cv 
>419	PrimaryExpression	0.01
>420	MultiplicativeExpression	0.98 * cv 
>421	MultiplicativeExpression	cv 
>422	MemberAccess	mergedImgDescriptors . rows
>423	Identifier	rows
>424	Identifier	mergedImgDescriptors
>425	CallExpression	cv 
>426	ArgumentList	mergedImgDescriptors . col ( a )
>427	Argument	mergedImgDescriptors . col ( a )
>428	CallExpression	mergedImgDescriptors . col ( a )
>429	ArgumentList	a
>430	Argument	a
>431	Identifier	a
>432	Callee	mergedImgDescriptors . col
>433	MemberAccess	mergedImgDescriptors . col
>434	Identifier	col
>435	Identifier	mergedImgDescriptors
>436	Callee	cv 
>437	Identifier	cv 
>438	PrimaryExpression	0.98
>439	Condition	 
>440	Identifier	za
>450	FunctionDef	ChowLiuTree 
>451	ParameterList	int a , bool za , int b , bool zb
>452	Parameter	 
>453	Identifier	zb
>454	ParameterType	bool
>455	Parameter	 
>456	Identifier	b
>457	ParameterType	int
>458	Parameter	 
>459	Identifier	za
>460	ParameterType	bool
>461	Parameter	 
>462	Identifier	a
>463	ParameterType	int
>464	ReturnType	double
>465	CompoundStatement	 
>466	ReturnStatement	 
>467	MultiplicativeExpression	count / mergedImgDescriptors . rows
>468	MemberAccess	mergedImgDescriptors . rows
>469	Identifier	rows
>470	Identifier	mergedImgDescriptors
>471	Identifier	count
>472	ForStatement	for ( int i = 0 ; i < mergedImgDescriptors . rows ; i ++ )
>473	CompoundStatement	 
>474	IfStatement	if ( ( mergedImgDescriptors . at < float > ( i , a ) > 0 ) == za && ( mergedImgDescriptors . at < float > ( i , \
>475	CompoundStatement	 
>476	ExpressionStatement	 
>477	IncDecOp	count ++
>478	IncDec	++
>479	Identifier	count
>480	Condition	 
>481	AndExpression	( mergedImgDescriptors . at < float > ( i , a ) > 0 ) == za && ( mergedImgDescriptors . at < float > ( \
>482	EqualityExpression	( mergedImgDescriptors . at < float > ( i , b ) > 0 ) == zb
>483	Identifier	zb
>484	RelationalExpression	mergedImgDescriptors . at < float > ( i , b ) > 0
>485	RelationalExpression	float > ( i , b ) > 0
>486	RelationalExpression	( i , b ) > 0
>487	PrimaryExpression	0
>488	Expression	i , b
>489	Identifier	b
>490	Identifier	i
>491	Identifier	float
>492	MemberAccess	mergedImgDescriptors . at
>493	Identifier	at
>494	Identifier	mergedImgDescriptors
>495	EqualityExpression	( mergedImgDescriptors . at < float > ( i , a ) > 0 ) == za
>496	Identifier	za
>497	RelationalExpression	mergedImgDescriptors . at < float > ( i , a ) > 0
>498	RelationalExpression	float > ( i , a ) > 0
>499	RelationalExpression	( i , a ) > 0
>500	PrimaryExpression	0
>501	Expression	i , a
>502	Identifier	a
>503	Identifier	i
>504	Identifier	float
>505	MemberAccess	mergedImgDescriptors . at
>506	Identifier	at
>507	Identifier	mergedImgDescriptors
>508	IncDecOp	 
>509	IncDec	++
>510	Identifier	i
>511	Condition	 
>512	RelationalExpression	i < mergedImgDescriptors . rows
>513	MemberAccess	mergedImgDescriptors . rows
>514	Identifier	rows
>515	Identifier	mergedImgDescriptors
>516	Identifier	i
>517	ForInit	 
>518	IdentifierDeclStatement	int i = 0 ;
>519	IdentifierDecl	i = 0
>520	AssignmentExpr	i = 0
>521	PrimaryExpression	0
>522	Identifier	i
>523	Identifier	i
>524	IdentifierDeclType	int
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	count = 0
>527	AssignmentExpr	count = 0
>528	PrimaryExpression	0
>529	Identifier	count
>530	Identifier	count
>531	IdentifierDeclType	double
>545	FunctionDef	ChowLiuTree 
>546	ParameterList	int a , bool za , int b , bool zb
>547	Parameter	 
>548	Identifier	zb
>549	ParameterType	bool
>550	Parameter	 
>551	Identifier	b
>552	ParameterType	int
>553	Parameter	 
>554	Identifier	za
>555	ParameterType	bool
>556	Parameter	 
>557	Identifier	a
>558	ParameterType	int
>559	ReturnType	double
>560	CompoundStatement	 
>561	IfStatement	if ( total )
>562	ElseStatement	else
>563	CompoundStatement	 
>564	ReturnStatement	 
>565	ConditionalExpression	( za ) ? 0.01 
>566	PrimaryExpression	0.99
>567	PrimaryExpression	0.01
>568	Condition	za
>569	Identifier	za
>570	CompoundStatement	 
>571	ReturnStatement	 
>572	AdditiveExpression	( double ) ( 0.98 * count ) / total + 0.01
>573	PrimaryExpression	0.01
>574	MultiplicativeExpression	( double ) ( 0.98 * count ) / total
>575	Identifier	total
>576	CastExpression	( double ) ( 0.98 * count )
>577	MultiplicativeExpression	0.98 * count
>578	Identifier	count
>579	PrimaryExpression	0.98
>580	CastTarget	double
>581	Condition	 
>582	Identifier	total
>583	ForStatement	for ( int i = 0 ; i < mergedImgDescriptors . rows ; i ++ )
>584	CompoundStatement	 
>585	IfStatement	if ( ( mergedImgDescriptors . at < float > ( i , b ) > 0 ) == zb )
>586	CompoundStatement	 
>587	IfStatement	if ( ( mergedImgDescriptors . at < float > ( i , a ) > 0 ) == za )
>588	CompoundStatement	 
>589	ExpressionStatement	 
>590	IncDecOp	count ++
>591	IncDec	++
>592	Identifier	count
>593	Condition	 
>594	EqualityExpression	( mergedImgDescriptors . at < float > ( i , a ) > 0 ) == za
>595	Identifier	za
>596	RelationalExpression	mergedImgDescriptors . at < float > ( i , a ) > 0
>597	RelationalExpression	float > ( i , a ) > 0
>598	RelationalExpression	( i , a ) > 0
>599	PrimaryExpression	0
>600	Expression	i , a
>601	Identifier	a
>602	Identifier	i
>603	Identifier	float
>604	MemberAccess	mergedImgDescriptors . at
>605	Identifier	at
>606	Identifier	mergedImgDescriptors
>607	ExpressionStatement	 
>608	IncDecOp	total ++
>609	IncDec	++
>610	Identifier	total
>611	Condition	 
>612	EqualityExpression	( mergedImgDescriptors . at < float > ( i , b ) > 0 ) == zb
>613	Identifier	zb
>614	RelationalExpression	mergedImgDescriptors . at < float > ( i , b ) > 0
>615	RelationalExpression	float > ( i , b ) > 0
>616	RelationalExpression	( i , b ) > 0
>617	PrimaryExpression	0
>618	Expression	i , b
>619	Identifier	b
>620	Identifier	i
>621	Identifier	float
>622	MemberAccess	mergedImgDescriptors . at
>623	Identifier	at
>624	Identifier	mergedImgDescriptors
>625	IncDecOp	 
>626	IncDec	++
>627	Identifier	i
>628	Condition	 
>629	RelationalExpression	i < mergedImgDescriptors . rows
>630	MemberAccess	mergedImgDescriptors . rows
>631	Identifier	rows
>632	Identifier	mergedImgDescriptors
>633	Identifier	i
>634	ForInit	 
>635	IdentifierDeclStatement	int i = 0 ;
>636	IdentifierDecl	i = 0
>637	AssignmentExpr	i = 0
>638	PrimaryExpression	0
>639	Identifier	i
>640	Identifier	i
>641	IdentifierDeclType	int
>642	IdentifierDeclStatement	 
>643	IdentifierDecl	total = 0
>644	AssignmentExpr	total = 0
>645	PrimaryExpression	0
>646	Identifier	total
>647	Identifier	total
>648	IdentifierDeclType	int
>649	IdentifierDecl	count = 0
>650	AssignmentExpr	count = 0
>651	PrimaryExpression	0
>652	Identifier	count
>653	Identifier	count
>654	IdentifierDeclType	int
>669	FunctionDef	ChowLiuTree 
>670	ParameterList	int root_word , list < info > & edges
>671	Parameter	 
>672	Identifier	edges
>673	ParameterType	list < info > &
>674	Parameter	 
>675	Identifier	root_word
>676	ParameterType	int
>677	ReturnType	cv 
>678	CompoundStatement	 
>679	ReturnStatement	 
>680	Identifier	cltree
>681	ForStatement	for ( nextq = nextqs . begin ( ) ; nextq != nextqs . end ( ) ; nextq ++ )
>682	CompoundStatement	 
>683	ExpressionStatement	 
>684	CallExpression	recAddToTree ( cltree , * nextq , pq , edges )
>685	ArgumentList	cltree
>686	Argument	edges
>687	Identifier	edges
>688	Argument	pq
>689	Identifier	pq
>690	Argument	* nextq
>691	UnaryOp	* nextq
>692	Identifier	nextq
>693	UnaryOperator	*
>694	Argument	cltree
>695	Identifier	cltree
>696	Callee	recAddToTree
>697	Identifier	recAddToTree
>698	IncDecOp	 
>699	IncDec	++
>700	Identifier	nextq
>701	Condition	 
>702	EqualityExpression	nextq != nextqs . end ( )
>703	CallExpression	nextqs . end ( )
>704	ArgumentList	 
>705	Callee	nextqs . end
>706	MemberAccess	nextqs . end
>707	Identifier	end
>708	Identifier	nextqs
>709	Identifier	nextq
>710	ForInit	 
>711	AssignmentExpr	nextq = nextqs . begin ( )
>712	CallExpression	nextqs . begin ( )
>713	ArgumentList	 
>714	Callee	nextqs . begin
>715	MemberAccess	nextqs . begin
>716	Identifier	begin
>717	Identifier	nextqs
>718	Identifier	nextq
>719	IdentifierDeclStatement	 
>720	IdentifierDecl	nextq
>721	Identifier	nextq
>722	IdentifierDeclType	vector < int > 
>723	IdentifierDeclStatement	 
>724	IdentifierDecl	pq = q
>725	AssignmentExpr	pq = q
>726	Identifier	q
>727	Identifier	q
>728	Identifier	pq
>729	IdentifierDeclType	int
>730	IdentifierDeclStatement	 
>731	IdentifierDecl	nextqs = extractChildren ( edges , q )
>732	AssignmentExpr	nextqs = extractChildren ( edges , q )
>733	CallExpression	extractChildren ( edges , q )
>734	ArgumentList	edges
>735	Argument	q
>736	Identifier	q
>737	Argument	edges
>738	Identifier	edges
>739	Callee	extractChildren
>740	Identifier	extractChildren
>741	Identifier	nextqs
>742	Identifier	nextqs
>743	IdentifierDeclType	vector < int >
>744	ExpressionStatement	 
>745	AssignmentExpr	cltree . at < double > ( 3 , q ) = P ( q , true )
>746	CallExpression	P ( q , true )
>747	ArgumentList	q
>748	Argument	true
>749	Identifier	true
>750	Argument	q
>751	Identifier	q
>752	Callee	P
>753	Identifier	P
>754	RelationalExpression	cltree . at < double > ( 3 , q )
>755	RelationalExpression	double > ( 3 , q )
>756	Expression	3 , q
>757	Identifier	q
>758	PrimaryExpression	3
>759	Identifier	double
>760	MemberAccess	cltree . at
>761	Identifier	at
>762	Identifier	cltree
>763	ExpressionStatement	 
>764	AssignmentExpr	cltree . at < double > ( 2 , q ) = P ( q , true )
>765	CallExpression	P ( q , true )
>766	ArgumentList	q
>767	Argument	true
>768	Identifier	true
>769	Argument	q
>770	Identifier	q
>771	Callee	P
>772	Identifier	P
>773	RelationalExpression	cltree . at < double > ( 2 , q )
>774	RelationalExpression	double > ( 2 , q )
>775	Expression	2 , q
>776	Identifier	q
>777	PrimaryExpression	2
>778	Identifier	double
>779	MemberAccess	cltree . at
>780	Identifier	at
>781	Identifier	cltree
>782	ExpressionStatement	 
>783	AssignmentExpr	cltree . at < double > ( 1 , q ) = P ( q , true )
>784	CallExpression	P ( q , true )
>785	ArgumentList	q
>786	Argument	true
>787	Identifier	true
>788	Argument	q
>789	Identifier	q
>790	Callee	P
>791	Identifier	P
>792	RelationalExpression	cltree . at < double > ( 1 , q )
>793	RelationalExpression	double > ( 1 , q )
>794	Expression	1 , q
>795	Identifier	q
>796	PrimaryExpression	1
>797	Identifier	double
>798	MemberAccess	cltree . at
>799	Identifier	at
>800	Identifier	cltree
>801	ExpressionStatement	 
>802	AssignmentExpr	cltree . at < double > ( 0 , q ) = q
>803	Identifier	q
>804	RelationalExpression	cltree . at < double > ( 0 , q )
>805	RelationalExpression	double > ( 0 , q )
>806	Expression	0 , q
>807	Identifier	q
>808	PrimaryExpression	0
>809	Identifier	double
>810	MemberAccess	cltree . at
>811	Identifier	at
>812	Identifier	cltree
>813	IdentifierDeclStatement	 
>814	IdentifierDecl	cltree ( 4 , edges . size ( ) + 1 , CV_64F )
>815	Expression	4 , edges . size ( ) + 1 , CV_64F
>816	Expression	edges . size ( ) + 1 , CV_64F
>817	Identifier	CV_64F
>818	AdditiveExpression	edges . size ( ) + 1
>819	PrimaryExpression	1
>820	CallExpression	edges . size ( )
>821	ArgumentList	 
>822	Callee	edges . size
>823	MemberAccess	edges . size
>824	Identifier	size
>825	Identifier	edges
>826	PrimaryExpression	4
>827	Identifier	cltree
>828	IdentifierDeclType	cv 
>829	IdentifierDeclStatement	 
>830	IdentifierDecl	q = root_word
>831	AssignmentExpr	q = root_word
>832	Identifier	root_word
>833	Identifier	root_word
>834	Identifier	q
>835	IdentifierDeclType	int
>854	FunctionDef	ChowLiuTree 
>855	ParameterList	cv 
>856	Parameter	 
>857	Identifier	remaining_edges
>858	ParameterType	list < info > &
>859	Parameter	 
>860	Identifier	pq
>861	ParameterType	int
>862	Parameter	 
>863	Identifier	q
>864	ParameterType	int
>865	Parameter	 
>866	Identifier	cltree
>867	ParameterType	cv 
>868	ReturnType	void
>869	CompoundStatement	 
>870	ForStatement	for ( nextq = nextqs . begin ( ) ; nextq != nextqs . end ( ) ; nextq ++ )
>871	CompoundStatement	 
>872	ExpressionStatement	 
>873	CallExpression	recAddToTree ( cltree , * nextq , pq , remaining_edges )
>874	ArgumentList	cltree
>875	Argument	remaining_edges
>876	Identifier	remaining_edges
>877	Argument	pq
>878	Identifier	pq
>879	Argument	* nextq
>880	UnaryOp	* nextq
>881	Identifier	nextq
>882	UnaryOperator	*
>883	Argument	cltree
>884	Identifier	cltree
>885	Callee	recAddToTree
>886	Identifier	recAddToTree
>887	IncDecOp	 
>888	IncDec	++
>889	Identifier	nextq
>890	Condition	 
>891	EqualityExpression	nextq != nextqs . end ( )
>892	CallExpression	nextqs . end ( )
>893	ArgumentList	 
>894	Callee	nextqs . end
>895	MemberAccess	nextqs . end
>896	Identifier	end
>897	Identifier	nextqs
>898	Identifier	nextq
>899	ForInit	 
>900	AssignmentExpr	nextq = nextqs . begin ( )
>901	CallExpression	nextqs . begin ( )
>902	ArgumentList	 
>903	Callee	nextqs . begin
>904	MemberAccess	nextqs . begin
>905	Identifier	begin
>906	Identifier	nextqs
>907	Identifier	nextq
>908	IdentifierDeclStatement	 
>909	IdentifierDecl	nextq
>910	Identifier	nextq
>911	IdentifierDeclType	vector < int > 
>912	ExpressionStatement	 
>913	AssignmentExpr	pq = q
>914	Identifier	q
>915	Identifier	pq
>916	IdentifierDeclStatement	 
>917	IdentifierDecl	nextqs = extractChildren ( remaining_edges , q )
>918	AssignmentExpr	nextqs = extractChildren ( remaining_edges , q )
>919	CallExpression	extractChildren ( remaining_edges , q )
>920	ArgumentList	remaining_edges
>921	Argument	q
>922	Identifier	q
>923	Argument	remaining_edges
>924	Identifier	remaining_edges
>925	Callee	extractChildren
>926	Identifier	extractChildren
>927	Identifier	nextqs
>928	Identifier	nextqs
>929	IdentifierDeclType	vector < int >
>930	ExpressionStatement	 
>931	AssignmentExpr	cltree . at < double > ( 3 , q ) = CP ( q , true , pq , false )
>932	CallExpression	CP ( q , true , pq , false )
>933	ArgumentList	q
>934	Argument	false
>935	Identifier	false
>936	Argument	pq
>937	Identifier	pq
>938	Argument	true
>939	Identifier	true
>940	Argument	q
>941	Identifier	q
>942	Callee	CP
>943	Identifier	CP
>944	RelationalExpression	cltree . at < double > ( 3 , q )
>945	RelationalExpression	double > ( 3 , q )
>946	Expression	3 , q
>947	Identifier	q
>948	PrimaryExpression	3
>949	Identifier	double
>950	MemberAccess	cltree . at
>951	Identifier	at
>952	Identifier	cltree
>953	ExpressionStatement	 
>954	AssignmentExpr	cltree . at < double > ( 2 , q ) = CP ( q , true , pq , true )
>955	CallExpression	CP ( q , true , pq , true )
>956	ArgumentList	q
>957	Argument	true
>958	Identifier	true
>959	Argument	pq
>960	Identifier	pq
>961	Argument	true
>962	Identifier	true
>963	Argument	q
>964	Identifier	q
>965	Callee	CP
>966	Identifier	CP
>967	RelationalExpression	cltree . at < double > ( 2 , q )
>968	RelationalExpression	double > ( 2 , q )
>969	Expression	2 , q
>970	Identifier	q
>971	PrimaryExpression	2
>972	Identifier	double
>973	MemberAccess	cltree . at
>974	Identifier	at
>975	Identifier	cltree
>976	ExpressionStatement	 
>977	AssignmentExpr	cltree . at < double > ( 1 , q ) = P ( q , true )
>978	CallExpression	P ( q , true )
>979	ArgumentList	q
>980	Argument	true
>981	Identifier	true
>982	Argument	q
>983	Identifier	q
>984	Callee	P
>985	Identifier	P
>986	RelationalExpression	cltree . at < double > ( 1 , q )
>987	RelationalExpression	double > ( 1 , q )
>988	Expression	1 , q
>989	Identifier	q
>990	PrimaryExpression	1
>991	Identifier	double
>992	MemberAccess	cltree . at
>993	Identifier	at
>994	Identifier	cltree
>995	ExpressionStatement	 
>996	AssignmentExpr	cltree . at < double > ( 0 , q ) = pq
>997	Identifier	pq
>998	RelationalExpression	cltree . at < double > ( 0 , q )
>999	RelationalExpression	double > ( 0 , q )
>1000	Expression	0 , q
>1001	Identifier	q
>1002	PrimaryExpression	0
>1003	Identifier	double
>1004	MemberAccess	cltree . at
>1005	Identifier	at
>1006	Identifier	cltree
>1026	FunctionDef	ChowLiuTree 
>1027	ParameterList	list < info > & remaining_edges , int q
>1028	Parameter	 
>1029	Identifier	q
>1030	ParameterType	int
>1031	Parameter	 
>1032	Identifier	remaining_edges
>1033	ParameterType	list < info > &
>1034	ReturnType	vector < int >
>1035	CompoundStatement	 
>1036	ReturnStatement	 
>1037	Identifier	children
>1038	WhileStatement	while ( edge != remaining_edges . end ( ) )
>1039	CompoundStatement	 
>1040	ExpressionStatement	 
>1041	IncDecOp	edge ++
>1042	IncDec	++
>1043	Identifier	edge
>1044	IfStatement	if ( edge -> word2 == q )
>1045	CompoundStatement	 
>1046	ContinueStatement	 
>1047	ExpressionStatement	 
>1048	AssignmentExpr	edge = remaining_edges . erase ( edge )
>1049	CallExpression	remaining_edges . erase ( edge )
>1050	ArgumentList	edge
>1051	Argument	edge
>1052	Identifier	edge
>1053	Callee	remaining_edges . erase
>1054	MemberAccess	remaining_edges . erase
>1055	Identifier	erase
>1056	Identifier	remaining_edges
>1057	Identifier	edge
>1058	ExpressionStatement	 
>1059	CallExpression	children . push_back ( edge -> word1 )
>1060	ArgumentList	edge -> word1
>1061	Argument	edge -> word1
>1062	PtrMemberAccess	edge -> word1
>1063	Identifier	word1
>1064	Identifier	edge
>1065	Callee	children . push_back
>1066	MemberAccess	children . push_back
>1067	Identifier	push_back
>1068	Identifier	children
>1069	Condition	 
>1070	EqualityExpression	edge -> word2 == q
>1071	Identifier	q
>1072	PtrMemberAccess	edge -> word2
>1073	Identifier	word2
>1074	Identifier	edge
>1075	IfStatement	if ( edge -> word1 == q )
>1076	CompoundStatement	 
>1077	ContinueStatement	 
>1078	ExpressionStatement	 
>1079	AssignmentExpr	edge = remaining_edges . erase ( edge )
>1080	CallExpression	remaining_edges . erase ( edge )
>1081	ArgumentList	edge
>1082	Argument	edge
>1083	Identifier	edge
>1084	Callee	remaining_edges . erase
>1085	MemberAccess	remaining_edges . erase
>1086	Identifier	erase
>1087	Identifier	remaining_edges
>1088	Identifier	edge
>1089	ExpressionStatement	 
>1090	CallExpression	children . push_back ( edge -> word2 )
>1091	ArgumentList	edge -> word2
>1092	Argument	edge -> word2
>1093	PtrMemberAccess	edge -> word2
>1094	Identifier	word2
>1095	Identifier	edge
>1096	Callee	children . push_back
>1097	MemberAccess	children . push_back
>1098	Identifier	push_back
>1099	Identifier	children
>1100	Condition	 
>1101	EqualityExpression	edge -> word1 == q
>1102	Identifier	q
>1103	PtrMemberAccess	edge -> word1
>1104	Identifier	word1
>1105	Identifier	edge
>1106	Condition	 
>1107	EqualityExpression	edge != remaining_edges . end ( )
>1108	CallExpression	remaining_edges . end ( )
>1109	ArgumentList	 
>1110	Callee	remaining_edges . end
>1111	MemberAccess	remaining_edges . end
>1112	Identifier	end
>1113	Identifier	remaining_edges
>1114	Identifier	edge
>1115	IdentifierDeclStatement	 
>1116	IdentifierDecl	edge = remaining_edges . begin ( )
>1117	AssignmentExpr	edge = remaining_edges . begin ( )
>1118	CallExpression	remaining_edges . begin ( )
>1119	ArgumentList	 
>1120	Callee	remaining_edges . begin
>1121	MemberAccess	remaining_edges . begin
>1122	Identifier	begin
>1123	Identifier	remaining_edges
>1124	Identifier	edge
>1125	Identifier	edge
>1126	IdentifierDeclType	list < info > 
>1127	IdentifierDeclStatement	 
>1128	IdentifierDecl	children
>1129	Identifier	children
>1130	IdentifierDeclType	vector < int >
>1144	FunctionDef	ChowLiuTree 
>1145	ParameterList	const info & first , const info & second
>1146	Parameter	 
>1147	Identifier	second
>1148	ParameterType	const info &
>1149	Parameter	 
>1150	Identifier	first
>1151	ParameterType	const info &
>1152	ReturnType	bool
>1153	CompoundStatement	 
>1154	ReturnStatement	 
>1155	RelationalExpression	first . score > second . score
>1156	MemberAccess	second . score
>1157	Identifier	score
>1158	Identifier	second
>1159	MemberAccess	first . score
>1160	Identifier	score
>1161	Identifier	first
>1169	FunctionDef	ChowLiuTree 
>1170	ParameterList	int word1 , int word2
>1171	Parameter	 
>1172	Identifier	word2
>1173	ParameterType	int
>1174	Parameter	 
>1175	Identifier	word1
>1176	ParameterType	int
>1177	ReturnType	double
>1178	CompoundStatement	 
>1179	ReturnStatement	 
>1180	Identifier	accumulation
>1181	IfStatement	if ( P11 )
>1182	ExpressionStatement	 
>1183	AssignmentExpr	accumulation += P11 * log ( P11 / ( P ( word1 , true ) * P ( word2 , true ) ) )
>1184	MultiplicativeExpression	P11 * log ( P11 / ( P ( word1 , true ) * P ( word2 , true ) ) )
>1185	CallExpression	log ( P11 / ( P ( word1 , true ) * P ( word2 , true ) ) )
>1186	ArgumentList	P11 / ( P ( word1 , true ) * P ( word2 , true ) )
>1187	Argument	P11 / ( P ( word1 , true ) * P ( word2 , true ) )
>1188	MultiplicativeExpression	P11 / ( P ( word1 , true ) * P ( word2 , true ) )
>1189	MultiplicativeExpression	P ( word1 , true ) * P ( word2 , true )
>1190	CallExpression	P ( word2 , true )
>1191	ArgumentList	word2
>1192	Argument	true
>1193	Identifier	true
>1194	Argument	word2
>1195	Identifier	word2
>1196	Callee	P
>1197	Identifier	P
>1198	CallExpression	P ( word1 , true )
>1199	ArgumentList	word1
>1200	Argument	true
>1201	Identifier	true
>1202	Argument	word1
>1203	Identifier	word1
>1204	Callee	P
>1205	Identifier	P
>1206	Identifier	P11
>1207	Callee	log
>1208	Identifier	log
>1209	Identifier	P11
>1210	Identifier	accumulation
>1211	Condition	 
>1212	Identifier	P11
>1213	IdentifierDeclStatement	 
>1214	IdentifierDecl	P11 = JP ( word1 , true , word2 , true )
>1215	AssignmentExpr	P11 = JP ( word1 , true , word2 , true )
>1216	CallExpression	JP ( word1 , true , word2 , true )
>1217	ArgumentList	word1
>1218	Argument	true
>1219	Identifier	true
>1220	Argument	word2
>1221	Identifier	word2
>1222	Argument	true
>1223	Identifier	true
>1224	Argument	word1
>1225	Identifier	word1
>1226	Callee	JP
>1227	Identifier	JP
>1228	Identifier	P11
>1229	Identifier	P11
>1230	IdentifierDeclType	double
>1231	IfStatement	if ( P10 )
>1232	ExpressionStatement	 
>1233	AssignmentExpr	accumulation += P10 * log ( P10 / ( P ( word1 , true ) * P ( word2 , false ) ) )
>1234	MultiplicativeExpression	P10 * log ( P10 / ( P ( word1 , true ) * P ( word2 , false ) ) )
>1235	CallExpression	log ( P10 / ( P ( word1 , true ) * P ( word2 , false ) ) )
>1236	ArgumentList	P10 / ( P ( word1 , true ) * P ( word2 , false ) )
>1237	Argument	P10 / ( P ( word1 , true ) * P ( word2 , false ) )
>1238	MultiplicativeExpression	P10 / ( P ( word1 , true ) * P ( word2 , false ) )
>1239	MultiplicativeExpression	P ( word1 , true ) * P ( word2 , false )
>1240	CallExpression	P ( word2 , false )
>1241	ArgumentList	word2
>1242	Argument	false
>1243	Identifier	false
>1244	Argument	word2
>1245	Identifier	word2
>1246	Callee	P
>1247	Identifier	P
>1248	CallExpression	P ( word1 , true )
>1249	ArgumentList	word1
>1250	Argument	true
>1251	Identifier	true
>1252	Argument	word1
>1253	Identifier	word1
>1254	Callee	P
>1255	Identifier	P
>1256	Identifier	P10
>1257	Callee	log
>1258	Identifier	log
>1259	Identifier	P10
>1260	Identifier	accumulation
>1261	Condition	 
>1262	Identifier	P10
>1263	IdentifierDeclStatement	 
>1264	IdentifierDecl	P10 = JP ( word1 , true , word2 , false )
>1265	AssignmentExpr	P10 = JP ( word1 , true , word2 , false )
>1266	CallExpression	JP ( word1 , true , word2 , false )
>1267	ArgumentList	word1
>1268	Argument	false
>1269	Identifier	false
>1270	Argument	word2
>1271	Identifier	word2
>1272	Argument	true
>1273	Identifier	true
>1274	Argument	word1
>1275	Identifier	word1
>1276	Callee	JP
>1277	Identifier	JP
>1278	Identifier	P10
>1279	Identifier	P10
>1280	IdentifierDeclType	double
>1281	IfStatement	if ( P01 )
>1282	ExpressionStatement	 
>1283	AssignmentExpr	accumulation += P01 * log ( P01 / ( P ( word1 , false ) * P ( word2 , true ) ) )
>1284	MultiplicativeExpression	P01 * log ( P01 / ( P ( word1 , false ) * P ( word2 , true ) ) )
>1285	CallExpression	log ( P01 / ( P ( word1 , false ) * P ( word2 , true ) ) )
>1286	ArgumentList	P01 / ( P ( word1 , false ) * P ( word2 , true ) )
>1287	Argument	P01 / ( P ( word1 , false ) * P ( word2 , true ) )
>1288	MultiplicativeExpression	P01 / ( P ( word1 , false ) * P ( word2 , true ) )
>1289	MultiplicativeExpression	P ( word1 , false ) * P ( word2 , true )
>1290	CallExpression	P ( word2 , true )
>1291	ArgumentList	word2
>1292	Argument	true
>1293	Identifier	true
>1294	Argument	word2
>1295	Identifier	word2
>1296	Callee	P
>1297	Identifier	P
>1298	CallExpression	P ( word1 , false )
>1299	ArgumentList	word1
>1300	Argument	false
>1301	Identifier	false
>1302	Argument	word1
>1303	Identifier	word1
>1304	Callee	P
>1305	Identifier	P
>1306	Identifier	P01
>1307	Callee	log
>1308	Identifier	log
>1309	Identifier	P01
>1310	Identifier	accumulation
>1311	Condition	 
>1312	Identifier	P01
>1313	IdentifierDeclStatement	 
>1314	IdentifierDecl	P01 = JP ( word1 , false , word2 , true )
>1315	AssignmentExpr	P01 = JP ( word1 , false , word2 , true )
>1316	CallExpression	JP ( word1 , false , word2 , true )
>1317	ArgumentList	word1
>1318	Argument	true
>1319	Identifier	true
>1320	Argument	word2
>1321	Identifier	word2
>1322	Argument	false
>1323	Identifier	false
>1324	Argument	word1
>1325	Identifier	word1
>1326	Callee	JP
>1327	Identifier	JP
>1328	Identifier	P01
>1329	Identifier	P01
>1330	IdentifierDeclType	double
>1331	IfStatement	if ( P00 )
>1332	ExpressionStatement	 
>1333	AssignmentExpr	accumulation += P00 * log ( P00 / ( P ( word1 , false ) * P ( word2 , false ) ) )
>1334	MultiplicativeExpression	P00 * log ( P00 / ( P ( word1 , false ) * P ( word2 , false ) ) )
>1335	CallExpression	log ( P00 / ( P ( word1 , false ) * P ( word2 , false ) ) )
>1336	ArgumentList	P00 / ( P ( word1 , false ) * P ( word2 , false ) )
>1337	Argument	P00 / ( P ( word1 , false ) * P ( word2 , false ) )
>1338	MultiplicativeExpression	P00 / ( P ( word1 , false ) * P ( word2 , false ) )
>1339	MultiplicativeExpression	P ( word1 , false ) * P ( word2 , false )
>1340	CallExpression	P ( word2 , false )
>1341	ArgumentList	word2
>1342	Argument	false
>1343	Identifier	false
>1344	Argument	word2
>1345	Identifier	word2
>1346	Callee	P
>1347	Identifier	P
>1348	CallExpression	P ( word1 , false )
>1349	ArgumentList	word1
>1350	Argument	false
>1351	Identifier	false
>1352	Argument	word1
>1353	Identifier	word1
>1354	Callee	P
>1355	Identifier	P
>1356	Identifier	P00
>1357	Callee	log
>1358	Identifier	log
>1359	Identifier	P00
>1360	Identifier	accumulation
>1361	Condition	 
>1362	Identifier	P00
>1363	IdentifierDeclStatement	 
>1364	IdentifierDecl	P00 = JP ( word1 , false , word2 , false )
>1365	AssignmentExpr	P00 = JP ( word1 , false , word2 , false )
>1366	CallExpression	JP ( word1 , false , word2 , false )
>1367	ArgumentList	word1
>1368	Argument	false
>1369	Identifier	false
>1370	Argument	word2
>1371	Identifier	word2
>1372	Argument	false
>1373	Identifier	false
>1374	Argument	word1
>1375	Identifier	word1
>1376	Callee	JP
>1377	Identifier	JP
>1378	Identifier	P00
>1379	Identifier	P00
>1380	IdentifierDeclType	double
>1381	IdentifierDeclStatement	 
>1382	IdentifierDecl	accumulation = 0
>1383	AssignmentExpr	accumulation = 0
>1384	PrimaryExpression	0
>1385	Identifier	accumulation
>1386	Identifier	accumulation
>1387	IdentifierDeclType	double
>1403	FunctionDef	ChowLiuTree 
>1404	ParameterList	list < info > & edges , double infoThreshold
>1405	Parameter	 
>1406	Identifier	infoThreshold
>1407	ParameterType	double
>1408	Parameter	 
>1409	Identifier	edges
>1410	ParameterType	list < info > &
>1411	ReturnType	void
>1412	CompoundStatement	 
>1413	ExpressionStatement	 
>1414	CallExpression	edges . sort ( sortInfoScores )
>1415	ArgumentList	sortInfoScores
>1416	Argument	sortInfoScores
>1417	Identifier	sortInfoScores
>1418	Callee	edges . sort
>1419	MemberAccess	edges . sort
>1420	Identifier	sort
>1421	Identifier	edges
>1422	ForStatement	for ( int word1 = 0 ; word1 < nWords ; word1 ++ )
>1423	CompoundStatement	 
>1424	ForStatement	for ( int word2 = word1 + 1 ; word2 < nWords ; word2 ++ )
>1425	CompoundStatement	 
>1426	IfStatement	if ( mutInfo . score >= infoThreshold )
>1427	ExpressionStatement	 
>1428	CallExpression	edges . push_back ( mutInfo )
>1429	ArgumentList	mutInfo
>1430	Argument	mutInfo
>1431	Identifier	mutInfo
>1432	Callee	edges . push_back
>1433	MemberAccess	edges . push_back
>1434	Identifier	push_back
>1435	Identifier	edges
>1436	Condition	 
>1437	RelationalExpression	mutInfo . score >= infoThreshold
>1438	Identifier	infoThreshold
>1439	MemberAccess	mutInfo . score
>1440	Identifier	score
>1441	Identifier	mutInfo
>1442	ExpressionStatement	 
>1443	AssignmentExpr	mutInfo . score = ( float ) calcMutInfo ( word1 , word2 )
>1444	CastExpression	( float ) calcMutInfo ( word1 , word2 )
>1445	CallExpression	calcMutInfo ( word1 , word2 )
>1446	ArgumentList	word1
>1447	Argument	word2
>1448	Identifier	word2
>1449	Argument	word1
>1450	Identifier	word1
>1451	Callee	calcMutInfo
>1452	Identifier	calcMutInfo
>1453	CastTarget	float
>1454	MemberAccess	mutInfo . score
>1455	Identifier	score
>1456	Identifier	mutInfo
>1457	ExpressionStatement	 
>1458	AssignmentExpr	mutInfo . word2 = word2
>1459	Identifier	word2
>1460	MemberAccess	mutInfo . word2
>1461	Identifier	word2
>1462	Identifier	mutInfo
>1463	ExpressionStatement	 
>1464	AssignmentExpr	mutInfo . word1 = word1
>1465	Identifier	word1
>1466	MemberAccess	mutInfo . word1
>1467	Identifier	word1
>1468	Identifier	mutInfo
>1469	IncDecOp	 
>1470	IncDec	++
>1471	Identifier	word2
>1472	Condition	 
>1473	RelationalExpression	word2 < nWords
>1474	Identifier	nWords
>1475	Identifier	word2
>1476	ForInit	 
>1477	IdentifierDeclStatement	int word2 = word1 + 1 ;
>1478	IdentifierDecl	word2 = word1 + 1
>1479	AssignmentExpr	word2 = word1 + 1
>1480	AdditiveExpression	word1 + 1
>1481	PrimaryExpression	1
>1482	Identifier	word1
>1483	Identifier	word2
>1484	Identifier	word2
>1485	IdentifierDeclType	int
>1486	IncDecOp	 
>1487	IncDec	++
>1488	Identifier	word1
>1489	Condition	 
>1490	RelationalExpression	word1 < nWords
>1491	Identifier	nWords
>1492	Identifier	word1
>1493	ForInit	 
>1494	IdentifierDeclStatement	int word1 = 0 ;
>1495	IdentifierDecl	word1 = 0
>1496	AssignmentExpr	word1 = 0
>1497	PrimaryExpression	0
>1498	Identifier	word1
>1499	Identifier	word1
>1500	IdentifierDeclType	int
>1501	IdentifierDeclStatement	 
>1502	IdentifierDecl	mutInfo
>1503	Identifier	mutInfo
>1504	IdentifierDeclType	info
>1505	IdentifierDeclStatement	 
>1506	IdentifierDecl	nWords = imgDescriptors [ 0 ] . cols
>1507	AssignmentExpr	nWords = imgDescriptors [ 0 ] . cols
>1508	MemberAccess	imgDescriptors [ 0 ] . cols
>1509	Identifier	cols
>1510	ArrayIndexing	imgDescriptors [ 0 ]
>1511	PrimaryExpression	0
>1512	Identifier	imgDescriptors
>1513	Identifier	nWords
>1514	Identifier	nWords
>1515	IdentifierDeclType	int
>1533	FunctionDef	ChowLiuTree 
>1534	ParameterList	list < info > & edges
>1535	Parameter	 
>1536	Identifier	edges
>1537	ParameterType	list < info > &
>1538	ReturnType	bool
>1539	CompoundStatement	 
>1540	IfStatement	if ( edges . size ( ) != ( unsigned int ) imgDescriptors [ 0 ] . cols - 1 )
>1541	ElseStatement	else
>1542	CompoundStatement	 
>1543	ReturnStatement	 
>1544	Identifier	true
>1545	CompoundStatement	 
>1546	ReturnStatement	 
>1547	Identifier	false
>1548	Condition	 
>1549	EqualityExpression	edges . size ( ) != ( unsigned int ) imgDescriptors [ 0 ] . cols - 1
>1550	AdditiveExpression	( unsigned int ) imgDescriptors [ 0 ] . cols - 1
>1551	PrimaryExpression	1
>1552	CastExpression	( unsigned int ) imgDescriptors [ 0 ] . cols
>1553	MemberAccess	imgDescriptors [ 0 ] . cols
>1554	Identifier	cols
>1555	ArrayIndexing	imgDescriptors [ 0 ]
>1556	PrimaryExpression	0
>1557	Identifier	imgDescriptors
>1558	CastTarget	unsigned int
>1559	CallExpression	edges . size ( )
>1560	ArgumentList	 
>1561	Callee	edges . size
>1562	MemberAccess	edges . size
>1563	Identifier	size
>1564	Identifier	edges
>1565	WhileStatement	while ( edge != edges . end ( ) )
>1566	CompoundStatement	 
>1567	IfStatement	if ( groups [ edge -> word1 ] != groups [ edge -> word2 ] )
>1568	ElseStatement	else
>1569	CompoundStatement	 
>1570	ExpressionStatement	 
>1571	AssignmentExpr	edge = edges . erase ( edge )
>1572	CallExpression	edges . erase ( edge )
>1573	ArgumentList	edge
>1574	Argument	edge
>1575	Identifier	edge
>1576	Callee	edges . erase
>1577	MemberAccess	edges . erase
>1578	Identifier	erase
>1579	Identifier	edges
>1580	Identifier	edge
>1581	CompoundStatement	 
>1582	ExpressionStatement	 
>1583	IncDecOp	edge ++
>1584	IncDec	++
>1585	Identifier	edge
>1586	ForStatement	for ( groupIt = groups . begin ( ) ; groupIt != groups . end ( ) ; groupIt ++ )
>1587	IfStatement	if ( groupIt -> second == group2 )
>1588	ExpressionStatement	 
>1589	AssignmentExpr	groupIt -> second = group1
>1590	Identifier	group1
>1591	PtrMemberAccess	groupIt -> second
>1592	Identifier	second
>1593	Identifier	groupIt
>1594	Condition	 
>1595	EqualityExpression	groupIt -> second == group2
>1596	Identifier	group2
>1597	PtrMemberAccess	groupIt -> second
>1598	Identifier	second
>1599	Identifier	groupIt
>1600	IncDecOp	 
>1601	IncDec	++
>1602	Identifier	groupIt
>1603	Condition	 
>1604	EqualityExpression	groupIt != groups . end ( )
>1605	CallExpression	groups . end ( )
>1606	ArgumentList	 
>1607	Callee	groups . end
>1608	MemberAccess	groups . end
>1609	Identifier	end
>1610	Identifier	groups
>1611	Identifier	groupIt
>1612	ForInit	 
>1613	AssignmentExpr	groupIt = groups . begin ( )
>1614	CallExpression	groups . begin ( )
>1615	ArgumentList	 
>1616	Callee	groups . begin
>1617	MemberAccess	groups . begin
>1618	Identifier	begin
>1619	Identifier	groups
>1620	Identifier	groupIt
>1621	ExpressionStatement	 
>1622	AssignmentExpr	group2 = groups [ edge -> word2 ]
>1623	ArrayIndexing	groups [ edge -> word2 ]
>1624	PtrMemberAccess	edge -> word2
>1625	Identifier	word2
>1626	Identifier	edge
>1627	Identifier	groups
>1628	Identifier	group2
>1629	ExpressionStatement	 
>1630	AssignmentExpr	group1 = groups [ edge -> word1 ]
>1631	ArrayIndexing	groups [ edge -> word1 ]
>1632	PtrMemberAccess	edge -> word1
>1633	Identifier	word1
>1634	Identifier	edge
>1635	Identifier	groups
>1636	Identifier	group1
>1637	Condition	 
>1638	EqualityExpression	groups [ edge -> word1 ] != groups [ edge -> word2 ]
>1639	ArrayIndexing	groups [ edge -> word2 ]
>1640	PtrMemberAccess	edge -> word2
>1641	Identifier	word2
>1642	Identifier	edge
>1643	Identifier	groups
>1644	ArrayIndexing	groups [ edge -> word1 ]
>1645	PtrMemberAccess	edge -> word1
>1646	Identifier	word1
>1647	Identifier	edge
>1648	Identifier	groups
>1649	Condition	 
>1650	EqualityExpression	edge != edges . end ( )
>1651	CallExpression	edges . end ( )
>1652	ArgumentList	 
>1653	Callee	edges . end
>1654	MemberAccess	edges . end
>1655	Identifier	end
>1656	Identifier	edges
>1657	Identifier	edge
>1658	IdentifierDeclStatement	 
>1659	IdentifierDecl	edge = edges . begin ( )
>1660	AssignmentExpr	edge = edges . begin ( )
>1661	CallExpression	edges . begin ( )
>1662	ArgumentList	 
>1663	Callee	edges . begin
>1664	MemberAccess	edges . begin
>1665	Identifier	begin
>1666	Identifier	edges
>1667	Identifier	edge
>1668	Identifier	edge
>1669	IdentifierDeclType	list < info > 
>1670	IdentifierDeclStatement	 
>1671	IdentifierDecl	group2
>1672	Identifier	group2
>1673	IdentifierDeclType	int
>1674	IdentifierDecl	group1
>1675	Identifier	group1
>1676	IdentifierDeclType	int
>1677	ForStatement	for ( int i = 0 ; i < imgDescriptors [ 0 ] . cols ; i ++ )
>1678	ExpressionStatement	 
>1679	AssignmentExpr	groups [ i ] = i
>1680	Identifier	i
>1681	ArrayIndexing	groups [ i ]
>1682	Identifier	i
>1683	Identifier	groups
>1684	IncDecOp	 
>1685	IncDec	++
>1686	Identifier	i
>1687	Condition	 
>1688	RelationalExpression	i < imgDescriptors [ 0 ] . cols
>1689	MemberAccess	imgDescriptors [ 0 ] . cols
>1690	Identifier	cols
>1691	ArrayIndexing	imgDescriptors [ 0 ]
>1692	PrimaryExpression	0
>1693	Identifier	imgDescriptors
>1694	Identifier	i
>1695	ForInit	 
>1696	IdentifierDeclStatement	int i = 0 ;
>1697	IdentifierDecl	i = 0
>1698	AssignmentExpr	i = 0
>1699	PrimaryExpression	0
>1700	Identifier	i
>1701	Identifier	i
>1702	IdentifierDeclType	int
>1703	IdentifierDeclStatement	 
>1704	IdentifierDecl	groupIt
>1705	Identifier	groupIt
>1706	IdentifierDeclType	map < int , int > 
>1707	IdentifierDeclStatement	 
>1708	IdentifierDecl	groups
>1709	Identifier	groups
>1710	IdentifierDeclType	map < int , int >
<3=5,4
<9=11,10
<15=21,20,16
<16=17
<17=19,18
<21=78,31,22
<22=23
<23=27,24
<24=25
<25=26
<27=28
<28=30,29
<31=69,32
<32=54,33
<33=34
<34=52,35
<35=36
<36=37
<37=44,38
<38=40,39
<40=41
<41=43,42
<44=46,45
<46=47
<47=49,48
<49=51,50
<52=53
<54=55
<55=67,56
<56=57
<57=58
<58=62,59
<59=61,60
<62=64,63
<64=66,65
<67=68
<69=70
<70=77,71
<71=73,72
<73=74
<74=76,75
<78=79
<79=90,80
<80=81
<81=82
<82=89,83
<83=85,84
<85=86
<86=88,87
<90=91
<104=110,109,105
<105=106
<106=108,107
<110=111
<111=134,125,122,112
<112=113
<113=114
<114=120,115
<115=116
<116=117
<117=119,118
<120=121
<122=124,123
<125=126
<126=133,127
<127=129,128
<129=130
<130=132,131
<134=135
<135=136
<136=141,140,137
<137=139,138
<150=153,152,151
<153=154
<154=155
<160=166,165,161
<161=162
<162=164,163
<166=341,334,305,281,208,204,195,183,167
<167=168
<168=181,169
<169=172,170
<170=171
<172=173
<173=175,174
<175=177,176
<177=178
<178=180,179
<181=182
<183=184
<184=193,185
<185=186
<186=187
<187=191,188
<188=189
<189=190
<191=192
<193=194
<195=196
<196=202,197
<197=200,198
<198=199
<200=201
<202=203
<204=205
<205=207,206
<208=267,258,255,209
<209=229,218,210
<210=211
<211=217,212
<212=214,213
<214=216,215
<218=219
<219=223,220
<220=221
<221=222
<223=224
<224=226,225
<226=228,227
<229=230
<230=254,253,231
<231=252,232
<232=248,233
<233=244,234
<234=235
<235=243,236
<236=242,237
<237=239,238
<239=241,240
<244=245
<245=247,246
<248=249
<249=251,250
<255=257,256
<258=259
<259=266,260
<260=262,261
<262=263
<263=265,264
<267=268
<268=275,269
<269=274,273,270
<270=272,271
<275=280,279,276
<276=278,277
<281=282
<282=304,283
<283=302,284
<284=300,294,285
<285=286
<286=288,287
<288=289
<289=291,290
<291=293,292
<294=295
<295=297,296
<297=299,298
<300=301
<302=303
<305=326,317,314,306
<306=307
<307=313,308
<308=310,309
<310=312,311
<314=316,315
<317=318
<318=325,319
<319=321,320
<321=322
<322=324,323
<326=327
<327=328
<328=333,332,329
<329=331,330
<334=335
<335=340,339,336
<336=338,337
<341=342
<342=353,343
<343=344
<344=345
<345=352,346
<346=348,347
<348=349
<349=351,350
<353=354
<379=388,387,380
<380=384,381
<381=383,382
<384=386,385
<388=389
<389=439,416,390
<390=391
<391=392
<392=393
<393=415,394
<394=396,395
<396=414,397
<397=401,398
<398=400,399
<401=412,402
<402=403
<403=404
<404=408,405
<405=406
<406=407
<408=409
<409=411,410
<412=413
<416=417
<417=418
<418=420,419
<420=438,421
<421=425,422
<422=424,423
<425=436,426
<426=427
<427=428
<428=432,429
<429=430
<430=431
<432=433
<433=435,434
<436=437
<439=440
<450=465,464,451
<451=461,458,455,452
<452=454,453
<455=457,456
<458=460,459
<461=463,462
<465=525,472,466
<466=467
<467=471,468
<468=470,469
<472=517,511,508,473
<473=474
<474=480,475
<475=476
<476=477
<477=479,478
<480=481
<481=495,482
<482=484,483
<484=492,485
<485=491,486
<486=488,487
<488=490,489
<492=494,493
<495=497,496
<497=505,498
<498=504,499
<499=501,500
<501=503,502
<505=507,506
<508=510,509
<511=512
<512=516,513
<513=515,514
<517=518
<518=519
<519=524,523,520
<520=522,521
<525=526
<526=531,530,527
<527=529,528
<545=560,559,546
<546=556,553,550,547
<547=549,548
<550=552,551
<553=555,554
<556=558,557
<560=642,583,561
<561=581,570,562
<562=563
<563=564
<564=565
<565=568,567,566
<568=569
<570=571
<571=572
<572=574,573
<574=576,575
<576=580,577
<577=579,578
<581=582
<583=634,628,625,584
<584=585
<585=611,586
<586=607,587
<587=593,588
<588=589
<589=590
<590=592,591
<593=594
<594=596,595
<596=604,597
<597=603,598
<598=600,599
<600=602,601
<604=606,605
<607=608
<608=610,609
<611=612
<612=614,613
<614=622,615
<615=621,616
<616=618,617
<618=620,619
<622=624,623
<625=627,626
<628=629
<629=633,630
<630=632,631
<634=635
<635=636
<636=641,640,637
<637=639,638
<642=649,643
<643=648,647,644
<644=646,645
<649=654,653,650
<650=652,651
<669=678,677,670
<670=674,671
<671=673,672
<674=676,675
<678=829,813,801,782,763,744,730,723,719,681,679
<679=680
<681=710,701,698,682
<682=683
<683=684
<684=696,685
<685=694,690,688,686
<686=687
<688=689
<690=691
<691=693,692
<694=695
<696=697
<698=700,699
<701=702
<702=709,703
<703=705,704
<705=706
<706=708,707
<710=711
<711=718,712
<712=714,713
<714=715
<715=717,716
<719=720
<720=722,721
<723=724
<724=729,728,725
<725=727,726
<730=731
<731=743,742,732
<732=741,733
<733=739,734
<734=737,735
<735=736
<737=738
<739=740
<744=745
<745=754,746
<746=752,747
<747=750,748
<748=749
<750=751
<752=753
<754=760,755
<755=759,756
<756=758,757
<760=762,761
<763=764
<764=773,765
<765=771,766
<766=769,767
<767=768
<769=770
<771=772
<773=779,774
<774=778,775
<775=777,776
<779=781,780
<782=783
<783=792,784
<784=790,785
<785=788,786
<786=787
<788=789
<790=791
<792=798,793
<793=797,794
<794=796,795
<798=800,799
<801=802
<802=804,803
<804=810,805
<805=809,806
<806=808,807
<810=812,811
<813=814
<814=828,827,815
<815=826,816
<816=818,817
<818=820,819
<820=822,821
<822=823
<823=825,824
<829=830
<830=835,834,831
<831=833,832
<854=869,868,855
<855=865,862,859,856
<856=858,857
<859=861,860
<862=864,863
<865=867,866
<869=995,976,953,930,916,912,908,870
<870=899,890,887,871
<871=872
<872=873
<873=885,874
<874=883,879,877,875
<875=876
<877=878
<879=880
<880=882,881
<883=884
<885=886
<887=889,888
<890=891
<891=898,892
<892=894,893
<894=895
<895=897,896
<899=900
<900=907,901
<901=903,902
<903=904
<904=906,905
<908=909
<909=911,910
<912=913
<913=915,914
<916=917
<917=929,928,918
<918=927,919
<919=925,920
<920=923,921
<921=922
<923=924
<925=926
<930=931
<931=944,932
<932=942,933
<933=940,938,936,934
<934=935
<936=937
<938=939
<940=941
<942=943
<944=950,945
<945=949,946
<946=948,947
<950=952,951
<953=954
<954=967,955
<955=965,956
<956=963,961,959,957
<957=958
<959=960
<961=962
<963=964
<965=966
<967=973,968
<968=972,969
<969=971,970
<973=975,974
<976=977
<977=986,978
<978=984,979
<979=982,980
<980=981
<982=983
<984=985
<986=992,987
<987=991,988
<988=990,989
<992=994,993
<995=996
<996=998,997
<998=1004,999
<999=1003,1000
<1000=1002,1001
<1004=1006,1005
<1026=1035,1034,1027
<1027=1031,1028
<1028=1030,1029
<1031=1033,1032
<1035=1127,1115,1038,1036
<1036=1037
<1038=1106,1039
<1039=1075,1044,1040
<1040=1041
<1041=1043,1042
<1044=1069,1045
<1045=1058,1047,1046
<1047=1048
<1048=1057,1049
<1049=1053,1050
<1050=1051
<1051=1052
<1053=1054
<1054=1056,1055
<1058=1059
<1059=1065,1060
<1060=1061
<1061=1062
<1062=1064,1063
<1065=1066
<1066=1068,1067
<1069=1070
<1070=1072,1071
<1072=1074,1073
<1075=1100,1076
<1076=1089,1078,1077
<1078=1079
<1079=1088,1080
<1080=1084,1081
<1081=1082
<1082=1083
<1084=1085
<1085=1087,1086
<1089=1090
<1090=1096,1091
<1091=1092
<1092=1093
<1093=1095,1094
<1096=1097
<1097=1099,1098
<1100=1101
<1101=1103,1102
<1103=1105,1104
<1106=1107
<1107=1114,1108
<1108=1110,1109
<1110=1111
<1111=1113,1112
<1115=1116
<1116=1126,1125,1117
<1117=1124,1118
<1118=1120,1119
<1120=1121
<1121=1123,1122
<1127=1128
<1128=1130,1129
<1144=1153,1152,1145
<1145=1149,1146
<1146=1148,1147
<1149=1151,1150
<1153=1154
<1154=1155
<1155=1159,1156
<1156=1158,1157
<1159=1161,1160
<1169=1178,1177,1170
<1170=1174,1171
<1171=1173,1172
<1174=1176,1175
<1178=1381,1363,1331,1313,1281,1263,1231,1213,1181,1179
<1179=1180
<1181=1211,1182
<1182=1183
<1183=1210,1184
<1184=1209,1185
<1185=1207,1186
<1186=1187
<1187=1188
<1188=1206,1189
<1189=1198,1190
<1190=1196,1191
<1191=1194,1192
<1192=1193
<1194=1195
<1196=1197
<1198=1204,1199
<1199=1202,1200
<1200=1201
<1202=1203
<1204=1205
<1207=1208
<1211=1212
<1213=1214
<1214=1230,1229,1215
<1215=1228,1216
<1216=1226,1217
<1217=1224,1222,1220,1218
<1218=1219
<1220=1221
<1222=1223
<1224=1225
<1226=1227
<1231=1261,1232
<1232=1233
<1233=1260,1234
<1234=1259,1235
<1235=1257,1236
<1236=1237
<1237=1238
<1238=1256,1239
<1239=1248,1240
<1240=1246,1241
<1241=1244,1242
<1242=1243
<1244=1245
<1246=1247
<1248=1254,1249
<1249=1252,1250
<1250=1251
<1252=1253
<1254=1255
<1257=1258
<1261=1262
<1263=1264
<1264=1280,1279,1265
<1265=1278,1266
<1266=1276,1267
<1267=1274,1272,1270,1268
<1268=1269
<1270=1271
<1272=1273
<1274=1275
<1276=1277
<1281=1311,1282
<1282=1283
<1283=1310,1284
<1284=1309,1285
<1285=1307,1286
<1286=1287
<1287=1288
<1288=1306,1289
<1289=1298,1290
<1290=1296,1291
<1291=1294,1292
<1292=1293
<1294=1295
<1296=1297
<1298=1304,1299
<1299=1302,1300
<1300=1301
<1302=1303
<1304=1305
<1307=1308
<1311=1312
<1313=1314
<1314=1330,1329,1315
<1315=1328,1316
<1316=1326,1317
<1317=1324,1322,1320,1318
<1318=1319
<1320=1321
<1322=1323
<1324=1325
<1326=1327
<1331=1361,1332
<1332=1333
<1333=1360,1334
<1334=1359,1335
<1335=1357,1336
<1336=1337
<1337=1338
<1338=1356,1339
<1339=1348,1340
<1340=1346,1341
<1341=1344,1342
<1342=1343
<1344=1345
<1346=1347
<1348=1354,1349
<1349=1352,1350
<1350=1351
<1352=1353
<1354=1355
<1357=1358
<1361=1362
<1363=1364
<1364=1380,1379,1365
<1365=1378,1366
<1366=1376,1367
<1367=1374,1372,1370,1368
<1368=1369
<1370=1371
<1372=1373
<1374=1375
<1376=1377
<1381=1382
<1382=1387,1386,1383
<1383=1385,1384
<1403=1412,1411,1404
<1404=1408,1405
<1405=1407,1406
<1408=1410,1409
<1412=1505,1501,1422,1413
<1413=1414
<1414=1418,1415
<1415=1416
<1416=1417
<1418=1419
<1419=1421,1420
<1422=1493,1489,1486,1423
<1423=1424
<1424=1476,1472,1469,1425
<1425=1463,1457,1442,1426
<1426=1436,1427
<1427=1428
<1428=1432,1429
<1429=1430
<1430=1431
<1432=1433
<1433=1435,1434
<1436=1437
<1437=1439,1438
<1439=1441,1440
<1442=1443
<1443=1454,1444
<1444=1453,1445
<1445=1451,1446
<1446=1449,1447
<1447=1448
<1449=1450
<1451=1452
<1454=1456,1455
<1457=1458
<1458=1460,1459
<1460=1462,1461
<1463=1464
<1464=1466,1465
<1466=1468,1467
<1469=1471,1470
<1472=1473
<1473=1475,1474
<1476=1477
<1477=1478
<1478=1485,1484,1479
<1479=1483,1480
<1480=1482,1481
<1486=1488,1487
<1489=1490
<1490=1492,1491
<1493=1494
<1494=1495
<1495=1500,1499,1496
<1496=1498,1497
<1501=1502
<1502=1504,1503
<1505=1506
<1506=1515,1514,1507
<1507=1513,1508
<1508=1510,1509
<1510=1512,1511
<1533=1539,1538,1534
<1534=1535
<1535=1537,1536
<1539=1707,1703,1677,1670,1658,1565,1540
<1540=1548,1545,1541
<1541=1542
<1542=1543
<1543=1544
<1545=1546
<1546=1547
<1548=1549
<1549=1559,1550
<1550=1552,1551
<1552=1558,1553
<1553=1555,1554
<1555=1557,1556
<1559=1561,1560
<1561=1562
<1562=1564,1563
<1565=1649,1566
<1566=1567
<1567=1637,1581,1568
<1568=1569
<1569=1570
<1570=1571
<1571=1580,1572
<1572=1576,1573
<1573=1574
<1574=1575
<1576=1577
<1577=1579,1578
<1581=1629,1621,1586,1582
<1582=1583
<1583=1585,1584
<1586=1612,1603,1600,1587
<1587=1594,1588
<1588=1589
<1589=1591,1590
<1591=1593,1592
<1594=1595
<1595=1597,1596
<1597=1599,1598
<1600=1602,1601
<1603=1604
<1604=1611,1605
<1605=1607,1606
<1607=1608
<1608=1610,1609
<1612=1613
<1613=1620,1614
<1614=1616,1615
<1616=1617
<1617=1619,1618
<1621=1622
<1622=1628,1623
<1623=1627,1624
<1624=1626,1625
<1629=1630
<1630=1636,1631
<1631=1635,1632
<1632=1634,1633
<1637=1638
<1638=1644,1639
<1639=1643,1640
<1640=1642,1641
<1644=1648,1645
<1645=1647,1646
<1649=1650
<1650=1657,1651
<1651=1653,1652
<1653=1654
<1654=1656,1655
<1658=1659
<1659=1669,1668,1660
<1660=1667,1661
<1661=1663,1662
<1663=1664
<1664=1666,1665
<1670=1674,1671
<1671=1673,1672
<1674=1676,1675
<1677=1695,1687,1684,1678
<1678=1679
<1679=1681,1680
<1681=1683,1682
<1684=1686,1685
<1687=1688
<1688=1694,1689
<1689=1691,1690
<1691=1693,1692
<1695=1696
<1696=1697
<1697=1702,1701,1698
<1698=1700,1699
<1703=1704
<1704=1706,1705
<1707=1708
<1708=1710,1709
