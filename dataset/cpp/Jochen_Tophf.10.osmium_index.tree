>12	FunctionDef	dump_dense ()
>13	ParameterList	 
>14	ReturnType	void
>15	CompoundStatement	 
>16	ForStatement	for ( size_t i = 0 ; i < index . size ( ) ; ++ i )
>17	CompoundStatement	 
>18	IfStatement	if ( index . get ( i ) != TValue ( ) )
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	ShiftExpression	std 
>22	ShiftExpression	i << \" \" << index . get ( i ) << \"\n\"
>23	ShiftExpression	\" \" << index . get ( i ) << \"\n\"
>24	ShiftExpression	index . get ( i ) << \"\n\"
>25	PrimaryExpression	\"\n\"
>26	CallExpression	index . get ( i )
>27	ArgumentList	i
>28	Argument	i
>29	Identifier	i
>30	Callee	index . get
>31	MemberAccess	index . get
>32	Identifier	get
>33	Identifier	index
>34	PrimaryExpression	\" \"
>35	Identifier	i
>36	Identifier	std 
>37	Condition	 
>38	EqualityExpression	index . get ( i ) != TValue ( )
>39	CallExpression	TValue ( )
>40	ArgumentList	 
>41	Callee	TValue
>42	Identifier	TValue
>43	CallExpression	index . get ( i )
>44	ArgumentList	i
>45	Argument	i
>46	Identifier	i
>47	Callee	index . get
>48	MemberAccess	index . get
>49	Identifier	get
>50	Identifier	index
>51	UnaryExpression	 
>52	Identifier	i
>53	IncDec	++
>54	Condition	 
>55	RelationalExpression	i < index . size ( )
>56	CallExpression	index . size ( )
>57	ArgumentList	 
>58	Callee	index . size
>59	MemberAccess	index . size
>60	Identifier	size
>61	Identifier	index
>62	Identifier	i
>63	ForInit	 
>64	IdentifierDeclStatement	size_t i = 0 ;
>65	IdentifierDecl	i = 0
>66	AssignmentExpr	i = 0
>67	PrimaryExpression	0
>68	Identifier	i
>69	Identifier	i
>70	IdentifierDeclType	size_t
>71	IdentifierDeclStatement	 
>72	IdentifierDecl	index ( m_fd )
>73	Identifier	m_fd
>74	Identifier	index
>75	IdentifierDeclType	dense_index_type
>84	FunctionDef	dump_sparse ()
>85	ParameterList	 
>86	ReturnType	void
>87	CompoundStatement	 
>88	CompoundStatement	 
>89	ExpressionStatement	 
>90	ShiftExpression	std 
>91	ShiftExpression	element . first << \" \" << element . second << \"\n\"
>92	ShiftExpression	\" \" << element . second << \"\n\"
>93	ShiftExpression	element . second << \"\n\"
>94	PrimaryExpression	\"\n\"
>95	MemberAccess	element . second
>96	Identifier	second
>97	Identifier	element
>98	PrimaryExpression	\" \"
>99	MemberAccess	element . first
>100	Identifier	first
>101	Identifier	element
>102	Identifier	std 
>103	Statement	 
>104	Statement	 
>105	Label	 
>106	Identifier	element
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	Statement	 
>111	IdentifierDeclStatement	 
>112	IdentifierDecl	index ( m_fd )
>113	Identifier	m_fd
>114	Identifier	index
>115	IdentifierDeclType	sparse_index_type
>121	FunctionDef	search_dense (TKey key)
>122	ParameterList	TKey key
>123	Parameter	 
>124	Identifier	key
>125	ParameterType	TKey
>126	ReturnType	bool
>127	CompoundStatement	 
>128	ReturnStatement	 
>129	Identifier	true
>130	CompoundStatement	 
>131	ReturnStatement	 
>132	Identifier	false
>133	ExpressionStatement	 
>134	ShiftExpression	std 
>135	ShiftExpression	key << \" not found\" << std 
>136	ShiftExpression	\" not found\" << std 
>137	Identifier	std 
>138	PrimaryExpression	\" not found\"
>139	Identifier	key
>140	Identifier	std 
>141	Statement	 
>142	Statement	 
>143	Statement	 
>144	Statement	 
>145	Statement	 
>146	Statement	 
>147	BlockStarter	 
>148	CompoundStatement	 
>149	ExpressionStatement	std 
>150	ShiftExpression	std 
>151	ShiftExpression	key << \" \" << value << std 
>152	ShiftExpression	\" \" << value << std 
>153	ShiftExpression	value << std 
>154	Identifier	std 
>155	Identifier	value
>156	PrimaryExpression	\" \"
>157	Identifier	key
>158	Identifier	std 
>159	IdentifierDeclStatement	TValue value = index . get ( key ) ;
>160	IdentifierDecl	value = index . get ( key )
>161	AssignmentExpr	value = index . get ( key )
>162	CallExpression	index . get ( key )
>163	ArgumentList	key
>164	Argument	key
>165	Identifier	key
>166	Callee	index . get
>167	MemberAccess	index . get
>168	Identifier	get
>169	Identifier	index
>170	Identifier	value
>171	Identifier	value
>172	IdentifierDeclType	TValue
>173	IdentifierDeclStatement	 
>174	IdentifierDecl	index ( m_fd )
>175	Identifier	m_fd
>176	Identifier	index
>177	IdentifierDeclType	dense_index_type
>187	FunctionDef	search_sparse (TKey key)
>188	ParameterList	TKey key
>189	Parameter	 
>190	Identifier	key
>191	ParameterType	TKey
>192	ReturnType	bool
>193	CompoundStatement	 
>194	ReturnStatement	 
>195	Identifier	true
>196	CompoundStatement	 
>197	ExpressionStatement	 
>198	ShiftExpression	std 
>199	ShiftExpression	it -> first << \" \" << it -> second << \"\n\"
>200	ShiftExpression	\" \" << it -> second << \"\n\"
>201	ShiftExpression	it -> second << \"\n\"
>202	PrimaryExpression	\"\n\"
>203	PtrMemberAccess	it -> second
>204	Identifier	second
>205	Identifier	it
>206	PrimaryExpression	\" \"
>207	PtrMemberAccess	it -> first
>208	Identifier	first
>209	Identifier	it
>210	Identifier	std 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	ExpressionStatement	 
>215	EqualityExpression	it != positions . second
>216	MemberAccess	positions . second
>217	Identifier	second
>218	Identifier	positions
>219	Identifier	it
>220	ExpressionStatement	 
>221	AssignmentExpr	& it = positions . first
>222	MemberAccess	positions . first
>223	Identifier	first
>224	Identifier	positions
>225	UnaryOp	& it
>226	Identifier	it
>227	UnaryOperator	&
>228	Statement	 
>229	Statement	 
>230	Statement	 
>231	IfStatement	if ( positions . first == positions . second )
>232	CompoundStatement	 
>233	ReturnStatement	 
>234	Identifier	false
>235	ExpressionStatement	 
>236	ShiftExpression	std 
>237	ShiftExpression	key << \" not found\" << std 
>238	ShiftExpression	\" not found\" << std 
>239	Identifier	std 
>240	PrimaryExpression	\" not found\"
>241	Identifier	key
>242	Identifier	std 
>243	Condition	 
>244	EqualityExpression	positions . first == positions . second
>245	MemberAccess	positions . second
>246	Identifier	second
>247	Identifier	positions
>248	MemberAccess	positions . first
>249	Identifier	first
>250	Identifier	positions
>251	ExpressionStatement	 
>252	Statement	 
>253	CompoundStatement	 
>254	ReturnStatement	 
>255	RelationalExpression	lhs . first < rhs . first
>256	MemberAccess	rhs . first
>257	Identifier	first
>258	Identifier	rhs
>259	MemberAccess	lhs . first
>260	Identifier	first
>261	Identifier	lhs
>262	Statement	 
>263	Statement	 
>264	Statement	 
>265	Statement	 
>266	Statement	 
>267	Statement	 
>268	Statement	 
>269	Statement	 
>270	Statement	 
>271	Statement	 
>272	Statement	 
>273	Statement	 
>274	Statement	 
>275	Statement	 
>276	Statement	 
>277	Statement	 
>278	Statement	 
>279	Statement	 
>280	Statement	 
>281	Statement	 
>282	Statement	 
>283	Statement	 
>284	Statement	 
>285	Statement	 
>286	Statement	 
>287	Statement	 
>288	Statement	 
>289	Statement	 
>290	Statement	 
>291	Statement	 
>292	Statement	 
>293	Statement	 
>294	Statement	 
>295	Statement	 
>296	ExpressionStatement	 
>297	CompoundStatement	 
>298	Statement	 
>299	Statement	 
>300	Statement	 
>301	Statement	 
>302	Statement	 
>303	Statement	 
>304	Statement	 
>305	IdentifierDeclStatement	 
>306	IdentifierDecl	index ( m_fd )
>307	Identifier	m_fd
>308	Identifier	index
>309	IdentifierDeclType	sparse_index_type
>310	IdentifierDeclStatement	 
>311	IdentifierDecl	element_type
>312	Identifier	element_type
>313	IdentifierDeclType	typename sparse_index_type 
>331	FunctionDef	IndexSearch (int fd , bool dense_format)
>332	ParameterList	int fd , bool dense_format
>333	Parameter	 
>334	Identifier	dense_format
>335	ParameterType	bool
>336	Parameter	 
>337	Identifier	fd
>338	ParameterType	int
>339	CompoundStatement	 
>345	FunctionDef	dump ()
>346	ParameterList	 
>347	ReturnType	void
>348	CompoundStatement	 
>349	IfStatement	if ( m_dense_format )
>350	ElseStatement	else
>351	CompoundStatement	 
>352	ExpressionStatement	 
>353	CallExpression	dump_sparse ( )
>354	ArgumentList	 
>355	Callee	dump_sparse
>356	Identifier	dump_sparse
>357	CompoundStatement	 
>358	ExpressionStatement	 
>359	CallExpression	dump_dense ( )
>360	ArgumentList	 
>361	Callee	dump_dense
>362	Identifier	dump_dense
>363	Condition	 
>364	Identifier	m_dense_format
>369	FunctionDef	search (TKey key)
>370	ParameterList	TKey key
>371	Parameter	 
>372	Identifier	key
>373	ParameterType	TKey
>374	ReturnType	bool
>375	CompoundStatement	 
>376	IfStatement	if ( m_dense_format )
>377	ElseStatement	else
>378	CompoundStatement	 
>379	ReturnStatement	 
>380	CallExpression	search_sparse ( key )
>381	ArgumentList	key
>382	Argument	key
>383	Identifier	key
>384	Callee	search_sparse
>385	Identifier	search_sparse
>386	CompoundStatement	 
>387	ReturnStatement	 
>388	CallExpression	search_dense ( key )
>389	ArgumentList	key
>390	Argument	key
>391	Identifier	key
>392	Callee	search_dense
>393	Identifier	search_dense
>394	Condition	 
>395	Identifier	m_dense_format
>403	FunctionDef	search (std 
>404	ParameterList	std 
>405	Parameter	 
>406	Identifier	keys
>407	ParameterType	std 
>408	ReturnType	bool
>409	CompoundStatement	 
>410	ReturnStatement	 
>411	Identifier	found_all
>412	CompoundStatement	 
>413	IfStatement	if ( ! search ( key ) )
>414	CompoundStatement	 
>415	ExpressionStatement	 
>416	AssignmentExpr	found_all = false
>417	Identifier	false
>418	Identifier	found_all
>419	Condition	 
>420	UnaryOp	! search ( key )
>421	CallExpression	search ( key )
>422	ArgumentList	key
>423	Argument	key
>424	Identifier	key
>425	Callee	search
>426	Identifier	search
>427	UnaryOperator	!
>428	Statement	 
>429	Statement	 
>430	Label	 
>431	Identifier	key
>432	Statement	 
>433	Statement	 
>434	Statement	 
>435	Statement	 
>436	IdentifierDeclStatement	 
>437	IdentifierDecl	found_all = true
>438	AssignmentExpr	found_all = true
>439	Identifier	true
>440	Identifier	true
>441	Identifier	found_all
>442	IdentifierDeclType	bool
>456	FunctionDef	Options (int argc , char * argv [ ])
>457	ParameterList	int argc , char * argv [ ]
>458	Parameter	 
>459	Identifier	argv
>460	ParameterType	char * [ ]
>461	Parameter	 
>462	Identifier	argc
>463	ParameterType	int
>464	CompoundStatement	 
>465	BlockStarter	 
>466	CompoundStatement	 
>467	ExpressionStatement	exit ( return_code 
>468	CallExpression	exit ( return_code 
>469	ArgumentList	return_code 
>470	Argument	return_code 
>471	Identifier	return_code 
>472	Callee	exit
>473	Identifier	exit
>474	ExpressionStatement	std 
>475	ShiftExpression	std 
>476	ShiftExpression	\"Error parsing command line
>477	ShiftExpression	e . what ( ) << std 
>478	Identifier	std 
>479	CallExpression	e . what ( )
>480	ArgumentList	 
>481	Callee	e . what
>482	MemberAccess	e . what
>483	Identifier	what
>484	Identifier	e
>485	PrimaryExpression	\"Error parsing command line
>486	Identifier	std 
>487	Identifier	e
>488	BlockStarter	 
>489	CompoundStatement	 
>490	IfStatement	if ( type != \"location\" && type != \"offset\" )
>491	CompoundStatement	 
>492	ExpressionStatement	exit ( return_code 
>493	CallExpression	exit ( return_code 
>494	ArgumentList	return_code 
>495	Argument	return_code 
>496	Identifier	return_code 
>497	Callee	exit
>498	Identifier	exit
>499	ExpressionStatement	std 
>500	ShiftExpression	std 
>501	ShiftExpression	\"Unknown type '\" << type << \"'. Must be 'location' or 'offset'.\" << std 
>502	ShiftExpression	type << \"'. Must be 'location' or 'offset'.\" << std 
>503	ShiftExpression	\"'. Must be 'location' or 'offset'.\" << std 
>504	Identifier	std 
>505	PrimaryExpression	\"'. Must be 'location' or 'offset'.\"
>506	Identifier	type
>507	PrimaryExpression	\"Unknown type '\"
>508	Identifier	std 
>509	Condition	type != \"location\" && type != \"offset\"
>510	AndExpression	type != \"location\" && type != \"offset\"
>511	EqualityExpression	type != \"offset\"
>512	PrimaryExpression	\"offset\"
>513	Identifier	type
>514	EqualityExpression	type != \"location\"
>515	PrimaryExpression	\"location\"
>516	Identifier	type
>517	ExpressionStatement	 
>518	Statement	)
>519	Statement	(
>520	Statement	>
>521	Statement	string
>522	Statement	 
>523	Statement	std
>524	Statement	<
>525	Statement	as
>526	Statement	.
>527	Statement	]
>528	Statement	\"type\"
>529	Statement	[
>530	Statement	vm
>531	Statement	=
>532	Statement	type
>533	Statement	&
>534	Statement	string
>535	Statement	 
>536	Statement	std
>537	Statement	const
>538	IfStatement	if ( ! vm . count ( \"type\" ) )
>539	CompoundStatement	 
>540	ExpressionStatement	exit ( return_code 
>541	CallExpression	exit ( return_code 
>542	ArgumentList	return_code 
>543	Argument	return_code 
>544	Identifier	return_code 
>545	Callee	exit
>546	Identifier	exit
>547	ExpressionStatement	std 
>548	ShiftExpression	std 
>549	ShiftExpression	\"Need --type argument.\" << std 
>550	Identifier	std 
>551	PrimaryExpression	\"Need --type argument.\"
>552	Identifier	std 
>553	Condition	! vm . count ( \"type\" )
>554	UnaryOp	! vm . count ( \"type\" )
>555	CallExpression	vm . count ( \"type\" )
>556	ArgumentList	\"type\"
>557	Argument	\"type\"
>558	PrimaryExpression	\"type\"
>559	Callee	vm . count
>560	MemberAccess	vm . count
>561	Identifier	count
>562	Identifier	vm
>563	UnaryOperator	!
>564	IfStatement	if ( ! vm . count ( \"array\" ) && ! vm . count ( \"list\" ) )
>565	CompoundStatement	 
>566	ExpressionStatement	exit ( return_code 
>567	CallExpression	exit ( return_code 
>568	ArgumentList	return_code 
>569	Argument	return_code 
>570	Identifier	return_code 
>571	Callee	exit
>572	Identifier	exit
>573	ExpressionStatement	std 
>574	ShiftExpression	std 
>575	ShiftExpression	\"Need one of option --array or --list.\" << std 
>576	Identifier	std 
>577	PrimaryExpression	\"Need one of option --array or --list.\"
>578	Identifier	std 
>579	Condition	! vm . count ( \"array\" ) && ! vm . count ( \"list\" )
>580	AndExpression	! vm . count ( \"array\" ) && ! vm . count ( \"list\" )
>581	UnaryOp	! vm . count ( \"list\" )
>582	CallExpression	vm . count ( \"list\" )
>583	ArgumentList	\"list\"
>584	Argument	\"list\"
>585	PrimaryExpression	\"list\"
>586	Callee	vm . count
>587	MemberAccess	vm . count
>588	Identifier	count
>589	Identifier	vm
>590	UnaryOperator	!
>591	UnaryOp	! vm . count ( \"array\" )
>592	CallExpression	vm . count ( \"array\" )
>593	ArgumentList	\"array\"
>594	Argument	\"array\"
>595	PrimaryExpression	\"array\"
>596	Callee	vm . count
>597	MemberAccess	vm . count
>598	Identifier	count
>599	Identifier	vm
>600	UnaryOperator	!
>601	IfStatement	if ( vm . count ( \"array\" ) && vm . count ( \"list\" ) )
>602	CompoundStatement	 
>603	ExpressionStatement	exit ( return_code 
>604	CallExpression	exit ( return_code 
>605	ArgumentList	return_code 
>606	Argument	return_code 
>607	Identifier	return_code 
>608	Callee	exit
>609	Identifier	exit
>610	ExpressionStatement	std 
>611	ShiftExpression	std 
>612	ShiftExpression	\"Only option --array or --list allowed.\" << std 
>613	Identifier	std 
>614	PrimaryExpression	\"Only option --array or --list allowed.\"
>615	Identifier	std 
>616	Condition	vm . count ( \"array\" ) && vm . count ( \"list\" )
>617	AndExpression	vm . count ( \"array\" ) && vm . count ( \"list\" )
>618	CallExpression	vm . count ( \"list\" )
>619	ArgumentList	\"list\"
>620	Argument	\"list\"
>621	PrimaryExpression	\"list\"
>622	Callee	vm . count
>623	MemberAccess	vm . count
>624	Identifier	count
>625	Identifier	vm
>626	CallExpression	vm . count ( \"array\" )
>627	ArgumentList	\"array\"
>628	Argument	\"array\"
>629	PrimaryExpression	\"array\"
>630	Callee	vm . count
>631	MemberAccess	vm . count
>632	Identifier	count
>633	Identifier	vm
>634	IfStatement	if ( vm . count ( \"help\" ) )
>635	CompoundStatement	 
>636	ExpressionStatement	exit ( return_code 
>637	CallExpression	exit ( return_code 
>638	ArgumentList	return_code 
>639	Argument	return_code 
>640	Identifier	return_code 
>641	Callee	exit
>642	Identifier	exit
>643	ExpressionStatement	std 
>644	ShiftExpression	std 
>645	ShiftExpression	desc << \"\n\"
>646	PrimaryExpression	\"\n\"
>647	Identifier	desc
>648	Identifier	std 
>649	Condition	vm . count ( \"help\" )
>650	CallExpression	vm . count ( \"help\" )
>651	ArgumentList	\"help\"
>652	Argument	\"help\"
>653	PrimaryExpression	\"help\"
>654	Callee	vm . count
>655	MemberAccess	vm . count
>656	Identifier	count
>657	Identifier	vm
>658	ExpressionStatement	po 
>659	CallExpression	po 
>660	ArgumentList	vm
>661	Argument	vm
>662	Identifier	vm
>663	Callee	po 
>664	Identifier	po 
>665	ExpressionStatement	po 
>666	CallExpression	po 
>667	ArgumentList	po 
>668	Argument	vm
>669	Identifier	vm
>670	Argument	po 
>671	CallExpression	po 
>672	ArgumentList	argc
>673	Argument	desc
>674	Identifier	desc
>675	Argument	argv
>676	Identifier	argv
>677	Argument	argc
>678	Identifier	argc
>679	Callee	po 
>680	Identifier	po 
>681	Callee	po 
>682	Identifier	po 
>683	ExpressionStatement	 
>684	Statement	)
>685	Statement	\"Type of value ('location' or 'offset')\"
>686	Statement	,
>687	Statement	)
>688	Statement	(
>689	Statement	>
>690	Statement	string
>691	Statement	 
>692	Statement	std
>693	Statement	<
>694	Statement	value
>695	Statement	 
>696	Statement	po
>697	Statement	,
>698	Statement	\"type,t\"
>699	Statement	(
>700	Statement	)
>701	Statement	\"Search for given id (Option can appear multiple times)\"
>702	Statement	,
>703	Statement	)
>704	Statement	(
>705	Statement	>>
>706	Statement	unsigned_object_id_type
>707	Statement	 
>708	Statement	osmium
>709	Statement	<
>710	Statement	vector
>711	Statement	 
>712	Statement	std
>713	Statement	<
>714	Statement	value
>715	Statement	 
>716	Statement	po
>717	Statement	,
>718	Statement	\"search,s\"
>719	Statement	(
>720	Statement	)
>721	Statement	\"Dump contents of index file to STDOUT\"
>722	Statement	,
>723	Statement	\"dump,d\"
>724	Statement	(
>725	Statement	)
>726	Statement	\"Read given index file in list format\"
>727	Statement	,
>728	Statement	)
>729	Statement	(
>730	Statement	>
>731	Statement	string
>732	Statement	 
>733	Statement	std
>734	Statement	<
>735	Statement	value
>736	Statement	 
>737	Statement	po
>738	Statement	,
>739	Statement	\"list,l\"
>740	Statement	(
>741	Statement	)
>742	Statement	\"Read given index file in array format\"
>743	Statement	,
>744	Statement	)
>745	Statement	(
>746	Statement	>
>747	Statement	string
>748	Statement	 
>749	Statement	std
>750	Statement	<
>751	Statement	value
>752	Statement	 
>753	Statement	po
>754	Statement	,
>755	Statement	\"array,a\"
>756	Statement	(
>757	Statement	)
>758	Statement	\"Print this help message\"
>759	Statement	,
>760	Statement	\"help,h\"
>761	Statement	(
>762	Statement	)
>763	Statement	(
>764	Statement	add_options
>765	Statement	.
>766	Statement	desc
>767	IdentifierDeclStatement	po 
>768	IdentifierDecl	desc ( \"Allowed options\" )
>769	PrimaryExpression	\"Allowed options\"
>770	Identifier	desc
>771	IdentifierDeclType	po 
>785	FunctionDef	filename ()
>786	ParameterList	 
>787	ReturnType	const std 
>788	CompoundStatement	 
>789	IfStatement	if ( vm . count ( \"array\" ) )
>790	ElseStatement	else
>791	CompoundStatement	 
>792	ExpressionStatement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	Statement	 
>801	Statement	 
>802	Statement	 
>803	Statement	 
>804	Statement	 
>805	Statement	 
>806	Statement	 
>807	CompoundStatement	 
>808	ExpressionStatement	 
>809	Statement	 
>810	Statement	 
>811	Statement	 
>812	Statement	 
>813	Statement	 
>814	Statement	 
>815	Statement	 
>816	Statement	 
>817	Statement	 
>818	Statement	 
>819	Statement	 
>820	Statement	 
>821	Statement	 
>822	Statement	 
>823	Condition	 
>824	CallExpression	vm . count ( \"array\" )
>825	ArgumentList	\"array\"
>826	Argument	\"array\"
>827	PrimaryExpression	\"array\"
>828	Callee	vm . count
>829	MemberAccess	vm . count
>830	Identifier	count
>831	Identifier	vm
>837	FunctionDef	dense_format ()
>838	ParameterList	 
>839	ReturnType	bool
>840	CompoundStatement	 
>841	ReturnStatement	 
>842	EqualityExpression	vm . count ( \"array\" ) != 0
>843	PrimaryExpression	0
>844	CallExpression	vm . count ( \"array\" )
>845	ArgumentList	\"array\"
>846	Argument	\"array\"
>847	PrimaryExpression	\"array\"
>848	Callee	vm . count
>849	MemberAccess	vm . count
>850	Identifier	count
>851	Identifier	vm
>857	FunctionDef	do_dump ()
>858	ParameterList	 
>859	ReturnType	bool
>860	CompoundStatement	 
>861	ReturnStatement	 
>862	EqualityExpression	vm . count ( \"dump\" ) != 0
>863	PrimaryExpression	0
>864	CallExpression	vm . count ( \"dump\" )
>865	ArgumentList	\"dump\"
>866	Argument	\"dump\"
>867	PrimaryExpression	\"dump\"
>868	Callee	vm . count
>869	MemberAccess	vm . count
>870	Identifier	count
>871	Identifier	vm
>877	FunctionDef	search_keys ()
>878	ParameterList	 
>879	ReturnType	std 
>880	CompoundStatement	 
>881	ExpressionStatement	 
>882	Statement	 
>883	Statement	 
>884	Statement	 
>885	Statement	 
>886	Statement	 
>887	Statement	 
>888	Statement	 
>889	Statement	 
>890	Statement	 
>891	Statement	 
>892	Statement	 
>893	Statement	 
>894	Statement	 
>895	Statement	 
>896	Statement	 
>897	Statement	 
>898	Statement	 
>899	Statement	 
>903	FunctionDef	type_is (const char * type)
>904	ParameterList	const char * type
>905	Parameter	 
>906	Identifier	type
>907	ParameterType	const char *
>908	ReturnType	bool
>909	CompoundStatement	 
>910	ExpressionStatement	 
>911	Identifier	type
>912	Statement	 
>913	Statement	 
>914	Statement	 
>915	Statement	 
>916	Statement	 
>917	Statement	 
>918	Statement	 
>919	Statement	 
>920	Statement	 
>921	Statement	 
>922	Statement	 
>923	Statement	 
>924	Statement	 
>925	Statement	 
>926	Statement	 
>931	FunctionDef	main (int argc , char * argv [ ])
>932	ParameterList	int argc , char * argv [ ]
>933	Parameter	 
>934	Identifier	argv
>935	ParameterType	char * [ ]
>936	Parameter	 
>937	Identifier	argc
>938	ParameterType	int
>939	ReturnType	int
>940	CompoundStatement	 
>941	ExpressionStatement	 
>942	CallExpression	exit ( result_okay ? return_code 
>943	ArgumentList	result_okay ? return_code 
>944	Argument	result_okay ? return_code 
>945	ConditionalExpression	result_okay ? return_code 
>946	Identifier	return_code 
>947	Identifier	return_code 
>948	Condition	result_okay
>949	Identifier	result_okay
>950	Callee	exit
>951	Identifier	exit
>952	IfStatement	if ( options . type_is ( \"location\" ) )
>953	ElseStatement	else
>954	CompoundStatement	 
>955	IfStatement	if ( options . do_dump ( ) )
>956	ElseStatement	else
>957	CompoundStatement	 
>958	ExpressionStatement	 
>959	AssignmentExpr	result_okay = is . search ( options . search_keys ( ) )
>960	CallExpression	is . search ( options . search_keys ( ) )
>961	ArgumentList	options . search_keys ( )
>962	Argument	options . search_keys ( )
>963	CallExpression	options . search_keys ( )
>964	ArgumentList	 
>965	Callee	options . search_keys
>966	MemberAccess	options . search_keys
>967	Identifier	search_keys
>968	Identifier	options
>969	Callee	is . search
>970	MemberAccess	is . search
>971	Identifier	search
>972	Identifier	is
>973	Identifier	result_okay
>974	CompoundStatement	 
>975	ExpressionStatement	 
>976	CallExpression	is . dump ( )
>977	ArgumentList	 
>978	Callee	is . dump
>979	MemberAccess	is . dump
>980	Identifier	dump
>981	Identifier	is
>982	Condition	 
>983	CallExpression	options . do_dump ( )
>984	ArgumentList	 
>985	Callee	options . do_dump
>986	MemberAccess	options . do_dump
>987	Identifier	do_dump
>988	Identifier	options
>989	IdentifierDeclStatement	 
>990	IdentifierDecl	is ( fd , options . dense_format ( ) )
>991	Expression	fd , options . dense_format ( )
>992	CallExpression	options . dense_format ( )
>993	ArgumentList	 
>994	Callee	options . dense_format
>995	MemberAccess	options . dense_format
>996	Identifier	dense_format
>997	Identifier	options
>998	Identifier	fd
>999	Identifier	is
>1000	IdentifierDeclType	IndexSearch < osmium 
>1001	CompoundStatement	 
>1002	IfStatement	if ( options . do_dump ( ) )
>1003	ElseStatement	else
>1004	CompoundStatement	 
>1005	ExpressionStatement	 
>1006	AssignmentExpr	result_okay = is . search ( options . search_keys ( ) )
>1007	CallExpression	is . search ( options . search_keys ( ) )
>1008	ArgumentList	options . search_keys ( )
>1009	Argument	options . search_keys ( )
>1010	CallExpression	options . search_keys ( )
>1011	ArgumentList	 
>1012	Callee	options . search_keys
>1013	MemberAccess	options . search_keys
>1014	Identifier	search_keys
>1015	Identifier	options
>1016	Callee	is . search
>1017	MemberAccess	is . search
>1018	Identifier	search
>1019	Identifier	is
>1020	Identifier	result_okay
>1021	CompoundStatement	 
>1022	ExpressionStatement	 
>1023	CallExpression	is . dump ( )
>1024	ArgumentList	 
>1025	Callee	is . dump
>1026	MemberAccess	is . dump
>1027	Identifier	dump
>1028	Identifier	is
>1029	Condition	 
>1030	CallExpression	options . do_dump ( )
>1031	ArgumentList	 
>1032	Callee	options . do_dump
>1033	MemberAccess	options . do_dump
>1034	Identifier	do_dump
>1035	Identifier	options
>1036	IdentifierDeclStatement	 
>1037	IdentifierDecl	is ( fd , options . dense_format ( ) )
>1038	Expression	fd , options . dense_format ( )
>1039	CallExpression	options . dense_format ( )
>1040	ArgumentList	 
>1041	Callee	options . dense_format
>1042	MemberAccess	options . dense_format
>1043	Identifier	dense_format
>1044	Identifier	options
>1045	Identifier	fd
>1046	Identifier	is
>1047	IdentifierDeclType	IndexSearch < osmium 
>1048	Condition	 
>1049	CallExpression	options . type_is ( \"location\" )
>1050	ArgumentList	\"location\"
>1051	Argument	\"location\"
>1052	PrimaryExpression	\"location\"
>1053	Callee	options . type_is
>1054	MemberAccess	options . type_is
>1055	Identifier	type_is
>1056	Identifier	options
>1057	IdentifierDeclStatement	 
>1058	IdentifierDecl	result_okay = true
>1059	AssignmentExpr	result_okay = true
>1060	Identifier	true
>1061	Identifier	true
>1062	Identifier	result_okay
>1063	IdentifierDeclType	bool
>1064	IdentifierDeclStatement	 
>1065	IdentifierDecl	fd = open ( options . filename ( ) . c_str ( ) , O_RDWR )
>1066	AssignmentExpr	fd = open ( options . filename ( ) . c_str ( ) , O_RDWR )
>1067	CallExpression	open ( options . filename ( ) . c_str ( ) , O_RDWR )
>1068	ArgumentList	options . filename ( ) . c_str ( )
>1069	Argument	O_RDWR
>1070	Identifier	O_RDWR
>1071	Argument	options . filename ( ) . c_str ( )
>1072	CallExpression	options . filename ( ) . c_str ( )
>1073	ArgumentList	 
>1074	Callee	options . filename ( ) . c_str
>1075	MemberAccess	options . filename ( ) . c_str
>1076	Identifier	c_str
>1077	CallExpression	options . filename ( )
>1078	ArgumentList	 
>1079	Callee	options . filename
>1080	MemberAccess	options . filename
>1081	Identifier	filename
>1082	Identifier	options
>1083	Callee	open
>1084	Identifier	open
>1085	Identifier	fd
>1086	Identifier	fd
>1087	IdentifierDeclType	int
>1088	ExpressionStatement	 
>1089	ShiftExpression	std 
>1090	ShiftExpression	std 
>1091	CallExpression	std 
>1092	ArgumentList	7
>1093	Argument	7
>1094	PrimaryExpression	7
>1095	Callee	std 
>1096	Identifier	std 
>1097	Identifier	std 
>1098	Identifier	std 
>1099	IdentifierDeclStatement	 
>1100	IdentifierDecl	options ( argc , argv )
>1101	Expression	argc , argv
>1102	Identifier	argv
>1103	Identifier	argc
>1104	Identifier	options
>1105	IdentifierDeclType	Options
>1106	ExpressionStatement	 
>1107	CallExpression	std 
>1108	ArgumentList	false
>1109	Argument	false
>1110	Identifier	false
>1111	Callee	std 
>1112	Identifier	std 
<12=15,14,13
<15=71,16
<16=63,54,51,17
<17=18
<18=37,19
<19=20
<20=21
<21=36,22
<22=35,23
<23=34,24
<24=26,25
<26=30,27
<27=28
<28=29
<30=31
<31=33,32
<37=38
<38=43,39
<39=41,40
<41=42
<43=47,44
<44=45
<45=46
<47=48
<48=50,49
<51=53,52
<54=55
<55=62,56
<56=58,57
<58=59
<59=61,60
<63=64
<64=65
<65=70,69,66
<66=68,67
<71=72
<72=75,74,73
<84=87,86,85
<87=111,110,109,108,107,105,104,103,88
<88=89
<89=90
<90=102,91
<91=99,92
<92=98,93
<93=95,94
<95=97,96
<99=101,100
<105=106
<111=112
<112=115,114,113
<121=127,126,122
<122=123
<123=125,124
<127=173,147,146,145,144,143,142,141,130,128
<128=129
<130=133,131
<131=132
<133=134
<134=140,135
<135=139,136
<136=138,137
<147=148
<148=159,149
<149=150
<150=158,151
<151=157,152
<152=156,153
<153=155,154
<159=160
<160=172,171,161
<161=170,162
<162=166,163
<163=164
<164=165
<166=167
<167=169,168
<173=174
<174=177,176,175
<187=193,192,188
<188=189
<189=191,190
<193=310,305,304,303,194,196,211,212,213,214,220,228,229,230,231,251,252,253,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297
<194=195
<196=197
<197=198
<198=210,199
<199=207,200
<200=206,201
<201=203,202
<203=205,204
<207=209,208
<214=215
<215=219,216
<216=218,217
<220=221
<221=225,222
<222=224,223
<225=227,226
<231=243,232
<232=235,233
<233=234
<235=236
<236=242,237
<237=241,238
<238=240,239
<243=244
<244=248,245
<245=247,246
<248=250,249
<253=254
<254=255
<255=259,256
<256=258,257
<259=261,260
<297=302,301,300,299,298
<305=306
<306=309,308,307
<310=311
<311=313,312
<331=339,332
<332=336,333
<333=335,334
<336=338,337
<345=348,347,346
<348=349
<349=363,357,350
<350=351
<351=352
<352=353
<353=355,354
<355=356
<357=358
<358=359
<359=361,360
<361=362
<363=364
<369=375,374,370
<370=371
<371=373,372
<375=376
<376=394,386,377
<377=378
<378=379
<379=380
<380=384,381
<381=382
<382=383
<384=385
<386=387
<387=388
<388=392,389
<389=390
<390=391
<392=393
<394=395
<403=409,408,404
<404=405
<405=407,406
<409=436,435,434,433,432,430,429,428,412,410
<410=411
<412=413
<413=419,414
<414=415
<415=416
<416=418,417
<419=420
<420=427,421
<421=425,422
<422=423
<423=424
<425=426
<430=431
<436=437
<437=442,441,438
<438=440,439
<456=464,457
<457=461,458
<458=460,459
<461=463,462
<464=488,465
<465=487,466
<466=474,467
<467=468
<468=472,469
<469=470
<470=471
<472=473
<474=475
<475=486,476
<476=485,477
<477=479,478
<479=481,480
<481=482
<482=484,483
<488=489
<489=767,766,765,764,763,762,761,760,759,758,757,756,755,754,753,752,751,750,749,748,747,746,745,744,743,742,741,740,739,738,737,736,735,734,733,732,731,730,729,728,727,726,725,724,723,722,721,720,719,718,717,716,715,714,713,712,711,710,709,708,707,706,705,490,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,564,601,634,658,665,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704
<490=509,491
<491=499,492
<492=493
<493=497,494
<494=495
<495=496
<497=498
<499=500
<500=508,501
<501=507,502
<502=506,503
<503=505,504
<509=510
<510=514,511
<511=513,512
<514=516,515
<538=553,539
<539=547,540
<540=541
<541=545,542
<542=543
<543=544
<545=546
<547=548
<548=552,549
<549=551,550
<553=554
<554=563,555
<555=559,556
<556=557
<557=558
<559=560
<560=562,561
<564=579,565
<565=573,566
<566=567
<567=571,568
<568=569
<569=570
<571=572
<573=574
<574=578,575
<575=577,576
<579=580
<580=591,581
<581=590,582
<582=586,583
<583=584
<584=585
<586=587
<587=589,588
<591=600,592
<592=596,593
<593=594
<594=595
<596=597
<597=599,598
<601=616,602
<602=610,603
<603=604
<604=608,605
<605=606
<606=607
<608=609
<610=611
<611=615,612
<612=614,613
<616=617
<617=626,618
<618=622,619
<619=620
<620=621
<622=623
<623=625,624
<626=630,627
<627=628
<628=629
<630=631
<631=633,632
<634=649,635
<635=643,636
<636=637
<637=641,638
<638=639
<639=640
<641=642
<643=644
<644=648,645
<645=647,646
<649=650
<650=654,651
<651=652
<652=653
<654=655
<655=657,656
<658=659
<659=663,660
<660=661
<661=662
<663=664
<665=666
<666=681,667
<667=670,668
<668=669
<670=671
<671=679,672
<672=677,675,673
<673=674
<675=676
<677=678
<679=680
<681=682
<767=768
<768=771,770,769
<785=788,787,786
<788=789
<789=823,807,790
<790=791
<791=806,805,804,803,802,801,800,799,798,797,796,795,794,793,792
<807=822,821,820,819,818,817,816,815,814,813,812,811,810,809,808
<823=824
<824=828,825
<825=826
<826=827
<828=829
<829=831,830
<837=840,839,838
<840=841
<841=842
<842=844,843
<844=848,845
<845=846
<846=847
<848=849
<849=851,850
<857=860,859,858
<860=861
<861=862
<862=864,863
<864=868,865
<865=866
<866=867
<868=869
<869=871,870
<877=880,879,878
<880=899,898,897,896,895,894,893,892,891,890,889,888,887,886,885,884,883,882,881
<903=909,908,904
<904=905
<905=907,906
<909=926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,910
<910=911
<931=940,939,932
<932=936,933
<933=935,934
<936=938,937
<940=1106,1099,1088,1064,1057,952,941
<941=942
<942=950,943
<943=944
<944=945
<945=948,947,946
<948=949
<950=951
<952=1048,1001,953
<953=954
<954=989,955
<955=982,974,956
<956=957
<957=958
<958=959
<959=973,960
<960=969,961
<961=962
<962=963
<963=965,964
<965=966
<966=968,967
<969=970
<970=972,971
<974=975
<975=976
<976=978,977
<978=979
<979=981,980
<982=983
<983=985,984
<985=986
<986=988,987
<989=990
<990=1000,999,991
<991=998,992
<992=994,993
<994=995
<995=997,996
<1001=1036,1002
<1002=1029,1021,1003
<1003=1004
<1004=1005
<1005=1006
<1006=1020,1007
<1007=1016,1008
<1008=1009
<1009=1010
<1010=1012,1011
<1012=1013
<1013=1015,1014
<1016=1017
<1017=1019,1018
<1021=1022
<1022=1023
<1023=1025,1024
<1025=1026
<1026=1028,1027
<1029=1030
<1030=1032,1031
<1032=1033
<1033=1035,1034
<1036=1037
<1037=1047,1046,1038
<1038=1045,1039
<1039=1041,1040
<1041=1042
<1042=1044,1043
<1048=1049
<1049=1053,1050
<1050=1051
<1051=1052
<1053=1054
<1054=1056,1055
<1057=1058
<1058=1063,1062,1059
<1059=1061,1060
<1064=1065
<1065=1087,1086,1066
<1066=1085,1067
<1067=1083,1068
<1068=1071,1069
<1069=1070
<1071=1072
<1072=1074,1073
<1074=1075
<1075=1077,1076
<1077=1079,1078
<1079=1080
<1080=1082,1081
<1083=1084
<1088=1089
<1089=1098,1090
<1090=1097,1091
<1091=1095,1092
<1092=1093
<1093=1094
<1095=1096
<1099=1100
<1100=1105,1104,1101
<1101=1103,1102
<1106=1107
<1107=1111,1108
<1108=1109
<1109=1110
<1111=1112
