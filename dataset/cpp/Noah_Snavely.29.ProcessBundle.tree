>3	FunctionDef	BundlerApp 
>4	ParameterList	char * rotate_file
>5	Parameter	 
>6	Identifier	rotate_file
>7	ParameterType	char *
>8	ReturnType	void
>9	CompoundStatement	 
>10	ExpressionStatement	 
>11	CallExpression	fclose ( f )
>12	ArgumentList	f
>13	Argument	f
>14	Identifier	f
>15	Callee	fclose
>16	Identifier	fclose
>17	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>18	CompoundStatement	 
>19	ExpressionStatement	 
>20	CallExpression	fprintf ( f , \"\n\" )
>21	ArgumentList	f
>22	Argument	\"\n\"
>23	PrimaryExpression	\"\n\"
>24	Argument	f
>25	Identifier	f
>26	Callee	fprintf
>27	Identifier	fprintf
>28	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>29	CompoundStatement	 
>30	ExpressionStatement	 
>31	CallExpression	fprintf ( f , \" %d %d %.10f %.10f\" , view_new , p . m_views [ j ] . second , x , y )
>32	ArgumentList	f
>33	Argument	y
>34	Identifier	y
>35	Argument	x
>36	Identifier	x
>37	Argument	p . m_views [ j ] . second
>38	MemberAccess	p . m_views [ j ] . second
>39	Identifier	second
>40	ArrayIndexing	p . m_views [ j ]
>41	Identifier	j
>42	MemberAccess	p . m_views
>43	Identifier	m_views
>44	Identifier	p
>45	Argument	view_new
>46	Identifier	view_new
>47	Argument	\" %d %d %.10f %.10f\"
>48	PrimaryExpression	\" %d %d %.10f %.10f\"
>49	Argument	f
>50	Identifier	f
>51	Callee	fprintf
>52	Identifier	fprintf
>53	IdentifierDeclStatement	 
>54	IdentifierDecl	y = m_image_data [ view ] . m_keys [ key ] . m_y
>55	AssignmentExpr	y = m_image_data [ view ] . m_keys [ key ] . m_y
>56	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_y
>57	Identifier	m_y
>58	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>59	Identifier	key
>60	MemberAccess	m_image_data [ view ] . m_keys
>61	Identifier	m_keys
>62	ArrayIndexing	m_image_data [ view ]
>63	Identifier	view
>64	Identifier	m_image_data
>65	Identifier	y
>66	Identifier	y
>67	IdentifierDeclType	double
>68	IdentifierDeclStatement	 
>69	IdentifierDecl	x = m_image_data [ view ] . m_keys [ key ] . m_x
>70	AssignmentExpr	x = m_image_data [ view ] . m_keys [ key ] . m_x
>71	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_x
>72	Identifier	m_x
>73	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>74	Identifier	key
>75	MemberAccess	m_image_data [ view ] . m_keys
>76	Identifier	m_keys
>77	ArrayIndexing	m_image_data [ view ]
>78	Identifier	view
>79	Identifier	m_image_data
>80	Identifier	x
>81	Identifier	x
>82	IdentifierDeclType	double
>83	IfStatement	if ( ! m_image_data [ view ] . m_keys_loaded )
>84	ExpressionStatement	 
>85	CallExpression	m_image_data [ view ] . LoadKeys ( false )
>86	ArgumentList	false
>87	Argument	false
>88	Identifier	false
>89	Callee	m_image_data [ view ] . LoadKeys
>90	MemberAccess	m_image_data [ view ] . LoadKeys
>91	Identifier	LoadKeys
>92	ArrayIndexing	m_image_data [ view ]
>93	Identifier	view
>94	Identifier	m_image_data
>95	Condition	 
>96	UnaryOp	! m_image_data [ view ] . m_keys_loaded
>97	MemberAccess	m_image_data [ view ] . m_keys_loaded
>98	Identifier	m_keys_loaded
>99	ArrayIndexing	m_image_data [ view ]
>100	Identifier	view
>101	Identifier	m_image_data
>102	UnaryOperator	!
>103	IdentifierDeclStatement	 
>104	IdentifierDecl	view = p . m_views [ j ] . first
>105	AssignmentExpr	view = p . m_views [ j ] . first
>106	MemberAccess	p . m_views [ j ] . first
>107	Identifier	first
>108	ArrayIndexing	p . m_views [ j ]
>109	Identifier	j
>110	MemberAccess	p . m_views
>111	Identifier	m_views
>112	Identifier	p
>113	Identifier	view
>114	Identifier	view
>115	IdentifierDeclType	int
>116	IncDecOp	 
>117	IncDec	++
>118	Identifier	j
>119	Condition	 
>120	RelationalExpression	j < num_visible
>121	Identifier	num_visible
>122	Identifier	j
>123	ForInit	 
>124	IdentifierDeclStatement	int j = 0 ;
>125	IdentifierDecl	j = 0
>126	AssignmentExpr	j = 0
>127	PrimaryExpression	0
>128	Identifier	j
>129	Identifier	j
>130	IdentifierDeclType	int
>131	ExpressionStatement	 
>132	CallExpression	fprintf ( f , \"%d\" , num_visible )
>133	ArgumentList	f
>134	Argument	num_visible
>135	Identifier	num_visible
>136	Argument	\"%d\"
>137	PrimaryExpression	\"%d\"
>138	Argument	f
>139	Identifier	f
>140	Callee	fprintf
>141	Identifier	fprintf
>142	IdentifierDeclStatement	 
>143	IdentifierDecl	num_visible = ( int ) p . m_views . size ( )
>144	AssignmentExpr	num_visible = ( int ) p . m_views . size ( )
>145	CastExpression	( int ) p . m_views . size ( )
>146	CallExpression	p . m_views . size ( )
>147	ArgumentList	 
>148	Callee	p . m_views . size
>149	MemberAccess	p . m_views . size
>150	Identifier	size
>151	MemberAccess	p . m_views
>152	Identifier	m_views
>153	Identifier	p
>154	CastTarget	int
>155	Identifier	num_visible
>156	Identifier	num_visible
>157	IdentifierDeclType	int
>158	ExpressionStatement	 
>159	CallExpression	fprintf ( f , \"%0.5e %0.5e %0.5e\n\" , p . m_color [ 0 ] , p . m_color [ 1 ] , p . m_color [ 2 ] )
>160	ArgumentList	f
>161	Argument	p . m_color [ 2 ]
>162	ArrayIndexing	p . m_color [ 2 ]
>163	PrimaryExpression	2
>164	MemberAccess	p . m_color
>165	Identifier	m_color
>166	Identifier	p
>167	Argument	p . m_color [ 1 ]
>168	ArrayIndexing	p . m_color [ 1 ]
>169	PrimaryExpression	1
>170	MemberAccess	p . m_color
>171	Identifier	m_color
>172	Identifier	p
>173	Argument	p . m_color [ 0 ]
>174	ArrayIndexing	p . m_color [ 0 ]
>175	PrimaryExpression	0
>176	MemberAccess	p . m_color
>177	Identifier	m_color
>178	Identifier	p
>179	Argument	\"%0.5e %0.5e %0.5e\n\"
>180	PrimaryExpression	\"%0.5e %0.5e %0.5e\n\"
>181	Argument	f
>182	Identifier	f
>183	Callee	fprintf
>184	Identifier	fprintf
>185	ExpressionStatement	 
>186	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>187	ArgumentList	f
>188	Argument	p . m_pos [ 2 ]
>189	ArrayIndexing	p . m_pos [ 2 ]
>190	PrimaryExpression	2
>191	MemberAccess	p . m_pos
>192	Identifier	m_pos
>193	Identifier	p
>194	Argument	p . m_pos [ 1 ]
>195	ArrayIndexing	p . m_pos [ 1 ]
>196	PrimaryExpression	1
>197	MemberAccess	p . m_pos
>198	Identifier	m_pos
>199	Identifier	p
>200	Argument	p . m_pos [ 0 ]
>201	ArrayIndexing	p . m_pos [ 0 ]
>202	PrimaryExpression	0
>203	MemberAccess	p . m_pos
>204	Identifier	m_pos
>205	Identifier	p
>206	Argument	\"%0.9e %0.9e %0.9e\n\"
>207	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>208	Argument	f
>209	Identifier	f
>210	Callee	fprintf
>211	Identifier	fprintf
>212	IdentifierDeclStatement	 
>213	IdentifierDecl	& p = m_point_data [ i ]
>214	AssignmentExpr	& p = m_point_data [ i ]
>215	ArrayIndexing	m_point_data [ i ]
>216	Identifier	i
>217	Identifier	m_point_data
>218	Identifier	p
>219	Identifier	p
>220	IdentifierDeclType	PointData &
>221	IncDecOp	 
>222	IncDec	++
>223	Identifier	i
>224	Condition	 
>225	RelationalExpression	i < num_points
>226	Identifier	num_points
>227	Identifier	i
>228	ForInit	 
>229	IdentifierDeclStatement	int i = 0 ;
>230	IdentifierDecl	i = 0
>231	AssignmentExpr	i = 0
>232	PrimaryExpression	0
>233	Identifier	i
>234	Identifier	i
>235	IdentifierDeclType	int
>236	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>237	CompoundStatement	 
>238	ExpressionStatement	 
>239	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , t [ 0 ] , t [ 1 ] , t [ 2 ] )
>240	ArgumentList	f
>241	Argument	t [ 2 ]
>242	ArrayIndexing	t [ 2 ]
>243	PrimaryExpression	2
>244	Identifier	t
>245	Argument	t [ 1 ]
>246	ArrayIndexing	t [ 1 ]
>247	PrimaryExpression	1
>248	Identifier	t
>249	Argument	t [ 0 ]
>250	ArrayIndexing	t [ 0 ]
>251	PrimaryExpression	0
>252	Identifier	t
>253	Argument	\"%0.9e %0.9e %0.9e\n\"
>254	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>255	Argument	f
>256	Identifier	f
>257	Callee	fprintf
>258	Identifier	fprintf
>259	IdentifierDeclStatement	 
>260	IdentifierDecl	* t = m_image_data [ i ] . m_camera . m_t
>261	AssignmentExpr	* t = m_image_data [ i ] . m_camera . m_t
>262	MemberAccess	m_image_data [ i ] . m_camera . m_t
>263	Identifier	m_t
>264	MemberAccess	m_image_data [ i ] . m_camera
>265	Identifier	m_camera
>266	ArrayIndexing	m_image_data [ i ]
>267	Identifier	i
>268	Identifier	m_image_data
>269	Identifier	t
>270	Identifier	t
>271	IdentifierDeclType	double *
>272	ExpressionStatement	 
>273	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 6 ] , m_image_data [ i ] . m_camera \
>274	ArgumentList	f
>275	Argument	m_image_data [ i ] . m_camera . m_R [ 8 ]
>276	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 8 ]
>277	PrimaryExpression	8
>278	MemberAccess	m_image_data [ i ] . m_camera . m_R
>279	Identifier	m_R
>280	MemberAccess	m_image_data [ i ] . m_camera
>281	Identifier	m_camera
>282	ArrayIndexing	m_image_data [ i ]
>283	Identifier	i
>284	Identifier	m_image_data
>285	Argument	m_image_data [ i ] . m_camera . m_R [ 7 ]
>286	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 7 ]
>287	PrimaryExpression	7
>288	MemberAccess	m_image_data [ i ] . m_camera . m_R
>289	Identifier	m_R
>290	MemberAccess	m_image_data [ i ] . m_camera
>291	Identifier	m_camera
>292	ArrayIndexing	m_image_data [ i ]
>293	Identifier	i
>294	Identifier	m_image_data
>295	Argument	m_image_data [ i ] . m_camera . m_R [ 6 ]
>296	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 6 ]
>297	PrimaryExpression	6
>298	MemberAccess	m_image_data [ i ] . m_camera . m_R
>299	Identifier	m_R
>300	MemberAccess	m_image_data [ i ] . m_camera
>301	Identifier	m_camera
>302	ArrayIndexing	m_image_data [ i ]
>303	Identifier	i
>304	Identifier	m_image_data
>305	Argument	\"%0.9e %0.9e %0.9e\n\"
>306	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>307	Argument	f
>308	Identifier	f
>309	Callee	fprintf
>310	Identifier	fprintf
>311	ExpressionStatement	 
>312	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 3 ] , m_image_data [ i ] . m_camera \
>313	ArgumentList	f
>314	Argument	m_image_data [ i ] . m_camera . m_R [ 5 ]
>315	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 5 ]
>316	PrimaryExpression	5
>317	MemberAccess	m_image_data [ i ] . m_camera . m_R
>318	Identifier	m_R
>319	MemberAccess	m_image_data [ i ] . m_camera
>320	Identifier	m_camera
>321	ArrayIndexing	m_image_data [ i ]
>322	Identifier	i
>323	Identifier	m_image_data
>324	Argument	m_image_data [ i ] . m_camera . m_R [ 4 ]
>325	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 4 ]
>326	PrimaryExpression	4
>327	MemberAccess	m_image_data [ i ] . m_camera . m_R
>328	Identifier	m_R
>329	MemberAccess	m_image_data [ i ] . m_camera
>330	Identifier	m_camera
>331	ArrayIndexing	m_image_data [ i ]
>332	Identifier	i
>333	Identifier	m_image_data
>334	Argument	m_image_data [ i ] . m_camera . m_R [ 3 ]
>335	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 3 ]
>336	PrimaryExpression	3
>337	MemberAccess	m_image_data [ i ] . m_camera . m_R
>338	Identifier	m_R
>339	MemberAccess	m_image_data [ i ] . m_camera
>340	Identifier	m_camera
>341	ArrayIndexing	m_image_data [ i ]
>342	Identifier	i
>343	Identifier	m_image_data
>344	Argument	\"%0.9e %0.9e %0.9e\n\"
>345	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>346	Argument	f
>347	Identifier	f
>348	Callee	fprintf
>349	Identifier	fprintf
>350	ExpressionStatement	 
>351	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 0 ] , m_image_data [ i ] . m_camera \
>352	ArgumentList	f
>353	Argument	m_image_data [ i ] . m_camera . m_R [ 2 ]
>354	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 2 ]
>355	PrimaryExpression	2
>356	MemberAccess	m_image_data [ i ] . m_camera . m_R
>357	Identifier	m_R
>358	MemberAccess	m_image_data [ i ] . m_camera
>359	Identifier	m_camera
>360	ArrayIndexing	m_image_data [ i ]
>361	Identifier	i
>362	Identifier	m_image_data
>363	Argument	m_image_data [ i ] . m_camera . m_R [ 1 ]
>364	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 1 ]
>365	PrimaryExpression	1
>366	MemberAccess	m_image_data [ i ] . m_camera . m_R
>367	Identifier	m_R
>368	MemberAccess	m_image_data [ i ] . m_camera
>369	Identifier	m_camera
>370	ArrayIndexing	m_image_data [ i ]
>371	Identifier	i
>372	Identifier	m_image_data
>373	Argument	m_image_data [ i ] . m_camera . m_R [ 0 ]
>374	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 0 ]
>375	PrimaryExpression	0
>376	MemberAccess	m_image_data [ i ] . m_camera . m_R
>377	Identifier	m_R
>378	MemberAccess	m_image_data [ i ] . m_camera
>379	Identifier	m_camera
>380	ArrayIndexing	m_image_data [ i ]
>381	Identifier	i
>382	Identifier	m_image_data
>383	Argument	\"%0.9e %0.9e %0.9e\n\"
>384	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>385	Argument	f
>386	Identifier	f
>387	Callee	fprintf
>388	Identifier	fprintf
>389	ExpressionStatement	 
>390	CallExpression	fprintf ( f , \"%0.9e\n\" , m_image_data [ i ] . m_camera . m_focal )
>391	ArgumentList	f
>392	Argument	m_image_data [ i ] . m_camera . m_focal
>393	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>394	Identifier	m_focal
>395	MemberAccess	m_image_data [ i ] . m_camera
>396	Identifier	m_camera
>397	ArrayIndexing	m_image_data [ i ]
>398	Identifier	i
>399	Identifier	m_image_data
>400	Argument	\"%0.9e\n\"
>401	PrimaryExpression	\"%0.9e\n\"
>402	Argument	f
>403	Identifier	f
>404	Callee	fprintf
>405	Identifier	fprintf
>406	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>407	CompoundStatement	 
>408	ContinueStatement	 
>409	ExpressionStatement	 
>410	CallExpression	fprintf ( f , \"0 0 0\n\" )
>411	ArgumentList	f
>412	Argument	\"0 0 0\n\"
>413	PrimaryExpression	\"0 0 0\n\"
>414	Argument	f
>415	Identifier	f
>416	Callee	fprintf
>417	Identifier	fprintf
>418	ExpressionStatement	 
>419	CallExpression	fprintf ( f , \"0 0 0\n\" )
>420	ArgumentList	f
>421	Argument	\"0 0 0\n\"
>422	PrimaryExpression	\"0 0 0\n\"
>423	Argument	f
>424	Identifier	f
>425	Callee	fprintf
>426	Identifier	fprintf
>427	ExpressionStatement	 
>428	CallExpression	fprintf ( f , \"0 0 0\n\" )
>429	ArgumentList	f
>430	Argument	\"0 0 0\n\"
>431	PrimaryExpression	\"0 0 0\n\"
>432	Argument	f
>433	Identifier	f
>434	Callee	fprintf
>435	Identifier	fprintf
>436	ExpressionStatement	 
>437	CallExpression	fprintf ( f , \"0 0 0\n\" )
>438	ArgumentList	f
>439	Argument	\"0 0 0\n\"
>440	PrimaryExpression	\"0 0 0\n\"
>441	Argument	f
>442	Identifier	f
>443	Callee	fprintf
>444	Identifier	fprintf
>445	ExpressionStatement	 
>446	CallExpression	fprintf ( f , \"0\n\" )
>447	ArgumentList	f
>448	Argument	\"0\n\"
>449	PrimaryExpression	\"0\n\"
>450	Argument	f
>451	Identifier	f
>452	Callee	fprintf
>453	Identifier	fprintf
>454	Condition	 
>455	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>456	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>457	Identifier	m_adjusted
>458	MemberAccess	m_image_data [ i ] . m_camera
>459	Identifier	m_camera
>460	ArrayIndexing	m_image_data [ i ]
>461	Identifier	i
>462	Identifier	m_image_data
>463	UnaryOperator	!
>464	IncDecOp	 
>465	IncDec	++
>466	Identifier	i
>467	Condition	 
>468	RelationalExpression	i < num_images
>469	Identifier	num_images
>470	Identifier	i
>471	ForInit	 
>472	IdentifierDeclStatement	int i = 0 ;
>473	IdentifierDecl	i = 0
>474	AssignmentExpr	i = 0
>475	PrimaryExpression	0
>476	Identifier	i
>477	Identifier	i
>478	IdentifierDeclType	int
>479	ExpressionStatement	 
>480	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_points )
>481	ArgumentList	f
>482	Argument	num_points
>483	Identifier	num_points
>484	Argument	num_images
>485	Identifier	num_images
>486	Argument	\"%d %d\n\"
>487	PrimaryExpression	\"%d %d\n\"
>488	Argument	f
>489	Identifier	f
>490	Callee	fprintf
>491	Identifier	fprintf
>492	IdentifierDeclStatement	 
>493	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>494	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>495	CastExpression	( int ) m_point_data . size ( )
>496	CallExpression	m_point_data . size ( )
>497	ArgumentList	 
>498	Callee	m_point_data . size
>499	MemberAccess	m_point_data . size
>500	Identifier	size
>501	Identifier	m_point_data
>502	CastTarget	int
>503	Identifier	num_points
>504	Identifier	num_points
>505	IdentifierDeclType	int
>506	IfStatement	if ( f == NULL )
>507	CompoundStatement	 
>508	ReturnStatement	 
>509	ExpressionStatement	 
>510	Statement	 
>511	Statement	 
>512	Statement	 
>513	Statement	 
>514	Statement	 
>515	Statement	 
>516	Statement	 
>517	Condition	 
>518	EqualityExpression	f == NULL
>519	Identifier	NULL
>520	Identifier	f
>521	IdentifierDeclStatement	 
>522	IdentifierDecl	* f = fopen ( buf , \"w\" )
>523	AssignmentExpr	* f = fopen ( buf , \"w\" )
>524	CallExpression	fopen ( buf , \"w\" )
>525	ArgumentList	buf
>526	Argument	\"w\"
>527	PrimaryExpression	\"w\"
>528	Argument	buf
>529	Identifier	buf
>530	Callee	fopen
>531	Identifier	fopen
>532	Identifier	f
>533	Identifier	f
>534	IdentifierDeclType	FILE *
>535	ExpressionStatement	 
>536	CallExpression	sprintf ( buf , \"bundle.rotated.out\" )
>537	ArgumentList	buf
>538	Argument	\"bundle.rotated.out\"
>539	PrimaryExpression	\"bundle.rotated.out\"
>540	Argument	buf
>541	Identifier	buf
>542	Callee	sprintf
>543	Identifier	sprintf
>544	IdentifierDeclStatement	 
>545	IdentifierDecl	buf [ 256 ]
>546	PrimaryExpression	256
>547	Identifier	buf
>548	IdentifierDeclType	char [ 256 ]
>549	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>550	CompoundStatement	 
>551	IfStatement	if ( rot != 0.0 )
>552	CompoundStatement	 
>553	ExpressionStatement	 
>554	CallExpression	memcpy ( m_image_data [ i ] . m_camera . m_t , ttmp , 3 * sizeof ( double ) )
>555	ArgumentList	m_image_data [ i ] . m_camera . m_t
>556	Argument	3 * sizeof ( double )
>557	MultiplicativeExpression	3 * sizeof ( double )
>558	SizeofExpr	sizeof ( double )
>559	SizeofOperand	double
>560	Sizeof	sizeof
>561	PrimaryExpression	3
>562	Argument	ttmp
>563	Identifier	ttmp
>564	Argument	m_image_data [ i ] . m_camera . m_t
>565	MemberAccess	m_image_data [ i ] . m_camera . m_t
>566	Identifier	m_t
>567	MemberAccess	m_image_data [ i ] . m_camera
>568	Identifier	m_camera
>569	ArrayIndexing	m_image_data [ i ]
>570	Identifier	i
>571	Identifier	m_image_data
>572	Callee	memcpy
>573	Identifier	memcpy
>574	ExpressionStatement	 
>575	CallExpression	memcpy ( m_image_data [ i ] . m_camera . m_R , Rtmp , 9 * sizeof ( double ) )
>576	ArgumentList	m_image_data [ i ] . m_camera . m_R
>577	Argument	9 * sizeof ( double )
>578	MultiplicativeExpression	9 * sizeof ( double )
>579	SizeofExpr	sizeof ( double )
>580	SizeofOperand	double
>581	Sizeof	sizeof
>582	PrimaryExpression	9
>583	Argument	Rtmp
>584	Identifier	Rtmp
>585	Argument	m_image_data [ i ] . m_camera . m_R
>586	MemberAccess	m_image_data [ i ] . m_camera . m_R
>587	Identifier	m_R
>588	MemberAccess	m_image_data [ i ] . m_camera
>589	Identifier	m_camera
>590	ArrayIndexing	m_image_data [ i ]
>591	Identifier	i
>592	Identifier	m_image_data
>593	Callee	memcpy
>594	Identifier	memcpy
>595	ExpressionStatement	 
>596	CallExpression	matrix_product ( 3 , 3 , 3 , 1 , R , m_image_data [ i ] . m_camera . m_t , ttmp )
>597	ArgumentList	3
>598	Argument	ttmp
>599	Identifier	ttmp
>600	Argument	m_image_data [ i ] . m_camera . m_t
>601	MemberAccess	m_image_data [ i ] . m_camera . m_t
>602	Identifier	m_t
>603	MemberAccess	m_image_data [ i ] . m_camera
>604	Identifier	m_camera
>605	ArrayIndexing	m_image_data [ i ]
>606	Identifier	i
>607	Identifier	m_image_data
>608	Argument	R
>609	Identifier	R
>610	Argument	1
>611	PrimaryExpression	1
>612	Argument	3
>613	PrimaryExpression	3
>614	Argument	3
>615	PrimaryExpression	3
>616	Argument	3
>617	PrimaryExpression	3
>618	Callee	matrix_product
>619	Identifier	matrix_product
>620	ExpressionStatement	 
>621	CallExpression	matrix_product ( 3 , 3 , 3 , 3 , R , m_image_data [ i ] . m_camera . m_R , Rtmp )
>622	ArgumentList	3
>623	Argument	Rtmp
>624	Identifier	Rtmp
>625	Argument	m_image_data [ i ] . m_camera . m_R
>626	MemberAccess	m_image_data [ i ] . m_camera . m_R
>627	Identifier	m_R
>628	MemberAccess	m_image_data [ i ] . m_camera
>629	Identifier	m_camera
>630	ArrayIndexing	m_image_data [ i ]
>631	Identifier	i
>632	Identifier	m_image_data
>633	Argument	R
>634	Identifier	R
>635	Argument	3
>636	PrimaryExpression	3
>637	Argument	3
>638	PrimaryExpression	3
>639	Argument	3
>640	PrimaryExpression	3
>641	Argument	3
>642	PrimaryExpression	3
>643	Callee	matrix_product
>644	Identifier	matrix_product
>645	IdentifierDeclStatement	 
>646	IdentifierDecl	ttmp [ 3 ]
>647	PrimaryExpression	3
>648	Identifier	ttmp
>649	IdentifierDeclType	double [ 3 ]
>650	IdentifierDeclStatement	 
>651	IdentifierDecl	Rtmp [ 9 ]
>652	PrimaryExpression	9
>653	Identifier	Rtmp
>654	IdentifierDeclType	double [ 9 ]
>655	IdentifierDeclStatement	 
>656	IdentifierDecl	R [ 9 ] = { cos ( rad ) , - sin ( rad ) , 0.0 , sin ( rad ) , cos ( rad ) , 0.0 , 0.0 , 0.0 , 1.0 }
>657	AssignmentExpr	R [ 9 ] = { cos ( rad ) , - sin ( rad ) , 0.0 , sin ( rad ) , cos ( rad ) , 0.0 , 0.0 , 0.0 , 1.0 }
>658	InitializerList	cos ( rad )
>659	PrimaryExpression	1.0
>660	PrimaryExpression	0.0
>661	PrimaryExpression	0.0
>662	PrimaryExpression	0.0
>663	CallExpression	cos ( rad )
>664	ArgumentList	rad
>665	Argument	rad
>666	Identifier	rad
>667	Callee	cos
>668	Identifier	cos
>669	CallExpression	sin ( rad )
>670	ArgumentList	rad
>671	Argument	rad
>672	Identifier	rad
>673	Callee	sin
>674	Identifier	sin
>675	PrimaryExpression	0.0
>676	UnaryOp	- sin ( rad )
>677	CallExpression	sin ( rad )
>678	ArgumentList	rad
>679	Argument	rad
>680	Identifier	rad
>681	Callee	sin
>682	Identifier	sin
>683	UnaryOperator	-
>684	CallExpression	cos ( rad )
>685	ArgumentList	rad
>686	Argument	rad
>687	Identifier	rad
>688	Callee	cos
>689	Identifier	cos
>690	Identifier	R
>691	PrimaryExpression	9
>692	Identifier	R
>693	IdentifierDeclType	double [ 9 ]
>694	IdentifierDeclStatement	 
>695	IdentifierDecl	rad = DEG2RAD ( rot )
>696	AssignmentExpr	rad = DEG2RAD ( rot )
>697	CallExpression	DEG2RAD ( rot )
>698	ArgumentList	rot
>699	Argument	rot
>700	Identifier	rot
>701	Callee	DEG2RAD
>702	Identifier	DEG2RAD
>703	Identifier	rad
>704	Identifier	rad
>705	IdentifierDeclType	double
>706	Condition	 
>707	EqualityExpression	rot != 0.0
>708	PrimaryExpression	0.0
>709	Identifier	rot
>710	ExpressionStatement	 
>711	CallExpression	fscanf ( ff , \"%s %lf\n\" , buf , & rot )
>712	ArgumentList	ff
>713	Argument	& rot
>714	UnaryOp	& rot
>715	Identifier	rot
>716	UnaryOperator	&
>717	Argument	buf
>718	Identifier	buf
>719	Argument	\"%s %lf\n\"
>720	PrimaryExpression	\"%s %lf\n\"
>721	Argument	ff
>722	Identifier	ff
>723	Callee	fscanf
>724	Identifier	fscanf
>725	IdentifierDeclStatement	 
>726	IdentifierDecl	rot
>727	Identifier	rot
>728	IdentifierDeclType	double
>729	IdentifierDeclStatement	 
>730	IdentifierDecl	buf [ 512 ]
>731	PrimaryExpression	512
>732	Identifier	buf
>733	IdentifierDeclType	char [ 512 ]
>734	IncDecOp	 
>735	IncDec	++
>736	Identifier	i
>737	Condition	 
>738	RelationalExpression	i < num_images
>739	Identifier	num_images
>740	Identifier	i
>741	ForInit	 
>742	IdentifierDeclStatement	int i = 0 ;
>743	IdentifierDecl	i = 0
>744	AssignmentExpr	i = 0
>745	PrimaryExpression	0
>746	Identifier	i
>747	Identifier	i
>748	IdentifierDeclType	int
>749	IfStatement	if ( ff == NULL )
>750	CompoundStatement	 
>751	ReturnStatement	 
>752	ExpressionStatement	 
>753	Statement	 
>754	Statement	 
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Condition	 
>761	EqualityExpression	ff == NULL
>762	Identifier	NULL
>763	Identifier	ff
>764	IdentifierDeclStatement	 
>765	IdentifierDecl	* ff = fopen ( rotate_file , \"r\" )
>766	AssignmentExpr	* ff = fopen ( rotate_file , \"r\" )
>767	CallExpression	fopen ( rotate_file , \"r\" )
>768	ArgumentList	rotate_file
>769	Argument	\"r\"
>770	PrimaryExpression	\"r\"
>771	Argument	rotate_file
>772	Identifier	rotate_file
>773	Callee	fopen
>774	Identifier	fopen
>775	Identifier	ff
>776	Identifier	ff
>777	IdentifierDeclType	FILE *
>778	IdentifierDeclStatement	 
>779	IdentifierDecl	num_images = GetNumImages ( )
>780	AssignmentExpr	num_images = GetNumImages ( )
>781	CallExpression	GetNumImages ( )
>782	ArgumentList	 
>783	Callee	GetNumImages
>784	Identifier	GetNumImages
>785	Identifier	num_images
>786	Identifier	num_images
>787	IdentifierDeclType	int
>855	FunctionDef	BundlerApp 
>856	ParameterList	char * focal_file
>857	Parameter	 
>858	Identifier	focal_file
>859	ParameterType	char *
>860	ReturnType	void
>861	CompoundStatement	 
>862	ExpressionStatement	 
>863	CallExpression	fclose ( f )
>864	ArgumentList	f
>865	Argument	f
>866	Identifier	f
>867	Callee	fclose
>868	Identifier	fclose
>869	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>870	CompoundStatement	 
>871	ExpressionStatement	 
>872	CallExpression	fprintf ( f , \"\n\" )
>873	ArgumentList	f
>874	Argument	\"\n\"
>875	PrimaryExpression	\"\n\"
>876	Argument	f
>877	Identifier	f
>878	Callee	fprintf
>879	Identifier	fprintf
>880	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>881	CompoundStatement	 
>882	ExpressionStatement	 
>883	CallExpression	fprintf ( f , \" %d %d %.10f %.10f\" , view_new , p . m_views [ j ] . second , x , y )
>884	ArgumentList	f
>885	Argument	y
>886	Identifier	y
>887	Argument	x
>888	Identifier	x
>889	Argument	p . m_views [ j ] . second
>890	MemberAccess	p . m_views [ j ] . second
>891	Identifier	second
>892	ArrayIndexing	p . m_views [ j ]
>893	Identifier	j
>894	MemberAccess	p . m_views
>895	Identifier	m_views
>896	Identifier	p
>897	Argument	view_new
>898	Identifier	view_new
>899	Argument	\" %d %d %.10f %.10f\"
>900	PrimaryExpression	\" %d %d %.10f %.10f\"
>901	Argument	f
>902	Identifier	f
>903	Callee	fprintf
>904	Identifier	fprintf
>905	IdentifierDeclStatement	 
>906	IdentifierDecl	y = m_image_data [ view ] . m_keys [ key ] . m_y
>907	AssignmentExpr	y = m_image_data [ view ] . m_keys [ key ] . m_y
>908	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_y
>909	Identifier	m_y
>910	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>911	Identifier	key
>912	MemberAccess	m_image_data [ view ] . m_keys
>913	Identifier	m_keys
>914	ArrayIndexing	m_image_data [ view ]
>915	Identifier	view
>916	Identifier	m_image_data
>917	Identifier	y
>918	Identifier	y
>919	IdentifierDeclType	double
>920	IdentifierDeclStatement	 
>921	IdentifierDecl	x = m_image_data [ view ] . m_keys [ key ] . m_x
>922	AssignmentExpr	x = m_image_data [ view ] . m_keys [ key ] . m_x
>923	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_x
>924	Identifier	m_x
>925	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>926	Identifier	key
>927	MemberAccess	m_image_data [ view ] . m_keys
>928	Identifier	m_keys
>929	ArrayIndexing	m_image_data [ view ]
>930	Identifier	view
>931	Identifier	m_image_data
>932	Identifier	x
>933	Identifier	x
>934	IdentifierDeclType	double
>935	IfStatement	if ( ! m_image_data [ view ] . m_keys_loaded )
>936	ExpressionStatement	 
>937	CallExpression	m_image_data [ view ] . LoadKeys ( false )
>938	ArgumentList	false
>939	Argument	false
>940	Identifier	false
>941	Callee	m_image_data [ view ] . LoadKeys
>942	MemberAccess	m_image_data [ view ] . LoadKeys
>943	Identifier	LoadKeys
>944	ArrayIndexing	m_image_data [ view ]
>945	Identifier	view
>946	Identifier	m_image_data
>947	Condition	 
>948	UnaryOp	! m_image_data [ view ] . m_keys_loaded
>949	MemberAccess	m_image_data [ view ] . m_keys_loaded
>950	Identifier	m_keys_loaded
>951	ArrayIndexing	m_image_data [ view ]
>952	Identifier	view
>953	Identifier	m_image_data
>954	UnaryOperator	!
>955	IdentifierDeclStatement	 
>956	IdentifierDecl	view = p . m_views [ j ] . first
>957	AssignmentExpr	view = p . m_views [ j ] . first
>958	MemberAccess	p . m_views [ j ] . first
>959	Identifier	first
>960	ArrayIndexing	p . m_views [ j ]
>961	Identifier	j
>962	MemberAccess	p . m_views
>963	Identifier	m_views
>964	Identifier	p
>965	Identifier	view
>966	Identifier	view
>967	IdentifierDeclType	int
>968	IncDecOp	 
>969	IncDec	++
>970	Identifier	j
>971	Condition	 
>972	RelationalExpression	j < num_visible
>973	Identifier	num_visible
>974	Identifier	j
>975	ForInit	 
>976	IdentifierDeclStatement	int j = 0 ;
>977	IdentifierDecl	j = 0
>978	AssignmentExpr	j = 0
>979	PrimaryExpression	0
>980	Identifier	j
>981	Identifier	j
>982	IdentifierDeclType	int
>983	ExpressionStatement	 
>984	CallExpression	fprintf ( f , \"%d\" , num_visible )
>985	ArgumentList	f
>986	Argument	num_visible
>987	Identifier	num_visible
>988	Argument	\"%d\"
>989	PrimaryExpression	\"%d\"
>990	Argument	f
>991	Identifier	f
>992	Callee	fprintf
>993	Identifier	fprintf
>994	IdentifierDeclStatement	 
>995	IdentifierDecl	num_visible = ( int ) p . m_views . size ( )
>996	AssignmentExpr	num_visible = ( int ) p . m_views . size ( )
>997	CastExpression	( int ) p . m_views . size ( )
>998	CallExpression	p . m_views . size ( )
>999	ArgumentList	 
>1000	Callee	p . m_views . size
>1001	MemberAccess	p . m_views . size
>1002	Identifier	size
>1003	MemberAccess	p . m_views
>1004	Identifier	m_views
>1005	Identifier	p
>1006	CastTarget	int
>1007	Identifier	num_visible
>1008	Identifier	num_visible
>1009	IdentifierDeclType	int
>1010	ExpressionStatement	 
>1011	CallExpression	fprintf ( f , \"%0.5e %0.5e %0.5e\n\" , p . m_color [ 0 ] , p . m_color [ 1 ] , p . m_color [ 2 ] )
>1012	ArgumentList	f
>1013	Argument	p . m_color [ 2 ]
>1014	ArrayIndexing	p . m_color [ 2 ]
>1015	PrimaryExpression	2
>1016	MemberAccess	p . m_color
>1017	Identifier	m_color
>1018	Identifier	p
>1019	Argument	p . m_color [ 1 ]
>1020	ArrayIndexing	p . m_color [ 1 ]
>1021	PrimaryExpression	1
>1022	MemberAccess	p . m_color
>1023	Identifier	m_color
>1024	Identifier	p
>1025	Argument	p . m_color [ 0 ]
>1026	ArrayIndexing	p . m_color [ 0 ]
>1027	PrimaryExpression	0
>1028	MemberAccess	p . m_color
>1029	Identifier	m_color
>1030	Identifier	p
>1031	Argument	\"%0.5e %0.5e %0.5e\n\"
>1032	PrimaryExpression	\"%0.5e %0.5e %0.5e\n\"
>1033	Argument	f
>1034	Identifier	f
>1035	Callee	fprintf
>1036	Identifier	fprintf
>1037	ExpressionStatement	 
>1038	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>1039	ArgumentList	f
>1040	Argument	p . m_pos [ 2 ]
>1041	ArrayIndexing	p . m_pos [ 2 ]
>1042	PrimaryExpression	2
>1043	MemberAccess	p . m_pos
>1044	Identifier	m_pos
>1045	Identifier	p
>1046	Argument	p . m_pos [ 1 ]
>1047	ArrayIndexing	p . m_pos [ 1 ]
>1048	PrimaryExpression	1
>1049	MemberAccess	p . m_pos
>1050	Identifier	m_pos
>1051	Identifier	p
>1052	Argument	p . m_pos [ 0 ]
>1053	ArrayIndexing	p . m_pos [ 0 ]
>1054	PrimaryExpression	0
>1055	MemberAccess	p . m_pos
>1056	Identifier	m_pos
>1057	Identifier	p
>1058	Argument	\"%0.9e %0.9e %0.9e\n\"
>1059	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1060	Argument	f
>1061	Identifier	f
>1062	Callee	fprintf
>1063	Identifier	fprintf
>1064	IdentifierDeclStatement	 
>1065	IdentifierDecl	& p = m_point_data [ i ]
>1066	AssignmentExpr	& p = m_point_data [ i ]
>1067	ArrayIndexing	m_point_data [ i ]
>1068	Identifier	i
>1069	Identifier	m_point_data
>1070	Identifier	p
>1071	Identifier	p
>1072	IdentifierDeclType	PointData &
>1073	IncDecOp	 
>1074	IncDec	++
>1075	Identifier	i
>1076	Condition	 
>1077	RelationalExpression	i < num_points
>1078	Identifier	num_points
>1079	Identifier	i
>1080	ForInit	 
>1081	IdentifierDeclStatement	int i = 0 ;
>1082	IdentifierDecl	i = 0
>1083	AssignmentExpr	i = 0
>1084	PrimaryExpression	0
>1085	Identifier	i
>1086	Identifier	i
>1087	IdentifierDeclType	int
>1088	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1089	CompoundStatement	 
>1090	ExpressionStatement	 
>1091	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , t [ 0 ] , t [ 1 ] , t [ 2 ] )
>1092	ArgumentList	f
>1093	Argument	t [ 2 ]
>1094	ArrayIndexing	t [ 2 ]
>1095	PrimaryExpression	2
>1096	Identifier	t
>1097	Argument	t [ 1 ]
>1098	ArrayIndexing	t [ 1 ]
>1099	PrimaryExpression	1
>1100	Identifier	t
>1101	Argument	t [ 0 ]
>1102	ArrayIndexing	t [ 0 ]
>1103	PrimaryExpression	0
>1104	Identifier	t
>1105	Argument	\"%0.9e %0.9e %0.9e\n\"
>1106	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1107	Argument	f
>1108	Identifier	f
>1109	Callee	fprintf
>1110	Identifier	fprintf
>1111	IdentifierDeclStatement	 
>1112	IdentifierDecl	* t = m_image_data [ i ] . m_camera . m_t
>1113	AssignmentExpr	* t = m_image_data [ i ] . m_camera . m_t
>1114	MemberAccess	m_image_data [ i ] . m_camera . m_t
>1115	Identifier	m_t
>1116	MemberAccess	m_image_data [ i ] . m_camera
>1117	Identifier	m_camera
>1118	ArrayIndexing	m_image_data [ i ]
>1119	Identifier	i
>1120	Identifier	m_image_data
>1121	Identifier	t
>1122	Identifier	t
>1123	IdentifierDeclType	double *
>1124	ExpressionStatement	 
>1125	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 6 ] , m_image_data [ i ] . m_camera \
>1126	ArgumentList	f
>1127	Argument	m_image_data [ i ] . m_camera . m_R [ 8 ]
>1128	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 8 ]
>1129	PrimaryExpression	8
>1130	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1131	Identifier	m_R
>1132	MemberAccess	m_image_data [ i ] . m_camera
>1133	Identifier	m_camera
>1134	ArrayIndexing	m_image_data [ i ]
>1135	Identifier	i
>1136	Identifier	m_image_data
>1137	Argument	m_image_data [ i ] . m_camera . m_R [ 7 ]
>1138	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 7 ]
>1139	PrimaryExpression	7
>1140	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1141	Identifier	m_R
>1142	MemberAccess	m_image_data [ i ] . m_camera
>1143	Identifier	m_camera
>1144	ArrayIndexing	m_image_data [ i ]
>1145	Identifier	i
>1146	Identifier	m_image_data
>1147	Argument	m_image_data [ i ] . m_camera . m_R [ 6 ]
>1148	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 6 ]
>1149	PrimaryExpression	6
>1150	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1151	Identifier	m_R
>1152	MemberAccess	m_image_data [ i ] . m_camera
>1153	Identifier	m_camera
>1154	ArrayIndexing	m_image_data [ i ]
>1155	Identifier	i
>1156	Identifier	m_image_data
>1157	Argument	\"%0.9e %0.9e %0.9e\n\"
>1158	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1159	Argument	f
>1160	Identifier	f
>1161	Callee	fprintf
>1162	Identifier	fprintf
>1163	ExpressionStatement	 
>1164	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 3 ] , m_image_data [ i ] . m_camera \
>1165	ArgumentList	f
>1166	Argument	m_image_data [ i ] . m_camera . m_R [ 5 ]
>1167	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 5 ]
>1168	PrimaryExpression	5
>1169	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1170	Identifier	m_R
>1171	MemberAccess	m_image_data [ i ] . m_camera
>1172	Identifier	m_camera
>1173	ArrayIndexing	m_image_data [ i ]
>1174	Identifier	i
>1175	Identifier	m_image_data
>1176	Argument	m_image_data [ i ] . m_camera . m_R [ 4 ]
>1177	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 4 ]
>1178	PrimaryExpression	4
>1179	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1180	Identifier	m_R
>1181	MemberAccess	m_image_data [ i ] . m_camera
>1182	Identifier	m_camera
>1183	ArrayIndexing	m_image_data [ i ]
>1184	Identifier	i
>1185	Identifier	m_image_data
>1186	Argument	m_image_data [ i ] . m_camera . m_R [ 3 ]
>1187	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 3 ]
>1188	PrimaryExpression	3
>1189	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1190	Identifier	m_R
>1191	MemberAccess	m_image_data [ i ] . m_camera
>1192	Identifier	m_camera
>1193	ArrayIndexing	m_image_data [ i ]
>1194	Identifier	i
>1195	Identifier	m_image_data
>1196	Argument	\"%0.9e %0.9e %0.9e\n\"
>1197	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1198	Argument	f
>1199	Identifier	f
>1200	Callee	fprintf
>1201	Identifier	fprintf
>1202	ExpressionStatement	 
>1203	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 0 ] , m_image_data [ i ] . m_camera \
>1204	ArgumentList	f
>1205	Argument	m_image_data [ i ] . m_camera . m_R [ 2 ]
>1206	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 2 ]
>1207	PrimaryExpression	2
>1208	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1209	Identifier	m_R
>1210	MemberAccess	m_image_data [ i ] . m_camera
>1211	Identifier	m_camera
>1212	ArrayIndexing	m_image_data [ i ]
>1213	Identifier	i
>1214	Identifier	m_image_data
>1215	Argument	m_image_data [ i ] . m_camera . m_R [ 1 ]
>1216	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 1 ]
>1217	PrimaryExpression	1
>1218	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1219	Identifier	m_R
>1220	MemberAccess	m_image_data [ i ] . m_camera
>1221	Identifier	m_camera
>1222	ArrayIndexing	m_image_data [ i ]
>1223	Identifier	i
>1224	Identifier	m_image_data
>1225	Argument	m_image_data [ i ] . m_camera . m_R [ 0 ]
>1226	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 0 ]
>1227	PrimaryExpression	0
>1228	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1229	Identifier	m_R
>1230	MemberAccess	m_image_data [ i ] . m_camera
>1231	Identifier	m_camera
>1232	ArrayIndexing	m_image_data [ i ]
>1233	Identifier	i
>1234	Identifier	m_image_data
>1235	Argument	\"%0.9e %0.9e %0.9e\n\"
>1236	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1237	Argument	f
>1238	Identifier	f
>1239	Callee	fprintf
>1240	Identifier	fprintf
>1241	ExpressionStatement	 
>1242	CallExpression	fprintf ( f , \"%0.9e\n\" , m_image_data [ i ] . m_camera . m_focal )
>1243	ArgumentList	f
>1244	Argument	m_image_data [ i ] . m_camera . m_focal
>1245	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>1246	Identifier	m_focal
>1247	MemberAccess	m_image_data [ i ] . m_camera
>1248	Identifier	m_camera
>1249	ArrayIndexing	m_image_data [ i ]
>1250	Identifier	i
>1251	Identifier	m_image_data
>1252	Argument	\"%0.9e\n\"
>1253	PrimaryExpression	\"%0.9e\n\"
>1254	Argument	f
>1255	Identifier	f
>1256	Callee	fprintf
>1257	Identifier	fprintf
>1258	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>1259	CompoundStatement	 
>1260	ContinueStatement	 
>1261	ExpressionStatement	 
>1262	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1263	ArgumentList	f
>1264	Argument	\"0 0 0\n\"
>1265	PrimaryExpression	\"0 0 0\n\"
>1266	Argument	f
>1267	Identifier	f
>1268	Callee	fprintf
>1269	Identifier	fprintf
>1270	ExpressionStatement	 
>1271	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1272	ArgumentList	f
>1273	Argument	\"0 0 0\n\"
>1274	PrimaryExpression	\"0 0 0\n\"
>1275	Argument	f
>1276	Identifier	f
>1277	Callee	fprintf
>1278	Identifier	fprintf
>1279	ExpressionStatement	 
>1280	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1281	ArgumentList	f
>1282	Argument	\"0 0 0\n\"
>1283	PrimaryExpression	\"0 0 0\n\"
>1284	Argument	f
>1285	Identifier	f
>1286	Callee	fprintf
>1287	Identifier	fprintf
>1288	ExpressionStatement	 
>1289	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1290	ArgumentList	f
>1291	Argument	\"0 0 0\n\"
>1292	PrimaryExpression	\"0 0 0\n\"
>1293	Argument	f
>1294	Identifier	f
>1295	Callee	fprintf
>1296	Identifier	fprintf
>1297	ExpressionStatement	 
>1298	CallExpression	fprintf ( f , \"0\n\" )
>1299	ArgumentList	f
>1300	Argument	\"0\n\"
>1301	PrimaryExpression	\"0\n\"
>1302	Argument	f
>1303	Identifier	f
>1304	Callee	fprintf
>1305	Identifier	fprintf
>1306	Condition	 
>1307	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>1308	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>1309	Identifier	m_adjusted
>1310	MemberAccess	m_image_data [ i ] . m_camera
>1311	Identifier	m_camera
>1312	ArrayIndexing	m_image_data [ i ]
>1313	Identifier	i
>1314	Identifier	m_image_data
>1315	UnaryOperator	!
>1316	IncDecOp	 
>1317	IncDec	++
>1318	Identifier	i
>1319	Condition	 
>1320	RelationalExpression	i < num_images
>1321	Identifier	num_images
>1322	Identifier	i
>1323	ForInit	 
>1324	IdentifierDeclStatement	int i = 0 ;
>1325	IdentifierDecl	i = 0
>1326	AssignmentExpr	i = 0
>1327	PrimaryExpression	0
>1328	Identifier	i
>1329	Identifier	i
>1330	IdentifierDeclType	int
>1331	ExpressionStatement	 
>1332	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_points )
>1333	ArgumentList	f
>1334	Argument	num_points
>1335	Identifier	num_points
>1336	Argument	num_images
>1337	Identifier	num_images
>1338	Argument	\"%d %d\n\"
>1339	PrimaryExpression	\"%d %d\n\"
>1340	Argument	f
>1341	Identifier	f
>1342	Callee	fprintf
>1343	Identifier	fprintf
>1344	IdentifierDeclStatement	 
>1345	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>1346	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>1347	CastExpression	( int ) m_point_data . size ( )
>1348	CallExpression	m_point_data . size ( )
>1349	ArgumentList	 
>1350	Callee	m_point_data . size
>1351	MemberAccess	m_point_data . size
>1352	Identifier	size
>1353	Identifier	m_point_data
>1354	CastTarget	int
>1355	Identifier	num_points
>1356	Identifier	num_points
>1357	IdentifierDeclType	int
>1358	IfStatement	if ( f == NULL )
>1359	CompoundStatement	 
>1360	ReturnStatement	 
>1361	ExpressionStatement	 
>1362	Statement	 
>1363	Statement	 
>1364	Statement	 
>1365	Statement	 
>1366	Statement	 
>1367	Statement	 
>1368	Statement	 
>1369	Condition	 
>1370	EqualityExpression	f == NULL
>1371	Identifier	NULL
>1372	Identifier	f
>1373	IdentifierDeclStatement	 
>1374	IdentifierDecl	* f = fopen ( buf , \"w\" )
>1375	AssignmentExpr	* f = fopen ( buf , \"w\" )
>1376	CallExpression	fopen ( buf , \"w\" )
>1377	ArgumentList	buf
>1378	Argument	\"w\"
>1379	PrimaryExpression	\"w\"
>1380	Argument	buf
>1381	Identifier	buf
>1382	Callee	fopen
>1383	Identifier	fopen
>1384	Identifier	f
>1385	Identifier	f
>1386	IdentifierDeclType	FILE *
>1387	ExpressionStatement	 
>1388	CallExpression	sprintf ( buf , \"bundle.scale.out\" )
>1389	ArgumentList	buf
>1390	Argument	\"bundle.scale.out\"
>1391	PrimaryExpression	\"bundle.scale.out\"
>1392	Argument	buf
>1393	Identifier	buf
>1394	Callee	sprintf
>1395	Identifier	sprintf
>1396	IdentifierDeclStatement	 
>1397	IdentifierDecl	buf [ 256 ]
>1398	PrimaryExpression	256
>1399	Identifier	buf
>1400	IdentifierDeclType	char [ 256 ]
>1401	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1402	CompoundStatement	 
>1403	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>1404	CompoundStatement	 
>1405	ExpressionStatement	 
>1406	AssignmentExpr	m_image_data [ i ] . m_camera . m_focal *= scale
>1407	Identifier	scale
>1408	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>1409	Identifier	m_focal
>1410	MemberAccess	m_image_data [ i ] . m_camera
>1411	Identifier	m_camera
>1412	ArrayIndexing	m_image_data [ i ]
>1413	Identifier	i
>1414	Identifier	m_image_data
>1415	Condition	 
>1416	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>1417	Identifier	m_adjusted
>1418	MemberAccess	m_image_data [ i ] . m_camera
>1419	Identifier	m_camera
>1420	ArrayIndexing	m_image_data [ i ]
>1421	Identifier	i
>1422	Identifier	m_image_data
>1423	ExpressionStatement	 
>1424	CallExpression	fscanf ( ff , \"%s %lf\n\" , buf , & scale )
>1425	ArgumentList	ff
>1426	Argument	& scale
>1427	UnaryOp	& scale
>1428	Identifier	scale
>1429	UnaryOperator	&
>1430	Argument	buf
>1431	Identifier	buf
>1432	Argument	\"%s %lf\n\"
>1433	PrimaryExpression	\"%s %lf\n\"
>1434	Argument	ff
>1435	Identifier	ff
>1436	Callee	fscanf
>1437	Identifier	fscanf
>1438	IdentifierDeclStatement	 
>1439	IdentifierDecl	scale
>1440	Identifier	scale
>1441	IdentifierDeclType	double
>1442	IdentifierDeclStatement	 
>1443	IdentifierDecl	buf [ 512 ]
>1444	PrimaryExpression	512
>1445	Identifier	buf
>1446	IdentifierDeclType	char [ 512 ]
>1447	IncDecOp	 
>1448	IncDec	++
>1449	Identifier	i
>1450	Condition	 
>1451	RelationalExpression	i < num_images
>1452	Identifier	num_images
>1453	Identifier	i
>1454	ForInit	 
>1455	IdentifierDeclStatement	int i = 0 ;
>1456	IdentifierDecl	i = 0
>1457	AssignmentExpr	i = 0
>1458	PrimaryExpression	0
>1459	Identifier	i
>1460	Identifier	i
>1461	IdentifierDeclType	int
>1462	IfStatement	if ( ff == NULL )
>1463	CompoundStatement	 
>1464	ReturnStatement	 
>1465	ExpressionStatement	 
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	Statement	 
>1472	Statement	 
>1473	Condition	 
>1474	EqualityExpression	ff == NULL
>1475	Identifier	NULL
>1476	Identifier	ff
>1477	IdentifierDeclStatement	 
>1478	IdentifierDecl	* ff = fopen ( focal_file , \"r\" )
>1479	AssignmentExpr	* ff = fopen ( focal_file , \"r\" )
>1480	CallExpression	fopen ( focal_file , \"r\" )
>1481	ArgumentList	focal_file
>1482	Argument	\"r\"
>1483	PrimaryExpression	\"r\"
>1484	Argument	focal_file
>1485	Identifier	focal_file
>1486	Callee	fopen
>1487	Identifier	fopen
>1488	Identifier	ff
>1489	Identifier	ff
>1490	IdentifierDeclType	FILE *
>1491	IdentifierDeclStatement	 
>1492	IdentifierDecl	num_images = GetNumImages ( )
>1493	AssignmentExpr	num_images = GetNumImages ( )
>1494	CallExpression	GetNumImages ( )
>1495	ArgumentList	 
>1496	Callee	GetNumImages
>1497	Identifier	GetNumImages
>1498	Identifier	num_images
>1499	Identifier	num_images
>1500	IdentifierDeclType	int
>1561	FunctionDef	BundlerApp 
>1562	ParameterList	double focal
>1563	Parameter	 
>1564	Identifier	focal
>1565	ParameterType	double
>1566	ReturnType	void
>1567	CompoundStatement	 
>1568	ExpressionStatement	 
>1569	CallExpression	fclose ( f )
>1570	ArgumentList	f
>1571	Argument	f
>1572	Identifier	f
>1573	Callee	fclose
>1574	Identifier	fclose
>1575	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>1576	CompoundStatement	 
>1577	ExpressionStatement	 
>1578	CallExpression	fprintf ( f , \"\n\" )
>1579	ArgumentList	f
>1580	Argument	\"\n\"
>1581	PrimaryExpression	\"\n\"
>1582	Argument	f
>1583	Identifier	f
>1584	Callee	fprintf
>1585	Identifier	fprintf
>1586	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>1587	CompoundStatement	 
>1588	ExpressionStatement	 
>1589	CallExpression	fprintf ( f , \" %d %d %.10f %.10f\" , view_new , p . m_views [ j ] . second , x , y )
>1590	ArgumentList	f
>1591	Argument	y
>1592	Identifier	y
>1593	Argument	x
>1594	Identifier	x
>1595	Argument	p . m_views [ j ] . second
>1596	MemberAccess	p . m_views [ j ] . second
>1597	Identifier	second
>1598	ArrayIndexing	p . m_views [ j ]
>1599	Identifier	j
>1600	MemberAccess	p . m_views
>1601	Identifier	m_views
>1602	Identifier	p
>1603	Argument	view_new
>1604	Identifier	view_new
>1605	Argument	\" %d %d %.10f %.10f\"
>1606	PrimaryExpression	\" %d %d %.10f %.10f\"
>1607	Argument	f
>1608	Identifier	f
>1609	Callee	fprintf
>1610	Identifier	fprintf
>1611	IdentifierDeclStatement	 
>1612	IdentifierDecl	y = m_image_data [ view ] . m_keys [ key ] . m_y
>1613	AssignmentExpr	y = m_image_data [ view ] . m_keys [ key ] . m_y
>1614	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_y
>1615	Identifier	m_y
>1616	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>1617	Identifier	key
>1618	MemberAccess	m_image_data [ view ] . m_keys
>1619	Identifier	m_keys
>1620	ArrayIndexing	m_image_data [ view ]
>1621	Identifier	view
>1622	Identifier	m_image_data
>1623	Identifier	y
>1624	Identifier	y
>1625	IdentifierDeclType	double
>1626	IdentifierDeclStatement	 
>1627	IdentifierDecl	x = m_image_data [ view ] . m_keys [ key ] . m_x
>1628	AssignmentExpr	x = m_image_data [ view ] . m_keys [ key ] . m_x
>1629	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_x
>1630	Identifier	m_x
>1631	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>1632	Identifier	key
>1633	MemberAccess	m_image_data [ view ] . m_keys
>1634	Identifier	m_keys
>1635	ArrayIndexing	m_image_data [ view ]
>1636	Identifier	view
>1637	Identifier	m_image_data
>1638	Identifier	x
>1639	Identifier	x
>1640	IdentifierDeclType	double
>1641	IfStatement	if ( ! m_image_data [ view ] . m_keys_loaded )
>1642	ExpressionStatement	 
>1643	CallExpression	m_image_data [ view ] . LoadKeys ( false )
>1644	ArgumentList	false
>1645	Argument	false
>1646	Identifier	false
>1647	Callee	m_image_data [ view ] . LoadKeys
>1648	MemberAccess	m_image_data [ view ] . LoadKeys
>1649	Identifier	LoadKeys
>1650	ArrayIndexing	m_image_data [ view ]
>1651	Identifier	view
>1652	Identifier	m_image_data
>1653	Condition	 
>1654	UnaryOp	! m_image_data [ view ] . m_keys_loaded
>1655	MemberAccess	m_image_data [ view ] . m_keys_loaded
>1656	Identifier	m_keys_loaded
>1657	ArrayIndexing	m_image_data [ view ]
>1658	Identifier	view
>1659	Identifier	m_image_data
>1660	UnaryOperator	!
>1661	IdentifierDeclStatement	 
>1662	IdentifierDecl	view = p . m_views [ j ] . first
>1663	AssignmentExpr	view = p . m_views [ j ] . first
>1664	MemberAccess	p . m_views [ j ] . first
>1665	Identifier	first
>1666	ArrayIndexing	p . m_views [ j ]
>1667	Identifier	j
>1668	MemberAccess	p . m_views
>1669	Identifier	m_views
>1670	Identifier	p
>1671	Identifier	view
>1672	Identifier	view
>1673	IdentifierDeclType	int
>1674	IncDecOp	 
>1675	IncDec	++
>1676	Identifier	j
>1677	Condition	 
>1678	RelationalExpression	j < num_visible
>1679	Identifier	num_visible
>1680	Identifier	j
>1681	ForInit	 
>1682	IdentifierDeclStatement	int j = 0 ;
>1683	IdentifierDecl	j = 0
>1684	AssignmentExpr	j = 0
>1685	PrimaryExpression	0
>1686	Identifier	j
>1687	Identifier	j
>1688	IdentifierDeclType	int
>1689	ExpressionStatement	 
>1690	CallExpression	fprintf ( f , \"%d\" , num_visible )
>1691	ArgumentList	f
>1692	Argument	num_visible
>1693	Identifier	num_visible
>1694	Argument	\"%d\"
>1695	PrimaryExpression	\"%d\"
>1696	Argument	f
>1697	Identifier	f
>1698	Callee	fprintf
>1699	Identifier	fprintf
>1700	IdentifierDeclStatement	 
>1701	IdentifierDecl	num_visible = ( int ) p . m_views . size ( )
>1702	AssignmentExpr	num_visible = ( int ) p . m_views . size ( )
>1703	CastExpression	( int ) p . m_views . size ( )
>1704	CallExpression	p . m_views . size ( )
>1705	ArgumentList	 
>1706	Callee	p . m_views . size
>1707	MemberAccess	p . m_views . size
>1708	Identifier	size
>1709	MemberAccess	p . m_views
>1710	Identifier	m_views
>1711	Identifier	p
>1712	CastTarget	int
>1713	Identifier	num_visible
>1714	Identifier	num_visible
>1715	IdentifierDeclType	int
>1716	ExpressionStatement	 
>1717	CallExpression	fprintf ( f , \"%0.5e %0.5e %0.5e\n\" , p . m_color [ 0 ] , p . m_color [ 1 ] , p . m_color [ 2 ] )
>1718	ArgumentList	f
>1719	Argument	p . m_color [ 2 ]
>1720	ArrayIndexing	p . m_color [ 2 ]
>1721	PrimaryExpression	2
>1722	MemberAccess	p . m_color
>1723	Identifier	m_color
>1724	Identifier	p
>1725	Argument	p . m_color [ 1 ]
>1726	ArrayIndexing	p . m_color [ 1 ]
>1727	PrimaryExpression	1
>1728	MemberAccess	p . m_color
>1729	Identifier	m_color
>1730	Identifier	p
>1731	Argument	p . m_color [ 0 ]
>1732	ArrayIndexing	p . m_color [ 0 ]
>1733	PrimaryExpression	0
>1734	MemberAccess	p . m_color
>1735	Identifier	m_color
>1736	Identifier	p
>1737	Argument	\"%0.5e %0.5e %0.5e\n\"
>1738	PrimaryExpression	\"%0.5e %0.5e %0.5e\n\"
>1739	Argument	f
>1740	Identifier	f
>1741	Callee	fprintf
>1742	Identifier	fprintf
>1743	ExpressionStatement	 
>1744	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>1745	ArgumentList	f
>1746	Argument	p . m_pos [ 2 ]
>1747	ArrayIndexing	p . m_pos [ 2 ]
>1748	PrimaryExpression	2
>1749	MemberAccess	p . m_pos
>1750	Identifier	m_pos
>1751	Identifier	p
>1752	Argument	p . m_pos [ 1 ]
>1753	ArrayIndexing	p . m_pos [ 1 ]
>1754	PrimaryExpression	1
>1755	MemberAccess	p . m_pos
>1756	Identifier	m_pos
>1757	Identifier	p
>1758	Argument	p . m_pos [ 0 ]
>1759	ArrayIndexing	p . m_pos [ 0 ]
>1760	PrimaryExpression	0
>1761	MemberAccess	p . m_pos
>1762	Identifier	m_pos
>1763	Identifier	p
>1764	Argument	\"%0.9e %0.9e %0.9e\n\"
>1765	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1766	Argument	f
>1767	Identifier	f
>1768	Callee	fprintf
>1769	Identifier	fprintf
>1770	IdentifierDeclStatement	 
>1771	IdentifierDecl	& p = m_point_data [ i ]
>1772	AssignmentExpr	& p = m_point_data [ i ]
>1773	ArrayIndexing	m_point_data [ i ]
>1774	Identifier	i
>1775	Identifier	m_point_data
>1776	Identifier	p
>1777	Identifier	p
>1778	IdentifierDeclType	PointData &
>1779	IncDecOp	 
>1780	IncDec	++
>1781	Identifier	i
>1782	Condition	 
>1783	RelationalExpression	i < num_points
>1784	Identifier	num_points
>1785	Identifier	i
>1786	ForInit	 
>1787	IdentifierDeclStatement	int i = 0 ;
>1788	IdentifierDecl	i = 0
>1789	AssignmentExpr	i = 0
>1790	PrimaryExpression	0
>1791	Identifier	i
>1792	Identifier	i
>1793	IdentifierDeclType	int
>1794	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>1795	CompoundStatement	 
>1796	ExpressionStatement	 
>1797	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , t [ 0 ] , t [ 1 ] , t [ 2 ] )
>1798	ArgumentList	f
>1799	Argument	t [ 2 ]
>1800	ArrayIndexing	t [ 2 ]
>1801	PrimaryExpression	2
>1802	Identifier	t
>1803	Argument	t [ 1 ]
>1804	ArrayIndexing	t [ 1 ]
>1805	PrimaryExpression	1
>1806	Identifier	t
>1807	Argument	t [ 0 ]
>1808	ArrayIndexing	t [ 0 ]
>1809	PrimaryExpression	0
>1810	Identifier	t
>1811	Argument	\"%0.9e %0.9e %0.9e\n\"
>1812	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1813	Argument	f
>1814	Identifier	f
>1815	Callee	fprintf
>1816	Identifier	fprintf
>1817	IdentifierDeclStatement	 
>1818	IdentifierDecl	* t = m_image_data [ i ] . m_camera . m_t
>1819	AssignmentExpr	* t = m_image_data [ i ] . m_camera . m_t
>1820	MemberAccess	m_image_data [ i ] . m_camera . m_t
>1821	Identifier	m_t
>1822	MemberAccess	m_image_data [ i ] . m_camera
>1823	Identifier	m_camera
>1824	ArrayIndexing	m_image_data [ i ]
>1825	Identifier	i
>1826	Identifier	m_image_data
>1827	Identifier	t
>1828	Identifier	t
>1829	IdentifierDeclType	double *
>1830	ExpressionStatement	 
>1831	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 6 ] , m_image_data [ i ] . m_camera \
>1832	ArgumentList	f
>1833	Argument	m_image_data [ i ] . m_camera . m_R [ 8 ]
>1834	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 8 ]
>1835	PrimaryExpression	8
>1836	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1837	Identifier	m_R
>1838	MemberAccess	m_image_data [ i ] . m_camera
>1839	Identifier	m_camera
>1840	ArrayIndexing	m_image_data [ i ]
>1841	Identifier	i
>1842	Identifier	m_image_data
>1843	Argument	m_image_data [ i ] . m_camera . m_R [ 7 ]
>1844	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 7 ]
>1845	PrimaryExpression	7
>1846	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1847	Identifier	m_R
>1848	MemberAccess	m_image_data [ i ] . m_camera
>1849	Identifier	m_camera
>1850	ArrayIndexing	m_image_data [ i ]
>1851	Identifier	i
>1852	Identifier	m_image_data
>1853	Argument	m_image_data [ i ] . m_camera . m_R [ 6 ]
>1854	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 6 ]
>1855	PrimaryExpression	6
>1856	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1857	Identifier	m_R
>1858	MemberAccess	m_image_data [ i ] . m_camera
>1859	Identifier	m_camera
>1860	ArrayIndexing	m_image_data [ i ]
>1861	Identifier	i
>1862	Identifier	m_image_data
>1863	Argument	\"%0.9e %0.9e %0.9e\n\"
>1864	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1865	Argument	f
>1866	Identifier	f
>1867	Callee	fprintf
>1868	Identifier	fprintf
>1869	ExpressionStatement	 
>1870	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 3 ] , m_image_data [ i ] . m_camera \
>1871	ArgumentList	f
>1872	Argument	m_image_data [ i ] . m_camera . m_R [ 5 ]
>1873	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 5 ]
>1874	PrimaryExpression	5
>1875	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1876	Identifier	m_R
>1877	MemberAccess	m_image_data [ i ] . m_camera
>1878	Identifier	m_camera
>1879	ArrayIndexing	m_image_data [ i ]
>1880	Identifier	i
>1881	Identifier	m_image_data
>1882	Argument	m_image_data [ i ] . m_camera . m_R [ 4 ]
>1883	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 4 ]
>1884	PrimaryExpression	4
>1885	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1886	Identifier	m_R
>1887	MemberAccess	m_image_data [ i ] . m_camera
>1888	Identifier	m_camera
>1889	ArrayIndexing	m_image_data [ i ]
>1890	Identifier	i
>1891	Identifier	m_image_data
>1892	Argument	m_image_data [ i ] . m_camera . m_R [ 3 ]
>1893	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 3 ]
>1894	PrimaryExpression	3
>1895	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1896	Identifier	m_R
>1897	MemberAccess	m_image_data [ i ] . m_camera
>1898	Identifier	m_camera
>1899	ArrayIndexing	m_image_data [ i ]
>1900	Identifier	i
>1901	Identifier	m_image_data
>1902	Argument	\"%0.9e %0.9e %0.9e\n\"
>1903	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1904	Argument	f
>1905	Identifier	f
>1906	Callee	fprintf
>1907	Identifier	fprintf
>1908	ExpressionStatement	 
>1909	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 0 ] , m_image_data [ i ] . m_camera \
>1910	ArgumentList	f
>1911	Argument	m_image_data [ i ] . m_camera . m_R [ 2 ]
>1912	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 2 ]
>1913	PrimaryExpression	2
>1914	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1915	Identifier	m_R
>1916	MemberAccess	m_image_data [ i ] . m_camera
>1917	Identifier	m_camera
>1918	ArrayIndexing	m_image_data [ i ]
>1919	Identifier	i
>1920	Identifier	m_image_data
>1921	Argument	m_image_data [ i ] . m_camera . m_R [ 1 ]
>1922	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 1 ]
>1923	PrimaryExpression	1
>1924	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1925	Identifier	m_R
>1926	MemberAccess	m_image_data [ i ] . m_camera
>1927	Identifier	m_camera
>1928	ArrayIndexing	m_image_data [ i ]
>1929	Identifier	i
>1930	Identifier	m_image_data
>1931	Argument	m_image_data [ i ] . m_camera . m_R [ 0 ]
>1932	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 0 ]
>1933	PrimaryExpression	0
>1934	MemberAccess	m_image_data [ i ] . m_camera . m_R
>1935	Identifier	m_R
>1936	MemberAccess	m_image_data [ i ] . m_camera
>1937	Identifier	m_camera
>1938	ArrayIndexing	m_image_data [ i ]
>1939	Identifier	i
>1940	Identifier	m_image_data
>1941	Argument	\"%0.9e %0.9e %0.9e\n\"
>1942	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>1943	Argument	f
>1944	Identifier	f
>1945	Callee	fprintf
>1946	Identifier	fprintf
>1947	ExpressionStatement	 
>1948	CallExpression	fprintf ( f , \"%0.9e\n\" , m_image_data [ i ] . m_camera . m_focal )
>1949	ArgumentList	f
>1950	Argument	m_image_data [ i ] . m_camera . m_focal
>1951	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>1952	Identifier	m_focal
>1953	MemberAccess	m_image_data [ i ] . m_camera
>1954	Identifier	m_camera
>1955	ArrayIndexing	m_image_data [ i ]
>1956	Identifier	i
>1957	Identifier	m_image_data
>1958	Argument	\"%0.9e\n\"
>1959	PrimaryExpression	\"%0.9e\n\"
>1960	Argument	f
>1961	Identifier	f
>1962	Callee	fprintf
>1963	Identifier	fprintf
>1964	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>1965	CompoundStatement	 
>1966	ContinueStatement	 
>1967	ExpressionStatement	 
>1968	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1969	ArgumentList	f
>1970	Argument	\"0 0 0\n\"
>1971	PrimaryExpression	\"0 0 0\n\"
>1972	Argument	f
>1973	Identifier	f
>1974	Callee	fprintf
>1975	Identifier	fprintf
>1976	ExpressionStatement	 
>1977	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1978	ArgumentList	f
>1979	Argument	\"0 0 0\n\"
>1980	PrimaryExpression	\"0 0 0\n\"
>1981	Argument	f
>1982	Identifier	f
>1983	Callee	fprintf
>1984	Identifier	fprintf
>1985	ExpressionStatement	 
>1986	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1987	ArgumentList	f
>1988	Argument	\"0 0 0\n\"
>1989	PrimaryExpression	\"0 0 0\n\"
>1990	Argument	f
>1991	Identifier	f
>1992	Callee	fprintf
>1993	Identifier	fprintf
>1994	ExpressionStatement	 
>1995	CallExpression	fprintf ( f , \"0 0 0\n\" )
>1996	ArgumentList	f
>1997	Argument	\"0 0 0\n\"
>1998	PrimaryExpression	\"0 0 0\n\"
>1999	Argument	f
>2000	Identifier	f
>2001	Callee	fprintf
>2002	Identifier	fprintf
>2003	ExpressionStatement	 
>2004	CallExpression	fprintf ( f , \"0\n\" )
>2005	ArgumentList	f
>2006	Argument	\"0\n\"
>2007	PrimaryExpression	\"0\n\"
>2008	Argument	f
>2009	Identifier	f
>2010	Callee	fprintf
>2011	Identifier	fprintf
>2012	Condition	 
>2013	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>2014	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2015	Identifier	m_adjusted
>2016	MemberAccess	m_image_data [ i ] . m_camera
>2017	Identifier	m_camera
>2018	ArrayIndexing	m_image_data [ i ]
>2019	Identifier	i
>2020	Identifier	m_image_data
>2021	UnaryOperator	!
>2022	IncDecOp	 
>2023	IncDec	++
>2024	Identifier	i
>2025	Condition	 
>2026	RelationalExpression	i < num_images
>2027	Identifier	num_images
>2028	Identifier	i
>2029	ForInit	 
>2030	IdentifierDeclStatement	int i = 0 ;
>2031	IdentifierDecl	i = 0
>2032	AssignmentExpr	i = 0
>2033	PrimaryExpression	0
>2034	Identifier	i
>2035	Identifier	i
>2036	IdentifierDeclType	int
>2037	ExpressionStatement	 
>2038	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_points )
>2039	ArgumentList	f
>2040	Argument	num_points
>2041	Identifier	num_points
>2042	Argument	num_images
>2043	Identifier	num_images
>2044	Argument	\"%d %d\n\"
>2045	PrimaryExpression	\"%d %d\n\"
>2046	Argument	f
>2047	Identifier	f
>2048	Callee	fprintf
>2049	Identifier	fprintf
>2050	IdentifierDeclStatement	 
>2051	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>2052	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>2053	CastExpression	( int ) m_point_data . size ( )
>2054	CallExpression	m_point_data . size ( )
>2055	ArgumentList	 
>2056	Callee	m_point_data . size
>2057	MemberAccess	m_point_data . size
>2058	Identifier	size
>2059	Identifier	m_point_data
>2060	CastTarget	int
>2061	Identifier	num_points
>2062	Identifier	num_points
>2063	IdentifierDeclType	int
>2064	IfStatement	if ( f == NULL )
>2065	CompoundStatement	 
>2066	ReturnStatement	 
>2067	ExpressionStatement	 
>2068	Statement	 
>2069	Statement	 
>2070	Statement	 
>2071	Statement	 
>2072	Statement	 
>2073	Statement	 
>2074	Statement	 
>2075	Condition	 
>2076	EqualityExpression	f == NULL
>2077	Identifier	NULL
>2078	Identifier	f
>2079	IdentifierDeclStatement	 
>2080	IdentifierDecl	* f = fopen ( buf , \"w\" )
>2081	AssignmentExpr	* f = fopen ( buf , \"w\" )
>2082	CallExpression	fopen ( buf , \"w\" )
>2083	ArgumentList	buf
>2084	Argument	\"w\"
>2085	PrimaryExpression	\"w\"
>2086	Argument	buf
>2087	Identifier	buf
>2088	Callee	fopen
>2089	Identifier	fopen
>2090	Identifier	f
>2091	Identifier	f
>2092	IdentifierDeclType	FILE *
>2093	ExpressionStatement	 
>2094	CallExpression	sprintf ( buf , \"bundle.scale.out\" )
>2095	ArgumentList	buf
>2096	Argument	\"bundle.scale.out\"
>2097	PrimaryExpression	\"bundle.scale.out\"
>2098	Argument	buf
>2099	Identifier	buf
>2100	Callee	sprintf
>2101	Identifier	sprintf
>2102	IdentifierDeclStatement	 
>2103	IdentifierDecl	buf [ 256 ]
>2104	PrimaryExpression	256
>2105	Identifier	buf
>2106	IdentifierDeclType	char [ 256 ]
>2107	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2108	CompoundStatement	 
>2109	IfStatement	if ( m_image_data [ i ] . m_camera . m_adjusted )
>2110	CompoundStatement	 
>2111	ExpressionStatement	 
>2112	AssignmentExpr	m_image_data [ i ] . m_camera . m_focal *= focal
>2113	Identifier	focal
>2114	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>2115	Identifier	m_focal
>2116	MemberAccess	m_image_data [ i ] . m_camera
>2117	Identifier	m_camera
>2118	ArrayIndexing	m_image_data [ i ]
>2119	Identifier	i
>2120	Identifier	m_image_data
>2121	Condition	 
>2122	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2123	Identifier	m_adjusted
>2124	MemberAccess	m_image_data [ i ] . m_camera
>2125	Identifier	m_camera
>2126	ArrayIndexing	m_image_data [ i ]
>2127	Identifier	i
>2128	Identifier	m_image_data
>2129	IncDecOp	 
>2130	IncDec	++
>2131	Identifier	i
>2132	Condition	 
>2133	RelationalExpression	i < num_images
>2134	Identifier	num_images
>2135	Identifier	i
>2136	ForInit	 
>2137	IdentifierDeclStatement	int i = 0 ;
>2138	IdentifierDecl	i = 0
>2139	AssignmentExpr	i = 0
>2140	PrimaryExpression	0
>2141	Identifier	i
>2142	Identifier	i
>2143	IdentifierDeclType	int
>2144	IdentifierDeclStatement	 
>2145	IdentifierDecl	num_images = GetNumImages ( )
>2146	AssignmentExpr	num_images = GetNumImages ( )
>2147	CallExpression	GetNumImages ( )
>2148	ArgumentList	 
>2149	Callee	GetNumImages
>2150	Identifier	GetNumImages
>2151	Identifier	num_images
>2152	Identifier	num_images
>2153	IdentifierDeclType	int
>2211	FunctionDef	BundlerApp 
>2212	ParameterList	const char * ext
>2213	Parameter	 
>2214	Identifier	ext
>2215	ParameterType	const char *
>2216	ReturnType	void
>2217	CompoundStatement	 
>2218	ExpressionStatement	 
>2219	Identifier	map
>2220	Statement	 
>2221	Statement	 
>2222	Statement	 
>2223	ExpressionStatement	 
>2224	CallExpression	fclose ( f )
>2225	ArgumentList	f
>2226	Argument	f
>2227	Identifier	f
>2228	Callee	fclose
>2229	Identifier	fclose
>2230	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2231	CompoundStatement	 
>2232	IfStatement	if ( m_image_data [ i ] . m_keys_loaded )
>2233	ExpressionStatement	 
>2234	CallExpression	m_image_data [ i ] . UnloadKeys ( )
>2235	ArgumentList	 
>2236	Callee	m_image_data [ i ] . UnloadKeys
>2237	MemberAccess	m_image_data [ i ] . UnloadKeys
>2238	Identifier	UnloadKeys
>2239	ArrayIndexing	m_image_data [ i ]
>2240	Identifier	i
>2241	Identifier	m_image_data
>2242	Condition	 
>2243	MemberAccess	m_image_data [ i ] . m_keys_loaded
>2244	Identifier	m_keys_loaded
>2245	ArrayIndexing	m_image_data [ i ]
>2246	Identifier	i
>2247	Identifier	m_image_data
>2248	IncDecOp	 
>2249	IncDec	++
>2250	Identifier	i
>2251	Condition	 
>2252	RelationalExpression	i < num_images
>2253	Identifier	num_images
>2254	Identifier	i
>2255	ForInit	 
>2256	IdentifierDeclStatement	int i = 0 ;
>2257	IdentifierDecl	i = 0
>2258	AssignmentExpr	i = 0
>2259	PrimaryExpression	0
>2260	Identifier	i
>2261	Identifier	i
>2262	IdentifierDeclType	int
>2263	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2264	CompoundStatement	 
>2265	ExpressionStatement	 
>2266	CallExpression	fprintf ( f , \"\n\" )
>2267	ArgumentList	f
>2268	Argument	\"\n\"
>2269	PrimaryExpression	\"\n\"
>2270	Argument	f
>2271	Identifier	f
>2272	Callee	fprintf
>2273	Identifier	fprintf
>2274	ForStatement	for ( int j = 0 ; j < num_visible ; j ++ )
>2275	CompoundStatement	 
>2276	ExpressionStatement	 
>2277	CallExpression	fprintf ( f , \" %d %d %0.4f %0.4f\" , view_new , key , x , y )
>2278	ArgumentList	f
>2279	Argument	y
>2280	Identifier	y
>2281	Argument	x
>2282	Identifier	x
>2283	Argument	key
>2284	Identifier	key
>2285	Argument	view_new
>2286	Identifier	view_new
>2287	Argument	\" %d %d %0.4f %0.4f\"
>2288	PrimaryExpression	\" %d %d %0.4f %0.4f\"
>2289	Argument	f
>2290	Identifier	f
>2291	Callee	fprintf
>2292	Identifier	fprintf
>2293	IfStatement	if ( key < ( int ) m_image_data [ view ] . m_keys . size ( ) )
>2294	CompoundStatement	 
>2295	ExpressionStatement	 
>2296	AssignmentExpr	y = m_image_data [ view ] . m_keys [ key ] . m_y
>2297	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_y
>2298	Identifier	m_y
>2299	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>2300	Identifier	key
>2301	MemberAccess	m_image_data [ view ] . m_keys
>2302	Identifier	m_keys
>2303	ArrayIndexing	m_image_data [ view ]
>2304	Identifier	view
>2305	Identifier	m_image_data
>2306	Identifier	y
>2307	ExpressionStatement	 
>2308	AssignmentExpr	x = m_image_data [ view ] . m_keys [ key ] . m_x
>2309	MemberAccess	m_image_data [ view ] . m_keys [ key ] . m_x
>2310	Identifier	m_x
>2311	ArrayIndexing	m_image_data [ view ] . m_keys [ key ]
>2312	Identifier	key
>2313	MemberAccess	m_image_data [ view ] . m_keys
>2314	Identifier	m_keys
>2315	ArrayIndexing	m_image_data [ view ]
>2316	Identifier	view
>2317	Identifier	m_image_data
>2318	Identifier	x
>2319	Condition	 
>2320	RelationalExpression	key < ( int ) m_image_data [ view ] . m_keys . size ( )
>2321	CastExpression	( int ) m_image_data [ view ] . m_keys . size ( )
>2322	CallExpression	m_image_data [ view ] . m_keys . size ( )
>2323	ArgumentList	 
>2324	Callee	m_image_data [ view ] . m_keys . size
>2325	MemberAccess	m_image_data [ view ] . m_keys . size
>2326	Identifier	size
>2327	MemberAccess	m_image_data [ view ] . m_keys
>2328	Identifier	m_keys
>2329	ArrayIndexing	m_image_data [ view ]
>2330	Identifier	view
>2331	Identifier	m_image_data
>2332	CastTarget	int
>2333	Identifier	key
>2334	IdentifierDeclStatement	 
>2335	IdentifierDecl	y = 0.0
>2336	AssignmentExpr	y = 0.0
>2337	PrimaryExpression	0.0
>2338	Identifier	y
>2339	Identifier	y
>2340	IdentifierDeclType	double
>2341	IdentifierDecl	x = 0.0
>2342	AssignmentExpr	x = 0.0
>2343	PrimaryExpression	0.0
>2344	Identifier	x
>2345	Identifier	x
>2346	IdentifierDeclType	double
>2347	IfStatement	if ( ! m_image_data [ view ] . m_keys_loaded )
>2348	ExpressionStatement	 
>2349	CallExpression	m_image_data [ view ] . LoadKeys ( false )
>2350	ArgumentList	false
>2351	Argument	false
>2352	Identifier	false
>2353	Callee	m_image_data [ view ] . LoadKeys
>2354	MemberAccess	m_image_data [ view ] . LoadKeys
>2355	Identifier	LoadKeys
>2356	ArrayIndexing	m_image_data [ view ]
>2357	Identifier	view
>2358	Identifier	m_image_data
>2359	Condition	 
>2360	UnaryOp	! m_image_data [ view ] . m_keys_loaded
>2361	MemberAccess	m_image_data [ view ] . m_keys_loaded
>2362	Identifier	m_keys_loaded
>2363	ArrayIndexing	m_image_data [ view ]
>2364	Identifier	view
>2365	Identifier	m_image_data
>2366	UnaryOperator	!
>2367	IdentifierDeclStatement	 
>2368	IdentifierDecl	key = p . m_views [ j ] . second
>2369	AssignmentExpr	key = p . m_views [ j ] . second
>2370	MemberAccess	p . m_views [ j ] . second
>2371	Identifier	second
>2372	ArrayIndexing	p . m_views [ j ]
>2373	Identifier	j
>2374	MemberAccess	p . m_views
>2375	Identifier	m_views
>2376	Identifier	p
>2377	Identifier	key
>2378	Identifier	key
>2379	IdentifierDeclType	int
>2380	IdentifierDeclStatement	 
>2381	IdentifierDecl	view_new = map [ view ]
>2382	AssignmentExpr	view_new = map [ view ]
>2383	ArrayIndexing	map [ view ]
>2384	Identifier	view
>2385	Identifier	map
>2386	Identifier	view_new
>2387	Identifier	view_new
>2388	IdentifierDeclType	int
>2389	IdentifierDeclStatement	 
>2390	IdentifierDecl	view = p . m_views [ j ] . first
>2391	AssignmentExpr	view = p . m_views [ j ] . first
>2392	MemberAccess	p . m_views [ j ] . first
>2393	Identifier	first
>2394	ArrayIndexing	p . m_views [ j ]
>2395	Identifier	j
>2396	MemberAccess	p . m_views
>2397	Identifier	m_views
>2398	Identifier	p
>2399	Identifier	view
>2400	Identifier	view
>2401	IdentifierDeclType	int
>2402	IncDecOp	 
>2403	IncDec	++
>2404	Identifier	j
>2405	Condition	 
>2406	RelationalExpression	j < num_visible
>2407	Identifier	num_visible
>2408	Identifier	j
>2409	ForInit	 
>2410	IdentifierDeclStatement	int j = 0 ;
>2411	IdentifierDecl	j = 0
>2412	AssignmentExpr	j = 0
>2413	PrimaryExpression	0
>2414	Identifier	j
>2415	Identifier	j
>2416	IdentifierDeclType	int
>2417	ExpressionStatement	 
>2418	CallExpression	fprintf ( f , \"%d\" , num_visible )
>2419	ArgumentList	f
>2420	Argument	num_visible
>2421	Identifier	num_visible
>2422	Argument	\"%d\"
>2423	PrimaryExpression	\"%d\"
>2424	Argument	f
>2425	Identifier	f
>2426	Callee	fprintf
>2427	Identifier	fprintf
>2428	ExpressionStatement	 
>2429	CallExpression	fprintf ( f , \"%d %d %d\n\" , iround ( p . m_color [ 0 ] ) , iround ( p . m_color [ 1 ] ) , iround ( p . m_color [ \
>2430	ArgumentList	f
>2431	Argument	iround ( p . m_color [ 2 ] )
>2432	CallExpression	iround ( p . m_color [ 2 ] )
>2433	ArgumentList	p . m_color [ 2 ]
>2434	Argument	p . m_color [ 2 ]
>2435	ArrayIndexing	p . m_color [ 2 ]
>2436	PrimaryExpression	2
>2437	MemberAccess	p . m_color
>2438	Identifier	m_color
>2439	Identifier	p
>2440	Callee	iround
>2441	Identifier	iround
>2442	Argument	iround ( p . m_color [ 1 ] )
>2443	CallExpression	iround ( p . m_color [ 1 ] )
>2444	ArgumentList	p . m_color [ 1 ]
>2445	Argument	p . m_color [ 1 ]
>2446	ArrayIndexing	p . m_color [ 1 ]
>2447	PrimaryExpression	1
>2448	MemberAccess	p . m_color
>2449	Identifier	m_color
>2450	Identifier	p
>2451	Callee	iround
>2452	Identifier	iround
>2453	Argument	iround ( p . m_color [ 0 ] )
>2454	CallExpression	iround ( p . m_color [ 0 ] )
>2455	ArgumentList	p . m_color [ 0 ]
>2456	Argument	p . m_color [ 0 ]
>2457	ArrayIndexing	p . m_color [ 0 ]
>2458	PrimaryExpression	0
>2459	MemberAccess	p . m_color
>2460	Identifier	m_color
>2461	Identifier	p
>2462	Callee	iround
>2463	Identifier	iround
>2464	Argument	\"%d %d %d\n\"
>2465	PrimaryExpression	\"%d %d %d\n\"
>2466	Argument	f
>2467	Identifier	f
>2468	Callee	fprintf
>2469	Identifier	fprintf
>2470	ExpressionStatement	 
>2471	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , p . m_pos [ 0 ] , p . m_pos [ 1 ] , p . m_pos [ 2 ] )
>2472	ArgumentList	f
>2473	Argument	p . m_pos [ 2 ]
>2474	ArrayIndexing	p . m_pos [ 2 ]
>2475	PrimaryExpression	2
>2476	MemberAccess	p . m_pos
>2477	Identifier	m_pos
>2478	Identifier	p
>2479	Argument	p . m_pos [ 1 ]
>2480	ArrayIndexing	p . m_pos [ 1 ]
>2481	PrimaryExpression	1
>2482	MemberAccess	p . m_pos
>2483	Identifier	m_pos
>2484	Identifier	p
>2485	Argument	p . m_pos [ 0 ]
>2486	ArrayIndexing	p . m_pos [ 0 ]
>2487	PrimaryExpression	0
>2488	MemberAccess	p . m_pos
>2489	Identifier	m_pos
>2490	Identifier	p
>2491	Argument	\"%0.9e %0.9e %0.9e\n\"
>2492	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>2493	Argument	f
>2494	Identifier	f
>2495	Callee	fprintf
>2496	Identifier	fprintf
>2497	IfStatement	if ( num_visible < 2 )
>2498	ContinueStatement	 
>2499	Condition	 
>2500	RelationalExpression	num_visible < 2
>2501	PrimaryExpression	2
>2502	Identifier	num_visible
>2503	IdentifierDeclStatement	 
>2504	IdentifierDecl	num_visible = ( int ) p . m_views . size ( )
>2505	AssignmentExpr	num_visible = ( int ) p . m_views . size ( )
>2506	CastExpression	( int ) p . m_views . size ( )
>2507	CallExpression	p . m_views . size ( )
>2508	ArgumentList	 
>2509	Callee	p . m_views . size
>2510	MemberAccess	p . m_views . size
>2511	Identifier	size
>2512	MemberAccess	p . m_views
>2513	Identifier	m_views
>2514	Identifier	p
>2515	CastTarget	int
>2516	Identifier	num_visible
>2517	Identifier	num_visible
>2518	IdentifierDeclType	int
>2519	IdentifierDeclStatement	 
>2520	IdentifierDecl	& p = m_point_data [ i ]
>2521	AssignmentExpr	& p = m_point_data [ i ]
>2522	ArrayIndexing	m_point_data [ i ]
>2523	Identifier	i
>2524	Identifier	m_point_data
>2525	Identifier	p
>2526	Identifier	p
>2527	IdentifierDeclType	PointData &
>2528	IncDecOp	 
>2529	IncDec	++
>2530	Identifier	i
>2531	Condition	 
>2532	RelationalExpression	i < num_points
>2533	Identifier	num_points
>2534	Identifier	i
>2535	ForInit	 
>2536	IdentifierDeclStatement	int i = 0 ;
>2537	IdentifierDecl	i = 0
>2538	AssignmentExpr	i = 0
>2539	PrimaryExpression	0
>2540	Identifier	i
>2541	Identifier	i
>2542	IdentifierDeclType	int
>2543	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2544	CompoundStatement	 
>2545	ExpressionStatement	 
>2546	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , t [ 0 ] , t [ 1 ] , t [ 2 ] )
>2547	ArgumentList	f
>2548	Argument	t [ 2 ]
>2549	ArrayIndexing	t [ 2 ]
>2550	PrimaryExpression	2
>2551	Identifier	t
>2552	Argument	t [ 1 ]
>2553	ArrayIndexing	t [ 1 ]
>2554	PrimaryExpression	1
>2555	Identifier	t
>2556	Argument	t [ 0 ]
>2557	ArrayIndexing	t [ 0 ]
>2558	PrimaryExpression	0
>2559	Identifier	t
>2560	Argument	\"%0.9e %0.9e %0.9e\n\"
>2561	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>2562	Argument	f
>2563	Identifier	f
>2564	Callee	fprintf
>2565	Identifier	fprintf
>2566	IdentifierDeclStatement	 
>2567	IdentifierDecl	* t = m_image_data [ i ] . m_camera . m_t
>2568	AssignmentExpr	* t = m_image_data [ i ] . m_camera . m_t
>2569	MemberAccess	m_image_data [ i ] . m_camera . m_t
>2570	Identifier	m_t
>2571	MemberAccess	m_image_data [ i ] . m_camera
>2572	Identifier	m_camera
>2573	ArrayIndexing	m_image_data [ i ]
>2574	Identifier	i
>2575	Identifier	m_image_data
>2576	Identifier	t
>2577	Identifier	t
>2578	IdentifierDeclType	double *
>2579	ExpressionStatement	 
>2580	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 6 ] , m_image_data [ i ] . m_camera \
>2581	ArgumentList	f
>2582	Argument	m_image_data [ i ] . m_camera . m_R [ 8 ]
>2583	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 8 ]
>2584	PrimaryExpression	8
>2585	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2586	Identifier	m_R
>2587	MemberAccess	m_image_data [ i ] . m_camera
>2588	Identifier	m_camera
>2589	ArrayIndexing	m_image_data [ i ]
>2590	Identifier	i
>2591	Identifier	m_image_data
>2592	Argument	m_image_data [ i ] . m_camera . m_R [ 7 ]
>2593	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 7 ]
>2594	PrimaryExpression	7
>2595	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2596	Identifier	m_R
>2597	MemberAccess	m_image_data [ i ] . m_camera
>2598	Identifier	m_camera
>2599	ArrayIndexing	m_image_data [ i ]
>2600	Identifier	i
>2601	Identifier	m_image_data
>2602	Argument	m_image_data [ i ] . m_camera . m_R [ 6 ]
>2603	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 6 ]
>2604	PrimaryExpression	6
>2605	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2606	Identifier	m_R
>2607	MemberAccess	m_image_data [ i ] . m_camera
>2608	Identifier	m_camera
>2609	ArrayIndexing	m_image_data [ i ]
>2610	Identifier	i
>2611	Identifier	m_image_data
>2612	Argument	\"%0.9e %0.9e %0.9e\n\"
>2613	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>2614	Argument	f
>2615	Identifier	f
>2616	Callee	fprintf
>2617	Identifier	fprintf
>2618	ExpressionStatement	 
>2619	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 3 ] , m_image_data [ i ] . m_camera \
>2620	ArgumentList	f
>2621	Argument	m_image_data [ i ] . m_camera . m_R [ 5 ]
>2622	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 5 ]
>2623	PrimaryExpression	5
>2624	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2625	Identifier	m_R
>2626	MemberAccess	m_image_data [ i ] . m_camera
>2627	Identifier	m_camera
>2628	ArrayIndexing	m_image_data [ i ]
>2629	Identifier	i
>2630	Identifier	m_image_data
>2631	Argument	m_image_data [ i ] . m_camera . m_R [ 4 ]
>2632	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 4 ]
>2633	PrimaryExpression	4
>2634	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2635	Identifier	m_R
>2636	MemberAccess	m_image_data [ i ] . m_camera
>2637	Identifier	m_camera
>2638	ArrayIndexing	m_image_data [ i ]
>2639	Identifier	i
>2640	Identifier	m_image_data
>2641	Argument	m_image_data [ i ] . m_camera . m_R [ 3 ]
>2642	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 3 ]
>2643	PrimaryExpression	3
>2644	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2645	Identifier	m_R
>2646	MemberAccess	m_image_data [ i ] . m_camera
>2647	Identifier	m_camera
>2648	ArrayIndexing	m_image_data [ i ]
>2649	Identifier	i
>2650	Identifier	m_image_data
>2651	Argument	\"%0.9e %0.9e %0.9e\n\"
>2652	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>2653	Argument	f
>2654	Identifier	f
>2655	Callee	fprintf
>2656	Identifier	fprintf
>2657	ExpressionStatement	 
>2658	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_R [ 0 ] , m_image_data [ i ] . m_camera \
>2659	ArgumentList	f
>2660	Argument	m_image_data [ i ] . m_camera . m_R [ 2 ]
>2661	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 2 ]
>2662	PrimaryExpression	2
>2663	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2664	Identifier	m_R
>2665	MemberAccess	m_image_data [ i ] . m_camera
>2666	Identifier	m_camera
>2667	ArrayIndexing	m_image_data [ i ]
>2668	Identifier	i
>2669	Identifier	m_image_data
>2670	Argument	m_image_data [ i ] . m_camera . m_R [ 1 ]
>2671	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 1 ]
>2672	PrimaryExpression	1
>2673	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2674	Identifier	m_R
>2675	MemberAccess	m_image_data [ i ] . m_camera
>2676	Identifier	m_camera
>2677	ArrayIndexing	m_image_data [ i ]
>2678	Identifier	i
>2679	Identifier	m_image_data
>2680	Argument	m_image_data [ i ] . m_camera . m_R [ 0 ]
>2681	ArrayIndexing	m_image_data [ i ] . m_camera . m_R [ 0 ]
>2682	PrimaryExpression	0
>2683	MemberAccess	m_image_data [ i ] . m_camera . m_R
>2684	Identifier	m_R
>2685	MemberAccess	m_image_data [ i ] . m_camera
>2686	Identifier	m_camera
>2687	ArrayIndexing	m_image_data [ i ]
>2688	Identifier	i
>2689	Identifier	m_image_data
>2690	Argument	\"%0.9e %0.9e %0.9e\n\"
>2691	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>2692	Argument	f
>2693	Identifier	f
>2694	Callee	fprintf
>2695	Identifier	fprintf
>2696	ExpressionStatement	 
>2697	CallExpression	fprintf ( f , \"%0.9e %0.9e %0.9e\n\" , m_image_data [ i ] . m_camera . m_focal , m_image_data [ i ] . m_camera . \
>2698	ArgumentList	f
>2699	Argument	m_image_data [ i ] . m_camera . m_k [ 1 ]
>2700	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 1 ]
>2701	PrimaryExpression	1
>2702	MemberAccess	m_image_data [ i ] . m_camera . m_k
>2703	Identifier	m_k
>2704	MemberAccess	m_image_data [ i ] . m_camera
>2705	Identifier	m_camera
>2706	ArrayIndexing	m_image_data [ i ]
>2707	Identifier	i
>2708	Identifier	m_image_data
>2709	Argument	m_image_data [ i ] . m_camera . m_k [ 0 ]
>2710	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 0 ]
>2711	PrimaryExpression	0
>2712	MemberAccess	m_image_data [ i ] . m_camera . m_k
>2713	Identifier	m_k
>2714	MemberAccess	m_image_data [ i ] . m_camera
>2715	Identifier	m_camera
>2716	ArrayIndexing	m_image_data [ i ]
>2717	Identifier	i
>2718	Identifier	m_image_data
>2719	Argument	m_image_data [ i ] . m_camera . m_focal
>2720	MemberAccess	m_image_data [ i ] . m_camera . m_focal
>2721	Identifier	m_focal
>2722	MemberAccess	m_image_data [ i ] . m_camera
>2723	Identifier	m_camera
>2724	ArrayIndexing	m_image_data [ i ]
>2725	Identifier	i
>2726	Identifier	m_image_data
>2727	Argument	\"%0.9e %0.9e %0.9e\n\"
>2728	PrimaryExpression	\"%0.9e %0.9e %0.9e\n\"
>2729	Argument	f
>2730	Identifier	f
>2731	Callee	fprintf
>2732	Identifier	fprintf
>2733	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>2734	ContinueStatement	 
>2735	Condition	 
>2736	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>2737	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2738	Identifier	m_adjusted
>2739	MemberAccess	m_image_data [ i ] . m_camera
>2740	Identifier	m_camera
>2741	ArrayIndexing	m_image_data [ i ]
>2742	Identifier	i
>2743	Identifier	m_image_data
>2744	UnaryOperator	!
>2745	IncDecOp	 
>2746	IncDec	++
>2747	Identifier	i
>2748	Condition	 
>2749	RelationalExpression	i < num_images
>2750	Identifier	num_images
>2751	Identifier	i
>2752	ForInit	 
>2753	IdentifierDeclStatement	int i = 0 ;
>2754	IdentifierDecl	i = 0
>2755	AssignmentExpr	i = 0
>2756	PrimaryExpression	0
>2757	Identifier	i
>2758	Identifier	i
>2759	IdentifierDeclType	int
>2760	ExpressionStatement	 
>2761	CallExpression	fprintf ( f , \"%d %d\n\" , num_adj_images , num_good_points )
>2762	ArgumentList	f
>2763	Argument	num_good_points
>2764	Identifier	num_good_points
>2765	Argument	num_adj_images
>2766	Identifier	num_adj_images
>2767	Argument	\"%d %d\n\"
>2768	PrimaryExpression	\"%d %d\n\"
>2769	Argument	f
>2770	Identifier	f
>2771	Callee	fprintf
>2772	Identifier	fprintf
>2773	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>2774	CompoundStatement	 
>2775	IfStatement	if ( m_point_data [ i ] . m_views . size ( ) >= 2 )
>2776	ExpressionStatement	 
>2777	IncDecOp	num_good_points ++
>2778	IncDec	++
>2779	Identifier	num_good_points
>2780	Condition	 
>2781	RelationalExpression	m_point_data [ i ] . m_views . size ( ) >= 2
>2782	PrimaryExpression	2
>2783	CallExpression	m_point_data [ i ] . m_views . size ( )
>2784	ArgumentList	 
>2785	Callee	m_point_data [ i ] . m_views . size
>2786	MemberAccess	m_point_data [ i ] . m_views . size
>2787	Identifier	size
>2788	MemberAccess	m_point_data [ i ] . m_views
>2789	Identifier	m_views
>2790	ArrayIndexing	m_point_data [ i ]
>2791	Identifier	i
>2792	Identifier	m_point_data
>2793	IncDecOp	 
>2794	IncDec	++
>2795	Identifier	i
>2796	Condition	 
>2797	RelationalExpression	i < num_points
>2798	Identifier	num_points
>2799	Identifier	i
>2800	ForInit	 
>2801	IdentifierDeclStatement	int i = 0 ;
>2802	IdentifierDecl	i = 0
>2803	AssignmentExpr	i = 0
>2804	PrimaryExpression	0
>2805	Identifier	i
>2806	Identifier	i
>2807	IdentifierDeclType	int
>2808	IdentifierDeclStatement	 
>2809	IdentifierDecl	num_good_points = 0
>2810	AssignmentExpr	num_good_points = 0
>2811	PrimaryExpression	0
>2812	Identifier	num_good_points
>2813	Identifier	num_good_points
>2814	IdentifierDeclType	int
>2815	IdentifierDeclStatement	 
>2816	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>2817	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>2818	CastExpression	( int ) m_point_data . size ( )
>2819	CallExpression	m_point_data . size ( )
>2820	ArgumentList	 
>2821	Callee	m_point_data . size
>2822	MemberAccess	m_point_data . size
>2823	Identifier	size
>2824	Identifier	m_point_data
>2825	CastTarget	int
>2826	Identifier	num_points
>2827	Identifier	num_points
>2828	IdentifierDeclType	int
>2829	ExpressionStatement	 
>2830	CallExpression	fprintf ( f , \"# Bundle file v0.3\n\" )
>2831	ArgumentList	f
>2832	Argument	\"# Bundle file v0.3\n\"
>2833	PrimaryExpression	\"# Bundle file v0.3\n\"
>2834	Argument	f
>2835	Identifier	f
>2836	Callee	fprintf
>2837	Identifier	fprintf
>2838	IfStatement	if ( m_estimate_distortion && m_bundle_version > 0.1 )
>2839	CompoundStatement	 
>2840	ExpressionStatement	 
>2841	CallExpression	fprintf ( f , \"v%lf\n\" , m_bundle_version )
>2842	ArgumentList	f
>2843	Argument	m_bundle_version
>2844	Identifier	m_bundle_version
>2845	Argument	\"v%lf\n\"
>2846	PrimaryExpression	\"v%lf\n\"
>2847	Argument	f
>2848	Identifier	f
>2849	Callee	fprintf
>2850	Identifier	fprintf
>2851	Condition	 
>2852	AndExpression	m_estimate_distortion && m_bundle_version > 0.1
>2853	RelationalExpression	m_bundle_version > 0.1
>2854	PrimaryExpression	0.1
>2855	Identifier	m_bundle_version
>2856	Identifier	m_estimate_distortion
>2857	IfStatement	if ( f == NULL )
>2858	CompoundStatement	 
>2859	ReturnStatement	 
>2860	ExpressionStatement	 
>2861	Statement	 
>2862	Statement	 
>2863	Statement	 
>2864	Statement	 
>2865	Statement	 
>2866	Statement	 
>2867	Statement	 
>2868	Condition	 
>2869	EqualityExpression	f == NULL
>2870	Identifier	NULL
>2871	Identifier	f
>2872	ExpressionStatement	 
>2873	AssignmentExpr	f = fopen ( buf , \"w\" )
>2874	CallExpression	fopen ( buf , \"w\" )
>2875	ArgumentList	buf
>2876	Argument	\"w\"
>2877	PrimaryExpression	\"w\"
>2878	Argument	buf
>2879	Identifier	buf
>2880	Callee	fopen
>2881	Identifier	fopen
>2882	Identifier	f
>2883	ExpressionStatement	 
>2884	CallExpression	sprintf ( buf , \"bundle.%s.out\" , ext )
>2885	ArgumentList	buf
>2886	Argument	ext
>2887	Identifier	ext
>2888	Argument	\"bundle.%s.out\"
>2889	PrimaryExpression	\"bundle.%s.out\"
>2890	Argument	buf
>2891	Identifier	buf
>2892	Callee	sprintf
>2893	Identifier	sprintf
>2894	ExpressionStatement	 
>2895	CallExpression	fclose ( f )
>2896	ArgumentList	f
>2897	Argument	f
>2898	Identifier	f
>2899	Callee	fclose
>2900	Identifier	fclose
>2901	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>2902	CompoundStatement	 
>2903	ExpressionStatement	 
>2904	IncDecOp	num_adj_images ++
>2905	IncDec	++
>2906	Identifier	num_adj_images
>2907	ExpressionStatement	 
>2908	AssignmentExpr	map [ i ] = num_adj_images
>2909	Identifier	num_adj_images
>2910	ArrayIndexing	map [ i ]
>2911	Identifier	i
>2912	Identifier	map
>2913	IfStatement	if ( m_image_data [ i ] . m_has_init_focal )
>2914	ElseStatement	else
>2915	ExpressionStatement	 
>2916	CallExpression	fprintf ( f , \"%s\n\" , m_image_data [ i ] . m_name )
>2917	ArgumentList	f
>2918	Argument	m_image_data [ i ] . m_name
>2919	MemberAccess	m_image_data [ i ] . m_name
>2920	Identifier	m_name
>2921	ArrayIndexing	m_image_data [ i ]
>2922	Identifier	i
>2923	Identifier	m_image_data
>2924	Argument	\"%s\n\"
>2925	PrimaryExpression	\"%s\n\"
>2926	Argument	f
>2927	Identifier	f
>2928	Callee	fprintf
>2929	Identifier	fprintf
>2930	ExpressionStatement	 
>2931	CallExpression	fprintf ( f , \"%s %d %0.5f\n\" , m_image_data [ i ] . m_name , m_image_data [ i ] . m_fisheye , m_image_data [ i ] \
>2932	ArgumentList	f
>2933	Argument	m_image_data [ i ] . m_init_focal
>2934	MemberAccess	m_image_data [ i ] . m_init_focal
>2935	Identifier	m_init_focal
>2936	ArrayIndexing	m_image_data [ i ]
>2937	Identifier	i
>2938	Identifier	m_image_data
>2939	Argument	m_image_data [ i ] . m_fisheye
>2940	MemberAccess	m_image_data [ i ] . m_fisheye
>2941	Identifier	m_fisheye
>2942	ArrayIndexing	m_image_data [ i ]
>2943	Identifier	i
>2944	Identifier	m_image_data
>2945	Argument	m_image_data [ i ] . m_name
>2946	MemberAccess	m_image_data [ i ] . m_name
>2947	Identifier	m_name
>2948	ArrayIndexing	m_image_data [ i ]
>2949	Identifier	i
>2950	Identifier	m_image_data
>2951	Argument	\"%s %d %0.5f\n\"
>2952	PrimaryExpression	\"%s %d %0.5f\n\"
>2953	Argument	f
>2954	Identifier	f
>2955	Callee	fprintf
>2956	Identifier	fprintf
>2957	Condition	 
>2958	MemberAccess	m_image_data [ i ] . m_has_init_focal
>2959	Identifier	m_has_init_focal
>2960	ArrayIndexing	m_image_data [ i ]
>2961	Identifier	i
>2962	Identifier	m_image_data
>2963	IfStatement	if ( m_image_data [ i ] . m_ignore_in_bundle )
>2964	CompoundStatement	 
>2965	ContinueStatement	 
>2966	ExpressionStatement	 
>2967	CallExpression	printf ( \"[OutputCompressed] Ignoring image %d\n\" , i )
>2968	ArgumentList	\"[OutputCompressed] Ignoring image %d\n\"
>2969	Argument	i
>2970	Identifier	i
>2971	Argument	\"[OutputCompressed] Ignoring image %d\n\"
>2972	PrimaryExpression	\"[OutputCompressed] Ignoring image %d\n\"
>2973	Callee	printf
>2974	Identifier	printf
>2975	Condition	 
>2976	MemberAccess	m_image_data [ i ] . m_ignore_in_bundle
>2977	Identifier	m_ignore_in_bundle
>2978	ArrayIndexing	m_image_data [ i ]
>2979	Identifier	i
>2980	Identifier	m_image_data
>2981	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>2982	ContinueStatement	 
>2983	Condition	 
>2984	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>2985	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>2986	Identifier	m_adjusted
>2987	MemberAccess	m_image_data [ i ] . m_camera
>2988	Identifier	m_camera
>2989	ArrayIndexing	m_image_data [ i ]
>2990	Identifier	i
>2991	Identifier	m_image_data
>2992	UnaryOperator	!
>2993	IncDecOp	 
>2994	IncDec	++
>2995	Identifier	i
>2996	Condition	 
>2997	RelationalExpression	i < num_images
>2998	Identifier	num_images
>2999	Identifier	i
>3000	ForInit	 
>3001	IdentifierDeclStatement	int i = 0 ;
>3002	IdentifierDecl	i = 0
>3003	AssignmentExpr	i = 0
>3004	PrimaryExpression	0
>3005	Identifier	i
>3006	Identifier	i
>3007	IdentifierDeclType	int
>3008	IdentifierDeclStatement	 
>3009	IdentifierDecl	* map = new int [ num_images ]
>3010	AssignmentExpr	* map = new int [ num_images ]
>3011	Identifier	num_images
>3012	Identifier	num_images
>3013	Identifier	map
>3014	IdentifierDeclType	int *
>3015	IdentifierDeclStatement	 
>3016	IdentifierDecl	num_adj_images = 0
>3017	AssignmentExpr	num_adj_images = 0
>3018	PrimaryExpression	0
>3019	Identifier	num_adj_images
>3020	Identifier	num_adj_images
>3021	IdentifierDeclType	int
>3022	IdentifierDeclStatement	 
>3023	IdentifierDecl	num_images = GetNumImages ( )
>3024	AssignmentExpr	num_images = GetNumImages ( )
>3025	CallExpression	GetNumImages ( )
>3026	ArgumentList	 
>3027	Callee	GetNumImages
>3028	Identifier	GetNumImages
>3029	Identifier	num_images
>3030	Identifier	num_images
>3031	IdentifierDeclType	int
>3032	IfStatement	if ( f == NULL )
>3033	CompoundStatement	 
>3034	ReturnStatement	 
>3035	ExpressionStatement	 
>3036	Statement	 
>3037	Statement	 
>3038	Statement	 
>3039	Statement	 
>3040	Statement	 
>3041	Statement	 
>3042	Statement	 
>3043	Condition	 
>3044	EqualityExpression	f == NULL
>3045	Identifier	NULL
>3046	Identifier	f
>3047	IdentifierDeclStatement	 
>3048	IdentifierDecl	* f = fopen ( buf , \"w\" )
>3049	AssignmentExpr	* f = fopen ( buf , \"w\" )
>3050	CallExpression	fopen ( buf , \"w\" )
>3051	ArgumentList	buf
>3052	Argument	\"w\"
>3053	PrimaryExpression	\"w\"
>3054	Argument	buf
>3055	Identifier	buf
>3056	Callee	fopen
>3057	Identifier	fopen
>3058	Identifier	f
>3059	Identifier	f
>3060	IdentifierDeclType	FILE *
>3061	ExpressionStatement	 
>3062	CallExpression	sprintf ( buf , \"list.%s.txt\" , ext )
>3063	ArgumentList	buf
>3064	Argument	ext
>3065	Identifier	ext
>3066	Argument	\"list.%s.txt\"
>3067	PrimaryExpression	\"list.%s.txt\"
>3068	Argument	buf
>3069	Identifier	buf
>3070	Callee	sprintf
>3071	Identifier	sprintf
>3072	IdentifierDeclStatement	 
>3073	IdentifierDecl	buf [ 256 ]
>3074	PrimaryExpression	256
>3075	Identifier	buf
>3076	IdentifierDeclType	char [ 256 ]
>3152	FunctionDef	BundlerApp 
>3153	ParameterList	 
>3154	ReturnType	void
>3155	CompoundStatement	 
>3156	ExpressionStatement	 
>3157	CallExpression	printf ( \"[PruneBadPoints] Pruned %d points\n\" , num_pruned )
>3158	ArgumentList	\"[PruneBadPoints] Pruned %d points\n\"
>3159	Argument	num_pruned
>3160	Identifier	num_pruned
>3161	Argument	\"[PruneBadPoints] Pruned %d points\n\"
>3162	PrimaryExpression	\"[PruneBadPoints] Pruned %d points\n\"
>3163	Callee	printf
>3164	Identifier	printf
>3165	ForStatement	for ( int i = 0 ; i < num_points ; i ++ )
>3166	CompoundStatement	 
>3167	IfStatement	if ( num_views < 3 || RAD2DEG ( max_angle ) < MIN_ANGLE_THRESHOLD )
>3168	CompoundStatement	 
>3169	ExpressionStatement	 
>3170	IncDecOp	num_pruned ++
>3171	IncDec	++
>3172	Identifier	num_pruned
>3173	ExpressionStatement	 
>3174	AssignmentExpr	m_point_data [ i ] . m_color [ 2 ] = 0xff
>3175	PrimaryExpression	0xff
>3176	ArrayIndexing	m_point_data [ i ] . m_color [ 2 ]
>3177	PrimaryExpression	2
>3178	MemberAccess	m_point_data [ i ] . m_color
>3179	Identifier	m_color
>3180	ArrayIndexing	m_point_data [ i ]
>3181	Identifier	i
>3182	Identifier	m_point_data
>3183	ExpressionStatement	 
>3184	AssignmentExpr	m_point_data [ i ] . m_color [ 1 ] = 0x0
>3185	PrimaryExpression	0x0
>3186	ArrayIndexing	m_point_data [ i ] . m_color [ 1 ]
>3187	PrimaryExpression	1
>3188	MemberAccess	m_point_data [ i ] . m_color
>3189	Identifier	m_color
>3190	ArrayIndexing	m_point_data [ i ]
>3191	Identifier	i
>3192	Identifier	m_point_data
>3193	ExpressionStatement	 
>3194	AssignmentExpr	m_point_data [ i ] . m_color [ 0 ] = 0x0
>3195	PrimaryExpression	0x0
>3196	ArrayIndexing	m_point_data [ i ] . m_color [ 0 ]
>3197	PrimaryExpression	0
>3198	MemberAccess	m_point_data [ i ] . m_color
>3199	Identifier	m_color
>3200	ArrayIndexing	m_point_data [ i ]
>3201	Identifier	i
>3202	Identifier	m_point_data
>3203	ExpressionStatement	 
>3204	CallExpression	m_point_data [ i ] . m_views . clear ( )
>3205	ArgumentList	 
>3206	Callee	m_point_data [ i ] . m_views . clear
>3207	MemberAccess	m_point_data [ i ] . m_views . clear
>3208	Identifier	clear
>3209	MemberAccess	m_point_data [ i ] . m_views
>3210	Identifier	m_views
>3211	ArrayIndexing	m_point_data [ i ]
>3212	Identifier	i
>3213	Identifier	m_point_data
>3214	ExpressionStatement	 
>3215	CallExpression	printf ( \"[PruneBadPoints] Removing point %d with angle %0.3f\n\" , i , RAD2DEG ( max_angle ) )
>3216	ArgumentList	\"[PruneBadPoints] Removing point %d with angle %0.3f\n\"
>3217	Argument	RAD2DEG ( max_angle )
>3218	CallExpression	RAD2DEG ( max_angle )
>3219	ArgumentList	max_angle
>3220	Argument	max_angle
>3221	Identifier	max_angle
>3222	Callee	RAD2DEG
>3223	Identifier	RAD2DEG
>3224	Argument	i
>3225	Identifier	i
>3226	Argument	\"[PruneBadPoints] Removing point %d with angle %0.3f\n\"
>3227	PrimaryExpression	\"[PruneBadPoints] Removing point %d with angle %0.3f\n\"
>3228	Callee	printf
>3229	Identifier	printf
>3230	Condition	 
>3231	OrExpression	num_views < 3 || RAD2DEG ( max_angle ) < MIN_ANGLE_THRESHOLD
>3232	RelationalExpression	RAD2DEG ( max_angle ) < MIN_ANGLE_THRESHOLD
>3233	Identifier	MIN_ANGLE_THRESHOLD
>3234	CallExpression	RAD2DEG ( max_angle )
>3235	ArgumentList	max_angle
>3236	Argument	max_angle
>3237	Identifier	max_angle
>3238	Callee	RAD2DEG
>3239	Identifier	RAD2DEG
>3240	RelationalExpression	num_views < 3
>3241	PrimaryExpression	3
>3242	Identifier	num_views
>3243	ForStatement	for ( int j = 0 ; j < num_views ; j ++ )
>3244	CompoundStatement	 
>3245	ForStatement	for ( int k = j + 1 ; k < num_views ; k ++ )
>3246	CompoundStatement	 
>3247	IfStatement	if ( angle > max_angle )
>3248	CompoundStatement	 
>3249	ExpressionStatement	 
>3250	AssignmentExpr	max_angle = angle
>3251	Identifier	angle
>3252	Identifier	max_angle
>3253	Condition	 
>3254	RelationalExpression	angle > max_angle
>3255	Identifier	max_angle
>3256	Identifier	angle
>3257	IdentifierDeclStatement	 
>3258	IdentifierDecl	angle = acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>3259	AssignmentExpr	angle = acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>3260	CallExpression	acos ( CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 ) )
>3261	ArgumentList	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>3262	Argument	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>3263	CallExpression	CLAMP ( dot , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>3264	ArgumentList	dot
>3265	Argument	1.0 - 1.0e-8
>3266	AdditiveExpression	1.0 - 1.0e-8
>3267	PrimaryExpression	1.0e-8
>3268	PrimaryExpression	1.0
>3269	Argument	- 1.0 + 1.0e-8
>3270	AdditiveExpression	- 1.0 + 1.0e-8
>3271	PrimaryExpression	1.0e-8
>3272	UnaryOp	- 1.0
>3273	PrimaryExpression	1.0
>3274	UnaryOperator	-
>3275	Argument	dot
>3276	Identifier	dot
>3277	Callee	CLAMP
>3278	Identifier	CLAMP
>3279	Callee	acos
>3280	Identifier	acos
>3281	Identifier	angle
>3282	Identifier	angle
>3283	IdentifierDeclType	double
>3284	ExpressionStatement	 
>3285	CallExpression	matrix_product ( 1 , 3 , 3 , 1 , r1 , r2 , & dot )
>3286	ArgumentList	1
>3287	Argument	& dot
>3288	UnaryOp	& dot
>3289	Identifier	dot
>3290	UnaryOperator	&
>3291	Argument	r2
>3292	Identifier	r2
>3293	Argument	r1
>3294	Identifier	r1
>3295	Argument	1
>3296	PrimaryExpression	1
>3297	Argument	3
>3298	PrimaryExpression	3
>3299	Argument	3
>3300	PrimaryExpression	3
>3301	Argument	1
>3302	PrimaryExpression	1
>3303	Callee	matrix_product
>3304	Identifier	matrix_product
>3305	IdentifierDeclStatement	 
>3306	IdentifierDecl	dot
>3307	Identifier	dot
>3308	IdentifierDeclType	double
>3309	ExpressionStatement	 
>3310	CallExpression	matrix_scale ( 3 , 1 , r2 , 1.0 / norm , r2 )
>3311	ArgumentList	3
>3312	Argument	r2
>3313	Identifier	r2
>3314	Argument	1.0 / norm
>3315	MultiplicativeExpression	1.0 / norm
>3316	Identifier	norm
>3317	PrimaryExpression	1.0
>3318	Argument	r2
>3319	Identifier	r2
>3320	Argument	1
>3321	PrimaryExpression	1
>3322	Argument	3
>3323	PrimaryExpression	3
>3324	Callee	matrix_scale
>3325	Identifier	matrix_scale
>3326	IdentifierDeclStatement	 
>3327	IdentifierDecl	norm = matrix_norm ( 3 , 1 , r2 )
>3328	AssignmentExpr	norm = matrix_norm ( 3 , 1 , r2 )
>3329	CallExpression	matrix_norm ( 3 , 1 , r2 )
>3330	ArgumentList	3
>3331	Argument	r2
>3332	Identifier	r2
>3333	Argument	1
>3334	PrimaryExpression	1
>3335	Argument	3
>3336	PrimaryExpression	3
>3337	Callee	matrix_norm
>3338	Identifier	matrix_norm
>3339	Identifier	norm
>3340	Identifier	norm
>3341	IdentifierDeclType	double
>3342	ExpressionStatement	 
>3343	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , p2 , r2 )
>3344	ArgumentList	3
>3345	Argument	r2
>3346	Identifier	r2
>3347	Argument	p2
>3348	Identifier	p2
>3349	Argument	pos
>3350	Identifier	pos
>3351	Argument	1
>3352	PrimaryExpression	1
>3353	Argument	3
>3354	PrimaryExpression	3
>3355	Argument	1
>3356	PrimaryExpression	1
>3357	Argument	3
>3358	PrimaryExpression	3
>3359	Callee	matrix_diff
>3360	Identifier	matrix_diff
>3361	ExpressionStatement	 
>3362	CallExpression	m_image_data [ v2 ] . m_camera . GetPosition ( p2 )
>3363	ArgumentList	p2
>3364	Argument	p2
>3365	Identifier	p2
>3366	Callee	m_image_data [ v2 ] . m_camera . GetPosition
>3367	MemberAccess	m_image_data [ v2 ] . m_camera . GetPosition
>3368	Identifier	GetPosition
>3369	MemberAccess	m_image_data [ v2 ] . m_camera
>3370	Identifier	m_camera
>3371	ArrayIndexing	m_image_data [ v2 ]
>3372	Identifier	v2
>3373	Identifier	m_image_data
>3374	IdentifierDeclStatement	 
>3375	IdentifierDecl	r2 [ 3 ]
>3376	PrimaryExpression	3
>3377	Identifier	r2
>3378	IdentifierDeclType	double [ 3 ]
>3379	IdentifierDecl	p2 [ 3 ]
>3380	PrimaryExpression	3
>3381	Identifier	p2
>3382	IdentifierDeclType	double [ 3 ]
>3383	IdentifierDeclStatement	 
>3384	IdentifierDecl	v2 = m_point_data [ i ] . m_views [ k ] . first
>3385	AssignmentExpr	v2 = m_point_data [ i ] . m_views [ k ] . first
>3386	MemberAccess	m_point_data [ i ] . m_views [ k ] . first
>3387	Identifier	first
>3388	ArrayIndexing	m_point_data [ i ] . m_views [ k ]
>3389	Identifier	k
>3390	MemberAccess	m_point_data [ i ] . m_views
>3391	Identifier	m_views
>3392	ArrayIndexing	m_point_data [ i ]
>3393	Identifier	i
>3394	Identifier	m_point_data
>3395	Identifier	v2
>3396	Identifier	v2
>3397	IdentifierDeclType	int
>3398	IncDecOp	 
>3399	IncDec	++
>3400	Identifier	k
>3401	Condition	 
>3402	RelationalExpression	k < num_views
>3403	Identifier	num_views
>3404	Identifier	k
>3405	ForInit	 
>3406	IdentifierDeclStatement	int k = j + 1 ;
>3407	IdentifierDecl	k = j + 1
>3408	AssignmentExpr	k = j + 1
>3409	AdditiveExpression	j + 1
>3410	PrimaryExpression	1
>3411	Identifier	j
>3412	Identifier	k
>3413	Identifier	k
>3414	IdentifierDeclType	int
>3415	ExpressionStatement	 
>3416	CallExpression	matrix_scale ( 3 , 1 , r1 , 1.0 / norm , r1 )
>3417	ArgumentList	3
>3418	Argument	r1
>3419	Identifier	r1
>3420	Argument	1.0 / norm
>3421	MultiplicativeExpression	1.0 / norm
>3422	Identifier	norm
>3423	PrimaryExpression	1.0
>3424	Argument	r1
>3425	Identifier	r1
>3426	Argument	1
>3427	PrimaryExpression	1
>3428	Argument	3
>3429	PrimaryExpression	3
>3430	Callee	matrix_scale
>3431	Identifier	matrix_scale
>3432	IdentifierDeclStatement	 
>3433	IdentifierDecl	norm = matrix_norm ( 3 , 1 , r1 )
>3434	AssignmentExpr	norm = matrix_norm ( 3 , 1 , r1 )
>3435	CallExpression	matrix_norm ( 3 , 1 , r1 )
>3436	ArgumentList	3
>3437	Argument	r1
>3438	Identifier	r1
>3439	Argument	1
>3440	PrimaryExpression	1
>3441	Argument	3
>3442	PrimaryExpression	3
>3443	Callee	matrix_norm
>3444	Identifier	matrix_norm
>3445	Identifier	norm
>3446	Identifier	norm
>3447	IdentifierDeclType	double
>3448	ExpressionStatement	 
>3449	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos , p1 , r1 )
>3450	ArgumentList	3
>3451	Argument	r1
>3452	Identifier	r1
>3453	Argument	p1
>3454	Identifier	p1
>3455	Argument	pos
>3456	Identifier	pos
>3457	Argument	1
>3458	PrimaryExpression	1
>3459	Argument	3
>3460	PrimaryExpression	3
>3461	Argument	1
>3462	PrimaryExpression	1
>3463	Argument	3
>3464	PrimaryExpression	3
>3465	Callee	matrix_diff
>3466	Identifier	matrix_diff
>3467	ExpressionStatement	 
>3468	CallExpression	m_image_data [ v1 ] . m_camera . GetPosition ( p1 )
>3469	ArgumentList	p1
>3470	Argument	p1
>3471	Identifier	p1
>3472	Callee	m_image_data [ v1 ] . m_camera . GetPosition
>3473	MemberAccess	m_image_data [ v1 ] . m_camera . GetPosition
>3474	Identifier	GetPosition
>3475	MemberAccess	m_image_data [ v1 ] . m_camera
>3476	Identifier	m_camera
>3477	ArrayIndexing	m_image_data [ v1 ]
>3478	Identifier	v1
>3479	Identifier	m_image_data
>3480	IdentifierDeclStatement	 
>3481	IdentifierDecl	r1 [ 3 ]
>3482	PrimaryExpression	3
>3483	Identifier	r1
>3484	IdentifierDeclType	double [ 3 ]
>3485	IdentifierDecl	p1 [ 3 ]
>3486	PrimaryExpression	3
>3487	Identifier	p1
>3488	IdentifierDeclType	double [ 3 ]
>3489	IdentifierDeclStatement	 
>3490	IdentifierDecl	v1 = m_point_data [ i ] . m_views [ j ] . first
>3491	AssignmentExpr	v1 = m_point_data [ i ] . m_views [ j ] . first
>3492	MemberAccess	m_point_data [ i ] . m_views [ j ] . first
>3493	Identifier	first
>3494	ArrayIndexing	m_point_data [ i ] . m_views [ j ]
>3495	Identifier	j
>3496	MemberAccess	m_point_data [ i ] . m_views
>3497	Identifier	m_views
>3498	ArrayIndexing	m_point_data [ i ]
>3499	Identifier	i
>3500	Identifier	m_point_data
>3501	Identifier	v1
>3502	Identifier	v1
>3503	IdentifierDeclType	int
>3504	IncDecOp	 
>3505	IncDec	++
>3506	Identifier	j
>3507	Condition	 
>3508	RelationalExpression	j < num_views
>3509	Identifier	num_views
>3510	Identifier	j
>3511	ForInit	 
>3512	IdentifierDeclStatement	int j = 0 ;
>3513	IdentifierDecl	j = 0
>3514	AssignmentExpr	j = 0
>3515	PrimaryExpression	0
>3516	Identifier	j
>3517	Identifier	j
>3518	IdentifierDeclType	int
>3519	IdentifierDeclStatement	 
>3520	IdentifierDecl	max_angle = 0.0
>3521	AssignmentExpr	max_angle = 0.0
>3522	PrimaryExpression	0.0
>3523	Identifier	max_angle
>3524	Identifier	max_angle
>3525	IdentifierDeclType	double
>3526	IdentifierDeclStatement	 
>3527	IdentifierDecl	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>3528	AssignmentExpr	num_views = ( int ) m_point_data [ i ] . m_views . size ( )
>3529	CastExpression	( int ) m_point_data [ i ] . m_views . size ( )
>3530	CallExpression	m_point_data [ i ] . m_views . size ( )
>3531	ArgumentList	 
>3532	Callee	m_point_data [ i ] . m_views . size
>3533	MemberAccess	m_point_data [ i ] . m_views . size
>3534	Identifier	size
>3535	MemberAccess	m_point_data [ i ] . m_views
>3536	Identifier	m_views
>3537	ArrayIndexing	m_point_data [ i ]
>3538	Identifier	i
>3539	Identifier	m_point_data
>3540	CastTarget	int
>3541	Identifier	num_views
>3542	Identifier	num_views
>3543	IdentifierDeclType	int
>3544	IdentifierDeclStatement	 
>3545	IdentifierDecl	* pos = m_point_data [ i ] . m_pos
>3546	AssignmentExpr	* pos = m_point_data [ i ] . m_pos
>3547	MemberAccess	m_point_data [ i ] . m_pos
>3548	Identifier	m_pos
>3549	ArrayIndexing	m_point_data [ i ]
>3550	Identifier	i
>3551	Identifier	m_point_data
>3552	Identifier	pos
>3553	Identifier	pos
>3554	IdentifierDeclType	double *
>3555	IncDecOp	 
>3556	IncDec	++
>3557	Identifier	i
>3558	Condition	 
>3559	RelationalExpression	i < num_points
>3560	Identifier	num_points
>3561	Identifier	i
>3562	ForInit	 
>3563	IdentifierDeclStatement	int i = 0 ;
>3564	IdentifierDecl	i = 0
>3565	AssignmentExpr	i = 0
>3566	PrimaryExpression	0
>3567	Identifier	i
>3568	Identifier	i
>3569	IdentifierDeclType	int
>3570	IdentifierDeclStatement	 
>3571	IdentifierDecl	num_pruned = 0
>3572	AssignmentExpr	num_pruned = 0
>3573	PrimaryExpression	0
>3574	Identifier	num_pruned
>3575	Identifier	num_pruned
>3576	IdentifierDeclType	int
>3577	IdentifierDeclStatement	 
>3578	IdentifierDecl	MIN_ANGLE_THRESHOLD = 1.5
>3579	AssignmentExpr	MIN_ANGLE_THRESHOLD = 1.5
>3580	PrimaryExpression	1.5
>3581	Identifier	MIN_ANGLE_THRESHOLD
>3582	Identifier	MIN_ANGLE_THRESHOLD
>3583	IdentifierDeclType	const double
>3584	IdentifierDeclStatement	 
>3585	IdentifierDecl	num_points = ( int ) m_point_data . size ( )
>3586	AssignmentExpr	num_points = ( int ) m_point_data . size ( )
>3587	CastExpression	( int ) m_point_data . size ( )
>3588	CallExpression	m_point_data . size ( )
>3589	ArgumentList	 
>3590	Callee	m_point_data . size
>3591	MemberAccess	m_point_data . size
>3592	Identifier	size
>3593	Identifier	m_point_data
>3594	CastTarget	int
>3595	Identifier	num_points
>3596	Identifier	num_points
>3597	IdentifierDeclType	int
>3646	FunctionDef	BundlerApp 
>3647	ParameterList	 
>3648	ReturnType	void
>3649	CompoundStatement	 
>3650	ForStatement	for ( int i = 0 ; i < num_cameras ; i ++ )
>3651	CompoundStatement	 
>3652	ExpressionStatement	 
>3653	AssignmentExpr	m_image_data [ i ] . m_camera . m_k [ 1 ] = 0.0
>3654	PrimaryExpression	0.0
>3655	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 1 ]
>3656	PrimaryExpression	1
>3657	MemberAccess	m_image_data [ i ] . m_camera . m_k
>3658	Identifier	m_k
>3659	MemberAccess	m_image_data [ i ] . m_camera
>3660	Identifier	m_camera
>3661	ArrayIndexing	m_image_data [ i ]
>3662	Identifier	i
>3663	Identifier	m_image_data
>3664	ExpressionStatement	 
>3665	AssignmentExpr	m_image_data [ i ] . m_camera . m_k [ 0 ] = 0.0
>3666	PrimaryExpression	0.0
>3667	ArrayIndexing	m_image_data [ i ] . m_camera . m_k [ 0 ]
>3668	PrimaryExpression	0
>3669	MemberAccess	m_image_data [ i ] . m_camera . m_k
>3670	Identifier	m_k
>3671	MemberAccess	m_image_data [ i ] . m_camera
>3672	Identifier	m_camera
>3673	ArrayIndexing	m_image_data [ i ]
>3674	Identifier	i
>3675	Identifier	m_image_data
>3676	IncDecOp	 
>3677	IncDec	++
>3678	Identifier	i
>3679	Condition	 
>3680	RelationalExpression	i < num_cameras
>3681	Identifier	num_cameras
>3682	Identifier	i
>3683	ForInit	 
>3684	IdentifierDeclStatement	int i = 0 ;
>3685	IdentifierDecl	i = 0
>3686	AssignmentExpr	i = 0
>3687	PrimaryExpression	0
>3688	Identifier	i
>3689	Identifier	i
>3690	IdentifierDeclType	int
>3691	IdentifierDeclStatement	 
>3692	IdentifierDecl	num_cameras = GetNumImages ( )
>3693	AssignmentExpr	num_cameras = GetNumImages ( )
>3694	CallExpression	GetNumImages ( )
>3695	ArgumentList	 
>3696	Callee	GetNumImages
>3697	Identifier	GetNumImages
>3698	Identifier	num_cameras
>3699	Identifier	num_cameras
>3700	IdentifierDeclType	int
>3716	FunctionDef	BundlerApp 
>3717	ParameterList	const char * outfile
>3718	Parameter	 
>3719	Identifier	outfile
>3720	ParameterType	const char *
>3721	ReturnType	void
>3722	CompoundStatement	 
>3723	ExpressionStatement	 
>3724	CallExpression	fclose ( f_gt )
>3725	ArgumentList	f_gt
>3726	Argument	f_gt
>3727	Identifier	f_gt
>3728	Callee	fclose
>3729	Identifier	fclose
>3730	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>3731	CompoundStatement	 
>3732	ForStatement	for ( iter = nbrs . begin ( ) ; iter != nbrs . end ( ) ; iter ++ )
>3733	CompoundStatement	 
>3734	ExpressionStatement	 
>3735	CallExpression	fprintf ( f , \"%d %d %0.6f %0.6f %0.6f\n\" , i , nbr , Rd [ 0 ] , Rd [ 1 ] , angle )
>3736	ArgumentList	f
>3737	Argument	angle
>3738	Identifier	angle
>3739	Argument	Rd [ 1 ]
>3740	ArrayIndexing	Rd [ 1 ]
>3741	PrimaryExpression	1
>3742	Identifier	Rd
>3743	Argument	Rd [ 0 ]
>3744	ArrayIndexing	Rd [ 0 ]
>3745	PrimaryExpression	0
>3746	Identifier	Rd
>3747	Argument	nbr
>3748	Identifier	nbr
>3749	Argument	i
>3750	Identifier	i
>3751	Argument	\"%d %d %0.6f %0.6f %0.6f\n\"
>3752	PrimaryExpression	\"%d %d %0.6f %0.6f %0.6f\n\"
>3753	Argument	f
>3754	Identifier	f
>3755	Callee	fprintf
>3756	Identifier	fprintf
>3757	ExpressionStatement	 
>3758	CallExpression	matrix_product ( 2 , 2 , 2 , 1 , R , d , Rd )
>3759	ArgumentList	2
>3760	Argument	Rd
>3761	Identifier	Rd
>3762	Argument	d
>3763	Identifier	d
>3764	Argument	R
>3765	Identifier	R
>3766	Argument	1
>3767	PrimaryExpression	1
>3768	Argument	2
>3769	PrimaryExpression	2
>3770	Argument	2
>3771	PrimaryExpression	2
>3772	Argument	2
>3773	PrimaryExpression	2
>3774	Callee	matrix_product
>3775	Identifier	matrix_product
>3776	IdentifierDeclStatement	 
>3777	IdentifierDecl	Rd [ 2 ]
>3778	PrimaryExpression	2
>3779	Identifier	Rd
>3780	IdentifierDeclType	double [ 2 ]
>3781	IdentifierDeclStatement	 
>3782	IdentifierDecl	d [ 2 ] = { dx , dz }
>3783	AssignmentExpr	d [ 2 ] = { dx , dz }
>3784	InitializerList	dx
>3785	Identifier	dz
>3786	Identifier	dx
>3787	Identifier	d
>3788	PrimaryExpression	2
>3789	Identifier	d
>3790	IdentifierDeclType	double [ 2 ]
>3791	IdentifierDeclStatement	 
>3792	IdentifierDecl	R [ 4 ] = { Vy ( view2D ) , - Vx ( view2D ) , Vx ( view2D ) , Vy ( view2D ) }
>3793	AssignmentExpr	R [ 4 ] = { Vy ( view2D ) , - Vx ( view2D ) , Vx ( view2D ) , Vy ( view2D ) }
>3794	InitializerList	Vy ( view2D )
>3795	CallExpression	Vy ( view2D )
>3796	ArgumentList	view2D
>3797	Argument	view2D
>3798	Identifier	view2D
>3799	Callee	Vy
>3800	Identifier	Vy
>3801	CallExpression	Vx ( view2D )
>3802	ArgumentList	view2D
>3803	Argument	view2D
>3804	Identifier	view2D
>3805	Callee	Vx
>3806	Identifier	Vx
>3807	UnaryOp	- Vx ( view2D )
>3808	CallExpression	Vx ( view2D )
>3809	ArgumentList	view2D
>3810	Argument	view2D
>3811	Identifier	view2D
>3812	Callee	Vx
>3813	Identifier	Vx
>3814	UnaryOperator	-
>3815	CallExpression	Vy ( view2D )
>3816	ArgumentList	view2D
>3817	Argument	view2D
>3818	Identifier	view2D
>3819	Callee	Vy
>3820	Identifier	Vy
>3821	Identifier	R
>3822	PrimaryExpression	4
>3823	Identifier	R
>3824	IdentifierDeclType	double [ 4 ]
>3825	IdentifierDeclStatement	 
>3826	IdentifierDecl	angle = v2_angle ( view2D , view2D_2 )
>3827	AssignmentExpr	angle = v2_angle ( view2D , view2D_2 )
>3828	CallExpression	v2_angle ( view2D , view2D_2 )
>3829	ArgumentList	view2D
>3830	Argument	view2D_2
>3831	Identifier	view2D_2
>3832	Argument	view2D
>3833	Identifier	view2D
>3834	Callee	v2_angle
>3835	Identifier	v2_angle
>3836	Identifier	angle
>3837	Identifier	angle
>3838	IdentifierDeclType	double
>3839	IdentifierDeclStatement	 
>3840	IdentifierDecl	dz = pos [ 2 ] - pos2 [ 2 ]
>3841	AssignmentExpr	dz = pos [ 2 ] - pos2 [ 2 ]
>3842	AdditiveExpression	pos [ 2 ] - pos2 [ 2 ]
>3843	ArrayIndexing	pos2 [ 2 ]
>3844	PrimaryExpression	2
>3845	Identifier	pos2
>3846	ArrayIndexing	pos [ 2 ]
>3847	PrimaryExpression	2
>3848	Identifier	pos
>3849	Identifier	dz
>3850	Identifier	dz
>3851	IdentifierDeclType	double
>3852	IdentifierDeclStatement	 
>3853	IdentifierDecl	dx = pos2 [ 0 ] - pos [ 0 ]
>3854	AssignmentExpr	dx = pos2 [ 0 ] - pos [ 0 ]
>3855	AdditiveExpression	pos2 [ 0 ] - pos [ 0 ]
>3856	ArrayIndexing	pos [ 0 ]
>3857	PrimaryExpression	0
>3858	Identifier	pos
>3859	ArrayIndexing	pos2 [ 0 ]
>3860	PrimaryExpression	0
>3861	Identifier	pos2
>3862	Identifier	dx
>3863	Identifier	dx
>3864	IdentifierDeclType	double
>3865	ExpressionStatement	 
>3866	AssignmentExpr	view2D_2 = v2_unit ( view2D_2 )
>3867	CallExpression	v2_unit ( view2D_2 )
>3868	ArgumentList	view2D_2
>3869	Argument	view2D_2
>3870	Identifier	view2D_2
>3871	Callee	v2_unit
>3872	Identifier	v2_unit
>3873	Identifier	view2D_2
>3874	IdentifierDeclStatement	 
>3875	IdentifierDecl	view2D_2 = v2_new ( view2 [ 0 ] , - view2 [ 2 ] )
>3876	AssignmentExpr	view2D_2 = v2_new ( view2 [ 0 ] , - view2 [ 2 ] )
>3877	CallExpression	v2_new ( view2 [ 0 ] , - view2 [ 2 ] )
>3878	ArgumentList	view2 [ 0 ]
>3879	Argument	- view2 [ 2 ]
>3880	UnaryOp	- view2 [ 2 ]
>3881	ArrayIndexing	view2 [ 2 ]
>3882	PrimaryExpression	2
>3883	Identifier	view2
>3884	UnaryOperator	-
>3885	Argument	view2 [ 0 ]
>3886	ArrayIndexing	view2 [ 0 ]
>3887	PrimaryExpression	0
>3888	Identifier	view2
>3889	Callee	v2_new
>3890	Identifier	v2_new
>3891	Identifier	view2D_2
>3892	Identifier	view2D_2
>3893	IdentifierDeclType	v2_t
>3894	ExpressionStatement	 
>3895	CallExpression	m_image_data [ nbr ] . m_camera . GetViewDirection ( view2 )
>3896	ArgumentList	view2
>3897	Argument	view2
>3898	Identifier	view2
>3899	Callee	m_image_data [ nbr ] . m_camera . GetViewDirection
>3900	MemberAccess	m_image_data [ nbr ] . m_camera . GetViewDirection
>3901	Identifier	GetViewDirection
>3902	MemberAccess	m_image_data [ nbr ] . m_camera
>3903	Identifier	m_camera
>3904	ArrayIndexing	m_image_data [ nbr ]
>3905	Identifier	nbr
>3906	Identifier	m_image_data
>3907	ExpressionStatement	 
>3908	CallExpression	m_image_data [ nbr ] . m_camera . GetPosition ( pos2 )
>3909	ArgumentList	pos2
>3910	Argument	pos2
>3911	Identifier	pos2
>3912	Callee	m_image_data [ nbr ] . m_camera . GetPosition
>3913	MemberAccess	m_image_data [ nbr ] . m_camera . GetPosition
>3914	Identifier	GetPosition
>3915	MemberAccess	m_image_data [ nbr ] . m_camera
>3916	Identifier	m_camera
>3917	ArrayIndexing	m_image_data [ nbr ]
>3918	Identifier	nbr
>3919	Identifier	m_image_data
>3920	IdentifierDeclStatement	 
>3921	IdentifierDecl	view2 [ 3 ]
>3922	PrimaryExpression	3
>3923	Identifier	view2
>3924	IdentifierDeclType	double [ 3 ]
>3925	IdentifierDecl	pos2 [ 3 ]
>3926	PrimaryExpression	3
>3927	Identifier	pos2
>3928	IdentifierDeclType	double [ 3 ]
>3929	IdentifierDeclStatement	 
>3930	IdentifierDecl	nbr = iter -> m_index
>3931	AssignmentExpr	nbr = iter -> m_index
>3932	PtrMemberAccess	iter -> m_index
>3933	Identifier	m_index
>3934	Identifier	iter
>3935	Identifier	nbr
>3936	Identifier	nbr
>3937	IdentifierDeclType	int
>3938	IncDecOp	 
>3939	IncDec	++
>3940	Identifier	iter
>3941	Condition	 
>3942	EqualityExpression	iter != nbrs . end ( )
>3943	CallExpression	nbrs . end ( )
>3944	ArgumentList	 
>3945	Callee	nbrs . end
>3946	MemberAccess	nbrs . end
>3947	Identifier	end
>3948	Identifier	nbrs
>3949	Identifier	iter
>3950	ForInit	 
>3951	AssignmentExpr	iter = nbrs . begin ( )
>3952	CallExpression	nbrs . begin ( )
>3953	ArgumentList	 
>3954	Callee	nbrs . begin
>3955	MemberAccess	nbrs . begin
>3956	Identifier	begin
>3957	Identifier	nbrs
>3958	Identifier	iter
>3959	IdentifierDeclStatement	 
>3960	IdentifierDecl	iter
>3961	Identifier	iter
>3962	IdentifierDeclType	MatchAdjList 
>3963	IdentifierDeclStatement	 
>3964	IdentifierDecl	num_nbrs = ( int ) nbrs . size ( )
>3965	AssignmentExpr	num_nbrs = ( int ) nbrs . size ( )
>3966	CastExpression	( int ) nbrs . size ( )
>3967	CallExpression	nbrs . size ( )
>3968	ArgumentList	 
>3969	Callee	nbrs . size
>3970	MemberAccess	nbrs . size
>3971	Identifier	size
>3972	Identifier	nbrs
>3973	CastTarget	int
>3974	Identifier	num_nbrs
>3975	Identifier	num_nbrs
>3976	IdentifierDeclType	int
>3977	IdentifierDeclStatement	 
>3978	IdentifierDecl	& nbrs = m_matches . GetNeighbors ( i )
>3979	AssignmentExpr	& nbrs = m_matches . GetNeighbors ( i )
>3980	CallExpression	m_matches . GetNeighbors ( i )
>3981	ArgumentList	i
>3982	Argument	i
>3983	Identifier	i
>3984	Callee	m_matches . GetNeighbors
>3985	MemberAccess	m_matches . GetNeighbors
>3986	Identifier	GetNeighbors
>3987	Identifier	m_matches
>3988	Identifier	nbrs
>3989	Identifier	nbrs
>3990	IdentifierDeclType	MatchAdjList &
>3991	ExpressionStatement	 
>3992	CallExpression	fprintf ( f_gt , \"%0.6f %0.6f %0.6f\n\" , pos [ 0 ] , - pos [ 2 ] , view_angle )
>3993	ArgumentList	f_gt
>3994	Argument	view_angle
>3995	Identifier	view_angle
>3996	Argument	- pos [ 2 ]
>3997	UnaryOp	- pos [ 2 ]
>3998	ArrayIndexing	pos [ 2 ]
>3999	PrimaryExpression	2
>4000	Identifier	pos
>4001	UnaryOperator	-
>4002	Argument	pos [ 0 ]
>4003	ArrayIndexing	pos [ 0 ]
>4004	PrimaryExpression	0
>4005	Identifier	pos
>4006	Argument	\"%0.6f %0.6f %0.6f\n\"
>4007	PrimaryExpression	\"%0.6f %0.6f %0.6f\n\"
>4008	Argument	f_gt
>4009	Identifier	f_gt
>4010	Callee	fprintf
>4011	Identifier	fprintf
>4012	IdentifierDeclStatement	 
>4013	IdentifierDecl	view_angle = atan2 ( Vy ( view2D ) , Vx ( view2D ) )
>4014	AssignmentExpr	view_angle = atan2 ( Vy ( view2D ) , Vx ( view2D ) )
>4015	CallExpression	atan2 ( Vy ( view2D ) , Vx ( view2D ) )
>4016	ArgumentList	Vy ( view2D )
>4017	Argument	Vx ( view2D )
>4018	CallExpression	Vx ( view2D )
>4019	ArgumentList	view2D
>4020	Argument	view2D
>4021	Identifier	view2D
>4022	Callee	Vx
>4023	Identifier	Vx
>4024	Argument	Vy ( view2D )
>4025	CallExpression	Vy ( view2D )
>4026	ArgumentList	view2D
>4027	Argument	view2D
>4028	Identifier	view2D
>4029	Callee	Vy
>4030	Identifier	Vy
>4031	Callee	atan2
>4032	Identifier	atan2
>4033	Identifier	view_angle
>4034	Identifier	view_angle
>4035	IdentifierDeclType	double
>4036	ExpressionStatement	 
>4037	AssignmentExpr	view2D = v2_unit ( view2D )
>4038	CallExpression	v2_unit ( view2D )
>4039	ArgumentList	view2D
>4040	Argument	view2D
>4041	Identifier	view2D
>4042	Callee	v2_unit
>4043	Identifier	v2_unit
>4044	Identifier	view2D
>4045	IdentifierDeclStatement	 
>4046	IdentifierDecl	view2D = v2_new ( view [ 0 ] , - view [ 2 ] )
>4047	AssignmentExpr	view2D = v2_new ( view [ 0 ] , - view [ 2 ] )
>4048	CallExpression	v2_new ( view [ 0 ] , - view [ 2 ] )
>4049	ArgumentList	view [ 0 ]
>4050	Argument	- view [ 2 ]
>4051	UnaryOp	- view [ 2 ]
>4052	ArrayIndexing	view [ 2 ]
>4053	PrimaryExpression	2
>4054	Identifier	view
>4055	UnaryOperator	-
>4056	Argument	view [ 0 ]
>4057	ArrayIndexing	view [ 0 ]
>4058	PrimaryExpression	0
>4059	Identifier	view
>4060	Callee	v2_new
>4061	Identifier	v2_new
>4062	Identifier	view2D
>4063	Identifier	view2D
>4064	IdentifierDeclType	v2_t
>4065	ExpressionStatement	 
>4066	CallExpression	m_image_data [ i ] . m_camera . GetViewDirection ( view )
>4067	ArgumentList	view
>4068	Argument	view
>4069	Identifier	view
>4070	Callee	m_image_data [ i ] . m_camera . GetViewDirection
>4071	MemberAccess	m_image_data [ i ] . m_camera . GetViewDirection
>4072	Identifier	GetViewDirection
>4073	MemberAccess	m_image_data [ i ] . m_camera
>4074	Identifier	m_camera
>4075	ArrayIndexing	m_image_data [ i ]
>4076	Identifier	i
>4077	Identifier	m_image_data
>4078	ExpressionStatement	 
>4079	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>4080	ArgumentList	pos
>4081	Argument	pos
>4082	Identifier	pos
>4083	Callee	m_image_data [ i ] . m_camera . GetPosition
>4084	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>4085	Identifier	GetPosition
>4086	MemberAccess	m_image_data [ i ] . m_camera
>4087	Identifier	m_camera
>4088	ArrayIndexing	m_image_data [ i ]
>4089	Identifier	i
>4090	Identifier	m_image_data
>4091	IdentifierDeclStatement	 
>4092	IdentifierDecl	view [ 3 ]
>4093	PrimaryExpression	3
>4094	Identifier	view
>4095	IdentifierDeclType	double [ 3 ]
>4096	IdentifierDecl	pos [ 3 ]
>4097	PrimaryExpression	3
>4098	Identifier	pos
>4099	IdentifierDeclType	double [ 3 ]
>4100	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>4101	CompoundStatement	 
>4102	ContinueStatement	 
>4103	ExpressionStatement	 
>4104	CallExpression	fprintf ( f_gt , \"0.0 0.0 0.0\n\" )
>4105	ArgumentList	f_gt
>4106	Argument	\"0.0 0.0 0.0\n\"
>4107	PrimaryExpression	\"0.0 0.0 0.0\n\"
>4108	Argument	f_gt
>4109	Identifier	f_gt
>4110	Callee	fprintf
>4111	Identifier	fprintf
>4112	Condition	 
>4113	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>4114	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>4115	Identifier	m_adjusted
>4116	MemberAccess	m_image_data [ i ] . m_camera
>4117	Identifier	m_camera
>4118	ArrayIndexing	m_image_data [ i ]
>4119	Identifier	i
>4120	Identifier	m_image_data
>4121	UnaryOperator	!
>4122	IncDecOp	 
>4123	IncDec	++
>4124	Identifier	i
>4125	Condition	 
>4126	RelationalExpression	i < num_images
>4127	Identifier	num_images
>4128	Identifier	i
>4129	ForInit	 
>4130	IdentifierDeclStatement	int i = 0 ;
>4131	IdentifierDecl	i = 0
>4132	AssignmentExpr	i = 0
>4133	PrimaryExpression	0
>4134	Identifier	i
>4135	Identifier	i
>4136	IdentifierDeclType	int
>4137	ExpressionStatement	 
>4138	CallExpression	fprintf ( f_gt , \"%d\n\" , num_images )
>4139	ArgumentList	f_gt
>4140	Argument	num_images
>4141	Identifier	num_images
>4142	Argument	\"%d\n\"
>4143	PrimaryExpression	\"%d\n\"
>4144	Argument	f_gt
>4145	Identifier	f_gt
>4146	Callee	fprintf
>4147	Identifier	fprintf
>4148	IdentifierDeclStatement	 
>4149	IdentifierDecl	* f_gt = fopen ( \"groundtruth.txt\" , \"w\" )
>4150	AssignmentExpr	* f_gt = fopen ( \"groundtruth.txt\" , \"w\" )
>4151	CallExpression	fopen ( \"groundtruth.txt\" , \"w\" )
>4152	ArgumentList	\"groundtruth.txt\"
>4153	Argument	\"w\"
>4154	PrimaryExpression	\"w\"
>4155	Argument	\"groundtruth.txt\"
>4156	PrimaryExpression	\"groundtruth.txt\"
>4157	Callee	fopen
>4158	Identifier	fopen
>4159	Identifier	f_gt
>4160	Identifier	f_gt
>4161	IdentifierDeclType	FILE *
>4162	ExpressionStatement	 
>4163	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_pairs )
>4164	ArgumentList	f
>4165	Argument	num_pairs
>4166	Identifier	num_pairs
>4167	Argument	num_images
>4168	Identifier	num_images
>4169	Argument	\"%d %d\n\"
>4170	PrimaryExpression	\"%d %d\n\"
>4171	Argument	f
>4172	Identifier	f
>4173	Callee	fprintf
>4174	Identifier	fprintf
>4175	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>4176	CompoundStatement	 
>4177	ExpressionStatement	 
>4178	AssignmentExpr	num_pairs += num_nbrs
>4179	Identifier	num_nbrs
>4180	Identifier	num_pairs
>4181	IdentifierDeclStatement	 
>4182	IdentifierDecl	num_nbrs = ( int ) m_matches . GetNumNeighbors ( i )
>4183	AssignmentExpr	num_nbrs = ( int ) m_matches . GetNumNeighbors ( i )
>4184	CastExpression	( int ) m_matches . GetNumNeighbors ( i )
>4185	CallExpression	m_matches . GetNumNeighbors ( i )
>4186	ArgumentList	i
>4187	Argument	i
>4188	Identifier	i
>4189	Callee	m_matches . GetNumNeighbors
>4190	MemberAccess	m_matches . GetNumNeighbors
>4191	Identifier	GetNumNeighbors
>4192	Identifier	m_matches
>4193	CastTarget	int
>4194	Identifier	num_nbrs
>4195	Identifier	num_nbrs
>4196	IdentifierDeclType	int
>4197	IncDecOp	 
>4198	IncDec	++
>4199	Identifier	i
>4200	Condition	 
>4201	RelationalExpression	i < num_images
>4202	Identifier	num_images
>4203	Identifier	i
>4204	ForInit	 
>4205	IdentifierDeclStatement	int i = 0 ;
>4206	IdentifierDecl	i = 0
>4207	AssignmentExpr	i = 0
>4208	PrimaryExpression	0
>4209	Identifier	i
>4210	Identifier	i
>4211	IdentifierDeclType	int
>4212	IdentifierDeclStatement	 
>4213	IdentifierDecl	num_pairs = 0
>4214	AssignmentExpr	num_pairs = 0
>4215	PrimaryExpression	0
>4216	Identifier	num_pairs
>4217	Identifier	num_pairs
>4218	IdentifierDeclType	int
>4219	ExpressionStatement	 
>4220	CallExpression	SetMatchesFromPoints ( 16 )
>4221	ArgumentList	16
>4222	Argument	16
>4223	PrimaryExpression	16
>4224	Callee	SetMatchesFromPoints
>4225	Identifier	SetMatchesFromPoints
>4226	IdentifierDeclStatement	 
>4227	IdentifierDecl	num_images = GetNumImages ( )
>4228	AssignmentExpr	num_images = GetNumImages ( )
>4229	CallExpression	GetNumImages ( )
>4230	ArgumentList	 
>4231	Callee	GetNumImages
>4232	Identifier	GetNumImages
>4233	Identifier	num_images
>4234	Identifier	num_images
>4235	IdentifierDeclType	int
>4236	IfStatement	if ( f == NULL )
>4237	CompoundStatement	 
>4238	ReturnStatement	 
>4239	ExpressionStatement	 
>4240	CallExpression	printf ( \"[OutputRelativePose2D] Error opening file %s for writing\n\" , outfile )
>4241	ArgumentList	\"[OutputRelativePose2D] Error opening file %s for writing\n\"
>4242	Argument	outfile
>4243	Identifier	outfile
>4244	Argument	\"[OutputRelativePose2D] Error opening file %s for writing\n\"
>4245	PrimaryExpression	\"[OutputRelativePose2D] Error opening file %s for writing\n\"
>4246	Callee	printf
>4247	Identifier	printf
>4248	Condition	 
>4249	EqualityExpression	f == NULL
>4250	Identifier	NULL
>4251	Identifier	f
>4252	IdentifierDeclStatement	 
>4253	IdentifierDecl	* f = fopen ( outfile , \"w\" )
>4254	AssignmentExpr	* f = fopen ( outfile , \"w\" )
>4255	CallExpression	fopen ( outfile , \"w\" )
>4256	ArgumentList	outfile
>4257	Argument	\"w\"
>4258	PrimaryExpression	\"w\"
>4259	Argument	outfile
>4260	Identifier	outfile
>4261	Callee	fopen
>4262	Identifier	fopen
>4263	Identifier	f
>4264	Identifier	f
>4265	IdentifierDeclType	FILE *
>4321	FunctionDef	WriteVector (FILE * f , int n , const double * v)
>4322	ParameterList	FILE * f , int n , const double * v
>4323	Parameter	 
>4324	Identifier	v
>4325	ParameterType	const double *
>4326	Parameter	 
>4327	Identifier	n
>4328	ParameterType	int
>4329	Parameter	 
>4330	Identifier	f
>4331	ParameterType	FILE *
>4332	ReturnType	static void
>4333	CompoundStatement	 
>4334	ExpressionStatement	 
>4335	CallExpression	fprintf ( f , \"\n\" )
>4336	ArgumentList	f
>4337	Argument	\"\n\"
>4338	PrimaryExpression	\"\n\"
>4339	Argument	f
>4340	Identifier	f
>4341	Callee	fprintf
>4342	Identifier	fprintf
>4343	ForStatement	for ( int i = 0 ; i < n ; i ++ )
>4344	CompoundStatement	 
>4345	ExpressionStatement	 
>4346	CallExpression	fprintf ( f , \"%0.16e \" , v [ i ] )
>4347	ArgumentList	f
>4348	Argument	v [ i ]
>4349	ArrayIndexing	v [ i ]
>4350	Identifier	i
>4351	Identifier	v
>4352	Argument	\"%0.16e \"
>4353	PrimaryExpression	\"%0.16e \"
>4354	Argument	f
>4355	Identifier	f
>4356	Callee	fprintf
>4357	Identifier	fprintf
>4358	IncDecOp	 
>4359	IncDec	++
>4360	Identifier	i
>4361	Condition	 
>4362	RelationalExpression	i < n
>4363	Identifier	n
>4364	Identifier	i
>4365	ForInit	 
>4366	IdentifierDeclStatement	int i = 0 ;
>4367	IdentifierDecl	i = 0
>4368	AssignmentExpr	i = 0
>4369	PrimaryExpression	0
>4370	Identifier	i
>4371	Identifier	i
>4372	IdentifierDeclType	int
>4382	FunctionDef	GetTwist (double * R)
>4383	ParameterList	double * R
>4384	Parameter	 
>4385	Identifier	R
>4386	ParameterType	double *
>4387	ReturnType	static double
>4388	CompoundStatement	 
>4389	IfStatement	if ( R [ 3 ] < 0.0 )
>4390	ElseStatement	else
>4391	ReturnStatement	 
>4392	Identifier	angle
>4393	ReturnStatement	 
>4394	UnaryOp	- angle
>4395	Identifier	angle
>4396	UnaryOperator	-
>4397	Condition	 
>4398	RelationalExpression	R [ 3 ] < 0.0
>4399	PrimaryExpression	0.0
>4400	ArrayIndexing	R [ 3 ]
>4401	PrimaryExpression	3
>4402	Identifier	R
>4403	IdentifierDeclStatement	 
>4404	IdentifierDecl	angle = acos ( c_twist )
>4405	AssignmentExpr	angle = acos ( c_twist )
>4406	CallExpression	acos ( c_twist )
>4407	ArgumentList	c_twist
>4408	Argument	c_twist
>4409	Identifier	c_twist
>4410	Callee	acos
>4411	Identifier	acos
>4412	Identifier	angle
>4413	Identifier	angle
>4414	IdentifierDeclType	double
>4415	ExpressionStatement	 
>4416	AssignmentExpr	c_twist = CLAMP ( c_twist , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>4417	CallExpression	CLAMP ( c_twist , - 1.0 + 1.0e-8 , 1.0 - 1.0e-8 )
>4418	ArgumentList	c_twist
>4419	Argument	1.0 - 1.0e-8
>4420	AdditiveExpression	1.0 - 1.0e-8
>4421	PrimaryExpression	1.0e-8
>4422	PrimaryExpression	1.0
>4423	Argument	- 1.0 + 1.0e-8
>4424	AdditiveExpression	- 1.0 + 1.0e-8
>4425	PrimaryExpression	1.0e-8
>4426	UnaryOp	- 1.0
>4427	PrimaryExpression	1.0
>4428	UnaryOperator	-
>4429	Argument	c_twist
>4430	Identifier	c_twist
>4431	Callee	CLAMP
>4432	Identifier	CLAMP
>4433	Identifier	c_twist
>4434	IdentifierDeclStatement	 
>4435	IdentifierDecl	c_twist = ( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>4436	AssignmentExpr	c_twist = ( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>4437	MultiplicativeExpression	( R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ] ) / sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>4438	CallExpression	sqrt ( 1 - R [ 5 ] * R [ 5 ] )
>4439	ArgumentList	1 - R [ 5 ] * R [ 5 ]
>4440	Argument	1 - R [ 5 ] * R [ 5 ]
>4441	AdditiveExpression	1 - R [ 5 ] * R [ 5 ]
>4442	MultiplicativeExpression	R [ 5 ] * R [ 5 ]
>4443	ArrayIndexing	R [ 5 ]
>4444	PrimaryExpression	5
>4445	Identifier	R
>4446	ArrayIndexing	R [ 5 ]
>4447	PrimaryExpression	5
>4448	Identifier	R
>4449	PrimaryExpression	1
>4450	Callee	sqrt
>4451	Identifier	sqrt
>4452	AdditiveExpression	R [ 0 ] * R [ 8 ] - R [ 6 ] * R [ 2 ]
>4453	MultiplicativeExpression	R [ 6 ] * R [ 2 ]
>4454	ArrayIndexing	R [ 2 ]
>4455	PrimaryExpression	2
>4456	Identifier	R
>4457	ArrayIndexing	R [ 6 ]
>4458	PrimaryExpression	6
>4459	Identifier	R
>4460	MultiplicativeExpression	R [ 0 ] * R [ 8 ]
>4461	ArrayIndexing	R [ 8 ]
>4462	PrimaryExpression	8
>4463	Identifier	R
>4464	ArrayIndexing	R [ 0 ]
>4465	PrimaryExpression	0
>4466	Identifier	R
>4467	Identifier	c_twist
>4468	Identifier	c_twist
>4469	IdentifierDeclType	double
>4480	FunctionDef	BundlerApp 
>4481	ParameterList	const char * outfile
>4482	Parameter	 
>4483	Identifier	outfile
>4484	ParameterType	const char *
>4485	ReturnType	void
>4486	CompoundStatement	 
>4487	ExpressionStatement	 
>4488	CallExpression	fclose ( f_gt )
>4489	ArgumentList	f_gt
>4490	Argument	f_gt
>4491	Identifier	f_gt
>4492	Callee	fclose
>4493	Identifier	fclose
>4494	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>4495	CompoundStatement	 
>4496	ForStatement	for ( iter = nbrs . begin ( ) ; iter != nbrs . end ( ) ; iter ++ )
>4497	CompoundStatement	 
>4498	ExpressionStatement	 
>4499	CallExpression	WriteVector ( f , 3 , t )
>4500	ArgumentList	f
>4501	Argument	t
>4502	Identifier	t
>4503	Argument	3
>4504	PrimaryExpression	3
>4505	Argument	f
>4506	Identifier	f
>4507	Callee	WriteVector
>4508	Identifier	WriteVector
>4509	ExpressionStatement	 
>4510	CallExpression	WriteVector ( f , 9 , R )
>4511	ArgumentList	f
>4512	Argument	R
>4513	Identifier	R
>4514	Argument	9
>4515	PrimaryExpression	9
>4516	Argument	f
>4517	Identifier	f
>4518	Callee	WriteVector
>4519	Identifier	WriteVector
>4520	ExpressionStatement	 
>4521	CallExpression	fprintf ( f , \"%d %d\n\" , i , nbr )
>4522	ArgumentList	f
>4523	Argument	nbr
>4524	Identifier	nbr
>4525	Argument	i
>4526	Identifier	i
>4527	Argument	\"%d %d\n\"
>4528	PrimaryExpression	\"%d %d\n\"
>4529	Argument	f
>4530	Identifier	f
>4531	Callee	fprintf
>4532	Identifier	fprintf
>4533	IdentifierDeclStatement	 
>4534	IdentifierDecl	twist_angle = GetTwist ( R )
>4535	AssignmentExpr	twist_angle = GetTwist ( R )
>4536	CallExpression	GetTwist ( R )
>4537	ArgumentList	R
>4538	Argument	R
>4539	Identifier	R
>4540	Callee	GetTwist
>4541	Identifier	GetTwist
>4542	Identifier	twist_angle
>4543	Identifier	twist_angle
>4544	IdentifierDeclType	double
>4545	IdentifierDeclStatement	 
>4546	IdentifierDecl	viewdir [ 3 ] = { - R [ 2 ] , - R [ 5 ] , - R [ 8 ] }
>4547	AssignmentExpr	viewdir [ 3 ] = { - R [ 2 ] , - R [ 5 ] , - R [ 8 ] }
>4548	InitializerList	- R [ 2 ]
>4549	UnaryOp	- R [ 8 ]
>4550	ArrayIndexing	R [ 8 ]
>4551	PrimaryExpression	8
>4552	Identifier	R
>4553	UnaryOperator	-
>4554	UnaryOp	- R [ 5 ]
>4555	ArrayIndexing	R [ 5 ]
>4556	PrimaryExpression	5
>4557	Identifier	R
>4558	UnaryOperator	-
>4559	UnaryOp	- R [ 2 ]
>4560	ArrayIndexing	R [ 2 ]
>4561	PrimaryExpression	2
>4562	Identifier	R
>4563	UnaryOperator	-
>4564	Identifier	viewdir
>4565	PrimaryExpression	3
>4566	Identifier	viewdir
>4567	IdentifierDeclType	double [ 3 ]
>4568	ExpressionStatement	 
>4569	CallExpression	matrix_scale ( 3 , 1 , t , 1.0 / norm , t )
>4570	ArgumentList	3
>4571	Argument	t
>4572	Identifier	t
>4573	Argument	1.0 / norm
>4574	MultiplicativeExpression	1.0 / norm
>4575	Identifier	norm
>4576	PrimaryExpression	1.0
>4577	Argument	t
>4578	Identifier	t
>4579	Argument	1
>4580	PrimaryExpression	1
>4581	Argument	3
>4582	PrimaryExpression	3
>4583	Callee	matrix_scale
>4584	Identifier	matrix_scale
>4585	IdentifierDeclStatement	 
>4586	IdentifierDecl	norm = matrix_norm ( 3 , 1 , t )
>4587	AssignmentExpr	norm = matrix_norm ( 3 , 1 , t )
>4588	CallExpression	matrix_norm ( 3 , 1 , t )
>4589	ArgumentList	3
>4590	Argument	t
>4591	Identifier	t
>4592	Argument	1
>4593	PrimaryExpression	1
>4594	Argument	3
>4595	PrimaryExpression	3
>4596	Callee	matrix_norm
>4597	Identifier	matrix_norm
>4598	Identifier	norm
>4599	Identifier	norm
>4600	IdentifierDeclType	double
>4601	ExpressionStatement	 
>4602	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 1 , pose , diff , t )
>4603	ArgumentList	3
>4604	Argument	t
>4605	Identifier	t
>4606	Argument	diff
>4607	Identifier	diff
>4608	Argument	pose
>4609	Identifier	pose
>4610	Argument	1
>4611	PrimaryExpression	1
>4612	Argument	3
>4613	PrimaryExpression	3
>4614	Argument	3
>4615	PrimaryExpression	3
>4616	Argument	3
>4617	PrimaryExpression	3
>4618	Callee	matrix_transpose_product
>4619	Identifier	matrix_transpose_product
>4620	ExpressionStatement	 
>4621	CallExpression	matrix_transpose_product ( 3 , 3 , 3 , 3 , pose , pose2 , R )
>4622	ArgumentList	3
>4623	Argument	R
>4624	Identifier	R
>4625	Argument	pose2
>4626	Identifier	pose2
>4627	Argument	pose
>4628	Identifier	pose
>4629	Argument	3
>4630	PrimaryExpression	3
>4631	Argument	3
>4632	PrimaryExpression	3
>4633	Argument	3
>4634	PrimaryExpression	3
>4635	Argument	3
>4636	PrimaryExpression	3
>4637	Callee	matrix_transpose_product
>4638	Identifier	matrix_transpose_product
>4639	IdentifierDeclStatement	 
>4640	IdentifierDecl	t [ 3 ]
>4641	PrimaryExpression	3
>4642	Identifier	t
>4643	IdentifierDeclType	double [ 3 ]
>4644	IdentifierDecl	R [ 9 ]
>4645	PrimaryExpression	9
>4646	Identifier	R
>4647	IdentifierDeclType	double [ 9 ]
>4648	ExpressionStatement	 
>4649	CallExpression	matrix_diff ( 3 , 1 , 3 , 1 , pos2 , pos , diff )
>4650	ArgumentList	3
>4651	Argument	diff
>4652	Identifier	diff
>4653	Argument	pos
>4654	Identifier	pos
>4655	Argument	pos2
>4656	Identifier	pos2
>4657	Argument	1
>4658	PrimaryExpression	1
>4659	Argument	3
>4660	PrimaryExpression	3
>4661	Argument	1
>4662	PrimaryExpression	1
>4663	Argument	3
>4664	PrimaryExpression	3
>4665	Callee	matrix_diff
>4666	Identifier	matrix_diff
>4667	IdentifierDeclStatement	 
>4668	IdentifierDecl	diff [ 3 ]
>4669	PrimaryExpression	3
>4670	Identifier	diff
>4671	IdentifierDeclType	double [ 3 ]
>4672	ExpressionStatement	 
>4673	CallExpression	m_image_data [ nbr ] . m_camera . GetPose ( pose2 )
>4674	ArgumentList	pose2
>4675	Argument	pose2
>4676	Identifier	pose2
>4677	Callee	m_image_data [ nbr ] . m_camera . GetPose
>4678	MemberAccess	m_image_data [ nbr ] . m_camera . GetPose
>4679	Identifier	GetPose
>4680	MemberAccess	m_image_data [ nbr ] . m_camera
>4681	Identifier	m_camera
>4682	ArrayIndexing	m_image_data [ nbr ]
>4683	Identifier	nbr
>4684	Identifier	m_image_data
>4685	ExpressionStatement	 
>4686	CallExpression	m_image_data [ nbr ] . m_camera . GetPosition ( pos2 )
>4687	ArgumentList	pos2
>4688	Argument	pos2
>4689	Identifier	pos2
>4690	Callee	m_image_data [ nbr ] . m_camera . GetPosition
>4691	MemberAccess	m_image_data [ nbr ] . m_camera . GetPosition
>4692	Identifier	GetPosition
>4693	MemberAccess	m_image_data [ nbr ] . m_camera
>4694	Identifier	m_camera
>4695	ArrayIndexing	m_image_data [ nbr ]
>4696	Identifier	nbr
>4697	Identifier	m_image_data
>4698	IdentifierDeclStatement	 
>4699	IdentifierDecl	pose2 [ 9 ]
>4700	PrimaryExpression	9
>4701	Identifier	pose2
>4702	IdentifierDeclType	double [ 9 ]
>4703	IdentifierDecl	pos2 [ 3 ]
>4704	PrimaryExpression	3
>4705	Identifier	pos2
>4706	IdentifierDeclType	double [ 3 ]
>4707	IfStatement	if ( nbr <= i )
>4708	ContinueStatement	 
>4709	Condition	 
>4710	RelationalExpression	nbr <= i
>4711	Identifier	i
>4712	Identifier	nbr
>4713	IdentifierDeclStatement	 
>4714	IdentifierDecl	nbr = iter -> m_index
>4715	AssignmentExpr	nbr = iter -> m_index
>4716	PtrMemberAccess	iter -> m_index
>4717	Identifier	m_index
>4718	Identifier	iter
>4719	Identifier	nbr
>4720	Identifier	nbr
>4721	IdentifierDeclType	int
>4722	IncDecOp	 
>4723	IncDec	++
>4724	Identifier	iter
>4725	Condition	 
>4726	EqualityExpression	iter != nbrs . end ( )
>4727	CallExpression	nbrs . end ( )
>4728	ArgumentList	 
>4729	Callee	nbrs . end
>4730	MemberAccess	nbrs . end
>4731	Identifier	end
>4732	Identifier	nbrs
>4733	Identifier	iter
>4734	ForInit	 
>4735	AssignmentExpr	iter = nbrs . begin ( )
>4736	CallExpression	nbrs . begin ( )
>4737	ArgumentList	 
>4738	Callee	nbrs . begin
>4739	MemberAccess	nbrs . begin
>4740	Identifier	begin
>4741	Identifier	nbrs
>4742	Identifier	iter
>4743	IdentifierDeclStatement	 
>4744	IdentifierDecl	iter
>4745	Identifier	iter
>4746	IdentifierDeclType	MatchAdjList 
>4747	IdentifierDeclStatement	 
>4748	IdentifierDecl	num_nbrs = ( int ) nbrs . size ( )
>4749	AssignmentExpr	num_nbrs = ( int ) nbrs . size ( )
>4750	CastExpression	( int ) nbrs . size ( )
>4751	CallExpression	nbrs . size ( )
>4752	ArgumentList	 
>4753	Callee	nbrs . size
>4754	MemberAccess	nbrs . size
>4755	Identifier	size
>4756	Identifier	nbrs
>4757	CastTarget	int
>4758	Identifier	num_nbrs
>4759	Identifier	num_nbrs
>4760	IdentifierDeclType	int
>4761	IdentifierDeclStatement	 
>4762	IdentifierDecl	& nbrs = m_matches . GetNeighbors ( i )
>4763	AssignmentExpr	& nbrs = m_matches . GetNeighbors ( i )
>4764	CallExpression	m_matches . GetNeighbors ( i )
>4765	ArgumentList	i
>4766	Argument	i
>4767	Identifier	i
>4768	Callee	m_matches . GetNeighbors
>4769	MemberAccess	m_matches . GetNeighbors
>4770	Identifier	GetNeighbors
>4771	Identifier	m_matches
>4772	Identifier	nbrs
>4773	Identifier	nbrs
>4774	IdentifierDeclType	MatchAdjList &
>4775	ExpressionStatement	 
>4776	CallExpression	WriteVector ( f_gt , 3 , pos )
>4777	ArgumentList	f_gt
>4778	Argument	pos
>4779	Identifier	pos
>4780	Argument	3
>4781	PrimaryExpression	3
>4782	Argument	f_gt
>4783	Identifier	f_gt
>4784	Callee	WriteVector
>4785	Identifier	WriteVector
>4786	ExpressionStatement	 
>4787	CallExpression	WriteVector ( f_gt , 9 , pose )
>4788	ArgumentList	f_gt
>4789	Argument	pose
>4790	Identifier	pose
>4791	Argument	9
>4792	PrimaryExpression	9
>4793	Argument	f_gt
>4794	Identifier	f_gt
>4795	Callee	WriteVector
>4796	Identifier	WriteVector
>4797	ExpressionStatement	 
>4798	CallExpression	m_image_data [ i ] . m_camera . GetPose ( pose )
>4799	ArgumentList	pose
>4800	Argument	pose
>4801	Identifier	pose
>4802	Callee	m_image_data [ i ] . m_camera . GetPose
>4803	MemberAccess	m_image_data [ i ] . m_camera . GetPose
>4804	Identifier	GetPose
>4805	MemberAccess	m_image_data [ i ] . m_camera
>4806	Identifier	m_camera
>4807	ArrayIndexing	m_image_data [ i ]
>4808	Identifier	i
>4809	Identifier	m_image_data
>4810	ExpressionStatement	 
>4811	CallExpression	m_image_data [ i ] . m_camera . GetPosition ( pos )
>4812	ArgumentList	pos
>4813	Argument	pos
>4814	Identifier	pos
>4815	Callee	m_image_data [ i ] . m_camera . GetPosition
>4816	MemberAccess	m_image_data [ i ] . m_camera . GetPosition
>4817	Identifier	GetPosition
>4818	MemberAccess	m_image_data [ i ] . m_camera
>4819	Identifier	m_camera
>4820	ArrayIndexing	m_image_data [ i ]
>4821	Identifier	i
>4822	Identifier	m_image_data
>4823	IdentifierDeclStatement	 
>4824	IdentifierDecl	pose [ 9 ]
>4825	PrimaryExpression	9
>4826	Identifier	pose
>4827	IdentifierDeclType	double [ 9 ]
>4828	IdentifierDecl	pos [ 3 ]
>4829	PrimaryExpression	3
>4830	Identifier	pos
>4831	IdentifierDeclType	double [ 3 ]
>4832	IfStatement	if ( ! m_image_data [ i ] . m_camera . m_adjusted )
>4833	CompoundStatement	 
>4834	ContinueStatement	 
>4835	ExpressionStatement	 
>4836	CallExpression	fprintf ( f_gt , \"0.0 0.0 0.0\n\" )
>4837	ArgumentList	f_gt
>4838	Argument	\"0.0 0.0 0.0\n\"
>4839	PrimaryExpression	\"0.0 0.0 0.0\n\"
>4840	Argument	f_gt
>4841	Identifier	f_gt
>4842	Callee	fprintf
>4843	Identifier	fprintf
>4844	ExpressionStatement	 
>4845	CallExpression	fprintf ( f_gt , \"0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n\" )
>4846	ArgumentList	f_gt
>4847	Argument	\"0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n\"
>4848	PrimaryExpression	\"0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0\n\"
>4849	Argument	f_gt
>4850	Identifier	f_gt
>4851	Callee	fprintf
>4852	Identifier	fprintf
>4853	Condition	 
>4854	UnaryOp	! m_image_data [ i ] . m_camera . m_adjusted
>4855	MemberAccess	m_image_data [ i ] . m_camera . m_adjusted
>4856	Identifier	m_adjusted
>4857	MemberAccess	m_image_data [ i ] . m_camera
>4858	Identifier	m_camera
>4859	ArrayIndexing	m_image_data [ i ]
>4860	Identifier	i
>4861	Identifier	m_image_data
>4862	UnaryOperator	!
>4863	IncDecOp	 
>4864	IncDec	++
>4865	Identifier	i
>4866	Condition	 
>4867	RelationalExpression	i < num_images
>4868	Identifier	num_images
>4869	Identifier	i
>4870	ForInit	 
>4871	IdentifierDeclStatement	int i = 0 ;
>4872	IdentifierDecl	i = 0
>4873	AssignmentExpr	i = 0
>4874	PrimaryExpression	0
>4875	Identifier	i
>4876	Identifier	i
>4877	IdentifierDeclType	int
>4878	ExpressionStatement	 
>4879	CallExpression	fprintf ( f_gt , \"%d\n\" , num_images )
>4880	ArgumentList	f_gt
>4881	Argument	num_images
>4882	Identifier	num_images
>4883	Argument	\"%d\n\"
>4884	PrimaryExpression	\"%d\n\"
>4885	Argument	f_gt
>4886	Identifier	f_gt
>4887	Callee	fprintf
>4888	Identifier	fprintf
>4889	IdentifierDeclStatement	 
>4890	IdentifierDecl	* f_gt = fopen ( \"groundtruth.txt\" , \"w\" )
>4891	AssignmentExpr	* f_gt = fopen ( \"groundtruth.txt\" , \"w\" )
>4892	CallExpression	fopen ( \"groundtruth.txt\" , \"w\" )
>4893	ArgumentList	\"groundtruth.txt\"
>4894	Argument	\"w\"
>4895	PrimaryExpression	\"w\"
>4896	Argument	\"groundtruth.txt\"
>4897	PrimaryExpression	\"groundtruth.txt\"
>4898	Callee	fopen
>4899	Identifier	fopen
>4900	Identifier	f_gt
>4901	Identifier	f_gt
>4902	IdentifierDeclType	FILE *
>4903	ExpressionStatement	 
>4904	CallExpression	fprintf ( f , \"%d %d\n\" , num_images , num_pairs )
>4905	ArgumentList	f
>4906	Argument	num_pairs
>4907	Identifier	num_pairs
>4908	Argument	num_images
>4909	Identifier	num_images
>4910	Argument	\"%d %d\n\"
>4911	PrimaryExpression	\"%d %d\n\"
>4912	Argument	f
>4913	Identifier	f
>4914	Callee	fprintf
>4915	Identifier	fprintf
>4916	ForStatement	for ( int i = 0 ; i < num_images ; i ++ )
>4917	CompoundStatement	 
>4918	ExpressionStatement	 
>4919	AssignmentExpr	num_pairs += num_nbrs
>4920	Identifier	num_nbrs
>4921	Identifier	num_pairs
>4922	IdentifierDeclStatement	 
>4923	IdentifierDecl	num_nbrs = ( int ) m_matches . GetNumNeighbors ( i )
>4924	AssignmentExpr	num_nbrs = ( int ) m_matches . GetNumNeighbors ( i )
>4925	CastExpression	( int ) m_matches . GetNumNeighbors ( i )
>4926	CallExpression	m_matches . GetNumNeighbors ( i )
>4927	ArgumentList	i
>4928	Argument	i
>4929	Identifier	i
>4930	Callee	m_matches . GetNumNeighbors
>4931	MemberAccess	m_matches . GetNumNeighbors
>4932	Identifier	GetNumNeighbors
>4933	Identifier	m_matches
>4934	CastTarget	int
>4935	Identifier	num_nbrs
>4936	Identifier	num_nbrs
>4937	IdentifierDeclType	int
>4938	IncDecOp	 
>4939	IncDec	++
>4940	Identifier	i
>4941	Condition	 
>4942	RelationalExpression	i < num_images
>4943	Identifier	num_images
>4944	Identifier	i
>4945	ForInit	 
>4946	IdentifierDeclStatement	int i = 0 ;
>4947	IdentifierDecl	i = 0
>4948	AssignmentExpr	i = 0
>4949	PrimaryExpression	0
>4950	Identifier	i
>4951	Identifier	i
>4952	IdentifierDeclType	int
>4953	IdentifierDeclStatement	 
>4954	IdentifierDecl	num_pairs = 0
>4955	AssignmentExpr	num_pairs = 0
>4956	PrimaryExpression	0
>4957	Identifier	num_pairs
>4958	Identifier	num_pairs
>4959	IdentifierDeclType	int
>4960	ExpressionStatement	 
>4961	CallExpression	SetMatchesFromPoints ( 16 )
>4962	ArgumentList	16
>4963	Argument	16
>4964	PrimaryExpression	16
>4965	Callee	SetMatchesFromPoints
>4966	Identifier	SetMatchesFromPoints
>4967	IdentifierDeclStatement	 
>4968	IdentifierDecl	num_images = GetNumImages ( )
>4969	AssignmentExpr	num_images = GetNumImages ( )
>4970	CallExpression	GetNumImages ( )
>4971	ArgumentList	 
>4972	Callee	GetNumImages
>4973	Identifier	GetNumImages
>4974	Identifier	num_images
>4975	Identifier	num_images
>4976	IdentifierDeclType	int
>4977	IfStatement	if ( f == NULL )
>4978	CompoundStatement	 
>4979	ReturnStatement	 
>4980	ExpressionStatement	 
>4981	CallExpression	printf ( \"[OutputRelativePose3D] Error opening file %s for writing\n\" , outfile )
>4982	ArgumentList	\"[OutputRelativePose3D] Error opening file %s for writing\n\"
>4983	Argument	outfile
>4984	Identifier	outfile
>4985	Argument	\"[OutputRelativePose3D] Error opening file %s for writing\n\"
>4986	PrimaryExpression	\"[OutputRelativePose3D] Error opening file %s for writing\n\"
>4987	Callee	printf
>4988	Identifier	printf
>4989	Condition	 
>4990	EqualityExpression	f == NULL
>4991	Identifier	NULL
>4992	Identifier	f
>4993	IdentifierDeclStatement	 
>4994	IdentifierDecl	* f = fopen ( outfile , \"w\" )
>4995	AssignmentExpr	* f = fopen ( outfile , \"w\" )
>4996	CallExpression	fopen ( outfile , \"w\" )
>4997	ArgumentList	outfile
>4998	Argument	\"w\"
>4999	PrimaryExpression	\"w\"
>5000	Argument	outfile
>5001	Identifier	outfile
>5002	Callee	fopen
>5003	Identifier	fopen
>5004	Identifier	f
>5005	Identifier	f
>5006	IdentifierDeclType	FILE *
<3=9,8,4
<4=5
<5=7,6
<9=778,764,749,549,544,535,521,506,492,479,236,17,10
<10=11
<11=15,12
<12=13
<13=14
<15=16
<17=228,224,221,18
<18=212,185,158,142,131,28,19
<19=20
<20=26,21
<21=24,22
<22=23
<24=25
<26=27
<28=123,119,116,29
<29=103,83,68,53,30
<30=31
<31=51,32
<32=49,47,45,37,35,33
<33=34
<35=36
<37=38
<38=40,39
<40=42,41
<42=44,43
<45=46
<47=48
<49=50
<51=52
<53=54
<54=67,66,55
<55=65,56
<56=58,57
<58=60,59
<60=62,61
<62=64,63
<68=69
<69=82,81,70
<70=80,71
<71=73,72
<73=75,74
<75=77,76
<77=79,78
<83=95,84
<84=85
<85=89,86
<86=87
<87=88
<89=90
<90=92,91
<92=94,93
<95=96
<96=102,97
<97=99,98
<99=101,100
<103=104
<104=115,114,105
<105=113,106
<106=108,107
<108=110,109
<110=112,111
<116=118,117
<119=120
<120=122,121
<123=124
<124=125
<125=130,129,126
<126=128,127
<131=132
<132=140,133
<133=138,136,134
<134=135
<136=137
<138=139
<140=141
<142=143
<143=157,156,144
<144=155,145
<145=154,146
<146=148,147
<148=149
<149=151,150
<151=153,152
<158=159
<159=183,160
<160=181,179,173,167,161
<161=162
<162=164,163
<164=166,165
<167=168
<168=170,169
<170=172,171
<173=174
<174=176,175
<176=178,177
<179=180
<181=182
<183=184
<185=186
<186=210,187
<187=208,206,200,194,188
<188=189
<189=191,190
<191=193,192
<194=195
<195=197,196
<197=199,198
<200=201
<201=203,202
<203=205,204
<206=207
<208=209
<210=211
<212=213
<213=220,219,214
<214=218,215
<215=217,216
<221=223,222
<224=225
<225=227,226
<228=229
<229=230
<230=235,234,231
<231=233,232
<236=471,467,464,237
<237=406,389,350,311,272,259,238
<238=239
<239=257,240
<240=255,253,249,245,241
<241=242
<242=244,243
<245=246
<246=248,247
<249=250
<250=252,251
<253=254
<255=256
<257=258
<259=260
<260=271,270,261
<261=269,262
<262=264,263
<264=266,265
<266=268,267
<272=273
<273=309,274
<274=307,305,295,285,275
<275=276
<276=278,277
<278=280,279
<280=282,281
<282=284,283
<285=286
<286=288,287
<288=290,289
<290=292,291
<292=294,293
<295=296
<296=298,297
<298=300,299
<300=302,301
<302=304,303
<305=306
<307=308
<309=310
<311=312
<312=348,313
<313=346,344,334,324,314
<314=315
<315=317,316
<317=319,318
<319=321,320
<321=323,322
<324=325
<325=327,326
<327=329,328
<329=331,330
<331=333,332
<334=335
<335=337,336
<337=339,338
<339=341,340
<341=343,342
<344=345
<346=347
<348=349
<350=351
<351=387,352
<352=385,383,373,363,353
<353=354
<354=356,355
<356=358,357
<358=360,359
<360=362,361
<363=364
<364=366,365
<366=368,367
<368=370,369
<370=372,371
<373=374
<374=376,375
<376=378,377
<378=380,379
<380=382,381
<383=384
<385=386
<387=388
<389=390
<390=404,391
<391=402,400,392
<392=393
<393=395,394
<395=397,396
<397=399,398
<400=401
<402=403
<404=405
<406=454,407
<407=445,436,427,418,409,408
<409=410
<410=416,411
<411=414,412
<412=413
<414=415
<416=417
<418=419
<419=425,420
<420=423,421
<421=422
<423=424
<425=426
<427=428
<428=434,429
<429=432,430
<430=431
<432=433
<434=435
<436=437
<437=443,438
<438=441,439
<439=440
<441=442
<443=444
<445=446
<446=452,447
<447=450,448
<448=449
<450=451
<452=453
<454=455
<455=463,456
<456=458,457
<458=460,459
<460=462,461
<464=466,465
<467=468
<468=470,469
<471=472
<472=473
<473=478,477,474
<474=476,475
<479=480
<480=490,481
<481=488,486,484,482
<482=483
<484=485
<486=487
<488=489
<490=491
<492=493
<493=505,504,494
<494=503,495
<495=502,496
<496=498,497
<498=499
<499=501,500
<506=517,507
<507=516,515,514,513,512,511,510,509,508
<517=518
<518=520,519
<521=522
<522=534,533,523
<523=532,524
<524=530,525
<525=528,526
<526=527
<528=529
<530=531
<535=536
<536=542,537
<537=540,538
<538=539
<540=541
<542=543
<544=545
<545=548,547,546
<549=741,737,734,550
<550=729,725,710,551
<551=706,552
<552=694,655,650,645,620,595,574,553
<553=554
<554=572,555
<555=564,562,556
<556=557
<557=561,558
<558=560,559
<562=563
<564=565
<565=567,566
<567=569,568
<569=571,570
<572=573
<574=575
<575=593,576
<576=585,583,577
<577=578
<578=582,579
<579=581,580
<583=584
<585=586
<586=588,587
<588=590,589
<590=592,591
<593=594
<595=596
<596=618,597
<597=616,614,612,610,608,600,598
<598=599
<600=601
<601=603,602
<603=605,604
<605=607,606
<608=609
<610=611
<612=613
<614=615
<616=617
<618=619
<620=621
<621=643,622
<622=641,639,637,635,633,625,623
<623=624
<625=626
<626=628,627
<628=630,629
<630=632,631
<633=634
<635=636
<637=638
<639=640
<641=642
<643=644
<645=646
<646=649,648,647
<650=651
<651=654,653,652
<655=656
<656=693,692,691,657
<657=690,658
<658=684,676,675,669,663,662,661,660,659
<663=667,664
<664=665
<665=666
<667=668
<669=673,670
<670=671
<671=672
<673=674
<676=683,677
<677=681,678
<678=679
<679=680
<681=682
<684=688,685
<685=686
<686=687
<688=689
<694=695
<695=705,704,696
<696=703,697
<697=701,698
<698=699
<699=700
<701=702
<706=707
<707=709,708
<710=711
<711=723,712
<712=721,719,717,713
<713=714
<714=716,715
<717=718
<719=720
<721=722
<723=724
<725=726
<726=728,727
<729=730
<730=733,732,731
<734=736,735
<737=738
<738=740,739
<741=742
<742=743
<743=748,747,744
<744=746,745
<749=760,750
<750=759,758,757,756,755,754,753,752,751
<760=761
<761=763,762
<764=765
<765=777,776,766
<766=775,767
<767=773,768
<768=771,769
<769=770
<771=772
<773=774
<778=779
<779=787,786,780
<780=785,781
<781=783,782
<783=784
<855=861,860,856
<856=857
<857=859,858
<861=1491,1477,1462,1401,1396,1387,1373,1358,1344,1331,1088,869,862
<862=863
<863=867,864
<864=865
<865=866
<867=868
<869=1080,1076,1073,870
<870=1064,1037,1010,994,983,880,871
<871=872
<872=878,873
<873=876,874
<874=875
<876=877
<878=879
<880=975,971,968,881
<881=955,935,920,905,882
<882=883
<883=903,884
<884=901,899,897,889,887,885
<885=886
<887=888
<889=890
<890=892,891
<892=894,893
<894=896,895
<897=898
<899=900
<901=902
<903=904
<905=906
<906=919,918,907
<907=917,908
<908=910,909
<910=912,911
<912=914,913
<914=916,915
<920=921
<921=934,933,922
<922=932,923
<923=925,924
<925=927,926
<927=929,928
<929=931,930
<935=947,936
<936=937
<937=941,938
<938=939
<939=940
<941=942
<942=944,943
<944=946,945
<947=948
<948=954,949
<949=951,950
<951=953,952
<955=956
<956=967,966,957
<957=965,958
<958=960,959
<960=962,961
<962=964,963
<968=970,969
<971=972
<972=974,973
<975=976
<976=977
<977=982,981,978
<978=980,979
<983=984
<984=992,985
<985=990,988,986
<986=987
<988=989
<990=991
<992=993
<994=995
<995=1009,1008,996
<996=1007,997
<997=1006,998
<998=1000,999
<1000=1001
<1001=1003,1002
<1003=1005,1004
<1010=1011
<1011=1035,1012
<1012=1033,1031,1025,1019,1013
<1013=1014
<1014=1016,1015
<1016=1018,1017
<1019=1020
<1020=1022,1021
<1022=1024,1023
<1025=1026
<1026=1028,1027
<1028=1030,1029
<1031=1032
<1033=1034
<1035=1036
<1037=1038
<1038=1062,1039
<1039=1060,1058,1052,1046,1040
<1040=1041
<1041=1043,1042
<1043=1045,1044
<1046=1047
<1047=1049,1048
<1049=1051,1050
<1052=1053
<1053=1055,1054
<1055=1057,1056
<1058=1059
<1060=1061
<1062=1063
<1064=1065
<1065=1072,1071,1066
<1066=1070,1067
<1067=1069,1068
<1073=1075,1074
<1076=1077
<1077=1079,1078
<1080=1081
<1081=1082
<1082=1087,1086,1083
<1083=1085,1084
<1088=1323,1319,1316,1089
<1089=1258,1241,1202,1163,1124,1111,1090
<1090=1091
<1091=1109,1092
<1092=1107,1105,1101,1097,1093
<1093=1094
<1094=1096,1095
<1097=1098
<1098=1100,1099
<1101=1102
<1102=1104,1103
<1105=1106
<1107=1108
<1109=1110
<1111=1112
<1112=1123,1122,1113
<1113=1121,1114
<1114=1116,1115
<1116=1118,1117
<1118=1120,1119
<1124=1125
<1125=1161,1126
<1126=1159,1157,1147,1137,1127
<1127=1128
<1128=1130,1129
<1130=1132,1131
<1132=1134,1133
<1134=1136,1135
<1137=1138
<1138=1140,1139
<1140=1142,1141
<1142=1144,1143
<1144=1146,1145
<1147=1148
<1148=1150,1149
<1150=1152,1151
<1152=1154,1153
<1154=1156,1155
<1157=1158
<1159=1160
<1161=1162
<1163=1164
<1164=1200,1165
<1165=1198,1196,1186,1176,1166
<1166=1167
<1167=1169,1168
<1169=1171,1170
<1171=1173,1172
<1173=1175,1174
<1176=1177
<1177=1179,1178
<1179=1181,1180
<1181=1183,1182
<1183=1185,1184
<1186=1187
<1187=1189,1188
<1189=1191,1190
<1191=1193,1192
<1193=1195,1194
<1196=1197
<1198=1199
<1200=1201
<1202=1203
<1203=1239,1204
<1204=1237,1235,1225,1215,1205
<1205=1206
<1206=1208,1207
<1208=1210,1209
<1210=1212,1211
<1212=1214,1213
<1215=1216
<1216=1218,1217
<1218=1220,1219
<1220=1222,1221
<1222=1224,1223
<1225=1226
<1226=1228,1227
<1228=1230,1229
<1230=1232,1231
<1232=1234,1233
<1235=1236
<1237=1238
<1239=1240
<1241=1242
<1242=1256,1243
<1243=1254,1252,1244
<1244=1245
<1245=1247,1246
<1247=1249,1248
<1249=1251,1250
<1252=1253
<1254=1255
<1256=1257
<1258=1306,1259
<1259=1297,1288,1279,1270,1261,1260
<1261=1262
<1262=1268,1263
<1263=1266,1264
<1264=1265
<1266=1267
<1268=1269
<1270=1271
<1271=1277,1272
<1272=1275,1273
<1273=1274
<1275=1276
<1277=1278
<1279=1280
<1280=1286,1281
<1281=1284,1282
<1282=1283
<1284=1285
<1286=1287
<1288=1289
<1289=1295,1290
<1290=1293,1291
<1291=1292
<1293=1294
<1295=1296
<1297=1298
<1298=1304,1299
<1299=1302,1300
<1300=1301
<1302=1303
<1304=1305
<1306=1307
<1307=1315,1308
<1308=1310,1309
<1310=1312,1311
<1312=1314,1313
<1316=1318,1317
<1319=1320
<1320=1322,1321
<1323=1324
<1324=1325
<1325=1330,1329,1326
<1326=1328,1327
<1331=1332
<1332=1342,1333
<1333=1340,1338,1336,1334
<1334=1335
<1336=1337
<1338=1339
<1340=1341
<1342=1343
<1344=1345
<1345=1357,1356,1346
<1346=1355,1347
<1347=1354,1348
<1348=1350,1349
<1350=1351
<1351=1353,1352
<1358=1369,1359
<1359=1368,1367,1366,1365,1364,1363,1362,1361,1360
<1369=1370
<1370=1372,1371
<1373=1374
<1374=1386,1385,1375
<1375=1384,1376
<1376=1382,1377
<1377=1380,1378
<1378=1379
<1380=1381
<1382=1383
<1387=1388
<1388=1394,1389
<1389=1392,1390
<1390=1391
<1392=1393
<1394=1395
<1396=1397
<1397=1400,1399,1398
<1401=1454,1450,1447,1402
<1402=1442,1438,1423,1403
<1403=1415,1404
<1404=1405
<1405=1406
<1406=1408,1407
<1408=1410,1409
<1410=1412,1411
<1412=1414,1413
<1415=1416
<1416=1418,1417
<1418=1420,1419
<1420=1422,1421
<1423=1424
<1424=1436,1425
<1425=1434,1432,1430,1426
<1426=1427
<1427=1429,1428
<1430=1431
<1432=1433
<1434=1435
<1436=1437
<1438=1439
<1439=1441,1440
<1442=1443
<1443=1446,1445,1444
<1447=1449,1448
<1450=1451
<1451=1453,1452
<1454=1455
<1455=1456
<1456=1461,1460,1457
<1457=1459,1458
<1462=1473,1463
<1463=1472,1471,1470,1469,1468,1467,1466,1465,1464
<1473=1474
<1474=1476,1475
<1477=1478
<1478=1490,1489,1479
<1479=1488,1480
<1480=1486,1481
<1481=1484,1482
<1482=1483
<1484=1485
<1486=1487
<1491=1492
<1492=1500,1499,1493
<1493=1498,1494
<1494=1496,1495
<1496=1497
<1561=1567,1566,1562
<1562=1563
<1563=1565,1564
<1567=2144,2107,2102,2093,2079,2064,2050,2037,1794,1575,1568
<1568=1569
<1569=1573,1570
<1570=1571
<1571=1572
<1573=1574
<1575=1786,1782,1779,1576
<1576=1770,1743,1716,1700,1689,1586,1577
<1577=1578
<1578=1584,1579
<1579=1582,1580
<1580=1581
<1582=1583
<1584=1585
<1586=1681,1677,1674,1587
<1587=1661,1641,1626,1611,1588
<1588=1589
<1589=1609,1590
<1590=1607,1605,1603,1595,1593,1591
<1591=1592
<1593=1594
<1595=1596
<1596=1598,1597
<1598=1600,1599
<1600=1602,1601
<1603=1604
<1605=1606
<1607=1608
<1609=1610
<1611=1612
<1612=1625,1624,1613
<1613=1623,1614
<1614=1616,1615
<1616=1618,1617
<1618=1620,1619
<1620=1622,1621
<1626=1627
<1627=1640,1639,1628
<1628=1638,1629
<1629=1631,1630
<1631=1633,1632
<1633=1635,1634
<1635=1637,1636
<1641=1653,1642
<1642=1643
<1643=1647,1644
<1644=1645
<1645=1646
<1647=1648
<1648=1650,1649
<1650=1652,1651
<1653=1654
<1654=1660,1655
<1655=1657,1656
<1657=1659,1658
<1661=1662
<1662=1673,1672,1663
<1663=1671,1664
<1664=1666,1665
<1666=1668,1667
<1668=1670,1669
<1674=1676,1675
<1677=1678
<1678=1680,1679
<1681=1682
<1682=1683
<1683=1688,1687,1684
<1684=1686,1685
<1689=1690
<1690=1698,1691
<1691=1696,1694,1692
<1692=1693
<1694=1695
<1696=1697
<1698=1699
<1700=1701
<1701=1715,1714,1702
<1702=1713,1703
<1703=1712,1704
<1704=1706,1705
<1706=1707
<1707=1709,1708
<1709=1711,1710
<1716=1717
<1717=1741,1718
<1718=1739,1737,1731,1725,1719
<1719=1720
<1720=1722,1721
<1722=1724,1723
<1725=1726
<1726=1728,1727
<1728=1730,1729
<1731=1732
<1732=1734,1733
<1734=1736,1735
<1737=1738
<1739=1740
<1741=1742
<1743=1744
<1744=1768,1745
<1745=1766,1764,1758,1752,1746
<1746=1747
<1747=1749,1748
<1749=1751,1750
<1752=1753
<1753=1755,1754
<1755=1757,1756
<1758=1759
<1759=1761,1760
<1761=1763,1762
<1764=1765
<1766=1767
<1768=1769
<1770=1771
<1771=1778,1777,1772
<1772=1776,1773
<1773=1775,1774
<1779=1781,1780
<1782=1783
<1783=1785,1784
<1786=1787
<1787=1788
<1788=1793,1792,1789
<1789=1791,1790
<1794=2029,2025,2022,1795
<1795=1964,1947,1908,1869,1830,1817,1796
<1796=1797
<1797=1815,1798
<1798=1813,1811,1807,1803,1799
<1799=1800
<1800=1802,1801
<1803=1804
<1804=1806,1805
<1807=1808
<1808=1810,1809
<1811=1812
<1813=1814
<1815=1816
<1817=1818
<1818=1829,1828,1819
<1819=1827,1820
<1820=1822,1821
<1822=1824,1823
<1824=1826,1825
<1830=1831
<1831=1867,1832
<1832=1865,1863,1853,1843,1833
<1833=1834
<1834=1836,1835
<1836=1838,1837
<1838=1840,1839
<1840=1842,1841
<1843=1844
<1844=1846,1845
<1846=1848,1847
<1848=1850,1849
<1850=1852,1851
<1853=1854
<1854=1856,1855
<1856=1858,1857
<1858=1860,1859
<1860=1862,1861
<1863=1864
<1865=1866
<1867=1868
<1869=1870
<1870=1906,1871
<1871=1904,1902,1892,1882,1872
<1872=1873
<1873=1875,1874
<1875=1877,1876
<1877=1879,1878
<1879=1881,1880
<1882=1883
<1883=1885,1884
<1885=1887,1886
<1887=1889,1888
<1889=1891,1890
<1892=1893
<1893=1895,1894
<1895=1897,1896
<1897=1899,1898
<1899=1901,1900
<1902=1903
<1904=1905
<1906=1907
<1908=1909
<1909=1945,1910
<1910=1943,1941,1931,1921,1911
<1911=1912
<1912=1914,1913
<1914=1916,1915
<1916=1918,1917
<1918=1920,1919
<1921=1922
<1922=1924,1923
<1924=1926,1925
<1926=1928,1927
<1928=1930,1929
<1931=1932
<1932=1934,1933
<1934=1936,1935
<1936=1938,1937
<1938=1940,1939
<1941=1942
<1943=1944
<1945=1946
<1947=1948
<1948=1962,1949
<1949=1960,1958,1950
<1950=1951
<1951=1953,1952
<1953=1955,1954
<1955=1957,1956
<1958=1959
<1960=1961
<1962=1963
<1964=2012,1965
<1965=2003,1994,1985,1976,1967,1966
<1967=1968
<1968=1974,1969
<1969=1972,1970
<1970=1971
<1972=1973
<1974=1975
<1976=1977
<1977=1983,1978
<1978=1981,1979
<1979=1980
<1981=1982
<1983=1984
<1985=1986
<1986=1992,1987
<1987=1990,1988
<1988=1989
<1990=1991
<1992=1993
<1994=1995
<1995=2001,1996
<1996=1999,1997
<1997=1998
<1999=2000
<2001=2002
<2003=2004
<2004=2010,2005
<2005=2008,2006
<2006=2007
<2008=2009
<2010=2011
<2012=2013
<2013=2021,2014
<2014=2016,2015
<2016=2018,2017
<2018=2020,2019
<2022=2024,2023
<2025=2026
<2026=2028,2027
<2029=2030
<2030=2031
<2031=2036,2035,2032
<2032=2034,2033
<2037=2038
<2038=2048,2039
<2039=2046,2044,2042,2040
<2040=2041
<2042=2043
<2044=2045
<2046=2047
<2048=2049
<2050=2051
<2051=2063,2062,2052
<2052=2061,2053
<2053=2060,2054
<2054=2056,2055
<2056=2057
<2057=2059,2058
<2064=2075,2065
<2065=2074,2073,2072,2071,2070,2069,2068,2067,2066
<2075=2076
<2076=2078,2077
<2079=2080
<2080=2092,2091,2081
<2081=2090,2082
<2082=2088,2083
<2083=2086,2084
<2084=2085
<2086=2087
<2088=2089
<2093=2094
<2094=2100,2095
<2095=2098,2096
<2096=2097
<2098=2099
<2100=2101
<2102=2103
<2103=2106,2105,2104
<2107=2136,2132,2129,2108
<2108=2109
<2109=2121,2110
<2110=2111
<2111=2112
<2112=2114,2113
<2114=2116,2115
<2116=2118,2117
<2118=2120,2119
<2121=2122
<2122=2124,2123
<2124=2126,2125
<2126=2128,2127
<2129=2131,2130
<2132=2133
<2133=2135,2134
<2136=2137
<2137=2138
<2138=2143,2142,2139
<2139=2141,2140
<2144=2145
<2145=2153,2152,2146
<2146=2151,2147
<2147=2149,2148
<2149=2150
<2211=2217,2216,2212
<2212=2213
<2213=2215,2214
<2217=3072,3061,3047,3032,3022,3015,3008,2901,2894,2883,2872,2857,2838,2829,2815,2808,2773,2760,2543,2263,2230,2223,2222,2221,2220,2218
<2218=2219
<2223=2224
<2224=2228,2225
<2225=2226
<2226=2227
<2228=2229
<2230=2255,2251,2248,2231
<2231=2232
<2232=2242,2233
<2233=2234
<2234=2236,2235
<2236=2237
<2237=2239,2238
<2239=2241,2240
<2242=2243
<2243=2245,2244
<2245=2247,2246
<2248=2250,2249
<2251=2252
<2252=2254,2253
<2255=2256
<2256=2257
<2257=2262,2261,2258
<2258=2260,2259
<2263=2535,2531,2528,2264
<2264=2519,2503,2497,2470,2428,2417,2274,2265
<2265=2266
<2266=2272,2267
<2267=2270,2268
<2268=2269
<2270=2271
<2272=2273
<2274=2409,2405,2402,2275
<2275=2389,2380,2367,2347,2334,2293,2276
<2276=2277
<2277=2291,2278
<2278=2289,2287,2285,2283,2281,2279
<2279=2280
<2281=2282
<2283=2284
<2285=2286
<2287=2288
<2289=2290
<2291=2292
<2293=2319,2294
<2294=2307,2295
<2295=2296
<2296=2306,2297
<2297=2299,2298
<2299=2301,2300
<2301=2303,2302
<2303=2305,2304
<2307=2308
<2308=2318,2309
<2309=2311,2310
<2311=2313,2312
<2313=2315,2314
<2315=2317,2316
<2319=2320
<2320=2333,2321
<2321=2332,2322
<2322=2324,2323
<2324=2325
<2325=2327,2326
<2327=2329,2328
<2329=2331,2330
<2334=2341,2335
<2335=2340,2339,2336
<2336=2338,2337
<2341=2346,2345,2342
<2342=2344,2343
<2347=2359,2348
<2348=2349
<2349=2353,2350
<2350=2351
<2351=2352
<2353=2354
<2354=2356,2355
<2356=2358,2357
<2359=2360
<2360=2366,2361
<2361=2363,2362
<2363=2365,2364
<2367=2368
<2368=2379,2378,2369
<2369=2377,2370
<2370=2372,2371
<2372=2374,2373
<2374=2376,2375
<2380=2381
<2381=2388,2387,2382
<2382=2386,2383
<2383=2385,2384
<2389=2390
<2390=2401,2400,2391
<2391=2399,2392
<2392=2394,2393
<2394=2396,2395
<2396=2398,2397
<2402=2404,2403
<2405=2406
<2406=2408,2407
<2409=2410
<2410=2411
<2411=2416,2415,2412
<2412=2414,2413
<2417=2418
<2418=2426,2419
<2419=2424,2422,2420
<2420=2421
<2422=2423
<2424=2425
<2426=2427
<2428=2429
<2429=2468,2430
<2430=2466,2464,2453,2442,2431
<2431=2432
<2432=2440,2433
<2433=2434
<2434=2435
<2435=2437,2436
<2437=2439,2438
<2440=2441
<2442=2443
<2443=2451,2444
<2444=2445
<2445=2446
<2446=2448,2447
<2448=2450,2449
<2451=2452
<2453=2454
<2454=2462,2455
<2455=2456
<2456=2457
<2457=2459,2458
<2459=2461,2460
<2462=2463
<2464=2465
<2466=2467
<2468=2469
<2470=2471
<2471=2495,2472
<2472=2493,2491,2485,2479,2473
<2473=2474
<2474=2476,2475
<2476=2478,2477
<2479=2480
<2480=2482,2481
<2482=2484,2483
<2485=2486
<2486=2488,2487
<2488=2490,2489
<2491=2492
<2493=2494
<2495=2496
<2497=2499,2498
<2499=2500
<2500=2502,2501
<2503=2504
<2504=2518,2517,2505
<2505=2516,2506
<2506=2515,2507
<2507=2509,2508
<2509=2510
<2510=2512,2511
<2512=2514,2513
<2519=2520
<2520=2527,2526,2521
<2521=2525,2522
<2522=2524,2523
<2528=2530,2529
<2531=2532
<2532=2534,2533
<2535=2536
<2536=2537
<2537=2542,2541,2538
<2538=2540,2539
<2543=2752,2748,2745,2544
<2544=2733,2696,2657,2618,2579,2566,2545
<2545=2546
<2546=2564,2547
<2547=2562,2560,2556,2552,2548
<2548=2549
<2549=2551,2550
<2552=2553
<2553=2555,2554
<2556=2557
<2557=2559,2558
<2560=2561
<2562=2563
<2564=2565
<2566=2567
<2567=2578,2577,2568
<2568=2576,2569
<2569=2571,2570
<2571=2573,2572
<2573=2575,2574
<2579=2580
<2580=2616,2581
<2581=2614,2612,2602,2592,2582
<2582=2583
<2583=2585,2584
<2585=2587,2586
<2587=2589,2588
<2589=2591,2590
<2592=2593
<2593=2595,2594
<2595=2597,2596
<2597=2599,2598
<2599=2601,2600
<2602=2603
<2603=2605,2604
<2605=2607,2606
<2607=2609,2608
<2609=2611,2610
<2612=2613
<2614=2615
<2616=2617
<2618=2619
<2619=2655,2620
<2620=2653,2651,2641,2631,2621
<2621=2622
<2622=2624,2623
<2624=2626,2625
<2626=2628,2627
<2628=2630,2629
<2631=2632
<2632=2634,2633
<2634=2636,2635
<2636=2638,2637
<2638=2640,2639
<2641=2642
<2642=2644,2643
<2644=2646,2645
<2646=2648,2647
<2648=2650,2649
<2651=2652
<2653=2654
<2655=2656
<2657=2658
<2658=2694,2659
<2659=2692,2690,2680,2670,2660
<2660=2661
<2661=2663,2662
<2663=2665,2664
<2665=2667,2666
<2667=2669,2668
<2670=2671
<2671=2673,2672
<2673=2675,2674
<2675=2677,2676
<2677=2679,2678
<2680=2681
<2681=2683,2682
<2683=2685,2684
<2685=2687,2686
<2687=2689,2688
<2690=2691
<2692=2693
<2694=2695
<2696=2697
<2697=2731,2698
<2698=2729,2727,2719,2709,2699
<2699=2700
<2700=2702,2701
<2702=2704,2703
<2704=2706,2705
<2706=2708,2707
<2709=2710
<2710=2712,2711
<2712=2714,2713
<2714=2716,2715
<2716=2718,2717
<2719=2720
<2720=2722,2721
<2722=2724,2723
<2724=2726,2725
<2727=2728
<2729=2730
<2731=2732
<2733=2735,2734
<2735=2736
<2736=2744,2737
<2737=2739,2738
<2739=2741,2740
<2741=2743,2742
<2745=2747,2746
<2748=2749
<2749=2751,2750
<2752=2753
<2753=2754
<2754=2759,2758,2755
<2755=2757,2756
<2760=2761
<2761=2771,2762
<2762=2769,2767,2765,2763
<2763=2764
<2765=2766
<2767=2768
<2769=2770
<2771=2772
<2773=2800,2796,2793,2774
<2774=2775
<2775=2780,2776
<2776=2777
<2777=2779,2778
<2780=2781
<2781=2783,2782
<2783=2785,2784
<2785=2786
<2786=2788,2787
<2788=2790,2789
<2790=2792,2791
<2793=2795,2794
<2796=2797
<2797=2799,2798
<2800=2801
<2801=2802
<2802=2807,2806,2803
<2803=2805,2804
<2808=2809
<2809=2814,2813,2810
<2810=2812,2811
<2815=2816
<2816=2828,2827,2817
<2817=2826,2818
<2818=2825,2819
<2819=2821,2820
<2821=2822
<2822=2824,2823
<2829=2830
<2830=2836,2831
<2831=2834,2832
<2832=2833
<2834=2835
<2836=2837
<2838=2851,2839
<2839=2840
<2840=2841
<2841=2849,2842
<2842=2847,2845,2843
<2843=2844
<2845=2846
<2847=2848
<2849=2850
<2851=2852
<2852=2856,2853
<2853=2855,2854
<2857=2868,2858
<2858=2867,2866,2865,2864,2863,2862,2861,2860,2859
<2868=2869
<2869=2871,2870
<2872=2873
<2873=2882,2874
<2874=2880,2875
<2875=2878,2876
<2876=2877
<2878=2879
<2880=2881
<2883=2884
<2884=2892,2885
<2885=2890,2888,2886
<2886=2887
<2888=2889
<2890=2891
<2892=2893
<2894=2895
<2895=2899,2896
<2896=2897
<2897=2898
<2899=2900
<2901=3000,2996,2993,2902
<2902=2981,2963,2913,2907,2903
<2903=2904
<2904=2906,2905
<2907=2908
<2908=2910,2909
<2910=2912,2911
<2913=2957,2930,2914
<2914=2915
<2915=2916
<2916=2928,2917
<2917=2926,2924,2918
<2918=2919
<2919=2921,2920
<2921=2923,2922
<2924=2925
<2926=2927
<2928=2929
<2930=2931
<2931=2955,2932
<2932=2953,2951,2945,2939,2933
<2933=2934
<2934=2936,2935
<2936=2938,2937
<2939=2940
<2940=2942,2941
<2942=2944,2943
<2945=2946
<2946=2948,2947
<2948=2950,2949
<2951=2952
<2953=2954
<2955=2956
<2957=2958
<2958=2960,2959
<2960=2962,2961
<2963=2975,2964
<2964=2966,2965
<2966=2967
<2967=2973,2968
<2968=2971,2969
<2969=2970
<2971=2972
<2973=2974
<2975=2976
<2976=2978,2977
<2978=2980,2979
<2981=2983,2982
<2983=2984
<2984=2992,2985
<2985=2987,2986
<2987=2989,2988
<2989=2991,2990
<2993=2995,2994
<2996=2997
<2997=2999,2998
<3000=3001
<3001=3002
<3002=3007,3006,3003
<3003=3005,3004
<3008=3009
<3009=3014,3013,3010
<3010=3012,3011
<3015=3016
<3016=3021,3020,3017
<3017=3019,3018
<3022=3023
<3023=3031,3030,3024
<3024=3029,3025
<3025=3027,3026
<3027=3028
<3032=3043,3033
<3033=3042,3041,3040,3039,3038,3037,3036,3035,3034
<3043=3044
<3044=3046,3045
<3047=3048
<3048=3060,3059,3049
<3049=3058,3050
<3050=3056,3051
<3051=3054,3052
<3052=3053
<3054=3055
<3056=3057
<3061=3062
<3062=3070,3063
<3063=3068,3066,3064
<3064=3065
<3066=3067
<3068=3069
<3070=3071
<3072=3073
<3073=3076,3075,3074
<3152=3155,3154,3153
<3155=3584,3577,3570,3165,3156
<3156=3157
<3157=3163,3158
<3158=3161,3159
<3159=3160
<3161=3162
<3163=3164
<3165=3562,3558,3555,3166
<3166=3544,3526,3519,3243,3167
<3167=3230,3168
<3168=3214,3203,3193,3183,3173,3169
<3169=3170
<3170=3172,3171
<3173=3174
<3174=3176,3175
<3176=3178,3177
<3178=3180,3179
<3180=3182,3181
<3183=3184
<3184=3186,3185
<3186=3188,3187
<3188=3190,3189
<3190=3192,3191
<3193=3194
<3194=3196,3195
<3196=3198,3197
<3198=3200,3199
<3200=3202,3201
<3203=3204
<3204=3206,3205
<3206=3207
<3207=3209,3208
<3209=3211,3210
<3211=3213,3212
<3214=3215
<3215=3228,3216
<3216=3226,3224,3217
<3217=3218
<3218=3222,3219
<3219=3220
<3220=3221
<3222=3223
<3224=3225
<3226=3227
<3228=3229
<3230=3231
<3231=3240,3232
<3232=3234,3233
<3234=3238,3235
<3235=3236
<3236=3237
<3238=3239
<3240=3242,3241
<3243=3511,3507,3504,3244
<3244=3489,3480,3467,3448,3432,3415,3245
<3245=3405,3401,3398,3246
<3246=3383,3374,3361,3342,3326,3309,3305,3284,3257,3247
<3247=3253,3248
<3248=3249
<3249=3250
<3250=3252,3251
<3253=3254
<3254=3256,3255
<3257=3258
<3258=3283,3282,3259
<3259=3281,3260
<3260=3279,3261
<3261=3262
<3262=3263
<3263=3277,3264
<3264=3275,3269,3265
<3265=3266
<3266=3268,3267
<3269=3270
<3270=3272,3271
<3272=3274,3273
<3275=3276
<3277=3278
<3279=3280
<3284=3285
<3285=3303,3286
<3286=3301,3299,3297,3295,3293,3291,3287
<3287=3288
<3288=3290,3289
<3291=3292
<3293=3294
<3295=3296
<3297=3298
<3299=3300
<3301=3302
<3303=3304
<3305=3306
<3306=3308,3307
<3309=3310
<3310=3324,3311
<3311=3322,3320,3318,3314,3312
<3312=3313
<3314=3315
<3315=3317,3316
<3318=3319
<3320=3321
<3322=3323
<3324=3325
<3326=3327
<3327=3341,3340,3328
<3328=3339,3329
<3329=3337,3330
<3330=3335,3333,3331
<3331=3332
<3333=3334
<3335=3336
<3337=3338
<3342=3343
<3343=3359,3344
<3344=3357,3355,3353,3351,3349,3347,3345
<3345=3346
<3347=3348
<3349=3350
<3351=3352
<3353=3354
<3355=3356
<3357=3358
<3359=3360
<3361=3362
<3362=3366,3363
<3363=3364
<3364=3365
<3366=3367
<3367=3369,3368
<3369=3371,3370
<3371=3373,3372
<3374=3379,3375
<3375=3378,3377,3376
<3379=3382,3381,3380
<3383=3384
<3384=3397,3396,3385
<3385=3395,3386
<3386=3388,3387
<3388=3390,3389
<3390=3392,3391
<3392=3394,3393
<3398=3400,3399
<3401=3402
<3402=3404,3403
<3405=3406
<3406=3407
<3407=3414,3413,3408
<3408=3412,3409
<3409=3411,3410
<3415=3416
<3416=3430,3417
<3417=3428,3426,3424,3420,3418
<3418=3419
<3420=3421
<3421=3423,3422
<3424=3425
<3426=3427
<3428=3429
<3430=3431
<3432=3433
<3433=3447,3446,3434
<3434=3445,3435
<3435=3443,3436
<3436=3441,3439,3437
<3437=3438
<3439=3440
<3441=3442
<3443=3444
<3448=3449
<3449=3465,3450
<3450=3463,3461,3459,3457,3455,3453,3451
<3451=3452
<3453=3454
<3455=3456
<3457=3458
<3459=3460
<3461=3462
<3463=3464
<3465=3466
<3467=3468
<3468=3472,3469
<3469=3470
<3470=3471
<3472=3473
<3473=3475,3474
<3475=3477,3476
<3477=3479,3478
<3480=3485,3481
<3481=3484,3483,3482
<3485=3488,3487,3486
<3489=3490
<3490=3503,3502,3491
<3491=3501,3492
<3492=3494,3493
<3494=3496,3495
<3496=3498,3497
<3498=3500,3499
<3504=3506,3505
<3507=3508
<3508=3510,3509
<3511=3512
<3512=3513
<3513=3518,3517,3514
<3514=3516,3515
<3519=3520
<3520=3525,3524,3521
<3521=3523,3522
<3526=3527
<3527=3543,3542,3528
<3528=3541,3529
<3529=3540,3530
<3530=3532,3531
<3532=3533
<3533=3535,3534
<3535=3537,3536
<3537=3539,3538
<3544=3545
<3545=3554,3553,3546
<3546=3552,3547
<3547=3549,3548
<3549=3551,3550
<3555=3557,3556
<3558=3559
<3559=3561,3560
<3562=3563
<3563=3564
<3564=3569,3568,3565
<3565=3567,3566
<3570=3571
<3571=3576,3575,3572
<3572=3574,3573
<3577=3578
<3578=3583,3582,3579
<3579=3581,3580
<3584=3585
<3585=3597,3596,3586
<3586=3595,3587
<3587=3594,3588
<3588=3590,3589
<3590=3591
<3591=3593,3592
<3646=3649,3648,3647
<3649=3691,3650
<3650=3683,3679,3676,3651
<3651=3664,3652
<3652=3653
<3653=3655,3654
<3655=3657,3656
<3657=3659,3658
<3659=3661,3660
<3661=3663,3662
<3664=3665
<3665=3667,3666
<3667=3669,3668
<3669=3671,3670
<3671=3673,3672
<3673=3675,3674
<3676=3678,3677
<3679=3680
<3680=3682,3681
<3683=3684
<3684=3685
<3685=3690,3689,3686
<3686=3688,3687
<3691=3692
<3692=3700,3699,3693
<3693=3698,3694
<3694=3696,3695
<3696=3697
<3716=3722,3721,3717
<3717=3718
<3718=3720,3719
<3722=4252,4236,4226,4219,4212,4175,4162,4148,4137,3730,3723
<3723=3724
<3724=3728,3725
<3725=3726
<3726=3727
<3728=3729
<3730=4129,4125,4122,3731
<3731=4100,4091,4078,4065,4045,4036,4012,3991,3977,3963,3959,3732
<3732=3950,3941,3938,3733
<3733=3929,3920,3907,3894,3874,3865,3852,3839,3825,3791,3781,3776,3757,3734
<3734=3735
<3735=3755,3736
<3736=3753,3751,3749,3747,3743,3739,3737
<3737=3738
<3739=3740
<3740=3742,3741
<3743=3744
<3744=3746,3745
<3747=3748
<3749=3750
<3751=3752
<3753=3754
<3755=3756
<3757=3758
<3758=3774,3759
<3759=3772,3770,3768,3766,3764,3762,3760
<3760=3761
<3762=3763
<3764=3765
<3766=3767
<3768=3769
<3770=3771
<3772=3773
<3774=3775
<3776=3777
<3777=3780,3779,3778
<3781=3782
<3782=3790,3789,3788,3783
<3783=3787,3784
<3784=3786,3785
<3791=3792
<3792=3824,3823,3822,3793
<3793=3821,3794
<3794=3815,3807,3801,3795
<3795=3799,3796
<3796=3797
<3797=3798
<3799=3800
<3801=3805,3802
<3802=3803
<3803=3804
<3805=3806
<3807=3814,3808
<3808=3812,3809
<3809=3810
<3810=3811
<3812=3813
<3815=3819,3816
<3816=3817
<3817=3818
<3819=3820
<3825=3826
<3826=3838,3837,3827
<3827=3836,3828
<3828=3834,3829
<3829=3832,3830
<3830=3831
<3832=3833
<3834=3835
<3839=3840
<3840=3851,3850,3841
<3841=3849,3842
<3842=3846,3843
<3843=3845,3844
<3846=3848,3847
<3852=3853
<3853=3864,3863,3854
<3854=3862,3855
<3855=3859,3856
<3856=3858,3857
<3859=3861,3860
<3865=3866
<3866=3873,3867
<3867=3871,3868
<3868=3869
<3869=3870
<3871=3872
<3874=3875
<3875=3893,3892,3876
<3876=3891,3877
<3877=3889,3878
<3878=3885,3879
<3879=3880
<3880=3884,3881
<3881=3883,3882
<3885=3886
<3886=3888,3887
<3889=3890
<3894=3895
<3895=3899,3896
<3896=3897
<3897=3898
<3899=3900
<3900=3902,3901
<3902=3904,3903
<3904=3906,3905
<3907=3908
<3908=3912,3909
<3909=3910
<3910=3911
<3912=3913
<3913=3915,3914
<3915=3917,3916
<3917=3919,3918
<3920=3925,3921
<3921=3924,3923,3922
<3925=3928,3927,3926
<3929=3930
<3930=3937,3936,3931
<3931=3935,3932
<3932=3934,3933
<3938=3940,3939
<3941=3942
<3942=3949,3943
<3943=3945,3944
<3945=3946
<3946=3948,3947
<3950=3951
<3951=3958,3952
<3952=3954,3953
<3954=3955
<3955=3957,3956
<3959=3960
<3960=3962,3961
<3963=3964
<3964=3976,3975,3965
<3965=3974,3966
<3966=3973,3967
<3967=3969,3968
<3969=3970
<3970=3972,3971
<3977=3978
<3978=3990,3989,3979
<3979=3988,3980
<3980=3984,3981
<3981=3982
<3982=3983
<3984=3985
<3985=3987,3986
<3991=3992
<3992=4010,3993
<3993=4008,4006,4002,3996,3994
<3994=3995
<3996=3997
<3997=4001,3998
<3998=4000,3999
<4002=4003
<4003=4005,4004
<4006=4007
<4008=4009
<4010=4011
<4012=4013
<4013=4035,4034,4014
<4014=4033,4015
<4015=4031,4016
<4016=4024,4017
<4017=4018
<4018=4022,4019
<4019=4020
<4020=4021
<4022=4023
<4024=4025
<4025=4029,4026
<4026=4027
<4027=4028
<4029=4030
<4031=4032
<4036=4037
<4037=4044,4038
<4038=4042,4039
<4039=4040
<4040=4041
<4042=4043
<4045=4046
<4046=4064,4063,4047
<4047=4062,4048
<4048=4060,4049
<4049=4056,4050
<4050=4051
<4051=4055,4052
<4052=4054,4053
<4056=4057
<4057=4059,4058
<4060=4061
<4065=4066
<4066=4070,4067
<4067=4068
<4068=4069
<4070=4071
<4071=4073,4072
<4073=4075,4074
<4075=4077,4076
<4078=4079
<4079=4083,4080
<4080=4081
<4081=4082
<4083=4084
<4084=4086,4085
<4086=4088,4087
<4088=4090,4089
<4091=4096,4092
<4092=4095,4094,4093
<4096=4099,4098,4097
<4100=4112,4101
<4101=4103,4102
<4103=4104
<4104=4110,4105
<4105=4108,4106
<4106=4107
<4108=4109
<4110=4111
<4112=4113
<4113=4121,4114
<4114=4116,4115
<4116=4118,4117
<4118=4120,4119
<4122=4124,4123
<4125=4126
<4126=4128,4127
<4129=4130
<4130=4131
<4131=4136,4135,4132
<4132=4134,4133
<4137=4138
<4138=4146,4139
<4139=4144,4142,4140
<4140=4141
<4142=4143
<4144=4145
<4146=4147
<4148=4149
<4149=4161,4160,4150
<4150=4159,4151
<4151=4157,4152
<4152=4155,4153
<4153=4154
<4155=4156
<4157=4158
<4162=4163
<4163=4173,4164
<4164=4171,4169,4167,4165
<4165=4166
<4167=4168
<4169=4170
<4171=4172
<4173=4174
<4175=4204,4200,4197,4176
<4176=4181,4177
<4177=4178
<4178=4180,4179
<4181=4182
<4182=4196,4195,4183
<4183=4194,4184
<4184=4193,4185
<4185=4189,4186
<4186=4187
<4187=4188
<4189=4190
<4190=4192,4191
<4197=4199,4198
<4200=4201
<4201=4203,4202
<4204=4205
<4205=4206
<4206=4211,4210,4207
<4207=4209,4208
<4212=4213
<4213=4218,4217,4214
<4214=4216,4215
<4219=4220
<4220=4224,4221
<4221=4222
<4222=4223
<4224=4225
<4226=4227
<4227=4235,4234,4228
<4228=4233,4229
<4229=4231,4230
<4231=4232
<4236=4248,4237
<4237=4239,4238
<4239=4240
<4240=4246,4241
<4241=4244,4242
<4242=4243
<4244=4245
<4246=4247
<4248=4249
<4249=4251,4250
<4252=4253
<4253=4265,4264,4254
<4254=4263,4255
<4255=4261,4256
<4256=4259,4257
<4257=4258
<4259=4260
<4261=4262
<4321=4333,4332,4322
<4322=4329,4326,4323
<4323=4325,4324
<4326=4328,4327
<4329=4331,4330
<4333=4343,4334
<4334=4335
<4335=4341,4336
<4336=4339,4337
<4337=4338
<4339=4340
<4341=4342
<4343=4365,4361,4358,4344
<4344=4345
<4345=4346
<4346=4356,4347
<4347=4354,4352,4348
<4348=4349
<4349=4351,4350
<4352=4353
<4354=4355
<4356=4357
<4358=4360,4359
<4361=4362
<4362=4364,4363
<4365=4366
<4366=4367
<4367=4372,4371,4368
<4368=4370,4369
<4382=4388,4387,4383
<4383=4384
<4384=4386,4385
<4388=4434,4415,4403,4389
<4389=4397,4393,4390
<4390=4391
<4391=4392
<4393=4394
<4394=4396,4395
<4397=4398
<4398=4400,4399
<4400=4402,4401
<4403=4404
<4404=4414,4413,4405
<4405=4412,4406
<4406=4410,4407
<4407=4408
<4408=4409
<4410=4411
<4415=4416
<4416=4433,4417
<4417=4431,4418
<4418=4429,4423,4419
<4419=4420
<4420=4422,4421
<4423=4424
<4424=4426,4425
<4426=4428,4427
<4429=4430
<4431=4432
<4434=4435
<4435=4469,4468,4436
<4436=4467,4437
<4437=4452,4438
<4438=4450,4439
<4439=4440
<4440=4441
<4441=4449,4442
<4442=4446,4443
<4443=4445,4444
<4446=4448,4447
<4450=4451
<4452=4460,4453
<4453=4457,4454
<4454=4456,4455
<4457=4459,4458
<4460=4464,4461
<4461=4463,4462
<4464=4466,4465
<4480=4486,4485,4481
<4481=4482
<4482=4484,4483
<4486=4993,4977,4967,4960,4953,4916,4903,4889,4878,4494,4487
<4487=4488
<4488=4492,4489
<4489=4490
<4490=4491
<4492=4493
<4494=4870,4866,4863,4495
<4495=4832,4823,4810,4797,4786,4775,4761,4747,4743,4496
<4496=4734,4725,4722,4497
<4497=4713,4707,4698,4685,4672,4667,4648,4639,4620,4601,4585,4568,4545,4533,4520,4509,4498
<4498=4499
<4499=4507,4500
<4500=4505,4503,4501
<4501=4502
<4503=4504
<4505=4506
<4507=4508
<4509=4510
<4510=4518,4511
<4511=4516,4514,4512
<4512=4513
<4514=4515
<4516=4517
<4518=4519
<4520=4521
<4521=4531,4522
<4522=4529,4527,4525,4523
<4523=4524
<4525=4526
<4527=4528
<4529=4530
<4531=4532
<4533=4534
<4534=4544,4543,4535
<4535=4542,4536
<4536=4540,4537
<4537=4538
<4538=4539
<4540=4541
<4545=4546
<4546=4567,4566,4565,4547
<4547=4564,4548
<4548=4559,4554,4549
<4549=4553,4550
<4550=4552,4551
<4554=4558,4555
<4555=4557,4556
<4559=4563,4560
<4560=4562,4561
<4568=4569
<4569=4583,4570
<4570=4581,4579,4577,4573,4571
<4571=4572
<4573=4574
<4574=4576,4575
<4577=4578
<4579=4580
<4581=4582
<4583=4584
<4585=4586
<4586=4600,4599,4587
<4587=4598,4588
<4588=4596,4589
<4589=4594,4592,4590
<4590=4591
<4592=4593
<4594=4595
<4596=4597
<4601=4602
<4602=4618,4603
<4603=4616,4614,4612,4610,4608,4606,4604
<4604=4605
<4606=4607
<4608=4609
<4610=4611
<4612=4613
<4614=4615
<4616=4617
<4618=4619
<4620=4621
<4621=4637,4622
<4622=4635,4633,4631,4629,4627,4625,4623
<4623=4624
<4625=4626
<4627=4628
<4629=4630
<4631=4632
<4633=4634
<4635=4636
<4637=4638
<4639=4644,4640
<4640=4643,4642,4641
<4644=4647,4646,4645
<4648=4649
<4649=4665,4650
<4650=4663,4661,4659,4657,4655,4653,4651
<4651=4652
<4653=4654
<4655=4656
<4657=4658
<4659=4660
<4661=4662
<4663=4664
<4665=4666
<4667=4668
<4668=4671,4670,4669
<4672=4673
<4673=4677,4674
<4674=4675
<4675=4676
<4677=4678
<4678=4680,4679
<4680=4682,4681
<4682=4684,4683
<4685=4686
<4686=4690,4687
<4687=4688
<4688=4689
<4690=4691
<4691=4693,4692
<4693=4695,4694
<4695=4697,4696
<4698=4703,4699
<4699=4702,4701,4700
<4703=4706,4705,4704
<4707=4709,4708
<4709=4710
<4710=4712,4711
<4713=4714
<4714=4721,4720,4715
<4715=4719,4716
<4716=4718,4717
<4722=4724,4723
<4725=4726
<4726=4733,4727
<4727=4729,4728
<4729=4730
<4730=4732,4731
<4734=4735
<4735=4742,4736
<4736=4738,4737
<4738=4739
<4739=4741,4740
<4743=4744
<4744=4746,4745
<4747=4748
<4748=4760,4759,4749
<4749=4758,4750
<4750=4757,4751
<4751=4753,4752
<4753=4754
<4754=4756,4755
<4761=4762
<4762=4774,4773,4763
<4763=4772,4764
<4764=4768,4765
<4765=4766
<4766=4767
<4768=4769
<4769=4771,4770
<4775=4776
<4776=4784,4777
<4777=4782,4780,4778
<4778=4779
<4780=4781
<4782=4783
<4784=4785
<4786=4787
<4787=4795,4788
<4788=4793,4791,4789
<4789=4790
<4791=4792
<4793=4794
<4795=4796
<4797=4798
<4798=4802,4799
<4799=4800
<4800=4801
<4802=4803
<4803=4805,4804
<4805=4807,4806
<4807=4809,4808
<4810=4811
<4811=4815,4812
<4812=4813
<4813=4814
<4815=4816
<4816=4818,4817
<4818=4820,4819
<4820=4822,4821
<4823=4828,4824
<4824=4827,4826,4825
<4828=4831,4830,4829
<4832=4853,4833
<4833=4844,4835,4834
<4835=4836
<4836=4842,4837
<4837=4840,4838
<4838=4839
<4840=4841
<4842=4843
<4844=4845
<4845=4851,4846
<4846=4849,4847
<4847=4848
<4849=4850
<4851=4852
<4853=4854
<4854=4862,4855
<4855=4857,4856
<4857=4859,4858
<4859=4861,4860
<4863=4865,4864
<4866=4867
<4867=4869,4868
<4870=4871
<4871=4872
<4872=4877,4876,4873
<4873=4875,4874
<4878=4879
<4879=4887,4880
<4880=4885,4883,4881
<4881=4882
<4883=4884
<4885=4886
<4887=4888
<4889=4890
<4890=4902,4901,4891
<4891=4900,4892
<4892=4898,4893
<4893=4896,4894
<4894=4895
<4896=4897
<4898=4899
<4903=4904
<4904=4914,4905
<4905=4912,4910,4908,4906
<4906=4907
<4908=4909
<4910=4911
<4912=4913
<4914=4915
<4916=4945,4941,4938,4917
<4917=4922,4918
<4918=4919
<4919=4921,4920
<4922=4923
<4923=4937,4936,4924
<4924=4935,4925
<4925=4934,4926
<4926=4930,4927
<4927=4928
<4928=4929
<4930=4931
<4931=4933,4932
<4938=4940,4939
<4941=4942
<4942=4944,4943
<4945=4946
<4946=4947
<4947=4952,4951,4948
<4948=4950,4949
<4953=4954
<4954=4959,4958,4955
<4955=4957,4956
<4960=4961
<4961=4965,4962
<4962=4963
<4963=4964
<4965=4966
<4967=4968
<4968=4976,4975,4969
<4969=4974,4970
<4970=4972,4971
<4972=4973
<4977=4989,4978
<4978=4980,4979
<4980=4981
<4981=4987,4982
<4982=4985,4983
<4983=4984
<4985=4986
<4987=4988
<4989=4990
<4990=4992,4991
<4993=4994
<4994=5006,5005,4995
<4995=5004,4996
<4996=5002,4997
<4997=5000,4998
<4998=4999
<5000=5001
<5002=5003
