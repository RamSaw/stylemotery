>3	FunctionDef	GDALTransformGeolocations (GDALRasterBandH hXBand , GDALRasterBandH hYBand , GDALRasterBandH hZBand , GDALTransformerFunc \
>4	ParameterList	GDALRasterBandH hXBand , GDALRasterBandH hYBand , GDALRasterBandH hZBand , GDALTransformerFunc pfnTransformer , \
>5	Parameter	 
>6	Identifier	papszOptions
>7	ParameterType	char * *
>8	Parameter	 
>9	Identifier	pProgressArg
>10	ParameterType	void *
>11	Parameter	 
>12	Identifier	pfnProgress
>13	ParameterType	GDALProgressFunc
>14	Parameter	 
>15	Identifier	pTransformArg
>16	ParameterType	void *
>17	Parameter	 
>18	Identifier	pfnTransformer
>19	ParameterType	GDALTransformerFunc
>20	Parameter	 
>21	Identifier	hZBand
>22	ParameterType	GDALRasterBandH
>23	Parameter	 
>24	Identifier	hYBand
>25	ParameterType	GDALRasterBandH
>26	Parameter	 
>27	Identifier	hXBand
>28	ParameterType	GDALRasterBandH
>29	ReturnType	CPLErr
>30	CompoundStatement	 
>31	ReturnStatement	 
>32	Identifier	eErr
>33	ExpressionStatement	 
>34	CallExpression	CPLFree ( panSuccess )
>35	ArgumentList	panSuccess
>36	Argument	panSuccess
>37	Identifier	panSuccess
>38	Callee	CPLFree
>39	Identifier	CPLFree
>40	ExpressionStatement	 
>41	CallExpression	CPLFree ( padfZ )
>42	ArgumentList	padfZ
>43	Argument	padfZ
>44	Identifier	padfZ
>45	Callee	CPLFree
>46	Identifier	CPLFree
>47	ExpressionStatement	 
>48	CallExpression	CPLFree ( padfY )
>49	ArgumentList	padfY
>50	Argument	padfY
>51	Identifier	padfY
>52	Callee	CPLFree
>53	Identifier	CPLFree
>54	ExpressionStatement	 
>55	CallExpression	CPLFree ( padfX )
>56	ArgumentList	padfX
>57	Argument	padfX
>58	Identifier	padfX
>59	Callee	CPLFree
>60	Identifier	CPLFree
>61	ForStatement	for ( iLine = 0 ; eErr == CE_None && iLine < nYSize ; iLine ++ )
>62	CompoundStatement	 
>63	IfStatement	if ( eErr == CE_None )
>64	ExpressionStatement	 
>65	CallExpression	pfnProgress ( ( iLine + 1 ) / ( double ) nYSize , \"\" , pProgressArg )
>66	ArgumentList	( iLine + 1 ) / ( double ) nYSize
>67	Argument	pProgressArg
>68	Identifier	pProgressArg
>69	Argument	\"\"
>70	PrimaryExpression	\"\"
>71	Argument	( iLine + 1 ) / ( double ) nYSize
>72	MultiplicativeExpression	( iLine + 1 ) / ( double ) nYSize
>73	CastExpression	( double ) nYSize
>74	Identifier	nYSize
>75	CastTarget	double
>76	AdditiveExpression	iLine + 1
>77	PrimaryExpression	1
>78	Identifier	iLine
>79	Callee	pfnProgress
>80	Identifier	pfnProgress
>81	Condition	 
>82	EqualityExpression	eErr == CE_None
>83	Identifier	CE_None
>84	Identifier	eErr
>85	IfStatement	if ( eErr == CE_None && poZBand != NULL )
>86	ExpressionStatement	 
>87	AssignmentExpr	eErr = poZBand -> RasterIO ( GF_Write , 0 , iLine , nXSize , 1 , padfZ , nXSize , 1 , GDT_Float64 , 0 , \
>88	CallExpression	poZBand -> RasterIO ( GF_Write , 0 , iLine , nXSize , 1 , padfZ , nXSize , 1 , GDT_Float64 , 0 , 0 )
>89	ArgumentList	GF_Write
>90	Argument	0
>91	PrimaryExpression	0
>92	Argument	0
>93	PrimaryExpression	0
>94	Argument	GDT_Float64
>95	Identifier	GDT_Float64
>96	Argument	1
>97	PrimaryExpression	1
>98	Argument	nXSize
>99	Identifier	nXSize
>100	Argument	padfZ
>101	Identifier	padfZ
>102	Argument	1
>103	PrimaryExpression	1
>104	Argument	nXSize
>105	Identifier	nXSize
>106	Argument	iLine
>107	Identifier	iLine
>108	Argument	0
>109	PrimaryExpression	0
>110	Argument	GF_Write
>111	Identifier	GF_Write
>112	Callee	poZBand -> RasterIO
>113	PtrMemberAccess	poZBand -> RasterIO
>114	Identifier	RasterIO
>115	Identifier	poZBand
>116	Identifier	eErr
>117	Condition	 
>118	AndExpression	eErr == CE_None && poZBand != NULL
>119	EqualityExpression	poZBand != NULL
>120	Identifier	NULL
>121	Identifier	poZBand
>122	EqualityExpression	eErr == CE_None
>123	Identifier	CE_None
>124	Identifier	eErr
>125	IfStatement	if ( eErr == CE_None )
>126	ExpressionStatement	 
>127	AssignmentExpr	eErr = poYBand -> RasterIO ( GF_Write , 0 , iLine , nXSize , 1 , padfY , nXSize , 1 , GDT_Float64 , 0 , \
>128	CallExpression	poYBand -> RasterIO ( GF_Write , 0 , iLine , nXSize , 1 , padfY , nXSize , 1 , GDT_Float64 , 0 , 0 )
>129	ArgumentList	GF_Write
>130	Argument	0
>131	PrimaryExpression	0
>132	Argument	0
>133	PrimaryExpression	0
>134	Argument	GDT_Float64
>135	Identifier	GDT_Float64
>136	Argument	1
>137	PrimaryExpression	1
>138	Argument	nXSize
>139	Identifier	nXSize
>140	Argument	padfY
>141	Identifier	padfY
>142	Argument	1
>143	PrimaryExpression	1
>144	Argument	nXSize
>145	Identifier	nXSize
>146	Argument	iLine
>147	Identifier	iLine
>148	Argument	0
>149	PrimaryExpression	0
>150	Argument	GF_Write
>151	Identifier	GF_Write
>152	Callee	poYBand -> RasterIO
>153	PtrMemberAccess	poYBand -> RasterIO
>154	Identifier	RasterIO
>155	Identifier	poYBand
>156	Identifier	eErr
>157	Condition	 
>158	EqualityExpression	eErr == CE_None
>159	Identifier	CE_None
>160	Identifier	eErr
>161	IfStatement	if ( eErr == CE_None )
>162	ExpressionStatement	 
>163	AssignmentExpr	eErr = poXBand -> RasterIO ( GF_Write , 0 , iLine , nXSize , 1 , padfX , nXSize , 1 , GDT_Float64 , 0 , \
>164	CallExpression	poXBand -> RasterIO ( GF_Write , 0 , iLine , nXSize , 1 , padfX , nXSize , 1 , GDT_Float64 , 0 , 0 )
>165	ArgumentList	GF_Write
>166	Argument	0
>167	PrimaryExpression	0
>168	Argument	0
>169	PrimaryExpression	0
>170	Argument	GDT_Float64
>171	Identifier	GDT_Float64
>172	Argument	1
>173	PrimaryExpression	1
>174	Argument	nXSize
>175	Identifier	nXSize
>176	Argument	padfX
>177	Identifier	padfX
>178	Argument	1
>179	PrimaryExpression	1
>180	Argument	nXSize
>181	Identifier	nXSize
>182	Argument	iLine
>183	Identifier	iLine
>184	Argument	0
>185	PrimaryExpression	0
>186	Argument	GF_Write
>187	Identifier	GF_Write
>188	Callee	poXBand -> RasterIO
>189	PtrMemberAccess	poXBand -> RasterIO
>190	Identifier	RasterIO
>191	Identifier	poXBand
>192	Identifier	eErr
>193	Condition	 
>194	EqualityExpression	eErr == CE_None
>195	Identifier	CE_None
>196	Identifier	eErr
>197	IfStatement	if ( eErr == CE_None )
>198	CompoundStatement	 
>199	ExpressionStatement	 
>200	CallExpression	pfnTransformer ( pTransformArg , FALSE , nXSize , padfX , padfY , padfZ , panSuccess )
>201	ArgumentList	pTransformArg
>202	Argument	panSuccess
>203	Identifier	panSuccess
>204	Argument	padfZ
>205	Identifier	padfZ
>206	Argument	padfY
>207	Identifier	padfY
>208	Argument	padfX
>209	Identifier	padfX
>210	Argument	nXSize
>211	Identifier	nXSize
>212	Argument	FALSE
>213	Identifier	FALSE
>214	Argument	pTransformArg
>215	Identifier	pTransformArg
>216	Callee	pfnTransformer
>217	Identifier	pfnTransformer
>218	Condition	 
>219	EqualityExpression	eErr == CE_None
>220	Identifier	CE_None
>221	Identifier	eErr
>222	IfStatement	if ( eErr == CE_None && poZBand != NULL )
>223	ElseStatement	else
>224	ExpressionStatement	 
>225	CallExpression	memset ( padfZ , 0 , sizeof ( double ) * nXSize )
>226	ArgumentList	padfZ
>227	Argument	sizeof ( double ) * nXSize
>228	MultiplicativeExpression	sizeof ( double ) * nXSize
>229	Identifier	nXSize
>230	SizeofExpr	sizeof ( double )
>231	SizeofOperand	double
>232	Sizeof	sizeof
>233	Argument	0
>234	PrimaryExpression	0
>235	Argument	padfZ
>236	Identifier	padfZ
>237	Callee	memset
>238	Identifier	memset
>239	ExpressionStatement	 
>240	AssignmentExpr	eErr = poZBand -> RasterIO ( GF_Read , 0 , iLine , nXSize , 1 , padfZ , nXSize , 1 , GDT_Float64 , 0 , \
>241	CallExpression	poZBand -> RasterIO ( GF_Read , 0 , iLine , nXSize , 1 , padfZ , nXSize , 1 , GDT_Float64 , 0 , 0 )
>242	ArgumentList	GF_Read
>243	Argument	0
>244	PrimaryExpression	0
>245	Argument	0
>246	PrimaryExpression	0
>247	Argument	GDT_Float64
>248	Identifier	GDT_Float64
>249	Argument	1
>250	PrimaryExpression	1
>251	Argument	nXSize
>252	Identifier	nXSize
>253	Argument	padfZ
>254	Identifier	padfZ
>255	Argument	1
>256	PrimaryExpression	1
>257	Argument	nXSize
>258	Identifier	nXSize
>259	Argument	iLine
>260	Identifier	iLine
>261	Argument	0
>262	PrimaryExpression	0
>263	Argument	GF_Read
>264	Identifier	GF_Read
>265	Callee	poZBand -> RasterIO
>266	PtrMemberAccess	poZBand -> RasterIO
>267	Identifier	RasterIO
>268	Identifier	poZBand
>269	Identifier	eErr
>270	Condition	 
>271	AndExpression	eErr == CE_None && poZBand != NULL
>272	EqualityExpression	poZBand != NULL
>273	Identifier	NULL
>274	Identifier	poZBand
>275	EqualityExpression	eErr == CE_None
>276	Identifier	CE_None
>277	Identifier	eErr
>278	IfStatement	if ( eErr == CE_None )
>279	ExpressionStatement	 
>280	AssignmentExpr	eErr = poYBand -> RasterIO ( GF_Read , 0 , iLine , nXSize , 1 , padfY , nXSize , 1 , GDT_Float64 , 0 , \
>281	CallExpression	poYBand -> RasterIO ( GF_Read , 0 , iLine , nXSize , 1 , padfY , nXSize , 1 , GDT_Float64 , 0 , 0 )
>282	ArgumentList	GF_Read
>283	Argument	0
>284	PrimaryExpression	0
>285	Argument	0
>286	PrimaryExpression	0
>287	Argument	GDT_Float64
>288	Identifier	GDT_Float64
>289	Argument	1
>290	PrimaryExpression	1
>291	Argument	nXSize
>292	Identifier	nXSize
>293	Argument	padfY
>294	Identifier	padfY
>295	Argument	1
>296	PrimaryExpression	1
>297	Argument	nXSize
>298	Identifier	nXSize
>299	Argument	iLine
>300	Identifier	iLine
>301	Argument	0
>302	PrimaryExpression	0
>303	Argument	GF_Read
>304	Identifier	GF_Read
>305	Callee	poYBand -> RasterIO
>306	PtrMemberAccess	poYBand -> RasterIO
>307	Identifier	RasterIO
>308	Identifier	poYBand
>309	Identifier	eErr
>310	Condition	 
>311	EqualityExpression	eErr == CE_None
>312	Identifier	CE_None
>313	Identifier	eErr
>314	ExpressionStatement	 
>315	AssignmentExpr	eErr = poXBand -> RasterIO ( GF_Read , 0 , iLine , nXSize , 1 , padfX , nXSize , 1 , GDT_Float64 , 0 , \
>316	CallExpression	poXBand -> RasterIO ( GF_Read , 0 , iLine , nXSize , 1 , padfX , nXSize , 1 , GDT_Float64 , 0 , 0 )
>317	ArgumentList	GF_Read
>318	Argument	0
>319	PrimaryExpression	0
>320	Argument	0
>321	PrimaryExpression	0
>322	Argument	GDT_Float64
>323	Identifier	GDT_Float64
>324	Argument	1
>325	PrimaryExpression	1
>326	Argument	nXSize
>327	Identifier	nXSize
>328	Argument	padfX
>329	Identifier	padfX
>330	Argument	1
>331	PrimaryExpression	1
>332	Argument	nXSize
>333	Identifier	nXSize
>334	Argument	iLine
>335	Identifier	iLine
>336	Argument	0
>337	PrimaryExpression	0
>338	Argument	GF_Read
>339	Identifier	GF_Read
>340	Callee	poXBand -> RasterIO
>341	PtrMemberAccess	poXBand -> RasterIO
>342	Identifier	RasterIO
>343	Identifier	poXBand
>344	Identifier	eErr
>345	IncDecOp	 
>346	IncDec	++
>347	Identifier	iLine
>348	Condition	 
>349	AndExpression	eErr == CE_None && iLine < nYSize
>350	RelationalExpression	iLine < nYSize
>351	Identifier	nYSize
>352	Identifier	iLine
>353	EqualityExpression	eErr == CE_None
>354	Identifier	CE_None
>355	Identifier	eErr
>356	ForInit	 
>357	AssignmentExpr	iLine = 0
>358	PrimaryExpression	0
>359	Identifier	iLine
>360	ExpressionStatement	 
>361	CallExpression	pfnProgress ( 0.0 , \"\" , pProgressArg )
>362	ArgumentList	0.0
>363	Argument	pProgressArg
>364	Identifier	pProgressArg
>365	Argument	\"\"
>366	PrimaryExpression	\"\"
>367	Argument	0.0
>368	PrimaryExpression	0.0
>369	Callee	pfnProgress
>370	Identifier	pfnProgress
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	eErr = CE_None
>373	AssignmentExpr	eErr = CE_None
>374	Identifier	CE_None
>375	Identifier	CE_None
>376	Identifier	eErr
>377	IdentifierDeclType	CPLErr
>378	IdentifierDeclStatement	 
>379	IdentifierDecl	iLine
>380	Identifier	iLine
>381	IdentifierDeclType	int
>382	IdentifierDeclStatement	 
>383	IdentifierDecl	* panSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nXSize )
>384	AssignmentExpr	* panSuccess = ( int * ) CPLMalloc ( sizeof ( int ) * nXSize )
>385	CastExpression	( int * ) CPLMalloc ( sizeof ( int ) * nXSize )
>386	CallExpression	CPLMalloc ( sizeof ( int ) * nXSize )
>387	ArgumentList	sizeof ( int ) * nXSize
>388	Argument	sizeof ( int ) * nXSize
>389	MultiplicativeExpression	sizeof ( int ) * nXSize
>390	Identifier	nXSize
>391	SizeofExpr	sizeof ( int )
>392	SizeofOperand	int
>393	Sizeof	sizeof
>394	Callee	CPLMalloc
>395	Identifier	CPLMalloc
>396	CastTarget	int *
>397	Identifier	panSuccess
>398	Identifier	panSuccess
>399	IdentifierDeclType	int *
>400	IdentifierDeclStatement	 
>401	IdentifierDecl	* padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>402	AssignmentExpr	* padfZ = ( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>403	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>404	CallExpression	CPLMalloc ( sizeof ( double ) * nXSize )
>405	ArgumentList	sizeof ( double ) * nXSize
>406	Argument	sizeof ( double ) * nXSize
>407	MultiplicativeExpression	sizeof ( double ) * nXSize
>408	Identifier	nXSize
>409	SizeofExpr	sizeof ( double )
>410	SizeofOperand	double
>411	Sizeof	sizeof
>412	Callee	CPLMalloc
>413	Identifier	CPLMalloc
>414	CastTarget	double *
>415	Identifier	padfZ
>416	Identifier	padfZ
>417	IdentifierDeclType	double *
>418	IdentifierDeclStatement	 
>419	IdentifierDecl	* padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>420	AssignmentExpr	* padfY = ( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>421	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>422	CallExpression	CPLMalloc ( sizeof ( double ) * nXSize )
>423	ArgumentList	sizeof ( double ) * nXSize
>424	Argument	sizeof ( double ) * nXSize
>425	MultiplicativeExpression	sizeof ( double ) * nXSize
>426	Identifier	nXSize
>427	SizeofExpr	sizeof ( double )
>428	SizeofOperand	double
>429	Sizeof	sizeof
>430	Callee	CPLMalloc
>431	Identifier	CPLMalloc
>432	CastTarget	double *
>433	Identifier	padfY
>434	Identifier	padfY
>435	IdentifierDeclType	double *
>436	IdentifierDeclStatement	 
>437	IdentifierDecl	* padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>438	AssignmentExpr	* padfX = ( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>439	CastExpression	( double * ) CPLMalloc ( sizeof ( double ) * nXSize )
>440	CallExpression	CPLMalloc ( sizeof ( double ) * nXSize )
>441	ArgumentList	sizeof ( double ) * nXSize
>442	Argument	sizeof ( double ) * nXSize
>443	MultiplicativeExpression	sizeof ( double ) * nXSize
>444	Identifier	nXSize
>445	SizeofExpr	sizeof ( double )
>446	SizeofOperand	double
>447	Sizeof	sizeof
>448	Callee	CPLMalloc
>449	Identifier	CPLMalloc
>450	CastTarget	double *
>451	Identifier	padfX
>452	Identifier	padfX
>453	IdentifierDeclType	double *
>454	IfStatement	if ( nXSize != poYBand -> GetXSize ( ) || nYSize != poYBand -> GetYSize ( ) || ( poZBand != NULL && nXSize != poZBand \
>455	CompoundStatement	 
>456	ReturnStatement	 
>457	Identifier	CE_Failure
>458	ExpressionStatement	 
>459	CallExpression	CPLError ( CE_Failure , CPLE_AppDefined , \"Size of X, Y and/or Z bands do not match.\" )
>460	ArgumentList	CE_Failure
>461	Argument	\"Size of X, Y and/or Z bands do not match.\"
>462	PrimaryExpression	\"Size of X, Y and/or Z bands do not match.\"
>463	Argument	CPLE_AppDefined
>464	Identifier	CPLE_AppDefined
>465	Argument	CE_Failure
>466	Identifier	CE_Failure
>467	Callee	CPLError
>468	Identifier	CPLError
>469	Condition	 
>470	OrExpression	nXSize != poYBand -> GetXSize ( ) || nYSize != poYBand -> GetYSize ( ) || ( poZBand != NULL && nXSize != \
>471	OrExpression	nYSize != poYBand -> GetYSize ( ) || ( poZBand != NULL && nXSize != poZBand -> GetXSize ( ) ) || ( poZBand != \
>472	OrExpression	( poZBand != NULL && nXSize != poZBand -> GetXSize ( ) ) || ( poZBand != NULL && nYSize != poZBand -> \
>473	AndExpression	poZBand != NULL && nYSize != poZBand -> GetYSize ( )
>474	EqualityExpression	nYSize != poZBand -> GetYSize ( )
>475	CallExpression	poZBand -> GetYSize ( )
>476	ArgumentList	 
>477	Callee	poZBand -> GetYSize
>478	PtrMemberAccess	poZBand -> GetYSize
>479	Identifier	GetYSize
>480	Identifier	poZBand
>481	Identifier	nYSize
>482	EqualityExpression	poZBand != NULL
>483	Identifier	NULL
>484	Identifier	poZBand
>485	AndExpression	poZBand != NULL && nXSize != poZBand -> GetXSize ( )
>486	EqualityExpression	nXSize != poZBand -> GetXSize ( )
>487	CallExpression	poZBand -> GetXSize ( )
>488	ArgumentList	 
>489	Callee	poZBand -> GetXSize
>490	PtrMemberAccess	poZBand -> GetXSize
>491	Identifier	GetXSize
>492	Identifier	poZBand
>493	Identifier	nXSize
>494	EqualityExpression	poZBand != NULL
>495	Identifier	NULL
>496	Identifier	poZBand
>497	EqualityExpression	nYSize != poYBand -> GetYSize ( )
>498	CallExpression	poYBand -> GetYSize ( )
>499	ArgumentList	 
>500	Callee	poYBand -> GetYSize
>501	PtrMemberAccess	poYBand -> GetYSize
>502	Identifier	GetYSize
>503	Identifier	poYBand
>504	Identifier	nYSize
>505	EqualityExpression	nXSize != poYBand -> GetXSize ( )
>506	CallExpression	poYBand -> GetXSize ( )
>507	ArgumentList	 
>508	Callee	poYBand -> GetXSize
>509	PtrMemberAccess	poYBand -> GetXSize
>510	Identifier	GetXSize
>511	Identifier	poYBand
>512	Identifier	nXSize
>513	IdentifierDeclStatement	 
>514	IdentifierDecl	nYSize = poXBand -> GetYSize ( )
>515	AssignmentExpr	nYSize = poXBand -> GetYSize ( )
>516	CallExpression	poXBand -> GetYSize ( )
>517	ArgumentList	 
>518	Callee	poXBand -> GetYSize
>519	PtrMemberAccess	poXBand -> GetYSize
>520	Identifier	GetYSize
>521	Identifier	poXBand
>522	Identifier	nYSize
>523	Identifier	nYSize
>524	IdentifierDeclType	int
>525	IdentifierDeclStatement	 
>526	IdentifierDecl	nXSize = poXBand -> GetXSize ( )
>527	AssignmentExpr	nXSize = poXBand -> GetXSize ( )
>528	CallExpression	poXBand -> GetXSize ( )
>529	ArgumentList	 
>530	Callee	poXBand -> GetXSize
>531	PtrMemberAccess	poXBand -> GetXSize
>532	Identifier	GetXSize
>533	Identifier	poXBand
>534	Identifier	nXSize
>535	Identifier	nXSize
>536	IdentifierDeclType	int
>537	IdentifierDeclStatement	 
>538	IdentifierDecl	* poZBand = ( GDALRasterBand * ) hZBand
>539	AssignmentExpr	* poZBand = ( GDALRasterBand * ) hZBand
>540	CastExpression	( GDALRasterBand * ) hZBand
>541	Identifier	hZBand
>542	CastTarget	GDALRasterBand *
>543	Identifier	poZBand
>544	Identifier	poZBand
>545	IdentifierDeclType	GDALRasterBand *
>546	IdentifierDeclStatement	 
>547	IdentifierDecl	* poYBand = ( GDALRasterBand * ) hYBand
>548	AssignmentExpr	* poYBand = ( GDALRasterBand * ) hYBand
>549	CastExpression	( GDALRasterBand * ) hYBand
>550	Identifier	hYBand
>551	CastTarget	GDALRasterBand *
>552	Identifier	poYBand
>553	Identifier	poYBand
>554	IdentifierDeclType	GDALRasterBand *
>555	IdentifierDeclStatement	 
>556	IdentifierDecl	* poXBand = ( GDALRasterBand * ) hXBand
>557	AssignmentExpr	* poXBand = ( GDALRasterBand * ) hXBand
>558	CastExpression	( GDALRasterBand * ) hXBand
>559	Identifier	hXBand
>560	CastTarget	GDALRasterBand *
>561	Identifier	poXBand
>562	Identifier	poXBand
>563	IdentifierDeclType	GDALRasterBand *
>564	IfStatement	if ( pfnProgress == NULL )
>565	ExpressionStatement	 
>566	AssignmentExpr	pfnProgress = GDALDummyProgress
>567	Identifier	GDALDummyProgress
>568	Identifier	pfnProgress
>569	Condition	 
>570	EqualityExpression	pfnProgress == NULL
>571	Identifier	NULL
>572	Identifier	pfnProgress
>573	ExpressionStatement	 
>574	CallExpression	VALIDATE_POINTER1 ( hYBand , \"GDALTransformGeolocations\" , CE_Failure )
>575	ArgumentList	hYBand
>576	Argument	CE_Failure
>577	Identifier	CE_Failure
>578	Argument	\"GDALTransformGeolocations\"
>579	PrimaryExpression	\"GDALTransformGeolocations\"
>580	Argument	hYBand
>581	Identifier	hYBand
>582	Callee	VALIDATE_POINTER1
>583	Identifier	VALIDATE_POINTER1
>584	ExpressionStatement	 
>585	CallExpression	VALIDATE_POINTER1 ( hXBand , \"GDALTransformGeolocations\" , CE_Failure )
>586	ArgumentList	hXBand
>587	Argument	CE_Failure
>588	Identifier	CE_Failure
>589	Argument	\"GDALTransformGeolocations\"
>590	PrimaryExpression	\"GDALTransformGeolocations\"
>591	Argument	hXBand
>592	Identifier	hXBand
>593	Callee	VALIDATE_POINTER1
>594	Identifier	VALIDATE_POINTER1
<3=30,29,4
<4=26,23,20,17,14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<17=19,18
<20=22,21
<23=25,24
<26=28,27
<30=584,573,564,555,546,537,525,513,454,436,418,400,382,378,371,360,61,54,47,40,33,31
<31=32
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<41=45,42
<42=43
<43=44
<45=46
<47=48
<48=52,49
<49=50
<50=51
<52=53
<54=55
<55=59,56
<56=57
<57=58
<59=60
<61=356,348,345,62
<62=314,278,222,197,161,125,85,63
<63=81,64
<64=65
<65=79,66
<66=71,69,67
<67=68
<69=70
<71=72
<72=76,73
<73=75,74
<76=78,77
<79=80
<81=82
<82=84,83
<85=117,86
<86=87
<87=116,88
<88=112,89
<89=110,108,106,104,102,100,98,96,94,92,90
<90=91
<92=93
<94=95
<96=97
<98=99
<100=101
<102=103
<104=105
<106=107
<108=109
<110=111
<112=113
<113=115,114
<117=118
<118=122,119
<119=121,120
<122=124,123
<125=157,126
<126=127
<127=156,128
<128=152,129
<129=150,148,146,144,142,140,138,136,134,132,130
<130=131
<132=133
<134=135
<136=137
<138=139
<140=141
<142=143
<144=145
<146=147
<148=149
<150=151
<152=153
<153=155,154
<157=158
<158=160,159
<161=193,162
<162=163
<163=192,164
<164=188,165
<165=186,184,182,180,178,176,174,172,170,168,166
<166=167
<168=169
<170=171
<172=173
<174=175
<176=177
<178=179
<180=181
<182=183
<184=185
<186=187
<188=189
<189=191,190
<193=194
<194=196,195
<197=218,198
<198=199
<199=200
<200=216,201
<201=214,212,210,208,206,204,202
<202=203
<204=205
<206=207
<208=209
<210=211
<212=213
<214=215
<216=217
<218=219
<219=221,220
<222=270,239,223
<223=224
<224=225
<225=237,226
<226=235,233,227
<227=228
<228=230,229
<230=232,231
<233=234
<235=236
<237=238
<239=240
<240=269,241
<241=265,242
<242=263,261,259,257,255,253,251,249,247,245,243
<243=244
<245=246
<247=248
<249=250
<251=252
<253=254
<255=256
<257=258
<259=260
<261=262
<263=264
<265=266
<266=268,267
<270=271
<271=275,272
<272=274,273
<275=277,276
<278=310,279
<279=280
<280=309,281
<281=305,282
<282=303,301,299,297,295,293,291,289,287,285,283
<283=284
<285=286
<287=288
<289=290
<291=292
<293=294
<295=296
<297=298
<299=300
<301=302
<303=304
<305=306
<306=308,307
<310=311
<311=313,312
<314=315
<315=344,316
<316=340,317
<317=338,336,334,332,330,328,326,324,322,320,318
<318=319
<320=321
<322=323
<324=325
<326=327
<328=329
<330=331
<332=333
<334=335
<336=337
<338=339
<340=341
<341=343,342
<345=347,346
<348=349
<349=353,350
<350=352,351
<353=355,354
<356=357
<357=359,358
<360=361
<361=369,362
<362=367,365,363
<363=364
<365=366
<367=368
<369=370
<371=372
<372=377,376,373
<373=375,374
<378=379
<379=381,380
<382=383
<383=399,398,384
<384=397,385
<385=396,386
<386=394,387
<387=388
<388=389
<389=391,390
<391=393,392
<394=395
<400=401
<401=417,416,402
<402=415,403
<403=414,404
<404=412,405
<405=406
<406=407
<407=409,408
<409=411,410
<412=413
<418=419
<419=435,434,420
<420=433,421
<421=432,422
<422=430,423
<423=424
<424=425
<425=427,426
<427=429,428
<430=431
<436=437
<437=453,452,438
<438=451,439
<439=450,440
<440=448,441
<441=442
<442=443
<443=445,444
<445=447,446
<448=449
<454=469,455
<455=458,456
<456=457
<458=459
<459=467,460
<460=465,463,461
<461=462
<463=464
<465=466
<467=468
<469=470
<470=505,471
<471=497,472
<472=485,473
<473=482,474
<474=481,475
<475=477,476
<477=478
<478=480,479
<482=484,483
<485=494,486
<486=493,487
<487=489,488
<489=490
<490=492,491
<494=496,495
<497=504,498
<498=500,499
<500=501
<501=503,502
<505=512,506
<506=508,507
<508=509
<509=511,510
<513=514
<514=524,523,515
<515=522,516
<516=518,517
<518=519
<519=521,520
<525=526
<526=536,535,527
<527=534,528
<528=530,529
<530=531
<531=533,532
<537=538
<538=545,544,539
<539=543,540
<540=542,541
<546=547
<547=554,553,548
<548=552,549
<549=551,550
<555=556
<556=563,562,557
<557=561,558
<558=560,559
<564=569,565
<565=566
<566=568,567
<569=570
<570=572,571
<573=574
<574=582,575
<575=580,578,576
<576=577
<578=579
<580=581
<582=583
<584=585
<585=593,586
<586=591,589,587
<587=588
<589=590
<591=592
<593=594
