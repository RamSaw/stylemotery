>23	FunctionDef	is_letter (wchar_t c)
>24	ParameterList	wchar_t c
>25	Parameter	 
>26	Identifier	c
>27	ParameterType	wchar_t
>28	ReturnType	inline bool
>29	CompoundStatement	 
>30	ExpressionStatement	 
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	Statement	 
>41	Statement	 
>42	Statement	 
>43	Statement	 
>44	Statement	 
>45	Statement	 
>46	Statement	 
>47	Statement	 
>48	Statement	 
>49	Statement	 
>50	Statement	 
>51	Statement	 
>52	Statement	 
>53	Statement	 
>54	Statement	 
>73	FunctionDef	is_separator (fs 
>74	ParameterList	fs 
>75	Parameter	 
>76	Identifier	c
>77	ParameterType	fs 
>78	ReturnType	inline bool
>79	CompoundStatement	 
>80	IdentifierDeclStatement	 
>81	IdentifierDecl	endif
>82	Identifier	endif
>83	IdentifierDeclType	path 
>84	Statement	 
>85	Statement	 
>86	Statement	 
>87	Statement	 
>88	Statement	 
>89	Statement	 
>90	Statement	 
>91	Statement	 
>92	Statement	 
>104	FunctionDef	operator /= (const path & p)
>105	ParameterList	const path & p
>106	Parameter	 
>107	Identifier	p
>108	ParameterType	const path &
>109	CompoundStatement	 
>110	ReturnStatement	 
>111	UnaryOp	* this
>112	Identifier	this
>113	UnaryOperator	*
>114	IfStatement	if ( this == & p )
>115	ElseStatement	else
>116	CompoundStatement	 
>117	ExpressionStatement	 
>118	AssignmentExpr	m_pathname += p . m_pathname
>119	MemberAccess	p . m_pathname
>120	Identifier	m_pathname
>121	Identifier	p
>122	Identifier	m_pathname
>123	IfStatement	if ( ! is_separator ( * p . m_pathname . begin ( ) ) )
>124	ExpressionStatement	 
>125	CallExpression	m_append_separator_if_needed ( )
>126	ArgumentList	 
>127	Callee	m_append_separator_if_needed
>128	Identifier	m_append_separator_if_needed
>129	Condition	 
>130	UnaryOp	! is_separator ( * p . m_pathname . begin ( ) )
>131	CallExpression	is_separator ( * p . m_pathname . begin ( ) )
>132	ArgumentList	* p . m_pathname . begin ( )
>133	Argument	* p . m_pathname . begin ( )
>134	UnaryOp	* p . m_pathname . begin ( )
>135	CallExpression	p . m_pathname . begin ( )
>136	ArgumentList	 
>137	Callee	p . m_pathname . begin
>138	MemberAccess	p . m_pathname . begin
>139	Identifier	begin
>140	MemberAccess	p . m_pathname
>141	Identifier	m_pathname
>142	Identifier	p
>143	UnaryOperator	*
>144	Callee	is_separator
>145	Identifier	is_separator
>146	UnaryOperator	!
>147	CompoundStatement	 
>148	ExpressionStatement	 
>149	AssignmentExpr	m_pathname += rhs . m_pathname
>150	MemberAccess	rhs . m_pathname
>151	Identifier	m_pathname
>152	Identifier	rhs
>153	Identifier	m_pathname
>154	IfStatement	if ( ! is_separator ( rhs . m_pathname [ 0 ] ) )
>155	ExpressionStatement	 
>156	CallExpression	m_append_separator_if_needed ( )
>157	ArgumentList	 
>158	Callee	m_append_separator_if_needed
>159	Identifier	m_append_separator_if_needed
>160	Condition	 
>161	UnaryOp	! is_separator ( rhs . m_pathname [ 0 ] )
>162	CallExpression	is_separator ( rhs . m_pathname [ 0 ] )
>163	ArgumentList	rhs . m_pathname [ 0 ]
>164	Argument	rhs . m_pathname [ 0 ]
>165	ArrayIndexing	rhs . m_pathname [ 0 ]
>166	PrimaryExpression	0
>167	MemberAccess	rhs . m_pathname
>168	Identifier	m_pathname
>169	Identifier	rhs
>170	Callee	is_separator
>171	Identifier	is_separator
>172	UnaryOperator	!
>173	IdentifierDeclStatement	 
>174	IdentifierDecl	rhs ( p )
>175	Identifier	p
>176	Identifier	rhs
>177	IdentifierDeclType	path
>178	Condition	 
>179	EqualityExpression	this == & p
>180	UnaryOp	& p
>181	Identifier	p
>182	UnaryOperator	&
>183	Identifier	this
>184	IfStatement	if ( p . empty ( ) )
>185	ReturnStatement	 
>186	UnaryOp	* this
>187	Identifier	this
>188	UnaryOperator	*
>189	Condition	 
>190	CallExpression	p . empty ( )
>191	ArgumentList	 
>192	Callee	p . empty
>193	MemberAccess	p . empty
>194	Identifier	empty
>195	Identifier	p
>216	FunctionDef	operator /= (const value_type * ptr)
>217	ParameterList	const value_type * ptr
>218	Parameter	 
>219	Identifier	ptr
>220	ParameterType	const value_type *
>221	CompoundStatement	 
>222	ReturnStatement	 
>223	UnaryOp	* this
>224	Identifier	this
>225	UnaryOperator	*
>226	IfStatement	if ( ptr >= m_pathname . data ( ) && ptr < m_pathname . data ( ) + m_pathname . size ( ) )
>227	ElseStatement	else
>228	CompoundStatement	 
>229	ExpressionStatement	 
>230	AssignmentExpr	m_pathname += ptr
>231	Identifier	ptr
>232	Identifier	m_pathname
>233	IfStatement	if ( ! is_separator ( * ptr ) )
>234	ExpressionStatement	 
>235	CallExpression	m_append_separator_if_needed ( )
>236	ArgumentList	 
>237	Callee	m_append_separator_if_needed
>238	Identifier	m_append_separator_if_needed
>239	Condition	 
>240	UnaryOp	! is_separator ( * ptr )
>241	CallExpression	is_separator ( * ptr )
>242	ArgumentList	* ptr
>243	Argument	* ptr
>244	UnaryOp	* ptr
>245	Identifier	ptr
>246	UnaryOperator	*
>247	Callee	is_separator
>248	Identifier	is_separator
>249	UnaryOperator	!
>250	CompoundStatement	 
>251	ExpressionStatement	 
>252	AssignmentExpr	m_pathname += rhs . m_pathname
>253	MemberAccess	rhs . m_pathname
>254	Identifier	m_pathname
>255	Identifier	rhs
>256	Identifier	m_pathname
>257	IfStatement	if ( ! is_separator ( rhs . m_pathname [ 0 ] ) )
>258	ExpressionStatement	 
>259	CallExpression	m_append_separator_if_needed ( )
>260	ArgumentList	 
>261	Callee	m_append_separator_if_needed
>262	Identifier	m_append_separator_if_needed
>263	Condition	 
>264	UnaryOp	! is_separator ( rhs . m_pathname [ 0 ] )
>265	CallExpression	is_separator ( rhs . m_pathname [ 0 ] )
>266	ArgumentList	rhs . m_pathname [ 0 ]
>267	Argument	rhs . m_pathname [ 0 ]
>268	ArrayIndexing	rhs . m_pathname [ 0 ]
>269	PrimaryExpression	0
>270	MemberAccess	rhs . m_pathname
>271	Identifier	m_pathname
>272	Identifier	rhs
>273	Callee	is_separator
>274	Identifier	is_separator
>275	UnaryOperator	!
>276	IdentifierDeclStatement	 
>277	IdentifierDecl	rhs ( ptr )
>278	Identifier	ptr
>279	Identifier	rhs
>280	IdentifierDeclType	path
>281	Condition	 
>282	AndExpression	ptr >= m_pathname . data ( ) && ptr < m_pathname . data ( ) + m_pathname . size ( )
>283	RelationalExpression	ptr < m_pathname . data ( ) + m_pathname . size ( )
>284	AdditiveExpression	m_pathname . data ( ) + m_pathname . size ( )
>285	CallExpression	m_pathname . size ( )
>286	ArgumentList	 
>287	Callee	m_pathname . size
>288	MemberAccess	m_pathname . size
>289	Identifier	size
>290	Identifier	m_pathname
>291	CallExpression	m_pathname . data ( )
>292	ArgumentList	 
>293	Callee	m_pathname . data
>294	MemberAccess	m_pathname . data
>295	Identifier	data
>296	Identifier	m_pathname
>297	Identifier	ptr
>298	RelationalExpression	ptr >= m_pathname . data ( )
>299	CallExpression	m_pathname . data ( )
>300	ArgumentList	 
>301	Callee	m_pathname . data
>302	MemberAccess	m_pathname . data
>303	Identifier	data
>304	Identifier	m_pathname
>305	Identifier	ptr
>306	IfStatement	if ( ! * ptr )
>307	ReturnStatement	 
>308	UnaryOp	* this
>309	Identifier	this
>310	UnaryOperator	*
>311	Condition	 
>312	UnaryOp	! * ptr
>313	UnaryOp	* ptr
>314	Identifier	ptr
>315	UnaryOperator	*
>316	UnaryOperator	!
>332	FunctionDef	path 
>333	ParameterList	const codecvt_type & cvt
>334	Parameter	 
>335	Identifier	cvt
>336	ParameterType	const codecvt_type &
>337	ReturnType	ifdef BOOST_WINDOWS_API std 
>338	CompoundStatement	 
>339	ReturnStatement	 
>340	CallExpression	tmp . string ( cvt )
>341	ArgumentList	cvt
>342	Argument	cvt
>343	Identifier	cvt
>344	Callee	tmp . string
>345	MemberAccess	tmp . string
>346	Identifier	string
>347	Identifier	tmp
>348	ExpressionStatement	 
>349	Statement	 
>350	Statement	 
>351	Statement	 
>352	Statement	 
>353	Statement	 
>354	Statement	 
>355	Statement	 
>356	Statement	 
>357	Statement	 
>358	Statement	 
>359	Statement	 
>360	Statement	 
>361	Statement	 
>362	Statement	 
>363	Statement	 
>364	Statement	 
>365	Statement	 
>366	Statement	 
>367	Statement	 
>368	Statement	 
>369	Statement	 
>370	Statement	 
>371	Statement	 
>372	Statement	 
>373	Statement	 
>374	Statement	 
>375	IdentifierDeclStatement	 
>376	IdentifierDecl	tmp ( * this )
>377	UnaryOp	* this
>378	Identifier	this
>379	UnaryOperator	*
>380	Identifier	tmp
>381	IdentifierDeclType	path
>389	FunctionDef	path 
>390	ParameterList	 
>391	ReturnType	std 
>392	CompoundStatement	 
>393	ReturnStatement	 
>394	CallExpression	tmp . wstring ( )
>395	ArgumentList	 
>396	Callee	tmp . wstring
>397	MemberAccess	tmp . wstring
>398	Identifier	wstring
>399	Identifier	tmp
>400	ExpressionStatement	 
>401	Statement	 
>402	Statement	 
>403	Statement	 
>404	Statement	 
>405	Statement	 
>406	Statement	 
>407	Statement	 
>408	Statement	 
>409	Statement	 
>410	Statement	 
>411	Statement	 
>412	Statement	 
>413	Statement	 
>414	Statement	 
>415	Statement	 
>416	Statement	 
>417	Statement	 
>418	Statement	 
>419	Statement	 
>420	Statement	 
>421	Statement	 
>422	Statement	 
>423	Statement	 
>424	Statement	 
>425	Statement	 
>426	Statement	 
>427	IdentifierDeclStatement	 
>428	IdentifierDecl	tmp ( * this )
>429	UnaryOp	* this
>430	Identifier	this
>431	UnaryOperator	*
>432	Identifier	tmp
>433	IdentifierDeclType	path
>440	FunctionDef	path 
>441	ParameterList	 
>442	ReturnType	endif path 
>443	CompoundStatement	 
>444	ReturnStatement	 
>445	PrimaryExpression	0
>446	CompoundStatement	 
>447	ReturnStatement	 
>448	Identifier	tmp
>449	ExpressionStatement	 
>450	AssignmentExpr	m_pathname += preferred_separator
>451	Identifier	preferred_separator
>452	Identifier	m_pathname
>453	IdentifierDeclStatement	 
>454	IdentifierDecl	tmp ( m_pathname . size ( ) )
>455	CallExpression	m_pathname . size ( )
>456	ArgumentList	 
>457	Callee	m_pathname . size
>458	MemberAccess	m_pathname . size
>459	Identifier	size
>460	Identifier	m_pathname
>461	Identifier	tmp
>462	IdentifierDeclType	string_type 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	Statement	 
>471	Statement	 
>472	Statement	 
>473	Statement	 
>474	Statement	 
>475	Statement	 
>476	Statement	 
>477	Statement	 
>478	Statement	 
>479	Statement	 
>480	Statement	 
>481	Statement	 
>482	Statement	 
>483	Statement	 
>484	Statement	 
>485	Statement	 
>486	Statement	 
>487	Statement	 
>488	Statement	 
>489	Statement	 
>490	Statement	 
>491	Statement	 
>492	Statement	 
>493	Statement	 
>494	Statement	 
>495	Statement	 
>496	Statement	 
>497	Statement	 
>498	Statement	 
>499	Statement	 
>500	Statement	 
>501	Statement	 
>502	Statement	 
>509	FunctionDef	path 
>510	ParameterList	string_type 
>511	Parameter	 
>512	Identifier	sep_pos
>513	ParameterType	string_type 
>514	ReturnType	void
>515	CompoundStatement	 
>516	CompoundStatement	 
>517	ExpressionStatement	 
>518	CallExpression	m_pathname . erase ( sep_pos , 1 )
>519	ArgumentList	sep_pos
>520	Argument	1
>521	PrimaryExpression	1
>522	Argument	sep_pos
>523	Identifier	sep_pos
>524	Callee	m_pathname . erase
>525	MemberAccess	m_pathname . erase
>526	Identifier	erase
>527	Identifier	m_pathname
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>533	Statement	 
>534	Statement	 
>535	Statement	 
>536	Statement	 
>537	Statement	 
>538	Statement	 
>539	Statement	 
>540	Statement	 
>541	Statement	 
>542	Statement	 
>543	Statement	 
>544	Statement	 
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	Statement	 
>553	Statement	 
>554	Statement	 
>555	Statement	 
>556	Statement	 
>557	Statement	 
>558	Statement	 
>559	Statement	 
>560	Statement	 
>561	Statement	 
>562	Statement	 
>568	FunctionDef	path 
>569	ParameterList	 
>570	ReturnType	ifdef BOOST_WINDOWS_API path &
>571	CompoundStatement	 
>572	ReturnStatement	 
>573	UnaryOp	* this
>574	Identifier	this
>575	UnaryOperator	*
>576	ExpressionStatement	 
>577	Statement	 
>578	Statement	 
>579	Statement	 
>580	Statement	 
>581	Statement	 
>582	Statement	 
>583	Statement	 
>584	Statement	 
>585	Statement	 
>586	Statement	 
>587	Statement	 
>588	Statement	 
>589	Statement	 
>590	Statement	 
>591	Statement	 
>592	Statement	 
>593	Statement	 
>594	Statement	 
>595	Statement	 
>596	Statement	 
>597	Statement	 
>598	Statement	 
>604	FunctionDef	path 
>605	ParameterList	 
>606	ReturnType	endif path &
>607	CompoundStatement	 
>608	ReturnStatement	 
>609	UnaryOp	* this
>610	Identifier	this
>611	UnaryOperator	*
>612	ExpressionStatement	 
>613	CallExpression	m_pathname . erase ( m_parent_path_end ( ) )
>614	ArgumentList	m_parent_path_end ( )
>615	Argument	m_parent_path_end ( )
>616	CallExpression	m_parent_path_end ( )
>617	ArgumentList	 
>618	Callee	m_parent_path_end
>619	Identifier	m_parent_path_end
>620	Callee	m_pathname . erase
>621	MemberAccess	m_pathname . erase
>622	Identifier	erase
>623	Identifier	m_pathname
>631	FunctionDef	path 
>632	ParameterList	const path & new_extension
>633	Parameter	 
>634	Identifier	new_extension
>635	ParameterType	const path &
>636	ReturnType	path &
>637	CompoundStatement	 
>638	ReturnStatement	 
>639	UnaryOp	* this
>640	Identifier	this
>641	UnaryOperator	*
>642	IfStatement	if ( ! new_extension . empty ( ) )
>643	CompoundStatement	 
>644	ExpressionStatement	 
>645	CallExpression	m_pathname . append ( new_extension . m_pathname )
>646	ArgumentList	new_extension . m_pathname
>647	Argument	new_extension . m_pathname
>648	MemberAccess	new_extension . m_pathname
>649	Identifier	m_pathname
>650	Identifier	new_extension
>651	Callee	m_pathname . append
>652	MemberAccess	m_pathname . append
>653	Identifier	append
>654	Identifier	m_pathname
>655	IfStatement	if ( new_extension . m_pathname [ 0 ] != dot )
>656	ExpressionStatement	 
>657	CallExpression	m_pathname . push_back ( dot )
>658	ArgumentList	dot
>659	Argument	dot
>660	Identifier	dot
>661	Callee	m_pathname . push_back
>662	MemberAccess	m_pathname . push_back
>663	Identifier	push_back
>664	Identifier	m_pathname
>665	Condition	 
>666	EqualityExpression	new_extension . m_pathname [ 0 ] != dot
>667	Identifier	dot
>668	ArrayIndexing	new_extension . m_pathname [ 0 ]
>669	PrimaryExpression	0
>670	MemberAccess	new_extension . m_pathname
>671	Identifier	m_pathname
>672	Identifier	new_extension
>673	Condition	 
>674	UnaryOp	! new_extension . empty ( )
>675	CallExpression	new_extension . empty ( )
>676	ArgumentList	 
>677	Callee	new_extension . empty
>678	MemberAccess	new_extension . empty
>679	Identifier	empty
>680	Identifier	new_extension
>681	UnaryOperator	!
>682	ExpressionStatement	 
>683	CallExpression	m_pathname . erase ( m_pathname . size ( ) - extension ( ) . m_pathname . size ( ) )
>684	ArgumentList	m_pathname . size ( ) - extension ( ) . m_pathname . size ( )
>685	Argument	m_pathname . size ( ) - extension ( ) . m_pathname . size ( )
>686	AdditiveExpression	m_pathname . size ( ) - extension ( ) . m_pathname . size ( )
>687	CallExpression	extension ( ) . m_pathname . size ( )
>688	ArgumentList	 
>689	Callee	extension ( ) . m_pathname . size
>690	MemberAccess	extension ( ) . m_pathname . size
>691	Identifier	size
>692	MemberAccess	extension ( ) . m_pathname
>693	Identifier	m_pathname
>694	CallExpression	extension ( )
>695	ArgumentList	 
>696	Callee	extension
>697	Identifier	extension
>698	CallExpression	m_pathname . size ( )
>699	ArgumentList	 
>700	Callee	m_pathname . size
>701	MemberAccess	m_pathname . size
>702	Identifier	size
>703	Identifier	m_pathname
>704	Callee	m_pathname . erase
>705	MemberAccess	m_pathname . erase
>706	Identifier	erase
>707	Identifier	m_pathname
>724	FunctionDef	path 
>725	ParameterList	 
>726	ReturnType	path
>727	CompoundStatement	 
>728	ReturnStatement	 
>729	Identifier	temp
>730	IfStatement	if ( ! root_directory ( ) . empty ( ) )
>731	ExpressionStatement	 
>732	AssignmentExpr	temp . m_pathname += root_directory ( ) . c_str ( )
>733	CallExpression	root_directory ( ) . c_str ( )
>734	ArgumentList	 
>735	Callee	root_directory ( ) . c_str
>736	MemberAccess	root_directory ( ) . c_str
>737	Identifier	c_str
>738	CallExpression	root_directory ( )
>739	ArgumentList	 
>740	Callee	root_directory
>741	Identifier	root_directory
>742	MemberAccess	temp . m_pathname
>743	Identifier	m_pathname
>744	Identifier	temp
>745	Condition	 
>746	UnaryOp	! root_directory ( ) . empty ( )
>747	CallExpression	root_directory ( ) . empty ( )
>748	ArgumentList	 
>749	Callee	root_directory ( ) . empty
>750	MemberAccess	root_directory ( ) . empty
>751	Identifier	empty
>752	CallExpression	root_directory ( )
>753	ArgumentList	 
>754	Callee	root_directory
>755	Identifier	root_directory
>756	UnaryOperator	!
>757	IdentifierDeclStatement	 
>758	IdentifierDecl	temp ( root_name ( ) )
>759	CallExpression	root_name ( )
>760	ArgumentList	 
>761	Callee	root_name
>762	Identifier	root_name
>763	Identifier	temp
>764	IdentifierDeclType	path
>773	FunctionDef	path 
>774	ParameterList	 
>775	ReturnType	path
>776	CompoundStatement	 
>777	ExpressionStatement	 
>778	CallExpression	path ( )
>779	ArgumentList	 
>780	Callee	path
>781	Identifier	path
>782	Label	 
>783	Identifier	m_element
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	Statement	 
>801	Statement	 
>802	Statement	 
>803	Statement	 
>804	Statement	 
>805	Statement	 
>806	Statement	 
>807	Statement	 
>808	Statement	 
>809	Statement	 
>810	Statement	 
>811	Statement	 
>812	Statement	 
>813	Statement	 
>814	Statement	 
>815	Statement	 
>816	Statement	 
>817	Statement	 
>818	Statement	 
>819	Statement	 
>820	Statement	 
>821	Statement	 
>822	Statement	 
>823	Statement	 
>824	Statement	 
>825	Statement	 
>826	Statement	 
>827	Statement	 
>828	Statement	 
>829	Statement	 
>830	Statement	 
>831	Statement	 
>832	Statement	 
>833	Statement	 
>834	Statement	 
>835	Statement	 
>836	Statement	 
>837	Statement	 
>838	Statement	 
>839	Statement	 
>840	Statement	 
>841	Statement	 
>842	Statement	 
>843	Statement	 
>844	Statement	 
>845	Statement	 
>846	Statement	 
>847	Statement	 
>848	Statement	 
>849	Statement	 
>850	Statement	 
>851	Statement	 
>852	Statement	 
>853	Statement	 
>854	Statement	 
>855	Statement	 
>856	Statement	 
>857	Statement	 
>858	Statement	 
>859	Statement	 
>860	Statement	 
>861	Statement	 
>862	Statement	 
>863	IdentifierDeclStatement	 
>864	IdentifierDecl	itr ( begin ( ) )
>865	CallExpression	begin ( )
>866	ArgumentList	 
>867	Callee	begin
>868	Identifier	begin
>869	Identifier	itr
>870	IdentifierDeclType	iterator
>875	FunctionDef	path 
>876	ParameterList	 
>877	ReturnType	path
>878	CompoundStatement	 
>879	ReturnStatement	 
>880	ConditionalExpression	pos == string_type 
>881	CallExpression	path ( m_pathname . c_str ( ) + pos , m_pathname . c_str ( ) + pos + 1 )
>882	ArgumentList	m_pathname . c_str ( ) + pos
>883	Argument	m_pathname . c_str ( ) + pos + 1
>884	AdditiveExpression	m_pathname . c_str ( ) + pos + 1
>885	AdditiveExpression	pos + 1
>886	PrimaryExpression	1
>887	Identifier	pos
>888	CallExpression	m_pathname . c_str ( )
>889	ArgumentList	 
>890	Callee	m_pathname . c_str
>891	MemberAccess	m_pathname . c_str
>892	Identifier	c_str
>893	Identifier	m_pathname
>894	Argument	m_pathname . c_str ( ) + pos
>895	AdditiveExpression	m_pathname . c_str ( ) + pos
>896	Identifier	pos
>897	CallExpression	m_pathname . c_str ( )
>898	ArgumentList	 
>899	Callee	m_pathname . c_str
>900	MemberAccess	m_pathname . c_str
>901	Identifier	c_str
>902	Identifier	m_pathname
>903	Callee	path
>904	Identifier	path
>905	CallExpression	path ( )
>906	ArgumentList	 
>907	Callee	path
>908	Identifier	path
>909	Condition	pos == string_type 
>910	EqualityExpression	pos == string_type 
>911	Identifier	string_type 
>912	Identifier	pos
>913	IdentifierDeclStatement	 
>914	IdentifierDecl	pos ( root_directory_start ( m_pathname , m_pathname . size ( ) ) )
>915	CallExpression	root_directory_start ( m_pathname , m_pathname . size ( ) )
>916	ArgumentList	m_pathname
>917	Argument	m_pathname . size ( )
>918	CallExpression	m_pathname . size ( )
>919	ArgumentList	 
>920	Callee	m_pathname . size
>921	MemberAccess	m_pathname . size
>922	Identifier	size
>923	Identifier	m_pathname
>924	Argument	m_pathname
>925	Identifier	m_pathname
>926	Callee	root_directory_start
>927	Identifier	root_directory_start
>928	Identifier	pos
>929	IdentifierDeclType	size_type
>939	FunctionDef	path 
>940	ParameterList	 
>941	ReturnType	path
>942	CompoundStatement	 
>943	ReturnStatement	 
>944	CallExpression	path ( m_pathname . c_str ( ) + itr . m_pos )
>945	ArgumentList	m_pathname . c_str ( ) + itr . m_pos
>946	Argument	m_pathname . c_str ( ) + itr . m_pos
>947	AdditiveExpression	m_pathname . c_str ( ) + itr . m_pos
>948	MemberAccess	itr . m_pos
>949	Identifier	m_pos
>950	Identifier	itr
>951	CallExpression	m_pathname . c_str ( )
>952	ArgumentList	 
>953	Callee	m_pathname . c_str
>954	MemberAccess	m_pathname . c_str
>955	Identifier	c_str
>956	Identifier	m_pathname
>957	Callee	path
>958	Identifier	path
>959	CompoundStatement	 
>960	Statement	 
>961	Statement	 
>962	Statement	 
>963	ExpressionStatement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	Statement	 
>970	Statement	 
>971	Statement	 
>972	Statement	 
>973	Statement	 
>974	Statement	 
>975	Statement	 
>976	Statement	 
>977	Statement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	Statement	 
>982	Statement	 
>983	Statement	 
>984	Statement	 
>985	Statement	 
>986	Statement	 
>987	Statement	 
>988	Statement	 
>989	Statement	 
>990	Statement	 
>991	Statement	 
>992	Statement	 
>993	Statement	 
>994	Statement	 
>995	Statement	 
>996	Statement	 
>997	Statement	 
>998	Statement	 
>999	Statement	 
>1000	Statement	 
>1001	Statement	 
>1002	Statement	 
>1003	Statement	 
>1004	Statement	 
>1005	Statement	 
>1006	Statement	 
>1007	Statement	 
>1008	Statement	 
>1009	Statement	 
>1010	Statement	 
>1011	ExpressionStatement	 
>1012	Statement	 
>1013	Statement	 
>1014	IdentifierDeclStatement	 
>1015	IdentifierDecl	itr ( begin ( ) )
>1016	CallExpression	begin ( )
>1017	ArgumentList	 
>1018	Callee	begin
>1019	Identifier	begin
>1020	Identifier	itr
>1021	IdentifierDeclType	iterator
>1030	FunctionDef	path 
>1031	ParameterList	 
>1032	ReturnType	string_type 
>1033	CompoundStatement	 
>1034	ReturnStatement	 
>1035	ConditionalExpression	( end_pos == 1 && root_dir_pos == 0 && filename_was_separator ) ? string_type 
>1036	Identifier	end_pos
>1037	Identifier	string_type 
>1038	Condition	end_pos == 1 && root_dir_pos == 0 && filename_was_separator
>1039	AndExpression	end_pos == 1 && root_dir_pos == 0 && filename_was_separator
>1040	AndExpression	root_dir_pos == 0 && filename_was_separator
>1041	Identifier	filename_was_separator
>1042	EqualityExpression	root_dir_pos == 0
>1043	PrimaryExpression	0
>1044	Identifier	root_dir_pos
>1045	EqualityExpression	end_pos == 1
>1046	PrimaryExpression	1
>1047	Identifier	end_pos
>1048	ForStatement	for ( ; end_pos > 0 && ( end_pos - 1 ) != root_dir_pos && is_separator ( m_pathname [ end_pos - 1 ] ) ; -- end_pos )
>1049	CompoundStatement	 
>1050	UnaryExpression	 
>1051	Identifier	end_pos
>1052	IncDec	--
>1053	Condition	 
>1054	AndExpression	end_pos > 0 && ( end_pos - 1 ) != root_dir_pos && is_separator ( m_pathname [ end_pos - 1 ] )
>1055	AndExpression	( end_pos - 1 ) != root_dir_pos && is_separator ( m_pathname [ end_pos - 1 ] )
>1056	CallExpression	is_separator ( m_pathname [ end_pos - 1 ] )
>1057	ArgumentList	m_pathname [ end_pos - 1 ]
>1058	Argument	m_pathname [ end_pos - 1 ]
>1059	ArrayIndexing	m_pathname [ end_pos - 1 ]
>1060	AdditiveExpression	end_pos - 1
>1061	PrimaryExpression	1
>1062	Identifier	end_pos
>1063	Identifier	m_pathname
>1064	Callee	is_separator
>1065	Identifier	is_separator
>1066	EqualityExpression	( end_pos - 1 ) != root_dir_pos
>1067	Identifier	root_dir_pos
>1068	AdditiveExpression	end_pos - 1
>1069	PrimaryExpression	1
>1070	Identifier	end_pos
>1071	RelationalExpression	end_pos > 0
>1072	PrimaryExpression	0
>1073	Identifier	end_pos
>1074	IdentifierDeclStatement	 
>1075	IdentifierDecl	root_dir_pos ( root_directory_start ( m_pathname , end_pos ) )
>1076	CallExpression	root_directory_start ( m_pathname , end_pos )
>1077	ArgumentList	m_pathname
>1078	Argument	end_pos
>1079	Identifier	end_pos
>1080	Argument	m_pathname
>1081	Identifier	m_pathname
>1082	Callee	root_directory_start
>1083	Identifier	root_directory_start
>1084	Identifier	root_dir_pos
>1085	IdentifierDeclType	size_type
>1086	IdentifierDeclStatement	 
>1087	IdentifierDecl	filename_was_separator ( m_pathname . size ( ) && is_separator ( m_pathname [ end_pos ] ) )
>1088	AndExpression	m_pathname . size ( ) && is_separator ( m_pathname [ end_pos ] )
>1089	CallExpression	is_separator ( m_pathname [ end_pos ] )
>1090	ArgumentList	m_pathname [ end_pos ]
>1091	Argument	m_pathname [ end_pos ]
>1092	ArrayIndexing	m_pathname [ end_pos ]
>1093	Identifier	end_pos
>1094	Identifier	m_pathname
>1095	Callee	is_separator
>1096	Identifier	is_separator
>1097	CallExpression	m_pathname . size ( )
>1098	ArgumentList	 
>1099	Callee	m_pathname . size
>1100	MemberAccess	m_pathname . size
>1101	Identifier	size
>1102	Identifier	m_pathname
>1103	Identifier	filename_was_separator
>1104	IdentifierDeclType	bool
>1105	IdentifierDeclStatement	 
>1106	IdentifierDecl	end_pos ( filename_pos ( m_pathname , m_pathname . size ( ) ) )
>1107	CallExpression	filename_pos ( m_pathname , m_pathname . size ( ) )
>1108	ArgumentList	m_pathname
>1109	Argument	m_pathname . size ( )
>1110	CallExpression	m_pathname . size ( )
>1111	ArgumentList	 
>1112	Callee	m_pathname . size
>1113	MemberAccess	m_pathname . size
>1114	Identifier	size
>1115	Identifier	m_pathname
>1116	Argument	m_pathname
>1117	Identifier	m_pathname
>1118	Callee	filename_pos
>1119	Identifier	filename_pos
>1120	Identifier	end_pos
>1121	IdentifierDeclType	size_type
>1134	FunctionDef	path 
>1135	ParameterList	 
>1136	ReturnType	path
>1137	CompoundStatement	 
>1138	ReturnStatement	 
>1139	ConditionalExpression	end_pos == string_type 
>1140	CallExpression	path ( m_pathname . c_str ( ) , m_pathname . c_str ( ) + end_pos )
>1141	ArgumentList	m_pathname . c_str ( )
>1142	Argument	m_pathname . c_str ( ) + end_pos
>1143	AdditiveExpression	m_pathname . c_str ( ) + end_pos
>1144	Identifier	end_pos
>1145	CallExpression	m_pathname . c_str ( )
>1146	ArgumentList	 
>1147	Callee	m_pathname . c_str
>1148	MemberAccess	m_pathname . c_str
>1149	Identifier	c_str
>1150	Identifier	m_pathname
>1151	Argument	m_pathname . c_str ( )
>1152	CallExpression	m_pathname . c_str ( )
>1153	ArgumentList	 
>1154	Callee	m_pathname . c_str
>1155	MemberAccess	m_pathname . c_str
>1156	Identifier	c_str
>1157	Identifier	m_pathname
>1158	Callee	path
>1159	Identifier	path
>1160	CallExpression	path ( )
>1161	ArgumentList	 
>1162	Callee	path
>1163	Identifier	path
>1164	Condition	end_pos == string_type 
>1165	EqualityExpression	end_pos == string_type 
>1166	Identifier	string_type 
>1167	Identifier	end_pos
>1168	IdentifierDeclStatement	 
>1169	IdentifierDecl	end_pos ( m_parent_path_end ( ) )
>1170	CallExpression	m_parent_path_end ( )
>1171	ArgumentList	 
>1172	Callee	m_parent_path_end
>1173	Identifier	m_parent_path_end
>1174	Identifier	end_pos
>1175	IdentifierDeclType	size_type
>1184	FunctionDef	path 
>1185	ParameterList	 
>1186	ReturnType	path
>1187	CompoundStatement	 
>1188	ReturnStatement	 
>1189	ConditionalExpression	( m_pathname . size ( ) && pos && is_separator ( m_pathname [ pos ] ) && ! is_root_separator ( m_pathname , pos ) ) ? \
>1190	CallExpression	path ( m_pathname . c_str ( ) + pos )
>1191	ArgumentList	m_pathname . c_str ( ) + pos
>1192	Argument	m_pathname . c_str ( ) + pos
>1193	AdditiveExpression	m_pathname . c_str ( ) + pos
>1194	Identifier	pos
>1195	CallExpression	m_pathname . c_str ( )
>1196	ArgumentList	 
>1197	Callee	m_pathname . c_str
>1198	MemberAccess	m_pathname . c_str
>1199	Identifier	c_str
>1200	Identifier	m_pathname
>1201	Callee	path
>1202	Identifier	path
>1203	Identifier	dot_path
>1204	Condition	m_pathname . size ( ) && pos && is_separator ( m_pathname [ pos ] ) && ! is_root_separator ( m_pathname , pos )
>1205	AndExpression	m_pathname . size ( ) && pos && is_separator ( m_pathname [ pos ] ) && ! is_root_separator ( m_pathname , \
>1206	AndExpression	pos && is_separator ( m_pathname [ pos ] ) && ! is_root_separator ( m_pathname , pos )
>1207	AndExpression	is_separator ( m_pathname [ pos ] ) && ! is_root_separator ( m_pathname , pos )
>1208	UnaryOp	! is_root_separator ( m_pathname , pos )
>1209	CallExpression	is_root_separator ( m_pathname , pos )
>1210	ArgumentList	m_pathname
>1211	Argument	pos
>1212	Identifier	pos
>1213	Argument	m_pathname
>1214	Identifier	m_pathname
>1215	Callee	is_root_separator
>1216	Identifier	is_root_separator
>1217	UnaryOperator	!
>1218	CallExpression	is_separator ( m_pathname [ pos ] )
>1219	ArgumentList	m_pathname [ pos ]
>1220	Argument	m_pathname [ pos ]
>1221	ArrayIndexing	m_pathname [ pos ]
>1222	Identifier	pos
>1223	Identifier	m_pathname
>1224	Callee	is_separator
>1225	Identifier	is_separator
>1226	Identifier	pos
>1227	CallExpression	m_pathname . size ( )
>1228	ArgumentList	 
>1229	Callee	m_pathname . size
>1230	MemberAccess	m_pathname . size
>1231	Identifier	size
>1232	Identifier	m_pathname
>1233	IdentifierDeclStatement	 
>1234	IdentifierDecl	pos ( filename_pos ( m_pathname , m_pathname . size ( ) ) )
>1235	CallExpression	filename_pos ( m_pathname , m_pathname . size ( ) )
>1236	ArgumentList	m_pathname
>1237	Argument	m_pathname . size ( )
>1238	CallExpression	m_pathname . size ( )
>1239	ArgumentList	 
>1240	Callee	m_pathname . size
>1241	MemberAccess	m_pathname . size
>1242	Identifier	size
>1243	Identifier	m_pathname
>1244	Argument	m_pathname
>1245	Identifier	m_pathname
>1246	Callee	filename_pos
>1247	Identifier	filename_pos
>1248	Identifier	pos
>1249	IdentifierDeclType	size_type
>1263	FunctionDef	path 
>1264	ParameterList	 
>1265	ReturnType	path
>1266	CompoundStatement	 
>1267	ReturnStatement	 
>1268	ConditionalExpression	pos == string_type 
>1269	CallExpression	path ( name . m_pathname . c_str ( ) , name . m_pathname . c_str ( ) + pos )
>1270	ArgumentList	name . m_pathname . c_str ( )
>1271	Argument	name . m_pathname . c_str ( ) + pos
>1272	AdditiveExpression	name . m_pathname . c_str ( ) + pos
>1273	Identifier	pos
>1274	CallExpression	name . m_pathname . c_str ( )
>1275	ArgumentList	 
>1276	Callee	name . m_pathname . c_str
>1277	MemberAccess	name . m_pathname . c_str
>1278	Identifier	c_str
>1279	MemberAccess	name . m_pathname
>1280	Identifier	m_pathname
>1281	Identifier	name
>1282	Argument	name . m_pathname . c_str ( )
>1283	CallExpression	name . m_pathname . c_str ( )
>1284	ArgumentList	 
>1285	Callee	name . m_pathname . c_str
>1286	MemberAccess	name . m_pathname . c_str
>1287	Identifier	c_str
>1288	MemberAccess	name . m_pathname
>1289	Identifier	m_pathname
>1290	Identifier	name
>1291	Callee	path
>1292	Identifier	path
>1293	Identifier	name
>1294	Condition	pos == string_type 
>1295	EqualityExpression	pos == string_type 
>1296	Identifier	string_type 
>1297	Identifier	pos
>1298	IdentifierDeclStatement	 
>1299	IdentifierDecl	pos ( name . m_pathname . rfind ( dot ) )
>1300	CallExpression	name . m_pathname . rfind ( dot )
>1301	ArgumentList	dot
>1302	Argument	dot
>1303	Identifier	dot
>1304	Callee	name . m_pathname . rfind
>1305	MemberAccess	name . m_pathname . rfind
>1306	Identifier	rfind
>1307	MemberAccess	name . m_pathname
>1308	Identifier	m_pathname
>1309	Identifier	name
>1310	Identifier	pos
>1311	IdentifierDeclType	size_type
>1312	IfStatement	if ( name == dot_path || name == dot_dot_path )
>1313	ReturnStatement	 
>1314	Identifier	name
>1315	Condition	 
>1316	OrExpression	name == dot_path || name == dot_dot_path
>1317	EqualityExpression	name == dot_dot_path
>1318	Identifier	dot_dot_path
>1319	Identifier	name
>1320	EqualityExpression	name == dot_path
>1321	Identifier	dot_path
>1322	Identifier	name
>1323	IdentifierDeclStatement	 
>1324	IdentifierDecl	name ( filename ( ) )
>1325	CallExpression	filename ( )
>1326	ArgumentList	 
>1327	Callee	filename
>1328	Identifier	filename
>1329	Identifier	name
>1330	IdentifierDeclType	path
>1343	FunctionDef	path 
>1344	ParameterList	 
>1345	ReturnType	path
>1346	CompoundStatement	 
>1347	ReturnStatement	 
>1348	ConditionalExpression	pos == string_type 
>1349	CallExpression	path ( name . m_pathname . c_str ( ) + pos )
>1350	ArgumentList	name . m_pathname . c_str ( ) + pos
>1351	Argument	name . m_pathname . c_str ( ) + pos
>1352	AdditiveExpression	name . m_pathname . c_str ( ) + pos
>1353	Identifier	pos
>1354	CallExpression	name . m_pathname . c_str ( )
>1355	ArgumentList	 
>1356	Callee	name . m_pathname . c_str
>1357	MemberAccess	name . m_pathname . c_str
>1358	Identifier	c_str
>1359	MemberAccess	name . m_pathname
>1360	Identifier	m_pathname
>1361	Identifier	name
>1362	Callee	path
>1363	Identifier	path
>1364	CallExpression	path ( )
>1365	ArgumentList	 
>1366	Callee	path
>1367	Identifier	path
>1368	Condition	pos == string_type 
>1369	EqualityExpression	pos == string_type 
>1370	Identifier	string_type 
>1371	Identifier	pos
>1372	IdentifierDeclStatement	 
>1373	IdentifierDecl	pos ( name . m_pathname . rfind ( dot ) )
>1374	CallExpression	name . m_pathname . rfind ( dot )
>1375	ArgumentList	dot
>1376	Argument	dot
>1377	Identifier	dot
>1378	Callee	name . m_pathname . rfind
>1379	MemberAccess	name . m_pathname . rfind
>1380	Identifier	rfind
>1381	MemberAccess	name . m_pathname
>1382	Identifier	m_pathname
>1383	Identifier	name
>1384	Identifier	pos
>1385	IdentifierDeclType	size_type
>1386	IfStatement	if ( name == dot_path || name == dot_dot_path )
>1387	ReturnStatement	 
>1388	CallExpression	path ( )
>1389	ArgumentList	 
>1390	Callee	path
>1391	Identifier	path
>1392	Condition	 
>1393	OrExpression	name == dot_path || name == dot_dot_path
>1394	EqualityExpression	name == dot_dot_path
>1395	Identifier	dot_dot_path
>1396	Identifier	name
>1397	EqualityExpression	name == dot_path
>1398	Identifier	dot_path
>1399	Identifier	name
>1400	IdentifierDeclStatement	 
>1401	IdentifierDecl	name ( filename ( ) )
>1402	CallExpression	filename ( )
>1403	ArgumentList	 
>1404	Callee	filename
>1405	Identifier	filename
>1406	Identifier	name
>1407	IdentifierDeclType	path
>1420	FunctionDef	path 
>1421	ParameterList	 
>1422	ReturnType	path &
>1423	CompoundStatement	 
>1424	ReturnStatement	 
>1425	UnaryOp	* this
>1426	Identifier	this
>1427	UnaryOperator	*
>1428	ExpressionStatement	 
>1429	AssignmentExpr	m_pathname = temp . m_pathname
>1430	MemberAccess	temp . m_pathname
>1431	Identifier	m_pathname
>1432	Identifier	temp
>1433	Identifier	m_pathname
>1434	IfStatement	if ( temp . empty ( ) )
>1435	ExpressionStatement	 
>1436	AssignmentExpr	temp /= dot_path
>1437	Identifier	dot_path
>1438	Identifier	temp
>1439	Condition	 
>1440	CallExpression	temp . empty ( )
>1441	ArgumentList	 
>1442	Callee	temp . empty
>1443	MemberAccess	temp . empty
>1444	Identifier	empty
>1445	Identifier	temp
>1446	ExpressionStatement	 
>1447	ForStatement	for ( iterator itr ( start ) ; itr != stop ; ++ itr )
>1448	CompoundStatement	 
>1449	ExpressionStatement	 
>1450	AssignmentExpr	temp /= * itr
>1451	UnaryOp	* itr
>1452	Identifier	itr
>1453	UnaryOperator	*
>1454	Identifier	temp
>1455	IfStatement	if ( ! temp . empty ( ) && itr -> native ( ) . size ( ) == 2 && ( itr -> native ( ) ) [ 0 ] == dot && ( itr -> native ( ) ) [ \
>1456	CompoundStatement	 
>1457	CompoundStatement	 
>1458	ContinueStatement	 
>1459	IfStatement	if ( temp . empty ( ) && ++ next != stop && next == last && * last == dot_path )
>1460	ExpressionStatement	 
>1461	AssignmentExpr	temp /= dot_path
>1462	Identifier	dot_path
>1463	Identifier	temp
>1464	Condition	 
>1465	AndExpression	temp . empty ( ) && ++ next != stop && next == last && * last == dot_path
>1466	AndExpression	++ next != stop && next == last && * last == dot_path
>1467	AndExpression	next == last && * last == dot_path
>1468	EqualityExpression	* last == dot_path
>1469	Identifier	dot_path
>1470	UnaryOp	* last
>1471	Identifier	last
>1472	UnaryOperator	*
>1473	EqualityExpression	next == last
>1474	Identifier	last
>1475	Identifier	next
>1476	EqualityExpression	++ next != stop
>1477	Identifier	stop
>1478	UnaryExpression	++ next
>1479	Identifier	next
>1480	IncDec	++
>1481	CallExpression	temp . empty ( )
>1482	ArgumentList	 
>1483	Callee	temp . empty
>1484	MemberAccess	temp . empty
>1485	Identifier	empty
>1486	Identifier	temp
>1487	IdentifierDeclStatement	 
>1488	IdentifierDecl	next ( itr )
>1489	Identifier	itr
>1490	Identifier	next
>1491	IdentifierDeclType	iterator
>1492	IfStatement	if ( temp . m_pathname . size ( ) > 0 && temp . m_pathname [ temp . m_pathname . size ( ) - 1 ] == separator )
>1493	CompoundStatement	 
>1494	IfStatement	if ( rds == string_type 
>1495	CompoundStatement	 
>1496	ExpressionStatement	 
>1497	CallExpression	temp . m_pathname . erase ( temp . m_pathname . size ( ) - 1 )
>1498	ArgumentList	temp . m_pathname . size ( ) - 1
>1499	Argument	temp . m_pathname . size ( ) - 1
>1500	AdditiveExpression	temp . m_pathname . size ( ) - 1
>1501	PrimaryExpression	1
>1502	CallExpression	temp . m_pathname . size ( )
>1503	ArgumentList	 
>1504	Callee	temp . m_pathname . size
>1505	MemberAccess	temp . m_pathname . size
>1506	Identifier	size
>1507	MemberAccess	temp . m_pathname
>1508	Identifier	m_pathname
>1509	Identifier	temp
>1510	Callee	temp . m_pathname . erase
>1511	MemberAccess	temp . m_pathname . erase
>1512	Identifier	erase
>1513	MemberAccess	temp . m_pathname
>1514	Identifier	m_pathname
>1515	Identifier	temp
>1516	Condition	 
>1517	OrExpression	rds == string_type 
>1518	EqualityExpression	rds != temp . m_pathname . size ( ) - 1
>1519	AdditiveExpression	temp . m_pathname . size ( ) - 1
>1520	PrimaryExpression	1
>1521	CallExpression	temp . m_pathname . size ( )
>1522	ArgumentList	 
>1523	Callee	temp . m_pathname . size
>1524	MemberAccess	temp . m_pathname . size
>1525	Identifier	size
>1526	MemberAccess	temp . m_pathname
>1527	Identifier	m_pathname
>1528	Identifier	temp
>1529	Identifier	rds
>1530	EqualityExpression	rds == string_type 
>1531	Identifier	string_type 
>1532	Identifier	rds
>1533	IdentifierDeclStatement	 
>1534	IdentifierDecl	rds ( root_directory_start ( temp . m_pathname , temp . m_pathname . size ( ) ) )
>1535	CallExpression	root_directory_start ( temp . m_pathname , temp . m_pathname . size ( ) )
>1536	ArgumentList	temp . m_pathname
>1537	Argument	temp . m_pathname . size ( )
>1538	CallExpression	temp . m_pathname . size ( )
>1539	ArgumentList	 
>1540	Callee	temp . m_pathname . size
>1541	MemberAccess	temp . m_pathname . size
>1542	Identifier	size
>1543	MemberAccess	temp . m_pathname
>1544	Identifier	m_pathname
>1545	Identifier	temp
>1546	Argument	temp . m_pathname
>1547	MemberAccess	temp . m_pathname
>1548	Identifier	m_pathname
>1549	Identifier	temp
>1550	Callee	root_directory_start
>1551	Identifier	root_directory_start
>1552	Identifier	rds
>1553	IdentifierDeclType	string_type 
>1554	Condition	 
>1555	AndExpression	temp . m_pathname . size ( ) > 0 && temp . m_pathname [ temp . m_pathname . size ( ) - 1 ] == separator
>1556	EqualityExpression	temp . m_pathname [ temp . m_pathname . size ( ) - 1 ] == separator
>1557	Identifier	separator
>1558	ArrayIndexing	temp . m_pathname [ temp . m_pathname . size ( ) - 1 ]
>1559	AdditiveExpression	temp . m_pathname . size ( ) - 1
>1560	PrimaryExpression	1
>1561	CallExpression	temp . m_pathname . size ( )
>1562	ArgumentList	 
>1563	Callee	temp . m_pathname . size
>1564	MemberAccess	temp . m_pathname . size
>1565	Identifier	size
>1566	MemberAccess	temp . m_pathname
>1567	Identifier	m_pathname
>1568	Identifier	temp
>1569	MemberAccess	temp . m_pathname
>1570	Identifier	m_pathname
>1571	Identifier	temp
>1572	RelationalExpression	temp . m_pathname . size ( ) > 0
>1573	PrimaryExpression	0
>1574	CallExpression	temp . m_pathname . size ( )
>1575	ArgumentList	 
>1576	Callee	temp . m_pathname . size
>1577	MemberAccess	temp . m_pathname . size
>1578	Identifier	size
>1579	MemberAccess	temp . m_pathname
>1580	Identifier	m_pathname
>1581	Identifier	temp
>1582	ExpressionStatement	 
>1583	CallExpression	temp . remove_filename ( )
>1584	ArgumentList	 
>1585	Callee	temp . remove_filename
>1586	MemberAccess	temp . remove_filename
>1587	Identifier	remove_filename
>1588	Identifier	temp
>1589	Statement	 
>1590	Statement	 
>1591	Statement	 
>1592	Statement	 
>1593	Statement	 
>1594	Statement	 
>1595	Statement	 
>1596	Statement	 
>1597	Statement	 
>1598	Statement	 
>1599	Statement	 
>1600	Statement	 
>1601	Statement	 
>1602	Statement	 
>1603	Statement	 
>1604	Statement	 
>1605	Statement	 
>1606	Statement	 
>1607	Statement	 
>1608	Statement	 
>1609	Statement	 
>1610	Statement	 
>1611	Statement	 
>1612	Statement	 
>1613	Statement	 
>1614	Statement	 
>1615	Statement	 
>1616	Statement	 
>1617	Statement	 
>1618	Statement	 
>1619	Statement	 
>1620	Statement	 
>1621	Statement	 
>1622	Statement	 
>1623	Statement	 
>1624	Statement	 
>1625	Statement	 
>1626	Statement	 
>1627	Statement	 
>1628	Statement	 
>1629	Statement	 
>1630	Statement	 
>1631	Statement	 
>1632	Statement	 
>1633	Statement	 
>1634	Statement	 
>1635	Statement	 
>1636	Statement	 
>1637	Statement	 
>1638	Statement	 
>1639	Statement	 
>1640	Statement	 
>1641	Statement	 
>1642	Statement	 
>1643	Statement	 
>1644	Statement	 
>1645	Statement	 
>1646	Statement	 
>1647	Statement	 
>1648	Statement	 
>1649	Statement	 
>1650	Statement	 
>1651	Statement	 
>1652	Statement	 
>1653	Statement	 
>1654	Statement	 
>1655	Statement	 
>1656	Statement	 
>1657	Statement	 
>1658	Statement	 
>1659	Statement	 
>1660	Statement	 
>1661	IdentifierDeclStatement	 
>1662	IdentifierDecl	lf ( temp . filename ( ) . native ( ) )
>1663	CallExpression	temp . filename ( ) . native ( )
>1664	ArgumentList	 
>1665	Callee	temp . filename ( ) . native
>1666	MemberAccess	temp . filename ( ) . native
>1667	Identifier	native
>1668	CallExpression	temp . filename ( )
>1669	ArgumentList	 
>1670	Callee	temp . filename
>1671	MemberAccess	temp . filename
>1672	Identifier	filename
>1673	Identifier	temp
>1674	Identifier	lf
>1675	IdentifierDeclType	string_type
>1676	Condition	 
>1677	AndExpression	! temp . empty ( ) && itr -> native ( ) . size ( ) == 2 && ( itr -> native ( ) ) [ 0 ] == dot && ( itr \
>1678	AndExpression	itr -> native ( ) . size ( ) == 2 && ( itr -> native ( ) ) [ 0 ] == dot && ( itr -> native ( ) ) [ 1 ] == \
>1679	AndExpression	( itr -> native ( ) ) [ 0 ] == dot && ( itr -> native ( ) ) [ 1 ] == dot
>1680	EqualityExpression	( itr -> native ( ) ) [ 1 ] == dot
>1681	Identifier	dot
>1682	ArrayIndexing	( itr -> native ( ) ) [ 1 ]
>1683	PrimaryExpression	1
>1684	CallExpression	itr -> native ( )
>1685	ArgumentList	 
>1686	Callee	itr -> native
>1687	PtrMemberAccess	itr -> native
>1688	Identifier	native
>1689	Identifier	itr
>1690	EqualityExpression	( itr -> native ( ) ) [ 0 ] == dot
>1691	Identifier	dot
>1692	ArrayIndexing	( itr -> native ( ) ) [ 0 ]
>1693	PrimaryExpression	0
>1694	CallExpression	itr -> native ( )
>1695	ArgumentList	 
>1696	Callee	itr -> native
>1697	PtrMemberAccess	itr -> native
>1698	Identifier	native
>1699	Identifier	itr
>1700	EqualityExpression	itr -> native ( ) . size ( ) == 2
>1701	PrimaryExpression	2
>1702	CallExpression	itr -> native ( ) . size ( )
>1703	ArgumentList	 
>1704	Callee	itr -> native ( ) . size
>1705	MemberAccess	itr -> native ( ) . size
>1706	Identifier	size
>1707	CallExpression	itr -> native ( )
>1708	ArgumentList	 
>1709	Callee	itr -> native
>1710	PtrMemberAccess	itr -> native
>1711	Identifier	native
>1712	Identifier	itr
>1713	UnaryOp	! temp . empty ( )
>1714	CallExpression	temp . empty ( )
>1715	ArgumentList	 
>1716	Callee	temp . empty
>1717	MemberAccess	temp . empty
>1718	Identifier	empty
>1719	Identifier	temp
>1720	UnaryOperator	!
>1721	IfStatement	if ( itr -> native ( ) . size ( ) == 1 && ( itr -> native ( ) ) [ 0 ] == dot && itr != start && itr != last )
>1722	ContinueStatement	 
>1723	Condition	 
>1724	AndExpression	itr -> native ( ) . size ( ) == 1 && ( itr -> native ( ) ) [ 0 ] == dot && itr != start && itr != last
>1725	AndExpression	( itr -> native ( ) ) [ 0 ] == dot && itr != start && itr != last
>1726	AndExpression	itr != start && itr != last
>1727	EqualityExpression	itr != last
>1728	Identifier	last
>1729	Identifier	itr
>1730	EqualityExpression	itr != start
>1731	Identifier	start
>1732	Identifier	itr
>1733	EqualityExpression	( itr -> native ( ) ) [ 0 ] == dot
>1734	Identifier	dot
>1735	ArrayIndexing	( itr -> native ( ) ) [ 0 ]
>1736	PrimaryExpression	0
>1737	CallExpression	itr -> native ( )
>1738	ArgumentList	 
>1739	Callee	itr -> native
>1740	PtrMemberAccess	itr -> native
>1741	Identifier	native
>1742	Identifier	itr
>1743	EqualityExpression	itr -> native ( ) . size ( ) == 1
>1744	PrimaryExpression	1
>1745	CallExpression	itr -> native ( ) . size ( )
>1746	ArgumentList	 
>1747	Callee	itr -> native ( ) . size
>1748	MemberAccess	itr -> native ( ) . size
>1749	Identifier	size
>1750	CallExpression	itr -> native ( )
>1751	ArgumentList	 
>1752	Callee	itr -> native
>1753	PtrMemberAccess	itr -> native
>1754	Identifier	native
>1755	Identifier	itr
>1756	UnaryExpression	 
>1757	Identifier	itr
>1758	IncDec	++
>1759	Condition	 
>1760	EqualityExpression	itr != stop
>1761	Identifier	stop
>1762	Identifier	itr
>1763	ForInit	 
>1764	IdentifierDeclStatement	iterator itr ( start ) ;
>1765	IdentifierDecl	itr ( start )
>1766	Identifier	start
>1767	Identifier	itr
>1768	IdentifierDeclType	iterator
>1769	IdentifierDeclStatement	 
>1770	IdentifierDecl	stop ( last -- )
>1771	IncDecOp	last --
>1772	IncDec	--
>1773	Identifier	last
>1774	Identifier	stop
>1775	IdentifierDeclType	iterator
>1776	IdentifierDeclStatement	 
>1777	IdentifierDecl	last ( end ( ) )
>1778	CallExpression	end ( )
>1779	ArgumentList	 
>1780	Callee	end
>1781	Identifier	end
>1782	Identifier	last
>1783	IdentifierDeclType	iterator
>1784	IdentifierDeclStatement	 
>1785	IdentifierDecl	start ( begin ( ) )
>1786	CallExpression	begin ( )
>1787	ArgumentList	 
>1788	Callee	begin
>1789	Identifier	begin
>1790	Identifier	start
>1791	IdentifierDeclType	iterator
>1792	IdentifierDeclStatement	 
>1793	IdentifierDecl	temp
>1794	Identifier	temp
>1795	IdentifierDeclType	path
>1796	IfStatement	if ( m_pathname . empty ( ) )
>1797	ReturnStatement	 
>1798	UnaryOp	* this
>1799	Identifier	this
>1800	UnaryOperator	*
>1801	Condition	 
>1802	CallExpression	m_pathname . empty ( )
>1803	ArgumentList	 
>1804	Callee	m_pathname . empty
>1805	MemberAccess	m_pathname . empty
>1806	Identifier	empty
>1807	Identifier	m_pathname
>1840	FunctionDef	is_root_separator (const string_type & str , size_type pos)
>1841	ParameterList	const string_type & str , size_type pos
>1842	Parameter	 
>1843	Identifier	pos
>1844	ParameterType	size_type
>1845	Parameter	 
>1846	Identifier	str
>1847	ParameterType	const string_type &
>1848	ReturnType	bool
>1849	CompoundStatement	 
>1850	ReturnStatement	 
>1851	EqualityExpression	str . find_first_of ( separators , 2 ) == pos
>1852	Identifier	pos
>1853	CallExpression	str . find_first_of ( separators , 2 )
>1854	ArgumentList	separators
>1855	Argument	2
>1856	PrimaryExpression	2
>1857	Argument	separators
>1858	Identifier	separators
>1859	Callee	str . find_first_of
>1860	MemberAccess	str . find_first_of
>1861	Identifier	find_first_of
>1862	Identifier	str
>1863	IfStatement	if ( pos < 3 || ! is_separator ( str [ 0 ] ) || ! is_separator ( str [ 1 ] ) )
>1864	ReturnStatement	 
>1865	Identifier	false
>1866	Condition	 
>1867	OrExpression	pos < 3 || ! is_separator ( str [ 0 ] ) || ! is_separator ( str [ 1 ] )
>1868	OrExpression	! is_separator ( str [ 0 ] ) || ! is_separator ( str [ 1 ] )
>1869	UnaryOp	! is_separator ( str [ 1 ] )
>1870	CallExpression	is_separator ( str [ 1 ] )
>1871	ArgumentList	str [ 1 ]
>1872	Argument	str [ 1 ]
>1873	ArrayIndexing	str [ 1 ]
>1874	PrimaryExpression	1
>1875	Identifier	str
>1876	Callee	is_separator
>1877	Identifier	is_separator
>1878	UnaryOperator	!
>1879	UnaryOp	! is_separator ( str [ 0 ] )
>1880	CallExpression	is_separator ( str [ 0 ] )
>1881	ArgumentList	str [ 0 ]
>1882	Argument	str [ 0 ]
>1883	ArrayIndexing	str [ 0 ]
>1884	PrimaryExpression	0
>1885	Identifier	str
>1886	Callee	is_separator
>1887	Identifier	is_separator
>1888	UnaryOperator	!
>1889	RelationalExpression	pos < 3
>1890	PrimaryExpression	3
>1891	Identifier	pos
>1892	Statement	 
>1893	IfStatement	if ( pos == 2 && is_letter ( str [ 0 ] ) && str [ 1 ] == colon )
>1894	ReturnStatement	 
>1895	Identifier	true
>1896	Condition	 
>1897	AndExpression	pos == 2 && is_letter ( str [ 0 ] ) && str [ 1 ] == colon
>1898	AndExpression	is_letter ( str [ 0 ] ) && str [ 1 ] == colon
>1899	EqualityExpression	str [ 1 ] == colon
>1900	Identifier	colon
>1901	ArrayIndexing	str [ 1 ]
>1902	PrimaryExpression	1
>1903	Identifier	str
>1904	CallExpression	is_letter ( str [ 0 ] )
>1905	ArgumentList	str [ 0 ]
>1906	Argument	str [ 0 ]
>1907	ArrayIndexing	str [ 0 ]
>1908	PrimaryExpression	0
>1909	Identifier	str
>1910	Callee	is_letter
>1911	Identifier	is_letter
>1912	EqualityExpression	pos == 2
>1913	PrimaryExpression	2
>1914	Identifier	pos
>1915	Statement	 
>1916	Statement	 
>1917	IfStatement	if ( pos == 0 )
>1918	ReturnStatement	 
>1919	Identifier	true
>1920	Condition	 
>1921	EqualityExpression	pos == 0
>1922	PrimaryExpression	0
>1923	Identifier	pos
>1924	WhileStatement	while ( pos > 0 && is_separator ( str [ pos - 1 ] ) )
>1925	ExpressionStatement	 
>1926	UnaryExpression	-- pos
>1927	Identifier	pos
>1928	IncDec	--
>1929	Condition	 
>1930	AndExpression	pos > 0 && is_separator ( str [ pos - 1 ] )
>1931	CallExpression	is_separator ( str [ pos - 1 ] )
>1932	ArgumentList	str [ pos - 1 ]
>1933	Argument	str [ pos - 1 ]
>1934	ArrayIndexing	str [ pos - 1 ]
>1935	AdditiveExpression	pos - 1
>1936	PrimaryExpression	1
>1937	Identifier	pos
>1938	Identifier	str
>1939	Callee	is_separator
>1940	Identifier	is_separator
>1941	RelationalExpression	pos > 0
>1942	PrimaryExpression	0
>1943	Identifier	pos
>1944	ExpressionStatement	 
>1945	CallExpression	BOOST_ASSERT_MSG ( ! str . empty ( ) && is_separator ( str [ pos ] ) , \"precondition violation\" )
>1946	ArgumentList	! str . empty ( ) && is_separator ( str [ pos ] )
>1947	Argument	\"precondition violation\"
>1948	PrimaryExpression	\"precondition violation\"
>1949	Argument	! str . empty ( ) && is_separator ( str [ pos ] )
>1950	AndExpression	! str . empty ( ) && is_separator ( str [ pos ] )
>1951	CallExpression	is_separator ( str [ pos ] )
>1952	ArgumentList	str [ pos ]
>1953	Argument	str [ pos ]
>1954	ArrayIndexing	str [ pos ]
>1955	Identifier	pos
>1956	Identifier	str
>1957	Callee	is_separator
>1958	Identifier	is_separator
>1959	UnaryOp	! str . empty ( )
>1960	CallExpression	str . empty ( )
>1961	ArgumentList	 
>1962	Callee	str . empty
>1963	MemberAccess	str . empty
>1964	Identifier	empty
>1965	Identifier	str
>1966	UnaryOperator	!
>1967	Callee	BOOST_ASSERT_MSG
>1968	Identifier	BOOST_ASSERT_MSG
>1984	FunctionDef	filename_pos (const string_type & str , size_type end_pos)
>1985	ParameterList	const string_type & str , size_type end_pos
>1986	Parameter	 
>1987	Identifier	end_pos
>1988	ParameterType	size_type
>1989	Parameter	 
>1990	Identifier	str
>1991	ParameterType	const string_type &
>1992	ReturnType	size_type
>1993	CompoundStatement	 
>1994	ReturnStatement	 
>1995	ConditionalExpression	( pos == string_type 
>1996	AdditiveExpression	pos + 1
>1997	PrimaryExpression	1
>1998	Identifier	pos
>1999	PrimaryExpression	0
>2000	Condition	pos == string_type 
>2001	OrExpression	pos == string_type 
>2002	AndExpression	pos == 1 && is_separator ( str [ 0 ] )
>2003	CallExpression	is_separator ( str [ 0 ] )
>2004	ArgumentList	str [ 0 ]
>2005	Argument	str [ 0 ]
>2006	ArrayIndexing	str [ 0 ]
>2007	PrimaryExpression	0
>2008	Identifier	str
>2009	Callee	is_separator
>2010	Identifier	is_separator
>2011	EqualityExpression	pos == 1
>2012	PrimaryExpression	1
>2013	Identifier	pos
>2014	EqualityExpression	pos == string_type 
>2015	Identifier	string_type 
>2016	Identifier	pos
>2017	Statement	 
>2018	IfStatement	if ( pos == string_type 
>2019	ExpressionStatement	 
>2020	AssignmentExpr	pos = str . find_last_of ( colon , end_pos - 2 )
>2021	CallExpression	str . find_last_of ( colon , end_pos - 2 )
>2022	ArgumentList	colon
>2023	Argument	end_pos - 2
>2024	AdditiveExpression	end_pos - 2
>2025	PrimaryExpression	2
>2026	Identifier	end_pos
>2027	Argument	colon
>2028	Identifier	colon
>2029	Callee	str . find_last_of
>2030	MemberAccess	str . find_last_of
>2031	Identifier	find_last_of
>2032	Identifier	str
>2033	Identifier	pos
>2034	Condition	 
>2035	EqualityExpression	pos == string_type 
>2036	Identifier	string_type 
>2037	Identifier	pos
>2038	Statement	 
>2039	Statement	 
>2040	IdentifierDeclStatement	 
>2041	IdentifierDecl	pos ( str . find_last_of ( separators , end_pos - 1 ) )
>2042	CallExpression	str . find_last_of ( separators , end_pos - 1 )
>2043	ArgumentList	separators
>2044	Argument	end_pos - 1
>2045	AdditiveExpression	end_pos - 1
>2046	PrimaryExpression	1
>2047	Identifier	end_pos
>2048	Argument	separators
>2049	Identifier	separators
>2050	Callee	str . find_last_of
>2051	MemberAccess	str . find_last_of
>2052	Identifier	find_last_of
>2053	Identifier	str
>2054	Identifier	pos
>2055	IdentifierDeclType	size_type
>2056	IfStatement	if ( end_pos && is_separator ( str [ end_pos - 1 ] ) )
>2057	ReturnStatement	 
>2058	AdditiveExpression	end_pos - 1
>2059	PrimaryExpression	1
>2060	Identifier	end_pos
>2061	Condition	 
>2062	AndExpression	end_pos && is_separator ( str [ end_pos - 1 ] )
>2063	CallExpression	is_separator ( str [ end_pos - 1 ] )
>2064	ArgumentList	str [ end_pos - 1 ]
>2065	Argument	str [ end_pos - 1 ]
>2066	ArrayIndexing	str [ end_pos - 1 ]
>2067	AdditiveExpression	end_pos - 1
>2068	PrimaryExpression	1
>2069	Identifier	end_pos
>2070	Identifier	str
>2071	Callee	is_separator
>2072	Identifier	is_separator
>2073	Identifier	end_pos
>2074	IfStatement	if ( end_pos == 2 && is_separator ( str [ 0 ] ) && is_separator ( str [ 1 ] ) )
>2075	ReturnStatement	 
>2076	PrimaryExpression	0
>2077	Condition	 
>2078	AndExpression	end_pos == 2 && is_separator ( str [ 0 ] ) && is_separator ( str [ 1 ] )
>2079	AndExpression	is_separator ( str [ 0 ] ) && is_separator ( str [ 1 ] )
>2080	CallExpression	is_separator ( str [ 1 ] )
>2081	ArgumentList	str [ 1 ]
>2082	Argument	str [ 1 ]
>2083	ArrayIndexing	str [ 1 ]
>2084	PrimaryExpression	1
>2085	Identifier	str
>2086	Callee	is_separator
>2087	Identifier	is_separator
>2088	CallExpression	is_separator ( str [ 0 ] )
>2089	ArgumentList	str [ 0 ]
>2090	Argument	str [ 0 ]
>2091	ArrayIndexing	str [ 0 ]
>2092	PrimaryExpression	0
>2093	Identifier	str
>2094	Callee	is_separator
>2095	Identifier	is_separator
>2096	EqualityExpression	end_pos == 2
>2097	PrimaryExpression	2
>2098	Identifier	end_pos
>2112	FunctionDef	root_directory_start (const string_type & path , size_type size)
>2113	ParameterList	const string_type & path , size_type size
>2114	Parameter	 
>2115	Identifier	size
>2116	ParameterType	size_type
>2117	Parameter	 
>2118	Identifier	path
>2119	ParameterType	const string_type &
>2120	ReturnType	size_type
>2121	CompoundStatement	 
>2122	ReturnStatement	 
>2123	Identifier	string_type 
>2124	IfStatement	if ( size > 0 && is_separator ( path [ 0 ] ) )
>2125	ReturnStatement	 
>2126	PrimaryExpression	0
>2127	Condition	 
>2128	AndExpression	size > 0 && is_separator ( path [ 0 ] )
>2129	CallExpression	is_separator ( path [ 0 ] )
>2130	ArgumentList	path [ 0 ]
>2131	Argument	path [ 0 ]
>2132	ArrayIndexing	path [ 0 ]
>2133	PrimaryExpression	0
>2134	Identifier	path
>2135	Callee	is_separator
>2136	Identifier	is_separator
>2137	RelationalExpression	size > 0
>2138	PrimaryExpression	0
>2139	Identifier	size
>2140	IfStatement	if ( size > 3 && is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] ) && ! is_separator ( path [ 2 ] ) )
>2141	CompoundStatement	 
>2142	ReturnStatement	 
>2143	ConditionalExpression	pos < size ? pos 
>2144	Identifier	string_type 
>2145	Identifier	pos
>2146	Condition	pos < size
>2147	RelationalExpression	pos < size
>2148	Identifier	size
>2149	Identifier	pos
>2150	IdentifierDeclStatement	 
>2151	IdentifierDecl	pos ( path . find_first_of ( separators , 2 ) )
>2152	CallExpression	path . find_first_of ( separators , 2 )
>2153	ArgumentList	separators
>2154	Argument	2
>2155	PrimaryExpression	2
>2156	Argument	separators
>2157	Identifier	separators
>2158	Callee	path . find_first_of
>2159	MemberAccess	path . find_first_of
>2160	Identifier	find_first_of
>2161	Identifier	path
>2162	Identifier	pos
>2163	IdentifierDeclType	string_type 
>2164	Condition	 
>2165	AndExpression	size > 3 && is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] ) && ! is_separator ( path [ 2 ] )
>2166	AndExpression	is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] ) && ! is_separator ( path [ 2 ] )
>2167	AndExpression	is_separator ( path [ 1 ] ) && ! is_separator ( path [ 2 ] )
>2168	UnaryOp	! is_separator ( path [ 2 ] )
>2169	CallExpression	is_separator ( path [ 2 ] )
>2170	ArgumentList	path [ 2 ]
>2171	Argument	path [ 2 ]
>2172	ArrayIndexing	path [ 2 ]
>2173	PrimaryExpression	2
>2174	Identifier	path
>2175	Callee	is_separator
>2176	Identifier	is_separator
>2177	UnaryOperator	!
>2178	CallExpression	is_separator ( path [ 1 ] )
>2179	ArgumentList	path [ 1 ]
>2180	Argument	path [ 1 ]
>2181	ArrayIndexing	path [ 1 ]
>2182	PrimaryExpression	1
>2183	Identifier	path
>2184	Callee	is_separator
>2185	Identifier	is_separator
>2186	CallExpression	is_separator ( path [ 0 ] )
>2187	ArgumentList	path [ 0 ]
>2188	Argument	path [ 0 ]
>2189	ArrayIndexing	path [ 0 ]
>2190	PrimaryExpression	0
>2191	Identifier	path
>2192	Callee	is_separator
>2193	Identifier	is_separator
>2194	RelationalExpression	size > 3
>2195	PrimaryExpression	3
>2196	Identifier	size
>2197	Statement	 
>2198	IfStatement	if ( size > 4 && is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] ) && path [ 2 ] == questionmark && is_\
>2199	CompoundStatement	 
>2200	ReturnStatement	 
>2201	ConditionalExpression	pos < size ? pos 
>2202	Identifier	string_type 
>2203	Identifier	pos
>2204	Condition	pos < size
>2205	RelationalExpression	pos < size
>2206	Identifier	size
>2207	Identifier	pos
>2208	IdentifierDeclStatement	 
>2209	IdentifierDecl	pos ( path . find_first_of ( separators , 4 ) )
>2210	CallExpression	path . find_first_of ( separators , 4 )
>2211	ArgumentList	separators
>2212	Argument	4
>2213	PrimaryExpression	4
>2214	Argument	separators
>2215	Identifier	separators
>2216	Callee	path . find_first_of
>2217	MemberAccess	path . find_first_of
>2218	Identifier	find_first_of
>2219	Identifier	path
>2220	Identifier	pos
>2221	IdentifierDeclType	string_type 
>2222	Condition	 
>2223	AndExpression	size > 4 && is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] ) && path [ 2 ] == questionmark && \
>2224	AndExpression	is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] ) && path [ 2 ] == questionmark && is_separator ( \
>2225	AndExpression	is_separator ( path [ 1 ] ) && path [ 2 ] == questionmark && is_separator ( path [ 3 ] )
>2226	AndExpression	path [ 2 ] == questionmark && is_separator ( path [ 3 ] )
>2227	CallExpression	is_separator ( path [ 3 ] )
>2228	ArgumentList	path [ 3 ]
>2229	Argument	path [ 3 ]
>2230	ArrayIndexing	path [ 3 ]
>2231	PrimaryExpression	3
>2232	Identifier	path
>2233	Callee	is_separator
>2234	Identifier	is_separator
>2235	EqualityExpression	path [ 2 ] == questionmark
>2236	Identifier	questionmark
>2237	ArrayIndexing	path [ 2 ]
>2238	PrimaryExpression	2
>2239	Identifier	path
>2240	CallExpression	is_separator ( path [ 1 ] )
>2241	ArgumentList	path [ 1 ]
>2242	Argument	path [ 1 ]
>2243	ArrayIndexing	path [ 1 ]
>2244	PrimaryExpression	1
>2245	Identifier	path
>2246	Callee	is_separator
>2247	Identifier	is_separator
>2248	CallExpression	is_separator ( path [ 0 ] )
>2249	ArgumentList	path [ 0 ]
>2250	Argument	path [ 0 ]
>2251	ArrayIndexing	path [ 0 ]
>2252	PrimaryExpression	0
>2253	Identifier	path
>2254	Callee	is_separator
>2255	Identifier	is_separator
>2256	RelationalExpression	size > 4
>2257	PrimaryExpression	4
>2258	Identifier	size
>2259	Statement	 
>2260	Statement	 
>2261	IfStatement	if ( size == 2 && is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] ) )
>2262	ReturnStatement	 
>2263	Identifier	string_type 
>2264	Condition	 
>2265	AndExpression	size == 2 && is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] )
>2266	AndExpression	is_separator ( path [ 0 ] ) && is_separator ( path [ 1 ] )
>2267	CallExpression	is_separator ( path [ 1 ] )
>2268	ArgumentList	path [ 1 ]
>2269	Argument	path [ 1 ]
>2270	ArrayIndexing	path [ 1 ]
>2271	PrimaryExpression	1
>2272	Identifier	path
>2273	Callee	is_separator
>2274	Identifier	is_separator
>2275	CallExpression	is_separator ( path [ 0 ] )
>2276	ArgumentList	path [ 0 ]
>2277	Argument	path [ 0 ]
>2278	ArrayIndexing	path [ 0 ]
>2279	PrimaryExpression	0
>2280	Identifier	path
>2281	Callee	is_separator
>2282	Identifier	is_separator
>2283	EqualityExpression	size == 2
>2284	PrimaryExpression	2
>2285	Identifier	size
>2286	Statement	 
>2287	IfStatement	if ( size > 2 && path [ 1 ] == colon && is_separator ( path [ 2 ] ) )
>2288	ReturnStatement	 
>2289	PrimaryExpression	2
>2290	Condition	 
>2291	AndExpression	size > 2 && path [ 1 ] == colon && is_separator ( path [ 2 ] )
>2292	AndExpression	path [ 1 ] == colon && is_separator ( path [ 2 ] )
>2293	CallExpression	is_separator ( path [ 2 ] )
>2294	ArgumentList	path [ 2 ]
>2295	Argument	path [ 2 ]
>2296	ArrayIndexing	path [ 2 ]
>2297	PrimaryExpression	2
>2298	Identifier	path
>2299	Callee	is_separator
>2300	Identifier	is_separator
>2301	EqualityExpression	path [ 1 ] == colon
>2302	Identifier	colon
>2303	ArrayIndexing	path [ 1 ]
>2304	PrimaryExpression	1
>2305	Identifier	path
>2306	RelationalExpression	size > 2
>2307	PrimaryExpression	2
>2308	Identifier	size
>2309	Statement	 
>2310	Statement	 
>2323	FunctionDef	first_element (const string_type & src , size_type & element_pos , size_type & element_size , size_type size)
>2324	ParameterList	const string_type & src , size_type & element_pos , size_type & element_size , size_type size
>2325	Parameter	 
>2326	Identifier	size
>2327	ParameterType	size_type
>2328	Parameter	 
>2329	Identifier	element_size
>2330	ParameterType	size_type &
>2331	Parameter	 
>2332	Identifier	element_pos
>2333	ParameterType	size_type &
>2334	Parameter	 
>2335	Identifier	src
>2336	ParameterType	const string_type &
>2337	ReturnType	void
>2338	CompoundStatement	 
>2339	ReturnStatement	 
>2340	Statement	 
>2341	IfStatement	if ( src [ cur ] == colon )
>2342	CompoundStatement	 
>2343	ExpressionStatement	 
>2344	UnaryExpression	++ element_size
>2345	Identifier	element_size
>2346	IncDec	++
>2347	Condition	 
>2348	EqualityExpression	src [ cur ] == colon
>2349	Identifier	colon
>2350	ArrayIndexing	src [ cur ]
>2351	Identifier	cur
>2352	Identifier	src
>2353	IfStatement	if ( cur == size )
>2354	ReturnStatement	 
>2355	Condition	 
>2356	EqualityExpression	cur == size
>2357	Identifier	size
>2358	Identifier	cur
>2359	Statement	 
>2360	Statement	 
>2361	CompoundStatement	 
>2362	ExpressionStatement	 
>2363	UnaryExpression	++ element_size
>2364	Identifier	element_size
>2365	IncDec	++
>2366	ExpressionStatement	 
>2367	UnaryExpression	++ cur
>2368	Identifier	cur
>2369	IncDec	++
>2370	Statement	 
>2371	Statement	 
>2372	Statement	 
>2373	Statement	 
>2374	Statement	 
>2375	Statement	 
>2376	Statement	 
>2377	Statement	 
>2378	Statement	 
>2379	Statement	 
>2380	Statement	 
>2381	Statement	 
>2382	Statement	 
>2383	Statement	 
>2384	Statement	 
>2385	Statement	 
>2386	Statement	 
>2387	Statement	 
>2388	Statement	 
>2389	Statement	 
>2390	Statement	 
>2391	Statement	 
>2392	Statement	 
>2393	Statement	 
>2394	Statement	 
>2395	IfStatement	if ( size >= 2 && is_separator ( src [ 0 ] ) && is_separator ( src [ 1 ] ) && ( size == 2 || ! is_separator ( src [ \
>2396	ElseStatement	else
>2397	IfStatement	if ( is_separator ( src [ 0 ] ) )
>2398	CompoundStatement	 
>2399	ReturnStatement	 
>2400	WhileStatement	while ( cur + 1 < size && is_separator ( src [ cur + 1 ] ) )
>2401	CompoundStatement	 
>2402	ExpressionStatement	 
>2403	UnaryExpression	++ element_pos
>2404	Identifier	element_pos
>2405	IncDec	++
>2406	ExpressionStatement	 
>2407	UnaryExpression	++ cur
>2408	Identifier	cur
>2409	IncDec	++
>2410	Condition	 
>2411	AndExpression	cur + 1 < size && is_separator ( src [ cur + 1 ] )
>2412	CallExpression	is_separator ( src [ cur + 1 ] )
>2413	ArgumentList	src [ cur + 1 ]
>2414	Argument	src [ cur + 1 ]
>2415	ArrayIndexing	src [ cur + 1 ]
>2416	AdditiveExpression	cur + 1
>2417	PrimaryExpression	1
>2418	Identifier	cur
>2419	Identifier	src
>2420	Callee	is_separator
>2421	Identifier	is_separator
>2422	RelationalExpression	cur + 1 < size
>2423	Identifier	size
>2424	AdditiveExpression	cur + 1
>2425	PrimaryExpression	1
>2426	Identifier	cur
>2427	ExpressionStatement	 
>2428	UnaryExpression	++ element_size
>2429	Identifier	element_size
>2430	IncDec	++
>2431	Condition	 
>2432	CallExpression	is_separator ( src [ 0 ] )
>2433	ArgumentList	src [ 0 ]
>2434	Argument	src [ 0 ]
>2435	ArrayIndexing	src [ 0 ]
>2436	PrimaryExpression	0
>2437	Identifier	src
>2438	Callee	is_separator
>2439	Identifier	is_separator
>2440	CompoundStatement	 
>2441	ExpressionStatement	 
>2442	AssignmentExpr	element_size += 2
>2443	PrimaryExpression	2
>2444	Identifier	element_size
>2445	ExpressionStatement	 
>2446	AssignmentExpr	cur += 2
>2447	PrimaryExpression	2
>2448	Identifier	cur
>2449	Condition	 
>2450	AndExpression	size >= 2 && is_separator ( src [ 0 ] ) && is_separator ( src [ 1 ] ) && ( size == 2 || ! is_separator ( \
>2451	AndExpression	is_separator ( src [ 0 ] ) && is_separator ( src [ 1 ] ) && ( size == 2 || ! is_separator ( src [ 2 ] ) )
>2452	AndExpression	is_separator ( src [ 1 ] ) && ( size == 2 || ! is_separator ( src [ 2 ] ) )
>2453	OrExpression	size == 2 || ! is_separator ( src [ 2 ] )
>2454	UnaryOp	! is_separator ( src [ 2 ] )
>2455	CallExpression	is_separator ( src [ 2 ] )
>2456	ArgumentList	src [ 2 ]
>2457	Argument	src [ 2 ]
>2458	ArrayIndexing	src [ 2 ]
>2459	PrimaryExpression	2
>2460	Identifier	src
>2461	Callee	is_separator
>2462	Identifier	is_separator
>2463	UnaryOperator	!
>2464	EqualityExpression	size == 2
>2465	PrimaryExpression	2
>2466	Identifier	size
>2467	CallExpression	is_separator ( src [ 1 ] )
>2468	ArgumentList	src [ 1 ]
>2469	Argument	src [ 1 ]
>2470	ArrayIndexing	src [ 1 ]
>2471	PrimaryExpression	1
>2472	Identifier	src
>2473	Callee	is_separator
>2474	Identifier	is_separator
>2475	CallExpression	is_separator ( src [ 0 ] )
>2476	ArgumentList	src [ 0 ]
>2477	Argument	src [ 0 ]
>2478	ArrayIndexing	src [ 0 ]
>2479	PrimaryExpression	0
>2480	Identifier	src
>2481	Callee	is_separator
>2482	Identifier	is_separator
>2483	RelationalExpression	size >= 2
>2484	PrimaryExpression	2
>2485	Identifier	size
>2486	IdentifierDeclStatement	 
>2487	IdentifierDecl	cur ( 0 )
>2488	PrimaryExpression	0
>2489	Identifier	cur
>2490	IdentifierDeclType	string_type 
>2491	IfStatement	if ( src . empty ( ) )
>2492	ReturnStatement	 
>2493	Condition	 
>2494	CallExpression	src . empty ( )
>2495	ArgumentList	 
>2496	Callee	src . empty
>2497	MemberAccess	src . empty
>2498	Identifier	empty
>2499	Identifier	src
>2500	ExpressionStatement	 
>2501	AssignmentExpr	element_size = 0
>2502	PrimaryExpression	0
>2503	Identifier	element_size
>2504	ExpressionStatement	 
>2505	AssignmentExpr	element_pos = 0
>2506	PrimaryExpression	0
>2507	Identifier	element_pos
>2508	IfStatement	if ( size == string_type 
>2509	ExpressionStatement	 
>2510	AssignmentExpr	size = src . size ( )
>2511	CallExpression	src . size ( )
>2512	ArgumentList	 
>2513	Callee	src . size
>2514	MemberAccess	src . size
>2515	Identifier	size
>2516	Identifier	src
>2517	Identifier	size
>2518	Condition	 
>2519	EqualityExpression	size == string_type 
>2520	Identifier	string_type 
>2521	Identifier	size
>2537	FunctionDef	lex_compare (path 
>2538	ParameterList	path 
>2539	Parameter	 
>2540	Identifier	last2
>2541	ParameterType	path 
>2542	Parameter	 
>2543	Identifier	first2
>2544	ParameterType	path 
>2545	Parameter	 
>2546	Identifier	last1
>2547	ParameterType	path 
>2548	Parameter	 
>2549	Identifier	first1
>2550	ParameterType	path 
>2551	ReturnType	BOOST_FILESYSTEM_DECL int
>2552	CompoundStatement	 
>2553	ReturnStatement	 
>2554	ConditionalExpression	first1 == last1 ? - 1 
>2555	PrimaryExpression	1
>2556	UnaryOp	- 1
>2557	PrimaryExpression	1
>2558	UnaryOperator	-
>2559	Condition	first1 == last1
>2560	EqualityExpression	first1 == last1
>2561	Identifier	last1
>2562	Identifier	first1
>2563	IfStatement	if ( first1 == last1 && first2 == last2 )
>2564	ReturnStatement	 
>2565	PrimaryExpression	0
>2566	Condition	 
>2567	AndExpression	first1 == last1 && first2 == last2
>2568	EqualityExpression	first2 == last2
>2569	Identifier	last2
>2570	Identifier	first2
>2571	EqualityExpression	first1 == last1
>2572	Identifier	last1
>2573	Identifier	first1
>2574	ForStatement	for ( ; first1 != last1 && first2 != last2 ; )
>2575	CompoundStatement	 
>2576	ExpressionStatement	 
>2577	UnaryExpression	++ first2
>2578	Identifier	first2
>2579	IncDec	++
>2580	ExpressionStatement	 
>2581	UnaryExpression	++ first1
>2582	Identifier	first1
>2583	IncDec	++
>2584	ExpressionStatement	 
>2585	CallExpression	BOOST_ASSERT ( first2 -> native ( ) == first1 -> native ( ) )
>2586	ArgumentList	first2 -> native ( ) == first1 -> native ( )
>2587	Argument	first2 -> native ( ) == first1 -> native ( )
>2588	EqualityExpression	first2 -> native ( ) == first1 -> native ( )
>2589	CallExpression	first1 -> native ( )
>2590	ArgumentList	 
>2591	Callee	first1 -> native
>2592	PtrMemberAccess	first1 -> native
>2593	Identifier	native
>2594	Identifier	first1
>2595	CallExpression	first2 -> native ( )
>2596	ArgumentList	 
>2597	Callee	first2 -> native
>2598	PtrMemberAccess	first2 -> native
>2599	Identifier	native
>2600	Identifier	first2
>2601	Callee	BOOST_ASSERT
>2602	Identifier	BOOST_ASSERT
>2603	IfStatement	if ( first2 -> native ( ) < first1 -> native ( ) )
>2604	ReturnStatement	 
>2605	PrimaryExpression	1
>2606	Condition	 
>2607	RelationalExpression	first2 -> native ( ) < first1 -> native ( )
>2608	CallExpression	first1 -> native ( )
>2609	ArgumentList	 
>2610	Callee	first1 -> native
>2611	PtrMemberAccess	first1 -> native
>2612	Identifier	native
>2613	Identifier	first1
>2614	CallExpression	first2 -> native ( )
>2615	ArgumentList	 
>2616	Callee	first2 -> native
>2617	PtrMemberAccess	first2 -> native
>2618	Identifier	native
>2619	Identifier	first2
>2620	IfStatement	if ( first1 -> native ( ) < first2 -> native ( ) )
>2621	ReturnStatement	 
>2622	UnaryOp	- 1
>2623	PrimaryExpression	1
>2624	UnaryOperator	-
>2625	Condition	 
>2626	RelationalExpression	first1 -> native ( ) < first2 -> native ( )
>2627	CallExpression	first2 -> native ( )
>2628	ArgumentList	 
>2629	Callee	first2 -> native
>2630	PtrMemberAccess	first2 -> native
>2631	Identifier	native
>2632	Identifier	first2
>2633	CallExpression	first1 -> native ( )
>2634	ArgumentList	 
>2635	Callee	first1 -> native
>2636	PtrMemberAccess	first1 -> native
>2637	Identifier	native
>2638	Identifier	first1
>2639	Condition	 
>2640	AndExpression	first1 != last1 && first2 != last2
>2641	EqualityExpression	first2 != last2
>2642	Identifier	last2
>2643	Identifier	first2
>2644	EqualityExpression	first1 != last1
>2645	Identifier	last1
>2646	Identifier	first1
>2658	FunctionDef	path 
>2659	ParameterList	 
>2660	ReturnType	path 
>2661	CompoundStatement	 
>2662	ReturnStatement	 
>2663	Identifier	itr
>2664	IfStatement	if ( itr . m_element . m_pathname == preferred_separator_string )
>2665	ExpressionStatement	 
>2666	AssignmentExpr	itr . m_element . m_pathname = separator_string
>2667	Identifier	separator_string
>2668	MemberAccess	itr . m_element . m_pathname
>2669	Identifier	m_pathname
>2670	MemberAccess	itr . m_element
>2671	Identifier	m_element
>2672	Identifier	itr
>2673	Condition	 
>2674	EqualityExpression	itr . m_element . m_pathname == preferred_separator_string
>2675	Identifier	preferred_separator_string
>2676	MemberAccess	itr . m_element . m_pathname
>2677	Identifier	m_pathname
>2678	MemberAccess	itr . m_element
>2679	Identifier	m_element
>2680	Identifier	itr
>2681	ExpressionStatement	 
>2682	AssignmentExpr	itr . m_element = m_pathname . substr ( itr . m_pos , element_size )
>2683	CallExpression	m_pathname . substr ( itr . m_pos , element_size )
>2684	ArgumentList	itr . m_pos
>2685	Argument	element_size
>2686	Identifier	element_size
>2687	Argument	itr . m_pos
>2688	MemberAccess	itr . m_pos
>2689	Identifier	m_pos
>2690	Identifier	itr
>2691	Callee	m_pathname . substr
>2692	MemberAccess	m_pathname . substr
>2693	Identifier	substr
>2694	Identifier	m_pathname
>2695	MemberAccess	itr . m_element
>2696	Identifier	m_element
>2697	Identifier	itr
>2698	ExpressionStatement	 
>2699	CallExpression	first_element ( m_pathname , itr . m_pos , element_size )
>2700	ArgumentList	m_pathname
>2701	Argument	element_size
>2702	Identifier	element_size
>2703	Argument	itr . m_pos
>2704	MemberAccess	itr . m_pos
>2705	Identifier	m_pos
>2706	Identifier	itr
>2707	Argument	m_pathname
>2708	Identifier	m_pathname
>2709	Callee	first_element
>2710	Identifier	first_element
>2711	IdentifierDeclStatement	 
>2712	IdentifierDecl	element_size
>2713	Identifier	element_size
>2714	IdentifierDeclType	size_type
>2715	ExpressionStatement	 
>2716	AssignmentExpr	itr . m_path_ptr = this
>2717	Identifier	this
>2718	MemberAccess	itr . m_path_ptr
>2719	Identifier	m_path_ptr
>2720	Identifier	itr
>2721	IdentifierDeclStatement	 
>2722	IdentifierDecl	itr
>2723	Identifier	itr
>2724	IdentifierDeclType	iterator
>2739	FunctionDef	path 
>2740	ParameterList	 
>2741	ReturnType	path 
>2742	CompoundStatement	 
>2743	ReturnStatement	 
>2744	Identifier	itr
>2745	ExpressionStatement	 
>2746	AssignmentExpr	itr . m_pos = m_pathname . size ( )
>2747	CallExpression	m_pathname . size ( )
>2748	ArgumentList	 
>2749	Callee	m_pathname . size
>2750	MemberAccess	m_pathname . size
>2751	Identifier	size
>2752	Identifier	m_pathname
>2753	MemberAccess	itr . m_pos
>2754	Identifier	m_pos
>2755	Identifier	itr
>2756	ExpressionStatement	 
>2757	AssignmentExpr	itr . m_path_ptr = this
>2758	Identifier	this
>2759	MemberAccess	itr . m_path_ptr
>2760	Identifier	m_path_ptr
>2761	Identifier	itr
>2762	IdentifierDeclStatement	 
>2763	IdentifierDecl	itr
>2764	Identifier	itr
>2765	IdentifierDeclType	iterator
>2775	FunctionDef	path 
>2776	ParameterList	path 
>2777	Parameter	 
>2778	Identifier	it
>2779	ParameterType	path 
>2780	ReturnType	void
>2781	CompoundStatement	 
>2782	ExpressionStatement	 
>2783	AssignmentExpr	it . m_element = it . m_path_ptr -> m_pathname . substr ( it . m_pos , end_pos - it . m_pos )
>2784	CallExpression	it . m_path_ptr -> m_pathname . substr ( it . m_pos , end_pos - it . m_pos )
>2785	ArgumentList	it . m_pos
>2786	Argument	end_pos - it . m_pos
>2787	AdditiveExpression	end_pos - it . m_pos
>2788	MemberAccess	it . m_pos
>2789	Identifier	m_pos
>2790	Identifier	it
>2791	Identifier	end_pos
>2792	Argument	it . m_pos
>2793	MemberAccess	it . m_pos
>2794	Identifier	m_pos
>2795	Identifier	it
>2796	Callee	it . m_path_ptr -> m_pathname . substr
>2797	MemberAccess	it . m_path_ptr -> m_pathname . substr
>2798	Identifier	substr
>2799	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2800	Identifier	m_pathname
>2801	MemberAccess	it . m_path_ptr
>2802	Identifier	m_path_ptr
>2803	Identifier	it
>2804	MemberAccess	it . m_element
>2805	Identifier	m_element
>2806	Identifier	it
>2807	IfStatement	if ( end_pos == string_type 
>2808	ExpressionStatement	 
>2809	AssignmentExpr	end_pos = it . m_path_ptr -> m_pathname . size ( )
>2810	CallExpression	it . m_path_ptr -> m_pathname . size ( )
>2811	ArgumentList	 
>2812	Callee	it . m_path_ptr -> m_pathname . size
>2813	MemberAccess	it . m_path_ptr -> m_pathname . size
>2814	Identifier	size
>2815	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2816	Identifier	m_pathname
>2817	MemberAccess	it . m_path_ptr
>2818	Identifier	m_path_ptr
>2819	Identifier	it
>2820	Identifier	end_pos
>2821	Condition	 
>2822	EqualityExpression	end_pos == string_type 
>2823	Identifier	string_type 
>2824	Identifier	end_pos
>2825	IdentifierDeclStatement	 
>2826	IdentifierDecl	end_pos ( it . m_path_ptr -> m_pathname . find_first_of ( separators , it . m_pos ) )
>2827	CallExpression	it . m_path_ptr -> m_pathname . find_first_of ( separators , it . m_pos )
>2828	ArgumentList	separators
>2829	Argument	it . m_pos
>2830	MemberAccess	it . m_pos
>2831	Identifier	m_pos
>2832	Identifier	it
>2833	Argument	separators
>2834	Identifier	separators
>2835	Callee	it . m_path_ptr -> m_pathname . find_first_of
>2836	MemberAccess	it . m_path_ptr -> m_pathname . find_first_of
>2837	Identifier	find_first_of
>2838	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2839	Identifier	m_pathname
>2840	MemberAccess	it . m_path_ptr
>2841	Identifier	m_path_ptr
>2842	Identifier	it
>2843	Identifier	end_pos
>2844	IdentifierDeclType	size_type
>2845	IfStatement	if ( is_separator ( it . m_path_ptr -> m_pathname [ it . m_pos ] ) )
>2846	CompoundStatement	 
>2847	IfStatement	if ( it . m_pos == it . m_path_ptr -> m_pathname . size ( ) && ! is_root_separator ( it . m_path_ptr -> m_pathname , \
>2848	CompoundStatement	 
>2849	ReturnStatement	 
>2850	ExpressionStatement	 
>2851	AssignmentExpr	it . m_element = dot_path
>2852	Identifier	dot_path
>2853	MemberAccess	it . m_element
>2854	Identifier	m_element
>2855	Identifier	it
>2856	ExpressionStatement	 
>2857	UnaryExpression	-- it . m_pos
>2858	MemberAccess	it . m_pos
>2859	Identifier	m_pos
>2860	Identifier	it
>2861	IncDec	--
>2862	Condition	 
>2863	AndExpression	it . m_pos == it . m_path_ptr -> m_pathname . size ( ) && ! is_root_separator ( it . m_path_ptr -> m_\
>2864	UnaryOp	! is_root_separator ( it . m_path_ptr -> m_pathname , it . m_pos - 1 )
>2865	CallExpression	is_root_separator ( it . m_path_ptr -> m_pathname , it . m_pos - 1 )
>2866	ArgumentList	it . m_path_ptr -> m_pathname
>2867	Argument	it . m_pos - 1
>2868	AdditiveExpression	it . m_pos - 1
>2869	PrimaryExpression	1
>2870	MemberAccess	it . m_pos
>2871	Identifier	m_pos
>2872	Identifier	it
>2873	Argument	it . m_path_ptr -> m_pathname
>2874	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2875	Identifier	m_pathname
>2876	MemberAccess	it . m_path_ptr
>2877	Identifier	m_path_ptr
>2878	Identifier	it
>2879	Callee	is_root_separator
>2880	Identifier	is_root_separator
>2881	UnaryOperator	!
>2882	EqualityExpression	it . m_pos == it . m_path_ptr -> m_pathname . size ( )
>2883	CallExpression	it . m_path_ptr -> m_pathname . size ( )
>2884	ArgumentList	 
>2885	Callee	it . m_path_ptr -> m_pathname . size
>2886	MemberAccess	it . m_path_ptr -> m_pathname . size
>2887	Identifier	size
>2888	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2889	Identifier	m_pathname
>2890	MemberAccess	it . m_path_ptr
>2891	Identifier	m_path_ptr
>2892	Identifier	it
>2893	MemberAccess	it . m_pos
>2894	Identifier	m_pos
>2895	Identifier	it
>2896	WhileStatement	while ( it . m_pos != it . m_path_ptr -> m_pathname . size ( ) && is_separator ( it . m_path_ptr -> m_pathname [ \
>2897	CompoundStatement	 
>2898	ExpressionStatement	 
>2899	UnaryExpression	++ it . m_pos
>2900	MemberAccess	it . m_pos
>2901	Identifier	m_pos
>2902	Identifier	it
>2903	IncDec	++
>2904	Condition	 
>2905	AndExpression	it . m_pos != it . m_path_ptr -> m_pathname . size ( ) && is_separator ( it . m_path_ptr -> m_pathname [ \
>2906	CallExpression	is_separator ( it . m_path_ptr -> m_pathname [ it . m_pos ] )
>2907	ArgumentList	it . m_path_ptr -> m_pathname [ it . m_pos ]
>2908	Argument	it . m_path_ptr -> m_pathname [ it . m_pos ]
>2909	ArrayIndexing	it . m_path_ptr -> m_pathname [ it . m_pos ]
>2910	MemberAccess	it . m_pos
>2911	Identifier	m_pos
>2912	Identifier	it
>2913	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2914	Identifier	m_pathname
>2915	MemberAccess	it . m_path_ptr
>2916	Identifier	m_path_ptr
>2917	Identifier	it
>2918	Callee	is_separator
>2919	Identifier	is_separator
>2920	EqualityExpression	it . m_pos != it . m_path_ptr -> m_pathname . size ( )
>2921	CallExpression	it . m_path_ptr -> m_pathname . size ( )
>2922	ArgumentList	 
>2923	Callee	it . m_path_ptr -> m_pathname . size
>2924	MemberAccess	it . m_path_ptr -> m_pathname . size
>2925	Identifier	size
>2926	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2927	Identifier	m_pathname
>2928	MemberAccess	it . m_path_ptr
>2929	Identifier	m_path_ptr
>2930	Identifier	it
>2931	MemberAccess	it . m_pos
>2932	Identifier	m_pos
>2933	Identifier	it
>2934	CompoundStatement	 
>2935	ReturnStatement	 
>2936	ExpressionStatement	 
>2937	AssignmentExpr	it . m_element . m_pathname = separator
>2938	Identifier	separator
>2939	MemberAccess	it . m_element . m_pathname
>2940	Identifier	m_pathname
>2941	MemberAccess	it . m_element
>2942	Identifier	m_element
>2943	Identifier	it
>2944	Statement	 
>2945	Statement	 
>2946	Statement	 
>2947	Statement	 
>2948	Statement	 
>2949	Statement	 
>2950	Statement	 
>2951	Statement	 
>2952	Statement	 
>2953	Statement	 
>2954	Statement	 
>2955	Statement	 
>2956	Statement	 
>2957	Statement	 
>2958	Statement	 
>2959	Statement	 
>2960	Statement	 
>2961	Statement	 
>2962	Statement	 
>2963	Statement	 
>2964	Statement	 
>2965	Statement	 
>2966	Statement	 
>2967	Statement	 
>2968	Statement	 
>2969	Statement	 
>2970	Statement	 
>2971	Statement	 
>2972	Condition	 
>2973	CallExpression	is_separator ( it . m_path_ptr -> m_pathname [ it . m_pos ] )
>2974	ArgumentList	it . m_path_ptr -> m_pathname [ it . m_pos ]
>2975	Argument	it . m_path_ptr -> m_pathname [ it . m_pos ]
>2976	ArrayIndexing	it . m_path_ptr -> m_pathname [ it . m_pos ]
>2977	MemberAccess	it . m_pos
>2978	Identifier	m_pos
>2979	Identifier	it
>2980	PtrMemberAccess	it . m_path_ptr -> m_pathname
>2981	Identifier	m_pathname
>2982	MemberAccess	it . m_path_ptr
>2983	Identifier	m_path_ptr
>2984	Identifier	it
>2985	Callee	is_separator
>2986	Identifier	is_separator
>2987	IdentifierDeclStatement	 
>2988	IdentifierDecl	was_net ( it . m_element . m_pathname . size ( ) > 2 && is_separator ( it . m_element . m_pathname [ 0 ] ) && is_\
>2989	AndExpression	it . m_element . m_pathname . size ( ) > 2 && is_separator ( it . m_element . m_pathname [ 0 ] ) && \
>2990	AndExpression	is_separator ( it . m_element . m_pathname [ 0 ] ) && is_separator ( it . m_element . m_pathname [ 1 ] ) && ! \
>2991	AndExpression	is_separator ( it . m_element . m_pathname [ 1 ] ) && ! is_separator ( it . m_element . m_pathname [ \
>2992	UnaryOp	! is_separator ( it . m_element . m_pathname [ 2 ] )
>2993	CallExpression	is_separator ( it . m_element . m_pathname [ 2 ] )
>2994	ArgumentList	it . m_element . m_pathname [ 2 ]
>2995	Argument	it . m_element . m_pathname [ 2 ]
>2996	ArrayIndexing	it . m_element . m_pathname [ 2 ]
>2997	PrimaryExpression	2
>2998	MemberAccess	it . m_element . m_pathname
>2999	Identifier	m_pathname
>3000	MemberAccess	it . m_element
>3001	Identifier	m_element
>3002	Identifier	it
>3003	Callee	is_separator
>3004	Identifier	is_separator
>3005	UnaryOperator	!
>3006	CallExpression	is_separator ( it . m_element . m_pathname [ 1 ] )
>3007	ArgumentList	it . m_element . m_pathname [ 1 ]
>3008	Argument	it . m_element . m_pathname [ 1 ]
>3009	ArrayIndexing	it . m_element . m_pathname [ 1 ]
>3010	PrimaryExpression	1
>3011	MemberAccess	it . m_element . m_pathname
>3012	Identifier	m_pathname
>3013	MemberAccess	it . m_element
>3014	Identifier	m_element
>3015	Identifier	it
>3016	Callee	is_separator
>3017	Identifier	is_separator
>3018	CallExpression	is_separator ( it . m_element . m_pathname [ 0 ] )
>3019	ArgumentList	it . m_element . m_pathname [ 0 ]
>3020	Argument	it . m_element . m_pathname [ 0 ]
>3021	ArrayIndexing	it . m_element . m_pathname [ 0 ]
>3022	PrimaryExpression	0
>3023	MemberAccess	it . m_element . m_pathname
>3024	Identifier	m_pathname
>3025	MemberAccess	it . m_element
>3026	Identifier	m_element
>3027	Identifier	it
>3028	Callee	is_separator
>3029	Identifier	is_separator
>3030	RelationalExpression	it . m_element . m_pathname . size ( ) > 2
>3031	PrimaryExpression	2
>3032	CallExpression	it . m_element . m_pathname . size ( )
>3033	ArgumentList	 
>3034	Callee	it . m_element . m_pathname . size
>3035	MemberAccess	it . m_element . m_pathname . size
>3036	Identifier	size
>3037	MemberAccess	it . m_element . m_pathname
>3038	Identifier	m_pathname
>3039	MemberAccess	it . m_element
>3040	Identifier	m_element
>3041	Identifier	it
>3042	Identifier	was_net
>3043	IdentifierDeclType	bool
>3044	IfStatement	if ( it . m_pos == it . m_path_ptr -> m_pathname . size ( ) )
>3045	CompoundStatement	 
>3046	ReturnStatement	 
>3047	ExpressionStatement	 
>3048	CallExpression	it . m_element . clear ( )
>3049	ArgumentList	 
>3050	Callee	it . m_element . clear
>3051	MemberAccess	it . m_element . clear
>3052	Identifier	clear
>3053	MemberAccess	it . m_element
>3054	Identifier	m_element
>3055	Identifier	it
>3056	Condition	 
>3057	EqualityExpression	it . m_pos == it . m_path_ptr -> m_pathname . size ( )
>3058	CallExpression	it . m_path_ptr -> m_pathname . size ( )
>3059	ArgumentList	 
>3060	Callee	it . m_path_ptr -> m_pathname . size
>3061	MemberAccess	it . m_path_ptr -> m_pathname . size
>3062	Identifier	size
>3063	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3064	Identifier	m_pathname
>3065	MemberAccess	it . m_path_ptr
>3066	Identifier	m_path_ptr
>3067	Identifier	it
>3068	MemberAccess	it . m_pos
>3069	Identifier	m_pos
>3070	Identifier	it
>3071	ExpressionStatement	 
>3072	AssignmentExpr	it . m_pos += it . m_element . m_pathname . size ( )
>3073	CallExpression	it . m_element . m_pathname . size ( )
>3074	ArgumentList	 
>3075	Callee	it . m_element . m_pathname . size
>3076	MemberAccess	it . m_element . m_pathname . size
>3077	Identifier	size
>3078	MemberAccess	it . m_element . m_pathname
>3079	Identifier	m_pathname
>3080	MemberAccess	it . m_element
>3081	Identifier	m_element
>3082	Identifier	it
>3083	MemberAccess	it . m_pos
>3084	Identifier	m_pos
>3085	Identifier	it
>3086	ExpressionStatement	 
>3087	CallExpression	BOOST_ASSERT_MSG ( it . m_pos < it . m_path_ptr -> m_pathname . size ( ) , \"path
>3088	ArgumentList	it . m_pos < it . m_path_ptr -> m_pathname . size ( )
>3089	Argument	\"path
>3090	PrimaryExpression	\"path
>3091	Argument	it . m_pos < it . m_path_ptr -> m_pathname . size ( )
>3092	RelationalExpression	it . m_pos < it . m_path_ptr -> m_pathname . size ( )
>3093	CallExpression	it . m_path_ptr -> m_pathname . size ( )
>3094	ArgumentList	 
>3095	Callee	it . m_path_ptr -> m_pathname . size
>3096	MemberAccess	it . m_path_ptr -> m_pathname . size
>3097	Identifier	size
>3098	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3099	Identifier	m_pathname
>3100	MemberAccess	it . m_path_ptr
>3101	Identifier	m_path_ptr
>3102	Identifier	it
>3103	MemberAccess	it . m_pos
>3104	Identifier	m_pos
>3105	Identifier	it
>3106	Callee	BOOST_ASSERT_MSG
>3107	Identifier	BOOST_ASSERT_MSG
>3136	FunctionDef	path 
>3137	ParameterList	path 
>3138	Parameter	 
>3139	Identifier	it
>3140	ParameterType	path 
>3141	ReturnType	void
>3142	CompoundStatement	 
>3143	IfStatement	if ( it . m_element . m_pathname == preferred_separator_string )
>3144	ExpressionStatement	 
>3145	AssignmentExpr	it . m_element . m_pathname = separator_string
>3146	Identifier	separator_string
>3147	MemberAccess	it . m_element . m_pathname
>3148	Identifier	m_pathname
>3149	MemberAccess	it . m_element
>3150	Identifier	m_element
>3151	Identifier	it
>3152	Condition	 
>3153	EqualityExpression	it . m_element . m_pathname == preferred_separator_string
>3154	Identifier	preferred_separator_string
>3155	MemberAccess	it . m_element . m_pathname
>3156	Identifier	m_pathname
>3157	MemberAccess	it . m_element
>3158	Identifier	m_element
>3159	Identifier	it
>3160	ExpressionStatement	 
>3161	AssignmentExpr	it . m_element = it . m_path_ptr -> m_pathname . substr ( it . m_pos , end_pos - it . m_pos )
>3162	CallExpression	it . m_path_ptr -> m_pathname . substr ( it . m_pos , end_pos - it . m_pos )
>3163	ArgumentList	it . m_pos
>3164	Argument	end_pos - it . m_pos
>3165	AdditiveExpression	end_pos - it . m_pos
>3166	MemberAccess	it . m_pos
>3167	Identifier	m_pos
>3168	Identifier	it
>3169	Identifier	end_pos
>3170	Argument	it . m_pos
>3171	MemberAccess	it . m_pos
>3172	Identifier	m_pos
>3173	Identifier	it
>3174	Callee	it . m_path_ptr -> m_pathname . substr
>3175	MemberAccess	it . m_path_ptr -> m_pathname . substr
>3176	Identifier	substr
>3177	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3178	Identifier	m_pathname
>3179	MemberAccess	it . m_path_ptr
>3180	Identifier	m_path_ptr
>3181	Identifier	it
>3182	MemberAccess	it . m_element
>3183	Identifier	m_element
>3184	Identifier	it
>3185	ExpressionStatement	 
>3186	AssignmentExpr	it . m_pos = filename_pos ( it . m_path_ptr -> m_pathname , end_pos )
>3187	CallExpression	filename_pos ( it . m_path_ptr -> m_pathname , end_pos )
>3188	ArgumentList	it . m_path_ptr -> m_pathname
>3189	Argument	end_pos
>3190	Identifier	end_pos
>3191	Argument	it . m_path_ptr -> m_pathname
>3192	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3193	Identifier	m_pathname
>3194	MemberAccess	it . m_path_ptr
>3195	Identifier	m_path_ptr
>3196	Identifier	it
>3197	Callee	filename_pos
>3198	Identifier	filename_pos
>3199	MemberAccess	it . m_pos
>3200	Identifier	m_pos
>3201	Identifier	it
>3202	ForStatement	for ( ; end_pos > 0 && ( end_pos - 1 ) != root_dir_pos && is_separator ( it . m_path_ptr -> m_pathname [ end_pos \
>3203	CompoundStatement	 
>3204	UnaryExpression	 
>3205	Identifier	end_pos
>3206	IncDec	--
>3207	Condition	 
>3208	AndExpression	end_pos > 0 && ( end_pos - 1 ) != root_dir_pos && is_separator ( it . m_path_ptr -> m_pathname [ end_\
>3209	AndExpression	( end_pos - 1 ) != root_dir_pos && is_separator ( it . m_path_ptr -> m_pathname [ end_pos - 1 ] )
>3210	CallExpression	is_separator ( it . m_path_ptr -> m_pathname [ end_pos - 1 ] )
>3211	ArgumentList	it . m_path_ptr -> m_pathname [ end_pos - 1 ]
>3212	Argument	it . m_path_ptr -> m_pathname [ end_pos - 1 ]
>3213	ArrayIndexing	it . m_path_ptr -> m_pathname [ end_pos - 1 ]
>3214	AdditiveExpression	end_pos - 1
>3215	PrimaryExpression	1
>3216	Identifier	end_pos
>3217	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3218	Identifier	m_pathname
>3219	MemberAccess	it . m_path_ptr
>3220	Identifier	m_path_ptr
>3221	Identifier	it
>3222	Callee	is_separator
>3223	Identifier	is_separator
>3224	EqualityExpression	( end_pos - 1 ) != root_dir_pos
>3225	Identifier	root_dir_pos
>3226	AdditiveExpression	end_pos - 1
>3227	PrimaryExpression	1
>3228	Identifier	end_pos
>3229	RelationalExpression	end_pos > 0
>3230	PrimaryExpression	0
>3231	Identifier	end_pos
>3232	IdentifierDeclStatement	 
>3233	IdentifierDecl	root_dir_pos ( root_directory_start ( it . m_path_ptr -> m_pathname , end_pos ) )
>3234	CallExpression	root_directory_start ( it . m_path_ptr -> m_pathname , end_pos )
>3235	ArgumentList	it . m_path_ptr -> m_pathname
>3236	Argument	end_pos
>3237	Identifier	end_pos
>3238	Argument	it . m_path_ptr -> m_pathname
>3239	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3240	Identifier	m_pathname
>3241	MemberAccess	it . m_path_ptr
>3242	Identifier	m_path_ptr
>3243	Identifier	it
>3244	Callee	root_directory_start
>3245	Identifier	root_directory_start
>3246	Identifier	root_dir_pos
>3247	IdentifierDeclType	size_type
>3248	IfStatement	if ( it . m_pos == it . m_path_ptr -> m_pathname . size ( ) && it . m_path_ptr -> m_pathname . size ( ) > 1 && is_\
>3249	CompoundStatement	 
>3250	ReturnStatement	 
>3251	ExpressionStatement	 
>3252	AssignmentExpr	it . m_element = dot_path
>3253	Identifier	dot_path
>3254	MemberAccess	it . m_element
>3255	Identifier	m_element
>3256	Identifier	it
>3257	ExpressionStatement	 
>3258	UnaryExpression	-- it . m_pos
>3259	MemberAccess	it . m_pos
>3260	Identifier	m_pos
>3261	Identifier	it
>3262	IncDec	--
>3263	Condition	 
>3264	AndExpression	it . m_pos == it . m_path_ptr -> m_pathname . size ( ) && it . m_path_ptr -> m_pathname . size ( ) > \
>3265	AndExpression	it . m_path_ptr -> m_pathname . size ( ) > 1 && is_separator ( it . m_path_ptr -> m_pathname [ it . \
>3266	AndExpression	is_separator ( it . m_path_ptr -> m_pathname [ it . m_pos - 1 ] ) && ! is_root_separator ( it . m_path_\
>3267	UnaryOp	! is_root_separator ( it . m_path_ptr -> m_pathname , it . m_pos - 1 )
>3268	CallExpression	is_root_separator ( it . m_path_ptr -> m_pathname , it . m_pos - 1 )
>3269	ArgumentList	it . m_path_ptr -> m_pathname
>3270	Argument	it . m_pos - 1
>3271	AdditiveExpression	it . m_pos - 1
>3272	PrimaryExpression	1
>3273	MemberAccess	it . m_pos
>3274	Identifier	m_pos
>3275	Identifier	it
>3276	Argument	it . m_path_ptr -> m_pathname
>3277	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3278	Identifier	m_pathname
>3279	MemberAccess	it . m_path_ptr
>3280	Identifier	m_path_ptr
>3281	Identifier	it
>3282	Callee	is_root_separator
>3283	Identifier	is_root_separator
>3284	UnaryOperator	!
>3285	CallExpression	is_separator ( it . m_path_ptr -> m_pathname [ it . m_pos - 1 ] )
>3286	ArgumentList	it . m_path_ptr -> m_pathname [ it . m_pos - 1 ]
>3287	Argument	it . m_path_ptr -> m_pathname [ it . m_pos - 1 ]
>3288	ArrayIndexing	it . m_path_ptr -> m_pathname [ it . m_pos - 1 ]
>3289	AdditiveExpression	it . m_pos - 1
>3290	PrimaryExpression	1
>3291	MemberAccess	it . m_pos
>3292	Identifier	m_pos
>3293	Identifier	it
>3294	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3295	Identifier	m_pathname
>3296	MemberAccess	it . m_path_ptr
>3297	Identifier	m_path_ptr
>3298	Identifier	it
>3299	Callee	is_separator
>3300	Identifier	is_separator
>3301	RelationalExpression	it . m_path_ptr -> m_pathname . size ( ) > 1
>3302	PrimaryExpression	1
>3303	CallExpression	it . m_path_ptr -> m_pathname . size ( )
>3304	ArgumentList	 
>3305	Callee	it . m_path_ptr -> m_pathname . size
>3306	MemberAccess	it . m_path_ptr -> m_pathname . size
>3307	Identifier	size
>3308	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3309	Identifier	m_pathname
>3310	MemberAccess	it . m_path_ptr
>3311	Identifier	m_path_ptr
>3312	Identifier	it
>3313	EqualityExpression	it . m_pos == it . m_path_ptr -> m_pathname . size ( )
>3314	CallExpression	it . m_path_ptr -> m_pathname . size ( )
>3315	ArgumentList	 
>3316	Callee	it . m_path_ptr -> m_pathname . size
>3317	MemberAccess	it . m_path_ptr -> m_pathname . size
>3318	Identifier	size
>3319	PtrMemberAccess	it . m_path_ptr -> m_pathname
>3320	Identifier	m_pathname
>3321	MemberAccess	it . m_path_ptr
>3322	Identifier	m_path_ptr
>3323	Identifier	it
>3324	MemberAccess	it . m_pos
>3325	Identifier	m_pos
>3326	Identifier	it
>3327	IdentifierDeclStatement	 
>3328	IdentifierDecl	end_pos ( it . m_pos )
>3329	MemberAccess	it . m_pos
>3330	Identifier	m_pos
>3331	Identifier	it
>3332	Identifier	end_pos
>3333	IdentifierDeclType	size_type
>3334	ExpressionStatement	 
>3335	CallExpression	BOOST_ASSERT_MSG ( it . m_pos , \"path
>3336	ArgumentList	it . m_pos
>3337	Argument	\"path
>3338	PrimaryExpression	\"path
>3339	Argument	it . m_pos
>3340	MemberAccess	it . m_pos
>3341	Identifier	m_pos
>3342	Identifier	it
>3343	Callee	BOOST_ASSERT_MSG
>3344	Identifier	BOOST_ASSERT_MSG
>3371	FunctionDef	default_locale ()
>3372	ParameterList	 
>3373	ReturnType	inline std 
>3374	CompoundStatement	 
>3375	ReturnStatement	 
>3376	Identifier	loc
>3377	ExpressionStatement	 
>3378	Statement	 
>3379	Statement	 
>3380	Statement	 
>3381	Statement	 
>3382	Statement	 
>3383	Statement	 
>3384	Statement	 
>3385	Statement	 
>3386	Statement	 
>3387	Statement	 
>3388	IdentifierDeclStatement	 
>3389	IdentifierDecl	global_loc = std 
>3390	AssignmentExpr	global_loc = std 
>3391	CallExpression	std 
>3392	ArgumentList	 
>3393	Callee	std 
>3394	Identifier	std 
>3395	Identifier	global_loc
>3396	Identifier	global_loc
>3397	IdentifierDeclType	std 
>3404	FunctionDef	path_locale ()
>3405	ParameterList	 
>3406	ReturnType	inline std 
>3407	CompoundStatement	 
>3408	ReturnStatement	 
>3409	Identifier	loc
>3410	IdentifierDeclStatement	 
>3411	IdentifierDecl	loc ( default_locale ( ) )
>3412	CallExpression	default_locale ( )
>3413	ArgumentList	 
>3414	Callee	default_locale
>3415	Identifier	default_locale
>3416	Identifier	loc
>3417	IdentifierDeclType	std 
>3418	Statement	 
>3423	FunctionDef	codecvt_facet_ptr ()
>3424	ParameterList	 
>3425	ReturnType	inline const path 
>3426	CompoundStatement	 
>3427	ReturnStatement	 
>3428	Identifier	facet
>3429	ExpressionStatement	 
>3430	Statement	 
>3431	Statement	 
>3432	Statement	 
>3433	Statement	 
>3434	Statement	 
>3435	Statement	 
>3436	Statement	 
>3437	Statement	 
>3438	Statement	 
>3439	Statement	 
>3440	Statement	 
>3441	Statement	 
>3442	Statement	 
>3443	Statement	 
>3444	Statement	 
>3445	Statement	 
>3446	Statement	 
>3447	Statement	 
>3448	Statement	 
>3449	Statement	 
>3450	Statement	 
>3451	Statement	 
>3452	Statement	 
>3453	Statement	 
>3454	Statement	 
>3455	Statement	 
>3456	Statement	 
>3457	Statement	 
>3458	Statement	 
>3459	Statement	 
>3460	Statement	 
>3461	Statement	 
>3462	Statement	 
>3463	Statement	 
>3464	Statement	 
>3465	Statement	 
>3466	Statement	 
>3467	Statement	 
>3468	Statement	 
>3469	Statement	 
>3470	Statement	 
>3479	FunctionDef	path 
>3480	ParameterList	 
>3481	ReturnType	const path 
>3482	CompoundStatement	 
>3483	ReturnStatement	 
>3484	UnaryOp	* codecvt_facet_ptr ( )
>3485	CallExpression	codecvt_facet_ptr ( )
>3486	ArgumentList	 
>3487	Callee	codecvt_facet_ptr
>3488	Identifier	codecvt_facet_ptr
>3489	UnaryOperator	*
>3490	ExpressionStatement	 
>3491	CallExpression	BOOST_ASSERT_MSG ( codecvt_facet_ptr ( ) , \"codecvt_facet_ptr() facet hasn't been properly initialized\" )
>3492	ArgumentList	codecvt_facet_ptr ( )
>3493	Argument	\"codecvt_facet_ptr() facet hasn't been properly initialized\"
>3494	PrimaryExpression	\"codecvt_facet_ptr() facet hasn't been properly initialized\"
>3495	Argument	codecvt_facet_ptr ( )
>3496	CallExpression	codecvt_facet_ptr ( )
>3497	ArgumentList	 
>3498	Callee	codecvt_facet_ptr
>3499	Identifier	codecvt_facet_ptr
>3500	Callee	BOOST_ASSERT_MSG
>3501	Identifier	BOOST_ASSERT_MSG
>3508	FunctionDef	path 
>3509	ParameterList	const std 
>3510	Parameter	 
>3511	Identifier	loc
>3512	ParameterType	const std 
>3513	ReturnType	std 
>3514	CompoundStatement	 
>3515	ReturnStatement	 
>3516	Identifier	temp
>3517	ExpressionStatement	 
>3518	CallExpression	path_locale ( )
>3519	ArgumentList	 
>3520	Callee	path_locale
>3521	Identifier	path_locale
>3522	Statement	 
>3523	Statement	 
>3524	Statement	 
>3525	Statement	 
>3526	Statement	 
>3527	Statement	 
>3528	Statement	 
>3529	Statement	 
>3530	Statement	 
>3531	Statement	 
>3532	Statement	 
>3533	Statement	 
>3534	Statement	 
>3535	Statement	 
>3536	Statement	 
>3537	Statement	 
>3538	Statement	 
>3539	Statement	 
>3540	Statement	 
>3541	Statement	 
>3542	Statement	 
>3543	Statement	 
>3544	ExpressionStatement	 
>3545	AssignmentExpr	path_locale ( ) = loc
>3546	Identifier	loc
>3547	CallExpression	path_locale ( )
>3548	ArgumentList	 
>3549	Callee	path_locale
>3550	Identifier	path_locale
>3551	IdentifierDeclStatement	 
>3552	IdentifierDecl	temp ( path_locale ( ) )
>3553	CallExpression	path_locale ( )
>3554	ArgumentList	 
>3555	Callee	path_locale
>3556	Identifier	path_locale
>3557	Identifier	temp
>3558	IdentifierDeclType	std 
>3565	FunctionDef	path 
>3566	ParameterList	 
>3567	ReturnType	const path 
>3568	CompoundStatement	 
>3569	ReturnStatement	 
>3570	UnaryOp	* codecvt_facet_ptr
>3571	Identifier	codecvt_facet_ptr
>3572	UnaryOperator	*
>3573	Statement	 
>3574	IdentifierDeclStatement	 
>3575	IdentifierDecl	posix_lazy_initialization ( path 
>3576	CallExpression	path 
>3577	ArgumentList	std 
>3578	Argument	std 
>3579	CallExpression	std 
>3580	ArgumentList	\"\"
>3581	Argument	\"\"
>3582	PrimaryExpression	\"\"
>3583	Callee	std 
>3584	Identifier	std 
>3585	Callee	path 
>3586	Identifier	path 
>3587	Identifier	posix_lazy_initialization
>3588	IdentifierDeclType	std 
>3589	Statement	 
>3590	Statement	 
>3591	Statement	 
>3592	Statement	 
>3593	Statement	 
>3594	Statement	 
>3595	Statement	 
>3596	Statement	 
>3597	Statement	 
>3598	Statement	 
>3599	Statement	 
>3600	Statement	 
>3601	Statement	 
>3602	Statement	 
>3603	Statement	 
>3604	Statement	 
>3605	Statement	 
>3606	Statement	 
>3607	Statement	 
>3608	Statement	 
>3609	Statement	 
>3610	Statement	 
>3611	Statement	 
>3612	Statement	 
>3620	FunctionDef	path 
>3621	ParameterList	const std 
>3622	Parameter	 
>3623	Identifier	loc
>3624	ParameterType	const std 
>3625	ReturnType	std 
>3626	CompoundStatement	 
>3627	ReturnStatement	 
>3628	Identifier	temp
>3629	ExpressionStatement	 
>3630	Identifier	path_locale
>3631	Statement	 
>3632	Statement	 
>3633	Statement	 
>3634	Statement	 
>3635	Statement	 
>3636	Statement	 
>3637	Statement	 
>3638	Statement	 
>3639	Statement	 
>3640	Statement	 
>3641	Statement	 
>3642	Statement	 
>3643	Statement	 
>3644	Statement	 
>3645	Statement	 
>3646	Statement	 
>3647	Statement	 
>3648	Statement	 
>3649	Statement	 
>3650	Statement	 
>3651	ExpressionStatement	 
>3652	AssignmentExpr	path_locale = loc
>3653	Identifier	loc
>3654	Identifier	path_locale
>3655	IdentifierDeclStatement	 
>3656	IdentifierDecl	temp ( path_locale )
>3657	Identifier	path_locale
>3658	Identifier	temp
>3659	IdentifierDeclType	std 
<23=29,28,24
<24=25
<25=27,26
<29=54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30
<73=79,78,74
<74=75
<75=77,76
<79=92,91,90,89,88,87,86,85,84,80
<80=81
<81=83,82
<104=109,105
<105=106
<106=108,107
<109=184,114,110
<110=111
<111=113,112
<114=178,147,115
<115=116
<116=123,117
<117=118
<118=122,119
<119=121,120
<123=129,124
<124=125
<125=127,126
<127=128
<129=130
<130=146,131
<131=144,132
<132=133
<133=134
<134=143,135
<135=137,136
<137=138
<138=140,139
<140=142,141
<144=145
<147=173,154,148
<148=149
<149=153,150
<150=152,151
<154=160,155
<155=156
<156=158,157
<158=159
<160=161
<161=172,162
<162=170,163
<163=164
<164=165
<165=167,166
<167=169,168
<170=171
<173=174
<174=177,176,175
<178=179
<179=183,180
<180=182,181
<184=189,185
<185=186
<186=188,187
<189=190
<190=192,191
<192=193
<193=195,194
<216=221,217
<217=218
<218=220,219
<221=306,226,222
<222=223
<223=225,224
<226=281,250,227
<227=228
<228=233,229
<229=230
<230=232,231
<233=239,234
<234=235
<235=237,236
<237=238
<239=240
<240=249,241
<241=247,242
<242=243
<243=244
<244=246,245
<247=248
<250=276,257,251
<251=252
<252=256,253
<253=255,254
<257=263,258
<258=259
<259=261,260
<261=262
<263=264
<264=275,265
<265=273,266
<266=267
<267=268
<268=270,269
<270=272,271
<273=274
<276=277
<277=280,279,278
<281=282
<282=298,283
<283=297,284
<284=291,285
<285=287,286
<287=288
<288=290,289
<291=293,292
<293=294
<294=296,295
<298=305,299
<299=301,300
<301=302
<302=304,303
<306=311,307
<307=308
<308=310,309
<311=312
<312=316,313
<313=315,314
<332=338,337,333
<333=334
<334=336,335
<338=375,374,373,372,371,370,369,368,367,366,365,364,363,362,361,360,359,358,357,356,355,354,353,352,351,350,349,348,339
<339=340
<340=344,341
<341=342
<342=343
<344=345
<345=347,346
<375=376
<376=381,380,377
<377=379,378
<389=392,391,390
<392=427,426,425,424,423,422,421,420,419,418,417,416,415,414,413,412,411,410,409,408,407,406,405,404,403,402,401,400,393
<393=394
<394=396,395
<396=397
<397=399,398
<427=428
<428=433,432,429
<429=431,430
<440=443,442,441
<443=502,501,500,499,498,497,496,495,494,493,492,491,490,489,488,487,486,485,484,483,482,481,480,479,478,477,476,475,474,473,472,471,470,469,468,467,466,465,464,463,446,444
<444=445
<446=453,449,447
<447=448
<449=450
<450=452,451
<453=454
<454=462,461,455
<455=457,456
<457=458
<458=460,459
<509=515,514,510
<510=511
<511=513,512
<515=562,561,560,559,558,557,556,555,554,553,552,551,550,549,548,547,546,545,544,543,542,541,540,539,538,537,536,535,534,533,532,531,530,529,528,516
<516=517
<517=518
<518=524,519
<519=522,520
<520=521
<522=523
<524=525
<525=527,526
<568=571,570,569
<571=598,597,596,595,594,593,592,591,590,589,588,587,586,585,584,583,582,581,580,579,578,577,576,572
<572=573
<573=575,574
<604=607,606,605
<607=612,608
<608=609
<609=611,610
<612=613
<613=620,614
<614=615
<615=616
<616=618,617
<618=619
<620=621
<621=623,622
<631=637,636,632
<632=633
<633=635,634
<637=682,642,638
<638=639
<639=641,640
<642=673,643
<643=655,644
<644=645
<645=651,646
<646=647
<647=648
<648=650,649
<651=652
<652=654,653
<655=665,656
<656=657
<657=661,658
<658=659
<659=660
<661=662
<662=664,663
<665=666
<666=668,667
<668=670,669
<670=672,671
<673=674
<674=681,675
<675=677,676
<677=678
<678=680,679
<682=683
<683=704,684
<684=685
<685=686
<686=698,687
<687=689,688
<689=690
<690=692,691
<692=694,693
<694=696,695
<696=697
<698=700,699
<700=701
<701=703,702
<704=705
<705=707,706
<724=727,726,725
<727=757,730,728
<728=729
<730=745,731
<731=732
<732=742,733
<733=735,734
<735=736
<736=738,737
<738=740,739
<740=741
<742=744,743
<745=746
<746=756,747
<747=749,748
<749=750
<750=752,751
<752=754,753
<754=755
<757=758
<758=764,763,759
<759=761,760
<761=762
<773=776,775,774
<776=863,862,861,860,859,858,857,856,855,854,853,852,851,850,849,848,847,846,845,844,843,842,841,840,839,838,837,836,835,834,833,832,777,782,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831
<777=778
<778=780,779
<780=781
<782=783
<863=864
<864=870,869,865
<865=867,866
<867=868
<875=878,877,876
<878=913,879
<879=880
<880=909,905,881
<881=903,882
<882=894,883
<883=884
<884=888,885
<885=887,886
<888=890,889
<890=891
<891=893,892
<894=895
<895=897,896
<897=899,898
<899=900
<900=902,901
<903=904
<905=907,906
<907=908
<909=910
<910=912,911
<913=914
<914=929,928,915
<915=926,916
<916=924,917
<917=918
<918=920,919
<920=921
<921=923,922
<924=925
<926=927
<939=942,941,940
<942=1014,1013,1012,1011,1010,1009,1008,943,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007
<943=944
<944=957,945
<945=946
<946=947
<947=951,948
<948=950,949
<951=953,952
<953=954
<954=956,955
<957=958
<1014=1015
<1015=1021,1020,1016
<1016=1018,1017
<1018=1019
<1030=1033,1032,1031
<1033=1105,1086,1074,1048,1034
<1034=1035
<1035=1038,1037,1036
<1038=1039
<1039=1045,1040
<1040=1042,1041
<1042=1044,1043
<1045=1047,1046
<1048=1053,1050,1049
<1050=1052,1051
<1053=1054
<1054=1071,1055
<1055=1066,1056
<1056=1064,1057
<1057=1058
<1058=1059
<1059=1063,1060
<1060=1062,1061
<1064=1065
<1066=1068,1067
<1068=1070,1069
<1071=1073,1072
<1074=1075
<1075=1085,1084,1076
<1076=1082,1077
<1077=1080,1078
<1078=1079
<1080=1081
<1082=1083
<1086=1087
<1087=1104,1103,1088
<1088=1097,1089
<1089=1095,1090
<1090=1091
<1091=1092
<1092=1094,1093
<1095=1096
<1097=1099,1098
<1099=1100
<1100=1102,1101
<1105=1106
<1106=1121,1120,1107
<1107=1118,1108
<1108=1116,1109
<1109=1110
<1110=1112,1111
<1112=1113
<1113=1115,1114
<1116=1117
<1118=1119
<1134=1137,1136,1135
<1137=1168,1138
<1138=1139
<1139=1164,1160,1140
<1140=1158,1141
<1141=1151,1142
<1142=1143
<1143=1145,1144
<1145=1147,1146
<1147=1148
<1148=1150,1149
<1151=1152
<1152=1154,1153
<1154=1155
<1155=1157,1156
<1158=1159
<1160=1162,1161
<1162=1163
<1164=1165
<1165=1167,1166
<1168=1169
<1169=1175,1174,1170
<1170=1172,1171
<1172=1173
<1184=1187,1186,1185
<1187=1233,1188
<1188=1189
<1189=1204,1203,1190
<1190=1201,1191
<1191=1192
<1192=1193
<1193=1195,1194
<1195=1197,1196
<1197=1198
<1198=1200,1199
<1201=1202
<1204=1205
<1205=1227,1206
<1206=1226,1207
<1207=1218,1208
<1208=1217,1209
<1209=1215,1210
<1210=1213,1211
<1211=1212
<1213=1214
<1215=1216
<1218=1224,1219
<1219=1220
<1220=1221
<1221=1223,1222
<1224=1225
<1227=1229,1228
<1229=1230
<1230=1232,1231
<1233=1234
<1234=1249,1248,1235
<1235=1246,1236
<1236=1244,1237
<1237=1238
<1238=1240,1239
<1240=1241
<1241=1243,1242
<1244=1245
<1246=1247
<1263=1266,1265,1264
<1266=1323,1312,1298,1267
<1267=1268
<1268=1294,1293,1269
<1269=1291,1270
<1270=1282,1271
<1271=1272
<1272=1274,1273
<1274=1276,1275
<1276=1277
<1277=1279,1278
<1279=1281,1280
<1282=1283
<1283=1285,1284
<1285=1286
<1286=1288,1287
<1288=1290,1289
<1291=1292
<1294=1295
<1295=1297,1296
<1298=1299
<1299=1311,1310,1300
<1300=1304,1301
<1301=1302
<1302=1303
<1304=1305
<1305=1307,1306
<1307=1309,1308
<1312=1315,1313
<1313=1314
<1315=1316
<1316=1320,1317
<1317=1319,1318
<1320=1322,1321
<1323=1324
<1324=1330,1329,1325
<1325=1327,1326
<1327=1328
<1343=1346,1345,1344
<1346=1400,1386,1372,1347
<1347=1348
<1348=1368,1364,1349
<1349=1362,1350
<1350=1351
<1351=1352
<1352=1354,1353
<1354=1356,1355
<1356=1357
<1357=1359,1358
<1359=1361,1360
<1362=1363
<1364=1366,1365
<1366=1367
<1368=1369
<1369=1371,1370
<1372=1373
<1373=1385,1384,1374
<1374=1378,1375
<1375=1376
<1376=1377
<1378=1379
<1379=1381,1380
<1381=1383,1382
<1386=1392,1387
<1387=1388
<1388=1390,1389
<1390=1391
<1392=1393
<1393=1397,1394
<1394=1396,1395
<1397=1399,1398
<1400=1401
<1401=1407,1406,1402
<1402=1404,1403
<1404=1405
<1420=1423,1422,1421
<1423=1796,1792,1784,1776,1769,1447,1446,1434,1428,1424
<1424=1425
<1425=1427,1426
<1428=1429
<1429=1433,1430
<1430=1432,1431
<1434=1439,1435
<1435=1436
<1436=1438,1437
<1439=1440
<1440=1442,1441
<1442=1443
<1443=1445,1444
<1447=1763,1759,1756,1448
<1448=1721,1455,1449
<1449=1450
<1450=1454,1451
<1451=1453,1452
<1455=1676,1456
<1456=1661,1660,1659,1658,1657,1656,1655,1654,1653,1652,1651,1650,1649,1648,1647,1646,1645,1644,1643,1642,1641,1640,1639,1638,1457,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637
<1457=1582,1492,1487,1459,1458
<1459=1464,1460
<1460=1461
<1461=1463,1462
<1464=1465
<1465=1481,1466
<1466=1476,1467
<1467=1473,1468
<1468=1470,1469
<1470=1472,1471
<1473=1475,1474
<1476=1478,1477
<1478=1480,1479
<1481=1483,1482
<1483=1484
<1484=1486,1485
<1487=1488
<1488=1491,1490,1489
<1492=1554,1493
<1493=1533,1494
<1494=1516,1495
<1495=1496
<1496=1497
<1497=1510,1498
<1498=1499
<1499=1500
<1500=1502,1501
<1502=1504,1503
<1504=1505
<1505=1507,1506
<1507=1509,1508
<1510=1511
<1511=1513,1512
<1513=1515,1514
<1516=1517
<1517=1530,1518
<1518=1529,1519
<1519=1521,1520
<1521=1523,1522
<1523=1524
<1524=1526,1525
<1526=1528,1527
<1530=1532,1531
<1533=1534
<1534=1553,1552,1535
<1535=1550,1536
<1536=1546,1537
<1537=1538
<1538=1540,1539
<1540=1541
<1541=1543,1542
<1543=1545,1544
<1546=1547
<1547=1549,1548
<1550=1551
<1554=1555
<1555=1572,1556
<1556=1558,1557
<1558=1569,1559
<1559=1561,1560
<1561=1563,1562
<1563=1564
<1564=1566,1565
<1566=1568,1567
<1569=1571,1570
<1572=1574,1573
<1574=1576,1575
<1576=1577
<1577=1579,1578
<1579=1581,1580
<1582=1583
<1583=1585,1584
<1585=1586
<1586=1588,1587
<1661=1662
<1662=1675,1674,1663
<1663=1665,1664
<1665=1666
<1666=1668,1667
<1668=1670,1669
<1670=1671
<1671=1673,1672
<1676=1677
<1677=1713,1678
<1678=1700,1679
<1679=1690,1680
<1680=1682,1681
<1682=1684,1683
<1684=1686,1685
<1686=1687
<1687=1689,1688
<1690=1692,1691
<1692=1694,1693
<1694=1696,1695
<1696=1697
<1697=1699,1698
<1700=1702,1701
<1702=1704,1703
<1704=1705
<1705=1707,1706
<1707=1709,1708
<1709=1710
<1710=1712,1711
<1713=1720,1714
<1714=1716,1715
<1716=1717
<1717=1719,1718
<1721=1723,1722
<1723=1724
<1724=1743,1725
<1725=1733,1726
<1726=1730,1727
<1727=1729,1728
<1730=1732,1731
<1733=1735,1734
<1735=1737,1736
<1737=1739,1738
<1739=1740
<1740=1742,1741
<1743=1745,1744
<1745=1747,1746
<1747=1748
<1748=1750,1749
<1750=1752,1751
<1752=1753
<1753=1755,1754
<1756=1758,1757
<1759=1760
<1760=1762,1761
<1763=1764
<1764=1765
<1765=1768,1767,1766
<1769=1770
<1770=1775,1774,1771
<1771=1773,1772
<1776=1777
<1777=1783,1782,1778
<1778=1780,1779
<1780=1781
<1784=1785
<1785=1791,1790,1786
<1786=1788,1787
<1788=1789
<1792=1793
<1793=1795,1794
<1796=1801,1797
<1797=1798
<1798=1800,1799
<1801=1802
<1802=1804,1803
<1804=1805
<1805=1807,1806
<1840=1849,1848,1841
<1841=1845,1842
<1842=1844,1843
<1845=1847,1846
<1849=1944,1924,1917,1916,1915,1893,1892,1863,1850
<1850=1851
<1851=1853,1852
<1853=1859,1854
<1854=1857,1855
<1855=1856
<1857=1858
<1859=1860
<1860=1862,1861
<1863=1866,1864
<1864=1865
<1866=1867
<1867=1889,1868
<1868=1879,1869
<1869=1878,1870
<1870=1876,1871
<1871=1872
<1872=1873
<1873=1875,1874
<1876=1877
<1879=1888,1880
<1880=1886,1881
<1881=1882
<1882=1883
<1883=1885,1884
<1886=1887
<1889=1891,1890
<1893=1896,1894
<1894=1895
<1896=1897
<1897=1912,1898
<1898=1904,1899
<1899=1901,1900
<1901=1903,1902
<1904=1910,1905
<1905=1906
<1906=1907
<1907=1909,1908
<1910=1911
<1912=1914,1913
<1917=1920,1918
<1918=1919
<1920=1921
<1921=1923,1922
<1924=1929,1925
<1925=1926
<1926=1928,1927
<1929=1930
<1930=1941,1931
<1931=1939,1932
<1932=1933
<1933=1934
<1934=1938,1935
<1935=1937,1936
<1939=1940
<1941=1943,1942
<1944=1945
<1945=1967,1946
<1946=1949,1947
<1947=1948
<1949=1950
<1950=1959,1951
<1951=1957,1952
<1952=1953
<1953=1954
<1954=1956,1955
<1957=1958
<1959=1966,1960
<1960=1962,1961
<1962=1963
<1963=1965,1964
<1967=1968
<1984=1993,1992,1985
<1985=1989,1986
<1986=1988,1987
<1989=1991,1990
<1993=2074,2056,2040,2039,2038,2018,2017,1994
<1994=1995
<1995=2000,1999,1996
<1996=1998,1997
<2000=2001
<2001=2014,2002
<2002=2011,2003
<2003=2009,2004
<2004=2005
<2005=2006
<2006=2008,2007
<2009=2010
<2011=2013,2012
<2014=2016,2015
<2018=2034,2019
<2019=2020
<2020=2033,2021
<2021=2029,2022
<2022=2027,2023
<2023=2024
<2024=2026,2025
<2027=2028
<2029=2030
<2030=2032,2031
<2034=2035
<2035=2037,2036
<2040=2041
<2041=2055,2054,2042
<2042=2050,2043
<2043=2048,2044
<2044=2045
<2045=2047,2046
<2048=2049
<2050=2051
<2051=2053,2052
<2056=2061,2057
<2057=2058
<2058=2060,2059
<2061=2062
<2062=2073,2063
<2063=2071,2064
<2064=2065
<2065=2066
<2066=2070,2067
<2067=2069,2068
<2071=2072
<2074=2077,2075
<2075=2076
<2077=2078
<2078=2096,2079
<2079=2088,2080
<2080=2086,2081
<2081=2082
<2082=2083
<2083=2085,2084
<2086=2087
<2088=2094,2089
<2089=2090
<2090=2091
<2091=2093,2092
<2094=2095
<2096=2098,2097
<2112=2121,2120,2113
<2113=2117,2114
<2114=2116,2115
<2117=2119,2118
<2121=2310,2309,2287,2286,2261,2260,2259,2198,2197,2140,2124,2122
<2122=2123
<2124=2127,2125
<2125=2126
<2127=2128
<2128=2137,2129
<2129=2135,2130
<2130=2131
<2131=2132
<2132=2134,2133
<2135=2136
<2137=2139,2138
<2140=2164,2141
<2141=2150,2142
<2142=2143
<2143=2146,2145,2144
<2146=2147
<2147=2149,2148
<2150=2151
<2151=2163,2162,2152
<2152=2158,2153
<2153=2156,2154
<2154=2155
<2156=2157
<2158=2159
<2159=2161,2160
<2164=2165
<2165=2194,2166
<2166=2186,2167
<2167=2178,2168
<2168=2177,2169
<2169=2175,2170
<2170=2171
<2171=2172
<2172=2174,2173
<2175=2176
<2178=2184,2179
<2179=2180
<2180=2181
<2181=2183,2182
<2184=2185
<2186=2192,2187
<2187=2188
<2188=2189
<2189=2191,2190
<2192=2193
<2194=2196,2195
<2198=2222,2199
<2199=2208,2200
<2200=2201
<2201=2204,2203,2202
<2204=2205
<2205=2207,2206
<2208=2209
<2209=2221,2220,2210
<2210=2216,2211
<2211=2214,2212
<2212=2213
<2214=2215
<2216=2217
<2217=2219,2218
<2222=2223
<2223=2256,2224
<2224=2248,2225
<2225=2240,2226
<2226=2235,2227
<2227=2233,2228
<2228=2229
<2229=2230
<2230=2232,2231
<2233=2234
<2235=2237,2236
<2237=2239,2238
<2240=2246,2241
<2241=2242
<2242=2243
<2243=2245,2244
<2246=2247
<2248=2254,2249
<2249=2250
<2250=2251
<2251=2253,2252
<2254=2255
<2256=2258,2257
<2261=2264,2262
<2262=2263
<2264=2265
<2265=2283,2266
<2266=2275,2267
<2267=2273,2268
<2268=2269
<2269=2270
<2270=2272,2271
<2273=2274
<2275=2281,2276
<2276=2277
<2277=2278
<2278=2280,2279
<2281=2282
<2283=2285,2284
<2287=2290,2288
<2288=2289
<2290=2291
<2291=2306,2292
<2292=2301,2293
<2293=2299,2294
<2294=2295
<2295=2296
<2296=2298,2297
<2299=2300
<2301=2303,2302
<2303=2305,2304
<2306=2308,2307
<2323=2338,2337,2324
<2324=2334,2331,2328,2325
<2325=2327,2326
<2328=2330,2329
<2331=2333,2332
<2334=2336,2335
<2338=2508,2504,2500,2491,2486,2395,2394,2393,2392,2391,2390,2389,2388,2387,2386,2385,2384,2383,2382,2381,2380,2379,2378,2377,2376,2375,2374,2373,2372,2371,2370,2361,2360,2359,2353,2341,2340,2339
<2341=2347,2342
<2342=2343
<2343=2344
<2344=2346,2345
<2347=2348
<2348=2350,2349
<2350=2352,2351
<2353=2355,2354
<2355=2356
<2356=2358,2357
<2361=2366,2362
<2362=2363
<2363=2365,2364
<2366=2367
<2367=2369,2368
<2395=2449,2440,2396
<2396=2397
<2397=2431,2398
<2398=2427,2400,2399
<2400=2410,2401
<2401=2406,2402
<2402=2403
<2403=2405,2404
<2406=2407
<2407=2409,2408
<2410=2411
<2411=2422,2412
<2412=2420,2413
<2413=2414
<2414=2415
<2415=2419,2416
<2416=2418,2417
<2420=2421
<2422=2424,2423
<2424=2426,2425
<2427=2428
<2428=2430,2429
<2431=2432
<2432=2438,2433
<2433=2434
<2434=2435
<2435=2437,2436
<2438=2439
<2440=2445,2441
<2441=2442
<2442=2444,2443
<2445=2446
<2446=2448,2447
<2449=2450
<2450=2483,2451
<2451=2475,2452
<2452=2467,2453
<2453=2464,2454
<2454=2463,2455
<2455=2461,2456
<2456=2457
<2457=2458
<2458=2460,2459
<2461=2462
<2464=2466,2465
<2467=2473,2468
<2468=2469
<2469=2470
<2470=2472,2471
<2473=2474
<2475=2481,2476
<2476=2477
<2477=2478
<2478=2480,2479
<2481=2482
<2483=2485,2484
<2486=2487
<2487=2490,2489,2488
<2491=2493,2492
<2493=2494
<2494=2496,2495
<2496=2497
<2497=2499,2498
<2500=2501
<2501=2503,2502
<2504=2505
<2505=2507,2506
<2508=2518,2509
<2509=2510
<2510=2517,2511
<2511=2513,2512
<2513=2514
<2514=2516,2515
<2518=2519
<2519=2521,2520
<2537=2552,2551,2538
<2538=2548,2545,2542,2539
<2539=2541,2540
<2542=2544,2543
<2545=2547,2546
<2548=2550,2549
<2552=2574,2563,2553
<2553=2554
<2554=2559,2556,2555
<2556=2558,2557
<2559=2560
<2560=2562,2561
<2563=2566,2564
<2564=2565
<2566=2567
<2567=2571,2568
<2568=2570,2569
<2571=2573,2572
<2574=2639,2575
<2575=2620,2603,2584,2580,2576
<2576=2577
<2577=2579,2578
<2580=2581
<2581=2583,2582
<2584=2585
<2585=2601,2586
<2586=2587
<2587=2588
<2588=2595,2589
<2589=2591,2590
<2591=2592
<2592=2594,2593
<2595=2597,2596
<2597=2598
<2598=2600,2599
<2601=2602
<2603=2606,2604
<2604=2605
<2606=2607
<2607=2614,2608
<2608=2610,2609
<2610=2611
<2611=2613,2612
<2614=2616,2615
<2616=2617
<2617=2619,2618
<2620=2625,2621
<2621=2622
<2622=2624,2623
<2625=2626
<2626=2633,2627
<2627=2629,2628
<2629=2630
<2630=2632,2631
<2633=2635,2634
<2635=2636
<2636=2638,2637
<2639=2640
<2640=2644,2641
<2641=2643,2642
<2644=2646,2645
<2658=2661,2660,2659
<2661=2721,2715,2711,2698,2681,2664,2662
<2662=2663
<2664=2673,2665
<2665=2666
<2666=2668,2667
<2668=2670,2669
<2670=2672,2671
<2673=2674
<2674=2676,2675
<2676=2678,2677
<2678=2680,2679
<2681=2682
<2682=2695,2683
<2683=2691,2684
<2684=2687,2685
<2685=2686
<2687=2688
<2688=2690,2689
<2691=2692
<2692=2694,2693
<2695=2697,2696
<2698=2699
<2699=2709,2700
<2700=2707,2703,2701
<2701=2702
<2703=2704
<2704=2706,2705
<2707=2708
<2709=2710
<2711=2712
<2712=2714,2713
<2715=2716
<2716=2718,2717
<2718=2720,2719
<2721=2722
<2722=2724,2723
<2739=2742,2741,2740
<2742=2762,2756,2745,2743
<2743=2744
<2745=2746
<2746=2753,2747
<2747=2749,2748
<2749=2750
<2750=2752,2751
<2753=2755,2754
<2756=2757
<2757=2759,2758
<2759=2761,2760
<2762=2763
<2763=2765,2764
<2775=2781,2780,2776
<2776=2777
<2777=2779,2778
<2781=3086,3071,3044,2987,2845,2825,2807,2782
<2782=2783
<2783=2804,2784
<2784=2796,2785
<2785=2792,2786
<2786=2787
<2787=2791,2788
<2788=2790,2789
<2792=2793
<2793=2795,2794
<2796=2797
<2797=2799,2798
<2799=2801,2800
<2801=2803,2802
<2804=2806,2805
<2807=2821,2808
<2808=2809
<2809=2820,2810
<2810=2812,2811
<2812=2813
<2813=2815,2814
<2815=2817,2816
<2817=2819,2818
<2821=2822
<2822=2824,2823
<2825=2826
<2826=2844,2843,2827
<2827=2835,2828
<2828=2833,2829
<2829=2830
<2830=2832,2831
<2833=2834
<2835=2836
<2836=2838,2837
<2838=2840,2839
<2840=2842,2841
<2845=2972,2846
<2846=2971,2970,2969,2968,2967,2966,2965,2964,2963,2962,2961,2960,2959,2958,2957,2956,2955,2954,2953,2952,2951,2950,2949,2948,2947,2946,2945,2944,2934,2896,2847
<2847=2862,2848
<2848=2856,2850,2849
<2850=2851
<2851=2853,2852
<2853=2855,2854
<2856=2857
<2857=2861,2858
<2858=2860,2859
<2862=2863
<2863=2882,2864
<2864=2881,2865
<2865=2879,2866
<2866=2873,2867
<2867=2868
<2868=2870,2869
<2870=2872,2871
<2873=2874
<2874=2876,2875
<2876=2878,2877
<2879=2880
<2882=2893,2883
<2883=2885,2884
<2885=2886
<2886=2888,2887
<2888=2890,2889
<2890=2892,2891
<2893=2895,2894
<2896=2904,2897
<2897=2898
<2898=2899
<2899=2903,2900
<2900=2902,2901
<2904=2905
<2905=2920,2906
<2906=2918,2907
<2907=2908
<2908=2909
<2909=2913,2910
<2910=2912,2911
<2913=2915,2914
<2915=2917,2916
<2918=2919
<2920=2931,2921
<2921=2923,2922
<2923=2924
<2924=2926,2925
<2926=2928,2927
<2928=2930,2929
<2931=2933,2932
<2934=2936,2935
<2936=2937
<2937=2939,2938
<2939=2941,2940
<2941=2943,2942
<2972=2973
<2973=2985,2974
<2974=2975
<2975=2976
<2976=2980,2977
<2977=2979,2978
<2980=2982,2981
<2982=2984,2983
<2985=2986
<2987=2988
<2988=3043,3042,2989
<2989=3030,2990
<2990=3018,2991
<2991=3006,2992
<2992=3005,2993
<2993=3003,2994
<2994=2995
<2995=2996
<2996=2998,2997
<2998=3000,2999
<3000=3002,3001
<3003=3004
<3006=3016,3007
<3007=3008
<3008=3009
<3009=3011,3010
<3011=3013,3012
<3013=3015,3014
<3016=3017
<3018=3028,3019
<3019=3020
<3020=3021
<3021=3023,3022
<3023=3025,3024
<3025=3027,3026
<3028=3029
<3030=3032,3031
<3032=3034,3033
<3034=3035
<3035=3037,3036
<3037=3039,3038
<3039=3041,3040
<3044=3056,3045
<3045=3047,3046
<3047=3048
<3048=3050,3049
<3050=3051
<3051=3053,3052
<3053=3055,3054
<3056=3057
<3057=3068,3058
<3058=3060,3059
<3060=3061
<3061=3063,3062
<3063=3065,3064
<3065=3067,3066
<3068=3070,3069
<3071=3072
<3072=3083,3073
<3073=3075,3074
<3075=3076
<3076=3078,3077
<3078=3080,3079
<3080=3082,3081
<3083=3085,3084
<3086=3087
<3087=3106,3088
<3088=3091,3089
<3089=3090
<3091=3092
<3092=3103,3093
<3093=3095,3094
<3095=3096
<3096=3098,3097
<3098=3100,3099
<3100=3102,3101
<3103=3105,3104
<3106=3107
<3136=3142,3141,3137
<3137=3138
<3138=3140,3139
<3142=3334,3327,3248,3232,3202,3185,3160,3143
<3143=3152,3144
<3144=3145
<3145=3147,3146
<3147=3149,3148
<3149=3151,3150
<3152=3153
<3153=3155,3154
<3155=3157,3156
<3157=3159,3158
<3160=3161
<3161=3182,3162
<3162=3174,3163
<3163=3170,3164
<3164=3165
<3165=3169,3166
<3166=3168,3167
<3170=3171
<3171=3173,3172
<3174=3175
<3175=3177,3176
<3177=3179,3178
<3179=3181,3180
<3182=3184,3183
<3185=3186
<3186=3199,3187
<3187=3197,3188
<3188=3191,3189
<3189=3190
<3191=3192
<3192=3194,3193
<3194=3196,3195
<3197=3198
<3199=3201,3200
<3202=3207,3204,3203
<3204=3206,3205
<3207=3208
<3208=3229,3209
<3209=3224,3210
<3210=3222,3211
<3211=3212
<3212=3213
<3213=3217,3214
<3214=3216,3215
<3217=3219,3218
<3219=3221,3220
<3222=3223
<3224=3226,3225
<3226=3228,3227
<3229=3231,3230
<3232=3233
<3233=3247,3246,3234
<3234=3244,3235
<3235=3238,3236
<3236=3237
<3238=3239
<3239=3241,3240
<3241=3243,3242
<3244=3245
<3248=3263,3249
<3249=3257,3251,3250
<3251=3252
<3252=3254,3253
<3254=3256,3255
<3257=3258
<3258=3262,3259
<3259=3261,3260
<3263=3264
<3264=3313,3265
<3265=3301,3266
<3266=3285,3267
<3267=3284,3268
<3268=3282,3269
<3269=3276,3270
<3270=3271
<3271=3273,3272
<3273=3275,3274
<3276=3277
<3277=3279,3278
<3279=3281,3280
<3282=3283
<3285=3299,3286
<3286=3287
<3287=3288
<3288=3294,3289
<3289=3291,3290
<3291=3293,3292
<3294=3296,3295
<3296=3298,3297
<3299=3300
<3301=3303,3302
<3303=3305,3304
<3305=3306
<3306=3308,3307
<3308=3310,3309
<3310=3312,3311
<3313=3324,3314
<3314=3316,3315
<3316=3317
<3317=3319,3318
<3319=3321,3320
<3321=3323,3322
<3324=3326,3325
<3327=3328
<3328=3333,3332,3329
<3329=3331,3330
<3334=3335
<3335=3343,3336
<3336=3339,3337
<3337=3338
<3339=3340
<3340=3342,3341
<3343=3344
<3371=3374,3373,3372
<3374=3388,3387,3386,3385,3384,3383,3382,3381,3380,3379,3378,3377,3375
<3375=3376
<3388=3389
<3389=3397,3396,3390
<3390=3395,3391
<3391=3393,3392
<3393=3394
<3404=3407,3406,3405
<3407=3418,3410,3408
<3408=3409
<3410=3411
<3411=3417,3416,3412
<3412=3414,3413
<3414=3415
<3423=3426,3425,3424
<3426=3470,3469,3468,3467,3466,3465,3464,3463,3462,3461,3460,3459,3458,3457,3456,3455,3454,3453,3452,3451,3450,3449,3448,3447,3446,3445,3444,3443,3442,3441,3440,3439,3438,3437,3436,3435,3434,3433,3432,3431,3430,3429,3427
<3427=3428
<3479=3482,3481,3480
<3482=3490,3483
<3483=3484
<3484=3489,3485
<3485=3487,3486
<3487=3488
<3490=3491
<3491=3500,3492
<3492=3495,3493
<3493=3494
<3495=3496
<3496=3498,3497
<3498=3499
<3500=3501
<3508=3514,3513,3509
<3509=3510
<3510=3512,3511
<3514=3551,3544,3543,3542,3541,3540,3539,3538,3537,3536,3535,3534,3533,3532,3531,3530,3529,3528,3527,3526,3525,3524,3523,3522,3517,3515
<3515=3516
<3517=3518
<3518=3520,3519
<3520=3521
<3544=3545
<3545=3547,3546
<3547=3549,3548
<3549=3550
<3551=3552
<3552=3558,3557,3553
<3553=3555,3554
<3555=3556
<3565=3568,3567,3566
<3568=3612,3611,3610,3609,3608,3607,3606,3605,3604,3603,3602,3601,3600,3599,3598,3597,3596,3595,3594,3593,3592,3591,3590,3589,3574,3573,3569
<3569=3570
<3570=3572,3571
<3574=3575
<3575=3588,3587,3576
<3576=3585,3577
<3577=3578
<3578=3579
<3579=3583,3580
<3580=3581
<3581=3582
<3583=3584
<3585=3586
<3620=3626,3625,3621
<3621=3622
<3622=3624,3623
<3626=3655,3651,3650,3649,3648,3647,3646,3645,3644,3643,3642,3641,3640,3639,3638,3637,3636,3635,3634,3633,3632,3631,3629,3627
<3627=3628
<3629=3630
<3651=3652
<3652=3654,3653
<3655=3656
<3656=3659,3658,3657
