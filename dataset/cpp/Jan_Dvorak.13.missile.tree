>5	FunctionDef	Missile 
>6	ParameterList	vec2 start_pos , vec2 dest , float radius
>7	Parameter	 
>8	Identifier	radius
>9	ParameterType	float
>10	Parameter	 
>11	Identifier	dest
>12	ParameterType	vec2
>13	Parameter	 
>14	Identifier	start_pos
>15	ParameterType	vec2
>16	CompoundStatement	 
>17	ExpressionStatement	 
>18	AssignmentExpr	m_len = length ( m_dest_pos - m_start_pos )
>19	CallExpression	length ( m_dest_pos - m_start_pos )
>20	ArgumentList	m_dest_pos - m_start_pos
>21	Argument	m_dest_pos - m_start_pos
>22	AdditiveExpression	m_dest_pos - m_start_pos
>23	Identifier	m_start_pos
>24	Identifier	m_dest_pos
>25	Callee	length
>26	Identifier	length
>27	Identifier	m_len
>28	ExpressionStatement	 
>29	AssignmentExpr	m_explosion_duration = 0.4
>30	PrimaryExpression	0.4
>31	Identifier	m_explosion_duration
>32	ExpressionStatement	 
>33	AssignmentExpr	m_angle += M_PI
>34	Identifier	M_PI
>35	Identifier	m_angle
>36	ExpressionStatement	 
>37	AssignmentExpr	m_model = & g_resources . mesh_missile
>38	UnaryOp	& g_resources . mesh_missile
>39	MemberAccess	g_resources . mesh_missile
>40	Identifier	mesh_missile
>41	Identifier	g_resources
>42	UnaryOperator	&
>43	Identifier	m_model
>44	ExpressionStatement	 
>45	AssignmentExpr	m_angle = acos ( dot ( normalized ( vec2 ( + 1.0 , 0.0 ) ) , m_vector ) )
>46	CallExpression	acos ( dot ( normalized ( vec2 ( + 1.0 , 0.0 ) ) , m_vector ) )
>47	ArgumentList	dot ( normalized ( vec2 ( + 1.0 , 0.0 ) ) , m_vector )
>48	Argument	dot ( normalized ( vec2 ( + 1.0 , 0.0 ) ) , m_vector )
>49	CallExpression	dot ( normalized ( vec2 ( + 1.0 , 0.0 ) ) , m_vector )
>50	ArgumentList	normalized ( vec2 ( + 1.0 , 0.0 ) )
>51	Argument	m_vector
>52	Identifier	m_vector
>53	Argument	normalized ( vec2 ( + 1.0 , 0.0 ) )
>54	CallExpression	normalized ( vec2 ( + 1.0 , 0.0 ) )
>55	ArgumentList	vec2 ( + 1.0 , 0.0 )
>56	Argument	vec2 ( + 1.0 , 0.0 )
>57	CallExpression	vec2 ( + 1.0 , 0.0 )
>58	ArgumentList	+ 1.0
>59	Argument	0.0
>60	PrimaryExpression	0.0
>61	Argument	+ 1.0
>62	UnaryOp	+ 1.0
>63	PrimaryExpression	1.0
>64	UnaryOperator	+
>65	Callee	vec2
>66	Identifier	vec2
>67	Callee	normalized
>68	Identifier	normalized
>69	Callee	dot
>70	Identifier	dot
>71	Callee	acos
>72	Identifier	acos
>73	Identifier	m_angle
>74	ExpressionStatement	 
>75	AssignmentExpr	m_vector = normalized ( dest - start_pos )
>76	CallExpression	normalized ( dest - start_pos )
>77	ArgumentList	dest - start_pos
>78	Argument	dest - start_pos
>79	AdditiveExpression	dest - start_pos
>80	Identifier	start_pos
>81	Identifier	dest
>82	Callee	normalized
>83	Identifier	normalized
>84	Identifier	m_vector
>85	ExpressionStatement	 
>86	AssignmentExpr	m_velocity = 0.25
>87	PrimaryExpression	0.25
>88	Identifier	m_velocity
>112	FunctionDef	Missile 
>113	ParameterList	float t
>114	Parameter	 
>115	Identifier	t
>116	ParameterType	float
>117	ReturnType	void
>118	CompoundStatement	 
>119	IfStatement	if ( m_exploding )
>120	CompoundStatement	 
>121	IfStatement	if ( g_timer -> now ( ) > ( m_explosion_start + m_explosion_duration ) )
>122	CompoundStatement	 
>123	ExpressionStatement	 
>124	AssignmentExpr	m_exploding = false
>125	Identifier	false
>126	Identifier	m_exploding
>127	Condition	 
>128	RelationalExpression	g_timer -> now ( ) > ( m_explosion_start + m_explosion_duration )
>129	AdditiveExpression	m_explosion_start + m_explosion_duration
>130	Identifier	m_explosion_duration
>131	Identifier	m_explosion_start
>132	CallExpression	g_timer -> now ( )
>133	ArgumentList	 
>134	Callee	g_timer -> now
>135	PtrMemberAccess	g_timer -> now
>136	Identifier	now
>137	Identifier	g_timer
>138	ExpressionStatement	 
>139	AssignmentExpr	m_explosion_circle = Circle ( m_dest_pos , m_radius * explosion_time_0_1 )
>140	CallExpression	Circle ( m_dest_pos , m_radius * explosion_time_0_1 )
>141	ArgumentList	m_dest_pos
>142	Argument	m_radius * explosion_time_0_1
>143	MultiplicativeExpression	m_radius * explosion_time_0_1
>144	Identifier	explosion_time_0_1
>145	Identifier	m_radius
>146	Argument	m_dest_pos
>147	Identifier	m_dest_pos
>148	Callee	Circle
>149	Identifier	Circle
>150	Identifier	m_explosion_circle
>151	IdentifierDeclStatement	 
>152	IdentifierDecl	explosion_time_0_1 = ( g_timer -> now ( ) - m_explosion_start ) / m_explosion_duration
>153	AssignmentExpr	explosion_time_0_1 = ( g_timer -> now ( ) - m_explosion_start ) / m_explosion_duration
>154	MultiplicativeExpression	( g_timer -> now ( ) - m_explosion_start ) / m_explosion_duration
>155	Identifier	m_explosion_duration
>156	AdditiveExpression	g_timer -> now ( ) - m_explosion_start
>157	Identifier	m_explosion_start
>158	CallExpression	g_timer -> now ( )
>159	ArgumentList	 
>160	Callee	g_timer -> now
>161	PtrMemberAccess	g_timer -> now
>162	Identifier	now
>163	Identifier	g_timer
>164	Identifier	explosion_time_0_1
>165	Identifier	explosion_time_0_1
>166	IdentifierDeclType	float
>167	Condition	 
>168	Identifier	m_exploding
>169	IfStatement	if ( m_alive )
>170	CompoundStatement	 
>171	IfStatement	if ( len >= m_len )
>172	CompoundStatement	 
>173	ExpressionStatement	 
>174	CallExpression	explode ( )
>175	ArgumentList	 
>176	Callee	explode
>177	Identifier	explode
>178	Condition	 
>179	RelationalExpression	len >= m_len
>180	Identifier	m_len
>181	Identifier	len
>182	IdentifierDeclStatement	 
>183	IdentifierDecl	len = length ( m_pos - m_start_pos )
>184	AssignmentExpr	len = length ( m_pos - m_start_pos )
>185	CallExpression	length ( m_pos - m_start_pos )
>186	ArgumentList	m_pos - m_start_pos
>187	Argument	m_pos - m_start_pos
>188	AdditiveExpression	m_pos - m_start_pos
>189	Identifier	m_start_pos
>190	Identifier	m_pos
>191	Callee	length
>192	Identifier	length
>193	Identifier	len
>194	Identifier	len
>195	IdentifierDeclType	float
>196	ExpressionStatement	 
>197	AssignmentExpr	m_pos = m_start_pos + m_vector * ( tdiff * m_velocity )
>198	AdditiveExpression	m_start_pos + m_vector * ( tdiff * m_velocity )
>199	MultiplicativeExpression	m_vector * ( tdiff * m_velocity )
>200	MultiplicativeExpression	tdiff * m_velocity
>201	Identifier	m_velocity
>202	Identifier	tdiff
>203	Identifier	m_vector
>204	Identifier	m_start_pos
>205	Identifier	m_pos
>206	Condition	 
>207	Identifier	m_alive
>208	IdentifierDeclStatement	 
>209	IdentifierDecl	tdiff = t - m_start_time
>210	AssignmentExpr	tdiff = t - m_start_time
>211	AdditiveExpression	t - m_start_time
>212	Identifier	m_start_time
>213	Identifier	t
>214	Identifier	tdiff
>215	Identifier	tdiff
>216	IdentifierDeclType	float
>243	FunctionDef	Missile 
>244	ParameterList	 
>245	ReturnType	void
>246	CompoundStatement	 
>247	ExpressionStatement	 
>248	CallExpression	glPopMatrix ( )
>249	ArgumentList	 
>250	Callee	glPopMatrix
>251	Identifier	glPopMatrix
>252	ExpressionStatement	 
>253	CallExpression	glDisable ( GL_BLEND )
>254	ArgumentList	GL_BLEND
>255	Argument	GL_BLEND
>256	Identifier	GL_BLEND
>257	Callee	glDisable
>258	Identifier	glDisable
>259	ExpressionStatement	 
>260	CallExpression	( * m_model ) -> draw ( )
>261	ArgumentList	 
>262	Callee	( * m_model ) -> draw
>263	PtrMemberAccess	( * m_model ) -> draw
>264	Identifier	draw
>265	UnaryOp	* m_model
>266	Identifier	m_model
>267	UnaryOperator	*
>268	ExpressionStatement	 
>269	CallExpression	glRotatef ( m_angle * 180.0 / M_PI , 0 , 0 , 1 )
>270	ArgumentList	m_angle * 180.0 / M_PI
>271	Argument	1
>272	PrimaryExpression	1
>273	Argument	0
>274	PrimaryExpression	0
>275	Argument	0
>276	PrimaryExpression	0
>277	Argument	m_angle * 180.0 / M_PI
>278	MultiplicativeExpression	m_angle * 180.0 / M_PI
>279	MultiplicativeExpression	180.0 / M_PI
>280	Identifier	M_PI
>281	PrimaryExpression	180.0
>282	Identifier	m_angle
>283	Callee	glRotatef
>284	Identifier	glRotatef
>285	ExpressionStatement	 
>286	CallExpression	glScalef ( m_scale , m_scale , 1.0 )
>287	ArgumentList	m_scale
>288	Argument	1.0
>289	PrimaryExpression	1.0
>290	Argument	m_scale
>291	Identifier	m_scale
>292	Argument	m_scale
>293	Identifier	m_scale
>294	Callee	glScalef
>295	Identifier	glScalef
>296	ExpressionStatement	 
>297	CallExpression	glTranslatef ( m_pos [ 0 ] , m_pos [ 1 ] , 0.0 )
>298	ArgumentList	m_pos [ 0 ]
>299	Argument	0.0
>300	PrimaryExpression	0.0
>301	Argument	m_pos [ 1 ]
>302	ArrayIndexing	m_pos [ 1 ]
>303	PrimaryExpression	1
>304	Identifier	m_pos
>305	Argument	m_pos [ 0 ]
>306	ArrayIndexing	m_pos [ 0 ]
>307	PrimaryExpression	0
>308	Identifier	m_pos
>309	Callee	glTranslatef
>310	Identifier	glTranslatef
>311	ExpressionStatement	 
>312	CallExpression	glEnable ( GL_BLEND )
>313	ArgumentList	GL_BLEND
>314	Argument	GL_BLEND
>315	Identifier	GL_BLEND
>316	Callee	glEnable
>317	Identifier	glEnable
>318	ExpressionStatement	 
>319	CallExpression	glBlendFunc ( GL_ZERO , GL_ONE_MINUS_SRC_ALPHA )
>320	ArgumentList	GL_ZERO
>321	Argument	GL_ONE_MINUS_SRC_ALPHA
>322	Identifier	GL_ONE_MINUS_SRC_ALPHA
>323	Argument	GL_ZERO
>324	Identifier	GL_ZERO
>325	Callee	glBlendFunc
>326	Identifier	glBlendFunc
>327	ExpressionStatement	 
>328	CallExpression	glColor4f ( 0 , 0 , 0 , 1.0 )
>329	ArgumentList	0
>330	Argument	1.0
>331	PrimaryExpression	1.0
>332	Argument	0
>333	PrimaryExpression	0
>334	Argument	0
>335	PrimaryExpression	0
>336	Argument	0
>337	PrimaryExpression	0
>338	Callee	glColor4f
>339	Identifier	glColor4f
>340	ExpressionStatement	 
>341	CallExpression	glPushMatrix ( )
>342	ArgumentList	 
>343	Callee	glPushMatrix
>344	Identifier	glPushMatrix
>345	IfStatement	if ( ! m_alive )
>346	ReturnStatement	 
>347	Condition	 
>348	UnaryOp	! m_alive
>349	Identifier	m_alive
>350	UnaryOperator	!
>365	FunctionDef	Missile 
>366	ParameterList	 
>367	ReturnType	void
>368	CompoundStatement	 
>369	ExpressionStatement	 
>370	CallExpression	draw_aa_line ( Line ( m_dest_pos , m_pos ) , 2.0 , vec4 ( 1.0 , 1.0 , 1.0 , 1.0 ) , 16.0 )
>371	ArgumentList	Line ( m_dest_pos , m_pos )
>372	Argument	16.0
>373	PrimaryExpression	16.0
>374	Argument	vec4 ( 1.0 , 1.0 , 1.0 , 1.0 )
>375	CallExpression	vec4 ( 1.0 , 1.0 , 1.0 , 1.0 )
>376	ArgumentList	1.0
>377	Argument	1.0
>378	PrimaryExpression	1.0
>379	Argument	1.0
>380	PrimaryExpression	1.0
>381	Argument	1.0
>382	PrimaryExpression	1.0
>383	Argument	1.0
>384	PrimaryExpression	1.0
>385	Callee	vec4
>386	Identifier	vec4
>387	Argument	2.0
>388	PrimaryExpression	2.0
>389	Argument	Line ( m_dest_pos , m_pos )
>390	CallExpression	Line ( m_dest_pos , m_pos )
>391	ArgumentList	m_dest_pos
>392	Argument	m_pos
>393	Identifier	m_pos
>394	Argument	m_dest_pos
>395	Identifier	m_dest_pos
>396	Callee	Line
>397	Identifier	Line
>398	Callee	draw_aa_line
>399	Identifier	draw_aa_line
>400	IfStatement	if ( ! m_alive )
>401	ReturnStatement	 
>402	Condition	 
>403	UnaryOp	! m_alive
>404	Identifier	m_alive
>405	UnaryOperator	!
>414	FunctionDef	Missile 
>415	ParameterList	 
>416	ReturnType	void
>417	CompoundStatement	 
>418	ExpressionStatement	 
>419	CallExpression	glLoadIdentity ( )
>420	ArgumentList	 
>421	Callee	glLoadIdentity
>422	Identifier	glLoadIdentity
>423	ExpressionStatement	 
>424	CallExpression	draw_textured_quad ( m_radius * 2.01 , g_resources . texture_missile_mark , true )
>425	ArgumentList	m_radius * 2.01
>426	Argument	true
>427	Identifier	true
>428	Argument	g_resources . texture_missile_mark
>429	MemberAccess	g_resources . texture_missile_mark
>430	Identifier	texture_missile_mark
>431	Identifier	g_resources
>432	Argument	m_radius * 2.01
>433	MultiplicativeExpression	m_radius * 2.01
>434	PrimaryExpression	2.01
>435	Identifier	m_radius
>436	Callee	draw_textured_quad
>437	Identifier	draw_textured_quad
>438	ExpressionStatement	 
>439	CallExpression	glTranslatef ( m_dest_pos [ 0 ] , m_dest_pos [ 1 ] , 0.0 )
>440	ArgumentList	m_dest_pos [ 0 ]
>441	Argument	0.0
>442	PrimaryExpression	0.0
>443	Argument	m_dest_pos [ 1 ]
>444	ArrayIndexing	m_dest_pos [ 1 ]
>445	PrimaryExpression	1
>446	Identifier	m_dest_pos
>447	Argument	m_dest_pos [ 0 ]
>448	ArrayIndexing	m_dest_pos [ 0 ]
>449	PrimaryExpression	0
>450	Identifier	m_dest_pos
>451	Callee	glTranslatef
>452	Identifier	glTranslatef
>453	ExpressionStatement	 
>454	CallExpression	glColor4f ( 1 , 1 , 1 , 1 )
>455	ArgumentList	1
>456	Argument	1
>457	PrimaryExpression	1
>458	Argument	1
>459	PrimaryExpression	1
>460	Argument	1
>461	PrimaryExpression	1
>462	Argument	1
>463	PrimaryExpression	1
>464	Callee	glColor4f
>465	Identifier	glColor4f
>466	ExpressionStatement	 
>467	CallExpression	glLoadIdentity ( )
>468	ArgumentList	 
>469	Callee	glLoadIdentity
>470	Identifier	glLoadIdentity
>471	IfStatement	if ( ! m_alive )
>472	ReturnStatement	 
>473	Condition	 
>474	UnaryOp	! m_alive
>475	Identifier	m_alive
>476	UnaryOperator	!
>487	FunctionDef	Missile 
>488	ParameterList	 
>489	ReturnType	bool
>490	CompoundStatement	 
>491	ReturnStatement	 
>492	Identifier	m_alive
>497	FunctionDef	Missile 
>498	ParameterList	 
>499	ReturnType	bool
>500	CompoundStatement	 
>501	ReturnStatement	 
>502	Identifier	m_exploding
>507	FunctionDef	Missile 
>508	ParameterList	 
>509	ReturnType	void
>510	CompoundStatement	 
>511	IfStatement	if ( g_current_game )
>512	ExpressionStatement	 
>513	CallExpression	g_current_game -> add_effect ( new FX_Missile_Explosion ( m_pos ) , 0 )
>514	ArgumentList	m_pos
>515	Argument	0
>516	PrimaryExpression	0
>517	Argument	m_pos
>518	Identifier	m_pos
>519	Callee	g_current_game -> add_effect
>520	PtrMemberAccess	g_current_game -> add_effect
>521	Identifier	add_effect
>522	Identifier	g_current_game
>523	Condition	 
>524	Identifier	g_current_game
>525	ExpressionStatement	 
>526	AssignmentExpr	m_explosion_start = g_timer -> now ( )
>527	CallExpression	g_timer -> now ( )
>528	ArgumentList	 
>529	Callee	g_timer -> now
>530	PtrMemberAccess	g_timer -> now
>531	Identifier	now
>532	Identifier	g_timer
>533	Identifier	m_explosion_start
>534	ExpressionStatement	 
>535	AssignmentExpr	m_alive = false
>536	Identifier	false
>537	Identifier	m_alive
>538	ExpressionStatement	 
>539	AssignmentExpr	m_exploding = true
>540	Identifier	true
>541	Identifier	m_exploding
<5=16,6
<6=13,10,7
<7=9,8
<10=12,11
<13=15,14
<16=85,74,44,36,32,28,17
<17=18
<18=27,19
<19=25,20
<20=21
<21=22
<22=24,23
<25=26
<28=29
<29=31,30
<32=33
<33=35,34
<36=37
<37=43,38
<38=42,39
<39=41,40
<44=45
<45=73,46
<46=71,47
<47=48
<48=49
<49=69,50
<50=53,51
<51=52
<53=54
<54=67,55
<55=56
<56=57
<57=65,58
<58=61,59
<59=60
<61=62
<62=64,63
<65=66
<67=68
<69=70
<71=72
<74=75
<75=84,76
<76=82,77
<77=78
<78=79
<79=81,80
<82=83
<85=86
<86=88,87
<112=118,117,113
<113=114
<114=116,115
<118=208,169,119
<119=167,120
<120=151,138,121
<121=127,122
<122=123
<123=124
<124=126,125
<127=128
<128=132,129
<129=131,130
<132=134,133
<134=135
<135=137,136
<138=139
<139=150,140
<140=148,141
<141=146,142
<142=143
<143=145,144
<146=147
<148=149
<151=152
<152=166,165,153
<153=164,154
<154=156,155
<156=158,157
<158=160,159
<160=161
<161=163,162
<167=168
<169=206,170
<170=196,182,171
<171=178,172
<172=173
<173=174
<174=176,175
<176=177
<178=179
<179=181,180
<182=183
<183=195,194,184
<184=193,185
<185=191,186
<186=187
<187=188
<188=190,189
<191=192
<196=197
<197=205,198
<198=204,199
<199=203,200
<200=202,201
<206=207
<208=209
<209=216,215,210
<210=214,211
<211=213,212
<243=246,245,244
<246=345,340,327,318,311,296,285,268,259,252,247
<247=248
<248=250,249
<250=251
<252=253
<253=257,254
<254=255
<255=256
<257=258
<259=260
<260=262,261
<262=263
<263=265,264
<265=267,266
<268=269
<269=283,270
<270=277,275,273,271
<271=272
<273=274
<275=276
<277=278
<278=282,279
<279=281,280
<283=284
<285=286
<286=294,287
<287=292,290,288
<288=289
<290=291
<292=293
<294=295
<296=297
<297=309,298
<298=305,301,299
<299=300
<301=302
<302=304,303
<305=306
<306=308,307
<309=310
<311=312
<312=316,313
<313=314
<314=315
<316=317
<318=319
<319=325,320
<320=323,321
<321=322
<323=324
<325=326
<327=328
<328=338,329
<329=336,334,332,330
<330=331
<332=333
<334=335
<336=337
<338=339
<340=341
<341=343,342
<343=344
<345=347,346
<347=348
<348=350,349
<365=368,367,366
<368=400,369
<369=370
<370=398,371
<371=389,387,374,372
<372=373
<374=375
<375=385,376
<376=383,381,379,377
<377=378
<379=380
<381=382
<383=384
<385=386
<387=388
<389=390
<390=396,391
<391=394,392
<392=393
<394=395
<396=397
<398=399
<400=402,401
<402=403
<403=405,404
<414=417,416,415
<417=471,466,453,438,423,418
<418=419
<419=421,420
<421=422
<423=424
<424=436,425
<425=432,428,426
<426=427
<428=429
<429=431,430
<432=433
<433=435,434
<436=437
<438=439
<439=451,440
<440=447,443,441
<441=442
<443=444
<444=446,445
<447=448
<448=450,449
<451=452
<453=454
<454=464,455
<455=462,460,458,456
<456=457
<458=459
<460=461
<462=463
<464=465
<466=467
<467=469,468
<469=470
<471=473,472
<473=474
<474=476,475
<487=490,489,488
<490=491
<491=492
<497=500,499,498
<500=501
<501=502
<507=510,509,508
<510=538,534,525,511
<511=523,512
<512=513
<513=519,514
<514=517,515
<515=516
<517=518
<519=520
<520=522,521
<523=524
<525=526
<526=533,527
<527=529,528
<529=530
<530=532,531
<534=535
<535=537,536
<538=539
<539=541,540
