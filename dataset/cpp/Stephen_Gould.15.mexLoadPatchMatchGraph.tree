>3	FunctionDef	usage ()
>4	ParameterList	 
>5	ReturnType	void
>6	CompoundStatement	 
>7	ExpressionStatement	 
>8	CallExpression	mexPrintf ( \"\n\" )
>9	ArgumentList	\"\n\"
>10	Argument	\"\n\"
>11	PrimaryExpression	\"\n\"
>12	Callee	mexPrintf
>13	Identifier	mexPrintf
>14	ExpressionStatement	 
>15	CallExpression	drwnMatlabUtils 
>16	ArgumentList	 
>17	Callee	drwnMatlabUtils 
>18	Identifier	drwnMatlabUtils 
>19	ExpressionStatement	 
>20	CallExpression	mexPrintf ( \"OPTIONS
>21	ArgumentList	\"OPTIONS
>22	Argument	\"OPTIONS
>23	PrimaryExpression	\"OPTIONS
>24	Callee	mexPrintf
>25	Identifier	mexPrintf
>26	ExpressionStatement	 
>27	CallExpression	mexPrintf ( \"  filebase 
>28	ArgumentList	\"  filebase 
>29	Argument	\"  filebase 
>30	PrimaryExpression	\"  filebase 
>31	Callee	mexPrintf
>32	Identifier	mexPrintf
>33	ExpressionStatement	 
>34	CallExpression	mexPrintf ( \"USAGE
>35	ArgumentList	\"USAGE
>36	Argument	\"USAGE
>37	PrimaryExpression	\"USAGE
>38	Callee	mexPrintf
>39	Identifier	mexPrintf
>40	ExpressionStatement	 
>41	CallExpression	mexPrintf ( \"\n\" )
>42	ArgumentList	\"\n\"
>43	Argument	\"\n\"
>44	PrimaryExpression	\"\n\"
>45	Callee	mexPrintf
>46	Identifier	mexPrintf
>47	ExpressionStatement	 
>48	CallExpression	mexPrintf ( DRWN_USAGE_HEADER )
>49	ArgumentList	DRWN_USAGE_HEADER
>50	Argument	DRWN_USAGE_HEADER
>51	Identifier	DRWN_USAGE_HEADER
>52	Callee	mexPrintf
>53	Identifier	mexPrintf
>58	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>59	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>60	Parameter	 
>61	Identifier	prhs
>62	ParameterType	const mxArray * [ ]
>63	Parameter	 
>64	Identifier	nrhs
>65	ParameterType	int
>66	Parameter	 
>67	Identifier	plhs
>68	ParameterType	mxArray * [ ]
>69	Parameter	 
>70	Identifier	nlhs
>71	ParameterType	int
>72	ReturnType	void
>73	CompoundStatement	 
>74	ExpressionStatement	 
>75	CallExpression	drwnCodeProfiler 
>76	ArgumentList	 
>77	Callee	drwnCodeProfiler 
>78	Identifier	drwnCodeProfiler 
>79	ExpressionStatement	 
>80	CallExpression	drwnCodeProfiler 
>81	ArgumentList	drwnCodeProfiler 
>82	Argument	drwnCodeProfiler 
>83	CallExpression	drwnCodeProfiler 
>84	ArgumentList	\"mex\"
>85	Argument	\"mex\"
>86	PrimaryExpression	\"mex\"
>87	Callee	drwnCodeProfiler 
>88	Identifier	drwnCodeProfiler 
>89	Callee	drwnCodeProfiler 
>90	Identifier	drwnCodeProfiler 
>91	IfStatement	if ( nlhs == 1 )
>92	CompoundStatement	 
>93	ExpressionStatement	 
>94	CallExpression	mxSetFieldByNumber ( plhs [ 0 ] , 0 , 6 , matches )
>95	ArgumentList	plhs [ 0 ]
>96	Argument	matches
>97	Identifier	matches
>98	Argument	6
>99	PrimaryExpression	6
>100	Argument	0
>101	PrimaryExpression	0
>102	Argument	plhs [ 0 ]
>103	ArrayIndexing	plhs [ 0 ]
>104	PrimaryExpression	0
>105	Identifier	plhs
>106	Callee	mxSetFieldByNumber
>107	Identifier	mxSetFieldByNumber
>108	ForStatement	for ( unsigned i = 0 ; i < graph . size ( ) ; i ++ )
>109	CompoundStatement	 
>110	ForStatement	for ( unsigned j = 0 ; j < graph [ i ] . levels ( ) ; j ++ )
>111	CompoundStatement	 
>112	ForStatement	for ( unsigned k = 0 ; k < graph [ i ] [ j ] . size ( ) ; k ++ )
>113	CompoundStatement	 
>114	ForStatement	for ( drwnPatchMatchEdgeList 
>115	CompoundStatement	 
>116	ExpressionStatement	 
>117	IncDecOp	px ++
>118	IncDec	++
>119	Identifier	px
>120	ExpressionStatement	 
>121	AssignmentExpr	px [ 10 * numMatches ] = ( double ) it -> matchScore
>122	CastExpression	( double ) it -> matchScore
>123	PtrMemberAccess	it -> matchScore
>124	Identifier	matchScore
>125	Identifier	it
>126	CastTarget	double
>127	ArrayIndexing	px [ 10 * numMatches ]
>128	MultiplicativeExpression	10 * numMatches
>129	Identifier	numMatches
>130	PrimaryExpression	10
>131	Identifier	px
>132	ExpressionStatement	 
>133	AssignmentExpr	px [ 9 * numMatches ] = ( double ) br . y
>134	CastExpression	( double ) br . y
>135	MemberAccess	br . y
>136	Identifier	y
>137	Identifier	br
>138	CastTarget	double
>139	ArrayIndexing	px [ 9 * numMatches ]
>140	MultiplicativeExpression	9 * numMatches
>141	Identifier	numMatches
>142	PrimaryExpression	9
>143	Identifier	px
>144	ExpressionStatement	 
>145	AssignmentExpr	px [ 8 * numMatches ] = ( double ) br . x
>146	CastExpression	( double ) br . x
>147	MemberAccess	br . x
>148	Identifier	x
>149	Identifier	br
>150	CastTarget	double
>151	ArrayIndexing	px [ 8 * numMatches ]
>152	MultiplicativeExpression	8 * numMatches
>153	Identifier	numMatches
>154	PrimaryExpression	8
>155	Identifier	px
>156	ExpressionStatement	 
>157	AssignmentExpr	px [ 7 * numMatches ] = ( double ) tl . y + 1
>158	AdditiveExpression	( double ) tl . y + 1
>159	PrimaryExpression	1
>160	CastExpression	( double ) tl . y
>161	MemberAccess	tl . y
>162	Identifier	y
>163	Identifier	tl
>164	CastTarget	double
>165	ArrayIndexing	px [ 7 * numMatches ]
>166	MultiplicativeExpression	7 * numMatches
>167	Identifier	numMatches
>168	PrimaryExpression	7
>169	Identifier	px
>170	ExpressionStatement	 
>171	AssignmentExpr	px [ 6 * numMatches ] = ( double ) tl . x + 1
>172	AdditiveExpression	( double ) tl . x + 1
>173	PrimaryExpression	1
>174	CastExpression	( double ) tl . x
>175	MemberAccess	tl . x
>176	Identifier	x
>177	Identifier	tl
>178	CastTarget	double
>179	ArrayIndexing	px [ 6 * numMatches ]
>180	MultiplicativeExpression	6 * numMatches
>181	Identifier	numMatches
>182	PrimaryExpression	6
>183	Identifier	px
>184	ExpressionStatement	 
>185	AssignmentExpr	br = graph [ it -> targetNode . imgIndx ] . mapPixel ( br , it -> targetNode . imgScale , 0 )
>186	CallExpression	graph [ it -> targetNode . imgIndx ] . mapPixel ( br , it -> targetNode . imgScale , 0 )
>187	ArgumentList	br
>188	Argument	0
>189	PrimaryExpression	0
>190	Argument	it -> targetNode . imgScale
>191	MemberAccess	it -> targetNode . imgScale
>192	Identifier	imgScale
>193	PtrMemberAccess	it -> targetNode
>194	Identifier	targetNode
>195	Identifier	it
>196	Argument	br
>197	Identifier	br
>198	Callee	graph [ it -> targetNode . imgIndx ] . mapPixel
>199	MemberAccess	graph [ it -> targetNode . imgIndx ] . mapPixel
>200	Identifier	mapPixel
>201	ArrayIndexing	graph [ it -> targetNode . imgIndx ]
>202	MemberAccess	it -> targetNode . imgIndx
>203	Identifier	imgIndx
>204	PtrMemberAccess	it -> targetNode
>205	Identifier	targetNode
>206	Identifier	it
>207	Identifier	graph
>208	Identifier	br
>209	ExpressionStatement	 
>210	AssignmentExpr	tl = graph [ it -> targetNode . imgIndx ] . mapPixel ( tl , it -> targetNode . imgScale , 0 )
>211	CallExpression	graph [ it -> targetNode . imgIndx ] . mapPixel ( tl , it -> targetNode . imgScale , 0 )
>212	ArgumentList	tl
>213	Argument	0
>214	PrimaryExpression	0
>215	Argument	it -> targetNode . imgScale
>216	MemberAccess	it -> targetNode . imgScale
>217	Identifier	imgScale
>218	PtrMemberAccess	it -> targetNode
>219	Identifier	targetNode
>220	Identifier	it
>221	Argument	tl
>222	Identifier	tl
>223	Callee	graph [ it -> targetNode . imgIndx ] . mapPixel
>224	MemberAccess	graph [ it -> targetNode . imgIndx ] . mapPixel
>225	Identifier	mapPixel
>226	ArrayIndexing	graph [ it -> targetNode . imgIndx ]
>227	MemberAccess	it -> targetNode . imgIndx
>228	Identifier	imgIndx
>229	PtrMemberAccess	it -> targetNode
>230	Identifier	targetNode
>231	Identifier	it
>232	Identifier	graph
>233	Identifier	tl
>234	ExpressionStatement	 
>235	AssignmentExpr	br = cv 
>236	CallExpression	cv 
>237	ArgumentList	graph . patchWidth ( )
>238	Argument	graph . patchHeight ( )
>239	CallExpression	graph . patchHeight ( )
>240	ArgumentList	 
>241	Callee	graph . patchHeight
>242	MemberAccess	graph . patchHeight
>243	Identifier	patchHeight
>244	Identifier	graph
>245	Argument	graph . patchWidth ( )
>246	CallExpression	graph . patchWidth ( )
>247	ArgumentList	 
>248	Callee	graph . patchWidth
>249	MemberAccess	graph . patchWidth
>250	Identifier	patchWidth
>251	Identifier	graph
>252	Callee	cv 
>253	Identifier	cv 
>254	Identifier	br
>255	ExpressionStatement	 
>256	AssignmentExpr	tl = cv 
>257	CallExpression	cv 
>258	ArgumentList	it -> targetNode . xPosition
>259	Argument	it -> targetNode . yPosition
>260	MemberAccess	it -> targetNode . yPosition
>261	Identifier	yPosition
>262	PtrMemberAccess	it -> targetNode
>263	Identifier	targetNode
>264	Identifier	it
>265	Argument	it -> targetNode . xPosition
>266	MemberAccess	it -> targetNode . xPosition
>267	Identifier	xPosition
>268	PtrMemberAccess	it -> targetNode
>269	Identifier	targetNode
>270	Identifier	it
>271	Callee	cv 
>272	Identifier	cv 
>273	Identifier	tl
>274	ExpressionStatement	 
>275	AssignmentExpr	px [ 5 * numMatches ] = ( double ) ( it -> targetNode . imgIndx + 1 )
>276	CastExpression	( double ) ( it -> targetNode . imgIndx + 1 )
>277	AdditiveExpression	it -> targetNode . imgIndx + 1
>278	PrimaryExpression	1
>279	MemberAccess	it -> targetNode . imgIndx
>280	Identifier	imgIndx
>281	PtrMemberAccess	it -> targetNode
>282	Identifier	targetNode
>283	Identifier	it
>284	CastTarget	double
>285	ArrayIndexing	px [ 5 * numMatches ]
>286	MultiplicativeExpression	5 * numMatches
>287	Identifier	numMatches
>288	PrimaryExpression	5
>289	Identifier	px
>290	ExpressionStatement	 
>291	AssignmentExpr	px [ 4 * numMatches ] = ( double ) br . y
>292	CastExpression	( double ) br . y
>293	MemberAccess	br . y
>294	Identifier	y
>295	Identifier	br
>296	CastTarget	double
>297	ArrayIndexing	px [ 4 * numMatches ]
>298	MultiplicativeExpression	4 * numMatches
>299	Identifier	numMatches
>300	PrimaryExpression	4
>301	Identifier	px
>302	ExpressionStatement	 
>303	AssignmentExpr	px [ 3 * numMatches ] = ( double ) br . x
>304	CastExpression	( double ) br . x
>305	MemberAccess	br . x
>306	Identifier	x
>307	Identifier	br
>308	CastTarget	double
>309	ArrayIndexing	px [ 3 * numMatches ]
>310	MultiplicativeExpression	3 * numMatches
>311	Identifier	numMatches
>312	PrimaryExpression	3
>313	Identifier	px
>314	ExpressionStatement	 
>315	AssignmentExpr	px [ 2 * numMatches ] = ( double ) tl . y + 1
>316	AdditiveExpression	( double ) tl . y + 1
>317	PrimaryExpression	1
>318	CastExpression	( double ) tl . y
>319	MemberAccess	tl . y
>320	Identifier	y
>321	Identifier	tl
>322	CastTarget	double
>323	ArrayIndexing	px [ 2 * numMatches ]
>324	MultiplicativeExpression	2 * numMatches
>325	Identifier	numMatches
>326	PrimaryExpression	2
>327	Identifier	px
>328	ExpressionStatement	 
>329	AssignmentExpr	px [ 1 * numMatches ] = ( double ) tl . x + 1
>330	AdditiveExpression	( double ) tl . x + 1
>331	PrimaryExpression	1
>332	CastExpression	( double ) tl . x
>333	MemberAccess	tl . x
>334	Identifier	x
>335	Identifier	tl
>336	CastTarget	double
>337	ArrayIndexing	px [ 1 * numMatches ]
>338	MultiplicativeExpression	1 * numMatches
>339	Identifier	numMatches
>340	PrimaryExpression	1
>341	Identifier	px
>342	ExpressionStatement	 
>343	AssignmentExpr	br = graph [ i ] . mapPixel ( br , j , 0 )
>344	CallExpression	graph [ i ] . mapPixel ( br , j , 0 )
>345	ArgumentList	br
>346	Argument	0
>347	PrimaryExpression	0
>348	Argument	j
>349	Identifier	j
>350	Argument	br
>351	Identifier	br
>352	Callee	graph [ i ] . mapPixel
>353	MemberAccess	graph [ i ] . mapPixel
>354	Identifier	mapPixel
>355	ArrayIndexing	graph [ i ]
>356	Identifier	i
>357	Identifier	graph
>358	Identifier	br
>359	ExpressionStatement	 
>360	AssignmentExpr	tl = graph [ i ] . mapPixel ( tl , j , 0 )
>361	CallExpression	graph [ i ] . mapPixel ( tl , j , 0 )
>362	ArgumentList	tl
>363	Argument	0
>364	PrimaryExpression	0
>365	Argument	j
>366	Identifier	j
>367	Argument	tl
>368	Identifier	tl
>369	Callee	graph [ i ] . mapPixel
>370	MemberAccess	graph [ i ] . mapPixel
>371	Identifier	mapPixel
>372	ArrayIndexing	graph [ i ]
>373	Identifier	i
>374	Identifier	graph
>375	Identifier	tl
>376	IdentifierDeclStatement	 
>377	IdentifierDecl	br = cv 
>378	AssignmentExpr	br = cv 
>379	CallExpression	cv 
>380	ArgumentList	graph . patchWidth ( )
>381	Argument	graph . patchHeight ( )
>382	CallExpression	graph . patchHeight ( )
>383	ArgumentList	 
>384	Callee	graph . patchHeight
>385	MemberAccess	graph . patchHeight
>386	Identifier	patchHeight
>387	Identifier	graph
>388	Argument	graph . patchWidth ( )
>389	CallExpression	graph . patchWidth ( )
>390	ArgumentList	 
>391	Callee	graph . patchWidth
>392	MemberAccess	graph . patchWidth
>393	Identifier	patchWidth
>394	Identifier	graph
>395	Callee	cv 
>396	Identifier	cv 
>397	Identifier	br
>398	Identifier	br
>399	IdentifierDeclType	cv 
>400	IdentifierDeclStatement	 
>401	IdentifierDecl	tl = graph [ i ] [ j ] . index2pixel ( k )
>402	AssignmentExpr	tl = graph [ i ] [ j ] . index2pixel ( k )
>403	CallExpression	graph [ i ] [ j ] . index2pixel ( k )
>404	ArgumentList	k
>405	Argument	k
>406	Identifier	k
>407	Callee	graph [ i ] [ j ] . index2pixel
>408	MemberAccess	graph [ i ] [ j ] . index2pixel
>409	Identifier	index2pixel
>410	ArrayIndexing	graph [ i ] [ j ]
>411	Identifier	j
>412	ArrayIndexing	graph [ i ]
>413	Identifier	i
>414	Identifier	graph
>415	Identifier	tl
>416	Identifier	tl
>417	IdentifierDeclType	cv 
>418	ExpressionStatement	 
>419	AssignmentExpr	px [ 0 ] = ( double ) ( i + 1 )
>420	CastExpression	( double ) ( i + 1 )
>421	AdditiveExpression	i + 1
>422	PrimaryExpression	1
>423	Identifier	i
>424	CastTarget	double
>425	ArrayIndexing	px [ 0 ]
>426	PrimaryExpression	0
>427	Identifier	px
>428	UnaryExpression	 
>429	Identifier	it
>430	IncDec	++
>431	Condition	 
>432	EqualityExpression	it != e . end ( )
>433	CallExpression	e . end ( )
>434	ArgumentList	 
>435	Callee	e . end
>436	MemberAccess	e . end
>437	Identifier	end
>438	Identifier	e
>439	Identifier	it
>440	ForInit	 
>441	IdentifierDeclStatement	drwnPatchMatchEdgeList 
>442	IdentifierDecl	it = e . begin ( )
>443	AssignmentExpr	it = e . begin ( )
>444	CallExpression	e . begin ( )
>445	ArgumentList	 
>446	Callee	e . begin
>447	MemberAccess	e . begin
>448	Identifier	begin
>449	Identifier	e
>450	Identifier	it
>451	Identifier	it
>452	IdentifierDeclType	drwnPatchMatchEdgeList 
>453	IdentifierDeclStatement	 
>454	IdentifierDecl	& e = graph [ i ] [ j ] [ k ]
>455	AssignmentExpr	& e = graph [ i ] [ j ] [ k ]
>456	ArrayIndexing	graph [ i ] [ j ] [ k ]
>457	Identifier	k
>458	ArrayIndexing	graph [ i ] [ j ]
>459	Identifier	j
>460	ArrayIndexing	graph [ i ]
>461	Identifier	i
>462	Identifier	graph
>463	Identifier	e
>464	Identifier	e
>465	IdentifierDeclType	const drwnPatchMatchEdgeList &
>466	IncDecOp	 
>467	IncDec	++
>468	Identifier	k
>469	Condition	 
>470	RelationalExpression	k < graph [ i ] [ j ] . size ( )
>471	CallExpression	graph [ i ] [ j ] . size ( )
>472	ArgumentList	 
>473	Callee	graph [ i ] [ j ] . size
>474	MemberAccess	graph [ i ] [ j ] . size
>475	Identifier	size
>476	ArrayIndexing	graph [ i ] [ j ]
>477	Identifier	j
>478	ArrayIndexing	graph [ i ]
>479	Identifier	i
>480	Identifier	graph
>481	Identifier	k
>482	ForInit	 
>483	IdentifierDeclStatement	unsigned k = 0 ;
>484	IdentifierDecl	k = 0
>485	AssignmentExpr	k = 0
>486	PrimaryExpression	0
>487	Identifier	k
>488	Identifier	k
>489	IdentifierDeclType	unsigned
>490	IncDecOp	 
>491	IncDec	++
>492	Identifier	j
>493	Condition	 
>494	RelationalExpression	j < graph [ i ] . levels ( )
>495	CallExpression	graph [ i ] . levels ( )
>496	ArgumentList	 
>497	Callee	graph [ i ] . levels
>498	MemberAccess	graph [ i ] . levels
>499	Identifier	levels
>500	ArrayIndexing	graph [ i ]
>501	Identifier	i
>502	Identifier	graph
>503	Identifier	j
>504	ForInit	 
>505	IdentifierDeclStatement	unsigned j = 0 ;
>506	IdentifierDecl	j = 0
>507	AssignmentExpr	j = 0
>508	PrimaryExpression	0
>509	Identifier	j
>510	Identifier	j
>511	IdentifierDeclType	unsigned
>512	IncDecOp	 
>513	IncDec	++
>514	Identifier	i
>515	Condition	 
>516	RelationalExpression	i < graph . size ( )
>517	CallExpression	graph . size ( )
>518	ArgumentList	 
>519	Callee	graph . size
>520	MemberAccess	graph . size
>521	Identifier	size
>522	Identifier	graph
>523	Identifier	i
>524	ForInit	 
>525	IdentifierDeclStatement	unsigned i = 0 ;
>526	IdentifierDecl	i = 0
>527	AssignmentExpr	i = 0
>528	PrimaryExpression	0
>529	Identifier	i
>530	Identifier	i
>531	IdentifierDeclType	unsigned
>532	ExpressionStatement	 
>533	AssignmentExpr	px = mxGetPr ( matches )
>534	CallExpression	mxGetPr ( matches )
>535	ArgumentList	matches
>536	Argument	matches
>537	Identifier	matches
>538	Callee	mxGetPr
>539	Identifier	mxGetPr
>540	Identifier	px
>541	IdentifierDeclStatement	 
>542	IdentifierDecl	* matches = mxCreateDoubleMatrix ( numMatches , 11 , mxREAL )
>543	AssignmentExpr	* matches = mxCreateDoubleMatrix ( numMatches , 11 , mxREAL )
>544	CallExpression	mxCreateDoubleMatrix ( numMatches , 11 , mxREAL )
>545	ArgumentList	numMatches
>546	Argument	mxREAL
>547	Identifier	mxREAL
>548	Argument	11
>549	PrimaryExpression	11
>550	Argument	numMatches
>551	Identifier	numMatches
>552	Callee	mxCreateDoubleMatrix
>553	Identifier	mxCreateDoubleMatrix
>554	Identifier	matches
>555	Identifier	matches
>556	IdentifierDeclType	mxArray *
>557	ForStatement	for ( unsigned i = 0 ; i < graph . size ( ) ; i ++ )
>558	CompoundStatement	 
>559	ForStatement	for ( unsigned j = 0 ; j < graph [ i ] . levels ( ) ; j ++ )
>560	CompoundStatement	 
>561	ForStatement	for ( unsigned k = 0 ; k < graph [ i ] [ j ] . size ( ) ; k ++ )
>562	CompoundStatement	 
>563	ExpressionStatement	 
>564	AssignmentExpr	numMatches += graph [ i ] [ j ] [ k ] . size ( )
>565	CallExpression	graph [ i ] [ j ] [ k ] . size ( )
>566	ArgumentList	 
>567	Callee	graph [ i ] [ j ] [ k ] . size
>568	MemberAccess	graph [ i ] [ j ] [ k ] . size
>569	Identifier	size
>570	ArrayIndexing	graph [ i ] [ j ] [ k ]
>571	Identifier	k
>572	ArrayIndexing	graph [ i ] [ j ]
>573	Identifier	j
>574	ArrayIndexing	graph [ i ]
>575	Identifier	i
>576	Identifier	graph
>577	Identifier	numMatches
>578	IncDecOp	 
>579	IncDec	++
>580	Identifier	k
>581	Condition	 
>582	RelationalExpression	k < graph [ i ] [ j ] . size ( )
>583	CallExpression	graph [ i ] [ j ] . size ( )
>584	ArgumentList	 
>585	Callee	graph [ i ] [ j ] . size
>586	MemberAccess	graph [ i ] [ j ] . size
>587	Identifier	size
>588	ArrayIndexing	graph [ i ] [ j ]
>589	Identifier	j
>590	ArrayIndexing	graph [ i ]
>591	Identifier	i
>592	Identifier	graph
>593	Identifier	k
>594	ForInit	 
>595	IdentifierDeclStatement	unsigned k = 0 ;
>596	IdentifierDecl	k = 0
>597	AssignmentExpr	k = 0
>598	PrimaryExpression	0
>599	Identifier	k
>600	Identifier	k
>601	IdentifierDeclType	unsigned
>602	IncDecOp	 
>603	IncDec	++
>604	Identifier	j
>605	Condition	 
>606	RelationalExpression	j < graph [ i ] . levels ( )
>607	CallExpression	graph [ i ] . levels ( )
>608	ArgumentList	 
>609	Callee	graph [ i ] . levels
>610	MemberAccess	graph [ i ] . levels
>611	Identifier	levels
>612	ArrayIndexing	graph [ i ]
>613	Identifier	i
>614	Identifier	graph
>615	Identifier	j
>616	ForInit	 
>617	IdentifierDeclStatement	unsigned j = 0 ;
>618	IdentifierDecl	j = 0
>619	AssignmentExpr	j = 0
>620	PrimaryExpression	0
>621	Identifier	j
>622	Identifier	j
>623	IdentifierDeclType	unsigned
>624	IncDecOp	 
>625	IncDec	++
>626	Identifier	i
>627	Condition	 
>628	RelationalExpression	i < graph . size ( )
>629	CallExpression	graph . size ( )
>630	ArgumentList	 
>631	Callee	graph . size
>632	MemberAccess	graph . size
>633	Identifier	size
>634	Identifier	graph
>635	Identifier	i
>636	ForInit	 
>637	IdentifierDeclStatement	unsigned i = 0 ;
>638	IdentifierDecl	i = 0
>639	AssignmentExpr	i = 0
>640	PrimaryExpression	0
>641	Identifier	i
>642	Identifier	i
>643	IdentifierDeclType	unsigned
>644	IdentifierDeclStatement	 
>645	IdentifierDecl	numMatches = 0
>646	AssignmentExpr	numMatches = 0
>647	PrimaryExpression	0
>648	Identifier	numMatches
>649	Identifier	numMatches
>650	IdentifierDeclType	size_t
>651	ExpressionStatement	 
>652	CallExpression	mxSetFieldByNumber ( plhs [ 0 ] , 0 , 5 , imageSizes )
>653	ArgumentList	plhs [ 0 ]
>654	Argument	imageSizes
>655	Identifier	imageSizes
>656	Argument	5
>657	PrimaryExpression	5
>658	Argument	0
>659	PrimaryExpression	0
>660	Argument	plhs [ 0 ]
>661	ArrayIndexing	plhs [ 0 ]
>662	PrimaryExpression	0
>663	Identifier	plhs
>664	Callee	mxSetFieldByNumber
>665	Identifier	mxSetFieldByNumber
>666	ForStatement	for ( unsigned i = 0 ; i < graph . size ( ) ; i ++ )
>667	CompoundStatement	 
>668	ExpressionStatement	 
>669	AssignmentExpr	px [ i + graph . size ( ) ] = ( double ) graph [ i ] [ 0 ] . height ( )
>670	CastExpression	( double ) graph [ i ] [ 0 ] . height ( )
>671	CallExpression	graph [ i ] [ 0 ] . height ( )
>672	ArgumentList	 
>673	Callee	graph [ i ] [ 0 ] . height
>674	MemberAccess	graph [ i ] [ 0 ] . height
>675	Identifier	height
>676	ArrayIndexing	graph [ i ] [ 0 ]
>677	PrimaryExpression	0
>678	ArrayIndexing	graph [ i ]
>679	Identifier	i
>680	Identifier	graph
>681	CastTarget	double
>682	ArrayIndexing	px [ i + graph . size ( ) ]
>683	AdditiveExpression	i + graph . size ( )
>684	CallExpression	graph . size ( )
>685	ArgumentList	 
>686	Callee	graph . size
>687	MemberAccess	graph . size
>688	Identifier	size
>689	Identifier	graph
>690	Identifier	i
>691	Identifier	px
>692	ExpressionStatement	 
>693	AssignmentExpr	px [ i ] = ( double ) graph [ i ] [ 0 ] . width ( )
>694	CastExpression	( double ) graph [ i ] [ 0 ] . width ( )
>695	CallExpression	graph [ i ] [ 0 ] . width ( )
>696	ArgumentList	 
>697	Callee	graph [ i ] [ 0 ] . width
>698	MemberAccess	graph [ i ] [ 0 ] . width
>699	Identifier	width
>700	ArrayIndexing	graph [ i ] [ 0 ]
>701	PrimaryExpression	0
>702	ArrayIndexing	graph [ i ]
>703	Identifier	i
>704	Identifier	graph
>705	CastTarget	double
>706	ArrayIndexing	px [ i ]
>707	Identifier	i
>708	Identifier	px
>709	IncDecOp	 
>710	IncDec	++
>711	Identifier	i
>712	Condition	 
>713	RelationalExpression	i < graph . size ( )
>714	CallExpression	graph . size ( )
>715	ArgumentList	 
>716	Callee	graph . size
>717	MemberAccess	graph . size
>718	Identifier	size
>719	Identifier	graph
>720	Identifier	i
>721	ForInit	 
>722	IdentifierDeclStatement	unsigned i = 0 ;
>723	IdentifierDecl	i = 0
>724	AssignmentExpr	i = 0
>725	PrimaryExpression	0
>726	Identifier	i
>727	Identifier	i
>728	IdentifierDeclType	unsigned
>729	IdentifierDeclStatement	 
>730	IdentifierDecl	* px = mxGetPr ( imageSizes )
>731	AssignmentExpr	* px = mxGetPr ( imageSizes )
>732	CallExpression	mxGetPr ( imageSizes )
>733	ArgumentList	imageSizes
>734	Argument	imageSizes
>735	Identifier	imageSizes
>736	Callee	mxGetPr
>737	Identifier	mxGetPr
>738	Identifier	px
>739	Identifier	px
>740	IdentifierDeclType	double *
>741	IdentifierDeclStatement	 
>742	IdentifierDecl	* imageSizes = mxCreateDoubleMatrix ( graph . size ( ) , 2 , mxREAL )
>743	AssignmentExpr	* imageSizes = mxCreateDoubleMatrix ( graph . size ( ) , 2 , mxREAL )
>744	CallExpression	mxCreateDoubleMatrix ( graph . size ( ) , 2 , mxREAL )
>745	ArgumentList	graph . size ( )
>746	Argument	mxREAL
>747	Identifier	mxREAL
>748	Argument	2
>749	PrimaryExpression	2
>750	Argument	graph . size ( )
>751	CallExpression	graph . size ( )
>752	ArgumentList	 
>753	Callee	graph . size
>754	MemberAccess	graph . size
>755	Identifier	size
>756	Identifier	graph
>757	Callee	mxCreateDoubleMatrix
>758	Identifier	mxCreateDoubleMatrix
>759	Identifier	imageSizes
>760	Identifier	imageSizes
>761	IdentifierDeclType	mxArray *
>762	ExpressionStatement	 
>763	CallExpression	mxSetFieldByNumber ( plhs [ 0 ] , 0 , 4 , imageNames )
>764	ArgumentList	plhs [ 0 ]
>765	Argument	imageNames
>766	Identifier	imageNames
>767	Argument	4
>768	PrimaryExpression	4
>769	Argument	0
>770	PrimaryExpression	0
>771	Argument	plhs [ 0 ]
>772	ArrayIndexing	plhs [ 0 ]
>773	PrimaryExpression	0
>774	Identifier	plhs
>775	Callee	mxSetFieldByNumber
>776	Identifier	mxSetFieldByNumber
>777	ForStatement	for ( unsigned i = 0 ; i < graph . size ( ) ; i ++ )
>778	CompoundStatement	 
>779	ExpressionStatement	 
>780	CallExpression	mxSetCell ( imageNames , i , mxCreateString ( graph [ i ] . name ( ) . c_str ( ) ) )
>781	ArgumentList	imageNames
>782	Argument	mxCreateString ( graph [ i ] . name ( ) . c_str ( ) )
>783	CallExpression	mxCreateString ( graph [ i ] . name ( ) . c_str ( ) )
>784	ArgumentList	graph [ i ] . name ( ) . c_str ( )
>785	Argument	graph [ i ] . name ( ) . c_str ( )
>786	CallExpression	graph [ i ] . name ( ) . c_str ( )
>787	ArgumentList	 
>788	Callee	graph [ i ] . name ( ) . c_str
>789	MemberAccess	graph [ i ] . name ( ) . c_str
>790	Identifier	c_str
>791	CallExpression	graph [ i ] . name ( )
>792	ArgumentList	 
>793	Callee	graph [ i ] . name
>794	MemberAccess	graph [ i ] . name
>795	Identifier	name
>796	ArrayIndexing	graph [ i ]
>797	Identifier	i
>798	Identifier	graph
>799	Callee	mxCreateString
>800	Identifier	mxCreateString
>801	Argument	i
>802	Identifier	i
>803	Argument	imageNames
>804	Identifier	imageNames
>805	Callee	mxSetCell
>806	Identifier	mxSetCell
>807	IncDecOp	 
>808	IncDec	++
>809	Identifier	i
>810	Condition	 
>811	RelationalExpression	i < graph . size ( )
>812	CallExpression	graph . size ( )
>813	ArgumentList	 
>814	Callee	graph . size
>815	MemberAccess	graph . size
>816	Identifier	size
>817	Identifier	graph
>818	Identifier	i
>819	ForInit	 
>820	IdentifierDeclStatement	unsigned i = 0 ;
>821	IdentifierDecl	i = 0
>822	AssignmentExpr	i = 0
>823	PrimaryExpression	0
>824	Identifier	i
>825	Identifier	i
>826	IdentifierDeclType	unsigned
>827	IdentifierDeclStatement	 
>828	IdentifierDecl	* imageNames = mxCreateCellMatrix ( graph . size ( ) , 1 )
>829	AssignmentExpr	* imageNames = mxCreateCellMatrix ( graph . size ( ) , 1 )
>830	CallExpression	mxCreateCellMatrix ( graph . size ( ) , 1 )
>831	ArgumentList	graph . size ( )
>832	Argument	1
>833	PrimaryExpression	1
>834	Argument	graph . size ( )
>835	CallExpression	graph . size ( )
>836	ArgumentList	 
>837	Callee	graph . size
>838	MemberAccess	graph . size
>839	Identifier	size
>840	Identifier	graph
>841	Callee	mxCreateCellMatrix
>842	Identifier	mxCreateCellMatrix
>843	Identifier	imageNames
>844	Identifier	imageNames
>845	IdentifierDeclType	mxArray *
>846	ExpressionStatement	 
>847	CallExpression	mxSetFieldByNumber ( plhs [ 0 ] , 0 , 3 , mxCreateDoubleScalar ( ( double ) graph . patchHeight ( ) ) )
>848	ArgumentList	plhs [ 0 ]
>849	Argument	mxCreateDoubleScalar ( ( double ) graph . patchHeight ( ) )
>850	CallExpression	mxCreateDoubleScalar ( ( double ) graph . patchHeight ( ) )
>851	ArgumentList	( double ) graph . patchHeight ( )
>852	Argument	( double ) graph . patchHeight ( )
>853	CastExpression	( double ) graph . patchHeight ( )
>854	CallExpression	graph . patchHeight ( )
>855	ArgumentList	 
>856	Callee	graph . patchHeight
>857	MemberAccess	graph . patchHeight
>858	Identifier	patchHeight
>859	Identifier	graph
>860	CastTarget	double
>861	Callee	mxCreateDoubleScalar
>862	Identifier	mxCreateDoubleScalar
>863	Argument	3
>864	PrimaryExpression	3
>865	Argument	0
>866	PrimaryExpression	0
>867	Argument	plhs [ 0 ]
>868	ArrayIndexing	plhs [ 0 ]
>869	PrimaryExpression	0
>870	Identifier	plhs
>871	Callee	mxSetFieldByNumber
>872	Identifier	mxSetFieldByNumber
>873	ExpressionStatement	 
>874	CallExpression	mxSetFieldByNumber ( plhs [ 0 ] , 0 , 2 , mxCreateDoubleScalar ( ( double ) graph . patchWidth ( ) ) )
>875	ArgumentList	plhs [ 0 ]
>876	Argument	mxCreateDoubleScalar ( ( double ) graph . patchWidth ( ) )
>877	CallExpression	mxCreateDoubleScalar ( ( double ) graph . patchWidth ( ) )
>878	ArgumentList	( double ) graph . patchWidth ( )
>879	Argument	( double ) graph . patchWidth ( )
>880	CastExpression	( double ) graph . patchWidth ( )
>881	CallExpression	graph . patchWidth ( )
>882	ArgumentList	 
>883	Callee	graph . patchWidth
>884	MemberAccess	graph . patchWidth
>885	Identifier	patchWidth
>886	Identifier	graph
>887	CastTarget	double
>888	Callee	mxCreateDoubleScalar
>889	Identifier	mxCreateDoubleScalar
>890	Argument	2
>891	PrimaryExpression	2
>892	Argument	0
>893	PrimaryExpression	0
>894	Argument	plhs [ 0 ]
>895	ArrayIndexing	plhs [ 0 ]
>896	PrimaryExpression	0
>897	Identifier	plhs
>898	Callee	mxSetFieldByNumber
>899	Identifier	mxSetFieldByNumber
>900	ExpressionStatement	 
>901	CallExpression	mxSetFieldByNumber ( plhs [ 0 ] , 0 , 1 , mxCreateString ( graph . imageExtension . c_str ( ) ) )
>902	ArgumentList	plhs [ 0 ]
>903	Argument	mxCreateString ( graph . imageExtension . c_str ( ) )
>904	CallExpression	mxCreateString ( graph . imageExtension . c_str ( ) )
>905	ArgumentList	graph . imageExtension . c_str ( )
>906	Argument	graph . imageExtension . c_str ( )
>907	CallExpression	graph . imageExtension . c_str ( )
>908	ArgumentList	 
>909	Callee	graph . imageExtension . c_str
>910	MemberAccess	graph . imageExtension . c_str
>911	Identifier	c_str
>912	MemberAccess	graph . imageExtension
>913	Identifier	imageExtension
>914	Identifier	graph
>915	Callee	mxCreateString
>916	Identifier	mxCreateString
>917	Argument	1
>918	PrimaryExpression	1
>919	Argument	0
>920	PrimaryExpression	0
>921	Argument	plhs [ 0 ]
>922	ArrayIndexing	plhs [ 0 ]
>923	PrimaryExpression	0
>924	Identifier	plhs
>925	Callee	mxSetFieldByNumber
>926	Identifier	mxSetFieldByNumber
>927	ExpressionStatement	 
>928	CallExpression	mxSetFieldByNumber ( plhs [ 0 ] , 0 , 0 , mxCreateString ( graph . imageDirectory . c_str ( ) ) )
>929	ArgumentList	plhs [ 0 ]
>930	Argument	mxCreateString ( graph . imageDirectory . c_str ( ) )
>931	CallExpression	mxCreateString ( graph . imageDirectory . c_str ( ) )
>932	ArgumentList	graph . imageDirectory . c_str ( )
>933	Argument	graph . imageDirectory . c_str ( )
>934	CallExpression	graph . imageDirectory . c_str ( )
>935	ArgumentList	 
>936	Callee	graph . imageDirectory . c_str
>937	MemberAccess	graph . imageDirectory . c_str
>938	Identifier	c_str
>939	MemberAccess	graph . imageDirectory
>940	Identifier	imageDirectory
>941	Identifier	graph
>942	Callee	mxCreateString
>943	Identifier	mxCreateString
>944	Argument	0
>945	PrimaryExpression	0
>946	Argument	0
>947	PrimaryExpression	0
>948	Argument	plhs [ 0 ]
>949	ArrayIndexing	plhs [ 0 ]
>950	PrimaryExpression	0
>951	Identifier	plhs
>952	Callee	mxSetFieldByNumber
>953	Identifier	mxSetFieldByNumber
>954	ExpressionStatement	 
>955	AssignmentExpr	plhs [ 0 ] = mxCreateStructMatrix ( 1 , 1 , 7 , fnames )
>956	CallExpression	mxCreateStructMatrix ( 1 , 1 , 7 , fnames )
>957	ArgumentList	1
>958	Argument	fnames
>959	Identifier	fnames
>960	Argument	7
>961	PrimaryExpression	7
>962	Argument	1
>963	PrimaryExpression	1
>964	Argument	1
>965	PrimaryExpression	1
>966	Callee	mxCreateStructMatrix
>967	Identifier	mxCreateStructMatrix
>968	ArrayIndexing	plhs [ 0 ]
>969	PrimaryExpression	0
>970	Identifier	plhs
>971	IdentifierDeclStatement	 
>972	IdentifierDecl	* fnames [ ] = { \"dir\" , \"ext\" , \"patchWidth\" , \"patchHeight\" , \"imageNames\" , \"imageSizes\" , \"matches\" }
>973	AssignmentExpr	* fnames [ ] = { \"dir\" , \"ext\" , \"patchWidth\" , \"patchHeight\" , \"imageNames\" , \"imageSizes\" , \"matches\" }
>974	InitializerList	\"dir\"
>975	PrimaryExpression	\"matches\"
>976	PrimaryExpression	\"imageSizes\"
>977	PrimaryExpression	\"imageNames\"
>978	PrimaryExpression	\"patchHeight\"
>979	PrimaryExpression	\"patchWidth\"
>980	PrimaryExpression	\"ext\"
>981	PrimaryExpression	\"dir\"
>982	Identifier	fnames
>983	Identifier	fnames
>984	IdentifierDeclType	const char * [ ]
>985	Condition	 
>986	EqualityExpression	nlhs == 1
>987	PrimaryExpression	1
>988	Identifier	nlhs
>989	ExpressionStatement	 
>990	CallExpression	mxFree ( filebase )
>991	ArgumentList	filebase
>992	Argument	filebase
>993	Identifier	filebase
>994	Callee	mxFree
>995	Identifier	mxFree
>996	ExpressionStatement	 
>997	CallExpression	DRWN_LOG_MESSAGE ( \"...graph has \" << graph . size ( ) << \" images\" )
>998	ArgumentList	\"...graph has \" << graph . size ( ) << \" images\"
>999	Argument	\"...graph has \" << graph . size ( ) << \" images\"
>1000	ShiftExpression	\"...graph has \" << graph . size ( ) << \" images\"
>1001	ShiftExpression	graph . size ( ) << \" images\"
>1002	PrimaryExpression	\" images\"
>1003	CallExpression	graph . size ( )
>1004	ArgumentList	 
>1005	Callee	graph . size
>1006	MemberAccess	graph . size
>1007	Identifier	size
>1008	Identifier	graph
>1009	PrimaryExpression	\"...graph has \"
>1010	Callee	DRWN_LOG_MESSAGE
>1011	Identifier	DRWN_LOG_MESSAGE
>1012	ExpressionStatement	 
>1013	CallExpression	graph . read ( filebase )
>1014	ArgumentList	filebase
>1015	Argument	filebase
>1016	Identifier	filebase
>1017	Callee	graph . read
>1018	MemberAccess	graph . read
>1019	Identifier	read
>1020	Identifier	graph
>1021	ExpressionStatement	 
>1022	CallExpression	DRWN_LOG_MESSAGE ( \"Loading PatchMatchGraph from \" << filebase << \"...\" )
>1023	ArgumentList	\"Loading PatchMatchGraph from \" << filebase << \"...\"
>1024	Argument	\"Loading PatchMatchGraph from \" << filebase << \"...\"
>1025	ShiftExpression	\"Loading PatchMatchGraph from \" << filebase << \"...\"
>1026	ShiftExpression	filebase << \"...\"
>1027	PrimaryExpression	\"...\"
>1028	Identifier	filebase
>1029	PrimaryExpression	\"Loading PatchMatchGraph from \"
>1030	Callee	DRWN_LOG_MESSAGE
>1031	Identifier	DRWN_LOG_MESSAGE
>1032	IdentifierDeclStatement	 
>1033	IdentifierDecl	graph
>1034	Identifier	graph
>1035	IdentifierDeclType	drwnPatchMatchGraph
>1036	IdentifierDeclStatement	 
>1037	IdentifierDecl	* filebase = mxArrayToString ( prhs [ 0 ] )
>1038	AssignmentExpr	* filebase = mxArrayToString ( prhs [ 0 ] )
>1039	CallExpression	mxArrayToString ( prhs [ 0 ] )
>1040	ArgumentList	prhs [ 0 ]
>1041	Argument	prhs [ 0 ]
>1042	ArrayIndexing	prhs [ 0 ]
>1043	PrimaryExpression	0
>1044	Identifier	prhs
>1045	Callee	mxArrayToString
>1046	Identifier	mxArrayToString
>1047	Identifier	filebase
>1048	Identifier	filebase
>1049	IdentifierDeclType	char *
>1050	ExpressionStatement	 
>1051	CallExpression	drwnCodeProfiler 
>1052	ArgumentList	drwnCodeProfiler 
>1053	Argument	drwnCodeProfiler 
>1054	CallExpression	drwnCodeProfiler 
>1055	ArgumentList	\"mex\"
>1056	Argument	\"mex\"
>1057	PrimaryExpression	\"mex\"
>1058	Callee	drwnCodeProfiler 
>1059	Identifier	drwnCodeProfiler 
>1060	Callee	drwnCodeProfiler 
>1061	Identifier	drwnCodeProfiler 
>1062	ExpressionStatement	 
>1063	CallExpression	drwnMatlabUtils 
>1064	ArgumentList	options
>1065	Argument	options
>1066	Identifier	options
>1067	Callee	drwnMatlabUtils 
>1068	Identifier	drwnMatlabUtils 
>1069	IfStatement	if ( nrhs == 2 )
>1070	CompoundStatement	 
>1071	ExpressionStatement	 
>1072	CallExpression	drwnMatlabUtils 
>1073	ArgumentList	prhs [ nrhs - 1 ]
>1074	Argument	options
>1075	Identifier	options
>1076	Argument	prhs [ nrhs - 1 ]
>1077	ArrayIndexing	prhs [ nrhs - 1 ]
>1078	AdditiveExpression	nrhs - 1
>1079	PrimaryExpression	1
>1080	Identifier	nrhs
>1081	Identifier	prhs
>1082	Callee	drwnMatlabUtils 
>1083	Identifier	drwnMatlabUtils 
>1084	Condition	 
>1085	EqualityExpression	nrhs == 2
>1086	PrimaryExpression	2
>1087	Identifier	nrhs
>1088	ExpressionStatement	 
>1089	CallExpression	drwnMatlabUtils 
>1090	ArgumentList	options
>1091	Argument	options
>1092	Identifier	options
>1093	Callee	drwnMatlabUtils 
>1094	Identifier	drwnMatlabUtils 
>1095	IdentifierDeclStatement	 
>1096	IdentifierDecl	options
>1097	Identifier	options
>1098	IdentifierDeclType	map < string , string >
>1099	IfStatement	if ( ( nrhs != 1 ) && ( nrhs != 2 ) )
>1100	CompoundStatement	 
>1101	ExpressionStatement	 
>1102	CallExpression	mexErrMsgTxt ( \"incorrect number of input arguments\" )
>1103	ArgumentList	\"incorrect number of input arguments\"
>1104	Argument	\"incorrect number of input arguments\"
>1105	PrimaryExpression	\"incorrect number of input arguments\"
>1106	Callee	mexErrMsgTxt
>1107	Identifier	mexErrMsgTxt
>1108	ExpressionStatement	 
>1109	CallExpression	usage ( )
>1110	ArgumentList	 
>1111	Callee	usage
>1112	Identifier	usage
>1113	Condition	 
>1114	AndExpression	( nrhs != 1 ) && ( nrhs != 2 )
>1115	EqualityExpression	nrhs != 2
>1116	PrimaryExpression	2
>1117	Identifier	nrhs
>1118	EqualityExpression	nrhs != 1
>1119	PrimaryExpression	1
>1120	Identifier	nrhs
>1121	ExpressionStatement	 
>1122	CallExpression	drwnMatlabUtils 
>1123	ArgumentList	 
>1124	Callee	drwnMatlabUtils 
>1125	Identifier	drwnMatlabUtils 
<3=6,5,4
<6=47,40,33,26,19,14,7
<7=8
<8=12,9
<9=10
<10=11
<12=13
<14=15
<15=17,16
<17=18
<19=20
<20=24,21
<21=22
<22=23
<24=25
<26=27
<27=31,28
<28=29
<29=30
<31=32
<33=34
<34=38,35
<35=36
<36=37
<38=39
<40=41
<41=45,42
<42=43
<43=44
<45=46
<47=48
<48=52,49
<49=50
<50=51
<52=53
<58=73,72,59
<59=69,66,63,60
<60=62,61
<63=65,64
<66=68,67
<69=71,70
<73=1121,1099,1095,1088,1069,1062,1050,1036,1032,1021,1012,996,989,91,79,74
<74=75
<75=77,76
<77=78
<79=80
<80=89,81
<81=82
<82=83
<83=87,84
<84=85
<85=86
<87=88
<89=90
<91=985,92
<92=971,954,927,900,873,846,827,777,762,741,729,666,651,644,557,541,532,108,93
<93=94
<94=106,95
<95=102,100,98,96
<96=97
<98=99
<100=101
<102=103
<103=105,104
<106=107
<108=524,515,512,109
<109=110
<110=504,493,490,111
<111=112
<112=482,469,466,113
<113=453,114
<114=440,431,428,115
<115=418,400,376,359,342,328,314,302,290,274,255,234,209,184,170,156,144,132,120,116
<116=117
<117=119,118
<120=121
<121=127,122
<122=126,123
<123=125,124
<127=131,128
<128=130,129
<132=133
<133=139,134
<134=138,135
<135=137,136
<139=143,140
<140=142,141
<144=145
<145=151,146
<146=150,147
<147=149,148
<151=155,152
<152=154,153
<156=157
<157=165,158
<158=160,159
<160=164,161
<161=163,162
<165=169,166
<166=168,167
<170=171
<171=179,172
<172=174,173
<174=178,175
<175=177,176
<179=183,180
<180=182,181
<184=185
<185=208,186
<186=198,187
<187=196,190,188
<188=189
<190=191
<191=193,192
<193=195,194
<196=197
<198=199
<199=201,200
<201=207,202
<202=204,203
<204=206,205
<209=210
<210=233,211
<211=223,212
<212=221,215,213
<213=214
<215=216
<216=218,217
<218=220,219
<221=222
<223=224
<224=226,225
<226=232,227
<227=229,228
<229=231,230
<234=235
<235=254,236
<236=252,237
<237=245,238
<238=239
<239=241,240
<241=242
<242=244,243
<245=246
<246=248,247
<248=249
<249=251,250
<252=253
<255=256
<256=273,257
<257=271,258
<258=265,259
<259=260
<260=262,261
<262=264,263
<265=266
<266=268,267
<268=270,269
<271=272
<274=275
<275=285,276
<276=284,277
<277=279,278
<279=281,280
<281=283,282
<285=289,286
<286=288,287
<290=291
<291=297,292
<292=296,293
<293=295,294
<297=301,298
<298=300,299
<302=303
<303=309,304
<304=308,305
<305=307,306
<309=313,310
<310=312,311
<314=315
<315=323,316
<316=318,317
<318=322,319
<319=321,320
<323=327,324
<324=326,325
<328=329
<329=337,330
<330=332,331
<332=336,333
<333=335,334
<337=341,338
<338=340,339
<342=343
<343=358,344
<344=352,345
<345=350,348,346
<346=347
<348=349
<350=351
<352=353
<353=355,354
<355=357,356
<359=360
<360=375,361
<361=369,362
<362=367,365,363
<363=364
<365=366
<367=368
<369=370
<370=372,371
<372=374,373
<376=377
<377=399,398,378
<378=397,379
<379=395,380
<380=388,381
<381=382
<382=384,383
<384=385
<385=387,386
<388=389
<389=391,390
<391=392
<392=394,393
<395=396
<400=401
<401=417,416,402
<402=415,403
<403=407,404
<404=405
<405=406
<407=408
<408=410,409
<410=412,411
<412=414,413
<418=419
<419=425,420
<420=424,421
<421=423,422
<425=427,426
<428=430,429
<431=432
<432=439,433
<433=435,434
<435=436
<436=438,437
<440=441
<441=442
<442=452,451,443
<443=450,444
<444=446,445
<446=447
<447=449,448
<453=454
<454=465,464,455
<455=463,456
<456=458,457
<458=460,459
<460=462,461
<466=468,467
<469=470
<470=481,471
<471=473,472
<473=474
<474=476,475
<476=478,477
<478=480,479
<482=483
<483=484
<484=489,488,485
<485=487,486
<490=492,491
<493=494
<494=503,495
<495=497,496
<497=498
<498=500,499
<500=502,501
<504=505
<505=506
<506=511,510,507
<507=509,508
<512=514,513
<515=516
<516=523,517
<517=519,518
<519=520
<520=522,521
<524=525
<525=526
<526=531,530,527
<527=529,528
<532=533
<533=540,534
<534=538,535
<535=536
<536=537
<538=539
<541=542
<542=556,555,543
<543=554,544
<544=552,545
<545=550,548,546
<546=547
<548=549
<550=551
<552=553
<557=636,627,624,558
<558=559
<559=616,605,602,560
<560=561
<561=594,581,578,562
<562=563
<563=564
<564=577,565
<565=567,566
<567=568
<568=570,569
<570=572,571
<572=574,573
<574=576,575
<578=580,579
<581=582
<582=593,583
<583=585,584
<585=586
<586=588,587
<588=590,589
<590=592,591
<594=595
<595=596
<596=601,600,597
<597=599,598
<602=604,603
<605=606
<606=615,607
<607=609,608
<609=610
<610=612,611
<612=614,613
<616=617
<617=618
<618=623,622,619
<619=621,620
<624=626,625
<627=628
<628=635,629
<629=631,630
<631=632
<632=634,633
<636=637
<637=638
<638=643,642,639
<639=641,640
<644=645
<645=650,649,646
<646=648,647
<651=652
<652=664,653
<653=660,658,656,654
<654=655
<656=657
<658=659
<660=661
<661=663,662
<664=665
<666=721,712,709,667
<667=692,668
<668=669
<669=682,670
<670=681,671
<671=673,672
<673=674
<674=676,675
<676=678,677
<678=680,679
<682=691,683
<683=690,684
<684=686,685
<686=687
<687=689,688
<692=693
<693=706,694
<694=705,695
<695=697,696
<697=698
<698=700,699
<700=702,701
<702=704,703
<706=708,707
<709=711,710
<712=713
<713=720,714
<714=716,715
<716=717
<717=719,718
<721=722
<722=723
<723=728,727,724
<724=726,725
<729=730
<730=740,739,731
<731=738,732
<732=736,733
<733=734
<734=735
<736=737
<741=742
<742=761,760,743
<743=759,744
<744=757,745
<745=750,748,746
<746=747
<748=749
<750=751
<751=753,752
<753=754
<754=756,755
<757=758
<762=763
<763=775,764
<764=771,769,767,765
<765=766
<767=768
<769=770
<771=772
<772=774,773
<775=776
<777=819,810,807,778
<778=779
<779=780
<780=805,781
<781=803,801,782
<782=783
<783=799,784
<784=785
<785=786
<786=788,787
<788=789
<789=791,790
<791=793,792
<793=794
<794=796,795
<796=798,797
<799=800
<801=802
<803=804
<805=806
<807=809,808
<810=811
<811=818,812
<812=814,813
<814=815
<815=817,816
<819=820
<820=821
<821=826,825,822
<822=824,823
<827=828
<828=845,844,829
<829=843,830
<830=841,831
<831=834,832
<832=833
<834=835
<835=837,836
<837=838
<838=840,839
<841=842
<846=847
<847=871,848
<848=867,865,863,849
<849=850
<850=861,851
<851=852
<852=853
<853=860,854
<854=856,855
<856=857
<857=859,858
<861=862
<863=864
<865=866
<867=868
<868=870,869
<871=872
<873=874
<874=898,875
<875=894,892,890,876
<876=877
<877=888,878
<878=879
<879=880
<880=887,881
<881=883,882
<883=884
<884=886,885
<888=889
<890=891
<892=893
<894=895
<895=897,896
<898=899
<900=901
<901=925,902
<902=921,919,917,903
<903=904
<904=915,905
<905=906
<906=907
<907=909,908
<909=910
<910=912,911
<912=914,913
<915=916
<917=918
<919=920
<921=922
<922=924,923
<925=926
<927=928
<928=952,929
<929=948,946,944,930
<930=931
<931=942,932
<932=933
<933=934
<934=936,935
<936=937
<937=939,938
<939=941,940
<942=943
<944=945
<946=947
<948=949
<949=951,950
<952=953
<954=955
<955=968,956
<956=966,957
<957=964,962,960,958
<958=959
<960=961
<962=963
<964=965
<966=967
<968=970,969
<971=972
<972=984,983,973
<973=982,974
<974=981,980,979,978,977,976,975
<985=986
<986=988,987
<989=990
<990=994,991
<991=992
<992=993
<994=995
<996=997
<997=1010,998
<998=999
<999=1000
<1000=1009,1001
<1001=1003,1002
<1003=1005,1004
<1005=1006
<1006=1008,1007
<1010=1011
<1012=1013
<1013=1017,1014
<1014=1015
<1015=1016
<1017=1018
<1018=1020,1019
<1021=1022
<1022=1030,1023
<1023=1024
<1024=1025
<1025=1029,1026
<1026=1028,1027
<1030=1031
<1032=1033
<1033=1035,1034
<1036=1037
<1037=1049,1048,1038
<1038=1047,1039
<1039=1045,1040
<1040=1041
<1041=1042
<1042=1044,1043
<1045=1046
<1050=1051
<1051=1060,1052
<1052=1053
<1053=1054
<1054=1058,1055
<1055=1056
<1056=1057
<1058=1059
<1060=1061
<1062=1063
<1063=1067,1064
<1064=1065
<1065=1066
<1067=1068
<1069=1084,1070
<1070=1071
<1071=1072
<1072=1082,1073
<1073=1076,1074
<1074=1075
<1076=1077
<1077=1081,1078
<1078=1080,1079
<1082=1083
<1084=1085
<1085=1087,1086
<1088=1089
<1089=1093,1090
<1090=1091
<1091=1092
<1093=1094
<1095=1096
<1096=1098,1097
<1099=1113,1100
<1100=1108,1101
<1101=1102
<1102=1106,1103
<1103=1104
<1104=1105
<1106=1107
<1108=1109
<1109=1111,1110
<1111=1112
<1113=1114
<1114=1118,1115
<1115=1117,1116
<1118=1120,1119
<1121=1122
<1122=1124,1123
<1124=1125
