>7	FunctionDef	dvo 
>8	ParameterList	 
>9	CompoundStatement	 
>13	FunctionDef	dvo 
>14	ParameterList	const size_t maxnum_constraints
>15	Parameter	 
>16	Identifier	maxnum_constraints
>17	ParameterType	const size_t
>18	ReturnType	void
>19	CompoundStatement	 
>20	ExpressionStatement	 
>21	AssignmentExpr	this -> maxnum_constraints = maxnum_constraints
>22	Identifier	maxnum_constraints
>23	PtrMemberAccess	this -> maxnum_constraints
>24	Identifier	maxnum_constraints
>25	Identifier	this
>26	ExpressionStatement	 
>27	AssignmentExpr	this -> num_constraints = 0
>28	PrimaryExpression	0
>29	PtrMemberAccess	this -> num_constraints
>30	Identifier	num_constraints
>31	Identifier	this
>32	ExpressionStatement	 
>33	AssignmentExpr	error = 0
>34	PrimaryExpression	0
>35	Identifier	error
>36	ExpressionStatement	 
>37	CallExpression	b . setZero ( )
>38	ArgumentList	 
>39	Callee	b . setZero
>40	MemberAccess	b . setZero
>41	Identifier	setZero
>42	Identifier	b
>43	ExpressionStatement	 
>44	CallExpression	A_opt . setZero ( )
>45	ArgumentList	 
>46	Callee	A_opt . setZero
>47	MemberAccess	A_opt . setZero
>48	Identifier	setZero
>49	Identifier	A_opt
>50	ExpressionStatement	 
>51	CallExpression	A . setZero ( )
>52	ArgumentList	 
>53	Callee	A . setZero
>54	MemberAccess	A . setZero
>55	Identifier	setZero
>56	Identifier	A
>69	FunctionDef	dvo 
>70	ParameterList	const dvo 
>71	Parameter	 
>72	Identifier	weight
>73	ParameterType	const NumType &
>74	Parameter	 
>75	Identifier	res
>76	ParameterType	const NumType &
>77	Parameter	 
>78	Identifier	J
>79	ParameterType	const dvo 
>80	ReturnType	void
>81	CompoundStatement	 
>82	ExpressionStatement	 
>83	AssignmentExpr	num_constraints += 1
>84	PrimaryExpression	1
>85	Identifier	num_constraints
>86	ExpressionStatement	 
>87	CallExpression	add ( b , J , - res * factor )
>88	ArgumentList	b
>89	Argument	- res * factor
>90	MultiplicativeExpression	- res * factor
>91	Identifier	factor
>92	UnaryOp	- res
>93	Identifier	res
>94	UnaryOperator	-
>95	Argument	J
>96	Identifier	J
>97	Argument	b
>98	Identifier	b
>99	Callee	add
>100	Identifier	add
>101	Statement	 
>102	Statement	 
>103	Statement	 
>104	Statement	 
>105	Statement	 
>106	Statement	 
>107	Statement	 
>108	Statement	 
>109	Statement	 
>110	ExpressionStatement	 
>111	CallExpression	A_opt . rankUpdate ( J , factor )
>112	ArgumentList	J
>113	Argument	factor
>114	Identifier	factor
>115	Argument	J
>116	Identifier	J
>117	Callee	A_opt . rankUpdate
>118	MemberAccess	A_opt . rankUpdate
>119	Identifier	rankUpdate
>120	Identifier	A_opt
>121	IdentifierDeclStatement	 
>122	IdentifierDecl	factor = weight
>123	AssignmentExpr	factor = weight
>124	Identifier	weight
>125	Identifier	weight
>126	Identifier	factor
>127	IdentifierDeclType	NumType
>138	FunctionDef	dvo 
>139	ParameterList	const Eigen 
>140	Parameter	 
>141	Identifier	weight
>142	ParameterType	const Eigen 
>143	Parameter	 
>144	Identifier	res
>145	ParameterType	const Eigen 
>146	Parameter	 
>147	Identifier	J
>148	ParameterType	const Eigen 
>149	ReturnType	void
>150	CompoundStatement	 
>151	ExpressionStatement	 
>152	AssignmentExpr	num_constraints += 1
>153	PrimaryExpression	1
>154	Identifier	num_constraints
>155	ExpressionStatement	 
>156	AssignmentExpr	b -= J . transpose ( ) * weight * res
>157	MultiplicativeExpression	J . transpose ( ) * weight * res
>158	MultiplicativeExpression	weight * res
>159	Identifier	res
>160	Identifier	weight
>161	CallExpression	J . transpose ( )
>162	ArgumentList	 
>163	Callee	J . transpose
>164	MemberAccess	J . transpose
>165	Identifier	transpose
>166	Identifier	J
>167	Identifier	b
>168	ExpressionStatement	 
>169	CallExpression	A_opt . rankUpdate ( J , weight )
>170	ArgumentList	J
>171	Argument	weight
>172	Identifier	weight
>173	Argument	J
>174	Identifier	J
>175	Callee	A_opt . rankUpdate
>176	MemberAccess	A_opt . rankUpdate
>177	Identifier	rankUpdate
>178	Identifier	A_opt
>189	FunctionDef	dvo 
>190	ParameterList	const dvo 
>191	Parameter	 
>192	Identifier	other
>193	ParameterType	const dvo 
>194	ReturnType	void
>195	CompoundStatement	 
>196	ExpressionStatement	 
>197	AssignmentExpr	num_constraints += other . num_constraints
>198	MemberAccess	other . num_constraints
>199	Identifier	num_constraints
>200	Identifier	other
>201	Identifier	num_constraints
>202	ExpressionStatement	 
>203	AssignmentExpr	b += other . b
>204	MemberAccess	other . b
>205	Identifier	b
>206	Identifier	other
>207	Identifier	b
>208	ExpressionStatement	 
>209	AssignmentExpr	A_opt += other . A_opt
>210	MemberAccess	other . A_opt
>211	Identifier	A_opt
>212	Identifier	other
>213	Identifier	A_opt
>224	FunctionDef	dvo 
>225	ParameterList	 
>226	ReturnType	void
>227	CompoundStatement	 
>228	ExpressionStatement	 
>229	CallExpression	A_opt . toEigen ( A )
>230	ArgumentList	A
>231	Argument	A
>232	Identifier	A
>233	Callee	A_opt . toEigen
>234	MemberAccess	A_opt . toEigen
>235	Identifier	toEigen
>236	Identifier	A_opt
>242	FunctionDef	dvo 
>243	ParameterList	dvo 
>244	Parameter	 
>245	Identifier	x
>246	ParameterType	dvo 
>247	ReturnType	void
>248	CompoundStatement	 
>249	ExpressionStatement	 
>250	AssignmentExpr	x = A . ldlt ( ) . solve ( b )
>251	CallExpression	A . ldlt ( ) . solve ( b )
>252	ArgumentList	b
>253	Argument	b
>254	Identifier	b
>255	Callee	A . ldlt ( ) . solve
>256	MemberAccess	A . ldlt ( ) . solve
>257	Identifier	solve
>258	CallExpression	A . ldlt ( )
>259	ArgumentList	 
>260	Callee	A . ldlt
>261	MemberAccess	A . ldlt
>262	Identifier	ldlt
>263	Identifier	A
>264	Identifier	x
>273	FunctionDef	dvo 
>274	ParameterList	 
>275	CompoundStatement	 
>279	FunctionDef	dvo 
>280	ParameterList	dvo 
>281	Parameter	 
>282	Identifier	x
>283	ParameterType	dvo 
>284	ReturnType	void
>285	CompoundStatement	 
>286	ExpressionStatement	 
>287	AssignmentExpr	x = eigenvectors * eigenvalues . asDiagonal ( ) * eigenvectors . transpose ( ) * b
>288	MultiplicativeExpression	eigenvectors * eigenvalues . asDiagonal ( ) * eigenvectors . transpose ( ) * b
>289	MultiplicativeExpression	eigenvalues . asDiagonal ( ) * eigenvectors . transpose ( ) * b
>290	MultiplicativeExpression	eigenvectors . transpose ( ) * b
>291	Identifier	b
>292	CallExpression	eigenvectors . transpose ( )
>293	ArgumentList	 
>294	Callee	eigenvectors . transpose
>295	MemberAccess	eigenvectors . transpose
>296	Identifier	transpose
>297	Identifier	eigenvectors
>298	CallExpression	eigenvalues . asDiagonal ( )
>299	ArgumentList	 
>300	Callee	eigenvalues . asDiagonal
>301	MemberAccess	eigenvalues . asDiagonal
>302	Identifier	asDiagonal
>303	Identifier	eigenvalues
>304	Identifier	eigenvectors
>305	Identifier	x
>306	ForStatement	for ( int i = 0 ; i < 6 ; ++ i )
>307	CompoundStatement	 
>308	IfStatement	if ( eigenvalues ( i ) < 0.05 )
>309	ElseStatement	else
>310	CompoundStatement	 
>311	ExpressionStatement	 
>312	AssignmentExpr	eigenvalues ( i ) = 1.0 / eigenvalues ( i )
>313	MultiplicativeExpression	1.0 / eigenvalues ( i )
>314	CallExpression	eigenvalues ( i )
>315	ArgumentList	i
>316	Argument	i
>317	Identifier	i
>318	Callee	eigenvalues
>319	Identifier	eigenvalues
>320	PrimaryExpression	1.0
>321	CallExpression	eigenvalues ( i )
>322	ArgumentList	i
>323	Argument	i
>324	Identifier	i
>325	Callee	eigenvalues
>326	Identifier	eigenvalues
>327	CompoundStatement	 
>328	ExpressionStatement	 
>329	CallExpression	std 
>330	ArgumentList	 
>331	Callee	std 
>332	Identifier	std 
>333	Statement	 
>334	ExpressionStatement	 
>335	AssignmentExpr	singular = true
>336	Identifier	true
>337	Identifier	singular
>338	Condition	 
>339	RelationalExpression	eigenvalues ( i ) < 0.05
>340	PrimaryExpression	0.05
>341	CallExpression	eigenvalues ( i )
>342	ArgumentList	i
>343	Argument	i
>344	Identifier	i
>345	Callee	eigenvalues
>346	Identifier	eigenvalues
>347	UnaryExpression	 
>348	Identifier	i
>349	IncDec	++
>350	Condition	 
>351	RelationalExpression	i < 6
>352	PrimaryExpression	6
>353	Identifier	i
>354	ForInit	 
>355	IdentifierDeclStatement	int i = 0 ;
>356	IdentifierDecl	i = 0
>357	AssignmentExpr	i = 0
>358	PrimaryExpression	0
>359	Identifier	i
>360	Identifier	i
>361	IdentifierDeclType	int
>362	IdentifierDeclStatement	 
>363	IdentifierDecl	singular = false
>364	AssignmentExpr	singular = false
>365	Identifier	false
>366	Identifier	false
>367	Identifier	singular
>368	IdentifierDeclType	bool
>369	IdentifierDeclStatement	 
>370	IdentifierDecl	eigenvectors = eigensolver . eigenvectors ( )
>371	AssignmentExpr	eigenvectors = eigensolver . eigenvectors ( )
>372	CallExpression	eigensolver . eigenvectors ( )
>373	ArgumentList	 
>374	Callee	eigensolver . eigenvectors
>375	MemberAccess	eigensolver . eigenvectors
>376	Identifier	eigenvectors
>377	Identifier	eigensolver
>378	Identifier	eigenvectors
>379	Identifier	eigenvectors
>380	IdentifierDeclType	dvo 
>381	IdentifierDeclStatement	 
>382	IdentifierDecl	eigenvalues = eigensolver . eigenvalues ( )
>383	AssignmentExpr	eigenvalues = eigensolver . eigenvalues ( )
>384	CallExpression	eigensolver . eigenvalues ( )
>385	ArgumentList	 
>386	Callee	eigensolver . eigenvalues
>387	MemberAccess	eigensolver . eigenvalues
>388	Identifier	eigenvalues
>389	Identifier	eigensolver
>390	Identifier	eigenvalues
>391	Identifier	eigenvalues
>392	IdentifierDeclType	dvo 
>393	IdentifierDeclStatement	 
>394	IdentifierDecl	eigensolver ( A )
>395	Identifier	A
>396	Identifier	eigensolver
>397	IdentifierDeclType	Eigen 
>414	FunctionDef	dvo 
>415	ParameterList	 
>416	CompoundStatement	 
>420	FunctionDef	dvo 
>421	ParameterList	const size_t maxnum_constraints
>422	Parameter	 
>423	Identifier	maxnum_constraints
>424	ParameterType	const size_t
>425	ReturnType	void
>426	CompoundStatement	 
>427	ExpressionStatement	 
>428	AssignmentExpr	current = 0
>429	PrimaryExpression	0
>430	Identifier	current
>431	ExpressionStatement	 
>432	CallExpression	residuals . resize ( maxnum_constraints , Eigen 
>433	ArgumentList	maxnum_constraints
>434	Argument	Eigen 
>435	Identifier	Eigen 
>436	Argument	maxnum_constraints
>437	Identifier	maxnum_constraints
>438	Callee	residuals . resize
>439	MemberAccess	residuals . resize
>440	Identifier	resize
>441	Identifier	residuals
>442	ExpressionStatement	 
>443	CallExpression	J . resize ( maxnum_constraints , Eigen 
>444	ArgumentList	maxnum_constraints
>445	Argument	Eigen 
>446	Identifier	Eigen 
>447	Argument	maxnum_constraints
>448	Identifier	maxnum_constraints
>449	Callee	J . resize
>450	MemberAccess	J . resize
>451	Identifier	resize
>452	Identifier	J
>461	FunctionDef	dvo 
>462	ParameterList	const dvo 
>463	Parameter	 
>464	Identifier	weight
>465	ParameterType	const NumType &
>466	Parameter	 
>467	Identifier	res
>468	ParameterType	const NumType &
>469	Parameter	 
>470	Identifier	J
>471	ParameterType	const dvo 
>472	ReturnType	void
>473	CompoundStatement	 
>474	ExpressionStatement	 
>475	AssignmentExpr	current += 1
>476	PrimaryExpression	1
>477	Identifier	current
>478	ExpressionStatement	 
>479	AssignmentExpr	this -> residuals ( current ) = res
>480	Identifier	res
>481	CallExpression	this -> residuals ( current )
>482	ArgumentList	current
>483	Argument	current
>484	Identifier	current
>485	Callee	this -> residuals
>486	PtrMemberAccess	this -> residuals
>487	Identifier	residuals
>488	Identifier	this
>489	ExpressionStatement	 
>490	AssignmentExpr	this -> J . row ( current ) = J
>491	Identifier	J
>492	CallExpression	this -> J . row ( current )
>493	ArgumentList	current
>494	Argument	current
>495	Identifier	current
>496	Callee	this -> J . row
>497	MemberAccess	this -> J . row
>498	Identifier	row
>499	PtrMemberAccess	this -> J
>500	Identifier	J
>501	Identifier	this
>514	FunctionDef	dvo 
>515	ParameterList	 
>516	ReturnType	void
>517	CompoundStatement	 
>518	ExpressionStatement	 
>519	CallExpression	residuals . conservativeResize ( current )
>520	ArgumentList	current
>521	Argument	current
>522	Identifier	current
>523	Callee	residuals . conservativeResize
>524	MemberAccess	residuals . conservativeResize
>525	Identifier	conservativeResize
>526	Identifier	residuals
>527	ExpressionStatement	 
>528	CallExpression	J . conservativeResize ( current , Eigen 
>529	ArgumentList	current
>530	Argument	Eigen 
>531	Identifier	Eigen 
>532	Argument	current
>533	Identifier	current
>534	Callee	J . conservativeResize
>535	MemberAccess	J . conservativeResize
>536	Identifier	conservativeResize
>537	Identifier	J
>545	FunctionDef	dvo 
>546	ParameterList	dvo 
>547	Parameter	 
>548	Identifier	x
>549	ParameterType	dvo 
>550	ReturnType	void
>551	CompoundStatement	 
>552	ExpressionStatement	 
>553	AssignmentExpr	x = J . jacobiSvd ( Eigen 
>554	CallExpression	J . jacobiSvd ( Eigen 
>555	ArgumentList	residuals
>556	Argument	residuals
>557	Identifier	residuals
>558	Callee	J . jacobiSvd ( Eigen 
>559	MemberAccess	J . jacobiSvd ( Eigen 
>560	Identifier	solve
>561	CallExpression	J . jacobiSvd ( Eigen 
>562	ArgumentList	Eigen 
>563	Argument	Eigen 
>564	InclusiveOrExpression	Eigen 
>565	Identifier	Eigen 
>566	Identifier	Eigen 
>567	Callee	J . jacobiSvd
>568	MemberAccess	J . jacobiSvd
>569	Identifier	jacobiSvd
>570	Identifier	J
>571	Identifier	x
>582	FunctionDef	dvo 
>583	ParameterList	 
>584	CompoundStatement	 
>588	FunctionDef	dvo 
>589	ParameterList	const size_t maxnum_constraints
>590	Parameter	 
>591	Identifier	maxnum_constraints
>592	ParameterType	const size_t
>593	ReturnType	void
>594	CompoundStatement	 
>595	ExpressionStatement	 
>596	AssignmentExpr	this -> maxnum_constraints = maxnum_constraints
>597	Identifier	maxnum_constraints
>598	PtrMemberAccess	this -> maxnum_constraints
>599	Identifier	maxnum_constraints
>600	Identifier	this
>601	ExpressionStatement	 
>602	AssignmentExpr	this -> num_constraints = 0
>603	PrimaryExpression	0
>604	PtrMemberAccess	this -> num_constraints
>605	Identifier	num_constraints
>606	Identifier	this
>607	ExpressionStatement	 
>608	AssignmentExpr	mask_ = cv 
>609	CallExpression	cv 
>610	ArgumentList	maxnum_constraints
>611	Argument	1
>612	PrimaryExpression	1
>613	Argument	maxnum_constraints
>614	Identifier	maxnum_constraints
>615	Callee	cv 
>616	Identifier	cv 
>617	Identifier	mask_
>618	ExpressionStatement	 
>619	CallExpression	jacobian_cache_ . resize ( Eigen 
>620	ArgumentList	Eigen 
>621	Argument	maxnum_constraints
>622	Identifier	maxnum_constraints
>623	Argument	Eigen 
>624	Identifier	Eigen 
>625	Callee	jacobian_cache_ . resize
>626	MemberAccess	jacobian_cache_ . resize
>627	Identifier	resize
>628	Identifier	jacobian_cache_
>629	ExpressionStatement	 
>630	CallExpression	hessian_ . setZero ( )
>631	ArgumentList	 
>632	Callee	hessian_ . setZero
>633	MemberAccess	hessian_ . setZero
>634	Identifier	setZero
>635	Identifier	hessian_
>649	FunctionDef	dvo 
>650	ParameterList	 
>651	ReturnType	void
>652	CompoundStatement	 
>653	ExpressionStatement	 
>654	AssignmentExpr	num_constraints = 0
>655	PrimaryExpression	0
>656	Identifier	num_constraints
>657	ExpressionStatement	 
>658	AssignmentExpr	mask_ptr_ = mask_ . ptr ( )
>659	CallExpression	mask_ . ptr ( )
>660	ArgumentList	 
>661	Callee	mask_ . ptr
>662	MemberAccess	mask_ . ptr
>663	Identifier	ptr
>664	Identifier	mask_
>665	Identifier	mask_ptr_
>666	ExpressionStatement	 
>667	AssignmentExpr	error = 0
>668	PrimaryExpression	0
>669	Identifier	error
>670	ExpressionStatement	 
>671	CallExpression	b . setZero ( )
>672	ArgumentList	 
>673	Callee	b . setZero
>674	MemberAccess	b . setZero
>675	Identifier	setZero
>676	Identifier	b
>677	ExpressionStatement	 
>678	CallExpression	hessian_error_ . setZero ( )
>679	ArgumentList	 
>680	Callee	hessian_error_ . setZero
>681	MemberAccess	hessian_error_ . setZero
>682	Identifier	setZero
>683	Identifier	hessian_error_
>684	ExpressionStatement	 
>685	AssignmentExpr	A = hessian_
>686	Identifier	hessian_
>687	Identifier	A
>700	FunctionDef	dvo 
>701	ParameterList	 
>702	ReturnType	void
>703	CompoundStatement	 
>704	ExpressionStatement	 
>705	UnaryExpression	++ mask_ptr_
>706	Identifier	mask_ptr_
>707	IncDec	++
>711	FunctionDef	dvo 
>712	ParameterList	const size_t & idx , const dvo 
>713	Parameter	 
>714	Identifier	J
>715	ParameterType	const dvo 
>716	Parameter	 
>717	Identifier	idx
>718	ParameterType	const size_t &
>719	ReturnType	void
>720	CompoundStatement	 
>721	ExpressionStatement	 
>722	AssignmentExpr	mask_ . at < uchar > ( idx ) = 1
>723	PrimaryExpression	1
>724	RelationalExpression	mask_ . at < uchar > ( idx )
>725	RelationalExpression	uchar > ( idx )
>726	Identifier	idx
>727	Identifier	uchar
>728	MemberAccess	mask_ . at
>729	Identifier	at
>730	Identifier	mask_
>731	ExpressionStatement	 
>732	AssignmentExpr	jacobian_cache_ . col ( idx ) = J * normalizer
>733	MultiplicativeExpression	J * normalizer
>734	Identifier	normalizer
>735	Identifier	J
>736	CallExpression	jacobian_cache_ . col ( idx )
>737	ArgumentList	idx
>738	Argument	idx
>739	Identifier	idx
>740	Callee	jacobian_cache_ . col
>741	MemberAccess	jacobian_cache_ . col
>742	Identifier	col
>743	Identifier	jacobian_cache_
>744	ExpressionStatement	 
>745	CallExpression	addOuterProduct ( hessian_ , J , normalizer )
>746	ArgumentList	hessian_
>747	Argument	normalizer
>748	Identifier	normalizer
>749	Argument	J
>750	Identifier	J
>751	Argument	hessian_
>752	Identifier	hessian_
>753	Callee	addOuterProduct
>754	Identifier	addOuterProduct
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	Statement	 
>762	Statement	 
>763	Statement	 
>776	FunctionDef	dvo 
>777	ParameterList	const size_t & idx
>778	Parameter	 
>779	Identifier	idx
>780	ParameterType	const size_t &
>781	ReturnType	void
>782	CompoundStatement	 
>783	ExpressionStatement	 
>784	AssignmentExpr	hessian_error_ -= J * J . transpose ( ) * normalizer_inverse
>785	MultiplicativeExpression	J * J . transpose ( ) * normalizer_inverse
>786	MultiplicativeExpression	J . transpose ( ) * normalizer_inverse
>787	Identifier	normalizer_inverse
>788	CallExpression	J . transpose ( )
>789	ArgumentList	 
>790	Callee	J . transpose
>791	MemberAccess	J . transpose
>792	Identifier	transpose
>793	Identifier	J
>794	Identifier	J
>795	Identifier	hessian_error_
>796	IdentifierDeclStatement	 
>797	IdentifierDecl	& J = jacobian_cache_ . col ( idx )
>798	AssignmentExpr	& J = jacobian_cache_ . col ( idx )
>799	CallExpression	jacobian_cache_ . col ( idx )
>800	ArgumentList	idx
>801	Argument	idx
>802	Identifier	idx
>803	Callee	jacobian_cache_ . col
>804	MemberAccess	jacobian_cache_ . col
>805	Identifier	col
>806	Identifier	jacobian_cache_
>807	Identifier	J
>808	Identifier	J
>809	IdentifierDeclType	const Vector6 &
>810	IfStatement	if ( ( * mask_ptr_ ) == 0 )
>811	ReturnStatement	 
>812	Condition	 
>813	EqualityExpression	( * mask_ptr_ ) == 0
>814	PrimaryExpression	0
>815	UnaryOp	* mask_ptr_
>816	Identifier	mask_ptr_
>817	UnaryOperator	*
>830	FunctionDef	dvo 
>831	ParameterList	const size_t & idx , const NumType & res , const NumType & weight
>832	Parameter	 
>833	Identifier	weight
>834	ParameterType	const NumType &
>835	Parameter	 
>836	Identifier	res
>837	ParameterType	const NumType &
>838	Parameter	 
>839	Identifier	idx
>840	ParameterType	const size_t &
>841	ReturnType	bool
>842	CompoundStatement	 
>843	ReturnStatement	 
>844	Identifier	true
>845	ExpressionStatement	 
>846	AssignmentExpr	this -> num_constraints += 1
>847	PrimaryExpression	1
>848	PtrMemberAccess	this -> num_constraints
>849	Identifier	num_constraints
>850	Identifier	this
>851	ExpressionStatement	 
>852	AssignmentExpr	error += res * res * weight * normalizer
>853	MultiplicativeExpression	res * res * weight * normalizer
>854	MultiplicativeExpression	res * weight * normalizer
>855	MultiplicativeExpression	weight * normalizer
>856	Identifier	normalizer
>857	Identifier	weight
>858	Identifier	res
>859	Identifier	res
>860	Identifier	error
>861	ExpressionStatement	 
>862	AssignmentExpr	b -= jacobian_cache_ . col ( idx ) * res * weight
>863	MultiplicativeExpression	jacobian_cache_ . col ( idx ) * res * weight
>864	MultiplicativeExpression	res * weight
>865	Identifier	weight
>866	Identifier	res
>867	CallExpression	jacobian_cache_ . col ( idx )
>868	ArgumentList	idx
>869	Argument	idx
>870	Identifier	idx
>871	Callee	jacobian_cache_ . col
>872	MemberAccess	jacobian_cache_ . col
>873	Identifier	col
>874	Identifier	jacobian_cache_
>875	Identifier	b
>876	IfStatement	if ( * mask_ptr_ == 0 )
>877	ReturnStatement	 
>878	Identifier	false
>879	Condition	 
>880	EqualityExpression	* mask_ptr_ == 0
>881	PrimaryExpression	0
>882	UnaryOp	* mask_ptr_
>883	Identifier	mask_ptr_
>884	UnaryOperator	*
>903	FunctionDef	dvo 
>904	ParameterList	 
>905	ReturnType	void
>906	CompoundStatement	 
>907	ExpressionStatement	 
>908	AssignmentExpr	error /= ( double ) num_constraints
>909	CastExpression	( double ) num_constraints
>910	Identifier	num_constraints
>911	CastTarget	double
>912	Identifier	error
>913	ExpressionStatement	 
>914	AssignmentExpr	b /= ( double ) num_constraints
>915	CastExpression	( double ) num_constraints
>916	Identifier	num_constraints
>917	CastTarget	double
>918	Identifier	b
>919	ExpressionStatement	 
>920	AssignmentExpr	A /= ( double ) num_constraints
>921	CastExpression	( double ) num_constraints
>922	Identifier	num_constraints
>923	CastTarget	double
>924	Identifier	A
>925	ExpressionStatement	 
>926	AssignmentExpr	A += hessian_error_
>927	Identifier	hessian_error_
>928	Identifier	A
>937	FunctionDef	dvo 
>938	ParameterList	dvo 
>939	Parameter	 
>940	Identifier	x
>941	ParameterType	dvo 
>942	ReturnType	void
>943	CompoundStatement	 
>944	ExpressionStatement	 
>945	AssignmentExpr	x = A . ldlt ( ) . solve ( b )
>946	CallExpression	A . ldlt ( ) . solve ( b )
>947	ArgumentList	b
>948	Argument	b
>949	Identifier	b
>950	Callee	A . ldlt ( ) . solve
>951	MemberAccess	A . ldlt ( ) . solve
>952	Identifier	solve
>953	CallExpression	A . ldlt ( )
>954	ArgumentList	 
>955	Callee	A . ldlt
>956	MemberAccess	A . ldlt
>957	Identifier	ldlt
>958	Identifier	A
>959	Identifier	x
<7=9,8
<13=19,18,14
<14=15
<15=17,16
<19=50,43,36,32,26,20
<20=21
<21=23,22
<23=25,24
<26=27
<27=29,28
<29=31,30
<32=33
<33=35,34
<36=37
<37=39,38
<39=40
<40=42,41
<43=44
<44=46,45
<46=47
<47=49,48
<50=51
<51=53,52
<53=54
<54=56,55
<69=81,80,70
<70=77,74,71
<71=73,72
<74=76,75
<77=79,78
<81=121,110,109,108,107,106,105,104,103,102,101,86,82
<82=83
<83=85,84
<86=87
<87=99,88
<88=97,95,89
<89=90
<90=92,91
<92=94,93
<95=96
<97=98
<99=100
<110=111
<111=117,112
<112=115,113
<113=114
<115=116
<117=118
<118=120,119
<121=122
<122=127,126,123
<123=125,124
<138=150,149,139
<139=146,143,140
<140=142,141
<143=145,144
<146=148,147
<150=168,155,151
<151=152
<152=154,153
<155=156
<156=167,157
<157=161,158
<158=160,159
<161=163,162
<163=164
<164=166,165
<168=169
<169=175,170
<170=173,171
<171=172
<173=174
<175=176
<176=178,177
<189=195,194,190
<190=191
<191=193,192
<195=208,202,196
<196=197
<197=201,198
<198=200,199
<202=203
<203=207,204
<204=206,205
<208=209
<209=213,210
<210=212,211
<224=227,226,225
<227=228
<228=229
<229=233,230
<230=231
<231=232
<233=234
<234=236,235
<242=248,247,243
<243=244
<244=246,245
<248=249
<249=250
<250=264,251
<251=255,252
<252=253
<253=254
<255=256
<256=258,257
<258=260,259
<260=261
<261=263,262
<273=275,274
<279=285,284,280
<280=281
<281=283,282
<285=393,381,369,362,306,286
<286=287
<287=305,288
<288=304,289
<289=298,290
<290=292,291
<292=294,293
<294=295
<295=297,296
<298=300,299
<300=301
<301=303,302
<306=354,350,347,307
<307=308
<308=338,327,309
<309=310
<310=311
<311=312
<312=321,313
<313=320,314
<314=318,315
<315=316
<316=317
<318=319
<321=325,322
<322=323
<323=324
<325=326
<327=334,333,328
<328=329
<329=331,330
<331=332
<334=335
<335=337,336
<338=339
<339=341,340
<341=345,342
<342=343
<343=344
<345=346
<347=349,348
<350=351
<351=353,352
<354=355
<355=356
<356=361,360,357
<357=359,358
<362=363
<363=368,367,364
<364=366,365
<369=370
<370=380,379,371
<371=378,372
<372=374,373
<374=375
<375=377,376
<381=382
<382=392,391,383
<383=390,384
<384=386,385
<386=387
<387=389,388
<393=394
<394=397,396,395
<414=416,415
<420=426,425,421
<421=422
<422=424,423
<426=442,431,427
<427=428
<428=430,429
<431=432
<432=438,433
<433=436,434
<434=435
<436=437
<438=439
<439=441,440
<442=443
<443=449,444
<444=447,445
<445=446
<447=448
<449=450
<450=452,451
<461=473,472,462
<462=469,466,463
<463=465,464
<466=468,467
<469=471,470
<473=489,478,474
<474=475
<475=477,476
<478=479
<479=481,480
<481=485,482
<482=483
<483=484
<485=486
<486=488,487
<489=490
<490=492,491
<492=496,493
<493=494
<494=495
<496=497
<497=499,498
<499=501,500
<514=517,516,515
<517=527,518
<518=519
<519=523,520
<520=521
<521=522
<523=524
<524=526,525
<527=528
<528=534,529
<529=532,530
<530=531
<532=533
<534=535
<535=537,536
<545=551,550,546
<546=547
<547=549,548
<551=552
<552=553
<553=571,554
<554=558,555
<555=556
<556=557
<558=559
<559=561,560
<561=567,562
<562=563
<563=564
<564=566,565
<567=568
<568=570,569
<582=584,583
<588=594,593,589
<589=590
<590=592,591
<594=629,618,607,601,595
<595=596
<596=598,597
<598=600,599
<601=602
<602=604,603
<604=606,605
<607=608
<608=617,609
<609=615,610
<610=613,611
<611=612
<613=614
<615=616
<618=619
<619=625,620
<620=623,621
<621=622
<623=624
<625=626
<626=628,627
<629=630
<630=632,631
<632=633
<633=635,634
<649=652,651,650
<652=684,677,670,666,657,653
<653=654
<654=656,655
<657=658
<658=665,659
<659=661,660
<661=662
<662=664,663
<666=667
<667=669,668
<670=671
<671=673,672
<673=674
<674=676,675
<677=678
<678=680,679
<680=681
<681=683,682
<684=685
<685=687,686
<700=703,702,701
<703=704
<704=705
<705=707,706
<711=720,719,712
<712=716,713
<713=715,714
<716=718,717
<720=763,762,761,760,759,758,757,756,755,744,731,721
<721=722
<722=724,723
<724=728,725
<725=727,726
<728=730,729
<731=732
<732=736,733
<733=735,734
<736=740,737
<737=738
<738=739
<740=741
<741=743,742
<744=745
<745=753,746
<746=751,749,747
<747=748
<749=750
<751=752
<753=754
<776=782,781,777
<777=778
<778=780,779
<782=810,796,783
<783=784
<784=795,785
<785=794,786
<786=788,787
<788=790,789
<790=791
<791=793,792
<796=797
<797=809,808,798
<798=807,799
<799=803,800
<800=801
<801=802
<803=804
<804=806,805
<810=812,811
<812=813
<813=815,814
<815=817,816
<830=842,841,831
<831=838,835,832
<832=834,833
<835=837,836
<838=840,839
<842=876,861,851,845,843
<843=844
<845=846
<846=848,847
<848=850,849
<851=852
<852=860,853
<853=859,854
<854=858,855
<855=857,856
<861=862
<862=875,863
<863=867,864
<864=866,865
<867=871,868
<868=869
<869=870
<871=872
<872=874,873
<876=879,877
<877=878
<879=880
<880=882,881
<882=884,883
<903=906,905,904
<906=925,919,913,907
<907=908
<908=912,909
<909=911,910
<913=914
<914=918,915
<915=917,916
<919=920
<920=924,921
<921=923,922
<925=926
<926=928,927
<937=943,942,938
<938=939
<939=941,940
<943=944
<944=945
<945=959,946
<946=950,947
<947=948
<948=949
<950=951
<951=953,952
<953=955,954
<955=956
<956=958,957
