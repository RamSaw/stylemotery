>3	FunctionDef	ListingUpdater 
>4	ParameterList	Node * node , Catalog * catalog
>5	Parameter	 
>6	Identifier	catalog
>7	ParameterType	Catalog *
>8	Parameter	 
>9	Identifier	node
>10	ParameterType	Node *
>11	CompoundStatement	 
>17	FunctionDef	ListingUpdater 
>18	ParameterList	 
>19	CompoundStatement	 
>23	FunctionDef	ListingUpdater 
>24	ParameterList	 
>25	ReturnType	void
>26	CompoundStatement	 
>27	ExpressionStatement	 
>28	Statement	 
>29	Statement	 
>30	Statement	 
>31	Statement	 
>32	Statement	 
>33	Statement	 
>34	Statement	 
>35	Statement	 
>36	Statement	 
>37	Statement	 
>38	Statement	 
>39	Statement	 
>40	WhileStatement	while ( ! quit )
>41	CompoundStatement	 
>42	WhileStatement	while ( ! quit && mi -> hasNext ( ) )
>43	CompoundStatement	 
>44	ExpressionStatement	 
>45	CallExpression	yield ( )
>46	ArgumentList	 
>47	Callee	yield
>48	Identifier	yield
>49	IfStatement	if ( msg -> hasMember ( \"updateRequest\" ) )
>50	ElseStatement	else
>51	IfStatement	if ( msg -> hasMember ( \"updateResponse\" ) )
>52	ElseStatement	else
>53	IfStatement	if ( msg -> hasMember ( \"registerResponse\" ) )
>54	ElseStatement	else
>55	IfStatement	if ( msg -> hasMember ( \"testNetAccess\" ) )
>56	ElseStatement	else
>57	IfStatement	if ( msg -> hasMember ( \"testNetAccessResponse\" ) )
>58	ElseStatement	else
>59	IfStatement	if ( msg -> hasMember ( \"interrupt\" ) )
>60	CompoundStatement	 
>61	ExpressionStatement	 
>62	AssignmentExpr	quit = true
>63	Identifier	true
>64	Identifier	quit
>65	Condition	 
>66	CallExpression	msg -> hasMember ( \"interrupt\" )
>67	ArgumentList	\"interrupt\"
>68	Argument	\"interrupt\"
>69	PrimaryExpression	\"interrupt\"
>70	Callee	msg -> hasMember
>71	PtrMemberAccess	msg -> hasMember
>72	Identifier	hasMember
>73	Identifier	msg
>74	CompoundStatement	 
>75	ExpressionStatement	 
>76	CallExpression	mOperation . setNull ( )
>77	ArgumentList	 
>78	Callee	mOperation . setNull
>79	MemberAccess	mOperation . setNull
>80	Identifier	setNull
>81	Identifier	mOperation
>82	ExpressionStatement	 
>83	AssignmentExpr	mState = Idle
>84	Identifier	Idle
>85	Identifier	mState
>86	Condition	 
>87	CallExpression	msg -> hasMember ( \"testNetAccessResponse\" )
>88	ArgumentList	\"testNetAccessResponse\"
>89	Argument	\"testNetAccessResponse\"
>90	PrimaryExpression	\"testNetAccessResponse\"
>91	Callee	msg -> hasMember
>92	PtrMemberAccess	msg -> hasMember
>93	Identifier	hasMember
>94	Identifier	msg
>95	CompoundStatement	 
>96	IfStatement	if ( mState == Idle )
>97	ElseStatement	else
>98	CompoundStatement	 
>99	ExpressionStatement	 
>100	AssignmentExpr	mTestNetAccessPending = true
>101	Identifier	true
>102	Identifier	mTestNetAccessPending
>103	CompoundStatement	 
>104	ExpressionStatement	 
>105	CallExpression	handleTestNetAccess ( msg )
>106	ArgumentList	msg
>107	Argument	msg
>108	Identifier	msg
>109	Callee	handleTestNetAccess
>110	Identifier	handleTestNetAccess
>111	ExpressionStatement	 
>112	AssignmentExpr	mTestNetAccessPending = false
>113	Identifier	false
>114	Identifier	mTestNetAccessPending
>115	Condition	 
>116	EqualityExpression	mState == Idle
>117	Identifier	Idle
>118	Identifier	mState
>119	Condition	 
>120	CallExpression	msg -> hasMember ( \"testNetAccess\" )
>121	ArgumentList	\"testNetAccess\"
>122	Argument	\"testNetAccess\"
>123	PrimaryExpression	\"testNetAccess\"
>124	Callee	msg -> hasMember
>125	PtrMemberAccess	msg -> hasMember
>126	Identifier	hasMember
>127	Identifier	msg
>128	CompoundStatement	 
>129	ExpressionStatement	 
>130	CallExpression	handleRegisterResponse ( msg )
>131	ArgumentList	msg
>132	Argument	msg
>133	Identifier	msg
>134	Callee	handleRegisterResponse
>135	Identifier	handleRegisterResponse
>136	Condition	 
>137	CallExpression	msg -> hasMember ( \"registerResponse\" )
>138	ArgumentList	\"registerResponse\"
>139	Argument	\"registerResponse\"
>140	PrimaryExpression	\"registerResponse\"
>141	Callee	msg -> hasMember
>142	PtrMemberAccess	msg -> hasMember
>143	Identifier	hasMember
>144	Identifier	msg
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	CallExpression	handleUpdateResponse ( msg )
>148	ArgumentList	msg
>149	Argument	msg
>150	Identifier	msg
>151	Callee	handleUpdateResponse
>152	Identifier	handleUpdateResponse
>153	Condition	 
>154	CallExpression	msg -> hasMember ( \"updateResponse\" )
>155	ArgumentList	\"updateResponse\"
>156	Argument	\"updateResponse\"
>157	PrimaryExpression	\"updateResponse\"
>158	Callee	msg -> hasMember
>159	PtrMemberAccess	msg -> hasMember
>160	Identifier	hasMember
>161	Identifier	msg
>162	CompoundStatement	 
>163	IfStatement	if ( mState == Idle )
>164	ElseStatement	else
>165	CompoundStatement	 
>166	ExpressionStatement	 
>167	AssignmentExpr	mUpdateRequestPending = true
>168	Identifier	true
>169	Identifier	mUpdateRequestPending
>170	CompoundStatement	 
>171	ExpressionStatement	 
>172	CallExpression	handleUpdateRequest ( msg )
>173	ArgumentList	msg
>174	Argument	msg
>175	Identifier	msg
>176	Callee	handleUpdateRequest
>177	Identifier	handleUpdateRequest
>178	ExpressionStatement	 
>179	AssignmentExpr	mUpdateRequestPending = false
>180	Identifier	false
>181	Identifier	mUpdateRequestPending
>182	Condition	 
>183	EqualityExpression	mState == Idle
>184	Identifier	Idle
>185	Identifier	mState
>186	Condition	 
>187	CallExpression	msg -> hasMember ( \"updateRequest\" )
>188	ArgumentList	\"updateRequest\"
>189	Argument	\"updateRequest\"
>190	PrimaryExpression	\"updateRequest\"
>191	Callee	msg -> hasMember
>192	PtrMemberAccess	msg -> hasMember
>193	Identifier	hasMember
>194	Identifier	msg
>195	IdentifierDeclStatement	 
>196	IdentifierDecl	& msg = mi -> next ( )
>197	AssignmentExpr	& msg = mi -> next ( )
>198	CallExpression	mi -> next ( )
>199	ArgumentList	 
>200	Callee	mi -> next
>201	PtrMemberAccess	mi -> next
>202	Identifier	next
>203	Identifier	mi
>204	Identifier	msg
>205	Identifier	msg
>206	IdentifierDeclType	DynamicObject &
>207	Condition	 
>208	AndExpression	! quit && mi -> hasNext ( )
>209	CallExpression	mi -> hasNext ( )
>210	ArgumentList	 
>211	Callee	mi -> hasNext
>212	PtrMemberAccess	mi -> hasNext
>213	Identifier	hasNext
>214	Identifier	mi
>215	UnaryOp	! quit
>216	Identifier	quit
>217	UnaryOperator	!
>218	ExpressionStatement	 
>219	AssignmentExpr	mi = msgs . getIterator ( )
>220	CallExpression	msgs . getIterator ( )
>221	ArgumentList	 
>222	Callee	msgs . getIterator
>223	MemberAccess	msgs . getIterator
>224	Identifier	getIterator
>225	Identifier	msgs
>226	Identifier	mi
>227	ExpressionStatement	 
>228	AssignmentExpr	msgs = waitForMessages ( keys , & mOperation )
>229	CallExpression	waitForMessages ( keys , & mOperation )
>230	ArgumentList	keys
>231	Argument	& mOperation
>232	UnaryOp	& mOperation
>233	Identifier	mOperation
>234	UnaryOperator	&
>235	Argument	keys
>236	Identifier	keys
>237	Callee	waitForMessages
>238	Identifier	waitForMessages
>239	Identifier	msgs
>240	Condition	 
>241	UnaryOp	! quit
>242	Identifier	quit
>243	UnaryOperator	!
>244	IdentifierDeclStatement	 
>245	IdentifierDecl	quit = false
>246	AssignmentExpr	quit = false
>247	Identifier	false
>248	Identifier	false
>249	Identifier	quit
>250	IdentifierDeclType	bool
>251	IdentifierDeclStatement	 
>252	IdentifierDecl	mi ( NULL )
>253	Identifier	NULL
>254	Identifier	mi
>255	IdentifierDeclType	DynamicObjectIterator
>256	IdentifierDeclStatement	 
>257	IdentifierDecl	msgs ( NULL )
>258	Identifier	NULL
>259	Identifier	msgs
>260	IdentifierDeclType	DynamicObject
>261	IdentifierDeclStatement	 
>262	IdentifierDecl	* keys [ ] = { \"updateRequest\" , \"updateResponse\" , \"registerResponse\" , \"testNetAccess\" , \"testNetAccessResponse\" , \"\
>263	AssignmentExpr	* keys [ ] = { \"updateRequest\" , \"updateResponse\" , \"registerResponse\" , \"testNetAccess\" , \"testNetAccessResponse\" , \"\
>264	InitializerList	\"updateRequest\"
>265	Identifier	NULL
>266	PrimaryExpression	\"interrupt\"
>267	PrimaryExpression	\"testNetAccessResponse\"
>268	PrimaryExpression	\"testNetAccess\"
>269	PrimaryExpression	\"registerResponse\"
>270	PrimaryExpression	\"updateResponse\"
>271	PrimaryExpression	\"updateRequest\"
>272	Identifier	keys
>273	Identifier	keys
>274	IdentifierDeclType	const char * [ ]
>275	CompoundStatement	 
>276	ExpressionStatement	 
>277	CallExpression	messageSelf ( msg )
>278	ArgumentList	msg
>279	Argument	msg
>280	Identifier	msg
>281	Callee	messageSelf
>282	Identifier	messageSelf
>283	ExpressionStatement	 
>284	AssignmentExpr	msg [ \"testNetAccess\" ] = true
>285	Identifier	true
>286	ArrayIndexing	msg [ \"testNetAccess\" ]
>287	PrimaryExpression	\"testNetAccess\"
>288	Identifier	msg
>289	IdentifierDeclStatement	 
>290	IdentifierDecl	msg
>291	Identifier	msg
>292	IdentifierDeclType	DynamicObject
>293	CompoundStatement	 
>294	ExpressionStatement	 
>295	CallExpression	messageSelf ( msg )
>296	ArgumentList	msg
>297	Argument	msg
>298	Identifier	msg
>299	Callee	messageSelf
>300	Identifier	messageSelf
>301	ExpressionStatement	 
>302	AssignmentExpr	msg [ \"updateRequest\" ] = true
>303	Identifier	true
>304	ArrayIndexing	msg [ \"updateRequest\" ]
>305	PrimaryExpression	\"updateRequest\"
>306	Identifier	msg
>307	IdentifierDeclStatement	 
>308	IdentifierDecl	msg
>309	Identifier	msg
>310	IdentifierDeclType	DynamicObject
>311	ExpressionStatement	 
>312	Statement	 
>313	Statement	 
>314	Statement	 
>315	Statement	 
>316	Statement	 
>317	Statement	 
>318	Statement	 
>319	Statement	 
>320	Statement	 
>321	Statement	 
>322	Statement	 
>347	FunctionDef	ListingUpdater 
>348	ParameterList	DynamicObject & msg
>349	Parameter	 
>350	Identifier	msg
>351	ParameterType	DynamicObject &
>352	ReturnType	void
>353	CompoundStatement	 
>354	IfStatement	if ( ! mCatalog -> populateSeller ( userId , seller , serverToken ) )
>355	ElseStatement	else
>356	IfStatement	if ( ! BM_SERVER_ID_VALID ( BM_SERVER_ID ( seller [ \"serverId\" ] ) ) )
>357	ElseStatement	else
>358	IfStatement	if ( mRemoteUpdateId == - 1 )
>359	ElseStatement	else
>360	CompoundStatement	 
>361	IfStatement	if ( ! pass )
>362	CompoundStatement	 
>363	ExpressionStatement	 
>364	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not handle update request
>365	ArgumentList	BM_CUSTOMCATALOG_CAT
>366	Argument	JsonWriter 
>367	CallExpression	JsonWriter 
>368	ArgumentList	 
>369	Callee	JsonWriter 
>370	MemberAccess	JsonWriter 
>371	Identifier	c_str
>372	CallExpression	JsonWriter 
>373	ArgumentList	Exception 
>374	Argument	Exception 
>375	CallExpression	Exception 
>376	ArgumentList	 
>377	Callee	Exception 
>378	Identifier	Exception 
>379	Callee	JsonWriter 
>380	Identifier	JsonWriter 
>381	Argument	\"ListingUpdater could not handle update request
>382	PrimaryExpression	\"ListingUpdater could not handle update request
>383	Argument	BM_CUSTOMCATALOG_CAT
>384	Identifier	BM_CUSTOMCATALOG_CAT
>385	Callee	MO_CAT_ERROR
>386	Identifier	MO_CAT_ERROR
>387	Condition	 
>388	UnaryOp	! pass
>389	Identifier	pass
>390	UnaryOperator	!
>391	IfStatement	if ( pass && ! corrupt )
>392	CompoundStatement	 
>393	IfStatement	if ( ! pass )
>394	CompoundStatement	 
>395	ExpressionStatement	 
>396	AssignmentExpr	mState = Idle
>397	Identifier	Idle
>398	Identifier	mState
>399	Condition	 
>400	UnaryOp	! pass
>401	Identifier	pass
>402	UnaryOperator	!
>403	ExpressionStatement	 
>404	AssignmentExpr	pass = getNode ( ) -> runUserOperation ( userId , mOperation )
>405	CallExpression	getNode ( ) -> runUserOperation ( userId , mOperation )
>406	ArgumentList	userId
>407	Argument	mOperation
>408	Identifier	mOperation
>409	Argument	userId
>410	Identifier	userId
>411	Callee	getNode ( ) -> runUserOperation
>412	PtrMemberAccess	getNode ( ) -> runUserOperation
>413	Identifier	runUserOperation
>414	CallExpression	getNode ( )
>415	ArgumentList	 
>416	Callee	getNode
>417	Identifier	getNode
>418	Identifier	pass
>419	ExpressionStatement	 
>420	AssignmentExpr	mOperation = r
>421	Identifier	r
>422	Identifier	mOperation
>423	IdentifierDeclStatement	 
>424	IdentifierDecl	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>425	AssignmentExpr	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>426	Expression	this , & ListingUpdater 
>427	Expression	& ListingUpdater 
>428	Identifier	update
>429	UnaryOp	& ListingUpdater 
>430	Identifier	ListingUpdater 
>431	UnaryOperator	&
>432	Identifier	this
>433	Identifier	r
>434	Identifier	r
>435	IdentifierDeclType	RunnableRef
>436	ExpressionStatement	 
>437	AssignmentExpr	mState = Busy
>438	Identifier	Busy
>439	Identifier	mState
>440	Condition	 
>441	AndExpression	pass && ! corrupt
>442	UnaryOp	! corrupt
>443	Identifier	corrupt
>444	UnaryOperator	!
>445	Identifier	pass
>446	IfStatement	if ( mCatalog -> getUpdateId ( userId , updateId ) )
>447	CompoundStatement	 
>448	IfStatement	if ( ( updateId + 1 ) == mRemoteUpdateId )
>449	ElseStatement	else
>450	IfStatement	if ( updateId == mRemoteUpdateId )
>451	ElseStatement	else
>452	CompoundStatement	 
>453	ExpressionStatement	 
>454	CallExpression	messageSelf ( updateRequest )
>455	ArgumentList	updateRequest
>456	Argument	updateRequest
>457	Identifier	updateRequest
>458	Callee	messageSelf
>459	Identifier	messageSelf
>460	ExpressionStatement	 
>461	AssignmentExpr	updateRequest [ \"updateRequest\" ] = true
>462	Identifier	true
>463	ArrayIndexing	updateRequest [ \"updateRequest\" ]
>464	PrimaryExpression	\"updateRequest\"
>465	Identifier	updateRequest
>466	IdentifierDeclStatement	 
>467	IdentifierDecl	updateRequest
>468	Identifier	updateRequest
>469	IdentifierDeclType	DynamicObject
>470	ExpressionStatement	 
>471	AssignmentExpr	pass = mCatalog -> resetListingUpdateCounter ( userId )
>472	CallExpression	mCatalog -> resetListingUpdateCounter ( userId )
>473	ArgumentList	userId
>474	Argument	userId
>475	Identifier	userId
>476	Callee	mCatalog -> resetListingUpdateCounter
>477	PtrMemberAccess	mCatalog -> resetListingUpdateCounter
>478	Identifier	resetListingUpdateCounter
>479	Identifier	mCatalog
>480	Identifier	pass
>481	ExpressionStatement	 
>482	AssignmentExpr	corrupt = true
>483	Identifier	true
>484	Identifier	corrupt
>485	CompoundStatement	 
>486	ExpressionStatement	 
>487	AssignmentExpr	pass = mCatalog -> populateNextListingUpdate ( userId , update )
>488	CallExpression	mCatalog -> populateNextListingUpdate ( userId , update )
>489	ArgumentList	userId
>490	Argument	update
>491	Identifier	update
>492	Argument	userId
>493	Identifier	userId
>494	Callee	mCatalog -> populateNextListingUpdate
>495	PtrMemberAccess	mCatalog -> populateNextListingUpdate
>496	Identifier	populateNextListingUpdate
>497	Identifier	mCatalog
>498	Identifier	pass
>499	Condition	 
>500	EqualityExpression	updateId == mRemoteUpdateId
>501	Identifier	mRemoteUpdateId
>502	Identifier	updateId
>503	CompoundStatement	 
>504	ExpressionStatement	 
>505	AssignmentExpr	pass = mCatalog -> populatePendingListingUpdate ( userId , update )
>506	CallExpression	mCatalog -> populatePendingListingUpdate ( userId , update )
>507	ArgumentList	userId
>508	Argument	update
>509	Identifier	update
>510	Argument	userId
>511	Identifier	userId
>512	Callee	mCatalog -> populatePendingListingUpdate
>513	PtrMemberAccess	mCatalog -> populatePendingListingUpdate
>514	Identifier	populatePendingListingUpdate
>515	Identifier	mCatalog
>516	Identifier	pass
>517	Condition	 
>518	EqualityExpression	( updateId + 1 ) == mRemoteUpdateId
>519	Identifier	mRemoteUpdateId
>520	AdditiveExpression	updateId + 1
>521	PrimaryExpression	1
>522	Identifier	updateId
>523	Condition	 
>524	CallExpression	mCatalog -> getUpdateId ( userId , updateId )
>525	ArgumentList	userId
>526	Argument	updateId
>527	Identifier	updateId
>528	Argument	userId
>529	Identifier	userId
>530	Callee	mCatalog -> getUpdateId
>531	PtrMemberAccess	mCatalog -> getUpdateId
>532	Identifier	getUpdateId
>533	Identifier	mCatalog
>534	IdentifierDeclStatement	 
>535	IdentifierDecl	updateId
>536	Identifier	updateId
>537	IdentifierDeclType	uint32_t
>538	IdentifierDeclStatement	 
>539	IdentifierDecl	corrupt = false
>540	AssignmentExpr	corrupt = false
>541	Identifier	false
>542	Identifier	false
>543	Identifier	corrupt
>544	IdentifierDeclType	bool
>545	IdentifierDeclStatement	 
>546	IdentifierDecl	pass = false
>547	AssignmentExpr	pass = false
>548	Identifier	false
>549	Identifier	false
>550	Identifier	pass
>551	IdentifierDeclType	bool
>552	IdentifierDeclStatement	 
>553	IdentifierDecl	update
>554	Identifier	update
>555	IdentifierDeclType	SellerListingUpdate
>556	CompoundStatement	 
>557	IfStatement	if ( ! mCatalog -> populateHeartbeatListingUpdate ( userId , update ) )
>558	ElseStatement	else
>559	CompoundStatement	 
>560	IfStatement	if ( ! getNode ( ) -> runUserOperation ( userId , mOperation ) )
>561	ElseStatement	else
>562	CompoundStatement	 
>563	ExpressionStatement	 
>564	AssignmentExpr	mState = Idle
>565	Identifier	Idle
>566	Identifier	mState
>567	CompoundStatement	 
>568	ExpressionStatement	 
>569	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not send heartbeat
>570	ArgumentList	BM_CUSTOMCATALOG_CAT
>571	Argument	JsonWriter 
>572	CallExpression	JsonWriter 
>573	ArgumentList	 
>574	Callee	JsonWriter 
>575	MemberAccess	JsonWriter 
>576	Identifier	c_str
>577	CallExpression	JsonWriter 
>578	ArgumentList	Exception 
>579	Argument	Exception 
>580	CallExpression	Exception 
>581	ArgumentList	 
>582	Callee	Exception 
>583	Identifier	Exception 
>584	Callee	JsonWriter 
>585	Identifier	JsonWriter 
>586	Argument	\"ListingUpdater could not send heartbeat
>587	PrimaryExpression	\"ListingUpdater could not send heartbeat
>588	Argument	BM_CUSTOMCATALOG_CAT
>589	Identifier	BM_CUSTOMCATALOG_CAT
>590	Callee	MO_CAT_ERROR
>591	Identifier	MO_CAT_ERROR
>592	Condition	 
>593	UnaryOp	! getNode ( ) -> runUserOperation ( userId , mOperation )
>594	CallExpression	getNode ( ) -> runUserOperation ( userId , mOperation )
>595	ArgumentList	userId
>596	Argument	mOperation
>597	Identifier	mOperation
>598	Argument	userId
>599	Identifier	userId
>600	Callee	getNode ( ) -> runUserOperation
>601	PtrMemberAccess	getNode ( ) -> runUserOperation
>602	Identifier	runUserOperation
>603	CallExpression	getNode ( )
>604	ArgumentList	 
>605	Callee	getNode
>606	Identifier	getNode
>607	UnaryOperator	!
>608	ExpressionStatement	 
>609	AssignmentExpr	mOperation = r
>610	Identifier	r
>611	Identifier	mOperation
>612	IdentifierDeclStatement	 
>613	IdentifierDecl	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>614	AssignmentExpr	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>615	Expression	this , & ListingUpdater 
>616	Expression	& ListingUpdater 
>617	Identifier	update
>618	UnaryOp	& ListingUpdater 
>619	Identifier	ListingUpdater 
>620	UnaryOperator	&
>621	Identifier	this
>622	Identifier	r
>623	Identifier	r
>624	IdentifierDeclType	RunnableRef
>625	ExpressionStatement	 
>626	AssignmentExpr	mState = Busy
>627	Identifier	Busy
>628	Identifier	mState
>629	CompoundStatement	 
>630	ExpressionStatement	 
>631	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not get heartbeat update
>632	ArgumentList	BM_CUSTOMCATALOG_CAT
>633	Argument	JsonWriter 
>634	CallExpression	JsonWriter 
>635	ArgumentList	 
>636	Callee	JsonWriter 
>637	MemberAccess	JsonWriter 
>638	Identifier	c_str
>639	CallExpression	JsonWriter 
>640	ArgumentList	Exception 
>641	Argument	Exception 
>642	CallExpression	Exception 
>643	ArgumentList	 
>644	Callee	Exception 
>645	Identifier	Exception 
>646	Callee	JsonWriter 
>647	Identifier	JsonWriter 
>648	Argument	\"ListingUpdater could not get heartbeat update
>649	PrimaryExpression	\"ListingUpdater could not get heartbeat update
>650	Argument	BM_CUSTOMCATALOG_CAT
>651	Identifier	BM_CUSTOMCATALOG_CAT
>652	Callee	MO_CAT_ERROR
>653	Identifier	MO_CAT_ERROR
>654	Condition	 
>655	UnaryOp	! mCatalog -> populateHeartbeatListingUpdate ( userId , update )
>656	CallExpression	mCatalog -> populateHeartbeatListingUpdate ( userId , update )
>657	ArgumentList	userId
>658	Argument	update
>659	Identifier	update
>660	Argument	userId
>661	Identifier	userId
>662	Callee	mCatalog -> populateHeartbeatListingUpdate
>663	PtrMemberAccess	mCatalog -> populateHeartbeatListingUpdate
>664	Identifier	populateHeartbeatListingUpdate
>665	Identifier	mCatalog
>666	UnaryOperator	!
>667	IdentifierDeclStatement	 
>668	IdentifierDecl	update
>669	Identifier	update
>670	IdentifierDeclType	SellerListingUpdate
>671	Condition	 
>672	EqualityExpression	mRemoteUpdateId == - 1
>673	UnaryOp	- 1
>674	PrimaryExpression	1
>675	UnaryOperator	-
>676	Identifier	mRemoteUpdateId
>677	CompoundStatement	 
>678	IfStatement	if ( ! getNode ( ) -> runUserOperation ( userId , mOperation ) )
>679	ElseStatement	else
>680	CompoundStatement	 
>681	ExpressionStatement	 
>682	AssignmentExpr	mState = Idle
>683	Identifier	Idle
>684	Identifier	mState
>685	CompoundStatement	 
>686	ExpressionStatement	 
>687	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not register for new server ID
>688	ArgumentList	BM_CUSTOMCATALOG_CAT
>689	Argument	JsonWriter 
>690	CallExpression	JsonWriter 
>691	ArgumentList	 
>692	Callee	JsonWriter 
>693	MemberAccess	JsonWriter 
>694	Identifier	c_str
>695	CallExpression	JsonWriter 
>696	ArgumentList	Exception 
>697	Argument	Exception 
>698	CallExpression	Exception 
>699	ArgumentList	 
>700	Callee	Exception 
>701	Identifier	Exception 
>702	Callee	JsonWriter 
>703	Identifier	JsonWriter 
>704	Argument	\"ListingUpdater could not register for new server ID
>705	PrimaryExpression	\"ListingUpdater could not register for new server ID
>706	Argument	BM_CUSTOMCATALOG_CAT
>707	Identifier	BM_CUSTOMCATALOG_CAT
>708	Callee	MO_CAT_ERROR
>709	Identifier	MO_CAT_ERROR
>710	Condition	 
>711	UnaryOp	! getNode ( ) -> runUserOperation ( userId , mOperation )
>712	CallExpression	getNode ( ) -> runUserOperation ( userId , mOperation )
>713	ArgumentList	userId
>714	Argument	mOperation
>715	Identifier	mOperation
>716	Argument	userId
>717	Identifier	userId
>718	Callee	getNode ( ) -> runUserOperation
>719	PtrMemberAccess	getNode ( ) -> runUserOperation
>720	Identifier	runUserOperation
>721	CallExpression	getNode ( )
>722	ArgumentList	 
>723	Callee	getNode
>724	Identifier	getNode
>725	UnaryOperator	!
>726	ExpressionStatement	 
>727	AssignmentExpr	mOperation = r
>728	Identifier	r
>729	Identifier	mOperation
>730	IdentifierDeclStatement	 
>731	IdentifierDecl	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>732	AssignmentExpr	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>733	Expression	this , & ListingUpdater 
>734	UnaryOp	& ListingUpdater 
>735	Identifier	ListingUpdater 
>736	UnaryOperator	&
>737	Identifier	this
>738	Identifier	r
>739	Identifier	r
>740	IdentifierDeclType	RunnableRef
>741	ExpressionStatement	 
>742	AssignmentExpr	mRemoteUpdateId = - 1
>743	UnaryOp	- 1
>744	PrimaryExpression	1
>745	UnaryOperator	-
>746	Identifier	mRemoteUpdateId
>747	ExpressionStatement	 
>748	AssignmentExpr	mState = Busy
>749	Identifier	Busy
>750	Identifier	mState
>751	Condition	 
>752	UnaryOp	! BM_SERVER_ID_VALID ( BM_SERVER_ID ( seller [ \"serverId\" ] ) )
>753	CallExpression	BM_SERVER_ID_VALID ( BM_SERVER_ID ( seller [ \"serverId\" ] ) )
>754	ArgumentList	BM_SERVER_ID ( seller [ \"serverId\" ] )
>755	Argument	BM_SERVER_ID ( seller [ \"serverId\" ] )
>756	CallExpression	BM_SERVER_ID ( seller [ \"serverId\" ] )
>757	ArgumentList	seller [ \"serverId\" ]
>758	Argument	seller [ \"serverId\" ]
>759	ArrayIndexing	seller [ \"serverId\" ]
>760	PrimaryExpression	\"serverId\"
>761	Identifier	seller
>762	Callee	BM_SERVER_ID
>763	Identifier	BM_SERVER_ID
>764	Callee	BM_SERVER_ID_VALID
>765	Identifier	BM_SERVER_ID_VALID
>766	UnaryOperator	!
>767	CompoundStatement	 
>768	ExpressionStatement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	Statement	 
>773	Statement	 
>774	Statement	 
>775	Statement	 
>776	Statement	 
>777	Statement	 
>778	Statement	 
>779	Statement	 
>780	Statement	 
>781	Statement	 
>782	Statement	 
>783	Statement	 
>784	Statement	 
>785	Statement	 
>786	Statement	 
>787	Statement	 
>788	Statement	 
>789	Statement	 
>790	Statement	 
>791	Statement	 
>792	Statement	 
>793	Statement	 
>794	Statement	 
>795	Condition	 
>796	UnaryOp	! mCatalog -> populateSeller ( userId , seller , serverToken )
>797	CallExpression	mCatalog -> populateSeller ( userId , seller , serverToken )
>798	ArgumentList	userId
>799	Argument	serverToken
>800	Identifier	serverToken
>801	Argument	seller
>802	Identifier	seller
>803	Argument	userId
>804	Identifier	userId
>805	Callee	mCatalog -> populateSeller
>806	PtrMemberAccess	mCatalog -> populateSeller
>807	Identifier	populateSeller
>808	Identifier	mCatalog
>809	UnaryOperator	!
>810	IdentifierDeclStatement	 
>811	IdentifierDecl	serverToken
>812	Identifier	serverToken
>813	IdentifierDeclType	string
>814	IdentifierDeclStatement	 
>815	IdentifierDecl	seller
>816	Identifier	seller
>817	IdentifierDeclType	Seller
>818	IdentifierDeclStatement	 
>819	IdentifierDecl	userId = getUserId ( )
>820	AssignmentExpr	userId = getUserId ( )
>821	CallExpression	getUserId ( )
>822	ArgumentList	 
>823	Callee	getUserId
>824	Identifier	getUserId
>825	Identifier	userId
>826	Identifier	userId
>827	IdentifierDeclType	UserId
>871	FunctionDef	ListingUpdater 
>872	ParameterList	DynamicObject & msg
>873	Parameter	 
>874	Identifier	msg
>875	ParameterType	DynamicObject &
>876	ReturnType	void
>877	CompoundStatement	 
>878	ExpressionStatement	 
>879	CallExpression	mOperation . setNull ( )
>880	ArgumentList	 
>881	Callee	mOperation . setNull
>882	MemberAccess	mOperation . setNull
>883	Identifier	setNull
>884	Identifier	mOperation
>885	ExpressionStatement	 
>886	AssignmentExpr	mState = Idle
>887	Identifier	Idle
>888	Identifier	mState
>889	IfStatement	if ( ! msg [ \"error\" ] -> getBoolean ( ) )
>890	ElseStatement	else
>891	IfStatement	if ( msg [ \"reset\" ] -> getBoolean ( ) )
>892	CompoundStatement	 
>893	IfStatement	if ( mCatalog -> resetListingUpdateCounter ( getUserId ( ) ) )
>894	ElseStatement	else
>895	CompoundStatement	 
>896	ExpressionStatement	 
>897	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not reset listing counter
>898	ArgumentList	BM_CUSTOMCATALOG_CAT
>899	Argument	JsonWriter 
>900	CallExpression	JsonWriter 
>901	ArgumentList	 
>902	Callee	JsonWriter 
>903	MemberAccess	JsonWriter 
>904	Identifier	c_str
>905	CallExpression	JsonWriter 
>906	ArgumentList	Exception 
>907	Argument	Exception 
>908	CallExpression	Exception 
>909	ArgumentList	 
>910	Callee	Exception 
>911	Identifier	Exception 
>912	Callee	JsonWriter 
>913	Identifier	JsonWriter 
>914	Argument	\"ListingUpdater could not reset listing counter
>915	PrimaryExpression	\"ListingUpdater could not reset listing counter
>916	Argument	BM_CUSTOMCATALOG_CAT
>917	Identifier	BM_CUSTOMCATALOG_CAT
>918	Callee	MO_CAT_ERROR
>919	Identifier	MO_CAT_ERROR
>920	CompoundStatement	 
>921	ExpressionStatement	 
>922	CallExpression	messageSelf ( updateRequest )
>923	ArgumentList	updateRequest
>924	Argument	updateRequest
>925	Identifier	updateRequest
>926	Callee	messageSelf
>927	Identifier	messageSelf
>928	ExpressionStatement	 
>929	AssignmentExpr	updateRequest [ \"updateRequest\" ] = true
>930	Identifier	true
>931	ArrayIndexing	updateRequest [ \"updateRequest\" ]
>932	PrimaryExpression	\"updateRequest\"
>933	Identifier	updateRequest
>934	IdentifierDeclStatement	 
>935	IdentifierDecl	updateRequest
>936	Identifier	updateRequest
>937	IdentifierDeclType	DynamicObject
>938	Condition	 
>939	CallExpression	mCatalog -> resetListingUpdateCounter ( getUserId ( ) )
>940	ArgumentList	getUserId ( )
>941	Argument	getUserId ( )
>942	CallExpression	getUserId ( )
>943	ArgumentList	 
>944	Callee	getUserId
>945	Identifier	getUserId
>946	Callee	mCatalog -> resetListingUpdateCounter
>947	PtrMemberAccess	mCatalog -> resetListingUpdateCounter
>948	Identifier	resetListingUpdateCounter
>949	Identifier	mCatalog
>950	ExpressionStatement	 
>951	AssignmentExpr	mRemoteUpdateId = - 1
>952	UnaryOp	- 1
>953	PrimaryExpression	1
>954	UnaryOperator	-
>955	Identifier	mRemoteUpdateId
>956	Condition	 
>957	CallExpression	msg [ \"reset\" ] -> getBoolean ( )
>958	ArgumentList	 
>959	Callee	msg [ \"reset\" ] -> getBoolean
>960	PtrMemberAccess	msg [ \"reset\" ] -> getBoolean
>961	Identifier	getBoolean
>962	ArrayIndexing	msg [ \"reset\" ]
>963	PrimaryExpression	\"reset\"
>964	Identifier	msg
>965	CompoundStatement	 
>966	IfStatement	if ( mRemoteUpdateId == - 1 )
>967	ElseStatement	else
>968	CompoundStatement	 
>969	IfStatement	if ( ! mCatalog -> processListingUpdateResponse ( getUserId ( ) , update , result ) )
>970	ElseStatement	else
>971	IfStatement	if ( msg [ \"scheduleUpdateRequest\" ] -> getBoolean ( ) )
>972	CompoundStatement	 
>973	ExpressionStatement	 
>974	CallExpression	messageSelf ( updateRequest )
>975	ArgumentList	updateRequest
>976	Argument	updateRequest
>977	Identifier	updateRequest
>978	Callee	messageSelf
>979	Identifier	messageSelf
>980	ExpressionStatement	 
>981	AssignmentExpr	updateRequest [ \"updateRequest\" ] = true
>982	Identifier	true
>983	ArrayIndexing	updateRequest [ \"updateRequest\" ]
>984	PrimaryExpression	\"updateRequest\"
>985	Identifier	updateRequest
>986	IdentifierDeclStatement	 
>987	IdentifierDecl	updateRequest
>988	Identifier	updateRequest
>989	IdentifierDeclType	DynamicObject
>990	Condition	 
>991	CallExpression	msg [ \"scheduleUpdateRequest\" ] -> getBoolean ( )
>992	ArgumentList	 
>993	Callee	msg [ \"scheduleUpdateRequest\" ] -> getBoolean
>994	PtrMemberAccess	msg [ \"scheduleUpdateRequest\" ] -> getBoolean
>995	Identifier	getBoolean
>996	ArrayIndexing	msg [ \"scheduleUpdateRequest\" ]
>997	PrimaryExpression	\"scheduleUpdateRequest\"
>998	Identifier	msg
>999	CompoundStatement	 
>1000	ExpressionStatement	 
>1001	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not process update result
>1002	ArgumentList	BM_CUSTOMCATALOG_CAT
>1003	Argument	JsonWriter 
>1004	CallExpression	JsonWriter 
>1005	ArgumentList	 
>1006	Callee	JsonWriter 
>1007	MemberAccess	JsonWriter 
>1008	Identifier	c_str
>1009	CallExpression	JsonWriter 
>1010	ArgumentList	Exception 
>1011	Argument	Exception 
>1012	CallExpression	Exception 
>1013	ArgumentList	 
>1014	Callee	Exception 
>1015	Identifier	Exception 
>1016	Callee	JsonWriter 
>1017	Identifier	JsonWriter 
>1018	Argument	\"ListingUpdater could not process update result
>1019	PrimaryExpression	\"ListingUpdater could not process update result
>1020	Argument	BM_CUSTOMCATALOG_CAT
>1021	Identifier	BM_CUSTOMCATALOG_CAT
>1022	Callee	MO_CAT_ERROR
>1023	Identifier	MO_CAT_ERROR
>1024	Condition	 
>1025	UnaryOp	! mCatalog -> processListingUpdateResponse ( getUserId ( ) , update , result )
>1026	CallExpression	mCatalog -> processListingUpdateResponse ( getUserId ( ) , update , result )
>1027	ArgumentList	getUserId ( )
>1028	Argument	result
>1029	Identifier	result
>1030	Argument	update
>1031	Identifier	update
>1032	Argument	getUserId ( )
>1033	CallExpression	getUserId ( )
>1034	ArgumentList	 
>1035	Callee	getUserId
>1036	Identifier	getUserId
>1037	Callee	mCatalog -> processListingUpdateResponse
>1038	PtrMemberAccess	mCatalog -> processListingUpdateResponse
>1039	Identifier	processListingUpdateResponse
>1040	Identifier	mCatalog
>1041	UnaryOperator	!
>1042	ExpressionStatement	 
>1043	AssignmentExpr	mRemoteUpdateId = result [ \"updateId\" ] -> getUInt32 ( )
>1044	CallExpression	result [ \"updateId\" ] -> getUInt32 ( )
>1045	ArgumentList	 
>1046	Callee	result [ \"updateId\" ] -> getUInt32
>1047	PtrMemberAccess	result [ \"updateId\" ] -> getUInt32
>1048	Identifier	getUInt32
>1049	ArrayIndexing	result [ \"updateId\" ]
>1050	PrimaryExpression	\"updateId\"
>1051	Identifier	result
>1052	Identifier	mRemoteUpdateId
>1053	ExpressionStatement	 
>1054	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater received listing update result
>1055	ArgumentList	BM_CUSTOMCATALOG_CAT
>1056	Argument	JsonWriter 
>1057	CallExpression	JsonWriter 
>1058	ArgumentList	 
>1059	Callee	JsonWriter 
>1060	MemberAccess	JsonWriter 
>1061	Identifier	c_str
>1062	CallExpression	JsonWriter 
>1063	ArgumentList	result
>1064	Argument	result
>1065	Identifier	result
>1066	Callee	JsonWriter 
>1067	Identifier	JsonWriter 
>1068	Argument	\"ListingUpdater received listing update result
>1069	PrimaryExpression	\"ListingUpdater received listing update result
>1070	Argument	BM_CUSTOMCATALOG_CAT
>1071	Identifier	BM_CUSTOMCATALOG_CAT
>1072	Callee	MO_CAT_DEBUG
>1073	Identifier	MO_CAT_DEBUG
>1074	IdentifierDeclStatement	 
>1075	IdentifierDecl	result = msg [ \"updateResult\" ]
>1076	AssignmentExpr	result = msg [ \"updateResult\" ]
>1077	ArrayIndexing	msg [ \"updateResult\" ]
>1078	PrimaryExpression	\"updateResult\"
>1079	Identifier	msg
>1080	Identifier	result
>1081	Identifier	result
>1082	IdentifierDeclType	SellerListingUpdate
>1083	IdentifierDeclStatement	 
>1084	IdentifierDecl	update = msg [ \"update\" ]
>1085	AssignmentExpr	update = msg [ \"update\" ]
>1086	ArrayIndexing	msg [ \"update\" ]
>1087	PrimaryExpression	\"update\"
>1088	Identifier	msg
>1089	Identifier	update
>1090	Identifier	update
>1091	IdentifierDeclType	SellerListingUpdate
>1092	CompoundStatement	 
>1093	ExpressionStatement	 
>1094	CallExpression	messageSelf ( updateRequest )
>1095	ArgumentList	updateRequest
>1096	Argument	updateRequest
>1097	Identifier	updateRequest
>1098	Callee	messageSelf
>1099	Identifier	messageSelf
>1100	ExpressionStatement	 
>1101	AssignmentExpr	updateRequest [ \"updateRequest\" ] = true
>1102	Identifier	true
>1103	ArrayIndexing	updateRequest [ \"updateRequest\" ]
>1104	PrimaryExpression	\"updateRequest\"
>1105	Identifier	updateRequest
>1106	IdentifierDeclStatement	 
>1107	IdentifierDecl	updateRequest
>1108	Identifier	updateRequest
>1109	IdentifierDeclType	DynamicObject
>1110	ExpressionStatement	 
>1111	AssignmentExpr	mRemoteUpdateId = msg [ \"updateId\" ] -> getUInt32 ( )
>1112	CallExpression	msg [ \"updateId\" ] -> getUInt32 ( )
>1113	ArgumentList	 
>1114	Callee	msg [ \"updateId\" ] -> getUInt32
>1115	PtrMemberAccess	msg [ \"updateId\" ] -> getUInt32
>1116	Identifier	getUInt32
>1117	ArrayIndexing	msg [ \"updateId\" ]
>1118	PrimaryExpression	\"updateId\"
>1119	Identifier	msg
>1120	Identifier	mRemoteUpdateId
>1121	Condition	 
>1122	EqualityExpression	mRemoteUpdateId == - 1
>1123	UnaryOp	- 1
>1124	PrimaryExpression	1
>1125	UnaryOperator	-
>1126	Identifier	mRemoteUpdateId
>1127	Condition	 
>1128	UnaryOp	! msg [ \"error\" ] -> getBoolean ( )
>1129	CallExpression	msg [ \"error\" ] -> getBoolean ( )
>1130	ArgumentList	 
>1131	Callee	msg [ \"error\" ] -> getBoolean
>1132	PtrMemberAccess	msg [ \"error\" ] -> getBoolean
>1133	Identifier	getBoolean
>1134	ArrayIndexing	msg [ \"error\" ]
>1135	PrimaryExpression	\"error\"
>1136	Identifier	msg
>1137	UnaryOperator	!
>1170	FunctionDef	ListingUpdater 
>1171	ParameterList	DynamicObject & msg
>1172	Parameter	 
>1173	Identifier	msg
>1174	ParameterType	DynamicObject &
>1175	ReturnType	void
>1176	CompoundStatement	 
>1177	ExpressionStatement	 
>1178	CallExpression	mOperation . setNull ( )
>1179	ArgumentList	 
>1180	Callee	mOperation . setNull
>1181	MemberAccess	mOperation . setNull
>1182	Identifier	setNull
>1183	Identifier	mOperation
>1184	ExpressionStatement	 
>1185	AssignmentExpr	mState = Idle
>1186	Identifier	Idle
>1187	Identifier	mState
>1188	IfStatement	if ( ! msg [ \"error\" ] -> getBoolean ( ) )
>1189	ElseStatement	else
>1190	CompoundStatement	 
>1191	ExpressionStatement	 
>1192	CallExpression	mNode -> getEventController ( ) -> schedule ( e )
>1193	ArgumentList	e
>1194	Argument	e
>1195	Identifier	e
>1196	Callee	mNode -> getEventController ( ) -> schedule
>1197	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>1198	Identifier	schedule
>1199	CallExpression	mNode -> getEventController ( )
>1200	ArgumentList	 
>1201	Callee	mNode -> getEventController
>1202	PtrMemberAccess	mNode -> getEventController
>1203	Identifier	getEventController
>1204	Identifier	mNode
>1205	ExpressionStatement	 
>1206	AssignmentExpr	e [ \"details\" ] [ \"exception\" ] = msg [ \"exception\" ]
>1207	ArrayIndexing	msg [ \"exception\" ]
>1208	PrimaryExpression	\"exception\"
>1209	Identifier	msg
>1210	ArrayIndexing	e [ \"details\" ] [ \"exception\" ]
>1211	PrimaryExpression	\"exception\"
>1212	ArrayIndexing	e [ \"details\" ]
>1213	PrimaryExpression	\"details\"
>1214	Identifier	e
>1215	ExpressionStatement	 
>1216	AssignmentExpr	e [ \"details\" ] [ \"userId\" ] = getUserId ( )
>1217	CallExpression	getUserId ( )
>1218	ArgumentList	 
>1219	Callee	getUserId
>1220	Identifier	getUserId
>1221	ArrayIndexing	e [ \"details\" ] [ \"userId\" ]
>1222	PrimaryExpression	\"userId\"
>1223	ArrayIndexing	e [ \"details\" ]
>1224	PrimaryExpression	\"details\"
>1225	Identifier	e
>1226	ExpressionStatement	 
>1227	AssignmentExpr	e [ \"type\" ] = \"bitmunk.catalog.ServerIdRegistration.exception\"
>1228	PrimaryExpression	\"bitmunk.catalog.ServerIdRegistration.exception\"
>1229	ArrayIndexing	e [ \"type\" ]
>1230	PrimaryExpression	\"type\"
>1231	Identifier	e
>1232	IdentifierDeclStatement	 
>1233	IdentifierDecl	e
>1234	Identifier	e
>1235	IdentifierDeclType	Event
>1236	CompoundStatement	 
>1237	IfStatement	if ( mCatalog -> updateSeller ( getUserId ( ) , seller , serverToken ) )
>1238	ElseStatement	else
>1239	CompoundStatement	 
>1240	ExpressionStatement	 
>1241	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not save server ID and token
>1242	ArgumentList	BM_CUSTOMCATALOG_CAT
>1243	Argument	JsonWriter 
>1244	CallExpression	JsonWriter 
>1245	ArgumentList	 
>1246	Callee	JsonWriter 
>1247	MemberAccess	JsonWriter 
>1248	Identifier	c_str
>1249	CallExpression	JsonWriter 
>1250	ArgumentList	Exception 
>1251	Argument	Exception 
>1252	CallExpression	Exception 
>1253	ArgumentList	 
>1254	Callee	Exception 
>1255	Identifier	Exception 
>1256	Callee	JsonWriter 
>1257	Identifier	JsonWriter 
>1258	Argument	\"ListingUpdater could not save server ID and token
>1259	PrimaryExpression	\"ListingUpdater could not save server ID and token
>1260	Argument	BM_CUSTOMCATALOG_CAT
>1261	Identifier	BM_CUSTOMCATALOG_CAT
>1262	Callee	MO_CAT_ERROR
>1263	Identifier	MO_CAT_ERROR
>1264	CompoundStatement	 
>1265	ExpressionStatement	 
>1266	Statement	 
>1267	Statement	 
>1268	Statement	 
>1269	Statement	 
>1270	Statement	 
>1271	Statement	 
>1272	Statement	 
>1273	Statement	 
>1274	Statement	 
>1275	Statement	 
>1276	Statement	 
>1277	Statement	 
>1278	Statement	 
>1279	Statement	 
>1280	Statement	 
>1281	Statement	 
>1282	Statement	 
>1283	Statement	 
>1284	Statement	 
>1285	Statement	 
>1286	Statement	 
>1287	Statement	 
>1288	ExpressionStatement	 
>1289	CallExpression	messageSelf ( updateRequest )
>1290	ArgumentList	updateRequest
>1291	Argument	updateRequest
>1292	Identifier	updateRequest
>1293	Callee	messageSelf
>1294	Identifier	messageSelf
>1295	ExpressionStatement	 
>1296	AssignmentExpr	updateRequest [ \"updateRequest\" ] = true
>1297	Identifier	true
>1298	ArrayIndexing	updateRequest [ \"updateRequest\" ]
>1299	PrimaryExpression	\"updateRequest\"
>1300	Identifier	updateRequest
>1301	IdentifierDeclStatement	 
>1302	IdentifierDecl	updateRequest
>1303	Identifier	updateRequest
>1304	IdentifierDeclType	DynamicObject
>1305	Condition	 
>1306	CallExpression	mCatalog -> updateSeller ( getUserId ( ) , seller , serverToken )
>1307	ArgumentList	getUserId ( )
>1308	Argument	serverToken
>1309	Identifier	serverToken
>1310	Argument	seller
>1311	Identifier	seller
>1312	Argument	getUserId ( )
>1313	CallExpression	getUserId ( )
>1314	ArgumentList	 
>1315	Callee	getUserId
>1316	Identifier	getUserId
>1317	Callee	mCatalog -> updateSeller
>1318	PtrMemberAccess	mCatalog -> updateSeller
>1319	Identifier	updateSeller
>1320	Identifier	mCatalog
>1321	IdentifierDeclStatement	 
>1322	IdentifierDecl	serverToken = msg [ \"serverToken\" ] -> getString ( )
>1323	AssignmentExpr	serverToken = msg [ \"serverToken\" ] -> getString ( )
>1324	CallExpression	msg [ \"serverToken\" ] -> getString ( )
>1325	ArgumentList	 
>1326	Callee	msg [ \"serverToken\" ] -> getString
>1327	PtrMemberAccess	msg [ \"serverToken\" ] -> getString
>1328	Identifier	getString
>1329	ArrayIndexing	msg [ \"serverToken\" ]
>1330	PrimaryExpression	\"serverToken\"
>1331	Identifier	msg
>1332	Identifier	serverToken
>1333	Identifier	serverToken
>1334	IdentifierDeclType	ServerToken
>1335	ExpressionStatement	 
>1336	AssignmentExpr	seller [ \"url\" ] = msg [ \"serverUrl\" ]
>1337	ArrayIndexing	msg [ \"serverUrl\" ]
>1338	PrimaryExpression	\"serverUrl\"
>1339	Identifier	msg
>1340	ArrayIndexing	seller [ \"url\" ]
>1341	PrimaryExpression	\"url\"
>1342	Identifier	seller
>1343	ExpressionStatement	 
>1344	AssignmentExpr	seller [ \"serverId\" ] = msg [ \"serverId\" ]
>1345	ArrayIndexing	msg [ \"serverId\" ]
>1346	PrimaryExpression	\"serverId\"
>1347	Identifier	msg
>1348	ArrayIndexing	seller [ \"serverId\" ]
>1349	PrimaryExpression	\"serverId\"
>1350	Identifier	seller
>1351	IdentifierDeclStatement	 
>1352	IdentifierDecl	seller
>1353	Identifier	seller
>1354	IdentifierDeclType	Seller
>1355	Condition	 
>1356	UnaryOp	! msg [ \"error\" ] -> getBoolean ( )
>1357	CallExpression	msg [ \"error\" ] -> getBoolean ( )
>1358	ArgumentList	 
>1359	Callee	msg [ \"error\" ] -> getBoolean
>1360	PtrMemberAccess	msg [ \"error\" ] -> getBoolean
>1361	Identifier	getBoolean
>1362	ArrayIndexing	msg [ \"error\" ]
>1363	PrimaryExpression	\"error\"
>1364	Identifier	msg
>1365	UnaryOperator	!
>1397	FunctionDef	ListingUpdater 
>1398	ParameterList	DynamicObject & msg
>1399	Parameter	 
>1400	Identifier	msg
>1401	ParameterType	DynamicObject &
>1402	ReturnType	void
>1403	CompoundStatement	 
>1404	IfStatement	if ( mRemoteUpdateId != - 1 )
>1405	CompoundStatement	 
>1406	IfStatement	if ( ! mCatalog -> populateSeller ( userId , seller , serverToken ) )
>1407	ElseStatement	else
>1408	CompoundStatement	 
>1409	IfStatement	if ( ! getNode ( ) -> runUserOperation ( userId , mOperation ) )
>1410	ElseStatement	else
>1411	CompoundStatement	 
>1412	ExpressionStatement	 
>1413	AssignmentExpr	mState = Idle
>1414	Identifier	Idle
>1415	Identifier	mState
>1416	CompoundStatement	 
>1417	ExpressionStatement	 
>1418	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater could not update server URL
>1419	ArgumentList	BM_CUSTOMCATALOG_CAT
>1420	Argument	JsonWriter 
>1421	CallExpression	JsonWriter 
>1422	ArgumentList	 
>1423	Callee	JsonWriter 
>1424	MemberAccess	JsonWriter 
>1425	Identifier	c_str
>1426	CallExpression	JsonWriter 
>1427	ArgumentList	Exception 
>1428	Argument	Exception 
>1429	CallExpression	Exception 
>1430	ArgumentList	 
>1431	Callee	Exception 
>1432	Identifier	Exception 
>1433	Callee	JsonWriter 
>1434	Identifier	JsonWriter 
>1435	Argument	\"ListingUpdater could not update server URL
>1436	PrimaryExpression	\"ListingUpdater could not update server URL
>1437	Argument	BM_CUSTOMCATALOG_CAT
>1438	Identifier	BM_CUSTOMCATALOG_CAT
>1439	Callee	MO_CAT_ERROR
>1440	Identifier	MO_CAT_ERROR
>1441	Condition	 
>1442	UnaryOp	! getNode ( ) -> runUserOperation ( userId , mOperation )
>1443	CallExpression	getNode ( ) -> runUserOperation ( userId , mOperation )
>1444	ArgumentList	userId
>1445	Argument	mOperation
>1446	Identifier	mOperation
>1447	Argument	userId
>1448	Identifier	userId
>1449	Callee	getNode ( ) -> runUserOperation
>1450	PtrMemberAccess	getNode ( ) -> runUserOperation
>1451	Identifier	runUserOperation
>1452	CallExpression	getNode ( )
>1453	ArgumentList	 
>1454	Callee	getNode
>1455	Identifier	getNode
>1456	UnaryOperator	!
>1457	ExpressionStatement	 
>1458	AssignmentExpr	mOperation = r
>1459	Identifier	r
>1460	Identifier	mOperation
>1461	IdentifierDeclStatement	 
>1462	IdentifierDecl	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>1463	AssignmentExpr	r = new RunnableDelegate < ListingUpdater > ( this , & ListingUpdater 
>1464	Expression	this , & ListingUpdater 
>1465	Expression	& ListingUpdater 
>1466	Identifier	seller
>1467	UnaryOp	& ListingUpdater 
>1468	Identifier	ListingUpdater 
>1469	UnaryOperator	&
>1470	Identifier	this
>1471	Identifier	r
>1472	Identifier	r
>1473	IdentifierDeclType	RunnableRef
>1474	ExpressionStatement	 
>1475	AssignmentExpr	mState = Busy
>1476	Identifier	Busy
>1477	Identifier	mState
>1478	CompoundStatement	 
>1479	ExpressionStatement	 
>1480	Statement	 
>1481	Statement	 
>1482	Statement	 
>1483	Statement	 
>1484	Statement	 
>1485	Statement	 
>1486	Statement	 
>1487	Statement	 
>1488	Statement	 
>1489	Statement	 
>1490	Statement	 
>1491	Statement	 
>1492	Statement	 
>1493	Statement	 
>1494	Statement	 
>1495	Statement	 
>1496	Statement	 
>1497	Statement	 
>1498	Statement	 
>1499	Statement	 
>1500	Statement	 
>1501	Statement	 
>1502	Statement	 
>1503	Statement	 
>1504	Statement	 
>1505	Statement	 
>1506	Condition	 
>1507	UnaryOp	! mCatalog -> populateSeller ( userId , seller , serverToken )
>1508	CallExpression	mCatalog -> populateSeller ( userId , seller , serverToken )
>1509	ArgumentList	userId
>1510	Argument	serverToken
>1511	Identifier	serverToken
>1512	Argument	seller
>1513	Identifier	seller
>1514	Argument	userId
>1515	Identifier	userId
>1516	Callee	mCatalog -> populateSeller
>1517	PtrMemberAccess	mCatalog -> populateSeller
>1518	Identifier	populateSeller
>1519	Identifier	mCatalog
>1520	UnaryOperator	!
>1521	IdentifierDeclStatement	 
>1522	IdentifierDecl	serverToken
>1523	Identifier	serverToken
>1524	IdentifierDeclType	string
>1525	IdentifierDeclStatement	 
>1526	IdentifierDecl	seller
>1527	Identifier	seller
>1528	IdentifierDeclType	Seller
>1529	IdentifierDeclStatement	 
>1530	IdentifierDecl	userId = getUserId ( )
>1531	AssignmentExpr	userId = getUserId ( )
>1532	CallExpression	getUserId ( )
>1533	ArgumentList	 
>1534	Callee	getUserId
>1535	Identifier	getUserId
>1536	Identifier	userId
>1537	Identifier	userId
>1538	IdentifierDeclType	UserId
>1539	Condition	 
>1540	EqualityExpression	mRemoteUpdateId != - 1
>1541	UnaryOp	- 1
>1542	PrimaryExpression	1
>1543	UnaryOperator	-
>1544	Identifier	mRemoteUpdateId
>1571	FunctionDef	_addPortMapping (IPortMapper * ipm , Config & cfg , uint32_t localPort)
>1572	ParameterList	IPortMapper * ipm , Config & cfg , uint32_t localPort
>1573	Parameter	 
>1574	Identifier	localPort
>1575	ParameterType	uint32_t
>1576	Parameter	 
>1577	Identifier	cfg
>1578	ParameterType	Config &
>1579	Parameter	 
>1580	Identifier	ipm
>1581	ParameterType	IPortMapper *
>1582	ReturnType	static bool
>1583	CompoundStatement	 
>1584	ReturnStatement	 
>1585	Identifier	rval
>1586	IfStatement	if ( ! rval )
>1587	CompoundStatement	 
>1588	ExpressionStatement	 
>1589	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater failed to add port mapping
>1590	ArgumentList	BM_CUSTOMCATALOG_CAT
>1591	Argument	JsonWriter 
>1592	CallExpression	JsonWriter 
>1593	ArgumentList	 
>1594	Callee	JsonWriter 
>1595	MemberAccess	JsonWriter 
>1596	Identifier	c_str
>1597	CallExpression	JsonWriter 
>1598	ArgumentList	Exception 
>1599	Argument	Exception 
>1600	CallExpression	Exception 
>1601	ArgumentList	 
>1602	Callee	Exception 
>1603	Identifier	Exception 
>1604	Callee	JsonWriter 
>1605	Identifier	JsonWriter 
>1606	Argument	\"ListingUpdater failed to add port mapping
>1607	PrimaryExpression	\"ListingUpdater failed to add port mapping
>1608	Argument	BM_CUSTOMCATALOG_CAT
>1609	Identifier	BM_CUSTOMCATALOG_CAT
>1610	Callee	MO_CAT_ERROR
>1611	Identifier	MO_CAT_ERROR
>1612	Condition	 
>1613	UnaryOp	! rval
>1614	Identifier	rval
>1615	UnaryOperator	!
>1616	IfStatement	if ( rval )
>1617	CompoundStatement	 
>1618	IfStatement	if ( rval )
>1619	CompoundStatement	 
>1620	ExpressionStatement	 
>1621	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater added port mapping
>1622	ArgumentList	BM_CUSTOMCATALOG_CAT
>1623	Argument	JsonWriter 
>1624	CallExpression	JsonWriter 
>1625	ArgumentList	 
>1626	Callee	JsonWriter 
>1627	MemberAccess	JsonWriter 
>1628	Identifier	c_str
>1629	CallExpression	JsonWriter 
>1630	ArgumentList	pm
>1631	Argument	pm
>1632	Identifier	pm
>1633	Callee	JsonWriter 
>1634	Identifier	JsonWriter 
>1635	Argument	\"ListingUpdater added port mapping
>1636	PrimaryExpression	\"ListingUpdater added port mapping
>1637	Argument	BM_CUSTOMCATALOG_CAT
>1638	Identifier	BM_CUSTOMCATALOG_CAT
>1639	Callee	MO_CAT_DEBUG
>1640	Identifier	MO_CAT_DEBUG
>1641	Condition	 
>1642	Identifier	rval
>1643	ExpressionStatement	 
>1644	AssignmentExpr	rval = ipm -> addPortMapping ( igd , pm )
>1645	CallExpression	ipm -> addPortMapping ( igd , pm )
>1646	ArgumentList	igd
>1647	Argument	pm
>1648	Identifier	pm
>1649	Argument	igd
>1650	Identifier	igd
>1651	Callee	ipm -> addPortMapping
>1652	PtrMemberAccess	ipm -> addPortMapping
>1653	Identifier	addPortMapping
>1654	Identifier	ipm
>1655	Identifier	rval
>1656	IdentifierDeclStatement	 
>1657	IdentifierDecl	igd = ipm -> getDiscoveredGateways ( ) . first ( )
>1658	AssignmentExpr	igd = ipm -> getDiscoveredGateways ( ) . first ( )
>1659	CallExpression	ipm -> getDiscoveredGateways ( ) . first ( )
>1660	ArgumentList	 
>1661	Callee	ipm -> getDiscoveredGateways ( ) . first
>1662	MemberAccess	ipm -> getDiscoveredGateways ( ) . first
>1663	Identifier	first
>1664	CallExpression	ipm -> getDiscoveredGateways ( )
>1665	ArgumentList	 
>1666	Callee	ipm -> getDiscoveredGateways
>1667	PtrMemberAccess	ipm -> getDiscoveredGateways
>1668	Identifier	getDiscoveredGateways
>1669	Identifier	ipm
>1670	Identifier	igd
>1671	Identifier	igd
>1672	IdentifierDeclType	Device
>1673	ExpressionStatement	 
>1674	AssignmentExpr	pm [ \"NewLeaseDuration\" ] = 0
>1675	PrimaryExpression	0
>1676	ArrayIndexing	pm [ \"NewLeaseDuration\" ]
>1677	PrimaryExpression	\"NewLeaseDuration\"
>1678	Identifier	pm
>1679	ExpressionStatement	 
>1680	AssignmentExpr	pm [ \"NewPortMappingDescription\" ] = cfg [ \"description\" ] -> getString ( )
>1681	CallExpression	cfg [ \"description\" ] -> getString ( )
>1682	ArgumentList	 
>1683	Callee	cfg [ \"description\" ] -> getString
>1684	PtrMemberAccess	cfg [ \"description\" ] -> getString
>1685	Identifier	getString
>1686	ArrayIndexing	cfg [ \"description\" ]
>1687	PrimaryExpression	\"description\"
>1688	Identifier	cfg
>1689	ArrayIndexing	pm [ \"NewPortMappingDescription\" ]
>1690	PrimaryExpression	\"NewPortMappingDescription\"
>1691	Identifier	pm
>1692	ExpressionStatement	 
>1693	AssignmentExpr	pm [ \"NewEnabled\" ] = \"1\"
>1694	PrimaryExpression	\"1\"
>1695	ArrayIndexing	pm [ \"NewEnabled\" ]
>1696	PrimaryExpression	\"NewEnabled\"
>1697	Identifier	pm
>1698	ExpressionStatement	 
>1699	AssignmentExpr	pm [ \"NewInternalClient\" ] = \"\"
>1700	PrimaryExpression	\"\"
>1701	ArrayIndexing	pm [ \"NewInternalClient\" ]
>1702	PrimaryExpression	\"NewInternalClient\"
>1703	Identifier	pm
>1704	ExpressionStatement	 
>1705	AssignmentExpr	pm [ \"NewInternalPort\" ] = localPort
>1706	Identifier	localPort
>1707	ArrayIndexing	pm [ \"NewInternalPort\" ]
>1708	PrimaryExpression	\"NewInternalPort\"
>1709	Identifier	pm
>1710	ExpressionStatement	 
>1711	AssignmentExpr	pm [ \"NewProtocol\" ] = \"TCP\"
>1712	PrimaryExpression	\"TCP\"
>1713	ArrayIndexing	pm [ \"NewProtocol\" ]
>1714	PrimaryExpression	\"NewProtocol\"
>1715	Identifier	pm
>1716	ExpressionStatement	 
>1717	AssignmentExpr	pm [ \"NewExternalPort\" ] = externalPort
>1718	Identifier	externalPort
>1719	ArrayIndexing	pm [ \"NewExternalPort\" ]
>1720	PrimaryExpression	\"NewExternalPort\"
>1721	Identifier	pm
>1722	ExpressionStatement	 
>1723	AssignmentExpr	pm [ \"NewRemoteHost\" ] = \"\"
>1724	PrimaryExpression	\"\"
>1725	ArrayIndexing	pm [ \"NewRemoteHost\" ]
>1726	PrimaryExpression	\"NewRemoteHost\"
>1727	Identifier	pm
>1728	IdentifierDeclStatement	 
>1729	IdentifierDecl	pm
>1730	Identifier	pm
>1731	IdentifierDeclType	PortMapping
>1732	IfStatement	if ( externalPort == 0 )
>1733	CompoundStatement	 
>1734	ExpressionStatement	 
>1735	AssignmentExpr	externalPort = localPort
>1736	Identifier	localPort
>1737	Identifier	externalPort
>1738	Condition	 
>1739	EqualityExpression	externalPort == 0
>1740	PrimaryExpression	0
>1741	Identifier	externalPort
>1742	IdentifierDeclStatement	 
>1743	IdentifierDecl	externalPort = cfg [ \"externalPort\" ] -> getUInt32 ( )
>1744	AssignmentExpr	externalPort = cfg [ \"externalPort\" ] -> getUInt32 ( )
>1745	CallExpression	cfg [ \"externalPort\" ] -> getUInt32 ( )
>1746	ArgumentList	 
>1747	Callee	cfg [ \"externalPort\" ] -> getUInt32
>1748	PtrMemberAccess	cfg [ \"externalPort\" ] -> getUInt32
>1749	Identifier	getUInt32
>1750	ArrayIndexing	cfg [ \"externalPort\" ]
>1751	PrimaryExpression	\"externalPort\"
>1752	Identifier	cfg
>1753	Identifier	externalPort
>1754	Identifier	externalPort
>1755	IdentifierDeclType	uint32_t
>1756	Condition	 
>1757	Identifier	rval
>1758	IfStatement	if ( gateways -> length ( ) == 0 )
>1759	CompoundStatement	 
>1760	IfStatement	if ( count == 0 )
>1761	ElseStatement	else
>1762	IfStatement	if ( count < 0 )
>1763	CompoundStatement	 
>1764	ExpressionStatement	 
>1765	AssignmentExpr	rval = false
>1766	Identifier	false
>1767	Identifier	rval
>1768	Condition	 
>1769	RelationalExpression	count < 0
>1770	PrimaryExpression	0
>1771	Identifier	count
>1772	CompoundStatement	 
>1773	ExpressionStatement	 
>1774	AssignmentExpr	rval = false
>1775	Identifier	false
>1776	Identifier	rval
>1777	ExpressionStatement	 
>1778	CallExpression	Exception 
>1779	ArgumentList	e
>1780	Argument	e
>1781	Identifier	e
>1782	Callee	Exception 
>1783	Identifier	Exception 
>1784	IdentifierDeclStatement	 
>1785	IdentifierDecl	e = new Exception ( \"No UPnP-supported internet gateways detected.\" , \"bitmunk.portmapper.NoUPnPInternetGateways\" )
>1786	AssignmentExpr	e = new Exception ( \"No UPnP-supported internet gateways detected.\" , \"bitmunk.portmapper.NoUPnPInternetGateways\" )
>1787	Expression	\"No UPnP-supported internet gateways detected.\" , \"bitmunk.portmapper.NoUPnPInternetGateways\"
>1788	PrimaryExpression	\"bitmunk.portmapper.NoUPnPInternetGateways\"
>1789	PrimaryExpression	\"No UPnP-supported internet gateways detected.\"
>1790	Identifier	e
>1791	Identifier	e
>1792	IdentifierDeclType	ExceptionRef
>1793	Condition	 
>1794	EqualityExpression	count == 0
>1795	PrimaryExpression	0
>1796	Identifier	count
>1797	IdentifierDeclStatement	 
>1798	IdentifierDecl	count = ipm -> discoverGateways ( GATEWAY_DISCOVERY_TIMEOUT )
>1799	AssignmentExpr	count = ipm -> discoverGateways ( GATEWAY_DISCOVERY_TIMEOUT )
>1800	CallExpression	ipm -> discoverGateways ( GATEWAY_DISCOVERY_TIMEOUT )
>1801	ArgumentList	GATEWAY_DISCOVERY_TIMEOUT
>1802	Argument	GATEWAY_DISCOVERY_TIMEOUT
>1803	Identifier	GATEWAY_DISCOVERY_TIMEOUT
>1804	Callee	ipm -> discoverGateways
>1805	PtrMemberAccess	ipm -> discoverGateways
>1806	Identifier	discoverGateways
>1807	Identifier	ipm
>1808	Identifier	count
>1809	Identifier	count
>1810	IdentifierDeclType	int
>1811	Condition	 
>1812	EqualityExpression	gateways -> length ( ) == 0
>1813	PrimaryExpression	0
>1814	CallExpression	gateways -> length ( )
>1815	ArgumentList	 
>1816	Callee	gateways -> length
>1817	PtrMemberAccess	gateways -> length
>1818	Identifier	length
>1819	Identifier	gateways
>1820	IdentifierDeclStatement	 
>1821	IdentifierDecl	gateways = ipm -> getDiscoveredGateways ( )
>1822	AssignmentExpr	gateways = ipm -> getDiscoveredGateways ( )
>1823	CallExpression	ipm -> getDiscoveredGateways ( )
>1824	ArgumentList	 
>1825	Callee	ipm -> getDiscoveredGateways
>1826	PtrMemberAccess	ipm -> getDiscoveredGateways
>1827	Identifier	getDiscoveredGateways
>1828	Identifier	ipm
>1829	Identifier	gateways
>1830	Identifier	gateways
>1831	IdentifierDeclType	DeviceList
>1832	ExpressionStatement	 
>1833	CallExpression	MO_CAT_DEBUG ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater attempting to add port mapping.\" )
>1834	ArgumentList	BM_CUSTOMCATALOG_CAT
>1835	Argument	\"ListingUpdater attempting to add port mapping.\"
>1836	PrimaryExpression	\"ListingUpdater attempting to add port mapping.\"
>1837	Argument	BM_CUSTOMCATALOG_CAT
>1838	Identifier	BM_CUSTOMCATALOG_CAT
>1839	Callee	MO_CAT_DEBUG
>1840	Identifier	MO_CAT_DEBUG
>1841	IdentifierDeclStatement	 
>1842	IdentifierDecl	rval = true
>1843	AssignmentExpr	rval = true
>1844	Identifier	true
>1845	Identifier	true
>1846	Identifier	rval
>1847	IdentifierDeclType	bool
>1881	FunctionDef	_doReverseNetTest (Node * node , Config & cfg , UserId userId , const char * token , string & serverUrl)
>1882	ParameterList	Node * node , Config & cfg , UserId userId , const char * token , string & serverUrl
>1883	Parameter	 
>1884	Identifier	serverUrl
>1885	ParameterType	string &
>1886	Parameter	 
>1887	Identifier	token
>1888	ParameterType	const char *
>1889	Parameter	 
>1890	Identifier	userId
>1891	ParameterType	UserId
>1892	Parameter	 
>1893	Identifier	cfg
>1894	ParameterType	Config &
>1895	Parameter	 
>1896	Identifier	node
>1897	ParameterType	Node *
>1898	ReturnType	static bool
>1899	CompoundStatement	 
>1900	ReturnStatement	 
>1901	Identifier	rval
>1902	IfStatement	if ( m -> postSecureToBitmunk ( & url , & out , & in , userId ) )
>1903	CompoundStatement	 
>1904	ExpressionStatement	 
>1905	CallExpression	node -> getEventController ( ) -> schedule ( ev )
>1906	ArgumentList	ev
>1907	Argument	ev
>1908	Identifier	ev
>1909	Callee	node -> getEventController ( ) -> schedule
>1910	PtrMemberAccess	node -> getEventController ( ) -> schedule
>1911	Identifier	schedule
>1912	CallExpression	node -> getEventController ( )
>1913	ArgumentList	 
>1914	Callee	node -> getEventController
>1915	PtrMemberAccess	node -> getEventController
>1916	Identifier	getEventController
>1917	Identifier	node
>1918	ExpressionStatement	 
>1919	AssignmentExpr	ev [ \"details\" ] [ \"serverUrl\" ] = serverUrl . c_str ( )
>1920	CallExpression	serverUrl . c_str ( )
>1921	ArgumentList	 
>1922	Callee	serverUrl . c_str
>1923	MemberAccess	serverUrl . c_str
>1924	Identifier	c_str
>1925	Identifier	serverUrl
>1926	ArrayIndexing	ev [ \"details\" ] [ \"serverUrl\" ]
>1927	PrimaryExpression	\"serverUrl\"
>1928	ArrayIndexing	ev [ \"details\" ]
>1929	PrimaryExpression	\"details\"
>1930	Identifier	ev
>1931	ExpressionStatement	 
>1932	AssignmentExpr	ev [ \"details\" ] [ \"userId\" ] = userId
>1933	Identifier	userId
>1934	ArrayIndexing	ev [ \"details\" ] [ \"userId\" ]
>1935	PrimaryExpression	\"userId\"
>1936	ArrayIndexing	ev [ \"details\" ]
>1937	PrimaryExpression	\"details\"
>1938	Identifier	ev
>1939	ExpressionStatement	 
>1940	AssignmentExpr	ev [ \"type\" ] = EVENT_NET_ACCESS_SUCCESS
>1941	Identifier	EVENT_NET_ACCESS_SUCCESS
>1942	ArrayIndexing	ev [ \"type\" ]
>1943	PrimaryExpression	\"type\"
>1944	Identifier	ev
>1945	IdentifierDeclStatement	 
>1946	IdentifierDecl	ev
>1947	Identifier	ev
>1948	IdentifierDeclType	Event
>1949	ExpressionStatement	 
>1950	CallExpression	serverUrl . append ( cfg [ \"port\" ] -> getString ( ) )
>1951	ArgumentList	cfg [ \"port\" ] -> getString ( )
>1952	Argument	cfg [ \"port\" ] -> getString ( )
>1953	CallExpression	cfg [ \"port\" ] -> getString ( )
>1954	ArgumentList	 
>1955	Callee	cfg [ \"port\" ] -> getString
>1956	PtrMemberAccess	cfg [ \"port\" ] -> getString
>1957	Identifier	getString
>1958	ArrayIndexing	cfg [ \"port\" ]
>1959	PrimaryExpression	\"port\"
>1960	Identifier	cfg
>1961	Callee	serverUrl . append
>1962	MemberAccess	serverUrl . append
>1963	Identifier	append
>1964	Identifier	serverUrl
>1965	ExpressionStatement	 
>1966	CallExpression	serverUrl . push_back ( '
>1967	ArgumentList	'
>1968	Argument	'
>1969	PrimaryExpression	'
>1970	Callee	serverUrl . push_back
>1971	MemberAccess	serverUrl . push_back
>1972	Identifier	push_back
>1973	Identifier	serverUrl
>1974	ExpressionStatement	 
>1975	CallExpression	serverUrl . append ( in [ \"ip\" ] -> getString ( ) )
>1976	ArgumentList	in [ \"ip\" ] -> getString ( )
>1977	Argument	in [ \"ip\" ] -> getString ( )
>1978	CallExpression	in [ \"ip\" ] -> getString ( )
>1979	ArgumentList	 
>1980	Callee	in [ \"ip\" ] -> getString
>1981	PtrMemberAccess	in [ \"ip\" ] -> getString
>1982	Identifier	getString
>1983	ArrayIndexing	in [ \"ip\" ]
>1984	PrimaryExpression	\"ip\"
>1985	Identifier	in
>1986	Callee	serverUrl . append
>1987	MemberAccess	serverUrl . append
>1988	Identifier	append
>1989	Identifier	serverUrl
>1990	ExpressionStatement	 
>1991	AssignmentExpr	rval = true
>1992	Identifier	true
>1993	Identifier	rval
>1994	Condition	 
>1995	CallExpression	m -> postSecureToBitmunk ( & url , & out , & in , userId )
>1996	ArgumentList	& url
>1997	Argument	userId
>1998	Identifier	userId
>1999	Argument	& in
>2000	UnaryOp	& in
>2001	Identifier	in
>2002	UnaryOperator	&
>2003	Argument	& out
>2004	UnaryOp	& out
>2005	Identifier	out
>2006	UnaryOperator	&
>2007	Argument	& url
>2008	UnaryOp	& url
>2009	Identifier	url
>2010	UnaryOperator	&
>2011	Callee	m -> postSecureToBitmunk
>2012	PtrMemberAccess	m -> postSecureToBitmunk
>2013	Identifier	postSecureToBitmunk
>2014	Identifier	m
>2015	IdentifierDeclStatement	 
>2016	IdentifierDecl	* m = node -> getMessenger ( )
>2017	AssignmentExpr	* m = node -> getMessenger ( )
>2018	CallExpression	node -> getMessenger ( )
>2019	ArgumentList	 
>2020	Callee	node -> getMessenger
>2021	PtrMemberAccess	node -> getMessenger
>2022	Identifier	getMessenger
>2023	Identifier	node
>2024	Identifier	m
>2025	Identifier	m
>2026	IdentifierDeclType	Messenger *
>2027	ExpressionStatement	 
>2028	CallExpression	url . format ( \"/api/3.0/catalog/netaccess/rtest\" )
>2029	ArgumentList	\"/api/3.0/catalog/netaccess/rtest\"
>2030	Argument	\"/api/3.0/catalog/netaccess/rtest\"
>2031	PrimaryExpression	\"/api/3.0/catalog/netaccess/rtest\"
>2032	Callee	url . format
>2033	MemberAccess	url . format
>2034	Identifier	format
>2035	Identifier	url
>2036	IdentifierDeclStatement	 
>2037	IdentifierDecl	url
>2038	Identifier	url
>2039	IdentifierDeclType	Url
>2040	IdentifierDeclStatement	 
>2041	IdentifierDecl	in
>2042	Identifier	in
>2043	IdentifierDeclType	DynamicObject
>2044	ExpressionStatement	 
>2045	AssignmentExpr	out [ \"timeout\" ] = 15
>2046	PrimaryExpression	15
>2047	ArrayIndexing	out [ \"timeout\" ]
>2048	PrimaryExpression	\"timeout\"
>2049	Identifier	out
>2050	ExpressionStatement	 
>2051	AssignmentExpr	out [ \"token\" ] = token
>2052	Identifier	token
>2053	ArrayIndexing	out [ \"token\" ]
>2054	PrimaryExpression	\"token\"
>2055	Identifier	out
>2056	ExpressionStatement	 
>2057	AssignmentExpr	out [ \"sellerId\" ] = userId
>2058	Identifier	userId
>2059	ArrayIndexing	out [ \"sellerId\" ]
>2060	PrimaryExpression	\"sellerId\"
>2061	Identifier	out
>2062	ExpressionStatement	 
>2063	AssignmentExpr	out [ \"path\" ] = \"/api/3.0/catalog/netaccess/test\"
>2064	PrimaryExpression	\"/api/3.0/catalog/netaccess/test\"
>2065	ArrayIndexing	out [ \"path\" ]
>2066	PrimaryExpression	\"path\"
>2067	Identifier	out
>2068	ExpressionStatement	 
>2069	AssignmentExpr	out [ \"port\" ] = cfg [ \"port\" ]
>2070	ArrayIndexing	cfg [ \"port\" ]
>2071	PrimaryExpression	\"port\"
>2072	Identifier	cfg
>2073	ArrayIndexing	out [ \"port\" ]
>2074	PrimaryExpression	\"port\"
>2075	Identifier	out
>2076	ExpressionStatement	 
>2077	AssignmentExpr	out [ \"host\" ] = \"\"
>2078	PrimaryExpression	\"\"
>2079	ArrayIndexing	out [ \"host\" ]
>2080	PrimaryExpression	\"host\"
>2081	Identifier	out
>2082	IdentifierDeclStatement	 
>2083	IdentifierDecl	out
>2084	Identifier	out
>2085	IdentifierDeclType	DynamicObject
>2086	ExpressionStatement	 
>2087	AssignmentExpr	serverUrl = \"https
>2088	PrimaryExpression	\"https
>2089	Identifier	serverUrl
>2090	IdentifierDeclStatement	 
>2091	IdentifierDecl	rval = false
>2092	AssignmentExpr	rval = false
>2093	Identifier	false
>2094	Identifier	false
>2095	Identifier	rval
>2096	IdentifierDeclType	bool
>2132	FunctionDef	ListingUpdater 
>2133	ParameterList	string & serverUrl
>2134	Parameter	 
>2135	Identifier	serverUrl
>2136	ParameterType	string &
>2137	ReturnType	bool
>2138	CompoundStatement	 
>2139	ReturnStatement	 
>2140	Identifier	rval
>2141	IfStatement	if ( rval )
>2142	ElseStatement	else
>2143	CompoundStatement	 
>2144	ExpressionStatement	 
>2145	CallExpression	mNode -> getEventController ( ) -> schedule ( ev )
>2146	ArgumentList	ev
>2147	Argument	ev
>2148	Identifier	ev
>2149	Callee	mNode -> getEventController ( ) -> schedule
>2150	PtrMemberAccess	mNode -> getEventController ( ) -> schedule
>2151	Identifier	schedule
>2152	CallExpression	mNode -> getEventController ( )
>2153	ArgumentList	 
>2154	Callee	mNode -> getEventController
>2155	PtrMemberAccess	mNode -> getEventController
>2156	Identifier	getEventController
>2157	Identifier	mNode
>2158	ExpressionStatement	 
>2159	AssignmentExpr	ev [ \"details\" ] [ \"exception\" ] = dyno
>2160	Identifier	dyno
>2161	ArrayIndexing	ev [ \"details\" ] [ \"exception\" ]
>2162	PrimaryExpression	\"exception\"
>2163	ArrayIndexing	ev [ \"details\" ]
>2164	PrimaryExpression	\"details\"
>2165	Identifier	ev
>2166	ExpressionStatement	 
>2167	AssignmentExpr	ev [ \"details\" ] [ \"userId\" ] = userId
>2168	Identifier	userId
>2169	ArrayIndexing	ev [ \"details\" ] [ \"userId\" ]
>2170	PrimaryExpression	\"userId\"
>2171	ArrayIndexing	ev [ \"details\" ]
>2172	PrimaryExpression	\"details\"
>2173	Identifier	ev
>2174	ExpressionStatement	 
>2175	AssignmentExpr	ev [ \"type\" ] = EVENT_NET_ACCESS_EXCEPTION
>2176	Identifier	EVENT_NET_ACCESS_EXCEPTION
>2177	ArrayIndexing	ev [ \"type\" ]
>2178	PrimaryExpression	\"type\"
>2179	Identifier	ev
>2180	IdentifierDeclStatement	 
>2181	IdentifierDecl	ev
>2182	Identifier	ev
>2183	IdentifierDeclType	Event
>2184	ExpressionStatement	 
>2185	CallExpression	mCatalog -> setConfigValue ( userId , \"netaccessException\" , JsonWriter 
>2186	ArgumentList	userId
>2187	Argument	JsonWriter 
>2188	CallExpression	JsonWriter 
>2189	ArgumentList	 
>2190	Callee	JsonWriter 
>2191	MemberAccess	JsonWriter 
>2192	Identifier	c_str
>2193	CallExpression	JsonWriter 
>2194	ArgumentList	dyno
>2195	Argument	dyno
>2196	Identifier	dyno
>2197	Callee	JsonWriter 
>2198	Identifier	JsonWriter 
>2199	Argument	\"netaccessException\"
>2200	PrimaryExpression	\"netaccessException\"
>2201	Argument	userId
>2202	Identifier	userId
>2203	Callee	mCatalog -> setConfigValue
>2204	PtrMemberAccess	mCatalog -> setConfigValue
>2205	Identifier	setConfigValue
>2206	Identifier	mCatalog
>2207	IdentifierDeclStatement	 
>2208	IdentifierDecl	dyno = Exception 
>2209	AssignmentExpr	dyno = Exception 
>2210	CallExpression	Exception 
>2211	ArgumentList	 
>2212	Callee	Exception 
>2213	Identifier	Exception 
>2214	Identifier	dyno
>2215	Identifier	dyno
>2216	IdentifierDeclType	DynamicObject
>2217	ExpressionStatement	 
>2218	CallExpression	Exception 
>2219	ArgumentList	e
>2220	Argument	e
>2221	Identifier	e
>2222	Callee	Exception 
>2223	Identifier	Exception 
>2224	IdentifierDeclStatement	 
>2225	IdentifierDecl	e = new Exception ( \"Could not confirm public network access to the local server.\" , \"bitmunk.catalog.NetAccessTestError\" )
>2226	AssignmentExpr	e = new Exception ( \"Could not confirm public network access to the local server.\" , \"bitmunk.catalog.NetAccessTestError\" )
>2227	Expression	\"Could not confirm public network access to the local server.\" , \"bitmunk.catalog.NetAccessTestError\"
>2228	PrimaryExpression	\"bitmunk.catalog.NetAccessTestError\"
>2229	PrimaryExpression	\"Could not confirm public network access to the local server.\"
>2230	Identifier	e
>2231	Identifier	e
>2232	IdentifierDeclType	ExceptionRef
>2233	CompoundStatement	 
>2234	ExpressionStatement	 
>2235	CallExpression	mCatalog -> setConfigValue ( userId , \"netaccessException\" , \"\" )
>2236	ArgumentList	userId
>2237	Argument	\"\"
>2238	PrimaryExpression	\"\"
>2239	Argument	\"netaccessException\"
>2240	PrimaryExpression	\"netaccessException\"
>2241	Argument	userId
>2242	Identifier	userId
>2243	Callee	mCatalog -> setConfigValue
>2244	PtrMemberAccess	mCatalog -> setConfigValue
>2245	Identifier	setConfigValue
>2246	Identifier	mCatalog
>2247	Condition	 
>2248	Identifier	rval
>2249	IfStatement	if ( mCatalog -> getConfigValue ( userId , \"netaccessToken\" , token ) )
>2250	CompoundStatement	 
>2251	IfStatement	if ( ! rval && Exception 
>2252	CompoundStatement	 
>2253	IfStatement	if ( ! pmCfg . isNull ( ) && pmCfg -> hasMember ( \"portMapping\" ) && pmCfg [ \"portMapping\" ] [ \"enabled\" ] -> getBoolean ( ) )
>2254	CompoundStatement	 
>2255	IfStatement	if ( ipm == NULL )
>2256	ElseStatement	else
>2257	CompoundStatement	 
>2258	IfStatement	if ( ! rval )
>2259	CompoundStatement	 
>2260	ExpressionStatement	 
>2261	AssignmentExpr	e -> getDetails ( ) [ \"beforeUPnPException\" ] = nonUPnP
>2262	Identifier	nonUPnP
>2263	ArrayIndexing	e -> getDetails ( ) [ \"beforeUPnPException\" ]
>2264	PrimaryExpression	\"beforeUPnPException\"
>2265	CallExpression	e -> getDetails ( )
>2266	ArgumentList	 
>2267	Callee	e -> getDetails
>2268	PtrMemberAccess	e -> getDetails
>2269	Identifier	getDetails
>2270	Identifier	e
>2271	IdentifierDeclStatement	 
>2272	IdentifierDecl	e = Exception 
>2273	AssignmentExpr	e = Exception 
>2274	CallExpression	Exception 
>2275	ArgumentList	 
>2276	Callee	Exception 
>2277	Identifier	Exception 
>2278	Identifier	e
>2279	Identifier	e
>2280	IdentifierDeclType	ExceptionRef
>2281	Condition	 
>2282	UnaryOp	! rval
>2283	Identifier	rval
>2284	UnaryOperator	!
>2285	ExpressionStatement	 
>2286	AssignmentExpr	rval = _addPortMapping ( ipm , pmCfg [ \"portMapping\" ] , cfg [ \"port\" ] -> getUInt32 ( ) ) && _doReverseNetTest ( \
>2287	AndExpression	_addPortMapping ( ipm , pmCfg [ \"portMapping\" ] , cfg [ \"port\" ] -> getUInt32 ( ) ) && _doReverseNetTest ( \
>2288	CallExpression	_doReverseNetTest ( mNode , cfg , userId , token . c_str ( ) , serverUrl )
>2289	ArgumentList	mNode
>2290	Argument	serverUrl
>2291	Identifier	serverUrl
>2292	Argument	token . c_str ( )
>2293	CallExpression	token . c_str ( )
>2294	ArgumentList	 
>2295	Callee	token . c_str
>2296	MemberAccess	token . c_str
>2297	Identifier	c_str
>2298	Identifier	token
>2299	Argument	userId
>2300	Identifier	userId
>2301	Argument	cfg
>2302	Identifier	cfg
>2303	Argument	mNode
>2304	Identifier	mNode
>2305	Callee	_doReverseNetTest
>2306	Identifier	_doReverseNetTest
>2307	CallExpression	_addPortMapping ( ipm , pmCfg [ \"portMapping\" ] , cfg [ \"port\" ] -> getUInt32 ( ) )
>2308	ArgumentList	ipm
>2309	Argument	cfg [ \"port\" ] -> getUInt32 ( )
>2310	CallExpression	cfg [ \"port\" ] -> getUInt32 ( )
>2311	ArgumentList	 
>2312	Callee	cfg [ \"port\" ] -> getUInt32
>2313	PtrMemberAccess	cfg [ \"port\" ] -> getUInt32
>2314	Identifier	getUInt32
>2315	ArrayIndexing	cfg [ \"port\" ]
>2316	PrimaryExpression	\"port\"
>2317	Identifier	cfg
>2318	Argument	pmCfg [ \"portMapping\" ]
>2319	ArrayIndexing	pmCfg [ \"portMapping\" ]
>2320	PrimaryExpression	\"portMapping\"
>2321	Identifier	pmCfg
>2322	Argument	ipm
>2323	Identifier	ipm
>2324	Callee	_addPortMapping
>2325	Identifier	_addPortMapping
>2326	Identifier	rval
>2327	CompoundStatement	 
>2328	ExpressionStatement	 
>2329	Statement	 
>2330	Statement	 
>2331	Statement	 
>2332	Statement	 
>2333	Statement	 
>2334	Statement	 
>2335	Statement	 
>2336	Condition	 
>2337	EqualityExpression	ipm == NULL
>2338	Identifier	NULL
>2339	Identifier	ipm
>2340	ExpressionStatement	 
>2341	CallExpression	mNode -> getModuleApiByType ( \"bitmunk.portmapper\" )
>2342	ArgumentList	\"bitmunk.portmapper\"
>2343	Argument	\"bitmunk.portmapper\"
>2344	PrimaryExpression	\"bitmunk.portmapper\"
>2345	Callee	mNode -> getModuleApiByType
>2346	PtrMemberAccess	mNode -> getModuleApiByType
>2347	Identifier	getModuleApiByType
>2348	Identifier	mNode
>2349	Statement	 
>2350	Statement	 
>2351	Statement	 
>2352	Statement	 
>2353	Statement	 
>2354	Statement	 
>2355	Statement	 
>2356	Statement	 
>2357	Statement	 
>2358	Condition	 
>2359	AndExpression	! pmCfg . isNull ( ) && pmCfg -> hasMember ( \"portMapping\" ) && pmCfg [ \"portMapping\" ] [ \"enabled\" ] \
>2360	AndExpression	pmCfg -> hasMember ( \"portMapping\" ) && pmCfg [ \"portMapping\" ] [ \"enabled\" ] -> getBoolean ( )
>2361	CallExpression	pmCfg [ \"portMapping\" ] [ \"enabled\" ] -> getBoolean ( )
>2362	ArgumentList	 
>2363	Callee	pmCfg [ \"portMapping\" ] [ \"enabled\" ] -> getBoolean
>2364	PtrMemberAccess	pmCfg [ \"portMapping\" ] [ \"enabled\" ] -> getBoolean
>2365	Identifier	getBoolean
>2366	ArrayIndexing	pmCfg [ \"portMapping\" ] [ \"enabled\" ]
>2367	PrimaryExpression	\"enabled\"
>2368	ArrayIndexing	pmCfg [ \"portMapping\" ]
>2369	PrimaryExpression	\"portMapping\"
>2370	Identifier	pmCfg
>2371	CallExpression	pmCfg -> hasMember ( \"portMapping\" )
>2372	ArgumentList	\"portMapping\"
>2373	Argument	\"portMapping\"
>2374	PrimaryExpression	\"portMapping\"
>2375	Callee	pmCfg -> hasMember
>2376	PtrMemberAccess	pmCfg -> hasMember
>2377	Identifier	hasMember
>2378	Identifier	pmCfg
>2379	UnaryOp	! pmCfg . isNull ( )
>2380	CallExpression	pmCfg . isNull ( )
>2381	ArgumentList	 
>2382	Callee	pmCfg . isNull
>2383	MemberAccess	pmCfg . isNull
>2384	Identifier	isNull
>2385	Identifier	pmCfg
>2386	UnaryOperator	!
>2387	IdentifierDeclStatement	 
>2388	IdentifierDecl	pmCfg = mNode -> getConfigManager ( ) -> getModuleConfig ( \"bitmunk.catalog.CustomCatalog\" )
>2389	AssignmentExpr	pmCfg = mNode -> getConfigManager ( ) -> getModuleConfig ( \"bitmunk.catalog.CustomCatalog\" )
>2390	CallExpression	mNode -> getConfigManager ( ) -> getModuleConfig ( \"bitmunk.catalog.CustomCatalog\" )
>2391	ArgumentList	\"bitmunk.catalog.CustomCatalog\"
>2392	Argument	\"bitmunk.catalog.CustomCatalog\"
>2393	PrimaryExpression	\"bitmunk.catalog.CustomCatalog\"
>2394	Callee	mNode -> getConfigManager ( ) -> getModuleConfig
>2395	PtrMemberAccess	mNode -> getConfigManager ( ) -> getModuleConfig
>2396	Identifier	getModuleConfig
>2397	CallExpression	mNode -> getConfigManager ( )
>2398	ArgumentList	 
>2399	Callee	mNode -> getConfigManager
>2400	PtrMemberAccess	mNode -> getConfigManager
>2401	Identifier	getConfigManager
>2402	Identifier	mNode
>2403	Identifier	pmCfg
>2404	Identifier	pmCfg
>2405	IdentifierDeclType	Config
>2406	IdentifierDeclStatement	 
>2407	IdentifierDecl	nonUPnP = Exception 
>2408	AssignmentExpr	nonUPnP = Exception 
>2409	CallExpression	Exception 
>2410	ArgumentList	 
>2411	Callee	Exception 
>2412	Identifier	Exception 
>2413	Identifier	nonUPnP
>2414	Identifier	nonUPnP
>2415	IdentifierDeclType	DynamicObject
>2416	Condition	 
>2417	AndExpression	! rval && Exception 
>2418	CallExpression	Exception 
>2419	ArgumentList	EXCEPTION_NET_ACCESS
>2420	Argument	EXCEPTION_NET_ACCESS
>2421	Identifier	EXCEPTION_NET_ACCESS
>2422	Callee	Exception 
>2423	PtrMemberAccess	Exception 
>2424	Identifier	isType
>2425	CallExpression	Exception 
>2426	ArgumentList	 
>2427	Callee	Exception 
>2428	Identifier	Exception 
>2429	UnaryOp	! rval
>2430	Identifier	rval
>2431	UnaryOperator	!
>2432	ExpressionStatement	 
>2433	AssignmentExpr	rval = _doReverseNetTest ( mNode , cfg , userId , token . c_str ( ) , serverUrl )
>2434	CallExpression	_doReverseNetTest ( mNode , cfg , userId , token . c_str ( ) , serverUrl )
>2435	ArgumentList	mNode
>2436	Argument	serverUrl
>2437	Identifier	serverUrl
>2438	Argument	token . c_str ( )
>2439	CallExpression	token . c_str ( )
>2440	ArgumentList	 
>2441	Callee	token . c_str
>2442	MemberAccess	token . c_str
>2443	Identifier	c_str
>2444	Identifier	token
>2445	Argument	userId
>2446	Identifier	userId
>2447	Argument	cfg
>2448	Identifier	cfg
>2449	Argument	mNode
>2450	Identifier	mNode
>2451	Callee	_doReverseNetTest
>2452	Identifier	_doReverseNetTest
>2453	Identifier	rval
>2454	IdentifierDeclStatement	 
>2455	IdentifierDecl	cfg = mNode -> getConfigManager ( ) -> getNodeConfig ( )
>2456	AssignmentExpr	cfg = mNode -> getConfigManager ( ) -> getNodeConfig ( )
>2457	CallExpression	mNode -> getConfigManager ( ) -> getNodeConfig ( )
>2458	ArgumentList	 
>2459	Callee	mNode -> getConfigManager ( ) -> getNodeConfig
>2460	PtrMemberAccess	mNode -> getConfigManager ( ) -> getNodeConfig
>2461	Identifier	getNodeConfig
>2462	CallExpression	mNode -> getConfigManager ( )
>2463	ArgumentList	 
>2464	Callee	mNode -> getConfigManager
>2465	PtrMemberAccess	mNode -> getConfigManager
>2466	Identifier	getConfigManager
>2467	Identifier	mNode
>2468	Identifier	cfg
>2469	Identifier	cfg
>2470	IdentifierDeclType	Config
>2471	Condition	 
>2472	CallExpression	mCatalog -> getConfigValue ( userId , \"netaccessToken\" , token )
>2473	ArgumentList	userId
>2474	Argument	token
>2475	Identifier	token
>2476	Argument	\"netaccessToken\"
>2477	PrimaryExpression	\"netaccessToken\"
>2478	Argument	userId
>2479	Identifier	userId
>2480	Callee	mCatalog -> getConfigValue
>2481	PtrMemberAccess	mCatalog -> getConfigValue
>2482	Identifier	getConfigValue
>2483	Identifier	mCatalog
>2484	IdentifierDeclStatement	 
>2485	IdentifierDecl	token
>2486	Identifier	token
>2487	IdentifierDeclType	string
>2488	IdentifierDeclStatement	 
>2489	IdentifierDecl	userId = getUserId ( )
>2490	AssignmentExpr	userId = getUserId ( )
>2491	CallExpression	getUserId ( )
>2492	ArgumentList	 
>2493	Callee	getUserId
>2494	Identifier	getUserId
>2495	Identifier	userId
>2496	Identifier	userId
>2497	IdentifierDeclType	UserId
>2498	IdentifierDeclStatement	 
>2499	IdentifierDecl	rval = false
>2500	AssignmentExpr	rval = false
>2501	Identifier	false
>2502	Identifier	false
>2503	Identifier	rval
>2504	IdentifierDeclType	bool
>2559	FunctionDef	ListingUpdater 
>2560	ParameterList	 
>2561	ReturnType	void
>2562	CompoundStatement	 
>2563	IfStatement	if ( mTestNetAccessPending )
>2564	CompoundStatement	 
>2565	ExpressionStatement	 
>2566	CallExpression	messageSelf ( msg )
>2567	ArgumentList	msg
>2568	Argument	msg
>2569	Identifier	msg
>2570	Callee	messageSelf
>2571	Identifier	messageSelf
>2572	ExpressionStatement	 
>2573	AssignmentExpr	msg [ \"testNetAccess\" ] = true
>2574	Identifier	true
>2575	ArrayIndexing	msg [ \"testNetAccess\" ]
>2576	PrimaryExpression	\"testNetAccess\"
>2577	Identifier	msg
>2578	IdentifierDeclStatement	 
>2579	IdentifierDecl	msg
>2580	Identifier	msg
>2581	IdentifierDeclType	DynamicObject
>2582	ExpressionStatement	 
>2583	AssignmentExpr	mTestNetAccessPending = false
>2584	Identifier	false
>2585	Identifier	mTestNetAccessPending
>2586	Condition	 
>2587	Identifier	mTestNetAccessPending
>2588	ExpressionStatement	 
>2589	CallExpression	messageSelf ( msg )
>2590	ArgumentList	msg
>2591	Argument	msg
>2592	Identifier	msg
>2593	Callee	messageSelf
>2594	Identifier	messageSelf
>2595	IfStatement	if ( ! pass )
>2596	CompoundStatement	 
>2597	ExpressionStatement	 
>2598	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater
>2599	ArgumentList	BM_CUSTOMCATALOG_CAT
>2600	Argument	JsonWriter 
>2601	CallExpression	JsonWriter 
>2602	ArgumentList	 
>2603	Callee	JsonWriter 
>2604	MemberAccess	JsonWriter 
>2605	Identifier	c_str
>2606	CallExpression	JsonWriter 
>2607	ArgumentList	d
>2608	Argument	d
>2609	Identifier	d
>2610	Callee	JsonWriter 
>2611	Identifier	JsonWriter 
>2612	Argument	\"ListingUpdater
>2613	PrimaryExpression	\"ListingUpdater
>2614	Argument	BM_CUSTOMCATALOG_CAT
>2615	Identifier	BM_CUSTOMCATALOG_CAT
>2616	Callee	MO_CAT_ERROR
>2617	Identifier	MO_CAT_ERROR
>2618	ExpressionStatement	 
>2619	AssignmentExpr	msg [ \"exception\" ] = d
>2620	Identifier	d
>2621	ArrayIndexing	msg [ \"exception\" ]
>2622	PrimaryExpression	\"exception\"
>2623	Identifier	msg
>2624	ExpressionStatement	 
>2625	AssignmentExpr	msg [ \"error\" ] = true
>2626	Identifier	true
>2627	ArrayIndexing	msg [ \"error\" ]
>2628	PrimaryExpression	\"error\"
>2629	Identifier	msg
>2630	IdentifierDeclStatement	 
>2631	IdentifierDecl	d = Exception 
>2632	AssignmentExpr	d = Exception 
>2633	CallExpression	Exception 
>2634	ArgumentList	 
>2635	Callee	Exception 
>2636	Identifier	Exception 
>2637	Identifier	d
>2638	Identifier	d
>2639	IdentifierDeclType	DynamicObject
>2640	ExpressionStatement	 
>2641	CallExpression	Exception 
>2642	ArgumentList	e
>2643	Argument	e
>2644	Identifier	e
>2645	Callee	Exception 
>2646	Identifier	Exception 
>2647	IdentifierDeclStatement	 
>2648	IdentifierDecl	e = new Exception ( \"Could not register for new server ID.\" , \"bitmunk.catalog.ServerIdRegistrationError\" )
>2649	AssignmentExpr	e = new Exception ( \"Could not register for new server ID.\" , \"bitmunk.catalog.ServerIdRegistrationError\" )
>2650	Expression	\"Could not register for new server ID.\" , \"bitmunk.catalog.ServerIdRegistrationError\"
>2651	PrimaryExpression	\"bitmunk.catalog.ServerIdRegistrationError\"
>2652	PrimaryExpression	\"Could not register for new server ID.\"
>2653	Identifier	e
>2654	Identifier	e
>2655	IdentifierDeclType	ExceptionRef
>2656	Condition	 
>2657	UnaryOp	! pass
>2658	Identifier	pass
>2659	UnaryOperator	!
>2660	IfStatement	if ( testNetAccess ( serverUrl ) )
>2661	CompoundStatement	 
>2662	IfStatement	if ( m -> postSecureToBitmunk ( & url , & out , & in , getUserId ( ) ) )
>2663	CompoundStatement	 
>2664	ExpressionStatement	 
>2665	AssignmentExpr	msg [ \"serverUrl\" ] = out [ \"url\" ]
>2666	ArrayIndexing	out [ \"url\" ]
>2667	PrimaryExpression	\"url\"
>2668	Identifier	out
>2669	ArrayIndexing	msg [ \"serverUrl\" ]
>2670	PrimaryExpression	\"serverUrl\"
>2671	Identifier	msg
>2672	ExpressionStatement	 
>2673	AssignmentExpr	msg [ \"serverToken\" ] = in [ \"serverToken\" ]
>2674	ArrayIndexing	in [ \"serverToken\" ]
>2675	PrimaryExpression	\"serverToken\"
>2676	Identifier	in
>2677	ArrayIndexing	msg [ \"serverToken\" ]
>2678	PrimaryExpression	\"serverToken\"
>2679	Identifier	msg
>2680	ExpressionStatement	 
>2681	AssignmentExpr	msg [ \"serverId\" ] = in [ \"serverId\" ]
>2682	ArrayIndexing	in [ \"serverId\" ]
>2683	PrimaryExpression	\"serverId\"
>2684	Identifier	in
>2685	ArrayIndexing	msg [ \"serverId\" ]
>2686	PrimaryExpression	\"serverId\"
>2687	Identifier	msg
>2688	ExpressionStatement	 
>2689	AssignmentExpr	pass = true
>2690	Identifier	true
>2691	Identifier	pass
>2692	Condition	 
>2693	CallExpression	m -> postSecureToBitmunk ( & url , & out , & in , getUserId ( ) )
>2694	ArgumentList	& url
>2695	Argument	getUserId ( )
>2696	CallExpression	getUserId ( )
>2697	ArgumentList	 
>2698	Callee	getUserId
>2699	Identifier	getUserId
>2700	Argument	& in
>2701	UnaryOp	& in
>2702	Identifier	in
>2703	UnaryOperator	&
>2704	Argument	& out
>2705	UnaryOp	& out
>2706	Identifier	out
>2707	UnaryOperator	&
>2708	Argument	& url
>2709	UnaryOp	& url
>2710	Identifier	url
>2711	UnaryOperator	&
>2712	Callee	m -> postSecureToBitmunk
>2713	PtrMemberAccess	m -> postSecureToBitmunk
>2714	Identifier	postSecureToBitmunk
>2715	Identifier	m
>2716	IdentifierDeclStatement	 
>2717	IdentifierDecl	* m = mNode -> getMessenger ( )
>2718	AssignmentExpr	* m = mNode -> getMessenger ( )
>2719	CallExpression	mNode -> getMessenger ( )
>2720	ArgumentList	 
>2721	Callee	mNode -> getMessenger
>2722	PtrMemberAccess	mNode -> getMessenger
>2723	Identifier	getMessenger
>2724	Identifier	mNode
>2725	Identifier	m
>2726	Identifier	m
>2727	IdentifierDeclType	Messenger *
>2728	ExpressionStatement	 
>2729	Statement	 
>2730	Statement	 
>2731	Statement	 
>2732	Statement	 
>2733	Statement	 
>2734	Statement	 
>2735	Statement	 
>2736	Statement	 
>2737	Statement	 
>2738	Statement	 
>2739	Statement	 
>2740	IdentifierDeclStatement	 
>2741	IdentifierDecl	url
>2742	Identifier	url
>2743	IdentifierDeclType	Url
>2744	IdentifierDeclStatement	 
>2745	IdentifierDecl	in
>2746	Identifier	in
>2747	IdentifierDeclType	DynamicObject
>2748	ExpressionStatement	 
>2749	AssignmentExpr	out [ \"listingUpdateId\" ] = \"0\"
>2750	PrimaryExpression	\"0\"
>2751	ArrayIndexing	out [ \"listingUpdateId\" ]
>2752	PrimaryExpression	\"listingUpdateId\"
>2753	Identifier	out
>2754	ExpressionStatement	 
>2755	AssignmentExpr	out [ \"url\" ] = serverUrl . c_str ( )
>2756	CallExpression	serverUrl . c_str ( )
>2757	ArgumentList	 
>2758	Callee	serverUrl . c_str
>2759	MemberAccess	serverUrl . c_str
>2760	Identifier	c_str
>2761	Identifier	serverUrl
>2762	ArrayIndexing	out [ \"url\" ]
>2763	PrimaryExpression	\"url\"
>2764	Identifier	out
>2765	IdentifierDeclStatement	 
>2766	IdentifierDecl	out
>2767	Identifier	out
>2768	IdentifierDeclType	DynamicObject
>2769	Condition	 
>2770	CallExpression	testNetAccess ( serverUrl )
>2771	ArgumentList	serverUrl
>2772	Argument	serverUrl
>2773	Identifier	serverUrl
>2774	Callee	testNetAccess
>2775	Identifier	testNetAccess
>2776	IdentifierDeclStatement	 
>2777	IdentifierDecl	pass = false
>2778	AssignmentExpr	pass = false
>2779	Identifier	false
>2780	Identifier	false
>2781	Identifier	pass
>2782	IdentifierDeclType	bool
>2783	IdentifierDeclStatement	 
>2784	IdentifierDecl	serverUrl
>2785	Identifier	serverUrl
>2786	IdentifierDeclType	string
>2787	ExpressionStatement	 
>2788	AssignmentExpr	msg [ \"error\" ] = false
>2789	Identifier	false
>2790	ArrayIndexing	msg [ \"error\" ]
>2791	PrimaryExpression	\"error\"
>2792	Identifier	msg
>2793	ExpressionStatement	 
>2794	AssignmentExpr	msg [ \"registerResponse\" ] = true
>2795	Identifier	true
>2796	ArrayIndexing	msg [ \"registerResponse\" ]
>2797	PrimaryExpression	\"registerResponse\"
>2798	Identifier	msg
>2799	IdentifierDeclStatement	 
>2800	IdentifierDecl	msg
>2801	Identifier	msg
>2802	IdentifierDeclType	DynamicObject
>2803	ExpressionStatement	 
>2804	Statement	 
>2805	Statement	 
>2806	Statement	 
>2807	Statement	 
>2808	Statement	 
>2809	Statement	 
>2810	Statement	 
>2811	Statement	 
>2812	Statement	 
>2813	Statement	 
>2814	Statement	 
>2848	FunctionDef	ListingUpdater 
>2849	ParameterList	Seller & seller
>2850	Parameter	 
>2851	Identifier	seller
>2852	ParameterType	Seller &
>2853	ReturnType	void
>2854	CompoundStatement	 
>2855	IfStatement	if ( mUpdateRequestPending )
>2856	CompoundStatement	 
>2857	ExpressionStatement	 
>2858	CallExpression	messageSelf ( msg )
>2859	ArgumentList	msg
>2860	Argument	msg
>2861	Identifier	msg
>2862	Callee	messageSelf
>2863	Identifier	messageSelf
>2864	ExpressionStatement	 
>2865	AssignmentExpr	msg [ \"updateRequest\" ] = true
>2866	Identifier	true
>2867	ArrayIndexing	msg [ \"updateRequest\" ]
>2868	PrimaryExpression	\"updateRequest\"
>2869	Identifier	msg
>2870	IdentifierDeclStatement	 
>2871	IdentifierDecl	msg
>2872	Identifier	msg
>2873	IdentifierDeclType	DynamicObject
>2874	ExpressionStatement	 
>2875	AssignmentExpr	mUpdateRequestPending = false
>2876	Identifier	false
>2877	Identifier	mUpdateRequestPending
>2878	Condition	 
>2879	Identifier	mUpdateRequestPending
>2880	ExpressionStatement	 
>2881	CallExpression	messageSelf ( msg )
>2882	ArgumentList	msg
>2883	Argument	msg
>2884	Identifier	msg
>2885	Callee	messageSelf
>2886	Identifier	messageSelf
>2887	IfStatement	if ( ! pass )
>2888	CompoundStatement	 
>2889	ExpressionStatement	 
>2890	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater
>2891	ArgumentList	BM_CUSTOMCATALOG_CAT
>2892	Argument	JsonWriter 
>2893	CallExpression	JsonWriter 
>2894	ArgumentList	 
>2895	Callee	JsonWriter 
>2896	MemberAccess	JsonWriter 
>2897	Identifier	c_str
>2898	CallExpression	JsonWriter 
>2899	ArgumentList	Exception 
>2900	Argument	Exception 
>2901	CallExpression	Exception 
>2902	ArgumentList	 
>2903	Callee	Exception 
>2904	Identifier	Exception 
>2905	Callee	JsonWriter 
>2906	Identifier	JsonWriter 
>2907	Argument	\"ListingUpdater
>2908	PrimaryExpression	\"ListingUpdater
>2909	Argument	BM_CUSTOMCATALOG_CAT
>2910	Identifier	BM_CUSTOMCATALOG_CAT
>2911	Callee	MO_CAT_ERROR
>2912	Identifier	MO_CAT_ERROR
>2913	ExpressionStatement	 
>2914	CallExpression	Exception 
>2915	ArgumentList	e
>2916	Argument	e
>2917	Identifier	e
>2918	Callee	Exception 
>2919	Identifier	Exception 
>2920	IdentifierDeclStatement	 
>2921	IdentifierDecl	e = new Exception ( \"Could not test public internet access and update server URL.\" , \"bitmunk.catalog.UpdateServerUrlError\" )
>2922	AssignmentExpr	e = new Exception ( \"Could not test public internet access and update server URL.\" , \"bitmunk.catalog.UpdateServerUrlError\" )
>2923	Expression	\"Could not test public internet access and update server URL.\" , \"bitmunk.catalog.UpdateServerUrlError\"
>2924	PrimaryExpression	\"bitmunk.catalog.UpdateServerUrlError\"
>2925	PrimaryExpression	\"Could not test public internet access and update server URL.\"
>2926	Identifier	e
>2927	Identifier	e
>2928	IdentifierDeclType	ExceptionRef
>2929	Condition	 
>2930	UnaryOp	! pass
>2931	Identifier	pass
>2932	UnaryOperator	!
>2933	IfStatement	if ( testNetAccess ( serverUrl ) )
>2934	CompoundStatement	 
>2935	IfStatement	if ( strcmp ( seller [ \"url\" ] -> getString ( ) , serverUrl . c_str ( ) ) == 0 )
>2936	ElseStatement	else
>2937	CompoundStatement	 
>2938	IfStatement	if ( m -> postSecureToBitmunk ( & url , & out , & in , userId ) )
>2939	CompoundStatement	 
>2940	ExpressionStatement	 
>2941	AssignmentExpr	pass = mCatalog -> setConfigValue ( userId , \"serverUrl\" , serverUrl . c_str ( ) )
>2942	CallExpression	mCatalog -> setConfigValue ( userId , \"serverUrl\" , serverUrl . c_str ( ) )
>2943	ArgumentList	userId
>2944	Argument	serverUrl . c_str ( )
>2945	CallExpression	serverUrl . c_str ( )
>2946	ArgumentList	 
>2947	Callee	serverUrl . c_str
>2948	MemberAccess	serverUrl . c_str
>2949	Identifier	c_str
>2950	Identifier	serverUrl
>2951	Argument	\"serverUrl\"
>2952	PrimaryExpression	\"serverUrl\"
>2953	Argument	userId
>2954	Identifier	userId
>2955	Callee	mCatalog -> setConfigValue
>2956	PtrMemberAccess	mCatalog -> setConfigValue
>2957	Identifier	setConfigValue
>2958	Identifier	mCatalog
>2959	Identifier	pass
>2960	Condition	 
>2961	CallExpression	m -> postSecureToBitmunk ( & url , & out , & in , userId )
>2962	ArgumentList	& url
>2963	Argument	userId
>2964	Identifier	userId
>2965	Argument	& in
>2966	UnaryOp	& in
>2967	Identifier	in
>2968	UnaryOperator	&
>2969	Argument	& out
>2970	UnaryOp	& out
>2971	Identifier	out
>2972	UnaryOperator	&
>2973	Argument	& url
>2974	UnaryOp	& url
>2975	Identifier	url
>2976	UnaryOperator	&
>2977	Callee	m -> postSecureToBitmunk
>2978	PtrMemberAccess	m -> postSecureToBitmunk
>2979	Identifier	postSecureToBitmunk
>2980	Identifier	m
>2981	IdentifierDeclStatement	 
>2982	IdentifierDecl	* m = mNode -> getMessenger ( )
>2983	AssignmentExpr	* m = mNode -> getMessenger ( )
>2984	CallExpression	mNode -> getMessenger ( )
>2985	ArgumentList	 
>2986	Callee	mNode -> getMessenger
>2987	PtrMemberAccess	mNode -> getMessenger
>2988	Identifier	getMessenger
>2989	Identifier	mNode
>2990	Identifier	m
>2991	Identifier	m
>2992	IdentifierDeclType	Messenger *
>2993	ExpressionStatement	 
>2994	Statement	 
>2995	Statement	 
>2996	Statement	 
>2997	Statement	 
>2998	Statement	 
>2999	Statement	 
>3000	Statement	 
>3001	Statement	 
>3002	Statement	 
>3003	Statement	 
>3004	Statement	 
>3005	Statement	 
>3006	Statement	 
>3007	Statement	 
>3008	Statement	 
>3009	Statement	 
>3010	Statement	 
>3011	Statement	 
>3012	Statement	 
>3013	IdentifierDeclStatement	 
>3014	IdentifierDecl	url
>3015	Identifier	url
>3016	IdentifierDeclType	Url
>3017	IdentifierDeclStatement	 
>3018	IdentifierDecl	in
>3019	Identifier	in
>3020	IdentifierDeclType	DynamicObject
>3021	ExpressionStatement	 
>3022	AssignmentExpr	out [ \"url\" ] = serverUrl . c_str ( )
>3023	CallExpression	serverUrl . c_str ( )
>3024	ArgumentList	 
>3025	Callee	serverUrl . c_str
>3026	MemberAccess	serverUrl . c_str
>3027	Identifier	c_str
>3028	Identifier	serverUrl
>3029	ArrayIndexing	out [ \"url\" ]
>3030	PrimaryExpression	\"url\"
>3031	Identifier	out
>3032	IdentifierDeclStatement	 
>3033	IdentifierDecl	out
>3034	Identifier	out
>3035	IdentifierDeclType	DynamicObject
>3036	ExpressionStatement	 
>3037	Statement	 
>3038	Statement	 
>3039	Statement	 
>3040	Statement	 
>3041	Statement	 
>3042	Statement	 
>3043	Statement	 
>3044	Statement	 
>3045	Statement	 
>3046	Statement	 
>3047	Statement	 
>3048	Statement	 
>3049	Statement	 
>3050	Statement	 
>3051	Statement	 
>3052	Statement	 
>3053	Statement	 
>3054	Statement	 
>3055	Statement	 
>3056	Statement	 
>3057	Statement	 
>3058	Statement	 
>3059	Statement	 
>3060	Statement	 
>3061	Statement	 
>3062	Statement	 
>3063	Statement	 
>3064	CompoundStatement	 
>3065	ExpressionStatement	 
>3066	Statement	 
>3067	Statement	 
>3068	Statement	 
>3069	Statement	 
>3070	Statement	 
>3071	Statement	 
>3072	Statement	 
>3073	Statement	 
>3074	Statement	 
>3075	Statement	 
>3076	Statement	 
>3077	Statement	 
>3078	Statement	 
>3079	Statement	 
>3080	Statement	 
>3081	Statement	 
>3082	Statement	 
>3083	ExpressionStatement	 
>3084	AssignmentExpr	pass = true
>3085	Identifier	true
>3086	Identifier	pass
>3087	Condition	 
>3088	EqualityExpression	strcmp ( seller [ \"url\" ] -> getString ( ) , serverUrl . c_str ( ) ) == 0
>3089	PrimaryExpression	0
>3090	CallExpression	strcmp ( seller [ \"url\" ] -> getString ( ) , serverUrl . c_str ( ) )
>3091	ArgumentList	seller [ \"url\" ] -> getString ( )
>3092	Argument	serverUrl . c_str ( )
>3093	CallExpression	serverUrl . c_str ( )
>3094	ArgumentList	 
>3095	Callee	serverUrl . c_str
>3096	MemberAccess	serverUrl . c_str
>3097	Identifier	c_str
>3098	Identifier	serverUrl
>3099	Argument	seller [ \"url\" ] -> getString ( )
>3100	CallExpression	seller [ \"url\" ] -> getString ( )
>3101	ArgumentList	 
>3102	Callee	seller [ \"url\" ] -> getString
>3103	PtrMemberAccess	seller [ \"url\" ] -> getString
>3104	Identifier	getString
>3105	ArrayIndexing	seller [ \"url\" ]
>3106	PrimaryExpression	\"url\"
>3107	Identifier	seller
>3108	Callee	strcmp
>3109	Identifier	strcmp
>3110	Condition	 
>3111	CallExpression	testNetAccess ( serverUrl )
>3112	ArgumentList	serverUrl
>3113	Argument	serverUrl
>3114	Identifier	serverUrl
>3115	Callee	testNetAccess
>3116	Identifier	testNetAccess
>3117	IdentifierDeclStatement	 
>3118	IdentifierDecl	pass = false
>3119	AssignmentExpr	pass = false
>3120	Identifier	false
>3121	Identifier	false
>3122	Identifier	pass
>3123	IdentifierDeclType	bool
>3124	IdentifierDeclStatement	 
>3125	IdentifierDecl	serverUrl
>3126	Identifier	serverUrl
>3127	IdentifierDeclType	string
>3128	ExpressionStatement	 
>3129	AssignmentExpr	msg [ \"testNetAccessResponse\" ] = true
>3130	Identifier	true
>3131	ArrayIndexing	msg [ \"testNetAccessResponse\" ]
>3132	PrimaryExpression	\"testNetAccessResponse\"
>3133	Identifier	msg
>3134	IdentifierDeclStatement	 
>3135	IdentifierDecl	msg
>3136	Identifier	msg
>3137	IdentifierDeclType	DynamicObject
>3138	ExpressionStatement	 
>3139	Statement	 
>3140	Statement	 
>3141	Statement	 
>3142	Statement	 
>3143	Statement	 
>3144	Statement	 
>3145	Statement	 
>3146	Statement	 
>3147	Statement	 
>3148	IdentifierDeclStatement	 
>3149	IdentifierDecl	userId = getUserId ( )
>3150	AssignmentExpr	userId = getUserId ( )
>3151	CallExpression	getUserId ( )
>3152	ArgumentList	 
>3153	Callee	getUserId
>3154	Identifier	getUserId
>3155	Identifier	userId
>3156	Identifier	userId
>3157	IdentifierDeclType	UserId
>3198	FunctionDef	ListingUpdater 
>3199	ParameterList	SellerListingUpdate & update
>3200	Parameter	 
>3201	Identifier	update
>3202	ParameterType	SellerListingUpdate &
>3203	ReturnType	void
>3204	CompoundStatement	 
>3205	IfStatement	if ( mTestNetAccessPending )
>3206	CompoundStatement	 
>3207	ExpressionStatement	 
>3208	CallExpression	messageSelf ( msg )
>3209	ArgumentList	msg
>3210	Argument	msg
>3211	Identifier	msg
>3212	Callee	messageSelf
>3213	Identifier	messageSelf
>3214	ExpressionStatement	 
>3215	AssignmentExpr	msg [ \"testNetAccess\" ] = true
>3216	Identifier	true
>3217	ArrayIndexing	msg [ \"testNetAccess\" ]
>3218	PrimaryExpression	\"testNetAccess\"
>3219	Identifier	msg
>3220	IdentifierDeclStatement	 
>3221	IdentifierDecl	msg
>3222	Identifier	msg
>3223	IdentifierDeclType	DynamicObject
>3224	ExpressionStatement	 
>3225	AssignmentExpr	mTestNetAccessPending = false
>3226	Identifier	false
>3227	Identifier	mTestNetAccessPending
>3228	Condition	 
>3229	Identifier	mTestNetAccessPending
>3230	ExpressionStatement	 
>3231	CallExpression	messageSelf ( msg )
>3232	ArgumentList	msg
>3233	Argument	msg
>3234	Identifier	msg
>3235	Callee	messageSelf
>3236	Identifier	messageSelf
>3237	IfStatement	if ( m -> postSecureToBitmunk ( & url , & update , & result , getUserId ( ) ) )
>3238	ElseStatement	else
>3239	CompoundStatement	 
>3240	IfStatement	if ( ex -> isType ( \"bitmunk.mastercatalog.UpdateIdNotCurrent\" ) )
>3241	ElseStatement	else
>3242	CompoundStatement	 
>3243	IfStatement	if ( ex -> hasType ( \"bitmunk.database.NotFound\" ) || ex -> hasType ( \"bitmunk.database.Catalog.InvalidServerToken\" ) )
>3244	ElseStatement	else
>3245	CompoundStatement	 
>3246	ExpressionStatement	 
>3247	CallExpression	MO_CAT_ERROR ( BM_CUSTOMCATALOG_CAT , \"ListingUpdater
>3248	ArgumentList	BM_CUSTOMCATALOG_CAT
>3249	Argument	JsonWriter 
>3250	CallExpression	JsonWriter 
>3251	ArgumentList	 
>3252	Callee	JsonWriter 
>3253	MemberAccess	JsonWriter 
>3254	Identifier	c_str
>3255	CallExpression	JsonWriter 
>3256	ArgumentList	d
>3257	Argument	d
>3258	Identifier	d
>3259	Callee	JsonWriter 
>3260	Identifier	JsonWriter 
>3261	Argument	\"ListingUpdater
>3262	PrimaryExpression	\"ListingUpdater
>3263	Argument	BM_CUSTOMCATALOG_CAT
>3264	Identifier	BM_CUSTOMCATALOG_CAT
>3265	Callee	MO_CAT_ERROR
>3266	Identifier	MO_CAT_ERROR
>3267	CompoundStatement	 
>3268	ExpressionStatement	 
>3269	AssignmentExpr	msg [ \"reset\" ] = true
>3270	Identifier	true
>3271	ArrayIndexing	msg [ \"reset\" ]
>3272	PrimaryExpression	\"reset\"
>3273	Identifier	msg
>3274	ExpressionStatement	 
>3275	Statement	 
>3276	Statement	 
>3277	Statement	 
>3278	Statement	 
>3279	Statement	 
>3280	Statement	 
>3281	Statement	 
>3282	Statement	 
>3283	Statement	 
>3284	Statement	 
>3285	Statement	 
>3286	Statement	 
>3287	Statement	 
>3288	Statement	 
>3289	Statement	 
>3290	Statement	 
>3291	Statement	 
>3292	Statement	 
>3293	Statement	 
>3294	Statement	 
>3295	Statement	 
>3296	Statement	 
>3297	Statement	 
>3298	Statement	 
>3299	Condition	 
>3300	OrExpression	ex -> hasType ( \"bitmunk.database.NotFound\" ) || ex -> hasType ( \"bitmunk.database.Catalog.InvalidServerToken\" )
>3301	CallExpression	ex -> hasType ( \"bitmunk.database.Catalog.InvalidServerToken\" )
>3302	ArgumentList	\"bitmunk.database.Catalog.InvalidServerToken\"
>3303	Argument	\"bitmunk.database.Catalog.InvalidServerToken\"
>3304	PrimaryExpression	\"bitmunk.database.Catalog.InvalidServerToken\"
>3305	Callee	ex -> hasType
>3306	PtrMemberAccess	ex -> hasType
>3307	Identifier	hasType
>3308	Identifier	ex
>3309	CallExpression	ex -> hasType ( \"bitmunk.database.NotFound\" )
>3310	ArgumentList	\"bitmunk.database.NotFound\"
>3311	Argument	\"bitmunk.database.NotFound\"
>3312	PrimaryExpression	\"bitmunk.database.NotFound\"
>3313	Callee	ex -> hasType
>3314	PtrMemberAccess	ex -> hasType
>3315	Identifier	hasType
>3316	Identifier	ex
>3317	ExpressionStatement	 
>3318	AssignmentExpr	msg [ \"exception\" ] = d
>3319	Identifier	d
>3320	ArrayIndexing	msg [ \"exception\" ]
>3321	PrimaryExpression	\"exception\"
>3322	Identifier	msg
>3323	ExpressionStatement	 
>3324	AssignmentExpr	msg [ \"error\" ] = true
>3325	Identifier	true
>3326	ArrayIndexing	msg [ \"error\" ]
>3327	PrimaryExpression	\"error\"
>3328	Identifier	msg
>3329	IdentifierDeclStatement	 
>3330	IdentifierDecl	d = Exception 
>3331	AssignmentExpr	d = Exception 
>3332	CallExpression	Exception 
>3333	ArgumentList	 
>3334	Callee	Exception 
>3335	Identifier	Exception 
>3336	Identifier	d
>3337	Identifier	d
>3338	IdentifierDeclType	DynamicObject
>3339	ExpressionStatement	 
>3340	CallExpression	Exception 
>3341	ArgumentList	e
>3342	Argument	e
>3343	Identifier	e
>3344	Callee	Exception 
>3345	Identifier	Exception 
>3346	IdentifierDeclStatement	 
>3347	IdentifierDecl	e = new Exception ( \"Could not send seller listing update.\" , \"bitmunk.catalog.SellerListingUpdateError\" )
>3348	AssignmentExpr	e = new Exception ( \"Could not send seller listing update.\" , \"bitmunk.catalog.SellerListingUpdateError\" )
>3349	Expression	\"Could not send seller listing update.\" , \"bitmunk.catalog.SellerListingUpdateError\"
>3350	PrimaryExpression	\"bitmunk.catalog.SellerListingUpdateError\"
>3351	PrimaryExpression	\"Could not send seller listing update.\"
>3352	Identifier	e
>3353	Identifier	e
>3354	IdentifierDeclType	ExceptionRef
>3355	CompoundStatement	 
>3356	ExpressionStatement	 
>3357	AssignmentExpr	msg [ \"updateId\" ] = ex -> getDetails ( ) [ \"currentUpdateId\" ] -> getString ( )
>3358	CallExpression	ex -> getDetails ( ) [ \"currentUpdateId\" ] -> getString ( )
>3359	ArgumentList	 
>3360	Callee	ex -> getDetails ( ) [ \"currentUpdateId\" ] -> getString
>3361	PtrMemberAccess	ex -> getDetails ( ) [ \"currentUpdateId\" ] -> getString
>3362	Identifier	getString
>3363	ArrayIndexing	ex -> getDetails ( ) [ \"currentUpdateId\" ]
>3364	PrimaryExpression	\"currentUpdateId\"
>3365	CallExpression	ex -> getDetails ( )
>3366	ArgumentList	 
>3367	Callee	ex -> getDetails
>3368	PtrMemberAccess	ex -> getDetails
>3369	Identifier	getDetails
>3370	Identifier	ex
>3371	ArrayIndexing	msg [ \"updateId\" ]
>3372	PrimaryExpression	\"updateId\"
>3373	Identifier	msg
>3374	ExpressionStatement	 
>3375	AssignmentExpr	msg [ \"updateIdNotCurrent\" ] = true
>3376	Identifier	true
>3377	ArrayIndexing	msg [ \"updateIdNotCurrent\" ]
>3378	PrimaryExpression	\"updateIdNotCurrent\"
>3379	Identifier	msg
>3380	Condition	 
>3381	CallExpression	ex -> isType ( \"bitmunk.mastercatalog.UpdateIdNotCurrent\" )
>3382	ArgumentList	\"bitmunk.mastercatalog.UpdateIdNotCurrent\"
>3383	Argument	\"bitmunk.mastercatalog.UpdateIdNotCurrent\"
>3384	PrimaryExpression	\"bitmunk.mastercatalog.UpdateIdNotCurrent\"
>3385	Callee	ex -> isType
>3386	PtrMemberAccess	ex -> isType
>3387	Identifier	isType
>3388	Identifier	ex
>3389	IdentifierDeclStatement	 
>3390	IdentifierDecl	ex = Exception 
>3391	AssignmentExpr	ex = Exception 
>3392	CallExpression	Exception 
>3393	ArgumentList	 
>3394	Callee	Exception 
>3395	Identifier	Exception 
>3396	Identifier	ex
>3397	Identifier	ex
>3398	IdentifierDeclType	ExceptionRef
>3399	CompoundStatement	 
>3400	IfStatement	if ( update [ \"payeeSchemes\" ] [ \"updates\" ] -> length ( ) > 0 || update [ \"payeeSchemes\" ] [ \"removals\" ] -> length ( ) > \
>3401	CompoundStatement	 
>3402	ExpressionStatement	 
>3403	AssignmentExpr	msg [ \"scheduleUpdateRequest\" ] = true
>3404	Identifier	true
>3405	ArrayIndexing	msg [ \"scheduleUpdateRequest\" ]
>3406	PrimaryExpression	\"scheduleUpdateRequest\"
>3407	Identifier	msg
>3408	Condition	 
>3409	OrExpression	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length ( ) > 0 || update [ \"payeeSchemes\" ] [ \"removals\" ] \
>3410	OrExpression	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length ( ) > 0 || update [ \"listings\" ] [ \"updates\" ] -> \
>3411	OrExpression	update [ \"listings\" ] [ \"updates\" ] -> length ( ) > 0 || update [ \"listings\" ] [ \"removals\" ] -> length ( ) > \
>3412	RelationalExpression	update [ \"listings\" ] [ \"removals\" ] -> length ( ) > 0
>3413	PrimaryExpression	0
>3414	CallExpression	update [ \"listings\" ] [ \"removals\" ] -> length ( )
>3415	ArgumentList	 
>3416	Callee	update [ \"listings\" ] [ \"removals\" ] -> length
>3417	PtrMemberAccess	update [ \"listings\" ] [ \"removals\" ] -> length
>3418	Identifier	length
>3419	ArrayIndexing	update [ \"listings\" ] [ \"removals\" ]
>3420	PrimaryExpression	\"removals\"
>3421	ArrayIndexing	update [ \"listings\" ]
>3422	PrimaryExpression	\"listings\"
>3423	Identifier	update
>3424	RelationalExpression	update [ \"listings\" ] [ \"updates\" ] -> length ( ) > 0
>3425	PrimaryExpression	0
>3426	CallExpression	update [ \"listings\" ] [ \"updates\" ] -> length ( )
>3427	ArgumentList	 
>3428	Callee	update [ \"listings\" ] [ \"updates\" ] -> length
>3429	PtrMemberAccess	update [ \"listings\" ] [ \"updates\" ] -> length
>3430	Identifier	length
>3431	ArrayIndexing	update [ \"listings\" ] [ \"updates\" ]
>3432	PrimaryExpression	\"updates\"
>3433	ArrayIndexing	update [ \"listings\" ]
>3434	PrimaryExpression	\"listings\"
>3435	Identifier	update
>3436	RelationalExpression	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length ( ) > 0
>3437	PrimaryExpression	0
>3438	CallExpression	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length ( )
>3439	ArgumentList	 
>3440	Callee	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length
>3441	PtrMemberAccess	update [ \"payeeSchemes\" ] [ \"removals\" ] -> length
>3442	Identifier	length
>3443	ArrayIndexing	update [ \"payeeSchemes\" ] [ \"removals\" ]
>3444	PrimaryExpression	\"removals\"
>3445	ArrayIndexing	update [ \"payeeSchemes\" ]
>3446	PrimaryExpression	\"payeeSchemes\"
>3447	Identifier	update
>3448	RelationalExpression	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length ( ) > 0
>3449	PrimaryExpression	0
>3450	CallExpression	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length ( )
>3451	ArgumentList	 
>3452	Callee	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length
>3453	PtrMemberAccess	update [ \"payeeSchemes\" ] [ \"updates\" ] -> length
>3454	Identifier	length
>3455	ArrayIndexing	update [ \"payeeSchemes\" ] [ \"updates\" ]
>3456	PrimaryExpression	\"updates\"
>3457	ArrayIndexing	update [ \"payeeSchemes\" ]
>3458	PrimaryExpression	\"payeeSchemes\"
>3459	Identifier	update
>3460	ExpressionStatement	 
>3461	AssignmentExpr	msg [ \"updateId\" ] = result [ \"updateId\" ] -> getString ( )
>3462	CallExpression	result [ \"updateId\" ] -> getString ( )
>3463	ArgumentList	 
>3464	Callee	result [ \"updateId\" ] -> getString
>3465	PtrMemberAccess	result [ \"updateId\" ] -> getString
>3466	Identifier	getString
>3467	ArrayIndexing	result [ \"updateId\" ]
>3468	PrimaryExpression	\"updateId\"
>3469	Identifier	result
>3470	ArrayIndexing	msg [ \"updateId\" ]
>3471	PrimaryExpression	\"updateId\"
>3472	Identifier	msg
>3473	ExpressionStatement	 
>3474	AssignmentExpr	msg [ \"updateResult\" ] = result
>3475	Identifier	result
>3476	ArrayIndexing	msg [ \"updateResult\" ]
>3477	PrimaryExpression	\"updateResult\"
>3478	Identifier	msg
>3479	ExpressionStatement	 
>3480	AssignmentExpr	msg [ \"update\" ] = update
>3481	Identifier	update
>3482	ArrayIndexing	msg [ \"update\" ]
>3483	PrimaryExpression	\"update\"
>3484	Identifier	msg
>3485	Condition	 
>3486	CallExpression	m -> postSecureToBitmunk ( & url , & update , & result , getUserId ( ) )
>3487	ArgumentList	& url
>3488	Argument	getUserId ( )
>3489	CallExpression	getUserId ( )
>3490	ArgumentList	 
>3491	Callee	getUserId
>3492	Identifier	getUserId
>3493	Argument	& result
>3494	UnaryOp	& result
>3495	Identifier	result
>3496	UnaryOperator	&
>3497	Argument	& update
>3498	UnaryOp	& update
>3499	Identifier	update
>3500	UnaryOperator	&
>3501	Argument	& url
>3502	UnaryOp	& url
>3503	Identifier	url
>3504	UnaryOperator	&
>3505	Callee	m -> postSecureToBitmunk
>3506	PtrMemberAccess	m -> postSecureToBitmunk
>3507	Identifier	postSecureToBitmunk
>3508	Identifier	m
>3509	IdentifierDeclStatement	 
>3510	IdentifierDecl	* m = mNode -> getMessenger ( )
>3511	AssignmentExpr	* m = mNode -> getMessenger ( )
>3512	CallExpression	mNode -> getMessenger ( )
>3513	ArgumentList	 
>3514	Callee	mNode -> getMessenger
>3515	PtrMemberAccess	mNode -> getMessenger
>3516	Identifier	getMessenger
>3517	Identifier	mNode
>3518	Identifier	m
>3519	Identifier	m
>3520	IdentifierDeclType	Messenger *
>3521	IdentifierDeclStatement	 
>3522	IdentifierDecl	url ( \"/api/3.0/catalog/listings\" )
>3523	PrimaryExpression	\"/api/3.0/catalog/listings\"
>3524	Identifier	url
>3525	IdentifierDeclType	Url
>3526	IdentifierDeclStatement	 
>3527	IdentifierDecl	result
>3528	Identifier	result
>3529	IdentifierDeclType	DynamicObject
>3530	ExpressionStatement	 
>3531	AssignmentExpr	msg [ \"error\" ] = false
>3532	Identifier	false
>3533	ArrayIndexing	msg [ \"error\" ]
>3534	PrimaryExpression	\"error\"
>3535	Identifier	msg
>3536	ExpressionStatement	 
>3537	AssignmentExpr	msg [ \"scheduleUpdateRequest\" ] = false
>3538	Identifier	false
>3539	ArrayIndexing	msg [ \"scheduleUpdateRequest\" ]
>3540	PrimaryExpression	\"scheduleUpdateRequest\"
>3541	Identifier	msg
>3542	ExpressionStatement	 
>3543	AssignmentExpr	msg [ \"updateResponse\" ] = true
>3544	Identifier	true
>3545	ArrayIndexing	msg [ \"updateResponse\" ]
>3546	PrimaryExpression	\"updateResponse\"
>3547	Identifier	msg
>3548	IdentifierDeclStatement	 
>3549	IdentifierDecl	msg
>3550	Identifier	msg
>3551	IdentifierDeclType	DynamicObject
>3552	ExpressionStatement	 
>3553	Statement	 
>3554	Statement	 
>3555	Statement	 
>3556	Statement	 
>3557	Statement	 
>3558	Statement	 
>3559	Statement	 
>3560	Statement	 
>3561	Statement	 
>3562	Statement	 
>3563	Statement	 
>3564	Statement	 
>3565	Statement	 
>3566	Statement	 
>3567	Statement	 
>3568	Statement	 
>3569	Statement	 
>3570	Statement	 
>3571	Statement	 
>3572	Statement	 
>3573	Statement	 
>3574	Statement	 
>3575	Statement	 
<3=11,4
<4=8,5
<5=7,6
<8=10,9
<17=19,18
<23=26,25,24
<26=322,321,320,319,318,317,316,315,314,313,312,311,293,275,261,256,251,244,40,39,38,37,36,35,34,33,32,31,30,29,28,27
<40=240,41
<41=227,218,42
<42=207,43
<43=195,49,44
<44=45
<45=47,46
<47=48
<49=186,162,50
<50=51
<51=153,145,52
<52=53
<53=136,128,54
<54=55
<55=119,95,56
<56=57
<57=86,74,58
<58=59
<59=65,60
<60=61
<61=62
<62=64,63
<65=66
<66=70,67
<67=68
<68=69
<70=71
<71=73,72
<74=82,75
<75=76
<76=78,77
<78=79
<79=81,80
<82=83
<83=85,84
<86=87
<87=91,88
<88=89
<89=90
<91=92
<92=94,93
<95=96
<96=115,103,97
<97=98
<98=99
<99=100
<100=102,101
<103=111,104
<104=105
<105=109,106
<106=107
<107=108
<109=110
<111=112
<112=114,113
<115=116
<116=118,117
<119=120
<120=124,121
<121=122
<122=123
<124=125
<125=127,126
<128=129
<129=130
<130=134,131
<131=132
<132=133
<134=135
<136=137
<137=141,138
<138=139
<139=140
<141=142
<142=144,143
<145=146
<146=147
<147=151,148
<148=149
<149=150
<151=152
<153=154
<154=158,155
<155=156
<156=157
<158=159
<159=161,160
<162=163
<163=182,170,164
<164=165
<165=166
<166=167
<167=169,168
<170=178,171
<171=172
<172=176,173
<173=174
<174=175
<176=177
<178=179
<179=181,180
<182=183
<183=185,184
<186=187
<187=191,188
<188=189
<189=190
<191=192
<192=194,193
<195=196
<196=206,205,197
<197=204,198
<198=200,199
<200=201
<201=203,202
<207=208
<208=215,209
<209=211,210
<211=212
<212=214,213
<215=217,216
<218=219
<219=226,220
<220=222,221
<222=223
<223=225,224
<227=228
<228=239,229
<229=237,230
<230=235,231
<231=232
<232=234,233
<235=236
<237=238
<240=241
<241=243,242
<244=245
<245=250,249,246
<246=248,247
<251=252
<252=255,254,253
<256=257
<257=260,259,258
<261=262
<262=274,273,263
<263=272,264
<264=271,270,269,268,267,266,265
<275=289,283,276
<276=277
<277=281,278
<278=279
<279=280
<281=282
<283=284
<284=286,285
<286=288,287
<289=290
<290=292,291
<293=307,301,294
<294=295
<295=299,296
<296=297
<297=298
<299=300
<301=302
<302=304,303
<304=306,305
<307=308
<308=310,309
<347=353,352,348
<348=349
<349=351,350
<353=818,814,810,354
<354=795,767,355
<355=356
<356=751,677,357
<357=358
<358=671,556,359
<359=360
<360=552,545,538,534,446,391,361
<361=387,362
<362=363
<363=364
<364=385,365
<365=383,381,366
<366=367
<367=369,368
<369=370
<370=372,371
<372=379,373
<373=374
<374=375
<375=377,376
<377=378
<379=380
<381=382
<383=384
<385=386
<387=388
<388=390,389
<391=440,392
<392=436,423,419,403,393
<393=399,394
<394=395
<395=396
<396=398,397
<399=400
<400=402,401
<403=404
<404=418,405
<405=411,406
<406=409,407
<407=408
<409=410
<411=412
<412=414,413
<414=416,415
<416=417
<419=420
<420=422,421
<423=424
<424=435,434,425
<425=433,426
<426=432,427
<427=429,428
<429=431,430
<436=437
<437=439,438
<440=441
<441=445,442
<442=444,443
<446=523,447
<447=448
<448=517,503,449
<449=450
<450=499,485,451
<451=452
<452=481,470,466,460,453
<453=454
<454=458,455
<455=456
<456=457
<458=459
<460=461
<461=463,462
<463=465,464
<466=467
<467=469,468
<470=471
<471=480,472
<472=476,473
<473=474
<474=475
<476=477
<477=479,478
<481=482
<482=484,483
<485=486
<486=487
<487=498,488
<488=494,489
<489=492,490
<490=491
<492=493
<494=495
<495=497,496
<499=500
<500=502,501
<503=504
<504=505
<505=516,506
<506=512,507
<507=510,508
<508=509
<510=511
<512=513
<513=515,514
<517=518
<518=520,519
<520=522,521
<523=524
<524=530,525
<525=528,526
<526=527
<528=529
<530=531
<531=533,532
<534=535
<535=537,536
<538=539
<539=544,543,540
<540=542,541
<545=546
<546=551,550,547
<547=549,548
<552=553
<553=555,554
<556=667,557
<557=654,629,558
<558=559
<559=625,612,608,560
<560=592,567,561
<561=562
<562=563
<563=564
<564=566,565
<567=568
<568=569
<569=590,570
<570=588,586,571
<571=572
<572=574,573
<574=575
<575=577,576
<577=584,578
<578=579
<579=580
<580=582,581
<582=583
<584=585
<586=587
<588=589
<590=591
<592=593
<593=607,594
<594=600,595
<595=598,596
<596=597
<598=599
<600=601
<601=603,602
<603=605,604
<605=606
<608=609
<609=611,610
<612=613
<613=624,623,614
<614=622,615
<615=621,616
<616=618,617
<618=620,619
<625=626
<626=628,627
<629=630
<630=631
<631=652,632
<632=650,648,633
<633=634
<634=636,635
<636=637
<637=639,638
<639=646,640
<640=641
<641=642
<642=644,643
<644=645
<646=647
<648=649
<650=651
<652=653
<654=655
<655=666,656
<656=662,657
<657=660,658
<658=659
<660=661
<662=663
<663=665,664
<667=668
<668=670,669
<671=672
<672=676,673
<673=675,674
<677=747,741,730,726,678
<678=710,685,679
<679=680
<680=681
<681=682
<682=684,683
<685=686
<686=687
<687=708,688
<688=706,704,689
<689=690
<690=692,691
<692=693
<693=695,694
<695=702,696
<696=697
<697=698
<698=700,699
<700=701
<702=703
<704=705
<706=707
<708=709
<710=711
<711=725,712
<712=718,713
<713=716,714
<714=715
<716=717
<718=719
<719=721,720
<721=723,722
<723=724
<726=727
<727=729,728
<730=731
<731=740,739,732
<732=738,733
<733=737,734
<734=736,735
<741=742
<742=746,743
<743=745,744
<747=748
<748=750,749
<751=752
<752=766,753
<753=764,754
<754=755
<755=756
<756=762,757
<757=758
<758=759
<759=761,760
<762=763
<764=765
<767=794,793,792,791,790,789,788,787,786,785,784,783,782,781,780,779,778,777,776,775,774,773,772,771,770,769,768
<795=796
<796=809,797
<797=805,798
<798=803,801,799
<799=800
<801=802
<803=804
<805=806
<806=808,807
<810=811
<811=813,812
<814=815
<815=817,816
<818=819
<819=827,826,820
<820=825,821
<821=823,822
<823=824
<871=877,876,872
<872=873
<873=875,874
<877=889,885,878
<878=879
<879=881,880
<881=882
<882=884,883
<885=886
<886=888,887
<889=1127,965,890
<890=891
<891=956,892
<892=950,893
<893=938,920,894
<894=895
<895=896
<896=897
<897=918,898
<898=916,914,899
<899=900
<900=902,901
<902=903
<903=905,904
<905=912,906
<906=907
<907=908
<908=910,909
<910=911
<912=913
<914=915
<916=917
<918=919
<920=934,928,921
<921=922
<922=926,923
<923=924
<924=925
<926=927
<928=929
<929=931,930
<931=933,932
<934=935
<935=937,936
<938=939
<939=946,940
<940=941
<941=942
<942=944,943
<944=945
<946=947
<947=949,948
<950=951
<951=955,952
<952=954,953
<956=957
<957=959,958
<959=960
<960=962,961
<962=964,963
<965=966
<966=1121,1092,967
<967=968
<968=1083,1074,1053,1042,969
<969=1024,999,970
<970=971
<971=990,972
<972=986,980,973
<973=974
<974=978,975
<975=976
<976=977
<978=979
<980=981
<981=983,982
<983=985,984
<986=987
<987=989,988
<990=991
<991=993,992
<993=994
<994=996,995
<996=998,997
<999=1000
<1000=1001
<1001=1022,1002
<1002=1020,1018,1003
<1003=1004
<1004=1006,1005
<1006=1007
<1007=1009,1008
<1009=1016,1010
<1010=1011
<1011=1012
<1012=1014,1013
<1014=1015
<1016=1017
<1018=1019
<1020=1021
<1022=1023
<1024=1025
<1025=1041,1026
<1026=1037,1027
<1027=1032,1030,1028
<1028=1029
<1030=1031
<1032=1033
<1033=1035,1034
<1035=1036
<1037=1038
<1038=1040,1039
<1042=1043
<1043=1052,1044
<1044=1046,1045
<1046=1047
<1047=1049,1048
<1049=1051,1050
<1053=1054
<1054=1072,1055
<1055=1070,1068,1056
<1056=1057
<1057=1059,1058
<1059=1060
<1060=1062,1061
<1062=1066,1063
<1063=1064
<1064=1065
<1066=1067
<1068=1069
<1070=1071
<1072=1073
<1074=1075
<1075=1082,1081,1076
<1076=1080,1077
<1077=1079,1078
<1083=1084
<1084=1091,1090,1085
<1085=1089,1086
<1086=1088,1087
<1092=1110,1106,1100,1093
<1093=1094
<1094=1098,1095
<1095=1096
<1096=1097
<1098=1099
<1100=1101
<1101=1103,1102
<1103=1105,1104
<1106=1107
<1107=1109,1108
<1110=1111
<1111=1120,1112
<1112=1114,1113
<1114=1115
<1115=1117,1116
<1117=1119,1118
<1121=1122
<1122=1126,1123
<1123=1125,1124
<1127=1128
<1128=1137,1129
<1129=1131,1130
<1131=1132
<1132=1134,1133
<1134=1136,1135
<1170=1176,1175,1171
<1171=1172
<1172=1174,1173
<1176=1188,1184,1177
<1177=1178
<1178=1180,1179
<1180=1181
<1181=1183,1182
<1184=1185
<1185=1187,1186
<1188=1355,1236,1189
<1189=1190
<1190=1232,1226,1215,1205,1191
<1191=1192
<1192=1196,1193
<1193=1194
<1194=1195
<1196=1197
<1197=1199,1198
<1199=1201,1200
<1201=1202
<1202=1204,1203
<1205=1206
<1206=1210,1207
<1207=1209,1208
<1210=1212,1211
<1212=1214,1213
<1215=1216
<1216=1221,1217
<1217=1219,1218
<1219=1220
<1221=1223,1222
<1223=1225,1224
<1226=1227
<1227=1229,1228
<1229=1231,1230
<1232=1233
<1233=1235,1234
<1236=1351,1343,1335,1321,1237
<1237=1305,1264,1238
<1238=1239
<1239=1240
<1240=1241
<1241=1262,1242
<1242=1260,1258,1243
<1243=1244
<1244=1246,1245
<1246=1247
<1247=1249,1248
<1249=1256,1250
<1250=1251
<1251=1252
<1252=1254,1253
<1254=1255
<1256=1257
<1258=1259
<1260=1261
<1262=1263
<1264=1301,1295,1288,1287,1286,1285,1284,1283,1282,1281,1280,1279,1278,1277,1276,1275,1274,1273,1272,1271,1270,1269,1268,1267,1266,1265
<1288=1289
<1289=1293,1290
<1290=1291
<1291=1292
<1293=1294
<1295=1296
<1296=1298,1297
<1298=1300,1299
<1301=1302
<1302=1304,1303
<1305=1306
<1306=1317,1307
<1307=1312,1310,1308
<1308=1309
<1310=1311
<1312=1313
<1313=1315,1314
<1315=1316
<1317=1318
<1318=1320,1319
<1321=1322
<1322=1334,1333,1323
<1323=1332,1324
<1324=1326,1325
<1326=1327
<1327=1329,1328
<1329=1331,1330
<1335=1336
<1336=1340,1337
<1337=1339,1338
<1340=1342,1341
<1343=1344
<1344=1348,1345
<1345=1347,1346
<1348=1350,1349
<1351=1352
<1352=1354,1353
<1355=1356
<1356=1365,1357
<1357=1359,1358
<1359=1360
<1360=1362,1361
<1362=1364,1363
<1397=1403,1402,1398
<1398=1399
<1399=1401,1400
<1403=1404
<1404=1539,1405
<1405=1529,1525,1521,1406
<1406=1506,1478,1407
<1407=1408
<1408=1474,1461,1457,1409
<1409=1441,1416,1410
<1410=1411
<1411=1412
<1412=1413
<1413=1415,1414
<1416=1417
<1417=1418
<1418=1439,1419
<1419=1437,1435,1420
<1420=1421
<1421=1423,1422
<1423=1424
<1424=1426,1425
<1426=1433,1427
<1427=1428
<1428=1429
<1429=1431,1430
<1431=1432
<1433=1434
<1435=1436
<1437=1438
<1439=1440
<1441=1442
<1442=1456,1443
<1443=1449,1444
<1444=1447,1445
<1445=1446
<1447=1448
<1449=1450
<1450=1452,1451
<1452=1454,1453
<1454=1455
<1457=1458
<1458=1460,1459
<1461=1462
<1462=1473,1472,1463
<1463=1471,1464
<1464=1470,1465
<1465=1467,1466
<1467=1469,1468
<1474=1475
<1475=1477,1476
<1478=1505,1504,1503,1502,1501,1500,1499,1498,1497,1496,1495,1494,1493,1492,1491,1490,1489,1488,1487,1486,1485,1484,1483,1482,1481,1480,1479
<1506=1507
<1507=1520,1508
<1508=1516,1509
<1509=1514,1512,1510
<1510=1511
<1512=1513
<1514=1515
<1516=1517
<1517=1519,1518
<1521=1522
<1522=1524,1523
<1525=1526
<1526=1528,1527
<1529=1530
<1530=1538,1537,1531
<1531=1536,1532
<1532=1534,1533
<1534=1535
<1539=1540
<1540=1544,1541
<1541=1543,1542
<1571=1583,1582,1572
<1572=1579,1576,1573
<1573=1575,1574
<1576=1578,1577
<1579=1581,1580
<1583=1841,1832,1820,1758,1616,1586,1584
<1584=1585
<1586=1612,1587
<1587=1588
<1588=1589
<1589=1610,1590
<1590=1608,1606,1591
<1591=1592
<1592=1594,1593
<1594=1595
<1595=1597,1596
<1597=1604,1598
<1598=1599
<1599=1600
<1600=1602,1601
<1602=1603
<1604=1605
<1606=1607
<1608=1609
<1610=1611
<1612=1613
<1613=1615,1614
<1616=1756,1617
<1617=1742,1732,1728,1722,1716,1710,1704,1698,1692,1679,1673,1656,1643,1618
<1618=1641,1619
<1619=1620
<1620=1621
<1621=1639,1622
<1622=1637,1635,1623
<1623=1624
<1624=1626,1625
<1626=1627
<1627=1629,1628
<1629=1633,1630
<1630=1631
<1631=1632
<1633=1634
<1635=1636
<1637=1638
<1639=1640
<1641=1642
<1643=1644
<1644=1655,1645
<1645=1651,1646
<1646=1649,1647
<1647=1648
<1649=1650
<1651=1652
<1652=1654,1653
<1656=1657
<1657=1672,1671,1658
<1658=1670,1659
<1659=1661,1660
<1661=1662
<1662=1664,1663
<1664=1666,1665
<1666=1667
<1667=1669,1668
<1673=1674
<1674=1676,1675
<1676=1678,1677
<1679=1680
<1680=1689,1681
<1681=1683,1682
<1683=1684
<1684=1686,1685
<1686=1688,1687
<1689=1691,1690
<1692=1693
<1693=1695,1694
<1695=1697,1696
<1698=1699
<1699=1701,1700
<1701=1703,1702
<1704=1705
<1705=1707,1706
<1707=1709,1708
<1710=1711
<1711=1713,1712
<1713=1715,1714
<1716=1717
<1717=1719,1718
<1719=1721,1720
<1722=1723
<1723=1725,1724
<1725=1727,1726
<1728=1729
<1729=1731,1730
<1732=1738,1733
<1733=1734
<1734=1735
<1735=1737,1736
<1738=1739
<1739=1741,1740
<1742=1743
<1743=1755,1754,1744
<1744=1753,1745
<1745=1747,1746
<1747=1748
<1748=1750,1749
<1750=1752,1751
<1756=1757
<1758=1811,1759
<1759=1797,1760
<1760=1793,1772,1761
<1761=1762
<1762=1768,1763
<1763=1764
<1764=1765
<1765=1767,1766
<1768=1769
<1769=1771,1770
<1772=1784,1777,1773
<1773=1774
<1774=1776,1775
<1777=1778
<1778=1782,1779
<1779=1780
<1780=1781
<1782=1783
<1784=1785
<1785=1792,1791,1786
<1786=1790,1787
<1787=1789,1788
<1793=1794
<1794=1796,1795
<1797=1798
<1798=1810,1809,1799
<1799=1808,1800
<1800=1804,1801
<1801=1802
<1802=1803
<1804=1805
<1805=1807,1806
<1811=1812
<1812=1814,1813
<1814=1816,1815
<1816=1817
<1817=1819,1818
<1820=1821
<1821=1831,1830,1822
<1822=1829,1823
<1823=1825,1824
<1825=1826
<1826=1828,1827
<1832=1833
<1833=1839,1834
<1834=1837,1835
<1835=1836
<1837=1838
<1839=1840
<1841=1842
<1842=1847,1846,1843
<1843=1845,1844
<1881=1899,1898,1882
<1882=1895,1892,1889,1886,1883
<1883=1885,1884
<1886=1888,1887
<1889=1891,1890
<1892=1894,1893
<1895=1897,1896
<1899=2090,2086,2082,2076,2068,2062,2056,2050,2044,2040,2036,2027,2015,1902,1900
<1900=1901
<1902=1994,1903
<1903=1990,1974,1965,1949,1945,1939,1931,1918,1904
<1904=1905
<1905=1909,1906
<1906=1907
<1907=1908
<1909=1910
<1910=1912,1911
<1912=1914,1913
<1914=1915
<1915=1917,1916
<1918=1919
<1919=1926,1920
<1920=1922,1921
<1922=1923
<1923=1925,1924
<1926=1928,1927
<1928=1930,1929
<1931=1932
<1932=1934,1933
<1934=1936,1935
<1936=1938,1937
<1939=1940
<1940=1942,1941
<1942=1944,1943
<1945=1946
<1946=1948,1947
<1949=1950
<1950=1961,1951
<1951=1952
<1952=1953
<1953=1955,1954
<1955=1956
<1956=1958,1957
<1958=1960,1959
<1961=1962
<1962=1964,1963
<1965=1966
<1966=1970,1967
<1967=1968
<1968=1969
<1970=1971
<1971=1973,1972
<1974=1975
<1975=1986,1976
<1976=1977
<1977=1978
<1978=1980,1979
<1980=1981
<1981=1983,1982
<1983=1985,1984
<1986=1987
<1987=1989,1988
<1990=1991
<1991=1993,1992
<1994=1995
<1995=2011,1996
<1996=2007,2003,1999,1997
<1997=1998
<1999=2000
<2000=2002,2001
<2003=2004
<2004=2006,2005
<2007=2008
<2008=2010,2009
<2011=2012
<2012=2014,2013
<2015=2016
<2016=2026,2025,2017
<2017=2024,2018
<2018=2020,2019
<2020=2021
<2021=2023,2022
<2027=2028
<2028=2032,2029
<2029=2030
<2030=2031
<2032=2033
<2033=2035,2034
<2036=2037
<2037=2039,2038
<2040=2041
<2041=2043,2042
<2044=2045
<2045=2047,2046
<2047=2049,2048
<2050=2051
<2051=2053,2052
<2053=2055,2054
<2056=2057
<2057=2059,2058
<2059=2061,2060
<2062=2063
<2063=2065,2064
<2065=2067,2066
<2068=2069
<2069=2073,2070
<2070=2072,2071
<2073=2075,2074
<2076=2077
<2077=2079,2078
<2079=2081,2080
<2082=2083
<2083=2085,2084
<2086=2087
<2087=2089,2088
<2090=2091
<2091=2096,2095,2092
<2092=2094,2093
<2132=2138,2137,2133
<2133=2134
<2134=2136,2135
<2138=2498,2488,2484,2249,2141,2139
<2139=2140
<2141=2247,2233,2142
<2142=2143
<2143=2224,2217,2207,2184,2180,2174,2166,2158,2144
<2144=2145
<2145=2149,2146
<2146=2147
<2147=2148
<2149=2150
<2150=2152,2151
<2152=2154,2153
<2154=2155
<2155=2157,2156
<2158=2159
<2159=2161,2160
<2161=2163,2162
<2163=2165,2164
<2166=2167
<2167=2169,2168
<2169=2171,2170
<2171=2173,2172
<2174=2175
<2175=2177,2176
<2177=2179,2178
<2180=2181
<2181=2183,2182
<2184=2185
<2185=2203,2186
<2186=2201,2199,2187
<2187=2188
<2188=2190,2189
<2190=2191
<2191=2193,2192
<2193=2197,2194
<2194=2195
<2195=2196
<2197=2198
<2199=2200
<2201=2202
<2203=2204
<2204=2206,2205
<2207=2208
<2208=2216,2215,2209
<2209=2214,2210
<2210=2212,2211
<2212=2213
<2217=2218
<2218=2222,2219
<2219=2220
<2220=2221
<2222=2223
<2224=2225
<2225=2232,2231,2226
<2226=2230,2227
<2227=2229,2228
<2233=2234
<2234=2235
<2235=2243,2236
<2236=2241,2239,2237
<2237=2238
<2239=2240
<2241=2242
<2243=2244
<2244=2246,2245
<2247=2248
<2249=2471,2250
<2250=2454,2432,2251
<2251=2416,2252
<2252=2406,2387,2253
<2253=2358,2254
<2254=2357,2356,2355,2354,2353,2352,2351,2350,2349,2340,2255
<2255=2336,2327,2256
<2256=2257
<2257=2285,2258
<2258=2281,2259
<2259=2271,2260
<2260=2261
<2261=2263,2262
<2263=2265,2264
<2265=2267,2266
<2267=2268
<2268=2270,2269
<2271=2272
<2272=2280,2279,2273
<2273=2278,2274
<2274=2276,2275
<2276=2277
<2281=2282
<2282=2284,2283
<2285=2286
<2286=2326,2287
<2287=2307,2288
<2288=2305,2289
<2289=2303,2301,2299,2292,2290
<2290=2291
<2292=2293
<2293=2295,2294
<2295=2296
<2296=2298,2297
<2299=2300
<2301=2302
<2303=2304
<2305=2306
<2307=2324,2308
<2308=2322,2318,2309
<2309=2310
<2310=2312,2311
<2312=2313
<2313=2315,2314
<2315=2317,2316
<2318=2319
<2319=2321,2320
<2322=2323
<2324=2325
<2327=2335,2334,2333,2332,2331,2330,2329,2328
<2336=2337
<2337=2339,2338
<2340=2341
<2341=2345,2342
<2342=2343
<2343=2344
<2345=2346
<2346=2348,2347
<2358=2359
<2359=2379,2360
<2360=2371,2361
<2361=2363,2362
<2363=2364
<2364=2366,2365
<2366=2368,2367
<2368=2370,2369
<2371=2375,2372
<2372=2373
<2373=2374
<2375=2376
<2376=2378,2377
<2379=2386,2380
<2380=2382,2381
<2382=2383
<2383=2385,2384
<2387=2388
<2388=2405,2404,2389
<2389=2403,2390
<2390=2394,2391
<2391=2392
<2392=2393
<2394=2395
<2395=2397,2396
<2397=2399,2398
<2399=2400
<2400=2402,2401
<2406=2407
<2407=2415,2414,2408
<2408=2413,2409
<2409=2411,2410
<2411=2412
<2416=2417
<2417=2429,2418
<2418=2422,2419
<2419=2420
<2420=2421
<2422=2423
<2423=2425,2424
<2425=2427,2426
<2427=2428
<2429=2431,2430
<2432=2433
<2433=2453,2434
<2434=2451,2435
<2435=2449,2447,2445,2438,2436
<2436=2437
<2438=2439
<2439=2441,2440
<2441=2442
<2442=2444,2443
<2445=2446
<2447=2448
<2449=2450
<2451=2452
<2454=2455
<2455=2470,2469,2456
<2456=2468,2457
<2457=2459,2458
<2459=2460
<2460=2462,2461
<2462=2464,2463
<2464=2465
<2465=2467,2466
<2471=2472
<2472=2480,2473
<2473=2478,2476,2474
<2474=2475
<2476=2477
<2478=2479
<2480=2481
<2481=2483,2482
<2484=2485
<2485=2487,2486
<2488=2489
<2489=2497,2496,2490
<2490=2495,2491
<2491=2493,2492
<2493=2494
<2498=2499
<2499=2504,2503,2500
<2500=2502,2501
<2559=2562,2561,2560
<2562=2814,2813,2812,2811,2810,2809,2808,2807,2806,2805,2804,2803,2799,2793,2787,2783,2776,2660,2595,2588,2563
<2563=2586,2564
<2564=2582,2578,2572,2565
<2565=2566
<2566=2570,2567
<2567=2568
<2568=2569
<2570=2571
<2572=2573
<2573=2575,2574
<2575=2577,2576
<2578=2579
<2579=2581,2580
<2582=2583
<2583=2585,2584
<2586=2587
<2588=2589
<2589=2593,2590
<2590=2591
<2591=2592
<2593=2594
<2595=2656,2596
<2596=2647,2640,2630,2624,2618,2597
<2597=2598
<2598=2616,2599
<2599=2614,2612,2600
<2600=2601
<2601=2603,2602
<2603=2604
<2604=2606,2605
<2606=2610,2607
<2607=2608
<2608=2609
<2610=2611
<2612=2613
<2614=2615
<2616=2617
<2618=2619
<2619=2621,2620
<2621=2623,2622
<2624=2625
<2625=2627,2626
<2627=2629,2628
<2630=2631
<2631=2639,2638,2632
<2632=2637,2633
<2633=2635,2634
<2635=2636
<2640=2641
<2641=2645,2642
<2642=2643
<2643=2644
<2645=2646
<2647=2648
<2648=2655,2654,2649
<2649=2653,2650
<2650=2652,2651
<2656=2657
<2657=2659,2658
<2660=2769,2661
<2661=2765,2754,2748,2744,2740,2739,2738,2737,2736,2735,2734,2733,2732,2731,2730,2729,2728,2716,2662
<2662=2692,2663
<2663=2688,2680,2672,2664
<2664=2665
<2665=2669,2666
<2666=2668,2667
<2669=2671,2670
<2672=2673
<2673=2677,2674
<2674=2676,2675
<2677=2679,2678
<2680=2681
<2681=2685,2682
<2682=2684,2683
<2685=2687,2686
<2688=2689
<2689=2691,2690
<2692=2693
<2693=2712,2694
<2694=2708,2704,2700,2695
<2695=2696
<2696=2698,2697
<2698=2699
<2700=2701
<2701=2703,2702
<2704=2705
<2705=2707,2706
<2708=2709
<2709=2711,2710
<2712=2713
<2713=2715,2714
<2716=2717
<2717=2727,2726,2718
<2718=2725,2719
<2719=2721,2720
<2721=2722
<2722=2724,2723
<2740=2741
<2741=2743,2742
<2744=2745
<2745=2747,2746
<2748=2749
<2749=2751,2750
<2751=2753,2752
<2754=2755
<2755=2762,2756
<2756=2758,2757
<2758=2759
<2759=2761,2760
<2762=2764,2763
<2765=2766
<2766=2768,2767
<2769=2770
<2770=2774,2771
<2771=2772
<2772=2773
<2774=2775
<2776=2777
<2777=2782,2781,2778
<2778=2780,2779
<2783=2784
<2784=2786,2785
<2787=2788
<2788=2790,2789
<2790=2792,2791
<2793=2794
<2794=2796,2795
<2796=2798,2797
<2799=2800
<2800=2802,2801
<2848=2854,2853,2849
<2849=2850
<2850=2852,2851
<2854=3148,3147,3146,3145,3144,3143,3142,3141,3140,3139,3138,3134,3128,3124,3117,2933,2887,2880,2855
<2855=2878,2856
<2856=2874,2870,2864,2857
<2857=2858
<2858=2862,2859
<2859=2860
<2860=2861
<2862=2863
<2864=2865
<2865=2867,2866
<2867=2869,2868
<2870=2871
<2871=2873,2872
<2874=2875
<2875=2877,2876
<2878=2879
<2880=2881
<2881=2885,2882
<2882=2883
<2883=2884
<2885=2886
<2887=2929,2888
<2888=2920,2913,2889
<2889=2890
<2890=2911,2891
<2891=2909,2907,2892
<2892=2893
<2893=2895,2894
<2895=2896
<2896=2898,2897
<2898=2905,2899
<2899=2900
<2900=2901
<2901=2903,2902
<2903=2904
<2905=2906
<2907=2908
<2909=2910
<2911=2912
<2913=2914
<2914=2918,2915
<2915=2916
<2916=2917
<2918=2919
<2920=2921
<2921=2928,2927,2922
<2922=2926,2923
<2923=2925,2924
<2929=2930
<2930=2932,2931
<2933=3110,2934
<2934=2935
<2935=3087,3064,2936
<2936=2937
<2937=3063,3062,3061,3060,2938,2981,2993,2994,2995,2996,2997,2998,2999,3000,3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3017,3021,3032,3036,3037,3038,3039,3040,3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,3051,3052,3053,3054,3055,3056,3057,3058,3059
<2938=2960,2939
<2939=2940
<2940=2941
<2941=2959,2942
<2942=2955,2943
<2943=2953,2951,2944
<2944=2945
<2945=2947,2946
<2947=2948
<2948=2950,2949
<2951=2952
<2953=2954
<2955=2956
<2956=2958,2957
<2960=2961
<2961=2977,2962
<2962=2973,2969,2965,2963
<2963=2964
<2965=2966
<2966=2968,2967
<2969=2970
<2970=2972,2971
<2973=2974
<2974=2976,2975
<2977=2978
<2978=2980,2979
<2981=2982
<2982=2992,2991,2983
<2983=2990,2984
<2984=2986,2985
<2986=2987
<2987=2989,2988
<3013=3014
<3014=3016,3015
<3017=3018
<3018=3020,3019
<3021=3022
<3022=3029,3023
<3023=3025,3024
<3025=3026
<3026=3028,3027
<3029=3031,3030
<3032=3033
<3033=3035,3034
<3064=3083,3082,3081,3080,3079,3078,3077,3076,3075,3074,3073,3072,3071,3070,3069,3068,3067,3066,3065
<3083=3084
<3084=3086,3085
<3087=3088
<3088=3090,3089
<3090=3108,3091
<3091=3099,3092
<3092=3093
<3093=3095,3094
<3095=3096
<3096=3098,3097
<3099=3100
<3100=3102,3101
<3102=3103
<3103=3105,3104
<3105=3107,3106
<3108=3109
<3110=3111
<3111=3115,3112
<3112=3113
<3113=3114
<3115=3116
<3117=3118
<3118=3123,3122,3119
<3119=3121,3120
<3124=3125
<3125=3127,3126
<3128=3129
<3129=3131,3130
<3131=3133,3132
<3134=3135
<3135=3137,3136
<3148=3149
<3149=3157,3156,3150
<3150=3155,3151
<3151=3153,3152
<3153=3154
<3198=3204,3203,3199
<3199=3200
<3200=3202,3201
<3204=3575,3574,3573,3572,3571,3570,3569,3568,3567,3566,3565,3564,3563,3562,3561,3560,3559,3558,3557,3556,3555,3554,3553,3552,3548,3542,3536,3530,3526,3521,3509,3237,3230,3205
<3205=3228,3206
<3206=3224,3220,3214,3207
<3207=3208
<3208=3212,3209
<3209=3210
<3210=3211
<3212=3213
<3214=3215
<3215=3217,3216
<3217=3219,3218
<3220=3221
<3221=3223,3222
<3224=3225
<3225=3227,3226
<3228=3229
<3230=3231
<3231=3235,3232
<3232=3233
<3233=3234
<3235=3236
<3237=3485,3399,3238
<3238=3239
<3239=3389,3240
<3240=3380,3355,3241
<3241=3242
<3242=3346,3339,3329,3323,3317,3243
<3243=3299,3267,3244
<3244=3245
<3245=3246
<3246=3247
<3247=3265,3248
<3248=3263,3261,3249
<3249=3250
<3250=3252,3251
<3252=3253
<3253=3255,3254
<3255=3259,3256
<3256=3257
<3257=3258
<3259=3260
<3261=3262
<3263=3264
<3265=3266
<3267=3298,3297,3296,3295,3294,3293,3292,3291,3290,3289,3288,3287,3286,3285,3284,3283,3282,3281,3280,3279,3278,3277,3276,3275,3274,3268
<3268=3269
<3269=3271,3270
<3271=3273,3272
<3299=3300
<3300=3309,3301
<3301=3305,3302
<3302=3303
<3303=3304
<3305=3306
<3306=3308,3307
<3309=3313,3310
<3310=3311
<3311=3312
<3313=3314
<3314=3316,3315
<3317=3318
<3318=3320,3319
<3320=3322,3321
<3323=3324
<3324=3326,3325
<3326=3328,3327
<3329=3330
<3330=3338,3337,3331
<3331=3336,3332
<3332=3334,3333
<3334=3335
<3339=3340
<3340=3344,3341
<3341=3342
<3342=3343
<3344=3345
<3346=3347
<3347=3354,3353,3348
<3348=3352,3349
<3349=3351,3350
<3355=3374,3356
<3356=3357
<3357=3371,3358
<3358=3360,3359
<3360=3361
<3361=3363,3362
<3363=3365,3364
<3365=3367,3366
<3367=3368
<3368=3370,3369
<3371=3373,3372
<3374=3375
<3375=3377,3376
<3377=3379,3378
<3380=3381
<3381=3385,3382
<3382=3383
<3383=3384
<3385=3386
<3386=3388,3387
<3389=3390
<3390=3398,3397,3391
<3391=3396,3392
<3392=3394,3393
<3394=3395
<3399=3479,3473,3460,3400
<3400=3408,3401
<3401=3402
<3402=3403
<3403=3405,3404
<3405=3407,3406
<3408=3409
<3409=3448,3410
<3410=3436,3411
<3411=3424,3412
<3412=3414,3413
<3414=3416,3415
<3416=3417
<3417=3419,3418
<3419=3421,3420
<3421=3423,3422
<3424=3426,3425
<3426=3428,3427
<3428=3429
<3429=3431,3430
<3431=3433,3432
<3433=3435,3434
<3436=3438,3437
<3438=3440,3439
<3440=3441
<3441=3443,3442
<3443=3445,3444
<3445=3447,3446
<3448=3450,3449
<3450=3452,3451
<3452=3453
<3453=3455,3454
<3455=3457,3456
<3457=3459,3458
<3460=3461
<3461=3470,3462
<3462=3464,3463
<3464=3465
<3465=3467,3466
<3467=3469,3468
<3470=3472,3471
<3473=3474
<3474=3476,3475
<3476=3478,3477
<3479=3480
<3480=3482,3481
<3482=3484,3483
<3485=3486
<3486=3505,3487
<3487=3501,3497,3493,3488
<3488=3489
<3489=3491,3490
<3491=3492
<3493=3494
<3494=3496,3495
<3497=3498
<3498=3500,3499
<3501=3502
<3502=3504,3503
<3505=3506
<3506=3508,3507
<3509=3510
<3510=3520,3519,3511
<3511=3518,3512
<3512=3514,3513
<3514=3515
<3515=3517,3516
<3521=3522
<3522=3525,3524,3523
<3526=3527
<3527=3529,3528
<3530=3531
<3531=3533,3532
<3533=3535,3534
<3536=3537
<3537=3539,3538
<3539=3541,3540
<3542=3543
<3543=3545,3544
<3545=3547,3546
<3548=3549
<3549=3551,3550
