>3	FunctionDef	TrajectorySerializer 
>4	ParameterList	std 
>5	Parameter	 
>6	Identifier	stream
>7	ParameterType	std 
>8	CompoundStatement	 
>13	FunctionDef	TrajectorySerializer 
>14	ParameterList	 
>15	CompoundStatement	 
>19	FunctionDef	TrajectorySerializer 
>20	ParameterList	const dvo_slam 
>21	Parameter	 
>22	Identifier	map
>23	ParameterType	const dvo_slam 
>24	ReturnType	void
>25	CompoundStatement	 
>26	ForStatement	for ( std 
>27	CompoundStatement	 
>28	ExpressionStatement	 
>29	ShiftExpression	stream_ << it -> first << \" \" << it -> second . translation ( ) ( 0 ) << \" \" << it -> second . translation ( ) ( \
>30	ShiftExpression	it -> first << \" \" << it -> second . translation ( ) ( 0 ) << \" \" << it -> second . translation ( ) ( \
>31	ShiftExpression	\" \" << it -> second . translation ( ) ( 0 ) << \" \" << it -> second . translation ( ) ( 1 ) << \" \" << \
>32	ShiftExpression	it -> second . translation ( ) ( 0 ) << \" \" << it -> second . translation ( ) ( 1 ) << \" \" << it -> \
>33	ShiftExpression	\" \" << it -> second . translation ( ) ( 1 ) << \" \" << it -> second . translation ( ) ( 2 ) << \" \" << \
>34	ShiftExpression	it -> second . translation ( ) ( 1 ) << \" \" << it -> second . translation ( ) ( 2 ) << \" \" << q . x ( ) << \" \" << \
>35	ShiftExpression	\" \" << it -> second . translation ( ) ( 2 ) << \" \" << q . x ( ) << \" \" << q . y ( ) << \" \" << q . z ( ) << \" \" << \
>36	ShiftExpression	it -> second . translation ( ) ( 2 ) << \" \" << q . x ( ) << \" \" << q . y ( ) << \" \" << q . z ( ) << \" \" << \
>37	ShiftExpression	\" \" << q . x ( ) << \" \" << q . y ( ) << \" \" << q . z ( ) << \" \" << q . w ( ) << \" \" << std 
>38	ShiftExpression	q . x ( ) << \" \" << q . y ( ) << \" \" << q . z ( ) << \" \" << q . w ( ) << \" \" << std 
>39	ShiftExpression	\" \" << q . y ( ) << \" \" << q . z ( ) << \" \" << q . w ( ) << \" \" << std 
>40	ShiftExpression	q . y ( ) << \" \" << q . z ( ) << \" \" << q . w ( ) << \" \" << std 
>41	ShiftExpression	\" \" << q . z ( ) << \" \" << q . w ( ) << \" \" << std 
>42	ShiftExpression	q . z ( ) << \" \" << q . w ( ) << \" \" << std 
>43	ShiftExpression	\" \" << q . w ( ) << \" \" << std 
>44	ShiftExpression	q . w ( ) << \" \" << std 
>45	ShiftExpression	\" \" << std 
>46	Identifier	std 
>47	PrimaryExpression	\" \"
>48	CallExpression	q . w ( )
>49	ArgumentList	 
>50	Callee	q . w
>51	MemberAccess	q . w
>52	Identifier	w
>53	Identifier	q
>54	PrimaryExpression	\" \"
>55	CallExpression	q . z ( )
>56	ArgumentList	 
>57	Callee	q . z
>58	MemberAccess	q . z
>59	Identifier	z
>60	Identifier	q
>61	PrimaryExpression	\" \"
>62	CallExpression	q . y ( )
>63	ArgumentList	 
>64	Callee	q . y
>65	MemberAccess	q . y
>66	Identifier	y
>67	Identifier	q
>68	PrimaryExpression	\" \"
>69	CallExpression	q . x ( )
>70	ArgumentList	 
>71	Callee	q . x
>72	MemberAccess	q . x
>73	Identifier	x
>74	Identifier	q
>75	PrimaryExpression	\" \"
>76	CallExpression	it -> second . translation ( ) ( 2 )
>77	ArgumentList	2
>78	Argument	2
>79	PrimaryExpression	2
>80	Callee	it -> second . translation ( )
>81	CallExpression	it -> second . translation ( )
>82	ArgumentList	 
>83	Callee	it -> second . translation
>84	MemberAccess	it -> second . translation
>85	Identifier	translation
>86	PtrMemberAccess	it -> second
>87	Identifier	second
>88	Identifier	it
>89	PrimaryExpression	\" \"
>90	CallExpression	it -> second . translation ( ) ( 1 )
>91	ArgumentList	1
>92	Argument	1
>93	PrimaryExpression	1
>94	Callee	it -> second . translation ( )
>95	CallExpression	it -> second . translation ( )
>96	ArgumentList	 
>97	Callee	it -> second . translation
>98	MemberAccess	it -> second . translation
>99	Identifier	translation
>100	PtrMemberAccess	it -> second
>101	Identifier	second
>102	Identifier	it
>103	PrimaryExpression	\" \"
>104	CallExpression	it -> second . translation ( ) ( 0 )
>105	ArgumentList	0
>106	Argument	0
>107	PrimaryExpression	0
>108	Callee	it -> second . translation ( )
>109	CallExpression	it -> second . translation ( )
>110	ArgumentList	 
>111	Callee	it -> second . translation
>112	MemberAccess	it -> second . translation
>113	Identifier	translation
>114	PtrMemberAccess	it -> second
>115	Identifier	second
>116	Identifier	it
>117	PrimaryExpression	\" \"
>118	PtrMemberAccess	it -> first
>119	Identifier	first
>120	Identifier	it
>121	Identifier	stream_
>122	IdentifierDeclStatement	 
>123	IdentifierDecl	q ( it -> second . rotation ( ) )
>124	CallExpression	it -> second . rotation ( )
>125	ArgumentList	 
>126	Callee	it -> second . rotation
>127	MemberAccess	it -> second . rotation
>128	Identifier	rotation
>129	PtrMemberAccess	it -> second
>130	Identifier	second
>131	Identifier	it
>132	Identifier	q
>133	IdentifierDeclType	Eigen 
>134	UnaryExpression	 
>135	Identifier	it
>136	IncDec	++
>137	Condition	 
>138	EqualityExpression	it != poses . end ( )
>139	CallExpression	poses . end ( )
>140	ArgumentList	 
>141	Callee	poses . end
>142	MemberAccess	poses . end
>143	Identifier	end
>144	Identifier	poses
>145	Identifier	it
>146	ForInit	 
>147	IdentifierDeclStatement	std 
>148	IdentifierDecl	it = poses . begin ( )
>149	AssignmentExpr	it = poses . begin ( )
>150	CallExpression	poses . begin ( )
>151	ArgumentList	 
>152	Callee	poses . begin
>153	MemberAccess	poses . begin
>154	Identifier	begin
>155	Identifier	poses
>156	Identifier	it
>157	Identifier	it
>158	IdentifierDeclType	std 
>159	ForStatement	for ( g2o 
>160	CompoundStatement	 
>161	ExpressionStatement	 
>162	AssignmentExpr	poses [ t -> timestamp ] = v -> estimate ( )
>163	CallExpression	v -> estimate ( )
>164	ArgumentList	 
>165	Callee	v -> estimate
>166	PtrMemberAccess	v -> estimate
>167	Identifier	estimate
>168	Identifier	v
>169	ArrayIndexing	poses [ t -> timestamp ]
>170	PtrMemberAccess	t -> timestamp
>171	Identifier	timestamp
>172	Identifier	t
>173	Identifier	poses
>174	ExpressionStatement	 
>175	CallExpression	assert ( t != 0 )
>176	ArgumentList	t != 0
>177	Argument	t != 0
>178	EqualityExpression	t != 0
>179	PrimaryExpression	0
>180	Identifier	t
>181	Callee	assert
>182	Identifier	assert
>183	ExpressionStatement	 
>184	CallExpression	v -> userData ( )
>185	ArgumentList	 
>186	Callee	v -> userData
>187	PtrMemberAccess	v -> userData
>188	Identifier	userData
>189	Identifier	v
>190	Statement	 
>191	Statement	 
>192	Statement	 
>193	Statement	 
>194	Statement	 
>195	Statement	 
>196	Statement	 
>197	Statement	 
>198	Statement	 
>199	IdentifierDeclStatement	 
>200	IdentifierDecl	* v = ( g2o 
>201	AssignmentExpr	* v = ( g2o 
>202	CastExpression	( g2o 
>203	PtrMemberAccess	it -> second
>204	Identifier	second
>205	Identifier	it
>206	CastTarget	g2o 
>207	Identifier	v
>208	Identifier	v
>209	IdentifierDeclType	g2o 
>210	UnaryExpression	 
>211	Identifier	it
>212	IncDec	++
>213	Condition	 
>214	EqualityExpression	it != map . graph ( ) . vertices ( ) . end ( )
>215	CallExpression	map . graph ( ) . vertices ( ) . end ( )
>216	ArgumentList	 
>217	Callee	map . graph ( ) . vertices ( ) . end
>218	MemberAccess	map . graph ( ) . vertices ( ) . end
>219	Identifier	end
>220	CallExpression	map . graph ( ) . vertices ( )
>221	ArgumentList	 
>222	Callee	map . graph ( ) . vertices
>223	MemberAccess	map . graph ( ) . vertices
>224	Identifier	vertices
>225	CallExpression	map . graph ( )
>226	ArgumentList	 
>227	Callee	map . graph
>228	MemberAccess	map . graph
>229	Identifier	graph
>230	Identifier	map
>231	Identifier	it
>232	ForInit	 
>233	IdentifierDeclStatement	g2o 
>234	IdentifierDecl	it = map . graph ( ) . vertices ( ) . begin ( )
>235	AssignmentExpr	it = map . graph ( ) . vertices ( ) . begin ( )
>236	CallExpression	map . graph ( ) . vertices ( ) . begin ( )
>237	ArgumentList	 
>238	Callee	map . graph ( ) . vertices ( ) . begin
>239	MemberAccess	map . graph ( ) . vertices ( ) . begin
>240	Identifier	begin
>241	CallExpression	map . graph ( ) . vertices ( )
>242	ArgumentList	 
>243	Callee	map . graph ( ) . vertices
>244	MemberAccess	map . graph ( ) . vertices
>245	Identifier	vertices
>246	CallExpression	map . graph ( )
>247	ArgumentList	 
>248	Callee	map . graph
>249	MemberAccess	map . graph
>250	Identifier	graph
>251	Identifier	map
>252	Identifier	it
>253	Identifier	it
>254	IdentifierDeclType	g2o 
>255	IdentifierDeclStatement	 
>256	IdentifierDecl	poses
>257	Identifier	poses
>258	IdentifierDeclType	std 
>283	FunctionDef	EdgeErrorSerializer 
>284	ParameterList	std 
>285	Parameter	 
>286	Identifier	stream
>287	ParameterType	std 
>288	CompoundStatement	 
>293	FunctionDef	EdgeErrorSerializer 
>294	ParameterList	 
>295	CompoundStatement	 
>299	FunctionDef	EdgeErrorSerializer 
>300	ParameterList	const dvo_slam 
>301	Parameter	 
>302	Identifier	map
>303	ParameterType	const dvo_slam 
>304	ReturnType	void
>305	CompoundStatement	 
>306	ForStatement	for ( g2o 
>307	CompoundStatement	 
>308	ExpressionStatement	 
>309	ShiftExpression	stream_ << type << \" \" << edge -> error ( ) . transpose ( ) << \" \" << edge -> chi2 ( ) << \" \" << rho \
>310	ShiftExpression	type << \" \" << edge -> error ( ) . transpose ( ) << \" \" << edge -> chi2 ( ) << \" \" << rho . transpose ( ) << \
>311	ShiftExpression	\" \" << edge -> error ( ) . transpose ( ) << \" \" << edge -> chi2 ( ) << \" \" << rho . transpose ( ) << \
>312	ShiftExpression	edge -> error ( ) . transpose ( ) << \" \" << edge -> chi2 ( ) << \" \" << rho . transpose ( ) << std 
>313	ShiftExpression	\" \" << edge -> chi2 ( ) << \" \" << rho . transpose ( ) << std 
>314	ShiftExpression	edge -> chi2 ( ) << \" \" << rho . transpose ( ) << std 
>315	ShiftExpression	\" \" << rho . transpose ( ) << std 
>316	ShiftExpression	rho . transpose ( ) << std 
>317	Identifier	std 
>318	CallExpression	rho . transpose ( )
>319	ArgumentList	 
>320	Callee	rho . transpose
>321	MemberAccess	rho . transpose
>322	Identifier	transpose
>323	Identifier	rho
>324	PrimaryExpression	\" \"
>325	CallExpression	edge -> chi2 ( )
>326	ArgumentList	 
>327	Callee	edge -> chi2
>328	PtrMemberAccess	edge -> chi2
>329	Identifier	chi2
>330	Identifier	edge
>331	PrimaryExpression	\" \"
>332	CallExpression	edge -> error ( ) . transpose ( )
>333	ArgumentList	 
>334	Callee	edge -> error ( ) . transpose
>335	MemberAccess	edge -> error ( ) . transpose
>336	Identifier	transpose
>337	CallExpression	edge -> error ( )
>338	ArgumentList	 
>339	Callee	edge -> error
>340	PtrMemberAccess	edge -> error
>341	Identifier	error
>342	Identifier	edge
>343	PrimaryExpression	\" \"
>344	Identifier	type
>345	Identifier	stream_
>346	IfStatement	if ( edge -> robustKernel ( ) != 0 )
>347	ElseStatement	else
>348	ExpressionStatement	 
>349	CallExpression	rho . setZero ( )
>350	ArgumentList	 
>351	Callee	rho . setZero
>352	MemberAccess	rho . setZero
>353	Identifier	setZero
>354	Identifier	rho
>355	ExpressionStatement	 
>356	CallExpression	edge -> robustKernel ( ) -> robustify ( edge -> chi2 ( ) , rho )
>357	ArgumentList	edge -> chi2 ( )
>358	Argument	rho
>359	Identifier	rho
>360	Argument	edge -> chi2 ( )
>361	CallExpression	edge -> chi2 ( )
>362	ArgumentList	 
>363	Callee	edge -> chi2
>364	PtrMemberAccess	edge -> chi2
>365	Identifier	chi2
>366	Identifier	edge
>367	Callee	edge -> robustKernel ( ) -> robustify
>368	PtrMemberAccess	edge -> robustKernel ( ) -> robustify
>369	Identifier	robustify
>370	CallExpression	edge -> robustKernel ( )
>371	ArgumentList	 
>372	Callee	edge -> robustKernel
>373	PtrMemberAccess	edge -> robustKernel
>374	Identifier	robustKernel
>375	Identifier	edge
>376	Condition	 
>377	EqualityExpression	edge -> robustKernel ( ) != 0
>378	PrimaryExpression	0
>379	CallExpression	edge -> robustKernel ( )
>380	ArgumentList	 
>381	Callee	edge -> robustKernel
>382	PtrMemberAccess	edge -> robustKernel
>383	Identifier	robustKernel
>384	Identifier	edge
>385	IdentifierDeclStatement	 
>386	IdentifierDecl	rho
>387	Identifier	rho
>388	IdentifierDeclType	Eigen 
>389	IdentifierDeclStatement	 
>390	IdentifierDecl	type = edge -> vertices ( ) . size ( ) == 2 && edge -> level ( ) == 0 && edge -> vertex ( 0 ) -> id ( ) > 0 && edge \
>391	AssignmentExpr	type = edge -> vertices ( ) . size ( ) == 2 && edge -> level ( ) == 0 && edge -> vertex ( 0 ) -> id ( ) > \
>392	ConditionalExpression	edge -> vertices ( ) . size ( ) == 2 && edge -> level ( ) == 0 && edge -> vertex ( 0 ) -> id ( ) > 0 && edge -> \
>393	PrimaryExpression	0
>394	PrimaryExpression	1
>395	Condition	edge -> vertices ( ) . size ( ) == 2 && edge -> level ( ) == 0 && edge -> vertex ( 0 ) -> id ( ) > 0 && edge -> \
>396	AndExpression	edge -> vertices ( ) . size ( ) == 2 && edge -> level ( ) == 0 && edge -> vertex ( 0 ) -> id ( ) > 0 && \
>397	AndExpression	edge -> level ( ) == 0 && edge -> vertex ( 0 ) -> id ( ) > 0 && edge -> vertex ( 1 ) -> id ( ) > 0
>398	AndExpression	edge -> vertex ( 0 ) -> id ( ) > 0 && edge -> vertex ( 1 ) -> id ( ) > 0
>399	RelationalExpression	edge -> vertex ( 1 ) -> id ( ) > 0
>400	PrimaryExpression	0
>401	CallExpression	edge -> vertex ( 1 ) -> id ( )
>402	ArgumentList	 
>403	Callee	edge -> vertex ( 1 ) -> id
>404	PtrMemberAccess	edge -> vertex ( 1 ) -> id
>405	Identifier	id
>406	CallExpression	edge -> vertex ( 1 )
>407	ArgumentList	1
>408	Argument	1
>409	PrimaryExpression	1
>410	Callee	edge -> vertex
>411	PtrMemberAccess	edge -> vertex
>412	Identifier	vertex
>413	Identifier	edge
>414	RelationalExpression	edge -> vertex ( 0 ) -> id ( ) > 0
>415	PrimaryExpression	0
>416	CallExpression	edge -> vertex ( 0 ) -> id ( )
>417	ArgumentList	 
>418	Callee	edge -> vertex ( 0 ) -> id
>419	PtrMemberAccess	edge -> vertex ( 0 ) -> id
>420	Identifier	id
>421	CallExpression	edge -> vertex ( 0 )
>422	ArgumentList	0
>423	Argument	0
>424	PrimaryExpression	0
>425	Callee	edge -> vertex
>426	PtrMemberAccess	edge -> vertex
>427	Identifier	vertex
>428	Identifier	edge
>429	EqualityExpression	edge -> level ( ) == 0
>430	PrimaryExpression	0
>431	CallExpression	edge -> level ( )
>432	ArgumentList	 
>433	Callee	edge -> level
>434	PtrMemberAccess	edge -> level
>435	Identifier	level
>436	Identifier	edge
>437	EqualityExpression	edge -> vertices ( ) . size ( ) == 2
>438	PrimaryExpression	2
>439	CallExpression	edge -> vertices ( ) . size ( )
>440	ArgumentList	 
>441	Callee	edge -> vertices ( ) . size
>442	MemberAccess	edge -> vertices ( ) . size
>443	Identifier	size
>444	CallExpression	edge -> vertices ( )
>445	ArgumentList	 
>446	Callee	edge -> vertices
>447	PtrMemberAccess	edge -> vertices
>448	Identifier	vertices
>449	Identifier	edge
>450	Identifier	type
>451	Identifier	type
>452	IdentifierDeclType	int
>453	ExpressionStatement	 
>454	UnaryOp	* it
>455	Identifier	it
>456	UnaryOperator	*
>457	Statement	 
>458	Statement	 
>459	Statement	 
>460	Statement	 
>461	Statement	 
>462	Statement	 
>463	Statement	 
>464	Statement	 
>465	Statement	 
>466	Statement	 
>467	Statement	 
>468	Statement	 
>469	Statement	 
>470	UnaryExpression	 
>471	Identifier	it
>472	IncDec	++
>473	Condition	 
>474	EqualityExpression	it != map . graph ( ) . edges ( ) . end ( )
>475	CallExpression	map . graph ( ) . edges ( ) . end ( )
>476	ArgumentList	 
>477	Callee	map . graph ( ) . edges ( ) . end
>478	MemberAccess	map . graph ( ) . edges ( ) . end
>479	Identifier	end
>480	CallExpression	map . graph ( ) . edges ( )
>481	ArgumentList	 
>482	Callee	map . graph ( ) . edges
>483	MemberAccess	map . graph ( ) . edges
>484	Identifier	edges
>485	CallExpression	map . graph ( )
>486	ArgumentList	 
>487	Callee	map . graph
>488	MemberAccess	map . graph
>489	Identifier	graph
>490	Identifier	map
>491	Identifier	it
>492	ForInit	 
>493	IdentifierDeclStatement	g2o 
>494	IdentifierDecl	it = map . graph ( ) . edges ( ) . begin ( )
>495	AssignmentExpr	it = map . graph ( ) . edges ( ) . begin ( )
>496	CallExpression	map . graph ( ) . edges ( ) . begin ( )
>497	ArgumentList	 
>498	Callee	map . graph ( ) . edges ( ) . begin
>499	MemberAccess	map . graph ( ) . edges ( ) . begin
>500	Identifier	begin
>501	CallExpression	map . graph ( ) . edges ( )
>502	ArgumentList	 
>503	Callee	map . graph ( ) . edges
>504	MemberAccess	map . graph ( ) . edges
>505	Identifier	edges
>506	CallExpression	map . graph ( )
>507	ArgumentList	 
>508	Callee	map . graph
>509	MemberAccess	map . graph
>510	Identifier	graph
>511	Identifier	map
>512	Identifier	it
>513	Identifier	it
>514	IdentifierDeclType	g2o 
>539	FunctionDef	MessageSerializer 
>540	ParameterList	dvo_slam 
>541	Parameter	 
>542	Identifier	msg
>543	ParameterType	dvo_slam 
>544	CompoundStatement	 
>549	FunctionDef	MessageSerializer 
>550	ParameterList	 
>551	CompoundStatement	 
>555	FunctionDef	MessageSerializer 
>556	ParameterList	const dvo_slam 
>557	Parameter	 
>558	Identifier	map
>559	ParameterType	const dvo_slam 
>560	ReturnType	void
>561	CompoundStatement	 
>562	ForStatement	for ( g2o 
>563	CompoundStatement	 
>564	ExpressionStatement	 
>565	CallExpression	msg_ . poses . push_back ( pose )
>566	ArgumentList	pose
>567	Argument	pose
>568	Identifier	pose
>569	Callee	msg_ . poses . push_back
>570	MemberAccess	msg_ . poses . push_back
>571	Identifier	push_back
>572	MemberAccess	msg_ . poses
>573	Identifier	poses
>574	Identifier	msg_
>575	ExpressionStatement	 
>576	AssignmentExpr	pose . pose . orientation . z = q . z ( )
>577	CallExpression	q . z ( )
>578	ArgumentList	 
>579	Callee	q . z
>580	MemberAccess	q . z
>581	Identifier	z
>582	Identifier	q
>583	MemberAccess	pose . pose . orientation . z
>584	Identifier	z
>585	MemberAccess	pose . pose . orientation
>586	Identifier	orientation
>587	MemberAccess	pose . pose
>588	Identifier	pose
>589	Identifier	pose
>590	ExpressionStatement	 
>591	AssignmentExpr	pose . pose . orientation . y = q . y ( )
>592	CallExpression	q . y ( )
>593	ArgumentList	 
>594	Callee	q . y
>595	MemberAccess	q . y
>596	Identifier	y
>597	Identifier	q
>598	MemberAccess	pose . pose . orientation . y
>599	Identifier	y
>600	MemberAccess	pose . pose . orientation
>601	Identifier	orientation
>602	MemberAccess	pose . pose
>603	Identifier	pose
>604	Identifier	pose
>605	ExpressionStatement	 
>606	AssignmentExpr	pose . pose . orientation . x = q . x ( )
>607	CallExpression	q . x ( )
>608	ArgumentList	 
>609	Callee	q . x
>610	MemberAccess	q . x
>611	Identifier	x
>612	Identifier	q
>613	MemberAccess	pose . pose . orientation . x
>614	Identifier	x
>615	MemberAccess	pose . pose . orientation
>616	Identifier	orientation
>617	MemberAccess	pose . pose
>618	Identifier	pose
>619	Identifier	pose
>620	ExpressionStatement	 
>621	AssignmentExpr	pose . pose . orientation . w = q . w ( )
>622	CallExpression	q . w ( )
>623	ArgumentList	 
>624	Callee	q . w
>625	MemberAccess	q . w
>626	Identifier	w
>627	Identifier	q
>628	MemberAccess	pose . pose . orientation . w
>629	Identifier	w
>630	MemberAccess	pose . pose . orientation
>631	Identifier	orientation
>632	MemberAccess	pose . pose
>633	Identifier	pose
>634	Identifier	pose
>635	ExpressionStatement	 
>636	AssignmentExpr	pose . pose . position . z = p . translation ( ) ( 2 )
>637	CallExpression	p . translation ( ) ( 2 )
>638	ArgumentList	2
>639	Argument	2
>640	PrimaryExpression	2
>641	Callee	p . translation ( )
>642	CallExpression	p . translation ( )
>643	ArgumentList	 
>644	Callee	p . translation
>645	MemberAccess	p . translation
>646	Identifier	translation
>647	Identifier	p
>648	MemberAccess	pose . pose . position . z
>649	Identifier	z
>650	MemberAccess	pose . pose . position
>651	Identifier	position
>652	MemberAccess	pose . pose
>653	Identifier	pose
>654	Identifier	pose
>655	ExpressionStatement	 
>656	AssignmentExpr	pose . pose . position . y = p . translation ( ) ( 1 )
>657	CallExpression	p . translation ( ) ( 1 )
>658	ArgumentList	1
>659	Argument	1
>660	PrimaryExpression	1
>661	Callee	p . translation ( )
>662	CallExpression	p . translation ( )
>663	ArgumentList	 
>664	Callee	p . translation
>665	MemberAccess	p . translation
>666	Identifier	translation
>667	Identifier	p
>668	MemberAccess	pose . pose . position . y
>669	Identifier	y
>670	MemberAccess	pose . pose . position
>671	Identifier	position
>672	MemberAccess	pose . pose
>673	Identifier	pose
>674	Identifier	pose
>675	ExpressionStatement	 
>676	AssignmentExpr	pose . pose . position . x = p . translation ( ) ( 0 )
>677	CallExpression	p . translation ( ) ( 0 )
>678	ArgumentList	0
>679	Argument	0
>680	PrimaryExpression	0
>681	Callee	p . translation ( )
>682	CallExpression	p . translation ( )
>683	ArgumentList	 
>684	Callee	p . translation
>685	MemberAccess	p . translation
>686	Identifier	translation
>687	Identifier	p
>688	MemberAccess	pose . pose . position . x
>689	Identifier	x
>690	MemberAccess	pose . pose . position
>691	Identifier	position
>692	MemberAccess	pose . pose
>693	Identifier	pose
>694	Identifier	pose
>695	ExpressionStatement	 
>696	AssignmentExpr	pose . header . stamp = t -> timestamp
>697	PtrMemberAccess	t -> timestamp
>698	Identifier	timestamp
>699	Identifier	t
>700	MemberAccess	pose . header . stamp
>701	Identifier	stamp
>702	MemberAccess	pose . header
>703	Identifier	header
>704	Identifier	pose
>705	IdentifierDeclStatement	 
>706	IdentifierDecl	q ( p . rotation ( ) )
>707	CallExpression	p . rotation ( )
>708	ArgumentList	 
>709	Callee	p . rotation
>710	MemberAccess	p . rotation
>711	Identifier	rotation
>712	Identifier	p
>713	Identifier	q
>714	IdentifierDeclType	Eigen 
>715	IdentifierDeclStatement	 
>716	IdentifierDecl	p = v -> estimate ( )
>717	AssignmentExpr	p = v -> estimate ( )
>718	CallExpression	v -> estimate ( )
>719	ArgumentList	 
>720	Callee	v -> estimate
>721	PtrMemberAccess	v -> estimate
>722	Identifier	estimate
>723	Identifier	v
>724	Identifier	p
>725	Identifier	p
>726	IdentifierDeclType	Eigen 
>727	ExpressionStatement	 
>728	CallExpression	assert ( t != 0 )
>729	ArgumentList	t != 0
>730	Argument	t != 0
>731	EqualityExpression	t != 0
>732	PrimaryExpression	0
>733	Identifier	t
>734	Callee	assert
>735	Identifier	assert
>736	ExpressionStatement	 
>737	CallExpression	v -> userData ( )
>738	ArgumentList	 
>739	Callee	v -> userData
>740	PtrMemberAccess	v -> userData
>741	Identifier	userData
>742	Identifier	v
>743	Statement	 
>744	Statement	 
>745	Statement	 
>746	Statement	 
>747	Statement	 
>748	Statement	 
>749	Statement	 
>750	Statement	 
>751	Statement	 
>752	IdentifierDeclStatement	 
>753	IdentifierDecl	* v = ( g2o 
>754	AssignmentExpr	* v = ( g2o 
>755	CastExpression	( g2o 
>756	PtrMemberAccess	it -> second
>757	Identifier	second
>758	Identifier	it
>759	CastTarget	g2o 
>760	Identifier	v
>761	Identifier	v
>762	IdentifierDeclType	g2o 
>763	UnaryExpression	 
>764	Identifier	it
>765	IncDec	++
>766	Condition	 
>767	EqualityExpression	it != map . graph ( ) . vertices ( ) . end ( )
>768	CallExpression	map . graph ( ) . vertices ( ) . end ( )
>769	ArgumentList	 
>770	Callee	map . graph ( ) . vertices ( ) . end
>771	MemberAccess	map . graph ( ) . vertices ( ) . end
>772	Identifier	end
>773	CallExpression	map . graph ( ) . vertices ( )
>774	ArgumentList	 
>775	Callee	map . graph ( ) . vertices
>776	MemberAccess	map . graph ( ) . vertices
>777	Identifier	vertices
>778	CallExpression	map . graph ( )
>779	ArgumentList	 
>780	Callee	map . graph
>781	MemberAccess	map . graph
>782	Identifier	graph
>783	Identifier	map
>784	Identifier	it
>785	ForInit	 
>786	IdentifierDeclStatement	g2o 
>787	IdentifierDecl	it = map . graph ( ) . vertices ( ) . begin ( )
>788	AssignmentExpr	it = map . graph ( ) . vertices ( ) . begin ( )
>789	CallExpression	map . graph ( ) . vertices ( ) . begin ( )
>790	ArgumentList	 
>791	Callee	map . graph ( ) . vertices ( ) . begin
>792	MemberAccess	map . graph ( ) . vertices ( ) . begin
>793	Identifier	begin
>794	CallExpression	map . graph ( ) . vertices ( )
>795	ArgumentList	 
>796	Callee	map . graph ( ) . vertices
>797	MemberAccess	map . graph ( ) . vertices
>798	Identifier	vertices
>799	CallExpression	map . graph ( )
>800	ArgumentList	 
>801	Callee	map . graph
>802	MemberAccess	map . graph
>803	Identifier	graph
>804	Identifier	map
>805	Identifier	it
>806	Identifier	it
>807	IdentifierDeclType	g2o 
>808	IdentifierDeclStatement	 
>809	IdentifierDecl	pose
>810	Identifier	pose
>811	IdentifierDeclType	geometry_msgs 
<3=8,4
<4=5
<5=7,6
<13=15,14
<19=25,24,20
<20=21
<21=23,22
<25=255,159,26
<26=146,137,134,27
<27=122,28
<28=29
<29=121,30
<30=118,31
<31=117,32
<32=104,33
<33=103,34
<34=90,35
<35=89,36
<36=76,37
<37=75,38
<38=69,39
<39=68,40
<40=62,41
<41=61,42
<42=55,43
<43=54,44
<44=48,45
<45=47,46
<48=50,49
<50=51
<51=53,52
<55=57,56
<57=58
<58=60,59
<62=64,63
<64=65
<65=67,66
<69=71,70
<71=72
<72=74,73
<76=80,77
<77=78
<78=79
<80=81
<81=83,82
<83=84
<84=86,85
<86=88,87
<90=94,91
<91=92
<92=93
<94=95
<95=97,96
<97=98
<98=100,99
<100=102,101
<104=108,105
<105=106
<106=107
<108=109
<109=111,110
<111=112
<112=114,113
<114=116,115
<118=120,119
<122=123
<123=133,132,124
<124=126,125
<126=127
<127=129,128
<129=131,130
<134=136,135
<137=138
<138=145,139
<139=141,140
<141=142
<142=144,143
<146=147
<147=148
<148=158,157,149
<149=156,150
<150=152,151
<152=153
<153=155,154
<159=232,213,210,160
<160=199,198,197,196,195,194,193,192,191,190,183,174,161
<161=162
<162=169,163
<163=165,164
<165=166
<166=168,167
<169=173,170
<170=172,171
<174=175
<175=181,176
<176=177
<177=178
<178=180,179
<181=182
<183=184
<184=186,185
<186=187
<187=189,188
<199=200
<200=209,208,201
<201=207,202
<202=206,203
<203=205,204
<210=212,211
<213=214
<214=231,215
<215=217,216
<217=218
<218=220,219
<220=222,221
<222=223
<223=225,224
<225=227,226
<227=228
<228=230,229
<232=233
<233=234
<234=254,253,235
<235=252,236
<236=238,237
<238=239
<239=241,240
<241=243,242
<243=244
<244=246,245
<246=248,247
<248=249
<249=251,250
<255=256
<256=258,257
<283=288,284
<284=285
<285=287,286
<293=295,294
<299=305,304,300
<300=301
<301=303,302
<305=306
<306=492,473,470,307
<307=469,468,467,466,465,464,463,462,461,460,459,458,457,453,389,385,346,308
<308=309
<309=345,310
<310=344,311
<311=343,312
<312=332,313
<313=331,314
<314=325,315
<315=324,316
<316=318,317
<318=320,319
<320=321
<321=323,322
<325=327,326
<327=328
<328=330,329
<332=334,333
<334=335
<335=337,336
<337=339,338
<339=340
<340=342,341
<346=376,355,347
<347=348
<348=349
<349=351,350
<351=352
<352=354,353
<355=356
<356=367,357
<357=360,358
<358=359
<360=361
<361=363,362
<363=364
<364=366,365
<367=368
<368=370,369
<370=372,371
<372=373
<373=375,374
<376=377
<377=379,378
<379=381,380
<381=382
<382=384,383
<385=386
<386=388,387
<389=390
<390=452,451,391
<391=450,392
<392=395,394,393
<395=396
<396=437,397
<397=429,398
<398=414,399
<399=401,400
<401=403,402
<403=404
<404=406,405
<406=410,407
<407=408
<408=409
<410=411
<411=413,412
<414=416,415
<416=418,417
<418=419
<419=421,420
<421=425,422
<422=423
<423=424
<425=426
<426=428,427
<429=431,430
<431=433,432
<433=434
<434=436,435
<437=439,438
<439=441,440
<441=442
<442=444,443
<444=446,445
<446=447
<447=449,448
<453=454
<454=456,455
<470=472,471
<473=474
<474=491,475
<475=477,476
<477=478
<478=480,479
<480=482,481
<482=483
<483=485,484
<485=487,486
<487=488
<488=490,489
<492=493
<493=494
<494=514,513,495
<495=512,496
<496=498,497
<498=499
<499=501,500
<501=503,502
<503=504
<504=506,505
<506=508,507
<508=509
<509=511,510
<539=544,540
<540=541
<541=543,542
<549=551,550
<555=561,560,556
<556=557
<557=559,558
<561=808,562
<562=785,766,763,563
<563=752,751,750,749,748,747,746,745,744,743,736,727,715,705,695,675,655,635,620,605,590,575,564
<564=565
<565=569,566
<566=567
<567=568
<569=570
<570=572,571
<572=574,573
<575=576
<576=583,577
<577=579,578
<579=580
<580=582,581
<583=585,584
<585=587,586
<587=589,588
<590=591
<591=598,592
<592=594,593
<594=595
<595=597,596
<598=600,599
<600=602,601
<602=604,603
<605=606
<606=613,607
<607=609,608
<609=610
<610=612,611
<613=615,614
<615=617,616
<617=619,618
<620=621
<621=628,622
<622=624,623
<624=625
<625=627,626
<628=630,629
<630=632,631
<632=634,633
<635=636
<636=648,637
<637=641,638
<638=639
<639=640
<641=642
<642=644,643
<644=645
<645=647,646
<648=650,649
<650=652,651
<652=654,653
<655=656
<656=668,657
<657=661,658
<658=659
<659=660
<661=662
<662=664,663
<664=665
<665=667,666
<668=670,669
<670=672,671
<672=674,673
<675=676
<676=688,677
<677=681,678
<678=679
<679=680
<681=682
<682=684,683
<684=685
<685=687,686
<688=690,689
<690=692,691
<692=694,693
<695=696
<696=700,697
<697=699,698
<700=702,701
<702=704,703
<705=706
<706=714,713,707
<707=709,708
<709=710
<710=712,711
<715=716
<716=726,725,717
<717=724,718
<718=720,719
<720=721
<721=723,722
<727=728
<728=734,729
<729=730
<730=731
<731=733,732
<734=735
<736=737
<737=739,738
<739=740
<740=742,741
<752=753
<753=762,761,754
<754=760,755
<755=759,756
<756=758,757
<763=765,764
<766=767
<767=784,768
<768=770,769
<770=771
<771=773,772
<773=775,774
<775=776
<776=778,777
<778=780,779
<780=781
<781=783,782
<785=786
<786=787
<787=807,806,788
<788=805,789
<789=791,790
<791=792
<792=794,793
<794=796,795
<796=797
<797=799,798
<799=801,800
<801=802
<802=804,803
<808=809
<809=811,810
