>3	FunctionDef	callFunction (mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nrhs , const long nlhs)
>4	ParameterList	mxArray * plhs [ ] , const mxArray * prhs [ ] , const long nrhs , const long nlhs
>5	Parameter	 
>6	Identifier	nlhs
>7	ParameterType	const long
>8	Parameter	 
>9	Identifier	nrhs
>10	ParameterType	const long
>11	Parameter	 
>12	Identifier	prhs
>13	ParameterType	const mxArray * [ ]
>14	Parameter	 
>15	Identifier	plhs
>16	ParameterType	mxArray * [ ]
>17	ReturnType	inline void
>18	CompoundStatement	 
>19	IfStatement	if ( nrhs == 3 )
>20	ElseStatement	else
>21	CompoundStatement	 
>22	ExpressionStatement	 
>23	CallExpression	convertSpMatrix ( plhs [ 0 ] , alpha . m ( ) , alpha . n ( ) , alpha . n ( ) , alpha . nzmax ( ) , alpha . v ( ) , \
>24	ArgumentList	plhs [ 0 ]
>25	Argument	alpha . pB ( )
>26	CallExpression	alpha . pB ( )
>27	ArgumentList	 
>28	Callee	alpha . pB
>29	MemberAccess	alpha . pB
>30	Identifier	pB
>31	Identifier	alpha
>32	Argument	alpha . r ( )
>33	CallExpression	alpha . r ( )
>34	ArgumentList	 
>35	Callee	alpha . r
>36	MemberAccess	alpha . r
>37	Identifier	r
>38	Identifier	alpha
>39	Argument	alpha . v ( )
>40	CallExpression	alpha . v ( )
>41	ArgumentList	 
>42	Callee	alpha . v
>43	MemberAccess	alpha . v
>44	Identifier	v
>45	Identifier	alpha
>46	Argument	alpha . nzmax ( )
>47	CallExpression	alpha . nzmax ( )
>48	ArgumentList	 
>49	Callee	alpha . nzmax
>50	MemberAccess	alpha . nzmax
>51	Identifier	nzmax
>52	Identifier	alpha
>53	Argument	alpha . n ( )
>54	CallExpression	alpha . n ( )
>55	ArgumentList	 
>56	Callee	alpha . n
>57	MemberAccess	alpha . n
>58	Identifier	n
>59	Identifier	alpha
>60	Argument	alpha . n ( )
>61	CallExpression	alpha . n ( )
>62	ArgumentList	 
>63	Callee	alpha . n
>64	MemberAccess	alpha . n
>65	Identifier	n
>66	Identifier	alpha
>67	Argument	alpha . m ( )
>68	CallExpression	alpha . m ( )
>69	ArgumentList	 
>70	Callee	alpha . m
>71	MemberAccess	alpha . m
>72	Identifier	m
>73	Identifier	alpha
>74	Argument	plhs [ 0 ]
>75	ArrayIndexing	plhs [ 0 ]
>76	PrimaryExpression	0
>77	Identifier	plhs
>78	Callee	convertSpMatrix
>79	Identifier	convertSpMatrix
>80	IfStatement	if ( nlhs == 2 )
>81	ElseStatement	else
>82	CompoundStatement	 
>83	IfStatement	if ( cholesky )
>84	ElseStatement	else
>85	CompoundStatement	 
>86	ExpressionStatement	 
>87	RelationalExpression	lasso2 < T > ( X , G , DtR , alpha , L , lambda , mode , pos , numThreads , NULL , length_path )
>88	RelationalExpression	T > ( X , G , DtR , alpha , L , lambda , mode , pos , numThreads , NULL , length_path )
>89	Expression	X , G , DtR , alpha , L , lambda , mode , pos , numThreads , NULL , length_path
>90	Expression	G , DtR , alpha , L , lambda , mode , pos , numThreads , NULL , length_path
>91	Expression	DtR , alpha , L , lambda , mode , pos , numThreads , NULL , length_path
>92	Expression	alpha , L , lambda , mode , pos , numThreads , NULL , length_path
>93	Expression	L , lambda , mode , pos , numThreads , NULL , length_path
>94	Expression	lambda , mode , pos , numThreads , NULL , length_path
>95	Expression	mode , pos , numThreads , NULL , length_path
>96	Expression	pos , numThreads , NULL , length_path
>97	Expression	numThreads , NULL , length_path
>98	Expression	NULL , length_path
>99	Identifier	length_path
>100	Identifier	NULL
>101	Identifier	numThreads
>102	Identifier	pos
>103	Identifier	mode
>104	Identifier	lambda
>105	Identifier	L
>106	Identifier	alpha
>107	Identifier	DtR
>108	Identifier	G
>109	Identifier	X
>110	Identifier	T
>111	Identifier	lasso2
>112	CompoundStatement	 
>113	ExpressionStatement	 
>114	RelationalExpression	lasso < T > ( X , G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , NULL , length_path )
>115	RelationalExpression	T > ( X , G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , NULL , length_path )
>116	Expression	X , G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , NULL , length_path
>117	Expression	G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , NULL , length_path
>118	Expression	DtR , alpha , L , lambda , mode , pos , ols , numThreads , NULL , length_path
>119	Expression	alpha , L , lambda , mode , pos , ols , numThreads , NULL , length_path
>120	Expression	L , lambda , mode , pos , ols , numThreads , NULL , length_path
>121	Expression	lambda , mode , pos , ols , numThreads , NULL , length_path
>122	Expression	mode , pos , ols , numThreads , NULL , length_path
>123	Expression	pos , ols , numThreads , NULL , length_path
>124	Expression	ols , numThreads , NULL , length_path
>125	Expression	numThreads , NULL , length_path
>126	Expression	NULL , length_path
>127	Identifier	length_path
>128	Identifier	NULL
>129	Identifier	numThreads
>130	Identifier	ols
>131	Identifier	pos
>132	Identifier	mode
>133	Identifier	lambda
>134	Identifier	L
>135	Identifier	alpha
>136	Identifier	DtR
>137	Identifier	G
>138	Identifier	X
>139	Identifier	T
>140	Identifier	lasso
>141	Condition	 
>142	Identifier	cholesky
>143	CompoundStatement	 
>144	ForStatement	for ( long i = 0 ; i < length ; ++ i )
>145	CompoundStatement	 
>146	ExpressionStatement	 
>147	CallExpression	norm . copyCol ( i , col )
>148	ArgumentList	i
>149	Argument	col
>150	Identifier	col
>151	Argument	i
>152	Identifier	i
>153	Callee	norm . copyCol
>154	MemberAccess	norm . copyCol
>155	Identifier	copyCol
>156	Identifier	norm
>157	ExpressionStatement	 
>158	CallExpression	norm2 . refCol ( i , col )
>159	ArgumentList	i
>160	Argument	col
>161	Identifier	col
>162	Argument	i
>163	Identifier	i
>164	Callee	norm2 . refCol
>165	MemberAccess	norm2 . refCol
>166	Identifier	refCol
>167	Identifier	norm2
>168	UnaryExpression	 
>169	Identifier	i
>170	IncDec	++
>171	Condition	 
>172	RelationalExpression	i < length
>173	Identifier	length
>174	Identifier	i
>175	ForInit	 
>176	IdentifierDeclStatement	long i = 0 ;
>177	IdentifierDecl	i = 0
>178	AssignmentExpr	i = 0
>179	PrimaryExpression	0
>180	Identifier	i
>181	Identifier	i
>182	IdentifierDeclType	long
>183	IdentifierDeclStatement	 
>184	IdentifierDecl	col
>185	Identifier	col
>186	IdentifierDeclType	Vector < T >
>187	IdentifierDeclStatement	 
>188	IdentifierDecl	norm2 ( pr_norm , K , length )
>189	Expression	pr_norm , K , length
>190	Expression	K , length
>191	Identifier	length
>192	Identifier	K
>193	Identifier	pr_norm
>194	Identifier	norm2
>195	IdentifierDeclType	Matrix < T >
>196	ExpressionStatement	 
>197	CallExpression	mxGetPr ( plhs [ 1 ] )
>198	ArgumentList	plhs [ 1 ]
>199	Argument	plhs [ 1 ]
>200	ArrayIndexing	plhs [ 1 ]
>201	PrimaryExpression	1
>202	Identifier	plhs
>203	Callee	mxGetPr
>204	Identifier	mxGetPr
>205	Statement	 
>206	Statement	 
>207	Statement	 
>208	Statement	 
>209	Statement	 
>210	Statement	 
>211	Statement	 
>212	Statement	 
>213	Statement	 
>214	ExpressionStatement	 
>215	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( K , length )
>216	RelationalExpression	createMatrix < T > ( K , length )
>217	RelationalExpression	T > ( K , length )
>218	Expression	K , length
>219	Identifier	length
>220	Identifier	K
>221	Identifier	T
>222	Identifier	createMatrix
>223	ArrayIndexing	plhs [ 1 ]
>224	PrimaryExpression	1
>225	Identifier	plhs
>226	ForStatement	for ( long i = 1 ; i < norms_col . n ( ) ; ++ i )
>227	IfStatement	if ( norms_col [ i ] )
>228	ExpressionStatement	 
>229	UnaryExpression	++ length
>230	Identifier	length
>231	IncDec	++
>232	Condition	 
>233	ArrayIndexing	norms_col [ i ]
>234	Identifier	i
>235	Identifier	norms_col
>236	UnaryExpression	 
>237	Identifier	i
>238	IncDec	++
>239	Condition	 
>240	RelationalExpression	i < norms_col . n ( )
>241	CallExpression	norms_col . n ( )
>242	ArgumentList	 
>243	Callee	norms_col . n
>244	MemberAccess	norms_col . n
>245	Identifier	n
>246	Identifier	norms_col
>247	Identifier	i
>248	ForInit	 
>249	IdentifierDeclStatement	long i = 1 ;
>250	IdentifierDecl	i = 1
>251	AssignmentExpr	i = 1
>252	PrimaryExpression	1
>253	Identifier	i
>254	Identifier	i
>255	IdentifierDeclType	long
>256	IdentifierDeclStatement	 
>257	IdentifierDecl	length = 1
>258	AssignmentExpr	length = 1
>259	PrimaryExpression	1
>260	Identifier	length
>261	Identifier	length
>262	IdentifierDeclType	long
>263	ExpressionStatement	 
>264	CallExpression	norm . norm_2_cols ( norms_col )
>265	ArgumentList	norms_col
>266	Argument	norms_col
>267	Identifier	norms_col
>268	Callee	norm . norm_2_cols
>269	MemberAccess	norm . norm_2_cols
>270	Identifier	norm_2_cols
>271	Identifier	norm
>272	IdentifierDeclStatement	 
>273	IdentifierDecl	norms_col
>274	Identifier	norms_col
>275	IdentifierDeclType	Vector < T >
>276	IfStatement	if ( cholesky )
>277	ElseStatement	else
>278	CompoundStatement	 
>279	ExpressionStatement	 
>280	RelationalExpression	lasso2 < T > ( X , G , DtR , alpha , L , lambda , mode , pos , numThreads , & norm , length_path )
>281	RelationalExpression	T > ( X , G , DtR , alpha , L , lambda , mode , pos , numThreads , & norm , length_path )
>282	Expression	X , G , DtR , alpha , L , lambda , mode , pos , numThreads , & norm , length_path
>283	Expression	G , DtR , alpha , L , lambda , mode , pos , numThreads , & norm , length_path
>284	Expression	DtR , alpha , L , lambda , mode , pos , numThreads , & norm , length_path
>285	Expression	alpha , L , lambda , mode , pos , numThreads , & norm , length_path
>286	Expression	L , lambda , mode , pos , numThreads , & norm , length_path
>287	Expression	lambda , mode , pos , numThreads , & norm , length_path
>288	Expression	mode , pos , numThreads , & norm , length_path
>289	Expression	pos , numThreads , & norm , length_path
>290	Expression	numThreads , & norm , length_path
>291	Expression	& norm , length_path
>292	Identifier	length_path
>293	UnaryOp	& norm
>294	Identifier	norm
>295	UnaryOperator	&
>296	Identifier	numThreads
>297	Identifier	pos
>298	Identifier	mode
>299	Identifier	lambda
>300	Identifier	L
>301	Identifier	alpha
>302	Identifier	DtR
>303	Identifier	G
>304	Identifier	X
>305	Identifier	T
>306	Identifier	lasso2
>307	CompoundStatement	 
>308	ExpressionStatement	 
>309	RelationalExpression	lasso < T > ( X , G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , & norm , length_path )
>310	RelationalExpression	T > ( X , G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , & norm , length_path )
>311	Expression	X , G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , & norm , length_path
>312	Expression	G , DtR , alpha , L , lambda , mode , pos , ols , numThreads , & norm , length_path
>313	Expression	DtR , alpha , L , lambda , mode , pos , ols , numThreads , & norm , length_path
>314	Expression	alpha , L , lambda , mode , pos , ols , numThreads , & norm , length_path
>315	Expression	L , lambda , mode , pos , ols , numThreads , & norm , length_path
>316	Expression	lambda , mode , pos , ols , numThreads , & norm , length_path
>317	Expression	mode , pos , ols , numThreads , & norm , length_path
>318	Expression	pos , ols , numThreads , & norm , length_path
>319	Expression	ols , numThreads , & norm , length_path
>320	Expression	numThreads , & norm , length_path
>321	Expression	& norm , length_path
>322	Identifier	length_path
>323	UnaryOp	& norm
>324	Identifier	norm
>325	UnaryOperator	&
>326	Identifier	numThreads
>327	Identifier	ols
>328	Identifier	pos
>329	Identifier	mode
>330	Identifier	lambda
>331	Identifier	L
>332	Identifier	alpha
>333	Identifier	DtR
>334	Identifier	G
>335	Identifier	X
>336	Identifier	T
>337	Identifier	lasso
>338	Condition	 
>339	Identifier	cholesky
>340	ExpressionStatement	 
>341	CallExpression	norm . setZeros ( )
>342	ArgumentList	 
>343	Callee	norm . setZeros
>344	MemberAccess	norm . setZeros
>345	Identifier	setZeros
>346	Identifier	norm
>347	IdentifierDeclStatement	 
>348	IdentifierDecl	norm ( K , length_path )
>349	Expression	K , length_path
>350	Identifier	length_path
>351	Identifier	K
>352	Identifier	norm
>353	IdentifierDeclType	Matrix < T >
>354	Condition	 
>355	EqualityExpression	nlhs == 2
>356	PrimaryExpression	2
>357	Identifier	nlhs
>358	IdentifierDeclStatement	 
>359	IdentifierDecl	alpha
>360	Identifier	alpha
>361	IdentifierDeclType	SpMatrix < T >
>362	IdentifierDeclStatement	 
>363	IdentifierDecl	DtR ( prDtR , K , M )
>364	Expression	prDtR , K , M
>365	Expression	K , M
>366	Identifier	M
>367	Identifier	K
>368	Identifier	prDtR
>369	Identifier	DtR
>370	IdentifierDeclType	Matrix < T >
>371	IdentifierDeclStatement	 
>372	IdentifierDecl	G ( prG , K , K )
>373	Expression	prG , K , K
>374	Expression	K , K
>375	Identifier	K
>376	Identifier	K
>377	Identifier	prG
>378	Identifier	G
>379	IdentifierDeclType	Matrix < T >
>380	IdentifierDeclStatement	 
>381	IdentifierDecl	X ( prX , n , M )
>382	Expression	prX , n , M
>383	Expression	n , M
>384	Identifier	M
>385	Identifier	n
>386	Identifier	prX
>387	Identifier	X
>388	IdentifierDeclType	Matrix < T >
>389	IfStatement	if ( L > K )
>390	CompoundStatement	 
>391	ExpressionStatement	 
>392	AssignmentExpr	L = K
>393	Identifier	K
>394	Identifier	L
>395	Condition	 
>396	RelationalExpression	L > K
>397	Identifier	K
>398	Identifier	L
>399	IfStatement	if ( L > n && ! ( mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0 ) )
>400	CompoundStatement	 
>401	ExpressionStatement	 
>402	AssignmentExpr	L = n
>403	Identifier	n
>404	Identifier	L
>405	Condition	 
>406	AndExpression	L > n && ! ( mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0 )
>407	UnaryOp	! ( mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0 )
>408	AndExpression	mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0
>409	AndExpression	isZero ( lambda ) && ! pos && lambda2 > 0
>410	AndExpression	! pos && lambda2 > 0
>411	RelationalExpression	lambda2 > 0
>412	PrimaryExpression	0
>413	Identifier	lambda2
>414	UnaryOp	! pos
>415	Identifier	pos
>416	UnaryOperator	!
>417	CallExpression	isZero ( lambda )
>418	ArgumentList	lambda
>419	Argument	lambda
>420	Identifier	lambda
>421	Callee	isZero
>422	Identifier	isZero
>423	EqualityExpression	mode == PENALTY
>424	Identifier	PENALTY
>425	Identifier	mode
>426	UnaryOperator	!
>427	RelationalExpression	L > n
>428	Identifier	n
>429	Identifier	L
>430	ExpressionStatement	 
>431	Expression	prhs [ 3 ] , \"mode\" , PENALTY
>432	Expression	\"mode\" , PENALTY
>433	Identifier	PENALTY
>434	PrimaryExpression	\"mode\"
>435	ArrayIndexing	prhs [ 3 ]
>436	PrimaryExpression	3
>437	Identifier	prhs
>438	Statement	 
>439	Statement	 
>440	Statement	 
>441	Statement	 
>442	Statement	 
>443	Statement	 
>444	Statement	 
>445	Statement	 
>446	Statement	 
>447	Statement	 
>448	IdentifierDeclStatement	 
>449	IdentifierDecl	cholesky = ols || getScalarStructDef < bool > ( prhs [ 3 ] , \"cholesky\" , false )
>450	AssignmentExpr	cholesky = ols || getScalarStructDef < bool > ( prhs [ 3 ] , \"cholesky\" , false )
>451	OrExpression	ols || getScalarStructDef < bool > ( prhs [ 3 ] , \"cholesky\" , false )
>452	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"cholesky\" , false )
>453	RelationalExpression	bool > ( prhs [ 3 ] , \"cholesky\" , false )
>454	Expression	prhs [ 3 ] , \"cholesky\" , false
>455	Expression	\"cholesky\" , false
>456	Identifier	false
>457	PrimaryExpression	\"cholesky\"
>458	ArrayIndexing	prhs [ 3 ]
>459	PrimaryExpression	3
>460	Identifier	prhs
>461	Identifier	bool
>462	Identifier	getScalarStructDef
>463	Identifier	ols
>464	Identifier	cholesky
>465	Identifier	cholesky
>466	IdentifierDeclType	bool
>467	IdentifierDeclStatement	 
>468	IdentifierDecl	ols = getScalarStructDef < bool > ( prhs [ 3 ] , \"ols\" , false )
>469	AssignmentExpr	ols = getScalarStructDef < bool > ( prhs [ 3 ] , \"ols\" , false )
>470	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"ols\" , false )
>471	RelationalExpression	bool > ( prhs [ 3 ] , \"ols\" , false )
>472	Expression	prhs [ 3 ] , \"ols\" , false
>473	Expression	\"ols\" , false
>474	Identifier	false
>475	PrimaryExpression	\"ols\"
>476	ArrayIndexing	prhs [ 3 ]
>477	PrimaryExpression	3
>478	Identifier	prhs
>479	Identifier	bool
>480	Identifier	getScalarStructDef
>481	Identifier	ols
>482	Identifier	ols
>483	IdentifierDeclType	bool
>484	IdentifierDeclStatement	 
>485	IdentifierDecl	verbose = getScalarStructDef < bool > ( prhs [ 3 ] , \"verbose\" , true )
>486	AssignmentExpr	verbose = getScalarStructDef < bool > ( prhs [ 3 ] , \"verbose\" , true )
>487	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"verbose\" , true )
>488	RelationalExpression	bool > ( prhs [ 3 ] , \"verbose\" , true )
>489	Expression	prhs [ 3 ] , \"verbose\" , true
>490	Expression	\"verbose\" , true
>491	Identifier	true
>492	PrimaryExpression	\"verbose\"
>493	ArrayIndexing	prhs [ 3 ]
>494	PrimaryExpression	3
>495	Identifier	prhs
>496	Identifier	bool
>497	Identifier	getScalarStructDef
>498	Identifier	verbose
>499	Identifier	verbose
>500	IdentifierDeclType	bool
>501	IdentifierDeclStatement	 
>502	IdentifierDecl	pos = getScalarStructDef < bool > ( prhs [ 3 ] , \"pos\" , false )
>503	AssignmentExpr	pos = getScalarStructDef < bool > ( prhs [ 3 ] , \"pos\" , false )
>504	RelationalExpression	getScalarStructDef < bool > ( prhs [ 3 ] , \"pos\" , false )
>505	RelationalExpression	bool > ( prhs [ 3 ] , \"pos\" , false )
>506	Expression	prhs [ 3 ] , \"pos\" , false
>507	Expression	\"pos\" , false
>508	Identifier	false
>509	PrimaryExpression	\"pos\"
>510	ArrayIndexing	prhs [ 3 ]
>511	PrimaryExpression	3
>512	Identifier	prhs
>513	Identifier	bool
>514	Identifier	getScalarStructDef
>515	Identifier	pos
>516	Identifier	pos
>517	IdentifierDeclType	bool
>518	ExpressionStatement	 
>519	Expression	prhs [ 3 ] , \"numThreads\" , - 1
>520	Expression	\"numThreads\" , - 1
>521	UnaryOp	- 1
>522	PrimaryExpression	1
>523	UnaryOperator	-
>524	PrimaryExpression	\"numThreads\"
>525	ArrayIndexing	prhs [ 3 ]
>526	PrimaryExpression	3
>527	Identifier	prhs
>528	Statement	 
>529	Statement	 
>530	Statement	 
>531	Statement	 
>532	Statement	 
>533	Statement	 
>534	Statement	 
>535	ExpressionStatement	 
>536	Expression	prhs [ 3 ] , \"length_path\" , 4 * L
>537	Expression	\"length_path\" , 4 * L
>538	MultiplicativeExpression	4 * L
>539	Identifier	L
>540	PrimaryExpression	4
>541	PrimaryExpression	\"length_path\"
>542	ArrayIndexing	prhs [ 3 ]
>543	PrimaryExpression	3
>544	Identifier	prhs
>545	Statement	 
>546	Statement	 
>547	Statement	 
>548	Statement	 
>549	Statement	 
>550	Statement	 
>551	Statement	 
>552	ExpressionStatement	 
>553	Expression	prhs [ 3 ] , \"L\" , K1
>554	Expression	\"L\" , K1
>555	Identifier	K1
>556	PrimaryExpression	\"L\"
>557	ArrayIndexing	prhs [ 3 ]
>558	PrimaryExpression	3
>559	Identifier	prhs
>560	Statement	 
>561	Statement	 
>562	Statement	 
>563	Statement	 
>564	Statement	 
>565	Statement	 
>566	Statement	 
>567	IdentifierDeclStatement	 
>568	IdentifierDecl	lambda2 = getScalarStructDef < T > ( prhs [ 3 ] , \"lambda2\" , 0 )
>569	AssignmentExpr	lambda2 = getScalarStructDef < T > ( prhs [ 3 ] , \"lambda2\" , 0 )
>570	RelationalExpression	getScalarStructDef < T > ( prhs [ 3 ] , \"lambda2\" , 0 )
>571	RelationalExpression	T > ( prhs [ 3 ] , \"lambda2\" , 0 )
>572	Expression	prhs [ 3 ] , \"lambda2\" , 0
>573	Expression	\"lambda2\" , 0
>574	PrimaryExpression	0
>575	PrimaryExpression	\"lambda2\"
>576	ArrayIndexing	prhs [ 3 ]
>577	PrimaryExpression	3
>578	Identifier	prhs
>579	Identifier	T
>580	Identifier	getScalarStructDef
>581	Identifier	lambda2
>582	Identifier	lambda2
>583	IdentifierDeclType	T
>584	IdentifierDeclStatement	 
>585	IdentifierDecl	lambda = getScalarStruct < T > ( prhs [ 3 ] , \"lambda\" )
>586	AssignmentExpr	lambda = getScalarStruct < T > ( prhs [ 3 ] , \"lambda\" )
>587	RelationalExpression	getScalarStruct < T > ( prhs [ 3 ] , \"lambda\" )
>588	RelationalExpression	T > ( prhs [ 3 ] , \"lambda\" )
>589	Expression	prhs [ 3 ] , \"lambda\"
>590	PrimaryExpression	\"lambda\"
>591	ArrayIndexing	prhs [ 3 ]
>592	PrimaryExpression	3
>593	Identifier	prhs
>594	Identifier	T
>595	Identifier	getScalarStruct
>596	Identifier	lambda
>597	Identifier	lambda
>598	IdentifierDeclType	T
>599	IfStatement	if ( M != M2 )
>600	ExpressionStatement	 
>601	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>602	ArgumentList	\"argument sizes are not consistent\"
>603	Argument	\"argument sizes are not consistent\"
>604	PrimaryExpression	\"argument sizes are not consistent\"
>605	Callee	mexErrMsgTxt
>606	Identifier	mexErrMsgTxt
>607	Condition	 
>608	EqualityExpression	M != M2
>609	Identifier	M2
>610	Identifier	M
>611	IfStatement	if ( K1 != K3 )
>612	ExpressionStatement	 
>613	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>614	ArgumentList	\"argument sizes are not consistent\"
>615	Argument	\"argument sizes are not consistent\"
>616	PrimaryExpression	\"argument sizes are not consistent\"
>617	Callee	mexErrMsgTxt
>618	Identifier	mexErrMsgTxt
>619	Condition	 
>620	EqualityExpression	K1 != K3
>621	Identifier	K3
>622	Identifier	K1
>623	ExpressionStatement	 
>624	ArrayIndexing	dimsDtR [ 1 ]
>625	PrimaryExpression	1
>626	Identifier	dimsDtR
>627	Statement	 
>628	Statement	 
>629	Statement	 
>630	Statement	 
>631	Statement	 
>632	Statement	 
>633	Statement	 
>634	ExpressionStatement	 
>635	ArrayIndexing	dimsDtR [ 0 ]
>636	PrimaryExpression	0
>637	Identifier	dimsDtR
>638	Statement	 
>639	Statement	 
>640	Statement	 
>641	Statement	 
>642	Statement	 
>643	Statement	 
>644	Statement	 
>645	IdentifierDeclStatement	 
>646	IdentifierDecl	* dimsDtR = mxGetDimensions ( prhs [ 2 ] )
>647	AssignmentExpr	* dimsDtR = mxGetDimensions ( prhs [ 2 ] )
>648	CallExpression	mxGetDimensions ( prhs [ 2 ] )
>649	ArgumentList	prhs [ 2 ]
>650	Argument	prhs [ 2 ]
>651	ArrayIndexing	prhs [ 2 ]
>652	PrimaryExpression	2
>653	Identifier	prhs
>654	Callee	mxGetDimensions
>655	Identifier	mxGetDimensions
>656	Identifier	dimsDtR
>657	Identifier	dimsDtR
>658	IdentifierDeclType	const mwSize *
>659	ExpressionStatement	 
>660	CallExpression	mxGetPr ( prhs [ 2 ] )
>661	ArgumentList	prhs [ 2 ]
>662	Argument	prhs [ 2 ]
>663	ArrayIndexing	prhs [ 2 ]
>664	PrimaryExpression	2
>665	Identifier	prhs
>666	Callee	mxGetPr
>667	Identifier	mxGetPr
>668	Statement	 
>669	Statement	 
>670	Statement	 
>671	Statement	 
>672	Statement	 
>673	Statement	 
>674	Statement	 
>675	Statement	 
>676	Statement	 
>677	IdentifierDeclStatement	 
>678	IdentifierDecl	K = K1
>679	AssignmentExpr	K = K1
>680	Identifier	K1
>681	Identifier	K1
>682	Identifier	K
>683	IdentifierDeclType	long
>684	IfStatement	if ( K1 != K2 )
>685	ExpressionStatement	 
>686	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>687	ArgumentList	\"argument sizes are not consistent\"
>688	Argument	\"argument sizes are not consistent\"
>689	PrimaryExpression	\"argument sizes are not consistent\"
>690	Callee	mexErrMsgTxt
>691	Identifier	mexErrMsgTxt
>692	Condition	 
>693	EqualityExpression	K1 != K2
>694	Identifier	K2
>695	Identifier	K1
>696	ExpressionStatement	 
>697	ArrayIndexing	dimsD [ 1 ]
>698	PrimaryExpression	1
>699	Identifier	dimsD
>700	Statement	 
>701	Statement	 
>702	Statement	 
>703	Statement	 
>704	Statement	 
>705	Statement	 
>706	Statement	 
>707	ExpressionStatement	 
>708	ArrayIndexing	dimsD [ 0 ]
>709	PrimaryExpression	0
>710	Identifier	dimsD
>711	Statement	 
>712	Statement	 
>713	Statement	 
>714	Statement	 
>715	Statement	 
>716	Statement	 
>717	Statement	 
>718	IdentifierDeclStatement	 
>719	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>720	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>721	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>722	ArgumentList	prhs [ 1 ]
>723	Argument	prhs [ 1 ]
>724	ArrayIndexing	prhs [ 1 ]
>725	PrimaryExpression	1
>726	Identifier	prhs
>727	Callee	mxGetDimensions
>728	Identifier	mxGetDimensions
>729	Identifier	dimsD
>730	Identifier	dimsD
>731	IdentifierDeclType	const mwSize *
>732	ExpressionStatement	 
>733	CallExpression	mxGetPr ( prhs [ 1 ] )
>734	ArgumentList	prhs [ 1 ]
>735	Argument	prhs [ 1 ]
>736	ArrayIndexing	prhs [ 1 ]
>737	PrimaryExpression	1
>738	Identifier	prhs
>739	Callee	mxGetPr
>740	Identifier	mxGetPr
>741	Statement	 
>742	Statement	 
>743	Statement	 
>744	Statement	 
>745	Statement	 
>746	Statement	 
>747	Statement	 
>748	Statement	 
>749	Statement	 
>750	ExpressionStatement	 
>751	ArrayIndexing	dimsX [ 1 ]
>752	PrimaryExpression	1
>753	Identifier	dimsX
>754	Statement	 
>755	Statement	 
>756	Statement	 
>757	Statement	 
>758	Statement	 
>759	Statement	 
>760	Statement	 
>761	ExpressionStatement	 
>762	ArrayIndexing	dimsX [ 0 ]
>763	PrimaryExpression	0
>764	Identifier	dimsX
>765	Statement	 
>766	Statement	 
>767	Statement	 
>768	Statement	 
>769	Statement	 
>770	Statement	 
>771	Statement	 
>772	IdentifierDeclStatement	 
>773	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>774	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>775	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>776	ArgumentList	prhs [ 0 ]
>777	Argument	prhs [ 0 ]
>778	ArrayIndexing	prhs [ 0 ]
>779	PrimaryExpression	0
>780	Identifier	prhs
>781	Callee	mxGetDimensions
>782	Identifier	mxGetDimensions
>783	Identifier	dimsX
>784	Identifier	dimsX
>785	IdentifierDeclType	const mwSize *
>786	ExpressionStatement	 
>787	CallExpression	mxGetPr ( prhs [ 0 ] )
>788	ArgumentList	prhs [ 0 ]
>789	Argument	prhs [ 0 ]
>790	ArrayIndexing	prhs [ 0 ]
>791	PrimaryExpression	0
>792	Identifier	prhs
>793	Callee	mxGetPr
>794	Identifier	mxGetPr
>795	Statement	 
>796	Statement	 
>797	Statement	 
>798	Statement	 
>799	Statement	 
>800	Statement	 
>801	Statement	 
>802	Statement	 
>803	Statement	 
>804	IfStatement	if ( ! mxIsStruct ( prhs [ 3 ] ) )
>805	ExpressionStatement	 
>806	CallExpression	mexErrMsgTxt ( \"argument 4 should be struct\" )
>807	ArgumentList	\"argument 4 should be struct\"
>808	Argument	\"argument 4 should be struct\"
>809	PrimaryExpression	\"argument 4 should be struct\"
>810	Callee	mexErrMsgTxt
>811	Identifier	mexErrMsgTxt
>812	Condition	 
>813	UnaryOp	! mxIsStruct ( prhs [ 3 ] )
>814	CallExpression	mxIsStruct ( prhs [ 3 ] )
>815	ArgumentList	prhs [ 3 ]
>816	Argument	prhs [ 3 ]
>817	ArrayIndexing	prhs [ 3 ]
>818	PrimaryExpression	3
>819	Identifier	prhs
>820	Callee	mxIsStruct
>821	Identifier	mxIsStruct
>822	UnaryOperator	!
>823	IfStatement	if ( mxIsSparse ( prhs [ 2 ] ) )
>824	ExpressionStatement	 
>825	CallExpression	mexErrMsgTxt ( \"argument 3 should be full\" )
>826	ArgumentList	\"argument 3 should be full\"
>827	Argument	\"argument 3 should be full\"
>828	PrimaryExpression	\"argument 3 should be full\"
>829	Callee	mexErrMsgTxt
>830	Identifier	mexErrMsgTxt
>831	Condition	 
>832	CallExpression	mxIsSparse ( prhs [ 2 ] )
>833	ArgumentList	prhs [ 2 ]
>834	Argument	prhs [ 2 ]
>835	ArrayIndexing	prhs [ 2 ]
>836	PrimaryExpression	2
>837	Identifier	prhs
>838	Callee	mxIsSparse
>839	Identifier	mxIsSparse
>840	IfStatement	if ( ! mexCheckType < T > ( prhs [ 2 ] ) )
>841	ExpressionStatement	 
>842	CallExpression	mexErrMsgTxt ( \"type of argument 3 is not consistent\" )
>843	ArgumentList	\"type of argument 3 is not consistent\"
>844	Argument	\"type of argument 3 is not consistent\"
>845	PrimaryExpression	\"type of argument 3 is not consistent\"
>846	Callee	mexErrMsgTxt
>847	Identifier	mexErrMsgTxt
>848	Condition	 
>849	RelationalExpression	! mexCheckType < T > ( prhs [ 2 ] )
>850	RelationalExpression	T > ( prhs [ 2 ] )
>851	ArrayIndexing	prhs [ 2 ]
>852	PrimaryExpression	2
>853	Identifier	prhs
>854	Identifier	T
>855	UnaryOp	! mexCheckType
>856	Identifier	mexCheckType
>857	UnaryOperator	!
>858	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>859	ExpressionStatement	 
>860	CallExpression	mexErrMsgTxt ( \"argument 2 should be full\" )
>861	ArgumentList	\"argument 2 should be full\"
>862	Argument	\"argument 2 should be full\"
>863	PrimaryExpression	\"argument 2 should be full\"
>864	Callee	mexErrMsgTxt
>865	Identifier	mexErrMsgTxt
>866	Condition	 
>867	CallExpression	mxIsSparse ( prhs [ 1 ] )
>868	ArgumentList	prhs [ 1 ]
>869	Argument	prhs [ 1 ]
>870	ArrayIndexing	prhs [ 1 ]
>871	PrimaryExpression	1
>872	Identifier	prhs
>873	Callee	mxIsSparse
>874	Identifier	mxIsSparse
>875	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>876	ExpressionStatement	 
>877	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>878	ArgumentList	\"type of argument 2 is not consistent\"
>879	Argument	\"type of argument 2 is not consistent\"
>880	PrimaryExpression	\"type of argument 2 is not consistent\"
>881	Callee	mexErrMsgTxt
>882	Identifier	mexErrMsgTxt
>883	Condition	 
>884	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>885	RelationalExpression	T > ( prhs [ 1 ] )
>886	ArrayIndexing	prhs [ 1 ]
>887	PrimaryExpression	1
>888	Identifier	prhs
>889	Identifier	T
>890	UnaryOp	! mexCheckType
>891	Identifier	mexCheckType
>892	UnaryOperator	!
>893	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>894	ExpressionStatement	 
>895	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>896	ArgumentList	\"argument 1 should be full\"
>897	Argument	\"argument 1 should be full\"
>898	PrimaryExpression	\"argument 1 should be full\"
>899	Callee	mexErrMsgTxt
>900	Identifier	mexErrMsgTxt
>901	Condition	 
>902	CallExpression	mxIsSparse ( prhs [ 0 ] )
>903	ArgumentList	prhs [ 0 ]
>904	Argument	prhs [ 0 ]
>905	ArrayIndexing	prhs [ 0 ]
>906	PrimaryExpression	0
>907	Identifier	prhs
>908	Callee	mxIsSparse
>909	Identifier	mxIsSparse
>910	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>911	ExpressionStatement	 
>912	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>913	ArgumentList	\"type of argument 1 is not consistent\"
>914	Argument	\"type of argument 1 is not consistent\"
>915	PrimaryExpression	\"type of argument 1 is not consistent\"
>916	Callee	mexErrMsgTxt
>917	Identifier	mexErrMsgTxt
>918	Condition	 
>919	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>920	RelationalExpression	T > ( prhs [ 0 ] )
>921	ArrayIndexing	prhs [ 0 ]
>922	PrimaryExpression	0
>923	Identifier	prhs
>924	Identifier	T
>925	UnaryOp	! mexCheckType
>926	Identifier	mexCheckType
>927	UnaryOperator	!
>928	CompoundStatement	 
>929	ExpressionStatement	 
>930	CallExpression	convertSpMatrix ( plhs [ 0 ] , alpha . m ( ) , alpha . n ( ) , alpha . n ( ) , alpha . nzmax ( ) , alpha . v ( ) , \
>931	ArgumentList	plhs [ 0 ]
>932	Argument	alpha . pB ( )
>933	CallExpression	alpha . pB ( )
>934	ArgumentList	 
>935	Callee	alpha . pB
>936	MemberAccess	alpha . pB
>937	Identifier	pB
>938	Identifier	alpha
>939	Argument	alpha . r ( )
>940	CallExpression	alpha . r ( )
>941	ArgumentList	 
>942	Callee	alpha . r
>943	MemberAccess	alpha . r
>944	Identifier	r
>945	Identifier	alpha
>946	Argument	alpha . v ( )
>947	CallExpression	alpha . v ( )
>948	ArgumentList	 
>949	Callee	alpha . v
>950	MemberAccess	alpha . v
>951	Identifier	v
>952	Identifier	alpha
>953	Argument	alpha . nzmax ( )
>954	CallExpression	alpha . nzmax ( )
>955	ArgumentList	 
>956	Callee	alpha . nzmax
>957	MemberAccess	alpha . nzmax
>958	Identifier	nzmax
>959	Identifier	alpha
>960	Argument	alpha . n ( )
>961	CallExpression	alpha . n ( )
>962	ArgumentList	 
>963	Callee	alpha . n
>964	MemberAccess	alpha . n
>965	Identifier	n
>966	Identifier	alpha
>967	Argument	alpha . n ( )
>968	CallExpression	alpha . n ( )
>969	ArgumentList	 
>970	Callee	alpha . n
>971	MemberAccess	alpha . n
>972	Identifier	n
>973	Identifier	alpha
>974	Argument	alpha . m ( )
>975	CallExpression	alpha . m ( )
>976	ArgumentList	 
>977	Callee	alpha . m
>978	MemberAccess	alpha . m
>979	Identifier	m
>980	Identifier	alpha
>981	Argument	plhs [ 0 ]
>982	ArrayIndexing	plhs [ 0 ]
>983	PrimaryExpression	0
>984	Identifier	plhs
>985	Callee	convertSpMatrix
>986	Identifier	convertSpMatrix
>987	IfStatement	if ( nlhs == 2 )
>988	ElseStatement	else
>989	CompoundStatement	 
>990	IfStatement	if ( cholesky )
>991	ElseStatement	else
>992	CompoundStatement	 
>993	ExpressionStatement	 
>994	RelationalExpression	lasso2 < T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , numThreads , NULL , length_path )
>995	RelationalExpression	T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , numThreads , NULL , length_path )
>996	Expression	X , D , alpha , L , lambda , lambda2 , mode , pos , numThreads , NULL , length_path
>997	Expression	D , alpha , L , lambda , lambda2 , mode , pos , numThreads , NULL , length_path
>998	Expression	alpha , L , lambda , lambda2 , mode , pos , numThreads , NULL , length_path
>999	Expression	L , lambda , lambda2 , mode , pos , numThreads , NULL , length_path
>1000	Expression	lambda , lambda2 , mode , pos , numThreads , NULL , length_path
>1001	Expression	lambda2 , mode , pos , numThreads , NULL , length_path
>1002	Expression	mode , pos , numThreads , NULL , length_path
>1003	Expression	pos , numThreads , NULL , length_path
>1004	Expression	numThreads , NULL , length_path
>1005	Expression	NULL , length_path
>1006	Identifier	length_path
>1007	Identifier	NULL
>1008	Identifier	numThreads
>1009	Identifier	pos
>1010	Identifier	mode
>1011	Identifier	lambda2
>1012	Identifier	lambda
>1013	Identifier	L
>1014	Identifier	alpha
>1015	Identifier	D
>1016	Identifier	X
>1017	Identifier	T
>1018	Identifier	lasso2
>1019	CompoundStatement	 
>1020	ExpressionStatement	 
>1021	RelationalExpression	lasso < T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , NULL , length_path )
>1022	RelationalExpression	T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , NULL , length_path )
>1023	Expression	X , D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , NULL , length_path
>1024	Expression	D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , NULL , length_path
>1025	Expression	alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , NULL , length_path
>1026	Expression	L , lambda , lambda2 , mode , pos , ols , numThreads , NULL , length_path
>1027	Expression	lambda , lambda2 , mode , pos , ols , numThreads , NULL , length_path
>1028	Expression	lambda2 , mode , pos , ols , numThreads , NULL , length_path
>1029	Expression	mode , pos , ols , numThreads , NULL , length_path
>1030	Expression	pos , ols , numThreads , NULL , length_path
>1031	Expression	ols , numThreads , NULL , length_path
>1032	Expression	numThreads , NULL , length_path
>1033	Expression	NULL , length_path
>1034	Identifier	length_path
>1035	Identifier	NULL
>1036	Identifier	numThreads
>1037	Identifier	ols
>1038	Identifier	pos
>1039	Identifier	mode
>1040	Identifier	lambda2
>1041	Identifier	lambda
>1042	Identifier	L
>1043	Identifier	alpha
>1044	Identifier	D
>1045	Identifier	X
>1046	Identifier	T
>1047	Identifier	lasso
>1048	Condition	 
>1049	Identifier	cholesky
>1050	CompoundStatement	 
>1051	ForStatement	for ( long i = 0 ; i < length ; ++ i )
>1052	CompoundStatement	 
>1053	ExpressionStatement	 
>1054	CallExpression	norm . copyCol ( i , col )
>1055	ArgumentList	i
>1056	Argument	col
>1057	Identifier	col
>1058	Argument	i
>1059	Identifier	i
>1060	Callee	norm . copyCol
>1061	MemberAccess	norm . copyCol
>1062	Identifier	copyCol
>1063	Identifier	norm
>1064	ExpressionStatement	 
>1065	CallExpression	norm2 . refCol ( i , col )
>1066	ArgumentList	i
>1067	Argument	col
>1068	Identifier	col
>1069	Argument	i
>1070	Identifier	i
>1071	Callee	norm2 . refCol
>1072	MemberAccess	norm2 . refCol
>1073	Identifier	refCol
>1074	Identifier	norm2
>1075	UnaryExpression	 
>1076	Identifier	i
>1077	IncDec	++
>1078	Condition	 
>1079	RelationalExpression	i < length
>1080	Identifier	length
>1081	Identifier	i
>1082	ForInit	 
>1083	IdentifierDeclStatement	long i = 0 ;
>1084	IdentifierDecl	i = 0
>1085	AssignmentExpr	i = 0
>1086	PrimaryExpression	0
>1087	Identifier	i
>1088	Identifier	i
>1089	IdentifierDeclType	long
>1090	IdentifierDeclStatement	 
>1091	IdentifierDecl	col
>1092	Identifier	col
>1093	IdentifierDeclType	Vector < T >
>1094	IdentifierDeclStatement	 
>1095	IdentifierDecl	norm2 ( pr_norm , K , length )
>1096	Expression	pr_norm , K , length
>1097	Expression	K , length
>1098	Identifier	length
>1099	Identifier	K
>1100	Identifier	pr_norm
>1101	Identifier	norm2
>1102	IdentifierDeclType	Matrix < T >
>1103	ExpressionStatement	 
>1104	CallExpression	mxGetPr ( plhs [ 1 ] )
>1105	ArgumentList	plhs [ 1 ]
>1106	Argument	plhs [ 1 ]
>1107	ArrayIndexing	plhs [ 1 ]
>1108	PrimaryExpression	1
>1109	Identifier	plhs
>1110	Callee	mxGetPr
>1111	Identifier	mxGetPr
>1112	Statement	 
>1113	Statement	 
>1114	Statement	 
>1115	Statement	 
>1116	Statement	 
>1117	Statement	 
>1118	Statement	 
>1119	Statement	 
>1120	Statement	 
>1121	ExpressionStatement	 
>1122	AssignmentExpr	plhs [ 1 ] = createMatrix < T > ( K , length )
>1123	RelationalExpression	createMatrix < T > ( K , length )
>1124	RelationalExpression	T > ( K , length )
>1125	Expression	K , length
>1126	Identifier	length
>1127	Identifier	K
>1128	Identifier	T
>1129	Identifier	createMatrix
>1130	ArrayIndexing	plhs [ 1 ]
>1131	PrimaryExpression	1
>1132	Identifier	plhs
>1133	ForStatement	for ( long i = 1 ; i < norms_col . n ( ) ; ++ i )
>1134	IfStatement	if ( norms_col [ i ] )
>1135	ExpressionStatement	 
>1136	UnaryExpression	++ length
>1137	Identifier	length
>1138	IncDec	++
>1139	Condition	 
>1140	ArrayIndexing	norms_col [ i ]
>1141	Identifier	i
>1142	Identifier	norms_col
>1143	UnaryExpression	 
>1144	Identifier	i
>1145	IncDec	++
>1146	Condition	 
>1147	RelationalExpression	i < norms_col . n ( )
>1148	CallExpression	norms_col . n ( )
>1149	ArgumentList	 
>1150	Callee	norms_col . n
>1151	MemberAccess	norms_col . n
>1152	Identifier	n
>1153	Identifier	norms_col
>1154	Identifier	i
>1155	ForInit	 
>1156	IdentifierDeclStatement	long i = 1 ;
>1157	IdentifierDecl	i = 1
>1158	AssignmentExpr	i = 1
>1159	PrimaryExpression	1
>1160	Identifier	i
>1161	Identifier	i
>1162	IdentifierDeclType	long
>1163	IdentifierDeclStatement	 
>1164	IdentifierDecl	length = 1
>1165	AssignmentExpr	length = 1
>1166	PrimaryExpression	1
>1167	Identifier	length
>1168	Identifier	length
>1169	IdentifierDeclType	long
>1170	ExpressionStatement	 
>1171	CallExpression	norm . norm_2_cols ( norms_col )
>1172	ArgumentList	norms_col
>1173	Argument	norms_col
>1174	Identifier	norms_col
>1175	Callee	norm . norm_2_cols
>1176	MemberAccess	norm . norm_2_cols
>1177	Identifier	norm_2_cols
>1178	Identifier	norm
>1179	IdentifierDeclStatement	 
>1180	IdentifierDecl	norms_col
>1181	Identifier	norms_col
>1182	IdentifierDeclType	Vector < T >
>1183	IfStatement	if ( cholesky )
>1184	ElseStatement	else
>1185	CompoundStatement	 
>1186	ExpressionStatement	 
>1187	RelationalExpression	lasso2 < T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , numThreads , & norm , length_path )
>1188	RelationalExpression	T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , numThreads , & norm , length_path )
>1189	Expression	X , D , alpha , L , lambda , lambda2 , mode , pos , numThreads , & norm , length_path
>1190	Expression	D , alpha , L , lambda , lambda2 , mode , pos , numThreads , & norm , length_path
>1191	Expression	alpha , L , lambda , lambda2 , mode , pos , numThreads , & norm , length_path
>1192	Expression	L , lambda , lambda2 , mode , pos , numThreads , & norm , length_path
>1193	Expression	lambda , lambda2 , mode , pos , numThreads , & norm , length_path
>1194	Expression	lambda2 , mode , pos , numThreads , & norm , length_path
>1195	Expression	mode , pos , numThreads , & norm , length_path
>1196	Expression	pos , numThreads , & norm , length_path
>1197	Expression	numThreads , & norm , length_path
>1198	Expression	& norm , length_path
>1199	Identifier	length_path
>1200	UnaryOp	& norm
>1201	Identifier	norm
>1202	UnaryOperator	&
>1203	Identifier	numThreads
>1204	Identifier	pos
>1205	Identifier	mode
>1206	Identifier	lambda2
>1207	Identifier	lambda
>1208	Identifier	L
>1209	Identifier	alpha
>1210	Identifier	D
>1211	Identifier	X
>1212	Identifier	T
>1213	Identifier	lasso2
>1214	CompoundStatement	 
>1215	ExpressionStatement	 
>1216	RelationalExpression	lasso < T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , & norm , length_\
>1217	RelationalExpression	T > ( X , D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , & norm , length_path )
>1218	Expression	X , D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , & norm , length_path
>1219	Expression	D , alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , & norm , length_path
>1220	Expression	alpha , L , lambda , lambda2 , mode , pos , ols , numThreads , & norm , length_path
>1221	Expression	L , lambda , lambda2 , mode , pos , ols , numThreads , & norm , length_path
>1222	Expression	lambda , lambda2 , mode , pos , ols , numThreads , & norm , length_path
>1223	Expression	lambda2 , mode , pos , ols , numThreads , & norm , length_path
>1224	Expression	mode , pos , ols , numThreads , & norm , length_path
>1225	Expression	pos , ols , numThreads , & norm , length_path
>1226	Expression	ols , numThreads , & norm , length_path
>1227	Expression	numThreads , & norm , length_path
>1228	Expression	& norm , length_path
>1229	Identifier	length_path
>1230	UnaryOp	& norm
>1231	Identifier	norm
>1232	UnaryOperator	&
>1233	Identifier	numThreads
>1234	Identifier	ols
>1235	Identifier	pos
>1236	Identifier	mode
>1237	Identifier	lambda2
>1238	Identifier	lambda
>1239	Identifier	L
>1240	Identifier	alpha
>1241	Identifier	D
>1242	Identifier	X
>1243	Identifier	T
>1244	Identifier	lasso
>1245	Condition	 
>1246	Identifier	cholesky
>1247	ExpressionStatement	 
>1248	CallExpression	norm . setZeros ( )
>1249	ArgumentList	 
>1250	Callee	norm . setZeros
>1251	MemberAccess	norm . setZeros
>1252	Identifier	setZeros
>1253	Identifier	norm
>1254	IdentifierDeclStatement	 
>1255	IdentifierDecl	norm ( K , length_path )
>1256	Expression	K , length_path
>1257	Identifier	length_path
>1258	Identifier	K
>1259	Identifier	norm
>1260	IdentifierDeclType	Matrix < T >
>1261	Condition	 
>1262	EqualityExpression	nlhs == 2
>1263	PrimaryExpression	2
>1264	Identifier	nlhs
>1265	IdentifierDeclStatement	 
>1266	IdentifierDecl	alpha
>1267	Identifier	alpha
>1268	IdentifierDeclType	SpMatrix < T >
>1269	IdentifierDeclStatement	 
>1270	IdentifierDecl	D ( prD , n , K )
>1271	Expression	prD , n , K
>1272	Expression	n , K
>1273	Identifier	K
>1274	Identifier	n
>1275	Identifier	prD
>1276	Identifier	D
>1277	IdentifierDeclType	Matrix < T >
>1278	IdentifierDeclStatement	 
>1279	IdentifierDecl	X ( prX , n , M )
>1280	Expression	prX , n , M
>1281	Expression	n , M
>1282	Identifier	M
>1283	Identifier	n
>1284	Identifier	prX
>1285	Identifier	X
>1286	IdentifierDeclType	Matrix < T >
>1287	IfStatement	if ( L > K )
>1288	CompoundStatement	 
>1289	ExpressionStatement	 
>1290	AssignmentExpr	L = K
>1291	Identifier	K
>1292	Identifier	L
>1293	Condition	 
>1294	RelationalExpression	L > K
>1295	Identifier	K
>1296	Identifier	L
>1297	IfStatement	if ( L > n && ! ( mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0 ) )
>1298	CompoundStatement	 
>1299	ExpressionStatement	 
>1300	AssignmentExpr	L = n
>1301	Identifier	n
>1302	Identifier	L
>1303	Condition	 
>1304	AndExpression	L > n && ! ( mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0 )
>1305	UnaryOp	! ( mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0 )
>1306	AndExpression	mode == PENALTY && isZero ( lambda ) && ! pos && lambda2 > 0
>1307	AndExpression	isZero ( lambda ) && ! pos && lambda2 > 0
>1308	AndExpression	! pos && lambda2 > 0
>1309	RelationalExpression	lambda2 > 0
>1310	PrimaryExpression	0
>1311	Identifier	lambda2
>1312	UnaryOp	! pos
>1313	Identifier	pos
>1314	UnaryOperator	!
>1315	CallExpression	isZero ( lambda )
>1316	ArgumentList	lambda
>1317	Argument	lambda
>1318	Identifier	lambda
>1319	Callee	isZero
>1320	Identifier	isZero
>1321	EqualityExpression	mode == PENALTY
>1322	Identifier	PENALTY
>1323	Identifier	mode
>1324	UnaryOperator	!
>1325	RelationalExpression	L > n
>1326	Identifier	n
>1327	Identifier	L
>1328	ExpressionStatement	 
>1329	Expression	prhs [ 2 ] , \"mode\" , PENALTY
>1330	Expression	\"mode\" , PENALTY
>1331	Identifier	PENALTY
>1332	PrimaryExpression	\"mode\"
>1333	ArrayIndexing	prhs [ 2 ]
>1334	PrimaryExpression	2
>1335	Identifier	prhs
>1336	Statement	 
>1337	Statement	 
>1338	Statement	 
>1339	Statement	 
>1340	Statement	 
>1341	Statement	 
>1342	Statement	 
>1343	Statement	 
>1344	Statement	 
>1345	Statement	 
>1346	IdentifierDeclStatement	 
>1347	IdentifierDecl	cholesky = ols || getScalarStructDef < bool > ( prhs [ 2 ] , \"cholesky\" , false )
>1348	AssignmentExpr	cholesky = ols || getScalarStructDef < bool > ( prhs [ 2 ] , \"cholesky\" , false )
>1349	OrExpression	ols || getScalarStructDef < bool > ( prhs [ 2 ] , \"cholesky\" , false )
>1350	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"cholesky\" , false )
>1351	RelationalExpression	bool > ( prhs [ 2 ] , \"cholesky\" , false )
>1352	Expression	prhs [ 2 ] , \"cholesky\" , false
>1353	Expression	\"cholesky\" , false
>1354	Identifier	false
>1355	PrimaryExpression	\"cholesky\"
>1356	ArrayIndexing	prhs [ 2 ]
>1357	PrimaryExpression	2
>1358	Identifier	prhs
>1359	Identifier	bool
>1360	Identifier	getScalarStructDef
>1361	Identifier	ols
>1362	Identifier	cholesky
>1363	Identifier	cholesky
>1364	IdentifierDeclType	bool
>1365	IdentifierDeclStatement	 
>1366	IdentifierDecl	ols = getScalarStructDef < bool > ( prhs [ 2 ] , \"ols\" , false )
>1367	AssignmentExpr	ols = getScalarStructDef < bool > ( prhs [ 2 ] , \"ols\" , false )
>1368	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"ols\" , false )
>1369	RelationalExpression	bool > ( prhs [ 2 ] , \"ols\" , false )
>1370	Expression	prhs [ 2 ] , \"ols\" , false
>1371	Expression	\"ols\" , false
>1372	Identifier	false
>1373	PrimaryExpression	\"ols\"
>1374	ArrayIndexing	prhs [ 2 ]
>1375	PrimaryExpression	2
>1376	Identifier	prhs
>1377	Identifier	bool
>1378	Identifier	getScalarStructDef
>1379	Identifier	ols
>1380	Identifier	ols
>1381	IdentifierDeclType	bool
>1382	IdentifierDeclStatement	 
>1383	IdentifierDecl	verbose = getScalarStructDef < bool > ( prhs [ 2 ] , \"verbose\" , false )
>1384	AssignmentExpr	verbose = getScalarStructDef < bool > ( prhs [ 2 ] , \"verbose\" , false )
>1385	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"verbose\" , false )
>1386	RelationalExpression	bool > ( prhs [ 2 ] , \"verbose\" , false )
>1387	Expression	prhs [ 2 ] , \"verbose\" , false
>1388	Expression	\"verbose\" , false
>1389	Identifier	false
>1390	PrimaryExpression	\"verbose\"
>1391	ArrayIndexing	prhs [ 2 ]
>1392	PrimaryExpression	2
>1393	Identifier	prhs
>1394	Identifier	bool
>1395	Identifier	getScalarStructDef
>1396	Identifier	verbose
>1397	Identifier	verbose
>1398	IdentifierDeclType	bool
>1399	IdentifierDeclStatement	 
>1400	IdentifierDecl	pos = getScalarStructDef < bool > ( prhs [ 2 ] , \"pos\" , false )
>1401	AssignmentExpr	pos = getScalarStructDef < bool > ( prhs [ 2 ] , \"pos\" , false )
>1402	RelationalExpression	getScalarStructDef < bool > ( prhs [ 2 ] , \"pos\" , false )
>1403	RelationalExpression	bool > ( prhs [ 2 ] , \"pos\" , false )
>1404	Expression	prhs [ 2 ] , \"pos\" , false
>1405	Expression	\"pos\" , false
>1406	Identifier	false
>1407	PrimaryExpression	\"pos\"
>1408	ArrayIndexing	prhs [ 2 ]
>1409	PrimaryExpression	2
>1410	Identifier	prhs
>1411	Identifier	bool
>1412	Identifier	getScalarStructDef
>1413	Identifier	pos
>1414	Identifier	pos
>1415	IdentifierDeclType	bool
>1416	ExpressionStatement	 
>1417	Expression	prhs [ 2 ] , \"numThreads\" , - 1
>1418	Expression	\"numThreads\" , - 1
>1419	UnaryOp	- 1
>1420	PrimaryExpression	1
>1421	UnaryOperator	-
>1422	PrimaryExpression	\"numThreads\"
>1423	ArrayIndexing	prhs [ 2 ]
>1424	PrimaryExpression	2
>1425	Identifier	prhs
>1426	Statement	 
>1427	Statement	 
>1428	Statement	 
>1429	Statement	 
>1430	Statement	 
>1431	Statement	 
>1432	Statement	 
>1433	ExpressionStatement	 
>1434	Statement	 
>1435	Statement	 
>1436	Statement	 
>1437	Statement	 
>1438	Statement	 
>1439	Statement	 
>1440	Statement	 
>1441	Statement	 
>1442	Statement	 
>1443	Statement	 
>1444	Statement	 
>1445	Statement	 
>1446	Statement	 
>1447	Statement	 
>1448	Statement	 
>1449	Statement	 
>1450	Statement	 
>1451	Statement	 
>1452	Statement	 
>1453	Statement	 
>1454	Statement	 
>1455	Statement	 
>1456	Statement	 
>1457	Statement	 
>1458	ExpressionStatement	 
>1459	Expression	prhs [ 2 ] , \"L\" , K
>1460	Expression	\"L\" , K
>1461	Identifier	K
>1462	PrimaryExpression	\"L\"
>1463	ArrayIndexing	prhs [ 2 ]
>1464	PrimaryExpression	2
>1465	Identifier	prhs
>1466	Statement	 
>1467	Statement	 
>1468	Statement	 
>1469	Statement	 
>1470	Statement	 
>1471	Statement	 
>1472	Statement	 
>1473	IdentifierDeclStatement	 
>1474	IdentifierDecl	lambda2 = getScalarStructDef < T > ( prhs [ 2 ] , \"lambda2\" , 0 )
>1475	AssignmentExpr	lambda2 = getScalarStructDef < T > ( prhs [ 2 ] , \"lambda2\" , 0 )
>1476	RelationalExpression	getScalarStructDef < T > ( prhs [ 2 ] , \"lambda2\" , 0 )
>1477	RelationalExpression	T > ( prhs [ 2 ] , \"lambda2\" , 0 )
>1478	Expression	prhs [ 2 ] , \"lambda2\" , 0
>1479	Expression	\"lambda2\" , 0
>1480	PrimaryExpression	0
>1481	PrimaryExpression	\"lambda2\"
>1482	ArrayIndexing	prhs [ 2 ]
>1483	PrimaryExpression	2
>1484	Identifier	prhs
>1485	Identifier	T
>1486	Identifier	getScalarStructDef
>1487	Identifier	lambda2
>1488	Identifier	lambda2
>1489	IdentifierDeclType	T
>1490	IdentifierDeclStatement	 
>1491	IdentifierDecl	lambda = getScalarStruct < T > ( prhs [ 2 ] , \"lambda\" )
>1492	AssignmentExpr	lambda = getScalarStruct < T > ( prhs [ 2 ] , \"lambda\" )
>1493	RelationalExpression	getScalarStruct < T > ( prhs [ 2 ] , \"lambda\" )
>1494	RelationalExpression	T > ( prhs [ 2 ] , \"lambda\" )
>1495	Expression	prhs [ 2 ] , \"lambda\"
>1496	PrimaryExpression	\"lambda\"
>1497	ArrayIndexing	prhs [ 2 ]
>1498	PrimaryExpression	2
>1499	Identifier	prhs
>1500	Identifier	T
>1501	Identifier	getScalarStruct
>1502	Identifier	lambda
>1503	Identifier	lambda
>1504	IdentifierDeclType	T
>1505	IfStatement	if ( n != nD )
>1506	ExpressionStatement	 
>1507	CallExpression	mexErrMsgTxt ( \"argument sizes are not consistent\" )
>1508	ArgumentList	\"argument sizes are not consistent\"
>1509	Argument	\"argument sizes are not consistent\"
>1510	PrimaryExpression	\"argument sizes are not consistent\"
>1511	Callee	mexErrMsgTxt
>1512	Identifier	mexErrMsgTxt
>1513	Condition	 
>1514	EqualityExpression	n != nD
>1515	Identifier	nD
>1516	Identifier	n
>1517	ExpressionStatement	 
>1518	ArrayIndexing	dimsD [ 1 ]
>1519	PrimaryExpression	1
>1520	Identifier	dimsD
>1521	Statement	 
>1522	Statement	 
>1523	Statement	 
>1524	Statement	 
>1525	Statement	 
>1526	Statement	 
>1527	Statement	 
>1528	ExpressionStatement	 
>1529	ArrayIndexing	dimsD [ 0 ]
>1530	PrimaryExpression	0
>1531	Identifier	dimsD
>1532	Statement	 
>1533	Statement	 
>1534	Statement	 
>1535	Statement	 
>1536	Statement	 
>1537	Statement	 
>1538	Statement	 
>1539	IdentifierDeclStatement	 
>1540	IdentifierDecl	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1541	AssignmentExpr	* dimsD = mxGetDimensions ( prhs [ 1 ] )
>1542	CallExpression	mxGetDimensions ( prhs [ 1 ] )
>1543	ArgumentList	prhs [ 1 ]
>1544	Argument	prhs [ 1 ]
>1545	ArrayIndexing	prhs [ 1 ]
>1546	PrimaryExpression	1
>1547	Identifier	prhs
>1548	Callee	mxGetDimensions
>1549	Identifier	mxGetDimensions
>1550	Identifier	dimsD
>1551	Identifier	dimsD
>1552	IdentifierDeclType	const mwSize *
>1553	ExpressionStatement	 
>1554	CallExpression	mxGetPr ( prhs [ 1 ] )
>1555	ArgumentList	prhs [ 1 ]
>1556	Argument	prhs [ 1 ]
>1557	ArrayIndexing	prhs [ 1 ]
>1558	PrimaryExpression	1
>1559	Identifier	prhs
>1560	Callee	mxGetPr
>1561	Identifier	mxGetPr
>1562	Statement	 
>1563	Statement	 
>1564	Statement	 
>1565	Statement	 
>1566	Statement	 
>1567	Statement	 
>1568	Statement	 
>1569	Statement	 
>1570	Statement	 
>1571	ExpressionStatement	 
>1572	ArrayIndexing	dimsX [ 1 ]
>1573	PrimaryExpression	1
>1574	Identifier	dimsX
>1575	Statement	 
>1576	Statement	 
>1577	Statement	 
>1578	Statement	 
>1579	Statement	 
>1580	Statement	 
>1581	Statement	 
>1582	ExpressionStatement	 
>1583	ArrayIndexing	dimsX [ 0 ]
>1584	PrimaryExpression	0
>1585	Identifier	dimsX
>1586	Statement	 
>1587	Statement	 
>1588	Statement	 
>1589	Statement	 
>1590	Statement	 
>1591	Statement	 
>1592	Statement	 
>1593	IdentifierDeclStatement	 
>1594	IdentifierDecl	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1595	AssignmentExpr	* dimsX = mxGetDimensions ( prhs [ 0 ] )
>1596	CallExpression	mxGetDimensions ( prhs [ 0 ] )
>1597	ArgumentList	prhs [ 0 ]
>1598	Argument	prhs [ 0 ]
>1599	ArrayIndexing	prhs [ 0 ]
>1600	PrimaryExpression	0
>1601	Identifier	prhs
>1602	Callee	mxGetDimensions
>1603	Identifier	mxGetDimensions
>1604	Identifier	dimsX
>1605	Identifier	dimsX
>1606	IdentifierDeclType	const mwSize *
>1607	ExpressionStatement	 
>1608	CallExpression	mxGetPr ( prhs [ 0 ] )
>1609	ArgumentList	prhs [ 0 ]
>1610	Argument	prhs [ 0 ]
>1611	ArrayIndexing	prhs [ 0 ]
>1612	PrimaryExpression	0
>1613	Identifier	prhs
>1614	Callee	mxGetPr
>1615	Identifier	mxGetPr
>1616	Statement	 
>1617	Statement	 
>1618	Statement	 
>1619	Statement	 
>1620	Statement	 
>1621	Statement	 
>1622	Statement	 
>1623	Statement	 
>1624	Statement	 
>1625	IfStatement	if ( ! mxIsStruct ( prhs [ 2 ] ) )
>1626	ExpressionStatement	 
>1627	CallExpression	mexErrMsgTxt ( \"argument 3 should be struct\" )
>1628	ArgumentList	\"argument 3 should be struct\"
>1629	Argument	\"argument 3 should be struct\"
>1630	PrimaryExpression	\"argument 3 should be struct\"
>1631	Callee	mexErrMsgTxt
>1632	Identifier	mexErrMsgTxt
>1633	Condition	 
>1634	UnaryOp	! mxIsStruct ( prhs [ 2 ] )
>1635	CallExpression	mxIsStruct ( prhs [ 2 ] )
>1636	ArgumentList	prhs [ 2 ]
>1637	Argument	prhs [ 2 ]
>1638	ArrayIndexing	prhs [ 2 ]
>1639	PrimaryExpression	2
>1640	Identifier	prhs
>1641	Callee	mxIsStruct
>1642	Identifier	mxIsStruct
>1643	UnaryOperator	!
>1644	IfStatement	if ( mxIsSparse ( prhs [ 1 ] ) )
>1645	ExpressionStatement	 
>1646	CallExpression	mexErrMsgTxt ( \"argument 2 should be full\" )
>1647	ArgumentList	\"argument 2 should be full\"
>1648	Argument	\"argument 2 should be full\"
>1649	PrimaryExpression	\"argument 2 should be full\"
>1650	Callee	mexErrMsgTxt
>1651	Identifier	mexErrMsgTxt
>1652	Condition	 
>1653	CallExpression	mxIsSparse ( prhs [ 1 ] )
>1654	ArgumentList	prhs [ 1 ]
>1655	Argument	prhs [ 1 ]
>1656	ArrayIndexing	prhs [ 1 ]
>1657	PrimaryExpression	1
>1658	Identifier	prhs
>1659	Callee	mxIsSparse
>1660	Identifier	mxIsSparse
>1661	IfStatement	if ( ! mexCheckType < T > ( prhs [ 1 ] ) )
>1662	ExpressionStatement	 
>1663	CallExpression	mexErrMsgTxt ( \"type of argument 2 is not consistent\" )
>1664	ArgumentList	\"type of argument 2 is not consistent\"
>1665	Argument	\"type of argument 2 is not consistent\"
>1666	PrimaryExpression	\"type of argument 2 is not consistent\"
>1667	Callee	mexErrMsgTxt
>1668	Identifier	mexErrMsgTxt
>1669	Condition	 
>1670	RelationalExpression	! mexCheckType < T > ( prhs [ 1 ] )
>1671	RelationalExpression	T > ( prhs [ 1 ] )
>1672	ArrayIndexing	prhs [ 1 ]
>1673	PrimaryExpression	1
>1674	Identifier	prhs
>1675	Identifier	T
>1676	UnaryOp	! mexCheckType
>1677	Identifier	mexCheckType
>1678	UnaryOperator	!
>1679	IfStatement	if ( mxIsSparse ( prhs [ 0 ] ) )
>1680	ExpressionStatement	 
>1681	CallExpression	mexErrMsgTxt ( \"argument 1 should be full\" )
>1682	ArgumentList	\"argument 1 should be full\"
>1683	Argument	\"argument 1 should be full\"
>1684	PrimaryExpression	\"argument 1 should be full\"
>1685	Callee	mexErrMsgTxt
>1686	Identifier	mexErrMsgTxt
>1687	Condition	 
>1688	CallExpression	mxIsSparse ( prhs [ 0 ] )
>1689	ArgumentList	prhs [ 0 ]
>1690	Argument	prhs [ 0 ]
>1691	ArrayIndexing	prhs [ 0 ]
>1692	PrimaryExpression	0
>1693	Identifier	prhs
>1694	Callee	mxIsSparse
>1695	Identifier	mxIsSparse
>1696	IfStatement	if ( ! mexCheckType < T > ( prhs [ 0 ] ) )
>1697	ExpressionStatement	 
>1698	CallExpression	mexErrMsgTxt ( \"type of argument 1 is not consistent\" )
>1699	ArgumentList	\"type of argument 1 is not consistent\"
>1700	Argument	\"type of argument 1 is not consistent\"
>1701	PrimaryExpression	\"type of argument 1 is not consistent\"
>1702	Callee	mexErrMsgTxt
>1703	Identifier	mexErrMsgTxt
>1704	Condition	 
>1705	RelationalExpression	! mexCheckType < T > ( prhs [ 0 ] )
>1706	RelationalExpression	T > ( prhs [ 0 ] )
>1707	ArrayIndexing	prhs [ 0 ]
>1708	PrimaryExpression	0
>1709	Identifier	prhs
>1710	Identifier	T
>1711	UnaryOp	! mexCheckType
>1712	Identifier	mexCheckType
>1713	UnaryOperator	!
>1714	Condition	 
>1715	EqualityExpression	nrhs == 3
>1716	PrimaryExpression	3
>1717	Identifier	nrhs
>1779	FunctionDef	mexFunction (int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ])
>1780	ParameterList	int nlhs , mxArray * plhs [ ] , int nrhs , const mxArray * prhs [ ]
>1781	Parameter	 
>1782	Identifier	prhs
>1783	ParameterType	const mxArray * [ ]
>1784	Parameter	 
>1785	Identifier	nrhs
>1786	ParameterType	int
>1787	Parameter	 
>1788	Identifier	plhs
>1789	ParameterType	mxArray * [ ]
>1790	Parameter	 
>1791	Identifier	nlhs
>1792	ParameterType	int
>1793	ReturnType	void
>1794	CompoundStatement	 
>1795	IfStatement	if ( mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS )
>1796	ElseStatement	else
>1797	CompoundStatement	 
>1798	ExpressionStatement	 
>1799	RelationalExpression	callFunction < float > ( plhs , prhs , nrhs , nlhs )
>1800	RelationalExpression	float > ( plhs , prhs , nrhs , nlhs )
>1801	Expression	plhs , prhs , nrhs , nlhs
>1802	Expression	prhs , nrhs , nlhs
>1803	Expression	nrhs , nlhs
>1804	Identifier	nlhs
>1805	Identifier	nrhs
>1806	Identifier	prhs
>1807	Identifier	plhs
>1808	Identifier	float
>1809	Identifier	callFunction
>1810	CompoundStatement	 
>1811	ExpressionStatement	 
>1812	RelationalExpression	callFunction < double > ( plhs , prhs , nrhs , nlhs )
>1813	RelationalExpression	double > ( plhs , prhs , nrhs , nlhs )
>1814	Expression	plhs , prhs , nrhs , nlhs
>1815	Expression	prhs , nrhs , nlhs
>1816	Expression	nrhs , nlhs
>1817	Identifier	nlhs
>1818	Identifier	nrhs
>1819	Identifier	prhs
>1820	Identifier	plhs
>1821	Identifier	double
>1822	Identifier	callFunction
>1823	Condition	 
>1824	EqualityExpression	mxGetClassID ( prhs [ 0 ] ) == mxDOUBLE_CLASS
>1825	Identifier	mxDOUBLE_CLASS
>1826	CallExpression	mxGetClassID ( prhs [ 0 ] )
>1827	ArgumentList	prhs [ 0 ]
>1828	Argument	prhs [ 0 ]
>1829	ArrayIndexing	prhs [ 0 ]
>1830	PrimaryExpression	0
>1831	Identifier	prhs
>1832	Callee	mxGetClassID
>1833	Identifier	mxGetClassID
>1834	IfStatement	if ( ! ( nlhs == 1 || nlhs == 2 ) )
>1835	ExpressionStatement	 
>1836	CallExpression	mexErrMsgTxt ( \"Bad number of output arguments\" )
>1837	ArgumentList	\"Bad number of output arguments\"
>1838	Argument	\"Bad number of output arguments\"
>1839	PrimaryExpression	\"Bad number of output arguments\"
>1840	Callee	mexErrMsgTxt
>1841	Identifier	mexErrMsgTxt
>1842	Condition	 
>1843	UnaryOp	! ( nlhs == 1 || nlhs == 2 )
>1844	OrExpression	nlhs == 1 || nlhs == 2
>1845	EqualityExpression	nlhs == 2
>1846	PrimaryExpression	2
>1847	Identifier	nlhs
>1848	EqualityExpression	nlhs == 1
>1849	PrimaryExpression	1
>1850	Identifier	nlhs
>1851	UnaryOperator	!
>1852	IfStatement	if ( nrhs != 3 && nrhs != 4 )
>1853	ExpressionStatement	 
>1854	CallExpression	mexErrMsgTxt ( \"Bad number of inputs arguments\" )
>1855	ArgumentList	\"Bad number of inputs arguments\"
>1856	Argument	\"Bad number of inputs arguments\"
>1857	PrimaryExpression	\"Bad number of inputs arguments\"
>1858	Callee	mexErrMsgTxt
>1859	Identifier	mexErrMsgTxt
>1860	Condition	 
>1861	AndExpression	nrhs != 3 && nrhs != 4
>1862	EqualityExpression	nrhs != 4
>1863	PrimaryExpression	4
>1864	Identifier	nrhs
>1865	EqualityExpression	nrhs != 3
>1866	PrimaryExpression	3
>1867	Identifier	nrhs
<3=18,17,4
<4=14,11,8,5
<5=7,6
<8=10,9
<11=13,12
<14=16,15
<18=19
<19=1714,928,20
<20=21
<21=910,893,875,858,840,823,804,803,802,801,800,799,798,797,796,795,786,772,771,770,769,768,767,766,765,761,760,759,758,757,756,755,754,750,749,748,747,746,745,744,743,742,741,732,718,717,716,715,714,713,712,711,707,706,705,704,703,702,701,700,696,684,677,676,675,674,673,672,671,670,669,668,659,645,644,643,642,641,640,639,638,634,633,632,631,630,629,628,627,623,611,22,80,358,362,371,380,389,399,430,438,439,440,441,442,443,444,445,446,447,448,467,484,501,518,528,529,530,531,532,533,534,535,545,546,547,548,549,550,551,552,560,561,562,563,564,565,566,567,584,599
<22=23
<23=78,24
<24=74,67,60,53,46,39,32,25
<25=26
<26=28,27
<28=29
<29=31,30
<32=33
<33=35,34
<35=36
<36=38,37
<39=40
<40=42,41
<42=43
<43=45,44
<46=47
<47=49,48
<49=50
<50=52,51
<53=54
<54=56,55
<56=57
<57=59,58
<60=61
<61=63,62
<63=64
<64=66,65
<67=68
<68=70,69
<70=71
<71=73,72
<74=75
<75=77,76
<78=79
<80=354,143,81
<81=82
<82=83
<83=141,112,84
<84=85
<85=86
<86=87
<87=111,88
<88=110,89
<89=109,90
<90=108,91
<91=107,92
<92=106,93
<93=105,94
<94=104,95
<95=103,96
<96=102,97
<97=101,98
<98=100,99
<112=113
<113=114
<114=140,115
<115=139,116
<116=138,117
<117=137,118
<118=136,119
<119=135,120
<120=134,121
<121=133,122
<122=132,123
<123=131,124
<124=130,125
<125=129,126
<126=128,127
<141=142
<143=347,340,276,272,263,256,226,214,213,212,211,210,209,208,207,206,205,196,187,183,144
<144=175,171,168,145
<145=157,146
<146=147
<147=153,148
<148=151,149
<149=150
<151=152
<153=154
<154=156,155
<157=158
<158=164,159
<159=162,160
<160=161
<162=163
<164=165
<165=167,166
<168=170,169
<171=172
<172=174,173
<175=176
<176=177
<177=182,181,178
<178=180,179
<183=184
<184=186,185
<187=188
<188=195,194,189
<189=193,190
<190=192,191
<196=197
<197=203,198
<198=199
<199=200
<200=202,201
<203=204
<214=215
<215=223,216
<216=222,217
<217=221,218
<218=220,219
<223=225,224
<226=248,239,236,227
<227=232,228
<228=229
<229=231,230
<232=233
<233=235,234
<236=238,237
<239=240
<240=247,241
<241=243,242
<243=244
<244=246,245
<248=249
<249=250
<250=255,254,251
<251=253,252
<256=257
<257=262,261,258
<258=260,259
<263=264
<264=268,265
<265=266
<266=267
<268=269
<269=271,270
<272=273
<273=275,274
<276=338,307,277
<277=278
<278=279
<279=280
<280=306,281
<281=305,282
<282=304,283
<283=303,284
<284=302,285
<285=301,286
<286=300,287
<287=299,288
<288=298,289
<289=297,290
<290=296,291
<291=293,292
<293=295,294
<307=308
<308=309
<309=337,310
<310=336,311
<311=335,312
<312=334,313
<313=333,314
<314=332,315
<315=331,316
<316=330,317
<317=329,318
<318=328,319
<319=327,320
<320=326,321
<321=323,322
<323=325,324
<338=339
<340=341
<341=343,342
<343=344
<344=346,345
<347=348
<348=353,352,349
<349=351,350
<354=355
<355=357,356
<358=359
<359=361,360
<362=363
<363=370,369,364
<364=368,365
<365=367,366
<371=372
<372=379,378,373
<373=377,374
<374=376,375
<380=381
<381=388,387,382
<382=386,383
<383=385,384
<389=395,390
<390=391
<391=392
<392=394,393
<395=396
<396=398,397
<399=405,400
<400=401
<401=402
<402=404,403
<405=406
<406=427,407
<407=426,408
<408=423,409
<409=417,410
<410=414,411
<411=413,412
<414=416,415
<417=421,418
<418=419
<419=420
<421=422
<423=425,424
<427=429,428
<430=431
<431=435,432
<432=434,433
<435=437,436
<448=449
<449=466,465,450
<450=464,451
<451=463,452
<452=462,453
<453=461,454
<454=458,455
<455=457,456
<458=460,459
<467=468
<468=483,482,469
<469=481,470
<470=480,471
<471=479,472
<472=476,473
<473=475,474
<476=478,477
<484=485
<485=500,499,486
<486=498,487
<487=497,488
<488=496,489
<489=493,490
<490=492,491
<493=495,494
<501=502
<502=517,516,503
<503=515,504
<504=514,505
<505=513,506
<506=510,507
<507=509,508
<510=512,511
<518=519
<519=525,520
<520=524,521
<521=523,522
<525=527,526
<535=536
<536=542,537
<537=541,538
<538=540,539
<542=544,543
<552=553
<553=557,554
<554=556,555
<557=559,558
<567=568
<568=583,582,569
<569=581,570
<570=580,571
<571=579,572
<572=576,573
<573=575,574
<576=578,577
<584=585
<585=598,597,586
<586=596,587
<587=595,588
<588=594,589
<589=591,590
<591=593,592
<599=607,600
<600=601
<601=605,602
<602=603
<603=604
<605=606
<607=608
<608=610,609
<611=619,612
<612=613
<613=617,614
<614=615
<615=616
<617=618
<619=620
<620=622,621
<623=624
<624=626,625
<634=635
<635=637,636
<645=646
<646=658,657,647
<647=656,648
<648=654,649
<649=650
<650=651
<651=653,652
<654=655
<659=660
<660=666,661
<661=662
<662=663
<663=665,664
<666=667
<677=678
<678=683,682,679
<679=681,680
<684=692,685
<685=686
<686=690,687
<687=688
<688=689
<690=691
<692=693
<693=695,694
<696=697
<697=699,698
<707=708
<708=710,709
<718=719
<719=731,730,720
<720=729,721
<721=727,722
<722=723
<723=724
<724=726,725
<727=728
<732=733
<733=739,734
<734=735
<735=736
<736=738,737
<739=740
<750=751
<751=753,752
<761=762
<762=764,763
<772=773
<773=785,784,774
<774=783,775
<775=781,776
<776=777
<777=778
<778=780,779
<781=782
<786=787
<787=793,788
<788=789
<789=790
<790=792,791
<793=794
<804=812,805
<805=806
<806=810,807
<807=808
<808=809
<810=811
<812=813
<813=822,814
<814=820,815
<815=816
<816=817
<817=819,818
<820=821
<823=831,824
<824=825
<825=829,826
<826=827
<827=828
<829=830
<831=832
<832=838,833
<833=834
<834=835
<835=837,836
<838=839
<840=848,841
<841=842
<842=846,843
<843=844
<844=845
<846=847
<848=849
<849=855,850
<850=854,851
<851=853,852
<855=857,856
<858=866,859
<859=860
<860=864,861
<861=862
<862=863
<864=865
<866=867
<867=873,868
<868=869
<869=870
<870=872,871
<873=874
<875=883,876
<876=877
<877=881,878
<878=879
<879=880
<881=882
<883=884
<884=890,885
<885=889,886
<886=888,887
<890=892,891
<893=901,894
<894=895
<895=899,896
<896=897
<897=898
<899=900
<901=902
<902=908,903
<903=904
<904=905
<905=907,906
<908=909
<910=918,911
<911=912
<912=916,913
<913=914
<914=915
<916=917
<918=919
<919=925,920
<920=924,921
<921=923,922
<925=927,926
<928=1696,1679,1661,1644,1625,1624,1623,1622,1621,1620,1619,1618,1617,1616,1607,1593,1592,1591,1590,1589,1588,1587,1586,1582,1581,1580,1579,1578,1577,1576,1575,1571,1570,1569,1568,1567,1566,1565,1564,1563,1562,1553,1539,1538,1537,1536,1535,1534,1533,1532,1528,1527,1526,1525,1524,1523,1522,1521,1517,1505,1490,1473,1472,1471,1470,1469,1468,1467,1466,1458,1457,1456,1455,1454,1453,929,987,1265,1269,1278,1287,1297,1328,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1365,1382,1399,1416,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452
<929=930
<930=985,931
<931=981,974,967,960,953,946,939,932
<932=933
<933=935,934
<935=936
<936=938,937
<939=940
<940=942,941
<942=943
<943=945,944
<946=947
<947=949,948
<949=950
<950=952,951
<953=954
<954=956,955
<956=957
<957=959,958
<960=961
<961=963,962
<963=964
<964=966,965
<967=968
<968=970,969
<970=971
<971=973,972
<974=975
<975=977,976
<977=978
<978=980,979
<981=982
<982=984,983
<985=986
<987=1261,1050,988
<988=989
<989=990
<990=1048,1019,991
<991=992
<992=993
<993=994
<994=1018,995
<995=1017,996
<996=1016,997
<997=1015,998
<998=1014,999
<999=1013,1000
<1000=1012,1001
<1001=1011,1002
<1002=1010,1003
<1003=1009,1004
<1004=1008,1005
<1005=1007,1006
<1019=1020
<1020=1021
<1021=1047,1022
<1022=1046,1023
<1023=1045,1024
<1024=1044,1025
<1025=1043,1026
<1026=1042,1027
<1027=1041,1028
<1028=1040,1029
<1029=1039,1030
<1030=1038,1031
<1031=1037,1032
<1032=1036,1033
<1033=1035,1034
<1048=1049
<1050=1254,1247,1183,1179,1170,1163,1133,1121,1120,1119,1118,1117,1116,1115,1114,1113,1112,1103,1094,1090,1051
<1051=1082,1078,1075,1052
<1052=1064,1053
<1053=1054
<1054=1060,1055
<1055=1058,1056
<1056=1057
<1058=1059
<1060=1061
<1061=1063,1062
<1064=1065
<1065=1071,1066
<1066=1069,1067
<1067=1068
<1069=1070
<1071=1072
<1072=1074,1073
<1075=1077,1076
<1078=1079
<1079=1081,1080
<1082=1083
<1083=1084
<1084=1089,1088,1085
<1085=1087,1086
<1090=1091
<1091=1093,1092
<1094=1095
<1095=1102,1101,1096
<1096=1100,1097
<1097=1099,1098
<1103=1104
<1104=1110,1105
<1105=1106
<1106=1107
<1107=1109,1108
<1110=1111
<1121=1122
<1122=1130,1123
<1123=1129,1124
<1124=1128,1125
<1125=1127,1126
<1130=1132,1131
<1133=1155,1146,1143,1134
<1134=1139,1135
<1135=1136
<1136=1138,1137
<1139=1140
<1140=1142,1141
<1143=1145,1144
<1146=1147
<1147=1154,1148
<1148=1150,1149
<1150=1151
<1151=1153,1152
<1155=1156
<1156=1157
<1157=1162,1161,1158
<1158=1160,1159
<1163=1164
<1164=1169,1168,1165
<1165=1167,1166
<1170=1171
<1171=1175,1172
<1172=1173
<1173=1174
<1175=1176
<1176=1178,1177
<1179=1180
<1180=1182,1181
<1183=1245,1214,1184
<1184=1185
<1185=1186
<1186=1187
<1187=1213,1188
<1188=1212,1189
<1189=1211,1190
<1190=1210,1191
<1191=1209,1192
<1192=1208,1193
<1193=1207,1194
<1194=1206,1195
<1195=1205,1196
<1196=1204,1197
<1197=1203,1198
<1198=1200,1199
<1200=1202,1201
<1214=1215
<1215=1216
<1216=1244,1217
<1217=1243,1218
<1218=1242,1219
<1219=1241,1220
<1220=1240,1221
<1221=1239,1222
<1222=1238,1223
<1223=1237,1224
<1224=1236,1225
<1225=1235,1226
<1226=1234,1227
<1227=1233,1228
<1228=1230,1229
<1230=1232,1231
<1245=1246
<1247=1248
<1248=1250,1249
<1250=1251
<1251=1253,1252
<1254=1255
<1255=1260,1259,1256
<1256=1258,1257
<1261=1262
<1262=1264,1263
<1265=1266
<1266=1268,1267
<1269=1270
<1270=1277,1276,1271
<1271=1275,1272
<1272=1274,1273
<1278=1279
<1279=1286,1285,1280
<1280=1284,1281
<1281=1283,1282
<1287=1293,1288
<1288=1289
<1289=1290
<1290=1292,1291
<1293=1294
<1294=1296,1295
<1297=1303,1298
<1298=1299
<1299=1300
<1300=1302,1301
<1303=1304
<1304=1325,1305
<1305=1324,1306
<1306=1321,1307
<1307=1315,1308
<1308=1312,1309
<1309=1311,1310
<1312=1314,1313
<1315=1319,1316
<1316=1317
<1317=1318
<1319=1320
<1321=1323,1322
<1325=1327,1326
<1328=1329
<1329=1333,1330
<1330=1332,1331
<1333=1335,1334
<1346=1347
<1347=1364,1363,1348
<1348=1362,1349
<1349=1361,1350
<1350=1360,1351
<1351=1359,1352
<1352=1356,1353
<1353=1355,1354
<1356=1358,1357
<1365=1366
<1366=1381,1380,1367
<1367=1379,1368
<1368=1378,1369
<1369=1377,1370
<1370=1374,1371
<1371=1373,1372
<1374=1376,1375
<1382=1383
<1383=1398,1397,1384
<1384=1396,1385
<1385=1395,1386
<1386=1394,1387
<1387=1391,1388
<1388=1390,1389
<1391=1393,1392
<1399=1400
<1400=1415,1414,1401
<1401=1413,1402
<1402=1412,1403
<1403=1411,1404
<1404=1408,1405
<1405=1407,1406
<1408=1410,1409
<1416=1417
<1417=1423,1418
<1418=1422,1419
<1419=1421,1420
<1423=1425,1424
<1458=1459
<1459=1463,1460
<1460=1462,1461
<1463=1465,1464
<1473=1474
<1474=1489,1488,1475
<1475=1487,1476
<1476=1486,1477
<1477=1485,1478
<1478=1482,1479
<1479=1481,1480
<1482=1484,1483
<1490=1491
<1491=1504,1503,1492
<1492=1502,1493
<1493=1501,1494
<1494=1500,1495
<1495=1497,1496
<1497=1499,1498
<1505=1513,1506
<1506=1507
<1507=1511,1508
<1508=1509
<1509=1510
<1511=1512
<1513=1514
<1514=1516,1515
<1517=1518
<1518=1520,1519
<1528=1529
<1529=1531,1530
<1539=1540
<1540=1552,1551,1541
<1541=1550,1542
<1542=1548,1543
<1543=1544
<1544=1545
<1545=1547,1546
<1548=1549
<1553=1554
<1554=1560,1555
<1555=1556
<1556=1557
<1557=1559,1558
<1560=1561
<1571=1572
<1572=1574,1573
<1582=1583
<1583=1585,1584
<1593=1594
<1594=1606,1605,1595
<1595=1604,1596
<1596=1602,1597
<1597=1598
<1598=1599
<1599=1601,1600
<1602=1603
<1607=1608
<1608=1614,1609
<1609=1610
<1610=1611
<1611=1613,1612
<1614=1615
<1625=1633,1626
<1626=1627
<1627=1631,1628
<1628=1629
<1629=1630
<1631=1632
<1633=1634
<1634=1643,1635
<1635=1641,1636
<1636=1637
<1637=1638
<1638=1640,1639
<1641=1642
<1644=1652,1645
<1645=1646
<1646=1650,1647
<1647=1648
<1648=1649
<1650=1651
<1652=1653
<1653=1659,1654
<1654=1655
<1655=1656
<1656=1658,1657
<1659=1660
<1661=1669,1662
<1662=1663
<1663=1667,1664
<1664=1665
<1665=1666
<1667=1668
<1669=1670
<1670=1676,1671
<1671=1675,1672
<1672=1674,1673
<1676=1678,1677
<1679=1687,1680
<1680=1681
<1681=1685,1682
<1682=1683
<1683=1684
<1685=1686
<1687=1688
<1688=1694,1689
<1689=1690
<1690=1691
<1691=1693,1692
<1694=1695
<1696=1704,1697
<1697=1698
<1698=1702,1699
<1699=1700
<1700=1701
<1702=1703
<1704=1705
<1705=1711,1706
<1706=1710,1707
<1707=1709,1708
<1711=1713,1712
<1714=1715
<1715=1717,1716
<1779=1794,1793,1780
<1780=1790,1787,1784,1781
<1781=1783,1782
<1784=1786,1785
<1787=1789,1788
<1790=1792,1791
<1794=1852,1834,1795
<1795=1823,1810,1796
<1796=1797
<1797=1798
<1798=1799
<1799=1809,1800
<1800=1808,1801
<1801=1807,1802
<1802=1806,1803
<1803=1805,1804
<1810=1811
<1811=1812
<1812=1822,1813
<1813=1821,1814
<1814=1820,1815
<1815=1819,1816
<1816=1818,1817
<1823=1824
<1824=1826,1825
<1826=1832,1827
<1827=1828
<1828=1829
<1829=1831,1830
<1832=1833
<1834=1842,1835
<1835=1836
<1836=1840,1837
<1837=1838
<1838=1839
<1840=1841
<1842=1843
<1843=1851,1844
<1844=1848,1845
<1845=1847,1846
<1848=1850,1849
<1852=1860,1853
<1853=1854
<1854=1858,1855
<1855=1856
<1856=1857
<1858=1859
<1860=1861
<1861=1865,1862
<1862=1864,1863
<1865=1867,1866
