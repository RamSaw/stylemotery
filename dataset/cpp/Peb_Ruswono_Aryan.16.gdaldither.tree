>5	FunctionDef	GDALDitherRGB2PCT (GDALRasterBandH hRed , GDALRasterBandH hGreen , GDALRasterBandH hBlue , GDALRasterBandH hTarget , \
>6	ParameterList	GDALRasterBandH hRed , GDALRasterBandH hGreen , GDALRasterBandH hBlue , GDALRasterBandH hTarget , GDALColorTableH \
>7	Parameter	 
>8	Identifier	pProgressArg
>9	ParameterType	void *
>10	Parameter	 
>11	Identifier	pfnProgress
>12	ParameterType	GDALProgressFunc
>13	Parameter	 
>14	Identifier	hColorTable
>15	ParameterType	GDALColorTableH
>16	Parameter	 
>17	Identifier	hTarget
>18	ParameterType	GDALRasterBandH
>19	Parameter	 
>20	Identifier	hBlue
>21	ParameterType	GDALRasterBandH
>22	Parameter	 
>23	Identifier	hGreen
>24	ParameterType	GDALRasterBandH
>25	Parameter	 
>26	Identifier	hRed
>27	ParameterType	GDALRasterBandH
>28	ReturnType	int CPL_STDCALL
>29	CompoundStatement	 
>30	ReturnStatement	 
>31	Identifier	err
>32	ExpressionStatement	 
>33	CallExpression	CPLFree ( pabyColorMap )
>34	ArgumentList	pabyColorMap
>35	Argument	pabyColorMap
>36	Identifier	pabyColorMap
>37	Callee	CPLFree
>38	Identifier	CPLFree
>39	ExpressionStatement	 
>40	CallExpression	CPLFree ( panError )
>41	ArgumentList	panError
>42	Argument	panError
>43	Identifier	panError
>44	Callee	CPLFree
>45	Identifier	CPLFree
>46	ExpressionStatement	 
>47	CallExpression	CPLFree ( pabyIndex )
>48	ArgumentList	pabyIndex
>49	Argument	pabyIndex
>50	Identifier	pabyIndex
>51	Callee	CPLFree
>52	Identifier	CPLFree
>53	ExpressionStatement	 
>54	CallExpression	CPLFree ( pabyBlue )
>55	ArgumentList	pabyBlue
>56	Argument	pabyBlue
>57	Identifier	pabyBlue
>58	Callee	CPLFree
>59	Identifier	CPLFree
>60	ExpressionStatement	 
>61	CallExpression	CPLFree ( pabyGreen )
>62	ArgumentList	pabyGreen
>63	Argument	pabyGreen
>64	Identifier	pabyGreen
>65	Callee	CPLFree
>66	Identifier	CPLFree
>67	ExpressionStatement	 
>68	CallExpression	CPLFree ( pabyRed )
>69	ArgumentList	pabyRed
>70	Argument	pabyRed
>71	Identifier	pabyRed
>72	Callee	CPLFree
>73	Identifier	CPLFree
>74	Label	 
>75	Identifier	end_and_cleanup
>76	ExpressionStatement	 
>77	CallExpression	pfnProgress ( 1.0 , NULL , pProgressArg )
>78	ArgumentList	1.0
>79	Argument	pProgressArg
>80	Identifier	pProgressArg
>81	Argument	NULL
>82	Identifier	NULL
>83	Argument	1.0
>84	PrimaryExpression	1.0
>85	Callee	pfnProgress
>86	Identifier	pfnProgress
>87	ForStatement	for ( iScanline = 0 ; iScanline < nYSize ; iScanline ++ )
>88	CompoundStatement	 
>89	ExpressionStatement	 
>90	CallExpression	GDALRasterIO ( hTarget , GF_Write , 0 , iScanline , nXSize , 1 , pabyIndex , nXSize , 1 , GDT_Byte , 0 , 0 )
>91	ArgumentList	hTarget
>92	Argument	0
>93	PrimaryExpression	0
>94	Argument	0
>95	PrimaryExpression	0
>96	Argument	GDT_Byte
>97	Identifier	GDT_Byte
>98	Argument	1
>99	PrimaryExpression	1
>100	Argument	nXSize
>101	Identifier	nXSize
>102	Argument	pabyIndex
>103	Identifier	pabyIndex
>104	Argument	1
>105	PrimaryExpression	1
>106	Argument	nXSize
>107	Identifier	nXSize
>108	Argument	iScanline
>109	Identifier	iScanline
>110	Argument	0
>111	PrimaryExpression	0
>112	Argument	GF_Write
>113	Identifier	GF_Write
>114	Argument	hTarget
>115	Identifier	hTarget
>116	Callee	GDALRasterIO
>117	Identifier	GDALRasterIO
>118	ForStatement	for ( i = 0 ; i < nXSize ; i ++ )
>119	CompoundStatement	 
>120	ExpressionStatement	 
>121	AssignmentExpr	nLastBlueError = 2 * nSixth
>122	MultiplicativeExpression	2 * nSixth
>123	Identifier	nSixth
>124	PrimaryExpression	2
>125	Identifier	nLastBlueError
>126	ExpressionStatement	 
>127	AssignmentExpr	panError [ i * 3 + 3 + 2 ] += nError - 5 * nSixth
>128	AdditiveExpression	nError - 5 * nSixth
>129	MultiplicativeExpression	5 * nSixth
>130	Identifier	nSixth
>131	PrimaryExpression	5
>132	Identifier	nError
>133	ArrayIndexing	panError [ i * 3 + 3 + 2 ]
>134	AdditiveExpression	i * 3 + 3 + 2
>135	AdditiveExpression	3 + 2
>136	PrimaryExpression	2
>137	PrimaryExpression	3
>138	MultiplicativeExpression	i * 3
>139	PrimaryExpression	3
>140	Identifier	i
>141	Identifier	panError
>142	ExpressionStatement	 
>143	AssignmentExpr	panError [ i * 3 + 6 + 2 ] = nSixth
>144	Identifier	nSixth
>145	ArrayIndexing	panError [ i * 3 + 6 + 2 ]
>146	AdditiveExpression	i * 3 + 6 + 2
>147	AdditiveExpression	6 + 2
>148	PrimaryExpression	2
>149	PrimaryExpression	6
>150	MultiplicativeExpression	i * 3
>151	PrimaryExpression	3
>152	Identifier	i
>153	Identifier	panError
>154	ExpressionStatement	 
>155	AssignmentExpr	panError [ i * 3 + 2 ] += nSixth
>156	Identifier	nSixth
>157	ArrayIndexing	panError [ i * 3 + 2 ]
>158	AdditiveExpression	i * 3 + 2
>159	PrimaryExpression	2
>160	MultiplicativeExpression	i * 3
>161	PrimaryExpression	3
>162	Identifier	i
>163	Identifier	panError
>164	ExpressionStatement	 
>165	AssignmentExpr	nSixth = nError / 6
>166	MultiplicativeExpression	nError / 6
>167	PrimaryExpression	6
>168	Identifier	nError
>169	Identifier	nSixth
>170	ExpressionStatement	 
>171	AssignmentExpr	nError = nBlueValue - anPCT [ iIndex + 512 ]
>172	AdditiveExpression	nBlueValue - anPCT [ iIndex + 512 ]
>173	ArrayIndexing	anPCT [ iIndex + 512 ]
>174	AdditiveExpression	iIndex + 512
>175	PrimaryExpression	512
>176	Identifier	iIndex
>177	Identifier	anPCT
>178	Identifier	nBlueValue
>179	Identifier	nError
>180	ExpressionStatement	 
>181	AssignmentExpr	nLastGreenError = 2 * nSixth
>182	MultiplicativeExpression	2 * nSixth
>183	Identifier	nSixth
>184	PrimaryExpression	2
>185	Identifier	nLastGreenError
>186	ExpressionStatement	 
>187	AssignmentExpr	panError [ i * 3 + 3 + 1 ] += nError - 5 * nSixth
>188	AdditiveExpression	nError - 5 * nSixth
>189	MultiplicativeExpression	5 * nSixth
>190	Identifier	nSixth
>191	PrimaryExpression	5
>192	Identifier	nError
>193	ArrayIndexing	panError [ i * 3 + 3 + 1 ]
>194	AdditiveExpression	i * 3 + 3 + 1
>195	AdditiveExpression	3 + 1
>196	PrimaryExpression	1
>197	PrimaryExpression	3
>198	MultiplicativeExpression	i * 3
>199	PrimaryExpression	3
>200	Identifier	i
>201	Identifier	panError
>202	ExpressionStatement	 
>203	AssignmentExpr	panError [ i * 3 + 6 + 1 ] = nSixth
>204	Identifier	nSixth
>205	ArrayIndexing	panError [ i * 3 + 6 + 1 ]
>206	AdditiveExpression	i * 3 + 6 + 1
>207	AdditiveExpression	6 + 1
>208	PrimaryExpression	1
>209	PrimaryExpression	6
>210	MultiplicativeExpression	i * 3
>211	PrimaryExpression	3
>212	Identifier	i
>213	Identifier	panError
>214	ExpressionStatement	 
>215	AssignmentExpr	panError [ i * 3 + 1 ] += nSixth
>216	Identifier	nSixth
>217	ArrayIndexing	panError [ i * 3 + 1 ]
>218	AdditiveExpression	i * 3 + 1
>219	PrimaryExpression	1
>220	MultiplicativeExpression	i * 3
>221	PrimaryExpression	3
>222	Identifier	i
>223	Identifier	panError
>224	ExpressionStatement	 
>225	AssignmentExpr	nSixth = nError / 6
>226	MultiplicativeExpression	nError / 6
>227	PrimaryExpression	6
>228	Identifier	nError
>229	Identifier	nSixth
>230	ExpressionStatement	 
>231	AssignmentExpr	nError = nGreenValue - anPCT [ iIndex + 256 ]
>232	AdditiveExpression	nGreenValue - anPCT [ iIndex + 256 ]
>233	ArrayIndexing	anPCT [ iIndex + 256 ]
>234	AdditiveExpression	iIndex + 256
>235	PrimaryExpression	256
>236	Identifier	iIndex
>237	Identifier	anPCT
>238	Identifier	nGreenValue
>239	Identifier	nError
>240	ExpressionStatement	 
>241	AssignmentExpr	nLastRedError = 2 * nSixth
>242	MultiplicativeExpression	2 * nSixth
>243	Identifier	nSixth
>244	PrimaryExpression	2
>245	Identifier	nLastRedError
>246	ExpressionStatement	 
>247	AssignmentExpr	panError [ i * 3 + 3 ] += nError - 5 * nSixth
>248	AdditiveExpression	nError - 5 * nSixth
>249	MultiplicativeExpression	5 * nSixth
>250	Identifier	nSixth
>251	PrimaryExpression	5
>252	Identifier	nError
>253	ArrayIndexing	panError [ i * 3 + 3 ]
>254	AdditiveExpression	i * 3 + 3
>255	PrimaryExpression	3
>256	MultiplicativeExpression	i * 3
>257	PrimaryExpression	3
>258	Identifier	i
>259	Identifier	panError
>260	ExpressionStatement	 
>261	AssignmentExpr	panError [ i * 3 + 6 ] = nSixth
>262	Identifier	nSixth
>263	ArrayIndexing	panError [ i * 3 + 6 ]
>264	AdditiveExpression	i * 3 + 6
>265	PrimaryExpression	6
>266	MultiplicativeExpression	i * 3
>267	PrimaryExpression	3
>268	Identifier	i
>269	Identifier	panError
>270	ExpressionStatement	 
>271	AssignmentExpr	panError [ i * 3 ] += nSixth
>272	Identifier	nSixth
>273	ArrayIndexing	panError [ i * 3 ]
>274	MultiplicativeExpression	i * 3
>275	PrimaryExpression	3
>276	Identifier	i
>277	Identifier	panError
>278	ExpressionStatement	 
>279	AssignmentExpr	nSixth = nError / 6
>280	MultiplicativeExpression	nError / 6
>281	PrimaryExpression	6
>282	Identifier	nError
>283	Identifier	nSixth
>284	ExpressionStatement	 
>285	AssignmentExpr	nError = nRedValue - anPCT [ iIndex ]
>286	AdditiveExpression	nRedValue - anPCT [ iIndex ]
>287	ArrayIndexing	anPCT [ iIndex ]
>288	Identifier	iIndex
>289	Identifier	anPCT
>290	Identifier	nRedValue
>291	Identifier	nError
>292	ExpressionStatement	 
>293	AssignmentExpr	pabyIndex [ i ] = ( GByte ) iIndex
>294	CastExpression	( GByte ) iIndex
>295	Identifier	iIndex
>296	CastTarget	GByte
>297	ArrayIndexing	pabyIndex [ i ]
>298	Identifier	i
>299	Identifier	pabyIndex
>300	ExpressionStatement	 
>301	AssignmentExpr	iIndex = pabyColorMap [ iRed + iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS ]
>302	ArrayIndexing	pabyColorMap [ iRed + iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS ]
>303	AdditiveExpression	iRed + iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS
>304	AdditiveExpression	iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS
>305	MultiplicativeExpression	iBlue * C_LEVELS * C_LEVELS
>306	MultiplicativeExpression	C_LEVELS * C_LEVELS
>307	Identifier	C_LEVELS
>308	Identifier	C_LEVELS
>309	Identifier	iBlue
>310	MultiplicativeExpression	iGreen * C_LEVELS
>311	Identifier	C_LEVELS
>312	Identifier	iGreen
>313	Identifier	iRed
>314	Identifier	pabyColorMap
>315	Identifier	iIndex
>316	ExpressionStatement	 
>317	AssignmentExpr	iBlue = nBlueValue * C_LEVELS / 256
>318	MultiplicativeExpression	nBlueValue * C_LEVELS / 256
>319	MultiplicativeExpression	C_LEVELS / 256
>320	PrimaryExpression	256
>321	Identifier	C_LEVELS
>322	Identifier	nBlueValue
>323	Identifier	iBlue
>324	ExpressionStatement	 
>325	AssignmentExpr	iGreen = nGreenValue * C_LEVELS / 256
>326	MultiplicativeExpression	nGreenValue * C_LEVELS / 256
>327	MultiplicativeExpression	C_LEVELS / 256
>328	PrimaryExpression	256
>329	Identifier	C_LEVELS
>330	Identifier	nGreenValue
>331	Identifier	iGreen
>332	ExpressionStatement	 
>333	AssignmentExpr	iRed = nRedValue * C_LEVELS / 256
>334	MultiplicativeExpression	nRedValue * C_LEVELS / 256
>335	MultiplicativeExpression	C_LEVELS / 256
>336	PrimaryExpression	256
>337	Identifier	C_LEVELS
>338	Identifier	nRedValue
>339	Identifier	iRed
>340	ExpressionStatement	 
>341	AssignmentExpr	nBlueValue = MAX ( 0 , MIN ( 255 , pabyBlue [ i ] + nLastBlueError ) )
>342	CallExpression	MAX ( 0 , MIN ( 255 , pabyBlue [ i ] + nLastBlueError ) )
>343	ArgumentList	0
>344	Argument	MIN ( 255 , pabyBlue [ i ] + nLastBlueError )
>345	CallExpression	MIN ( 255 , pabyBlue [ i ] + nLastBlueError )
>346	ArgumentList	255
>347	Argument	pabyBlue [ i ] + nLastBlueError
>348	AdditiveExpression	pabyBlue [ i ] + nLastBlueError
>349	Identifier	nLastBlueError
>350	ArrayIndexing	pabyBlue [ i ]
>351	Identifier	i
>352	Identifier	pabyBlue
>353	Argument	255
>354	PrimaryExpression	255
>355	Callee	MIN
>356	Identifier	MIN
>357	Argument	0
>358	PrimaryExpression	0
>359	Callee	MAX
>360	Identifier	MAX
>361	Identifier	nBlueValue
>362	ExpressionStatement	 
>363	AssignmentExpr	nGreenValue = MAX ( 0 , MIN ( 255 , pabyGreen [ i ] + nLastGreenError ) )
>364	CallExpression	MAX ( 0 , MIN ( 255 , pabyGreen [ i ] + nLastGreenError ) )
>365	ArgumentList	0
>366	Argument	MIN ( 255 , pabyGreen [ i ] + nLastGreenError )
>367	CallExpression	MIN ( 255 , pabyGreen [ i ] + nLastGreenError )
>368	ArgumentList	255
>369	Argument	pabyGreen [ i ] + nLastGreenError
>370	AdditiveExpression	pabyGreen [ i ] + nLastGreenError
>371	Identifier	nLastGreenError
>372	ArrayIndexing	pabyGreen [ i ]
>373	Identifier	i
>374	Identifier	pabyGreen
>375	Argument	255
>376	PrimaryExpression	255
>377	Callee	MIN
>378	Identifier	MIN
>379	Argument	0
>380	PrimaryExpression	0
>381	Callee	MAX
>382	Identifier	MAX
>383	Identifier	nGreenValue
>384	ExpressionStatement	 
>385	AssignmentExpr	nRedValue = MAX ( 0 , MIN ( 255 , pabyRed [ i ] + nLastRedError ) )
>386	CallExpression	MAX ( 0 , MIN ( 255 , pabyRed [ i ] + nLastRedError ) )
>387	ArgumentList	0
>388	Argument	MIN ( 255 , pabyRed [ i ] + nLastRedError )
>389	CallExpression	MIN ( 255 , pabyRed [ i ] + nLastRedError )
>390	ArgumentList	255
>391	Argument	pabyRed [ i ] + nLastRedError
>392	AdditiveExpression	pabyRed [ i ] + nLastRedError
>393	Identifier	nLastRedError
>394	ArrayIndexing	pabyRed [ i ]
>395	Identifier	i
>396	Identifier	pabyRed
>397	Argument	255
>398	PrimaryExpression	255
>399	Callee	MIN
>400	Identifier	MIN
>401	Argument	0
>402	PrimaryExpression	0
>403	Callee	MAX
>404	Identifier	MAX
>405	Identifier	nRedValue
>406	IdentifierDeclStatement	 
>407	IdentifierDecl	nBlueValue
>408	Identifier	nBlueValue
>409	IdentifierDeclType	int
>410	IdentifierDecl	nGreenValue
>411	Identifier	nGreenValue
>412	IdentifierDeclType	int
>413	IdentifierDecl	nRedValue
>414	Identifier	nRedValue
>415	IdentifierDeclType	int
>416	IdentifierDeclStatement	 
>417	IdentifierDecl	iBlue
>418	Identifier	iBlue
>419	IdentifierDeclType	int
>420	IdentifierDecl	iGreen
>421	Identifier	iGreen
>422	IdentifierDeclType	int
>423	IdentifierDecl	iRed
>424	Identifier	iRed
>425	IdentifierDeclType	int
>426	IdentifierDecl	nSixth
>427	Identifier	nSixth
>428	IdentifierDeclType	int
>429	IdentifierDecl	nError
>430	Identifier	nError
>431	IdentifierDeclType	int
>432	IdentifierDecl	iIndex
>433	Identifier	iIndex
>434	IdentifierDeclType	int
>435	IncDecOp	 
>436	IncDec	++
>437	Identifier	i
>438	Condition	 
>439	RelationalExpression	i < nXSize
>440	Identifier	nXSize
>441	Identifier	i
>442	ForInit	 
>443	AssignmentExpr	i = 0
>444	PrimaryExpression	0
>445	Identifier	i
>446	ExpressionStatement	 
>447	AssignmentExpr	nLastBlueError = 0
>448	PrimaryExpression	0
>449	Identifier	nLastBlueError
>450	ExpressionStatement	 
>451	AssignmentExpr	nLastGreenError = 0
>452	PrimaryExpression	0
>453	Identifier	nLastGreenError
>454	ExpressionStatement	 
>455	AssignmentExpr	nLastRedError = 0
>456	PrimaryExpression	0
>457	Identifier	nLastRedError
>458	ExpressionStatement	 
>459	CallExpression	memset ( panError , 0 , sizeof ( int ) * ( nXSize + 2 ) * 3 )
>460	ArgumentList	panError
>461	Argument	sizeof ( int ) * ( nXSize + 2 ) * 3
>462	MultiplicativeExpression	sizeof ( int ) * ( nXSize + 2 ) * 3
>463	MultiplicativeExpression	( nXSize + 2 ) * 3
>464	PrimaryExpression	3
>465	AdditiveExpression	nXSize + 2
>466	PrimaryExpression	2
>467	Identifier	nXSize
>468	SizeofExpr	sizeof ( int )
>469	SizeofOperand	int
>470	Sizeof	sizeof
>471	Argument	0
>472	PrimaryExpression	0
>473	Argument	panError
>474	Identifier	panError
>475	Callee	memset
>476	Identifier	memset
>477	ForStatement	for ( i = 0 ; i < nXSize ; i ++ )
>478	CompoundStatement	 
>479	ExpressionStatement	 
>480	AssignmentExpr	pabyBlue [ i ] = ( GByte ) MAX ( 0 , MIN ( 255 , ( pabyBlue [ i ] + panError [ i * 3 + 2 + 3 ] ) ) )
>481	CastExpression	( GByte ) MAX ( 0 , MIN ( 255 , ( pabyBlue [ i ] + panError [ i * 3 + 2 + 3 ] ) ) )
>482	CallExpression	MAX ( 0 , MIN ( 255 , ( pabyBlue [ i ] + panError [ i * 3 + 2 + 3 ] ) ) )
>483	ArgumentList	0
>484	Argument	MIN ( 255 , ( pabyBlue [ i ] + panError [ i * 3 + 2 + 3 ] ) )
>485	CallExpression	MIN ( 255 , ( pabyBlue [ i ] + panError [ i * 3 + 2 + 3 ] ) )
>486	ArgumentList	255
>487	Argument	pabyBlue [ i ] + panError [ i * 3 + 2 + 3 ]
>488	AdditiveExpression	pabyBlue [ i ] + panError [ i * 3 + 2 + 3 ]
>489	ArrayIndexing	panError [ i * 3 + 2 + 3 ]
>490	AdditiveExpression	i * 3 + 2 + 3
>491	AdditiveExpression	2 + 3
>492	PrimaryExpression	3
>493	PrimaryExpression	2
>494	MultiplicativeExpression	i * 3
>495	PrimaryExpression	3
>496	Identifier	i
>497	Identifier	panError
>498	ArrayIndexing	pabyBlue [ i ]
>499	Identifier	i
>500	Identifier	pabyBlue
>501	Argument	255
>502	PrimaryExpression	255
>503	Callee	MIN
>504	Identifier	MIN
>505	Argument	0
>506	PrimaryExpression	0
>507	Callee	MAX
>508	Identifier	MAX
>509	CastTarget	GByte
>510	ArrayIndexing	pabyBlue [ i ]
>511	Identifier	i
>512	Identifier	pabyBlue
>513	ExpressionStatement	 
>514	AssignmentExpr	pabyGreen [ i ] = ( GByte ) MAX ( 0 , MIN ( 255 , ( pabyGreen [ i ] + panError [ i * 3 + 1 + 3 ] ) ) )
>515	CastExpression	( GByte ) MAX ( 0 , MIN ( 255 , ( pabyGreen [ i ] + panError [ i * 3 + 1 + 3 ] ) ) )
>516	CallExpression	MAX ( 0 , MIN ( 255 , ( pabyGreen [ i ] + panError [ i * 3 + 1 + 3 ] ) ) )
>517	ArgumentList	0
>518	Argument	MIN ( 255 , ( pabyGreen [ i ] + panError [ i * 3 + 1 + 3 ] ) )
>519	CallExpression	MIN ( 255 , ( pabyGreen [ i ] + panError [ i * 3 + 1 + 3 ] ) )
>520	ArgumentList	255
>521	Argument	pabyGreen [ i ] + panError [ i * 3 + 1 + 3 ]
>522	AdditiveExpression	pabyGreen [ i ] + panError [ i * 3 + 1 + 3 ]
>523	ArrayIndexing	panError [ i * 3 + 1 + 3 ]
>524	AdditiveExpression	i * 3 + 1 + 3
>525	AdditiveExpression	1 + 3
>526	PrimaryExpression	3
>527	PrimaryExpression	1
>528	MultiplicativeExpression	i * 3
>529	PrimaryExpression	3
>530	Identifier	i
>531	Identifier	panError
>532	ArrayIndexing	pabyGreen [ i ]
>533	Identifier	i
>534	Identifier	pabyGreen
>535	Argument	255
>536	PrimaryExpression	255
>537	Callee	MIN
>538	Identifier	MIN
>539	Argument	0
>540	PrimaryExpression	0
>541	Callee	MAX
>542	Identifier	MAX
>543	CastTarget	GByte
>544	ArrayIndexing	pabyGreen [ i ]
>545	Identifier	i
>546	Identifier	pabyGreen
>547	ExpressionStatement	 
>548	AssignmentExpr	pabyRed [ i ] = ( GByte ) MAX ( 0 , MIN ( 255 , ( pabyRed [ i ] + panError [ i * 3 + 0 + 3 ] ) ) )
>549	CastExpression	( GByte ) MAX ( 0 , MIN ( 255 , ( pabyRed [ i ] + panError [ i * 3 + 0 + 3 ] ) ) )
>550	CallExpression	MAX ( 0 , MIN ( 255 , ( pabyRed [ i ] + panError [ i * 3 + 0 + 3 ] ) ) )
>551	ArgumentList	0
>552	Argument	MIN ( 255 , ( pabyRed [ i ] + panError [ i * 3 + 0 + 3 ] ) )
>553	CallExpression	MIN ( 255 , ( pabyRed [ i ] + panError [ i * 3 + 0 + 3 ] ) )
>554	ArgumentList	255
>555	Argument	pabyRed [ i ] + panError [ i * 3 + 0 + 3 ]
>556	AdditiveExpression	pabyRed [ i ] + panError [ i * 3 + 0 + 3 ]
>557	ArrayIndexing	panError [ i * 3 + 0 + 3 ]
>558	AdditiveExpression	i * 3 + 0 + 3
>559	AdditiveExpression	0 + 3
>560	PrimaryExpression	3
>561	PrimaryExpression	0
>562	MultiplicativeExpression	i * 3
>563	PrimaryExpression	3
>564	Identifier	i
>565	Identifier	panError
>566	ArrayIndexing	pabyRed [ i ]
>567	Identifier	i
>568	Identifier	pabyRed
>569	Argument	255
>570	PrimaryExpression	255
>571	Callee	MIN
>572	Identifier	MIN
>573	Argument	0
>574	PrimaryExpression	0
>575	Callee	MAX
>576	Identifier	MAX
>577	CastTarget	GByte
>578	ArrayIndexing	pabyRed [ i ]
>579	Identifier	i
>580	Identifier	pabyRed
>581	IncDecOp	 
>582	IncDec	++
>583	Identifier	i
>584	Condition	 
>585	RelationalExpression	i < nXSize
>586	Identifier	nXSize
>587	Identifier	i
>588	ForInit	 
>589	AssignmentExpr	i = 0
>590	PrimaryExpression	0
>591	Identifier	i
>592	ExpressionStatement	 
>593	CallExpression	GDALRasterIO ( hBlue , GF_Read , 0 , iScanline , nXSize , 1 , pabyBlue , nXSize , 1 , GDT_Byte , 0 , 0 )
>594	ArgumentList	hBlue
>595	Argument	0
>596	PrimaryExpression	0
>597	Argument	0
>598	PrimaryExpression	0
>599	Argument	GDT_Byte
>600	Identifier	GDT_Byte
>601	Argument	1
>602	PrimaryExpression	1
>603	Argument	nXSize
>604	Identifier	nXSize
>605	Argument	pabyBlue
>606	Identifier	pabyBlue
>607	Argument	1
>608	PrimaryExpression	1
>609	Argument	nXSize
>610	Identifier	nXSize
>611	Argument	iScanline
>612	Identifier	iScanline
>613	Argument	0
>614	PrimaryExpression	0
>615	Argument	GF_Read
>616	Identifier	GF_Read
>617	Argument	hBlue
>618	Identifier	hBlue
>619	Callee	GDALRasterIO
>620	Identifier	GDALRasterIO
>621	ExpressionStatement	 
>622	CallExpression	GDALRasterIO ( hGreen , GF_Read , 0 , iScanline , nXSize , 1 , pabyGreen , nXSize , 1 , GDT_Byte , 0 , 0 )
>623	ArgumentList	hGreen
>624	Argument	0
>625	PrimaryExpression	0
>626	Argument	0
>627	PrimaryExpression	0
>628	Argument	GDT_Byte
>629	Identifier	GDT_Byte
>630	Argument	1
>631	PrimaryExpression	1
>632	Argument	nXSize
>633	Identifier	nXSize
>634	Argument	pabyGreen
>635	Identifier	pabyGreen
>636	Argument	1
>637	PrimaryExpression	1
>638	Argument	nXSize
>639	Identifier	nXSize
>640	Argument	iScanline
>641	Identifier	iScanline
>642	Argument	0
>643	PrimaryExpression	0
>644	Argument	GF_Read
>645	Identifier	GF_Read
>646	Argument	hGreen
>647	Identifier	hGreen
>648	Callee	GDALRasterIO
>649	Identifier	GDALRasterIO
>650	ExpressionStatement	 
>651	CallExpression	GDALRasterIO ( hRed , GF_Read , 0 , iScanline , nXSize , 1 , pabyRed , nXSize , 1 , GDT_Byte , 0 , 0 )
>652	ArgumentList	hRed
>653	Argument	0
>654	PrimaryExpression	0
>655	Argument	0
>656	PrimaryExpression	0
>657	Argument	GDT_Byte
>658	Identifier	GDT_Byte
>659	Argument	1
>660	PrimaryExpression	1
>661	Argument	nXSize
>662	Identifier	nXSize
>663	Argument	pabyRed
>664	Identifier	pabyRed
>665	Argument	1
>666	PrimaryExpression	1
>667	Argument	nXSize
>668	Identifier	nXSize
>669	Argument	iScanline
>670	Identifier	iScanline
>671	Argument	0
>672	PrimaryExpression	0
>673	Argument	GF_Read
>674	Identifier	GF_Read
>675	Argument	hRed
>676	Identifier	hRed
>677	Callee	GDALRasterIO
>678	Identifier	GDALRasterIO
>679	IfStatement	if ( ! pfnProgress ( iScanline / ( double ) nYSize , NULL , pProgressArg ) )
>680	CompoundStatement	 
>681	GotoStatement	 
>682	Identifier	end_and_cleanup
>683	ExpressionStatement	 
>684	AssignmentExpr	err = CE_Failure
>685	Identifier	CE_Failure
>686	Identifier	err
>687	ExpressionStatement	 
>688	CallExpression	CPLError ( CE_Failure , CPLE_UserInterrupt , \"User Terminated\" )
>689	ArgumentList	CE_Failure
>690	Argument	\"User Terminated\"
>691	PrimaryExpression	\"User Terminated\"
>692	Argument	CPLE_UserInterrupt
>693	Identifier	CPLE_UserInterrupt
>694	Argument	CE_Failure
>695	Identifier	CE_Failure
>696	Callee	CPLError
>697	Identifier	CPLError
>698	Condition	 
>699	UnaryOp	! pfnProgress ( iScanline / ( double ) nYSize , NULL , pProgressArg )
>700	CallExpression	pfnProgress ( iScanline / ( double ) nYSize , NULL , pProgressArg )
>701	ArgumentList	iScanline / ( double ) nYSize
>702	Argument	pProgressArg
>703	Identifier	pProgressArg
>704	Argument	NULL
>705	Identifier	NULL
>706	Argument	iScanline / ( double ) nYSize
>707	MultiplicativeExpression	iScanline / ( double ) nYSize
>708	CastExpression	( double ) nYSize
>709	Identifier	nYSize
>710	CastTarget	double
>711	Identifier	iScanline
>712	Callee	pfnProgress
>713	Identifier	pfnProgress
>714	UnaryOperator	!
>715	IdentifierDeclStatement	 
>716	IdentifierDecl	i
>717	Identifier	i
>718	IdentifierDeclType	int
>719	IdentifierDecl	nLastBlueError
>720	Identifier	nLastBlueError
>721	IdentifierDeclType	int
>722	IdentifierDecl	nLastGreenError
>723	Identifier	nLastGreenError
>724	IdentifierDeclType	int
>725	IdentifierDecl	nLastRedError
>726	Identifier	nLastRedError
>727	IdentifierDeclType	int
>728	IncDecOp	 
>729	IncDec	++
>730	Identifier	iScanline
>731	Condition	 
>732	RelationalExpression	iScanline < nYSize
>733	Identifier	nYSize
>734	Identifier	iScanline
>735	ForInit	 
>736	AssignmentExpr	iScanline = 0
>737	PrimaryExpression	0
>738	Identifier	iScanline
>739	IdentifierDeclStatement	 
>740	IdentifierDecl	iScanline
>741	Identifier	iScanline
>742	IdentifierDeclType	int
>743	IfStatement	if ( pabyRed == NULL || pabyGreen == NULL || pabyBlue == NULL || pabyIndex == NULL || panError == NULL )
>744	CompoundStatement	 
>745	GotoStatement	 
>746	Identifier	end_and_cleanup
>747	ExpressionStatement	 
>748	AssignmentExpr	err = CE_Failure
>749	Identifier	CE_Failure
>750	Identifier	err
>751	ExpressionStatement	 
>752	CallExpression	CPLError ( CE_Failure , CPLE_OutOfMemory , \"VSIMalloc()
>753	ArgumentList	CE_Failure
>754	Argument	\"VSIMalloc()
>755	PrimaryExpression	\"VSIMalloc()
>756	Argument	CPLE_OutOfMemory
>757	Identifier	CPLE_OutOfMemory
>758	Argument	CE_Failure
>759	Identifier	CE_Failure
>760	Callee	CPLError
>761	Identifier	CPLError
>762	Condition	 
>763	OrExpression	pabyRed == NULL || pabyGreen == NULL || pabyBlue == NULL || pabyIndex == NULL || panError == NULL
>764	OrExpression	pabyGreen == NULL || pabyBlue == NULL || pabyIndex == NULL || panError == NULL
>765	OrExpression	pabyBlue == NULL || pabyIndex == NULL || panError == NULL
>766	OrExpression	pabyIndex == NULL || panError == NULL
>767	EqualityExpression	panError == NULL
>768	Identifier	NULL
>769	Identifier	panError
>770	EqualityExpression	pabyIndex == NULL
>771	Identifier	NULL
>772	Identifier	pabyIndex
>773	EqualityExpression	pabyBlue == NULL
>774	Identifier	NULL
>775	Identifier	pabyBlue
>776	EqualityExpression	pabyGreen == NULL
>777	Identifier	NULL
>778	Identifier	pabyGreen
>779	EqualityExpression	pabyRed == NULL
>780	Identifier	NULL
>781	Identifier	pabyRed
>782	ExpressionStatement	 
>783	AssignmentExpr	panError = ( int * ) VSICalloc ( sizeof ( int ) , ( nXSize + 2 ) * 3 )
>784	CastExpression	( int * ) VSICalloc ( sizeof ( int ) , ( nXSize + 2 ) * 3 )
>785	CallExpression	VSICalloc ( sizeof ( int ) , ( nXSize + 2 ) * 3 )
>786	ArgumentList	sizeof ( int )
>787	Argument	( nXSize + 2 ) * 3
>788	MultiplicativeExpression	( nXSize + 2 ) * 3
>789	PrimaryExpression	3
>790	AdditiveExpression	nXSize + 2
>791	PrimaryExpression	2
>792	Identifier	nXSize
>793	Argument	sizeof ( int )
>794	SizeofExpr	sizeof ( int )
>795	SizeofOperand	int
>796	Sizeof	sizeof
>797	Callee	VSICalloc
>798	Identifier	VSICalloc
>799	CastTarget	int *
>800	Identifier	panError
>801	ExpressionStatement	 
>802	AssignmentExpr	pabyIndex = ( GByte * ) VSIMalloc ( nXSize )
>803	CastExpression	( GByte * ) VSIMalloc ( nXSize )
>804	CallExpression	VSIMalloc ( nXSize )
>805	ArgumentList	nXSize
>806	Argument	nXSize
>807	Identifier	nXSize
>808	Callee	VSIMalloc
>809	Identifier	VSIMalloc
>810	CastTarget	GByte *
>811	Identifier	pabyIndex
>812	ExpressionStatement	 
>813	AssignmentExpr	pabyBlue = ( GByte * ) VSIMalloc ( nXSize )
>814	CastExpression	( GByte * ) VSIMalloc ( nXSize )
>815	CallExpression	VSIMalloc ( nXSize )
>816	ArgumentList	nXSize
>817	Argument	nXSize
>818	Identifier	nXSize
>819	Callee	VSIMalloc
>820	Identifier	VSIMalloc
>821	CastTarget	GByte *
>822	Identifier	pabyBlue
>823	ExpressionStatement	 
>824	AssignmentExpr	pabyGreen = ( GByte * ) VSIMalloc ( nXSize )
>825	CastExpression	( GByte * ) VSIMalloc ( nXSize )
>826	CallExpression	VSIMalloc ( nXSize )
>827	ArgumentList	nXSize
>828	Argument	nXSize
>829	Identifier	nXSize
>830	Callee	VSIMalloc
>831	Identifier	VSIMalloc
>832	CastTarget	GByte *
>833	Identifier	pabyGreen
>834	ExpressionStatement	 
>835	AssignmentExpr	pabyRed = ( GByte * ) VSIMalloc ( nXSize )
>836	CastExpression	( GByte * ) VSIMalloc ( nXSize )
>837	CallExpression	VSIMalloc ( nXSize )
>838	ArgumentList	nXSize
>839	Argument	nXSize
>840	Identifier	nXSize
>841	Callee	VSIMalloc
>842	Identifier	VSIMalloc
>843	CastTarget	GByte *
>844	Identifier	pabyRed
>845	IdentifierDeclStatement	 
>846	IdentifierDecl	* panError
>847	Identifier	panError
>848	IdentifierDeclType	int *
>849	IdentifierDeclStatement	 
>850	IdentifierDecl	* pabyIndex
>851	Identifier	pabyIndex
>852	IdentifierDeclType	GByte *
>853	IdentifierDecl	* pabyBlue
>854	Identifier	pabyBlue
>855	IdentifierDeclType	GByte *
>856	IdentifierDecl	* pabyGreen
>857	Identifier	pabyGreen
>858	IdentifierDeclType	GByte *
>859	IdentifierDecl	* pabyRed
>860	Identifier	pabyRed
>861	IdentifierDeclType	GByte *
>862	ExpressionStatement	 
>863	CallExpression	FindNearestColor ( nColors , anPCT , pabyColorMap )
>864	ArgumentList	nColors
>865	Argument	pabyColorMap
>866	Identifier	pabyColorMap
>867	Argument	anPCT
>868	Identifier	anPCT
>869	Argument	nColors
>870	Identifier	nColors
>871	Callee	FindNearestColor
>872	Identifier	FindNearestColor
>873	ExpressionStatement	 
>874	AssignmentExpr	pabyColorMap = ( GByte * ) CPLMalloc ( C_LEVELS * C_LEVELS * C_LEVELS * sizeof ( int ) )
>875	CastExpression	( GByte * ) CPLMalloc ( C_LEVELS * C_LEVELS * C_LEVELS * sizeof ( int ) )
>876	CallExpression	CPLMalloc ( C_LEVELS * C_LEVELS * C_LEVELS * sizeof ( int ) )
>877	ArgumentList	C_LEVELS * C_LEVELS * C_LEVELS * sizeof ( int )
>878	Argument	C_LEVELS * C_LEVELS * C_LEVELS * sizeof ( int )
>879	MultiplicativeExpression	C_LEVELS * C_LEVELS * C_LEVELS * sizeof ( int )
>880	MultiplicativeExpression	C_LEVELS * C_LEVELS * sizeof ( int )
>881	MultiplicativeExpression	C_LEVELS * sizeof ( int )
>882	SizeofExpr	sizeof ( int )
>883	SizeofOperand	int
>884	Sizeof	sizeof
>885	Identifier	C_LEVELS
>886	Identifier	C_LEVELS
>887	Identifier	C_LEVELS
>888	Callee	CPLMalloc
>889	Identifier	CPLMalloc
>890	CastTarget	GByte *
>891	Identifier	pabyColorMap
>892	IdentifierDeclStatement	 
>893	IdentifierDecl	* pabyColorMap
>894	Identifier	pabyColorMap
>895	IdentifierDeclType	GByte *
>896	ForStatement	for ( iColor = 0 ; iColor < nColors ; iColor ++ )
>897	CompoundStatement	 
>898	ExpressionStatement	 
>899	AssignmentExpr	anPCT [ iColor + 512 ] = sEntry . c3
>900	MemberAccess	sEntry . c3
>901	Identifier	c3
>902	Identifier	sEntry
>903	ArrayIndexing	anPCT [ iColor + 512 ]
>904	AdditiveExpression	iColor + 512
>905	PrimaryExpression	512
>906	Identifier	iColor
>907	Identifier	anPCT
>908	ExpressionStatement	 
>909	AssignmentExpr	anPCT [ iColor + 256 ] = sEntry . c2
>910	MemberAccess	sEntry . c2
>911	Identifier	c2
>912	Identifier	sEntry
>913	ArrayIndexing	anPCT [ iColor + 256 ]
>914	AdditiveExpression	iColor + 256
>915	PrimaryExpression	256
>916	Identifier	iColor
>917	Identifier	anPCT
>918	ExpressionStatement	 
>919	AssignmentExpr	anPCT [ iColor ] = sEntry . c1
>920	MemberAccess	sEntry . c1
>921	Identifier	c1
>922	Identifier	sEntry
>923	ArrayIndexing	anPCT [ iColor ]
>924	Identifier	iColor
>925	Identifier	anPCT
>926	ExpressionStatement	 
>927	CallExpression	GDALGetColorEntryAsRGB ( hColorTable , iColor , & sEntry )
>928	ArgumentList	hColorTable
>929	Argument	& sEntry
>930	UnaryOp	& sEntry
>931	Identifier	sEntry
>932	UnaryOperator	&
>933	Argument	iColor
>934	Identifier	iColor
>935	Argument	hColorTable
>936	Identifier	hColorTable
>937	Callee	GDALGetColorEntryAsRGB
>938	Identifier	GDALGetColorEntryAsRGB
>939	IdentifierDeclStatement	 
>940	IdentifierDecl	sEntry
>941	Identifier	sEntry
>942	IdentifierDeclType	GDALColorEntry
>943	IncDecOp	 
>944	IncDec	++
>945	Identifier	iColor
>946	Condition	 
>947	RelationalExpression	iColor < nColors
>948	Identifier	nColors
>949	Identifier	iColor
>950	ForInit	 
>951	AssignmentExpr	iColor = 0
>952	PrimaryExpression	0
>953	Identifier	iColor
>954	IfStatement	if ( nColors == 0 )
>955	ElseStatement	else
>956	IfStatement	if ( nColors > 256 )
>957	CompoundStatement	 
>958	ReturnStatement	 
>959	Identifier	CE_Failure
>960	ExpressionStatement	 
>961	Statement	 
>962	Statement	 
>963	Statement	 
>964	Statement	 
>965	Statement	 
>966	Statement	 
>967	Statement	 
>968	Statement	 
>969	Statement	 
>970	Condition	 
>971	RelationalExpression	nColors > 256
>972	PrimaryExpression	256
>973	Identifier	nColors
>974	CompoundStatement	 
>975	ReturnStatement	 
>976	Identifier	CE_Failure
>977	ExpressionStatement	 
>978	Statement	 
>979	Statement	 
>980	Statement	 
>981	Statement	 
>982	Statement	 
>983	Statement	 
>984	Statement	 
>985	Statement	 
>986	Statement	 
>987	Condition	 
>988	EqualityExpression	nColors == 0
>989	PrimaryExpression	0
>990	Identifier	nColors
>991	ExpressionStatement	 
>992	AssignmentExpr	nColors = GDALGetColorEntryCount ( hColorTable )
>993	CallExpression	GDALGetColorEntryCount ( hColorTable )
>994	ArgumentList	hColorTable
>995	Argument	hColorTable
>996	Identifier	hColorTable
>997	Callee	GDALGetColorEntryCount
>998	Identifier	GDALGetColorEntryCount
>999	Identifier	nColors
>1000	IdentifierDeclStatement	 
>1001	IdentifierDecl	iColor
>1002	Identifier	iColor
>1003	IdentifierDeclType	int
>1004	IdentifierDecl	anPCT [ 768 ]
>1005	PrimaryExpression	768
>1006	Identifier	anPCT
>1007	IdentifierDeclType	int [ 768 ]
>1008	IdentifierDecl	nColors
>1009	Identifier	nColors
>1010	IdentifierDeclType	int
>1011	IfStatement	if ( pfnProgress == NULL )
>1012	ExpressionStatement	 
>1013	AssignmentExpr	pfnProgress = GDALDummyProgress
>1014	Identifier	GDALDummyProgress
>1015	Identifier	pfnProgress
>1016	Condition	 
>1017	EqualityExpression	pfnProgress == NULL
>1018	Identifier	NULL
>1019	Identifier	pfnProgress
>1020	IfStatement	if ( GDALGetRasterBandXSize ( hTarget ) != nXSize || GDALGetRasterBandYSize ( hTarget ) != nYSize )
>1021	CompoundStatement	 
>1022	ReturnStatement	 
>1023	Identifier	CE_Failure
>1024	ExpressionStatement	 
>1025	Statement	 
>1026	Statement	 
>1027	Statement	 
>1028	Statement	 
>1029	Statement	 
>1030	Statement	 
>1031	Statement	 
>1032	Statement	 
>1033	Statement	 
>1034	Condition	 
>1035	OrExpression	GDALGetRasterBandXSize ( hTarget ) != nXSize || GDALGetRasterBandYSize ( hTarget ) != nYSize
>1036	EqualityExpression	GDALGetRasterBandYSize ( hTarget ) != nYSize
>1037	Identifier	nYSize
>1038	CallExpression	GDALGetRasterBandYSize ( hTarget )
>1039	ArgumentList	hTarget
>1040	Argument	hTarget
>1041	Identifier	hTarget
>1042	Callee	GDALGetRasterBandYSize
>1043	Identifier	GDALGetRasterBandYSize
>1044	EqualityExpression	GDALGetRasterBandXSize ( hTarget ) != nXSize
>1045	Identifier	nXSize
>1046	CallExpression	GDALGetRasterBandXSize ( hTarget )
>1047	ArgumentList	hTarget
>1048	Argument	hTarget
>1049	Identifier	hTarget
>1050	Callee	GDALGetRasterBandXSize
>1051	Identifier	GDALGetRasterBandXSize
>1052	IfStatement	if ( GDALGetRasterBandXSize ( hGreen ) != nXSize || GDALGetRasterBandYSize ( hGreen ) != nYSize || GDALGetRasterBandXSize ( \
>1053	CompoundStatement	 
>1054	ReturnStatement	 
>1055	Identifier	CE_Failure
>1056	ExpressionStatement	 
>1057	CallExpression	CPLError ( CE_Failure , CPLE_IllegalArg , \"Green or blue band doesn't match size of red band.\n\" )
>1058	ArgumentList	CE_Failure
>1059	Argument	\"Green or blue band doesn't match size of red band.\n\"
>1060	PrimaryExpression	\"Green or blue band doesn't match size of red band.\n\"
>1061	Argument	CPLE_IllegalArg
>1062	Identifier	CPLE_IllegalArg
>1063	Argument	CE_Failure
>1064	Identifier	CE_Failure
>1065	Callee	CPLError
>1066	Identifier	CPLError
>1067	Condition	 
>1068	OrExpression	GDALGetRasterBandXSize ( hGreen ) != nXSize || GDALGetRasterBandYSize ( hGreen ) != nYSize || GDALGetRasterBandXSize ( \
>1069	OrExpression	GDALGetRasterBandYSize ( hGreen ) != nYSize || GDALGetRasterBandXSize ( hBlue ) != nXSize || GDALGetRasterBandYSize ( \
>1070	OrExpression	GDALGetRasterBandXSize ( hBlue ) != nXSize || GDALGetRasterBandYSize ( hBlue ) != nYSize
>1071	EqualityExpression	GDALGetRasterBandYSize ( hBlue ) != nYSize
>1072	Identifier	nYSize
>1073	CallExpression	GDALGetRasterBandYSize ( hBlue )
>1074	ArgumentList	hBlue
>1075	Argument	hBlue
>1076	Identifier	hBlue
>1077	Callee	GDALGetRasterBandYSize
>1078	Identifier	GDALGetRasterBandYSize
>1079	EqualityExpression	GDALGetRasterBandXSize ( hBlue ) != nXSize
>1080	Identifier	nXSize
>1081	CallExpression	GDALGetRasterBandXSize ( hBlue )
>1082	ArgumentList	hBlue
>1083	Argument	hBlue
>1084	Identifier	hBlue
>1085	Callee	GDALGetRasterBandXSize
>1086	Identifier	GDALGetRasterBandXSize
>1087	EqualityExpression	GDALGetRasterBandYSize ( hGreen ) != nYSize
>1088	Identifier	nYSize
>1089	CallExpression	GDALGetRasterBandYSize ( hGreen )
>1090	ArgumentList	hGreen
>1091	Argument	hGreen
>1092	Identifier	hGreen
>1093	Callee	GDALGetRasterBandYSize
>1094	Identifier	GDALGetRasterBandYSize
>1095	EqualityExpression	GDALGetRasterBandXSize ( hGreen ) != nXSize
>1096	Identifier	nXSize
>1097	CallExpression	GDALGetRasterBandXSize ( hGreen )
>1098	ArgumentList	hGreen
>1099	Argument	hGreen
>1100	Identifier	hGreen
>1101	Callee	GDALGetRasterBandXSize
>1102	Identifier	GDALGetRasterBandXSize
>1103	ExpressionStatement	 
>1104	AssignmentExpr	nYSize = GDALGetRasterBandYSize ( hRed )
>1105	CallExpression	GDALGetRasterBandYSize ( hRed )
>1106	ArgumentList	hRed
>1107	Argument	hRed
>1108	Identifier	hRed
>1109	Callee	GDALGetRasterBandYSize
>1110	Identifier	GDALGetRasterBandYSize
>1111	Identifier	nYSize
>1112	ExpressionStatement	 
>1113	AssignmentExpr	nXSize = GDALGetRasterBandXSize ( hRed )
>1114	CallExpression	GDALGetRasterBandXSize ( hRed )
>1115	ArgumentList	hRed
>1116	Argument	hRed
>1117	Identifier	hRed
>1118	Callee	GDALGetRasterBandXSize
>1119	Identifier	GDALGetRasterBandXSize
>1120	Identifier	nXSize
>1121	IdentifierDeclStatement	 
>1122	IdentifierDecl	err = CE_None
>1123	AssignmentExpr	err = CE_None
>1124	Identifier	CE_None
>1125	Identifier	CE_None
>1126	Identifier	err
>1127	IdentifierDeclType	CPLErr
>1128	IdentifierDeclStatement	 
>1129	IdentifierDecl	nYSize
>1130	Identifier	nYSize
>1131	IdentifierDeclType	int
>1132	IdentifierDecl	nXSize
>1133	Identifier	nXSize
>1134	IdentifierDeclType	int
>1135	ExpressionStatement	 
>1136	CallExpression	VALIDATE_POINTER1 ( hColorTable , \"GDALDitherRGB2PCT\" , CE_Failure )
>1137	ArgumentList	hColorTable
>1138	Argument	CE_Failure
>1139	Identifier	CE_Failure
>1140	Argument	\"GDALDitherRGB2PCT\"
>1141	PrimaryExpression	\"GDALDitherRGB2PCT\"
>1142	Argument	hColorTable
>1143	Identifier	hColorTable
>1144	Callee	VALIDATE_POINTER1
>1145	Identifier	VALIDATE_POINTER1
>1146	ExpressionStatement	 
>1147	CallExpression	VALIDATE_POINTER1 ( hTarget , \"GDALDitherRGB2PCT\" , CE_Failure )
>1148	ArgumentList	hTarget
>1149	Argument	CE_Failure
>1150	Identifier	CE_Failure
>1151	Argument	\"GDALDitherRGB2PCT\"
>1152	PrimaryExpression	\"GDALDitherRGB2PCT\"
>1153	Argument	hTarget
>1154	Identifier	hTarget
>1155	Callee	VALIDATE_POINTER1
>1156	Identifier	VALIDATE_POINTER1
>1157	ExpressionStatement	 
>1158	CallExpression	VALIDATE_POINTER1 ( hBlue , \"GDALDitherRGB2PCT\" , CE_Failure )
>1159	ArgumentList	hBlue
>1160	Argument	CE_Failure
>1161	Identifier	CE_Failure
>1162	Argument	\"GDALDitherRGB2PCT\"
>1163	PrimaryExpression	\"GDALDitherRGB2PCT\"
>1164	Argument	hBlue
>1165	Identifier	hBlue
>1166	Callee	VALIDATE_POINTER1
>1167	Identifier	VALIDATE_POINTER1
>1168	ExpressionStatement	 
>1169	CallExpression	VALIDATE_POINTER1 ( hGreen , \"GDALDitherRGB2PCT\" , CE_Failure )
>1170	ArgumentList	hGreen
>1171	Argument	CE_Failure
>1172	Identifier	CE_Failure
>1173	Argument	\"GDALDitherRGB2PCT\"
>1174	PrimaryExpression	\"GDALDitherRGB2PCT\"
>1175	Argument	hGreen
>1176	Identifier	hGreen
>1177	Callee	VALIDATE_POINTER1
>1178	Identifier	VALIDATE_POINTER1
>1179	ExpressionStatement	 
>1180	CallExpression	VALIDATE_POINTER1 ( hRed , \"GDALDitherRGB2PCT\" , CE_Failure )
>1181	ArgumentList	hRed
>1182	Argument	CE_Failure
>1183	Identifier	CE_Failure
>1184	Argument	\"GDALDitherRGB2PCT\"
>1185	PrimaryExpression	\"GDALDitherRGB2PCT\"
>1186	Argument	hRed
>1187	Identifier	hRed
>1188	Callee	VALIDATE_POINTER1
>1189	Identifier	VALIDATE_POINTER1
>1264	FunctionDef	FindNearestColor (int nColors , int * panPCT , GByte * pabyColorMap)
>1265	ParameterList	int nColors , int * panPCT , GByte * pabyColorMap
>1266	Parameter	 
>1267	Identifier	pabyColorMap
>1268	ParameterType	GByte *
>1269	Parameter	 
>1270	Identifier	panPCT
>1271	ParameterType	int *
>1272	Parameter	 
>1273	Identifier	nColors
>1274	ParameterType	int
>1275	ReturnType	static void
>1276	CompoundStatement	 
>1277	ForStatement	for ( iBlue = 0 ; iBlue < C_LEVELS ; iBlue ++ )
>1278	CompoundStatement	 
>1279	ForStatement	for ( iGreen = 0 ; iGreen < C_LEVELS ; iGreen ++ )
>1280	CompoundStatement	 
>1281	ForStatement	for ( iRed = 0 ; iRed < C_LEVELS ; iRed ++ )
>1282	CompoundStatement	 
>1283	ExpressionStatement	 
>1284	AssignmentExpr	pabyColorMap [ iRed + iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS ] = ( GByte ) nBestIndex
>1285	CastExpression	( GByte ) nBestIndex
>1286	Identifier	nBestIndex
>1287	CastTarget	GByte
>1288	ArrayIndexing	pabyColorMap [ iRed + iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS ]
>1289	AdditiveExpression	iRed + iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS
>1290	AdditiveExpression	iGreen * C_LEVELS + iBlue * C_LEVELS * C_LEVELS
>1291	MultiplicativeExpression	iBlue * C_LEVELS * C_LEVELS
>1292	MultiplicativeExpression	C_LEVELS * C_LEVELS
>1293	Identifier	C_LEVELS
>1294	Identifier	C_LEVELS
>1295	Identifier	iBlue
>1296	MultiplicativeExpression	iGreen * C_LEVELS
>1297	Identifier	C_LEVELS
>1298	Identifier	iGreen
>1299	Identifier	iRed
>1300	Identifier	pabyColorMap
>1301	ForStatement	for ( iColor = 0 ; iColor < nColors ; iColor ++ )
>1302	CompoundStatement	 
>1303	IfStatement	if ( nThisDist < nBestDist )
>1304	CompoundStatement	 
>1305	ExpressionStatement	 
>1306	AssignmentExpr	nBestDist = nThisDist
>1307	Identifier	nThisDist
>1308	Identifier	nBestDist
>1309	ExpressionStatement	 
>1310	AssignmentExpr	nBestIndex = iColor
>1311	Identifier	iColor
>1312	Identifier	nBestIndex
>1313	Condition	 
>1314	RelationalExpression	nThisDist < nBestDist
>1315	Identifier	nBestDist
>1316	Identifier	nThisDist
>1317	ExpressionStatement	 
>1318	AssignmentExpr	nThisDist = ABS ( nRedValue - panPCT [ iColor ] ) + ABS ( nGreenValue - panPCT [ iColor + 256 ] ) + ABS ( \
>1319	AdditiveExpression	ABS ( nRedValue - panPCT [ iColor ] ) + ABS ( nGreenValue - panPCT [ iColor + 256 ] ) + ABS ( nBlueValue \
>1320	AdditiveExpression	ABS ( nGreenValue - panPCT [ iColor + 256 ] ) + ABS ( nBlueValue - panPCT [ iColor + 512 ] )
>1321	CallExpression	ABS ( nBlueValue - panPCT [ iColor + 512 ] )
>1322	ArgumentList	nBlueValue - panPCT [ iColor + 512 ]
>1323	Argument	nBlueValue - panPCT [ iColor + 512 ]
>1324	AdditiveExpression	nBlueValue - panPCT [ iColor + 512 ]
>1325	ArrayIndexing	panPCT [ iColor + 512 ]
>1326	AdditiveExpression	iColor + 512
>1327	PrimaryExpression	512
>1328	Identifier	iColor
>1329	Identifier	panPCT
>1330	Identifier	nBlueValue
>1331	Callee	ABS
>1332	Identifier	ABS
>1333	CallExpression	ABS ( nGreenValue - panPCT [ iColor + 256 ] )
>1334	ArgumentList	nGreenValue - panPCT [ iColor + 256 ]
>1335	Argument	nGreenValue - panPCT [ iColor + 256 ]
>1336	AdditiveExpression	nGreenValue - panPCT [ iColor + 256 ]
>1337	ArrayIndexing	panPCT [ iColor + 256 ]
>1338	AdditiveExpression	iColor + 256
>1339	PrimaryExpression	256
>1340	Identifier	iColor
>1341	Identifier	panPCT
>1342	Identifier	nGreenValue
>1343	Callee	ABS
>1344	Identifier	ABS
>1345	CallExpression	ABS ( nRedValue - panPCT [ iColor ] )
>1346	ArgumentList	nRedValue - panPCT [ iColor ]
>1347	Argument	nRedValue - panPCT [ iColor ]
>1348	AdditiveExpression	nRedValue - panPCT [ iColor ]
>1349	ArrayIndexing	panPCT [ iColor ]
>1350	Identifier	iColor
>1351	Identifier	panPCT
>1352	Identifier	nRedValue
>1353	Callee	ABS
>1354	Identifier	ABS
>1355	Identifier	nThisDist
>1356	IdentifierDeclStatement	 
>1357	IdentifierDecl	nThisDist
>1358	Identifier	nThisDist
>1359	IdentifierDeclType	int
>1360	IncDecOp	 
>1361	IncDec	++
>1362	Identifier	iColor
>1363	Condition	 
>1364	RelationalExpression	iColor < nColors
>1365	Identifier	nColors
>1366	Identifier	iColor
>1367	ForInit	 
>1368	AssignmentExpr	iColor = 0
>1369	PrimaryExpression	0
>1370	Identifier	iColor
>1371	ExpressionStatement	 
>1372	AssignmentExpr	nBlueValue = ( iBlue * 255 ) / ( C_LEVELS - 1 )
>1373	MultiplicativeExpression	( iBlue * 255 ) / ( C_LEVELS - 1 )
>1374	AdditiveExpression	C_LEVELS - 1
>1375	PrimaryExpression	1
>1376	Identifier	C_LEVELS
>1377	MultiplicativeExpression	iBlue * 255
>1378	PrimaryExpression	255
>1379	Identifier	iBlue
>1380	Identifier	nBlueValue
>1381	ExpressionStatement	 
>1382	AssignmentExpr	nGreenValue = ( iGreen * 255 ) / ( C_LEVELS - 1 )
>1383	MultiplicativeExpression	( iGreen * 255 ) / ( C_LEVELS - 1 )
>1384	AdditiveExpression	C_LEVELS - 1
>1385	PrimaryExpression	1
>1386	Identifier	C_LEVELS
>1387	MultiplicativeExpression	iGreen * 255
>1388	PrimaryExpression	255
>1389	Identifier	iGreen
>1390	Identifier	nGreenValue
>1391	ExpressionStatement	 
>1392	AssignmentExpr	nRedValue = ( iRed * 255 ) / ( C_LEVELS - 1 )
>1393	MultiplicativeExpression	( iRed * 255 ) / ( C_LEVELS - 1 )
>1394	AdditiveExpression	C_LEVELS - 1
>1395	PrimaryExpression	1
>1396	Identifier	C_LEVELS
>1397	MultiplicativeExpression	iRed * 255
>1398	PrimaryExpression	255
>1399	Identifier	iRed
>1400	Identifier	nRedValue
>1401	IdentifierDeclStatement	 
>1402	IdentifierDecl	nBestIndex = 0
>1403	AssignmentExpr	nBestIndex = 0
>1404	PrimaryExpression	0
>1405	Identifier	nBestIndex
>1406	Identifier	nBestIndex
>1407	IdentifierDeclType	int
>1408	IdentifierDecl	nBestDist = 768
>1409	AssignmentExpr	nBestDist = 768
>1410	PrimaryExpression	768
>1411	Identifier	nBestDist
>1412	Identifier	nBestDist
>1413	IdentifierDeclType	int
>1414	IdentifierDeclStatement	 
>1415	IdentifierDecl	nBlueValue
>1416	Identifier	nBlueValue
>1417	IdentifierDeclType	int
>1418	IdentifierDecl	nGreenValue
>1419	Identifier	nGreenValue
>1420	IdentifierDeclType	int
>1421	IdentifierDecl	nRedValue
>1422	Identifier	nRedValue
>1423	IdentifierDeclType	int
>1424	IncDecOp	 
>1425	IncDec	++
>1426	Identifier	iRed
>1427	Condition	 
>1428	RelationalExpression	iRed < C_LEVELS
>1429	Identifier	C_LEVELS
>1430	Identifier	iRed
>1431	ForInit	 
>1432	AssignmentExpr	iRed = 0
>1433	PrimaryExpression	0
>1434	Identifier	iRed
>1435	IncDecOp	 
>1436	IncDec	++
>1437	Identifier	iGreen
>1438	Condition	 
>1439	RelationalExpression	iGreen < C_LEVELS
>1440	Identifier	C_LEVELS
>1441	Identifier	iGreen
>1442	ForInit	 
>1443	AssignmentExpr	iGreen = 0
>1444	PrimaryExpression	0
>1445	Identifier	iGreen
>1446	IncDecOp	 
>1447	IncDec	++
>1448	Identifier	iBlue
>1449	Condition	 
>1450	RelationalExpression	iBlue < C_LEVELS
>1451	Identifier	C_LEVELS
>1452	Identifier	iBlue
>1453	ForInit	 
>1454	AssignmentExpr	iBlue = 0
>1455	PrimaryExpression	0
>1456	Identifier	iBlue
>1457	IdentifierDeclStatement	 
>1458	IdentifierDecl	iColor
>1459	Identifier	iColor
>1460	IdentifierDeclType	int
>1461	IdentifierDeclStatement	 
>1462	IdentifierDecl	iRed
>1463	Identifier	iRed
>1464	IdentifierDeclType	int
>1465	IdentifierDecl	iGreen
>1466	Identifier	iGreen
>1467	IdentifierDeclType	int
>1468	IdentifierDecl	iBlue
>1469	Identifier	iBlue
>1470	IdentifierDeclType	int
<5=29,28,6
<6=25,22,19,16,13,10,7
<7=9,8
<10=12,11
<13=15,14
<16=18,17
<19=21,20
<22=24,23
<25=27,26
<29=1179,1168,1157,1146,1135,1128,1121,1112,1103,1052,1020,1011,1000,991,954,896,892,873,862,849,845,834,823,812,801,782,743,739,87,76,74,67,60,53,46,39,32,30
<30=31
<32=33
<33=37,34
<34=35
<35=36
<37=38
<39=40
<40=44,41
<41=42
<42=43
<44=45
<46=47
<47=51,48
<48=49
<49=50
<51=52
<53=54
<54=58,55
<55=56
<56=57
<58=59
<60=61
<61=65,62
<62=63
<63=64
<65=66
<67=68
<68=72,69
<69=70
<70=71
<72=73
<74=75
<76=77
<77=85,78
<78=83,81,79
<79=80
<81=82
<83=84
<85=86
<87=735,731,728,88
<88=715,679,650,621,592,477,458,454,450,446,118,89
<89=90
<90=116,91
<91=114,112,110,108,106,104,102,100,98,96,94,92
<92=93
<94=95
<96=97
<98=99
<100=101
<102=103
<104=105
<106=107
<108=109
<110=111
<112=113
<114=115
<116=117
<118=442,438,435,119
<119=416,406,384,362,340,332,324,316,300,292,284,278,270,260,246,240,230,224,214,202,186,180,170,164,154,142,126,120
<120=121
<121=125,122
<122=124,123
<126=127
<127=133,128
<128=132,129
<129=131,130
<133=141,134
<134=138,135
<135=137,136
<138=140,139
<142=143
<143=145,144
<145=153,146
<146=150,147
<147=149,148
<150=152,151
<154=155
<155=157,156
<157=163,158
<158=160,159
<160=162,161
<164=165
<165=169,166
<166=168,167
<170=171
<171=179,172
<172=178,173
<173=177,174
<174=176,175
<180=181
<181=185,182
<182=184,183
<186=187
<187=193,188
<188=192,189
<189=191,190
<193=201,194
<194=198,195
<195=197,196
<198=200,199
<202=203
<203=205,204
<205=213,206
<206=210,207
<207=209,208
<210=212,211
<214=215
<215=217,216
<217=223,218
<218=220,219
<220=222,221
<224=225
<225=229,226
<226=228,227
<230=231
<231=239,232
<232=238,233
<233=237,234
<234=236,235
<240=241
<241=245,242
<242=244,243
<246=247
<247=253,248
<248=252,249
<249=251,250
<253=259,254
<254=256,255
<256=258,257
<260=261
<261=263,262
<263=269,264
<264=266,265
<266=268,267
<270=271
<271=273,272
<273=277,274
<274=276,275
<278=279
<279=283,280
<280=282,281
<284=285
<285=291,286
<286=290,287
<287=289,288
<292=293
<293=297,294
<294=296,295
<297=299,298
<300=301
<301=315,302
<302=314,303
<303=313,304
<304=310,305
<305=309,306
<306=308,307
<310=312,311
<316=317
<317=323,318
<318=322,319
<319=321,320
<324=325
<325=331,326
<326=330,327
<327=329,328
<332=333
<333=339,334
<334=338,335
<335=337,336
<340=341
<341=361,342
<342=359,343
<343=357,344
<344=345
<345=355,346
<346=353,347
<347=348
<348=350,349
<350=352,351
<353=354
<355=356
<357=358
<359=360
<362=363
<363=383,364
<364=381,365
<365=379,366
<366=367
<367=377,368
<368=375,369
<369=370
<370=372,371
<372=374,373
<375=376
<377=378
<379=380
<381=382
<384=385
<385=405,386
<386=403,387
<387=401,388
<388=389
<389=399,390
<390=397,391
<391=392
<392=394,393
<394=396,395
<397=398
<399=400
<401=402
<403=404
<406=413,410,407
<407=409,408
<410=412,411
<413=415,414
<416=432,429,426,423,420,417
<417=419,418
<420=422,421
<423=425,424
<426=428,427
<429=431,430
<432=434,433
<435=437,436
<438=439
<439=441,440
<442=443
<443=445,444
<446=447
<447=449,448
<450=451
<451=453,452
<454=455
<455=457,456
<458=459
<459=475,460
<460=473,471,461
<461=462
<462=468,463
<463=465,464
<465=467,466
<468=470,469
<471=472
<473=474
<475=476
<477=588,584,581,478
<478=547,513,479
<479=480
<480=510,481
<481=509,482
<482=507,483
<483=505,484
<484=485
<485=503,486
<486=501,487
<487=488
<488=498,489
<489=497,490
<490=494,491
<491=493,492
<494=496,495
<498=500,499
<501=502
<503=504
<505=506
<507=508
<510=512,511
<513=514
<514=544,515
<515=543,516
<516=541,517
<517=539,518
<518=519
<519=537,520
<520=535,521
<521=522
<522=532,523
<523=531,524
<524=528,525
<525=527,526
<528=530,529
<532=534,533
<535=536
<537=538
<539=540
<541=542
<544=546,545
<547=548
<548=578,549
<549=577,550
<550=575,551
<551=573,552
<552=553
<553=571,554
<554=569,555
<555=556
<556=566,557
<557=565,558
<558=562,559
<559=561,560
<562=564,563
<566=568,567
<569=570
<571=572
<573=574
<575=576
<578=580,579
<581=583,582
<584=585
<585=587,586
<588=589
<589=591,590
<592=593
<593=619,594
<594=617,615,613,611,609,607,605,603,601,599,597,595
<595=596
<597=598
<599=600
<601=602
<603=604
<605=606
<607=608
<609=610
<611=612
<613=614
<615=616
<617=618
<619=620
<621=622
<622=648,623
<623=646,644,642,640,638,636,634,632,630,628,626,624
<624=625
<626=627
<628=629
<630=631
<632=633
<634=635
<636=637
<638=639
<640=641
<642=643
<644=645
<646=647
<648=649
<650=651
<651=677,652
<652=675,673,671,669,667,665,663,661,659,657,655,653
<653=654
<655=656
<657=658
<659=660
<661=662
<663=664
<665=666
<667=668
<669=670
<671=672
<673=674
<675=676
<677=678
<679=698,680
<680=687,683,681
<681=682
<683=684
<684=686,685
<687=688
<688=696,689
<689=694,692,690
<690=691
<692=693
<694=695
<696=697
<698=699
<699=714,700
<700=712,701
<701=706,704,702
<702=703
<704=705
<706=707
<707=711,708
<708=710,709
<712=713
<715=725,722,719,716
<716=718,717
<719=721,720
<722=724,723
<725=727,726
<728=730,729
<731=732
<732=734,733
<735=736
<736=738,737
<739=740
<740=742,741
<743=762,744
<744=751,747,745
<745=746
<747=748
<748=750,749
<751=752
<752=760,753
<753=758,756,754
<754=755
<756=757
<758=759
<760=761
<762=763
<763=779,764
<764=776,765
<765=773,766
<766=770,767
<767=769,768
<770=772,771
<773=775,774
<776=778,777
<779=781,780
<782=783
<783=800,784
<784=799,785
<785=797,786
<786=793,787
<787=788
<788=790,789
<790=792,791
<793=794
<794=796,795
<797=798
<801=802
<802=811,803
<803=810,804
<804=808,805
<805=806
<806=807
<808=809
<812=813
<813=822,814
<814=821,815
<815=819,816
<816=817
<817=818
<819=820
<823=824
<824=833,825
<825=832,826
<826=830,827
<827=828
<828=829
<830=831
<834=835
<835=844,836
<836=843,837
<837=841,838
<838=839
<839=840
<841=842
<845=846
<846=848,847
<849=859,856,853,850
<850=852,851
<853=855,854
<856=858,857
<859=861,860
<862=863
<863=871,864
<864=869,867,865
<865=866
<867=868
<869=870
<871=872
<873=874
<874=891,875
<875=890,876
<876=888,877
<877=878
<878=879
<879=887,880
<880=886,881
<881=885,882
<882=884,883
<888=889
<892=893
<893=895,894
<896=950,946,943,897
<897=939,926,918,908,898
<898=899
<899=903,900
<900=902,901
<903=907,904
<904=906,905
<908=909
<909=913,910
<910=912,911
<913=917,914
<914=916,915
<918=919
<919=923,920
<920=922,921
<923=925,924
<926=927
<927=937,928
<928=935,933,929
<929=930
<930=932,931
<933=934
<935=936
<937=938
<939=940
<940=942,941
<943=945,944
<946=947
<947=949,948
<950=951
<951=953,952
<954=987,974,955
<955=956
<956=970,957
<957=969,968,967,966,965,964,963,962,961,960,958
<958=959
<970=971
<971=973,972
<974=986,985,984,983,982,981,980,979,978,977,975
<975=976
<987=988
<988=990,989
<991=992
<992=999,993
<993=997,994
<994=995
<995=996
<997=998
<1000=1008,1004,1001
<1001=1003,1002
<1004=1007,1006,1005
<1008=1010,1009
<1011=1016,1012
<1012=1013
<1013=1015,1014
<1016=1017
<1017=1019,1018
<1020=1034,1021
<1021=1033,1032,1031,1030,1029,1028,1027,1026,1025,1024,1022
<1022=1023
<1034=1035
<1035=1044,1036
<1036=1038,1037
<1038=1042,1039
<1039=1040
<1040=1041
<1042=1043
<1044=1046,1045
<1046=1050,1047
<1047=1048
<1048=1049
<1050=1051
<1052=1067,1053
<1053=1056,1054
<1054=1055
<1056=1057
<1057=1065,1058
<1058=1063,1061,1059
<1059=1060
<1061=1062
<1063=1064
<1065=1066
<1067=1068
<1068=1095,1069
<1069=1087,1070
<1070=1079,1071
<1071=1073,1072
<1073=1077,1074
<1074=1075
<1075=1076
<1077=1078
<1079=1081,1080
<1081=1085,1082
<1082=1083
<1083=1084
<1085=1086
<1087=1089,1088
<1089=1093,1090
<1090=1091
<1091=1092
<1093=1094
<1095=1097,1096
<1097=1101,1098
<1098=1099
<1099=1100
<1101=1102
<1103=1104
<1104=1111,1105
<1105=1109,1106
<1106=1107
<1107=1108
<1109=1110
<1112=1113
<1113=1120,1114
<1114=1118,1115
<1115=1116
<1116=1117
<1118=1119
<1121=1122
<1122=1127,1126,1123
<1123=1125,1124
<1128=1132,1129
<1129=1131,1130
<1132=1134,1133
<1135=1136
<1136=1144,1137
<1137=1142,1140,1138
<1138=1139
<1140=1141
<1142=1143
<1144=1145
<1146=1147
<1147=1155,1148
<1148=1153,1151,1149
<1149=1150
<1151=1152
<1153=1154
<1155=1156
<1157=1158
<1158=1166,1159
<1159=1164,1162,1160
<1160=1161
<1162=1163
<1164=1165
<1166=1167
<1168=1169
<1169=1177,1170
<1170=1175,1173,1171
<1171=1172
<1173=1174
<1175=1176
<1177=1178
<1179=1180
<1180=1188,1181
<1181=1186,1184,1182
<1182=1183
<1184=1185
<1186=1187
<1188=1189
<1264=1276,1275,1265
<1265=1272,1269,1266
<1266=1268,1267
<1269=1271,1270
<1272=1274,1273
<1276=1461,1457,1277
<1277=1453,1449,1446,1278
<1278=1279
<1279=1442,1438,1435,1280
<1280=1281
<1281=1431,1427,1424,1282
<1282=1414,1401,1391,1381,1371,1301,1283
<1283=1284
<1284=1288,1285
<1285=1287,1286
<1288=1300,1289
<1289=1299,1290
<1290=1296,1291
<1291=1295,1292
<1292=1294,1293
<1296=1298,1297
<1301=1367,1363,1360,1302
<1302=1356,1317,1303
<1303=1313,1304
<1304=1309,1305
<1305=1306
<1306=1308,1307
<1309=1310
<1310=1312,1311
<1313=1314
<1314=1316,1315
<1317=1318
<1318=1355,1319
<1319=1345,1320
<1320=1333,1321
<1321=1331,1322
<1322=1323
<1323=1324
<1324=1330,1325
<1325=1329,1326
<1326=1328,1327
<1331=1332
<1333=1343,1334
<1334=1335
<1335=1336
<1336=1342,1337
<1337=1341,1338
<1338=1340,1339
<1343=1344
<1345=1353,1346
<1346=1347
<1347=1348
<1348=1352,1349
<1349=1351,1350
<1353=1354
<1356=1357
<1357=1359,1358
<1360=1362,1361
<1363=1364
<1364=1366,1365
<1367=1368
<1368=1370,1369
<1371=1372
<1372=1380,1373
<1373=1377,1374
<1374=1376,1375
<1377=1379,1378
<1381=1382
<1382=1390,1383
<1383=1387,1384
<1384=1386,1385
<1387=1389,1388
<1391=1392
<1392=1400,1393
<1393=1397,1394
<1394=1396,1395
<1397=1399,1398
<1401=1408,1402
<1402=1407,1406,1403
<1403=1405,1404
<1408=1413,1412,1409
<1409=1411,1410
<1414=1421,1418,1415
<1415=1417,1416
<1418=1420,1419
<1421=1423,1422
<1424=1426,1425
<1427=1428
<1428=1430,1429
<1431=1432
<1432=1434,1433
<1435=1437,1436
<1438=1439
<1439=1441,1440
<1442=1443
<1443=1445,1444
<1446=1448,1447
<1449=1450
<1450=1452,1451
<1453=1454
<1454=1456,1455
<1457=1458
<1458=1460,1459
<1461=1468,1465,1462
<1462=1464,1463
<1465=1467,1466
<1468=1470,1469
