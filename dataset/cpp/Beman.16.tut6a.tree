>3	FunctionDef	main (int argc , char * argv [ ])
>4	ParameterList	int argc , char * argv [ ]
>5	Parameter	 
>6	Identifier	argv
>7	ParameterType	char * [ ]
>8	Parameter	 
>9	Identifier	argc
>10	ParameterType	int
>11	ReturnType	int
>12	CompoundStatement	 
>13	ReturnStatement	 
>14	PrimaryExpression	0
>15	BlockStarter	 
>16	CompoundStatement	 
>17	ExpressionStatement	std 
>18	ShiftExpression	std 
>19	ShiftExpression	ex . what ( ) << '\n'
>20	PrimaryExpression	'\n'
>21	CallExpression	ex . what ( )
>22	ArgumentList	 
>23	Callee	ex . what
>24	MemberAccess	ex . what
>25	Identifier	what
>26	Identifier	ex
>27	Identifier	std 
>28	ExpressionStatement	std 
>29	ShiftExpression	std 
>30	PrimaryExpression	\"************* exception *****************\n\"
>31	Identifier	std 
>32	Identifier	ex
>33	BlockStarter	 
>34	CompoundStatement	 
>35	ForStatement	for ( recursive_directory_iterator it ( argv [ 1 ] ) ; it != recursive_directory_iterator ( ) ; ++ it )
>36	CompoundStatement	 
>37	IfStatement	if ( it . level ( ) > 1 )
>38	ElseStatement	else
>39	CompoundStatement	 
>40	ExpressionStatement	std 
>41	ShiftExpression	std 
>42	ShiftExpression	it -> path ( ) << '\n'
>43	PrimaryExpression	'\n'
>44	CallExpression	it -> path ( )
>45	ArgumentList	 
>46	Callee	it -> path
>47	PtrMemberAccess	it -> path
>48	Identifier	path
>49	Identifier	it
>50	Identifier	std 
>51	ForStatement	for ( int i = 0 ; i <= it . level ( ) ; ++ i )
>52	ExpressionStatement	std 
>53	ShiftExpression	std 
>54	PrimaryExpression	\"  \"
>55	Identifier	std 
>56	UnaryExpression	++ i
>57	Identifier	i
>58	IncDec	++
>59	Condition	i <= it . level ( )
>60	RelationalExpression	i <= it . level ( )
>61	CallExpression	it . level ( )
>62	ArgumentList	 
>63	Callee	it . level
>64	MemberAccess	it . level
>65	Identifier	level
>66	Identifier	it
>67	Identifier	i
>68	ForInit	int i = 0 ;
>69	IdentifierDeclStatement	int i = 0 ;
>70	IdentifierDecl	i = 0
>71	AssignmentExpr	i = 0
>72	PrimaryExpression	0
>73	Identifier	i
>74	Identifier	i
>75	IdentifierDeclType	int
>76	ExpressionStatement	it . pop ( )
>77	CallExpression	it . pop ( )
>78	ArgumentList	 
>79	Callee	it . pop
>80	MemberAccess	it . pop
>81	Identifier	pop
>82	Identifier	it
>83	Condition	it . level ( ) > 1
>84	RelationalExpression	it . level ( ) > 1
>85	PrimaryExpression	1
>86	CallExpression	it . level ( )
>87	ArgumentList	 
>88	Callee	it . level
>89	MemberAccess	it . level
>90	Identifier	level
>91	Identifier	it
>92	UnaryExpression	++ it
>93	Identifier	it
>94	IncDec	++
>95	Condition	it != recursive_directory_iterator ( )
>96	EqualityExpression	it != recursive_directory_iterator ( )
>97	CallExpression	recursive_directory_iterator ( )
>98	ArgumentList	 
>99	Callee	recursive_directory_iterator
>100	Identifier	recursive_directory_iterator
>101	Identifier	it
>102	ForInit	recursive_directory_iterator it ( argv [ 1 ] ) ;
>103	IdentifierDeclStatement	recursive_directory_iterator it ( argv [ 1 ] ) ;
>104	IdentifierDecl	it ( argv [ 1 ] )
>105	ArrayIndexing	argv [ 1 ]
>106	PrimaryExpression	1
>107	Identifier	argv
>108	Identifier	it
>109	IdentifierDeclType	recursive_directory_iterator
>110	IfStatement	if ( argc < 2 )
>111	CompoundStatement	 
>112	ReturnStatement	 
>113	PrimaryExpression	1
>114	ExpressionStatement	 
>115	ShiftExpression	std 
>116	PrimaryExpression	\"Usage
>117	Identifier	std 
>118	Condition	 
>119	RelationalExpression	argc < 2
>120	PrimaryExpression	2
>121	Identifier	argc
<3=12,11,4
<4=8,5
<5=7,6
<8=10,9
<12=110,33,15,13
<13=14
<15=32,16
<16=28,17
<17=18
<18=27,19
<19=21,20
<21=23,22
<23=24
<24=26,25
<28=29
<29=31,30
<33=34
<34=35
<35=102,95,92,36
<36=37
<37=83,76,38
<38=39
<39=51,40
<40=41
<41=50,42
<42=44,43
<44=46,45
<46=47
<47=49,48
<51=68,59,56,52
<52=53
<53=55,54
<56=58,57
<59=60
<60=67,61
<61=63,62
<63=64
<64=66,65
<68=69
<69=70
<70=75,74,71
<71=73,72
<76=77
<77=79,78
<79=80
<80=82,81
<83=84
<84=86,85
<86=88,87
<88=89
<89=91,90
<92=94,93
<95=96
<96=101,97
<97=99,98
<99=100
<102=103
<103=104
<104=109,108,105
<105=107,106
<110=118,111
<111=114,112
<112=113
<114=115
<115=117,116
<118=119
<119=121,120
